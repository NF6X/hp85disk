
gpib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000164e  00800100  0001d61c  0001d6b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0001d61c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000008e2  0080174e  0080174e  0001ecfe  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0001ecfe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001ed10  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00001720  00000000  00000000  0001ed50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00029087  00000000  00000000  00020470  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000615d  00000000  00000000  000494f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0001254f  00000000  00000000  0004f654  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00005118  00000000  00000000  00061ba4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004a4f  00000000  00000000  00066cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0002454b  00000000  00000000  0006b70b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001768  00000000  00000000  0008fc56  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00800100 l    d  .data	00000000 .data
00000000 l    d  .text	00000000 .text
0080174e l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .note.gnu.avr.deviceinfo	00000000 .note.gnu.avr.deviceinfo
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 malloc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000001c2 l     O .text	0000001e __c.3622
000001e0 l     O .text	0000001d __c.3617
0080174e l     O .bss	00000001 error_flag
00000000 l    df *ABS*	00000000 time.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00006d36 l     F .text	0000002a IS_Leap
00800388 l     O .data	00000018 __days
008017c6 l     O .bss	00000016 t.3676
008017dc l     O .bss	00000002 p.3677
008017a8 l     O .bss	00000008 ts.3755
008017b0 l     O .bss	00000016 t.3688
008003a0 l     O .data	0000001a __days_sum
00000719 l     O .text	00000012 __c.3795
00000708 l     O .text	00000011 __c.3797
000006f7 l     O .text	00000011 __c.3799
000006e5 l     O .text	00000012 __c.3801
000006d4 l     O .text	00000011 __c.3803
000006bd l     O .text	00000017 __c.3805
0000072b l     O .text	00000021 __c.3774
0000074c l     O .text	0000001d __c.3649
008017fe l     O .bss	00000020 buf.3654
008017de l     O .bss	00000020 buf.3666
000006ab l     O .text	00000012 __c.3851
00000696 l     O .text	00000015 __c.3853
0000067f l     O .text	00000017 __c.3855
00000665 l     O .text	0000001a __c.3857
00000641 l     O .text	00000024 __c.3859
0000062f l     O .text	00000012 __c.3866
0000061e l     O .text	00000011 __c.3868
0000060d l     O .text	00000011 __c.3870
000005fb l     O .text	00000012 __c.3872
000005ea l     O .text	00000011 __c.3874
00000000 l    df *ABS*	00000000 mmc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000d3e0 l     F .text	00000004 xchg_spi
0000d3e4 l     F .text	0000000c deselect
0000d3f0 l     F .text	00000046 rcvr_datablock
0000d45a l     F .text	00000044 select
00000769 l     O .text	00000010 __c.3617
0000d49e l     F .text	00000086 send_cmd
0000d524 l     F .text	0000004e xmit_datablock
00801823 l     O .bss	00000001 CardType
00801825 l     O .bss	00000001 Timer1
00801824 l     O .bss	00000001 Timer2
00000000 l    df *ABS*	00000000 posix.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00800ba6 l     O .data	00000014 CSWTCH.97
00000bce l     O .text	00000018 __c.3594
00000bb6 l     O .text	00000018 __c.3601
0000ecd4 l     F .text	0000001a _fprintf_putc
00801930 l     O .bss	0000002e _dp
00801830 l     O .bss	00000100 _de
00000ba2 l     O .text	00000008 __c.3917
00000b9e l     O .text	00000004 __c.3919
00000baa l     O .text	0000000c __c.3672
00000000 l    df *ABS*	00000000 posix_tests.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000e74 l     O .text	0000000c __c.3618
00000dae l     O .text	000000c6 __c.3620
00000d0b l     O .text	0000000c __c.3687
00000cfb l     O .text	00000010 __c.3689
00000cee l     O .text	0000000d __c.3691
00000cde l     O .text	00000010 __c.3693
00000cd1 l     O .text	0000000d __c.3695
00000cb5 l     O .text	0000000f __c.3700
00000cc4 l     O .text	0000000d __c.3697
00000ca2 l     O .text	00000013 __c.3704
00800180 l     O .data	00000002 _pagesize
00000c9b l     O .text	00000007 __c.3714
00000c99 l     O .text	00000002 __c.3716
00000d24 l     O .text	00000010 __c.3669
00000d22 l     O .text	00000002 __c.3674
00000d17 l     O .text	0000000b __c.3676
00000c87 l     O .text	00000012 __c.3728
00000c83 l     O .text	00000004 __c.3730
00000c69 l     O .text	0000001a __c.3735
00000c48 l     O .text	00000021 __c.3748
00000c32 l     O .text	00000016 __c.3750
00000c24 l     O .text	0000000e __c.3752
00000bf1 l     O .text	00000023 __c.3760
00000c14 l     O .text	00000010 __c.3757
00000be6 l     O .text	0000000b __c.3764
00000d9d l     O .text	00000011 __c.3636
00000d85 l     O .text	00000018 __c.3640
00000d74 l     O .text	00000011 __c.3647
00000d68 l     O .text	0000000c __c.3651
00000d64 l     O .text	00000004 __c.3653
00000d53 l     O .text	00000011 __c.3655
00000d45 l     O .text	0000000e __c.3657
00000d34 l     O .text	00000011 __c.3659
00000000 l    df *ABS*	00000000 gpib.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00001218 l     O .text	00000011 __c.4240
00001205 l     O .text	00000013 __c.4252
000011df l     O .text	00000026 __c.4257
000011c4 l     O .text	0000001b __c.4259
0000119d l     O .text	00000027 __c.4264
00001182 l     O .text	0000001b __c.4266
00001154 l     O .text	0000002e __c.4282
0000104f l     O .text	0000002f __c.4313
0000107e l     O .text	0000003c __c.4309
000010f6 l     O .text	0000003f __c.4303
000010ba l     O .text	0000003c __c.4305
00001135 l     O .text	0000001f __c.4298
0000103c l     O .text	00000013 __c.4318
00001015 l     O .text	00000009 __c.4360
0000100f l     O .text	00000006 __c.4362
00001004 l     O .text	0000000b __c.4366
00000ff9 l     O .text	0000000b __c.4368
00000fee l     O .text	0000000b __c.4370
0000101e l     O .text	0000001e __c.4334
00000fd5 l     O .text	00000019 __c.4386
00000fa8 l     O .text	0000002d __c.4389
00000f81 l     O .text	00000027 __c.4393
00000f67 l     O .text	0000001a __c.4403
00000f39 l     O .text	0000002e __c.4405
00000f1f l     O .text	0000001a __c.4410
00000ef7 l     O .text	00000028 __c.4418
00000000 l    df *ABS*	00000000 gpib_task.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000014cb l     O .text	00000012 __c.4248
000014ba l     O .text	00000011 __c.4250
000014a1 l     O .text	00000019 __c.4252
00001487 l     O .text	0000001a __c.4298
0000145c l     O .text	0000002b __c.4300
00001445 l     O .text	00000017 __c.4302
00001439 l     O .text	0000000c __c.4304
00001433 l     O .text	00000006 __c.4308
00001421 l     O .text	00000012 __c.4310
0000141a l     O .text	00000007 __c.4315
0000140f l     O .text	0000000b __c.4317
00001408 l     O .text	00000007 __c.4319
000013fb l     O .text	0000000d __c.4321
000013ea l     O .text	00000011 __c.4323
000013c9 l     O .text	00000021 __c.4350
000013af l     O .text	0000001a __c.4352
00001397 l     O .text	00000018 __c.4357
0000137f l     O .text	00000018 __c.4359
00001378 l     O .text	00000007 __c.4361
00001371 l     O .text	00000007 __c.4363
0000136a l     O .text	00000007 __c.4365
0000135e l     O .text	0000000c __c.4367
00001351 l     O .text	0000000d __c.4369
0000134a l     O .text	00000007 __c.4371
00001329 l     O .text	00000021 __c.4373
000012d6 l     O .text	00000007 __c.4393
000012c5 l     O .text	00000011 __c.4395
000012b3 l     O .text	00000012 __c.4397
0000129f l     O .text	00000014 __c.4399
0000128f l     O .text	00000010 __c.4401
00001283 l     O .text	0000000c __c.4403
00001272 l     O .text	00000011 __c.4408
00001260 l     O .text	00000012 __c.4410
0000123a l     O .text	00000026 __c.4412
00001229 l     O .text	00000011 __c.4417
00001322 l     O .text	00000007 __c.4378
00001320 l     O .text	00000002 __c.4380
0000130e l     O .text	00000012 __c.4382
000012fd l     O .text	00000011 __c.4384
000012e9 l     O .text	00000014 __c.4386
000012dd l     O .text	0000000c __c.4388
00000000 l    df *ABS*	00000000 drives.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000213e l     O .text	00000015 __c.4467
00002132 l     O .text	0000000c __c.4478
0000212e l     O .text	00000004 __c.4488
00001df8 l     O .text	00000012 __c.4634
00001dda l     O .text	00000002 __c.4643
00001ddc l     O .text	00000009 __c.4641
00001de5 l     O .text	0000000a __c.4639
00001def l     O .text	00000009 __c.4637
00001dd8 l     O .text	00000002 __c.4648
00001db8 l     O .text	00000020 __c.4657
00001d3d l     O .text	00000002 __c.4672
00001d72 l     O .text	0000000a __c.4666
00001d53 l     O .text	0000001f __c.4668
00001d3f l     O .text	00000014 __c.4670
00001daf l     O .text	00000009 __c.4660
00001d90 l     O .text	0000001f __c.4662
00001d7c l     O .text	00000014 __c.4664
00001d3b l     O .text	00000002 __c.4677
00001d16 l     O .text	00000025 __c.4716
00001cdd l     O .text	00000039 __c.4718
00001ca8 l     O .text	00000035 __c.4720
00001c73 l     O .text	00000035 __c.4722
00001c3b l     O .text	00000038 __c.4724
00001c10 l     O .text	0000002b __c.4726
00001bec l     O .text	00000024 __c.4747
00001bca l     O .text	00000022 __c.4755
00801976 l     O .bss	00000002 stack_ind
0080196c l     O .bss	0000000a stack_p
00001ba2 l     O .text	00000028 __c.4791
00001b7a l     O .text	00000028 __c.4797
00001a57 l     O .text	0000001a __c.4851
00001a4f l     O .text	00000008 __c.4853
00001a71 l     O .text	00000022 __c.4849
00001a9b l     O .text	0000001a __c.4845
00001a93 l     O .text	00000008 __c.4847
00001ab5 l     O .text	00000022 __c.4843
00001a46 l     O .text	00000009 __c.4861
00001a35 l     O .text	00000011 __c.4863
00001a16 l     O .text	0000001f __c.4865
000019f8 l     O .text	0000001e __c.4867
000019f6 l     O .text	00000002 __c.4869
000019e4 l     O .text	00000012 __c.4871
000019cf l     O .text	00000015 __c.4873
000019cd l     O .text	00000002 __c.4875
000019b2 l     O .text	0000001b __c.4877
000019a7 l     O .text	0000000b __c.4879
0000199f l     O .text	00000008 __c.4915
0000198d l     O .text	00000012 __c.4917
0000196a l     O .text	00000023 __c.4919
0000194b l     O .text	0000001f __c.4921
0000186a l     O .text	00000015 __c.4952
00001855 l     O .text	00000015 __c.4954
00001843 l     O .text	00000012 __c.4956
00001b5f l     O .text	0000001b __c.4813
00001b29 l     O .text	00000036 __c.4819
00001af2 l     O .text	00000037 __c.4821
00001ad7 l     O .text	0000001b __c.4823
00002121 l     O .text	0000000d __c.4509
00001e70 l     O .text	00000022 __c.4620
00001e92 l     O .text	00000030 __c.4617
00001ec2 l     O .text	0000002f __c.4608
00001ef1 l     O .text	00000030 __c.4605
00001f21 l     O .text	0000002e __c.4596
00001f4f l     O .text	0000002e __c.4588
00002103 l     O .text	0000001e __c.4511
000020e1 l     O .text	00000022 __c.4514
000020bf l     O .text	00000022 __c.4525
00002095 l     O .text	0000002a __c.4529
00002064 l     O .text	00000031 __c.4532
00002037 l     O .text	0000002d __c.4542
00002009 l     O .text	0000002e __c.4550
00001fdb l     O .text	0000002e __c.4553
00001fa9 l     O .text	00000032 __c.4561
00001f7d l     O .text	0000002c __c.4578
00001e4e l     O .text	00000022 __c.4624
00001e31 l     O .text	0000001d __c.4626
00001e0a l     O .text	00000027 __c.4628
00001833 l     O .text	00000010 __c.4961
00001831 l     O .text	00000002 __c.4966
00001925 l     O .text	00000026 __c.4932
000018fd l     O .text	00000028 __c.4934
000018d3 l     O .text	0000002a __c.4938
000018a8 l     O .text	0000002b __c.4942
0000187f l     O .text	00000029 __c.4944
00000000 l    df *ABS*	00000000 ss80.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00801998 l     O .bss	00000005 B.4253
00801985 l     O .bss	00000013 B.4257
00801978 l     O .bss	0000000d B.4261
000027f3 l     O .text	00000005 __c.4364
000027e8 l     O .text	0000000b __c.4366
000027d4 l     O .text	00000014 __c.4376
000027b9 l     O .text	0000001b __c.4378
000027a8 l     O .text	00000011 __c.4386
00002785 l     O .text	00000023 __c.4388
00002768 l     O .text	0000001d __c.4390
00002749 l     O .text	0000001f __c.4392
00002731 l     O .text	00000018 __c.4397
00002717 l     O .text	0000001a __c.4402
000026f1 l     O .text	00000026 __c.4411
000026d8 l     O .text	00000019 __c.4413
000025dc l     O .text	00000025 __c.4435
00002601 l     O .text	0000001a __c.4433
0000261b l     O .text	00000016 __c.4431
00002631 l     O .text	0000000e __c.4429
0000263f l     O .text	0000001c __c.4427
0000265b l     O .text	0000001d __c.4425
000026c2 l     O .text	00000016 __c.4415
000026a9 l     O .text	00000019 __c.4418
00002691 l     O .text	00000018 __c.4420
00002678 l     O .text	00000019 __c.4423
000025bb l     O .text	00000021 __c.4437
000025a5 l     O .text	00000016 __c.4439
00002588 l     O .text	0000001d __c.4441
0000256c l     O .text	0000001c __c.4443
0000255b l     O .text	00000011 __c.4445
0000253d l     O .text	0000001e __c.4447
0000251e l     O .text	0000001f __c.4449
00002503 l     O .text	0000001b __c.4451
000024ea l     O .text	00000019 __c.4453
000024d3 l     O .text	00000017 __c.4455
000024b0 l     O .text	00000023 __c.4457
00002490 l     O .text	00000020 __c.4459
00002458 l     O .text	00000038 __c.4462
00002315 l     O .text	00000020 __c.4495
00002301 l     O .text	00000014 __c.4497
00002898 l     O .text	00000029 __c.4325
0000284b l     O .text	00000026 __c.4333
00002871 l     O .text	00000014 __c.4331
00002885 l     O .text	00000013 __c.4327
00002823 l     O .text	00000028 __c.4337
000027f8 l     O .text	0000002b __c.4339
000022e7 l     O .text	0000001a __c.4504
000022d4 l     O .text	00000013 __c.4506
000029a1 l     O .text	00000013 __c.4267
000022c8 l     O .text	0000000c __c.4520
000022b5 l     O .text	00000013 __c.4527
000022a6 l     O .text	0000000f __c.4529
00002445 l     O .text	00000013 __c.4471
0000242c l     O .text	00000019 __c.4473
00002407 l     O .text	00000025 __c.4476
000023ea l     O .text	0000001d __c.4479
000023cc l     O .text	0000001e __c.4481
000023a5 l     O .text	00000027 __c.4483
00002391 l     O .text	00000014 __c.4485
00002371 l     O .text	00000020 __c.4487
00002335 l     O .text	0000003c __c.4490
00002283 l     O .text	00000023 __c.4543
0000295d l     O .text	00000028 __c.4300
0000293f l     O .text	0000001e __c.4302
0000290e l     O .text	00000019 __c.4306
00002927 l     O .text	00000018 __c.4304
000028e9 l     O .text	00000025 __c.4311
000028c1 l     O .text	00000028 __c.4313
00002985 l     O .text	0000001c __c.4283
0000226d l     O .text	00000016 __c.4548
00002257 l     O .text	00000016 __c.4550
00002242 l     O .text	00000015 __c.4552
00002233 l     O .text	0000000f __c.4554
0000221f l     O .text	00000014 __c.4556
000021eb l     O .text	00000034 __c.4558
000021b7 l     O .text	00000034 __c.4560
00000000 l    df *ABS*	00000000 main.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
008019ea l     O .bss	00000002 lcd_display_time
00004bfa l     O .text	00000030 __c.4466
00004bdb l     O .text	0000001f __c.4468
00004bbe l     O .text	0000001d __c.4470
00004bae l     O .text	00000010 __c.4472
00004b87 l     O .text	00000027 __c.4474
00004b6d l     O .text	0000001a __c.4476
00004b53 l     O .text	0000001a __c.4478
00004b51 l     O .text	00000002 __c.4480
00004b3b l     O .text	00000016 __c.4494
00004b21 l     O .text	0000001a __c.4500
00004b03 l     O .text	0000001e __c.4506
00004aed l     O .text	00000016 __c.4508
00004ae7 l     O .text	00000006 __c.4510
00004ae1 l     O .text	00000006 __c.4512
00004ac7 l     O .text	0000001a __c.4514
00004ac1 l     O .text	00000006 __c.4521
00004abb l     O .text	00000006 __c.4523
000049fa l     O .text	000000c1 __c.4530
0001c53c l     F .text	0000038e user_task.part.1
000049f7 l     O .text	00000003 __c.4543
000049e2 l     O .text	00000015 __c.4545
000049d9 l     O .text	00000009 __c.4547
000049c4 l     O .text	00000015 __c.4552
000049c0 l     O .text	00000004 __c.4560
000049b0 l     O .text	00000010 __c.4562
0000499f l     O .text	00000011 __c.4564
00004986 l     O .text	00000019 __c.4566
00004979 l     O .text	0000000d __c.4568
00004968 l     O .text	00000011 __c.4576
00004962 l     O .text	00000006 __c.4578
0000495b l     O .text	00000007 __c.4586
0000494a l     O .text	00000011 __c.4588
00004923 l     O .text	00000027 __c.4590
00004904 l     O .text	0000001f __c.4592
000048e7 l     O .text	0000001d __c.4594
000048d7 l     O .text	00000010 __c.4596
000048b0 l     O .text	00000027 __c.4598
00004896 l     O .text	0000001a __c.4600
0000487c l     O .text	0000001a __c.4602
00004866 l     O .text	00000016 __c.4604
00004850 l     O .text	00000016 __c.4606
0000483e l     O .text	00000012 __c.4608
0000482f l     O .text	0000000f __c.4610
00004801 l     O .text	0000002e __c.4612
000047e9 l     O .text	00000018 __c.4614
000047d8 l     O .text	00000011 __c.4616
000047c2 l     O .text	00000016 __c.4618
000047ad l     O .text	00000015 __c.4620
0000479b l     O .text	00000012 __c.4622
00004783 l     O .text	00000018 __c.4624
0000476e l     O .text	00000015 __c.4626
00004758 l     O .text	00000016 __c.4628
00004742 l     O .text	00000016 __c.4630
0000473c l     O .text	00000006 __c.4632
00004722 l     O .text	0000001a __c.4634
0000470e l     O .text	00000014 __c.4636
00000000 l    df *ABS*	00000000 i2c.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000429 l     O .text	00000018 __c.3593
00000410 l     O .text	00000019 __c.3595
000003fa l     O .text	00000016 __c.3597
000003de l     O .text	0000001c __c.3640
00801755 l     O .bss	00000001 i2c_init_status
000003c7 l     O .text	00000017 __c.3646
00005bb8 l     F .text	00000014 i2c_next
000003c1 l     O .text	00000006 __c.3696
000003b3 l     O .text	0000000e __c.3698
000003a9 l     O .text	0000000a __c.3700
0000039d l     O .text	0000000c __c.3702
0000038b l     O .text	00000012 __c.3704
00000379 l     O .text	00000012 __c.3706
00000366 l     O .text	00000013 __c.3708
00000364 l     O .text	00000002 __c.3710
00000351 l     O .text	00000013 __c.3715
0000033d l     O .text	00000014 __c.3717
00000333 l     O .text	0000000a __c.3719
00000331 l     O .text	00000002 __c.3721
00000000 l    df *ABS*	00000000 parsing.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000051e l     O .text	00000020 __c.3586
000004f8 l     O .text	00000026 __c.3629
00000000 l    df *ABS*	00000000 printf.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00007caa l     F .text	00000018 _putc_fn
00000000 l    df *ABS*	00000000 ff.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00008fa4 l     F .text	0000002a ld_dword
00008fce l     F .text	0000000c st_dword
00008fda l     F .text	00000012 mem_set
00008fec l     F .text	0000001e mem_cmp
0000900a l     F .text	00000050 clst2sect
0000905a l     F .text	00000078 clmt_clust
000090d2 l     F .text	0000001e sum_sfn
0080046b l     O .data	00000080 ExCvt
000090f0 l     F .text	00000058 get_ldnumber
0080181e l     O .bss	00000001 CurrVol
00009148 l     F .text	00000058 validate
000091a0 l     F .text	00000254 get_fileinfo
000093f4 l     F .text	00000016 mem_cpy.part.0
0000940a l     F .text	0000002a ld_clust.isra.3
00009434 l     F .text	0000001a st_clust.isra.4
0000944e l     F .text	000000a6 sync_window.part.5
000094f4 l     F .text	000000e4 sync_fs
000095d8 l     F .text	00000150 dir_clear
00009728 l     F .text	00000076 move_window
0000979e l     F .text	00000080 check_fs
0000981e l     F .text	000004b4 mount_volume
00801821 l     O .bss	00000002 FatFs
0080181f l     O .bss	00000002 Fsid
00009cd2 l     F .text	000001f2 put_fat
00009ec4 l     F .text	00000168 get_fat.isra.9
0000a02c l     F .text	00000182 dir_sdi
0000a1ae l     F .text	0000024c create_chain
0000a3fa l     F .text	00000122 remove_chain
0000a51c l     F .text	000001d0 dir_next
0000a6ec l     F .text	00000072 dir_alloc
0000a75e l     F .text	00000192 dir_read
008004eb l     O .data	0000000d LfnOfs
0000a8f0 l     F .text	00000090 dir_remove
0000a980 l     F .text	0000021c dir_find
0000ab9c l     F .text	0000031c dir_register
0000aeb8 l     F .text	00000478 follow_path
00000000 l    df *ABS*	00000000 ffunicode.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
008007a6 l     O .data	00000100 uc437
008004f8 l     O .data	000000bc cvt2.1843
008005b4 l     O .data	000001f2 cvt1.1842
00000000 l    df *ABS*	00000000 mmc_hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000de4e l     F .text	00000048 mmc_task
00000827 l     O .text	0000001c __c.3594
0000081a l     O .text	0000000d __c.3622
0000080a l     O .text	00000010 __c.3636
00801826 l     O .bss	00000002 mmc_init_flag
000007ea l     O .text	00000020 __c.3638
000007d7 l     O .text	00000013 __c.3640
000007cb l     O .text	0000000c __c.3642
000007ba l     O .text	00000011 __c.3644
0000079c l     O .text	0000001e __c.3647
00000787 l     O .text	00000015 __c.3649
00000779 l     O .text	0000000e __c.3651
00000000 l    df *ABS*	00000000 fatfs_sup.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000a9c l     O .text	00000007 __c.3596
008008ca l     O .data	00000008 CSWTCH.25
00000a8b l     O .text	00000011 __c.3632
00000a6c l     O .text	0000001f __c.3634
00000a4e l     O .text	0000001e __c.3636
00000a2f l     O .text	0000001f __c.3638
00000a11 l     O .text	0000001e __c.3640
000009f3 l     O .text	0000001e __c.3642
000009d4 l     O .text	0000001f __c.3644
000009b5 l     O .text	0000001f __c.3646
00000996 l     O .text	0000001f __c.3648
00000977 l     O .text	0000001f __c.3650
00000958 l     O .text	0000001f __c.3652
00000938 l     O .text	00000020 __c.3654
0000091a l     O .text	0000001e __c.3656
000008f5 l     O .text	00000025 __c.3658
000008cf l     O .text	00000026 __c.3660
00000882 l     O .text	0000004d __c.3662
00000867 l     O .text	0000001b __c.3668
00000845 l     O .text	00000022 __c.3670
00000843 l     O .text	00000002 __c.3672
00000000 l    df *ABS*	00000000 fatfs_tests.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000b21 l     O .text	0000007d __c.3587
00000ae1 l     O .text	0000000e __c.3622
00000ab8 l     O .text	00000029 __c.3626
00000aa3 l     O .text	00000015 __c.3628
00000b11 l     O .text	00000010 __c.3605
00000afd l     O .text	00000014 __c.3607
00000aef l     O .text	0000000e __c.3609
00000000 l    df *ABS*	00000000 gpib_tests.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00001825 l     O .text	0000000c __c.4433
000014ea l     O .text	0000033b __c.4435
000014dd l     O .text	0000000d __c.4443
00000000 l    df *ABS*	00000000 drives_sup.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00002193 l     O .text	00000007 __c.3641
0000219a l     O .text	0000001d __c.3637
00002175 l     O .text	0000001e __c.3643
00002153 l     O .text	00000022 __c.3648
00000000 l    df *ABS*	00000000 amigo.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000165b6 l     F .text	000000ac amigo_overflow_check
0000316f l     O .text	00000019 __c.4190
00016662 l     F .text	000000e8 amigo_chs_to_logical
0000311c l     O .text	0000002b __c.4183
000031ef l     O .text	00000018 __c.4160
000031d1 l     O .text	0000001e __c.4166
000031b7 l     O .text	0000001a __c.4168
000031a2 l     O .text	00000015 __c.4174
00003188 l     O .text	0000001a __c.4176
00003147 l     O .text	00000028 __c.4213
0000310c l     O .text	00000010 __c.4224
000030f7 l     O .text	00000015 __c.4228
000030e5 l     O .text	00000012 __c.4234
000030cb l     O .text	0000001a __c.4240
000030b9 l     O .text	00000012 __c.4247
0000309a l     O .text	0000001f __c.4249
0000307a l     O .text	00000020 __c.4251
00003060 l     O .text	0000001a __c.4258
00003053 l     O .text	0000000d __c.4260
00003044 l     O .text	0000000f __c.4273
00002fdd l     O .text	00000067 __c.4280
00002f76 l     O .text	00000067 __c.4282
00002f0f l     O .text	00000067 __c.4284
00002eaa l     O .text	00000065 __c.4286
00002e5a l     O .text	00000050 __c.4291
00002e0a l     O .text	00000050 __c.4293
00002dba l     O .text	00000050 __c.4295
00002d69 l     O .text	00000051 __c.4297
00002d37 l     O .text	00000032 __c.4309
00002d15 l     O .text	00000022 __c.4311
00002cf4 l     O .text	00000021 __c.4313
00002cd3 l     O .text	00000021 __c.4315
00002ca4 l     O .text	0000002f __c.4317
00002c84 l     O .text	00000020 __c.4320
00002c70 l     O .text	00000014 __c.4323
00002c5c l     O .text	00000014 __c.4326
00002c33 l     O .text	00000029 __c.4328
00002c12 l     O .text	00000021 __c.4330
00002c02 l     O .text	00000010 __c.4333
00002be0 l     O .text	00000022 __c.4335
00002bc4 l     O .text	0000001c __c.4337
00002b9b l     O .text	00000029 __c.4339
00002b7b l     O .text	00000020 __c.4341
00002b50 l     O .text	0000002b __c.4343
00002b31 l     O .text	0000001f __c.4345
00002b21 l     O .text	00000010 __c.4348
00002aef l     O .text	00000032 __c.4353
00002acf l     O .text	00000020 __c.4357
00002aae l     O .text	00000021 __c.4360
00002a8f l     O .text	0000001f __c.4363
00002a6d l     O .text	00000022 __c.4366
00002a51 l     O .text	0000001c __c.4369
00002a31 l     O .text	00000020 __c.4372
00002a08 l     O .text	00000029 __c.4377
000029dd l     O .text	0000002b __c.4380
000029b4 l     O .text	00000029 __c.4383
00000000 l    df *ABS*	00000000 printer.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00003244 l     O .text	00000021 __c.4132
00003273 l     O .text	00000015 __c.4124
00003265 l     O .text	0000000e __c.4126
000032aa l     O .text	00000022 __c.4114
00003294 l     O .text	00000016 __c.4116
00003288 l     O .text	0000000c __c.4118
0000323d l     O .text	00000007 __c.4138
00003221 l     O .text	0000001c __c.4143
00003207 l     O .text	0000001a __c.4145
00000000 l    df *ABS*	00000000 lifutils.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00004702 l     O .text	0000000c __c.3845
0000453e l     O .text	000001c4 __c.3847
000044d7 l     O .text	00000029 __c.3868
000044bf l     O .text	00000018 __c.3873
0000449a l     O .text	00000025 __c.3885
00004481 l     O .text	00000019 __c.3891
00004460 l     O .text	00000021 __c.3898
00004424 l     O .text	0000003c __c.3907
000043e7 l     O .text	0000003d __c.3916
008019ca l     O .bss	00000020 _lif_ctime_buf.4019
008019aa l     O .bss	00000020 _timestr.4024
000043e2 l     O .text	00000005 __c.4039
000043c8 l     O .text	0000001a __c.4041
000043ab l     O .text	0000001d __c.4043
0000438e l     O .text	0000001d __c.4045
00004371 l     O .text	0000001d __c.4047
00004354 l     O .text	0000001d __c.4049
00004337 l     O .text	0000001d __c.4051
0000431a l     O .text	0000001d __c.4053
000042fd l     O .text	0000001d __c.4055
000042e0 l     O .text	0000001d __c.4057
000042c6 l     O .text	0000001a __c.4059
000042aa l     O .text	0000001c __c.4061
0000428d l     O .text	0000001d __c.4063
00004270 l     O .text	0000001d __c.4065
00004254 l     O .text	0000001c __c.4067
00004238 l     O .text	0000001c __c.4069
0000421e l     O .text	0000001a __c.4071
00004204 l     O .text	0000001a __c.4073
000041e8 l     O .text	0000001c __c.4075
000041cc l     O .text	0000001c __c.4077
000041af l     O .text	0000001d __c.4079
00004192 l     O .text	0000001d __c.4081
00004175 l     O .text	0000001d __c.4083
00004159 l     O .text	0000001c __c.4085
0000413f l     O .text	0000001a __c.4087
0000413d l     O .text	00000002 __c.4089
0000411e l     O .text	0000001f __c.4096
000040e5 l     O .text	00000039 __c.4098
000040cd l     O .text	00000018 __c.4100
00004094 l     O .text	00000039 __c.4102
0000405b l     O .text	00000039 __c.4104
00004036 l     O .text	00000025 __c.4106
00004007 l     O .text	0000002f __c.4108
00003fdb l     O .text	0000002c __c.4110
00003fba l     O .text	00000021 __c.4116
00003f76 l     O .text	00000044 __c.4118
00003f35 l     O .text	00000041 __c.4120
00003f07 l     O .text	0000002e __c.4122
00003ebc l     O .text	0000004b __c.4124
00003e71 l     O .text	0000004b __c.4126
00003e46 l     O .text	0000002b __c.4128
00003e1a l     O .text	0000002c __c.4130
00003d57 l     O .text	0000003a __c.4185
00003d37 l     O .text	00000020 __c.4194
00003cea l     O .text	0000004d __c.4219
00003dc5 l     O .text	00000055 __c.4146
00003db8 l     O .text	0000000d __c.4148
00003dab l     O .text	0000000d __c.4156
00003d9e l     O .text	0000000d __c.4161
00003d91 l     O .text	0000000d __c.4166
00003cb2 l     O .text	00000038 __c.4231
00003c89 l     O .text	00000029 __c.4233
00003c38 l     O .text	00000051 __c.4236
00003bf9 l     O .text	0000003f __c.4249
00003bc3 l     O .text	00000036 __c.4251
00003b90 l     O .text	00000033 __c.4253
00003b5d l     O .text	00000033 __c.4255
00003b46 l     O .text	00000017 __c.4265
00003b06 l     O .text	00000040 __c.4267
00003aba l     O .text	0000004c __c.4270
00003a8a l     O .text	00000030 __c.4272
00003a88 l     O .text	00000002 __c.4275
00003a7c l     O .text	0000000c __c.4277
00003a6f l     O .text	0000000d __c.4279
00003a5e l     O .text	00000011 __c.4281
00003a4b l     O .text	00000013 __c.4283
00003a38 l     O .text	00000013 __c.4285
00003a25 l     O .text	00000013 __c.4287
000039fe l     O .text	00000027 __c.4294
000039d9 l     O .text	00000025 __c.4296
000039a0 l     O .text	00000039 __c.4310
0000397c l     O .text	00000024 __c.4327
0000396e l     O .text	0000000e __c.4344
00003960 l     O .text	0000000e __c.4349
00003952 l     O .text	0000000e __c.4351
0000391f l     O .text	00000033 __c.4365
000038f1 l     O .text	0000002e __c.4367
000038c2 l     O .text	0000002f __c.4369
00003892 l     O .text	00000030 __c.4371
00003863 l     O .text	0000002f __c.4373
00003833 l     O .text	00000030 __c.4375
0000380c l     O .text	00000027 __c.4377
000037f5 l     O .text	00000017 __c.4379
000037de l     O .text	00000017 __c.4381
000037c5 l     O .text	00000019 __c.4383
000037ac l     O .text	00000019 __c.4385
0000379e l     O .text	0000000e __c.4387
00003786 l     O .text	00000018 __c.4411
0000376f l     O .text	00000017 __c.4413
00003737 l     O .text	00000038 __c.4415
00003727 l     O .text	00000010 __c.4417
00003666 l     O .text	0000000e __c.4428
00003674 l     O .text	00000028 __c.4426
000036f2 l     O .text	00000035 __c.4421
0000369c l     O .text	00000056 __c.4423
0000363e l     O .text	00000028 __c.4436
00003630 l     O .text	0000000e __c.4439
00003618 l     O .text	00000018 __c.4456
00003605 l     O .text	00000013 __c.4458
000035f7 l     O .text	0000000e __c.4460
000035e9 l     O .text	0000000e __c.4465
000035c9 l     O .text	00000020 __c.4482
000035ae l     O .text	0000001b __c.4484
00003592 l     O .text	0000001c __c.4486
00003563 l     O .text	0000002f __c.4488
00003550 l     O .text	00000013 __c.4490
00003520 l     O .text	00000030 __c.4492
00003512 l     O .text	0000000e __c.4494
00003504 l     O .text	0000000e __c.4499
000034df l     O .text	00000025 __c.4507
000034bf l     O .text	00000020 __c.4509
000034a0 l     O .text	0000001f __c.4511
00003478 l     O .text	00000028 __c.4513
00003469 l     O .text	0000000f __c.4515
00003441 l     O .text	00000028 __c.4524
0000341a l     O .text	00000027 __c.4526
000033f3 l     O .text	00000027 __c.4528
000033bd l     O .text	00000036 __c.4530
00003394 l     O .text	00000029 __c.4532
0000337d l     O .text	00000017 __c.4534
00003354 l     O .text	00000029 __c.4547
0000332f l     O .text	00000025 __c.4549
0000330c l     O .text	00000023 __c.4551
000032ec l     O .text	00000020 __c.4553
000032cc l     O .text	00000020 __c.4555
0000451d l     O .text	00000021 __c.3860
00004500 l     O .text	0000001d __c.3862
00000000 l    df *ABS*	00000000 ram.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000307 l     O .text	0000000d __c.3604
000002f4 l     O .text	00000013 __c.3606
000002e1 l     O .text	00000013 __c.3608
000002c3 l     O .text	0000001e __c.3610
000002a5 l     O .text	0000001e __c.3612
00000287 l     O .text	0000001e __c.3614
00000269 l     O .text	0000001e __c.3616
00000255 l     O .text	00000014 __c.3618
0000023a l     O .text	0000001b __c.3633
00000222 l     O .text	00000018 __c.3639
000001fd l     O .text	00000025 __c.3648
00000000 l    df *ABS*	00000000 spi.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00801751 l     O .bss	00000004 SPI0_Speed_value
00000314 l     O .text	0000001d __c.3602
0080174f l     O .bss	00000002 SPI0_Mode_value
00000000 l    df *ABS*	00000000 rtc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000004de l     O .text	0000001a __c.3601
000004c2 l     O .text	0000001c __c.3609
000004a9 l     O .text	00000019 __c.3611
00000498 l     O .text	00000011 __c.3619
00000488 l     O .text	00000010 __c.3625
00000474 l     O .text	00000014 __c.3631
0000045f l     O .text	00000015 __c.3633
00000441 l     O .text	0000001e __c.3643
00000000 l    df *ABS*	00000000 timer.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00006938 l     F .text	0000007c clock_settime.part.2
000005cd l     O .text	0000001d __c.3599
000005c3 l     O .text	0000000a __c.3619
00801784 l     O .bss	00000020 _ts_to_str
0080177c l     O .bss	00000008 __clock_elapsed
000005b5 l     O .text	0000000e __c.3633
000005aa l     O .text	0000000b __c.3635
008017a4 l     O .bss	00000002 timers_configured
008017a6 l     O .bss	00000002 timers_enabled
00000596 l     O .text	00000014 __c.3655
00000583 l     O .text	00000013 __c.3657
00000577 l     O .text	0000000c __c.3659
0000055f l     O .text	00000018 __c.3661
0000054e l     O .text	00000011 __c.3663
0000053e l     O .text	00000010 __c.3665
00000000 l    df *ABS*	00000000 gpib_hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000eda l     O .text	0000001d __c.3744
0080195e l     O .bss	00000001 _ppr_reg
00000ec7 l     O .text	00000013 __c.3762
00000eb6 l     O .text	00000011 __c.3776
00000ea9 l     O .text	0000000d __c.3785
00000e9b l     O .text	0000000e __c.3794
00000e8e l     O .text	0000000d __c.3801
00000e80 l     O .text	0000000e __c.3807
00000000 l    df *ABS*	00000000 _clear_bss.o
00004c5a l       .text	00000000 .do_clear_bss_start
00004c58 l       .text	00000000 .do_clear_bss_loop
00000000 l    df *ABS*	00000000 delay.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 rs232.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 stringsup.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 timer_hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 mathio.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 ffsystem.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 diskio.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 vector.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 _udivmodqi4.o
0001cce8 l       .text	00000000 __udivmodqi4_ep
0001cce0 l       .text	00000000 __udivmodqi4_loop
00000000 l    df *ABS*	00000000 _udivmodhi4.o
0001cd08 l       .text	00000000 __udivmodhi4_ep
0001ccfa l       .text	00000000 __udivmodhi4_loop
00000000 l    df *ABS*	00000000 _divmodhi4.o
0001cd30 l       .text	00000000 __divmodhi4_neg1
0001cd38 l       .text	00000000 __divmodhi4_neg2
0001cd3e l       .text	00000000 __divmodhi4_exit
00000000 l    df *ABS*	00000000 _udivmodsi4.o
0001cd66 l       .text	00000000 __udivmodsi4_ep
0001cd4c l       .text	00000000 __udivmodsi4_loop
00000000 l    df *ABS*	00000000 _divmodsi4.o
0001cd9c l       .text	00000000 __divmodsi4_neg2
0001cdaa l       .text	00000000 __divmodsi4_exit
00000000 l    df *ABS*	00000000 calloc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 _exit.o
0001d61a l       .text	00000000 __stop_program
00000000 l    df *ABS*	00000000 
00000000 l       *UND*	00000000 --library=m
00015cec g     F .text	0000004a SS80_Selected_Device_Clear
0001cdce g       .text	00000002 .hidden __usmulhisi3
0000ecfa g     F .text	0000000c putchar
0001195e g     F .text	00000024 SS80_is_MTA
000067d4 g     F .text	000000ea clock_gettime
00005e8e g     F .text	000000d4 i2c_display_task_errors
00006226 g     F .text	00000084 rtc_init
00011caa g     F .text	000000a8 GPIB_COMMANDS
00004c68  w      .text	00000000 __vector_22
00010db2 g     F .text	00000054 gpib_unread
00004e4c g     F .text	0000000a set_error
00014ed0 g     F .text	00000034 SS80_test_extended_status
000062da  w    F .text	00000016 strcpy
00007a88 g     F .text	00000008 asctime
00006d60 g     F .text	00000020 tm_mon_to_ascii
00801a80 g     O .bss	00000235 Fatfs
0000ee2e g     F .text	0000004a mctime
00004c68  w      .text	00000000 __vector_28
0000ddae g     F .text	0000001a mmc_fast
00006066 g     F .text	0000008c rtc_write
00005a86 g     F .text	00000058 i2c_fn
00015dde g     F .text	00000218 SS80_Transparent_State
0080195f g     O .bss	00000001 gpib_unread_f
00004d36 g     F .text	00000004 spi_RX_buffer
000123f0 g     F .text	00000042 gpib_help
00015b48 g     F .text	0000009a SS80_Report
0000f95e g     F .text	0000006a free_file_descriptor
0000eaee g     F .text	00000096 fatfs_putc
0001ceae g       .text	0000001e .hidden __umulhisi3
008001b8 g     O .data	0000000c cfgfile
00004c68  w      .text	00000000 __vector_1
00011e18 g     F .text	00000184 GPIB
0000e682 g     F .text	00000024 fatfs_help
00006a2a g     F .text	00000016 delete_all_timers
00005668 g     F .text	0000000c SPI0_TXRX_Byte
0001d37c g       .text	00000000 __fp_mpack_finite
0000f4a4 g     F .text	00000086 utime
00801a50 g     O .bss	00000008 __clock
0001c24e g     F .text	0000007c lcd_time
00012f28 g     F .text	00000052 find_device
000078b6 g     F .text	00000128 set_dst
0000f1c2 g     F .text	00000096 fdevopen
00011982 g     F .text	00000024 SS80_is_MSA
00004cd2 g     F .text	00000060 spi_end
00018928 g     F .text	000000d6 lif_dir2str
0001d302 g     F .text	00000040 round
000132b6 g     F .text	00000172 alloc_device
00005048 g     F .text	0000006a safefree
00013900 g     F .text	000000d4 mount_usage
00011f9c g     F .text	00000130 GPIB_TALK
00004c68  w      .text	00000000 __vector_32
0000ff00 g       *ABS*	00000000 __DATA_REGION_LENGTH__
0001cf9e g     F .text	00000004 __divsf3
0001ce52 g       .text	00000036 .hidden __epilogue_restores__
0000541c g     F .text	00000018 uart_rx_count
0001481a g     F .text	0000003a lif_dir_count
00801cdf g     O .bss	00000009 gpib_timer
000120cc g     F .text	000000f6 GPIB_SECONDARY_ADDRESS
00000000 g       *ABS*	00000000 __TEXT_REGION_ORIGIN__
00018caa g     F .text	0000000e lif_vol_clear
000068be g     F .text	0000007a clock_task
0001115e g     F .text	00000284 gpib_trace_display
0001bc2e g     F .text	000000fe lif_rename_file
00013d2c g     F .text	00000804 Read_Config
00012ea8 g     F .text	00000026 find_type
0001d1c0 g     F .text	00000022 __fp_round
00012ece g     F .text	00000020 count_drive_types
00006d80 g     F .text	00000042 Days_Per_Month
00006c1a g     F .text	00000028 execute_timers
00010076 g     F .text	00000176 ls_info
00004c68  w      .text	00000000 __vector_34
0000dd68 g     F .text	0000001a mmc_spi_begin
0001d06e g     F .text	0000000a __fixsfsi
00006b34 g     F .text	0000000c clock_elapsed_begin
00006342  w    F .text	00000032 reverse
0000d6bc g     F .text	00000006 mmc_disk_status
0001d1e2 g     F .text	00000044 __fp_split3
00010b9c g     F .text	00000014 gpib_timeout_set
0001ccf2 g       .text	00000028 .hidden __udivmodhi4
00004cce g     F .text	00000004 chip_select_init
00006ac2 g     F .text	00000072 ts_to_str
00008f98 g     F .text	0000000c atol
00007e0a g     F .text	000000aa p_ntoa
0000e03e g     F .text	000000d8 tm_to_fat
00004e8e g     F .text	00000122 PrintFree
000170aa g     F .text	000000b8 amigo_cmd_dsj
0000d436 g     F .text	00000024 wait_ready
000001c2 g       .text	00000000 __trampolines_start
000134ba g     F .text	00000112 hpdir_set_device
0001d14a g     F .text	00000048 __fp_cmp
0001173a g     F .text	00000166 gpib_write_str
008002f0 g     O .data	00000005 _backlight
00801cbd g     O .bss	00000002 errno
00015dbc g     F .text	00000022 SS80_Cancel
0001d61c g       .text	00000000 _etext
0000d86c g     F .text	00000488 mmc_disk_ioctl
000064ca g     F .text	00000028 MATCH
00800125 g     O .data	00000010 __WDay
0001976e g     F .text	000000b8 lif_writedirindex
00005526 g     F .text	000000ce SPI0_Speed
000059c0 g     F .text	000000c6 i2c_task_run
00006b40 g     F .text	0000007c clock_elapsed_end
0000d2b0 g     F .text	000000c4 ff_wtoupper
0001cecc g     F .text	0000000a __subsf3
0001b7f0 g     F .text	00000312 lif_add_lif_file
00801ce8 g     O .bss	00000002 lastcmd
00004c68  w      .text	00000000 __vector_24
000134b8 g     F .text	00000002 set_Config_Defaults
00005ff8 g     F .text	00000062 i2c_rtc_read
000064b6 g     F .text	00000014 skipspaces
0000bec4 g     F .text	0000026c f_getcwd
00004c68  w      .text	00000000 __vector_12
000107d8 g     F .text	00000032 gpib_timer_init
0001083a g     F .text	0000002c ppr_init
0000ed06 g     F .text	00000068 fgets
00005434 g     F .text	0000004c uart_get_tail
00005004 g     F .text	00000044 safemalloc
0001bb02 g     F .text	0000012c lif_del_file
00007c78 g     F .text	00000032 _putc_buffer_fn
0001aa28 g     F .text	00000172 lif_ascii_string_to_e010
0000de34 g     F .text	0000001a mmc_ins_status
0080030a g     O .data	00000002 _cmd2
00018c40 g     F .text	0000004e lif_lifbcd2timestr
00801cea g     O .bss	00000200 gpib_iobuff
000180fe g     F .text	00000028 V2B_MSB
00018ae0 g     F .text	00000084 lif_time2lifbcd
00012f20 g     F .text	00000008 find_free
0000595e g     F .text	00000024 i2c_done
0001921a g     F .text	0000036a lif_check_dir
00004c68 g       .text	00000000 __bad_interrupt
0000510c g     F .text	00000090 delayms
00015cb8 g     F .text	00000018 SS80_Channel_Independent_Clear
0000ff9c g     F .text	000000da cat
00008e08 g     F .text	00000028 snprintf_P
000171b2 g     F .text	00000132 amigo_todo_op
00015d36 g     F .text	00000086 SS80_Amigo_Clear
0000f138 g     F .text	0000008a perror
0001c4d6 g     F .text	00000024 gpib_user_task
0001ec6a g       *ABS*	00000000 __data_load_end
0000d380 g     F .text	0000000c disk_initialize
0080199d g     O .bss	0000000d plot
00010b4a g     F .text	00000006 gpib_timer_elapsed_end
0001827c g     F .text	0000002a lif_free
0000ed9e g     F .text	0000002e puts
0000fd70 g     F .text	000001bc copy
00006d26 g     F .text	00000010 clock_settime
000182a6 g     F .text	0000003e lif_stralloc
000062aa  w    F .text	00000016 islower
00004e60 g     F .text	0000002e freeRam
000167c6 g     F .text	0000001c amigo_request_logical_address
00005ade g     F .text	0000001c i2c_send_stop
0000cda4 g     F .text	0000022a f_rename
00004c68  w      .text	00000000 __vector_6
00010b2c g     F .text	0000001e gpib_timer_reset
00019a6a g     F .text	000005d4 lif_create_volume
0001d3c8 g     F .text	00000130 malloc
00004d5a g     F .text	00000040 spi_init
0000fd2e g     F .text	00000042 posix_help
00004c68  w      .text	00000000 __vector_31
0001089c g     F .text	00000046 dbf_open
0001c18c g     F .text	000000c2 copyright
0000be0e g     F .text	000000b6 f_chdir
0001cf96 g       .text	00000000 __lesf2
00004c9e g     F .text	00000030 chip_deselect
00018088 g     F .text	00000076 PRINTER_COMMANDS
00006bbc g     F .text	00000036 clock_clear
00007ab2 g     F .text	000000ee initialize_clock
0000de32 g     F .text	00000002 mmc_power_off
00014530 g     F .text	00000044 display_mounts
0000e038 g     F .text	00000006 mmc_wp_status
0000e9e8 g     F .text	00000106 fatfs_getc
00801eea g     O .bss	00000001 listening_last
0000d374 g     F .text	0000000c disk_status
00800102 g     O .data	00000002 __malloc_heap_start
000001c2 g       .text	00000000 __trampolines_end
00006cfc g     F .text	0000002a clock_getres
00801776 g     O .bss	00000004 i2c_task
0001ab9a g     F .text	00000210 lif_add_ascii_file_as_e010_wrapper
000084d6  w    F .text	00000038 strlen_X
00018aca g     F .text	00000016 lif_BCD2BIN
000182e4 g     F .text	00000054 lif_open
00007ba0 g     F .text	000000d8 display_clock
00010866 g     F .text	0000001a ppr_bit_set
00004c68  w      .text	00000000 __vector_3
00010832 g     F .text	00000008 ppr_reg
000115ee g     F .text	00000008 gpib_decode
0000519c g     F .text	00000022 uart_rx_flush
0000f046 g     F .text	00000004 rmdir
000069b4 g     F .text	00000076 set_timers
00801a74 g     O .bss	0000000c dst
0000f0bc g     F .text	0000007c readdir
0001d226 g     F .text	0000000e __fp_zero
0000c788 g     F .text	0000002a f_closedir
0001c318 g     F .text	00000148 lcd_setup
0000d3cc g     F .text	00000014 disk_ioctl
0001be3a g     F .text	0000033e lif_tests
0000839a g     F .text	00000084 _puts_pad
00004d3a g     F .text	00000020 spi_TX
008019ec g     O .bss	00000001 debug_input
00018cb8 g     F .text	0000038c lif_dump_vol
000121c2 g     F .text	0000004c listen_cleanup
00018b64 g     F .text	000000a0 lif_lifbcd2time
000189fe g     F .text	000000be lif_str2dir
00013a90 g     F .text	000000f2 display_mount
000056f6 g     F .text	0000002c SPI0_TXRX
0080030c g     O .data	00000015 _line1
0001cf96 g       .text	00000000 __nesf2
000135cc g     F .text	00000040 hpdir_set_parameters
00005f62 g     F .text	0000000e BINtoBCD
0000f58a g     F .text	000000d0 lseek
00004c68  w      .text	00000000 __vector_23
0001d61c g       *ABS*	00000000 __data_load_start
0080182a g     O .bss	00000004 _mmc_clock
00004c2a g       .text	00000000 __dtors_end
000139d4 g     F .text	0000002c index_address
00011a5a g     F .text	00000012 gpib_init_devices
000063e6  w    F .text	00000050 strncasecmp
00802030 g       .bss	00000000 __bss_end
00018558 g     F .text	00000056 lif_chars
0001cdda g       .text	00000014 .hidden __muluhisi3
0001273a g     F .text	0000006a print_tok_str
00004c68  w      .text	00000000 __vector_30
00000400 g       *ABS*	00000000 __LOCK_REGION_LENGTH__
0001360c g     F .text	000002f4 format_drives
00004c68  w      .text	00000000 __vector_25
0080202c g     O .bss	00000002 __brkval
00006f7e g     F .text	0000002a gmtime_r
0000eed2 g     F .text	00000052 chmod
00006c42 g     F .text	000000ba init_timers
000119ee g     F .text	00000024 AMIGO_is_MSA
000195d0 g     F .text	000000d0 lif_checkdirindex
0000ca76 g     F .text	0000014e f_unlink
00010e12 g     F .text	00000020 gpib_control_pin_read
000109ca g     F .text	000000ae dbf_open_read
00005f82 g     F .text	00000076 i2c_rtc_write
0000de30 g     F .text	00000002 mmc_power_on
00008ece g     F .text	000000bc strtol
00010b26 g     F .text	00000006 gpib_timer_elapsed_begin
000051be g     F .text	00000134 uart_ubr
0000d220 g     F .text	00000066 ff_uni2oem
00005778 g     F .text	0000009e i2c_check_op
0001a972 g     F .text	000000b6 lif_e010_pad_sector
000181ce g     F .text	00000042 lif_help
000065a2 g     F .text	000000b8 split_args
0000efca g     F .text	0000003e rename
00010990 g     F .text	0000003a dbf_close
00017ce2 g     F .text	000000be receive_plot_flush
0001cfb8 g     F .text	000000dc __divsf3x
00004c68  w      .text	00000000 __vector_11
00801eeb g     O .bss	00000001 spoll
0000ee78 g     F .text	0000001c basename
00014f04 g     F .text	000000c6 SS80_display_extended_status
00017b96 g     F .text	00000130 AMIGO_COMMANDS
00018696 g     F .text	0000007a lif_fixname
0000d784 g     F .text	000000e8 mmc_disk_write
00004c2a  w      .text	00000000 __init
0001d394 g     F .text	00000034 calloc
0001b580 g     F .text	00000270 lif_extract_lif_as_lif
00006760 g     F .text	00000026 install_timers_isr
0001080a g     F .text	00000014 reverse_8bits
000150cc g     F .text	000000e0 SS80_describe
000054b8 g     F .text	0000002c uart_getchar
00007eb4 g     F .text	0000020e p_ftoa
0000f84a g     F .text	000000dc write
000185ae g     F .text	00000074 lif_B2S
0001d234 g       .text	00000000 __gtsf2
0000fcee g     F .text	00000040 fprintf
000110ba g     F .text	000000a4 gpib_decode_header
000113e2 g     F .text	0000020c gpib_read_byte
0001263e g     F .text	0000003e tok_index
00015cd0 g     F .text	0000001c SS80_Universal_Device_Clear
0001adaa g     F .text	00000278 lif_add_ascii_file_as_e010
00006786 g     F .text	0000004e __vector_13
0000631c  w    F .text	00000026 strcat
008019ef g     O .bss	00000057 uarts
00004e56 g     F .text	0000000a clear_error
0001d258 g       .text	00000000 __mulsf3_pse
00004c68  w      .text	00000000 __vector_17
00004e2a g     F .text	00000022 spi_TXRX
0001d19e g     F .text	00000006 __fp_nan
00012f7a g     F .text	0000018a set_active_device
00004c68  w      .text	00000000 __vector_19
000066e0 g     F .text	0000007c get_value
000056ce g     F .text	00000028 SPI0_TX
00018622 g     F .text	0000003a lif_checkname
0000ee94 g     F .text	0000003e chdir
00004c68  w      .text	00000000 __vector_7
00016e26 g     F .text	000000b6 amigo_buffered_read_execute
0000de96 g     F .text	000001a2 mmc_init
0000e6a6 g     F .text	000001a6 fatfs_ls
0001d192 g     F .text	0000000c __fp_inf
00008e30 g     F .text	00000028 sprintf_P
0001ce96 g       .text	00000018 .hidden __cmpdi2_s8
0000f258 g     F .text	00000088 fat_time_to_unix
0000f65a g     F .text	0000004e fseek
00801cb5 g     O .bss	00000004 AccSize
00018c8e g     F .text	0000000c lif_image_clear
0000ddda g     F .text	0000000e mmc_set_ms_timeout
0000675c g     F .text	00000004 enable_system_task
0000ddce g     F .text	00000006 mmc_spi_RX_buffer
00005982 g     F .text	00000024 i2c_task_done
0000709e g     F .text	00000058 is_dst
000052f2 g     F .text	0000008e uart_init
00014c08 g     F .text	00000078 SS80ControllerPack
00013d1a g     F .text	00000012 verify_devices
00801ef4 g     O .bss	00000084 Devices
00004c50 g       .text	00000010 .hidden __do_clear_bss
000055f4 g     F .text	00000074 SPI0_Mode
00810000 g       .comment	00000000 __eeprom_end
0001a2fe g     F .text	00000200 lif_open_volume
0000ff2c g     F .text	00000070 testpage
00017f96 g     F .text	000000f2 printer_buffer
0000bddc g     F .text	00000032 f_close
0001d254 g     F .text	000000d2 __mulsf3x
00017cc6 g     F .text	0000001c printer_init
0000dd8a g     F .text	0000001a mmc_slow
00006476 g     F .text	00000020 sep
00800100 g     O .data	00000002 __malloc_heap_end
0001081e g     F .text	00000014 ppr_set
00016bdc g     F .text	00000130 amigo_format
0000f6a8 g     F .text	000000da read
00019826 g     F .text	00000030 lif_writedirEOF
0000dd82 g     F .text	00000008 mmc_spi_end
0001d0d4 g       .text	00000000 __floatsisf
00017162 g     F .text	00000050 amigo_cmd_clear
00000000 g       .text	00000000 __vectors
00019856 g     F .text	00000214 lif_updatefree
00005722 g     F .text	0000002a SPI0_RX
0000b718 g     F .text	00000296 f_read
008019ed g     O .bss	00000002 rtc_ok
00010c5c g     F .text	00000024 gpib_tx_init
0001193a g     F .text	00000024 SS80_is_MLA
00005380 g     F .text	00000048 uart_rx_interrupt
000054e4 g     F .text	00000006 uart0_getchar
00004c68  w      .text	00000000 __vector_27
00010d46 g     F .text	0000006c gpib_disable_PPR
0000e166 g     F .text	000000e0 fatfs_scan_files
00004c6c g     F .text	00000032 chip_select
0080174e g       .data	00000000 __data_end
00010956 g     F .text	0000003a dbf_lseek
000163e2 g     F .text	000001d4 SS80_COMMANDS
00006436 g     F .text	00000040 stralloc
0000c7b2 g     F .text	00000088 f_readdir
00801eec g     O .bss	00000002 current
000151fe g     F .text	0000004e SS80_Check_Volume
0000dd30 g     F .text	00000038 mmc_install_timer
00007dd4 g     F .text	00000036 pch
00008e92 g     F .text	0000003c atodigit
0001ccbc g       .text	0000001e .hidden __mulsi3
000062f0  w    F .text	0000002c strncpy
0000f008 g     F .text	0000003e unlink
0000f820 g     F .text	0000002a sync
00015c20 g     F .text	00000098 SS80_init
0001cf96 g       .text	00000000 __eqsf2
0000fa3a g     F .text	0000008a new_file_descriptor
000063a8  w    F .text	0000003e strcasecmp
0001cdfa g       .text	00000020 .hidden __negdi2
0001818e g     F .text	00000040 B2V_LSB
0000e57c g     F .text	00000106 fatfs_filinfo_list
0000cfce g     F .text	0000009a f_chmod
00801a58 g     O .bss	00000018 timer_irq
000059a6 g     F .text	0000001a i2c_send_start
00012eee g     F .text	00000032 type_to_str
00000000  w      .text	00000000 __vector_default
0001cd1a g       .text	00000026 .hidden __divmodhi4
00014c80 g     F .text	00000198 SS80UnitPack
00010a78 g     F .text	000000ae dbf_open_write
00004c68  w      .text	00000000 __vector_5
0000dcf4 g     F .text	0000003c mmc_disk_timerproc
00801a46 g     O .bss	0000000a i2c
000077aa g     F .text	0000010c find_dst
00800182 g     O .data	00000034 gpib_tokens
00004c68  w      .text	00000000 __vector_33
0001267c g     F .text	0000003e tok_name
000115f6 g     F .text	00000144 gpib_read_str
0001a4fe g     F .text	000003aa lif_dir
00016edc g     F .text	000001ce amigo_buffered_write
00000400 g       *ABS*	00000000 __SIGNATURE_REGION_LENGTH__
00014fca g     F .text	00000102 SS80_send_status
0001cdbc g       .text	00000012 .hidden __tablejump2__
00011a6c g     F .text	00000124 gpib_trace_task
00800135 g     O .data	00000001 Stat
0000f414 g     F .text	00000090 unix_time_to_fat
00004c2a g       .text	00000000 __ctors_start
0000d572 g     F .text	0000014a mmc_disk_initialize
00801a70 g     O .bss	00000004 __tzone
0000e116 g     F .text	00000026 get_fattime
00800321 g     O .data	00000002 _cmd1
0000f782 g     F .text	00000038 fread
00018c9a g     F .text	00000010 lif_dir_clear
000169f8 g     F .text	00000052 amigo_increment
0001220e g     F .text	00000122 GPIB_LISTEN
008001b6 g     O .data	00000002 debuglevel
0080182e g     O .bss	00000002 _mmc_timeout
00004c36 g       .text	0000001a .hidden __do_copy_data
0080027c g     O .data	00000074 faults
0000fc02 g     F .text	000000d4 posix_fopen_modes_to_open
00018150 g     F .text	0000003e B2V_MSB
0080177a g     O .bss	00000002 i2c_callback
00018abc g     F .text	0000000e lif_BIN2BCD
0001d342 g     F .text	00000036 __fp_mintl
0001cf96 g     F .text	00000008 __cmpsf2
0001ce88 g       .text	0000000e .hidden __xload_1
00010c20 g     F .text	0000003c gpib_rx_init
00007000 g     F .text	0000005c gettimeofday
0001d1b2 g     F .text	0000000e __fp_pscB
0001d1f2 g       .text	00000000 __fp_splitA
00018c04 g     F .text	0000003c lif_ctime_gmt
000183ec g     F .text	000000a6 lif_read
0000fcd6 g     F .text	00000018 fopen
0080174e g       .bss	00000000 __bss_start
000079de g     F .text	000000aa asctime_r
0000718e g     F .text	00000008 localtime
0001d60a g     F .text	0000000e memset
000172e4 g     F .text	00000108 amigo_todo
00013458 g     F .text	00000032 push_state
00007768 g     F .text	00000042 setdate
0001c94e g     F .text	0000036e main
008002f5 g     O .data	00000015 _line2
000123ee g     F .text	00000002 talk_cleanup
00006198 g     F .text	0000008e rtc_run
00013b82 g     F .text	00000198 verify_device
0000f554 g     F .text	00000036 ftell
00801eee g     O .bss	00000001 talking
0000bcdc g     F .text	00000100 f_sync
00801962 g     O .bss	00000002 AMIGOs
0001cf96 g       .text	00000000 __ltsf2
00005522 g     F .text	00000004 uart_keyhit
00013428 g     F .text	00000030 init_Devices
00004c68  w      .text	00000000 __vector_4
00019584 g     F .text	0000004c lif_close_volume
0000dda4 g     F .text	0000000a mmc_spi_init
00800100 g       *ABS*	00000000 __DATA_REGION_ORIGIN__
000196a0 g     F .text	000000ce lif_readdirindex
00017414 g     F .text	000005cc Amigo_Command
0000fa2a g     F .text	00000010 fclose
0000ecee g     F .text	0000000c getchar
00016946 g     F .text	000000b2 amigo_send_status
0001674a g     F .text	0000007c amigo_init
00800136 g     O .data	0000004a sys_errlist
0000705c g     F .text	00000042 time
0000f080 g     F .text	0000003c opendir
0001d378 g     F .text	0000001c __fp_mpack
00013104 g     F .text	000000f0 SS80_Set_Defaults
0000605a g     F .text	0000000c i2c_rtc_init
00006fdc g     F .text	00000024 settimezone
0000b330 g     F .text	00000078 f_mount
0000e264 g     F .text	00000318 fatfs_status
000119ca g     F .text	00000024 AMIGO_is_MTA
0001cdac g       .text	00000010 .hidden __negsi2
0000c6a6 g     F .text	000000e2 f_opendir
00015be2 g     F .text	0000003e Clear_Common
0001c4fa g     F .text	00000042 help
00010cda g     F .text	0000006c gpib_enable_PPR
00014574 g     F .text	000001aa mount
00016aa0 g     F .text	0000013c amigo_verify
0001d23c g     F .text	00000004 __mulsf3
0000665a g     F .text	00000086 get_token
000167e2 g     F .text	000000ba amigo_request_status
000127f0 g     F .text	000001a8 display_Addresses
0000f52a g     F .text	0000002a fileno_to_fatfs
0000d286 g     F .text	0000002a ff_oem2uni
0000638e  w    F .text	0000001a strcmp
00010c80 g     F .text	0000005a gpib_state_init
00000000  w      *ABS*	00000000 __heap_end
00010b50 g     F .text	0000004c gpib_timer_task
000050b2 g     F .text	0000005a delayus
0001348a g     F .text	0000002e pop_state
00004c68  w      .text	00000000 __vector_9
0000ef24 g     F .text	0000004a getcwd
00004c68  w      .text	00000000 __vector_2
000064f2 g     F .text	00000028 MATCHI
000173ec g     F .text	00000028 amigo_check_unit
0001cef0 g     F .text	000000cc __addsf3x
00000400 g       *ABS*	00000000 __USER_SIGNATURE_REGION_LENGTH__
0000c130 g     F .text	00000576 f_lseek
0000eb84 g     F .text	000000ac fgetc
00801eef g     O .bss	00000001 secondary
00008dbc g     F .text	0000004c vsnprintf_P
00007a90 g     F .text	00000022 ctime_gm
0001d234 g     F .text	00000008 __gesf2
0001471e g     F .text	000000fc hpdir_init
0001689c g     F .text	000000aa amigo_send_logical_address
000151ac g     F .text	00000052 SS80_Check_Unit
000118a0 g     F .text	0000009a gpib_file_init
0080010a g     O .data	00000001 _cs_pin
00013a00 g     F .text	00000090 umount
00801960 g     O .bss	00000002 gpib_log_fp
00004c68  w      .text	00000000 __vector_21
00004c68  w      .text	00000000 __vector_15
000080c2 g     F .text	000002d8 p_etoa
000127a4 g     F .text	0000004c print_tok
00801756 g     O .bss	00000020 i2c_task_op
0001606a g     F .text	000002c4 SS80_locate_and_read
00005894 g     F .text	000000ca i2c_init
00012432 g     F .text	0000020c gpib_tests
000131f4 g     F .text	000000c2 free_device
00801cb9 g     O .bss	00000002 AccDirs
0000d21a g     F .text	00000006 ff_memfree
0080196a g     O .bss	00000002 PRINTERp
0001d1a4 g     F .text	0000000e __fp_pscA
0001ccda g       .text	00000018 .hidden __udivmodqi4
00801ef0 g     O .bss	00000001 listening
00011b90 g     F .text	0000011a gpib_error_test
00801966 g     O .bss	00000002 SS80s
0000c83a g     F .text	0000007c f_stat
00010bb0 g     F .text	00000070 gpib_bus_init
0000574c g     F .text	0000002c i2c_timer
0000ec30 g     F .text	000000a4 fputc
00004c68  w      .text	00000000 __vector_29
0000550e g     F .text	00000014 uart0_putchar
00008e58 g     F .text	0000003a printf_P
0001cdf2 g       .text	00000008 .hidden __mulohisi3
0001632e g     F .text	000000b4 SS80_Execute_State
00007526 g     F .text	00000008 timegm
0001524c g     F .text	000004ee SS80_Command_State
00006fbe g     F .text	0000001e gettimezone
00802030 g       .comment	00000000 __heap_start
00006496 g     F .text	00000020 trim_tail
00010e4a g     F .text	00000270 gpib_write_byte
00017da0 g     F .text	000000b0 printer_close
00005840 g     F .text	00000054 i2c_task_op_add
00019044 g     F .text	000001d6 lif_check_volume
000070f6 g     F .text	00000098 localtime_r
008001c4 g     O .data	000000b8 tokens
00801cbb g     O .bss	00000002 AccFiles
000060f2 g     F .text	000000a6 rtc_read
00004c2a g       .text	00000000 __dtors_start
00004c2a g       .text	00000000 __ctors_end
0001cd84 g       .text	00000028 .hidden __divmodsi4
00010e06 g     F .text	0000000c gpib_bus_read
0000f2e0 g     F .text	00000134 stat
000040ff  w      *ABS*	00000000 __stack
0000f7ba g     F .text	00000066 syncfs
00018210 g     F .text	0000006c lif_calloc
0000f926 g     F .text	00000038 fwrite
00011d52 g     F .text	000000c6 Send_Identify
00801828 g     O .bss	00000002 _mmc_pre
0000ddd4 g     F .text	00000006 mmc_spi_TXRX
0080174e g       .data	00000000 _edata
0000d068 g     F .text	000000b2 f_utime
00012998 g     F .text	00000510 display_Config
0001cdd0 g       .text	0000000a .hidden __usmulhisi3_tail
00802030 g       .comment	00000000 _end
00018382 g     F .text	0000006a lif_seek_msg
00004d9a g     F .text	00000090 spi_begin
00017e50 g     F .text	00000146 printer_open
0000b9ae g     F .text	0000032e f_write
00004c68  w      .text	00000000 __vector_8
0001a8a8 g     F .text	000000ca lif_find_file
00005bcc g     F .text	000001d4 __vector_26
00007cc2 g     F .text	00000112 bin2num
0001cfbc g       .text	00000000 __divsf3_pse
00800106 g     O .data	00000004 _spi_clock
0000841e g     F .text	000000b8 _puts_pad_X
00801964 g     O .bss	00000002 AMIGOp
0000ddc8 g     F .text	00000006 mmc_spi_TX_buffer
0000b3a8 g     F .text	00000370 f_open
00018710 g     F .text	0000011c lif_vol2str
0000d3ac g     F .text	00000020 disk_write
000101ec g     F .text	00000210 ls
0001d618  w      .text	00000000 .hidden exit
00012330 g     F .text	000000be gpib_task
00005afa g     F .text	000000be i2c_task_next_op
0001d0d0 g     F .text	0000007a __floatunsisf
00016d0c g     F .text	0000011a amigo_buffered_read_command
00006a40 g     F .text	00000082 subtract_timespec
0001cd1a g       .text	00000000 .hidden _div
00005da0 g     F .text	000000ee i2c_print_error
000179e0 g     F .text	000001b6 Amigo_Execute
00006374  w    F .text	0000001a strupper
0080202e g     O .bss	00000002 __flp
000126ba g     F .text	00000080 print_tok_val
0001cd40 g       .text	00000044 .hidden __udivmodsi4
00011a36 g     F .text	00000024 PRINTER_is_MTA
0001a03e g     F .text	000002c0 lif_newdir
00014854 g     F .text	000003b4 hpdir_find_drive
00011a12 g     F .text	00000024 PRINTER_is_MLA
00008f8a g     F .text	0000000e atoi
00006dc2 g     F .text	000001bc time_to_tm
0000e13c g     F .text	0000002a put_rc
0000edcc g     F .text	00000038 fileno
0080010b g     O .data	0000001a __Month
00005674 g     F .text	0000005a SPI0_Init
0000cbc4 g     F .text	000001e0 f_mkdir
0001d078 g     F .text	00000058 __fixunssfsi
00801f78 g     O .bss	000000b4 hpdir
0000752e g     F .text	0000023a setdate_r
0000651a g     F .text	00000054 MATCHARGS
00004d32 g     F .text	00000004 spi_TX_buffer
00010000 g       *ABS*	00000000 __EEPROM_REGION_LENGTH__
0001d618 g       .text	00000000 .hidden _exit
00018492 g     F .text	000000c6 lif_write
0001865c g     F .text	0000003a lif_S2B
0001c8ca g     F .text	00000014 user_task
00801ef1 g     O .bss	00000001 talking_last
000108e2 g     F .text	0000003a dbf_read
00005f70 g     F .text	00000012 BCDtoBIN
0001c460 g     F .text	00000076 i2c_lcd_task
00007196 g     F .text	00000390 normalize
00006fa8 g     F .text	00000016 gmtime
00004c68  w      .text	00000000 __vector_14
0000e8be g     F .text	0000012a fatfs_tests
0001bd2c g     F .text	0000010e lif_create_image
0000d38c g     F .text	00000020 disk_read
0000fac4 g     F .text	0000013e open
000062c0  w    F .text	0000001a toupper
00015824 g     F .text	00000324 SS80_locate_and_write
0001c178 g     F .text	00000014 lcd_task
0000850e g     F .text	000008ae _printf_fn
00004c68  w      .text	00000000 __vector_10
00010880 g     F .text	0000001c ppr_bit_clr
00801cbf g     O .bss	00000020 __iob
0000d11a g     F .text	000000fa f_getlabel
0001882c g     F .text	000000fc lif_str2vol
0000c8b6 g     F .text	000001c0 f_getfree
0000ed6e g     F .text	00000030 fputs
00004c68  w      .text	00000000 __vector_16
0000656e g     F .text	00000034 MATCHI_LEN
00800100 g       .data	00000000 __data_start
00004fb0 g     F .text	00000054 safecalloc
0001c8de g     F .text	00000070 update_drive_counts
0000ee04 g     F .text	0000002a fileno_to_stream
0001573a g     F .text	000000ea SS80_cmd_seek
0000f04a g     F .text	00000036 closedir
00004c68  w      .text	00000000 __vector_18
00005816 g     F .text	0000002a i2c_task_init
00000003 g       *ABS*	00000000 __FUSE_REGION_LENGTH__
00014e18 g     F .text	000000b8 SS80VolumePack
0000d6c2 g     F .text	000000c2 mmc_disk_read
0000e84c g     F .text	00000072 mmc_test
00020000 g       *ABS*	00000000 __TEXT_REGION_LENGTH__
00018338 g     F .text	0000004a lif_stat
00005480 g     F .text	00000006 uart_rx_byte
00015ff6 g     F .text	00000074 SS80_error_return
00800104 g     O .data	00000002 __malloc_margin
000053c8 g     F .text	00000054 __vector_20
0000ef6e g     F .text	0000005c mkdir
0001c2ca g     F .text	0000004e lcd_backlight
000054ea g     F .text	00000024 uart_putchar
000103fc g     F .text	000003dc posix_tests
00801ef2 g     O .bss	00000002 gpib_unread_data
0000f9c8 g     F .text	00000062 close
0001cece g       .text	00000000 __addsf3
0001ce1a g       .text	00000038 .hidden __prologue_saves__
000119a6 g     F .text	00000024 AMIGO_is_MLA
0000dde8 g     F .text	00000048 mmc_test_timeout
0001b022 g     F .text	0000055e lif_extract_e010_as_ascii
00016a4a g     F .text	00000056 amigo_seek
00010e32 g     F .text	00000018 gpib_handshake_pin_read
00006bf2 g     F .text	00000028 enable_timers
0000e246 g     F .text	0000001e fatfs_fstype
00018126 g     F .text	0000002a V2B_LSB
0001091c g     F .text	0000003a dbf_write
00801968 g     O .bss	00000002 SS80p
0000d214 g     F .text	00000006 ff_memalloc
0001d4f8 g     F .text	00000112 free
0001d228 g       .text	00000000 __fp_szero
00005486 g     F .text	00000032 uart_tx_byte
0001cdee g       .text	00000004 .hidden __mulshisi3



Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 15 26 	jmp	0x4c2a	; 0x4c2a <__ctors_end>
       4:	0c 94 34 26 	jmp	0x4c68	; 0x4c68 <__bad_interrupt>
       8:	0c 94 34 26 	jmp	0x4c68	; 0x4c68 <__bad_interrupt>
       c:	0c 94 34 26 	jmp	0x4c68	; 0x4c68 <__bad_interrupt>
      10:	0c 94 34 26 	jmp	0x4c68	; 0x4c68 <__bad_interrupt>
      14:	0c 94 34 26 	jmp	0x4c68	; 0x4c68 <__bad_interrupt>
      18:	0c 94 34 26 	jmp	0x4c68	; 0x4c68 <__bad_interrupt>
      1c:	0c 94 34 26 	jmp	0x4c68	; 0x4c68 <__bad_interrupt>
      20:	0c 94 34 26 	jmp	0x4c68	; 0x4c68 <__bad_interrupt>
      24:	0c 94 34 26 	jmp	0x4c68	; 0x4c68 <__bad_interrupt>
      28:	0c 94 34 26 	jmp	0x4c68	; 0x4c68 <__bad_interrupt>
      2c:	0c 94 34 26 	jmp	0x4c68	; 0x4c68 <__bad_interrupt>
      30:	0c 94 34 26 	jmp	0x4c68	; 0x4c68 <__bad_interrupt>
      34:	0c 94 c3 33 	jmp	0x6786	; 0x6786 <__vector_13>
      38:	0c 94 34 26 	jmp	0x4c68	; 0x4c68 <__bad_interrupt>
      3c:	0c 94 34 26 	jmp	0x4c68	; 0x4c68 <__bad_interrupt>
      40:	0c 94 34 26 	jmp	0x4c68	; 0x4c68 <__bad_interrupt>
      44:	0c 94 34 26 	jmp	0x4c68	; 0x4c68 <__bad_interrupt>
      48:	0c 94 34 26 	jmp	0x4c68	; 0x4c68 <__bad_interrupt>
      4c:	0c 94 34 26 	jmp	0x4c68	; 0x4c68 <__bad_interrupt>
      50:	0c 94 e4 29 	jmp	0x53c8	; 0x53c8 <__vector_20>
      54:	0c 94 34 26 	jmp	0x4c68	; 0x4c68 <__bad_interrupt>
      58:	0c 94 34 26 	jmp	0x4c68	; 0x4c68 <__bad_interrupt>
      5c:	0c 94 34 26 	jmp	0x4c68	; 0x4c68 <__bad_interrupt>
      60:	0c 94 34 26 	jmp	0x4c68	; 0x4c68 <__bad_interrupt>
      64:	0c 94 34 26 	jmp	0x4c68	; 0x4c68 <__bad_interrupt>
      68:	0c 94 e6 2d 	jmp	0x5bcc	; 0x5bcc <__vector_26>
      6c:	0c 94 34 26 	jmp	0x4c68	; 0x4c68 <__bad_interrupt>
      70:	0c 94 34 26 	jmp	0x4c68	; 0x4c68 <__bad_interrupt>
      74:	0c 94 34 26 	jmp	0x4c68	; 0x4c68 <__bad_interrupt>
      78:	0c 94 34 26 	jmp	0x4c68	; 0x4c68 <__bad_interrupt>
      7c:	0c 94 34 26 	jmp	0x4c68	; 0x4c68 <__bad_interrupt>
      80:	0c 94 34 26 	jmp	0x4c68	; 0x4c68 <__bad_interrupt>
      84:	0c 94 34 26 	jmp	0x4c68	; 0x4c68 <__bad_interrupt>
      88:	0c 94 34 26 	jmp	0x4c68	; 0x4c68 <__bad_interrupt>
      8c:	f3 43       	sbci	r31, 0x33	; 51
      8e:	43 45       	sbci	r20, 0x53	; 83
      90:	2b 44       	sbci	r18, 0x4B	; 75
      92:	16 45       	sbci	r17, 0x56	; 86
      94:	16 45       	sbci	r17, 0x56	; 86
      96:	43 45       	sbci	r20, 0x53	; 83
      98:	43 45       	sbci	r20, 0x53	; 83
      9a:	43 45       	sbci	r20, 0x53	; 83
      9c:	43 45       	sbci	r20, 0x53	; 83
      9e:	43 45       	sbci	r20, 0x53	; 83
      a0:	43 45       	sbci	r20, 0x53	; 83
      a2:	43 45       	sbci	r20, 0x53	; 83
      a4:	43 45       	sbci	r20, 0x53	; 83
      a6:	f3 43       	sbci	r31, 0x33	; 51
      a8:	f0 43       	sbci	r31, 0x30	; 48
      aa:	43 45       	sbci	r20, 0x53	; 83
      ac:	43 45       	sbci	r20, 0x53	; 83
      ae:	39 45       	sbci	r19, 0x59	; 89
      b0:	43 45       	sbci	r20, 0x53	; 83
      b2:	25 44       	sbci	r18, 0x45	; 69
      b4:	43 45       	sbci	r20, 0x53	; 83
      b6:	43 45       	sbci	r20, 0x53	; 83
      b8:	f3 43       	sbci	r31, 0x33	; 51
      ba:	43 45       	sbci	r20, 0x53	; 83
      bc:	43 45       	sbci	r20, 0x53	; 83
      be:	43 45       	sbci	r20, 0x53	; 83
      c0:	43 45       	sbci	r20, 0x53	; 83
      c2:	43 45       	sbci	r20, 0x53	; 83
      c4:	43 45       	sbci	r20, 0x53	; 83
      c6:	43 45       	sbci	r20, 0x53	; 83
      c8:	43 45       	sbci	r20, 0x53	; 83
      ca:	43 45       	sbci	r20, 0x53	; 83
      cc:	f3 43       	sbci	r31, 0x33	; 51
      ce:	3e 45       	sbci	r19, 0x5E	; 94
      d0:	2b 44       	sbci	r18, 0x4B	; 75
      d2:	16 45       	sbci	r17, 0x56	; 86
      d4:	16 45       	sbci	r17, 0x56	; 86
      d6:	43 45       	sbci	r20, 0x53	; 83
      d8:	43 45       	sbci	r20, 0x53	; 83
      da:	43 45       	sbci	r20, 0x53	; 83
      dc:	43 45       	sbci	r20, 0x53	; 83
      de:	43 45       	sbci	r20, 0x53	; 83
      e0:	43 45       	sbci	r20, 0x53	; 83
      e2:	43 45       	sbci	r20, 0x53	; 83
      e4:	43 45       	sbci	r20, 0x53	; 83
      e6:	f3 43       	sbci	r31, 0x33	; 51
      e8:	f0 43       	sbci	r31, 0x30	; 48
      ea:	43 45       	sbci	r20, 0x53	; 83
      ec:	43 45       	sbci	r20, 0x53	; 83
      ee:	34 45       	sbci	r19, 0x54	; 84
      f0:	43 45       	sbci	r20, 0x53	; 83
      f2:	25 44       	sbci	r18, 0x45	; 69
      f4:	43 45       	sbci	r20, 0x53	; 83
      f6:	43 45       	sbci	r20, 0x53	; 83
      f8:	f3 43       	sbci	r31, 0x33	; 51
      fa:	68 45       	sbci	r22, 0x58	; 88
      fc:	a9 46       	sbci	r26, 0x69	; 105
      fe:	5b 45       	sbci	r21, 0x5B	; 91
     100:	c3 45       	sbci	r28, 0x53	; 83
     102:	a7 45       	sbci	r26, 0x57	; 87
     104:	a9 46       	sbci	r26, 0x69	; 105
     106:	a9 46       	sbci	r26, 0x69	; 105
     108:	a9 46       	sbci	r26, 0x69	; 105
     10a:	a9 46       	sbci	r26, 0x69	; 105
     10c:	a9 46       	sbci	r26, 0x69	; 105
     10e:	a9 46       	sbci	r26, 0x69	; 105
     110:	a9 46       	sbci	r26, 0x69	; 105
     112:	a9 46       	sbci	r26, 0x69	; 105
     114:	75 45       	sbci	r23, 0x55	; 85
     116:	89 45       	sbci	r24, 0x59	; 89
     118:	a9 46       	sbci	r26, 0x69	; 105
     11a:	a9 46       	sbci	r26, 0x69	; 105
     11c:	4f 46       	sbci	r20, 0x6F	; 111
     11e:	a9 46       	sbci	r26, 0x69	; 105
     120:	57 45       	sbci	r21, 0x57	; 87
     122:	a9 46       	sbci	r26, 0x69	; 105
     124:	a9 46       	sbci	r26, 0x69	; 105
     126:	89 45       	sbci	r24, 0x59	; 89
     128:	a9 46       	sbci	r26, 0x69	; 105
     12a:	a9 46       	sbci	r26, 0x69	; 105
     12c:	a9 46       	sbci	r26, 0x69	; 105
     12e:	a9 46       	sbci	r26, 0x69	; 105
     130:	a9 46       	sbci	r26, 0x69	; 105
     132:	a9 46       	sbci	r26, 0x69	; 105
     134:	a9 46       	sbci	r26, 0x69	; 105
     136:	a9 46       	sbci	r26, 0x69	; 105
     138:	a9 46       	sbci	r26, 0x69	; 105
     13a:	68 45       	sbci	r22, 0x58	; 88
     13c:	f7 45       	sbci	r31, 0x57	; 87
     13e:	5b 45       	sbci	r21, 0x5B	; 91
     140:	c3 45       	sbci	r28, 0x53	; 83
     142:	a7 45       	sbci	r26, 0x57	; 87
     144:	a9 46       	sbci	r26, 0x69	; 105
     146:	a9 46       	sbci	r26, 0x69	; 105
     148:	a9 46       	sbci	r26, 0x69	; 105
     14a:	a9 46       	sbci	r26, 0x69	; 105
     14c:	a9 46       	sbci	r26, 0x69	; 105
     14e:	a9 46       	sbci	r26, 0x69	; 105
     150:	a9 46       	sbci	r26, 0x69	; 105
     152:	a9 46       	sbci	r26, 0x69	; 105
     154:	75 45       	sbci	r23, 0x55	; 85
     156:	89 45       	sbci	r24, 0x59	; 89
     158:	a9 46       	sbci	r26, 0x69	; 105
     15a:	a9 46       	sbci	r26, 0x69	; 105
     15c:	f7 45       	sbci	r31, 0x57	; 87
     15e:	a9 46       	sbci	r26, 0x69	; 105
     160:	57 45       	sbci	r21, 0x57	; 87
     162:	a9 46       	sbci	r26, 0x69	; 105
     164:	a9 46       	sbci	r26, 0x69	; 105
     166:	89 45       	sbci	r24, 0x59	; 89
     168:	88 69       	ori	r24, 0x98	; 152
     16a:	92 69       	ori	r25, 0x92	; 146
     16c:	9a 69       	ori	r25, 0x9A	; 154
     16e:	9d 69       	ori	r25, 0x9D	; 157
     170:	a0 69       	ori	r26, 0x90	; 144
     172:	a3 69       	ori	r26, 0x93	; 147
     174:	a6 69       	ori	r26, 0x96	; 150
     176:	a9 69       	ori	r26, 0x99	; 153
     178:	ac 69       	ori	r26, 0x9C	; 156
     17a:	85 87       	std	Z+13, r24	; 0x0d
     17c:	8d 87       	std	Y+13, r24	; 0x0d
     17e:	be 87       	std	Y+14, r27	; 0x0e
     180:	d7 87       	std	Z+15, r29	; 0x0f
     182:	f3 87       	std	Z+11, r31	; 0x0b
     184:	00 88       	ldd	r0, Z+16	; 0x10
     186:	1c 88       	ldd	r1, Y+20	; 0x14
     188:	46 88       	ldd	r4, Z+22	; 0x16
     18a:	29 88       	ldd	r2, Y+17	; 0x11
     18c:	86 9f       	mul	r24, r22
     18e:	56 a0       	ldd	r5, Z+38	; 0x26
     190:	92 a0       	ldd	r9, Z+34	; 0x22
     192:	c5 a0       	ldd	r12, Z+37	; 0x25
     194:	d5 a0       	ldd	r13, Z+37	; 0x25
     196:	f2 a0       	ldd	r15, Z+34	; 0x22
     198:	52 a1       	ldd	r21, Z+34	; 0x22
     19a:	3d a2       	std	Y+37, r3	; 0x25
     19c:	3d a2       	std	Y+37, r3	; 0x25
     19e:	3d a2       	std	Y+37, r3	; 0x25
     1a0:	86 a1       	ldd	r24, Z+38	; 0x26
     1a2:	b2 a1       	ldd	r27, Z+34	; 0x22
     1a4:	f5 a1       	ldd	r31, Z+37	; 0x25
     1a6:	0c a2       	std	Y+36, r0	; 0x24
     1a8:	1f a0       	ldd	r1, Y+39	; 0x27
     1aa:	32 a0       	ldd	r3, Z+34	; 0x22
     1ac:	c3 bd       	out	0x23, r28	; 35
     1ae:	82 bd       	out	0x22, r24	; 34
     1b0:	82 bd       	out	0x22, r24	; 34
     1b2:	82 bd       	out	0x22, r24	; 34
     1b4:	82 bd       	out	0x22, r24	; 34
     1b6:	46 bd       	out	0x26, r20	; 38
     1b8:	4d bd       	out	0x2d, r20	; 45
     1ba:	54 bd       	out	0x24, r21	; 36
     1bc:	64 bd       	out	0x24, r22	; 36
     1be:	72 bd       	out	0x22, r23	; 34
     1c0:	6b bd       	out	0x2b, r22	; 43

000001c2 <__trampolines_end>:
     1c2:	63 73       	andi	r22, 0x33	; 51
     1c4:	5f 64       	ori	r21, 0x4F	; 79
     1c6:	69 73       	andi	r22, 0x39	; 57
     1c8:	61 62       	ori	r22, 0x21	; 33
     1ca:	6c 65       	ori	r22, 0x5C	; 92
     1cc:	20 77       	andi	r18, 0x70	; 112
     1ce:	61 73       	andi	r22, 0x31	; 49
     1d0:	3a 20       	and	r3, r10
     1d2:	25 64       	ori	r18, 0x45	; 69
     1d4:	2c 20       	and	r2, r12
     1d6:	77 61       	ori	r23, 0x17	; 23
     1d8:	6e 74       	andi	r22, 0x4E	; 78
     1da:	3a 20       	and	r3, r10
     1dc:	25 64       	ori	r18, 0x45	; 69
     1de:	0a 00       	.word	0x000a	; ????

000001e0 <__c.3617>:
     1e0:	63 73 5f 65 6e 61 62 6c 65 20 77 61 73 3a 20 25     cs_enable was: %
     1f0:	64 2c 20 77 61 6e 74 3a 20 25 64 0a 00              d, want: %d..

000001fd <__c.3648>:
     1fd:	73 61 66 65 66 72 65 65 3a 20 46 52 45 45 20 45     safefree: FREE E
     20d:	52 52 4f 52 20 28 25 75 29 2c 20 74 6f 70 3a 28     RROR (%u), top:(
     21d:	25 75 29 0a 00                                      %u)..

00000222 <__c.3639>:
     222:	73 61 66 65 6d 61 6c 6c 6f 63 28 25 64 29 20 66     safemalloc(%d) f
     232:	61 69 6c 65 64 21 0a 00                             ailed!..

0000023a <__c.3633>:
     23a:	73 61 66 65 63 61 6c 6c 6f 63 28 25 64 2c 25 64     safecalloc(%d,%d
     24a:	29 20 66 61 69 6c 65 64 21 0a 00                    ) failed!..

00000255 <__c.3618>:
     255:	20 20 5f 5f 62 72 6b 76 61 6c 3a 20 20 20 20 25       __brkval:    %
     265:	35 75 0a 00                                         5u..

00000269 <__c.3616>:
     269:	20 20 4d 61 6c 6c 6f 63 20 73 74 61 72 74 20 25       Malloc start %
     279:	35 75 20 20 65 6e 64 3a 20 25 35 75 0a 00           5u  end: %5u..

00000287 <__c.3614>:
     287:	20 20 48 65 61 70 3a 20 73 74 61 72 74 3a 20 25       Heap: start: %
     297:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000002a5 <__c.3612>:
     2a5:	20 20 44 61 74 61 20 20 73 74 61 72 74 3a 20 25       Data  start: %
     2b5:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000002c3 <__c.3610>:
     2c3:	20 20 42 53 53 20 20 20 73 74 61 72 74 3a 20 25       BSS   start: %
     2d3:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000002e1 <__c.3608>:
     2e1:	20 20 53 74 61 63 6b 20 46 72 65 65 3a 20 20 25       Stack Free:  %
     2f1:	75 0a 00                                            u..

000002f4 <__c.3606>:
     2f4:	20 20 53 74 61 63 6b 20 54 6f 70 3a 20 20 20 25       Stack Top:   %
     304:	75 0a 00                                            u..

00000307 <__c.3604>:
     307:	46 72 65 65 20 52 61 6d 3a 25 75 0a 00              Free Ram:%u..

00000314 <__c.3602>:
     314:	53 50 49 30 5f 4d 6f 64 65 3a 20 49 6e 76 61 6c     SPI0_Mode: Inval
     324:	69 64 20 6d 6f 64 65 28 25 64 29 0a 00              id mode(%d)..

00000331 <__c.3721>:
     331:	0a 00                                               ..

00000333 <__c.3719>:
     333:	74 61 73 6b 3a 20 25 64 0a 00                       task: %d..

0000033d <__c.3717>:
     33d:	69 32 63 5f 74 61 73 6b 2e 65 72 72 6f 72 3a 20     i2c_task.error: 
     34d:	25 64 0a 00                                         %d..

00000351 <__c.3715>:
     351:	69 32 63 5f 74 61 73 6b 2e 64 6f 6e 65 3a 20 25     i2c_task.done: %
     361:	64 0a 00                                            d..

00000364 <__c.3710>:
     364:	0a 00                                               ..

00000366 <__c.3708>:
     366:	20 20 54 57 5f 4d 54 5f 44 41 54 41 5f 4e 41 43       TW_MT_DATA_NAC
     376:	4b 0a 00                                            K..

00000379 <__c.3706>:
     379:	20 20 54 57 5f 4d 54 5f 53 4c 41 5f 4e 41 43 4b       TW_MT_SLA_NACK
     389:	0a 00                                               ..

0000038b <__c.3704>:
     38b:	20 20 54 57 5f 4d 52 5f 53 4c 41 5f 4e 41 43 4b       TW_MR_SLA_NACK
     39b:	0a 00                                               ..

0000039d <__c.3702>:
     39d:	20 20 4f 50 5f 45 52 52 4f 52 0a 00                   OP_ERROR..

000003a9 <__c.3700>:
     3a9:	20 20 4f 50 5f 4c 45 4e 0a 00                         OP_LEN..

000003b3 <__c.3698>:
     3b3:	20 20 4f 50 5f 54 49 4d 45 4f 55 54 0a 00             OP_TIMEOUT..

000003c1 <__c.3696>:
     3c1:	20 20 25 73 0a 00                                     %s..

000003c7 <__c.3646>:
     3c7:	69 32 63 5f 74 69 6d 65 72 20 69 6e 69 74 20 66     i2c_timer init f
     3d7:	61 69 6c 65 64 0a 00                                ailed..

000003de <__c.3640>:
     3de:	69 32 63 5f 69 6e 69 74 20 70 72 65 73 63 61 6c     i2c_init prescal
     3ee:	65 20 6f 76 65 72 66 6c 6f 77 0a 00                 e overflow..

000003fa <__c.3597>:
     3fa:	49 32 43 20 6f 70 5b 25 64 5d 2d 3e 6c 65 6e 20     I2C op[%d]->len 
     40a:	3d 3d 20 30 0a 00                                   == 0..

00000410 <__c.3595>:
     410:	49 32 43 20 6f 70 5b 25 64 5d 2d 3e 62 75 66 20     I2C op[%d]->buf 
     420:	3d 3d 20 4e 55 4c 4c 0a 00                          == NULL..

00000429 <__c.3593>:
     429:	49 32 43 20 6f 70 5b 49 4e 44 45 58 20 25 64 20     I2C op[INDEX %d 
     439:	3e 3d 20 25 64 5d 0a 00                             >= %d]..

00000441 <__c.3643>:
     441:	72 74 63 5f 69 6e 69 74 20 20 77 72 69 74 65 20     rtc_init  write 
     451:	65 70 6f 63 68 20 66 61 69 6c 65 64 0a 00           epoch failed..

0000045f <__c.3633>:
     45f:	72 74 63 5f 72 75 6e 20 77 72 69 74 65 20 65 72     rtc_run write er
     46f:	72 6f 72 0a 00                                      ror..

00000474 <__c.3631>:
     474:	72 74 63 5f 72 75 6e 20 72 65 61 64 20 65 72 72     rtc_run read err
     484:	6f 72 0a 00                                         or..

00000488 <__c.3625>:
     488:	72 74 63 5f 72 65 61 64 20 65 72 72 6f 72 0a 00     rtc_read error..

00000498 <__c.3619>:
     498:	72 74 63 5f 77 72 69 74 65 20 65 72 72 6f 72 0a     rtc_write error.
	...

000004a9 <__c.3611>:
     4a9:	69 32 63 5f 72 74 63 5f 72 65 61 64 20 64 61 74     i2c_rtc_read dat
     4b9:	61 20 65 72 72 6f 72 0a 00                          a error..

000004c2 <__c.3609>:
     4c2:	69 32 63 5f 72 74 63 5f 72 65 61 64 20 61 64 64     i2c_rtc_read add
     4d2:	72 65 73 73 20 65 72 72 6f 72 0a 00                 ress error..

000004de <__c.3601>:
     4de:	69 32 63 5f 72 74 63 5f 77 72 69 74 65 20 64 61     i2c_rtc_write da
     4ee:	74 61 20 65 72 72 6f 72 0a 00                       ta error..

000004f8 <__c.3629>:
     4f8:	25 73 20 65 78 70 65 63 74 65 64 20 25 64 20 61     %s expected %d a
     508:	72 67 75 6d 65 6e 74 73 20 6f 6e 6c 79 20 67 6f     rguments only go
     518:	74 20 25 64 0a 00                                   t %d..

0000051e <__c.3586>:
     51e:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     52e:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

0000053e <__c.3665>:
     53e:	54 69 6d 65 72 73 20 65 6e 61 62 6c 65 64 0a 00     Timers enabled..

0000054e <__c.3663>:
     54e:	43 6c 6f 63 6b 20 49 6e 73 74 61 6c 6c 65 64 0a     Clock Installed.
	...

0000055f <__c.3661>:
     55f:	43 6c 6f 63 6b 20 74 61 73 6b 20 69 6e 69 74 20     Clock task init 
     56f:	66 61 69 6c 65 64 0a 00                             failed..

00000577 <__c.3659>:
     577:	43 6c 6f 63 6b 20 49 6e 69 74 0a 00                 Clock Init..

00000583 <__c.3657>:
     583:	54 69 6d 65 72 73 20 63 6f 6e 66 69 67 75 72 65     Timers configure
     593:	64 0a 00                                            d..

00000596 <__c.3655>:
     596:	54 69 6d 65 72 73 20 69 6e 69 74 20 63 61 6c 6c     Timers init call
     5a6:	65 64 0a 00                                         ed..

000005aa <__c.3635>:
     5aa:	5b 54 69 6d 65 3a 25 73 5d 0a 00                    [Time:%s]..

000005b5 <__c.3633>:
     5b5:	5b 25 73 20 54 69 6d 65 3a 25 73 5d 0a 00           [%s Time:%s]..

000005c3 <__c.3619>:
     5c3:	25 6c 64 2e 25 30 39 6c 64 00                       %ld.%09ld.

000005cd <__c.3599>:
     5cd:	73 65 74 5f 74 69 6d 65 72 73 3a 20 4e 6f 20 6d     set_timers: No m
     5dd:	6f 72 65 20 74 69 6d 65 72 73 21 0a 00              ore timers!..

000005ea <__c.3874>:
     5ea:	63 6c 6b 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     clk time:    %s.
	...

000005fb <__c.3872>:
     5fb:	63 6c 6b 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     clk seconds: %lu
     60b:	0a 00                                               ..

0000060d <__c.3870>:
     60d:	52 54 43 20 72 65 61 64 20 66 61 69 6c 65 64 0a     RTC read failed.
	...

0000061e <__c.3868>:
     61e:	72 74 63 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     rtc time:    %s.
	...

0000062f <__c.3866>:
     62f:	72 74 63 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     rtc seconds: %lu
     63f:	0a 00                                               ..

00000641 <__c.3859>:
     641:	75 73 65 20 73 65 74 64 61 74 65 20 63 6f 6d 6d     use setdate comm
     651:	61 6e 64 20 74 6f 20 63 68 61 6e 67 65 20 74 69     and to change ti
     661:	6d 65 0a 00                                         me..

00000665 <__c.3857>:
     665:	72 74 63 20 72 65 61 64 20 65 72 72 6f 72 61 66     rtc read erroraf
     675:	74 65 72 20 69 6e 69 74 0a 00                       ter init..

0000067f <__c.3855>:
     67f:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     68f:	61 69 6c 65 64 0a 00                                ailed..

00000696 <__c.3853>:
     696:	61 74 74 65 6d 70 74 69 6e 67 20 72 74 63 20 69     attempting rtc i
     6a6:	6e 69 74 0a 00                                      nit..

000006ab <__c.3851>:
     6ab:	72 74 63 20 75 6e 69 6e 69 74 69 6c 69 7a 65 64     rtc uninitilized
     6bb:	0a 00                                               ..

000006bd <__c.3805>:
     6bd:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     6cd:	61 69 6c 65 64 0a 00                                ailed..

000006d4 <__c.3803>:
     6d4:	69 6e 76 61 6c 69 64 20 6d 69 6e 3a 20 25 64 0a     invalid min: %d.
	...

000006e5 <__c.3801>:
     6e5:	69 6e 76 61 6c 69 64 20 68 6f 75 72 3a 20 25 64     invalid hour: %d
     6f5:	0a 00                                               ..

000006f7 <__c.3799>:
     6f7:	69 6e 76 61 6c 69 64 20 64 61 79 3a 20 25 64 0a     invalid day: %d.
	...

00000708 <__c.3797>:
     708:	69 6e 76 61 6c 69 64 20 6d 6f 6e 3a 20 25 64 0a     invalid mon: %d.
	...

00000719 <__c.3795>:
     719:	69 6e 76 61 6c 69 64 20 79 65 61 72 3a 20 25 64     invalid year: %d
     729:	0a 00                                               ..

0000072b <__c.3774>:
     72b:	45 6e 74 65 72 20 64 61 74 65 20 59 59 59 59 20     Enter date YYYY 
     73b:	4d 4d 20 44 44 20 48 48 3a 4d 4d 3a 53 53 20 3e     MM DD HH:MM:SS >
	...

0000074c <__c.3649>:
     74c:	25 73 20 25 73 20 25 32 64 20 25 30 32 64 3a 25     %s %s %2d %02d:%
     75c:	30 32 64 3a 25 30 32 64 20 25 34 64 00              02d:%02d %4d.

00000769 <__c.3617>:
     769:	73 65 6c 65 63 74 20 66 61 69 6c 65 64 21 0a 00     select failed!..

00000779 <__c.3651>:
     779:	45 4e 44 20 4d 4d 43 20 49 4e 49 54 0a 00           END MMC INIT..

00000787 <__c.3649>:
     787:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 3a 20     MMC Block Size: 
     797:	25 6c 64 0a 00                                      %ld..

0000079c <__c.3647>:
     79c:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 20 2d     MMC Block Size -
     7ac:	20 72 65 61 64 20 66 61 69 6c 65 64 0a 00            read failed..

000007ba <__c.3644>:
     7ba:	2c 20 43 6f 64 65 20 70 61 67 65 3a 20 25 75 0a     , Code page: %u.
	...

000007cb <__c.3642>:
     7cb:	4c 46 4e 20 45 6e 61 62 6c 65 64 00                 LFN Enabled.

000007d7 <__c.3640>:
     7d7:	4d 4d 43 20 43 61 72 64 20 49 6e 73 65 72 74 65     MMC Card Inserte
     7e7:	64 0a 00                                            d..

000007ea <__c.3638>:
     7ea:	2a 2a 2a 20 4d 4d 43 20 43 61 72 64 20 4e 4f 54     *** MMC Card NOT
     7fa:	20 49 6e 73 65 72 74 65 64 21 20 2a 2a 2a 0a 00      Inserted! ***..

0000080a <__c.3636>:
     80a:	53 54 41 52 54 20 4d 4d 43 20 49 4e 49 54 0a 00     START MMC INIT..

0000081a <__c.3622>:
     81a:	4d 4d 43 20 54 49 4d 45 4f 55 54 0a 00              MMC TIMEOUT..

00000827 <__c.3594>:
     827:	4d 4d 43 20 43 6c 6f 63 6b 20 74 61 73 6b 20 69     MMC Clock task i
     837:	6e 69 74 20 66 61 69 6c 65 64 0a 00                 nit failed..

00000843 <__c.3672>:
     843:	0a 00                                               ..

00000845 <__c.3670>:
     845:	25 73 20 25 75 2f 25 30 32 75 2f 25 30 32 75 20     %s %u/%02u/%02u 
     855:	25 30 32 75 3a 25 30 32 75 20 25 39 6c 75 20 25     %02u:%02u %9lu %
     865:	73 00                                               s.

00000867 <__c.3668>:
     867:	66 61 74 66 73 5f 66 69 6c 69 6e 66 6f 5f 6c 69     fatfs_filinfo_li
     877:	73 74 3a 20 65 6d 70 74 79 0a 00                    st: empty..

00000882 <__c.3662>:
     882:	25 75 20 66 69 6c 65 73 2c 20 25 6c 75 20 62 79     %u files, %lu by
     892:	74 65 73 2e 0a 25 75 20 66 6f 6c 64 65 72 73 2e     tes..%u folders.
     8a2:	0a 25 6c 75 20 4b 42 20 74 6f 74 61 6c 20 64 69     .%lu KB total di
     8b2:	73 6b 20 73 70 61 63 65 2e 0a 25 6c 75 20 4b 42     sk space..%lu KB
     8c2:	20 61 76 61 69 6c 61 62 6c 65 2e 0a 00               available...

000008cf <__c.3660>:
     8cf:	66 61 74 66 73 5f 73 74 61 74 75 73 20 66 61 74     fatfs_status fat
     8df:	66 73 5f 73 63 61 6e 5f 66 69 6c 65 73 20 66 61     fs_scan_files fa
     8ef:	69 6c 65 64 0a 00                                   iled..

000008f5 <__c.3658>:
     8f5:	56 6f 6c 75 6d 65 20 53 2f 4e 20 20 20 20 20 20     Volume S/N      
     905:	20 20 20 20 20 20 20 20 3d 20 25 30 34 58 2d 25             = %04X-%
     915:	30 34 58 0a 00                                      04X..

0000091a <__c.3656>:
     91a:	56 6f 6c 75 6d 65 20 6e 61 6d 65 20 20 20 20 20     Volume name     
     92a:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

00000938 <__c.3654>:
     938:	66 61 74 66 73 5f 73 74 61 74 75 73 20 66 5f 67     fatfs_status f_g
     948:	65 74 6c 61 62 65 6c 20 66 61 69 6c 65 64 0a 00     etlabel failed..

00000958 <__c.3652>:
     958:	44 61 74 61 20 73 74 61 72 74 20 28 6c 62 61 29     Data start (lba)
     968:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000977 <__c.3650>:
     977:	44 49 52 20 73 74 61 72 74 20 28 6c 62 61 2c 63     DIR start (lba,c
     987:	6c 75 73 74 6f 72 29 20 3d 20 25 6c 75 0a 00        lustor) = %lu..

00000996 <__c.3648>:
     996:	46 41 54 20 73 74 61 72 74 20 28 6c 62 61 29 20     FAT start (lba) 
     9a6:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

000009b5 <__c.3646>:
     9b5:	4e 75 6d 62 65 72 20 6f 66 20 63 6c 75 73 74 65     Number of cluste
     9c5:	72 73 20 20 20 20 20 20 3d 20 25 6c 75 0a 00        rs      = %lu..

000009d4 <__c.3644>:
     9d4:	53 65 63 74 6f 72 73 2f 46 41 54 20 20 20 20 20     Sectors/FAT     
     9e4:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

000009f3 <__c.3642>:
     9f3:	52 6f 6f 74 20 44 49 52 20 65 6e 74 72 69 65 73     Root DIR entries
     a03:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

00000a11 <__c.3640>:
     a11:	4e 75 6d 62 65 72 20 6f 66 20 46 41 54 73 20 20     Number of FATs  
     a21:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

00000a2f <__c.3638>:
     a2f:	42 79 74 65 73 2f 43 6c 75 73 74 65 72 20 20 20     Bytes/Cluster   
     a3f:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000a4e <__c.3636>:
     a4e:	46 41 54 20 74 79 70 65 20 20 20 20 20 20 20 20     FAT type        
     a5e:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

00000a6c <__c.3634>:
     a6c:	66 61 74 66 73 5f 73 74 61 74 75 73 20 66 5f 67     fatfs_status f_g
     a7c:	65 74 66 72 65 65 20 66 61 69 6c 65 64 0a 00        etfree failed..

00000a8b <__c.3632>:
     a8b:	66 61 74 66 73 20 73 74 61 74 75 73 3a 25 73 0a     fatfs status:%s.
	...

00000a9c <__c.3596>:
     a9c:	72 63 3d 25 75 0a 00                                rc=%u..

00000aa3 <__c.3628>:
     aa3:	2c 20 25 31 30 6c 75 4b 20 62 79 74 65 73 20 66     , %10luK bytes f
     ab3:	72 65 65 0a 00                                      ree..

00000ab8 <__c.3626>:
     ab8:	25 34 75 20 46 69 6c 65 28 73 29 2c 25 31 30 6c     %4u File(s),%10l
     ac8:	75 20 62 79 74 65 73 20 74 6f 74 61 6c 0a 25 34     u bytes total.%4
     ad8:	75 20 44 69 72 28 73 29 00                          u Dir(s).

00000ae1 <__c.3622>:
     ae1:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000aef <__c.3609>:
     aef:	45 4e 44 20 4d 4d 43 20 54 45 53 54 0a 00           END MMC TEST..

00000afd <__c.3607>:
     afd:	4d 4d 43 20 44 69 72 65 63 74 6f 72 79 20 4c 69     MMC Directory Li
     b0d:	73 74 0a 00                                         st..

00000b11 <__c.3605>:
     b11:	53 54 41 52 54 20 4d 4d 43 20 54 45 53 54 0a 00     START MMC TEST..

00000b21 <__c.3587>:
     b21:	4e 6f 74 65 3a 20 66 61 74 66 73 20 74 65 73 74     Note: fatfs test
     b31:	73 20 4d 55 53 54 20 73 74 61 72 74 20 77 69 74     s MUST start wit
     b41:	68 20 22 66 61 74 66 73 22 20 6b 65 79 77 6f 72     h "fatfs" keywor
     b51:	64 0a 66 61 74 66 73 20 68 65 6c 70 0a 66 61 74     d.fatfs help.fat
     b61:	66 73 20 6d 6d 63 5f 74 65 73 74 0a 66 61 74 66     fs mmc_test.fatf
     b71:	73 20 6d 6d 63 5f 69 6e 69 74 0a 66 61 74 66 73     s mmc_init.fatfs
     b81:	20 6c 73 20 64 69 72 65 63 74 6f 72 79 0a 66 61      ls directory.fa
     b91:	74 66 73 20 73 74 61 74 75 73 0a 0a 00              tfs status...

00000b9e <__c.3919>:
     b9e:	25 73 0a 00                                         %s..

00000ba2 <__c.3917>:
     ba2:	25 73 3a 20 25 73 0a 00                             %s: %s..

00000baa <__c.3672>:
     baa:	53 65 65 6b 20 66 61 69 6c 65 64 00                 Seek failed.

00000bb6 <__c.3601>:
     bb6:	66 70 75 74 63 20 73 74 72 65 61 6d 2d 3e 70 75     fputc stream->pu
     bc6:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000bce <__c.3594>:
     bce:	66 67 65 74 63 20 73 74 72 65 61 6d 2d 3e 67 65     fgetc stream->ge
     bde:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000be6 <__c.3764>:
     be6:	46 69 6c 65 73 3a 20 25 64 0a 00                    Files: %d..

00000bf1 <__c.3760>:
     bf1:	6e 61 6d 65 3a 5b 25 73 5d 20 74 6f 6f 20 6c 6f     name:[%s] too lo
     c01:	6e 67 20 77 69 74 68 20 66 75 6c 6c 20 70 61 74     ng with full pat
     c11:	68 0a 00                                            h..

00000c14 <__c.3757>:
     c14:	6f 70 65 6e 64 69 72 20 66 61 69 6c 65 64 0a 00     opendir failed..

00000c24 <__c.3752>:
     c24:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000c32 <__c.3750>:
     c32:	6c 73 3a 20 63 61 6e 6e 6f 74 20 73 74 61 74 20     ls: cannot stat 
     c42:	5b 25 73 5d 0a 00                                   [%s]..

00000c48 <__c.3748>:
     c48:	6c 73 3a 20 43 61 6e 27 74 20 67 65 74 20 63 75     ls: Can't get cu
     c58:	72 72 65 6e 74 20 64 69 72 65 63 74 6f 72 79 0a     rrent directory.
	...

00000c69 <__c.3735>:
     c69:	25 73 20 6e 6f 6e 65 20 6e 6f 6e 65 20 25 31 32     %s none none %12
     c79:	6c 64 20 25 73 20 25 73 0a 00                       ld %s %s..

00000c83 <__c.3730>:
     c83:	25 73 0a 00                                         %s..

00000c87 <__c.3728>:
     c87:	63 61 6e 20 6e 6f 74 20 73 74 61 74 3a 20 25 73     can not stat: %s
     c97:	0a 00                                               ..

00000c99 <__c.3716>:
     c99:	0d 00                                               ..

00000c9b <__c.3714>:
     c9b:	4d 6f 72 65 2e 2e 00                                More...

00000ca2 <__c.3704>:
     ca2:	25 6c 75 20 62 79 74 65 73 20 63 6f 70 69 65 64     %lu bytes copied
     cb2:	2e 0a 00                                            ...

00000cb5 <__c.3700>:
     cb5:	43 6f 70 69 65 64 3a 20 25 30 38 6c 64 0d 00        Copied: %08ld..

00000cc4 <__c.3697>:
     cc4:	57 72 69 74 65 20 65 72 72 6f 72 0a 00              Write error..

00000cd1 <__c.3695>:
     cd1:	0a 43 6f 70 79 69 6e 67 2e 2e 2e 0a 00              .Copying.....

00000cde <__c.3693>:
     cde:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000cee <__c.3691>:
     cee:	43 72 65 61 74 69 6e 67 20 25 73 0a 00              Creating %s..

00000cfb <__c.3689>:
     cfb:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000d0b <__c.3687>:
     d0b:	4f 70 65 6e 69 6e 67 20 25 73 0a 00                 Opening %s..

00000d17 <__c.3676>:
     d17:	25 6c 64 20 62 79 74 65 73 0a 00                    %ld bytes..

00000d22 <__c.3674>:
     d22:	0a 00                                               ..

00000d24 <__c.3669>:
     d24:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000d34 <__c.3659>:
     d34:	72 6d 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     rmdir %s failed.
	...

00000d45 <__c.3657>:
     d45:	72 6d 20 25 73 20 66 61 69 6c 65 64 0a 00           rm %s failed..

00000d53 <__c.3655>:
     d53:	72 65 6e 61 6d 65 20 25 73 20 74 6f 20 25 73 0a     rename %s to %s.
	...

00000d64 <__c.3653>:
     d64:	25 73 0a 00                                         %s..

00000d68 <__c.3651>:
     d68:	70 77 64 20 46 41 49 4c 45 44 0a 00                 pwd FAILED..

00000d74 <__c.3647>:
     d74:	6d 6b 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     mkdir %s failed.
	...

00000d85 <__c.3640>:
     d85:	6c 73 3a 20 6e 75 6c 6c 20 61 72 67 75 6d 65 6e     ls: null argumen
     d95:	74 20 23 20 25 64 0a 00                             t # %d..

00000d9d <__c.3636>:
     d9d:	63 68 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     chdir %s failed.
	...

00000dae <__c.3620>:
     dae:	4e 6f 74 65 3a 20 70 6f 73 69 78 20 70 72 65 66     Note: posix pref
     dbe:	69 78 20 69 73 20 6f 70 74 69 6f 6e 61 6c 0a 70     ix is optional.p
     dce:	6f 73 69 78 20 63 61 74 20 66 69 6c 65 20 5b 2d     osix cat file [-
     dde:	70 5d 0a 70 6f 73 69 78 20 63 64 20 64 69 72 0a     p].posix cd dir.
     dee:	70 6f 73 69 78 20 63 6f 70 79 20 66 69 6c 65 31     posix copy file1
     dfe:	20 66 69 6c 65 32 0a 70 6f 73 69 78 20 6c 73 20      file2.posix ls 
     e0e:	64 69 72 20 5b 2d 6c 5d 0a 70 6f 73 69 78 20 6d     dir [-l].posix m
     e1e:	6b 64 69 72 20 64 69 72 0a 70 6f 73 69 78 20 70     kdir dir.posix p
     e2e:	61 67 65 20 4e 4e 0a 70 6f 73 69 78 20 70 77 64     age NN.posix pwd
     e3e:	0a 70 6f 73 69 78 20 72 6d 20 66 69 6c 65 0a 70     .posix rm file.p
     e4e:	6f 73 69 78 20 72 6d 64 69 72 20 64 69 72 0a 70     osix rmdir dir.p
     e5e:	6f 73 69 78 20 72 65 6e 61 6d 65 20 6f 6c 64 20     osix rename old 
     e6e:	6e 65 77 0a 0a 00                                   new...

00000e74 <__c.3618>:
     e74:	70 6f 73 69 78 20 68 65 6c 70 0a 00                 posix help..

00000e80 <__c.3807>:
     e80:	43 6c 6f 73 65 20 65 72 72 6f 72 3a 20 00           Close error: .

00000e8e <__c.3801>:
     e8e:	53 65 65 6b 20 65 72 72 6f 72 3a 20 00              Seek error: .

00000e9b <__c.3794>:
     e9b:	57 72 69 74 65 20 65 72 72 6f 72 3a 20 00           Write error: .

00000ea9 <__c.3785>:
     ea9:	52 65 61 64 20 65 72 72 6f 72 3a 20 00              Read error: .

00000eb6 <__c.3776>:
     eb6:	4f 70 65 6e 20 65 72 72 6f 72 3a 5b 25 73 5d 20     Open error:[%s] 
	...

00000ec7 <__c.3762>:
     ec7:	5b 50 50 52 20 44 49 53 41 42 4c 45 20 41 4c 4c     [PPR DISABLE ALL
     ed7:	5d 0a 00                                            ]..

00000eda <__c.3744>:
     eda:	47 50 49 42 20 43 6c 6f 63 6b 20 74 61 73 6b 20     GPIB Clock task 
     eea:	69 6e 69 74 20 66 61 69 6c 65 64 0a 00              init failed..

00000ef7 <__c.4418>:
     ef7:	5b 67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 20     [gpib_write_str 
     f07:	73 65 6e 74 28 25 64 29 20 65 78 70 65 63 74 65     sent(%d) expecte
     f17:	64 28 25 64 29 5d 0a 00                             d(%d)]..

00000f1f <__c.4410>:
     f1f:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
     f2f:	20 44 41 56 3d 3d 31 3e 0a 00                        DAV==1>..

00000f39 <__c.4405>:
     f39:	3c 67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 20     <gpib_write_str 
     f49:	74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67 20     timeout waiting 
     f59:	66 6f 72 20 41 54 4e 20 3d 20 31 3e 0a 00           for ATN = 1>..

00000f67 <__c.4403>:
     f67:	67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 3a 20     gpib_write_str: 
     f77:	73 69 7a 65 20 3d 20 30 0a 00                       size = 0..

00000f81 <__c.4393>:
     f81:	5b 67 70 69 62 5f 72 65 61 64 5f 73 74 72 20 72     [gpib_read_str r
     f91:	65 61 64 28 25 64 29 20 65 78 70 65 63 74 65 64     ead(%d) expected
     fa1:	28 25 64 29 5d 0a 00                                (%d)]..

00000fa8 <__c.4389>:
     fa8:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 28 69 6e     gpib_read_str(in
     fb8:	64 3a 25 64 29 3a 20 41 54 4e 20 25 30 32 58 48     d:%d): ATN %02XH
     fc8:	20 75 6e 65 78 70 65 63 74 65 64 0a 00               unexpected..

00000fd5 <__c.4386>:
     fd5:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 3a 20 73     gpib_read_str: s
     fe5:	69 7a 65 20 3d 20 30 0a 00                          ize = 0..

00000fee <__c.4370>:
     fee:	20 4d 53 41 20 25 30 32 58 68 00                     MSA %02Xh.

00000ff9 <__c.4368>:
     ff9:	20 4d 54 41 20 25 30 32 58 68 00                     MTA %02Xh.

00001004 <__c.4366>:
    1004:	20 4d 4c 41 20 25 30 32 58 68 00                     MLA %02Xh.

0000100f <__c.4362>:
    100f:	20 20 20 20 20 00                                        .

00001015 <__c.4360>:
    1015:	25 30 32 58 20 25 63 20 00                          %02X %c .

0000101e <__c.4334>:
    101e:	67 70 69 62 5f 72 65 61 64 5f 62 79 74 65 3a 20     gpib_read_byte: 
    102e:	49 46 43 20 73 74 61 74 65 3d 25 64 0a 00           IFC state=%d..

0000103c <__c.4318>:
    103c:	3c 47 50 49 42 20 54 58 20 54 49 4d 45 4f 55 54     <GPIB TX TIMEOUT
    104c:	3e 0a 00                                            >..

0000104f <__c.4313>:
    104f:	3c 67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65     <gpib_write_byte
    105f:	20 74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67      timeout waiting
    106f:	20 66 6f 72 20 4e 44 41 43 3d 3d 31 3e 0a 00         for NDAC==1>..

0000107e <__c.4309>:
    107e:	3c 67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65     <gpib_write_byte
    108e:	20 74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67      timeout waiting
    109e:	20 66 6f 72 20 4e 52 46 44 3d 3d 31 20 26 26 20      for NRFD==1 && 
    10ae:	4e 44 41 43 20 3d 3d 20 30 3e 0a 00                 NDAC == 0>..

000010ba <__c.4305>:
    10ba:	3c 67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65     <gpib_write_byte
    10ca:	20 74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67      timeout waiting
    10da:	20 66 6f 72 20 4e 52 46 44 3d 3d 31 20 26 26 20      for NRFD==1 && 
    10ea:	4e 44 41 43 20 3d 3d 20 30 3e 0a 00                 NDAC == 0>..

000010f6 <__c.4303>:
    10f6:	67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65 3a     gpib_write_byte:
    1106:	20 41 54 4e 20 3d 20 30 20 77 68 69 6c 65 20 77      ATN = 0 while w
    1116:	61 69 74 69 6e 67 20 66 6f 72 20 4e 52 46 44 20     aiting for NRFD 
    1126:	4c 4f 57 20 73 74 61 74 65 20 3d 25 64 0a 00        LOW state =%d..

00001135 <__c.4298>:
    1135:	67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65 3a     gpib_write_byte:
    1145:	20 49 46 43 20 73 74 61 74 65 3d 25 64 0a 00         IFC state=%d..

00001154 <__c.4282>:
    1154:	67 70 69 62 5f 75 6e 72 65 61 64 3a 20 65 72 72     gpib_unread: err
    1164:	6f 72 2c 20 63 61 6e 20 6f 6e 6c 79 20 62 65 20     or, can only be 
    1174:	63 61 6c 6c 65 64 20 6f 6e 63 65 21 0a 00           called once!..

00001182 <__c.4266>:
    1182:	5b 44 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [DPPR bit:%d, ma
    1192:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

0000119d <__c.4264>:
    119d:	67 70 69 62 5f 64 69 73 61 62 6c 65 5f 50 50 52     gpib_disable_PPR
    11ad:	3a 20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20     : bit %d out of 
    11bd:	72 61 6e 67 65 0a 00                                range..

000011c4 <__c.4259>:
    11c4:	5b 45 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [EPPR bit:%d, ma
    11d4:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

000011df <__c.4257>:
    11df:	67 70 69 62 5f 65 6e 61 62 6c 65 5f 50 50 52 3a     gpib_enable_PPR:
    11ef:	20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20 72      bit %d out of r
    11ff:	61 6e 67 65 0a 00                                   ange..

00001205 <__c.4252>:
    1205:	5b 47 50 49 42 20 53 54 41 54 45 20 49 4e 49 54     [GPIB STATE INIT
    1215:	5d 0a 00                                            ]..

00001218 <__c.4240>:
    1218:	5b 47 50 49 42 20 42 55 53 5f 49 4e 49 54 5d 0a     [GPIB BUS_INIT].
	...

00001229 <__c.4417>:
    1229:	5b 50 52 49 4e 54 45 52 20 63 6c 6f 73 65 5d 0a     [PRINTER close].
	...

0000123a <__c.4412>:
    123a:	5b 53 41 20 25 30 32 58 48 2c 20 6c 69 73 74 65     [SA %02XH, liste
    124a:	6e 3a 25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30     n:%02XH, talk:%0
    125a:	32 58 48 5d 0a 00                                   2XH]..

00001260 <__c.4410>:
    1260:	5b 53 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [SA %02XH AMIGO]
    1270:	0a 00                                               ..

00001272 <__c.4408>:
    1272:	5b 53 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [SA %02XH SS80].
	...

00001283 <__c.4403>:
    1283:	5b 54 41 20 25 30 32 58 48 5d 0a 00                 [TA %02XH]..

0000128f <__c.4401>:
    128f:	5b 50 52 49 4e 54 45 52 20 4f 50 45 4e 5d 0a 00     [PRINTER OPEN]..

0000129f <__c.4399>:
    129f:	5b 54 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [TA %02XH PRINTE
    12af:	52 5d 0a 00                                         R]..

000012b3 <__c.4397>:
    12b3:	5b 54 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [TA %02XH AMIGO]
    12c3:	0a 00                                               ..

000012c5 <__c.4395>:
    12c5:	5b 54 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [TA %02XH SS80].
	...

000012d6 <__c.4393>:
    12d6:	5b 55 4e 54 5d 0a 00                                [UNT]..

000012dd <__c.4388>:
    12dd:	5b 4c 41 20 25 30 32 58 48 5d 0a 00                 [LA %02XH]..

000012e9 <__c.4386>:
    12e9:	5b 4c 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [LA %02XH PRINTE
    12f9:	52 5d 0a 00                                         R]..

000012fd <__c.4384>:
    12fd:	5b 4c 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [LA %02XH SS80].
	...

0000130e <__c.4382>:
    130e:	5b 4c 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [LA %02XH AMIGO]
    131e:	0a 00                                               ..

00001320 <__c.4380>:
    1320:	0a 00                                               ..

00001322 <__c.4378>:
    1322:	5b 55 4e 4c 5d 0a 00                                [UNL]..

00001329 <__c.4373>:
    1329:	5b 47 50 49 42 20 28 25 30 32 58 48 29 20 6e 6f     [GPIB (%02XH) no
    1339:	74 20 64 65 66 69 6e 65 64 20 54 4f 44 4f 5d 0a     t defined TODO].
	...

0000134a <__c.4371>:
    134a:	5b 44 43 4c 5d 0a 00                                [DCL]..

00001351 <__c.4369>:
    1351:	5b 53 44 43 20 41 4d 49 47 4f 5d 0a 00              [SDC AMIGO]..

0000135e <__c.4367>:
    135e:	5b 53 44 43 20 53 53 38 30 5d 0a 00                 [SDC SS80]..

0000136a <__c.4365>:
    136a:	5b 53 44 43 5d 0a 00                                [SDC]..

00001371 <__c.4363>:
    1371:	5b 53 50 44 5d 0a 00                                [SPD]..

00001378 <__c.4361>:
    1378:	5b 53 50 45 5d 0a 00                                [SPE]..

0000137f <__c.4359>:
    137f:	5b 50 50 55 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPU unsupported
    138f:	20 54 4f 44 4f 5d 0a 00                              TODO]..

00001397 <__c.4357>:
    1397:	5b 50 50 43 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPC unsupported
    13a7:	20 54 4f 44 4f 5d 0a 00                              TODO]..

000013af <__c.4352>:
    13af:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    13bf:	48 3d 25 30 34 58 48 5d 0a 00                       H=%04XH]..

000013c9 <__c.4350>:
    13c9:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    13d9:	48 3d 25 30 34 58 48 20 46 41 49 4c 45 44 5d 0a     H=%04XH FAILED].
	...

000013ea <__c.4323>:
    13ea:	3c 4d 45 44 49 41 20 4d 49 53 53 49 4e 47 3e 0a     <MEDIA MISSING>.
	...

000013fb <__c.4321>:
    13fb:	3c 49 4e 54 45 52 52 55 50 54 3e 0a 00              <INTERRUPT>..

00001408 <__c.4319>:
    1408:	3c 42 55 53 3e 0a 00                                <BUS>..

0000140f <__c.4317>:
    140f:	3c 54 49 4d 45 4f 55 54 3e 0a 00                    <TIMEOUT>..

0000141a <__c.4315>:
    141a:	3c 49 46 43 3e 0a 00                                <IFC>..

00001421 <__c.4310>:
    1421:	43 61 70 74 75 72 69 6e 67 20 43 6c 6f 73 65 64     Capturing Closed
    1431:	0a 00                                               ..

00001433 <__c.4308>:
    1433:	44 6f 6e 65 0a 00                                   Done..

00001439 <__c.4304>:
    1439:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

00001445 <__c.4302>:
    1445:	50 72 65 73 73 20 41 4e 59 20 6b 65 79 20 74 6f     Press ANY key to
    1455:	20 65 78 69 74 0a 00                                 exit..

0000145c <__c.4300>:
    145c:	46 55 4c 4c 20 47 50 49 42 20 42 55 53 20 68 61     FULL GPIB BUS ha
    146c:	6e 64 73 68 61 6b 65 20 6c 6f 67 67 69 6e 67 20     ndshake logging 
    147c:	72 65 71 75 65 73 74 65 64 0a 00                    requested..

00001487 <__c.4298>:
    1487:	43 61 70 74 75 72 69 6e 67 20 47 50 49 42 20 42     Capturing GPIB B
    1497:	55 53 20 74 6f 3a 25 73 0a 00                       US to:%s..

000014a1 <__c.4252>:
    14a1:	43 61 72 64 20 69 73 20 77 72 69 74 65 20 70 72     Card is write pr
    14b1:	6f 74 65 63 74 65 64 0a 00                          otected..

000014ba <__c.4250>:
    14ba:	25 73 20 6f 70 65 6e 20 66 61 69 6c 75 72 65 0a     %s open failure.
	...

000014cb <__c.4248>:
    14cb:	25 73 20 68 61 64 20 25 64 20 65 72 72 6f 72 73     %s had %d errors
    14db:	0a 00                                               ..

000014dd <__c.4443>:
    14dd:	64 65 62 75 67 3d 25 30 34 58 48 0a 00              debug=%04XH..

000014ea <__c.4435>:
    14ea:	4e 6f 74 65 3a 20 67 70 69 62 20 70 72 65 66 69     Note: gpib prefi
    14fa:	78 20 69 73 20 6f 70 74 69 6f 6e 61 6c 0a 67 70     x is optional.gp
    150a:	69 62 20 61 64 64 72 65 73 73 65 73 0a 20 20 20     ib addresses.   
    151a:	44 69 73 70 6c 61 79 20 61 6c 6c 20 64 65 76 69     Display all devi
    152a:	63 65 20 47 50 49 42 20 62 75 73 20 61 64 64 72     ce GPIB bus addr
    153a:	65 73 73 65 73 20 61 6e 64 20 50 50 52 20 76 61     esses and PPR va
    154a:	6c 75 65 73 0a 67 70 69 62 20 63 6f 6e 66 69 67     lues.gpib config
    155a:	20 5b 2d 76 5d 0a 20 20 20 44 69 73 70 6c 61 79      [-v].   Display
    156a:	20 63 75 72 72 65 6e 74 20 64 72 69 76 65 73 20      current drives 
    157a:	63 6f 6e 66 69 67 75 72 61 74 69 6f 6e 0a 20 20     configuration.  
    158a:	20 2d 76 20 56 65 72 62 6f 73 65 20 2d 20 73 68      -v Verbose - sh
    159a:	6f 77 20 66 75 6c 6c 20 64 65 74 61 69 6c 0a 67     ow full detail.g
    15aa:	70 69 62 20 64 65 62 75 67 20 4e 0a 20 20 20 64     pib debug N.   d
    15ba:	65 62 75 67 20 6d 65 73 73 61 67 65 20 72 65 70     ebug message rep
    15ca:	6f 72 74 69 6e 67 20 73 65 65 20 68 70 64 69 73     orting see hpdis
    15da:	6b 2e 63 66 67 20 66 6f 72 20 64 65 74 61 69 6c     k.cfg for detail
    15ea:	73 0a 67 70 69 62 20 65 6c 61 70 73 65 64 0a 67     s.gpib elapsed.g
    15fa:	70 69 62 20 65 6c 61 70 73 65 64 5f 72 65 73 65     pib elapsed_rese
    160a:	74 0a 67 70 69 62 20 69 66 63 0a 67 70 69 62 20     t.gpib ifc.gpib 
    161a:	70 6c 6f 74 20 66 69 6c 65 6e 61 6d 65 2e 74 78     plot filename.tx
    162a:	74 0a 67 70 69 62 20 70 6c 6f 74 5f 65 63 68 6f     t.gpib plot_echo
    163a:	0a 67 70 69 62 20 74 61 73 6b 0a 67 70 69 62 20     .gpib task.gpib 
    164a:	74 72 61 63 65 20 66 69 6c 65 6e 61 6d 65 2e 74     trace filename.t
    165a:	78 74 20 5b 42 55 53 5d 0a 20 20 20 44 69 73 70     xt [BUS].   Disp
    166a:	6c 61 79 20 61 63 74 69 76 69 74 79 20 6f 66 20     lay activity of 
    167a:	47 50 49 42 20 62 75 73 20 61 6e 64 20 6c 6f 67     GPIB bus and log
    168a:	20 69 74 0a 20 20 20 42 55 53 20 2d 20 69 6e 63      it.   BUS - inc
    169a:	6c 75 64 65 20 68 61 6e 64 73 68 61 6b 65 20 73     lude handshake s
    16aa:	74 61 74 65 73 0a 0a 0a 67 70 69 62 20 6d 6f 75     tates...gpib mou
    16ba:	6e 74 0a 20 20 20 20 20 64 69 73 70 6c 61 79 73     nt.     displays
    16ca:	20 61 20 6c 69 73 74 20 6f 66 20 6d 6f 75 6e 74      a list of mount
    16da:	65 64 20 64 72 69 76 65 73 20 6f 6e 65 20 70 65     ed drives one pe
    16ea:	72 20 6c 69 6e 65 0a 67 70 69 62 20 6d 6f 75 6e     r line.gpib moun
    16fa:	74 20 41 4d 49 47 4f 7c 53 53 38 30 20 6d 6f 64     t AMIGO|SS80 mod
    170a:	65 6c 20 61 64 64 72 65 73 73 20 66 69 6c 65 0a     el address file.
    171a:	20 20 20 20 20 45 78 61 6d 70 6c 65 3a 20 67 70          Example: gp
    172a:	69 62 20 6d 6f 75 6e 74 20 39 31 32 31 20 20 36     ib mount 9121  6
    173a:	20 2f 61 6d 69 67 6f 36 2e 6c 69 66 0a 20 20 20      /amigo6.lif.   
    174a:	20 20 45 78 61 6d 70 6c 65 3a 20 67 70 69 62 20       Example: gpib 
    175a:	6d 6f 75 6e 74 20 39 31 33 34 44 20 32 20 2f 61     mount 9134D 2 /a
    176a:	6d 69 67 6f 32 2e 6c 69 66 0a 20 20 20 20 20 4e     migo2.lif.     N
    177a:	6f 74 65 3a 20 64 72 69 76 65 20 6d 6f 64 65 6c     ote: drive model
    178a:	20 6d 75 73 74 20 65 78 69 73 74 20 69 6e 20 68      must exist in h
    179a:	70 64 69 72 2e 69 6e 69 20 5b 64 72 69 76 65 69     pdir.ini [drivei
    17aa:	6e 66 6f 5d 20 73 65 63 74 69 6f 6e 0a 67 70 69     nfo] section.gpi
    17ba:	62 20 6d 6f 75 6e 74 20 50 52 49 4e 54 45 52 20     b mount PRINTER 
    17ca:	61 64 64 72 65 73 73 0a 20 20 20 20 20 45 78 61     address.     Exa
    17da:	6d 70 6c 65 3a 20 67 70 69 62 20 6d 6f 75 6e 74     mple: gpib mount
    17ea:	20 50 52 49 4e 54 45 52 20 35 0a 67 70 69 62 20      PRINTER 5.gpib 
    17fa:	75 6d 6f 75 6e 74 20 61 64 64 72 65 73 73 20 20     umount address  
    180a:	20 20 20 45 78 61 6d 70 6c 65 3a 20 67 70 69 62        Example: gpib
    181a:	20 75 6d 6f 75 6e 74 20 36 0a 00                     umount 6..

00001825 <__c.4433>:
    1825:	67 70 69 62 20 20 68 65 6c 70 0a 00                 gpib  help..

00001831 <__c.4966>:
    1831:	0a 00                                               ..

00001833 <__c.4961>:
    1833:	4d 6f 75 6e 74 65 64 20 64 72 69 76 65 73 0a 00     Mounted drives..

00001843 <__c.4956>:
    1843:	50 52 49 4e 54 45 52 20 25 2d 38 73 20 25 32 64     PRINTER %-8s %2d
    1853:	0a 00                                               ..

00001855 <__c.4954>:
    1855:	41 4d 49 47 4f 20 20 20 25 2d 38 73 20 25 32 64     AMIGO   %-8s %2d
    1865:	20 25 73 0a 00                                       %s..

0000186a <__c.4952>:
    186a:	53 53 38 30 20 20 20 20 25 2d 38 73 20 25 32 64     SS80    %-8s %2d
    187a:	20 25 73 0a 00                                       %s..

0000187f <__c.4944>:
    187f:	45 78 70 65 63 74 65 64 20 41 4d 49 47 4f 20 6f     Expected AMIGO o
    188f:	72 20 53 53 38 30 20 6f 72 20 43 53 38 30 20 66     r SS80 or CS80 f
    189f:	6f 72 20 5b 25 73 5d 0a 00                          or [%s]..

000018a8 <__c.4942>:
    18a8:	43 6f 75 6c 64 20 6e 6f 74 20 61 6c 6c 6f 63 61     Could not alloca
    18b8:	74 65 20 41 4d 49 47 4f 20 73 74 72 75 63 74 75     te AMIGO structu
    18c8:	72 65 20 66 6f 72 20 25 73 0a 00                    re for %s..

000018d3 <__c.4938>:
    18d3:	43 6f 75 6c 64 20 6e 6f 74 20 61 6c 6c 6f 63 61     Could not alloca
    18e3:	74 65 20 53 53 38 30 20 73 74 72 75 63 74 75 72     te SS80 structur
    18f3:	65 20 66 6f 72 20 25 73 0a 00                       e for %s..

000018fd <__c.4934>:
    18fd:	57 41 52 4e 49 4e 47 3a 20 6d 6f 64 65 6c 20 4e     WARNING: model N
    190d:	4f 54 20 66 6f 75 6e 64 20 69 6e 20 68 70 64 69     OT found in hpdi
    191d:	72 2e 69 6e 69 21 0a 00                             r.ini!..

00001925 <__c.4932>:
    1925:	43 6f 75 6c 64 20 6e 6f 74 20 61 6c 6c 6f 63 61     Could not alloca
    1935:	74 65 20 50 52 49 4e 54 45 52 20 73 74 72 75 63     te PRINTER struc
    1945:	74 75 72 65 0a 00                                   ture..

0000194b <__c.4921>:
    194b:	75 6d 6f 75 6e 74 20 61 64 64 72 65 73 73 3a 5b     umount address:[
    195b:	25 64 5d 20 4e 4f 54 20 66 6f 75 6e 64 0a 00        %d] NOT found..

0000196a <__c.4919>:
    196a:	20 20 2d 20 61 64 64 72 65 73 73 20 69 73 20 74       - address is t
    197a:	68 65 20 64 65 76 69 63 65 20 61 64 64 72 65 73     he device addres
    198a:	73 0a 00                                            s..

0000198d <__c.4917>:
    198d:	20 20 75 6d 6f 75 6e 74 20 61 64 64 72 65 73 73       umount address
    199d:	0a 00                                               ..

0000199f <__c.4915>:
    199f:	55 73 61 67 65 3a 0a 00                             Usage:..

000019a7 <__c.4879>:
    19a7:	20 20 20 20 6d 6f 75 6e 74 0a 00                        mount..

000019b2 <__c.4877>:
    19b2:	44 69 73 70 6c 61 79 69 6e 67 20 6d 6f 75 6e 74     Displaying mount
    19c2:	65 64 20 64 72 69 76 65 73 0a 00                    ed drives..

000019cd <__c.4875>:
    19cd:	0a 00                                               ..

000019cf <__c.4873>:
    19cf:	20 20 20 20 6d 6f 75 6e 74 20 50 52 49 4e 54 45         mount PRINTE
    19df:	52 20 35 0a 00                                      R 5..

000019e4 <__c.4871>:
    19e4:	4d 6f 75 6e 74 69 6e 67 20 70 72 69 6e 74 65 72     Mounting printer
    19f4:	0a 00                                               ..

000019f6 <__c.4869>:
    19f6:	0a 00                                               ..

000019f8 <__c.4867>:
    19f8:	20 20 20 20 6d 6f 75 6e 74 20 39 31 33 34 44 20         mount 9134D 
    1a08:	33 20 73 73 38 30 2d 33 2e 6c 69 66 0a 00           3 ss80-3.lif..

00001a16 <__c.4865>:
    1a16:	20 20 20 20 6d 6f 75 6e 74 20 39 31 32 31 20 32         mount 9121 2
    1a26:	20 61 6d 69 67 6f 2d 32 32 2e 6c 69 66 0a 00         amigo-22.lif..

00001a35 <__c.4863>:
    1a35:	4d 6f 75 6e 74 69 6e 67 20 64 72 69 76 65 73 0a     Mounting drives.
	...

00001a46 <__c.4861>:
    1a46:	55 73 61 67 65 3a 20 0a 00                          Usage: ..

00001a4f <__c.4853>:
    1a4f:	41 4d 49 47 4f 25 64 00                             AMIGO%d.

00001a57 <__c.4851>:
    1a57:	66 6f 72 6d 61 74 69 6e 67 20 25 73 20 25 6c 64     formating %s %ld
    1a67:	20 73 65 63 74 6f 72 73 0a 00                        sectors..

00001a71 <__c.4849>:
    1a71:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    1a81:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    1a91:	0a 00                                               ..

00001a93 <__c.4847>:
    1a93:	53 53 38 30 2d 25 64 00                             SS80-%d.

00001a9b <__c.4845>:
    1a9b:	66 6f 72 6d 61 74 69 6e 67 20 25 73 20 25 6c 64     formating %s %ld
    1aab:	20 73 65 63 74 6f 72 73 0a 00                        sectors..

00001ab5 <__c.4843>:
    1ab5:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    1ac5:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    1ad5:	0a 00                                               ..

00001ad7 <__c.4823>:
    1ad7:	44 65 76 69 63 65 20 65 72 72 6f 72 73 20 2d 20     Device errors - 
    1ae7:	72 65 6d 6f 76 69 6e 67 3a 20 00                    removing: .

00001af2 <__c.4821>:
    1af2:	57 61 72 6e 69 6e 67 3a 20 25 73 20 42 59 54 45     Warning: %s BYTE
    1b02:	53 5f 50 45 52 5f 53 45 43 54 4f 52 20 21 3d 20     S_PER_SECTOR != 
    1b12:	32 35 36 2c 20 41 64 6a 75 73 74 69 6e 67 20 74     256, Adjusting t
    1b22:	6f 20 32 35 36 0a 00                                o 256..

00001b29 <__c.4819>:
    1b29:	57 61 72 6e 69 6e 67 3a 20 25 73 20 42 59 54 45     Warning: %s BYTE
    1b39:	53 5f 50 45 52 5f 42 4c 4f 43 4b 20 21 3d 20 32     S_PER_BLOCK != 2
    1b49:	35 36 2c 20 41 64 6a 75 73 74 69 6e 67 20 74 6f     56, Adjusting to
    1b59:	20 32 35 36 0a 00                                    256..

00001b5f <__c.4813>:
    1b5f:	41 64 64 72 65 73 73 20 28 25 64 29 20 6f 75 74     Address (%d) out
    1b6f:	20 6f 66 20 72 61 6e 67 65 0a 00                     of range..

00001b7a <__c.4797>:
    1b7a:	57 41 52 4e 49 4e 47 3a 20 6d 6f 64 65 6c 20 4e     WARNING: model N
    1b8a:	4f 54 20 66 6f 75 6e 64 20 69 6e 20 68 70 64 69     OT found in hpdi
    1b9a:	72 2e 69 6e 69 21 0a 00                             r.ini!..

00001ba2 <__c.4791>:
    1ba2:	68 70 64 69 72 20 69 6e 76 61 6c 69 64 20 74 79     hpdir invalid ty
    1bb2:	70 65 20 2d 20 4e 4f 54 20 41 4d 49 47 4f 20 6f     pe - NOT AMIGO o
    1bc2:	66 20 53 53 38 30 0a 00                             f SS80..

00001bca <__c.4755>:
    1bca:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 69 6e     alloc_device: in
    1bda:	76 61 6c 69 64 20 74 79 70 65 3a 25 64 3a 25 73     valid type:%d:%s
    1bea:	0a 00                                               ..

00001bec <__c.4747>:
    1bec:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 44 65     alloc_device: De
    1bfc:	76 69 63 65 20 74 61 62 6c 65 20 69 73 20 66 75     vice table is fu
    1c0c:	6c 6c 0a 00                                         ll..

00001c10 <__c.4726>:
    1c10:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1c20:	65 3a 28 25 64 29 20 69 6e 76 61 6c 69 64 20 74     e:(%d) invalid t
    1c30:	79 70 65 3a 25 64 3a 25 73 0a 00                    ype:%d:%s..

00001c3b <__c.4724>:
    1c3b:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1c4b:	65 3a 20 69 6e 64 65 78 3a 20 25 64 20 74 79 70     e: index: %d typ
    1c5b:	65 3a 25 64 3a 25 73 2c 20 73 74 61 74 65 20 3d     e:%d:%s, state =
    1c6b:	3d 20 4e 55 4c 4c 0a 00                             = NULL..

00001c73 <__c.4722>:
    1c73:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1c83:	65 3a 20 69 6e 64 65 78 20 25 64 20 75 6e 69 6e     e: index %d unin
    1c93:	69 74 61 6c 69 7a 65 64 20 74 79 70 65 3a 25 64     italized type:%d
    1ca3:	3a 25 73 0a 00                                      :%s..

00001ca8 <__c.4720>:
    1ca8:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1cb8:	65 3a 20 69 6e 64 65 78 3a 25 64 20 74 79 70 65     e: index:%d type
    1cc8:	3a 25 64 3a 25 73 2c 20 64 65 76 20 3d 3d 20 4e     :%d:%s, dev == N
    1cd8:	55 4c 4c 0a 00                                      ULL..

00001cdd <__c.4718>:
    1cdd:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1ced:	65 3a 20 69 6e 64 65 78 3a 25 64 20 61 64 64 72     e: index:%d addr
    1cfd:	65 73 73 3a 20 25 30 32 58 48 20 6f 75 74 20 6f     ess: %02XH out o
    1d0d:	66 20 72 61 6e 67 65 0a 00                          f range..

00001d16 <__c.4716>:
    1d16:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1d26:	65 3a 28 25 64 29 20 6f 75 74 20 6f 66 20 72 61     e:(%d) out of ra
    1d36:	6e 67 65 0a 00                                      nge..

00001d3b <__c.4677>:
    1d3b:	0a 00                                               ..

00001d3d <__c.4672>:
    1d3d:	0a 00                                               ..

00001d3f <__c.4670>:
    1d3f:	20 20 20 20 23 20 42 4c 4f 43 4b 53 20 3d 20 25         # BLOCKS = %
    1d4f:	6c 64 0a 00                                         ld..

00001d53 <__c.4668>:
    1d53:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    1d63:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

00001d72 <__c.4666>:
    1d72:	41 4d 49 47 4f 20 25 73 0a 00                       AMIGO %s..

00001d7c <__c.4664>:
    1d7c:	20 20 20 20 23 20 42 4c 4f 43 4b 53 20 3d 20 25         # BLOCKS = %
    1d8c:	6c 64 0a 00                                         ld..

00001d90 <__c.4662>:
    1d90:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    1da0:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

00001daf <__c.4660>:
    1daf:	53 53 38 30 20 25 73 0a 00                          SS80 %s..

00001db8 <__c.4657>:
    1db8:	43 75 72 72 65 6e 74 20 43 6f 6e 66 69 67 75 72     Current Configur
    1dc8:	61 74 69 6f 6e 20 53 65 74 74 69 6e 67 73 0a 00     ation Settings..

00001dd8 <__c.4648>:
    1dd8:	0a 00                                               ..

00001dda <__c.4643>:
    1dda:	0a 00                                               ..

00001ddc <__c.4641>:
    1ddc:	50 52 49 4e 54 45 52 0a 00                          PRINTER..

00001de5 <__c.4639>:
    1de5:	41 4d 49 47 4f 20 25 73 0a 00                       AMIGO %s..

00001def <__c.4637>:
    1def:	53 53 38 30 20 25 73 0a 00                          SS80 %s..

00001df8 <__c.4634>:
    1df8:	44 65 76 69 63 65 20 41 64 64 72 65 73 73 65 73     Device Addresses
    1e08:	0a 00                                               ..

00001e0a <__c.4628>:
    1e0a:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 2a 2a 2a     Read_Config: ***
    1e1a:	2a 2a 2a 20 65 72 72 6f 72 73 28 25 64 29 20 2a     *** errors(%d) *
    1e2a:	2a 2a 2a 2a 2a 0a 00                                *****..

00001e31 <__c.4626>:
    1e31:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 72 65 61     Read_Config: rea
    1e41:	64 28 25 64 29 20 6c 69 6e 65 73 0a 00              d(%d) lines..

00001e4e <__c.4624>:
    1e4e:	4d 69 73 73 69 6e 67 20 45 4e 44 20 73 74 61 74     Missing END stat
    1e5e:	65 6d 65 6e 74 20 61 74 20 6c 69 6e 65 3a 25 64     ement at line:%d
    1e6e:	0a 00                                               ..

00001e70 <__c.4620>:
    1e70:	55 6e 65 78 70 65 63 74 65 64 20 53 54 41 54 45     Unexpected STATE
    1e80:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1e90:	0a 00                                               ..

00001e92 <__c.4617>:
    1e92:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1ea2:	20 47 45 4d 45 54 52 59 20 74 6f 6b 65 6e 3a 20      GEMETRY token: 
    1eb2:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00001ec2 <__c.4608>:
    1ec2:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1ed2:	20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25      CONFIG token: %
    1ee2:	73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00        s, at line:%d..

00001ef1 <__c.4605>:
    1ef1:	55 6e 65 78 70 65 63 74 65 64 20 48 45 41 44 45     Unexpected HEADE
    1f01:	52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20     R CONFIG token: 
    1f11:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00001f21 <__c.4596>:
    1f21:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1f31:	20 53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73      START token: %s
    1f41:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001f4f <__c.4588>:
    1f4f:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1f5f:	56 4f 4c 55 4d 45 20 74 6f 6b 65 6e 3a 20 25 73     VOLUME token: %s
    1f6f:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001f7d <__c.4578>:
    1f7d:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1f8d:	55 4e 49 54 20 74 6f 6b 65 6e 3a 20 25 73 2c 20     UNIT token: %s, 
    1f9d:	61 74 20 6c 69 6e 65 3a 25 64 0a 00                 at line:%d..

00001fa9 <__c.4561>:
    1fa9:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1fb9:	43 4f 4e 54 52 4f 4c 4c 45 52 20 74 6f 6b 65 6e     CONTROLLER token
    1fc9:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1fd9:	0a 00                                               ..

00001fdb <__c.4553>:
    1fdb:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1feb:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    1ffb:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00002009 <__c.4550>:
    2009:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    2019:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    2029:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00002037 <__c.4542>:
    2037:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    2047:	53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73 2c     START token: %s,
    2057:	20 61 74 20 6c 69 6e 65 3a 25 64 0a 00               at line:%d..

00002064 <__c.4532>:
    2064:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    2074:	45 52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a     ER CONFIG token:
    2084:	20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a      %s, at line:%d.
	...

00002095 <__c.4529>:
    2095:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    20a5:	45 52 20 74 6f 6b 65 6e 3a 20 25 73 2c 20 61 74     ER token: %s, at
    20b5:	20 6c 69 6e 65 3a 25 64 0a 00                        line:%d..

000020bf <__c.4525>:
    20bf:	55 6e 65 78 70 65 63 74 65 64 20 74 6f 6b 65 6e     Unexpected token
    20cf:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    20df:	0a 00                                               ..

000020e1 <__c.4514>:
    20e1:	55 6e 65 78 70 65 63 74 65 64 20 74 6f 6b 65 6e     Unexpected token
    20f1:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    2101:	0a 00                                               ..

00002103 <__c.4511>:
    2103:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 6f 70 65     Read_Config: ope
    2113:	6e 28 25 73 29 20 66 61 69 6c 65 64 0a 00           n(%s) failed..

00002121 <__c.4509>:
    2121:	52 65 61 64 69 6e 67 3a 20 25 73 0a 00              Reading: %s..

0000212e <__c.4488>:
    212e:	25 73 0a 00                                         %s..

00002132 <__c.4478>:
    2132:	25 2d 32 35 73 20 3d 20 25 73 0a 00                 %-25s = %s..

0000213e <__c.4467>:
    213e:	25 2d 32 35 73 20 3d 20 25 38 6c 78 48 20 28 25     %-25s = %8lxH (%
    214e:	6c 64 29 0a 00                                      ld)..

00002153 <__c.3648>:
    2153:	4d 6f 64 65 6c 3a 20 25 73 20 4e 4f 54 20 66 6f     Model: %s NOT fo
    2163:	75 6e 64 20 69 6e 20 68 70 64 69 72 2e 69 6e 69     und in hpdir.ini
    2173:	0a 00                                               ..

00002175 <__c.3643>:
    2175:	4d 6f 64 65 6c 3a 20 25 73 20 66 6f 75 6e 64 20     Model: %s found 
    2185:	69 6e 20 68 70 64 69 72 2e 69 6e 69 0a 00           in hpdir.ini..

00002193 <__c.3641>:
    2193:	25 73 20 25 73 0a 00                                %s %s..

0000219a <__c.3637>:
    219a:	45 72 72 6f 72 3a 20 68 70 64 69 72 2e 69 6e 69     Error: hpdir.ini
    21aa:	20 6e 6f 74 20 66 6f 75 6e 64 21 0a 00               not found!..

000021b7 <__c.4560>:
    21b7:	5b 53 53 38 30 20 55 6e 6b 6e 6f 77 6e 20 53 43     [SS80 Unknown SC
    21c7:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    21d7:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    21e7:	48 5d 0a 00                                         H]..

000021eb <__c.4558>:
    21eb:	5b 53 53 38 30 20 53 43 20 55 6e 6b 6e 6f 77 6e     [SS80 SC Unknown
    21fb:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    220b:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    221b:	48 5d 0a 00                                         H]..

0000221f <__c.4556>:
    221f:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    222f:	74 5d 0a 00                                         t]..

00002233 <__c.4554>:
    2233:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

00002242 <__c.4552>:
    2242:	5b 53 53 38 30 20 52 65 70 6f 72 74 20 53 74 61     [SS80 Report Sta
    2252:	74 65 5d 0a 00                                      te]..

00002257 <__c.4550>:
    2257:	5b 53 53 30 30 20 45 78 65 63 75 74 65 20 53 74     [SS00 Execute St
    2267:	61 74 65 5d 0a 00                                   ate]..

0000226d <__c.4548>:
    226d:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    227d:	61 74 65 5d 0a 00                                   ate]..

00002283 <__c.4543>:
    2283:	5b 47 50 49 42 20 45 72 72 6f 72 20 52 65 74 75     [GPIB Error Retu
    2293:	72 6e 20 2d 20 57 72 69 74 65 20 45 52 52 4f 52     rn - Write ERROR
    22a3:	5d 0a 00                                            ]..

000022a6 <__c.4529>:
    22a6:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

000022b5 <__c.4527>:
    22b5:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    22c5:	5d 0a 00                                            ]..

000022c8 <__c.4520>:
    22c8:	5b 53 53 38 30 20 53 44 43 5d 0a 00                 [SS80 SDC]..

000022d4 <__c.4506>:
    22d4:	5b 53 53 38 30 20 71 73 74 61 74 20 25 30 32 58     [SS80 qstat %02X
    22e4:	5d 0a 00                                            ]..

000022e7 <__c.4504>:
    22e7:	5b 53 53 38 30 20 71 73 74 61 74 20 73 65 6e 64     [SS80 qstat send
    22f7:	20 46 41 49 4c 45 44 5d 0a 00                        FAILED]..

00002301 <__c.4497>:
    2301:	5b 53 53 38 30 20 53 65 65 6b 3a 25 30 38 6c 58     [SS80 Seek:%08lX
    2311:	48 5d 0a 00                                         H]..

00002315 <__c.4495>:
    2315:	5b 53 53 38 30 20 53 65 65 6b 20 4f 56 45 52 46     [SS80 Seek OVERF
    2325:	4c 4f 57 20 61 74 20 25 30 38 6c 58 48 5d 0a 00     LOW at %08lXH]..

00002335 <__c.4490>:
    2335:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    2345:	74 20 43 6f 6d 6d 61 6e 64 2c 20 45 72 72 6f 72     t Command, Error
    2355:	20 61 74 20 28 25 64 29 20 6f 66 20 28 25 64 29      at (%d) of (%d)
    2365:	20 4f 50 20 43 6f 64 65 73 5d 0a 00                  OP Codes]..

00002371 <__c.4487>:
    2371:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    2381:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

00002391 <__c.4485>:
    2391:	5b 53 53 38 30 20 43 61 6e 63 65 6c 20 28 25 64     [SS80 Cancel (%d
    23a1:	29 5d 0a 00                                         )]..

000023a5 <__c.4483>:
    23a5:	5b 53 53 38 30 20 43 68 61 6e 6e 65 6c 20 49 6e     [SS80 Channel In
    23b5:	64 65 70 65 6e 64 65 6e 74 20 43 6c 65 61 72 20     dependent Clear 
    23c5:	28 25 64 29 5d 0a 00                                (%d)]..

000023cc <__c.4481>:
    23cc:	5b 53 53 38 30 20 57 72 69 74 65 20 4c 6f 6f 70     [SS80 Write Loop
    23dc:	62 61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00           back - TODO]..

000023ea <__c.4479>:
    23ea:	5b 53 53 38 30 20 52 65 61 64 20 4c 6f 6f 70 62     [SS80 Read Loopb
    23fa:	61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00              ack - TODO]..

00002407 <__c.4476>:
    2407:	5b 53 53 38 30 20 48 50 2d 49 42 20 50 61 72 69     [SS80 HP-IB Pari
    2417:	74 79 20 43 68 65 63 6b 69 6e 67 20 2d 20 54 4f     ty Checking - TO
    2427:	44 4f 5d 0a 00                                      DO]..

0000242c <__c.4473>:
    242c:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    243c:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

00002445 <__c.4471>:
    2445:	5b 47 50 49 42 20 52 65 61 64 20 45 52 52 4f 52     [GPIB Read ERROR
    2455:	5d 0a 00                                            ]..

00002458 <__c.4462>:
    2458:	5b 53 53 38 30 20 45 78 65 63 75 74 65 20 43 6f     [SS80 Execute Co
    2468:	6d 6d 61 6e 64 2c 20 45 72 72 6f 72 20 61 74 20     mmand, Error at 
    2478:	28 25 64 29 20 6f 66 20 28 25 64 29 20 4f 50 20     (%d) of (%d) OP 
    2488:	43 6f 64 65 73 5d 0a 00                             Codes]..

00002490 <__c.4459>:
    2490:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    24a0:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

000024b0 <__c.4457>:
    24b0:	5b 53 53 38 30 20 49 6e 69 74 69 61 74 65 20 44     [SS80 Initiate D
    24c0:	69 61 67 6e 6f 73 74 69 63 20 2d 20 54 4f 44 4f     iagnostic - TODO
    24d0:	5d 0a 00                                            ]..

000024d3 <__c.4455>:
    24d3:	5b 53 53 38 30 20 52 65 71 75 65 73 74 20 53 74     [SS80 Request St
    24e3:	61 74 75 73 5d 0a 00                                atus]..

000024ea <__c.4453>:
    24ea:	5b 53 53 38 30 20 44 6f 6f 72 20 4c 6f 63 6b 20     [SS80 Door Lock 
    24fa:	2d 20 54 4f 44 4f 5d 0a 00                          - TODO]..

00002503 <__c.4451>:
    2503:	5b 53 53 38 30 20 44 6f 6f 72 20 55 6e 4c 6f 63     [SS80 Door UnLoc
    2513:	6b 20 2d 20 54 4f 44 4f 5d 0a 00                    k - TODO]..

0000251e <__c.4449>:
    251e:	5b 53 53 38 30 20 53 65 74 20 53 74 61 74 75 73     [SS80 Set Status
    252e:	20 4d 61 73 6b 20 2d 20 54 4f 44 4f 5d 0a 00         Mask - TODO]..

0000253d <__c.4447>:
    253d:	5b 53 53 38 30 20 49 6e 69 74 69 61 6c 69 7a 65     [SS80 Initialize
    254d:	20 4d 65 64 69 61 20 54 4f 44 4f 5d 0a 00            Media TODO]..

0000255b <__c.4445>:
    255b:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

0000256c <__c.4443>:
    256c:	5b 53 53 38 30 20 56 61 6c 69 64 61 74 65 20 4b     [SS80 Validate K
    257c:	65 79 20 2d 20 54 4f 44 4f 5d 0a 00                 ey - TODO]..

00002588 <__c.4441>:
    2588:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 44 65     [SS80 Release De
    2598:	6e 69 65 64 20 4e 4f 2d 4f 50 5d 0a 00              nied NO-OP]..

000025a5 <__c.4439>:
    25a5:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 4e 4f     [SS80 Release NO
    25b5:	2d 4f 50 5d 0a 00                                   -OP]..

000025bb <__c.4437>:
    25bb:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    25cb:	20 56 65 72 69 66 79 20 2d 20 54 4f 44 4f 5d 0a      Verify - TODO].
	...

000025dc <__c.4435>:
    25dc:	5b 53 53 38 30 20 53 65 74 20 52 65 74 75 72 6e     [SS80 Set Return
    25ec:	20 41 64 64 72 65 73 73 69 6e 67 20 2d 20 54 4f      Addressing - TO
    25fc:	44 4f 5d 0a 00                                      DO]..

00002601 <__c.4433>:
    2601:	5b 53 53 38 30 20 53 65 74 20 52 65 6c 65 61 73     [SS80 Set Releas
    2611:	65 20 4e 4f 2d 4f 50 5d 0a 00                       e NO-OP]..

0000261b <__c.4431>:
    261b:	5b 53 53 38 30 20 53 65 74 20 52 50 53 20 4e 4f     [SS80 Set RPS NO
    262b:	2d 4f 50 5d 0a 00                                   -OP]..

00002631 <__c.4429>:
    2631:	5b 53 53 38 30 20 4e 4f 2d 4f 50 5d 0a 00           [SS80 NO-OP]..

0000263f <__c.4427>:
    263f:	5b 53 53 38 30 20 53 65 74 20 4c 65 6e 67 74 68     [SS80 Set Length
    264f:	3a 28 25 30 38 6c 58 48 29 5d 0a 00                 :(%08lXH)]..

0000265b <__c.4425>:
    265b:	5b 53 53 38 30 20 53 65 74 20 41 64 64 72 65 73     [SS80 Set Addres
    266b:	73 3a 28 25 30 38 6c 58 48 29 5d 0a 00              s:(%08lXH)]..

00002678 <__c.4423>:
    2678:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2688:	20 57 72 69 74 65 5d 0a 00                           Write]..

00002691 <__c.4420>:
    2691:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    26a1:	20 52 65 61 64 5d 0a 00                              Read]..

000026a9 <__c.4418>:
    26a9:	5b 53 53 38 30 20 53 65 74 20 56 6f 6c 75 6d 65     [SS80 Set Volume
    26b9:	3a 20 28 25 64 29 5d 0a 00                          : (%d)]..

000026c2 <__c.4415>:
    26c2:	5b 53 53 38 30 20 53 65 74 20 55 6e 69 74 3a 28     [SS80 Set Unit:(
    26d2:	25 64 29 5d 0a 00                                   %d)]..

000026d8 <__c.4413>:
    26d8:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    26e8:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

000026f1 <__c.4411>:
    26f1:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    2701:	61 74 65 20 47 50 49 42 20 52 65 61 64 20 45 52     ate GPIB Read ER
    2711:	52 4f 52 5d 0a 00                                   ROR]..

00002717 <__c.4402>:
    2717:	5b 53 53 38 30 20 56 6f 6c 75 6d 65 3a 25 64 20     [SS80 Volume:%d 
    2727:	69 6e 76 61 6c 69 64 5d 0a 00                       invalid]..

00002731 <__c.4397>:
    2731:	5b 53 53 38 30 20 55 4e 49 54 3a 25 64 20 69 6e     [SS80 UNIT:%d in
    2741:	76 61 6c 69 64 5d 0a 00                             valid]..

00002749 <__c.4392>:
    2749:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 56     [SS80 Describe V
    2759:	6f 6c 75 6d 65 20 46 41 49 4c 45 44 5d 0a 00        olume FAILED]..

00002768 <__c.4390>:
    2768:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 55     [SS80 Describe U
    2778:	6e 69 74 20 46 41 49 4c 45 44 5d 0a 00              nit FAILED]..

00002785 <__c.4388>:
    2785:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 43     [SS80 Describe C
    2795:	6f 6e 74 72 6f 6c 6c 65 72 20 46 41 49 4c 45 44     ontroller FAILED
    27a5:	5d 0a 00                                            ]..

000027a8 <__c.4386>:
    27a8:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

000027b9 <__c.4378>:
    27b9:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    27c9:	73 20 46 41 49 4c 45 44 5d 0a 00                    s FAILED]..

000027d4 <__c.4376>:
    27d4:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    27e4:	73 5d 0a 00                                         s]..

000027e8 <__c.4366>:
    27e8:	20 20 20 20 25 64 3a 25 73 0a 00                        %d:%s..

000027f3 <__c.4364>:
    27f3:	25 73 3a 0a 00                                      %s:..

000027f8 <__c.4339>:
    27f8:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2808:	20 57 72 69 74 65 20 57 72 6f 74 65 20 54 6f 74      Write Wrote Tot
    2818:	61 6c 28 25 6c 78 48 29 5d 0a 00                    al(%lxH)]..

00002823 <__c.4337>:
    2823:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2833:	20 57 72 69 74 65 20 44 49 44 20 4e 4f 54 20 46      Write DID NOT F
    2843:	49 4e 49 53 48 5d 0a 00                             INISH]..

0000284b <__c.4333>:
    284b:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    285b:	20 57 72 69 74 65 20 77 72 6f 74 65 28 25 30 32      Write wrote(%02
    286b:	58 48 29 5d 0a 00                                   XH)]..

00002871 <__c.4331>:
    2871:	5b 44 69 73 6b 20 57 72 69 74 65 20 45 72 72 6f     [Disk Write Erro
    2881:	72 5d 0a 00                                         r]..

00002885 <__c.4327>:
    2885:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    2895:	5d 0a 00                                            ]..

00002898 <__c.4325>:
    2898:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    28a8:	20 57 72 69 74 65 20 61 74 20 25 30 38 6c 58 48      Write at %08lXH
    28b8:	28 25 6c 58 48 29 5d 0a 00                          (%lXH)]..

000028c1 <__c.4313>:
    28c1:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    28d1:	65 61 64 20 54 6f 74 61 6c 28 25 6c 58 48 29 20     ead Total(%lXH) 
    28e1:	62 79 74 65 73 5d 0a 00                             bytes]..

000028e9 <__c.4311>:
    28e9:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    28f9:	65 61 64 20 44 49 44 20 4e 4f 54 20 46 49 4e 49     ead DID NOT FINI
    2909:	53 48 5d 0a 00                                      SH]..

0000290e <__c.4306>:
    290e:	5b 53 53 38 30 20 47 50 49 42 20 57 72 69 74 65     [SS80 GPIB Write
    291e:	20 45 72 72 6f 72 5d 0a 00                           Error]..

00002927 <__c.4304>:
    2927:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    2937:	45 72 72 6f 72 5d 0a 00                             Error]..

0000293f <__c.4302>:
    293f:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    294f:	25 30 32 58 48 20 62 79 74 65 73 5d 0a 00           %02XH bytes]..

0000295d <__c.4300>:
    295d:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    296d:	20 52 65 61 64 20 61 74 20 25 30 38 6c 58 48 28      Read at %08lXH(
    297d:	25 6c 58 48 29 5d 0a 00                             %lXH)]..

00002985 <__c.4283>:
    2985:	5b 53 53 38 30 20 45 58 45 43 20 73 74 61 74 65     [SS80 EXEC state
    2995:	3a 25 64 20 65 72 72 6f 72 5d 0a 00                 :%d error]..

000029a1 <__c.4267>:
    29a1:	5b 53 53 38 30 20 25 30 32 58 48 20 49 4e 49 54     [SS80 %02XH INIT
    29b1:	5d 0a 00                                            ]..

000029b4 <__c.4383>:
    29b4:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    29c4:	65 71 75 65 73 74 20 4c 6f 67 69 63 61 6c 20 41     equest Logical A
    29d4:	64 64 72 65 73 73 5d 0a 00                          ddress]..

000029dd <__c.4380>:
    29dd:	5b 41 4d 49 47 4f 20 45 78 69 63 75 74 65 20 52     [AMIGO Exicute R
    29ed:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 55 6e     equest Status Un
    29fd:	62 75 66 66 65 72 65 64 5d 0a 00                    buffered]..

00002a08 <__c.4377>:
    2a08:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2a18:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 42 75     equest Status Bu
    2a28:	66 66 65 72 65 64 5d 0a 00                          ffered]..

00002a31 <__c.4372>:
    2a31:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    2a41:	72 69 74 65 20 42 75 66 66 65 72 65 64 5d 0a 00     rite Buffered]..

00002a51 <__c.4369>:
    2a51:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 49     [AMIGO Execute I
    2a61:	6e 69 74 69 61 6c 69 7a 65 5d 0a 00                 nitialize]..

00002a6d <__c.4366>:
    2a6d:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    2a7d:	72 69 74 65 20 55 6e 62 75 66 66 65 72 65 64 5d     rite Unbuffered]
    2a8d:	0a 00                                               ..

00002a8f <__c.4363>:
    2a8f:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2a9f:	65 61 64 20 42 75 66 66 65 72 65 64 5d 0a 00        ead Buffered]..

00002aae <__c.4360>:
    2aae:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2abe:	65 61 64 20 55 6e 62 75 66 66 65 72 65 64 5d 0a     ead Unbuffered].
	...

00002acf <__c.4357>:
    2acf:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 43     [AMIGO Execute C
    2adf:	6f 6c 64 20 4c 6f 61 64 20 52 65 61 64 5d 0a 00     old Load Read]..

00002aef <__c.4353>:
    2aef:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 28 25     [AMIGO Execute(%
    2aff:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    2b0f:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    2b1f:	0a 00                                               ..

00002b21 <__c.4348>:
    2b21:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 5d 0a 00     [AMIGO Format]..

00002b31 <__c.4345>:
    2b31:	5b 41 4d 49 47 4f 20 52 65 61 64 20 42 75 66 66     [AMIGO Read Buff
    2b41:	65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00        ered Command]..

00002b50 <__c.4343>:
    2b50:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    2b60:	74 61 74 75 73 20 55 6e 62 75 66 66 65 72 65 64     tatus Unbuffered
    2b70:	20 43 6f 6d 6d 61 6e 64 5d 0a 00                     Command]..

00002b7b <__c.4341>:
    2b7b:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 42 75 66     [AMIGO Write Buf
    2b8b:	66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00     fered Command]..

00002b9b <__c.4339>:
    2b9b:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 4c     [AMIGO Request L
    2bab:	6f 67 69 63 61 6c 20 41 64 64 72 65 73 73 20 43     ogical Address C
    2bbb:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

00002bc4 <__c.4337>:
    2bc4:	5b 41 4d 49 47 4f 20 49 6e 69 74 69 61 6c 69 7a     [AMIGO Initializ
    2bd4:	65 20 43 6f 6d 6d 61 6e 64 5d 0a 00                 e Command]..

00002be0 <__c.4335>:
    2be0:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 55 6e 62     [AMIGO Write Unb
    2bf0:	75 66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d     uffered Command]
    2c00:	0a 00                                               ..

00002c02 <__c.4333>:
    2c02:	5b 41 4d 49 47 4f 20 56 65 72 69 66 79 5d 0a 00     [AMIGO Verify]..

00002c12 <__c.4330>:
    2c12:	5b 41 4d 49 47 4f 20 52 65 61 64 20 55 6e 62 75     [AMIGO Read Unbu
    2c22:	66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a     ffered Command].
	...

00002c33 <__c.4328>:
    2c33:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    2c43:	74 61 74 75 73 20 42 75 66 66 65 72 65 64 20 43     tatus Buffered C
    2c53:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

00002c5c <__c.4326>:
    2c5c:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    2c6c:	36 5d 0a 00                                         6]..

00002c70 <__c.4323>:
    2c70:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    2c80:	35 5d 0a 00                                         5]..

00002c84 <__c.4320>:
    2c84:	5b 41 4d 49 47 4f 20 43 6f 6c 64 20 4c 6f 61 64     [AMIGO Cold Load
    2c94:	20 52 65 61 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00      Read Command]..

00002ca4 <__c.4317>:
    2ca4:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    2cb4:	30 32 58 48 29 3a 20 47 50 49 42 20 72 65 61 64     02XH): GPIB read
    2cc4:	20 62 79 74 65 73 3a 25 30 32 58 48 5d 0a 00         bytes:%02XH]..

00002cd3 <__c.4315>:
    2cd3:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    2ce3:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

00002cf4 <__c.4313>:
    2cf4:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    2d04:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

00002d15 <__c.4311>:
    2d15:	5b 41 4d 49 47 4f 5f 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO_Command:G
    2d25:	50 49 42 20 77 72 69 74 65 20 65 72 72 6f 72 5d     PIB write error]
    2d35:	0a 00                                               ..

00002d37 <__c.4309>:
    2d37:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    2d47:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    2d57:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    2d67:	0a 00                                               ..

00002d69 <__c.4297>:
    2d69:	5b 45 20 20 20 41 6d 69 67 6f 20 45 52 52 4f 52     [E   Amigo ERROR
    2d79:	20 73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58      secondary: %02X
    2d89:	48 2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20     H, state:%02XH, 
    2d99:	6c 69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c     listening:%02XH,
    2da9:	20 74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a      talking:%02XH].
	...

00002dba <__c.4295>:
    2dba:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    2dca:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2dda:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2dea:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2dfa:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002e0a <__c.4293>:
    2e0a:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    2e1a:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2e2a:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2e3a:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2e4a:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002e5a <__c.4291>:
    2e5a:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    2e6a:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2e7a:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2e8a:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2e9a:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002eaa <__c.4286>:
    2eaa:	5b 55 20 41 6d 69 67 6f 20 54 4f 44 4f 20 73 65     [U Amigo TODO se
    2eba:	63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48 2c 20     condary: %02XH, 
    2eca:	73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f 70 63     state:%02XH, opc
    2eda:	6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e 3a 25     ode:%02XH, len:%
    2eea:	33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a 25 30     3d, listening:%0
    2efa:	32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25 30 32     2XH, talking:%02
    2f0a:	58 48 5d 0a 00                                      XH]..

00002f0f <__c.4284>:
    2f0f:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    2f1f:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2f2f:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2f3f:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2f4f:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2f5f:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2f6f:	30 32 58 48 5d 0a 00                                02XH]..

00002f76 <__c.4282>:
    2f76:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    2f86:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2f96:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2fa6:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2fb6:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2fc6:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2fd6:	30 32 58 48 5d 0a 00                                02XH]..

00002fdd <__c.4280>:
    2fdd:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    2fed:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2ffd:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    300d:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    301d:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    302d:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    303d:	30 32 58 48 5d 0a 00                                02XH]..

00003044 <__c.4273>:
    3044:	5b 41 4d 49 47 4f 20 43 6c 65 61 72 5d 0a 00        [AMIGO Clear]..

00003053 <__c.4260>:
    3053:	5b 44 53 4a 20 25 30 32 58 48 5d 0a 00              [DSJ %02XH]..

00003060 <__c.4258>:
    3060:	5b 41 49 4d 47 4f 3a 20 44 53 4a 20 73 65 6e 64     [AIMGO: DSJ send
    3070:	20 66 61 69 6c 65 64 5d 0a 00                        failed]..

0000307a <__c.4251>:
    307a:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 64 69 73     [AMIGO Write dis
    308a:	6b 20 77 72 69 74 65 20 65 72 72 6f 72 5d 0a 00     k write error]..

0000309a <__c.4249>:
    309a:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 47 50 49     [AMIGO Write GPI
    30aa:	42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a 00        B read error]..

000030b9 <__c.4247>:
    30b9:	41 4d 49 47 4f 73 2d 3e 73 74 61 74 65 3a 25 64     AMIGOs->state:%d
    30c9:	0a 00                                               ..

000030cb <__c.4240>:
    30cb:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    30db:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

000030e5 <__c.4234>:
    30e5:	41 4d 49 47 4f 73 2d 3e 73 74 61 74 65 3a 25 64     AMIGOs->state:%d
    30f5:	0a 00                                               ..

000030f7 <__c.4228>:
    30f7:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 20 44 6f     [AMIGO Format Do
    3107:	6e 65 5d 0a 00                                      ne]..

0000310c <__c.4224>:
    310c:	5b 41 4d 49 47 4f 20 66 6f 72 6d 61 74 5d 0a 00     [AMIGO format]..

0000311c <__c.4183>:
    311c:	5b 41 4d 49 47 4f 20 25 73 2c 20 50 3a 25 30 38     [AMIGO %s, P:%08
    312c:	6c 78 48 2c 20 55 3a 25 64 20 43 3a 25 64 20 48     lxH, U:%d C:%d H
    313c:	3a 25 64 20 53 3a 25 64 5d 0a 00                    :%d S:%d]..

00003147 <__c.4213>:
    3147:	5b 41 4d 49 47 4f 20 76 65 72 69 66 79 20 50 3a     [AMIGO verify P:
    3157:	25 30 38 6c 58 48 2c 20 73 65 63 74 6f 72 73 3a     %08lXH, sectors:
    3167:	25 30 34 58 48 5d 0a 00                             %04XH]..

0000316f <__c.4190>:
    316f:	5b 41 4d 49 47 4f 20 25 73 20 70 6f 73 20 4f 56     [AMIGO %s pos OV
    317f:	45 52 46 4c 4f 57 5d 0a 00                          ERFLOW]..

00003188 <__c.4176>:
    3188:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    3198:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

000031a2 <__c.4174>:
    31a2:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 73 74 61 74     [AMIGO send stat
    31b2:	75 73 5d 0a 00                                      us]..

000031b7 <__c.4168>:
    31b7:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    31c7:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

000031d1 <__c.4166>:
    31d1:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 6c 6f 67 69     [AMIGO send logi
    31e1:	63 61 6c 20 61 64 64 72 65 73 73 5d 0a 00           cal address]..

000031ef <__c.4160>:
    31ef:	5b 41 4d 49 47 4f 20 72 65 71 75 65 73 74 20 73     [AMIGO request s
    31ff:	74 61 74 75 73 5d 0a 00                             tatus]..

00003207 <__c.4145>:
    3207:	5b 53 43 20 50 52 49 4e 54 45 52 20 54 61 6c 6b     [SC PRINTER Talk
    3217:	3a 20 25 30 32 58 48 5d 0a 00                       : %02XH]..

00003221 <__c.4143>:
    3221:	5b 53 43 20 50 52 49 4e 54 45 52 20 4c 69 73 74     [SC PRINTER List
    3231:	65 6e 3a 20 25 30 32 58 48 5d 0a 00                 en: %02XH]..

0000323d <__c.4138>:
    323d:	25 30 38 6c 64 0d 00                                %08ld..

00003244 <__c.4132>:
    3244:	77 72 69 74 65 20 66 61 69 6c 65 64 3a 20 77 61     write failed: wa
    3254:	6e 74 65 64 20 25 64 2c 20 67 6f 74 3a 25 64 0a     nted %d, got:%d.
	...

00003265 <__c.4126>:
    3265:	0a 44 4f 4e 45 3a 20 25 30 38 6c 64 0a 00           .DONE: %08ld..

00003273 <__c.4124>:
    3273:	45 52 52 4f 52 20 64 75 72 72 69 6e 67 20 77 72     ERROR durring wr
    3283:	69 74 65 0a 00                                      ite..

00003288 <__c.4118>:
    3288:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

00003294 <__c.4116>:
    3294:	43 61 70 74 75 72 69 6e 67 20 70 6c 6f 74 20 74     Capturing plot t
    32a4:	6f 3a 25 73 0a 00                                   o:%s..

000032aa <__c.4114>:
    32aa:	2f 70 6c 6f 74 2d 25 30 32 64 25 73 25 30 34 64     /plot-%02d%s%04d
    32ba:	2d 25 30 32 64 25 30 32 64 25 30 32 64 2e 70 6c     -%02d%02d%02d.pl
    32ca:	74 00                                               t.

000032cc <__c.4555>:
    32cc:	09 46 6f 72 6d 61 74 74 69 6e 67 3a 20 77 72 6f     .Formatting: wro
    32dc:	74 65 20 25 6c 64 20 73 65 63 74 6f 72 73 0a 00     te %ld sectors..

000032ec <__c.4553>:
    32ec:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    32fc:	3a 20 73 65 63 74 6f 72 73 20 69 73 20 30 0a 00     : sectors is 0..

0000330c <__c.4551>:
    330c:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    331c:	3a 20 64 69 72 73 65 63 74 6f 72 73 20 69 73 20     : dirsectors is 
    332c:	30 0a 00                                            0..

0000332f <__c.4549>:
    332f:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    333f:	3a 20 6c 69 66 6c 61 62 65 6c 20 69 73 20 65 6d     : liflabel is em
    334f:	70 74 79 0a 00                                      pty..

00003354 <__c.4547>:
    3354:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    3364:	3a 20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69     : lifimagename i
    3374:	73 20 65 6d 70 74 79 0a 00                          s empty..

0000337d <__c.4534>:
    337d:	72 65 6e 61 6d 65 64 3a 20 25 31 30 73 20 74 6f     renamed: %10s to
    338d:	20 25 31 30 73 0a 00                                 %10s..

00003394 <__c.4532>:
    3394:	6c 69 66 5f 72 65 6e 61 6d 65 3a 5b 25 73 5d 20     lif_rename:[%s] 
    33a4:	6c 69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f     lif name:[%s] no
    33b4:	74 20 66 6f 75 6e 64 0a 00                          t found..

000033bd <__c.4530>:
    33bd:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    33cd:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 63 6f 6e      new lifname con
    33dd:	74 61 69 6e 73 20 62 61 64 20 63 68 61 72 61 63     tains bad charac
    33ed:	74 65 72 73 0a 00                                   ters..

000033f3 <__c.4528>:
    33f3:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    3403:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 69 73 20      new lifname is 
    3413:	65 6d 70 74 79 0a 00                                empty..

0000341a <__c.4526>:
    341a:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    342a:	20 6f 6c 64 20 6c 69 66 6e 61 6d 65 20 69 73 20      old lifname is 
    343a:	65 6d 70 74 79 0a 00                                empty..

00003441 <__c.4524>:
    3441:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    3451:	20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69 73      lifimagename is
    3461:	20 65 6d 70 74 79 0a 00                              empty..

00003469 <__c.4515>:
    3469:	44 65 6c 65 74 65 64 3a 20 25 31 30 73 0a 00        Deleted: %10s..

00003478 <__c.4513>:
    3478:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 20 6c     LIF image:[%s] l
    3488:	69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f 74     if name:[%s] not
    3498:	20 66 6f 75 6e 64 0a 00                              found..

000034a0 <__c.4511>:
    34a0:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    34b0:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 0a 00        LIF name:[%s]..

000034bf <__c.4509>:
    34bf:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    34cf:	66 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     fname is empty..

000034df <__c.4507>:
    34df:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    34ef:	66 69 6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d     fimagename is em
    34ff:	70 74 79 0a 00                                      pty..

00003504 <__c.4499>:
    3504:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

00003512 <__c.4494>:
    3512:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003520 <__c.4492>:
    3520:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3530:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    3540:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

00003550 <__c.4490>:
    3550:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    3560:	73 0a 00                                            s..

00003563 <__c.4488>:
    3563:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3573:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    3583:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

00003592 <__c.4486>:
    3592:	6c 69 66 5f 61 64 64 3a 20 75 73 65 72 66 69 6c     lif_add: userfil
    35a2:	65 20 69 73 20 65 6d 70 74 79 0a 00                 e is empty..

000035ae <__c.4484>:
    35ae:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 6e 61 6d 65     lif_add: lifname
    35be:	20 69 73 20 65 6d 70 74 79 0a 00                     is empty..

000035c9 <__c.4482>:
    35c9:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 69 6d 61 67     lif_add: lifimag
    35d9:	65 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     ename is empty..

000035e9 <__c.4465>:
    35e9:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

000035f7 <__c.4460>:
    35f7:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003605 <__c.4458>:
    3605:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    3615:	73 0a 00                                            s..

00003618 <__c.4456>:
    3618:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    3628:	75 6e 64 3a 25 73 0a 00                             und:%s..

00003630 <__c.4439>:
    3630:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

0000363e <__c.4436>:
    363e:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    364e:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    365e:	20 65 72 72 6f 72 0a 00                              error..

00003666 <__c.4428>:
    3666:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003674 <__c.4426>:
    3674:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    3684:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    3694:	20 65 72 72 6f 72 0a 00                              error..

0000369c <__c.4423>:
    369c:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    36ac:	5f 61 73 5f 61 73 63 69 69 3a 20 75 6e 65 78 70     _as_ascii: unexp
    36bc:	65 63 74 65 64 20 63 6f 6e 74 72 6f 6c 20 62 79     ected control by
    36cc:	74 65 3a 5b 25 30 32 58 48 5d 20 40 20 6f 66 66     te:[%02XH] @ off
    36dc:	73 65 74 3a 20 25 38 6c 78 2c 20 69 6e 64 3a 25     set: %8lx, ind:%
    36ec:	30 32 58 48 0a 00                                   02XH..

000036f2 <__c.4421>:
    36f2:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    3702:	5f 61 73 5f 61 73 63 69 69 3a 20 73 74 72 69 6e     _as_ascii: strin
    3712:	67 20 74 6f 6f 20 62 69 67 20 73 69 7a 65 20 3d     g too big size =
    3722:	20 25 64 0a 00                                       %d..

00003727 <__c.4417>:
    3727:	45 78 74 72 61 63 74 69 6e 67 3a 20 25 73 0a 00     Extracting: %s..

00003737 <__c.4415>:
    3737:	46 69 6c 65 20 25 73 20 68 61 73 20 77 72 6f 6e     File %s has wron
    3747:	67 20 74 79 70 65 3a 5b 25 30 34 58 48 5d 20 65     g type:[%04XH] e
    3757:	78 70 65 63 74 65 64 20 30 78 45 30 31 30 2e 2e     xpected 0xE010..
    3767:	30 78 45 30 31 33 0a 00                             0xE013..

0000376f <__c.4413>:
    376f:	4c 49 46 20 46 69 6c 65 20 6e 6f 74 20 66 6f 75     LIF File not fou
    377f:	6e 64 3a 25 73 0a 00                                nd:%s..

00003786 <__c.4411>:
    3786:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    3796:	75 6e 64 3a 25 73 0a 00                             und:%s..

0000379e <__c.4387>:
    379e:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

000037ac <__c.4385>:
    37ac:	46 69 6c 65 20 53 65 63 74 6f 72 73 3a 20 20 20     File Sectors:   
    37bc:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

000037c5 <__c.4383>:
    37c5:	46 69 72 73 74 20 53 65 63 74 6f 72 3a 20 20 20     First Sector:   
    37d5:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

000037de <__c.4381>:
    37de:	49 6e 64 65 78 3a 20 20 20 20 20 20 20 20 20 20     Index:          
    37ee:	20 20 25 34 64 0a 00                                  %4d..

000037f5 <__c.4379>:
    37f5:	4e 61 6d 65 3a 20 20 20 20 20 20 20 20 20 20 20     Name:           
    3805:	20 20 20 25 73 0a 00                                   %s..

0000380c <__c.4377>:
    380c:	4e 65 77 20 44 69 72 65 63 74 6f 72 79 20 49 6e     New Directory In
    381c:	66 6f 72 6d 61 74 69 6f 6e 20 41 46 54 45 52 20     formation AFTER 
    382c:	77 72 69 74 65 0a 00                                write..

00003833 <__c.4375>:
    3833:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3843:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    3853:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

00003863 <__c.4373>:
    3863:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3873:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    3883:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

00003892 <__c.4371>:
    3892:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    38a2:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    38b2:	66 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 0a 00     file not found..

000038c2 <__c.4369>:
    38c2:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    38d2:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    38e2:	66 69 6c 65 20 69 73 20 65 6d 70 74 79 0a 00        file is empty..

000038f1 <__c.4367>:
    38f1:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    3901:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 6e     le_as_e010: lifn
    3911:	61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00           ame is empty..

0000391f <__c.4365>:
    391f:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    392f:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 69     le_as_e010: lifi
    393f:	6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d 70 74     magename is empt
    394f:	79 0a 00                                            y..

00003952 <__c.4351>:
    3952:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003960 <__c.4349>:
    3960:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

0000396e <__c.4344>:
    396e:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

0000397c <__c.4327>:
    397c:	45 78 70 65 63 74 65 64 20 73 65 63 74 6f 72 20     Expected sector 
    398c:	62 6f 75 6e 64 72 79 2c 20 6f 66 66 73 65 74 3a     boundry, offset:
    399c:	25 64 0a 00                                         %d..

000039a0 <__c.4310>:
    39a0:	6c 69 66 5f 65 30 31 30 5f 64 61 70 5f 73 65 63     lif_e010_dap_sec
    39b0:	74 6f 72 3a 20 65 78 70 65 63 74 65 64 20 73 65     tor: expected se
    39c0:	63 74 6f 72 20 62 6f 75 6e 64 72 79 3a 20 6f 66     ctor boundry: of
    39d0:	66 73 65 74 3a 25 64 0a 00                          fset:%d..

000039d9 <__c.4296>:
    39d9:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    39e9:	73 5d 20 6c 69 66 6c 61 62 65 6c 20 74 6f 6f 20     s] liflabel too 
    39f9:	62 69 67 0a 00                                      big..

000039fe <__c.4294>:
    39fe:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    3a0e:	73 5d 20 69 6e 76 61 6c 69 64 20 63 68 61 72 61     s] invalid chara
    3a1e:	63 74 65 72 73 0a 00                                cters..

00003a25 <__c.4287>:
    3a25:	25 38 6c 64 20 46 72 65 65 20 73 65 63 74 6f 72     %8ld Free sector
    3a35:	73 0a 00                                            s..

00003a38 <__c.4285>:
    3a38:	25 38 6c 64 20 55 73 65 64 20 73 65 63 74 6f 72     %8ld Used sector
    3a48:	73 0a 00                                            s..

00003a4b <__c.4283>:
    3a4b:	25 38 6c 64 20 44 69 72 20 20 73 65 63 74 6f 72     %8ld Dir  sector
    3a5b:	73 0a 00                                            s..

00003a5e <__c.4281>:
    3a5e:	25 38 6c 64 20 44 69 72 20 20 73 74 61 72 74 0a     %8ld Dir  start.
	...

00003a6f <__c.4279>:
    3a6f:	25 38 6c 64 20 50 75 72 67 65 64 0a 00              %8ld Purged..

00003a7c <__c.4277>:
    3a7c:	25 38 6c 64 20 46 69 6c 65 73 0a 00                 %8ld Files..

00003a88 <__c.4275>:
    3a88:	0a 00                                               ..

00003a8a <__c.4272>:
    3a8a:	25 2d 31 30 73 20 20 25 30 34 58 68 20 20 20 20     %-10s  %04Xh    
    3a9a:	20 20 25 38 6c 58 68 20 20 20 25 39 6c 64 25 63       %8lXh   %9ld%c
    3aaa:	20 20 20 20 20 20 25 34 64 20 20 20 25 73 0a 00           %4d   %s..

00003aba <__c.4270>:
    3aba:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3aca:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    3ada:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3aea:	6f 72 73 3a 25 6c 64 20 21 3d 20 46 69 6c 65 53     ors:%ld != FileS
    3afa:	65 63 74 6f 72 73 3a 25 6c 64 0a 00                 ectors:%ld..

00003b06 <__c.4267>:
    3b06:	4e 41 4d 45 20 20 20 20 20 20 20 20 20 54 59 50     NAME         TYP
    3b16:	45 20 20 20 53 54 41 52 54 20 53 45 43 54 4f 52     E   START SECTOR
    3b26:	20 20 20 20 20 20 20 20 53 49 5a 45 20 20 20 20             SIZE    
    3b36:	52 45 43 53 49 5a 45 20 20 20 44 41 54 45 0a 00     RECSIZE   DATE..

00003b46 <__c.4265>:
    3b46:	56 6f 6c 75 6d 65 3a 5b 25 73 5d 20 44 61 74 65     Volume:[%s] Date
    3b56:	3a 5b 25 73 5d 0a 00                                :[%s]..

00003b5d <__c.4255>:
    3b5d:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3b6d:	5b 25 73 5d 20 65 72 72 6f 72 20 64 69 72 65 63     [%s] error direc
    3b7d:	74 6f 72 79 20 63 68 65 63 6b 20 66 61 69 6c 65     tory check faile
    3b8d:	64 0a 00                                            d..

00003b90 <__c.4253>:
    3b90:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3ba0:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    3bb0:	65 20 76 61 6c 69 64 61 74 65 20 66 61 69 6c 65     e validate faile
    3bc0:	64 0a 00                                            d..

00003bc3 <__c.4251>:
    3bc3:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3bd3:	5b 25 73 5d 20 65 72 72 6f 72 20 72 65 61 64 20     [%s] error read 
    3be3:	76 6f 6c 75 6d 65 20 68 65 61 64 65 72 20 66 61     volume header fa
    3bf3:	69 6c 65 64 0a 00                                   iled..

00003bf9 <__c.4249>:
    3bf9:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3c09:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    3c19:	65 20 68 65 61 64 65 72 20 61 72 65 61 20 74 6f     e header area to
    3c29:	6f 20 73 6d 61 6c 6c 3a 5b 25 6c 64 5d 0a 00        o small:[%ld]..

00003c38 <__c.4236>:
    3c38:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 69 6e 64 65     lif_newdir: inde
    3c48:	78 3a 5b 25 64 5d 20 61 64 64 69 6e 67 20 61 74     x:[%d] adding at
    3c58:	3a 5b 25 6c 64 5d 74 6f 20 70 75 72 67 65 64 20     :[%ld]to purged 
    3c68:	73 70 61 63 65 3a 5b 25 6c 64 5d 20 73 65 63 74     space:[%ld] sect
    3c78:	6f 72 73 2c 20 66 72 65 65 3a 5b 25 6c 64 5d 0a     ors, free:[%ld].
	...

00003c89 <__c.4233>:
    3c89:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    3c99:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    3ca9:	65 3a 5b 25 6c 64 5d 0a 00                          e:[%ld]..

00003cb2 <__c.4231>:
    3cb2:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    3cc2:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    3cd2:	65 3a 5b 25 6c 64 5d 20 66 6f 72 20 73 69 7a 65     e:[%ld] for size
    3ce2:	3a 5b 25 6c 64 5d 0a 00                             :[%ld]..

00003cea <__c.4219>:
    3cea:	6c 69 66 5f 75 70 64 61 74 65 5f 66 72 65 65 3a     lif_update_free:
    3cfa:	5b 25 73 5d 20 65 72 72 6f 72 20 70 72 65 76 69     [%s] error previ
    3d0a:	6f 75 73 20 72 65 63 6f 72 64 20 66 69 6c 65 20     ous record file 
    3d1a:	61 72 65 61 20 6f 76 65 72 6c 61 70 73 20 74 68     area overlaps th
    3d2a:	69 73 20 6f 6e 65 3a 5b 25 73 5d 0a 00              is one:[%s]..

00003d37 <__c.4194>:
    3d37:	6c 69 66 5f 63 68 65 63 6b 5f 64 69 72 3a 20 65     lif_check_dir: e
    3d47:	72 72 6f 72 2c 20 69 6e 64 65 78 3a 25 64 0a 00     rror, index:%d..

00003d57 <__c.4185>:
    3d57:	6c 69 66 5f 63 68 65 63 6b 64 69 72 69 6e 64 65     lif_checkdirinde
    3d67:	78 3a 5b 25 73 5d 20 64 69 72 65 63 6f 72 79 20     x:[%s] direcory 
    3d77:	69 6e 64 65 78 3a 5b 25 64 5d 20 6f 75 74 20 6f     index:[%d] out o
    3d87:	66 20 62 6f 75 6e 64 73 0a 00                       f bounds..

00003d91 <__c.4166>:
    3d91:	09 57 72 6f 74 65 3a 20 25 6c 64 0a 00              .Wrote: %ld..

00003d9e <__c.4161>:
    3d9e:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

00003dab <__c.4156>:
    3dab:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

00003db8 <__c.4148>:
    3db8:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

00003dc5 <__c.4146>:
    3dc5:	43 72 65 61 74 69 6e 67 3a 25 73 2c 20 4c 61 62     Creating:%s, Lab
    3dd5:	65 6c 3a 5b 25 73 5d 2c 20 44 69 72 65 63 74 6f     el:[%s], Directo
    3de5:	72 79 20 53 74 61 72 74 20 25 6c 64 2c 20 44 69     ry Start %ld, Di
    3df5:	72 65 63 74 6f 72 79 20 53 69 7a 65 3a 20 25 6c     rectory Size: %l
    3e05:	64 2c 20 46 69 6c 65 20 53 65 63 74 6f 72 73 3a     d, File Sectors:
    3e15:	25 6c 64 0a 00                                      %ld..

00003e1a <__c.4130>:
    3e1a:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3e2a:	73 5d 20 69 6e 76 61 6c 69 64 20 73 65 63 74 6f     s] invalid secto
    3e3a:	72 20 73 69 7a 65 3a 25 6c 64 0a 00                 r size:%ld..

00003e46 <__c.4128>:
    3e46:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3e56:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3e66:	79 74 65 73 20 3d 3d 20 30 0a 00                    ytes == 0..

00003e71 <__c.4126>:
    3e71:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3e81:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    3e91:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3ea1:	6f 72 73 3a 25 6c 64 20 3c 20 46 69 6c 65 53 65     ors:%ld < FileSe
    3eb1:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003ebc <__c.4124>:
    3ebc:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3ecc:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3edc:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3eec:	6f 72 73 3a 25 6c 64 20 3e 20 46 69 6c 65 53 65     ors:%ld > FileSe
    3efc:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003f07 <__c.4122>:
    3f07:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3f17:	73 5d 20 69 6e 76 61 6c 69 64 20 56 6f 6c 75 6d     s] invalid Volum
    3f27:	65 20 4e 75 6d 62 65 72 3a 25 58 68 0a 00           e Number:%Xh..

00003f35 <__c.4120>:
    3f35:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3f45:	73 5d 20 69 6e 76 61 6c 69 64 20 65 6e 64 20 73     s] invalid end s
    3f55:	65 63 74 6f 72 3a 25 6c 58 68 20 3e 20 74 6f 74     ector:%lXh > tot
    3f65:	61 6c 20 73 65 63 74 6f 72 73 3a 25 6c 58 68 0a     al sectors:%lXh.
	...

00003f76 <__c.4118>:
    3f76:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3f86:	73 5d 20 69 6e 76 61 6c 69 64 20 73 74 61 72 74     s] invalid start
    3f96:	20 73 65 63 74 6f 72 3a 25 6c 58 68 20 3c 20 66      sector:%lXh < f
    3fa6:	69 65 20 61 72 65 61 20 73 74 61 72 74 3a 25 6c     ie area start:%l
    3fb6:	58 68 0a 00                                         Xh..

00003fba <__c.4116>:
    3fba:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3fca:	73 5d 20 69 6e 76 61 6c 69 64 20 4e 61 6d 65 0a     s] invalid Name.
	...

00003fdb <__c.4110>:
    3fdb:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3feb:	69 64 20 66 69 6c 65 20 73 74 61 72 74 20 3e 20     id file start > 
    3ffb:	69 6d 61 67 65 20 73 69 7a 65 0a 00                 image size..

00004007 <__c.4108>:
    4007:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    4017:	69 64 20 44 69 72 65 63 74 6f 72 79 20 53 65 63     id Directory Sec
    4027:	74 6f 72 20 43 6f 75 6e 74 20 3c 20 31 0a 00        tor Count < 1..

00004036 <__c.4106>:
    4036:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    4046:	69 64 20 73 74 61 72 74 20 73 65 63 74 6f 72 3a     id start sector:
    4056:	25 6c 64 0a 00                                      %ld..

0000405b <__c.4104>:
    405b:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    406b:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    407b:	65 74 20 32 32 26 32 33 20 73 68 6f 75 6c 64 20     et 22&23 should 
    408b:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00004094 <__c.4102>:
    4094:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    40a4:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    40b4:	65 74 20 31 34 26 31 35 20 73 68 6f 75 6c 64 20     et 14&15 should 
    40c4:	62 65 20 7a 65 72 6f 0a 00                          be zero..

000040cd <__c.4100>:
    40cd:	4c 49 46 20 56 65 72 73 69 6f 6e 3a 20 25 30 34     LIF Version: %04
    40dd:	58 48 20 3e 20 31 0a 00                             XH > 1..

000040e5 <__c.4098>:
    40e5:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    40f5:	69 64 20 53 79 73 74 65 6d 33 30 30 30 20 49 44     id System3000 ID
    4105:	20 28 25 30 34 58 48 29 20 65 78 70 65 63 74 65      (%04XH) expecte
    4115:	64 20 31 30 30 30 48 0a 00                          d 1000H..

0000411e <__c.4096>:
    411e:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    412e:	69 64 20 56 6f 6c 75 6d 65 20 4e 61 6d 65 00        id Volume Name.

0000413d <__c.4089>:
    413d:	0a 00                                               ..

0000413f <__c.4087>:
    413f:	44 49 52 20 46 69 6c 65 20 44 61 74 65 3a 20 20     DIR File Date:  
    414f:	20 20 20 20 20 20 25 73 0a 00                             %s..

00004159 <__c.4085>:
    4159:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 20     DIR File sector 
    4169:	73 69 7a 65 3a 20 25 38 58 68 0a 00                 size: %8Xh..

00004175 <__c.4083>:
    4175:	44 49 52 20 46 69 6c 65 20 62 79 74 65 73 3a 20     DIR File bytes: 
    4185:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004192 <__c.4081>:
    4192:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 73     DIR File sectors
    41a2:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

000041af <__c.4079>:
    41af:	44 49 52 20 46 69 6c 65 20 73 74 61 72 74 3a 20     DIR File start: 
    41bf:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000041cc <__c.4077>:
    41cc:	44 49 52 20 46 69 6c 65 20 56 6f 6c 75 6d 65 23     DIR File Volume#
    41dc:	3a 20 20 20 20 20 25 38 58 68 0a 00                 :     %8Xh..

000041e8 <__c.4075>:
    41e8:	44 49 52 20 46 69 6c 65 20 54 79 70 65 3a 20 20     DIR File Type:  
    41f8:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00004204 <__c.4073>:
    4204:	44 49 52 20 46 69 6c 65 20 4e 61 6d 65 3a 20 20     DIR File Name:  
    4214:	20 20 20 20 20 20 25 73 0a 00                             %s..

0000421e <__c.4071>:
    421e:	56 4f 4c 20 44 61 74 65 3a 20 20 20 20 20 20 20     VOL Date:       
    422e:	20 20 20 20 20 20 25 73 0a 00                             %s..

00004238 <__c.4069>:
    4238:	56 4f 4c 20 4c 49 46 56 65 72 73 69 6f 6e 3a 20     VOL LIFVersion: 
    4248:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00004254 <__c.4067>:
    4254:	56 4f 4c 20 33 30 30 30 4c 49 46 69 64 3a 20 20     VOL 3000LIFid:  
    4264:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00004270 <__c.4065>:
    4270:	56 4f 4c 20 44 69 72 20 73 65 63 74 6f 72 73 3a     VOL Dir sectors:
    4280:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

0000428d <__c.4063>:
    428d:	56 4f 4c 20 44 69 72 20 73 74 61 72 74 3a 20 20     VOL Dir start:  
    429d:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000042aa <__c.4061>:
    42aa:	56 4f 4c 20 4c 49 46 69 64 3a 20 20 20 20 20 20     VOL LIFid:      
    42ba:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

000042c6 <__c.4059>:
    42c6:	56 4f 4c 20 4c 61 62 65 6c 3a 20 20 20 20 20 20     VOL Label:      
    42d6:	20 20 20 20 20 20 25 73 0a 00                             %s..

000042e0 <__c.4057>:
    42e0:	4c 49 46 20 70 75 72 67 65 64 3a 20 20 20 20 20     LIF purged:     
    42f0:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000042fd <__c.4055>:
    42fd:	4c 49 46 20 66 69 6c 65 73 3a 20 20 20 20 20 20     LIF files:      
    430d:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

0000431a <__c.4053>:
    431a:	4c 49 46 20 66 72 65 65 3a 20 20 20 20 20 20 20     LIF free:       
    432a:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004337 <__c.4051>:
    4337:	4c 49 46 20 75 73 65 64 3a 20 20 20 20 20 20 20     LIF used:       
    4347:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004354 <__c.4049>:
    4354:	4c 49 46 20 66 69 6c 65 20 73 65 63 74 6f 72 73     LIF file sectors
    4364:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

00004371 <__c.4047>:
    4371:	4c 49 46 20 66 69 6c 65 73 74 61 72 74 3a 20 20     LIF filestart:  
    4381:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

0000438e <__c.4045>:
    438e:	4c 49 46 20 62 79 74 65 73 3a 20 20 20 20 20 20     LIF bytes:      
    439e:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000043ab <__c.4043>:
    43ab:	4c 49 46 20 73 65 63 74 6f 72 73 3a 20 20 20 20     LIF sectors:    
    43bb:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000043c8 <__c.4041>:
    43c8:	4c 49 46 20 6e 61 6d 65 3a 20 20 20 20 20 20 20     LIF name:       
    43d8:	20 20 20 20 20 20 25 73 0a 00                             %s..

000043e2 <__c.4039>:
    43e2:	0a 25 73 0a 00                                      .%s..

000043e7 <__c.3916>:
    43e7:	6c 69 66 5f 77 72 69 74 65 3a 20 57 72 69 74 65     lif_write: Write
    43f7:	3a 5b 25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c     :[%s] offset:[%l
    4407:	64 5d 20 77 72 69 74 65 3a 5b 25 64 5d 20 65 78     d] write:[%d] ex
    4417:	70 65 63 74 65 64 3a 5b 25 64 5d 0a 00              pected:[%d]..

00004424 <__c.3907>:
    4424:	6c 69 66 5f 72 65 61 64 3a 20 72 65 61 64 3a 5b     lif_read: read:[
    4434:	25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c 64 5d     %s] offset:[%ld]
    4444:	20 77 72 69 74 65 3a 5b 25 6c 64 5d 20 65 78 70      write:[%ld] exp
    4454:	65 63 74 65 64 3a 5b 25 64 5d 0a 00                 ected:[%d]..

00004460 <__c.3898>:
    4460:	6c 69 66 5f 72 65 61 64 5f 6d 73 67 3a 20 25 73     lif_read_msg: %s
    4470:	20 53 65 65 6b 20 65 72 72 6f 72 20 25 6c 64 0a      Seek error %ld.
	...

00004481 <__c.3891>:
    4481:	6c 69 66 5f 73 74 61 74 3a 20 43 61 6e 27 74 20     lif_stat: Can't 
    4491:	73 74 61 74 3a 25 73 0a 00                          stat:%s..

0000449a <__c.3885>:
    449a:	6c 69 66 5f 6f 70 65 6e 3a 20 43 61 6e 27 74 20     lif_open: Can't 
    44aa:	6f 70 65 6e 3a 5b 25 73 5d 20 6d 6f 64 65 3a 5b     open:[%s] mode:[
    44ba:	25 73 5d 0a 00                                      %s]..

000044bf <__c.3873>:
    44bf:	6c 69 66 5f 66 72 65 65 3a 20 4e 55 4c 4c 20 70     lif_free: NULL p
    44cf:	6f 69 6e 74 65 72 0a 00                             ointer..

000044d7 <__c.3868>:
    44d7:	6c 69 66 5f 63 61 6c 6c 6f 63 3a 5b 25 6c 64 5d     lif_calloc:[%ld]
    44e7:	20 6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65      not enough free
    44f7:	20 6d 65 6d 6f 72 79 0a 00                           memory..

00004500 <__c.3862>:
    4500:	74 64 30 32 6c 69 66 20 73 75 70 70 6f 72 74 20     td02lif support 
    4510:	6e 6f 74 20 65 6e 61 62 6c 65 64 0a 00              not enabled..

0000451d <__c.3860>:
    451d:	44 69 73 6b 3a 20 25 73 20 6e 6f 74 20 66 6f 75     Disk: %s not fou
    452d:	6e 64 20 69 6e 20 68 70 64 69 72 2e 69 6e 69 0a     nd in hpdir.ini.
	...

0000453e <__c.3847>:
    453e:	6c 69 66 20 61 64 64 20 6c 69 66 69 6d 61 67 65     lif add lifimage
    454e:	20 6c 69 66 6e 61 6d 65 20 66 72 6f 6d 5f 61 73      lifname from_as
    455e:	63 69 69 5f 66 69 6c 65 0a 6c 69 66 20 61 64 64     cii_file.lif add
    456e:	62 69 6e 20 6c 69 66 69 6d 61 67 65 20 6c 69 66     bin lifimage lif
    457e:	6e 61 6d 65 20 66 72 6f 6d 5f 6c 69 66 5f 66 69     name from_lif_fi
    458e:	6c 65 0a 6c 69 66 20 63 72 65 61 74 65 20 6c 69     le.lif create li
    459e:	66 69 6d 61 67 65 20 6c 61 62 65 6c 20 64 69 72     fimage label dir
    45ae:	65 63 74 6f 72 79 5f 73 65 63 74 6f 72 73 20 73     ectory_sectors s
    45be:	65 63 74 6f 72 73 0a 6c 69 66 20 63 72 65 61 74     ectors.lif creat
    45ce:	65 64 69 73 6b 20 6c 69 66 69 6d 61 67 65 20 6c     edisk lifimage l
    45de:	61 62 65 6c 20 6d 6f 64 65 6c 0a 6c 69 66 20 64     abel model.lif d
    45ee:	65 6c 20 6c 69 66 69 6d 61 67 65 20 6e 61 6d 65     el lifimage name
    45fe:	0a 6c 69 66 20 64 69 72 20 6c 69 66 69 6d 61 67     .lif dir lifimag
    460e:	65 0a 6c 69 66 20 65 78 74 72 61 63 74 20 6c 69     e.lif extract li
    461e:	66 69 6d 61 67 65 20 6c 69 66 6e 61 6d 65 20 74     fimage lifname t
    462e:	6f 5f 61 73 63 69 69 5f 66 69 6c 65 0a 6c 69 66     o_ascii_file.lif
    463e:	20 65 78 74 72 61 63 74 62 69 6e 20 6c 69 66 69      extractbin lifi
    464e:	6d 61 67 65 20 6c 69 66 6e 61 6d 65 20 74 6f 5f     mage lifname to_
    465e:	6c 69 66 5f 66 69 6c 65 0a 20 20 20 20 65 78 74     lif_file.    ext
    466e:	72 61 63 74 73 20 61 20 66 69 6c 65 20 69 6e 74     racts a file int
    467e:	6f 20 61 20 73 69 67 6c 65 20 66 69 6c 65 20 4c     o a sigle file L
    468e:	49 46 20 69 6d 61 67 65 0a 6c 69 66 20 72 65 6e     IF image.lif ren
    469e:	61 6d 65 20 6c 69 66 69 6d 61 67 65 20 6f 6c 64     ame lifimage old
    46ae:	6c 69 66 6e 61 6d 65 20 6e 65 77 6c 69 66 6e 61     lifname newlifna
    46be:	6d 65 0a 55 73 65 20 2d 64 20 20 61 66 74 65 72     me.Use -d  after
    46ce:	20 27 6c 69 66 27 20 6b 65 79 77 6f 72 64 20 74      'lif' keyword t
    46de:	6f 20 65 6e 61 62 6c 65 20 4c 49 46 20 66 69 6c     o enable LIF fil
    46ee:	65 73 79 73 74 65 6d 20 64 65 62 75 67 67 69 6e     esystem debuggin
    46fe:	67 0a 0a 00                                         g...

00004702 <__c.3845>:
    4702:	6c 69 66 20 20 20 68 65 6c 70 0a 00                 lif   help..

0000470e <__c.4636>:
    470e:	53 74 61 72 74 69 6e 67 20 47 50 49 42 20 54 41     Starting GPIB TA
    471e:	53 4b 0a 00                                         SK..

00004722 <__c.4634>:
    4722:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    4732:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

0000473c <__c.4632>:
    473c:	25 2d 31 36 73 00                                   %-16s.

00004742 <__c.4630>:
    4742:	64 65 62 75 67 6c 65 76 65 6c 20 20 20 3d 20 25     debuglevel   = %
    4752:	30 34 78 48 0a 00                                   04xH..

00004758 <__c.4628>:
    4758:	47 50 49 42 20 53 74 61 74 65 20 69 6e 69 74 20     GPIB State init 
    4768:	64 6f 6e 65 0a 00                                   done..

0000476e <__c.4626>:
    476e:	47 50 49 42 20 46 69 6c 65 20 69 6e 69 74 20 64     GPIB File init d
    477e:	6f 6e 65 0a 00                                      one..

00004783 <__c.4624>:
    4783:	47 50 49 42 20 54 69 6d 65 72 20 69 6e 69 74 69     GPIB Timer initi
    4793:	61 6c 69 7a 65 64 0a 00                             alized..

0000479b <__c.4622>:
    479b:	47 50 49 42 20 54 69 6d 65 72 20 53 65 74 75 70     GPIB Timer Setup
    47ab:	0a 00                                               ..

000047ad <__c.4620>:
    47ad:	50 72 69 6e 74 65 72 20 69 6e 69 74 69 61 6c 69     Printer initiali
    47bd:	7a 65 64 0a 00                                      zed..

000047c2 <__c.4618>:
    47c2:	47 50 49 42 20 62 75 73 20 69 6e 69 74 69 61 6c     GPIB bus initial
    47d2:	69 7a 65 64 0a 00                                   ized..

000047d8 <__c.4616>:
    47d8:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 65 64 0a     MMC initialized.
	...

000047e9 <__c.4614>:
    47e9:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 69 6e 67     MMC initializing
    47f9:	20 73 74 61 72 74 0a 00                              start..

00004801 <__c.4612>:
    4801:	53 79 73 74 65 6d 20 54 61 73 6b 20 49 6e 74 65     System Task Inte
    4811:	72 72 75 70 74 20 52 61 74 65 3a 20 25 6c 64 20     rrupt Rate: %ld 
    4821:	4e 61 6e 6f 20 53 65 63 6f 6e 64 73 0a 00           Nano Seconds..

0000482f <__c.4610>:
    482f:	43 6c 6f 63 6b 20 63 6c 65 61 72 65 64 0a 00        Clock cleared..

0000483e <__c.4608>:
    483e:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 52 54 43     Initializing RTC
    484e:	0a 00                                               ..

00004850 <__c.4606>:
    4850:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 49 32 43     Initializing I2C
    4860:	20 62 75 73 0a 00                                    bus..

00004866 <__c.4604>:
    4866:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 53 50 49     Initializing SPI
    4876:	20 62 75 73 0a 00                                    bus..

0000487c <__c.4602>:
    487c:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    488c:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

00004896 <__c.4600>:
    4896:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    48a6:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

000048b0 <__c.4598>:
    48b0:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    48c0:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    48d0:	35 64 69 73 6b 0a 00                                5disk..

000048d7 <__c.4596>:
    48d7:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

000048e7 <__c.4594>:
    48e7:	20 28 43 29 20 32 30 31 34 2d 32 30 32 30 20 62      (C) 2014-2020 b
    48f7:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

00004904 <__c.4592>:
    4904:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    4914:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

00004923 <__c.4590>:
    4923:	52 65 71 75 65 73 74 65 64 20 42 61 75 64 20 52     Requested Baud R
    4933:	61 74 65 3a 20 25 6c 64 2c 20 41 63 74 75 61 6c     ate: %ld, Actual
    4943:	3a 20 25 6c 64 0a 00                                : %ld..

0000494a <__c.4588>:
    494a:	43 50 55 20 43 6c 6f 63 6b 20 3d 20 25 6c 75 0a     CPU Clock = %lu.
	...

0000495b <__c.4586>:
    495b:	53 74 61 72 74 0a 00                                Start..

00004962 <__c.4578>:
    4962:	25 2d 31 36 73 00                                   %-16s.

00004968 <__c.4576>:
    4968:	53 53 38 30 3d 25 64 20 41 4d 49 47 4f 3d 25 64     SS80=%d AMIGO=%d
	...

00004979 <__c.4568>:
    4979:	20 20 20 20 20 20 20 5b 25 73 5d 0a 00                     [%s]..

00004986 <__c.4566>:
    4986:	20 20 20 20 41 72 67 75 6d 65 6e 74 20 63 6f 75         Argument cou
    4996:	6e 74 20 3d 20 25 64 0a 00                          nt = %d..

0000499f <__c.4564>:
    499f:	49 6e 76 61 6c 69 64 20 43 6f 6d 6d 61 6e 64 0a     Invalid Command.
	...

000049b0 <__c.4562>:
    49b0:	43 6f 6d 6d 61 6e 64 20 46 41 49 4c 45 44 0a 00     Command FAILED..

000049c0 <__c.4560>:
    49c0:	4f 4b 0a 00                                         OK..

000049c4 <__c.4552>:
    49c4:	49 6e 70 75 74 20 64 65 62 75 67 67 69 6e 67 3a     Input debugging:
    49d4:	20 25 73 0a 00                                       %s..

000049d9 <__c.4547>:
    49d9:	20 20 20 5b 25 73 5d 0a 00                             [%s]..

000049e2 <__c.4545>:
    49e2:	41 72 67 75 6d 65 6e 74 20 63 6f 75 6e 74 20 3d     Argument count =
    49f2:	20 25 64 0a 00                                       %d..

000049f7 <__c.4543>:
    49f7:	0a 3e 00                                            .>.

000049fa <__c.4530>:
    49fa:	62 61 63 6b 6c 69 67 68 74 20 30 78 52 52 47 47     backlight 0xRRGG
    4a0a:	42 42 0a 68 65 6c 70 0a 64 69 72 20 64 69 72 65     BB.help.dir dire
    4a1a:	63 74 6f 72 69 65 73 20 6f 72 20 66 69 6c 65 20     ctories or file 
    4a2a:	6c 69 73 74 0a 69 6e 70 75 74 20 20 20 2d 20 74     list.input   - t
    4a3a:	6f 67 67 6c 65 20 69 6e 70 75 74 20 64 65 62 75     oggle input debu
    4a4a:	67 67 69 6e 67 0a 6d 65 6d 20 20 20 20 20 2d 20     gging.mem     - 
    4a5a:	64 69 73 70 6c 61 79 20 66 72 65 65 20 6d 65 6d     display free mem
    4a6a:	6f 72 79 0a 72 65 73 65 74 20 20 20 2d 20 72 65     ory.reset   - re
    4a7a:	73 65 74 20 65 6d 75 6c 61 74 6f 72 0a 73 65 74     set emulator.set
    4a8a:	64 61 74 65 20 2d 20 73 65 74 20 64 61 74 65 0a     date - set date.
    4a9a:	74 69 6d 65 20 20 20 20 2d 20 64 69 73 70 6c 61     time    - displa
    4aaa:	79 20 63 75 72 72 65 6e 74 20 74 69 6d 65 0a 0a     y current time..
	...

00004abb <__c.4523>:
    4abb:	25 2d 31 36 73 00                                   %-16s.

00004ac1 <__c.4521>:
    4ac1:	25 2d 31 36 73 00                                   %-16s.

00004ac7 <__c.4514>:
    4ac7:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    4ad7:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

00004ae1 <__c.4512>:
    4ae1:	25 2d 31 36 73 00                                   %-16s.

00004ae7 <__c.4510>:
    4ae7:	25 2d 31 36 73 00                                   %-16s.

00004aed <__c.4508>:
    4aed:	6c 63 64 5f 74 61 73 6b 20 69 6e 69 74 20 66 61     lcd_task init fa
    4afd:	69 6c 65 64 0a 00                                   iled..

00004b03 <__c.4506>:
    4b03:	49 32 43 20 4c 43 44 20 69 6e 69 74 69 61 6c 69     I2C LCD initiali
    4b13:	7a 61 74 69 6f 6e 20 73 74 61 72 74 0a 00           zation start..

00004b21 <__c.4500>:
    4b21:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    4b31:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

00004b3b <__c.4494>:
    4b3b:	25 73 20 25 32 64 20 25 30 32 64 3a 25 30 32 64     %s %2d %02d:%02d
    4b4b:	3a 25 30 32 64 00                                   :%02d.

00004b51 <__c.4480>:
    4b51:	0a 00                                               ..

00004b53 <__c.4478>:
    4b53:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    4b63:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

00004b6d <__c.4476>:
    4b6d:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    4b7d:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

00004b87 <__c.4474>:
    4b87:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    4b97:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    4ba7:	35 64 69 73 6b 0a 00                                5disk..

00004bae <__c.4472>:
    4bae:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

00004bbe <__c.4470>:
    4bbe:	20 28 63 29 20 32 30 31 34 2d 32 30 32 30 20 62      (c) 2014-2020 b
    4bce:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

00004bdb <__c.4468>:
    4bdb:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    4beb:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

00004bfa <__c.4466>:
    4bfa:	53 74 61 6e 64 20 61 6c 6f 6e 65 20 76 65 72 73     Stand alone vers
    4c0a:	69 6f 6e 20 6f 66 20 4c 49 46 20 75 74 69 6c 69     ion of LIF utili
    4c1a:	74 69 65 73 20 66 6f 72 20 6c 69 6e 75 78 0a 00     ties for linux..

00004c2a <__ctors_end>:
    4c2a:	11 24       	eor	r1, r1
    4c2c:	1f be       	out	0x3f, r1	; 63
    4c2e:	cf ef       	ldi	r28, 0xFF	; 255
    4c30:	d0 e4       	ldi	r29, 0x40	; 64
    4c32:	de bf       	out	0x3e, r29	; 62
    4c34:	cd bf       	out	0x3d, r28	; 61

00004c36 <__do_copy_data>:
    4c36:	17 e1       	ldi	r17, 0x17	; 23
    4c38:	a0 e0       	ldi	r26, 0x00	; 0
    4c3a:	b1 e0       	ldi	r27, 0x01	; 1
    4c3c:	ec e1       	ldi	r30, 0x1C	; 28
    4c3e:	f6 ed       	ldi	r31, 0xD6	; 214
    4c40:	01 e0       	ldi	r16, 0x01	; 1
    4c42:	0b bf       	out	0x3b, r16	; 59
    4c44:	02 c0       	rjmp	.+4      	; 0x4c4a <__do_copy_data+0x14>
    4c46:	07 90       	elpm	r0, Z+
    4c48:	0d 92       	st	X+, r0
    4c4a:	ae 34       	cpi	r26, 0x4E	; 78
    4c4c:	b1 07       	cpc	r27, r17
    4c4e:	d9 f7       	brne	.-10     	; 0x4c46 <__do_copy_data+0x10>

00004c50 <__do_clear_bss>:
    4c50:	20 e2       	ldi	r18, 0x20	; 32
    4c52:	ae e4       	ldi	r26, 0x4E	; 78
    4c54:	b7 e1       	ldi	r27, 0x17	; 23
    4c56:	01 c0       	rjmp	.+2      	; 0x4c5a <.do_clear_bss_start>

00004c58 <.do_clear_bss_loop>:
    4c58:	1d 92       	st	X+, r1

00004c5a <.do_clear_bss_start>:
    4c5a:	a0 33       	cpi	r26, 0x30	; 48
    4c5c:	b2 07       	cpc	r27, r18
    4c5e:	e1 f7       	brne	.-8      	; 0x4c58 <.do_clear_bss_loop>
    4c60:	0e 94 a7 e4 	call	0x1c94e	; 0x1c94e <main>
    4c64:	0c 94 0c eb 	jmp	0x1d618	; 0x1d618 <_exit>

00004c68 <__bad_interrupt>:
    4c68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00004c6c <chip_select>:
#endif
#ifdef AVR
    SPI0_RX(&data,1);
#endif
    return(data);
}
    4c6c:	e8 2f       	mov	r30, r24
    4c6e:	e6 95       	lsr	r30
    4c70:	e6 95       	lsr	r30
    4c72:	e6 95       	lsr	r30
    4c74:	93 e0       	ldi	r25, 0x03	; 3
    4c76:	e9 9f       	mul	r30, r25
    4c78:	f0 01       	movw	r30, r0
    4c7a:	11 24       	eor	r1, r1
    4c7c:	32 a1       	ldd	r19, Z+34	; 0x22
    4c7e:	28 2f       	mov	r18, r24
    4c80:	27 70       	andi	r18, 0x07	; 7
    4c82:	81 e0       	ldi	r24, 0x01	; 1
    4c84:	90 e0       	ldi	r25, 0x00	; 0
    4c86:	01 c0       	rjmp	.+2      	; 0x4c8a <chip_select+0x1e>
    4c88:	88 0f       	add	r24, r24
    4c8a:	2a 95       	dec	r18
    4c8c:	ea f7       	brpl	.-6      	; 0x4c88 <chip_select+0x1c>
    4c8e:	98 2f       	mov	r25, r24
    4c90:	90 95       	com	r25
    4c92:	93 23       	and	r25, r19
    4c94:	92 a3       	std	Z+34, r25	; 0x22
    4c96:	91 a1       	ldd	r25, Z+33	; 0x21
    4c98:	89 2b       	or	r24, r25
    4c9a:	81 a3       	std	Z+33, r24	; 0x21
    4c9c:	08 95       	ret

00004c9e <chip_deselect>:
    4c9e:	e8 2f       	mov	r30, r24
    4ca0:	e6 95       	lsr	r30
    4ca2:	e6 95       	lsr	r30
    4ca4:	e6 95       	lsr	r30
    4ca6:	93 e0       	ldi	r25, 0x03	; 3
    4ca8:	e9 9f       	mul	r30, r25
    4caa:	f0 01       	movw	r30, r0
    4cac:	11 24       	eor	r1, r1
    4cae:	32 a1       	ldd	r19, Z+34	; 0x22
    4cb0:	28 2f       	mov	r18, r24
    4cb2:	27 70       	andi	r18, 0x07	; 7
    4cb4:	81 e0       	ldi	r24, 0x01	; 1
    4cb6:	90 e0       	ldi	r25, 0x00	; 0
    4cb8:	01 c0       	rjmp	.+2      	; 0x4cbc <chip_deselect+0x1e>
    4cba:	88 0f       	add	r24, r24
    4cbc:	2a 95       	dec	r18
    4cbe:	ea f7       	brpl	.-6      	; 0x4cba <chip_deselect+0x1c>
    4cc0:	93 2f       	mov	r25, r19
    4cc2:	98 2b       	or	r25, r24
    4cc4:	92 a3       	std	Z+34, r25	; 0x22
    4cc6:	91 a1       	ldd	r25, Z+33	; 0x21
    4cc8:	89 2b       	or	r24, r25
    4cca:	81 a3       	std	Z+33, r24	; 0x21
    4ccc:	08 95       	ret

00004cce <chip_select_init>:
    4cce:	e7 cf       	rjmp	.-50     	; 0x4c9e <chip_deselect>
    4cd0:	08 95       	ret

00004cd2 <spi_end>:
    4cd2:	cf 93       	push	r28
    4cd4:	ad b7       	in	r26, 0x3d	; 61
    4cd6:	be b7       	in	r27, 0x3e	; 62
    4cd8:	17 97       	sbiw	r26, 0x07	; 7
    4cda:	0f b6       	in	r0, 0x3f	; 63
    4cdc:	f8 94       	cli
    4cde:	be bf       	out	0x3e, r27	; 62
    4ce0:	0f be       	out	0x3f, r0	; 63
    4ce2:	ad bf       	out	0x3d, r26	; 61
    4ce4:	c8 2f       	mov	r28, r24
    4ce6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_cs_pin>
    4cea:	8c 17       	cp	r24, r28
    4cec:	99 f0       	breq	.+38     	; 0x4d14 <spi_end+0x42>
    4cee:	8f 3f       	cpi	r24, 0xFF	; 255
    4cf0:	89 f0       	breq	.+34     	; 0x4d14 <spi_end+0x42>
    4cf2:	2c 2f       	mov	r18, r28
    4cf4:	30 e0       	ldi	r19, 0x00	; 0
    4cf6:	ed b7       	in	r30, 0x3d	; 61
    4cf8:	fe b7       	in	r31, 0x3e	; 62
    4cfa:	37 83       	std	Z+7, r19	; 0x07
    4cfc:	26 83       	std	Z+6, r18	; 0x06
    4cfe:	90 e0       	ldi	r25, 0x00	; 0
    4d00:	95 83       	std	Z+5, r25	; 0x05
    4d02:	84 83       	std	Z+4, r24	; 0x04
    4d04:	82 ec       	ldi	r24, 0xC2	; 194
    4d06:	91 e0       	ldi	r25, 0x01	; 1
    4d08:	a0 e0       	ldi	r26, 0x00	; 0
    4d0a:	81 83       	std	Z+1, r24	; 0x01
    4d0c:	92 83       	std	Z+2, r25	; 0x02
    4d0e:	a3 83       	std	Z+3, r26	; 0x03
    4d10:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    4d14:	8c 2f       	mov	r24, r28
    4d16:	c3 df       	rcall	.-122    	; 0x4c9e <chip_deselect>
    4d18:	8f ef       	ldi	r24, 0xFF	; 255
    4d1a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_cs_pin>
    4d1e:	ad b7       	in	r26, 0x3d	; 61
    4d20:	be b7       	in	r27, 0x3e	; 62
    4d22:	17 96       	adiw	r26, 0x07	; 7
    4d24:	0f b6       	in	r0, 0x3f	; 63
    4d26:	f8 94       	cli
    4d28:	be bf       	out	0x3e, r27	; 62
    4d2a:	0f be       	out	0x3f, r0	; 63
    4d2c:	ad bf       	out	0x3d, r26	; 61
    4d2e:	cf 91       	pop	r28
    4d30:	08 95       	ret

00004d32 <spi_TX_buffer>:
    4d32:	cd c4       	rjmp	.+2458   	; 0x56ce <SPI0_TX>
    4d34:	08 95       	ret

00004d36 <spi_RX_buffer>:
    4d36:	f5 c4       	rjmp	.+2538   	; 0x5722 <SPI0_RX>
    4d38:	08 95       	ret

00004d3a <spi_TX>:

/// @brief SPI write 1 byte
/// @param[in] data: value to transmit
/// @return  void
void spi_TX(uint8_t data)
{
    4d3a:	a1 e0       	ldi	r26, 0x01	; 1
    4d3c:	b0 e0       	ldi	r27, 0x00	; 0
    4d3e:	e3 ea       	ldi	r30, 0xA3	; 163
    4d40:	f6 e2       	ldi	r31, 0x26	; 38
    4d42:	0c 94 1d e7 	jmp	0x1ce3a	; 0x1ce3a <__prologue_saves__+0x20>
    4d46:	89 83       	std	Y+1, r24	; 0x01
#ifdef ESP8266
    hspi_TX(&data,1);
#endif
#ifdef AVR
    SPI0_TX(&data,1);
    4d48:	61 e0       	ldi	r22, 0x01	; 1
    4d4a:	70 e0       	ldi	r23, 0x00	; 0
    4d4c:	ce 01       	movw	r24, r28
    4d4e:	01 96       	adiw	r24, 0x01	; 1
    4d50:	be d4       	rcall	.+2428   	; 0x56ce <SPI0_TX>
#endif
}
    4d52:	21 96       	adiw	r28, 0x01	; 1
    4d54:	e2 e0       	ldi	r30, 0x02	; 2
    4d56:	0c 94 39 e7 	jmp	0x1ce72	; 0x1ce72 <__epilogue_restores__+0x20>

00004d5a <spi_init>:
 @return void
*/
uint8_t _cs_pin = 0xff;
uint32_t _spi_clock = -1L;
void spi_init(uint32_t clock, int pin)
{
    4d5a:	cf 92       	push	r12
    4d5c:	df 92       	push	r13
    4d5e:	ef 92       	push	r14
    4d60:	ff 92       	push	r15
    4d62:	6b 01       	movw	r12, r22
    4d64:	7c 01       	movw	r14, r24
    4d66:	84 2f       	mov	r24, r20
    spi_waitReady();
    chip_deselect(pin);
    4d68:	9a df       	rcall	.-204    	; 0x4c9e <chip_deselect>
    _cs_pin = 0xff;
    4d6a:	8f ef       	ldi	r24, 0xFF	; 255
    4d6c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_cs_pin>

#ifdef AVR
    SPI0_Init(clock);                             // Initialize the SPI bus - does nothing if clock unchanged
    4d70:	c7 01       	movw	r24, r14
    4d72:	b6 01       	movw	r22, r12
    4d74:	7f d4       	rcall	.+2302   	; 0x5674 <SPI0_Init>
    SPI0_Mode(0);                                 // Set the clocking mode, etc
    4d76:	80 e0       	ldi	r24, 0x00	; 0
    4d78:	90 e0       	ldi	r25, 0x00	; 0
#endif
#ifdef ESP8266
    hspi_init(clock,0);                           // Initialize the SPI bus - does nothing if clock unchanged
#endif
    spi_TX(0xff);
    4d7a:	3c d4       	rcall	.+2168   	; 0x55f4 <SPI0_Mode>
    4d7c:	8f ef       	ldi	r24, 0xFF	; 255
    4d7e:	dd df       	rcall	.-70     	; 0x4d3a <spi_TX>
    _spi_clock = clock;
    4d80:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <_spi_clock>
    4d84:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <_spi_clock+0x1>
    4d88:	e0 92 08 01 	sts	0x0108, r14	; 0x800108 <_spi_clock+0x2>
    4d8c:	f0 92 09 01 	sts	0x0109, r15	; 0x800109 <_spi_clock+0x3>
// waits for any prior transactions to complete before updating
    spi_waitReady();
}
    4d90:	ff 90       	pop	r15
    4d92:	ef 90       	pop	r14
    4d94:	df 90       	pop	r13
    4d96:	cf 90       	pop	r12
    4d98:	08 95       	ret

00004d9a <spi_begin>:
 @param[in] clock: SPI clock rate
 @param[in] pin: GPIO CS pin
 @return void
*/
void spi_begin(uint32_t clock, int pin)
{
    4d9a:	cf 92       	push	r12
    4d9c:	df 92       	push	r13
    4d9e:	ef 92       	push	r14
    4da0:	ff 92       	push	r15
    4da2:	cf 93       	push	r28
    4da4:	df 93       	push	r29
    4da6:	ad b7       	in	r26, 0x3d	; 61
    4da8:	be b7       	in	r27, 0x3e	; 62
    4daa:	17 97       	sbiw	r26, 0x07	; 7
    4dac:	0f b6       	in	r0, 0x3f	; 63
    4dae:	f8 94       	cli
    4db0:	be bf       	out	0x3e, r27	; 62
    4db2:	0f be       	out	0x3f, r0	; 63
    4db4:	ad bf       	out	0x3d, r26	; 61
    4db6:	6b 01       	movw	r12, r22
    4db8:	7c 01       	movw	r14, r24
    4dba:	ea 01       	movw	r28, r20
// FIXME allow nesting by using an array of clock values for each pin

//@brief if there is a prior chip select in progress flag an error
    if(_cs_pin != 0xff)
    4dbc:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_cs_pin>
    4dc0:	8f 3f       	cpi	r24, 0xFF	; 255
    4dc2:	79 f0       	breq	.+30     	; 0x4de2 <spi_begin+0x48>
    {
// This implies a bug!
        printf("cs_enable was: %d, want: %d\n", 0xff & _cs_pin, pin);
    4dc4:	ed b7       	in	r30, 0x3d	; 61
    4dc6:	fe b7       	in	r31, 0x3e	; 62
    4dc8:	46 83       	std	Z+6, r20	; 0x06
    4dca:	d7 83       	std	Z+7, r29	; 0x07
    4dcc:	90 e0       	ldi	r25, 0x00	; 0
    4dce:	95 83       	std	Z+5, r25	; 0x05
    4dd0:	84 83       	std	Z+4, r24	; 0x04
    4dd2:	80 ee       	ldi	r24, 0xE0	; 224
    4dd4:	91 e0       	ldi	r25, 0x01	; 1
    4dd6:	a0 e0       	ldi	r26, 0x00	; 0
    4dd8:	81 83       	std	Z+1, r24	; 0x01
    4dda:	92 83       	std	Z+2, r25	; 0x02
    4ddc:	a3 83       	std	Z+3, r26	; 0x03
    4dde:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
// waits for any prior transactions to complete before updating
    spi_waitReady();

///@brief initialize pin in case it has not been done yet
///@ we cache the clock frequency seeting for multiple device support
    if(_spi_clock != clock)
    4de2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_spi_clock>
    4de6:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_spi_clock+0x1>
    4dea:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_spi_clock+0x2>
    4dee:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_spi_clock+0x3>
    4df2:	8c 15       	cp	r24, r12
    4df4:	9d 05       	cpc	r25, r13
    4df6:	ae 05       	cpc	r26, r14
    4df8:	bf 05       	cpc	r27, r15
    4dfa:	21 f0       	breq	.+8      	; 0x4e04 <spi_begin+0x6a>
    {
        spi_init(clock,pin);
    4dfc:	ae 01       	movw	r20, r28
    4dfe:	c7 01       	movw	r24, r14
    4e00:	b6 01       	movw	r22, r12
    4e02:	ab df       	rcall	.-170    	; 0x4d5a <spi_init>
    }

    chip_select(pin);
    4e04:	8c 2f       	mov	r24, r28
    4e06:	32 df       	rcall	.-412    	; 0x4c6c <chip_select>
    _cs_pin = pin;
    4e08:	c0 93 0a 01 	sts	0x010A, r28	; 0x80010a <_cs_pin>
}
    4e0c:	ad b7       	in	r26, 0x3d	; 61
    4e0e:	be b7       	in	r27, 0x3e	; 62
    4e10:	17 96       	adiw	r26, 0x07	; 7
    4e12:	0f b6       	in	r0, 0x3f	; 63
    4e14:	f8 94       	cli
    4e16:	be bf       	out	0x3e, r27	; 62
    4e18:	0f be       	out	0x3f, r0	; 63
    4e1a:	ad bf       	out	0x3d, r26	; 61
    4e1c:	df 91       	pop	r29
    4e1e:	cf 91       	pop	r28
    4e20:	ff 90       	pop	r15
    4e22:	ef 90       	pop	r14
    4e24:	df 90       	pop	r13
    4e26:	cf 90       	pop	r12
    4e28:	08 95       	ret

00004e2a <spi_TXRX>:

/// @brief SPI read and write 1 byte
/// @param[in] data: value to transmit
/// @return  uint8_t value read
uint8_t spi_TXRX(uint8_t data)
{
    4e2a:	a1 e0       	ldi	r26, 0x01	; 1
    4e2c:	b0 e0       	ldi	r27, 0x00	; 0
    4e2e:	eb e1       	ldi	r30, 0x1B	; 27
    4e30:	f7 e2       	ldi	r31, 0x27	; 39
    4e32:	0c 94 1d e7 	jmp	0x1ce3a	; 0x1ce3a <__prologue_saves__+0x20>
    4e36:	89 83       	std	Y+1, r24	; 0x01
#ifdef ESP8266
    hspi_TXRX(&data,1);
#endif
#ifdef AVR
    SPI0_TXRX(&data,1);
    4e38:	61 e0       	ldi	r22, 0x01	; 1
    4e3a:	70 e0       	ldi	r23, 0x00	; 0
    4e3c:	ce 01       	movw	r24, r28
    4e3e:	01 96       	adiw	r24, 0x01	; 1
    4e40:	5a d4       	rcall	.+2228   	; 0x56f6 <SPI0_TXRX>
#endif
    return(data);
}
    4e42:	89 81       	ldd	r24, Y+1	; 0x01
    4e44:	21 96       	adiw	r28, 0x01	; 1
    4e46:	e2 e0       	ldi	r30, 0x02	; 2
    4e48:	0c 94 39 e7 	jmp	0x1ce72	; 0x1ce72 <__epilogue_restores__+0x20>

00004e4c <set_error>:
static uint8_t error_flag = 0;
/// @brief Set error condition
/// @return  void
void set_error(uint8_t error)
{
	error_flag = error;
    4e4c:	80 93 4e 17 	sts	0x174E, r24	; 0x80174e <__data_end>
    GPIO_PIN_HI(LED2);
    4e50:	2c 9a       	sbi	0x05, 4	; 5
    4e52:	24 9a       	sbi	0x04, 4	; 4
    4e54:	08 95       	ret

00004e56 <clear_error>:

/// @brief Set error condition
/// @return  void
void clear_error()
{
	error_flag = 0;
    4e56:	10 92 4e 17 	sts	0x174E, r1	; 0x80174e <__data_end>
    GPIO_PIN_LOW(LED2);
    4e5a:	2c 98       	cbi	0x05, 4	; 5
    4e5c:	24 9a       	sbi	0x04, 4	; 4
    4e5e:	08 95       	ret

00004e60 <freeRam>:
/// - avr-libc dependent code.
///
/// @return free memory in bytes.
/// @see malloc().
uint16_t freeRam ()
{
    4e60:	a2 e0       	ldi	r26, 0x02	; 2
    4e62:	b0 e0       	ldi	r27, 0x00	; 0
    4e64:	e6 e3       	ldi	r30, 0x36	; 54
    4e66:	f7 e2       	ldi	r31, 0x27	; 39
    4e68:	0c 94 1d e7 	jmp	0x1ce3a	; 0x1ce3a <__prologue_saves__+0x20>
    extern void * __heap_start;
    extern void * __brkval;
    int ret;
    uint16_t top;

    if(__brkval)
    4e6c:	20 91 2c 20 	lds	r18, 0x202C	; 0x80202c <__brkval>
    4e70:	30 91 2d 20 	lds	r19, 0x202D	; 0x80202d <__brkval+0x1>
    4e74:	21 15       	cp	r18, r1
    4e76:	31 05       	cpc	r19, r1
    4e78:	11 f4       	brne	.+4      	; 0x4e7e <freeRam+0x1e>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    4e7a:	20 e3       	ldi	r18, 0x30	; 48
    4e7c:	30 e2       	ldi	r19, 0x20	; 32

    ret = (uint16_t) &v - top;
    return ( ret );
}
    4e7e:	ce 01       	movw	r24, r28
    4e80:	01 96       	adiw	r24, 0x01	; 1
    4e82:	82 1b       	sub	r24, r18
    4e84:	93 0b       	sbc	r25, r19
    4e86:	22 96       	adiw	r28, 0x02	; 2
    4e88:	e2 e0       	ldi	r30, 0x02	; 2
    4e8a:	0c 94 39 e7 	jmp	0x1ce72	; 0x1ce72 <__epilogue_restores__+0x20>

00004e8e <PrintFree>:
/// - avr-libc dependent code.
/// - Stack, BSS, Data, Heap, Malloc.
///
/// @return  void
void PrintFree()
{
    4e8e:	a9 e0       	ldi	r26, 0x09	; 9
    4e90:	b0 e0       	ldi	r27, 0x00	; 0
    4e92:	ed e4       	ldi	r30, 0x4D	; 77
    4e94:	f7 e2       	ldi	r31, 0x27	; 39
    4e96:	0c 94 1d e7 	jmp	0x1ce3a	; 0x1ce3a <__prologue_saves__+0x20>
    extern void * __data_start;
    extern void * __data_end;
    extern void * __stack;
    uint16_t ram;

    ram = freeRam();
    4e9a:	e2 df       	rcall	.-60     	; 0x4e60 <freeRam>
    4e9c:	99 87       	std	Y+9, r25	; 0x09
    4e9e:	88 87       	std	Y+8, r24	; 0x08

    printf("Free Ram:%u\n", ram);
    4ea0:	ed b7       	in	r30, 0x3d	; 61
    4ea2:	fe b7       	in	r31, 0x3e	; 62
    4ea4:	95 83       	std	Z+5, r25	; 0x05
    4ea6:	84 83       	std	Z+4, r24	; 0x04
    4ea8:	87 e0       	ldi	r24, 0x07	; 7
    4eaa:	93 e0       	ldi	r25, 0x03	; 3
    4eac:	a0 e0       	ldi	r26, 0x00	; 0
    4eae:	81 83       	std	Z+1, r24	; 0x01
    4eb0:	92 83       	std	Z+2, r25	; 0x02
    4eb2:	a3 83       	std	Z+3, r26	; 0x03
    4eb4:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    printf("  Stack Top:   %u\n", (unsigned int) &__stack);
    4eb8:	8f ef       	ldi	r24, 0xFF	; 255
    4eba:	90 e4       	ldi	r25, 0x40	; 64
    4ebc:	ed b7       	in	r30, 0x3d	; 61
    4ebe:	fe b7       	in	r31, 0x3e	; 62
    4ec0:	95 83       	std	Z+5, r25	; 0x05
    4ec2:	84 83       	std	Z+4, r24	; 0x04
    4ec4:	84 ef       	ldi	r24, 0xF4	; 244
    4ec6:	92 e0       	ldi	r25, 0x02	; 2
    4ec8:	a0 e0       	ldi	r26, 0x00	; 0
    4eca:	81 83       	std	Z+1, r24	; 0x01
    4ecc:	92 83       	std	Z+2, r25	; 0x02
    4ece:	a3 83       	std	Z+3, r26	; 0x03
    4ed0:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    printf("  Stack Free:  %u\n", (unsigned int) &ram - 0);
    4ed4:	ce 01       	movw	r24, r28
    4ed6:	08 96       	adiw	r24, 0x08	; 8
    4ed8:	ed b7       	in	r30, 0x3d	; 61
    4eda:	fe b7       	in	r31, 0x3e	; 62
    4edc:	95 83       	std	Z+5, r25	; 0x05
    4ede:	84 83       	std	Z+4, r24	; 0x04
    4ee0:	81 ee       	ldi	r24, 0xE1	; 225
    4ee2:	92 e0       	ldi	r25, 0x02	; 2
    4ee4:	a0 e0       	ldi	r26, 0x00	; 0
    4ee6:	81 83       	std	Z+1, r24	; 0x01
    4ee8:	92 83       	std	Z+2, r25	; 0x02
    4eea:	a3 83       	std	Z+3, r26	; 0x03
    4eec:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>

    printf("  BSS   start: %5u, end: %5u\n",
    4ef0:	80 e3       	ldi	r24, 0x30	; 48
    4ef2:	90 e2       	ldi	r25, 0x20	; 32
    4ef4:	ed b7       	in	r30, 0x3d	; 61
    4ef6:	fe b7       	in	r31, 0x3e	; 62
    4ef8:	97 83       	std	Z+7, r25	; 0x07
    4efa:	86 83       	std	Z+6, r24	; 0x06
    4efc:	8e e4       	ldi	r24, 0x4E	; 78
    4efe:	97 e1       	ldi	r25, 0x17	; 23
    4f00:	95 83       	std	Z+5, r25	; 0x05
    4f02:	84 83       	std	Z+4, r24	; 0x04
    4f04:	83 ec       	ldi	r24, 0xC3	; 195
    4f06:	92 e0       	ldi	r25, 0x02	; 2
    4f08:	a0 e0       	ldi	r26, 0x00	; 0
    4f0a:	81 83       	std	Z+1, r24	; 0x01
    4f0c:	92 83       	std	Z+2, r25	; 0x02
    4f0e:	a3 83       	std	Z+3, r26	; 0x03
    4f10:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
        (unsigned int)&__bss_start, (unsigned int)&__bss_end);

    printf("  Data  start: %5u, end: %5u\n",
    4f14:	8e e4       	ldi	r24, 0x4E	; 78
    4f16:	97 e1       	ldi	r25, 0x17	; 23
    4f18:	ed b7       	in	r30, 0x3d	; 61
    4f1a:	fe b7       	in	r31, 0x3e	; 62
    4f1c:	97 83       	std	Z+7, r25	; 0x07
    4f1e:	86 83       	std	Z+6, r24	; 0x06
    4f20:	80 e0       	ldi	r24, 0x00	; 0
    4f22:	91 e0       	ldi	r25, 0x01	; 1
    4f24:	95 83       	std	Z+5, r25	; 0x05
    4f26:	84 83       	std	Z+4, r24	; 0x04
    4f28:	85 ea       	ldi	r24, 0xA5	; 165
    4f2a:	92 e0       	ldi	r25, 0x02	; 2
    4f2c:	a0 e0       	ldi	r26, 0x00	; 0
    4f2e:	81 83       	std	Z+1, r24	; 0x01
    4f30:	92 83       	std	Z+2, r25	; 0x02
    4f32:	a3 83       	std	Z+3, r26	; 0x03
    4f34:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
        (unsigned int)&__data_start, (unsigned int)&__data_end);

    printf("  Heap: start: %5u, end: %5u\n",
    4f38:	80 e0       	ldi	r24, 0x00	; 0
    4f3a:	90 e0       	ldi	r25, 0x00	; 0
    4f3c:	ed b7       	in	r30, 0x3d	; 61
    4f3e:	fe b7       	in	r31, 0x3e	; 62
    4f40:	97 83       	std	Z+7, r25	; 0x07
    4f42:	86 83       	std	Z+6, r24	; 0x06
    4f44:	80 e3       	ldi	r24, 0x30	; 48
    4f46:	90 e2       	ldi	r25, 0x20	; 32
    4f48:	95 83       	std	Z+5, r25	; 0x05
    4f4a:	84 83       	std	Z+4, r24	; 0x04
    4f4c:	87 e8       	ldi	r24, 0x87	; 135
    4f4e:	92 e0       	ldi	r25, 0x02	; 2
    4f50:	a0 e0       	ldi	r26, 0x00	; 0
    4f52:	81 83       	std	Z+1, r24	; 0x01
    4f54:	92 83       	std	Z+2, r25	; 0x02
    4f56:	a3 83       	std	Z+3, r26	; 0x03
    4f58:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
        (unsigned int)&__heap_start, (unsigned int)&__heap_end);

    printf("  Malloc start %5u  end: %5u\n",
    4f5c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    4f60:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    4f64:	ed b7       	in	r30, 0x3d	; 61
    4f66:	fe b7       	in	r31, 0x3e	; 62
    4f68:	97 83       	std	Z+7, r25	; 0x07
    4f6a:	86 83       	std	Z+6, r24	; 0x06
    4f6c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__malloc_heap_start>
    4f70:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    4f74:	95 83       	std	Z+5, r25	; 0x05
    4f76:	84 83       	std	Z+4, r24	; 0x04
    4f78:	89 e6       	ldi	r24, 0x69	; 105
    4f7a:	92 e0       	ldi	r25, 0x02	; 2
    4f7c:	a0 e0       	ldi	r26, 0x00	; 0
    4f7e:	81 83       	std	Z+1, r24	; 0x01
    4f80:	92 83       	std	Z+2, r25	; 0x02
    4f82:	a3 83       	std	Z+3, r26	; 0x03
    4f84:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
        (unsigned int)__malloc_heap_start, (unsigned int) __malloc_heap_end );

    printf("  __brkval:    %5u\n", (unsigned int) __brkval);
    4f88:	80 91 2c 20 	lds	r24, 0x202C	; 0x80202c <__brkval>
    4f8c:	90 91 2d 20 	lds	r25, 0x202D	; 0x80202d <__brkval+0x1>
    4f90:	ed b7       	in	r30, 0x3d	; 61
    4f92:	fe b7       	in	r31, 0x3e	; 62
    4f94:	95 83       	std	Z+5, r25	; 0x05
    4f96:	84 83       	std	Z+4, r24	; 0x04
    4f98:	85 e5       	ldi	r24, 0x55	; 85
    4f9a:	92 e0       	ldi	r25, 0x02	; 2
    4f9c:	a0 e0       	ldi	r26, 0x00	; 0
    4f9e:	81 83       	std	Z+1, r24	; 0x01
    4fa0:	92 83       	std	Z+2, r25	; 0x02
    4fa2:	a3 83       	std	Z+3, r26	; 0x03
    4fa4:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>

}
    4fa8:	29 96       	adiw	r28, 0x09	; 9
    4faa:	e2 e0       	ldi	r30, 0x02	; 2
    4fac:	0c 94 39 e7 	jmp	0x1ce72	; 0x1ce72 <__epilogue_restores__+0x20>

00004fb0 <safecalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
///
/// @return  void.
void *safecalloc(int size, int elements)
{
    4fb0:	ef 92       	push	r14
    4fb2:	ff 92       	push	r15
    4fb4:	0f 93       	push	r16
    4fb6:	1f 93       	push	r17
    4fb8:	cf 93       	push	r28
    4fba:	df 93       	push	r29
    4fbc:	ad b7       	in	r26, 0x3d	; 61
    4fbe:	be b7       	in	r27, 0x3e	; 62
    4fc0:	17 97       	sbiw	r26, 0x07	; 7
    4fc2:	0f b6       	in	r0, 0x3f	; 63
    4fc4:	f8 94       	cli
    4fc6:	be bf       	out	0x3e, r27	; 62
    4fc8:	0f be       	out	0x3f, r0	; 63
    4fca:	ad bf       	out	0x3d, r26	; 61
    4fcc:	8c 01       	movw	r16, r24
    4fce:	7b 01       	movw	r14, r22
    void *p = calloc(size, elements);
    4fd0:	0e 94 ca e9 	call	0x1d394	; 0x1d394 <calloc>
    4fd4:	ec 01       	movw	r28, r24
    if(!p)
    4fd6:	89 2b       	or	r24, r25
    4fd8:	71 f4       	brne	.+28     	; 0x4ff6 <safecalloc+0x46>
    {
        printf("safecalloc(%d,%d) failed!\n", size, elements);
    4fda:	ed b7       	in	r30, 0x3d	; 61
    4fdc:	fe b7       	in	r31, 0x3e	; 62
    4fde:	f7 82       	std	Z+7, r15	; 0x07
    4fe0:	e6 82       	std	Z+6, r14	; 0x06
    4fe2:	15 83       	std	Z+5, r17	; 0x05
    4fe4:	04 83       	std	Z+4, r16	; 0x04
    4fe6:	8a e3       	ldi	r24, 0x3A	; 58
    4fe8:	92 e0       	ldi	r25, 0x02	; 2
    4fea:	a0 e0       	ldi	r26, 0x00	; 0
    4fec:	81 83       	std	Z+1, r24	; 0x01
    4fee:	92 83       	std	Z+2, r25	; 0x02
    4ff0:	a3 83       	std	Z+3, r26	; 0x03
    4ff2:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    }
    return(p);
}
    4ff6:	ce 01       	movw	r24, r28
    4ff8:	cd b7       	in	r28, 0x3d	; 61
    4ffa:	de b7       	in	r29, 0x3e	; 62
    4ffc:	27 96       	adiw	r28, 0x07	; 7
    4ffe:	e6 e0       	ldi	r30, 0x06	; 6
    5000:	0c 94 35 e7 	jmp	0x1ce6a	; 0x1ce6a <__epilogue_restores__+0x18>

00005004 <safemalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
/// @param[in] size:  size
/// @return  void.
void *safemalloc(size_t size)
{
    5004:	0f 93       	push	r16
    5006:	1f 93       	push	r17
    5008:	cf 93       	push	r28
    500a:	df 93       	push	r29
    500c:	00 d0       	rcall	.+0      	; 0x500e <safemalloc+0xa>
    500e:	00 d0       	rcall	.+0      	; 0x5010 <safemalloc+0xc>
    5010:	1f 92       	push	r1
    5012:	8c 01       	movw	r16, r24
    void *p = calloc(size, 1);
    5014:	61 e0       	ldi	r22, 0x01	; 1
    5016:	70 e0       	ldi	r23, 0x00	; 0
    5018:	0e 94 ca e9 	call	0x1d394	; 0x1d394 <calloc>
    501c:	ec 01       	movw	r28, r24
    if(!p)
    501e:	89 2b       	or	r24, r25
    5020:	61 f4       	brne	.+24     	; 0x503a <safemalloc+0x36>
    {
        printf("safemalloc(%d) failed!\n", size);
    5022:	ed b7       	in	r30, 0x3d	; 61
    5024:	fe b7       	in	r31, 0x3e	; 62
    5026:	15 83       	std	Z+5, r17	; 0x05
    5028:	04 83       	std	Z+4, r16	; 0x04
    502a:	82 e2       	ldi	r24, 0x22	; 34
    502c:	92 e0       	ldi	r25, 0x02	; 2
    502e:	a0 e0       	ldi	r26, 0x00	; 0
    5030:	81 83       	std	Z+1, r24	; 0x01
    5032:	92 83       	std	Z+2, r25	; 0x02
    5034:	a3 83       	std	Z+3, r26	; 0x03
    5036:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    }
    return(p);
}
    503a:	ce 01       	movw	r24, r28
    503c:	cd b7       	in	r28, 0x3d	; 61
    503e:	de b7       	in	r29, 0x3e	; 62
    5040:	25 96       	adiw	r28, 0x05	; 5
    5042:	e4 e0       	ldi	r30, 0x04	; 4
    5044:	0c 94 37 e7 	jmp	0x1ce6e	; 0x1ce6e <__epilogue_restores__+0x1c>

00005048 <safefree>:
///
/// @param[in] p: pointer to free.
///
/// @return  void.
void safefree(void *p)
{
    5048:	ad b7       	in	r26, 0x3d	; 61
    504a:	be b7       	in	r27, 0x3e	; 62
    504c:	17 97       	sbiw	r26, 0x07	; 7
    504e:	0f b6       	in	r0, 0x3f	; 63
    5050:	f8 94       	cli
    5052:	be bf       	out	0x3e, r27	; 62
    5054:	0f be       	out	0x3f, r0	; 63
    5056:	ad bf       	out	0x3d, r26	; 61
    extern void *__brkval;
    extern void * __heap_start;
    extern void * __heap_end;
    uint16_t top;

    if(p == NULL)
    5058:	00 97       	sbiw	r24, 0x00	; 0
    505a:	11 f1       	breq	.+68     	; 0x50a0 <safefree+0x58>
        return;

    if(__brkval)
    505c:	20 91 2c 20 	lds	r18, 0x202C	; 0x80202c <__brkval>
    5060:	30 91 2d 20 	lds	r19, 0x202D	; 0x80202d <__brkval+0x1>
    5064:	21 15       	cp	r18, r1
    5066:	31 05       	cpc	r19, r1
    5068:	11 f4       	brne	.+4      	; 0x506e <safefree+0x26>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    506a:	20 e3       	ldi	r18, 0x30	; 48
    506c:	30 e2       	ldi	r19, 0x20	; 32

    if( ((uint16_t) p >= (uint16_t) &__heap_start) &&
    506e:	40 e2       	ldi	r20, 0x20	; 32
    5070:	80 33       	cpi	r24, 0x30	; 48
    5072:	94 07       	cpc	r25, r20
    5074:	30 f0       	brcs	.+12     	; 0x5082 <safefree+0x3a>
    5076:	28 17       	cp	r18, r24
    5078:	39 07       	cpc	r19, r25
    507a:	18 f0       	brcs	.+6      	; 0x5082 <safefree+0x3a>
        ((uint16_t) p <= top) )
    {
        free(p);
    507c:	0e 94 7c ea 	call	0x1d4f8	; 0x1d4f8 <free>
        return;
    5080:	0f c0       	rjmp	.+30     	; 0x50a0 <safefree+0x58>
    }
    printf("safefree: FREE ERROR (%u), top:(%u)\n", (uint16_t) p, (uint16_t) top);
    5082:	ed b7       	in	r30, 0x3d	; 61
    5084:	fe b7       	in	r31, 0x3e	; 62
    5086:	37 83       	std	Z+7, r19	; 0x07
    5088:	26 83       	std	Z+6, r18	; 0x06
    508a:	95 83       	std	Z+5, r25	; 0x05
    508c:	84 83       	std	Z+4, r24	; 0x04
    508e:	8d ef       	ldi	r24, 0xFD	; 253
    5090:	91 e0       	ldi	r25, 0x01	; 1
    5092:	a0 e0       	ldi	r26, 0x00	; 0
    5094:	81 83       	std	Z+1, r24	; 0x01
    5096:	92 83       	std	Z+2, r25	; 0x02
    5098:	a3 83       	std	Z+3, r26	; 0x03
    509a:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    PrintFree();
    509e:	f7 de       	rcall	.-530    	; 0x4e8e <PrintFree>
}
    50a0:	ad b7       	in	r26, 0x3d	; 61
    50a2:	be b7       	in	r27, 0x3e	; 62
    50a4:	17 96       	adiw	r26, 0x07	; 7
    50a6:	0f b6       	in	r0, 0x3f	; 63
    50a8:	f8 94       	cli
    50aa:	be bf       	out	0x3e, r27	; 62
    50ac:	0f be       	out	0x3f, r0	; 63
    50ae:	ad bf       	out	0x3d, r26	; 61
    50b0:	08 95       	ret

000050b2 <delayus>:
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayus(uint32_t us)
{

    while (us >= 100U)
    50b2:	64 36       	cpi	r22, 0x64	; 100
    50b4:	71 05       	cpc	r23, r1
    50b6:	81 05       	cpc	r24, r1
    50b8:	91 05       	cpc	r25, r1
    50ba:	58 f0       	brcs	.+22     	; 0x50d2 <delayus+0x20>
    {
        us -= 100U;
    50bc:	64 56       	subi	r22, 0x64	; 100
    50be:	71 09       	sbc	r23, r1
    50c0:	81 09       	sbc	r24, r1
    50c2:	91 09       	sbc	r25, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    50c4:	e3 ef       	ldi	r30, 0xF3	; 243
    50c6:	f1 e0       	ldi	r31, 0x01	; 1
    50c8:	31 97       	sbiw	r30, 0x01	; 1
    50ca:	f1 f7       	brne	.-4      	; 0x50c8 <delayus+0x16>
    50cc:	00 c0       	rjmp	.+0      	; 0x50ce <delayus+0x1c>
    50ce:	00 00       	nop
    50d0:	f0 cf       	rjmp	.-32     	; 0x50b2 <delayus>
        _delay_us(100);
    }
    while (us >= 10U)
    50d2:	6a 30       	cpi	r22, 0x0A	; 10
    50d4:	71 05       	cpc	r23, r1
    50d6:	81 05       	cpc	r24, r1
    50d8:	91 05       	cpc	r25, r1
    50da:	48 f0       	brcs	.+18     	; 0x50ee <delayus+0x3c>
    {
        us -= 10U;
    50dc:	6a 50       	subi	r22, 0x0A	; 10
    50de:	71 09       	sbc	r23, r1
    50e0:	81 09       	sbc	r24, r1
    50e2:	91 09       	sbc	r25, r1
    50e4:	f2 e4       	ldi	r31, 0x42	; 66
    50e6:	fa 95       	dec	r31
    50e8:	f1 f7       	brne	.-4      	; 0x50e6 <delayus+0x34>
    50ea:	00 c0       	rjmp	.+0      	; 0x50ec <delayus+0x3a>
    50ec:	f2 cf       	rjmp	.-28     	; 0x50d2 <delayus+0x20>
        _delay_us(10);
    }
    while (us != 0U)
    50ee:	61 15       	cp	r22, r1
    50f0:	71 05       	cpc	r23, r1
    50f2:	81 05       	cpc	r24, r1
    50f4:	91 05       	cpc	r25, r1
    50f6:	49 f0       	breq	.+18     	; 0x510a <delayus+0x58>
    {
        --us;
    50f8:	61 50       	subi	r22, 0x01	; 1
    50fa:	71 09       	sbc	r23, r1
    50fc:	81 09       	sbc	r24, r1
    50fe:	91 09       	sbc	r25, r1
    5100:	26 e0       	ldi	r18, 0x06	; 6
    5102:	2a 95       	dec	r18
    5104:	f1 f7       	brne	.-4      	; 0x5102 <delayus+0x50>
    5106:	00 c0       	rjmp	.+0      	; 0x5108 <delayus+0x56>
    5108:	f2 cf       	rjmp	.-28     	; 0x50ee <delayus+0x3c>
        _delay_us(1);
    }
}
    510a:	08 95       	ret

0000510c <delayms>:
/// _delay_us() has limited range - this extends it.
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayms(uint32_t ms)
{
    while (ms--)
    510c:	61 15       	cp	r22, r1
    510e:	71 05       	cpc	r23, r1
    5110:	81 05       	cpc	r24, r1
    5112:	91 05       	cpc	r25, r1
    5114:	09 f4       	brne	.+2      	; 0x5118 <delayms+0xc>
    5116:	41 c0       	rjmp	.+130    	; 0x519a <delayms+0x8e>
    5118:	e3 ef       	ldi	r30, 0xF3	; 243
    511a:	f1 e0       	ldi	r31, 0x01	; 1
    511c:	31 97       	sbiw	r30, 0x01	; 1
    511e:	f1 f7       	brne	.-4      	; 0x511c <delayms+0x10>
    5120:	00 c0       	rjmp	.+0      	; 0x5122 <delayms+0x16>
    5122:	00 00       	nop
    5124:	e3 ef       	ldi	r30, 0xF3	; 243
    5126:	f1 e0       	ldi	r31, 0x01	; 1
    5128:	31 97       	sbiw	r30, 0x01	; 1
    512a:	f1 f7       	brne	.-4      	; 0x5128 <delayms+0x1c>
    512c:	00 c0       	rjmp	.+0      	; 0x512e <delayms+0x22>
    512e:	00 00       	nop
    5130:	e3 ef       	ldi	r30, 0xF3	; 243
    5132:	f1 e0       	ldi	r31, 0x01	; 1
    5134:	31 97       	sbiw	r30, 0x01	; 1
    5136:	f1 f7       	brne	.-4      	; 0x5134 <delayms+0x28>
    5138:	00 c0       	rjmp	.+0      	; 0x513a <delayms+0x2e>
    513a:	00 00       	nop
    513c:	e3 ef       	ldi	r30, 0xF3	; 243
    513e:	f1 e0       	ldi	r31, 0x01	; 1
    5140:	31 97       	sbiw	r30, 0x01	; 1
    5142:	f1 f7       	brne	.-4      	; 0x5140 <delayms+0x34>
    5144:	00 c0       	rjmp	.+0      	; 0x5146 <delayms+0x3a>
    5146:	00 00       	nop
    5148:	e3 ef       	ldi	r30, 0xF3	; 243
    514a:	f1 e0       	ldi	r31, 0x01	; 1
    514c:	31 97       	sbiw	r30, 0x01	; 1
    514e:	f1 f7       	brne	.-4      	; 0x514c <delayms+0x40>
    5150:	00 c0       	rjmp	.+0      	; 0x5152 <delayms+0x46>
    5152:	00 00       	nop
    5154:	e3 ef       	ldi	r30, 0xF3	; 243
    5156:	f1 e0       	ldi	r31, 0x01	; 1
    5158:	31 97       	sbiw	r30, 0x01	; 1
    515a:	f1 f7       	brne	.-4      	; 0x5158 <delayms+0x4c>
    515c:	00 c0       	rjmp	.+0      	; 0x515e <delayms+0x52>
    515e:	00 00       	nop
    5160:	e3 ef       	ldi	r30, 0xF3	; 243
    5162:	f1 e0       	ldi	r31, 0x01	; 1
    5164:	31 97       	sbiw	r30, 0x01	; 1
    5166:	f1 f7       	brne	.-4      	; 0x5164 <delayms+0x58>
    5168:	00 c0       	rjmp	.+0      	; 0x516a <delayms+0x5e>
    516a:	00 00       	nop
    516c:	e3 ef       	ldi	r30, 0xF3	; 243
    516e:	f1 e0       	ldi	r31, 0x01	; 1
    5170:	31 97       	sbiw	r30, 0x01	; 1
    5172:	f1 f7       	brne	.-4      	; 0x5170 <delayms+0x64>
    5174:	00 c0       	rjmp	.+0      	; 0x5176 <delayms+0x6a>
    5176:	00 00       	nop
    5178:	e3 ef       	ldi	r30, 0xF3	; 243
    517a:	f1 e0       	ldi	r31, 0x01	; 1
    517c:	31 97       	sbiw	r30, 0x01	; 1
    517e:	f1 f7       	brne	.-4      	; 0x517c <delayms+0x70>
    5180:	00 c0       	rjmp	.+0      	; 0x5182 <delayms+0x76>
    5182:	00 00       	nop
    5184:	e3 ef       	ldi	r30, 0xF3	; 243
    5186:	f1 e0       	ldi	r31, 0x01	; 1
    5188:	31 97       	sbiw	r30, 0x01	; 1
    518a:	f1 f7       	brne	.-4      	; 0x5188 <delayms+0x7c>
    518c:	00 c0       	rjmp	.+0      	; 0x518e <delayms+0x82>
    518e:	00 00       	nop
    5190:	61 50       	subi	r22, 0x01	; 1
    5192:	71 09       	sbc	r23, r1
    5194:	81 09       	sbc	r24, r1
    5196:	91 09       	sbc	r25, r1
    5198:	b9 cf       	rjmp	.-142    	; 0x510c <delayms>
        _delay_us(100);                           // 700
        _delay_us(100);                           // 800
        _delay_us(100);                           // 900
        _delay_us(100);                           //1000
    }
}
    519a:	08 95       	ret

0000519c <uart_rx_flush>:

    cli();
    c = uarts[uart].rx_buf[uarts[uart].rx_tail];
    sei();
    return (c & 0xff);
}
    519c:	81 11       	cpse	r24, r1
    519e:	0e c0       	rjmp	.+28     	; 0x51bc <uart_rx_flush+0x20>
    51a0:	f8 94       	cli
    51a2:	10 92 f3 19 	sts	0x19F3, r1	; 0x8019f3 <uarts+0x4>
    51a6:	10 92 f2 19 	sts	0x19F2, r1	; 0x8019f2 <uarts+0x3>
    51aa:	10 92 ef 19 	sts	0x19EF, r1	; 0x8019ef <uarts>
    51ae:	10 92 f0 19 	sts	0x19F0, r1	; 0x8019f0 <uarts+0x1>
    51b2:	10 92 f1 19 	sts	0x19F1, r1	; 0x8019f1 <uarts+0x2>
    51b6:	10 92 f4 19 	sts	0x19F4, r1	; 0x8019f4 <uarts+0x5>
    51ba:	78 94       	sei
    51bc:	08 95       	ret

000051be <uart_ubr>:
    51be:	4f 92       	push	r4
    51c0:	5f 92       	push	r5
    51c2:	6f 92       	push	r6
    51c4:	7f 92       	push	r7
    51c6:	8f 92       	push	r8
    51c8:	9f 92       	push	r9
    51ca:	af 92       	push	r10
    51cc:	bf 92       	push	r11
    51ce:	cf 92       	push	r12
    51d0:	df 92       	push	r13
    51d2:	ef 92       	push	r14
    51d4:	ff 92       	push	r15
    51d6:	cf 93       	push	r28
    51d8:	df 93       	push	r29
    51da:	5a 01       	movw	r10, r20
    51dc:	e9 01       	movw	r28, r18
    51de:	0e 94 68 e8 	call	0x1d0d0	; 0x1d0d0 <__floatunsisf>
    51e2:	2b 01       	movw	r4, r22
    51e4:	3c 01       	movw	r6, r24
    51e6:	20 e0       	ldi	r18, 0x00	; 0
    51e8:	30 e0       	ldi	r19, 0x00	; 0
    51ea:	40 e0       	ldi	r20, 0x00	; 0
    51ec:	51 e4       	ldi	r21, 0x41	; 65
    51ee:	0e 94 1e e9 	call	0x1d23c	; 0x1d23c <__mulsf3>
    51f2:	9b 01       	movw	r18, r22
    51f4:	ac 01       	movw	r20, r24
    51f6:	60 e8       	ldi	r22, 0x80	; 128
    51f8:	76 e9       	ldi	r23, 0x96	; 150
    51fa:	88 e9       	ldi	r24, 0x98	; 152
    51fc:	9b e4       	ldi	r25, 0x4B	; 75
    51fe:	0e 94 cf e7 	call	0x1cf9e	; 0x1cf9e <__divsf3>
    5202:	20 e0       	ldi	r18, 0x00	; 0
    5204:	30 e0       	ldi	r19, 0x00	; 0
    5206:	40 e8       	ldi	r20, 0x80	; 128
    5208:	5f e3       	ldi	r21, 0x3F	; 63
    520a:	0e 94 66 e7 	call	0x1cecc	; 0x1cecc <__subsf3>
    520e:	0e 94 81 e9 	call	0x1d302	; 0x1d302 <round>
    5212:	0e 94 3c e8 	call	0x1d078	; 0x1d078 <__fixunssfsi>
    5216:	6b 01       	movw	r12, r22
    5218:	7c 01       	movw	r14, r24
    521a:	c1 14       	cp	r12, r1
    521c:	80 e1       	ldi	r24, 0x10	; 16
    521e:	d8 06       	cpc	r13, r24
    5220:	e1 04       	cpc	r14, r1
    5222:	f1 04       	cpc	r15, r1
    5224:	58 f4       	brcc	.+22     	; 0x523c <uart_ubr+0x7e>
    5226:	81 e0       	ldi	r24, 0x01	; 1
    5228:	90 e0       	ldi	r25, 0x00	; 0
    522a:	f5 01       	movw	r30, r10
    522c:	91 83       	std	Z+1, r25	; 0x01
    522e:	80 83       	st	Z, r24
    5230:	81 2c       	mov	r8, r1
    5232:	91 2c       	mov	r9, r1
    5234:	a1 2c       	mov	r10, r1
    5236:	21 e4       	ldi	r18, 0x41	; 65
    5238:	b2 2e       	mov	r11, r18
    523a:	31 c0       	rjmp	.+98     	; 0x529e <uart_ubr+0xe0>
    523c:	f5 01       	movw	r30, r10
    523e:	11 82       	std	Z+1, r1	; 0x01
    5240:	10 82       	st	Z, r1
    5242:	20 e0       	ldi	r18, 0x00	; 0
    5244:	30 e0       	ldi	r19, 0x00	; 0
    5246:	40 e8       	ldi	r20, 0x80	; 128
    5248:	51 e4       	ldi	r21, 0x41	; 65
    524a:	c3 01       	movw	r24, r6
    524c:	b2 01       	movw	r22, r4
    524e:	0e 94 1e e9 	call	0x1d23c	; 0x1d23c <__mulsf3>
    5252:	9b 01       	movw	r18, r22
    5254:	ac 01       	movw	r20, r24
    5256:	60 e8       	ldi	r22, 0x80	; 128
    5258:	76 e9       	ldi	r23, 0x96	; 150
    525a:	88 e9       	ldi	r24, 0x98	; 152
    525c:	9b e4       	ldi	r25, 0x4B	; 75
    525e:	0e 94 cf e7 	call	0x1cf9e	; 0x1cf9e <__divsf3>
    5262:	20 e0       	ldi	r18, 0x00	; 0
    5264:	30 e0       	ldi	r19, 0x00	; 0
    5266:	40 e8       	ldi	r20, 0x80	; 128
    5268:	5f e3       	ldi	r21, 0x3F	; 63
    526a:	0e 94 66 e7 	call	0x1cecc	; 0x1cecc <__subsf3>
    526e:	0e 94 81 e9 	call	0x1d302	; 0x1d302 <round>
    5272:	0e 94 3c e8 	call	0x1d078	; 0x1d078 <__fixunssfsi>
    5276:	6b 01       	movw	r12, r22
    5278:	7c 01       	movw	r14, r24
    527a:	81 2c       	mov	r8, r1
    527c:	91 2c       	mov	r9, r1
    527e:	90 e8       	ldi	r25, 0x80	; 128
    5280:	a9 2e       	mov	r10, r25
    5282:	91 e4       	ldi	r25, 0x41	; 65
    5284:	b9 2e       	mov	r11, r25
    5286:	c1 14       	cp	r12, r1
    5288:	f0 e1       	ldi	r31, 0x10	; 16
    528a:	df 06       	cpc	r13, r31
    528c:	e1 04       	cpc	r14, r1
    528e:	f1 04       	cpc	r15, r1
    5290:	30 f0       	brcs	.+12     	; 0x529e <uart_ubr+0xe0>
    5292:	cc 24       	eor	r12, r12
    5294:	ca 94       	dec	r12
    5296:	8f e0       	ldi	r24, 0x0F	; 15
    5298:	d8 2e       	mov	r13, r24
    529a:	e1 2c       	mov	r14, r1
    529c:	f1 2c       	mov	r15, r1
    529e:	c7 01       	movw	r24, r14
    52a0:	b6 01       	movw	r22, r12
    52a2:	6f 5f       	subi	r22, 0xFF	; 255
    52a4:	7f 4f       	sbci	r23, 0xFF	; 255
    52a6:	8f 4f       	sbci	r24, 0xFF	; 255
    52a8:	9f 4f       	sbci	r25, 0xFF	; 255
    52aa:	0e 94 68 e8 	call	0x1d0d0	; 0x1d0d0 <__floatunsisf>
    52ae:	a5 01       	movw	r20, r10
    52b0:	94 01       	movw	r18, r8
    52b2:	0e 94 1e e9 	call	0x1d23c	; 0x1d23c <__mulsf3>
    52b6:	9b 01       	movw	r18, r22
    52b8:	ac 01       	movw	r20, r24
    52ba:	60 e8       	ldi	r22, 0x80	; 128
    52bc:	76 e9       	ldi	r23, 0x96	; 150
    52be:	88 e9       	ldi	r24, 0x98	; 152
    52c0:	9b e4       	ldi	r25, 0x4B	; 75
    52c2:	0e 94 cf e7 	call	0x1cf9e	; 0x1cf9e <__divsf3>
    52c6:	0e 94 3c e8 	call	0x1d078	; 0x1d078 <__fixunssfsi>
    52ca:	68 83       	st	Y, r22
    52cc:	79 83       	std	Y+1, r23	; 0x01
    52ce:	8a 83       	std	Y+2, r24	; 0x02
    52d0:	9b 83       	std	Y+3, r25	; 0x03
    52d2:	c6 01       	movw	r24, r12
    52d4:	df 91       	pop	r29
    52d6:	cf 91       	pop	r28
    52d8:	ff 90       	pop	r15
    52da:	ef 90       	pop	r14
    52dc:	df 90       	pop	r13
    52de:	cf 90       	pop	r12
    52e0:	bf 90       	pop	r11
    52e2:	af 90       	pop	r10
    52e4:	9f 90       	pop	r9
    52e6:	8f 90       	pop	r8
    52e8:	7f 90       	pop	r7
    52ea:	6f 90       	pop	r6
    52ec:	5f 90       	pop	r5
    52ee:	4f 90       	pop	r4
    52f0:	08 95       	ret

000052f2 <uart_init>:
    52f2:	a6 e0       	ldi	r26, 0x06	; 6
    52f4:	b0 e0       	ldi	r27, 0x00	; 0
    52f6:	ef e7       	ldi	r30, 0x7F	; 127
    52f8:	f9 e2       	ldi	r31, 0x29	; 41
    52fa:	0c 94 1d e7 	jmp	0x1ce3a	; 0x1ce3a <__prologue_saves__+0x20>
    52fe:	1e 82       	std	Y+6, r1	; 0x06
    5300:	1d 82       	std	Y+5, r1	; 0x05
    5302:	81 11       	cpse	r24, r1
    5304:	36 c0       	rjmp	.+108    	; 0x5372 <uart_init+0x80>
    5306:	cb 01       	movw	r24, r22
    5308:	ba 01       	movw	r22, r20
    530a:	9e 01       	movw	r18, r28
    530c:	2f 5f       	subi	r18, 0xFF	; 255
    530e:	3f 4f       	sbci	r19, 0xFF	; 255
    5310:	ae 01       	movw	r20, r28
    5312:	4b 5f       	subi	r20, 0xFB	; 251
    5314:	5f 4f       	sbci	r21, 0xFF	; 255
    5316:	53 df       	rcall	.-346    	; 0x51be <uart_ubr>
    5318:	f8 94       	cli
    531a:	10 92 f3 19 	sts	0x19F3, r1	; 0x8019f3 <uarts+0x4>
    531e:	10 92 f2 19 	sts	0x19F2, r1	; 0x8019f2 <uarts+0x3>
    5322:	10 92 ef 19 	sts	0x19EF, r1	; 0x8019ef <uarts>
    5326:	10 92 f0 19 	sts	0x19F0, r1	; 0x8019f0 <uarts+0x1>
    532a:	10 92 f1 19 	sts	0x19F1, r1	; 0x8019f1 <uarts+0x2>
    532e:	10 92 f4 19 	sts	0x19F4, r1	; 0x8019f4 <uarts+0x5>
    5332:	78 94       	sei
    5334:	f8 94       	cli
    5336:	58 9a       	sbi	0x0b, 0	; 11
    5338:	59 9a       	sbi	0x0b, 1	; 11
    533a:	50 98       	cbi	0x0a, 0	; 10
    533c:	51 9a       	sbi	0x0a, 1	; 10
    533e:	28 e9       	ldi	r18, 0x98	; 152
    5340:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    5344:	2d 81       	ldd	r18, Y+5	; 0x05
    5346:	3e 81       	ldd	r19, Y+6	; 0x06
    5348:	23 2b       	or	r18, r19
    534a:	19 f0       	breq	.+6      	; 0x5352 <uart_init+0x60>
    534c:	22 e0       	ldi	r18, 0x02	; 2
    534e:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    5352:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    5356:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    535a:	78 94       	sei
    535c:	62 e7       	ldi	r22, 0x72	; 114
    535e:	7a e2       	ldi	r23, 0x2A	; 42
    5360:	87 e8       	ldi	r24, 0x87	; 135
    5362:	9a e2       	ldi	r25, 0x2A	; 42
    5364:	0e 94 e1 78 	call	0xf1c2	; 0xf1c2 <fdevopen>
    5368:	69 81       	ldd	r22, Y+1	; 0x01
    536a:	7a 81       	ldd	r23, Y+2	; 0x02
    536c:	8b 81       	ldd	r24, Y+3	; 0x03
    536e:	9c 81       	ldd	r25, Y+4	; 0x04
    5370:	03 c0       	rjmp	.+6      	; 0x5378 <uart_init+0x86>
    5372:	60 e0       	ldi	r22, 0x00	; 0
    5374:	70 e0       	ldi	r23, 0x00	; 0
    5376:	cb 01       	movw	r24, r22
    5378:	26 96       	adiw	r28, 0x06	; 6
    537a:	e2 e0       	ldi	r30, 0x02	; 2
    537c:	0c 94 39 e7 	jmp	0x1ce72	; 0x1ce72 <__epilogue_restores__+0x20>

00005380 <uart_rx_interrupt>:
    5380:	cf 93       	push	r28
    5382:	df 93       	push	r29
    5384:	27 e5       	ldi	r18, 0x57	; 87
    5386:	82 9f       	mul	r24, r18
    5388:	c0 01       	movw	r24, r0
    538a:	11 24       	eor	r1, r1
    538c:	fc 01       	movw	r30, r24
    538e:	e1 51       	subi	r30, 0x11	; 17
    5390:	f6 4e       	sbci	r31, 0xE6	; 230
    5392:	83 81       	ldd	r24, Z+3	; 0x03
    5394:	94 81       	ldd	r25, Z+4	; 0x04
    5396:	80 35       	cpi	r24, 0x50	; 80
    5398:	91 05       	cpc	r25, r1
    539a:	84 f4       	brge	.+32     	; 0x53bc <uart_rx_interrupt+0x3c>
    539c:	30 81       	ld	r19, Z
    539e:	21 e0       	ldi	r18, 0x01	; 1
    53a0:	23 0f       	add	r18, r19
    53a2:	20 83       	st	Z, r18
    53a4:	ef 01       	movw	r28, r30
    53a6:	c3 0f       	add	r28, r19
    53a8:	d1 1d       	adc	r29, r1
    53aa:	6f 77       	andi	r22, 0x7F	; 127
    53ac:	6e 83       	std	Y+6, r22	; 0x06
    53ae:	01 96       	adiw	r24, 0x01	; 1
    53b0:	94 83       	std	Z+4, r25	; 0x04
    53b2:	83 83       	std	Z+3, r24	; 0x03
    53b4:	20 35       	cpi	r18, 0x50	; 80
    53b6:	28 f0       	brcs	.+10     	; 0x53c2 <uart_rx_interrupt+0x42>
    53b8:	10 82       	st	Z, r1
    53ba:	03 c0       	rjmp	.+6      	; 0x53c2 <uart_rx_interrupt+0x42>
    53bc:	85 81       	ldd	r24, Z+5	; 0x05
    53be:	81 60       	ori	r24, 0x01	; 1
    53c0:	85 83       	std	Z+5, r24	; 0x05
    53c2:	df 91       	pop	r29
    53c4:	cf 91       	pop	r28
    53c6:	08 95       	ret

000053c8 <__vector_20>:
    53c8:	1f 92       	push	r1
    53ca:	0f 92       	push	r0
    53cc:	0f b6       	in	r0, 0x3f	; 63
    53ce:	0f 92       	push	r0
    53d0:	11 24       	eor	r1, r1
    53d2:	0b b6       	in	r0, 0x3b	; 59
    53d4:	0f 92       	push	r0
    53d6:	2f 93       	push	r18
    53d8:	3f 93       	push	r19
    53da:	4f 93       	push	r20
    53dc:	5f 93       	push	r21
    53de:	6f 93       	push	r22
    53e0:	7f 93       	push	r23
    53e2:	8f 93       	push	r24
    53e4:	9f 93       	push	r25
    53e6:	af 93       	push	r26
    53e8:	bf 93       	push	r27
    53ea:	ef 93       	push	r30
    53ec:	ff 93       	push	r31
    53ee:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    53f2:	80 e0       	ldi	r24, 0x00	; 0
    53f4:	c5 df       	rcall	.-118    	; 0x5380 <uart_rx_interrupt>
    53f6:	ff 91       	pop	r31
    53f8:	ef 91       	pop	r30
    53fa:	bf 91       	pop	r27
    53fc:	af 91       	pop	r26
    53fe:	9f 91       	pop	r25
    5400:	8f 91       	pop	r24
    5402:	7f 91       	pop	r23
    5404:	6f 91       	pop	r22
    5406:	5f 91       	pop	r21
    5408:	4f 91       	pop	r20
    540a:	3f 91       	pop	r19
    540c:	2f 91       	pop	r18
    540e:	0f 90       	pop	r0
    5410:	0b be       	out	0x3b, r0	; 59
    5412:	0f 90       	pop	r0
    5414:	0f be       	out	0x3f, r0	; 63
    5416:	0f 90       	pop	r0
    5418:	1f 90       	pop	r1
    541a:	18 95       	reti

0000541c <uart_rx_count>:
/// @return  Character count in ring buffer.
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
    541c:	81 11       	cpse	r24, r1
    541e:	07 c0       	rjmp	.+14     	; 0x542e <uart_rx_count+0x12>
        return(EOF);

    cli();
    5420:	f8 94       	cli

    count = uarts[uart].rx_count;
    5422:	80 91 f2 19 	lds	r24, 0x19F2	; 0x8019f2 <uarts+0x3>
    5426:	90 91 f3 19 	lds	r25, 0x19F3	; 0x8019f3 <uarts+0x4>

    sei();
    542a:	78 94       	sei

    return (count );
    542c:	08 95       	ret
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
        return(EOF);
    542e:	8f ef       	ldi	r24, 0xFF	; 255
    5430:	9f ef       	ldi	r25, 0xFF	; 255
    count = uarts[uart].rx_count;

    sei();

    return (count );
}
    5432:	08 95       	ret

00005434 <uart_get_tail>:
/// @see uart_rx_count().
int uart_get_tail(uint8_t uart)
{
    uint8_t c;

    if (uart >= UARTS)
    5434:	81 11       	cpse	r24, r1
    5436:	21 c0       	rjmp	.+66     	; 0x547a <uart_get_tail+0x46>
    {
        return(EOF);
    }

    while(uart_rx_count(uart) < 1)
    5438:	80 e0       	ldi	r24, 0x00	; 0
    543a:	f0 df       	rcall	.-32     	; 0x541c <uart_rx_count>
    543c:	18 16       	cp	r1, r24
    543e:	19 06       	cpc	r1, r25
    5440:	dc f7       	brge	.-10     	; 0x5438 <uart_get_tail+0x4>
        ;

    cli();
    5442:	f8 94       	cli
    c = uarts[uart].rx_buf[uarts[uart].rx_tail++];
    5444:	e0 91 f0 19 	lds	r30, 0x19F0	; 0x8019f0 <uarts+0x1>
    5448:	91 e0       	ldi	r25, 0x01	; 1
    544a:	9e 0f       	add	r25, r30
    544c:	90 93 f0 19 	sts	0x19F0, r25	; 0x8019f0 <uarts+0x1>
    5450:	f0 e0       	ldi	r31, 0x00	; 0
    5452:	e1 51       	subi	r30, 0x11	; 17
    5454:	f6 4e       	sbci	r31, 0xE6	; 230
    5456:	86 81       	ldd	r24, Z+6	; 0x06
    if (uarts[uart].rx_tail >= RX_BUF_SIZE)
    5458:	90 35       	cpi	r25, 0x50	; 80
    545a:	10 f0       	brcs	.+4      	; 0x5460 <uart_get_tail+0x2c>
        uarts[uart].rx_tail = 0;
    545c:	10 92 f0 19 	sts	0x19F0, r1	; 0x8019f0 <uarts+0x1>
    uarts[uart].rx_count--;
    5460:	20 91 f2 19 	lds	r18, 0x19F2	; 0x8019f2 <uarts+0x3>
    5464:	30 91 f3 19 	lds	r19, 0x19F3	; 0x8019f3 <uarts+0x4>
    5468:	21 50       	subi	r18, 0x01	; 1
    546a:	31 09       	sbc	r19, r1
    546c:	30 93 f3 19 	sts	0x19F3, r19	; 0x8019f3 <uarts+0x4>
    5470:	20 93 f2 19 	sts	0x19F2, r18	; 0x8019f2 <uarts+0x3>
    sei();
    5474:	78 94       	sei

    return (c & 0xff);
    5476:	90 e0       	ldi	r25, 0x00	; 0
    5478:	08 95       	ret
{
    uint8_t c;

    if (uart >= UARTS)
    {
        return(EOF);
    547a:	8f ef       	ldi	r24, 0xFF	; 255
    547c:	9f ef       	ldi	r25, 0xFF	; 255
        uarts[uart].rx_tail = 0;
    uarts[uart].rx_count--;
    sei();

    return (c & 0xff);
}
    547e:	08 95       	ret

00005480 <uart_rx_byte>:
/// @param[in] uart: uart number.
///
/// @return  Character.
int uart_rx_byte(uint8_t uart)
{
    return( uart_get_tail(uart) & 0xff);
    5480:	d9 df       	rcall	.-78     	; 0x5434 <uart_get_tail>
}
    5482:	99 27       	eor	r25, r25
    5484:	08 95       	ret

00005486 <uart_tx_byte>:
/// @param[in] uart: uart number.
///
/// @return void.
int uart_tx_byte(int c, uint8_t uart)
{
    if(uart == 0)
    5486:	61 11       	cpse	r22, r1
    5488:	09 c0       	rjmp	.+18     	; 0x549c <uart_tx_byte+0x16>
    {
        while (!BIT_TST(UCSR0A, UDRE0))
    548a:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    548e:	25 ff       	sbrs	r18, 5
    5490:	fc cf       	rjmp	.-8      	; 0x548a <uart_tx_byte+0x4>
            ;
        UDR0 = c & 0x7f;
    5492:	28 2f       	mov	r18, r24
    5494:	2f 77       	andi	r18, 0x7F	; 127
    5496:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
        return(c);
    549a:	08 95       	ret
    }
#ifdef UARTS > 1
    if(uart == 1)
    549c:	61 30       	cpi	r22, 0x01	; 1
    549e:	49 f4       	brne	.+18     	; 0x54b2 <uart_tx_byte+0x2c>
    {
        while (!BIT_TST(UCSR1A, UDRE1))
    54a0:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    54a4:	25 ff       	sbrs	r18, 5
    54a6:	fc cf       	rjmp	.-8      	; 0x54a0 <uart_tx_byte+0x1a>
            ;
        UDR1 = c & 0x7f;
    54a8:	28 2f       	mov	r18, r24
    54aa:	2f 77       	andi	r18, 0x7F	; 127
    54ac:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    54b0:	08 95       	ret
        return(c);
    }
#endif
    return(EOF);
    54b2:	8f ef       	ldi	r24, 0xFF	; 255
    54b4:	9f ef       	ldi	r25, 0xFF	; 255
}
    54b6:	08 95       	ret

000054b8 <uart_getchar>:
///
/// @param[in] uart: uart number.
///
/// @return  Character.
int uart_getchar(uint8_t uart)
{
    54b8:	cf 93       	push	r28
    uint8_t c;

    if(uart >= UARTS)
    54ba:	81 11       	cpse	r24, r1
    54bc:	0f c0       	rjmp	.+30     	; 0x54dc <uart_getchar+0x24>
        break;
    }
    if(c == '\r')
        c = '\n';
#endif
    c = uart_rx_byte(uart);
    54be:	e0 df       	rcall	.-64     	; 0x5480 <uart_rx_byte>
    54c0:	c8 2f       	mov	r28, r24
    uart_tx_byte(c, uart);
    54c2:	60 e0       	ldi	r22, 0x00	; 0
    54c4:	90 e0       	ldi	r25, 0x00	; 0
    54c6:	df df       	rcall	.-66     	; 0x5486 <uart_tx_byte>
    if(c == '\r')
    54c8:	cd 30       	cpi	r28, 0x0D	; 13
    54ca:	29 f4       	brne	.+10     	; 0x54d6 <uart_getchar+0x1e>
    {
        c = '\n';
        uart_tx_byte(c, uart);
    54cc:	60 e0       	ldi	r22, 0x00	; 0
    54ce:	8a e0       	ldi	r24, 0x0A	; 10
    54d0:	90 e0       	ldi	r25, 0x00	; 0
    54d2:	d9 df       	rcall	.-78     	; 0x5486 <uart_tx_byte>
#endif
    c = uart_rx_byte(uart);
    uart_tx_byte(c, uart);
    if(c == '\r')
    {
        c = '\n';
    54d4:	ca e0       	ldi	r28, 0x0A	; 10
        uart_tx_byte(c, uart);
    }
//FIXME ECHO
    return (c);
    54d6:	8c 2f       	mov	r24, r28
    54d8:	90 e0       	ldi	r25, 0x00	; 0
    54da:	02 c0       	rjmp	.+4      	; 0x54e0 <uart_getchar+0x28>
int uart_getchar(uint8_t uart)
{
    uint8_t c;

    if(uart >= UARTS)
        return(EOF);
    54dc:	8f ef       	ldi	r24, 0xFF	; 255
    54de:	9f ef       	ldi	r25, 0xFF	; 255
        c = '\n';
        uart_tx_byte(c, uart);
    }
//FIXME ECHO
    return (c);
}
    54e0:	cf 91       	pop	r28
    54e2:	08 95       	ret

000054e4 <uart0_getchar>:
///
/// @return  uart_getchar(0);.
/// @see fdevopen() from avr-libc.
int uart0_getchar( void *f  __attribute__((unused)))
{
    return( uart_getchar(0) );
    54e4:	80 e0       	ldi	r24, 0x00	; 0
    54e6:	e8 cf       	rjmp	.-48     	; 0x54b8 <uart_getchar>
}
    54e8:	08 95       	ret

000054ea <uart_putchar>:
/// @param[in] c: transmit character.
/// @param[in] uart: uart number.
///
/// @return void.
int uart_putchar(int c, int uart)
{
    54ea:	1f 93       	push	r17
    54ec:	cf 93       	push	r28
    54ee:	df 93       	push	r29
    54f0:	ec 01       	movw	r28, r24
    54f2:	16 2f       	mov	r17, r22
    uart_tx_byte(c, uart);
    54f4:	c8 df       	rcall	.-112    	; 0x5486 <uart_tx_byte>

    if( c == '\n' )
    54f6:	ca 30       	cpi	r28, 0x0A	; 10
    54f8:	d1 05       	cpc	r29, r1
    54fa:	21 f4       	brne	.+8      	; 0x5504 <uart_putchar+0x1a>
        uart_tx_byte('\r', uart);
    54fc:	61 2f       	mov	r22, r17
    54fe:	8d e0       	ldi	r24, 0x0D	; 13
    5500:	90 e0       	ldi	r25, 0x00	; 0
    5502:	c1 df       	rcall	.-126    	; 0x5486 <uart_tx_byte>

    return(c);
}
    5504:	ce 01       	movw	r24, r28
    5506:	df 91       	pop	r29
    5508:	cf 91       	pop	r28
    550a:	1f 91       	pop	r17
    550c:	08 95       	ret

0000550e <uart0_putchar>:
/// @param[in] f: unused FILE *stream pointer.
///
/// @return  uart_putchar(c, 0);.
/// @see fdevopen() from avr-libc.
int uart0_putchar(int c, void *f  __attribute__((unused)))
{
    550e:	cf 93       	push	r28
    5510:	df 93       	push	r29
    5512:	ec 01       	movw	r28, r24
    uart_putchar(c, 0);
    5514:	60 e0       	ldi	r22, 0x00	; 0
    5516:	70 e0       	ldi	r23, 0x00	; 0
    5518:	e8 df       	rcall	.-48     	; 0x54ea <uart_putchar>
    return(c);
}
    551a:	ce 01       	movw	r24, r28
    551c:	df 91       	pop	r29
    551e:	cf 91       	pop	r28
    5520:	08 95       	ret

00005522 <uart_keyhit>:
/// @param[in] uart: uart number.
///
/// @return  Character count in receive buffer.
int uart_keyhit(uint8_t uart)
{
    return ( uart_rx_count( uart ) );
    5522:	7c cf       	rjmp	.-264    	; 0x541c <uart_rx_count>
}
    5524:	08 95       	ret

00005526 <SPI0_Speed>:
/// @brief  Return saved SPI mode as set by SPI0_Mode().
/// @return  saved mode.
int SPI0_Get_Mode( void )
{
    return(SPI0_Mode_value);
}
    5526:	cf 92       	push	r12
    5528:	df 92       	push	r13
    552a:	ef 92       	push	r14
    552c:	ff 92       	push	r15
    552e:	6b 01       	movw	r12, r22
    5530:	7c 01       	movw	r14, r24
    5532:	80 91 51 17 	lds	r24, 0x1751	; 0x801751 <SPI0_Speed_value>
    5536:	90 91 52 17 	lds	r25, 0x1752	; 0x801752 <SPI0_Speed_value+0x1>
    553a:	a0 91 53 17 	lds	r26, 0x1753	; 0x801753 <SPI0_Speed_value+0x2>
    553e:	b0 91 54 17 	lds	r27, 0x1754	; 0x801754 <SPI0_Speed_value+0x3>
    5542:	8c 15       	cp	r24, r12
    5544:	9d 05       	cpc	r25, r13
    5546:	ae 05       	cpc	r26, r14
    5548:	bf 05       	cpc	r27, r15
    554a:	09 f4       	brne	.+2      	; 0x554e <SPI0_Speed+0x28>
    554c:	4e c0       	rjmp	.+156    	; 0x55ea <SPI0_Speed+0xc4>
    554e:	60 e0       	ldi	r22, 0x00	; 0
    5550:	7d e2       	ldi	r23, 0x2D	; 45
    5552:	81 e3       	ldi	r24, 0x31	; 49
    5554:	91 e0       	ldi	r25, 0x01	; 1
    5556:	a7 01       	movw	r20, r14
    5558:	96 01       	movw	r18, r12
    555a:	0e 94 a0 e6 	call	0x1cd40	; 0x1cd40 <__udivmodsi4>
    555e:	20 38       	cpi	r18, 0x80	; 128
    5560:	31 05       	cpc	r19, r1
    5562:	41 05       	cpc	r20, r1
    5564:	51 05       	cpc	r21, r1
    5566:	28 f4       	brcc	.+10     	; 0x5572 <SPI0_Speed+0x4c>
    5568:	20 34       	cpi	r18, 0x40	; 64
    556a:	31 05       	cpc	r19, r1
    556c:	41 05       	cpc	r20, r1
    556e:	51 05       	cpc	r21, r1
    5570:	30 f0       	brcs	.+12     	; 0x557e <SPI0_Speed+0x58>
    5572:	8d b5       	in	r24, 0x2d	; 45
    5574:	8e 7f       	andi	r24, 0xFE	; 254
    5576:	8d bd       	out	0x2d, r24	; 45
    5578:	8c b5       	in	r24, 0x2c	; 44
    557a:	82 60       	ori	r24, 0x02	; 2
    557c:	1b c0       	rjmp	.+54     	; 0x55b4 <SPI0_Speed+0x8e>
    557e:	8d b5       	in	r24, 0x2d	; 45
    5580:	20 32       	cpi	r18, 0x20	; 32
    5582:	31 05       	cpc	r19, r1
    5584:	41 05       	cpc	r20, r1
    5586:	51 05       	cpc	r21, r1
    5588:	28 f0       	brcs	.+10     	; 0x5594 <SPI0_Speed+0x6e>
    558a:	81 60       	ori	r24, 0x01	; 1
    558c:	8d bd       	out	0x2d, r24	; 45
    558e:	8c b5       	in	r24, 0x2c	; 44
    5590:	82 60       	ori	r24, 0x02	; 2
    5592:	1f c0       	rjmp	.+62     	; 0x55d2 <SPI0_Speed+0xac>
    5594:	20 31       	cpi	r18, 0x10	; 16
    5596:	31 05       	cpc	r19, r1
    5598:	41 05       	cpc	r20, r1
    559a:	51 05       	cpc	r21, r1
    559c:	10 f0       	brcs	.+4      	; 0x55a2 <SPI0_Speed+0x7c>
    559e:	8e 7f       	andi	r24, 0xFE	; 254
    55a0:	06 c0       	rjmp	.+12     	; 0x55ae <SPI0_Speed+0x88>
    55a2:	28 30       	cpi	r18, 0x08	; 8
    55a4:	31 05       	cpc	r19, r1
    55a6:	41 05       	cpc	r20, r1
    55a8:	51 05       	cpc	r21, r1
    55aa:	40 f0       	brcs	.+16     	; 0x55bc <SPI0_Speed+0x96>
    55ac:	81 60       	ori	r24, 0x01	; 1
    55ae:	8d bd       	out	0x2d, r24	; 45
    55b0:	8c b5       	in	r24, 0x2c	; 44
    55b2:	8d 7f       	andi	r24, 0xFD	; 253
    55b4:	8c bd       	out	0x2c, r24	; 44
    55b6:	8c b5       	in	r24, 0x2c	; 44
    55b8:	81 60       	ori	r24, 0x01	; 1
    55ba:	0e c0       	rjmp	.+28     	; 0x55d8 <SPI0_Speed+0xb2>
    55bc:	24 30       	cpi	r18, 0x04	; 4
    55be:	31 05       	cpc	r19, r1
    55c0:	41 05       	cpc	r20, r1
    55c2:	51 05       	cpc	r21, r1
    55c4:	10 f0       	brcs	.+4      	; 0x55ca <SPI0_Speed+0xa4>
    55c6:	8e 7f       	andi	r24, 0xFE	; 254
    55c8:	01 c0       	rjmp	.+2      	; 0x55cc <SPI0_Speed+0xa6>
    55ca:	81 60       	ori	r24, 0x01	; 1
    55cc:	8d bd       	out	0x2d, r24	; 45
    55ce:	8c b5       	in	r24, 0x2c	; 44
    55d0:	8d 7f       	andi	r24, 0xFD	; 253
    55d2:	8c bd       	out	0x2c, r24	; 44
    55d4:	8c b5       	in	r24, 0x2c	; 44
    55d6:	8e 7f       	andi	r24, 0xFE	; 254
    55d8:	8c bd       	out	0x2c, r24	; 44
    55da:	c0 92 51 17 	sts	0x1751, r12	; 0x801751 <SPI0_Speed_value>
    55de:	d0 92 52 17 	sts	0x1752, r13	; 0x801752 <SPI0_Speed_value+0x1>
    55e2:	e0 92 53 17 	sts	0x1753, r14	; 0x801753 <SPI0_Speed_value+0x2>
    55e6:	f0 92 54 17 	sts	0x1754, r15	; 0x801754 <SPI0_Speed_value+0x3>
    55ea:	ff 90       	pop	r15
    55ec:	ef 90       	pop	r14
    55ee:	df 90       	pop	r13
    55f0:	cf 90       	pop	r12
    55f2:	08 95       	ret

000055f4 <SPI0_Mode>:
    55f4:	cf 93       	push	r28
    55f6:	df 93       	push	r29
    55f8:	00 d0       	rcall	.+0      	; 0x55fa <SPI0_Mode+0x6>
    55fa:	00 d0       	rcall	.+0      	; 0x55fc <SPI0_Mode+0x8>
    55fc:	1f 92       	push	r1
    55fe:	ec 01       	movw	r28, r24
    5600:	81 30       	cpi	r24, 0x01	; 1
    5602:	91 05       	cpc	r25, r1
    5604:	71 f0       	breq	.+28     	; 0x5622 <SPI0_Mode+0x2e>
    5606:	2c f4       	brge	.+10     	; 0x5612 <SPI0_Mode+0x1e>
    5608:	89 2b       	or	r24, r25
    560a:	c1 f4       	brne	.+48     	; 0x563c <SPI0_Mode+0x48>
    560c:	8c b5       	in	r24, 0x2c	; 44
    560e:	87 7f       	andi	r24, 0xF7	; 247
    5610:	11 c0       	rjmp	.+34     	; 0x5634 <SPI0_Mode+0x40>
    5612:	82 30       	cpi	r24, 0x02	; 2
    5614:	91 05       	cpc	r25, r1
    5616:	61 f0       	breq	.+24     	; 0x5630 <SPI0_Mode+0x3c>
    5618:	03 97       	sbiw	r24, 0x03	; 3
    561a:	81 f4       	brne	.+32     	; 0x563c <SPI0_Mode+0x48>
    561c:	8c b5       	in	r24, 0x2c	; 44
    561e:	88 60       	ori	r24, 0x08	; 8
    5620:	02 c0       	rjmp	.+4      	; 0x5626 <SPI0_Mode+0x32>
    5622:	8c b5       	in	r24, 0x2c	; 44
    5624:	87 7f       	andi	r24, 0xF7	; 247
    5626:	8c bd       	out	0x2c, r24	; 44
    5628:	8c b5       	in	r24, 0x2c	; 44
    562a:	84 60       	ori	r24, 0x04	; 4
    562c:	8c bd       	out	0x2c, r24	; 44
    562e:	12 c0       	rjmp	.+36     	; 0x5654 <SPI0_Mode+0x60>
    5630:	8c b5       	in	r24, 0x2c	; 44
    5632:	88 60       	ori	r24, 0x08	; 8
    5634:	8c bd       	out	0x2c, r24	; 44
    5636:	8c b5       	in	r24, 0x2c	; 44
    5638:	8b 7f       	andi	r24, 0xFB	; 251
    563a:	f8 cf       	rjmp	.-16     	; 0x562c <SPI0_Mode+0x38>
    563c:	ed b7       	in	r30, 0x3d	; 61
    563e:	fe b7       	in	r31, 0x3e	; 62
    5640:	d5 83       	std	Z+5, r29	; 0x05
    5642:	c4 83       	std	Z+4, r28	; 0x04
    5644:	84 e1       	ldi	r24, 0x14	; 20
    5646:	93 e0       	ldi	r25, 0x03	; 3
    5648:	a0 e0       	ldi	r26, 0x00	; 0
    564a:	81 83       	std	Z+1, r24	; 0x01
    564c:	92 83       	std	Z+2, r25	; 0x02
    564e:	a3 83       	std	Z+3, r26	; 0x03
    5650:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    5654:	d0 93 50 17 	sts	0x1750, r29	; 0x801750 <SPI0_Mode_value+0x1>
    5658:	c0 93 4f 17 	sts	0x174F, r28	; 0x80174f <SPI0_Mode_value>
    565c:	cd b7       	in	r28, 0x3d	; 61
    565e:	de b7       	in	r29, 0x3e	; 62
    5660:	25 96       	adiw	r28, 0x05	; 5
    5662:	e2 e0       	ldi	r30, 0x02	; 2
    5664:	0c 94 39 e7 	jmp	0x1ce72	; 0x1ce72 <__epilogue_restores__+0x20>

00005668 <SPI0_TXRX_Byte>:
/// @param[in] Data: Data to send.
///
/// @return  Data received.
uint8_t SPI0_TXRX_Byte(uint8_t Data)
{
    SPDR = Data;                                  // Transmit
    5668:	8e bd       	out	0x2e, r24	; 46

    while( !BIT_TST(SPSR,SPIF) )                  // Wait for send
    566a:	0d b4       	in	r0, 0x2d	; 45
    566c:	07 fe       	sbrs	r0, 7
    566e:	fd cf       	rjmp	.-6      	; 0x566a <SPI0_TXRX_Byte+0x2>
        ;

    return (SPDR);                                // Received Data
    5670:	8e b5       	in	r24, 0x2e	; 46
}
    5672:	08 95       	ret

00005674 <SPI0_Init>:

///@brief Initialize SPI0 device.
/// See Atmel App Note AVR151
/// Set default speed, IO pins and mode.
void SPI0_Init(uint32_t speed)
{
    5674:	cf 92       	push	r12
    5676:	df 92       	push	r13
    5678:	ef 92       	push	r14
    567a:	ff 92       	push	r15
    567c:	cf 93       	push	r28
    567e:	df 93       	push	r29
    5680:	1f 92       	push	r1
    5682:	cd b7       	in	r28, 0x3d	; 61
    5684:	de b7       	in	r29, 0x3e	; 62
    5686:	6b 01       	movw	r12, r22
    5688:	7c 01       	movw	r14, r24
    printf("Port B DDR:   0x%02x\n", (int) GPIO_PORT_DDR_RD(GPIO_B));
    printf("Port B LATCH: 0x%02x\n", (int) GPIO_PORT_LATCH_RD(GPIO_B));
    printf("Port B PINS:  0x%02x\n", (int) GPIO_PORT_LATCH_RD(GPIO_B));
#endif

    SPCR = 0;                                     // Clear SPCR in case we are not called after RESET
    568a:	1c bc       	out	0x2c, r1	; 44

    GPIO_PIN_HI(SCK);                             // SCK Output
    568c:	2f 9a       	sbi	0x05, 7	; 5
    568e:	27 9a       	sbi	0x04, 7	; 4
    GPIO_PIN_HI(MOSI);                            // MOSI Output
    5690:	2d 9a       	sbi	0x05, 5	; 5
    5692:	25 9a       	sbi	0x04, 5	; 4
    GPIO_PIN_FLOAT(MISO);                         // MISO Input, no pull-up
    5694:	26 98       	cbi	0x04, 6	; 4

// Warning *** MSTR MUST be set BEFORE SPE!!!! *** otherwise SS will NOT behave as an output
    GPIO_PIN_LOW(SS);                             // SS Output must be HI prevent slave mode from getting set while initializing
    5696:	2c 98       	cbi	0x05, 4	; 5
    5698:	24 9a       	sbi	0x04, 4	; 4
    BIT_SET(SPCR, MSTR);                          // Master Mode
    569a:	8c b5       	in	r24, 0x2c	; 44
    569c:	80 61       	ori	r24, 0x10	; 16
    569e:	8c bd       	out	0x2c, r24	; 44
    BIT_SET(SPCR, SPE);                           // Enable SPI
    56a0:	8c b5       	in	r24, 0x2c	; 44
    56a2:	80 64       	ori	r24, 0x40	; 64
    56a4:	8c bd       	out	0x2c, r24	; 44

// SPI Clear any pending interrupt flags
    D = SPSR;
    56a6:	8d b5       	in	r24, 0x2d	; 45
    56a8:	89 83       	std	Y+1, r24	; 0x01
    D = SPDR;
    56aa:	8e b5       	in	r24, 0x2e	; 46
    56ac:	89 83       	std	Y+1, r24	; 0x01

/// Set SPI clock mode 0
///  SPI Mode     CPOL    CPHA            Sample
///  0    0       0       Leading (Rising)   Edge
    SPI0_Mode(0);
    56ae:	80 e0       	ldi	r24, 0x00	; 0
    56b0:	90 e0       	ldi	r25, 0x00	; 0
    56b2:	a0 df       	rcall	.-192    	; 0x55f4 <SPI0_Mode>

// Set SPI clock speed
    SPI0_Speed(speed);
    56b4:	c7 01       	movw	r24, r14
    56b6:	b6 01       	movw	r22, r12
    56b8:	36 df       	rcall	.-404    	; 0x5526 <SPI0_Speed>

    SPI0_TXRX_Byte(0xff);                         // Send dummy 0xFF
    56ba:	8f ef       	ldi	r24, 0xFF	; 255
    56bc:	d5 df       	rcall	.-86     	; 0x5668 <SPI0_TXRX_Byte>
    56be:	0f 90       	pop	r0
    SPI0_Init_state = 1;

}
    56c0:	df 91       	pop	r29
    56c2:	cf 91       	pop	r28
    56c4:	ff 90       	pop	r15
    56c6:	ef 90       	pop	r14
    56c8:	df 90       	pop	r13
    56ca:	cf 90       	pop	r12
    56cc:	08 95       	ret

000056ce <SPI0_TX>:
    56ce:	0f 93       	push	r16
/// @brief HSPI write using FIFO
/// @param[in] *data: transmit buffer
/// @param[in] count: number of bytes to write
/// @return  void
void SPI0_TX(uint8_t *data, int count)
{
    56d0:	1f 93       	push	r17
    56d2:	cf 93       	push	r28
    56d4:	df 93       	push	r29
    56d6:	8c 01       	movw	r16, r24
    56d8:	eb 01       	movw	r28, r22

    while(count > 0)
    56da:	1c 16       	cp	r1, r28
    56dc:	1d 06       	cpc	r1, r29
    56de:	34 f4       	brge	.+12     	; 0x56ec <SPI0_TX+0x1e>
    {
        SPI0_TXRX_Byte(*data);
    56e0:	f8 01       	movw	r30, r16
    56e2:	81 91       	ld	r24, Z+
    56e4:	8f 01       	movw	r16, r30
    56e6:	c0 df       	rcall	.-128    	; 0x5668 <SPI0_TXRX_Byte>
        ++data;
        --count;
    56e8:	21 97       	sbiw	r28, 0x01	; 1
    56ea:	f7 cf       	rjmp	.-18     	; 0x56da <SPI0_TX+0xc>
    }
}
    56ec:	df 91       	pop	r29
    56ee:	cf 91       	pop	r28
    56f0:	1f 91       	pop	r17
    56f2:	0f 91       	pop	r16
    56f4:	08 95       	ret

000056f6 <SPI0_TXRX>:
/// @param[in] *data: transmit / receive buffer
/// @param[in] count: number of bytes to write / read
/// @return  void

void SPI0_TXRX(uint8_t *data, int count)
{
    56f6:	0f 93       	push	r16
    56f8:	1f 93       	push	r17
    56fa:	cf 93       	push	r28
    56fc:	df 93       	push	r29
    56fe:	8c 01       	movw	r16, r24
    5700:	eb 01       	movw	r28, r22

    while(count > 0)
    5702:	1c 16       	cp	r1, r28
    5704:	1d 06       	cpc	r1, r29
    5706:	44 f4       	brge	.+16     	; 0x5718 <SPI0_TXRX+0x22>
    {
        *data = SPI0_TXRX_Byte(*data);
    5708:	f8 01       	movw	r30, r16
    570a:	80 81       	ld	r24, Z
    570c:	ad df       	rcall	.-166    	; 0x5668 <SPI0_TXRX_Byte>
    570e:	f8 01       	movw	r30, r16
    5710:	81 93       	st	Z+, r24
    5712:	8f 01       	movw	r16, r30
        ++data;
        --count;
    5714:	21 97       	sbiw	r28, 0x01	; 1
    5716:	f5 cf       	rjmp	.-22     	; 0x5702 <SPI0_TXRX+0xc>
    }
}
    5718:	df 91       	pop	r29
    571a:	cf 91       	pop	r28
    571c:	1f 91       	pop	r17
    571e:	0f 91       	pop	r16
    5720:	08 95       	ret

00005722 <SPI0_RX>:
/// @brief HSPI read using FIFO
/// @param[in] *data: receive buffer
/// @param[in] count: number of bytes to read
/// @return  void
void SPI0_RX(uint8_t *data, int count)
{
    5722:	0f 93       	push	r16
    5724:	1f 93       	push	r17
    5726:	cf 93       	push	r28
    5728:	df 93       	push	r29
    572a:	8c 01       	movw	r16, r24
    572c:	eb 01       	movw	r28, r22

    while(count > 0)
    572e:	1c 16       	cp	r1, r28
    5730:	1d 06       	cpc	r1, r29
    5732:	3c f4       	brge	.+14     	; 0x5742 <SPI0_RX+0x20>
    {
        *data = SPI0_TXRX_Byte(0xff);
    5734:	8f ef       	ldi	r24, 0xFF	; 255
    5736:	98 df       	rcall	.-208    	; 0x5668 <SPI0_TXRX_Byte>
    5738:	f8 01       	movw	r30, r16
    573a:	81 93       	st	Z+, r24
    573c:	8f 01       	movw	r16, r30
        ++data;
        --count;
    573e:	21 97       	sbiw	r28, 0x01	; 1
    5740:	f6 cf       	rjmp	.-20     	; 0x572e <SPI0_RX+0xc>
    }
}
    5742:	df 91       	pop	r29
    5744:	cf 91       	pop	r28
    5746:	1f 91       	pop	r17
    5748:	0f 91       	pop	r16
    574a:	08 95       	ret

0000574c <i2c_timer>:
int8_t i2c_ok()
{
	if (i2c.flags) 
		return(0);
	return(1);
}
    574c:	2f b7       	in	r18, 0x3f	; 63
    574e:	80 91 47 1a 	lds	r24, 0x1A47	; 0x801a47 <i2c+0x1>
    5752:	81 11       	cpse	r24, r1
    5754:	04 c0       	rjmp	.+8      	; 0x575e <i2c_timer+0x12>
    5756:	80 91 48 1a 	lds	r24, 0x1A48	; 0x801a48 <i2c+0x2>
    575a:	81 11       	cpse	r24, r1
    575c:	0b c0       	rjmp	.+22     	; 0x5774 <i2c_timer+0x28>
    575e:	80 91 4a 1a 	lds	r24, 0x1A4A	; 0x801a4a <i2c+0x4>
    5762:	90 91 4b 1a 	lds	r25, 0x1A4B	; 0x801a4b <i2c+0x5>
    5766:	00 97       	sbiw	r24, 0x00	; 0
    5768:	29 f0       	breq	.+10     	; 0x5774 <i2c_timer+0x28>
    576a:	01 97       	sbiw	r24, 0x01	; 1
    576c:	90 93 4b 1a 	sts	0x1A4B, r25	; 0x801a4b <i2c+0x5>
    5770:	80 93 4a 1a 	sts	0x1A4A, r24	; 0x801a4a <i2c+0x4>
    5774:	2f bf       	out	0x3f, r18	; 63
    5776:	08 95       	ret

00005778 <i2c_check_op>:
    5778:	ad b7       	in	r26, 0x3d	; 61
    577a:	be b7       	in	r27, 0x3e	; 62
    577c:	17 97       	sbiw	r26, 0x07	; 7
    577e:	0f b6       	in	r0, 0x3f	; 63
    5780:	f8 94       	cli
    5782:	be bf       	out	0x3e, r27	; 62
    5784:	0f be       	out	0x3f, r0	; 63
    5786:	ad bf       	out	0x3d, r26	; 61
    5788:	28 2f       	mov	r18, r24
    578a:	08 2e       	mov	r0, r24
    578c:	00 0c       	add	r0, r0
    578e:	33 0b       	sbc	r19, r19
    5790:	80 31       	cpi	r24, 0x10	; 16
    5792:	88 f0       	brcs	.+34     	; 0x57b6 <i2c_check_op+0x3e>
    5794:	80 e1       	ldi	r24, 0x10	; 16
    5796:	90 e0       	ldi	r25, 0x00	; 0
    5798:	ed b7       	in	r30, 0x3d	; 61
    579a:	fe b7       	in	r31, 0x3e	; 62
    579c:	97 83       	std	Z+7, r25	; 0x07
    579e:	86 83       	std	Z+6, r24	; 0x06
    57a0:	35 83       	std	Z+5, r19	; 0x05
    57a2:	24 83       	std	Z+4, r18	; 0x04
    57a4:	89 e2       	ldi	r24, 0x29	; 41
    57a6:	94 e0       	ldi	r25, 0x04	; 4
    57a8:	a0 e0       	ldi	r26, 0x00	; 0
    57aa:	81 83       	std	Z+1, r24	; 0x01
    57ac:	92 83       	std	Z+2, r25	; 0x02
    57ae:	a3 83       	std	Z+3, r26	; 0x03
    57b0:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    57b4:	24 c0       	rjmp	.+72     	; 0x57fe <i2c_check_op+0x86>
    57b6:	f9 01       	movw	r30, r18
    57b8:	ee 0f       	add	r30, r30
    57ba:	ff 1f       	adc	r31, r31
    57bc:	ea 5a       	subi	r30, 0xAA	; 170
    57be:	f8 4e       	sbci	r31, 0xE8	; 232
    57c0:	01 90       	ld	r0, Z+
    57c2:	f0 81       	ld	r31, Z
    57c4:	e0 2d       	mov	r30, r0
    57c6:	30 97       	sbiw	r30, 0x00	; 0
    57c8:	d1 f0       	breq	.+52     	; 0x57fe <i2c_check_op+0x86>
    57ca:	80 85       	ldd	r24, Z+8	; 0x08
    57cc:	91 85       	ldd	r25, Z+9	; 0x09
    57ce:	89 2b       	or	r24, r25
    57d0:	39 f4       	brne	.+14     	; 0x57e0 <i2c_check_op+0x68>
    57d2:	ed b7       	in	r30, 0x3d	; 61
    57d4:	fe b7       	in	r31, 0x3e	; 62
    57d6:	35 83       	std	Z+5, r19	; 0x05
    57d8:	24 83       	std	Z+4, r18	; 0x04
    57da:	80 e1       	ldi	r24, 0x10	; 16
    57dc:	94 e0       	ldi	r25, 0x04	; 4
    57de:	09 c0       	rjmp	.+18     	; 0x57f2 <i2c_check_op+0x7a>
    57e0:	86 81       	ldd	r24, Z+6	; 0x06
    57e2:	81 11       	cpse	r24, r1
    57e4:	0e c0       	rjmp	.+28     	; 0x5802 <i2c_check_op+0x8a>
    57e6:	ed b7       	in	r30, 0x3d	; 61
    57e8:	fe b7       	in	r31, 0x3e	; 62
    57ea:	35 83       	std	Z+5, r19	; 0x05
    57ec:	24 83       	std	Z+4, r18	; 0x04
    57ee:	8a ef       	ldi	r24, 0xFA	; 250
    57f0:	93 e0       	ldi	r25, 0x03	; 3
    57f2:	a0 e0       	ldi	r26, 0x00	; 0
    57f4:	81 83       	std	Z+1, r24	; 0x01
    57f6:	92 83       	std	Z+2, r25	; 0x02
    57f8:	a3 83       	std	Z+3, r26	; 0x03
    57fa:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    57fe:	80 e0       	ldi	r24, 0x00	; 0
    5800:	01 c0       	rjmp	.+2      	; 0x5804 <i2c_check_op+0x8c>
    5802:	81 e0       	ldi	r24, 0x01	; 1
    5804:	ad b7       	in	r26, 0x3d	; 61
    5806:	be b7       	in	r27, 0x3e	; 62
    5808:	17 96       	adiw	r26, 0x07	; 7
    580a:	0f b6       	in	r0, 0x3f	; 63
    580c:	f8 94       	cli
    580e:	be bf       	out	0x3e, r27	; 62
    5810:	0f be       	out	0x3f, r0	; 63
    5812:	ad bf       	out	0x3d, r26	; 61
    5814:	08 95       	ret

00005816 <i2c_task_init>:
    5816:	8f b7       	in	r24, 0x3f	; 63
    5818:	f8 94       	cli
    581a:	e6 e5       	ldi	r30, 0x56	; 86
    581c:	f7 e1       	ldi	r31, 0x17	; 23
    581e:	11 92       	st	Z+, r1
    5820:	11 92       	st	Z+, r1
    5822:	97 e1       	ldi	r25, 0x17	; 23
    5824:	e6 37       	cpi	r30, 0x76	; 118
    5826:	f9 07       	cpc	r31, r25
    5828:	d1 f7       	brne	.-12     	; 0x581e <i2c_task_init+0x8>
    582a:	10 92 76 17 	sts	0x1776, r1	; 0x801776 <i2c_task>
    582e:	91 e0       	ldi	r25, 0x01	; 1
    5830:	90 93 78 17 	sts	0x1778, r25	; 0x801778 <i2c_task+0x2>
    5834:	10 92 77 17 	sts	0x1777, r1	; 0x801777 <i2c_task+0x1>
    5838:	10 92 79 17 	sts	0x1779, r1	; 0x801779 <i2c_task+0x3>
    583c:	8f bf       	out	0x3f, r24	; 63
    583e:	08 95       	ret

00005840 <i2c_task_op_add>:
    5840:	ef 92       	push	r14
    5842:	ff 92       	push	r15
    5844:	0f 93       	push	r16
    5846:	1f 93       	push	r17
    5848:	cf 93       	push	r28
    584a:	df 93       	push	r29
    584c:	d8 2f       	mov	r29, r24
    584e:	c6 2f       	mov	r28, r22
    5850:	7a 01       	movw	r14, r20
    5852:	02 2f       	mov	r16, r18
    5854:	1f b7       	in	r17, 0x3f	; 63
    5856:	6a e0       	ldi	r22, 0x0A	; 10
    5858:	70 e0       	ldi	r23, 0x00	; 0
    585a:	81 e0       	ldi	r24, 0x01	; 1
    585c:	90 e0       	ldi	r25, 0x00	; 0
    585e:	a8 db       	rcall	.-2224   	; 0x4fb0 <safecalloc>
    5860:	fc 01       	movw	r30, r24
    5862:	89 2b       	or	r24, r25
    5864:	89 f0       	breq	.+34     	; 0x5888 <i2c_task_op_add+0x48>
    5866:	f8 94       	cli
    5868:	11 82       	std	Z+1, r1	; 0x01
    586a:	12 82       	std	Z+2, r1	; 0x02
    586c:	dd 0f       	add	r29, r29
    586e:	c1 70       	andi	r28, 0x01	; 1
    5870:	cd 2b       	or	r28, r29
    5872:	c0 83       	st	Z, r28
    5874:	8a e0       	ldi	r24, 0x0A	; 10
    5876:	90 e0       	ldi	r25, 0x00	; 0
    5878:	95 83       	std	Z+5, r25	; 0x05
    587a:	84 83       	std	Z+4, r24	; 0x04
    587c:	13 82       	std	Z+3, r1	; 0x03
    587e:	06 83       	std	Z+6, r16	; 0x06
    5880:	17 82       	std	Z+7, r1	; 0x07
    5882:	f1 86       	std	Z+9, r15	; 0x09
    5884:	e0 86       	std	Z+8, r14	; 0x08
    5886:	1f bf       	out	0x3f, r17	; 63
    5888:	cf 01       	movw	r24, r30
    588a:	cd b7       	in	r28, 0x3d	; 61
    588c:	de b7       	in	r29, 0x3e	; 62
    588e:	e6 e0       	ldi	r30, 0x06	; 6
    5890:	0c 94 35 e7 	jmp	0x1ce6a	; 0x1ce6a <__epilogue_restores__+0x18>

00005894 <i2c_init>:
    5894:	cf 93       	push	r28
    5896:	00 d0       	rcall	.+0      	; 0x5898 <i2c_init+0x4>
    5898:	1f 92       	push	r1
    589a:	9b 01       	movw	r18, r22
    589c:	ac 01       	movw	r20, r24
    589e:	cf b7       	in	r28, 0x3f	; 63
    58a0:	60 e0       	ldi	r22, 0x00	; 0
    58a2:	7d e2       	ldi	r23, 0x2D	; 45
    58a4:	81 e3       	ldi	r24, 0x31	; 49
    58a6:	91 e0       	ldi	r25, 0x01	; 1
    58a8:	0e 94 a0 e6 	call	0x1cd40	; 0x1cd40 <__udivmodsi4>
    58ac:	da 01       	movw	r26, r20
    58ae:	c9 01       	movw	r24, r18
    58b0:	40 97       	sbiw	r24, 0x10	; 16
    58b2:	a1 09       	sbc	r26, r1
    58b4:	b1 09       	sbc	r27, r1
    58b6:	ac 01       	movw	r20, r24
    58b8:	bd 01       	movw	r22, r26
    58ba:	76 95       	lsr	r23
    58bc:	67 95       	ror	r22
    58be:	57 95       	ror	r21
    58c0:	47 95       	ror	r20
    58c2:	ca 01       	movw	r24, r20
    58c4:	88 27       	eor	r24, r24
    58c6:	89 2b       	or	r24, r25
    58c8:	59 f0       	breq	.+22     	; 0x58e0 <i2c_init+0x4c>
    58ca:	8e ed       	ldi	r24, 0xDE	; 222
    58cc:	93 e0       	ldi	r25, 0x03	; 3
    58ce:	a0 e0       	ldi	r26, 0x00	; 0
    58d0:	ed b7       	in	r30, 0x3d	; 61
    58d2:	fe b7       	in	r31, 0x3e	; 62
    58d4:	81 83       	std	Z+1, r24	; 0x01
    58d6:	92 83       	std	Z+2, r25	; 0x02
    58d8:	a3 83       	std	Z+3, r26	; 0x03
    58da:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    58de:	3a c0       	rjmp	.+116    	; 0x5954 <i2c_init+0xc0>
    58e0:	f8 94       	cli
    58e2:	40 93 b8 00 	sts	0x00B8, r20	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    58e6:	10 92 47 1a 	sts	0x1A47, r1	; 0x801a47 <i2c+0x1>
    58ea:	81 e0       	ldi	r24, 0x01	; 1
    58ec:	80 93 48 1a 	sts	0x1A48, r24	; 0x801a48 <i2c+0x2>
    58f0:	10 92 76 17 	sts	0x1776, r1	; 0x801776 <i2c_task>
    58f4:	80 93 78 17 	sts	0x1778, r24	; 0x801778 <i2c_task+0x2>
    58f8:	40 9a       	sbi	0x08, 0	; 8
    58fa:	41 9a       	sbi	0x08, 1	; 8
    58fc:	84 e8       	ldi	r24, 0x84	; 132
    58fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5902:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
    5906:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    590a:	8c 7f       	andi	r24, 0xFC	; 252
    590c:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5910:	80 91 55 17 	lds	r24, 0x1755	; 0x801755 <i2c_init_status>
    5914:	81 11       	cpse	r24, r1
    5916:	1d c0       	rjmp	.+58     	; 0x5952 <i2c_init+0xbe>
    5918:	e6 e5       	ldi	r30, 0x56	; 86
    591a:	f7 e1       	ldi	r31, 0x17	; 23
    591c:	11 92       	st	Z+, r1
    591e:	11 92       	st	Z+, r1
    5920:	27 e1       	ldi	r18, 0x17	; 23
    5922:	e6 37       	cpi	r30, 0x76	; 118
    5924:	f2 07       	cpc	r31, r18
    5926:	d1 f7       	brne	.-12     	; 0x591c <i2c_init+0x88>
    5928:	61 e0       	ldi	r22, 0x01	; 1
    592a:	70 e0       	ldi	r23, 0x00	; 0
    592c:	86 ea       	ldi	r24, 0xA6	; 166
    592e:	9b e2       	ldi	r25, 0x2B	; 43
    5930:	0e 94 da 34 	call	0x69b4	; 0x69b4 <set_timers>
    5934:	01 96       	adiw	r24, 0x01	; 1
    5936:	51 f4       	brne	.+20     	; 0x594c <i2c_init+0xb8>
    5938:	87 ec       	ldi	r24, 0xC7	; 199
    593a:	93 e0       	ldi	r25, 0x03	; 3
    593c:	a0 e0       	ldi	r26, 0x00	; 0
    593e:	ed b7       	in	r30, 0x3d	; 61
    5940:	fe b7       	in	r31, 0x3e	; 62
    5942:	81 83       	std	Z+1, r24	; 0x01
    5944:	92 83       	std	Z+2, r25	; 0x02
    5946:	a3 83       	std	Z+3, r26	; 0x03
    5948:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    594c:	81 e0       	ldi	r24, 0x01	; 1
    594e:	80 93 55 17 	sts	0x1755, r24	; 0x801755 <i2c_init_status>
    5952:	cf bf       	out	0x3f, r28	; 63
    5954:	0f 90       	pop	r0
    5956:	0f 90       	pop	r0
    5958:	0f 90       	pop	r0
    595a:	cf 91       	pop	r28
    595c:	08 95       	ret

0000595e <i2c_done>:
///@brief Is i2c structure done sending/receiving ?
///
/// @return  1 DONE, 0 NOT DONE
int8_t i2c_done()
{
	delayus(1);
    595e:	61 e0       	ldi	r22, 0x01	; 1
    5960:	70 e0       	ldi	r23, 0x00	; 0
    5962:	80 e0       	ldi	r24, 0x00	; 0
    5964:	90 e0       	ldi	r25, 0x00	; 0
    5966:	a5 db       	rcall	.-2230   	; 0x50b2 <delayus>
	if(!i2c.enable || i2c.done )
    5968:	80 91 47 1a 	lds	r24, 0x1A47	; 0x801a47 <i2c+0x1>
    596c:	88 23       	and	r24, r24
    596e:	39 f0       	breq	.+14     	; 0x597e <i2c_done+0x20>
		return(1);
    5970:	81 e0       	ldi	r24, 0x01	; 1
    5972:	90 91 48 1a 	lds	r25, 0x1A48	; 0x801a48 <i2c+0x2>
    5976:	91 11       	cpse	r25, r1
    5978:	03 c0       	rjmp	.+6      	; 0x5980 <i2c_done+0x22>
    597a:	80 e0       	ldi	r24, 0x00	; 0
    597c:	08 95       	ret
    597e:	81 e0       	ldi	r24, 0x01	; 1
	return(0);
}
    5980:	08 95       	ret

00005982 <i2c_task_done>:
///@brief Are all i2c_task_op[] pointers done sending/receiving ?
///
/// @return  1 DONE, 0 NOT DONE
int8_t i2c_task_done()
{
	delayus(1);
    5982:	61 e0       	ldi	r22, 0x01	; 1
    5984:	70 e0       	ldi	r23, 0x00	; 0
    5986:	80 e0       	ldi	r24, 0x00	; 0
    5988:	90 e0       	ldi	r25, 0x00	; 0
    598a:	93 db       	rcall	.-2266   	; 0x50b2 <delayus>
	if(!i2c_task.enable || i2c_task.done )
    598c:	80 91 76 17 	lds	r24, 0x1776	; 0x801776 <i2c_task>
    5990:	88 23       	and	r24, r24
    5992:	39 f0       	breq	.+14     	; 0x59a2 <i2c_task_done+0x20>
		return(1);
    5994:	81 e0       	ldi	r24, 0x01	; 1
    5996:	90 91 78 17 	lds	r25, 0x1778	; 0x801778 <i2c_task+0x2>
    599a:	91 11       	cpse	r25, r1
    599c:	03 c0       	rjmp	.+6      	; 0x59a4 <i2c_task_done+0x22>
    599e:	80 e0       	ldi	r24, 0x00	; 0
    59a0:	08 95       	ret
    59a2:	81 e0       	ldi	r24, 0x01	; 1
	return(0);
}
    59a4:	08 95       	ret

000059a6 <i2c_send_start>:
///@brief Send I2C START and enable interrupts
///
/// @return  void
void i2c_send_start()
{
	i2c.done = 0;
    59a6:	e6 e4       	ldi	r30, 0x46	; 70
    59a8:	fa e1       	ldi	r31, 0x1A	; 26
    59aa:	12 82       	std	Z+2, r1	; 0x02
	i2c.enable = 1;
    59ac:	81 e0       	ldi	r24, 0x01	; 1
    59ae:	81 83       	std	Z+1, r24	; 0x01
	i2c.timeout = I2C_TIMEOUT;		// Start timeout timer
    59b0:	8a e0       	ldi	r24, 0x0A	; 10
    59b2:	90 e0       	ldi	r25, 0x00	; 0
    59b4:	95 83       	std	Z+5, r25	; 0x05
    59b6:	84 83       	std	Z+4, r24	; 0x04
	// Start a transactions
	// TWI Enable
	// TWI Interrupt Enable
	// TWI Interrupt Clear
	// TWI SEND RESTART
	TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWSTA);
    59b8:	85 ea       	ldi	r24, 0xA5	; 165
    59ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    59be:	08 95       	ret

000059c0 <i2c_task_run>:

/// @brief Run all valid i2c_task_op[] tasks
///
/// @return  void
void i2c_task_run()
{
    59c0:	ef 92       	push	r14
    59c2:	ff 92       	push	r15
    59c4:	0f 93       	push	r16
    59c6:	1f 93       	push	r17
    59c8:	cf 93       	push	r28
    59ca:	df 93       	push	r29
	uint8_t sreg = SREG;
    59cc:	ff b6       	in	r15, 0x3f	; 63
	i2c_op_t *o;
    uint8_t run = 0;
	int8_t i;


	cli();
    59ce:	f8 94       	cli
	i2c_task.done = 0;
    59d0:	10 92 78 17 	sts	0x1778, r1	; 0x801778 <i2c_task+0x2>
	i2c_task.error = 0;
    59d4:	10 92 79 17 	sts	0x1779, r1	; 0x801779 <i2c_task+0x3>
	i2c_task.ind = 0;
    59d8:	10 92 77 17 	sts	0x1777, r1	; 0x801777 <i2c_task+0x1>

	// re-enable tasks
	for(i=0;i2c_check_op(i);++i)
    59dc:	c0 e0       	ldi	r28, 0x00	; 0
/// @return  void
void i2c_task_run()
{
	uint8_t sreg = SREG;
	i2c_op_t *o;
    uint8_t run = 0;
    59de:	d0 e0       	ldi	r29, 0x00	; 0

	// re-enable tasks
	for(i=0;i2c_check_op(i);++i)
	{
		o = i2c_task_op[i];
		o->enable = 1;
    59e0:	ee 24       	eor	r14, r14
    59e2:	e3 94       	inc	r14
		o->done = 0;
		o->flags = 0;
		o->ind = 0;
		o->timeout = I2C_TIMEOUT;
    59e4:	0a e0       	ldi	r16, 0x0A	; 10
    59e6:	10 e0       	ldi	r17, 0x00	; 0
	i2c_task.done = 0;
	i2c_task.error = 0;
	i2c_task.ind = 0;

	// re-enable tasks
	for(i=0;i2c_check_op(i);++i)
    59e8:	8c 2f       	mov	r24, r28
    59ea:	c6 de       	rcall	.-628    	; 0x5778 <i2c_check_op>
    59ec:	88 23       	and	r24, r24
    59ee:	d1 f0       	breq	.+52     	; 0x5a24 <i2c_task_run+0x64>
	{
		o = i2c_task_op[i];
    59f0:	ec 2f       	mov	r30, r28
    59f2:	ee 0f       	add	r30, r30
    59f4:	ff 0b       	sbc	r31, r31
    59f6:	ea 5a       	subi	r30, 0xAA	; 170
    59f8:	f8 4e       	sbci	r31, 0xE8	; 232
    59fa:	01 90       	ld	r0, Z+
    59fc:	f0 81       	ld	r31, Z
    59fe:	e0 2d       	mov	r30, r0
		o->enable = 1;
    5a00:	e1 82       	std	Z+1, r14	; 0x01
		o->done = 0;
    5a02:	12 82       	std	Z+2, r1	; 0x02
		o->flags = 0;
    5a04:	13 82       	std	Z+3, r1	; 0x03
		o->ind = 0;
    5a06:	17 82       	std	Z+7, r1	; 0x07
		o->timeout = I2C_TIMEOUT;
    5a08:	15 83       	std	Z+5, r17	; 0x05
    5a0a:	04 83       	std	Z+4, r16	; 0x04
		if(!run)
    5a0c:	d1 11       	cpse	r29, r1
    5a0e:	07 c0       	rjmp	.+14     	; 0x5a1e <i2c_task_run+0x5e>
		{
			run = 1;
			i2c = *o;
    5a10:	8a e0       	ldi	r24, 0x0A	; 10
    5a12:	a6 e4       	ldi	r26, 0x46	; 70
    5a14:	ba e1       	ldi	r27, 0x1A	; 26
    5a16:	01 90       	ld	r0, Z+
    5a18:	0d 92       	st	X+, r0
    5a1a:	8a 95       	dec	r24
    5a1c:	e1 f7       	brne	.-8      	; 0x5a16 <i2c_task_run+0x56>
    5a1e:	cf 5f       	subi	r28, 0xFF	; 255
    5a20:	d1 e0       	ldi	r29, 0x01	; 1
    5a22:	e2 cf       	rjmp	.-60     	; 0x59e8 <i2c_task_run+0x28>
		}
	}

	if(run)
    5a24:	dd 23       	and	r29, r29
    5a26:	91 f0       	breq	.+36     	; 0x5a4c <i2c_task_run+0x8c>
	{
		// TASK callback
		i2c_callback = i2c_task_next_op;
    5a28:	8d e7       	ldi	r24, 0x7D	; 125
    5a2a:	9d e2       	ldi	r25, 0x2D	; 45
    5a2c:	90 93 7b 17 	sts	0x177B, r25	; 0x80177b <i2c_callback+0x1>
    5a30:	80 93 7a 17 	sts	0x177A, r24	; 0x80177a <i2c_callback>

		i2c_task.enable = 1;
    5a34:	81 e0       	ldi	r24, 0x01	; 1
    5a36:	80 93 76 17 	sts	0x1776, r24	; 0x801776 <i2c_task>
		i2c_task.done = 0;
    5a3a:	10 92 78 17 	sts	0x1778, r1	; 0x801778 <i2c_task+0x2>

        // Reset Status
        TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    5a3e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5a42:	8c 7f       	andi	r24, 0xFC	; 252
    5a44:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
        // TWI Interrupt Clear
        // TWI SEND RESTART
        // TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWSTA);
        // Disable Slave Mode

		i2c_send_start();
    5a48:	ae df       	rcall	.-164    	; 0x59a6 <i2c_send_start>
    5a4a:	15 c0       	rjmp	.+42     	; 0x5a76 <i2c_task_run+0xb6>
        // FIXME we should notify the user ?
		// Nothing to DO
		// User Error

		// TASK callback
		i2c_callback = NULL;
    5a4c:	10 92 7b 17 	sts	0x177B, r1	; 0x80177b <i2c_callback+0x1>
    5a50:	10 92 7a 17 	sts	0x177A, r1	; 0x80177a <i2c_callback>

		// TASK Nothing to DO
		i2c_task.enable = 0;
    5a54:	10 92 76 17 	sts	0x1776, r1	; 0x801776 <i2c_task>
		i2c_task.done = 1;
    5a58:	81 e0       	ldi	r24, 0x01	; 1
    5a5a:	80 93 78 17 	sts	0x1778, r24	; 0x801778 <i2c_task+0x2>

		// I2C Nothing to do
        i2c.done = 1;
    5a5e:	80 93 48 1a 	sts	0x1A48, r24	; 0x801a48 <i2c+0x2>
        i2c.enable = 0;
    5a62:	10 92 47 1a 	sts	0x1A47, r1	; 0x801a47 <i2c+0x1>

        // TWI Enable
        // TWI Disable Enable
        // TWI Interrupt Clear
        TWCR = _BV(TWEN) | _BV(TWINT);
    5a66:	84 e8       	ldi	r24, 0x84	; 132
    5a68:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
        // Reset status
        TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    5a6c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5a70:	8c 7f       	andi	r24, 0xFC	; 252
    5a72:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
        // Disable Slave Mode
        TWAR = 0;
    5a76:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
	}
	// Disable Slave Mode

	SREG = sreg;
    5a7a:	ff be       	out	0x3f, r15	; 63

}
    5a7c:	cd b7       	in	r28, 0x3d	; 61
    5a7e:	de b7       	in	r29, 0x3e	; 62
    5a80:	e6 e0       	ldi	r30, 0x06	; 6
    5a82:	0c 94 35 e7 	jmp	0x1ce6a	; 0x1ce6a <__epilogue_restores__+0x18>

00005a86 <i2c_fn>:
/// @param[in] *buf: pointer to buffer for send or receive
/// @param[in] len: size of buffer to read or write
/// @return  1 = OK, 0 = ERROR
uint8_t i2c_fn(uint8_t address, uint8_t mode, uint8_t *buf, uint8_t len)
{
	uint8_t sreg = SREG;
    5a86:	9f b7       	in	r25, 0x3f	; 63
	
    cli();
    5a88:	f8 94       	cli

	// sign task only
	i2c_callback = NULL;
    5a8a:	10 92 7b 17 	sts	0x177B, r1	; 0x80177b <i2c_callback+0x1>
    5a8e:	10 92 7a 17 	sts	0x177A, r1	; 0x80177a <i2c_callback>

	i2c.enable = 1; // Enabled
    5a92:	31 e0       	ldi	r19, 0x01	; 1
    5a94:	30 93 47 1a 	sts	0x1A47, r19	; 0x801a47 <i2c+0x1>
	i2c.done = 0;
    5a98:	10 92 48 1a 	sts	0x1A48, r1	; 0x801a48 <i2c+0x2>
    i2c.address = (address << 1) | (mode & 1);
    5a9c:	88 0f       	add	r24, r24
    5a9e:	61 70       	andi	r22, 0x01	; 1
    5aa0:	68 2b       	or	r22, r24
    5aa2:	60 93 46 1a 	sts	0x1A46, r22	; 0x801a46 <i2c>
	i2c.flags = 0;
    5aa6:	10 92 49 1a 	sts	0x1A49, r1	; 0x801a49 <i2c+0x3>
    i2c.len = len;
    5aaa:	20 93 4c 1a 	sts	0x1A4C, r18	; 0x801a4c <i2c+0x6>
    i2c.ind = 0;
    5aae:	10 92 4d 1a 	sts	0x1A4D, r1	; 0x801a4d <i2c+0x7>
    i2c.buf = buf;
    5ab2:	50 93 4f 1a 	sts	0x1A4F, r21	; 0x801a4f <i2c+0x9>
    5ab6:	40 93 4e 1a 	sts	0x1A4E, r20	; 0x801a4e <i2c+0x8>

	// Reset Status
	TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    5aba:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5abe:	8c 7f       	andi	r24, 0xFC	; 252
    5ac0:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>

	// Disable Slave Mode
	TWAR = 0;
    5ac4:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>

	SREG = sreg;
    5ac8:	9f bf       	out	0x3f, r25	; 63

	i2c_send_start();
    5aca:	6d df       	rcall	.-294    	; 0x59a6 <i2c_send_start>
	{
		printf("timeout: %d\r",(int)i2c.timeout);
	}
	printf("\n");
#else
	while(! i2c_done() )
    5acc:	48 df       	rcall	.-368    	; 0x595e <i2c_done>
    5ace:	88 23       	and	r24, r24
    5ad0:	e9 f3       	breq	.-6      	; 0x5acc <i2c_fn+0x46>
    5ad2:	81 e0       	ldi	r24, 0x01	; 1
		;
#endif
	return( i2c.flags ? 0 : 1);
    5ad4:	90 91 49 1a 	lds	r25, 0x1A49	; 0x801a49 <i2c+0x3>
    5ad8:	91 11       	cpse	r25, r1
    5ada:	80 e0       	ldi	r24, 0x00	; 0
    5adc:	08 95       	ret

00005ade <i2c_send_stop>:
}
    5ade:	e6 e4       	ldi	r30, 0x46	; 70
///
/// @return  void
void i2c_send_stop()
{
    // All transactions are done
    i2c.done = 1;
    5ae0:	fa e1       	ldi	r31, 0x1A	; 26
    5ae2:	81 e0       	ldi	r24, 0x01	; 1
    5ae4:	82 83       	std	Z+2, r24	; 0x02
    i2c.enable = 0;
    5ae6:	11 82       	std	Z+1, r1	; 0x01
    // We are DONE
    // TWI Enable
    // TWI Interrupt Disable
    // TWI Interrupt Clear
    // TWI SEND STOP
    TWCR = _BV(TWEN) | _BV(TWINT) | _BV(TWSTO);
    5ae8:	84 e9       	ldi	r24, 0x94	; 148
    5aea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	delayus(10);
    5aee:	6a e0       	ldi	r22, 0x0A	; 10
    5af0:	70 e0       	ldi	r23, 0x00	; 0
    5af2:	80 e0       	ldi	r24, 0x00	; 0
    5af4:	90 e0       	ldi	r25, 0x00	; 0
    5af6:	dd ca       	rjmp	.-2630   	; 0x50b2 <delayus>
    5af8:	08 95       	ret

00005afa <i2c_task_next_op>:

///@brief I2C task ISR callback function
///
/// @return  void
int8_t i2c_task_next_op()
{
    5afa:	cf 93       	push	r28
    5afc:	df 93       	push	r29
	i2c_op_t *o;

	// NOTE: we are in an ISR do not disable other interrupts

	if(i2c_task.enable)
    5afe:	80 91 76 17 	lds	r24, 0x1776	; 0x801776 <i2c_task>
    5b02:	88 23       	and	r24, r24
    5b04:	09 f4       	brne	.+2      	; 0x5b08 <i2c_task_next_op+0xe>
    5b06:	46 c0       	rjmp	.+140    	; 0x5b94 <i2c_task_next_op+0x9a>
	{
		// Save state of LAST operation
		if(i2c_check_op(i2c_task.ind) )
    5b08:	80 91 77 17 	lds	r24, 0x1777	; 0x801777 <i2c_task+0x1>
    5b0c:	35 de       	rcall	.-918    	; 0x5778 <i2c_check_op>
    5b0e:	88 23       	and	r24, r24
    5b10:	b1 f0       	breq	.+44     	; 0x5b3e <i2c_task_next_op+0x44>
		{
			o = i2c_task_op[i2c_task.ind];
    5b12:	e0 91 77 17 	lds	r30, 0x1777	; 0x801777 <i2c_task+0x1>
    5b16:	ee 0f       	add	r30, r30
    5b18:	ff 0b       	sbc	r31, r31
    5b1a:	ea 5a       	subi	r30, 0xAA	; 170
    5b1c:	f8 4e       	sbci	r31, 0xE8	; 232
    5b1e:	c0 81       	ld	r28, Z
    5b20:	d1 81       	ldd	r29, Z+1	; 0x01
			// Save state in last opperation
			*o = i2c;
    5b22:	8a e0       	ldi	r24, 0x0A	; 10
    5b24:	e6 e4       	ldi	r30, 0x46	; 70
    5b26:	fa e1       	ldi	r31, 0x1A	; 26
    5b28:	de 01       	movw	r26, r28
    5b2a:	01 90       	ld	r0, Z+
    5b2c:	0d 92       	st	X+, r0
    5b2e:	8a 95       	dec	r24
    5b30:	e1 f7       	brne	.-8      	; 0x5b2a <i2c_task_next_op+0x30>
			if(o->flags)
    5b32:	8b 81       	ldd	r24, Y+3	; 0x03
    5b34:	88 23       	and	r24, r24
    5b36:	19 f0       	breq	.+6      	; 0x5b3e <i2c_task_next_op+0x44>
				i2c_task.error = 1;
    5b38:	81 e0       	ldi	r24, 0x01	; 1
    5b3a:	80 93 79 17 	sts	0x1779, r24	; 0x801779 <i2c_task+0x3>
		}

		if(i2c_check_op(i2c_task.ind+1) )
    5b3e:	80 91 77 17 	lds	r24, 0x1777	; 0x801777 <i2c_task+0x1>
    5b42:	8f 5f       	subi	r24, 0xFF	; 255
    5b44:	19 de       	rcall	.-974    	; 0x5778 <i2c_check_op>
    5b46:	88 23       	and	r24, r24
    5b48:	29 f1       	breq	.+74     	; 0x5b94 <i2c_task_next_op+0x9a>
		{
			i2c_task.ind++;
    5b4a:	e0 91 77 17 	lds	r30, 0x1777	; 0x801777 <i2c_task+0x1>
    5b4e:	ef 5f       	subi	r30, 0xFF	; 255
    5b50:	e0 93 77 17 	sts	0x1777, r30	; 0x801777 <i2c_task+0x1>

			o = i2c_task_op[i2c_task.ind];
    5b54:	ee 0f       	add	r30, r30
    5b56:	ff 0b       	sbc	r31, r31
    5b58:	ea 5a       	subi	r30, 0xAA	; 170
    5b5a:	f8 4e       	sbci	r31, 0xE8	; 232
    5b5c:	01 90       	ld	r0, Z+
    5b5e:	f0 81       	ld	r31, Z
    5b60:	e0 2d       	mov	r30, r0

			if( o->enable == 1 || o->done == 0)
    5b62:	81 81       	ldd	r24, Z+1	; 0x01
    5b64:	81 30       	cpi	r24, 0x01	; 1
    5b66:	19 f0       	breq	.+6      	; 0x5b6e <i2c_task_next_op+0x74>
    5b68:	82 81       	ldd	r24, Z+2	; 0x02
    5b6a:	81 11       	cpse	r24, r1
    5b6c:	13 c0       	rjmp	.+38     	; 0x5b94 <i2c_task_next_op+0x9a>
			{
				o->timeout = I2C_TIMEOUT;
    5b6e:	8a e0       	ldi	r24, 0x0A	; 10
    5b70:	90 e0       	ldi	r25, 0x00	; 0
    5b72:	95 83       	std	Z+5, r25	; 0x05
    5b74:	84 83       	std	Z+4, r24	; 0x04
				o->flags = 0;
    5b76:	13 82       	std	Z+3, r1	; 0x03
				o->ind = 0;
    5b78:	17 82       	std	Z+7, r1	; 0x07
				o->enable = 1;
    5b7a:	81 e0       	ldi	r24, 0x01	; 1
    5b7c:	81 83       	std	Z+1, r24	; 0x01
				o->done = 0;
    5b7e:	12 82       	std	Z+2, r1	; 0x02

				i2c = *o;
    5b80:	8a e0       	ldi	r24, 0x0A	; 10
    5b82:	a6 e4       	ldi	r26, 0x46	; 70
    5b84:	ba e1       	ldi	r27, 0x1A	; 26
    5b86:	01 90       	ld	r0, Z+
    5b88:	0d 92       	st	X+, r0
    5b8a:	8a 95       	dec	r24

				i2c_send_start();
    5b8c:	e1 f7       	brne	.-8      	; 0x5b86 <i2c_task_next_op+0x8c>
    5b8e:	0b df       	rcall	.-490    	; 0x59a6 <i2c_send_start>

				return(1);
    5b90:	81 e0       	ldi	r24, 0x01	; 1
    5b92:	0f c0       	rjmp	.+30     	; 0x5bb2 <i2c_task_next_op+0xb8>
			}
		}
	}
	// program error
	// Disable TASK
	i2c_task.enable = 0;
    5b94:	10 92 76 17 	sts	0x1776, r1	; 0x801776 <i2c_task>
	i2c_task.done = 1;
    5b98:	81 e0       	ldi	r24, 0x01	; 1
    5b9a:	80 93 78 17 	sts	0x1778, r24	; 0x801778 <i2c_task+0x2>

	// I2C disable
	i2c.done = 1;
    5b9e:	80 93 48 1a 	sts	0x1A48, r24	; 0x801a48 <i2c+0x2>
	i2c.enable = 0;
    5ba2:	10 92 47 1a 	sts	0x1A47, r1	; 0x801a47 <i2c+0x1>
	i2c.flags = 0;
    5ba6:	10 92 49 1a 	sts	0x1A49, r1	; 0x801a49 <i2c+0x3>
	i2c.ind = 0;
    5baa:	10 92 4d 1a 	sts	0x1A4D, r1	; 0x801a4d <i2c+0x7>

	i2c_send_stop();
    5bae:	97 df       	rcall	.-210    	; 0x5ade <i2c_send_stop>

	return(0);
    5bb0:	80 e0       	ldi	r24, 0x00	; 0
}
    5bb2:	df 91       	pop	r29
    5bb4:	cf 91       	pop	r28
    5bb6:	08 95       	ret

00005bb8 <i2c_next>:
{

	// IF we have an i2c_callback() function then
	// it must save status and reset i2c structure for next operation

	if(i2c_callback)
    5bb8:	e0 91 7a 17 	lds	r30, 0x177A	; 0x80177a <i2c_callback>
    5bbc:	f0 91 7b 17 	lds	r31, 0x177B	; 0x80177b <i2c_callback+0x1>
    5bc0:	30 97       	sbiw	r30, 0x00	; 0
    5bc2:	11 f0       	breq	.+4      	; 0x5bc8 <i2c_next+0x10>
	    i2c_callback();
    5bc4:	09 95       	icall
    5bc6:	08 95       	ret
	else
		i2c_send_stop();
    5bc8:	8a cf       	rjmp	.-236    	; 0x5ade <i2c_send_stop>
    5bca:	08 95       	ret

00005bcc <__vector_26>:

///@brief I2C ISR for send/receive
///
/// @return  void
ISR(TWI_vect)
{
    5bcc:	1f 92       	push	r1
    5bce:	0f 92       	push	r0
    5bd0:	0f b6       	in	r0, 0x3f	; 63
    5bd2:	0f 92       	push	r0
    5bd4:	11 24       	eor	r1, r1
    5bd6:	0b b6       	in	r0, 0x3b	; 59
    5bd8:	0f 92       	push	r0
    5bda:	2f 93       	push	r18
    5bdc:	3f 93       	push	r19
    5bde:	4f 93       	push	r20
    5be0:	5f 93       	push	r21
    5be2:	6f 93       	push	r22
    5be4:	7f 93       	push	r23
    5be6:	8f 93       	push	r24
    5be8:	9f 93       	push	r25
    5bea:	af 93       	push	r26
    5bec:	bf 93       	push	r27
    5bee:	ef 93       	push	r30
    5bf0:	ff 93       	push	r31
	// FYI: reading TWSR clears the status
	// twi.h defines TW_STATUS
    // #define TW_STATUS (TWSR & TW_STATUS_MASK)
    uint8_t status = TW_STATUS;	
    5bf2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>

	// Are we Enabled to Receive/Send ?
	// Are we Done ?
	// Program errors - these should not happen
	if(!i2c.enable || i2c.done || !i2c.buf || !i2c.len )
    5bf6:	90 91 47 1a 	lds	r25, 0x1A47	; 0x801a47 <i2c+0x1>
    5bfa:	99 23       	and	r25, r25
    5bfc:	09 f1       	breq	.+66     	; 0x5c40 <__vector_26+0x74>
    5bfe:	90 91 48 1a 	lds	r25, 0x1A48	; 0x801a48 <i2c+0x2>
    5c02:	91 11       	cpse	r25, r1
    5c04:	1d c0       	rjmp	.+58     	; 0x5c40 <__vector_26+0x74>
    5c06:	20 91 4e 1a 	lds	r18, 0x1A4E	; 0x801a4e <i2c+0x8>
    5c0a:	30 91 4f 1a 	lds	r19, 0x1A4F	; 0x801a4f <i2c+0x9>
    5c0e:	21 15       	cp	r18, r1
    5c10:	31 05       	cpc	r19, r1
    5c12:	b1 f0       	breq	.+44     	; 0x5c40 <__vector_26+0x74>
    5c14:	90 91 4c 1a 	lds	r25, 0x1A4C	; 0x801a4c <i2c+0x6>
    5c18:	99 23       	and	r25, r25
    5c1a:	91 f0       	breq	.+36     	; 0x5c40 <__vector_26+0x74>
		i2c_send_stop();
		return;
	}

	// TUMEOUT ? STOP everything
	if(i2c.timeout == 0)
    5c1c:	40 91 4a 1a 	lds	r20, 0x1A4A	; 0x801a4a <i2c+0x4>
    5c20:	50 91 4b 1a 	lds	r21, 0x1A4B	; 0x801a4b <i2c+0x5>
    5c24:	45 2b       	or	r20, r21
    5c26:	71 f4       	brne	.+28     	; 0x5c44 <__vector_26+0x78>
	{
		i2c.flags |= (I2C_OP_TIMEOUT);
    5c28:	80 91 49 1a 	lds	r24, 0x1A49	; 0x801a49 <i2c+0x3>
    5c2c:	81 60       	ori	r24, 0x01	; 1
    5c2e:	80 93 49 1a 	sts	0x1A49, r24	; 0x801a49 <i2c+0x3>
		i2c_task.enable = 0;
    5c32:	10 92 76 17 	sts	0x1776, r1	; 0x801776 <i2c_task>
		i2c_task.done = 1;
    5c36:	81 e0       	ldi	r24, 0x01	; 1
    5c38:	80 93 78 17 	sts	0x1778, r24	; 0x801778 <i2c_task+0x2>
		i2c_task.error = 1;
    5c3c:	80 93 79 17 	sts	0x1779, r24	; 0x801779 <i2c_task+0x3>
		i2c_send_stop();
    5c40:	4e df       	rcall	.-356    	; 0x5ade <i2c_send_stop>
		return;
    5c42:	9b c0       	rjmp	.+310    	; 0x5d7a <__vector_26+0x1ae>
	}

	// Master Receiver mode
	switch (status)
    5c44:	88 7f       	andi	r24, 0xF8	; 248
    5c46:	80 33       	cpi	r24, 0x30	; 48
    5c48:	09 f4       	brne	.+2      	; 0x5c4c <__vector_26+0x80>
    5c4a:	83 c0       	rjmp	.+262    	; 0x5d52 <__vector_26+0x186>
    5c4c:	70 f4       	brcc	.+28     	; 0x5c6a <__vector_26+0x9e>
    5c4e:	88 31       	cpi	r24, 0x18	; 24
    5c50:	09 f1       	breq	.+66     	; 0x5c94 <__vector_26+0xc8>
    5c52:	28 f4       	brcc	.+10     	; 0x5c5e <__vector_26+0x92>
    5c54:	88 30       	cpi	r24, 0x08	; 8
    5c56:	c9 f0       	breq	.+50     	; 0x5c8a <__vector_26+0xbe>
    5c58:	80 31       	cpi	r24, 0x10	; 16
    5c5a:	b9 f0       	breq	.+46     	; 0x5c8a <__vector_26+0xbe>
    5c5c:	83 c0       	rjmp	.+262    	; 0x5d64 <__vector_26+0x198>
    5c5e:	80 32       	cpi	r24, 0x20	; 32
    5c60:	09 f4       	brne	.+2      	; 0x5c64 <__vector_26+0x98>
    5c62:	65 c0       	rjmp	.+202    	; 0x5d2e <__vector_26+0x162>
    5c64:	88 32       	cpi	r24, 0x28	; 40
    5c66:	b1 f0       	breq	.+44     	; 0x5c94 <__vector_26+0xc8>
    5c68:	7d c0       	rjmp	.+250    	; 0x5d64 <__vector_26+0x198>
    5c6a:	88 34       	cpi	r24, 0x48	; 72
    5c6c:	09 f4       	brne	.+2      	; 0x5c70 <__vector_26+0xa4>
    5c6e:	68 c0       	rjmp	.+208    	; 0x5d40 <__vector_26+0x174>
    5c70:	38 f4       	brcc	.+14     	; 0x5c80 <__vector_26+0xb4>
    5c72:	88 33       	cpi	r24, 0x38	; 56
    5c74:	09 f4       	brne	.+2      	; 0x5c78 <__vector_26+0xac>
    5c76:	57 c0       	rjmp	.+174    	; 0x5d26 <__vector_26+0x15a>
    5c78:	80 34       	cpi	r24, 0x40	; 64
    5c7a:	09 f4       	brne	.+2      	; 0x5c7e <__vector_26+0xb2>
    5c7c:	42 c0       	rjmp	.+132    	; 0x5d02 <__vector_26+0x136>
    5c7e:	72 c0       	rjmp	.+228    	; 0x5d64 <__vector_26+0x198>
    5c80:	80 35       	cpi	r24, 0x50	; 80
    5c82:	79 f1       	breq	.+94     	; 0x5ce2 <__vector_26+0x116>
    5c84:	88 35       	cpi	r24, 0x58	; 88
    5c86:	b9 f0       	breq	.+46     	; 0x5cb6 <__vector_26+0xea>
    5c88:	6d c0       	rjmp	.+218    	; 0x5d64 <__vector_26+0x198>
	{
		case TW_START:		// START has been transmitted
		case TW_REP_START:  // RE-START has been transmitted
			i2c.ind = 0;
    5c8a:	10 92 4d 1a 	sts	0x1A4D, r1	; 0x801a4d <i2c+0x7>
			TWDR = i2c.address;
    5c8e:	80 91 46 1a 	lds	r24, 0x1A46	; 0x801a46 <i2c>
    5c92:	0e c0       	rjmp	.+28     	; 0x5cb0 <__vector_26+0xe4>
			break;


		case TW_MT_SLA_ACK:	// SLA+W trasnmitted and ACK received
		case TW_MT_DATA_ACK:// Data trasnmitted and ACK received
			if (i2c.ind < i2c.len)
    5c94:	80 91 4d 1a 	lds	r24, 0x1A4D	; 0x801a4d <i2c+0x7>
    5c98:	89 17       	cp	r24, r25
    5c9a:	ec f4       	brge	.+58     	; 0x5cd6 <__vector_26+0x10a>
			{
				TWDR = i2c.buf[i2c.ind++];
    5c9c:	91 e0       	ldi	r25, 0x01	; 1
    5c9e:	98 0f       	add	r25, r24
    5ca0:	90 93 4d 1a 	sts	0x1A4D, r25	; 0x801a4d <i2c+0x7>
    5ca4:	f9 01       	movw	r30, r18
    5ca6:	e8 0f       	add	r30, r24
    5ca8:	f1 1d       	adc	r31, r1
    5caa:	87 fd       	sbrc	r24, 7
    5cac:	fa 95       	dec	r31
    5cae:	80 81       	ld	r24, Z
    5cb0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5cb4:	36 c0       	rjmp	.+108    	; 0x5d22 <__vector_26+0x156>
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
			}
			break;

		case TW_MR_DATA_NACK:	// Data received NACK transmitted
			if(i2c.ind < i2c.len)
    5cb6:	80 91 4d 1a 	lds	r24, 0x1A4D	; 0x801a4d <i2c+0x7>
    5cba:	89 17       	cp	r24, r25
    5cbc:	64 f4       	brge	.+24     	; 0x5cd6 <__vector_26+0x10a>
				i2c.buf[i2c.ind++] = TWDR;
    5cbe:	91 e0       	ldi	r25, 0x01	; 1
    5cc0:	98 0f       	add	r25, r24
    5cc2:	90 93 4d 1a 	sts	0x1A4D, r25	; 0x801a4d <i2c+0x7>
    5cc6:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5cca:	f9 01       	movw	r30, r18
    5ccc:	e8 0f       	add	r30, r24
    5cce:	f1 1d       	adc	r31, r1
    5cd0:	87 fd       	sbrc	r24, 7
    5cd2:	fa 95       	dec	r31
    5cd4:	90 83       	st	Z, r25
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
			}
			else
			{
				// Done
				i2c.done = 1;
    5cd6:	81 e0       	ldi	r24, 0x01	; 1
    5cd8:	80 93 48 1a 	sts	0x1A48, r24	; 0x801a48 <i2c+0x2>
				i2c.enable = 0;
    5cdc:	10 92 47 1a 	sts	0x1A47, r1	; 0x801a47 <i2c+0x1>
    5ce0:	4b c0       	rjmp	.+150    	; 0x5d78 <__vector_26+0x1ac>
				i2c_next();
			}
			break;

		case TW_MR_DATA_ACK:	// Data received ACK transmitted
			if(i2c.ind < i2c.len)
    5ce2:	80 91 4d 1a 	lds	r24, 0x1A4D	; 0x801a4d <i2c+0x7>
    5ce6:	89 17       	cp	r24, r25
    5ce8:	64 f4       	brge	.+24     	; 0x5d02 <__vector_26+0x136>
				i2c.buf[i2c.ind++] = TWDR;
    5cea:	91 e0       	ldi	r25, 0x01	; 1
    5cec:	98 0f       	add	r25, r24
    5cee:	90 93 4d 1a 	sts	0x1A4D, r25	; 0x801a4d <i2c+0x7>
    5cf2:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5cf6:	f9 01       	movw	r30, r18
    5cf8:	e8 0f       	add	r30, r24
    5cfa:	f1 1d       	adc	r31, r1
    5cfc:	87 fd       	sbrc	r24, 7
    5cfe:	fa 95       	dec	r31
    5d00:	90 83       	st	Z, r25
		case TW_MR_SLA_ACK:		// SLA+R transmitted ACK received
			if ((i2c.ind+1) < i2c.len)
    5d02:	80 91 4d 1a 	lds	r24, 0x1A4D	; 0x801a4d <i2c+0x7>
    5d06:	08 2e       	mov	r0, r24
    5d08:	00 0c       	add	r0, r0
    5d0a:	99 0b       	sbc	r25, r25
    5d0c:	01 96       	adiw	r24, 0x01	; 1
    5d0e:	20 91 4c 1a 	lds	r18, 0x1A4C	; 0x801a4c <i2c+0x6>
    5d12:	02 2e       	mov	r0, r18
    5d14:	00 0c       	add	r0, r0
    5d16:	33 0b       	sbc	r19, r19
    5d18:	82 17       	cp	r24, r18
    5d1a:	93 07       	cpc	r25, r19
    5d1c:	14 f4       	brge	.+4      	; 0x5d22 <__vector_26+0x156>
			{
				// TWI Enable
				// TWI Interrupt Enable
				// TWI Interrupt Clear
				// SEND ACK after receive
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    5d1e:	85 ec       	ldi	r24, 0xC5	; 197
    5d20:	03 c0       	rjmp	.+6      	; 0x5d28 <__vector_26+0x15c>
				// LAST BYTE
				// TWI Enable
				// TWI Interrupt Enable
				// TWI Interrupt Clear
				// SEND NACK after receive
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    5d22:	85 e8       	ldi	r24, 0x85	; 133
    5d24:	01 c0       	rjmp	.+2      	; 0x5d28 <__vector_26+0x15c>
		case TW_ARB_LOST:
			// TWI Enable
			// TWI Interrupt Enable
			// TWI Interrupt Clear
			// TWI SEND RESTART
			TWCR = _BV(TWEN) |  _BV(TWIE) | _BV(TWINT) | _BV(TWSTA);
    5d26:	85 ea       	ldi	r24, 0xA5	; 165
    5d28:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			break;
    5d2c:	26 c0       	rjmp	.+76     	; 0x5d7a <__vector_26+0x1ae>

// Error cases
		case TW_MT_SLA_NACK:	// SLA+W transmitted NACK received
			i2c.done = 1;
    5d2e:	81 e0       	ldi	r24, 0x01	; 1
    5d30:	80 93 48 1a 	sts	0x1A48, r24	; 0x801a48 <i2c+0x2>
			i2c.enable = 0;
    5d34:	10 92 47 1a 	sts	0x1A47, r1	; 0x801a47 <i2c+0x1>
			i2c.flags |= I2C_TW_MT_SLA_NACK;
    5d38:	80 91 49 1a 	lds	r24, 0x1A49	; 0x801a49 <i2c+0x3>
    5d3c:	88 60       	ori	r24, 0x08	; 8
    5d3e:	1a c0       	rjmp	.+52     	; 0x5d74 <__vector_26+0x1a8>
			// ERROR
			i2c_next();
			break;

		case TW_MR_SLA_NACK:	// SLA+R transmitted NACK received
			i2c.done = 1;
    5d40:	81 e0       	ldi	r24, 0x01	; 1
    5d42:	80 93 48 1a 	sts	0x1A48, r24	; 0x801a48 <i2c+0x2>
			i2c.enable = 0;
    5d46:	10 92 47 1a 	sts	0x1A47, r1	; 0x801a47 <i2c+0x1>
			i2c.flags |= I2C_TW_MR_SLA_NACK;
    5d4a:	80 91 49 1a 	lds	r24, 0x1A49	; 0x801a49 <i2c+0x3>
    5d4e:	80 61       	ori	r24, 0x10	; 16
    5d50:	11 c0       	rjmp	.+34     	; 0x5d74 <__vector_26+0x1a8>
			// ERROR
			i2c_next();
			break;

		case TW_MT_DATA_NACK:	// Data Transmitted NACK received
			i2c.done = 1;
    5d52:	81 e0       	ldi	r24, 0x01	; 1
    5d54:	80 93 48 1a 	sts	0x1A48, r24	; 0x801a48 <i2c+0x2>
			i2c.enable = 0;
    5d58:	10 92 47 1a 	sts	0x1A47, r1	; 0x801a47 <i2c+0x1>
			i2c.flags |= I2C_TW_MT_DATA_NACK;
    5d5c:	80 91 49 1a 	lds	r24, 0x1A49	; 0x801a49 <i2c+0x3>
    5d60:	80 62       	ori	r24, 0x20	; 32
    5d62:	08 c0       	rjmp	.+16     	; 0x5d74 <__vector_26+0x1a8>
			// ERROR
			i2c_next();
			break;

		default:				// Error
			i2c.done = 1;
    5d64:	81 e0       	ldi	r24, 0x01	; 1
    5d66:	80 93 48 1a 	sts	0x1A48, r24	; 0x801a48 <i2c+0x2>
			i2c.enable = 0;
    5d6a:	10 92 47 1a 	sts	0x1A47, r1	; 0x801a47 <i2c+0x1>
			// ERROR
			i2c.flags |= I2C_BUS_ERROR;
    5d6e:	80 91 49 1a 	lds	r24, 0x1A49	; 0x801a49 <i2c+0x3>
    5d72:	80 64       	ori	r24, 0x40	; 64
    5d74:	80 93 49 1a 	sts	0x1A49, r24	; 0x801a49 <i2c+0x3>
			i2c_next();
    5d78:	1f df       	rcall	.-450    	; 0x5bb8 <i2c_next>
			break;
	}
}
    5d7a:	ff 91       	pop	r31
    5d7c:	ef 91       	pop	r30
    5d7e:	bf 91       	pop	r27
    5d80:	af 91       	pop	r26
    5d82:	9f 91       	pop	r25
    5d84:	8f 91       	pop	r24
    5d86:	7f 91       	pop	r23
    5d88:	6f 91       	pop	r22
    5d8a:	5f 91       	pop	r21
    5d8c:	4f 91       	pop	r20
    5d8e:	3f 91       	pop	r19
    5d90:	2f 91       	pop	r18
    5d92:	0f 90       	pop	r0
    5d94:	0b be       	out	0x3b, r0	; 59
    5d96:	0f 90       	pop	r0
    5d98:	0f be       	out	0x3f, r0	; 63
    5d9a:	0f 90       	pop	r0
    5d9c:	1f 90       	pop	r1
    5d9e:	18 95       	reti

00005da0 <i2c_print_error>:
/// @brief Display Errors for i2c_task_op[index]
///
/// @param[in] index: index of i2c_task_op[] array
/// @return  void
void i2c_print_error(i2c_op_t *o)
{
    5da0:	cf 93       	push	r28
    5da2:	00 d0       	rcall	.+0      	; 0x5da4 <i2c_print_error+0x4>
    5da4:	00 d0       	rcall	.+0      	; 0x5da6 <i2c_print_error+0x6>
    5da6:	1f 92       	push	r1
    int flags = o->flags;
    5da8:	fc 01       	movw	r30, r24
    5daa:	c3 81       	ldd	r28, Z+3	; 0x03

	if(flags)
    5dac:	cc 23       	and	r28, r28
    5dae:	09 f4       	brne	.+2      	; 0x5db2 <i2c_print_error+0x12>
    5db0:	67 c0       	rjmp	.+206    	; 0x5e80 <i2c_print_error+0xe0>
	{
		printf("  %s\n", (i2c.done ? "DONE" : "ACTIVE") );
    5db2:	80 91 48 1a 	lds	r24, 0x1A48	; 0x801a48 <i2c+0x2>
    5db6:	81 11       	cpse	r24, r1
    5db8:	03 c0       	rjmp	.+6      	; 0x5dc0 <i2c_print_error+0x20>
    5dba:	88 e2       	ldi	r24, 0x28	; 40
    5dbc:	93 e0       	ldi	r25, 0x03	; 3
    5dbe:	02 c0       	rjmp	.+4      	; 0x5dc4 <i2c_print_error+0x24>
    5dc0:	83 e2       	ldi	r24, 0x23	; 35
    5dc2:	93 e0       	ldi	r25, 0x03	; 3
    5dc4:	ed b7       	in	r30, 0x3d	; 61
    5dc6:	fe b7       	in	r31, 0x3e	; 62
    5dc8:	95 83       	std	Z+5, r25	; 0x05
    5dca:	84 83       	std	Z+4, r24	; 0x04
    5dcc:	81 ec       	ldi	r24, 0xC1	; 193
    5dce:	93 e0       	ldi	r25, 0x03	; 3
    5dd0:	a0 e0       	ldi	r26, 0x00	; 0
    5dd2:	81 83       	std	Z+1, r24	; 0x01
    5dd4:	92 83       	std	Z+2, r25	; 0x02
    5dd6:	a3 83       	std	Z+3, r26	; 0x03
    5dd8:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
		if(flags & I2C_OP_TIMEOUT)
    5ddc:	c0 ff       	sbrs	r28, 0
    5dde:	0a c0       	rjmp	.+20     	; 0x5df4 <i2c_print_error+0x54>
			printf("  OP_TIMEOUT\n");
    5de0:	83 eb       	ldi	r24, 0xB3	; 179
    5de2:	93 e0       	ldi	r25, 0x03	; 3
    5de4:	a0 e0       	ldi	r26, 0x00	; 0
    5de6:	ed b7       	in	r30, 0x3d	; 61
    5de8:	fe b7       	in	r31, 0x3e	; 62
    5dea:	81 83       	std	Z+1, r24	; 0x01
    5dec:	92 83       	std	Z+2, r25	; 0x02
    5dee:	a3 83       	std	Z+3, r26	; 0x03
    5df0:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
		if(flags & I2C_OP_LEN)
    5df4:	c1 ff       	sbrs	r28, 1
    5df6:	0a c0       	rjmp	.+20     	; 0x5e0c <i2c_print_error+0x6c>
			printf("  OP_LEN\n");
    5df8:	89 ea       	ldi	r24, 0xA9	; 169
    5dfa:	93 e0       	ldi	r25, 0x03	; 3
    5dfc:	a0 e0       	ldi	r26, 0x00	; 0
    5dfe:	ed b7       	in	r30, 0x3d	; 61
    5e00:	fe b7       	in	r31, 0x3e	; 62
    5e02:	81 83       	std	Z+1, r24	; 0x01
    5e04:	92 83       	std	Z+2, r25	; 0x02
    5e06:	a3 83       	std	Z+3, r26	; 0x03
    5e08:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
		if(flags & I2C_OP_ERROR)
    5e0c:	c2 ff       	sbrs	r28, 2
    5e0e:	0a c0       	rjmp	.+20     	; 0x5e24 <i2c_print_error+0x84>
			printf("  OP_ERROR\n");
    5e10:	8d e9       	ldi	r24, 0x9D	; 157
    5e12:	93 e0       	ldi	r25, 0x03	; 3
    5e14:	a0 e0       	ldi	r26, 0x00	; 0
    5e16:	ed b7       	in	r30, 0x3d	; 61
    5e18:	fe b7       	in	r31, 0x3e	; 62
    5e1a:	81 83       	std	Z+1, r24	; 0x01
    5e1c:	92 83       	std	Z+2, r25	; 0x02
    5e1e:	a3 83       	std	Z+3, r26	; 0x03
    5e20:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
		if(flags & I2C_TW_MR_SLA_NACK)
    5e24:	c4 ff       	sbrs	r28, 4
    5e26:	0a c0       	rjmp	.+20     	; 0x5e3c <i2c_print_error+0x9c>
			printf("  TW_MR_SLA_NACK\n");
    5e28:	8b e8       	ldi	r24, 0x8B	; 139
    5e2a:	93 e0       	ldi	r25, 0x03	; 3
    5e2c:	a0 e0       	ldi	r26, 0x00	; 0
    5e2e:	ed b7       	in	r30, 0x3d	; 61
    5e30:	fe b7       	in	r31, 0x3e	; 62
    5e32:	81 83       	std	Z+1, r24	; 0x01
    5e34:	92 83       	std	Z+2, r25	; 0x02
    5e36:	a3 83       	std	Z+3, r26	; 0x03
    5e38:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
		if(flags & I2C_TW_MT_SLA_NACK)
    5e3c:	c3 ff       	sbrs	r28, 3
    5e3e:	0a c0       	rjmp	.+20     	; 0x5e54 <i2c_print_error+0xb4>
			printf("  TW_MT_SLA_NACK\n");
    5e40:	89 e7       	ldi	r24, 0x79	; 121
    5e42:	93 e0       	ldi	r25, 0x03	; 3
    5e44:	a0 e0       	ldi	r26, 0x00	; 0
    5e46:	ed b7       	in	r30, 0x3d	; 61
    5e48:	fe b7       	in	r31, 0x3e	; 62
    5e4a:	81 83       	std	Z+1, r24	; 0x01
    5e4c:	92 83       	std	Z+2, r25	; 0x02
    5e4e:	a3 83       	std	Z+3, r26	; 0x03
    5e50:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
		if(flags & I2C_TW_MT_DATA_NACK)
    5e54:	c5 ff       	sbrs	r28, 5
    5e56:	0a c0       	rjmp	.+20     	; 0x5e6c <i2c_print_error+0xcc>
			printf("  TW_MT_DATA_NACK\n");
    5e58:	86 e6       	ldi	r24, 0x66	; 102
    5e5a:	93 e0       	ldi	r25, 0x03	; 3
    5e5c:	a0 e0       	ldi	r26, 0x00	; 0
    5e5e:	ed b7       	in	r30, 0x3d	; 61
    5e60:	fe b7       	in	r31, 0x3e	; 62
    5e62:	81 83       	std	Z+1, r24	; 0x01
    5e64:	92 83       	std	Z+2, r25	; 0x02
    5e66:	a3 83       	std	Z+3, r26	; 0x03
    5e68:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
		printf("\n");
    5e6c:	84 e6       	ldi	r24, 0x64	; 100
    5e6e:	93 e0       	ldi	r25, 0x03	; 3
    5e70:	a0 e0       	ldi	r26, 0x00	; 0
    5e72:	ed b7       	in	r30, 0x3d	; 61
    5e74:	fe b7       	in	r31, 0x3e	; 62
    5e76:	81 83       	std	Z+1, r24	; 0x01
    5e78:	92 83       	std	Z+2, r25	; 0x02
    5e7a:	a3 83       	std	Z+3, r26	; 0x03
    5e7c:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
	}
}
    5e80:	0f 90       	pop	r0
    5e82:	0f 90       	pop	r0
    5e84:	0f 90       	pop	r0
    5e86:	0f 90       	pop	r0
    5e88:	0f 90       	pop	r0
    5e8a:	cf 91       	pop	r28
    5e8c:	08 95       	ret

00005e8e <i2c_display_task_errors>:

///@brief Display any task errors
void i2c_display_task_errors()
{
    5e8e:	6f 92       	push	r6
    5e90:	7f 92       	push	r7
    5e92:	8f 92       	push	r8
    5e94:	af 92       	push	r10
    5e96:	bf 92       	push	r11
    5e98:	cf 92       	push	r12
    5e9a:	df 92       	push	r13
    5e9c:	ef 92       	push	r14
    5e9e:	0f 93       	push	r16
    5ea0:	1f 93       	push	r17
    5ea2:	cf 93       	push	r28
    5ea4:	df 93       	push	r29
    5ea6:	00 d0       	rcall	.+0      	; 0x5ea8 <i2c_display_task_errors+0x1a>
    5ea8:	00 d0       	rcall	.+0      	; 0x5eaa <i2c_display_task_errors+0x1c>
    5eaa:	1f 92       	push	r1
	int8_t i;
	printf("i2c_task.done: %d\n", (int) i2c_task.done);
    5eac:	80 91 78 17 	lds	r24, 0x1778	; 0x801778 <i2c_task+0x2>
    5eb0:	90 e0       	ldi	r25, 0x00	; 0
    5eb2:	ed b7       	in	r30, 0x3d	; 61
    5eb4:	fe b7       	in	r31, 0x3e	; 62
    5eb6:	95 83       	std	Z+5, r25	; 0x05
    5eb8:	84 83       	std	Z+4, r24	; 0x04
    5eba:	81 e5       	ldi	r24, 0x51	; 81
    5ebc:	93 e0       	ldi	r25, 0x03	; 3
    5ebe:	a0 e0       	ldi	r26, 0x00	; 0
    5ec0:	81 83       	std	Z+1, r24	; 0x01
    5ec2:	92 83       	std	Z+2, r25	; 0x02
    5ec4:	a3 83       	std	Z+3, r26	; 0x03
    5ec6:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
	printf("i2c_task.error: %d\n", (int) i2c_task.error);
    5eca:	80 91 79 17 	lds	r24, 0x1779	; 0x801779 <i2c_task+0x3>
    5ece:	90 e0       	ldi	r25, 0x00	; 0
    5ed0:	ed b7       	in	r30, 0x3d	; 61
    5ed2:	fe b7       	in	r31, 0x3e	; 62
    5ed4:	95 83       	std	Z+5, r25	; 0x05
    5ed6:	84 83       	std	Z+4, r24	; 0x04
    5ed8:	8d e3       	ldi	r24, 0x3D	; 61
    5eda:	93 e0       	ldi	r25, 0x03	; 3
    5edc:	a0 e0       	ldi	r26, 0x00	; 0
    5ede:	81 83       	std	Z+1, r24	; 0x01
    5ee0:	92 83       	std	Z+2, r25	; 0x02
    5ee2:	a3 83       	std	Z+3, r26	; 0x03
    5ee4:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    5ee8:	c6 e5       	ldi	r28, 0x56	; 86
    5eea:	d7 e1       	ldi	r29, 0x17	; 23
	for(i=0;i2c_task_op[i] && i < I2C_OPS;++i)
    5eec:	00 e0       	ldi	r16, 0x00	; 0
    5eee:	10 e0       	ldi	r17, 0x00	; 0
	{
		printf("task: %d\n", (int) i);
    5ef0:	83 e3       	ldi	r24, 0x33	; 51
    5ef2:	93 e0       	ldi	r25, 0x03	; 3
    5ef4:	6c 01       	movw	r12, r24
    5ef6:	e1 2c       	mov	r14, r1
		i2c_print_error(i2c_task_op[i]);
		printf("\n");
    5ef8:	81 e3       	ldi	r24, 0x31	; 49
    5efa:	93 e0       	ldi	r25, 0x03	; 3
    5efc:	3c 01       	movw	r6, r24
    5efe:	81 2c       	mov	r8, r1
void i2c_display_task_errors()
{
	int8_t i;
	printf("i2c_task.done: %d\n", (int) i2c_task.done);
	printf("i2c_task.error: %d\n", (int) i2c_task.error);
	for(i=0;i2c_task_op[i] && i < I2C_OPS;++i)
    5f00:	30 2f       	mov	r19, r16
    5f02:	21 2f       	mov	r18, r17
    5f04:	5e 01       	movw	r10, r28
    5f06:	0f 5f       	subi	r16, 0xFF	; 255
    5f08:	1f 4f       	sbci	r17, 0xFF	; 255
    5f0a:	88 81       	ld	r24, Y
    5f0c:	99 81       	ldd	r25, Y+1	; 0x01
    5f0e:	89 2b       	or	r24, r25
    5f10:	b1 f0       	breq	.+44     	; 0x5f3e <i2c_display_task_errors+0xb0>
	{
		printf("task: %d\n", (int) i);
    5f12:	ed b7       	in	r30, 0x3d	; 61
    5f14:	fe b7       	in	r31, 0x3e	; 62
    5f16:	34 83       	std	Z+4, r19	; 0x04
    5f18:	25 83       	std	Z+5, r18	; 0x05
    5f1a:	c1 82       	std	Z+1, r12	; 0x01
    5f1c:	d2 82       	std	Z+2, r13	; 0x02
    5f1e:	e3 82       	std	Z+3, r14	; 0x03
    5f20:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    5f24:	22 96       	adiw	r28, 0x02	; 2
		i2c_print_error(i2c_task_op[i]);
    5f26:	f5 01       	movw	r30, r10
    5f28:	80 81       	ld	r24, Z
    5f2a:	91 81       	ldd	r25, Z+1	; 0x01
    5f2c:	39 df       	rcall	.-398    	; 0x5da0 <i2c_print_error>
		printf("\n");
    5f2e:	ed b7       	in	r30, 0x3d	; 61
    5f30:	fe b7       	in	r31, 0x3e	; 62
    5f32:	61 82       	std	Z+1, r6	; 0x01
    5f34:	72 82       	std	Z+2, r7	; 0x02
    5f36:	83 82       	std	Z+3, r8	; 0x03
    5f38:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    5f3c:	e1 cf       	rjmp	.-62     	; 0x5f00 <i2c_display_task_errors+0x72>
	}
}
    5f3e:	0f 90       	pop	r0
    5f40:	0f 90       	pop	r0
    5f42:	0f 90       	pop	r0
    5f44:	0f 90       	pop	r0
    5f46:	0f 90       	pop	r0
    5f48:	df 91       	pop	r29
    5f4a:	cf 91       	pop	r28
    5f4c:	1f 91       	pop	r17
    5f4e:	0f 91       	pop	r16
    5f50:	ef 90       	pop	r14
    5f52:	df 90       	pop	r13
    5f54:	cf 90       	pop	r12
    5f56:	bf 90       	pop	r11
    5f58:	af 90       	pop	r10
    5f5a:	8f 90       	pop	r8
    5f5c:	7f 90       	pop	r7
    5f5e:	6f 90       	pop	r6
    5f60:	08 95       	ret

00005f62 <BINtoBCD>:
/// @return 0 if not running.
/// @return -1 ERROR
int8_t rtc_run_test()
{
	return ( rtc_run(-1) );
}
    5f62:	6a e0       	ldi	r22, 0x0A	; 10
    5f64:	0e 94 6d e6 	call	0x1ccda	; 0x1ccda <__udivmodqi4>
    5f68:	82 95       	swap	r24
    5f6a:	80 7f       	andi	r24, 0xF0	; 240
    5f6c:	89 2b       	or	r24, r25
    5f6e:	08 95       	ret

00005f70 <BCDtoBIN>:
    5f70:	98 2f       	mov	r25, r24
    5f72:	92 95       	swap	r25
    5f74:	9f 70       	andi	r25, 0x0F	; 15
    5f76:	8f 70       	andi	r24, 0x0F	; 15
    5f78:	2a e0       	ldi	r18, 0x0A	; 10
    5f7a:	92 9f       	mul	r25, r18
    5f7c:	80 0d       	add	r24, r0
    5f7e:	11 24       	eor	r1, r1
    5f80:	08 95       	ret

00005f82 <i2c_rtc_write>:
    5f82:	ac e0       	ldi	r26, 0x0C	; 12
    5f84:	b0 e0       	ldi	r27, 0x00	; 0
    5f86:	e7 ec       	ldi	r30, 0xC7	; 199
    5f88:	ff e2       	ldi	r31, 0x2F	; 47
    5f8a:	0c 94 1b e7 	jmp	0x1ce36	; 0x1ce36 <__prologue_saves__+0x1c>
    5f8e:	9f ef       	ldi	r25, 0xFF	; 255
    5f90:	92 0f       	add	r25, r18
    5f92:	98 30       	cpi	r25, 0x08	; 8
    5f94:	50 f5       	brcc	.+84     	; 0x5fea <i2c_rtc_write+0x68>
    5f96:	6c 83       	std	Y+4, r22	; 0x04
    5f98:	90 e0       	ldi	r25, 0x00	; 0
    5f9a:	02 2f       	mov	r16, r18
    5f9c:	10 e0       	ldi	r17, 0x00	; 0
    5f9e:	69 2f       	mov	r22, r25
    5fa0:	09 2e       	mov	r0, r25
    5fa2:	00 0c       	add	r0, r0
    5fa4:	77 0b       	sbc	r23, r23
    5fa6:	60 17       	cp	r22, r16
    5fa8:	71 07       	cpc	r23, r17
    5faa:	6c f4       	brge	.+26     	; 0x5fc6 <i2c_rtc_write+0x44>
    5fac:	a5 e0       	ldi	r26, 0x05	; 5
    5fae:	b0 e0       	ldi	r27, 0x00	; 0
    5fb0:	ac 0f       	add	r26, r28
    5fb2:	bd 1f       	adc	r27, r29
    5fb4:	a6 0f       	add	r26, r22
    5fb6:	b7 1f       	adc	r27, r23
    5fb8:	64 0f       	add	r22, r20
    5fba:	75 1f       	adc	r23, r21
    5fbc:	fb 01       	movw	r30, r22
    5fbe:	30 81       	ld	r19, Z
    5fc0:	3c 93       	st	X, r19
    5fc2:	9f 5f       	subi	r25, 0xFF	; 255
    5fc4:	ec cf       	rjmp	.-40     	; 0x5f9e <i2c_rtc_write+0x1c>
    5fc6:	2f 5f       	subi	r18, 0xFF	; 255
    5fc8:	ae 01       	movw	r20, r28
    5fca:	4c 5f       	subi	r20, 0xFC	; 252
    5fcc:	5f 4f       	sbci	r21, 0xFF	; 255
    5fce:	60 e0       	ldi	r22, 0x00	; 0
    5fd0:	5a dd       	rcall	.-1356   	; 0x5a86 <i2c_fn>
    5fd2:	81 11       	cpse	r24, r1
    5fd4:	0c c0       	rjmp	.+24     	; 0x5fee <i2c_rtc_write+0x6c>
    5fd6:	8e ed       	ldi	r24, 0xDE	; 222
    5fd8:	94 e0       	ldi	r25, 0x04	; 4
    5fda:	a0 e0       	ldi	r26, 0x00	; 0
    5fdc:	ed b7       	in	r30, 0x3d	; 61
    5fde:	fe b7       	in	r31, 0x3e	; 62
    5fe0:	81 83       	std	Z+1, r24	; 0x01
    5fe2:	92 83       	std	Z+2, r25	; 0x02
    5fe4:	a3 83       	std	Z+3, r26	; 0x03
    5fe6:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    5fea:	80 e0       	ldi	r24, 0x00	; 0
    5fec:	01 c0       	rjmp	.+2      	; 0x5ff0 <i2c_rtc_write+0x6e>
    5fee:	81 e0       	ldi	r24, 0x01	; 1
    5ff0:	2c 96       	adiw	r28, 0x0c	; 12
    5ff2:	e4 e0       	ldi	r30, 0x04	; 4
    5ff4:	0c 94 37 e7 	jmp	0x1ce6e	; 0x1ce6e <__epilogue_restores__+0x1c>

00005ff8 <i2c_rtc_read>:
    5ff8:	a4 e0       	ldi	r26, 0x04	; 4
    5ffa:	b0 e0       	ldi	r27, 0x00	; 0
    5ffc:	e2 e0       	ldi	r30, 0x02	; 2
    5ffe:	f0 e3       	ldi	r31, 0x30	; 48
    6000:	0c 94 19 e7 	jmp	0x1ce32	; 0x1ce32 <__prologue_saves__+0x18>
    6004:	6c 83       	std	Y+4, r22	; 0x04
    6006:	9f ef       	ldi	r25, 0xFF	; 255
    6008:	92 0f       	add	r25, r18
    600a:	98 30       	cpi	r25, 0x08	; 8
    600c:	f8 f4       	brcc	.+62     	; 0x604c <i2c_rtc_read+0x54>
    600e:	02 2f       	mov	r16, r18
    6010:	7a 01       	movw	r14, r20
    6012:	18 2f       	mov	r17, r24
    6014:	21 e0       	ldi	r18, 0x01	; 1
    6016:	ae 01       	movw	r20, r28
    6018:	4c 5f       	subi	r20, 0xFC	; 252
    601a:	5f 4f       	sbci	r21, 0xFF	; 255
    601c:	60 e0       	ldi	r22, 0x00	; 0
    601e:	33 dd       	rcall	.-1434   	; 0x5a86 <i2c_fn>
    6020:	81 11       	cpse	r24, r1
    6022:	03 c0       	rjmp	.+6      	; 0x602a <i2c_rtc_read+0x32>
    6024:	82 ec       	ldi	r24, 0xC2	; 194
    6026:	94 e0       	ldi	r25, 0x04	; 4
    6028:	09 c0       	rjmp	.+18     	; 0x603c <i2c_rtc_read+0x44>
    602a:	20 2f       	mov	r18, r16
    602c:	a7 01       	movw	r20, r14
    602e:	61 e0       	ldi	r22, 0x01	; 1
    6030:	81 2f       	mov	r24, r17
    6032:	29 dd       	rcall	.-1454   	; 0x5a86 <i2c_fn>
    6034:	81 11       	cpse	r24, r1
    6036:	0c c0       	rjmp	.+24     	; 0x6050 <i2c_rtc_read+0x58>
    6038:	89 ea       	ldi	r24, 0xA9	; 169
    603a:	94 e0       	ldi	r25, 0x04	; 4
    603c:	a0 e0       	ldi	r26, 0x00	; 0
    603e:	ed b7       	in	r30, 0x3d	; 61
    6040:	fe b7       	in	r31, 0x3e	; 62
    6042:	81 83       	std	Z+1, r24	; 0x01
    6044:	92 83       	std	Z+2, r25	; 0x02
    6046:	a3 83       	std	Z+3, r26	; 0x03
    6048:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    604c:	80 e0       	ldi	r24, 0x00	; 0
    604e:	01 c0       	rjmp	.+2      	; 0x6052 <i2c_rtc_read+0x5a>
    6050:	81 e0       	ldi	r24, 0x01	; 1
    6052:	24 96       	adiw	r28, 0x04	; 4
    6054:	e6 e0       	ldi	r30, 0x06	; 6
    6056:	0c 94 35 e7 	jmp	0x1ce6a	; 0x1ce6a <__epilogue_restores__+0x18>

0000605a <i2c_rtc_init>:
    605a:	60 ea       	ldi	r22, 0xA0	; 160
    605c:	76 e8       	ldi	r23, 0x86	; 134
    605e:	81 e0       	ldi	r24, 0x01	; 1
    6060:	90 e0       	ldi	r25, 0x00	; 0
    6062:	18 cc       	rjmp	.-2000   	; 0x5894 <i2c_init>
    6064:	08 95       	ret

00006066 <rtc_write>:
    6066:	ab e0       	ldi	r26, 0x0B	; 11
    6068:	b0 e0       	ldi	r27, 0x00	; 0
    606a:	e9 e3       	ldi	r30, 0x39	; 57
    606c:	f0 e3       	ldi	r31, 0x30	; 48
    606e:	0c 94 1b e7 	jmp	0x1ce36	; 0x1ce36 <__prologue_saves__+0x1c>
    6072:	8c 01       	movw	r16, r24
    6074:	fc 01       	movw	r30, r24
    6076:	80 81       	ld	r24, Z
    6078:	74 df       	rcall	.-280    	; 0x5f62 <BINtoBCD>
    607a:	8f 77       	andi	r24, 0x7F	; 127
    607c:	8c 83       	std	Y+4, r24	; 0x04
    607e:	f8 01       	movw	r30, r16
    6080:	82 81       	ldd	r24, Z+2	; 0x02
    6082:	6f df       	rcall	.-290    	; 0x5f62 <BINtoBCD>
    6084:	8f 77       	andi	r24, 0x7F	; 127
    6086:	8d 83       	std	Y+5, r24	; 0x05
    6088:	f8 01       	movw	r30, r16
    608a:	84 81       	ldd	r24, Z+4	; 0x04
    608c:	6a df       	rcall	.-300    	; 0x5f62 <BINtoBCD>
    608e:	8f 73       	andi	r24, 0x3F	; 63
    6090:	8e 83       	std	Y+6, r24	; 0x06
    6092:	f8 01       	movw	r30, r16
    6094:	84 85       	ldd	r24, Z+12	; 0x0c
    6096:	87 70       	andi	r24, 0x07	; 7
    6098:	8f 5f       	subi	r24, 0xFF	; 255
    609a:	8f 83       	std	Y+7, r24	; 0x07
    609c:	86 81       	ldd	r24, Z+6	; 0x06
    609e:	61 df       	rcall	.-318    	; 0x5f62 <BINtoBCD>
    60a0:	8f 73       	andi	r24, 0x3F	; 63
    60a2:	88 87       	std	Y+8, r24	; 0x08
    60a4:	f8 01       	movw	r30, r16
    60a6:	80 85       	ldd	r24, Z+8	; 0x08
    60a8:	8f 5f       	subi	r24, 0xFF	; 255
    60aa:	5b df       	rcall	.-330    	; 0x5f62 <BINtoBCD>
    60ac:	8f 71       	andi	r24, 0x1F	; 31
    60ae:	89 87       	std	Y+9, r24	; 0x09
    60b0:	f8 01       	movw	r30, r16
    60b2:	82 85       	ldd	r24, Z+10	; 0x0a
    60b4:	84 56       	subi	r24, 0x64	; 100
    60b6:	55 df       	rcall	.-342    	; 0x5f62 <BINtoBCD>
    60b8:	8a 87       	std	Y+10, r24	; 0x0a
    60ba:	83 e9       	ldi	r24, 0x93	; 147
    60bc:	8b 87       	std	Y+11, r24	; 0x0b
    60be:	28 e0       	ldi	r18, 0x08	; 8
    60c0:	ae 01       	movw	r20, r28
    60c2:	4c 5f       	subi	r20, 0xFC	; 252
    60c4:	5f 4f       	sbci	r21, 0xFF	; 255
    60c6:	60 e0       	ldi	r22, 0x00	; 0
    60c8:	88 e6       	ldi	r24, 0x68	; 104
    60ca:	5b df       	rcall	.-330    	; 0x5f82 <i2c_rtc_write>
    60cc:	81 11       	cpse	r24, r1
    60ce:	0c c0       	rjmp	.+24     	; 0x60e8 <rtc_write+0x82>
    60d0:	88 e9       	ldi	r24, 0x98	; 152
    60d2:	94 e0       	ldi	r25, 0x04	; 4
    60d4:	a0 e0       	ldi	r26, 0x00	; 0
    60d6:	ed b7       	in	r30, 0x3d	; 61
    60d8:	fe b7       	in	r31, 0x3e	; 62
    60da:	81 83       	std	Z+1, r24	; 0x01
    60dc:	92 83       	std	Z+2, r25	; 0x02
    60de:	a3 83       	std	Z+3, r26	; 0x03
    60e0:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    60e4:	80 e0       	ldi	r24, 0x00	; 0
    60e6:	01 c0       	rjmp	.+2      	; 0x60ea <rtc_write+0x84>
    60e8:	81 e0       	ldi	r24, 0x01	; 1
    60ea:	2b 96       	adiw	r28, 0x0b	; 11
    60ec:	e4 e0       	ldi	r30, 0x04	; 4
    60ee:	0c 94 37 e7 	jmp	0x1ce6e	; 0x1ce6e <__epilogue_restores__+0x1c>

000060f2 <rtc_read>:
    60f2:	ab e0       	ldi	r26, 0x0B	; 11
    60f4:	b0 e0       	ldi	r27, 0x00	; 0
    60f6:	ef e7       	ldi	r30, 0x7F	; 127
    60f8:	f0 e3       	ldi	r31, 0x30	; 48
    60fa:	0c 94 1b e7 	jmp	0x1ce36	; 0x1ce36 <__prologue_saves__+0x1c>
    60fe:	8c 01       	movw	r16, r24
    6100:	28 e0       	ldi	r18, 0x08	; 8
    6102:	ae 01       	movw	r20, r28
    6104:	4c 5f       	subi	r20, 0xFC	; 252
    6106:	5f 4f       	sbci	r21, 0xFF	; 255
    6108:	60 e0       	ldi	r22, 0x00	; 0
    610a:	88 e6       	ldi	r24, 0x68	; 104
    610c:	75 df       	rcall	.-278    	; 0x5ff8 <i2c_rtc_read>
    610e:	81 11       	cpse	r24, r1
    6110:	0c c0       	rjmp	.+24     	; 0x612a <rtc_read+0x38>
    6112:	88 e8       	ldi	r24, 0x88	; 136
    6114:	94 e0       	ldi	r25, 0x04	; 4
    6116:	a0 e0       	ldi	r26, 0x00	; 0
    6118:	ed b7       	in	r30, 0x3d	; 61
    611a:	fe b7       	in	r31, 0x3e	; 62
    611c:	81 83       	std	Z+1, r24	; 0x01
    611e:	92 83       	std	Z+2, r25	; 0x02
    6120:	a3 83       	std	Z+3, r26	; 0x03
    6122:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    6126:	80 e0       	ldi	r24, 0x00	; 0
    6128:	33 c0       	rjmp	.+102    	; 0x6190 <rtc_read+0x9e>
    612a:	8c 81       	ldd	r24, Y+4	; 0x04
    612c:	8f 77       	andi	r24, 0x7F	; 127
    612e:	20 df       	rcall	.-448    	; 0x5f70 <BCDtoBIN>
    6130:	90 e0       	ldi	r25, 0x00	; 0
    6132:	f8 01       	movw	r30, r16
    6134:	91 83       	std	Z+1, r25	; 0x01
    6136:	80 83       	st	Z, r24
    6138:	8d 81       	ldd	r24, Y+5	; 0x05
    613a:	8f 77       	andi	r24, 0x7F	; 127
    613c:	19 df       	rcall	.-462    	; 0x5f70 <BCDtoBIN>
    613e:	90 e0       	ldi	r25, 0x00	; 0
    6140:	f8 01       	movw	r30, r16
    6142:	93 83       	std	Z+3, r25	; 0x03
    6144:	82 83       	std	Z+2, r24	; 0x02
    6146:	8e 81       	ldd	r24, Y+6	; 0x06
    6148:	8f 73       	andi	r24, 0x3F	; 63
    614a:	12 df       	rcall	.-476    	; 0x5f70 <BCDtoBIN>
    614c:	90 e0       	ldi	r25, 0x00	; 0
    614e:	f8 01       	movw	r30, r16
    6150:	95 83       	std	Z+5, r25	; 0x05
    6152:	84 83       	std	Z+4, r24	; 0x04
    6154:	8f 81       	ldd	r24, Y+7	; 0x07
    6156:	87 70       	andi	r24, 0x07	; 7
    6158:	90 e0       	ldi	r25, 0x00	; 0
    615a:	01 97       	sbiw	r24, 0x01	; 1
    615c:	95 87       	std	Z+13, r25	; 0x0d
    615e:	84 87       	std	Z+12, r24	; 0x0c
    6160:	88 85       	ldd	r24, Y+8	; 0x08
    6162:	8f 73       	andi	r24, 0x3F	; 63
    6164:	05 df       	rcall	.-502    	; 0x5f70 <BCDtoBIN>
    6166:	90 e0       	ldi	r25, 0x00	; 0
    6168:	f8 01       	movw	r30, r16
    616a:	97 83       	std	Z+7, r25	; 0x07
    616c:	86 83       	std	Z+6, r24	; 0x06
    616e:	89 85       	ldd	r24, Y+9	; 0x09
    6170:	8f 71       	andi	r24, 0x1F	; 31
    6172:	fe de       	rcall	.-516    	; 0x5f70 <BCDtoBIN>
    6174:	90 e0       	ldi	r25, 0x00	; 0
    6176:	01 97       	sbiw	r24, 0x01	; 1
    6178:	f8 01       	movw	r30, r16
    617a:	91 87       	std	Z+9, r25	; 0x09
    617c:	80 87       	std	Z+8, r24	; 0x08
    617e:	8a 85       	ldd	r24, Y+10	; 0x0a
    6180:	f7 de       	rcall	.-530    	; 0x5f70 <BCDtoBIN>
    6182:	90 e0       	ldi	r25, 0x00	; 0
    6184:	8c 59       	subi	r24, 0x9C	; 156
    6186:	9f 4f       	sbci	r25, 0xFF	; 255
    6188:	f8 01       	movw	r30, r16
    618a:	93 87       	std	Z+11, r25	; 0x0b
    618c:	82 87       	std	Z+10, r24	; 0x0a
    618e:	81 e0       	ldi	r24, 0x01	; 1
    6190:	2b 96       	adiw	r28, 0x0b	; 11
    6192:	e4 e0       	ldi	r30, 0x04	; 4
    6194:	0c 94 37 e7 	jmp	0x1ce6e	; 0x1ce6e <__epilogue_restores__+0x1c>

00006198 <rtc_run>:
    6198:	a4 e0       	ldi	r26, 0x04	; 4
    619a:	b0 e0       	ldi	r27, 0x00	; 0
    619c:	e2 ed       	ldi	r30, 0xD2	; 210
    619e:	f0 e3       	ldi	r31, 0x30	; 48
    61a0:	0c 94 1b e7 	jmp	0x1ce36	; 0x1ce36 <__prologue_saves__+0x1c>
    61a4:	8c 01       	movw	r16, r24
    61a6:	21 e0       	ldi	r18, 0x01	; 1
    61a8:	ae 01       	movw	r20, r28
    61aa:	4c 5f       	subi	r20, 0xFC	; 252
    61ac:	5f 4f       	sbci	r21, 0xFF	; 255
    61ae:	60 e0       	ldi	r22, 0x00	; 0
    61b0:	88 e6       	ldi	r24, 0x68	; 104
    61b2:	22 df       	rcall	.-444    	; 0x5ff8 <i2c_rtc_read>
    61b4:	81 11       	cpse	r24, r1
    61b6:	03 c0       	rjmp	.+6      	; 0x61be <rtc_run+0x26>
    61b8:	84 e7       	ldi	r24, 0x74	; 116
    61ba:	94 e0       	ldi	r25, 0x04	; 4
    61bc:	24 c0       	rjmp	.+72     	; 0x6206 <rtc_run+0x6e>
    61be:	8c 81       	ldd	r24, Y+4	; 0x04
    61c0:	0f 3f       	cpi	r16, 0xFF	; 255
    61c2:	ff ef       	ldi	r31, 0xFF	; 255
    61c4:	1f 07       	cpc	r17, r31
    61c6:	59 f4       	brne	.+22     	; 0x61de <rtc_run+0x46>
    61c8:	08 2e       	mov	r0, r24
    61ca:	00 0c       	add	r0, r0
    61cc:	99 0b       	sbc	r25, r25
    61ce:	80 95       	com	r24
    61d0:	90 95       	com	r25
    61d2:	89 2f       	mov	r24, r25
    61d4:	88 1f       	adc	r24, r24
    61d6:	88 27       	eor	r24, r24
    61d8:	88 1f       	adc	r24, r24
    61da:	90 e0       	ldi	r25, 0x00	; 0
    61dc:	20 c0       	rjmp	.+64     	; 0x621e <rtc_run+0x86>
    61de:	8f 77       	andi	r24, 0x7F	; 127
    61e0:	01 15       	cp	r16, r1
    61e2:	11 05       	cpc	r17, r1
    61e4:	11 f4       	brne	.+4      	; 0x61ea <rtc_run+0x52>
    61e6:	90 e8       	ldi	r25, 0x80	; 128
    61e8:	01 c0       	rjmp	.+2      	; 0x61ec <rtc_run+0x54>
    61ea:	90 e0       	ldi	r25, 0x00	; 0
    61ec:	89 2b       	or	r24, r25
    61ee:	8c 83       	std	Y+4, r24	; 0x04
    61f0:	21 e0       	ldi	r18, 0x01	; 1
    61f2:	ae 01       	movw	r20, r28
    61f4:	4c 5f       	subi	r20, 0xFC	; 252
    61f6:	5f 4f       	sbci	r21, 0xFF	; 255
    61f8:	60 e0       	ldi	r22, 0x00	; 0
    61fa:	88 e6       	ldi	r24, 0x68	; 104
    61fc:	c2 de       	rcall	.-636    	; 0x5f82 <i2c_rtc_write>
    61fe:	81 11       	cpse	r24, r1
    6200:	0d c0       	rjmp	.+26     	; 0x621c <rtc_run+0x84>
    6202:	8f e5       	ldi	r24, 0x5F	; 95
    6204:	94 e0       	ldi	r25, 0x04	; 4
    6206:	a0 e0       	ldi	r26, 0x00	; 0
    6208:	ed b7       	in	r30, 0x3d	; 61
    620a:	fe b7       	in	r31, 0x3e	; 62
    620c:	81 83       	std	Z+1, r24	; 0x01
    620e:	92 83       	std	Z+2, r25	; 0x02
    6210:	a3 83       	std	Z+3, r26	; 0x03
    6212:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    6216:	8f ef       	ldi	r24, 0xFF	; 255
    6218:	9f ef       	ldi	r25, 0xFF	; 255
    621a:	01 c0       	rjmp	.+2      	; 0x621e <rtc_run+0x86>
    621c:	c8 01       	movw	r24, r16
    621e:	24 96       	adiw	r28, 0x04	; 4
    6220:	e4 e0       	ldi	r30, 0x04	; 4
    6222:	0c 94 37 e7 	jmp	0x1ce6e	; 0x1ce6e <__epilogue_restores__+0x1c>

00006226 <rtc_init>:
/// @param[in] seconds: POSIX EPOCH time in seconds.
///
/// @return  run state 0 = STOP, 1 = RUN
/// @return -1 = ERROR
uint8_t rtc_init (int force, time_t seconds)
{
    6226:	a7 e0       	ldi	r26, 0x07	; 7
    6228:	b0 e0       	ldi	r27, 0x00	; 0
    622a:	e9 e1       	ldi	r30, 0x19	; 25
    622c:	f1 e3       	ldi	r31, 0x31	; 49
    622e:	0c 94 1b e7 	jmp	0x1ce36	; 0x1ce36 <__prologue_saves__+0x1c>
    6232:	8c 01       	movw	r16, r24
    6234:	4c 83       	std	Y+4, r20	; 0x04
    6236:	5d 83       	std	Y+5, r21	; 0x05
    6238:	6e 83       	std	Y+6, r22	; 0x06
    623a:	7f 83       	std	Y+7, r23	; 0x07
    int8_t    state;

    tm_t *tmp;

    i2c_rtc_init();
    623c:	0e df       	rcall	.-484    	; 0x605a <i2c_rtc_init>

    if(!force)
    623e:	01 15       	cp	r16, r1
    6240:	11 05       	cpc	r17, r1
    6242:	39 f4       	brne	.+14     	; 0x6252 <rtc_init+0x2c>
    {
        state = rtc_run(-1);
    6244:	8f ef       	ldi	r24, 0xFF	; 255
    6246:	9f ef       	ldi	r25, 0xFF	; 255
    6248:	a7 df       	rcall	.-178    	; 0x6198 <rtc_run>
        if(state < 0)
    624a:	87 fd       	sbrc	r24, 7
    624c:	16 c0       	rjmp	.+44     	; 0x627a <rtc_init+0x54>
        {
            rtc_ok = 0;
            return 0;
        }
        if(state == 0)                            // stopped
    624e:	81 11       	cpse	r24, r1
    6250:	22 c0       	rjmp	.+68     	; 0x6296 <rtc_init+0x70>
            force = 1;
    }

    if(force)                                     // INIT
    {
        if(rtc_run(0) < 0)                        // STOP RTC
    6252:	80 e0       	ldi	r24, 0x00	; 0
    6254:	90 e0       	ldi	r25, 0x00	; 0
    6256:	a0 df       	rcall	.-192    	; 0x6198 <rtc_run>
    6258:	97 fd       	sbrc	r25, 7
    625a:	0f c0       	rjmp	.+30     	; 0x627a <rtc_init+0x54>
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }

        tmp = gmtime(&seconds);
    625c:	ce 01       	movw	r24, r28
    625e:	04 96       	adiw	r24, 0x04	; 4
    6260:	a3 d6       	rcall	.+3398   	; 0x6fa8 <gmtime>
    6262:	00 97       	sbiw	r24, 0x00	; 0

        if(tmp == NULL || !rtc_write(tmp))
    6264:	81 f4       	brne	.+32     	; 0x6286 <rtc_init+0x60>
    6266:	81 e4       	ldi	r24, 0x41	; 65
        {
            printf("rtc_init  write epoch failed\n");
    6268:	94 e0       	ldi	r25, 0x04	; 4
    626a:	a0 e0       	ldi	r26, 0x00	; 0
    626c:	ed b7       	in	r30, 0x3d	; 61
    626e:	fe b7       	in	r31, 0x3e	; 62
    6270:	81 83       	std	Z+1, r24	; 0x01
    6272:	92 83       	std	Z+2, r25	; 0x02
    6274:	a3 83       	std	Z+3, r26	; 0x03
    6276:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    627a:	10 92 ee 19 	sts	0x19EE, r1	; 0x8019ee <rtc_ok+0x1>
            rtc_ok = 0;
    627e:	10 92 ed 19 	sts	0x19ED, r1	; 0x8019ed <rtc_ok>
            return 0;
    6282:	80 e0       	ldi	r24, 0x00	; 0
    6284:	0e c0       	rjmp	.+28     	; 0x62a2 <rtc_init+0x7c>
            return 0;
        }

        tmp = gmtime(&seconds);

        if(tmp == NULL || !rtc_write(tmp))
    6286:	ef de       	rcall	.-546    	; 0x6066 <rtc_write>
    6288:	88 23       	and	r24, r24
    628a:	69 f3       	breq	.-38     	; 0x6266 <rtc_init+0x40>
            printf("rtc_init  write epoch failed\n");
            rtc_ok = 0;
            return 0;
        }

        if(rtc_run(1) < 0)                        // START RTC
    628c:	81 e0       	ldi	r24, 0x01	; 1
    628e:	90 e0       	ldi	r25, 0x00	; 0
    6290:	83 df       	rcall	.-250    	; 0x6198 <rtc_run>
    6292:	97 fd       	sbrc	r25, 7
    6294:	f2 cf       	rjmp	.-28     	; 0x627a <rtc_init+0x54>
    6296:	81 e0       	ldi	r24, 0x01	; 1
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }
    }
    rtc_ok = 1;
    6298:	90 e0       	ldi	r25, 0x00	; 0
    629a:	90 93 ee 19 	sts	0x19EE, r25	; 0x8019ee <rtc_ok+0x1>
    629e:	80 93 ed 19 	sts	0x19ED, r24	; 0x8019ed <rtc_ok>
    62a2:	27 96       	adiw	r28, 0x07	; 7
    return 1;
}
    62a4:	e4 e0       	ldi	r30, 0x04	; 4
    62a6:	0c 94 37 e7 	jmp	0x1ce6e	; 0x1ce6e <__epilogue_restores__+0x1c>

000062aa <islower>:
    62aa:	9c 01       	movw	r18, r24
    if(!ptr)
        return(ptr);
    strncpy(ptr,str,len);
    return(ptr);

}
    62ac:	21 56       	subi	r18, 0x61	; 97
    62ae:	31 09       	sbc	r19, r1
    62b0:	81 e0       	ldi	r24, 0x01	; 1
    62b2:	90 e0       	ldi	r25, 0x00	; 0
    62b4:	2a 31       	cpi	r18, 0x1A	; 26
    62b6:	31 05       	cpc	r19, r1
    62b8:	10 f0       	brcs	.+4      	; 0x62be <islower+0x14>
    62ba:	80 e0       	ldi	r24, 0x00	; 0
    62bc:	90 e0       	ldi	r25, 0x00	; 0
    62be:	08 95       	ret

000062c0 <toupper>:
    62c0:	cf 93       	push	r28
    62c2:	df 93       	push	r29
    62c4:	ec 01       	movw	r28, r24
    62c6:	f1 df       	rcall	.-30     	; 0x62aa <islower>
    62c8:	89 2b       	or	r24, r25
    62ca:	19 f0       	breq	.+6      	; 0x62d2 <toupper+0x12>
    62cc:	ce 01       	movw	r24, r28
    62ce:	80 97       	sbiw	r24, 0x20	; 32
    62d0:	01 c0       	rjmp	.+2      	; 0x62d4 <toupper+0x14>
    62d2:	ce 01       	movw	r24, r28
    62d4:	df 91       	pop	r29
    62d6:	cf 91       	pop	r28
    62d8:	08 95       	ret

000062da <strcpy>:
    62da:	fc 01       	movw	r30, r24
    62dc:	db 01       	movw	r26, r22
    62de:	2d 91       	ld	r18, X+
    62e0:	bd 01       	movw	r22, r26
    62e2:	01 96       	adiw	r24, 0x01	; 1
    62e4:	22 23       	and	r18, r18
    62e6:	11 f0       	breq	.+4      	; 0x62ec <strcpy+0x12>
    62e8:	20 83       	st	Z, r18
    62ea:	f7 cf       	rjmp	.-18     	; 0x62da <strcpy>
    62ec:	10 82       	st	Z, r1
    62ee:	08 95       	ret

000062f0 <strncpy>:
    62f0:	db 01       	movw	r26, r22
    62f2:	fc 01       	movw	r30, r24
    62f4:	2d 91       	ld	r18, X+
    62f6:	21 11       	cpse	r18, r1
    62f8:	03 c0       	rjmp	.+6      	; 0x6300 <strncpy+0x10>
    62fa:	4e 0f       	add	r20, r30
    62fc:	5f 1f       	adc	r21, r31
    62fe:	08 c0       	rjmp	.+16     	; 0x6310 <strncpy+0x20>
    6300:	41 15       	cp	r20, r1
    6302:	51 05       	cpc	r21, r1
    6304:	21 f0       	breq	.+8      	; 0x630e <strncpy+0x1e>
    6306:	21 93       	st	Z+, r18
    6308:	41 50       	subi	r20, 0x01	; 1
    630a:	51 09       	sbc	r21, r1
    630c:	f3 cf       	rjmp	.-26     	; 0x62f4 <strncpy+0x4>
    630e:	08 95       	ret
    6310:	4e 17       	cp	r20, r30
    6312:	5f 07       	cpc	r21, r31
    6314:	11 f0       	breq	.+4      	; 0x631a <strncpy+0x2a>
    6316:	11 92       	st	Z+, r1
    6318:	fb cf       	rjmp	.-10     	; 0x6310 <strncpy+0x20>
    631a:	08 95       	ret

0000631c <strcat>:
    631c:	cf 93       	push	r28
    631e:	df 93       	push	r29
    6320:	d8 2f       	mov	r29, r24
    6322:	c9 2f       	mov	r28, r25
    6324:	28 2f       	mov	r18, r24
    6326:	39 2f       	mov	r19, r25
    6328:	c9 01       	movw	r24, r18
    632a:	2f 5f       	subi	r18, 0xFF	; 255
    632c:	3f 4f       	sbci	r19, 0xFF	; 255
    632e:	fc 01       	movw	r30, r24
    6330:	40 81       	ld	r20, Z
    6332:	41 11       	cpse	r20, r1
    6334:	f9 cf       	rjmp	.-14     	; 0x6328 <strcat+0xc>
    6336:	d1 df       	rcall	.-94     	; 0x62da <strcpy>
    6338:	8d 2f       	mov	r24, r29
    633a:	9c 2f       	mov	r25, r28
    633c:	df 91       	pop	r29
    633e:	cf 91       	pop	r28
    6340:	08 95       	ret

00006342 <reverse>:
    6342:	fc 01       	movw	r30, r24
    6344:	01 90       	ld	r0, Z+
    6346:	00 20       	and	r0, r0
    6348:	e9 f7       	brne	.-6      	; 0x6344 <reverse+0x2>
    634a:	31 97       	sbiw	r30, 0x01	; 1
    634c:	e8 1b       	sub	r30, r24
    634e:	f9 0b       	sbc	r31, r25
    6350:	af 01       	movw	r20, r30
    6352:	55 95       	asr	r21
    6354:	47 95       	ror	r20
    6356:	e8 0f       	add	r30, r24
    6358:	f9 1f       	adc	r31, r25
    635a:	dc 01       	movw	r26, r24
    635c:	9d 01       	movw	r18, r26
    635e:	28 1b       	sub	r18, r24
    6360:	39 0b       	sbc	r19, r25
    6362:	24 17       	cp	r18, r20
    6364:	35 07       	cpc	r19, r21
    6366:	2c f4       	brge	.+10     	; 0x6372 <reverse+0x30>
    6368:	22 91       	ld	r18, -Z
    636a:	3c 91       	ld	r19, X
    636c:	30 83       	st	Z, r19
    636e:	2d 93       	st	X+, r18
    6370:	f5 cf       	rjmp	.-22     	; 0x635c <reverse+0x1a>
    6372:	08 95       	ret

00006374 <strupper>:
    6374:	cf 93       	push	r28
    6376:	df 93       	push	r29
    6378:	ec 01       	movw	r28, r24
    637a:	88 81       	ld	r24, Y
    637c:	88 23       	and	r24, r24
    637e:	21 f0       	breq	.+8      	; 0x6388 <strupper+0x14>
    6380:	90 e0       	ldi	r25, 0x00	; 0
    6382:	9e df       	rcall	.-196    	; 0x62c0 <toupper>
    6384:	89 93       	st	Y+, r24
    6386:	f9 cf       	rjmp	.-14     	; 0x637a <strupper+0x6>
    6388:	df 91       	pop	r29
    638a:	cf 91       	pop	r28
    638c:	08 95       	ret

0000638e <strcmp>:
    638e:	dc 01       	movw	r26, r24
    6390:	fb 01       	movw	r30, r22
    6392:	2d 91       	ld	r18, X+
    6394:	41 91       	ld	r20, Z+
    6396:	50 e0       	ldi	r21, 0x00	; 0
    6398:	30 e0       	ldi	r19, 0x00	; 0
    639a:	c9 01       	movw	r24, r18
    639c:	84 1b       	sub	r24, r20
    639e:	95 0b       	sbc	r25, r21
    63a0:	11 f4       	brne	.+4      	; 0x63a6 <strcmp+0x18>
    63a2:	45 2b       	or	r20, r21
    63a4:	b1 f7       	brne	.-20     	; 0x6392 <strcmp+0x4>
    63a6:	08 95       	ret

000063a8 <strcasecmp>:
    63a8:	ef 92       	push	r14
    63aa:	ff 92       	push	r15
    63ac:	0f 93       	push	r16
    63ae:	1f 93       	push	r17
    63b0:	cf 93       	push	r28
    63b2:	df 93       	push	r29
    63b4:	7c 01       	movw	r14, r24
    63b6:	8b 01       	movw	r16, r22
    63b8:	f7 01       	movw	r30, r14
    63ba:	81 91       	ld	r24, Z+
    63bc:	7f 01       	movw	r14, r30
    63be:	90 e0       	ldi	r25, 0x00	; 0
    63c0:	7f df       	rcall	.-258    	; 0x62c0 <toupper>
    63c2:	ec 01       	movw	r28, r24
    63c4:	f8 01       	movw	r30, r16
    63c6:	81 91       	ld	r24, Z+
    63c8:	8f 01       	movw	r16, r30
    63ca:	90 e0       	ldi	r25, 0x00	; 0
    63cc:	79 df       	rcall	.-270    	; 0x62c0 <toupper>
    63ce:	9c 01       	movw	r18, r24
    63d0:	ce 01       	movw	r24, r28
    63d2:	82 1b       	sub	r24, r18
    63d4:	93 0b       	sbc	r25, r19
    63d6:	11 f4       	brne	.+4      	; 0x63dc <strcasecmp+0x34>
    63d8:	23 2b       	or	r18, r19
    63da:	71 f7       	brne	.-36     	; 0x63b8 <strcasecmp+0x10>
    63dc:	cd b7       	in	r28, 0x3d	; 61
    63de:	de b7       	in	r29, 0x3e	; 62
    63e0:	e6 e0       	ldi	r30, 0x06	; 6
    63e2:	0c 94 35 e7 	jmp	0x1ce6a	; 0x1ce6a <__epilogue_restores__+0x18>

000063e6 <strncasecmp>:
    63e6:	a0 e0       	ldi	r26, 0x00	; 0
    63e8:	b0 e0       	ldi	r27, 0x00	; 0
    63ea:	e9 ef       	ldi	r30, 0xF9	; 249
    63ec:	f1 e3       	ldi	r31, 0x31	; 49
    63ee:	0c 94 17 e7 	jmp	0x1ce2e	; 0x1ce2e <__prologue_saves__+0x14>
    63f2:	8c 01       	movw	r16, r24
    63f4:	7b 01       	movw	r14, r22
    63f6:	6c 01       	movw	r12, r24
    63f8:	c4 0e       	add	r12, r20
    63fa:	d5 1e       	adc	r13, r21
    63fc:	0c 15       	cp	r16, r12
    63fe:	1d 05       	cpc	r17, r13
    6400:	99 f0       	breq	.+38     	; 0x6428 <strncasecmp+0x42>
    6402:	f8 01       	movw	r30, r16
    6404:	81 91       	ld	r24, Z+
    6406:	8f 01       	movw	r16, r30
    6408:	90 e0       	ldi	r25, 0x00	; 0
    640a:	5a df       	rcall	.-332    	; 0x62c0 <toupper>
    640c:	ec 01       	movw	r28, r24
    640e:	f7 01       	movw	r30, r14
    6410:	81 91       	ld	r24, Z+
    6412:	7f 01       	movw	r14, r30
    6414:	90 e0       	ldi	r25, 0x00	; 0
    6416:	54 df       	rcall	.-344    	; 0x62c0 <toupper>
    6418:	9c 01       	movw	r18, r24
    641a:	ce 01       	movw	r24, r28
    641c:	82 1b       	sub	r24, r18
    641e:	93 0b       	sbc	r25, r19
    6420:	29 f4       	brne	.+10     	; 0x642c <strncasecmp+0x46>
    6422:	23 2b       	or	r18, r19
    6424:	59 f7       	brne	.-42     	; 0x63fc <strncasecmp+0x16>
    6426:	02 c0       	rjmp	.+4      	; 0x642c <strncasecmp+0x46>
    6428:	80 e0       	ldi	r24, 0x00	; 0
    642a:	90 e0       	ldi	r25, 0x00	; 0
    642c:	cd b7       	in	r28, 0x3d	; 61
    642e:	de b7       	in	r29, 0x3e	; 62
    6430:	e8 e0       	ldi	r30, 0x08	; 8
    6432:	0c 94 33 e7 	jmp	0x1ce66	; 0x1ce66 <__epilogue_restores__+0x14>

00006436 <stralloc>:
///
///@return pointer to alocated string.
///@return NULL on out of memory.
MEMSPACE
char *stralloc(char *str)
{
    6436:	0f 93       	push	r16
    6438:	1f 93       	push	r17
    643a:	cf 93       	push	r28
    643c:	df 93       	push	r29
    char *ptr;
    int len;

    if(!str)
    643e:	00 97       	sbiw	r24, 0x00	; 0
    6440:	99 f0       	breq	.+38     	; 0x6468 <stralloc+0x32>
    6442:	ec 01       	movw	r28, r24
        return(str);;
    len  = strlen(str);
    6444:	fc 01       	movw	r30, r24
    6446:	01 90       	ld	r0, Z+
    6448:	00 20       	and	r0, r0
    644a:	e9 f7       	brne	.-6      	; 0x6446 <stralloc+0x10>
    644c:	cf 01       	movw	r24, r30
    ptr = safecalloc(len+1,1);
    644e:	61 e0       	ldi	r22, 0x01	; 1
    6450:	70 e0       	ldi	r23, 0x00	; 0
    6452:	8c 1b       	sub	r24, r28
    6454:	9d 0b       	sbc	r25, r29
    6456:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <safecalloc>
    645a:	8c 01       	movw	r16, r24
    if(!ptr)
    645c:	00 97       	sbiw	r24, 0x00	; 0
    645e:	21 f0       	breq	.+8      	; 0x6468 <stralloc+0x32>
        return(ptr);
    strcpy(ptr,str);
    6460:	be 01       	movw	r22, r28
    6462:	3b df       	rcall	.-394    	; 0x62da <strcpy>
    return(ptr);
    6464:	c8 01       	movw	r24, r16
    6466:	02 c0       	rjmp	.+4      	; 0x646c <stralloc+0x36>
    6468:	80 e0       	ldi	r24, 0x00	; 0
    646a:	90 e0       	ldi	r25, 0x00	; 0
}
    646c:	df 91       	pop	r29
    646e:	cf 91       	pop	r28
    6470:	1f 91       	pop	r17
    6472:	0f 91       	pop	r16
    6474:	08 95       	ret

00006476 <sep>:
        return(0);

    if(strncmp(str,pat,patlen) == 0)
        return(len);
    return(0);
}
    6476:	00 d0       	rcall	.+0      	; 0x6478 <sep+0x2>
    6478:	1f 92       	push	r1
    647a:	8e e1       	ldi	r24, 0x1E	; 30
    647c:	95 e0       	ldi	r25, 0x05	; 5
    647e:	a0 e0       	ldi	r26, 0x00	; 0
    6480:	ed b7       	in	r30, 0x3d	; 61
    6482:	fe b7       	in	r31, 0x3e	; 62
    6484:	81 83       	std	Z+1, r24	; 0x01
    6486:	92 83       	std	Z+2, r25	; 0x02
    6488:	a3 83       	std	Z+3, r26	; 0x03
    648a:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    648e:	0f 90       	pop	r0
    6490:	0f 90       	pop	r0
    6492:	0f 90       	pop	r0
    6494:	08 95       	ret

00006496 <trim_tail>:
    6496:	00 97       	sbiw	r24, 0x00	; 0
    6498:	69 f0       	breq	.+26     	; 0x64b4 <trim_tail+0x1e>
    649a:	fc 01       	movw	r30, r24
    649c:	01 90       	ld	r0, Z+
    649e:	00 20       	and	r0, r0
    64a0:	e9 f7       	brne	.-6      	; 0x649c <trim_tail+0x6>
    64a2:	31 97       	sbiw	r30, 0x01	; 1
    64a4:	e8 17       	cp	r30, r24
    64a6:	f9 07       	cpc	r31, r25
    64a8:	29 f0       	breq	.+10     	; 0x64b4 <trim_tail+0x1e>
    64aa:	22 91       	ld	r18, -Z
    64ac:	21 32       	cpi	r18, 0x21	; 33
    64ae:	10 f4       	brcc	.+4      	; 0x64b4 <trim_tail+0x1e>
    64b0:	10 82       	st	Z, r1
    64b2:	f8 cf       	rjmp	.-16     	; 0x64a4 <trim_tail+0xe>
    64b4:	08 95       	ret

000064b6 <skipspaces>:
    64b6:	00 97       	sbiw	r24, 0x00	; 0
    64b8:	39 f0       	breq	.+14     	; 0x64c8 <skipspaces+0x12>
    64ba:	fc 01       	movw	r30, r24
    64bc:	cf 01       	movw	r24, r30
    64be:	21 91       	ld	r18, Z+
    64c0:	20 32       	cpi	r18, 0x20	; 32
    64c2:	e1 f3       	breq	.-8      	; 0x64bc <skipspaces+0x6>
    64c4:	29 30       	cpi	r18, 0x09	; 9
    64c6:	d1 f3       	breq	.-12     	; 0x64bc <skipspaces+0x6>
    64c8:	08 95       	ret

000064ca <MATCH>:
    64ca:	cf 93       	push	r28
    64cc:	df 93       	push	r29
    64ce:	fb 01       	movw	r30, r22
    64d0:	01 90       	ld	r0, Z+
    64d2:	00 20       	and	r0, r0
    64d4:	e9 f7       	brne	.-6      	; 0x64d0 <MATCH+0x6>
    64d6:	31 97       	sbiw	r30, 0x01	; 1
    64d8:	ef 01       	movw	r28, r30
    64da:	c6 1b       	sub	r28, r22
    64dc:	d7 0b       	sbc	r29, r23
    64de:	57 df       	rcall	.-338    	; 0x638e <strcmp>
    64e0:	89 2b       	or	r24, r25
    64e2:	11 f4       	brne	.+4      	; 0x64e8 <MATCH+0x1e>
    64e4:	ce 01       	movw	r24, r28
    64e6:	02 c0       	rjmp	.+4      	; 0x64ec <MATCH+0x22>
    64e8:	80 e0       	ldi	r24, 0x00	; 0
    64ea:	90 e0       	ldi	r25, 0x00	; 0
    64ec:	df 91       	pop	r29
    64ee:	cf 91       	pop	r28
    64f0:	08 95       	ret

000064f2 <MATCHI>:
    64f2:	cf 93       	push	r28
    64f4:	df 93       	push	r29
    64f6:	fb 01       	movw	r30, r22
    64f8:	01 90       	ld	r0, Z+
    64fa:	00 20       	and	r0, r0
    64fc:	e9 f7       	brne	.-6      	; 0x64f8 <MATCHI+0x6>
    64fe:	31 97       	sbiw	r30, 0x01	; 1
    6500:	ef 01       	movw	r28, r30
    6502:	c6 1b       	sub	r28, r22
    6504:	d7 0b       	sbc	r29, r23
    6506:	50 df       	rcall	.-352    	; 0x63a8 <strcasecmp>
    6508:	89 2b       	or	r24, r25
    650a:	11 f4       	brne	.+4      	; 0x6510 <MATCHI+0x1e>
    650c:	ce 01       	movw	r24, r28
    650e:	02 c0       	rjmp	.+4      	; 0x6514 <MATCHI+0x22>
    6510:	80 e0       	ldi	r24, 0x00	; 0
    6512:	90 e0       	ldi	r25, 0x00	; 0
    6514:	df 91       	pop	r29
    6516:	cf 91       	pop	r28
    6518:	08 95       	ret

0000651a <MATCHARGS>:
    651a:	a9 e0       	ldi	r26, 0x09	; 9
    651c:	b0 e0       	ldi	r27, 0x00	; 0
    651e:	e3 e9       	ldi	r30, 0x93	; 147
    6520:	f2 e3       	ldi	r31, 0x32	; 50
    6522:	0c 94 19 e7 	jmp	0x1ce32	; 0x1ce32 <__prologue_saves__+0x18>
    6526:	eb 01       	movw	r28, r22
    6528:	8a 01       	movw	r16, r20
    652a:	79 01       	movw	r14, r18
    652c:	e2 df       	rcall	.-60     	; 0x64f2 <MATCHI>
    652e:	00 97       	sbiw	r24, 0x00	; 0
    6530:	c1 f0       	breq	.+48     	; 0x6562 <MATCHARGS+0x48>
    6532:	e0 16       	cp	r14, r16
    6534:	f1 06       	cpc	r15, r17
    6536:	9c f4       	brge	.+38     	; 0x655e <MATCHARGS+0x44>
    6538:	ed b7       	in	r30, 0x3d	; 61
    653a:	fe b7       	in	r31, 0x3e	; 62
    653c:	f1 86       	std	Z+9, r15	; 0x09
    653e:	e0 86       	std	Z+8, r14	; 0x08
    6540:	17 83       	std	Z+7, r17	; 0x07
    6542:	06 83       	std	Z+6, r16	; 0x06
    6544:	d5 83       	std	Z+5, r29	; 0x05
    6546:	c4 83       	std	Z+4, r28	; 0x04
    6548:	88 ef       	ldi	r24, 0xF8	; 248
    654a:	94 e0       	ldi	r25, 0x04	; 4
    654c:	a0 e0       	ldi	r26, 0x00	; 0
    654e:	81 83       	std	Z+1, r24	; 0x01
    6550:	92 83       	std	Z+2, r25	; 0x02
    6552:	a3 83       	std	Z+3, r26	; 0x03
    6554:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    6558:	80 e0       	ldi	r24, 0x00	; 0
    655a:	90 e0       	ldi	r25, 0x00	; 0
    655c:	02 c0       	rjmp	.+4      	; 0x6562 <MATCHARGS+0x48>
    655e:	81 e0       	ldi	r24, 0x01	; 1
    6560:	90 e0       	ldi	r25, 0x00	; 0
    6562:	cd b7       	in	r28, 0x3d	; 61
    6564:	de b7       	in	r29, 0x3e	; 62
    6566:	29 96       	adiw	r28, 0x09	; 9
    6568:	e6 e0       	ldi	r30, 0x06	; 6
    656a:	0c 94 35 e7 	jmp	0x1ce6a	; 0x1ce6a <__epilogue_restores__+0x18>

0000656e <MATCHI_LEN>:
    656e:	cf 93       	push	r28
    6570:	df 93       	push	r29
    6572:	00 97       	sbiw	r24, 0x00	; 0
    6574:	89 f0       	breq	.+34     	; 0x6598 <MATCHI_LEN+0x2a>
    6576:	61 15       	cp	r22, r1
    6578:	71 05       	cpc	r23, r1
    657a:	71 f0       	breq	.+28     	; 0x6598 <MATCHI_LEN+0x2a>
    657c:	eb 01       	movw	r28, r22
    657e:	09 90       	ld	r0, Y+
    6580:	00 20       	and	r0, r0
    6582:	e9 f7       	brne	.-6      	; 0x657e <MATCHI_LEN+0x10>
    6584:	21 97       	sbiw	r28, 0x01	; 1
    6586:	c6 1b       	sub	r28, r22
    6588:	d7 0b       	sbc	r29, r23
    658a:	31 f0       	breq	.+12     	; 0x6598 <MATCHI_LEN+0x2a>
    658c:	ae 01       	movw	r20, r28
    658e:	2b df       	rcall	.-426    	; 0x63e6 <strncasecmp>
    6590:	89 2b       	or	r24, r25
    6592:	11 f4       	brne	.+4      	; 0x6598 <MATCHI_LEN+0x2a>
    6594:	ce 01       	movw	r24, r28
    6596:	02 c0       	rjmp	.+4      	; 0x659c <MATCHI_LEN+0x2e>
    6598:	80 e0       	ldi	r24, 0x00	; 0
    659a:	90 e0       	ldi	r25, 0x00	; 0
    659c:	df 91       	pop	r29
    659e:	cf 91       	pop	r28
    65a0:	08 95       	ret

000065a2 <split_args>:
    65a2:	a0 e0       	ldi	r26, 0x00	; 0
    65a4:	b0 e0       	ldi	r27, 0x00	; 0
    65a6:	e7 ed       	ldi	r30, 0xD7	; 215
    65a8:	f2 e3       	ldi	r31, 0x32	; 50
    65aa:	0c 94 17 e7 	jmp	0x1ce2e	; 0x1ce2e <__prologue_saves__+0x14>
    65ae:	dc 01       	movw	r26, r24
    65b0:	6a 01       	movw	r12, r20
    65b2:	8b 01       	movw	r16, r22
    65b4:	fb 01       	movw	r30, r22
    65b6:	80 e0       	ldi	r24, 0x00	; 0
    65b8:	90 e0       	ldi	r25, 0x00	; 0
    65ba:	8c 15       	cp	r24, r12
    65bc:	9d 05       	cpc	r25, r13
    65be:	24 f4       	brge	.+8      	; 0x65c8 <split_args+0x26>
    65c0:	11 92       	st	Z+, r1
    65c2:	11 92       	st	Z+, r1
    65c4:	01 96       	adiw	r24, 0x01	; 1
    65c6:	f9 cf       	rjmp	.-14     	; 0x65ba <split_args+0x18>
    65c8:	c1 14       	cp	r12, r1
    65ca:	d1 04       	cpc	r13, r1
    65cc:	d9 f1       	breq	.+118    	; 0x6644 <split_args+0xa2>
    65ce:	10 97       	sbiw	r26, 0x00	; 0
    65d0:	c9 f1       	breq	.+114    	; 0x6644 <split_args+0xa2>
    65d2:	ee 24       	eor	r14, r14
    65d4:	e3 94       	inc	r14
    65d6:	f1 2c       	mov	r15, r1
    65d8:	c0 e0       	ldi	r28, 0x00	; 0
    65da:	d0 e0       	ldi	r29, 0x00	; 0
    65dc:	8c 91       	ld	r24, X
    65de:	88 23       	and	r24, r24
    65e0:	b1 f1       	breq	.+108    	; 0x664e <split_args+0xac>
    65e2:	cc 15       	cp	r28, r12
    65e4:	dd 05       	cpc	r29, r13
    65e6:	9c f5       	brge	.+102    	; 0x664e <split_args+0xac>
    65e8:	cd 01       	movw	r24, r26
    65ea:	65 df       	rcall	.-310    	; 0x64b6 <skipspaces>
    65ec:	dc 01       	movw	r26, r24
    65ee:	2c 91       	ld	r18, X
    65f0:	22 23       	and	r18, r18
    65f2:	69 f1       	breq	.+90     	; 0x664e <split_args+0xac>
    65f4:	22 32       	cpi	r18, 0x22	; 34
    65f6:	79 f4       	brne	.+30     	; 0x6616 <split_args+0x74>
    65f8:	fc 01       	movw	r30, r24
    65fa:	31 96       	adiw	r30, 0x01	; 1
    65fc:	d8 01       	movw	r26, r16
    65fe:	ed 93       	st	X+, r30
    6600:	fc 93       	st	X, r31
    6602:	df 01       	movw	r26, r30
    6604:	80 81       	ld	r24, Z
    6606:	31 96       	adiw	r30, 0x01	; 1
    6608:	88 23       	and	r24, r24
    660a:	a9 f0       	breq	.+42     	; 0x6636 <split_args+0x94>
    660c:	82 32       	cpi	r24, 0x22	; 34
    660e:	c9 f7       	brne	.-14     	; 0x6602 <split_args+0x60>
    6610:	1c 92       	st	X, r1
    6612:	df 01       	movw	r26, r30
    6614:	10 c0       	rjmp	.+32     	; 0x6636 <split_args+0x94>
    6616:	f8 01       	movw	r30, r16
    6618:	91 83       	std	Z+1, r25	; 0x01
    661a:	80 83       	st	Z, r24
    661c:	fc 01       	movw	r30, r24
    661e:	2e 2f       	mov	r18, r30
    6620:	9f 2f       	mov	r25, r31
    6622:	81 91       	ld	r24, Z+
    6624:	3f ed       	ldi	r19, 0xDF	; 223
    6626:	38 0f       	add	r19, r24
    6628:	3e 35       	cpi	r19, 0x5E	; 94
    662a:	c8 f3       	brcs	.-14     	; 0x661e <split_args+0x7c>
    662c:	88 23       	and	r24, r24
    662e:	69 f0       	breq	.+26     	; 0x664a <split_args+0xa8>
    6630:	a2 2f       	mov	r26, r18
    6632:	b9 2f       	mov	r27, r25
    6634:	1d 92       	st	X+, r1
    6636:	21 96       	adiw	r28, 0x01	; 1
    6638:	ff ef       	ldi	r31, 0xFF	; 255
    663a:	ef 1a       	sub	r14, r31
    663c:	ff 0a       	sbc	r15, r31
    663e:	0e 5f       	subi	r16, 0xFE	; 254
    6640:	1f 4f       	sbci	r17, 0xFF	; 255
    6642:	cc cf       	rjmp	.-104    	; 0x65dc <split_args+0x3a>
    6644:	80 e0       	ldi	r24, 0x00	; 0
    6646:	90 e0       	ldi	r25, 0x00	; 0
    6648:	03 c0       	rjmp	.+6      	; 0x6650 <split_args+0xae>
    664a:	c7 01       	movw	r24, r14
    664c:	01 c0       	rjmp	.+2      	; 0x6650 <split_args+0xae>
    664e:	ce 01       	movw	r24, r28
    6650:	cd b7       	in	r28, 0x3d	; 61
    6652:	de b7       	in	r29, 0x3e	; 62
    6654:	e8 e0       	ldi	r30, 0x08	; 8
    6656:	0c 94 33 e7 	jmp	0x1ce66	; 0x1ce66 <__epilogue_restores__+0x14>

0000665a <get_token>:
    665a:	ef 92       	push	r14
    665c:	ff 92       	push	r15
    665e:	0f 93       	push	r16
    6660:	1f 93       	push	r17
    6662:	cf 93       	push	r28
    6664:	df 93       	push	r29
    6666:	eb 01       	movw	r28, r22
    6668:	8a 01       	movw	r16, r20
    666a:	18 82       	st	Y, r1
    666c:	00 97       	sbiw	r24, 0x00	; 0
    666e:	89 f1       	breq	.+98     	; 0x66d2 <get_token+0x78>
    6670:	fc 01       	movw	r30, r24
    6672:	20 81       	ld	r18, Z
    6674:	22 23       	and	r18, r18
    6676:	79 f1       	breq	.+94     	; 0x66d6 <get_token+0x7c>
    6678:	1e df       	rcall	.-452    	; 0x64b6 <skipspaces>
    667a:	7c 01       	movw	r14, r24
    667c:	0c df       	rcall	.-488    	; 0x6496 <trim_tail>
    667e:	f7 01       	movw	r30, r14
    6680:	cf 01       	movw	r24, r30
    6682:	21 91       	ld	r18, Z+
    6684:	21 32       	cpi	r18, 0x21	; 33
    6686:	e0 f0       	brcs	.+56     	; 0x66c0 <get_token+0x66>
    6688:	10 16       	cp	r1, r16
    668a:	11 06       	cpc	r1, r17
    668c:	cc f4       	brge	.+50     	; 0x66c0 <get_token+0x66>
    668e:	22 32       	cpi	r18, 0x22	; 34
    6690:	79 f4       	brne	.+30     	; 0x66b0 <get_token+0x56>
    6692:	fc 01       	movw	r30, r24
    6694:	31 96       	adiw	r30, 0x01	; 1
    6696:	0c 0f       	add	r16, r28
    6698:	1d 1f       	adc	r17, r29
    669a:	cf 01       	movw	r24, r30
    669c:	21 91       	ld	r18, Z+
    669e:	22 23       	and	r18, r18
    66a0:	79 f0       	breq	.+30     	; 0x66c0 <get_token+0x66>
    66a2:	22 32       	cpi	r18, 0x22	; 34
    66a4:	59 f0       	breq	.+22     	; 0x66bc <get_token+0x62>
    66a6:	c0 17       	cp	r28, r16
    66a8:	d1 07       	cpc	r29, r17
    66aa:	51 f0       	breq	.+20     	; 0x66c0 <get_token+0x66>
    66ac:	29 93       	st	Y+, r18
    66ae:	f5 cf       	rjmp	.-22     	; 0x669a <get_token+0x40>
    66b0:	2c 32       	cpi	r18, 0x2C	; 44
    66b2:	31 f0       	breq	.+12     	; 0x66c0 <get_token+0x66>
    66b4:	29 93       	st	Y+, r18
    66b6:	01 50       	subi	r16, 0x01	; 1
    66b8:	11 09       	sbc	r17, r1
    66ba:	e2 cf       	rjmp	.-60     	; 0x6680 <get_token+0x26>
    66bc:	cf 01       	movw	r24, r30
    66be:	18 82       	st	Y, r1
    66c0:	fa de       	rcall	.-524    	; 0x64b6 <skipspaces>
    66c2:	fc 01       	movw	r30, r24
    66c4:	80 81       	ld	r24, Z
    66c6:	8c 32       	cpi	r24, 0x2C	; 44
    66c8:	09 f4       	brne	.+2      	; 0x66cc <get_token+0x72>
    66ca:	31 96       	adiw	r30, 0x01	; 1
    66cc:	18 82       	st	Y, r1
    66ce:	cf 01       	movw	r24, r30
    66d0:	02 c0       	rjmp	.+4      	; 0x66d6 <get_token+0x7c>
    66d2:	80 e0       	ldi	r24, 0x00	; 0
    66d4:	90 e0       	ldi	r25, 0x00	; 0
    66d6:	cd b7       	in	r28, 0x3d	; 61
    66d8:	de b7       	in	r29, 0x3e	; 62
    66da:	e6 e0       	ldi	r30, 0x06	; 6
    66dc:	0c 94 35 e7 	jmp	0x1ce6a	; 0x1ce6a <__epilogue_restores__+0x18>

000066e0 <get_value>:
/// @param[in] str: string to examine
///
/// @return  value
MEMSPACE
int32_t get_value(char *str)
{
    66e0:	a2 e0       	ldi	r26, 0x02	; 2
    66e2:	b0 e0       	ldi	r27, 0x00	; 0
    66e4:	e6 e7       	ldi	r30, 0x76	; 118
    66e6:	f3 e3       	ldi	r31, 0x33	; 51
    66e8:	0c 94 1b e7 	jmp	0x1ce36	; 0x1ce36 <__prologue_saves__+0x1c>
    int base;
    int ret;
    char *ptr;
    char *endptr;

    if(!str || *str == 0)
    66ec:	00 97       	sbiw	r24, 0x00	; 0
    66ee:	79 f1       	breq	.+94     	; 0x674e <get_value+0x6e>
    66f0:	fc 01       	movw	r30, r24
    66f2:	20 81       	ld	r18, Z
    66f4:	22 23       	and	r18, r18
    66f6:	59 f1       	breq	.+86     	; 0x674e <get_value+0x6e>
        return(0);

    ptr = skipspaces(str);
    66f8:	de de       	rcall	.-580    	; 0x64b6 <skipspaces>
    66fa:	8c 01       	movw	r16, r24
    base = 10;

// convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    66fc:	6f e2       	ldi	r22, 0x2F	; 47
    66fe:	73 e0       	ldi	r23, 0x03	; 3
    6700:	36 df       	rcall	.-404    	; 0x656e <MATCHI_LEN>
    6702:	00 97       	sbiw	r24, 0x00	; 0
    6704:	29 f0       	breq	.+10     	; 0x6710 <get_value+0x30>
    {
        base = 16;
        ptr += ret;
    6706:	08 0f       	add	r16, r24
    6708:	19 1f       	adc	r17, r25
    base = 10;

// convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    {
        base = 16;
    670a:	40 e1       	ldi	r20, 0x10	; 16
    670c:	50 e0       	ldi	r21, 0x00	; 0
    670e:	18 c0       	rjmp	.+48     	; 0x6740 <get_value+0x60>
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    6710:	62 e3       	ldi	r22, 0x32	; 50
    6712:	73 e0       	ldi	r23, 0x03	; 3
    6714:	c8 01       	movw	r24, r16
    6716:	2b df       	rcall	.-426    	; 0x656e <MATCHI_LEN>
    6718:	00 97       	sbiw	r24, 0x00	; 0
    671a:	29 f0       	breq	.+10     	; 0x6726 <get_value+0x46>
    {
        base = 8;
        ptr += ret;
    671c:	08 0f       	add	r16, r24
    671e:	19 1f       	adc	r17, r25
        base = 16;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    {
        base = 8;
    6720:	48 e0       	ldi	r20, 0x08	; 8
    6722:	50 e0       	ldi	r21, 0x00	; 0
    6724:	0d c0       	rjmp	.+26     	; 0x6740 <get_value+0x60>
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    6726:	65 e3       	ldi	r22, 0x35	; 53
    6728:	73 e0       	ldi	r23, 0x03	; 3
    672a:	c8 01       	movw	r24, r16
    672c:	20 df       	rcall	.-448    	; 0x656e <MATCHI_LEN>
    672e:	00 97       	sbiw	r24, 0x00	; 0
    6730:	29 f0       	breq	.+10     	; 0x673c <get_value+0x5c>
    {
        base = 2;
        ptr += ret;
    6732:	08 0f       	add	r16, r24
    6734:	19 1f       	adc	r17, r25
        base = 8;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
    6736:	42 e0       	ldi	r20, 0x02	; 2
    6738:	50 e0       	ldi	r21, 0x00	; 0
    673a:	02 c0       	rjmp	.+4      	; 0x6740 <get_value+0x60>

    if(!str || *str == 0)
        return(0);

    ptr = skipspaces(str);
    base = 10;
    673c:	4a e0       	ldi	r20, 0x0A	; 10
    673e:	50 e0       	ldi	r21, 0x00	; 0
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
    6740:	be 01       	movw	r22, r28
    6742:	6f 5f       	subi	r22, 0xFF	; 255
    6744:	7f 4f       	sbci	r23, 0xFF	; 255
    6746:	c8 01       	movw	r24, r16
    6748:	0e 94 67 47 	call	0x8ece	; 0x8ece <strtol>
    674c:	03 c0       	rjmp	.+6      	; 0x6754 <get_value+0x74>
    int ret;
    char *ptr;
    char *endptr;

    if(!str || *str == 0)
        return(0);
    674e:	60 e0       	ldi	r22, 0x00	; 0
    6750:	70 e0       	ldi	r23, 0x00	; 0
    6752:	cb 01       	movw	r24, r22
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
}
    6754:	22 96       	adiw	r28, 0x02	; 2
    6756:	e4 e0       	ldi	r30, 0x04	; 4
    6758:	0c 94 37 e7 	jmp	0x1ce6e	; 0x1ce6e <__epilogue_restores__+0x1c>

0000675c <enable_system_task>:
/// @brief Enable interrupts
/// @return void.
MEMSPACE
void enable_system_task()
{
    sei();
    675c:	78 94       	sei
    675e:	08 95       	ret

00006760 <install_timers_isr>:
///
/// @see ISR().
/// @return void.
MEMSPACE void install_timers_isr()
{
    cli();
    6760:	f8 94       	cli
    TCCR1B=(1<<WGM12) | TIMER1_PRE_1;             // No Prescale
    6762:	89 e0       	ldi	r24, 0x09	; 9
    6764:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    TCCR1A=0;
    6768:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    OCR1A=(TIMER1_COUNTS_PER_TIC-1);              // 0 .. count
    676c:	8f e1       	ldi	r24, 0x1F	; 31
    676e:	9e e4       	ldi	r25, 0x4E	; 78
    6770:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    6774:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    TIMSK1 |= (1<<OCIE1A);                        //Enable the Output Compare A interrupt
    6778:	ef e6       	ldi	r30, 0x6F	; 111
    677a:	f0 e0       	ldi	r31, 0x00	; 0
    677c:	80 81       	ld	r24, Z
    677e:	82 60       	ori	r24, 0x02	; 2
    6780:	80 83       	st	Z, r24
    sei();
    6782:	78 94       	sei
    6784:	08 95       	ret

00006786 <__vector_13>:
/// @brief AVR Timer Interrupt Vector
///
/// - calls execute_timers() - we call this the System task.
///
ISR(TIMER1_COMPA_vect)
{
    6786:	1f 92       	push	r1
    6788:	0f 92       	push	r0
    678a:	0f b6       	in	r0, 0x3f	; 63
    678c:	0f 92       	push	r0
    678e:	11 24       	eor	r1, r1
    6790:	0b b6       	in	r0, 0x3b	; 59
    6792:	0f 92       	push	r0
    6794:	2f 93       	push	r18
    6796:	3f 93       	push	r19
    6798:	4f 93       	push	r20
    679a:	5f 93       	push	r21
    679c:	6f 93       	push	r22
    679e:	7f 93       	push	r23
    67a0:	8f 93       	push	r24
    67a2:	9f 93       	push	r25
    67a4:	af 93       	push	r26
    67a6:	bf 93       	push	r27
    67a8:	ef 93       	push	r30
    67aa:	ff 93       	push	r31
    execute_timers();
    67ac:	36 d2       	rcall	.+1132   	; 0x6c1a <execute_timers>
}
    67ae:	ff 91       	pop	r31
    67b0:	ef 91       	pop	r30
    67b2:	bf 91       	pop	r27
    67b4:	af 91       	pop	r26
    67b6:	9f 91       	pop	r25
    67b8:	8f 91       	pop	r24
    67ba:	7f 91       	pop	r23
    67bc:	6f 91       	pop	r22
    67be:	5f 91       	pop	r21
    67c0:	4f 91       	pop	r20
    67c2:	3f 91       	pop	r19
    67c4:	2f 91       	pop	r18
    67c6:	0f 90       	pop	r0
    67c8:	0b be       	out	0x3b, r0	; 59
    67ca:	0f 90       	pop	r0
    67cc:	0f be       	out	0x3f, r0	; 63
    67ce:	0f 90       	pop	r0
    67d0:	1f 90       	pop	r1
    67d2:	18 95       	reti

000067d4 <clock_gettime>:
///
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    67d4:	0f 93       	push	r16
    67d6:	1f 93       	push	r17
    67d8:	cf 93       	push	r28
    67da:	df 93       	push	r29
    67dc:	fb 01       	movw	r30, r22
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;

// disable interrupts
    cli();
    67de:	f8 94       	cli

    count1 = TCNT1;
    67e0:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    67e4:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    ts->tv_sec = __clock.tv_sec;
    67e8:	80 91 50 1a 	lds	r24, 0x1A50	; 0x801a50 <__clock>
    67ec:	90 91 51 1a 	lds	r25, 0x1A51	; 0x801a51 <__clock+0x1>
    67f0:	a0 91 52 1a 	lds	r26, 0x1A52	; 0x801a52 <__clock+0x2>
    67f4:	b0 91 53 1a 	lds	r27, 0x1A53	; 0x801a53 <__clock+0x3>
    67f8:	80 83       	st	Z, r24
    67fa:	91 83       	std	Z+1, r25	; 0x01
    67fc:	a2 83       	std	Z+2, r26	; 0x02
    67fe:	b3 83       	std	Z+3, r27	; 0x03
    ts->tv_nsec = __clock.tv_nsec;
    6800:	80 91 54 1a 	lds	r24, 0x1A54	; 0x801a54 <__clock+0x4>
    6804:	90 91 55 1a 	lds	r25, 0x1A55	; 0x801a55 <__clock+0x5>
    6808:	a0 91 56 1a 	lds	r26, 0x1A56	; 0x801a56 <__clock+0x6>
    680c:	b0 91 57 1a 	lds	r27, 0x1A57	; 0x801a57 <__clock+0x7>
    6810:	84 83       	std	Z+4, r24	; 0x04
    6812:	95 83       	std	Z+5, r25	; 0x05
    6814:	a6 83       	std	Z+6, r26	; 0x06
    6816:	b7 83       	std	Z+7, r27	; 0x07

    count2 = TCNT1;
    6818:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    681c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    if( TIFR1 & (1<<OCF1A) )
    6820:	b1 9b       	sbis	0x16, 1	; 22
    6822:	03 c0       	rjmp	.+6      	; 0x682a <clock_gettime+0x56>
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    6824:	c0 e0       	ldi	r28, 0x00	; 0
    6826:	d0 e0       	ldi	r29, 0x00	; 0
    6828:	3f c0       	rjmp	.+126    	; 0x68a8 <clock_gettime+0xd4>
    count2 = TCNT1;

    if( TIFR1 & (1<<OCF1A) )
        pendingf = 1;

    if (count2 < count1)
    682a:	82 17       	cp	r24, r18
    682c:	93 07       	cpc	r25, r19
    682e:	d0 f1       	brcs	.+116    	; 0x68a4 <clock_gettime+0xd0>
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    6830:	c0 e0       	ldi	r28, 0x00	; 0
    6832:	d0 e0       	ldi	r29, 0x00	; 0
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    6834:	40 e0       	ldi	r20, 0x00	; 0
    6836:	50 e0       	ldi	r21, 0x00	; 0
    6838:	ba 01       	movw	r22, r20
    else
    {
        if( pendingf )
            offset = TIMER1_COUNTS_PER_TIC;       // overflow
    }
    offset += count2;
    683a:	9a 01       	movw	r18, r20
    683c:	ab 01       	movw	r20, r22
    683e:	28 0f       	add	r18, r24
    6840:	39 1f       	adc	r19, r25
    6842:	41 1d       	adc	r20, r1
    6844:	51 1d       	adc	r21, r1

// enable interrupts
    sei();
    6846:	78 94       	sei

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    6848:	a2 e3       	ldi	r26, 0x32	; 50
    684a:	b0 e0       	ldi	r27, 0x00	; 0
    684c:	0e 94 ed e6 	call	0x1cdda	; 0x1cdda <__muluhisi3>
    6850:	04 81       	ldd	r16, Z+4	; 0x04
    6852:	15 81       	ldd	r17, Z+5	; 0x05
    6854:	26 81       	ldd	r18, Z+6	; 0x06
    6856:	37 81       	ldd	r19, Z+7	; 0x07
    6858:	dc 01       	movw	r26, r24
    685a:	cb 01       	movw	r24, r22
    685c:	80 0f       	add	r24, r16
    685e:	91 1f       	adc	r25, r17
    6860:	a2 1f       	adc	r26, r18
    6862:	b3 1f       	adc	r27, r19

    if (ts->tv_nsec >= 1000000000L)
    6864:	81 15       	cp	r24, r1
    6866:	2a ec       	ldi	r18, 0xCA	; 202
    6868:	92 07       	cpc	r25, r18
    686a:	2a e9       	ldi	r18, 0x9A	; 154
    686c:	a2 07       	cpc	r26, r18
    686e:	2b e3       	ldi	r18, 0x3B	; 59
    6870:	b2 07       	cpc	r27, r18
    6872:	2c f4       	brge	.+10     	; 0x687e <clock_gettime+0xaa>
// enable interrupts
    sei();

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    6874:	84 83       	std	Z+4, r24	; 0x04
    6876:	95 83       	std	Z+5, r25	; 0x05
    6878:	a6 83       	std	Z+6, r26	; 0x06
    687a:	b7 83       	std	Z+7, r27	; 0x07
    687c:	1a c0       	rjmp	.+52     	; 0x68b2 <clock_gettime+0xde>

    if (ts->tv_nsec >= 1000000000L)
    {
        ts->tv_nsec -= 1000000000L;
    687e:	9a 5c       	subi	r25, 0xCA	; 202
    6880:	aa 49       	sbci	r26, 0x9A	; 154
    6882:	bb 43       	sbci	r27, 0x3B	; 59
    6884:	84 83       	std	Z+4, r24	; 0x04
    6886:	95 83       	std	Z+5, r25	; 0x05
    6888:	a6 83       	std	Z+6, r26	; 0x06
    688a:	b7 83       	std	Z+7, r27	; 0x07
        ts->tv_sec++;
    688c:	80 81       	ld	r24, Z
    688e:	91 81       	ldd	r25, Z+1	; 0x01
    6890:	a2 81       	ldd	r26, Z+2	; 0x02
    6892:	b3 81       	ldd	r27, Z+3	; 0x03
    6894:	01 96       	adiw	r24, 0x01	; 1
    6896:	a1 1d       	adc	r26, r1
    6898:	b1 1d       	adc	r27, r1
    689a:	80 83       	st	Z, r24
    689c:	91 83       	std	Z+1, r25	; 0x01
    689e:	a2 83       	std	Z+2, r26	; 0x02
    68a0:	b3 83       	std	Z+3, r27	; 0x03
    }
    return(errorf);
    68a2:	07 c0       	rjmp	.+14     	; 0x68b2 <clock_gettime+0xde>

    if (count2 < count1)
    {
///  note: counter2 < count1 implies ISR flag must be set
        if( !pendingf )
            errorf = -1;                          // counter overflow and NO pending is an error!
    68a4:	cf ef       	ldi	r28, 0xFF	; 255
    68a6:	df ef       	ldi	r29, 0xFF	; 255
        offset = TIMER1_COUNTS_PER_TIC;           // overflow
    68a8:	40 e2       	ldi	r20, 0x20	; 32
    68aa:	5e e4       	ldi	r21, 0x4E	; 78
    68ac:	60 e0       	ldi	r22, 0x00	; 0
    68ae:	70 e0       	ldi	r23, 0x00	; 0
    68b0:	c4 cf       	rjmp	.-120    	; 0x683a <clock_gettime+0x66>
    {
        ts->tv_nsec -= 1000000000L;
        ts->tv_sec++;
    }
    return(errorf);
}
    68b2:	ce 01       	movw	r24, r28
    68b4:	df 91       	pop	r29
    68b6:	cf 91       	pop	r28
    68b8:	1f 91       	pop	r17
    68ba:	0f 91       	pop	r16
    68bc:	08 95       	ret

000068be <clock_task>:
void disable_timers()
{
    if(timers_configured && timers_enabled)
    {
        disable_system_task();
        timers_enabled = 0;
    68be:	80 91 54 1a 	lds	r24, 0x1A54	; 0x801a54 <__clock+0x4>
    68c2:	90 91 55 1a 	lds	r25, 0x1A55	; 0x801a55 <__clock+0x5>
    68c6:	a0 91 56 1a 	lds	r26, 0x1A56	; 0x801a56 <__clock+0x6>
    68ca:	b0 91 57 1a 	lds	r27, 0x1A57	; 0x801a57 <__clock+0x7>
    68ce:	80 5c       	subi	r24, 0xC0	; 192
    68d0:	9d 4b       	sbci	r25, 0xBD	; 189
    68d2:	a0 4f       	sbci	r26, 0xF0	; 240
    68d4:	bf 4f       	sbci	r27, 0xFF	; 255
    68d6:	80 93 54 1a 	sts	0x1A54, r24	; 0x801a54 <__clock+0x4>
    68da:	90 93 55 1a 	sts	0x1A55, r25	; 0x801a55 <__clock+0x5>
    68de:	a0 93 56 1a 	sts	0x1A56, r26	; 0x801a56 <__clock+0x6>
    68e2:	b0 93 57 1a 	sts	0x1A57, r27	; 0x801a57 <__clock+0x7>
    68e6:	80 91 54 1a 	lds	r24, 0x1A54	; 0x801a54 <__clock+0x4>
    68ea:	90 91 55 1a 	lds	r25, 0x1A55	; 0x801a55 <__clock+0x5>
    68ee:	a0 91 56 1a 	lds	r26, 0x1A56	; 0x801a56 <__clock+0x6>
    68f2:	b0 91 57 1a 	lds	r27, 0x1A57	; 0x801a57 <__clock+0x7>
    68f6:	81 15       	cp	r24, r1
    68f8:	9a 4c       	sbci	r25, 0xCA	; 202
    68fa:	aa 49       	sbci	r26, 0x9A	; 154
    68fc:	bb 43       	sbci	r27, 0x3B	; 59
    68fe:	dc f0       	brlt	.+54     	; 0x6936 <clock_task+0x78>
    6900:	80 91 50 1a 	lds	r24, 0x1A50	; 0x801a50 <__clock>
    6904:	90 91 51 1a 	lds	r25, 0x1A51	; 0x801a51 <__clock+0x1>
    6908:	a0 91 52 1a 	lds	r26, 0x1A52	; 0x801a52 <__clock+0x2>
    690c:	b0 91 53 1a 	lds	r27, 0x1A53	; 0x801a53 <__clock+0x3>
    6910:	01 96       	adiw	r24, 0x01	; 1
    6912:	a1 1d       	adc	r26, r1
    6914:	b1 1d       	adc	r27, r1
    6916:	80 93 50 1a 	sts	0x1A50, r24	; 0x801a50 <__clock>
    691a:	90 93 51 1a 	sts	0x1A51, r25	; 0x801a51 <__clock+0x1>
    691e:	a0 93 52 1a 	sts	0x1A52, r26	; 0x801a52 <__clock+0x2>
    6922:	b0 93 53 1a 	sts	0x1A53, r27	; 0x801a53 <__clock+0x3>
    6926:	10 92 54 1a 	sts	0x1A54, r1	; 0x801a54 <__clock+0x4>
    692a:	10 92 55 1a 	sts	0x1A55, r1	; 0x801a55 <__clock+0x5>
    692e:	10 92 56 1a 	sts	0x1A56, r1	; 0x801a56 <__clock+0x6>
    6932:	10 92 57 1a 	sts	0x1A57, r1	; 0x801a57 <__clock+0x7>
    6936:	08 95       	ret

00006938 <clock_settime.part.2>:
    6938:	fc 01       	movw	r30, r24
    693a:	84 81       	ldd	r24, Z+4	; 0x04
    693c:	95 81       	ldd	r25, Z+5	; 0x05
    693e:	a6 81       	ldd	r26, Z+6	; 0x06
    6940:	b7 81       	ldd	r27, Z+7	; 0x07
    6942:	80 93 54 1a 	sts	0x1A54, r24	; 0x801a54 <__clock+0x4>
    6946:	90 93 55 1a 	sts	0x1A55, r25	; 0x801a55 <__clock+0x5>
    694a:	a0 93 56 1a 	sts	0x1A56, r26	; 0x801a56 <__clock+0x6>
    694e:	b0 93 57 1a 	sts	0x1A57, r27	; 0x801a57 <__clock+0x7>
    6952:	80 81       	ld	r24, Z
    6954:	91 81       	ldd	r25, Z+1	; 0x01
    6956:	a2 81       	ldd	r26, Z+2	; 0x02
    6958:	b3 81       	ldd	r27, Z+3	; 0x03
    695a:	80 93 50 1a 	sts	0x1A50, r24	; 0x801a50 <__clock>
    695e:	90 93 51 1a 	sts	0x1A51, r25	; 0x801a51 <__clock+0x1>
    6962:	a0 93 52 1a 	sts	0x1A52, r26	; 0x801a52 <__clock+0x2>
    6966:	b0 93 53 1a 	sts	0x1A53, r27	; 0x801a53 <__clock+0x3>
    696a:	80 91 54 1a 	lds	r24, 0x1A54	; 0x801a54 <__clock+0x4>
    696e:	90 91 55 1a 	lds	r25, 0x1A55	; 0x801a55 <__clock+0x5>
    6972:	a0 91 56 1a 	lds	r26, 0x1A56	; 0x801a56 <__clock+0x6>
    6976:	b0 91 57 1a 	lds	r27, 0x1A57	; 0x801a57 <__clock+0x7>
    697a:	44 81       	ldd	r20, Z+4	; 0x04
    697c:	55 81       	ldd	r21, Z+5	; 0x05
    697e:	66 81       	ldd	r22, Z+6	; 0x06
    6980:	77 81       	ldd	r23, Z+7	; 0x07
    6982:	48 17       	cp	r20, r24
    6984:	59 07       	cpc	r21, r25
    6986:	6a 07       	cpc	r22, r26
    6988:	7b 07       	cpc	r23, r27
    698a:	b9 f6       	brne	.-82     	; 0x693a <clock_settime.part.2+0x2>
    698c:	80 91 50 1a 	lds	r24, 0x1A50	; 0x801a50 <__clock>
    6990:	90 91 51 1a 	lds	r25, 0x1A51	; 0x801a51 <__clock+0x1>
    6994:	a0 91 52 1a 	lds	r26, 0x1A52	; 0x801a52 <__clock+0x2>
    6998:	b0 91 53 1a 	lds	r27, 0x1A53	; 0x801a53 <__clock+0x3>
    699c:	40 81       	ld	r20, Z
    699e:	51 81       	ldd	r21, Z+1	; 0x01
    69a0:	62 81       	ldd	r22, Z+2	; 0x02
    69a2:	73 81       	ldd	r23, Z+3	; 0x03
    69a4:	48 17       	cp	r20, r24
    69a6:	59 07       	cpc	r21, r25
    69a8:	6a 07       	cpc	r22, r26
    69aa:	7b 07       	cpc	r23, r27
    69ac:	31 f6       	brne	.-116    	; 0x693a <clock_settime.part.2+0x2>
    69ae:	80 e0       	ldi	r24, 0x00	; 0
    69b0:	90 e0       	ldi	r25, 0x00	; 0
    69b2:	08 95       	ret

000069b4 <set_timers>:
    69b4:	00 d0       	rcall	.+0      	; 0x69b6 <set_timers+0x2>
    69b6:	1f 92       	push	r1
    69b8:	00 97       	sbiw	r24, 0x00	; 0
    69ba:	79 f1       	breq	.+94     	; 0x6a1a <set_timers+0x66>
    69bc:	e8 e5       	ldi	r30, 0x58	; 88
    69be:	fa e1       	ldi	r31, 0x1A	; 26
    69c0:	4f ef       	ldi	r20, 0xFF	; 255
    69c2:	5f ef       	ldi	r21, 0xFF	; 255
    69c4:	20 e0       	ldi	r18, 0x00	; 0
    69c6:	30 e0       	ldi	r19, 0x00	; 0
    69c8:	60 81       	ld	r22, Z
    69ca:	71 81       	ldd	r23, Z+1	; 0x01
    69cc:	86 17       	cp	r24, r22
    69ce:	97 07       	cpc	r25, r23
    69d0:	79 f0       	breq	.+30     	; 0x69f0 <set_timers+0x3c>
    69d2:	67 2b       	or	r22, r23
    69d4:	71 f4       	brne	.+28     	; 0x69f2 <set_timers+0x3e>
    69d6:	f9 01       	movw	r30, r18
    69d8:	ee 0f       	add	r30, r30
    69da:	ff 1f       	adc	r31, r31
    69dc:	e2 0f       	add	r30, r18
    69de:	f3 1f       	adc	r31, r19
    69e0:	e8 5a       	subi	r30, 0xA8	; 168
    69e2:	f5 4e       	sbci	r31, 0xE5	; 229
    69e4:	91 83       	std	Z+1, r25	; 0x01
    69e6:	80 83       	st	Z, r24
    69e8:	81 e0       	ldi	r24, 0x01	; 1
    69ea:	82 83       	std	Z+2, r24	; 0x02
    69ec:	c9 01       	movw	r24, r18
    69ee:	19 c0       	rjmp	.+50     	; 0x6a22 <set_timers+0x6e>
    69f0:	a9 01       	movw	r20, r18
    69f2:	2f 5f       	subi	r18, 0xFF	; 255
    69f4:	3f 4f       	sbci	r19, 0xFF	; 255
    69f6:	33 96       	adiw	r30, 0x03	; 3
    69f8:	28 30       	cpi	r18, 0x08	; 8
    69fa:	31 05       	cpc	r19, r1
    69fc:	29 f7       	brne	.-54     	; 0x69c8 <set_timers+0x14>
    69fe:	4f 3f       	cpi	r20, 0xFF	; 255
    6a00:	8f ef       	ldi	r24, 0xFF	; 255
    6a02:	58 07       	cpc	r21, r24
    6a04:	69 f4       	brne	.+26     	; 0x6a20 <set_timers+0x6c>
    6a06:	8d ec       	ldi	r24, 0xCD	; 205
    6a08:	95 e0       	ldi	r25, 0x05	; 5
    6a0a:	a0 e0       	ldi	r26, 0x00	; 0
    6a0c:	ed b7       	in	r30, 0x3d	; 61
    6a0e:	fe b7       	in	r31, 0x3e	; 62
    6a10:	81 83       	std	Z+1, r24	; 0x01
    6a12:	92 83       	std	Z+2, r25	; 0x02
    6a14:	a3 83       	std	Z+3, r26	; 0x03
    6a16:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    6a1a:	8f ef       	ldi	r24, 0xFF	; 255
    6a1c:	9f ef       	ldi	r25, 0xFF	; 255
    6a1e:	01 c0       	rjmp	.+2      	; 0x6a22 <set_timers+0x6e>
    6a20:	ca 01       	movw	r24, r20
    6a22:	0f 90       	pop	r0
    6a24:	0f 90       	pop	r0
    6a26:	0f 90       	pop	r0
    6a28:	08 95       	ret

00006a2a <delete_all_timers>:
    6a2a:	e8 e5       	ldi	r30, 0x58	; 88
    6a2c:	fa e1       	ldi	r31, 0x1A	; 26
    6a2e:	12 82       	std	Z+2, r1	; 0x02
    6a30:	11 82       	std	Z+1, r1	; 0x01
    6a32:	10 82       	st	Z, r1
    6a34:	33 96       	adiw	r30, 0x03	; 3
    6a36:	8a e1       	ldi	r24, 0x1A	; 26
    6a38:	e0 37       	cpi	r30, 0x70	; 112
    6a3a:	f8 07       	cpc	r31, r24
    6a3c:	c1 f7       	brne	.-16     	; 0x6a2e <delete_all_timers+0x4>
    6a3e:	08 95       	ret

00006a40 <subtract_timespec>:
    6a40:	0f 93       	push	r16
    6a42:	1f 93       	push	r17
    6a44:	cf 93       	push	r28
    6a46:	df 93       	push	r29
    6a48:	fc 01       	movw	r30, r24
    6a4a:	84 81       	ldd	r24, Z+4	; 0x04
    6a4c:	95 81       	ldd	r25, Z+5	; 0x05
    6a4e:	a6 81       	ldd	r26, Z+6	; 0x06
    6a50:	b7 81       	ldd	r27, Z+7	; 0x07
    6a52:	eb 01       	movw	r28, r22
    6a54:	0c 81       	ldd	r16, Y+4	; 0x04
    6a56:	1d 81       	ldd	r17, Y+5	; 0x05
    6a58:	2e 81       	ldd	r18, Y+6	; 0x06
    6a5a:	3f 81       	ldd	r19, Y+7	; 0x07
    6a5c:	80 1b       	sub	r24, r16
    6a5e:	91 0b       	sbc	r25, r17
    6a60:	a2 0b       	sbc	r26, r18
    6a62:	b3 0b       	sbc	r27, r19
    6a64:	b7 fd       	sbrc	r27, 7
    6a66:	05 c0       	rjmp	.+10     	; 0x6a72 <subtract_timespec+0x32>
    6a68:	84 83       	std	Z+4, r24	; 0x04
    6a6a:	95 83       	std	Z+5, r25	; 0x05
    6a6c:	a6 83       	std	Z+6, r26	; 0x06
    6a6e:	b7 83       	std	Z+7, r27	; 0x07
    6a70:	12 c0       	rjmp	.+36     	; 0x6a96 <subtract_timespec+0x56>
    6a72:	96 53       	subi	r25, 0x36	; 54
    6a74:	a5 46       	sbci	r26, 0x65	; 101
    6a76:	b4 4c       	sbci	r27, 0xC4	; 196
    6a78:	84 83       	std	Z+4, r24	; 0x04
    6a7a:	95 83       	std	Z+5, r25	; 0x05
    6a7c:	a6 83       	std	Z+6, r26	; 0x06
    6a7e:	b7 83       	std	Z+7, r27	; 0x07
    6a80:	80 81       	ld	r24, Z
    6a82:	91 81       	ldd	r25, Z+1	; 0x01
    6a84:	a2 81       	ldd	r26, Z+2	; 0x02
    6a86:	b3 81       	ldd	r27, Z+3	; 0x03
    6a88:	01 97       	sbiw	r24, 0x01	; 1
    6a8a:	a1 09       	sbc	r26, r1
    6a8c:	b1 09       	sbc	r27, r1
    6a8e:	80 83       	st	Z, r24
    6a90:	91 83       	std	Z+1, r25	; 0x01
    6a92:	a2 83       	std	Z+2, r26	; 0x02
    6a94:	b3 83       	std	Z+3, r27	; 0x03
    6a96:	80 81       	ld	r24, Z
    6a98:	91 81       	ldd	r25, Z+1	; 0x01
    6a9a:	a2 81       	ldd	r26, Z+2	; 0x02
    6a9c:	b3 81       	ldd	r27, Z+3	; 0x03
    6a9e:	eb 01       	movw	r28, r22
    6aa0:	48 81       	ld	r20, Y
    6aa2:	59 81       	ldd	r21, Y+1	; 0x01
    6aa4:	6a 81       	ldd	r22, Y+2	; 0x02
    6aa6:	7b 81       	ldd	r23, Y+3	; 0x03
    6aa8:	84 1b       	sub	r24, r20
    6aaa:	95 0b       	sbc	r25, r21
    6aac:	a6 0b       	sbc	r26, r22
    6aae:	b7 0b       	sbc	r27, r23
    6ab0:	80 83       	st	Z, r24
    6ab2:	91 83       	std	Z+1, r25	; 0x01
    6ab4:	a2 83       	std	Z+2, r26	; 0x02
    6ab6:	b3 83       	std	Z+3, r27	; 0x03
    6ab8:	df 91       	pop	r29
    6aba:	cf 91       	pop	r28
    6abc:	1f 91       	pop	r17
    6abe:	0f 91       	pop	r16
    6ac0:	08 95       	ret

00006ac2 <ts_to_str>:
    6ac2:	ad b7       	in	r26, 0x3d	; 61
    6ac4:	be b7       	in	r27, 0x3e	; 62
    6ac6:	1f 97       	sbiw	r26, 0x0f	; 15
    6ac8:	0f b6       	in	r0, 0x3f	; 63
    6aca:	f8 94       	cli
    6acc:	be bf       	out	0x3e, r27	; 62
    6ace:	0f be       	out	0x3f, r0	; 63
    6ad0:	ad bf       	out	0x3d, r26	; 61
    6ad2:	fc 01       	movw	r30, r24
    6ad4:	44 81       	ldd	r20, Z+4	; 0x04
    6ad6:	55 81       	ldd	r21, Z+5	; 0x05
    6ad8:	66 81       	ldd	r22, Z+6	; 0x06
    6ada:	77 81       	ldd	r23, Z+7	; 0x07
    6adc:	ed b7       	in	r30, 0x3d	; 61
    6ade:	fe b7       	in	r31, 0x3e	; 62
    6ae0:	44 87       	std	Z+12, r20	; 0x0c
    6ae2:	55 87       	std	Z+13, r21	; 0x0d
    6ae4:	66 87       	std	Z+14, r22	; 0x0e
    6ae6:	77 87       	std	Z+15, r23	; 0x0f
    6ae8:	fc 01       	movw	r30, r24
    6aea:	80 81       	ld	r24, Z
    6aec:	91 81       	ldd	r25, Z+1	; 0x01
    6aee:	a2 81       	ldd	r26, Z+2	; 0x02
    6af0:	b3 81       	ldd	r27, Z+3	; 0x03
    6af2:	ed b7       	in	r30, 0x3d	; 61
    6af4:	fe b7       	in	r31, 0x3e	; 62
    6af6:	80 87       	std	Z+8, r24	; 0x08
    6af8:	91 87       	std	Z+9, r25	; 0x09
    6afa:	a2 87       	std	Z+10, r26	; 0x0a
    6afc:	b3 87       	std	Z+11, r27	; 0x0b
    6afe:	83 ec       	ldi	r24, 0xC3	; 195
    6b00:	95 e0       	ldi	r25, 0x05	; 5
    6b02:	a0 e0       	ldi	r26, 0x00	; 0
    6b04:	85 83       	std	Z+5, r24	; 0x05
    6b06:	96 83       	std	Z+6, r25	; 0x06
    6b08:	a7 83       	std	Z+7, r26	; 0x07
    6b0a:	8f e1       	ldi	r24, 0x1F	; 31
    6b0c:	90 e0       	ldi	r25, 0x00	; 0
    6b0e:	94 83       	std	Z+4, r25	; 0x04
    6b10:	83 83       	std	Z+3, r24	; 0x03
    6b12:	84 e8       	ldi	r24, 0x84	; 132
    6b14:	97 e1       	ldi	r25, 0x17	; 23
    6b16:	92 83       	std	Z+2, r25	; 0x02
    6b18:	81 83       	std	Z+1, r24	; 0x01
    6b1a:	0e 94 04 47 	call	0x8e08	; 0x8e08 <snprintf_P>
    6b1e:	84 e8       	ldi	r24, 0x84	; 132
    6b20:	97 e1       	ldi	r25, 0x17	; 23
    6b22:	ad b7       	in	r26, 0x3d	; 61
    6b24:	be b7       	in	r27, 0x3e	; 62
    6b26:	1f 96       	adiw	r26, 0x0f	; 15
    6b28:	0f b6       	in	r0, 0x3f	; 63
    6b2a:	f8 94       	cli
    6b2c:	be bf       	out	0x3e, r27	; 62
    6b2e:	0f be       	out	0x3f, r0	; 63
    6b30:	ad bf       	out	0x3d, r26	; 61
    6b32:	08 95       	ret

00006b34 <clock_elapsed_begin>:
    6b34:	6c e7       	ldi	r22, 0x7C	; 124
    6b36:	77 e1       	ldi	r23, 0x17	; 23
    6b38:	80 e0       	ldi	r24, 0x00	; 0
    6b3a:	90 e0       	ldi	r25, 0x00	; 0
    6b3c:	4b ce       	rjmp	.-874    	; 0x67d4 <clock_gettime>
    6b3e:	08 95       	ret

00006b40 <clock_elapsed_end>:
    6b40:	af e0       	ldi	r26, 0x0F	; 15
    6b42:	b0 e0       	ldi	r27, 0x00	; 0
    6b44:	e6 ea       	ldi	r30, 0xA6	; 166
    6b46:	f5 e3       	ldi	r31, 0x35	; 53
    6b48:	0c 94 1b e7 	jmp	0x1ce36	; 0x1ce36 <__prologue_saves__+0x1c>
    6b4c:	8c 01       	movw	r16, r24
    6b4e:	be 01       	movw	r22, r28
    6b50:	68 5f       	subi	r22, 0xF8	; 248
    6b52:	7f 4f       	sbci	r23, 0xFF	; 255
    6b54:	80 e0       	ldi	r24, 0x00	; 0
    6b56:	90 e0       	ldi	r25, 0x00	; 0
    6b58:	3d de       	rcall	.-902    	; 0x67d4 <clock_gettime>
    6b5a:	6c e7       	ldi	r22, 0x7C	; 124
    6b5c:	77 e1       	ldi	r23, 0x17	; 23
    6b5e:	ce 01       	movw	r24, r28
    6b60:	08 96       	adiw	r24, 0x08	; 8
    6b62:	6e df       	rcall	.-292    	; 0x6a40 <subtract_timespec>
    6b64:	01 15       	cp	r16, r1
    6b66:	11 05       	cpc	r17, r1
    6b68:	b1 f0       	breq	.+44     	; 0x6b96 <clock_elapsed_end+0x56>
    6b6a:	f8 01       	movw	r30, r16
    6b6c:	80 81       	ld	r24, Z
    6b6e:	88 23       	and	r24, r24
    6b70:	91 f0       	breq	.+36     	; 0x6b96 <clock_elapsed_end+0x56>
    6b72:	ce 01       	movw	r24, r28
    6b74:	08 96       	adiw	r24, 0x08	; 8
    6b76:	a5 df       	rcall	.-182    	; 0x6ac2 <ts_to_str>
    6b78:	ed b7       	in	r30, 0x3d	; 61
    6b7a:	fe b7       	in	r31, 0x3e	; 62
    6b7c:	97 83       	std	Z+7, r25	; 0x07
    6b7e:	86 83       	std	Z+6, r24	; 0x06
    6b80:	15 83       	std	Z+5, r17	; 0x05
    6b82:	04 83       	std	Z+4, r16	; 0x04
    6b84:	85 eb       	ldi	r24, 0xB5	; 181
    6b86:	95 e0       	ldi	r25, 0x05	; 5
    6b88:	a0 e0       	ldi	r26, 0x00	; 0
    6b8a:	81 83       	std	Z+1, r24	; 0x01
    6b8c:	92 83       	std	Z+2, r25	; 0x02
    6b8e:	a3 83       	std	Z+3, r26	; 0x03
    6b90:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    6b94:	0f c0       	rjmp	.+30     	; 0x6bb4 <clock_elapsed_end+0x74>
    6b96:	ce 01       	movw	r24, r28
    6b98:	08 96       	adiw	r24, 0x08	; 8
    6b9a:	93 df       	rcall	.-218    	; 0x6ac2 <ts_to_str>
    6b9c:	ed b7       	in	r30, 0x3d	; 61
    6b9e:	fe b7       	in	r31, 0x3e	; 62
    6ba0:	95 83       	std	Z+5, r25	; 0x05
    6ba2:	84 83       	std	Z+4, r24	; 0x04
    6ba4:	8a ea       	ldi	r24, 0xAA	; 170
    6ba6:	95 e0       	ldi	r25, 0x05	; 5
    6ba8:	a0 e0       	ldi	r26, 0x00	; 0
    6baa:	81 83       	std	Z+1, r24	; 0x01
    6bac:	92 83       	std	Z+2, r25	; 0x02
    6bae:	a3 83       	std	Z+3, r26	; 0x03
    6bb0:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    6bb4:	2f 96       	adiw	r28, 0x0f	; 15
    6bb6:	e4 e0       	ldi	r30, 0x04	; 4
    6bb8:	0c 94 37 e7 	jmp	0x1ce6e	; 0x1ce6e <__epilogue_restores__+0x1c>

00006bbc <clock_clear>:
    6bbc:	a8 e0       	ldi	r26, 0x08	; 8
    6bbe:	b0 e0       	ldi	r27, 0x00	; 0
    6bc0:	e4 ee       	ldi	r30, 0xE4	; 228
    6bc2:	f5 e3       	ldi	r31, 0x35	; 53
    6bc4:	0c 94 1d e7 	jmp	0x1ce3a	; 0x1ce3a <__prologue_saves__+0x20>
    6bc8:	1d 82       	std	Y+5, r1	; 0x05
    6bca:	1e 82       	std	Y+6, r1	; 0x06
    6bcc:	1f 82       	std	Y+7, r1	; 0x07
    6bce:	18 86       	std	Y+8, r1	; 0x08
    6bd0:	19 82       	std	Y+1, r1	; 0x01
    6bd2:	1a 82       	std	Y+2, r1	; 0x02
    6bd4:	1b 82       	std	Y+3, r1	; 0x03
    6bd6:	1c 82       	std	Y+4, r1	; 0x04
    6bd8:	ce 01       	movw	r24, r28
    6bda:	01 96       	adiw	r24, 0x01	; 1
    6bdc:	ad de       	rcall	.-678    	; 0x6938 <clock_settime.part.2>
    6bde:	e0 e7       	ldi	r30, 0x70	; 112
    6be0:	fa e1       	ldi	r31, 0x1A	; 26
    6be2:	11 82       	std	Z+1, r1	; 0x01
    6be4:	10 82       	st	Z, r1
    6be6:	13 82       	std	Z+3, r1	; 0x03
    6be8:	12 82       	std	Z+2, r1	; 0x02
    6bea:	28 96       	adiw	r28, 0x08	; 8
    6bec:	e2 e0       	ldi	r30, 0x02	; 2
    6bee:	0c 94 39 e7 	jmp	0x1ce72	; 0x1ce72 <__epilogue_restores__+0x20>

00006bf2 <enable_timers>:
///
/// @return  void
MEMSPACE
void enable_timers()
{
    if(timers_configured && !timers_enabled)
    6bf2:	80 91 a4 17 	lds	r24, 0x17A4	; 0x8017a4 <timers_configured>
    6bf6:	90 91 a5 17 	lds	r25, 0x17A5	; 0x8017a5 <timers_configured+0x1>
    6bfa:	89 2b       	or	r24, r25
    6bfc:	69 f0       	breq	.+26     	; 0x6c18 <enable_timers+0x26>
    6bfe:	80 91 a6 17 	lds	r24, 0x17A6	; 0x8017a6 <timers_enabled>
    6c02:	90 91 a7 17 	lds	r25, 0x17A7	; 0x8017a7 <timers_enabled+0x1>
    6c06:	89 2b       	or	r24, r25
    6c08:	39 f4       	brne	.+14     	; 0x6c18 <enable_timers+0x26>
    {
        enable_system_task();
    6c0a:	a8 dd       	rcall	.-1200   	; 0x675c <enable_system_task>
        timers_enabled = 1;
    6c0c:	81 e0       	ldi	r24, 0x01	; 1
    6c0e:	90 e0       	ldi	r25, 0x00	; 0
    6c10:	90 93 a7 17 	sts	0x17A7, r25	; 0x8017a7 <timers_enabled+0x1>
    6c14:	80 93 a6 17 	sts	0x17A6, r24	; 0x8017a6 <timers_enabled>
    6c18:	08 95       	ret

00006c1a <execute_timers>:
/// @brief  Execute all user timers at SYSTEM_HZ rate.
///  Called by system task
///
/// @return  void
void execute_timers()
{
    6c1a:	cf 93       	push	r28
    6c1c:	df 93       	push	r29
    6c1e:	c8 e5       	ldi	r28, 0x58	; 88
    6c20:	da e1       	ldi	r29, 0x1A	; 26
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
    6c22:	8a 81       	ldd	r24, Y+2	; 0x02
    6c24:	88 23       	and	r24, r24
    6c26:	29 f0       	breq	.+10     	; 0x6c32 <execute_timers+0x18>
    6c28:	e8 81       	ld	r30, Y
    6c2a:	f9 81       	ldd	r31, Y+1	; 0x01
    6c2c:	30 97       	sbiw	r30, 0x00	; 0
    6c2e:	09 f0       	breq	.+2      	; 0x6c32 <execute_timers+0x18>
            (*timer_irq[i].user_timer_handler)();
    6c30:	09 95       	icall
    6c32:	23 96       	adiw	r28, 0x03	; 3
/// @return  void
void execute_timers()
{
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    6c34:	8a e1       	ldi	r24, 0x1A	; 26
    6c36:	c0 37       	cpi	r28, 0x70	; 112
    6c38:	d8 07       	cpc	r29, r24
    6c3a:	99 f7       	brne	.-26     	; 0x6c22 <execute_timers+0x8>
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
            (*timer_irq[i].user_timer_handler)();
    }
}
    6c3c:	df 91       	pop	r29
    6c3e:	cf 91       	pop	r28
    6c40:	08 95       	ret

00006c42 <init_timers>:
/// @see: timer_hal.c for hardware dependent interface
//
/// @return  void
MEMSPACE
void init_timers()
{
    6c42:	00 d0       	rcall	.+0      	; 0x6c44 <init_timers+0x2>
    6c44:	1f 92       	push	r1
    printf("Timers init called\n");
    6c46:	86 e9       	ldi	r24, 0x96	; 150
    6c48:	95 e0       	ldi	r25, 0x05	; 5
    6c4a:	a0 e0       	ldi	r26, 0x00	; 0
    6c4c:	ed b7       	in	r30, 0x3d	; 61
    6c4e:	fe b7       	in	r31, 0x3e	; 62
    6c50:	81 83       	std	Z+1, r24	; 0x01
    6c52:	92 83       	std	Z+2, r25	; 0x02
    6c54:	a3 83       	std	Z+3, r26	; 0x03
    6c56:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>

    if(!timers_configured)
    6c5a:	80 91 a4 17 	lds	r24, 0x17A4	; 0x8017a4 <timers_configured>
    6c5e:	90 91 a5 17 	lds	r25, 0x17A5	; 0x8017a5 <timers_configured+0x1>
    6c62:	89 2b       	or	r24, r25
    6c64:	a9 f4       	brne	.+42     	; 0x6c90 <init_timers+0x4e>
    {
        install_timers_isr();
    6c66:	7c dd       	rcall	.-1288   	; 0x6760 <install_timers_isr>
        timers_configured = 1;
    6c68:	81 e0       	ldi	r24, 0x01	; 1
    6c6a:	90 e0       	ldi	r25, 0x00	; 0
    6c6c:	90 93 a5 17 	sts	0x17A5, r25	; 0x8017a5 <timers_configured+0x1>
    6c70:	80 93 a4 17 	sts	0x17A4, r24	; 0x8017a4 <timers_configured>
        timers_enabled = 0;
    6c74:	10 92 a7 17 	sts	0x17A7, r1	; 0x8017a7 <timers_enabled+0x1>
    6c78:	10 92 a6 17 	sts	0x17A6, r1	; 0x8017a6 <timers_enabled>
        printf("Timers configured\n");
    6c7c:	83 e8       	ldi	r24, 0x83	; 131
    6c7e:	95 e0       	ldi	r25, 0x05	; 5
    6c80:	a0 e0       	ldi	r26, 0x00	; 0
    6c82:	ed b7       	in	r30, 0x3d	; 61
    6c84:	fe b7       	in	r31, 0x3e	; 62
    6c86:	81 83       	std	Z+1, r24	; 0x01
    6c88:	92 83       	std	Z+2, r25	; 0x02
    6c8a:	a3 83       	std	Z+3, r26	; 0x03
    6c8c:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    }

    delete_all_timers();

    clock_clear();
    6c90:	cc de       	rcall	.-616    	; 0x6a2a <delete_all_timers>
    6c92:	94 df       	rcall	.-216    	; 0x6bbc <clock_clear>
    printf("Clock Init\n");
    6c94:	87 e7       	ldi	r24, 0x77	; 119
    6c96:	95 e0       	ldi	r25, 0x05	; 5
    6c98:	a0 e0       	ldi	r26, 0x00	; 0
    6c9a:	ed b7       	in	r30, 0x3d	; 61
    6c9c:	fe b7       	in	r31, 0x3e	; 62
    6c9e:	81 83       	std	Z+1, r24	; 0x01
    6ca0:	92 83       	std	Z+2, r25	; 0x02
    6ca2:	a3 83       	std	Z+3, r26	; 0x03
    6ca4:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>

///  See time.c
    if(set_timers(clock_task,1) == -1)
    6ca8:	61 e0       	ldi	r22, 0x01	; 1
    6caa:	70 e0       	ldi	r23, 0x00	; 0
    6cac:	8f e5       	ldi	r24, 0x5F	; 95
    6cae:	94 e3       	ldi	r25, 0x34	; 52
    6cb0:	81 de       	rcall	.-766    	; 0x69b4 <set_timers>
    6cb2:	01 96       	adiw	r24, 0x01	; 1
    6cb4:	51 f4       	brne	.+20     	; 0x6cca <init_timers+0x88>
        printf("Clock task init failed\n");
    6cb6:	8f e5       	ldi	r24, 0x5F	; 95
    6cb8:	95 e0       	ldi	r25, 0x05	; 5
    6cba:	a0 e0       	ldi	r26, 0x00	; 0
    6cbc:	ed b7       	in	r30, 0x3d	; 61
    6cbe:	fe b7       	in	r31, 0x3e	; 62
    6cc0:	81 83       	std	Z+1, r24	; 0x01
    6cc2:	92 83       	std	Z+2, r25	; 0x02
    6cc4:	a3 83       	std	Z+3, r26	; 0x03
    6cc6:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    printf("Clock Installed\n");
    6cca:	8e e4       	ldi	r24, 0x4E	; 78
    6ccc:	95 e0       	ldi	r25, 0x05	; 5
    6cce:	a0 e0       	ldi	r26, 0x00	; 0
    6cd0:	ed b7       	in	r30, 0x3d	; 61
    6cd2:	fe b7       	in	r31, 0x3e	; 62
    6cd4:	81 83       	std	Z+1, r24	; 0x01
    6cd6:	92 83       	std	Z+2, r25	; 0x02
    6cd8:	a3 83       	std	Z+3, r26	; 0x03
    6cda:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>

    enable_timers();
    6cde:	89 df       	rcall	.-238    	; 0x6bf2 <enable_timers>

    printf("Timers enabled\n");
    6ce0:	8e e3       	ldi	r24, 0x3E	; 62
    6ce2:	95 e0       	ldi	r25, 0x05	; 5
    6ce4:	a0 e0       	ldi	r26, 0x00	; 0
    6ce6:	ed b7       	in	r30, 0x3d	; 61
    6ce8:	fe b7       	in	r31, 0x3e	; 62
    6cea:	81 83       	std	Z+1, r24	; 0x01
    6cec:	92 83       	std	Z+2, r25	; 0x02
    6cee:	a3 83       	std	Z+3, r26	; 0x03
    6cf0:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
}
    6cf4:	0f 90       	pop	r0
    6cf6:	0f 90       	pop	r0
    6cf8:	0f 90       	pop	r0
    6cfa:	08 95       	ret

00006cfc <clock_getres>:
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_getres(clockid_t clk_id  __attribute__((unused)), struct timespec *res)
{
    if(clk_id)
    6cfc:	89 2b       	or	r24, r25
    6cfe:	81 f4       	brne	.+32     	; 0x6d20 <clock_getres+0x24>
        return(-1);
    res->tv_sec = 0;
    6d00:	fb 01       	movw	r30, r22
    6d02:	10 82       	st	Z, r1
    6d04:	11 82       	std	Z+1, r1	; 0x01
    6d06:	12 82       	std	Z+2, r1	; 0x02
    6d08:	13 82       	std	Z+3, r1	; 0x03
    res->tv_nsec = SYSTEM_TASK_TIC_NS;
    6d0a:	80 e4       	ldi	r24, 0x40	; 64
    6d0c:	92 e4       	ldi	r25, 0x42	; 66
    6d0e:	af e0       	ldi	r26, 0x0F	; 15
    6d10:	b0 e0       	ldi	r27, 0x00	; 0
    6d12:	84 83       	std	Z+4, r24	; 0x04
    6d14:	95 83       	std	Z+5, r25	; 0x05
    6d16:	a6 83       	std	Z+6, r26	; 0x06
    6d18:	b7 83       	std	Z+7, r27	; 0x07
    return(0);
    6d1a:	80 e0       	ldi	r24, 0x00	; 0
    6d1c:	90 e0       	ldi	r25, 0x00	; 0
    6d1e:	08 95       	ret
/// @return -1 on error.
MEMSPACE
int clock_getres(clockid_t clk_id  __attribute__((unused)), struct timespec *res)
{
    if(clk_id)
        return(-1);
    6d20:	8f ef       	ldi	r24, 0xFF	; 255
    6d22:	9f ef       	ldi	r25, 0xFF	; 255
    res->tv_sec = 0;
    res->tv_nsec = SYSTEM_TASK_TIC_NS;
    return(0);
}
    6d24:	08 95       	ret

00006d26 <clock_settime>:
///
/// @return 0.
MEMSPACE
int clock_settime(clockid_t clk_id  __attribute__((unused)), const struct timespec *ts)
{
    if(clk_id)
    6d26:	89 2b       	or	r24, r25
    6d28:	19 f4       	brne	.+6      	; 0x6d30 <clock_settime+0xa>
    6d2a:	cb 01       	movw	r24, r22
    6d2c:	05 ce       	rjmp	.-1014   	; 0x6938 <clock_settime.part.2>
    6d2e:	08 95       	ret
        return(-1);
    6d30:	8f ef       	ldi	r24, 0xFF	; 255
    6d32:	9f ef       	ldi	r25, 0xFF	; 255
            continue;
        break;
    }

    return(0);
}
    6d34:	08 95       	ret

00006d36 <IS_Leap>:
void print_dst_gmt()
{
    printf("DST START       GMT: %s\n", ctime_gm(&dst.start));
    printf("DST END         GMT: %s\n", ctime_gm(&dst.end));

}
    6d36:	9c 01       	movw	r18, r24
    6d38:	83 70       	andi	r24, 0x03	; 3
    6d3a:	99 27       	eor	r25, r25
    6d3c:	00 97       	sbiw	r24, 0x00	; 0
    6d3e:	69 f4       	brne	.+26     	; 0x6d5a <IS_Leap+0x24>
    6d40:	2c 36       	cpi	r18, 0x6C	; 108
    6d42:	47 e0       	ldi	r20, 0x07	; 7
    6d44:	34 07       	cpc	r19, r20
    6d46:	59 f0       	breq	.+22     	; 0x6d5e <IS_Leap+0x28>
    6d48:	51 e0       	ldi	r21, 0x01	; 1
    6d4a:	40 e0       	ldi	r20, 0x00	; 0
    6d4c:	24 33       	cpi	r18, 0x34	; 52
    6d4e:	38 40       	sbci	r19, 0x08	; 8
    6d50:	09 f4       	brne	.+2      	; 0x6d54 <IS_Leap+0x1e>
    6d52:	50 e0       	ldi	r21, 0x00	; 0
    6d54:	85 2f       	mov	r24, r21
    6d56:	94 2f       	mov	r25, r20
    6d58:	08 95       	ret
    6d5a:	80 e0       	ldi	r24, 0x00	; 0
    6d5c:	90 e0       	ldi	r25, 0x00	; 0
    6d5e:	08 95       	ret

00006d60 <tm_mon_to_ascii>:
    6d60:	8c 30       	cpi	r24, 0x0C	; 12
    6d62:	91 05       	cpc	r25, r1
    6d64:	40 f4       	brcc	.+16     	; 0x6d76 <tm_mon_to_ascii+0x16>
    6d66:	88 0f       	add	r24, r24
    6d68:	99 1f       	adc	r25, r25
    6d6a:	fc 01       	movw	r30, r24
    6d6c:	e5 5f       	subi	r30, 0xF5	; 245
    6d6e:	fe 4f       	sbci	r31, 0xFE	; 254
    6d70:	80 81       	ld	r24, Z
    6d72:	91 81       	ldd	r25, Z+1	; 0x01
    6d74:	08 95       	ret
    6d76:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <__Month+0x18>
    6d7a:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <__Month+0x19>
    6d7e:	08 95       	ret

00006d80 <Days_Per_Month>:
    6d80:	cf 93       	push	r28
    6d82:	df 93       	push	r29
    6d84:	8c 30       	cpi	r24, 0x0C	; 12
    6d86:	91 05       	cpc	r25, r1
    6d88:	24 f0       	brlt	.+8      	; 0x6d92 <Days_Per_Month+0x12>
    6d8a:	6f 5f       	subi	r22, 0xFF	; 255
    6d8c:	7f 4f       	sbci	r23, 0xFF	; 255
    6d8e:	0c 97       	sbiw	r24, 0x0c	; 12
    6d90:	f9 cf       	rjmp	.-14     	; 0x6d84 <Days_Per_Month+0x4>
    6d92:	97 ff       	sbrs	r25, 7
    6d94:	04 c0       	rjmp	.+8      	; 0x6d9e <Days_Per_Month+0x1e>
    6d96:	61 50       	subi	r22, 0x01	; 1
    6d98:	71 09       	sbc	r23, r1
    6d9a:	0c 96       	adiw	r24, 0x0c	; 12
    6d9c:	fa cf       	rjmp	.-12     	; 0x6d92 <Days_Per_Month+0x12>
    6d9e:	fc 01       	movw	r30, r24
    6da0:	ee 0f       	add	r30, r30
    6da2:	ff 1f       	adc	r31, r31
    6da4:	e8 57       	subi	r30, 0x78	; 120
    6da6:	fc 4f       	sbci	r31, 0xFC	; 252
    6da8:	c0 81       	ld	r28, Z
    6daa:	d1 81       	ldd	r29, Z+1	; 0x01
    6dac:	01 97       	sbiw	r24, 0x01	; 1
    6dae:	29 f4       	brne	.+10     	; 0x6dba <Days_Per_Month+0x3a>
    6db0:	cb 01       	movw	r24, r22
    6db2:	c1 df       	rcall	.-126    	; 0x6d36 <IS_Leap>
    6db4:	89 2b       	or	r24, r25
    6db6:	09 f0       	breq	.+2      	; 0x6dba <Days_Per_Month+0x3a>
    6db8:	21 96       	adiw	r28, 0x01	; 1
    6dba:	ce 01       	movw	r24, r28
    6dbc:	df 91       	pop	r29
    6dbe:	cf 91       	pop	r28
    6dc0:	08 95       	ret

00006dc2 <time_to_tm>:
    6dc2:	a0 e0       	ldi	r26, 0x00	; 0
    6dc4:	b0 e0       	ldi	r27, 0x00	; 0
    6dc6:	e7 ee       	ldi	r30, 0xE7	; 231
    6dc8:	f6 e3       	ldi	r31, 0x36	; 54
    6dca:	0c 94 0f e7 	jmp	0x1ce1e	; 0x1ce1e <__prologue_saves__+0x4>
    6dce:	e8 01       	movw	r28, r16
    6dd0:	e6 e1       	ldi	r30, 0x16	; 22
    6dd2:	d8 01       	movw	r26, r16
    6dd4:	1d 92       	st	X+, r1
    6dd6:	ea 95       	dec	r30
    6dd8:	e9 f7       	brne	.-6      	; 0x6dd4 <time_to_tm+0x12>
    6dda:	61 15       	cp	r22, r1
    6ddc:	bd e5       	ldi	r27, 0x5D	; 93
    6dde:	7b 07       	cpc	r23, r27
    6de0:	bd ef       	ldi	r27, 0xFD	; 253
    6de2:	8b 07       	cpc	r24, r27
    6de4:	bf ef       	ldi	r27, 0xFF	; 255
    6de6:	9b 07       	cpc	r25, r27
    6de8:	08 f0       	brcs	.+2      	; 0x6dec <time_to_tm+0x2a>
    6dea:	c0 c0       	rjmp	.+384    	; 0x6f6c <time_to_tm+0x1aa>
    6dec:	6b 01       	movw	r12, r22
    6dee:	7c 01       	movw	r14, r24
    6df0:	c2 1a       	sub	r12, r18
    6df2:	d3 0a       	sbc	r13, r19
    6df4:	e4 0a       	sbc	r14, r20
    6df6:	f5 0a       	sbc	r15, r21
    6df8:	46 01       	movw	r8, r12
    6dfa:	57 01       	movw	r10, r14
    6dfc:	e0 e8       	ldi	r30, 0x80	; 128
    6dfe:	ce 16       	cp	r12, r30
    6e00:	ee ea       	ldi	r30, 0xAE	; 174
    6e02:	de 06       	cpc	r13, r30
    6e04:	ee ef       	ldi	r30, 0xFE	; 254
    6e06:	ee 06       	cpc	r14, r30
    6e08:	ef ef       	ldi	r30, 0xFF	; 255
    6e0a:	fe 06       	cpc	r15, r30
    6e0c:	50 f0       	brcs	.+20     	; 0x6e22 <time_to_tm+0x60>
    6e0e:	80 e8       	ldi	r24, 0x80	; 128
    6e10:	88 0e       	add	r8, r24
    6e12:	81 e5       	ldi	r24, 0x51	; 81
    6e14:	98 1e       	adc	r9, r24
    6e16:	81 e0       	ldi	r24, 0x01	; 1
    6e18:	a8 1e       	adc	r10, r24
    6e1a:	b1 1c       	adc	r11, r1
    6e1c:	01 e0       	ldi	r16, 0x01	; 1
    6e1e:	10 e0       	ldi	r17, 0x00	; 0
    6e20:	02 c0       	rjmp	.+4      	; 0x6e26 <time_to_tm+0x64>
    6e22:	00 e0       	ldi	r16, 0x00	; 0
    6e24:	10 e0       	ldi	r17, 0x00	; 0
    6e26:	8c e3       	ldi	r24, 0x3C	; 60
    6e28:	48 2e       	mov	r4, r24
    6e2a:	51 2c       	mov	r5, r1
    6e2c:	61 2c       	mov	r6, r1
    6e2e:	71 2c       	mov	r7, r1
    6e30:	c5 01       	movw	r24, r10
    6e32:	b4 01       	movw	r22, r8
    6e34:	a3 01       	movw	r20, r6
    6e36:	92 01       	movw	r18, r4
    6e38:	0e 94 a0 e6 	call	0x1cd40	; 0x1cd40 <__udivmodsi4>
    6e3c:	79 83       	std	Y+1, r23	; 0x01
    6e3e:	68 83       	st	Y, r22
    6e40:	ca 01       	movw	r24, r20
    6e42:	b9 01       	movw	r22, r18
    6e44:	a3 01       	movw	r20, r6
    6e46:	92 01       	movw	r18, r4
    6e48:	0e 94 a0 e6 	call	0x1cd40	; 0x1cd40 <__udivmodsi4>
    6e4c:	7b 83       	std	Y+3, r23	; 0x03
    6e4e:	6a 83       	std	Y+2, r22	; 0x02
    6e50:	c5 01       	movw	r24, r10
    6e52:	b4 01       	movw	r22, r8
    6e54:	20 e1       	ldi	r18, 0x10	; 16
    6e56:	3e e0       	ldi	r19, 0x0E	; 14
    6e58:	40 e0       	ldi	r20, 0x00	; 0
    6e5a:	50 e0       	ldi	r21, 0x00	; 0
    6e5c:	0e 94 a0 e6 	call	0x1cd40	; 0x1cd40 <__udivmodsi4>
    6e60:	ca 01       	movw	r24, r20
    6e62:	b9 01       	movw	r22, r18
    6e64:	28 e1       	ldi	r18, 0x18	; 24
    6e66:	30 e0       	ldi	r19, 0x00	; 0
    6e68:	40 e0       	ldi	r20, 0x00	; 0
    6e6a:	50 e0       	ldi	r21, 0x00	; 0
    6e6c:	0e 94 a0 e6 	call	0x1cd40	; 0x1cd40 <__udivmodsi4>
    6e70:	7d 83       	std	Y+5, r23	; 0x05
    6e72:	6c 83       	std	Y+4, r22	; 0x04
    6e74:	01 15       	cp	r16, r1
    6e76:	11 05       	cpc	r17, r1
    6e78:	89 f0       	breq	.+34     	; 0x6e9c <time_to_tm+0xda>
    6e7a:	85 e4       	ldi	r24, 0x45	; 69
    6e7c:	90 e0       	ldi	r25, 0x00	; 0
    6e7e:	9b 87       	std	Y+11, r25	; 0x0b
    6e80:	8a 87       	std	Y+10, r24	; 0x0a
    6e82:	8b e0       	ldi	r24, 0x0B	; 11
    6e84:	90 e0       	ldi	r25, 0x00	; 0
    6e86:	99 87       	std	Y+9, r25	; 0x09
    6e88:	88 87       	std	Y+8, r24	; 0x08
    6e8a:	8f e1       	ldi	r24, 0x1F	; 31
    6e8c:	90 e0       	ldi	r25, 0x00	; 0
    6e8e:	9f 83       	std	Y+7, r25	; 0x07
    6e90:	8e 83       	std	Y+6, r24	; 0x06
    6e92:	83 e0       	ldi	r24, 0x03	; 3
    6e94:	90 e0       	ldi	r25, 0x00	; 0
    6e96:	9d 87       	std	Y+13, r25	; 0x0d
    6e98:	8c 87       	std	Y+12, r24	; 0x0c
    6e9a:	65 c0       	rjmp	.+202    	; 0x6f66 <time_to_tm+0x1a4>
    6e9c:	c5 01       	movw	r24, r10
    6e9e:	b4 01       	movw	r22, r8
    6ea0:	20 e8       	ldi	r18, 0x80	; 128
    6ea2:	31 e5       	ldi	r19, 0x51	; 81
    6ea4:	41 e0       	ldi	r20, 0x01	; 1
    6ea6:	50 e0       	ldi	r21, 0x00	; 0
    6ea8:	0e 94 a0 e6 	call	0x1cd40	; 0x1cd40 <__udivmodsi4>
    6eac:	49 01       	movw	r8, r18
    6eae:	5a 01       	movw	r10, r20
    6eb0:	ca 01       	movw	r24, r20
    6eb2:	b9 01       	movw	r22, r18
    6eb4:	6c 5f       	subi	r22, 0xFC	; 252
    6eb6:	7f 4f       	sbci	r23, 0xFF	; 255
    6eb8:	8f 4f       	sbci	r24, 0xFF	; 255
    6eba:	9f 4f       	sbci	r25, 0xFF	; 255
    6ebc:	27 e0       	ldi	r18, 0x07	; 7
    6ebe:	30 e0       	ldi	r19, 0x00	; 0
    6ec0:	40 e0       	ldi	r20, 0x00	; 0
    6ec2:	50 e0       	ldi	r21, 0x00	; 0
    6ec4:	0e 94 c2 e6 	call	0x1cd84	; 0x1cd84 <__divmodsi4>
    6ec8:	7d 87       	std	Y+13, r23	; 0x0d
    6eca:	6c 87       	std	Y+12, r22	; 0x0c
    6ecc:	02 eb       	ldi	r16, 0xB2	; 178
    6ece:	17 e0       	ldi	r17, 0x07	; 7
    6ed0:	c8 01       	movw	r24, r16
    6ed2:	31 df       	rcall	.-414    	; 0x6d36 <IS_Leap>
    6ed4:	00 97       	sbiw	r24, 0x00	; 0
    6ed6:	19 f4       	brne	.+6      	; 0x6ede <time_to_tm+0x11c>
    6ed8:	4d e6       	ldi	r20, 0x6D	; 109
    6eda:	51 e0       	ldi	r21, 0x01	; 1
    6edc:	02 c0       	rjmp	.+4      	; 0x6ee2 <time_to_tm+0x120>
    6ede:	4e e6       	ldi	r20, 0x6E	; 110
    6ee0:	51 e0       	ldi	r21, 0x01	; 1
    6ee2:	05 2e       	mov	r0, r21
    6ee4:	00 0c       	add	r0, r0
    6ee6:	66 0b       	sbc	r22, r22
    6ee8:	77 0b       	sbc	r23, r23
    6eea:	84 16       	cp	r8, r20
    6eec:	95 06       	cpc	r9, r21
    6eee:	a6 06       	cpc	r10, r22
    6ef0:	b7 06       	cpc	r11, r23
    6ef2:	3c f0       	brlt	.+14     	; 0x6f02 <time_to_tm+0x140>
    6ef4:	0f 5f       	subi	r16, 0xFF	; 255
    6ef6:	1f 4f       	sbci	r17, 0xFF	; 255
    6ef8:	84 1a       	sub	r8, r20
    6efa:	95 0a       	sbc	r9, r21
    6efc:	a6 0a       	sbc	r10, r22
    6efe:	b7 0a       	sbc	r11, r23
    6f00:	e7 cf       	rjmp	.-50     	; 0x6ed0 <time_to_tm+0x10e>
    6f02:	0c 56       	subi	r16, 0x6C	; 108
    6f04:	17 40       	sbci	r17, 0x07	; 7
    6f06:	1b 87       	std	Y+11, r17	; 0x0b
    6f08:	0a 87       	std	Y+10, r16	; 0x0a
    6f0a:	9f 86       	std	Y+15, r9	; 0x0f
    6f0c:	8e 86       	std	Y+14, r8	; 0x0e
    6f0e:	e8 e8       	ldi	r30, 0x88	; 136
    6f10:	f3 e0       	ldi	r31, 0x03	; 3
    6f12:	20 e0       	ldi	r18, 0x00	; 0
    6f14:	30 e0       	ldi	r19, 0x00	; 0
    6f16:	18 14       	cp	r1, r8
    6f18:	19 04       	cpc	r1, r9
    6f1a:	1a 04       	cpc	r1, r10
    6f1c:	1b 04       	cpc	r1, r11
    6f1e:	e4 f4       	brge	.+56     	; 0x6f58 <time_to_tm+0x196>
    6f20:	2c 30       	cpi	r18, 0x0C	; 12
    6f22:	31 05       	cpc	r19, r1
    6f24:	c9 f0       	breq	.+50     	; 0x6f58 <time_to_tm+0x196>
    6f26:	41 91       	ld	r20, Z+
    6f28:	51 91       	ld	r21, Z+
    6f2a:	21 30       	cpi	r18, 0x01	; 1
    6f2c:	31 05       	cpc	r19, r1
    6f2e:	21 f4       	brne	.+8      	; 0x6f38 <time_to_tm+0x176>
    6f30:	00 97       	sbiw	r24, 0x00	; 0
    6f32:	11 f0       	breq	.+4      	; 0x6f38 <time_to_tm+0x176>
    6f34:	4f 5f       	subi	r20, 0xFF	; 255
    6f36:	5f 4f       	sbci	r21, 0xFF	; 255
    6f38:	05 2e       	mov	r0, r21
    6f3a:	00 0c       	add	r0, r0
    6f3c:	66 0b       	sbc	r22, r22
    6f3e:	77 0b       	sbc	r23, r23
    6f40:	84 16       	cp	r8, r20
    6f42:	95 06       	cpc	r9, r21
    6f44:	a6 06       	cpc	r10, r22
    6f46:	b7 06       	cpc	r11, r23
    6f48:	3c f0       	brlt	.+14     	; 0x6f58 <time_to_tm+0x196>
    6f4a:	84 1a       	sub	r8, r20
    6f4c:	95 0a       	sbc	r9, r21
    6f4e:	a6 0a       	sbc	r10, r22
    6f50:	b7 0a       	sbc	r11, r23
    6f52:	2f 5f       	subi	r18, 0xFF	; 255
    6f54:	3f 4f       	sbci	r19, 0xFF	; 255
    6f56:	df cf       	rjmp	.-66     	; 0x6f16 <time_to_tm+0x154>
    6f58:	39 87       	std	Y+9, r19	; 0x09
    6f5a:	28 87       	std	Y+8, r18	; 0x08
    6f5c:	af ef       	ldi	r26, 0xFF	; 255
    6f5e:	8a 1a       	sub	r8, r26
    6f60:	9a 0a       	sbc	r9, r26
    6f62:	9f 82       	std	Y+7, r9	; 0x07
    6f64:	8e 82       	std	Y+6, r8	; 0x06
    6f66:	b6 01       	movw	r22, r12
    6f68:	c7 01       	movw	r24, r14
    6f6a:	04 c0       	rjmp	.+8      	; 0x6f74 <time_to_tm+0x1b2>
    6f6c:	6f ef       	ldi	r22, 0xFF	; 255
    6f6e:	7f ef       	ldi	r23, 0xFF	; 255
    6f70:	8f ef       	ldi	r24, 0xFF	; 255
    6f72:	9f ef       	ldi	r25, 0xFF	; 255
    6f74:	cd b7       	in	r28, 0x3d	; 61
    6f76:	de b7       	in	r29, 0x3e	; 62
    6f78:	e0 e1       	ldi	r30, 0x10	; 16
    6f7a:	0c 94 2b e7 	jmp	0x1ce56	; 0x1ce56 <__epilogue_restores__+0x4>

00006f7e <gmtime_r>:
    6f7e:	0f 93       	push	r16
    6f80:	1f 93       	push	r17
    6f82:	cf 93       	push	r28
    6f84:	df 93       	push	r29
    6f86:	eb 01       	movw	r28, r22
    6f88:	fc 01       	movw	r30, r24
    6f8a:	60 81       	ld	r22, Z
    6f8c:	71 81       	ldd	r23, Z+1	; 0x01
    6f8e:	82 81       	ldd	r24, Z+2	; 0x02
    6f90:	93 81       	ldd	r25, Z+3	; 0x03
    6f92:	8e 01       	movw	r16, r28
    6f94:	20 e0       	ldi	r18, 0x00	; 0
    6f96:	30 e0       	ldi	r19, 0x00	; 0
    6f98:	a9 01       	movw	r20, r18
    6f9a:	13 df       	rcall	.-474    	; 0x6dc2 <time_to_tm>
    6f9c:	ce 01       	movw	r24, r28
    6f9e:	df 91       	pop	r29
    6fa0:	cf 91       	pop	r28
    6fa2:	1f 91       	pop	r17
    6fa4:	0f 91       	pop	r16
    6fa6:	08 95       	ret

00006fa8 <gmtime>:
    6fa8:	26 ec       	ldi	r18, 0xC6	; 198
    6faa:	37 e1       	ldi	r19, 0x17	; 23
    6fac:	30 93 dd 17 	sts	0x17DD, r19	; 0x8017dd <p.3677+0x1>
    6fb0:	20 93 dc 17 	sts	0x17DC, r18	; 0x8017dc <p.3677>
    6fb4:	b9 01       	movw	r22, r18
    6fb6:	e3 df       	rcall	.-58     	; 0x6f7e <gmtime_r>
    6fb8:	86 ec       	ldi	r24, 0xC6	; 198
    6fba:	97 e1       	ldi	r25, 0x17	; 23
    6fbc:	08 95       	ret

00006fbe <gettimezone>:
    6fbe:	e0 e7       	ldi	r30, 0x70	; 112
    6fc0:	fa e1       	ldi	r31, 0x1A	; 26
    6fc2:	20 81       	ld	r18, Z
    6fc4:	31 81       	ldd	r19, Z+1	; 0x01
    6fc6:	dc 01       	movw	r26, r24
    6fc8:	2d 93       	st	X+, r18
    6fca:	3c 93       	st	X, r19
    6fcc:	22 81       	ldd	r18, Z+2	; 0x02
    6fce:	33 81       	ldd	r19, Z+3	; 0x03
    6fd0:	fc 01       	movw	r30, r24
    6fd2:	33 83       	std	Z+3, r19	; 0x03
    6fd4:	22 83       	std	Z+2, r18	; 0x02
    6fd6:	80 e0       	ldi	r24, 0x00	; 0
    6fd8:	90 e0       	ldi	r25, 0x00	; 0
    6fda:	08 95       	ret

00006fdc <settimezone>:
    6fdc:	cf 93       	push	r28
    6fde:	df 93       	push	r29
    6fe0:	ec 01       	movw	r28, r24
    6fe2:	28 81       	ld	r18, Y
    6fe4:	39 81       	ldd	r19, Y+1	; 0x01
    6fe6:	e0 e7       	ldi	r30, 0x70	; 112
    6fe8:	fa e1       	ldi	r31, 0x1A	; 26
    6fea:	31 83       	std	Z+1, r19	; 0x01
    6fec:	20 83       	st	Z, r18
    6fee:	8a 81       	ldd	r24, Y+2	; 0x02
    6ff0:	9b 81       	ldd	r25, Y+3	; 0x03
    6ff2:	93 83       	std	Z+3, r25	; 0x03
    6ff4:	82 83       	std	Z+2, r24	; 0x02
    6ff6:	80 e0       	ldi	r24, 0x00	; 0
    6ff8:	90 e0       	ldi	r25, 0x00	; 0
    6ffa:	df 91       	pop	r29
    6ffc:	cf 91       	pop	r28
    6ffe:	08 95       	ret

00007000 <gettimeofday>:
    7000:	a8 e0       	ldi	r26, 0x08	; 8
    7002:	b0 e0       	ldi	r27, 0x00	; 0
    7004:	e6 e0       	ldi	r30, 0x06	; 6
    7006:	f8 e3       	ldi	r31, 0x38	; 56
    7008:	0c 94 19 e7 	jmp	0x1ce32	; 0x1ce32 <__prologue_saves__+0x18>
    700c:	8c 01       	movw	r16, r24
    700e:	7b 01       	movw	r14, r22
    7010:	be 01       	movw	r22, r28
    7012:	6f 5f       	subi	r22, 0xFF	; 255
    7014:	7f 4f       	sbci	r23, 0xFF	; 255
    7016:	80 e0       	ldi	r24, 0x00	; 0
    7018:	90 e0       	ldi	r25, 0x00	; 0
    701a:	dc db       	rcall	.-2120   	; 0x67d4 <clock_gettime>
    701c:	89 81       	ldd	r24, Y+1	; 0x01
    701e:	9a 81       	ldd	r25, Y+2	; 0x02
    7020:	ab 81       	ldd	r26, Y+3	; 0x03
    7022:	bc 81       	ldd	r27, Y+4	; 0x04
    7024:	f8 01       	movw	r30, r16
    7026:	80 83       	st	Z, r24
    7028:	91 83       	std	Z+1, r25	; 0x01
    702a:	a2 83       	std	Z+2, r26	; 0x02
    702c:	b3 83       	std	Z+3, r27	; 0x03
    702e:	6d 81       	ldd	r22, Y+5	; 0x05
    7030:	7e 81       	ldd	r23, Y+6	; 0x06
    7032:	8f 81       	ldd	r24, Y+7	; 0x07
    7034:	98 85       	ldd	r25, Y+8	; 0x08
    7036:	28 ee       	ldi	r18, 0xE8	; 232
    7038:	33 e0       	ldi	r19, 0x03	; 3
    703a:	40 e0       	ldi	r20, 0x00	; 0
    703c:	50 e0       	ldi	r21, 0x00	; 0
    703e:	0e 94 c2 e6 	call	0x1cd84	; 0x1cd84 <__divmodsi4>
    7042:	f8 01       	movw	r30, r16
    7044:	24 83       	std	Z+4, r18	; 0x04
    7046:	35 83       	std	Z+5, r19	; 0x05
    7048:	46 83       	std	Z+6, r20	; 0x06
    704a:	57 83       	std	Z+7, r21	; 0x07
    704c:	c7 01       	movw	r24, r14
    704e:	b7 df       	rcall	.-146    	; 0x6fbe <gettimezone>
    7050:	80 e0       	ldi	r24, 0x00	; 0
    7052:	90 e0       	ldi	r25, 0x00	; 0
    7054:	28 96       	adiw	r28, 0x08	; 8
    7056:	e6 e0       	ldi	r30, 0x06	; 6
    7058:	0c 94 35 e7 	jmp	0x1ce6a	; 0x1ce6a <__epilogue_restores__+0x18>

0000705c <time>:
    705c:	cf 93       	push	r28
    705e:	df 93       	push	r29
    7060:	ec 01       	movw	r28, r24
    7062:	68 ea       	ldi	r22, 0xA8	; 168
    7064:	77 e1       	ldi	r23, 0x17	; 23
    7066:	80 e0       	ldi	r24, 0x00	; 0
    7068:	90 e0       	ldi	r25, 0x00	; 0
    706a:	b4 db       	rcall	.-2200   	; 0x67d4 <clock_gettime>
    706c:	20 97       	sbiw	r28, 0x00	; 0
    706e:	61 f0       	breq	.+24     	; 0x7088 <time+0x2c>
    7070:	80 91 a8 17 	lds	r24, 0x17A8	; 0x8017a8 <ts.3755>
    7074:	90 91 a9 17 	lds	r25, 0x17A9	; 0x8017a9 <ts.3755+0x1>
    7078:	a0 91 aa 17 	lds	r26, 0x17AA	; 0x8017aa <ts.3755+0x2>
    707c:	b0 91 ab 17 	lds	r27, 0x17AB	; 0x8017ab <ts.3755+0x3>
    7080:	88 83       	st	Y, r24
    7082:	99 83       	std	Y+1, r25	; 0x01
    7084:	aa 83       	std	Y+2, r26	; 0x02
    7086:	bb 83       	std	Y+3, r27	; 0x03
    7088:	60 91 a8 17 	lds	r22, 0x17A8	; 0x8017a8 <ts.3755>
    708c:	70 91 a9 17 	lds	r23, 0x17A9	; 0x8017a9 <ts.3755+0x1>
    7090:	80 91 aa 17 	lds	r24, 0x17AA	; 0x8017aa <ts.3755+0x2>
    7094:	90 91 ab 17 	lds	r25, 0x17AB	; 0x8017ab <ts.3755+0x3>
    7098:	df 91       	pop	r29
    709a:	cf 91       	pop	r28
    709c:	08 95       	ret

0000709e <is_dst>:
    709e:	cf 92       	push	r12
    70a0:	df 92       	push	r13
    70a2:	ef 92       	push	r14
    70a4:	ff 92       	push	r15
    70a6:	6b 01       	movw	r12, r22
    70a8:	7c 01       	movw	r14, r24
    70aa:	05 d4       	rcall	.+2058   	; 0x78b6 <set_dst>
    70ac:	80 91 74 1a 	lds	r24, 0x1A74	; 0x801a74 <dst>
    70b0:	90 91 75 1a 	lds	r25, 0x1A75	; 0x801a75 <dst+0x1>
    70b4:	a0 91 76 1a 	lds	r26, 0x1A76	; 0x801a76 <dst+0x2>
    70b8:	b0 91 77 1a 	lds	r27, 0x1A77	; 0x801a77 <dst+0x3>
    70bc:	c8 16       	cp	r12, r24
    70be:	d9 06       	cpc	r13, r25
    70c0:	ea 06       	cpc	r14, r26
    70c2:	fb 06       	cpc	r15, r27
    70c4:	88 f0       	brcs	.+34     	; 0x70e8 <is_dst+0x4a>
    70c6:	81 e0       	ldi	r24, 0x01	; 1
    70c8:	90 e0       	ldi	r25, 0x00	; 0
    70ca:	40 91 78 1a 	lds	r20, 0x1A78	; 0x801a78 <dst+0x4>
    70ce:	50 91 79 1a 	lds	r21, 0x1A79	; 0x801a79 <dst+0x5>
    70d2:	60 91 7a 1a 	lds	r22, 0x1A7A	; 0x801a7a <dst+0x6>
    70d6:	70 91 7b 1a 	lds	r23, 0x1A7B	; 0x801a7b <dst+0x7>
    70da:	4c 15       	cp	r20, r12
    70dc:	5d 05       	cpc	r21, r13
    70de:	6e 05       	cpc	r22, r14
    70e0:	7f 05       	cpc	r23, r15
    70e2:	20 f4       	brcc	.+8      	; 0x70ec <is_dst+0x4e>
    70e4:	80 e0       	ldi	r24, 0x00	; 0
    70e6:	02 c0       	rjmp	.+4      	; 0x70ec <is_dst+0x4e>
    70e8:	80 e0       	ldi	r24, 0x00	; 0
    70ea:	90 e0       	ldi	r25, 0x00	; 0
    70ec:	ff 90       	pop	r15
    70ee:	ef 90       	pop	r14
    70f0:	df 90       	pop	r13
    70f2:	cf 90       	pop	r12
    70f4:	08 95       	ret

000070f6 <localtime_r>:
    70f6:	4f 92       	push	r4
    70f8:	5f 92       	push	r5
    70fa:	6f 92       	push	r6
    70fc:	7f 92       	push	r7
    70fe:	af 92       	push	r10
    7100:	bf 92       	push	r11
    7102:	cf 92       	push	r12
    7104:	df 92       	push	r13
    7106:	ef 92       	push	r14
    7108:	ff 92       	push	r15
    710a:	0f 93       	push	r16
    710c:	1f 93       	push	r17
    710e:	cf 93       	push	r28
    7110:	df 93       	push	r29
    7112:	00 d0       	rcall	.+0      	; 0x7114 <localtime_r+0x1e>
    7114:	00 d0       	rcall	.+0      	; 0x7116 <localtime_r+0x20>
    7116:	cd b7       	in	r28, 0x3d	; 61
    7118:	de b7       	in	r29, 0x3e	; 62
    711a:	5b 01       	movw	r10, r22
    711c:	fc 01       	movw	r30, r24
    711e:	40 80       	ld	r4, Z
    7120:	51 80       	ldd	r5, Z+1	; 0x01
    7122:	62 80       	ldd	r6, Z+2	; 0x02
    7124:	73 80       	ldd	r7, Z+3	; 0x03
    7126:	ce 01       	movw	r24, r28
    7128:	01 96       	adiw	r24, 0x01	; 1
    712a:	49 df       	rcall	.-366    	; 0x6fbe <gettimezone>
    712c:	a9 81       	ldd	r26, Y+1	; 0x01
    712e:	ba 81       	ldd	r27, Y+2	; 0x02
    7130:	2c e3       	ldi	r18, 0x3C	; 60
    7132:	30 e0       	ldi	r19, 0x00	; 0
    7134:	0e 94 e7 e6 	call	0x1cdce	; 0x1cdce <__usmulhisi3>
    7138:	6b 01       	movw	r12, r22
    713a:	7c 01       	movw	r14, r24
    713c:	c3 01       	movw	r24, r6
    713e:	b2 01       	movw	r22, r4
    7140:	6c 19       	sub	r22, r12
    7142:	7d 09       	sbc	r23, r13
    7144:	8e 09       	sbc	r24, r14
    7146:	9f 09       	sbc	r25, r15
    7148:	aa df       	rcall	.-172    	; 0x709e <is_dst>
    714a:	89 2b       	or	r24, r25
    714c:	31 f0       	breq	.+12     	; 0x715a <localtime_r+0x64>
    714e:	f0 e1       	ldi	r31, 0x10	; 16
    7150:	cf 1a       	sub	r12, r31
    7152:	fe e0       	ldi	r31, 0x0E	; 14
    7154:	df 0a       	sbc	r13, r31
    7156:	e1 08       	sbc	r14, r1
    7158:	f1 08       	sbc	r15, r1
    715a:	85 01       	movw	r16, r10
    715c:	a7 01       	movw	r20, r14
    715e:	96 01       	movw	r18, r12
    7160:	c3 01       	movw	r24, r6
    7162:	b2 01       	movw	r22, r4
    7164:	2e de       	rcall	.-932    	; 0x6dc2 <time_to_tm>
    7166:	c5 01       	movw	r24, r10
    7168:	0f 90       	pop	r0
    716a:	0f 90       	pop	r0
    716c:	0f 90       	pop	r0
    716e:	0f 90       	pop	r0
    7170:	df 91       	pop	r29
    7172:	cf 91       	pop	r28
    7174:	1f 91       	pop	r17
    7176:	0f 91       	pop	r16
    7178:	ff 90       	pop	r15
    717a:	ef 90       	pop	r14
    717c:	df 90       	pop	r13
    717e:	cf 90       	pop	r12
    7180:	bf 90       	pop	r11
    7182:	af 90       	pop	r10
    7184:	7f 90       	pop	r7
    7186:	6f 90       	pop	r6
    7188:	5f 90       	pop	r5
    718a:	4f 90       	pop	r4
    718c:	08 95       	ret

0000718e <localtime>:
    718e:	60 eb       	ldi	r22, 0xB0	; 176
    7190:	77 e1       	ldi	r23, 0x17	; 23
    7192:	b1 cf       	rjmp	.-158    	; 0x70f6 <localtime_r>
    7194:	08 95       	ret

00007196 <normalize>:
    7196:	aa e0       	ldi	r26, 0x0A	; 10
    7198:	b0 e0       	ldi	r27, 0x00	; 0
    719a:	e1 ed       	ldi	r30, 0xD1	; 209
    719c:	f8 e3       	ldi	r31, 0x38	; 56
    719e:	0c 94 0d e7 	jmp	0x1ce1a	; 0x1ce1a <__prologue_saves__>
    71a2:	7c 01       	movw	r14, r24
    71a4:	7a 87       	std	Y+10, r23	; 0x0a
    71a6:	69 87       	std	Y+9, r22	; 0x09
    71a8:	f7 01       	movw	r30, r14
    71aa:	80 81       	ld	r24, Z
    71ac:	91 81       	ldd	r25, Z+1	; 0x01
    71ae:	8c 33       	cpi	r24, 0x3C	; 60
    71b0:	91 05       	cpc	r25, r1
    71b2:	5c f0       	brlt	.+22     	; 0x71ca <normalize+0x34>
    71b4:	f7 01       	movw	r30, r14
    71b6:	22 81       	ldd	r18, Z+2	; 0x02
    71b8:	33 81       	ldd	r19, Z+3	; 0x03
    71ba:	2f 5f       	subi	r18, 0xFF	; 255
    71bc:	3f 4f       	sbci	r19, 0xFF	; 255
    71be:	33 83       	std	Z+3, r19	; 0x03
    71c0:	22 83       	std	Z+2, r18	; 0x02
    71c2:	cc 97       	sbiw	r24, 0x3c	; 60
    71c4:	91 83       	std	Z+1, r25	; 0x01
    71c6:	80 83       	st	Z, r24
    71c8:	ef cf       	rjmp	.-34     	; 0x71a8 <normalize+0x12>
    71ca:	f7 01       	movw	r30, r14
    71cc:	01 90       	ld	r0, Z+
    71ce:	f0 81       	ld	r31, Z
    71d0:	e0 2d       	mov	r30, r0
    71d2:	fe 83       	std	Y+6, r31	; 0x06
    71d4:	ed 83       	std	Y+5, r30	; 0x05
    71d6:	f7 ff       	sbrs	r31, 7
    71d8:	0d c0       	rjmp	.+26     	; 0x71f4 <normalize+0x5e>
    71da:	f7 01       	movw	r30, r14
    71dc:	82 81       	ldd	r24, Z+2	; 0x02
    71de:	93 81       	ldd	r25, Z+3	; 0x03
    71e0:	01 97       	sbiw	r24, 0x01	; 1
    71e2:	93 83       	std	Z+3, r25	; 0x03
    71e4:	82 83       	std	Z+2, r24	; 0x02
    71e6:	6d 81       	ldd	r22, Y+5	; 0x05
    71e8:	7e 81       	ldd	r23, Y+6	; 0x06
    71ea:	64 5c       	subi	r22, 0xC4	; 196
    71ec:	7f 4f       	sbci	r23, 0xFF	; 255
    71ee:	71 83       	std	Z+1, r23	; 0x01
    71f0:	60 83       	st	Z, r22
    71f2:	eb cf       	rjmp	.-42     	; 0x71ca <normalize+0x34>
    71f4:	f7 01       	movw	r30, r14
    71f6:	82 81       	ldd	r24, Z+2	; 0x02
    71f8:	93 81       	ldd	r25, Z+3	; 0x03
    71fa:	8c 33       	cpi	r24, 0x3C	; 60
    71fc:	91 05       	cpc	r25, r1
    71fe:	5c f0       	brlt	.+22     	; 0x7216 <normalize+0x80>
    7200:	f7 01       	movw	r30, r14
    7202:	24 81       	ldd	r18, Z+4	; 0x04
    7204:	35 81       	ldd	r19, Z+5	; 0x05
    7206:	2f 5f       	subi	r18, 0xFF	; 255
    7208:	3f 4f       	sbci	r19, 0xFF	; 255
    720a:	35 83       	std	Z+5, r19	; 0x05
    720c:	24 83       	std	Z+4, r18	; 0x04
    720e:	cc 97       	sbiw	r24, 0x3c	; 60
    7210:	93 83       	std	Z+3, r25	; 0x03
    7212:	82 83       	std	Z+2, r24	; 0x02
    7214:	ef cf       	rjmp	.-34     	; 0x71f4 <normalize+0x5e>
    7216:	f7 01       	movw	r30, r14
    7218:	22 80       	ldd	r2, Z+2	; 0x02
    721a:	33 80       	ldd	r3, Z+3	; 0x03
    721c:	37 fe       	sbrs	r3, 7
    721e:	0d c0       	rjmp	.+26     	; 0x723a <normalize+0xa4>
    7220:	f7 01       	movw	r30, r14
    7222:	84 81       	ldd	r24, Z+4	; 0x04
    7224:	95 81       	ldd	r25, Z+5	; 0x05
    7226:	01 97       	sbiw	r24, 0x01	; 1
    7228:	95 83       	std	Z+5, r25	; 0x05
    722a:	84 83       	std	Z+4, r24	; 0x04
    722c:	fc e3       	ldi	r31, 0x3C	; 60
    722e:	2f 0e       	add	r2, r31
    7230:	31 1c       	adc	r3, r1
    7232:	f7 01       	movw	r30, r14
    7234:	33 82       	std	Z+3, r3	; 0x03
    7236:	22 82       	std	Z+2, r2	; 0x02
    7238:	ee cf       	rjmp	.-36     	; 0x7216 <normalize+0x80>
    723a:	f7 01       	movw	r30, r14
    723c:	84 81       	ldd	r24, Z+4	; 0x04
    723e:	95 81       	ldd	r25, Z+5	; 0x05
    7240:	88 31       	cpi	r24, 0x18	; 24
    7242:	91 05       	cpc	r25, r1
    7244:	5c f0       	brlt	.+22     	; 0x725c <normalize+0xc6>
    7246:	f7 01       	movw	r30, r14
    7248:	26 81       	ldd	r18, Z+6	; 0x06
    724a:	37 81       	ldd	r19, Z+7	; 0x07
    724c:	2f 5f       	subi	r18, 0xFF	; 255
    724e:	3f 4f       	sbci	r19, 0xFF	; 255
    7250:	37 83       	std	Z+7, r19	; 0x07
    7252:	26 83       	std	Z+6, r18	; 0x06
    7254:	48 97       	sbiw	r24, 0x18	; 24
    7256:	95 83       	std	Z+5, r25	; 0x05
    7258:	84 83       	std	Z+4, r24	; 0x04
    725a:	ef cf       	rjmp	.-34     	; 0x723a <normalize+0xa4>
    725c:	f7 01       	movw	r30, r14
    725e:	04 81       	ldd	r16, Z+4	; 0x04
    7260:	15 81       	ldd	r17, Z+5	; 0x05
    7262:	17 ff       	sbrs	r17, 7
    7264:	0b c0       	rjmp	.+22     	; 0x727c <normalize+0xe6>
    7266:	f7 01       	movw	r30, r14
    7268:	86 81       	ldd	r24, Z+6	; 0x06
    726a:	97 81       	ldd	r25, Z+7	; 0x07
    726c:	01 97       	sbiw	r24, 0x01	; 1
    726e:	97 83       	std	Z+7, r25	; 0x07
    7270:	86 83       	std	Z+6, r24	; 0x06
    7272:	08 5e       	subi	r16, 0xE8	; 232
    7274:	1f 4f       	sbci	r17, 0xFF	; 255
    7276:	15 83       	std	Z+5, r17	; 0x05
    7278:	04 83       	std	Z+4, r16	; 0x04
    727a:	f0 cf       	rjmp	.-32     	; 0x725c <normalize+0xc6>
    727c:	f7 01       	movw	r30, r14
    727e:	80 85       	ldd	r24, Z+8	; 0x08
    7280:	91 85       	ldd	r25, Z+9	; 0x09
    7282:	8c 30       	cpi	r24, 0x0C	; 12
    7284:	91 05       	cpc	r25, r1
    7286:	5c f0       	brlt	.+22     	; 0x729e <normalize+0x108>
    7288:	f7 01       	movw	r30, r14
    728a:	22 85       	ldd	r18, Z+10	; 0x0a
    728c:	33 85       	ldd	r19, Z+11	; 0x0b
    728e:	2f 5f       	subi	r18, 0xFF	; 255
    7290:	3f 4f       	sbci	r19, 0xFF	; 255
    7292:	33 87       	std	Z+11, r19	; 0x0b
    7294:	22 87       	std	Z+10, r18	; 0x0a
    7296:	0c 97       	sbiw	r24, 0x0c	; 12
    7298:	91 87       	std	Z+9, r25	; 0x09
    729a:	80 87       	std	Z+8, r24	; 0x08
    729c:	ef cf       	rjmp	.-34     	; 0x727c <normalize+0xe6>
    729e:	f7 01       	movw	r30, r14
    72a0:	80 85       	ldd	r24, Z+8	; 0x08
    72a2:	91 85       	ldd	r25, Z+9	; 0x09
    72a4:	97 ff       	sbrs	r25, 7
    72a6:	2d c0       	rjmp	.+90     	; 0x7302 <normalize+0x16c>
    72a8:	f7 01       	movw	r30, r14
    72aa:	22 85       	ldd	r18, Z+10	; 0x0a
    72ac:	33 85       	ldd	r19, Z+11	; 0x0b
    72ae:	21 50       	subi	r18, 0x01	; 1
    72b0:	31 09       	sbc	r19, r1
    72b2:	33 87       	std	Z+11, r19	; 0x0b
    72b4:	22 87       	std	Z+10, r18	; 0x0a
    72b6:	0c 96       	adiw	r24, 0x0c	; 12
    72b8:	91 87       	std	Z+9, r25	; 0x09
    72ba:	80 87       	std	Z+8, r24	; 0x08
    72bc:	f0 cf       	rjmp	.-32     	; 0x729e <normalize+0x108>
    72be:	f7 01       	movw	r30, r14
    72c0:	c6 80       	ldd	r12, Z+6	; 0x06
    72c2:	d7 80       	ldd	r13, Z+7	; 0x07
    72c4:	a0 84       	ldd	r10, Z+8	; 0x08
    72c6:	b1 84       	ldd	r11, Z+9	; 0x09
    72c8:	b4 01       	movw	r22, r8
    72ca:	c5 01       	movw	r24, r10
    72cc:	59 dd       	rcall	.-1358   	; 0x6d80 <Days_Per_Month>
    72ce:	8c 15       	cp	r24, r12
    72d0:	9d 05       	cpc	r25, r13
    72d2:	84 f5       	brge	.+96     	; 0x7334 <normalize+0x19e>
    72d4:	c8 1a       	sub	r12, r24
    72d6:	d9 0a       	sbc	r13, r25
    72d8:	f7 01       	movw	r30, r14
    72da:	d7 82       	std	Z+7, r13	; 0x07
    72dc:	c6 82       	std	Z+6, r12	; 0x06
    72de:	c5 01       	movw	r24, r10
    72e0:	01 96       	adiw	r24, 0x01	; 1
    72e2:	91 87       	std	Z+9, r25	; 0x09
    72e4:	80 87       	std	Z+8, r24	; 0x08
    72e6:	0c 97       	sbiw	r24, 0x0c	; 12
    72e8:	54 f3       	brlt	.-44     	; 0x72be <normalize+0x128>
    72ea:	fb e0       	ldi	r31, 0x0B	; 11
    72ec:	af 1a       	sub	r10, r31
    72ee:	b1 08       	sbc	r11, r1
    72f0:	f7 01       	movw	r30, r14
    72f2:	b1 86       	std	Z+9, r11	; 0x09
    72f4:	a0 86       	std	Z+8, r10	; 0x08
    72f6:	ff ef       	ldi	r31, 0xFF	; 255
    72f8:	8f 1a       	sub	r8, r31
    72fa:	9f 0a       	sbc	r9, r31
    72fc:	f7 01       	movw	r30, r14
    72fe:	93 86       	std	Z+11, r9	; 0x0b
    7300:	82 86       	std	Z+10, r8	; 0x0a
    7302:	f7 01       	movw	r30, r14
    7304:	82 84       	ldd	r8, Z+10	; 0x0a
    7306:	93 84       	ldd	r9, Z+11	; 0x0b
    7308:	da cf       	rjmp	.-76     	; 0x72be <normalize+0x128>
    730a:	f7 01       	movw	r30, r14
    730c:	80 85       	ldd	r24, Z+8	; 0x08
    730e:	91 85       	ldd	r25, Z+9	; 0x09
    7310:	9c 01       	movw	r18, r24
    7312:	21 50       	subi	r18, 0x01	; 1
    7314:	31 09       	sbc	r19, r1
    7316:	37 fd       	sbrc	r19, 7
    7318:	16 c0       	rjmp	.+44     	; 0x7346 <normalize+0x1b0>
    731a:	31 87       	std	Z+9, r19	; 0x09
    731c:	20 87       	std	Z+8, r18	; 0x08
    731e:	f7 01       	movw	r30, r14
    7320:	62 85       	ldd	r22, Z+10	; 0x0a
    7322:	73 85       	ldd	r23, Z+11	; 0x0b
    7324:	80 85       	ldd	r24, Z+8	; 0x08
    7326:	91 85       	ldd	r25, Z+9	; 0x09
    7328:	2b dd       	rcall	.-1450   	; 0x6d80 <Days_Per_Month>
    732a:	88 0d       	add	r24, r8
    732c:	99 1d       	adc	r25, r9
    732e:	f7 01       	movw	r30, r14
    7330:	97 83       	std	Z+7, r25	; 0x07
    7332:	86 83       	std	Z+6, r24	; 0x06
    7334:	f7 01       	movw	r30, r14
    7336:	86 80       	ldd	r8, Z+6	; 0x06
    7338:	97 80       	ldd	r9, Z+7	; 0x07
    733a:	a2 84       	ldd	r10, Z+10	; 0x0a
    733c:	b3 84       	ldd	r11, Z+11	; 0x0b
    733e:	18 14       	cp	r1, r8
    7340:	19 04       	cpc	r1, r9
    7342:	1c f7       	brge	.-58     	; 0x730a <normalize+0x174>
    7344:	0b c0       	rjmp	.+22     	; 0x735c <normalize+0x1c6>
    7346:	0b 96       	adiw	r24, 0x0b	; 11
    7348:	f7 01       	movw	r30, r14
    734a:	91 87       	std	Z+9, r25	; 0x09
    734c:	80 87       	std	Z+8, r24	; 0x08
    734e:	f1 e0       	ldi	r31, 0x01	; 1
    7350:	af 1a       	sub	r10, r31
    7352:	b1 08       	sbc	r11, r1
    7354:	f7 01       	movw	r30, r14
    7356:	b3 86       	std	Z+11, r11	; 0x0b
    7358:	a2 86       	std	Z+10, r10	; 0x0a
    735a:	e1 cf       	rjmp	.-62     	; 0x731e <normalize+0x188>
    735c:	a5 01       	movw	r20, r10
    735e:	44 59       	subi	r20, 0x94	; 148
    7360:	58 4f       	sbci	r21, 0xF8	; 248
    7362:	58 87       	std	Y+8, r21	; 0x08
    7364:	4f 83       	std	Y+7, r20	; 0x07
    7366:	35 01       	movw	r6, r10
    7368:	56 e4       	ldi	r21, 0x46	; 70
    736a:	65 1a       	sub	r6, r21
    736c:	71 08       	sbc	r7, r1
    736e:	89 e8       	ldi	r24, 0x89	; 137
    7370:	68 16       	cp	r6, r24
    7372:	71 04       	cpc	r7, r1
    7374:	08 f0       	brcs	.+2      	; 0x7378 <normalize+0x1e2>
    7376:	9b c0       	rjmp	.+310    	; 0x74ae <normalize+0x318>
    7378:	c0 84       	ldd	r12, Z+8	; 0x08
    737a:	d1 84       	ldd	r13, Z+9	; 0x09
    737c:	9c e0       	ldi	r25, 0x0C	; 12
    737e:	c9 16       	cp	r12, r25
    7380:	d1 04       	cpc	r13, r1
    7382:	08 f0       	brcs	.+2      	; 0x7386 <normalize+0x1f0>
    7384:	94 c0       	rjmp	.+296    	; 0x74ae <normalize+0x318>
    7386:	24 01       	movw	r4, r8
    7388:	e1 e0       	ldi	r30, 0x01	; 1
    738a:	4e 1a       	sub	r4, r30
    738c:	51 08       	sbc	r5, r1
    738e:	6f 81       	ldd	r22, Y+7	; 0x07
    7390:	78 85       	ldd	r23, Y+8	; 0x08
    7392:	c6 01       	movw	r24, r12
    7394:	f5 dc       	rcall	.-1558   	; 0x6d80 <Days_Per_Month>
    7396:	48 16       	cp	r4, r24
    7398:	59 06       	cpc	r5, r25
    739a:	0c f0       	brlt	.+2      	; 0x739e <normalize+0x208>
    739c:	88 c0       	rjmp	.+272    	; 0x74ae <normalize+0x318>
    739e:	08 31       	cpi	r16, 0x18	; 24
    73a0:	11 05       	cpc	r17, r1
    73a2:	0c f0       	brlt	.+2      	; 0x73a6 <normalize+0x210>
    73a4:	84 c0       	rjmp	.+264    	; 0x74ae <normalize+0x318>
    73a6:	fc e3       	ldi	r31, 0x3C	; 60
    73a8:	2f 16       	cp	r2, r31
    73aa:	31 04       	cpc	r3, r1
    73ac:	0c f0       	brlt	.+2      	; 0x73b0 <normalize+0x21a>
    73ae:	7f c0       	rjmp	.+254    	; 0x74ae <normalize+0x318>
    73b0:	4d 81       	ldd	r20, Y+5	; 0x05
    73b2:	5e 81       	ldd	r21, Y+6	; 0x06
    73b4:	4c 33       	cpi	r20, 0x3C	; 60
    73b6:	51 05       	cpc	r21, r1
    73b8:	0c f0       	brlt	.+2      	; 0x73bc <normalize+0x226>
    73ba:	79 c0       	rjmp	.+242    	; 0x74ae <normalize+0x318>
    73bc:	2d e6       	ldi	r18, 0x6D	; 109
    73be:	31 e0       	ldi	r19, 0x01	; 1
    73c0:	d3 01       	movw	r26, r6
    73c2:	0e 94 e7 e6 	call	0x1cdce	; 0x1cdce <__usmulhisi3>
    73c6:	f6 01       	movw	r30, r12
    73c8:	ee 0f       	add	r30, r30
    73ca:	ff 1f       	adc	r31, r31
    73cc:	e0 56       	subi	r30, 0x60	; 96
    73ce:	fc 4f       	sbci	r31, 0xFC	; 252
    73d0:	20 81       	ld	r18, Z
    73d2:	31 81       	ldd	r19, Z+1	; 0x01
    73d4:	dc 01       	movw	r26, r24
    73d6:	cb 01       	movw	r24, r22
    73d8:	82 0f       	add	r24, r18
    73da:	93 1f       	adc	r25, r19
    73dc:	a1 1d       	adc	r26, r1
    73de:	b1 1d       	adc	r27, r1
    73e0:	05 2c       	mov	r0, r5
    73e2:	00 0c       	add	r0, r0
    73e4:	66 08       	sbc	r6, r6
    73e6:	77 08       	sbc	r7, r7
    73e8:	48 0e       	add	r4, r24
    73ea:	59 1e       	adc	r5, r25
    73ec:	6a 1e       	adc	r6, r26
    73ee:	7b 1e       	adc	r7, r27
    73f0:	1a 14       	cp	r1, r10
    73f2:	1b 04       	cpc	r1, r11
    73f4:	1c f4       	brge	.+6      	; 0x73fc <normalize+0x266>
    73f6:	51 e0       	ldi	r21, 0x01	; 1
    73f8:	a5 1a       	sub	r10, r21
    73fa:	b1 08       	sbc	r11, r1
    73fc:	45 01       	movw	r8, r10
    73fe:	95 94       	asr	r9
    7400:	87 94       	ror	r8
    7402:	95 94       	asr	r9
    7404:	87 94       	ror	r8
    7406:	88 ec       	ldi	r24, 0xC8	; 200
    7408:	a8 16       	cp	r10, r24
    740a:	b1 04       	cpc	r11, r1
    740c:	1c f0       	brlt	.+6      	; 0x7414 <normalize+0x27e>
    740e:	91 e0       	ldi	r25, 0x01	; 1
    7410:	89 1a       	sub	r8, r25
    7412:	91 08       	sbc	r9, r1
    7414:	09 2c       	mov	r0, r9
    7416:	00 0c       	add	r0, r0
    7418:	aa 08       	sbc	r10, r10
    741a:	bb 08       	sbc	r11, r11
    741c:	84 0c       	add	r8, r4
    741e:	95 1c       	adc	r9, r5
    7420:	a6 1c       	adc	r10, r6
    7422:	b7 1c       	adc	r11, r7
    7424:	24 01       	movw	r4, r8
    7426:	35 01       	movw	r6, r10
    7428:	e1 e1       	ldi	r30, 0x11	; 17
    742a:	4e 1a       	sub	r4, r30
    742c:	51 08       	sbc	r5, r1
    742e:	61 08       	sbc	r6, r1
    7430:	71 08       	sbc	r7, r1
    7432:	f2 e0       	ldi	r31, 0x02	; 2
    7434:	cf 16       	cp	r12, r31
    7436:	d1 04       	cpc	r13, r1
    7438:	64 f0       	brlt	.+24     	; 0x7452 <normalize+0x2bc>
    743a:	8f 81       	ldd	r24, Y+7	; 0x07
    743c:	98 85       	ldd	r25, Y+8	; 0x08
    743e:	7b dc       	rcall	.-1802   	; 0x6d36 <IS_Leap>
    7440:	89 2b       	or	r24, r25
    7442:	39 f0       	breq	.+14     	; 0x7452 <normalize+0x2bc>
    7444:	24 01       	movw	r4, r8
    7446:	35 01       	movw	r6, r10
    7448:	40 e1       	ldi	r20, 0x10	; 16
    744a:	44 1a       	sub	r4, r20
    744c:	51 08       	sbc	r5, r1
    744e:	61 08       	sbc	r6, r1
    7450:	71 08       	sbc	r7, r1
    7452:	a8 e1       	ldi	r26, 0x18	; 24
    7454:	b0 e0       	ldi	r27, 0x00	; 0
    7456:	a3 01       	movw	r20, r6
    7458:	92 01       	movw	r18, r4
    745a:	0e 94 ed e6 	call	0x1cdda	; 0x1cdda <__muluhisi3>
    745e:	01 2e       	mov	r0, r17
    7460:	00 0c       	add	r0, r0
    7462:	22 0b       	sbc	r18, r18
    7464:	33 0b       	sbc	r19, r19
    7466:	a9 01       	movw	r20, r18
    7468:	98 01       	movw	r18, r16
    746a:	26 0f       	add	r18, r22
    746c:	37 1f       	adc	r19, r23
    746e:	48 1f       	adc	r20, r24
    7470:	59 1f       	adc	r21, r25
    7472:	ac e3       	ldi	r26, 0x3C	; 60
    7474:	b0 e0       	ldi	r27, 0x00	; 0
    7476:	0e 94 ed e6 	call	0x1cdda	; 0x1cdda <__muluhisi3>
    747a:	81 01       	movw	r16, r2
    747c:	03 2c       	mov	r0, r3
    747e:	00 0c       	add	r0, r0
    7480:	22 0b       	sbc	r18, r18
    7482:	33 0b       	sbc	r19, r19
    7484:	a9 01       	movw	r20, r18
    7486:	98 01       	movw	r18, r16
    7488:	26 0f       	add	r18, r22
    748a:	37 1f       	adc	r19, r23
    748c:	48 1f       	adc	r20, r24
    748e:	59 1f       	adc	r21, r25
    7490:	0e 94 ed e6 	call	0x1cdda	; 0x1cdda <__muluhisi3>
    7494:	ed 81       	ldd	r30, Y+5	; 0x05
    7496:	fe 81       	ldd	r31, Y+6	; 0x06
    7498:	8f 01       	movw	r16, r30
    749a:	ff 0f       	add	r31, r31
    749c:	22 0b       	sbc	r18, r18
    749e:	33 0b       	sbc	r19, r19
    74a0:	48 01       	movw	r8, r16
    74a2:	59 01       	movw	r10, r18
    74a4:	86 0e       	add	r8, r22
    74a6:	97 1e       	adc	r9, r23
    74a8:	a8 1e       	adc	r10, r24
    74aa:	b9 1e       	adc	r11, r25
    74ac:	04 c0       	rjmp	.+8      	; 0x74b6 <normalize+0x320>
    74ae:	88 24       	eor	r8, r8
    74b0:	8a 94       	dec	r8
    74b2:	98 2c       	mov	r9, r8
    74b4:	54 01       	movw	r10, r8
    74b6:	49 85       	ldd	r20, Y+9	; 0x09
    74b8:	5a 85       	ldd	r21, Y+10	; 0x0a
    74ba:	45 2b       	or	r20, r21
    74bc:	e9 f0       	breq	.+58     	; 0x74f8 <normalize+0x362>
    74be:	ce 01       	movw	r24, r28
    74c0:	01 96       	adiw	r24, 0x01	; 1
    74c2:	7d dd       	rcall	.-1286   	; 0x6fbe <gettimezone>
    74c4:	a9 81       	ldd	r26, Y+1	; 0x01
    74c6:	ba 81       	ldd	r27, Y+2	; 0x02
    74c8:	2c e3       	ldi	r18, 0x3C	; 60
    74ca:	30 e0       	ldi	r19, 0x00	; 0
    74cc:	0e 94 e7 e6 	call	0x1cdce	; 0x1cdce <__usmulhisi3>
    74d0:	2b 01       	movw	r4, r22
    74d2:	3c 01       	movw	r6, r24
    74d4:	c5 01       	movw	r24, r10
    74d6:	b4 01       	movw	r22, r8
    74d8:	e2 dd       	rcall	.-1084   	; 0x709e <is_dst>
    74da:	89 2b       	or	r24, r25
    74dc:	51 f0       	breq	.+20     	; 0x74f2 <normalize+0x35c>
    74de:	50 e1       	ldi	r21, 0x10	; 16
    74e0:	45 1a       	sub	r4, r21
    74e2:	5e e0       	ldi	r21, 0x0E	; 14
    74e4:	55 0a       	sbc	r5, r21
    74e6:	61 08       	sbc	r6, r1
    74e8:	71 08       	sbc	r7, r1
    74ea:	cc 24       	eor	r12, r12
    74ec:	c3 94       	inc	r12
    74ee:	d1 2c       	mov	r13, r1
    74f0:	08 c0       	rjmp	.+16     	; 0x7502 <normalize+0x36c>
    74f2:	c1 2c       	mov	r12, r1
    74f4:	d1 2c       	mov	r13, r1
    74f6:	05 c0       	rjmp	.+10     	; 0x7502 <normalize+0x36c>
    74f8:	c1 2c       	mov	r12, r1
    74fa:	d1 2c       	mov	r13, r1
    74fc:	41 2c       	mov	r4, r1
    74fe:	51 2c       	mov	r5, r1
    7500:	32 01       	movw	r6, r4
    7502:	87 01       	movw	r16, r14
    7504:	a3 01       	movw	r20, r6
    7506:	92 01       	movw	r18, r4
    7508:	c5 01       	movw	r24, r10
    750a:	b4 01       	movw	r22, r8
    750c:	5a dc       	rcall	.-1868   	; 0x6dc2 <time_to_tm>
    750e:	c1 14       	cp	r12, r1
    7510:	d1 04       	cpc	r13, r1
    7512:	29 f0       	breq	.+10     	; 0x751e <normalize+0x388>
    7514:	21 e0       	ldi	r18, 0x01	; 1
    7516:	30 e0       	ldi	r19, 0x00	; 0
    7518:	f7 01       	movw	r30, r14
    751a:	31 8b       	std	Z+17, r19	; 0x11
    751c:	20 8b       	std	Z+16, r18	; 0x10
    751e:	2a 96       	adiw	r28, 0x0a	; 10
    7520:	e2 e1       	ldi	r30, 0x12	; 18
    7522:	0c 94 29 e7 	jmp	0x1ce52	; 0x1ce52 <__epilogue_restores__>

00007526 <timegm>:
    7526:	60 e0       	ldi	r22, 0x00	; 0
    7528:	70 e0       	ldi	r23, 0x00	; 0
    752a:	35 ce       	rjmp	.-918    	; 0x7196 <normalize>
    752c:	08 95       	ret

0000752e <setdate_r>:
    752e:	cf 92       	push	r12
    7530:	df 92       	push	r13
    7532:	ef 92       	push	r14
    7534:	ff 92       	push	r15
    7536:	cf 93       	push	r28
    7538:	df 93       	push	r29
    753a:	cd b7       	in	r28, 0x3d	; 61
    753c:	de b7       	in	r29, 0x3e	; 62
    753e:	a5 97       	sbiw	r28, 0x25	; 37
    7540:	0f b6       	in	r0, 0x3f	; 63
    7542:	f8 94       	cli
    7544:	de bf       	out	0x3e, r29	; 62
    7546:	0f be       	out	0x3f, r0	; 63
    7548:	cd bf       	out	0x3d, r28	; 61
    754a:	9d a3       	std	Y+37, r25	; 0x25
    754c:	8c a3       	std	Y+36, r24	; 0x24
    754e:	1f 82       	std	Y+7, r1	; 0x07
    7550:	1e 82       	std	Y+6, r1	; 0x06
    7552:	19 86       	std	Y+9, r1	; 0x09
    7554:	18 86       	std	Y+8, r1	; 0x08
    7556:	1b 86       	std	Y+11, r1	; 0x0b
    7558:	1a 86       	std	Y+10, r1	; 0x0a
    755a:	1d 86       	std	Y+13, r1	; 0x0d
    755c:	1c 86       	std	Y+12, r1	; 0x0c
    755e:	1f 86       	std	Y+15, r1	; 0x0f
    7560:	1e 86       	std	Y+14, r1	; 0x0e
    7562:	19 8a       	std	Y+17, r1	; 0x11
    7564:	18 8a       	std	Y+16, r1	; 0x10
    7566:	8c a1       	ldd	r24, Y+36	; 0x24
    7568:	9d a1       	ldd	r25, Y+37	; 0x25
    756a:	fc 01       	movw	r30, r24
    756c:	20 81       	ld	r18, Z
    756e:	20 32       	cpi	r18, 0x20	; 32
    7570:	21 f4       	brne	.+8      	; 0x757a <setdate_r+0x4c>
    7572:	01 96       	adiw	r24, 0x01	; 1
    7574:	9d a3       	std	Y+37, r25	; 0x25
    7576:	8c a3       	std	Y+36, r24	; 0x24
    7578:	f6 cf       	rjmp	.-20     	; 0x7566 <setdate_r+0x38>
    757a:	4a e0       	ldi	r20, 0x0A	; 10
    757c:	50 e0       	ldi	r21, 0x00	; 0
    757e:	be 01       	movw	r22, r28
    7580:	6c 5d       	subi	r22, 0xDC	; 220
    7582:	7f 4f       	sbci	r23, 0xFF	; 255
    7584:	0e 94 67 47 	call	0x8ece	; 0x8ece <strtol>
    7588:	79 8b       	std	Y+17, r23	; 0x11
    758a:	68 8b       	std	Y+16, r22	; 0x10
    758c:	8c a1       	ldd	r24, Y+36	; 0x24
    758e:	9d a1       	ldd	r25, Y+37	; 0x25
    7590:	fc 01       	movw	r30, r24
    7592:	20 81       	ld	r18, Z
    7594:	20 32       	cpi	r18, 0x20	; 32
    7596:	21 f4       	brne	.+8      	; 0x75a0 <setdate_r+0x72>
    7598:	01 96       	adiw	r24, 0x01	; 1
    759a:	9d a3       	std	Y+37, r25	; 0x25
    759c:	8c a3       	std	Y+36, r24	; 0x24
    759e:	f6 cf       	rjmp	.-20     	; 0x758c <setdate_r+0x5e>
    75a0:	4a e0       	ldi	r20, 0x0A	; 10
    75a2:	50 e0       	ldi	r21, 0x00	; 0
    75a4:	be 01       	movw	r22, r28
    75a6:	6c 5d       	subi	r22, 0xDC	; 220
    75a8:	7f 4f       	sbci	r23, 0xFF	; 255
    75aa:	0e 94 67 47 	call	0x8ece	; 0x8ece <strtol>
    75ae:	7f 87       	std	Y+15, r23	; 0x0f
    75b0:	6e 87       	std	Y+14, r22	; 0x0e
    75b2:	8c a1       	ldd	r24, Y+36	; 0x24
    75b4:	9d a1       	ldd	r25, Y+37	; 0x25
    75b6:	fc 01       	movw	r30, r24
    75b8:	20 81       	ld	r18, Z
    75ba:	20 32       	cpi	r18, 0x20	; 32
    75bc:	21 f4       	brne	.+8      	; 0x75c6 <setdate_r+0x98>
    75be:	01 96       	adiw	r24, 0x01	; 1
    75c0:	9d a3       	std	Y+37, r25	; 0x25
    75c2:	8c a3       	std	Y+36, r24	; 0x24
    75c4:	f6 cf       	rjmp	.-20     	; 0x75b2 <setdate_r+0x84>
    75c6:	4a e0       	ldi	r20, 0x0A	; 10
    75c8:	50 e0       	ldi	r21, 0x00	; 0
    75ca:	be 01       	movw	r22, r28
    75cc:	6c 5d       	subi	r22, 0xDC	; 220
    75ce:	7f 4f       	sbci	r23, 0xFF	; 255
    75d0:	0e 94 67 47 	call	0x8ece	; 0x8ece <strtol>
    75d4:	7d 87       	std	Y+13, r23	; 0x0d
    75d6:	6c 87       	std	Y+12, r22	; 0x0c
    75d8:	8c a1       	ldd	r24, Y+36	; 0x24
    75da:	9d a1       	ldd	r25, Y+37	; 0x25
    75dc:	fc 01       	movw	r30, r24
    75de:	20 81       	ld	r18, Z
    75e0:	20 32       	cpi	r18, 0x20	; 32
    75e2:	21 f4       	brne	.+8      	; 0x75ec <setdate_r+0xbe>
    75e4:	01 96       	adiw	r24, 0x01	; 1
    75e6:	9d a3       	std	Y+37, r25	; 0x25
    75e8:	8c a3       	std	Y+36, r24	; 0x24
    75ea:	f6 cf       	rjmp	.-20     	; 0x75d8 <setdate_r+0xaa>
    75ec:	4a e0       	ldi	r20, 0x0A	; 10
    75ee:	50 e0       	ldi	r21, 0x00	; 0
    75f0:	be 01       	movw	r22, r28
    75f2:	6c 5d       	subi	r22, 0xDC	; 220
    75f4:	7f 4f       	sbci	r23, 0xFF	; 255
    75f6:	0e 94 67 47 	call	0x8ece	; 0x8ece <strtol>
    75fa:	7b 87       	std	Y+11, r23	; 0x0b
    75fc:	6a 87       	std	Y+10, r22	; 0x0a
    75fe:	ec a1       	ldd	r30, Y+36	; 0x24
    7600:	fd a1       	ldd	r31, Y+37	; 0x25
    7602:	80 81       	ld	r24, Z
    7604:	88 23       	and	r24, r24
    7606:	39 f0       	breq	.+14     	; 0x7616 <setdate_r+0xe8>
    7608:	80 32       	cpi	r24, 0x20	; 32
    760a:	11 f0       	breq	.+4      	; 0x7610 <setdate_r+0xe2>
    760c:	8a 33       	cpi	r24, 0x3A	; 58
    760e:	19 f4       	brne	.+6      	; 0x7616 <setdate_r+0xe8>
    7610:	31 96       	adiw	r30, 0x01	; 1
    7612:	fd a3       	std	Y+37, r31	; 0x25
    7614:	ec a3       	std	Y+36, r30	; 0x24
    7616:	4a e0       	ldi	r20, 0x0A	; 10
    7618:	50 e0       	ldi	r21, 0x00	; 0
    761a:	be 01       	movw	r22, r28
    761c:	6c 5d       	subi	r22, 0xDC	; 220
    761e:	7f 4f       	sbci	r23, 0xFF	; 255
    7620:	8c a1       	ldd	r24, Y+36	; 0x24
    7622:	9d a1       	ldd	r25, Y+37	; 0x25
    7624:	0e 94 67 47 	call	0x8ece	; 0x8ece <strtol>
    7628:	79 87       	std	Y+9, r23	; 0x09
    762a:	68 87       	std	Y+8, r22	; 0x08
    762c:	ec a1       	ldd	r30, Y+36	; 0x24
    762e:	fd a1       	ldd	r31, Y+37	; 0x25
    7630:	80 81       	ld	r24, Z
    7632:	88 23       	and	r24, r24
    7634:	39 f0       	breq	.+14     	; 0x7644 <setdate_r+0x116>
    7636:	80 32       	cpi	r24, 0x20	; 32
    7638:	11 f0       	breq	.+4      	; 0x763e <setdate_r+0x110>
    763a:	8a 33       	cpi	r24, 0x3A	; 58
    763c:	19 f4       	brne	.+6      	; 0x7644 <setdate_r+0x116>
    763e:	31 96       	adiw	r30, 0x01	; 1
    7640:	fd a3       	std	Y+37, r31	; 0x25
    7642:	ec a3       	std	Y+36, r30	; 0x24
    7644:	4a e0       	ldi	r20, 0x0A	; 10
    7646:	50 e0       	ldi	r21, 0x00	; 0
    7648:	be 01       	movw	r22, r28
    764a:	6c 5d       	subi	r22, 0xDC	; 220
    764c:	7f 4f       	sbci	r23, 0xFF	; 255
    764e:	8c a1       	ldd	r24, Y+36	; 0x24
    7650:	9d a1       	ldd	r25, Y+37	; 0x25
    7652:	0e 94 67 47 	call	0x8ece	; 0x8ece <strtol>
    7656:	7f 83       	std	Y+7, r23	; 0x07
    7658:	6e 83       	std	Y+6, r22	; 0x06
    765a:	2e 85       	ldd	r18, Y+14	; 0x0e
    765c:	3f 85       	ldd	r19, Y+15	; 0x0f
    765e:	21 50       	subi	r18, 0x01	; 1
    7660:	31 09       	sbc	r19, r1
    7662:	3f 87       	std	Y+15, r19	; 0x0f
    7664:	2e 87       	std	Y+14, r18	; 0x0e
    7666:	88 89       	ldd	r24, Y+16	; 0x10
    7668:	99 89       	ldd	r25, Y+17	; 0x11
    766a:	ac 01       	movw	r20, r24
    766c:	42 5b       	subi	r20, 0xB2	; 178
    766e:	57 40       	sbci	r21, 0x07	; 7
    7670:	45 34       	cpi	r20, 0x45	; 69
    7672:	51 05       	cpc	r21, r1
    7674:	38 f0       	brcs	.+14     	; 0x7684 <setdate_r+0x156>
    7676:	ed b7       	in	r30, 0x3d	; 61
    7678:	fe b7       	in	r31, 0x3e	; 62
    767a:	95 83       	std	Z+5, r25	; 0x05
    767c:	84 83       	std	Z+4, r24	; 0x04
    767e:	89 e1       	ldi	r24, 0x19	; 25
    7680:	97 e0       	ldi	r25, 0x07	; 7
    7682:	34 c0       	rjmp	.+104    	; 0x76ec <setdate_r+0x1be>
    7684:	8c 56       	subi	r24, 0x6C	; 108
    7686:	97 40       	sbci	r25, 0x07	; 7
    7688:	99 8b       	std	Y+17, r25	; 0x11
    768a:	88 8b       	std	Y+16, r24	; 0x10
    768c:	2c 30       	cpi	r18, 0x0C	; 12
    768e:	31 05       	cpc	r19, r1
    7690:	38 f0       	brcs	.+14     	; 0x76a0 <setdate_r+0x172>
    7692:	ed b7       	in	r30, 0x3d	; 61
    7694:	fe b7       	in	r31, 0x3e	; 62
    7696:	95 83       	std	Z+5, r25	; 0x05
    7698:	84 83       	std	Z+4, r24	; 0x04
    769a:	88 e0       	ldi	r24, 0x08	; 8
    769c:	97 e0       	ldi	r25, 0x07	; 7
    769e:	26 c0       	rjmp	.+76     	; 0x76ec <setdate_r+0x1be>
    76a0:	8c 85       	ldd	r24, Y+12	; 0x0c
    76a2:	9d 85       	ldd	r25, Y+13	; 0x0d
    76a4:	9c 01       	movw	r18, r24
    76a6:	21 50       	subi	r18, 0x01	; 1
    76a8:	31 09       	sbc	r19, r1
    76aa:	2f 31       	cpi	r18, 0x1F	; 31
    76ac:	31 05       	cpc	r19, r1
    76ae:	38 f0       	brcs	.+14     	; 0x76be <setdate_r+0x190>
    76b0:	ed b7       	in	r30, 0x3d	; 61
    76b2:	fe b7       	in	r31, 0x3e	; 62
    76b4:	95 83       	std	Z+5, r25	; 0x05
    76b6:	84 83       	std	Z+4, r24	; 0x04
    76b8:	87 ef       	ldi	r24, 0xF7	; 247
    76ba:	96 e0       	ldi	r25, 0x06	; 6
    76bc:	17 c0       	rjmp	.+46     	; 0x76ec <setdate_r+0x1be>
    76be:	8a 85       	ldd	r24, Y+10	; 0x0a
    76c0:	9b 85       	ldd	r25, Y+11	; 0x0b
    76c2:	88 31       	cpi	r24, 0x18	; 24
    76c4:	91 05       	cpc	r25, r1
    76c6:	38 f0       	brcs	.+14     	; 0x76d6 <setdate_r+0x1a8>
    76c8:	ed b7       	in	r30, 0x3d	; 61
    76ca:	fe b7       	in	r31, 0x3e	; 62
    76cc:	95 83       	std	Z+5, r25	; 0x05
    76ce:	84 83       	std	Z+4, r24	; 0x04
    76d0:	85 ee       	ldi	r24, 0xE5	; 229
    76d2:	96 e0       	ldi	r25, 0x06	; 6
    76d4:	0b c0       	rjmp	.+22     	; 0x76ec <setdate_r+0x1be>
    76d6:	88 85       	ldd	r24, Y+8	; 0x08
    76d8:	99 85       	ldd	r25, Y+9	; 0x09
    76da:	8c 33       	cpi	r24, 0x3C	; 60
    76dc:	91 05       	cpc	r25, r1
    76de:	68 f0       	brcs	.+26     	; 0x76fa <setdate_r+0x1cc>
    76e0:	ed b7       	in	r30, 0x3d	; 61
    76e2:	fe b7       	in	r31, 0x3e	; 62
    76e4:	95 83       	std	Z+5, r25	; 0x05
    76e6:	84 83       	std	Z+4, r24	; 0x04
    76e8:	84 ed       	ldi	r24, 0xD4	; 212
    76ea:	96 e0       	ldi	r25, 0x06	; 6
    76ec:	a0 e0       	ldi	r26, 0x00	; 0
    76ee:	81 83       	std	Z+1, r24	; 0x01
    76f0:	92 83       	std	Z+2, r25	; 0x02
    76f2:	a3 83       	std	Z+3, r26	; 0x03
    76f4:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    76f8:	25 c0       	rjmp	.+74     	; 0x7744 <setdate_r+0x216>
    76fa:	ce 01       	movw	r24, r28
    76fc:	06 96       	adiw	r24, 0x06	; 6
    76fe:	13 df       	rcall	.-474    	; 0x7526 <timegm>
    7700:	6b 01       	movw	r12, r22
    7702:	7c 01       	movw	r14, r24
    7704:	6c 8f       	std	Y+28, r22	; 0x1c
    7706:	7d 8f       	std	Y+29, r23	; 0x1d
    7708:	8e 8f       	std	Y+30, r24	; 0x1e
    770a:	9f 8f       	std	Y+31, r25	; 0x1f
    770c:	18 a2       	std	Y+32, r1	; 0x20
    770e:	19 a2       	std	Y+33, r1	; 0x21
    7710:	1a a2       	std	Y+34, r1	; 0x22
    7712:	1b a2       	std	Y+35, r1	; 0x23
    7714:	be 01       	movw	r22, r28
    7716:	64 5e       	subi	r22, 0xE4	; 228
    7718:	7f 4f       	sbci	r23, 0xFF	; 255
    771a:	80 e0       	ldi	r24, 0x00	; 0
    771c:	90 e0       	ldi	r25, 0x00	; 0
    771e:	03 db       	rcall	.-2554   	; 0x6d26 <clock_settime>
    7720:	b7 01       	movw	r22, r14
    7722:	a6 01       	movw	r20, r12
    7724:	81 e0       	ldi	r24, 0x01	; 1
    7726:	90 e0       	ldi	r25, 0x00	; 0
    7728:	0e 94 13 31 	call	0x6226	; 0x6226 <rtc_init>
    772c:	81 11       	cpse	r24, r1
    772e:	0d c0       	rjmp	.+26     	; 0x774a <setdate_r+0x21c>
    7730:	8d eb       	ldi	r24, 0xBD	; 189
    7732:	96 e0       	ldi	r25, 0x06	; 6
    7734:	a0 e0       	ldi	r26, 0x00	; 0
    7736:	ed b7       	in	r30, 0x3d	; 61
    7738:	fe b7       	in	r31, 0x3e	; 62
    773a:	81 83       	std	Z+1, r24	; 0x01
    773c:	92 83       	std	Z+2, r25	; 0x02
    773e:	a3 83       	std	Z+3, r26	; 0x03
    7740:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    7744:	8f ef       	ldi	r24, 0xFF	; 255
    7746:	9f ef       	ldi	r25, 0xFF	; 255
    7748:	02 c0       	rjmp	.+4      	; 0x774e <setdate_r+0x220>
    774a:	80 e0       	ldi	r24, 0x00	; 0
    774c:	90 e0       	ldi	r25, 0x00	; 0
    774e:	a5 96       	adiw	r28, 0x25	; 37
    7750:	0f b6       	in	r0, 0x3f	; 63
    7752:	f8 94       	cli
    7754:	de bf       	out	0x3e, r29	; 62
    7756:	0f be       	out	0x3f, r0	; 63
    7758:	cd bf       	out	0x3d, r28	; 61
    775a:	df 91       	pop	r29
    775c:	cf 91       	pop	r28
    775e:	ff 90       	pop	r15
    7760:	ef 90       	pop	r14
    7762:	df 90       	pop	r13
    7764:	cf 90       	pop	r12
    7766:	08 95       	ret

00007768 <setdate>:
    7768:	ab e2       	ldi	r26, 0x2B	; 43
    776a:	b0 e0       	ldi	r27, 0x00	; 0
    776c:	ea eb       	ldi	r30, 0xBA	; 186
    776e:	fb e3       	ldi	r31, 0x3B	; 59
    7770:	0c 94 1d e7 	jmp	0x1ce3a	; 0x1ce3a <__prologue_saves__+0x20>
    7774:	8b e2       	ldi	r24, 0x2B	; 43
    7776:	97 e0       	ldi	r25, 0x07	; 7
    7778:	a0 e0       	ldi	r26, 0x00	; 0
    777a:	ed b7       	in	r30, 0x3d	; 61
    777c:	fe b7       	in	r31, 0x3e	; 62
    777e:	81 83       	std	Z+1, r24	; 0x01
    7780:	92 83       	std	Z+2, r25	; 0x02
    7782:	a3 83       	std	Z+3, r26	; 0x03
    7784:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    7788:	40 91 bf 1c 	lds	r20, 0x1CBF	; 0x801cbf <__iob>
    778c:	50 91 c0 1c 	lds	r21, 0x1CC0	; 0x801cc0 <__iob+0x1>
    7790:	66 e2       	ldi	r22, 0x26	; 38
    7792:	70 e0       	ldi	r23, 0x00	; 0
    7794:	ce 01       	movw	r24, r28
    7796:	04 96       	adiw	r24, 0x04	; 4
    7798:	0e 94 83 76 	call	0xed06	; 0xed06 <fgets>
    779c:	ce 01       	movw	r24, r28
    779e:	04 96       	adiw	r24, 0x04	; 4
    77a0:	c6 de       	rcall	.-628    	; 0x752e <setdate_r>
    77a2:	ab 96       	adiw	r28, 0x2b	; 43
    77a4:	e2 e0       	ldi	r30, 0x02	; 2
    77a6:	0c 94 39 e7 	jmp	0x1ce72	; 0x1ce72 <__epilogue_restores__+0x20>

000077aa <find_dst>:
    77aa:	a8 e2       	ldi	r26, 0x28	; 40
    77ac:	b0 e0       	ldi	r27, 0x00	; 0
    77ae:	eb ed       	ldi	r30, 0xDB	; 219
    77b0:	fb e3       	ldi	r31, 0x3B	; 59
    77b2:	0c 94 0d e7 	jmp	0x1ce1a	; 0x1ce1a <__prologue_saves__>
    77b6:	3c 01       	movw	r6, r24
    77b8:	1a 01       	movw	r2, r20
    77ba:	2b 01       	movw	r4, r22
    77bc:	49 01       	movw	r8, r18
    77be:	1c a3       	std	Y+36, r17	; 0x24
    77c0:	0b a3       	std	Y+35, r16	; 0x23
    77c2:	de a2       	std	Y+38, r13	; 0x26
    77c4:	cd a2       	std	Y+37, r12	; 0x25
    77c6:	b8 a6       	std	Y+40, r11	; 0x28
    77c8:	af a2       	std	Y+39, r10	; 0x27
    77ca:	be 01       	movw	r22, r28
    77cc:	61 5e       	subi	r22, 0xE1	; 225
    77ce:	7f 4f       	sbci	r23, 0xFF	; 255
    77d0:	ce 01       	movw	r24, r28
    77d2:	47 96       	adiw	r24, 0x17	; 23
    77d4:	15 dc       	rcall	.-2006   	; 0x7000 <gettimeofday>
    77d6:	af 8d       	ldd	r26, Y+31	; 0x1f
    77d8:	b8 a1       	ldd	r27, Y+32	; 0x20
    77da:	2c e3       	ldi	r18, 0x3C	; 60
    77dc:	30 e0       	ldi	r19, 0x00	; 0
    77de:	0e 94 e7 e6 	call	0x1cdce	; 0x1cdce <__usmulhisi3>
    77e2:	5b 01       	movw	r10, r22
    77e4:	6c 01       	movw	r12, r24
    77e6:	61 14       	cp	r6, r1
    77e8:	71 04       	cpc	r7, r1
    77ea:	31 f0       	breq	.+12     	; 0x77f8 <find_dst+0x4e>
    77ec:	20 e1       	ldi	r18, 0x10	; 16
    77ee:	a2 1a       	sub	r10, r18
    77f0:	2e e0       	ldi	r18, 0x0E	; 14
    77f2:	b2 0a       	sbc	r11, r18
    77f4:	c1 08       	sbc	r12, r1
    77f6:	d1 08       	sbc	r13, r1
    77f8:	81 14       	cp	r8, r1
    77fa:	91 04       	cpc	r9, r1
    77fc:	39 f0       	breq	.+14     	; 0x780c <find_dst+0x62>
    77fe:	4c e6       	ldi	r20, 0x6C	; 108
    7800:	84 1a       	sub	r8, r20
    7802:	47 e0       	ldi	r20, 0x07	; 7
    7804:	94 0a       	sbc	r9, r20
    7806:	9c 86       	std	Y+12, r9	; 0x0c
    7808:	8b 86       	std	Y+11, r8	; 0x0b
    780a:	11 c0       	rjmp	.+34     	; 0x782e <find_dst+0x84>
    780c:	21 14       	cp	r2, r1
    780e:	31 04       	cpc	r3, r1
    7810:	41 04       	cpc	r4, r1
    7812:	51 04       	cpc	r5, r1
    7814:	21 f4       	brne	.+8      	; 0x781e <find_dst+0x74>
    7816:	2f 88       	ldd	r2, Y+23	; 0x17
    7818:	38 8c       	ldd	r3, Y+24	; 0x18
    781a:	49 8c       	ldd	r4, Y+25	; 0x19
    781c:	5a 8c       	ldd	r5, Y+26	; 0x1a
    781e:	8e 01       	movw	r16, r28
    7820:	0f 5f       	subi	r16, 0xFF	; 255
    7822:	1f 4f       	sbci	r17, 0xFF	; 255
    7824:	a6 01       	movw	r20, r12
    7826:	95 01       	movw	r18, r10
    7828:	c2 01       	movw	r24, r4
    782a:	b1 01       	movw	r22, r2
    782c:	ca da       	rcall	.-2668   	; 0x6dc2 <time_to_tm>
    782e:	8b a1       	ldd	r24, Y+35	; 0x23
    7830:	9c a1       	ldd	r25, Y+36	; 0x24
    7832:	01 97       	sbiw	r24, 0x01	; 1
    7834:	9a 87       	std	Y+10, r25	; 0x0a
    7836:	89 87       	std	Y+9, r24	; 0x09
    7838:	81 e0       	ldi	r24, 0x01	; 1
    783a:	90 e0       	ldi	r25, 0x00	; 0
    783c:	98 87       	std	Y+8, r25	; 0x08
    783e:	8f 83       	std	Y+7, r24	; 0x07
    7840:	8f a1       	ldd	r24, Y+39	; 0x27
    7842:	98 a5       	ldd	r25, Y+40	; 0x28
    7844:	9e 83       	std	Y+6, r25	; 0x06
    7846:	8d 83       	std	Y+5, r24	; 0x05
    7848:	1c 82       	std	Y+4, r1	; 0x04
    784a:	1b 82       	std	Y+3, r1	; 0x03
    784c:	1a 82       	std	Y+2, r1	; 0x02
    784e:	19 82       	std	Y+1, r1	; 0x01
    7850:	ce 01       	movw	r24, r28
    7852:	01 96       	adiw	r24, 0x01	; 1
    7854:	68 de       	rcall	.-816    	; 0x7526 <timegm>
    7856:	45 01       	movw	r8, r10
    7858:	56 01       	movw	r10, r12
    785a:	86 0e       	add	r8, r22
    785c:	97 1e       	adc	r9, r23
    785e:	a8 1e       	adc	r10, r24
    7860:	b9 1e       	adc	r11, r25
    7862:	8e 01       	movw	r16, r28
    7864:	0f 5f       	subi	r16, 0xFF	; 255
    7866:	1f 4f       	sbci	r17, 0xFF	; 255
    7868:	20 e0       	ldi	r18, 0x00	; 0
    786a:	30 e0       	ldi	r19, 0x00	; 0
    786c:	a9 01       	movw	r20, r18
    786e:	c5 01       	movw	r24, r10
    7870:	b4 01       	movw	r22, r8
    7872:	a7 da       	rcall	.-2738   	; 0x6dc2 <time_to_tm>
    7874:	2d 85       	ldd	r18, Y+13	; 0x0d
    7876:	3e 85       	ldd	r19, Y+14	; 0x0e
    7878:	e7 e0       	ldi	r30, 0x07	; 7
    787a:	f0 e0       	ldi	r31, 0x00	; 0
    787c:	c9 01       	movw	r24, r18
    787e:	bf 01       	movw	r22, r30
    7880:	0e 94 8d e6 	call	0x1cd1a	; 0x1cd1a <__divmodhi4>
    7884:	4d a1       	ldd	r20, Y+37	; 0x25
    7886:	5e a1       	ldd	r21, Y+38	; 0x26
    7888:	48 17       	cp	r20, r24
    788a:	59 07       	cpc	r21, r25
    788c:	21 f4       	brne	.+8      	; 0x7896 <find_dst+0xec>
    788e:	51 e0       	ldi	r21, 0x01	; 1
    7890:	e5 1a       	sub	r14, r21
    7892:	f1 08       	sbc	r15, r1
    7894:	51 f0       	breq	.+20     	; 0x78aa <find_dst+0x100>
    7896:	80 e8       	ldi	r24, 0x80	; 128
    7898:	88 0e       	add	r8, r24
    789a:	81 e5       	ldi	r24, 0x51	; 81
    789c:	98 1e       	adc	r9, r24
    789e:	81 e0       	ldi	r24, 0x01	; 1
    78a0:	a8 1e       	adc	r10, r24
    78a2:	b1 1c       	adc	r11, r1
    78a4:	2f 5f       	subi	r18, 0xFF	; 255
    78a6:	3f 4f       	sbci	r19, 0xFF	; 255
    78a8:	e9 cf       	rjmp	.-46     	; 0x787c <find_dst+0xd2>
    78aa:	c5 01       	movw	r24, r10
    78ac:	b4 01       	movw	r22, r8
    78ae:	a8 96       	adiw	r28, 0x28	; 40
    78b0:	e2 e1       	ldi	r30, 0x12	; 18
    78b2:	0c 94 29 e7 	jmp	0x1ce52	; 0x1ce52 <__epilogue_restores__>

000078b6 <set_dst>:
    78b6:	4f 92       	push	r4
    78b8:	5f 92       	push	r5
    78ba:	6f 92       	push	r6
    78bc:	7f 92       	push	r7
    78be:	af 92       	push	r10
    78c0:	bf 92       	push	r11
    78c2:	cf 92       	push	r12
    78c4:	df 92       	push	r13
    78c6:	ef 92       	push	r14
    78c8:	ff 92       	push	r15
    78ca:	0f 93       	push	r16
    78cc:	1f 93       	push	r17
    78ce:	cf 93       	push	r28
    78d0:	df 93       	push	r29
    78d2:	cd b7       	in	r28, 0x3d	; 61
    78d4:	de b7       	in	r29, 0x3e	; 62
    78d6:	2c 97       	sbiw	r28, 0x0c	; 12
    78d8:	0f b6       	in	r0, 0x3f	; 63
    78da:	f8 94       	cli
    78dc:	de bf       	out	0x3e, r29	; 62
    78de:	0f be       	out	0x3f, r0	; 63
    78e0:	cd bf       	out	0x3d, r28	; 61
    78e2:	2b 01       	movw	r4, r22
    78e4:	3c 01       	movw	r6, r24
    78e6:	67 2b       	or	r22, r23
    78e8:	68 2b       	or	r22, r24
    78ea:	69 2b       	or	r22, r25
    78ec:	51 f4       	brne	.+20     	; 0x7902 <set_dst+0x4c>
    78ee:	be 01       	movw	r22, r28
    78f0:	67 5f       	subi	r22, 0xF7	; 247
    78f2:	7f 4f       	sbci	r23, 0xFF	; 255
    78f4:	ce 01       	movw	r24, r28
    78f6:	01 96       	adiw	r24, 0x01	; 1
    78f8:	83 db       	rcall	.-2298   	; 0x7000 <gettimeofday>
    78fa:	49 80       	ldd	r4, Y+1	; 0x01
    78fc:	5a 80       	ldd	r5, Y+2	; 0x02
    78fe:	6b 80       	ldd	r6, Y+3	; 0x03
    7900:	7c 80       	ldd	r7, Y+4	; 0x04
    7902:	80 91 7c 1a 	lds	r24, 0x1A7C	; 0x801a7c <dst+0x8>
    7906:	90 91 7d 1a 	lds	r25, 0x1A7D	; 0x801a7d <dst+0x9>
    790a:	a0 91 7e 1a 	lds	r26, 0x1A7E	; 0x801a7e <dst+0xa>
    790e:	b0 91 7f 1a 	lds	r27, 0x1A7F	; 0x801a7f <dst+0xb>
    7912:	84 15       	cp	r24, r4
    7914:	95 05       	cpc	r25, r5
    7916:	a6 05       	cpc	r26, r6
    7918:	b7 05       	cpc	r27, r7
    791a:	50 f0       	brcs	.+20     	; 0x7930 <set_dst+0x7a>
    791c:	84 19       	sub	r24, r4
    791e:	95 09       	sbc	r25, r5
    7920:	a6 09       	sbc	r26, r6
    7922:	b7 09       	sbc	r27, r7
    7924:	80 38       	cpi	r24, 0x80	; 128
    7926:	91 45       	sbci	r25, 0x51	; 81
    7928:	a1 40       	sbci	r26, 0x01	; 1
    792a:	b1 05       	cpc	r27, r1
    792c:	70 f4       	brcc	.+28     	; 0x794a <set_dst+0x94>
    792e:	42 c0       	rjmp	.+132    	; 0x79b4 <set_dst+0xfe>
    7930:	a3 01       	movw	r20, r6
    7932:	92 01       	movw	r18, r4
    7934:	28 1b       	sub	r18, r24
    7936:	39 0b       	sbc	r19, r25
    7938:	4a 0b       	sbc	r20, r26
    793a:	5b 0b       	sbc	r21, r27
    793c:	da 01       	movw	r26, r20
    793e:	c9 01       	movw	r24, r18
    7940:	80 38       	cpi	r24, 0x80	; 128
    7942:	91 45       	sbci	r25, 0x51	; 81
    7944:	a1 40       	sbci	r26, 0x01	; 1
    7946:	b1 05       	cpc	r27, r1
    7948:	a8 f1       	brcs	.+106    	; 0x79b4 <set_dst+0xfe>
    794a:	40 92 7c 1a 	sts	0x1A7C, r4	; 0x801a7c <dst+0x8>
    794e:	50 92 7d 1a 	sts	0x1A7D, r5	; 0x801a7d <dst+0x9>
    7952:	60 92 7e 1a 	sts	0x1A7E, r6	; 0x801a7e <dst+0xa>
    7956:	70 92 7f 1a 	sts	0x1A7F, r7	; 0x801a7f <dst+0xb>
    795a:	82 e0       	ldi	r24, 0x02	; 2
    795c:	a8 2e       	mov	r10, r24
    795e:	b1 2c       	mov	r11, r1
    7960:	c1 2c       	mov	r12, r1
    7962:	d1 2c       	mov	r13, r1
    7964:	92 e0       	ldi	r25, 0x02	; 2
    7966:	e9 2e       	mov	r14, r25
    7968:	f1 2c       	mov	r15, r1
    796a:	03 e0       	ldi	r16, 0x03	; 3
    796c:	10 e0       	ldi	r17, 0x00	; 0
    796e:	20 e0       	ldi	r18, 0x00	; 0
    7970:	30 e0       	ldi	r19, 0x00	; 0
    7972:	b3 01       	movw	r22, r6
    7974:	a2 01       	movw	r20, r4
    7976:	80 e0       	ldi	r24, 0x00	; 0
    7978:	90 e0       	ldi	r25, 0x00	; 0
    797a:	17 df       	rcall	.-466    	; 0x77aa <find_dst>
    797c:	60 93 74 1a 	sts	0x1A74, r22	; 0x801a74 <dst>
    7980:	70 93 75 1a 	sts	0x1A75, r23	; 0x801a75 <dst+0x1>
    7984:	80 93 76 1a 	sts	0x1A76, r24	; 0x801a76 <dst+0x2>
    7988:	90 93 77 1a 	sts	0x1A77, r25	; 0x801a77 <dst+0x3>
    798c:	ee 24       	eor	r14, r14
    798e:	e3 94       	inc	r14
    7990:	f1 2c       	mov	r15, r1
    7992:	0b e0       	ldi	r16, 0x0B	; 11
    7994:	10 e0       	ldi	r17, 0x00	; 0
    7996:	20 e0       	ldi	r18, 0x00	; 0
    7998:	30 e0       	ldi	r19, 0x00	; 0
    799a:	b3 01       	movw	r22, r6
    799c:	a2 01       	movw	r20, r4
    799e:	81 e0       	ldi	r24, 0x01	; 1
    79a0:	90 e0       	ldi	r25, 0x00	; 0
    79a2:	03 df       	rcall	.-506    	; 0x77aa <find_dst>
    79a4:	60 93 78 1a 	sts	0x1A78, r22	; 0x801a78 <dst+0x4>
    79a8:	70 93 79 1a 	sts	0x1A79, r23	; 0x801a79 <dst+0x5>
    79ac:	80 93 7a 1a 	sts	0x1A7A, r24	; 0x801a7a <dst+0x6>
    79b0:	90 93 7b 1a 	sts	0x1A7B, r25	; 0x801a7b <dst+0x7>
    79b4:	2c 96       	adiw	r28, 0x0c	; 12
    79b6:	0f b6       	in	r0, 0x3f	; 63
    79b8:	f8 94       	cli
    79ba:	de bf       	out	0x3e, r29	; 62
    79bc:	0f be       	out	0x3f, r0	; 63
    79be:	cd bf       	out	0x3d, r28	; 61
    79c0:	df 91       	pop	r29
    79c2:	cf 91       	pop	r28
    79c4:	1f 91       	pop	r17
    79c6:	0f 91       	pop	r16
    79c8:	ff 90       	pop	r15
    79ca:	ef 90       	pop	r14
    79cc:	df 90       	pop	r13
    79ce:	cf 90       	pop	r12
    79d0:	bf 90       	pop	r11
    79d2:	af 90       	pop	r10
    79d4:	7f 90       	pop	r7
    79d6:	6f 90       	pop	r6
    79d8:	5f 90       	pop	r5
    79da:	4f 90       	pop	r4
    79dc:	08 95       	ret

000079de <asctime_r>:
    79de:	a5 e1       	ldi	r26, 0x15	; 21
    79e0:	b0 e0       	ldi	r27, 0x00	; 0
    79e2:	e5 ef       	ldi	r30, 0xF5	; 245
    79e4:	fc e3       	ldi	r31, 0x3C	; 60
    79e6:	0c 94 1b e7 	jmp	0x1ce36	; 0x1ce36 <__prologue_saves__+0x1c>
    79ea:	ec 01       	movw	r28, r24
    79ec:	8b 01       	movw	r16, r22
    79ee:	60 e0       	ldi	r22, 0x00	; 0
    79f0:	70 e0       	ldi	r23, 0x00	; 0
    79f2:	d1 db       	rcall	.-2142   	; 0x7196 <normalize>
    79f4:	80 e2       	ldi	r24, 0x20	; 32
    79f6:	f8 01       	movw	r30, r16
    79f8:	11 92       	st	Z+, r1
    79fa:	8a 95       	dec	r24
    79fc:	e9 f7       	brne	.-6      	; 0x79f8 <asctime_r+0x1a>
    79fe:	8a 85       	ldd	r24, Y+10	; 0x0a
    7a00:	9b 85       	ldd	r25, Y+11	; 0x0b
    7a02:	84 59       	subi	r24, 0x94	; 148
    7a04:	98 4f       	sbci	r25, 0xF8	; 248
    7a06:	ed b7       	in	r30, 0x3d	; 61
    7a08:	fe b7       	in	r31, 0x3e	; 62
    7a0a:	95 8b       	std	Z+21, r25	; 0x15
    7a0c:	84 8b       	std	Z+20, r24	; 0x14
    7a0e:	88 81       	ld	r24, Y
    7a10:	99 81       	ldd	r25, Y+1	; 0x01
    7a12:	93 8b       	std	Z+19, r25	; 0x13
    7a14:	82 8b       	std	Z+18, r24	; 0x12
    7a16:	8a 81       	ldd	r24, Y+2	; 0x02
    7a18:	9b 81       	ldd	r25, Y+3	; 0x03
    7a1a:	91 8b       	std	Z+17, r25	; 0x11
    7a1c:	80 8b       	std	Z+16, r24	; 0x10
    7a1e:	8c 81       	ldd	r24, Y+4	; 0x04
    7a20:	9d 81       	ldd	r25, Y+5	; 0x05
    7a22:	97 87       	std	Z+15, r25	; 0x0f
    7a24:	86 87       	std	Z+14, r24	; 0x0e
    7a26:	8e 81       	ldd	r24, Y+6	; 0x06
    7a28:	9f 81       	ldd	r25, Y+7	; 0x07
    7a2a:	95 87       	std	Z+13, r25	; 0x0d
    7a2c:	84 87       	std	Z+12, r24	; 0x0c
    7a2e:	e8 85       	ldd	r30, Y+8	; 0x08
    7a30:	f9 85       	ldd	r31, Y+9	; 0x09
    7a32:	ee 0f       	add	r30, r30
    7a34:	ff 1f       	adc	r31, r31
    7a36:	e5 5f       	subi	r30, 0xF5	; 245
    7a38:	fe 4f       	sbci	r31, 0xFE	; 254
    7a3a:	80 81       	ld	r24, Z
    7a3c:	91 81       	ldd	r25, Z+1	; 0x01
    7a3e:	ed b7       	in	r30, 0x3d	; 61
    7a40:	fe b7       	in	r31, 0x3e	; 62
    7a42:	93 87       	std	Z+11, r25	; 0x0b
    7a44:	82 87       	std	Z+10, r24	; 0x0a
    7a46:	ec 85       	ldd	r30, Y+12	; 0x0c
    7a48:	fd 85       	ldd	r31, Y+13	; 0x0d
    7a4a:	ee 0f       	add	r30, r30
    7a4c:	ff 1f       	adc	r31, r31
    7a4e:	eb 5d       	subi	r30, 0xDB	; 219
    7a50:	fe 4f       	sbci	r31, 0xFE	; 254
    7a52:	80 81       	ld	r24, Z
    7a54:	91 81       	ldd	r25, Z+1	; 0x01
    7a56:	ed b7       	in	r30, 0x3d	; 61
    7a58:	fe b7       	in	r31, 0x3e	; 62
    7a5a:	91 87       	std	Z+9, r25	; 0x09
    7a5c:	80 87       	std	Z+8, r24	; 0x08
    7a5e:	8c e4       	ldi	r24, 0x4C	; 76
    7a60:	97 e0       	ldi	r25, 0x07	; 7
    7a62:	a0 e0       	ldi	r26, 0x00	; 0
    7a64:	85 83       	std	Z+5, r24	; 0x05
    7a66:	96 83       	std	Z+6, r25	; 0x06
    7a68:	a7 83       	std	Z+7, r26	; 0x07
    7a6a:	80 e2       	ldi	r24, 0x20	; 32
    7a6c:	90 e0       	ldi	r25, 0x00	; 0
    7a6e:	94 83       	std	Z+4, r25	; 0x04
    7a70:	83 83       	std	Z+3, r24	; 0x03
    7a72:	12 83       	std	Z+2, r17	; 0x02
    7a74:	01 83       	std	Z+1, r16	; 0x01
    7a76:	0e 94 04 47 	call	0x8e08	; 0x8e08 <snprintf_P>
    7a7a:	c8 01       	movw	r24, r16
    7a7c:	cd b7       	in	r28, 0x3d	; 61
    7a7e:	de b7       	in	r29, 0x3e	; 62
    7a80:	65 96       	adiw	r28, 0x15	; 21
    7a82:	e4 e0       	ldi	r30, 0x04	; 4
    7a84:	0c 94 37 e7 	jmp	0x1ce6e	; 0x1ce6e <__epilogue_restores__+0x1c>

00007a88 <asctime>:
    7a88:	6e ef       	ldi	r22, 0xFE	; 254
    7a8a:	77 e1       	ldi	r23, 0x17	; 23
    7a8c:	a8 cf       	rjmp	.-176    	; 0x79de <asctime_r>
    7a8e:	08 95       	ret

00007a90 <ctime_gm>:
    7a90:	a6 e1       	ldi	r26, 0x16	; 22
    7a92:	b0 e0       	ldi	r27, 0x00	; 0
    7a94:	ee e4       	ldi	r30, 0x4E	; 78
    7a96:	fd e3       	ldi	r31, 0x3D	; 61
    7a98:	0c 94 1d e7 	jmp	0x1ce3a	; 0x1ce3a <__prologue_saves__+0x20>
    7a9c:	be 01       	movw	r22, r28
    7a9e:	6f 5f       	subi	r22, 0xFF	; 255
    7aa0:	7f 4f       	sbci	r23, 0xFF	; 255
    7aa2:	6d da       	rcall	.-2854   	; 0x6f7e <gmtime_r>
    7aa4:	6e ed       	ldi	r22, 0xDE	; 222
    7aa6:	77 e1       	ldi	r23, 0x17	; 23
    7aa8:	9a df       	rcall	.-204    	; 0x79de <asctime_r>
    7aaa:	66 96       	adiw	r28, 0x16	; 22
    7aac:	e2 e0       	ldi	r30, 0x02	; 2
    7aae:	0c 94 39 e7 	jmp	0x1ce72	; 0x1ce72 <__epilogue_restores__+0x20>

00007ab2 <initialize_clock>:
/// @param[in] minwest: your time zone as minute west
///@return  void
///@see: clock_settime()
MEMSPACE
void initialize_clock(int minwest)
{
    7ab2:	a5 e2       	ldi	r26, 0x25	; 37
    7ab4:	b0 e0       	ldi	r27, 0x00	; 0
    7ab6:	ef e5       	ldi	r30, 0x5F	; 95
    7ab8:	fd e3       	ldi	r31, 0x3D	; 61
    7aba:	0c 94 17 e7 	jmp	0x1ce2e	; 0x1ce2e <__prologue_saves__+0x14>
    7abe:	8c 01       	movw	r16, r24
    tm_t tc;
    ts_t ts;
    tz_t tz;

#ifdef RTC_SUPPORT
    if(!rtc_init(0,0L))
    7ac0:	40 e0       	ldi	r20, 0x00	; 0
    7ac2:	50 e0       	ldi	r21, 0x00	; 0
    7ac4:	ba 01       	movw	r22, r20
    7ac6:	80 e0       	ldi	r24, 0x00	; 0
    7ac8:	90 e0       	ldi	r25, 0x00	; 0
    7aca:	0e 94 13 31 	call	0x6226	; 0x6226 <rtc_init>
    7ace:	81 11       	cpse	r24, r1
    7ad0:	27 c0       	rjmp	.+78     	; 0x7b20 <initialize_clock+0x6e>
    {
        printf("rtc uninitilized\n");
    7ad2:	8b ea       	ldi	r24, 0xAB	; 171
    7ad4:	96 e0       	ldi	r25, 0x06	; 6
    7ad6:	a0 e0       	ldi	r26, 0x00	; 0
    7ad8:	ed b7       	in	r30, 0x3d	; 61
    7ada:	fe b7       	in	r31, 0x3e	; 62
    7adc:	81 83       	std	Z+1, r24	; 0x01
    7ade:	92 83       	std	Z+2, r25	; 0x02
    7ae0:	a3 83       	std	Z+3, r26	; 0x03
    7ae2:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
        printf("attempting rtc init\n");
    7ae6:	86 e9       	ldi	r24, 0x96	; 150
    7ae8:	96 e0       	ldi	r25, 0x06	; 6
    7aea:	a0 e0       	ldi	r26, 0x00	; 0
    7aec:	ed b7       	in	r30, 0x3d	; 61
    7aee:	fe b7       	in	r31, 0x3e	; 62
    7af0:	81 83       	std	Z+1, r24	; 0x01
    7af2:	92 83       	std	Z+2, r25	; 0x02
    7af4:	a3 83       	std	Z+3, r26	; 0x03
    7af6:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
        if( !rtc_init(1, (time_t) 0) )
    7afa:	40 e0       	ldi	r20, 0x00	; 0
    7afc:	50 e0       	ldi	r21, 0x00	; 0
    7afe:	ba 01       	movw	r22, r20
    7b00:	81 e0       	ldi	r24, 0x01	; 1
    7b02:	90 e0       	ldi	r25, 0x00	; 0
    7b04:	0e 94 13 31 	call	0x6226	; 0x6226 <rtc_init>
    7b08:	81 11       	cpse	r24, r1
    7b0a:	0a c0       	rjmp	.+20     	; 0x7b20 <initialize_clock+0x6e>
        {
            printf("rtc force init failed\n");
    7b0c:	8f e7       	ldi	r24, 0x7F	; 127
    7b0e:	96 e0       	ldi	r25, 0x06	; 6
    7b10:	a0 e0       	ldi	r26, 0x00	; 0
    7b12:	ed b7       	in	r30, 0x3d	; 61
    7b14:	fe b7       	in	r31, 0x3e	; 62
    7b16:	81 83       	std	Z+1, r24	; 0x01
    7b18:	92 83       	std	Z+2, r25	; 0x02
    7b1a:	a3 83       	std	Z+3, r26	; 0x03
    7b1c:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
        }
    }

    if(rtc_read(&tc))
    7b20:	ce 01       	movw	r24, r28
    7b22:	04 96       	adiw	r24, 0x04	; 4
    7b24:	0e 94 79 30 	call	0x60f2	; 0x60f2 <rtc_read>
    7b28:	88 23       	and	r24, r24
    7b2a:	51 f0       	breq	.+20     	; 0x7b40 <initialize_clock+0x8e>
    {
        seconds = timegm(&tc);
    7b2c:	ce 01       	movw	r24, r28
    7b2e:	04 96       	adiw	r24, 0x04	; 4
    7b30:	fa dc       	rcall	.-1548   	; 0x7526 <timegm>
    7b32:	6b 01       	movw	r12, r22
    7b34:	7c 01       	movw	r14, r24
    }
#else
    printf("NO RTC\n");
    seconds = 0;
#endif                                        // RTC_SUPPORT
    if(!seconds)
    7b36:	67 2b       	or	r22, r23
    7b38:	68 2b       	or	r22, r24
    7b3a:	69 2b       	or	r22, r25
    7b3c:	c1 f4       	brne	.+48     	; 0x7b6e <initialize_clock+0xbc>
    7b3e:	0a c0       	rjmp	.+20     	; 0x7b54 <initialize_clock+0xa2>
        seconds = timegm(&tc);
    }
    else
    {
        seconds = 0;
        printf("rtc read errorafter init\n");
    7b40:	85 e6       	ldi	r24, 0x65	; 101
    7b42:	96 e0       	ldi	r25, 0x06	; 6
    7b44:	a0 e0       	ldi	r26, 0x00	; 0
    7b46:	ed b7       	in	r30, 0x3d	; 61
    7b48:	fe b7       	in	r31, 0x3e	; 62
    7b4a:	81 83       	std	Z+1, r24	; 0x01
    7b4c:	92 83       	std	Z+2, r25	; 0x02
    7b4e:	a3 83       	std	Z+3, r26	; 0x03
    7b50:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
#else
    printf("NO RTC\n");
    seconds = 0;
#endif                                        // RTC_SUPPORT
    if(!seconds)
        printf("use setdate command to change time\n");
    7b54:	81 e4       	ldi	r24, 0x41	; 65
    7b56:	96 e0       	ldi	r25, 0x06	; 6
    7b58:	a0 e0       	ldi	r26, 0x00	; 0
    7b5a:	ed b7       	in	r30, 0x3d	; 61
    7b5c:	fe b7       	in	r31, 0x3e	; 62
    7b5e:	81 83       	std	Z+1, r24	; 0x01
    7b60:	92 83       	std	Z+2, r25	; 0x02
    7b62:	a3 83       	std	Z+3, r26	; 0x03
    7b64:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    7b68:	c1 2c       	mov	r12, r1
    7b6a:	d1 2c       	mov	r13, r1
    7b6c:	76 01       	movw	r14, r12
    tz.tz_minuteswest = minwest;
    7b6e:	1b a3       	std	Y+35, r17	; 0x23
    7b70:	0a a3       	std	Y+34, r16	; 0x22
    tz.tz_dsttime = 0;
    7b72:	1d a2       	std	Y+37, r1	; 0x25
    7b74:	1c a2       	std	Y+36, r1	; 0x24
    settimezone( &tz );
    7b76:	ce 01       	movw	r24, r28
    7b78:	82 96       	adiw	r24, 0x22	; 34
    7b7a:	30 da       	rcall	.-2976   	; 0x6fdc <settimezone>

    ts.tv_sec = seconds;
    7b7c:	ca 8e       	std	Y+26, r12	; 0x1a
    7b7e:	db 8e       	std	Y+27, r13	; 0x1b
    7b80:	ec 8e       	std	Y+28, r14	; 0x1c
    7b82:	fd 8e       	std	Y+29, r15	; 0x1d
    ts.tv_nsec = 0L;
    7b84:	1e 8e       	std	Y+30, r1	; 0x1e
    7b86:	1f 8e       	std	Y+31, r1	; 0x1f
    7b88:	18 a2       	std	Y+32, r1	; 0x20
    7b8a:	19 a2       	std	Y+33, r1	; 0x21
    clock_settime(0, (ts_t *) &ts);
    7b8c:	be 01       	movw	r22, r28
    7b8e:	66 5e       	subi	r22, 0xE6	; 230
    7b90:	7f 4f       	sbci	r23, 0xFF	; 255
    7b92:	80 e0       	ldi	r24, 0x00	; 0
    7b94:	90 e0       	ldi	r25, 0x00	; 0
    7b96:	c7 d8       	rcall	.-3698   	; 0x6d26 <clock_settime>
}
    7b98:	a5 96       	adiw	r28, 0x25	; 37
    7b9a:	e8 e0       	ldi	r30, 0x08	; 8
    7b9c:	0c 94 33 e7 	jmp	0x1ce66	; 0x1ce66 <__epilogue_restores__+0x14>

00007ba0 <display_clock>:
/// @see: rtc_read
/// @see: timegm()
/// @see: ascitime()
MEMSPACE
void display_clock()
{
    7ba0:	a9 e2       	ldi	r26, 0x29	; 41
    7ba2:	b0 e0       	ldi	r27, 0x00	; 0
    7ba4:	e6 ed       	ldi	r30, 0xD6	; 214
    7ba6:	fd e3       	ldi	r31, 0x3D	; 61
    7ba8:	0c 94 1d e7 	jmp	0x1ce3a	; 0x1ce3a <__prologue_saves__+0x20>
    time_t seconds;
    tm_t tc;
    ts_t ts;

#ifdef RTC_SUPPORT
    if(rtc_read(&tc))
    7bac:	ce 01       	movw	r24, r28
    7bae:	08 96       	adiw	r24, 0x08	; 8
    7bb0:	0e 94 79 30 	call	0x60f2	; 0x60f2 <rtc_read>
    7bb4:	88 23       	and	r24, r24
    7bb6:	29 f1       	breq	.+74     	; 0x7c02 <display_clock+0x62>
    {
        seconds = timegm(&tc);
    7bb8:	ce 01       	movw	r24, r28
    7bba:	08 96       	adiw	r24, 0x08	; 8
    7bbc:	b4 dc       	rcall	.-1688   	; 0x7526 <timegm>
    7bbe:	6e a3       	std	Y+38, r22	; 0x26
    7bc0:	7f a3       	std	Y+39, r23	; 0x27
    7bc2:	88 a7       	std	Y+40, r24	; 0x28
    7bc4:	99 a7       	std	Y+41, r25	; 0x29
        printf("rtc seconds: %lu\n",seconds);
    7bc6:	ed b7       	in	r30, 0x3d	; 61
    7bc8:	fe b7       	in	r31, 0x3e	; 62
    7bca:	64 83       	std	Z+4, r22	; 0x04
    7bcc:	75 83       	std	Z+5, r23	; 0x05
    7bce:	86 83       	std	Z+6, r24	; 0x06
    7bd0:	97 83       	std	Z+7, r25	; 0x07
    7bd2:	8f e2       	ldi	r24, 0x2F	; 47
    7bd4:	96 e0       	ldi	r25, 0x06	; 6
    7bd6:	a0 e0       	ldi	r26, 0x00	; 0
    7bd8:	81 83       	std	Z+1, r24	; 0x01
    7bda:	92 83       	std	Z+2, r25	; 0x02
    7bdc:	a3 83       	std	Z+3, r26	; 0x03
    7bde:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
        printf("rtc time:    %s\n",asctime(&tc));
    7be2:	ce 01       	movw	r24, r28
    7be4:	08 96       	adiw	r24, 0x08	; 8
    7be6:	50 df       	rcall	.-352    	; 0x7a88 <asctime>
    7be8:	ed b7       	in	r30, 0x3d	; 61
    7bea:	fe b7       	in	r31, 0x3e	; 62
    7bec:	95 83       	std	Z+5, r25	; 0x05
    7bee:	84 83       	std	Z+4, r24	; 0x04
    7bf0:	8e e1       	ldi	r24, 0x1E	; 30
    7bf2:	96 e0       	ldi	r25, 0x06	; 6
    7bf4:	a0 e0       	ldi	r26, 0x00	; 0
    7bf6:	81 83       	std	Z+1, r24	; 0x01
    7bf8:	92 83       	std	Z+2, r25	; 0x02
    7bfa:	a3 83       	std	Z+3, r26	; 0x03
    7bfc:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    7c00:	0a c0       	rjmp	.+20     	; 0x7c16 <display_clock+0x76>
            (int) tc.tm_wday);
#endif
    }
    else
    {
        printf("RTC read failed\n");
    7c02:	8d e0       	ldi	r24, 0x0D	; 13
    7c04:	96 e0       	ldi	r25, 0x06	; 6
    7c06:	a0 e0       	ldi	r26, 0x00	; 0
    7c08:	ed b7       	in	r30, 0x3d	; 61
    7c0a:	fe b7       	in	r31, 0x3e	; 62
    7c0c:	81 83       	std	Z+1, r24	; 0x01
    7c0e:	92 83       	std	Z+2, r25	; 0x02
    7c10:	a3 83       	std	Z+3, r26	; 0x03
    7c12:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    }
#endif                                        // RTC_SUPPORT

    clock_gettime(0, (ts_t *) &ts);
    7c16:	be 01       	movw	r22, r28
    7c18:	62 5e       	subi	r22, 0xE2	; 226
    7c1a:	7f 4f       	sbci	r23, 0xFF	; 255
    7c1c:	80 e0       	ldi	r24, 0x00	; 0
    7c1e:	90 e0       	ldi	r25, 0x00	; 0
    7c20:	0e 94 ea 33 	call	0x67d4	; 0x67d4 <clock_gettime>
    seconds = ts.tv_sec;
    7c24:	8e 8d       	ldd	r24, Y+30	; 0x1e
    7c26:	9f 8d       	ldd	r25, Y+31	; 0x1f
    7c28:	a8 a1       	ldd	r26, Y+32	; 0x20
    7c2a:	b9 a1       	ldd	r27, Y+33	; 0x21
    7c2c:	8e a3       	std	Y+38, r24	; 0x26
    7c2e:	9f a3       	std	Y+39, r25	; 0x27
    7c30:	a8 a7       	std	Y+40, r26	; 0x28
    7c32:	b9 a7       	std	Y+41, r27	; 0x29
    printf("clk seconds: %lu\n",seconds);
    7c34:	ed b7       	in	r30, 0x3d	; 61
    7c36:	fe b7       	in	r31, 0x3e	; 62
    7c38:	84 83       	std	Z+4, r24	; 0x04
    7c3a:	95 83       	std	Z+5, r25	; 0x05
    7c3c:	a6 83       	std	Z+6, r26	; 0x06
    7c3e:	b7 83       	std	Z+7, r27	; 0x07
    7c40:	8b ef       	ldi	r24, 0xFB	; 251
    7c42:	95 e0       	ldi	r25, 0x05	; 5
    7c44:	a0 e0       	ldi	r26, 0x00	; 0
    7c46:	81 83       	std	Z+1, r24	; 0x01
    7c48:	92 83       	std	Z+2, r25	; 0x02
    7c4a:	a3 83       	std	Z+3, r26	; 0x03
    7c4c:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    printf("clk time:    %s\n", asctime(gmtime(&seconds)));
    7c50:	ce 01       	movw	r24, r28
    7c52:	86 96       	adiw	r24, 0x26	; 38
    7c54:	a9 d9       	rcall	.-3246   	; 0x6fa8 <gmtime>
    7c56:	18 df       	rcall	.-464    	; 0x7a88 <asctime>
    7c58:	ed b7       	in	r30, 0x3d	; 61
    7c5a:	fe b7       	in	r31, 0x3e	; 62
    7c5c:	95 83       	std	Z+5, r25	; 0x05
    7c5e:	84 83       	std	Z+4, r24	; 0x04
    7c60:	8a ee       	ldi	r24, 0xEA	; 234
    7c62:	95 e0       	ldi	r25, 0x05	; 5
    7c64:	a0 e0       	ldi	r26, 0x00	; 0
    7c66:	81 83       	std	Z+1, r24	; 0x01
    7c68:	92 83       	std	Z+2, r25	; 0x02
    7c6a:	a3 83       	std	Z+3, r26	; 0x03
    7c6c:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
}
    7c70:	a9 96       	adiw	r28, 0x29	; 41
    7c72:	e2 e0       	ldi	r30, 0x02	; 2
    7c74:	0c 94 39 e7 	jmp	0x1ce72	; 0x1ce72 <__epilogue_restores__+0x20>

00007c78 <_putc_buffer_fn>:
    va_start(va, format);
    _printf_fn(&fn, format, va);
    va_end(va);

    return ((int)fn.sent);
}
    7c78:	fc 01       	movw	r30, r24
    7c7a:	84 81       	ldd	r24, Z+4	; 0x04
    7c7c:	95 81       	ldd	r25, Z+5	; 0x05
    7c7e:	00 97       	sbiw	r24, 0x00	; 0
    7c80:	79 f0       	breq	.+30     	; 0x7ca0 <_putc_buffer_fn+0x28>
    7c82:	66 23       	and	r22, r22
    7c84:	69 f0       	breq	.+26     	; 0x7ca0 <_putc_buffer_fn+0x28>
    7c86:	01 97       	sbiw	r24, 0x01	; 1
    7c88:	95 83       	std	Z+5, r25	; 0x05
    7c8a:	84 83       	std	Z+4, r24	; 0x04
    7c8c:	86 81       	ldd	r24, Z+6	; 0x06
    7c8e:	97 81       	ldd	r25, Z+7	; 0x07
    7c90:	01 96       	adiw	r24, 0x01	; 1
    7c92:	97 83       	std	Z+7, r25	; 0x07
    7c94:	86 83       	std	Z+6, r24	; 0x06
    7c96:	a2 81       	ldd	r26, Z+2	; 0x02
    7c98:	b3 81       	ldd	r27, Z+3	; 0x03
    7c9a:	6d 93       	st	X+, r22
    7c9c:	b3 83       	std	Z+3, r27	; 0x03
    7c9e:	a2 83       	std	Z+2, r26	; 0x02
    7ca0:	02 80       	ldd	r0, Z+2	; 0x02
    7ca2:	f3 81       	ldd	r31, Z+3	; 0x03
    7ca4:	e0 2d       	mov	r30, r0
    7ca6:	10 82       	st	Z, r1
    7ca8:	08 95       	ret

00007caa <_putc_fn>:
    7caa:	fc 01       	movw	r30, r24
    7cac:	26 81       	ldd	r18, Z+6	; 0x06
    7cae:	37 81       	ldd	r19, Z+7	; 0x07
    7cb0:	2f 5f       	subi	r18, 0xFF	; 255
    7cb2:	3f 4f       	sbci	r19, 0xFF	; 255
    7cb4:	37 83       	std	Z+7, r19	; 0x07
    7cb6:	26 83       	std	Z+6, r18	; 0x06
    7cb8:	86 2f       	mov	r24, r22
    7cba:	90 e0       	ldi	r25, 0x00	; 0
    7cbc:	0c 94 7d 76 	jmp	0xecfa	; 0xecfa <putchar>
    7cc0:	08 95       	ret

00007cc2 <bin2num>:
    7cc2:	a0 e0       	ldi	r26, 0x00	; 0
    7cc4:	b0 e0       	ldi	r27, 0x00	; 0
    7cc6:	e7 e6       	ldi	r30, 0x67	; 103
    7cc8:	fe e3       	ldi	r31, 0x3E	; 62
    7cca:	0c 94 14 e7 	jmp	0x1ce28	; 0x1ce28 <__prologue_saves__+0xe>
    7cce:	ea 01       	movw	r28, r20
    7cd0:	53 e0       	ldi	r21, 0x03	; 3
    7cd2:	ee 0c       	add	r14, r14
    7cd4:	ff 1c       	adc	r15, r15
    7cd6:	5a 95       	dec	r21
    7cd8:	e1 f7       	brne	.-8      	; 0x7cd2 <bin2num+0x10>
    7cda:	fc 01       	movw	r30, r24
    7cdc:	af 01       	movw	r20, r30
    7cde:	48 1b       	sub	r20, r24
    7ce0:	59 0b       	sbc	r21, r25
    7ce2:	c4 17       	cp	r28, r20
    7ce4:	d5 07       	cpc	r29, r21
    7ce6:	14 f0       	brlt	.+4      	; 0x7cec <bin2num+0x2a>
    7ce8:	11 92       	st	Z+, r1
    7cea:	f8 cf       	rjmp	.-16     	; 0x7cdc <bin2num+0x1a>
    7cec:	41 e0       	ldi	r20, 0x01	; 1
    7cee:	e4 1a       	sub	r14, r20
    7cf0:	f1 08       	sbc	r15, r1
    7cf2:	5b 01       	movw	r10, r22
    7cf4:	42 e0       	ldi	r20, 0x02	; 2
    7cf6:	a4 1a       	sub	r10, r20
    7cf8:	b1 08       	sbc	r11, r1
    7cfa:	f7 fc       	sbrc	r15, 7
    7cfc:	3b c0       	rjmp	.+118    	; 0x7d74 <bin2num+0xb2>
    7cfe:	f7 01       	movw	r30, r14
    7d00:	43 e0       	ldi	r20, 0x03	; 3
    7d02:	f5 95       	asr	r31
    7d04:	e7 95       	ror	r30
    7d06:	4a 95       	dec	r20
    7d08:	e1 f7       	brne	.-8      	; 0x7d02 <bin2num+0x40>
    7d0a:	e0 0f       	add	r30, r16
    7d0c:	f1 1f       	adc	r31, r17
    7d0e:	40 81       	ld	r20, Z
    7d10:	50 e0       	ldi	r21, 0x00	; 0
    7d12:	f7 01       	movw	r30, r14
    7d14:	e7 70       	andi	r30, 0x07	; 7
    7d16:	ff 27       	eor	r31, r31
    7d18:	02 c0       	rjmp	.+4      	; 0x7d1e <bin2num+0x5c>
    7d1a:	55 95       	asr	r21
    7d1c:	47 95       	ror	r20
    7d1e:	ea 95       	dec	r30
    7d20:	e2 f7       	brpl	.-8      	; 0x7d1a <bin2num+0x58>
    7d22:	41 70       	andi	r20, 0x01	; 1
    7d24:	55 27       	eor	r21, r21
    7d26:	dc 01       	movw	r26, r24
    7d28:	e0 e0       	ldi	r30, 0x00	; 0
    7d2a:	f0 e0       	ldi	r31, 0x00	; 0
    7d2c:	ec 17       	cp	r30, r28
    7d2e:	fd 07       	cpc	r31, r29
    7d30:	ec f4       	brge	.+58     	; 0x7d6c <bin2num+0xaa>
    7d32:	ea 15       	cp	r30, r10
    7d34:	fb 05       	cpc	r31, r11
    7d36:	4c f0       	brlt	.+18     	; 0x7d4a <bin2num+0x88>
    7d38:	dc 01       	movw	r26, r24
    7d3a:	ae 0f       	add	r26, r30
    7d3c:	bf 1f       	adc	r27, r31
    7d3e:	1c 92       	st	X, r1
    7d40:	41 e0       	ldi	r20, 0x01	; 1
    7d42:	e4 1a       	sub	r14, r20
    7d44:	f1 08       	sbc	r15, r1
    7d46:	ef 01       	movw	r28, r30
    7d48:	d8 cf       	rjmp	.-80     	; 0x7cfa <bin2num+0x38>
    7d4a:	9c 90       	ld	r9, X
    7d4c:	99 0c       	add	r9, r9
    7d4e:	94 2a       	or	r9, r20
    7d50:	49 2d       	mov	r20, r9
    7d52:	50 e0       	ldi	r21, 0x00	; 0
    7d54:	42 17       	cp	r20, r18
    7d56:	53 07       	cpc	r21, r19
    7d58:	24 f0       	brlt	.+8      	; 0x7d62 <bin2num+0xa0>
    7d5a:	92 1a       	sub	r9, r18
    7d5c:	41 e0       	ldi	r20, 0x01	; 1
    7d5e:	50 e0       	ldi	r21, 0x00	; 0
    7d60:	02 c0       	rjmp	.+4      	; 0x7d66 <bin2num+0xa4>
    7d62:	40 e0       	ldi	r20, 0x00	; 0
    7d64:	50 e0       	ldi	r21, 0x00	; 0
    7d66:	9d 92       	st	X+, r9
    7d68:	31 96       	adiw	r30, 0x01	; 1
    7d6a:	e0 cf       	rjmp	.-64     	; 0x7d2c <bin2num+0x6a>
    7d6c:	41 15       	cp	r20, r1
    7d6e:	51 05       	cpc	r21, r1
    7d70:	01 f7       	brne	.-64     	; 0x7d32 <bin2num+0x70>
    7d72:	e2 cf       	rjmp	.-60     	; 0x7d38 <bin2num+0x76>
    7d74:	fc 01       	movw	r30, r24
    7d76:	9f 01       	movw	r18, r30
    7d78:	28 1b       	sub	r18, r24
    7d7a:	39 0b       	sbc	r19, r25
    7d7c:	2c 17       	cp	r18, r28
    7d7e:	3d 07       	cpc	r19, r29
    7d80:	4c f4       	brge	.+18     	; 0x7d94 <bin2num+0xd2>
    7d82:	20 81       	ld	r18, Z
    7d84:	2a 30       	cpi	r18, 0x0A	; 10
    7d86:	10 f4       	brcc	.+4      	; 0x7d8c <bin2num+0xca>
    7d88:	20 5d       	subi	r18, 0xD0	; 208
    7d8a:	01 c0       	rjmp	.+2      	; 0x7d8e <bin2num+0xcc>
    7d8c:	29 5a       	subi	r18, 0xA9	; 169
    7d8e:	20 83       	st	Z, r18
    7d90:	31 96       	adiw	r30, 0x01	; 1
    7d92:	f1 cf       	rjmp	.-30     	; 0x7d76 <bin2num+0xb4>
    7d94:	9e 01       	movw	r18, r28
    7d96:	d7 ff       	sbrs	r29, 7
    7d98:	02 c0       	rjmp	.+4      	; 0x7d9e <bin2num+0xdc>
    7d9a:	20 e0       	ldi	r18, 0x00	; 0
    7d9c:	30 e0       	ldi	r19, 0x00	; 0
    7d9e:	c1 14       	cp	r12, r1
    7da0:	d1 04       	cpc	r13, r1
    7da2:	61 f0       	breq	.+24     	; 0x7dbc <bin2num+0xfa>
    7da4:	61 50       	subi	r22, 0x01	; 1
    7da6:	71 09       	sbc	r23, r1
    7da8:	26 17       	cp	r18, r22
    7daa:	37 07       	cpc	r19, r23
    7dac:	3c f4       	brge	.+14     	; 0x7dbc <bin2num+0xfa>
    7dae:	fc 01       	movw	r30, r24
    7db0:	e2 0f       	add	r30, r18
    7db2:	f3 1f       	adc	r31, r19
    7db4:	c0 82       	st	Z, r12
    7db6:	21 96       	adiw	r28, 0x01	; 1
    7db8:	2f 5f       	subi	r18, 0xFF	; 255
    7dba:	3f 4f       	sbci	r19, 0xFF	; 255
    7dbc:	fc 01       	movw	r30, r24
    7dbe:	e2 0f       	add	r30, r18
    7dc0:	f3 1f       	adc	r31, r19
    7dc2:	10 82       	st	Z, r1
    7dc4:	0e 94 a1 31 	call	0x6342	; 0x6342 <reverse>
    7dc8:	ce 01       	movw	r24, r28
    7dca:	cd b7       	in	r28, 0x3d	; 61
    7dcc:	de b7       	in	r29, 0x3e	; 62
    7dce:	eb e0       	ldi	r30, 0x0B	; 11
    7dd0:	0c 94 30 e7 	jmp	0x1ce60	; 0x1ce60 <__epilogue_restores__+0xe>

00007dd4 <pch>:
    7dd4:	fc 01       	movw	r30, r24
    7dd6:	22 81       	ldd	r18, Z+2	; 0x02
    7dd8:	33 81       	ldd	r19, Z+3	; 0x03
    7dda:	44 81       	ldd	r20, Z+4	; 0x04
    7ddc:	55 81       	ldd	r21, Z+5	; 0x05
    7dde:	80 81       	ld	r24, Z
    7de0:	91 81       	ldd	r25, Z+1	; 0x01
    7de2:	24 17       	cp	r18, r20
    7de4:	35 07       	cpc	r19, r21
    7de6:	54 f4       	brge	.+20     	; 0x7dfc <pch+0x28>
    7de8:	a9 01       	movw	r20, r18
    7dea:	4f 5f       	subi	r20, 0xFF	; 255
    7dec:	5f 4f       	sbci	r21, 0xFF	; 255
    7dee:	53 83       	std	Z+3, r21	; 0x03
    7df0:	42 83       	std	Z+2, r20	; 0x02
    7df2:	dc 01       	movw	r26, r24
    7df4:	a2 0f       	add	r26, r18
    7df6:	b3 1f       	adc	r27, r19
    7df8:	6c 93       	st	X, r22
    7dfa:	04 c0       	rjmp	.+8      	; 0x7e04 <pch+0x30>
    7dfc:	dc 01       	movw	r26, r24
    7dfe:	a2 0f       	add	r26, r18
    7e00:	b3 1f       	adc	r27, r19
    7e02:	1c 92       	st	X, r1
    7e04:	82 81       	ldd	r24, Z+2	; 0x02
    7e06:	93 81       	ldd	r25, Z+3	; 0x03
    7e08:	08 95       	ret

00007e0a <p_ntoa>:
    7e0a:	af 92       	push	r10
    7e0c:	cf 92       	push	r12
    7e0e:	df 92       	push	r13
    7e10:	ef 92       	push	r14
    7e12:	ff 92       	push	r15
    7e14:	0f 93       	push	r16
    7e16:	1f 93       	push	r17
    7e18:	cf 93       	push	r28
    7e1a:	df 93       	push	r29
    7e1c:	dc 01       	movw	r26, r24
    7e1e:	eb 01       	movw	r28, r22
    7e20:	fa 01       	movw	r30, r20
    7e22:	b9 01       	movw	r22, r18
    7e24:	98 01       	movw	r18, r16
    7e26:	a6 01       	movw	r20, r12
    7e28:	9a 2d       	mov	r25, r10
    7e2a:	a5 fa       	bst	r10, 5
    7e2c:	cc 24       	eor	r12, r12
    7e2e:	c0 f8       	bld	r12, 0
    7e30:	a6 fc       	sbrc	r10, 6
    7e32:	07 c0       	rjmp	.+14     	; 0x7e42 <p_ntoa+0x38>
    7e34:	a2 fc       	sbrc	r10, 2
    7e36:	08 c0       	rjmp	.+16     	; 0x7e48 <p_ntoa+0x3e>
    7e38:	a4 fe       	sbrs	r10, 4
    7e3a:	09 c0       	rjmp	.+18     	; 0x7e4e <p_ntoa+0x44>
    7e3c:	00 e2       	ldi	r16, 0x20	; 32
    7e3e:	10 e0       	ldi	r17, 0x00	; 0
    7e40:	08 c0       	rjmp	.+16     	; 0x7e52 <p_ntoa+0x48>
    7e42:	0d e2       	ldi	r16, 0x2D	; 45
    7e44:	10 e0       	ldi	r17, 0x00	; 0
    7e46:	05 c0       	rjmp	.+10     	; 0x7e52 <p_ntoa+0x48>
    7e48:	0b e2       	ldi	r16, 0x2B	; 43
    7e4a:	10 e0       	ldi	r17, 0x00	; 0
    7e4c:	02 c0       	rjmp	.+4      	; 0x7e52 <p_ntoa+0x48>
    7e4e:	00 e0       	ldi	r16, 0x00	; 0
    7e50:	10 e0       	ldi	r17, 0x00	; 0
    7e52:	95 ff       	sbrs	r25, 5
    7e54:	04 c0       	rjmp	.+8      	; 0x7e5e <p_ntoa+0x54>
    7e56:	89 2f       	mov	r24, r25
    7e58:	8a 70       	andi	r24, 0x0A	; 10
    7e5a:	09 f0       	breq	.+2      	; 0x7e5e <p_ntoa+0x54>
    7e5c:	c1 2c       	mov	r12, r1
    7e5e:	c0 fa       	bst	r12, 0
    7e60:	95 f9       	bld	r25, 5
    7e62:	89 2f       	mov	r24, r25
    7e64:	82 70       	andi	r24, 0x02	; 2
    7e66:	c8 2e       	mov	r12, r24
    7e68:	91 fd       	sbrc	r25, 1
    7e6a:	02 c0       	rjmp	.+4      	; 0x7e70 <p_ntoa+0x66>
    7e6c:	40 e0       	ldi	r20, 0x00	; 0
    7e6e:	50 e0       	ldi	r21, 0x00	; 0
    7e70:	89 2f       	mov	r24, r25
    7e72:	83 70       	andi	r24, 0x03	; 3
    7e74:	11 f4       	brne	.+4      	; 0x7e7a <p_ntoa+0x70>
    7e76:	41 e0       	ldi	r20, 0x01	; 1
    7e78:	50 e0       	ldi	r21, 0x00	; 0
    7e7a:	90 ff       	sbrs	r25, 0
    7e7c:	0c c0       	rjmp	.+24     	; 0x7e96 <p_ntoa+0x8c>
    7e7e:	95 fd       	sbrc	r25, 5
    7e80:	05 c0       	rjmp	.+10     	; 0x7e8c <p_ntoa+0x82>
    7e82:	c1 10       	cpse	r12, r1
    7e84:	08 c0       	rjmp	.+16     	; 0x7e96 <p_ntoa+0x8c>
    7e86:	41 e0       	ldi	r20, 0x01	; 1
    7e88:	50 e0       	ldi	r21, 0x00	; 0
    7e8a:	05 c0       	rjmp	.+10     	; 0x7e96 <p_ntoa+0x8c>
    7e8c:	94 75       	andi	r25, 0x54	; 84
    7e8e:	a7 01       	movw	r20, r14
    7e90:	11 f0       	breq	.+4      	; 0x7e96 <p_ntoa+0x8c>
    7e92:	41 50       	subi	r20, 0x01	; 1
    7e94:	51 09       	sbc	r21, r1
    7e96:	68 01       	movw	r12, r16
    7e98:	7e 01       	movw	r14, r28
    7e9a:	8d 01       	movw	r16, r26
    7e9c:	cf 01       	movw	r24, r30
    7e9e:	11 df       	rcall	.-478    	; 0x7cc2 <bin2num>
    7ea0:	df 91       	pop	r29
    7ea2:	cf 91       	pop	r28
    7ea4:	1f 91       	pop	r17
    7ea6:	0f 91       	pop	r16
    7ea8:	ff 90       	pop	r15
    7eaa:	ef 90       	pop	r14
    7eac:	df 90       	pop	r13
    7eae:	cf 90       	pop	r12
    7eb0:	af 90       	pop	r10
    7eb2:	08 95       	ret

00007eb4 <p_ftoa>:
    7eb4:	aa e0       	ldi	r26, 0x0A	; 10
    7eb6:	b0 e0       	ldi	r27, 0x00	; 0
    7eb8:	e0 e6       	ldi	r30, 0x60	; 96
    7eba:	ff e3       	ldi	r31, 0x3F	; 63
    7ebc:	0c 94 0d e7 	jmp	0x1ce1a	; 0x1ce1a <__prologue_saves__>
    7ec0:	4b 01       	movw	r8, r22
    7ec2:	5c 01       	movw	r10, r24
    7ec4:	1a 01       	movw	r2, r20
    7ec6:	28 01       	movw	r4, r16
    7ec8:	c6 fa       	bst	r12, 6
    7eca:	11 27       	eor	r17, r17
    7ecc:	10 f9       	bld	r17, 0
    7ece:	5a 83       	std	Y+2, r21	; 0x02
    7ed0:	49 83       	std	Y+1, r20	; 0x01
    7ed2:	1c 82       	std	Y+4, r1	; 0x04
    7ed4:	1b 82       	std	Y+3, r1	; 0x03
    7ed6:	21 50       	subi	r18, 0x01	; 1
    7ed8:	31 09       	sbc	r19, r1
    7eda:	3e 83       	std	Y+6, r19	; 0x06
    7edc:	2d 83       	std	Y+5, r18	; 0x05
    7ede:	fa 01       	movw	r30, r20
    7ee0:	10 82       	st	Z, r1
    7ee2:	20 e0       	ldi	r18, 0x00	; 0
    7ee4:	30 e0       	ldi	r19, 0x00	; 0
    7ee6:	a9 01       	movw	r20, r18
    7ee8:	0e 94 cb e7 	call	0x1cf96	; 0x1cf96 <__cmpsf2>
    7eec:	87 ff       	sbrs	r24, 7
    7eee:	05 c0       	rjmp	.+10     	; 0x7efa <p_ftoa+0x46>
    7ef0:	b7 fa       	bst	r11, 7
    7ef2:	b0 94       	com	r11
    7ef4:	b7 f8       	bld	r11, 7
    7ef6:	b0 94       	com	r11
    7ef8:	11 e0       	ldi	r17, 0x01	; 1
    7efa:	10 fb       	bst	r17, 0
    7efc:	c6 f8       	bld	r12, 6
    7efe:	c6 fe       	sbrs	r12, 6
    7f00:	02 c0       	rjmp	.+4      	; 0x7f06 <p_ftoa+0x52>
    7f02:	6d e2       	ldi	r22, 0x2D	; 45
    7f04:	07 c0       	rjmp	.+14     	; 0x7f14 <p_ftoa+0x60>
    7f06:	c2 fe       	sbrs	r12, 2
    7f08:	02 c0       	rjmp	.+4      	; 0x7f0e <p_ftoa+0x5a>
    7f0a:	6b e2       	ldi	r22, 0x2B	; 43
    7f0c:	03 c0       	rjmp	.+6      	; 0x7f14 <p_ftoa+0x60>
    7f0e:	c4 fe       	sbrs	r12, 4
    7f10:	04 c0       	rjmp	.+8      	; 0x7f1a <p_ftoa+0x66>
    7f12:	60 e2       	ldi	r22, 0x20	; 32
    7f14:	ce 01       	movw	r24, r28
    7f16:	01 96       	adiw	r24, 0x01	; 1
    7f18:	5d df       	rcall	.-326    	; 0x7dd4 <pch>
    7f1a:	37 01       	movw	r6, r14
    7f1c:	f7 fe       	sbrs	r15, 7
    7f1e:	02 c0       	rjmp	.+4      	; 0x7f24 <p_ftoa+0x70>
    7f20:	61 2c       	mov	r6, r1
    7f22:	71 2c       	mov	r7, r1
    7f24:	20 e0       	ldi	r18, 0x00	; 0
    7f26:	30 e0       	ldi	r19, 0x00	; 0
    7f28:	a9 01       	movw	r20, r18
    7f2a:	c5 01       	movw	r24, r10
    7f2c:	b4 01       	movw	r22, r8
    7f2e:	0e 94 cb e7 	call	0x1cf96	; 0x1cf96 <__cmpsf2>
    7f32:	88 23       	and	r24, r24
    7f34:	d1 f1       	breq	.+116    	; 0x7faa <p_ftoa+0xf6>
    7f36:	c1 fe       	sbrs	r12, 1
    7f38:	11 c0       	rjmp	.+34     	; 0x7f5c <p_ftoa+0xa8>
    7f3a:	83 01       	movw	r16, r6
    7f3c:	60 e0       	ldi	r22, 0x00	; 0
    7f3e:	70 e0       	ldi	r23, 0x00	; 0
    7f40:	80 e0       	ldi	r24, 0x00	; 0
    7f42:	9f e3       	ldi	r25, 0x3F	; 63
    7f44:	01 15       	cp	r16, r1
    7f46:	11 05       	cpc	r17, r1
    7f48:	69 f0       	breq	.+26     	; 0x7f64 <p_ftoa+0xb0>
    7f4a:	20 e0       	ldi	r18, 0x00	; 0
    7f4c:	30 e0       	ldi	r19, 0x00	; 0
    7f4e:	40 e2       	ldi	r20, 0x20	; 32
    7f50:	51 e4       	ldi	r21, 0x41	; 65
    7f52:	0e 94 cf e7 	call	0x1cf9e	; 0x1cf9e <__divsf3>
    7f56:	01 50       	subi	r16, 0x01	; 1
    7f58:	11 09       	sbc	r17, r1
    7f5a:	f4 cf       	rjmp	.-24     	; 0x7f44 <p_ftoa+0x90>
    7f5c:	60 e0       	ldi	r22, 0x00	; 0
    7f5e:	70 e0       	ldi	r23, 0x00	; 0
    7f60:	80 e0       	ldi	r24, 0x00	; 0
    7f62:	9f e3       	ldi	r25, 0x3F	; 63
    7f64:	9b 01       	movw	r18, r22
    7f66:	ac 01       	movw	r20, r24
    7f68:	c5 01       	movw	r24, r10
    7f6a:	b4 01       	movw	r22, r8
    7f6c:	0e 94 67 e7 	call	0x1cece	; 0x1cece <__addsf3>
    7f70:	4b 01       	movw	r8, r22
    7f72:	5c 01       	movw	r10, r24
    7f74:	ee 24       	eor	r14, r14
    7f76:	e3 94       	inc	r14
    7f78:	f1 2c       	mov	r15, r1
    7f7a:	20 e0       	ldi	r18, 0x00	; 0
    7f7c:	30 e0       	ldi	r19, 0x00	; 0
    7f7e:	40 e2       	ldi	r20, 0x20	; 32
    7f80:	51 e4       	ldi	r21, 0x41	; 65
    7f82:	c5 01       	movw	r24, r10
    7f84:	b4 01       	movw	r22, r8
    7f86:	0e 94 1a e9 	call	0x1d234	; 0x1d234 <__gesf2>
    7f8a:	87 fd       	sbrc	r24, 7
    7f8c:	11 c0       	rjmp	.+34     	; 0x7fb0 <p_ftoa+0xfc>
    7f8e:	ff ef       	ldi	r31, 0xFF	; 255
    7f90:	ef 1a       	sub	r14, r31
    7f92:	ff 0a       	sbc	r15, r31
    7f94:	20 e0       	ldi	r18, 0x00	; 0
    7f96:	30 e0       	ldi	r19, 0x00	; 0
    7f98:	40 e2       	ldi	r20, 0x20	; 32
    7f9a:	51 e4       	ldi	r21, 0x41	; 65
    7f9c:	c5 01       	movw	r24, r10
    7f9e:	b4 01       	movw	r22, r8
    7fa0:	0e 94 cf e7 	call	0x1cf9e	; 0x1cf9e <__divsf3>
    7fa4:	4b 01       	movw	r8, r22
    7fa6:	5c 01       	movw	r10, r24
    7fa8:	e8 cf       	rjmp	.-48     	; 0x7f7a <p_ftoa+0xc6>
    7faa:	ee 24       	eor	r14, r14
    7fac:	e3 94       	inc	r14
    7fae:	f1 2c       	mov	r15, r1
    7fb0:	8c 2d       	mov	r24, r12
    7fb2:	88 72       	andi	r24, 0x28	; 40
    7fb4:	80 32       	cpi	r24, 0x20	; 32
    7fb6:	c1 f4       	brne	.+48     	; 0x7fe8 <p_ftoa+0x134>
    7fb8:	82 01       	movw	r16, r4
    7fba:	0e 19       	sub	r16, r14
    7fbc:	1f 09       	sbc	r17, r15
    7fbe:	8b 81       	ldd	r24, Y+3	; 0x03
    7fc0:	9c 81       	ldd	r25, Y+4	; 0x04
    7fc2:	08 1b       	sub	r16, r24
    7fc4:	19 0b       	sbc	r17, r25
    7fc6:	c1 fe       	sbrs	r12, 1
    7fc8:	07 c0       	rjmp	.+14     	; 0x7fd8 <p_ftoa+0x124>
    7fca:	61 14       	cp	r6, r1
    7fcc:	71 04       	cpc	r7, r1
    7fce:	21 f0       	breq	.+8      	; 0x7fd8 <p_ftoa+0x124>
    7fd0:	06 19       	sub	r16, r6
    7fd2:	17 09       	sbc	r17, r7
    7fd4:	01 50       	subi	r16, 0x01	; 1
    7fd6:	11 09       	sbc	r17, r1
    7fd8:	10 16       	cp	r1, r16
    7fda:	11 06       	cpc	r1, r17
    7fdc:	2c f4       	brge	.+10     	; 0x7fe8 <p_ftoa+0x134>
    7fde:	60 e3       	ldi	r22, 0x30	; 48
    7fe0:	ce 01       	movw	r24, r28
    7fe2:	01 96       	adiw	r24, 0x01	; 1
    7fe4:	f7 de       	rcall	.-530    	; 0x7dd4 <pch>
    7fe6:	f6 cf       	rjmp	.-20     	; 0x7fd4 <p_ftoa+0x120>
    7fe8:	c5 01       	movw	r24, r10
    7fea:	b4 01       	movw	r22, r8
    7fec:	0e 94 37 e8 	call	0x1d06e	; 0x1d06e <__fixsfsi>
    7ff0:	6f 83       	std	Y+7, r22	; 0x07
    7ff2:	78 87       	std	Y+8, r23	; 0x08
    7ff4:	89 87       	std	Y+9, r24	; 0x09
    7ff6:	9a 87       	std	Y+10, r25	; 0x0a
    7ff8:	6f 81       	ldd	r22, Y+7	; 0x07
    7ffa:	60 5d       	subi	r22, 0xD0	; 208
    7ffc:	ce 01       	movw	r24, r28
    7ffe:	01 96       	adiw	r24, 0x01	; 1
    8000:	e9 de       	rcall	.-558    	; 0x7dd4 <pch>
    8002:	2f 81       	ldd	r18, Y+7	; 0x07
    8004:	38 85       	ldd	r19, Y+8	; 0x08
    8006:	b9 01       	movw	r22, r18
    8008:	33 0f       	add	r19, r19
    800a:	88 0b       	sbc	r24, r24
    800c:	99 0b       	sbc	r25, r25
    800e:	0e 94 6a e8 	call	0x1d0d4	; 0x1d0d4 <__floatsisf>
    8012:	9b 01       	movw	r18, r22
    8014:	ac 01       	movw	r20, r24
    8016:	c5 01       	movw	r24, r10
    8018:	b4 01       	movw	r22, r8
    801a:	0e 94 66 e7 	call	0x1cecc	; 0x1cecc <__subsf3>
    801e:	31 e0       	ldi	r19, 0x01	; 1
    8020:	e3 1a       	sub	r14, r19
    8022:	f1 08       	sbc	r15, r1
    8024:	20 e0       	ldi	r18, 0x00	; 0
    8026:	30 e0       	ldi	r19, 0x00	; 0
    8028:	40 e2       	ldi	r20, 0x20	; 32
    802a:	51 e4       	ldi	r21, 0x41	; 65
    802c:	0e 94 1e e9 	call	0x1d23c	; 0x1d23c <__mulsf3>
    8030:	4b 01       	movw	r8, r22
    8032:	5c 01       	movw	r10, r24
    8034:	e1 14       	cp	r14, r1
    8036:	f1 04       	cpc	r15, r1
    8038:	b9 f6       	brne	.-82     	; 0x7fe8 <p_ftoa+0x134>
    803a:	c1 fc       	sbrc	r12, 1
    803c:	10 c0       	rjmp	.+32     	; 0x805e <p_ftoa+0x1aa>
    803e:	60 e0       	ldi	r22, 0x00	; 0
    8040:	ce 01       	movw	r24, r28
    8042:	01 96       	adiw	r24, 0x01	; 1
    8044:	c7 de       	rcall	.-626    	; 0x7dd4 <pch>
    8046:	f1 01       	movw	r30, r2
    8048:	01 90       	ld	r0, Z+
    804a:	00 20       	and	r0, r0
    804c:	e9 f7       	brne	.-6      	; 0x8048 <p_ftoa+0x194>
    804e:	31 97       	sbiw	r30, 0x01	; 1
    8050:	cf 01       	movw	r24, r30
    8052:	82 19       	sub	r24, r2
    8054:	93 09       	sbc	r25, r3
    8056:	2a 96       	adiw	r28, 0x0a	; 10
    8058:	e2 e1       	ldi	r30, 0x12	; 18
    805a:	0c 94 29 e7 	jmp	0x1ce52	; 0x1ce52 <__epilogue_restores__>
    805e:	61 14       	cp	r6, r1
    8060:	71 04       	cpc	r7, r1
    8062:	69 f3       	breq	.-38     	; 0x803e <p_ftoa+0x18a>
    8064:	6e e2       	ldi	r22, 0x2E	; 46
    8066:	ce 01       	movw	r24, r28
    8068:	01 96       	adiw	r24, 0x01	; 1
    806a:	b4 de       	rcall	.-664    	; 0x7dd4 <pch>
    806c:	c5 01       	movw	r24, r10
    806e:	b4 01       	movw	r22, r8
    8070:	0e 94 37 e8 	call	0x1d06e	; 0x1d06e <__fixsfsi>
    8074:	6b 01       	movw	r12, r22
    8076:	7c 01       	movw	r14, r24
    8078:	07 2e       	mov	r0, r23
    807a:	00 0c       	add	r0, r0
    807c:	88 0b       	sbc	r24, r24
    807e:	99 0b       	sbc	r25, r25
    8080:	0e 94 6a e8 	call	0x1d0d4	; 0x1d0d4 <__floatsisf>
    8084:	9b 01       	movw	r18, r22
    8086:	ac 01       	movw	r20, r24
    8088:	c5 01       	movw	r24, r10
    808a:	b4 01       	movw	r22, r8
    808c:	0e 94 66 e7 	call	0x1cecc	; 0x1cecc <__subsf3>
    8090:	4b 01       	movw	r8, r22
    8092:	5c 01       	movw	r10, r24
    8094:	b6 01       	movw	r22, r12
    8096:	60 5d       	subi	r22, 0xD0	; 208
    8098:	7f 4f       	sbci	r23, 0xFF	; 255
    809a:	ce 01       	movw	r24, r28
    809c:	01 96       	adiw	r24, 0x01	; 1
    809e:	9a de       	rcall	.-716    	; 0x7dd4 <pch>
    80a0:	81 e0       	ldi	r24, 0x01	; 1
    80a2:	68 1a       	sub	r6, r24
    80a4:	71 08       	sbc	r7, r1
    80a6:	20 e0       	ldi	r18, 0x00	; 0
    80a8:	30 e0       	ldi	r19, 0x00	; 0
    80aa:	40 e2       	ldi	r20, 0x20	; 32
    80ac:	51 e4       	ldi	r21, 0x41	; 65
    80ae:	c5 01       	movw	r24, r10
    80b0:	b4 01       	movw	r22, r8
    80b2:	0e 94 1e e9 	call	0x1d23c	; 0x1d23c <__mulsf3>
    80b6:	4b 01       	movw	r8, r22
    80b8:	5c 01       	movw	r10, r24
    80ba:	61 14       	cp	r6, r1
    80bc:	71 04       	cpc	r7, r1
    80be:	b1 f6       	brne	.-84     	; 0x806c <p_ftoa+0x1b8>
    80c0:	be cf       	rjmp	.-132    	; 0x803e <p_ftoa+0x18a>

000080c2 <p_etoa>:
    80c2:	a3 e1       	ldi	r26, 0x13	; 19
    80c4:	b0 e0       	ldi	r27, 0x00	; 0
    80c6:	e7 e6       	ldi	r30, 0x67	; 103
    80c8:	f0 e4       	ldi	r31, 0x40	; 64
    80ca:	0c 94 0d e7 	jmp	0x1ce1a	; 0x1ce1a <__prologue_saves__>
    80ce:	4b 01       	movw	r8, r22
    80d0:	5c 01       	movw	r10, r24
    80d2:	59 8b       	std	Y+17, r21	; 0x11
    80d4:	48 8b       	std	Y+16, r20	; 0x10
    80d6:	1b 8b       	std	Y+19, r17	; 0x13
    80d8:	0a 8b       	std	Y+18, r16	; 0x12
    80da:	3c 2c       	mov	r3, r12
    80dc:	c6 fa       	bst	r12, 6
    80de:	11 27       	eor	r17, r17
    80e0:	10 f9       	bld	r17, 0
    80e2:	59 87       	std	Y+9, r21	; 0x09
    80e4:	48 87       	std	Y+8, r20	; 0x08
    80e6:	1b 86       	std	Y+11, r1	; 0x0b
    80e8:	1a 86       	std	Y+10, r1	; 0x0a
    80ea:	21 50       	subi	r18, 0x01	; 1
    80ec:	31 09       	sbc	r19, r1
    80ee:	3d 87       	std	Y+13, r19	; 0x0d
    80f0:	2c 87       	std	Y+12, r18	; 0x0c
    80f2:	fa 01       	movw	r30, r20
    80f4:	10 82       	st	Z, r1
    80f6:	20 e0       	ldi	r18, 0x00	; 0
    80f8:	30 e0       	ldi	r19, 0x00	; 0
    80fa:	a9 01       	movw	r20, r18
    80fc:	0e 94 cb e7 	call	0x1cf96	; 0x1cf96 <__cmpsf2>
    8100:	87 ff       	sbrs	r24, 7
    8102:	05 c0       	rjmp	.+10     	; 0x810e <p_etoa+0x4c>
    8104:	b7 fa       	bst	r11, 7
    8106:	b0 94       	com	r11
    8108:	b7 f8       	bld	r11, 7
    810a:	b0 94       	com	r11
    810c:	11 e0       	ldi	r17, 0x01	; 1
    810e:	10 fb       	bst	r17, 0
    8110:	36 f8       	bld	r3, 6
    8112:	36 fe       	sbrs	r3, 6
    8114:	02 c0       	rjmp	.+4      	; 0x811a <p_etoa+0x58>
    8116:	6d e2       	ldi	r22, 0x2D	; 45
    8118:	07 c0       	rjmp	.+14     	; 0x8128 <p_etoa+0x66>
    811a:	32 fe       	sbrs	r3, 2
    811c:	02 c0       	rjmp	.+4      	; 0x8122 <p_etoa+0x60>
    811e:	6b e2       	ldi	r22, 0x2B	; 43
    8120:	03 c0       	rjmp	.+6      	; 0x8128 <p_etoa+0x66>
    8122:	34 fe       	sbrs	r3, 4
    8124:	04 c0       	rjmp	.+8      	; 0x812e <p_etoa+0x6c>
    8126:	60 e2       	ldi	r22, 0x20	; 32
    8128:	ce 01       	movw	r24, r28
    812a:	08 96       	adiw	r24, 0x08	; 8
    812c:	53 de       	rcall	.-858    	; 0x7dd4 <pch>
    812e:	37 01       	movw	r6, r14
    8130:	f7 fe       	sbrs	r15, 7
    8132:	02 c0       	rjmp	.+4      	; 0x8138 <p_etoa+0x76>
    8134:	61 2c       	mov	r6, r1
    8136:	71 2c       	mov	r7, r1
    8138:	1f 86       	std	Y+15, r1	; 0x0f
    813a:	1e 86       	std	Y+14, r1	; 0x0e
    813c:	20 e0       	ldi	r18, 0x00	; 0
    813e:	30 e0       	ldi	r19, 0x00	; 0
    8140:	a9 01       	movw	r20, r18
    8142:	c5 01       	movw	r24, r10
    8144:	b4 01       	movw	r22, r8
    8146:	0e 94 cb e7 	call	0x1cf96	; 0x1cf96 <__cmpsf2>
    814a:	f3 2d       	mov	r31, r3
    814c:	f2 70       	andi	r31, 0x02	; 2
    814e:	2f 2e       	mov	r2, r31
    8150:	88 23       	and	r24, r24
    8152:	09 f4       	brne	.+2      	; 0x8156 <p_etoa+0x94>
    8154:	70 c0       	rjmp	.+224    	; 0x8236 <p_etoa+0x174>
    8156:	ff 23       	and	r31, r31
    8158:	b1 f0       	breq	.+44     	; 0x8186 <p_etoa+0xc4>
    815a:	83 01       	movw	r16, r6
    815c:	c1 2c       	mov	r12, r1
    815e:	d1 2c       	mov	r13, r1
    8160:	e1 2c       	mov	r14, r1
    8162:	2f e3       	ldi	r18, 0x3F	; 63
    8164:	f2 2e       	mov	r15, r18
    8166:	01 15       	cp	r16, r1
    8168:	11 05       	cpc	r17, r1
    816a:	91 f0       	breq	.+36     	; 0x8190 <p_etoa+0xce>
    816c:	20 e0       	ldi	r18, 0x00	; 0
    816e:	30 e0       	ldi	r19, 0x00	; 0
    8170:	40 e2       	ldi	r20, 0x20	; 32
    8172:	51 e4       	ldi	r21, 0x41	; 65
    8174:	c7 01       	movw	r24, r14
    8176:	b6 01       	movw	r22, r12
    8178:	0e 94 cf e7 	call	0x1cf9e	; 0x1cf9e <__divsf3>
    817c:	6b 01       	movw	r12, r22
    817e:	7c 01       	movw	r14, r24
    8180:	01 50       	subi	r16, 0x01	; 1
    8182:	11 09       	sbc	r17, r1
    8184:	f0 cf       	rjmp	.-32     	; 0x8166 <p_etoa+0xa4>
    8186:	c1 2c       	mov	r12, r1
    8188:	d1 2c       	mov	r13, r1
    818a:	e1 2c       	mov	r14, r1
    818c:	9f e3       	ldi	r25, 0x3F	; 63
    818e:	f9 2e       	mov	r15, r25
    8190:	41 2c       	mov	r4, r1
    8192:	51 2c       	mov	r5, r1
    8194:	82 01       	movw	r16, r4
    8196:	01 50       	subi	r16, 0x01	; 1
    8198:	11 09       	sbc	r17, r1
    819a:	20 e0       	ldi	r18, 0x00	; 0
    819c:	30 e0       	ldi	r19, 0x00	; 0
    819e:	40 e8       	ldi	r20, 0x80	; 128
    81a0:	5f e3       	ldi	r21, 0x3F	; 63
    81a2:	c5 01       	movw	r24, r10
    81a4:	b4 01       	movw	r22, r8
    81a6:	0e 94 cb e7 	call	0x1cf96	; 0x1cf96 <__cmpsf2>
    81aa:	87 ff       	sbrs	r24, 7
    81ac:	0c c0       	rjmp	.+24     	; 0x81c6 <p_etoa+0x104>
    81ae:	20 e0       	ldi	r18, 0x00	; 0
    81b0:	30 e0       	ldi	r19, 0x00	; 0
    81b2:	40 e2       	ldi	r20, 0x20	; 32
    81b4:	51 e4       	ldi	r21, 0x41	; 65
    81b6:	c5 01       	movw	r24, r10
    81b8:	b4 01       	movw	r22, r8
    81ba:	0e 94 1e e9 	call	0x1d23c	; 0x1d23c <__mulsf3>
    81be:	4b 01       	movw	r8, r22
    81c0:	5c 01       	movw	r10, r24
    81c2:	28 01       	movw	r4, r16
    81c4:	e7 cf       	rjmp	.-50     	; 0x8194 <p_etoa+0xd2>
    81c6:	82 01       	movw	r16, r4
    81c8:	0f 5f       	subi	r16, 0xFF	; 255
    81ca:	1f 4f       	sbci	r17, 0xFF	; 255
    81cc:	20 e0       	ldi	r18, 0x00	; 0
    81ce:	30 e0       	ldi	r19, 0x00	; 0
    81d0:	40 e2       	ldi	r20, 0x20	; 32
    81d2:	51 e4       	ldi	r21, 0x41	; 65
    81d4:	c5 01       	movw	r24, r10
    81d6:	b4 01       	movw	r22, r8
    81d8:	0e 94 1a e9 	call	0x1d234	; 0x1d234 <__gesf2>
    81dc:	87 fd       	sbrc	r24, 7
    81de:	0c c0       	rjmp	.+24     	; 0x81f8 <p_etoa+0x136>
    81e0:	20 e0       	ldi	r18, 0x00	; 0
    81e2:	30 e0       	ldi	r19, 0x00	; 0
    81e4:	40 e2       	ldi	r20, 0x20	; 32
    81e6:	51 e4       	ldi	r21, 0x41	; 65
    81e8:	c5 01       	movw	r24, r10
    81ea:	b4 01       	movw	r22, r8
    81ec:	0e 94 cf e7 	call	0x1cf9e	; 0x1cf9e <__divsf3>
    81f0:	4b 01       	movw	r8, r22
    81f2:	5c 01       	movw	r10, r24
    81f4:	28 01       	movw	r4, r16
    81f6:	e7 cf       	rjmp	.-50     	; 0x81c6 <p_etoa+0x104>
    81f8:	a7 01       	movw	r20, r14
    81fa:	96 01       	movw	r18, r12
    81fc:	c5 01       	movw	r24, r10
    81fe:	b4 01       	movw	r22, r8
    8200:	0e 94 67 e7 	call	0x1cece	; 0x1cece <__addsf3>
    8204:	4b 01       	movw	r8, r22
    8206:	5c 01       	movw	r10, r24
    8208:	82 01       	movw	r16, r4
    820a:	2f ef       	ldi	r18, 0xFF	; 255
    820c:	42 1a       	sub	r4, r18
    820e:	52 0a       	sbc	r5, r18
    8210:	20 e0       	ldi	r18, 0x00	; 0
    8212:	30 e0       	ldi	r19, 0x00	; 0
    8214:	40 e2       	ldi	r20, 0x20	; 32
    8216:	51 e4       	ldi	r21, 0x41	; 65
    8218:	0e 94 1a e9 	call	0x1d234	; 0x1d234 <__gesf2>
    821c:	87 fd       	sbrc	r24, 7
    821e:	09 c0       	rjmp	.+18     	; 0x8232 <p_etoa+0x170>
    8220:	20 e0       	ldi	r18, 0x00	; 0
    8222:	30 e0       	ldi	r19, 0x00	; 0
    8224:	40 e2       	ldi	r20, 0x20	; 32
    8226:	51 e4       	ldi	r21, 0x41	; 65
    8228:	c5 01       	movw	r24, r10
    822a:	b4 01       	movw	r22, r8
    822c:	0e 94 cf e7 	call	0x1cf9e	; 0x1cf9e <__divsf3>
    8230:	e9 cf       	rjmp	.-46     	; 0x8204 <p_etoa+0x142>
    8232:	0e 87       	std	Y+14, r16	; 0x0e
    8234:	1f 87       	std	Y+15, r17	; 0x0f
    8236:	85 e6       	ldi	r24, 0x65	; 101
    8238:	89 83       	std	Y+1, r24	; 0x01
    823a:	8e 85       	ldd	r24, Y+14	; 0x0e
    823c:	9f 85       	ldd	r25, Y+15	; 0x0f
    823e:	97 ff       	sbrs	r25, 7
    8240:	08 c0       	rjmp	.+16     	; 0x8252 <p_etoa+0x190>
    8242:	91 95       	neg	r25
    8244:	81 95       	neg	r24
    8246:	91 09       	sbc	r25, r1
    8248:	9f 87       	std	Y+15, r25	; 0x0f
    824a:	8e 87       	std	Y+14, r24	; 0x0e
    824c:	8d e2       	ldi	r24, 0x2D	; 45
    824e:	90 e0       	ldi	r25, 0x00	; 0
    8250:	02 c0       	rjmp	.+4      	; 0x8256 <p_etoa+0x194>
    8252:	8b e2       	ldi	r24, 0x2B	; 43
    8254:	90 e0       	ldi	r25, 0x00	; 0
    8256:	6c 01       	movw	r12, r24
    8258:	82 e0       	ldi	r24, 0x02	; 2
    825a:	e8 2e       	mov	r14, r24
    825c:	f1 2c       	mov	r15, r1
    825e:	8e 01       	movw	r16, r28
    8260:	02 5f       	subi	r16, 0xF2	; 242
    8262:	1f 4f       	sbci	r17, 0xFF	; 255
    8264:	2a e0       	ldi	r18, 0x0A	; 10
    8266:	30 e0       	ldi	r19, 0x00	; 0
    8268:	42 e0       	ldi	r20, 0x02	; 2
    826a:	50 e0       	ldi	r21, 0x00	; 0
    826c:	65 e0       	ldi	r22, 0x05	; 5
    826e:	70 e0       	ldi	r23, 0x00	; 0
    8270:	ce 01       	movw	r24, r28
    8272:	02 96       	adiw	r24, 0x02	; 2
    8274:	26 dd       	rcall	.-1460   	; 0x7cc2 <bin2num>
    8276:	9c 01       	movw	r18, r24
    8278:	93 2d       	mov	r25, r3
    827a:	98 72       	andi	r25, 0x28	; 40
    827c:	90 32       	cpi	r25, 0x20	; 32
    827e:	71 f0       	breq	.+28     	; 0x829c <p_etoa+0x1da>
    8280:	c5 01       	movw	r24, r10
    8282:	b4 01       	movw	r22, r8
    8284:	0e 94 37 e8 	call	0x1d06e	; 0x1d06e <__fixsfsi>
    8288:	6b 01       	movw	r12, r22
    828a:	7c 01       	movw	r14, r24
    828c:	60 e3       	ldi	r22, 0x30	; 48
    828e:	6c 0d       	add	r22, r12
    8290:	ce 01       	movw	r24, r28
    8292:	08 96       	adiw	r24, 0x08	; 8
    8294:	9f dd       	rcall	.-1218   	; 0x7dd4 <pch>
    8296:	21 10       	cpse	r2, r1
    8298:	20 c0       	rjmp	.+64     	; 0x82da <p_etoa+0x218>
    829a:	63 c0       	rjmp	.+198    	; 0x8362 <p_etoa+0x2a0>
    829c:	8a 85       	ldd	r24, Y+10	; 0x0a
    829e:	9b 85       	ldd	r25, Y+11	; 0x0b
    82a0:	0a 89       	ldd	r16, Y+18	; 0x12
    82a2:	1b 89       	ldd	r17, Y+19	; 0x13
    82a4:	08 1b       	sub	r16, r24
    82a6:	19 0b       	sbc	r17, r25
    82a8:	22 20       	and	r2, r2
    82aa:	41 f0       	breq	.+16     	; 0x82bc <p_etoa+0x1fa>
    82ac:	61 14       	cp	r6, r1
    82ae:	71 04       	cpc	r7, r1
    82b0:	29 f0       	breq	.+10     	; 0x82bc <p_etoa+0x1fa>
    82b2:	06 19       	sub	r16, r6
    82b4:	17 09       	sbc	r17, r7
    82b6:	06 50       	subi	r16, 0x06	; 6
    82b8:	11 09       	sbc	r17, r1
    82ba:	02 c0       	rjmp	.+4      	; 0x82c0 <p_etoa+0x1fe>
    82bc:	05 50       	subi	r16, 0x05	; 5
    82be:	11 09       	sbc	r17, r1
    82c0:	24 30       	cpi	r18, 0x04	; 4
    82c2:	31 05       	cpc	r19, r1
    82c4:	14 f0       	brlt	.+4      	; 0x82ca <p_etoa+0x208>
    82c6:	01 50       	subi	r16, 0x01	; 1
    82c8:	11 09       	sbc	r17, r1
    82ca:	10 16       	cp	r1, r16
    82cc:	11 06       	cpc	r1, r17
    82ce:	c4 f6       	brge	.-80     	; 0x8280 <p_etoa+0x1be>
    82d0:	60 e3       	ldi	r22, 0x30	; 48
    82d2:	ce 01       	movw	r24, r28
    82d4:	08 96       	adiw	r24, 0x08	; 8
    82d6:	7e dd       	rcall	.-1284   	; 0x7dd4 <pch>
    82d8:	f6 cf       	rjmp	.-20     	; 0x82c6 <p_etoa+0x204>
    82da:	61 14       	cp	r6, r1
    82dc:	71 04       	cpc	r7, r1
    82de:	09 f4       	brne	.+2      	; 0x82e2 <p_etoa+0x220>
    82e0:	40 c0       	rjmp	.+128    	; 0x8362 <p_etoa+0x2a0>
    82e2:	b6 01       	movw	r22, r12
    82e4:	dd 0c       	add	r13, r13
    82e6:	88 0b       	sbc	r24, r24
    82e8:	99 0b       	sbc	r25, r25
    82ea:	0e 94 6a e8 	call	0x1d0d4	; 0x1d0d4 <__floatsisf>
    82ee:	9b 01       	movw	r18, r22
    82f0:	ac 01       	movw	r20, r24
    82f2:	c5 01       	movw	r24, r10
    82f4:	b4 01       	movw	r22, r8
    82f6:	0e 94 66 e7 	call	0x1cecc	; 0x1cecc <__subsf3>
    82fa:	20 e0       	ldi	r18, 0x00	; 0
    82fc:	30 e0       	ldi	r19, 0x00	; 0
    82fe:	40 e2       	ldi	r20, 0x20	; 32
    8300:	51 e4       	ldi	r21, 0x41	; 65
    8302:	0e 94 1e e9 	call	0x1d23c	; 0x1d23c <__mulsf3>
    8306:	4b 01       	movw	r8, r22
    8308:	5c 01       	movw	r10, r24
    830a:	6e e2       	ldi	r22, 0x2E	; 46
    830c:	ce 01       	movw	r24, r28
    830e:	08 96       	adiw	r24, 0x08	; 8
    8310:	61 dd       	rcall	.-1342   	; 0x7dd4 <pch>
    8312:	c5 01       	movw	r24, r10
    8314:	b4 01       	movw	r22, r8
    8316:	0e 94 37 e8 	call	0x1d06e	; 0x1d06e <__fixsfsi>
    831a:	6b 01       	movw	r12, r22
    831c:	7c 01       	movw	r14, r24
    831e:	07 2e       	mov	r0, r23
    8320:	00 0c       	add	r0, r0
    8322:	88 0b       	sbc	r24, r24
    8324:	99 0b       	sbc	r25, r25
    8326:	0e 94 6a e8 	call	0x1d0d4	; 0x1d0d4 <__floatsisf>
    832a:	9b 01       	movw	r18, r22
    832c:	ac 01       	movw	r20, r24
    832e:	c5 01       	movw	r24, r10
    8330:	b4 01       	movw	r22, r8
    8332:	0e 94 66 e7 	call	0x1cecc	; 0x1cecc <__subsf3>
    8336:	4b 01       	movw	r8, r22
    8338:	5c 01       	movw	r10, r24
    833a:	b6 01       	movw	r22, r12
    833c:	60 5d       	subi	r22, 0xD0	; 208
    833e:	7f 4f       	sbci	r23, 0xFF	; 255
    8340:	ce 01       	movw	r24, r28
    8342:	08 96       	adiw	r24, 0x08	; 8
    8344:	47 dd       	rcall	.-1394   	; 0x7dd4 <pch>
    8346:	20 e0       	ldi	r18, 0x00	; 0
    8348:	30 e0       	ldi	r19, 0x00	; 0
    834a:	40 e2       	ldi	r20, 0x20	; 32
    834c:	51 e4       	ldi	r21, 0x41	; 65
    834e:	c5 01       	movw	r24, r10
    8350:	b4 01       	movw	r22, r8
    8352:	0e 94 1e e9 	call	0x1d23c	; 0x1d23c <__mulsf3>
    8356:	4b 01       	movw	r8, r22
    8358:	5c 01       	movw	r10, r24
    835a:	31 e0       	ldi	r19, 0x01	; 1
    835c:	63 1a       	sub	r6, r19
    835e:	71 08       	sbc	r7, r1
    8360:	c1 f6       	brne	.-80     	; 0x8312 <p_etoa+0x250>
    8362:	8e 01       	movw	r16, r28
    8364:	0f 5f       	subi	r16, 0xFF	; 255
    8366:	1f 4f       	sbci	r17, 0xFF	; 255
    8368:	f8 01       	movw	r30, r16
    836a:	61 91       	ld	r22, Z+
    836c:	8f 01       	movw	r16, r30
    836e:	ce 01       	movw	r24, r28
    8370:	08 96       	adiw	r24, 0x08	; 8
    8372:	66 23       	and	r22, r22
    8374:	11 f0       	breq	.+4      	; 0x837a <p_etoa+0x2b8>
    8376:	2e dd       	rcall	.-1444   	; 0x7dd4 <pch>
    8378:	f7 cf       	rjmp	.-18     	; 0x8368 <p_etoa+0x2a6>
    837a:	2c dd       	rcall	.-1448   	; 0x7dd4 <pch>
    837c:	e8 89       	ldd	r30, Y+16	; 0x10
    837e:	f9 89       	ldd	r31, Y+17	; 0x11
    8380:	01 90       	ld	r0, Z+
    8382:	00 20       	and	r0, r0
    8384:	e9 f7       	brne	.-6      	; 0x8380 <p_etoa+0x2be>
    8386:	cf 01       	movw	r24, r30
    8388:	01 97       	sbiw	r24, 0x01	; 1
    838a:	28 89       	ldd	r18, Y+16	; 0x10
    838c:	39 89       	ldd	r19, Y+17	; 0x11
    838e:	82 1b       	sub	r24, r18
    8390:	93 0b       	sbc	r25, r19
    8392:	63 96       	adiw	r28, 0x13	; 19
    8394:	e2 e1       	ldi	r30, 0x12	; 18
    8396:	0c 94 29 e7 	jmp	0x1ce52	; 0x1ce52 <__epilogue_restores__>

0000839a <_puts_pad>:
    839a:	a0 e0       	ldi	r26, 0x00	; 0
    839c:	b0 e0       	ldi	r27, 0x00	; 0
    839e:	e3 ed       	ldi	r30, 0xD3	; 211
    83a0:	f1 e4       	ldi	r31, 0x41	; 65
    83a2:	0c 94 13 e7 	jmp	0x1ce26	; 0x1ce26 <__prologue_saves__+0xc>
    83a6:	6c 01       	movw	r12, r24
    83a8:	4b 01       	movw	r8, r22
    83aa:	79 01       	movw	r14, r18
    83ac:	24 17       	cp	r18, r20
    83ae:	35 07       	cpc	r19, r21
    83b0:	24 f4       	brge	.+8      	; 0x83ba <_puts_pad+0x20>
    83b2:	ea 01       	movw	r28, r20
    83b4:	c2 1b       	sub	r28, r18
    83b6:	d3 0b       	sbc	r29, r19
    83b8:	02 c0       	rjmp	.+4      	; 0x83be <_puts_pad+0x24>
    83ba:	c0 e0       	ldi	r28, 0x00	; 0
    83bc:	d0 e0       	ldi	r29, 0x00	; 0
    83be:	01 15       	cp	r16, r1
    83c0:	11 05       	cpc	r17, r1
    83c2:	49 f4       	brne	.+18     	; 0x83d6 <_puts_pad+0x3c>
    83c4:	21 97       	sbiw	r28, 0x01	; 1
    83c6:	38 f0       	brcs	.+14     	; 0x83d6 <_puts_pad+0x3c>
    83c8:	d6 01       	movw	r26, r12
    83ca:	ed 91       	ld	r30, X+
    83cc:	fc 91       	ld	r31, X
    83ce:	60 e2       	ldi	r22, 0x20	; 32
    83d0:	c6 01       	movw	r24, r12
    83d2:	09 95       	icall
    83d4:	f7 cf       	rjmp	.-18     	; 0x83c4 <_puts_pad+0x2a>
    83d6:	54 01       	movw	r10, r8
    83d8:	f5 01       	movw	r30, r10
    83da:	61 91       	ld	r22, Z+
    83dc:	5f 01       	movw	r10, r30
    83de:	66 23       	and	r22, r22
    83e0:	61 f0       	breq	.+24     	; 0x83fa <_puts_pad+0x60>
    83e2:	e1 14       	cp	r14, r1
    83e4:	f1 04       	cpc	r15, r1
    83e6:	49 f0       	breq	.+18     	; 0x83fa <_puts_pad+0x60>
    83e8:	d6 01       	movw	r26, r12
    83ea:	ed 91       	ld	r30, X+
    83ec:	fc 91       	ld	r31, X
    83ee:	c6 01       	movw	r24, r12
    83f0:	09 95       	icall
    83f2:	b1 e0       	ldi	r27, 0x01	; 1
    83f4:	eb 1a       	sub	r14, r27
    83f6:	f1 08       	sbc	r15, r1
    83f8:	ef cf       	rjmp	.-34     	; 0x83d8 <_puts_pad+0x3e>
    83fa:	01 15       	cp	r16, r1
    83fc:	11 05       	cpc	r17, r1
    83fe:	51 f0       	breq	.+20     	; 0x8414 <_puts_pad+0x7a>
    8400:	20 97       	sbiw	r28, 0x00	; 0
    8402:	41 f0       	breq	.+16     	; 0x8414 <_puts_pad+0x7a>
    8404:	d6 01       	movw	r26, r12
    8406:	ed 91       	ld	r30, X+
    8408:	fc 91       	ld	r31, X
    840a:	60 e2       	ldi	r22, 0x20	; 32
    840c:	c6 01       	movw	r24, r12
    840e:	09 95       	icall
    8410:	21 97       	sbiw	r28, 0x01	; 1
    8412:	f6 cf       	rjmp	.-20     	; 0x8400 <_puts_pad+0x66>
    8414:	cd b7       	in	r28, 0x3d	; 61
    8416:	de b7       	in	r29, 0x3e	; 62
    8418:	ec e0       	ldi	r30, 0x0C	; 12
    841a:	0c 94 2f e7 	jmp	0x1ce5e	; 0x1ce5e <__epilogue_restores__+0xc>

0000841e <_puts_pad_X>:
    841e:	2f 92       	push	r2
    8420:	3f 92       	push	r3
    8422:	4f 92       	push	r4
    8424:	6f 92       	push	r6
    8426:	7f 92       	push	r7
    8428:	8f 92       	push	r8
    842a:	cf 92       	push	r12
    842c:	df 92       	push	r13
    842e:	ef 92       	push	r14
    8430:	ff 92       	push	r15
    8432:	0f 93       	push	r16
    8434:	1f 93       	push	r17
    8436:	cf 93       	push	r28
    8438:	df 93       	push	r29
    843a:	6c 01       	movw	r12, r24
    843c:	3a 01       	movw	r6, r20
    843e:	86 2e       	mov	r8, r22
    8440:	02 17       	cp	r16, r18
    8442:	13 07       	cpc	r17, r19
    8444:	24 f4       	brge	.+8      	; 0x844e <_puts_pad_X+0x30>
    8446:	e9 01       	movw	r28, r18
    8448:	c0 1b       	sub	r28, r16
    844a:	d1 0b       	sbc	r29, r17
    844c:	02 c0       	rjmp	.+4      	; 0x8452 <_puts_pad_X+0x34>
    844e:	c0 e0       	ldi	r28, 0x00	; 0
    8450:	d0 e0       	ldi	r29, 0x00	; 0
    8452:	e1 14       	cp	r14, r1
    8454:	f1 04       	cpc	r15, r1
    8456:	49 f4       	brne	.+18     	; 0x846a <_puts_pad_X+0x4c>
    8458:	21 97       	sbiw	r28, 0x01	; 1
    845a:	38 f0       	brcs	.+14     	; 0x846a <_puts_pad_X+0x4c>
    845c:	d6 01       	movw	r26, r12
    845e:	ed 91       	ld	r30, X+
    8460:	fc 91       	ld	r31, X
    8462:	60 e2       	ldi	r22, 0x20	; 32
    8464:	c6 01       	movw	r24, r12
    8466:	09 95       	icall
    8468:	f7 cf       	rjmp	.-18     	; 0x8458 <_puts_pad_X+0x3a>
    846a:	13 01       	movw	r2, r6
    846c:	48 2c       	mov	r4, r8
    846e:	20 0e       	add	r2, r16
    8470:	31 1e       	adc	r3, r17
    8472:	41 1c       	adc	r4, r1
    8474:	17 fd       	sbrc	r17, 7
    8476:	4a 94       	dec	r4
    8478:	f3 01       	movw	r30, r6
    847a:	58 2d       	mov	r21, r8
    847c:	0e 94 44 e7 	call	0x1ce88	; 0x1ce88 <__xload_1>
    8480:	66 23       	and	r22, r22
    8482:	71 f0       	breq	.+28     	; 0x84a0 <_puts_pad_X+0x82>
    8484:	62 14       	cp	r6, r2
    8486:	73 04       	cpc	r7, r3
    8488:	84 04       	cpc	r8, r4
    848a:	51 f0       	breq	.+20     	; 0x84a0 <_puts_pad_X+0x82>
    848c:	d6 01       	movw	r26, r12
    848e:	ed 91       	ld	r30, X+
    8490:	fc 91       	ld	r31, X
    8492:	c6 01       	movw	r24, r12
    8494:	09 95       	icall
    8496:	bf ef       	ldi	r27, 0xFF	; 255
    8498:	6b 1a       	sub	r6, r27
    849a:	7b 0a       	sbc	r7, r27
    849c:	8b 0a       	sbc	r8, r27
    849e:	ec cf       	rjmp	.-40     	; 0x8478 <_puts_pad_X+0x5a>
    84a0:	ef 28       	or	r14, r15
    84a2:	51 f0       	breq	.+20     	; 0x84b8 <_puts_pad_X+0x9a>
    84a4:	20 97       	sbiw	r28, 0x00	; 0
    84a6:	41 f0       	breq	.+16     	; 0x84b8 <_puts_pad_X+0x9a>
    84a8:	d6 01       	movw	r26, r12
    84aa:	ed 91       	ld	r30, X+
    84ac:	fc 91       	ld	r31, X
    84ae:	60 e2       	ldi	r22, 0x20	; 32
    84b0:	c6 01       	movw	r24, r12
    84b2:	09 95       	icall
    84b4:	21 97       	sbiw	r28, 0x01	; 1
    84b6:	f6 cf       	rjmp	.-20     	; 0x84a4 <_puts_pad_X+0x86>
    84b8:	df 91       	pop	r29
    84ba:	cf 91       	pop	r28
    84bc:	1f 91       	pop	r17
    84be:	0f 91       	pop	r16
    84c0:	ff 90       	pop	r15
    84c2:	ef 90       	pop	r14
    84c4:	df 90       	pop	r13
    84c6:	cf 90       	pop	r12
    84c8:	8f 90       	pop	r8
    84ca:	7f 90       	pop	r7
    84cc:	6f 90       	pop	r6
    84ce:	4f 90       	pop	r4
    84d0:	3f 90       	pop	r3
    84d2:	2f 90       	pop	r2
    84d4:	08 95       	ret

000084d6 <strlen_X>:
    84d6:	cf 92       	push	r12
    84d8:	df 92       	push	r13
    84da:	ef 92       	push	r14
    84dc:	9b 01       	movw	r18, r22
    84de:	48 2f       	mov	r20, r24
    84e0:	80 e0       	ldi	r24, 0x00	; 0
    84e2:	90 e0       	ldi	r25, 0x00	; 0
    84e4:	2f 5f       	subi	r18, 0xFF	; 255
    84e6:	3f 4f       	sbci	r19, 0xFF	; 255
    84e8:	4f 4f       	sbci	r20, 0xFF	; 255
    84ea:	69 01       	movw	r12, r18
    84ec:	e4 2e       	mov	r14, r20
    84ee:	51 e0       	ldi	r21, 0x01	; 1
    84f0:	c5 1a       	sub	r12, r21
    84f2:	d1 08       	sbc	r13, r1
    84f4:	e1 08       	sbc	r14, r1
    84f6:	f6 01       	movw	r30, r12
    84f8:	5e 2d       	mov	r21, r14
    84fa:	0e 94 44 e7 	call	0x1ce88	; 0x1ce88 <__xload_1>
    84fe:	66 23       	and	r22, r22
    8500:	11 f0       	breq	.+4      	; 0x8506 <strlen_X+0x30>
    8502:	01 96       	adiw	r24, 0x01	; 1
    8504:	ef cf       	rjmp	.-34     	; 0x84e4 <strlen_X+0xe>
    8506:	ef 90       	pop	r14
    8508:	df 90       	pop	r13
    850a:	cf 90       	pop	r12
    850c:	08 95       	ret

0000850e <_printf_fn>:
    850e:	ae e6       	ldi	r26, 0x6E	; 110
    8510:	b0 e0       	ldi	r27, 0x00	; 0
    8512:	ed e8       	ldi	r30, 0x8D	; 141
    8514:	f2 e4       	ldi	r31, 0x42	; 66
    8516:	0c 94 0d e7 	jmp	0x1ce1a	; 0x1ce1a <__prologue_saves__>
    851a:	a5 96       	adiw	r28, 0x25	; 37
    851c:	9f af       	std	Y+63, r25	; 0x3f
    851e:	8e af       	std	Y+62, r24	; 0x3e
    8520:	a5 97       	sbiw	r28, 0x25	; 37
    8522:	6a 01       	movw	r12, r20
    8524:	e6 2e       	mov	r14, r22
    8526:	19 01       	movw	r2, r18
    8528:	a9 96       	adiw	r28, 0x29	; 41
    852a:	1c ae       	std	Y+60, r1	; 0x3c
    852c:	1d ae       	std	Y+61, r1	; 0x3d
    852e:	1e ae       	std	Y+62, r1	; 0x3e
    8530:	1f ae       	std	Y+63, r1	; 0x3f
    8532:	a9 97       	sbiw	r28, 0x29	; 41
    8534:	8a e1       	ldi	r24, 0x1A	; 26
    8536:	94 e0       	ldi	r25, 0x04	; 4
    8538:	9c 01       	movw	r18, r24
    853a:	40 e8       	ldi	r20, 0x80	; 128
    853c:	ae 96       	adiw	r28, 0x2e	; 46
    853e:	2d af       	std	Y+61, r18	; 0x3d
    8540:	3e af       	std	Y+62, r19	; 0x3e
    8542:	4f af       	std	Y+63, r20	; 0x3f
    8544:	ae 97       	sbiw	r28, 0x2e	; 46
    8546:	ae 01       	movw	r20, r28
    8548:	4f 5a       	subi	r20, 0xAF	; 175
    854a:	5f 4f       	sbci	r21, 0xFF	; 255
    854c:	67 96       	adiw	r28, 0x17	; 23
    854e:	5f af       	std	Y+63, r21	; 0x3f
    8550:	4e af       	std	Y+62, r20	; 0x3e
    8552:	67 97       	sbiw	r28, 0x17	; 23
    8554:	ce 01       	movw	r24, r28
    8556:	8d 5b       	subi	r24, 0xBD	; 189
    8558:	9f 4f       	sbci	r25, 0xFF	; 255
    855a:	69 96       	adiw	r28, 0x19	; 25
    855c:	9f af       	std	Y+63, r25	; 0x3f
    855e:	8e af       	std	Y+62, r24	; 0x3e
    8560:	69 97       	sbiw	r28, 0x19	; 25
    8562:	de 01       	movw	r26, r28
    8564:	a5 5b       	subi	r26, 0xB5	; 181
    8566:	bf 4f       	sbci	r27, 0xFF	; 255
    8568:	6b 96       	adiw	r28, 0x1b	; 27
    856a:	bf af       	std	Y+63, r27	; 0x3f
    856c:	ae af       	std	Y+62, r26	; 0x3e
    856e:	6b 97       	sbiw	r28, 0x1b	; 27
    8570:	fe 01       	movw	r30, r28
    8572:	ed 5a       	subi	r30, 0xAD	; 173
    8574:	ff 4f       	sbci	r31, 0xFF	; 255
    8576:	6d 96       	adiw	r28, 0x1d	; 29
    8578:	ff af       	std	Y+63, r31	; 0x3f
    857a:	ee af       	std	Y+62, r30	; 0x3e
    857c:	6d 97       	sbiw	r28, 0x1d	; 29
    857e:	f6 01       	movw	r30, r12
    8580:	5e 2d       	mov	r21, r14
    8582:	0e 94 44 e7 	call	0x1ce88	; 0x1ce88 <__xload_1>
    8586:	66 23       	and	r22, r22
    8588:	09 f4       	brne	.+2      	; 0x858c <_printf_fn+0x7e>
    858a:	13 c4       	rjmp	.+2086   	; 0x8db2 <_printf_fn+0x8a4>
    858c:	ae 2d       	mov	r26, r14
    858e:	c6 01       	movw	r24, r12
    8590:	01 96       	adiw	r24, 0x01	; 1
    8592:	a1 1d       	adc	r26, r1
    8594:	3c 01       	movw	r6, r24
    8596:	8a 2e       	mov	r8, r26
    8598:	65 32       	cpi	r22, 0x25	; 37
    859a:	51 f0       	breq	.+20     	; 0x85b0 <_printf_fn+0xa2>
    859c:	a5 96       	adiw	r28, 0x25	; 37
    859e:	ae ad       	ldd	r26, Y+62	; 0x3e
    85a0:	bf ad       	ldd	r27, Y+63	; 0x3f
    85a2:	a5 97       	sbiw	r28, 0x25	; 37
    85a4:	ed 91       	ld	r30, X+
    85a6:	fc 91       	ld	r31, X
    85a8:	11 97       	sbiw	r26, 0x01	; 1
    85aa:	cd 01       	movw	r24, r26
    85ac:	09 95       	icall
    85ae:	d5 c3       	rjmp	.+1962   	; 0x8d5a <_printf_fn+0x84c>
    85b0:	91 2c       	mov	r9, r1
    85b2:	f3 01       	movw	r30, r6
    85b4:	58 2d       	mov	r21, r8
    85b6:	0e 94 44 e7 	call	0x1ce88	; 0x1ce88 <__xload_1>
    85ba:	63 32       	cpi	r22, 0x23	; 35
    85bc:	19 f4       	brne	.+6      	; 0x85c4 <_printf_fn+0xb6>
    85be:	68 94       	set
    85c0:	97 f8       	bld	r9, 7
    85c2:	04 c0       	rjmp	.+8      	; 0x85cc <_printf_fn+0xbe>
    85c4:	6b 32       	cpi	r22, 0x2B	; 43
    85c6:	39 f4       	brne	.+14     	; 0x85d6 <_printf_fn+0xc8>
    85c8:	68 94       	set
    85ca:	92 f8       	bld	r9, 2
    85cc:	bf ef       	ldi	r27, 0xFF	; 255
    85ce:	6b 1a       	sub	r6, r27
    85d0:	7b 0a       	sbc	r7, r27
    85d2:	8b 0a       	sbc	r8, r27
    85d4:	ee cf       	rjmp	.-36     	; 0x85b2 <_printf_fn+0xa4>
    85d6:	6d 32       	cpi	r22, 0x2D	; 45
    85d8:	a9 f4       	brne	.+42     	; 0x8604 <_printf_fn+0xf6>
    85da:	93 fc       	sbrc	r9, 3
    85dc:	05 c0       	rjmp	.+10     	; 0x85e8 <_printf_fn+0xda>
    85de:	6d 32       	cpi	r22, 0x2D	; 45
    85e0:	19 f4       	brne	.+6      	; 0x85e8 <_printf_fn+0xda>
    85e2:	68 94       	set
    85e4:	93 f8       	bld	r9, 3
    85e6:	f2 cf       	rjmp	.-28     	; 0x85cc <_printf_fn+0xbe>
    85e8:	94 fc       	sbrc	r9, 4
    85ea:	05 c0       	rjmp	.+10     	; 0x85f6 <_printf_fn+0xe8>
    85ec:	60 32       	cpi	r22, 0x20	; 32
    85ee:	19 f4       	brne	.+6      	; 0x85f6 <_printf_fn+0xe8>
    85f0:	68 94       	set
    85f2:	94 f8       	bld	r9, 4
    85f4:	eb cf       	rjmp	.-42     	; 0x85cc <_printf_fn+0xbe>
    85f6:	95 fc       	sbrc	r9, 5
    85f8:	e9 cf       	rjmp	.-46     	; 0x85cc <_printf_fn+0xbe>
    85fa:	60 33       	cpi	r22, 0x30	; 48
    85fc:	39 f7       	brne	.-50     	; 0x85cc <_printf_fn+0xbe>
    85fe:	68 94       	set
    8600:	95 f8       	bld	r9, 5
    8602:	e4 cf       	rjmp	.-56     	; 0x85cc <_printf_fn+0xbe>
    8604:	86 2f       	mov	r24, r22
    8606:	8f 7e       	andi	r24, 0xEF	; 239
    8608:	80 32       	cpi	r24, 0x20	; 32
    860a:	39 f3       	breq	.-50     	; 0x85da <_printf_fn+0xcc>
    860c:	70 e0       	ldi	r23, 0x00	; 0
    860e:	60 53       	subi	r22, 0x30	; 48
    8610:	71 09       	sbc	r23, r1
    8612:	6f 96       	adiw	r28, 0x1f	; 31
    8614:	1f ae       	std	Y+63, r1	; 0x3f
    8616:	1e ae       	std	Y+62, r1	; 0x3e
    8618:	6f 97       	sbiw	r28, 0x1f	; 31
    861a:	6a 30       	cpi	r22, 0x0A	; 10
    861c:	71 05       	cpc	r23, r1
    861e:	10 f5       	brcc	.+68     	; 0x8664 <_printf_fn+0x156>
    8620:	2a e0       	ldi	r18, 0x0A	; 10
    8622:	f3 01       	movw	r30, r6
    8624:	58 2d       	mov	r21, r8
    8626:	0e 94 44 e7 	call	0x1ce88	; 0x1ce88 <__xload_1>
    862a:	70 e0       	ldi	r23, 0x00	; 0
    862c:	cb 01       	movw	r24, r22
    862e:	c0 97       	sbiw	r24, 0x30	; 48
    8630:	0a 97       	sbiw	r24, 0x0a	; 10
    8632:	b0 f4       	brcc	.+44     	; 0x8660 <_printf_fn+0x152>
    8634:	ef ef       	ldi	r30, 0xFF	; 255
    8636:	6e 1a       	sub	r6, r30
    8638:	7e 0a       	sbc	r7, r30
    863a:	8e 0a       	sbc	r8, r30
    863c:	6f 96       	adiw	r28, 0x1f	; 31
    863e:	4e ad       	ldd	r20, Y+62	; 0x3e
    8640:	5f ad       	ldd	r21, Y+63	; 0x3f
    8642:	6f 97       	sbiw	r28, 0x1f	; 31
    8644:	24 9f       	mul	r18, r20
    8646:	c0 01       	movw	r24, r0
    8648:	25 9f       	mul	r18, r21
    864a:	90 0d       	add	r25, r0
    864c:	11 24       	eor	r1, r1
    864e:	68 0f       	add	r22, r24
    8650:	79 1f       	adc	r23, r25
    8652:	cb 01       	movw	r24, r22
    8654:	c0 97       	sbiw	r24, 0x30	; 48
    8656:	6f 96       	adiw	r28, 0x1f	; 31
    8658:	9f af       	std	Y+63, r25	; 0x3f
    865a:	8e af       	std	Y+62, r24	; 0x3e
    865c:	6f 97       	sbiw	r28, 0x1f	; 31
    865e:	e1 cf       	rjmp	.-62     	; 0x8622 <_printf_fn+0x114>
    8660:	68 94       	set
    8662:	90 f8       	bld	r9, 0
    8664:	f3 01       	movw	r30, r6
    8666:	58 2d       	mov	r21, r8
    8668:	0e 94 44 e7 	call	0x1ce88	; 0x1ce88 <__xload_1>
    866c:	6e 32       	cpi	r22, 0x2E	; 46
    866e:	61 f5       	brne	.+88     	; 0x86c8 <_printf_fn+0x1ba>
    8670:	9f ef       	ldi	r25, 0xFF	; 255
    8672:	69 1a       	sub	r6, r25
    8674:	79 0a       	sbc	r7, r25
    8676:	89 0a       	sbc	r8, r25
    8678:	a1 96       	adiw	r28, 0x21	; 33
    867a:	1f ae       	std	Y+63, r1	; 0x3f
    867c:	1e ae       	std	Y+62, r1	; 0x3e
    867e:	a1 97       	sbiw	r28, 0x21	; 33
    8680:	2a e0       	ldi	r18, 0x0A	; 10
    8682:	f3 01       	movw	r30, r6
    8684:	58 2d       	mov	r21, r8
    8686:	0e 94 44 e7 	call	0x1ce88	; 0x1ce88 <__xload_1>
    868a:	70 e0       	ldi	r23, 0x00	; 0
    868c:	cb 01       	movw	r24, r22
    868e:	c0 97       	sbiw	r24, 0x30	; 48
    8690:	0a 97       	sbiw	r24, 0x0a	; 10
    8692:	b8 f4       	brcc	.+46     	; 0x86c2 <_printf_fn+0x1b4>
    8694:	af ef       	ldi	r26, 0xFF	; 255
    8696:	6a 1a       	sub	r6, r26
    8698:	7a 0a       	sbc	r7, r26
    869a:	8a 0a       	sbc	r8, r26
    869c:	a1 96       	adiw	r28, 0x21	; 33
    869e:	ee ad       	ldd	r30, Y+62	; 0x3e
    86a0:	ff ad       	ldd	r31, Y+63	; 0x3f
    86a2:	a1 97       	sbiw	r28, 0x21	; 33
    86a4:	2e 9f       	mul	r18, r30
    86a6:	c0 01       	movw	r24, r0
    86a8:	2f 9f       	mul	r18, r31
    86aa:	90 0d       	add	r25, r0
    86ac:	11 24       	eor	r1, r1
    86ae:	68 0f       	add	r22, r24
    86b0:	79 1f       	adc	r23, r25
    86b2:	ab 01       	movw	r20, r22
    86b4:	40 53       	subi	r20, 0x30	; 48
    86b6:	51 09       	sbc	r21, r1
    86b8:	a1 96       	adiw	r28, 0x21	; 33
    86ba:	5f af       	std	Y+63, r21	; 0x3f
    86bc:	4e af       	std	Y+62, r20	; 0x3e
    86be:	a1 97       	sbiw	r28, 0x21	; 33
    86c0:	e0 cf       	rjmp	.-64     	; 0x8682 <_printf_fn+0x174>
    86c2:	68 94       	set
    86c4:	91 f8       	bld	r9, 1
    86c6:	04 c0       	rjmp	.+8      	; 0x86d0 <_printf_fn+0x1c2>
    86c8:	a1 96       	adiw	r28, 0x21	; 33
    86ca:	1f ae       	std	Y+63, r1	; 0x3f
    86cc:	1e ae       	std	Y+62, r1	; 0x3e
    86ce:	a1 97       	sbiw	r28, 0x21	; 33
    86d0:	f3 01       	movw	r30, r6
    86d2:	58 2d       	mov	r21, r8
    86d4:	0e 94 44 e7 	call	0x1ce88	; 0x1ce88 <__xload_1>
    86d8:	69 34       	cpi	r22, 0x49	; 73
    86da:	91 f5       	brne	.+100    	; 0x8740 <_printf_fn+0x232>
    86dc:	5f ef       	ldi	r21, 0xFF	; 255
    86de:	65 1a       	sub	r6, r21
    86e0:	75 0a       	sbc	r7, r21
    86e2:	85 0a       	sbc	r8, r21
    86e4:	41 2c       	mov	r4, r1
    86e6:	51 2c       	mov	r5, r1
    86e8:	2a e0       	ldi	r18, 0x0A	; 10
    86ea:	f3 01       	movw	r30, r6
    86ec:	58 2d       	mov	r21, r8
    86ee:	0e 94 44 e7 	call	0x1ce88	; 0x1ce88 <__xload_1>
    86f2:	70 e0       	ldi	r23, 0x00	; 0
    86f4:	cb 01       	movw	r24, r22
    86f6:	c0 97       	sbiw	r24, 0x30	; 48
    86f8:	0a 97       	sbiw	r24, 0x0a	; 10
    86fa:	80 f4       	brcc	.+32     	; 0x871c <_printf_fn+0x20e>
    86fc:	8f ef       	ldi	r24, 0xFF	; 255
    86fe:	68 1a       	sub	r6, r24
    8700:	78 0a       	sbc	r7, r24
    8702:	88 0a       	sbc	r8, r24
    8704:	24 9d       	mul	r18, r4
    8706:	c0 01       	movw	r24, r0
    8708:	25 9d       	mul	r18, r5
    870a:	90 0d       	add	r25, r0
    870c:	11 24       	eor	r1, r1
    870e:	68 0f       	add	r22, r24
    8710:	79 1f       	adc	r23, r25
    8712:	2b 01       	movw	r4, r22
    8714:	90 e3       	ldi	r25, 0x30	; 48
    8716:	49 1a       	sub	r4, r25
    8718:	51 08       	sbc	r5, r1
    871a:	e7 cf       	rjmp	.-50     	; 0x86ea <_printf_fn+0x1dc>
    871c:	41 14       	cp	r4, r1
    871e:	51 04       	cpc	r5, r1
    8720:	09 f4       	brne	.+2      	; 0x8724 <_printf_fn+0x216>
    8722:	40 c0       	rjmp	.+128    	; 0x87a4 <_printf_fn+0x296>
    8724:	c2 01       	movw	r24, r4
    8726:	87 70       	andi	r24, 0x07	; 7
    8728:	99 27       	eor	r25, r25
    872a:	89 2b       	or	r24, r25
    872c:	c9 f5       	brne	.+114    	; 0x87a0 <_printf_fn+0x292>
    872e:	63 e0       	ldi	r22, 0x03	; 3
    8730:	55 94       	asr	r5
    8732:	47 94       	ror	r4
    8734:	6a 95       	dec	r22
    8736:	e1 f7       	brne	.-8      	; 0x8730 <_printf_fn+0x222>
    8738:	41 14       	cp	r4, r1
    873a:	51 04       	cpc	r5, r1
    873c:	99 f1       	breq	.+102    	; 0x87a4 <_printf_fn+0x296>
    873e:	21 c0       	rjmp	.+66     	; 0x8782 <_printf_fn+0x274>
    8740:	68 36       	cpi	r22, 0x68	; 104
    8742:	29 f4       	brne	.+10     	; 0x874e <_printf_fn+0x240>
    8744:	af ef       	ldi	r26, 0xFF	; 255
    8746:	6a 1a       	sub	r6, r26
    8748:	7a 0a       	sbc	r7, r26
    874a:	8a 0a       	sbc	r8, r26
    874c:	09 c3       	rjmp	.+1554   	; 0x8d60 <_printf_fn+0x852>
    874e:	6c 36       	cpi	r22, 0x6C	; 108
    8750:	09 f0       	breq	.+2      	; 0x8754 <_printf_fn+0x246>
    8752:	06 c3       	rjmp	.+1548   	; 0x8d60 <_printf_fn+0x852>
    8754:	a8 2d       	mov	r26, r8
    8756:	c3 01       	movw	r24, r6
    8758:	01 96       	adiw	r24, 0x01	; 1
    875a:	a1 1d       	adc	r26, r1
    875c:	fc 01       	movw	r30, r24
    875e:	5a 2f       	mov	r21, r26
    8760:	0e 94 44 e7 	call	0x1ce88	; 0x1ce88 <__xload_1>
    8764:	6c 36       	cpi	r22, 0x6C	; 108
    8766:	31 f0       	breq	.+12     	; 0x8774 <_printf_fn+0x266>
    8768:	3c 01       	movw	r6, r24
    876a:	8a 2e       	mov	r8, r26
    876c:	54 e0       	ldi	r21, 0x04	; 4
    876e:	45 2e       	mov	r4, r21
    8770:	51 2c       	mov	r5, r1
    8772:	07 c0       	rjmp	.+14     	; 0x8782 <_printf_fn+0x274>
    8774:	b2 e0       	ldi	r27, 0x02	; 2
    8776:	6b 0e       	add	r6, r27
    8778:	71 1c       	adc	r7, r1
    877a:	81 1c       	adc	r8, r1
    877c:	48 e0       	ldi	r20, 0x08	; 8
    877e:	44 2e       	mov	r4, r20
    8780:	51 2c       	mov	r5, r1
    8782:	f3 01       	movw	r30, r6
    8784:	58 2d       	mov	r21, r8
    8786:	0e 94 44 e7 	call	0x1ce88	; 0x1ce88 <__xload_1>
    878a:	e6 2f       	mov	r30, r22
    878c:	f0 e0       	ldi	r31, 0x00	; 0
    878e:	a3 96       	adiw	r28, 0x23	; 35
    8790:	ff af       	std	Y+63, r31	; 0x3f
    8792:	ee af       	std	Y+62, r30	; 0x3e
    8794:	a3 97       	sbiw	r28, 0x23	; 35
    8796:	e4 36       	cpi	r30, 0x64	; 100
    8798:	f1 05       	cpc	r31, r1
    879a:	09 f4       	brne	.+2      	; 0x879e <_printf_fn+0x290>
    879c:	e5 c2       	rjmp	.+1482   	; 0x8d68 <_printf_fn+0x85a>
    879e:	06 c0       	rjmp	.+12     	; 0x87ac <_printf_fn+0x29e>
    87a0:	41 2c       	mov	r4, r1
    87a2:	51 2c       	mov	r5, r1
    87a4:	a3 96       	adiw	r28, 0x23	; 35
    87a6:	1f ae       	std	Y+63, r1	; 0x3f
    87a8:	1e ae       	std	Y+62, r1	; 0x3e
    87aa:	a3 97       	sbiw	r28, 0x23	; 35
    87ac:	31 e0       	ldi	r19, 0x01	; 1
    87ae:	20 e0       	ldi	r18, 0x00	; 0
    87b0:	a3 96       	adiw	r28, 0x23	; 35
    87b2:	4e ad       	ldd	r20, Y+62	; 0x3e
    87b4:	5f ad       	ldd	r21, Y+63	; 0x3f
    87b6:	a3 97       	sbiw	r28, 0x23	; 35
    87b8:	44 34       	cpi	r20, 0x44	; 68
    87ba:	51 05       	cpc	r21, r1
    87bc:	09 f0       	breq	.+2      	; 0x87c0 <_printf_fn+0x2b2>
    87be:	30 e0       	ldi	r19, 0x00	; 0
    87c0:	83 2f       	mov	r24, r19
    87c2:	92 2f       	mov	r25, r18
    87c4:	a3 96       	adiw	r28, 0x23	; 35
    87c6:	ee ad       	ldd	r30, Y+62	; 0x3e
    87c8:	ff ad       	ldd	r31, Y+63	; 0x3f
    87ca:	a3 97       	sbiw	r28, 0x23	; 35
    87cc:	e2 54       	subi	r30, 0x42	; 66
    87ce:	f1 09       	sbc	r31, r1
    87d0:	e7 33       	cpi	r30, 0x37	; 55
    87d2:	f1 05       	cpc	r31, r1
    87d4:	08 f0       	brcs	.+2      	; 0x87d8 <_printf_fn+0x2ca>
    87d6:	57 c1       	rjmp	.+686    	; 0x8a86 <_printf_fn+0x578>
    87d8:	ea 5b       	subi	r30, 0xBA	; 186
    87da:	ff 4f       	sbci	r31, 0xFF	; 255
    87dc:	0c 94 de e6 	jmp	0x1cdbc	; 0x1cdbc <__tablejump2__>
    87e0:	32 e0       	ldi	r19, 0x02	; 2
    87e2:	43 2e       	mov	r4, r19
    87e4:	51 2c       	mov	r5, r1
    87e6:	29 2d       	mov	r18, r9
    87e8:	28 72       	andi	r18, 0x28	; 40
    87ea:	28 32       	cpi	r18, 0x28	; 40
    87ec:	11 f4       	brne	.+4      	; 0x87f2 <_printf_fn+0x2e4>
    87ee:	e8 94       	clt
    87f0:	95 f8       	bld	r9, 5
    87f2:	29 2d       	mov	r18, r9
    87f4:	22 72       	andi	r18, 0x22	; 34
    87f6:	22 32       	cpi	r18, 0x22	; 34
    87f8:	11 f4       	brne	.+4      	; 0x87fe <_printf_fn+0x2f0>
    87fa:	e8 94       	clt
    87fc:	95 f8       	bld	r9, 5
    87fe:	29 2d       	mov	r18, r9
    8800:	21 72       	andi	r18, 0x21	; 33
    8802:	21 32       	cpi	r18, 0x21	; 33
    8804:	79 f4       	brne	.+30     	; 0x8824 <_printf_fn+0x316>
    8806:	a1 96       	adiw	r28, 0x21	; 33
    8808:	ae ad       	ldd	r26, Y+62	; 0x3e
    880a:	bf ad       	ldd	r27, Y+63	; 0x3f
    880c:	a1 97       	sbiw	r28, 0x21	; 33
    880e:	6f 96       	adiw	r28, 0x1f	; 31
    8810:	ee ad       	ldd	r30, Y+62	; 0x3e
    8812:	ff ad       	ldd	r31, Y+63	; 0x3f
    8814:	6f 97       	sbiw	r28, 0x1f	; 31
    8816:	ae 17       	cp	r26, r30
    8818:	bf 07       	cpc	r27, r31
    881a:	24 f4       	brge	.+8      	; 0x8824 <_printf_fn+0x316>
    881c:	a1 96       	adiw	r28, 0x21	; 33
    881e:	ff af       	std	Y+63, r31	; 0x3f
    8820:	ee af       	std	Y+62, r30	; 0x3e
    8822:	a1 97       	sbiw	r28, 0x21	; 33
    8824:	29 2d       	mov	r18, r9
    8826:	23 72       	andi	r18, 0x23	; 35
    8828:	23 32       	cpi	r18, 0x23	; 35
    882a:	79 f4       	brne	.+30     	; 0x884a <_printf_fn+0x33c>
    882c:	a1 96       	adiw	r28, 0x21	; 33
    882e:	2e ad       	ldd	r18, Y+62	; 0x3e
    8830:	3f ad       	ldd	r19, Y+63	; 0x3f
    8832:	a1 97       	sbiw	r28, 0x21	; 33
    8834:	6f 96       	adiw	r28, 0x1f	; 31
    8836:	4e ad       	ldd	r20, Y+62	; 0x3e
    8838:	5f ad       	ldd	r21, Y+63	; 0x3f
    883a:	6f 97       	sbiw	r28, 0x1f	; 31
    883c:	24 17       	cp	r18, r20
    883e:	35 07       	cpc	r19, r21
    8840:	24 f4       	brge	.+8      	; 0x884a <_printf_fn+0x33c>
    8842:	a1 96       	adiw	r28, 0x21	; 33
    8844:	5f af       	std	Y+63, r21	; 0x3f
    8846:	4e af       	std	Y+62, r20	; 0x3e
    8848:	a1 97       	sbiw	r28, 0x21	; 33
    884a:	e8 94       	clt
    884c:	94 f8       	bld	r9, 4
    884e:	e8 94       	clt
    8850:	92 f8       	bld	r9, 2
    8852:	e8 94       	clt
    8854:	96 f8       	bld	r9, 6
    8856:	52 e0       	ldi	r21, 0x02	; 2
    8858:	45 16       	cp	r4, r21
    885a:	51 04       	cpc	r5, r1
    885c:	f9 f4       	brne	.+62     	; 0x889c <_printf_fn+0x38e>
    885e:	51 01       	movw	r10, r2
    8860:	82 e0       	ldi	r24, 0x02	; 2
    8862:	a8 0e       	add	r10, r24
    8864:	b1 1c       	adc	r11, r1
    8866:	d1 01       	movw	r26, r2
    8868:	8d 91       	ld	r24, X+
    886a:	9c 91       	ld	r25, X
    886c:	65 96       	adiw	r28, 0x15	; 21
    886e:	9f af       	std	Y+63, r25	; 0x3f
    8870:	8e af       	std	Y+62, r24	; 0x3e
    8872:	65 97       	sbiw	r28, 0x15	; 21
    8874:	a3 96       	adiw	r28, 0x23	; 35
    8876:	ee ad       	ldd	r30, Y+62	; 0x3e
    8878:	ff ad       	ldd	r31, Y+63	; 0x3f
    887a:	a3 97       	sbiw	r28, 0x23	; 35
    887c:	e4 34       	cpi	r30, 0x44	; 68
    887e:	f1 05       	cpc	r31, r1
    8880:	09 f0       	breq	.+2      	; 0x8884 <_printf_fn+0x376>
    8882:	ac c0       	rjmp	.+344    	; 0x89dc <_printf_fn+0x4ce>
    8884:	97 ff       	sbrs	r25, 7
    8886:	a7 c0       	rjmp	.+334    	; 0x89d6 <_printf_fn+0x4c8>
    8888:	68 94       	set
    888a:	96 f8       	bld	r9, 6
    888c:	91 95       	neg	r25
    888e:	81 95       	neg	r24
    8890:	91 09       	sbc	r25, r1
    8892:	65 96       	adiw	r28, 0x15	; 21
    8894:	9f af       	std	Y+63, r25	; 0x3f
    8896:	8e af       	std	Y+62, r24	; 0x3e
    8898:	65 97       	sbiw	r28, 0x15	; 21
    889a:	9d c0       	rjmp	.+314    	; 0x89d6 <_printf_fn+0x4c8>
    889c:	f4 e0       	ldi	r31, 0x04	; 4
    889e:	4f 16       	cp	r4, r31
    88a0:	51 04       	cpc	r5, r1
    88a2:	59 f5       	brne	.+86     	; 0x88fa <_printf_fn+0x3ec>
    88a4:	51 01       	movw	r10, r2
    88a6:	24 e0       	ldi	r18, 0x04	; 4
    88a8:	a2 0e       	add	r10, r18
    88aa:	b1 1c       	adc	r11, r1
    88ac:	f1 01       	movw	r30, r2
    88ae:	80 81       	ld	r24, Z
    88b0:	91 81       	ldd	r25, Z+1	; 0x01
    88b2:	a2 81       	ldd	r26, Z+2	; 0x02
    88b4:	b3 81       	ldd	r27, Z+3	; 0x03
    88b6:	2f 96       	adiw	r28, 0x0f	; 15
    88b8:	8c af       	std	Y+60, r24	; 0x3c
    88ba:	9d af       	std	Y+61, r25	; 0x3d
    88bc:	ae af       	std	Y+62, r26	; 0x3e
    88be:	bf af       	std	Y+63, r27	; 0x3f
    88c0:	2f 97       	sbiw	r28, 0x0f	; 15
    88c2:	a3 96       	adiw	r28, 0x23	; 35
    88c4:	2e ad       	ldd	r18, Y+62	; 0x3e
    88c6:	3f ad       	ldd	r19, Y+63	; 0x3f
    88c8:	a3 97       	sbiw	r28, 0x23	; 35
    88ca:	24 34       	cpi	r18, 0x44	; 68
    88cc:	31 05       	cpc	r19, r1
    88ce:	09 f0       	breq	.+2      	; 0x88d2 <_printf_fn+0x3c4>
    88d0:	8f c0       	rjmp	.+286    	; 0x89f0 <_printf_fn+0x4e2>
    88d2:	b7 ff       	sbrs	r27, 7
    88d4:	8a c0       	rjmp	.+276    	; 0x89ea <_printf_fn+0x4dc>
    88d6:	68 94       	set
    88d8:	96 f8       	bld	r9, 6
    88da:	b0 95       	com	r27
    88dc:	a0 95       	com	r26
    88de:	90 95       	com	r25
    88e0:	81 95       	neg	r24
    88e2:	9f 4f       	sbci	r25, 0xFF	; 255
    88e4:	af 4f       	sbci	r26, 0xFF	; 255
    88e6:	bf 4f       	sbci	r27, 0xFF	; 255
    88e8:	2f 96       	adiw	r28, 0x0f	; 15
    88ea:	8c af       	std	Y+60, r24	; 0x3c
    88ec:	9d af       	std	Y+61, r25	; 0x3d
    88ee:	ae af       	std	Y+62, r26	; 0x3e
    88f0:	bf af       	std	Y+63, r27	; 0x3f
    88f2:	2f 97       	sbiw	r28, 0x0f	; 15
    88f4:	7a c0       	rjmp	.+244    	; 0x89ea <_printf_fn+0x4dc>
    88f6:	81 e0       	ldi	r24, 0x01	; 1
    88f8:	90 e0       	ldi	r25, 0x00	; 0
    88fa:	51 01       	movw	r10, r2
    88fc:	38 e0       	ldi	r19, 0x08	; 8
    88fe:	43 16       	cp	r4, r19
    8900:	51 04       	cpc	r5, r1
    8902:	09 f0       	breq	.+2      	; 0x8906 <_printf_fn+0x3f8>
    8904:	7c c0       	rjmp	.+248    	; 0x89fe <_printf_fn+0x4f0>
    8906:	48 e0       	ldi	r20, 0x08	; 8
    8908:	a4 0e       	add	r10, r20
    890a:	b1 1c       	adc	r11, r1
    890c:	d1 01       	movw	r26, r2
    890e:	fc 90       	ld	r15, X
    8910:	f1 01       	movw	r30, r2
    8912:	01 81       	ldd	r16, Z+1	; 0x01
    8914:	12 81       	ldd	r17, Z+2	; 0x02
    8916:	f3 81       	ldd	r31, Z+3	; 0x03
    8918:	aa 96       	adiw	r28, 0x2a	; 42
    891a:	ff af       	std	Y+63, r31	; 0x3f
    891c:	aa 97       	sbiw	r28, 0x2a	; 42
    891e:	f1 01       	movw	r30, r2
    8920:	f4 81       	ldd	r31, Z+4	; 0x04
    8922:	ab 96       	adiw	r28, 0x2b	; 43
    8924:	ff af       	std	Y+63, r31	; 0x3f
    8926:	ab 97       	sbiw	r28, 0x2b	; 43
    8928:	f1 01       	movw	r30, r2
    892a:	b5 81       	ldd	r27, Z+5	; 0x05
    892c:	f6 81       	ldd	r31, Z+6	; 0x06
    892e:	af 96       	adiw	r28, 0x2f	; 47
    8930:	ff af       	std	Y+63, r31	; 0x3f
    8932:	af 97       	sbiw	r28, 0x2f	; 47
    8934:	f1 01       	movw	r30, r2
    8936:	37 80       	ldd	r3, Z+7	; 0x07
    8938:	24 96       	adiw	r28, 0x04	; 4
    893a:	ff ae       	std	Y+63, r15	; 0x3f
    893c:	24 97       	sbiw	r28, 0x04	; 4
    893e:	25 96       	adiw	r28, 0x05	; 5
    8940:	0f af       	std	Y+63, r16	; 0x3f
    8942:	25 97       	sbiw	r28, 0x05	; 5
    8944:	26 96       	adiw	r28, 0x06	; 6
    8946:	1f af       	std	Y+63, r17	; 0x3f
    8948:	26 97       	sbiw	r28, 0x06	; 6
    894a:	aa 96       	adiw	r28, 0x2a	; 42
    894c:	ff ad       	ldd	r31, Y+63	; 0x3f
    894e:	aa 97       	sbiw	r28, 0x2a	; 42
    8950:	27 96       	adiw	r28, 0x07	; 7
    8952:	ff af       	std	Y+63, r31	; 0x3f
    8954:	27 97       	sbiw	r28, 0x07	; 7
    8956:	ab 96       	adiw	r28, 0x2b	; 43
    8958:	ef ad       	ldd	r30, Y+63	; 0x3f
    895a:	ab 97       	sbiw	r28, 0x2b	; 43
    895c:	28 96       	adiw	r28, 0x08	; 8
    895e:	ef af       	std	Y+63, r30	; 0x3f
    8960:	28 97       	sbiw	r28, 0x08	; 8
    8962:	29 96       	adiw	r28, 0x09	; 9
    8964:	bf af       	std	Y+63, r27	; 0x3f
    8966:	29 97       	sbiw	r28, 0x09	; 9
    8968:	af 96       	adiw	r28, 0x2f	; 47
    896a:	ff ad       	ldd	r31, Y+63	; 0x3f
    896c:	af 97       	sbiw	r28, 0x2f	; 47
    896e:	2a 96       	adiw	r28, 0x0a	; 10
    8970:	ff af       	std	Y+63, r31	; 0x3f
    8972:	2a 97       	sbiw	r28, 0x0a	; 10
    8974:	2b 96       	adiw	r28, 0x0b	; 11
    8976:	3f ae       	std	Y+63, r3	; 0x3f
    8978:	2b 97       	sbiw	r28, 0x0b	; 11
    897a:	89 2b       	or	r24, r25
    897c:	09 f4       	brne	.+2      	; 0x8980 <_printf_fn+0x472>
    897e:	4a c0       	rjmp	.+148    	; 0x8a14 <_printf_fn+0x506>
    8980:	2f 2d       	mov	r18, r15
    8982:	30 2f       	mov	r19, r16
    8984:	41 2f       	mov	r20, r17
    8986:	aa 96       	adiw	r28, 0x2a	; 42
    8988:	5f ad       	ldd	r21, Y+63	; 0x3f
    898a:	aa 97       	sbiw	r28, 0x2a	; 42
    898c:	6e 2f       	mov	r22, r30
    898e:	7b 2f       	mov	r23, r27
    8990:	8f 2f       	mov	r24, r31
    8992:	93 2d       	mov	r25, r3
    8994:	a0 e0       	ldi	r26, 0x00	; 0
    8996:	0e 94 4b e7 	call	0x1ce96	; 0x1ce96 <__cmpdi2_s8>
    899a:	e4 f5       	brge	.+120    	; 0x8a14 <_printf_fn+0x506>
    899c:	68 94       	set
    899e:	96 f8       	bld	r9, 6
    89a0:	0e 94 fd e6 	call	0x1cdfa	; 0x1cdfa <__negdi2>
    89a4:	24 96       	adiw	r28, 0x04	; 4
    89a6:	2f af       	std	Y+63, r18	; 0x3f
    89a8:	24 97       	sbiw	r28, 0x04	; 4
    89aa:	25 96       	adiw	r28, 0x05	; 5
    89ac:	3f af       	std	Y+63, r19	; 0x3f
    89ae:	25 97       	sbiw	r28, 0x05	; 5
    89b0:	26 96       	adiw	r28, 0x06	; 6
    89b2:	4f af       	std	Y+63, r20	; 0x3f
    89b4:	26 97       	sbiw	r28, 0x06	; 6
    89b6:	27 96       	adiw	r28, 0x07	; 7
    89b8:	5f af       	std	Y+63, r21	; 0x3f
    89ba:	27 97       	sbiw	r28, 0x07	; 7
    89bc:	28 96       	adiw	r28, 0x08	; 8
    89be:	6f af       	std	Y+63, r22	; 0x3f
    89c0:	28 97       	sbiw	r28, 0x08	; 8
    89c2:	29 96       	adiw	r28, 0x09	; 9
    89c4:	7f af       	std	Y+63, r23	; 0x3f
    89c6:	29 97       	sbiw	r28, 0x09	; 9
    89c8:	2a 96       	adiw	r28, 0x0a	; 10
    89ca:	8f af       	std	Y+63, r24	; 0x3f
    89cc:	2a 97       	sbiw	r28, 0x0a	; 10
    89ce:	2b 96       	adiw	r28, 0x0b	; 11
    89d0:	9f af       	std	Y+63, r25	; 0x3f
    89d2:	2b 97       	sbiw	r28, 0x0b	; 11
    89d4:	1f c0       	rjmp	.+62     	; 0x8a14 <_printf_fn+0x506>
    89d6:	22 e0       	ldi	r18, 0x02	; 2
    89d8:	42 2e       	mov	r4, r18
    89da:	51 2c       	mov	r5, r1
    89dc:	6c 96       	adiw	r28, 0x1c	; 28
    89de:	8f ad       	ldd	r24, Y+63	; 0x3f
    89e0:	6c 97       	sbiw	r28, 0x1c	; 28
    89e2:	6d 96       	adiw	r28, 0x1d	; 29
    89e4:	9f ad       	ldd	r25, Y+63	; 0x3f
    89e6:	6d 97       	sbiw	r28, 0x1d	; 29
    89e8:	1b c0       	rjmp	.+54     	; 0x8a20 <_printf_fn+0x512>
    89ea:	94 e0       	ldi	r25, 0x04	; 4
    89ec:	49 2e       	mov	r4, r25
    89ee:	51 2c       	mov	r5, r1
    89f0:	6a 96       	adiw	r28, 0x1a	; 26
    89f2:	8f ad       	ldd	r24, Y+63	; 0x3f
    89f4:	6a 97       	sbiw	r28, 0x1a	; 26
    89f6:	6b 96       	adiw	r28, 0x1b	; 27
    89f8:	9f ad       	ldd	r25, Y+63	; 0x3f
    89fa:	6b 97       	sbiw	r28, 0x1b	; 27
    89fc:	11 c0       	rjmp	.+34     	; 0x8a20 <_printf_fn+0x512>
    89fe:	66 96       	adiw	r28, 0x16	; 22
    8a00:	8f ad       	ldd	r24, Y+63	; 0x3f
    8a02:	66 97       	sbiw	r28, 0x16	; 22
    8a04:	67 96       	adiw	r28, 0x17	; 23
    8a06:	9f ad       	ldd	r25, Y+63	; 0x3f
    8a08:	67 97       	sbiw	r28, 0x17	; 23
    8a0a:	a3 96       	adiw	r28, 0x23	; 35
    8a0c:	1f ae       	std	Y+63, r1	; 0x3f
    8a0e:	1e ae       	std	Y+62, r1	; 0x3e
    8a10:	a3 97       	sbiw	r28, 0x23	; 35
    8a12:	06 c0       	rjmp	.+12     	; 0x8a20 <_printf_fn+0x512>
    8a14:	68 96       	adiw	r28, 0x18	; 24
    8a16:	8f ad       	ldd	r24, Y+63	; 0x3f
    8a18:	68 97       	sbiw	r28, 0x18	; 24
    8a1a:	69 96       	adiw	r28, 0x19	; 25
    8a1c:	9f ad       	ldd	r25, Y+63	; 0x3f
    8a1e:	69 97       	sbiw	r28, 0x19	; 25
    8a20:	2f ef       	ldi	r18, 0xFF	; 255
    8a22:	62 1a       	sub	r6, r18
    8a24:	72 0a       	sbc	r7, r18
    8a26:	82 0a       	sbc	r8, r18
    8a28:	15 01       	movw	r2, r10
    8a2a:	33 c0       	rjmp	.+102    	; 0x8a92 <_printf_fn+0x584>
    8a2c:	91 fc       	sbrc	r9, 1
    8a2e:	08 c0       	rjmp	.+16     	; 0x8a40 <_printf_fn+0x532>
    8a30:	68 94       	set
    8a32:	91 f8       	bld	r9, 1
    8a34:	46 e0       	ldi	r20, 0x06	; 6
    8a36:	50 e0       	ldi	r21, 0x00	; 0
    8a38:	a1 96       	adiw	r28, 0x21	; 33
    8a3a:	5f af       	std	Y+63, r21	; 0x3f
    8a3c:	4e af       	std	Y+62, r20	; 0x3e
    8a3e:	a1 97       	sbiw	r28, 0x21	; 33
    8a40:	d1 01       	movw	r26, r2
    8a42:	8d 91       	ld	r24, X+
    8a44:	9d 91       	ld	r25, X+
    8a46:	0d 90       	ld	r0, X+
    8a48:	bc 91       	ld	r27, X
    8a4a:	a0 2d       	mov	r26, r0
    8a4c:	a9 96       	adiw	r28, 0x29	; 41
    8a4e:	8c af       	std	Y+60, r24	; 0x3c
    8a50:	9d af       	std	Y+61, r25	; 0x3d
    8a52:	ae af       	std	Y+62, r26	; 0x3e
    8a54:	bf af       	std	Y+63, r27	; 0x3f
    8a56:	a9 97       	sbiw	r28, 0x29	; 41
    8a58:	bf ef       	ldi	r27, 0xFF	; 255
    8a5a:	6b 1a       	sub	r6, r27
    8a5c:	7b 0a       	sbc	r7, r27
    8a5e:	8b 0a       	sbc	r8, r27
    8a60:	f1 01       	movw	r30, r2
    8a62:	34 96       	adiw	r30, 0x04	; 4
    8a64:	1f 01       	movw	r2, r30
    8a66:	0f c0       	rjmp	.+30     	; 0x8a86 <_printf_fn+0x578>
    8a68:	ff ef       	ldi	r31, 0xFF	; 255
    8a6a:	6f 1a       	sub	r6, r31
    8a6c:	7f 0a       	sbc	r7, r31
    8a6e:	8f 0a       	sbc	r8, r31
    8a70:	c5 c0       	rjmp	.+394    	; 0x8bfc <_printf_fn+0x6ee>
    8a72:	2f ef       	ldi	r18, 0xFF	; 255
    8a74:	62 1a       	sub	r6, r18
    8a76:	72 0a       	sbc	r7, r18
    8a78:	82 0a       	sbc	r8, r18
    8a7a:	11 c1       	rjmp	.+546    	; 0x8c9e <_printf_fn+0x790>
    8a7c:	3f ef       	ldi	r19, 0xFF	; 255
    8a7e:	63 1a       	sub	r6, r19
    8a80:	73 0a       	sbc	r7, r19
    8a82:	83 0a       	sbc	r8, r19
    8a84:	c8 c0       	rjmp	.+400    	; 0x8c16 <_printf_fn+0x708>
    8a86:	66 96       	adiw	r28, 0x16	; 22
    8a88:	8f ad       	ldd	r24, Y+63	; 0x3f
    8a8a:	66 97       	sbiw	r28, 0x16	; 22
    8a8c:	67 96       	adiw	r28, 0x17	; 23
    8a8e:	9f ad       	ldd	r25, Y+63	; 0x3f
    8a90:	67 97       	sbiw	r28, 0x17	; 23
    8a92:	a3 96       	adiw	r28, 0x23	; 35
    8a94:	ee ad       	ldd	r30, Y+62	; 0x3e
    8a96:	ff ad       	ldd	r31, Y+63	; 0x3f
    8a98:	a3 97       	sbiw	r28, 0x23	; 35
    8a9a:	e2 54       	subi	r30, 0x42	; 66
    8a9c:	f1 09       	sbc	r31, r1
    8a9e:	e7 33       	cpi	r30, 0x37	; 55
    8aa0:	f1 05       	cpc	r31, r1
    8aa2:	08 f0       	brcs	.+2      	; 0x8aa6 <_printf_fn+0x598>
    8aa4:	56 c1       	rjmp	.+684    	; 0x8d52 <_printf_fn+0x844>
    8aa6:	e3 58       	subi	r30, 0x83	; 131
    8aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    8aaa:	0c 94 de e6 	jmp	0x1cdbc	; 0x1cdbc <__tablejump2__>
    8aae:	e8 94       	clt
    8ab0:	94 f8       	bld	r9, 4
    8ab2:	e8 94       	clt
    8ab4:	92 f8       	bld	r9, 2
    8ab6:	a9 2c       	mov	r10, r9
    8ab8:	b1 2c       	mov	r11, r1
    8aba:	a1 96       	adiw	r28, 0x21	; 33
    8abc:	ce ac       	ldd	r12, Y+62	; 0x3e
    8abe:	df ac       	ldd	r13, Y+63	; 0x3f
    8ac0:	a1 97       	sbiw	r28, 0x21	; 33
    8ac2:	6f 96       	adiw	r28, 0x1f	; 31
    8ac4:	ee ac       	ldd	r14, Y+62	; 0x3e
    8ac6:	ff ac       	ldd	r15, Y+63	; 0x3f
    8ac8:	6f 97       	sbiw	r28, 0x1f	; 31
    8aca:	0a e0       	ldi	r16, 0x0A	; 10
    8acc:	10 e0       	ldi	r17, 0x00	; 0
    8ace:	19 c0       	rjmp	.+50     	; 0x8b02 <_printf_fn+0x5f4>
    8ad0:	a9 2c       	mov	r10, r9
    8ad2:	b1 2c       	mov	r11, r1
    8ad4:	a1 96       	adiw	r28, 0x21	; 33
    8ad6:	ce ac       	ldd	r12, Y+62	; 0x3e
    8ad8:	df ac       	ldd	r13, Y+63	; 0x3f
    8ada:	a1 97       	sbiw	r28, 0x21	; 33
    8adc:	6f 96       	adiw	r28, 0x1f	; 31
    8ade:	ee ac       	ldd	r14, Y+62	; 0x3e
    8ae0:	ff ac       	ldd	r15, Y+63	; 0x3f
    8ae2:	6f 97       	sbiw	r28, 0x1f	; 31
    8ae4:	02 e0       	ldi	r16, 0x02	; 2
    8ae6:	10 e0       	ldi	r17, 0x00	; 0
    8ae8:	0c c0       	rjmp	.+24     	; 0x8b02 <_printf_fn+0x5f4>
    8aea:	a9 2c       	mov	r10, r9
    8aec:	b1 2c       	mov	r11, r1
    8aee:	a1 96       	adiw	r28, 0x21	; 33
    8af0:	ce ac       	ldd	r12, Y+62	; 0x3e
    8af2:	df ac       	ldd	r13, Y+63	; 0x3f
    8af4:	a1 97       	sbiw	r28, 0x21	; 33
    8af6:	6f 96       	adiw	r28, 0x1f	; 31
    8af8:	ee ac       	ldd	r14, Y+62	; 0x3e
    8afa:	ff ac       	ldd	r15, Y+63	; 0x3f
    8afc:	6f 97       	sbiw	r28, 0x1f	; 31
    8afe:	08 e0       	ldi	r16, 0x08	; 8
    8b00:	10 e0       	ldi	r17, 0x00	; 0
    8b02:	22 e4       	ldi	r18, 0x42	; 66
    8b04:	30 e0       	ldi	r19, 0x00	; 0
    8b06:	ae 01       	movw	r20, r28
    8b08:	4f 5f       	subi	r20, 0xFF	; 255
    8b0a:	5f 4f       	sbci	r21, 0xFF	; 255
    8b0c:	b2 01       	movw	r22, r4
    8b0e:	7d d9       	rcall	.-3334   	; 0x7e0a <p_ntoa>
    8b10:	34 c0       	rjmp	.+104    	; 0x8b7a <_printf_fn+0x66c>
    8b12:	a9 2c       	mov	r10, r9
    8b14:	b1 2c       	mov	r11, r1
    8b16:	a1 96       	adiw	r28, 0x21	; 33
    8b18:	ce ac       	ldd	r12, Y+62	; 0x3e
    8b1a:	df ac       	ldd	r13, Y+63	; 0x3f
    8b1c:	a1 97       	sbiw	r28, 0x21	; 33
    8b1e:	6f 96       	adiw	r28, 0x1f	; 31
    8b20:	ee ac       	ldd	r14, Y+62	; 0x3e
    8b22:	ff ac       	ldd	r15, Y+63	; 0x3f
    8b24:	6f 97       	sbiw	r28, 0x1f	; 31
    8b26:	00 e1       	ldi	r16, 0x10	; 16
    8b28:	10 e0       	ldi	r17, 0x00	; 0
    8b2a:	22 e4       	ldi	r18, 0x42	; 66
    8b2c:	30 e0       	ldi	r19, 0x00	; 0
    8b2e:	ae 01       	movw	r20, r28
    8b30:	4f 5f       	subi	r20, 0xFF	; 255
    8b32:	5f 4f       	sbci	r21, 0xFF	; 255
    8b34:	b2 01       	movw	r22, r4
    8b36:	69 d9       	rcall	.-3374   	; 0x7e0a <p_ntoa>
    8b38:	6c 01       	movw	r12, r24
    8b3a:	a3 96       	adiw	r28, 0x23	; 35
    8b3c:	6e ad       	ldd	r22, Y+62	; 0x3e
    8b3e:	7f ad       	ldd	r23, Y+63	; 0x3f
    8b40:	a3 97       	sbiw	r28, 0x23	; 35
    8b42:	67 7f       	andi	r22, 0xF7	; 247
    8b44:	60 35       	cpi	r22, 0x50	; 80
    8b46:	71 05       	cpc	r23, r1
    8b48:	09 f0       	breq	.+2      	; 0x8b4c <_printf_fn+0x63e>
    8b4a:	3f c0       	rjmp	.+126    	; 0x8bca <_printf_fn+0x6bc>
    8b4c:	3a c0       	rjmp	.+116    	; 0x8bc2 <_printf_fn+0x6b4>
    8b4e:	c9 2c       	mov	r12, r9
    8b50:	d1 2c       	mov	r13, r1
    8b52:	a1 96       	adiw	r28, 0x21	; 33
    8b54:	ee ac       	ldd	r14, Y+62	; 0x3e
    8b56:	ff ac       	ldd	r15, Y+63	; 0x3f
    8b58:	a1 97       	sbiw	r28, 0x21	; 33
    8b5a:	6f 96       	adiw	r28, 0x1f	; 31
    8b5c:	0e ad       	ldd	r16, Y+62	; 0x3e
    8b5e:	1f ad       	ldd	r17, Y+63	; 0x3f
    8b60:	6f 97       	sbiw	r28, 0x1f	; 31
    8b62:	22 e4       	ldi	r18, 0x42	; 66
    8b64:	30 e0       	ldi	r19, 0x00	; 0
    8b66:	ae 01       	movw	r20, r28
    8b68:	4f 5f       	subi	r20, 0xFF	; 255
    8b6a:	5f 4f       	sbci	r21, 0xFF	; 255
    8b6c:	a9 96       	adiw	r28, 0x29	; 41
    8b6e:	6c ad       	ldd	r22, Y+60	; 0x3c
    8b70:	7d ad       	ldd	r23, Y+61	; 0x3d
    8b72:	8e ad       	ldd	r24, Y+62	; 0x3e
    8b74:	9f ad       	ldd	r25, Y+63	; 0x3f
    8b76:	a9 97       	sbiw	r28, 0x29	; 41
    8b78:	9d d9       	rcall	.-3270   	; 0x7eb4 <p_ftoa>
    8b7a:	93 fa       	bst	r9, 3
    8b7c:	00 27       	eor	r16, r16
    8b7e:	00 f9       	bld	r16, 0
    8b80:	10 e0       	ldi	r17, 0x00	; 0
    8b82:	9c 01       	movw	r18, r24
    8b84:	27 c0       	rjmp	.+78     	; 0x8bd4 <_printf_fn+0x6c6>
    8b86:	c9 2c       	mov	r12, r9
    8b88:	d1 2c       	mov	r13, r1
    8b8a:	a1 96       	adiw	r28, 0x21	; 33
    8b8c:	ee ac       	ldd	r14, Y+62	; 0x3e
    8b8e:	ff ac       	ldd	r15, Y+63	; 0x3f
    8b90:	a1 97       	sbiw	r28, 0x21	; 33
    8b92:	6f 96       	adiw	r28, 0x1f	; 31
    8b94:	0e ad       	ldd	r16, Y+62	; 0x3e
    8b96:	1f ad       	ldd	r17, Y+63	; 0x3f
    8b98:	6f 97       	sbiw	r28, 0x1f	; 31
    8b9a:	22 e4       	ldi	r18, 0x42	; 66
    8b9c:	30 e0       	ldi	r19, 0x00	; 0
    8b9e:	ae 01       	movw	r20, r28
    8ba0:	4f 5f       	subi	r20, 0xFF	; 255
    8ba2:	5f 4f       	sbci	r21, 0xFF	; 255
    8ba4:	a9 96       	adiw	r28, 0x29	; 41
    8ba6:	6c ad       	ldd	r22, Y+60	; 0x3c
    8ba8:	7d ad       	ldd	r23, Y+61	; 0x3d
    8baa:	8e ad       	ldd	r24, Y+62	; 0x3e
    8bac:	9f ad       	ldd	r25, Y+63	; 0x3f
    8bae:	a9 97       	sbiw	r28, 0x29	; 41
    8bb0:	88 da       	rcall	.-2800   	; 0x80c2 <p_etoa>
    8bb2:	6c 01       	movw	r12, r24
    8bb4:	a3 96       	adiw	r28, 0x23	; 35
    8bb6:	4e ad       	ldd	r20, Y+62	; 0x3e
    8bb8:	5f ad       	ldd	r21, Y+63	; 0x3f
    8bba:	a3 97       	sbiw	r28, 0x23	; 35
    8bbc:	45 34       	cpi	r20, 0x45	; 69
    8bbe:	51 05       	cpc	r21, r1
    8bc0:	21 f4       	brne	.+8      	; 0x8bca <_printf_fn+0x6bc>
    8bc2:	ce 01       	movw	r24, r28
    8bc4:	01 96       	adiw	r24, 0x01	; 1
    8bc6:	0e 94 ba 31 	call	0x6374	; 0x6374 <strupper>
    8bca:	93 fa       	bst	r9, 3
    8bcc:	00 27       	eor	r16, r16
    8bce:	00 f9       	bld	r16, 0
    8bd0:	10 e0       	ldi	r17, 0x00	; 0
    8bd2:	96 01       	movw	r18, r12
    8bd4:	6f 96       	adiw	r28, 0x1f	; 31
    8bd6:	4e ad       	ldd	r20, Y+62	; 0x3e
    8bd8:	5f ad       	ldd	r21, Y+63	; 0x3f
    8bda:	6f 97       	sbiw	r28, 0x1f	; 31
    8bdc:	be 01       	movw	r22, r28
    8bde:	6f 5f       	subi	r22, 0xFF	; 255
    8be0:	7f 4f       	sbci	r23, 0xFF	; 255
    8be2:	a5 96       	adiw	r28, 0x25	; 37
    8be4:	8e ad       	ldd	r24, Y+62	; 0x3e
    8be6:	9f ad       	ldd	r25, Y+63	; 0x3f
    8be8:	a5 97       	sbiw	r28, 0x25	; 37
    8bea:	d7 db       	rcall	.-2130   	; 0x839a <_puts_pad>
    8bec:	b6 c0       	rjmp	.+364    	; 0x8d5a <_printf_fn+0x84c>
    8bee:	a3 96       	adiw	r28, 0x23	; 35
    8bf0:	8e ad       	ldd	r24, Y+62	; 0x3e
    8bf2:	9f ad       	ldd	r25, Y+63	; 0x3f
    8bf4:	a3 97       	sbiw	r28, 0x23	; 35
    8bf6:	83 37       	cpi	r24, 0x73	; 115
    8bf8:	91 05       	cpc	r25, r1
    8bfa:	69 f4       	brne	.+26     	; 0x8c16 <_printf_fn+0x708>
    8bfc:	61 01       	movw	r12, r2
    8bfe:	92 e0       	ldi	r25, 0x02	; 2
    8c00:	c9 0e       	add	r12, r25
    8c02:	d1 1c       	adc	r13, r1
    8c04:	d1 01       	movw	r26, r2
    8c06:	6d 91       	ld	r22, X+
    8c08:	7c 91       	ld	r23, X
    8c0a:	61 15       	cp	r22, r1
    8c0c:	71 05       	cpc	r23, r1
    8c0e:	91 f4       	brne	.+36     	; 0x8c34 <_printf_fn+0x726>
    8c10:	6a e1       	ldi	r22, 0x1A	; 26
    8c12:	74 e0       	ldi	r23, 0x04	; 4
    8c14:	0f c0       	rjmp	.+30     	; 0x8c34 <_printf_fn+0x726>
    8c16:	61 01       	movw	r12, r2
    8c18:	b2 e0       	ldi	r27, 0x02	; 2
    8c1a:	cb 0e       	add	r12, r27
    8c1c:	d1 1c       	adc	r13, r1
    8c1e:	f1 01       	movw	r30, r2
    8c20:	80 81       	ld	r24, Z
    8c22:	60 96       	adiw	r28, 0x10	; 16
    8c24:	8f af       	std	Y+63, r24	; 0x3f
    8c26:	60 97       	sbiw	r28, 0x10	; 16
    8c28:	61 96       	adiw	r28, 0x11	; 17
    8c2a:	1f ae       	std	Y+63, r1	; 0x3f
    8c2c:	61 97       	sbiw	r28, 0x11	; 17
    8c2e:	be 01       	movw	r22, r28
    8c30:	61 5b       	subi	r22, 0xB1	; 177
    8c32:	7f 4f       	sbci	r23, 0xFF	; 255
    8c34:	fb 01       	movw	r30, r22
    8c36:	01 90       	ld	r0, Z+
    8c38:	00 20       	and	r0, r0
    8c3a:	e9 f7       	brne	.-6      	; 0x8c36 <_printf_fn+0x728>
    8c3c:	31 97       	sbiw	r30, 0x01	; 1
    8c3e:	e6 1b       	sub	r30, r22
    8c40:	f7 0b       	sbc	r31, r23
    8c42:	a1 96       	adiw	r28, 0x21	; 33
    8c44:	2e ad       	ldd	r18, Y+62	; 0x3e
    8c46:	3f ad       	ldd	r19, Y+63	; 0x3f
    8c48:	a1 97       	sbiw	r28, 0x21	; 33
    8c4a:	23 2b       	or	r18, r19
    8c4c:	21 f4       	brne	.+8      	; 0x8c56 <_printf_fn+0x748>
    8c4e:	a1 96       	adiw	r28, 0x21	; 33
    8c50:	ff af       	std	Y+63, r31	; 0x3f
    8c52:	ee af       	std	Y+62, r30	; 0x3e
    8c54:	a1 97       	sbiw	r28, 0x21	; 33
    8c56:	6f 96       	adiw	r28, 0x1f	; 31
    8c58:	4e ad       	ldd	r20, Y+62	; 0x3e
    8c5a:	5f ad       	ldd	r21, Y+63	; 0x3f
    8c5c:	6f 97       	sbiw	r28, 0x1f	; 31
    8c5e:	a1 96       	adiw	r28, 0x21	; 33
    8c60:	8e ad       	ldd	r24, Y+62	; 0x3e
    8c62:	9f ad       	ldd	r25, Y+63	; 0x3f
    8c64:	a1 97       	sbiw	r28, 0x21	; 33
    8c66:	48 17       	cp	r20, r24
    8c68:	59 07       	cpc	r21, r25
    8c6a:	3c f4       	brge	.+14     	; 0x8c7a <_printf_fn+0x76c>
    8c6c:	41 15       	cp	r20, r1
    8c6e:	51 05       	cpc	r21, r1
    8c70:	21 f0       	breq	.+8      	; 0x8c7a <_printf_fn+0x76c>
    8c72:	a1 96       	adiw	r28, 0x21	; 33
    8c74:	5f af       	std	Y+63, r21	; 0x3f
    8c76:	4e af       	std	Y+62, r20	; 0x3e
    8c78:	a1 97       	sbiw	r28, 0x21	; 33
    8c7a:	93 fa       	bst	r9, 3
    8c7c:	00 27       	eor	r16, r16
    8c7e:	00 f9       	bld	r16, 0
    8c80:	10 e0       	ldi	r17, 0x00	; 0
    8c82:	a1 96       	adiw	r28, 0x21	; 33
    8c84:	2e ad       	ldd	r18, Y+62	; 0x3e
    8c86:	3f ad       	ldd	r19, Y+63	; 0x3f
    8c88:	a1 97       	sbiw	r28, 0x21	; 33
    8c8a:	6f 96       	adiw	r28, 0x1f	; 31
    8c8c:	4e ad       	ldd	r20, Y+62	; 0x3e
    8c8e:	5f ad       	ldd	r21, Y+63	; 0x3f
    8c90:	6f 97       	sbiw	r28, 0x1f	; 31
    8c92:	a5 96       	adiw	r28, 0x25	; 37
    8c94:	8e ad       	ldd	r24, Y+62	; 0x3e
    8c96:	9f ad       	ldd	r25, Y+63	; 0x3f
    8c98:	a5 97       	sbiw	r28, 0x25	; 37
    8c9a:	7f db       	rcall	.-2306   	; 0x839a <_puts_pad>
    8c9c:	45 c0       	rjmp	.+138    	; 0x8d28 <_printf_fn+0x81a>
    8c9e:	61 01       	movw	r12, r2
    8ca0:	92 e0       	ldi	r25, 0x02	; 2
    8ca2:	c9 0e       	add	r12, r25
    8ca4:	d1 1c       	adc	r13, r1
    8ca6:	d1 01       	movw	r26, r2
    8ca8:	2d 90       	ld	r2, X+
    8caa:	3c 90       	ld	r3, X
    8cac:	41 2c       	mov	r4, r1
    8cae:	21 14       	cp	r2, r1
    8cb0:	31 04       	cpc	r3, r1
    8cb2:	41 04       	cpc	r4, r1
    8cb4:	29 f4       	brne	.+10     	; 0x8cc0 <_printf_fn+0x7b2>
    8cb6:	ae 96       	adiw	r28, 0x2e	; 46
    8cb8:	2d ac       	ldd	r2, Y+61	; 0x3d
    8cba:	3e ac       	ldd	r3, Y+62	; 0x3e
    8cbc:	4f ac       	ldd	r4, Y+63	; 0x3f
    8cbe:	ae 97       	sbiw	r28, 0x2e	; 46
    8cc0:	84 2d       	mov	r24, r4
    8cc2:	b1 01       	movw	r22, r2
    8cc4:	08 dc       	rcall	.-2032   	; 0x84d6 <strlen_X>
    8cc6:	a1 96       	adiw	r28, 0x21	; 33
    8cc8:	ee ad       	ldd	r30, Y+62	; 0x3e
    8cca:	ff ad       	ldd	r31, Y+63	; 0x3f
    8ccc:	a1 97       	sbiw	r28, 0x21	; 33
    8cce:	ef 2b       	or	r30, r31
    8cd0:	31 f4       	brne	.+12     	; 0x8cde <_printf_fn+0x7d0>
    8cd2:	a0 96       	adiw	r28, 0x20	; 32
    8cd4:	8f af       	std	Y+63, r24	; 0x3f
    8cd6:	a0 97       	sbiw	r28, 0x20	; 32
    8cd8:	a1 96       	adiw	r28, 0x21	; 33
    8cda:	9f af       	std	Y+63, r25	; 0x3f
    8cdc:	a1 97       	sbiw	r28, 0x21	; 33
    8cde:	6f 96       	adiw	r28, 0x1f	; 31
    8ce0:	2e ad       	ldd	r18, Y+62	; 0x3e
    8ce2:	3f ad       	ldd	r19, Y+63	; 0x3f
    8ce4:	6f 97       	sbiw	r28, 0x1f	; 31
    8ce6:	a1 96       	adiw	r28, 0x21	; 33
    8ce8:	4e ad       	ldd	r20, Y+62	; 0x3e
    8cea:	5f ad       	ldd	r21, Y+63	; 0x3f
    8cec:	a1 97       	sbiw	r28, 0x21	; 33
    8cee:	24 17       	cp	r18, r20
    8cf0:	35 07       	cpc	r19, r21
    8cf2:	3c f4       	brge	.+14     	; 0x8d02 <_printf_fn+0x7f4>
    8cf4:	21 15       	cp	r18, r1
    8cf6:	31 05       	cpc	r19, r1
    8cf8:	21 f0       	breq	.+8      	; 0x8d02 <_printf_fn+0x7f4>
    8cfa:	a1 96       	adiw	r28, 0x21	; 33
    8cfc:	3f af       	std	Y+63, r19	; 0x3f
    8cfe:	2e af       	std	Y+62, r18	; 0x3e
    8d00:	a1 97       	sbiw	r28, 0x21	; 33
    8d02:	93 fa       	bst	r9, 3
    8d04:	ee 24       	eor	r14, r14
    8d06:	e0 f8       	bld	r14, 0
    8d08:	f1 2c       	mov	r15, r1
    8d0a:	a1 96       	adiw	r28, 0x21	; 33
    8d0c:	0e ad       	ldd	r16, Y+62	; 0x3e
    8d0e:	1f ad       	ldd	r17, Y+63	; 0x3f
    8d10:	a1 97       	sbiw	r28, 0x21	; 33
    8d12:	6f 96       	adiw	r28, 0x1f	; 31
    8d14:	2e ad       	ldd	r18, Y+62	; 0x3e
    8d16:	3f ad       	ldd	r19, Y+63	; 0x3f
    8d18:	6f 97       	sbiw	r28, 0x1f	; 31
    8d1a:	64 2d       	mov	r22, r4
    8d1c:	a1 01       	movw	r20, r2
    8d1e:	a5 96       	adiw	r28, 0x25	; 37
    8d20:	8e ad       	ldd	r24, Y+62	; 0x3e
    8d22:	9f ad       	ldd	r25, Y+63	; 0x3f
    8d24:	a5 97       	sbiw	r28, 0x25	; 37
    8d26:	7b db       	rcall	.-2314   	; 0x841e <_puts_pad_X>
    8d28:	16 01       	movw	r2, r12
    8d2a:	17 c0       	rjmp	.+46     	; 0x8d5a <_printf_fn+0x84c>
    8d2c:	f6 01       	movw	r30, r12
    8d2e:	5e 2d       	mov	r21, r14
    8d30:	0e 94 44 e7 	call	0x1ce88	; 0x1ce88 <__xload_1>
    8d34:	66 23       	and	r22, r22
    8d36:	89 f0       	breq	.+34     	; 0x8d5a <_printf_fn+0x84c>
    8d38:	5f ef       	ldi	r21, 0xFF	; 255
    8d3a:	c5 1a       	sub	r12, r21
    8d3c:	d5 0a       	sbc	r13, r21
    8d3e:	e5 0a       	sbc	r14, r21
    8d40:	a5 96       	adiw	r28, 0x25	; 37
    8d42:	ae ad       	ldd	r26, Y+62	; 0x3e
    8d44:	bf ad       	ldd	r27, Y+63	; 0x3f
    8d46:	a5 97       	sbiw	r28, 0x25	; 37
    8d48:	ed 91       	ld	r30, X+
    8d4a:	fc 91       	ld	r31, X
    8d4c:	11 97       	sbiw	r26, 0x01	; 1
    8d4e:	cd 01       	movw	r24, r26
    8d50:	09 95       	icall
    8d52:	6c 14       	cp	r6, r12
    8d54:	7d 04       	cpc	r7, r13
    8d56:	8e 04       	cpc	r8, r14
    8d58:	48 f7       	brcc	.-46     	; 0x8d2c <_printf_fn+0x81e>
    8d5a:	e8 2c       	mov	r14, r8
    8d5c:	63 01       	movw	r12, r6
    8d5e:	0f cc       	rjmp	.-2018   	; 0x857e <_printf_fn+0x70>
    8d60:	82 e0       	ldi	r24, 0x02	; 2
    8d62:	48 2e       	mov	r4, r24
    8d64:	51 2c       	mov	r5, r1
    8d66:	0d cd       	rjmp	.-1510   	; 0x8782 <_printf_fn+0x274>
    8d68:	f2 e0       	ldi	r31, 0x02	; 2
    8d6a:	4f 16       	cp	r4, r31
    8d6c:	51 04       	cpc	r5, r1
    8d6e:	61 f4       	brne	.+24     	; 0x8d88 <_printf_fn+0x87a>
    8d70:	51 01       	movw	r10, r2
    8d72:	b2 e0       	ldi	r27, 0x02	; 2
    8d74:	ab 0e       	add	r10, r27
    8d76:	b1 1c       	adc	r11, r1
    8d78:	f1 01       	movw	r30, r2
    8d7a:	80 81       	ld	r24, Z
    8d7c:	91 81       	ldd	r25, Z+1	; 0x01
    8d7e:	65 96       	adiw	r28, 0x15	; 21
    8d80:	9f af       	std	Y+63, r25	; 0x3f
    8d82:	8e af       	std	Y+62, r24	; 0x3e
    8d84:	65 97       	sbiw	r28, 0x15	; 21
    8d86:	7e cd       	rjmp	.-1284   	; 0x8884 <_printf_fn+0x376>
    8d88:	f4 e0       	ldi	r31, 0x04	; 4
    8d8a:	4f 16       	cp	r4, r31
    8d8c:	51 04       	cpc	r5, r1
    8d8e:	09 f0       	breq	.+2      	; 0x8d92 <_printf_fn+0x884>
    8d90:	b2 cd       	rjmp	.-1180   	; 0x88f6 <_printf_fn+0x3e8>
    8d92:	51 01       	movw	r10, r2
    8d94:	24 e0       	ldi	r18, 0x04	; 4
    8d96:	a2 0e       	add	r10, r18
    8d98:	b1 1c       	adc	r11, r1
    8d9a:	f1 01       	movw	r30, r2
    8d9c:	80 81       	ld	r24, Z
    8d9e:	91 81       	ldd	r25, Z+1	; 0x01
    8da0:	a2 81       	ldd	r26, Z+2	; 0x02
    8da2:	b3 81       	ldd	r27, Z+3	; 0x03
    8da4:	2f 96       	adiw	r28, 0x0f	; 15
    8da6:	8c af       	std	Y+60, r24	; 0x3c
    8da8:	9d af       	std	Y+61, r25	; 0x3d
    8daa:	ae af       	std	Y+62, r26	; 0x3e
    8dac:	bf af       	std	Y+63, r27	; 0x3f
    8dae:	2f 97       	sbiw	r28, 0x0f	; 15
    8db0:	90 cd       	rjmp	.-1248   	; 0x88d2 <_printf_fn+0x3c4>
    8db2:	c2 59       	subi	r28, 0x92	; 146
    8db4:	df 4f       	sbci	r29, 0xFF	; 255
    8db6:	e2 e1       	ldi	r30, 0x12	; 18
    8db8:	0c 94 29 e7 	jmp	0x1ce52	; 0x1ce52 <__epilogue_restores__>

00008dbc <vsnprintf_P>:
    8dbc:	a8 e0       	ldi	r26, 0x08	; 8
    8dbe:	b0 e0       	ldi	r27, 0x00	; 0
    8dc0:	e4 ee       	ldi	r30, 0xE4	; 228
    8dc2:	f6 e4       	ldi	r31, 0x46	; 70
    8dc4:	0c 94 19 e7 	jmp	0x1ce32	; 0x1ce32 <__prologue_saves__+0x18>
    8dc8:	7c 01       	movw	r14, r24
    8dca:	cb 01       	movw	r24, r22
    8dcc:	64 2f       	mov	r22, r20
    8dce:	a9 01       	movw	r20, r18
    8dd0:	98 01       	movw	r18, r16
    8dd2:	f7 01       	movw	r30, r14
    8dd4:	10 82       	st	Z, r1
    8dd6:	ec e3       	ldi	r30, 0x3C	; 60
    8dd8:	fe e3       	ldi	r31, 0x3E	; 62
    8dda:	fa 83       	std	Y+2, r31	; 0x02
    8ddc:	e9 83       	std	Y+1, r30	; 0x01
    8dde:	9e 83       	std	Y+6, r25	; 0x06
    8de0:	8d 83       	std	Y+5, r24	; 0x05
    8de2:	18 86       	std	Y+8, r1	; 0x08
    8de4:	1f 82       	std	Y+7, r1	; 0x07
    8de6:	fc 82       	std	Y+4, r15	; 0x04
    8de8:	eb 82       	std	Y+3, r14	; 0x03
    8dea:	ce 01       	movw	r24, r28
    8dec:	01 96       	adiw	r24, 0x01	; 1
    8dee:	8f db       	rcall	.-2274   	; 0x850e <_printf_fn>
    8df0:	f7 01       	movw	r30, r14
    8df2:	01 90       	ld	r0, Z+
    8df4:	00 20       	and	r0, r0
    8df6:	e9 f7       	brne	.-6      	; 0x8df2 <vsnprintf_P+0x36>
    8df8:	cf 01       	movw	r24, r30
    8dfa:	01 97       	sbiw	r24, 0x01	; 1
    8dfc:	8e 19       	sub	r24, r14
    8dfe:	9f 09       	sbc	r25, r15
    8e00:	28 96       	adiw	r28, 0x08	; 8
    8e02:	e6 e0       	ldi	r30, 0x06	; 6
    8e04:	0c 94 35 e7 	jmp	0x1ce6a	; 0x1ce6a <__epilogue_restores__+0x18>

00008e08 <snprintf_P>:
    8e08:	a0 e0       	ldi	r26, 0x00	; 0
    8e0a:	b0 e0       	ldi	r27, 0x00	; 0
    8e0c:	ea e0       	ldi	r30, 0x0A	; 10
    8e0e:	f7 e4       	ldi	r31, 0x47	; 71
    8e10:	0c 94 1b e7 	jmp	0x1ce36	; 0x1ce36 <__prologue_saves__+0x1c>
    8e14:	8e 01       	movw	r16, r28
    8e16:	02 5f       	subi	r16, 0xF2	; 242
    8e18:	1f 4f       	sbci	r17, 0xFF	; 255
    8e1a:	2b 85       	ldd	r18, Y+11	; 0x0b
    8e1c:	3c 85       	ldd	r19, Y+12	; 0x0c
    8e1e:	4d 85       	ldd	r20, Y+13	; 0x0d
    8e20:	69 85       	ldd	r22, Y+9	; 0x09
    8e22:	7a 85       	ldd	r23, Y+10	; 0x0a
    8e24:	8f 81       	ldd	r24, Y+7	; 0x07
    8e26:	98 85       	ldd	r25, Y+8	; 0x08
    8e28:	c9 df       	rcall	.-110    	; 0x8dbc <vsnprintf_P>
    8e2a:	e4 e0       	ldi	r30, 0x04	; 4
    8e2c:	0c 94 37 e7 	jmp	0x1ce6e	; 0x1ce6e <__epilogue_restores__+0x1c>

00008e30 <sprintf_P>:
    8e30:	a0 e0       	ldi	r26, 0x00	; 0
    8e32:	b0 e0       	ldi	r27, 0x00	; 0
    8e34:	ee e1       	ldi	r30, 0x1E	; 30
    8e36:	f7 e4       	ldi	r31, 0x47	; 71
    8e38:	0c 94 1b e7 	jmp	0x1ce36	; 0x1ce36 <__prologue_saves__+0x1c>
    8e3c:	8e 01       	movw	r16, r28
    8e3e:	04 5f       	subi	r16, 0xF4	; 244
    8e40:	1f 4f       	sbci	r17, 0xFF	; 255
    8e42:	29 85       	ldd	r18, Y+9	; 0x09
    8e44:	3a 85       	ldd	r19, Y+10	; 0x0a
    8e46:	4b 85       	ldd	r20, Y+11	; 0x0b
    8e48:	60 e0       	ldi	r22, 0x00	; 0
    8e4a:	74 e0       	ldi	r23, 0x04	; 4
    8e4c:	8f 81       	ldd	r24, Y+7	; 0x07
    8e4e:	98 85       	ldd	r25, Y+8	; 0x08
    8e50:	b5 df       	rcall	.-150    	; 0x8dbc <vsnprintf_P>
    8e52:	e4 e0       	ldi	r30, 0x04	; 4
    8e54:	0c 94 37 e7 	jmp	0x1ce6e	; 0x1ce6e <__epilogue_restores__+0x1c>

00008e58 <printf_P>:
/// @return size of printed string
/// TODO create a devprintf using an array of function prointers ?
MEMSPACE
int
printf_P(__memx const char *format, ...)
{
    8e58:	a8 e0       	ldi	r26, 0x08	; 8
    8e5a:	b0 e0       	ldi	r27, 0x00	; 0
    8e5c:	e2 e3       	ldi	r30, 0x32	; 50
    8e5e:	f7 e4       	ldi	r31, 0x47	; 71
    8e60:	0c 94 1d e7 	jmp	0x1ce3a	; 0x1ce3a <__prologue_saves__+0x20>
    8e64:	9e 01       	movw	r18, r28
    8e66:	23 5f       	subi	r18, 0xF3	; 243
    8e68:	3f 4f       	sbci	r19, 0xFF	; 255
    8e6a:	f9 01       	movw	r30, r18
    8e6c:	41 91       	ld	r20, Z+
    8e6e:	51 91       	ld	r21, Z+
    8e70:	61 91       	ld	r22, Z+
    8e72:	9f 01       	movw	r18, r30
    printf_t fn;
    va_list va;

    fn.put = _putc_fn;
    8e74:	85 e5       	ldi	r24, 0x55	; 85
    8e76:	9e e3       	ldi	r25, 0x3E	; 62
    8e78:	9a 83       	std	Y+2, r25	; 0x02
    8e7a:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    8e7c:	18 86       	std	Y+8, r1	; 0x08
    8e7e:	1f 82       	std	Y+7, r1	; 0x07

    va_start(va, format);
    _printf_fn(&fn, format, va);
    8e80:	ce 01       	movw	r24, r28
    8e82:	01 96       	adiw	r24, 0x01	; 1
    8e84:	44 db       	rcall	.-2424   	; 0x850e <_printf_fn>
    va_end(va);

    return ((int)fn.sent);
}
    8e86:	8f 81       	ldd	r24, Y+7	; 0x07
    8e88:	98 85       	ldd	r25, Y+8	; 0x08
    8e8a:	28 96       	adiw	r28, 0x08	; 8
    8e8c:	e2 e0       	ldi	r30, 0x02	; 2
    8e8e:	0c 94 39 e7 	jmp	0x1ce72	; 0x1ce72 <__epilogue_restores__+0x20>

00008e92 <atodigit>:
    if(sign)
        num = -num;
    if(endptr)
        *endptr = (char *) nptr;
    return(num);
}
    8e92:	9c 01       	movw	r18, r24
    8e94:	20 53       	subi	r18, 0x30	; 48
    8e96:	31 09       	sbc	r19, r1
    8e98:	2a 30       	cpi	r18, 0x0A	; 10
    8e9a:	31 05       	cpc	r19, r1
    8e9c:	10 f4       	brcc	.+4      	; 0x8ea2 <atodigit+0x10>
    8e9e:	c9 01       	movw	r24, r18
    8ea0:	10 c0       	rjmp	.+32     	; 0x8ec2 <atodigit+0x30>
    8ea2:	9c 01       	movw	r18, r24
    8ea4:	21 54       	subi	r18, 0x41	; 65
    8ea6:	31 09       	sbc	r19, r1
    8ea8:	26 30       	cpi	r18, 0x06	; 6
    8eaa:	31 05       	cpc	r19, r1
    8eac:	10 f4       	brcc	.+4      	; 0x8eb2 <atodigit+0x20>
    8eae:	c7 97       	sbiw	r24, 0x37	; 55
    8eb0:	08 c0       	rjmp	.+16     	; 0x8ec2 <atodigit+0x30>
    8eb2:	9c 01       	movw	r18, r24
    8eb4:	21 56       	subi	r18, 0x61	; 97
    8eb6:	31 09       	sbc	r19, r1
    8eb8:	26 30       	cpi	r18, 0x06	; 6
    8eba:	31 05       	cpc	r19, r1
    8ebc:	28 f4       	brcc	.+10     	; 0x8ec8 <atodigit+0x36>
    8ebe:	87 55       	subi	r24, 0x57	; 87
    8ec0:	91 09       	sbc	r25, r1
    8ec2:	86 17       	cp	r24, r22
    8ec4:	97 07       	cpc	r25, r23
    8ec6:	14 f0       	brlt	.+4      	; 0x8ecc <atodigit+0x3a>
    8ec8:	8f ef       	ldi	r24, 0xFF	; 255
    8eca:	9f ef       	ldi	r25, 0xFF	; 255
    8ecc:	08 95       	ret

00008ece <strtol>:
    8ece:	a0 e0       	ldi	r26, 0x00	; 0
    8ed0:	b0 e0       	ldi	r27, 0x00	; 0
    8ed2:	ed e6       	ldi	r30, 0x6D	; 109
    8ed4:	f7 e4       	ldi	r31, 0x47	; 71
    8ed6:	0c 94 0d e7 	jmp	0x1ce1a	; 0x1ce1a <__prologue_saves__>
    8eda:	2b 01       	movw	r4, r22
    8edc:	8a 01       	movw	r16, r20
    8ede:	ec 01       	movw	r28, r24
    8ee0:	28 81       	ld	r18, Y
    8ee2:	01 96       	adiw	r24, 0x01	; 1
    8ee4:	20 32       	cpi	r18, 0x20	; 32
    8ee6:	d9 f3       	breq	.-10     	; 0x8ede <strtol+0x10>
    8ee8:	29 30       	cpi	r18, 0x09	; 9
    8eea:	c9 f3       	breq	.-14     	; 0x8ede <strtol+0x10>
    8eec:	2d 32       	cpi	r18, 0x2D	; 45
    8eee:	29 f4       	brne	.+10     	; 0x8efa <strtol+0x2c>
    8ef0:	ec 01       	movw	r28, r24
    8ef2:	66 24       	eor	r6, r6
    8ef4:	63 94       	inc	r6
    8ef6:	71 2c       	mov	r7, r1
    8ef8:	05 c0       	rjmp	.+10     	; 0x8f04 <strtol+0x36>
    8efa:	2b 32       	cpi	r18, 0x2B	; 43
    8efc:	09 f4       	brne	.+2      	; 0x8f00 <strtol+0x32>
    8efe:	ec 01       	movw	r28, r24
    8f00:	61 2c       	mov	r6, r1
    8f02:	71 2c       	mov	r7, r1
    8f04:	9e 01       	movw	r18, r28
    8f06:	2f 5f       	subi	r18, 0xFF	; 255
    8f08:	3f 4f       	sbci	r19, 0xFF	; 255
    8f0a:	88 81       	ld	r24, Y
    8f0c:	80 33       	cpi	r24, 0x30	; 48
    8f0e:	11 f4       	brne	.+4      	; 0x8f14 <strtol+0x46>
    8f10:	e9 01       	movw	r28, r18
    8f12:	f8 cf       	rjmp	.-16     	; 0x8f04 <strtol+0x36>
    8f14:	c1 2c       	mov	r12, r1
    8f16:	d1 2c       	mov	r13, r1
    8f18:	76 01       	movw	r14, r12
    8f1a:	48 01       	movw	r8, r16
    8f1c:	01 2e       	mov	r0, r17
    8f1e:	00 0c       	add	r0, r0
    8f20:	aa 08       	sbc	r10, r10
    8f22:	bb 08       	sbc	r11, r11
    8f24:	3c 2e       	mov	r3, r28
    8f26:	2d 2e       	mov	r2, r29
    8f28:	89 91       	ld	r24, Y+
    8f2a:	88 23       	and	r24, r24
    8f2c:	31 f0       	breq	.+12     	; 0x8f3a <strtol+0x6c>
    8f2e:	b8 01       	movw	r22, r16
    8f30:	90 e0       	ldi	r25, 0x00	; 0
    8f32:	af df       	rcall	.-162    	; 0x8e92 <atodigit>
    8f34:	fc 01       	movw	r30, r24
    8f36:	97 ff       	sbrs	r25, 7
    8f38:	0c c0       	rjmp	.+24     	; 0x8f52 <strtol+0x84>
    8f3a:	61 14       	cp	r6, r1
    8f3c:	71 04       	cpc	r7, r1
    8f3e:	c1 f0       	breq	.+48     	; 0x8f70 <strtol+0xa2>
    8f40:	f0 94       	com	r15
    8f42:	e0 94       	com	r14
    8f44:	d0 94       	com	r13
    8f46:	c0 94       	com	r12
    8f48:	c1 1c       	adc	r12, r1
    8f4a:	d1 1c       	adc	r13, r1
    8f4c:	e1 1c       	adc	r14, r1
    8f4e:	f1 1c       	adc	r15, r1
    8f50:	0f c0       	rjmp	.+30     	; 0x8f70 <strtol+0xa2>
    8f52:	a5 01       	movw	r20, r10
    8f54:	94 01       	movw	r18, r8
    8f56:	c7 01       	movw	r24, r14
    8f58:	b6 01       	movw	r22, r12
    8f5a:	0e 94 5e e6 	call	0x1ccbc	; 0x1ccbc <__mulsi3>
    8f5e:	6f 01       	movw	r12, r30
    8f60:	ff 0f       	add	r31, r31
    8f62:	ee 08       	sbc	r14, r14
    8f64:	ff 08       	sbc	r15, r15
    8f66:	c6 0e       	add	r12, r22
    8f68:	d7 1e       	adc	r13, r23
    8f6a:	e8 1e       	adc	r14, r24
    8f6c:	f9 1e       	adc	r15, r25
    8f6e:	da cf       	rjmp	.-76     	; 0x8f24 <strtol+0x56>
    8f70:	41 14       	cp	r4, r1
    8f72:	51 04       	cpc	r5, r1
    8f74:	19 f0       	breq	.+6      	; 0x8f7c <strtol+0xae>
    8f76:	f2 01       	movw	r30, r4
    8f78:	30 82       	st	Z, r3
    8f7a:	21 82       	std	Z+1, r2	; 0x01
    8f7c:	c7 01       	movw	r24, r14
    8f7e:	b6 01       	movw	r22, r12
    8f80:	cd b7       	in	r28, 0x3d	; 61
    8f82:	de b7       	in	r29, 0x3e	; 62
    8f84:	e2 e1       	ldi	r30, 0x12	; 18
    8f86:	0c 94 29 e7 	jmp	0x1ce52	; 0x1ce52 <__epilogue_restores__>

00008f8a <atoi>:
MEMSPACE
int
atoi(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    8f8a:	4a e0       	ldi	r20, 0x0A	; 10
    8f8c:	50 e0       	ldi	r21, 0x00	; 0
    8f8e:	60 e0       	ldi	r22, 0x00	; 0
    8f90:	70 e0       	ldi	r23, 0x00	; 0
    8f92:	9d df       	rcall	.-198    	; 0x8ece <strtol>
    return((int)num);
}
    8f94:	cb 01       	movw	r24, r22
    8f96:	08 95       	ret

00008f98 <atol>:
MEMSPACE
long
atol(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    8f98:	4a e0       	ldi	r20, 0x0A	; 10
    8f9a:	50 e0       	ldi	r21, 0x00	; 0
    8f9c:	60 e0       	ldi	r22, 0x00	; 0
    8f9e:	70 e0       	ldi	r23, 0x00	; 0
    8fa0:	96 cf       	rjmp	.-212    	; 0x8ece <strtol>
    return(num);
}
    8fa2:	08 95       	ret

00008fa4 <ld_dword>:
#endif
		if (res != FR_OK) ABORT(fs, res);
	}

	LEAVE_FF(fs, res);
}
    8fa4:	fc 01       	movw	r30, r24
    8fa6:	62 81       	ldd	r22, Z+2	; 0x02
    8fa8:	73 81       	ldd	r23, Z+3	; 0x03
    8faa:	cb 01       	movw	r24, r22
    8fac:	a0 e0       	ldi	r26, 0x00	; 0
    8fae:	b0 e0       	ldi	r27, 0x00	; 0
    8fb0:	ba 2f       	mov	r27, r26
    8fb2:	a9 2f       	mov	r26, r25
    8fb4:	98 2f       	mov	r25, r24
    8fb6:	88 27       	eor	r24, r24
    8fb8:	21 81       	ldd	r18, Z+1	; 0x01
    8fba:	82 2b       	or	r24, r18
    8fbc:	ba 2f       	mov	r27, r26
    8fbe:	a9 2f       	mov	r26, r25
    8fc0:	98 2f       	mov	r25, r24
    8fc2:	88 27       	eor	r24, r24
    8fc4:	20 81       	ld	r18, Z
    8fc6:	bc 01       	movw	r22, r24
    8fc8:	cd 01       	movw	r24, r26
    8fca:	62 2b       	or	r22, r18
    8fcc:	08 95       	ret

00008fce <st_dword>:
    8fce:	fc 01       	movw	r30, r24
    8fd0:	40 83       	st	Z, r20
    8fd2:	51 83       	std	Z+1, r21	; 0x01
    8fd4:	62 83       	std	Z+2, r22	; 0x02
    8fd6:	73 83       	std	Z+3, r23	; 0x03
    8fd8:	08 95       	ret

00008fda <mem_set>:
    8fda:	48 0f       	add	r20, r24
    8fdc:	59 1f       	adc	r21, r25
    8fde:	fc 01       	movw	r30, r24
    8fe0:	61 93       	st	Z+, r22
    8fe2:	cf 01       	movw	r24, r30
    8fe4:	e4 17       	cp	r30, r20
    8fe6:	f5 07       	cpc	r31, r21
    8fe8:	d1 f7       	brne	.-12     	; 0x8fde <mem_set+0x4>
    8fea:	08 95       	ret

00008fec <mem_cmp>:
    8fec:	dc 01       	movw	r26, r24
    8fee:	fb 01       	movw	r30, r22
    8ff0:	2d 91       	ld	r18, X+
    8ff2:	81 91       	ld	r24, Z+
    8ff4:	30 e0       	ldi	r19, 0x00	; 0
    8ff6:	b9 01       	movw	r22, r18
    8ff8:	68 1b       	sub	r22, r24
    8ffa:	71 09       	sbc	r23, r1
    8ffc:	cb 01       	movw	r24, r22
    8ffe:	41 50       	subi	r20, 0x01	; 1
    9000:	51 09       	sbc	r21, r1
    9002:	11 f0       	breq	.+4      	; 0x9008 <mem_cmp+0x1c>
    9004:	00 97       	sbiw	r24, 0x00	; 0
    9006:	a1 f3       	breq	.-24     	; 0x8ff0 <mem_cmp+0x4>
    9008:	08 95       	ret

0000900a <clst2sect>:
    900a:	0f 93       	push	r16
    900c:	1f 93       	push	r17
    900e:	fc 01       	movw	r30, r24
    9010:	9a 01       	movw	r18, r20
    9012:	ab 01       	movw	r20, r22
    9014:	22 50       	subi	r18, 0x02	; 2
    9016:	31 09       	sbc	r19, r1
    9018:	41 09       	sbc	r20, r1
    901a:	51 09       	sbc	r21, r1
    901c:	81 8d       	ldd	r24, Z+25	; 0x19
    901e:	92 8d       	ldd	r25, Z+26	; 0x1a
    9020:	a3 8d       	ldd	r26, Z+27	; 0x1b
    9022:	b4 8d       	ldd	r27, Z+28	; 0x1c
    9024:	02 97       	sbiw	r24, 0x02	; 2
    9026:	a1 09       	sbc	r26, r1
    9028:	b1 09       	sbc	r27, r1
    902a:	28 17       	cp	r18, r24
    902c:	39 07       	cpc	r19, r25
    902e:	4a 07       	cpc	r20, r26
    9030:	5b 07       	cpc	r21, r27
    9032:	68 f4       	brcc	.+26     	; 0x904e <clst2sect+0x44>
    9034:	a1 85       	ldd	r26, Z+9	; 0x09
    9036:	b2 85       	ldd	r27, Z+10	; 0x0a
    9038:	0e 94 ed e6 	call	0x1cdda	; 0x1cdda <__muluhisi3>
    903c:	05 a5       	ldd	r16, Z+45	; 0x2d
    903e:	16 a5       	ldd	r17, Z+46	; 0x2e
    9040:	27 a5       	ldd	r18, Z+47	; 0x2f
    9042:	30 a9       	ldd	r19, Z+48	; 0x30
    9044:	60 0f       	add	r22, r16
    9046:	71 1f       	adc	r23, r17
    9048:	82 1f       	adc	r24, r18
    904a:	93 1f       	adc	r25, r19
    904c:	03 c0       	rjmp	.+6      	; 0x9054 <clst2sect+0x4a>
    904e:	60 e0       	ldi	r22, 0x00	; 0
    9050:	70 e0       	ldi	r23, 0x00	; 0
    9052:	cb 01       	movw	r24, r22
    9054:	1f 91       	pop	r17
    9056:	0f 91       	pop	r16
    9058:	08 95       	ret

0000905a <clmt_clust>:
    905a:	cf 93       	push	r28
    905c:	df 93       	push	r29
    905e:	fc 01       	movw	r30, r24
    9060:	c2 a1       	ldd	r28, Z+34	; 0x22
    9062:	d3 a1       	ldd	r29, Z+35	; 0x23
    9064:	24 96       	adiw	r28, 0x04	; 4
    9066:	cb 01       	movw	r24, r22
    9068:	ba 01       	movw	r22, r20
    906a:	29 e0       	ldi	r18, 0x09	; 9
    906c:	96 95       	lsr	r25
    906e:	87 95       	ror	r24
    9070:	77 95       	ror	r23
    9072:	67 95       	ror	r22
    9074:	2a 95       	dec	r18
    9076:	d1 f7       	brne	.-12     	; 0x906c <clmt_clust+0x12>
    9078:	01 90       	ld	r0, Z+
    907a:	f0 81       	ld	r31, Z
    907c:	e0 2d       	mov	r30, r0
    907e:	21 85       	ldd	r18, Z+9	; 0x09
    9080:	32 85       	ldd	r19, Z+10	; 0x0a
    9082:	40 e0       	ldi	r20, 0x00	; 0
    9084:	50 e0       	ldi	r21, 0x00	; 0
    9086:	0e 94 a0 e6 	call	0x1cd40	; 0x1cd40 <__udivmodsi4>
    908a:	88 81       	ld	r24, Y
    908c:	99 81       	ldd	r25, Y+1	; 0x01
    908e:	aa 81       	ldd	r26, Y+2	; 0x02
    9090:	bb 81       	ldd	r27, Y+3	; 0x03
    9092:	00 97       	sbiw	r24, 0x00	; 0
    9094:	a1 05       	cpc	r26, r1
    9096:	b1 05       	cpc	r27, r1
    9098:	b1 f0       	breq	.+44     	; 0x90c6 <clmt_clust+0x6c>
    909a:	28 17       	cp	r18, r24
    909c:	39 07       	cpc	r19, r25
    909e:	4a 07       	cpc	r20, r26
    90a0:	5b 07       	cpc	r21, r27
    90a2:	30 f0       	brcs	.+12     	; 0x90b0 <clmt_clust+0x56>
    90a4:	28 1b       	sub	r18, r24
    90a6:	39 0b       	sbc	r19, r25
    90a8:	4a 0b       	sbc	r20, r26
    90aa:	5b 0b       	sbc	r21, r27
    90ac:	28 96       	adiw	r28, 0x08	; 8
    90ae:	ed cf       	rjmp	.-38     	; 0x908a <clmt_clust+0x30>
    90b0:	8c 81       	ldd	r24, Y+4	; 0x04
    90b2:	9d 81       	ldd	r25, Y+5	; 0x05
    90b4:	ae 81       	ldd	r26, Y+6	; 0x06
    90b6:	bf 81       	ldd	r27, Y+7	; 0x07
    90b8:	bc 01       	movw	r22, r24
    90ba:	cd 01       	movw	r24, r26
    90bc:	62 0f       	add	r22, r18
    90be:	73 1f       	adc	r23, r19
    90c0:	84 1f       	adc	r24, r20
    90c2:	95 1f       	adc	r25, r21
    90c4:	03 c0       	rjmp	.+6      	; 0x90cc <clmt_clust+0x72>
    90c6:	60 e0       	ldi	r22, 0x00	; 0
    90c8:	70 e0       	ldi	r23, 0x00	; 0
    90ca:	cb 01       	movw	r24, r22
    90cc:	df 91       	pop	r29
    90ce:	cf 91       	pop	r28
    90d0:	08 95       	ret

000090d2 <sum_sfn>:
    90d2:	fc 01       	movw	r30, r24
    90d4:	9c 01       	movw	r18, r24
    90d6:	25 5f       	subi	r18, 0xF5	; 245
    90d8:	3f 4f       	sbci	r19, 0xFF	; 255
    90da:	80 e0       	ldi	r24, 0x00	; 0
    90dc:	98 2f       	mov	r25, r24
    90de:	90 fb       	bst	r25, 0
    90e0:	97 95       	ror	r25
    90e2:	97 f9       	bld	r25, 7
    90e4:	81 91       	ld	r24, Z+
    90e6:	89 0f       	add	r24, r25
    90e8:	e2 17       	cp	r30, r18
    90ea:	f3 07       	cpc	r31, r19
    90ec:	b9 f7       	brne	.-18     	; 0x90dc <sum_sfn+0xa>
    90ee:	08 95       	ret

000090f0 <get_ldnumber>:
    90f0:	cf 93       	push	r28
    90f2:	df 93       	push	r29
    90f4:	dc 01       	movw	r26, r24
    90f6:	ed 91       	ld	r30, X+
    90f8:	fc 91       	ld	r31, X
    90fa:	11 97       	sbiw	r26, 0x01	; 1
    90fc:	30 97       	sbiw	r30, 0x00	; 0
    90fe:	f9 f0       	breq	.+62     	; 0x913e <get_ldnumber+0x4e>
    9100:	9f 01       	movw	r18, r30
    9102:	2f 5f       	subi	r18, 0xFF	; 255
    9104:	3f 4f       	sbci	r19, 0xFF	; 255
    9106:	e9 01       	movw	r28, r18
    9108:	21 97       	sbiw	r28, 0x01	; 1
    910a:	88 81       	ld	r24, Y
    910c:	80 32       	cpi	r24, 0x20	; 32
    910e:	18 f0       	brcs	.+6      	; 0x9116 <get_ldnumber+0x26>
    9110:	8a 33       	cpi	r24, 0x3A	; 58
    9112:	b9 f7       	brne	.-18     	; 0x9102 <get_ldnumber+0x12>
    9114:	04 c0       	rjmp	.+8      	; 0x911e <get_ldnumber+0x2e>
    9116:	80 91 1e 18 	lds	r24, 0x181E	; 0x80181e <CurrVol>
    911a:	90 e0       	ldi	r25, 0x00	; 0
    911c:	12 c0       	rjmp	.+36     	; 0x9142 <get_ldnumber+0x52>
    911e:	90 81       	ld	r25, Z
    9120:	80 ed       	ldi	r24, 0xD0	; 208
    9122:	89 0f       	add	r24, r25
    9124:	8a 30       	cpi	r24, 0x0A	; 10
    9126:	58 f4       	brcc	.+22     	; 0x913e <get_ldnumber+0x4e>
    9128:	32 96       	adiw	r30, 0x02	; 2
    912a:	2e 17       	cp	r18, r30
    912c:	3f 07       	cpc	r19, r31
    912e:	39 f4       	brne	.+14     	; 0x913e <get_ldnumber+0x4e>
    9130:	90 33       	cpi	r25, 0x30	; 48
    9132:	29 f4       	brne	.+10     	; 0x913e <get_ldnumber+0x4e>
    9134:	2d 93       	st	X+, r18
    9136:	3c 93       	st	X, r19
    9138:	80 e0       	ldi	r24, 0x00	; 0
    913a:	90 e0       	ldi	r25, 0x00	; 0
    913c:	02 c0       	rjmp	.+4      	; 0x9142 <get_ldnumber+0x52>
    913e:	8f ef       	ldi	r24, 0xFF	; 255
    9140:	9f ef       	ldi	r25, 0xFF	; 255
    9142:	df 91       	pop	r29
    9144:	cf 91       	pop	r28
    9146:	08 95       	ret

00009148 <validate>:
    9148:	0f 93       	push	r16
    914a:	1f 93       	push	r17
    914c:	cf 93       	push	r28
    914e:	df 93       	push	r29
    9150:	ec 01       	movw	r28, r24
    9152:	8b 01       	movw	r16, r22
    9154:	89 2b       	or	r24, r25
    9156:	f9 f0       	breq	.+62     	; 0x9196 <validate+0x4e>
    9158:	e8 81       	ld	r30, Y
    915a:	f9 81       	ldd	r31, Y+1	; 0x01
    915c:	30 97       	sbiw	r30, 0x00	; 0
    915e:	d9 f0       	breq	.+54     	; 0x9196 <validate+0x4e>
    9160:	80 81       	ld	r24, Z
    9162:	88 23       	and	r24, r24
    9164:	c1 f0       	breq	.+48     	; 0x9196 <validate+0x4e>
    9166:	2a 81       	ldd	r18, Y+2	; 0x02
    9168:	3b 81       	ldd	r19, Y+3	; 0x03
    916a:	85 81       	ldd	r24, Z+5	; 0x05
    916c:	96 81       	ldd	r25, Z+6	; 0x06
    916e:	28 17       	cp	r18, r24
    9170:	39 07       	cpc	r19, r25
    9172:	89 f4       	brne	.+34     	; 0x9196 <validate+0x4e>
    9174:	81 81       	ldd	r24, Z+1	; 0x01
    9176:	0e 94 ba 69 	call	0xd374	; 0xd374 <disk_status>
    917a:	80 fd       	sbrc	r24, 0
    917c:	0c c0       	rjmp	.+24     	; 0x9196 <validate+0x4e>
    917e:	28 81       	ld	r18, Y
    9180:	39 81       	ldd	r19, Y+1	; 0x01
    9182:	80 e0       	ldi	r24, 0x00	; 0
    9184:	90 e0       	ldi	r25, 0x00	; 0
    9186:	f8 01       	movw	r30, r16
    9188:	31 83       	std	Z+1, r19	; 0x01
    918a:	20 83       	st	Z, r18
    918c:	df 91       	pop	r29
    918e:	cf 91       	pop	r28
    9190:	1f 91       	pop	r17
    9192:	0f 91       	pop	r16
    9194:	08 95       	ret
    9196:	89 e0       	ldi	r24, 0x09	; 9
    9198:	90 e0       	ldi	r25, 0x00	; 0
    919a:	20 e0       	ldi	r18, 0x00	; 0
    919c:	30 e0       	ldi	r19, 0x00	; 0
    919e:	f3 cf       	rjmp	.-26     	; 0x9186 <validate+0x3e>

000091a0 <get_fileinfo>:
    91a0:	a8 e0       	ldi	r26, 0x08	; 8
    91a2:	b0 e0       	ldi	r27, 0x00	; 0
    91a4:	e6 ed       	ldi	r30, 0xD6	; 214
    91a6:	f8 e4       	ldi	r31, 0x48	; 72
    91a8:	0c 94 0d e7 	jmp	0x1ce1a	; 0x1ce1a <__prologue_saves__>
    91ac:	fc 01       	movw	r30, r24
    91ae:	01 90       	ld	r0, Z+
    91b0:	f0 81       	ld	r31, Z
    91b2:	e0 2d       	mov	r30, r0
    91b4:	f8 87       	std	Y+8, r31	; 0x08
    91b6:	ef 83       	std	Y+7, r30	; 0x07
    91b8:	fb 01       	movw	r30, r22
    91ba:	16 8a       	std	Z+22, r1	; 0x16
    91bc:	fc 01       	movw	r30, r24
    91be:	06 89       	ldd	r16, Z+22	; 0x16
    91c0:	17 89       	ldd	r17, Z+23	; 0x17
    91c2:	20 8d       	ldd	r18, Z+24	; 0x18
    91c4:	31 8d       	ldd	r19, Z+25	; 0x19
    91c6:	01 15       	cp	r16, r1
    91c8:	11 05       	cpc	r17, r1
    91ca:	21 05       	cpc	r18, r1
    91cc:	31 05       	cpc	r19, r1
    91ce:	09 f4       	brne	.+2      	; 0x91d2 <get_fileinfo+0x32>
    91d0:	0d c1       	rjmp	.+538    	; 0x93ec <get_fileinfo+0x24c>
    91d2:	7e 83       	std	Y+6, r23	; 0x06
    91d4:	6d 83       	std	Y+5, r22	; 0x05
    91d6:	7c 01       	movw	r14, r24
    91d8:	80 a5       	ldd	r24, Z+40	; 0x28
    91da:	91 a5       	ldd	r25, Z+41	; 0x29
    91dc:	a2 a5       	ldd	r26, Z+42	; 0x2a
    91de:	b3 a5       	ldd	r27, Z+43	; 0x2b
    91e0:	8f 3f       	cpi	r24, 0xFF	; 255
    91e2:	9f 4f       	sbci	r25, 0xFF	; 255
    91e4:	af 4f       	sbci	r26, 0xFF	; 255
    91e6:	bf 4f       	sbci	r27, 0xFF	; 255
    91e8:	09 f4       	brne	.+2      	; 0x91ec <get_fileinfo+0x4c>
    91ea:	6c c0       	rjmp	.+216    	; 0x92c4 <get_fileinfo+0x124>
    91ec:	a1 2c       	mov	r10, r1
    91ee:	b1 2c       	mov	r11, r1
    91f0:	c1 2c       	mov	r12, r1
    91f2:	d1 2c       	mov	r13, r1
    91f4:	00 e0       	ldi	r16, 0x00	; 0
    91f6:	10 e0       	ldi	r17, 0x00	; 0
    91f8:	66 24       	eor	r6, r6
    91fa:	6a 94       	dec	r6
    91fc:	71 2c       	mov	r7, r1
    91fe:	ef 81       	ldd	r30, Y+7	; 0x07
    9200:	f8 85       	ldd	r31, Y+8	; 0x08
    9202:	83 85       	ldd	r24, Z+11	; 0x0b
    9204:	94 85       	ldd	r25, Z+12	; 0x0c
    9206:	fc 01       	movw	r30, r24
    9208:	ea 0d       	add	r30, r10
    920a:	fb 1d       	adc	r31, r11
    920c:	80 81       	ld	r24, Z
    920e:	91 81       	ldd	r25, Z+1	; 0x01
    9210:	00 97       	sbiw	r24, 0x00	; 0
    9212:	09 f4       	brne	.+2      	; 0x9216 <get_fileinfo+0x76>
    9214:	4d c0       	rjmp	.+154    	; 0x92b0 <get_fileinfo+0x110>
    9216:	c1 14       	cp	r12, r1
    9218:	d1 04       	cpc	r13, r1
    921a:	29 f4       	brne	.+10     	; 0x9226 <get_fileinfo+0x86>
    921c:	9c 01       	movw	r18, r24
    921e:	38 5d       	subi	r19, 0xD8	; 216
    9220:	21 15       	cp	r18, r1
    9222:	38 40       	sbci	r19, 0x08	; 8
    9224:	f0 f1       	brcs	.+124    	; 0x92a2 <get_fileinfo+0x102>
    9226:	43 01       	movw	r8, r6
    9228:	80 1a       	sub	r8, r16
    922a:	91 0a       	sbc	r9, r17
    922c:	a6 01       	movw	r20, r12
    922e:	60 e0       	ldi	r22, 0x00	; 0
    9230:	70 e0       	ldi	r23, 0x00	; 0
    9232:	2a 01       	movw	r4, r20
    9234:	33 24       	eor	r3, r3
    9236:	22 24       	eor	r2, r2
    9238:	a0 e0       	ldi	r26, 0x00	; 0
    923a:	b0 e0       	ldi	r27, 0x00	; 0
    923c:	28 2a       	or	r2, r24
    923e:	39 2a       	or	r3, r25
    9240:	4a 2a       	or	r4, r26
    9242:	5b 2a       	or	r5, r27
    9244:	c2 01       	movw	r24, r4
    9246:	b1 01       	movw	r22, r2
    9248:	45 eb       	ldi	r20, 0xB5	; 181
    924a:	51 e0       	ldi	r21, 0x01	; 1
    924c:	0e 94 10 69 	call	0xd220	; 0xd220 <ff_uni2oem>
    9250:	8f 3f       	cpi	r24, 0xFF	; 255
    9252:	91 05       	cpc	r25, r1
    9254:	89 f0       	breq	.+34     	; 0x9278 <get_fileinfo+0xd8>
    9256:	80 f0       	brcs	.+32     	; 0x9278 <get_fileinfo+0xd8>
    9258:	22 e0       	ldi	r18, 0x02	; 2
    925a:	82 16       	cp	r8, r18
    925c:	91 04       	cpc	r9, r1
    925e:	c0 f0       	brcs	.+48     	; 0x9290 <get_fileinfo+0xf0>
    9260:	ed 81       	ldd	r30, Y+5	; 0x05
    9262:	fe 81       	ldd	r31, Y+6	; 0x06
    9264:	e0 0f       	add	r30, r16
    9266:	f1 1f       	adc	r31, r17
    9268:	96 8b       	std	Z+22, r25	; 0x16
    926a:	ed 81       	ldd	r30, Y+5	; 0x05
    926c:	fe 81       	ldd	r31, Y+6	; 0x06
    926e:	e0 0f       	add	r30, r16
    9270:	f1 1f       	adc	r31, r17
    9272:	87 8b       	std	Z+23, r24	; 0x17
    9274:	82 e0       	ldi	r24, 0x02	; 2
    9276:	0d c0       	rjmp	.+26     	; 0x9292 <get_fileinfo+0xf2>
    9278:	00 97       	sbiw	r24, 0x00	; 0
    927a:	51 f0       	breq	.+20     	; 0x9290 <get_fileinfo+0xf0>
    927c:	81 14       	cp	r8, r1
    927e:	91 04       	cpc	r9, r1
    9280:	39 f0       	breq	.+14     	; 0x9290 <get_fileinfo+0xf0>
    9282:	ed 81       	ldd	r30, Y+5	; 0x05
    9284:	fe 81       	ldd	r31, Y+6	; 0x06
    9286:	e0 0f       	add	r30, r16
    9288:	f1 1f       	adc	r31, r17
    928a:	86 8b       	std	Z+22, r24	; 0x16
    928c:	81 e0       	ldi	r24, 0x01	; 1
    928e:	01 c0       	rjmp	.+2      	; 0x9292 <get_fileinfo+0xf2>
    9290:	80 e0       	ldi	r24, 0x00	; 0
    9292:	28 2f       	mov	r18, r24
    9294:	30 e0       	ldi	r19, 0x00	; 0
    9296:	88 23       	and	r24, r24
    9298:	49 f0       	breq	.+18     	; 0x92ac <get_fileinfo+0x10c>
    929a:	02 0f       	add	r16, r18
    929c:	13 1f       	adc	r17, r19
    929e:	80 e0       	ldi	r24, 0x00	; 0
    92a0:	90 e0       	ldi	r25, 0x00	; 0
    92a2:	32 e0       	ldi	r19, 0x02	; 2
    92a4:	a3 0e       	add	r10, r19
    92a6:	b1 1c       	adc	r11, r1
    92a8:	6c 01       	movw	r12, r24
    92aa:	a9 cf       	rjmp	.-174    	; 0x91fe <get_fileinfo+0x5e>
    92ac:	00 e0       	ldi	r16, 0x00	; 0
    92ae:	10 e0       	ldi	r17, 0x00	; 0
    92b0:	c1 14       	cp	r12, r1
    92b2:	d1 04       	cpc	r13, r1
    92b4:	11 f0       	breq	.+4      	; 0x92ba <get_fileinfo+0x11a>
    92b6:	00 e0       	ldi	r16, 0x00	; 0
    92b8:	10 e0       	ldi	r17, 0x00	; 0
    92ba:	ed 81       	ldd	r30, Y+5	; 0x05
    92bc:	fe 81       	ldd	r31, Y+6	; 0x06
    92be:	e0 0f       	add	r30, r16
    92c0:	f1 1f       	adc	r31, r17
    92c2:	16 8a       	std	Z+22, r1	; 0x16
    92c4:	80 e0       	ldi	r24, 0x00	; 0
    92c6:	90 e0       	ldi	r25, 0x00	; 0
    92c8:	20 e0       	ldi	r18, 0x00	; 0
    92ca:	30 e0       	ldi	r19, 0x00	; 0
    92cc:	6e e2       	ldi	r22, 0x2E	; 46
    92ce:	a9 01       	movw	r20, r18
    92d0:	4f 5f       	subi	r20, 0xFF	; 255
    92d2:	5f 4f       	sbci	r21, 0xFF	; 255
    92d4:	f7 01       	movw	r30, r14
    92d6:	a2 8d       	ldd	r26, Z+26	; 0x1a
    92d8:	b3 8d       	ldd	r27, Z+27	; 0x1b
    92da:	fd 01       	movw	r30, r26
    92dc:	e2 0f       	add	r30, r18
    92de:	f3 1f       	adc	r31, r19
    92e0:	20 81       	ld	r18, Z
    92e2:	30 e0       	ldi	r19, 0x00	; 0
    92e4:	20 32       	cpi	r18, 0x20	; 32
    92e6:	31 05       	cpc	r19, r1
    92e8:	b9 f0       	breq	.+46     	; 0x9318 <get_fileinfo+0x178>
    92ea:	25 30       	cpi	r18, 0x05	; 5
    92ec:	31 05       	cpc	r19, r1
    92ee:	11 f4       	brne	.+4      	; 0x92f4 <get_fileinfo+0x154>
    92f0:	25 ee       	ldi	r18, 0xE5	; 229
    92f2:	30 e0       	ldi	r19, 0x00	; 0
    92f4:	49 30       	cpi	r20, 0x09	; 9
    92f6:	51 05       	cpc	r21, r1
    92f8:	49 f4       	brne	.+18     	; 0x930c <get_fileinfo+0x16c>
    92fa:	8c 30       	cpi	r24, 0x0C	; 12
    92fc:	91 05       	cpc	r25, r1
    92fe:	30 f4       	brcc	.+12     	; 0x930c <get_fileinfo+0x16c>
    9300:	ed 81       	ldd	r30, Y+5	; 0x05
    9302:	fe 81       	ldd	r31, Y+6	; 0x06
    9304:	e8 0f       	add	r30, r24
    9306:	f9 1f       	adc	r31, r25
    9308:	61 87       	std	Z+9, r22	; 0x09
    930a:	01 96       	adiw	r24, 0x01	; 1
    930c:	ed 81       	ldd	r30, Y+5	; 0x05
    930e:	fe 81       	ldd	r31, Y+6	; 0x06
    9310:	e8 0f       	add	r30, r24
    9312:	f9 1f       	adc	r31, r25
    9314:	21 87       	std	Z+9, r18	; 0x09
    9316:	01 96       	adiw	r24, 0x01	; 1
    9318:	9a 01       	movw	r18, r20
    931a:	4b 30       	cpi	r20, 0x0B	; 11
    931c:	51 05       	cpc	r21, r1
    931e:	b9 f6       	brne	.-82     	; 0x92ce <get_fileinfo+0x12e>
    9320:	ed 81       	ldd	r30, Y+5	; 0x05
    9322:	fe 81       	ldd	r31, Y+6	; 0x06
    9324:	e8 0f       	add	r30, r24
    9326:	f9 1f       	adc	r31, r25
    9328:	11 86       	std	Z+9, r1	; 0x09
    932a:	ed 81       	ldd	r30, Y+5	; 0x05
    932c:	fe 81       	ldd	r31, Y+6	; 0x06
    932e:	26 89       	ldd	r18, Z+22	; 0x16
    9330:	21 11       	cpse	r18, r1
    9332:	3a c0       	rjmp	.+116    	; 0x93a8 <get_fileinfo+0x208>
    9334:	89 2b       	or	r24, r25
    9336:	31 f0       	breq	.+12     	; 0x9344 <get_fileinfo+0x1a4>
    9338:	df 01       	movw	r26, r30
    933a:	19 96       	adiw	r26, 0x09	; 9
    933c:	58 e0       	ldi	r21, 0x08	; 8
    933e:	20 e0       	ldi	r18, 0x00	; 0
    9340:	30 e0       	ldi	r19, 0x00	; 0
    9342:	16 c0       	rjmp	.+44     	; 0x9370 <get_fileinfo+0x1d0>
    9344:	8f e3       	ldi	r24, 0x3F	; 63
    9346:	ed 81       	ldd	r30, Y+5	; 0x05
    9348:	fe 81       	ldd	r31, Y+6	; 0x06
    934a:	86 8b       	std	Z+22, r24	; 0x16
    934c:	21 e0       	ldi	r18, 0x01	; 1
    934e:	30 e0       	ldi	r19, 0x00	; 0
    9350:	1c c0       	rjmp	.+56     	; 0x938a <get_fileinfo+0x1ea>
    9352:	90 e0       	ldi	r25, 0x00	; 0
    9354:	8e 32       	cpi	r24, 0x2E	; 46
    9356:	91 05       	cpc	r25, r1
    9358:	09 f4       	brne	.+2      	; 0x935c <get_fileinfo+0x1bc>
    935a:	50 e1       	ldi	r21, 0x10	; 16
    935c:	bc 01       	movw	r22, r24
    935e:	61 54       	subi	r22, 0x41	; 65
    9360:	71 09       	sbc	r23, r1
    9362:	6a 31       	cpi	r22, 0x1A	; 26
    9364:	71 05       	cpc	r23, r1
    9366:	40 f0       	brcs	.+16     	; 0x9378 <get_fileinfo+0x1d8>
    9368:	fd 01       	movw	r30, r26
    936a:	84 87       	std	Z+12, r24	; 0x0c
    936c:	2f 5f       	subi	r18, 0xFF	; 255
    936e:	3f 4f       	sbci	r19, 0xFF	; 255
    9370:	8d 91       	ld	r24, X+
    9372:	81 11       	cpse	r24, r1
    9374:	ee cf       	rjmp	.-36     	; 0x9352 <get_fileinfo+0x1b2>
    9376:	09 c0       	rjmp	.+18     	; 0x938a <get_fileinfo+0x1ea>
    9378:	f7 01       	movw	r30, r14
    937a:	62 8d       	ldd	r22, Z+26	; 0x1a
    937c:	73 8d       	ldd	r23, Z+27	; 0x1b
    937e:	fb 01       	movw	r30, r22
    9380:	44 85       	ldd	r20, Z+12	; 0x0c
    9382:	45 23       	and	r20, r21
    9384:	89 f3       	breq	.-30     	; 0x9368 <get_fileinfo+0x1c8>
    9386:	80 96       	adiw	r24, 0x20	; 32
    9388:	ef cf       	rjmp	.-34     	; 0x9368 <get_fileinfo+0x1c8>
    938a:	ed 81       	ldd	r30, Y+5	; 0x05
    938c:	fe 81       	ldd	r31, Y+6	; 0x06
    938e:	e2 0f       	add	r30, r18
    9390:	f3 1f       	adc	r31, r19
    9392:	16 8a       	std	Z+22, r1	; 0x16
    9394:	f7 01       	movw	r30, r14
    9396:	82 8d       	ldd	r24, Z+26	; 0x1a
    9398:	93 8d       	ldd	r25, Z+27	; 0x1b
    939a:	fc 01       	movw	r30, r24
    939c:	84 85       	ldd	r24, Z+12	; 0x0c
    939e:	81 11       	cpse	r24, r1
    93a0:	03 c0       	rjmp	.+6      	; 0x93a8 <get_fileinfo+0x208>
    93a2:	ed 81       	ldd	r30, Y+5	; 0x05
    93a4:	fe 81       	ldd	r31, Y+6	; 0x06
    93a6:	11 86       	std	Z+9, r1	; 0x09
    93a8:	f7 01       	movw	r30, r14
    93aa:	82 8d       	ldd	r24, Z+26	; 0x1a
    93ac:	93 8d       	ldd	r25, Z+27	; 0x1b
    93ae:	fc 01       	movw	r30, r24
    93b0:	83 85       	ldd	r24, Z+11	; 0x0b
    93b2:	ed 81       	ldd	r30, Y+5	; 0x05
    93b4:	fe 81       	ldd	r31, Y+6	; 0x06
    93b6:	80 87       	std	Z+8, r24	; 0x08
    93b8:	f7 01       	movw	r30, r14
    93ba:	02 8d       	ldd	r16, Z+26	; 0x1a
    93bc:	13 8d       	ldd	r17, Z+27	; 0x1b
    93be:	c8 01       	movw	r24, r16
    93c0:	4c 96       	adiw	r24, 0x1c	; 28
    93c2:	f0 dd       	rcall	.-1056   	; 0x8fa4 <ld_dword>
    93c4:	ed 81       	ldd	r30, Y+5	; 0x05
    93c6:	fe 81       	ldd	r31, Y+6	; 0x06
    93c8:	60 83       	st	Z, r22
    93ca:	71 83       	std	Z+1, r23	; 0x01
    93cc:	82 83       	std	Z+2, r24	; 0x02
    93ce:	93 83       	std	Z+3, r25	; 0x03
    93d0:	f8 01       	movw	r30, r16
    93d2:	86 89       	ldd	r24, Z+22	; 0x16
    93d4:	97 89       	ldd	r25, Z+23	; 0x17
    93d6:	ed 81       	ldd	r30, Y+5	; 0x05
    93d8:	fe 81       	ldd	r31, Y+6	; 0x06
    93da:	97 83       	std	Z+7, r25	; 0x07
    93dc:	86 83       	std	Z+6, r24	; 0x06
    93de:	f8 01       	movw	r30, r16
    93e0:	80 8d       	ldd	r24, Z+24	; 0x18
    93e2:	91 8d       	ldd	r25, Z+25	; 0x19
    93e4:	ed 81       	ldd	r30, Y+5	; 0x05
    93e6:	fe 81       	ldd	r31, Y+6	; 0x06
    93e8:	95 83       	std	Z+5, r25	; 0x05
    93ea:	84 83       	std	Z+4, r24	; 0x04
    93ec:	28 96       	adiw	r28, 0x08	; 8
    93ee:	e2 e1       	ldi	r30, 0x12	; 18
    93f0:	0c 94 29 e7 	jmp	0x1ce52	; 0x1ce52 <__epilogue_restores__>

000093f4 <mem_cpy.part.0>:
    93f4:	fb 01       	movw	r30, r22
    93f6:	48 0f       	add	r20, r24
    93f8:	59 1f       	adc	r21, r25
    93fa:	21 91       	ld	r18, Z+
    93fc:	dc 01       	movw	r26, r24
    93fe:	2d 93       	st	X+, r18
    9400:	cd 01       	movw	r24, r26
    9402:	a4 17       	cp	r26, r20
    9404:	b5 07       	cpc	r27, r21
    9406:	c9 f7       	brne	.-14     	; 0x93fa <mem_cpy.part.0+0x6>
    9408:	08 95       	ret

0000940a <ld_clust.isra.3>:
    940a:	fb 01       	movw	r30, r22
    940c:	42 8d       	ldd	r20, Z+26	; 0x1a
    940e:	53 8d       	ldd	r21, Z+27	; 0x1b
    9410:	60 e0       	ldi	r22, 0x00	; 0
    9412:	70 e0       	ldi	r23, 0x00	; 0
    9414:	83 30       	cpi	r24, 0x03	; 3
    9416:	59 f4       	brne	.+22     	; 0x942e <ld_clust.isra.3+0x24>
    9418:	84 89       	ldd	r24, Z+20	; 0x14
    941a:	95 89       	ldd	r25, Z+21	; 0x15
    941c:	a0 e0       	ldi	r26, 0x00	; 0
    941e:	b0 e0       	ldi	r27, 0x00	; 0
    9420:	dc 01       	movw	r26, r24
    9422:	99 27       	eor	r25, r25
    9424:	88 27       	eor	r24, r24
    9426:	48 2b       	or	r20, r24
    9428:	59 2b       	or	r21, r25
    942a:	6a 2b       	or	r22, r26
    942c:	7b 2b       	or	r23, r27
    942e:	cb 01       	movw	r24, r22
    9430:	ba 01       	movw	r22, r20
    9432:	08 95       	ret

00009434 <st_clust.isra.4>:
    9434:	fb 01       	movw	r30, r22
    9436:	22 8f       	std	Z+26, r18	; 0x1a
    9438:	33 8f       	std	Z+27, r19	; 0x1b
    943a:	dc 01       	movw	r26, r24
    943c:	8c 91       	ld	r24, X
    943e:	83 30       	cpi	r24, 0x03	; 3
    9440:	29 f4       	brne	.+10     	; 0x944c <st_clust.isra.4+0x18>
    9442:	ca 01       	movw	r24, r20
    9444:	aa 27       	eor	r26, r26
    9446:	bb 27       	eor	r27, r27
    9448:	84 8b       	std	Z+20, r24	; 0x14
    944a:	95 8b       	std	Z+21, r25	; 0x15
    944c:	08 95       	ret

0000944e <sync_window.part.5>:
    944e:	8f 92       	push	r8
    9450:	9f 92       	push	r9
    9452:	af 92       	push	r10
    9454:	bf 92       	push	r11
    9456:	ef 92       	push	r14
    9458:	ff 92       	push	r15
    945a:	0f 93       	push	r16
    945c:	1f 93       	push	r17
    945e:	cf 93       	push	r28
    9460:	df 93       	push	r29
    9462:	ec 01       	movw	r28, r24
    9464:	7c 01       	movw	r14, r24
    9466:	45 e3       	ldi	r20, 0x35	; 53
    9468:	e4 0e       	add	r14, r20
    946a:	f1 1c       	adc	r15, r1
    946c:	29 a9       	ldd	r18, Y+49	; 0x31
    946e:	3a a9       	ldd	r19, Y+50	; 0x32
    9470:	4b a9       	ldd	r20, Y+51	; 0x33
    9472:	5c a9       	ldd	r21, Y+52	; 0x34
    9474:	01 e0       	ldi	r16, 0x01	; 1
    9476:	10 e0       	ldi	r17, 0x00	; 0
    9478:	b7 01       	movw	r22, r14
    947a:	89 81       	ldd	r24, Y+1	; 0x01
    947c:	0e 94 d6 69 	call	0xd3ac	; 0xd3ac <disk_write>
    9480:	89 2b       	or	r24, r25
    9482:	41 f5       	brne	.+80     	; 0x94d4 <sync_window.part.5+0x86>
    9484:	1b 82       	std	Y+3, r1	; 0x03
    9486:	09 a9       	ldd	r16, Y+49	; 0x31
    9488:	1a a9       	ldd	r17, Y+50	; 0x32
    948a:	2b a9       	ldd	r18, Y+51	; 0x33
    948c:	3c a9       	ldd	r19, Y+52	; 0x34
    948e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9490:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9492:	af 8d       	ldd	r26, Y+31	; 0x1f
    9494:	b8 a1       	ldd	r27, Y+32	; 0x20
    9496:	8d a0       	ldd	r8, Y+37	; 0x25
    9498:	9e a0       	ldd	r9, Y+38	; 0x26
    949a:	af a0       	ldd	r10, Y+39	; 0x27
    949c:	b8 a4       	ldd	r11, Y+40	; 0x28
    949e:	b9 01       	movw	r22, r18
    94a0:	a8 01       	movw	r20, r16
    94a2:	48 19       	sub	r20, r8
    94a4:	59 09       	sbc	r21, r9
    94a6:	6a 09       	sbc	r22, r10
    94a8:	7b 09       	sbc	r23, r11
    94aa:	48 17       	cp	r20, r24
    94ac:	59 07       	cpc	r21, r25
    94ae:	6a 07       	cpc	r22, r26
    94b0:	7b 07       	cpc	r23, r27
    94b2:	98 f4       	brcc	.+38     	; 0x94da <sync_window.part.5+0x8c>
    94b4:	6a 81       	ldd	r22, Y+2	; 0x02
    94b6:	62 30       	cpi	r22, 0x02	; 2
    94b8:	81 f4       	brne	.+32     	; 0x94da <sync_window.part.5+0x8c>
    94ba:	a9 01       	movw	r20, r18
    94bc:	98 01       	movw	r18, r16
    94be:	28 0f       	add	r18, r24
    94c0:	39 1f       	adc	r19, r25
    94c2:	4a 1f       	adc	r20, r26
    94c4:	5b 1f       	adc	r21, r27
    94c6:	01 e0       	ldi	r16, 0x01	; 1
    94c8:	10 e0       	ldi	r17, 0x00	; 0
    94ca:	b7 01       	movw	r22, r14
    94cc:	89 81       	ldd	r24, Y+1	; 0x01
    94ce:	0e 94 d6 69 	call	0xd3ac	; 0xd3ac <disk_write>
    94d2:	03 c0       	rjmp	.+6      	; 0x94da <sync_window.part.5+0x8c>
    94d4:	81 e0       	ldi	r24, 0x01	; 1
    94d6:	90 e0       	ldi	r25, 0x00	; 0
    94d8:	02 c0       	rjmp	.+4      	; 0x94de <sync_window.part.5+0x90>
    94da:	80 e0       	ldi	r24, 0x00	; 0
    94dc:	90 e0       	ldi	r25, 0x00	; 0
    94de:	df 91       	pop	r29
    94e0:	cf 91       	pop	r28
    94e2:	1f 91       	pop	r17
    94e4:	0f 91       	pop	r16
    94e6:	ff 90       	pop	r15
    94e8:	ef 90       	pop	r14
    94ea:	bf 90       	pop	r11
    94ec:	af 90       	pop	r10
    94ee:	9f 90       	pop	r9
    94f0:	8f 90       	pop	r8
    94f2:	08 95       	ret

000094f4 <sync_fs>:
    94f4:	ef 92       	push	r14
    94f6:	ff 92       	push	r15
    94f8:	0f 93       	push	r16
    94fa:	1f 93       	push	r17
    94fc:	cf 93       	push	r28
    94fe:	df 93       	push	r29
    9500:	ec 01       	movw	r28, r24
    9502:	8b 81       	ldd	r24, Y+3	; 0x03
    9504:	81 11       	cpse	r24, r1
    9506:	05 c0       	rjmp	.+10     	; 0x9512 <sync_fs+0x1e>
    9508:	88 81       	ld	r24, Y
    950a:	83 30       	cpi	r24, 0x03	; 3
    950c:	09 f0       	breq	.+2      	; 0x9510 <sync_fs+0x1c>
    950e:	52 c0       	rjmp	.+164    	; 0x95b4 <sync_fs+0xc0>
    9510:	06 c0       	rjmp	.+12     	; 0x951e <sync_fs+0x2a>
    9512:	ce 01       	movw	r24, r28
    9514:	9c df       	rcall	.-200    	; 0x944e <sync_window.part.5>
    9516:	00 97       	sbiw	r24, 0x00	; 0
    9518:	09 f0       	breq	.+2      	; 0x951c <sync_fs+0x28>
    951a:	59 c0       	rjmp	.+178    	; 0x95ce <sync_fs+0xda>
    951c:	f5 cf       	rjmp	.-22     	; 0x9508 <sync_fs+0x14>
    951e:	8c 81       	ldd	r24, Y+4	; 0x04
    9520:	81 30       	cpi	r24, 0x01	; 1
    9522:	09 f0       	breq	.+2      	; 0x9526 <sync_fs+0x32>
    9524:	47 c0       	rjmp	.+142    	; 0x95b4 <sync_fs+0xc0>
    9526:	40 e0       	ldi	r20, 0x00	; 0
    9528:	52 e0       	ldi	r21, 0x02	; 2
    952a:	60 e0       	ldi	r22, 0x00	; 0
    952c:	70 e0       	ldi	r23, 0x00	; 0
    952e:	7e 01       	movw	r14, r28
    9530:	85 e3       	ldi	r24, 0x35	; 53
    9532:	e8 0e       	add	r14, r24
    9534:	f1 1c       	adc	r15, r1
    9536:	c7 01       	movw	r24, r14
    9538:	50 dd       	rcall	.-1376   	; 0x8fda <mem_set>
    953a:	85 e5       	ldi	r24, 0x55	; 85
    953c:	fe 01       	movw	r30, r28
    953e:	ed 5c       	subi	r30, 0xCD	; 205
    9540:	fd 4f       	sbci	r31, 0xFD	; 253
    9542:	80 83       	st	Z, r24
    9544:	8a ea       	ldi	r24, 0xAA	; 170
    9546:	31 96       	adiw	r30, 0x01	; 1
    9548:	80 83       	st	Z, r24
    954a:	82 e5       	ldi	r24, 0x52	; 82
    954c:	8d ab       	std	Y+53, r24	; 0x35
    954e:	8e ab       	std	Y+54, r24	; 0x36
    9550:	81 e6       	ldi	r24, 0x61	; 97
    9552:	8f ab       	std	Y+55, r24	; 0x37
    9554:	91 e4       	ldi	r25, 0x41	; 65
    9556:	98 af       	std	Y+56, r25	; 0x38
    9558:	22 e7       	ldi	r18, 0x72	; 114
    955a:	7b 97       	sbiw	r30, 0x1b	; 27
    955c:	20 83       	st	Z, r18
    955e:	31 96       	adiw	r30, 0x01	; 1
    9560:	20 83       	st	Z, r18
    9562:	31 96       	adiw	r30, 0x01	; 1
    9564:	90 83       	st	Z, r25
    9566:	31 96       	adiw	r30, 0x01	; 1
    9568:	80 83       	st	Z, r24
    956a:	49 89       	ldd	r20, Y+17	; 0x11
    956c:	5a 89       	ldd	r21, Y+18	; 0x12
    956e:	6b 89       	ldd	r22, Y+19	; 0x13
    9570:	7c 89       	ldd	r23, Y+20	; 0x14
    9572:	ce 01       	movw	r24, r28
    9574:	83 5e       	subi	r24, 0xE3	; 227
    9576:	9d 4f       	sbci	r25, 0xFD	; 253
    9578:	2a dd       	rcall	.-1452   	; 0x8fce <st_dword>
    957a:	4d 85       	ldd	r20, Y+13	; 0x0d
    957c:	5e 85       	ldd	r21, Y+14	; 0x0e
    957e:	6f 85       	ldd	r22, Y+15	; 0x0f
    9580:	78 89       	ldd	r23, Y+16	; 0x10
    9582:	ce 01       	movw	r24, r28
    9584:	8f 5d       	subi	r24, 0xDF	; 223
    9586:	9d 4f       	sbci	r25, 0xFD	; 253
    9588:	22 dd       	rcall	.-1468   	; 0x8fce <st_dword>
    958a:	89 a1       	ldd	r24, Y+33	; 0x21
    958c:	9a a1       	ldd	r25, Y+34	; 0x22
    958e:	ab a1       	ldd	r26, Y+35	; 0x23
    9590:	bc a1       	ldd	r27, Y+36	; 0x24
    9592:	9c 01       	movw	r18, r24
    9594:	ad 01       	movw	r20, r26
    9596:	2f 5f       	subi	r18, 0xFF	; 255
    9598:	3f 4f       	sbci	r19, 0xFF	; 255
    959a:	4f 4f       	sbci	r20, 0xFF	; 255
    959c:	5f 4f       	sbci	r21, 0xFF	; 255
    959e:	29 ab       	std	Y+49, r18	; 0x31
    95a0:	3a ab       	std	Y+50, r19	; 0x32
    95a2:	4b ab       	std	Y+51, r20	; 0x33
    95a4:	5c ab       	std	Y+52, r21	; 0x34
    95a6:	01 e0       	ldi	r16, 0x01	; 1
    95a8:	10 e0       	ldi	r17, 0x00	; 0
    95aa:	b7 01       	movw	r22, r14
    95ac:	89 81       	ldd	r24, Y+1	; 0x01
    95ae:	0e 94 d6 69 	call	0xd3ac	; 0xd3ac <disk_write>
    95b2:	1c 82       	std	Y+4, r1	; 0x04
    95b4:	40 e0       	ldi	r20, 0x00	; 0
    95b6:	50 e0       	ldi	r21, 0x00	; 0
    95b8:	60 e0       	ldi	r22, 0x00	; 0
    95ba:	89 81       	ldd	r24, Y+1	; 0x01
    95bc:	0e 94 e6 69 	call	0xd3cc	; 0xd3cc <disk_ioctl>
    95c0:	31 e0       	ldi	r19, 0x01	; 1
    95c2:	20 e0       	ldi	r18, 0x00	; 0
    95c4:	89 2b       	or	r24, r25
    95c6:	09 f4       	brne	.+2      	; 0x95ca <sync_fs+0xd6>
    95c8:	30 e0       	ldi	r19, 0x00	; 0
    95ca:	83 2f       	mov	r24, r19
    95cc:	92 2f       	mov	r25, r18
    95ce:	cd b7       	in	r28, 0x3d	; 61
    95d0:	de b7       	in	r29, 0x3e	; 62
    95d2:	e6 e0       	ldi	r30, 0x06	; 6
    95d4:	0c 94 35 e7 	jmp	0x1ce6a	; 0x1ce6a <__epilogue_restores__+0x18>

000095d8 <dir_clear>:
    95d8:	4f 92       	push	r4
    95da:	5f 92       	push	r5
    95dc:	6f 92       	push	r6
    95de:	7f 92       	push	r7
    95e0:	af 92       	push	r10
    95e2:	bf 92       	push	r11
    95e4:	cf 92       	push	r12
    95e6:	df 92       	push	r13
    95e8:	ef 92       	push	r14
    95ea:	ff 92       	push	r15
    95ec:	0f 93       	push	r16
    95ee:	1f 93       	push	r17
    95f0:	cf 93       	push	r28
    95f2:	df 93       	push	r29
    95f4:	ec 01       	movw	r28, r24
    95f6:	6a 01       	movw	r12, r20
    95f8:	7b 01       	movw	r14, r22
    95fa:	8b 81       	ldd	r24, Y+3	; 0x03
    95fc:	81 11       	cpse	r24, r1
    95fe:	28 c0       	rjmp	.+80     	; 0x9650 <dir_clear+0x78>
    9600:	b7 01       	movw	r22, r14
    9602:	a6 01       	movw	r20, r12
    9604:	ce 01       	movw	r24, r28
    9606:	01 dd       	rcall	.-1534   	; 0x900a <clst2sect>
    9608:	2b 01       	movw	r4, r22
    960a:	3c 01       	movw	r6, r24
    960c:	69 ab       	std	Y+49, r22	; 0x31
    960e:	7a ab       	std	Y+50, r23	; 0x32
    9610:	8b ab       	std	Y+51, r24	; 0x33
    9612:	9c ab       	std	Y+52, r25	; 0x34
    9614:	5e 01       	movw	r10, r28
    9616:	25 e3       	ldi	r18, 0x35	; 53
    9618:	a2 0e       	add	r10, r18
    961a:	b1 1c       	adc	r11, r1
    961c:	40 e0       	ldi	r20, 0x00	; 0
    961e:	52 e0       	ldi	r21, 0x02	; 2
    9620:	60 e0       	ldi	r22, 0x00	; 0
    9622:	70 e0       	ldi	r23, 0x00	; 0
    9624:	c5 01       	movw	r24, r10
    9626:	d9 dc       	rcall	.-1614   	; 0x8fda <mem_set>
    9628:	09 85       	ldd	r16, Y+9	; 0x09
    962a:	1a 85       	ldd	r17, Y+10	; 0x0a
    962c:	c8 01       	movw	r24, r16
    962e:	a0 e0       	ldi	r26, 0x00	; 0
    9630:	b0 e0       	ldi	r27, 0x00	; 0
    9632:	39 e0       	ldi	r19, 0x09	; 9
    9634:	88 0f       	add	r24, r24
    9636:	99 1f       	adc	r25, r25
    9638:	aa 1f       	adc	r26, r26
    963a:	bb 1f       	adc	r27, r27
    963c:	3a 95       	dec	r19
    963e:	d1 f7       	brne	.-12     	; 0x9634 <dir_clear+0x5c>
    9640:	81 15       	cp	r24, r1
    9642:	90 48       	sbci	r25, 0x80	; 128
    9644:	a1 05       	cpc	r26, r1
    9646:	b1 05       	cpc	r27, r1
    9648:	50 f0       	brcs	.+20     	; 0x965e <dir_clear+0x86>
    964a:	00 e0       	ldi	r16, 0x00	; 0
    964c:	10 e8       	ldi	r17, 0x80	; 128
    964e:	14 c0       	rjmp	.+40     	; 0x9678 <dir_clear+0xa0>
    9650:	ce 01       	movw	r24, r28
    9652:	fd de       	rcall	.-518    	; 0x944e <sync_window.part.5>
    9654:	89 2b       	or	r24, r25
    9656:	a1 f2       	breq	.-88     	; 0x9600 <dir_clear+0x28>
    9658:	81 e0       	ldi	r24, 0x01	; 1
    965a:	90 e0       	ldi	r25, 0x00	; 0
    965c:	56 c0       	rjmp	.+172    	; 0x970a <dir_clear+0x132>
    965e:	10 2f       	mov	r17, r16
    9660:	00 27       	eor	r16, r16
    9662:	11 0f       	add	r17, r17
    9664:	09 c0       	rjmp	.+18     	; 0x9678 <dir_clear+0xa0>
    9666:	c8 01       	movw	r24, r16
    9668:	0e 94 0a 69 	call	0xd214	; 0xd214 <ff_memalloc>
    966c:	6c 01       	movw	r12, r24
    966e:	00 97       	sbiw	r24, 0x00	; 0
    9670:	09 f0       	breq	.+2      	; 0x9674 <dir_clear+0x9c>
    9672:	40 c0       	rjmp	.+128    	; 0x96f4 <dir_clear+0x11c>
    9674:	16 95       	lsr	r17
    9676:	07 95       	ror	r16
    9678:	01 30       	cpi	r16, 0x01	; 1
    967a:	82 e0       	ldi	r24, 0x02	; 2
    967c:	18 07       	cpc	r17, r24
    967e:	98 f7       	brcc	.-26     	; 0x9666 <dir_clear+0x8e>
    9680:	e1 2c       	mov	r14, r1
    9682:	f1 2c       	mov	r15, r1
    9684:	11 c0       	rjmp	.+34     	; 0x96a8 <dir_clear+0xd0>
    9686:	01 e0       	ldi	r16, 0x01	; 1
    9688:	10 e0       	ldi	r17, 0x00	; 0
    968a:	a3 01       	movw	r20, r6
    968c:	92 01       	movw	r18, r4
    968e:	2e 0d       	add	r18, r14
    9690:	3f 1d       	adc	r19, r15
    9692:	41 1d       	adc	r20, r1
    9694:	51 1d       	adc	r21, r1
    9696:	b5 01       	movw	r22, r10
    9698:	89 81       	ldd	r24, Y+1	; 0x01
    969a:	0e 94 d6 69 	call	0xd3ac	; 0xd3ac <disk_write>
    969e:	89 2b       	or	r24, r25
    96a0:	01 f5       	brne	.+64     	; 0x96e2 <dir_clear+0x10a>
    96a2:	2f ef       	ldi	r18, 0xFF	; 255
    96a4:	e2 1a       	sub	r14, r18
    96a6:	f2 0a       	sbc	r15, r18
    96a8:	89 85       	ldd	r24, Y+9	; 0x09
    96aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    96ac:	e8 16       	cp	r14, r24
    96ae:	f9 06       	cpc	r15, r25
    96b0:	50 f3       	brcs	.-44     	; 0x9686 <dir_clear+0xae>
    96b2:	17 c0       	rjmp	.+46     	; 0x96e2 <dir_clear+0x10a>
    96b4:	85 01       	movw	r16, r10
    96b6:	a3 01       	movw	r20, r6
    96b8:	92 01       	movw	r18, r4
    96ba:	2e 0d       	add	r18, r14
    96bc:	3f 1d       	adc	r19, r15
    96be:	41 1d       	adc	r20, r1
    96c0:	51 1d       	adc	r21, r1
    96c2:	b6 01       	movw	r22, r12
    96c4:	89 81       	ldd	r24, Y+1	; 0x01
    96c6:	0e 94 d6 69 	call	0xd3ac	; 0xd3ac <disk_write>
    96ca:	89 2b       	or	r24, r25
    96cc:	39 f4       	brne	.+14     	; 0x96dc <dir_clear+0x104>
    96ce:	ea 0c       	add	r14, r10
    96d0:	fb 1c       	adc	r15, r11
    96d2:	89 85       	ldd	r24, Y+9	; 0x09
    96d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    96d6:	e8 16       	cp	r14, r24
    96d8:	f9 06       	cpc	r15, r25
    96da:	60 f3       	brcs	.-40     	; 0x96b4 <dir_clear+0xdc>
    96dc:	c6 01       	movw	r24, r12
    96de:	0e 94 0d 69 	call	0xd21a	; 0xd21a <ff_memfree>
    96e2:	81 e0       	ldi	r24, 0x01	; 1
    96e4:	90 e0       	ldi	r25, 0x00	; 0
    96e6:	29 85       	ldd	r18, Y+9	; 0x09
    96e8:	3a 85       	ldd	r19, Y+10	; 0x0a
    96ea:	2e 15       	cp	r18, r14
    96ec:	3f 05       	cpc	r19, r15
    96ee:	69 f4       	brne	.+26     	; 0x970a <dir_clear+0x132>
    96f0:	80 e0       	ldi	r24, 0x00	; 0
    96f2:	0b c0       	rjmp	.+22     	; 0x970a <dir_clear+0x132>
    96f4:	a8 01       	movw	r20, r16
    96f6:	60 e0       	ldi	r22, 0x00	; 0
    96f8:	70 e0       	ldi	r23, 0x00	; 0
    96fa:	6f dc       	rcall	.-1826   	; 0x8fda <mem_set>
    96fc:	58 01       	movw	r10, r16
    96fe:	ab 2c       	mov	r10, r11
    9700:	bb 24       	eor	r11, r11
    9702:	a6 94       	lsr	r10
    9704:	e1 2c       	mov	r14, r1
    9706:	f1 2c       	mov	r15, r1
    9708:	e4 cf       	rjmp	.-56     	; 0x96d2 <dir_clear+0xfa>
    970a:	df 91       	pop	r29
    970c:	cf 91       	pop	r28
    970e:	1f 91       	pop	r17
    9710:	0f 91       	pop	r16
    9712:	ff 90       	pop	r15
    9714:	ef 90       	pop	r14
    9716:	df 90       	pop	r13
    9718:	cf 90       	pop	r12
    971a:	bf 90       	pop	r11
    971c:	af 90       	pop	r10
    971e:	7f 90       	pop	r7
    9720:	6f 90       	pop	r6
    9722:	5f 90       	pop	r5
    9724:	4f 90       	pop	r4
    9726:	08 95       	ret

00009728 <move_window>:
    9728:	a0 e0       	ldi	r26, 0x00	; 0
    972a:	b0 e0       	ldi	r27, 0x00	; 0
    972c:	ea e9       	ldi	r30, 0x9A	; 154
    972e:	fb e4       	ldi	r31, 0x4B	; 75
    9730:	0c 94 17 e7 	jmp	0x1ce2e	; 0x1ce2e <__prologue_saves__+0x14>
    9734:	ec 01       	movw	r28, r24
    9736:	6a 01       	movw	r12, r20
    9738:	7b 01       	movw	r14, r22
    973a:	89 a9       	ldd	r24, Y+49	; 0x31
    973c:	9a a9       	ldd	r25, Y+50	; 0x32
    973e:	ab a9       	ldd	r26, Y+51	; 0x33
    9740:	bc a9       	ldd	r27, Y+52	; 0x34
    9742:	84 17       	cp	r24, r20
    9744:	95 07       	cpc	r25, r21
    9746:	a6 07       	cpc	r26, r22
    9748:	b7 07       	cpc	r27, r23
    974a:	11 f1       	breq	.+68     	; 0x9790 <move_window+0x68>
    974c:	8b 81       	ldd	r24, Y+3	; 0x03
    974e:	81 11       	cpse	r24, r1
    9750:	13 c0       	rjmp	.+38     	; 0x9778 <move_window+0x50>
    9752:	01 e0       	ldi	r16, 0x01	; 1
    9754:	10 e0       	ldi	r17, 0x00	; 0
    9756:	a7 01       	movw	r20, r14
    9758:	96 01       	movw	r18, r12
    975a:	be 01       	movw	r22, r28
    975c:	6b 5c       	subi	r22, 0xCB	; 203
    975e:	7f 4f       	sbci	r23, 0xFF	; 255
    9760:	89 81       	ldd	r24, Y+1	; 0x01
    9762:	0e 94 c6 69 	call	0xd38c	; 0xd38c <disk_read>
    9766:	89 2b       	or	r24, r25
    9768:	61 f0       	breq	.+24     	; 0x9782 <move_window+0x5a>
    976a:	81 e0       	ldi	r24, 0x01	; 1
    976c:	90 e0       	ldi	r25, 0x00	; 0
    976e:	cc 24       	eor	r12, r12
    9770:	ca 94       	dec	r12
    9772:	dc 2c       	mov	r13, r12
    9774:	76 01       	movw	r14, r12
    9776:	07 c0       	rjmp	.+14     	; 0x9786 <move_window+0x5e>
    9778:	ce 01       	movw	r24, r28
    977a:	69 de       	rcall	.-814    	; 0x944e <sync_window.part.5>
    977c:	00 97       	sbiw	r24, 0x00	; 0
    977e:	51 f4       	brne	.+20     	; 0x9794 <move_window+0x6c>
    9780:	e8 cf       	rjmp	.-48     	; 0x9752 <move_window+0x2a>
    9782:	80 e0       	ldi	r24, 0x00	; 0
    9784:	90 e0       	ldi	r25, 0x00	; 0
    9786:	c9 aa       	std	Y+49, r12	; 0x31
    9788:	da aa       	std	Y+50, r13	; 0x32
    978a:	eb aa       	std	Y+51, r14	; 0x33
    978c:	fc aa       	std	Y+52, r15	; 0x34
    978e:	02 c0       	rjmp	.+4      	; 0x9794 <move_window+0x6c>
    9790:	80 e0       	ldi	r24, 0x00	; 0
    9792:	90 e0       	ldi	r25, 0x00	; 0
    9794:	cd b7       	in	r28, 0x3d	; 61
    9796:	de b7       	in	r29, 0x3e	; 62
    9798:	e8 e0       	ldi	r30, 0x08	; 8
    979a:	0c 94 33 e7 	jmp	0x1ce66	; 0x1ce66 <__epilogue_restores__+0x14>

0000979e <check_fs>:
    979e:	cf 93       	push	r28
    97a0:	df 93       	push	r29
    97a2:	ec 01       	movw	r28, r24
    97a4:	1b 82       	std	Y+3, r1	; 0x03
    97a6:	8f ef       	ldi	r24, 0xFF	; 255
    97a8:	9f ef       	ldi	r25, 0xFF	; 255
    97aa:	dc 01       	movw	r26, r24
    97ac:	89 ab       	std	Y+49, r24	; 0x31
    97ae:	9a ab       	std	Y+50, r25	; 0x32
    97b0:	ab ab       	std	Y+51, r26	; 0x33
    97b2:	bc ab       	std	Y+52, r27	; 0x34
    97b4:	ce 01       	movw	r24, r28
    97b6:	b8 df       	rcall	.-144    	; 0x9728 <move_window>
    97b8:	89 2b       	or	r24, r25
    97ba:	19 f5       	brne	.+70     	; 0x9802 <check_fs+0x64>
    97bc:	fe 01       	movw	r30, r28
    97be:	ed 5c       	subi	r30, 0xCD	; 205
    97c0:	fd 4f       	sbci	r31, 0xFD	; 253
    97c2:	80 81       	ld	r24, Z
    97c4:	91 81       	ldd	r25, Z+1	; 0x01
    97c6:	85 35       	cpi	r24, 0x55	; 85
    97c8:	9a 4a       	sbci	r25, 0xAA	; 170
    97ca:	f1 f4       	brne	.+60     	; 0x9808 <check_fs+0x6a>
    97cc:	8d a9       	ldd	r24, Y+53	; 0x35
    97ce:	8b 3e       	cpi	r24, 0xEB	; 235
    97d0:	19 f0       	breq	.+6      	; 0x97d8 <check_fs+0x3a>
    97d2:	88 5e       	subi	r24, 0xE8	; 232
    97d4:	82 30       	cpi	r24, 0x02	; 2
    97d6:	f0 f4       	brcc	.+60     	; 0x9814 <check_fs+0x76>
    97d8:	43 e0       	ldi	r20, 0x03	; 3
    97da:	50 e0       	ldi	r21, 0x00	; 0
    97dc:	66 ec       	ldi	r22, 0xC6	; 198
    97de:	78 e0       	ldi	r23, 0x08	; 8
    97e0:	ce 01       	movw	r24, r28
    97e2:	85 59       	subi	r24, 0x95	; 149
    97e4:	9f 4f       	sbci	r25, 0xFF	; 255
    97e6:	02 dc       	rcall	.-2044   	; 0x8fec <mem_cmp>
    97e8:	89 2b       	or	r24, r25
    97ea:	89 f0       	breq	.+34     	; 0x980e <check_fs+0x70>
    97ec:	45 e0       	ldi	r20, 0x05	; 5
    97ee:	50 e0       	ldi	r21, 0x00	; 0
    97f0:	61 e2       	ldi	r22, 0x21	; 33
    97f2:	74 e0       	ldi	r23, 0x04	; 4
    97f4:	ce 01       	movw	r24, r28
    97f6:	89 57       	subi	r24, 0x79	; 121
    97f8:	9f 4f       	sbci	r25, 0xFF	; 255
    97fa:	f8 db       	rcall	.-2064   	; 0x8fec <mem_cmp>
    97fc:	89 2b       	or	r24, r25
    97fe:	51 f4       	brne	.+20     	; 0x9814 <check_fs+0x76>
    9800:	06 c0       	rjmp	.+12     	; 0x980e <check_fs+0x70>
    9802:	84 e0       	ldi	r24, 0x04	; 4
    9804:	90 e0       	ldi	r25, 0x00	; 0
    9806:	08 c0       	rjmp	.+16     	; 0x9818 <check_fs+0x7a>
    9808:	83 e0       	ldi	r24, 0x03	; 3
    980a:	90 e0       	ldi	r25, 0x00	; 0
    980c:	05 c0       	rjmp	.+10     	; 0x9818 <check_fs+0x7a>
    980e:	80 e0       	ldi	r24, 0x00	; 0
    9810:	90 e0       	ldi	r25, 0x00	; 0
    9812:	02 c0       	rjmp	.+4      	; 0x9818 <check_fs+0x7a>
    9814:	82 e0       	ldi	r24, 0x02	; 2
    9816:	90 e0       	ldi	r25, 0x00	; 0
    9818:	df 91       	pop	r29
    981a:	cf 91       	pop	r28
    981c:	08 95       	ret

0000981e <mount_volume>:
    981e:	a0 e2       	ldi	r26, 0x20	; 32
    9820:	b0 e0       	ldi	r27, 0x00	; 0
    9822:	e5 e1       	ldi	r30, 0x15	; 21
    9824:	fc e4       	ldi	r31, 0x4C	; 76
    9826:	0c 94 0f e7 	jmp	0x1ce1e	; 0x1ce1e <__prologue_saves__+0x4>
    982a:	5b 01       	movw	r10, r22
    982c:	f4 2e       	mov	r15, r20
    982e:	db 01       	movw	r26, r22
    9830:	1d 92       	st	X+, r1
    9832:	1c 92       	st	X, r1
    9834:	5d dc       	rcall	.-1862   	; 0x90f0 <get_ldnumber>
    9836:	6c 01       	movw	r12, r24
    9838:	97 fd       	sbrc	r25, 7
    983a:	39 c2       	rjmp	.+1138   	; 0x9cae <mount_volume+0x490>
    983c:	fc 01       	movw	r30, r24
    983e:	ee 0f       	add	r30, r30
    9840:	ff 1f       	adc	r31, r31
    9842:	ef 5d       	subi	r30, 0xDF	; 223
    9844:	f7 4e       	sbci	r31, 0xE7	; 231
    9846:	00 81       	ld	r16, Z
    9848:	11 81       	ldd	r17, Z+1	; 0x01
    984a:	01 15       	cp	r16, r1
    984c:	11 05       	cpc	r17, r1
    984e:	09 f4       	brne	.+2      	; 0x9852 <mount_volume+0x34>
    9850:	31 c2       	rjmp	.+1122   	; 0x9cb4 <mount_volume+0x496>
    9852:	f5 01       	movw	r30, r10
    9854:	11 83       	std	Z+1, r17	; 0x01
    9856:	00 83       	st	Z, r16
    9858:	ff 2d       	mov	r31, r15
    985a:	fe 7f       	andi	r31, 0xFE	; 254
    985c:	ff 2e       	mov	r15, r31
    985e:	d8 01       	movw	r26, r16
    9860:	8c 91       	ld	r24, X
    9862:	88 23       	and	r24, r24
    9864:	71 f0       	breq	.+28     	; 0x9882 <mount_volume+0x64>
    9866:	f8 01       	movw	r30, r16
    9868:	81 81       	ldd	r24, Z+1	; 0x01
    986a:	0e 94 ba 69 	call	0xd374	; 0xd374 <disk_status>
    986e:	80 fd       	sbrc	r24, 0
    9870:	08 c0       	rjmp	.+16     	; 0x9882 <mount_volume+0x64>
    9872:	ff 20       	and	r15, r15
    9874:	09 f4       	brne	.+2      	; 0x9878 <mount_volume+0x5a>
    9876:	21 c2       	rjmp	.+1090   	; 0x9cba <mount_volume+0x49c>
    9878:	82 ff       	sbrs	r24, 2
    987a:	1f c2       	rjmp	.+1086   	; 0x9cba <mount_volume+0x49c>
    987c:	8a e0       	ldi	r24, 0x0A	; 10
    987e:	90 e0       	ldi	r25, 0x00	; 0
    9880:	24 c2       	rjmp	.+1096   	; 0x9cca <mount_volume+0x4ac>
    9882:	d8 01       	movw	r26, r16
    9884:	1c 92       	st	X, r1
    9886:	f8 01       	movw	r30, r16
    9888:	c1 82       	std	Z+1, r12	; 0x01
    988a:	8c 2d       	mov	r24, r12
    988c:	0e 94 c0 69 	call	0xd380	; 0xd380 <disk_initialize>
    9890:	80 fd       	sbrc	r24, 0
    9892:	16 c2       	rjmp	.+1068   	; 0x9cc0 <mount_volume+0x4a2>
    9894:	ff 20       	and	r15, r15
    9896:	11 f0       	breq	.+4      	; 0x989c <mount_volume+0x7e>
    9898:	82 fd       	sbrc	r24, 2
    989a:	f0 cf       	rjmp	.-32     	; 0x987c <mount_volume+0x5e>
    989c:	40 e0       	ldi	r20, 0x00	; 0
    989e:	50 e0       	ldi	r21, 0x00	; 0
    98a0:	ba 01       	movw	r22, r20
    98a2:	c8 01       	movw	r24, r16
    98a4:	7c df       	rcall	.-264    	; 0x979e <check_fs>
    98a6:	82 30       	cpi	r24, 0x02	; 2
    98a8:	91 05       	cpc	r25, r1
    98aa:	b9 f5       	brne	.+110    	; 0x991a <mount_volume+0xfc>
    98ac:	68 01       	movw	r12, r16
    98ae:	f5 e0       	ldi	r31, 0x05	; 5
    98b0:	cf 1a       	sub	r12, r31
    98b2:	fe ef       	ldi	r31, 0xFE	; 254
    98b4:	df 0a       	sbc	r13, r31
    98b6:	9e 01       	movw	r18, r28
    98b8:	2f 5f       	subi	r18, 0xFF	; 255
    98ba:	3f 4f       	sbci	r19, 0xFF	; 255
    98bc:	79 01       	movw	r14, r18
    98be:	48 01       	movw	r8, r16
    98c0:	35 ec       	ldi	r19, 0xC5	; 197
    98c2:	83 1a       	sub	r8, r19
    98c4:	3d ef       	ldi	r19, 0xFD	; 253
    98c6:	93 0a       	sbc	r9, r19
    98c8:	57 01       	movw	r10, r14
    98ca:	c6 01       	movw	r24, r12
    98cc:	6b db       	rcall	.-2346   	; 0x8fa4 <ld_dword>
    98ce:	d5 01       	movw	r26, r10
    98d0:	6d 93       	st	X+, r22
    98d2:	7d 93       	st	X+, r23
    98d4:	8d 93       	st	X+, r24
    98d6:	9d 93       	st	X+, r25
    98d8:	5d 01       	movw	r10, r26
    98da:	b0 e1       	ldi	r27, 0x10	; 16
    98dc:	cb 0e       	add	r12, r27
    98de:	d1 1c       	adc	r13, r1
    98e0:	c8 14       	cp	r12, r8
    98e2:	d9 04       	cpc	r13, r9
    98e4:	91 f7       	brne	.-28     	; 0x98ca <mount_volume+0xac>
    98e6:	6e 01       	movw	r12, r28
    98e8:	e1 e1       	ldi	r30, 0x11	; 17
    98ea:	ce 0e       	add	r12, r30
    98ec:	d1 1c       	adc	r13, r1
    98ee:	d7 01       	movw	r26, r14
    98f0:	4d 91       	ld	r20, X+
    98f2:	5d 91       	ld	r21, X+
    98f4:	6d 91       	ld	r22, X+
    98f6:	7d 91       	ld	r23, X+
    98f8:	7d 01       	movw	r14, r26
    98fa:	41 15       	cp	r20, r1
    98fc:	51 05       	cpc	r21, r1
    98fe:	61 05       	cpc	r22, r1
    9900:	71 05       	cpc	r23, r1
    9902:	31 f0       	breq	.+12     	; 0x9910 <mount_volume+0xf2>
    9904:	c8 01       	movw	r24, r16
    9906:	4b df       	rcall	.-362    	; 0x979e <check_fs>
    9908:	82 30       	cpi	r24, 0x02	; 2
    990a:	91 05       	cpc	r25, r1
    990c:	18 f4       	brcc	.+6      	; 0x9914 <mount_volume+0xf6>
    990e:	05 c0       	rjmp	.+10     	; 0x991a <mount_volume+0xfc>
    9910:	83 e0       	ldi	r24, 0x03	; 3
    9912:	90 e0       	ldi	r25, 0x00	; 0
    9914:	ce 14       	cp	r12, r14
    9916:	df 04       	cpc	r13, r15
    9918:	51 f7       	brne	.-44     	; 0x98ee <mount_volume+0xd0>
    991a:	84 30       	cpi	r24, 0x04	; 4
    991c:	91 05       	cpc	r25, r1
    991e:	09 f4       	brne	.+2      	; 0x9922 <mount_volume+0x104>
    9920:	d2 c1       	rjmp	.+932    	; 0x9cc6 <mount_volume+0x4a8>
    9922:	02 97       	sbiw	r24, 0x02	; 2
    9924:	18 f0       	brcs	.+6      	; 0x992c <mount_volume+0x10e>
    9926:	8d e0       	ldi	r24, 0x0D	; 13
    9928:	90 e0       	ldi	r25, 0x00	; 0
    992a:	cf c1       	rjmp	.+926    	; 0x9cca <mount_volume+0x4ac>
    992c:	f8 01       	movw	r30, r16
    992e:	e0 5c       	subi	r30, 0xC0	; 192
    9930:	ff 4f       	sbci	r31, 0xFF	; 255
    9932:	80 81       	ld	r24, Z
    9934:	91 81       	ldd	r25, Z+1	; 0x01
    9936:	81 15       	cp	r24, r1
    9938:	92 40       	sbci	r25, 0x02	; 2
    993a:	a9 f7       	brne	.-22     	; 0x9926 <mount_volume+0x108>
    993c:	3b 96       	adiw	r30, 0x0b	; 11
    993e:	40 80       	ld	r4, Z
    9940:	51 80       	ldd	r5, Z+1	; 0x01
    9942:	41 14       	cp	r4, r1
    9944:	51 04       	cpc	r5, r1
    9946:	19 f0       	breq	.+6      	; 0x994e <mount_volume+0x130>
    9948:	61 2c       	mov	r6, r1
    994a:	71 2c       	mov	r7, r1
    994c:	06 c0       	rjmp	.+12     	; 0x995a <mount_volume+0x13c>
    994e:	c8 01       	movw	r24, r16
    9950:	87 5a       	subi	r24, 0xA7	; 167
    9952:	9f 4f       	sbci	r25, 0xFF	; 255
    9954:	27 db       	rcall	.-2482   	; 0x8fa4 <ld_dword>
    9956:	2b 01       	movw	r4, r22
    9958:	3c 01       	movw	r6, r24
    995a:	f8 01       	movw	r30, r16
    995c:	21 a9       	ldd	r18, Z+49	; 0x31
    995e:	32 a9       	ldd	r19, Z+50	; 0x32
    9960:	43 a9       	ldd	r20, Z+51	; 0x33
    9962:	54 a9       	ldd	r21, Z+52	; 0x34
    9964:	29 8b       	std	Y+17, r18	; 0x11
    9966:	3a 8b       	std	Y+18, r19	; 0x12
    9968:	4b 8b       	std	Y+19, r20	; 0x13
    996a:	5c 8b       	std	Y+20, r21	; 0x14
    996c:	45 8e       	std	Z+29, r4	; 0x1d
    996e:	56 8e       	std	Z+30, r5	; 0x1e
    9970:	67 8e       	std	Z+31, r6	; 0x1f
    9972:	70 a2       	std	Z+32, r7	; 0x20
    9974:	eb 5b       	subi	r30, 0xBB	; 187
    9976:	ff 4f       	sbci	r31, 0xFF	; 255
    9978:	a0 80       	ld	r10, Z
    997a:	f8 01       	movw	r30, r16
    997c:	a2 82       	std	Z+2, r10	; 0x02
    997e:	8f ef       	ldi	r24, 0xFF	; 255
    9980:	8a 0d       	add	r24, r10
    9982:	82 30       	cpi	r24, 0x02	; 2
    9984:	80 f6       	brcc	.-96     	; 0x9926 <mount_volume+0x108>
    9986:	ee 5b       	subi	r30, 0xBE	; 190
    9988:	ff 4f       	sbci	r31, 0xFF	; 255
    998a:	b0 80       	ld	r11, Z
    998c:	8b 2d       	mov	r24, r11
    998e:	90 e0       	ldi	r25, 0x00	; 0
    9990:	f8 01       	movw	r30, r16
    9992:	92 87       	std	Z+10, r25	; 0x0a
    9994:	81 87       	std	Z+9, r24	; 0x09
    9996:	00 97       	sbiw	r24, 0x00	; 0
    9998:	31 f2       	breq	.-116    	; 0x9926 <mount_volume+0x108>
    999a:	9c 01       	movw	r18, r24
    999c:	21 50       	subi	r18, 0x01	; 1
    999e:	31 09       	sbc	r19, r1
    99a0:	82 23       	and	r24, r18
    99a2:	93 23       	and	r25, r19
    99a4:	89 2b       	or	r24, r25
    99a6:	09 f0       	breq	.+2      	; 0x99aa <mount_volume+0x18c>
    99a8:	be cf       	rjmp	.-132    	; 0x9926 <mount_volume+0x108>
    99aa:	ea 5b       	subi	r30, 0xBA	; 186
    99ac:	ff 4f       	sbci	r31, 0xFF	; 255
    99ae:	80 80       	ld	r8, Z
    99b0:	91 80       	ldd	r9, Z+1	; 0x01
    99b2:	f8 01       	movw	r30, r16
    99b4:	90 86       	std	Z+8, r9	; 0x08
    99b6:	87 82       	std	Z+7, r8	; 0x07
    99b8:	c4 01       	movw	r24, r8
    99ba:	8f 70       	andi	r24, 0x0F	; 15
    99bc:	99 27       	eor	r25, r25
    99be:	89 2b       	or	r24, r25
    99c0:	09 f0       	breq	.+2      	; 0x99c4 <mount_volume+0x1a6>
    99c2:	b1 cf       	rjmp	.-158    	; 0x9926 <mount_volume+0x108>
    99c4:	e8 5b       	subi	r30, 0xB8	; 184
    99c6:	ff 4f       	sbci	r31, 0xFF	; 255
    99c8:	80 81       	ld	r24, Z
    99ca:	91 81       	ldd	r25, Z+1	; 0x01
    99cc:	6c 01       	movw	r12, r24
    99ce:	e1 2c       	mov	r14, r1
    99d0:	f1 2c       	mov	r15, r1
    99d2:	89 2b       	or	r24, r25
    99d4:	31 f4       	brne	.+12     	; 0x99e2 <mount_volume+0x1c4>
    99d6:	c8 01       	movw	r24, r16
    99d8:	8b 5a       	subi	r24, 0xAB	; 171
    99da:	9f 4f       	sbci	r25, 0xFF	; 255
    99dc:	e3 da       	rcall	.-2618   	; 0x8fa4 <ld_dword>
    99de:	6b 01       	movw	r12, r22
    99e0:	7c 01       	movw	r14, r24
    99e2:	f8 01       	movw	r30, r16
    99e4:	ed 5b       	subi	r30, 0xBD	; 189
    99e6:	ff 4f       	sbci	r31, 0xFF	; 255
    99e8:	01 90       	ld	r0, Z+
    99ea:	f0 81       	ld	r31, Z
    99ec:	e0 2d       	mov	r30, r0
    99ee:	30 97       	sbiw	r30, 0x00	; 0
    99f0:	09 f4       	brne	.+2      	; 0x99f4 <mount_volume+0x1d6>
    99f2:	99 cf       	rjmp	.-206    	; 0x9926 <mount_volume+0x108>
    99f4:	aa 2d       	mov	r26, r10
    99f6:	b0 e0       	ldi	r27, 0x00	; 0
    99f8:	a3 01       	movw	r20, r6
    99fa:	92 01       	movw	r18, r4
    99fc:	0e 94 ed e6 	call	0x1cdda	; 0x1cdda <__muluhisi3>
    9a00:	69 8f       	std	Y+25, r22	; 0x19
    9a02:	7a 8f       	std	Y+26, r23	; 0x1a
    9a04:	8b 8f       	std	Y+27, r24	; 0x1b
    9a06:	9c 8f       	std	Y+28, r25	; 0x1c
    9a08:	9f 01       	movw	r18, r30
    9a0a:	40 e0       	ldi	r20, 0x00	; 0
    9a0c:	50 e0       	ldi	r21, 0x00	; 0
    9a0e:	2d 8f       	std	Y+29, r18	; 0x1d
    9a10:	3e 8f       	std	Y+30, r19	; 0x1e
    9a12:	4f 8f       	std	Y+31, r20	; 0x1f
    9a14:	58 a3       	std	Y+32, r21	; 0x20
    9a16:	c4 01       	movw	r24, r8
    9a18:	f4 e0       	ldi	r31, 0x04	; 4
    9a1a:	96 95       	lsr	r25
    9a1c:	87 95       	ror	r24
    9a1e:	fa 95       	dec	r31
    9a20:	e1 f7       	brne	.-8      	; 0x9a1a <mount_volume+0x1fc>
    9a22:	28 0f       	add	r18, r24
    9a24:	39 1f       	adc	r19, r25
    9a26:	41 1d       	adc	r20, r1
    9a28:	51 1d       	adc	r21, r1
    9a2a:	da 01       	movw	r26, r20
    9a2c:	c9 01       	movw	r24, r18
    9a2e:	29 8d       	ldd	r18, Y+25	; 0x19
    9a30:	3a 8d       	ldd	r19, Y+26	; 0x1a
    9a32:	4b 8d       	ldd	r20, Y+27	; 0x1b
    9a34:	5c 8d       	ldd	r21, Y+28	; 0x1c
    9a36:	28 0f       	add	r18, r24
    9a38:	39 1f       	adc	r19, r25
    9a3a:	4a 1f       	adc	r20, r26
    9a3c:	5b 1f       	adc	r21, r27
    9a3e:	2d 8b       	std	Y+21, r18	; 0x15
    9a40:	3e 8b       	std	Y+22, r19	; 0x16
    9a42:	4f 8b       	std	Y+23, r20	; 0x17
    9a44:	58 8f       	std	Y+24, r21	; 0x18
    9a46:	c2 16       	cp	r12, r18
    9a48:	d3 06       	cpc	r13, r19
    9a4a:	e4 06       	cpc	r14, r20
    9a4c:	f5 06       	cpc	r15, r21
    9a4e:	08 f4       	brcc	.+2      	; 0x9a52 <mount_volume+0x234>
    9a50:	6a cf       	rjmp	.-300    	; 0x9926 <mount_volume+0x108>
    9a52:	c7 01       	movw	r24, r14
    9a54:	b6 01       	movw	r22, r12
    9a56:	62 1b       	sub	r22, r18
    9a58:	73 0b       	sbc	r23, r19
    9a5a:	84 0b       	sbc	r24, r20
    9a5c:	95 0b       	sbc	r25, r21
    9a5e:	2b 2d       	mov	r18, r11
    9a60:	30 e0       	ldi	r19, 0x00	; 0
    9a62:	40 e0       	ldi	r20, 0x00	; 0
    9a64:	50 e0       	ldi	r21, 0x00	; 0
    9a66:	0e 94 a0 e6 	call	0x1cd40	; 0x1cd40 <__udivmodsi4>
    9a6a:	da 01       	movw	r26, r20
    9a6c:	c9 01       	movw	r24, r18
    9a6e:	01 97       	sbiw	r24, 0x01	; 1
    9a70:	a1 09       	sbc	r26, r1
    9a72:	b1 09       	sbc	r27, r1
    9a74:	85 3f       	cpi	r24, 0xF5	; 245
    9a76:	9f 4f       	sbci	r25, 0xFF	; 255
    9a78:	af 4f       	sbci	r26, 0xFF	; 255
    9a7a:	bf 40       	sbci	r27, 0x0F	; 15
    9a7c:	08 f0       	brcs	.+2      	; 0x9a80 <mount_volume+0x262>
    9a7e:	53 cf       	rjmp	.-346    	; 0x9926 <mount_volume+0x108>
    9a80:	26 3f       	cpi	r18, 0xF6	; 246
    9a82:	8f ef       	ldi	r24, 0xFF	; 255
    9a84:	38 07       	cpc	r19, r24
    9a86:	41 05       	cpc	r20, r1
    9a88:	51 05       	cpc	r21, r1
    9a8a:	50 f4       	brcc	.+20     	; 0x9aa0 <mount_volume+0x282>
    9a8c:	26 3f       	cpi	r18, 0xF6	; 246
    9a8e:	9f e0       	ldi	r25, 0x0F	; 15
    9a90:	39 07       	cpc	r19, r25
    9a92:	41 05       	cpc	r20, r1
    9a94:	51 05       	cpc	r21, r1
    9a96:	40 f4       	brcc	.+16     	; 0x9aa8 <mount_volume+0x28a>
    9a98:	aa 24       	eor	r10, r10
    9a9a:	a3 94       	inc	r10
    9a9c:	b1 2c       	mov	r11, r1
    9a9e:	07 c0       	rjmp	.+14     	; 0x9aae <mount_volume+0x290>
    9aa0:	73 e0       	ldi	r23, 0x03	; 3
    9aa2:	a7 2e       	mov	r10, r23
    9aa4:	b1 2c       	mov	r11, r1
    9aa6:	03 c0       	rjmp	.+6      	; 0x9aae <mount_volume+0x290>
    9aa8:	62 e0       	ldi	r22, 0x02	; 2
    9aaa:	a6 2e       	mov	r10, r22
    9aac:	b1 2c       	mov	r11, r1
    9aae:	69 01       	movw	r12, r18
    9ab0:	7a 01       	movw	r14, r20
    9ab2:	a2 e0       	ldi	r26, 0x02	; 2
    9ab4:	ca 0e       	add	r12, r26
    9ab6:	d1 1c       	adc	r13, r1
    9ab8:	e1 1c       	adc	r14, r1
    9aba:	f1 1c       	adc	r15, r1
    9abc:	f8 01       	movw	r30, r16
    9abe:	c1 8e       	std	Z+25, r12	; 0x19
    9ac0:	d2 8e       	std	Z+26, r13	; 0x1a
    9ac2:	e3 8e       	std	Z+27, r14	; 0x1b
    9ac4:	f4 8e       	std	Z+28, r15	; 0x1c
    9ac6:	29 89       	ldd	r18, Y+17	; 0x11
    9ac8:	3a 89       	ldd	r19, Y+18	; 0x12
    9aca:	4b 89       	ldd	r20, Y+19	; 0x13
    9acc:	5c 89       	ldd	r21, Y+20	; 0x14
    9ace:	21 a3       	std	Z+33, r18	; 0x21
    9ad0:	32 a3       	std	Z+34, r19	; 0x22
    9ad2:	43 a3       	std	Z+35, r20	; 0x23
    9ad4:	54 a3       	std	Z+36, r21	; 0x24
    9ad6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9ad8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9ada:	af 8d       	ldd	r26, Y+31	; 0x1f
    9adc:	b8 a1       	ldd	r27, Y+32	; 0x20
    9ade:	28 0f       	add	r18, r24
    9ae0:	39 1f       	adc	r19, r25
    9ae2:	4a 1f       	adc	r20, r26
    9ae4:	5b 1f       	adc	r21, r27
    9ae6:	2d 8f       	std	Y+29, r18	; 0x1d
    9ae8:	3e 8f       	std	Y+30, r19	; 0x1e
    9aea:	4f 8f       	std	Y+31, r20	; 0x1f
    9aec:	58 a3       	std	Y+32, r21	; 0x20
    9aee:	25 a3       	std	Z+37, r18	; 0x25
    9af0:	36 a3       	std	Z+38, r19	; 0x26
    9af2:	47 a3       	std	Z+39, r20	; 0x27
    9af4:	50 a7       	std	Z+40, r21	; 0x28
    9af6:	49 89       	ldd	r20, Y+17	; 0x11
    9af8:	5a 89       	ldd	r21, Y+18	; 0x12
    9afa:	6b 89       	ldd	r22, Y+19	; 0x13
    9afc:	7c 89       	ldd	r23, Y+20	; 0x14
    9afe:	8d 89       	ldd	r24, Y+21	; 0x15
    9b00:	9e 89       	ldd	r25, Y+22	; 0x16
    9b02:	af 89       	ldd	r26, Y+23	; 0x17
    9b04:	b8 8d       	ldd	r27, Y+24	; 0x18
    9b06:	48 0f       	add	r20, r24
    9b08:	59 1f       	adc	r21, r25
    9b0a:	6a 1f       	adc	r22, r26
    9b0c:	7b 1f       	adc	r23, r27
    9b0e:	45 a7       	std	Z+45, r20	; 0x2d
    9b10:	56 a7       	std	Z+46, r21	; 0x2e
    9b12:	67 a7       	std	Z+47, r22	; 0x2f
    9b14:	70 ab       	std	Z+48, r23	; 0x30
    9b16:	f3 e0       	ldi	r31, 0x03	; 3
    9b18:	af 16       	cp	r10, r31
    9b1a:	b1 04       	cpc	r11, r1
    9b1c:	e9 f4       	brne	.+58     	; 0x9b58 <mount_volume+0x33a>
    9b1e:	f8 01       	movw	r30, r16
    9b20:	e1 5a       	subi	r30, 0xA1	; 161
    9b22:	ff 4f       	sbci	r31, 0xFF	; 255
    9b24:	80 81       	ld	r24, Z
    9b26:	91 81       	ldd	r25, Z+1	; 0x01
    9b28:	89 2b       	or	r24, r25
    9b2a:	09 f0       	breq	.+2      	; 0x9b2e <mount_volume+0x310>
    9b2c:	fc ce       	rjmp	.-520    	; 0x9926 <mount_volume+0x108>
    9b2e:	81 14       	cp	r8, r1
    9b30:	91 04       	cpc	r9, r1
    9b32:	09 f0       	breq	.+2      	; 0x9b36 <mount_volume+0x318>
    9b34:	f8 ce       	rjmp	.-528    	; 0x9926 <mount_volume+0x108>
    9b36:	c8 01       	movw	r24, r16
    9b38:	8f 59       	subi	r24, 0x9F	; 159
    9b3a:	9f 4f       	sbci	r25, 0xFF	; 255
    9b3c:	33 da       	rcall	.-2970   	; 0x8fa4 <ld_dword>
    9b3e:	f8 01       	movw	r30, r16
    9b40:	61 a7       	std	Z+41, r22	; 0x29
    9b42:	72 a7       	std	Z+42, r23	; 0x2a
    9b44:	83 a7       	std	Z+43, r24	; 0x2b
    9b46:	94 a7       	std	Z+44, r25	; 0x2c
    9b48:	42 e0       	ldi	r20, 0x02	; 2
    9b4a:	cc 0c       	add	r12, r12
    9b4c:	dd 1c       	adc	r13, r13
    9b4e:	ee 1c       	adc	r14, r14
    9b50:	ff 1c       	adc	r15, r15
    9b52:	4a 95       	dec	r20
    9b54:	d1 f7       	brne	.-12     	; 0x9b4a <mount_volume+0x32c>
    9b56:	33 c0       	rjmp	.+102    	; 0x9bbe <mount_volume+0x3a0>
    9b58:	81 14       	cp	r8, r1
    9b5a:	91 04       	cpc	r9, r1
    9b5c:	09 f4       	brne	.+2      	; 0x9b60 <mount_volume+0x342>
    9b5e:	e3 ce       	rjmp	.-570    	; 0x9926 <mount_volume+0x108>
    9b60:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9b62:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9b64:	af 8d       	ldd	r26, Y+31	; 0x1f
    9b66:	b8 a1       	ldd	r27, Y+32	; 0x20
    9b68:	29 8d       	ldd	r18, Y+25	; 0x19
    9b6a:	3a 8d       	ldd	r19, Y+26	; 0x1a
    9b6c:	4b 8d       	ldd	r20, Y+27	; 0x1b
    9b6e:	5c 8d       	ldd	r21, Y+28	; 0x1c
    9b70:	82 0f       	add	r24, r18
    9b72:	93 1f       	adc	r25, r19
    9b74:	a4 1f       	adc	r26, r20
    9b76:	b5 1f       	adc	r27, r21
    9b78:	f8 01       	movw	r30, r16
    9b7a:	81 a7       	std	Z+41, r24	; 0x29
    9b7c:	92 a7       	std	Z+42, r25	; 0x2a
    9b7e:	a3 a7       	std	Z+43, r26	; 0x2b
    9b80:	b4 a7       	std	Z+44, r27	; 0x2c
    9b82:	f2 e0       	ldi	r31, 0x02	; 2
    9b84:	af 16       	cp	r10, r31
    9b86:	b1 04       	cpc	r11, r1
    9b88:	29 f4       	brne	.+10     	; 0x9b94 <mount_volume+0x376>
    9b8a:	cc 0c       	add	r12, r12
    9b8c:	dd 1c       	adc	r13, r13
    9b8e:	ee 1c       	adc	r14, r14
    9b90:	ff 1c       	adc	r15, r15
    9b92:	15 c0       	rjmp	.+42     	; 0x9bbe <mount_volume+0x3a0>
    9b94:	a3 e0       	ldi	r26, 0x03	; 3
    9b96:	b0 e0       	ldi	r27, 0x00	; 0
    9b98:	a7 01       	movw	r20, r14
    9b9a:	96 01       	movw	r18, r12
    9b9c:	0e 94 ed e6 	call	0x1cdda	; 0x1cdda <__muluhisi3>
    9ba0:	dc 01       	movw	r26, r24
    9ba2:	cb 01       	movw	r24, r22
    9ba4:	b6 95       	lsr	r27
    9ba6:	a7 95       	ror	r26
    9ba8:	97 95       	ror	r25
    9baa:	87 95       	ror	r24
    9bac:	21 e0       	ldi	r18, 0x01	; 1
    9bae:	c2 22       	and	r12, r18
    9bb0:	dd 24       	eor	r13, r13
    9bb2:	ee 24       	eor	r14, r14
    9bb4:	ff 24       	eor	r15, r15
    9bb6:	c8 0e       	add	r12, r24
    9bb8:	d9 1e       	adc	r13, r25
    9bba:	ea 1e       	adc	r14, r26
    9bbc:	fb 1e       	adc	r15, r27
    9bbe:	3f ef       	ldi	r19, 0xFF	; 255
    9bc0:	c3 0e       	add	r12, r19
    9bc2:	31 e0       	ldi	r19, 0x01	; 1
    9bc4:	d3 1e       	adc	r13, r19
    9bc6:	e1 1c       	adc	r14, r1
    9bc8:	f1 1c       	adc	r15, r1
    9bca:	89 e0       	ldi	r24, 0x09	; 9
    9bcc:	f6 94       	lsr	r15
    9bce:	e7 94       	ror	r14
    9bd0:	d7 94       	ror	r13
    9bd2:	c7 94       	ror	r12
    9bd4:	8a 95       	dec	r24
    9bd6:	d1 f7       	brne	.-12     	; 0x9bcc <mount_volume+0x3ae>
    9bd8:	4c 14       	cp	r4, r12
    9bda:	5d 04       	cpc	r5, r13
    9bdc:	6e 04       	cpc	r6, r14
    9bde:	7f 04       	cpc	r7, r15
    9be0:	08 f4       	brcc	.+2      	; 0x9be4 <mount_volume+0x3c6>
    9be2:	a1 ce       	rjmp	.-702    	; 0x9926 <mount_volume+0x108>
    9be4:	8f ef       	ldi	r24, 0xFF	; 255
    9be6:	9f ef       	ldi	r25, 0xFF	; 255
    9be8:	dc 01       	movw	r26, r24
    9bea:	f8 01       	movw	r30, r16
    9bec:	81 8b       	std	Z+17, r24	; 0x11
    9bee:	92 8b       	std	Z+18, r25	; 0x12
    9bf0:	a3 8b       	std	Z+19, r26	; 0x13
    9bf2:	b4 8b       	std	Z+20, r27	; 0x14
    9bf4:	85 87       	std	Z+13, r24	; 0x0d
    9bf6:	96 87       	std	Z+14, r25	; 0x0e
    9bf8:	a7 87       	std	Z+15, r26	; 0x0f
    9bfa:	b0 8b       	std	Z+16, r27	; 0x10
    9bfc:	80 e8       	ldi	r24, 0x80	; 128
    9bfe:	84 83       	std	Z+4, r24	; 0x04
    9c00:	f3 e0       	ldi	r31, 0x03	; 3
    9c02:	af 16       	cp	r10, r31
    9c04:	b1 04       	cpc	r11, r1
    9c06:	09 f0       	breq	.+2      	; 0x9c0a <mount_volume+0x3ec>
    9c08:	3f c0       	rjmp	.+126    	; 0x9c88 <mount_volume+0x46a>
    9c0a:	f8 01       	movw	r30, r16
    9c0c:	eb 59       	subi	r30, 0x9B	; 155
    9c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    9c10:	80 81       	ld	r24, Z
    9c12:	91 81       	ldd	r25, Z+1	; 0x01
    9c14:	01 97       	sbiw	r24, 0x01	; 1
    9c16:	c1 f5       	brne	.+112    	; 0x9c88 <mount_volume+0x46a>
    9c18:	49 89       	ldd	r20, Y+17	; 0x11
    9c1a:	5a 89       	ldd	r21, Y+18	; 0x12
    9c1c:	6b 89       	ldd	r22, Y+19	; 0x13
    9c1e:	7c 89       	ldd	r23, Y+20	; 0x14
    9c20:	4f 5f       	subi	r20, 0xFF	; 255
    9c22:	5f 4f       	sbci	r21, 0xFF	; 255
    9c24:	6f 4f       	sbci	r22, 0xFF	; 255
    9c26:	7f 4f       	sbci	r23, 0xFF	; 255
    9c28:	c8 01       	movw	r24, r16
    9c2a:	7e dd       	rcall	.-1284   	; 0x9728 <move_window>
    9c2c:	89 2b       	or	r24, r25
    9c2e:	61 f5       	brne	.+88     	; 0x9c88 <mount_volume+0x46a>
    9c30:	f8 01       	movw	r30, r16
    9c32:	14 82       	std	Z+4, r1	; 0x04
    9c34:	ed 5c       	subi	r30, 0xCD	; 205
    9c36:	fd 4f       	sbci	r31, 0xFD	; 253
    9c38:	80 81       	ld	r24, Z
    9c3a:	91 81       	ldd	r25, Z+1	; 0x01
    9c3c:	85 35       	cpi	r24, 0x55	; 85
    9c3e:	9a 4a       	sbci	r25, 0xAA	; 170
    9c40:	19 f5       	brne	.+70     	; 0x9c88 <mount_volume+0x46a>
    9c42:	c8 01       	movw	r24, r16
    9c44:	c5 96       	adiw	r24, 0x35	; 53
    9c46:	ae d9       	rcall	.-3236   	; 0x8fa4 <ld_dword>
    9c48:	62 35       	cpi	r22, 0x52	; 82
    9c4a:	72 45       	sbci	r23, 0x52	; 82
    9c4c:	81 46       	sbci	r24, 0x61	; 97
    9c4e:	91 44       	sbci	r25, 0x41	; 65
    9c50:	d9 f4       	brne	.+54     	; 0x9c88 <mount_volume+0x46a>
    9c52:	c8 01       	movw	r24, r16
    9c54:	87 5e       	subi	r24, 0xE7	; 231
    9c56:	9d 4f       	sbci	r25, 0xFD	; 253
    9c58:	a5 d9       	rcall	.-3254   	; 0x8fa4 <ld_dword>
    9c5a:	62 37       	cpi	r22, 0x72	; 114
    9c5c:	72 47       	sbci	r23, 0x72	; 114
    9c5e:	81 44       	sbci	r24, 0x41	; 65
    9c60:	91 46       	sbci	r25, 0x61	; 97
    9c62:	91 f4       	brne	.+36     	; 0x9c88 <mount_volume+0x46a>
    9c64:	c8 01       	movw	r24, r16
    9c66:	83 5e       	subi	r24, 0xE3	; 227
    9c68:	9d 4f       	sbci	r25, 0xFD	; 253
    9c6a:	9c d9       	rcall	.-3272   	; 0x8fa4 <ld_dword>
    9c6c:	f8 01       	movw	r30, r16
    9c6e:	61 8b       	std	Z+17, r22	; 0x11
    9c70:	72 8b       	std	Z+18, r23	; 0x12
    9c72:	83 8b       	std	Z+19, r24	; 0x13
    9c74:	94 8b       	std	Z+20, r25	; 0x14
    9c76:	c8 01       	movw	r24, r16
    9c78:	8f 5d       	subi	r24, 0xDF	; 223
    9c7a:	9d 4f       	sbci	r25, 0xFD	; 253
    9c7c:	93 d9       	rcall	.-3290   	; 0x8fa4 <ld_dword>
    9c7e:	f8 01       	movw	r30, r16
    9c80:	65 87       	std	Z+13, r22	; 0x0d
    9c82:	76 87       	std	Z+14, r23	; 0x0e
    9c84:	87 87       	std	Z+15, r24	; 0x0f
    9c86:	90 8b       	std	Z+16, r25	; 0x10
    9c88:	d8 01       	movw	r26, r16
    9c8a:	ac 92       	st	X, r10
    9c8c:	80 91 1f 18 	lds	r24, 0x181F	; 0x80181f <Fsid>
    9c90:	90 91 20 18 	lds	r25, 0x1820	; 0x801820 <Fsid+0x1>
    9c94:	01 96       	adiw	r24, 0x01	; 1
    9c96:	90 93 20 18 	sts	0x1820, r25	; 0x801820 <Fsid+0x1>
    9c9a:	80 93 1f 18 	sts	0x181F, r24	; 0x80181f <Fsid>
    9c9e:	f8 01       	movw	r30, r16
    9ca0:	96 83       	std	Z+6, r25	; 0x06
    9ca2:	85 83       	std	Z+5, r24	; 0x05
    9ca4:	15 8a       	std	Z+21, r1	; 0x15
    9ca6:	16 8a       	std	Z+22, r1	; 0x16
    9ca8:	17 8a       	std	Z+23, r1	; 0x17
    9caa:	10 8e       	std	Z+24, r1	; 0x18
    9cac:	06 c0       	rjmp	.+12     	; 0x9cba <mount_volume+0x49c>
    9cae:	8b e0       	ldi	r24, 0x0B	; 11
    9cb0:	90 e0       	ldi	r25, 0x00	; 0
    9cb2:	0b c0       	rjmp	.+22     	; 0x9cca <mount_volume+0x4ac>
    9cb4:	8c e0       	ldi	r24, 0x0C	; 12
    9cb6:	90 e0       	ldi	r25, 0x00	; 0
    9cb8:	08 c0       	rjmp	.+16     	; 0x9cca <mount_volume+0x4ac>
    9cba:	80 e0       	ldi	r24, 0x00	; 0
    9cbc:	90 e0       	ldi	r25, 0x00	; 0
    9cbe:	05 c0       	rjmp	.+10     	; 0x9cca <mount_volume+0x4ac>
    9cc0:	83 e0       	ldi	r24, 0x03	; 3
    9cc2:	90 e0       	ldi	r25, 0x00	; 0
    9cc4:	02 c0       	rjmp	.+4      	; 0x9cca <mount_volume+0x4ac>
    9cc6:	81 e0       	ldi	r24, 0x01	; 1
    9cc8:	90 e0       	ldi	r25, 0x00	; 0
    9cca:	a0 96       	adiw	r28, 0x20	; 32
    9ccc:	e0 e1       	ldi	r30, 0x10	; 16
    9cce:	0c 94 2b e7 	jmp	0x1ce56	; 0x1ce56 <__epilogue_restores__+0x4>

00009cd2 <put_fat>:
    9cd2:	a6 e0       	ldi	r26, 0x06	; 6
    9cd4:	b0 e0       	ldi	r27, 0x00	; 0
    9cd6:	ef e6       	ldi	r30, 0x6F	; 111
    9cd8:	fe e4       	ldi	r31, 0x4E	; 78
    9cda:	0c 94 0d e7 	jmp	0x1ce1a	; 0x1ce1a <__prologue_saves__>
    9cde:	42 30       	cpi	r20, 0x02	; 2
    9ce0:	51 05       	cpc	r21, r1
    9ce2:	61 05       	cpc	r22, r1
    9ce4:	71 05       	cpc	r23, r1
    9ce6:	08 f4       	brcc	.+2      	; 0x9cea <put_fat+0x18>
    9ce8:	e5 c0       	rjmp	.+458    	; 0x9eb4 <put_fat+0x1e2>
    9cea:	fc 01       	movw	r30, r24
    9cec:	c1 8c       	ldd	r12, Z+25	; 0x19
    9cee:	d2 8c       	ldd	r13, Z+26	; 0x1a
    9cf0:	e3 8c       	ldd	r14, Z+27	; 0x1b
    9cf2:	f4 8c       	ldd	r15, Z+28	; 0x1c
    9cf4:	4c 15       	cp	r20, r12
    9cf6:	5d 05       	cpc	r21, r13
    9cf8:	6e 05       	cpc	r22, r14
    9cfa:	7f 05       	cpc	r23, r15
    9cfc:	08 f0       	brcs	.+2      	; 0x9d00 <put_fat+0x2e>
    9cfe:	da c0       	rjmp	.+436    	; 0x9eb4 <put_fat+0x1e2>
    9d00:	28 01       	movw	r4, r16
    9d02:	39 01       	movw	r6, r18
    9d04:	6a 01       	movw	r12, r20
    9d06:	7b 01       	movw	r14, r22
    9d08:	9e 83       	std	Y+6, r25	; 0x06
    9d0a:	8d 83       	std	Y+5, r24	; 0x05
    9d0c:	80 81       	ld	r24, Z
    9d0e:	82 30       	cpi	r24, 0x02	; 2
    9d10:	09 f4       	brne	.+2      	; 0x9d14 <put_fat+0x42>
    9d12:	73 c0       	rjmp	.+230    	; 0x9dfa <put_fat+0x128>
    9d14:	83 30       	cpi	r24, 0x03	; 3
    9d16:	09 f4       	brne	.+2      	; 0x9d1a <put_fat+0x48>
    9d18:	92 c0       	rjmp	.+292    	; 0x9e3e <put_fat+0x16c>
    9d1a:	81 30       	cpi	r24, 0x01	; 1
    9d1c:	09 f0       	breq	.+2      	; 0x9d20 <put_fat+0x4e>
    9d1e:	ca c0       	rjmp	.+404    	; 0x9eb4 <put_fat+0x1e2>
    9d20:	4a 01       	movw	r8, r20
    9d22:	96 94       	lsr	r9
    9d24:	87 94       	ror	r8
    9d26:	84 0e       	add	r8, r20
    9d28:	95 1e       	adc	r9, r21
    9d2a:	c4 01       	movw	r24, r8
    9d2c:	89 2f       	mov	r24, r25
    9d2e:	99 27       	eor	r25, r25
    9d30:	86 95       	lsr	r24
    9d32:	45 a1       	ldd	r20, Z+37	; 0x25
    9d34:	56 a1       	ldd	r21, Z+38	; 0x26
    9d36:	67 a1       	ldd	r22, Z+39	; 0x27
    9d38:	70 a5       	ldd	r23, Z+40	; 0x28
    9d3a:	48 0f       	add	r20, r24
    9d3c:	59 1f       	adc	r21, r25
    9d3e:	61 1d       	adc	r22, r1
    9d40:	71 1d       	adc	r23, r1
    9d42:	cf 01       	movw	r24, r30
    9d44:	f1 dc       	rcall	.-1566   	; 0x9728 <move_window>
    9d46:	5c 01       	movw	r10, r24
    9d48:	89 2b       	or	r24, r25
    9d4a:	09 f0       	breq	.+2      	; 0x9d4e <put_fat+0x7c>
    9d4c:	b6 c0       	rjmp	.+364    	; 0x9eba <put_fat+0x1e8>
    9d4e:	2d 80       	ldd	r2, Y+5	; 0x05
    9d50:	3e 80       	ldd	r3, Y+6	; 0x06
    9d52:	f5 e3       	ldi	r31, 0x35	; 53
    9d54:	2f 0e       	add	r2, r31
    9d56:	31 1c       	adc	r3, r1
    9d58:	84 01       	movw	r16, r8
    9d5a:	0f 5f       	subi	r16, 0xFF	; 255
    9d5c:	1f 4f       	sbci	r17, 0xFF	; 255
    9d5e:	21 e0       	ldi	r18, 0x01	; 1
    9d60:	92 22       	and	r9, r18
    9d62:	f1 01       	movw	r30, r2
    9d64:	e8 0d       	add	r30, r8
    9d66:	f9 1d       	adc	r31, r9
    9d68:	d7 01       	movw	r26, r14
    9d6a:	c6 01       	movw	r24, r12
    9d6c:	81 70       	andi	r24, 0x01	; 1
    9d6e:	99 27       	eor	r25, r25
    9d70:	aa 27       	eor	r26, r26
    9d72:	bb 27       	eor	r27, r27
    9d74:	89 83       	std	Y+1, r24	; 0x01
    9d76:	9a 83       	std	Y+2, r25	; 0x02
    9d78:	ab 83       	std	Y+3, r26	; 0x03
    9d7a:	bc 83       	std	Y+4, r27	; 0x04
    9d7c:	c0 fe       	sbrs	r12, 0
    9d7e:	09 c0       	rjmp	.+18     	; 0x9d92 <put_fat+0xc0>
    9d80:	80 81       	ld	r24, Z
    9d82:	28 2f       	mov	r18, r24
    9d84:	2f 70       	andi	r18, 0x0F	; 15
    9d86:	a0 e1       	ldi	r26, 0x10	; 16
    9d88:	4a 9e       	mul	r4, r26
    9d8a:	c0 01       	movw	r24, r0
    9d8c:	11 24       	eor	r1, r1
    9d8e:	82 2b       	or	r24, r18
    9d90:	01 c0       	rjmp	.+2      	; 0x9d94 <put_fat+0xc2>
    9d92:	84 2d       	mov	r24, r4
    9d94:	80 83       	st	Z, r24
    9d96:	81 e0       	ldi	r24, 0x01	; 1
    9d98:	ed 81       	ldd	r30, Y+5	; 0x05
    9d9a:	fe 81       	ldd	r31, Y+6	; 0x06
    9d9c:	83 83       	std	Z+3, r24	; 0x03
    9d9e:	45 a1       	ldd	r20, Z+37	; 0x25
    9da0:	56 a1       	ldd	r21, Z+38	; 0x26
    9da2:	67 a1       	ldd	r22, Z+39	; 0x27
    9da4:	70 a5       	ldd	r23, Z+40	; 0x28
    9da6:	c8 01       	movw	r24, r16
    9da8:	89 2f       	mov	r24, r25
    9daa:	99 27       	eor	r25, r25
    9dac:	86 95       	lsr	r24
    9dae:	48 0f       	add	r20, r24
    9db0:	59 1f       	adc	r21, r25
    9db2:	61 1d       	adc	r22, r1
    9db4:	71 1d       	adc	r23, r1
    9db6:	cf 01       	movw	r24, r30
    9db8:	b7 dc       	rcall	.-1682   	; 0x9728 <move_window>
    9dba:	5c 01       	movw	r10, r24
    9dbc:	89 2b       	or	r24, r25
    9dbe:	09 f0       	breq	.+2      	; 0x9dc2 <put_fat+0xf0>
    9dc0:	7c c0       	rjmp	.+248    	; 0x9eba <put_fat+0x1e8>
    9dc2:	11 70       	andi	r17, 0x01	; 1
    9dc4:	f1 01       	movw	r30, r2
    9dc6:	e0 0f       	add	r30, r16
    9dc8:	f1 1f       	adc	r31, r17
    9dca:	89 81       	ldd	r24, Y+1	; 0x01
    9dcc:	9a 81       	ldd	r25, Y+2	; 0x02
    9dce:	ab 81       	ldd	r26, Y+3	; 0x03
    9dd0:	bc 81       	ldd	r27, Y+4	; 0x04
    9dd2:	89 2b       	or	r24, r25
    9dd4:	8a 2b       	or	r24, r26
    9dd6:	8b 2b       	or	r24, r27
    9dd8:	41 f0       	breq	.+16     	; 0x9dea <put_fat+0x118>
    9dda:	54 e0       	ldi	r21, 0x04	; 4
    9ddc:	76 94       	lsr	r7
    9dde:	67 94       	ror	r6
    9de0:	57 94       	ror	r5
    9de2:	47 94       	ror	r4
    9de4:	5a 95       	dec	r21
    9de6:	d1 f7       	brne	.-12     	; 0x9ddc <put_fat+0x10a>
    9de8:	06 c0       	rjmp	.+12     	; 0x9df6 <put_fat+0x124>
    9dea:	00 81       	ld	r16, Z
    9dec:	00 7f       	andi	r16, 0xF0	; 240
    9dee:	85 2d       	mov	r24, r5
    9df0:	8f 70       	andi	r24, 0x0F	; 15
    9df2:	40 2e       	mov	r4, r16
    9df4:	48 2a       	or	r4, r24
    9df6:	40 82       	st	Z, r4
    9df8:	58 c0       	rjmp	.+176    	; 0x9eaa <put_fat+0x1d8>
    9dfa:	77 27       	eor	r23, r23
    9dfc:	6f 2d       	mov	r22, r15
    9dfe:	5e 2d       	mov	r21, r14
    9e00:	4d 2d       	mov	r20, r13
    9e02:	ed 81       	ldd	r30, Y+5	; 0x05
    9e04:	fe 81       	ldd	r31, Y+6	; 0x06
    9e06:	85 a1       	ldd	r24, Z+37	; 0x25
    9e08:	96 a1       	ldd	r25, Z+38	; 0x26
    9e0a:	a7 a1       	ldd	r26, Z+39	; 0x27
    9e0c:	b0 a5       	ldd	r27, Z+40	; 0x28
    9e0e:	48 0f       	add	r20, r24
    9e10:	59 1f       	adc	r21, r25
    9e12:	6a 1f       	adc	r22, r26
    9e14:	7b 1f       	adc	r23, r27
    9e16:	cf 01       	movw	r24, r30
    9e18:	87 dc       	rcall	.-1778   	; 0x9728 <move_window>
    9e1a:	5c 01       	movw	r10, r24
    9e1c:	89 2b       	or	r24, r25
    9e1e:	09 f0       	breq	.+2      	; 0x9e22 <put_fat+0x150>
    9e20:	4c c0       	rjmp	.+152    	; 0x9eba <put_fat+0x1e8>
    9e22:	ed 81       	ldd	r30, Y+5	; 0x05
    9e24:	fe 81       	ldd	r31, Y+6	; 0x06
    9e26:	f5 96       	adiw	r30, 0x35	; 53
    9e28:	cc 0c       	add	r12, r12
    9e2a:	dd 1c       	adc	r13, r13
    9e2c:	e8 94       	clt
    9e2e:	c0 f8       	bld	r12, 0
    9e30:	21 e0       	ldi	r18, 0x01	; 1
    9e32:	d2 22       	and	r13, r18
    9e34:	ec 0d       	add	r30, r12
    9e36:	fd 1d       	adc	r31, r13
    9e38:	40 82       	st	Z, r4
    9e3a:	51 82       	std	Z+1, r5	; 0x01
    9e3c:	36 c0       	rjmp	.+108    	; 0x9eaa <put_fat+0x1d8>
    9e3e:	ed 81       	ldd	r30, Y+5	; 0x05
    9e40:	fe 81       	ldd	r31, Y+6	; 0x06
    9e42:	85 a1       	ldd	r24, Z+37	; 0x25
    9e44:	96 a1       	ldd	r25, Z+38	; 0x26
    9e46:	a7 a1       	ldd	r26, Z+39	; 0x27
    9e48:	b0 a5       	ldd	r27, Z+40	; 0x28
    9e4a:	27 e0       	ldi	r18, 0x07	; 7
    9e4c:	76 95       	lsr	r23
    9e4e:	67 95       	ror	r22
    9e50:	57 95       	ror	r21
    9e52:	47 95       	ror	r20
    9e54:	2a 95       	dec	r18
    9e56:	d1 f7       	brne	.-12     	; 0x9e4c <put_fat+0x17a>
    9e58:	48 0f       	add	r20, r24
    9e5a:	59 1f       	adc	r21, r25
    9e5c:	6a 1f       	adc	r22, r26
    9e5e:	7b 1f       	adc	r23, r27
    9e60:	cf 01       	movw	r24, r30
    9e62:	62 dc       	rcall	.-1852   	; 0x9728 <move_window>
    9e64:	5c 01       	movw	r10, r24
    9e66:	89 2b       	or	r24, r25
    9e68:	41 f5       	brne	.+80     	; 0x9eba <put_fat+0x1e8>
    9e6a:	4d 81       	ldd	r20, Y+5	; 0x05
    9e6c:	5e 81       	ldd	r21, Y+6	; 0x06
    9e6e:	4b 5c       	subi	r20, 0xCB	; 203
    9e70:	5f 4f       	sbci	r21, 0xFF	; 255
    9e72:	cc 0c       	add	r12, r12
    9e74:	dd 1c       	adc	r13, r13
    9e76:	cc 0c       	add	r12, r12
    9e78:	dd 1c       	adc	r13, r13
    9e7a:	fc ef       	ldi	r31, 0xFC	; 252
    9e7c:	cf 22       	and	r12, r31
    9e7e:	f1 e0       	ldi	r31, 0x01	; 1
    9e80:	df 22       	and	r13, r31
    9e82:	c4 0e       	add	r12, r20
    9e84:	d5 1e       	adc	r13, r21
    9e86:	c6 01       	movw	r24, r12
    9e88:	8d d8       	rcall	.-3814   	; 0x8fa4 <ld_dword>
    9e8a:	2f e0       	ldi	r18, 0x0F	; 15
    9e8c:	72 22       	and	r7, r18
    9e8e:	dc 01       	movw	r26, r24
    9e90:	cb 01       	movw	r24, r22
    9e92:	88 27       	eor	r24, r24
    9e94:	99 27       	eor	r25, r25
    9e96:	aa 27       	eor	r26, r26
    9e98:	b0 7f       	andi	r27, 0xF0	; 240
    9e9a:	b3 01       	movw	r22, r6
    9e9c:	a2 01       	movw	r20, r4
    9e9e:	48 2b       	or	r20, r24
    9ea0:	59 2b       	or	r21, r25
    9ea2:	6a 2b       	or	r22, r26
    9ea4:	7b 2b       	or	r23, r27
    9ea6:	c6 01       	movw	r24, r12
    9ea8:	92 d8       	rcall	.-3804   	; 0x8fce <st_dword>
    9eaa:	81 e0       	ldi	r24, 0x01	; 1
    9eac:	ed 81       	ldd	r30, Y+5	; 0x05
    9eae:	fe 81       	ldd	r31, Y+6	; 0x06
    9eb0:	83 83       	std	Z+3, r24	; 0x03
    9eb2:	03 c0       	rjmp	.+6      	; 0x9eba <put_fat+0x1e8>
    9eb4:	82 e0       	ldi	r24, 0x02	; 2
    9eb6:	a8 2e       	mov	r10, r24
    9eb8:	b1 2c       	mov	r11, r1
    9eba:	c5 01       	movw	r24, r10
    9ebc:	26 96       	adiw	r28, 0x06	; 6
    9ebe:	e2 e1       	ldi	r30, 0x12	; 18
    9ec0:	0c 94 29 e7 	jmp	0x1ce52	; 0x1ce52 <__epilogue_restores__>

00009ec4 <get_fat.isra.9>:
    9ec4:	a0 e0       	ldi	r26, 0x00	; 0
    9ec6:	b0 e0       	ldi	r27, 0x00	; 0
    9ec8:	e8 e6       	ldi	r30, 0x68	; 104
    9eca:	ff e4       	ldi	r31, 0x4F	; 79
    9ecc:	0c 94 15 e7 	jmp	0x1ce2a	; 0x1ce2a <__prologue_saves__+0x10>
    9ed0:	42 30       	cpi	r20, 0x02	; 2
    9ed2:	51 05       	cpc	r21, r1
    9ed4:	61 05       	cpc	r22, r1
    9ed6:	71 05       	cpc	r23, r1
    9ed8:	08 f4       	brcc	.+2      	; 0x9edc <get_fat.isra.9+0x18>
    9eda:	9f c0       	rjmp	.+318    	; 0xa01a <get_fat.isra.9+0x156>
    9edc:	fc 01       	movw	r30, r24
    9ede:	01 8d       	ldd	r16, Z+25	; 0x19
    9ee0:	12 8d       	ldd	r17, Z+26	; 0x1a
    9ee2:	23 8d       	ldd	r18, Z+27	; 0x1b
    9ee4:	34 8d       	ldd	r19, Z+28	; 0x1c
    9ee6:	40 17       	cp	r20, r16
    9ee8:	51 07       	cpc	r21, r17
    9eea:	62 07       	cpc	r22, r18
    9eec:	73 07       	cpc	r23, r19
    9eee:	08 f0       	brcs	.+2      	; 0x9ef2 <get_fat.isra.9+0x2e>
    9ef0:	94 c0       	rjmp	.+296    	; 0xa01a <get_fat.isra.9+0x156>
    9ef2:	6a 01       	movw	r12, r20
    9ef4:	7b 01       	movw	r14, r22
    9ef6:	8c 01       	movw	r16, r24
    9ef8:	80 81       	ld	r24, Z
    9efa:	82 30       	cpi	r24, 0x02	; 2
    9efc:	09 f4       	brne	.+2      	; 0x9f00 <get_fat.isra.9+0x3c>
    9efe:	4b c0       	rjmp	.+150    	; 0x9f96 <get_fat.isra.9+0xd2>
    9f00:	83 30       	cpi	r24, 0x03	; 3
    9f02:	09 f4       	brne	.+2      	; 0x9f06 <get_fat.isra.9+0x42>
    9f04:	67 c0       	rjmp	.+206    	; 0x9fd4 <get_fat.isra.9+0x110>
    9f06:	81 30       	cpi	r24, 0x01	; 1
    9f08:	09 f0       	breq	.+2      	; 0x9f0c <get_fat.isra.9+0x48>
    9f0a:	87 c0       	rjmp	.+270    	; 0xa01a <get_fat.isra.9+0x156>
    9f0c:	ea 01       	movw	r28, r20
    9f0e:	d6 95       	lsr	r29
    9f10:	c7 95       	ror	r28
    9f12:	cc 0d       	add	r28, r12
    9f14:	dd 1d       	adc	r29, r13
    9f16:	ce 01       	movw	r24, r28
    9f18:	89 2f       	mov	r24, r25
    9f1a:	99 27       	eor	r25, r25
    9f1c:	86 95       	lsr	r24
    9f1e:	45 a1       	ldd	r20, Z+37	; 0x25
    9f20:	56 a1       	ldd	r21, Z+38	; 0x26
    9f22:	67 a1       	ldd	r22, Z+39	; 0x27
    9f24:	70 a5       	ldd	r23, Z+40	; 0x28
    9f26:	48 0f       	add	r20, r24
    9f28:	59 1f       	adc	r21, r25
    9f2a:	61 1d       	adc	r22, r1
    9f2c:	71 1d       	adc	r23, r1
    9f2e:	cf 01       	movw	r24, r30
    9f30:	fb db       	rcall	.-2058   	; 0x9728 <move_window>
    9f32:	89 2b       	or	r24, r25
    9f34:	21 f0       	breq	.+8      	; 0x9f3e <get_fat.isra.9+0x7a>
    9f36:	6f ef       	ldi	r22, 0xFF	; 255
    9f38:	7f ef       	ldi	r23, 0xFF	; 255
    9f3a:	cb 01       	movw	r24, r22
    9f3c:	72 c0       	rjmp	.+228    	; 0xa022 <get_fat.isra.9+0x15e>
    9f3e:	5e 01       	movw	r10, r28
    9f40:	ff ef       	ldi	r31, 0xFF	; 255
    9f42:	af 1a       	sub	r10, r31
    9f44:	bf 0a       	sbc	r11, r31
    9f46:	d1 70       	andi	r29, 0x01	; 1
    9f48:	c0 0f       	add	r28, r16
    9f4a:	d1 1f       	adc	r29, r17
    9f4c:	cd a9       	ldd	r28, Y+53	; 0x35
    9f4e:	c5 01       	movw	r24, r10
    9f50:	89 2f       	mov	r24, r25
    9f52:	99 27       	eor	r25, r25
    9f54:	86 95       	lsr	r24
    9f56:	f8 01       	movw	r30, r16
    9f58:	45 a1       	ldd	r20, Z+37	; 0x25
    9f5a:	56 a1       	ldd	r21, Z+38	; 0x26
    9f5c:	67 a1       	ldd	r22, Z+39	; 0x27
    9f5e:	70 a5       	ldd	r23, Z+40	; 0x28
    9f60:	48 0f       	add	r20, r24
    9f62:	59 1f       	adc	r21, r25
    9f64:	61 1d       	adc	r22, r1
    9f66:	71 1d       	adc	r23, r1
    9f68:	c8 01       	movw	r24, r16
    9f6a:	de db       	rcall	.-2116   	; 0x9728 <move_window>
    9f6c:	89 2b       	or	r24, r25
    9f6e:	19 f7       	brne	.-58     	; 0x9f36 <get_fat.isra.9+0x72>
    9f70:	f1 e0       	ldi	r31, 0x01	; 1
    9f72:	bf 22       	and	r11, r31
    9f74:	f8 01       	movw	r30, r16
    9f76:	ea 0d       	add	r30, r10
    9f78:	fb 1d       	adc	r31, r11
    9f7a:	85 a9       	ldd	r24, Z+53	; 0x35
    9f7c:	6c 2f       	mov	r22, r28
    9f7e:	70 e0       	ldi	r23, 0x00	; 0
    9f80:	78 2b       	or	r23, r24
    9f82:	c0 fe       	sbrs	r12, 0
    9f84:	06 c0       	rjmp	.+12     	; 0x9f92 <get_fat.isra.9+0xce>
    9f86:	54 e0       	ldi	r21, 0x04	; 4
    9f88:	76 95       	lsr	r23
    9f8a:	67 95       	ror	r22
    9f8c:	5a 95       	dec	r21
    9f8e:	e1 f7       	brne	.-8      	; 0x9f88 <get_fat.isra.9+0xc4>
    9f90:	1e c0       	rjmp	.+60     	; 0x9fce <get_fat.isra.9+0x10a>
    9f92:	7f 70       	andi	r23, 0x0F	; 15
    9f94:	1c c0       	rjmp	.+56     	; 0x9fce <get_fat.isra.9+0x10a>
    9f96:	77 27       	eor	r23, r23
    9f98:	6f 2d       	mov	r22, r15
    9f9a:	5e 2d       	mov	r21, r14
    9f9c:	4d 2d       	mov	r20, r13
    9f9e:	85 a1       	ldd	r24, Z+37	; 0x25
    9fa0:	96 a1       	ldd	r25, Z+38	; 0x26
    9fa2:	a7 a1       	ldd	r26, Z+39	; 0x27
    9fa4:	b0 a5       	ldd	r27, Z+40	; 0x28
    9fa6:	48 0f       	add	r20, r24
    9fa8:	59 1f       	adc	r21, r25
    9faa:	6a 1f       	adc	r22, r26
    9fac:	7b 1f       	adc	r23, r27
    9fae:	cf 01       	movw	r24, r30
    9fb0:	bb db       	rcall	.-2186   	; 0x9728 <move_window>
    9fb2:	89 2b       	or	r24, r25
    9fb4:	09 f0       	breq	.+2      	; 0x9fb8 <get_fat.isra.9+0xf4>
    9fb6:	bf cf       	rjmp	.-130    	; 0x9f36 <get_fat.isra.9+0x72>
    9fb8:	cc 0c       	add	r12, r12
    9fba:	dd 1c       	adc	r13, r13
    9fbc:	e8 94       	clt
    9fbe:	c0 f8       	bld	r12, 0
    9fc0:	f1 e0       	ldi	r31, 0x01	; 1
    9fc2:	df 22       	and	r13, r31
    9fc4:	f8 01       	movw	r30, r16
    9fc6:	ec 0d       	add	r30, r12
    9fc8:	fd 1d       	adc	r31, r13
    9fca:	65 a9       	ldd	r22, Z+53	; 0x35
    9fcc:	76 a9       	ldd	r23, Z+54	; 0x36
    9fce:	80 e0       	ldi	r24, 0x00	; 0
    9fd0:	90 e0       	ldi	r25, 0x00	; 0
    9fd2:	27 c0       	rjmp	.+78     	; 0xa022 <get_fat.isra.9+0x15e>
    9fd4:	85 a1       	ldd	r24, Z+37	; 0x25
    9fd6:	96 a1       	ldd	r25, Z+38	; 0x26
    9fd8:	a7 a1       	ldd	r26, Z+39	; 0x27
    9fda:	b0 a5       	ldd	r27, Z+40	; 0x28
    9fdc:	27 e0       	ldi	r18, 0x07	; 7
    9fde:	76 95       	lsr	r23
    9fe0:	67 95       	ror	r22
    9fe2:	57 95       	ror	r21
    9fe4:	47 95       	ror	r20
    9fe6:	2a 95       	dec	r18
    9fe8:	d1 f7       	brne	.-12     	; 0x9fde <get_fat.isra.9+0x11a>
    9fea:	48 0f       	add	r20, r24
    9fec:	59 1f       	adc	r21, r25
    9fee:	6a 1f       	adc	r22, r26
    9ff0:	7b 1f       	adc	r23, r27
    9ff2:	cf 01       	movw	r24, r30
    9ff4:	99 db       	rcall	.-2254   	; 0x9728 <move_window>
    9ff6:	89 2b       	or	r24, r25
    9ff8:	09 f0       	breq	.+2      	; 0x9ffc <get_fat.isra.9+0x138>
    9ffa:	9d cf       	rjmp	.-198    	; 0x9f36 <get_fat.isra.9+0x72>
    9ffc:	0b 5c       	subi	r16, 0xCB	; 203
    9ffe:	1f 4f       	sbci	r17, 0xFF	; 255
    a000:	cc 0c       	add	r12, r12
    a002:	dd 1c       	adc	r13, r13
    a004:	cc 0c       	add	r12, r12
    a006:	dd 1c       	adc	r13, r13
    a008:	c6 01       	movw	r24, r12
    a00a:	8c 7f       	andi	r24, 0xFC	; 252
    a00c:	91 70       	andi	r25, 0x01	; 1
    a00e:	80 0f       	add	r24, r16
    a010:	91 1f       	adc	r25, r17
    a012:	0e 94 d2 47 	call	0x8fa4	; 0x8fa4 <ld_dword>
    a016:	9f 70       	andi	r25, 0x0F	; 15
    a018:	04 c0       	rjmp	.+8      	; 0xa022 <get_fat.isra.9+0x15e>
    a01a:	61 e0       	ldi	r22, 0x01	; 1
    a01c:	70 e0       	ldi	r23, 0x00	; 0
    a01e:	80 e0       	ldi	r24, 0x00	; 0
    a020:	90 e0       	ldi	r25, 0x00	; 0
    a022:	cd b7       	in	r28, 0x3d	; 61
    a024:	de b7       	in	r29, 0x3e	; 62
    a026:	ea e0       	ldi	r30, 0x0A	; 10
    a028:	0c 94 31 e7 	jmp	0x1ce62	; 0x1ce62 <__epilogue_restores__+0x10>

0000a02c <dir_sdi>:
    a02c:	a0 e0       	ldi	r26, 0x00	; 0
    a02e:	b0 e0       	ldi	r27, 0x00	; 0
    a030:	ec e1       	ldi	r30, 0x1C	; 28
    a032:	f0 e5       	ldi	r31, 0x50	; 80
    a034:	0c 94 0f e7 	jmp	0x1ce1e	; 0x1ce1e <__prologue_saves__+0x4>
    a038:	ec 01       	movw	r28, r24
    a03a:	6a 01       	movw	r12, r20
    a03c:	7b 01       	movw	r14, r22
    a03e:	41 15       	cp	r20, r1
    a040:	51 05       	cpc	r21, r1
    a042:	80 e2       	ldi	r24, 0x20	; 32
    a044:	68 07       	cpc	r22, r24
    a046:	71 05       	cpc	r23, r1
    a048:	18 f0       	brcs	.+6      	; 0xa050 <dir_sdi+0x24>
    a04a:	82 e0       	ldi	r24, 0x02	; 2
    a04c:	90 e0       	ldi	r25, 0x00	; 0
    a04e:	aa c0       	rjmp	.+340    	; 0xa1a4 <dir_sdi+0x178>
    a050:	db 01       	movw	r26, r22
    a052:	ca 01       	movw	r24, r20
    a054:	8f 71       	andi	r24, 0x1F	; 31
    a056:	99 27       	eor	r25, r25
    a058:	aa 27       	eor	r26, r26
    a05a:	bb 27       	eor	r27, r27
    a05c:	89 2b       	or	r24, r25
    a05e:	8a 2b       	or	r24, r26
    a060:	8b 2b       	or	r24, r27
    a062:	99 f7       	brne	.-26     	; 0xa04a <dir_sdi+0x1e>
    a064:	08 81       	ld	r16, Y
    a066:	19 81       	ldd	r17, Y+1	; 0x01
    a068:	4e 87       	std	Y+14, r20	; 0x0e
    a06a:	5f 87       	std	Y+15, r21	; 0x0f
    a06c:	68 8b       	std	Y+16, r22	; 0x10
    a06e:	79 8b       	std	Y+17, r23	; 0x11
    a070:	8e 80       	ldd	r8, Y+6	; 0x06
    a072:	9f 80       	ldd	r9, Y+7	; 0x07
    a074:	a8 84       	ldd	r10, Y+8	; 0x08
    a076:	b9 84       	ldd	r11, Y+9	; 0x09
    a078:	81 14       	cp	r8, r1
    a07a:	91 04       	cpc	r9, r1
    a07c:	a1 04       	cpc	r10, r1
    a07e:	b1 04       	cpc	r11, r1
    a080:	51 f5       	brne	.+84     	; 0xa0d6 <dir_sdi+0xaa>
    a082:	f8 01       	movw	r30, r16
    a084:	80 81       	ld	r24, Z
    a086:	83 30       	cpi	r24, 0x03	; 3
    a088:	40 f0       	brcs	.+16     	; 0xa09a <dir_sdi+0x6e>
    a08a:	81 a5       	ldd	r24, Z+41	; 0x29
    a08c:	92 a5       	ldd	r25, Z+42	; 0x2a
    a08e:	a3 a5       	ldd	r26, Z+43	; 0x2b
    a090:	b4 a5       	ldd	r27, Z+44	; 0x2c
    a092:	00 97       	sbiw	r24, 0x00	; 0
    a094:	a1 05       	cpc	r26, r1
    a096:	b1 05       	cpc	r27, r1
    a098:	e1 f4       	brne	.+56     	; 0xa0d2 <dir_sdi+0xa6>
    a09a:	f8 01       	movw	r30, r16
    a09c:	87 81       	ldd	r24, Z+7	; 0x07
    a09e:	90 85       	ldd	r25, Z+8	; 0x08
    a0a0:	a0 e0       	ldi	r26, 0x00	; 0
    a0a2:	b0 e0       	ldi	r27, 0x00	; 0
    a0a4:	b7 01       	movw	r22, r14
    a0a6:	a6 01       	movw	r20, r12
    a0a8:	25 e0       	ldi	r18, 0x05	; 5
    a0aa:	76 95       	lsr	r23
    a0ac:	67 95       	ror	r22
    a0ae:	57 95       	ror	r21
    a0b0:	47 95       	ror	r20
    a0b2:	2a 95       	dec	r18
    a0b4:	d1 f7       	brne	.-12     	; 0xa0aa <dir_sdi+0x7e>
    a0b6:	48 17       	cp	r20, r24
    a0b8:	59 07       	cpc	r21, r25
    a0ba:	6a 07       	cpc	r22, r26
    a0bc:	7b 07       	cpc	r23, r27
    a0be:	28 f6       	brcc	.-118    	; 0xa04a <dir_sdi+0x1e>
    a0c0:	81 a5       	ldd	r24, Z+41	; 0x29
    a0c2:	92 a5       	ldd	r25, Z+42	; 0x2a
    a0c4:	a3 a5       	ldd	r26, Z+43	; 0x2b
    a0c6:	b4 a5       	ldd	r27, Z+44	; 0x2c
    a0c8:	8e 8b       	std	Y+22, r24	; 0x16
    a0ca:	9f 8b       	std	Y+23, r25	; 0x17
    a0cc:	a8 8f       	std	Y+24, r26	; 0x18
    a0ce:	b9 8f       	std	Y+25, r27	; 0x19
    a0d0:	3e c0       	rjmp	.+124    	; 0xa14e <dir_sdi+0x122>
    a0d2:	4c 01       	movw	r8, r24
    a0d4:	5d 01       	movw	r10, r26
    a0d6:	f8 01       	movw	r30, r16
    a0d8:	41 84       	ldd	r4, Z+9	; 0x09
    a0da:	52 84       	ldd	r5, Z+10	; 0x0a
    a0dc:	61 2c       	mov	r6, r1
    a0de:	71 2c       	mov	r7, r1
    a0e0:	39 e0       	ldi	r19, 0x09	; 9
    a0e2:	44 0c       	add	r4, r4
    a0e4:	55 1c       	adc	r5, r5
    a0e6:	66 1c       	adc	r6, r6
    a0e8:	77 1c       	adc	r7, r7
    a0ea:	3a 95       	dec	r19
    a0ec:	d1 f7       	brne	.-12     	; 0xa0e2 <dir_sdi+0xb6>
    a0ee:	b5 01       	movw	r22, r10
    a0f0:	a4 01       	movw	r20, r8
    a0f2:	c4 14       	cp	r12, r4
    a0f4:	d5 04       	cpc	r13, r5
    a0f6:	e6 04       	cpc	r14, r6
    a0f8:	f7 04       	cpc	r15, r7
    a0fa:	10 f1       	brcs	.+68     	; 0xa140 <dir_sdi+0x114>
    a0fc:	88 81       	ld	r24, Y
    a0fe:	99 81       	ldd	r25, Y+1	; 0x01
    a100:	e1 de       	rcall	.-574    	; 0x9ec4 <get_fat.isra.9>
    a102:	4b 01       	movw	r8, r22
    a104:	5c 01       	movw	r10, r24
    a106:	6f 3f       	cpi	r22, 0xFF	; 255
    a108:	7f 4f       	sbci	r23, 0xFF	; 255
    a10a:	8f 4f       	sbci	r24, 0xFF	; 255
    a10c:	9f 4f       	sbci	r25, 0xFF	; 255
    a10e:	09 f4       	brne	.+2      	; 0xa112 <dir_sdi+0xe6>
    a110:	47 c0       	rjmp	.+142    	; 0xa1a0 <dir_sdi+0x174>
    a112:	82 e0       	ldi	r24, 0x02	; 2
    a114:	88 16       	cp	r8, r24
    a116:	91 04       	cpc	r9, r1
    a118:	a1 04       	cpc	r10, r1
    a11a:	b1 04       	cpc	r11, r1
    a11c:	08 f4       	brcc	.+2      	; 0xa120 <dir_sdi+0xf4>
    a11e:	95 cf       	rjmp	.-214    	; 0xa04a <dir_sdi+0x1e>
    a120:	f8 01       	movw	r30, r16
    a122:	81 8d       	ldd	r24, Z+25	; 0x19
    a124:	92 8d       	ldd	r25, Z+26	; 0x1a
    a126:	a3 8d       	ldd	r26, Z+27	; 0x1b
    a128:	b4 8d       	ldd	r27, Z+28	; 0x1c
    a12a:	88 16       	cp	r8, r24
    a12c:	99 06       	cpc	r9, r25
    a12e:	aa 06       	cpc	r10, r26
    a130:	bb 06       	cpc	r11, r27
    a132:	08 f0       	brcs	.+2      	; 0xa136 <dir_sdi+0x10a>
    a134:	8a cf       	rjmp	.-236    	; 0xa04a <dir_sdi+0x1e>
    a136:	c4 18       	sub	r12, r4
    a138:	d5 08       	sbc	r13, r5
    a13a:	e6 08       	sbc	r14, r6
    a13c:	f7 08       	sbc	r15, r7
    a13e:	d7 cf       	rjmp	.-82     	; 0xa0ee <dir_sdi+0xc2>
    a140:	c8 01       	movw	r24, r16
    a142:	0e 94 05 48 	call	0x900a	; 0x900a <clst2sect>
    a146:	6e 8b       	std	Y+22, r22	; 0x16
    a148:	7f 8b       	std	Y+23, r23	; 0x17
    a14a:	88 8f       	std	Y+24, r24	; 0x18
    a14c:	99 8f       	std	Y+25, r25	; 0x19
    a14e:	8a 8a       	std	Y+18, r8	; 0x12
    a150:	9b 8a       	std	Y+19, r9	; 0x13
    a152:	ac 8a       	std	Y+20, r10	; 0x14
    a154:	bd 8a       	std	Y+21, r11	; 0x15
    a156:	8e 89       	ldd	r24, Y+22	; 0x16
    a158:	9f 89       	ldd	r25, Y+23	; 0x17
    a15a:	a8 8d       	ldd	r26, Y+24	; 0x18
    a15c:	b9 8d       	ldd	r27, Y+25	; 0x19
    a15e:	00 97       	sbiw	r24, 0x00	; 0
    a160:	a1 05       	cpc	r26, r1
    a162:	b1 05       	cpc	r27, r1
    a164:	09 f4       	brne	.+2      	; 0xa168 <dir_sdi+0x13c>
    a166:	71 cf       	rjmp	.-286    	; 0xa04a <dir_sdi+0x1e>
    a168:	b7 01       	movw	r22, r14
    a16a:	a6 01       	movw	r20, r12
    a16c:	29 e0       	ldi	r18, 0x09	; 9
    a16e:	76 95       	lsr	r23
    a170:	67 95       	ror	r22
    a172:	57 95       	ror	r21
    a174:	47 95       	ror	r20
    a176:	2a 95       	dec	r18
    a178:	d1 f7       	brne	.-12     	; 0xa16e <dir_sdi+0x142>
    a17a:	84 0f       	add	r24, r20
    a17c:	95 1f       	adc	r25, r21
    a17e:	a6 1f       	adc	r26, r22
    a180:	b7 1f       	adc	r27, r23
    a182:	8e 8b       	std	Y+22, r24	; 0x16
    a184:	9f 8b       	std	Y+23, r25	; 0x17
    a186:	a8 8f       	std	Y+24, r26	; 0x18
    a188:	b9 8f       	std	Y+25, r27	; 0x19
    a18a:	0b 5c       	subi	r16, 0xCB	; 203
    a18c:	1f 4f       	sbci	r17, 0xFF	; 255
    a18e:	f1 e0       	ldi	r31, 0x01	; 1
    a190:	df 22       	and	r13, r31
    a192:	c0 0e       	add	r12, r16
    a194:	d1 1e       	adc	r13, r17
    a196:	db 8e       	std	Y+27, r13	; 0x1b
    a198:	ca 8e       	std	Y+26, r12	; 0x1a
    a19a:	80 e0       	ldi	r24, 0x00	; 0
    a19c:	90 e0       	ldi	r25, 0x00	; 0
    a19e:	02 c0       	rjmp	.+4      	; 0xa1a4 <dir_sdi+0x178>
    a1a0:	81 e0       	ldi	r24, 0x01	; 1
    a1a2:	90 e0       	ldi	r25, 0x00	; 0
    a1a4:	cd b7       	in	r28, 0x3d	; 61
    a1a6:	de b7       	in	r29, 0x3e	; 62
    a1a8:	e0 e1       	ldi	r30, 0x10	; 16
    a1aa:	0c 94 2b e7 	jmp	0x1ce56	; 0x1ce56 <__epilogue_restores__+0x4>

0000a1ae <create_chain>:
    a1ae:	a0 e0       	ldi	r26, 0x00	; 0
    a1b0:	b0 e0       	ldi	r27, 0x00	; 0
    a1b2:	ed ed       	ldi	r30, 0xDD	; 221
    a1b4:	f0 e5       	ldi	r31, 0x50	; 80
    a1b6:	0c 94 0f e7 	jmp	0x1ce1e	; 0x1ce1e <__prologue_saves__+0x4>
    a1ba:	8c 01       	movw	r16, r24
    a1bc:	2a 01       	movw	r4, r20
    a1be:	3b 01       	movw	r6, r22
    a1c0:	fc 01       	movw	r30, r24
    a1c2:	c0 81       	ld	r28, Z
    a1c4:	d1 81       	ldd	r29, Z+1	; 0x01
    a1c6:	41 15       	cp	r20, r1
    a1c8:	51 05       	cpc	r21, r1
    a1ca:	61 05       	cpc	r22, r1
    a1cc:	71 05       	cpc	r23, r1
    a1ce:	99 f4       	brne	.+38     	; 0xa1f6 <create_chain+0x48>
    a1d0:	8d 84       	ldd	r8, Y+13	; 0x0d
    a1d2:	9e 84       	ldd	r9, Y+14	; 0x0e
    a1d4:	af 84       	ldd	r10, Y+15	; 0x0f
    a1d6:	b8 88       	ldd	r11, Y+16	; 0x10
    a1d8:	81 14       	cp	r8, r1
    a1da:	91 04       	cpc	r9, r1
    a1dc:	a1 04       	cpc	r10, r1
    a1de:	b1 04       	cpc	r11, r1
    a1e0:	51 f1       	breq	.+84     	; 0xa236 <create_chain+0x88>
    a1e2:	89 8d       	ldd	r24, Y+25	; 0x19
    a1e4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a1e6:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a1e8:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a1ea:	88 16       	cp	r8, r24
    a1ec:	99 06       	cpc	r9, r25
    a1ee:	aa 06       	cpc	r10, r26
    a1f0:	bb 06       	cpc	r11, r27
    a1f2:	28 f1       	brcs	.+74     	; 0xa23e <create_chain+0x90>
    a1f4:	20 c0       	rjmp	.+64     	; 0xa236 <create_chain+0x88>
    a1f6:	ce 01       	movw	r24, r28
    a1f8:	65 de       	rcall	.-822    	; 0x9ec4 <get_fat.isra.9>
    a1fa:	62 30       	cpi	r22, 0x02	; 2
    a1fc:	71 05       	cpc	r23, r1
    a1fe:	81 05       	cpc	r24, r1
    a200:	91 05       	cpc	r25, r1
    a202:	08 f4       	brcc	.+2      	; 0xa206 <create_chain+0x58>
    a204:	ea c0       	rjmp	.+468    	; 0xa3da <create_chain+0x22c>
    a206:	6f 3f       	cpi	r22, 0xFF	; 255
    a208:	ff ef       	ldi	r31, 0xFF	; 255
    a20a:	7f 07       	cpc	r23, r31
    a20c:	8f 07       	cpc	r24, r31
    a20e:	9f 07       	cpc	r25, r31
    a210:	29 f4       	brne	.+10     	; 0xa21c <create_chain+0x6e>
    a212:	4f ef       	ldi	r20, 0xFF	; 255
    a214:	3f ef       	ldi	r19, 0xFF	; 255
    a216:	2f ef       	ldi	r18, 0xFF	; 255
    a218:	9f ef       	ldi	r25, 0xFF	; 255
    a21a:	e7 c0       	rjmp	.+462    	; 0xa3ea <create_chain+0x23c>
    a21c:	c9 8c       	ldd	r12, Y+25	; 0x19
    a21e:	da 8c       	ldd	r13, Y+26	; 0x1a
    a220:	eb 8c       	ldd	r14, Y+27	; 0x1b
    a222:	fc 8c       	ldd	r15, Y+28	; 0x1c
    a224:	6c 15       	cp	r22, r12
    a226:	7d 05       	cpc	r23, r13
    a228:	8e 05       	cpc	r24, r14
    a22a:	9f 05       	cpc	r25, r15
    a22c:	08 f4       	brcc	.+2      	; 0xa230 <create_chain+0x82>
    a22e:	da c0       	rjmp	.+436    	; 0xa3e4 <create_chain+0x236>
    a230:	53 01       	movw	r10, r6
    a232:	42 01       	movw	r8, r4
    a234:	04 c0       	rjmp	.+8      	; 0xa23e <create_chain+0x90>
    a236:	81 2c       	mov	r8, r1
    a238:	91 2c       	mov	r9, r1
    a23a:	54 01       	movw	r10, r8
    a23c:	83 94       	inc	r8
    a23e:	89 89       	ldd	r24, Y+17	; 0x11
    a240:	9a 89       	ldd	r25, Y+18	; 0x12
    a242:	ab 89       	ldd	r26, Y+19	; 0x13
    a244:	bc 89       	ldd	r27, Y+20	; 0x14
    a246:	89 2b       	or	r24, r25
    a248:	8a 2b       	or	r24, r26
    a24a:	8b 2b       	or	r24, r27
    a24c:	11 f4       	brne	.+4      	; 0xa252 <create_chain+0xa4>
    a24e:	40 e0       	ldi	r20, 0x00	; 0
    a250:	c5 c0       	rjmp	.+394    	; 0xa3dc <create_chain+0x22e>
    a252:	84 14       	cp	r8, r4
    a254:	95 04       	cpc	r9, r5
    a256:	a6 04       	cpc	r10, r6
    a258:	b7 04       	cpc	r11, r7
    a25a:	09 f0       	breq	.+2      	; 0xa25e <create_chain+0xb0>
    a25c:	46 c0       	rjmp	.+140    	; 0xa2ea <create_chain+0x13c>
    a25e:	75 01       	movw	r14, r10
    a260:	64 01       	movw	r12, r8
    a262:	2f ef       	ldi	r18, 0xFF	; 255
    a264:	c2 1a       	sub	r12, r18
    a266:	d2 0a       	sbc	r13, r18
    a268:	e2 0a       	sbc	r14, r18
    a26a:	f2 0a       	sbc	r15, r18
    a26c:	89 8d       	ldd	r24, Y+25	; 0x19
    a26e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a270:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a272:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a274:	c8 16       	cp	r12, r24
    a276:	d9 06       	cpc	r13, r25
    a278:	ea 06       	cpc	r14, r26
    a27a:	fb 06       	cpc	r15, r27
    a27c:	28 f0       	brcs	.+10     	; 0xa288 <create_chain+0xda>
    a27e:	92 e0       	ldi	r25, 0x02	; 2
    a280:	c9 2e       	mov	r12, r25
    a282:	d1 2c       	mov	r13, r1
    a284:	e1 2c       	mov	r14, r1
    a286:	f1 2c       	mov	r15, r1
    a288:	b7 01       	movw	r22, r14
    a28a:	a6 01       	movw	r20, r12
    a28c:	f8 01       	movw	r30, r16
    a28e:	80 81       	ld	r24, Z
    a290:	91 81       	ldd	r25, Z+1	; 0x01
    a292:	18 de       	rcall	.-976    	; 0x9ec4 <get_fat.isra.9>
    a294:	61 30       	cpi	r22, 0x01	; 1
    a296:	71 05       	cpc	r23, r1
    a298:	81 05       	cpc	r24, r1
    a29a:	91 05       	cpc	r25, r1
    a29c:	09 f4       	brne	.+2      	; 0xa2a0 <create_chain+0xf2>
    a29e:	9d c0       	rjmp	.+314    	; 0xa3da <create_chain+0x22c>
    a2a0:	6f 3f       	cpi	r22, 0xFF	; 255
    a2a2:	ff ef       	ldi	r31, 0xFF	; 255
    a2a4:	7f 07       	cpc	r23, r31
    a2a6:	8f 07       	cpc	r24, r31
    a2a8:	9f 07       	cpc	r25, r31
    a2aa:	09 f4       	brne	.+2      	; 0xa2ae <create_chain+0x100>
    a2ac:	b2 cf       	rjmp	.-156    	; 0xa212 <create_chain+0x64>
    a2ae:	67 2b       	or	r22, r23
    a2b0:	68 2b       	or	r22, r24
    a2b2:	69 2b       	or	r22, r25
    a2b4:	a9 f0       	breq	.+42     	; 0xa2e0 <create_chain+0x132>
    a2b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    a2b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    a2ba:	af 85       	ldd	r26, Y+15	; 0x0f
    a2bc:	b8 89       	ldd	r27, Y+16	; 0x10
    a2be:	82 30       	cpi	r24, 0x02	; 2
    a2c0:	91 05       	cpc	r25, r1
    a2c2:	a1 05       	cpc	r26, r1
    a2c4:	b1 05       	cpc	r27, r1
    a2c6:	88 f0       	brcs	.+34     	; 0xa2ea <create_chain+0x13c>
    a2c8:	49 8d       	ldd	r20, Y+25	; 0x19
    a2ca:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a2cc:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a2ce:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a2d0:	84 17       	cp	r24, r20
    a2d2:	95 07       	cpc	r25, r21
    a2d4:	a6 07       	cpc	r26, r22
    a2d6:	b7 07       	cpc	r27, r23
    a2d8:	40 f4       	brcc	.+16     	; 0xa2ea <create_chain+0x13c>
    a2da:	4c 01       	movw	r8, r24
    a2dc:	5d 01       	movw	r10, r26
    a2de:	05 c0       	rjmp	.+10     	; 0xa2ea <create_chain+0x13c>
    a2e0:	c1 14       	cp	r12, r1
    a2e2:	d1 04       	cpc	r13, r1
    a2e4:	e1 04       	cpc	r14, r1
    a2e6:	f1 04       	cpc	r15, r1
    a2e8:	c9 f5       	brne	.+114    	; 0xa35c <create_chain+0x1ae>
    a2ea:	75 01       	movw	r14, r10
    a2ec:	64 01       	movw	r12, r8
    a2ee:	2f ef       	ldi	r18, 0xFF	; 255
    a2f0:	c2 1a       	sub	r12, r18
    a2f2:	d2 0a       	sbc	r13, r18
    a2f4:	e2 0a       	sbc	r14, r18
    a2f6:	f2 0a       	sbc	r15, r18
    a2f8:	89 8d       	ldd	r24, Y+25	; 0x19
    a2fa:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a2fc:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a2fe:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a300:	c8 16       	cp	r12, r24
    a302:	d9 06       	cpc	r13, r25
    a304:	ea 06       	cpc	r14, r26
    a306:	fb 06       	cpc	r15, r27
    a308:	60 f0       	brcs	.+24     	; 0xa322 <create_chain+0x174>
    a30a:	82 e0       	ldi	r24, 0x02	; 2
    a30c:	88 16       	cp	r8, r24
    a30e:	91 04       	cpc	r9, r1
    a310:	a1 04       	cpc	r10, r1
    a312:	b1 04       	cpc	r11, r1
    a314:	08 f4       	brcc	.+2      	; 0xa318 <create_chain+0x16a>
    a316:	9b cf       	rjmp	.-202    	; 0xa24e <create_chain+0xa0>
    a318:	82 e0       	ldi	r24, 0x02	; 2
    a31a:	c8 2e       	mov	r12, r24
    a31c:	d1 2c       	mov	r13, r1
    a31e:	e1 2c       	mov	r14, r1
    a320:	f1 2c       	mov	r15, r1
    a322:	b7 01       	movw	r22, r14
    a324:	a6 01       	movw	r20, r12
    a326:	f8 01       	movw	r30, r16
    a328:	80 81       	ld	r24, Z
    a32a:	91 81       	ldd	r25, Z+1	; 0x01
    a32c:	cb dd       	rcall	.-1130   	; 0x9ec4 <get_fat.isra.9>
    a32e:	61 15       	cp	r22, r1
    a330:	71 05       	cpc	r23, r1
    a332:	81 05       	cpc	r24, r1
    a334:	91 05       	cpc	r25, r1
    a336:	91 f0       	breq	.+36     	; 0xa35c <create_chain+0x1ae>
    a338:	61 30       	cpi	r22, 0x01	; 1
    a33a:	71 05       	cpc	r23, r1
    a33c:	81 05       	cpc	r24, r1
    a33e:	91 05       	cpc	r25, r1
    a340:	09 f4       	brne	.+2      	; 0xa344 <create_chain+0x196>
    a342:	4b c0       	rjmp	.+150    	; 0xa3da <create_chain+0x22c>
    a344:	6f 3f       	cpi	r22, 0xFF	; 255
    a346:	7f 4f       	sbci	r23, 0xFF	; 255
    a348:	8f 4f       	sbci	r24, 0xFF	; 255
    a34a:	9f 4f       	sbci	r25, 0xFF	; 255
    a34c:	09 f4       	brne	.+2      	; 0xa350 <create_chain+0x1a2>
    a34e:	61 cf       	rjmp	.-318    	; 0xa212 <create_chain+0x64>
    a350:	c8 14       	cp	r12, r8
    a352:	d9 04       	cpc	r13, r9
    a354:	ea 04       	cpc	r14, r10
    a356:	fb 04       	cpc	r15, r11
    a358:	51 f6       	brne	.-108    	; 0xa2ee <create_chain+0x140>
    a35a:	79 cf       	rjmp	.-270    	; 0xa24e <create_chain+0xa0>
    a35c:	0f ef       	ldi	r16, 0xFF	; 255
    a35e:	1f ef       	ldi	r17, 0xFF	; 255
    a360:	98 01       	movw	r18, r16
    a362:	b7 01       	movw	r22, r14
    a364:	a6 01       	movw	r20, r12
    a366:	ce 01       	movw	r24, r28
    a368:	b4 dc       	rcall	.-1688   	; 0x9cd2 <put_fat>
    a36a:	00 97       	sbiw	r24, 0x00	; 0
    a36c:	99 f5       	brne	.+102    	; 0xa3d4 <create_chain+0x226>
    a36e:	41 14       	cp	r4, r1
    a370:	51 04       	cpc	r5, r1
    a372:	61 04       	cpc	r6, r1
    a374:	71 04       	cpc	r7, r1
    a376:	e9 f4       	brne	.+58     	; 0xa3b2 <create_chain+0x204>
    a378:	cd 86       	std	Y+13, r12	; 0x0d
    a37a:	de 86       	std	Y+14, r13	; 0x0e
    a37c:	ef 86       	std	Y+15, r14	; 0x0f
    a37e:	f8 8a       	std	Y+16, r15	; 0x10
    a380:	89 89       	ldd	r24, Y+17	; 0x11
    a382:	9a 89       	ldd	r25, Y+18	; 0x12
    a384:	ab 89       	ldd	r26, Y+19	; 0x13
    a386:	bc 89       	ldd	r27, Y+20	; 0x14
    a388:	49 8d       	ldd	r20, Y+25	; 0x19
    a38a:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a38c:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a38e:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a390:	42 50       	subi	r20, 0x02	; 2
    a392:	51 09       	sbc	r21, r1
    a394:	61 09       	sbc	r22, r1
    a396:	71 09       	sbc	r23, r1
    a398:	48 17       	cp	r20, r24
    a39a:	59 07       	cpc	r21, r25
    a39c:	6a 07       	cpc	r22, r26
    a39e:	7b 07       	cpc	r23, r27
    a3a0:	88 f0       	brcs	.+34     	; 0xa3c4 <create_chain+0x216>
    a3a2:	01 97       	sbiw	r24, 0x01	; 1
    a3a4:	a1 09       	sbc	r26, r1
    a3a6:	b1 09       	sbc	r27, r1
    a3a8:	89 8b       	std	Y+17, r24	; 0x11
    a3aa:	9a 8b       	std	Y+18, r25	; 0x12
    a3ac:	ab 8b       	std	Y+19, r26	; 0x13
    a3ae:	bc 8b       	std	Y+20, r27	; 0x14
    a3b0:	09 c0       	rjmp	.+18     	; 0xa3c4 <create_chain+0x216>
    a3b2:	97 01       	movw	r18, r14
    a3b4:	86 01       	movw	r16, r12
    a3b6:	b3 01       	movw	r22, r6
    a3b8:	a2 01       	movw	r20, r4
    a3ba:	ce 01       	movw	r24, r28
    a3bc:	8a dc       	rcall	.-1772   	; 0x9cd2 <put_fat>
    a3be:	00 97       	sbiw	r24, 0x00	; 0
    a3c0:	d9 f2       	breq	.-74     	; 0xa378 <create_chain+0x1ca>
    a3c2:	08 c0       	rjmp	.+16     	; 0xa3d4 <create_chain+0x226>
    a3c4:	8c 81       	ldd	r24, Y+4	; 0x04
    a3c6:	81 60       	ori	r24, 0x01	; 1
    a3c8:	8c 83       	std	Y+4, r24	; 0x04
    a3ca:	4c 2d       	mov	r20, r12
    a3cc:	3d 2d       	mov	r19, r13
    a3ce:	2e 2d       	mov	r18, r14
    a3d0:	9f 2d       	mov	r25, r15
    a3d2:	0b c0       	rjmp	.+22     	; 0xa3ea <create_chain+0x23c>
    a3d4:	01 97       	sbiw	r24, 0x01	; 1
    a3d6:	09 f4       	brne	.+2      	; 0xa3da <create_chain+0x22c>
    a3d8:	1c cf       	rjmp	.-456    	; 0xa212 <create_chain+0x64>
    a3da:	41 e0       	ldi	r20, 0x01	; 1
    a3dc:	30 e0       	ldi	r19, 0x00	; 0
    a3de:	20 e0       	ldi	r18, 0x00	; 0
    a3e0:	90 e0       	ldi	r25, 0x00	; 0
    a3e2:	03 c0       	rjmp	.+6      	; 0xa3ea <create_chain+0x23c>
    a3e4:	46 2f       	mov	r20, r22
    a3e6:	37 2f       	mov	r19, r23
    a3e8:	28 2f       	mov	r18, r24
    a3ea:	64 2f       	mov	r22, r20
    a3ec:	73 2f       	mov	r23, r19
    a3ee:	82 2f       	mov	r24, r18
    a3f0:	cd b7       	in	r28, 0x3d	; 61
    a3f2:	de b7       	in	r29, 0x3e	; 62
    a3f4:	e0 e1       	ldi	r30, 0x10	; 16
    a3f6:	0c 94 2b e7 	jmp	0x1ce56	; 0x1ce56 <__epilogue_restores__+0x4>

0000a3fa <remove_chain>:
    a3fa:	4f 92       	push	r4
    a3fc:	5f 92       	push	r5
    a3fe:	6f 92       	push	r6
    a400:	7f 92       	push	r7
    a402:	af 92       	push	r10
    a404:	bf 92       	push	r11
    a406:	cf 92       	push	r12
    a408:	df 92       	push	r13
    a40a:	ef 92       	push	r14
    a40c:	ff 92       	push	r15
    a40e:	0f 93       	push	r16
    a410:	1f 93       	push	r17
    a412:	cf 93       	push	r28
    a414:	df 93       	push	r29
    a416:	5c 01       	movw	r10, r24
    a418:	6a 01       	movw	r12, r20
    a41a:	7b 01       	movw	r14, r22
    a41c:	b9 01       	movw	r22, r18
    a41e:	a8 01       	movw	r20, r16
    a420:	22 e0       	ldi	r18, 0x02	; 2
    a422:	c2 16       	cp	r12, r18
    a424:	d1 04       	cpc	r13, r1
    a426:	e1 04       	cpc	r14, r1
    a428:	f1 04       	cpc	r15, r1
    a42a:	10 f4       	brcc	.+4      	; 0xa430 <remove_chain+0x36>
    a42c:	22 e0       	ldi	r18, 0x02	; 2
    a42e:	27 c0       	rjmp	.+78     	; 0xa47e <remove_chain+0x84>
    a430:	fc 01       	movw	r30, r24
    a432:	c0 81       	ld	r28, Z
    a434:	d1 81       	ldd	r29, Z+1	; 0x01
    a436:	89 8d       	ldd	r24, Y+25	; 0x19
    a438:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a43a:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a43c:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a43e:	c8 16       	cp	r12, r24
    a440:	d9 06       	cpc	r13, r25
    a442:	ea 06       	cpc	r14, r26
    a444:	fb 06       	cpc	r15, r27
    a446:	90 f7       	brcc	.-28     	; 0xa42c <remove_chain+0x32>
    a448:	41 15       	cp	r20, r1
    a44a:	51 05       	cpc	r21, r1
    a44c:	61 05       	cpc	r22, r1
    a44e:	71 05       	cpc	r23, r1
    a450:	41 f0       	breq	.+16     	; 0xa462 <remove_chain+0x68>
    a452:	0f ef       	ldi	r16, 0xFF	; 255
    a454:	1f ef       	ldi	r17, 0xFF	; 255
    a456:	98 01       	movw	r18, r16
    a458:	ce 01       	movw	r24, r28
    a45a:	3b dc       	rcall	.-1930   	; 0x9cd2 <put_fat>
    a45c:	00 97       	sbiw	r24, 0x00	; 0
    a45e:	09 f0       	breq	.+2      	; 0xa462 <remove_chain+0x68>
    a460:	4c c0       	rjmp	.+152    	; 0xa4fa <remove_chain+0x100>
    a462:	b7 01       	movw	r22, r14
    a464:	a6 01       	movw	r20, r12
    a466:	f5 01       	movw	r30, r10
    a468:	80 81       	ld	r24, Z
    a46a:	91 81       	ldd	r25, Z+1	; 0x01
    a46c:	2b dd       	rcall	.-1450   	; 0x9ec4 <get_fat.isra.9>
    a46e:	2b 01       	movw	r4, r22
    a470:	3c 01       	movw	r6, r24
    a472:	61 15       	cp	r22, r1
    a474:	71 05       	cpc	r23, r1
    a476:	81 05       	cpc	r24, r1
    a478:	91 05       	cpc	r25, r1
    a47a:	19 f4       	brne	.+6      	; 0xa482 <remove_chain+0x88>
    a47c:	20 e0       	ldi	r18, 0x00	; 0
    a47e:	90 e0       	ldi	r25, 0x00	; 0
    a480:	3d c0       	rjmp	.+122    	; 0xa4fc <remove_chain+0x102>
    a482:	61 30       	cpi	r22, 0x01	; 1
    a484:	71 05       	cpc	r23, r1
    a486:	81 05       	cpc	r24, r1
    a488:	91 05       	cpc	r25, r1
    a48a:	81 f2       	breq	.-96     	; 0xa42c <remove_chain+0x32>
    a48c:	6f 3f       	cpi	r22, 0xFF	; 255
    a48e:	7f 4f       	sbci	r23, 0xFF	; 255
    a490:	8f 4f       	sbci	r24, 0xFF	; 255
    a492:	9f 4f       	sbci	r25, 0xFF	; 255
    a494:	81 f1       	breq	.+96     	; 0xa4f6 <remove_chain+0xfc>
    a496:	00 e0       	ldi	r16, 0x00	; 0
    a498:	10 e0       	ldi	r17, 0x00	; 0
    a49a:	98 01       	movw	r18, r16
    a49c:	b7 01       	movw	r22, r14
    a49e:	a6 01       	movw	r20, r12
    a4a0:	ce 01       	movw	r24, r28
    a4a2:	17 dc       	rcall	.-2002   	; 0x9cd2 <put_fat>
    a4a4:	00 97       	sbiw	r24, 0x00	; 0
    a4a6:	49 f5       	brne	.+82     	; 0xa4fa <remove_chain+0x100>
    a4a8:	89 89       	ldd	r24, Y+17	; 0x11
    a4aa:	9a 89       	ldd	r25, Y+18	; 0x12
    a4ac:	ab 89       	ldd	r26, Y+19	; 0x13
    a4ae:	bc 89       	ldd	r27, Y+20	; 0x14
    a4b0:	49 8d       	ldd	r20, Y+25	; 0x19
    a4b2:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a4b4:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a4b6:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a4b8:	6a 01       	movw	r12, r20
    a4ba:	7b 01       	movw	r14, r22
    a4bc:	e2 e0       	ldi	r30, 0x02	; 2
    a4be:	ce 1a       	sub	r12, r30
    a4c0:	d1 08       	sbc	r13, r1
    a4c2:	e1 08       	sbc	r14, r1
    a4c4:	f1 08       	sbc	r15, r1
    a4c6:	8c 15       	cp	r24, r12
    a4c8:	9d 05       	cpc	r25, r13
    a4ca:	ae 05       	cpc	r26, r14
    a4cc:	bf 05       	cpc	r27, r15
    a4ce:	50 f4       	brcc	.+20     	; 0xa4e4 <remove_chain+0xea>
    a4d0:	01 96       	adiw	r24, 0x01	; 1
    a4d2:	a1 1d       	adc	r26, r1
    a4d4:	b1 1d       	adc	r27, r1
    a4d6:	89 8b       	std	Y+17, r24	; 0x11
    a4d8:	9a 8b       	std	Y+18, r25	; 0x12
    a4da:	ab 8b       	std	Y+19, r26	; 0x13
    a4dc:	bc 8b       	std	Y+20, r27	; 0x14
    a4de:	8c 81       	ldd	r24, Y+4	; 0x04
    a4e0:	81 60       	ori	r24, 0x01	; 1
    a4e2:	8c 83       	std	Y+4, r24	; 0x04
    a4e4:	73 01       	movw	r14, r6
    a4e6:	62 01       	movw	r12, r4
    a4e8:	44 16       	cp	r4, r20
    a4ea:	55 06       	cpc	r5, r21
    a4ec:	66 06       	cpc	r6, r22
    a4ee:	77 06       	cpc	r7, r23
    a4f0:	08 f4       	brcc	.+2      	; 0xa4f4 <remove_chain+0xfa>
    a4f2:	b7 cf       	rjmp	.-146    	; 0xa462 <remove_chain+0x68>
    a4f4:	c3 cf       	rjmp	.-122    	; 0xa47c <remove_chain+0x82>
    a4f6:	21 e0       	ldi	r18, 0x01	; 1
    a4f8:	c2 cf       	rjmp	.-124    	; 0xa47e <remove_chain+0x84>
    a4fa:	28 2f       	mov	r18, r24
    a4fc:	82 2f       	mov	r24, r18
    a4fe:	df 91       	pop	r29
    a500:	cf 91       	pop	r28
    a502:	1f 91       	pop	r17
    a504:	0f 91       	pop	r16
    a506:	ff 90       	pop	r15
    a508:	ef 90       	pop	r14
    a50a:	df 90       	pop	r13
    a50c:	cf 90       	pop	r12
    a50e:	bf 90       	pop	r11
    a510:	af 90       	pop	r10
    a512:	7f 90       	pop	r7
    a514:	6f 90       	pop	r6
    a516:	5f 90       	pop	r5
    a518:	4f 90       	pop	r4
    a51a:	08 95       	ret

0000a51c <dir_next>:
    a51c:	4f 92       	push	r4
    a51e:	5f 92       	push	r5
    a520:	6f 92       	push	r6
    a522:	7f 92       	push	r7
    a524:	af 92       	push	r10
    a526:	bf 92       	push	r11
    a528:	cf 92       	push	r12
    a52a:	df 92       	push	r13
    a52c:	ef 92       	push	r14
    a52e:	ff 92       	push	r15
    a530:	0f 93       	push	r16
    a532:	1f 93       	push	r17
    a534:	cf 93       	push	r28
    a536:	df 93       	push	r29
    a538:	ec 01       	movw	r28, r24
    a53a:	08 81       	ld	r16, Y
    a53c:	19 81       	ldd	r17, Y+1	; 0x01
    a53e:	ce 84       	ldd	r12, Y+14	; 0x0e
    a540:	df 84       	ldd	r13, Y+15	; 0x0f
    a542:	e8 88       	ldd	r14, Y+16	; 0x10
    a544:	f9 88       	ldd	r15, Y+17	; 0x11
    a546:	80 e2       	ldi	r24, 0x20	; 32
    a548:	c8 0e       	add	r12, r24
    a54a:	d1 1c       	adc	r13, r1
    a54c:	e1 1c       	adc	r14, r1
    a54e:	f1 1c       	adc	r15, r1
    a550:	c1 14       	cp	r12, r1
    a552:	d1 04       	cpc	r13, r1
    a554:	e0 e2       	ldi	r30, 0x20	; 32
    a556:	ee 06       	cpc	r14, r30
    a558:	f1 04       	cpc	r15, r1
    a55a:	20 f0       	brcs	.+8      	; 0xa564 <dir_next+0x48>
    a55c:	1e 8a       	std	Y+22, r1	; 0x16
    a55e:	1f 8a       	std	Y+23, r1	; 0x17
    a560:	18 8e       	std	Y+24, r1	; 0x18
    a562:	19 8e       	std	Y+25, r1	; 0x19
    a564:	8e 89       	ldd	r24, Y+22	; 0x16
    a566:	9f 89       	ldd	r25, Y+23	; 0x17
    a568:	a8 8d       	ldd	r26, Y+24	; 0x18
    a56a:	b9 8d       	ldd	r27, Y+25	; 0x19
    a56c:	00 97       	sbiw	r24, 0x00	; 0
    a56e:	a1 05       	cpc	r26, r1
    a570:	b1 05       	cpc	r27, r1
    a572:	09 f4       	brne	.+2      	; 0xa576 <dir_next+0x5a>
    a574:	a7 c0       	rjmp	.+334    	; 0xa6c4 <dir_next+0x1a8>
    a576:	5b 01       	movw	r10, r22
    a578:	b7 01       	movw	r22, r14
    a57a:	a6 01       	movw	r20, r12
    a57c:	51 70       	andi	r21, 0x01	; 1
    a57e:	66 27       	eor	r22, r22
    a580:	77 27       	eor	r23, r23
    a582:	45 2b       	or	r20, r21
    a584:	46 2b       	or	r20, r22
    a586:	47 2b       	or	r20, r23
    a588:	09 f0       	breq	.+2      	; 0xa58c <dir_next+0x70>
    a58a:	8d c0       	rjmp	.+282    	; 0xa6a6 <dir_next+0x18a>
    a58c:	01 96       	adiw	r24, 0x01	; 1
    a58e:	a1 1d       	adc	r26, r1
    a590:	b1 1d       	adc	r27, r1
    a592:	8e 8b       	std	Y+22, r24	; 0x16
    a594:	9f 8b       	std	Y+23, r25	; 0x17
    a596:	a8 8f       	std	Y+24, r26	; 0x18
    a598:	b9 8f       	std	Y+25, r27	; 0x19
    a59a:	4a 89       	ldd	r20, Y+18	; 0x12
    a59c:	5b 89       	ldd	r21, Y+19	; 0x13
    a59e:	6c 89       	ldd	r22, Y+20	; 0x14
    a5a0:	7d 89       	ldd	r23, Y+21	; 0x15
    a5a2:	f8 01       	movw	r30, r16
    a5a4:	41 15       	cp	r20, r1
    a5a6:	51 05       	cpc	r21, r1
    a5a8:	61 05       	cpc	r22, r1
    a5aa:	71 05       	cpc	r23, r1
    a5ac:	c1 f4       	brne	.+48     	; 0xa5de <dir_next+0xc2>
    a5ae:	87 81       	ldd	r24, Z+7	; 0x07
    a5b0:	90 85       	ldd	r25, Z+8	; 0x08
    a5b2:	a0 e0       	ldi	r26, 0x00	; 0
    a5b4:	b0 e0       	ldi	r27, 0x00	; 0
    a5b6:	b7 01       	movw	r22, r14
    a5b8:	a6 01       	movw	r20, r12
    a5ba:	35 e0       	ldi	r19, 0x05	; 5
    a5bc:	76 95       	lsr	r23
    a5be:	67 95       	ror	r22
    a5c0:	57 95       	ror	r21
    a5c2:	47 95       	ror	r20
    a5c4:	3a 95       	dec	r19
    a5c6:	d1 f7       	brne	.-12     	; 0xa5bc <dir_next+0xa0>
    a5c8:	48 17       	cp	r20, r24
    a5ca:	59 07       	cpc	r21, r25
    a5cc:	6a 07       	cpc	r22, r26
    a5ce:	7b 07       	cpc	r23, r27
    a5d0:	08 f4       	brcc	.+2      	; 0xa5d4 <dir_next+0xb8>
    a5d2:	69 c0       	rjmp	.+210    	; 0xa6a6 <dir_next+0x18a>
    a5d4:	1e 8a       	std	Y+22, r1	; 0x16
    a5d6:	1f 8a       	std	Y+23, r1	; 0x17
    a5d8:	18 8e       	std	Y+24, r1	; 0x18
    a5da:	19 8e       	std	Y+25, r1	; 0x19
    a5dc:	73 c0       	rjmp	.+230    	; 0xa6c4 <dir_next+0x1a8>
    a5de:	81 85       	ldd	r24, Z+9	; 0x09
    a5e0:	92 85       	ldd	r25, Z+10	; 0x0a
    a5e2:	01 97       	sbiw	r24, 0x01	; 1
    a5e4:	a0 e0       	ldi	r26, 0x00	; 0
    a5e6:	b0 e0       	ldi	r27, 0x00	; 0
    a5e8:	26 01       	movw	r4, r12
    a5ea:	37 01       	movw	r6, r14
    a5ec:	29 e0       	ldi	r18, 0x09	; 9
    a5ee:	76 94       	lsr	r7
    a5f0:	67 94       	ror	r6
    a5f2:	57 94       	ror	r5
    a5f4:	47 94       	ror	r4
    a5f6:	2a 95       	dec	r18
    a5f8:	d1 f7       	brne	.-12     	; 0xa5ee <dir_next+0xd2>
    a5fa:	84 21       	and	r24, r4
    a5fc:	95 21       	and	r25, r5
    a5fe:	a6 21       	and	r26, r6
    a600:	b7 21       	and	r27, r7
    a602:	89 2b       	or	r24, r25
    a604:	8a 2b       	or	r24, r26
    a606:	8b 2b       	or	r24, r27
    a608:	09 f0       	breq	.+2      	; 0xa60c <dir_next+0xf0>
    a60a:	4d c0       	rjmp	.+154    	; 0xa6a6 <dir_next+0x18a>
    a60c:	c8 01       	movw	r24, r16
    a60e:	5a dc       	rcall	.-1868   	; 0x9ec4 <get_fat.isra.9>
    a610:	2b 01       	movw	r4, r22
    a612:	3c 01       	movw	r6, r24
    a614:	62 30       	cpi	r22, 0x02	; 2
    a616:	71 05       	cpc	r23, r1
    a618:	81 05       	cpc	r24, r1
    a61a:	91 05       	cpc	r25, r1
    a61c:	18 f4       	brcc	.+6      	; 0xa624 <dir_next+0x108>
    a61e:	82 e0       	ldi	r24, 0x02	; 2
    a620:	90 e0       	ldi	r25, 0x00	; 0
    a622:	55 c0       	rjmp	.+170    	; 0xa6ce <dir_next+0x1b2>
    a624:	8f ef       	ldi	r24, 0xFF	; 255
    a626:	48 16       	cp	r4, r24
    a628:	58 06       	cpc	r5, r24
    a62a:	68 06       	cpc	r6, r24
    a62c:	78 06       	cpc	r7, r24
    a62e:	19 f4       	brne	.+6      	; 0xa636 <dir_next+0x11a>
    a630:	81 e0       	ldi	r24, 0x01	; 1
    a632:	90 e0       	ldi	r25, 0x00	; 0
    a634:	4c c0       	rjmp	.+152    	; 0xa6ce <dir_next+0x1b2>
    a636:	f8 01       	movw	r30, r16
    a638:	81 8d       	ldd	r24, Z+25	; 0x19
    a63a:	92 8d       	ldd	r25, Z+26	; 0x1a
    a63c:	a3 8d       	ldd	r26, Z+27	; 0x1b
    a63e:	b4 8d       	ldd	r27, Z+28	; 0x1c
    a640:	48 16       	cp	r4, r24
    a642:	59 06       	cpc	r5, r25
    a644:	6a 06       	cpc	r6, r26
    a646:	7b 06       	cpc	r7, r27
    a648:	08 f1       	brcs	.+66     	; 0xa68c <dir_next+0x170>
    a64a:	ab 28       	or	r10, r11
    a64c:	19 f2       	breq	.-122    	; 0xa5d4 <dir_next+0xb8>
    a64e:	4a 89       	ldd	r20, Y+18	; 0x12
    a650:	5b 89       	ldd	r21, Y+19	; 0x13
    a652:	6c 89       	ldd	r22, Y+20	; 0x14
    a654:	7d 89       	ldd	r23, Y+21	; 0x15
    a656:	ce 01       	movw	r24, r28
    a658:	aa dd       	rcall	.-1196   	; 0xa1ae <create_chain>
    a65a:	2b 01       	movw	r4, r22
    a65c:	3c 01       	movw	r6, r24
    a65e:	61 15       	cp	r22, r1
    a660:	71 05       	cpc	r23, r1
    a662:	81 05       	cpc	r24, r1
    a664:	91 05       	cpc	r25, r1
    a666:	89 f1       	breq	.+98     	; 0xa6ca <dir_next+0x1ae>
    a668:	61 30       	cpi	r22, 0x01	; 1
    a66a:	71 05       	cpc	r23, r1
    a66c:	81 05       	cpc	r24, r1
    a66e:	91 05       	cpc	r25, r1
    a670:	b1 f2       	breq	.-84     	; 0xa61e <dir_next+0x102>
    a672:	8f ef       	ldi	r24, 0xFF	; 255
    a674:	48 16       	cp	r4, r24
    a676:	58 06       	cpc	r5, r24
    a678:	68 06       	cpc	r6, r24
    a67a:	78 06       	cpc	r7, r24
    a67c:	c9 f2       	breq	.-78     	; 0xa630 <dir_next+0x114>
    a67e:	b3 01       	movw	r22, r6
    a680:	a2 01       	movw	r20, r4
    a682:	c8 01       	movw	r24, r16
    a684:	0e 94 ec 4a 	call	0x95d8	; 0x95d8 <dir_clear>
    a688:	89 2b       	or	r24, r25
    a68a:	91 f6       	brne	.-92     	; 0xa630 <dir_next+0x114>
    a68c:	4a 8a       	std	Y+18, r4	; 0x12
    a68e:	5b 8a       	std	Y+19, r5	; 0x13
    a690:	6c 8a       	std	Y+20, r6	; 0x14
    a692:	7d 8a       	std	Y+21, r7	; 0x15
    a694:	b3 01       	movw	r22, r6
    a696:	a2 01       	movw	r20, r4
    a698:	c8 01       	movw	r24, r16
    a69a:	0e 94 05 48 	call	0x900a	; 0x900a <clst2sect>
    a69e:	6e 8b       	std	Y+22, r22	; 0x16
    a6a0:	7f 8b       	std	Y+23, r23	; 0x17
    a6a2:	88 8f       	std	Y+24, r24	; 0x18
    a6a4:	99 8f       	std	Y+25, r25	; 0x19
    a6a6:	ce 86       	std	Y+14, r12	; 0x0e
    a6a8:	df 86       	std	Y+15, r13	; 0x0f
    a6aa:	e8 8a       	std	Y+16, r14	; 0x10
    a6ac:	f9 8a       	std	Y+17, r15	; 0x11
    a6ae:	0b 5c       	subi	r16, 0xCB	; 203
    a6b0:	1f 4f       	sbci	r17, 0xFF	; 255
    a6b2:	e1 e0       	ldi	r30, 0x01	; 1
    a6b4:	de 22       	and	r13, r30
    a6b6:	c0 0e       	add	r12, r16
    a6b8:	d1 1e       	adc	r13, r17
    a6ba:	db 8e       	std	Y+27, r13	; 0x1b
    a6bc:	ca 8e       	std	Y+26, r12	; 0x1a
    a6be:	80 e0       	ldi	r24, 0x00	; 0
    a6c0:	90 e0       	ldi	r25, 0x00	; 0
    a6c2:	05 c0       	rjmp	.+10     	; 0xa6ce <dir_next+0x1b2>
    a6c4:	84 e0       	ldi	r24, 0x04	; 4
    a6c6:	90 e0       	ldi	r25, 0x00	; 0
    a6c8:	02 c0       	rjmp	.+4      	; 0xa6ce <dir_next+0x1b2>
    a6ca:	87 e0       	ldi	r24, 0x07	; 7
    a6cc:	90 e0       	ldi	r25, 0x00	; 0
    a6ce:	df 91       	pop	r29
    a6d0:	cf 91       	pop	r28
    a6d2:	1f 91       	pop	r17
    a6d4:	0f 91       	pop	r16
    a6d6:	ff 90       	pop	r15
    a6d8:	ef 90       	pop	r14
    a6da:	df 90       	pop	r13
    a6dc:	cf 90       	pop	r12
    a6de:	bf 90       	pop	r11
    a6e0:	af 90       	pop	r10
    a6e2:	7f 90       	pop	r7
    a6e4:	6f 90       	pop	r6
    a6e6:	5f 90       	pop	r5
    a6e8:	4f 90       	pop	r4
    a6ea:	08 95       	ret

0000a6ec <dir_alloc>:
    a6ec:	a0 e0       	ldi	r26, 0x00	; 0
    a6ee:	b0 e0       	ldi	r27, 0x00	; 0
    a6f0:	ec e7       	ldi	r30, 0x7C	; 124
    a6f2:	f3 e5       	ldi	r31, 0x53	; 83
    a6f4:	0c 94 17 e7 	jmp	0x1ce2e	; 0x1ce2e <__prologue_saves__+0x14>
    a6f8:	ec 01       	movw	r28, r24
    a6fa:	6b 01       	movw	r12, r22
    a6fc:	e8 80       	ld	r14, Y
    a6fe:	f9 80       	ldd	r15, Y+1	; 0x01
    a700:	40 e0       	ldi	r20, 0x00	; 0
    a702:	50 e0       	ldi	r21, 0x00	; 0
    a704:	ba 01       	movw	r22, r20
    a706:	92 dc       	rcall	.-1756   	; 0xa02c <dir_sdi>
    a708:	00 97       	sbiw	r24, 0x00	; 0
    a70a:	f9 f4       	brne	.+62     	; 0xa74a <dir_alloc+0x5e>
    a70c:	00 e0       	ldi	r16, 0x00	; 0
    a70e:	10 e0       	ldi	r17, 0x00	; 0
    a710:	4e 89       	ldd	r20, Y+22	; 0x16
    a712:	5f 89       	ldd	r21, Y+23	; 0x17
    a714:	68 8d       	ldd	r22, Y+24	; 0x18
    a716:	79 8d       	ldd	r23, Y+25	; 0x19
    a718:	c7 01       	movw	r24, r14
    a71a:	06 d8       	rcall	.-4084   	; 0x9728 <move_window>
    a71c:	00 97       	sbiw	r24, 0x00	; 0
    a71e:	a9 f4       	brne	.+42     	; 0xa74a <dir_alloc+0x5e>
    a720:	ea 8d       	ldd	r30, Y+26	; 0x1a
    a722:	fb 8d       	ldd	r31, Y+27	; 0x1b
    a724:	20 81       	ld	r18, Z
    a726:	25 3e       	cpi	r18, 0xE5	; 229
    a728:	11 f0       	breq	.+4      	; 0xa72e <dir_alloc+0x42>
    a72a:	21 11       	cpse	r18, r1
    a72c:	06 c0       	rjmp	.+12     	; 0xa73a <dir_alloc+0x4e>
    a72e:	0f 5f       	subi	r16, 0xFF	; 255
    a730:	1f 4f       	sbci	r17, 0xFF	; 255
    a732:	0c 15       	cp	r16, r12
    a734:	1d 05       	cpc	r17, r13
    a736:	19 f4       	brne	.+6      	; 0xa73e <dir_alloc+0x52>
    a738:	0d c0       	rjmp	.+26     	; 0xa754 <dir_alloc+0x68>
    a73a:	00 e0       	ldi	r16, 0x00	; 0
    a73c:	10 e0       	ldi	r17, 0x00	; 0
    a73e:	61 e0       	ldi	r22, 0x01	; 1
    a740:	70 e0       	ldi	r23, 0x00	; 0
    a742:	ce 01       	movw	r24, r28
    a744:	eb de       	rcall	.-554    	; 0xa51c <dir_next>
    a746:	00 97       	sbiw	r24, 0x00	; 0
    a748:	19 f3       	breq	.-58     	; 0xa710 <dir_alloc+0x24>
    a74a:	84 30       	cpi	r24, 0x04	; 4
    a74c:	91 05       	cpc	r25, r1
    a74e:	11 f4       	brne	.+4      	; 0xa754 <dir_alloc+0x68>
    a750:	87 e0       	ldi	r24, 0x07	; 7
    a752:	90 e0       	ldi	r25, 0x00	; 0
    a754:	cd b7       	in	r28, 0x3d	; 61
    a756:	de b7       	in	r29, 0x3e	; 62
    a758:	e8 e0       	ldi	r30, 0x08	; 8
    a75a:	0c 94 33 e7 	jmp	0x1ce66	; 0x1ce66 <__epilogue_restores__+0x14>

0000a75e <dir_read>:
    a75e:	a0 e0       	ldi	r26, 0x00	; 0
    a760:	b0 e0       	ldi	r27, 0x00	; 0
    a762:	e5 eb       	ldi	r30, 0xB5	; 181
    a764:	f3 e5       	ldi	r31, 0x53	; 83
    a766:	0c 94 13 e7 	jmp	0x1ce26	; 0x1ce26 <__prologue_saves__+0xc>
    a76a:	ec 01       	movw	r28, r24
    a76c:	7b 01       	movw	r14, r22
    a76e:	a8 80       	ld	r10, Y
    a770:	b9 80       	ldd	r11, Y+1	; 0x01
    a772:	dd 24       	eor	r13, r13
    a774:	da 94       	dec	r13
    a776:	1f ef       	ldi	r17, 0xFF	; 255
    a778:	84 e0       	ldi	r24, 0x04	; 4
    a77a:	90 e0       	ldi	r25, 0x00	; 0
    a77c:	fd e0       	ldi	r31, 0x0D	; 13
    a77e:	cf 2e       	mov	r12, r31
    a780:	4e 89       	ldd	r20, Y+22	; 0x16
    a782:	5f 89       	ldd	r21, Y+23	; 0x17
    a784:	68 8d       	ldd	r22, Y+24	; 0x18
    a786:	79 8d       	ldd	r23, Y+25	; 0x19
    a788:	41 15       	cp	r20, r1
    a78a:	51 05       	cpc	r21, r1
    a78c:	61 05       	cpc	r22, r1
    a78e:	71 05       	cpc	r23, r1
    a790:	09 f4       	brne	.+2      	; 0xa794 <dir_read+0x36>
    a792:	9a c0       	rjmp	.+308    	; 0xa8c8 <dir_read+0x16a>
    a794:	c5 01       	movw	r24, r10
    a796:	0e 94 94 4b 	call	0x9728	; 0x9728 <move_window>
    a79a:	00 97       	sbiw	r24, 0x00	; 0
    a79c:	09 f0       	breq	.+2      	; 0xa7a0 <dir_read+0x42>
    a79e:	96 c0       	rjmp	.+300    	; 0xa8cc <dir_read+0x16e>
    a7a0:	8a 8c       	ldd	r8, Y+26	; 0x1a
    a7a2:	9b 8c       	ldd	r9, Y+27	; 0x1b
    a7a4:	f4 01       	movw	r30, r8
    a7a6:	00 81       	ld	r16, Z
    a7a8:	00 23       	and	r16, r16
    a7aa:	09 f4       	brne	.+2      	; 0xa7ae <dir_read+0x50>
    a7ac:	97 c0       	rjmp	.+302    	; 0xa8dc <dir_read+0x17e>
    a7ae:	83 85       	ldd	r24, Z+11	; 0x0b
    a7b0:	8f 73       	andi	r24, 0x3F	; 63
    a7b2:	8c 83       	std	Y+4, r24	; 0x04
    a7b4:	05 3e       	cpi	r16, 0xE5	; 229
    a7b6:	09 f4       	brne	.+2      	; 0xa7ba <dir_read+0x5c>
    a7b8:	7e c0       	rjmp	.+252    	; 0xa8b6 <dir_read+0x158>
    a7ba:	0e 32       	cpi	r16, 0x2E	; 46
    a7bc:	09 f4       	brne	.+2      	; 0xa7c0 <dir_read+0x62>
    a7be:	7b c0       	rjmp	.+246    	; 0xa8b6 <dir_read+0x158>
    a7c0:	21 e0       	ldi	r18, 0x01	; 1
    a7c2:	30 e0       	ldi	r19, 0x00	; 0
    a7c4:	98 2f       	mov	r25, r24
    a7c6:	9f 71       	andi	r25, 0x1F	; 31
    a7c8:	98 30       	cpi	r25, 0x08	; 8
    a7ca:	11 f0       	breq	.+4      	; 0xa7d0 <dir_read+0x72>
    a7cc:	20 e0       	ldi	r18, 0x00	; 0
    a7ce:	30 e0       	ldi	r19, 0x00	; 0
    a7d0:	2e 15       	cp	r18, r14
    a7d2:	3f 05       	cpc	r19, r15
    a7d4:	09 f0       	breq	.+2      	; 0xa7d8 <dir_read+0x7a>
    a7d6:	6f c0       	rjmp	.+222    	; 0xa8b6 <dir_read+0x158>
    a7d8:	8f 30       	cpi	r24, 0x0F	; 15
    a7da:	09 f0       	breq	.+2      	; 0xa7de <dir_read+0x80>
    a7dc:	5c c0       	rjmp	.+184    	; 0xa896 <dir_read+0x138>
    a7de:	06 ff       	sbrs	r16, 6
    a7e0:	0c c0       	rjmp	.+24     	; 0xa7fa <dir_read+0x9c>
    a7e2:	f4 01       	movw	r30, r8
    a7e4:	85 85       	ldd	r24, Z+13	; 0x0d
    a7e6:	0f 7b       	andi	r16, 0xBF	; 191
    a7e8:	4e 85       	ldd	r20, Y+14	; 0x0e
    a7ea:	5f 85       	ldd	r21, Y+15	; 0x0f
    a7ec:	68 89       	ldd	r22, Y+16	; 0x10
    a7ee:	79 89       	ldd	r23, Y+17	; 0x11
    a7f0:	48 a7       	std	Y+40, r20	; 0x28
    a7f2:	59 a7       	std	Y+41, r21	; 0x29
    a7f4:	6a a7       	std	Y+42, r22	; 0x2a
    a7f6:	7b a7       	std	Y+43, r23	; 0x2b
    a7f8:	03 c0       	rjmp	.+6      	; 0xa800 <dir_read+0xa2>
    a7fa:	10 13       	cpse	r17, r16
    a7fc:	5c c0       	rjmp	.+184    	; 0xa8b6 <dir_read+0x158>
    a7fe:	8d 2d       	mov	r24, r13
    a800:	f4 01       	movw	r30, r8
    a802:	d5 84       	ldd	r13, Z+13	; 0x0d
    a804:	d8 12       	cpse	r13, r24
    a806:	56 c0       	rjmp	.+172    	; 0xa8b4 <dir_read+0x156>
    a808:	82 8d       	ldd	r24, Z+26	; 0x1a
    a80a:	93 8d       	ldd	r25, Z+27	; 0x1b
    a80c:	89 2b       	or	r24, r25
    a80e:	09 f0       	breq	.+2      	; 0xa812 <dir_read+0xb4>
    a810:	52 c0       	rjmp	.+164    	; 0xa8b6 <dir_read+0x158>
    a812:	f5 01       	movw	r30, r10
    a814:	63 85       	ldd	r22, Z+11	; 0x0b
    a816:	74 85       	ldd	r23, Z+12	; 0x0c
    a818:	f4 01       	movw	r30, r8
    a81a:	80 81       	ld	r24, Z
    a81c:	90 e0       	ldi	r25, 0x00	; 0
    a81e:	8f 7b       	andi	r24, 0xBF	; 191
    a820:	01 97       	sbiw	r24, 0x01	; 1
    a822:	c8 9e       	mul	r12, r24
    a824:	90 01       	movw	r18, r0
    a826:	c9 9e       	mul	r12, r25
    a828:	30 0d       	add	r19, r0
    a82a:	11 24       	eor	r1, r1
    a82c:	ab ee       	ldi	r26, 0xEB	; 235
    a82e:	b4 e0       	ldi	r27, 0x04	; 4
    a830:	81 e0       	ldi	r24, 0x01	; 1
    a832:	90 e0       	ldi	r25, 0x00	; 0
    a834:	4d 91       	ld	r20, X+
    a836:	f4 01       	movw	r30, r8
    a838:	e4 0f       	add	r30, r20
    a83a:	f1 1d       	adc	r31, r1
    a83c:	40 81       	ld	r20, Z
    a83e:	51 81       	ldd	r21, Z+1	; 0x01
    a840:	00 97       	sbiw	r24, 0x00	; 0
    a842:	81 f0       	breq	.+32     	; 0xa864 <dir_read+0x106>
    a844:	2f 3f       	cpi	r18, 0xFF	; 255
    a846:	31 05       	cpc	r19, r1
    a848:	09 f0       	breq	.+2      	; 0xa84c <dir_read+0xee>
    a84a:	a8 f5       	brcc	.+106    	; 0xa8b6 <dir_read+0x158>
    a84c:	c9 01       	movw	r24, r18
    a84e:	88 0f       	add	r24, r24
    a850:	99 1f       	adc	r25, r25
    a852:	86 0f       	add	r24, r22
    a854:	97 1f       	adc	r25, r23
    a856:	fc 01       	movw	r30, r24
    a858:	51 83       	std	Z+1, r21	; 0x01
    a85a:	40 83       	st	Z, r20
    a85c:	ca 01       	movw	r24, r20
    a85e:	2f 5f       	subi	r18, 0xFF	; 255
    a860:	3f 4f       	sbci	r19, 0xFF	; 255
    a862:	03 c0       	rjmp	.+6      	; 0xa86a <dir_read+0x10c>
    a864:	4f 3f       	cpi	r20, 0xFF	; 255
    a866:	5f 4f       	sbci	r21, 0xFF	; 255
    a868:	31 f5       	brne	.+76     	; 0xa8b6 <dir_read+0x158>
    a86a:	44 e0       	ldi	r20, 0x04	; 4
    a86c:	a8 3f       	cpi	r26, 0xF8	; 248
    a86e:	b4 07       	cpc	r27, r20
    a870:	09 f7       	brne	.-62     	; 0xa834 <dir_read+0xd6>
    a872:	f4 01       	movw	r30, r8
    a874:	40 81       	ld	r20, Z
    a876:	46 ff       	sbrs	r20, 6
    a878:	2e c0       	rjmp	.+92     	; 0xa8d6 <dir_read+0x178>
    a87a:	89 2b       	or	r24, r25
    a87c:	61 f1       	breq	.+88     	; 0xa8d6 <dir_read+0x178>
    a87e:	2f 3f       	cpi	r18, 0xFF	; 255
    a880:	31 05       	cpc	r19, r1
    a882:	09 f0       	breq	.+2      	; 0xa886 <dir_read+0x128>
    a884:	c0 f4       	brcc	.+48     	; 0xa8b6 <dir_read+0x158>
    a886:	22 0f       	add	r18, r18
    a888:	33 1f       	adc	r19, r19
    a88a:	fb 01       	movw	r30, r22
    a88c:	e2 0f       	add	r30, r18
    a88e:	f3 1f       	adc	r31, r19
    a890:	11 82       	std	Z+1, r1	; 0x01
    a892:	10 82       	st	Z, r1
    a894:	20 c0       	rjmp	.+64     	; 0xa8d6 <dir_read+0x178>
    a896:	11 11       	cpse	r17, r1
    a898:	05 c0       	rjmp	.+10     	; 0xa8a4 <dir_read+0x146>
    a89a:	c4 01       	movw	r24, r8
    a89c:	0e 94 69 48 	call	0x90d2	; 0x90d2 <sum_sfn>
    a8a0:	d8 16       	cp	r13, r24
    a8a2:	f9 f0       	breq	.+62     	; 0xa8e2 <dir_read+0x184>
    a8a4:	8f ef       	ldi	r24, 0xFF	; 255
    a8a6:	9f ef       	ldi	r25, 0xFF	; 255
    a8a8:	dc 01       	movw	r26, r24
    a8aa:	88 a7       	std	Y+40, r24	; 0x28
    a8ac:	99 a7       	std	Y+41, r25	; 0x29
    a8ae:	aa a7       	std	Y+42, r26	; 0x2a
    a8b0:	bb a7       	std	Y+43, r27	; 0x2b
    a8b2:	17 c0       	rjmp	.+46     	; 0xa8e2 <dir_read+0x184>
    a8b4:	d8 2e       	mov	r13, r24
    a8b6:	1f ef       	ldi	r17, 0xFF	; 255
    a8b8:	60 e0       	ldi	r22, 0x00	; 0
    a8ba:	70 e0       	ldi	r23, 0x00	; 0
    a8bc:	ce 01       	movw	r24, r28
    a8be:	2e de       	rcall	.-932    	; 0xa51c <dir_next>
    a8c0:	00 97       	sbiw	r24, 0x00	; 0
    a8c2:	09 f4       	brne	.+2      	; 0xa8c6 <dir_read+0x168>
    a8c4:	5d cf       	rjmp	.-326    	; 0xa780 <dir_read+0x22>
    a8c6:	02 c0       	rjmp	.+4      	; 0xa8cc <dir_read+0x16e>
    a8c8:	00 97       	sbiw	r24, 0x00	; 0
    a8ca:	59 f0       	breq	.+22     	; 0xa8e2 <dir_read+0x184>
    a8cc:	1e 8a       	std	Y+22, r1	; 0x16
    a8ce:	1f 8a       	std	Y+23, r1	; 0x17
    a8d0:	18 8e       	std	Y+24, r1	; 0x18
    a8d2:	19 8e       	std	Y+25, r1	; 0x19
    a8d4:	08 c0       	rjmp	.+16     	; 0xa8e6 <dir_read+0x188>
    a8d6:	1f ef       	ldi	r17, 0xFF	; 255
    a8d8:	10 0f       	add	r17, r16
    a8da:	ee cf       	rjmp	.-36     	; 0xa8b8 <dir_read+0x15a>
    a8dc:	84 e0       	ldi	r24, 0x04	; 4
    a8de:	90 e0       	ldi	r25, 0x00	; 0
    a8e0:	f5 cf       	rjmp	.-22     	; 0xa8cc <dir_read+0x16e>
    a8e2:	80 e0       	ldi	r24, 0x00	; 0
    a8e4:	90 e0       	ldi	r25, 0x00	; 0
    a8e6:	cd b7       	in	r28, 0x3d	; 61
    a8e8:	de b7       	in	r29, 0x3e	; 62
    a8ea:	ec e0       	ldi	r30, 0x0C	; 12
    a8ec:	0c 94 2f e7 	jmp	0x1ce5e	; 0x1ce5e <__epilogue_restores__+0xc>

0000a8f0 <dir_remove>:
    a8f0:	a0 e0       	ldi	r26, 0x00	; 0
    a8f2:	b0 e0       	ldi	r27, 0x00	; 0
    a8f4:	ee e7       	ldi	r30, 0x7E	; 126
    a8f6:	f4 e5       	ldi	r31, 0x54	; 84
    a8f8:	0c 94 15 e7 	jmp	0x1ce2a	; 0x1ce2a <__prologue_saves__+0x10>
    a8fc:	ec 01       	movw	r28, r24
    a8fe:	08 81       	ld	r16, Y
    a900:	19 81       	ldd	r17, Y+1	; 0x01
    a902:	ce 84       	ldd	r12, Y+14	; 0x0e
    a904:	df 84       	ldd	r13, Y+15	; 0x0f
    a906:	e8 88       	ldd	r14, Y+16	; 0x10
    a908:	f9 88       	ldd	r15, Y+17	; 0x11
    a90a:	48 a5       	ldd	r20, Y+40	; 0x28
    a90c:	59 a5       	ldd	r21, Y+41	; 0x29
    a90e:	6a a5       	ldd	r22, Y+42	; 0x2a
    a910:	7b a5       	ldd	r23, Y+43	; 0x2b
    a912:	4f 3f       	cpi	r20, 0xFF	; 255
    a914:	8f ef       	ldi	r24, 0xFF	; 255
    a916:	58 07       	cpc	r21, r24
    a918:	68 07       	cpc	r22, r24
    a91a:	78 07       	cpc	r23, r24
    a91c:	29 f4       	brne	.+10     	; 0xa928 <dir_remove+0x38>
    a91e:	85 ee       	ldi	r24, 0xE5	; 229
    a920:	b8 2e       	mov	r11, r24
    a922:	aa 24       	eor	r10, r10
    a924:	a3 94       	inc	r10
    a926:	19 c0       	rjmp	.+50     	; 0xa95a <dir_remove+0x6a>
    a928:	ce 01       	movw	r24, r28
    a92a:	80 db       	rcall	.-2304   	; 0xa02c <dir_sdi>
    a92c:	00 97       	sbiw	r24, 0x00	; 0
    a92e:	19 f5       	brne	.+70     	; 0xa976 <dir_remove+0x86>
    a930:	f6 cf       	rjmp	.-20     	; 0xa91e <dir_remove+0x2e>
    a932:	ea 8d       	ldd	r30, Y+26	; 0x1a
    a934:	fb 8d       	ldd	r31, Y+27	; 0x1b
    a936:	b0 82       	st	Z, r11
    a938:	f8 01       	movw	r30, r16
    a93a:	a3 82       	std	Z+3, r10	; 0x03
    a93c:	4e 85       	ldd	r20, Y+14	; 0x0e
    a93e:	5f 85       	ldd	r21, Y+15	; 0x0f
    a940:	68 89       	ldd	r22, Y+16	; 0x10
    a942:	79 89       	ldd	r23, Y+17	; 0x11
    a944:	4c 15       	cp	r20, r12
    a946:	5d 05       	cpc	r21, r13
    a948:	6e 05       	cpc	r22, r14
    a94a:	7f 05       	cpc	r23, r15
    a94c:	a0 f4       	brcc	.+40     	; 0xa976 <dir_remove+0x86>
    a94e:	60 e0       	ldi	r22, 0x00	; 0
    a950:	70 e0       	ldi	r23, 0x00	; 0
    a952:	ce 01       	movw	r24, r28
    a954:	e3 dd       	rcall	.-1082   	; 0xa51c <dir_next>
    a956:	00 97       	sbiw	r24, 0x00	; 0
    a958:	49 f4       	brne	.+18     	; 0xa96c <dir_remove+0x7c>
    a95a:	4e 89       	ldd	r20, Y+22	; 0x16
    a95c:	5f 89       	ldd	r21, Y+23	; 0x17
    a95e:	68 8d       	ldd	r22, Y+24	; 0x18
    a960:	79 8d       	ldd	r23, Y+25	; 0x19
    a962:	c8 01       	movw	r24, r16
    a964:	0e 94 94 4b 	call	0x9728	; 0x9728 <move_window>
    a968:	00 97       	sbiw	r24, 0x00	; 0
    a96a:	19 f3       	breq	.-58     	; 0xa932 <dir_remove+0x42>
    a96c:	84 30       	cpi	r24, 0x04	; 4
    a96e:	91 05       	cpc	r25, r1
    a970:	11 f4       	brne	.+4      	; 0xa976 <dir_remove+0x86>
    a972:	82 e0       	ldi	r24, 0x02	; 2
    a974:	90 e0       	ldi	r25, 0x00	; 0
    a976:	cd b7       	in	r28, 0x3d	; 61
    a978:	de b7       	in	r29, 0x3e	; 62
    a97a:	ea e0       	ldi	r30, 0x0A	; 10
    a97c:	0c 94 31 e7 	jmp	0x1ce62	; 0x1ce62 <__epilogue_restores__+0x10>

0000a980 <dir_find>:
    a980:	ac e0       	ldi	r26, 0x0C	; 12
    a982:	b0 e0       	ldi	r27, 0x00	; 0
    a984:	e6 ec       	ldi	r30, 0xC6	; 198
    a986:	f4 e5       	ldi	r31, 0x54	; 84
    a988:	0c 94 0d e7 	jmp	0x1ce1a	; 0x1ce1a <__prologue_saves__>
    a98c:	9c 87       	std	Y+12, r25	; 0x0c
    a98e:	8b 87       	std	Y+11, r24	; 0x0b
    a990:	fc 01       	movw	r30, r24
    a992:	01 90       	ld	r0, Z+
    a994:	f0 81       	ld	r31, Z
    a996:	e0 2d       	mov	r30, r0
    a998:	fc 83       	std	Y+4, r31	; 0x04
    a99a:	eb 83       	std	Y+3, r30	; 0x03
    a99c:	40 e0       	ldi	r20, 0x00	; 0
    a99e:	50 e0       	ldi	r21, 0x00	; 0
    a9a0:	ba 01       	movw	r22, r20
    a9a2:	44 db       	rcall	.-2424   	; 0xa02c <dir_sdi>
    a9a4:	00 97       	sbiw	r24, 0x00	; 0
    a9a6:	09 f0       	breq	.+2      	; 0xa9aa <dir_find+0x2a>
    a9a8:	e7 c0       	rjmp	.+462    	; 0xab78 <dir_find+0x1f8>
    a9aa:	8f ef       	ldi	r24, 0xFF	; 255
    a9ac:	9f ef       	ldi	r25, 0xFF	; 255
    a9ae:	dc 01       	movw	r26, r24
    a9b0:	eb 85       	ldd	r30, Y+11	; 0x0b
    a9b2:	fc 85       	ldd	r31, Y+12	; 0x0c
    a9b4:	80 a7       	std	Z+40, r24	; 0x28
    a9b6:	91 a7       	std	Z+41, r25	; 0x29
    a9b8:	a2 a7       	std	Z+42, r26	; 0x2a
    a9ba:	b3 a7       	std	Z+43, r27	; 0x2b
    a9bc:	0f ef       	ldi	r16, 0xFF	; 255
    a9be:	1f ef       	ldi	r17, 0xFF	; 255
    a9c0:	44 24       	eor	r4, r4
    a9c2:	4a 94       	dec	r4
    a9c4:	54 2c       	mov	r5, r4
    a9c6:	32 01       	movw	r6, r4
    a9c8:	7c 96       	adiw	r30, 0x1c	; 28
    a9ca:	fa 87       	std	Y+10, r31	; 0x0a
    a9cc:	e9 87       	std	Y+9, r30	; 0x09
    a9ce:	eb 85       	ldd	r30, Y+11	; 0x0b
    a9d0:	fc 85       	ldd	r31, Y+12	; 0x0c
    a9d2:	46 89       	ldd	r20, Z+22	; 0x16
    a9d4:	57 89       	ldd	r21, Z+23	; 0x17
    a9d6:	60 8d       	ldd	r22, Z+24	; 0x18
    a9d8:	71 8d       	ldd	r23, Z+25	; 0x19
    a9da:	8b 81       	ldd	r24, Y+3	; 0x03
    a9dc:	9c 81       	ldd	r25, Y+4	; 0x04
    a9de:	0e 94 94 4b 	call	0x9728	; 0x9728 <move_window>
    a9e2:	00 97       	sbiw	r24, 0x00	; 0
    a9e4:	09 f0       	breq	.+2      	; 0xa9e8 <dir_find+0x68>
    a9e6:	c8 c0       	rjmp	.+400    	; 0xab78 <dir_find+0x1f8>
    a9e8:	eb 85       	ldd	r30, Y+11	; 0x0b
    a9ea:	fc 85       	ldd	r31, Y+12	; 0x0c
    a9ec:	e2 8c       	ldd	r14, Z+26	; 0x1a
    a9ee:	f3 8c       	ldd	r15, Z+27	; 0x1b
    a9f0:	f7 01       	movw	r30, r14
    a9f2:	d0 80       	ld	r13, Z
    a9f4:	dd 20       	and	r13, r13
    a9f6:	09 f4       	brne	.+2      	; 0xa9fa <dir_find+0x7a>
    a9f8:	c1 c0       	rjmp	.+386    	; 0xab7c <dir_find+0x1fc>
    a9fa:	93 85       	ldd	r25, Z+11	; 0x0b
    a9fc:	89 2f       	mov	r24, r25
    a9fe:	8f 73       	andi	r24, 0x3F	; 63
    aa00:	eb 85       	ldd	r30, Y+11	; 0x0b
    aa02:	fc 85       	ldd	r31, Y+12	; 0x0c
    aa04:	84 83       	std	Z+4, r24	; 0x04
    aa06:	f5 ee       	ldi	r31, 0xE5	; 229
    aa08:	df 16       	cp	r13, r31
    aa0a:	09 f4       	brne	.+2      	; 0xaa0e <dir_find+0x8e>
    aa0c:	a6 c0       	rjmp	.+332    	; 0xab5a <dir_find+0x1da>
    aa0e:	93 ff       	sbrs	r25, 3
    aa10:	04 c0       	rjmp	.+8      	; 0xaa1a <dir_find+0x9a>
    aa12:	8f 30       	cpi	r24, 0x0F	; 15
    aa14:	09 f0       	breq	.+2      	; 0xaa18 <dir_find+0x98>
    aa16:	a1 c0       	rjmp	.+322    	; 0xab5a <dir_find+0x1da>
    aa18:	03 c0       	rjmp	.+6      	; 0xaa20 <dir_find+0xa0>
    aa1a:	8f 30       	cpi	r24, 0x0F	; 15
    aa1c:	09 f0       	breq	.+2      	; 0xaa20 <dir_find+0xa0>
    aa1e:	88 c0       	rjmp	.+272    	; 0xab30 <dir_find+0x1b0>
    aa20:	eb 85       	ldd	r30, Y+11	; 0x0b
    aa22:	fc 85       	ldd	r31, Y+12	; 0x0c
    aa24:	87 a1       	ldd	r24, Z+39	; 0x27
    aa26:	86 fd       	sbrc	r24, 6
    aa28:	9f c0       	rjmp	.+318    	; 0xab68 <dir_find+0x1e8>
    aa2a:	d6 fe       	sbrs	r13, 6
    aa2c:	10 c0       	rjmp	.+32     	; 0xaa4e <dir_find+0xce>
    aa2e:	f7 01       	movw	r30, r14
    aa30:	05 85       	ldd	r16, Z+13	; 0x0d
    aa32:	fd 2d       	mov	r31, r13
    aa34:	ff 7b       	andi	r31, 0xBF	; 191
    aa36:	df 2e       	mov	r13, r31
    aa38:	eb 85       	ldd	r30, Y+11	; 0x0b
    aa3a:	fc 85       	ldd	r31, Y+12	; 0x0c
    aa3c:	86 85       	ldd	r24, Z+14	; 0x0e
    aa3e:	97 85       	ldd	r25, Z+15	; 0x0f
    aa40:	a0 89       	ldd	r26, Z+16	; 0x10
    aa42:	b1 89       	ldd	r27, Z+17	; 0x11
    aa44:	80 a7       	std	Z+40, r24	; 0x28
    aa46:	91 a7       	std	Z+41, r25	; 0x29
    aa48:	a2 a7       	std	Z+42, r26	; 0x2a
    aa4a:	b3 a7       	std	Z+43, r27	; 0x2b
    aa4c:	02 c0       	rjmp	.+4      	; 0xaa52 <dir_find+0xd2>
    aa4e:	1d 11       	cpse	r17, r13
    aa50:	8a c0       	rjmp	.+276    	; 0xab66 <dir_find+0x1e6>
    aa52:	f7 01       	movw	r30, r14
    aa54:	c5 84       	ldd	r12, Z+13	; 0x0d
    aa56:	c0 12       	cpse	r12, r16
    aa58:	86 c0       	rjmp	.+268    	; 0xab66 <dir_find+0x1e6>
    aa5a:	82 8d       	ldd	r24, Z+26	; 0x1a
    aa5c:	93 8d       	ldd	r25, Z+27	; 0x1b
    aa5e:	89 2b       	or	r24, r25
    aa60:	09 f0       	breq	.+2      	; 0xaa64 <dir_find+0xe4>
    aa62:	91 c0       	rjmp	.+290    	; 0xab86 <dir_find+0x206>
    aa64:	eb 81       	ldd	r30, Y+3	; 0x03
    aa66:	fc 81       	ldd	r31, Y+4	; 0x04
    aa68:	03 84       	ldd	r0, Z+11	; 0x0b
    aa6a:	f4 85       	ldd	r31, Z+12	; 0x0c
    aa6c:	e0 2d       	mov	r30, r0
    aa6e:	fe 83       	std	Y+6, r31	; 0x06
    aa70:	ed 83       	std	Y+5, r30	; 0x05
    aa72:	f7 01       	movw	r30, r14
    aa74:	80 81       	ld	r24, Z
    aa76:	8f 73       	andi	r24, 0x3F	; 63
    aa78:	90 e0       	ldi	r25, 0x00	; 0
    aa7a:	01 97       	sbiw	r24, 0x01	; 1
    aa7c:	fd e0       	ldi	r31, 0x0D	; 13
    aa7e:	f8 9f       	mul	r31, r24
    aa80:	80 01       	movw	r16, r0
    aa82:	f9 9f       	mul	r31, r25
    aa84:	10 0d       	add	r17, r0
    aa86:	11 24       	eor	r1, r1
    aa88:	2b ee       	ldi	r18, 0xEB	; 235
    aa8a:	34 e0       	ldi	r19, 0x04	; 4
    aa8c:	3a 83       	std	Y+2, r19	; 0x02
    aa8e:	29 83       	std	Y+1, r18	; 0x01
    aa90:	81 e0       	ldi	r24, 0x01	; 1
    aa92:	90 e0       	ldi	r25, 0x00	; 0
    aa94:	e9 81       	ldd	r30, Y+1	; 0x01
    aa96:	fa 81       	ldd	r31, Y+2	; 0x02
    aa98:	21 91       	ld	r18, Z+
    aa9a:	fa 83       	std	Y+2, r31	; 0x02
    aa9c:	e9 83       	std	Y+1, r30	; 0x01
    aa9e:	f7 01       	movw	r30, r14
    aaa0:	e2 0f       	add	r30, r18
    aaa2:	f1 1d       	adc	r31, r1
    aaa4:	20 80       	ld	r2, Z
    aaa6:	31 80       	ldd	r3, Z+1	; 0x01
    aaa8:	00 97       	sbiw	r24, 0x00	; 0
    aaaa:	39 f1       	breq	.+78     	; 0xaafa <dir_find+0x17a>
    aaac:	0f 3f       	cpi	r16, 0xFF	; 255
    aaae:	11 05       	cpc	r17, r1
    aab0:	11 f0       	breq	.+4      	; 0xaab6 <dir_find+0x136>
    aab2:	08 f0       	brcs	.+2      	; 0xaab6 <dir_find+0x136>
    aab4:	68 c0       	rjmp	.+208    	; 0xab86 <dir_find+0x206>
    aab6:	b1 01       	movw	r22, r2
    aab8:	80 e0       	ldi	r24, 0x00	; 0
    aaba:	90 e0       	ldi	r25, 0x00	; 0
    aabc:	0e 94 58 69 	call	0xd2b0	; 0xd2b0 <ff_wtoupper>
    aac0:	4b 01       	movw	r8, r22
    aac2:	5c 01       	movw	r10, r24
    aac4:	98 01       	movw	r18, r16
    aac6:	2f 5f       	subi	r18, 0xFF	; 255
    aac8:	3f 4f       	sbci	r19, 0xFF	; 255
    aaca:	38 87       	std	Y+8, r19	; 0x08
    aacc:	2f 83       	std	Y+7, r18	; 0x07
    aace:	00 0f       	add	r16, r16
    aad0:	11 1f       	adc	r17, r17
    aad2:	ed 81       	ldd	r30, Y+5	; 0x05
    aad4:	fe 81       	ldd	r31, Y+6	; 0x06
    aad6:	e0 0f       	add	r30, r16
    aad8:	f1 1f       	adc	r31, r17
    aada:	60 81       	ld	r22, Z
    aadc:	71 81       	ldd	r23, Z+1	; 0x01
    aade:	80 e0       	ldi	r24, 0x00	; 0
    aae0:	90 e0       	ldi	r25, 0x00	; 0
    aae2:	0e 94 58 69 	call	0xd2b0	; 0xd2b0 <ff_wtoupper>
    aae6:	86 16       	cp	r8, r22
    aae8:	97 06       	cpc	r9, r23
    aaea:	a8 06       	cpc	r10, r24
    aaec:	b9 06       	cpc	r11, r25
    aaee:	09 f0       	breq	.+2      	; 0xaaf2 <dir_find+0x172>
    aaf0:	4a c0       	rjmp	.+148    	; 0xab86 <dir_find+0x206>
    aaf2:	c1 01       	movw	r24, r2
    aaf4:	0f 81       	ldd	r16, Y+7	; 0x07
    aaf6:	18 85       	ldd	r17, Y+8	; 0x08
    aaf8:	05 c0       	rjmp	.+10     	; 0xab04 <dir_find+0x184>
    aafa:	3f ef       	ldi	r19, 0xFF	; 255
    aafc:	23 16       	cp	r2, r19
    aafe:	33 06       	cpc	r3, r19
    ab00:	09 f0       	breq	.+2      	; 0xab04 <dir_find+0x184>
    ab02:	41 c0       	rjmp	.+130    	; 0xab86 <dir_find+0x206>
    ab04:	e9 81       	ldd	r30, Y+1	; 0x01
    ab06:	fa 81       	ldd	r31, Y+2	; 0x02
    ab08:	e8 5f       	subi	r30, 0xF8	; 248
    ab0a:	f4 40       	sbci	r31, 0x04	; 4
    ab0c:	19 f6       	brne	.-122    	; 0xaa94 <dir_find+0x114>
    ab0e:	f7 01       	movw	r30, r14
    ab10:	20 81       	ld	r18, Z
    ab12:	26 ff       	sbrs	r18, 6
    ab14:	3a c0       	rjmp	.+116    	; 0xab8a <dir_find+0x20a>
    ab16:	89 2b       	or	r24, r25
    ab18:	c1 f1       	breq	.+112    	; 0xab8a <dir_find+0x20a>
    ab1a:	00 0f       	add	r16, r16
    ab1c:	11 1f       	adc	r17, r17
    ab1e:	ed 81       	ldd	r30, Y+5	; 0x05
    ab20:	fe 81       	ldd	r31, Y+6	; 0x06
    ab22:	e0 0f       	add	r30, r16
    ab24:	f1 1f       	adc	r31, r17
    ab26:	80 81       	ld	r24, Z
    ab28:	91 81       	ldd	r25, Z+1	; 0x01
    ab2a:	89 2b       	or	r24, r25
    ab2c:	71 f1       	breq	.+92     	; 0xab8a <dir_find+0x20a>
    ab2e:	2b c0       	rjmp	.+86     	; 0xab86 <dir_find+0x206>
    ab30:	11 11       	cpse	r17, r1
    ab32:	05 c0       	rjmp	.+10     	; 0xab3e <dir_find+0x1be>
    ab34:	c7 01       	movw	r24, r14
    ab36:	0e 94 69 48 	call	0x90d2	; 0x90d2 <sum_sfn>
    ab3a:	08 17       	cp	r16, r24
    ab3c:	09 f1       	breq	.+66     	; 0xab80 <dir_find+0x200>
    ab3e:	eb 85       	ldd	r30, Y+11	; 0x0b
    ab40:	fc 85       	ldd	r31, Y+12	; 0x0c
    ab42:	87 a1       	ldd	r24, Z+39	; 0x27
    ab44:	80 fd       	sbrc	r24, 0
    ab46:	09 c0       	rjmp	.+18     	; 0xab5a <dir_find+0x1da>
    ab48:	4b e0       	ldi	r20, 0x0B	; 11
    ab4a:	50 e0       	ldi	r21, 0x00	; 0
    ab4c:	69 85       	ldd	r22, Y+9	; 0x09
    ab4e:	7a 85       	ldd	r23, Y+10	; 0x0a
    ab50:	c7 01       	movw	r24, r14
    ab52:	0e 94 f6 47 	call	0x8fec	; 0x8fec <mem_cmp>
    ab56:	89 2b       	or	r24, r25
    ab58:	99 f0       	breq	.+38     	; 0xab80 <dir_find+0x200>
    ab5a:	eb 85       	ldd	r30, Y+11	; 0x0b
    ab5c:	fc 85       	ldd	r31, Y+12	; 0x0c
    ab5e:	40 a6       	std	Z+40, r4	; 0x28
    ab60:	51 a6       	std	Z+41, r5	; 0x29
    ab62:	62 a6       	std	Z+42, r6	; 0x2a
    ab64:	73 a6       	std	Z+43, r7	; 0x2b
    ab66:	1f ef       	ldi	r17, 0xFF	; 255
    ab68:	60 e0       	ldi	r22, 0x00	; 0
    ab6a:	70 e0       	ldi	r23, 0x00	; 0
    ab6c:	8b 85       	ldd	r24, Y+11	; 0x0b
    ab6e:	9c 85       	ldd	r25, Y+12	; 0x0c
    ab70:	d5 dc       	rcall	.-1622   	; 0xa51c <dir_next>
    ab72:	00 97       	sbiw	r24, 0x00	; 0
    ab74:	09 f4       	brne	.+2      	; 0xab78 <dir_find+0x1f8>
    ab76:	2b cf       	rjmp	.-426    	; 0xa9ce <dir_find+0x4e>
    ab78:	28 2f       	mov	r18, r24
    ab7a:	0b c0       	rjmp	.+22     	; 0xab92 <dir_find+0x212>
    ab7c:	24 e0       	ldi	r18, 0x04	; 4
    ab7e:	01 c0       	rjmp	.+2      	; 0xab82 <dir_find+0x202>
    ab80:	20 e0       	ldi	r18, 0x00	; 0
    ab82:	90 e0       	ldi	r25, 0x00	; 0
    ab84:	06 c0       	rjmp	.+12     	; 0xab92 <dir_find+0x212>
    ab86:	0c 2d       	mov	r16, r12
    ab88:	ee cf       	rjmp	.-36     	; 0xab66 <dir_find+0x1e6>
    ab8a:	1f ef       	ldi	r17, 0xFF	; 255
    ab8c:	1d 0d       	add	r17, r13
    ab8e:	0c 2d       	mov	r16, r12
    ab90:	eb cf       	rjmp	.-42     	; 0xab68 <dir_find+0x1e8>
    ab92:	82 2f       	mov	r24, r18
    ab94:	2c 96       	adiw	r28, 0x0c	; 12
    ab96:	e2 e1       	ldi	r30, 0x12	; 18
    ab98:	0c 94 29 e7 	jmp	0x1ce52	; 0x1ce52 <__epilogue_restores__>

0000ab9c <dir_register>:
    ab9c:	a6 e1       	ldi	r26, 0x16	; 22
    ab9e:	b0 e0       	ldi	r27, 0x00	; 0
    aba0:	e4 ed       	ldi	r30, 0xD4	; 212
    aba2:	f5 e5       	ldi	r31, 0x55	; 85
    aba4:	0c 94 0d e7 	jmp	0x1ce1a	; 0x1ce1a <__prologue_saves__>
    aba8:	fc 01       	movw	r30, r24
    abaa:	27 a1       	ldd	r18, Z+39	; 0x27
    abac:	20 7a       	andi	r18, 0xA0	; 160
    abae:	09 f0       	breq	.+2      	; 0xabb2 <dir_register+0x16>
    abb0:	53 c1       	rjmp	.+678    	; 0xae58 <dir_register+0x2bc>
    abb2:	c0 80       	ld	r12, Z
    abb4:	d1 80       	ldd	r13, Z+1	; 0x01
    abb6:	f6 01       	movw	r30, r12
    abb8:	a3 85       	ldd	r26, Z+11	; 0x0b
    abba:	b4 85       	ldd	r27, Z+12	; 0x0c
    abbc:	81 2c       	mov	r8, r1
    abbe:	91 2c       	mov	r9, r1
    abc0:	2d 91       	ld	r18, X+
    abc2:	3d 91       	ld	r19, X+
    abc4:	23 2b       	or	r18, r19
    abc6:	21 f0       	breq	.+8      	; 0xabd0 <dir_register+0x34>
    abc8:	ff ef       	ldi	r31, 0xFF	; 255
    abca:	8f 1a       	sub	r8, r31
    abcc:	9f 0a       	sbc	r9, r31
    abce:	f8 cf       	rjmp	.-16     	; 0xabc0 <dir_register+0x24>
    abd0:	8c 01       	movw	r16, r24
    abd2:	5c 01       	movw	r10, r24
    abd4:	2c e1       	ldi	r18, 0x1C	; 28
    abd6:	a2 0e       	add	r10, r18
    abd8:	b1 1c       	adc	r11, r1
    abda:	4c e0       	ldi	r20, 0x0C	; 12
    abdc:	50 e0       	ldi	r21, 0x00	; 0
    abde:	b5 01       	movw	r22, r10
    abe0:	ce 01       	movw	r24, r28
    abe2:	01 96       	adiw	r24, 0x01	; 1
    abe4:	0e 94 fa 49 	call	0x93f4	; 0x93f4 <mem_cpy.part.0>
    abe8:	8c 85       	ldd	r24, Y+12	; 0x0c
    abea:	80 ff       	sbrs	r24, 0
    abec:	94 c0       	rjmp	.+296    	; 0xad16 <dir_register+0x17a>
    abee:	80 e4       	ldi	r24, 0x40	; 64
    abf0:	f8 01       	movw	r30, r16
    abf2:	87 a3       	std	Z+39, r24	; 0x27
    abf4:	41 2c       	mov	r4, r1
    abf6:	51 2c       	mov	r5, r1
    abf8:	32 01       	movw	r6, r4
    abfa:	43 94       	inc	r4
    abfc:	72 01       	movw	r14, r4
    abfe:	f6 01       	movw	r30, r12
    ac00:	23 84       	ldd	r2, Z+11	; 0x0b
    ac02:	34 84       	ldd	r3, Z+12	; 0x0c
    ac04:	4b e0       	ldi	r20, 0x0B	; 11
    ac06:	50 e0       	ldi	r21, 0x00	; 0
    ac08:	be 01       	movw	r22, r28
    ac0a:	6f 5f       	subi	r22, 0xFF	; 255
    ac0c:	7f 4f       	sbci	r23, 0xFF	; 255
    ac0e:	c5 01       	movw	r24, r10
    ac10:	0e 94 fa 49 	call	0x93f4	; 0x93f4 <mem_cpy.part.0>
    ac14:	f6 e0       	ldi	r31, 0x06	; 6
    ac16:	4f 16       	cp	r4, r31
    ac18:	51 04       	cpc	r5, r1
    ac1a:	18 f1       	brcs	.+70     	; 0xac62 <dir_register+0xc6>
    ac1c:	f1 01       	movw	r30, r2
    ac1e:	b3 01       	movw	r22, r6
    ac20:	a2 01       	movw	r20, r4
    ac22:	81 91       	ld	r24, Z+
    ac24:	91 91       	ld	r25, Z+
    ac26:	00 97       	sbiw	r24, 0x00	; 0
    ac28:	d9 f0       	breq	.+54     	; 0xac60 <dir_register+0xc4>
    ac2a:	20 e1       	ldi	r18, 0x10	; 16
    ac2c:	30 e0       	ldi	r19, 0x00	; 0
    ac2e:	44 0f       	add	r20, r20
    ac30:	55 1f       	adc	r21, r21
    ac32:	66 1f       	adc	r22, r22
    ac34:	77 1f       	adc	r23, r23
    ac36:	dc 01       	movw	r26, r24
    ac38:	a1 70       	andi	r26, 0x01	; 1
    ac3a:	bb 27       	eor	r27, r27
    ac3c:	4a 0f       	add	r20, r26
    ac3e:	5b 1f       	adc	r21, r27
    ac40:	61 1d       	adc	r22, r1
    ac42:	71 1d       	adc	r23, r1
    ac44:	96 95       	lsr	r25
    ac46:	87 95       	ror	r24
    ac48:	60 ff       	sbrs	r22, 0
    ac4a:	06 c0       	rjmp	.+12     	; 0xac58 <dir_register+0xbc>
    ac4c:	a1 e2       	ldi	r26, 0x21	; 33
    ac4e:	4a 27       	eor	r20, r26
    ac50:	a0 e1       	ldi	r26, 0x10	; 16
    ac52:	5a 27       	eor	r21, r26
    ac54:	a1 e0       	ldi	r26, 0x01	; 1
    ac56:	6a 27       	eor	r22, r26
    ac58:	21 50       	subi	r18, 0x01	; 1
    ac5a:	31 09       	sbc	r19, r1
    ac5c:	41 f7       	brne	.-48     	; 0xac2e <dir_register+0x92>
    ac5e:	e1 cf       	rjmp	.-62     	; 0xac22 <dir_register+0x86>
    ac60:	7a 01       	movw	r14, r20
    ac62:	fe 01       	movw	r30, r28
    ac64:	75 96       	adiw	r30, 0x15	; 21
    ac66:	27 e0       	ldi	r18, 0x07	; 7
    ac68:	30 e0       	ldi	r19, 0x00	; 0
    ac6a:	9e 2d       	mov	r25, r14
    ac6c:	9f 70       	andi	r25, 0x0F	; 15
    ac6e:	80 e3       	ldi	r24, 0x30	; 48
    ac70:	89 0f       	add	r24, r25
    ac72:	8a 33       	cpi	r24, 0x3A	; 58
    ac74:	10 f0       	brcs	.+4      	; 0xac7a <dir_register+0xde>
    ac76:	87 e3       	ldi	r24, 0x37	; 55
    ac78:	89 0f       	add	r24, r25
    ac7a:	21 50       	subi	r18, 0x01	; 1
    ac7c:	31 09       	sbc	r19, r1
    ac7e:	82 93       	st	-Z, r24
    ac80:	a4 e0       	ldi	r26, 0x04	; 4
    ac82:	f6 94       	lsr	r15
    ac84:	e7 94       	ror	r14
    ac86:	aa 95       	dec	r26
    ac88:	e1 f7       	brne	.-8      	; 0xac82 <dir_register+0xe6>
    ac8a:	e1 14       	cp	r14, r1
    ac8c:	f1 04       	cpc	r15, r1
    ac8e:	69 f7       	brne	.-38     	; 0xac6a <dir_register+0xce>
    ac90:	ed e0       	ldi	r30, 0x0D	; 13
    ac92:	f0 e0       	ldi	r31, 0x00	; 0
    ac94:	ec 0f       	add	r30, r28
    ac96:	fd 1f       	adc	r31, r29
    ac98:	e2 0f       	add	r30, r18
    ac9a:	f3 1f       	adc	r31, r19
    ac9c:	4e e7       	ldi	r20, 0x7E	; 126
    ac9e:	40 83       	st	Z, r20
    aca0:	f5 01       	movw	r30, r10
    aca2:	80 e0       	ldi	r24, 0x00	; 0
    aca4:	90 e0       	ldi	r25, 0x00	; 0
    aca6:	28 17       	cp	r18, r24
    aca8:	39 07       	cpc	r19, r25
    acaa:	29 f0       	breq	.+10     	; 0xacb6 <dir_register+0x11a>
    acac:	41 91       	ld	r20, Z+
    acae:	40 32       	cpi	r20, 0x20	; 32
    acb0:	11 f0       	breq	.+4      	; 0xacb6 <dir_register+0x11a>
    acb2:	01 96       	adiw	r24, 0x01	; 1
    acb4:	f8 cf       	rjmp	.-16     	; 0xaca6 <dir_register+0x10a>
    acb6:	f5 01       	movw	r30, r10
    acb8:	e8 0f       	add	r30, r24
    acba:	f9 1f       	adc	r31, r25
    acbc:	28 30       	cpi	r18, 0x08	; 8
    acbe:	31 05       	cpc	r19, r1
    acc0:	50 f4       	brcc	.+20     	; 0xacd6 <dir_register+0x13a>
    acc2:	ad e0       	ldi	r26, 0x0D	; 13
    acc4:	b0 e0       	ldi	r27, 0x00	; 0
    acc6:	ac 0f       	add	r26, r28
    acc8:	bd 1f       	adc	r27, r29
    acca:	a2 0f       	add	r26, r18
    accc:	b3 1f       	adc	r27, r19
    acce:	8c 91       	ld	r24, X
    acd0:	2f 5f       	subi	r18, 0xFF	; 255
    acd2:	3f 4f       	sbci	r19, 0xFF	; 255
    acd4:	01 c0       	rjmp	.+2      	; 0xacd8 <dir_register+0x13c>
    acd6:	80 e2       	ldi	r24, 0x20	; 32
    acd8:	81 93       	st	Z+, r24
    acda:	cf 01       	movw	r24, r30
    acdc:	8a 19       	sub	r24, r10
    acde:	9b 09       	sbc	r25, r11
    ace0:	08 97       	sbiw	r24, 0x08	; 8
    ace2:	60 f3       	brcs	.-40     	; 0xacbc <dir_register+0x120>
    ace4:	c8 01       	movw	r24, r16
    ace6:	4c de       	rcall	.-872    	; 0xa980 <dir_find>
    ace8:	00 97       	sbiw	r24, 0x00	; 0
    acea:	71 f4       	brne	.+28     	; 0xad08 <dir_register+0x16c>
    acec:	8f ef       	ldi	r24, 0xFF	; 255
    acee:	48 1a       	sub	r4, r24
    acf0:	58 0a       	sbc	r5, r24
    acf2:	68 0a       	sbc	r6, r24
    acf4:	78 0a       	sbc	r7, r24
    acf6:	94 e6       	ldi	r25, 0x64	; 100
    acf8:	49 16       	cp	r4, r25
    acfa:	51 04       	cpc	r5, r1
    acfc:	61 04       	cpc	r6, r1
    acfe:	71 04       	cpc	r7, r1
    ad00:	09 f0       	breq	.+2      	; 0xad04 <dir_register+0x168>
    ad02:	7c cf       	rjmp	.-264    	; 0xabfc <dir_register+0x60>
    ad04:	27 e0       	ldi	r18, 0x07	; 7
    ad06:	a9 c0       	rjmp	.+338    	; 0xae5a <dir_register+0x2be>
    ad08:	84 30       	cpi	r24, 0x04	; 4
    ad0a:	91 05       	cpc	r25, r1
    ad0c:	09 f0       	breq	.+2      	; 0xad10 <dir_register+0x174>
    ad0e:	ce c0       	rjmp	.+412    	; 0xaeac <dir_register+0x310>
    ad10:	8c 85       	ldd	r24, Y+12	; 0x0c
    ad12:	f8 01       	movw	r30, r16
    ad14:	87 a3       	std	Z+39, r24	; 0x27
    ad16:	8c 85       	ldd	r24, Y+12	; 0x0c
    ad18:	81 ff       	sbrs	r24, 1
    ad1a:	0b c0       	rjmp	.+22     	; 0xad32 <dir_register+0x196>
    ad1c:	c4 01       	movw	r24, r8
    ad1e:	0c 96       	adiw	r24, 0x0c	; 12
    ad20:	6d e0       	ldi	r22, 0x0D	; 13
    ad22:	70 e0       	ldi	r23, 0x00	; 0
    ad24:	0e 94 79 e6 	call	0x1ccf2	; 0x1ccf2 <__udivmodhi4>
    ad28:	7b 01       	movw	r14, r22
    ad2a:	ff ef       	ldi	r31, 0xFF	; 255
    ad2c:	ef 1a       	sub	r14, r31
    ad2e:	ff 0a       	sbc	r15, r31
    ad30:	03 c0       	rjmp	.+6      	; 0xad38 <dir_register+0x19c>
    ad32:	ee 24       	eor	r14, r14
    ad34:	e3 94       	inc	r14
    ad36:	f1 2c       	mov	r15, r1
    ad38:	b7 01       	movw	r22, r14
    ad3a:	c8 01       	movw	r24, r16
    ad3c:	d7 dc       	rcall	.-1618   	; 0xa6ec <dir_alloc>
    ad3e:	00 97       	sbiw	r24, 0x00	; 0
    ad40:	09 f0       	breq	.+2      	; 0xad44 <dir_register+0x1a8>
    ad42:	b4 c0       	rjmp	.+360    	; 0xaeac <dir_register+0x310>
    ad44:	21 e0       	ldi	r18, 0x01	; 1
    ad46:	e2 1a       	sub	r14, r18
    ad48:	f1 08       	sbc	r15, r1
    ad4a:	09 f4       	brne	.+2      	; 0xad4e <dir_register+0x1b2>
    ad4c:	88 c0       	rjmp	.+272    	; 0xae5e <dir_register+0x2c2>
    ad4e:	f8 01       	movw	r30, r16
    ad50:	46 85       	ldd	r20, Z+14	; 0x0e
    ad52:	57 85       	ldd	r21, Z+15	; 0x0f
    ad54:	60 89       	ldd	r22, Z+16	; 0x10
    ad56:	71 89       	ldd	r23, Z+17	; 0x11
    ad58:	c7 01       	movw	r24, r14
    ad5a:	e5 e0       	ldi	r30, 0x05	; 5
    ad5c:	88 0f       	add	r24, r24
    ad5e:	99 1f       	adc	r25, r25
    ad60:	ea 95       	dec	r30
    ad62:	e1 f7       	brne	.-8      	; 0xad5c <dir_register+0x1c0>
    ad64:	48 1b       	sub	r20, r24
    ad66:	59 0b       	sbc	r21, r25
    ad68:	61 09       	sbc	r22, r1
    ad6a:	71 09       	sbc	r23, r1
    ad6c:	c8 01       	movw	r24, r16
    ad6e:	5e d9       	rcall	.-3396   	; 0xa02c <dir_sdi>
    ad70:	00 97       	sbiw	r24, 0x00	; 0
    ad72:	09 f0       	breq	.+2      	; 0xad76 <dir_register+0x1da>
    ad74:	9b c0       	rjmp	.+310    	; 0xaeac <dir_register+0x310>
    ad76:	c5 01       	movw	r24, r10
    ad78:	0e 94 69 48 	call	0x90d2	; 0x90d2 <sum_sfn>
    ad7c:	68 2e       	mov	r6, r24
    ad7e:	5f e0       	ldi	r21, 0x0F	; 15
    ad80:	35 2e       	mov	r3, r21
    ad82:	6d e0       	ldi	r22, 0x0D	; 13
    ad84:	46 2e       	mov	r4, r22
    ad86:	78 ef       	ldi	r23, 0xF8	; 248
    ad88:	87 2e       	mov	r8, r23
    ad8a:	74 e0       	ldi	r23, 0x04	; 4
    ad8c:	97 2e       	mov	r9, r23
    ad8e:	55 24       	eor	r5, r5
    ad90:	53 94       	inc	r5
    ad92:	f8 01       	movw	r30, r16
    ad94:	46 89       	ldd	r20, Z+22	; 0x16
    ad96:	57 89       	ldd	r21, Z+23	; 0x17
    ad98:	60 8d       	ldd	r22, Z+24	; 0x18
    ad9a:	71 8d       	ldd	r23, Z+25	; 0x19
    ad9c:	c6 01       	movw	r24, r12
    ad9e:	0e 94 94 4b 	call	0x9728	; 0x9728 <move_window>
    ada2:	00 97       	sbiw	r24, 0x00	; 0
    ada4:	09 f0       	breq	.+2      	; 0xada8 <dir_register+0x20c>
    ada6:	82 c0       	rjmp	.+260    	; 0xaeac <dir_register+0x310>
    ada8:	f6 01       	movw	r30, r12
    adaa:	63 85       	ldd	r22, Z+11	; 0x0b
    adac:	74 85       	ldd	r23, Z+12	; 0x0c
    adae:	f8 01       	movw	r30, r16
    adb0:	02 8c       	ldd	r0, Z+26	; 0x1a
    adb2:	f3 8d       	ldd	r31, Z+27	; 0x1b
    adb4:	e0 2d       	mov	r30, r0
    adb6:	fe 8b       	std	Y+22, r31	; 0x16
    adb8:	ed 8b       	std	Y+21, r30	; 0x15
    adba:	7e 2c       	mov	r7, r14
    adbc:	65 86       	std	Z+13, r6	; 0x0d
    adbe:	33 86       	std	Z+11, r3	; 0x0b
    adc0:	14 86       	std	Z+12, r1	; 0x0c
    adc2:	12 8e       	std	Z+26, r1	; 0x1a
    adc4:	13 8e       	std	Z+27, r1	; 0x1b
    adc6:	97 01       	movw	r18, r14
    adc8:	33 27       	eor	r19, r19
    adca:	21 50       	subi	r18, 0x01	; 1
    adcc:	31 09       	sbc	r19, r1
    adce:	42 9e       	mul	r4, r18
    add0:	c0 01       	movw	r24, r0
    add2:	43 9e       	mul	r4, r19
    add4:	90 0d       	add	r25, r0
    add6:	11 24       	eor	r1, r1
    add8:	ab ee       	ldi	r26, 0xEB	; 235
    adda:	b4 e0       	ldi	r27, 0x04	; 4
    addc:	20 e0       	ldi	r18, 0x00	; 0
    adde:	30 e0       	ldi	r19, 0x00	; 0
    ade0:	2f 3f       	cpi	r18, 0xFF	; 255
    ade2:	ff ef       	ldi	r31, 0xFF	; 255
    ade4:	3f 07       	cpc	r19, r31
    ade6:	49 f0       	breq	.+18     	; 0xadfa <dir_register+0x25e>
    ade8:	9c 01       	movw	r18, r24
    adea:	22 0f       	add	r18, r18
    adec:	33 1f       	adc	r19, r19
    adee:	26 0f       	add	r18, r22
    adf0:	37 1f       	adc	r19, r23
    adf2:	f9 01       	movw	r30, r18
    adf4:	20 81       	ld	r18, Z
    adf6:	31 81       	ldd	r19, Z+1	; 0x01
    adf8:	01 96       	adiw	r24, 0x01	; 1
    adfa:	4d 91       	ld	r20, X+
    adfc:	ed 89       	ldd	r30, Y+21	; 0x15
    adfe:	fe 89       	ldd	r31, Y+22	; 0x16
    ae00:	e4 0f       	add	r30, r20
    ae02:	f1 1d       	adc	r31, r1
    ae04:	20 83       	st	Z, r18
    ae06:	31 83       	std	Z+1, r19	; 0x01
    ae08:	21 15       	cp	r18, r1
    ae0a:	31 05       	cpc	r19, r1
    ae0c:	11 f4       	brne	.+4      	; 0xae12 <dir_register+0x276>
    ae0e:	2f ef       	ldi	r18, 0xFF	; 255
    ae10:	3f ef       	ldi	r19, 0xFF	; 255
    ae12:	8a 16       	cp	r8, r26
    ae14:	9b 06       	cpc	r9, r27
    ae16:	21 f7       	brne	.-56     	; 0xade0 <dir_register+0x244>
    ae18:	2f 3f       	cpi	r18, 0xFF	; 255
    ae1a:	3f 4f       	sbci	r19, 0xFF	; 255
    ae1c:	49 f0       	breq	.+18     	; 0xae30 <dir_register+0x294>
    ae1e:	88 0f       	add	r24, r24
    ae20:	99 1f       	adc	r25, r25
    ae22:	db 01       	movw	r26, r22
    ae24:	a8 0f       	add	r26, r24
    ae26:	b9 1f       	adc	r27, r25
    ae28:	8d 91       	ld	r24, X+
    ae2a:	9c 91       	ld	r25, X
    ae2c:	89 2b       	or	r24, r25
    ae2e:	19 f4       	brne	.+6      	; 0xae36 <dir_register+0x29a>
    ae30:	27 2d       	mov	r18, r7
    ae32:	20 64       	ori	r18, 0x40	; 64
    ae34:	72 2e       	mov	r7, r18
    ae36:	ed 89       	ldd	r30, Y+21	; 0x15
    ae38:	fe 89       	ldd	r31, Y+22	; 0x16
    ae3a:	70 82       	st	Z, r7
    ae3c:	f6 01       	movw	r30, r12
    ae3e:	53 82       	std	Z+3, r5	; 0x03
    ae40:	60 e0       	ldi	r22, 0x00	; 0
    ae42:	70 e0       	ldi	r23, 0x00	; 0
    ae44:	c8 01       	movw	r24, r16
    ae46:	6a db       	rcall	.-2348   	; 0xa51c <dir_next>
    ae48:	00 97       	sbiw	r24, 0x00	; 0
    ae4a:	81 f5       	brne	.+96     	; 0xaeac <dir_register+0x310>
    ae4c:	f1 e0       	ldi	r31, 0x01	; 1
    ae4e:	ef 1a       	sub	r14, r31
    ae50:	f1 08       	sbc	r15, r1
    ae52:	09 f0       	breq	.+2      	; 0xae56 <dir_register+0x2ba>
    ae54:	9e cf       	rjmp	.-196    	; 0xad92 <dir_register+0x1f6>
    ae56:	03 c0       	rjmp	.+6      	; 0xae5e <dir_register+0x2c2>
    ae58:	26 e0       	ldi	r18, 0x06	; 6
    ae5a:	90 e0       	ldi	r25, 0x00	; 0
    ae5c:	28 c0       	rjmp	.+80     	; 0xaeae <dir_register+0x312>
    ae5e:	f8 01       	movw	r30, r16
    ae60:	46 89       	ldd	r20, Z+22	; 0x16
    ae62:	57 89       	ldd	r21, Z+23	; 0x17
    ae64:	60 8d       	ldd	r22, Z+24	; 0x18
    ae66:	71 8d       	ldd	r23, Z+25	; 0x19
    ae68:	c6 01       	movw	r24, r12
    ae6a:	0e 94 94 4b 	call	0x9728	; 0x9728 <move_window>
    ae6e:	00 97       	sbiw	r24, 0x00	; 0
    ae70:	e9 f4       	brne	.+58     	; 0xaeac <dir_register+0x310>
    ae72:	40 e2       	ldi	r20, 0x20	; 32
    ae74:	50 e0       	ldi	r21, 0x00	; 0
    ae76:	60 e0       	ldi	r22, 0x00	; 0
    ae78:	70 e0       	ldi	r23, 0x00	; 0
    ae7a:	f8 01       	movw	r30, r16
    ae7c:	82 8d       	ldd	r24, Z+26	; 0x1a
    ae7e:	93 8d       	ldd	r25, Z+27	; 0x1b
    ae80:	0e 94 ed 47 	call	0x8fda	; 0x8fda <mem_set>
    ae84:	4b e0       	ldi	r20, 0x0B	; 11
    ae86:	50 e0       	ldi	r21, 0x00	; 0
    ae88:	b5 01       	movw	r22, r10
    ae8a:	f8 01       	movw	r30, r16
    ae8c:	82 8d       	ldd	r24, Z+26	; 0x1a
    ae8e:	93 8d       	ldd	r25, Z+27	; 0x1b
    ae90:	0e 94 fa 49 	call	0x93f4	; 0x93f4 <mem_cpy.part.0>
    ae94:	f8 01       	movw	r30, r16
    ae96:	22 8d       	ldd	r18, Z+26	; 0x1a
    ae98:	33 8d       	ldd	r19, Z+27	; 0x1b
    ae9a:	87 a1       	ldd	r24, Z+39	; 0x27
    ae9c:	88 71       	andi	r24, 0x18	; 24
    ae9e:	f9 01       	movw	r30, r18
    aea0:	84 87       	std	Z+12, r24	; 0x0c
    aea2:	81 e0       	ldi	r24, 0x01	; 1
    aea4:	f6 01       	movw	r30, r12
    aea6:	83 83       	std	Z+3, r24	; 0x03
    aea8:	20 e0       	ldi	r18, 0x00	; 0
    aeaa:	d7 cf       	rjmp	.-82     	; 0xae5a <dir_register+0x2be>
    aeac:	28 2f       	mov	r18, r24
    aeae:	82 2f       	mov	r24, r18
    aeb0:	66 96       	adiw	r28, 0x16	; 22
    aeb2:	e2 e1       	ldi	r30, 0x12	; 18
    aeb4:	0c 94 29 e7 	jmp	0x1ce52	; 0x1ce52 <__epilogue_restores__>

0000aeb8 <follow_path>:
    aeb8:	a8 e0       	ldi	r26, 0x08	; 8
    aeba:	b0 e0       	ldi	r27, 0x00	; 0
    aebc:	e2 e6       	ldi	r30, 0x62	; 98
    aebe:	f7 e5       	ldi	r31, 0x57	; 87
    aec0:	0c 94 0d e7 	jmp	0x1ce1a	; 0x1ce1a <__prologue_saves__>
    aec4:	8c 01       	movw	r16, r24
    aec6:	78 87       	std	Y+8, r23	; 0x08
    aec8:	6f 83       	std	Y+7, r22	; 0x07
    aeca:	dc 01       	movw	r26, r24
    aecc:	0d 90       	ld	r0, X+
    aece:	bc 91       	ld	r27, X
    aed0:	a0 2d       	mov	r26, r0
    aed2:	ba 83       	std	Y+2, r27	; 0x02
    aed4:	a9 83       	std	Y+1, r26	; 0x01
    aed6:	fb 01       	movw	r30, r22
    aed8:	80 81       	ld	r24, Z
    aeda:	8f 32       	cpi	r24, 0x2F	; 47
    aedc:	11 f0       	breq	.+4      	; 0xaee2 <follow_path+0x2a>
    aede:	8c 35       	cpi	r24, 0x5C	; 92
    aee0:	19 f4       	brne	.+6      	; 0xaee8 <follow_path+0x30>
    aee2:	2f 81       	ldd	r18, Y+7	; 0x07
    aee4:	38 85       	ldd	r19, Y+8	; 0x08
    aee6:	0c c0       	rjmp	.+24     	; 0xaf00 <follow_path+0x48>
    aee8:	e9 81       	ldd	r30, Y+1	; 0x01
    aeea:	fa 81       	ldd	r31, Y+2	; 0x02
    aeec:	85 89       	ldd	r24, Z+21	; 0x15
    aeee:	96 89       	ldd	r25, Z+22	; 0x16
    aef0:	a7 89       	ldd	r26, Z+23	; 0x17
    aef2:	b0 8d       	ldd	r27, Z+24	; 0x18
    aef4:	f8 01       	movw	r30, r16
    aef6:	86 83       	std	Z+6, r24	; 0x06
    aef8:	97 83       	std	Z+7, r25	; 0x07
    aefa:	a0 87       	std	Z+8, r26	; 0x08
    aefc:	b1 87       	std	Z+9, r27	; 0x09
    aefe:	0f c0       	rjmp	.+30     	; 0xaf1e <follow_path+0x66>
    af00:	38 87       	std	Y+8, r19	; 0x08
    af02:	2f 83       	std	Y+7, r18	; 0x07
    af04:	d9 01       	movw	r26, r18
    af06:	8c 91       	ld	r24, X
    af08:	2f 5f       	subi	r18, 0xFF	; 255
    af0a:	3f 4f       	sbci	r19, 0xFF	; 255
    af0c:	8f 32       	cpi	r24, 0x2F	; 47
    af0e:	c1 f3       	breq	.-16     	; 0xaf00 <follow_path+0x48>
    af10:	8c 35       	cpi	r24, 0x5C	; 92
    af12:	b1 f3       	breq	.-20     	; 0xaf00 <follow_path+0x48>
    af14:	f8 01       	movw	r30, r16
    af16:	16 82       	std	Z+6, r1	; 0x06
    af18:	17 82       	std	Z+7, r1	; 0x07
    af1a:	10 86       	std	Z+8, r1	; 0x08
    af1c:	11 86       	std	Z+9, r1	; 0x09
    af1e:	af 81       	ldd	r26, Y+7	; 0x07
    af20:	b8 85       	ldd	r27, Y+8	; 0x08
    af22:	8c 91       	ld	r24, X
    af24:	80 32       	cpi	r24, 0x20	; 32
    af26:	58 f0       	brcs	.+22     	; 0xaf3e <follow_path+0x86>
    af28:	f8 01       	movw	r30, r16
    af2a:	7c 96       	adiw	r30, 0x1c	; 28
    af2c:	fc 83       	std	Y+4, r31	; 0x04
    af2e:	eb 83       	std	Y+3, r30	; 0x03
    af30:	29 81       	ldd	r18, Y+1	; 0x01
    af32:	3a 81       	ldd	r19, Y+2	; 0x02
    af34:	2b 5c       	subi	r18, 0xCB	; 203
    af36:	3f 4f       	sbci	r19, 0xFF	; 255
    af38:	3e 83       	std	Y+6, r19	; 0x06
    af3a:	2d 83       	std	Y+5, r18	; 0x05
    af3c:	76 c0       	rjmp	.+236    	; 0xb02a <follow_path+0x172>
    af3e:	80 e8       	ldi	r24, 0x80	; 128
    af40:	f8 01       	movw	r30, r16
    af42:	87 a3       	std	Z+39, r24	; 0x27
    af44:	40 e0       	ldi	r20, 0x00	; 0
    af46:	50 e0       	ldi	r21, 0x00	; 0
    af48:	ba 01       	movw	r22, r20
    af4a:	c8 01       	movw	r24, r16
    af4c:	6f d8       	rcall	.-3874   	; 0xa02c <dir_sdi>
    af4e:	ec c1       	rjmp	.+984    	; 0xb328 <follow_path+0x470>
    af50:	65 eb       	ldi	r22, 0xB5	; 181
    af52:	71 e0       	ldi	r23, 0x01	; 1
    af54:	0e 94 43 69 	call	0xd286	; 0xd286 <ff_oem2uni>
    af58:	00 97       	sbiw	r24, 0x00	; 0
    af5a:	09 f4       	brne	.+2      	; 0xaf5e <follow_path+0xa6>
    af5c:	b8 c1       	rjmp	.+880    	; 0xb2ce <follow_path+0x416>
    af5e:	80 32       	cpi	r24, 0x20	; 32
    af60:	91 05       	cpc	r25, r1
    af62:	30 f1       	brcs	.+76     	; 0xafb0 <follow_path+0xf8>
    af64:	8f 32       	cpi	r24, 0x2F	; 47
    af66:	91 05       	cpc	r25, r1
    af68:	09 f4       	brne	.+2      	; 0xaf6c <follow_path+0xb4>
    af6a:	6b c0       	rjmp	.+214    	; 0xb042 <follow_path+0x18a>
    af6c:	8c 35       	cpi	r24, 0x5C	; 92
    af6e:	91 05       	cpc	r25, r1
    af70:	09 f4       	brne	.+2      	; 0xaf74 <follow_path+0xbc>
    af72:	67 c0       	rjmp	.+206    	; 0xb042 <follow_path+0x18a>
    af74:	80 38       	cpi	r24, 0x80	; 128
    af76:	91 05       	cpc	r25, r1
    af78:	28 f4       	brcc	.+10     	; 0xaf84 <follow_path+0xcc>
    af7a:	e7 e2       	ldi	r30, 0x27	; 39
    af7c:	f4 e0       	ldi	r31, 0x04	; 4
    af7e:	21 91       	ld	r18, Z+
    af80:	21 11       	cpse	r18, r1
    af82:	61 c0       	rjmp	.+194    	; 0xb046 <follow_path+0x18e>
    af84:	ef 81       	ldd	r30, Y+7	; 0x07
    af86:	f8 85       	ldd	r31, Y+8	; 0x08
    af88:	ef 3f       	cpi	r30, 0xFF	; 255
    af8a:	f1 05       	cpc	r31, r1
    af8c:	09 f4       	brne	.+2      	; 0xaf90 <follow_path+0xd8>
    af8e:	9f c1       	rjmp	.+830    	; 0xb2ce <follow_path+0x416>
    af90:	31 96       	adiw	r30, 0x01	; 1
    af92:	f8 87       	std	Y+8, r31	; 0x08
    af94:	ef 83       	std	Y+7, r30	; 0x07
    af96:	d6 01       	movw	r26, r12
    af98:	8d 93       	st	X+, r24
    af9a:	9d 93       	st	X+, r25
    af9c:	6d 01       	movw	r12, r26
    af9e:	bf ef       	ldi	r27, 0xFF	; 255
    afa0:	eb 1a       	sub	r14, r27
    afa2:	fb 0a       	sbc	r15, r27
    afa4:	f7 01       	movw	r30, r14
    afa6:	31 97       	sbiw	r30, 0x01	; 1
    afa8:	80 81       	ld	r24, Z
    afaa:	90 e0       	ldi	r25, 0x00	; 0
    afac:	00 97       	sbiw	r24, 0x00	; 0
    afae:	81 f6       	brne	.-96     	; 0xaf50 <follow_path+0x98>
    afb0:	74 e0       	ldi	r23, 0x04	; 4
    afb2:	37 2e       	mov	r3, r23
    afb4:	2f 81       	ldd	r18, Y+7	; 0x07
    afb6:	38 85       	ldd	r19, Y+8	; 0x08
    afb8:	22 0f       	add	r18, r18
    afba:	33 1f       	adc	r19, r19
    afbc:	8f 81       	ldd	r24, Y+7	; 0x07
    afbe:	98 85       	ldd	r25, Y+8	; 0x08
    afc0:	01 97       	sbiw	r24, 0x01	; 1
    afc2:	09 f0       	breq	.+2      	; 0xafc6 <follow_path+0x10e>
    afc4:	51 c0       	rjmp	.+162    	; 0xb068 <follow_path+0x1b0>
    afc6:	d5 01       	movw	r26, r10
    afc8:	8d 91       	ld	r24, X+
    afca:	9c 91       	ld	r25, X
    afcc:	8e 97       	sbiw	r24, 0x2e	; 46
    afce:	09 f0       	breq	.+2      	; 0xafd2 <follow_path+0x11a>
    afd0:	57 c0       	rjmp	.+174    	; 0xb080 <follow_path+0x1c8>
    afd2:	f9 01       	movw	r30, r18
    afd4:	ea 0d       	add	r30, r10
    afd6:	fb 1d       	adc	r31, r11
    afd8:	11 82       	std	Z+1, r1	; 0x01
    afda:	10 82       	st	Z, r1
    afdc:	f8 01       	movw	r30, r16
    afde:	7c 96       	adiw	r30, 0x1c	; 28
    afe0:	80 e0       	ldi	r24, 0x00	; 0
    afe2:	90 e0       	ldi	r25, 0x00	; 0
    afe4:	2f 81       	ldd	r18, Y+7	; 0x07
    afe6:	38 85       	ldd	r19, Y+8	; 0x08
    afe8:	82 17       	cp	r24, r18
    afea:	93 07       	cpc	r25, r19
    afec:	08 f0       	brcs	.+2      	; 0xaff0 <follow_path+0x138>
    afee:	4c c0       	rjmp	.+152    	; 0xb088 <follow_path+0x1d0>
    aff0:	2e e2       	ldi	r18, 0x2E	; 46
    aff2:	21 93       	st	Z+, r18
    aff4:	01 96       	adiw	r24, 0x01	; 1
    aff6:	8b 30       	cpi	r24, 0x0B	; 11
    aff8:	91 05       	cpc	r25, r1
    affa:	a1 f7       	brne	.-24     	; 0xafe4 <follow_path+0x12c>
    affc:	83 2d       	mov	r24, r3
    affe:	80 62       	ori	r24, 0x20	; 32
    b000:	f8 01       	movw	r30, r16
    b002:	87 a3       	std	Z+39, r24	; 0x27
    b004:	c8 01       	movw	r24, r16
    b006:	bc dc       	rcall	.-1672   	; 0xa980 <dir_find>
    b008:	f8 01       	movw	r30, r16
    b00a:	27 a1       	ldd	r18, Z+39	; 0x27
    b00c:	00 97       	sbiw	r24, 0x00	; 0
    b00e:	09 f4       	brne	.+2      	; 0xb012 <follow_path+0x15a>
    b010:	6a c1       	rjmp	.+724    	; 0xb2e6 <follow_path+0x42e>
    b012:	84 30       	cpi	r24, 0x04	; 4
    b014:	91 05       	cpc	r25, r1
    b016:	09 f0       	breq	.+2      	; 0xb01a <follow_path+0x162>
    b018:	87 c1       	rjmp	.+782    	; 0xb328 <follow_path+0x470>
    b01a:	32 2f       	mov	r19, r18
    b01c:	34 70       	andi	r19, 0x04	; 4
    b01e:	25 ff       	sbrs	r18, 5
    b020:	5f c1       	rjmp	.+702    	; 0xb2e0 <follow_path+0x428>
    b022:	31 11       	cpse	r19, r1
    b024:	57 c1       	rjmp	.+686    	; 0xb2d4 <follow_path+0x41c>
    b026:	f8 86       	std	Y+8, r15	; 0x08
    b028:	ef 82       	std	Y+7, r14	; 0x07
    b02a:	d8 01       	movw	r26, r16
    b02c:	ed 91       	ld	r30, X+
    b02e:	fc 91       	ld	r31, X
    b030:	a3 84       	ldd	r10, Z+11	; 0x0b
    b032:	b4 84       	ldd	r11, Z+12	; 0x0c
    b034:	45 01       	movw	r8, r10
    b036:	65 01       	movw	r12, r10
    b038:	ef 80       	ldd	r14, Y+7	; 0x07
    b03a:	f8 84       	ldd	r15, Y+8	; 0x08
    b03c:	18 86       	std	Y+8, r1	; 0x08
    b03e:	1f 82       	std	Y+7, r1	; 0x07
    b040:	ae cf       	rjmp	.-164    	; 0xaf9e <follow_path+0xe6>
    b042:	97 01       	movw	r18, r14
    b044:	06 c0       	rjmp	.+12     	; 0xb052 <follow_path+0x19a>
    b046:	30 e0       	ldi	r19, 0x00	; 0
    b048:	82 17       	cp	r24, r18
    b04a:	93 07       	cpc	r25, r19
    b04c:	09 f0       	breq	.+2      	; 0xb050 <follow_path+0x198>
    b04e:	97 cf       	rjmp	.-210    	; 0xaf7e <follow_path+0xc6>
    b050:	3e c1       	rjmp	.+636    	; 0xb2ce <follow_path+0x416>
    b052:	79 01       	movw	r14, r18
    b054:	f9 01       	movw	r30, r18
    b056:	80 81       	ld	r24, Z
    b058:	2f 5f       	subi	r18, 0xFF	; 255
    b05a:	3f 4f       	sbci	r19, 0xFF	; 255
    b05c:	8f 32       	cpi	r24, 0x2F	; 47
    b05e:	c9 f3       	breq	.-14     	; 0xb052 <follow_path+0x19a>
    b060:	8c 35       	cpi	r24, 0x5C	; 92
    b062:	b9 f3       	breq	.-18     	; 0xb052 <follow_path+0x19a>
    b064:	31 2c       	mov	r3, r1
    b066:	a6 cf       	rjmp	.-180    	; 0xafb4 <follow_path+0xfc>
    b068:	ef 81       	ldd	r30, Y+7	; 0x07
    b06a:	f8 85       	ldd	r31, Y+8	; 0x08
    b06c:	32 97       	sbiw	r30, 0x02	; 2
    b06e:	41 f4       	brne	.+16     	; 0xb080 <follow_path+0x1c8>
    b070:	f5 01       	movw	r30, r10
    b072:	82 81       	ldd	r24, Z+2	; 0x02
    b074:	93 81       	ldd	r25, Z+3	; 0x03
    b076:	8e 97       	sbiw	r24, 0x2e	; 46
    b078:	19 f4       	brne	.+6      	; 0xb080 <follow_path+0x1c8>
    b07a:	80 81       	ld	r24, Z
    b07c:	91 81       	ldd	r25, Z+1	; 0x01
    b07e:	a6 cf       	rjmp	.-180    	; 0xafcc <follow_path+0x114>
    b080:	f9 01       	movw	r30, r18
    b082:	ea 0d       	add	r30, r10
    b084:	fb 1d       	adc	r31, r11
    b086:	0d c0       	rjmp	.+26     	; 0xb0a2 <follow_path+0x1ea>
    b088:	20 e2       	ldi	r18, 0x20	; 32
    b08a:	b3 cf       	rjmp	.-154    	; 0xaff2 <follow_path+0x13a>
    b08c:	92 91       	ld	r25, -Z
    b08e:	82 91       	ld	r24, -Z
    b090:	80 32       	cpi	r24, 0x20	; 32
    b092:	91 05       	cpc	r25, r1
    b094:	59 f4       	brne	.+22     	; 0xb0ac <follow_path+0x1f4>
    b096:	2f 81       	ldd	r18, Y+7	; 0x07
    b098:	38 85       	ldd	r19, Y+8	; 0x08
    b09a:	21 50       	subi	r18, 0x01	; 1
    b09c:	31 09       	sbc	r19, r1
    b09e:	38 87       	std	Y+8, r19	; 0x08
    b0a0:	2f 83       	std	Y+7, r18	; 0x07
    b0a2:	8f 81       	ldd	r24, Y+7	; 0x07
    b0a4:	98 85       	ldd	r25, Y+8	; 0x08
    b0a6:	89 2b       	or	r24, r25
    b0a8:	89 f7       	brne	.-30     	; 0xb08c <follow_path+0x1d4>
    b0aa:	02 c0       	rjmp	.+4      	; 0xb0b0 <follow_path+0x1f8>
    b0ac:	8e 97       	sbiw	r24, 0x2e	; 46
    b0ae:	99 f3       	breq	.-26     	; 0xb096 <follow_path+0x1de>
    b0b0:	ef 81       	ldd	r30, Y+7	; 0x07
    b0b2:	f8 85       	ldd	r31, Y+8	; 0x08
    b0b4:	ee 0f       	add	r30, r30
    b0b6:	ff 1f       	adc	r31, r31
    b0b8:	ea 0d       	add	r30, r10
    b0ba:	fb 1d       	adc	r31, r11
    b0bc:	11 82       	std	Z+1, r1	; 0x01
    b0be:	10 82       	st	Z, r1
    b0c0:	af 81       	ldd	r26, Y+7	; 0x07
    b0c2:	b8 85       	ldd	r27, Y+8	; 0x08
    b0c4:	ab 2b       	or	r26, r27
    b0c6:	09 f4       	brne	.+2      	; 0xb0ca <follow_path+0x212>
    b0c8:	02 c1       	rjmp	.+516    	; 0xb2ce <follow_path+0x416>
    b0ca:	61 2c       	mov	r6, r1
    b0cc:	71 2c       	mov	r7, r1
    b0ce:	d4 01       	movw	r26, r8
    b0d0:	8d 91       	ld	r24, X+
    b0d2:	9d 91       	ld	r25, X+
    b0d4:	4d 01       	movw	r8, r26
    b0d6:	80 32       	cpi	r24, 0x20	; 32
    b0d8:	91 05       	cpc	r25, r1
    b0da:	21 f4       	brne	.+8      	; 0xb0e4 <follow_path+0x22c>
    b0dc:	bf ef       	ldi	r27, 0xFF	; 255
    b0de:	6b 1a       	sub	r6, r27
    b0e0:	7b 0a       	sbc	r7, r27
    b0e2:	f5 cf       	rjmp	.-22     	; 0xb0ce <follow_path+0x216>
    b0e4:	61 14       	cp	r6, r1
    b0e6:	71 04       	cpc	r7, r1
    b0e8:	11 f4       	brne	.+4      	; 0xb0ee <follow_path+0x236>
    b0ea:	8e 97       	sbiw	r24, 0x2e	; 46
    b0ec:	61 f4       	brne	.+24     	; 0xb106 <follow_path+0x24e>
    b0ee:	b3 2d       	mov	r27, r3
    b0f0:	b3 60       	ori	r27, 0x03	; 3
    b0f2:	3b 2e       	mov	r3, r27
    b0f4:	08 c0       	rjmp	.+16     	; 0xb106 <follow_path+0x24e>
    b0f6:	2f 81       	ldd	r18, Y+7	; 0x07
    b0f8:	38 85       	ldd	r19, Y+8	; 0x08
    b0fa:	21 50       	subi	r18, 0x01	; 1
    b0fc:	31 09       	sbc	r19, r1
    b0fe:	38 87       	std	Y+8, r19	; 0x08
    b100:	2f 83       	std	Y+7, r18	; 0x07
    b102:	23 2b       	or	r18, r19
    b104:	21 f0       	breq	.+8      	; 0xb10e <follow_path+0x256>
    b106:	92 91       	ld	r25, -Z
    b108:	82 91       	ld	r24, -Z
    b10a:	8e 97       	sbiw	r24, 0x2e	; 46
    b10c:	a1 f7       	brne	.-24     	; 0xb0f6 <follow_path+0x23e>
    b10e:	4b e0       	ldi	r20, 0x0B	; 11
    b110:	50 e0       	ldi	r21, 0x00	; 0
    b112:	60 e2       	ldi	r22, 0x20	; 32
    b114:	70 e0       	ldi	r23, 0x00	; 0
    b116:	8b 81       	ldd	r24, Y+3	; 0x03
    b118:	9c 81       	ldd	r25, Y+4	; 0x04
    b11a:	0e 94 ed 47 	call	0x8fda	; 0x8fda <mem_set>
    b11e:	48 e0       	ldi	r20, 0x08	; 8
    b120:	84 2e       	mov	r8, r20
    b122:	91 2c       	mov	r9, r1
    b124:	c1 2c       	mov	r12, r1
    b126:	d1 2c       	mov	r13, r1
    b128:	21 2c       	mov	r2, r1
    b12a:	23 01       	movw	r4, r6
    b12c:	3f ef       	ldi	r19, 0xFF	; 255
    b12e:	43 1a       	sub	r4, r19
    b130:	53 0a       	sbc	r5, r19
    b132:	66 0c       	add	r6, r6
    b134:	77 1c       	adc	r7, r7
    b136:	f5 01       	movw	r30, r10
    b138:	e6 0d       	add	r30, r6
    b13a:	f7 1d       	adc	r31, r7
    b13c:	80 81       	ld	r24, Z
    b13e:	91 81       	ldd	r25, Z+1	; 0x01
    b140:	00 97       	sbiw	r24, 0x00	; 0
    b142:	09 f4       	brne	.+2      	; 0xb146 <follow_path+0x28e>
    b144:	9e c0       	rjmp	.+316    	; 0xb282 <follow_path+0x3ca>
    b146:	80 32       	cpi	r24, 0x20	; 32
    b148:	91 05       	cpc	r25, r1
    b14a:	41 f0       	breq	.+16     	; 0xb15c <follow_path+0x2a4>
    b14c:	8e 32       	cpi	r24, 0x2E	; 46
    b14e:	91 05       	cpc	r25, r1
    b150:	51 f4       	brne	.+20     	; 0xb166 <follow_path+0x2ae>
    b152:	8f 81       	ldd	r24, Y+7	; 0x07
    b154:	98 85       	ldd	r25, Y+8	; 0x08
    b156:	84 15       	cp	r24, r4
    b158:	95 05       	cpc	r25, r5
    b15a:	71 f0       	breq	.+28     	; 0xb178 <follow_path+0x2c0>
    b15c:	93 2d       	mov	r25, r3
    b15e:	93 60       	ori	r25, 0x03	; 3
    b160:	39 2e       	mov	r3, r25
    b162:	32 01       	movw	r6, r4
    b164:	e2 cf       	rjmp	.-60     	; 0xb12a <follow_path+0x272>
    b166:	c8 14       	cp	r12, r8
    b168:	d9 04       	cpc	r13, r9
    b16a:	50 f4       	brcc	.+20     	; 0xb180 <follow_path+0x2c8>
    b16c:	af 81       	ldd	r26, Y+7	; 0x07
    b16e:	b8 85       	ldd	r27, Y+8	; 0x08
    b170:	a4 15       	cp	r26, r4
    b172:	b5 05       	cpc	r27, r5
    b174:	49 f5       	brne	.+82     	; 0xb1c8 <follow_path+0x310>
    b176:	d2 c0       	rjmp	.+420    	; 0xb31c <follow_path+0x464>
    b178:	c8 14       	cp	r12, r8
    b17a:	d9 04       	cpc	r13, r9
    b17c:	08 f4       	brcc	.+2      	; 0xb180 <follow_path+0x2c8>
    b17e:	ce c0       	rjmp	.+412    	; 0xb31c <follow_path+0x464>
    b180:	bb e0       	ldi	r27, 0x0B	; 11
    b182:	8b 16       	cp	r8, r27
    b184:	91 04       	cpc	r9, r1
    b186:	39 f4       	brne	.+14     	; 0xb196 <follow_path+0x2de>
    b188:	e3 2d       	mov	r30, r3
    b18a:	e3 60       	ori	r30, 0x03	; 3
    b18c:	3e 2e       	mov	r3, r30
    b18e:	2b e0       	ldi	r18, 0x0B	; 11
    b190:	82 2e       	mov	r8, r18
    b192:	91 2c       	mov	r9, r1
    b194:	76 c0       	rjmp	.+236    	; 0xb282 <follow_path+0x3ca>
    b196:	2f 81       	ldd	r18, Y+7	; 0x07
    b198:	38 85       	ldd	r19, Y+8	; 0x08
    b19a:	24 15       	cp	r18, r4
    b19c:	35 05       	cpc	r19, r5
    b19e:	49 f0       	breq	.+18     	; 0xb1b2 <follow_path+0x2fa>
    b1a0:	33 2d       	mov	r19, r3
    b1a2:	33 60       	ori	r19, 0x03	; 3
    b1a4:	33 2e       	mov	r3, r19
    b1a6:	8f 81       	ldd	r24, Y+7	; 0x07
    b1a8:	98 85       	ldd	r25, Y+8	; 0x08
    b1aa:	84 15       	cp	r24, r4
    b1ac:	95 05       	cpc	r25, r5
    b1ae:	08 f4       	brcc	.+2      	; 0xb1b2 <follow_path+0x2fa>
    b1b0:	68 c0       	rjmp	.+208    	; 0xb282 <follow_path+0x3ca>
    b1b2:	22 0c       	add	r2, r2
    b1b4:	22 0c       	add	r2, r2
    b1b6:	4f 80       	ldd	r4, Y+7	; 0x07
    b1b8:	58 84       	ldd	r5, Y+8	; 0x08
    b1ba:	8b e0       	ldi	r24, 0x0B	; 11
    b1bc:	88 2e       	mov	r8, r24
    b1be:	91 2c       	mov	r9, r1
    b1c0:	98 e0       	ldi	r25, 0x08	; 8
    b1c2:	c9 2e       	mov	r12, r25
    b1c4:	d1 2c       	mov	r13, r1
    b1c6:	cd cf       	rjmp	.-102    	; 0xb162 <follow_path+0x2aa>
    b1c8:	80 38       	cpi	r24, 0x80	; 128
    b1ca:	91 05       	cpc	r25, r1
    b1cc:	70 f1       	brcs	.+92     	; 0xb22a <follow_path+0x372>
    b1ce:	a3 2d       	mov	r26, r3
    b1d0:	a2 60       	ori	r26, 0x02	; 2
    b1d2:	7a 2e       	mov	r7, r26
    b1d4:	bc 01       	movw	r22, r24
    b1d6:	80 e0       	ldi	r24, 0x00	; 0
    b1d8:	90 e0       	ldi	r25, 0x00	; 0
    b1da:	45 eb       	ldi	r20, 0xB5	; 181
    b1dc:	51 e0       	ldi	r21, 0x01	; 1
    b1de:	0e 94 10 69 	call	0xd220	; 0xd220 <ff_uni2oem>
    b1e2:	87 ff       	sbrs	r24, 7
    b1e4:	08 c0       	rjmp	.+16     	; 0xb1f6 <follow_path+0x33e>
    b1e6:	8f 77       	andi	r24, 0x7F	; 127
    b1e8:	99 27       	eor	r25, r25
    b1ea:	fc 01       	movw	r30, r24
    b1ec:	e5 59       	subi	r30, 0x95	; 149
    b1ee:	fb 4f       	sbci	r31, 0xFB	; 251
    b1f0:	80 81       	ld	r24, Z
    b1f2:	90 e0       	ldi	r25, 0x00	; 0
    b1f4:	17 c0       	rjmp	.+46     	; 0xb224 <follow_path+0x36c>
    b1f6:	8f 3f       	cpi	r24, 0xFF	; 255
    b1f8:	91 05       	cpc	r25, r1
    b1fa:	a1 f0       	breq	.+40     	; 0xb224 <follow_path+0x36c>
    b1fc:	98 f0       	brcs	.+38     	; 0xb224 <follow_path+0x36c>
    b1fe:	94 01       	movw	r18, r8
    b200:	21 50       	subi	r18, 0x01	; 1
    b202:	31 09       	sbc	r19, r1
    b204:	c2 16       	cp	r12, r18
    b206:	d3 06       	cpc	r13, r19
    b208:	28 f0       	brcs	.+10     	; 0xb214 <follow_path+0x35c>
    b20a:	b3 2d       	mov	r27, r3
    b20c:	b3 60       	ori	r27, 0x03	; 3
    b20e:	3b 2e       	mov	r3, r27
    b210:	64 01       	movw	r12, r8
    b212:	a7 cf       	rjmp	.-178    	; 0xb162 <follow_path+0x2aa>
    b214:	f8 01       	movw	r30, r16
    b216:	ec 0d       	add	r30, r12
    b218:	fd 1d       	adc	r31, r13
    b21a:	94 8f       	std	Z+28, r25	; 0x1c
    b21c:	f6 01       	movw	r30, r12
    b21e:	31 96       	adiw	r30, 0x01	; 1
    b220:	6f 01       	movw	r12, r30
    b222:	26 c0       	rjmp	.+76     	; 0xb270 <follow_path+0x3b8>
    b224:	00 97       	sbiw	r24, 0x00	; 0
    b226:	59 f0       	breq	.+22     	; 0xb23e <follow_path+0x386>
    b228:	01 c0       	rjmp	.+2      	; 0xb22c <follow_path+0x374>
    b22a:	73 2c       	mov	r7, r3
    b22c:	e0 e3       	ldi	r30, 0x30	; 48
    b22e:	f4 e0       	ldi	r31, 0x04	; 4
    b230:	21 91       	ld	r18, Z+
    b232:	22 23       	and	r18, r18
    b234:	51 f0       	breq	.+20     	; 0xb24a <follow_path+0x392>
    b236:	30 e0       	ldi	r19, 0x00	; 0
    b238:	82 17       	cp	r24, r18
    b23a:	93 07       	cpc	r25, r19
    b23c:	c9 f7       	brne	.-14     	; 0xb230 <follow_path+0x378>
    b23e:	f7 2d       	mov	r31, r7
    b240:	f3 60       	ori	r31, 0x03	; 3
    b242:	7f 2e       	mov	r7, r31
    b244:	8f e5       	ldi	r24, 0x5F	; 95
    b246:	90 e0       	ldi	r25, 0x00	; 0
    b248:	13 c0       	rjmp	.+38     	; 0xb270 <follow_path+0x3b8>
    b24a:	9c 01       	movw	r18, r24
    b24c:	21 54       	subi	r18, 0x41	; 65
    b24e:	31 09       	sbc	r19, r1
    b250:	2a 31       	cpi	r18, 0x1A	; 26
    b252:	31 05       	cpc	r19, r1
    b254:	18 f4       	brcc	.+6      	; 0xb25c <follow_path+0x3a4>
    b256:	22 2d       	mov	r18, r2
    b258:	22 60       	ori	r18, 0x02	; 2
    b25a:	22 2e       	mov	r2, r18
    b25c:	9c 01       	movw	r18, r24
    b25e:	21 56       	subi	r18, 0x61	; 97
    b260:	31 09       	sbc	r19, r1
    b262:	2a 31       	cpi	r18, 0x1A	; 26
    b264:	31 05       	cpc	r19, r1
    b266:	20 f4       	brcc	.+8      	; 0xb270 <follow_path+0x3b8>
    b268:	32 2d       	mov	r19, r2
    b26a:	31 60       	ori	r19, 0x01	; 1
    b26c:	23 2e       	mov	r2, r19
    b26e:	80 97       	sbiw	r24, 0x20	; 32
    b270:	f8 01       	movw	r30, r16
    b272:	ec 0d       	add	r30, r12
    b274:	fd 1d       	adc	r31, r13
    b276:	84 8f       	std	Z+28, r24	; 0x1c
    b278:	c6 01       	movw	r24, r12
    b27a:	01 96       	adiw	r24, 0x01	; 1
    b27c:	6c 01       	movw	r12, r24
    b27e:	37 2c       	mov	r3, r7
    b280:	70 cf       	rjmp	.-288    	; 0xb162 <follow_path+0x2aa>
    b282:	f8 01       	movw	r30, r16
    b284:	84 8d       	ldd	r24, Z+28	; 0x1c
    b286:	85 3e       	cpi	r24, 0xE5	; 229
    b288:	11 f4       	brne	.+4      	; 0xb28e <follow_path+0x3d6>
    b28a:	25 e0       	ldi	r18, 0x05	; 5
    b28c:	24 8f       	std	Z+28, r18	; 0x1c
    b28e:	38 e0       	ldi	r19, 0x08	; 8
    b290:	83 16       	cp	r8, r19
    b292:	91 04       	cpc	r9, r1
    b294:	11 f4       	brne	.+4      	; 0xb29a <follow_path+0x3e2>
    b296:	22 0c       	add	r2, r2
    b298:	22 0c       	add	r2, r2
    b29a:	82 2d       	mov	r24, r2
    b29c:	8c 70       	andi	r24, 0x0C	; 12
    b29e:	8c 30       	cpi	r24, 0x0C	; 12
    b2a0:	21 f0       	breq	.+8      	; 0xb2aa <follow_path+0x3f2>
    b2a2:	82 2d       	mov	r24, r2
    b2a4:	83 70       	andi	r24, 0x03	; 3
    b2a6:	83 30       	cpi	r24, 0x03	; 3
    b2a8:	19 f4       	brne	.+6      	; 0xb2b0 <follow_path+0x3f8>
    b2aa:	83 2d       	mov	r24, r3
    b2ac:	82 60       	ori	r24, 0x02	; 2
    b2ae:	38 2e       	mov	r3, r24
    b2b0:	31 fc       	sbrc	r3, 1
    b2b2:	0a c0       	rjmp	.+20     	; 0xb2c8 <follow_path+0x410>
    b2b4:	20 fe       	sbrs	r2, 0
    b2b6:	03 c0       	rjmp	.+6      	; 0xb2be <follow_path+0x406>
    b2b8:	93 2d       	mov	r25, r3
    b2ba:	90 61       	ori	r25, 0x10	; 16
    b2bc:	39 2e       	mov	r3, r25
    b2be:	22 fe       	sbrs	r2, 2
    b2c0:	03 c0       	rjmp	.+6      	; 0xb2c8 <follow_path+0x410>
    b2c2:	a3 2d       	mov	r26, r3
    b2c4:	a8 60       	ori	r26, 0x08	; 8
    b2c6:	3a 2e       	mov	r3, r26
    b2c8:	f8 01       	movw	r30, r16
    b2ca:	37 a2       	std	Z+39, r3	; 0x27
    b2cc:	9b ce       	rjmp	.-714    	; 0xb004 <follow_path+0x14c>
    b2ce:	86 e0       	ldi	r24, 0x06	; 6
    b2d0:	90 e0       	ldi	r25, 0x00	; 0
    b2d2:	2a c0       	rjmp	.+84     	; 0xb328 <follow_path+0x470>
    b2d4:	80 e8       	ldi	r24, 0x80	; 128
    b2d6:	f8 01       	movw	r30, r16
    b2d8:	87 a3       	std	Z+39, r24	; 0x27
    b2da:	80 e0       	ldi	r24, 0x00	; 0
    b2dc:	90 e0       	ldi	r25, 0x00	; 0
    b2de:	24 c0       	rjmp	.+72     	; 0xb328 <follow_path+0x470>
    b2e0:	33 23       	and	r19, r19
    b2e2:	c9 f0       	breq	.+50     	; 0xb316 <follow_path+0x45e>
    b2e4:	21 c0       	rjmp	.+66     	; 0xb328 <follow_path+0x470>
    b2e6:	22 fd       	sbrc	r18, 2
    b2e8:	1f c0       	rjmp	.+62     	; 0xb328 <follow_path+0x470>
    b2ea:	f8 01       	movw	r30, r16
    b2ec:	84 81       	ldd	r24, Z+4	; 0x04
    b2ee:	84 ff       	sbrs	r24, 4
    b2f0:	12 c0       	rjmp	.+36     	; 0xb316 <follow_path+0x45e>
    b2f2:	66 85       	ldd	r22, Z+14	; 0x0e
    b2f4:	77 85       	ldd	r23, Z+15	; 0x0f
    b2f6:	71 70       	andi	r23, 0x01	; 1
    b2f8:	2d 81       	ldd	r18, Y+5	; 0x05
    b2fa:	3e 81       	ldd	r19, Y+6	; 0x06
    b2fc:	62 0f       	add	r22, r18
    b2fe:	73 1f       	adc	r23, r19
    b300:	a9 81       	ldd	r26, Y+1	; 0x01
    b302:	ba 81       	ldd	r27, Y+2	; 0x02
    b304:	8c 91       	ld	r24, X
    b306:	0e 94 05 4a 	call	0x940a	; 0x940a <ld_clust.isra.3>
    b30a:	f8 01       	movw	r30, r16
    b30c:	66 83       	std	Z+6, r22	; 0x06
    b30e:	77 83       	std	Z+7, r23	; 0x07
    b310:	80 87       	std	Z+8, r24	; 0x08
    b312:	91 87       	std	Z+9, r25	; 0x09
    b314:	88 ce       	rjmp	.-752    	; 0xb026 <follow_path+0x16e>
    b316:	85 e0       	ldi	r24, 0x05	; 5
    b318:	90 e0       	ldi	r25, 0x00	; 0
    b31a:	06 c0       	rjmp	.+12     	; 0xb328 <follow_path+0x470>
    b31c:	fb e0       	ldi	r31, 0x0B	; 11
    b31e:	8f 16       	cp	r8, r31
    b320:	91 04       	cpc	r9, r1
    b322:	09 f0       	breq	.+2      	; 0xb326 <follow_path+0x46e>
    b324:	46 cf       	rjmp	.-372    	; 0xb1b2 <follow_path+0x2fa>
    b326:	30 cf       	rjmp	.-416    	; 0xb188 <follow_path+0x2d0>
    b328:	28 96       	adiw	r28, 0x08	; 8
    b32a:	e2 e1       	ldi	r30, 0x12	; 18
    b32c:	0c 94 29 e7 	jmp	0x1ce52	; 0x1ce52 <__epilogue_restores__>

0000b330 <f_mount>:
    b330:	a6 e0       	ldi	r26, 0x06	; 6
    b332:	b0 e0       	ldi	r27, 0x00	; 0
    b334:	ee e9       	ldi	r30, 0x9E	; 158
    b336:	f9 e5       	ldi	r31, 0x59	; 89
    b338:	0c 94 1c e7 	jmp	0x1ce38	; 0x1ce38 <__prologue_saves__+0x1e>
    b33c:	9c 83       	std	Y+4, r25	; 0x04
    b33e:	8b 83       	std	Y+3, r24	; 0x03
    b340:	7e 83       	std	Y+6, r23	; 0x06
    b342:	6d 83       	std	Y+5, r22	; 0x05
    b344:	14 2f       	mov	r17, r20
    b346:	7a 83       	std	Y+2, r23	; 0x02
    b348:	69 83       	std	Y+1, r22	; 0x01
    b34a:	ce 01       	movw	r24, r28
    b34c:	01 96       	adiw	r24, 0x01	; 1
    b34e:	0e 94 78 48 	call	0x90f0	; 0x90f0 <get_ldnumber>
    b352:	97 fd       	sbrc	r25, 7
    b354:	20 c0       	rjmp	.+64     	; 0xb396 <f_mount+0x66>
    b356:	88 0f       	add	r24, r24
    b358:	99 1f       	adc	r25, r25
    b35a:	fc 01       	movw	r30, r24
    b35c:	ef 5d       	subi	r30, 0xDF	; 223
    b35e:	f7 4e       	sbci	r31, 0xE7	; 231
    b360:	01 90       	ld	r0, Z+
    b362:	f0 81       	ld	r31, Z
    b364:	e0 2d       	mov	r30, r0
    b366:	30 97       	sbiw	r30, 0x00	; 0
    b368:	09 f0       	breq	.+2      	; 0xb36c <f_mount+0x3c>
    b36a:	10 82       	st	Z, r1
    b36c:	eb 81       	ldd	r30, Y+3	; 0x03
    b36e:	fc 81       	ldd	r31, Y+4	; 0x04
    b370:	30 97       	sbiw	r30, 0x00	; 0
    b372:	09 f0       	breq	.+2      	; 0xb376 <f_mount+0x46>
    b374:	10 82       	st	Z, r1
    b376:	dc 01       	movw	r26, r24
    b378:	af 5d       	subi	r26, 0xDF	; 223
    b37a:	b7 4e       	sbci	r27, 0xE7	; 231
    b37c:	ed 93       	st	X+, r30
    b37e:	fc 93       	st	X, r31
    b380:	11 23       	and	r17, r17
    b382:	61 f0       	breq	.+24     	; 0xb39c <f_mount+0x6c>
    b384:	40 e0       	ldi	r20, 0x00	; 0
    b386:	be 01       	movw	r22, r28
    b388:	6d 5f       	subi	r22, 0xFD	; 253
    b38a:	7f 4f       	sbci	r23, 0xFF	; 255
    b38c:	ce 01       	movw	r24, r28
    b38e:	05 96       	adiw	r24, 0x05	; 5
    b390:	0e 94 0f 4c 	call	0x981e	; 0x981e <mount_volume>
    b394:	05 c0       	rjmp	.+10     	; 0xb3a0 <f_mount+0x70>
    b396:	8b e0       	ldi	r24, 0x0B	; 11
    b398:	90 e0       	ldi	r25, 0x00	; 0
    b39a:	02 c0       	rjmp	.+4      	; 0xb3a0 <f_mount+0x70>
    b39c:	80 e0       	ldi	r24, 0x00	; 0
    b39e:	90 e0       	ldi	r25, 0x00	; 0
    b3a0:	26 96       	adiw	r28, 0x06	; 6
    b3a2:	e3 e0       	ldi	r30, 0x03	; 3
    b3a4:	0c 94 38 e7 	jmp	0x1ce70	; 0x1ce70 <__epilogue_restores__+0x1e>

0000b3a8 <f_open>:
    b3a8:	a6 e3       	ldi	r26, 0x36	; 54
    b3aa:	b0 e0       	ldi	r27, 0x00	; 0
    b3ac:	ea ed       	ldi	r30, 0xDA	; 218
    b3ae:	f9 e5       	ldi	r31, 0x59	; 89
    b3b0:	0c 94 0d e7 	jmp	0x1ce1a	; 0x1ce1a <__prologue_saves__>
    b3b4:	7a ab       	std	Y+50, r23	; 0x32
    b3b6:	69 ab       	std	Y+49, r22	; 0x31
    b3b8:	00 97       	sbiw	r24, 0x00	; 0
    b3ba:	09 f4       	brne	.+2      	; 0xb3be <f_open+0x16>
    b3bc:	93 c1       	rjmp	.+806    	; 0xb6e4 <f_open+0x33c>
    b3be:	74 2e       	mov	r7, r20
    b3c0:	7c 01       	movw	r14, r24
    b3c2:	24 2f       	mov	r18, r20
    b3c4:	2f 73       	andi	r18, 0x3F	; 63
    b3c6:	32 2e       	mov	r3, r18
    b3c8:	42 2f       	mov	r20, r18
    b3ca:	be 01       	movw	r22, r28
    b3cc:	61 5d       	subi	r22, 0xD1	; 209
    b3ce:	7f 4f       	sbci	r23, 0xFF	; 255
    b3d0:	ce 01       	movw	r24, r28
    b3d2:	c1 96       	adiw	r24, 0x31	; 49
    b3d4:	0e 94 0f 4c 	call	0x981e	; 0x981e <mount_volume>
    b3d8:	00 97       	sbiw	r24, 0x00	; 0
    b3da:	09 f0       	breq	.+2      	; 0xb3de <f_open+0x36>
    b3dc:	7d c1       	rjmp	.+762    	; 0xb6d8 <f_open+0x330>
    b3de:	8f a5       	ldd	r24, Y+47	; 0x2f
    b3e0:	98 a9       	ldd	r25, Y+48	; 0x30
    b3e2:	9a 83       	std	Y+2, r25	; 0x02
    b3e4:	89 83       	std	Y+1, r24	; 0x01
    b3e6:	80 e0       	ldi	r24, 0x00	; 0
    b3e8:	92 e0       	ldi	r25, 0x02	; 2
    b3ea:	0e 94 0a 69 	call	0xd214	; 0xd214 <ff_memalloc>
    b3ee:	5c 01       	movw	r10, r24
    b3f0:	00 97       	sbiw	r24, 0x00	; 0
    b3f2:	09 f4       	brne	.+2      	; 0xb3f6 <f_open+0x4e>
    b3f4:	79 c1       	rjmp	.+754    	; 0xb6e8 <f_open+0x340>
    b3f6:	ef a5       	ldd	r30, Y+47	; 0x2f
    b3f8:	f8 a9       	ldd	r31, Y+48	; 0x30
    b3fa:	94 87       	std	Z+12, r25	; 0x0c
    b3fc:	83 87       	std	Z+11, r24	; 0x0b
    b3fe:	69 a9       	ldd	r22, Y+49	; 0x31
    b400:	7a a9       	ldd	r23, Y+50	; 0x32
    b402:	ce 01       	movw	r24, r28
    b404:	01 96       	adiw	r24, 0x01	; 1
    b406:	58 dd       	rcall	.-1360   	; 0xaeb8 <follow_path>
    b408:	8c 01       	movw	r16, r24
    b40a:	89 2b       	or	r24, r25
    b40c:	29 f4       	brne	.+10     	; 0xb418 <f_open+0x70>
    b40e:	88 a5       	ldd	r24, Y+40	; 0x28
    b410:	87 ff       	sbrs	r24, 7
    b412:	02 c0       	rjmp	.+4      	; 0xb418 <f_open+0x70>
    b414:	06 e0       	ldi	r16, 0x06	; 6
    b416:	10 e0       	ldi	r17, 0x00	; 0
    b418:	87 2d       	mov	r24, r7
    b41a:	8c 71       	andi	r24, 0x1C	; 28
    b41c:	09 f4       	brne	.+2      	; 0xb420 <f_open+0x78>
    b41e:	75 c0       	rjmp	.+234    	; 0xb50a <f_open+0x162>
    b420:	01 15       	cp	r16, r1
    b422:	11 05       	cpc	r17, r1
    b424:	79 f0       	breq	.+30     	; 0xb444 <f_open+0x9c>
    b426:	04 30       	cpi	r16, 0x04	; 4
    b428:	11 05       	cpc	r17, r1
    b42a:	09 f0       	breq	.+2      	; 0xb42e <f_open+0x86>
    b42c:	6d c1       	rjmp	.+730    	; 0xb708 <f_open+0x360>
    b42e:	ce 01       	movw	r24, r28
    b430:	01 96       	adiw	r24, 0x01	; 1
    b432:	b4 db       	rcall	.-2200   	; 0xab9c <dir_register>
    b434:	8c 01       	movw	r16, r24
    b436:	89 2b       	or	r24, r25
    b438:	09 f0       	breq	.+2      	; 0xb43c <f_open+0x94>
    b43a:	66 c1       	rjmp	.+716    	; 0xb708 <f_open+0x360>
    b43c:	33 2d       	mov	r19, r3
    b43e:	38 60       	ori	r19, 0x08	; 8
    b440:	33 2e       	mov	r3, r19
    b442:	06 c0       	rjmp	.+12     	; 0xb450 <f_open+0xa8>
    b444:	8d 81       	ldd	r24, Y+5	; 0x05
    b446:	81 71       	andi	r24, 0x11	; 17
    b448:	09 f0       	breq	.+2      	; 0xb44c <f_open+0xa4>
    b44a:	5c c1       	rjmp	.+696    	; 0xb704 <f_open+0x35c>
    b44c:	72 fc       	sbrc	r7, 2
    b44e:	51 c1       	rjmp	.+674    	; 0xb6f2 <f_open+0x34a>
    b450:	33 fe       	sbrs	r3, 3
    b452:	6b c0       	rjmp	.+214    	; 0xb52a <f_open+0x182>
    b454:	0b 8d       	ldd	r16, Y+27	; 0x1b
    b456:	1c 8d       	ldd	r17, Y+28	; 0x1c
    b458:	ef a5       	ldd	r30, Y+47	; 0x2f
    b45a:	f8 a9       	ldd	r31, Y+48	; 0x30
    b45c:	b8 01       	movw	r22, r16
    b45e:	80 81       	ld	r24, Z
    b460:	0e 94 05 4a 	call	0x940a	; 0x940a <ld_clust.isra.3>
    b464:	2b 01       	movw	r4, r22
    b466:	3c 01       	movw	r6, r24
    b468:	0e 94 8b 70 	call	0xe116	; 0xe116 <get_fattime>
    b46c:	ab 01       	movw	r20, r22
    b46e:	bc 01       	movw	r22, r24
    b470:	c8 01       	movw	r24, r16
    b472:	0e 96       	adiw	r24, 0x0e	; 14
    b474:	0e 94 e7 47 	call	0x8fce	; 0x8fce <st_dword>
    b478:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b47a:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b47c:	80 e2       	ldi	r24, 0x20	; 32
    b47e:	83 87       	std	Z+11, r24	; 0x0b
    b480:	af a5       	ldd	r26, Y+47	; 0x2f
    b482:	b8 a9       	ldd	r27, Y+48	; 0x30
    b484:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b486:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b488:	12 8e       	std	Z+26, r1	; 0x1a
    b48a:	13 8e       	std	Z+27, r1	; 0x1b
    b48c:	8c 91       	ld	r24, X
    b48e:	83 30       	cpi	r24, 0x03	; 3
    b490:	11 f4       	brne	.+4      	; 0xb496 <f_open+0xee>
    b492:	14 8a       	std	Z+20, r1	; 0x14
    b494:	15 8a       	std	Z+21, r1	; 0x15
    b496:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b498:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b49a:	14 8e       	std	Z+28, r1	; 0x1c
    b49c:	15 8e       	std	Z+29, r1	; 0x1d
    b49e:	16 8e       	std	Z+30, r1	; 0x1e
    b4a0:	17 8e       	std	Z+31, r1	; 0x1f
    b4a2:	81 e0       	ldi	r24, 0x01	; 1
    b4a4:	fd 01       	movw	r30, r26
    b4a6:	83 83       	std	Z+3, r24	; 0x03
    b4a8:	41 14       	cp	r4, r1
    b4aa:	51 04       	cpc	r5, r1
    b4ac:	61 04       	cpc	r6, r1
    b4ae:	71 04       	cpc	r7, r1
    b4b0:	c9 f1       	breq	.+114    	; 0xb524 <f_open+0x17c>
    b4b2:	21 a9       	ldd	r18, Z+49	; 0x31
    b4b4:	32 a9       	ldd	r19, Z+50	; 0x32
    b4b6:	43 a9       	ldd	r20, Z+51	; 0x33
    b4b8:	54 a9       	ldd	r21, Z+52	; 0x34
    b4ba:	2b ab       	std	Y+51, r18	; 0x33
    b4bc:	3c ab       	std	Y+52, r19	; 0x34
    b4be:	4d ab       	std	Y+53, r20	; 0x35
    b4c0:	5e ab       	std	Y+54, r21	; 0x36
    b4c2:	00 e0       	ldi	r16, 0x00	; 0
    b4c4:	10 e0       	ldi	r17, 0x00	; 0
    b4c6:	98 01       	movw	r18, r16
    b4c8:	b3 01       	movw	r22, r6
    b4ca:	a2 01       	movw	r20, r4
    b4cc:	ce 01       	movw	r24, r28
    b4ce:	01 96       	adiw	r24, 0x01	; 1
    b4d0:	0e 94 fd 51 	call	0xa3fa	; 0xa3fa <remove_chain>
    b4d4:	8c 01       	movw	r16, r24
    b4d6:	89 2b       	or	r24, r25
    b4d8:	09 f0       	breq	.+2      	; 0xb4dc <f_open+0x134>
    b4da:	16 c1       	rjmp	.+556    	; 0xb708 <f_open+0x360>
    b4dc:	4b a9       	ldd	r20, Y+51	; 0x33
    b4de:	5c a9       	ldd	r21, Y+52	; 0x34
    b4e0:	6d a9       	ldd	r22, Y+53	; 0x35
    b4e2:	7e a9       	ldd	r23, Y+54	; 0x36
    b4e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    b4e6:	98 a9       	ldd	r25, Y+48	; 0x30
    b4e8:	0e 94 94 4b 	call	0x9728	; 0x9728 <move_window>
    b4ec:	8c 01       	movw	r16, r24
    b4ee:	ef a5       	ldd	r30, Y+47	; 0x2f
    b4f0:	f8 a9       	ldd	r31, Y+48	; 0x30
    b4f2:	21 e0       	ldi	r18, 0x01	; 1
    b4f4:	42 1a       	sub	r4, r18
    b4f6:	51 08       	sbc	r5, r1
    b4f8:	61 08       	sbc	r6, r1
    b4fa:	71 08       	sbc	r7, r1
    b4fc:	45 86       	std	Z+13, r4	; 0x0d
    b4fe:	56 86       	std	Z+14, r5	; 0x0e
    b500:	67 86       	std	Z+15, r6	; 0x0f
    b502:	70 8a       	std	Z+16, r7	; 0x10
    b504:	89 2b       	or	r24, r25
    b506:	61 f0       	breq	.+24     	; 0xb520 <f_open+0x178>
    b508:	ff c0       	rjmp	.+510    	; 0xb708 <f_open+0x360>
    b50a:	01 15       	cp	r16, r1
    b50c:	11 05       	cpc	r17, r1
    b50e:	09 f0       	breq	.+2      	; 0xb512 <f_open+0x16a>
    b510:	fb c0       	rjmp	.+502    	; 0xb708 <f_open+0x360>
    b512:	8d 81       	ldd	r24, Y+5	; 0x05
    b514:	84 fd       	sbrc	r24, 4
    b516:	f3 c0       	rjmp	.+486    	; 0xb6fe <f_open+0x356>
    b518:	71 fe       	sbrs	r7, 1
    b51a:	02 c0       	rjmp	.+4      	; 0xb520 <f_open+0x178>
    b51c:	80 fd       	sbrc	r24, 0
    b51e:	f2 c0       	rjmp	.+484    	; 0xb704 <f_open+0x35c>
    b520:	33 fe       	sbrs	r3, 3
    b522:	03 c0       	rjmp	.+6      	; 0xb52a <f_open+0x182>
    b524:	33 2d       	mov	r19, r3
    b526:	30 64       	ori	r19, 0x40	; 64
    b528:	33 2e       	mov	r3, r19
    b52a:	0f a5       	ldd	r16, Y+47	; 0x2f
    b52c:	18 a9       	ldd	r17, Y+48	; 0x30
    b52e:	f8 01       	movw	r30, r16
    b530:	81 a9       	ldd	r24, Z+49	; 0x31
    b532:	92 a9       	ldd	r25, Z+50	; 0x32
    b534:	a3 a9       	ldd	r26, Z+51	; 0x33
    b536:	b4 a9       	ldd	r27, Z+52	; 0x34
    b538:	f7 01       	movw	r30, r14
    b53a:	84 8f       	std	Z+28, r24	; 0x1c
    b53c:	95 8f       	std	Z+29, r25	; 0x1d
    b53e:	a6 8f       	std	Z+30, r26	; 0x1e
    b540:	b7 8f       	std	Z+31, r27	; 0x1f
    b542:	6b 8c       	ldd	r6, Y+27	; 0x1b
    b544:	7c 8c       	ldd	r7, Y+28	; 0x1c
    b546:	71 a2       	std	Z+33, r7	; 0x21
    b548:	60 a2       	std	Z+32, r6	; 0x20
    b54a:	b3 01       	movw	r22, r6
    b54c:	f8 01       	movw	r30, r16
    b54e:	80 81       	ld	r24, Z
    b550:	0e 94 05 4a 	call	0x940a	; 0x940a <ld_clust.isra.3>
    b554:	f7 01       	movw	r30, r14
    b556:	66 83       	std	Z+6, r22	; 0x06
    b558:	77 83       	std	Z+7, r23	; 0x07
    b55a:	80 87       	std	Z+8, r24	; 0x08
    b55c:	91 87       	std	Z+9, r25	; 0x09
    b55e:	c3 01       	movw	r24, r6
    b560:	4c 96       	adiw	r24, 0x1c	; 28
    b562:	0e 94 d2 47 	call	0x8fa4	; 0x8fa4 <ld_dword>
    b566:	f7 01       	movw	r30, r14
    b568:	62 87       	std	Z+10, r22	; 0x0a
    b56a:	73 87       	std	Z+11, r23	; 0x0b
    b56c:	84 87       	std	Z+12, r24	; 0x0c
    b56e:	95 87       	std	Z+13, r25	; 0x0d
    b570:	13 a2       	std	Z+35, r1	; 0x23
    b572:	12 a2       	std	Z+34, r1	; 0x22
    b574:	11 83       	std	Z+1, r17	; 0x01
    b576:	00 83       	st	Z, r16
    b578:	f8 01       	movw	r30, r16
    b57a:	85 81       	ldd	r24, Z+5	; 0x05
    b57c:	96 81       	ldd	r25, Z+6	; 0x06
    b57e:	f7 01       	movw	r30, r14
    b580:	93 83       	std	Z+3, r25	; 0x03
    b582:	82 83       	std	Z+2, r24	; 0x02
    b584:	36 86       	std	Z+14, r3	; 0x0e
    b586:	17 86       	std	Z+15, r1	; 0x0f
    b588:	10 8e       	std	Z+24, r1	; 0x18
    b58a:	11 8e       	std	Z+25, r1	; 0x19
    b58c:	12 8e       	std	Z+26, r1	; 0x1a
    b58e:	13 8e       	std	Z+27, r1	; 0x1b
    b590:	10 8a       	std	Z+16, r1	; 0x10
    b592:	11 8a       	std	Z+17, r1	; 0x11
    b594:	12 8a       	std	Z+18, r1	; 0x12
    b596:	13 8a       	std	Z+19, r1	; 0x13
    b598:	67 01       	movw	r12, r14
    b59a:	f4 e2       	ldi	r31, 0x24	; 36
    b59c:	cf 0e       	add	r12, r31
    b59e:	d1 1c       	adc	r13, r1
    b5a0:	40 e0       	ldi	r20, 0x00	; 0
    b5a2:	52 e0       	ldi	r21, 0x02	; 2
    b5a4:	60 e0       	ldi	r22, 0x00	; 0
    b5a6:	70 e0       	ldi	r23, 0x00	; 0
    b5a8:	c6 01       	movw	r24, r12
    b5aa:	0e 94 ed 47 	call	0x8fda	; 0x8fda <mem_set>
    b5ae:	35 fc       	sbrc	r3, 5
    b5b0:	03 c0       	rjmp	.+6      	; 0xb5b8 <f_open+0x210>
    b5b2:	00 e0       	ldi	r16, 0x00	; 0
    b5b4:	10 e0       	ldi	r17, 0x00	; 0
    b5b6:	89 c0       	rjmp	.+274    	; 0xb6ca <f_open+0x322>
    b5b8:	f7 01       	movw	r30, r14
    b5ba:	62 84       	ldd	r6, Z+10	; 0x0a
    b5bc:	73 84       	ldd	r7, Z+11	; 0x0b
    b5be:	84 84       	ldd	r8, Z+12	; 0x0c
    b5c0:	95 84       	ldd	r9, Z+13	; 0x0d
    b5c2:	61 14       	cp	r6, r1
    b5c4:	71 04       	cpc	r7, r1
    b5c6:	81 04       	cpc	r8, r1
    b5c8:	91 04       	cpc	r9, r1
    b5ca:	99 f3       	breq	.-26     	; 0xb5b2 <f_open+0x20a>
    b5cc:	60 8a       	std	Z+16, r6	; 0x10
    b5ce:	71 8a       	std	Z+17, r7	; 0x11
    b5d0:	82 8a       	std	Z+18, r8	; 0x12
    b5d2:	93 8a       	std	Z+19, r9	; 0x13
    b5d4:	ef a5       	ldd	r30, Y+47	; 0x2f
    b5d6:	f8 a9       	ldd	r31, Y+48	; 0x30
    b5d8:	21 84       	ldd	r2, Z+9	; 0x09
    b5da:	32 84       	ldd	r3, Z+10	; 0x0a
    b5dc:	c1 01       	movw	r24, r2
    b5de:	a0 e0       	ldi	r26, 0x00	; 0
    b5e0:	b0 e0       	ldi	r27, 0x00	; 0
    b5e2:	1c 01       	movw	r2, r24
    b5e4:	2d 01       	movw	r4, r26
    b5e6:	59 e0       	ldi	r21, 0x09	; 9
    b5e8:	22 0c       	add	r2, r2
    b5ea:	33 1c       	adc	r3, r3
    b5ec:	44 1c       	adc	r4, r4
    b5ee:	55 1c       	adc	r5, r5
    b5f0:	5a 95       	dec	r21
    b5f2:	d1 f7       	brne	.-12     	; 0xb5e8 <f_open+0x240>
    b5f4:	f7 01       	movw	r30, r14
    b5f6:	46 81       	ldd	r20, Z+6	; 0x06
    b5f8:	57 81       	ldd	r21, Z+7	; 0x07
    b5fa:	60 85       	ldd	r22, Z+8	; 0x08
    b5fc:	71 85       	ldd	r23, Z+9	; 0x09
    b5fe:	26 14       	cp	r2, r6
    b600:	37 04       	cpc	r3, r7
    b602:	48 04       	cpc	r4, r8
    b604:	59 04       	cpc	r5, r9
    b606:	f0 f4       	brcc	.+60     	; 0xb644 <f_open+0x29c>
    b608:	f7 01       	movw	r30, r14
    b60a:	80 81       	ld	r24, Z
    b60c:	91 81       	ldd	r25, Z+1	; 0x01
    b60e:	0e 94 62 4f 	call	0x9ec4	; 0x9ec4 <get_fat.isra.9>
    b612:	ab 01       	movw	r20, r22
    b614:	bc 01       	movw	r22, r24
    b616:	d4 01       	movw	r26, r8
    b618:	c3 01       	movw	r24, r6
    b61a:	82 19       	sub	r24, r2
    b61c:	93 09       	sbc	r25, r3
    b61e:	a4 09       	sbc	r26, r4
    b620:	b5 09       	sbc	r27, r5
    b622:	3c 01       	movw	r6, r24
    b624:	4d 01       	movw	r8, r26
    b626:	42 30       	cpi	r20, 0x02	; 2
    b628:	51 05       	cpc	r21, r1
    b62a:	61 05       	cpc	r22, r1
    b62c:	71 05       	cpc	r23, r1
    b62e:	08 f4       	brcc	.+2      	; 0xb632 <f_open+0x28a>
    b630:	63 c0       	rjmp	.+198    	; 0xb6f8 <f_open+0x350>
    b632:	4f 3f       	cpi	r20, 0xFF	; 255
    b634:	ff ef       	ldi	r31, 0xFF	; 255
    b636:	5f 07       	cpc	r21, r31
    b638:	6f 07       	cpc	r22, r31
    b63a:	7f 07       	cpc	r23, r31
    b63c:	01 f7       	brne	.-64     	; 0xb5fe <f_open+0x256>
    b63e:	01 e0       	ldi	r16, 0x01	; 1
    b640:	10 e0       	ldi	r17, 0x00	; 0
    b642:	02 c0       	rjmp	.+4      	; 0xb648 <f_open+0x2a0>
    b644:	00 e0       	ldi	r16, 0x00	; 0
    b646:	10 e0       	ldi	r17, 0x00	; 0
    b648:	f7 01       	movw	r30, r14
    b64a:	44 8b       	std	Z+20, r20	; 0x14
    b64c:	55 8b       	std	Z+21, r21	; 0x15
    b64e:	66 8b       	std	Z+22, r22	; 0x16
    b650:	77 8b       	std	Z+23, r23	; 0x17
    b652:	01 15       	cp	r16, r1
    b654:	11 05       	cpc	r17, r1
    b656:	c9 f5       	brne	.+114    	; 0xb6ca <f_open+0x322>
    b658:	d4 01       	movw	r26, r8
    b65a:	c3 01       	movw	r24, r6
    b65c:	91 70       	andi	r25, 0x01	; 1
    b65e:	aa 27       	eor	r26, r26
    b660:	bb 27       	eor	r27, r27
    b662:	89 2b       	or	r24, r25
    b664:	8a 2b       	or	r24, r26
    b666:	8b 2b       	or	r24, r27
    b668:	09 f4       	brne	.+2      	; 0xb66c <f_open+0x2c4>
    b66a:	a3 cf       	rjmp	.-186    	; 0xb5b2 <f_open+0x20a>
    b66c:	4f a4       	ldd	r4, Y+47	; 0x2f
    b66e:	58 a8       	ldd	r5, Y+48	; 0x30
    b670:	c2 01       	movw	r24, r4
    b672:	0e 94 05 48 	call	0x900a	; 0x900a <clst2sect>
    b676:	61 15       	cp	r22, r1
    b678:	71 05       	cpc	r23, r1
    b67a:	81 05       	cpc	r24, r1
    b67c:	91 05       	cpc	r25, r1
    b67e:	19 f1       	breq	.+70     	; 0xb6c6 <f_open+0x31e>
    b680:	94 01       	movw	r18, r8
    b682:	83 01       	movw	r16, r6
    b684:	49 e0       	ldi	r20, 0x09	; 9
    b686:	36 95       	lsr	r19
    b688:	27 95       	ror	r18
    b68a:	17 95       	ror	r17
    b68c:	07 95       	ror	r16
    b68e:	4a 95       	dec	r20
    b690:	d1 f7       	brne	.-12     	; 0xb686 <f_open+0x2de>
    b692:	a9 01       	movw	r20, r18
    b694:	98 01       	movw	r18, r16
    b696:	26 0f       	add	r18, r22
    b698:	37 1f       	adc	r19, r23
    b69a:	48 1f       	adc	r20, r24
    b69c:	59 1f       	adc	r21, r25
    b69e:	f7 01       	movw	r30, r14
    b6a0:	20 8f       	std	Z+24, r18	; 0x18
    b6a2:	31 8f       	std	Z+25, r19	; 0x19
    b6a4:	42 8f       	std	Z+26, r20	; 0x1a
    b6a6:	53 8f       	std	Z+27, r21	; 0x1b
    b6a8:	01 e0       	ldi	r16, 0x01	; 1
    b6aa:	10 e0       	ldi	r17, 0x00	; 0
    b6ac:	b6 01       	movw	r22, r12
    b6ae:	f2 01       	movw	r30, r4
    b6b0:	81 81       	ldd	r24, Z+1	; 0x01
    b6b2:	0e 94 c6 69 	call	0xd38c	; 0xd38c <disk_read>
    b6b6:	31 e0       	ldi	r19, 0x01	; 1
    b6b8:	20 e0       	ldi	r18, 0x00	; 0
    b6ba:	89 2b       	or	r24, r25
    b6bc:	09 f4       	brne	.+2      	; 0xb6c0 <f_open+0x318>
    b6be:	30 e0       	ldi	r19, 0x00	; 0
    b6c0:	03 2f       	mov	r16, r19
    b6c2:	12 2f       	mov	r17, r18
    b6c4:	02 c0       	rjmp	.+4      	; 0xb6ca <f_open+0x322>
    b6c6:	02 e0       	ldi	r16, 0x02	; 2
    b6c8:	10 e0       	ldi	r17, 0x00	; 0
    b6ca:	c5 01       	movw	r24, r10
    b6cc:	0e 94 0d 69 	call	0xd21a	; 0xd21a <ff_memfree>
    b6d0:	01 15       	cp	r16, r1
    b6d2:	11 05       	cpc	r17, r1
    b6d4:	59 f0       	breq	.+22     	; 0xb6ec <f_open+0x344>
    b6d6:	01 c0       	rjmp	.+2      	; 0xb6da <f_open+0x332>
    b6d8:	8c 01       	movw	r16, r24
    b6da:	f7 01       	movw	r30, r14
    b6dc:	11 82       	std	Z+1, r1	; 0x01
    b6de:	10 82       	st	Z, r1
    b6e0:	c8 01       	movw	r24, r16
    b6e2:	16 c0       	rjmp	.+44     	; 0xb710 <f_open+0x368>
    b6e4:	89 e0       	ldi	r24, 0x09	; 9
    b6e6:	03 c0       	rjmp	.+6      	; 0xb6ee <f_open+0x346>
    b6e8:	81 e1       	ldi	r24, 0x11	; 17
    b6ea:	01 c0       	rjmp	.+2      	; 0xb6ee <f_open+0x346>
    b6ec:	80 e0       	ldi	r24, 0x00	; 0
    b6ee:	90 e0       	ldi	r25, 0x00	; 0
    b6f0:	0f c0       	rjmp	.+30     	; 0xb710 <f_open+0x368>
    b6f2:	08 e0       	ldi	r16, 0x08	; 8
    b6f4:	10 e0       	ldi	r17, 0x00	; 0
    b6f6:	08 c0       	rjmp	.+16     	; 0xb708 <f_open+0x360>
    b6f8:	02 e0       	ldi	r16, 0x02	; 2
    b6fa:	10 e0       	ldi	r17, 0x00	; 0
    b6fc:	a5 cf       	rjmp	.-182    	; 0xb648 <f_open+0x2a0>
    b6fe:	04 e0       	ldi	r16, 0x04	; 4
    b700:	10 e0       	ldi	r17, 0x00	; 0
    b702:	02 c0       	rjmp	.+4      	; 0xb708 <f_open+0x360>
    b704:	07 e0       	ldi	r16, 0x07	; 7
    b706:	10 e0       	ldi	r17, 0x00	; 0
    b708:	c5 01       	movw	r24, r10
    b70a:	0e 94 0d 69 	call	0xd21a	; 0xd21a <ff_memfree>
    b70e:	e5 cf       	rjmp	.-54     	; 0xb6da <f_open+0x332>
    b710:	e6 96       	adiw	r28, 0x36	; 54
    b712:	e2 e1       	ldi	r30, 0x12	; 18
    b714:	0c 94 29 e7 	jmp	0x1ce52	; 0x1ce52 <__epilogue_restores__>

0000b718 <f_read>:
    b718:	a6 e0       	ldi	r26, 0x06	; 6
    b71a:	b0 e0       	ldi	r27, 0x00	; 0
    b71c:	e2 e9       	ldi	r30, 0x92	; 146
    b71e:	fb e5       	ldi	r31, 0x5B	; 91
    b720:	0c 94 0d e7 	jmp	0x1ce1a	; 0x1ce1a <__prologue_saves__>
    b724:	7c 01       	movw	r14, r24
    b726:	4b 01       	movw	r8, r22
    b728:	5a 01       	movw	r10, r20
    b72a:	3e 83       	std	Y+6, r19	; 0x06
    b72c:	2d 83       	std	Y+5, r18	; 0x05
    b72e:	f9 01       	movw	r30, r18
    b730:	11 82       	std	Z+1, r1	; 0x01
    b732:	10 82       	st	Z, r1
    b734:	be 01       	movw	r22, r28
    b736:	6f 5f       	subi	r22, 0xFF	; 255
    b738:	7f 4f       	sbci	r23, 0xFF	; 255
    b73a:	0e 94 a4 48 	call	0x9148	; 0x9148 <validate>
    b73e:	00 97       	sbiw	r24, 0x00	; 0
    b740:	09 f0       	breq	.+2      	; 0xb744 <f_read+0x2c>
    b742:	31 c1       	rjmp	.+610    	; 0xb9a6 <f_read+0x28e>
    b744:	f7 01       	movw	r30, r14
    b746:	87 85       	ldd	r24, Z+15	; 0x0f
    b748:	90 e0       	ldi	r25, 0x00	; 0
    b74a:	00 97       	sbiw	r24, 0x00	; 0
    b74c:	09 f0       	breq	.+2      	; 0xb750 <f_read+0x38>
    b74e:	2b c1       	rjmp	.+598    	; 0xb9a6 <f_read+0x28e>
    b750:	86 85       	ldd	r24, Z+14	; 0x0e
    b752:	80 ff       	sbrs	r24, 0
    b754:	26 c1       	rjmp	.+588    	; 0xb9a2 <f_read+0x28a>
    b756:	82 85       	ldd	r24, Z+10	; 0x0a
    b758:	93 85       	ldd	r25, Z+11	; 0x0b
    b75a:	a4 85       	ldd	r26, Z+12	; 0x0c
    b75c:	b5 85       	ldd	r27, Z+13	; 0x0d
    b75e:	40 89       	ldd	r20, Z+16	; 0x10
    b760:	51 89       	ldd	r21, Z+17	; 0x11
    b762:	62 89       	ldd	r22, Z+18	; 0x12
    b764:	73 89       	ldd	r23, Z+19	; 0x13
    b766:	84 1b       	sub	r24, r20
    b768:	95 0b       	sbc	r25, r21
    b76a:	a6 0b       	sbc	r26, r22
    b76c:	b7 0b       	sbc	r27, r23
    b76e:	a5 01       	movw	r20, r10
    b770:	60 e0       	ldi	r22, 0x00	; 0
    b772:	70 e0       	ldi	r23, 0x00	; 0
    b774:	84 17       	cp	r24, r20
    b776:	95 07       	cpc	r25, r21
    b778:	a6 07       	cpc	r26, r22
    b77a:	b7 07       	cpc	r27, r23
    b77c:	08 f4       	brcc	.+2      	; 0xb780 <f_read+0x68>
    b77e:	5c 01       	movw	r10, r24
    b780:	17 01       	movw	r2, r14
    b782:	f4 e2       	ldi	r31, 0x24	; 36
    b784:	2f 0e       	add	r2, r31
    b786:	31 1c       	adc	r3, r1
    b788:	a1 14       	cp	r10, r1
    b78a:	b1 04       	cpc	r11, r1
    b78c:	09 f4       	brne	.+2      	; 0xb790 <f_read+0x78>
    b78e:	07 c1       	rjmp	.+526    	; 0xb99e <f_read+0x286>
    b790:	f7 01       	movw	r30, r14
    b792:	40 89       	ldd	r20, Z+16	; 0x10
    b794:	51 89       	ldd	r21, Z+17	; 0x11
    b796:	62 89       	ldd	r22, Z+18	; 0x12
    b798:	73 89       	ldd	r23, Z+19	; 0x13
    b79a:	db 01       	movw	r26, r22
    b79c:	ca 01       	movw	r24, r20
    b79e:	91 70       	andi	r25, 0x01	; 1
    b7a0:	aa 27       	eor	r26, r26
    b7a2:	bb 27       	eor	r27, r27
    b7a4:	89 2b       	or	r24, r25
    b7a6:	8a 2b       	or	r24, r26
    b7a8:	8b 2b       	or	r24, r27
    b7aa:	09 f0       	breq	.+2      	; 0xb7ae <f_read+0x96>
    b7ac:	cb c0       	rjmp	.+406    	; 0xb944 <f_read+0x22c>
    b7ae:	e9 81       	ldd	r30, Y+1	; 0x01
    b7b0:	fa 81       	ldd	r31, Y+2	; 0x02
    b7b2:	01 85       	ldd	r16, Z+9	; 0x09
    b7b4:	12 85       	ldd	r17, Z+10	; 0x0a
    b7b6:	01 50       	subi	r16, 0x01	; 1
    b7b8:	11 09       	sbc	r17, r1
    b7ba:	db 01       	movw	r26, r22
    b7bc:	ca 01       	movw	r24, r20
    b7be:	e9 e0       	ldi	r30, 0x09	; 9
    b7c0:	b6 95       	lsr	r27
    b7c2:	a7 95       	ror	r26
    b7c4:	97 95       	ror	r25
    b7c6:	87 95       	ror	r24
    b7c8:	ea 95       	dec	r30
    b7ca:	d1 f7       	brne	.-12     	; 0xb7c0 <f_read+0xa8>
    b7cc:	08 23       	and	r16, r24
    b7ce:	19 23       	and	r17, r25
    b7d0:	01 15       	cp	r16, r1
    b7d2:	11 05       	cpc	r17, r1
    b7d4:	91 f5       	brne	.+100    	; 0xb83a <f_read+0x122>
    b7d6:	f7 01       	movw	r30, r14
    b7d8:	41 15       	cp	r20, r1
    b7da:	51 05       	cpc	r21, r1
    b7dc:	61 05       	cpc	r22, r1
    b7de:	71 05       	cpc	r23, r1
    b7e0:	29 f4       	brne	.+10     	; 0xb7ec <f_read+0xd4>
    b7e2:	66 81       	ldd	r22, Z+6	; 0x06
    b7e4:	77 81       	ldd	r23, Z+7	; 0x07
    b7e6:	80 85       	ldd	r24, Z+8	; 0x08
    b7e8:	91 85       	ldd	r25, Z+9	; 0x09
    b7ea:	11 c0       	rjmp	.+34     	; 0xb80e <f_read+0xf6>
    b7ec:	82 a1       	ldd	r24, Z+34	; 0x22
    b7ee:	93 a1       	ldd	r25, Z+35	; 0x23
    b7f0:	89 2b       	or	r24, r25
    b7f2:	21 f0       	breq	.+8      	; 0xb7fc <f_read+0xe4>
    b7f4:	c7 01       	movw	r24, r14
    b7f6:	0e 94 2d 48 	call	0x905a	; 0x905a <clmt_clust>
    b7fa:	09 c0       	rjmp	.+18     	; 0xb80e <f_read+0xf6>
    b7fc:	f7 01       	movw	r30, r14
    b7fe:	44 89       	ldd	r20, Z+20	; 0x14
    b800:	55 89       	ldd	r21, Z+21	; 0x15
    b802:	66 89       	ldd	r22, Z+22	; 0x16
    b804:	77 89       	ldd	r23, Z+23	; 0x17
    b806:	80 81       	ld	r24, Z
    b808:	91 81       	ldd	r25, Z+1	; 0x01
    b80a:	0e 94 62 4f 	call	0x9ec4	; 0x9ec4 <get_fat.isra.9>
    b80e:	62 30       	cpi	r22, 0x02	; 2
    b810:	71 05       	cpc	r23, r1
    b812:	81 05       	cpc	r24, r1
    b814:	91 05       	cpc	r25, r1
    b816:	10 f4       	brcc	.+4      	; 0xb81c <f_read+0x104>
    b818:	82 e0       	ldi	r24, 0x02	; 2
    b81a:	07 c0       	rjmp	.+14     	; 0xb82a <f_read+0x112>
    b81c:	6f 3f       	cpi	r22, 0xFF	; 255
    b81e:	ff ef       	ldi	r31, 0xFF	; 255
    b820:	7f 07       	cpc	r23, r31
    b822:	8f 07       	cpc	r24, r31
    b824:	9f 07       	cpc	r25, r31
    b826:	21 f4       	brne	.+8      	; 0xb830 <f_read+0x118>
    b828:	81 e0       	ldi	r24, 0x01	; 1
    b82a:	f7 01       	movw	r30, r14
    b82c:	87 87       	std	Z+15, r24	; 0x0f
    b82e:	ba c0       	rjmp	.+372    	; 0xb9a4 <f_read+0x28c>
    b830:	f7 01       	movw	r30, r14
    b832:	64 8b       	std	Z+20, r22	; 0x14
    b834:	75 8b       	std	Z+21, r23	; 0x15
    b836:	86 8b       	std	Z+22, r24	; 0x16
    b838:	97 8b       	std	Z+23, r25	; 0x17
    b83a:	89 81       	ldd	r24, Y+1	; 0x01
    b83c:	9a 81       	ldd	r25, Y+2	; 0x02
    b83e:	9c 83       	std	Y+4, r25	; 0x04
    b840:	8b 83       	std	Y+3, r24	; 0x03
    b842:	f7 01       	movw	r30, r14
    b844:	44 89       	ldd	r20, Z+20	; 0x14
    b846:	55 89       	ldd	r21, Z+21	; 0x15
    b848:	66 89       	ldd	r22, Z+22	; 0x16
    b84a:	77 89       	ldd	r23, Z+23	; 0x17
    b84c:	0e 94 05 48 	call	0x900a	; 0x900a <clst2sect>
    b850:	61 15       	cp	r22, r1
    b852:	71 05       	cpc	r23, r1
    b854:	81 05       	cpc	r24, r1
    b856:	91 05       	cpc	r25, r1
    b858:	f9 f2       	breq	.-66     	; 0xb818 <f_read+0x100>
    b85a:	2b 01       	movw	r4, r22
    b85c:	3c 01       	movw	r6, r24
    b85e:	40 0e       	add	r4, r16
    b860:	51 1e       	adc	r5, r17
    b862:	61 1c       	adc	r6, r1
    b864:	71 1c       	adc	r7, r1
    b866:	65 01       	movw	r12, r10
    b868:	cd 2c       	mov	r12, r13
    b86a:	dd 24       	eor	r13, r13
    b86c:	c6 94       	lsr	r12
    b86e:	c1 14       	cp	r12, r1
    b870:	d1 04       	cpc	r13, r1
    b872:	d1 f1       	breq	.+116    	; 0xb8e8 <f_read+0x1d0>
    b874:	eb 81       	ldd	r30, Y+3	; 0x03
    b876:	fc 81       	ldd	r31, Y+4	; 0x04
    b878:	81 85       	ldd	r24, Z+9	; 0x09
    b87a:	92 85       	ldd	r25, Z+10	; 0x0a
    b87c:	98 01       	movw	r18, r16
    b87e:	2c 0d       	add	r18, r12
    b880:	3d 1d       	adc	r19, r13
    b882:	82 17       	cp	r24, r18
    b884:	93 07       	cpc	r25, r19
    b886:	18 f4       	brcc	.+6      	; 0xb88e <f_read+0x176>
    b888:	6c 01       	movw	r12, r24
    b88a:	c0 1a       	sub	r12, r16
    b88c:	d1 0a       	sbc	r13, r17
    b88e:	86 01       	movw	r16, r12
    b890:	a3 01       	movw	r20, r6
    b892:	92 01       	movw	r18, r4
    b894:	b4 01       	movw	r22, r8
    b896:	eb 81       	ldd	r30, Y+3	; 0x03
    b898:	fc 81       	ldd	r31, Y+4	; 0x04
    b89a:	81 81       	ldd	r24, Z+1	; 0x01
    b89c:	0e 94 c6 69 	call	0xd38c	; 0xd38c <disk_read>
    b8a0:	89 2b       	or	r24, r25
    b8a2:	11 f6       	brne	.-124    	; 0xb828 <f_read+0x110>
    b8a4:	f7 01       	movw	r30, r14
    b8a6:	86 85       	ldd	r24, Z+14	; 0x0e
    b8a8:	87 ff       	sbrs	r24, 7
    b8aa:	1a c0       	rjmp	.+52     	; 0xb8e0 <f_read+0x1c8>
    b8ac:	80 8d       	ldd	r24, Z+24	; 0x18
    b8ae:	91 8d       	ldd	r25, Z+25	; 0x19
    b8b0:	a2 8d       	ldd	r26, Z+26	; 0x1a
    b8b2:	b3 8d       	ldd	r27, Z+27	; 0x1b
    b8b4:	84 19       	sub	r24, r4
    b8b6:	95 09       	sbc	r25, r5
    b8b8:	a6 09       	sbc	r26, r6
    b8ba:	b7 09       	sbc	r27, r7
    b8bc:	a6 01       	movw	r20, r12
    b8be:	60 e0       	ldi	r22, 0x00	; 0
    b8c0:	70 e0       	ldi	r23, 0x00	; 0
    b8c2:	84 17       	cp	r24, r20
    b8c4:	95 07       	cpc	r25, r21
    b8c6:	a6 07       	cpc	r26, r22
    b8c8:	b7 07       	cpc	r27, r23
    b8ca:	50 f4       	brcc	.+20     	; 0xb8e0 <f_read+0x1c8>
    b8cc:	98 2f       	mov	r25, r24
    b8ce:	88 27       	eor	r24, r24
    b8d0:	99 0f       	add	r25, r25
    b8d2:	40 e0       	ldi	r20, 0x00	; 0
    b8d4:	52 e0       	ldi	r21, 0x02	; 2
    b8d6:	b1 01       	movw	r22, r2
    b8d8:	88 0d       	add	r24, r8
    b8da:	99 1d       	adc	r25, r9
    b8dc:	0e 94 fa 49 	call	0x93f4	; 0x93f4 <mem_cpy.part.0>
    b8e0:	dc 2c       	mov	r13, r12
    b8e2:	cc 24       	eor	r12, r12
    b8e4:	dd 0c       	add	r13, r13
    b8e6:	41 c0       	rjmp	.+130    	; 0xb96a <f_read+0x252>
    b8e8:	f7 01       	movw	r30, r14
    b8ea:	20 8d       	ldd	r18, Z+24	; 0x18
    b8ec:	31 8d       	ldd	r19, Z+25	; 0x19
    b8ee:	42 8d       	ldd	r20, Z+26	; 0x1a
    b8f0:	53 8d       	ldd	r21, Z+27	; 0x1b
    b8f2:	42 16       	cp	r4, r18
    b8f4:	53 06       	cpc	r5, r19
    b8f6:	64 06       	cpc	r6, r20
    b8f8:	75 06       	cpc	r7, r21
    b8fa:	f9 f0       	breq	.+62     	; 0xb93a <f_read+0x222>
    b8fc:	86 85       	ldd	r24, Z+14	; 0x0e
    b8fe:	87 ff       	sbrs	r24, 7
    b900:	0f c0       	rjmp	.+30     	; 0xb920 <f_read+0x208>
    b902:	01 e0       	ldi	r16, 0x01	; 1
    b904:	10 e0       	ldi	r17, 0x00	; 0
    b906:	b1 01       	movw	r22, r2
    b908:	eb 81       	ldd	r30, Y+3	; 0x03
    b90a:	fc 81       	ldd	r31, Y+4	; 0x04
    b90c:	81 81       	ldd	r24, Z+1	; 0x01
    b90e:	0e 94 d6 69 	call	0xd3ac	; 0xd3ac <disk_write>
    b912:	89 2b       	or	r24, r25
    b914:	09 f0       	breq	.+2      	; 0xb918 <f_read+0x200>
    b916:	88 cf       	rjmp	.-240    	; 0xb828 <f_read+0x110>
    b918:	f7 01       	movw	r30, r14
    b91a:	86 85       	ldd	r24, Z+14	; 0x0e
    b91c:	8f 77       	andi	r24, 0x7F	; 127
    b91e:	86 87       	std	Z+14, r24	; 0x0e
    b920:	e9 81       	ldd	r30, Y+1	; 0x01
    b922:	fa 81       	ldd	r31, Y+2	; 0x02
    b924:	01 e0       	ldi	r16, 0x01	; 1
    b926:	10 e0       	ldi	r17, 0x00	; 0
    b928:	a3 01       	movw	r20, r6
    b92a:	92 01       	movw	r18, r4
    b92c:	b1 01       	movw	r22, r2
    b92e:	81 81       	ldd	r24, Z+1	; 0x01
    b930:	0e 94 c6 69 	call	0xd38c	; 0xd38c <disk_read>
    b934:	89 2b       	or	r24, r25
    b936:	09 f0       	breq	.+2      	; 0xb93a <f_read+0x222>
    b938:	77 cf       	rjmp	.-274    	; 0xb828 <f_read+0x110>
    b93a:	f7 01       	movw	r30, r14
    b93c:	40 8e       	std	Z+24, r4	; 0x18
    b93e:	51 8e       	std	Z+25, r5	; 0x19
    b940:	62 8e       	std	Z+26, r6	; 0x1a
    b942:	73 8e       	std	Z+27, r7	; 0x1b
    b944:	f7 01       	movw	r30, r14
    b946:	60 89       	ldd	r22, Z+16	; 0x10
    b948:	71 89       	ldd	r23, Z+17	; 0x11
    b94a:	71 70       	andi	r23, 0x01	; 1
    b94c:	80 e0       	ldi	r24, 0x00	; 0
    b94e:	92 e0       	ldi	r25, 0x02	; 2
    b950:	86 1b       	sub	r24, r22
    b952:	97 0b       	sbc	r25, r23
    b954:	65 01       	movw	r12, r10
    b956:	8a 15       	cp	r24, r10
    b958:	9b 05       	cpc	r25, r11
    b95a:	08 f4       	brcc	.+2      	; 0xb95e <f_read+0x246>
    b95c:	6c 01       	movw	r12, r24
    b95e:	62 0d       	add	r22, r2
    b960:	73 1d       	adc	r23, r3
    b962:	a6 01       	movw	r20, r12
    b964:	c4 01       	movw	r24, r8
    b966:	0e 94 fa 49 	call	0x93f4	; 0x93f4 <mem_cpy.part.0>
    b96a:	ac 18       	sub	r10, r12
    b96c:	bd 08       	sbc	r11, r13
    b96e:	ed 81       	ldd	r30, Y+5	; 0x05
    b970:	fe 81       	ldd	r31, Y+6	; 0x06
    b972:	80 81       	ld	r24, Z
    b974:	91 81       	ldd	r25, Z+1	; 0x01
    b976:	8c 0d       	add	r24, r12
    b978:	9d 1d       	adc	r25, r13
    b97a:	91 83       	std	Z+1, r25	; 0x01
    b97c:	80 83       	st	Z, r24
    b97e:	8c 0c       	add	r8, r12
    b980:	9d 1c       	adc	r9, r13
    b982:	f7 01       	movw	r30, r14
    b984:	80 89       	ldd	r24, Z+16	; 0x10
    b986:	91 89       	ldd	r25, Z+17	; 0x11
    b988:	a2 89       	ldd	r26, Z+18	; 0x12
    b98a:	b3 89       	ldd	r27, Z+19	; 0x13
    b98c:	8c 0d       	add	r24, r12
    b98e:	9d 1d       	adc	r25, r13
    b990:	a1 1d       	adc	r26, r1
    b992:	b1 1d       	adc	r27, r1
    b994:	80 8b       	std	Z+16, r24	; 0x10
    b996:	91 8b       	std	Z+17, r25	; 0x11
    b998:	a2 8b       	std	Z+18, r26	; 0x12
    b99a:	b3 8b       	std	Z+19, r27	; 0x13
    b99c:	f5 ce       	rjmp	.-534    	; 0xb788 <f_read+0x70>
    b99e:	80 e0       	ldi	r24, 0x00	; 0
    b9a0:	01 c0       	rjmp	.+2      	; 0xb9a4 <f_read+0x28c>
    b9a2:	87 e0       	ldi	r24, 0x07	; 7
    b9a4:	90 e0       	ldi	r25, 0x00	; 0
    b9a6:	26 96       	adiw	r28, 0x06	; 6
    b9a8:	e2 e1       	ldi	r30, 0x12	; 18
    b9aa:	0c 94 29 e7 	jmp	0x1ce52	; 0x1ce52 <__epilogue_restores__>

0000b9ae <f_write>:
    b9ae:	a8 e0       	ldi	r26, 0x08	; 8
    b9b0:	b0 e0       	ldi	r27, 0x00	; 0
    b9b2:	ed ed       	ldi	r30, 0xDD	; 221
    b9b4:	fc e5       	ldi	r31, 0x5C	; 92
    b9b6:	0c 94 0d e7 	jmp	0x1ce1a	; 0x1ce1a <__prologue_saves__>
    b9ba:	7c 01       	movw	r14, r24
    b9bc:	3b 01       	movw	r6, r22
    b9be:	5a 01       	movw	r10, r20
    b9c0:	38 87       	std	Y+8, r19	; 0x08
    b9c2:	2f 83       	std	Y+7, r18	; 0x07
    b9c4:	f9 01       	movw	r30, r18
    b9c6:	11 82       	std	Z+1, r1	; 0x01
    b9c8:	10 82       	st	Z, r1
    b9ca:	be 01       	movw	r22, r28
    b9cc:	6f 5f       	subi	r22, 0xFF	; 255
    b9ce:	7f 4f       	sbci	r23, 0xFF	; 255
    b9d0:	0e 94 a4 48 	call	0x9148	; 0x9148 <validate>
    b9d4:	00 97       	sbiw	r24, 0x00	; 0
    b9d6:	09 f0       	breq	.+2      	; 0xb9da <f_write+0x2c>
    b9d8:	7d c1       	rjmp	.+762    	; 0xbcd4 <f_write+0x326>
    b9da:	f7 01       	movw	r30, r14
    b9dc:	87 85       	ldd	r24, Z+15	; 0x0f
    b9de:	90 e0       	ldi	r25, 0x00	; 0
    b9e0:	00 97       	sbiw	r24, 0x00	; 0
    b9e2:	09 f0       	breq	.+2      	; 0xb9e6 <f_write+0x38>
    b9e4:	77 c1       	rjmp	.+750    	; 0xbcd4 <f_write+0x326>
    b9e6:	86 85       	ldd	r24, Z+14	; 0x0e
    b9e8:	81 ff       	sbrs	r24, 1
    b9ea:	72 c1       	rjmp	.+740    	; 0xbcd0 <f_write+0x322>
    b9ec:	80 89       	ldd	r24, Z+16	; 0x10
    b9ee:	91 89       	ldd	r25, Z+17	; 0x11
    b9f0:	a2 89       	ldd	r26, Z+18	; 0x12
    b9f2:	b3 89       	ldd	r27, Z+19	; 0x13
    b9f4:	ac 01       	movw	r20, r24
    b9f6:	bd 01       	movw	r22, r26
    b9f8:	4a 0d       	add	r20, r10
    b9fa:	5b 1d       	adc	r21, r11
    b9fc:	61 1d       	adc	r22, r1
    b9fe:	71 1d       	adc	r23, r1
    ba00:	48 17       	cp	r20, r24
    ba02:	59 07       	cpc	r21, r25
    ba04:	6a 07       	cpc	r22, r26
    ba06:	7b 07       	cpc	r23, r27
    ba08:	18 f4       	brcc	.+6      	; 0xba10 <f_write+0x62>
    ba0a:	5c 01       	movw	r10, r24
    ba0c:	a0 94       	com	r10
    ba0e:	b0 94       	com	r11
    ba10:	97 01       	movw	r18, r14
    ba12:	2c 5d       	subi	r18, 0xDC	; 220
    ba14:	3f 4f       	sbci	r19, 0xFF	; 255
    ba16:	3e 83       	std	Y+6, r19	; 0x06
    ba18:	2d 83       	std	Y+5, r18	; 0x05
    ba1a:	a1 14       	cp	r10, r1
    ba1c:	b1 04       	cpc	r11, r1
    ba1e:	09 f4       	brne	.+2      	; 0xba22 <f_write+0x74>
    ba20:	4d c0       	rjmp	.+154    	; 0xbabc <f_write+0x10e>
    ba22:	f7 01       	movw	r30, r14
    ba24:	40 89       	ldd	r20, Z+16	; 0x10
    ba26:	51 89       	ldd	r21, Z+17	; 0x11
    ba28:	62 89       	ldd	r22, Z+18	; 0x12
    ba2a:	73 89       	ldd	r23, Z+19	; 0x13
    ba2c:	db 01       	movw	r26, r22
    ba2e:	ca 01       	movw	r24, r20
    ba30:	91 70       	andi	r25, 0x01	; 1
    ba32:	aa 27       	eor	r26, r26
    ba34:	bb 27       	eor	r27, r27
    ba36:	89 2b       	or	r24, r25
    ba38:	8a 2b       	or	r24, r26
    ba3a:	8b 2b       	or	r24, r27
    ba3c:	09 f0       	breq	.+2      	; 0xba40 <f_write+0x92>
    ba3e:	05 c1       	rjmp	.+522    	; 0xbc4a <f_write+0x29c>
    ba40:	e9 81       	ldd	r30, Y+1	; 0x01
    ba42:	fa 81       	ldd	r31, Y+2	; 0x02
    ba44:	81 84       	ldd	r8, Z+9	; 0x09
    ba46:	92 84       	ldd	r9, Z+10	; 0x0a
    ba48:	f1 e0       	ldi	r31, 0x01	; 1
    ba4a:	8f 1a       	sub	r8, r31
    ba4c:	91 08       	sbc	r9, r1
    ba4e:	db 01       	movw	r26, r22
    ba50:	ca 01       	movw	r24, r20
    ba52:	e9 e0       	ldi	r30, 0x09	; 9
    ba54:	b6 95       	lsr	r27
    ba56:	a7 95       	ror	r26
    ba58:	97 95       	ror	r25
    ba5a:	87 95       	ror	r24
    ba5c:	ea 95       	dec	r30
    ba5e:	d1 f7       	brne	.-12     	; 0xba54 <f_write+0xa6>
    ba60:	88 22       	and	r8, r24
    ba62:	99 22       	and	r9, r25
    ba64:	81 14       	cp	r8, r1
    ba66:	91 04       	cpc	r9, r1
    ba68:	09 f0       	breq	.+2      	; 0xba6c <f_write+0xbe>
    ba6a:	51 c0       	rjmp	.+162    	; 0xbb0e <f_write+0x160>
    ba6c:	f7 01       	movw	r30, r14
    ba6e:	41 15       	cp	r20, r1
    ba70:	51 05       	cpc	r21, r1
    ba72:	61 05       	cpc	r22, r1
    ba74:	71 05       	cpc	r23, r1
    ba76:	69 f4       	brne	.+26     	; 0xba92 <f_write+0xe4>
    ba78:	66 81       	ldd	r22, Z+6	; 0x06
    ba7a:	77 81       	ldd	r23, Z+7	; 0x07
    ba7c:	80 85       	ldd	r24, Z+8	; 0x08
    ba7e:	91 85       	ldd	r25, Z+9	; 0x09
    ba80:	61 15       	cp	r22, r1
    ba82:	71 05       	cpc	r23, r1
    ba84:	81 05       	cpc	r24, r1
    ba86:	91 05       	cpc	r25, r1
    ba88:	f9 f4       	brne	.+62     	; 0xbac8 <f_write+0x11a>
    ba8a:	40 e0       	ldi	r20, 0x00	; 0
    ba8c:	50 e0       	ldi	r21, 0x00	; 0
    ba8e:	ba 01       	movw	r22, r20
    ba90:	0d c0       	rjmp	.+26     	; 0xbaac <f_write+0xfe>
    ba92:	82 a1       	ldd	r24, Z+34	; 0x22
    ba94:	93 a1       	ldd	r25, Z+35	; 0x23
    ba96:	89 2b       	or	r24, r25
    ba98:	21 f0       	breq	.+8      	; 0xbaa2 <f_write+0xf4>
    ba9a:	c7 01       	movw	r24, r14
    ba9c:	0e 94 2d 48 	call	0x905a	; 0x905a <clmt_clust>
    baa0:	08 c0       	rjmp	.+16     	; 0xbab2 <f_write+0x104>
    baa2:	f7 01       	movw	r30, r14
    baa4:	44 89       	ldd	r20, Z+20	; 0x14
    baa6:	55 89       	ldd	r21, Z+21	; 0x15
    baa8:	66 89       	ldd	r22, Z+22	; 0x16
    baaa:	77 89       	ldd	r23, Z+23	; 0x17
    baac:	c7 01       	movw	r24, r14
    baae:	0e 94 d7 50 	call	0xa1ae	; 0xa1ae <create_chain>
    bab2:	61 15       	cp	r22, r1
    bab4:	71 05       	cpc	r23, r1
    bab6:	81 05       	cpc	r24, r1
    bab8:	91 05       	cpc	r25, r1
    baba:	31 f4       	brne	.+12     	; 0xbac8 <f_write+0x11a>
    babc:	f7 01       	movw	r30, r14
    babe:	86 85       	ldd	r24, Z+14	; 0x0e
    bac0:	80 64       	ori	r24, 0x40	; 64
    bac2:	86 87       	std	Z+14, r24	; 0x0e
    bac4:	80 e0       	ldi	r24, 0x00	; 0
    bac6:	05 c1       	rjmp	.+522    	; 0xbcd2 <f_write+0x324>
    bac8:	61 30       	cpi	r22, 0x01	; 1
    baca:	71 05       	cpc	r23, r1
    bacc:	81 05       	cpc	r24, r1
    bace:	91 05       	cpc	r25, r1
    bad0:	11 f4       	brne	.+4      	; 0xbad6 <f_write+0x128>
    bad2:	82 e0       	ldi	r24, 0x02	; 2
    bad4:	07 c0       	rjmp	.+14     	; 0xbae4 <f_write+0x136>
    bad6:	6f 3f       	cpi	r22, 0xFF	; 255
    bad8:	ff ef       	ldi	r31, 0xFF	; 255
    bada:	7f 07       	cpc	r23, r31
    badc:	8f 07       	cpc	r24, r31
    bade:	9f 07       	cpc	r25, r31
    bae0:	21 f4       	brne	.+8      	; 0xbaea <f_write+0x13c>
    bae2:	81 e0       	ldi	r24, 0x01	; 1
    bae4:	f7 01       	movw	r30, r14
    bae6:	87 87       	std	Z+15, r24	; 0x0f
    bae8:	f4 c0       	rjmp	.+488    	; 0xbcd2 <f_write+0x324>
    baea:	f7 01       	movw	r30, r14
    baec:	64 8b       	std	Z+20, r22	; 0x14
    baee:	75 8b       	std	Z+21, r23	; 0x15
    baf0:	86 8b       	std	Z+22, r24	; 0x16
    baf2:	97 8b       	std	Z+23, r25	; 0x17
    baf4:	06 81       	ldd	r16, Z+6	; 0x06
    baf6:	17 81       	ldd	r17, Z+7	; 0x07
    baf8:	20 85       	ldd	r18, Z+8	; 0x08
    bafa:	31 85       	ldd	r19, Z+9	; 0x09
    bafc:	01 15       	cp	r16, r1
    bafe:	11 05       	cpc	r17, r1
    bb00:	21 05       	cpc	r18, r1
    bb02:	31 05       	cpc	r19, r1
    bb04:	21 f4       	brne	.+8      	; 0xbb0e <f_write+0x160>
    bb06:	66 83       	std	Z+6, r22	; 0x06
    bb08:	77 83       	std	Z+7, r23	; 0x07
    bb0a:	80 87       	std	Z+8, r24	; 0x08
    bb0c:	91 87       	std	Z+9, r25	; 0x09
    bb0e:	f7 01       	movw	r30, r14
    bb10:	86 85       	ldd	r24, Z+14	; 0x0e
    bb12:	87 ff       	sbrs	r24, 7
    bb14:	13 c0       	rjmp	.+38     	; 0xbb3c <f_write+0x18e>
    bb16:	20 8d       	ldd	r18, Z+24	; 0x18
    bb18:	31 8d       	ldd	r19, Z+25	; 0x19
    bb1a:	42 8d       	ldd	r20, Z+26	; 0x1a
    bb1c:	53 8d       	ldd	r21, Z+27	; 0x1b
    bb1e:	e9 81       	ldd	r30, Y+1	; 0x01
    bb20:	fa 81       	ldd	r31, Y+2	; 0x02
    bb22:	01 e0       	ldi	r16, 0x01	; 1
    bb24:	10 e0       	ldi	r17, 0x00	; 0
    bb26:	6d 81       	ldd	r22, Y+5	; 0x05
    bb28:	7e 81       	ldd	r23, Y+6	; 0x06
    bb2a:	81 81       	ldd	r24, Z+1	; 0x01
    bb2c:	0e 94 d6 69 	call	0xd3ac	; 0xd3ac <disk_write>
    bb30:	89 2b       	or	r24, r25
    bb32:	b9 f6       	brne	.-82     	; 0xbae2 <f_write+0x134>
    bb34:	f7 01       	movw	r30, r14
    bb36:	86 85       	ldd	r24, Z+14	; 0x0e
    bb38:	8f 77       	andi	r24, 0x7F	; 127
    bb3a:	86 87       	std	Z+14, r24	; 0x0e
    bb3c:	29 81       	ldd	r18, Y+1	; 0x01
    bb3e:	3a 81       	ldd	r19, Y+2	; 0x02
    bb40:	3c 83       	std	Y+4, r19	; 0x04
    bb42:	2b 83       	std	Y+3, r18	; 0x03
    bb44:	f7 01       	movw	r30, r14
    bb46:	44 89       	ldd	r20, Z+20	; 0x14
    bb48:	55 89       	ldd	r21, Z+21	; 0x15
    bb4a:	66 89       	ldd	r22, Z+22	; 0x16
    bb4c:	77 89       	ldd	r23, Z+23	; 0x17
    bb4e:	c9 01       	movw	r24, r18
    bb50:	0e 94 05 48 	call	0x900a	; 0x900a <clst2sect>
    bb54:	61 15       	cp	r22, r1
    bb56:	71 05       	cpc	r23, r1
    bb58:	81 05       	cpc	r24, r1
    bb5a:	91 05       	cpc	r25, r1
    bb5c:	09 f4       	brne	.+2      	; 0xbb60 <f_write+0x1b2>
    bb5e:	b9 cf       	rjmp	.-142    	; 0xbad2 <f_write+0x124>
    bb60:	1b 01       	movw	r2, r22
    bb62:	2c 01       	movw	r4, r24
    bb64:	28 0c       	add	r2, r8
    bb66:	39 1c       	adc	r3, r9
    bb68:	41 1c       	adc	r4, r1
    bb6a:	51 1c       	adc	r5, r1
    bb6c:	65 01       	movw	r12, r10
    bb6e:	cd 2c       	mov	r12, r13
    bb70:	dd 24       	eor	r13, r13
    bb72:	c6 94       	lsr	r12
    bb74:	c1 14       	cp	r12, r1
    bb76:	d1 04       	cpc	r13, r1
    bb78:	f1 f1       	breq	.+124    	; 0xbbf6 <f_write+0x248>
    bb7a:	eb 81       	ldd	r30, Y+3	; 0x03
    bb7c:	fc 81       	ldd	r31, Y+4	; 0x04
    bb7e:	81 85       	ldd	r24, Z+9	; 0x09
    bb80:	92 85       	ldd	r25, Z+10	; 0x0a
    bb82:	94 01       	movw	r18, r8
    bb84:	2c 0d       	add	r18, r12
    bb86:	3d 1d       	adc	r19, r13
    bb88:	82 17       	cp	r24, r18
    bb8a:	93 07       	cpc	r25, r19
    bb8c:	18 f4       	brcc	.+6      	; 0xbb94 <f_write+0x1e6>
    bb8e:	6c 01       	movw	r12, r24
    bb90:	c8 18       	sub	r12, r8
    bb92:	d9 08       	sbc	r13, r9
    bb94:	86 01       	movw	r16, r12
    bb96:	a2 01       	movw	r20, r4
    bb98:	91 01       	movw	r18, r2
    bb9a:	b3 01       	movw	r22, r6
    bb9c:	eb 81       	ldd	r30, Y+3	; 0x03
    bb9e:	fc 81       	ldd	r31, Y+4	; 0x04
    bba0:	81 81       	ldd	r24, Z+1	; 0x01
    bba2:	0e 94 d6 69 	call	0xd3ac	; 0xd3ac <disk_write>
    bba6:	89 2b       	or	r24, r25
    bba8:	09 f0       	breq	.+2      	; 0xbbac <f_write+0x1fe>
    bbaa:	9b cf       	rjmp	.-202    	; 0xbae2 <f_write+0x134>
    bbac:	f7 01       	movw	r30, r14
    bbae:	80 8d       	ldd	r24, Z+24	; 0x18
    bbb0:	91 8d       	ldd	r25, Z+25	; 0x19
    bbb2:	a2 8d       	ldd	r26, Z+26	; 0x1a
    bbb4:	b3 8d       	ldd	r27, Z+27	; 0x1b
    bbb6:	82 19       	sub	r24, r2
    bbb8:	93 09       	sbc	r25, r3
    bbba:	a4 09       	sbc	r26, r4
    bbbc:	b5 09       	sbc	r27, r5
    bbbe:	a6 01       	movw	r20, r12
    bbc0:	60 e0       	ldi	r22, 0x00	; 0
    bbc2:	70 e0       	ldi	r23, 0x00	; 0
    bbc4:	84 17       	cp	r24, r20
    bbc6:	95 07       	cpc	r25, r21
    bbc8:	a6 07       	cpc	r26, r22
    bbca:	b7 07       	cpc	r27, r23
    bbcc:	80 f4       	brcc	.+32     	; 0xbbee <f_write+0x240>
    bbce:	98 2f       	mov	r25, r24
    bbd0:	88 27       	eor	r24, r24
    bbd2:	99 0f       	add	r25, r25
    bbd4:	b3 01       	movw	r22, r6
    bbd6:	68 0f       	add	r22, r24
    bbd8:	79 1f       	adc	r23, r25
    bbda:	40 e0       	ldi	r20, 0x00	; 0
    bbdc:	52 e0       	ldi	r21, 0x02	; 2
    bbde:	8d 81       	ldd	r24, Y+5	; 0x05
    bbe0:	9e 81       	ldd	r25, Y+6	; 0x06
    bbe2:	0e 94 fa 49 	call	0x93f4	; 0x93f4 <mem_cpy.part.0>
    bbe6:	f7 01       	movw	r30, r14
    bbe8:	86 85       	ldd	r24, Z+14	; 0x0e
    bbea:	8f 77       	andi	r24, 0x7F	; 127
    bbec:	86 87       	std	Z+14, r24	; 0x0e
    bbee:	dc 2c       	mov	r13, r12
    bbf0:	cc 24       	eor	r12, r12
    bbf2:	dd 0c       	add	r13, r13
    bbf4:	43 c0       	rjmp	.+134    	; 0xbc7c <f_write+0x2ce>
    bbf6:	f7 01       	movw	r30, r14
    bbf8:	80 8d       	ldd	r24, Z+24	; 0x18
    bbfa:	91 8d       	ldd	r25, Z+25	; 0x19
    bbfc:	a2 8d       	ldd	r26, Z+26	; 0x1a
    bbfe:	b3 8d       	ldd	r27, Z+27	; 0x1b
    bc00:	28 16       	cp	r2, r24
    bc02:	39 06       	cpc	r3, r25
    bc04:	4a 06       	cpc	r4, r26
    bc06:	5b 06       	cpc	r5, r27
    bc08:	d9 f0       	breq	.+54     	; 0xbc40 <f_write+0x292>
    bc0a:	40 89       	ldd	r20, Z+16	; 0x10
    bc0c:	51 89       	ldd	r21, Z+17	; 0x11
    bc0e:	62 89       	ldd	r22, Z+18	; 0x12
    bc10:	73 89       	ldd	r23, Z+19	; 0x13
    bc12:	82 85       	ldd	r24, Z+10	; 0x0a
    bc14:	93 85       	ldd	r25, Z+11	; 0x0b
    bc16:	a4 85       	ldd	r26, Z+12	; 0x0c
    bc18:	b5 85       	ldd	r27, Z+13	; 0x0d
    bc1a:	48 17       	cp	r20, r24
    bc1c:	59 07       	cpc	r21, r25
    bc1e:	6a 07       	cpc	r22, r26
    bc20:	7b 07       	cpc	r23, r27
    bc22:	70 f4       	brcc	.+28     	; 0xbc40 <f_write+0x292>
    bc24:	01 e0       	ldi	r16, 0x01	; 1
    bc26:	10 e0       	ldi	r17, 0x00	; 0
    bc28:	a2 01       	movw	r20, r4
    bc2a:	91 01       	movw	r18, r2
    bc2c:	6d 81       	ldd	r22, Y+5	; 0x05
    bc2e:	7e 81       	ldd	r23, Y+6	; 0x06
    bc30:	eb 81       	ldd	r30, Y+3	; 0x03
    bc32:	fc 81       	ldd	r31, Y+4	; 0x04
    bc34:	81 81       	ldd	r24, Z+1	; 0x01
    bc36:	0e 94 c6 69 	call	0xd38c	; 0xd38c <disk_read>
    bc3a:	89 2b       	or	r24, r25
    bc3c:	09 f0       	breq	.+2      	; 0xbc40 <f_write+0x292>
    bc3e:	51 cf       	rjmp	.-350    	; 0xbae2 <f_write+0x134>
    bc40:	f7 01       	movw	r30, r14
    bc42:	20 8e       	std	Z+24, r2	; 0x18
    bc44:	31 8e       	std	Z+25, r3	; 0x19
    bc46:	42 8e       	std	Z+26, r4	; 0x1a
    bc48:	53 8e       	std	Z+27, r5	; 0x1b
    bc4a:	f7 01       	movw	r30, r14
    bc4c:	80 89       	ldd	r24, Z+16	; 0x10
    bc4e:	91 89       	ldd	r25, Z+17	; 0x11
    bc50:	91 70       	andi	r25, 0x01	; 1
    bc52:	20 e0       	ldi	r18, 0x00	; 0
    bc54:	32 e0       	ldi	r19, 0x02	; 2
    bc56:	28 1b       	sub	r18, r24
    bc58:	39 0b       	sbc	r19, r25
    bc5a:	65 01       	movw	r12, r10
    bc5c:	2a 15       	cp	r18, r10
    bc5e:	3b 05       	cpc	r19, r11
    bc60:	08 f4       	brcc	.+2      	; 0xbc64 <f_write+0x2b6>
    bc62:	69 01       	movw	r12, r18
    bc64:	a6 01       	movw	r20, r12
    bc66:	b3 01       	movw	r22, r6
    bc68:	2d 81       	ldd	r18, Y+5	; 0x05
    bc6a:	3e 81       	ldd	r19, Y+6	; 0x06
    bc6c:	82 0f       	add	r24, r18
    bc6e:	93 1f       	adc	r25, r19
    bc70:	0e 94 fa 49 	call	0x93f4	; 0x93f4 <mem_cpy.part.0>
    bc74:	f7 01       	movw	r30, r14
    bc76:	86 85       	ldd	r24, Z+14	; 0x0e
    bc78:	80 68       	ori	r24, 0x80	; 128
    bc7a:	86 87       	std	Z+14, r24	; 0x0e
    bc7c:	ac 18       	sub	r10, r12
    bc7e:	bd 08       	sbc	r11, r13
    bc80:	ef 81       	ldd	r30, Y+7	; 0x07
    bc82:	f8 85       	ldd	r31, Y+8	; 0x08
    bc84:	80 81       	ld	r24, Z
    bc86:	91 81       	ldd	r25, Z+1	; 0x01
    bc88:	8c 0d       	add	r24, r12
    bc8a:	9d 1d       	adc	r25, r13
    bc8c:	91 83       	std	Z+1, r25	; 0x01
    bc8e:	80 83       	st	Z, r24
    bc90:	6c 0c       	add	r6, r12
    bc92:	7d 1c       	adc	r7, r13
    bc94:	f7 01       	movw	r30, r14
    bc96:	80 89       	ldd	r24, Z+16	; 0x10
    bc98:	91 89       	ldd	r25, Z+17	; 0x11
    bc9a:	a2 89       	ldd	r26, Z+18	; 0x12
    bc9c:	b3 89       	ldd	r27, Z+19	; 0x13
    bc9e:	8c 0d       	add	r24, r12
    bca0:	9d 1d       	adc	r25, r13
    bca2:	a1 1d       	adc	r26, r1
    bca4:	b1 1d       	adc	r27, r1
    bca6:	80 8b       	std	Z+16, r24	; 0x10
    bca8:	91 8b       	std	Z+17, r25	; 0x11
    bcaa:	a2 8b       	std	Z+18, r26	; 0x12
    bcac:	b3 8b       	std	Z+19, r27	; 0x13
    bcae:	42 85       	ldd	r20, Z+10	; 0x0a
    bcb0:	53 85       	ldd	r21, Z+11	; 0x0b
    bcb2:	64 85       	ldd	r22, Z+12	; 0x0c
    bcb4:	75 85       	ldd	r23, Z+13	; 0x0d
    bcb6:	48 17       	cp	r20, r24
    bcb8:	59 07       	cpc	r21, r25
    bcba:	6a 07       	cpc	r22, r26
    bcbc:	7b 07       	cpc	r23, r27
    bcbe:	10 f4       	brcc	.+4      	; 0xbcc4 <f_write+0x316>
    bcc0:	ac 01       	movw	r20, r24
    bcc2:	bd 01       	movw	r22, r26
    bcc4:	f7 01       	movw	r30, r14
    bcc6:	42 87       	std	Z+10, r20	; 0x0a
    bcc8:	53 87       	std	Z+11, r21	; 0x0b
    bcca:	64 87       	std	Z+12, r22	; 0x0c
    bccc:	75 87       	std	Z+13, r23	; 0x0d
    bcce:	a5 ce       	rjmp	.-694    	; 0xba1a <f_write+0x6c>
    bcd0:	87 e0       	ldi	r24, 0x07	; 7
    bcd2:	90 e0       	ldi	r25, 0x00	; 0
    bcd4:	28 96       	adiw	r28, 0x08	; 8
    bcd6:	e2 e1       	ldi	r30, 0x12	; 18
    bcd8:	0c 94 29 e7 	jmp	0x1ce52	; 0x1ce52 <__epilogue_restores__>

0000bcdc <f_sync>:
    bcdc:	8f 92       	push	r8
    bcde:	9f 92       	push	r9
    bce0:	af 92       	push	r10
    bce2:	bf 92       	push	r11
    bce4:	ef 92       	push	r14
    bce6:	ff 92       	push	r15
    bce8:	0f 93       	push	r16
    bcea:	1f 93       	push	r17
    bcec:	cf 93       	push	r28
    bcee:	df 93       	push	r29
    bcf0:	00 d0       	rcall	.+0      	; 0xbcf2 <f_sync+0x16>
    bcf2:	cd b7       	in	r28, 0x3d	; 61
    bcf4:	de b7       	in	r29, 0x3e	; 62
    bcf6:	7c 01       	movw	r14, r24
    bcf8:	be 01       	movw	r22, r28
    bcfa:	6f 5f       	subi	r22, 0xFF	; 255
    bcfc:	7f 4f       	sbci	r23, 0xFF	; 255
    bcfe:	0e 94 a4 48 	call	0x9148	; 0x9148 <validate>
    bd02:	00 97       	sbiw	r24, 0x00	; 0
    bd04:	09 f0       	breq	.+2      	; 0xbd08 <f_sync+0x2c>
    bd06:	5d c0       	rjmp	.+186    	; 0xbdc2 <f_sync+0xe6>
    bd08:	f7 01       	movw	r30, r14
    bd0a:	86 85       	ldd	r24, Z+14	; 0x0e
    bd0c:	86 ff       	sbrs	r24, 6
    bd0e:	55 c0       	rjmp	.+170    	; 0xbdba <f_sync+0xde>
    bd10:	87 ff       	sbrs	r24, 7
    bd12:	15 c0       	rjmp	.+42     	; 0xbd3e <f_sync+0x62>
    bd14:	20 8d       	ldd	r18, Z+24	; 0x18
    bd16:	31 8d       	ldd	r19, Z+25	; 0x19
    bd18:	42 8d       	ldd	r20, Z+26	; 0x1a
    bd1a:	53 8d       	ldd	r21, Z+27	; 0x1b
    bd1c:	e9 81       	ldd	r30, Y+1	; 0x01
    bd1e:	fa 81       	ldd	r31, Y+2	; 0x02
    bd20:	01 e0       	ldi	r16, 0x01	; 1
    bd22:	10 e0       	ldi	r17, 0x00	; 0
    bd24:	b7 01       	movw	r22, r14
    bd26:	6c 5d       	subi	r22, 0xDC	; 220
    bd28:	7f 4f       	sbci	r23, 0xFF	; 255
    bd2a:	81 81       	ldd	r24, Z+1	; 0x01
    bd2c:	0e 94 d6 69 	call	0xd3ac	; 0xd3ac <disk_write>
    bd30:	89 2b       	or	r24, r25
    bd32:	09 f0       	breq	.+2      	; 0xbd36 <f_sync+0x5a>
    bd34:	44 c0       	rjmp	.+136    	; 0xbdbe <f_sync+0xe2>
    bd36:	f7 01       	movw	r30, r14
    bd38:	86 85       	ldd	r24, Z+14	; 0x0e
    bd3a:	8f 77       	andi	r24, 0x7F	; 127
    bd3c:	86 87       	std	Z+14, r24	; 0x0e
    bd3e:	0e 94 8b 70 	call	0xe116	; 0xe116 <get_fattime>
    bd42:	4b 01       	movw	r8, r22
    bd44:	5c 01       	movw	r10, r24
    bd46:	f7 01       	movw	r30, r14
    bd48:	44 8d       	ldd	r20, Z+28	; 0x1c
    bd4a:	55 8d       	ldd	r21, Z+29	; 0x1d
    bd4c:	66 8d       	ldd	r22, Z+30	; 0x1e
    bd4e:	77 8d       	ldd	r23, Z+31	; 0x1f
    bd50:	89 81       	ldd	r24, Y+1	; 0x01
    bd52:	9a 81       	ldd	r25, Y+2	; 0x02
    bd54:	0e 94 94 4b 	call	0x9728	; 0x9728 <move_window>
    bd58:	00 97       	sbiw	r24, 0x00	; 0
    bd5a:	99 f5       	brne	.+102    	; 0xbdc2 <f_sync+0xe6>
    bd5c:	f7 01       	movw	r30, r14
    bd5e:	00 a1       	ldd	r16, Z+32	; 0x20
    bd60:	11 a1       	ldd	r17, Z+33	; 0x21
    bd62:	f8 01       	movw	r30, r16
    bd64:	83 85       	ldd	r24, Z+11	; 0x0b
    bd66:	80 62       	ori	r24, 0x20	; 32
    bd68:	83 87       	std	Z+11, r24	; 0x0b
    bd6a:	f7 01       	movw	r30, r14
    bd6c:	26 81       	ldd	r18, Z+6	; 0x06
    bd6e:	37 81       	ldd	r19, Z+7	; 0x07
    bd70:	40 85       	ldd	r20, Z+8	; 0x08
    bd72:	51 85       	ldd	r21, Z+9	; 0x09
    bd74:	b8 01       	movw	r22, r16
    bd76:	80 81       	ld	r24, Z
    bd78:	91 81       	ldd	r25, Z+1	; 0x01
    bd7a:	0e 94 1a 4a 	call	0x9434	; 0x9434 <st_clust.isra.4>
    bd7e:	f7 01       	movw	r30, r14
    bd80:	42 85       	ldd	r20, Z+10	; 0x0a
    bd82:	53 85       	ldd	r21, Z+11	; 0x0b
    bd84:	64 85       	ldd	r22, Z+12	; 0x0c
    bd86:	75 85       	ldd	r23, Z+13	; 0x0d
    bd88:	c8 01       	movw	r24, r16
    bd8a:	4c 96       	adiw	r24, 0x1c	; 28
    bd8c:	0e 94 e7 47 	call	0x8fce	; 0x8fce <st_dword>
    bd90:	b5 01       	movw	r22, r10
    bd92:	a4 01       	movw	r20, r8
    bd94:	c8 01       	movw	r24, r16
    bd96:	46 96       	adiw	r24, 0x16	; 22
    bd98:	0e 94 e7 47 	call	0x8fce	; 0x8fce <st_dword>
    bd9c:	f8 01       	movw	r30, r16
    bd9e:	12 8a       	std	Z+18, r1	; 0x12
    bda0:	13 8a       	std	Z+19, r1	; 0x13
    bda2:	89 81       	ldd	r24, Y+1	; 0x01
    bda4:	9a 81       	ldd	r25, Y+2	; 0x02
    bda6:	21 e0       	ldi	r18, 0x01	; 1
    bda8:	fc 01       	movw	r30, r24
    bdaa:	23 83       	std	Z+3, r18	; 0x03
    bdac:	0e 94 7a 4a 	call	0x94f4	; 0x94f4 <sync_fs>
    bdb0:	f7 01       	movw	r30, r14
    bdb2:	26 85       	ldd	r18, Z+14	; 0x0e
    bdb4:	2f 7b       	andi	r18, 0xBF	; 191
    bdb6:	26 87       	std	Z+14, r18	; 0x0e
    bdb8:	04 c0       	rjmp	.+8      	; 0xbdc2 <f_sync+0xe6>
    bdba:	80 e0       	ldi	r24, 0x00	; 0
    bdbc:	01 c0       	rjmp	.+2      	; 0xbdc0 <f_sync+0xe4>
    bdbe:	81 e0       	ldi	r24, 0x01	; 1
    bdc0:	90 e0       	ldi	r25, 0x00	; 0
    bdc2:	0f 90       	pop	r0
    bdc4:	0f 90       	pop	r0
    bdc6:	df 91       	pop	r29
    bdc8:	cf 91       	pop	r28
    bdca:	1f 91       	pop	r17
    bdcc:	0f 91       	pop	r16
    bdce:	ff 90       	pop	r15
    bdd0:	ef 90       	pop	r14
    bdd2:	bf 90       	pop	r11
    bdd4:	af 90       	pop	r10
    bdd6:	9f 90       	pop	r9
    bdd8:	8f 90       	pop	r8
    bdda:	08 95       	ret

0000bddc <f_close>:
    bddc:	a2 e0       	ldi	r26, 0x02	; 2
    bdde:	b0 e0       	ldi	r27, 0x00	; 0
    bde0:	e4 ef       	ldi	r30, 0xF4	; 244
    bde2:	fe e5       	ldi	r31, 0x5E	; 94
    bde4:	0c 94 1b e7 	jmp	0x1ce36	; 0x1ce36 <__prologue_saves__+0x1c>
    bde8:	8c 01       	movw	r16, r24
    bdea:	78 df       	rcall	.-272    	; 0xbcdc <f_sync>
    bdec:	00 97       	sbiw	r24, 0x00	; 0
    bdee:	59 f4       	brne	.+22     	; 0xbe06 <f_close+0x2a>
    bdf0:	be 01       	movw	r22, r28
    bdf2:	6f 5f       	subi	r22, 0xFF	; 255
    bdf4:	7f 4f       	sbci	r23, 0xFF	; 255
    bdf6:	c8 01       	movw	r24, r16
    bdf8:	0e 94 a4 48 	call	0x9148	; 0x9148 <validate>
    bdfc:	00 97       	sbiw	r24, 0x00	; 0
    bdfe:	19 f4       	brne	.+6      	; 0xbe06 <f_close+0x2a>
    be00:	f8 01       	movw	r30, r16
    be02:	11 82       	std	Z+1, r1	; 0x01
    be04:	10 82       	st	Z, r1
    be06:	22 96       	adiw	r28, 0x02	; 2
    be08:	e4 e0       	ldi	r30, 0x04	; 4
    be0a:	0c 94 37 e7 	jmp	0x1ce6e	; 0x1ce6e <__epilogue_restores__+0x1c>

0000be0e <f_chdir>:
    be0e:	a2 e3       	ldi	r26, 0x32	; 50
    be10:	b0 e0       	ldi	r27, 0x00	; 0
    be12:	ed e0       	ldi	r30, 0x0D	; 13
    be14:	ff e5       	ldi	r31, 0x5F	; 95
    be16:	0c 94 17 e7 	jmp	0x1ce2e	; 0x1ce2e <__prologue_saves__+0x14>
    be1a:	9a ab       	std	Y+50, r25	; 0x32
    be1c:	89 ab       	std	Y+49, r24	; 0x31
    be1e:	40 e0       	ldi	r20, 0x00	; 0
    be20:	be 01       	movw	r22, r28
    be22:	61 5d       	subi	r22, 0xD1	; 209
    be24:	7f 4f       	sbci	r23, 0xFF	; 255
    be26:	ce 01       	movw	r24, r28
    be28:	c1 96       	adiw	r24, 0x31	; 49
    be2a:	0e 94 0f 4c 	call	0x981e	; 0x981e <mount_volume>
    be2e:	00 97       	sbiw	r24, 0x00	; 0
    be30:	09 f0       	breq	.+2      	; 0xbe34 <f_chdir+0x26>
    be32:	44 c0       	rjmp	.+136    	; 0xbebc <f_chdir+0xae>
    be34:	8f a5       	ldd	r24, Y+47	; 0x2f
    be36:	98 a9       	ldd	r25, Y+48	; 0x30
    be38:	9a 83       	std	Y+2, r25	; 0x02
    be3a:	89 83       	std	Y+1, r24	; 0x01
    be3c:	80 e0       	ldi	r24, 0x00	; 0
    be3e:	92 e0       	ldi	r25, 0x02	; 2
    be40:	0e 94 0a 69 	call	0xd214	; 0xd214 <ff_memalloc>
    be44:	7c 01       	movw	r14, r24
    be46:	00 97       	sbiw	r24, 0x00	; 0
    be48:	a9 f1       	breq	.+106    	; 0xbeb4 <f_chdir+0xa6>
    be4a:	ef a5       	ldd	r30, Y+47	; 0x2f
    be4c:	f8 a9       	ldd	r31, Y+48	; 0x30
    be4e:	94 87       	std	Z+12, r25	; 0x0c
    be50:	83 87       	std	Z+11, r24	; 0x0b
    be52:	69 a9       	ldd	r22, Y+49	; 0x31
    be54:	7a a9       	ldd	r23, Y+50	; 0x32
    be56:	ce 01       	movw	r24, r28
    be58:	01 96       	adiw	r24, 0x01	; 1
    be5a:	2e d8       	rcall	.-4004   	; 0xaeb8 <follow_path>
    be5c:	8c 01       	movw	r16, r24
    be5e:	89 2b       	or	r24, r25
    be60:	09 f5       	brne	.+66     	; 0xbea4 <f_chdir+0x96>
    be62:	88 a5       	ldd	r24, Y+40	; 0x28
    be64:	87 ff       	sbrs	r24, 7
    be66:	0b c0       	rjmp	.+22     	; 0xbe7e <f_chdir+0x70>
    be68:	ef a5       	ldd	r30, Y+47	; 0x2f
    be6a:	f8 a9       	ldd	r31, Y+48	; 0x30
    be6c:	8f 81       	ldd	r24, Y+7	; 0x07
    be6e:	98 85       	ldd	r25, Y+8	; 0x08
    be70:	a9 85       	ldd	r26, Y+9	; 0x09
    be72:	ba 85       	ldd	r27, Y+10	; 0x0a
    be74:	85 8b       	std	Z+21, r24	; 0x15
    be76:	96 8b       	std	Z+22, r25	; 0x16
    be78:	a7 8b       	std	Z+23, r26	; 0x17
    be7a:	b0 8f       	std	Z+24, r27	; 0x18
    be7c:	13 c0       	rjmp	.+38     	; 0xbea4 <f_chdir+0x96>
    be7e:	8d 81       	ldd	r24, Y+5	; 0x05
    be80:	84 ff       	sbrs	r24, 4
    be82:	0e c0       	rjmp	.+28     	; 0xbea0 <f_chdir+0x92>
    be84:	cf a4       	ldd	r12, Y+47	; 0x2f
    be86:	d8 a8       	ldd	r13, Y+48	; 0x30
    be88:	6b 8d       	ldd	r22, Y+27	; 0x1b
    be8a:	7c 8d       	ldd	r23, Y+28	; 0x1c
    be8c:	f6 01       	movw	r30, r12
    be8e:	80 81       	ld	r24, Z
    be90:	0e 94 05 4a 	call	0x940a	; 0x940a <ld_clust.isra.3>
    be94:	f6 01       	movw	r30, r12
    be96:	65 8b       	std	Z+21, r22	; 0x15
    be98:	76 8b       	std	Z+22, r23	; 0x16
    be9a:	87 8b       	std	Z+23, r24	; 0x17
    be9c:	90 8f       	std	Z+24, r25	; 0x18
    be9e:	02 c0       	rjmp	.+4      	; 0xbea4 <f_chdir+0x96>
    bea0:	05 e0       	ldi	r16, 0x05	; 5
    bea2:	10 e0       	ldi	r17, 0x00	; 0
    bea4:	c7 01       	movw	r24, r14
    bea6:	0e 94 0d 69 	call	0xd21a	; 0xd21a <ff_memfree>
    beaa:	04 30       	cpi	r16, 0x04	; 4
    beac:	11 05       	cpc	r17, r1
    beae:	29 f4       	brne	.+10     	; 0xbeba <f_chdir+0xac>
    beb0:	85 e0       	ldi	r24, 0x05	; 5
    beb2:	01 c0       	rjmp	.+2      	; 0xbeb6 <f_chdir+0xa8>
    beb4:	81 e1       	ldi	r24, 0x11	; 17
    beb6:	90 e0       	ldi	r25, 0x00	; 0
    beb8:	01 c0       	rjmp	.+2      	; 0xbebc <f_chdir+0xae>
    beba:	c8 01       	movw	r24, r16
    bebc:	e2 96       	adiw	r28, 0x32	; 50
    bebe:	e8 e0       	ldi	r30, 0x08	; 8
    bec0:	0c 94 33 e7 	jmp	0x1ce66	; 0x1ce66 <__epilogue_restores__+0x14>

0000bec4 <f_getcwd>:
    bec4:	a8 e4       	ldi	r26, 0x48	; 72
    bec6:	b1 e0       	ldi	r27, 0x01	; 1
    bec8:	e8 e6       	ldi	r30, 0x68	; 104
    beca:	ff e5       	ldi	r31, 0x5F	; 95
    becc:	0c 94 0d e7 	jmp	0x1ce1a	; 0x1ce1a <__prologue_saves__>
    bed0:	c9 5b       	subi	r28, 0xB9	; 185
    bed2:	de 4f       	sbci	r29, 0xFE	; 254
    bed4:	99 83       	std	Y+1, r25	; 0x01
    bed6:	88 83       	st	Y, r24
    bed8:	c7 54       	subi	r28, 0x47	; 71
    beda:	d1 40       	sbci	r29, 0x01	; 1
    bedc:	4b 01       	movw	r8, r22
    bede:	7c 01       	movw	r14, r24
    bee0:	fc 01       	movw	r30, r24
    bee2:	10 82       	st	Z, r1
    bee4:	40 e0       	ldi	r20, 0x00	; 0
    bee6:	be 01       	movw	r22, r28
    bee8:	6b 5b       	subi	r22, 0xBB	; 187
    beea:	7e 4f       	sbci	r23, 0xFE	; 254
    beec:	ce 01       	movw	r24, r28
    beee:	89 5b       	subi	r24, 0xB9	; 185
    bef0:	9e 4f       	sbci	r25, 0xFE	; 254
    bef2:	0e 94 0f 4c 	call	0x981e	; 0x981e <mount_volume>
    bef6:	1c 01       	movw	r2, r24
    bef8:	89 2b       	or	r24, r25
    befa:	09 f0       	breq	.+2      	; 0xbefe <f_getcwd+0x3a>
    befc:	03 c1       	rjmp	.+518    	; 0xc104 <f_getcwd+0x240>
    befe:	cb 5b       	subi	r28, 0xBB	; 187
    bf00:	de 4f       	sbci	r29, 0xFE	; 254
    bf02:	88 81       	ld	r24, Y
    bf04:	99 81       	ldd	r25, Y+1	; 0x01
    bf06:	c5 54       	subi	r28, 0x45	; 69
    bf08:	d1 40       	sbci	r29, 0x01	; 1
    bf0a:	c9 5e       	subi	r28, 0xE9	; 233
    bf0c:	de 4f       	sbci	r29, 0xFE	; 254
    bf0e:	99 83       	std	Y+1, r25	; 0x01
    bf10:	88 83       	st	Y, r24
    bf12:	c7 51       	subi	r28, 0x17	; 23
    bf14:	d1 40       	sbci	r29, 0x01	; 1
    bf16:	80 e0       	ldi	r24, 0x00	; 0
    bf18:	92 e0       	ldi	r25, 0x02	; 2
    bf1a:	0e 94 0a 69 	call	0xd214	; 0xd214 <ff_memalloc>
    bf1e:	5c 01       	movw	r10, r24
    bf20:	00 97       	sbiw	r24, 0x00	; 0
    bf22:	09 f4       	brne	.+2      	; 0xbf26 <f_getcwd+0x62>
    bf24:	f3 c0       	rjmp	.+486    	; 0xc10c <f_getcwd+0x248>
    bf26:	cb 5b       	subi	r28, 0xBB	; 187
    bf28:	de 4f       	sbci	r29, 0xFE	; 254
    bf2a:	e8 81       	ld	r30, Y
    bf2c:	f9 81       	ldd	r31, Y+1	; 0x01
    bf2e:	c5 54       	subi	r28, 0x45	; 69
    bf30:	d1 40       	sbci	r29, 0x01	; 1
    bf32:	94 87       	std	Z+12, r25	; 0x0c
    bf34:	83 87       	std	Z+11, r24	; 0x0b
    bf36:	85 89       	ldd	r24, Z+21	; 0x15
    bf38:	96 89       	ldd	r25, Z+22	; 0x16
    bf3a:	a7 89       	ldd	r26, Z+23	; 0x17
    bf3c:	b0 8d       	ldd	r27, Z+24	; 0x18
    bf3e:	c3 5e       	subi	r28, 0xE3	; 227
    bf40:	de 4f       	sbci	r29, 0xFE	; 254
    bf42:	88 83       	st	Y, r24
    bf44:	99 83       	std	Y+1, r25	; 0x01
    bf46:	aa 83       	std	Y+2, r26	; 0x02
    bf48:	bb 83       	std	Y+3, r27	; 0x03
    bf4a:	cd 51       	subi	r28, 0x1D	; 29
    bf4c:	d1 40       	sbci	r29, 0x01	; 1
    bf4e:	84 01       	movw	r16, r8
    bf50:	ce 01       	movw	r24, r28
    bf52:	01 96       	adiw	r24, 0x01	; 1
    bf54:	6c 01       	movw	r12, r24
    bf56:	c3 5e       	subi	r28, 0xE3	; 227
    bf58:	de 4f       	sbci	r29, 0xFE	; 254
    bf5a:	48 80       	ld	r4, Y
    bf5c:	59 80       	ldd	r5, Y+1	; 0x01
    bf5e:	6a 80       	ldd	r6, Y+2	; 0x02
    bf60:	7b 80       	ldd	r7, Y+3	; 0x03
    bf62:	cd 51       	subi	r28, 0x1D	; 29
    bf64:	d1 40       	sbci	r29, 0x01	; 1
    bf66:	41 14       	cp	r4, r1
    bf68:	51 04       	cpc	r5, r1
    bf6a:	61 04       	cpc	r6, r1
    bf6c:	71 04       	cpc	r7, r1
    bf6e:	09 f4       	brne	.+2      	; 0xbf72 <f_getcwd+0xae>
    bf70:	a3 c0       	rjmp	.+326    	; 0xc0b8 <f_getcwd+0x1f4>
    bf72:	40 e2       	ldi	r20, 0x20	; 32
    bf74:	50 e0       	ldi	r21, 0x00	; 0
    bf76:	60 e0       	ldi	r22, 0x00	; 0
    bf78:	70 e0       	ldi	r23, 0x00	; 0
    bf7a:	ce 01       	movw	r24, r28
    bf7c:	89 5e       	subi	r24, 0xE9	; 233
    bf7e:	9e 4f       	sbci	r25, 0xFE	; 254
    bf80:	0e 94 16 50 	call	0xa02c	; 0xa02c <dir_sdi>
    bf84:	00 97       	sbiw	r24, 0x00	; 0
    bf86:	09 f0       	breq	.+2      	; 0xbf8a <f_getcwd+0xc6>
    bf88:	c6 c0       	rjmp	.+396    	; 0xc116 <f_getcwd+0x252>
    bf8a:	c3 5d       	subi	r28, 0xD3	; 211
    bf8c:	de 4f       	sbci	r29, 0xFE	; 254
    bf8e:	48 81       	ld	r20, Y
    bf90:	59 81       	ldd	r21, Y+1	; 0x01
    bf92:	6a 81       	ldd	r22, Y+2	; 0x02
    bf94:	7b 81       	ldd	r23, Y+3	; 0x03
    bf96:	cd 52       	subi	r28, 0x2D	; 45
    bf98:	d1 40       	sbci	r29, 0x01	; 1
    bf9a:	cb 5b       	subi	r28, 0xBB	; 187
    bf9c:	de 4f       	sbci	r29, 0xFE	; 254
    bf9e:	88 81       	ld	r24, Y
    bfa0:	99 81       	ldd	r25, Y+1	; 0x01
    bfa2:	c5 54       	subi	r28, 0x45	; 69
    bfa4:	d1 40       	sbci	r29, 0x01	; 1
    bfa6:	0e 94 94 4b 	call	0x9728	; 0x9728 <move_window>
    bfaa:	00 97       	sbiw	r24, 0x00	; 0
    bfac:	09 f0       	breq	.+2      	; 0xbfb0 <f_getcwd+0xec>
    bfae:	b3 c0       	rjmp	.+358    	; 0xc116 <f_getcwd+0x252>
    bfb0:	cf 5c       	subi	r28, 0xCF	; 207
    bfb2:	de 4f       	sbci	r29, 0xFE	; 254
    bfb4:	68 81       	ld	r22, Y
    bfb6:	79 81       	ldd	r23, Y+1	; 0x01
    bfb8:	c1 53       	subi	r28, 0x31	; 49
    bfba:	d1 40       	sbci	r29, 0x01	; 1
    bfbc:	cb 5b       	subi	r28, 0xBB	; 187
    bfbe:	de 4f       	sbci	r29, 0xFE	; 254
    bfc0:	e8 81       	ld	r30, Y
    bfc2:	f9 81       	ldd	r31, Y+1	; 0x01
    bfc4:	c5 54       	subi	r28, 0x45	; 69
    bfc6:	d1 40       	sbci	r29, 0x01	; 1
    bfc8:	80 81       	ld	r24, Z
    bfca:	0e 94 05 4a 	call	0x940a	; 0x940a <ld_clust.isra.3>
    bfce:	c3 5e       	subi	r28, 0xE3	; 227
    bfd0:	de 4f       	sbci	r29, 0xFE	; 254
    bfd2:	68 83       	st	Y, r22
    bfd4:	79 83       	std	Y+1, r23	; 0x01
    bfd6:	8a 83       	std	Y+2, r24	; 0x02
    bfd8:	9b 83       	std	Y+3, r25	; 0x03
    bfda:	cd 51       	subi	r28, 0x1D	; 29
    bfdc:	d1 40       	sbci	r29, 0x01	; 1
    bfde:	40 e0       	ldi	r20, 0x00	; 0
    bfe0:	50 e0       	ldi	r21, 0x00	; 0
    bfe2:	ba 01       	movw	r22, r20
    bfe4:	ce 01       	movw	r24, r28
    bfe6:	89 5e       	subi	r24, 0xE9	; 233
    bfe8:	9e 4f       	sbci	r25, 0xFE	; 254
    bfea:	0e 94 16 50 	call	0xa02c	; 0xa02c <dir_sdi>
    bfee:	00 97       	sbiw	r24, 0x00	; 0
    bff0:	09 f0       	breq	.+2      	; 0xbff4 <f_getcwd+0x130>
    bff2:	91 c0       	rjmp	.+290    	; 0xc116 <f_getcwd+0x252>
    bff4:	60 e0       	ldi	r22, 0x00	; 0
    bff6:	70 e0       	ldi	r23, 0x00	; 0
    bff8:	ce 01       	movw	r24, r28
    bffa:	89 5e       	subi	r24, 0xE9	; 233
    bffc:	9e 4f       	sbci	r25, 0xFE	; 254
    bffe:	0e 94 af 53 	call	0xa75e	; 0xa75e <dir_read>
    c002:	00 97       	sbiw	r24, 0x00	; 0
    c004:	09 f0       	breq	.+2      	; 0xc008 <f_getcwd+0x144>
    c006:	89 c0       	rjmp	.+274    	; 0xc11a <f_getcwd+0x256>
    c008:	cf 5c       	subi	r28, 0xCF	; 207
    c00a:	de 4f       	sbci	r29, 0xFE	; 254
    c00c:	68 81       	ld	r22, Y
    c00e:	79 81       	ldd	r23, Y+1	; 0x01
    c010:	c1 53       	subi	r28, 0x31	; 49
    c012:	d1 40       	sbci	r29, 0x01	; 1
    c014:	cb 5b       	subi	r28, 0xBB	; 187
    c016:	de 4f       	sbci	r29, 0xFE	; 254
    c018:	e8 81       	ld	r30, Y
    c01a:	f9 81       	ldd	r31, Y+1	; 0x01
    c01c:	c5 54       	subi	r28, 0x45	; 69
    c01e:	d1 40       	sbci	r29, 0x01	; 1
    c020:	80 81       	ld	r24, Z
    c022:	0e 94 05 4a 	call	0x940a	; 0x940a <ld_clust.isra.3>
    c026:	46 16       	cp	r4, r22
    c028:	57 06       	cpc	r5, r23
    c02a:	68 06       	cpc	r6, r24
    c02c:	79 06       	cpc	r7, r25
    c02e:	41 f4       	brne	.+16     	; 0xc040 <f_getcwd+0x17c>
    c030:	b6 01       	movw	r22, r12
    c032:	ce 01       	movw	r24, r28
    c034:	89 5e       	subi	r24, 0xE9	; 233
    c036:	9e 4f       	sbci	r25, 0xFE	; 254
    c038:	0e 94 d0 48 	call	0x91a0	; 0x91a0 <get_fileinfo>
    c03c:	f6 01       	movw	r30, r12
    c03e:	0a c0       	rjmp	.+20     	; 0xc054 <f_getcwd+0x190>
    c040:	60 e0       	ldi	r22, 0x00	; 0
    c042:	70 e0       	ldi	r23, 0x00	; 0
    c044:	ce 01       	movw	r24, r28
    c046:	89 5e       	subi	r24, 0xE9	; 233
    c048:	9e 4f       	sbci	r25, 0xFE	; 254
    c04a:	0e 94 8e 52 	call	0xa51c	; 0xa51c <dir_next>
    c04e:	00 97       	sbiw	r24, 0x00	; 0
    c050:	89 f2       	breq	.-94     	; 0xbff4 <f_getcwd+0x130>
    c052:	63 c0       	rjmp	.+198    	; 0xc11a <f_getcwd+0x256>
    c054:	cf 01       	movw	r24, r30
    c056:	8c 19       	sub	r24, r12
    c058:	9d 09       	sbc	r25, r13
    c05a:	31 96       	adiw	r30, 0x01	; 1
    c05c:	25 89       	ldd	r18, Z+21	; 0x15
    c05e:	21 11       	cpse	r18, r1
    c060:	f9 cf       	rjmp	.-14     	; 0xc054 <f_getcwd+0x190>
    c062:	9c 01       	movw	r18, r24
    c064:	2f 5f       	subi	r18, 0xFF	; 255
    c066:	3f 4f       	sbci	r19, 0xFF	; 255
    c068:	02 17       	cp	r16, r18
    c06a:	13 07       	cpc	r17, r19
    c06c:	08 f4       	brcc	.+2      	; 0xc070 <f_getcwd+0x1ac>
    c06e:	51 c0       	rjmp	.+162    	; 0xc112 <f_getcwd+0x24e>
    c070:	f6 01       	movw	r30, r12
    c072:	e8 0f       	add	r30, r24
    c074:	f9 1f       	adc	r31, r25
    c076:	98 01       	movw	r18, r16
    c078:	ce 16       	cp	r12, r30
    c07a:	df 06       	cpc	r13, r31
    c07c:	71 f0       	breq	.+28     	; 0xc09a <f_getcwd+0x1d6>
    c07e:	21 50       	subi	r18, 0x01	; 1
    c080:	31 09       	sbc	r19, r1
    c082:	45 89       	ldd	r20, Z+21	; 0x15
    c084:	c9 5b       	subi	r28, 0xB9	; 185
    c086:	de 4f       	sbci	r29, 0xFE	; 254
    c088:	a8 81       	ld	r26, Y
    c08a:	b9 81       	ldd	r27, Y+1	; 0x01
    c08c:	c7 54       	subi	r28, 0x47	; 71
    c08e:	d1 40       	sbci	r29, 0x01	; 1
    c090:	a2 0f       	add	r26, r18
    c092:	b3 1f       	adc	r27, r19
    c094:	4c 93       	st	X, r20
    c096:	31 97       	sbiw	r30, 0x01	; 1
    c098:	ef cf       	rjmp	.-34     	; 0xc078 <f_getcwd+0x1b4>
    c09a:	80 95       	com	r24
    c09c:	90 95       	com	r25
    c09e:	08 0f       	add	r16, r24
    c0a0:	19 1f       	adc	r17, r25
    c0a2:	c9 5b       	subi	r28, 0xB9	; 185
    c0a4:	de 4f       	sbci	r29, 0xFE	; 254
    c0a6:	e8 81       	ld	r30, Y
    c0a8:	f9 81       	ldd	r31, Y+1	; 0x01
    c0aa:	c7 54       	subi	r28, 0x47	; 71
    c0ac:	d1 40       	sbci	r29, 0x01	; 1
    c0ae:	e0 0f       	add	r30, r16
    c0b0:	f1 1f       	adc	r31, r17
    c0b2:	9f e2       	ldi	r25, 0x2F	; 47
    c0b4:	90 83       	st	Z, r25
    c0b6:	4f cf       	rjmp	.-354    	; 0xbf56 <f_getcwd+0x92>
    c0b8:	08 15       	cp	r16, r8
    c0ba:	19 05       	cpc	r17, r9
    c0bc:	61 f4       	brne	.+24     	; 0xc0d6 <f_getcwd+0x212>
    c0be:	01 50       	subi	r16, 0x01	; 1
    c0c0:	11 09       	sbc	r17, r1
    c0c2:	c9 5b       	subi	r28, 0xB9	; 185
    c0c4:	de 4f       	sbci	r29, 0xFE	; 254
    c0c6:	e8 81       	ld	r30, Y
    c0c8:	f9 81       	ldd	r31, Y+1	; 0x01
    c0ca:	c7 54       	subi	r28, 0x47	; 71
    c0cc:	d1 40       	sbci	r29, 0x01	; 1
    c0ce:	e0 0f       	add	r30, r16
    c0d0:	f1 1f       	adc	r31, r17
    c0d2:	8f e2       	ldi	r24, 0x2F	; 47
    c0d4:	80 83       	st	Z, r24
    c0d6:	ef ef       	ldi	r30, 0xFF	; 255
    c0d8:	ee 1a       	sub	r14, r30
    c0da:	fe 0a       	sbc	r15, r30
    c0dc:	c9 5b       	subi	r28, 0xB9	; 185
    c0de:	de 4f       	sbci	r29, 0xFE	; 254
    c0e0:	e8 81       	ld	r30, Y
    c0e2:	f9 81       	ldd	r31, Y+1	; 0x01
    c0e4:	c7 54       	subi	r28, 0x47	; 71
    c0e6:	d1 40       	sbci	r29, 0x01	; 1
    c0e8:	e0 0f       	add	r30, r16
    c0ea:	f1 1f       	adc	r31, r17
    c0ec:	80 81       	ld	r24, Z
    c0ee:	f7 01       	movw	r30, r14
    c0f0:	31 97       	sbiw	r30, 0x01	; 1
    c0f2:	80 83       	st	Z, r24
    c0f4:	0f 5f       	subi	r16, 0xFF	; 255
    c0f6:	1f 4f       	sbci	r17, 0xFF	; 255
    c0f8:	08 15       	cp	r16, r8
    c0fa:	19 05       	cpc	r17, r9
    c0fc:	60 f3       	brcs	.-40     	; 0xc0d6 <f_getcwd+0x212>
    c0fe:	c5 01       	movw	r24, r10
    c100:	0e 94 0d 69 	call	0xd21a	; 0xd21a <ff_memfree>
    c104:	f7 01       	movw	r30, r14
    c106:	10 82       	st	Z, r1
    c108:	c1 01       	movw	r24, r2
    c10a:	0d c0       	rjmp	.+26     	; 0xc126 <f_getcwd+0x262>
    c10c:	81 e1       	ldi	r24, 0x11	; 17
    c10e:	90 e0       	ldi	r25, 0x00	; 0
    c110:	0a c0       	rjmp	.+20     	; 0xc126 <f_getcwd+0x262>
    c112:	81 e1       	ldi	r24, 0x11	; 17
    c114:	90 e0       	ldi	r25, 0x00	; 0
    c116:	1c 01       	movw	r2, r24
    c118:	f2 cf       	rjmp	.-28     	; 0xc0fe <f_getcwd+0x23a>
    c11a:	84 30       	cpi	r24, 0x04	; 4
    c11c:	91 05       	cpc	r25, r1
    c11e:	d9 f7       	brne	.-10     	; 0xc116 <f_getcwd+0x252>
    c120:	82 e0       	ldi	r24, 0x02	; 2
    c122:	90 e0       	ldi	r25, 0x00	; 0
    c124:	f8 cf       	rjmp	.-16     	; 0xc116 <f_getcwd+0x252>
    c126:	c8 5b       	subi	r28, 0xB8	; 184
    c128:	de 4f       	sbci	r29, 0xFE	; 254
    c12a:	e2 e1       	ldi	r30, 0x12	; 18
    c12c:	0c 94 29 e7 	jmp	0x1ce52	; 0x1ce52 <__epilogue_restores__>

0000c130 <f_lseek>:
    c130:	aa e0       	ldi	r26, 0x0A	; 10
    c132:	b0 e0       	ldi	r27, 0x00	; 0
    c134:	ee e9       	ldi	r30, 0x9E	; 158
    c136:	f0 e6       	ldi	r31, 0x60	; 96
    c138:	0c 94 0d e7 	jmp	0x1ce1a	; 0x1ce1a <__prologue_saves__>
    c13c:	1c 01       	movw	r2, r24
    c13e:	6a 01       	movw	r12, r20
    c140:	7b 01       	movw	r14, r22
    c142:	be 01       	movw	r22, r28
    c144:	6f 5f       	subi	r22, 0xFF	; 255
    c146:	7f 4f       	sbci	r23, 0xFF	; 255
    c148:	0e 94 a4 48 	call	0x9148	; 0x9148 <validate>
    c14c:	00 97       	sbiw	r24, 0x00	; 0
    c14e:	09 f0       	breq	.+2      	; 0xc152 <f_lseek+0x22>
    c150:	a6 c2       	rjmp	.+1356   	; 0xc69e <f_lseek+0x56e>
    c152:	f1 01       	movw	r30, r2
    c154:	87 85       	ldd	r24, Z+15	; 0x0f
    c156:	90 e0       	ldi	r25, 0x00	; 0
    c158:	00 97       	sbiw	r24, 0x00	; 0
    c15a:	09 f0       	breq	.+2      	; 0xc15e <f_lseek+0x2e>
    c15c:	a0 c2       	rjmp	.+1344   	; 0xc69e <f_lseek+0x56e>
    c15e:	22 a1       	ldd	r18, Z+34	; 0x22
    c160:	33 a1       	ldd	r19, Z+35	; 0x23
    c162:	21 15       	cp	r18, r1
    c164:	31 05       	cpc	r19, r1
    c166:	09 f4       	brne	.+2      	; 0xc16a <f_lseek+0x3a>
    c168:	2d c1       	rjmp	.+602    	; 0xc3c4 <f_lseek+0x294>
    c16a:	ff ef       	ldi	r31, 0xFF	; 255
    c16c:	cf 16       	cp	r12, r31
    c16e:	df 06       	cpc	r13, r31
    c170:	ef 06       	cpc	r14, r31
    c172:	ff 06       	cpc	r15, r31
    c174:	09 f0       	breq	.+2      	; 0xc178 <f_lseek+0x48>
    c176:	9a c0       	rjmp	.+308    	; 0xc2ac <f_lseek+0x17c>
    c178:	89 01       	movw	r16, r18
    c17a:	0c 5f       	subi	r16, 0xFC	; 252
    c17c:	1f 4f       	sbci	r17, 0xFF	; 255
    c17e:	d9 01       	movw	r26, r18
    c180:	4d 91       	ld	r20, X+
    c182:	5d 91       	ld	r21, X+
    c184:	6d 91       	ld	r22, X+
    c186:	7c 91       	ld	r23, X
    c188:	4f 83       	std	Y+7, r20	; 0x07
    c18a:	58 87       	std	Y+8, r21	; 0x08
    c18c:	69 87       	std	Y+9, r22	; 0x09
    c18e:	7a 87       	std	Y+10, r23	; 0x0a
    c190:	f1 01       	movw	r30, r2
    c192:	86 80       	ldd	r8, Z+6	; 0x06
    c194:	97 80       	ldd	r9, Z+7	; 0x07
    c196:	a0 84       	ldd	r10, Z+8	; 0x08
    c198:	b1 84       	ldd	r11, Z+9	; 0x09
    c19a:	52 e0       	ldi	r21, 0x02	; 2
    c19c:	c5 2e       	mov	r12, r21
    c19e:	d1 2c       	mov	r13, r1
    c1a0:	e1 2c       	mov	r14, r1
    c1a2:	f1 2c       	mov	r15, r1
    c1a4:	81 14       	cp	r8, r1
    c1a6:	91 04       	cpc	r9, r1
    c1a8:	a1 04       	cpc	r10, r1
    c1aa:	b1 04       	cpc	r11, r1
    c1ac:	09 f4       	brne	.+2      	; 0xc1b0 <f_lseek+0x80>
    c1ae:	65 c0       	rjmp	.+202    	; 0xc27a <f_lseek+0x14a>
    c1b0:	24 01       	movw	r4, r8
    c1b2:	35 01       	movw	r6, r10
    c1b4:	1b 82       	std	Y+3, r1	; 0x03
    c1b6:	1c 82       	std	Y+4, r1	; 0x04
    c1b8:	1d 82       	std	Y+5, r1	; 0x05
    c1ba:	1e 82       	std	Y+6, r1	; 0x06
    c1bc:	2b 81       	ldd	r18, Y+3	; 0x03
    c1be:	3c 81       	ldd	r19, Y+4	; 0x04
    c1c0:	4d 81       	ldd	r20, Y+5	; 0x05
    c1c2:	5e 81       	ldd	r21, Y+6	; 0x06
    c1c4:	2f 5f       	subi	r18, 0xFF	; 255
    c1c6:	3f 4f       	sbci	r19, 0xFF	; 255
    c1c8:	4f 4f       	sbci	r20, 0xFF	; 255
    c1ca:	5f 4f       	sbci	r21, 0xFF	; 255
    c1cc:	2b 83       	std	Y+3, r18	; 0x03
    c1ce:	3c 83       	std	Y+4, r19	; 0x04
    c1d0:	4d 83       	std	Y+5, r20	; 0x05
    c1d2:	5e 83       	std	Y+6, r21	; 0x06
    c1d4:	b3 01       	movw	r22, r6
    c1d6:	a2 01       	movw	r20, r4
    c1d8:	d1 01       	movw	r26, r2
    c1da:	8d 91       	ld	r24, X+
    c1dc:	9c 91       	ld	r25, X
    c1de:	0e 94 62 4f 	call	0x9ec4	; 0x9ec4 <get_fat.isra.9>
    c1e2:	62 30       	cpi	r22, 0x02	; 2
    c1e4:	71 05       	cpc	r23, r1
    c1e6:	81 05       	cpc	r24, r1
    c1e8:	91 05       	cpc	r25, r1
    c1ea:	10 f4       	brcc	.+4      	; 0xc1f0 <f_lseek+0xc0>
    c1ec:	82 e0       	ldi	r24, 0x02	; 2
    c1ee:	07 c0       	rjmp	.+14     	; 0xc1fe <f_lseek+0xce>
    c1f0:	6f 3f       	cpi	r22, 0xFF	; 255
    c1f2:	ff ef       	ldi	r31, 0xFF	; 255
    c1f4:	7f 07       	cpc	r23, r31
    c1f6:	8f 07       	cpc	r24, r31
    c1f8:	9f 07       	cpc	r25, r31
    c1fa:	29 f4       	brne	.+10     	; 0xc206 <f_lseek+0xd6>
    c1fc:	81 e0       	ldi	r24, 0x01	; 1
    c1fe:	f1 01       	movw	r30, r2
    c200:	87 87       	std	Z+15, r24	; 0x0f
    c202:	90 e0       	ldi	r25, 0x00	; 0
    c204:	4c c2       	rjmp	.+1176   	; 0xc69e <f_lseek+0x56e>
    c206:	a3 01       	movw	r20, r6
    c208:	92 01       	movw	r18, r4
    c20a:	2f 5f       	subi	r18, 0xFF	; 255
    c20c:	3f 4f       	sbci	r19, 0xFF	; 255
    c20e:	4f 4f       	sbci	r20, 0xFF	; 255
    c210:	5f 4f       	sbci	r21, 0xFF	; 255
    c212:	2b 01       	movw	r4, r22
    c214:	3c 01       	movw	r6, r24
    c216:	62 17       	cp	r22, r18
    c218:	73 07       	cpc	r23, r19
    c21a:	84 07       	cpc	r24, r20
    c21c:	95 07       	cpc	r25, r21
    c21e:	71 f2       	breq	.-100    	; 0xc1bc <f_lseek+0x8c>
    c220:	f2 e0       	ldi	r31, 0x02	; 2
    c222:	cf 0e       	add	r12, r31
    c224:	d1 1c       	adc	r13, r1
    c226:	e1 1c       	adc	r14, r1
    c228:	f1 1c       	adc	r15, r1
    c22a:	2f 81       	ldd	r18, Y+7	; 0x07
    c22c:	38 85       	ldd	r19, Y+8	; 0x08
    c22e:	49 85       	ldd	r20, Y+9	; 0x09
    c230:	5a 85       	ldd	r21, Y+10	; 0x0a
    c232:	2c 15       	cp	r18, r12
    c234:	3d 05       	cpc	r19, r13
    c236:	4e 05       	cpc	r20, r14
    c238:	5f 05       	cpc	r21, r15
    c23a:	88 f0       	brcs	.+34     	; 0xc25e <f_lseek+0x12e>
    c23c:	2b 81       	ldd	r18, Y+3	; 0x03
    c23e:	3c 81       	ldd	r19, Y+4	; 0x04
    c240:	4d 81       	ldd	r20, Y+5	; 0x05
    c242:	5e 81       	ldd	r21, Y+6	; 0x06
    c244:	d8 01       	movw	r26, r16
    c246:	2d 93       	st	X+, r18
    c248:	3d 93       	st	X+, r19
    c24a:	4d 93       	st	X+, r20
    c24c:	5c 93       	st	X, r21
    c24e:	13 97       	sbiw	r26, 0x03	; 3
    c250:	f8 01       	movw	r30, r16
    c252:	84 82       	std	Z+4, r8	; 0x04
    c254:	95 82       	std	Z+5, r9	; 0x05
    c256:	a6 82       	std	Z+6, r10	; 0x06
    c258:	b7 82       	std	Z+7, r11	; 0x07
    c25a:	08 5f       	subi	r16, 0xF8	; 248
    c25c:	1f 4f       	sbci	r17, 0xFF	; 255
    c25e:	e9 81       	ldd	r30, Y+1	; 0x01
    c260:	fa 81       	ldd	r31, Y+2	; 0x02
    c262:	81 8c       	ldd	r8, Z+25	; 0x19
    c264:	92 8c       	ldd	r9, Z+26	; 0x1a
    c266:	a3 8c       	ldd	r10, Z+27	; 0x1b
    c268:	b4 8c       	ldd	r11, Z+28	; 0x1c
    c26a:	68 15       	cp	r22, r8
    c26c:	79 05       	cpc	r23, r9
    c26e:	8a 05       	cpc	r24, r10
    c270:	9b 05       	cpc	r25, r11
    c272:	18 f4       	brcc	.+6      	; 0xc27a <f_lseek+0x14a>
    c274:	4b 01       	movw	r8, r22
    c276:	5c 01       	movw	r10, r24
    c278:	9b cf       	rjmp	.-202    	; 0xc1b0 <f_lseek+0x80>
    c27a:	f1 01       	movw	r30, r2
    c27c:	a2 a1       	ldd	r26, Z+34	; 0x22
    c27e:	b3 a1       	ldd	r27, Z+35	; 0x23
    c280:	cd 92       	st	X+, r12
    c282:	dd 92       	st	X+, r13
    c284:	ed 92       	st	X+, r14
    c286:	fc 92       	st	X, r15
    c288:	13 97       	sbiw	r26, 0x03	; 3
    c28a:	2f 81       	ldd	r18, Y+7	; 0x07
    c28c:	38 85       	ldd	r19, Y+8	; 0x08
    c28e:	49 85       	ldd	r20, Y+9	; 0x09
    c290:	5a 85       	ldd	r21, Y+10	; 0x0a
    c292:	2c 15       	cp	r18, r12
    c294:	3d 05       	cpc	r19, r13
    c296:	4e 05       	cpc	r20, r14
    c298:	5f 05       	cpc	r21, r15
    c29a:	08 f4       	brcc	.+2      	; 0xc29e <f_lseek+0x16e>
    c29c:	f7 c1       	rjmp	.+1006   	; 0xc68c <f_lseek+0x55c>
    c29e:	d8 01       	movw	r26, r16
    c2a0:	1d 92       	st	X+, r1
    c2a2:	1d 92       	st	X+, r1
    c2a4:	1d 92       	st	X+, r1
    c2a6:	1c 92       	st	X, r1
    c2a8:	13 97       	sbiw	r26, 0x03	; 3
    c2aa:	ee c1       	rjmp	.+988    	; 0xc688 <f_lseek+0x558>
    c2ac:	f1 01       	movw	r30, r2
    c2ae:	82 85       	ldd	r24, Z+10	; 0x0a
    c2b0:	93 85       	ldd	r25, Z+11	; 0x0b
    c2b2:	a4 85       	ldd	r26, Z+12	; 0x0c
    c2b4:	b5 85       	ldd	r27, Z+13	; 0x0d
    c2b6:	46 01       	movw	r8, r12
    c2b8:	57 01       	movw	r10, r14
    c2ba:	8c 15       	cp	r24, r12
    c2bc:	9d 05       	cpc	r25, r13
    c2be:	ae 05       	cpc	r26, r14
    c2c0:	bf 05       	cpc	r27, r15
    c2c2:	10 f4       	brcc	.+4      	; 0xc2c8 <f_lseek+0x198>
    c2c4:	4c 01       	movw	r8, r24
    c2c6:	5d 01       	movw	r10, r26
    c2c8:	f1 01       	movw	r30, r2
    c2ca:	80 8a       	std	Z+16, r8	; 0x10
    c2cc:	91 8a       	std	Z+17, r9	; 0x11
    c2ce:	a2 8a       	std	Z+18, r10	; 0x12
    c2d0:	b3 8a       	std	Z+19, r11	; 0x13
    c2d2:	81 14       	cp	r8, r1
    c2d4:	91 04       	cpc	r9, r1
    c2d6:	a1 04       	cpc	r10, r1
    c2d8:	b1 04       	cpc	r11, r1
    c2da:	09 f4       	brne	.+2      	; 0xc2de <f_lseek+0x1ae>
    c2dc:	d5 c1       	rjmp	.+938    	; 0xc688 <f_lseek+0x558>
    c2de:	24 01       	movw	r4, r8
    c2e0:	35 01       	movw	r6, r10
    c2e2:	f1 e0       	ldi	r31, 0x01	; 1
    c2e4:	4f 1a       	sub	r4, r31
    c2e6:	51 08       	sbc	r5, r1
    c2e8:	61 08       	sbc	r6, r1
    c2ea:	71 08       	sbc	r7, r1
    c2ec:	b3 01       	movw	r22, r6
    c2ee:	a2 01       	movw	r20, r4
    c2f0:	c1 01       	movw	r24, r2
    c2f2:	0e 94 2d 48 	call	0x905a	; 0x905a <clmt_clust>
    c2f6:	ab 01       	movw	r20, r22
    c2f8:	bc 01       	movw	r22, r24
    c2fa:	f1 01       	movw	r30, r2
    c2fc:	44 8b       	std	Z+20, r20	; 0x14
    c2fe:	55 8b       	std	Z+21, r21	; 0x15
    c300:	66 8b       	std	Z+22, r22	; 0x16
    c302:	77 8b       	std	Z+23, r23	; 0x17
    c304:	e9 80       	ldd	r14, Y+1	; 0x01
    c306:	fa 80       	ldd	r15, Y+2	; 0x02
    c308:	c7 01       	movw	r24, r14
    c30a:	0e 94 05 48 	call	0x900a	; 0x900a <clst2sect>
    c30e:	61 15       	cp	r22, r1
    c310:	71 05       	cpc	r23, r1
    c312:	81 05       	cpc	r24, r1
    c314:	91 05       	cpc	r25, r1
    c316:	09 f4       	brne	.+2      	; 0xc31a <f_lseek+0x1ea>
    c318:	69 cf       	rjmp	.-302    	; 0xc1ec <f_lseek+0xbc>
    c31a:	95 01       	movw	r18, r10
    c31c:	84 01       	movw	r16, r8
    c31e:	11 70       	andi	r17, 0x01	; 1
    c320:	22 27       	eor	r18, r18
    c322:	33 27       	eor	r19, r19
    c324:	01 15       	cp	r16, r1
    c326:	11 05       	cpc	r17, r1
    c328:	21 05       	cpc	r18, r1
    c32a:	31 05       	cpc	r19, r1
    c32c:	09 f4       	brne	.+2      	; 0xc330 <f_lseek+0x200>
    c32e:	ac c1       	rjmp	.+856    	; 0xc688 <f_lseek+0x558>
    c330:	f7 01       	movw	r30, r14
    c332:	81 84       	ldd	r8, Z+9	; 0x09
    c334:	92 84       	ldd	r9, Z+10	; 0x0a
    c336:	f1 e0       	ldi	r31, 0x01	; 1
    c338:	8f 1a       	sub	r8, r31
    c33a:	91 08       	sbc	r9, r1
    c33c:	a1 2c       	mov	r10, r1
    c33e:	b1 2c       	mov	r11, r1
    c340:	49 e0       	ldi	r20, 0x09	; 9
    c342:	76 94       	lsr	r7
    c344:	67 94       	ror	r6
    c346:	57 94       	ror	r5
    c348:	47 94       	ror	r4
    c34a:	4a 95       	dec	r20
    c34c:	d1 f7       	brne	.-12     	; 0xc342 <f_lseek+0x212>
    c34e:	48 20       	and	r4, r8
    c350:	59 20       	and	r5, r9
    c352:	6a 20       	and	r6, r10
    c354:	7b 20       	and	r7, r11
    c356:	53 01       	movw	r10, r6
    c358:	42 01       	movw	r8, r4
    c35a:	86 0e       	add	r8, r22
    c35c:	97 1e       	adc	r9, r23
    c35e:	a8 1e       	adc	r10, r24
    c360:	b9 1e       	adc	r11, r25
    c362:	f1 01       	movw	r30, r2
    c364:	20 8d       	ldd	r18, Z+24	; 0x18
    c366:	31 8d       	ldd	r19, Z+25	; 0x19
    c368:	42 8d       	ldd	r20, Z+26	; 0x1a
    c36a:	53 8d       	ldd	r21, Z+27	; 0x1b
    c36c:	82 16       	cp	r8, r18
    c36e:	93 06       	cpc	r9, r19
    c370:	a4 06       	cpc	r10, r20
    c372:	b5 06       	cpc	r11, r21
    c374:	09 f4       	brne	.+2      	; 0xc378 <f_lseek+0x248>
    c376:	88 c1       	rjmp	.+784    	; 0xc688 <f_lseek+0x558>
    c378:	86 85       	ldd	r24, Z+14	; 0x0e
    c37a:	b1 01       	movw	r22, r2
    c37c:	6c 5d       	subi	r22, 0xDC	; 220
    c37e:	7f 4f       	sbci	r23, 0xFF	; 255
    c380:	6b 01       	movw	r12, r22
    c382:	87 ff       	sbrs	r24, 7
    c384:	0d c0       	rjmp	.+26     	; 0xc3a0 <f_lseek+0x270>
    c386:	01 e0       	ldi	r16, 0x01	; 1
    c388:	10 e0       	ldi	r17, 0x00	; 0
    c38a:	f7 01       	movw	r30, r14
    c38c:	81 81       	ldd	r24, Z+1	; 0x01
    c38e:	0e 94 d6 69 	call	0xd3ac	; 0xd3ac <disk_write>
    c392:	89 2b       	or	r24, r25
    c394:	09 f0       	breq	.+2      	; 0xc398 <f_lseek+0x268>
    c396:	32 cf       	rjmp	.-412    	; 0xc1fc <f_lseek+0xcc>
    c398:	f1 01       	movw	r30, r2
    c39a:	86 85       	ldd	r24, Z+14	; 0x0e
    c39c:	8f 77       	andi	r24, 0x7F	; 127
    c39e:	86 87       	std	Z+14, r24	; 0x0e
    c3a0:	e9 81       	ldd	r30, Y+1	; 0x01
    c3a2:	fa 81       	ldd	r31, Y+2	; 0x02
    c3a4:	01 e0       	ldi	r16, 0x01	; 1
    c3a6:	10 e0       	ldi	r17, 0x00	; 0
    c3a8:	a5 01       	movw	r20, r10
    c3aa:	94 01       	movw	r18, r8
    c3ac:	b6 01       	movw	r22, r12
    c3ae:	81 81       	ldd	r24, Z+1	; 0x01
    c3b0:	ed d7       	rcall	.+4058   	; 0xd38c <disk_read>
    c3b2:	89 2b       	or	r24, r25
    c3b4:	09 f0       	breq	.+2      	; 0xc3b8 <f_lseek+0x288>
    c3b6:	22 cf       	rjmp	.-444    	; 0xc1fc <f_lseek+0xcc>
    c3b8:	f1 01       	movw	r30, r2
    c3ba:	80 8e       	std	Z+24, r8	; 0x18
    c3bc:	91 8e       	std	Z+25, r9	; 0x19
    c3be:	a2 8e       	std	Z+26, r10	; 0x1a
    c3c0:	b3 8e       	std	Z+27, r11	; 0x1b
    c3c2:	62 c1       	rjmp	.+708    	; 0xc688 <f_lseek+0x558>
    c3c4:	f1 01       	movw	r30, r2
    c3c6:	82 85       	ldd	r24, Z+10	; 0x0a
    c3c8:	93 85       	ldd	r25, Z+11	; 0x0b
    c3ca:	a4 85       	ldd	r26, Z+12	; 0x0c
    c3cc:	b5 85       	ldd	r27, Z+13	; 0x0d
    c3ce:	8c 15       	cp	r24, r12
    c3d0:	9d 05       	cpc	r25, r13
    c3d2:	ae 05       	cpc	r26, r14
    c3d4:	bf 05       	cpc	r27, r15
    c3d6:	28 f4       	brcc	.+10     	; 0xc3e2 <f_lseek+0x2b2>
    c3d8:	26 85       	ldd	r18, Z+14	; 0x0e
    c3da:	21 fd       	sbrc	r18, 1
    c3dc:	02 c0       	rjmp	.+4      	; 0xc3e2 <f_lseek+0x2b2>
    c3de:	6c 01       	movw	r12, r24
    c3e0:	7d 01       	movw	r14, r26
    c3e2:	f1 01       	movw	r30, r2
    c3e4:	40 88       	ldd	r4, Z+16	; 0x10
    c3e6:	51 88       	ldd	r5, Z+17	; 0x11
    c3e8:	62 88       	ldd	r6, Z+18	; 0x12
    c3ea:	73 88       	ldd	r7, Z+19	; 0x13
    c3ec:	10 8a       	std	Z+16, r1	; 0x10
    c3ee:	11 8a       	std	Z+17, r1	; 0x11
    c3f0:	12 8a       	std	Z+18, r1	; 0x12
    c3f2:	13 8a       	std	Z+19, r1	; 0x13
    c3f4:	c1 14       	cp	r12, r1
    c3f6:	d1 04       	cpc	r13, r1
    c3f8:	e1 04       	cpc	r14, r1
    c3fa:	f1 04       	cpc	r15, r1
    c3fc:	09 f4       	brne	.+2      	; 0xc400 <f_lseek+0x2d0>
    c3fe:	48 c1       	rjmp	.+656    	; 0xc690 <f_lseek+0x560>
    c400:	e9 81       	ldd	r30, Y+1	; 0x01
    c402:	fa 81       	ldd	r31, Y+2	; 0x02
    c404:	81 84       	ldd	r8, Z+9	; 0x09
    c406:	92 84       	ldd	r9, Z+10	; 0x0a
    c408:	a1 2c       	mov	r10, r1
    c40a:	b1 2c       	mov	r11, r1
    c40c:	39 e0       	ldi	r19, 0x09	; 9
    c40e:	88 0c       	add	r8, r8
    c410:	99 1c       	adc	r9, r9
    c412:	aa 1c       	adc	r10, r10
    c414:	bb 1c       	adc	r11, r11
    c416:	3a 95       	dec	r19
    c418:	d1 f7       	brne	.-12     	; 0xc40e <f_lseek+0x2de>
    c41a:	41 14       	cp	r4, r1
    c41c:	51 04       	cpc	r5, r1
    c41e:	61 04       	cpc	r6, r1
    c420:	71 04       	cpc	r7, r1
    c422:	d9 f1       	breq	.+118    	; 0xc49a <f_lseek+0x36a>
    c424:	f1 e0       	ldi	r31, 0x01	; 1
    c426:	4f 1a       	sub	r4, r31
    c428:	51 08       	sbc	r5, r1
    c42a:	61 08       	sbc	r6, r1
    c42c:	71 08       	sbc	r7, r1
    c42e:	c7 01       	movw	r24, r14
    c430:	b6 01       	movw	r22, r12
    c432:	61 50       	subi	r22, 0x01	; 1
    c434:	71 09       	sbc	r23, r1
    c436:	81 09       	sbc	r24, r1
    c438:	91 09       	sbc	r25, r1
    c43a:	a5 01       	movw	r20, r10
    c43c:	94 01       	movw	r18, r8
    c43e:	0e 94 a0 e6 	call	0x1cd40	; 0x1cd40 <__udivmodsi4>
    c442:	2b 83       	std	Y+3, r18	; 0x03
    c444:	3c 83       	std	Y+4, r19	; 0x04
    c446:	4d 83       	std	Y+5, r20	; 0x05
    c448:	5e 83       	std	Y+6, r21	; 0x06
    c44a:	c3 01       	movw	r24, r6
    c44c:	b2 01       	movw	r22, r4
    c44e:	a5 01       	movw	r20, r10
    c450:	94 01       	movw	r18, r8
    c452:	0e 94 a0 e6 	call	0x1cd40	; 0x1cd40 <__udivmodsi4>
    c456:	6b 81       	ldd	r22, Y+3	; 0x03
    c458:	7c 81       	ldd	r23, Y+4	; 0x04
    c45a:	8d 81       	ldd	r24, Y+5	; 0x05
    c45c:	9e 81       	ldd	r25, Y+6	; 0x06
    c45e:	62 17       	cp	r22, r18
    c460:	73 07       	cpc	r23, r19
    c462:	84 07       	cpc	r24, r20
    c464:	95 07       	cpc	r25, r21
    c466:	c8 f0       	brcs	.+50     	; 0xc49a <f_lseek+0x36a>
    c468:	88 27       	eor	r24, r24
    c46a:	99 27       	eor	r25, r25
    c46c:	dc 01       	movw	r26, r24
    c46e:	88 19       	sub	r24, r8
    c470:	99 09       	sbc	r25, r9
    c472:	aa 09       	sbc	r26, r10
    c474:	bb 09       	sbc	r27, r11
    c476:	48 22       	and	r4, r24
    c478:	59 22       	and	r5, r25
    c47a:	6a 22       	and	r6, r26
    c47c:	7b 22       	and	r7, r27
    c47e:	f1 01       	movw	r30, r2
    c480:	40 8a       	std	Z+16, r4	; 0x10
    c482:	51 8a       	std	Z+17, r5	; 0x11
    c484:	62 8a       	std	Z+18, r6	; 0x12
    c486:	73 8a       	std	Z+19, r7	; 0x13
    c488:	c4 18       	sub	r12, r4
    c48a:	d5 08       	sbc	r13, r5
    c48c:	e6 08       	sbc	r14, r6
    c48e:	f7 08       	sbc	r15, r7
    c490:	44 89       	ldd	r20, Z+20	; 0x14
    c492:	55 89       	ldd	r21, Z+21	; 0x15
    c494:	66 89       	ldd	r22, Z+22	; 0x16
    c496:	77 89       	ldd	r23, Z+23	; 0x17
    c498:	29 c0       	rjmp	.+82     	; 0xc4ec <f_lseek+0x3bc>
    c49a:	f1 01       	movw	r30, r2
    c49c:	46 81       	ldd	r20, Z+6	; 0x06
    c49e:	57 81       	ldd	r21, Z+7	; 0x07
    c4a0:	60 85       	ldd	r22, Z+8	; 0x08
    c4a2:	71 85       	ldd	r23, Z+9	; 0x09
    c4a4:	41 15       	cp	r20, r1
    c4a6:	51 05       	cpc	r21, r1
    c4a8:	61 05       	cpc	r22, r1
    c4aa:	71 05       	cpc	r23, r1
    c4ac:	d1 f4       	brne	.+52     	; 0xc4e2 <f_lseek+0x3b2>
    c4ae:	40 e0       	ldi	r20, 0x00	; 0
    c4b0:	50 e0       	ldi	r21, 0x00	; 0
    c4b2:	ba 01       	movw	r22, r20
    c4b4:	c1 01       	movw	r24, r2
    c4b6:	0e 94 d7 50 	call	0xa1ae	; 0xa1ae <create_chain>
    c4ba:	ab 01       	movw	r20, r22
    c4bc:	bc 01       	movw	r22, r24
    c4be:	41 30       	cpi	r20, 0x01	; 1
    c4c0:	51 05       	cpc	r21, r1
    c4c2:	61 05       	cpc	r22, r1
    c4c4:	71 05       	cpc	r23, r1
    c4c6:	09 f4       	brne	.+2      	; 0xc4ca <f_lseek+0x39a>
    c4c8:	91 ce       	rjmp	.-734    	; 0xc1ec <f_lseek+0xbc>
    c4ca:	4f 3f       	cpi	r20, 0xFF	; 255
    c4cc:	ff ef       	ldi	r31, 0xFF	; 255
    c4ce:	5f 07       	cpc	r21, r31
    c4d0:	6f 07       	cpc	r22, r31
    c4d2:	7f 07       	cpc	r23, r31
    c4d4:	09 f4       	brne	.+2      	; 0xc4d8 <f_lseek+0x3a8>
    c4d6:	92 ce       	rjmp	.-732    	; 0xc1fc <f_lseek+0xcc>
    c4d8:	f1 01       	movw	r30, r2
    c4da:	46 83       	std	Z+6, r20	; 0x06
    c4dc:	57 83       	std	Z+7, r21	; 0x07
    c4de:	60 87       	std	Z+8, r22	; 0x08
    c4e0:	71 87       	std	Z+9, r23	; 0x09
    c4e2:	f1 01       	movw	r30, r2
    c4e4:	44 8b       	std	Z+20, r20	; 0x14
    c4e6:	55 8b       	std	Z+21, r21	; 0x15
    c4e8:	66 8b       	std	Z+22, r22	; 0x16
    c4ea:	77 8b       	std	Z+23, r23	; 0x17
    c4ec:	41 15       	cp	r20, r1
    c4ee:	51 05       	cpc	r21, r1
    c4f0:	61 05       	cpc	r22, r1
    c4f2:	71 05       	cpc	r23, r1
    c4f4:	09 f0       	breq	.+2      	; 0xc4f8 <f_lseek+0x3c8>
    c4f6:	40 c0       	rjmp	.+128    	; 0xc578 <f_lseek+0x448>
    c4f8:	c1 2c       	mov	r12, r1
    c4fa:	d1 2c       	mov	r13, r1
    c4fc:	76 01       	movw	r14, r12
    c4fe:	79 c0       	rjmp	.+242    	; 0xc5f2 <f_lseek+0x4c2>
    c500:	c8 18       	sub	r12, r8
    c502:	d9 08       	sbc	r13, r9
    c504:	ea 08       	sbc	r14, r10
    c506:	fb 08       	sbc	r15, r11
    c508:	f1 01       	movw	r30, r2
    c50a:	80 89       	ldd	r24, Z+16	; 0x10
    c50c:	91 89       	ldd	r25, Z+17	; 0x11
    c50e:	a2 89       	ldd	r26, Z+18	; 0x12
    c510:	b3 89       	ldd	r27, Z+19	; 0x13
    c512:	88 0d       	add	r24, r8
    c514:	99 1d       	adc	r25, r9
    c516:	aa 1d       	adc	r26, r10
    c518:	bb 1d       	adc	r27, r11
    c51a:	80 8b       	std	Z+16, r24	; 0x10
    c51c:	91 8b       	std	Z+17, r25	; 0x11
    c51e:	a2 8b       	std	Z+18, r26	; 0x12
    c520:	b3 8b       	std	Z+19, r27	; 0x13
    c522:	86 85       	ldd	r24, Z+14	; 0x0e
    c524:	81 ff       	sbrs	r24, 1
    c526:	2f c0       	rjmp	.+94     	; 0xc586 <f_lseek+0x456>
    c528:	c1 01       	movw	r24, r2
    c52a:	0e 94 d7 50 	call	0xa1ae	; 0xa1ae <create_chain>
    c52e:	ab 01       	movw	r20, r22
    c530:	bc 01       	movw	r22, r24
    c532:	41 15       	cp	r20, r1
    c534:	51 05       	cpc	r21, r1
    c536:	61 05       	cpc	r22, r1
    c538:	71 05       	cpc	r23, r1
    c53a:	61 f1       	breq	.+88     	; 0xc594 <f_lseek+0x464>
    c53c:	4f 3f       	cpi	r20, 0xFF	; 255
    c53e:	bf ef       	ldi	r27, 0xFF	; 255
    c540:	5b 07       	cpc	r21, r27
    c542:	6b 07       	cpc	r22, r27
    c544:	7b 07       	cpc	r23, r27
    c546:	09 f4       	brne	.+2      	; 0xc54a <f_lseek+0x41a>
    c548:	59 ce       	rjmp	.-846    	; 0xc1fc <f_lseek+0xcc>
    c54a:	42 30       	cpi	r20, 0x02	; 2
    c54c:	51 05       	cpc	r21, r1
    c54e:	61 05       	cpc	r22, r1
    c550:	71 05       	cpc	r23, r1
    c552:	08 f4       	brcc	.+2      	; 0xc556 <f_lseek+0x426>
    c554:	4b ce       	rjmp	.-874    	; 0xc1ec <f_lseek+0xbc>
    c556:	e9 81       	ldd	r30, Y+1	; 0x01
    c558:	fa 81       	ldd	r31, Y+2	; 0x02
    c55a:	81 8d       	ldd	r24, Z+25	; 0x19
    c55c:	92 8d       	ldd	r25, Z+26	; 0x1a
    c55e:	a3 8d       	ldd	r26, Z+27	; 0x1b
    c560:	b4 8d       	ldd	r27, Z+28	; 0x1c
    c562:	48 17       	cp	r20, r24
    c564:	59 07       	cpc	r21, r25
    c566:	6a 07       	cpc	r22, r26
    c568:	7b 07       	cpc	r23, r27
    c56a:	08 f0       	brcs	.+2      	; 0xc56e <f_lseek+0x43e>
    c56c:	3f ce       	rjmp	.-898    	; 0xc1ec <f_lseek+0xbc>
    c56e:	f1 01       	movw	r30, r2
    c570:	44 8b       	std	Z+20, r20	; 0x14
    c572:	55 8b       	std	Z+21, r21	; 0x15
    c574:	66 8b       	std	Z+22, r22	; 0x16
    c576:	77 8b       	std	Z+23, r23	; 0x17
    c578:	8c 14       	cp	r8, r12
    c57a:	9d 04       	cpc	r9, r13
    c57c:	ae 04       	cpc	r10, r14
    c57e:	bf 04       	cpc	r11, r15
    c580:	08 f4       	brcc	.+2      	; 0xc584 <f_lseek+0x454>
    c582:	be cf       	rjmp	.-132    	; 0xc500 <f_lseek+0x3d0>
    c584:	0a c0       	rjmp	.+20     	; 0xc59a <f_lseek+0x46a>
    c586:	80 81       	ld	r24, Z
    c588:	91 81       	ldd	r25, Z+1	; 0x01
    c58a:	0e 94 62 4f 	call	0x9ec4	; 0x9ec4 <get_fat.isra.9>
    c58e:	ab 01       	movw	r20, r22
    c590:	bc 01       	movw	r22, r24
    c592:	d4 cf       	rjmp	.-88     	; 0xc53c <f_lseek+0x40c>
    c594:	c1 2c       	mov	r12, r1
    c596:	d1 2c       	mov	r13, r1
    c598:	76 01       	movw	r14, r12
    c59a:	f1 01       	movw	r30, r2
    c59c:	80 89       	ldd	r24, Z+16	; 0x10
    c59e:	91 89       	ldd	r25, Z+17	; 0x11
    c5a0:	a2 89       	ldd	r26, Z+18	; 0x12
    c5a2:	b3 89       	ldd	r27, Z+19	; 0x13
    c5a4:	8c 0d       	add	r24, r12
    c5a6:	9d 1d       	adc	r25, r13
    c5a8:	ae 1d       	adc	r26, r14
    c5aa:	bf 1d       	adc	r27, r15
    c5ac:	80 8b       	std	Z+16, r24	; 0x10
    c5ae:	91 8b       	std	Z+17, r25	; 0x11
    c5b0:	a2 8b       	std	Z+18, r26	; 0x12
    c5b2:	b3 8b       	std	Z+19, r27	; 0x13
    c5b4:	d7 01       	movw	r26, r14
    c5b6:	c6 01       	movw	r24, r12
    c5b8:	91 70       	andi	r25, 0x01	; 1
    c5ba:	aa 27       	eor	r26, r26
    c5bc:	bb 27       	eor	r27, r27
    c5be:	89 2b       	or	r24, r25
    c5c0:	8a 2b       	or	r24, r26
    c5c2:	8b 2b       	or	r24, r27
    c5c4:	09 f4       	brne	.+2      	; 0xc5c8 <f_lseek+0x498>
    c5c6:	98 cf       	rjmp	.-208    	; 0xc4f8 <f_lseek+0x3c8>
    c5c8:	89 81       	ldd	r24, Y+1	; 0x01
    c5ca:	9a 81       	ldd	r25, Y+2	; 0x02
    c5cc:	0e 94 05 48 	call	0x900a	; 0x900a <clst2sect>
    c5d0:	61 15       	cp	r22, r1
    c5d2:	71 05       	cpc	r23, r1
    c5d4:	81 05       	cpc	r24, r1
    c5d6:	91 05       	cpc	r25, r1
    c5d8:	09 f4       	brne	.+2      	; 0xc5dc <f_lseek+0x4ac>
    c5da:	08 ce       	rjmp	.-1008   	; 0xc1ec <f_lseek+0xbc>
    c5dc:	29 e0       	ldi	r18, 0x09	; 9
    c5de:	f6 94       	lsr	r15
    c5e0:	e7 94       	ror	r14
    c5e2:	d7 94       	ror	r13
    c5e4:	c7 94       	ror	r12
    c5e6:	2a 95       	dec	r18
    c5e8:	d1 f7       	brne	.-12     	; 0xc5de <f_lseek+0x4ae>
    c5ea:	c6 0e       	add	r12, r22
    c5ec:	d7 1e       	adc	r13, r23
    c5ee:	e8 1e       	adc	r14, r24
    c5f0:	f9 1e       	adc	r15, r25
    c5f2:	f1 01       	movw	r30, r2
    c5f4:	80 89       	ldd	r24, Z+16	; 0x10
    c5f6:	91 89       	ldd	r25, Z+17	; 0x11
    c5f8:	a2 89       	ldd	r26, Z+18	; 0x12
    c5fa:	b3 89       	ldd	r27, Z+19	; 0x13
    c5fc:	42 85       	ldd	r20, Z+10	; 0x0a
    c5fe:	53 85       	ldd	r21, Z+11	; 0x0b
    c600:	64 85       	ldd	r22, Z+12	; 0x0c
    c602:	75 85       	ldd	r23, Z+13	; 0x0d
    c604:	48 17       	cp	r20, r24
    c606:	59 07       	cpc	r21, r25
    c608:	6a 07       	cpc	r22, r26
    c60a:	7b 07       	cpc	r23, r27
    c60c:	38 f4       	brcc	.+14     	; 0xc61c <f_lseek+0x4ec>
    c60e:	82 87       	std	Z+10, r24	; 0x0a
    c610:	93 87       	std	Z+11, r25	; 0x0b
    c612:	a4 87       	std	Z+12, r26	; 0x0c
    c614:	b5 87       	std	Z+13, r27	; 0x0d
    c616:	26 85       	ldd	r18, Z+14	; 0x0e
    c618:	20 64       	ori	r18, 0x40	; 64
    c61a:	26 87       	std	Z+14, r18	; 0x0e
    c61c:	91 70       	andi	r25, 0x01	; 1
    c61e:	aa 27       	eor	r26, r26
    c620:	bb 27       	eor	r27, r27
    c622:	89 2b       	or	r24, r25
    c624:	8a 2b       	or	r24, r26
    c626:	8b 2b       	or	r24, r27
    c628:	79 f1       	breq	.+94     	; 0xc688 <f_lseek+0x558>
    c62a:	f1 01       	movw	r30, r2
    c62c:	20 8d       	ldd	r18, Z+24	; 0x18
    c62e:	31 8d       	ldd	r19, Z+25	; 0x19
    c630:	42 8d       	ldd	r20, Z+26	; 0x1a
    c632:	53 8d       	ldd	r21, Z+27	; 0x1b
    c634:	2c 15       	cp	r18, r12
    c636:	3d 05       	cpc	r19, r13
    c638:	4e 05       	cpc	r20, r14
    c63a:	5f 05       	cpc	r21, r15
    c63c:	29 f1       	breq	.+74     	; 0xc688 <f_lseek+0x558>
    c63e:	86 85       	ldd	r24, Z+14	; 0x0e
    c640:	b1 01       	movw	r22, r2
    c642:	6c 5d       	subi	r22, 0xDC	; 220
    c644:	7f 4f       	sbci	r23, 0xFF	; 255
    c646:	5b 01       	movw	r10, r22
    c648:	87 ff       	sbrs	r24, 7
    c64a:	0d c0       	rjmp	.+26     	; 0xc666 <f_lseek+0x536>
    c64c:	e9 81       	ldd	r30, Y+1	; 0x01
    c64e:	fa 81       	ldd	r31, Y+2	; 0x02
    c650:	01 e0       	ldi	r16, 0x01	; 1
    c652:	10 e0       	ldi	r17, 0x00	; 0
    c654:	81 81       	ldd	r24, Z+1	; 0x01
    c656:	aa d6       	rcall	.+3412   	; 0xd3ac <disk_write>
    c658:	89 2b       	or	r24, r25
    c65a:	09 f0       	breq	.+2      	; 0xc65e <f_lseek+0x52e>
    c65c:	cf cd       	rjmp	.-1122   	; 0xc1fc <f_lseek+0xcc>
    c65e:	f1 01       	movw	r30, r2
    c660:	86 85       	ldd	r24, Z+14	; 0x0e
    c662:	8f 77       	andi	r24, 0x7F	; 127
    c664:	86 87       	std	Z+14, r24	; 0x0e
    c666:	e9 81       	ldd	r30, Y+1	; 0x01
    c668:	fa 81       	ldd	r31, Y+2	; 0x02
    c66a:	01 e0       	ldi	r16, 0x01	; 1
    c66c:	10 e0       	ldi	r17, 0x00	; 0
    c66e:	a7 01       	movw	r20, r14
    c670:	96 01       	movw	r18, r12
    c672:	b5 01       	movw	r22, r10
    c674:	81 81       	ldd	r24, Z+1	; 0x01
    c676:	8a d6       	rcall	.+3348   	; 0xd38c <disk_read>
    c678:	89 2b       	or	r24, r25
    c67a:	09 f0       	breq	.+2      	; 0xc67e <f_lseek+0x54e>
    c67c:	bf cd       	rjmp	.-1154   	; 0xc1fc <f_lseek+0xcc>
    c67e:	f1 01       	movw	r30, r2
    c680:	c0 8e       	std	Z+24, r12	; 0x18
    c682:	d1 8e       	std	Z+25, r13	; 0x19
    c684:	e2 8e       	std	Z+26, r14	; 0x1a
    c686:	f3 8e       	std	Z+27, r15	; 0x1b
    c688:	80 e0       	ldi	r24, 0x00	; 0
    c68a:	bb cd       	rjmp	.-1162   	; 0xc202 <f_lseek+0xd2>
    c68c:	81 e1       	ldi	r24, 0x11	; 17
    c68e:	b9 cd       	rjmp	.-1166   	; 0xc202 <f_lseek+0xd2>
    c690:	80 e0       	ldi	r24, 0x00	; 0
    c692:	90 e0       	ldi	r25, 0x00	; 0
    c694:	dc 01       	movw	r26, r24
    c696:	c1 2c       	mov	r12, r1
    c698:	d1 2c       	mov	r13, r1
    c69a:	76 01       	movw	r14, r12
    c69c:	bf cf       	rjmp	.-130    	; 0xc61c <f_lseek+0x4ec>
    c69e:	2a 96       	adiw	r28, 0x0a	; 10
    c6a0:	e2 e1       	ldi	r30, 0x12	; 18
    c6a2:	0c 94 29 e7 	jmp	0x1ce52	; 0x1ce52 <__epilogue_restores__>

0000c6a6 <f_opendir>:
    c6a6:	a4 e0       	ldi	r26, 0x04	; 4
    c6a8:	b0 e0       	ldi	r27, 0x00	; 0
    c6aa:	e9 e5       	ldi	r30, 0x59	; 89
    c6ac:	f3 e6       	ldi	r31, 0x63	; 99
    c6ae:	0c 94 17 e7 	jmp	0x1ce2e	; 0x1ce2e <__prologue_saves__+0x14>
    c6b2:	7c 83       	std	Y+4, r23	; 0x04
    c6b4:	6b 83       	std	Y+3, r22	; 0x03
    c6b6:	00 97       	sbiw	r24, 0x00	; 0
    c6b8:	09 f4       	brne	.+2      	; 0xc6bc <f_opendir+0x16>
    c6ba:	48 c0       	rjmp	.+144    	; 0xc74c <f_opendir+0xa6>
    c6bc:	8c 01       	movw	r16, r24
    c6be:	40 e0       	ldi	r20, 0x00	; 0
    c6c0:	be 01       	movw	r22, r28
    c6c2:	6f 5f       	subi	r22, 0xFF	; 255
    c6c4:	7f 4f       	sbci	r23, 0xFF	; 255
    c6c6:	ce 01       	movw	r24, r28
    c6c8:	03 96       	adiw	r24, 0x03	; 3
    c6ca:	0e 94 0f 4c 	call	0x981e	; 0x981e <mount_volume>
    c6ce:	7c 01       	movw	r14, r24
    c6d0:	89 2b       	or	r24, r25
    c6d2:	b9 f5       	brne	.+110    	; 0xc742 <f_opendir+0x9c>
    c6d4:	89 81       	ldd	r24, Y+1	; 0x01
    c6d6:	9a 81       	ldd	r25, Y+2	; 0x02
    c6d8:	f8 01       	movw	r30, r16
    c6da:	91 83       	std	Z+1, r25	; 0x01
    c6dc:	80 83       	st	Z, r24
    c6de:	80 e0       	ldi	r24, 0x00	; 0
    c6e0:	92 e0       	ldi	r25, 0x02	; 2
    c6e2:	98 d5       	rcall	.+2864   	; 0xd214 <ff_memalloc>
    c6e4:	6c 01       	movw	r12, r24
    c6e6:	00 97       	sbiw	r24, 0x00	; 0
    c6e8:	99 f1       	breq	.+102    	; 0xc750 <f_opendir+0xaa>
    c6ea:	e9 81       	ldd	r30, Y+1	; 0x01
    c6ec:	fa 81       	ldd	r31, Y+2	; 0x02
    c6ee:	94 87       	std	Z+12, r25	; 0x0c
    c6f0:	83 87       	std	Z+11, r24	; 0x0b
    c6f2:	6b 81       	ldd	r22, Y+3	; 0x03
    c6f4:	7c 81       	ldd	r23, Y+4	; 0x04
    c6f6:	c8 01       	movw	r24, r16
    c6f8:	0e 94 5c 57 	call	0xaeb8	; 0xaeb8 <follow_path>
    c6fc:	7c 01       	movw	r14, r24
    c6fe:	89 2b       	or	r24, r25
    c700:	b9 f4       	brne	.+46     	; 0xc730 <f_opendir+0x8a>
    c702:	f8 01       	movw	r30, r16
    c704:	87 a1       	ldd	r24, Z+39	; 0x27
    c706:	87 fd       	sbrc	r24, 7
    c708:	28 c0       	rjmp	.+80     	; 0xc75a <f_opendir+0xb4>
    c70a:	84 81       	ldd	r24, Z+4	; 0x04
    c70c:	84 ff       	sbrs	r24, 4
    c70e:	0d c0       	rjmp	.+26     	; 0xc72a <f_opendir+0x84>
    c710:	62 8d       	ldd	r22, Z+26	; 0x1a
    c712:	73 8d       	ldd	r23, Z+27	; 0x1b
    c714:	e9 81       	ldd	r30, Y+1	; 0x01
    c716:	fa 81       	ldd	r31, Y+2	; 0x02
    c718:	80 81       	ld	r24, Z
    c71a:	0e 94 05 4a 	call	0x940a	; 0x940a <ld_clust.isra.3>
    c71e:	f8 01       	movw	r30, r16
    c720:	66 83       	std	Z+6, r22	; 0x06
    c722:	77 83       	std	Z+7, r23	; 0x07
    c724:	80 87       	std	Z+8, r24	; 0x08
    c726:	91 87       	std	Z+9, r25	; 0x09
    c728:	18 c0       	rjmp	.+48     	; 0xc75a <f_opendir+0xb4>
    c72a:	95 e0       	ldi	r25, 0x05	; 5
    c72c:	e9 2e       	mov	r14, r25
    c72e:	f1 2c       	mov	r15, r1
    c730:	c6 01       	movw	r24, r12
    c732:	73 d5       	rcall	.+2790   	; 0xd21a <ff_memfree>
    c734:	f4 e0       	ldi	r31, 0x04	; 4
    c736:	ef 16       	cp	r14, r31
    c738:	f1 04       	cpc	r15, r1
    c73a:	f1 f0       	breq	.+60     	; 0xc778 <f_opendir+0xd2>
    c73c:	e1 14       	cp	r14, r1
    c73e:	f1 04       	cpc	r15, r1
    c740:	49 f0       	breq	.+18     	; 0xc754 <f_opendir+0xae>
    c742:	f8 01       	movw	r30, r16
    c744:	11 82       	std	Z+1, r1	; 0x01
    c746:	10 82       	st	Z, r1
    c748:	c7 01       	movw	r24, r14
    c74a:	1a c0       	rjmp	.+52     	; 0xc780 <f_opendir+0xda>
    c74c:	89 e0       	ldi	r24, 0x09	; 9
    c74e:	03 c0       	rjmp	.+6      	; 0xc756 <f_opendir+0xb0>
    c750:	81 e1       	ldi	r24, 0x11	; 17
    c752:	01 c0       	rjmp	.+2      	; 0xc756 <f_opendir+0xb0>
    c754:	80 e0       	ldi	r24, 0x00	; 0
    c756:	90 e0       	ldi	r25, 0x00	; 0
    c758:	13 c0       	rjmp	.+38     	; 0xc780 <f_opendir+0xda>
    c75a:	e9 81       	ldd	r30, Y+1	; 0x01
    c75c:	fa 81       	ldd	r31, Y+2	; 0x02
    c75e:	85 81       	ldd	r24, Z+5	; 0x05
    c760:	96 81       	ldd	r25, Z+6	; 0x06
    c762:	f8 01       	movw	r30, r16
    c764:	93 83       	std	Z+3, r25	; 0x03
    c766:	82 83       	std	Z+2, r24	; 0x02
    c768:	40 e0       	ldi	r20, 0x00	; 0
    c76a:	50 e0       	ldi	r21, 0x00	; 0
    c76c:	ba 01       	movw	r22, r20
    c76e:	c8 01       	movw	r24, r16
    c770:	0e 94 16 50 	call	0xa02c	; 0xa02c <dir_sdi>
    c774:	7c 01       	movw	r14, r24
    c776:	dc cf       	rjmp	.-72     	; 0xc730 <f_opendir+0x8a>
    c778:	85 e0       	ldi	r24, 0x05	; 5
    c77a:	e8 2e       	mov	r14, r24
    c77c:	f1 2c       	mov	r15, r1
    c77e:	e1 cf       	rjmp	.-62     	; 0xc742 <f_opendir+0x9c>
    c780:	24 96       	adiw	r28, 0x04	; 4
    c782:	e8 e0       	ldi	r30, 0x08	; 8
    c784:	0c 94 33 e7 	jmp	0x1ce66	; 0x1ce66 <__epilogue_restores__+0x14>

0000c788 <f_closedir>:
    c788:	a2 e0       	ldi	r26, 0x02	; 2
    c78a:	b0 e0       	ldi	r27, 0x00	; 0
    c78c:	ea ec       	ldi	r30, 0xCA	; 202
    c78e:	f3 e6       	ldi	r31, 0x63	; 99
    c790:	0c 94 1b e7 	jmp	0x1ce36	; 0x1ce36 <__prologue_saves__+0x1c>
    c794:	8c 01       	movw	r16, r24
    c796:	be 01       	movw	r22, r28
    c798:	6f 5f       	subi	r22, 0xFF	; 255
    c79a:	7f 4f       	sbci	r23, 0xFF	; 255
    c79c:	0e 94 a4 48 	call	0x9148	; 0x9148 <validate>
    c7a0:	00 97       	sbiw	r24, 0x00	; 0
    c7a2:	19 f4       	brne	.+6      	; 0xc7aa <f_closedir+0x22>
    c7a4:	f8 01       	movw	r30, r16
    c7a6:	11 82       	std	Z+1, r1	; 0x01
    c7a8:	10 82       	st	Z, r1
    c7aa:	22 96       	adiw	r28, 0x02	; 2
    c7ac:	e4 e0       	ldi	r30, 0x04	; 4
    c7ae:	0c 94 37 e7 	jmp	0x1ce6e	; 0x1ce6e <__epilogue_restores__+0x1c>

0000c7b2 <f_readdir>:
    c7b2:	a2 e0       	ldi	r26, 0x02	; 2
    c7b4:	b0 e0       	ldi	r27, 0x00	; 0
    c7b6:	ef ed       	ldi	r30, 0xDF	; 223
    c7b8:	f3 e6       	ldi	r31, 0x63	; 99
    c7ba:	0c 94 15 e7 	jmp	0x1ce2a	; 0x1ce2a <__prologue_saves__+0x10>
    c7be:	7c 01       	movw	r14, r24
    c7c0:	5b 01       	movw	r10, r22
    c7c2:	be 01       	movw	r22, r28
    c7c4:	6f 5f       	subi	r22, 0xFF	; 255
    c7c6:	7f 4f       	sbci	r23, 0xFF	; 255
    c7c8:	0e 94 a4 48 	call	0x9148	; 0x9148 <validate>
    c7cc:	00 97       	sbiw	r24, 0x00	; 0
    c7ce:	89 f5       	brne	.+98     	; 0xc832 <f_readdir+0x80>
    c7d0:	a1 14       	cp	r10, r1
    c7d2:	b1 04       	cpc	r11, r1
    c7d4:	39 f4       	brne	.+14     	; 0xc7e4 <f_readdir+0x32>
    c7d6:	40 e0       	ldi	r20, 0x00	; 0
    c7d8:	50 e0       	ldi	r21, 0x00	; 0
    c7da:	ba 01       	movw	r22, r20
    c7dc:	c7 01       	movw	r24, r14
    c7de:	0e 94 16 50 	call	0xa02c	; 0xa02c <dir_sdi>
    c7e2:	27 c0       	rjmp	.+78     	; 0xc832 <f_readdir+0x80>
    c7e4:	80 e0       	ldi	r24, 0x00	; 0
    c7e6:	92 e0       	ldi	r25, 0x02	; 2
    c7e8:	15 d5       	rcall	.+2602   	; 0xd214 <ff_memalloc>
    c7ea:	6c 01       	movw	r12, r24
    c7ec:	00 97       	sbiw	r24, 0x00	; 0
    c7ee:	f9 f0       	breq	.+62     	; 0xc82e <f_readdir+0x7c>
    c7f0:	e9 81       	ldd	r30, Y+1	; 0x01
    c7f2:	fa 81       	ldd	r31, Y+2	; 0x02
    c7f4:	94 87       	std	Z+12, r25	; 0x0c
    c7f6:	83 87       	std	Z+11, r24	; 0x0b
    c7f8:	60 e0       	ldi	r22, 0x00	; 0
    c7fa:	70 e0       	ldi	r23, 0x00	; 0
    c7fc:	c7 01       	movw	r24, r14
    c7fe:	0e 94 af 53 	call	0xa75e	; 0xa75e <dir_read>
    c802:	8c 01       	movw	r16, r24
    c804:	8b 7f       	andi	r24, 0xFB	; 251
    c806:	89 2b       	or	r24, r25
    c808:	71 f4       	brne	.+28     	; 0xc826 <f_readdir+0x74>
    c80a:	b5 01       	movw	r22, r10
    c80c:	c7 01       	movw	r24, r14
    c80e:	0e 94 d0 48 	call	0x91a0	; 0x91a0 <get_fileinfo>
    c812:	60 e0       	ldi	r22, 0x00	; 0
    c814:	70 e0       	ldi	r23, 0x00	; 0
    c816:	c7 01       	movw	r24, r14
    c818:	0e 94 8e 52 	call	0xa51c	; 0xa51c <dir_next>
    c81c:	8c 01       	movw	r16, r24
    c81e:	04 97       	sbiw	r24, 0x04	; 4
    c820:	11 f4       	brne	.+4      	; 0xc826 <f_readdir+0x74>
    c822:	00 e0       	ldi	r16, 0x00	; 0
    c824:	10 e0       	ldi	r17, 0x00	; 0
    c826:	c6 01       	movw	r24, r12
    c828:	f8 d4       	rcall	.+2544   	; 0xd21a <ff_memfree>
    c82a:	c8 01       	movw	r24, r16
    c82c:	02 c0       	rjmp	.+4      	; 0xc832 <f_readdir+0x80>
    c82e:	81 e1       	ldi	r24, 0x11	; 17
    c830:	90 e0       	ldi	r25, 0x00	; 0
    c832:	22 96       	adiw	r28, 0x02	; 2
    c834:	ea e0       	ldi	r30, 0x0A	; 10
    c836:	0c 94 31 e7 	jmp	0x1ce62	; 0x1ce62 <__epilogue_restores__+0x10>

0000c83a <f_stat>:
    c83a:	a0 e3       	ldi	r26, 0x30	; 48
    c83c:	b0 e0       	ldi	r27, 0x00	; 0
    c83e:	e3 e2       	ldi	r30, 0x23	; 35
    c840:	f4 e6       	ldi	r31, 0x64	; 100
    c842:	0c 94 17 e7 	jmp	0x1ce2e	; 0x1ce2e <__prologue_saves__+0x14>
    c846:	98 ab       	std	Y+48, r25	; 0x30
    c848:	8f a7       	std	Y+47, r24	; 0x2f
    c84a:	6b 01       	movw	r12, r22
    c84c:	40 e0       	ldi	r20, 0x00	; 0
    c84e:	be 01       	movw	r22, r28
    c850:	6f 5f       	subi	r22, 0xFF	; 255
    c852:	7f 4f       	sbci	r23, 0xFF	; 255
    c854:	ce 01       	movw	r24, r28
    c856:	8f 96       	adiw	r24, 0x2f	; 47
    c858:	0e 94 0f 4c 	call	0x981e	; 0x981e <mount_volume>
    c85c:	00 97       	sbiw	r24, 0x00	; 0
    c85e:	39 f5       	brne	.+78     	; 0xc8ae <f_stat+0x74>
    c860:	80 e0       	ldi	r24, 0x00	; 0
    c862:	92 e0       	ldi	r25, 0x02	; 2
    c864:	d7 d4       	rcall	.+2478   	; 0xd214 <ff_memalloc>
    c866:	7c 01       	movw	r14, r24
    c868:	00 97       	sbiw	r24, 0x00	; 0
    c86a:	f9 f0       	breq	.+62     	; 0xc8aa <f_stat+0x70>
    c86c:	e9 81       	ldd	r30, Y+1	; 0x01
    c86e:	fa 81       	ldd	r31, Y+2	; 0x02
    c870:	94 87       	std	Z+12, r25	; 0x0c
    c872:	83 87       	std	Z+11, r24	; 0x0b
    c874:	6f a5       	ldd	r22, Y+47	; 0x2f
    c876:	78 a9       	ldd	r23, Y+48	; 0x30
    c878:	ce 01       	movw	r24, r28
    c87a:	01 96       	adiw	r24, 0x01	; 1
    c87c:	0e 94 5c 57 	call	0xaeb8	; 0xaeb8 <follow_path>
    c880:	8c 01       	movw	r16, r24
    c882:	89 2b       	or	r24, r25
    c884:	71 f4       	brne	.+28     	; 0xc8a2 <f_stat+0x68>
    c886:	88 a5       	ldd	r24, Y+40	; 0x28
    c888:	87 fd       	sbrc	r24, 7
    c88a:	09 c0       	rjmp	.+18     	; 0xc89e <f_stat+0x64>
    c88c:	c1 14       	cp	r12, r1
    c88e:	d1 04       	cpc	r13, r1
    c890:	41 f0       	breq	.+16     	; 0xc8a2 <f_stat+0x68>
    c892:	b6 01       	movw	r22, r12
    c894:	ce 01       	movw	r24, r28
    c896:	01 96       	adiw	r24, 0x01	; 1
    c898:	0e 94 d0 48 	call	0x91a0	; 0x91a0 <get_fileinfo>
    c89c:	02 c0       	rjmp	.+4      	; 0xc8a2 <f_stat+0x68>
    c89e:	06 e0       	ldi	r16, 0x06	; 6
    c8a0:	10 e0       	ldi	r17, 0x00	; 0
    c8a2:	c7 01       	movw	r24, r14
    c8a4:	ba d4       	rcall	.+2420   	; 0xd21a <ff_memfree>
    c8a6:	c8 01       	movw	r24, r16
    c8a8:	02 c0       	rjmp	.+4      	; 0xc8ae <f_stat+0x74>
    c8aa:	81 e1       	ldi	r24, 0x11	; 17
    c8ac:	90 e0       	ldi	r25, 0x00	; 0
    c8ae:	e0 96       	adiw	r28, 0x30	; 48
    c8b0:	e8 e0       	ldi	r30, 0x08	; 8
    c8b2:	0c 94 33 e7 	jmp	0x1ce66	; 0x1ce66 <__epilogue_restores__+0x14>

0000c8b6 <f_getfree>:
    c8b6:	aa e0       	ldi	r26, 0x0A	; 10
    c8b8:	b0 e0       	ldi	r27, 0x00	; 0
    c8ba:	e1 e6       	ldi	r30, 0x61	; 97
    c8bc:	f4 e6       	ldi	r31, 0x64	; 100
    c8be:	0c 94 0d e7 	jmp	0x1ce1a	; 0x1ce1a <__prologue_saves__>
    c8c2:	9c 83       	std	Y+4, r25	; 0x04
    c8c4:	8b 83       	std	Y+3, r24	; 0x03
    c8c6:	7e 83       	std	Y+6, r23	; 0x06
    c8c8:	6d 83       	std	Y+5, r22	; 0x05
    c8ca:	7a 01       	movw	r14, r20
    c8cc:	40 e0       	ldi	r20, 0x00	; 0
    c8ce:	be 01       	movw	r22, r28
    c8d0:	6f 5f       	subi	r22, 0xFF	; 255
    c8d2:	7f 4f       	sbci	r23, 0xFF	; 255
    c8d4:	ce 01       	movw	r24, r28
    c8d6:	03 96       	adiw	r24, 0x03	; 3
    c8d8:	0e 94 0f 4c 	call	0x981e	; 0x981e <mount_volume>
    c8dc:	8c 01       	movw	r16, r24
    c8de:	89 2b       	or	r24, r25
    c8e0:	09 f0       	breq	.+2      	; 0xc8e4 <f_getfree+0x2e>
    c8e2:	c4 c0       	rjmp	.+392    	; 0xca6c <f_getfree+0x1b6>
    c8e4:	69 80       	ldd	r6, Y+1	; 0x01
    c8e6:	7a 80       	ldd	r7, Y+2	; 0x02
    c8e8:	d7 01       	movw	r26, r14
    c8ea:	6d 92       	st	X+, r6
    c8ec:	7c 92       	st	X, r7
    c8ee:	f3 01       	movw	r30, r6
    c8f0:	81 89       	ldd	r24, Z+17	; 0x11
    c8f2:	92 89       	ldd	r25, Z+18	; 0x12
    c8f4:	a3 89       	ldd	r26, Z+19	; 0x13
    c8f6:	b4 89       	ldd	r27, Z+20	; 0x14
    c8f8:	81 8c       	ldd	r8, Z+25	; 0x19
    c8fa:	92 8c       	ldd	r9, Z+26	; 0x1a
    c8fc:	a3 8c       	ldd	r10, Z+27	; 0x1b
    c8fe:	b4 8c       	ldd	r11, Z+28	; 0x1c
    c900:	b5 01       	movw	r22, r10
    c902:	a4 01       	movw	r20, r8
    c904:	42 50       	subi	r20, 0x02	; 2
    c906:	51 09       	sbc	r21, r1
    c908:	61 09       	sbc	r22, r1
    c90a:	71 09       	sbc	r23, r1
    c90c:	48 17       	cp	r20, r24
    c90e:	59 07       	cpc	r21, r25
    c910:	6a 07       	cpc	r22, r26
    c912:	7b 07       	cpc	r23, r27
    c914:	38 f0       	brcs	.+14     	; 0xc924 <f_getfree+0x6e>
    c916:	ed 81       	ldd	r30, Y+5	; 0x05
    c918:	fe 81       	ldd	r31, Y+6	; 0x06
    c91a:	80 83       	st	Z, r24
    c91c:	91 83       	std	Z+1, r25	; 0x01
    c91e:	a2 83       	std	Z+2, r26	; 0x02
    c920:	b3 83       	std	Z+3, r27	; 0x03
    c922:	a4 c0       	rjmp	.+328    	; 0xca6c <f_getfree+0x1b6>
    c924:	80 81       	ld	r24, Z
    c926:	81 30       	cpi	r24, 0x01	; 1
    c928:	a1 f5       	brne	.+104    	; 0xc992 <f_getfree+0xdc>
    c92a:	82 e0       	ldi	r24, 0x02	; 2
    c92c:	88 2e       	mov	r8, r24
    c92e:	91 2c       	mov	r9, r1
    c930:	a1 2c       	mov	r10, r1
    c932:	b1 2c       	mov	r11, r1
    c934:	c1 2c       	mov	r12, r1
    c936:	d1 2c       	mov	r13, r1
    c938:	76 01       	movw	r14, r12
    c93a:	b5 01       	movw	r22, r10
    c93c:	a4 01       	movw	r20, r8
    c93e:	c3 01       	movw	r24, r6
    c940:	0e 94 62 4f 	call	0x9ec4	; 0x9ec4 <get_fat.isra.9>
    c944:	6f 3f       	cpi	r22, 0xFF	; 255
    c946:	bf ef       	ldi	r27, 0xFF	; 255
    c948:	7b 07       	cpc	r23, r27
    c94a:	8b 07       	cpc	r24, r27
    c94c:	9b 07       	cpc	r25, r27
    c94e:	09 f4       	brne	.+2      	; 0xc952 <f_getfree+0x9c>
    c950:	76 c0       	rjmp	.+236    	; 0xca3e <f_getfree+0x188>
    c952:	61 30       	cpi	r22, 0x01	; 1
    c954:	71 05       	cpc	r23, r1
    c956:	81 05       	cpc	r24, r1
    c958:	91 05       	cpc	r25, r1
    c95a:	09 f4       	brne	.+2      	; 0xc95e <f_getfree+0xa8>
    c95c:	73 c0       	rjmp	.+230    	; 0xca44 <f_getfree+0x18e>
    c95e:	67 2b       	or	r22, r23
    c960:	68 2b       	or	r22, r24
    c962:	69 2b       	or	r22, r25
    c964:	29 f4       	brne	.+10     	; 0xc970 <f_getfree+0xba>
    c966:	ef ef       	ldi	r30, 0xFF	; 255
    c968:	ce 1a       	sub	r12, r30
    c96a:	de 0a       	sbc	r13, r30
    c96c:	ee 0a       	sbc	r14, r30
    c96e:	fe 0a       	sbc	r15, r30
    c970:	ff ef       	ldi	r31, 0xFF	; 255
    c972:	8f 1a       	sub	r8, r31
    c974:	9f 0a       	sbc	r9, r31
    c976:	af 0a       	sbc	r10, r31
    c978:	bf 0a       	sbc	r11, r31
    c97a:	e9 81       	ldd	r30, Y+1	; 0x01
    c97c:	fa 81       	ldd	r31, Y+2	; 0x02
    c97e:	81 8d       	ldd	r24, Z+25	; 0x19
    c980:	92 8d       	ldd	r25, Z+26	; 0x1a
    c982:	a3 8d       	ldd	r26, Z+27	; 0x1b
    c984:	b4 8d       	ldd	r27, Z+28	; 0x1c
    c986:	88 16       	cp	r8, r24
    c988:	99 06       	cpc	r9, r25
    c98a:	aa 06       	cpc	r10, r26
    c98c:	bb 06       	cpc	r11, r27
    c98e:	a8 f2       	brcs	.-86     	; 0xc93a <f_getfree+0x84>
    c990:	5d c0       	rjmp	.+186    	; 0xca4c <f_getfree+0x196>
    c992:	f3 01       	movw	r30, r6
    c994:	45 a0       	ldd	r4, Z+37	; 0x25
    c996:	56 a0       	ldd	r5, Z+38	; 0x26
    c998:	67 a0       	ldd	r6, Z+39	; 0x27
    c99a:	70 a4       	ldd	r7, Z+40	; 0x28
    c99c:	21 2c       	mov	r2, r1
    c99e:	31 2c       	mov	r3, r1
    c9a0:	c1 2c       	mov	r12, r1
    c9a2:	d1 2c       	mov	r13, r1
    c9a4:	76 01       	movw	r14, r12
    c9a6:	21 14       	cp	r2, r1
    c9a8:	31 04       	cpc	r3, r1
    c9aa:	b1 f4       	brne	.+44     	; 0xc9d8 <f_getfree+0x122>
    c9ac:	d3 01       	movw	r26, r6
    c9ae:	c2 01       	movw	r24, r4
    c9b0:	01 96       	adiw	r24, 0x01	; 1
    c9b2:	a1 1d       	adc	r26, r1
    c9b4:	b1 1d       	adc	r27, r1
    c9b6:	8f 83       	std	Y+7, r24	; 0x07
    c9b8:	98 87       	std	Y+8, r25	; 0x08
    c9ba:	a9 87       	std	Y+9, r26	; 0x09
    c9bc:	ba 87       	std	Y+10, r27	; 0x0a
    c9be:	b3 01       	movw	r22, r6
    c9c0:	a2 01       	movw	r20, r4
    c9c2:	89 81       	ldd	r24, Y+1	; 0x01
    c9c4:	9a 81       	ldd	r25, Y+2	; 0x02
    c9c6:	0e 94 94 4b 	call	0x9728	; 0x9728 <move_window>
    c9ca:	00 97       	sbiw	r24, 0x00	; 0
    c9cc:	09 f0       	breq	.+2      	; 0xc9d0 <f_getfree+0x11a>
    c9ce:	3d c0       	rjmp	.+122    	; 0xca4a <f_getfree+0x194>
    c9d0:	4f 80       	ldd	r4, Y+7	; 0x07
    c9d2:	58 84       	ldd	r5, Y+8	; 0x08
    c9d4:	69 84       	ldd	r6, Y+9	; 0x09
    c9d6:	7a 84       	ldd	r7, Y+10	; 0x0a
    c9d8:	e9 81       	ldd	r30, Y+1	; 0x01
    c9da:	fa 81       	ldd	r31, Y+2	; 0x02
    c9dc:	80 81       	ld	r24, Z
    c9de:	82 30       	cpi	r24, 0x02	; 2
    c9e0:	79 f4       	brne	.+30     	; 0xca00 <f_getfree+0x14a>
    c9e2:	e2 0d       	add	r30, r2
    c9e4:	f3 1d       	adc	r31, r3
    c9e6:	85 a9       	ldd	r24, Z+53	; 0x35
    c9e8:	96 a9       	ldd	r25, Z+54	; 0x36
    c9ea:	89 2b       	or	r24, r25
    c9ec:	29 f4       	brne	.+10     	; 0xc9f8 <f_getfree+0x142>
    c9ee:	9f ef       	ldi	r25, 0xFF	; 255
    c9f0:	c9 1a       	sub	r12, r25
    c9f2:	d9 0a       	sbc	r13, r25
    c9f4:	e9 0a       	sbc	r14, r25
    c9f6:	f9 0a       	sbc	r15, r25
    c9f8:	a2 e0       	ldi	r26, 0x02	; 2
    c9fa:	2a 0e       	add	r2, r26
    c9fc:	31 1c       	adc	r3, r1
    c9fe:	15 c0       	rjmp	.+42     	; 0xca2a <f_getfree+0x174>
    ca00:	cf 01       	movw	r24, r30
    ca02:	c5 96       	adiw	r24, 0x35	; 53
    ca04:	82 0d       	add	r24, r2
    ca06:	93 1d       	adc	r25, r3
    ca08:	0e 94 d2 47 	call	0x8fa4	; 0x8fa4 <ld_dword>
    ca0c:	dc 01       	movw	r26, r24
    ca0e:	cb 01       	movw	r24, r22
    ca10:	bf 70       	andi	r27, 0x0F	; 15
    ca12:	89 2b       	or	r24, r25
    ca14:	8a 2b       	or	r24, r26
    ca16:	8b 2b       	or	r24, r27
    ca18:	29 f4       	brne	.+10     	; 0xca24 <f_getfree+0x16e>
    ca1a:	bf ef       	ldi	r27, 0xFF	; 255
    ca1c:	cb 1a       	sub	r12, r27
    ca1e:	db 0a       	sbc	r13, r27
    ca20:	eb 0a       	sbc	r14, r27
    ca22:	fb 0a       	sbc	r15, r27
    ca24:	e4 e0       	ldi	r30, 0x04	; 4
    ca26:	2e 0e       	add	r2, r30
    ca28:	31 1c       	adc	r3, r1
    ca2a:	f1 e0       	ldi	r31, 0x01	; 1
    ca2c:	3f 22       	and	r3, r31
    ca2e:	21 e0       	ldi	r18, 0x01	; 1
    ca30:	82 1a       	sub	r8, r18
    ca32:	91 08       	sbc	r9, r1
    ca34:	a1 08       	sbc	r10, r1
    ca36:	b1 08       	sbc	r11, r1
    ca38:	09 f0       	breq	.+2      	; 0xca3c <f_getfree+0x186>
    ca3a:	b5 cf       	rjmp	.-150    	; 0xc9a6 <f_getfree+0xf0>
    ca3c:	07 c0       	rjmp	.+14     	; 0xca4c <f_getfree+0x196>
    ca3e:	01 e0       	ldi	r16, 0x01	; 1
    ca40:	10 e0       	ldi	r17, 0x00	; 0
    ca42:	04 c0       	rjmp	.+8      	; 0xca4c <f_getfree+0x196>
    ca44:	02 e0       	ldi	r16, 0x02	; 2
    ca46:	10 e0       	ldi	r17, 0x00	; 0
    ca48:	01 c0       	rjmp	.+2      	; 0xca4c <f_getfree+0x196>
    ca4a:	8c 01       	movw	r16, r24
    ca4c:	ad 81       	ldd	r26, Y+5	; 0x05
    ca4e:	be 81       	ldd	r27, Y+6	; 0x06
    ca50:	cd 92       	st	X+, r12
    ca52:	dd 92       	st	X+, r13
    ca54:	ed 92       	st	X+, r14
    ca56:	fc 92       	st	X, r15
    ca58:	13 97       	sbiw	r26, 0x03	; 3
    ca5a:	e9 81       	ldd	r30, Y+1	; 0x01
    ca5c:	fa 81       	ldd	r31, Y+2	; 0x02
    ca5e:	c1 8a       	std	Z+17, r12	; 0x11
    ca60:	d2 8a       	std	Z+18, r13	; 0x12
    ca62:	e3 8a       	std	Z+19, r14	; 0x13
    ca64:	f4 8a       	std	Z+20, r15	; 0x14
    ca66:	84 81       	ldd	r24, Z+4	; 0x04
    ca68:	81 60       	ori	r24, 0x01	; 1
    ca6a:	84 83       	std	Z+4, r24	; 0x04
    ca6c:	c8 01       	movw	r24, r16
    ca6e:	2a 96       	adiw	r28, 0x0a	; 10
    ca70:	e2 e1       	ldi	r30, 0x12	; 18
    ca72:	0c 94 29 e7 	jmp	0x1ce52	; 0x1ce52 <__epilogue_restores__>

0000ca76 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
    ca76:	a0 e6       	ldi	r26, 0x60	; 96
    ca78:	b0 e0       	ldi	r27, 0x00	; 0
    ca7a:	e1 e4       	ldi	r30, 0x41	; 65
    ca7c:	f5 e6       	ldi	r31, 0x65	; 101
    ca7e:	0c 94 14 e7 	jmp	0x1ce28	; 0x1ce28 <__prologue_saves__+0xe>
    ca82:	a1 96       	adiw	r28, 0x21	; 33
    ca84:	9f af       	std	Y+63, r25	; 0x3f
    ca86:	8e af       	std	Y+62, r24	; 0x3e
    ca88:	a1 97       	sbiw	r28, 0x21	; 33
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
    ca8a:	42 e0       	ldi	r20, 0x02	; 2
    ca8c:	be 01       	movw	r22, r28
    ca8e:	63 5a       	subi	r22, 0xA3	; 163
    ca90:	7f 4f       	sbci	r23, 0xFF	; 255
    ca92:	ce 01       	movw	r24, r28
    ca94:	81 5a       	subi	r24, 0xA1	; 161
    ca96:	9f 4f       	sbci	r25, 0xFF	; 255
    ca98:	0e 94 0f 4c 	call	0x981e	; 0x981e <mount_volume>
	if (res == FR_OK) {
    ca9c:	00 97       	sbiw	r24, 0x00	; 0
    ca9e:	09 f0       	breq	.+2      	; 0xcaa2 <f_unlink+0x2c>
    caa0:	8c c0       	rjmp	.+280    	; 0xcbba <f_unlink+0x144>
		dj.obj.fs = fs;
    caa2:	6f 96       	adiw	r28, 0x1f	; 31
    caa4:	8e ad       	ldd	r24, Y+62	; 0x3e
    caa6:	9f ad       	ldd	r25, Y+63	; 0x3f
    caa8:	6f 97       	sbiw	r28, 0x1f	; 31
    caaa:	98 ab       	std	Y+48, r25	; 0x30
    caac:	8f a7       	std	Y+47, r24	; 0x2f
		INIT_NAMBUF(fs);
    caae:	80 e0       	ldi	r24, 0x00	; 0
    cab0:	92 e0       	ldi	r25, 0x02	; 2
    cab2:	b0 d3       	rcall	.+1888   	; 0xd214 <ff_memalloc>
    cab4:	5c 01       	movw	r10, r24
    cab6:	00 97       	sbiw	r24, 0x00	; 0
    cab8:	09 f4       	brne	.+2      	; 0xcabc <f_unlink+0x46>
    caba:	49 c0       	rjmp	.+146    	; 0xcb4e <f_unlink+0xd8>
    cabc:	6f 96       	adiw	r28, 0x1f	; 31
    cabe:	ee ad       	ldd	r30, Y+62	; 0x3e
    cac0:	ff ad       	ldd	r31, Y+63	; 0x3f
    cac2:	6f 97       	sbiw	r28, 0x1f	; 31
    cac4:	94 87       	std	Z+12, r25	; 0x0c
    cac6:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);		/* Follow the file path */
    cac8:	a1 96       	adiw	r28, 0x21	; 33
    caca:	6e ad       	ldd	r22, Y+62	; 0x3e
    cacc:	7f ad       	ldd	r23, Y+63	; 0x3f
    cace:	a1 97       	sbiw	r28, 0x21	; 33
    cad0:	ce 01       	movw	r24, r28
    cad2:	8f 96       	adiw	r24, 0x2f	; 47
    cad4:	0e 94 5c 57 	call	0xaeb8	; 0xaeb8 <follow_path>
    cad8:	8c 01       	movw	r16, r24
		if (FF_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
    cada:	89 2b       	or	r24, r25
    cadc:	a1 f5       	brne	.+104    	; 0xcb46 <f_unlink+0xd0>
    cade:	67 96       	adiw	r28, 0x17	; 23
    cae0:	8f ad       	ldd	r24, Y+63	; 0x3f
    cae2:	67 97       	sbiw	r28, 0x17	; 23
    cae4:	85 fd       	sbrc	r24, 5
    cae6:	36 c0       	rjmp	.+108    	; 0xcb54 <f_unlink+0xde>
		}
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
    cae8:	87 fd       	sbrc	r24, 7
    caea:	34 c0       	rjmp	.+104    	; 0xcb54 <f_unlink+0xde>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
			} else {
				if (dj.obj.attr & AM_RDO) {
    caec:	9b a8       	ldd	r9, Y+51	; 0x33
    caee:	90 fc       	sbrc	r9, 0
    caf0:	40 c0       	rjmp	.+128    	; 0xcb72 <f_unlink+0xfc>
					init_alloc_info(fs, &obj);
					dclst = obj.sclust;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
    caf2:	6f 96       	adiw	r28, 0x1f	; 31
    caf4:	0e ad       	ldd	r16, Y+62	; 0x3e
    caf6:	1f ad       	ldd	r17, Y+63	; 0x3f
    caf8:	6f 97       	sbiw	r28, 0x1f	; 31
    cafa:	2b 96       	adiw	r28, 0x0b	; 11
    cafc:	6e ad       	ldd	r22, Y+62	; 0x3e
    cafe:	7f ad       	ldd	r23, Y+63	; 0x3f
    cb00:	2b 97       	sbiw	r28, 0x0b	; 11
    cb02:	f8 01       	movw	r30, r16
    cb04:	80 81       	ld	r24, Z
    cb06:	0e 94 05 4a 	call	0x940a	; 0x940a <ld_clust.isra.3>
    cb0a:	6b 01       	movw	r12, r22
    cb0c:	7c 01       	movw	r14, r24
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
    cb0e:	94 fe       	sbrs	r9, 4
    cb10:	33 c0       	rjmp	.+102    	; 0xcb78 <f_unlink+0x102>
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
    cb12:	f8 01       	movw	r30, r16
    cb14:	85 89       	ldd	r24, Z+21	; 0x15
    cb16:	96 89       	ldd	r25, Z+22	; 0x16
    cb18:	a7 89       	ldd	r26, Z+23	; 0x17
    cb1a:	b0 8d       	ldd	r27, Z+24	; 0x18
    cb1c:	c8 16       	cp	r12, r24
    cb1e:	d9 06       	cpc	r13, r25
    cb20:	ea 06       	cpc	r14, r26
    cb22:	fb 06       	cpc	r15, r27
    cb24:	31 f1       	breq	.+76     	; 0xcb72 <f_unlink+0xfc>
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;				/* Open the sub-directory */
    cb26:	1a 83       	std	Y+2, r17	; 0x02
    cb28:	09 83       	std	Y+1, r16	; 0x01
						sdj.obj.sclust = dclst;
    cb2a:	cf 82       	std	Y+7, r12	; 0x07
    cb2c:	d8 86       	std	Y+8, r13	; 0x08
    cb2e:	e9 86       	std	Y+9, r14	; 0x09
    cb30:	fa 86       	std	Y+10, r15	; 0x0a
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
    cb32:	40 e0       	ldi	r20, 0x00	; 0
    cb34:	50 e0       	ldi	r21, 0x00	; 0
    cb36:	ba 01       	movw	r22, r20
    cb38:	ce 01       	movw	r24, r28
    cb3a:	01 96       	adiw	r24, 0x01	; 1
    cb3c:	0e 94 16 50 	call	0xa02c	; 0xa02c <dir_sdi>
    cb40:	8c 01       	movw	r16, r24
						if (res == FR_OK) {
    cb42:	89 2b       	or	r24, r25
    cb44:	51 f0       	breq	.+20     	; 0xcb5a <f_unlink+0xe4>
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    cb46:	c5 01       	movw	r24, r10
    cb48:	68 d3       	rcall	.+1744   	; 0xd21a <ff_memfree>
    cb4a:	c8 01       	movw	r24, r16
    cb4c:	36 c0       	rjmp	.+108    	; 0xcbba <f_unlink+0x144>

	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    cb4e:	81 e1       	ldi	r24, 0x11	; 17
    cb50:	90 e0       	ldi	r25, 0x00	; 0
    cb52:	33 c0       	rjmp	.+102    	; 0xcbba <f_unlink+0x144>
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
    cb54:	06 e0       	ldi	r16, 0x06	; 6
    cb56:	10 e0       	ldi	r17, 0x00	; 0
    cb58:	f6 cf       	rjmp	.-20     	; 0xcb46 <f_unlink+0xd0>
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
						if (res == FR_OK) {
							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
    cb5a:	60 e0       	ldi	r22, 0x00	; 0
    cb5c:	70 e0       	ldi	r23, 0x00	; 0
    cb5e:	ce 01       	movw	r24, r28
    cb60:	01 96       	adiw	r24, 0x01	; 1
    cb62:	0e 94 af 53 	call	0xa75e	; 0xa75e <dir_read>
    cb66:	8c 01       	movw	r16, r24
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
    cb68:	00 97       	sbiw	r24, 0x00	; 0
    cb6a:	19 f0       	breq	.+6      	; 0xcb72 <f_unlink+0xfc>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
    cb6c:	04 97       	sbiw	r24, 0x04	; 4
    cb6e:	21 f0       	breq	.+8      	; 0xcb78 <f_unlink+0x102>
    cb70:	ea cf       	rjmp	.-44     	; 0xcb46 <f_unlink+0xd0>
					dclst = ld_clust(fs, dj.dir);
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
						res = FR_DENIED;
    cb72:	07 e0       	ldi	r16, 0x07	; 7
    cb74:	10 e0       	ldi	r17, 0x00	; 0
    cb76:	e7 cf       	rjmp	.-50     	; 0xcb46 <f_unlink+0xd0>
						}
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);			/* Remove the directory entry */
    cb78:	ce 01       	movw	r24, r28
    cb7a:	8f 96       	adiw	r24, 0x2f	; 47
    cb7c:	0e 94 78 54 	call	0xa8f0	; 0xa8f0 <dir_remove>
    cb80:	8c 01       	movw	r16, r24
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
    cb82:	89 2b       	or	r24, r25
    cb84:	01 f7       	brne	.-64     	; 0xcb46 <f_unlink+0xd0>
    cb86:	c1 14       	cp	r12, r1
    cb88:	d1 04       	cpc	r13, r1
    cb8a:	e1 04       	cpc	r14, r1
    cb8c:	f1 04       	cpc	r15, r1
    cb8e:	41 f4       	brne	.+16     	; 0xcba0 <f_unlink+0x12a>
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    cb90:	6f 96       	adiw	r28, 0x1f	; 31
    cb92:	8e ad       	ldd	r24, Y+62	; 0x3e
    cb94:	9f ad       	ldd	r25, Y+63	; 0x3f
    cb96:	6f 97       	sbiw	r28, 0x1f	; 31
    cb98:	0e 94 7a 4a 	call	0x94f4	; 0x94f4 <sync_fs>
    cb9c:	8c 01       	movw	r16, r24
    cb9e:	d3 cf       	rjmp	.-90     	; 0xcb46 <f_unlink+0xd0>
				res = dir_remove(&dj);			/* Remove the directory entry */
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
#if FF_FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
    cba0:	00 e0       	ldi	r16, 0x00	; 0
    cba2:	10 e0       	ldi	r17, 0x00	; 0
    cba4:	98 01       	movw	r18, r16
    cba6:	b7 01       	movw	r22, r14
    cba8:	a6 01       	movw	r20, r12
    cbaa:	ce 01       	movw	r24, r28
    cbac:	8f 96       	adiw	r24, 0x2f	; 47
    cbae:	0e 94 fd 51 	call	0xa3fa	; 0xa3fa <remove_chain>
    cbb2:	8c 01       	movw	r16, r24
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    cbb4:	89 2b       	or	r24, r25
    cbb6:	39 f6       	brne	.-114    	; 0xcb46 <f_unlink+0xd0>
    cbb8:	eb cf       	rjmp	.-42     	; 0xcb90 <f_unlink+0x11a>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cbba:	c0 5a       	subi	r28, 0xA0	; 160
    cbbc:	df 4f       	sbci	r29, 0xFF	; 255
    cbbe:	eb e0       	ldi	r30, 0x0B	; 11
    cbc0:	0c 94 30 e7 	jmp	0x1ce60	; 0x1ce60 <__epilogue_restores__+0xe>

0000cbc4 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
    cbc4:	a0 e4       	ldi	r26, 0x40	; 64
    cbc6:	b0 e0       	ldi	r27, 0x00	; 0
    cbc8:	e8 ee       	ldi	r30, 0xE8	; 232
    cbca:	f5 e6       	ldi	r31, 0x65	; 101
    cbcc:	0c 94 0f e7 	jmp	0x1ce1e	; 0x1ce1e <__prologue_saves__+0x4>
    cbd0:	21 96       	adiw	r28, 0x01	; 1
    cbd2:	9f af       	std	Y+63, r25	; 0x3f
    cbd4:	8e af       	std	Y+62, r24	; 0x3e
    cbd6:	21 97       	sbiw	r28, 0x01	; 1
	FATFS *fs;
	DWORD dcl, pcl, tm;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    cbd8:	42 e0       	ldi	r20, 0x02	; 2
    cbda:	be 01       	movw	r22, r28
    cbdc:	63 5c       	subi	r22, 0xC3	; 195
    cbde:	7f 4f       	sbci	r23, 0xFF	; 255
    cbe0:	ce 01       	movw	r24, r28
    cbe2:	cf 96       	adiw	r24, 0x3f	; 63
    cbe4:	0e 94 0f 4c 	call	0x981e	; 0x981e <mount_volume>
	if (res == FR_OK) {
    cbe8:	00 97       	sbiw	r24, 0x00	; 0
    cbea:	09 f0       	breq	.+2      	; 0xcbee <f_mkdir+0x2a>
    cbec:	d6 c0       	rjmp	.+428    	; 0xcd9a <f_mkdir+0x1d6>
		dj.obj.fs = fs;
    cbee:	8d ad       	ldd	r24, Y+61	; 0x3d
    cbf0:	9e ad       	ldd	r25, Y+62	; 0x3e
    cbf2:	9a 83       	std	Y+2, r25	; 0x02
    cbf4:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    cbf6:	80 e0       	ldi	r24, 0x00	; 0
    cbf8:	92 e0       	ldi	r25, 0x02	; 2
    cbfa:	0c d3       	rcall	.+1560   	; 0xd214 <ff_memalloc>
    cbfc:	6c 01       	movw	r12, r24
    cbfe:	00 97       	sbiw	r24, 0x00	; 0
    cc00:	e9 f0       	breq	.+58     	; 0xcc3c <f_mkdir+0x78>
    cc02:	ed ad       	ldd	r30, Y+61	; 0x3d
    cc04:	fe ad       	ldd	r31, Y+62	; 0x3e
    cc06:	94 87       	std	Z+12, r25	; 0x0c
    cc08:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);			/* Follow the file path */
    cc0a:	21 96       	adiw	r28, 0x01	; 1
    cc0c:	6e ad       	ldd	r22, Y+62	; 0x3e
    cc0e:	7f ad       	ldd	r23, Y+63	; 0x3f
    cc10:	21 97       	sbiw	r28, 0x01	; 1
    cc12:	ce 01       	movw	r24, r28
    cc14:	01 96       	adiw	r24, 0x01	; 1
    cc16:	0e 94 5c 57 	call	0xaeb8	; 0xaeb8 <follow_path>
    cc1a:	7c 01       	movw	r14, r24
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    cc1c:	89 2b       	or	r24, r25
    cc1e:	89 f0       	breq	.+34     	; 0xcc42 <f_mkdir+0x7e>
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
    cc20:	84 e0       	ldi	r24, 0x04	; 4
    cc22:	e8 16       	cp	r14, r24
    cc24:	f1 04       	cpc	r15, r1
    cc26:	31 f4       	brne	.+12     	; 0xcc34 <f_mkdir+0x70>
    cc28:	88 a5       	ldd	r24, Y+40	; 0x28
    cc2a:	85 ff       	sbrs	r24, 5
    cc2c:	0e c0       	rjmp	.+28     	; 0xcc4a <f_mkdir+0x86>
			res = FR_INVALID_NAME;
    cc2e:	26 e0       	ldi	r18, 0x06	; 6
    cc30:	e2 2e       	mov	r14, r18
    cc32:	f1 2c       	mov	r15, r1
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
			}
		}
		FREE_NAMBUF();
    cc34:	c6 01       	movw	r24, r12
    cc36:	f1 d2       	rcall	.+1506   	; 0xd21a <ff_memfree>
    cc38:	c7 01       	movw	r24, r14
    cc3a:	af c0       	rjmp	.+350    	; 0xcd9a <f_mkdir+0x1d6>


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    cc3c:	81 e1       	ldi	r24, 0x11	; 17
    cc3e:	90 e0       	ldi	r25, 0x00	; 0
    cc40:	ac c0       	rjmp	.+344    	; 0xcd9a <f_mkdir+0x1d6>
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    cc42:	38 e0       	ldi	r19, 0x08	; 8
    cc44:	e3 2e       	mov	r14, r19
    cc46:	f1 2c       	mov	r15, r1
    cc48:	f5 cf       	rjmp	.-22     	; 0xcc34 <f_mkdir+0x70>
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
    cc4a:	8d ad       	ldd	r24, Y+61	; 0x3d
    cc4c:	9e ad       	ldd	r25, Y+62	; 0x3e
    cc4e:	98 ab       	std	Y+48, r25	; 0x30
    cc50:	8f a7       	std	Y+47, r24	; 0x2f
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
    cc52:	40 e0       	ldi	r20, 0x00	; 0
    cc54:	50 e0       	ldi	r21, 0x00	; 0
    cc56:	ba 01       	movw	r22, r20
    cc58:	ce 01       	movw	r24, r28
    cc5a:	8f 96       	adiw	r24, 0x2f	; 47
    cc5c:	0e 94 d7 50 	call	0xa1ae	; 0xa1ae <create_chain>
    cc60:	4b 01       	movw	r8, r22
    cc62:	5c 01       	movw	r10, r24
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    cc64:	67 2b       	or	r22, r23
    cc66:	68 2b       	or	r22, r24
    cc68:	69 2b       	or	r22, r25
    cc6a:	09 f1       	breq	.+66     	; 0xccae <f_mkdir+0xea>
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    cc6c:	e1 e0       	ldi	r30, 0x01	; 1
    cc6e:	8e 16       	cp	r8, r30
    cc70:	91 04       	cpc	r9, r1
    cc72:	a1 04       	cpc	r10, r1
    cc74:	b1 04       	cpc	r11, r1
    cc76:	61 f0       	breq	.+24     	; 0xcc90 <f_mkdir+0xcc>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
    cc78:	ff ef       	ldi	r31, 0xFF	; 255
    cc7a:	8f 16       	cp	r8, r31
    cc7c:	9f 06       	cpc	r9, r31
    cc7e:	af 06       	cpc	r10, r31
    cc80:	bf 06       	cpc	r11, r31
    cc82:	d9 f4       	brne	.+54     	; 0xccba <f_mkdir+0xf6>
			tm = GET_FATTIME();
    cc84:	0e 94 8b 70 	call	0xe116	; 0xe116 <get_fattime>
    cc88:	ee 24       	eor	r14, r14
    cc8a:	e3 94       	inc	r14
    cc8c:	f1 2c       	mov	r15, r1
    cc8e:	05 c0       	rjmp	.+10     	; 0xcc9a <f_mkdir+0xd6>
    cc90:	0e 94 8b 70 	call	0xe116	; 0xe116 <get_fattime>
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    cc94:	92 e0       	ldi	r25, 0x02	; 2
    cc96:	e9 2e       	mov	r14, r25
    cc98:	f1 2c       	mov	r15, r1
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
    cc9a:	00 e0       	ldi	r16, 0x00	; 0
    cc9c:	10 e0       	ldi	r17, 0x00	; 0
    cc9e:	98 01       	movw	r18, r16
    cca0:	b5 01       	movw	r22, r10
    cca2:	a4 01       	movw	r20, r8
    cca4:	ce 01       	movw	r24, r28
    cca6:	8f 96       	adiw	r24, 0x2f	; 47
    cca8:	0e 94 fd 51 	call	0xa3fa	; 0xa3fa <remove_chain>
    ccac:	c3 cf       	rjmp	.-122    	; 0xcc34 <f_mkdir+0x70>
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
			tm = GET_FATTIME();
    ccae:	0e 94 8b 70 	call	0xe116	; 0xe116 <get_fattime>
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    ccb2:	87 e0       	ldi	r24, 0x07	; 7
    ccb4:	e8 2e       	mov	r14, r24
    ccb6:	f1 2c       	mov	r15, r1
    ccb8:	f0 cf       	rjmp	.-32     	; 0xcc9a <f_mkdir+0xd6>
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
			tm = GET_FATTIME();
    ccba:	0e 94 8b 70 	call	0xe116	; 0xe116 <get_fattime>
    ccbe:	2b 01       	movw	r4, r22
    ccc0:	3c 01       	movw	r6, r24
			if (res == FR_OK) {
				res = dir_clear(fs, dcl);		/* Clean up the new table */
    ccc2:	b5 01       	movw	r22, r10
    ccc4:	a4 01       	movw	r20, r8
    ccc6:	8d ad       	ldd	r24, Y+61	; 0x3d
    ccc8:	9e ad       	ldd	r25, Y+62	; 0x3e
    ccca:	0e 94 ec 4a 	call	0x95d8	; 0x95d8 <dir_clear>
    ccce:	7c 01       	movw	r14, r24
				if (res == FR_OK) {
    ccd0:	89 2b       	or	r24, r25
    ccd2:	19 f7       	brne	.-58     	; 0xcc9a <f_mkdir+0xd6>
					if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* Create dot entries (FAT only) */
						mem_set(fs->win + DIR_Name, ' ', 11);	/* Create "." entry */
    ccd4:	8d ad       	ldd	r24, Y+61	; 0x3d
    ccd6:	9e ad       	ldd	r25, Y+62	; 0x3e
    ccd8:	4b e0       	ldi	r20, 0x0B	; 11
    ccda:	50 e0       	ldi	r21, 0x00	; 0
    ccdc:	60 e2       	ldi	r22, 0x20	; 32
    ccde:	70 e0       	ldi	r23, 0x00	; 0
    cce0:	c5 96       	adiw	r24, 0x35	; 53
    cce2:	0e 94 ed 47 	call	0x8fda	; 0x8fda <mem_set>
						fs->win[DIR_Name] = '.';
    cce6:	8d ad       	ldd	r24, Y+61	; 0x3d
    cce8:	9e ad       	ldd	r25, Y+62	; 0x3e
    ccea:	1e e2       	ldi	r17, 0x2E	; 46
    ccec:	fc 01       	movw	r30, r24
    ccee:	15 ab       	std	Z+53, r17	; 0x35
						fs->win[DIR_Attr] = AM_DIR;
    ccf0:	e0 5c       	subi	r30, 0xC0	; 192
    ccf2:	ff 4f       	sbci	r31, 0xFF	; 255
    ccf4:	20 e1       	ldi	r18, 0x10	; 16
    ccf6:	20 83       	st	Z, r18
						st_dword(fs->win + DIR_ModTime, tm);
    ccf8:	b3 01       	movw	r22, r6
    ccfa:	a2 01       	movw	r20, r4
    ccfc:	85 5b       	subi	r24, 0xB5	; 181
    ccfe:	9f 4f       	sbci	r25, 0xFF	; 255
    cd00:	0e 94 e7 47 	call	0x8fce	; 0x8fce <st_dword>
						st_clust(fs, fs->win, dcl);
    cd04:	8d ad       	ldd	r24, Y+61	; 0x3d
    cd06:	9e ad       	ldd	r25, Y+62	; 0x3e
    cd08:	bc 01       	movw	r22, r24
    cd0a:	6b 5c       	subi	r22, 0xCB	; 203
    cd0c:	7f 4f       	sbci	r23, 0xFF	; 255
    cd0e:	a5 01       	movw	r20, r10
    cd10:	94 01       	movw	r18, r8
    cd12:	0e 94 1a 4a 	call	0x9434	; 0x9434 <st_clust.isra.4>
						mem_cpy(fs->win + SZDIRE, fs->win, SZDIRE); /* Create ".." entry */
    cd16:	8d ad       	ldd	r24, Y+61	; 0x3d
    cd18:	9e ad       	ldd	r25, Y+62	; 0x3e
    cd1a:	bc 01       	movw	r22, r24
    cd1c:	6b 5c       	subi	r22, 0xCB	; 203
    cd1e:	7f 4f       	sbci	r23, 0xFF	; 255
    cd20:	40 e2       	ldi	r20, 0x20	; 32
    cd22:	50 e0       	ldi	r21, 0x00	; 0
    cd24:	8b 5a       	subi	r24, 0xAB	; 171
    cd26:	9f 4f       	sbci	r25, 0xFF	; 255
    cd28:	0e 94 fa 49 	call	0x93f4	; 0x93f4 <mem_cpy.part.0>
						fs->win[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
    cd2c:	8d ad       	ldd	r24, Y+61	; 0x3d
    cd2e:	9e ad       	ldd	r25, Y+62	; 0x3e
    cd30:	fc 01       	movw	r30, r24
    cd32:	ea 5a       	subi	r30, 0xAA	; 170
    cd34:	ff 4f       	sbci	r31, 0xFF	; 255
    cd36:	10 83       	st	Z, r17
						st_clust(fs, fs->win + SZDIRE, pcl);
    cd38:	2f 81       	ldd	r18, Y+7	; 0x07
    cd3a:	38 85       	ldd	r19, Y+8	; 0x08
    cd3c:	49 85       	ldd	r20, Y+9	; 0x09
    cd3e:	5a 85       	ldd	r21, Y+10	; 0x0a
    cd40:	bc 01       	movw	r22, r24
    cd42:	6b 5a       	subi	r22, 0xAB	; 171
    cd44:	7f 4f       	sbci	r23, 0xFF	; 255
    cd46:	0e 94 1a 4a 	call	0x9434	; 0x9434 <st_clust.isra.4>
						fs->wflag = 1;
    cd4a:	ed ad       	ldd	r30, Y+61	; 0x3d
    cd4c:	fe ad       	ldd	r31, Y+62	; 0x3e
    cd4e:	81 e0       	ldi	r24, 0x01	; 1
    cd50:	83 83       	std	Z+3, r24	; 0x03
					}
					res = dir_register(&dj);	/* Register the object to the parent directoy */
    cd52:	ce 01       	movw	r24, r28
    cd54:	01 96       	adiw	r24, 0x01	; 1
    cd56:	0e 94 ce 55 	call	0xab9c	; 0xab9c <dir_register>
    cd5a:	7c 01       	movw	r14, r24
				}
			}
			if (res == FR_OK) {
    cd5c:	89 2b       	or	r24, r25
    cd5e:	09 f0       	breq	.+2      	; 0xcd62 <f_mkdir+0x19e>
    cd60:	9c cf       	rjmp	.-200    	; 0xcc9a <f_mkdir+0xd6>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					st_dword(dj.dir + DIR_ModTime, tm);	/* Created time */
    cd62:	8b 8d       	ldd	r24, Y+27	; 0x1b
    cd64:	9c 8d       	ldd	r25, Y+28	; 0x1c
    cd66:	b3 01       	movw	r22, r6
    cd68:	a2 01       	movw	r20, r4
    cd6a:	46 96       	adiw	r24, 0x16	; 22
    cd6c:	0e 94 e7 47 	call	0x8fce	; 0x8fce <st_dword>
					st_clust(fs, dj.dir, dcl);			/* Table start cluster */
    cd70:	6b 8d       	ldd	r22, Y+27	; 0x1b
    cd72:	7c 8d       	ldd	r23, Y+28	; 0x1c
    cd74:	a5 01       	movw	r20, r10
    cd76:	94 01       	movw	r18, r8
    cd78:	8d ad       	ldd	r24, Y+61	; 0x3d
    cd7a:	9e ad       	ldd	r25, Y+62	; 0x3e
    cd7c:	0e 94 1a 4a 	call	0x9434	; 0x9434 <st_clust.isra.4>
					dj.dir[DIR_Attr] = AM_DIR;			/* Attribute */
    cd80:	eb 8d       	ldd	r30, Y+27	; 0x1b
    cd82:	fc 8d       	ldd	r31, Y+28	; 0x1c
    cd84:	80 e1       	ldi	r24, 0x10	; 16
    cd86:	83 87       	std	Z+11, r24	; 0x0b
					fs->wflag = 1;
    cd88:	8d ad       	ldd	r24, Y+61	; 0x3d
    cd8a:	9e ad       	ldd	r25, Y+62	; 0x3e
    cd8c:	21 e0       	ldi	r18, 0x01	; 1
    cd8e:	fc 01       	movw	r30, r24
    cd90:	23 83       	std	Z+3, r18	; 0x03
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
    cd92:	0e 94 7a 4a 	call	0x94f4	; 0x94f4 <sync_fs>
    cd96:	7c 01       	movw	r14, r24
    cd98:	4d cf       	rjmp	.-358    	; 0xcc34 <f_mkdir+0x70>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cd9a:	c0 5c       	subi	r28, 0xC0	; 192
    cd9c:	df 4f       	sbci	r29, 0xFF	; 255
    cd9e:	e0 e1       	ldi	r30, 0x10	; 16
    cda0:	0c 94 2b e7 	jmp	0x1ce56	; 0x1ce56 <__epilogue_restores__+0x4>

0000cda4 <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
    cda4:	a2 e8       	ldi	r26, 0x82	; 130
    cda6:	b0 e0       	ldi	r27, 0x00	; 0
    cda8:	e8 ed       	ldi	r30, 0xD8	; 216
    cdaa:	f6 e6       	ldi	r31, 0x66	; 102
    cdac:	0c 94 16 e7 	jmp	0x1ce2c	; 0x1ce2c <__prologue_saves__+0x12>
    cdb0:	c1 58       	subi	r28, 0x81	; 129
    cdb2:	df 4f       	sbci	r29, 0xFF	; 255
    cdb4:	99 83       	std	Y+1, r25	; 0x01
    cdb6:	88 83       	st	Y, r24
    cdb8:	cf 57       	subi	r28, 0x7F	; 127
    cdba:	d0 40       	sbci	r29, 0x00	; 0
    cdbc:	cf 57       	subi	r28, 0x7F	; 127
    cdbe:	df 4f       	sbci	r29, 0xFF	; 255
    cdc0:	79 83       	std	Y+1, r23	; 0x01
    cdc2:	68 83       	st	Y, r22
    cdc4:	c1 58       	subi	r28, 0x81	; 129
    cdc6:	d0 40       	sbci	r29, 0x00	; 0
	BYTE buf[FF_FS_EXFAT ? SZDIRE * 2 : SZDIRE], *dir;
	LBA_t sect;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
    cdc8:	ce 01       	movw	r24, r28
    cdca:	8f 57       	subi	r24, 0x7F	; 127
    cdcc:	9f 4f       	sbci	r25, 0xFF	; 255
    cdce:	0e 94 78 48 	call	0x90f0	; 0x90f0 <get_ldnumber>
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
    cdd2:	42 e0       	ldi	r20, 0x02	; 2
    cdd4:	be 01       	movw	r22, r28
    cdd6:	63 58       	subi	r22, 0x83	; 131
    cdd8:	7f 4f       	sbci	r23, 0xFF	; 255
    cdda:	ce 01       	movw	r24, r28
    cddc:	81 58       	subi	r24, 0x81	; 129
    cdde:	9f 4f       	sbci	r25, 0xFF	; 255
    cde0:	0e 94 0f 4c 	call	0x981e	; 0x981e <mount_volume>
	if (res == FR_OK) {
    cde4:	00 97       	sbiw	r24, 0x00	; 0
    cde6:	09 f0       	breq	.+2      	; 0xcdea <f_rename+0x46>
    cde8:	ed c0       	rjmp	.+474    	; 0xcfc4 <f_rename+0x220>
		djo.obj.fs = fs;
    cdea:	ef 96       	adiw	r28, 0x3f	; 63
    cdec:	8e ad       	ldd	r24, Y+62	; 0x3e
    cdee:	9f ad       	ldd	r25, Y+63	; 0x3f
    cdf0:	ef 97       	sbiw	r28, 0x3f	; 63
    cdf2:	98 ab       	std	Y+48, r25	; 0x30
    cdf4:	8f a7       	std	Y+47, r24	; 0x2f
		INIT_NAMBUF(fs);
    cdf6:	80 e0       	ldi	r24, 0x00	; 0
    cdf8:	92 e0       	ldi	r25, 0x02	; 2
    cdfa:	0c d2       	rcall	.+1048   	; 0xd214 <ff_memalloc>
    cdfc:	6c 01       	movw	r12, r24
    cdfe:	00 97       	sbiw	r24, 0x00	; 0
    ce00:	f1 f0       	breq	.+60     	; 0xce3e <f_rename+0x9a>
    ce02:	ef 96       	adiw	r28, 0x3f	; 63
    ce04:	ee ad       	ldd	r30, Y+62	; 0x3e
    ce06:	ff ad       	ldd	r31, Y+63	; 0x3f
    ce08:	ef 97       	sbiw	r28, 0x3f	; 63
    ce0a:	94 87       	std	Z+12, r25	; 0x0c
    ce0c:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&djo, path_old);		/* Check old object */
    ce0e:	c1 58       	subi	r28, 0x81	; 129
    ce10:	df 4f       	sbci	r29, 0xFF	; 255
    ce12:	68 81       	ld	r22, Y
    ce14:	79 81       	ldd	r23, Y+1	; 0x01
    ce16:	cf 57       	subi	r28, 0x7F	; 127
    ce18:	d0 40       	sbci	r29, 0x00	; 0
    ce1a:	ce 01       	movw	r24, r28
    ce1c:	8f 96       	adiw	r24, 0x2f	; 47
    ce1e:	0e 94 5c 57 	call	0xaeb8	; 0xaeb8 <follow_path>
    ce22:	8c 01       	movw	r16, r24
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
    ce24:	89 2b       	or	r24, r25
    ce26:	39 f4       	brne	.+14     	; 0xce36 <f_rename+0x92>
    ce28:	67 96       	adiw	r28, 0x17	; 23
    ce2a:	8f ad       	ldd	r24, Y+63	; 0x3f
    ce2c:	67 97       	sbiw	r28, 0x17	; 23
    ce2e:	80 7a       	andi	r24, 0xA0	; 160
    ce30:	49 f0       	breq	.+18     	; 0xce44 <f_rename+0xa0>
    ce32:	06 e0       	ldi	r16, 0x06	; 6
    ce34:	10 e0       	ldi	r17, 0x00	; 0
					res = sync_fs(fs);
				}
			}
/* End of the critical section */
		}
		FREE_NAMBUF();
    ce36:	c6 01       	movw	r24, r12
    ce38:	f0 d1       	rcall	.+992    	; 0xd21a <ff_memfree>
    ce3a:	c8 01       	movw	r24, r16
    ce3c:	c3 c0       	rjmp	.+390    	; 0xcfc4 <f_rename+0x220>

	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
	if (res == FR_OK) {
		djo.obj.fs = fs;
		INIT_NAMBUF(fs);
    ce3e:	81 e1       	ldi	r24, 0x11	; 17
    ce40:	90 e0       	ldi	r25, 0x00	; 0
    ce42:	c0 c0       	rjmp	.+384    	; 0xcfc4 <f_rename+0x220>
    ce44:	2b 96       	adiw	r28, 0x0b	; 11
    ce46:	6e ad       	ldd	r22, Y+62	; 0x3e
    ce48:	7f ad       	ldd	r23, Y+63	; 0x3f
    ce4a:	2b 97       	sbiw	r28, 0x0b	; 11
    ce4c:	40 e2       	ldi	r20, 0x20	; 32
    ce4e:	50 e0       	ldi	r21, 0x00	; 0
    ce50:	ce 01       	movw	r24, r28
    ce52:	83 5a       	subi	r24, 0xA3	; 163
    ce54:	9f 4f       	sbci	r25, 0xFF	; 255
    ce56:	0e 94 fa 49 	call	0x93f4	; 0x93f4 <mem_cpy.part.0>
    ce5a:	4e e2       	ldi	r20, 0x2E	; 46
    ce5c:	50 e0       	ldi	r21, 0x00	; 0
    ce5e:	be 01       	movw	r22, r28
    ce60:	61 5d       	subi	r22, 0xD1	; 209
    ce62:	7f 4f       	sbci	r23, 0xFF	; 255
    ce64:	ce 01       	movw	r24, r28
    ce66:	01 96       	adiw	r24, 0x01	; 1
    ce68:	0e 94 fa 49 	call	0x93f4	; 0x93f4 <mem_cpy.part.0>
			} else
#endif
			{	/* At FAT/FAT32 volume */
				mem_cpy(buf, djo.dir, SZDIRE);			/* Save directory entry of the object */
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
    ce6c:	cf 57       	subi	r28, 0x7F	; 127
    ce6e:	df 4f       	sbci	r29, 0xFF	; 255
    ce70:	68 81       	ld	r22, Y
    ce72:	79 81       	ldd	r23, Y+1	; 0x01
    ce74:	c1 58       	subi	r28, 0x81	; 129
    ce76:	d0 40       	sbci	r29, 0x00	; 0
    ce78:	ce 01       	movw	r24, r28
    ce7a:	01 96       	adiw	r24, 0x01	; 1
    ce7c:	0e 94 5c 57 	call	0xaeb8	; 0xaeb8 <follow_path>
    ce80:	8c 01       	movw	r16, r24
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
    ce82:	89 2b       	or	r24, r25
    ce84:	f9 f4       	brne	.+62     	; 0xcec4 <f_rename+0x120>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
    ce86:	4f 81       	ldd	r20, Y+7	; 0x07
    ce88:	58 85       	ldd	r21, Y+8	; 0x08
    ce8a:	69 85       	ldd	r22, Y+9	; 0x09
    ce8c:	7a 85       	ldd	r23, Y+10	; 0x0a
    ce8e:	8d a9       	ldd	r24, Y+53	; 0x35
    ce90:	9e a9       	ldd	r25, Y+54	; 0x36
    ce92:	af a9       	ldd	r26, Y+55	; 0x37
    ce94:	b8 ad       	ldd	r27, Y+56	; 0x38
    ce96:	48 17       	cp	r20, r24
    ce98:	59 07       	cpc	r21, r25
    ce9a:	6a 07       	cpc	r22, r26
    ce9c:	7b 07       	cpc	r23, r27
    ce9e:	09 f0       	breq	.+2      	; 0xcea2 <f_rename+0xfe>
    cea0:	8b c0       	rjmp	.+278    	; 0xcfb8 <f_rename+0x214>
    cea2:	4f 85       	ldd	r20, Y+15	; 0x0f
    cea4:	58 89       	ldd	r21, Y+16	; 0x10
    cea6:	69 89       	ldd	r22, Y+17	; 0x11
    cea8:	7a 89       	ldd	r23, Y+18	; 0x12
    ceaa:	21 96       	adiw	r28, 0x01	; 1
    ceac:	8c ad       	ldd	r24, Y+60	; 0x3c
    ceae:	9d ad       	ldd	r25, Y+61	; 0x3d
    ceb0:	ae ad       	ldd	r26, Y+62	; 0x3e
    ceb2:	bf ad       	ldd	r27, Y+63	; 0x3f
    ceb4:	21 97       	sbiw	r28, 0x01	; 1
    ceb6:	48 17       	cp	r20, r24
    ceb8:	59 07       	cpc	r21, r25
    ceba:	6a 07       	cpc	r22, r26
    cebc:	7b 07       	cpc	r23, r27
    cebe:	09 f0       	breq	.+2      	; 0xcec2 <f_rename+0x11e>
    cec0:	7b c0       	rjmp	.+246    	; 0xcfb8 <f_rename+0x214>
    cec2:	04 c0       	rjmp	.+8      	; 0xcecc <f_rename+0x128>
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
    cec4:	04 30       	cpi	r16, 0x04	; 4
    cec6:	11 05       	cpc	r17, r1
    cec8:	09 f0       	breq	.+2      	; 0xcecc <f_rename+0x128>
    ceca:	b5 cf       	rjmp	.-150    	; 0xce36 <f_rename+0x92>
					res = dir_register(&djn);			/* Register the new entry */
    cecc:	ce 01       	movw	r24, r28
    cece:	01 96       	adiw	r24, 0x01	; 1
    ced0:	0e 94 ce 55 	call	0xab9c	; 0xab9c <dir_register>
    ced4:	8c 01       	movw	r16, r24
					if (res == FR_OK) {
    ced6:	89 2b       	or	r24, r25
    ced8:	09 f0       	breq	.+2      	; 0xcedc <f_rename+0x138>
    ceda:	ad cf       	rjmp	.-166    	; 0xce36 <f_rename+0x92>
						dir = djn.dir;					/* Copy directory entry of the object except name */
    cedc:	0b 8d       	ldd	r16, Y+27	; 0x1b
    cede:	1c 8d       	ldd	r17, Y+28	; 0x1c
    cee0:	6d e5       	ldi	r22, 0x5D	; 93
    cee2:	70 e0       	ldi	r23, 0x00	; 0
    cee4:	6c 0f       	add	r22, r28
    cee6:	7d 1f       	adc	r23, r29
    cee8:	63 5f       	subi	r22, 0xF3	; 243
    ceea:	7f 4f       	sbci	r23, 0xFF	; 255
    ceec:	43 e1       	ldi	r20, 0x13	; 19
    ceee:	50 e0       	ldi	r21, 0x00	; 0
    cef0:	c8 01       	movw	r24, r16
    cef2:	0d 96       	adiw	r24, 0x0d	; 13
    cef4:	0e 94 fa 49 	call	0x93f4	; 0x93f4 <mem_cpy.part.0>
						mem_cpy(dir + 13, buf + 13, SZDIRE - 13);
						dir[DIR_Attr] = buf[DIR_Attr];
    cef8:	a9 96       	adiw	r28, 0x29	; 41
    cefa:	8f ad       	ldd	r24, Y+63	; 0x3f
    cefc:	a9 97       	sbiw	r28, 0x29	; 41
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
    cefe:	84 ff       	sbrs	r24, 4
    cf00:	80 62       	ori	r24, 0x20	; 32
    cf02:	f8 01       	movw	r30, r16
    cf04:	83 87       	std	Z+11, r24	; 0x0b
						fs->wflag = 1;
    cf06:	ef 96       	adiw	r28, 0x3f	; 63
    cf08:	ee ac       	ldd	r14, Y+62	; 0x3e
    cf0a:	ff ac       	ldd	r15, Y+63	; 0x3f
    cf0c:	ef 97       	sbiw	r28, 0x3f	; 63
    cf0e:	bb 24       	eor	r11, r11
    cf10:	b3 94       	inc	r11
    cf12:	f7 01       	movw	r30, r14
    cf14:	b3 82       	std	Z+3, r11	; 0x03
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
    cf16:	f8 01       	movw	r30, r16
    cf18:	83 85       	ldd	r24, Z+11	; 0x0b
    cf1a:	84 ff       	sbrs	r24, 4
    cf1c:	3d c0       	rjmp	.+122    	; 0xcf98 <f_rename+0x1f4>
    cf1e:	4d a9       	ldd	r20, Y+53	; 0x35
    cf20:	5e a9       	ldd	r21, Y+54	; 0x36
    cf22:	6f a9       	ldd	r22, Y+55	; 0x37
    cf24:	78 ad       	ldd	r23, Y+56	; 0x38
    cf26:	8f 81       	ldd	r24, Y+7	; 0x07
    cf28:	98 85       	ldd	r25, Y+8	; 0x08
    cf2a:	a9 85       	ldd	r26, Y+9	; 0x09
    cf2c:	ba 85       	ldd	r27, Y+10	; 0x0a
    cf2e:	48 17       	cp	r20, r24
    cf30:	59 07       	cpc	r21, r25
    cf32:	6a 07       	cpc	r22, r26
    cf34:	7b 07       	cpc	r23, r27
    cf36:	81 f1       	breq	.+96     	; 0xcf98 <f_rename+0x1f4>
							sect = clst2sect(fs, ld_clust(fs, dir));
    cf38:	b8 01       	movw	r22, r16
    cf3a:	f7 01       	movw	r30, r14
    cf3c:	80 81       	ld	r24, Z
    cf3e:	0e 94 05 4a 	call	0x940a	; 0x940a <ld_clust.isra.3>
    cf42:	ab 01       	movw	r20, r22
    cf44:	bc 01       	movw	r22, r24
    cf46:	c7 01       	movw	r24, r14
    cf48:	0e 94 05 48 	call	0x900a	; 0x900a <clst2sect>
    cf4c:	ab 01       	movw	r20, r22
    cf4e:	bc 01       	movw	r22, r24
							if (sect == 0) {
    cf50:	41 15       	cp	r20, r1
    cf52:	51 05       	cpc	r21, r1
    cf54:	61 05       	cpc	r22, r1
    cf56:	71 05       	cpc	r23, r1
    cf58:	91 f1       	breq	.+100    	; 0xcfbe <f_rename+0x21a>
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
    cf5a:	c7 01       	movw	r24, r14
    cf5c:	0e 94 94 4b 	call	0x9728	; 0x9728 <move_window>
    cf60:	8c 01       	movw	r16, r24
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
								if (res == FR_OK && dir[1] == '.') {
    cf62:	89 2b       	or	r24, r25
    cf64:	09 f0       	breq	.+2      	; 0xcf68 <f_rename+0x1c4>
    cf66:	67 cf       	rjmp	.-306    	; 0xce36 <f_rename+0x92>
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    cf68:	ef 96       	adiw	r28, 0x3f	; 63
    cf6a:	8e ad       	ldd	r24, Y+62	; 0x3e
    cf6c:	9f ad       	ldd	r25, Y+63	; 0x3f
    cf6e:	ef 97       	sbiw	r28, 0x3f	; 63
								if (res == FR_OK && dir[1] == '.') {
    cf70:	fc 01       	movw	r30, r24
    cf72:	ea 5a       	subi	r30, 0xAA	; 170
    cf74:	ff 4f       	sbci	r31, 0xFF	; 255
    cf76:	20 81       	ld	r18, Z
    cf78:	2e 32       	cpi	r18, 0x2E	; 46
    cf7a:	71 f4       	brne	.+28     	; 0xcf98 <f_rename+0x1f4>
									st_clust(fs, dir, djn.obj.sclust);
    cf7c:	2f 81       	ldd	r18, Y+7	; 0x07
    cf7e:	38 85       	ldd	r19, Y+8	; 0x08
    cf80:	49 85       	ldd	r20, Y+9	; 0x09
    cf82:	5a 85       	ldd	r21, Y+10	; 0x0a
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    cf84:	bc 01       	movw	r22, r24
    cf86:	6b 5a       	subi	r22, 0xAB	; 171
    cf88:	7f 4f       	sbci	r23, 0xFF	; 255
								if (res == FR_OK && dir[1] == '.') {
									st_clust(fs, dir, djn.obj.sclust);
    cf8a:	0e 94 1a 4a 	call	0x9434	; 0x9434 <st_clust.isra.4>
									fs->wflag = 1;
    cf8e:	ef 96       	adiw	r28, 0x3f	; 63
    cf90:	ee ad       	ldd	r30, Y+62	; 0x3e
    cf92:	ff ad       	ldd	r31, Y+63	; 0x3f
    cf94:	ef 97       	sbiw	r28, 0x3f	; 63
    cf96:	b3 82       	std	Z+3, r11	; 0x03
						}
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&djo);		/* Remove old entry */
    cf98:	ce 01       	movw	r24, r28
    cf9a:	8f 96       	adiw	r24, 0x2f	; 47
    cf9c:	0e 94 78 54 	call	0xa8f0	; 0xa8f0 <dir_remove>
    cfa0:	8c 01       	movw	r16, r24
				if (res == FR_OK) {
    cfa2:	89 2b       	or	r24, r25
    cfa4:	09 f0       	breq	.+2      	; 0xcfa8 <f_rename+0x204>
    cfa6:	47 cf       	rjmp	.-370    	; 0xce36 <f_rename+0x92>
					res = sync_fs(fs);
    cfa8:	ef 96       	adiw	r28, 0x3f	; 63
    cfaa:	8e ad       	ldd	r24, Y+62	; 0x3e
    cfac:	9f ad       	ldd	r25, Y+63	; 0x3f
    cfae:	ef 97       	sbiw	r28, 0x3f	; 63
    cfb0:	0e 94 7a 4a 	call	0x94f4	; 0x94f4 <sync_fs>
    cfb4:	8c 01       	movw	r16, r24
    cfb6:	3f cf       	rjmp	.-386    	; 0xce36 <f_rename+0x92>
    cfb8:	08 e0       	ldi	r16, 0x08	; 8
    cfba:	10 e0       	ldi	r17, 0x00	; 0
    cfbc:	3c cf       	rjmp	.-392    	; 0xce36 <f_rename+0x92>
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
						fs->wflag = 1;
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
							sect = clst2sect(fs, ld_clust(fs, dir));
							if (sect == 0) {
								res = FR_INT_ERR;
    cfbe:	02 e0       	ldi	r16, 0x02	; 2
    cfc0:	10 e0       	ldi	r17, 0x00	; 0
    cfc2:	39 cf       	rjmp	.-398    	; 0xce36 <f_rename+0x92>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cfc4:	ce 57       	subi	r28, 0x7E	; 126
    cfc6:	df 4f       	sbci	r29, 0xFF	; 255
    cfc8:	e9 e0       	ldi	r30, 0x09	; 9
    cfca:	0c 94 32 e7 	jmp	0x1ce64	; 0x1ce64 <__epilogue_restores__+0x12>

0000cfce <f_chmod>:
FRESULT f_chmod (
	const TCHAR* path,	/* Pointer to the file path */
	BYTE attr,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
    cfce:	a2 e3       	ldi	r26, 0x32	; 50
    cfd0:	b0 e0       	ldi	r27, 0x00	; 0
    cfd2:	ed ee       	ldi	r30, 0xED	; 237
    cfd4:	f7 e6       	ldi	r31, 0x67	; 103
    cfd6:	0c 94 17 e7 	jmp	0x1ce2e	; 0x1ce2e <__prologue_saves__+0x14>
    cfda:	9a ab       	std	Y+50, r25	; 0x32
    cfdc:	89 ab       	std	Y+49, r24	; 0x31
    cfde:	e6 2e       	mov	r14, r22
    cfe0:	f4 2e       	mov	r15, r20
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    cfe2:	42 e0       	ldi	r20, 0x02	; 2
    cfe4:	be 01       	movw	r22, r28
    cfe6:	61 5d       	subi	r22, 0xD1	; 209
    cfe8:	7f 4f       	sbci	r23, 0xFF	; 255
    cfea:	ce 01       	movw	r24, r28
    cfec:	c1 96       	adiw	r24, 0x31	; 49
    cfee:	0e 94 0f 4c 	call	0x981e	; 0x981e <mount_volume>
	if (res == FR_OK) {
    cff2:	00 97       	sbiw	r24, 0x00	; 0
    cff4:	a9 f5       	brne	.+106    	; 0xd060 <f_chmod+0x92>
		dj.obj.fs = fs;
    cff6:	8f a5       	ldd	r24, Y+47	; 0x2f
    cff8:	98 a9       	ldd	r25, Y+48	; 0x30
    cffa:	9a 83       	std	Y+2, r25	; 0x02
    cffc:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    cffe:	80 e0       	ldi	r24, 0x00	; 0
    d000:	92 e0       	ldi	r25, 0x02	; 2
    d002:	08 d1       	rcall	.+528    	; 0xd214 <ff_memalloc>
    d004:	6c 01       	movw	r12, r24
    d006:	00 97       	sbiw	r24, 0x00	; 0
    d008:	b1 f0       	breq	.+44     	; 0xd036 <f_chmod+0x68>
    d00a:	ef a5       	ldd	r30, Y+47	; 0x2f
    d00c:	f8 a9       	ldd	r31, Y+48	; 0x30
    d00e:	94 87       	std	Z+12, r25	; 0x0c
    d010:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);	/* Follow the file path */
    d012:	69 a9       	ldd	r22, Y+49	; 0x31
    d014:	7a a9       	ldd	r23, Y+50	; 0x32
    d016:	ce 01       	movw	r24, r28
    d018:	01 96       	adiw	r24, 0x01	; 1
    d01a:	0e 94 5c 57 	call	0xaeb8	; 0xaeb8 <follow_path>
    d01e:	8c 01       	movw	r16, r24
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
    d020:	89 2b       	or	r24, r25
    d022:	29 f4       	brne	.+10     	; 0xd02e <f_chmod+0x60>
    d024:	88 a5       	ldd	r24, Y+40	; 0x28
    d026:	80 7a       	andi	r24, 0xA0	; 160
    d028:	49 f0       	breq	.+18     	; 0xd03c <f_chmod+0x6e>
    d02a:	06 e0       	ldi	r16, 0x06	; 6
    d02c:	10 e0       	ldi	r17, 0x00	; 0
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    d02e:	c6 01       	movw	r24, r12
    d030:	f4 d0       	rcall	.+488    	; 0xd21a <ff_memfree>
    d032:	c8 01       	movw	r24, r16
    d034:	15 c0       	rjmp	.+42     	; 0xd060 <f_chmod+0x92>


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    d036:	81 e1       	ldi	r24, 0x11	; 17
    d038:	90 e0       	ldi	r25, 0x00	; 0
    d03a:	12 c0       	rjmp	.+36     	; 0xd060 <f_chmod+0x92>
				fs->dirbuf[XDIR_Attr] = (attr & mask) | (fs->dirbuf[XDIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
				res = store_xdir(&dj);
			} else
#endif
			{
				dj.dir[DIR_Attr] = (attr & mask) | (dj.dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
    d03c:	eb 8d       	ldd	r30, Y+27	; 0x1b
    d03e:	fc 8d       	ldd	r31, Y+28	; 0x1c
    d040:	83 85       	ldd	r24, Z+11	; 0x0b
    d042:	6e 2d       	mov	r22, r14
    d044:	68 27       	eor	r22, r24
    d046:	6f 21       	and	r22, r15
    d048:	67 72       	andi	r22, 0x27	; 39
    d04a:	68 27       	eor	r22, r24
    d04c:	63 87       	std	Z+11, r22	; 0x0b
				fs->wflag = 1;
    d04e:	8f a5       	ldd	r24, Y+47	; 0x2f
    d050:	98 a9       	ldd	r25, Y+48	; 0x30
    d052:	21 e0       	ldi	r18, 0x01	; 1
    d054:	fc 01       	movw	r30, r24
    d056:	23 83       	std	Z+3, r18	; 0x03
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
    d058:	0e 94 7a 4a 	call	0x94f4	; 0x94f4 <sync_fs>
    d05c:	8c 01       	movw	r16, r24
    d05e:	e7 cf       	rjmp	.-50     	; 0xd02e <f_chmod+0x60>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    d060:	e2 96       	adiw	r28, 0x32	; 50
    d062:	e8 e0       	ldi	r30, 0x08	; 8
    d064:	0c 94 33 e7 	jmp	0x1ce66	; 0x1ce66 <__epilogue_restores__+0x14>

0000d068 <f_utime>:

FRESULT f_utime (
	const TCHAR* path,	/* Pointer to the file/directory name */
	const FILINFO* fno	/* Pointer to the timestamp to be set */
)
{
    d068:	a2 e3       	ldi	r26, 0x32	; 50
    d06a:	b0 e0       	ldi	r27, 0x00	; 0
    d06c:	ea e3       	ldi	r30, 0x3A	; 58
    d06e:	f8 e6       	ldi	r31, 0x68	; 104
    d070:	0c 94 17 e7 	jmp	0x1ce2e	; 0x1ce2e <__prologue_saves__+0x14>
    d074:	9a ab       	std	Y+50, r25	; 0x32
    d076:	89 ab       	std	Y+49, r24	; 0x31
    d078:	6b 01       	movw	r12, r22
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    d07a:	42 e0       	ldi	r20, 0x02	; 2
    d07c:	be 01       	movw	r22, r28
    d07e:	61 5d       	subi	r22, 0xD1	; 209
    d080:	7f 4f       	sbci	r23, 0xFF	; 255
    d082:	ce 01       	movw	r24, r28
    d084:	c1 96       	adiw	r24, 0x31	; 49
    d086:	0e 94 0f 4c 	call	0x981e	; 0x981e <mount_volume>
	if (res == FR_OK) {
    d08a:	00 97       	sbiw	r24, 0x00	; 0
    d08c:	09 f0       	breq	.+2      	; 0xd090 <f_utime+0x28>
    d08e:	41 c0       	rjmp	.+130    	; 0xd112 <f_utime+0xaa>
		dj.obj.fs = fs;
    d090:	8f a5       	ldd	r24, Y+47	; 0x2f
    d092:	98 a9       	ldd	r25, Y+48	; 0x30
    d094:	9a 83       	std	Y+2, r25	; 0x02
    d096:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    d098:	80 e0       	ldi	r24, 0x00	; 0
    d09a:	92 e0       	ldi	r25, 0x02	; 2
    d09c:	bb d0       	rcall	.+374    	; 0xd214 <ff_memalloc>
    d09e:	7c 01       	movw	r14, r24
    d0a0:	00 97       	sbiw	r24, 0x00	; 0
    d0a2:	b1 f0       	breq	.+44     	; 0xd0d0 <f_utime+0x68>
    d0a4:	ef a5       	ldd	r30, Y+47	; 0x2f
    d0a6:	f8 a9       	ldd	r31, Y+48	; 0x30
    d0a8:	94 87       	std	Z+12, r25	; 0x0c
    d0aa:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);	/* Follow the file path */
    d0ac:	69 a9       	ldd	r22, Y+49	; 0x31
    d0ae:	7a a9       	ldd	r23, Y+50	; 0x32
    d0b0:	ce 01       	movw	r24, r28
    d0b2:	01 96       	adiw	r24, 0x01	; 1
    d0b4:	0e 94 5c 57 	call	0xaeb8	; 0xaeb8 <follow_path>
    d0b8:	8c 01       	movw	r16, r24
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
    d0ba:	89 2b       	or	r24, r25
    d0bc:	29 f4       	brne	.+10     	; 0xd0c8 <f_utime+0x60>
    d0be:	88 a5       	ldd	r24, Y+40	; 0x28
    d0c0:	80 7a       	andi	r24, 0xA0	; 160
    d0c2:	49 f0       	breq	.+18     	; 0xd0d6 <f_utime+0x6e>
    d0c4:	06 e0       	ldi	r16, 0x06	; 6
    d0c6:	10 e0       	ldi	r17, 0x00	; 0
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    d0c8:	c7 01       	movw	r24, r14
    d0ca:	a7 d0       	rcall	.+334    	; 0xd21a <ff_memfree>
    d0cc:	c8 01       	movw	r24, r16
    d0ce:	21 c0       	rjmp	.+66     	; 0xd112 <f_utime+0xaa>


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    d0d0:	81 e1       	ldi	r24, 0x11	; 17
    d0d2:	90 e0       	ldi	r25, 0x00	; 0
    d0d4:	1e c0       	rjmp	.+60     	; 0xd112 <f_utime+0xaa>
				st_dword(fs->dirbuf + XDIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
				res = store_xdir(&dj);
			} else
#endif
			{
				st_dword(dj.dir + DIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
    d0d6:	f6 01       	movw	r30, r12
    d0d8:	44 81       	ldd	r20, Z+4	; 0x04
    d0da:	55 81       	ldd	r21, Z+5	; 0x05
    d0dc:	60 e0       	ldi	r22, 0x00	; 0
    d0de:	70 e0       	ldi	r23, 0x00	; 0
    d0e0:	ba 01       	movw	r22, r20
    d0e2:	55 27       	eor	r21, r21
    d0e4:	44 27       	eor	r20, r20
    d0e6:	86 81       	ldd	r24, Z+6	; 0x06
    d0e8:	97 81       	ldd	r25, Z+7	; 0x07
    d0ea:	a0 e0       	ldi	r26, 0x00	; 0
    d0ec:	b0 e0       	ldi	r27, 0x00	; 0
    d0ee:	48 2b       	or	r20, r24
    d0f0:	59 2b       	or	r21, r25
    d0f2:	6a 2b       	or	r22, r26
    d0f4:	7b 2b       	or	r23, r27
    d0f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    d0f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    d0fa:	46 96       	adiw	r24, 0x16	; 22
    d0fc:	0e 94 e7 47 	call	0x8fce	; 0x8fce <st_dword>
				fs->wflag = 1;
    d100:	8f a5       	ldd	r24, Y+47	; 0x2f
    d102:	98 a9       	ldd	r25, Y+48	; 0x30
    d104:	21 e0       	ldi	r18, 0x01	; 1
    d106:	fc 01       	movw	r30, r24
    d108:	23 83       	std	Z+3, r18	; 0x03
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
    d10a:	0e 94 7a 4a 	call	0x94f4	; 0x94f4 <sync_fs>
    d10e:	8c 01       	movw	r16, r24
    d110:	db cf       	rjmp	.-74     	; 0xd0c8 <f_utime+0x60>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    d112:	e2 96       	adiw	r28, 0x32	; 50
    d114:	e8 e0       	ldi	r30, 0x08	; 8
    d116:	0c 94 33 e7 	jmp	0x1ce66	; 0x1ce66 <__epilogue_restores__+0x14>

0000d11a <f_getlabel>:
FRESULT f_getlabel (
	const TCHAR* path,	/* Logical drive number */
	TCHAR* label,		/* Buffer to store the volume label */
	DWORD* vsn			/* Variable to store the volume serial number */
)
{
    d11a:	a2 e3       	ldi	r26, 0x32	; 50
    d11c:	b0 e0       	ldi	r27, 0x00	; 0
    d11e:	e3 e9       	ldi	r30, 0x93	; 147
    d120:	f8 e6       	ldi	r31, 0x68	; 104
    d122:	0c 94 17 e7 	jmp	0x1ce2e	; 0x1ce2e <__prologue_saves__+0x14>
    d126:	9a ab       	std	Y+50, r25	; 0x32
    d128:	89 ab       	std	Y+49, r24	; 0x31
    d12a:	7b 01       	movw	r14, r22
    d12c:	6a 01       	movw	r12, r20
	FATFS *fs;
	UINT si, di;
	WCHAR wc;

	/* Get logical drive */
	res = mount_volume(&path, &fs, 0);
    d12e:	40 e0       	ldi	r20, 0x00	; 0
    d130:	be 01       	movw	r22, r28
    d132:	61 5d       	subi	r22, 0xD1	; 209
    d134:	7f 4f       	sbci	r23, 0xFF	; 255
    d136:	ce 01       	movw	r24, r28
    d138:	c1 96       	adiw	r24, 0x31	; 49
    d13a:	0e 94 0f 4c 	call	0x981e	; 0x981e <mount_volume>
    d13e:	8c 01       	movw	r16, r24

	/* Get volume label */
	if (res == FR_OK && label) {
    d140:	89 2b       	or	r24, r25
    d142:	09 f0       	breq	.+2      	; 0xd146 <f_getlabel+0x2c>
    d144:	62 c0       	rjmp	.+196    	; 0xd20a <f_getlabel+0xf0>
    d146:	e1 14       	cp	r14, r1
    d148:	f1 04       	cpc	r15, r1
    d14a:	a1 f1       	breq	.+104    	; 0xd1b4 <f_getlabel+0x9a>
		dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
    d14c:	8f a5       	ldd	r24, Y+47	; 0x2f
    d14e:	98 a9       	ldd	r25, Y+48	; 0x30
    d150:	9a 83       	std	Y+2, r25	; 0x02
    d152:	89 83       	std	Y+1, r24	; 0x01
    d154:	1f 82       	std	Y+7, r1	; 0x07
    d156:	18 86       	std	Y+8, r1	; 0x08
    d158:	19 86       	std	Y+9, r1	; 0x09
    d15a:	1a 86       	std	Y+10, r1	; 0x0a
		res = dir_sdi(&dj, 0);
    d15c:	40 e0       	ldi	r20, 0x00	; 0
    d15e:	50 e0       	ldi	r21, 0x00	; 0
    d160:	ba 01       	movw	r22, r20
    d162:	ce 01       	movw	r24, r28
    d164:	01 96       	adiw	r24, 0x01	; 1
    d166:	0e 94 16 50 	call	0xa02c	; 0xa02c <dir_sdi>
		if (res == FR_OK) {
    d16a:	00 97       	sbiw	r24, 0x00	; 0
    d16c:	f1 f4       	brne	.+60     	; 0xd1aa <f_getlabel+0x90>
		 	res = DIR_READ_LABEL(&dj);		/* Find a volume label entry */
    d16e:	61 e0       	ldi	r22, 0x01	; 1
    d170:	70 e0       	ldi	r23, 0x00	; 0
    d172:	ce 01       	movw	r24, r28
    d174:	01 96       	adiw	r24, 0x01	; 1
    d176:	0e 94 af 53 	call	0xa75e	; 0xa75e <dir_read>
		 	if (res == FR_OK) {
    d17a:	00 97       	sbiw	r24, 0x00	; 0
    d17c:	b1 f4       	brne	.+44     	; 0xd1aa <f_getlabel+0x90>
    d17e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    d180:	9c 8d       	ldd	r25, Y+28	; 0x1c
    d182:	f7 01       	movw	r30, r14
    d184:	3b 96       	adiw	r30, 0x0b	; 11
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry */
					while (si < 11) {
						wc = dj.dir[si++];
    d186:	a7 01       	movw	r20, r14
    d188:	dc 01       	movw	r26, r24
    d18a:	2d 91       	ld	r18, X+
    d18c:	cd 01       	movw	r24, r26
						wc = ff_oem2uni(wc, CODEPAGE);					/* Convert it into Unicode */
						if (wc != 0) wc = put_utf(wc, &label[di], 4);	/* Put it in Unicode */
						if (wc == 0) { di = 0; break; }
						di += wc;
#else									/* ANSI/OEM output */
						label[di++] = (TCHAR)wc;
    d18e:	da 01       	movw	r26, r20
    d190:	2d 93       	st	X+, r18
    d192:	ad 01       	movw	r20, r26
					label[di] = 0;
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry */
					while (si < 11) {
    d194:	ae 17       	cp	r26, r30
    d196:	bf 07       	cpc	r27, r31
    d198:	b9 f7       	brne	.-18     	; 0xd188 <f_getlabel+0x6e>
#else									/* ANSI/OEM output */
						label[di++] = (TCHAR)wc;
#endif
					}
					do {				/* Truncate trailing spaces */
						label[di] = 0;
    d19a:	10 82       	st	Z, r1
						if (di == 0) break;
    d19c:	ee 16       	cp	r14, r30
    d19e:	ff 06       	cpc	r15, r31
    d1a0:	49 f0       	breq	.+18     	; 0xd1b4 <f_getlabel+0x9a>
					} while (label[--di] == ' ');
    d1a2:	82 91       	ld	r24, -Z
    d1a4:	80 32       	cpi	r24, 0x20	; 32
    d1a6:	c9 f3       	breq	.-14     	; 0xd19a <f_getlabel+0x80>
    d1a8:	05 c0       	rjmp	.+10     	; 0xd1b4 <f_getlabel+0x9a>
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
    d1aa:	84 30       	cpi	r24, 0x04	; 4
    d1ac:	91 05       	cpc	r25, r1
    d1ae:	61 f5       	brne	.+88     	; 0xd208 <f_getlabel+0xee>
			label[0] = 0;
    d1b0:	f7 01       	movw	r30, r14
    d1b2:	10 82       	st	Z, r1
			res = FR_OK;
		}
	}

	/* Get volume serial number */
	if (res == FR_OK && vsn) {
    d1b4:	c1 14       	cp	r12, r1
    d1b6:	d1 04       	cpc	r13, r1
    d1b8:	41 f1       	breq	.+80     	; 0xd20a <f_getlabel+0xf0>
		res = move_window(fs, fs->volbase);
    d1ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    d1bc:	98 a9       	ldd	r25, Y+48	; 0x30
    d1be:	fc 01       	movw	r30, r24
    d1c0:	41 a1       	ldd	r20, Z+33	; 0x21
    d1c2:	52 a1       	ldd	r21, Z+34	; 0x22
    d1c4:	63 a1       	ldd	r22, Z+35	; 0x23
    d1c6:	74 a1       	ldd	r23, Z+36	; 0x24
    d1c8:	0e 94 94 4b 	call	0x9728	; 0x9728 <move_window>
    d1cc:	8c 01       	movw	r16, r24
		if (res == FR_OK) {
    d1ce:	89 2b       	or	r24, r25
    d1d0:	e1 f4       	brne	.+56     	; 0xd20a <f_getlabel+0xf0>
			switch (fs->fs_type) {
    d1d2:	ef a5       	ldd	r30, Y+47	; 0x2f
    d1d4:	f8 a9       	ldd	r31, Y+48	; 0x30
    d1d6:	80 81       	ld	r24, Z
    d1d8:	83 30       	cpi	r24, 0x03	; 3
    d1da:	29 f0       	breq	.+10     	; 0xd1e6 <f_getlabel+0xcc>
    d1dc:	84 30       	cpi	r24, 0x04	; 4
    d1de:	31 f0       	breq	.+12     	; 0xd1ec <f_getlabel+0xd2>

			case FS_FAT32:
				di = BS_VolID32; break;

			default:
				di = BS_VolID;
    d1e0:	87 e2       	ldi	r24, 0x27	; 39
    d1e2:	90 e0       	ldi	r25, 0x00	; 0
    d1e4:	05 c0       	rjmp	.+10     	; 0xd1f0 <f_getlabel+0xd6>
			switch (fs->fs_type) {
			case FS_EXFAT:
				di = BPB_VolIDEx; break;

			case FS_FAT32:
				di = BS_VolID32; break;
    d1e6:	83 e4       	ldi	r24, 0x43	; 67
    d1e8:	90 e0       	ldi	r25, 0x00	; 0
    d1ea:	02 c0       	rjmp	.+4      	; 0xd1f0 <f_getlabel+0xd6>
	if (res == FR_OK && vsn) {
		res = move_window(fs, fs->volbase);
		if (res == FR_OK) {
			switch (fs->fs_type) {
			case FS_EXFAT:
				di = BPB_VolIDEx; break;
    d1ec:	84 e6       	ldi	r24, 0x64	; 100
    d1ee:	90 e0       	ldi	r25, 0x00	; 0
				di = BS_VolID32; break;

			default:
				di = BS_VolID;
			}
			*vsn = ld_dword(fs->win + di);
    d1f0:	f5 96       	adiw	r30, 0x35	; 53
    d1f2:	8e 0f       	add	r24, r30
    d1f4:	9f 1f       	adc	r25, r31
    d1f6:	0e 94 d2 47 	call	0x8fa4	; 0x8fa4 <ld_dword>
    d1fa:	d6 01       	movw	r26, r12
    d1fc:	6d 93       	st	X+, r22
    d1fe:	7d 93       	st	X+, r23
    d200:	8d 93       	st	X+, r24
    d202:	9c 93       	st	X, r25
    d204:	13 97       	sbiw	r26, 0x03	; 3
    d206:	01 c0       	rjmp	.+2      	; 0xd20a <f_getlabel+0xf0>
						if (di == 0) break;
					} while (label[--di] == ' ');
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
    d208:	8c 01       	movw	r16, r24
			*vsn = ld_dword(fs->win + di);
		}
	}

	LEAVE_FF(fs, res);
}
    d20a:	c8 01       	movw	r24, r16
    d20c:	e2 96       	adiw	r28, 0x32	; 50
    d20e:	e8 e0       	ldi	r30, 0x08	; 8
    d210:	0c 94 33 e7 	jmp	0x1ce66	; 0x1ce66 <__epilogue_restores__+0x14>

0000d214 <ff_memalloc>:

void* ff_memalloc (	/* Returns pointer to the allocated memory block (null if not enough core) */
	UINT msize		/* Number of bytes to allocate */
)
{
	return safemalloc(msize);	/* Allocate a new memory block with POSIX API */
    d214:	0c 94 02 28 	jmp	0x5004	; 0x5004 <safemalloc>
}
    d218:	08 95       	ret

0000d21a <ff_memfree>:

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free (nothing to do if null) */
)
{
	safefree(mblock);	/* Free the memory block with POSIX API */
    d21a:	0c 94 24 28 	jmp	0x5048	; 0x5048 <safefree>
    d21e:	08 95       	ret

0000d220 <ff_uni2oem>:
#if FF_CODE_PAGE != 0 && FF_CODE_PAGE < 900
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
    d220:	cf 92       	push	r12
    d222:	df 92       	push	r13
    d224:	ef 92       	push	r14
    d226:	ff 92       	push	r15
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (uni < 0x80) {	/* ASCII? */
    d228:	60 38       	cpi	r22, 0x80	; 128
    d22a:	71 05       	cpc	r23, r1
    d22c:	81 05       	cpc	r24, r1
    d22e:	91 05       	cpc	r25, r1
    d230:	10 f4       	brcc	.+4      	; 0xd236 <ff_uni2oem+0x16>
		c = (WCHAR)uni;
    d232:	cb 01       	movw	r24, r22
    d234:	23 c0       	rjmp	.+70     	; 0xd27c <ff_uni2oem+0x5c>

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
    d236:	61 15       	cp	r22, r1
    d238:	71 05       	cpc	r23, r1
    d23a:	21 e0       	ldi	r18, 0x01	; 1
    d23c:	82 07       	cpc	r24, r18
    d23e:	91 05       	cpc	r25, r1
    d240:	d8 f4       	brcc	.+54     	; 0xd278 <ff_uni2oem+0x58>
    d242:	45 3b       	cpi	r20, 0xB5	; 181
    d244:	51 40       	sbci	r21, 0x01	; 1
    d246:	c1 f4       	brne	.+48     	; 0xd278 <ff_uni2oem+0x58>
    d248:	e6 ea       	ldi	r30, 0xA6	; 166
    d24a:	f7 e0       	ldi	r31, 0x07	; 7
    d24c:	20 e0       	ldi	r18, 0x00	; 0
    d24e:	30 e0       	ldi	r19, 0x00	; 0
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
    d250:	c1 90       	ld	r12, Z+
    d252:	d1 90       	ld	r13, Z+
    d254:	e1 2c       	mov	r14, r1
    d256:	f1 2c       	mov	r15, r1
    d258:	6c 15       	cp	r22, r12
    d25a:	7d 05       	cpc	r23, r13
    d25c:	8e 05       	cpc	r24, r14
    d25e:	9f 05       	cpc	r25, r15
    d260:	29 f0       	breq	.+10     	; 0xd26c <ff_uni2oem+0x4c>
    d262:	2f 5f       	subi	r18, 0xFF	; 255
    d264:	3f 4f       	sbci	r19, 0xFF	; 255
    d266:	20 38       	cpi	r18, 0x80	; 128
    d268:	31 05       	cpc	r19, r1
    d26a:	91 f7       	brne	.-28     	; 0xd250 <ff_uni2oem+0x30>
			c = (c + 0x80) & 0xFF;
    d26c:	b9 01       	movw	r22, r18
    d26e:	60 58       	subi	r22, 0x80	; 128
    d270:	7f 4f       	sbci	r23, 0xFF	; 255
    d272:	cb 01       	movw	r24, r22
    d274:	99 27       	eor	r25, r25
    d276:	02 c0       	rjmp	.+4      	; 0xd27c <ff_uni2oem+0x5c>
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
	WCHAR c = 0;
    d278:	80 e0       	ldi	r24, 0x00	; 0
    d27a:	90 e0       	ldi	r25, 0x00	; 0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
    d27c:	ff 90       	pop	r15
    d27e:	ef 90       	pop	r14
    d280:	df 90       	pop	r13
    d282:	cf 90       	pop	r12
    d284:	08 95       	ret

0000d286 <ff_oem2uni>:
{
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (oem < 0x80) {	/* ASCII? */
    d286:	80 38       	cpi	r24, 0x80	; 128
    d288:	91 05       	cpc	r25, r1
    d28a:	88 f0       	brcs	.+34     	; 0xd2ae <ff_oem2uni+0x28>
		c = oem;

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
    d28c:	65 3b       	cpi	r22, 0xB5	; 181
    d28e:	71 40       	sbci	r23, 0x01	; 1
    d290:	61 f4       	brne	.+24     	; 0xd2aa <ff_oem2uni+0x24>
			if (oem < 0x100) c = p[oem - 0x80];
    d292:	8f 3f       	cpi	r24, 0xFF	; 255
    d294:	91 05       	cpc	r25, r1
    d296:	09 f0       	breq	.+2      	; 0xd29a <ff_oem2uni+0x14>
    d298:	40 f4       	brcc	.+16     	; 0xd2aa <ff_oem2uni+0x24>
    d29a:	88 0f       	add	r24, r24
    d29c:	99 1f       	adc	r25, r25
    d29e:	fc 01       	movw	r30, r24
    d2a0:	ea 55       	subi	r30, 0x5A	; 90
    d2a2:	f9 4f       	sbci	r31, 0xF9	; 249
    d2a4:	80 81       	ld	r24, Z
    d2a6:	91 81       	ldd	r25, Z+1	; 0x01
    d2a8:	08 95       	ret
WCHAR ff_oem2uni (	/* Returns Unicode character in UTF-16, zero on error */
	WCHAR	oem,	/* OEM code to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
	WCHAR c = 0;
    d2aa:	80 e0       	ldi	r24, 0x00	; 0
    d2ac:	90 e0       	ldi	r25, 0x00	; 0
			if (oem < 0x100) c = p[oem - 0x80];
		}
	}

	return c;
}
    d2ae:	08 95       	ret

0000d2b0 <ff_wtoupper>:

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
    d2b0:	61 15       	cp	r22, r1
    d2b2:	71 05       	cpc	r23, r1
    d2b4:	21 e0       	ldi	r18, 0x01	; 1
    d2b6:	82 07       	cpc	r24, r18
    d2b8:	91 05       	cpc	r25, r1
    d2ba:	08 f0       	brcs	.+2      	; 0xd2be <ff_wtoupper+0xe>
    d2bc:	5a c0       	rjmp	.+180    	; 0xd372 <ff_wtoupper+0xc2>
		uc = (WORD)uni;
		p = uc < 0x1000 ? cvt1 : cvt2;
    d2be:	61 15       	cp	r22, r1
    d2c0:	80 e1       	ldi	r24, 0x10	; 16
    d2c2:	78 07       	cpc	r23, r24
    d2c4:	18 f0       	brcs	.+6      	; 0xd2cc <ff_wtoupper+0x1c>
    d2c6:	a8 ef       	ldi	r26, 0xF8	; 248
    d2c8:	b4 e0       	ldi	r27, 0x04	; 4
    d2ca:	02 c0       	rjmp	.+4      	; 0xd2d0 <ff_wtoupper+0x20>
    d2cc:	a4 eb       	ldi	r26, 0xB4	; 180
    d2ce:	b5 e0       	ldi	r27, 0x05	; 5
		for (;;) {
			bc = *p++;								/* Get the block base */
    d2d0:	2d 91       	ld	r18, X+
    d2d2:	3c 91       	ld	r19, X
    d2d4:	11 97       	sbiw	r26, 0x01	; 1
			if (bc == 0 || uc < bc) break;			/* Not matched? */
    d2d6:	21 15       	cp	r18, r1
    d2d8:	31 05       	cpc	r19, r1
    d2da:	09 f4       	brne	.+2      	; 0xd2de <ff_wtoupper+0x2e>
    d2dc:	48 c0       	rjmp	.+144    	; 0xd36e <ff_wtoupper+0xbe>
    d2de:	62 17       	cp	r22, r18
    d2e0:	73 07       	cpc	r23, r19
    d2e2:	08 f4       	brcc	.+2      	; 0xd2e6 <ff_wtoupper+0x36>
    d2e4:	44 c0       	rjmp	.+136    	; 0xd36e <ff_wtoupper+0xbe>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
    d2e6:	14 96       	adiw	r26, 0x04	; 4
    d2e8:	fd 01       	movw	r30, r26
    d2ea:	32 97       	sbiw	r30, 0x02	; 2
    d2ec:	80 81       	ld	r24, Z
    d2ee:	91 81       	ldd	r25, Z+1	; 0x01
    d2f0:	e9 2f       	mov	r30, r25
    d2f2:	ff 27       	eor	r31, r31
    d2f4:	99 27       	eor	r25, r25
			if (uc < bc + nc) {	/* In the block? */
    d2f6:	a9 01       	movw	r20, r18
    d2f8:	48 0f       	add	r20, r24
    d2fa:	59 1f       	adc	r21, r25
    d2fc:	64 17       	cp	r22, r20
    d2fe:	75 07       	cpc	r23, r21
    d300:	70 f5       	brcc	.+92     	; 0xd35e <ff_wtoupper+0xae>
				switch (cmd) {
    d302:	e9 30       	cpi	r30, 0x09	; 9
    d304:	f1 05       	cpc	r31, r1
    d306:	98 f5       	brcc	.+102    	; 0xd36e <ff_wtoupper+0xbe>
    d308:	ec 54       	subi	r30, 0x4C	; 76
    d30a:	ff 4f       	sbci	r31, 0xFF	; 255
    d30c:	0c 94 de e6 	jmp	0x1cdbc	; 0x1cdbc <__tablejump2__>
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
    d310:	62 1b       	sub	r22, r18
    d312:	73 0b       	sbc	r23, r19
    d314:	fb 01       	movw	r30, r22
    d316:	ee 0f       	add	r30, r30
    d318:	ff 1f       	adc	r31, r31
    d31a:	ea 0f       	add	r30, r26
    d31c:	fb 1f       	adc	r31, r27
    d31e:	60 81       	ld	r22, Z
    d320:	71 81       	ldd	r23, Z+1	; 0x01
    d322:	25 c0       	rjmp	.+74     	; 0xd36e <ff_wtoupper+0xbe>
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
    d324:	cb 01       	movw	r24, r22
    d326:	82 1b       	sub	r24, r18
    d328:	93 0b       	sbc	r25, r19
    d32a:	81 70       	andi	r24, 0x01	; 1
    d32c:	99 27       	eor	r25, r25
    d32e:	68 1b       	sub	r22, r24
    d330:	79 0b       	sbc	r23, r25
    d332:	1d c0       	rjmp	.+58     	; 0xd36e <ff_wtoupper+0xbe>
				case 2: uc -= 16; break;			/* Shift -16 */
    d334:	60 51       	subi	r22, 0x10	; 16
    d336:	71 09       	sbc	r23, r1
    d338:	1a c0       	rjmp	.+52     	; 0xd36e <ff_wtoupper+0xbe>
				case 3:	uc -= 32; break;			/* Shift -32 */
    d33a:	60 52       	subi	r22, 0x20	; 32
    d33c:	71 09       	sbc	r23, r1
    d33e:	17 c0       	rjmp	.+46     	; 0xd36e <ff_wtoupper+0xbe>
				case 4:	uc -= 48; break;			/* Shift -48 */
    d340:	60 53       	subi	r22, 0x30	; 48
    d342:	71 09       	sbc	r23, r1
    d344:	14 c0       	rjmp	.+40     	; 0xd36e <ff_wtoupper+0xbe>
				case 5:	uc -= 26; break;			/* Shift -26 */
    d346:	6a 51       	subi	r22, 0x1A	; 26
    d348:	71 09       	sbc	r23, r1
    d34a:	11 c0       	rjmp	.+34     	; 0xd36e <ff_wtoupper+0xbe>
				case 6:	uc += 8; break;				/* Shift +8 */
    d34c:	68 5f       	subi	r22, 0xF8	; 248
    d34e:	7f 4f       	sbci	r23, 0xFF	; 255
    d350:	0e c0       	rjmp	.+28     	; 0xd36e <ff_wtoupper+0xbe>
				case 7: uc -= 80; break;			/* Shift -80 */
    d352:	60 55       	subi	r22, 0x50	; 80
    d354:	71 09       	sbc	r23, r1
    d356:	0b c0       	rjmp	.+22     	; 0xd36e <ff_wtoupper+0xbe>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
    d358:	60 56       	subi	r22, 0x60	; 96
    d35a:	7c 41       	sbci	r23, 0x1C	; 28
    d35c:	08 c0       	rjmp	.+16     	; 0xd36e <ff_wtoupper+0xbe>
				}
				break;
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
    d35e:	ef 2b       	or	r30, r31
    d360:	09 f0       	breq	.+2      	; 0xd364 <ff_wtoupper+0xb4>
    d362:	b6 cf       	rjmp	.-148    	; 0xd2d0 <ff_wtoupper+0x20>
    d364:	88 0f       	add	r24, r24
    d366:	99 1f       	adc	r25, r25
    d368:	a8 0f       	add	r26, r24
    d36a:	b9 1f       	adc	r27, r25
    d36c:	b1 cf       	rjmp	.-158    	; 0xd2d0 <ff_wtoupper+0x20>
		}
		uni = uc;
    d36e:	80 e0       	ldi	r24, 0x00	; 0
    d370:	90 e0       	ldi	r25, 0x00	; 0
	}

	return uni;
}
    d372:	08 95       	ret

0000d374 <disk_status>:

DSTATUS disk_status (
BYTE pdrv                                         /* Physical drive nmuber to identify the drive */
)
{
    switch (pdrv)
    d374:	81 11       	cpse	r24, r1
    d376:	02 c0       	rjmp	.+4      	; 0xd37c <disk_status+0x8>
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_status() );
    d378:	a1 c1       	rjmp	.+834    	; 0xd6bc <mmc_disk_status>
    d37a:	08 95       	ret
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_status() );
#endif
    }
    return STA_NOINIT;
    d37c:	81 e0       	ldi	r24, 0x01	; 1
}
    d37e:	08 95       	ret

0000d380 <disk_initialize>:
DSTATUS disk_initialize (
BYTE pdrv                                         /* Physical drive nmuber to identify the drive */
)
{

    switch (pdrv)
    d380:	81 11       	cpse	r24, r1
    d382:	02 c0       	rjmp	.+4      	; 0xd388 <disk_initialize+0x8>
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_initialize() );
    d384:	f6 c0       	rjmp	.+492    	; 0xd572 <mmc_disk_initialize>
    d386:	08 95       	ret
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_initialize() );
#endif
    }
    return STA_NOINIT;
    d388:	81 e0       	ldi	r24, 0x01	; 1
}
    d38a:	08 95       	ret

0000d38c <disk_read>:
BYTE pdrv,                                        /* Physical drive nmuber to identify the drive */
BYTE *buff,                                       /* Data buffer to store read data */
LBA_t sector,                                     /* Start sector in LBA */
UINT count                                        /* Number of sectors to read */
)
{
    d38c:	0f 93       	push	r16
    d38e:	1f 93       	push	r17
    d390:	fb 01       	movw	r30, r22
    switch (pdrv)
    d392:	81 11       	cpse	r24, r1
    d394:	06 c0       	rjmp	.+12     	; 0xd3a2 <disk_read+0x16>
    d396:	ba 01       	movw	r22, r20
    d398:	a9 01       	movw	r20, r18
    d39a:	cf 01       	movw	r24, r30
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_read(buff, sector, count) );
    d39c:	98 01       	movw	r18, r16
    d39e:	91 d1       	rcall	.+802    	; 0xd6c2 <mmc_disk_read>
    d3a0:	02 c0       	rjmp	.+4      	; 0xd3a6 <disk_read+0x1a>
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_read(buff, sector, count) );
#endif
    }
    return RES_PARERR;
    d3a2:	84 e0       	ldi	r24, 0x04	; 4
    d3a4:	90 e0       	ldi	r25, 0x00	; 0
}
    d3a6:	1f 91       	pop	r17
    d3a8:	0f 91       	pop	r16
    d3aa:	08 95       	ret

0000d3ac <disk_write>:
BYTE pdrv,                                        /* Physical drive nmuber to identify the drive */
const BYTE *buff,                                 /* Data to be written */
LBA_t sector,                                     /* Start sector in LBA */
UINT count                                        /* Number of sectors to write */
)
{
    d3ac:	0f 93       	push	r16
    d3ae:	1f 93       	push	r17
    d3b0:	fb 01       	movw	r30, r22
    switch (pdrv)
    d3b2:	81 11       	cpse	r24, r1
    d3b4:	06 c0       	rjmp	.+12     	; 0xd3c2 <disk_write+0x16>
    d3b6:	ba 01       	movw	r22, r20
    d3b8:	a9 01       	movw	r20, r18
    d3ba:	cf 01       	movw	r24, r30
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_write(buff, sector, count) );
    d3bc:	98 01       	movw	r18, r16
    d3be:	e2 d1       	rcall	.+964    	; 0xd784 <mmc_disk_write>
    d3c0:	02 c0       	rjmp	.+4      	; 0xd3c6 <disk_write+0x1a>
        case DEV_USB :
            return ( usb_disk_write(buff, sector, count) );
#endif
    }

    return RES_PARERR;
    d3c2:	84 e0       	ldi	r24, 0x04	; 4
    d3c4:	90 e0       	ldi	r25, 0x00	; 0
}
    d3c6:	1f 91       	pop	r17
    d3c8:	0f 91       	pop	r16
    d3ca:	08 95       	ret

0000d3cc <disk_ioctl>:
DRESULT disk_ioctl (
BYTE pdrv,                                        /* Physical drive nmuber (0..) */
BYTE cmd,                                         /* Control code */
void *buff                                        /* Buffer to send/receive control data */
)
{
    d3cc:	96 2f       	mov	r25, r22
    switch (pdrv)
    d3ce:	81 11       	cpse	r24, r1
    d3d0:	04 c0       	rjmp	.+8      	; 0xd3da <disk_ioctl+0xe>
    d3d2:	ba 01       	movw	r22, r20
    d3d4:	89 2f       	mov	r24, r25
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_ioctl(cmd, buff) );
    d3d6:	4a c2       	rjmp	.+1172   	; 0xd86c <mmc_disk_ioctl>
    d3d8:	08 95       	ret
#ifdef DRV_USB
        case DEV_MMC :
            return ( usb_disk_ioctl(cmd, buff) );
#endif
    }
    return RES_PARERR;
    d3da:	84 e0       	ldi	r24, 0x04	; 4
    d3dc:	90 e0       	ldi	r25, 0x00	; 0
}
    d3de:	08 95       	ret

0000d3e0 <xchg_spi>:
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d3e0:	f9 c4       	rjmp	.+2546   	; 0xddd4 <mmc_spi_TXRX>
    return dat;
}
    d3e2:	08 95       	ret

0000d3e4 <deselect>:
///@return void
MEMSPACE
static
void deselect (void)
{
    CS_HIGH();
    d3e4:	ce d4       	rcall	.+2460   	; 0xdd82 <mmc_spi_end>
    xchg_spi(0xFF);                               /*< Dummy clock (force DO hi-z for multiple slave SPI) */
    d3e6:	8f ef       	ldi	r24, 0xFF	; 255
    d3e8:	fb df       	rcall	.-10     	; 0xd3e0 <xchg_spi>
    xchg_spi(0xFF);                               /*< Dummy clock (force DO hi-z for multiple slave SPI) */
    d3ea:	8f ef       	ldi	r24, 0xFF	; 255
    d3ec:	f9 cf       	rjmp	.-14     	; 0xd3e0 <xchg_spi>
    d3ee:	08 95       	ret

0000d3f0 <rcvr_datablock>:
    d3f0:	0f 93       	push	r16
static
int rcvr_datablock (
BYTE *buff,                                       /*< Data buffer to store received data */
UINT btr                                          /*< Byte count (must be multiple of 4) */
)
{
    d3f2:	1f 93       	push	r17
    d3f4:	cf 93       	push	r28
    d3f6:	df 93       	push	r29
    d3f8:	ec 01       	movw	r28, r24
    d3fa:	8b 01       	movw	r16, r22
    BYTE token;

    mmc_set_ms_timeout(1000);
    d3fc:	88 ee       	ldi	r24, 0xE8	; 232
    d3fe:	93 e0       	ldi	r25, 0x03	; 3
    d400:	ec d4       	rcall	.+2520   	; 0xddda <mmc_set_ms_timeout>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d402:	8f ef       	ldi	r24, 0xFF	; 255
    d404:	e7 d4       	rcall	.+2510   	; 0xddd4 <mmc_spi_TXRX>

    mmc_set_ms_timeout(1000);
    do                                            /* Wait for data packet in timeout of 400ms */
    {
        token = xchg_spi(0xFF);
    } while ((token == 0xFF) && !mmc_test_timeout());
    d406:	8f 3f       	cpi	r24, 0xFF	; 255
    d408:	31 f4       	brne	.+12     	; 0xd416 <rcvr_datablock+0x26>
    d40a:	ee d4       	rcall	.+2524   	; 0xdde8 <mmc_test_timeout>
    d40c:	89 2b       	or	r24, r25
    d40e:	c9 f3       	breq	.-14     	; 0xd402 <rcvr_datablock+0x12>
    if (token != 0xFE) return 0;                  /* If not valid data token, retutn with error */
    d410:	80 e0       	ldi	r24, 0x00	; 0
    d412:	90 e0       	ldi	r25, 0x00	; 0
    d414:	0b c0       	rjmp	.+22     	; 0xd42c <rcvr_datablock+0x3c>
    d416:	8e 3f       	cpi	r24, 0xFE	; 254
void rcvr_spi_multi (
BYTE *p,                                          /* Data read buffer */
UINT cnt                                          /* Size of data block */
)
{
    mmc_spi_RX_buffer((uint8_t *)p, cnt);
    d418:	d9 f7       	brne	.-10     	; 0xd410 <rcvr_datablock+0x20>
    d41a:	b8 01       	movw	r22, r16
    d41c:	ce 01       	movw	r24, r28
        token = xchg_spi(0xFF);
    } while ((token == 0xFF) && !mmc_test_timeout());
    if (token != 0xFE) return 0;                  /* If not valid data token, retutn with error */

    rcvr_spi_multi(buff, btr);                    /* Receive the data block into buffer */
    xchg_spi(0xFF);                               /* Discard CRC */
    d41e:	d7 d4       	rcall	.+2478   	; 0xddce <mmc_spi_RX_buffer>
    d420:	8f ef       	ldi	r24, 0xFF	; 255
    d422:	de df       	rcall	.-68     	; 0xd3e0 <xchg_spi>
    xchg_spi(0xFF);
    d424:	8f ef       	ldi	r24, 0xFF	; 255
    d426:	dc df       	rcall	.-72     	; 0xd3e0 <xchg_spi>
    d428:	81 e0       	ldi	r24, 0x01	; 1
    d42a:	90 e0       	ldi	r25, 0x00	; 0
    d42c:	df 91       	pop	r29

    return 1;                                     /* Return with success */
}
    d42e:	cf 91       	pop	r28
    d430:	1f 91       	pop	r17
    d432:	0f 91       	pop	r16
    d434:	08 95       	ret

0000d436 <wait_ready>:
    d436:	cf 93       	push	r28
int wait_ready (
UINT wt                                           /*< Timeout [ms] */
)
{
    BYTE d;
    mmc_set_ms_timeout(wt);
    d438:	d0 d4       	rcall	.+2464   	; 0xddda <mmc_set_ms_timeout>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d43a:	8f ef       	ldi	r24, 0xFF	; 255
    d43c:	cb d4       	rcall	.+2454   	; 0xddd4 <mmc_spi_TXRX>
    d43e:	c8 2f       	mov	r28, r24
{
    BYTE d;
    mmc_set_ms_timeout(wt);
    do
    d = xchg_spi(0xFF);
    while (d != 0xFF && !mmc_test_timeout());
    d440:	8f 3f       	cpi	r24, 0xFF	; 255
    d442:	19 f0       	breq	.+6      	; 0xd44a <wait_ready+0x14>
    d444:	d1 d4       	rcall	.+2466   	; 0xdde8 <mmc_test_timeout>
    d446:	89 2b       	or	r24, r25
    d448:	c1 f3       	breq	.-16     	; 0xd43a <wait_ready+0x4>

    return (d == 0xFF) ? 1 : 0;
    d44a:	81 e0       	ldi	r24, 0x01	; 1
    d44c:	90 e0       	ldi	r25, 0x00	; 0
    d44e:	cf 3f       	cpi	r28, 0xFF	; 255
    d450:	11 f0       	breq	.+4      	; 0xd456 <wait_ready+0x20>
    d452:	80 e0       	ldi	r24, 0x00	; 0
    d454:	90 e0       	ldi	r25, 0x00	; 0
}
    d456:	cf 91       	pop	r28
    d458:	08 95       	ret

0000d45a <select>:
///@return 1 Successful
///@return 0 Timeout
MEMSPACE
static
int select (void)
{
    d45a:	cf 93       	push	r28
    d45c:	df 93       	push	r29
    d45e:	00 d0       	rcall	.+0      	; 0xd460 <select+0x6>
    d460:	1f 92       	push	r1
    CS_LOW();
    d462:	82 d4       	rcall	.+2308   	; 0xdd68 <mmc_spi_begin>
    xchg_spi(0xFF);                               /* Dummy clock (force DO enabled) */
    d464:	8f ef       	ldi	r24, 0xFF	; 255
    d466:	bc df       	rcall	.-136    	; 0xd3e0 <xchg_spi>

    if (wait_ready(1000))
    d468:	88 ee       	ldi	r24, 0xE8	; 232
    d46a:	93 e0       	ldi	r25, 0x03	; 3
    d46c:	e4 df       	rcall	.-56     	; 0xd436 <wait_ready>
    d46e:	ec 01       	movw	r28, r24
    d470:	89 2b       	or	r24, r25
    d472:	61 f4       	brne	.+24     	; 0xd48c <select+0x32>
        return 1;                                 /* OK */

    printf("select failed!\n");
    d474:	89 e6       	ldi	r24, 0x69	; 105
    d476:	97 e0       	ldi	r25, 0x07	; 7
    d478:	a0 e0       	ldi	r26, 0x00	; 0
    d47a:	ed b7       	in	r30, 0x3d	; 61
    d47c:	fe b7       	in	r31, 0x3e	; 62
    d47e:	81 83       	std	Z+1, r24	; 0x01
    d480:	92 83       	std	Z+2, r25	; 0x02
    d482:	a3 83       	std	Z+3, r26	; 0x03
    d484:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>

    deselect();
    d488:	ad df       	rcall	.-166    	; 0xd3e4 <deselect>
    d48a:	02 c0       	rjmp	.+4      	; 0xd490 <select+0x36>
{
    CS_LOW();
    xchg_spi(0xFF);                               /* Dummy clock (force DO enabled) */

    if (wait_ready(1000))
        return 1;                                 /* OK */
    d48c:	c1 e0       	ldi	r28, 0x01	; 1
    d48e:	d0 e0       	ldi	r29, 0x00	; 0

    printf("select failed!\n");

    deselect();
    return 0;                                     /* Timeout */
}
    d490:	ce 01       	movw	r24, r28
    d492:	cd b7       	in	r28, 0x3d	; 61
    d494:	de b7       	in	r29, 0x3e	; 62
    d496:	23 96       	adiw	r28, 0x03	; 3
    d498:	e2 e0       	ldi	r30, 0x02	; 2
    d49a:	0c 94 39 e7 	jmp	0x1ce72	; 0x1ce72 <__epilogue_restores__+0x20>

0000d49e <send_cmd>:
static
BYTE send_cmd (
BYTE cmd,                                         /*< Command index */
DWORD arg                                         /*< Argument */
)
{
    d49e:	ff 92       	push	r15
    d4a0:	0f 93       	push	r16
    d4a2:	1f 93       	push	r17
    d4a4:	cf 93       	push	r28
    d4a6:	df 93       	push	r29
    d4a8:	c8 2f       	mov	r28, r24
    d4aa:	d4 2f       	mov	r29, r20
    d4ac:	15 2f       	mov	r17, r21
    d4ae:	06 2f       	mov	r16, r22
    d4b0:	f7 2e       	mov	r15, r23
    BYTE n, res;

    if (cmd & 0x80)                               /* ACMD<n> is the command sequense of CMD55-CMD<n> */
    d4b2:	87 ff       	sbrs	r24, 7
    d4b4:	08 c0       	rjmp	.+16     	; 0xd4c6 <send_cmd+0x28>
    {
        cmd &= 0x7F;
        res = send_cmd(CMD55, 0);
    d4b6:	40 e0       	ldi	r20, 0x00	; 0
    d4b8:	50 e0       	ldi	r21, 0x00	; 0
    d4ba:	ba 01       	movw	r22, r20
    d4bc:	87 e3       	ldi	r24, 0x37	; 55
    d4be:	ef df       	rcall	.-34     	; 0xd49e <send_cmd>
        if (res > 1) return res;
    d4c0:	82 30       	cpi	r24, 0x02	; 2
    d4c2:	58 f5       	brcc	.+86     	; 0xd51a <send_cmd+0x7c>
{
    BYTE n, res;

    if (cmd & 0x80)                               /* ACMD<n> is the command sequense of CMD55-CMD<n> */
    {
        cmd &= 0x7F;
    d4c4:	cf 77       	andi	r28, 0x7F	; 127
        res = send_cmd(CMD55, 0);
        if (res > 1) return res;
    }

/* Select the card and wait for ready except to stop multiple block read */
    if (cmd != CMD12)
    d4c6:	cc 30       	cpi	r28, 0x0C	; 12
    d4c8:	71 f4       	brne	.+28     	; 0xd4e6 <send_cmd+0x48>
        deselect();
        if (!select()) return 0xFF;
    }

/* Send command packet */
    xchg_spi(0x40 | cmd);                         /* Start + Command index */
    d4ca:	8c 2f       	mov	r24, r28
    d4cc:	80 64       	ori	r24, 0x40	; 64
    d4ce:	88 df       	rcall	.-240    	; 0xd3e0 <xchg_spi>
    xchg_spi((BYTE)(arg >> 24));                  /* Argument[31..24] */
    d4d0:	8f 2d       	mov	r24, r15
    d4d2:	86 df       	rcall	.-244    	; 0xd3e0 <xchg_spi>
    xchg_spi((BYTE)(arg >> 16));                  /* Argument[23..16] */
    d4d4:	80 2f       	mov	r24, r16
    d4d6:	84 df       	rcall	.-248    	; 0xd3e0 <xchg_spi>
    xchg_spi((BYTE)(arg >> 8));                   /* Argument[15..8] */
    d4d8:	81 2f       	mov	r24, r17
    d4da:	82 df       	rcall	.-252    	; 0xd3e0 <xchg_spi>
    d4dc:	8d 2f       	mov	r24, r29
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    d4de:	80 df       	rcall	.-256    	; 0xd3e0 <xchg_spi>
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    d4e0:	cc 23       	and	r28, r28
    d4e2:	c9 f0       	breq	.+50     	; 0xd516 <send_cmd+0x78>
    d4e4:	06 c0       	rjmp	.+12     	; 0xd4f2 <send_cmd+0x54>
    }

/* Select the card and wait for ready except to stop multiple block read */
    if (cmd != CMD12)
    {
        deselect();
    d4e6:	7e df       	rcall	.-260    	; 0xd3e4 <deselect>
    d4e8:	b8 df       	rcall	.-144    	; 0xd45a <select>
        if (!select()) return 0xFF;
    d4ea:	89 2b       	or	r24, r25
    d4ec:	71 f7       	brne	.-36     	; 0xd4ca <send_cmd+0x2c>
    d4ee:	8f ef       	ldi	r24, 0xFF	; 255
    d4f0:	14 c0       	rjmp	.+40     	; 0xd51a <send_cmd+0x7c>
    d4f2:	c8 30       	cpi	r28, 0x08	; 8
    xchg_spi((BYTE)(arg >> 16));                  /* Argument[23..16] */
    xchg_spi((BYTE)(arg >> 8));                   /* Argument[15..8] */
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    if (cmd == CMD8) n = 0x87;                    /* Valid CRC for CMD8(0x1AA) Stop */
    d4f4:	11 f4       	brne	.+4      	; 0xd4fa <send_cmd+0x5c>
    d4f6:	87 e8       	ldi	r24, 0x87	; 135
    d4f8:	01 c0       	rjmp	.+2      	; 0xd4fc <send_cmd+0x5e>

    xchg_spi(n);
    d4fa:	81 e0       	ldi	r24, 0x01	; 1
    d4fc:	71 df       	rcall	.-286    	; 0xd3e0 <xchg_spi>

/* Receive command response */
    if (cmd == CMD12) xchg_spi(0xFF);             /* Skip a stuff byte when stop reading */
    d4fe:	cc 30       	cpi	r28, 0x0C	; 12
    d500:	11 f4       	brne	.+4      	; 0xd506 <send_cmd+0x68>
    d502:	8f ef       	ldi	r24, 0xFF	; 255
    d504:	6d df       	rcall	.-294    	; 0xd3e0 <xchg_spi>
    d506:	ca e0       	ldi	r28, 0x0A	; 10
    xchg_spi((BYTE)(arg >> 16));                  /* Argument[23..16] */
    xchg_spi((BYTE)(arg >> 8));                   /* Argument[15..8] */
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    if (cmd == CMD8) n = 0x87;                    /* Valid CRC for CMD8(0x1AA) Stop */
    d508:	8f ef       	ldi	r24, 0xFF	; 255
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d50a:	64 d4       	rcall	.+2248   	; 0xddd4 <mmc_spi_TXRX>
    d50c:	87 ff       	sbrs	r24, 7
    d50e:	05 c0       	rjmp	.+10     	; 0xd51a <send_cmd+0x7c>
    n = 10;                                       /* Wait for a valid response in timeout of 10 attempts */
    do
    {
        res = xchg_spi(0xFF);
    }
    while ((res & 0x80) && --n);
    d510:	c1 50       	subi	r28, 0x01	; 1
    d512:	d1 f7       	brne	.-12     	; 0xd508 <send_cmd+0x6a>
    d514:	02 c0       	rjmp	.+4      	; 0xd51a <send_cmd+0x7c>
    d516:	85 e9       	ldi	r24, 0x95	; 149
    d518:	f5 cf       	rjmp	.-22     	; 0xd504 <send_cmd+0x66>
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    if (cmd == CMD8) n = 0x87;                    /* Valid CRC for CMD8(0x1AA) Stop */

    xchg_spi(n);
    d51a:	cd b7       	in	r28, 0x3d	; 61
    d51c:	de b7       	in	r29, 0x3e	; 62
        res = xchg_spi(0xFF);
    }
    while ((res & 0x80) && --n);

    return res;                                   /* Return with the response value */
}
    d51e:	e5 e0       	ldi	r30, 0x05	; 5
    d520:	0c 94 36 e7 	jmp	0x1ce6c	; 0x1ce6c <__epilogue_restores__+0x1a>

0000d524 <xmit_datablock>:
    d524:	0f 93       	push	r16
    d526:	1f 93       	push	r17
static
int xmit_datablock (
const BYTE *buff,                                 /*< 512 byte data block to be transmitted */
BYTE token                                        /*< Data/Stop token */
)
{
    d528:	cf 93       	push	r28
    d52a:	8c 01       	movw	r16, r24
    d52c:	c6 2f       	mov	r28, r22
    BYTE resp;

    if (!wait_ready(1000)) return 0;
    d52e:	88 ee       	ldi	r24, 0xE8	; 232
    d530:	93 e0       	ldi	r25, 0x03	; 3
    d532:	81 df       	rcall	.-254    	; 0xd436 <wait_ready>
    d534:	00 97       	sbiw	r24, 0x00	; 0
    d536:	c9 f0       	breq	.+50     	; 0xd56a <xmit_datablock+0x46>

    xchg_spi(token);                              /* Xmit data token */
    d538:	8c 2f       	mov	r24, r28
    d53a:	52 df       	rcall	.-348    	; 0xd3e0 <xchg_spi>
    if (token != 0xFD)                            /* Is data token */
    d53c:	cd 3f       	cpi	r28, 0xFD	; 253
    d53e:	99 f0       	breq	.+38     	; 0xd566 <xmit_datablock+0x42>
void xmit_spi_multi (
const BYTE *p,                                    /* Data block to be sent */
UINT cnt                                          /* Size of data block */
)
{
    mmc_spi_TX_buffer((uint8_t *)p, cnt);
    d540:	60 e0       	ldi	r22, 0x00	; 0
    d542:	72 e0       	ldi	r23, 0x02	; 2
    d544:	c8 01       	movw	r24, r16
    xchg_spi(token);                              /* Xmit data token */
    if (token != 0xFD)                            /* Is data token */
    {
        xmit_spi_multi(buff, 512);                /* Xmit the data block to the MMC */

        xchg_spi(0xFF);                           /* CRC (Dummy) */
    d546:	40 d4       	rcall	.+2176   	; 0xddc8 <mmc_spi_TX_buffer>
    d548:	8f ef       	ldi	r24, 0xFF	; 255
        xchg_spi(0xFF);
    d54a:	4a df       	rcall	.-364    	; 0xd3e0 <xchg_spi>
    d54c:	8f ef       	ldi	r24, 0xFF	; 255
    d54e:	48 df       	rcall	.-368    	; 0xd3e0 <xchg_spi>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d550:	8f ef       	ldi	r24, 0xFF	; 255
    d552:	40 d4       	rcall	.+2176   	; 0xddd4 <mmc_spi_TXRX>
    d554:	8f 71       	andi	r24, 0x1F	; 31
BYTE token                                        /*< Data/Stop token */
)
{
    BYTE resp;

    if (!wait_ready(1000)) return 0;
    d556:	31 e0       	ldi	r19, 0x01	; 1
    d558:	20 e0       	ldi	r18, 0x00	; 0
    d55a:	85 30       	cpi	r24, 0x05	; 5
    d55c:	09 f0       	breq	.+2      	; 0xd560 <xmit_datablock+0x3c>
    d55e:	30 e0       	ldi	r19, 0x00	; 0
    d560:	83 2f       	mov	r24, r19
    d562:	92 2f       	mov	r25, r18
    d564:	02 c0       	rjmp	.+4      	; 0xd56a <xmit_datablock+0x46>
    d566:	81 e0       	ldi	r24, 0x01	; 1
        resp = xchg_spi(0xFF);                    /* Reveive data response */
        if ((resp & 0x1F) != 0x05)                /* If not accepted, return with error */
            return 0;
    }

    return 1;
    d568:	90 e0       	ldi	r25, 0x00	; 0
    d56a:	cf 91       	pop	r28
}
    d56c:	1f 91       	pop	r17
    d56e:	0f 91       	pop	r16
    d570:	08 95       	ret

0000d572 <mmc_disk_initialize>:
    d572:	a4 e0       	ldi	r26, 0x04	; 4

///@brief Initialize Disk Drive
///@return Stat
MEMSPACE
DSTATUS mmc_disk_initialize (void)
{
    d574:	b0 e0       	ldi	r27, 0x00	; 0
    d576:	ef eb       	ldi	r30, 0xBF	; 191
    d578:	fa e6       	ldi	r31, 0x6A	; 106
    d57a:	0c 94 17 e7 	jmp	0x1ce2e	; 0x1ce2e <__prologue_saves__+0x14>
void power_off (void)
{
/* Disable SPI function */
/* De-configure MOSI/MISO/SCLK/CS pins (set hi-z) */
/* Turn socket power off (nothing to do if no power controls) */
    mmc_power_off();
    d57e:	59 d4       	rcall	.+2226   	; 0xde32 <mmc_power_off>
DSTATUS mmc_disk_initialize (void)
{
    BYTE n, cmd, ty, ocr[4];

    power_off();                                  /* Turn off the socket power to reset the card */
    delayms(100);                                 /* Wait for 100ms */
    d580:	64 e6       	ldi	r22, 0x64	; 100
    d582:	70 e0       	ldi	r23, 0x00	; 0
    d584:	80 e0       	ldi	r24, 0x00	; 0
    d586:	90 e0       	ldi	r25, 0x00	; 0
    d588:	0e 94 86 28 	call	0x510c	; 0x510c <delayms>

    if (Stat & STA_NODISK) return Stat;           /* No card in the socket? */
    d58c:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d590:	81 fd       	sbrc	r24, 1
void power_on (void)
{
/* Turn socket power on and wait for 10ms+ (nothing to do if no power controls) */
/* Configure MOSI/MISO/SCLK/CS pins */
/* Enable SPI module in SPI mode 0 */
    mmc_power_on();
    d592:	8e c0       	rjmp	.+284    	; 0xd6b0 <mmc_disk_initialize+0x13e>
    delayms(100);                                 /* Wait for 100ms */

    if (Stat & STA_NODISK) return Stat;           /* No card in the socket? */
    power_on();                                   /* Turn on the socket power */

    FCLK_SLOW();
    d594:	4d d4       	rcall	.+2202   	; 0xde30 <mmc_power_on>
    d596:	f9 d3       	rcall	.+2034   	; 0xdd8a <mmc_slow>

    for (n = 10; n; n--) xchg_spi(0xFF);          /* 80 dummy clocks */
    d598:	1a e0       	ldi	r17, 0x0A	; 10
    d59a:	8f ef       	ldi	r24, 0xFF	; 255
    d59c:	21 df       	rcall	.-446    	; 0xd3e0 <xchg_spi>
    d59e:	11 50       	subi	r17, 0x01	; 1
    d5a0:	e1 f7       	brne	.-8      	; 0xd59a <mmc_disk_initialize+0x28>

    ty = 0;
    if (send_cmd(CMD0, 0) == 1)                   /* Enter Idle state */
    d5a2:	40 e0       	ldi	r20, 0x00	; 0
    d5a4:	50 e0       	ldi	r21, 0x00	; 0
    d5a6:	ba 01       	movw	r22, r20
    d5a8:	80 e0       	ldi	r24, 0x00	; 0
    d5aa:	79 df       	rcall	.-270    	; 0xd49e <send_cmd>
    d5ac:	81 30       	cpi	r24, 0x01	; 1
    d5ae:	09 f0       	breq	.+2      	; 0xd5b2 <mmc_disk_initialize+0x40>
    {
        mmc_set_ms_timeout(2000);                 /* Initialization timeout of 1000 msec */
    d5b0:	6f c0       	rjmp	.+222    	; 0xd690 <mmc_disk_initialize+0x11e>
    d5b2:	80 ed       	ldi	r24, 0xD0	; 208
    d5b4:	97 e0       	ldi	r25, 0x07	; 7
        if (send_cmd(CMD8, 0x1AA) == 1)           /* SDv2? */
    d5b6:	11 d4       	rcall	.+2082   	; 0xddda <mmc_set_ms_timeout>
    d5b8:	4a ea       	ldi	r20, 0xAA	; 170
    d5ba:	51 e0       	ldi	r21, 0x01	; 1
    d5bc:	60 e0       	ldi	r22, 0x00	; 0
    d5be:	70 e0       	ldi	r23, 0x00	; 0
    d5c0:	88 e0       	ldi	r24, 0x08	; 8
    d5c2:	6d df       	rcall	.-294    	; 0xd49e <send_cmd>
    d5c4:	81 30       	cpi	r24, 0x01	; 1
    d5c6:	09 f0       	breq	.+2      	; 0xd5ca <mmc_disk_initialize+0x58>
    d5c8:	3d c0       	rjmp	.+122    	; 0xd644 <mmc_disk_initialize+0xd2>
    d5ca:	8e 01       	movw	r16, r28
    d5cc:	0f 5f       	subi	r16, 0xFF	; 255
    d5ce:	1f 4f       	sbci	r17, 0xFF	; 255
    d5d0:	6e 01       	movw	r12, r28
    d5d2:	85 e0       	ldi	r24, 0x05	; 5
    d5d4:	c8 0e       	add	r12, r24
    d5d6:	d1 1c       	adc	r13, r1
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d5d8:	78 01       	movw	r14, r16
    d5da:	8f ef       	ldi	r24, 0xFF	; 255
    d5dc:	fb d3       	rcall	.+2038   	; 0xddd4 <mmc_spi_TXRX>
    {
        mmc_set_ms_timeout(2000);                 /* Initialization timeout of 1000 msec */
        if (send_cmd(CMD8, 0x1AA) == 1)           /* SDv2? */
        {
            for (n = 0; n < 4; n++)
                ocr[n] = xchg_spi(0xFF);          /* Get trailing return value of R7 resp */
    d5de:	f7 01       	movw	r30, r14
    d5e0:	81 93       	st	Z+, r24
    d5e2:	7f 01       	movw	r14, r30
    if (send_cmd(CMD0, 0) == 1)                   /* Enter Idle state */
    {
        mmc_set_ms_timeout(2000);                 /* Initialization timeout of 1000 msec */
        if (send_cmd(CMD8, 0x1AA) == 1)           /* SDv2? */
        {
            for (n = 0; n < 4; n++)
    d5e4:	ce 16       	cp	r12, r30
    d5e6:	df 06       	cpc	r13, r31
    d5e8:	c1 f7       	brne	.-16     	; 0xd5da <mmc_disk_initialize+0x68>
                ocr[n] = xchg_spi(0xFF);          /* Get trailing return value of R7 resp */
            if (ocr[2] == 0x01 && ocr[3] == 0xAA) /* The card can work at vdd range of 2.7-3.6V */
    d5ea:	8b 81       	ldd	r24, Y+3	; 0x03
    d5ec:	81 30       	cpi	r24, 0x01	; 1
    d5ee:	09 f0       	breq	.+2      	; 0xd5f2 <mmc_disk_initialize+0x80>
    d5f0:	4f c0       	rjmp	.+158    	; 0xd690 <mmc_disk_initialize+0x11e>
    d5f2:	8c 81       	ldd	r24, Y+4	; 0x04
    d5f4:	8a 3a       	cpi	r24, 0xAA	; 170
    d5f6:	09 f0       	breq	.+2      	; 0xd5fa <mmc_disk_initialize+0x88>
            {
/* Wait for leaving idle state (ACMD41 with HCS bit) */
                while (!mmc_test_timeout() && send_cmd(ACMD41, 1UL << 30))
    d5f8:	4b c0       	rjmp	.+150    	; 0xd690 <mmc_disk_initialize+0x11e>
    d5fa:	f6 d3       	rcall	.+2028   	; 0xdde8 <mmc_test_timeout>
    d5fc:	89 2b       	or	r24, r25
    d5fe:	29 f0       	breq	.+10     	; 0xd60a <mmc_disk_initialize+0x98>
                    ;
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
    d600:	f3 d3       	rcall	.+2022   	; 0xdde8 <mmc_test_timeout>
    d602:	89 2b       	or	r24, r25
    d604:	09 f0       	breq	.+2      	; 0xd608 <mmc_disk_initialize+0x96>
    d606:	44 c0       	rjmp	.+136    	; 0xd690 <mmc_disk_initialize+0x11e>
    d608:	09 c0       	rjmp	.+18     	; 0xd61c <mmc_disk_initialize+0xaa>
            for (n = 0; n < 4; n++)
                ocr[n] = xchg_spi(0xFF);          /* Get trailing return value of R7 resp */
            if (ocr[2] == 0x01 && ocr[3] == 0xAA) /* The card can work at vdd range of 2.7-3.6V */
            {
/* Wait for leaving idle state (ACMD41 with HCS bit) */
                while (!mmc_test_timeout() && send_cmd(ACMD41, 1UL << 30))
    d60a:	40 e0       	ldi	r20, 0x00	; 0
    d60c:	50 e0       	ldi	r21, 0x00	; 0
    d60e:	60 e0       	ldi	r22, 0x00	; 0
    d610:	70 e4       	ldi	r23, 0x40	; 64
    d612:	89 ea       	ldi	r24, 0xA9	; 169
    d614:	44 df       	rcall	.-376    	; 0xd49e <send_cmd>
    d616:	81 11       	cpse	r24, r1
    d618:	f0 cf       	rjmp	.-32     	; 0xd5fa <mmc_disk_initialize+0x88>
                    ;
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
    d61a:	f2 cf       	rjmp	.-28     	; 0xd600 <mmc_disk_initialize+0x8e>
    d61c:	40 e0       	ldi	r20, 0x00	; 0
    d61e:	50 e0       	ldi	r21, 0x00	; 0
    d620:	ba 01       	movw	r22, r20
    d622:	8a e3       	ldi	r24, 0x3A	; 58
    d624:	3c df       	rcall	.-392    	; 0xd49e <send_cmd>
    d626:	81 11       	cpse	r24, r1
    d628:	33 c0       	rjmp	.+102    	; 0xd690 <mmc_disk_initialize+0x11e>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d62a:	8f ef       	ldi	r24, 0xFF	; 255
    d62c:	d3 d3       	rcall	.+1958   	; 0xddd4 <mmc_spi_TXRX>
    d62e:	f8 01       	movw	r30, r16
                while (!mmc_test_timeout() && send_cmd(ACMD41, 1UL << 30))
                    ;
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
                {
                    for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
    d630:	81 93       	st	Z+, r24
    d632:	8f 01       	movw	r16, r30
    d634:	ce 16       	cp	r12, r30
    d636:	df 06       	cpc	r13, r31
    d638:	c1 f7       	brne	.-16     	; 0xd62a <mmc_disk_initialize+0xb8>
/* Check if the card is SDv2 */
                    ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
    d63a:	89 81       	ldd	r24, Y+1	; 0x01
    d63c:	86 fd       	sbrc	r24, 6
    d63e:	2a c0       	rjmp	.+84     	; 0xd694 <mmc_disk_initialize+0x122>
    d640:	14 e0       	ldi	r17, 0x04	; 4
    d642:	29 c0       	rjmp	.+82     	; 0xd696 <mmc_disk_initialize+0x124>
                }
            }
        }
        else
        {                                         /* SDv1 or MMCv3 */
            mmc_set_ms_timeout(2000);             /* Initialization timeout of 2000 msec */
    d644:	80 ed       	ldi	r24, 0xD0	; 208
    d646:	97 e0       	ldi	r25, 0x07	; 7
    d648:	c8 d3       	rcall	.+1936   	; 0xddda <mmc_set_ms_timeout>
            if (send_cmd(ACMD41, 0) <= 1)
    d64a:	40 e0       	ldi	r20, 0x00	; 0
    d64c:	50 e0       	ldi	r21, 0x00	; 0
    d64e:	ba 01       	movw	r22, r20
    d650:	89 ea       	ldi	r24, 0xA9	; 169
    d652:	25 df       	rcall	.-438    	; 0xd49e <send_cmd>
    d654:	82 30       	cpi	r24, 0x02	; 2
    d656:	18 f0       	brcs	.+6      	; 0xd65e <mmc_disk_initialize+0xec>
            {
                ty = CT_SD1; cmd = ACMD41;        /* SDv1 */
            }
            else
            {
                ty = CT_MMC; cmd = CMD1;          /* MMCv3 */
    d658:	11 e0       	ldi	r17, 0x01	; 1
    d65a:	01 e0       	ldi	r16, 0x01	; 1
        else
        {                                         /* SDv1 or MMCv3 */
            mmc_set_ms_timeout(2000);             /* Initialization timeout of 2000 msec */
            if (send_cmd(ACMD41, 0) <= 1)
            {
                ty = CT_SD1; cmd = ACMD41;        /* SDv1 */
    d65c:	02 c0       	rjmp	.+4      	; 0xd662 <mmc_disk_initialize+0xf0>
    d65e:	12 e0       	ldi	r17, 0x02	; 2
            else
            {
                ty = CT_MMC; cmd = CMD1;          /* MMCv3 */
            }
/* Wait for leaving idle state */
            while (!mmc_test_timeout() && send_cmd(cmd, 0))
    d660:	09 ea       	ldi	r16, 0xA9	; 169
    d662:	c2 d3       	rcall	.+1924   	; 0xdde8 <mmc_test_timeout>
    d664:	89 2b       	or	r24, r25
    d666:	21 f0       	breq	.+8      	; 0xd670 <mmc_disk_initialize+0xfe>
                ;
/* Set R/W block length to 512 */
            if (mmc_test_timeout() || send_cmd(CMD16, 512) != 0)
    d668:	bf d3       	rcall	.+1918   	; 0xdde8 <mmc_test_timeout>
    d66a:	89 2b       	or	r24, r25
    d66c:	89 f4       	brne	.+34     	; 0xd690 <mmc_disk_initialize+0x11e>
    d66e:	08 c0       	rjmp	.+16     	; 0xd680 <mmc_disk_initialize+0x10e>
            else
            {
                ty = CT_MMC; cmd = CMD1;          /* MMCv3 */
            }
/* Wait for leaving idle state */
            while (!mmc_test_timeout() && send_cmd(cmd, 0))
    d670:	40 e0       	ldi	r20, 0x00	; 0
    d672:	50 e0       	ldi	r21, 0x00	; 0
    d674:	ba 01       	movw	r22, r20
    d676:	80 2f       	mov	r24, r16
    d678:	12 df       	rcall	.-476    	; 0xd49e <send_cmd>
    d67a:	81 11       	cpse	r24, r1
    d67c:	f2 cf       	rjmp	.-28     	; 0xd662 <mmc_disk_initialize+0xf0>
    d67e:	f4 cf       	rjmp	.-24     	; 0xd668 <mmc_disk_initialize+0xf6>
                ;
/* Set R/W block length to 512 */
            if (mmc_test_timeout() || send_cmd(CMD16, 512) != 0)
    d680:	40 e0       	ldi	r20, 0x00	; 0
    d682:	52 e0       	ldi	r21, 0x02	; 2
    d684:	60 e0       	ldi	r22, 0x00	; 0
    d686:	70 e0       	ldi	r23, 0x00	; 0
    d688:	80 e1       	ldi	r24, 0x10	; 16
    d68a:	09 df       	rcall	.-494    	; 0xd49e <send_cmd>
    d68c:	88 23       	and	r24, r24
                ty = 0;
    d68e:	19 f0       	breq	.+6      	; 0xd696 <mmc_disk_initialize+0x124>
    d690:	10 e0       	ldi	r17, 0x00	; 0
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
                {
                    for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
/* Check if the card is SDv2 */
                    ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
    d692:	01 c0       	rjmp	.+2      	; 0xd696 <mmc_disk_initialize+0x124>
            if (mmc_test_timeout() || send_cmd(CMD16, 512) != 0)
                ty = 0;
        }
    }

    CardType = ty;
    d694:	1c e0       	ldi	r17, 0x0C	; 12
    d696:	10 93 23 18 	sts	0x1823, r17	; 0x801823 <CardType>
    deselect();
    d69a:	a4 de       	rcall	.-696    	; 0xd3e4 <deselect>

    if (ty)                                       /* Initialization succeded */
    d69c:	11 23       	and	r17, r17
    d69e:	39 f0       	breq	.+14     	; 0xd6ae <mmc_disk_initialize+0x13c>
    {
        Stat &= ~STA_NOINIT;                      /* Clear STA_NOINIT */
    d6a0:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d6a4:	8e 7f       	andi	r24, 0xFE	; 254
    d6a6:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Stat>
        FCLK_FAST();
    d6aa:	81 d3       	rcall	.+1794   	; 0xddae <mmc_fast>
    d6ac:	01 c0       	rjmp	.+2      	; 0xd6b0 <mmc_disk_initialize+0x13e>
    d6ae:	c1 d3       	rcall	.+1922   	; 0xde32 <mmc_power_off>
void power_off (void)
{
/* Disable SPI function */
/* De-configure MOSI/MISO/SCLK/CS pins (set hi-z) */
/* Turn socket power off (nothing to do if no power controls) */
    mmc_power_off();
    d6b0:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    else
    {
        power_off();
    }

    return Stat;
    d6b4:	24 96       	adiw	r28, 0x04	; 4
    d6b6:	e8 e0       	ldi	r30, 0x08	; 8
}
    d6b8:	0c 94 33 e7 	jmp	0x1ce66	; 0x1ce66 <__epilogue_restores__+0x14>

0000d6bc <mmc_disk_status>:
    d6bc:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
/// @return STA_NOINIT if no drive
MEMSPACE
DSTATUS mmc_disk_status ( void )
{
    return Stat;
}
    d6c0:	08 95       	ret

0000d6c2 <mmc_disk_read>:
DRESULT mmc_disk_read (
BYTE *buff,                                       /*< Pointer to the data buffer to store read data */
DWORD sector,                                     /*< Start sector number (LBA) */
UINT count                                        /*< Sector count (1..128) */
)
{
    d6c2:	8f 92       	push	r8
    d6c4:	9f 92       	push	r9
    d6c6:	af 92       	push	r10
    d6c8:	bf 92       	push	r11
    d6ca:	ef 92       	push	r14
    d6cc:	ff 92       	push	r15
    d6ce:	1f 93       	push	r17
    d6d0:	cf 93       	push	r28
    d6d2:	df 93       	push	r29
    d6d4:	7c 01       	movw	r14, r24
    d6d6:	4a 01       	movw	r8, r20
    d6d8:	5b 01       	movw	r10, r22
    d6da:	e9 01       	movw	r28, r18
    BYTE cmd;

    if (!count)
    d6dc:	20 97       	sbiw	r28, 0x00	; 0
    d6de:	19 f4       	brne	.+6      	; 0xd6e6 <mmc_disk_read+0x24>
    {
        deselect();
    d6e0:	81 de       	rcall	.-766    	; 0xd3e4 <deselect>
        return RES_PARERR;
    d6e2:	84 e0       	ldi	r24, 0x04	; 4
    d6e4:	0d c0       	rjmp	.+26     	; 0xd700 <mmc_disk_read+0x3e>
    }

	if( Stat )
    d6e6:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d6ea:	88 23       	and	r24, r24
    d6ec:	19 f0       	breq	.+6      	; 0xd6f4 <mmc_disk_read+0x32>
		set_error(1);
    d6ee:	81 e0       	ldi	r24, 0x01	; 1
    d6f0:	0e 94 26 27 	call	0x4e4c	; 0x4e4c <set_error>

    if (Stat & STA_NOINIT)
    d6f4:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d6f8:	80 ff       	sbrs	r24, 0
    {
        deselect();
    d6fa:	04 c0       	rjmp	.+8      	; 0xd704 <mmc_disk_read+0x42>
    d6fc:	73 de       	rcall	.-794    	; 0xd3e4 <deselect>
        return RES_NOTRDY;
    d6fe:	83 e0       	ldi	r24, 0x03	; 3
    d700:	90 e0       	ldi	r25, 0x00	; 0
    d702:	36 c0       	rjmp	.+108    	; 0xd770 <mmc_disk_read+0xae>
    }
    if (Stat & STA_NODISK)
    d704:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d708:	81 fd       	sbrc	r24, 1
    d70a:	f8 cf       	rjmp	.-16     	; 0xd6fc <mmc_disk_read+0x3a>
    {
        deselect();
        return RES_NOTRDY;
	}
    GPIO_PIN_HI(LED1);
    d70c:	46 9a       	sbi	0x08, 6	; 8
    d70e:	3e 9a       	sbi	0x07, 6	; 7

    if (!(CardType & CT_BLOCK)) sector *= 512;    /* Convert to byte address if needed */
    d710:	80 91 23 18 	lds	r24, 0x1823	; 0x801823 <CardType>
    d714:	83 fd       	sbrc	r24, 3
    d716:	07 c0       	rjmp	.+14     	; 0xd726 <mmc_disk_read+0x64>
    d718:	89 e0       	ldi	r24, 0x09	; 9
    d71a:	88 0c       	add	r8, r8
    d71c:	99 1c       	adc	r9, r9
    d71e:	aa 1c       	adc	r10, r10
    d720:	bb 1c       	adc	r11, r11
    d722:	8a 95       	dec	r24
    d724:	d1 f7       	brne	.-12     	; 0xd71a <mmc_disk_read+0x58>

    cmd = count > 1 ? CMD18 : CMD17;              /*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    d726:	c2 30       	cpi	r28, 0x02	; 2
    d728:	d1 05       	cpc	r29, r1
    d72a:	10 f4       	brcc	.+4      	; 0xd730 <mmc_disk_read+0x6e>
    d72c:	11 e1       	ldi	r17, 0x11	; 17
    d72e:	01 c0       	rjmp	.+2      	; 0xd732 <mmc_disk_read+0x70>
    d730:	12 e1       	ldi	r17, 0x12	; 18
    if (send_cmd(cmd, sector) == 0)
    d732:	b5 01       	movw	r22, r10
    d734:	a4 01       	movw	r20, r8
    d736:	81 2f       	mov	r24, r17
    d738:	b2 de       	rcall	.-668    	; 0xd49e <send_cmd>
    d73a:	81 11       	cpse	r24, r1
    d73c:	11 c0       	rjmp	.+34     	; 0xd760 <mmc_disk_read+0x9e>
    {
        do
        {
            if (!rcvr_datablock(buff, 512))
    d73e:	60 e0       	ldi	r22, 0x00	; 0
    d740:	72 e0       	ldi	r23, 0x02	; 2
    d742:	c7 01       	movw	r24, r14
    d744:	55 de       	rcall	.-854    	; 0xd3f0 <rcvr_datablock>
    d746:	89 2b       	or	r24, r25
    d748:	21 f0       	breq	.+8      	; 0xd752 <mmc_disk_read+0x90>
                break;
            buff += 512;
    d74a:	8e ef       	ldi	r24, 0xFE	; 254
    d74c:	f8 1a       	sub	r15, r24
        } while (--count);
    d74e:	21 97       	sbiw	r28, 0x01	; 1
    d750:	b1 f7       	brne	.-20     	; 0xd73e <mmc_disk_read+0x7c>
        if (cmd == CMD18) send_cmd(CMD12, 0);     /* STOP_TRANSMISSION */
    d752:	12 31       	cpi	r17, 0x12	; 18
    d754:	29 f4       	brne	.+10     	; 0xd760 <mmc_disk_read+0x9e>
    d756:	40 e0       	ldi	r20, 0x00	; 0
    d758:	50 e0       	ldi	r21, 0x00	; 0
    d75a:	ba 01       	movw	r22, r20
    d75c:	8c e0       	ldi	r24, 0x0C	; 12
    }
    deselect();
    d75e:	9f de       	rcall	.-706    	; 0xd49e <send_cmd>
    d760:	41 de       	rcall	.-894    	; 0xd3e4 <deselect>
    GPIO_PIN_LOW(LED1);
    d762:	46 98       	cbi	0x08, 6	; 8
    d764:	3e 9a       	sbi	0x07, 6	; 7

    return count ? RES_ERROR : RES_OK;
    d766:	81 e0       	ldi	r24, 0x01	; 1
    d768:	90 e0       	ldi	r25, 0x00	; 0
    d76a:	cd 2b       	or	r28, r29
    d76c:	09 f4       	brne	.+2      	; 0xd770 <mmc_disk_read+0xae>
    d76e:	80 e0       	ldi	r24, 0x00	; 0
}
    d770:	df 91       	pop	r29
    d772:	cf 91       	pop	r28
    d774:	1f 91       	pop	r17
    d776:	ff 90       	pop	r15
    d778:	ef 90       	pop	r14
    d77a:	bf 90       	pop	r11
    d77c:	af 90       	pop	r10
    d77e:	9f 90       	pop	r9
    d780:	8f 90       	pop	r8
    d782:	08 95       	ret

0000d784 <mmc_disk_write>:
DRESULT mmc_disk_write (
const BYTE *buff,                                 /*< Pointer to the data to be written */
DWORD sector,                                     /*< Start sector number (LBA) */
UINT count                                        /* Sector count (1..128) */
)
{
    d784:	a0 e0       	ldi	r26, 0x00	; 0
    d786:	b0 e0       	ldi	r27, 0x00	; 0
    d788:	e8 ec       	ldi	r30, 0xC8	; 200
    d78a:	fb e6       	ldi	r31, 0x6B	; 107
    d78c:	0c 94 17 e7 	jmp	0x1ce2e	; 0x1ce2e <__prologue_saves__+0x14>
    d790:	8c 01       	movw	r16, r24
    d792:	6a 01       	movw	r12, r20
    d794:	7b 01       	movw	r14, r22
    d796:	e9 01       	movw	r28, r18
    if (!count)
    d798:	20 97       	sbiw	r28, 0x00	; 0
    d79a:	19 f4       	brne	.+6      	; 0xd7a2 <mmc_disk_write+0x1e>
    {
        deselect();
    d79c:	23 de       	rcall	.-954    	; 0xd3e4 <deselect>
        return RES_PARERR;
    d79e:	84 e0       	ldi	r24, 0x04	; 4
    d7a0:	18 c0       	rjmp	.+48     	; 0xd7d2 <mmc_disk_write+0x4e>
    }

	if( Stat )
    d7a2:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d7a6:	88 23       	and	r24, r24
    d7a8:	19 f0       	breq	.+6      	; 0xd7b0 <mmc_disk_write+0x2c>
		set_error(1);
    d7aa:	81 e0       	ldi	r24, 0x01	; 1
    d7ac:	0e 94 26 27 	call	0x4e4c	; 0x4e4c <set_error>

    if (Stat & STA_NOINIT)
    d7b0:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d7b4:	80 ff       	sbrs	r24, 0
    {
        deselect();
    d7b6:	03 c0       	rjmp	.+6      	; 0xd7be <mmc_disk_write+0x3a>
    d7b8:	15 de       	rcall	.-982    	; 0xd3e4 <deselect>
        return RES_NOTRDY;
    d7ba:	83 e0       	ldi	r24, 0x03	; 3
    d7bc:	0a c0       	rjmp	.+20     	; 0xd7d2 <mmc_disk_write+0x4e>
    }
    if (Stat & STA_NODISK)
    d7be:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d7c2:	81 fd       	sbrc	r24, 1
    d7c4:	f9 cf       	rjmp	.-14     	; 0xd7b8 <mmc_disk_write+0x34>
    {
        deselect();
        return RES_NOTRDY;
	}
    if (Stat & STA_PROTECT)
    d7c6:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d7ca:	82 ff       	sbrs	r24, 2
    {
        deselect();
    d7cc:	04 c0       	rjmp	.+8      	; 0xd7d6 <mmc_disk_write+0x52>
    d7ce:	0a de       	rcall	.-1004   	; 0xd3e4 <deselect>
        return RES_WRPRT;
    d7d0:	82 e0       	ldi	r24, 0x02	; 2
    d7d2:	90 e0       	ldi	r25, 0x00	; 0
    d7d4:	46 c0       	rjmp	.+140    	; 0xd862 <mmc_disk_write+0xde>
    }

    GPIO_PIN_HI(LED1);
    d7d6:	46 9a       	sbi	0x08, 6	; 8
    d7d8:	3e 9a       	sbi	0x07, 6	; 7

    if (!(CardType & CT_BLOCK)) sector *= 512;    /* Convert to byte address if needed */
    d7da:	80 91 23 18 	lds	r24, 0x1823	; 0x801823 <CardType>
    d7de:	83 fd       	sbrc	r24, 3
    d7e0:	07 c0       	rjmp	.+14     	; 0xd7f0 <mmc_disk_write+0x6c>
    d7e2:	99 e0       	ldi	r25, 0x09	; 9
    d7e4:	cc 0c       	add	r12, r12
    d7e6:	dd 1c       	adc	r13, r13
    d7e8:	ee 1c       	adc	r14, r14
    d7ea:	ff 1c       	adc	r15, r15
    d7ec:	9a 95       	dec	r25
    d7ee:	d1 f7       	brne	.-12     	; 0xd7e4 <mmc_disk_write+0x60>

    if (count == 1)                               /* Single block write */
    d7f0:	c1 30       	cpi	r28, 0x01	; 1
    d7f2:	d1 05       	cpc	r29, r1
    d7f4:	89 f4       	brne	.+34     	; 0xd818 <mmc_disk_write+0x94>
    {
        if ((send_cmd(CMD24, sector) == 0)        /* WRITE_BLOCK */
    d7f6:	b7 01       	movw	r22, r14
    d7f8:	a6 01       	movw	r20, r12
    d7fa:	88 e1       	ldi	r24, 0x18	; 24
    d7fc:	50 de       	rcall	.-864    	; 0xd49e <send_cmd>
    d7fe:	81 11       	cpse	r24, r1
            && xmit_datablock(buff, 0xFE))
    d800:	26 c0       	rjmp	.+76     	; 0xd84e <mmc_disk_write+0xca>
    d802:	6e ef       	ldi	r22, 0xFE	; 254
    d804:	c8 01       	movw	r24, r16
    d806:	8e de       	rcall	.-740    	; 0xd524 <xmit_datablock>
    d808:	31 e0       	ldi	r19, 0x01	; 1
    d80a:	20 e0       	ldi	r18, 0x00	; 0
    d80c:	89 2b       	or	r24, r25
    d80e:	09 f0       	breq	.+2      	; 0xd812 <mmc_disk_write+0x8e>
    d810:	30 e0       	ldi	r19, 0x00	; 0
    d812:	c3 2f       	mov	r28, r19
    d814:	d2 2f       	mov	r29, r18
    d816:	1d c0       	rjmp	.+58     	; 0xd852 <mmc_disk_write+0xce>
            count = 0;
    }
    else                                          /* Multiple block write */
    {
        if (CardType & CT_SDC) send_cmd(ACMD23, count);
    d818:	86 70       	andi	r24, 0x06	; 6
    d81a:	29 f0       	breq	.+10     	; 0xd826 <mmc_disk_write+0xa2>
    d81c:	ae 01       	movw	r20, r28
    d81e:	60 e0       	ldi	r22, 0x00	; 0
    d820:	70 e0       	ldi	r23, 0x00	; 0
    d822:	87 e9       	ldi	r24, 0x97	; 151
        if (send_cmd(CMD25, sector) == 0)         /* WRITE_MULTIPLE_BLOCK */
    d824:	3c de       	rcall	.-904    	; 0xd49e <send_cmd>
    d826:	b7 01       	movw	r22, r14
    d828:	a6 01       	movw	r20, r12
    d82a:	89 e1       	ldi	r24, 0x19	; 25
    d82c:	38 de       	rcall	.-912    	; 0xd49e <send_cmd>
    d82e:	81 11       	cpse	r24, r1
        {
            do
            {
                if (!xmit_datablock(buff, 0xFC)) break;
    d830:	10 c0       	rjmp	.+32     	; 0xd852 <mmc_disk_write+0xce>
    d832:	6c ef       	ldi	r22, 0xFC	; 252
    d834:	c8 01       	movw	r24, r16
    d836:	76 de       	rcall	.-788    	; 0xd524 <xmit_datablock>
    d838:	89 2b       	or	r24, r25
                buff += 512;
    d83a:	19 f0       	breq	.+6      	; 0xd842 <mmc_disk_write+0xbe>
            } while (--count);
    d83c:	1e 5f       	subi	r17, 0xFE	; 254
    d83e:	21 97       	sbiw	r28, 0x01	; 1
            if (!xmit_datablock(0, 0xFD))         /* STOP_TRAN token */
    d840:	c1 f7       	brne	.-16     	; 0xd832 <mmc_disk_write+0xae>
    d842:	6d ef       	ldi	r22, 0xFD	; 253
    d844:	80 e0       	ldi	r24, 0x00	; 0
    d846:	90 e0       	ldi	r25, 0x00	; 0
    d848:	6d de       	rcall	.-806    	; 0xd524 <xmit_datablock>
    d84a:	89 2b       	or	r24, r25
                count = 1;
    d84c:	11 f4       	brne	.+4      	; 0xd852 <mmc_disk_write+0xce>
    d84e:	c1 e0       	ldi	r28, 0x01	; 1
        }
    }
    deselect();
    d850:	d0 e0       	ldi	r29, 0x00	; 0
    d852:	c8 dd       	rcall	.-1136   	; 0xd3e4 <deselect>
    GPIO_PIN_LOW(LED1);
    d854:	46 98       	cbi	0x08, 6	; 8
    d856:	3e 9a       	sbi	0x07, 6	; 7

    return count ? RES_ERROR : RES_OK;
    d858:	81 e0       	ldi	r24, 0x01	; 1
    d85a:	90 e0       	ldi	r25, 0x00	; 0
    d85c:	cd 2b       	or	r28, r29
    d85e:	09 f4       	brne	.+2      	; 0xd862 <mmc_disk_write+0xde>
    d860:	80 e0       	ldi	r24, 0x00	; 0
}
    d862:	cd b7       	in	r28, 0x3d	; 61
    d864:	de b7       	in	r29, 0x3e	; 62
    d866:	e8 e0       	ldi	r30, 0x08	; 8
    d868:	0c 94 33 e7 	jmp	0x1ce66	; 0x1ce66 <__epilogue_restores__+0x14>

0000d86c <mmc_disk_ioctl>:
MEMSPACE
DRESULT mmc_disk_ioctl (
BYTE cmd,                                         /* Control code */
void *buff                                        /* Buffer to send/receive control data */
)
{
    d86c:	a0 e1       	ldi	r26, 0x10	; 16
    d86e:	b0 e0       	ldi	r27, 0x00	; 0
    d870:	ec e3       	ldi	r30, 0x3C	; 60
    d872:	fc e6       	ldi	r31, 0x6C	; 108
    d874:	0c 94 17 e7 	jmp	0x1ce2e	; 0x1ce2e <__prologue_saves__+0x14>
    SDIO_CTRL *sdi;
    BYTE rc, *bp;
    UINT dc;
#endif

    if (Stat & STA_NOINIT)
    d878:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <Stat>
    d87c:	90 fd       	sbrc	r25, 0
    d87e:	31 c2       	rjmp	.+1122   	; 0xdce2 <mmc_disk_ioctl+0x476>
    d880:	8b 01       	movw	r16, r22
        return RES_NOTRDY;

    if (Stat & STA_NODISK)
    d882:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <Stat>
    d886:	91 ff       	sbrs	r25, 1
    d888:	02 c0       	rjmp	.+4      	; 0xd88e <mmc_disk_ioctl+0x22>
    {
        deselect();
    d88a:	ac dd       	rcall	.-1192   	; 0xd3e4 <deselect>
    d88c:	2a c2       	rjmp	.+1108   	; 0xdce2 <mmc_disk_ioctl+0x476>
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    switch (cmd)
    d88e:	83 33       	cpi	r24, 0x33	; 51
    d890:	09 f4       	brne	.+2      	; 0xd894 <mmc_disk_ioctl+0x28>
    d892:	01 c1       	rjmp	.+514    	; 0xda96 <mmc_disk_ioctl+0x22a>
    d894:	a0 f4       	brcc	.+40     	; 0xd8be <mmc_disk_ioctl+0x52>
    d896:	83 30       	cpi	r24, 0x03	; 3
    d898:	09 f4       	brne	.+2      	; 0xd89c <mmc_disk_ioctl+0x30>
    d89a:	85 c0       	rjmp	.+266    	; 0xd9a6 <mmc_disk_ioctl+0x13a>
    d89c:	28 f4       	brcc	.+10     	; 0xd8a8 <mmc_disk_ioctl+0x3c>
    d89e:	88 23       	and	r24, r24
    d8a0:	11 f1       	breq	.+68     	; 0xd8e6 <mmc_disk_ioctl+0x7a>
    d8a2:	81 30       	cpi	r24, 0x01	; 1
    d8a4:	11 f1       	breq	.+68     	; 0xd8ea <mmc_disk_ioctl+0x7e>
    d8a6:	1f c2       	rjmp	.+1086   	; 0xdce6 <mmc_disk_ioctl+0x47a>
    d8a8:	87 30       	cpi	r24, 0x07	; 7
    d8aa:	09 f4       	brne	.+2      	; 0xd8ae <mmc_disk_ioctl+0x42>
    d8ac:	2a c1       	rjmp	.+596    	; 0xdb02 <mmc_disk_ioctl+0x296>
    d8ae:	82 33       	cpi	r24, 0x32	; 50
    d8b0:	09 f0       	breq	.+2      	; 0xd8b4 <mmc_disk_ioctl+0x48>
    d8b2:	19 c2       	rjmp	.+1074   	; 0xdce6 <mmc_disk_ioctl+0x47a>
#endif

/* Following commands are never used by FatFs module */

        case MMC_GET_TYPE :                       /* Get card type flags (1 byte) */
            *ptr = CardType;
    d8b4:	80 91 23 18 	lds	r24, 0x1823	; 0x801823 <CardType>
    d8b8:	fb 01       	movw	r30, r22
    d8ba:	80 83       	st	Z, r24
    d8bc:	28 c1       	rjmp	.+592    	; 0xdb0e <mmc_disk_ioctl+0x2a2>
        deselect();
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    switch (cmd)
    d8be:	86 33       	cpi	r24, 0x36	; 54
    d8c0:	09 f4       	brne	.+2      	; 0xd8c4 <mmc_disk_ioctl+0x58>
    d8c2:	0c c1       	rjmp	.+536    	; 0xdadc <mmc_disk_ioctl+0x270>
    d8c4:	38 f4       	brcc	.+14     	; 0xd8d4 <mmc_disk_ioctl+0x68>
    d8c6:	84 33       	cpi	r24, 0x34	; 52
    d8c8:	09 f4       	brne	.+2      	; 0xd8cc <mmc_disk_ioctl+0x60>
    d8ca:	ea c0       	rjmp	.+468    	; 0xdaa0 <mmc_disk_ioctl+0x234>
    d8cc:	85 33       	cpi	r24, 0x35	; 53
    d8ce:	09 f4       	brne	.+2      	; 0xd8d2 <mmc_disk_ioctl+0x66>
    d8d0:	f1 c0       	rjmp	.+482    	; 0xdab4 <mmc_disk_ioctl+0x248>
    d8d2:	09 c2       	rjmp	.+1042   	; 0xdce6 <mmc_disk_ioctl+0x47a>
    d8d4:	88 33       	cpi	r24, 0x38	; 56
    d8d6:	09 f4       	brne	.+2      	; 0xd8da <mmc_disk_ioctl+0x6e>
    d8d8:	74 c1       	rjmp	.+744    	; 0xdbc2 <mmc_disk_ioctl+0x356>
    d8da:	08 f4       	brcc	.+2      	; 0xd8de <mmc_disk_ioctl+0x72>
    d8dc:	1a c1       	rjmp	.+564    	; 0xdb12 <mmc_disk_ioctl+0x2a6>
    d8de:	89 33       	cpi	r24, 0x39	; 57
    d8e0:	09 f4       	brne	.+2      	; 0xd8e4 <mmc_disk_ioctl+0x78>
    d8e2:	bc c1       	rjmp	.+888    	; 0xdc5c <mmc_disk_ioctl+0x3f0>
    {
        case CTRL_SYNC :                          /* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
            if (select()) res = RES_OK;
    d8e4:	00 c2       	rjmp	.+1024   	; 0xdce6 <mmc_disk_ioctl+0x47a>
    d8e6:	b9 dd       	rcall	.-1166   	; 0xd45a <select>
    d8e8:	06 c1       	rjmp	.+524    	; 0xdaf6 <mmc_disk_ioctl+0x28a>
            deselect();
            break;

        case GET_SECTOR_COUNT :                   /* Get number of sectors on the disk (DWORD) */
            if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16))
    d8ea:	40 e0       	ldi	r20, 0x00	; 0
    d8ec:	50 e0       	ldi	r21, 0x00	; 0
    d8ee:	ba 01       	movw	r22, r20
    d8f0:	89 e0       	ldi	r24, 0x09	; 9
    d8f2:	d5 dd       	rcall	.-1110   	; 0xd49e <send_cmd>
    d8f4:	81 11       	cpse	r24, r1
    d8f6:	f1 c1       	rjmp	.+994    	; 0xdcda <mmc_disk_ioctl+0x46e>
    d8f8:	60 e1       	ldi	r22, 0x10	; 16
    d8fa:	70 e0       	ldi	r23, 0x00	; 0
    d8fc:	ce 01       	movw	r24, r28
    d8fe:	01 96       	adiw	r24, 0x01	; 1
    d900:	77 dd       	rcall	.-1298   	; 0xd3f0 <rcvr_datablock>
    d902:	89 2b       	or	r24, r25
    d904:	09 f4       	brne	.+2      	; 0xd908 <mmc_disk_ioctl+0x9c>
    d906:	e9 c1       	rjmp	.+978    	; 0xdcda <mmc_disk_ioctl+0x46e>
            {
                if ((csd[0] >> 6) == 1)           /* SDC ver 2.00 */
    d908:	99 81       	ldd	r25, Y+1	; 0x01
    d90a:	92 95       	swap	r25
    d90c:	96 95       	lsr	r25
    d90e:	96 95       	lsr	r25
    d910:	93 70       	andi	r25, 0x03	; 3
    d912:	29 85       	ldd	r18, Y+9	; 0x09
    d914:	4a 85       	ldd	r20, Y+10	; 0x0a
    d916:	88 85       	ldd	r24, Y+8	; 0x08
    d918:	91 30       	cpi	r25, 0x01	; 1
    d91a:	d9 f4       	brne	.+54     	; 0xd952 <mmc_disk_ioctl+0xe6>
                {
                    csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
                    *(DWORD*)buff = csize << 10;
    d91c:	30 e0       	ldi	r19, 0x00	; 0
    d91e:	32 2f       	mov	r19, r18
    d920:	22 27       	eor	r18, r18
    d922:	24 0f       	add	r18, r20
    d924:	31 1d       	adc	r19, r1
    d926:	8f 73       	andi	r24, 0x3F	; 63
    d928:	90 e0       	ldi	r25, 0x00	; 0
    d92a:	a0 e0       	ldi	r26, 0x00	; 0
    d92c:	b0 e0       	ldi	r27, 0x00	; 0
    d92e:	dc 01       	movw	r26, r24
    d930:	99 27       	eor	r25, r25
    d932:	88 27       	eor	r24, r24
    d934:	01 96       	adiw	r24, 0x01	; 1
    d936:	a1 1d       	adc	r26, r1
    d938:	b1 1d       	adc	r27, r1
    d93a:	82 0f       	add	r24, r18
    d93c:	93 1f       	adc	r25, r19
    d93e:	a1 1d       	adc	r26, r1
    d940:	b1 1d       	adc	r27, r1
    d942:	fa e0       	ldi	r31, 0x0A	; 10
    d944:	88 0f       	add	r24, r24
    d946:	99 1f       	adc	r25, r25
    d948:	aa 1f       	adc	r26, r26
    d94a:	bb 1f       	adc	r27, r27
    d94c:	fa 95       	dec	r31
    d94e:	d1 f7       	brne	.-12     	; 0xd944 <mmc_disk_ioctl+0xd8>
    d950:	9b c0       	rjmp	.+310    	; 0xda88 <mmc_disk_ioctl+0x21c>
                }                                 /* SDC ver 1.XX or MMC*/
                else
                {
                    n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
                    csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
                    *(DWORD*)buff = csize << (n - 9);
    d952:	22 95       	swap	r18
    d954:	26 95       	lsr	r18
    d956:	26 95       	lsr	r18
    d958:	23 70       	andi	r18, 0x03	; 3
    d95a:	f4 e0       	ldi	r31, 0x04	; 4
    d95c:	8f 9f       	mul	r24, r31
    d95e:	c0 01       	movw	r24, r0
    d960:	11 24       	eor	r1, r1
    d962:	82 0f       	add	r24, r18
    d964:	91 1d       	adc	r25, r1
    d966:	01 96       	adiw	r24, 0x01	; 1
    d968:	2f 81       	ldd	r18, Y+7	; 0x07
    d96a:	23 70       	andi	r18, 0x03	; 3
    d96c:	30 e0       	ldi	r19, 0x00	; 0
    d96e:	32 2f       	mov	r19, r18
    d970:	22 27       	eor	r18, r18
    d972:	33 0f       	add	r19, r19
    d974:	33 0f       	add	r19, r19
    d976:	82 0f       	add	r24, r18
    d978:	93 1f       	adc	r25, r19
    d97a:	a0 e0       	ldi	r26, 0x00	; 0
    d97c:	b0 e0       	ldi	r27, 0x00	; 0
    d97e:	2e 81       	ldd	r18, Y+6	; 0x06
    d980:	32 2f       	mov	r19, r18
    d982:	3f 70       	andi	r19, 0x0F	; 15
    d984:	2b 85       	ldd	r18, Y+11	; 0x0b
    d986:	22 1f       	adc	r18, r18
    d988:	22 27       	eor	r18, r18
    d98a:	22 1f       	adc	r18, r18
    d98c:	23 0f       	add	r18, r19
    d98e:	43 70       	andi	r20, 0x03	; 3
    d990:	44 0f       	add	r20, r20
    d992:	42 0f       	add	r20, r18
    d994:	47 50       	subi	r20, 0x07	; 7
    d996:	04 c0       	rjmp	.+8      	; 0xd9a0 <mmc_disk_ioctl+0x134>
    d998:	88 0f       	add	r24, r24
    d99a:	99 1f       	adc	r25, r25
    d99c:	aa 1f       	adc	r26, r26
    d99e:	bb 1f       	adc	r27, r27
    d9a0:	4a 95       	dec	r20
    d9a2:	d2 f7       	brpl	.-12     	; 0xd998 <mmc_disk_ioctl+0x12c>
    d9a4:	71 c0       	rjmp	.+226    	; 0xda88 <mmc_disk_ioctl+0x21c>
            }
            deselect();
            break;

        case GET_BLOCK_SIZE :                     /* Get erase block size in unit of sector (DWORD) */
            if (CardType & CT_SD2)                /* SDv2? */
    d9a6:	80 91 23 18 	lds	r24, 0x1823	; 0x801823 <CardType>
            {
                if (send_cmd(ACMD13, 0) == 0)     /* Read SD status */
    d9aa:	40 e0       	ldi	r20, 0x00	; 0
    d9ac:	50 e0       	ldi	r21, 0x00	; 0
            }
            deselect();
            break;

        case GET_BLOCK_SIZE :                     /* Get erase block size in unit of sector (DWORD) */
            if (CardType & CT_SD2)                /* SDv2? */
    d9ae:	ba 01       	movw	r22, r20
    d9b0:	82 ff       	sbrs	r24, 2
            {
                if (send_cmd(ACMD13, 0) == 0)     /* Read SD status */
    d9b2:	24 c0       	rjmp	.+72     	; 0xd9fc <mmc_disk_ioctl+0x190>
    d9b4:	8d e8       	ldi	r24, 0x8D	; 141
    d9b6:	73 dd       	rcall	.-1306   	; 0xd49e <send_cmd>
    d9b8:	81 11       	cpse	r24, r1
                {
                    xchg_spi(0xFF);
    d9ba:	8f c1       	rjmp	.+798    	; 0xdcda <mmc_disk_ioctl+0x46e>
    d9bc:	8f ef       	ldi	r24, 0xFF	; 255
                    if (rcvr_datablock(csd, 16))  /* Read partial block */
    d9be:	10 dd       	rcall	.-1504   	; 0xd3e0 <xchg_spi>
    d9c0:	60 e1       	ldi	r22, 0x10	; 16
    d9c2:	70 e0       	ldi	r23, 0x00	; 0
    d9c4:	ce 01       	movw	r24, r28
    d9c6:	01 96       	adiw	r24, 0x01	; 1
    d9c8:	13 dd       	rcall	.-1498   	; 0xd3f0 <rcvr_datablock>
    d9ca:	89 2b       	or	r24, r25
    d9cc:	09 f4       	brne	.+2      	; 0xd9d0 <mmc_disk_ioctl+0x164>
    d9ce:	85 c1       	rjmp	.+778    	; 0xdcda <mmc_disk_ioctl+0x46e>
    d9d0:	50 e3       	ldi	r21, 0x30	; 48
                    {
/* Purge trailing data */
                        for (n = 64 - 16; n; n--) xchg_spi(0xFF);
    d9d2:	f5 2e       	mov	r15, r21
    d9d4:	8f ef       	ldi	r24, 0xFF	; 255
    d9d6:	04 dd       	rcall	.-1528   	; 0xd3e0 <xchg_spi>
    d9d8:	fa 94       	dec	r15
    d9da:	f1 10       	cpse	r15, r1
    d9dc:	fb cf       	rjmp	.-10     	; 0xd9d4 <mmc_disk_ioctl+0x168>
                        *(DWORD*)buff = 16UL << (csd[10] >> 4);
    d9de:	2b 85       	ldd	r18, Y+11	; 0x0b
    d9e0:	22 95       	swap	r18
    d9e2:	2f 70       	andi	r18, 0x0F	; 15
    d9e4:	80 e1       	ldi	r24, 0x10	; 16
    d9e6:	90 e0       	ldi	r25, 0x00	; 0
    d9e8:	a0 e0       	ldi	r26, 0x00	; 0
    d9ea:	b0 e0       	ldi	r27, 0x00	; 0
    d9ec:	04 c0       	rjmp	.+8      	; 0xd9f6 <mmc_disk_ioctl+0x18a>
    d9ee:	88 0f       	add	r24, r24
    d9f0:	99 1f       	adc	r25, r25
    d9f2:	aa 1f       	adc	r26, r26
    d9f4:	bb 1f       	adc	r27, r27
    d9f6:	2a 95       	dec	r18
    d9f8:	d2 f7       	brpl	.-12     	; 0xd9ee <mmc_disk_ioctl+0x182>
                }
            }                                     /* SDv1 or MMCv3 */
            else
            {
/* Read CSD */
                if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16))
    d9fa:	46 c0       	rjmp	.+140    	; 0xda88 <mmc_disk_ioctl+0x21c>
    d9fc:	89 e0       	ldi	r24, 0x09	; 9
    d9fe:	4f dd       	rcall	.-1378   	; 0xd49e <send_cmd>
    da00:	81 11       	cpse	r24, r1
    da02:	6b c1       	rjmp	.+726    	; 0xdcda <mmc_disk_ioctl+0x46e>
    da04:	60 e1       	ldi	r22, 0x10	; 16
    da06:	70 e0       	ldi	r23, 0x00	; 0
    da08:	ce 01       	movw	r24, r28
    da0a:	01 96       	adiw	r24, 0x01	; 1
    da0c:	f1 dc       	rcall	.-1566   	; 0xd3f0 <rcvr_datablock>
    da0e:	89 2b       	or	r24, r25
    da10:	09 f4       	brne	.+2      	; 0xda14 <mmc_disk_ioctl+0x1a8>
    da12:	63 c1       	rjmp	.+710    	; 0xdcda <mmc_disk_ioctl+0x46e>
                {
                    if (CardType & CT_SD1)        /* SDv1 */
    da14:	90 91 23 18 	lds	r25, 0x1823	; 0x801823 <CardType>
    da18:	2b 85       	ldd	r18, Y+11	; 0x0b
    da1a:	8c 85       	ldd	r24, Y+12	; 0x0c
    da1c:	91 ff       	sbrs	r25, 1
    da1e:	16 c0       	rjmp	.+44     	; 0xda4c <mmc_disk_ioctl+0x1e0>
                    {
                        *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    da20:	2f 73       	andi	r18, 0x3F	; 63
    da22:	88 1f       	adc	r24, r24
    da24:	88 27       	eor	r24, r24
    da26:	88 1f       	adc	r24, r24
    da28:	90 e0       	ldi	r25, 0x00	; 0
    da2a:	01 96       	adiw	r24, 0x01	; 1
    da2c:	82 0f       	add	r24, r18
    da2e:	91 1d       	adc	r25, r1
    da30:	82 0f       	add	r24, r18
    da32:	91 1d       	adc	r25, r1
    da34:	2e 85       	ldd	r18, Y+14	; 0x0e
    da36:	22 95       	swap	r18
    da38:	26 95       	lsr	r18
    da3a:	26 95       	lsr	r18
    da3c:	23 70       	andi	r18, 0x03	; 3
    da3e:	21 50       	subi	r18, 0x01	; 1
    da40:	02 c0       	rjmp	.+4      	; 0xda46 <mmc_disk_ioctl+0x1da>
    da42:	88 0f       	add	r24, r24
    da44:	99 1f       	adc	r25, r25
    da46:	2a 95       	dec	r18
    da48:	e2 f7       	brpl	.-8      	; 0xda42 <mmc_disk_ioctl+0x1d6>
    da4a:	1c c0       	rjmp	.+56     	; 0xda84 <mmc_disk_ioctl+0x218>
                    }                             /* MMCv3 */
                    else
                    {
                        *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    da4c:	38 2f       	mov	r19, r24
    da4e:	33 70       	andi	r19, 0x03	; 3
    da50:	82 95       	swap	r24
    da52:	86 95       	lsr	r24
    da54:	87 70       	andi	r24, 0x07	; 7
    da56:	90 e0       	ldi	r25, 0x00	; 0
    da58:	f8 e0       	ldi	r31, 0x08	; 8
    da5a:	3f 9f       	mul	r19, r31
    da5c:	80 0d       	add	r24, r0
    da5e:	91 1d       	adc	r25, r1
    da60:	11 24       	eor	r1, r1
    da62:	01 96       	adiw	r24, 0x01	; 1
    da64:	2c 77       	andi	r18, 0x7C	; 124
    da66:	30 e0       	ldi	r19, 0x00	; 0
    da68:	35 95       	asr	r19
    da6a:	27 95       	ror	r18
    da6c:	35 95       	asr	r19
    da6e:	27 95       	ror	r18
    da70:	2f 5f       	subi	r18, 0xFF	; 255
    da72:	3f 4f       	sbci	r19, 0xFF	; 255
    da74:	82 9f       	mul	r24, r18
    da76:	a0 01       	movw	r20, r0
    da78:	83 9f       	mul	r24, r19
    da7a:	50 0d       	add	r21, r0
    da7c:	92 9f       	mul	r25, r18
    da7e:	50 0d       	add	r21, r0
    da80:	11 24       	eor	r1, r1
    da82:	ca 01       	movw	r24, r20
    da84:	a0 e0       	ldi	r26, 0x00	; 0
    da86:	b0 e0       	ldi	r27, 0x00	; 0
    da88:	f8 01       	movw	r30, r16
    da8a:	80 83       	st	Z, r24
    da8c:	91 83       	std	Z+1, r25	; 0x01
    da8e:	a2 83       	std	Z+2, r26	; 0x02
    da90:	b3 83       	std	Z+3, r27	; 0x03
                    }
                    res = RES_OK;
    da92:	00 e0       	ldi	r16, 0x00	; 0
            res = RES_OK;
            break;

        case MMC_GET_CSD :                        /* Receive CSD as a data block (16 bytes) */
/* READ_CSD */
            if (send_cmd(CMD9, 0) == 0 && rcvr_datablock(ptr, 16))
    da94:	23 c1       	rjmp	.+582    	; 0xdcdc <mmc_disk_ioctl+0x470>
    da96:	40 e0       	ldi	r20, 0x00	; 0
    da98:	50 e0       	ldi	r21, 0x00	; 0
    da9a:	ba 01       	movw	r22, r20
    da9c:	89 e0       	ldi	r24, 0x09	; 9
            deselect();
            break;

        case MMC_GET_CID :                        /* Receive CID as a data block (16 bytes) */
/* READ_CID */
            if (send_cmd(CMD10, 0) == 0 && rcvr_datablock(ptr, 16))
    da9e:	04 c0       	rjmp	.+8      	; 0xdaa8 <mmc_disk_ioctl+0x23c>
    daa0:	40 e0       	ldi	r20, 0x00	; 0
    daa2:	50 e0       	ldi	r21, 0x00	; 0
    daa4:	ba 01       	movw	r22, r20
    daa6:	8a e0       	ldi	r24, 0x0A	; 10
    daa8:	fa dc       	rcall	.-1548   	; 0xd49e <send_cmd>
    daaa:	81 11       	cpse	r24, r1
    daac:	16 c1       	rjmp	.+556    	; 0xdcda <mmc_disk_ioctl+0x46e>
    daae:	60 e1       	ldi	r22, 0x10	; 16
    dab0:	70 e0       	ldi	r23, 0x00	; 0
                res = RES_OK;
            deselect();
            break;

        case MMC_GET_OCR :                        /* Receive OCR as an R3 resp (4 bytes) */
            if (send_cmd(CMD58, 0) == 0)          /* READ_OCR */
    dab2:	1f c0       	rjmp	.+62     	; 0xdaf2 <mmc_disk_ioctl+0x286>
    dab4:	40 e0       	ldi	r20, 0x00	; 0
    dab6:	50 e0       	ldi	r21, 0x00	; 0
    dab8:	ba 01       	movw	r22, r20
    daba:	8a e3       	ldi	r24, 0x3A	; 58
    dabc:	f0 dc       	rcall	.-1568   	; 0xd49e <send_cmd>
    dabe:	81 11       	cpse	r24, r1
    dac0:	0c c1       	rjmp	.+536    	; 0xdcda <mmc_disk_ioctl+0x46e>
    dac2:	78 01       	movw	r14, r16
    dac4:	f4 e0       	ldi	r31, 0x04	; 4
    dac6:	ef 0e       	add	r14, r31
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    dac8:	f1 1c       	adc	r15, r1
    daca:	8f ef       	ldi	r24, 0xFF	; 255
            break;

        case MMC_GET_OCR :                        /* Receive OCR as an R3 resp (4 bytes) */
            if (send_cmd(CMD58, 0) == 0)          /* READ_OCR */
            {
                for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
    dacc:	83 d1       	rcall	.+774    	; 0xddd4 <mmc_spi_TXRX>
    dace:	f8 01       	movw	r30, r16
    dad0:	81 93       	st	Z+, r24
    dad2:	8f 01       	movw	r16, r30
    dad4:	ee 15       	cp	r30, r14
    dad6:	ff 05       	cpc	r31, r15
            }
            deselect();
            break;

        case MMC_GET_SDSTAT :                     /* Receive SD statsu as a data block (64 bytes) */
            if (send_cmd(ACMD13, 0) == 0)         /* SD_STATUS */
    dad8:	c1 f7       	brne	.-16     	; 0xdaca <mmc_disk_ioctl+0x25e>
    dada:	db cf       	rjmp	.-74     	; 0xda92 <mmc_disk_ioctl+0x226>
    dadc:	40 e0       	ldi	r20, 0x00	; 0
    dade:	50 e0       	ldi	r21, 0x00	; 0
    dae0:	ba 01       	movw	r22, r20
    dae2:	8d e8       	ldi	r24, 0x8D	; 141
    dae4:	dc dc       	rcall	.-1608   	; 0xd49e <send_cmd>
            {
                xchg_spi(0xFF);
    dae6:	81 11       	cpse	r24, r1
    dae8:	f8 c0       	rjmp	.+496    	; 0xdcda <mmc_disk_ioctl+0x46e>
    daea:	8f ef       	ldi	r24, 0xFF	; 255
                if (rcvr_datablock(ptr, 64)) res = RES_OK;
    daec:	79 dc       	rcall	.-1806   	; 0xd3e0 <xchg_spi>
    daee:	60 e4       	ldi	r22, 0x40	; 64
    daf0:	70 e0       	ldi	r23, 0x00	; 0
    daf2:	c8 01       	movw	r24, r16
    daf4:	7d dc       	rcall	.-1798   	; 0xd3f0 <rcvr_datablock>
    {
        deselect();
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    daf6:	01 e0       	ldi	r16, 0x01	; 1
    daf8:	10 e0       	ldi	r17, 0x00	; 0
    dafa:	89 2b       	or	r24, r25
    dafc:	09 f4       	brne	.+2      	; 0xdb00 <mmc_disk_ioctl+0x294>
    dafe:	ef c0       	rjmp	.+478    	; 0xdcde <mmc_disk_ioctl+0x472>
    db00:	ea c0       	rjmp	.+468    	; 0xdcd6 <mmc_disk_ioctl+0x46a>
void power_off (void)
{
/* Disable SPI function */
/* De-configure MOSI/MISO/SCLK/CS pins (set hi-z) */
/* Turn socket power off (nothing to do if no power controls) */
    mmc_power_off();
    db02:	97 d1       	rcall	.+814    	; 0xde32 <mmc_power_off>
    db04:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
            deselect();
            break;

        case CTRL_POWER_OFF :                     /* Power off */
            power_off();
            Stat |= STA_NOINIT;
    db08:	81 60       	ori	r24, 0x01	; 1
    db0a:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Stat>
    db0e:	00 e0       	ldi	r16, 0x00	; 0
            res = RES_OK;
    db10:	eb c0       	rjmp	.+470    	; 0xdce8 <mmc_disk_ioctl+0x47c>
    db12:	fb 01       	movw	r30, r22
            break;
#if _USE_ISDIO
        case ISDIO_READ:
            sdi = buff;
            if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
    db14:	43 81       	ldd	r20, Z+3	; 0x03
    db16:	54 81       	ldd	r21, Z+4	; 0x04
    db18:	65 81       	ldd	r22, Z+5	; 0x05
    db1a:	76 81       	ldd	r23, Z+6	; 0x06
    db1c:	39 e0       	ldi	r19, 0x09	; 9
    db1e:	44 0f       	add	r20, r20
    db20:	55 1f       	adc	r21, r21
    db22:	66 1f       	adc	r22, r22
    db24:	77 1f       	adc	r23, r23
    db26:	3a 95       	dec	r19
    db28:	d1 f7       	brne	.-12     	; 0xdb1e <mmc_disk_ioctl+0x2b2>
    db2a:	70 68       	ori	r23, 0x80	; 128
    db2c:	80 81       	ld	r24, Z
    db2e:	90 e0       	ldi	r25, 0x00	; 0
    db30:	a0 e0       	ldi	r26, 0x00	; 0
    db32:	b0 e0       	ldi	r27, 0x00	; 0
    db34:	2c e1       	ldi	r18, 0x1C	; 28
    db36:	88 0f       	add	r24, r24
    db38:	99 1f       	adc	r25, r25
    db3a:	aa 1f       	adc	r26, r26
    db3c:	bb 1f       	adc	r27, r27
    db3e:	2a 95       	dec	r18
    db40:	d1 f7       	brne	.-12     	; 0xdb36 <mmc_disk_ioctl+0x2ca>
    db42:	48 2b       	or	r20, r24
    db44:	59 2b       	or	r21, r25
    db46:	6a 2b       	or	r22, r26
    db48:	7b 2b       	or	r23, r27
    db4a:	81 81       	ldd	r24, Z+1	; 0x01
    db4c:	92 81       	ldd	r25, Z+2	; 0x02
    db4e:	01 97       	sbiw	r24, 0x01	; 1
    db50:	91 70       	andi	r25, 0x01	; 1
    db52:	a0 e0       	ldi	r26, 0x00	; 0
    db54:	b0 e0       	ldi	r27, 0x00	; 0
    db56:	48 2b       	or	r20, r24
    db58:	59 2b       	or	r21, r25
    db5a:	6a 2b       	or	r22, r26
    db5c:	7b 2b       	or	r23, r27
    db5e:	80 e3       	ldi	r24, 0x30	; 48
    db60:	9e dc       	rcall	.-1732   	; 0xd49e <send_cmd>
            {
                mmc_set_ms_timeout(1000);
    db62:	81 11       	cpse	r24, r1
    db64:	ba c0       	rjmp	.+372    	; 0xdcda <mmc_disk_ioctl+0x46e>
    db66:	88 ee       	ldi	r24, 0xE8	; 232
    db68:	93 e0       	ldi	r25, 0x03	; 3
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    db6a:	37 d1       	rcall	.+622    	; 0xddda <mmc_set_ms_timeout>
    db6c:	8f ef       	ldi	r24, 0xFF	; 255
    db6e:	32 d1       	rcall	.+612    	; 0xddd4 <mmc_spi_TXRX>
        case ISDIO_READ:
            sdi = buff;
            if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
            {
                mmc_set_ms_timeout(1000);
                while( (rc = xchg_spi(0xFF)) == 0xFF && !mmc_test_timeout() )
    db70:	8f 3f       	cpi	r24, 0xFF	; 255
    db72:	21 f4       	brne	.+8      	; 0xdb7c <mmc_disk_ioctl+0x310>
    db74:	39 d1       	rcall	.+626    	; 0xdde8 <mmc_test_timeout>
    db76:	89 2b       	or	r24, r25
    db78:	c9 f3       	breq	.-14     	; 0xdb6c <mmc_disk_ioctl+0x300>
    db7a:	af c0       	rjmp	.+350    	; 0xdcda <mmc_disk_ioctl+0x46e>
                    ;
                if (rc == 0xFE)
    db7c:	8e 3f       	cpi	r24, 0xFE	; 254
    db7e:	09 f0       	breq	.+2      	; 0xdb82 <mmc_disk_ioctl+0x316>
    db80:	ac c0       	rjmp	.+344    	; 0xdcda <mmc_disk_ioctl+0x46e>
                {
                    for (bp = sdi->data, dc = sdi->ndata; dc; dc--) *bp++ = xchg_spi(0xFF);
    db82:	f8 01       	movw	r30, r16
    db84:	e7 80       	ldd	r14, Z+7	; 0x07
    db86:	f0 84       	ldd	r15, Z+8	; 0x08
    db88:	c1 80       	ldd	r12, Z+1	; 0x01
    db8a:	d2 80       	ldd	r13, Z+2	; 0x02
    db8c:	ce 0c       	add	r12, r14
    db8e:	df 1c       	adc	r13, r15
    db90:	ce 14       	cp	r12, r14
    db92:	df 04       	cpc	r13, r15
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    db94:	31 f0       	breq	.+12     	; 0xdba2 <mmc_disk_ioctl+0x336>
    db96:	8f ef       	ldi	r24, 0xFF	; 255
    db98:	1d d1       	rcall	.+570    	; 0xddd4 <mmc_spi_TXRX>
                mmc_set_ms_timeout(1000);
                while( (rc = xchg_spi(0xFF)) == 0xFF && !mmc_test_timeout() )
                    ;
                if (rc == 0xFE)
                {
                    for (bp = sdi->data, dc = sdi->ndata; dc; dc--) *bp++ = xchg_spi(0xFF);
    db9a:	f7 01       	movw	r30, r14
    db9c:	81 93       	st	Z+, r24
    db9e:	7f 01       	movw	r14, r30
    dba0:	f7 cf       	rjmp	.-18     	; 0xdb90 <mmc_disk_ioctl+0x324>
                    for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
    dba2:	f8 01       	movw	r30, r16
    dba4:	81 81       	ldd	r24, Z+1	; 0x01
    dba6:	92 81       	ldd	r25, Z+2	; 0x02
    dba8:	02 e0       	ldi	r16, 0x02	; 2
    dbaa:	12 e0       	ldi	r17, 0x02	; 2
    dbac:	08 1b       	sub	r16, r24
    dbae:	19 0b       	sbc	r17, r25
    dbb0:	01 15       	cp	r16, r1
    dbb2:	11 05       	cpc	r17, r1
    dbb4:	09 f4       	brne	.+2      	; 0xdbb8 <mmc_disk_ioctl+0x34c>
    dbb6:	6d cf       	rjmp	.-294    	; 0xda92 <mmc_disk_ioctl+0x226>
    dbb8:	8f ef       	ldi	r24, 0xFF	; 255
    dbba:	12 dc       	rcall	.-2012   	; 0xd3e0 <xchg_spi>
    dbbc:	01 50       	subi	r16, 0x01	; 1
    dbbe:	11 09       	sbc	r17, r1
    dbc0:	f7 cf       	rjmp	.-18     	; 0xdbb0 <mmc_disk_ioctl+0x344>
    dbc2:	fb 01       	movw	r30, r22
            deselect();
            break;

        case ISDIO_WRITE:
            sdi = buff;
            if (send_cmd(CMD49, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
    dbc4:	43 81       	ldd	r20, Z+3	; 0x03
    dbc6:	54 81       	ldd	r21, Z+4	; 0x04
    dbc8:	65 81       	ldd	r22, Z+5	; 0x05
    dbca:	76 81       	ldd	r23, Z+6	; 0x06
    dbcc:	39 e0       	ldi	r19, 0x09	; 9
    dbce:	44 0f       	add	r20, r20
    dbd0:	55 1f       	adc	r21, r21
    dbd2:	66 1f       	adc	r22, r22
    dbd4:	77 1f       	adc	r23, r23
    dbd6:	3a 95       	dec	r19
    dbd8:	d1 f7       	brne	.-12     	; 0xdbce <mmc_disk_ioctl+0x362>
    dbda:	70 68       	ori	r23, 0x80	; 128
    dbdc:	80 81       	ld	r24, Z
    dbde:	90 e0       	ldi	r25, 0x00	; 0
    dbe0:	a0 e0       	ldi	r26, 0x00	; 0
    dbe2:	b0 e0       	ldi	r27, 0x00	; 0
    dbe4:	2c e1       	ldi	r18, 0x1C	; 28
    dbe6:	88 0f       	add	r24, r24
    dbe8:	99 1f       	adc	r25, r25
    dbea:	aa 1f       	adc	r26, r26
    dbec:	bb 1f       	adc	r27, r27
    dbee:	2a 95       	dec	r18
    dbf0:	d1 f7       	brne	.-12     	; 0xdbe6 <mmc_disk_ioctl+0x37a>
    dbf2:	48 2b       	or	r20, r24
    dbf4:	59 2b       	or	r21, r25
    dbf6:	6a 2b       	or	r22, r26
    dbf8:	7b 2b       	or	r23, r27
    dbfa:	81 81       	ldd	r24, Z+1	; 0x01
    dbfc:	92 81       	ldd	r25, Z+2	; 0x02
    dbfe:	01 97       	sbiw	r24, 0x01	; 1
    dc00:	91 70       	andi	r25, 0x01	; 1
    dc02:	a0 e0       	ldi	r26, 0x00	; 0
    dc04:	b0 e0       	ldi	r27, 0x00	; 0
    dc06:	48 2b       	or	r20, r24
    dc08:	59 2b       	or	r21, r25
    dc0a:	6a 2b       	or	r22, r26
    dc0c:	7b 2b       	or	r23, r27
    dc0e:	81 e3       	ldi	r24, 0x31	; 49
    dc10:	46 dc       	rcall	.-1908   	; 0xd49e <send_cmd>
            {
                xchg_spi(0xFF); xchg_spi(0xFE);
    dc12:	81 11       	cpse	r24, r1
    dc14:	62 c0       	rjmp	.+196    	; 0xdcda <mmc_disk_ioctl+0x46e>
    dc16:	8f ef       	ldi	r24, 0xFF	; 255
    dc18:	e3 db       	rcall	.-2106   	; 0xd3e0 <xchg_spi>
    dc1a:	8e ef       	ldi	r24, 0xFE	; 254
    dc1c:	e1 db       	rcall	.-2110   	; 0xd3e0 <xchg_spi>
                for (bp = sdi->data, dc = sdi->ndata; dc; dc--) xchg_spi(*bp++);
    dc1e:	f8 01       	movw	r30, r16
    dc20:	e7 80       	ldd	r14, Z+7	; 0x07
    dc22:	f0 84       	ldd	r15, Z+8	; 0x08
    dc24:	c1 80       	ldd	r12, Z+1	; 0x01
    dc26:	d2 80       	ldd	r13, Z+2	; 0x02
    dc28:	ce 0c       	add	r12, r14
    dc2a:	df 1c       	adc	r13, r15
    dc2c:	ec 14       	cp	r14, r12
    dc2e:	fd 04       	cpc	r15, r13
    dc30:	29 f0       	breq	.+10     	; 0xdc3c <mmc_disk_ioctl+0x3d0>
    dc32:	f7 01       	movw	r30, r14
    dc34:	81 91       	ld	r24, Z+
    dc36:	7f 01       	movw	r14, r30
    dc38:	d3 db       	rcall	.-2138   	; 0xd3e0 <xchg_spi>
    dc3a:	f8 cf       	rjmp	.-16     	; 0xdc2c <mmc_disk_ioctl+0x3c0>
                for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
    dc3c:	f8 01       	movw	r30, r16
    dc3e:	81 81       	ldd	r24, Z+1	; 0x01
    dc40:	92 81       	ldd	r25, Z+2	; 0x02
    dc42:	02 e0       	ldi	r16, 0x02	; 2
    dc44:	12 e0       	ldi	r17, 0x02	; 2
    dc46:	08 1b       	sub	r16, r24
    dc48:	19 0b       	sbc	r17, r25
    dc4a:	8f ef       	ldi	r24, 0xFF	; 255
    dc4c:	01 15       	cp	r16, r1
    dc4e:	11 05       	cpc	r17, r1
    dc50:	09 f4       	brne	.+2      	; 0xdc54 <mmc_disk_ioctl+0x3e8>
    dc52:	3b c0       	rjmp	.+118    	; 0xdcca <mmc_disk_ioctl+0x45e>
    dc54:	c5 db       	rcall	.-2166   	; 0xd3e0 <xchg_spi>
    dc56:	01 50       	subi	r16, 0x01	; 1
    dc58:	11 09       	sbc	r17, r1
    dc5a:	f7 cf       	rjmp	.-18     	; 0xdc4a <mmc_disk_ioctl+0x3de>
    dc5c:	fb 01       	movw	r30, r22
            deselect();
            break;

        case ISDIO_MRITE:
            sdi = buff;
            if (send_cmd(CMD49, 0x84000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | sdi->ndata >> 8) == 0)
    dc5e:	43 81       	ldd	r20, Z+3	; 0x03
    dc60:	54 81       	ldd	r21, Z+4	; 0x04
    dc62:	65 81       	ldd	r22, Z+5	; 0x05
    dc64:	76 81       	ldd	r23, Z+6	; 0x06
    dc66:	89 e0       	ldi	r24, 0x09	; 9
    dc68:	44 0f       	add	r20, r20
    dc6a:	55 1f       	adc	r21, r21
    dc6c:	66 1f       	adc	r22, r22
    dc6e:	77 1f       	adc	r23, r23
    dc70:	8a 95       	dec	r24
    dc72:	d1 f7       	brne	.-12     	; 0xdc68 <mmc_disk_ioctl+0x3fc>
    dc74:	74 68       	ori	r23, 0x84	; 132
    dc76:	80 81       	ld	r24, Z
    dc78:	90 e0       	ldi	r25, 0x00	; 0
    dc7a:	a0 e0       	ldi	r26, 0x00	; 0
    dc7c:	b0 e0       	ldi	r27, 0x00	; 0
    dc7e:	2c e1       	ldi	r18, 0x1C	; 28
    dc80:	88 0f       	add	r24, r24
    dc82:	99 1f       	adc	r25, r25
    dc84:	aa 1f       	adc	r26, r26
    dc86:	bb 1f       	adc	r27, r27
    dc88:	2a 95       	dec	r18
    dc8a:	d1 f7       	brne	.-12     	; 0xdc80 <mmc_disk_ioctl+0x414>
    dc8c:	48 2b       	or	r20, r24
    dc8e:	59 2b       	or	r21, r25
    dc90:	6a 2b       	or	r22, r26
    dc92:	7b 2b       	or	r23, r27
    dc94:	82 81       	ldd	r24, Z+2	; 0x02
    dc96:	90 e0       	ldi	r25, 0x00	; 0
    dc98:	a0 e0       	ldi	r26, 0x00	; 0
    dc9a:	b0 e0       	ldi	r27, 0x00	; 0
    dc9c:	48 2b       	or	r20, r24
    dc9e:	59 2b       	or	r21, r25
    dca0:	6a 2b       	or	r22, r26
    dca2:	7b 2b       	or	r23, r27
            {
                xchg_spi(0xFF); xchg_spi(0xFE);
    dca4:	81 e3       	ldi	r24, 0x31	; 49
    dca6:	fb db       	rcall	.-2058   	; 0xd49e <send_cmd>
    dca8:	81 11       	cpse	r24, r1
    dcaa:	17 c0       	rjmp	.+46     	; 0xdcda <mmc_disk_ioctl+0x46e>
    dcac:	8f ef       	ldi	r24, 0xFF	; 255
    dcae:	98 db       	rcall	.-2256   	; 0xd3e0 <xchg_spi>
                xchg_spi(sdi->ndata);
    dcb0:	8e ef       	ldi	r24, 0xFE	; 254
    dcb2:	96 db       	rcall	.-2260   	; 0xd3e0 <xchg_spi>
    dcb4:	f8 01       	movw	r30, r16
    dcb6:	81 81       	ldd	r24, Z+1	; 0x01
    dcb8:	93 db       	rcall	.-2266   	; 0xd3e0 <xchg_spi>
    dcba:	01 e0       	ldi	r16, 0x01	; 1
                for (dc = 513; dc; dc--) xchg_spi(0xFF);
    dcbc:	12 e0       	ldi	r17, 0x02	; 2
    dcbe:	8f ef       	ldi	r24, 0xFF	; 255
    dcc0:	8f db       	rcall	.-2274   	; 0xd3e0 <xchg_spi>
    dcc2:	01 50       	subi	r16, 0x01	; 1
    dcc4:	11 09       	sbc	r17, r1
    dcc6:	d9 f7       	brne	.-10     	; 0xdcbe <mmc_disk_ioctl+0x452>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    dcc8:	8f ef       	ldi	r24, 0xFF	; 255
    dcca:	84 d0       	rcall	.+264    	; 0xddd4 <mmc_spi_TXRX>
    dccc:	8f 71       	andi	r24, 0x1F	; 31
    {
        deselect();
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    dcce:	01 e0       	ldi	r16, 0x01	; 1
    dcd0:	10 e0       	ldi	r17, 0x00	; 0
    dcd2:	85 30       	cpi	r24, 0x05	; 5
    dcd4:	21 f4       	brne	.+8      	; 0xdcde <mmc_disk_ioctl+0x472>
    dcd6:	00 e0       	ldi	r16, 0x00	; 0
    dcd8:	02 c0       	rjmp	.+4      	; 0xdcde <mmc_disk_ioctl+0x472>
    dcda:	01 e0       	ldi	r16, 0x01	; 1
    dcdc:	10 e0       	ldi	r17, 0x00	; 0
    dcde:	82 db       	rcall	.-2300   	; 0xd3e4 <deselect>
                xchg_spi(0xFF); xchg_spi(0xFE);
                xchg_spi(sdi->ndata);
                for (dc = 513; dc; dc--) xchg_spi(0xFF);
                if ((xchg_spi(0xFF) & 0x1F) == 0x05) res = RES_OK;
            }
            deselect();
    dce0:	04 c0       	rjmp	.+8      	; 0xdcea <mmc_disk_ioctl+0x47e>
    dce2:	03 e0       	ldi	r16, 0x03	; 3
            break;
    dce4:	01 c0       	rjmp	.+2      	; 0xdce8 <mmc_disk_ioctl+0x47c>
    BYTE rc, *bp;
    UINT dc;
#endif

    if (Stat & STA_NOINIT)
        return RES_NOTRDY;
    dce6:	04 e0       	ldi	r16, 0x04	; 4
    dce8:	10 e0       	ldi	r17, 0x00	; 0
            }
            deselect();
            break;
#endif
        default:
            res = RES_PARERR;
    dcea:	c8 01       	movw	r24, r16
    dcec:	60 96       	adiw	r28, 0x10	; 16
    }

    return res;
}
    dcee:	e8 e0       	ldi	r30, 0x08	; 8
    dcf0:	0c 94 33 e7 	jmp	0x1ce66	; 0x1ce66 <__epilogue_restores__+0x14>

0000dcf4 <mmc_disk_timerproc>:
    dcf4:	cf 93       	push	r28
    dcf6:	80 91 25 18 	lds	r24, 0x1825	; 0x801825 <Timer1>
{
    BYTE n;
    BYTE s;

    n = Timer1;                                   /* 100Hz decrement timer */
    if (n) Timer1 = --n;
    dcfa:	88 23       	and	r24, r24
    dcfc:	19 f0       	breq	.+6      	; 0xdd04 <mmc_disk_timerproc+0x10>
    dcfe:	81 50       	subi	r24, 0x01	; 1
    dd00:	80 93 25 18 	sts	0x1825, r24	; 0x801825 <Timer1>
    n = Timer2;
    dd04:	80 91 24 18 	lds	r24, 0x1824	; 0x801824 <Timer2>
    if (n) Timer2 = --n;
    dd08:	88 23       	and	r24, r24
    dd0a:	19 f0       	breq	.+6      	; 0xdd12 <mmc_disk_timerproc+0x1e>
    dd0c:	81 50       	subi	r24, 0x01	; 1
    dd0e:	80 93 24 18 	sts	0x1824, r24	; 0x801824 <Timer2>

    s = Stat;
    dd12:	c0 91 35 01 	lds	r28, 0x0135	; 0x800135 <Stat>
        s |= STA_PROTECT;
    else                                          /* Write enabled */
        s &= ~STA_PROTECT;
#endif

    if (MMC_CD)                                   /* Card inserted */
    dd16:	8e d0       	rcall	.+284    	; 0xde34 <mmc_ins_status>
    dd18:	89 2b       	or	r24, r25
    dd1a:	11 f0       	breq	.+4      	; 0xdd20 <mmc_disk_timerproc+0x2c>
	{
        s &= ~STA_NODISK;
    dd1c:	cd 7f       	andi	r28, 0xFD	; 253
    dd1e:	04 c0       	rjmp	.+8      	; 0xdd28 <mmc_disk_timerproc+0x34>
	}
    else                                          /* Socket empty */
	{	
        s |= (STA_NODISK | STA_NOINIT);
    dd20:	c3 60       	ori	r28, 0x03	; 3
		set_error(1);
    dd22:	81 e0       	ldi	r24, 0x01	; 1
    dd24:	0e 94 26 27 	call	0x4e4c	; 0x4e4c <set_error>
	}

    Stat = s;                                     /* Update MMC status */
    dd28:	c0 93 35 01 	sts	0x0135, r28	; 0x800135 <Stat>
}
    dd2c:	cf 91       	pop	r28
    dd2e:	08 95       	ret

0000dd30 <mmc_install_timer>:
void mmc_ms_wait(int ms)
{
    mmc_set_ms_timeout(ms);
    while(!mmc_test_timeout())
        ;
}
    dd30:	00 d0       	rcall	.+0      	; 0xdd32 <mmc_install_timer+0x2>
    dd32:	1f 92       	push	r1
    dd34:	10 92 2f 18 	sts	0x182F, r1	; 0x80182f <_mmc_timeout+0x1>
    dd38:	10 92 2e 18 	sts	0x182E, r1	; 0x80182e <_mmc_timeout>
    dd3c:	61 e0       	ldi	r22, 0x01	; 1
    dd3e:	70 e0       	ldi	r23, 0x00	; 0
    dd40:	87 e2       	ldi	r24, 0x27	; 39
    dd42:	9f e6       	ldi	r25, 0x6F	; 111
    dd44:	0e 94 da 34 	call	0x69b4	; 0x69b4 <set_timers>
    dd48:	01 96       	adiw	r24, 0x01	; 1
    dd4a:	51 f4       	brne	.+20     	; 0xdd60 <mmc_install_timer+0x30>
    dd4c:	87 e2       	ldi	r24, 0x27	; 39
    dd4e:	98 e0       	ldi	r25, 0x08	; 8
    dd50:	a0 e0       	ldi	r26, 0x00	; 0
    dd52:	ed b7       	in	r30, 0x3d	; 61
    dd54:	fe b7       	in	r31, 0x3e	; 62
    dd56:	81 83       	std	Z+1, r24	; 0x01
    dd58:	92 83       	std	Z+2, r25	; 0x02
    dd5a:	a3 83       	std	Z+3, r26	; 0x03
    dd5c:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    dd60:	0f 90       	pop	r0
    dd62:	0f 90       	pop	r0
    dd64:	0f 90       	pop	r0
    dd66:	08 95       	ret

0000dd68 <mmc_spi_begin>:
    dd68:	60 91 2a 18 	lds	r22, 0x182A	; 0x80182a <_mmc_clock>
    dd6c:	70 91 2b 18 	lds	r23, 0x182B	; 0x80182b <_mmc_clock+0x1>
    dd70:	80 91 2c 18 	lds	r24, 0x182C	; 0x80182c <_mmc_clock+0x2>
    dd74:	90 91 2d 18 	lds	r25, 0x182D	; 0x80182d <_mmc_clock+0x3>
    dd78:	4b e0       	ldi	r20, 0x0B	; 11
    dd7a:	50 e0       	ldi	r21, 0x00	; 0
    dd7c:	0c 94 cd 26 	jmp	0x4d9a	; 0x4d9a <spi_begin>
    dd80:	08 95       	ret

0000dd82 <mmc_spi_end>:
    dd82:	8b e0       	ldi	r24, 0x0B	; 11
    dd84:	0c 94 69 26 	jmp	0x4cd2	; 0x4cd2 <spi_end>
    dd88:	08 95       	ret

0000dd8a <mmc_slow>:
    dd8a:	80 e2       	ldi	r24, 0x20	; 32
    dd8c:	91 ea       	ldi	r25, 0xA1	; 161
    dd8e:	a7 e0       	ldi	r26, 0x07	; 7
    dd90:	b0 e0       	ldi	r27, 0x00	; 0
    dd92:	80 93 2a 18 	sts	0x182A, r24	; 0x80182a <_mmc_clock>
    dd96:	90 93 2b 18 	sts	0x182B, r25	; 0x80182b <_mmc_clock+0x1>
    dd9a:	a0 93 2c 18 	sts	0x182C, r26	; 0x80182c <_mmc_clock+0x2>
    dd9e:	b0 93 2d 18 	sts	0x182D, r27	; 0x80182d <_mmc_clock+0x3>
    dda2:	08 95       	ret

0000dda4 <mmc_spi_init>:
    dda4:	8b e0       	ldi	r24, 0x0B	; 11
    dda6:	0e 94 67 26 	call	0x4cce	; 0x4cce <chip_select_init>
    ddaa:	ef cf       	rjmp	.-34     	; 0xdd8a <mmc_slow>
    ddac:	08 95       	ret

0000ddae <mmc_fast>:
    ddae:	80 ea       	ldi	r24, 0xA0	; 160
    ddb0:	95 e2       	ldi	r25, 0x25	; 37
    ddb2:	a6 e2       	ldi	r26, 0x26	; 38
    ddb4:	b0 e0       	ldi	r27, 0x00	; 0
    ddb6:	80 93 2a 18 	sts	0x182A, r24	; 0x80182a <_mmc_clock>
    ddba:	90 93 2b 18 	sts	0x182B, r25	; 0x80182b <_mmc_clock+0x1>
    ddbe:	a0 93 2c 18 	sts	0x182C, r26	; 0x80182c <_mmc_clock+0x2>
    ddc2:	b0 93 2d 18 	sts	0x182D, r27	; 0x80182d <_mmc_clock+0x3>
    ddc6:	08 95       	ret

0000ddc8 <mmc_spi_TX_buffer>:
    ddc8:	0c 94 99 26 	jmp	0x4d32	; 0x4d32 <spi_TX_buffer>
    ddcc:	08 95       	ret

0000ddce <mmc_spi_RX_buffer>:
    ddce:	0c 94 9b 26 	jmp	0x4d36	; 0x4d36 <spi_RX_buffer>
    ddd2:	08 95       	ret

0000ddd4 <mmc_spi_TXRX>:
    ddd4:	0c 94 15 27 	jmp	0x4e2a	; 0x4e2a <spi_TXRX>
    ddd8:	08 95       	ret

0000ddda <mmc_set_ms_timeout>:
    ddda:	f8 94       	cli
    dddc:	90 93 2f 18 	sts	0x182F, r25	; 0x80182f <_mmc_timeout+0x1>
    dde0:	80 93 2e 18 	sts	0x182E, r24	; 0x80182e <_mmc_timeout>
    dde4:	78 94       	sei
    dde6:	08 95       	ret

0000dde8 <mmc_test_timeout>:
    dde8:	00 d0       	rcall	.+0      	; 0xddea <mmc_test_timeout+0x2>
    ddea:	1f 92       	push	r1
    ddec:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    ddf0:	81 fd       	sbrc	r24, 1
    ddf2:	15 c0       	rjmp	.+42     	; 0xde1e <mmc_test_timeout+0x36>
    ddf4:	80 91 2e 18 	lds	r24, 0x182E	; 0x80182e <_mmc_timeout>
    ddf8:	90 91 2f 18 	lds	r25, 0x182F	; 0x80182f <_mmc_timeout+0x1>
    ddfc:	89 2b       	or	r24, r25
    ddfe:	91 f4       	brne	.+36     	; 0xde24 <mmc_test_timeout+0x3c>
    de00:	8a e1       	ldi	r24, 0x1A	; 26
    de02:	98 e0       	ldi	r25, 0x08	; 8
    de04:	a0 e0       	ldi	r26, 0x00	; 0
    de06:	ed b7       	in	r30, 0x3d	; 61
    de08:	fe b7       	in	r31, 0x3e	; 62
    de0a:	81 83       	std	Z+1, r24	; 0x01
    de0c:	92 83       	std	Z+2, r25	; 0x02
    de0e:	a3 83       	std	Z+3, r26	; 0x03
    de10:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    de14:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    de18:	83 60       	ori	r24, 0x03	; 3
    de1a:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Stat>
    de1e:	81 e0       	ldi	r24, 0x01	; 1
    de20:	90 e0       	ldi	r25, 0x00	; 0
    de22:	02 c0       	rjmp	.+4      	; 0xde28 <mmc_test_timeout+0x40>
    de24:	80 e0       	ldi	r24, 0x00	; 0
    de26:	90 e0       	ldi	r25, 0x00	; 0
    de28:	0f 90       	pop	r0
    de2a:	0f 90       	pop	r0
    de2c:	0f 90       	pop	r0
    de2e:	08 95       	ret

0000de30 <mmc_power_on>:
    de30:	08 95       	ret

0000de32 <mmc_power_off>:
/// @brief  MMC Power OFF
///
/// @return void
MEMSPACE
void mmc_power_off()
{
    de32:	08 95       	ret

0000de34 <mmc_ins_status>:

MEMSPACE
int mmc_ins_status()
{
	// HI when card is NOT inserted
	if( GPIO_PIN_RD(GPIO_C7) )
    de34:	3f 98       	cbi	0x07, 7	; 7
    de36:	86 b1       	in	r24, 0x06	; 6
    de38:	08 2e       	mov	r0, r24
    de3a:	00 0c       	add	r0, r0
    de3c:	99 0b       	sbc	r25, r25
    de3e:	80 95       	com	r24
    de40:	90 95       	com	r25
		return (0);
	else
		return(1);;	
}
    de42:	89 2f       	mov	r24, r25
    de44:	88 1f       	adc	r24, r24
    de46:	88 27       	eor	r24, r24
    de48:	88 1f       	adc	r24, r24
    de4a:	90 e0       	ldi	r25, 0x00	; 0
    de4c:	08 95       	ret

0000de4e <mmc_task>:
 @brief 1000HZ timer task
 @return void
*/
static void mmc_task(void)
{
    if(_mmc_timeout)
    de4e:	80 91 2e 18 	lds	r24, 0x182E	; 0x80182e <_mmc_timeout>
    de52:	90 91 2f 18 	lds	r25, 0x182F	; 0x80182f <_mmc_timeout+0x1>
    de56:	00 97       	sbiw	r24, 0x00	; 0
    de58:	29 f0       	breq	.+10     	; 0xde64 <mmc_task+0x16>
        _mmc_timeout--;
    de5a:	01 97       	sbiw	r24, 0x01	; 1
    de5c:	90 93 2f 18 	sts	0x182F, r25	; 0x80182f <_mmc_timeout+0x1>
    de60:	80 93 2e 18 	sts	0x182E, r24	; 0x80182e <_mmc_timeout>

// 100HZ
    if(_mmc_pre++  < 10)
    de64:	80 91 28 18 	lds	r24, 0x1828	; 0x801828 <_mmc_pre>
    de68:	90 91 29 18 	lds	r25, 0x1829	; 0x801829 <_mmc_pre+0x1>
    de6c:	8a 30       	cpi	r24, 0x0A	; 10
    de6e:	91 05       	cpc	r25, r1
    de70:	30 f4       	brcc	.+12     	; 0xde7e <mmc_task+0x30>
    de72:	01 96       	adiw	r24, 0x01	; 1
    de74:	90 93 29 18 	sts	0x1829, r25	; 0x801829 <_mmc_pre+0x1>
    de78:	80 93 28 18 	sts	0x1828, r24	; 0x801828 <_mmc_pre>
    de7c:	08 95       	ret
        return;

    _mmc_pre = 0;
    de7e:	10 92 29 18 	sts	0x1829, r1	; 0x801829 <_mmc_pre+0x1>
    de82:	10 92 28 18 	sts	0x1828, r1	; 0x801828 <_mmc_pre>

	if(!mmc_ins_status())
    de86:	d6 df       	rcall	.-84     	; 0xde34 <mmc_ins_status>
    de88:	89 2b       	or	r24, r25
    de8a:	19 f4       	brne	.+6      	; 0xde92 <mmc_task+0x44>
		set_error(1);
    de8c:	81 e0       	ldi	r24, 0x01	; 1
    de8e:	0e 94 26 27 	call	0x4e4c	; 0x4e4c <set_error>

    mmc_disk_timerproc();
    de92:	30 cf       	rjmp	.-416    	; 0xdcf4 <mmc_disk_timerproc>
    de94:	08 95       	ret

0000de96 <mmc_init>:
///
/// @param[in] verbose: display initialisation messages
/// @return
MEMSPACE
int mmc_init(int verbose)
{
    de96:	ac e0       	ldi	r26, 0x0C	; 12
    de98:	b1 e0       	ldi	r27, 0x01	; 1
    de9a:	e1 e5       	ldi	r30, 0x51	; 81
    de9c:	ff e6       	ldi	r31, 0x6F	; 111
    de9e:	0c 94 19 e7 	jmp	0x1ce32	; 0x1ce32 <__prologue_saves__+0x18>
    dea2:	7c 01       	movw	r14, r24
    int rc;

    char buff[MAX_NAME_LEN+1];

    Stat = 0;
    dea4:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <Stat>
	clear_error();
    dea8:	0e 94 2b 27 	call	0x4e56	; 0x4e56 <clear_error>

	// Card Detect
	GPIO_PIN_LATCH_LOW(GPIO_C7);
    deac:	47 98       	cbi	0x08, 7	; 8
	GPIO_PIN_DIR_IN(GPIO_C7);
    deae:	3f 98       	cbi	0x07, 7	; 7

    mmc_spi_init();
    deb0:	79 df       	rcall	.-270    	; 0xdda4 <mmc_spi_init>

    if( verbose)
    deb2:	e1 14       	cp	r14, r1
    deb4:	f1 04       	cpc	r15, r1
    deb6:	51 f0       	breq	.+20     	; 0xdecc <mmc_init+0x36>
    {
        printf("START MMC INIT\n");
    deb8:	8a e0       	ldi	r24, 0x0A	; 10
    deba:	98 e0       	ldi	r25, 0x08	; 8
    debc:	a0 e0       	ldi	r26, 0x00	; 0
    debe:	ed b7       	in	r30, 0x3d	; 61
    dec0:	fe b7       	in	r31, 0x3e	; 62
    dec2:	81 83       	std	Z+1, r24	; 0x01
    dec4:	92 83       	std	Z+2, r25	; 0x02
    dec6:	a3 83       	std	Z+3, r26	; 0x03
    dec8:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    }
// we only install timers once!
    if(!mmc_init_flag)
    decc:	80 91 26 18 	lds	r24, 0x1826	; 0x801826 <mmc_init_flag>
    ded0:	90 91 27 18 	lds	r25, 0x1827	; 0x801827 <mmc_init_flag+0x1>
    ded4:	89 2b       	or	r24, r25
        mmc_install_timer();
    ded6:	09 f4       	brne	.+2      	; 0xdeda <mmc_init+0x44>

	if(!mmc_ins_status())
    ded8:	2b df       	rcall	.-426    	; 0xdd30 <mmc_install_timer>
    deda:	ac df       	rcall	.-168    	; 0xde34 <mmc_ins_status>
    dedc:	89 2b       	or	r24, r25
    dede:	61 f4       	brne	.+24     	; 0xdef8 <mmc_init+0x62>
	{
		printf("*** MMC Card NOT Inserted! ***\n");
    dee0:	8a ee       	ldi	r24, 0xEA	; 234
    dee2:	97 e0       	ldi	r25, 0x07	; 7
    dee4:	a0 e0       	ldi	r26, 0x00	; 0
    dee6:	ed b7       	in	r30, 0x3d	; 61
    dee8:	fe b7       	in	r31, 0x3e	; 62
    deea:	81 83       	std	Z+1, r24	; 0x01
    deec:	92 83       	std	Z+2, r25	; 0x02
    deee:	a3 83       	std	Z+3, r26	; 0x03
    def0:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
		return(RES_NOTRDY);	
    def4:	83 e0       	ldi	r24, 0x03	; 3
    def6:	9a c0       	rjmp	.+308    	; 0xe02c <mmc_init+0x196>
	}


    if( verbose)
    def8:	e1 14       	cp	r14, r1
    defa:	f1 04       	cpc	r15, r1
    defc:	11 f1       	breq	.+68     	; 0xdf42 <mmc_init+0xac>
    {
		printf("MMC Card Inserted\n");
    defe:	87 ed       	ldi	r24, 0xD7	; 215
    df00:	97 e0       	ldi	r25, 0x07	; 7
    df02:	a0 e0       	ldi	r26, 0x00	; 0
    df04:	ed b7       	in	r30, 0x3d	; 61
    df06:	fe b7       	in	r31, 0x3e	; 62
    df08:	81 83       	std	Z+1, r24	; 0x01
    df0a:	92 83       	std	Z+2, r25	; 0x02
    df0c:	a3 83       	std	Z+3, r26	; 0x03
    df0e:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>

#if defined (FF_USE_LFN)
        printf("LFN Enabled");
    df12:	8b ec       	ldi	r24, 0xCB	; 203
    df14:	97 e0       	ldi	r25, 0x07	; 7
    df16:	a0 e0       	ldi	r26, 0x00	; 0
    df18:	ed b7       	in	r30, 0x3d	; 61
    df1a:	fe b7       	in	r31, 0x3e	; 62
    df1c:	81 83       	std	Z+1, r24	; 0x01
    df1e:	92 83       	std	Z+2, r25	; 0x02
    df20:	a3 83       	std	Z+3, r26	; 0x03
    df22:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
#else
        printf("LFN Disabled");
#endif
        printf(", Code page: %u\n", FF_CODE_PAGE);
    df26:	85 eb       	ldi	r24, 0xB5	; 181
    df28:	91 e0       	ldi	r25, 0x01	; 1
    df2a:	ed b7       	in	r30, 0x3d	; 61
    df2c:	fe b7       	in	r31, 0x3e	; 62
    df2e:	95 83       	std	Z+5, r25	; 0x05
    df30:	84 83       	std	Z+4, r24	; 0x04
    df32:	8a eb       	ldi	r24, 0xBA	; 186
    df34:	97 e0       	ldi	r25, 0x07	; 7
    df36:	a0 e0       	ldi	r26, 0x00	; 0
    df38:	81 83       	std	Z+1, r24	; 0x01
    df3a:	92 83       	std	Z+2, r25	; 0x02
    df3c:	a3 83       	std	Z+3, r26	; 0x03
    df3e:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    }

    rc = disk_initialize(DEV_MMC);                // aliased to mmc_disk_initialize()
    df42:	80 e0       	ldi	r24, 0x00	; 0
    df44:	1d da       	rcall	.-3014   	; 0xd380 <disk_initialize>
    df46:	08 2f       	mov	r16, r24
    df48:	10 e0       	ldi	r17, 0x00	; 0

    if( rc != RES_OK  )
    df4a:	01 15       	cp	r16, r1
    df4c:	11 05       	cpc	r17, r1
        put_rc(rc);
    df4e:	19 f0       	breq	.+6      	; 0xdf56 <mmc_init+0xc0>
    df50:	c8 01       	movw	r24, r16
    df52:	f4 d0       	rcall	.+488    	; 0xe13c <put_rc>
    df54:	0e c0       	rjmp	.+28     	; 0xdf72 <mmc_init+0xdc>

    if( rc == RES_OK)
        rc = f_mount(&Fatfs[0],"/", 0);
    df56:	40 e0       	ldi	r20, 0x00	; 0
    df58:	66 ea       	ldi	r22, 0xA6	; 166
    df5a:	78 e0       	ldi	r23, 0x08	; 8
    df5c:	80 e8       	ldi	r24, 0x80	; 128
    df5e:	9a e1       	ldi	r25, 0x1A	; 26
    df60:	0e 94 98 59 	call	0xb330	; 0xb330 <f_mount>
    df64:	8c 01       	movw	r16, r24

    if( rc != RES_OK || verbose)
    df66:	89 2b       	or	r24, r25
    df68:	21 f4       	brne	.+8      	; 0xdf72 <mmc_init+0xdc>
    df6a:	e1 14       	cp	r14, r1
    df6c:	f1 04       	cpc	r15, r1
    df6e:	09 f4       	brne	.+2      	; 0xdf72 <mmc_init+0xdc>
        put_rc( rc );
    df70:	4f c0       	rjmp	.+158    	; 0xe010 <mmc_init+0x17a>
    df72:	c8 01       	movw	r24, r16
    df74:	e3 d0       	rcall	.+454    	; 0xe13c <put_rc>

    if (verbose )
    df76:	e1 14       	cp	r14, r1
    df78:	f1 04       	cpc	r15, r1
    df7a:	09 f4       	brne	.+2      	; 0xdf7e <mmc_init+0xe8>
    df7c:	49 c0       	rjmp	.+146    	; 0xe010 <mmc_init+0x17a>
    {
        DWORD blksize = 0;
    df7e:	c7 5f       	subi	r28, 0xF7	; 247
    df80:	de 4f       	sbci	r29, 0xFE	; 254
    df82:	18 82       	st	Y, r1
    df84:	19 82       	std	Y+1, r1	; 0x01
    df86:	1a 82       	std	Y+2, r1	; 0x02
    df88:	1b 82       	std	Y+3, r1	; 0x03
    df8a:	c9 50       	subi	r28, 0x09	; 9
    df8c:	d1 40       	sbci	r29, 0x01	; 1
        if(rc == RES_OK)
    df8e:	01 15       	cp	r16, r1
    df90:	11 05       	cpc	r17, r1
        {
            rc = disk_ioctl ( DEV_MMC, GET_BLOCK_SIZE, (void *) &blksize);
    df92:	a1 f5       	brne	.+104    	; 0xdffc <mmc_init+0x166>
    df94:	ae 01       	movw	r20, r28
    df96:	47 5f       	subi	r20, 0xF7	; 247
    df98:	5e 4f       	sbci	r21, 0xFE	; 254
    df9a:	63 e0       	ldi	r22, 0x03	; 3
    df9c:	80 e0       	ldi	r24, 0x00	; 0
    df9e:	16 da       	rcall	.-3028   	; 0xd3cc <disk_ioctl>
            if( rc != RES_OK)
    dfa0:	8c 01       	movw	r16, r24
    dfa2:	00 97       	sbiw	r24, 0x00	; 0
            {
                put_rc( rc );
    dfa4:	61 f0       	breq	.+24     	; 0xdfbe <mmc_init+0x128>
    dfa6:	ca d0       	rcall	.+404    	; 0xe13c <put_rc>
                printf("MMC Block Size - read failed\n");
    dfa8:	8c e9       	ldi	r24, 0x9C	; 156
    dfaa:	97 e0       	ldi	r25, 0x07	; 7
    dfac:	a0 e0       	ldi	r26, 0x00	; 0
    dfae:	ed b7       	in	r30, 0x3d	; 61
    dfb0:	fe b7       	in	r31, 0x3e	; 62
    dfb2:	81 83       	std	Z+1, r24	; 0x01
    dfb4:	92 83       	std	Z+2, r25	; 0x02
    dfb6:	a3 83       	std	Z+3, r26	; 0x03
    dfb8:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    dfbc:	1f c0       	rjmp	.+62     	; 0xdffc <mmc_init+0x166>
            }
            else
            {
                printf("MMC Block Size: %ld\n", blksize);
    dfbe:	c7 5f       	subi	r28, 0xF7	; 247
    dfc0:	de 4f       	sbci	r29, 0xFE	; 254
    dfc2:	88 81       	ld	r24, Y
    dfc4:	99 81       	ldd	r25, Y+1	; 0x01
    dfc6:	aa 81       	ldd	r26, Y+2	; 0x02
    dfc8:	bb 81       	ldd	r27, Y+3	; 0x03
    dfca:	c9 50       	subi	r28, 0x09	; 9
    dfcc:	d1 40       	sbci	r29, 0x01	; 1
    dfce:	ed b7       	in	r30, 0x3d	; 61
    dfd0:	fe b7       	in	r31, 0x3e	; 62
    dfd2:	84 83       	std	Z+4, r24	; 0x04
    dfd4:	95 83       	std	Z+5, r25	; 0x05
    dfd6:	a6 83       	std	Z+6, r26	; 0x06
    dfd8:	b7 83       	std	Z+7, r27	; 0x07
    dfda:	87 e8       	ldi	r24, 0x87	; 135
    dfdc:	97 e0       	ldi	r25, 0x07	; 7
    dfde:	a0 e0       	ldi	r26, 0x00	; 0
    dfe0:	81 83       	std	Z+1, r24	; 0x01
    dfe2:	92 83       	std	Z+2, r25	; 0x02
    dfe4:	a3 83       	std	Z+3, r26	; 0x03
    dfe6:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
            }
            if( rc == RES_OK)
            {
                strcpy(buff,"/");
    dfea:	66 ea       	ldi	r22, 0xA6	; 166
    dfec:	78 e0       	ldi	r23, 0x08	; 8
    dfee:	ce 01       	movw	r24, r28
    dff0:	08 96       	adiw	r24, 0x08	; 8
    dff2:	0e 94 6d 31 	call	0x62da	; 0x62da <strcpy>
                fatfs_status(buff);
    dff6:	ce 01       	movw	r24, r28
    dff8:	08 96       	adiw	r24, 0x08	; 8
    dffa:	34 d1       	rcall	.+616    	; 0xe264 <fatfs_status>
            }
        }
        printf("END MMC INIT\n");
    dffc:	89 e7       	ldi	r24, 0x79	; 121
    dffe:	97 e0       	ldi	r25, 0x07	; 7
    e000:	a0 e0       	ldi	r26, 0x00	; 0
    e002:	ed b7       	in	r30, 0x3d	; 61
    e004:	fe b7       	in	r31, 0x3e	; 62
    e006:	81 83       	std	Z+1, r24	; 0x01
    e008:	92 83       	std	Z+2, r25	; 0x02
    e00a:	a3 83       	std	Z+3, r26	; 0x03
    e00c:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    }
    mmc_init_flag = 1;
    e010:	81 e0       	ldi	r24, 0x01	; 1
    e012:	90 e0       	ldi	r25, 0x00	; 0
    e014:	90 93 27 18 	sts	0x1827, r25	; 0x801827 <mmc_init_flag+0x1>
    e018:	80 93 26 18 	sts	0x1826, r24	; 0x801826 <mmc_init_flag>

	if(rc != RES_OK)
    e01c:	01 15       	cp	r16, r1
    e01e:	11 05       	cpc	r17, r1
    e020:	21 f0       	breq	.+8      	; 0xe02a <mmc_init+0x194>
		set_error(1);
    e022:	0e 94 26 27 	call	0x4e4c	; 0x4e4c <set_error>
    e026:	c8 01       	movw	r24, r16
    e028:	02 c0       	rjmp	.+4      	; 0xe02e <mmc_init+0x198>
    e02a:	80 e0       	ldi	r24, 0x00	; 0
    e02c:	90 e0       	ldi	r25, 0x00	; 0

    return( rc ) ;
}
    e02e:	c4 5f       	subi	r28, 0xF4	; 244
    e030:	de 4f       	sbci	r29, 0xFE	; 254
    e032:	e6 e0       	ldi	r30, 0x06	; 6
    e034:	0c 94 35 e7 	jmp	0x1ce6a	; 0x1ce6a <__epilogue_restores__+0x18>

0000e038 <mmc_wp_status>:

MEMSPACE
int mmc_wp_status()
{
    return (0);
}
    e038:	80 e0       	ldi	r24, 0x00	; 0
    e03a:	90 e0       	ldi	r25, 0x00	; 0
    e03c:	08 95       	ret

0000e03e <tm_to_fat>:
/// @param[in] t: POSIX struct tm * to convert.
///
/// @return  FAT32 time.
MEMSPACE
uint32_t tm_to_fat(tm_t *t)
{
    e03e:	0f 93       	push	r16
    e040:	1f 93       	push	r17
    e042:	fc 01       	movw	r30, r24
        | (((uint32_t)t->tm_mon+1) << 21)
        | (((uint32_t)t->tm_mday) << 16)
        | ((uint32_t)t->tm_hour << 11)
        | ((uint32_t)t->tm_min << 5)
        | ((uint32_t)t->tm_sec >> 1);
    return(fat);
    e044:	46 81       	ldd	r20, Z+6	; 0x06
    e046:	57 81       	ldd	r21, Z+7	; 0x07
    e048:	05 2e       	mov	r0, r21
    e04a:	00 0c       	add	r0, r0
    e04c:	66 0b       	sbc	r22, r22
    e04e:	77 0b       	sbc	r23, r23
    e050:	ba 01       	movw	r22, r20
    e052:	55 27       	eor	r21, r21
    e054:	44 27       	eor	r20, r20
    e056:	84 81       	ldd	r24, Z+4	; 0x04
    e058:	95 81       	ldd	r25, Z+5	; 0x05
    e05a:	09 2e       	mov	r0, r25
    e05c:	00 0c       	add	r0, r0
    e05e:	aa 0b       	sbc	r26, r26
    e060:	bb 0b       	sbc	r27, r27
    e062:	2b e0       	ldi	r18, 0x0B	; 11
    e064:	88 0f       	add	r24, r24
    e066:	99 1f       	adc	r25, r25
    e068:	aa 1f       	adc	r26, r26
    e06a:	bb 1f       	adc	r27, r27
    e06c:	2a 95       	dec	r18
    e06e:	d1 f7       	brne	.-12     	; 0xe064 <tm_to_fat+0x26>
    e070:	48 2b       	or	r20, r24
    e072:	59 2b       	or	r21, r25
    e074:	6a 2b       	or	r22, r26
    e076:	7b 2b       	or	r23, r27
    e078:	82 81       	ldd	r24, Z+2	; 0x02
    e07a:	93 81       	ldd	r25, Z+3	; 0x03
    e07c:	09 2e       	mov	r0, r25
    e07e:	00 0c       	add	r0, r0
    e080:	aa 0b       	sbc	r26, r26
    e082:	bb 0b       	sbc	r27, r27
    e084:	35 e0       	ldi	r19, 0x05	; 5
    e086:	88 0f       	add	r24, r24
    e088:	99 1f       	adc	r25, r25
    e08a:	aa 1f       	adc	r26, r26
    e08c:	bb 1f       	adc	r27, r27
    e08e:	3a 95       	dec	r19
    e090:	d1 f7       	brne	.-12     	; 0xe086 <tm_to_fat+0x48>
    e092:	48 2b       	or	r20, r24
    e094:	59 2b       	or	r21, r25
    e096:	6a 2b       	or	r22, r26
    e098:	7b 2b       	or	r23, r27
    e09a:	80 81       	ld	r24, Z
    e09c:	91 81       	ldd	r25, Z+1	; 0x01
    e09e:	09 2e       	mov	r0, r25
    e0a0:	00 0c       	add	r0, r0
    e0a2:	aa 0b       	sbc	r26, r26
    e0a4:	bb 0b       	sbc	r27, r27
    e0a6:	b6 95       	lsr	r27
    e0a8:	a7 95       	ror	r26
    e0aa:	97 95       	ror	r25
    e0ac:	87 95       	ror	r24
    e0ae:	84 2b       	or	r24, r20
    e0b0:	95 2b       	or	r25, r21
    e0b2:	a6 2b       	or	r26, r22
    e0b4:	b7 2b       	or	r27, r23
    e0b6:	02 85       	ldd	r16, Z+10	; 0x0a
    e0b8:	13 85       	ldd	r17, Z+11	; 0x0b
    e0ba:	00 55       	subi	r16, 0x50	; 80
    e0bc:	11 09       	sbc	r17, r1
    e0be:	01 2e       	mov	r0, r17
    e0c0:	00 0c       	add	r0, r0
    e0c2:	22 0b       	sbc	r18, r18
    e0c4:	33 0b       	sbc	r19, r19
    e0c6:	49 e1       	ldi	r20, 0x19	; 25
    e0c8:	00 0f       	add	r16, r16
    e0ca:	11 1f       	adc	r17, r17
    e0cc:	22 1f       	adc	r18, r18
    e0ce:	33 1f       	adc	r19, r19
    e0d0:	4a 95       	dec	r20
    e0d2:	d1 f7       	brne	.-12     	; 0xe0c8 <tm_to_fat+0x8a>
    e0d4:	ac 01       	movw	r20, r24
    e0d6:	bd 01       	movw	r22, r26
    e0d8:	40 2b       	or	r20, r16
    e0da:	51 2b       	or	r21, r17
    e0dc:	62 2b       	or	r22, r18
    e0de:	73 2b       	or	r23, r19
    e0e0:	80 85       	ldd	r24, Z+8	; 0x08
    e0e2:	91 85       	ldd	r25, Z+9	; 0x09
    e0e4:	09 2e       	mov	r0, r25
    e0e6:	00 0c       	add	r0, r0
    e0e8:	aa 0b       	sbc	r26, r26
    e0ea:	bb 0b       	sbc	r27, r27
    e0ec:	01 96       	adiw	r24, 0x01	; 1
    e0ee:	a1 1d       	adc	r26, r1
    e0f0:	b1 1d       	adc	r27, r1
    e0f2:	e5 e1       	ldi	r30, 0x15	; 21
    e0f4:	88 0f       	add	r24, r24
    e0f6:	99 1f       	adc	r25, r25
    e0f8:	aa 1f       	adc	r26, r26
    e0fa:	bb 1f       	adc	r27, r27
    e0fc:	ea 95       	dec	r30
    e0fe:	d1 f7       	brne	.-12     	; 0xe0f4 <tm_to_fat+0xb6>
    e100:	8a 01       	movw	r16, r20
    e102:	9b 01       	movw	r18, r22
    e104:	08 2b       	or	r16, r24
    e106:	19 2b       	or	r17, r25
    e108:	2a 2b       	or	r18, r26
    e10a:	3b 2b       	or	r19, r27
    e10c:	c9 01       	movw	r24, r18
    e10e:	b8 01       	movw	r22, r16
}
    e110:	1f 91       	pop	r17
    e112:	0f 91       	pop	r16
    e114:	08 95       	ret

0000e116 <get_fattime>:
///
/// @return FAT32 time.
/// @see tm_to_fat().
MEMSPACE
DWORD get_fattime (void)
{
    e116:	a4 e0       	ldi	r26, 0x04	; 4
    e118:	b0 e0       	ldi	r27, 0x00	; 0
    e11a:	e1 e9       	ldi	r30, 0x91	; 145
    e11c:	f0 e7       	ldi	r31, 0x70	; 112
    e11e:	0c 94 1d e7 	jmp	0x1ce3a	; 0x1ce3a <__prologue_saves__+0x20>
    time_t t;
/* Get GMT time */
    time(&t);
    e122:	ce 01       	movw	r24, r28
    e124:	01 96       	adiw	r24, 0x01	; 1
    e126:	0e 94 2e 38 	call	0x705c	; 0x705c <time>
    return( tm_to_fat(localtime(&t)));
    e12a:	ce 01       	movw	r24, r28
    e12c:	01 96       	adiw	r24, 0x01	; 1
    e12e:	0e 94 c7 38 	call	0x718e	; 0x718e <localtime>
    e132:	85 df       	rcall	.-246    	; 0xe03e <tm_to_fat>
}
    e134:	24 96       	adiw	r28, 0x04	; 4
    e136:	e2 e0       	ldi	r30, 0x02	; 2
    e138:	0c 94 39 e7 	jmp	0x1ce72	; 0x1ce72 <__epilogue_restores__+0x20>

0000e13c <put_rc>:
/// @param[in] rc: FatFs status return code
/// @return  void

MEMSPACE
void put_rc (int rc)
{
    e13c:	00 d0       	rcall	.+0      	; 0xe13e <put_rc+0x2>
    e13e:	00 d0       	rcall	.+0      	; 0xe140 <put_rc+0x4>
    e140:	1f 92       	push	r1
        ptr = "INVALID ERROR MESSAGE";
    else
        ptr = (char *) err_msg[(int)rc];
    printf("rc=%u FR_%s\n", rc, ptr);
#else
    printf("rc=%u\n", rc);
    e142:	ed b7       	in	r30, 0x3d	; 61
    e144:	fe b7       	in	r31, 0x3e	; 62
    e146:	95 83       	std	Z+5, r25	; 0x05
    e148:	84 83       	std	Z+4, r24	; 0x04
    e14a:	8c e9       	ldi	r24, 0x9C	; 156
    e14c:	9a e0       	ldi	r25, 0x0A	; 10
    e14e:	a0 e0       	ldi	r26, 0x00	; 0
    e150:	81 83       	std	Z+1, r24	; 0x01
    e152:	92 83       	std	Z+2, r25	; 0x02
    e154:	a3 83       	std	Z+3, r26	; 0x03
    e156:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
#endif
}
    e15a:	0f 90       	pop	r0
    e15c:	0f 90       	pop	r0
    e15e:	0f 90       	pop	r0
    e160:	0f 90       	pop	r0
    e162:	0f 90       	pop	r0
    e164:	08 95       	ret

0000e166 <fatfs_scan_files>:

MEMSPACE
int fatfs_scan_files (
char* path                                        /* Pointer to the working buffer with start path */
)
{
    e166:	a4 e4       	ldi	r26, 0x44	; 68
    e168:	b1 e0       	ldi	r27, 0x01	; 1
    e16a:	e9 eb       	ldi	r30, 0xB9	; 185
    e16c:	f0 e7       	ldi	r31, 0x70	; 112
    e16e:	0c 94 18 e7 	jmp	0x1ce30	; 0x1ce30 <__prologue_saves__+0x16>
    e172:	8c 01       	movw	r16, r24
    DIR dirs;
    FRESULT fr;
    int i;
    FILINFO info;

    fr = f_opendir(&dirs, path);
    e174:	bc 01       	movw	r22, r24
    e176:	ce 01       	movw	r24, r28
    e178:	89 5e       	subi	r24, 0xE9	; 233
    e17a:	9e 4f       	sbci	r25, 0xFE	; 254
    e17c:	0e 94 53 63 	call	0xc6a6	; 0xc6a6 <f_opendir>
    if (fr == FR_OK)
    e180:	00 97       	sbiw	r24, 0x00	; 0
    e182:	09 f0       	breq	.+2      	; 0xe186 <fatfs_scan_files+0x20>
    e184:	5b c0       	rjmp	.+182    	; 0xe23c <fatfs_scan_files+0xd6>
        {
            if (info.fattrib & AM_DIR)
            {
                AccDirs++;
                i = strlen(path);
                path[i] = '/'; strcpy(path+i+1, info.fname);
    e186:	8f e2       	ldi	r24, 0x2F	; 47
    e188:	d8 2e       	mov	r13, r24
    FILINFO info;

    fr = f_opendir(&dirs, path);
    if (fr == FR_OK)
    {
        while (((fr = f_readdir(&dirs, &info)) == FR_OK) && info.fname[0])
    e18a:	be 01       	movw	r22, r28
    e18c:	6f 5f       	subi	r22, 0xFF	; 255
    e18e:	7f 4f       	sbci	r23, 0xFF	; 255
    e190:	ce 01       	movw	r24, r28
    e192:	89 5e       	subi	r24, 0xE9	; 233
    e194:	9e 4f       	sbci	r25, 0xFE	; 254
    e196:	0e 94 d9 63 	call	0xc7b2	; 0xc7b2 <f_readdir>
    e19a:	00 97       	sbiw	r24, 0x00	; 0
    e19c:	09 f0       	breq	.+2      	; 0xe1a0 <fatfs_scan_files+0x3a>
    e19e:	4e c0       	rjmp	.+156    	; 0xe23c <fatfs_scan_files+0xd6>
    e1a0:	2f 89       	ldd	r18, Y+23	; 0x17
    e1a2:	22 23       	and	r18, r18
    e1a4:	09 f4       	brne	.+2      	; 0xe1a8 <fatfs_scan_files+0x42>
    e1a6:	4a c0       	rjmp	.+148    	; 0xe23c <fatfs_scan_files+0xd6>
        {
            if (info.fattrib & AM_DIR)
    e1a8:	89 85       	ldd	r24, Y+9	; 0x09
    e1aa:	84 ff       	sbrs	r24, 4
    e1ac:	25 c0       	rjmp	.+74     	; 0xe1f8 <fatfs_scan_files+0x92>
            {
                AccDirs++;
    e1ae:	80 91 b9 1c 	lds	r24, 0x1CB9	; 0x801cb9 <AccDirs>
    e1b2:	90 91 ba 1c 	lds	r25, 0x1CBA	; 0x801cba <AccDirs+0x1>
    e1b6:	01 96       	adiw	r24, 0x01	; 1
    e1b8:	90 93 ba 1c 	sts	0x1CBA, r25	; 0x801cba <AccDirs+0x1>
    e1bc:	80 93 b9 1c 	sts	0x1CB9, r24	; 0x801cb9 <AccDirs>
                i = strlen(path);
    e1c0:	f8 01       	movw	r30, r16
    e1c2:	01 90       	ld	r0, Z+
    e1c4:	00 20       	and	r0, r0
    e1c6:	e9 f7       	brne	.-6      	; 0xe1c2 <fatfs_scan_files+0x5c>
    e1c8:	31 97       	sbiw	r30, 0x01	; 1
    e1ca:	e0 1b       	sub	r30, r16
    e1cc:	f1 0b       	sbc	r31, r17
                path[i] = '/'; strcpy(path+i+1, info.fname);
    e1ce:	78 01       	movw	r14, r16
    e1d0:	ee 0e       	add	r14, r30
    e1d2:	ff 1e       	adc	r15, r31
    e1d4:	d7 01       	movw	r26, r14
    e1d6:	dc 92       	st	X, r13
    e1d8:	cf 01       	movw	r24, r30
    e1da:	01 96       	adiw	r24, 0x01	; 1
    e1dc:	be 01       	movw	r22, r28
    e1de:	69 5e       	subi	r22, 0xE9	; 233
    e1e0:	7f 4f       	sbci	r23, 0xFF	; 255
    e1e2:	80 0f       	add	r24, r16
    e1e4:	91 1f       	adc	r25, r17
    e1e6:	0e 94 6d 31 	call	0x62da	; 0x62da <strcpy>
                fr = fatfs_scan_files(path);
    e1ea:	c8 01       	movw	r24, r16
    e1ec:	bc df       	rcall	.-136    	; 0xe166 <fatfs_scan_files>
                path[i] = 0;
    e1ee:	f7 01       	movw	r30, r14
    e1f0:	10 82       	st	Z, r1
                if (fr != FR_OK) break;
    e1f2:	00 97       	sbiw	r24, 0x00	; 0
    e1f4:	51 f2       	breq	.-108    	; 0xe18a <fatfs_scan_files+0x24>
    e1f6:	22 c0       	rjmp	.+68     	; 0xe23c <fatfs_scan_files+0xd6>
            }
            else
            {
//              xprintf(PSTR("%s/%s\n"), path, info.fname);
                AccFiles++;
    e1f8:	80 91 bb 1c 	lds	r24, 0x1CBB	; 0x801cbb <AccFiles>
    e1fc:	90 91 bc 1c 	lds	r25, 0x1CBC	; 0x801cbc <AccFiles+0x1>
    e200:	01 96       	adiw	r24, 0x01	; 1
    e202:	90 93 bc 1c 	sts	0x1CBC, r25	; 0x801cbc <AccFiles+0x1>
    e206:	80 93 bb 1c 	sts	0x1CBB, r24	; 0x801cbb <AccFiles>
                AccSize += info.fsize;
    e20a:	40 91 b5 1c 	lds	r20, 0x1CB5	; 0x801cb5 <AccSize>
    e20e:	50 91 b6 1c 	lds	r21, 0x1CB6	; 0x801cb6 <AccSize+0x1>
    e212:	60 91 b7 1c 	lds	r22, 0x1CB7	; 0x801cb7 <AccSize+0x2>
    e216:	70 91 b8 1c 	lds	r23, 0x1CB8	; 0x801cb8 <AccSize+0x3>
    e21a:	89 81       	ldd	r24, Y+1	; 0x01
    e21c:	9a 81       	ldd	r25, Y+2	; 0x02
    e21e:	ab 81       	ldd	r26, Y+3	; 0x03
    e220:	bc 81       	ldd	r27, Y+4	; 0x04
    e222:	84 0f       	add	r24, r20
    e224:	95 1f       	adc	r25, r21
    e226:	a6 1f       	adc	r26, r22
    e228:	b7 1f       	adc	r27, r23
    e22a:	80 93 b5 1c 	sts	0x1CB5, r24	; 0x801cb5 <AccSize>
    e22e:	90 93 b6 1c 	sts	0x1CB6, r25	; 0x801cb6 <AccSize+0x1>
    e232:	a0 93 b7 1c 	sts	0x1CB7, r26	; 0x801cb7 <AccSize+0x2>
    e236:	b0 93 b8 1c 	sts	0x1CB8, r27	; 0x801cb8 <AccSize+0x3>
    e23a:	a7 cf       	rjmp	.-178    	; 0xe18a <fatfs_scan_files+0x24>
#endif
        }
    }

    return fr;
}
    e23c:	cc 5b       	subi	r28, 0xBC	; 188
    e23e:	de 4f       	sbci	r29, 0xFE	; 254
    e240:	e7 e0       	ldi	r30, 0x07	; 7
    e242:	0c 94 34 e7 	jmp	0x1ce68	; 0x1ce68 <__epilogue_restores__+0x16>

0000e246 <fatfs_fstype>:
/// @brief  return a string with the file system type
/// @param[in] type: file system type
/// @return string with file system type
MEMSPACE
char *fatfs_fstype(int type)
{
    e246:	01 97       	sbiw	r24, 0x01	; 1
    e248:	84 30       	cpi	r24, 0x04	; 4
    e24a:	91 05       	cpc	r25, r1
    e24c:	40 f4       	brcc	.+16     	; 0xe25e <fatfs_fstype+0x18>
    e24e:	88 0f       	add	r24, r24
    e250:	99 1f       	adc	r25, r25
    e252:	fc 01       	movw	r30, r24
    e254:	e6 53       	subi	r30, 0x36	; 54
    e256:	f7 4f       	sbci	r31, 0xF7	; 247
    e258:	80 81       	ld	r24, Z
    e25a:	91 81       	ldd	r25, Z+1	; 0x01
    e25c:	08 95       	ret
    char *ptr;
    switch(type)
    e25e:	88 ea       	ldi	r24, 0xA8	; 168
    e260:	98 e0       	ldi	r25, 0x08	; 8
        default:
            ptr = "UNKNOWN";
            break;
    }
    return(ptr);
}
    e262:	08 95       	ret

0000e264 <fatfs_status>:
/// @see AccFiles: Total number of Files
/// @see AccSize:  Total size of all files
/// @return  1 on success 0 on error
MEMSPACE
int fatfs_status(char *ptr)
{
    e264:	a7 e3       	ldi	r26, 0x37	; 55
    e266:	b0 e0       	ldi	r27, 0x00	; 0
    e268:	e8 e3       	ldi	r30, 0x38	; 56
    e26a:	f1 e7       	ldi	r31, 0x71	; 113
    e26c:	0c 94 17 e7 	jmp	0x1ce2e	; 0x1ce2e <__prologue_saves__+0x14>
    e270:	7c 01       	movw	r14, r24
    int res;
    FATFS *fs;
    char label[24+2];
    DWORD vsn;                                    // volume serial number

    while(*ptr == ' ' || *ptr == '\t')
    e272:	fc 01       	movw	r30, r24
    e274:	21 91       	ld	r18, Z+
    e276:	cf 01       	movw	r24, r30
    e278:	20 32       	cpi	r18, 0x20	; 32
    e27a:	d1 f3       	breq	.-12     	; 0xe270 <fatfs_status+0xc>
    e27c:	29 30       	cpi	r18, 0x09	; 9
    e27e:	c1 f3       	breq	.-16     	; 0xe270 <fatfs_status+0xc>
        ++ptr;

    printf("fatfs status:%s\n",ptr);
    e280:	ed b7       	in	r30, 0x3d	; 61
    e282:	fe b7       	in	r31, 0x3e	; 62
    e284:	e4 82       	std	Z+4, r14	; 0x04
    e286:	f5 82       	std	Z+5, r15	; 0x05
    e288:	8b e8       	ldi	r24, 0x8B	; 139
    e28a:	9a e0       	ldi	r25, 0x0A	; 10
    e28c:	a0 e0       	ldi	r26, 0x00	; 0
    e28e:	81 83       	std	Z+1, r24	; 0x01
    e290:	92 83       	std	Z+2, r25	; 0x02
    e292:	a3 83       	std	Z+3, r26	; 0x03
    e294:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    res = f_getfree(ptr, (DWORD*)&p2, &fs);
    e298:	ae 01       	movw	r20, r28
    e29a:	4a 5c       	subi	r20, 0xCA	; 202
    e29c:	5f 4f       	sbci	r21, 0xFF	; 255
    e29e:	be 01       	movw	r22, r28
    e2a0:	6e 5c       	subi	r22, 0xCE	; 206
    e2a2:	7f 4f       	sbci	r23, 0xFF	; 255
    e2a4:	c7 01       	movw	r24, r14
    e2a6:	0e 94 5b 64 	call	0xc8b6	; 0xc8b6 <f_getfree>
    if (res)
    e2aa:	89 2b       	or	r24, r25
    e2ac:	19 f0       	breq	.+6      	; 0xe2b4 <fatfs_status+0x50>
    {
        printf("fatfs_status f_getfree failed\n");
    e2ae:	8c e6       	ldi	r24, 0x6C	; 108
    e2b0:	9a e0       	ldi	r25, 0x0A	; 10
    e2b2:	c0 c0       	rjmp	.+384    	; 0xe434 <fatfs_status+0x1d0>
        return(0);
    }
    printf("FAT type                = %s\n",  fatfs_fstype(fs->fs_type));
    e2b4:	ee a9       	ldd	r30, Y+54	; 0x36
    e2b6:	ff a9       	ldd	r31, Y+55	; 0x37
    e2b8:	80 81       	ld	r24, Z
    e2ba:	90 e0       	ldi	r25, 0x00	; 0
    e2bc:	c4 df       	rcall	.-120    	; 0xe246 <fatfs_fstype>
    e2be:	ed b7       	in	r30, 0x3d	; 61
    e2c0:	fe b7       	in	r31, 0x3e	; 62
    e2c2:	95 83       	std	Z+5, r25	; 0x05
    e2c4:	84 83       	std	Z+4, r24	; 0x04
    e2c6:	8e e4       	ldi	r24, 0x4E	; 78
    e2c8:	9a e0       	ldi	r25, 0x0A	; 10
    e2ca:	a0 e0       	ldi	r26, 0x00	; 0
    e2cc:	81 83       	std	Z+1, r24	; 0x01
    e2ce:	92 83       	std	Z+2, r25	; 0x02
    e2d0:	a3 83       	std	Z+3, r26	; 0x03
    e2d2:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    printf("Bytes/Cluster           = %lu\n", (DWORD)fs->csize * 512);
    e2d6:	ee a9       	ldd	r30, Y+54	; 0x36
    e2d8:	ff a9       	ldd	r31, Y+55	; 0x37
    e2da:	81 85       	ldd	r24, Z+9	; 0x09
    e2dc:	92 85       	ldd	r25, Z+10	; 0x0a
    e2de:	a0 e0       	ldi	r26, 0x00	; 0
    e2e0:	b0 e0       	ldi	r27, 0x00	; 0
    e2e2:	39 e0       	ldi	r19, 0x09	; 9
    e2e4:	88 0f       	add	r24, r24
    e2e6:	99 1f       	adc	r25, r25
    e2e8:	aa 1f       	adc	r26, r26
    e2ea:	bb 1f       	adc	r27, r27
    e2ec:	3a 95       	dec	r19
    e2ee:	d1 f7       	brne	.-12     	; 0xe2e4 <fatfs_status+0x80>
    e2f0:	ed b7       	in	r30, 0x3d	; 61
    e2f2:	fe b7       	in	r31, 0x3e	; 62
    e2f4:	84 83       	std	Z+4, r24	; 0x04
    e2f6:	95 83       	std	Z+5, r25	; 0x05
    e2f8:	a6 83       	std	Z+6, r26	; 0x06
    e2fa:	b7 83       	std	Z+7, r27	; 0x07
    e2fc:	8f e2       	ldi	r24, 0x2F	; 47
    e2fe:	9a e0       	ldi	r25, 0x0A	; 10
    e300:	a0 e0       	ldi	r26, 0x00	; 0
    e302:	81 83       	std	Z+1, r24	; 0x01
    e304:	92 83       	std	Z+2, r25	; 0x02
    e306:	a3 83       	std	Z+3, r26	; 0x03
    e308:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    printf("Number of FATs          = %u\n",  fs->n_fats);
    e30c:	ee a9       	ldd	r30, Y+54	; 0x36
    e30e:	ff a9       	ldd	r31, Y+55	; 0x37
    e310:	82 81       	ldd	r24, Z+2	; 0x02
    e312:	90 e0       	ldi	r25, 0x00	; 0
    e314:	ed b7       	in	r30, 0x3d	; 61
    e316:	fe b7       	in	r31, 0x3e	; 62
    e318:	95 83       	std	Z+5, r25	; 0x05
    e31a:	84 83       	std	Z+4, r24	; 0x04
    e31c:	81 e1       	ldi	r24, 0x11	; 17
    e31e:	9a e0       	ldi	r25, 0x0A	; 10
    e320:	a0 e0       	ldi	r26, 0x00	; 0
    e322:	81 83       	std	Z+1, r24	; 0x01
    e324:	92 83       	std	Z+2, r25	; 0x02
    e326:	a3 83       	std	Z+3, r26	; 0x03
    e328:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    printf("Root DIR entries        = %u\n",  fs->n_rootdir);
    e32c:	ee a9       	ldd	r30, Y+54	; 0x36
    e32e:	ff a9       	ldd	r31, Y+55	; 0x37
    e330:	87 81       	ldd	r24, Z+7	; 0x07
    e332:	90 85       	ldd	r25, Z+8	; 0x08
    e334:	ed b7       	in	r30, 0x3d	; 61
    e336:	fe b7       	in	r31, 0x3e	; 62
    e338:	95 83       	std	Z+5, r25	; 0x05
    e33a:	84 83       	std	Z+4, r24	; 0x04
    e33c:	83 ef       	ldi	r24, 0xF3	; 243
    e33e:	99 e0       	ldi	r25, 0x09	; 9
    e340:	a0 e0       	ldi	r26, 0x00	; 0
    e342:	81 83       	std	Z+1, r24	; 0x01
    e344:	92 83       	std	Z+2, r25	; 0x02
    e346:	a3 83       	std	Z+3, r26	; 0x03
    e348:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    printf("Sectors/FAT             = %lu\n", fs->fsize);
    e34c:	ee a9       	ldd	r30, Y+54	; 0x36
    e34e:	ff a9       	ldd	r31, Y+55	; 0x37
    e350:	85 8d       	ldd	r24, Z+29	; 0x1d
    e352:	96 8d       	ldd	r25, Z+30	; 0x1e
    e354:	a7 8d       	ldd	r26, Z+31	; 0x1f
    e356:	b0 a1       	ldd	r27, Z+32	; 0x20
    e358:	ed b7       	in	r30, 0x3d	; 61
    e35a:	fe b7       	in	r31, 0x3e	; 62
    e35c:	84 83       	std	Z+4, r24	; 0x04
    e35e:	95 83       	std	Z+5, r25	; 0x05
    e360:	a6 83       	std	Z+6, r26	; 0x06
    e362:	b7 83       	std	Z+7, r27	; 0x07
    e364:	84 ed       	ldi	r24, 0xD4	; 212
    e366:	99 e0       	ldi	r25, 0x09	; 9
    e368:	a0 e0       	ldi	r26, 0x00	; 0
    e36a:	81 83       	std	Z+1, r24	; 0x01
    e36c:	92 83       	std	Z+2, r25	; 0x02
    e36e:	a3 83       	std	Z+3, r26	; 0x03
    e370:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    printf("Number of clusters      = %lu\n", fs->n_fatent - 2);
    e374:	ee a9       	ldd	r30, Y+54	; 0x36
    e376:	ff a9       	ldd	r31, Y+55	; 0x37
    e378:	81 8d       	ldd	r24, Z+25	; 0x19
    e37a:	92 8d       	ldd	r25, Z+26	; 0x1a
    e37c:	a3 8d       	ldd	r26, Z+27	; 0x1b
    e37e:	b4 8d       	ldd	r27, Z+28	; 0x1c
    e380:	02 97       	sbiw	r24, 0x02	; 2
    e382:	a1 09       	sbc	r26, r1
    e384:	b1 09       	sbc	r27, r1
    e386:	ed b7       	in	r30, 0x3d	; 61
    e388:	fe b7       	in	r31, 0x3e	; 62
    e38a:	84 83       	std	Z+4, r24	; 0x04
    e38c:	95 83       	std	Z+5, r25	; 0x05
    e38e:	a6 83       	std	Z+6, r26	; 0x06
    e390:	b7 83       	std	Z+7, r27	; 0x07
    e392:	85 eb       	ldi	r24, 0xB5	; 181
    e394:	99 e0       	ldi	r25, 0x09	; 9
    e396:	a0 e0       	ldi	r26, 0x00	; 0
    e398:	81 83       	std	Z+1, r24	; 0x01
    e39a:	92 83       	std	Z+2, r25	; 0x02
    e39c:	a3 83       	std	Z+3, r26	; 0x03
    e39e:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    printf("FAT start (lba)         = %lu\n", fs->fatbase);
    e3a2:	ee a9       	ldd	r30, Y+54	; 0x36
    e3a4:	ff a9       	ldd	r31, Y+55	; 0x37
    e3a6:	85 a1       	ldd	r24, Z+37	; 0x25
    e3a8:	96 a1       	ldd	r25, Z+38	; 0x26
    e3aa:	a7 a1       	ldd	r26, Z+39	; 0x27
    e3ac:	b0 a5       	ldd	r27, Z+40	; 0x28
    e3ae:	ed b7       	in	r30, 0x3d	; 61
    e3b0:	fe b7       	in	r31, 0x3e	; 62
    e3b2:	84 83       	std	Z+4, r24	; 0x04
    e3b4:	95 83       	std	Z+5, r25	; 0x05
    e3b6:	a6 83       	std	Z+6, r26	; 0x06
    e3b8:	b7 83       	std	Z+7, r27	; 0x07
    e3ba:	86 e9       	ldi	r24, 0x96	; 150
    e3bc:	99 e0       	ldi	r25, 0x09	; 9
    e3be:	a0 e0       	ldi	r26, 0x00	; 0
    e3c0:	81 83       	std	Z+1, r24	; 0x01
    e3c2:	92 83       	std	Z+2, r25	; 0x02
    e3c4:	a3 83       	std	Z+3, r26	; 0x03
    e3c6:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    printf("DIR start (lba,clustor) = %lu\n", fs->dirbase);
    e3ca:	ee a9       	ldd	r30, Y+54	; 0x36
    e3cc:	ff a9       	ldd	r31, Y+55	; 0x37
    e3ce:	81 a5       	ldd	r24, Z+41	; 0x29
    e3d0:	92 a5       	ldd	r25, Z+42	; 0x2a
    e3d2:	a3 a5       	ldd	r26, Z+43	; 0x2b
    e3d4:	b4 a5       	ldd	r27, Z+44	; 0x2c
    e3d6:	ed b7       	in	r30, 0x3d	; 61
    e3d8:	fe b7       	in	r31, 0x3e	; 62
    e3da:	84 83       	std	Z+4, r24	; 0x04
    e3dc:	95 83       	std	Z+5, r25	; 0x05
    e3de:	a6 83       	std	Z+6, r26	; 0x06
    e3e0:	b7 83       	std	Z+7, r27	; 0x07
    e3e2:	87 e7       	ldi	r24, 0x77	; 119
    e3e4:	99 e0       	ldi	r25, 0x09	; 9
    e3e6:	a0 e0       	ldi	r26, 0x00	; 0
    e3e8:	81 83       	std	Z+1, r24	; 0x01
    e3ea:	92 83       	std	Z+2, r25	; 0x02
    e3ec:	a3 83       	std	Z+3, r26	; 0x03
    e3ee:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    printf("Data start (lba)        = %lu\n", fs->database);
    e3f2:	ee a9       	ldd	r30, Y+54	; 0x36
    e3f4:	ff a9       	ldd	r31, Y+55	; 0x37
    e3f6:	85 a5       	ldd	r24, Z+45	; 0x2d
    e3f8:	96 a5       	ldd	r25, Z+46	; 0x2e
    e3fa:	a7 a5       	ldd	r26, Z+47	; 0x2f
    e3fc:	b0 a9       	ldd	r27, Z+48	; 0x30
    e3fe:	ed b7       	in	r30, 0x3d	; 61
    e400:	fe b7       	in	r31, 0x3e	; 62
    e402:	84 83       	std	Z+4, r24	; 0x04
    e404:	95 83       	std	Z+5, r25	; 0x05
    e406:	a6 83       	std	Z+6, r26	; 0x06
    e408:	b7 83       	std	Z+7, r27	; 0x07
    e40a:	88 e5       	ldi	r24, 0x58	; 88
    e40c:	99 e0       	ldi	r25, 0x09	; 9
    e40e:	a0 e0       	ldi	r26, 0x00	; 0
    e410:	81 83       	std	Z+1, r24	; 0x01
    e412:	92 83       	std	Z+2, r25	; 0x02
    e414:	a3 83       	std	Z+3, r26	; 0x03
    e416:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>

#if FF_USE_LABEL
    res = f_getlabel(ptr, label, (DWORD*)&vsn);
    e41a:	ae 01       	movw	r20, r28
    e41c:	42 5d       	subi	r20, 0xD2	; 210
    e41e:	5f 4f       	sbci	r21, 0xFF	; 255
    e420:	be 01       	movw	r22, r28
    e422:	6c 5e       	subi	r22, 0xEC	; 236
    e424:	7f 4f       	sbci	r23, 0xFF	; 255
    e426:	c7 01       	movw	r24, r14
    e428:	0e 94 8d 68 	call	0xd11a	; 0xd11a <f_getlabel>
    if (res)
    e42c:	89 2b       	or	r24, r25
    e42e:	69 f0       	breq	.+26     	; 0xe44a <fatfs_status+0x1e6>
    {
        printf("fatfs_status f_getlabel failed\n");
    e430:	88 e3       	ldi	r24, 0x38	; 56
    e432:	99 e0       	ldi	r25, 0x09	; 9
    e434:	a0 e0       	ldi	r26, 0x00	; 0
    e436:	ed b7       	in	r30, 0x3d	; 61
    e438:	fe b7       	in	r31, 0x3e	; 62
    e43a:	81 83       	std	Z+1, r24	; 0x01
    e43c:	92 83       	std	Z+2, r25	; 0x02
    e43e:	a3 83       	std	Z+3, r26	; 0x03
    e440:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
        return(0);
    e444:	80 e0       	ldi	r24, 0x00	; 0
    e446:	90 e0       	ldi	r25, 0x00	; 0
    e448:	95 c0       	rjmp	.+298    	; 0xe574 <fatfs_status+0x310>
    }
    printf("Volume name             = %s\n", label[0] ? label : "<blank>");
    e44a:	8c 89       	ldd	r24, Y+20	; 0x14
    e44c:	81 11       	cpse	r24, r1
    e44e:	03 c0       	rjmp	.+6      	; 0xe456 <fatfs_status+0x1f2>
    e450:	80 eb       	ldi	r24, 0xB0	; 176
    e452:	98 e0       	ldi	r25, 0x08	; 8
    e454:	02 c0       	rjmp	.+4      	; 0xe45a <fatfs_status+0x1f6>
    e456:	ce 01       	movw	r24, r28
    e458:	44 96       	adiw	r24, 0x14	; 20
    e45a:	ed b7       	in	r30, 0x3d	; 61
    e45c:	fe b7       	in	r31, 0x3e	; 62
    e45e:	95 83       	std	Z+5, r25	; 0x05
    e460:	84 83       	std	Z+4, r24	; 0x04
    e462:	8a e1       	ldi	r24, 0x1A	; 26
    e464:	99 e0       	ldi	r25, 0x09	; 9
    e466:	a0 e0       	ldi	r26, 0x00	; 0
    e468:	81 83       	std	Z+1, r24	; 0x01
    e46a:	92 83       	std	Z+2, r25	; 0x02
    e46c:	a3 83       	std	Z+3, r26	; 0x03
    e46e:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    printf("Volume S/N              = %04X-%04X\n", (WORD)((DWORD)vsn >> 16), (WORD)(vsn & 0xFFFF));
    e472:	8e a5       	ldd	r24, Y+46	; 0x2e
    e474:	9f a5       	ldd	r25, Y+47	; 0x2f
    e476:	a8 a9       	ldd	r26, Y+48	; 0x30
    e478:	b9 a9       	ldd	r27, Y+49	; 0x31
    e47a:	ed b7       	in	r30, 0x3d	; 61
    e47c:	fe b7       	in	r31, 0x3e	; 62
    e47e:	97 83       	std	Z+7, r25	; 0x07
    e480:	86 83       	std	Z+6, r24	; 0x06
    e482:	b5 83       	std	Z+5, r27	; 0x05
    e484:	a4 83       	std	Z+4, r26	; 0x04
    e486:	85 ef       	ldi	r24, 0xF5	; 245
    e488:	98 e0       	ldi	r25, 0x08	; 8
    e48a:	a0 e0       	ldi	r26, 0x00	; 0
    e48c:	81 83       	std	Z+1, r24	; 0x01
    e48e:	92 83       	std	Z+2, r25	; 0x02
    e490:	a3 83       	std	Z+3, r26	; 0x03
    e492:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
#endif

    AccSize = AccFiles = AccDirs = 0;
    e496:	10 92 ba 1c 	sts	0x1CBA, r1	; 0x801cba <AccDirs+0x1>
    e49a:	10 92 b9 1c 	sts	0x1CB9, r1	; 0x801cb9 <AccDirs>
    e49e:	10 92 bc 1c 	sts	0x1CBC, r1	; 0x801cbc <AccFiles+0x1>
    e4a2:	10 92 bb 1c 	sts	0x1CBB, r1	; 0x801cbb <AccFiles>
    e4a6:	10 92 b5 1c 	sts	0x1CB5, r1	; 0x801cb5 <AccSize>
    e4aa:	10 92 b6 1c 	sts	0x1CB6, r1	; 0x801cb6 <AccSize+0x1>
    e4ae:	10 92 b7 1c 	sts	0x1CB7, r1	; 0x801cb7 <AccSize+0x2>
    e4b2:	10 92 b8 1c 	sts	0x1CB8, r1	; 0x801cb8 <AccSize+0x3>
    res = fatfs_scan_files(ptr);
    e4b6:	c7 01       	movw	r24, r14
    e4b8:	56 de       	rcall	.-852    	; 0xe166 <fatfs_scan_files>
    if (res)
    e4ba:	89 2b       	or	r24, r25
    e4bc:	19 f0       	breq	.+6      	; 0xe4c4 <fatfs_status+0x260>
    {
        printf("fatfs_status fatfs_scan_files failed\n");
    e4be:	8f ec       	ldi	r24, 0xCF	; 207
    e4c0:	98 e0       	ldi	r25, 0x08	; 8
    e4c2:	b8 cf       	rjmp	.-144    	; 0xe434 <fatfs_status+0x1d0>
        return(0);
    }
    printf("%u files, %lu bytes.\n%u folders.\n"
    e4c4:	0e a9       	ldd	r16, Y+54	; 0x36
    e4c6:	1f a9       	ldd	r17, Y+55	; 0x37
    e4c8:	f8 01       	movw	r30, r16
    e4ca:	c1 84       	ldd	r12, Z+9	; 0x09
    e4cc:	d2 84       	ldd	r13, Z+10	; 0x0a
    e4ce:	e1 2c       	mov	r14, r1
    e4d0:	f1 2c       	mov	r15, r1
    e4d2:	6a a9       	ldd	r22, Y+50	; 0x32
    e4d4:	7b a9       	ldd	r23, Y+51	; 0x33
    e4d6:	8c a9       	ldd	r24, Y+52	; 0x34
    e4d8:	9d a9       	ldd	r25, Y+53	; 0x35
    e4da:	a7 01       	movw	r20, r14
    e4dc:	96 01       	movw	r18, r12
    e4de:	0e 94 5e e6 	call	0x1ccbc	; 0x1ccbc <__mulsi3>
    e4e2:	22 e0       	ldi	r18, 0x02	; 2
    e4e4:	30 e0       	ldi	r19, 0x00	; 0
    e4e6:	40 e0       	ldi	r20, 0x00	; 0
    e4e8:	50 e0       	ldi	r21, 0x00	; 0
    e4ea:	0e 94 c2 e6 	call	0x1cd84	; 0x1cd84 <__divmodsi4>
    e4ee:	ed b7       	in	r30, 0x3d	; 61
    e4f0:	fe b7       	in	r31, 0x3e	; 62
    e4f2:	20 8b       	std	Z+16, r18	; 0x10
    e4f4:	31 8b       	std	Z+17, r19	; 0x11
    e4f6:	42 8b       	std	Z+18, r20	; 0x12
    e4f8:	53 8b       	std	Z+19, r21	; 0x13
    e4fa:	f8 01       	movw	r30, r16
    e4fc:	81 8d       	ldd	r24, Z+25	; 0x19
    e4fe:	92 8d       	ldd	r25, Z+26	; 0x1a
    e500:	a3 8d       	ldd	r26, Z+27	; 0x1b
    e502:	b4 8d       	ldd	r27, Z+28	; 0x1c
    e504:	9c 01       	movw	r18, r24
    e506:	ad 01       	movw	r20, r26
    e508:	22 50       	subi	r18, 0x02	; 2
    e50a:	31 09       	sbc	r19, r1
    e50c:	41 09       	sbc	r20, r1
    e50e:	51 09       	sbc	r21, r1
    e510:	c7 01       	movw	r24, r14
    e512:	b6 01       	movw	r22, r12
    e514:	0e 94 5e e6 	call	0x1ccbc	; 0x1ccbc <__mulsi3>
    e518:	dc 01       	movw	r26, r24
    e51a:	cb 01       	movw	r24, r22
    e51c:	b6 95       	lsr	r27
    e51e:	a7 95       	ror	r26
    e520:	97 95       	ror	r25
    e522:	87 95       	ror	r24
    e524:	ed b7       	in	r30, 0x3d	; 61
    e526:	fe b7       	in	r31, 0x3e	; 62
    e528:	84 87       	std	Z+12, r24	; 0x0c
    e52a:	95 87       	std	Z+13, r25	; 0x0d
    e52c:	a6 87       	std	Z+14, r26	; 0x0e
    e52e:	b7 87       	std	Z+15, r27	; 0x0f
    e530:	80 91 b9 1c 	lds	r24, 0x1CB9	; 0x801cb9 <AccDirs>
    e534:	90 91 ba 1c 	lds	r25, 0x1CBA	; 0x801cba <AccDirs+0x1>
    e538:	93 87       	std	Z+11, r25	; 0x0b
    e53a:	82 87       	std	Z+10, r24	; 0x0a
    e53c:	80 91 b5 1c 	lds	r24, 0x1CB5	; 0x801cb5 <AccSize>
    e540:	90 91 b6 1c 	lds	r25, 0x1CB6	; 0x801cb6 <AccSize+0x1>
    e544:	a0 91 b7 1c 	lds	r26, 0x1CB7	; 0x801cb7 <AccSize+0x2>
    e548:	b0 91 b8 1c 	lds	r27, 0x1CB8	; 0x801cb8 <AccSize+0x3>
    e54c:	86 83       	std	Z+6, r24	; 0x06
    e54e:	97 83       	std	Z+7, r25	; 0x07
    e550:	a0 87       	std	Z+8, r26	; 0x08
    e552:	b1 87       	std	Z+9, r27	; 0x09
    e554:	80 91 bb 1c 	lds	r24, 0x1CBB	; 0x801cbb <AccFiles>
    e558:	90 91 bc 1c 	lds	r25, 0x1CBC	; 0x801cbc <AccFiles+0x1>
    e55c:	95 83       	std	Z+5, r25	; 0x05
    e55e:	84 83       	std	Z+4, r24	; 0x04
    e560:	82 e8       	ldi	r24, 0x82	; 130
    e562:	98 e0       	ldi	r25, 0x08	; 8
    e564:	a0 e0       	ldi	r26, 0x00	; 0
    e566:	81 83       	std	Z+1, r24	; 0x01
    e568:	92 83       	std	Z+2, r25	; 0x02
    e56a:	a3 83       	std	Z+3, r26	; 0x03
    e56c:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
        "%lu KB total disk space.\n%lu KB available.\n",
        AccFiles, AccSize, AccDirs,
        (fs->n_fatent - 2) * fs->csize / 2, p2 * fs->csize / 2
        );
	return(1);
    e570:	81 e0       	ldi	r24, 0x01	; 1
    e572:	90 e0       	ldi	r25, 0x00	; 0
}
    e574:	e7 96       	adiw	r28, 0x37	; 55
    e576:	e8 e0       	ldi	r30, 0x08	; 8
    e578:	0c 94 33 e7 	jmp	0x1ce66	; 0x1ce66 <__epilogue_restores__+0x14>

0000e57c <fatfs_filinfo_list>:
/// @param[in] : FILINFO pointer
/// @return  void

MEMSPACE
void fatfs_filinfo_list(FILINFO *info)
{
    e57c:	ab e1       	ldi	r26, 0x1B	; 27
    e57e:	b0 e0       	ldi	r27, 0x00	; 0
    e580:	e4 ec       	ldi	r30, 0xC4	; 196
    e582:	f2 e7       	ldi	r31, 0x72	; 114
    e584:	0c 94 1d e7 	jmp	0x1ce3a	; 0x1ce3a <__prologue_saves__+0x20>
    e588:	dc 01       	movw	r26, r24
    char attrs[6];
    if(info->fname[0] == 0)
    e58a:	fc 01       	movw	r30, r24
    e58c:	86 89       	ldd	r24, Z+22	; 0x16
    e58e:	81 11       	cpse	r24, r1
    e590:	03 c0       	rjmp	.+6      	; 0xe598 <fatfs_filinfo_list+0x1c>
    {
        printf("fatfs_filinfo_list: empty\n");
    e592:	87 e6       	ldi	r24, 0x67	; 103
    e594:	98 e0       	ldi	r25, 0x08	; 8
    e596:	69 c0       	rjmp	.+210    	; 0xe66a <fatfs_filinfo_list+0xee>
        return;
    }
    attrs[0] = (info->fattrib & AM_DIR) ? 'D' : '-';
    e598:	fd 01       	movw	r30, r26
    e59a:	80 85       	ldd	r24, Z+8	; 0x08
    e59c:	84 fd       	sbrc	r24, 4
    e59e:	02 c0       	rjmp	.+4      	; 0xe5a4 <fatfs_filinfo_list+0x28>
    e5a0:	9d e2       	ldi	r25, 0x2D	; 45
    e5a2:	01 c0       	rjmp	.+2      	; 0xe5a6 <fatfs_filinfo_list+0x2a>
    e5a4:	94 e4       	ldi	r25, 0x44	; 68
    e5a6:	9e 8b       	std	Y+22, r25	; 0x16
    attrs[1] = (info->fattrib & AM_RDO) ? 'R' : '-';
    e5a8:	80 fd       	sbrc	r24, 0
    e5aa:	02 c0       	rjmp	.+4      	; 0xe5b0 <fatfs_filinfo_list+0x34>
    e5ac:	9d e2       	ldi	r25, 0x2D	; 45
    e5ae:	01 c0       	rjmp	.+2      	; 0xe5b2 <fatfs_filinfo_list+0x36>
    e5b0:	92 e5       	ldi	r25, 0x52	; 82
    e5b2:	9f 8b       	std	Y+23, r25	; 0x17
    attrs[2] = (info->fattrib & AM_HID) ? 'H' : '-';
    e5b4:	81 fd       	sbrc	r24, 1
    e5b6:	02 c0       	rjmp	.+4      	; 0xe5bc <fatfs_filinfo_list+0x40>
    e5b8:	9d e2       	ldi	r25, 0x2D	; 45
    e5ba:	01 c0       	rjmp	.+2      	; 0xe5be <fatfs_filinfo_list+0x42>
    e5bc:	98 e4       	ldi	r25, 0x48	; 72
    e5be:	98 8f       	std	Y+24, r25	; 0x18
    attrs[3] = (info->fattrib & AM_SYS) ? 'S' : '-';
    e5c0:	82 fd       	sbrc	r24, 2
    e5c2:	02 c0       	rjmp	.+4      	; 0xe5c8 <fatfs_filinfo_list+0x4c>
    e5c4:	9d e2       	ldi	r25, 0x2D	; 45
    e5c6:	01 c0       	rjmp	.+2      	; 0xe5ca <fatfs_filinfo_list+0x4e>
    e5c8:	93 e5       	ldi	r25, 0x53	; 83
    e5ca:	99 8f       	std	Y+25, r25	; 0x19
    attrs[4] = (info->fattrib & AM_ARC) ? 'A' : '-';
    e5cc:	85 fd       	sbrc	r24, 5
    e5ce:	02 c0       	rjmp	.+4      	; 0xe5d4 <fatfs_filinfo_list+0x58>
    e5d0:	8d e2       	ldi	r24, 0x2D	; 45
    e5d2:	01 c0       	rjmp	.+2      	; 0xe5d6 <fatfs_filinfo_list+0x5a>
    e5d4:	81 e4       	ldi	r24, 0x41	; 65
    e5d6:	8a 8f       	std	Y+26, r24	; 0x1a
    attrs[5] = 0;
    e5d8:	1b 8e       	std	Y+27, r1	; 0x1b
    printf("%s %u/%02u/%02u %02u:%02u %9lu %s",
    e5da:	fd 01       	movw	r30, r26
    e5dc:	24 81       	ldd	r18, Z+4	; 0x04
    e5de:	35 81       	ldd	r19, Z+5	; 0x05
    e5e0:	46 81       	ldd	r20, Z+6	; 0x06
    e5e2:	57 81       	ldd	r21, Z+7	; 0x07
    e5e4:	cd 01       	movw	r24, r26
    e5e6:	46 96       	adiw	r24, 0x16	; 22
    e5e8:	ed b7       	in	r30, 0x3d	; 61
    e5ea:	fe b7       	in	r31, 0x3e	; 62
    e5ec:	95 8b       	std	Z+21, r25	; 0x15
    e5ee:	84 8b       	std	Z+20, r24	; 0x14
    e5f0:	8d 91       	ld	r24, X+
    e5f2:	9d 91       	ld	r25, X+
    e5f4:	0d 90       	ld	r0, X+
    e5f6:	bc 91       	ld	r27, X
    e5f8:	a0 2d       	mov	r26, r0
    e5fa:	80 8b       	std	Z+16, r24	; 0x10
    e5fc:	91 8b       	std	Z+17, r25	; 0x11
    e5fe:	a2 8b       	std	Z+18, r26	; 0x12
    e600:	b3 8b       	std	Z+19, r27	; 0x13
    e602:	ca 01       	movw	r24, r20
    e604:	45 e0       	ldi	r20, 0x05	; 5
    e606:	96 95       	lsr	r25
    e608:	87 95       	ror	r24
    e60a:	4a 95       	dec	r20
    e60c:	e1 f7       	brne	.-8      	; 0xe606 <fatfs_filinfo_list+0x8a>
    e60e:	8f 73       	andi	r24, 0x3F	; 63
    e610:	99 27       	eor	r25, r25
    e612:	97 87       	std	Z+15, r25	; 0x0f
    e614:	86 87       	std	Z+14, r24	; 0x0e
    e616:	85 2f       	mov	r24, r21
    e618:	86 95       	lsr	r24
    e61a:	86 95       	lsr	r24
    e61c:	86 95       	lsr	r24
    e61e:	84 87       	std	Z+12, r24	; 0x0c
    e620:	15 86       	std	Z+13, r1	; 0x0d
    e622:	c9 01       	movw	r24, r18
    e624:	8f 71       	andi	r24, 0x1F	; 31
    e626:	99 27       	eor	r25, r25
    e628:	93 87       	std	Z+11, r25	; 0x0b
    e62a:	82 87       	std	Z+10, r24	; 0x0a
    e62c:	c9 01       	movw	r24, r18
    e62e:	55 e0       	ldi	r21, 0x05	; 5
    e630:	96 95       	lsr	r25
    e632:	87 95       	ror	r24
    e634:	5a 95       	dec	r21
    e636:	e1 f7       	brne	.-8      	; 0xe630 <fatfs_filinfo_list+0xb4>
    e638:	8f 70       	andi	r24, 0x0F	; 15
    e63a:	99 27       	eor	r25, r25
    e63c:	91 87       	std	Z+9, r25	; 0x09
    e63e:	80 87       	std	Z+8, r24	; 0x08
    e640:	23 2f       	mov	r18, r19
    e642:	33 27       	eor	r19, r19
    e644:	26 95       	lsr	r18
    e646:	24 54       	subi	r18, 0x44	; 68
    e648:	38 4f       	sbci	r19, 0xF8	; 248
    e64a:	37 83       	std	Z+7, r19	; 0x07
    e64c:	26 83       	std	Z+6, r18	; 0x06
    e64e:	ce 01       	movw	r24, r28
    e650:	46 96       	adiw	r24, 0x16	; 22
    e652:	95 83       	std	Z+5, r25	; 0x05
    e654:	84 83       	std	Z+4, r24	; 0x04
    e656:	85 e4       	ldi	r24, 0x45	; 69
    e658:	98 e0       	ldi	r25, 0x08	; 8
    e65a:	a0 e0       	ldi	r26, 0x00	; 0
    e65c:	81 83       	std	Z+1, r24	; 0x01
    e65e:	92 83       	std	Z+2, r25	; 0x02
    e660:	a3 83       	std	Z+3, r26	; 0x03
    e662:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
        attrs,
        (info->fdate >> 9) + 1980, (info->fdate >> 5) & 15, info->fdate & 31,
        (info->ftime >> 11), (info->ftime >> 5) & 63,
        info->fsize, info->fname);
    printf("\n");
    e666:	83 e4       	ldi	r24, 0x43	; 67
    e668:	98 e0       	ldi	r25, 0x08	; 8
    e66a:	a0 e0       	ldi	r26, 0x00	; 0
    e66c:	ed b7       	in	r30, 0x3d	; 61
    e66e:	fe b7       	in	r31, 0x3e	; 62
    e670:	81 83       	std	Z+1, r24	; 0x01
    e672:	92 83       	std	Z+2, r25	; 0x02
    e674:	a3 83       	std	Z+3, r26	; 0x03
    e676:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
}
    e67a:	6b 96       	adiw	r28, 0x1b	; 27
    e67c:	e2 e0       	ldi	r30, 0x02	; 2
    e67e:	0c 94 39 e7 	jmp	0x1ce72	; 0x1ce72 <__epilogue_restores__+0x20>

0000e682 <fatfs_help>:

/// @brief Display FatFs test diagnostics help menu.
/// @return  void
MEMSPACE
void fatfs_help( int full)
{
    e682:	00 d0       	rcall	.+0      	; 0xe684 <fatfs_help+0x2>
    e684:	1f 92       	push	r1
    if(full)
    e686:	89 2b       	or	r24, r25
    e688:	51 f0       	breq	.+20     	; 0xe69e <fatfs_help+0x1c>
    {
        printf(
    e68a:	81 e2       	ldi	r24, 0x21	; 33
    e68c:	9b e0       	ldi	r25, 0x0B	; 11
    e68e:	a0 e0       	ldi	r26, 0x00	; 0
    e690:	ed b7       	in	r30, 0x3d	; 61
    e692:	fe b7       	in	r31, 0x3e	; 62
    e694:	81 83       	std	Z+1, r24	; 0x01
    e696:	92 83       	std	Z+2, r25	; 0x02
    e698:	a3 83       	std	Z+3, r26	; 0x03
    e69a:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
#endif
            "\n"
            );
    }

}
    e69e:	0f 90       	pop	r0
    e6a0:	0f 90       	pop	r0
    e6a2:	0f 90       	pop	r0
    e6a4:	08 95       	ret

0000e6a6 <fatfs_ls>:
///
/// @see fatfs_filinfo_list().
/// @return  1 on success or 0 on error
MEMSPACE
int fatfs_ls(char *name)
{
    e6a6:	a6 e5       	ldi	r26, 0x56	; 86
    e6a8:	b2 e0       	ldi	r27, 0x02	; 2
    e6aa:	e9 e5       	ldi	r30, 0x59	; 89
    e6ac:	f3 e7       	ldi	r31, 0x73	; 115
    e6ae:	0c 94 15 e7 	jmp	0x1ce2a	; 0x1ce2a <__prologue_saves__+0x10>
    FILINFO fno;
    DIR dirs;                                     /* Directory object */
    FATFS *fs;
    char buff[MAX_NAME_LEN+1];

	memset(buff,0,sizeof(buff)-1);
    e6b2:	8e 01       	movw	r16, r28
    e6b4:	0e 5d       	subi	r16, 0xDE	; 222
    e6b6:	1e 4f       	sbci	r17, 0xFE	; 254
    e6b8:	20 e0       	ldi	r18, 0x00	; 0
    e6ba:	31 e0       	ldi	r19, 0x01	; 1
    e6bc:	f8 01       	movw	r30, r16
    e6be:	a9 01       	movw	r20, r18
    e6c0:	11 92       	st	Z+, r1
    e6c2:	41 50       	subi	r20, 0x01	; 1
    e6c4:	50 40       	sbci	r21, 0x00	; 0
    e6c6:	e1 f7       	brne	.-8      	; 0xe6c0 <fatfs_ls+0x1a>

    if(!name || !*name)
    e6c8:	00 97       	sbiw	r24, 0x00	; 0
    e6ca:	21 f0       	breq	.+8      	; 0xe6d4 <fatfs_ls+0x2e>
    e6cc:	fc 01       	movw	r30, r24
    e6ce:	20 81       	ld	r18, Z
    e6d0:	21 11       	cpse	r18, r1
    e6d2:	03 c0       	rjmp	.+6      	; 0xe6da <fatfs_ls+0x34>
    {
        strcpy(buff,".");
    e6d4:	61 ef       	ldi	r22, 0xF1	; 241
    e6d6:	72 e1       	ldi	r23, 0x12	; 18
    e6d8:	01 c0       	rjmp	.+2      	; 0xe6dc <fatfs_ls+0x36>
    }
    else
    {
        strcpy(buff,name);
    e6da:	bc 01       	movw	r22, r24
    e6dc:	c8 01       	movw	r24, r16
    e6de:	0e 94 6d 31 	call	0x62da	; 0x62da <strcpy>
    }
    printf("Listing:[%s]\n",buff);
    e6e2:	ed b7       	in	r30, 0x3d	; 61
    e6e4:	fe b7       	in	r31, 0x3e	; 62
    e6e6:	15 83       	std	Z+5, r17	; 0x05
    e6e8:	04 83       	std	Z+4, r16	; 0x04
    e6ea:	81 ee       	ldi	r24, 0xE1	; 225
    e6ec:	9a e0       	ldi	r25, 0x0A	; 10
    e6ee:	a0 e0       	ldi	r26, 0x00	; 0
    e6f0:	81 83       	std	Z+1, r24	; 0x01
    e6f2:	92 83       	std	Z+2, r25	; 0x02
    e6f4:	a3 83       	std	Z+3, r26	; 0x03
    e6f6:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>

    res = f_opendir(&dirs, buff);
    e6fa:	b8 01       	movw	r22, r16
    e6fc:	ce 01       	movw	r24, r28
    e6fe:	8d 5d       	subi	r24, 0xDD	; 221
    e700:	9d 4f       	sbci	r25, 0xFD	; 253
    e702:	0e 94 53 63 	call	0xc6a6	; 0xc6a6 <f_opendir>
    if (res != FR_OK) 
    e706:	89 2b       	or	r24, r25
    e708:	09 f0       	breq	.+2      	; 0xe70c <fatfs_ls+0x66>
    e70a:	96 c0       	rjmp	.+300    	; 0xe838 <fatfs_ls+0x192>
	{ 
		return(0); 
	}
    p1 = s1 = s2 = 0;
    e70c:	cf 5a       	subi	r28, 0xAF	; 175
    e70e:	dd 4f       	sbci	r29, 0xFD	; 253
    e710:	18 82       	st	Y, r1
    e712:	19 82       	std	Y+1, r1	; 0x01
    e714:	1a 82       	std	Y+2, r1	; 0x02
    e716:	1b 82       	std	Y+3, r1	; 0x03
    e718:	c1 55       	subi	r28, 0x51	; 81
    e71a:	d2 40       	sbci	r29, 0x02	; 2
    e71c:	a1 2c       	mov	r10, r1
    e71e:	b1 2c       	mov	r11, r1
    e720:	c1 2c       	mov	r12, r1
    e722:	d1 2c       	mov	r13, r1
    while(1)
    {
        res = f_readdir(&dirs, &fno);
    e724:	be 01       	movw	r22, r28
    e726:	64 5f       	subi	r22, 0xF4	; 244
    e728:	7f 4f       	sbci	r23, 0xFF	; 255
    e72a:	ce 01       	movw	r24, r28
    e72c:	8d 5d       	subi	r24, 0xDD	; 221
    e72e:	9d 4f       	sbci	r25, 0xFD	; 253
    e730:	0e 94 d9 63 	call	0xc7b2	; 0xc7b2 <f_readdir>
    e734:	7c 01       	movw	r14, r24
        if (res != FR_OK) 
    e736:	89 2b       	or	r24, r25
    e738:	49 f5       	brne	.+82     	; 0xe78c <fatfs_ls+0xe6>
			break;
		if(!fno.fname[0]) 
    e73a:	8a a1       	ldd	r24, Y+34	; 0x22
    e73c:	88 23       	and	r24, r24
    e73e:	31 f1       	breq	.+76     	; 0xe78c <fatfs_ls+0xe6>
			break;
        if (fno.fattrib & AM_DIR)
    e740:	8c 89       	ldd	r24, Y+20	; 0x14
    e742:	84 ff       	sbrs	r24, 4
    e744:	04 c0       	rjmp	.+8      	; 0xe74e <fatfs_ls+0xa8>
        {
            s2++;
    e746:	ff ef       	ldi	r31, 0xFF	; 255
    e748:	af 1a       	sub	r10, r31
    e74a:	bf 0a       	sbc	r11, r31
    e74c:	1b c0       	rjmp	.+54     	; 0xe784 <fatfs_ls+0xde>
        }
        else
        {
            s1++; p1 += fno.fsize;
    e74e:	4f ef       	ldi	r20, 0xFF	; 255
    e750:	c4 1a       	sub	r12, r20
    e752:	d4 0a       	sbc	r13, r20
    e754:	4c 85       	ldd	r20, Y+12	; 0x0c
    e756:	5d 85       	ldd	r21, Y+13	; 0x0d
    e758:	6e 85       	ldd	r22, Y+14	; 0x0e
    e75a:	7f 85       	ldd	r23, Y+15	; 0x0f
    e75c:	cf 5a       	subi	r28, 0xAF	; 175
    e75e:	dd 4f       	sbci	r29, 0xFD	; 253
    e760:	88 81       	ld	r24, Y
    e762:	99 81       	ldd	r25, Y+1	; 0x01
    e764:	aa 81       	ldd	r26, Y+2	; 0x02
    e766:	bb 81       	ldd	r27, Y+3	; 0x03
    e768:	c1 55       	subi	r28, 0x51	; 81
    e76a:	d2 40       	sbci	r29, 0x02	; 2
    e76c:	84 0f       	add	r24, r20
    e76e:	95 1f       	adc	r25, r21
    e770:	a6 1f       	adc	r26, r22
    e772:	b7 1f       	adc	r27, r23
    e774:	cf 5a       	subi	r28, 0xAF	; 175
    e776:	dd 4f       	sbci	r29, 0xFD	; 253
    e778:	88 83       	st	Y, r24
    e77a:	99 83       	std	Y+1, r25	; 0x01
    e77c:	aa 83       	std	Y+2, r26	; 0x02
    e77e:	bb 83       	std	Y+3, r27	; 0x03
    e780:	c1 55       	subi	r28, 0x51	; 81
    e782:	d2 40       	sbci	r29, 0x02	; 2
        }
        fatfs_filinfo_list(&fno);
    e784:	ce 01       	movw	r24, r28
    e786:	0c 96       	adiw	r24, 0x0c	; 12
    e788:	f9 de       	rcall	.-526    	; 0xe57c <fatfs_filinfo_list>
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    e78a:	cc cf       	rjmp	.-104    	; 0xe724 <fatfs_ls+0x7e>
	f_closedir(&dirs);
    e78c:	ce 01       	movw	r24, r28
    e78e:	8d 5d       	subi	r24, 0xDD	; 221
    e790:	9d 4f       	sbci	r25, 0xFD	; 253
    e792:	0e 94 c4 63 	call	0xc788	; 0xc788 <f_closedir>
    printf("%4u File(s),%10lu bytes total\n%4u Dir(s)", s1, p1, s2);
    e796:	ed b7       	in	r30, 0x3d	; 61
    e798:	fe b7       	in	r31, 0x3e	; 62
    e79a:	b3 86       	std	Z+11, r11	; 0x0b
    e79c:	a2 86       	std	Z+10, r10	; 0x0a
    e79e:	cf 5a       	subi	r28, 0xAF	; 175
    e7a0:	dd 4f       	sbci	r29, 0xFD	; 253
    e7a2:	88 81       	ld	r24, Y
    e7a4:	99 81       	ldd	r25, Y+1	; 0x01
    e7a6:	aa 81       	ldd	r26, Y+2	; 0x02
    e7a8:	bb 81       	ldd	r27, Y+3	; 0x03
    e7aa:	c1 55       	subi	r28, 0x51	; 81
    e7ac:	d2 40       	sbci	r29, 0x02	; 2
    e7ae:	86 83       	std	Z+6, r24	; 0x06
    e7b0:	97 83       	std	Z+7, r25	; 0x07
    e7b2:	a0 87       	std	Z+8, r26	; 0x08
    e7b4:	b1 87       	std	Z+9, r27	; 0x09
    e7b6:	d5 82       	std	Z+5, r13	; 0x05
    e7b8:	c4 82       	std	Z+4, r12	; 0x04
    e7ba:	88 eb       	ldi	r24, 0xB8	; 184
    e7bc:	9a e0       	ldi	r25, 0x0A	; 10
    e7be:	a0 e0       	ldi	r26, 0x00	; 0
    e7c0:	81 83       	std	Z+1, r24	; 0x01
    e7c2:	92 83       	std	Z+2, r25	; 0x02
    e7c4:	a3 83       	std	Z+3, r26	; 0x03
    e7c6:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    if (f_getfree(buff, (DWORD*)&p1, &fs) == FR_OK)
    e7ca:	ae 01       	movw	r20, r28
    e7cc:	4b 5a       	subi	r20, 0xAB	; 171
    e7ce:	5d 4f       	sbci	r21, 0xFD	; 253
    e7d0:	be 01       	movw	r22, r28
    e7d2:	6f 5a       	subi	r22, 0xAF	; 175
    e7d4:	7d 4f       	sbci	r23, 0xFD	; 253
    e7d6:	c8 01       	movw	r24, r16
    e7d8:	0e 94 5b 64 	call	0xc8b6	; 0xc8b6 <f_getfree>
    e7dc:	89 2b       	or	r24, r25
    e7de:	31 f5       	brne	.+76     	; 0xe82c <fatfs_ls+0x186>
        printf(", %10luK bytes free\n", p1 * fs->csize / 2);
    e7e0:	cb 5a       	subi	r28, 0xAB	; 171
    e7e2:	dd 4f       	sbci	r29, 0xFD	; 253
    e7e4:	e8 81       	ld	r30, Y
    e7e6:	f9 81       	ldd	r31, Y+1	; 0x01
    e7e8:	c5 55       	subi	r28, 0x55	; 85
    e7ea:	d2 40       	sbci	r29, 0x02	; 2
    e7ec:	a1 85       	ldd	r26, Z+9	; 0x09
    e7ee:	b2 85       	ldd	r27, Z+10	; 0x0a
    e7f0:	cf 5a       	subi	r28, 0xAF	; 175
    e7f2:	dd 4f       	sbci	r29, 0xFD	; 253
    e7f4:	28 81       	ld	r18, Y
    e7f6:	39 81       	ldd	r19, Y+1	; 0x01
    e7f8:	4a 81       	ldd	r20, Y+2	; 0x02
    e7fa:	5b 81       	ldd	r21, Y+3	; 0x03
    e7fc:	c1 55       	subi	r28, 0x51	; 81
    e7fe:	d2 40       	sbci	r29, 0x02	; 2
    e800:	0e 94 ed e6 	call	0x1cdda	; 0x1cdda <__muluhisi3>
    e804:	22 e0       	ldi	r18, 0x02	; 2
    e806:	30 e0       	ldi	r19, 0x00	; 0
    e808:	40 e0       	ldi	r20, 0x00	; 0
    e80a:	50 e0       	ldi	r21, 0x00	; 0
    e80c:	0e 94 c2 e6 	call	0x1cd84	; 0x1cd84 <__divmodsi4>
    e810:	ed b7       	in	r30, 0x3d	; 61
    e812:	fe b7       	in	r31, 0x3e	; 62
    e814:	24 83       	std	Z+4, r18	; 0x04
    e816:	35 83       	std	Z+5, r19	; 0x05
    e818:	46 83       	std	Z+6, r20	; 0x06
    e81a:	57 83       	std	Z+7, r21	; 0x07
    e81c:	83 ea       	ldi	r24, 0xA3	; 163
    e81e:	9a e0       	ldi	r25, 0x0A	; 10
    e820:	a0 e0       	ldi	r26, 0x00	; 0
    e822:	81 83       	std	Z+1, r24	; 0x01
    e824:	92 83       	std	Z+2, r25	; 0x02
    e826:	a3 83       	std	Z+3, r26	; 0x03
    e828:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
	if(res)
    e82c:	e1 14       	cp	r14, r1
    e82e:	f1 04       	cpc	r15, r1
    e830:	31 f4       	brne	.+12     	; 0xe83e <fatfs_ls+0x198>
		return(-1);
	return(1);
    e832:	81 e0       	ldi	r24, 0x01	; 1
    e834:	90 e0       	ldi	r25, 0x00	; 0
    e836:	05 c0       	rjmp	.+10     	; 0xe842 <fatfs_ls+0x19c>
    printf("Listing:[%s]\n",buff);

    res = f_opendir(&dirs, buff);
    if (res != FR_OK) 
	{ 
		return(0); 
    e838:	80 e0       	ldi	r24, 0x00	; 0
    e83a:	90 e0       	ldi	r25, 0x00	; 0
    e83c:	02 c0       	rjmp	.+4      	; 0xe842 <fatfs_ls+0x19c>
	f_closedir(&dirs);
    printf("%4u File(s),%10lu bytes total\n%4u Dir(s)", s1, p1, s2);
    if (f_getfree(buff, (DWORD*)&p1, &fs) == FR_OK)
        printf(", %10luK bytes free\n", p1 * fs->csize / 2);
	if(res)
		return(-1);
    e83e:	8f ef       	ldi	r24, 0xFF	; 255
    e840:	9f ef       	ldi	r25, 0xFF	; 255
	return(1);
}
    e842:	ca 5a       	subi	r28, 0xAA	; 170
    e844:	dd 4f       	sbci	r29, 0xFD	; 253
    e846:	ea e0       	ldi	r30, 0x0A	; 10
    e848:	0c 94 31 e7 	jmp	0x1ce62	; 0x1ce62 <__epilogue_restores__+0x10>

0000e84c <mmc_test>:
/// - Assumes the device is formatted
///
/// @return void
MEMSPACE
void mmc_test(void)
{
    e84c:	a4 e0       	ldi	r26, 0x04	; 4
    e84e:	b1 e0       	ldi	r27, 0x01	; 1
    e850:	ec e2       	ldi	r30, 0x2C	; 44
    e852:	f4 e7       	ldi	r31, 0x74	; 116
    e854:	0c 94 1d e7 	jmp	0x1ce3a	; 0x1ce3a <__prologue_saves__+0x20>
    char buff[MAX_NAME_LEN+1];

    sep();
    e858:	0e 94 3b 32 	call	0x6476	; 0x6476 <sep>
    printf("START MMC TEST\n");
    e85c:	81 e1       	ldi	r24, 0x11	; 17
    e85e:	9b e0       	ldi	r25, 0x0B	; 11
    e860:	a0 e0       	ldi	r26, 0x00	; 0
    e862:	ed b7       	in	r30, 0x3d	; 61
    e864:	fe b7       	in	r31, 0x3e	; 62
    e866:	81 83       	std	Z+1, r24	; 0x01
    e868:	92 83       	std	Z+2, r25	; 0x02
    e86a:	a3 83       	std	Z+3, r26	; 0x03
    e86c:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    strcpy(buff,"/");
    e870:	66 ea       	ldi	r22, 0xA6	; 166
    e872:	78 e0       	ldi	r23, 0x08	; 8
    e874:	ce 01       	movw	r24, r28
    e876:	04 96       	adiw	r24, 0x04	; 4
    e878:	0e 94 6d 31 	call	0x62da	; 0x62da <strcpy>
    fatfs_status(buff);
    e87c:	ce 01       	movw	r24, r28
    e87e:	04 96       	adiw	r24, 0x04	; 4
    e880:	f1 dc       	rcall	.-1566   	; 0xe264 <fatfs_status>
    printf("MMC Directory List\n");
    e882:	8d ef       	ldi	r24, 0xFD	; 253
    e884:	9a e0       	ldi	r25, 0x0A	; 10
    e886:	a0 e0       	ldi	r26, 0x00	; 0
    e888:	ed b7       	in	r30, 0x3d	; 61
    e88a:	fe b7       	in	r31, 0x3e	; 62
    e88c:	81 83       	std	Z+1, r24	; 0x01
    e88e:	92 83       	std	Z+2, r25	; 0x02
    e890:	a3 83       	std	Z+3, r26	; 0x03
    e892:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    fatfs_ls("/");
    e896:	86 ea       	ldi	r24, 0xA6	; 166
    e898:	98 e0       	ldi	r25, 0x08	; 8
    e89a:	05 df       	rcall	.-502    	; 0xe6a6 <fatfs_ls>
    fatfs_cat("test3.txt");
    fatfs_ls("");
#endif
#endif

    printf("END MMC TEST\n");
    e89c:	8f ee       	ldi	r24, 0xEF	; 239
    e89e:	9a e0       	ldi	r25, 0x0A	; 10
    e8a0:	a0 e0       	ldi	r26, 0x00	; 0
    e8a2:	ed b7       	in	r30, 0x3d	; 61
    e8a4:	fe b7       	in	r31, 0x3e	; 62
    e8a6:	81 83       	std	Z+1, r24	; 0x01
    e8a8:	92 83       	std	Z+2, r25	; 0x02
    e8aa:	a3 83       	std	Z+3, r26	; 0x03
    e8ac:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    sep();
    e8b0:	0e 94 3b 32 	call	0x6476	; 0x6476 <sep>
}
    e8b4:	cc 5f       	subi	r28, 0xFC	; 252
    e8b6:	de 4f       	sbci	r29, 0xFE	; 254
    e8b8:	e2 e0       	ldi	r30, 0x02	; 2
    e8ba:	0c 94 39 e7 	jmp	0x1ce72	; 0x1ce72 <__epilogue_restores__+0x20>

0000e8be <fatfs_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int fatfs_tests(int argc,char *argv[])
{
    e8be:	a4 e0       	ldi	r26, 0x04	; 4
    e8c0:	b1 e0       	ldi	r27, 0x01	; 1
    e8c2:	e5 e6       	ldi	r30, 0x65	; 101
    e8c4:	f4 e7       	ldi	r31, 0x74	; 116
    e8c6:	0c 94 17 e7 	jmp	0x1ce2e	; 0x1ce2e <__prologue_saves__+0x14>
    int ind;

    char buff[MAX_NAME_LEN+1];

    ind = 0;
    ptr = argv[ind];
    e8ca:	fb 01       	movw	r30, r22
    e8cc:	20 81       	ld	r18, Z
    e8ce:	31 81       	ldd	r19, Z+1	; 0x01

    if(!ptr)
    e8d0:	21 15       	cp	r18, r1
    e8d2:	31 05       	cpc	r19, r1
    e8d4:	19 f4       	brne	.+6      	; 0xe8dc <fatfs_tests+0x1e>
        return(0);
    e8d6:	80 e0       	ldi	r24, 0x00	; 0
    e8d8:	90 e0       	ldi	r25, 0x00	; 0
    e8da:	81 c0       	rjmp	.+258    	; 0xe9de <fatfs_tests+0x120>
    e8dc:	8b 01       	movw	r16, r22
    e8de:	6c 01       	movw	r12, r24

// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCHI(ptr,"fatfs") )
    e8e0:	62 ed       	ldi	r22, 0xD2	; 210
    e8e2:	78 e0       	ldi	r23, 0x08	; 8
    e8e4:	c9 01       	movw	r24, r18
    e8e6:	0e 94 79 32 	call	0x64f2	; 0x64f2 <MATCHI>
    e8ea:	89 2b       	or	r24, r25
    e8ec:	a1 f3       	breq	.-24     	; 0xe8d6 <fatfs_tests+0x18>
    {
        ptr = argv[++ind];
    e8ee:	f8 01       	movw	r30, r16
    e8f0:	e2 80       	ldd	r14, Z+2	; 0x02
    e8f2:	f3 80       	ldd	r15, Z+3	; 0x03
        if ( !ptr || MATCHI(ptr,"help") )
    e8f4:	e1 14       	cp	r14, r1
    e8f6:	f1 04       	cpc	r15, r1
    e8f8:	59 f4       	brne	.+22     	; 0xe910 <fatfs_tests+0x52>
MEMSPACE
void fatfs_help( int full)
{
    if(full)
    {
        printf(
    e8fa:	81 e2       	ldi	r24, 0x21	; 33
    e8fc:	9b e0       	ldi	r25, 0x0B	; 11
    e8fe:	a0 e0       	ldi	r26, 0x00	; 0
    e900:	ed b7       	in	r30, 0x3d	; 61
    e902:	fe b7       	in	r31, 0x3e	; 62
    e904:	81 83       	std	Z+1, r24	; 0x01
    e906:	92 83       	std	Z+2, r25	; 0x02
    e908:	a3 83       	std	Z+3, r26	; 0x03
    e90a:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    e90e:	40 c0       	rjmp	.+128    	; 0xe990 <fatfs_tests+0xd2>
// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCHI(ptr,"fatfs") )
    {
        ptr = argv[++ind];
        if ( !ptr || MATCHI(ptr,"help") )
    e910:	6d e6       	ldi	r22, 0x6D	; 109
    e912:	76 e1       	ldi	r23, 0x16	; 22
    e914:	c7 01       	movw	r24, r14
    e916:	0e 94 79 32 	call	0x64f2	; 0x64f2 <MATCHI>
    e91a:	89 2b       	or	r24, r25
    e91c:	71 f7       	brne	.-36     	; 0xe8fa <fatfs_tests+0x3c>
    {
        return(0);
    }
#endif

    if (MATCHI(ptr,"ls") || MATCHI(ptr,"dir") )
    e91e:	68 ed       	ldi	r22, 0xD8	; 216
    e920:	78 e0       	ldi	r23, 0x08	; 8
    e922:	c7 01       	movw	r24, r14
    e924:	0e 94 79 32 	call	0x64f2	; 0x64f2 <MATCHI>
    e928:	89 2b       	or	r24, r25
    e92a:	31 f0       	breq	.+12     	; 0xe938 <fatfs_tests+0x7a>
    e92c:	0c 5f       	subi	r16, 0xFC	; 252
    e92e:	1f 4f       	sbci	r17, 0xFF	; 255
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int fatfs_tests(int argc,char *argv[])
{
    e930:	82 e0       	ldi	r24, 0x02	; 2
    e932:	e8 2e       	mov	r14, r24
    e934:	f1 2c       	mov	r15, r1
    e936:	12 c0       	rjmp	.+36     	; 0xe95c <fatfs_tests+0x9e>
    {
        return(0);
    }
#endif

    if (MATCHI(ptr,"ls") || MATCHI(ptr,"dir") )
    e938:	68 ed       	ldi	r22, 0xD8	; 216
    e93a:	7b e0       	ldi	r23, 0x0B	; 11
    e93c:	c7 01       	movw	r24, r14
    e93e:	0e 94 79 32 	call	0x64f2	; 0x64f2 <MATCHI>
    e942:	89 2b       	or	r24, r25
    e944:	99 f7       	brne	.-26     	; 0xe92c <fatfs_tests+0x6e>
    e946:	19 c0       	rjmp	.+50     	; 0xe97a <fatfs_tests+0xbc>
    {
        int i;
        int args = 0;
        for(i=ind+1;i<argc;++i)
        {
            if(fatfs_ls(argv[i]) == 0)
    e948:	f8 01       	movw	r30, r16
    e94a:	81 91       	ld	r24, Z+
    e94c:	91 91       	ld	r25, Z+
    e94e:	8f 01       	movw	r16, r30
    e950:	aa de       	rcall	.-684    	; 0xe6a6 <fatfs_ls>
    e952:	89 2b       	or	r24, r25
    e954:	79 f0       	breq	.+30     	; 0xe974 <fatfs_tests+0xb6>

    if (MATCHI(ptr,"ls") || MATCHI(ptr,"dir") )
    {
        int i;
        int args = 0;
        for(i=ind+1;i<argc;++i)
    e956:	ff ef       	ldi	r31, 0xFF	; 255
    e958:	ef 1a       	sub	r14, r31
    e95a:	ff 0a       	sbc	r15, r31
    e95c:	ec 14       	cp	r14, r12
    e95e:	fd 04       	cpc	r15, r13
    e960:	9c f3       	brlt	.-26     	; 0xe948 <fatfs_tests+0x8a>
			{
				return(-1);
			}
            ++args;
        }
        if(!args)
    e962:	82 e0       	ldi	r24, 0x02	; 2
    e964:	e8 16       	cp	r14, r24
    e966:	f1 04       	cpc	r15, r1
    e968:	99 f4       	brne	.+38     	; 0xe990 <fatfs_tests+0xd2>
        {
            if(fatfs_ls("") == 0)
    e96a:	80 e2       	ldi	r24, 0x20	; 32
    e96c:	9c e0       	ldi	r25, 0x0C	; 12
    e96e:	9b de       	rcall	.-714    	; 0xe6a6 <fatfs_ls>
    }

    else if (MATCHARGS(ptr,"status", (ind + 1), argc))
    {
        strcpy(buff,argv[ind]);
        if(fatfs_status(argv[ind]) == 0)
    e970:	89 2b       	or	r24, r25
    e972:	71 f4       	brne	.+28     	; 0xe990 <fatfs_tests+0xd2>
        int args = 0;
        for(i=ind+1;i<argc;++i)
        {
            if(fatfs_ls(argv[i]) == 0)
			{
				return(-1);
    e974:	8f ef       	ldi	r24, 0xFF	; 255
    e976:	9f ef       	ldi	r25, 0xFF	; 255
    e978:	32 c0       	rjmp	.+100    	; 0xe9de <fatfs_tests+0x120>
			}
        }
        return(1);
    }

    else if (MATCHARGS(ptr,"mmc_test",(ind+0),argc ))
    e97a:	96 01       	movw	r18, r12
    e97c:	41 e0       	ldi	r20, 0x01	; 1
    e97e:	50 e0       	ldi	r21, 0x00	; 0
    e980:	6b ed       	ldi	r22, 0xDB	; 219
    e982:	78 e0       	ldi	r23, 0x08	; 8
    e984:	c7 01       	movw	r24, r14
    e986:	0e 94 8d 32 	call	0x651a	; 0x651a <MATCHARGS>
    e98a:	89 2b       	or	r24, r25
    {
        mmc_test();
    e98c:	21 f0       	breq	.+8      	; 0xe996 <fatfs_tests+0xd8>
    e98e:	5e df       	rcall	.-324    	; 0xe84c <mmc_test>
        return(1);
    e990:	81 e0       	ldi	r24, 0x01	; 1
    e992:	90 e0       	ldi	r25, 0x00	; 0
    e994:	24 c0       	rjmp	.+72     	; 0xe9de <fatfs_tests+0x120>
    }

    else if (MATCHARGS(ptr,"mmc_init",(ind+0),argc))
    e996:	96 01       	movw	r18, r12
    e998:	41 e0       	ldi	r20, 0x01	; 1
    e99a:	50 e0       	ldi	r21, 0x00	; 0
    e99c:	64 ee       	ldi	r22, 0xE4	; 228
    e99e:	78 e0       	ldi	r23, 0x08	; 8
    e9a0:	c7 01       	movw	r24, r14
    e9a2:	0e 94 8d 32 	call	0x651a	; 0x651a <MATCHARGS>
    e9a6:	89 2b       	or	r24, r25
    {
        mmc_init(1);
    e9a8:	21 f0       	breq	.+8      	; 0xe9b2 <fatfs_tests+0xf4>
    e9aa:	81 e0       	ldi	r24, 0x01	; 1
    e9ac:	90 e0       	ldi	r25, 0x00	; 0
    e9ae:	73 da       	rcall	.-2842   	; 0xde96 <mmc_init>
    e9b0:	ef cf       	rjmp	.-34     	; 0xe990 <fatfs_tests+0xd2>
        return(1);
    }

    else if (MATCHARGS(ptr,"status", (ind + 1), argc))
    e9b2:	96 01       	movw	r18, r12
    e9b4:	42 e0       	ldi	r20, 0x02	; 2
    e9b6:	50 e0       	ldi	r21, 0x00	; 0
    e9b8:	6d ee       	ldi	r22, 0xED	; 237
    e9ba:	78 e0       	ldi	r23, 0x08	; 8
    e9bc:	c7 01       	movw	r24, r14
    e9be:	0e 94 8d 32 	call	0x651a	; 0x651a <MATCHARGS>
    e9c2:	89 2b       	or	r24, r25
    e9c4:	09 f4       	brne	.+2      	; 0xe9c8 <fatfs_tests+0x10a>
    e9c6:	87 cf       	rjmp	.-242    	; 0xe8d6 <fatfs_tests+0x18>
    {
        strcpy(buff,argv[ind]);
    e9c8:	f8 01       	movw	r30, r16
    e9ca:	02 81       	ldd	r16, Z+2	; 0x02
    e9cc:	13 81       	ldd	r17, Z+3	; 0x03
    e9ce:	b8 01       	movw	r22, r16
    e9d0:	ce 01       	movw	r24, r28
    e9d2:	04 96       	adiw	r24, 0x04	; 4
    e9d4:	0e 94 6d 31 	call	0x62da	; 0x62da <strcpy>
        if(fatfs_status(argv[ind]) == 0)
    e9d8:	c8 01       	movw	r24, r16
    e9da:	44 dc       	rcall	.-1912   	; 0xe264 <fatfs_status>
    e9dc:	c9 cf       	rjmp	.-110    	; 0xe970 <fatfs_tests+0xb2>
        return(1);
    }
#endif

    return(0);
}
    e9de:	cc 5f       	subi	r28, 0xFC	; 252
    e9e0:	de 4f       	sbci	r29, 0xFE	; 254
    e9e2:	e8 e0       	ldi	r30, 0x08	; 8
    e9e4:	0c 94 33 e7 	jmp	0x1ce66	; 0x1ce66 <__epilogue_restores__+0x14>

0000e9e8 <fatfs_getc>:
    {
        errno = fatfs_to_errno(rc);
        return(-1);
    }
    return(0);
}
    e9e8:	8f 92       	push	r8
    e9ea:	9f 92       	push	r9
    e9ec:	af 92       	push	r10
    e9ee:	bf 92       	push	r11
    e9f0:	ef 92       	push	r14
    e9f2:	ff 92       	push	r15
    e9f4:	0f 93       	push	r16
    e9f6:	1f 93       	push	r17
    e9f8:	cf 93       	push	r28
    e9fa:	df 93       	push	r29
    e9fc:	00 d0       	rcall	.+0      	; 0xe9fe <fatfs_getc+0x16>
    e9fe:	1f 92       	push	r1
    ea00:	cd b7       	in	r28, 0x3d	; 61
    ea02:	de b7       	in	r29, 0x3e	; 62
    ea04:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    ea08:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    ea0c:	00 97       	sbiw	r24, 0x00	; 0
    ea0e:	39 f4       	brne	.+14     	; 0xea1e <fatfs_getc+0x36>
    ea10:	89 e0       	ldi	r24, 0x09	; 9
    ea12:	90 e0       	ldi	r25, 0x00	; 0
    ea14:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    ea18:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    ea1c:	2f c0       	rjmp	.+94     	; 0xea7c <fatfs_getc+0x94>
    ea1e:	fc 01       	movw	r30, r24
    ea20:	e4 84       	ldd	r14, Z+12	; 0x0c
    ea22:	f5 84       	ldd	r15, Z+13	; 0x0d
    ea24:	e1 14       	cp	r14, r1
    ea26:	f1 04       	cpc	r15, r1
    ea28:	99 f3       	breq	.-26     	; 0xea10 <fatfs_getc+0x28>
    ea2a:	8c 01       	movw	r16, r24
    ea2c:	9e 01       	movw	r18, r28
    ea2e:	2f 5f       	subi	r18, 0xFF	; 255
    ea30:	3f 4f       	sbci	r19, 0xFF	; 255
    ea32:	41 e0       	ldi	r20, 0x01	; 1
    ea34:	50 e0       	ldi	r21, 0x00	; 0
    ea36:	be 01       	movw	r22, r28
    ea38:	6d 5f       	subi	r22, 0xFD	; 253
    ea3a:	7f 4f       	sbci	r23, 0xFF	; 255
    ea3c:	c7 01       	movw	r24, r14
    ea3e:	0e 94 8c 5b 	call	0xb718	; 0xb718 <f_read>
    ea42:	00 97       	sbiw	r24, 0x00	; 0
    ea44:	31 f4       	brne	.+12     	; 0xea52 <fatfs_getc+0x6a>
    ea46:	29 81       	ldd	r18, Y+1	; 0x01
    ea48:	3a 81       	ldd	r19, Y+2	; 0x02
    ea4a:	21 30       	cpi	r18, 0x01	; 1
    ea4c:	31 05       	cpc	r19, r1
    ea4e:	c9 f0       	breq	.+50     	; 0xea82 <fatfs_getc+0x9a>
    ea50:	03 c0       	rjmp	.+6      	; 0xea58 <fatfs_getc+0x70>
    ea52:	84 31       	cpi	r24, 0x14	; 20
    ea54:	91 05       	cpc	r25, r1
    ea56:	40 f4       	brcc	.+16     	; 0xea68 <fatfs_getc+0x80>
    ea58:	fc 01       	movw	r30, r24
    ea5a:	ea 55       	subi	r30, 0x5A	; 90
    ea5c:	f4 4f       	sbci	r31, 0xF4	; 244
    ea5e:	80 81       	ld	r24, Z
    ea60:	08 2e       	mov	r0, r24
    ea62:	00 0c       	add	r0, r0
    ea64:	99 0b       	sbc	r25, r25
    ea66:	02 c0       	rjmp	.+4      	; 0xea6c <fatfs_getc+0x84>
    ea68:	83 e2       	ldi	r24, 0x23	; 35
    ea6a:	90 e0       	ldi	r25, 0x00	; 0
    ea6c:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    ea70:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    ea74:	f8 01       	movw	r30, r16
    ea76:	83 81       	ldd	r24, Z+3	; 0x03
    ea78:	80 62       	ori	r24, 0x20	; 32
    ea7a:	83 83       	std	Z+3, r24	; 0x03
    ea7c:	8f ef       	ldi	r24, 0xFF	; 255
    ea7e:	9f ef       	ldi	r25, 0xFF	; 255
    ea80:	28 c0       	rjmp	.+80     	; 0xead2 <fatfs_getc+0xea>
    ea82:	8b 81       	ldd	r24, Y+3	; 0x03
    ea84:	8d 30       	cpi	r24, 0x0D	; 13
    ea86:	01 f5       	brne	.+64     	; 0xeac8 <fatfs_getc+0xe0>
    ea88:	f7 01       	movw	r30, r14
    ea8a:	80 88       	ldd	r8, Z+16	; 0x10
    ea8c:	91 88       	ldd	r9, Z+17	; 0x11
    ea8e:	a2 88       	ldd	r10, Z+18	; 0x12
    ea90:	b3 88       	ldd	r11, Z+19	; 0x13
    ea92:	9e 01       	movw	r18, r28
    ea94:	2f 5f       	subi	r18, 0xFF	; 255
    ea96:	3f 4f       	sbci	r19, 0xFF	; 255
    ea98:	41 e0       	ldi	r20, 0x01	; 1
    ea9a:	50 e0       	ldi	r21, 0x00	; 0
    ea9c:	be 01       	movw	r22, r28
    ea9e:	6d 5f       	subi	r22, 0xFD	; 253
    eaa0:	7f 4f       	sbci	r23, 0xFF	; 255
    eaa2:	c7 01       	movw	r24, r14
    eaa4:	0e 94 8c 5b 	call	0xb718	; 0xb718 <f_read>
    eaa8:	89 2b       	or	r24, r25
    eaaa:	89 f4       	brne	.+34     	; 0xeace <fatfs_getc+0xe6>
    eaac:	89 81       	ldd	r24, Y+1	; 0x01
    eaae:	9a 81       	ldd	r25, Y+2	; 0x02
    eab0:	01 97       	sbiw	r24, 0x01	; 1
    eab2:	69 f4       	brne	.+26     	; 0xeace <fatfs_getc+0xe6>
    eab4:	8b 81       	ldd	r24, Y+3	; 0x03
    eab6:	8a 30       	cpi	r24, 0x0A	; 10
    eab8:	31 f0       	breq	.+12     	; 0xeac6 <fatfs_getc+0xde>
    eaba:	b5 01       	movw	r22, r10
    eabc:	a4 01       	movw	r20, r8
    eabe:	c7 01       	movw	r24, r14
    eac0:	0e 94 98 60 	call	0xc130	; 0xc130 <f_lseek>
    eac4:	04 c0       	rjmp	.+8      	; 0xeace <fatfs_getc+0xe6>
    eac6:	8b 83       	std	Y+3, r24	; 0x03
    eac8:	8b 81       	ldd	r24, Y+3	; 0x03
    eaca:	90 e0       	ldi	r25, 0x00	; 0
    eacc:	02 c0       	rjmp	.+4      	; 0xead2 <fatfs_getc+0xea>
    eace:	8a e0       	ldi	r24, 0x0A	; 10
    ead0:	90 e0       	ldi	r25, 0x00	; 0
    ead2:	0f 90       	pop	r0
    ead4:	0f 90       	pop	r0
    ead6:	0f 90       	pop	r0
    ead8:	df 91       	pop	r29
    eada:	cf 91       	pop	r28
    eadc:	1f 91       	pop	r17
    eade:	0f 91       	pop	r16
    eae0:	ff 90       	pop	r15
    eae2:	ef 90       	pop	r14
    eae4:	bf 90       	pop	r11
    eae6:	af 90       	pop	r10
    eae8:	9f 90       	pop	r9
    eaea:	8f 90       	pop	r8
    eaec:	08 95       	ret

0000eaee <fatfs_putc>:
    eaee:	a3 e0       	ldi	r26, 0x03	; 3
    eaf0:	b0 e0       	ldi	r27, 0x00	; 0
    eaf2:	ed e7       	ldi	r30, 0x7D	; 125
    eaf4:	f5 e7       	ldi	r31, 0x75	; 117
    eaf6:	0c 94 1b e7 	jmp	0x1ce36	; 0x1ce36 <__prologue_saves__+0x1c>
    eafa:	8b 83       	std	Y+3, r24	; 0x03
    eafc:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    eb00:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    eb04:	61 15       	cp	r22, r1
    eb06:	71 05       	cpc	r23, r1
    eb08:	39 f4       	brne	.+14     	; 0xeb18 <fatfs_putc+0x2a>
    eb0a:	89 e0       	ldi	r24, 0x09	; 9
    eb0c:	90 e0       	ldi	r25, 0x00	; 0
    eb0e:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    eb12:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    eb16:	2d c0       	rjmp	.+90     	; 0xeb72 <fatfs_putc+0x84>
    eb18:	fb 01       	movw	r30, r22
    eb1a:	84 85       	ldd	r24, Z+12	; 0x0c
    eb1c:	95 85       	ldd	r25, Z+13	; 0x0d
    eb1e:	00 97       	sbiw	r24, 0x00	; 0
    eb20:	a1 f3       	breq	.-24     	; 0xeb0a <fatfs_putc+0x1c>
    eb22:	8b 01       	movw	r16, r22
    eb24:	9e 01       	movw	r18, r28
    eb26:	2f 5f       	subi	r18, 0xFF	; 255
    eb28:	3f 4f       	sbci	r19, 0xFF	; 255
    eb2a:	41 e0       	ldi	r20, 0x01	; 1
    eb2c:	50 e0       	ldi	r21, 0x00	; 0
    eb2e:	be 01       	movw	r22, r28
    eb30:	6d 5f       	subi	r22, 0xFD	; 253
    eb32:	7f 4f       	sbci	r23, 0xFF	; 255
    eb34:	0e 94 d7 5c 	call	0xb9ae	; 0xb9ae <f_write>
    eb38:	00 97       	sbiw	r24, 0x00	; 0
    eb3a:	31 f4       	brne	.+12     	; 0xeb48 <fatfs_putc+0x5a>
    eb3c:	29 81       	ldd	r18, Y+1	; 0x01
    eb3e:	3a 81       	ldd	r19, Y+2	; 0x02
    eb40:	21 30       	cpi	r18, 0x01	; 1
    eb42:	31 05       	cpc	r19, r1
    eb44:	c9 f0       	breq	.+50     	; 0xeb78 <fatfs_putc+0x8a>
    eb46:	03 c0       	rjmp	.+6      	; 0xeb4e <fatfs_putc+0x60>
    eb48:	84 31       	cpi	r24, 0x14	; 20
    eb4a:	91 05       	cpc	r25, r1
    eb4c:	40 f4       	brcc	.+16     	; 0xeb5e <fatfs_putc+0x70>
    eb4e:	fc 01       	movw	r30, r24
    eb50:	ea 55       	subi	r30, 0x5A	; 90
    eb52:	f4 4f       	sbci	r31, 0xF4	; 244
    eb54:	80 81       	ld	r24, Z
    eb56:	08 2e       	mov	r0, r24
    eb58:	00 0c       	add	r0, r0
    eb5a:	99 0b       	sbc	r25, r25
    eb5c:	02 c0       	rjmp	.+4      	; 0xeb62 <fatfs_putc+0x74>
    eb5e:	83 e2       	ldi	r24, 0x23	; 35
    eb60:	90 e0       	ldi	r25, 0x00	; 0
    eb62:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    eb66:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    eb6a:	f8 01       	movw	r30, r16
    eb6c:	83 81       	ldd	r24, Z+3	; 0x03
    eb6e:	80 62       	ori	r24, 0x20	; 32
    eb70:	83 83       	std	Z+3, r24	; 0x03
    eb72:	8f ef       	ldi	r24, 0xFF	; 255
    eb74:	9f ef       	ldi	r25, 0xFF	; 255
    eb76:	02 c0       	rjmp	.+4      	; 0xeb7c <fatfs_putc+0x8e>
    eb78:	8b 81       	ldd	r24, Y+3	; 0x03
    eb7a:	90 e0       	ldi	r25, 0x00	; 0
    eb7c:	23 96       	adiw	r28, 0x03	; 3
    eb7e:	e4 e0       	ldi	r30, 0x04	; 4
    eb80:	0c 94 37 e7 	jmp	0x1ce6e	; 0x1ce6e <__epilogue_restores__+0x1c>

0000eb84 <fgetc>:
    eb84:	cf 93       	push	r28
    eb86:	df 93       	push	r29
    eb88:	00 d0       	rcall	.+0      	; 0xeb8a <fgetc+0x6>
    eb8a:	1f 92       	push	r1
    eb8c:	ec 01       	movw	r28, r24
    eb8e:	00 97       	sbiw	r24, 0x00	; 0
    eb90:	39 f4       	brne	.+14     	; 0xeba0 <fgetc+0x1c>
    eb92:	89 e0       	ldi	r24, 0x09	; 9
    eb94:	90 e0       	ldi	r25, 0x00	; 0
    eb96:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    eb9a:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    eb9e:	40 c0       	rjmp	.+128    	; 0xec20 <fgetc+0x9c>
    eba0:	2b 81       	ldd	r18, Y+3	; 0x03
    eba2:	20 ff       	sbrs	r18, 0
    eba4:	3d c0       	rjmp	.+122    	; 0xec20 <fgetc+0x9c>
    eba6:	26 ff       	sbrs	r18, 6
    eba8:	0a c0       	rjmp	.+20     	; 0xebbe <fgetc+0x3a>
    ebaa:	2f 7b       	andi	r18, 0xBF	; 191
    ebac:	2b 83       	std	Y+3, r18	; 0x03
    ebae:	8e 81       	ldd	r24, Y+6	; 0x06
    ebb0:	9f 81       	ldd	r25, Y+7	; 0x07
    ebb2:	01 96       	adiw	r24, 0x01	; 1
    ebb4:	9f 83       	std	Y+7, r25	; 0x07
    ebb6:	8e 83       	std	Y+6, r24	; 0x06
    ebb8:	8a 81       	ldd	r24, Y+2	; 0x02
    ebba:	90 e0       	ldi	r25, 0x00	; 0
    ebbc:	33 c0       	rjmp	.+102    	; 0xec24 <fgetc+0xa0>
    ebbe:	22 ff       	sbrs	r18, 2
    ebc0:	0d c0       	rjmp	.+26     	; 0xebdc <fgetc+0x58>
    ebc2:	e8 81       	ld	r30, Y
    ebc4:	f9 81       	ldd	r31, Y+1	; 0x01
    ebc6:	80 81       	ld	r24, Z
    ebc8:	90 e0       	ldi	r25, 0x00	; 0
    ebca:	00 97       	sbiw	r24, 0x00	; 0
    ebcc:	19 f4       	brne	.+6      	; 0xebd4 <fgetc+0x50>
    ebce:	20 62       	ori	r18, 0x20	; 32
    ebd0:	2b 83       	std	Y+3, r18	; 0x03
    ebd2:	26 c0       	rjmp	.+76     	; 0xec20 <fgetc+0x9c>
    ebd4:	31 96       	adiw	r30, 0x01	; 1
    ebd6:	f9 83       	std	Y+1, r31	; 0x01
    ebd8:	e8 83       	st	Y, r30
    ebda:	1b c0       	rjmp	.+54     	; 0xec12 <fgetc+0x8e>
    ebdc:	ea 85       	ldd	r30, Y+10	; 0x0a
    ebde:	fb 85       	ldd	r31, Y+11	; 0x0b
    ebe0:	30 97       	sbiw	r30, 0x00	; 0
    ebe2:	59 f4       	brne	.+22     	; 0xebfa <fgetc+0x76>
    ebe4:	8e ec       	ldi	r24, 0xCE	; 206
    ebe6:	9b e0       	ldi	r25, 0x0B	; 11
    ebe8:	a0 e0       	ldi	r26, 0x00	; 0
    ebea:	ed b7       	in	r30, 0x3d	; 61
    ebec:	fe b7       	in	r31, 0x3e	; 62
    ebee:	81 83       	std	Z+1, r24	; 0x01
    ebf0:	92 83       	std	Z+2, r25	; 0x02
    ebf2:	a3 83       	std	Z+3, r26	; 0x03
    ebf4:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    ebf8:	13 c0       	rjmp	.+38     	; 0xec20 <fgetc+0x9c>
    ebfa:	09 95       	icall
    ebfc:	97 ff       	sbrs	r25, 7
    ebfe:	09 c0       	rjmp	.+18     	; 0xec12 <fgetc+0x8e>
    ec00:	2b 81       	ldd	r18, Y+3	; 0x03
    ec02:	02 96       	adiw	r24, 0x02	; 2
    ec04:	11 f0       	breq	.+4      	; 0xec0a <fgetc+0x86>
    ec06:	80 e2       	ldi	r24, 0x20	; 32
    ec08:	01 c0       	rjmp	.+2      	; 0xec0c <fgetc+0x88>
    ec0a:	80 e1       	ldi	r24, 0x10	; 16
    ec0c:	82 2b       	or	r24, r18
    ec0e:	8b 83       	std	Y+3, r24	; 0x03
    ec10:	07 c0       	rjmp	.+14     	; 0xec20 <fgetc+0x9c>
    ec12:	2e 81       	ldd	r18, Y+6	; 0x06
    ec14:	3f 81       	ldd	r19, Y+7	; 0x07
    ec16:	2f 5f       	subi	r18, 0xFF	; 255
    ec18:	3f 4f       	sbci	r19, 0xFF	; 255
    ec1a:	3f 83       	std	Y+7, r19	; 0x07
    ec1c:	2e 83       	std	Y+6, r18	; 0x06
    ec1e:	02 c0       	rjmp	.+4      	; 0xec24 <fgetc+0xa0>
    ec20:	8f ef       	ldi	r24, 0xFF	; 255
    ec22:	9f ef       	ldi	r25, 0xFF	; 255
    ec24:	cd b7       	in	r28, 0x3d	; 61
    ec26:	de b7       	in	r29, 0x3e	; 62
    ec28:	23 96       	adiw	r28, 0x03	; 3
    ec2a:	e2 e0       	ldi	r30, 0x02	; 2
    ec2c:	0c 94 39 e7 	jmp	0x1ce72	; 0x1ce72 <__epilogue_restores__+0x20>

0000ec30 <fputc>:
    ec30:	cf 93       	push	r28
    ec32:	df 93       	push	r29
    ec34:	00 d0       	rcall	.+0      	; 0xec36 <fputc+0x6>
    ec36:	1f 92       	push	r1
    ec38:	eb 01       	movw	r28, r22
    ec3a:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    ec3e:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    ec42:	20 91 c1 1c 	lds	r18, 0x1CC1	; 0x801cc1 <__iob+0x2>
    ec46:	30 91 c2 1c 	lds	r19, 0x1CC2	; 0x801cc2 <__iob+0x3>
    ec4a:	62 17       	cp	r22, r18
    ec4c:	73 07       	cpc	r23, r19
    ec4e:	49 f0       	breq	.+18     	; 0xec62 <fputc+0x32>
    ec50:	20 91 c3 1c 	lds	r18, 0x1CC3	; 0x801cc3 <__iob+0x4>
    ec54:	30 91 c4 1c 	lds	r19, 0x1CC4	; 0x801cc4 <__iob+0x5>
    ec58:	62 17       	cp	r22, r18
    ec5a:	73 07       	cpc	r23, r19
    ec5c:	11 f0       	breq	.+4      	; 0xec62 <fputc+0x32>
    ec5e:	47 df       	rcall	.-370    	; 0xeaee <fatfs_putc>
    ec60:	33 c0       	rjmp	.+102    	; 0xecc8 <fputc+0x98>
    ec62:	2b 81       	ldd	r18, Y+3	; 0x03
    ec64:	21 ff       	sbrs	r18, 1
    ec66:	2e c0       	rjmp	.+92     	; 0xecc4 <fputc+0x94>
    ec68:	22 ff       	sbrs	r18, 2
    ec6a:	10 c0       	rjmp	.+32     	; 0xec8c <fputc+0x5c>
    ec6c:	4e 81       	ldd	r20, Y+6	; 0x06
    ec6e:	5f 81       	ldd	r21, Y+7	; 0x07
    ec70:	2c 81       	ldd	r18, Y+4	; 0x04
    ec72:	3d 81       	ldd	r19, Y+5	; 0x05
    ec74:	42 17       	cp	r20, r18
    ec76:	53 07       	cpc	r21, r19
    ec78:	f4 f4       	brge	.+60     	; 0xecb6 <fputc+0x86>
    ec7a:	e8 81       	ld	r30, Y
    ec7c:	f9 81       	ldd	r31, Y+1	; 0x01
    ec7e:	9f 01       	movw	r18, r30
    ec80:	2f 5f       	subi	r18, 0xFF	; 255
    ec82:	3f 4f       	sbci	r19, 0xFF	; 255
    ec84:	39 83       	std	Y+1, r19	; 0x01
    ec86:	28 83       	st	Y, r18
    ec88:	80 83       	st	Z, r24
    ec8a:	15 c0       	rjmp	.+42     	; 0xecb6 <fputc+0x86>
    ec8c:	e8 85       	ldd	r30, Y+8	; 0x08
    ec8e:	f9 85       	ldd	r31, Y+9	; 0x09
    ec90:	30 97       	sbiw	r30, 0x00	; 0
    ec92:	59 f4       	brne	.+22     	; 0xecaa <fputc+0x7a>
    ec94:	86 eb       	ldi	r24, 0xB6	; 182
    ec96:	9b e0       	ldi	r25, 0x0B	; 11
    ec98:	a0 e0       	ldi	r26, 0x00	; 0
    ec9a:	ed b7       	in	r30, 0x3d	; 61
    ec9c:	fe b7       	in	r31, 0x3e	; 62
    ec9e:	81 83       	std	Z+1, r24	; 0x01
    eca0:	92 83       	std	Z+2, r25	; 0x02
    eca2:	a3 83       	std	Z+3, r26	; 0x03
    eca4:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    eca8:	0d c0       	rjmp	.+26     	; 0xecc4 <fputc+0x94>
    ecaa:	be 01       	movw	r22, r28
    ecac:	09 95       	icall
    ecae:	8f 3f       	cpi	r24, 0xFF	; 255
    ecb0:	ff ef       	ldi	r31, 0xFF	; 255
    ecb2:	9f 07       	cpc	r25, r31
    ecb4:	39 f0       	breq	.+14     	; 0xecc4 <fputc+0x94>
    ecb6:	2e 81       	ldd	r18, Y+6	; 0x06
    ecb8:	3f 81       	ldd	r19, Y+7	; 0x07
    ecba:	2f 5f       	subi	r18, 0xFF	; 255
    ecbc:	3f 4f       	sbci	r19, 0xFF	; 255
    ecbe:	3f 83       	std	Y+7, r19	; 0x07
    ecc0:	2e 83       	std	Y+6, r18	; 0x06
    ecc2:	02 c0       	rjmp	.+4      	; 0xecc8 <fputc+0x98>
    ecc4:	8f ef       	ldi	r24, 0xFF	; 255
    ecc6:	9f ef       	ldi	r25, 0xFF	; 255
    ecc8:	cd b7       	in	r28, 0x3d	; 61
    ecca:	de b7       	in	r29, 0x3e	; 62
    eccc:	23 96       	adiw	r28, 0x03	; 3
    ecce:	e2 e0       	ldi	r30, 0x02	; 2
    ecd0:	0c 94 39 e7 	jmp	0x1ce72	; 0x1ce72 <__epilogue_restores__+0x20>

0000ecd4 <_fprintf_putc>:
    ecd4:	fc 01       	movw	r30, r24
    ecd6:	86 2f       	mov	r24, r22
    ecd8:	26 81       	ldd	r18, Z+6	; 0x06
    ecda:	37 81       	ldd	r19, Z+7	; 0x07
    ecdc:	2f 5f       	subi	r18, 0xFF	; 255
    ecde:	3f 4f       	sbci	r19, 0xFF	; 255
    ece0:	37 83       	std	Z+7, r19	; 0x07
    ece2:	26 83       	std	Z+6, r18	; 0x06
    ece4:	62 81       	ldd	r22, Z+2	; 0x02
    ece6:	73 81       	ldd	r23, Z+3	; 0x03
    ece8:	90 e0       	ldi	r25, 0x00	; 0
    ecea:	a2 cf       	rjmp	.-188    	; 0xec30 <fputc>
    ecec:	08 95       	ret

0000ecee <getchar>:
    ecee:	80 91 bf 1c 	lds	r24, 0x1CBF	; 0x801cbf <__iob>
    ecf2:	90 91 c0 1c 	lds	r25, 0x1CC0	; 0x801cc0 <__iob+0x1>
    ecf6:	46 cf       	rjmp	.-372    	; 0xeb84 <fgetc>
    ecf8:	08 95       	ret

0000ecfa <putchar>:
    ecfa:	60 91 c1 1c 	lds	r22, 0x1CC1	; 0x801cc1 <__iob+0x2>
    ecfe:	70 91 c2 1c 	lds	r23, 0x1CC2	; 0x801cc2 <__iob+0x3>
    ed02:	96 cf       	rjmp	.-212    	; 0xec30 <fputc>
    ed04:	08 95       	ret

0000ed06 <fgets>:
    ed06:	a0 e0       	ldi	r26, 0x00	; 0
    ed08:	b0 e0       	ldi	r27, 0x00	; 0
    ed0a:	e9 e8       	ldi	r30, 0x89	; 137
    ed0c:	f6 e7       	ldi	r31, 0x76	; 118
    ed0e:	0c 94 17 e7 	jmp	0x1ce2e	; 0x1ce2e <__prologue_saves__+0x14>
    ed12:	7c 01       	movw	r14, r24
    ed14:	6a 01       	movw	r12, r20
    ed16:	8b 01       	movw	r16, r22
    ed18:	c0 e0       	ldi	r28, 0x00	; 0
    ed1a:	d0 e0       	ldi	r29, 0x00	; 0
    ed1c:	01 15       	cp	r16, r1
    ed1e:	11 05       	cpc	r17, r1
    ed20:	41 f0       	breq	.+16     	; 0xed32 <fgets+0x2c>
    ed22:	c6 01       	movw	r24, r12
    ed24:	2f df       	rcall	.-418    	; 0xeb84 <fgetc>
    ed26:	8f 3f       	cpi	r24, 0xFF	; 255
    ed28:	2f ef       	ldi	r18, 0xFF	; 255
    ed2a:	92 07       	cpc	r25, r18
    ed2c:	39 f4       	brne	.+14     	; 0xed3c <fgets+0x36>
    ed2e:	20 97       	sbiw	r28, 0x00	; 0
    ed30:	b9 f0       	breq	.+46     	; 0xed60 <fgets+0x5a>
    ed32:	ce 0d       	add	r28, r14
    ed34:	df 1d       	adc	r29, r15
    ed36:	18 82       	st	Y, r1
    ed38:	c7 01       	movw	r24, r14
    ed3a:	14 c0       	rjmp	.+40     	; 0xed64 <fgets+0x5e>
    ed3c:	8a 30       	cpi	r24, 0x0A	; 10
    ed3e:	91 05       	cpc	r25, r1
    ed40:	c1 f3       	breq	.-16     	; 0xed32 <fgets+0x2c>
    ed42:	88 30       	cpi	r24, 0x08	; 8
    ed44:	91 05       	cpc	r25, r1
    ed46:	21 f4       	brne	.+8      	; 0xed50 <fgets+0x4a>
    ed48:	20 97       	sbiw	r28, 0x00	; 0
    ed4a:	39 f0       	breq	.+14     	; 0xed5a <fgets+0x54>
    ed4c:	21 97       	sbiw	r28, 0x01	; 1
    ed4e:	05 c0       	rjmp	.+10     	; 0xed5a <fgets+0x54>
    ed50:	f7 01       	movw	r30, r14
    ed52:	ec 0f       	add	r30, r28
    ed54:	fd 1f       	adc	r31, r29
    ed56:	80 83       	st	Z, r24
    ed58:	21 96       	adiw	r28, 0x01	; 1
    ed5a:	01 50       	subi	r16, 0x01	; 1
    ed5c:	11 09       	sbc	r17, r1
    ed5e:	de cf       	rjmp	.-68     	; 0xed1c <fgets+0x16>
    ed60:	80 e0       	ldi	r24, 0x00	; 0
    ed62:	90 e0       	ldi	r25, 0x00	; 0
    ed64:	cd b7       	in	r28, 0x3d	; 61
    ed66:	de b7       	in	r29, 0x3e	; 62
    ed68:	e8 e0       	ldi	r30, 0x08	; 8
    ed6a:	0c 94 33 e7 	jmp	0x1ce66	; 0x1ce66 <__epilogue_restores__+0x14>

0000ed6e <fputs>:
    ed6e:	0f 93       	push	r16
    ed70:	1f 93       	push	r17
    ed72:	cf 93       	push	r28
    ed74:	df 93       	push	r29
    ed76:	8b 01       	movw	r16, r22
    ed78:	ec 01       	movw	r28, r24
    ed7a:	89 91       	ld	r24, Y+
    ed7c:	88 23       	and	r24, r24
    ed7e:	41 f0       	breq	.+16     	; 0xed90 <fputs+0x22>
    ed80:	b8 01       	movw	r22, r16
    ed82:	90 e0       	ldi	r25, 0x00	; 0
    ed84:	55 df       	rcall	.-342    	; 0xec30 <fputc>
    ed86:	8f 3f       	cpi	r24, 0xFF	; 255
    ed88:	2f ef       	ldi	r18, 0xFF	; 255
    ed8a:	92 07       	cpc	r25, r18
    ed8c:	b1 f7       	brne	.-20     	; 0xed7a <fputs+0xc>
    ed8e:	02 c0       	rjmp	.+4      	; 0xed94 <fputs+0x26>
    ed90:	80 e0       	ldi	r24, 0x00	; 0
    ed92:	90 e0       	ldi	r25, 0x00	; 0
    ed94:	df 91       	pop	r29
    ed96:	cf 91       	pop	r28
    ed98:	1f 91       	pop	r17
    ed9a:	0f 91       	pop	r16
    ed9c:	08 95       	ret

0000ed9e <puts>:
    ed9e:	cf 93       	push	r28
    eda0:	df 93       	push	r29
    eda2:	ec 01       	movw	r28, r24
    eda4:	89 91       	ld	r24, Y+
    eda6:	60 91 c1 1c 	lds	r22, 0x1CC1	; 0x801cc1 <__iob+0x2>
    edaa:	70 91 c2 1c 	lds	r23, 0x1CC2	; 0x801cc2 <__iob+0x3>
    edae:	88 23       	and	r24, r24
    edb0:	39 f0       	breq	.+14     	; 0xedc0 <puts+0x22>
    edb2:	90 e0       	ldi	r25, 0x00	; 0
    edb4:	3d df       	rcall	.-390    	; 0xec30 <fputc>
    edb6:	8f 3f       	cpi	r24, 0xFF	; 255
    edb8:	2f ef       	ldi	r18, 0xFF	; 255
    edba:	92 07       	cpc	r25, r18
    edbc:	99 f7       	brne	.-26     	; 0xeda4 <puts+0x6>
    edbe:	03 c0       	rjmp	.+6      	; 0xedc6 <puts+0x28>
    edc0:	8a e0       	ldi	r24, 0x0A	; 10
    edc2:	90 e0       	ldi	r25, 0x00	; 0
    edc4:	35 df       	rcall	.-406    	; 0xec30 <fputc>
    edc6:	df 91       	pop	r29
    edc8:	cf 91       	pop	r28
    edca:	08 95       	ret

0000edcc <fileno>:
    edcc:	00 97       	sbiw	r24, 0x00	; 0
    edce:	39 f4       	brne	.+14     	; 0xedde <fileno+0x12>
    edd0:	89 e0       	ldi	r24, 0x09	; 9
    edd2:	90 e0       	ldi	r25, 0x00	; 0
    edd4:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    edd8:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    eddc:	0e c0       	rjmp	.+28     	; 0xedfa <fileno+0x2e>
    edde:	ef eb       	ldi	r30, 0xBF	; 191
    ede0:	fc e1       	ldi	r31, 0x1C	; 28
    ede2:	20 e0       	ldi	r18, 0x00	; 0
    ede4:	30 e0       	ldi	r19, 0x00	; 0
    ede6:	41 91       	ld	r20, Z+
    ede8:	51 91       	ld	r21, Z+
    edea:	84 17       	cp	r24, r20
    edec:	95 07       	cpc	r25, r21
    edee:	41 f0       	breq	.+16     	; 0xee00 <fileno+0x34>
    edf0:	2f 5f       	subi	r18, 0xFF	; 255
    edf2:	3f 4f       	sbci	r19, 0xFF	; 255
    edf4:	20 31       	cpi	r18, 0x10	; 16
    edf6:	31 05       	cpc	r19, r1
    edf8:	b1 f7       	brne	.-20     	; 0xede6 <fileno+0x1a>
    edfa:	8f ef       	ldi	r24, 0xFF	; 255
    edfc:	9f ef       	ldi	r25, 0xFF	; 255
    edfe:	08 95       	ret
    ee00:	c9 01       	movw	r24, r18
    ee02:	08 95       	ret

0000ee04 <fileno_to_stream>:
    ee04:	80 31       	cpi	r24, 0x10	; 16
    ee06:	91 05       	cpc	r25, r1
    ee08:	48 f4       	brcc	.+18     	; 0xee1c <fileno_to_stream+0x18>
    ee0a:	88 0f       	add	r24, r24
    ee0c:	99 1f       	adc	r25, r25
    ee0e:	fc 01       	movw	r30, r24
    ee10:	e1 54       	subi	r30, 0x41	; 65
    ee12:	f3 4e       	sbci	r31, 0xE3	; 227
    ee14:	80 81       	ld	r24, Z
    ee16:	91 81       	ldd	r25, Z+1	; 0x01
    ee18:	00 97       	sbiw	r24, 0x00	; 0
    ee1a:	41 f4       	brne	.+16     	; 0xee2c <fileno_to_stream+0x28>
    ee1c:	89 e0       	ldi	r24, 0x09	; 9
    ee1e:	90 e0       	ldi	r25, 0x00	; 0
    ee20:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    ee24:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    ee28:	80 e0       	ldi	r24, 0x00	; 0
    ee2a:	90 e0       	ldi	r25, 0x00	; 0
    ee2c:	08 95       	ret

0000ee2e <mctime>:
    ee2e:	a4 e0       	ldi	r26, 0x04	; 4
    ee30:	b0 e0       	ldi	r27, 0x00	; 0
    ee32:	ed e1       	ldi	r30, 0x1D	; 29
    ee34:	f7 e7       	ldi	r31, 0x77	; 119
    ee36:	0c 94 1d e7 	jmp	0x1ce3a	; 0x1ce3a <__prologue_saves__+0x20>
    ee3a:	69 83       	std	Y+1, r22	; 0x01
    ee3c:	7a 83       	std	Y+2, r23	; 0x02
    ee3e:	8b 83       	std	Y+3, r24	; 0x03
    ee40:	9c 83       	std	Y+4, r25	; 0x04
    ee42:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    ee46:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    ee4a:	ce 01       	movw	r24, r28
    ee4c:	01 96       	adiw	r24, 0x01	; 1
    ee4e:	0e 94 48 3d 	call	0x7a90	; 0x7a90 <ctime_gm>
    ee52:	fc 01       	movw	r30, r24
    ee54:	01 90       	ld	r0, Z+
    ee56:	00 20       	and	r0, r0
    ee58:	e9 f7       	brne	.-6      	; 0xee54 <mctime+0x26>
    ee5a:	31 97       	sbiw	r30, 0x01	; 1
    ee5c:	e8 1b       	sub	r30, r24
    ee5e:	f9 0b       	sbc	r31, r25
    ee60:	39 f0       	breq	.+14     	; 0xee70 <mctime+0x42>
    ee62:	31 97       	sbiw	r30, 0x01	; 1
    ee64:	e8 0f       	add	r30, r24
    ee66:	f9 1f       	adc	r31, r25
    ee68:	20 81       	ld	r18, Z
    ee6a:	2a 30       	cpi	r18, 0x0A	; 10
    ee6c:	09 f4       	brne	.+2      	; 0xee70 <mctime+0x42>
    ee6e:	10 82       	st	Z, r1
    ee70:	24 96       	adiw	r28, 0x04	; 4
    ee72:	e2 e0       	ldi	r30, 0x02	; 2
    ee74:	0c 94 39 e7 	jmp	0x1ce72	; 0x1ce72 <__epilogue_restores__+0x20>

0000ee78 <basename>:
    ee78:	00 97       	sbiw	r24, 0x00	; 0
    ee7a:	49 f0       	breq	.+18     	; 0xee8e <basename+0x16>
    ee7c:	fc 01       	movw	r30, r24
    ee7e:	21 91       	ld	r18, Z+
    ee80:	22 23       	and	r18, r18
    ee82:	21 f0       	breq	.+8      	; 0xee8c <basename+0x14>
    ee84:	2f 32       	cpi	r18, 0x2F	; 47
    ee86:	d9 f7       	brne	.-10     	; 0xee7e <basename+0x6>
    ee88:	cf 01       	movw	r24, r30
    ee8a:	f9 cf       	rjmp	.-14     	; 0xee7e <basename+0x6>
    ee8c:	08 95       	ret
    ee8e:	80 e2       	ldi	r24, 0x20	; 32
    ee90:	9c e0       	ldi	r25, 0x0C	; 12
    ee92:	08 95       	ret

0000ee94 <chdir>:
    ee94:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    ee98:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    ee9c:	0e 94 07 5f 	call	0xbe0e	; 0xbe0e <f_chdir>
    eea0:	00 97       	sbiw	r24, 0x00	; 0
    eea2:	a1 f0       	breq	.+40     	; 0xeecc <chdir+0x38>
    eea4:	84 31       	cpi	r24, 0x14	; 20
    eea6:	91 05       	cpc	r25, r1
    eea8:	40 f4       	brcc	.+16     	; 0xeeba <chdir+0x26>
    eeaa:	fc 01       	movw	r30, r24
    eeac:	ea 55       	subi	r30, 0x5A	; 90
    eeae:	f4 4f       	sbci	r31, 0xF4	; 244
    eeb0:	80 81       	ld	r24, Z
    eeb2:	08 2e       	mov	r0, r24
    eeb4:	00 0c       	add	r0, r0
    eeb6:	99 0b       	sbc	r25, r25
    eeb8:	02 c0       	rjmp	.+4      	; 0xeebe <chdir+0x2a>
    eeba:	83 e2       	ldi	r24, 0x23	; 35
    eebc:	90 e0       	ldi	r25, 0x00	; 0
    eebe:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    eec2:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    eec6:	8f ef       	ldi	r24, 0xFF	; 255
    eec8:	9f ef       	ldi	r25, 0xFF	; 255
    eeca:	08 95       	ret
    eecc:	80 e0       	ldi	r24, 0x00	; 0
    eece:	90 e0       	ldi	r25, 0x00	; 0
    eed0:	08 95       	ret

0000eed2 <chmod>:
    eed2:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    eed6:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    eeda:	42 79       	andi	r20, 0x92	; 146
    eedc:	55 27       	eor	r21, r21
    eede:	66 27       	eor	r22, r22
    eee0:	77 27       	eor	r23, r23
    eee2:	45 2b       	or	r20, r21
    eee4:	46 2b       	or	r20, r22
    eee6:	47 2b       	or	r20, r23
    eee8:	19 f0       	breq	.+6      	; 0xeef0 <chmod+0x1e>
    eeea:	80 e0       	ldi	r24, 0x00	; 0
    eeec:	90 e0       	ldi	r25, 0x00	; 0
    eeee:	08 95       	ret
    eef0:	41 e0       	ldi	r20, 0x01	; 1
    eef2:	61 e0       	ldi	r22, 0x01	; 1
    eef4:	0e 94 e7 67 	call	0xcfce	; 0xcfce <f_chmod>
    eef8:	00 97       	sbiw	r24, 0x00	; 0
    eefa:	b9 f3       	breq	.-18     	; 0xeeea <chmod+0x18>
    eefc:	84 31       	cpi	r24, 0x14	; 20
    eefe:	91 05       	cpc	r25, r1
    ef00:	40 f4       	brcc	.+16     	; 0xef12 <chmod+0x40>
    ef02:	fc 01       	movw	r30, r24
    ef04:	ea 55       	subi	r30, 0x5A	; 90
    ef06:	f4 4f       	sbci	r31, 0xF4	; 244
    ef08:	80 81       	ld	r24, Z
    ef0a:	08 2e       	mov	r0, r24
    ef0c:	00 0c       	add	r0, r0
    ef0e:	99 0b       	sbc	r25, r25
    ef10:	02 c0       	rjmp	.+4      	; 0xef16 <chmod+0x44>
    ef12:	83 e2       	ldi	r24, 0x23	; 35
    ef14:	90 e0       	ldi	r25, 0x00	; 0
    ef16:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    ef1a:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    ef1e:	8f ef       	ldi	r24, 0xFF	; 255
    ef20:	9f ef       	ldi	r25, 0xFF	; 255
    ef22:	08 95       	ret

0000ef24 <getcwd>:
    ef24:	cf 93       	push	r28
    ef26:	df 93       	push	r29
    ef28:	d8 2f       	mov	r29, r24
    ef2a:	c9 2f       	mov	r28, r25
    ef2c:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    ef30:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    ef34:	0e 94 62 5f 	call	0xbec4	; 0xbec4 <f_getcwd>
    ef38:	00 97       	sbiw	r24, 0x00	; 0
    ef3a:	a1 f0       	breq	.+40     	; 0xef64 <getcwd+0x40>
    ef3c:	84 31       	cpi	r24, 0x14	; 20
    ef3e:	91 05       	cpc	r25, r1
    ef40:	40 f4       	brcc	.+16     	; 0xef52 <getcwd+0x2e>
    ef42:	fc 01       	movw	r30, r24
    ef44:	ea 55       	subi	r30, 0x5A	; 90
    ef46:	f4 4f       	sbci	r31, 0xF4	; 244
    ef48:	80 81       	ld	r24, Z
    ef4a:	08 2e       	mov	r0, r24
    ef4c:	00 0c       	add	r0, r0
    ef4e:	99 0b       	sbc	r25, r25
    ef50:	02 c0       	rjmp	.+4      	; 0xef56 <getcwd+0x32>
    ef52:	83 e2       	ldi	r24, 0x23	; 35
    ef54:	90 e0       	ldi	r25, 0x00	; 0
    ef56:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    ef5a:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    ef5e:	80 e0       	ldi	r24, 0x00	; 0
    ef60:	90 e0       	ldi	r25, 0x00	; 0
    ef62:	02 c0       	rjmp	.+4      	; 0xef68 <getcwd+0x44>
    ef64:	8d 2f       	mov	r24, r29
    ef66:	9c 2f       	mov	r25, r28
    ef68:	df 91       	pop	r29
    ef6a:	cf 91       	pop	r28
    ef6c:	08 95       	ret

0000ef6e <mkdir>:
    ef6e:	cf 93       	push	r28
    ef70:	df 93       	push	r29
    ef72:	ec 01       	movw	r28, r24
    ef74:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    ef78:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    ef7c:	41 15       	cp	r20, r1
    ef7e:	51 05       	cpc	r21, r1
    ef80:	61 05       	cpc	r22, r1
    ef82:	71 05       	cpc	r23, r1
    ef84:	41 f4       	brne	.+16     	; 0xef96 <mkdir+0x28>
    ef86:	ce 01       	movw	r24, r28
    ef88:	0e 94 e2 65 	call	0xcbc4	; 0xcbc4 <f_mkdir>
    ef8c:	00 97       	sbiw	r24, 0x00	; 0
    ef8e:	39 f4       	brne	.+14     	; 0xef9e <mkdir+0x30>
    ef90:	80 e0       	ldi	r24, 0x00	; 0
    ef92:	90 e0       	ldi	r25, 0x00	; 0
    ef94:	17 c0       	rjmp	.+46     	; 0xefc4 <mkdir+0x56>
    ef96:	9d df       	rcall	.-198    	; 0xeed2 <chmod>
    ef98:	89 2b       	or	r24, r25
    ef9a:	a9 f3       	breq	.-22     	; 0xef86 <mkdir+0x18>
    ef9c:	11 c0       	rjmp	.+34     	; 0xefc0 <mkdir+0x52>
    ef9e:	84 31       	cpi	r24, 0x14	; 20
    efa0:	91 05       	cpc	r25, r1
    efa2:	40 f4       	brcc	.+16     	; 0xefb4 <mkdir+0x46>
    efa4:	fc 01       	movw	r30, r24
    efa6:	ea 55       	subi	r30, 0x5A	; 90
    efa8:	f4 4f       	sbci	r31, 0xF4	; 244
    efaa:	80 81       	ld	r24, Z
    efac:	08 2e       	mov	r0, r24
    efae:	00 0c       	add	r0, r0
    efb0:	99 0b       	sbc	r25, r25
    efb2:	02 c0       	rjmp	.+4      	; 0xefb8 <mkdir+0x4a>
    efb4:	83 e2       	ldi	r24, 0x23	; 35
    efb6:	90 e0       	ldi	r25, 0x00	; 0
    efb8:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    efbc:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    efc0:	8f ef       	ldi	r24, 0xFF	; 255
    efc2:	9f ef       	ldi	r25, 0xFF	; 255
    efc4:	df 91       	pop	r29
    efc6:	cf 91       	pop	r28
    efc8:	08 95       	ret

0000efca <rename>:
    efca:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    efce:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    efd2:	0e 94 d2 66 	call	0xcda4	; 0xcda4 <f_rename>
    efd6:	00 97       	sbiw	r24, 0x00	; 0
    efd8:	a1 f0       	breq	.+40     	; 0xf002 <rename+0x38>
    efda:	84 31       	cpi	r24, 0x14	; 20
    efdc:	91 05       	cpc	r25, r1
    efde:	40 f4       	brcc	.+16     	; 0xeff0 <rename+0x26>
    efe0:	fc 01       	movw	r30, r24
    efe2:	ea 55       	subi	r30, 0x5A	; 90
    efe4:	f4 4f       	sbci	r31, 0xF4	; 244
    efe6:	80 81       	ld	r24, Z
    efe8:	08 2e       	mov	r0, r24
    efea:	00 0c       	add	r0, r0
    efec:	99 0b       	sbc	r25, r25
    efee:	02 c0       	rjmp	.+4      	; 0xeff4 <rename+0x2a>
    eff0:	83 e2       	ldi	r24, 0x23	; 35
    eff2:	90 e0       	ldi	r25, 0x00	; 0
    eff4:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    eff8:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    effc:	8f ef       	ldi	r24, 0xFF	; 255
    effe:	9f ef       	ldi	r25, 0xFF	; 255
    f000:	08 95       	ret
    f002:	80 e0       	ldi	r24, 0x00	; 0
    f004:	90 e0       	ldi	r25, 0x00	; 0
    f006:	08 95       	ret

0000f008 <unlink>:
    f008:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    f00c:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    f010:	0e 94 3b 65 	call	0xca76	; 0xca76 <f_unlink>
    f014:	00 97       	sbiw	r24, 0x00	; 0
    f016:	a1 f0       	breq	.+40     	; 0xf040 <unlink+0x38>
    f018:	84 31       	cpi	r24, 0x14	; 20
    f01a:	91 05       	cpc	r25, r1
    f01c:	40 f4       	brcc	.+16     	; 0xf02e <unlink+0x26>
    f01e:	fc 01       	movw	r30, r24
    f020:	ea 55       	subi	r30, 0x5A	; 90
    f022:	f4 4f       	sbci	r31, 0xF4	; 244
    f024:	80 81       	ld	r24, Z
    f026:	08 2e       	mov	r0, r24
    f028:	00 0c       	add	r0, r0
    f02a:	99 0b       	sbc	r25, r25
    f02c:	02 c0       	rjmp	.+4      	; 0xf032 <unlink+0x2a>
    f02e:	83 e2       	ldi	r24, 0x23	; 35
    f030:	90 e0       	ldi	r25, 0x00	; 0
    f032:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f036:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    f03a:	8f ef       	ldi	r24, 0xFF	; 255
    f03c:	9f ef       	ldi	r25, 0xFF	; 255
    f03e:	08 95       	ret
    f040:	80 e0       	ldi	r24, 0x00	; 0
    f042:	90 e0       	ldi	r25, 0x00	; 0
    f044:	08 95       	ret

0000f046 <rmdir>:
    f046:	e0 cf       	rjmp	.-64     	; 0xf008 <unlink>
    f048:	08 95       	ret

0000f04a <closedir>:
    f04a:	0e 94 c4 63 	call	0xc788	; 0xc788 <f_closedir>
    f04e:	00 97       	sbiw	r24, 0x00	; 0
    f050:	a1 f0       	breq	.+40     	; 0xf07a <closedir+0x30>
    f052:	84 31       	cpi	r24, 0x14	; 20
    f054:	91 05       	cpc	r25, r1
    f056:	40 f4       	brcc	.+16     	; 0xf068 <closedir+0x1e>
    f058:	fc 01       	movw	r30, r24
    f05a:	ea 55       	subi	r30, 0x5A	; 90
    f05c:	f4 4f       	sbci	r31, 0xF4	; 244
    f05e:	80 81       	ld	r24, Z
    f060:	08 2e       	mov	r0, r24
    f062:	00 0c       	add	r0, r0
    f064:	99 0b       	sbc	r25, r25
    f066:	02 c0       	rjmp	.+4      	; 0xf06c <closedir+0x22>
    f068:	83 e2       	ldi	r24, 0x23	; 35
    f06a:	90 e0       	ldi	r25, 0x00	; 0
    f06c:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f070:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    f074:	8f ef       	ldi	r24, 0xFF	; 255
    f076:	9f ef       	ldi	r25, 0xFF	; 255
    f078:	08 95       	ret
    f07a:	80 e0       	ldi	r24, 0x00	; 0
    f07c:	90 e0       	ldi	r25, 0x00	; 0
    f07e:	08 95       	ret

0000f080 <opendir>:
    f080:	bc 01       	movw	r22, r24
    f082:	80 e3       	ldi	r24, 0x30	; 48
    f084:	99 e1       	ldi	r25, 0x19	; 25
    f086:	0e 94 53 63 	call	0xc6a6	; 0xc6a6 <f_opendir>
    f08a:	00 97       	sbiw	r24, 0x00	; 0
    f08c:	a1 f0       	breq	.+40     	; 0xf0b6 <opendir+0x36>
    f08e:	84 31       	cpi	r24, 0x14	; 20
    f090:	91 05       	cpc	r25, r1
    f092:	40 f4       	brcc	.+16     	; 0xf0a4 <opendir+0x24>
    f094:	fc 01       	movw	r30, r24
    f096:	ea 55       	subi	r30, 0x5A	; 90
    f098:	f4 4f       	sbci	r31, 0xF4	; 244
    f09a:	80 81       	ld	r24, Z
    f09c:	08 2e       	mov	r0, r24
    f09e:	00 0c       	add	r0, r0
    f0a0:	99 0b       	sbc	r25, r25
    f0a2:	02 c0       	rjmp	.+4      	; 0xf0a8 <opendir+0x28>
    f0a4:	83 e2       	ldi	r24, 0x23	; 35
    f0a6:	90 e0       	ldi	r25, 0x00	; 0
    f0a8:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f0ac:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    f0b0:	80 e0       	ldi	r24, 0x00	; 0
    f0b2:	90 e0       	ldi	r25, 0x00	; 0
    f0b4:	08 95       	ret
    f0b6:	80 e3       	ldi	r24, 0x30	; 48
    f0b8:	99 e1       	ldi	r25, 0x19	; 25
    f0ba:	08 95       	ret

0000f0bc <readdir>:
    f0bc:	a6 e1       	ldi	r26, 0x16	; 22
    f0be:	b1 e0       	ldi	r27, 0x01	; 1
    f0c0:	e4 e6       	ldi	r30, 0x64	; 100
    f0c2:	f8 e7       	ldi	r31, 0x78	; 120
    f0c4:	0c 94 1b e7 	jmp	0x1ce36	; 0x1ce36 <__prologue_saves__+0x1c>
    f0c8:	10 92 30 18 	sts	0x1830, r1	; 0x801830 <_de>
    f0cc:	be 01       	movw	r22, r28
    f0ce:	6f 5f       	subi	r22, 0xFF	; 255
    f0d0:	7f 4f       	sbci	r23, 0xFF	; 255
    f0d2:	0e 94 d9 63 	call	0xc7b2	; 0xc7b2 <f_readdir>
    f0d6:	00 97       	sbiw	r24, 0x00	; 0
    f0d8:	a1 f0       	breq	.+40     	; 0xf102 <readdir+0x46>
    f0da:	84 31       	cpi	r24, 0x14	; 20
    f0dc:	91 05       	cpc	r25, r1
    f0de:	40 f4       	brcc	.+16     	; 0xf0f0 <readdir+0x34>
    f0e0:	fc 01       	movw	r30, r24
    f0e2:	ea 55       	subi	r30, 0x5A	; 90
    f0e4:	f4 4f       	sbci	r31, 0xF4	; 244
    f0e6:	80 81       	ld	r24, Z
    f0e8:	08 2e       	mov	r0, r24
    f0ea:	00 0c       	add	r0, r0
    f0ec:	99 0b       	sbc	r25, r25
    f0ee:	02 c0       	rjmp	.+4      	; 0xf0f4 <readdir+0x38>
    f0f0:	83 e2       	ldi	r24, 0x23	; 35
    f0f2:	90 e0       	ldi	r25, 0x00	; 0
    f0f4:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f0f8:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    f0fc:	80 e0       	ldi	r24, 0x00	; 0
    f0fe:	90 e0       	ldi	r25, 0x00	; 0
    f100:	16 c0       	rjmp	.+44     	; 0xf12e <readdir+0x72>
    f102:	be 01       	movw	r22, r28
    f104:	69 5e       	subi	r22, 0xE9	; 233
    f106:	7f 4f       	sbci	r23, 0xFF	; 255
    f108:	fb 01       	movw	r30, r22
    f10a:	01 90       	ld	r0, Z+
    f10c:	00 20       	and	r0, r0
    f10e:	e9 f7       	brne	.-6      	; 0xf10a <readdir+0x4e>
    f110:	31 97       	sbiw	r30, 0x01	; 1
    f112:	8f 01       	movw	r16, r30
    f114:	06 1b       	sub	r16, r22
    f116:	17 0b       	sbc	r17, r23
    f118:	a8 01       	movw	r20, r16
    f11a:	80 e3       	ldi	r24, 0x30	; 48
    f11c:	98 e1       	ldi	r25, 0x18	; 24
    f11e:	0e 94 78 31 	call	0x62f0	; 0x62f0 <strncpy>
    f122:	f8 01       	movw	r30, r16
    f124:	e0 5d       	subi	r30, 0xD0	; 208
    f126:	f7 4e       	sbci	r31, 0xE7	; 231
    f128:	10 82       	st	Z, r1
    f12a:	80 e3       	ldi	r24, 0x30	; 48
    f12c:	98 e1       	ldi	r25, 0x18	; 24
    f12e:	ca 5e       	subi	r28, 0xEA	; 234
    f130:	de 4f       	sbci	r29, 0xFE	; 254
    f132:	e4 e0       	ldi	r30, 0x04	; 4
    f134:	0c 94 37 e7 	jmp	0x1ce6e	; 0x1ce6e <__epilogue_restores__+0x1c>

0000f138 <perror>:
    f138:	ad b7       	in	r26, 0x3d	; 61
    f13a:	be b7       	in	r27, 0x3e	; 62
    f13c:	17 97       	sbiw	r26, 0x07	; 7
    f13e:	0f b6       	in	r0, 0x3f	; 63
    f140:	f8 94       	cli
    f142:	be bf       	out	0x3e, r27	; 62
    f144:	0f be       	out	0x3f, r0	; 63
    f146:	ad bf       	out	0x3d, r26	; 61
    f148:	20 91 bd 1c 	lds	r18, 0x1CBD	; 0x801cbd <errno>
    f14c:	30 91 be 1c 	lds	r19, 0x1CBE	; 0x801cbe <errno+0x1>
    f150:	23 32       	cpi	r18, 0x23	; 35
    f152:	31 05       	cpc	r19, r1
    f154:	40 f4       	brcc	.+16     	; 0xf166 <perror+0x2e>
    f156:	22 0f       	add	r18, r18
    f158:	33 1f       	adc	r19, r19
    f15a:	f9 01       	movw	r30, r18
    f15c:	ea 5c       	subi	r30, 0xCA	; 202
    f15e:	fe 4f       	sbci	r31, 0xFE	; 254
    f160:	20 81       	ld	r18, Z
    f162:	31 81       	ldd	r19, Z+1	; 0x01
    f164:	04 c0       	rjmp	.+8      	; 0xf16e <perror+0x36>
    f166:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <sys_errlist+0x46>
    f16a:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <sys_errlist+0x47>
    f16e:	00 97       	sbiw	r24, 0x00	; 0
    f170:	99 f0       	breq	.+38     	; 0xf198 <perror+0x60>
    f172:	fc 01       	movw	r30, r24
    f174:	40 81       	ld	r20, Z
    f176:	44 23       	and	r20, r20
    f178:	79 f0       	breq	.+30     	; 0xf198 <perror+0x60>
    f17a:	ed b7       	in	r30, 0x3d	; 61
    f17c:	fe b7       	in	r31, 0x3e	; 62
    f17e:	37 83       	std	Z+7, r19	; 0x07
    f180:	26 83       	std	Z+6, r18	; 0x06
    f182:	95 83       	std	Z+5, r25	; 0x05
    f184:	84 83       	std	Z+4, r24	; 0x04
    f186:	82 ea       	ldi	r24, 0xA2	; 162
    f188:	9b e0       	ldi	r25, 0x0B	; 11
    f18a:	a0 e0       	ldi	r26, 0x00	; 0
    f18c:	81 83       	std	Z+1, r24	; 0x01
    f18e:	92 83       	std	Z+2, r25	; 0x02
    f190:	a3 83       	std	Z+3, r26	; 0x03
    f192:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    f196:	0c c0       	rjmp	.+24     	; 0xf1b0 <perror+0x78>
    f198:	ed b7       	in	r30, 0x3d	; 61
    f19a:	fe b7       	in	r31, 0x3e	; 62
    f19c:	35 83       	std	Z+5, r19	; 0x05
    f19e:	24 83       	std	Z+4, r18	; 0x04
    f1a0:	8e e9       	ldi	r24, 0x9E	; 158
    f1a2:	9b e0       	ldi	r25, 0x0B	; 11
    f1a4:	a0 e0       	ldi	r26, 0x00	; 0
    f1a6:	81 83       	std	Z+1, r24	; 0x01
    f1a8:	92 83       	std	Z+2, r25	; 0x02
    f1aa:	a3 83       	std	Z+3, r26	; 0x03
    f1ac:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    f1b0:	ad b7       	in	r26, 0x3d	; 61
    f1b2:	be b7       	in	r27, 0x3e	; 62
    f1b4:	17 96       	adiw	r26, 0x07	; 7
    f1b6:	0f b6       	in	r0, 0x3f	; 63
    f1b8:	f8 94       	cli
    f1ba:	be bf       	out	0x3e, r27	; 62
    f1bc:	0f be       	out	0x3f, r0	; 63
    f1be:	ad bf       	out	0x3d, r26	; 61
    f1c0:	08 95       	ret

0000f1c2 <fdevopen>:
    f1c2:	0f 93       	push	r16
    f1c4:	1f 93       	push	r17
    f1c6:	cf 93       	push	r28
    f1c8:	df 93       	push	r29
    f1ca:	00 97       	sbiw	r24, 0x00	; 0
    f1cc:	31 f4       	brne	.+12     	; 0xf1da <fdevopen+0x18>
    f1ce:	61 15       	cp	r22, r1
    f1d0:	71 05       	cpc	r23, r1
    f1d2:	19 f4       	brne	.+6      	; 0xf1da <fdevopen+0x18>
    f1d4:	80 e0       	ldi	r24, 0x00	; 0
    f1d6:	90 e0       	ldi	r25, 0x00	; 0
    f1d8:	3a c0       	rjmp	.+116    	; 0xf24e <fdevopen+0x8c>
    f1da:	8b 01       	movw	r16, r22
    f1dc:	ec 01       	movw	r28, r24
    f1de:	6e e0       	ldi	r22, 0x0E	; 14
    f1e0:	70 e0       	ldi	r23, 0x00	; 0
    f1e2:	81 e0       	ldi	r24, 0x01	; 1
    f1e4:	90 e0       	ldi	r25, 0x00	; 0
    f1e6:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <safecalloc>
    f1ea:	fc 01       	movw	r30, r24
    f1ec:	89 2b       	or	r24, r25
    f1ee:	91 f3       	breq	.-28     	; 0xf1d4 <fdevopen+0x12>
    f1f0:	80 e8       	ldi	r24, 0x80	; 128
    f1f2:	83 83       	std	Z+3, r24	; 0x03
    f1f4:	01 15       	cp	r16, r1
    f1f6:	11 05       	cpc	r17, r1
    f1f8:	71 f0       	breq	.+28     	; 0xf216 <fdevopen+0x54>
    f1fa:	13 87       	std	Z+11, r17	; 0x0b
    f1fc:	02 87       	std	Z+10, r16	; 0x0a
    f1fe:	81 e8       	ldi	r24, 0x81	; 129
    f200:	83 83       	std	Z+3, r24	; 0x03
    f202:	80 91 bf 1c 	lds	r24, 0x1CBF	; 0x801cbf <__iob>
    f206:	90 91 c0 1c 	lds	r25, 0x1CC0	; 0x801cc0 <__iob+0x1>
    f20a:	89 2b       	or	r24, r25
    f20c:	21 f4       	brne	.+8      	; 0xf216 <fdevopen+0x54>
    f20e:	f0 93 c0 1c 	sts	0x1CC0, r31	; 0x801cc0 <__iob+0x1>
    f212:	e0 93 bf 1c 	sts	0x1CBF, r30	; 0x801cbf <__iob>
    f216:	20 97       	sbiw	r28, 0x00	; 0
    f218:	c9 f0       	breq	.+50     	; 0xf24c <fdevopen+0x8a>
    f21a:	d1 87       	std	Z+9, r29	; 0x09
    f21c:	c0 87       	std	Z+8, r28	; 0x08
    f21e:	83 81       	ldd	r24, Z+3	; 0x03
    f220:	82 60       	ori	r24, 0x02	; 2
    f222:	83 83       	std	Z+3, r24	; 0x03
    f224:	80 91 c1 1c 	lds	r24, 0x1CC1	; 0x801cc1 <__iob+0x2>
    f228:	90 91 c2 1c 	lds	r25, 0x1CC2	; 0x801cc2 <__iob+0x3>
    f22c:	89 2b       	or	r24, r25
    f22e:	21 f4       	brne	.+8      	; 0xf238 <fdevopen+0x76>
    f230:	f0 93 c2 1c 	sts	0x1CC2, r31	; 0x801cc2 <__iob+0x3>
    f234:	e0 93 c1 1c 	sts	0x1CC1, r30	; 0x801cc1 <__iob+0x2>
    f238:	80 91 c3 1c 	lds	r24, 0x1CC3	; 0x801cc3 <__iob+0x4>
    f23c:	90 91 c4 1c 	lds	r25, 0x1CC4	; 0x801cc4 <__iob+0x5>
    f240:	89 2b       	or	r24, r25
    f242:	21 f4       	brne	.+8      	; 0xf24c <fdevopen+0x8a>
    f244:	f0 93 c4 1c 	sts	0x1CC4, r31	; 0x801cc4 <__iob+0x5>
    f248:	e0 93 c3 1c 	sts	0x1CC3, r30	; 0x801cc3 <__iob+0x4>
    f24c:	cf 01       	movw	r24, r30
    f24e:	df 91       	pop	r29
    f250:	cf 91       	pop	r28
    f252:	1f 91       	pop	r17
    f254:	0f 91       	pop	r16
    f256:	08 95       	ret

0000f258 <fat_time_to_unix>:
    f258:	a6 e1       	ldi	r26, 0x16	; 22
    f25a:	b0 e0       	ldi	r27, 0x00	; 0
    f25c:	e2 e3       	ldi	r30, 0x32	; 50
    f25e:	f9 e7       	ldi	r31, 0x79	; 121
    f260:	0c 94 1d e7 	jmp	0x1ce3a	; 0x1ce3a <__prologue_saves__+0x20>
    f264:	fe 01       	movw	r30, r28
    f266:	31 96       	adiw	r30, 0x01	; 1
    f268:	26 e1       	ldi	r18, 0x16	; 22
    f26a:	df 01       	movw	r26, r30
    f26c:	1d 92       	st	X+, r1
    f26e:	2a 95       	dec	r18
    f270:	e9 f7       	brne	.-6      	; 0xf26c <fat_time_to_unix+0x14>
    f272:	9b 01       	movw	r18, r22
    f274:	22 0f       	add	r18, r18
    f276:	33 1f       	adc	r19, r19
    f278:	2e 73       	andi	r18, 0x3E	; 62
    f27a:	33 27       	eor	r19, r19
    f27c:	3a 83       	std	Y+2, r19	; 0x02
    f27e:	29 83       	std	Y+1, r18	; 0x01
    f280:	9b 01       	movw	r18, r22
    f282:	55 e0       	ldi	r21, 0x05	; 5
    f284:	36 95       	lsr	r19
    f286:	27 95       	ror	r18
    f288:	5a 95       	dec	r21
    f28a:	e1 f7       	brne	.-8      	; 0xf284 <fat_time_to_unix+0x2c>
    f28c:	2f 73       	andi	r18, 0x3F	; 63
    f28e:	33 27       	eor	r19, r19
    f290:	3c 83       	std	Y+4, r19	; 0x04
    f292:	2b 83       	std	Y+3, r18	; 0x03
    f294:	27 2f       	mov	r18, r23
    f296:	26 95       	lsr	r18
    f298:	26 95       	lsr	r18
    f29a:	26 95       	lsr	r18
    f29c:	2d 83       	std	Y+5, r18	; 0x05
    f29e:	1e 82       	std	Y+6, r1	; 0x06
    f2a0:	9c 01       	movw	r18, r24
    f2a2:	2f 71       	andi	r18, 0x1F	; 31
    f2a4:	33 27       	eor	r19, r19
    f2a6:	38 87       	std	Y+8, r19	; 0x08
    f2a8:	2f 83       	std	Y+7, r18	; 0x07
    f2aa:	9c 01       	movw	r18, r24
    f2ac:	65 e0       	ldi	r22, 0x05	; 5
    f2ae:	36 95       	lsr	r19
    f2b0:	27 95       	ror	r18
    f2b2:	6a 95       	dec	r22
    f2b4:	e1 f7       	brne	.-8      	; 0xf2ae <fat_time_to_unix+0x56>
    f2b6:	2f 70       	andi	r18, 0x0F	; 15
    f2b8:	33 27       	eor	r19, r19
    f2ba:	21 50       	subi	r18, 0x01	; 1
    f2bc:	31 09       	sbc	r19, r1
    f2be:	3a 87       	std	Y+10, r19	; 0x0a
    f2c0:	29 87       	std	Y+9, r18	; 0x09
    f2c2:	9c 01       	movw	r18, r24
    f2c4:	23 2f       	mov	r18, r19
    f2c6:	33 27       	eor	r19, r19
    f2c8:	26 95       	lsr	r18
    f2ca:	20 5b       	subi	r18, 0xB0	; 176
    f2cc:	3f 4f       	sbci	r19, 0xFF	; 255
    f2ce:	3c 87       	std	Y+12, r19	; 0x0c
    f2d0:	2b 87       	std	Y+11, r18	; 0x0b
    f2d2:	cf 01       	movw	r24, r30
    f2d4:	0e 94 93 3a 	call	0x7526	; 0x7526 <timegm>
    f2d8:	66 96       	adiw	r28, 0x16	; 22
    f2da:	e2 e0       	ldi	r30, 0x02	; 2
    f2dc:	0c 94 39 e7 	jmp	0x1ce72	; 0x1ce72 <__epilogue_restores__+0x20>

0000f2e0 <stat>:
    f2e0:	a6 e1       	ldi	r26, 0x16	; 22
    f2e2:	b1 e0       	ldi	r27, 0x01	; 1
    f2e4:	e6 e7       	ldi	r30, 0x76	; 118
    f2e6:	f9 e7       	ldi	r31, 0x79	; 121
    f2e8:	0c 94 17 e7 	jmp	0x1ce2e	; 0x1ce2e <__prologue_saves__+0x14>
    f2ec:	6c 01       	movw	r12, r24
    f2ee:	8b 01       	movw	r16, r22
    f2f0:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    f2f4:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    f2f8:	6c ef       	ldi	r22, 0xFC	; 252
    f2fa:	78 e0       	ldi	r23, 0x08	; 8
    f2fc:	0e 94 65 32 	call	0x64ca	; 0x64ca <MATCH>
    f300:	89 2b       	or	r24, r25
    f302:	01 f1       	breq	.+64     	; 0xf344 <stat+0x64>
    f304:	f8 01       	movw	r30, r16
    f306:	14 a2       	std	Z+36, r1	; 0x24
    f308:	15 a2       	std	Z+37, r1	; 0x25
    f30a:	16 a2       	std	Z+38, r1	; 0x26
    f30c:	17 a2       	std	Z+39, r1	; 0x27
    f30e:	10 a6       	std	Z+40, r1	; 0x28
    f310:	11 a6       	std	Z+41, r1	; 0x29
    f312:	12 a6       	std	Z+42, r1	; 0x2a
    f314:	13 a6       	std	Z+43, r1	; 0x2b
    f316:	14 a6       	std	Z+44, r1	; 0x2c
    f318:	15 a6       	std	Z+45, r1	; 0x2d
    f31a:	16 a6       	std	Z+46, r1	; 0x2e
    f31c:	17 a6       	std	Z+47, r1	; 0x2f
    f31e:	11 8a       	std	Z+17, r1	; 0x11
    f320:	10 8a       	std	Z+16, r1	; 0x10
    f322:	13 8a       	std	Z+19, r1	; 0x13
    f324:	12 8a       	std	Z+18, r1	; 0x12
    f326:	10 8e       	std	Z+24, r1	; 0x18
    f328:	11 8e       	std	Z+25, r1	; 0x19
    f32a:	12 8e       	std	Z+26, r1	; 0x1a
    f32c:	13 8e       	std	Z+27, r1	; 0x1b
    f32e:	80 e0       	ldi	r24, 0x00	; 0
    f330:	90 e4       	ldi	r25, 0x40	; 64
    f332:	a0 e0       	ldi	r26, 0x00	; 0
    f334:	b0 e0       	ldi	r27, 0x00	; 0
    f336:	80 87       	std	Z+8, r24	; 0x08
    f338:	91 87       	std	Z+9, r25	; 0x09
    f33a:	a2 87       	std	Z+10, r26	; 0x0a
    f33c:	b3 87       	std	Z+11, r27	; 0x0b
    f33e:	e1 2c       	mov	r14, r1
    f340:	f1 2c       	mov	r15, r1
    f342:	62 c0       	rjmp	.+196    	; 0xf408 <stat+0x128>
    f344:	66 ea       	ldi	r22, 0xA6	; 166
    f346:	78 e0       	ldi	r23, 0x08	; 8
    f348:	c6 01       	movw	r24, r12
    f34a:	0e 94 65 32 	call	0x64ca	; 0x64ca <MATCH>
    f34e:	89 2b       	or	r24, r25
    f350:	c9 f6       	brne	.-78     	; 0xf304 <stat+0x24>
    f352:	61 ef       	ldi	r22, 0xF1	; 241
    f354:	72 e1       	ldi	r23, 0x12	; 18
    f356:	c6 01       	movw	r24, r12
    f358:	0e 94 65 32 	call	0x64ca	; 0x64ca <MATCH>
    f35c:	7c 01       	movw	r14, r24
    f35e:	89 2b       	or	r24, r25
    f360:	89 f6       	brne	.-94     	; 0xf304 <stat+0x24>
    f362:	be 01       	movw	r22, r28
    f364:	6f 5f       	subi	r22, 0xFF	; 255
    f366:	7f 4f       	sbci	r23, 0xFF	; 255
    f368:	c6 01       	movw	r24, r12
    f36a:	0e 94 1d 64 	call	0xc83a	; 0xc83a <f_stat>
    f36e:	00 97       	sbiw	r24, 0x00	; 0
    f370:	a9 f0       	breq	.+42     	; 0xf39c <stat+0xbc>
    f372:	84 31       	cpi	r24, 0x14	; 20
    f374:	91 05       	cpc	r25, r1
    f376:	40 f4       	brcc	.+16     	; 0xf388 <stat+0xa8>
    f378:	fc 01       	movw	r30, r24
    f37a:	ea 55       	subi	r30, 0x5A	; 90
    f37c:	f4 4f       	sbci	r31, 0xF4	; 244
    f37e:	80 81       	ld	r24, Z
    f380:	08 2e       	mov	r0, r24
    f382:	00 0c       	add	r0, r0
    f384:	99 0b       	sbc	r25, r25
    f386:	02 c0       	rjmp	.+4      	; 0xf38c <stat+0xac>
    f388:	83 e2       	ldi	r24, 0x23	; 35
    f38a:	90 e0       	ldi	r25, 0x00	; 0
    f38c:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f390:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    f394:	ee 24       	eor	r14, r14
    f396:	ea 94       	dec	r14
    f398:	fe 2c       	mov	r15, r14
    f39a:	36 c0       	rjmp	.+108    	; 0xf408 <stat+0x128>
    f39c:	89 81       	ldd	r24, Y+1	; 0x01
    f39e:	9a 81       	ldd	r25, Y+2	; 0x02
    f3a0:	ab 81       	ldd	r26, Y+3	; 0x03
    f3a2:	bc 81       	ldd	r27, Y+4	; 0x04
    f3a4:	f8 01       	movw	r30, r16
    f3a6:	80 8f       	std	Z+24, r24	; 0x18
    f3a8:	91 8f       	std	Z+25, r25	; 0x19
    f3aa:	a2 8f       	std	Z+26, r26	; 0x1a
    f3ac:	b3 8f       	std	Z+27, r27	; 0x1b
    f3ae:	6f 81       	ldd	r22, Y+7	; 0x07
    f3b0:	78 85       	ldd	r23, Y+8	; 0x08
    f3b2:	8d 81       	ldd	r24, Y+5	; 0x05
    f3b4:	9e 81       	ldd	r25, Y+6	; 0x06
    f3b6:	50 df       	rcall	.-352    	; 0xf258 <fat_time_to_unix>
    f3b8:	f8 01       	movw	r30, r16
    f3ba:	64 a3       	std	Z+36, r22	; 0x24
    f3bc:	75 a3       	std	Z+37, r23	; 0x25
    f3be:	86 a3       	std	Z+38, r24	; 0x26
    f3c0:	97 a3       	std	Z+39, r25	; 0x27
    f3c2:	60 a7       	std	Z+40, r22	; 0x28
    f3c4:	71 a7       	std	Z+41, r23	; 0x29
    f3c6:	82 a7       	std	Z+42, r24	; 0x2a
    f3c8:	93 a7       	std	Z+43, r25	; 0x2b
    f3ca:	64 a7       	std	Z+44, r22	; 0x2c
    f3cc:	75 a7       	std	Z+45, r23	; 0x2d
    f3ce:	86 a7       	std	Z+46, r24	; 0x2e
    f3d0:	97 a7       	std	Z+47, r25	; 0x2f
    f3d2:	29 85       	ldd	r18, Y+9	; 0x09
    f3d4:	20 fd       	sbrc	r18, 0
    f3d6:	03 c0       	rjmp	.+6      	; 0xf3de <stat+0xfe>
    f3d8:	8f ef       	ldi	r24, 0xFF	; 255
    f3da:	91 e0       	ldi	r25, 0x01	; 1
    f3dc:	02 c0       	rjmp	.+4      	; 0xf3e2 <stat+0x102>
    f3de:	8d e6       	ldi	r24, 0x6D	; 109
    f3e0:	91 e0       	ldi	r25, 0x01	; 1
    f3e2:	48 ee       	ldi	r20, 0xE8	; 232
    f3e4:	53 e0       	ldi	r21, 0x03	; 3
    f3e6:	f8 01       	movw	r30, r16
    f3e8:	51 8b       	std	Z+17, r21	; 0x11
    f3ea:	40 8b       	std	Z+16, r20	; 0x10
    f3ec:	53 8b       	std	Z+19, r21	; 0x13
    f3ee:	42 8b       	std	Z+18, r20	; 0x12
    f3f0:	24 ff       	sbrs	r18, 4
    f3f2:	02 c0       	rjmp	.+4      	; 0xf3f8 <stat+0x118>
    f3f4:	90 64       	ori	r25, 0x40	; 64
    f3f6:	01 c0       	rjmp	.+2      	; 0xf3fa <stat+0x11a>
    f3f8:	90 68       	ori	r25, 0x80	; 128
    f3fa:	a0 e0       	ldi	r26, 0x00	; 0
    f3fc:	b0 e0       	ldi	r27, 0x00	; 0
    f3fe:	f8 01       	movw	r30, r16
    f400:	80 87       	std	Z+8, r24	; 0x08
    f402:	91 87       	std	Z+9, r25	; 0x09
    f404:	a2 87       	std	Z+10, r26	; 0x0a
    f406:	b3 87       	std	Z+11, r27	; 0x0b
    f408:	c7 01       	movw	r24, r14
    f40a:	ca 5e       	subi	r28, 0xEA	; 234
    f40c:	de 4f       	sbci	r29, 0xFE	; 254
    f40e:	e8 e0       	ldi	r30, 0x08	; 8
    f410:	0c 94 33 e7 	jmp	0x1ce66	; 0x1ce66 <__epilogue_restores__+0x14>

0000f414 <unix_time_to_fat>:
    f414:	a4 e0       	ldi	r26, 0x04	; 4
    f416:	b0 e0       	ldi	r27, 0x00	; 0
    f418:	e0 e1       	ldi	r30, 0x10	; 16
    f41a:	fa e7       	ldi	r31, 0x7A	; 122
    f41c:	0c 94 19 e7 	jmp	0x1ce32	; 0x1ce32 <__prologue_saves__+0x18>
    f420:	69 83       	std	Y+1, r22	; 0x01
    f422:	7a 83       	std	Y+2, r23	; 0x02
    f424:	8b 83       	std	Y+3, r24	; 0x03
    f426:	9c 83       	std	Y+4, r25	; 0x04
    f428:	7a 01       	movw	r14, r20
    f42a:	89 01       	movw	r16, r18
    f42c:	ce 01       	movw	r24, r28
    f42e:	01 96       	adiw	r24, 0x01	; 1
    f430:	0e 94 d4 37 	call	0x6fa8	; 0x6fa8 <gmtime>
    f434:	fc 01       	movw	r30, r24
    f436:	22 85       	ldd	r18, Z+10	; 0x0a
    f438:	33 85       	ldd	r19, Z+11	; 0x0b
    f43a:	20 55       	subi	r18, 0x50	; 80
    f43c:	31 09       	sbc	r19, r1
    f43e:	c9 01       	movw	r24, r18
    f440:	98 2f       	mov	r25, r24
    f442:	88 27       	eor	r24, r24
    f444:	99 0f       	add	r25, r25
    f446:	20 85       	ldd	r18, Z+8	; 0x08
    f448:	31 85       	ldd	r19, Z+9	; 0x09
    f44a:	2f 5f       	subi	r18, 0xFF	; 255
    f44c:	3f 4f       	sbci	r19, 0xFF	; 255
    f44e:	45 e0       	ldi	r20, 0x05	; 5
    f450:	22 0f       	add	r18, r18
    f452:	33 1f       	adc	r19, r19
    f454:	4a 95       	dec	r20
    f456:	e1 f7       	brne	.-8      	; 0xf450 <unix_time_to_fat+0x3c>
    f458:	28 2b       	or	r18, r24
    f45a:	39 2b       	or	r19, r25
    f45c:	86 81       	ldd	r24, Z+6	; 0x06
    f45e:	97 81       	ldd	r25, Z+7	; 0x07
    f460:	28 2b       	or	r18, r24
    f462:	39 2b       	or	r19, r25
    f464:	d7 01       	movw	r26, r14
    f466:	2d 93       	st	X+, r18
    f468:	3c 93       	st	X, r19
    f46a:	84 81       	ldd	r24, Z+4	; 0x04
    f46c:	20 e0       	ldi	r18, 0x00	; 0
    f46e:	30 e0       	ldi	r19, 0x00	; 0
    f470:	38 2f       	mov	r19, r24
    f472:	33 0f       	add	r19, r19
    f474:	33 0f       	add	r19, r19
    f476:	33 0f       	add	r19, r19
    f478:	82 81       	ldd	r24, Z+2	; 0x02
    f47a:	93 81       	ldd	r25, Z+3	; 0x03
    f47c:	55 e0       	ldi	r21, 0x05	; 5
    f47e:	88 0f       	add	r24, r24
    f480:	99 1f       	adc	r25, r25
    f482:	5a 95       	dec	r21
    f484:	e1 f7       	brne	.-8      	; 0xf47e <unix_time_to_fat+0x6a>
    f486:	82 2b       	or	r24, r18
    f488:	93 2b       	or	r25, r19
    f48a:	20 81       	ld	r18, Z
    f48c:	31 81       	ldd	r19, Z+1	; 0x01
    f48e:	36 95       	lsr	r19
    f490:	27 95       	ror	r18
    f492:	82 2b       	or	r24, r18
    f494:	93 2b       	or	r25, r19
    f496:	f8 01       	movw	r30, r16
    f498:	91 83       	std	Z+1, r25	; 0x01
    f49a:	80 83       	st	Z, r24
    f49c:	24 96       	adiw	r28, 0x04	; 4
    f49e:	e6 e0       	ldi	r30, 0x06	; 6
    f4a0:	0c 94 35 e7 	jmp	0x1ce6a	; 0x1ce6a <__epilogue_restores__+0x18>

0000f4a4 <utime>:
    f4a4:	aa e1       	ldi	r26, 0x1A	; 26
    f4a6:	b1 e0       	ldi	r27, 0x01	; 1
    f4a8:	e8 e5       	ldi	r30, 0x58	; 88
    f4aa:	fa e7       	ldi	r31, 0x7A	; 122
    f4ac:	0c 94 1b e7 	jmp	0x1ce36	; 0x1ce36 <__prologue_saves__+0x1c>
    f4b0:	8c 01       	movw	r16, r24
    f4b2:	61 15       	cp	r22, r1
    f4b4:	71 05       	cpc	r23, r1
    f4b6:	31 f0       	breq	.+12     	; 0xf4c4 <utime+0x20>
    f4b8:	fb 01       	movw	r30, r22
    f4ba:	64 81       	ldd	r22, Z+4	; 0x04
    f4bc:	75 81       	ldd	r23, Z+5	; 0x05
    f4be:	86 81       	ldd	r24, Z+6	; 0x06
    f4c0:	97 81       	ldd	r25, Z+7	; 0x07
    f4c2:	04 c0       	rjmp	.+8      	; 0xf4cc <utime+0x28>
    f4c4:	80 e0       	ldi	r24, 0x00	; 0
    f4c6:	90 e0       	ldi	r25, 0x00	; 0
    f4c8:	0e 94 2e 38 	call	0x705c	; 0x705c <time>
    f4cc:	9e 01       	movw	r18, r28
    f4ce:	29 5e       	subi	r18, 0xE9	; 233
    f4d0:	3e 4f       	sbci	r19, 0xFE	; 254
    f4d2:	ae 01       	movw	r20, r28
    f4d4:	47 5e       	subi	r20, 0xE7	; 231
    f4d6:	5e 4f       	sbci	r21, 0xFE	; 254
    f4d8:	9d df       	rcall	.-198    	; 0xf414 <unix_time_to_fat>
    f4da:	c7 5e       	subi	r28, 0xE7	; 231
    f4dc:	de 4f       	sbci	r29, 0xFE	; 254
    f4de:	88 81       	ld	r24, Y
    f4e0:	99 81       	ldd	r25, Y+1	; 0x01
    f4e2:	c9 51       	subi	r28, 0x19	; 25
    f4e4:	d1 40       	sbci	r29, 0x01	; 1
    f4e6:	9e 83       	std	Y+6, r25	; 0x06
    f4e8:	8d 83       	std	Y+5, r24	; 0x05
    f4ea:	c9 5e       	subi	r28, 0xE9	; 233
    f4ec:	de 4f       	sbci	r29, 0xFE	; 254
    f4ee:	88 81       	ld	r24, Y
    f4f0:	99 81       	ldd	r25, Y+1	; 0x01
    f4f2:	c7 51       	subi	r28, 0x17	; 23
    f4f4:	d1 40       	sbci	r29, 0x01	; 1
    f4f6:	98 87       	std	Y+8, r25	; 0x08
    f4f8:	8f 83       	std	Y+7, r24	; 0x07
    f4fa:	be 01       	movw	r22, r28
    f4fc:	6f 5f       	subi	r22, 0xFF	; 255
    f4fe:	7f 4f       	sbci	r23, 0xFF	; 255
    f500:	c8 01       	movw	r24, r16
    f502:	0e 94 34 68 	call	0xd068	; 0xd068 <f_utime>
    f506:	84 31       	cpi	r24, 0x14	; 20
    f508:	91 05       	cpc	r25, r1
    f50a:	40 f4       	brcc	.+16     	; 0xf51c <utime+0x78>
    f50c:	fc 01       	movw	r30, r24
    f50e:	ea 55       	subi	r30, 0x5A	; 90
    f510:	f4 4f       	sbci	r31, 0xF4	; 244
    f512:	80 81       	ld	r24, Z
    f514:	08 2e       	mov	r0, r24
    f516:	00 0c       	add	r0, r0
    f518:	99 0b       	sbc	r25, r25
    f51a:	02 c0       	rjmp	.+4      	; 0xf520 <utime+0x7c>
    f51c:	83 e2       	ldi	r24, 0x23	; 35
    f51e:	90 e0       	ldi	r25, 0x00	; 0
    f520:	c6 5e       	subi	r28, 0xE6	; 230
    f522:	de 4f       	sbci	r29, 0xFE	; 254
    f524:	e4 e0       	ldi	r30, 0x04	; 4
    f526:	0c 94 37 e7 	jmp	0x1ce6e	; 0x1ce6e <__epilogue_restores__+0x1c>

0000f52a <fileno_to_fatfs>:
    f52a:	83 30       	cpi	r24, 0x03	; 3
    f52c:	91 05       	cpc	r25, r1
    f52e:	48 f4       	brcc	.+18     	; 0xf542 <fileno_to_fatfs+0x18>
    f530:	89 e0       	ldi	r24, 0x09	; 9
    f532:	90 e0       	ldi	r25, 0x00	; 0
    f534:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f538:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    f53c:	80 e0       	ldi	r24, 0x00	; 0
    f53e:	90 e0       	ldi	r25, 0x00	; 0
    f540:	08 95       	ret
    f542:	60 dc       	rcall	.-1856   	; 0xee04 <fileno_to_stream>
    f544:	00 97       	sbiw	r24, 0x00	; 0
    f546:	d1 f3       	breq	.-12     	; 0xf53c <fileno_to_fatfs+0x12>
    f548:	fc 01       	movw	r30, r24
    f54a:	84 85       	ldd	r24, Z+12	; 0x0c
    f54c:	95 85       	ldd	r25, Z+13	; 0x0d
    f54e:	00 97       	sbiw	r24, 0x00	; 0
    f550:	79 f3       	breq	.-34     	; 0xf530 <fileno_to_fatfs+0x6>
    f552:	08 95       	ret

0000f554 <ftell>:
    f554:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    f558:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    f55c:	37 dc       	rcall	.-1938   	; 0xedcc <fileno>
    f55e:	83 30       	cpi	r24, 0x03	; 3
    f560:	91 05       	cpc	r25, r1
    f562:	48 f0       	brcs	.+18     	; 0xf576 <ftell+0x22>
    f564:	e2 df       	rcall	.-60     	; 0xf52a <fileno_to_fatfs>
    f566:	00 97       	sbiw	r24, 0x00	; 0
    f568:	51 f4       	brne	.+20     	; 0xf57e <ftell+0x2a>
    f56a:	89 e0       	ldi	r24, 0x09	; 9
    f56c:	90 e0       	ldi	r25, 0x00	; 0
    f56e:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f572:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    f576:	6f ef       	ldi	r22, 0xFF	; 255
    f578:	7f ef       	ldi	r23, 0xFF	; 255
    f57a:	cb 01       	movw	r24, r22
    f57c:	08 95       	ret
    f57e:	fc 01       	movw	r30, r24
    f580:	60 89       	ldd	r22, Z+16	; 0x10
    f582:	71 89       	ldd	r23, Z+17	; 0x11
    f584:	82 89       	ldd	r24, Z+18	; 0x12
    f586:	93 89       	ldd	r25, Z+19	; 0x13
    f588:	08 95       	ret

0000f58a <lseek>:
    f58a:	a3 e0       	ldi	r26, 0x03	; 3
    f58c:	b0 e0       	ldi	r27, 0x00	; 0
    f58e:	eb ec       	ldi	r30, 0xCB	; 203
    f590:	fa e7       	ldi	r31, 0x7A	; 122
    f592:	0c 94 15 e7 	jmp	0x1ce2a	; 0x1ce2a <__prologue_saves__+0x10>
    f596:	5c 01       	movw	r10, r24
    f598:	6a 01       	movw	r12, r20
    f59a:	7b 01       	movw	r14, r22
    f59c:	89 01       	movw	r16, r18
    f59e:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    f5a2:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    f5a6:	c1 df       	rcall	.-126    	; 0xf52a <fileno_to_fatfs>
    f5a8:	ec 01       	movw	r28, r24
    f5aa:	89 2b       	or	r24, r25
    f5ac:	19 f4       	brne	.+6      	; 0xf5b4 <lseek+0x2a>
    f5ae:	88 e1       	ldi	r24, 0x18	; 24
    f5b0:	90 e0       	ldi	r25, 0x00	; 0
    f5b2:	26 c0       	rjmp	.+76     	; 0xf600 <lseek+0x76>
    f5b4:	83 e0       	ldi	r24, 0x03	; 3
    f5b6:	a8 16       	cp	r10, r24
    f5b8:	b1 04       	cpc	r11, r1
    f5ba:	d0 f1       	brcs	.+116    	; 0xf630 <lseek+0xa6>
    f5bc:	c5 01       	movw	r24, r10
    f5be:	22 dc       	rcall	.-1980   	; 0xee04 <fileno_to_stream>
    f5c0:	fc 01       	movw	r30, r24
    f5c2:	93 81       	ldd	r25, Z+3	; 0x03
    f5c4:	90 64       	ori	r25, 0x40	; 64
    f5c6:	93 83       	std	Z+3, r25	; 0x03
    f5c8:	02 30       	cpi	r16, 0x02	; 2
    f5ca:	11 05       	cpc	r17, r1
    f5cc:	a9 f5       	brne	.+106    	; 0xf638 <lseek+0xae>
    f5ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    f5d0:	9b 85       	ldd	r25, Y+11	; 0x0b
    f5d2:	ac 85       	ldd	r26, Y+12	; 0x0c
    f5d4:	bd 85       	ldd	r27, Y+13	; 0x0d
    f5d6:	c8 0e       	add	r12, r24
    f5d8:	d9 1e       	adc	r13, r25
    f5da:	ea 1e       	adc	r14, r26
    f5dc:	fb 1e       	adc	r15, r27
    f5de:	b7 01       	movw	r22, r14
    f5e0:	a6 01       	movw	r20, r12
    f5e2:	ce 01       	movw	r24, r28
    f5e4:	0e 94 98 60 	call	0xc130	; 0xc130 <f_lseek>
    f5e8:	00 97       	sbiw	r24, 0x00	; 0
    f5ea:	79 f0       	breq	.+30     	; 0xf60a <lseek+0x80>
    f5ec:	84 31       	cpi	r24, 0x14	; 20
    f5ee:	91 05       	cpc	r25, r1
    f5f0:	58 f5       	brcc	.+86     	; 0xf648 <lseek+0xbe>
    f5f2:	fc 01       	movw	r30, r24
    f5f4:	ea 55       	subi	r30, 0x5A	; 90
    f5f6:	f4 4f       	sbci	r31, 0xF4	; 244
    f5f8:	80 81       	ld	r24, Z
    f5fa:	08 2e       	mov	r0, r24
    f5fc:	00 0c       	add	r0, r0
    f5fe:	99 0b       	sbc	r25, r25
    f600:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f604:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    f608:	13 c0       	rjmp	.+38     	; 0xf630 <lseek+0xa6>
    f60a:	68 89       	ldd	r22, Y+16	; 0x10
    f60c:	79 89       	ldd	r23, Y+17	; 0x11
    f60e:	8a 89       	ldd	r24, Y+18	; 0x12
    f610:	9b 89       	ldd	r25, Y+19	; 0x13
    f612:	c6 16       	cp	r12, r22
    f614:	d7 06       	cpc	r13, r23
    f616:	e8 06       	cpc	r14, r24
    f618:	f9 06       	cpc	r15, r25
    f61a:	c9 f0       	breq	.+50     	; 0xf64e <lseek+0xc4>
    f61c:	8a ea       	ldi	r24, 0xAA	; 170
    f61e:	9b e0       	ldi	r25, 0x0B	; 11
    f620:	a0 e0       	ldi	r26, 0x00	; 0
    f622:	ed b7       	in	r30, 0x3d	; 61
    f624:	fe b7       	in	r31, 0x3e	; 62
    f626:	81 83       	std	Z+1, r24	; 0x01
    f628:	92 83       	std	Z+2, r25	; 0x02
    f62a:	a3 83       	std	Z+3, r26	; 0x03
    f62c:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    f630:	6f ef       	ldi	r22, 0xFF	; 255
    f632:	7f ef       	ldi	r23, 0xFF	; 255
    f634:	cb 01       	movw	r24, r22
    f636:	0b c0       	rjmp	.+22     	; 0xf64e <lseek+0xc4>
    f638:	01 30       	cpi	r16, 0x01	; 1
    f63a:	11 05       	cpc	r17, r1
    f63c:	81 f6       	brne	.-96     	; 0xf5de <lseek+0x54>
    f63e:	88 89       	ldd	r24, Y+16	; 0x10
    f640:	99 89       	ldd	r25, Y+17	; 0x11
    f642:	aa 89       	ldd	r26, Y+18	; 0x12
    f644:	bb 89       	ldd	r27, Y+19	; 0x13
    f646:	c7 cf       	rjmp	.-114    	; 0xf5d6 <lseek+0x4c>
    f648:	83 e2       	ldi	r24, 0x23	; 35
    f64a:	90 e0       	ldi	r25, 0x00	; 0
    f64c:	d9 cf       	rjmp	.-78     	; 0xf600 <lseek+0x76>
    f64e:	cd b7       	in	r28, 0x3d	; 61
    f650:	de b7       	in	r29, 0x3e	; 62
    f652:	23 96       	adiw	r28, 0x03	; 3
    f654:	ea e0       	ldi	r30, 0x0A	; 10
    f656:	0c 94 31 e7 	jmp	0x1ce62	; 0x1ce62 <__epilogue_restores__+0x10>

0000f65a <fseek>:
    f65a:	cf 92       	push	r12
    f65c:	df 92       	push	r13
    f65e:	ef 92       	push	r14
    f660:	ff 92       	push	r15
    f662:	cf 93       	push	r28
    f664:	df 93       	push	r29
    f666:	6a 01       	movw	r12, r20
    f668:	7b 01       	movw	r14, r22
    f66a:	e9 01       	movw	r28, r18
    f66c:	af db       	rcall	.-2210   	; 0xedcc <fileno>
    f66e:	97 fd       	sbrc	r25, 7
    f670:	12 c0       	rjmp	.+36     	; 0xf696 <fseek+0x3c>
    f672:	9e 01       	movw	r18, r28
    f674:	b7 01       	movw	r22, r14
    f676:	a6 01       	movw	r20, r12
    f678:	88 df       	rcall	.-240    	; 0xf58a <lseek>
    f67a:	21 e0       	ldi	r18, 0x01	; 1
    f67c:	30 e0       	ldi	r19, 0x00	; 0
    f67e:	6f 3f       	cpi	r22, 0xFF	; 255
    f680:	7f 4f       	sbci	r23, 0xFF	; 255
    f682:	8f 4f       	sbci	r24, 0xFF	; 255
    f684:	9f 4f       	sbci	r25, 0xFF	; 255
    f686:	11 f0       	breq	.+4      	; 0xf68c <fseek+0x32>
    f688:	20 e0       	ldi	r18, 0x00	; 0
    f68a:	30 e0       	ldi	r19, 0x00	; 0
    f68c:	88 27       	eor	r24, r24
    f68e:	99 27       	eor	r25, r25
    f690:	82 1b       	sub	r24, r18
    f692:	93 0b       	sbc	r25, r19
    f694:	02 c0       	rjmp	.+4      	; 0xf69a <fseek+0x40>
    f696:	8f ef       	ldi	r24, 0xFF	; 255
    f698:	9f ef       	ldi	r25, 0xFF	; 255
    f69a:	df 91       	pop	r29
    f69c:	cf 91       	pop	r28
    f69e:	ff 90       	pop	r15
    f6a0:	ef 90       	pop	r14
    f6a2:	df 90       	pop	r13
    f6a4:	cf 90       	pop	r12
    f6a6:	08 95       	ret

0000f6a8 <read>:
///
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t read(int fd, const void *buf, size_t count)
{
    f6a8:	a2 e0       	ldi	r26, 0x02	; 2
    f6aa:	b0 e0       	ldi	r27, 0x00	; 0
    f6ac:	ea e5       	ldi	r30, 0x5A	; 90
    f6ae:	fb e7       	ldi	r31, 0x7B	; 123
    f6b0:	0c 94 15 e7 	jmp	0x1ce2a	; 0x1ce2a <__prologue_saves__+0x10>
    f6b4:	5c 01       	movw	r10, r24
    f6b6:	8b 01       	movw	r16, r22
    f6b8:	6a 01       	movw	r12, r20
    int ret;
    FIL *fh;
    FILE *stream;

//FIXME
    *(char *) buf = 0;
    f6ba:	fb 01       	movw	r30, r22
    f6bc:	10 82       	st	Z, r1

    errno = 0;
    f6be:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    f6c2:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>

// TTY read function
// FIXME should we really be blocking ???
    stream = fileno_to_stream(fd);
    f6c6:	9e db       	rcall	.-2244   	; 0xee04 <fileno_to_stream>
    f6c8:	7c 01       	movw	r14, r24
    if(stream == stdin)
    f6ca:	80 91 bf 1c 	lds	r24, 0x1CBF	; 0x801cbf <__iob>
    f6ce:	90 91 c0 1c 	lds	r25, 0x1CC0	; 0x801cc0 <__iob+0x1>
    f6d2:	e8 16       	cp	r14, r24
    f6d4:	f9 06       	cpc	r15, r25
    f6d6:	c9 f4       	brne	.+50     	; 0xf70a <read+0x62>
    {
        char *ptr = (char *) buf;
// ungetc is undefined for read
        stream->flags |= __SUNGET;
    f6d8:	f7 01       	movw	r30, r14
    f6da:	83 81       	ldd	r24, Z+3	; 0x03
    f6dc:	80 64       	ori	r24, 0x40	; 64
    f6de:	83 83       	std	Z+3, r24	; 0x03
        size = 0;
    f6e0:	1a 82       	std	Y+2, r1	; 0x02
    f6e2:	19 82       	std	Y+1, r1	; 0x01
    f6e4:	c0 0e       	add	r12, r16
    f6e6:	d1 1e       	adc	r13, r17
        while(count--)
    f6e8:	0c 15       	cp	r16, r12
    f6ea:	1d 05       	cpc	r17, r13
    f6ec:	09 f4       	brne	.+2      	; 0xf6f0 <read+0x48>
    f6ee:	3d c0       	rjmp	.+122    	; 0xf76a <read+0xc2>
        {
            ret = fgetc(stream);
    f6f0:	c7 01       	movw	r24, r14
    f6f2:	48 da       	rcall	.-2928   	; 0xeb84 <fgetc>
            if(ret < 0)
    f6f4:	97 fd       	sbrc	r25, 7
    f6f6:	39 c0       	rjmp	.+114    	; 0xf76a <read+0xc2>
                break;

            *ptr++ = ret;
    f6f8:	f8 01       	movw	r30, r16
    f6fa:	81 93       	st	Z+, r24
    f6fc:	8f 01       	movw	r16, r30
            ++size;
    f6fe:	89 81       	ldd	r24, Y+1	; 0x01
    f700:	9a 81       	ldd	r25, Y+2	; 0x02
    f702:	01 96       	adiw	r24, 0x01	; 1
    f704:	9a 83       	std	Y+2, r25	; 0x02
    f706:	89 83       	std	Y+1, r24	; 0x01
    f708:	ef cf       	rjmp	.-34     	; 0xf6e8 <read+0x40>
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    f70a:	80 91 c1 1c 	lds	r24, 0x1CC1	; 0x801cc1 <__iob+0x2>
    f70e:	90 91 c2 1c 	lds	r25, 0x1CC2	; 0x801cc2 <__iob+0x3>
    f712:	e8 16       	cp	r14, r24
    f714:	f9 06       	cpc	r15, r25
    f716:	71 f1       	breq	.+92     	; 0xf774 <read+0xcc>
    f718:	80 91 c3 1c 	lds	r24, 0x1CC3	; 0x801cc3 <__iob+0x4>
    f71c:	90 91 c4 1c 	lds	r25, 0x1CC4	; 0x801cc4 <__iob+0x5>
    f720:	e8 16       	cp	r14, r24
    f722:	f9 06       	cpc	r15, r25
    {
        return(-1);
    }

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f724:	39 f1       	breq	.+78     	; 0xf774 <read+0xcc>
    f726:	c5 01       	movw	r24, r10
    f728:	00 df       	rcall	.-512    	; 0xf52a <fileno_to_fatfs>
    if ( fh == NULL )
    f72a:	00 97       	sbiw	r24, 0x00	; 0
    f72c:	19 f4       	brne	.+6      	; 0xf734 <read+0x8c>
    {
        errno = EBADF;
    f72e:	89 e0       	ldi	r24, 0x09	; 9
    f730:	90 e0       	ldi	r25, 0x00	; 0
    f732:	16 c0       	rjmp	.+44     	; 0xf760 <read+0xb8>
        return(-1);
    }

    res = f_read(fh, (void *) buf, bytes, &size);
    f734:	9e 01       	movw	r18, r28
    f736:	2f 5f       	subi	r18, 0xFF	; 255
    f738:	3f 4f       	sbci	r19, 0xFF	; 255
    f73a:	a6 01       	movw	r20, r12
    f73c:	b8 01       	movw	r22, r16
    f73e:	0e 94 8c 5b 	call	0xb718	; 0xb718 <f_read>
    if(res != FR_OK)
    f742:	00 97       	sbiw	r24, 0x00	; 0
    f744:	91 f0       	breq	.+36     	; 0xf76a <read+0xc2>
    f746:	84 31       	cpi	r24, 0x14	; 20
    f748:	91 05       	cpc	r25, r1
    f74a:	40 f4       	brcc	.+16     	; 0xf75c <read+0xb4>
    f74c:	fc 01       	movw	r30, r24
    f74e:	ea 55       	subi	r30, 0x5A	; 90
    f750:	f4 4f       	sbci	r31, 0xF4	; 244
    f752:	80 81       	ld	r24, Z
    f754:	08 2e       	mov	r0, r24
    f756:	00 0c       	add	r0, r0
    f758:	99 0b       	sbc	r25, r25
    f75a:	02 c0       	rjmp	.+4      	; 0xf760 <read+0xb8>
    f75c:	83 e2       	ldi	r24, 0x23	; 35
    f75e:	90 e0       	ldi	r25, 0x00	; 0
    {
        errno = fatfs_to_errno(res);
    f760:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f764:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    f768:	05 c0       	rjmp	.+10     	; 0xf774 <read+0xcc>
        return(-1);
    }
    return ((ssize_t) size);
    f76a:	69 81       	ldd	r22, Y+1	; 0x01
    f76c:	7a 81       	ldd	r23, Y+2	; 0x02
    f76e:	80 e0       	ldi	r24, 0x00	; 0
    f770:	90 e0       	ldi	r25, 0x00	; 0
    f772:	03 c0       	rjmp	.+6      	; 0xf77a <read+0xd2>
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    {
        return(-1);
    f774:	6f ef       	ldi	r22, 0xFF	; 255
    f776:	7f ef       	ldi	r23, 0xFF	; 255
    f778:	cb 01       	movw	r24, r22
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    f77a:	22 96       	adiw	r28, 0x02	; 2
    f77c:	ea e0       	ldi	r30, 0x0A	; 10
    f77e:	0c 94 31 e7 	jmp	0x1ce62	; 0x1ce62 <__epilogue_restores__+0x10>

0000f782 <fread>:
///
/// @return count on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    f782:	0f 93       	push	r16
    f784:	1f 93       	push	r17
    f786:	cf 93       	push	r28
    f788:	df 93       	push	r29
    f78a:	ec 01       	movw	r28, r24
    f78c:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    f78e:	64 9f       	mul	r22, r20
    f790:	80 01       	movw	r16, r0
    f792:	65 9f       	mul	r22, r21
    f794:	10 0d       	add	r17, r0
    f796:	74 9f       	mul	r23, r20
    f798:	10 0d       	add	r17, r0
    f79a:	11 24       	eor	r1, r1
    int fn = fileno(stream);
    f79c:	17 db       	rcall	.-2514   	; 0xedcc <fileno>
    ssize_t ret;

// read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    f79e:	a8 01       	movw	r20, r16
    f7a0:	be 01       	movw	r22, r28
    f7a2:	82 df       	rcall	.-252    	; 0xf6a8 <read>
    if(ret < 0)
    f7a4:	97 fd       	sbrc	r25, 7
    f7a6:	02 c0       	rjmp	.+4      	; 0xf7ac <fread+0x2a>
        return(0);

    return((size_t) ret);
    f7a8:	cb 01       	movw	r24, r22
    f7aa:	02 c0       	rjmp	.+4      	; 0xf7b0 <fread+0x2e>
    ssize_t ret;

// read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    if(ret < 0)
        return(0);
    f7ac:	80 e0       	ldi	r24, 0x00	; 0
    f7ae:	90 e0       	ldi	r25, 0x00	; 0

    return((size_t) ret);
}
    f7b0:	df 91       	pop	r29
    f7b2:	cf 91       	pop	r28
    f7b4:	1f 91       	pop	r17
    f7b6:	0f 91       	pop	r16
    f7b8:	08 95       	ret

0000f7ba <syncfs>:
/// @param[in] fd: POSIX fileno to sync.
/// @return 0.
/// @return -1 on error witrh errno set.
MEMSPACE
int syncfs(int fd)
{
    f7ba:	cf 93       	push	r28
    f7bc:	df 93       	push	r29
    FIL *fh;
    FRESULT res;
    FILE *stream;

    errno = 0;
    f7be:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    f7c2:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f7c6:	83 30       	cpi	r24, 0x03	; 3
    f7c8:	91 05       	cpc	r25, r1
    f7ca:	18 f4       	brcc	.+6      	; 0xf7d2 <syncfs+0x18>

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    if(fh == NULL)
    {
        errno = EBADF;
    f7cc:	89 e0       	ldi	r24, 0x09	; 9
    f7ce:	90 e0       	ldi	r25, 0x00	; 0
    f7d0:	18 c0       	rjmp	.+48     	; 0xf802 <syncfs+0x48>
    f7d2:	ec 01       	movw	r28, r24
    if(isatty(fd))
    {
        errno = EBADF;
        return(-1);
    }
    stream = fileno_to_stream(fd);
    f7d4:	17 db       	rcall	.-2514   	; 0xee04 <fileno_to_stream>
    f7d6:	fc 01       	movw	r30, r24
// reset unget on sync
    stream->flags |= __SUNGET;
    f7d8:	93 81       	ldd	r25, Z+3	; 0x03
    f7da:	90 64       	ori	r25, 0x40	; 64
    f7dc:	93 83       	std	Z+3, r25	; 0x03

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f7de:	ce 01       	movw	r24, r28
    f7e0:	a4 de       	rcall	.-696    	; 0xf52a <fileno_to_fatfs>
    if(fh == NULL)
    f7e2:	00 97       	sbiw	r24, 0x00	; 0
    f7e4:	99 f3       	breq	.-26     	; 0xf7cc <syncfs+0x12>
    {
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    f7e6:	0e 94 6e 5e 	call	0xbcdc	; 0xbcdc <f_sync>
    if (res != FR_OK)
    f7ea:	00 97       	sbiw	r24, 0x00	; 0
    f7ec:	a1 f0       	breq	.+40     	; 0xf816 <syncfs+0x5c>
    f7ee:	84 31       	cpi	r24, 0x14	; 20
    f7f0:	91 05       	cpc	r25, r1
    f7f2:	70 f4       	brcc	.+28     	; 0xf810 <syncfs+0x56>
    f7f4:	fc 01       	movw	r30, r24
    f7f6:	ea 55       	subi	r30, 0x5A	; 90
    f7f8:	f4 4f       	sbci	r31, 0xF4	; 244
    f7fa:	80 81       	ld	r24, Z
    f7fc:	08 2e       	mov	r0, r24
    f7fe:	00 0c       	add	r0, r0
    f800:	99 0b       	sbc	r25, r25
    {
        errno = fatfs_to_errno(res);
    f802:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f806:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
        return(-1);
    f80a:	8f ef       	ldi	r24, 0xFF	; 255
    f80c:	9f ef       	ldi	r25, 0xFF	; 255
    f80e:	05 c0       	rjmp	.+10     	; 0xf81a <syncfs+0x60>
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    if (res != FR_OK)
    f810:	83 e2       	ldi	r24, 0x23	; 35
    f812:	90 e0       	ldi	r25, 0x00	; 0
    f814:	f6 cf       	rjmp	.-20     	; 0xf802 <syncfs+0x48>
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return(0);
    f816:	80 e0       	ldi	r24, 0x00	; 0
    f818:	90 e0       	ldi	r25, 0x00	; 0
}
    f81a:	df 91       	pop	r29
    f81c:	cf 91       	pop	r28
    f81e:	08 95       	ret

0000f820 <sync>:
/// - man page sync (2).
///
/// @return  void.
MEMSPACE
void sync(void)
{
    f820:	cf 93       	push	r28
    f822:	df 93       	push	r29
    FIL *fh;
    int i;

    for(i=0;i<MAX_FILES;++i)
    f824:	c0 e0       	ldi	r28, 0x00	; 0
    f826:	d0 e0       	ldi	r29, 0x00	; 0
    f828:	21 96       	adiw	r28, 0x01	; 1
    f82a:	c0 31       	cpi	r28, 0x10	; 16
    f82c:	d1 05       	cpc	r29, r1
    f82e:	51 f0       	breq	.+20     	; 0xf844 <sync+0x24>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f830:	c3 30       	cpi	r28, 0x03	; 3
    f832:	d1 05       	cpc	r29, r1
    f834:	cc f3       	brlt	.-14     	; 0xf828 <sync+0x8>
    {
        if(isatty(i))
            continue;

// fileno_to_fatfs checks for i out of bounds
        fh = fileno_to_fatfs(i);
    f836:	ce 01       	movw	r24, r28
    f838:	78 de       	rcall	.-784    	; 0xf52a <fileno_to_fatfs>
        if(fh == NULL)
    f83a:	89 2b       	or	r24, r25
    f83c:	a9 f3       	breq	.-22     	; 0xf828 <sync+0x8>
            continue;

        (void ) syncfs(i);
    f83e:	ce 01       	movw	r24, r28
    f840:	bc df       	rcall	.-136    	; 0xf7ba <syncfs>
    f842:	f2 cf       	rjmp	.-28     	; 0xf828 <sync+0x8>
    }
}
    f844:	df 91       	pop	r29
    f846:	cf 91       	pop	r28
    f848:	08 95       	ret

0000f84a <write>:
/// @param[in] count: number of bytes to write.
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t write(int fd, const void *buf, size_t count)
{
    f84a:	a2 e0       	ldi	r26, 0x02	; 2
    f84c:	b0 e0       	ldi	r27, 0x00	; 0
    f84e:	eb e2       	ldi	r30, 0x2B	; 43
    f850:	fc e7       	ldi	r31, 0x7C	; 124
    f852:	0c 94 13 e7 	jmp	0x1ce26	; 0x1ce26 <__prologue_saves__+0xc>
    f856:	8c 01       	movw	r16, r24
    f858:	b6 2e       	mov	r11, r22
    f85a:	f7 2e       	mov	r15, r23
    f85c:	4a 01       	movw	r8, r20
    UINT size;
    UINT bytes = count;
    FRESULT res;
    FIL *fh;
    FILE *stream;
    errno = 0;
    f85e:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    f862:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>

// TTY read function
    stream = fileno_to_stream(fd);
    f866:	ce da       	rcall	.-2660   	; 0xee04 <fileno_to_stream>
    f868:	6c 01       	movw	r12, r24
    if(stream == stdout || stream == stderr)
    f86a:	80 91 c1 1c 	lds	r24, 0x1CC1	; 0x801cc1 <__iob+0x2>
    f86e:	90 91 c2 1c 	lds	r25, 0x1CC2	; 0x801cc2 <__iob+0x3>
    f872:	c8 16       	cp	r12, r24
    f874:	d9 06       	cpc	r13, r25
    f876:	39 f0       	breq	.+14     	; 0xf886 <write+0x3c>
    f878:	80 91 c3 1c 	lds	r24, 0x1CC3	; 0x801cc3 <__iob+0x4>
    f87c:	90 91 c4 1c 	lds	r25, 0x1CC4	; 0x801cc4 <__iob+0x5>
    f880:	c8 16       	cp	r12, r24
    f882:	d9 06       	cpc	r13, r25
    f884:	d1 f4       	brne	.+52     	; 0xf8ba <write+0x70>
    {
        char *ptr = (char *) buf;
        size = 0;
    f886:	1a 82       	std	Y+2, r1	; 0x02
    f888:	19 82       	std	Y+1, r1	; 0x01
    f88a:	0b 2d       	mov	r16, r11
    f88c:	1f 2d       	mov	r17, r15
    f88e:	78 01       	movw	r14, r16
    f890:	e8 0c       	add	r14, r8
    f892:	f9 1c       	adc	r15, r9
        while(count--)
    f894:	0e 15       	cp	r16, r14
    f896:	1f 05       	cpc	r17, r15
    f898:	d1 f1       	breq	.+116    	; 0xf90e <write+0xc4>
        {
            int c,ret;
            c = *ptr++;
    f89a:	f8 01       	movw	r30, r16
    f89c:	a1 90       	ld	r10, Z+
    f89e:	8f 01       	movw	r16, r30
    f8a0:	b1 2c       	mov	r11, r1
            ret = fputc(c, stream);
    f8a2:	b6 01       	movw	r22, r12
    f8a4:	c5 01       	movw	r24, r10
    f8a6:	c4 d9       	rcall	.-3192   	; 0xec30 <fputc>
            if(c != ret)
    f8a8:	a8 16       	cp	r10, r24
    f8aa:	b9 06       	cpc	r11, r25
    f8ac:	81 f5       	brne	.+96     	; 0xf90e <write+0xc4>
                break;

            ++size;
    f8ae:	89 81       	ldd	r24, Y+1	; 0x01
    f8b0:	9a 81       	ldd	r25, Y+2	; 0x02
    f8b2:	01 96       	adiw	r24, 0x01	; 1
    f8b4:	9a 83       	std	Y+2, r25	; 0x02
    f8b6:	89 83       	std	Y+1, r24	; 0x01
    f8b8:	ed cf       	rjmp	.-38     	; 0xf894 <write+0x4a>
        }
        return(size);
    }
    if(stream == stdin)
    f8ba:	80 91 bf 1c 	lds	r24, 0x1CBF	; 0x801cbf <__iob>
    f8be:	90 91 c0 1c 	lds	r25, 0x1CC0	; 0x801cc0 <__iob+0x1>
    f8c2:	c8 16       	cp	r12, r24
    f8c4:	d9 06       	cpc	r13, r25
    {
        return(-1);
    }

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f8c6:	41 f1       	breq	.+80     	; 0xf918 <write+0xce>
    f8c8:	c8 01       	movw	r24, r16
    f8ca:	2f de       	rcall	.-930    	; 0xf52a <fileno_to_fatfs>
    if ( fh == NULL )
    f8cc:	00 97       	sbiw	r24, 0x00	; 0
    f8ce:	19 f4       	brne	.+6      	; 0xf8d6 <write+0x8c>
    {
        errno = EBADF;
    f8d0:	89 e0       	ldi	r24, 0x09	; 9
    f8d2:	90 e0       	ldi	r25, 0x00	; 0
    f8d4:	17 c0       	rjmp	.+46     	; 0xf904 <write+0xba>
        return(-1);
    }

    res = f_write(fh, buf, bytes, &size);
    f8d6:	9e 01       	movw	r18, r28
    f8d8:	2f 5f       	subi	r18, 0xFF	; 255
    f8da:	3f 4f       	sbci	r19, 0xFF	; 255
    f8dc:	a4 01       	movw	r20, r8
    f8de:	6b 2d       	mov	r22, r11
    f8e0:	7f 2d       	mov	r23, r15
    f8e2:	0e 94 d7 5c 	call	0xb9ae	; 0xb9ae <f_write>
    if(res != FR_OK)
    f8e6:	00 97       	sbiw	r24, 0x00	; 0
    f8e8:	91 f0       	breq	.+36     	; 0xf90e <write+0xc4>
    f8ea:	84 31       	cpi	r24, 0x14	; 20
    f8ec:	91 05       	cpc	r25, r1
    f8ee:	40 f4       	brcc	.+16     	; 0xf900 <write+0xb6>
    f8f0:	fc 01       	movw	r30, r24
    f8f2:	ea 55       	subi	r30, 0x5A	; 90
    f8f4:	f4 4f       	sbci	r31, 0xF4	; 244
    f8f6:	80 81       	ld	r24, Z
    f8f8:	08 2e       	mov	r0, r24
    f8fa:	00 0c       	add	r0, r0
    f8fc:	99 0b       	sbc	r25, r25
    f8fe:	02 c0       	rjmp	.+4      	; 0xf904 <write+0xba>
    f900:	83 e2       	ldi	r24, 0x23	; 35
    f902:	90 e0       	ldi	r25, 0x00	; 0
    {
        errno = fatfs_to_errno(res);
    f904:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f908:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    f90c:	05 c0       	rjmp	.+10     	; 0xf918 <write+0xce>
        return(-1);
    }
    return ((ssize_t) size);
    f90e:	69 81       	ldd	r22, Y+1	; 0x01
    f910:	7a 81       	ldd	r23, Y+2	; 0x02
    f912:	80 e0       	ldi	r24, 0x00	; 0
    f914:	90 e0       	ldi	r25, 0x00	; 0
    f916:	03 c0       	rjmp	.+6      	; 0xf91e <write+0xd4>
        }
        return(size);
    }
    if(stream == stdin)
    {
        return(-1);
    f918:	6f ef       	ldi	r22, 0xFF	; 255
    f91a:	7f ef       	ldi	r23, 0xFF	; 255
    f91c:	cb 01       	movw	r24, r22
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    f91e:	22 96       	adiw	r28, 0x02	; 2
    f920:	ec e0       	ldi	r30, 0x0C	; 12
    f922:	0c 94 2f e7 	jmp	0x1ce5e	; 0x1ce5e <__epilogue_restores__+0xc>

0000f926 <fwrite>:
///
/// @return count written on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    f926:	0f 93       	push	r16
    f928:	1f 93       	push	r17
    f92a:	cf 93       	push	r28
    f92c:	df 93       	push	r29
    f92e:	ec 01       	movw	r28, r24
    f930:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    f932:	64 9f       	mul	r22, r20
    f934:	80 01       	movw	r16, r0
    f936:	65 9f       	mul	r22, r21
    f938:	10 0d       	add	r17, r0
    f93a:	74 9f       	mul	r23, r20
    f93c:	10 0d       	add	r17, r0
    f93e:	11 24       	eor	r1, r1
    int fn = fileno(stream);
    f940:	45 da       	rcall	.-2934   	; 0xedcc <fileno>
    ssize_t ret;

// write () checks for fn out of bounds
    ret =  write(fn, ptr, count);
    f942:	a8 01       	movw	r20, r16
    f944:	be 01       	movw	r22, r28
    f946:	81 df       	rcall	.-254    	; 0xf84a <write>

    if(ret < 0)
    f948:	97 fd       	sbrc	r25, 7
    f94a:	02 c0       	rjmp	.+4      	; 0xf950 <fwrite+0x2a>
        return(0);

    return((size_t) ret);
    f94c:	cb 01       	movw	r24, r22
    f94e:	02 c0       	rjmp	.+4      	; 0xf954 <fwrite+0x2e>

// write () checks for fn out of bounds
    ret =  write(fn, ptr, count);

    if(ret < 0)
        return(0);
    f950:	80 e0       	ldi	r24, 0x00	; 0
    f952:	90 e0       	ldi	r25, 0x00	; 0

    return((size_t) ret);
}
    f954:	df 91       	pop	r29
    f956:	cf 91       	pop	r28
    f958:	1f 91       	pop	r17
    f95a:	0f 91       	pop	r16
    f95c:	08 95       	ret

0000f95e <free_file_descriptor>:
///
/// @return fileno on success.
/// @return -1 on failure.
MEMSPACE
int free_file_descriptor(int fileno)
{
    f95e:	0f 93       	push	r16
    f960:	1f 93       	push	r17
    f962:	cf 93       	push	r28
    f964:	df 93       	push	r29
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f966:	83 30       	cpi	r24, 0x03	; 3
    f968:	91 05       	cpc	r25, r1
    f96a:	48 f4       	brcc	.+18     	; 0xf97e <free_file_descriptor+0x20>
    FILE *stream;
    FIL *fh;

    if(isatty( fileno ))
    {
        errno = EBADF;
    f96c:	89 e0       	ldi	r24, 0x09	; 9
    f96e:	90 e0       	ldi	r25, 0x00	; 0
    f970:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f974:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
        return(-1);
    f978:	8f ef       	ldi	r24, 0xFF	; 255
    f97a:	9f ef       	ldi	r25, 0xFF	; 255
    f97c:	20 c0       	rjmp	.+64     	; 0xf9be <free_file_descriptor+0x60>
    f97e:	ec 01       	movw	r28, r24
    }

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    f980:	41 da       	rcall	.-2942   	; 0xee04 <fileno_to_stream>
    f982:	8c 01       	movw	r16, r24
    if(stream == NULL)
    f984:	89 2b       	or	r24, r25
    f986:	c1 f3       	breq	.-16     	; 0xf978 <free_file_descriptor+0x1a>
    {
        return(-1);
    }

    fh = fdev_get_udata(stream);
    f988:	f8 01       	movw	r30, r16
    f98a:	84 85       	ldd	r24, Z+12	; 0x0c
    f98c:	95 85       	ldd	r25, Z+13	; 0x0d

    if(fh != NULL)
    f98e:	00 97       	sbiw	r24, 0x00	; 0
    f990:	11 f0       	breq	.+4      	; 0xf996 <free_file_descriptor+0x38>
    {
        safefree(fh);
    f992:	0e 94 24 28 	call	0x5048	; 0x5048 <safefree>
    }

    if(stream->buf != NULL && stream->flags & __SMALLOC)
    f996:	f8 01       	movw	r30, r16
    f998:	80 81       	ld	r24, Z
    f99a:	91 81       	ldd	r25, Z+1	; 0x01
    f99c:	00 97       	sbiw	r24, 0x00	; 0
    f99e:	21 f0       	breq	.+8      	; 0xf9a8 <free_file_descriptor+0x4a>
    f9a0:	23 81       	ldd	r18, Z+3	; 0x03
    f9a2:	27 fd       	sbrc	r18, 7
    {
        safefree(stream->buf);
    f9a4:	0e 94 24 28 	call	0x5048	; 0x5048 <safefree>
    }

    __iob[fileno]  = NULL;
    f9a8:	fe 01       	movw	r30, r28
    f9aa:	ee 0f       	add	r30, r30
    f9ac:	ff 1f       	adc	r31, r31
    f9ae:	e1 54       	subi	r30, 0x41	; 65
    f9b0:	f3 4e       	sbci	r31, 0xE3	; 227
    f9b2:	11 82       	std	Z+1, r1	; 0x01
    f9b4:	10 82       	st	Z, r1
    safefree(stream);
    f9b6:	c8 01       	movw	r24, r16
    f9b8:	0e 94 24 28 	call	0x5048	; 0x5048 <safefree>
    return(fileno);
    f9bc:	ce 01       	movw	r24, r28
}
    f9be:	df 91       	pop	r29
    f9c0:	cf 91       	pop	r28
    f9c2:	1f 91       	pop	r17
    f9c4:	0f 91       	pop	r16
    f9c6:	08 95       	ret

0000f9c8 <close>:
///
/// @return 0 on sucess.
/// @return -1 on error with errno set.
MEMSPACE
int close(int fileno)
{
    f9c8:	0f 93       	push	r16
    f9ca:	1f 93       	push	r17
    f9cc:	cf 93       	push	r28
    f9ce:	df 93       	push	r29
    f9d0:	8c 01       	movw	r16, r24
    FILE *stream;
    FIL *fh;
    int res;

    errno = 0;
    f9d2:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    f9d6:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    f9da:	14 da       	rcall	.-3032   	; 0xee04 <fileno_to_stream>
    if(stream == NULL)
    f9dc:	89 2b       	or	r24, r25
    f9de:	d9 f0       	breq	.+54     	; 0xfa16 <close+0x4e>
    {
        return(-1);
    }

// fileno_to_fatfs checks for fileno out of bounds
    fh = fileno_to_fatfs(fileno);
    f9e0:	c8 01       	movw	r24, r16
    f9e2:	a3 dd       	rcall	.-1210   	; 0xf52a <fileno_to_fatfs>
    if(fh == NULL)
    f9e4:	00 97       	sbiw	r24, 0x00	; 0
    f9e6:	b9 f0       	breq	.+46     	; 0xfa16 <close+0x4e>
    {
        return(-1);
    }
    res = f_close(fh);
    f9e8:	0e 94 ee 5e 	call	0xbddc	; 0xbddc <f_close>
    free_file_descriptor(fileno);
    f9ec:	ec 01       	movw	r28, r24
    f9ee:	c8 01       	movw	r24, r16
    f9f0:	b6 df       	rcall	.-148    	; 0xf95e <free_file_descriptor>
    if (res != FR_OK)
    f9f2:	20 97       	sbiw	r28, 0x00	; 0
    f9f4:	99 f0       	breq	.+38     	; 0xfa1c <close+0x54>
    f9f6:	c4 31       	cpi	r28, 0x14	; 20
    f9f8:	d1 05       	cpc	r29, r1
    f9fa:	38 f4       	brcc	.+14     	; 0xfa0a <close+0x42>
    f9fc:	ca 55       	subi	r28, 0x5A	; 90
    f9fe:	d4 4f       	sbci	r29, 0xF4	; 244
    fa00:	88 81       	ld	r24, Y
    fa02:	08 2e       	mov	r0, r24
    fa04:	00 0c       	add	r0, r0
    fa06:	99 0b       	sbc	r25, r25
    fa08:	02 c0       	rjmp	.+4      	; 0xfa0e <close+0x46>
    fa0a:	83 e2       	ldi	r24, 0x23	; 35
    fa0c:	90 e0       	ldi	r25, 0x00	; 0
    {
        errno = fatfs_to_errno(res);
    fa0e:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    fa12:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
        return(-1);
    fa16:	8f ef       	ldi	r24, 0xFF	; 255
    fa18:	9f ef       	ldi	r25, 0xFF	; 255
    fa1a:	02 c0       	rjmp	.+4      	; 0xfa20 <close+0x58>
    }
    return(0);
    fa1c:	80 e0       	ldi	r24, 0x00	; 0
    fa1e:	90 e0       	ldi	r25, 0x00	; 0
}
    fa20:	df 91       	pop	r29
    fa22:	cf 91       	pop	r28
    fa24:	1f 91       	pop	r17
    fa26:	0f 91       	pop	r16
    fa28:	08 95       	ret

0000fa2a <fclose>:
/// @return  0 on sucess.
/// @return  -1 on error witrh errno set.
MEMSPACE
int fclose(FILE *stream)
{
    int fn = fileno(stream);
    fa2a:	d0 d9       	rcall	.-3168   	; 0xedcc <fileno>
    if(fn < 0)
    fa2c:	97 fd       	sbrc	r25, 7
        return(EOF);

    return( close(fn) );
    fa2e:	02 c0       	rjmp	.+4      	; 0xfa34 <fclose+0xa>
    fa30:	cb cf       	rjmp	.-106    	; 0xf9c8 <close>
    fa32:	08 95       	ret
MEMSPACE
int fclose(FILE *stream)
{
    int fn = fileno(stream);
    if(fn < 0)
        return(EOF);
    fa34:	8f ef       	ldi	r24, 0xFF	; 255
    fa36:	9f ef       	ldi	r25, 0xFF	; 255

    return( close(fn) );
}
    fa38:	08 95       	ret

0000fa3a <new_file_descriptor>:
///
/// @return fileno on success.
/// @return -1 on failure with errno set.
MEMSPACE
int new_file_descriptor( void )
{
    fa3a:	0f 93       	push	r16
    fa3c:	1f 93       	push	r17
    fa3e:	cf 93       	push	r28
    fa40:	df 93       	push	r29
    fa42:	ef eb       	ldi	r30, 0xBF	; 191
    fa44:	fc e1       	ldi	r31, 0x1C	; 28
    int i;
    FILE *stream;
    FIL *fh;

    for(i=0;i<MAX_FILES;++i)
    fa46:	c0 e0       	ldi	r28, 0x00	; 0
    fa48:	d0 e0       	ldi	r29, 0x00	; 0
    fa4a:	21 96       	adiw	r28, 0x01	; 1
    fa4c:	c0 31       	cpi	r28, 0x10	; 16
    fa4e:	d1 05       	cpc	r29, r1
    fa50:	49 f0       	breq	.+18     	; 0xfa64 <new_file_descriptor+0x2a>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    fa52:	c3 30       	cpi	r28, 0x03	; 3
    fa54:	d1 05       	cpc	r29, r1
    fa56:	24 f0       	brlt	.+8      	; 0xfa60 <new_file_descriptor+0x26>

    for(i=0;i<MAX_FILES;++i)
    {
        if(isatty(i))
            continue;
        if( __iob[i] == NULL)
    fa58:	82 81       	ldd	r24, Z+2	; 0x02
    fa5a:	93 81       	ldd	r25, Z+3	; 0x03
    fa5c:	89 2b       	or	r24, r25
    fa5e:	59 f0       	breq	.+22     	; 0xfa76 <new_file_descriptor+0x3c>
    fa60:	32 96       	adiw	r30, 0x02	; 2
    fa62:	f3 cf       	rjmp	.-26     	; 0xfa4a <new_file_descriptor+0x10>
            __iob[i]  = stream;
            fdev_set_udata(stream, (void *) fh);
            return(i);
        }
    }
    errno = ENFILE;
    fa64:	87 e1       	ldi	r24, 0x17	; 23
    fa66:	90 e0       	ldi	r25, 0x00	; 0
    fa68:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    fa6c:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    return(-1);
    fa70:	8f ef       	ldi	r24, 0xFF	; 255
    fa72:	9f ef       	ldi	r25, 0xFF	; 255
    fa74:	22 c0       	rjmp	.+68     	; 0xfaba <new_file_descriptor+0x80>
    {
        if(isatty(i))
            continue;
        if( __iob[i] == NULL)
        {
            stream = (FILE *) safecalloc(sizeof(FILE),1);
    fa76:	61 e0       	ldi	r22, 0x01	; 1
    fa78:	70 e0       	ldi	r23, 0x00	; 0
    fa7a:	8e e0       	ldi	r24, 0x0E	; 14
    fa7c:	90 e0       	ldi	r25, 0x00	; 0
    fa7e:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <safecalloc>
    fa82:	8c 01       	movw	r16, r24
            if(stream == NULL)
    fa84:	89 2b       	or	r24, r25
    fa86:	59 f0       	breq	.+22     	; 0xfa9e <new_file_descriptor+0x64>
            {
                errno = ENOMEM;
                return(-1);
            }
            fh = (FIL *) safecalloc(sizeof(FIL),1);
    fa88:	61 e0       	ldi	r22, 0x01	; 1
    fa8a:	70 e0       	ldi	r23, 0x00	; 0
    fa8c:	84 e2       	ldi	r24, 0x24	; 36
    fa8e:	92 e0       	ldi	r25, 0x02	; 2
    fa90:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <safecalloc>
            if(fh == NULL)
    fa94:	00 97       	sbiw	r24, 0x00	; 0
    fa96:	31 f4       	brne	.+12     	; 0xfaa4 <new_file_descriptor+0x6a>
            {
                safefree(stream);
    fa98:	c8 01       	movw	r24, r16
    fa9a:	0e 94 24 28 	call	0x5048	; 0x5048 <safefree>
                errno = ENOMEM;
    fa9e:	8c e0       	ldi	r24, 0x0C	; 12
    faa0:	90 e0       	ldi	r25, 0x00	; 0
    faa2:	e2 cf       	rjmp	.-60     	; 0xfa68 <new_file_descriptor+0x2e>
                return(-1);
            }

            __iob[i]  = stream;
    faa4:	fe 01       	movw	r30, r28
    faa6:	ee 0f       	add	r30, r30
    faa8:	ff 1f       	adc	r31, r31
    faaa:	e1 54       	subi	r30, 0x41	; 65
    faac:	f3 4e       	sbci	r31, 0xE3	; 227
    faae:	11 83       	std	Z+1, r17	; 0x01
    fab0:	00 83       	st	Z, r16
            fdev_set_udata(stream, (void *) fh);
    fab2:	f8 01       	movw	r30, r16
    fab4:	95 87       	std	Z+13, r25	; 0x0d
    fab6:	84 87       	std	Z+12, r24	; 0x0c
{
    int i;
    FILE *stream;
    FIL *fh;

    for(i=0;i<MAX_FILES;++i)
    fab8:	ce 01       	movw	r24, r28
            return(i);
        }
    }
    errno = ENFILE;
    return(-1);
}
    faba:	df 91       	pop	r29
    fabc:	cf 91       	pop	r28
    fabe:	1f 91       	pop	r17
    fac0:	0f 91       	pop	r16
    fac2:	08 95       	ret

0000fac4 <open>:
///
/// @return fileno on success.
/// @return -1 on error with errno set.
MEMSPACE
int open(const char *pathname, int flags)
{
    fac4:	a0 e0       	ldi	r26, 0x00	; 0
    fac6:	b0 e0       	ldi	r27, 0x00	; 0
    fac8:	e8 e6       	ldi	r30, 0x68	; 104
    faca:	fd e7       	ldi	r31, 0x7D	; 125
    facc:	0c 94 11 e7 	jmp	0x1ce22	; 0x1ce22 <__prologue_saves__+0x8>
    fad0:	5c 01       	movw	r10, r24
    fad2:	6b 01       	movw	r12, r22
    int fatfs_modes;
    FILE *stream;
    FIL *fh;
    int res;

    errno = 0;
    fad4:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    fad8:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
        errno = fatfs_to_errno(res);
        return(-1);
    }
#endif

    if((flags & O_ACCMODE) == O_RDWR)
    fadc:	7b 01       	movw	r14, r22
    fade:	83 e0       	ldi	r24, 0x03	; 3
    fae0:	e8 22       	and	r14, r24
    fae2:	ff 24       	eor	r15, r15
    fae4:	e2 e0       	ldi	r30, 0x02	; 2
    fae6:	ee 16       	cp	r14, r30
    fae8:	f1 04       	cpc	r15, r1
    faea:	31 f0       	breq	.+12     	; 0xfaf8 <open+0x34>
        fatfs_modes = FA_READ | FA_WRITE;
    else if((flags & O_ACCMODE) == O_RDONLY)
    faec:	e1 14       	cp	r14, r1
    faee:	f1 04       	cpc	r15, r1
    faf0:	31 f0       	breq	.+12     	; 0xfafe <open+0x3a>
        fatfs_modes = FA_READ;
    else
        fatfs_modes = FA_WRITE;
    faf2:	02 e0       	ldi	r16, 0x02	; 2
    faf4:	10 e0       	ldi	r17, 0x00	; 0
    faf6:	05 c0       	rjmp	.+10     	; 0xfb02 <open+0x3e>
        return(-1);
    }
#endif

    if((flags & O_ACCMODE) == O_RDWR)
        fatfs_modes = FA_READ | FA_WRITE;
    faf8:	03 e0       	ldi	r16, 0x03	; 3
    fafa:	10 e0       	ldi	r17, 0x00	; 0
    fafc:	02 c0       	rjmp	.+4      	; 0xfb02 <open+0x3e>
    else if((flags & O_ACCMODE) == O_RDONLY)
        fatfs_modes = FA_READ;
    fafe:	01 e0       	ldi	r16, 0x01	; 1
    fb00:	10 e0       	ldi	r17, 0x00	; 0
    else
        fatfs_modes = FA_WRITE;

    if(flags & O_CREAT)
    fb02:	c6 fe       	sbrs	r12, 6
    fb04:	05 c0       	rjmp	.+10     	; 0xfb10 <open+0x4c>
    {
        if(flags & O_TRUNC)
    fb06:	d1 fe       	sbrs	r13, 1
    fb08:	02 c0       	rjmp	.+4      	; 0xfb0e <open+0x4a>
            fatfs_modes |= FA_CREATE_ALWAYS;
    fb0a:	08 60       	ori	r16, 0x08	; 8
    fb0c:	01 c0       	rjmp	.+2      	; 0xfb10 <open+0x4c>
        else
            fatfs_modes |= FA_OPEN_ALWAYS;
    fb0e:	00 61       	ori	r16, 0x10	; 16
    }

    fileno = new_file_descriptor();
    fb10:	94 df       	rcall	.-216    	; 0xfa3a <new_file_descriptor>
    fb12:	3c 01       	movw	r6, r24

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    fb14:	77 d9       	rcall	.-3346   	; 0xee04 <fileno_to_stream>
    fb16:	ec 01       	movw	r28, r24
    fb18:	c3 01       	movw	r24, r6
    if(stream == NULL)
    {
        free_file_descriptor(fileno);
    fb1a:	20 97       	sbiw	r28, 0x00	; 0

    fileno = new_file_descriptor();

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    if(stream == NULL)
    fb1c:	09 f4       	brne	.+2      	; 0xfb20 <open+0x5c>
    fb1e:	48 c0       	rjmp	.+144    	; 0xfbb0 <open+0xec>
        free_file_descriptor(fileno);
        return(-1);
    }

// fileno_to_fatfs checks for fileno out of bounds
    fh = fileno_to_fatfs(fileno);
    fb20:	04 dd       	rcall	.-1528   	; 0xf52a <fileno_to_fatfs>
    fb22:	4c 01       	movw	r8, r24
    fb24:	00 97       	sbiw	r24, 0x00	; 0
    if(fh == NULL)
    fb26:	59 f4       	brne	.+22     	; 0xfb3e <open+0x7a>
    {
        free_file_descriptor(fileno);
    fb28:	c3 01       	movw	r24, r6
    fb2a:	19 df       	rcall	.-462    	; 0xf95e <free_file_descriptor>
    fb2c:	89 e0       	ldi	r24, 0x09	; 9
        errno = EBADF;
    fb2e:	90 e0       	ldi	r25, 0x00	; 0
    fb30:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    fb34:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    fb38:	8f ef       	ldi	r24, 0xFF	; 255
        return(-1);
    fb3a:	9f ef       	ldi	r25, 0xFF	; 255
    fb3c:	5d c0       	rjmp	.+186    	; 0xfbf8 <open+0x134>
    fb3e:	40 2f       	mov	r20, r16
    }
    res = f_open(fh, pathname, (BYTE) (fatfs_modes & 0xff));
    fb40:	b5 01       	movw	r22, r10
    fb42:	0e 94 d4 59 	call	0xb3a8	; 0xb3a8 <f_open>
    fb46:	00 97       	sbiw	r24, 0x00	; 0
    if(res != FR_OK)
    fb48:	91 f0       	breq	.+36     	; 0xfb6e <open+0xaa>
    fb4a:	84 31       	cpi	r24, 0x14	; 20
    fb4c:	91 05       	cpc	r25, r1
    fb4e:	40 f4       	brcc	.+16     	; 0xfb60 <open+0x9c>
    fb50:	fc 01       	movw	r30, r24
    fb52:	ea 55       	subi	r30, 0x5A	; 90
    fb54:	f4 4f       	sbci	r31, 0xF4	; 244
    fb56:	80 81       	ld	r24, Z
    fb58:	08 2e       	mov	r0, r24
    fb5a:	00 0c       	add	r0, r0
    fb5c:	99 0b       	sbc	r25, r25
    fb5e:	02 c0       	rjmp	.+4      	; 0xfb64 <open+0xa0>
    fb60:	83 e2       	ldi	r24, 0x23	; 35
    fb62:	90 e0       	ldi	r25, 0x00	; 0
    fb64:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    {
        errno = fatfs_to_errno(res);
    fb68:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    fb6c:	20 c0       	rjmp	.+64     	; 0xfbae <open+0xea>
    fb6e:	d2 fe       	sbrs	r13, 2
        free_file_descriptor(fileno);
        return(-1);
    }
    if(flags & O_APPEND)
    fb70:	21 c0       	rjmp	.+66     	; 0xfbb4 <open+0xf0>
    fb72:	f4 01       	movw	r30, r8
    {
///  Seek to end of the file
        res = f_lseek(fh, f_size(fh));
    fb74:	42 85       	ldd	r20, Z+10	; 0x0a
    fb76:	53 85       	ldd	r21, Z+11	; 0x0b
    fb78:	64 85       	ldd	r22, Z+12	; 0x0c
    fb7a:	75 85       	ldd	r23, Z+13	; 0x0d
    fb7c:	c4 01       	movw	r24, r8
    fb7e:	0e 94 98 60 	call	0xc130	; 0xc130 <f_lseek>
    fb82:	00 97       	sbiw	r24, 0x00	; 0
        if (res != FR_OK)
    fb84:	b9 f0       	breq	.+46     	; 0xfbb4 <open+0xf0>
    fb86:	84 31       	cpi	r24, 0x14	; 20
    fb88:	91 05       	cpc	r25, r1
    fb8a:	40 f4       	brcc	.+16     	; 0xfb9c <open+0xd8>
    fb8c:	fc 01       	movw	r30, r24
    fb8e:	ea 55       	subi	r30, 0x5A	; 90
    fb90:	f4 4f       	sbci	r31, 0xF4	; 244
    fb92:	80 81       	ld	r24, Z
    fb94:	08 2e       	mov	r0, r24
    fb96:	00 0c       	add	r0, r0
    fb98:	99 0b       	sbc	r25, r25
    fb9a:	02 c0       	rjmp	.+4      	; 0xfba0 <open+0xdc>
    fb9c:	83 e2       	ldi	r24, 0x23	; 35
    fb9e:	90 e0       	ldi	r25, 0x00	; 0
    fba0:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
        {
            errno = fatfs_to_errno(res);
    fba4:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    fba8:	c4 01       	movw	r24, r8
            f_close(fh);
    fbaa:	0e 94 ee 5e 	call	0xbddc	; 0xbddc <f_close>
            free_file_descriptor(fileno);
    fbae:	c3 01       	movw	r24, r6
    fbb0:	d6 de       	rcall	.-596    	; 0xf95e <free_file_descriptor>
    fbb2:	c2 cf       	rjmp	.-124    	; 0xfb38 <open+0x74>
    fbb4:	f2 e0       	ldi	r31, 0x02	; 2
            return(-1);
        }
    }

    if((flags & O_ACCMODE) == O_RDWR)
    fbb6:	ef 16       	cp	r14, r31
    fbb8:	f1 04       	cpc	r15, r1
    fbba:	51 f4       	brne	.+20     	; 0xfbd0 <open+0x10c>
    fbbc:	87 e7       	ldi	r24, 0x77	; 119
    {
// FIXME fdevopen should do this
        stream->put = fatfs_putc;
    fbbe:	95 e7       	ldi	r25, 0x75	; 117
    fbc0:	99 87       	std	Y+9, r25	; 0x09
    fbc2:	88 87       	std	Y+8, r24	; 0x08
    fbc4:	84 ef       	ldi	r24, 0xF4	; 244
        stream->get = fatfs_getc;
    fbc6:	94 e7       	ldi	r25, 0x74	; 116
    fbc8:	9b 87       	std	Y+11, r25	; 0x0b
    fbca:	8a 87       	std	Y+10, r24	; 0x0a
    fbcc:	83 e0       	ldi	r24, 0x03	; 3
        stream->flags = _FDEV_SETUP_RW;
    fbce:	12 c0       	rjmp	.+36     	; 0xfbf4 <open+0x130>
    fbd0:	e1 14       	cp	r14, r1
    }
    else if((flags & O_ACCMODE) == O_RDONLY)
    fbd2:	f1 04       	cpc	r15, r1
    fbd4:	41 f4       	brne	.+16     	; 0xfbe6 <open+0x122>
    fbd6:	19 86       	std	Y+9, r1	; 0x09
    {
// FIXME fdevopen should do this
        stream->put = NULL;
    fbd8:	18 86       	std	Y+8, r1	; 0x08
    fbda:	84 ef       	ldi	r24, 0xF4	; 244
        stream->get = fatfs_getc;
    fbdc:	94 e7       	ldi	r25, 0x74	; 116
    fbde:	9b 87       	std	Y+11, r25	; 0x0b
    fbe0:	8a 87       	std	Y+10, r24	; 0x0a
    fbe2:	81 e0       	ldi	r24, 0x01	; 1
        stream->flags = _FDEV_SETUP_READ;
    fbe4:	07 c0       	rjmp	.+14     	; 0xfbf4 <open+0x130>
    fbe6:	87 e7       	ldi	r24, 0x77	; 119
    }
    else
    {
// FIXME fdevopen should do this
        stream->put = fatfs_putc;
    fbe8:	95 e7       	ldi	r25, 0x75	; 117
    fbea:	99 87       	std	Y+9, r25	; 0x09
    fbec:	88 87       	std	Y+8, r24	; 0x08
    fbee:	1b 86       	std	Y+11, r1	; 0x0b
        stream->get = NULL;
    fbf0:	1a 86       	std	Y+10, r1	; 0x0a
    fbf2:	82 e0       	ldi	r24, 0x02	; 2
        stream->flags = _FDEV_SETUP_WRITE;
    fbf4:	8b 83       	std	Y+3, r24	; 0x03
    fbf6:	c3 01       	movw	r24, r6
    }

    return(fileno);
    fbf8:	cd b7       	in	r28, 0x3d	; 61
}
    fbfa:	de b7       	in	r29, 0x3e	; 62
    fbfc:	ee e0       	ldi	r30, 0x0E	; 14
    fbfe:	0c 94 2d e7 	jmp	0x1ce5a	; 0x1ce5a <__epilogue_restores__+0x8>

0000fc02 <posix_fopen_modes_to_open>:
    fc02:	cf 93       	push	r28
/// @return open mode flags.
/// @return -1 on error.
/// @warning read and write BOTH share the same stream buffer and buffer index pointers.
MEMSPACE
int posix_fopen_modes_to_open(const char *mode)
{
    fc04:	df 93       	push	r29
    fc06:	ec 01       	movw	r28, r24
    int flag = 0;

    if(modecmp(mode,"r") || modecmp(mode,"rb"))
    fc08:	62 e4       	ldi	r22, 0x42	; 66
    fc0a:	73 e0       	ldi	r23, 0x03	; 3
    fc0c:	0e 94 c7 31 	call	0x638e	; 0x638e <strcmp>
    fc10:	00 97       	sbiw	r24, 0x00	; 0
    fc12:	09 f4       	brne	.+2      	; 0xfc16 <posix_fopen_modes_to_open+0x14>
    fc14:	5d c0       	rjmp	.+186    	; 0xfcd0 <posix_fopen_modes_to_open+0xce>
    fc16:	6e ef       	ldi	r22, 0xFE	; 254
    fc18:	78 e0       	ldi	r23, 0x08	; 8
    fc1a:	ce 01       	movw	r24, r28
    fc1c:	0e 94 c7 31 	call	0x638e	; 0x638e <strcmp>
    fc20:	00 97       	sbiw	r24, 0x00	; 0
    fc22:	09 f4       	brne	.+2      	; 0xfc26 <posix_fopen_modes_to_open+0x24>
    fc24:	55 c0       	rjmp	.+170    	; 0xfcd0 <posix_fopen_modes_to_open+0xce>
    {
        flag = O_RDONLY;
        return(flag);
    }
    if(modecmp(mode,"r+") || modecmp(mode, "r+b" ) || modecmp(mode, "rb+" ))
    fc26:	61 e0       	ldi	r22, 0x01	; 1
    fc28:	79 e0       	ldi	r23, 0x09	; 9
    fc2a:	ce 01       	movw	r24, r28
    fc2c:	0e 94 c7 31 	call	0x638e	; 0x638e <strcmp>
    fc30:	89 2b       	or	r24, r25
    fc32:	09 f4       	brne	.+2      	; 0xfc36 <posix_fopen_modes_to_open+0x34>
    fc34:	42 c0       	rjmp	.+132    	; 0xfcba <posix_fopen_modes_to_open+0xb8>
    fc36:	64 e0       	ldi	r22, 0x04	; 4
    fc38:	79 e0       	ldi	r23, 0x09	; 9
    fc3a:	ce 01       	movw	r24, r28
    fc3c:	0e 94 c7 31 	call	0x638e	; 0x638e <strcmp>
    fc40:	89 2b       	or	r24, r25
    fc42:	d9 f1       	breq	.+118    	; 0xfcba <posix_fopen_modes_to_open+0xb8>
    fc44:	68 e0       	ldi	r22, 0x08	; 8
    fc46:	79 e0       	ldi	r23, 0x09	; 9
    fc48:	ce 01       	movw	r24, r28
    fc4a:	0e 94 c7 31 	call	0x638e	; 0x638e <strcmp>
    fc4e:	89 2b       	or	r24, r25
    fc50:	a1 f1       	breq	.+104    	; 0xfcba <posix_fopen_modes_to_open+0xb8>
    {
        flag = O_RDWR | O_TRUNC;
        return(flag);
    }
    if(modecmp(mode,"w") || modecmp(mode,"wb"))
    fc52:	6d eb       	ldi	r22, 0xBD	; 189
    fc54:	7a e0       	ldi	r23, 0x0A	; 10
    fc56:	ce 01       	movw	r24, r28
    fc58:	0e 94 c7 31 	call	0x638e	; 0x638e <strcmp>
    fc5c:	89 2b       	or	r24, r25
    fc5e:	81 f1       	breq	.+96     	; 0xfcc0 <posix_fopen_modes_to_open+0xbe>
    fc60:	6c e0       	ldi	r22, 0x0C	; 12
    fc62:	79 e0       	ldi	r23, 0x09	; 9
    fc64:	ce 01       	movw	r24, r28
    fc66:	0e 94 c7 31 	call	0x638e	; 0x638e <strcmp>
    fc6a:	89 2b       	or	r24, r25
    fc6c:	49 f1       	breq	.+82     	; 0xfcc0 <posix_fopen_modes_to_open+0xbe>
    {
        flag = O_WRONLY | O_CREAT | O_TRUNC;
        return(flag);
    }
    if(modecmp(mode,"w+") || modecmp(mode, "w+b" ) || modecmp(mode, "wb+" ))
    fc6e:	6f e0       	ldi	r22, 0x0F	; 15
    fc70:	79 e0       	ldi	r23, 0x09	; 9
    fc72:	ce 01       	movw	r24, r28
    fc74:	0e 94 c7 31 	call	0x638e	; 0x638e <strcmp>
    fc78:	89 2b       	or	r24, r25
    fc7a:	29 f1       	breq	.+74     	; 0xfcc6 <posix_fopen_modes_to_open+0xc4>
    fc7c:	62 e1       	ldi	r22, 0x12	; 18
    fc7e:	79 e0       	ldi	r23, 0x09	; 9
    fc80:	ce 01       	movw	r24, r28
    fc82:	0e 94 c7 31 	call	0x638e	; 0x638e <strcmp>
    fc86:	89 2b       	or	r24, r25
    fc88:	f1 f0       	breq	.+60     	; 0xfcc6 <posix_fopen_modes_to_open+0xc4>
    fc8a:	66 e1       	ldi	r22, 0x16	; 22
    fc8c:	79 e0       	ldi	r23, 0x09	; 9
    fc8e:	ce 01       	movw	r24, r28
    fc90:	0e 94 c7 31 	call	0x638e	; 0x638e <strcmp>
    fc94:	89 2b       	or	r24, r25
    fc96:	b9 f0       	breq	.+46     	; 0xfcc6 <posix_fopen_modes_to_open+0xc4>
    {
        flag = O_RDWR | O_CREAT | O_TRUNC;
        return(flag);
    }
    if(modecmp(mode,"a") || modecmp(mode,"ab"))
    fc98:	62 e2       	ldi	r22, 0x22	; 34
    fc9a:	73 e1       	ldi	r23, 0x13	; 19
    fc9c:	ce 01       	movw	r24, r28
    fc9e:	0e 94 c7 31 	call	0x638e	; 0x638e <strcmp>
    fca2:	89 2b       	or	r24, r25
    fca4:	99 f0       	breq	.+38     	; 0xfccc <posix_fopen_modes_to_open+0xca>
    fca6:	6a e1       	ldi	r22, 0x1A	; 26
    fca8:	79 e0       	ldi	r23, 0x09	; 9
    fcaa:	ce 01       	movw	r24, r28
    fcac:	0e 94 c7 31 	call	0x638e	; 0x638e <strcmp>
    fcb0:	89 2b       	or	r24, r25
    fcb2:	61 f0       	breq	.+24     	; 0xfccc <posix_fopen_modes_to_open+0xca>
        return(flag);
    }
    if(modecmp(mode,"a+") || modecmp(mode, "a+b" ) || modecmp(mode, "ab+" ))
    {
        flag = O_RDWR | O_CREAT | O_APPEND;
        return(-1);
    fcb4:	8f ef       	ldi	r24, 0xFF	; 255
    fcb6:	9f ef       	ldi	r25, 0xFF	; 255
    fcb8:	0b c0       	rjmp	.+22     	; 0xfcd0 <posix_fopen_modes_to_open+0xce>
        return(flag);
    }
    if(modecmp(mode,"r+") || modecmp(mode, "r+b" ) || modecmp(mode, "rb+" ))
    {
        flag = O_RDWR | O_TRUNC;
        return(flag);
    fcba:	82 e0       	ldi	r24, 0x02	; 2
    fcbc:	92 e0       	ldi	r25, 0x02	; 2
    fcbe:	08 c0       	rjmp	.+16     	; 0xfcd0 <posix_fopen_modes_to_open+0xce>
    }
    if(modecmp(mode,"w") || modecmp(mode,"wb"))
    {
        flag = O_WRONLY | O_CREAT | O_TRUNC;
        return(flag);
    fcc0:	81 e4       	ldi	r24, 0x41	; 65
    fcc2:	92 e0       	ldi	r25, 0x02	; 2
    fcc4:	05 c0       	rjmp	.+10     	; 0xfcd0 <posix_fopen_modes_to_open+0xce>
    }
    if(modecmp(mode,"w+") || modecmp(mode, "w+b" ) || modecmp(mode, "wb+" ))
    {
        flag = O_RDWR | O_CREAT | O_TRUNC;
        return(flag);
    fcc6:	82 e4       	ldi	r24, 0x42	; 66
    fcc8:	92 e0       	ldi	r25, 0x02	; 2
    fcca:	02 c0       	rjmp	.+4      	; 0xfcd0 <posix_fopen_modes_to_open+0xce>
    }
    if(modecmp(mode,"a") || modecmp(mode,"ab"))
    {
        flag = O_WRONLY | O_CREAT | O_APPEND;
        return(flag);
    fccc:	81 e4       	ldi	r24, 0x41	; 65
    fcce:	94 e0       	ldi	r25, 0x04	; 4
    {
        flag = O_RDWR | O_CREAT | O_APPEND;
        return(-1);
    }
    return(-1);                                   // nvalid mode
}
    fcd0:	df 91       	pop	r29
    fcd2:	cf 91       	pop	r28
    fcd4:	08 95       	ret

0000fcd6 <fopen>:
///
/// @return stream * on success.
/// @return NULL on error with errno set.
MEMSPACE
FILE *fopen(const char *path, const char *mode)
{
    fcd6:	cf 93       	push	r28
    fcd8:	df 93       	push	r29
    fcda:	ec 01       	movw	r28, r24
    fcdc:	cb 01       	movw	r24, r22
    int flags = posix_fopen_modes_to_open(mode);
    fcde:	91 df       	rcall	.-222    	; 0xfc02 <posix_fopen_modes_to_open>
    int fileno = open(path, flags);
    fce0:	bc 01       	movw	r22, r24
    fce2:	ce 01       	movw	r24, r28

// checks if fileno out of bounds
    return( fileno_to_stream(fileno) );
    fce4:	ef de       	rcall	.-546    	; 0xfac4 <open>
    fce6:	8e d8       	rcall	.-3812   	; 0xee04 <fileno_to_stream>
}
    fce8:	df 91       	pop	r29
    fcea:	cf 91       	pop	r28
    fcec:	08 95       	ret

0000fcee <fprintf>:
/// @param[in] ...: vararg list or arguments
/// @return size of printed result
MEMSPACE
int
fprintf(FILE *fp, const char *format, ...)
{
    fcee:	a8 e0       	ldi	r26, 0x08	; 8
    fcf0:	b0 e0       	ldi	r27, 0x00	; 0
    fcf2:	ed e7       	ldi	r30, 0x7D	; 125
    fcf4:	fe e7       	ldi	r31, 0x7E	; 126
    fcf6:	0c 94 1d e7 	jmp	0x1ce3a	; 0x1ce3a <__prologue_saves__+0x20>
    printf_t fn;
    va_list va;

    fn.put = _fprintf_putc;
    fcfa:	8a e6       	ldi	r24, 0x6A	; 106
    fcfc:	96 e7       	ldi	r25, 0x76	; 118
    fcfe:	9a 83       	std	Y+2, r25	; 0x02
    fd00:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    fd02:	18 86       	std	Y+8, r1	; 0x08
    fd04:	1f 82       	std	Y+7, r1	; 0x07
    fn.buffer = (void *) fp;
    fd06:	8d 85       	ldd	r24, Y+13	; 0x0d
    fd08:	9e 85       	ldd	r25, Y+14	; 0x0e
    fd0a:	9c 83       	std	Y+4, r25	; 0x04
    fd0c:	8b 83       	std	Y+3, r24	; 0x03

    va_start(va, format);
    _printf_fn(&fn, format, va);
    fd0e:	4f 85       	ldd	r20, Y+15	; 0x0f
    fd10:	58 89       	ldd	r21, Y+16	; 0x10
    fd12:	60 e8       	ldi	r22, 0x80	; 128
    fd14:	9e 01       	movw	r18, r28
    fd16:	2f 5e       	subi	r18, 0xEF	; 239
    fd18:	3f 4f       	sbci	r19, 0xFF	; 255
    fd1a:	ce 01       	movw	r24, r28
    fd1c:	01 96       	adiw	r24, 0x01	; 1
    fd1e:	0e 94 87 42 	call	0x850e	; 0x850e <_printf_fn>
    va_end(va);

    return ((int)fn.sent);
}
    fd22:	8f 81       	ldd	r24, Y+7	; 0x07
    fd24:	98 85       	ldd	r25, Y+8	; 0x08
    fd26:	28 96       	adiw	r28, 0x08	; 8
    fd28:	e2 e0       	ldi	r30, 0x02	; 2
    fd2a:	0c 94 39 e7 	jmp	0x1ce72	; 0x1ce72 <__epilogue_restores__+0x20>

0000fd2e <posix_help>:
MEMSPACE
int setpage(int count)
{
    _pagesize = count;
    return(_pagesize);
}
    fd2e:	cf 93       	push	r28
    fd30:	df 93       	push	r29
    fd32:	00 d0       	rcall	.+0      	; 0xfd34 <posix_help+0x6>
    fd34:	1f 92       	push	r1
    fd36:	ec 01       	movw	r28, r24
    fd38:	84 e7       	ldi	r24, 0x74	; 116
    fd3a:	9e e0       	ldi	r25, 0x0E	; 14
    fd3c:	a0 e0       	ldi	r26, 0x00	; 0
    fd3e:	ed b7       	in	r30, 0x3d	; 61
    fd40:	fe b7       	in	r31, 0x3e	; 62
    fd42:	81 83       	std	Z+1, r24	; 0x01
    fd44:	92 83       	std	Z+2, r25	; 0x02
    fd46:	a3 83       	std	Z+3, r26	; 0x03
    fd48:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    fd4c:	cd 2b       	or	r28, r29
    fd4e:	51 f0       	breq	.+20     	; 0xfd64 <posix_help+0x36>
    fd50:	8e ea       	ldi	r24, 0xAE	; 174
    fd52:	9d e0       	ldi	r25, 0x0D	; 13
    fd54:	a0 e0       	ldi	r26, 0x00	; 0
    fd56:	ed b7       	in	r30, 0x3d	; 61
    fd58:	fe b7       	in	r31, 0x3e	; 62
    fd5a:	81 83       	std	Z+1, r24	; 0x01
    fd5c:	92 83       	std	Z+2, r25	; 0x02
    fd5e:	a3 83       	std	Z+3, r26	; 0x03
    fd60:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    fd64:	cd b7       	in	r28, 0x3d	; 61
    fd66:	de b7       	in	r29, 0x3e	; 62
    fd68:	23 96       	adiw	r28, 0x03	; 3
    fd6a:	e2 e0       	ldi	r30, 0x02	; 2
    fd6c:	0c 94 39 e7 	jmp	0x1ce72	; 0x1ce72 <__epilogue_restores__+0x20>

0000fd70 <copy>:
    fd70:	4f 92       	push	r4
    fd72:	5f 92       	push	r5
    fd74:	6f 92       	push	r6
    fd76:	8f 92       	push	r8
    fd78:	9f 92       	push	r9
    fd7a:	af 92       	push	r10
    fd7c:	bf 92       	push	r11
    fd7e:	cf 92       	push	r12
    fd80:	df 92       	push	r13
    fd82:	ef 92       	push	r14
    fd84:	ff 92       	push	r15
    fd86:	0f 93       	push	r16
    fd88:	1f 93       	push	r17
    fd8a:	cf 93       	push	r28
    fd8c:	df 93       	push	r29
    fd8e:	ad b7       	in	r26, 0x3d	; 61
    fd90:	be b7       	in	r27, 0x3e	; 62
    fd92:	17 97       	sbiw	r26, 0x07	; 7
    fd94:	0f b6       	in	r0, 0x3f	; 63
    fd96:	f8 94       	cli
    fd98:	be bf       	out	0x3e, r27	; 62
    fd9a:	0f be       	out	0x3f, r0	; 63
    fd9c:	ad bf       	out	0x3d, r26	; 61
    fd9e:	8c 01       	movw	r16, r24
    fda0:	eb 01       	movw	r28, r22
    fda2:	ed b7       	in	r30, 0x3d	; 61
    fda4:	fe b7       	in	r31, 0x3e	; 62
    fda6:	95 83       	std	Z+5, r25	; 0x05
    fda8:	84 83       	std	Z+4, r24	; 0x04
    fdaa:	8b e0       	ldi	r24, 0x0B	; 11
    fdac:	9d e0       	ldi	r25, 0x0D	; 13
    fdae:	a0 e0       	ldi	r26, 0x00	; 0
    fdb0:	81 83       	std	Z+1, r24	; 0x01
    fdb2:	92 83       	std	Z+2, r25	; 0x02
    fdb4:	a3 83       	std	Z+3, r26	; 0x03
    fdb6:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    fdba:	6e ef       	ldi	r22, 0xFE	; 254
    fdbc:	78 e0       	ldi	r23, 0x08	; 8
    fdbe:	c8 01       	movw	r24, r16
    fdc0:	8a df       	rcall	.-236    	; 0xfcd6 <fopen>
    fdc2:	7c 01       	movw	r14, r24
    fdc4:	ed b7       	in	r30, 0x3d	; 61
    fdc6:	fe b7       	in	r31, 0x3e	; 62
    fdc8:	89 2b       	or	r24, r25
    fdca:	59 f4       	brne	.+22     	; 0xfde2 <copy+0x72>
    fdcc:	15 83       	std	Z+5, r17	; 0x05
    fdce:	04 83       	std	Z+4, r16	; 0x04
    fdd0:	8b ef       	ldi	r24, 0xFB	; 251
    fdd2:	9c e0       	ldi	r25, 0x0C	; 12
    fdd4:	a0 e0       	ldi	r26, 0x00	; 0
    fdd6:	81 83       	std	Z+1, r24	; 0x01
    fdd8:	92 83       	std	Z+2, r25	; 0x02
    fdda:	a3 83       	std	Z+3, r26	; 0x03
    fddc:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    fde0:	20 c0       	rjmp	.+64     	; 0xfe22 <copy+0xb2>
    fde2:	d5 83       	std	Z+5, r29	; 0x05
    fde4:	c4 83       	std	Z+4, r28	; 0x04
    fde6:	8e ee       	ldi	r24, 0xEE	; 238
    fde8:	9c e0       	ldi	r25, 0x0C	; 12
    fdea:	a0 e0       	ldi	r26, 0x00	; 0
    fdec:	81 83       	std	Z+1, r24	; 0x01
    fdee:	92 83       	std	Z+2, r25	; 0x02
    fdf0:	a3 83       	std	Z+3, r26	; 0x03
    fdf2:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    fdf6:	6c e0       	ldi	r22, 0x0C	; 12
    fdf8:	79 e0       	ldi	r23, 0x09	; 9
    fdfa:	ce 01       	movw	r24, r28
    fdfc:	6c df       	rcall	.-296    	; 0xfcd6 <fopen>
    fdfe:	8c 01       	movw	r16, r24
    fe00:	89 2b       	or	r24, r25
    fe02:	a1 f4       	brne	.+40     	; 0xfe2c <copy+0xbc>
    fe04:	ed b7       	in	r30, 0x3d	; 61
    fe06:	fe b7       	in	r31, 0x3e	; 62
    fe08:	d5 83       	std	Z+5, r29	; 0x05
    fe0a:	c4 83       	std	Z+4, r28	; 0x04
    fe0c:	8e ed       	ldi	r24, 0xDE	; 222
    fe0e:	9c e0       	ldi	r25, 0x0C	; 12
    fe10:	a0 e0       	ldi	r26, 0x00	; 0
    fe12:	81 83       	std	Z+1, r24	; 0x01
    fe14:	92 83       	std	Z+2, r25	; 0x02
    fe16:	a3 83       	std	Z+3, r26	; 0x03
    fe18:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    fe1c:	80 e0       	ldi	r24, 0x00	; 0
    fe1e:	90 e0       	ldi	r25, 0x00	; 0
    fe20:	04 de       	rcall	.-1016   	; 0xfa2a <fclose>
    fe22:	6f ef       	ldi	r22, 0xFF	; 255
    fe24:	7f ef       	ldi	r23, 0xFF	; 255
    fe26:	8f ef       	ldi	r24, 0xFF	; 255
    fe28:	9f ef       	ldi	r25, 0xFF	; 255
    fe2a:	68 c0       	rjmp	.+208    	; 0xfefc <copy+0x18c>
    fe2c:	61 e0       	ldi	r22, 0x01	; 1
    fe2e:	70 e0       	ldi	r23, 0x00	; 0
    fe30:	80 e0       	ldi	r24, 0x00	; 0
    fe32:	92 e0       	ldi	r25, 0x02	; 2
    fe34:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <safecalloc>
    fe38:	6c 01       	movw	r12, r24
    fe3a:	89 2b       	or	r24, r25
    fe3c:	21 f4       	brne	.+8      	; 0xfe46 <copy+0xd6>
    fe3e:	c7 01       	movw	r24, r14
    fe40:	f4 dd       	rcall	.-1048   	; 0xfa2a <fclose>
    fe42:	c8 01       	movw	r24, r16
    fe44:	ed cf       	rjmp	.-38     	; 0xfe20 <copy+0xb0>
    fe46:	81 ed       	ldi	r24, 0xD1	; 209
    fe48:	9c e0       	ldi	r25, 0x0C	; 12
    fe4a:	a0 e0       	ldi	r26, 0x00	; 0
    fe4c:	ed b7       	in	r30, 0x3d	; 61
    fe4e:	fe b7       	in	r31, 0x3e	; 62
    fe50:	81 83       	std	Z+1, r24	; 0x01
    fe52:	92 83       	std	Z+2, r25	; 0x02
    fe54:	a3 83       	std	Z+3, r26	; 0x03
    fe56:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    fe5a:	81 2c       	mov	r8, r1
    fe5c:	91 2c       	mov	r9, r1
    fe5e:	54 01       	movw	r10, r8
    fe60:	85 eb       	ldi	r24, 0xB5	; 181
    fe62:	9c e0       	ldi	r25, 0x0C	; 12
    fe64:	2c 01       	movw	r4, r24
    fe66:	61 2c       	mov	r6, r1
    fe68:	97 01       	movw	r18, r14
    fe6a:	40 e0       	ldi	r20, 0x00	; 0
    fe6c:	52 e0       	ldi	r21, 0x02	; 2
    fe6e:	61 e0       	ldi	r22, 0x01	; 1
    fe70:	70 e0       	ldi	r23, 0x00	; 0
    fe72:	c6 01       	movw	r24, r12
    fe74:	86 dc       	rcall	.-1780   	; 0xf782 <fread>
    fe76:	ec 01       	movw	r28, r24
    fe78:	18 16       	cp	r1, r24
    fe7a:	19 06       	cpc	r1, r25
    fe7c:	44 f5       	brge	.+80     	; 0xfece <copy+0x15e>
    fe7e:	98 01       	movw	r18, r16
    fe80:	ae 01       	movw	r20, r28
    fe82:	61 e0       	ldi	r22, 0x01	; 1
    fe84:	70 e0       	ldi	r23, 0x00	; 0
    fe86:	c6 01       	movw	r24, r12
    fe88:	4e dd       	rcall	.-1380   	; 0xf926 <fwrite>
    fe8a:	8c 17       	cp	r24, r28
    fe8c:	9d 07       	cpc	r25, r29
    fe8e:	5c f4       	brge	.+22     	; 0xfea6 <copy+0x136>
    fe90:	84 ec       	ldi	r24, 0xC4	; 196
    fe92:	9c e0       	ldi	r25, 0x0C	; 12
    fe94:	a0 e0       	ldi	r26, 0x00	; 0
    fe96:	ed b7       	in	r30, 0x3d	; 61
    fe98:	fe b7       	in	r31, 0x3e	; 62
    fe9a:	81 83       	std	Z+1, r24	; 0x01
    fe9c:	92 83       	std	Z+2, r25	; 0x02
    fe9e:	a3 83       	std	Z+3, r26	; 0x03
    fea0:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    fea4:	14 c0       	rjmp	.+40     	; 0xfece <copy+0x15e>
    fea6:	ce 01       	movw	r24, r28
    fea8:	dd 0f       	add	r29, r29
    feaa:	aa 0b       	sbc	r26, r26
    feac:	bb 0b       	sbc	r27, r27
    feae:	88 0e       	add	r8, r24
    feb0:	99 1e       	adc	r9, r25
    feb2:	aa 1e       	adc	r10, r26
    feb4:	bb 1e       	adc	r11, r27
    feb6:	ed b7       	in	r30, 0x3d	; 61
    feb8:	fe b7       	in	r31, 0x3e	; 62
    feba:	84 82       	std	Z+4, r8	; 0x04
    febc:	95 82       	std	Z+5, r9	; 0x05
    febe:	a6 82       	std	Z+6, r10	; 0x06
    fec0:	b7 82       	std	Z+7, r11	; 0x07
    fec2:	41 82       	std	Z+1, r4	; 0x01
    fec4:	52 82       	std	Z+2, r5	; 0x02
    fec6:	63 82       	std	Z+3, r6	; 0x03
    fec8:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    fecc:	cd cf       	rjmp	.-102    	; 0xfe68 <copy+0xf8>
    fece:	ed b7       	in	r30, 0x3d	; 61
    fed0:	fe b7       	in	r31, 0x3e	; 62
    fed2:	84 82       	std	Z+4, r8	; 0x04
    fed4:	95 82       	std	Z+5, r9	; 0x05
    fed6:	a6 82       	std	Z+6, r10	; 0x06
    fed8:	b7 82       	std	Z+7, r11	; 0x07
    feda:	82 ea       	ldi	r24, 0xA2	; 162
    fedc:	9c e0       	ldi	r25, 0x0C	; 12
    fede:	a0 e0       	ldi	r26, 0x00	; 0
    fee0:	81 83       	std	Z+1, r24	; 0x01
    fee2:	92 83       	std	Z+2, r25	; 0x02
    fee4:	a3 83       	std	Z+3, r26	; 0x03
    fee6:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    feea:	c6 01       	movw	r24, r12
    feec:	0e 94 24 28 	call	0x5048	; 0x5048 <safefree>
    fef0:	c7 01       	movw	r24, r14
    fef2:	9b dd       	rcall	.-1226   	; 0xfa2a <fclose>
    fef4:	c8 01       	movw	r24, r16
    fef6:	99 dd       	rcall	.-1230   	; 0xfa2a <fclose>
    fef8:	b4 01       	movw	r22, r8
    fefa:	c5 01       	movw	r24, r10
    fefc:	ad b7       	in	r26, 0x3d	; 61
    fefe:	be b7       	in	r27, 0x3e	; 62
    ff00:	17 96       	adiw	r26, 0x07	; 7
    ff02:	0f b6       	in	r0, 0x3f	; 63
    ff04:	f8 94       	cli
    ff06:	be bf       	out	0x3e, r27	; 62
    ff08:	0f be       	out	0x3f, r0	; 63
    ff0a:	ad bf       	out	0x3d, r26	; 61
    ff0c:	df 91       	pop	r29
    ff0e:	cf 91       	pop	r28
    ff10:	1f 91       	pop	r17
    ff12:	0f 91       	pop	r16
    ff14:	ff 90       	pop	r15
    ff16:	ef 90       	pop	r14
    ff18:	df 90       	pop	r13
    ff1a:	cf 90       	pop	r12
    ff1c:	bf 90       	pop	r11
    ff1e:	af 90       	pop	r10
    ff20:	9f 90       	pop	r9
    ff22:	8f 90       	pop	r8
    ff24:	6f 90       	pop	r6
    ff26:	5f 90       	pop	r5
    ff28:	4f 90       	pop	r4
    ff2a:	08 95       	ret

0000ff2c <testpage>:
/// @brief Used to page output of functions like cat, hexdump, etc
/// @param[in] *name: file to hexdump
/// @retrun -1 = quit, return count or 0 at new page
MEMSPACE
int testpage(int count)
{
    ff2c:	cf 93       	push	r28
    ff2e:	df 93       	push	r29
    ff30:	00 d0       	rcall	.+0      	; 0xff32 <testpage+0x6>
    ff32:	1f 92       	push	r1
    int c;
    if(count >= _pagesize)
    ff34:	20 91 80 01 	lds	r18, 0x0180	; 0x800180 <_pagesize>
    ff38:	30 91 81 01 	lds	r19, 0x0181	; 0x800181 <_pagesize+0x1>
    ff3c:	82 17       	cp	r24, r18
    ff3e:	93 07       	cpc	r25, r19
    ff40:	3c f1       	brlt	.+78     	; 0xff90 <testpage+0x64>
    {
        printf("More..");
    ff42:	8b e9       	ldi	r24, 0x9B	; 155
    ff44:	9c e0       	ldi	r25, 0x0C	; 12
    ff46:	a0 e0       	ldi	r26, 0x00	; 0
    ff48:	ed b7       	in	r30, 0x3d	; 61
    ff4a:	fe b7       	in	r31, 0x3e	; 62
    ff4c:	81 83       	std	Z+1, r24	; 0x01
    ff4e:	92 83       	std	Z+2, r25	; 0x02
    ff50:	a3 83       	std	Z+3, r26	; 0x03
    ff52:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
        {
            optimistic_yield(1000);
            wdt_reset();
        }
#endif
        c = getchar();
    ff56:	0e 94 77 76 	call	0xecee	; 0xecee <getchar>
    ff5a:	ec 01       	movw	r28, r24
        printf("\r");
    ff5c:	89 e9       	ldi	r24, 0x99	; 153
    ff5e:	9c e0       	ldi	r25, 0x0C	; 12
    ff60:	a0 e0       	ldi	r26, 0x00	; 0
    ff62:	ed b7       	in	r30, 0x3d	; 61
    ff64:	fe b7       	in	r31, 0x3e	; 62
    ff66:	81 83       	std	Z+1, r24	; 0x01
    ff68:	92 83       	std	Z+2, r25	; 0x02
    ff6a:	a3 83       	std	Z+3, r26	; 0x03
    ff6c:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
        if(c == 'q')
    ff70:	c1 37       	cpi	r28, 0x71	; 113
    ff72:	d1 05       	cpc	r29, r1
    ff74:	41 f0       	breq	.+16     	; 0xff86 <testpage+0x5a>
            return(-1);                           // quit
        if(c == '\n')
    ff76:	2a 97       	sbiw	r28, 0x0a	; 10
    ff78:	49 f4       	brne	.+18     	; 0xff8c <testpage+0x60>
            return(_pagesize-1);                  // single line
    ff7a:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <_pagesize>
    ff7e:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <_pagesize+0x1>
    ff82:	01 97       	sbiw	r24, 0x01	; 1
    ff84:	05 c0       	rjmp	.+10     	; 0xff90 <testpage+0x64>
        }
#endif
        c = getchar();
        printf("\r");
        if(c == 'q')
            return(-1);                           // quit
    ff86:	8f ef       	ldi	r24, 0xFF	; 255
    ff88:	9f ef       	ldi	r25, 0xFF	; 255
    ff8a:	02 c0       	rjmp	.+4      	; 0xff90 <testpage+0x64>
        if(c == '\n')
            return(_pagesize-1);                  // single line
        return(0);                                // new page
    ff8c:	80 e0       	ldi	r24, 0x00	; 0
    ff8e:	90 e0       	ldi	r25, 0x00	; 0
    }
    return (count);
}
    ff90:	cd b7       	in	r28, 0x3d	; 61
    ff92:	de b7       	in	r29, 0x3e	; 62
    ff94:	23 96       	adiw	r28, 0x03	; 3
    ff96:	e2 e0       	ldi	r30, 0x02	; 2
    ff98:	0c 94 39 e7 	jmp	0x1ce72	; 0x1ce72 <__epilogue_restores__+0x20>

0000ff9c <cat>:
/// @param[in] name: file name.
/// @param[in] option: --p page display
/// @return  number of characters in file or -1 on error
MEMSPACE
long cat(char *name, int dopage)
{
    ff9c:	a7 e0       	ldi	r26, 0x07	; 7
    ff9e:	b1 e0       	ldi	r27, 0x01	; 1
    ffa0:	e4 ed       	ldi	r30, 0xD4	; 212
    ffa2:	ff e7       	ldi	r31, 0x7F	; 127
    ffa4:	0c 94 13 e7 	jmp	0x1ce26	; 0x1ce26 <__prologue_saves__+0xc>
    ffa8:	8c 01       	movw	r16, r24
    ffaa:	4b 01       	movw	r8, r22
    FILE *fp;
    int count = 0;
    int size = 0;
    char line[256];

    fp = fopen(name,"rb");
    ffac:	6e ef       	ldi	r22, 0xFE	; 254
    ffae:	78 e0       	ldi	r23, 0x08	; 8
    ffb0:	92 de       	rcall	.-732    	; 0xfcd6 <fopen>
    ffb2:	7c 01       	movw	r14, r24
    if (!fp)
    ffb4:	89 2b       	or	r24, r25
    ffb6:	41 f0       	breq	.+16     	; 0xffc8 <cat+0x2c>
    ffb8:	c1 2c       	mov	r12, r1
    ffba:	d1 2c       	mov	r13, r1
    ffbc:	a1 2c       	mov	r10, r1
    ffbe:	b1 2c       	mov	r11, r1
    {
        printf("Can't open: %s\n", name);
        return(-1);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    ffc0:	8e 01       	movw	r16, r28
    ffc2:	08 5f       	subi	r16, 0xF8	; 248
    ffc4:	1f 4f       	sbci	r17, 0xFF	; 255
    ffc6:	23 c0       	rjmp	.+70     	; 0x1000e <__EEPROM_REGION_LENGTH__+0xe>
    char line[256];

    fp = fopen(name,"rb");
    if (!fp)
    {
        printf("Can't open: %s\n", name);
    ffc8:	ed b7       	in	r30, 0x3d	; 61
    ffca:	fe b7       	in	r31, 0x3e	; 62
    ffcc:	15 83       	std	Z+5, r17	; 0x05
    ffce:	04 83       	std	Z+4, r16	; 0x04
    ffd0:	84 e2       	ldi	r24, 0x24	; 36
    ffd2:	9d e0       	ldi	r25, 0x0D	; 13
    ffd4:	a0 e0       	ldi	r26, 0x00	; 0
    ffd6:	81 83       	std	Z+1, r24	; 0x01
    ffd8:	92 83       	std	Z+2, r25	; 0x02
    ffda:	a3 83       	std	Z+3, r26	; 0x03
    ffdc:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
        return(-1);
    ffe0:	cc 24       	eor	r12, r12
    ffe2:	ca 94       	dec	r12
    ffe4:	dc 2c       	mov	r13, r12
    ffe6:	76 01       	movw	r14, r12
    ffe8:	3f c0       	rjmp	.+126    	; 0x10068 <__EEPROM_REGION_LENGTH__+0x68>
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    {
        trim_tail(line);
    ffea:	c8 01       	movw	r24, r16
    ffec:	0e 94 4b 32 	call	0x6496	; 0x6496 <trim_tail>
        size += strlen(line);
    fff0:	f8 01       	movw	r30, r16
    fff2:	01 90       	ld	r0, Z+
    fff4:	00 20       	and	r0, r0
    fff6:	e9 f7       	brne	.-6      	; 0xfff2 <cat+0x56>
    fff8:	31 97       	sbiw	r30, 0x01	; 1
    fffa:	e0 1b       	sub	r30, r16
    fffc:	f1 0b       	sbc	r31, r17
    fffe:	ce 0e       	add	r12, r30
   10000:	df 1e       	adc	r13, r31
        puts(line);
   10002:	c8 01       	movw	r24, r16
   10004:	0e 94 cf 76 	call	0xed9e	; 0xed9e <puts>
        if(dopage)
   10008:	81 14       	cp	r8, r1
   1000a:	91 04       	cpc	r9, r1
   1000c:	49 f4       	brne	.+18     	; 0x10020 <__EEPROM_REGION_LENGTH__+0x20>
    if (!fp)
    {
        printf("Can't open: %s\n", name);
        return(-1);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
   1000e:	a7 01       	movw	r20, r14
   10010:	6e ef       	ldi	r22, 0xFE	; 254
   10012:	70 e0       	ldi	r23, 0x00	; 0
   10014:	c8 01       	movw	r24, r16
   10016:	0e 94 83 76 	call	0xed06	; 0xed06 <fgets>
   1001a:	89 2b       	or	r24, r25
   1001c:	31 f7       	brne	.-52     	; 0xffea <cat+0x4e>
   1001e:	06 c0       	rjmp	.+12     	; 0x1002c <__EEPROM_REGION_LENGTH__+0x2c>
        trim_tail(line);
        size += strlen(line);
        puts(line);
        if(dopage)
        {
            count = testpage(++count);
   10020:	c5 01       	movw	r24, r10
   10022:	01 96       	adiw	r24, 0x01	; 1
   10024:	83 df       	rcall	.-250    	; 0xff2c <testpage>
   10026:	5c 01       	movw	r10, r24
            if(count < 0)
   10028:	97 ff       	sbrs	r25, 7
   1002a:	f1 cf       	rjmp	.-30     	; 0x1000e <__EEPROM_REGION_LENGTH__+0xe>
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    printf("\n");
   1002c:	82 e2       	ldi	r24, 0x22	; 34
   1002e:	9d e0       	ldi	r25, 0x0D	; 13
   10030:	a0 e0       	ldi	r26, 0x00	; 0
   10032:	ed b7       	in	r30, 0x3d	; 61
   10034:	fe b7       	in	r31, 0x3e	; 62
   10036:	81 83       	std	Z+1, r24	; 0x01
   10038:	92 83       	std	Z+2, r25	; 0x02
   1003a:	a3 83       	std	Z+3, r26	; 0x03
   1003c:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    fclose(fp);
   10040:	c7 01       	movw	r24, r14
   10042:	f3 dc       	rcall	.-1562   	; 0xfa2a <fclose>
    printf("%ld bytes\n", (long)size);
   10044:	0d 2c       	mov	r0, r13
   10046:	00 0c       	add	r0, r0
   10048:	ee 08       	sbc	r14, r14
   1004a:	ff 08       	sbc	r15, r15
   1004c:	ed b7       	in	r30, 0x3d	; 61
   1004e:	fe b7       	in	r31, 0x3e	; 62
   10050:	c4 82       	std	Z+4, r12	; 0x04
   10052:	d5 82       	std	Z+5, r13	; 0x05
   10054:	e6 82       	std	Z+6, r14	; 0x06
   10056:	f7 82       	std	Z+7, r15	; 0x07
   10058:	87 e1       	ldi	r24, 0x17	; 23
   1005a:	9d e0       	ldi	r25, 0x0D	; 13
   1005c:	a0 e0       	ldi	r26, 0x00	; 0
   1005e:	81 83       	std	Z+1, r24	; 0x01
   10060:	92 83       	std	Z+2, r25	; 0x02
   10062:	a3 83       	std	Z+3, r26	; 0x03
   10064:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    return(size);
}
   10068:	c7 01       	movw	r24, r14
   1006a:	b6 01       	movw	r22, r12
   1006c:	c9 5f       	subi	r28, 0xF9	; 249
   1006e:	de 4f       	sbci	r29, 0xFE	; 254
   10070:	ec e0       	ldi	r30, 0x0C	; 12
   10072:	0c 94 2f e7 	jmp	0x1ce5e	; 0x1ce5e <__epilogue_restores__+0xc>

00010076 <ls_info>:
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
   10076:	4f 92       	push	r4
   10078:	5f 92       	push	r5
   1007a:	6f 92       	push	r6
   1007c:	7f 92       	push	r7
   1007e:	af 92       	push	r10
   10080:	bf 92       	push	r11
   10082:	cf 92       	push	r12
   10084:	df 92       	push	r13
   10086:	ef 92       	push	r14
   10088:	ff 92       	push	r15
   1008a:	0f 93       	push	r16
   1008c:	1f 93       	push	r17
   1008e:	cf 93       	push	r28
   10090:	df 93       	push	r29
   10092:	cd b7       	in	r28, 0x3d	; 61
   10094:	de b7       	in	r29, 0x3e	; 62
   10096:	c9 54       	subi	r28, 0x49	; 73
   10098:	d1 09       	sbc	r29, r1
   1009a:	0f b6       	in	r0, 0x3f	; 63
   1009c:	f8 94       	cli
   1009e:	de bf       	out	0x3e, r29	; 62
   100a0:	0f be       	out	0x3f, r0	; 63
   100a2:	cd bf       	out	0x3d, r28	; 61
   100a4:	8c 01       	movw	r16, r24
   100a6:	7b 01       	movw	r14, r22
    struct stat sp;
    uint16_t mask;
    char *cm = "rwx";
    char attr[12], *p;

    if(stat(name, &sp) == -1)
   100a8:	be 01       	movw	r22, r28
   100aa:	62 5f       	subi	r22, 0xF2	; 242
   100ac:	7f 4f       	sbci	r23, 0xFF	; 255
   100ae:	18 d9       	rcall	.-3536   	; 0xf2e0 <stat>
   100b0:	01 96       	adiw	r24, 0x01	; 1
   100b2:	79 f4       	brne	.+30     	; 0x100d2 <ls_info+0x5c>
    {
        printf("can not stat: %s\n", name);
   100b4:	ed b7       	in	r30, 0x3d	; 61
   100b6:	fe b7       	in	r31, 0x3e	; 62
   100b8:	15 83       	std	Z+5, r17	; 0x05
   100ba:	04 83       	std	Z+4, r16	; 0x04
   100bc:	87 e8       	ldi	r24, 0x87	; 135
   100be:	9c e0       	ldi	r25, 0x0C	; 12
   100c0:	a0 e0       	ldi	r26, 0x00	; 0
   100c2:	81 83       	std	Z+1, r24	; 0x01
   100c4:	92 83       	std	Z+2, r25	; 0x02
   100c6:	a3 83       	std	Z+3, r26	; 0x03
   100c8:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
        return(0);
   100cc:	80 e0       	ldi	r24, 0x00	; 0
   100ce:	90 e0       	ldi	r25, 0x00	; 0
   100d0:	77 c0       	rjmp	.+238    	; 0x101c0 <ls_info+0x14a>
    }

    if(!verbose)
   100d2:	ef 28       	or	r14, r15
   100d4:	81 f4       	brne	.+32     	; 0x100f6 <ls_info+0x80>
    {
        printf("%s\n",basename(name));
   100d6:	c8 01       	movw	r24, r16
   100d8:	0e 94 3c 77 	call	0xee78	; 0xee78 <basename>
   100dc:	ed b7       	in	r30, 0x3d	; 61
   100de:	fe b7       	in	r31, 0x3e	; 62
   100e0:	95 83       	std	Z+5, r25	; 0x05
   100e2:	84 83       	std	Z+4, r24	; 0x04
   100e4:	83 e8       	ldi	r24, 0x83	; 131
   100e6:	9c e0       	ldi	r25, 0x0C	; 12
   100e8:	a0 e0       	ldi	r26, 0x00	; 0
   100ea:	81 83       	std	Z+1, r24	; 0x01
   100ec:	92 83       	std	Z+2, r25	; 0x02
   100ee:	a3 83       	std	Z+3, r26	; 0x03
   100f0:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   100f4:	63 c0       	rjmp	.+198    	; 0x101bc <ls_info+0x146>
        return(1);
    }

    p = attr;
    if(S_ISDIR(sp.st_mode))
   100f6:	4e 88       	ldd	r4, Y+22	; 0x16
   100f8:	5f 88       	ldd	r5, Y+23	; 0x17
   100fa:	68 8c       	ldd	r6, Y+24	; 0x18
   100fc:	79 8c       	ldd	r7, Y+25	; 0x19
   100fe:	d3 01       	movw	r26, r6
   10100:	c2 01       	movw	r24, r4
   10102:	88 27       	eor	r24, r24
   10104:	90 7f       	andi	r25, 0xF0	; 240
   10106:	aa 27       	eor	r26, r26
   10108:	bb 27       	eor	r27, r27
   1010a:	81 15       	cp	r24, r1
   1010c:	90 44       	sbci	r25, 0x40	; 64
   1010e:	a1 05       	cpc	r26, r1
   10110:	b1 05       	cpc	r27, r1
   10112:	11 f4       	brne	.+4      	; 0x10118 <ls_info+0xa2>
        *p++ = 'd';
   10114:	84 e6       	ldi	r24, 0x64	; 100
   10116:	01 c0       	rjmp	.+2      	; 0x1011a <ls_info+0xa4>
    else
        *p++ = '-';
   10118:	8d e2       	ldi	r24, 0x2D	; 45
   1011a:	8e af       	std	Y+62, r24	; 0x3e
   1011c:	fe 01       	movw	r30, r28
   1011e:	fe 96       	adiw	r30, 0x3e	; 62
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
   10120:	e1 2c       	mov	r14, r1
   10122:	ff 24       	eor	r15, r15
   10124:	f3 94       	inc	r15
   10126:	20 e0       	ldi	r18, 0x00	; 0
   10128:	30 e0       	ldi	r19, 0x00	; 0
   1012a:	be 2e       	mov	r11, r30
   1012c:	af 2e       	mov	r10, r31
    {
// User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
   1012e:	4d e2       	ldi	r20, 0x2D	; 45
    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
// User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
   10130:	53 e0       	ldi	r21, 0x03	; 3
   10132:	c5 2e       	mov	r12, r21
   10134:	d1 2c       	mov	r13, r1

    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
// User
        if( sp.st_mode & mask)
   10136:	c7 01       	movw	r24, r14
   10138:	a0 e0       	ldi	r26, 0x00	; 0
   1013a:	b0 e0       	ldi	r27, 0x00	; 0
   1013c:	84 21       	and	r24, r4
   1013e:	95 21       	and	r25, r5
   10140:	a6 21       	and	r26, r6
   10142:	b7 21       	and	r27, r7
   10144:	89 2b       	or	r24, r25
   10146:	8a 2b       	or	r24, r26
   10148:	8b 2b       	or	r24, r27
   1014a:	51 f0       	breq	.+20     	; 0x10160 <ls_info+0xea>
            *p++ = cm[ i % 3];
   1014c:	c9 01       	movw	r24, r18
   1014e:	b6 01       	movw	r22, r12
   10150:	0e 94 8d e6 	call	0x1cd1a	; 0x1cd1a <__divmodhi4>
   10154:	dc 01       	movw	r26, r24
   10156:	a6 54       	subi	r26, 0x46	; 70
   10158:	b4 4f       	sbci	r27, 0xF4	; 244
   1015a:	8c 91       	ld	r24, X
   1015c:	81 83       	std	Z+1, r24	; 0x01
   1015e:	01 c0       	rjmp	.+2      	; 0x10162 <ls_info+0xec>
        else
            *p++ = '-';
   10160:	41 83       	std	Z+1, r20	; 0x01
        mask >>= 1;
   10162:	f6 94       	lsr	r15
   10164:	e7 94       	ror	r14
        *p++ = 'd';
    else
        *p++ = '-';

    mask = 4 << 6;
    for(i=0;i<9;++i)
   10166:	2f 5f       	subi	r18, 0xFF	; 255
   10168:	3f 4f       	sbci	r19, 0xFF	; 255
   1016a:	31 96       	adiw	r30, 0x01	; 1
   1016c:	29 30       	cpi	r18, 0x09	; 9
   1016e:	31 05       	cpc	r19, r1
   10170:	11 f7       	brne	.-60     	; 0x10136 <ls_info+0xc0>
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
        mask >>= 1;
    }
    *p = 0;
   10172:	29 96       	adiw	r28, 0x09	; 9
   10174:	1f ae       	std	Y+63, r1	; 0x3f
   10176:	29 97       	sbiw	r28, 0x09	; 9

    printf("%s none none %12ld %s %s\n",
   10178:	4e a0       	ldd	r4, Y+38	; 0x26
   1017a:	5f a0       	ldd	r5, Y+39	; 0x27
   1017c:	68 a4       	ldd	r6, Y+40	; 0x28
   1017e:	79 a4       	ldd	r7, Y+41	; 0x29
   10180:	6e a9       	ldd	r22, Y+54	; 0x36
   10182:	7f a9       	ldd	r23, Y+55	; 0x37
   10184:	88 ad       	ldd	r24, Y+56	; 0x38
   10186:	99 ad       	ldd	r25, Y+57	; 0x39
   10188:	0e 94 17 77 	call	0xee2e	; 0xee2e <mctime>
   1018c:	7c 01       	movw	r14, r24
   1018e:	c8 01       	movw	r24, r16
   10190:	0e 94 3c 77 	call	0xee78	; 0xee78 <basename>
   10194:	ed b7       	in	r30, 0x3d	; 61
   10196:	fe b7       	in	r31, 0x3e	; 62
   10198:	95 87       	std	Z+13, r25	; 0x0d
   1019a:	84 87       	std	Z+12, r24	; 0x0c
   1019c:	f3 86       	std	Z+11, r15	; 0x0b
   1019e:	e2 86       	std	Z+10, r14	; 0x0a
   101a0:	46 82       	std	Z+6, r4	; 0x06
   101a2:	57 82       	std	Z+7, r5	; 0x07
   101a4:	60 86       	std	Z+8, r6	; 0x08
   101a6:	71 86       	std	Z+9, r7	; 0x09
   101a8:	b4 82       	std	Z+4, r11	; 0x04
   101aa:	a5 82       	std	Z+5, r10	; 0x05
   101ac:	89 e6       	ldi	r24, 0x69	; 105
   101ae:	9c e0       	ldi	r25, 0x0C	; 12
   101b0:	a0 e0       	ldi	r26, 0x00	; 0
   101b2:	81 83       	std	Z+1, r24	; 0x01
   101b4:	92 83       	std	Z+2, r25	; 0x02
   101b6:	a3 83       	std	Z+3, r26	; 0x03
   101b8:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
        attr,
        (long) sp.st_size,
        mctime((time_t)sp.st_mtime),
        basename(name));
    return(1);
   101bc:	81 e0       	ldi	r24, 0x01	; 1
   101be:	90 e0       	ldi	r25, 0x00	; 0
}
   101c0:	c7 5b       	subi	r28, 0xB7	; 183
   101c2:	df 4f       	sbci	r29, 0xFF	; 255
   101c4:	0f b6       	in	r0, 0x3f	; 63
   101c6:	f8 94       	cli
   101c8:	de bf       	out	0x3e, r29	; 62
   101ca:	0f be       	out	0x3f, r0	; 63
   101cc:	cd bf       	out	0x3d, r28	; 61
   101ce:	df 91       	pop	r29
   101d0:	cf 91       	pop	r28
   101d2:	1f 91       	pop	r17
   101d4:	0f 91       	pop	r16
   101d6:	ff 90       	pop	r15
   101d8:	ef 90       	pop	r14
   101da:	df 90       	pop	r13
   101dc:	cf 90       	pop	r12
   101de:	bf 90       	pop	r11
   101e0:	af 90       	pop	r10
   101e2:	7f 90       	pop	r7
   101e4:	6f 90       	pop	r6
   101e6:	5f 90       	pop	r5
   101e8:	4f 90       	pop	r4
   101ea:	08 95       	ret

000101ec <ls>:
/// @param[in] path: file name or directory
/// @param[in] option: -l for detail
/// @return  number of files or -1 on error
MEMSPACE
int ls(char *name, int verbose)
{
   101ec:	2f 92       	push	r2
   101ee:	3f 92       	push	r3
   101f0:	4f 92       	push	r4
   101f2:	5f 92       	push	r5
   101f4:	6f 92       	push	r6
   101f6:	8f 92       	push	r8
   101f8:	9f 92       	push	r9
   101fa:	af 92       	push	r10
   101fc:	bf 92       	push	r11
   101fe:	cf 92       	push	r12
   10200:	df 92       	push	r13
   10202:	ef 92       	push	r14
   10204:	ff 92       	push	r15
   10206:	0f 93       	push	r16
   10208:	1f 93       	push	r17
   1020a:	cf 93       	push	r28
   1020c:	df 93       	push	r29
   1020e:	cd b7       	in	r28, 0x3d	; 61
   10210:	de b7       	in	r29, 0x3e	; 62
   10212:	c8 53       	subi	r28, 0x38	; 56
   10214:	d1 40       	sbci	r29, 0x01	; 1
   10216:	0f b6       	in	r0, 0x3f	; 63
   10218:	f8 94       	cli
   1021a:	de bf       	out	0x3e, r29	; 62
   1021c:	0f be       	out	0x3f, r0	; 63
   1021e:	cd bf       	out	0x3d, r28	; 61
   10220:	7c 01       	movw	r14, r24
   10222:	4b 01       	movw	r8, r22
    int files = 0;
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
   10224:	1e 82       	std	Y+6, r1	; 0x06
   10226:	8e 01       	movw	r16, r28
   10228:	0a 5f       	subi	r16, 0xFA	; 250
   1022a:	1f 4f       	sbci	r17, 0xFF	; 255
    if(!name || !*name || MATCH(name,".") )
   1022c:	00 97       	sbiw	r24, 0x00	; 0
   1022e:	51 f4       	brne	.+20     	; 0x10244 <ls+0x58>
    {
        if( !getcwd(fullpath, sizeof(fullpath)-2) )
   10230:	6f ef       	ldi	r22, 0xFF	; 255
   10232:	70 e0       	ldi	r23, 0x00	; 0
   10234:	c8 01       	movw	r24, r16
   10236:	0e 94 92 77 	call	0xef24	; 0xef24 <getcwd>
   1023a:	89 2b       	or	r24, r25
   1023c:	91 f4       	brne	.+36     	; 0x10262 <ls+0x76>
        {
            printf("ls: Can't get current directory\n");
   1023e:	88 e4       	ldi	r24, 0x48	; 72
   10240:	9c e0       	ldi	r25, 0x0C	; 12
   10242:	6a c0       	rjmp	.+212    	; 0x10318 <ls+0x12c>
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
    if(!name || !*name || MATCH(name,".") )
   10244:	fc 01       	movw	r30, r24
   10246:	80 81       	ld	r24, Z
   10248:	88 23       	and	r24, r24
   1024a:	91 f3       	breq	.-28     	; 0x10230 <ls+0x44>
   1024c:	61 ef       	ldi	r22, 0xF1	; 241
   1024e:	72 e1       	ldi	r23, 0x12	; 18
   10250:	c7 01       	movw	r24, r14
   10252:	0e 94 65 32 	call	0x64ca	; 0x64ca <MATCH>
   10256:	89 2b       	or	r24, r25
   10258:	59 f7       	brne	.-42     	; 0x10230 <ls+0x44>

        }
    }
    else
    {
        strcpy(fullpath,name);
   1025a:	b7 01       	movw	r22, r14
   1025c:	c8 01       	movw	r24, r16
   1025e:	0e 94 6d 31 	call	0x62da	; 0x62da <strcpy>
    }
    len = strlen(fullpath);
   10262:	f8 01       	movw	r30, r16
   10264:	01 90       	ld	r0, Z+
   10266:	00 20       	and	r0, r0
   10268:	e9 f7       	brne	.-6      	; 0x10264 <ls+0x78>
   1026a:	31 97       	sbiw	r30, 0x01	; 1
   1026c:	1f 01       	movw	r2, r30
   1026e:	20 1a       	sub	r2, r16
   10270:	31 0a       	sbc	r3, r17


    if (stat(fullpath, &st))
   10272:	be 01       	movw	r22, r28
   10274:	69 5f       	subi	r22, 0xF9	; 249
   10276:	7e 4f       	sbci	r23, 0xFE	; 254
   10278:	c8 01       	movw	r24, r16
   1027a:	32 d8       	rcall	.-3996   	; 0xf2e0 <stat>
    {
        printf("ls: cannot stat [%s]\n", fullpath);
   1027c:	ed b7       	in	r30, 0x3d	; 61
   1027e:	fe b7       	in	r31, 0x3e	; 62
   10280:	15 83       	std	Z+5, r17	; 0x05
   10282:	04 83       	std	Z+4, r16	; 0x04
        strcpy(fullpath,name);
    }
    len = strlen(fullpath);


    if (stat(fullpath, &st))
   10284:	89 2b       	or	r24, r25
   10286:	59 f0       	breq	.+22     	; 0x1029e <ls+0xb2>
    {
        printf("ls: cannot stat [%s]\n", fullpath);
   10288:	82 e3       	ldi	r24, 0x32	; 50
   1028a:	9c e0       	ldi	r25, 0x0C	; 12
   1028c:	a0 e0       	ldi	r26, 0x00	; 0
   1028e:	81 83       	std	Z+1, r24	; 0x01
   10290:	92 83       	std	Z+2, r25	; 0x02
   10292:	a3 83       	std	Z+3, r26	; 0x03
   10294:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
        return(-1);
   10298:	8f ef       	ldi	r24, 0xFF	; 255
   1029a:	9f ef       	ldi	r25, 0xFF	; 255
   1029c:	96 c0       	rjmp	.+300    	; 0x103ca <ls+0x1de>
    }
    printf("Listing:[%s]\n",fullpath);
   1029e:	84 e2       	ldi	r24, 0x24	; 36
   102a0:	9c e0       	ldi	r25, 0x0C	; 12
   102a2:	a0 e0       	ldi	r26, 0x00	; 0
   102a4:	81 83       	std	Z+1, r24	; 0x01
   102a6:	92 83       	std	Z+2, r25	; 0x02
   102a8:	a3 83       	std	Z+3, r26	; 0x03
   102aa:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>

    switch (st.st_mode & S_IFMT)
   102ae:	c1 5f       	subi	r28, 0xF1	; 241
   102b0:	de 4f       	sbci	r29, 0xFE	; 254
   102b2:	88 81       	ld	r24, Y
   102b4:	99 81       	ldd	r25, Y+1	; 0x01
   102b6:	aa 81       	ldd	r26, Y+2	; 0x02
   102b8:	bb 81       	ldd	r27, Y+3	; 0x03
   102ba:	cf 50       	subi	r28, 0x0F	; 15
   102bc:	d1 40       	sbci	r29, 0x01	; 1
   102be:	88 27       	eor	r24, r24
   102c0:	90 7f       	andi	r25, 0xF0	; 240
   102c2:	aa 27       	eor	r26, r26
   102c4:	bb 27       	eor	r27, r27
   102c6:	81 15       	cp	r24, r1
   102c8:	f0 e4       	ldi	r31, 0x40	; 64
   102ca:	9f 07       	cpc	r25, r31
   102cc:	a1 05       	cpc	r26, r1
   102ce:	b1 05       	cpc	r27, r1
   102d0:	59 f0       	breq	.+22     	; 0x102e8 <ls+0xfc>
   102d2:	81 15       	cp	r24, r1
   102d4:	90 48       	sbci	r25, 0x80	; 128
   102d6:	a1 05       	cpc	r26, r1
   102d8:	b1 05       	cpc	r27, r1
   102da:	09 f0       	breq	.+2      	; 0x102de <ls+0xf2>
   102dc:	67 c0       	rjmp	.+206    	; 0x103ac <ls+0x1c0>
    {
        case S_IFREG:
            files = ls_info(fullpath,verbose);
   102de:	b4 01       	movw	r22, r8
   102e0:	c8 01       	movw	r24, r16
   102e2:	c9 de       	rcall	.-622    	; 0x10076 <ls_info>
   102e4:	7c 01       	movw	r14, r24
            break;
   102e6:	64 c0       	rjmp	.+200    	; 0x103b0 <ls+0x1c4>
        case S_IFDIR:
            dirp = opendir(fullpath);
   102e8:	c8 01       	movw	r24, r16
   102ea:	0e 94 40 78 	call	0xf080	; 0xf080 <opendir>
   102ee:	5c 01       	movw	r10, r24
            if(!dirp)
   102f0:	89 2b       	or	r24, r25
   102f2:	81 f0       	breq	.+32     	; 0x10314 <ls+0x128>
    }
    else
    {
        strcpy(fullpath,name);
    }
    len = strlen(fullpath);
   102f4:	e1 2c       	mov	r14, r1
   102f6:	f1 2c       	mov	r15, r1
                    strcat(fullpath,"/");
                }
                strcat(fullpath,de->d_name);
                files +=ls_info(fullpath,verbose);
// restore path
                fullpath[len] = 0;
   102f8:	c8 01       	movw	r24, r16
   102fa:	82 0d       	add	r24, r2
   102fc:	93 1d       	adc	r25, r3
   102fe:	c9 5c       	subi	r28, 0xC9	; 201
   10300:	de 4f       	sbci	r29, 0xFE	; 254
   10302:	99 83       	std	Y+1, r25	; 0x01
   10304:	88 83       	st	Y, r24
   10306:	c7 53       	subi	r28, 0x37	; 55
   10308:	d1 40       	sbci	r29, 0x01	; 1
                    break;
// FIXME neeed beetter string length tests here
                len2 = strlen(de->d_name);
                if(len + len2 >= MAX_NAME_LEN)
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
   1030a:	81 ef       	ldi	r24, 0xF1	; 241
   1030c:	9b e0       	ldi	r25, 0x0B	; 11
   1030e:	2c 01       	movw	r4, r24
   10310:	61 2c       	mov	r6, r1
   10312:	25 c0       	rjmp	.+74     	; 0x1035e <ls+0x172>
            break;
        case S_IFDIR:
            dirp = opendir(fullpath);
            if(!dirp)
            {
                printf("opendir failed\n");
   10314:	84 e1       	ldi	r24, 0x14	; 20
   10316:	9c e0       	ldi	r25, 0x0C	; 12
   10318:	a0 e0       	ldi	r26, 0x00	; 0
   1031a:	ed b7       	in	r30, 0x3d	; 61
   1031c:	fe b7       	in	r31, 0x3e	; 62
   1031e:	81 83       	std	Z+1, r24	; 0x01
   10320:	92 83       	std	Z+2, r25	; 0x02
   10322:	a3 83       	std	Z+3, r26	; 0x03
   10324:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   10328:	b7 cf       	rjmp	.-146    	; 0x10298 <ls+0xac>
                return(-1);
            }
            while ( (de = readdir(dirp)) )
            {
                if(de->d_name[0] == 0)
   1032a:	f6 01       	movw	r30, r12
   1032c:	80 81       	ld	r24, Z
   1032e:	88 23       	and	r24, r24
   10330:	e1 f0       	breq	.+56     	; 0x1036a <ls+0x17e>
                    break;
// FIXME neeed beetter string length tests here
                len2 = strlen(de->d_name);
   10332:	f6 01       	movw	r30, r12
   10334:	01 90       	ld	r0, Z+
   10336:	00 20       	and	r0, r0
   10338:	e9 f7       	brne	.-6      	; 0x10334 <ls+0x148>
   1033a:	31 97       	sbiw	r30, 0x01	; 1
   1033c:	ec 19       	sub	r30, r12
   1033e:	fd 09       	sbc	r31, r13
                if(len + len2 >= MAX_NAME_LEN)
   10340:	e2 0d       	add	r30, r2
   10342:	f3 1d       	adc	r31, r3
   10344:	ef 3f       	cpi	r30, 0xFF	; 255
   10346:	f1 05       	cpc	r31, r1
   10348:	a1 f0       	breq	.+40     	; 0x10372 <ls+0x186>
   1034a:	9c f0       	brlt	.+38     	; 0x10372 <ls+0x186>
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
   1034c:	ed b7       	in	r30, 0x3d	; 61
   1034e:	fe b7       	in	r31, 0x3e	; 62
   10350:	d5 82       	std	Z+5, r13	; 0x05
   10352:	c4 82       	std	Z+4, r12	; 0x04
   10354:	41 82       	std	Z+1, r4	; 0x01
   10356:	52 82       	std	Z+2, r5	; 0x02
   10358:	63 82       	std	Z+3, r6	; 0x03
   1035a:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
            if(!dirp)
            {
                printf("opendir failed\n");
                return(-1);
            }
            while ( (de = readdir(dirp)) )
   1035e:	c5 01       	movw	r24, r10
   10360:	0e 94 5e 78 	call	0xf0bc	; 0xf0bc <readdir>
   10364:	6c 01       	movw	r12, r24
   10366:	89 2b       	or	r24, r25
   10368:	01 f7       	brne	.-64     	; 0x1032a <ls+0x13e>
#ifdef ESP8266
                optimistic_yield(1000);
                wdt_reset();
#endif
            }
            closedir(dirp);
   1036a:	c5 01       	movw	r24, r10
   1036c:	0e 94 25 78 	call	0xf04a	; 0xf04a <closedir>
            break;
   10370:	1f c0       	rjmp	.+62     	; 0x103b0 <ls+0x1c4>
                if(len + len2 >= MAX_NAME_LEN)
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
                    continue;
                }
                if(!MATCH(fullpath,"/") )
   10372:	66 ea       	ldi	r22, 0xA6	; 166
   10374:	78 e0       	ldi	r23, 0x08	; 8
   10376:	c8 01       	movw	r24, r16
   10378:	0e 94 65 32 	call	0x64ca	; 0x64ca <MATCH>
   1037c:	89 2b       	or	r24, r25
   1037e:	29 f4       	brne	.+10     	; 0x1038a <ls+0x19e>
                {
                    strcat(fullpath,"/");
   10380:	66 ea       	ldi	r22, 0xA6	; 166
   10382:	78 e0       	ldi	r23, 0x08	; 8
   10384:	c8 01       	movw	r24, r16
   10386:	0e 94 8e 31 	call	0x631c	; 0x631c <strcat>
                }
                strcat(fullpath,de->d_name);
   1038a:	b6 01       	movw	r22, r12
   1038c:	c8 01       	movw	r24, r16
   1038e:	0e 94 8e 31 	call	0x631c	; 0x631c <strcat>
                files +=ls_info(fullpath,verbose);
   10392:	b4 01       	movw	r22, r8
   10394:	c8 01       	movw	r24, r16
   10396:	6f de       	rcall	.-802    	; 0x10076 <ls_info>
   10398:	e8 0e       	add	r14, r24
   1039a:	f9 1e       	adc	r15, r25
// restore path
                fullpath[len] = 0;
   1039c:	c9 5c       	subi	r28, 0xC9	; 201
   1039e:	de 4f       	sbci	r29, 0xFE	; 254
   103a0:	e8 81       	ld	r30, Y
   103a2:	f9 81       	ldd	r31, Y+1	; 0x01
   103a4:	c7 53       	subi	r28, 0x37	; 55
   103a6:	d1 40       	sbci	r29, 0x01	; 1
   103a8:	10 82       	st	Z, r1
   103aa:	d9 cf       	rjmp	.-78     	; 0x1035e <ls+0x172>
MEMSPACE
int ls(char *name, int verbose)
{
    struct stat st;
    DIR *dirp;
    int files = 0;
   103ac:	e1 2c       	mov	r14, r1
   103ae:	f1 2c       	mov	r15, r1
#endif
            }
            closedir(dirp);
            break;
    }
    printf("Files: %d\n", (int)files);
   103b0:	ed b7       	in	r30, 0x3d	; 61
   103b2:	fe b7       	in	r31, 0x3e	; 62
   103b4:	f5 82       	std	Z+5, r15	; 0x05
   103b6:	e4 82       	std	Z+4, r14	; 0x04
   103b8:	86 ee       	ldi	r24, 0xE6	; 230
   103ba:	9b e0       	ldi	r25, 0x0B	; 11
   103bc:	a0 e0       	ldi	r26, 0x00	; 0
   103be:	81 83       	std	Z+1, r24	; 0x01
   103c0:	92 83       	std	Z+2, r25	; 0x02
   103c2:	a3 83       	std	Z+3, r26	; 0x03
   103c4:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    return(files);
   103c8:	c7 01       	movw	r24, r14
}
   103ca:	c8 5c       	subi	r28, 0xC8	; 200
   103cc:	de 4f       	sbci	r29, 0xFE	; 254
   103ce:	0f b6       	in	r0, 0x3f	; 63
   103d0:	f8 94       	cli
   103d2:	de bf       	out	0x3e, r29	; 62
   103d4:	0f be       	out	0x3f, r0	; 63
   103d6:	cd bf       	out	0x3d, r28	; 61
   103d8:	df 91       	pop	r29
   103da:	cf 91       	pop	r28
   103dc:	1f 91       	pop	r17
   103de:	0f 91       	pop	r16
   103e0:	ff 90       	pop	r15
   103e2:	ef 90       	pop	r14
   103e4:	df 90       	pop	r13
   103e6:	cf 90       	pop	r12
   103e8:	bf 90       	pop	r11
   103ea:	af 90       	pop	r10
   103ec:	9f 90       	pop	r9
   103ee:	8f 90       	pop	r8
   103f0:	6f 90       	pop	r6
   103f2:	5f 90       	pop	r5
   103f4:	4f 90       	pop	r4
   103f6:	3f 90       	pop	r3
   103f8:	2f 90       	pop	r2
   103fa:	08 95       	ret

000103fc <posix_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int posix_tests(int argc,char *argv[])
{
   103fc:	a7 e0       	ldi	r26, 0x07	; 7
   103fe:	b1 e0       	ldi	r27, 0x01	; 1
   10400:	e4 e0       	ldi	r30, 0x04	; 4
   10402:	f2 e8       	ldi	r31, 0x82	; 130
   10404:	0c 94 0f e7 	jmp	0x1ce1e	; 0x1ce1e <__prologue_saves__+0x4>
    char *ptr;
    int ind = 0;

	if(argc < 1)
   10408:	18 16       	cp	r1, r24
   1040a:	19 06       	cpc	r1, r25
   1040c:	1c f0       	brlt	.+6      	; 0x10414 <posix_tests+0x18>
		return(0);
   1040e:	80 e0       	ldi	r24, 0x00	; 0
   10410:	90 e0       	ldi	r25, 0x00	; 0
   10412:	dd c1       	rjmp	.+954    	; 0x107ce <posix_tests+0x3d2>

    ptr = argv[ind++];
   10414:	fb 01       	movw	r30, r22
   10416:	c0 80       	ld	r12, Z
   10418:	d1 80       	ldd	r13, Z+1	; 0x01
	printf("argv[%d]=%s\n",(int)i, argv[i]);
}
#endif


    if(!ptr)
   1041a:	c1 14       	cp	r12, r1
   1041c:	d1 04       	cpc	r13, r1
   1041e:	b9 f3       	breq	.-18     	; 0x1040e <posix_tests+0x12>
   10420:	4b 01       	movw	r8, r22
   10422:	3c 01       	movw	r6, r24
        return(0);	// nothing no match

    if( MATCH(ptr,"posix") )
   10424:	6e eb       	ldi	r22, 0xBE	; 190
   10426:	7b e0       	ldi	r23, 0x0B	; 11
   10428:	c6 01       	movw	r24, r12
   1042a:	0e 94 65 32 	call	0x64ca	; 0x64ca <MATCH>
   1042e:	89 2b       	or	r24, r25
   10430:	a1 f0       	breq	.+40     	; 0x1045a <posix_tests+0x5e>
    {
        ptr = argv[ind++];
   10432:	f4 01       	movw	r30, r8
   10434:	c2 80       	ldd	r12, Z+2	; 0x02
   10436:	d3 80       	ldd	r13, Z+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
   10438:	c1 14       	cp	r12, r1
   1043a:	d1 04       	cpc	r13, r1
   1043c:	21 f4       	brne	.+8      	; 0x10446 <posix_tests+0x4a>
        {
            posix_help(1);
   1043e:	81 e0       	ldi	r24, 0x01	; 1
   10440:	90 e0       	ldi	r25, 0x00	; 0
   10442:	75 dc       	rcall	.-1814   	; 0xfd2e <posix_help>
   10444:	45 c1       	rjmp	.+650    	; 0x106d0 <posix_tests+0x2d4>
        return(0);	// nothing no match

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
   10446:	6d e6       	ldi	r22, 0x6D	; 109
   10448:	76 e1       	ldi	r23, 0x16	; 22
   1044a:	c6 01       	movw	r24, r12
   1044c:	0e 94 65 32 	call	0x64ca	; 0x64ca <MATCH>
   10450:	89 2b       	or	r24, r25
   10452:	a9 f7       	brne	.-22     	; 0x1043e <posix_tests+0x42>
    if(!ptr)
        return(0);	// nothing no match

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
   10454:	02 e0       	ldi	r16, 0x02	; 2
   10456:	10 e0       	ldi	r17, 0x00	; 0
   10458:	02 c0       	rjmp	.+4      	; 0x1045e <posix_tests+0x62>
    int ind = 0;

	if(argc < 1)
		return(0);

    ptr = argv[ind++];
   1045a:	01 e0       	ldi	r16, 0x01	; 1
   1045c:	10 e0       	ldi	r17, 0x00	; 0
            posix_help(1);
            return(1);
        }
    }

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
   1045e:	78 01       	movw	r14, r16
   10460:	ff ef       	ldi	r31, 0xFF	; 255
   10462:	ef 1a       	sub	r14, r31
   10464:	ff 0a       	sbc	r15, r31
   10466:	93 01       	movw	r18, r6
   10468:	a7 01       	movw	r20, r14
   1046a:	64 ec       	ldi	r22, 0xC4	; 196
   1046c:	7b e0       	ldi	r23, 0x0B	; 11
   1046e:	c6 01       	movw	r24, r12
   10470:	0e 94 8d 32 	call	0x651a	; 0x651a <MATCHARGS>
   10474:	89 2b       	or	r24, r25
   10476:	99 f1       	breq	.+102    	; 0x104de <posix_tests+0xe2>
   10478:	78 01       	movw	r14, r16
   1047a:	ee 0c       	add	r14, r14
   1047c:	ff 1c       	adc	r15, r15
   1047e:	e8 0c       	add	r14, r8
   10480:	f9 1c       	adc	r15, r9
   10482:	57 01       	movw	r10, r14
   10484:	47 01       	movw	r8, r14
   10486:	68 01       	movw	r12, r16
   10488:	41 2c       	mov	r4, r1
   1048a:	51 2c       	mov	r5, r1
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   1048c:	c6 14       	cp	r12, r6
   1048e:	d7 04       	cpc	r13, r7
   10490:	14 f5       	brge	.+68     	; 0x104d6 <posix_tests+0xda>
        {
            if(MATCH(argv[i],"-p"))
   10492:	68 ec       	ldi	r22, 0xC8	; 200
   10494:	7b e0       	ldi	r23, 0x0B	; 11
   10496:	f4 01       	movw	r30, r8
   10498:	81 91       	ld	r24, Z+
   1049a:	91 91       	ld	r25, Z+
   1049c:	4f 01       	movw	r8, r30
   1049e:	0e 94 65 32 	call	0x64ca	; 0x64ca <MATCH>
   104a2:	89 2b       	or	r24, r25
   104a4:	19 f0       	breq	.+6      	; 0x104ac <posix_tests+0xb0>
                page = 1;
   104a6:	44 24       	eor	r4, r4
   104a8:	43 94       	inc	r4
   104aa:	51 2c       	mov	r5, r1

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   104ac:	ff ef       	ldi	r31, 0xFF	; 255
   104ae:	cf 1a       	sub	r12, r31
   104b0:	df 0a       	sbc	r13, r31
   104b2:	ec cf       	rjmp	.-40     	; 0x1048c <posix_tests+0x90>
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
        {
            if(!MATCH(argv[i],"-p"))
   104b4:	68 ec       	ldi	r22, 0xC8	; 200
   104b6:	7b e0       	ldi	r23, 0x0B	; 11
   104b8:	f5 01       	movw	r30, r10
   104ba:	81 91       	ld	r24, Z+
   104bc:	91 91       	ld	r25, Z+
   104be:	5f 01       	movw	r10, r30
   104c0:	0e 94 65 32 	call	0x64ca	; 0x64ca <MATCH>
   104c4:	89 2b       	or	r24, r25
   104c6:	29 f4       	brne	.+10     	; 0x104d2 <posix_tests+0xd6>
			{
				// displays its own errors
                cat(argv[ind], page);
   104c8:	b2 01       	movw	r22, r4
   104ca:	f7 01       	movw	r30, r14
   104cc:	80 81       	ld	r24, Z
   104ce:	91 81       	ldd	r25, Z+1	; 0x01
   104d0:	65 dd       	rcall	.-1334   	; 0xff9c <cat>
        for(i=ind;i<argc;++i)
        {
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
   104d2:	0f 5f       	subi	r16, 0xFF	; 255
   104d4:	1f 4f       	sbci	r17, 0xFF	; 255
   104d6:	06 15       	cp	r16, r6
   104d8:	17 05       	cpc	r17, r7
   104da:	64 f3       	brlt	.-40     	; 0x104b4 <posix_tests+0xb8>
   104dc:	f9 c0       	rjmp	.+498    	; 0x106d0 <posix_tests+0x2d4>
		}
        return(1);
    }
#endif

    else if (MATCHARGS(ptr,"copy", (ind + 2), argc))
   104de:	58 01       	movw	r10, r16
   104e0:	f2 e0       	ldi	r31, 0x02	; 2
   104e2:	af 0e       	add	r10, r31
   104e4:	b1 1c       	adc	r11, r1
   104e6:	93 01       	movw	r18, r6
   104e8:	a5 01       	movw	r20, r10
   104ea:	6b ec       	ldi	r22, 0xCB	; 203
   104ec:	7b e0       	ldi	r23, 0x0B	; 11
   104ee:	c6 01       	movw	r24, r12
   104f0:	0e 94 8d 32 	call	0x651a	; 0x651a <MATCHARGS>
   104f4:	89 2b       	or	r24, r25
   104f6:	69 f0       	breq	.+26     	; 0x10512 <posix_tests+0x116>
    {
		if( copy(argv[ind],argv[ind+1]) < 0)
   104f8:	f8 01       	movw	r30, r16
   104fa:	ee 0f       	add	r30, r30
   104fc:	ff 1f       	adc	r31, r31
   104fe:	e8 0d       	add	r30, r8
   10500:	f9 1d       	adc	r31, r9
   10502:	62 81       	ldd	r22, Z+2	; 0x02
   10504:	73 81       	ldd	r23, Z+3	; 0x03
   10506:	80 81       	ld	r24, Z
   10508:	91 81       	ldd	r25, Z+1	; 0x01
   1050a:	32 dc       	rcall	.-1948   	; 0xfd70 <copy>
   1050c:	97 ff       	sbrs	r25, 7
   1050e:	e0 c0       	rjmp	.+448    	; 0x106d0 <posix_tests+0x2d4>
   10510:	5c c1       	rjmp	.+696    	; 0x107ca <posix_tests+0x3ce>
			return(-1);
        return(1);
    }

    else if (MATCHARGS(ptr,"cd", (ind + 1), argc))
   10512:	93 01       	movw	r18, r6
   10514:	a7 01       	movw	r20, r14
   10516:	60 ed       	ldi	r22, 0xD0	; 208
   10518:	7b e0       	ldi	r23, 0x0B	; 11
   1051a:	c6 01       	movw	r24, r12
   1051c:	0e 94 8d 32 	call	0x651a	; 0x651a <MATCHARGS>
   10520:	89 2b       	or	r24, r25
   10522:	b9 f0       	breq	.+46     	; 0x10552 <posix_tests+0x156>
    {
        if ( chdir(argv[ind]) != 0)
   10524:	78 01       	movw	r14, r16
   10526:	ee 0c       	add	r14, r14
   10528:	ff 1c       	adc	r15, r15
   1052a:	e8 0c       	add	r14, r8
   1052c:	f9 1c       	adc	r15, r9
   1052e:	f7 01       	movw	r30, r14
   10530:	80 81       	ld	r24, Z
   10532:	91 81       	ldd	r25, Z+1	; 0x01
   10534:	0e 94 4a 77 	call	0xee94	; 0xee94 <chdir>
   10538:	89 2b       	or	r24, r25
   1053a:	09 f4       	brne	.+2      	; 0x1053e <posix_tests+0x142>
   1053c:	c9 c0       	rjmp	.+402    	; 0x106d0 <posix_tests+0x2d4>
		{
            printf("chdir %s failed\n", argv[ind]);
   1053e:	f7 01       	movw	r30, r14
   10540:	80 81       	ld	r24, Z
   10542:	91 81       	ldd	r25, Z+1	; 0x01
   10544:	ed b7       	in	r30, 0x3d	; 61
   10546:	fe b7       	in	r31, 0x3e	; 62
   10548:	95 83       	std	Z+5, r25	; 0x05
   1054a:	84 83       	std	Z+4, r24	; 0x04
   1054c:	8d e9       	ldi	r24, 0x9D	; 157
   1054e:	9d e0       	ldi	r25, 0x0D	; 13
   10550:	36 c1       	rjmp	.+620    	; 0x107be <posix_tests+0x3c2>
			return(-1);
        return(1);
    }
#endif

    else if (MATCHI(ptr,"ls") )
   10552:	68 ed       	ldi	r22, 0xD8	; 216
   10554:	78 e0       	ldi	r23, 0x08	; 8
   10556:	c6 01       	movw	r24, r12
   10558:	0e 94 79 32 	call	0x64f2	; 0x64f2 <MATCHI>
   1055c:	89 2b       	or	r24, r25
   1055e:	09 f4       	brne	.+2      	; 0x10562 <posix_tests+0x166>
   10560:	40 c0       	rjmp	.+128    	; 0x105e2 <posix_tests+0x1e6>
   10562:	78 01       	movw	r14, r16
   10564:	ee 0c       	add	r14, r14
   10566:	ff 1c       	adc	r15, r15
   10568:	e8 0c       	add	r14, r8
   1056a:	f9 1c       	adc	r15, r9
   1056c:	c1 2c       	mov	r12, r1
   1056e:	d1 2c       	mov	r13, r1
        int args = 0;
        for(i=ind;i<argc;++i)
        {
			if(!argv[i])
			{
				printf("ls: null argument # %d\n", i);
   10570:	85 e8       	ldi	r24, 0x85	; 133
   10572:	9d e0       	ldi	r25, 0x0D	; 13
   10574:	4c 01       	movw	r8, r24
   10576:	a1 2c       	mov	r10, r1

    else if (MATCHI(ptr,"ls") )
    {
        int i;
        int args = 0;
        for(i=ind;i<argc;++i)
   10578:	06 15       	cp	r16, r6
   1057a:	17 05       	cpc	r17, r7
   1057c:	34 f5       	brge	.+76     	; 0x105ca <posix_tests+0x1ce>
        {
			if(!argv[i])
   1057e:	f7 01       	movw	r30, r14
   10580:	80 81       	ld	r24, Z
   10582:	91 81       	ldd	r25, Z+1	; 0x01
   10584:	00 97       	sbiw	r24, 0x00	; 0
   10586:	51 f4       	brne	.+20     	; 0x1059c <posix_tests+0x1a0>
			{
				printf("ls: null argument # %d\n", i);
   10588:	ed b7       	in	r30, 0x3d	; 61
   1058a:	fe b7       	in	r31, 0x3e	; 62
   1058c:	15 83       	std	Z+5, r17	; 0x05
   1058e:	04 83       	std	Z+4, r16	; 0x04
   10590:	81 82       	std	Z+1, r8	; 0x01
   10592:	92 82       	std	Z+2, r9	; 0x02
   10594:	a3 82       	std	Z+3, r10	; 0x03
   10596:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
				continue;
   1059a:	11 c0       	rjmp	.+34     	; 0x105be <posix_tests+0x1c2>
			}
            if(MATCH(argv[i],"-l"))	// skip long format test - we always use long format
   1059c:	63 ed       	ldi	r22, 0xD3	; 211
   1059e:	7b e0       	ldi	r23, 0x0B	; 11
   105a0:	0e 94 65 32 	call	0x64ca	; 0x64ca <MATCH>
   105a4:	89 2b       	or	r24, r25
   105a6:	59 f4       	brne	.+22     	; 0x105be <posix_tests+0x1c2>
				continue;
			if( ls(argv[i],1) < 0)
   105a8:	61 e0       	ldi	r22, 0x01	; 1
   105aa:	70 e0       	ldi	r23, 0x00	; 0
   105ac:	f7 01       	movw	r30, r14
   105ae:	80 81       	ld	r24, Z
   105b0:	91 81       	ldd	r25, Z+1	; 0x01
   105b2:	1c de       	rcall	.-968    	; 0x101ec <ls>
   105b4:	97 fd       	sbrc	r25, 7
   105b6:	09 c1       	rjmp	.+530    	; 0x107ca <posix_tests+0x3ce>
			{
				return(-1);
			};
            ++args;
   105b8:	ff ef       	ldi	r31, 0xFF	; 255
   105ba:	cf 1a       	sub	r12, r31
   105bc:	df 0a       	sbc	r13, r31

    else if (MATCHI(ptr,"ls") )
    {
        int i;
        int args = 0;
        for(i=ind;i<argc;++i)
   105be:	0f 5f       	subi	r16, 0xFF	; 255
   105c0:	1f 4f       	sbci	r17, 0xFF	; 255
   105c2:	82 e0       	ldi	r24, 0x02	; 2
   105c4:	e8 0e       	add	r14, r24
   105c6:	f1 1c       	adc	r15, r1
   105c8:	d7 cf       	rjmp	.-82     	; 0x10578 <posix_tests+0x17c>
			{
				return(-1);
			};
            ++args;
        }
        if(!args)
   105ca:	c1 14       	cp	r12, r1
   105cc:	d1 04       	cpc	r13, r1
   105ce:	09 f0       	breq	.+2      	; 0x105d2 <posix_tests+0x1d6>
   105d0:	7f c0       	rjmp	.+254    	; 0x106d0 <posix_tests+0x2d4>
        {
            if( ls("",1) < 0)
   105d2:	61 e0       	ldi	r22, 0x01	; 1
   105d4:	70 e0       	ldi	r23, 0x00	; 0
   105d6:	80 e2       	ldi	r24, 0x20	; 32
   105d8:	9c e0       	ldi	r25, 0x0C	; 12
   105da:	08 de       	rcall	.-1008   	; 0x101ec <ls>
   105dc:	97 ff       	sbrs	r25, 7
   105de:	78 c0       	rjmp	.+240    	; 0x106d0 <posix_tests+0x2d4>
   105e0:	f4 c0       	rjmp	.+488    	; 0x107ca <posix_tests+0x3ce>
		}
        return(1);
    }
#endif

    else if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
   105e2:	93 01       	movw	r18, r6
   105e4:	a7 01       	movw	r20, r14
   105e6:	66 ed       	ldi	r22, 0xD6	; 214
   105e8:	7b e0       	ldi	r23, 0x0B	; 11
   105ea:	c6 01       	movw	r24, r12
   105ec:	0e 94 8d 32 	call	0x651a	; 0x651a <MATCHARGS>
   105f0:	89 2b       	or	r24, r25
   105f2:	79 f1       	breq	.+94     	; 0x10652 <posix_tests+0x256>
    {
        int mode = 0777;
        if((ind+2) <= argc)
   105f4:	e6 14       	cp	r14, r6
   105f6:	f7 04       	cpc	r15, r7
   105f8:	7c f4       	brge	.+30     	; 0x10618 <posix_tests+0x21c>
        {
            mode = strtol(argv[ind+1],NULL,8);
   105fa:	ee 0c       	add	r14, r14
   105fc:	ff 1c       	adc	r15, r15
   105fe:	f4 01       	movw	r30, r8
   10600:	ee 0d       	add	r30, r14
   10602:	ff 1d       	adc	r31, r15
   10604:	48 e0       	ldi	r20, 0x08	; 8
   10606:	50 e0       	ldi	r21, 0x00	; 0
   10608:	60 e0       	ldi	r22, 0x00	; 0
   1060a:	70 e0       	ldi	r23, 0x00	; 0
   1060c:	80 81       	ld	r24, Z
   1060e:	91 81       	ldd	r25, Z+1	; 0x01
   10610:	0e 94 67 47 	call	0x8ece	; 0x8ece <strtol>
   10614:	ab 01       	movw	r20, r22
   10616:	02 c0       	rjmp	.+4      	; 0x1061c <posix_tests+0x220>
    }
#endif

    else if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
    {
        int mode = 0777;
   10618:	4f ef       	ldi	r20, 0xFF	; 255
   1061a:	51 e0       	ldi	r21, 0x01	; 1
        if((ind+2) <= argc)
        {
            mode = strtol(argv[ind+1],NULL,8);
        }
        if ( mkdir(argv[ind],mode) != 0 )
   1061c:	78 01       	movw	r14, r16
   1061e:	ee 0c       	add	r14, r14
   10620:	ff 1c       	adc	r15, r15
   10622:	e8 0c       	add	r14, r8
   10624:	f9 1c       	adc	r15, r9
   10626:	05 2e       	mov	r0, r21
   10628:	00 0c       	add	r0, r0
   1062a:	66 0b       	sbc	r22, r22
   1062c:	77 0b       	sbc	r23, r23
   1062e:	f7 01       	movw	r30, r14
   10630:	80 81       	ld	r24, Z
   10632:	91 81       	ldd	r25, Z+1	; 0x01
   10634:	0e 94 b7 77 	call	0xef6e	; 0xef6e <mkdir>
   10638:	89 2b       	or	r24, r25
   1063a:	09 f4       	brne	.+2      	; 0x1063e <posix_tests+0x242>
   1063c:	49 c0       	rjmp	.+146    	; 0x106d0 <posix_tests+0x2d4>
        {
            printf("mkdir %s failed\n", argv[ind]);
   1063e:	f7 01       	movw	r30, r14
   10640:	80 81       	ld	r24, Z
   10642:	91 81       	ldd	r25, Z+1	; 0x01
   10644:	ed b7       	in	r30, 0x3d	; 61
   10646:	fe b7       	in	r31, 0x3e	; 62
   10648:	95 83       	std	Z+5, r25	; 0x05
   1064a:	84 83       	std	Z+4, r24	; 0x04
   1064c:	84 e7       	ldi	r24, 0x74	; 116
   1064e:	9d e0       	ldi	r25, 0x0D	; 13
   10650:	b6 c0       	rjmp	.+364    	; 0x107be <posix_tests+0x3c2>
            return(-1);
        }
        return(1);
    }

    else if (MATCHARGS(ptr,"page", (ind + 1), argc))
   10652:	93 01       	movw	r18, r6
   10654:	a7 01       	movw	r20, r14
   10656:	6c ed       	ldi	r22, 0xDC	; 220
   10658:	7b e0       	ldi	r23, 0x0B	; 11
   1065a:	c6 01       	movw	r24, r12
   1065c:	0e 94 8d 32 	call	0x651a	; 0x651a <MATCHARGS>
   10660:	89 2b       	or	r24, r25
   10662:	71 f0       	breq	.+28     	; 0x10680 <posix_tests+0x284>
    {
        setpage(atoi(argv[ind]));
   10664:	00 0f       	add	r16, r16
   10666:	11 1f       	adc	r17, r17
   10668:	f4 01       	movw	r30, r8
   1066a:	e0 0f       	add	r30, r16
   1066c:	f1 1f       	adc	r31, r17
   1066e:	80 81       	ld	r24, Z
   10670:	91 81       	ldd	r25, Z+1	; 0x01
   10672:	0e 94 c5 47 	call	0x8f8a	; 0x8f8a <atoi>
/// @retrun void
static int _pagesize = 25;
MEMSPACE
int setpage(int count)
{
    _pagesize = count;
   10676:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <_pagesize+0x1>
   1067a:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <_pagesize>
   1067e:	28 c0       	rjmp	.+80     	; 0x106d0 <posix_tests+0x2d4>
    {
        setpage(atoi(argv[ind]));
        return(1);
    }

    else if (MATCHARGS(ptr,"pwd", (ind + 0), argc))
   10680:	93 01       	movw	r18, r6
   10682:	a8 01       	movw	r20, r16
   10684:	61 ee       	ldi	r22, 0xE1	; 225
   10686:	7b e0       	ldi	r23, 0x0B	; 11
   10688:	c6 01       	movw	r24, r12
   1068a:	0e 94 8d 32 	call	0x651a	; 0x651a <MATCHARGS>
   1068e:	89 2b       	or	r24, r25
   10690:	11 f1       	breq	.+68     	; 0x106d6 <posix_tests+0x2da>
    {
        char path[256];
		char *ptr = getcwd(path, sizeof(path)-2);
   10692:	6e ef       	ldi	r22, 0xFE	; 254
   10694:	70 e0       	ldi	r23, 0x00	; 0
   10696:	ce 01       	movw	r24, r28
   10698:	08 96       	adiw	r24, 0x08	; 8
   1069a:	0e 94 92 77 	call	0xef24	; 0xef24 <getcwd>
		if(ptr == NULL)
   1069e:	00 97       	sbiw	r24, 0x00	; 0
   106a0:	59 f4       	brne	.+22     	; 0x106b8 <posix_tests+0x2bc>
		{
			printf("pwd FAILED\n");
   106a2:	88 e6       	ldi	r24, 0x68	; 104
   106a4:	9d e0       	ldi	r25, 0x0D	; 13
   106a6:	a0 e0       	ldi	r26, 0x00	; 0
   106a8:	ed b7       	in	r30, 0x3d	; 61
   106aa:	fe b7       	in	r31, 0x3e	; 62
   106ac:	81 83       	std	Z+1, r24	; 0x01
   106ae:	92 83       	std	Z+2, r25	; 0x02
   106b0:	a3 83       	std	Z+3, r26	; 0x03
   106b2:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   106b6:	89 c0       	rjmp	.+274    	; 0x107ca <posix_tests+0x3ce>
			return(-1);
		}
        printf("%s\n", ptr);
   106b8:	ed b7       	in	r30, 0x3d	; 61
   106ba:	fe b7       	in	r31, 0x3e	; 62
   106bc:	95 83       	std	Z+5, r25	; 0x05
   106be:	84 83       	std	Z+4, r24	; 0x04
   106c0:	84 e6       	ldi	r24, 0x64	; 100
   106c2:	9d e0       	ldi	r25, 0x0D	; 13
   106c4:	a0 e0       	ldi	r26, 0x00	; 0
   106c6:	81 83       	std	Z+1, r24	; 0x01
   106c8:	92 83       	std	Z+2, r25	; 0x02
   106ca:	a3 83       	std	Z+3, r26	; 0x03
   106cc:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
        return(1);
   106d0:	81 e0       	ldi	r24, 0x01	; 1
   106d2:	90 e0       	ldi	r25, 0x00	; 0
   106d4:	7c c0       	rjmp	.+248    	; 0x107ce <posix_tests+0x3d2>
    }

    else if (MATCHARGS(ptr,"rename", (ind + 2), argc))
   106d6:	93 01       	movw	r18, r6
   106d8:	a5 01       	movw	r20, r10
   106da:	65 ee       	ldi	r22, 0xE5	; 229
   106dc:	7b e0       	ldi	r23, 0x0B	; 11
   106de:	c6 01       	movw	r24, r12
   106e0:	0e 94 8d 32 	call	0x651a	; 0x651a <MATCHARGS>
   106e4:	89 2b       	or	r24, r25
   106e6:	59 f1       	breq	.+86     	; 0x1073e <posix_tests+0x342>
    {
        if( rename(argv[ind],argv[ind+1]) != 0)
   106e8:	00 0f       	add	r16, r16
   106ea:	11 1f       	adc	r17, r17
   106ec:	64 01       	movw	r12, r8
   106ee:	c0 0e       	add	r12, r16
   106f0:	d1 1e       	adc	r13, r17
   106f2:	0e 5f       	subi	r16, 0xFE	; 254
   106f4:	1f 4f       	sbci	r17, 0xFF	; 255
   106f6:	74 01       	movw	r14, r8
   106f8:	e0 0e       	add	r14, r16
   106fa:	f1 1e       	adc	r15, r17
   106fc:	f7 01       	movw	r30, r14
   106fe:	60 81       	ld	r22, Z
   10700:	71 81       	ldd	r23, Z+1	; 0x01
   10702:	f6 01       	movw	r30, r12
   10704:	80 81       	ld	r24, Z
   10706:	91 81       	ldd	r25, Z+1	; 0x01
   10708:	0e 94 e5 77 	call	0xefca	; 0xefca <rename>
   1070c:	89 2b       	or	r24, r25
   1070e:	01 f3       	breq	.-64     	; 0x106d0 <posix_tests+0x2d4>
        {
            printf("rename %s to %s\n", argv[ind], argv[ind+1]);
   10710:	f7 01       	movw	r30, r14
   10712:	80 81       	ld	r24, Z
   10714:	91 81       	ldd	r25, Z+1	; 0x01
   10716:	ed b7       	in	r30, 0x3d	; 61
   10718:	fe b7       	in	r31, 0x3e	; 62
   1071a:	97 83       	std	Z+7, r25	; 0x07
   1071c:	86 83       	std	Z+6, r24	; 0x06
   1071e:	f6 01       	movw	r30, r12
   10720:	80 81       	ld	r24, Z
   10722:	91 81       	ldd	r25, Z+1	; 0x01
   10724:	ed b7       	in	r30, 0x3d	; 61
   10726:	fe b7       	in	r31, 0x3e	; 62
   10728:	95 83       	std	Z+5, r25	; 0x05
   1072a:	84 83       	std	Z+4, r24	; 0x04
   1072c:	83 e5       	ldi	r24, 0x53	; 83
   1072e:	9d e0       	ldi	r25, 0x0D	; 13
   10730:	a0 e0       	ldi	r26, 0x00	; 0
   10732:	81 83       	std	Z+1, r24	; 0x01
   10734:	92 83       	std	Z+2, r25	; 0x02
   10736:	a3 83       	std	Z+3, r26	; 0x03
   10738:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   1073c:	46 c0       	rjmp	.+140    	; 0x107ca <posix_tests+0x3ce>
            return(-1);
        }
        return(1);
    }

    else if (MATCHARGS(ptr,"rm", (ind + 1), argc))
   1073e:	93 01       	movw	r18, r6
   10740:	a7 01       	movw	r20, r14
   10742:	6c ee       	ldi	r22, 0xEC	; 236
   10744:	7b e0       	ldi	r23, 0x0B	; 11
   10746:	c6 01       	movw	r24, r12
   10748:	0e 94 8d 32 	call	0x651a	; 0x651a <MATCHARGS>
   1074c:	89 2b       	or	r24, r25
   1074e:	b9 f0       	breq	.+46     	; 0x1077e <posix_tests+0x382>
    {
        if ( unlink(argv[ind]) != 0)
   10750:	78 01       	movw	r14, r16
   10752:	ee 0c       	add	r14, r14
   10754:	ff 1c       	adc	r15, r15
   10756:	e8 0c       	add	r14, r8
   10758:	f9 1c       	adc	r15, r9
   1075a:	f7 01       	movw	r30, r14
   1075c:	80 81       	ld	r24, Z
   1075e:	91 81       	ldd	r25, Z+1	; 0x01
   10760:	0e 94 04 78 	call	0xf008	; 0xf008 <unlink>
   10764:	89 2b       	or	r24, r25
   10766:	09 f4       	brne	.+2      	; 0x1076a <posix_tests+0x36e>
   10768:	b3 cf       	rjmp	.-154    	; 0x106d0 <posix_tests+0x2d4>
        {
            printf("rm %s failed\n", argv[ind]);
   1076a:	f7 01       	movw	r30, r14
   1076c:	80 81       	ld	r24, Z
   1076e:	91 81       	ldd	r25, Z+1	; 0x01
   10770:	ed b7       	in	r30, 0x3d	; 61
   10772:	fe b7       	in	r31, 0x3e	; 62
   10774:	95 83       	std	Z+5, r25	; 0x05
   10776:	84 83       	std	Z+4, r24	; 0x04
   10778:	85 e4       	ldi	r24, 0x45	; 69
   1077a:	9d e0       	ldi	r25, 0x0D	; 13
   1077c:	20 c0       	rjmp	.+64     	; 0x107be <posix_tests+0x3c2>
        dump_stat(&p);
        return(1);
    }
#endif

    else if (MATCHARGS(ptr,"rmdir", (ind + 1), argc))
   1077e:	93 01       	movw	r18, r6
   10780:	a7 01       	movw	r20, r14
   10782:	6f ee       	ldi	r22, 0xEF	; 239
   10784:	7b e0       	ldi	r23, 0x0B	; 11
   10786:	c6 01       	movw	r24, r12
   10788:	0e 94 8d 32 	call	0x651a	; 0x651a <MATCHARGS>
   1078c:	89 2b       	or	r24, r25
   1078e:	09 f4       	brne	.+2      	; 0x10792 <posix_tests+0x396>
   10790:	3e ce       	rjmp	.-900    	; 0x1040e <posix_tests+0x12>
    {
        if ( rmdir(argv[ind]) != 0)
   10792:	78 01       	movw	r14, r16
   10794:	ee 0c       	add	r14, r14
   10796:	ff 1c       	adc	r15, r15
   10798:	e8 0c       	add	r14, r8
   1079a:	f9 1c       	adc	r15, r9
   1079c:	f7 01       	movw	r30, r14
   1079e:	80 81       	ld	r24, Z
   107a0:	91 81       	ldd	r25, Z+1	; 0x01
   107a2:	0e 94 23 78 	call	0xf046	; 0xf046 <rmdir>
   107a6:	89 2b       	or	r24, r25
   107a8:	09 f4       	brne	.+2      	; 0x107ac <posix_tests+0x3b0>
   107aa:	92 cf       	rjmp	.-220    	; 0x106d0 <posix_tests+0x2d4>
        {
            printf("rmdir %s failed\n", argv[ind]);
   107ac:	f7 01       	movw	r30, r14
   107ae:	80 81       	ld	r24, Z
   107b0:	91 81       	ldd	r25, Z+1	; 0x01
   107b2:	ed b7       	in	r30, 0x3d	; 61
   107b4:	fe b7       	in	r31, 0x3e	; 62
   107b6:	95 83       	std	Z+5, r25	; 0x05
   107b8:	84 83       	std	Z+4, r24	; 0x04
   107ba:	84 e3       	ldi	r24, 0x34	; 52
   107bc:	9d e0       	ldi	r25, 0x0D	; 13
   107be:	a0 e0       	ldi	r26, 0x00	; 0
   107c0:	81 83       	std	Z+1, r24	; 0x01
   107c2:	92 83       	std	Z+2, r25	; 0x02
   107c4:	a3 83       	std	Z+3, r26	; 0x03
   107c6:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
            return(-1);
   107ca:	8f ef       	ldi	r24, 0xFF	; 255
   107cc:	9f ef       	ldi	r25, 0xFF	; 255
        return(1);
    }
#endif

    return(0);
}
   107ce:	c9 5f       	subi	r28, 0xF9	; 249
   107d0:	de 4f       	sbci	r29, 0xFE	; 254
   107d2:	e0 e1       	ldi	r30, 0x10	; 16
   107d4:	0c 94 2b e7 	jmp	0x1ce56	; 0x1ce56 <__epilogue_restores__+0x4>

000107d8 <gpib_timer_init>:
///
/// - Has some platform dependent code.
/// @return  void

void gpib_timer_init()
{
   107d8:	00 d0       	rcall	.+0      	; 0x107da <gpib_timer_init+0x2>
   107da:	1f 92       	push	r1
    if(set_timers(gpib_timer_task,1) == -1)       // Install Clock Task
   107dc:	61 e0       	ldi	r22, 0x01	; 1
   107de:	70 e0       	ldi	r23, 0x00	; 0
   107e0:	88 ea       	ldi	r24, 0xA8	; 168
   107e2:	95 e8       	ldi	r25, 0x85	; 133
   107e4:	0e 94 da 34 	call	0x69b4	; 0x69b4 <set_timers>
   107e8:	01 96       	adiw	r24, 0x01	; 1
   107ea:	51 f4       	brne	.+20     	; 0x10800 <gpib_timer_init+0x28>
        printf("GPIB Clock task init failed\n");
   107ec:	8a ed       	ldi	r24, 0xDA	; 218
   107ee:	9e e0       	ldi	r25, 0x0E	; 14
   107f0:	a0 e0       	ldi	r26, 0x00	; 0
   107f2:	ed b7       	in	r30, 0x3d	; 61
   107f4:	fe b7       	in	r31, 0x3e	; 62
   107f6:	81 83       	std	Z+1, r24	; 0x01
   107f8:	92 83       	std	Z+2, r25	; 0x02
   107fa:	a3 83       	std	Z+3, r26	; 0x03
   107fc:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>

    gpib_timer_reset();
   10800:	95 d1       	rcall	.+810    	; 0x10b2c <gpib_timer_reset>
}
   10802:	0f 90       	pop	r0
   10804:	0f 90       	pop	r0
   10806:	0f 90       	pop	r0
   10808:	08 95       	ret

0001080a <reverse_8bits>:
/// - GPIB D1 controls last device.
///
/// @param [in] mask: bit mask to reverse.
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
   1080a:	28 2f       	mov	r18, r24
   1080c:	98 e0       	ldi	r25, 0x08	; 8
    int8_t i;
    uint8_t rmask = 0;
   1080e:	80 e0       	ldi	r24, 0x00	; 0
    for(i=0;i<8;++i)
    {
        rmask <<= 1;
   10810:	88 0f       	add	r24, r24
        if(mask & 1)
   10812:	20 fd       	sbrc	r18, 0
            rmask |= 1;
   10814:	81 60       	ori	r24, 0x01	; 1
        mask >>= 1;
   10816:	26 95       	lsr	r18
   10818:	91 50       	subi	r25, 0x01	; 1
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
    int8_t i;
    uint8_t rmask = 0;
    for(i=0;i<8;++i)
   1081a:	d1 f7       	brne	.-12     	; 0x10810 <reverse_8bits+0x6>
        if(mask & 1)
            rmask |= 1;
        mask >>= 1;
    }
    return(rmask & 0xff);
}
   1081c:	08 95       	ret

0001081e <ppr_set>:
void ppr_set(uint8_t mask)
{
///@brief optionally reverse bit order in PPR mask
/// Used only of PPR circuit board PPR bits are not reversed in hardware
#if PPR_REVERSE_BITS == 1
    _ppr_reg = reverse_8bits(mask);
   1081e:	f5 df       	rcall	.-22     	; 0x1080a <reverse_8bits>
   10820:	80 93 5e 19 	sts	0x195E, r24	; 0x80195e <_ppr_reg>
#else
    _ppr_reg = mask;
#endif
    SPI0_TXRX_Byte(_ppr_reg);
   10824:	0e 94 34 2b 	call	0x5668	; 0x5668 <SPI0_TXRX_Byte>

    GPIB_IO_HI(PPE);
   10828:	2a 9a       	sbi	0x05, 2	; 5
   1082a:	22 9a       	sbi	0x04, 2	; 4
    GPIB_IO_LOW(PPE);
   1082c:	2a 98       	cbi	0x05, 2	; 5
   1082e:	22 9a       	sbi	0x04, 2	; 4
   10830:	08 95       	ret

00010832 <ppr_reg>:
uint8_t ppr_reg()
{
///@brief optionally reverse bit order in PPR mask
/// Used only of PPR circuit board PPR bits are not reversed in hardware
#if PPR_REVERSE_BITS == 1
    return(reverse_8bits(_ppr_reg));
   10832:	80 91 5e 19 	lds	r24, 0x195E	; 0x80195e <_ppr_reg>
   10836:	e9 cf       	rjmp	.-46     	; 0x1080a <reverse_8bits>
#else
    return(_ppr_reg);
#endif
}
   10838:	08 95       	ret

0001083a <ppr_init>:
///
/// - Hides the register access implimentation from the upper level.
/// @return  void

void ppr_init()
{
   1083a:	00 d0       	rcall	.+0      	; 0x1083c <ppr_init+0x2>
   1083c:	1f 92       	push	r1
#if SDEBUG
    if(debuglevel & GPIB_PPR)
   1083e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10842:	81 ff       	sbrs	r24, 1
   10844:	0a c0       	rjmp	.+20     	; 0x1085a <ppr_init+0x20>
        printf("[PPR DISABLE ALL]\n");
   10846:	87 ec       	ldi	r24, 0xC7	; 199
   10848:	9e e0       	ldi	r25, 0x0E	; 14
   1084a:	a0 e0       	ldi	r26, 0x00	; 0
   1084c:	ed b7       	in	r30, 0x3d	; 61
   1084e:	fe b7       	in	r31, 0x3e	; 62
   10850:	81 83       	std	Z+1, r24	; 0x01
   10852:	92 83       	std	Z+2, r25	; 0x02
   10854:	a3 83       	std	Z+3, r26	; 0x03
   10856:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
#endif
    ppr_set(0);
   1085a:	80 e0       	ldi	r24, 0x00	; 0
   1085c:	e0 df       	rcall	.-64     	; 0x1081e <ppr_set>
}
   1085e:	0f 90       	pop	r0
   10860:	0f 90       	pop	r0
   10862:	0f 90       	pop	r0
   10864:	08 95       	ret

00010866 <ppr_bit_set>:
/// @return  void

void ppr_bit_set(uint8_t bit)
{
///FIXME _ppr_reg = 0;
    BIT_SET(_ppr_reg,bit);
   10866:	21 e0       	ldi	r18, 0x01	; 1
   10868:	30 e0       	ldi	r19, 0x00	; 0
   1086a:	01 c0       	rjmp	.+2      	; 0x1086e <ppr_bit_set+0x8>
   1086c:	22 0f       	add	r18, r18
   1086e:	8a 95       	dec	r24
   10870:	ea f7       	brpl	.-6      	; 0x1086c <ppr_bit_set+0x6>
   10872:	80 91 5e 19 	lds	r24, 0x195E	; 0x80195e <_ppr_reg>
   10876:	82 2b       	or	r24, r18
   10878:	80 93 5e 19 	sts	0x195E, r24	; 0x80195e <_ppr_reg>
    ppr_set(_ppr_reg);
   1087c:	d0 cf       	rjmp	.-96     	; 0x1081e <ppr_set>
   1087e:	08 95       	ret

00010880 <ppr_bit_clr>:
/// @return  void

void ppr_bit_clr(uint8_t bit)
{
///FIXME _ppr_reg = 0;
    BIT_CLR(_ppr_reg,bit);
   10880:	21 e0       	ldi	r18, 0x01	; 1
   10882:	30 e0       	ldi	r19, 0x00	; 0
   10884:	01 c0       	rjmp	.+2      	; 0x10888 <ppr_bit_clr+0x8>
   10886:	22 0f       	add	r18, r18
   10888:	8a 95       	dec	r24
   1088a:	ea f7       	brpl	.-6      	; 0x10886 <ppr_bit_clr+0x6>
   1088c:	20 95       	com	r18
   1088e:	80 91 5e 19 	lds	r24, 0x195E	; 0x80195e <_ppr_reg>
   10892:	82 23       	and	r24, r18
   10894:	80 93 5e 19 	sts	0x195E, r24	; 0x80195e <_ppr_reg>
    ppr_set(_ppr_reg);
   10898:	c2 cf       	rjmp	.-124    	; 0x1081e <ppr_set>
   1089a:	08 95       	ret

0001089c <dbf_open>:
/// @see ff.h
///
/// @return  FRESULT f_open(fp,path, mode);

FRESULT dbf_open (FIL* fp, const TCHAR* path, BYTE mode)
{
   1089c:	0f 93       	push	r16
   1089e:	1f 93       	push	r17
   108a0:	cf 93       	push	r28
   108a2:	df 93       	push	r29
   108a4:	00 d0       	rcall	.+0      	; 0x108a6 <dbf_open+0xa>
   108a6:	00 d0       	rcall	.+0      	; 0x108a8 <dbf_open+0xc>
   108a8:	1f 92       	push	r1
   108aa:	8b 01       	movw	r16, r22
    int rc;
    rc = f_open(fp,path, mode);
   108ac:	0e 94 d4 59 	call	0xb3a8	; 0xb3a8 <f_open>
   108b0:	ec 01       	movw	r28, r24
    if(rc)
   108b2:	89 2b       	or	r24, r25
   108b4:	79 f0       	breq	.+30     	; 0x108d4 <dbf_open+0x38>
    {
        printf("Open error:[%s] ", path);
   108b6:	ed b7       	in	r30, 0x3d	; 61
   108b8:	fe b7       	in	r31, 0x3e	; 62
   108ba:	15 83       	std	Z+5, r17	; 0x05
   108bc:	04 83       	std	Z+4, r16	; 0x04
   108be:	86 eb       	ldi	r24, 0xB6	; 182
   108c0:	9e e0       	ldi	r25, 0x0E	; 14
   108c2:	a0 e0       	ldi	r26, 0x00	; 0
   108c4:	81 83       	std	Z+1, r24	; 0x01
   108c6:	92 83       	std	Z+2, r25	; 0x02
   108c8:	a3 83       	std	Z+3, r26	; 0x03
   108ca:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
        put_rc(rc);
   108ce:	ce 01       	movw	r24, r28
   108d0:	0e 94 9e 70 	call	0xe13c	; 0xe13c <put_rc>
        return (rc);
    }
    return(0);
}
   108d4:	ce 01       	movw	r24, r28
   108d6:	cd b7       	in	r28, 0x3d	; 61
   108d8:	de b7       	in	r29, 0x3e	; 62
   108da:	25 96       	adiw	r28, 0x05	; 5
   108dc:	e4 e0       	ldi	r30, 0x04	; 4
   108de:	0c 94 37 e7 	jmp	0x1ce6e	; 0x1ce6e <__epilogue_restores__+0x1c>

000108e2 <dbf_read>:
/// @see ff.h
///
/// @return  FRESULT f_read (FIL* fp, void* buff, UINT btr, UINT* br)

FRESULT dbf_read (FIL* fp, void* buff, UINT btr, UINT* br)
{
   108e2:	cf 93       	push	r28
   108e4:	df 93       	push	r29
   108e6:	00 d0       	rcall	.+0      	; 0x108e8 <dbf_read+0x6>
   108e8:	1f 92       	push	r1
    int rc;
    rc = f_read(fp, buff, btr, br);
   108ea:	0e 94 8c 5b 	call	0xb718	; 0xb718 <f_read>
   108ee:	ec 01       	movw	r28, r24
    if(rc)
   108f0:	89 2b       	or	r24, r25
   108f2:	69 f0       	breq	.+26     	; 0x1090e <dbf_read+0x2c>
    {
        printf("Read error: ");
   108f4:	89 ea       	ldi	r24, 0xA9	; 169
   108f6:	9e e0       	ldi	r25, 0x0E	; 14
   108f8:	a0 e0       	ldi	r26, 0x00	; 0
   108fa:	ed b7       	in	r30, 0x3d	; 61
   108fc:	fe b7       	in	r31, 0x3e	; 62
   108fe:	81 83       	std	Z+1, r24	; 0x01
   10900:	92 83       	std	Z+2, r25	; 0x02
   10902:	a3 83       	std	Z+3, r26	; 0x03
   10904:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
        put_rc(rc);
   10908:	ce 01       	movw	r24, r28
   1090a:	0e 94 9e 70 	call	0xe13c	; 0xe13c <put_rc>
        return (rc);
    }
    return(0);
}
   1090e:	ce 01       	movw	r24, r28
   10910:	cd b7       	in	r28, 0x3d	; 61
   10912:	de b7       	in	r29, 0x3e	; 62
   10914:	23 96       	adiw	r28, 0x03	; 3
   10916:	e2 e0       	ldi	r30, 0x02	; 2
   10918:	0c 94 39 e7 	jmp	0x1ce72	; 0x1ce72 <__epilogue_restores__+0x20>

0001091c <dbf_write>:
///
/// @see ff.h
/// @return  FRESULT f_write (FIL* fp, void* buff, UINT btw, UINT* bw)

FRESULT dbf_write (FIL* fp, const void* buff, UINT btw, UINT* bw)
{
   1091c:	cf 93       	push	r28
   1091e:	df 93       	push	r29
   10920:	00 d0       	rcall	.+0      	; 0x10922 <dbf_write+0x6>
   10922:	1f 92       	push	r1
    int rc;
    rc = f_write(fp, buff, btw, bw);
   10924:	0e 94 d7 5c 	call	0xb9ae	; 0xb9ae <f_write>
   10928:	ec 01       	movw	r28, r24
    if(rc)
   1092a:	89 2b       	or	r24, r25
   1092c:	69 f0       	breq	.+26     	; 0x10948 <dbf_write+0x2c>
    {
        printf("Write error: ");
   1092e:	8b e9       	ldi	r24, 0x9B	; 155
   10930:	9e e0       	ldi	r25, 0x0E	; 14
   10932:	a0 e0       	ldi	r26, 0x00	; 0
   10934:	ed b7       	in	r30, 0x3d	; 61
   10936:	fe b7       	in	r31, 0x3e	; 62
   10938:	81 83       	std	Z+1, r24	; 0x01
   1093a:	92 83       	std	Z+2, r25	; 0x02
   1093c:	a3 83       	std	Z+3, r26	; 0x03
   1093e:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
        put_rc(rc);
   10942:	ce 01       	movw	r24, r28
   10944:	0e 94 9e 70 	call	0xe13c	; 0xe13c <put_rc>
        return (rc);
    }
    return(0);
}
   10948:	ce 01       	movw	r24, r28
   1094a:	cd b7       	in	r28, 0x3d	; 61
   1094c:	de b7       	in	r29, 0x3e	; 62
   1094e:	23 96       	adiw	r28, 0x03	; 3
   10950:	e2 e0       	ldi	r30, 0x02	; 2
   10952:	0c 94 39 e7 	jmp	0x1ce72	; 0x1ce72 <__epilogue_restores__+0x20>

00010956 <dbf_lseek>:
///
/// @see ff.h.
/// @return  FRESULT

FRESULT dbf_lseek (FIL* fp, DWORD ofs)
{
   10956:	cf 93       	push	r28
   10958:	df 93       	push	r29
   1095a:	00 d0       	rcall	.+0      	; 0x1095c <dbf_lseek+0x6>
   1095c:	1f 92       	push	r1
    int rc;
    rc = f_lseek(fp, ofs);
   1095e:	0e 94 98 60 	call	0xc130	; 0xc130 <f_lseek>
   10962:	ec 01       	movw	r28, r24
    if(rc)
   10964:	89 2b       	or	r24, r25
   10966:	69 f0       	breq	.+26     	; 0x10982 <dbf_lseek+0x2c>
    {
        printf("Seek error: ");
   10968:	8e e8       	ldi	r24, 0x8E	; 142
   1096a:	9e e0       	ldi	r25, 0x0E	; 14
   1096c:	a0 e0       	ldi	r26, 0x00	; 0
   1096e:	ed b7       	in	r30, 0x3d	; 61
   10970:	fe b7       	in	r31, 0x3e	; 62
   10972:	81 83       	std	Z+1, r24	; 0x01
   10974:	92 83       	std	Z+2, r25	; 0x02
   10976:	a3 83       	std	Z+3, r26	; 0x03
   10978:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
        put_rc(rc);
   1097c:	ce 01       	movw	r24, r28
   1097e:	0e 94 9e 70 	call	0xe13c	; 0xe13c <put_rc>
        return (rc);
    }
    return(0);
}
   10982:	ce 01       	movw	r24, r28
   10984:	cd b7       	in	r28, 0x3d	; 61
   10986:	de b7       	in	r29, 0x3e	; 62
   10988:	23 96       	adiw	r28, 0x03	; 3
   1098a:	e2 e0       	ldi	r30, 0x02	; 2
   1098c:	0c 94 39 e7 	jmp	0x1ce72	; 0x1ce72 <__epilogue_restores__+0x20>

00010990 <dbf_close>:
///
/// @see ff.h.
/// @return  FRESULT dbf_close (FIL* fp)

FRESULT dbf_close (FIL* fp)
{
   10990:	cf 93       	push	r28
   10992:	df 93       	push	r29
   10994:	00 d0       	rcall	.+0      	; 0x10996 <dbf_close+0x6>
   10996:	1f 92       	push	r1
    int rc;
    rc = f_close(fp);
   10998:	0e 94 ee 5e 	call	0xbddc	; 0xbddc <f_close>
   1099c:	ec 01       	movw	r28, r24
    if(rc != FR_OK)
   1099e:	89 2b       	or	r24, r25
   109a0:	69 f0       	breq	.+26     	; 0x109bc <dbf_close+0x2c>
    {
        printf("Close error: ");
   109a2:	80 e8       	ldi	r24, 0x80	; 128
   109a4:	9e e0       	ldi	r25, 0x0E	; 14
   109a6:	a0 e0       	ldi	r26, 0x00	; 0
   109a8:	ed b7       	in	r30, 0x3d	; 61
   109aa:	fe b7       	in	r31, 0x3e	; 62
   109ac:	81 83       	std	Z+1, r24	; 0x01
   109ae:	92 83       	std	Z+2, r25	; 0x02
   109b0:	a3 83       	std	Z+3, r26	; 0x03
   109b2:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
        put_rc(rc);
   109b6:	ce 01       	movw	r24, r28
   109b8:	0e 94 9e 70 	call	0xe13c	; 0xe13c <put_rc>
        return (rc);
    }
    return(0);
}
   109bc:	ce 01       	movw	r24, r28
   109be:	cd b7       	in	r28, 0x3d	; 61
   109c0:	de b7       	in	r29, 0x3e	; 62
   109c2:	23 96       	adiw	r28, 0x03	; 3
   109c4:	e2 e0       	ldi	r30, 0x02	; 2
   109c6:	0c 94 39 e7 	jmp	0x1ce72	; 0x1ce72 <__epilogue_restores__+0x20>

000109ca <dbf_open_read>:
/// @return -1 on error.
/// @see: ff.h.
/// @return  FRESULT

int dbf_open_read(char *name, uint32_t pos, void *buff, int size, int *errors)
{
   109ca:	a6 e2       	ldi	r26, 0x26	; 38
   109cc:	b2 e0       	ldi	r27, 0x02	; 2
   109ce:	eb ee       	ldi	r30, 0xEB	; 235
   109d0:	f4 e8       	ldi	r31, 0x84	; 132
   109d2:	0c 94 13 e7 	jmp	0x1ce26	; 0x1ce26 <__prologue_saves__+0xc>
   109d6:	4a 01       	movw	r8, r20
   109d8:	5b 01       	movw	r10, r22
   109da:	69 01       	movw	r12, r18
    int rc;
    FIL fp;
    int flags = 0;
    UINT bytes = 0;
   109dc:	cb 5d       	subi	r28, 0xDB	; 219
   109de:	dd 4f       	sbci	r29, 0xFD	; 253
   109e0:	19 82       	std	Y+1, r1	; 0x01
   109e2:	18 82       	st	Y, r1
   109e4:	c5 52       	subi	r28, 0x25	; 37
   109e6:	d2 40       	sbci	r29, 0x02	; 2

    rc = dbf_open(&fp, name, FA_OPEN_EXISTING | FA_READ | FA_WRITE);
   109e8:	43 e0       	ldi	r20, 0x03	; 3
   109ea:	bc 01       	movw	r22, r24
   109ec:	ce 01       	movw	r24, r28
   109ee:	01 96       	adiw	r24, 0x01	; 1
   109f0:	55 df       	rcall	.-342    	; 0x1089c <dbf_open>
    if( rc != FR_OK)
   109f2:	89 2b       	or	r24, r25
   109f4:	19 f0       	breq	.+6      	; 0x109fc <dbf_open_read+0x32>
    {
        flags |= ERR_DISK;
        flags |= ERR_READ;
        *errors = flags;
   109f6:	81 e1       	ldi	r24, 0x11	; 17
   109f8:	90 e0       	ldi	r25, 0x00	; 0
   109fa:	2f c0       	rjmp	.+94     	; 0x10a5a <dbf_open_read+0x90>
        return( -1 );
    }

///  SEEK
    rc = dbf_lseek(&fp, pos);
   109fc:	b5 01       	movw	r22, r10
   109fe:	a4 01       	movw	r20, r8
   10a00:	ce 01       	movw	r24, r28
   10a02:	01 96       	adiw	r24, 0x01	; 1
   10a04:	a8 df       	rcall	.-176    	; 0x10956 <dbf_lseek>
    if( rc != FR_OK)
   10a06:	89 2b       	or	r24, r25
   10a08:	59 f0       	breq	.+22     	; 0x10a20 <dbf_open_read+0x56>
    {
        flags |= ERR_SEEK;
        flags |= ERR_READ;
        *errors = flags;
   10a0a:	85 e0       	ldi	r24, 0x05	; 5
   10a0c:	90 e0       	ldi	r25, 0x00	; 0
   10a0e:	f7 01       	movw	r30, r14
   10a10:	91 83       	std	Z+1, r25	; 0x01
   10a12:	80 83       	st	Z, r24
        dbf_close(&fp);
   10a14:	ce 01       	movw	r24, r28
   10a16:	01 96       	adiw	r24, 0x01	; 1
   10a18:	bb df       	rcall	.-138    	; 0x10990 <dbf_close>
        return( -1 );
   10a1a:	8f ef       	ldi	r24, 0xFF	; 255
   10a1c:	9f ef       	ldi	r25, 0xFF	; 255
   10a1e:	27 c0       	rjmp	.+78     	; 0x10a6e <dbf_open_read+0xa4>
    }

    rc = dbf_read(&fp, buff,size,&bytes);
   10a20:	9e 01       	movw	r18, r28
   10a22:	2b 5d       	subi	r18, 0xDB	; 219
   10a24:	3d 4f       	sbci	r19, 0xFD	; 253
   10a26:	a8 01       	movw	r20, r16
   10a28:	b6 01       	movw	r22, r12
   10a2a:	ce 01       	movw	r24, r28
   10a2c:	01 96       	adiw	r24, 0x01	; 1
   10a2e:	59 df       	rcall	.-334    	; 0x108e2 <dbf_read>
    if( rc != FR_OK || (UINT) size != bytes)
   10a30:	89 2b       	or	r24, r25
   10a32:	49 f4       	brne	.+18     	; 0x10a46 <dbf_open_read+0x7c>
   10a34:	cb 5d       	subi	r28, 0xDB	; 219
   10a36:	dd 4f       	sbci	r29, 0xFD	; 253
   10a38:	88 81       	ld	r24, Y
   10a3a:	99 81       	ldd	r25, Y+1	; 0x01
   10a3c:	c5 52       	subi	r28, 0x25	; 37
   10a3e:	d2 40       	sbci	r29, 0x02	; 2
   10a40:	08 17       	cp	r16, r24
   10a42:	19 07       	cpc	r17, r25
   10a44:	19 f0       	breq	.+6      	; 0x10a4c <dbf_open_read+0x82>
    {
        flags |= ERR_READ;
        *errors = flags;
   10a46:	81 e0       	ldi	r24, 0x01	; 1
   10a48:	90 e0       	ldi	r25, 0x00	; 0
        dbf_close(&fp);
        return( -1 );
    }
    rc = dbf_close(&fp);
   10a4a:	e1 cf       	rjmp	.-62     	; 0x10a0e <dbf_open_read+0x44>
   10a4c:	ce 01       	movw	r24, r28
   10a4e:	01 96       	adiw	r24, 0x01	; 1
   10a50:	9f df       	rcall	.-194    	; 0x10990 <dbf_close>
    if( rc != FR_OK)
   10a52:	89 2b       	or	r24, r25
   10a54:	31 f0       	breq	.+12     	; 0x10a62 <dbf_open_read+0x98>
    {
        flags |= ERR_DISK;
        *errors = flags;
   10a56:	80 e1       	ldi	r24, 0x10	; 16
   10a58:	90 e0       	ldi	r25, 0x00	; 0
   10a5a:	f7 01       	movw	r30, r14
   10a5c:	91 83       	std	Z+1, r25	; 0x01
   10a5e:	80 83       	st	Z, r24
   10a60:	dc cf       	rjmp	.-72     	; 0x10a1a <dbf_open_read+0x50>
#if 0
// test timeout - this works ok
	delayms(500); 
#endif

    return(bytes);
   10a62:	cb 5d       	subi	r28, 0xDB	; 219
   10a64:	dd 4f       	sbci	r29, 0xFD	; 253
   10a66:	88 81       	ld	r24, Y
   10a68:	99 81       	ldd	r25, Y+1	; 0x01
   10a6a:	c5 52       	subi	r28, 0x25	; 37
   10a6c:	d2 40       	sbci	r29, 0x02	; 2
}
   10a6e:	ca 5d       	subi	r28, 0xDA	; 218
   10a70:	dd 4f       	sbci	r29, 0xFD	; 253
   10a72:	ec e0       	ldi	r30, 0x0C	; 12
   10a74:	0c 94 2f e7 	jmp	0x1ce5e	; 0x1ce5e <__epilogue_restores__+0xc>

00010a78 <dbf_open_write>:
/// @return  bytes actually written.
/// @return -1 on error.
/// @see: ff.h.
/// @return  FRESULT
int dbf_open_write(char *name, uint32_t pos, void *buff, int size, int *errors)
{
   10a78:	a6 e2       	ldi	r26, 0x26	; 38
   10a7a:	b2 e0       	ldi	r27, 0x02	; 2
   10a7c:	e2 e4       	ldi	r30, 0x42	; 66
   10a7e:	f5 e8       	ldi	r31, 0x85	; 133
   10a80:	0c 94 13 e7 	jmp	0x1ce26	; 0x1ce26 <__prologue_saves__+0xc>
   10a84:	4a 01       	movw	r8, r20
   10a86:	5b 01       	movw	r10, r22
   10a88:	69 01       	movw	r12, r18
    int rc;
    FIL fp;
    int flags = 0;
    UINT bytes = 0;
   10a8a:	cb 5d       	subi	r28, 0xDB	; 219
   10a8c:	dd 4f       	sbci	r29, 0xFD	; 253
   10a8e:	19 82       	std	Y+1, r1	; 0x01
   10a90:	18 82       	st	Y, r1
   10a92:	c5 52       	subi	r28, 0x25	; 37
   10a94:	d2 40       	sbci	r29, 0x02	; 2

    rc = dbf_open(&fp, name, FA_OPEN_EXISTING | FA_READ | FA_WRITE);
   10a96:	43 e0       	ldi	r20, 0x03	; 3
   10a98:	bc 01       	movw	r22, r24
   10a9a:	ce 01       	movw	r24, r28
   10a9c:	01 96       	adiw	r24, 0x01	; 1
   10a9e:	fe de       	rcall	.-516    	; 0x1089c <dbf_open>
    if( rc != FR_OK)
   10aa0:	89 2b       	or	r24, r25
   10aa2:	19 f0       	breq	.+6      	; 0x10aaa <dbf_open_write+0x32>
    {
        flags |= ERR_DISK;
        flags |= ERR_WRITE;
        *errors = flags;
   10aa4:	82 e1       	ldi	r24, 0x12	; 18
   10aa6:	90 e0       	ldi	r25, 0x00	; 0
   10aa8:	2f c0       	rjmp	.+94     	; 0x10b08 <dbf_open_write+0x90>
        return( -1 );
    }

///  SEEK
    rc = dbf_lseek(&fp, pos);
   10aaa:	b5 01       	movw	r22, r10
   10aac:	a4 01       	movw	r20, r8
   10aae:	ce 01       	movw	r24, r28
   10ab0:	01 96       	adiw	r24, 0x01	; 1
   10ab2:	51 df       	rcall	.-350    	; 0x10956 <dbf_lseek>
    if( rc != FR_OK)
   10ab4:	89 2b       	or	r24, r25
   10ab6:	59 f0       	breq	.+22     	; 0x10ace <dbf_open_write+0x56>
    {
        flags |= ERR_SEEK;
        flags |= ERR_WRITE;
        *errors = flags;
   10ab8:	86 e0       	ldi	r24, 0x06	; 6
   10aba:	90 e0       	ldi	r25, 0x00	; 0
   10abc:	f7 01       	movw	r30, r14
   10abe:	91 83       	std	Z+1, r25	; 0x01
   10ac0:	80 83       	st	Z, r24
        dbf_close(&fp);
   10ac2:	ce 01       	movw	r24, r28
   10ac4:	01 96       	adiw	r24, 0x01	; 1
   10ac6:	64 df       	rcall	.-312    	; 0x10990 <dbf_close>
        return( -1 );
   10ac8:	8f ef       	ldi	r24, 0xFF	; 255
   10aca:	9f ef       	ldi	r25, 0xFF	; 255
   10acc:	27 c0       	rjmp	.+78     	; 0x10b1c <dbf_open_write+0xa4>
    }

    rc = dbf_write(&fp, buff,size,&bytes);
   10ace:	9e 01       	movw	r18, r28
   10ad0:	2b 5d       	subi	r18, 0xDB	; 219
   10ad2:	3d 4f       	sbci	r19, 0xFD	; 253
   10ad4:	a8 01       	movw	r20, r16
   10ad6:	b6 01       	movw	r22, r12
   10ad8:	ce 01       	movw	r24, r28
   10ada:	01 96       	adiw	r24, 0x01	; 1
   10adc:	1f df       	rcall	.-450    	; 0x1091c <dbf_write>
    if( rc != FR_OK || (UINT) size != bytes)
   10ade:	89 2b       	or	r24, r25
   10ae0:	49 f4       	brne	.+18     	; 0x10af4 <dbf_open_write+0x7c>
   10ae2:	cb 5d       	subi	r28, 0xDB	; 219
   10ae4:	dd 4f       	sbci	r29, 0xFD	; 253
   10ae6:	88 81       	ld	r24, Y
   10ae8:	99 81       	ldd	r25, Y+1	; 0x01
   10aea:	c5 52       	subi	r28, 0x25	; 37
   10aec:	d2 40       	sbci	r29, 0x02	; 2
   10aee:	08 17       	cp	r16, r24
   10af0:	19 07       	cpc	r17, r25
   10af2:	19 f0       	breq	.+6      	; 0x10afa <dbf_open_write+0x82>
    {
        flags |= ERR_WRITE;
        *errors = flags;
   10af4:	82 e0       	ldi	r24, 0x02	; 2
   10af6:	90 e0       	ldi	r25, 0x00	; 0
        dbf_close(&fp);
        return( -1 );
    }
    rc = dbf_close(&fp);
   10af8:	e1 cf       	rjmp	.-62     	; 0x10abc <dbf_open_write+0x44>
   10afa:	ce 01       	movw	r24, r28
   10afc:	01 96       	adiw	r24, 0x01	; 1
   10afe:	48 df       	rcall	.-368    	; 0x10990 <dbf_close>
    if( rc != FR_OK)
   10b00:	89 2b       	or	r24, r25
   10b02:	31 f0       	breq	.+12     	; 0x10b10 <dbf_open_write+0x98>
    {
        flags |= ERR_DISK;
        *errors = flags;
   10b04:	80 e1       	ldi	r24, 0x10	; 16
   10b06:	90 e0       	ldi	r25, 0x00	; 0
   10b08:	f7 01       	movw	r30, r14
   10b0a:	91 83       	std	Z+1, r25	; 0x01
   10b0c:	80 83       	st	Z, r24
   10b0e:	dc cf       	rjmp	.-72     	; 0x10ac8 <dbf_open_write+0x50>
#if 0
// test timeout - this causes timeout
	delayms(200); 
#endif

    return(bytes);
   10b10:	cb 5d       	subi	r28, 0xDB	; 219
   10b12:	dd 4f       	sbci	r29, 0xFD	; 253
   10b14:	88 81       	ld	r24, Y
   10b16:	99 81       	ldd	r25, Y+1	; 0x01
   10b18:	c5 52       	subi	r28, 0x25	; 37
   10b1a:	d2 40       	sbci	r29, 0x02	; 2
}
   10b1c:	ca 5d       	subi	r28, 0xDA	; 218
   10b1e:	dd 4f       	sbci	r29, 0xFD	; 253
   10b20:	ec e0       	ldi	r30, 0x0C	; 12
   10b22:	0c 94 2f e7 	jmp	0x1ce5e	; 0x1ce5e <__epilogue_restores__+0xc>

00010b26 <gpib_timer_elapsed_begin>:
            gpib_timer_elapsed_end("PP released");
#endif
        return(1);
    }
    return(0);
}
   10b26:	0c 94 9a 35 	jmp	0x6b34	; 0x6b34 <clock_elapsed_begin>
   10b2a:	08 95       	ret

00010b2c <gpib_timer_reset>:
   10b2c:	f8 94       	cli
   10b2e:	ef ed       	ldi	r30, 0xDF	; 223
   10b30:	fc e1       	ldi	r31, 0x1C	; 28
   10b32:	10 82       	st	Z, r1
   10b34:	11 82       	std	Z+1, r1	; 0x01
   10b36:	12 82       	std	Z+2, r1	; 0x02
   10b38:	13 82       	std	Z+3, r1	; 0x03
   10b3a:	14 82       	std	Z+4, r1	; 0x04
   10b3c:	15 82       	std	Z+5, r1	; 0x05
   10b3e:	16 82       	std	Z+6, r1	; 0x06
   10b40:	17 82       	std	Z+7, r1	; 0x07
   10b42:	81 e0       	ldi	r24, 0x01	; 1
   10b44:	80 87       	std	Z+8, r24	; 0x08
   10b46:	78 94       	sei
   10b48:	08 95       	ret

00010b4a <gpib_timer_elapsed_end>:
   10b4a:	0c 94 a0 35 	jmp	0x6b40	; 0x6b40 <clock_elapsed_end>
   10b4e:	08 95       	ret

00010b50 <gpib_timer_task>:
   10b50:	f8 94       	cli
   10b52:	80 91 e3 1c 	lds	r24, 0x1CE3	; 0x801ce3 <gpib_timer+0x4>
   10b56:	90 91 e4 1c 	lds	r25, 0x1CE4	; 0x801ce4 <gpib_timer+0x5>
   10b5a:	a0 91 e5 1c 	lds	r26, 0x1CE5	; 0x801ce5 <gpib_timer+0x6>
   10b5e:	b0 91 e6 1c 	lds	r27, 0x1CE6	; 0x801ce6 <gpib_timer+0x7>
   10b62:	89 2b       	or	r24, r25
   10b64:	8a 2b       	or	r24, r26
   10b66:	8b 2b       	or	r24, r27
   10b68:	a1 f0       	breq	.+40     	; 0x10b92 <gpib_timer_task+0x42>
   10b6a:	80 91 e3 1c 	lds	r24, 0x1CE3	; 0x801ce3 <gpib_timer+0x4>
   10b6e:	90 91 e4 1c 	lds	r25, 0x1CE4	; 0x801ce4 <gpib_timer+0x5>
   10b72:	a0 91 e5 1c 	lds	r26, 0x1CE5	; 0x801ce5 <gpib_timer+0x6>
   10b76:	b0 91 e6 1c 	lds	r27, 0x1CE6	; 0x801ce6 <gpib_timer+0x7>
   10b7a:	01 97       	sbiw	r24, 0x01	; 1
   10b7c:	a1 09       	sbc	r26, r1
   10b7e:	b1 09       	sbc	r27, r1
   10b80:	80 93 e3 1c 	sts	0x1CE3, r24	; 0x801ce3 <gpib_timer+0x4>
   10b84:	90 93 e4 1c 	sts	0x1CE4, r25	; 0x801ce4 <gpib_timer+0x5>
   10b88:	a0 93 e5 1c 	sts	0x1CE5, r26	; 0x801ce5 <gpib_timer+0x6>
   10b8c:	b0 93 e6 1c 	sts	0x1CE6, r27	; 0x801ce6 <gpib_timer+0x7>
   10b90:	03 c0       	rjmp	.+6      	; 0x10b98 <gpib_timer_task+0x48>
   10b92:	81 e0       	ldi	r24, 0x01	; 1
   10b94:	80 93 e7 1c 	sts	0x1CE7, r24	; 0x801ce7 <gpib_timer+0x8>
   10b98:	78 94       	sei
   10b9a:	08 95       	ret

00010b9c <gpib_timeout_set>:
   10b9c:	f8 94       	cli
   10b9e:	ef ed       	ldi	r30, 0xDF	; 223
   10ba0:	fc e1       	ldi	r31, 0x1C	; 28
   10ba2:	64 83       	std	Z+4, r22	; 0x04
   10ba4:	75 83       	std	Z+5, r23	; 0x05
   10ba6:	86 83       	std	Z+6, r24	; 0x06
   10ba8:	97 83       	std	Z+7, r25	; 0x07
   10baa:	10 86       	std	Z+8, r1	; 0x08
   10bac:	78 94       	sei
   10bae:	08 95       	ret

00010bb0 <gpib_bus_init>:
   10bb0:	00 d0       	rcall	.+0      	; 0x10bb2 <gpib_bus_init+0x2>
   10bb2:	1f 92       	push	r1
   10bb4:	8f b7       	in	r24, 0x3f	; 63
   10bb6:	f8 94       	cli
   10bb8:	10 92 5f 19 	sts	0x195F, r1	; 0x80195f <gpib_unread_f>
   10bbc:	11 b8       	out	0x01, r1	; 1
   10bbe:	9f ef       	ldi	r25, 0xFF	; 255
   10bc0:	92 b9       	out	0x02, r25	; 2
   10bc2:	21 98       	cbi	0x04, 1	; 4
   10bc4:	29 9a       	sbi	0x05, 1	; 5
   10bc6:	52 98       	cbi	0x0a, 2	; 10
   10bc8:	5a 9a       	sbi	0x0b, 2	; 11
   10bca:	53 98       	cbi	0x0a, 3	; 10
   10bcc:	5b 9a       	sbi	0x0b, 3	; 11
   10bce:	56 98       	cbi	0x0a, 6	; 10
   10bd0:	5e 9a       	sbi	0x0b, 6	; 11
   10bd2:	54 98       	cbi	0x0a, 4	; 10
   10bd4:	5c 9a       	sbi	0x0b, 4	; 11
   10bd6:	57 98       	cbi	0x0a, 7	; 10
   10bd8:	5f 9a       	sbi	0x0b, 7	; 11
   10bda:	55 98       	cbi	0x0a, 5	; 10
   10bdc:	5d 9a       	sbi	0x0b, 5	; 11
   10bde:	20 98       	cbi	0x04, 0	; 4
   10be0:	28 9a       	sbi	0x05, 0	; 5
   10be2:	45 98       	cbi	0x08, 5	; 8
   10be4:	3d 9a       	sbi	0x07, 5	; 7
   10be6:	44 9a       	sbi	0x08, 4	; 8
   10be8:	3c 9a       	sbi	0x07, 4	; 7
   10bea:	43 98       	cbi	0x08, 3	; 8
   10bec:	3b 9a       	sbi	0x07, 3	; 7
   10bee:	42 98       	cbi	0x08, 2	; 8
   10bf0:	3a 9a       	sbi	0x07, 2	; 7
   10bf2:	9d e0       	ldi	r25, 0x0D	; 13
   10bf4:	9a 95       	dec	r25
   10bf6:	f1 f7       	brne	.-4      	; 0x10bf4 <gpib_bus_init+0x44>
   10bf8:	00 00       	nop
   10bfa:	8f bf       	out	0x3f, r24	; 63
   10bfc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10c00:	82 ff       	sbrs	r24, 2
   10c02:	0a c0       	rjmp	.+20     	; 0x10c18 <gpib_bus_init+0x68>
   10c04:	88 e1       	ldi	r24, 0x18	; 24
   10c06:	92 e1       	ldi	r25, 0x12	; 18
   10c08:	a0 e0       	ldi	r26, 0x00	; 0
   10c0a:	ed b7       	in	r30, 0x3d	; 61
   10c0c:	fe b7       	in	r31, 0x3e	; 62
   10c0e:	81 83       	std	Z+1, r24	; 0x01
   10c10:	92 83       	std	Z+2, r25	; 0x02
   10c12:	a3 83       	std	Z+3, r26	; 0x03
   10c14:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   10c18:	0f 90       	pop	r0
   10c1a:	0f 90       	pop	r0
   10c1c:	0f 90       	pop	r0
   10c1e:	08 95       	ret

00010c20 <gpib_rx_init>:
   10c20:	9f b7       	in	r25, 0x3f	; 63
   10c22:	f8 94       	cli
   10c24:	11 b8       	out	0x01, r1	; 1
   10c26:	2f ef       	ldi	r18, 0xFF	; 255
   10c28:	22 b9       	out	0x02, r18	; 2
   10c2a:	21 98       	cbi	0x04, 1	; 4
   10c2c:	29 9a       	sbi	0x05, 1	; 5
   10c2e:	20 98       	cbi	0x04, 0	; 4
   10c30:	28 9a       	sbi	0x05, 0	; 5
   10c32:	4e 9b       	sbis	0x09, 6	; 9
   10c34:	09 c0       	rjmp	.+18     	; 0x10c48 <gpib_rx_init+0x28>
   10c36:	81 11       	cpse	r24, r1
   10c38:	07 c0       	rjmp	.+14     	; 0x10c48 <gpib_rx_init+0x28>
   10c3a:	52 98       	cbi	0x0a, 2	; 10
   10c3c:	5a 9a       	sbi	0x0b, 2	; 11
   10c3e:	53 98       	cbi	0x0a, 3	; 10
   10c40:	5b 9a       	sbi	0x0b, 3	; 11
   10c42:	42 98       	cbi	0x08, 2	; 8
   10c44:	3a 9a       	sbi	0x07, 2	; 7
   10c46:	08 c0       	rjmp	.+16     	; 0x10c58 <gpib_rx_init+0x38>
   10c48:	42 98       	cbi	0x08, 2	; 8
   10c4a:	3a 9a       	sbi	0x07, 2	; 7
   10c4c:	5b 98       	cbi	0x0b, 3	; 11
   10c4e:	53 9a       	sbi	0x0a, 3	; 10
   10c50:	5a 98       	cbi	0x0b, 2	; 11
   10c52:	52 9a       	sbi	0x0a, 2	; 10
   10c54:	88 23       	and	r24, r24
   10c56:	89 f3       	breq	.-30     	; 0x10c3a <gpib_rx_init+0x1a>
   10c58:	9f bf       	out	0x3f, r25	; 63
   10c5a:	08 95       	ret

00010c5c <gpib_tx_init>:
   10c5c:	9f b7       	in	r25, 0x3f	; 63
   10c5e:	f8 94       	cli
   10c60:	11 b8       	out	0x01, r1	; 1
   10c62:	8f ef       	ldi	r24, 0xFF	; 255
   10c64:	82 b9       	out	0x02, r24	; 2
   10c66:	21 98       	cbi	0x04, 1	; 4
   10c68:	29 9a       	sbi	0x05, 1	; 5
   10c6a:	52 98       	cbi	0x0a, 2	; 10
   10c6c:	5a 9a       	sbi	0x0b, 2	; 11
   10c6e:	53 98       	cbi	0x0a, 3	; 10
   10c70:	5b 9a       	sbi	0x0b, 3	; 11
   10c72:	20 98       	cbi	0x04, 0	; 4
   10c74:	28 9a       	sbi	0x05, 0	; 5
   10c76:	42 9a       	sbi	0x08, 2	; 8
   10c78:	3a 9a       	sbi	0x07, 2	; 7
   10c7a:	81 b9       	out	0x01, r24	; 1
   10c7c:	9f bf       	out	0x3f, r25	; 63
   10c7e:	08 95       	ret

00010c80 <gpib_state_init>:
   10c80:	00 d0       	rcall	.+0      	; 0x10c82 <gpib_state_init+0x2>
   10c82:	1f 92       	push	r1
   10c84:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10c88:	82 ff       	sbrs	r24, 2
   10c8a:	0a c0       	rjmp	.+20     	; 0x10ca0 <gpib_state_init+0x20>
   10c8c:	85 e0       	ldi	r24, 0x05	; 5
   10c8e:	92 e1       	ldi	r25, 0x12	; 18
   10c90:	a0 e0       	ldi	r26, 0x00	; 0
   10c92:	ed b7       	in	r30, 0x3d	; 61
   10c94:	fe b7       	in	r31, 0x3e	; 62
   10c96:	81 83       	std	Z+1, r24	; 0x01
   10c98:	92 83       	std	Z+2, r25	; 0x02
   10c9a:	a3 83       	std	Z+3, r26	; 0x03
   10c9c:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   10ca0:	cc dd       	rcall	.-1128   	; 0x1083a <ppr_init>
   10ca2:	0e 94 e1 90 	call	0x121c2	; 0x121c2 <listen_cleanup>
   10ca6:	0e 94 f7 91 	call	0x123ee	; 0x123ee <talk_cleanup>
   10caa:	10 92 eb 1e 	sts	0x1EEB, r1	; 0x801eeb <spoll>
   10cae:	10 92 ee 1e 	sts	0x1EEE, r1	; 0x801eee <talking>
   10cb2:	10 92 f1 1e 	sts	0x1EF1, r1	; 0x801ef1 <talking_last>
   10cb6:	10 92 f0 1e 	sts	0x1EF0, r1	; 0x801ef0 <listening>
   10cba:	10 92 ea 1e 	sts	0x1EEA, r1	; 0x801eea <listening_last>
   10cbe:	10 92 e9 1c 	sts	0x1CE9, r1	; 0x801ce9 <lastcmd+0x1>
   10cc2:	10 92 e8 1c 	sts	0x1CE8, r1	; 0x801ce8 <lastcmd>
   10cc6:	10 92 ed 1e 	sts	0x1EED, r1	; 0x801eed <current+0x1>
   10cca:	10 92 ec 1e 	sts	0x1EEC, r1	; 0x801eec <current>
   10cce:	10 92 ef 1e 	sts	0x1EEF, r1	; 0x801eef <secondary>
   10cd2:	0f 90       	pop	r0
   10cd4:	0f 90       	pop	r0
   10cd6:	0f 90       	pop	r0
   10cd8:	08 95       	ret

00010cda <gpib_enable_PPR>:
   10cda:	cf 93       	push	r28
   10cdc:	df 93       	push	r29
   10cde:	ad b7       	in	r26, 0x3d	; 61
   10ce0:	be b7       	in	r27, 0x3e	; 62
   10ce2:	17 97       	sbiw	r26, 0x07	; 7
   10ce4:	0f b6       	in	r0, 0x3f	; 63
   10ce6:	f8 94       	cli
   10ce8:	be bf       	out	0x3e, r27	; 62
   10cea:	0f be       	out	0x3f, r0	; 63
   10cec:	ad bf       	out	0x3d, r26	; 61
   10cee:	ec 01       	movw	r28, r24
   10cf0:	88 30       	cpi	r24, 0x08	; 8
   10cf2:	91 05       	cpc	r25, r1
   10cf4:	68 f0       	brcs	.+26     	; 0x10d10 <gpib_enable_PPR+0x36>
   10cf6:	ed b7       	in	r30, 0x3d	; 61
   10cf8:	fe b7       	in	r31, 0x3e	; 62
   10cfa:	95 83       	std	Z+5, r25	; 0x05
   10cfc:	84 83       	std	Z+4, r24	; 0x04
   10cfe:	8f ed       	ldi	r24, 0xDF	; 223
   10d00:	91 e1       	ldi	r25, 0x11	; 17
   10d02:	a0 e0       	ldi	r26, 0x00	; 0
   10d04:	81 83       	std	Z+1, r24	; 0x01
   10d06:	92 83       	std	Z+2, r25	; 0x02
   10d08:	a3 83       	std	Z+3, r26	; 0x03
   10d0a:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   10d0e:	15 c0       	rjmp	.+42     	; 0x10d3a <gpib_enable_PPR+0x60>
   10d10:	aa dd       	rcall	.-1196   	; 0x10866 <ppr_bit_set>
   10d12:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10d16:	81 ff       	sbrs	r24, 1
   10d18:	10 c0       	rjmp	.+32     	; 0x10d3a <gpib_enable_PPR+0x60>
   10d1a:	8b dd       	rcall	.-1258   	; 0x10832 <ppr_reg>
   10d1c:	90 e0       	ldi	r25, 0x00	; 0
   10d1e:	ed b7       	in	r30, 0x3d	; 61
   10d20:	fe b7       	in	r31, 0x3e	; 62
   10d22:	97 83       	std	Z+7, r25	; 0x07
   10d24:	86 83       	std	Z+6, r24	; 0x06
   10d26:	d5 83       	std	Z+5, r29	; 0x05
   10d28:	c4 83       	std	Z+4, r28	; 0x04
   10d2a:	84 ec       	ldi	r24, 0xC4	; 196
   10d2c:	91 e1       	ldi	r25, 0x11	; 17
   10d2e:	a0 e0       	ldi	r26, 0x00	; 0
   10d30:	81 83       	std	Z+1, r24	; 0x01
   10d32:	92 83       	std	Z+2, r25	; 0x02
   10d34:	a3 83       	std	Z+3, r26	; 0x03
   10d36:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   10d3a:	cd b7       	in	r28, 0x3d	; 61
   10d3c:	de b7       	in	r29, 0x3e	; 62
   10d3e:	27 96       	adiw	r28, 0x07	; 7
   10d40:	e2 e0       	ldi	r30, 0x02	; 2
   10d42:	0c 94 39 e7 	jmp	0x1ce72	; 0x1ce72 <__epilogue_restores__+0x20>

00010d46 <gpib_disable_PPR>:
   10d46:	cf 93       	push	r28
   10d48:	df 93       	push	r29
   10d4a:	ad b7       	in	r26, 0x3d	; 61
   10d4c:	be b7       	in	r27, 0x3e	; 62
   10d4e:	17 97       	sbiw	r26, 0x07	; 7
   10d50:	0f b6       	in	r0, 0x3f	; 63
   10d52:	f8 94       	cli
   10d54:	be bf       	out	0x3e, r27	; 62
   10d56:	0f be       	out	0x3f, r0	; 63
   10d58:	ad bf       	out	0x3d, r26	; 61
   10d5a:	ec 01       	movw	r28, r24
   10d5c:	88 30       	cpi	r24, 0x08	; 8
   10d5e:	91 05       	cpc	r25, r1
   10d60:	68 f0       	brcs	.+26     	; 0x10d7c <gpib_disable_PPR+0x36>
   10d62:	ed b7       	in	r30, 0x3d	; 61
   10d64:	fe b7       	in	r31, 0x3e	; 62
   10d66:	95 83       	std	Z+5, r25	; 0x05
   10d68:	84 83       	std	Z+4, r24	; 0x04
   10d6a:	8d e9       	ldi	r24, 0x9D	; 157
   10d6c:	91 e1       	ldi	r25, 0x11	; 17
   10d6e:	a0 e0       	ldi	r26, 0x00	; 0
   10d70:	81 83       	std	Z+1, r24	; 0x01
   10d72:	92 83       	std	Z+2, r25	; 0x02
   10d74:	a3 83       	std	Z+3, r26	; 0x03
   10d76:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   10d7a:	15 c0       	rjmp	.+42     	; 0x10da6 <gpib_disable_PPR+0x60>
   10d7c:	81 dd       	rcall	.-1278   	; 0x10880 <ppr_bit_clr>
   10d7e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10d82:	81 ff       	sbrs	r24, 1
   10d84:	10 c0       	rjmp	.+32     	; 0x10da6 <gpib_disable_PPR+0x60>
   10d86:	55 dd       	rcall	.-1366   	; 0x10832 <ppr_reg>
   10d88:	90 e0       	ldi	r25, 0x00	; 0
   10d8a:	ed b7       	in	r30, 0x3d	; 61
   10d8c:	fe b7       	in	r31, 0x3e	; 62
   10d8e:	97 83       	std	Z+7, r25	; 0x07
   10d90:	86 83       	std	Z+6, r24	; 0x06
   10d92:	d5 83       	std	Z+5, r29	; 0x05
   10d94:	c4 83       	std	Z+4, r28	; 0x04
   10d96:	82 e8       	ldi	r24, 0x82	; 130
   10d98:	91 e1       	ldi	r25, 0x11	; 17
   10d9a:	a0 e0       	ldi	r26, 0x00	; 0
   10d9c:	81 83       	std	Z+1, r24	; 0x01
   10d9e:	92 83       	std	Z+2, r25	; 0x02
   10da0:	a3 83       	std	Z+3, r26	; 0x03
   10da2:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   10da6:	cd b7       	in	r28, 0x3d	; 61
   10da8:	de b7       	in	r29, 0x3e	; 62
   10daa:	27 96       	adiw	r28, 0x07	; 7
   10dac:	e2 e0       	ldi	r30, 0x02	; 2
   10dae:	0c 94 39 e7 	jmp	0x1ce72	; 0x1ce72 <__epilogue_restores__+0x20>

00010db2 <gpib_unread>:
///     - If ATN is LOW then we strip parity from the byte.
///   - Upper 8 bits: Status and Errors present.
///     - @see gpib.h _FLAGS defines for a full list.
/// @return ch
uint16_t gpib_unread(uint16_t ch)
{
   10db2:	cf 93       	push	r28
   10db4:	df 93       	push	r29
   10db6:	00 d0       	rcall	.+0      	; 0x10db8 <gpib_unread+0x6>
   10db8:	1f 92       	push	r1
   10dba:	ec 01       	movw	r28, r24
    if(!gpib_unread_f)
   10dbc:	80 91 5f 19 	lds	r24, 0x195F	; 0x80195f <gpib_unread_f>
   10dc0:	81 11       	cpse	r24, r1
   10dc2:	08 c0       	rjmp	.+16     	; 0x10dd4 <gpib_unread+0x22>
    {
        gpib_unread_data = ch;
   10dc4:	d0 93 f3 1e 	sts	0x1EF3, r29	; 0x801ef3 <gpib_unread_data+0x1>
   10dc8:	c0 93 f2 1e 	sts	0x1EF2, r28	; 0x801ef2 <gpib_unread_data>
        gpib_unread_f = 1;
   10dcc:	81 e0       	ldi	r24, 0x01	; 1
   10dce:	80 93 5f 19 	sts	0x195F, r24	; 0x80195f <gpib_unread_f>
   10dd2:	12 c0       	rjmp	.+36     	; 0x10df8 <gpib_unread+0x46>
    }
    else
    {
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10dd4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10dd8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10ddc:	85 70       	andi	r24, 0x05	; 5
   10dde:	99 27       	eor	r25, r25
   10de0:	89 2b       	or	r24, r25
   10de2:	51 f0       	breq	.+20     	; 0x10df8 <gpib_unread+0x46>
            printf("gpib_unread: error, can only be called once!\n");
   10de4:	84 e5       	ldi	r24, 0x54	; 84
   10de6:	91 e1       	ldi	r25, 0x11	; 17
   10de8:	a0 e0       	ldi	r26, 0x00	; 0
   10dea:	ed b7       	in	r30, 0x3d	; 61
   10dec:	fe b7       	in	r31, 0x3e	; 62
   10dee:	81 83       	std	Z+1, r24	; 0x01
   10df0:	92 83       	std	Z+2, r25	; 0x02
   10df2:	a3 83       	std	Z+3, r26	; 0x03
   10df4:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    }
    return(ch);
}
   10df8:	ce 01       	movw	r24, r28
   10dfa:	cd b7       	in	r28, 0x3d	; 61
   10dfc:	de b7       	in	r29, 0x3e	; 62
   10dfe:	23 96       	adiw	r28, 0x03	; 3
   10e00:	e2 e0       	ldi	r30, 0x02	; 2
   10e02:	0c 94 39 e7 	jmp	0x1ce72	; 0x1ce72 <__epilogue_restores__+0x20>

00010e06 <gpib_bus_read>:

/// @brief Read GPIB data BUS only
/// @return  bus (lower 8 bits)
uint8_t gpib_bus_read()
{
    uint8_t bus = ~(GPIB_BUS_RD());
   10e06:	11 b8       	out	0x01, r1	; 1
   10e08:	80 b1       	in	r24, 0x00	; 0
   10e0a:	80 95       	com	r24

///@brief if a command byte (ATN low) then strip partity
    if(!GPIB_PIN_TST(ATN))
   10e0c:	4e 9b       	sbis	0x09, 6	; 9
        bus &= 0x7f;
   10e0e:	8f 77       	andi	r24, 0x7F	; 127
    else
        bus &= 0xff;
    return(bus);
}
   10e10:	08 95       	ret

00010e12 <gpib_control_pin_read>:
/// @return  control lines (upper 8 bits)
/// @see gpib_rx_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
    if(GPIB_PIN_TST(ATN) == 0 )
   10e12:	4e 99       	sbic	0x09, 6	; 9
   10e14:	03 c0       	rjmp	.+6      	; 0x10e1c <gpib_control_pin_read+0xa>
        control |= ATN_FLAG;
   10e16:	80 e0       	ldi	r24, 0x00	; 0
   10e18:	94 e0       	ldi	r25, 0x04	; 4
   10e1a:	02 c0       	rjmp	.+4      	; 0x10e20 <gpib_control_pin_read+0xe>
///   FIXME We could add a test for read/write state ??
/// @return  control lines (upper 8 bits)
/// @see gpib_rx_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
   10e1c:	80 e0       	ldi	r24, 0x00	; 0
   10e1e:	90 e0       	ldi	r25, 0x00	; 0
    if(GPIB_PIN_TST(ATN) == 0 )
        control |= ATN_FLAG;
    if(GPIB_PIN_TST(EOI) == 0 )
   10e20:	18 9b       	sbis	0x03, 0	; 3
        control |= EOI_FLAG;
   10e22:	91 60       	ori	r25, 0x01	; 1
    if(GPIB_PIN_TST(SRQ) == 0 )
   10e24:	4d 9b       	sbis	0x09, 5	; 9
        control |= SRQ_FLAG;
   10e26:	92 60       	ori	r25, 0x02	; 2
    if(GPIB_PIN_TST(REN) == 0 )
   10e28:	4f 9b       	sbis	0x09, 7	; 9
        control |= REN_FLAG;
   10e2a:	98 60       	ori	r25, 0x08	; 8
    if(GPIB_PIN_TST(IFC) == 0 )
   10e2c:	4c 9b       	sbis	0x09, 4	; 9
        control |= IFC_FLAG;
   10e2e:	90 61       	ori	r25, 0x10	; 16
    return(control);
}
   10e30:	08 95       	ret

00010e32 <gpib_handshake_pin_read>:
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
/// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
   10e32:	19 99       	sbic	0x03, 1	; 3
   10e34:	03 c0       	rjmp	.+6      	; 0x10e3c <gpib_handshake_pin_read+0xa>
        control |= DAV_FLAG;
   10e36:	80 e0       	ldi	r24, 0x00	; 0
   10e38:	90 e2       	ldi	r25, 0x20	; 32
   10e3a:	02 c0       	rjmp	.+4      	; 0x10e40 <gpib_handshake_pin_read+0xe>
/// FIXME: V2 boards can only read pins enabled for read by the SN75162
///   FIXME We could add a test for read/write state ??
/// @return  handshake lines (upper 8 bits)
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
   10e3c:	80 e0       	ldi	r24, 0x00	; 0
   10e3e:	90 e0       	ldi	r25, 0x00	; 0
///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
/// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
        control |= DAV_FLAG;
    if(GPIB_PIN_TST(NRFD) == 0 )
   10e40:	4a 9b       	sbis	0x09, 2	; 9
        control |= NRFD_FLAG;
   10e42:	90 64       	ori	r25, 0x40	; 64
    if(GPIB_PIN_TST(NDAC) == 0 )
   10e44:	4b 9b       	sbis	0x09, 3	; 9
        control |= NDAC_FLAG;
   10e46:	90 68       	ori	r25, 0x80	; 128
    return(control);
}
   10e48:	08 95       	ret

00010e4a <gpib_write_byte>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
uint16_t gpib_write_byte(uint16_t ch)
{
   10e4a:	2f 92       	push	r2
   10e4c:	3f 92       	push	r3
   10e4e:	4f 92       	push	r4
   10e50:	6f 92       	push	r6
   10e52:	7f 92       	push	r7
   10e54:	8f 92       	push	r8
   10e56:	af 92       	push	r10
   10e58:	bf 92       	push	r11
   10e5a:	cf 92       	push	r12
   10e5c:	df 92       	push	r13
   10e5e:	ef 92       	push	r14
   10e60:	1f 93       	push	r17
   10e62:	cf 93       	push	r28
   10e64:	df 93       	push	r29
   10e66:	cd b7       	in	r28, 0x3d	; 61
   10e68:	de b7       	in	r29, 0x3e	; 62
   10e6a:	2a 97       	sbiw	r28, 0x0a	; 10
   10e6c:	0f b6       	in	r0, 0x3f	; 63
   10e6e:	f8 94       	cli
   10e70:	de bf       	out	0x3e, r29	; 62
   10e72:	0f be       	out	0x3f, r0	; 63
   10e74:	cd bf       	out	0x3d, r28	; 61
   10e76:	9a 87       	std	Y+10, r25	; 0x0a
   10e78:	89 87       	std	Y+9, r24	; 0x09
#if 0
	gpib_rx_init(0);	// NOT busy, NRFD and NDAC OC
#endif

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);
   10e7a:	64 ef       	ldi	r22, 0xF4	; 244
   10e7c:	71 e0       	ldi	r23, 0x01	; 1
   10e7e:	80 e0       	ldi	r24, 0x00	; 0
   10e80:	90 e0       	ldi	r25, 0x00	; 0
   10e82:	8c de       	rcall	.-744    	; 0x10b9c <gpib_timeout_set>
// Now Done in write_str
#if 0
	gpib_rx_init(0);	// NOT busy, NRFD and NDAC OC
#endif

    tx_state = GPIB_TX_START;
   10e84:	10 e0       	ldi	r17, 0x00	; 0
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<gpib_write_byte timeout waiting for NDAC==1>\n");
   10e86:	8f e4       	ldi	r24, 0x4F	; 79
   10e88:	90 e1       	ldi	r25, 0x10	; 16
   10e8a:	6c 01       	movw	r12, r24
   10e8c:	e1 2c       	mov	r14, r1
                    tx_state = GPIB_TX_SET_DAV_LOW;
                }
                if (gpib_timeout_test())
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   10e8e:	8e e7       	ldi	r24, 0x7E	; 126
   10e90:	90 e1       	ldi	r25, 0x10	; 16
   10e92:	3c 01       	movw	r6, r24
   10e94:	81 2c       	mov	r8, r1
					}
					else
					{
#ifdef SDEBUG
						if(debuglevel & GPIB_ERR)
							printf("gpib_write_byte: ATN = 0 while waiting for NRFD LOW state =%d\n",tx_state);
   10e96:	aa 24       	eor	r10, r10
   10e98:	a3 94       	inc	r10
   10e9a:	b1 2c       	mov	r11, r1
   10e9c:	86 ef       	ldi	r24, 0xF6	; 246
   10e9e:	90 e1       	ldi	r25, 0x10	; 16
   10ea0:	1c 01       	movw	r2, r24
   10ea2:	41 2c       	mov	r4, r1
					break;
                }
                if (gpib_timeout_test())
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   10ea4:	8a eb       	ldi	r24, 0xBA	; 186
   10ea6:	90 e1       	ldi	r25, 0x10	; 16
   10ea8:	9c 01       	movw	r18, r24
   10eaa:	40 e0       	ldi	r20, 0x00	; 0
   10eac:	2e 83       	std	Y+6, r18	; 0x06
   10eae:	3f 83       	std	Y+7, r19	; 0x07
   10eb0:	48 87       	std	Y+8, r20	; 0x08
	// Not called for writting
#if 0
        gpib_user_task();
#endif

		if(uart_keyhit(0))
   10eb2:	80 e0       	ldi	r24, 0x00	; 0
   10eb4:	0e 94 91 2a 	call	0x5522	; 0x5522 <uart_keyhit>
   10eb8:	89 2b       	or	r24, r25
   10eba:	09 f0       	breq	.+2      	; 0x10ebe <gpib_write_byte+0x74>
   10ebc:	e7 c0       	rjmp	.+462    	; 0x1108c <gpib_write_byte+0x242>
        if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

// IFC is always in for a device
        if(GPIB_PIN_TST(IFC) == 0)
   10ebe:	4c 99       	sbic	0x09, 4	; 9
   10ec0:	19 c0       	rjmp	.+50     	; 0x10ef4 <gpib_write_byte+0xaa>
        {
            ch |= IFC_FLAG;
   10ec2:	89 85       	ldd	r24, Y+9	; 0x09
   10ec4:	9a 85       	ldd	r25, Y+10	; 0x0a
   10ec6:	90 61       	ori	r25, 0x10	; 16
   10ec8:	9a 87       	std	Y+10, r25	; 0x0a
            gpib_bus_init();
   10eca:	89 87       	std	Y+9, r24	; 0x09
   10ecc:	71 de       	rcall	.-798    	; 0x10bb0 <gpib_bus_init>
			if(debuglevel & GPIB_ERR)
   10ece:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10ed2:	80 ff       	sbrs	r24, 0
   10ed4:	db c0       	rjmp	.+438    	; 0x1108c <gpib_write_byte+0x242>
				printf("gpib_write_byte: IFC state=%d\n", tx_state);
   10ed6:	81 2f       	mov	r24, r17
   10ed8:	90 e0       	ldi	r25, 0x00	; 0
   10eda:	ed b7       	in	r30, 0x3d	; 61
   10edc:	fe b7       	in	r31, 0x3e	; 62
   10ede:	95 83       	std	Z+5, r25	; 0x05
   10ee0:	84 83       	std	Z+4, r24	; 0x04
   10ee2:	85 e3       	ldi	r24, 0x35	; 53
   10ee4:	91 e1       	ldi	r25, 0x11	; 17
   10ee6:	a0 e0       	ldi	r26, 0x00	; 0
   10ee8:	81 83       	std	Z+1, r24	; 0x01
   10eea:	92 83       	std	Z+2, r25	; 0x02
   10eec:	a3 83       	std	Z+3, r26	; 0x03
   10eee:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   10ef2:	cc c0       	rjmp	.+408    	; 0x1108c <gpib_write_byte+0x242>
            break;
        }

        switch(tx_state)
   10ef4:	81 2f       	mov	r24, r17
   10ef6:	90 e0       	ldi	r25, 0x00	; 0
   10ef8:	89 30       	cpi	r24, 0x09	; 9
   10efa:	91 05       	cpc	r25, r1
   10efc:	08 f0       	brcs	.+2      	; 0x10f00 <gpib_write_byte+0xb6>
   10efe:	be c0       	rjmp	.+380    	; 0x1107c <gpib_write_byte+0x232>
   10f00:	fc 01       	movw	r30, r24
   10f02:	e3 54       	subi	r30, 0x43	; 67
   10f04:	ff 4f       	sbci	r31, 0xFF	; 255
   10f06:	0c 94 de e6 	jmp	0x1cdbc	; 0x1cdbc <__tablejump2__>
        {
			// DAV == 1 the bus is ready
            case GPIB_TX_START:
				gpib_tx_init();
   10f0a:	a8 de       	rcall	.-688    	; 0x10c5c <gpib_tx_init>
				GPIB_PIN_FLOAT_UP(DAV);
   10f0c:	21 98       	cbi	0x04, 1	; 4
   10f0e:	29 9a       	sbi	0x05, 1	; 5
   10f10:	fd e0       	ldi	r31, 0x0D	; 13
   10f12:	fa 95       	dec	r31
   10f14:	f1 f7       	brne	.-4      	; 0x10f12 <gpib_write_byte+0xc8>
   10f16:	00 00       	nop
   10f18:	06 c0       	rjmp	.+12     	; 0x10f26 <gpib_write_byte+0xdc>
                tx_state = GPIB_TX_PUT_DATA;
                break;

// Wait for NRFD or NDAC LOW
            case GPIB_TX_WAIT_FOR_NRFD_OR_NDAC_LOW:
                if(GPIB_PIN_TST(NRFD) == 0 || GPIB_PIN_TST(NDAC) == 0)
   10f1a:	4a 9b       	sbis	0x09, 2	; 9
   10f1c:	02 c0       	rjmp	.+4      	; 0x10f22 <gpib_write_byte+0xd8>
   10f1e:	4b 99       	sbic	0x09, 3	; 9
   10f20:	17 c0       	rjmp	.+46     	; 0x10f50 <gpib_write_byte+0x106>
                {
					if(GPIB_PIN_TST(ATN) == 1)
   10f22:	4e 9b       	sbis	0x09, 6	; 9
   10f24:	07 c0       	rjmp	.+14     	; 0x10f34 <gpib_write_byte+0xea>
					{
						gpib_timeout_set(HTIMEOUT);
   10f26:	64 ef       	ldi	r22, 0xF4	; 244
   10f28:	71 e0       	ldi	r23, 0x01	; 1
   10f2a:	80 e0       	ldi	r24, 0x00	; 0
   10f2c:	90 e0       	ldi	r25, 0x00	; 0
   10f2e:	36 de       	rcall	.-916    	; 0x10b9c <gpib_timeout_set>
						tx_state = GPIB_TX_PUT_DATA;
   10f30:	12 e0       	ldi	r17, 0x02	; 2
   10f32:	bf cf       	rjmp	.-130    	; 0x10eb2 <gpib_write_byte+0x68>
					}
					else
					{
#ifdef SDEBUG
						if(debuglevel & GPIB_ERR)
   10f34:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10f38:	80 ff       	sbrs	r24, 0
   10f3a:	bb cf       	rjmp	.-138    	; 0x10eb2 <gpib_write_byte+0x68>
							printf("gpib_write_byte: ATN = 0 while waiting for NRFD LOW state =%d\n",tx_state);
   10f3c:	ed b7       	in	r30, 0x3d	; 61
   10f3e:	fe b7       	in	r31, 0x3e	; 62
   10f40:	b5 82       	std	Z+5, r11	; 0x05
   10f42:	a4 82       	std	Z+4, r10	; 0x04
   10f44:	21 82       	std	Z+1, r2	; 0x01
   10f46:	32 82       	std	Z+2, r3	; 0x02
   10f48:	43 82       	std	Z+3, r4	; 0x03
   10f4a:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   10f4e:	b1 cf       	rjmp	.-158    	; 0x10eb2 <gpib_write_byte+0x68>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10f50:	80 91 e7 1c 	lds	r24, 0x1CE7	; 0x801ce7 <gpib_timer+0x8>
							printf("gpib_write_byte: ATN = 0 while waiting for NRFD LOW state =%d\n",tx_state);
#endif
					}
					break;
                }
                if (gpib_timeout_test())
   10f54:	88 23       	and	r24, r24
   10f56:	09 f4       	brne	.+2      	; 0x10f5a <gpib_write_byte+0x110>
   10f58:	ac cf       	rjmp	.-168    	; 0x10eb2 <gpib_write_byte+0x68>
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10f5a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10f5e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10f62:	85 70       	andi	r24, 0x05	; 5
   10f64:	99 27       	eor	r25, r25
   10f66:	89 2b       	or	r24, r25
   10f68:	c1 f1       	breq	.+112    	; 0x10fda <gpib_write_byte+0x190>
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   10f6a:	2e 81       	ldd	r18, Y+6	; 0x06
   10f6c:	3f 81       	ldd	r19, Y+7	; 0x07
   10f6e:	48 85       	ldd	r20, Y+8	; 0x08
   10f70:	ed b7       	in	r30, 0x3d	; 61
   10f72:	fe b7       	in	r31, 0x3e	; 62
   10f74:	21 83       	std	Z+1, r18	; 0x01
   10f76:	32 83       	std	Z+2, r19	; 0x02
   10f78:	43 83       	std	Z+3, r20	; 0x03
   10f7a:	2d c0       	rjmp	.+90     	; 0x10fd6 <gpib_write_byte+0x18c>
                }
                break;

// Write Data
            case GPIB_TX_PUT_DATA:
                if(ch & EOI_FLAG)
   10f7c:	89 85       	ldd	r24, Y+9	; 0x09
   10f7e:	9a 85       	ldd	r25, Y+10	; 0x0a
   10f80:	90 ff       	sbrs	r25, 0
   10f82:	03 c0       	rjmp	.+6      	; 0x10f8a <gpib_write_byte+0x140>
                    GPIB_IO_LOW(EOI);
   10f84:	28 98       	cbi	0x05, 0	; 5
   10f86:	20 9a       	sbi	0x04, 0	; 4
   10f88:	02 c0       	rjmp	.+4      	; 0x10f8e <gpib_write_byte+0x144>
                else
                    GPIB_PIN_FLOAT_UP(EOI);
   10f8a:	20 98       	cbi	0x04, 0	; 4
   10f8c:	28 9a       	sbi	0x05, 0	; 5
                GPIB_BUS_WR((ch & 0xff) ^ 0xff);  // Write Data inverted
   10f8e:	8f ef       	ldi	r24, 0xFF	; 255
   10f90:	81 b9       	out	0x01, r24	; 1
   10f92:	89 85       	ldd	r24, Y+9	; 0x09
   10f94:	80 95       	com	r24
   10f96:	82 b9       	out	0x02, r24	; 2
   10f98:	9d e0       	ldi	r25, 0x0D	; 13
   10f9a:	9a 95       	dec	r25
   10f9c:	f1 f7       	brne	.-4      	; 0x10f9a <gpib_write_byte+0x150>
   10f9e:	00 00       	nop
                GPIB_BUS_SETTLE();                // Let Data BUS settle

                gpib_timeout_set(HTIMEOUT);
   10fa0:	64 ef       	ldi	r22, 0xF4	; 244
   10fa2:	71 e0       	ldi	r23, 0x01	; 1
   10fa4:	80 e0       	ldi	r24, 0x00	; 0
   10fa6:	90 e0       	ldi	r25, 0x00	; 0
   10fa8:	f9 dd       	rcall	.-1038   	; 0x10b9c <gpib_timeout_set>
                tx_state = GPIB_TX_WAIT_FOR_NRFD_HI;
   10faa:	13 e0       	ldi	r17, 0x03	; 3
                break;
   10fac:	82 cf       	rjmp	.-252    	; 0x10eb2 <gpib_write_byte+0x68>
// Wait for BOTH NRFD HI and NDAC LOW
            case GPIB_TX_WAIT_FOR_NRFD_HI:
#if 0
                if(GPIB_PIN_TST(NRFD) == 1 && GPIB_PIN_TST(NDAC) == 0)
#else
                if(GPIB_PIN_TST(NRFD))
   10fae:	4a 99       	sbic	0x09, 2	; 9
#endif
                {
                    tx_state = GPIB_TX_SET_DAV_LOW;
   10fb0:	14 e0       	ldi	r17, 0x04	; 4
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10fb2:	80 91 e7 1c 	lds	r24, 0x1CE7	; 0x801ce7 <gpib_timer+0x8>
                if(GPIB_PIN_TST(NRFD))
#endif
                {
                    tx_state = GPIB_TX_SET_DAV_LOW;
                }
                if (gpib_timeout_test())
   10fb6:	88 23       	and	r24, r24
   10fb8:	09 f4       	brne	.+2      	; 0x10fbc <gpib_write_byte+0x172>
   10fba:	7b cf       	rjmp	.-266    	; 0x10eb2 <gpib_write_byte+0x68>
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10fbc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10fc0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10fc4:	85 70       	andi	r24, 0x05	; 5
   10fc6:	99 27       	eor	r25, r25
   10fc8:	89 2b       	or	r24, r25
   10fca:	39 f0       	breq	.+14     	; 0x10fda <gpib_write_byte+0x190>
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   10fcc:	ed b7       	in	r30, 0x3d	; 61
   10fce:	fe b7       	in	r31, 0x3e	; 62
   10fd0:	61 82       	std	Z+1, r6	; 0x01
   10fd2:	72 82       	std	Z+2, r7	; 0x02
   10fd4:	83 82       	std	Z+3, r8	; 0x03
   10fd6:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
                    ch |= TIMEOUT_FLAG;
   10fda:	29 85       	ldd	r18, Y+9	; 0x09
   10fdc:	3a 85       	ldd	r19, Y+10	; 0x0a
   10fde:	30 64       	ori	r19, 0x40	; 64
   10fe0:	3a 87       	std	Y+10, r19	; 0x0a
   10fe2:	29 87       	std	Y+9, r18	; 0x09
   10fe4:	51 c0       	rjmp	.+162    	; 0x11088 <gpib_write_byte+0x23e>
                    break;
                }
                break;

            case GPIB_TX_SET_DAV_LOW:
                GPIB_IO_LOW(DAV);
   10fe6:	29 98       	cbi	0x05, 1	; 5
   10fe8:	21 9a       	sbi	0x04, 1	; 4
   10fea:	3d e0       	ldi	r19, 0x0D	; 13
   10fec:	3a 95       	dec	r19
   10fee:	f1 f7       	brne	.-4      	; 0x10fec <gpib_write_byte+0x1a2>
                GPIB_BUS_SETTLE();                
                gpib_timeout_set(HTIMEOUT);
   10ff0:	00 00       	nop
   10ff2:	64 ef       	ldi	r22, 0xF4	; 244
   10ff4:	71 e0       	ldi	r23, 0x01	; 1
   10ff6:	80 e0       	ldi	r24, 0x00	; 0
   10ff8:	90 e0       	ldi	r25, 0x00	; 0
   10ffa:	d0 dd       	rcall	.-1120   	; 0x10b9c <gpib_timeout_set>
                tx_state = GPIB_TX_WAIT_FOR_NDAC_HI;
   10ffc:	15 e0       	ldi	r17, 0x05	; 5
                break;
   10ffe:	59 cf       	rjmp	.-334    	; 0x10eb2 <gpib_write_byte+0x68>

///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
   11000:	4b 99       	sbic	0x09, 3	; 9
   11002:	40 c0       	rjmp	.+128    	; 0x11084 <gpib_write_byte+0x23a>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11004:	80 91 e7 1c 	lds	r24, 0x1CE7	; 0x801ce7 <gpib_timer+0x8>
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
                    break;
                }
                if (gpib_timeout_test())
   11008:	88 23       	and	r24, r24
   1100a:	09 f4       	brne	.+2      	; 0x1100e <gpib_write_byte+0x1c4>
   1100c:	52 cf       	rjmp	.-348    	; 0x10eb2 <gpib_write_byte+0x68>
                {
                    ch |= TIMEOUT_FLAG;
   1100e:	89 85       	ldd	r24, Y+9	; 0x09
   11010:	9a 85       	ldd	r25, Y+10	; 0x0a
   11012:	90 64       	ori	r25, 0x40	; 64
   11014:	9a 87       	std	Y+10, r25	; 0x0a
   11016:	89 87       	std	Y+9, r24	; 0x09
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   11018:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1101c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11020:	85 70       	andi	r24, 0x05	; 5
   11022:	99 27       	eor	r25, r25
   11024:	89 2b       	or	r24, r25
   11026:	81 f1       	breq	.+96     	; 0x11088 <gpib_write_byte+0x23e>
                        printf("<gpib_write_byte timeout waiting for NDAC==1>\n");
   11028:	ed b7       	in	r30, 0x3d	; 61
   1102a:	fe b7       	in	r31, 0x3e	; 62
   1102c:	c1 82       	std	Z+1, r12	; 0x01
   1102e:	d2 82       	std	Z+2, r13	; 0x02
   11030:	e3 82       	std	Z+3, r14	; 0x03
   11032:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   11036:	28 c0       	rjmp	.+80     	; 0x11088 <gpib_write_byte+0x23e>
                }
                break;

///@release BUS
            case GPIB_TX_SET_DAV_HI:
                GPIB_PIN_FLOAT_UP(DAV);
   11038:	21 98       	cbi	0x04, 1	; 4
   1103a:	29 9a       	sbi	0x05, 1	; 5
   1103c:	fd e0       	ldi	r31, 0x0D	; 13
   1103e:	fa 95       	dec	r31
   11040:	f1 f7       	brne	.-4      	; 0x1103e <gpib_write_byte+0x1f4>
                GPIB_BUS_SETTLE();
                tx_state = GPIB_TX_FINISH;
                gpib_timeout_set(HTIMEOUT);
   11042:	00 00       	nop
   11044:	64 ef       	ldi	r22, 0xF4	; 244
   11046:	71 e0       	ldi	r23, 0x01	; 1
   11048:	80 e0       	ldi	r24, 0x00	; 0
   1104a:	90 e0       	ldi	r25, 0x00	; 0

///@release BUS
            case GPIB_TX_SET_DAV_HI:
                GPIB_PIN_FLOAT_UP(DAV);
                GPIB_BUS_SETTLE();
                tx_state = GPIB_TX_FINISH;
   1104c:	a7 dd       	rcall	.-1202   	; 0x10b9c <gpib_timeout_set>
                gpib_timeout_set(HTIMEOUT);
                break;
   1104e:	17 e0       	ldi	r17, 0x07	; 7
                tx_state = GPIB_TX_DONE;
                break;

            case GPIB_TX_ERROR:
				// Free BUS, BUSY on error
                gpib_rx_init(1);
   11050:	30 cf       	rjmp	.-416    	; 0x10eb2 <gpib_write_byte+0x68>
   11052:	81 e0       	ldi	r24, 0x01	; 1
   11054:	e5 dd       	rcall	.-1078   	; 0x10c20 <gpib_rx_init>
                if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   11056:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1105a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1105e:	85 70       	andi	r24, 0x05	; 5
   11060:	99 27       	eor	r25, r25
   11062:	89 2b       	or	r24, r25
   11064:	99 f0       	breq	.+38     	; 0x1108c <gpib_write_byte+0x242>
                    printf("<GPIB TX TIMEOUT>\n");
   11066:	8c e3       	ldi	r24, 0x3C	; 60
   11068:	90 e1       	ldi	r25, 0x10	; 16
   1106a:	a0 e0       	ldi	r26, 0x00	; 0
   1106c:	ed b7       	in	r30, 0x3d	; 61
   1106e:	fe b7       	in	r31, 0x3e	; 62
   11070:	81 83       	std	Z+1, r24	; 0x01
   11072:	92 83       	std	Z+2, r25	; 0x02
   11074:	a3 83       	std	Z+3, r26	; 0x03
   11076:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   1107a:	08 c0       	rjmp	.+16     	; 0x1108c <gpib_write_byte+0x242>
	gpib_rx_init(0);	// NOT busy, NRFD and NDAC OC
#endif

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);
    while(tx_state != GPIB_TX_DONE )
   1107c:	19 30       	cpi	r17, 0x09	; 9
   1107e:	09 f0       	breq	.+2      	; 0x11082 <gpib_write_byte+0x238>
   11080:	18 cf       	rjmp	.-464    	; 0x10eb2 <gpib_write_byte+0x68>
   11082:	04 c0       	rjmp	.+8      	; 0x1108c <gpib_write_byte+0x242>

///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
   11084:	16 e0       	ldi	r17, 0x06	; 6
   11086:	15 cf       	rjmp	.-470    	; 0x10eb2 <gpib_write_byte+0x68>
                    break;
                }
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
   11088:	18 e0       	ldi	r17, 0x08	; 8
   1108a:	13 cf       	rjmp	.-474    	; 0x10eb2 <gpib_write_byte+0x68>
            case GPIB_TX_DONE:
                break;
        }
    }
    return(ch);
}
   1108c:	89 85       	ldd	r24, Y+9	; 0x09
   1108e:	9a 85       	ldd	r25, Y+10	; 0x0a
   11090:	2a 96       	adiw	r28, 0x0a	; 10
   11092:	0f b6       	in	r0, 0x3f	; 63
   11094:	f8 94       	cli
   11096:	de bf       	out	0x3e, r29	; 62
   11098:	0f be       	out	0x3f, r0	; 63
   1109a:	cd bf       	out	0x3d, r28	; 61
   1109c:	df 91       	pop	r29
   1109e:	cf 91       	pop	r28
   110a0:	1f 91       	pop	r17
   110a2:	ef 90       	pop	r14
   110a4:	df 90       	pop	r13
   110a6:	cf 90       	pop	r12
   110a8:	bf 90       	pop	r11
   110aa:	af 90       	pop	r10
   110ac:	8f 90       	pop	r8
   110ae:	7f 90       	pop	r7
   110b0:	6f 90       	pop	r6
   110b2:	4f 90       	pop	r4
   110b4:	3f 90       	pop	r3
   110b6:	2f 90       	pop	r2
   110b8:	08 95       	ret

000110ba <gpib_decode_header>:
/// @see: gpib.h _FLAGS defines for a full list is control lines we track
/// @see: gpib_trace()
/// @return void
///@param[in] fo: FILE pointer or "stdout"
void gpib_decode_header( FILE *fo)
{
   110ba:	cf 93       	push	r28
   110bc:	df 93       	push	r29
   110be:	ec 01       	movw	r28, r24
    if(fo == NULL)
   110c0:	89 2b       	or	r24, r25
   110c2:	21 f4       	brne	.+8      	; 0x110cc <gpib_decode_header+0x12>
        fo = stdout;
   110c4:	c0 91 c1 1c 	lds	r28, 0x1CC1	; 0x801cc1 <__iob+0x2>
   110c8:	d0 91 c2 1c 	lds	r29, 0x1CC2	; 0x801cc2 <__iob+0x3>

    fprintf(fo,"==============================\n");
   110cc:	be 01       	movw	r22, r28
   110ce:	81 e0       	ldi	r24, 0x01	; 1
   110d0:	9c e0       	ldi	r25, 0x0C	; 12
   110d2:	0e 94 b7 76 	call	0xed6e	; 0xed6e <fputs>
    fprintf(fo,"GPIB bus state\n");
   110d6:	be 01       	movw	r22, r28
   110d8:	81 e2       	ldi	r24, 0x21	; 33
   110da:	9c e0       	ldi	r25, 0x0C	; 12
   110dc:	0e 94 b7 76 	call	0xed6e	; 0xed6e <fputs>
    fprintf(fo,"HH . AESRPITB gpib\n");
   110e0:	be 01       	movw	r22, r28
   110e2:	81 e3       	ldi	r24, 0x31	; 49
   110e4:	9c e0       	ldi	r25, 0x0C	; 12
   110e6:	0e 94 b7 76 	call	0xed6e	; 0xed6e <fputs>
    fprintf(fo,"HH = Hex value of Command or Data\n");
   110ea:	be 01       	movw	r22, r28
   110ec:	85 e4       	ldi	r24, 0x45	; 69
   110ee:	9c e0       	ldi	r25, 0x0C	; 12
   110f0:	0e 94 b7 76 	call	0xed6e	; 0xed6e <fputs>
    fprintf(fo,"   . = ASCII of XX only for 0x20 .. 0x7e\n");
   110f4:	be 01       	movw	r22, r28
   110f6:	88 e6       	ldi	r24, 0x68	; 104
   110f8:	9c e0       	ldi	r25, 0x0C	; 12
   110fa:	0e 94 b7 76 	call	0xed6e	; 0xed6e <fputs>
    fprintf(fo,"     A = ATN\n");
   110fe:	be 01       	movw	r22, r28
   11100:	82 e9       	ldi	r24, 0x92	; 146
   11102:	9c e0       	ldi	r25, 0x0C	; 12
   11104:	0e 94 b7 76 	call	0xed6e	; 0xed6e <fputs>
    fprintf(fo,"      E = EOI\n");
   11108:	be 01       	movw	r22, r28
   1110a:	80 ea       	ldi	r24, 0xA0	; 160
   1110c:	9c e0       	ldi	r25, 0x0C	; 12
   1110e:	0e 94 b7 76 	call	0xed6e	; 0xed6e <fputs>
    fprintf(fo,"       S = SRQ\n");
   11112:	be 01       	movw	r22, r28
   11114:	8f ea       	ldi	r24, 0xAF	; 175
   11116:	9c e0       	ldi	r25, 0x0C	; 12
   11118:	0e 94 b7 76 	call	0xed6e	; 0xed6e <fputs>
    fprintf(fo,"        R = REN\n");
   1111c:	be 01       	movw	r22, r28
   1111e:	8f eb       	ldi	r24, 0xBF	; 191
   11120:	9c e0       	ldi	r25, 0x0C	; 12
   11122:	0e 94 b7 76 	call	0xed6e	; 0xed6e <fputs>
    fprintf(fo,"         I = IFC\n");
   11126:	be 01       	movw	r22, r28
   11128:	80 ed       	ldi	r24, 0xD0	; 208
   1112a:	9c e0       	ldi	r25, 0x0C	; 12
   1112c:	0e 94 b7 76 	call	0xed6e	; 0xed6e <fputs>
    fprintf(fo,"          P = Parallel Poll seen\n");
   11130:	be 01       	movw	r22, r28
   11132:	82 ee       	ldi	r24, 0xE2	; 226
   11134:	9c e0       	ldi	r25, 0x0C	; 12
   11136:	0e 94 b7 76 	call	0xed6e	; 0xed6e <fputs>
    fprintf(fo,"           T = TIMEOUT\n");
   1113a:	be 01       	movw	r22, r28
   1113c:	84 e0       	ldi	r24, 0x04	; 4
   1113e:	9d e0       	ldi	r25, 0x0D	; 13
   11140:	0e 94 b7 76 	call	0xed6e	; 0xed6e <fputs>
    fprintf(fo,"            B = BUS_ERROR\n");
   11144:	be 01       	movw	r22, r28
   11146:	8c e1       	ldi	r24, 0x1C	; 28
   11148:	9d e0       	ldi	r25, 0x0D	; 13
   1114a:	0e 94 b7 76 	call	0xed6e	; 0xed6e <fputs>
    fprintf(fo,"              GPIB commands\n");
   1114e:	be 01       	movw	r22, r28
   11150:	87 e3       	ldi	r24, 0x37	; 55
   11152:	9d e0       	ldi	r25, 0x0D	; 13
   11154:	0e 94 b7 76 	call	0xed6e	; 0xed6e <fputs>
}
   11158:	df 91       	pop	r29
   1115a:	cf 91       	pop	r28
   1115c:	08 95       	ret

0001115e <gpib_trace_display>:
/// @return  void
/// Note the bits we can read depends on what hardware verions we have
/// V2 hardware can only read status bits based on GPIB control buffer direction
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
   1115e:	a9 e8       	ldi	r26, 0x89	; 137
   11160:	b0 e0       	ldi	r27, 0x00	; 0
   11162:	e5 eb       	ldi	r30, 0xB5	; 181
   11164:	f8 e8       	ldi	r31, 0x88	; 136
   11166:	0c 94 13 e7 	jmp	0x1ce26	; 0x1ce26 <__prologue_saves__+0xc>
   1116a:	8c 01       	movw	r16, r24
   1116c:	5b 01       	movw	r10, r22
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
    extern FILE *gpib_log_fp;

    str[0] = 0;
   1116e:	1a 86       	std	Y+10, r1	; 0x0a
   11170:	4c 01       	movw	r8, r24
   11172:	88 24       	eor	r8, r8
   11174:	44 e0       	ldi	r20, 0x04	; 4
   11176:	94 22       	and	r9, r20
   11178:	ce 01       	movw	r24, r28
   1117a:	0a 96       	adiw	r24, 0x0a	; 10
   1117c:	7c 01       	movw	r14, r24

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
   1117e:	62 30       	cpi	r22, 0x02	; 2
   11180:	71 05       	cpc	r23, r1
   11182:	e8 f4       	brcc	.+58     	; 0x111be <gpib_trace_display+0x60>
    {
        uint8_t printable = ' ';                  // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   11184:	81 14       	cp	r8, r1
   11186:	91 04       	cpc	r9, r1
   11188:	29 f4       	brne	.+10     	; 0x11194 <gpib_trace_display+0x36>
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
   1118a:	80 2f       	mov	r24, r16

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                  // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   1118c:	90 ee       	ldi	r25, 0xE0	; 224
   1118e:	90 0f       	add	r25, r16
   11190:	9f 35       	cpi	r25, 0x5F	; 95
   11192:	08 f0       	brcs	.+2      	; 0x11196 <gpib_trace_display+0x38>
    str[0] = 0;

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                  // Data
   11194:	80 e2       	ldi	r24, 0x20	; 32
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
            printable = bus;
        sprintf(str, "%02X %c ", (int)bus & 0xff, (int)printable);
   11196:	90 e0       	ldi	r25, 0x00	; 0
   11198:	ed b7       	in	r30, 0x3d	; 61
   1119a:	fe b7       	in	r31, 0x3e	; 62
   1119c:	91 87       	std	Z+9, r25	; 0x09
   1119e:	80 87       	std	Z+8, r24	; 0x08
   111a0:	c8 01       	movw	r24, r16
   111a2:	99 27       	eor	r25, r25
   111a4:	97 83       	std	Z+7, r25	; 0x07
   111a6:	86 83       	std	Z+6, r24	; 0x06
   111a8:	85 e1       	ldi	r24, 0x15	; 21
   111aa:	90 e1       	ldi	r25, 0x10	; 16
   111ac:	a0 e0       	ldi	r26, 0x00	; 0
   111ae:	83 83       	std	Z+3, r24	; 0x03
   111b0:	94 83       	std	Z+4, r25	; 0x04
   111b2:	a5 83       	std	Z+5, r26	; 0x05
   111b4:	f2 82       	std	Z+2, r15	; 0x02
   111b6:	e1 82       	std	Z+1, r14	; 0x01
   111b8:	0e 94 18 47 	call	0x8e30	; 0x8e30 <sprintf_P>
   111bc:	0c c0       	rjmp	.+24     	; 0x111d6 <gpib_trace_display+0x78>
    }
    else
    {
        sprintf(str, "     ");
   111be:	8f e0       	ldi	r24, 0x0F	; 15
   111c0:	90 e1       	ldi	r25, 0x10	; 16
   111c2:	a0 e0       	ldi	r26, 0x00	; 0
   111c4:	ed b7       	in	r30, 0x3d	; 61
   111c6:	fe b7       	in	r31, 0x3e	; 62
   111c8:	83 83       	std	Z+3, r24	; 0x03
   111ca:	94 83       	std	Z+4, r25	; 0x04
   111cc:	a5 83       	std	Z+5, r26	; 0x05
   111ce:	f2 82       	std	Z+2, r15	; 0x02
   111d0:	e1 82       	std	Z+1, r14	; 0x01
   111d2:	0e 94 18 47 	call	0x8e30	; 0x8e30 <sprintf_P>
    }

    tmp = str + strlen(str);
   111d6:	f7 01       	movw	r30, r14
   111d8:	01 90       	ld	r0, Z+
   111da:	00 20       	and	r0, r0
   111dc:	e9 f7       	brne	.-6      	; 0x111d8 <gpib_trace_display+0x7a>
   111de:	31 97       	sbiw	r30, 0x01	; 1
   111e0:	cf 01       	movw	r24, r30
   111e2:	01 96       	adiw	r24, 0x01	; 1

    if(status & ATN_FLAG)
   111e4:	81 14       	cp	r8, r1
   111e6:	91 04       	cpc	r9, r1
   111e8:	11 f0       	breq	.+4      	; 0x111ee <gpib_trace_display+0x90>
        *tmp++ = 'A';
   111ea:	21 e4       	ldi	r18, 0x41	; 65
   111ec:	01 c0       	rjmp	.+2      	; 0x111f0 <gpib_trace_display+0x92>
    else
        *tmp++ = '-';
   111ee:	2d e2       	ldi	r18, 0x2D	; 45
   111f0:	20 83       	st	Z, r18
   111f2:	dc 01       	movw	r26, r24
   111f4:	11 96       	adiw	r26, 0x01	; 1

    if(status & EOI_FLAG)
   111f6:	10 ff       	sbrs	r17, 0
   111f8:	02 c0       	rjmp	.+4      	; 0x111fe <gpib_trace_display+0xa0>
        *tmp++ = 'E';
   111fa:	25 e4       	ldi	r18, 0x45	; 69
   111fc:	01 c0       	rjmp	.+2      	; 0x11200 <gpib_trace_display+0xa2>
    else
        *tmp++ = '-';
   111fe:	2d e2       	ldi	r18, 0x2D	; 45
   11200:	fc 01       	movw	r30, r24
   11202:	20 83       	st	Z, r18
   11204:	fd 01       	movw	r30, r26
   11206:	31 96       	adiw	r30, 0x01	; 1

    if(status & SRQ_FLAG)
   11208:	11 ff       	sbrs	r17, 1
   1120a:	02 c0       	rjmp	.+4      	; 0x11210 <gpib_trace_display+0xb2>
        *tmp++ = 'S';
   1120c:	83 e5       	ldi	r24, 0x53	; 83
   1120e:	01 c0       	rjmp	.+2      	; 0x11212 <gpib_trace_display+0xb4>
    else
        *tmp++ = '-';
   11210:	8d e2       	ldi	r24, 0x2D	; 45
   11212:	8c 93       	st	X, r24
   11214:	df 01       	movw	r26, r30
   11216:	11 96       	adiw	r26, 0x01	; 1

    if(status & REN_FLAG)
   11218:	13 ff       	sbrs	r17, 3
   1121a:	02 c0       	rjmp	.+4      	; 0x11220 <gpib_trace_display+0xc2>
        *tmp++ = 'R';
   1121c:	82 e5       	ldi	r24, 0x52	; 82
   1121e:	01 c0       	rjmp	.+2      	; 0x11222 <gpib_trace_display+0xc4>
    else
        *tmp++ = '-';
   11220:	8d e2       	ldi	r24, 0x2D	; 45
   11222:	80 83       	st	Z, r24
   11224:	fd 01       	movw	r30, r26
   11226:	31 96       	adiw	r30, 0x01	; 1

    if(status & IFC_FLAG)
   11228:	14 ff       	sbrs	r17, 4
   1122a:	02 c0       	rjmp	.+4      	; 0x11230 <gpib_trace_display+0xd2>
        *tmp++ = 'I';
   1122c:	89 e4       	ldi	r24, 0x49	; 73
   1122e:	01 c0       	rjmp	.+2      	; 0x11232 <gpib_trace_display+0xd4>
    else
        *tmp++ = '-';
   11230:	8d e2       	ldi	r24, 0x2D	; 45
   11232:	8c 93       	st	X, r24

    if(trace_state == TRACE_DISABLE)
   11234:	a1 14       	cp	r10, r1
   11236:	b1 04       	cpc	r11, r1
   11238:	d1 f4       	brne	.+52     	; 0x1126e <gpib_trace_display+0x110>
   1123a:	df 01       	movw	r26, r30
   1123c:	11 96       	adiw	r26, 0x01	; 1
    {
        if(status & PP_FLAG)
   1123e:	15 ff       	sbrs	r17, 5
   11240:	02 c0       	rjmp	.+4      	; 0x11246 <gpib_trace_display+0xe8>
            *tmp++ = 'P';
   11242:	80 e5       	ldi	r24, 0x50	; 80
   11244:	01 c0       	rjmp	.+2      	; 0x11248 <gpib_trace_display+0xea>
        else
            *tmp++ = '-';
   11246:	8d e2       	ldi	r24, 0x2D	; 45
   11248:	80 83       	st	Z, r24
   1124a:	fd 01       	movw	r30, r26
   1124c:	31 96       	adiw	r30, 0x01	; 1
        if(status & TIMEOUT_FLAG)
   1124e:	16 ff       	sbrs	r17, 6
   11250:	02 c0       	rjmp	.+4      	; 0x11256 <gpib_trace_display+0xf8>
            *tmp++ = 'T';
   11252:	84 e5       	ldi	r24, 0x54	; 84
   11254:	01 c0       	rjmp	.+2      	; 0x11258 <gpib_trace_display+0xfa>
        else
            *tmp++ = '-';
   11256:	8d e2       	ldi	r24, 0x2D	; 45
   11258:	8c 93       	st	X, r24
   1125a:	cf 01       	movw	r24, r30
   1125c:	01 96       	adiw	r24, 0x01	; 1
        if(status & BUS_ERROR_FLAG)
            *tmp++ = 'B';
   1125e:	6c 01       	movw	r12, r24
            *tmp++ = '-';
        if(status & TIMEOUT_FLAG)
            *tmp++ = 'T';
        else
            *tmp++ = '-';
        if(status & BUS_ERROR_FLAG)
   11260:	17 ff       	sbrs	r17, 7
   11262:	02 c0       	rjmp	.+4      	; 0x11268 <gpib_trace_display+0x10a>
            *tmp++ = 'B';
   11264:	82 e4       	ldi	r24, 0x42	; 66
   11266:	01 c0       	rjmp	.+2      	; 0x1126a <gpib_trace_display+0x10c>
        else
            *tmp++ = '-';
   11268:	8d e2       	ldi	r24, 0x2D	; 45
   1126a:	80 83       	st	Z, r24
   1126c:	08 c0       	rjmp	.+16     	; 0x1127e <gpib_trace_display+0x120>
    }
    else
    {
// not used when tracing
        *tmp++ = '-';
   1126e:	8d e2       	ldi	r24, 0x2D	; 45
   11270:	80 83       	st	Z, r24
        *tmp++ = '-';
   11272:	81 83       	std	Z+1, r24	; 0x01
        *tmp++ = '-';
   11274:	6f 01       	movw	r12, r30
   11276:	43 e0       	ldi	r20, 0x03	; 3
   11278:	c4 0e       	add	r12, r20
   1127a:	d1 1c       	adc	r13, r1
   1127c:	82 83       	std	Z+2, r24	; 0x02
    }
    *tmp = 0;
   1127e:	f6 01       	movw	r30, r12
   11280:	10 82       	st	Z, r1

    if(trace_state == TRACE_READ || trace_state == TRACE_BUS)
   11282:	f1 e0       	ldi	r31, 0x01	; 1
   11284:	af 1a       	sub	r10, r31
   11286:	b1 08       	sbc	r11, r1
   11288:	42 e0       	ldi	r20, 0x02	; 2
   1128a:	a4 16       	cp	r10, r20
   1128c:	b1 04       	cpc	r11, r1
   1128e:	f0 f4       	brcc	.+60     	; 0x112cc <gpib_trace_display+0x16e>
    {
        if(status & DAV_FLAG)
   11290:	15 ff       	sbrs	r17, 5
   11292:	03 c0       	rjmp	.+6      	; 0x1129a <gpib_trace_display+0x13c>
            strcat(str,"  DAV");
   11294:	64 e5       	ldi	r22, 0x54	; 84
   11296:	7d e0       	ldi	r23, 0x0D	; 13
   11298:	02 c0       	rjmp	.+4      	; 0x1129e <gpib_trace_display+0x140>
        else
            strcat(str,"     ");
   1129a:	65 e6       	ldi	r22, 0x65	; 101
   1129c:	74 e0       	ldi	r23, 0x04	; 4
   1129e:	c7 01       	movw	r24, r14
   112a0:	0e 94 8e 31 	call	0x631c	; 0x631c <strcat>
        if(status & NRFD_FLAG)
   112a4:	16 ff       	sbrs	r17, 6
   112a6:	03 c0       	rjmp	.+6      	; 0x112ae <gpib_trace_display+0x150>
            strcat(str," NRFD");
   112a8:	6a e5       	ldi	r22, 0x5A	; 90
   112aa:	7d e0       	ldi	r23, 0x0D	; 13
   112ac:	02 c0       	rjmp	.+4      	; 0x112b2 <gpib_trace_display+0x154>
        else
            strcat(str,"     ");
   112ae:	65 e6       	ldi	r22, 0x65	; 101
   112b0:	74 e0       	ldi	r23, 0x04	; 4
   112b2:	c7 01       	movw	r24, r14
   112b4:	0e 94 8e 31 	call	0x631c	; 0x631c <strcat>
        if(status & NDAC_FLAG)
   112b8:	17 ff       	sbrs	r17, 7
   112ba:	03 c0       	rjmp	.+6      	; 0x112c2 <gpib_trace_display+0x164>
            strcat(str," NDAC");
   112bc:	60 e6       	ldi	r22, 0x60	; 96
   112be:	7d e0       	ldi	r23, 0x0D	; 13
   112c0:	02 c0       	rjmp	.+4      	; 0x112c6 <gpib_trace_display+0x168>
        else
            strcat(str,"     ");
   112c2:	65 e6       	ldi	r22, 0x65	; 101
   112c4:	74 e0       	ldi	r23, 0x04	; 4
   112c6:	c7 01       	movw	r24, r14
   112c8:	0e 94 8e 31 	call	0x631c	; 0x631c <strcat>
    }

    if( (status & ATN_FLAG) )
   112cc:	81 14       	cp	r8, r1
   112ce:	91 04       	cpc	r9, r1
   112d0:	09 f4       	brne	.+2      	; 0x112d4 <gpib_trace_display+0x176>
   112d2:	5a c0       	rjmp	.+180    	; 0x11388 <gpib_trace_display+0x22a>
    {
        int i;
        int cmd = status & CMD_MASK;
   112d4:	c8 01       	movw	r24, r16
   112d6:	8f 77       	andi	r24, 0x7F	; 127
   112d8:	99 27       	eor	r25, r25
        if(cmd >= 0x020 && cmd <= 0x3e)
   112da:	9c 01       	movw	r18, r24
   112dc:	20 52       	subi	r18, 0x20	; 32
   112de:	31 09       	sbc	r19, r1
   112e0:	2f 31       	cpi	r18, 0x1F	; 31
   112e2:	31 05       	cpc	r19, r1
   112e4:	48 f4       	brcc	.+18     	; 0x112f8 <gpib_trace_display+0x19a>
            sprintf(tmp," MLA %02Xh", cmd & 0x1f);
   112e6:	0f 71       	andi	r16, 0x1F	; 31
   112e8:	11 27       	eor	r17, r17
   112ea:	ed b7       	in	r30, 0x3d	; 61
   112ec:	fe b7       	in	r31, 0x3e	; 62
   112ee:	17 83       	std	Z+7, r17	; 0x07
   112f0:	06 83       	std	Z+6, r16	; 0x06
   112f2:	84 e0       	ldi	r24, 0x04	; 4
   112f4:	90 e1       	ldi	r25, 0x10	; 16
   112f6:	0e c0       	rjmp	.+28     	; 0x11314 <gpib_trace_display+0x1b6>
        else if(cmd >= 0x040 && cmd <= 0x4e)
   112f8:	9c 01       	movw	r18, r24
   112fa:	20 54       	subi	r18, 0x40	; 64
   112fc:	31 09       	sbc	r19, r1
   112fe:	2f 30       	cpi	r18, 0x0F	; 15
   11300:	31 05       	cpc	r19, r1
   11302:	88 f4       	brcc	.+34     	; 0x11326 <gpib_trace_display+0x1c8>
            sprintf(tmp," MTA %02Xh", cmd & 0x1f);
   11304:	0f 71       	andi	r16, 0x1F	; 31
   11306:	11 27       	eor	r17, r17
   11308:	ed b7       	in	r30, 0x3d	; 61
   1130a:	fe b7       	in	r31, 0x3e	; 62
   1130c:	17 83       	std	Z+7, r17	; 0x07
   1130e:	06 83       	std	Z+6, r16	; 0x06
   11310:	89 ef       	ldi	r24, 0xF9	; 249
   11312:	9f e0       	ldi	r25, 0x0F	; 15
   11314:	a0 e0       	ldi	r26, 0x00	; 0
   11316:	83 83       	std	Z+3, r24	; 0x03
   11318:	94 83       	std	Z+4, r25	; 0x04
   1131a:	a5 83       	std	Z+5, r26	; 0x05
   1131c:	d2 82       	std	Z+2, r13	; 0x02
   1131e:	c1 82       	std	Z+1, r12	; 0x01
   11320:	0e 94 18 47 	call	0x8e30	; 0x8e30 <sprintf_P>
   11324:	31 c0       	rjmp	.+98     	; 0x11388 <gpib_trace_display+0x22a>
        else if(cmd >= 0x060 && cmd <= 0x6f)
   11326:	9c 01       	movw	r18, r24
   11328:	20 56       	subi	r18, 0x60	; 96
   1132a:	31 09       	sbc	r19, r1
   1132c:	20 31       	cpi	r18, 0x10	; 16
   1132e:	31 05       	cpc	r19, r1
   11330:	28 f0       	brcs	.+10     	; 0x1133c <gpib_trace_display+0x1de>
   11332:	e2 e8       	ldi	r30, 0x82	; 130
   11334:	f1 e0       	ldi	r31, 0x01	; 1
   11336:	00 e0       	ldi	r16, 0x00	; 0
   11338:	10 e0       	ldi	r17, 0x00	; 0
   1133a:	0b c0       	rjmp	.+22     	; 0x11352 <gpib_trace_display+0x1f4>
            sprintf(tmp," MSA %02Xh", cmd & 0x1f);
   1133c:	0f 71       	andi	r16, 0x1F	; 31
   1133e:	11 27       	eor	r17, r17
   11340:	ed b7       	in	r30, 0x3d	; 61
   11342:	fe b7       	in	r31, 0x3e	; 62
   11344:	17 83       	std	Z+7, r17	; 0x07
   11346:	06 83       	std	Z+6, r16	; 0x06
   11348:	8e ee       	ldi	r24, 0xEE	; 238
   1134a:	9f e0       	ldi	r25, 0x0F	; 15
   1134c:	e3 cf       	rjmp	.-58     	; 0x11314 <gpib_trace_display+0x1b6>
        else
        {
            for(i=0;gpib_tokens[i].cmd != -1;++i)
   1134e:	0f 5f       	subi	r16, 0xFF	; 255
   11350:	1f 4f       	sbci	r17, 0xFF	; 255
   11352:	20 81       	ld	r18, Z
   11354:	31 81       	ldd	r19, Z+1	; 0x01
   11356:	2f 3f       	cpi	r18, 0xFF	; 255
   11358:	4f ef       	ldi	r20, 0xFF	; 255
   1135a:	34 07       	cpc	r19, r20
   1135c:	a9 f0       	breq	.+42     	; 0x11388 <gpib_trace_display+0x22a>
   1135e:	34 96       	adiw	r30, 0x04	; 4
            {
                if(cmd == gpib_tokens[i].cmd)
   11360:	82 17       	cp	r24, r18
   11362:	93 07       	cpc	r25, r19
   11364:	a1 f7       	brne	.-24     	; 0x1134e <gpib_trace_display+0x1f0>
                {
                    strcat(tmp," ");
   11366:	69 e6       	ldi	r22, 0x69	; 105
   11368:	74 e0       	ldi	r23, 0x04	; 4
   1136a:	c6 01       	movw	r24, r12
   1136c:	0e 94 8e 31 	call	0x631c	; 0x631c <strcat>
                    strcat(tmp,gpib_tokens[i].name);
   11370:	f8 01       	movw	r30, r16
   11372:	ee 0f       	add	r30, r30
   11374:	ff 1f       	adc	r31, r31
   11376:	ee 0f       	add	r30, r30
   11378:	ff 1f       	adc	r31, r31
   1137a:	ee 57       	subi	r30, 0x7E	; 126
   1137c:	fe 4f       	sbci	r31, 0xFE	; 254
   1137e:	62 81       	ldd	r22, Z+2	; 0x02
   11380:	73 81       	ldd	r23, Z+3	; 0x03
   11382:	c6 01       	movw	r24, r12
   11384:	0e 94 8e 31 	call	0x631c	; 0x631c <strcat>
                }
            }
        }
    }

    if(gpib_log_fp == NULL)
   11388:	20 91 60 19 	lds	r18, 0x1960	; 0x801960 <gpib_log_fp>
   1138c:	30 91 61 19 	lds	r19, 0x1961	; 0x801961 <gpib_log_fp+0x1>
   11390:	80 91 c1 1c 	lds	r24, 0x1CC1	; 0x801cc1 <__iob+0x2>
   11394:	90 91 c2 1c 	lds	r25, 0x1CC2	; 0x801cc2 <__iob+0x3>
   11398:	23 2b       	or	r18, r19
   1139a:	21 f4       	brne	.+8      	; 0x113a4 <gpib_trace_display+0x246>
        gpib_log_fp = stdout;
   1139c:	90 93 61 19 	sts	0x1961, r25	; 0x801961 <gpib_log_fp+0x1>
   113a0:	80 93 60 19 	sts	0x1960, r24	; 0x801960 <gpib_log_fp>

// Echo to console unless file is the console
    if(gpib_log_fp != stdout)
   113a4:	20 91 60 19 	lds	r18, 0x1960	; 0x801960 <gpib_log_fp>
   113a8:	30 91 61 19 	lds	r19, 0x1961	; 0x801961 <gpib_log_fp+0x1>
   113ac:	82 17       	cp	r24, r18
   113ae:	93 07       	cpc	r25, r19
   113b0:	19 f0       	breq	.+6      	; 0x113b8 <gpib_trace_display+0x25a>
        puts(str);
   113b2:	c7 01       	movw	r24, r14
   113b4:	0e 94 cf 76 	call	0xed9e	; 0xed9e <puts>

// Save to file
    fprintf(gpib_log_fp,"%s\n",str);
   113b8:	ed b7       	in	r30, 0x3d	; 61
   113ba:	fe b7       	in	r31, 0x3e	; 62
   113bc:	f6 82       	std	Z+6, r15	; 0x06
   113be:	e5 82       	std	Z+5, r14	; 0x05
   113c0:	86 e6       	ldi	r24, 0x66	; 102
   113c2:	9d e0       	ldi	r25, 0x0D	; 13
   113c4:	94 83       	std	Z+4, r25	; 0x04
   113c6:	83 83       	std	Z+3, r24	; 0x03
   113c8:	80 91 60 19 	lds	r24, 0x1960	; 0x801960 <gpib_log_fp>
   113cc:	90 91 61 19 	lds	r25, 0x1961	; 0x801961 <gpib_log_fp+0x1>
   113d0:	92 83       	std	Z+2, r25	; 0x02
   113d2:	81 83       	std	Z+1, r24	; 0x01
   113d4:	0e 94 77 7e 	call	0xfcee	; 0xfcee <fprintf>
}
   113d8:	c7 57       	subi	r28, 0x77	; 119
   113da:	df 4f       	sbci	r29, 0xFF	; 255
   113dc:	ec e0       	ldi	r30, 0x0C	; 12
   113de:	0c 94 2f e7 	jmp	0x1ce5e	; 0x1ce5e <__epilogue_restores__+0xc>

000113e2 <gpib_read_byte>:
///     - Error Flags:
///       - IFC_FLAG
///
/// @return (data bus, control and error status)
uint16_t gpib_read_byte(int trace)
{
   113e2:	af 92       	push	r10
   113e4:	bf 92       	push	r11
   113e6:	cf 92       	push	r12
   113e8:	df 92       	push	r13
   113ea:	ef 92       	push	r14
   113ec:	ff 92       	push	r15
   113ee:	0f 93       	push	r16
   113f0:	1f 93       	push	r17
   113f2:	cf 93       	push	r28
   113f4:	00 d0       	rcall	.+0      	; 0x113f6 <gpib_read_byte+0x14>
   113f6:	00 d0       	rcall	.+0      	; 0x113f8 <gpib_read_byte+0x16>
   113f8:	1f 92       	push	r1

    ch = 0;
    control_last = 0;

	// Return unread - last read - data and control lines
    if(gpib_unread_f)
   113fa:	20 91 5f 19 	lds	r18, 0x195F	; 0x80195f <gpib_unread_f>
   113fe:	22 23       	and	r18, r18
   11400:	39 f0       	breq	.+14     	; 0x11410 <gpib_read_byte+0x2e>
    {
		// FYI any unread data has been traced
        gpib_unread_f = 0;
   11402:	10 92 5f 19 	sts	0x195F, r1	; 0x80195f <gpib_unread_f>
        return(gpib_unread_data);
   11406:	80 91 f2 1e 	lds	r24, 0x1EF2	; 0x801ef2 <gpib_unread_data>
   1140a:	90 91 f3 1e 	lds	r25, 0x1EF3	; 0x801ef3 <gpib_unread_data+0x1>
   1140e:	e0 c0       	rjmp	.+448    	; 0x115d0 <gpib_read_byte+0x1ee>
   11410:	6c 01       	movw	r12, r24
	// We start and end gpib_read_byte() with NRFD and NDAC LOW 
	// When ATN goes LOW all devices must pull NRFD and NDAC lines LOW
	// within 200 nanoseconds to permit three-wire handshake 
	// ATN requirements are met because we are always reading in command mode
	// ATN = 0 = COmmand Mode
    gpib_rx_init(1);
   11412:	81 e0       	ldi	r24, 0x01	; 1
   11414:	05 dc       	rcall	.-2038   	; 0x10c20 <gpib_rx_init>
	// GPIB_IO_LOW(TE);			// BUS IN
	// BUS IN, DAV IN, NDAC OUT , NRFD OUT 
	// ATN IN, EOI IN, SRQ OUT OC

	///@brief V2 boards can NOT read ALL bits on the control bus at once
    if(trace)
   11416:	c1 14       	cp	r12, r1
   11418:	d1 04       	cpc	r13, r1
    {
        control_last = gpib_control_pin_read();
   1141a:	51 f0       	breq	.+20     	; 0x11430 <gpib_read_byte+0x4e>
   1141c:	fa dc       	rcall	.-1548   	; 0x10e12 <gpib_control_pin_read>
        control_last |= gpib_handshake_pin_read();
   1141e:	7c 01       	movw	r14, r24
   11420:	08 dd       	rcall	.-1520   	; 0x10e32 <gpib_handshake_pin_read>
   11422:	e8 2a       	or	r14, r24
   11424:	f9 2a       	or	r15, r25
        gpib_trace_display(control_last, TRACE_BUS);
   11426:	62 e0       	ldi	r22, 0x02	; 2
   11428:	70 e0       	ldi	r23, 0x00	; 0
   1142a:	c7 01       	movw	r24, r14
   1142c:	98 de       	rcall	.-720    	; 0x1115e <gpib_trace_display>
   1142e:	02 c0       	rjmp	.+4      	; 0x11434 <gpib_read_byte+0x52>
    uint16_t bus, control, control_last;
    extern uint8_t gpib_unread_f;
    extern uint16_t gpib_unread_data;

    ch = 0;
    control_last = 0;
   11430:	e1 2c       	mov	r14, r1
   11432:	f1 2c       	mov	r15, r1
        control_last = gpib_control_pin_read();
        control_last |= gpib_handshake_pin_read();
        gpib_trace_display(control_last, TRACE_BUS);
    }

	gpib_timeout_set(HTIMEOUT);
   11434:	64 ef       	ldi	r22, 0xF4	; 244
   11436:	71 e0       	ldi	r23, 0x01	; 1
   11438:	80 e0       	ldi	r24, 0x00	; 0
   1143a:	90 e0       	ldi	r25, 0x00	; 0
   1143c:	af db       	rcall	.-2210   	; 0x10b9c <gpib_timeout_set>
    rx_state = GPIB_RX_START;
   1143e:	c0 e0       	ldi	r28, 0x00	; 0
    uint16_t ch;
    uint16_t bus, control, control_last;
    extern uint8_t gpib_unread_f;
    extern uint16_t gpib_unread_data;

    ch = 0;
   11440:	00 e0       	ldi	r16, 0x00	; 0
   11442:	10 e0       	ldi	r17, 0x00	; 0
    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
    {

        // User task that is called while waiting for commands
        gpib_user_task();
   11444:	0e 94 6b e2 	call	0x1c4d6	; 0x1c4d6 <gpib_user_task>

        if(uart_keyhit(0))
   11448:	80 e0       	ldi	r24, 0x00	; 0
   1144a:	0e 94 91 2a 	call	0x5522	; 0x5522 <uart_keyhit>
   1144e:	89 2b       	or	r24, r25
   11450:	09 f0       	breq	.+2      	; 0x11454 <gpib_read_byte+0x72>
   11452:	9c c0       	rjmp	.+312    	; 0x1158c <gpib_read_byte+0x1aa>
        if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

		// IFC is alwayon IN always in device mode
        if(GPIB_PIN_TST(IFC) == 0)
   11454:	4c 99       	sbic	0x09, 4	; 9
   11456:	15 c0       	rjmp	.+42     	; 0x11482 <gpib_read_byte+0xa0>
        {
            ch |= IFC_FLAG;
   11458:	10 61       	ori	r17, 0x10	; 16
			if(debuglevel & GPIB_ERR)
   1145a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1145e:	80 ff       	sbrs	r24, 0
   11460:	0e c0       	rjmp	.+28     	; 0x1147e <gpib_read_byte+0x9c>
				printf("gpib_read_byte: IFC state=%d\n", rx_state);
   11462:	8c 2f       	mov	r24, r28
   11464:	90 e0       	ldi	r25, 0x00	; 0
   11466:	ed b7       	in	r30, 0x3d	; 61
   11468:	fe b7       	in	r31, 0x3e	; 62
   1146a:	95 83       	std	Z+5, r25	; 0x05
   1146c:	84 83       	std	Z+4, r24	; 0x04
   1146e:	8e e1       	ldi	r24, 0x1E	; 30
   11470:	90 e1       	ldi	r25, 0x10	; 16
   11472:	a0 e0       	ldi	r26, 0x00	; 0
   11474:	81 83       	std	Z+1, r24	; 0x01
   11476:	92 83       	std	Z+2, r25	; 0x02
   11478:	a3 83       	std	Z+3, r26	; 0x03
   1147a:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
            gpib_bus_init();
   1147e:	98 db       	rcall	.-2256   	; 0x10bb0 <gpib_bus_init>
   11480:	85 c0       	rjmp	.+266    	; 0x1158c <gpib_read_byte+0x1aa>
            break;
        }

        switch(rx_state)
   11482:	c2 30       	cpi	r28, 0x02	; 2
   11484:	31 f1       	breq	.+76     	; 0x114d2 <gpib_read_byte+0xf0>
   11486:	28 f4       	brcc	.+10     	; 0x11492 <gpib_read_byte+0xb0>
   11488:	cc 23       	and	r28, r28
   1148a:	69 f0       	breq	.+26     	; 0x114a6 <gpib_read_byte+0xc4>
   1148c:	c1 30       	cpi	r28, 0x01	; 1
   1148e:	c9 f0       	breq	.+50     	; 0x114c2 <gpib_read_byte+0xe0>
   11490:	63 c0       	rjmp	.+198    	; 0x11558 <gpib_read_byte+0x176>
   11492:	c5 30       	cpi	r28, 0x05	; 5
   11494:	09 f4       	brne	.+2      	; 0x11498 <gpib_read_byte+0xb6>
   11496:	54 c0       	rjmp	.+168    	; 0x11540 <gpib_read_byte+0x15e>
   11498:	c7 30       	cpi	r28, 0x07	; 7
   1149a:	09 f4       	brne	.+2      	; 0x1149e <gpib_read_byte+0xbc>
   1149c:	58 c0       	rjmp	.+176    	; 0x1154e <gpib_read_byte+0x16c>
   1149e:	c4 30       	cpi	r28, 0x04	; 4
   114a0:	09 f0       	breq	.+2      	; 0x114a4 <gpib_read_byte+0xc2>
   114a2:	5a c0       	rjmp	.+180    	; 0x11558 <gpib_read_byte+0x176>
   114a4:	3e c0       	rjmp	.+124    	; 0x11522 <gpib_read_byte+0x140>
        {

			///@brief DAV must be high
            case GPIB_RX_START:
				//DEBUG
				if (GPIB_PIN_TST(DAV) == 1)
   114a6:	19 9b       	sbis	0x03, 1	; 3
   114a8:	43 c0       	rjmp	.+134    	; 0x11530 <gpib_read_byte+0x14e>
   114aa:	fd e0       	ldi	r31, 0x0D	; 13
   114ac:	fa 95       	dec	r31
   114ae:	f1 f7       	brne	.-4      	; 0x114ac <gpib_read_byte+0xca>
   114b0:	00 00       	nop
				{
					GPIB_BUS_SETTLE();                // Let Data BUS settle
					GPIB_PIN_FLOAT_UP(NRFD);
   114b2:	52 98       	cbi	0x0a, 2	; 10
   114b4:	5a 9a       	sbi	0x0b, 2	; 11
   114b6:	8d e0       	ldi	r24, 0x0D	; 13
   114b8:	8a 95       	dec	r24
   114ba:	f1 f7       	brne	.-4      	; 0x114b8 <gpib_read_byte+0xd6>
   114bc:	00 00       	nop
					GPIB_BUS_SETTLE();                // Let Data BUS settle
					rx_state = GPIB_RX_WAIT_FOR_DAV_LOW;
   114be:	c1 e0       	ldi	r28, 0x01	; 1
   114c0:	37 c0       	rjmp	.+110    	; 0x11530 <gpib_read_byte+0x14e>
                }
                break;

			// Wait for Data Avalable without timeout
            case GPIB_RX_WAIT_FOR_DAV_LOW:
                if ( GPIB_PIN_TST(DAV) == 0 )
   114c2:	19 99       	sbic	0x03, 1	; 3
   114c4:	80 c0       	rjmp	.+256    	; 0x115c6 <gpib_read_byte+0x1e4>
   114c6:	ed e0       	ldi	r30, 0x0D	; 13
   114c8:	ea 95       	dec	r30
   114ca:	f1 f7       	brne	.-4      	; 0x114c8 <gpib_read_byte+0xe6>
   114cc:	00 00       	nop
				{
					GPIB_BUS_SETTLE();                
                    rx_state = GPIB_RX_DAV_IS_LOW;
   114ce:	c2 e0       	ldi	r28, 0x02	; 2
   114d0:	7a c0       	rjmp	.+244    	; 0x115c6 <gpib_read_byte+0x1e4>
				}
                break;

			// Data is Avaliable
            case GPIB_RX_DAV_IS_LOW:
				GPIB_IO_LOW(NRFD); // BUSY
   114d2:	5a 98       	cbi	0x0b, 2	; 11
   114d4:	52 9a       	sbi	0x0a, 2	; 10
   114d6:	fd e0       	ldi	r31, 0x0D	; 13
   114d8:	fa 95       	dec	r31
				GPIB_BUS_SETTLE();                

				// Read DATA and Control lines
				// gpib_bus_read() strips parity if ATN is low command state

                bus = gpib_bus_read();
   114da:	f1 f7       	brne	.-4      	; 0x114d8 <gpib_read_byte+0xf6>
   114dc:	00 00       	nop
   114de:	93 dc       	rcall	.-1754   	; 0x10e06 <gpib_bus_read>
   114e0:	a8 2e       	mov	r10, r24
                ch |= bus;

				///@brief V2 boards can NOT read all control bits at once
				///@brief NRFD,NDAC and SRQ are cirrently outputs

                control_last = gpib_control_pin_read();
   114e2:	b1 2c       	mov	r11, r1
   114e4:	96 dc       	rcall	.-1748   	; 0x10e12 <gpib_control_pin_read>
   114e6:	7c 01       	movw	r14, r24
   114e8:	08 2b       	or	r16, r24
                ch |= control_last;
   114ea:	19 2b       	or	r17, r25
   114ec:	0a 29       	or	r16, r10

				// In theory the control_last should not have changed
				// from the initial values. ONly the Data BUS
                if(trace)
   114ee:	1b 29       	or	r17, r11
   114f0:	c1 14       	cp	r12, r1
   114f2:	d1 04       	cpc	r13, r1
                {
                    control_last |= gpib_handshake_pin_read();
   114f4:	49 f0       	breq	.+18     	; 0x11508 <gpib_read_byte+0x126>
   114f6:	9d dc       	rcall	.-1734   	; 0x10e32 <gpib_handshake_pin_read>
   114f8:	e8 2a       	or	r14, r24
                    gpib_trace_display(bus | control_last, TRACE_READ);
   114fa:	f9 2a       	or	r15, r25
   114fc:	61 e0       	ldi	r22, 0x01	; 1
   114fe:	70 e0       	ldi	r23, 0x00	; 0
   11500:	c5 01       	movw	r24, r10
   11502:	8e 29       	or	r24, r14
   11504:	9f 29       	or	r25, r15
   11506:	2b de       	rcall	.-938    	; 0x1115e <gpib_trace_display>
                }

				// Release NDAC to say we read the byte
                GPIB_PIN_FLOAT_UP(NDAC);
   11508:	53 98       	cbi	0x0a, 3	; 10
   1150a:	5b 9a       	sbi	0x0b, 3	; 11
   1150c:	8d e0       	ldi	r24, 0x0D	; 13
   1150e:	8a 95       	dec	r24
   11510:	f1 f7       	brne	.-4      	; 0x1150e <gpib_read_byte+0x12c>
                GPIB_BUS_SETTLE();                // NDAC bus settle time
                gpib_timeout_set(HTIMEOUT);
   11512:	00 00       	nop
   11514:	64 ef       	ldi	r22, 0xF4	; 244
   11516:	71 e0       	ldi	r23, 0x01	; 1
   11518:	80 e0       	ldi	r24, 0x00	; 0
   1151a:	90 e0       	ldi	r25, 0x00	; 0
   1151c:	3f db       	rcall	.-2434   	; 0x10b9c <gpib_timeout_set>
                rx_state = GPIB_RX_WAIT_FOR_DAV_HI;
   1151e:	c4 e0       	ldi	r28, 0x04	; 4
   11520:	52 c0       	rjmp	.+164    	; 0x115c6 <gpib_read_byte+0x1e4>
                break;

			///@brief Wait for DAV HI
            case GPIB_RX_WAIT_FOR_DAV_HI:
                if (GPIB_PIN_TST(DAV) == 1)
   11522:	19 9b       	sbis	0x03, 1	; 3
   11524:	05 c0       	rjmp	.+10     	; 0x11530 <gpib_read_byte+0x14e>
   11526:	ed e0       	ldi	r30, 0x0D	; 13
   11528:	ea 95       	dec	r30
   1152a:	f1 f7       	brne	.-4      	; 0x11528 <gpib_read_byte+0x146>
   1152c:	00 00       	nop
                {
					GPIB_BUS_SETTLE();
                    rx_state = GPIB_RX_DAV_IS_HI;
   1152e:	c5 e0       	ldi	r28, 0x05	; 5
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11530:	80 91 e7 1c 	lds	r24, 0x1CE7	; 0x801ce7 <gpib_timer+0x8>
                if (GPIB_PIN_TST(DAV) == 1)
                {
					GPIB_BUS_SETTLE();
                    rx_state = GPIB_RX_DAV_IS_HI;
                }
                if (gpib_timeout_test())
   11534:	88 23       	and	r24, r24
   11536:	09 f4       	brne	.+2      	; 0x1153a <gpib_read_byte+0x158>
   11538:	46 c0       	rjmp	.+140    	; 0x115c6 <gpib_read_byte+0x1e4>
                {
                    ch |= TIMEOUT_FLAG;
   1153a:	10 64       	ori	r17, 0x40	; 64
                    rx_state = GPIB_RX_ERROR;
   1153c:	c7 e0       	ldi	r28, 0x07	; 7
   1153e:	43 c0       	rjmp	.+134    	; 0x115c6 <gpib_read_byte+0x1e4>
                }
                break;

			///@brief Ready for next byte
            case GPIB_RX_DAV_IS_HI:
				GPIB_IO_LOW(NDAC);
   11540:	5b 98       	cbi	0x0b, 3	; 11
   11542:	53 9a       	sbi	0x0a, 3	; 10
   11544:	fd e0       	ldi	r31, 0x0D	; 13
   11546:	fa 95       	dec	r31
   11548:	f1 f7       	brne	.-4      	; 0x11546 <gpib_read_byte+0x164>
   1154a:	00 00       	nop
   1154c:	09 c0       	rjmp	.+18     	; 0x11560 <gpib_read_byte+0x17e>
				// Now BOTH NDAC and NRFD are LOW
                rx_state = GPIB_RX_DONE;
                break;

            case GPIB_RX_ERROR:
				GPIB_IO_LOW(NRFD);
   1154e:	5a 98       	cbi	0x0b, 2	; 11
   11550:	52 9a       	sbi	0x0a, 2	; 10
				GPIB_IO_LOW(NDAC);
   11552:	5b 98       	cbi	0x0b, 3	; 11
   11554:	53 9a       	sbi	0x0a, 3	; 10

            case GPIB_RX_DONE:
                break;
        }

        if(trace)
   11556:	04 c0       	rjmp	.+8      	; 0x11560 <gpib_read_byte+0x17e>
   11558:	c1 14       	cp	r12, r1
   1155a:	d1 04       	cpc	r13, r1
   1155c:	91 f0       	breq	.+36     	; 0x11582 <gpib_read_byte+0x1a0>
   1155e:	04 c0       	rjmp	.+8      	; 0x11568 <gpib_read_byte+0x186>
   11560:	c1 14       	cp	r12, r1
   11562:	d1 04       	cpc	r13, r1
   11564:	99 f0       	breq	.+38     	; 0x1158c <gpib_read_byte+0x1aa>
        {
/// V2 boards can not read all control and handshake bits at once
/// FIXME We could add a test for read/write state ??
/// NRFD,NDAC SRQ are outputs durring write phase, but not at very start
            control = gpib_control_pin_read();
   11566:	c8 e0       	ldi	r28, 0x08	; 8
   11568:	54 dc       	rcall	.-1880   	; 0x10e12 <gpib_control_pin_read>
            control |= gpib_handshake_pin_read();
   1156a:	5c 01       	movw	r10, r24
   1156c:	62 dc       	rcall	.-1852   	; 0x10e32 <gpib_handshake_pin_read>
   1156e:	a8 2a       	or	r10, r24
   11570:	b9 2a       	or	r11, r25
            if(control_last != control)
   11572:	ae 14       	cp	r10, r14
   11574:	bf 04       	cpc	r11, r15
   11576:	31 f0       	breq	.+12     	; 0x11584 <gpib_read_byte+0x1a2>
            {
                gpib_trace_display(control, TRACE_BUS);
   11578:	62 e0       	ldi	r22, 0x02	; 2
   1157a:	70 e0       	ldi	r23, 0x00	; 0
   1157c:	c5 01       	movw	r24, r10
   1157e:	ef dd       	rcall	.-1058   	; 0x1115e <gpib_trace_display>
   11580:	01 c0       	rjmp	.+2      	; 0x11584 <gpib_read_byte+0x1a2>
   11582:	57 01       	movw	r10, r14

            case GPIB_RX_DONE:
                break;
        }

        if(trace)
   11584:	c8 30       	cpi	r28, 0x08	; 8
        gpib_trace_display(control_last, TRACE_BUS);
    }

	gpib_timeout_set(HTIMEOUT);
    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
   11586:	11 f0       	breq	.+4      	; 0x1158c <gpib_read_byte+0x1aa>
   11588:	75 01       	movw	r14, r10
   1158a:	5c cf       	rjmp	.-328    	; 0x11444 <gpib_read_byte+0x62>
   1158c:	80 91 ec 1e 	lds	r24, 0x1EEC	; 0x801eec <current>
///  - Remember that NDAC and NRFD are now both LOW!
///  - The spec says to KEEP BOTH LOW when NOT ready to read otherwise
///    we may miss a transfer and cause a controller timeout!
///  - GPIB TX state expects NRFD LOW on entry or it is an ERROR!

    lastcmd = current;
   11590:	90 91 ed 1e 	lds	r25, 0x1EED	; 0x801eed <current+0x1>
   11594:	90 93 e9 1c 	sts	0x1CE9, r25	; 0x801ce9 <lastcmd+0x1>
   11598:	80 93 e8 1c 	sts	0x1CE8, r24	; 0x801ce8 <lastcmd>
   1159c:	c8 01       	movw	r24, r16

    if(ch & ERROR_MASK || (ch & ATN_FLAG) == 0)
   1159e:	88 27       	eor	r24, r24
   115a0:	90 7d       	andi	r25, 0xD0	; 208
   115a2:	89 2b       	or	r24, r25
   115a4:	11 f4       	brne	.+4      	; 0x115aa <gpib_read_byte+0x1c8>
   115a6:	12 fd       	sbrc	r17, 2
   115a8:	05 c0       	rjmp	.+10     	; 0x115b4 <gpib_read_byte+0x1d2>
   115aa:	10 92 ed 1e 	sts	0x1EED, r1	; 0x801eed <current+0x1>
        current = 0;
   115ae:	10 92 ec 1e 	sts	0x1EEC, r1	; 0x801eec <current>
   115b2:	07 c0       	rjmp	.+14     	; 0x115c2 <gpib_read_byte+0x1e0>
   115b4:	c8 01       	movw	r24, r16
    else
        current = ch & CMD_MASK;
   115b6:	8f 77       	andi	r24, 0x7F	; 127
   115b8:	99 27       	eor	r25, r25
   115ba:	90 93 ed 1e 	sts	0x1EED, r25	; 0x801eed <current+0x1>
   115be:	80 93 ec 1e 	sts	0x1EEC, r24	; 0x801eec <current>
   115c2:	c8 01       	movw	r24, r16
   115c4:	05 c0       	rjmp	.+10     	; 0x115d0 <gpib_read_byte+0x1ee>
   115c6:	c1 14       	cp	r12, r1

            case GPIB_RX_DONE:
                break;
        }

        if(trace)
   115c8:	d1 04       	cpc	r13, r1
   115ca:	09 f4       	brne	.+2      	; 0x115ce <gpib_read_byte+0x1ec>
   115cc:	3b cf       	rjmp	.-394    	; 0x11444 <gpib_read_byte+0x62>
   115ce:	cc cf       	rjmp	.-104    	; 0x11568 <gpib_read_byte+0x186>
   115d0:	0f 90       	pop	r0
        current = 0;
    else
        current = ch & CMD_MASK;

    return (ch);
}
   115d2:	0f 90       	pop	r0
   115d4:	0f 90       	pop	r0
   115d6:	0f 90       	pop	r0
   115d8:	0f 90       	pop	r0
   115da:	cf 91       	pop	r28
   115dc:	1f 91       	pop	r17
   115de:	0f 91       	pop	r16
   115e0:	ff 90       	pop	r15
   115e2:	ef 90       	pop	r14
   115e4:	df 90       	pop	r13
   115e6:	cf 90       	pop	r12
   115e8:	bf 90       	pop	r11
   115ea:	af 90       	pop	r10
   115ec:	08 95       	ret

000115ee <gpib_decode>:
   115ee:	60 e0       	ldi	r22, 0x00	; 0
/// @see gpib_decode_str()
/// @return  void

void gpib_decode(uint16_t ch)
{
    gpib_trace_display(ch,0);
   115f0:	70 e0       	ldi	r23, 0x00	; 0
   115f2:	b5 cd       	rjmp	.-1174   	; 0x1115e <gpib_trace_display>
   115f4:	08 95       	ret

000115f6 <gpib_read_str>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
int gpib_read_str(uint8_t *buf, int size, uint16_t *status)
{
   115f6:	a7 e0       	ldi	r26, 0x07	; 7
   115f8:	b0 e0       	ldi	r27, 0x00	; 0
   115fa:	e1 e0       	ldi	r30, 0x01	; 1
   115fc:	fb e8       	ldi	r31, 0x8B	; 139
   115fe:	0c 94 15 e7 	jmp	0x1ce2a	; 0x1ce2a <__prologue_saves__+0x10>
   11602:	5b 01       	movw	r10, r22
   11604:	6a 01       	movw	r12, r20
    uint16_t val;
    int ind = 0;

    *status &= STATUS_MASK;
   11606:	fa 01       	movw	r30, r20
   11608:	20 81       	ld	r18, Z
   1160a:	31 81       	ldd	r19, Z+1	; 0x01
   1160c:	22 27       	eor	r18, r18
   1160e:	31 83       	std	Z+1, r19	; 0x01
   11610:	20 83       	st	Z, r18

    if(!size)
   11612:	67 2b       	or	r22, r23
   11614:	21 f0       	breq	.+8      	; 0x1161e <gpib_read_str+0x28>
   11616:	7c 01       	movw	r14, r24
   11618:	00 e0       	ldi	r16, 0x00	; 0
   1161a:	10 e0       	ldi	r17, 0x00	; 0
   1161c:	28 c0       	rjmp	.+80     	; 0x1166e <gpib_read_str+0x78>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   1161e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11622:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11626:	81 72       	andi	r24, 0x21	; 33
   11628:	91 70       	andi	r25, 0x01	; 1
   1162a:	89 2b       	or	r24, r25
   1162c:	09 f4       	brne	.+2      	; 0x11630 <gpib_read_str+0x3a>
   1162e:	7c c0       	rjmp	.+248    	; 0x11728 <gpib_read_str+0x132>
            printf("gpib_read_str: size = 0\n");
   11630:	85 ed       	ldi	r24, 0xD5	; 213
   11632:	9f e0       	ldi	r25, 0x0F	; 15
   11634:	a0 e0       	ldi	r26, 0x00	; 0
   11636:	ed b7       	in	r30, 0x3d	; 61
   11638:	fe b7       	in	r31, 0x3e	; 62
   1163a:	81 83       	std	Z+1, r24	; 0x01
   1163c:	92 83       	std	Z+2, r25	; 0x02
   1163e:	a3 83       	std	Z+3, r26	; 0x03
   11640:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   11644:	71 c0       	rjmp	.+226    	; 0x11728 <gpib_read_str+0x132>
        {
            *status |= (val & ERROR_MASK);
            break;
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
   11646:	8c 27       	eor	r24, r28
   11648:	9d 27       	eor	r25, r29
   1164a:	92 fd       	sbrc	r25, 2
   1164c:	2e c0       	rjmp	.+92     	; 0x116aa <gpib_read_str+0xb4>
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
            gpib_unread(val);
            break;
        }

        if(val & ATN_FLAG)
   1164e:	ce 01       	movw	r24, r28
   11650:	88 27       	eor	r24, r24
   11652:	94 70       	andi	r25, 0x04	; 4
            buf[ind] = (val & CMD_MASK);
   11654:	2c 2f       	mov	r18, r28
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
            gpib_unread(val);
            break;
        }

        if(val & ATN_FLAG)
   11656:	d2 fd       	sbrc	r29, 2
            buf[ind] = (val & CMD_MASK);
   11658:	2f 77       	andi	r18, 0x7F	; 127
        else
            buf[ind] = (val & DATA_MASK);
   1165a:	f7 01       	movw	r30, r14
   1165c:	20 83       	st	Z, r18
        ++ind;
   1165e:	0f 5f       	subi	r16, 0xFF	; 255
   11660:	1f 4f       	sbci	r17, 0xFF	; 255

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   11662:	89 2b       	or	r24, r25
   11664:	09 f4       	brne	.+2      	; 0x11668 <gpib_read_str+0x72>
   11666:	3c c0       	rjmp	.+120    	; 0x116e0 <gpib_read_str+0xea>
   11668:	ff ef       	ldi	r31, 0xFF	; 255
   1166a:	ef 1a       	sub	r14, r31
   1166c:	ff 0a       	sbc	r15, r31
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
            printf("gpib_read_str: size = 0\n");
    }

    while(ind < size)
   1166e:	0a 15       	cp	r16, r10
   11670:	1b 05       	cpc	r17, r11
   11672:	0c f0       	brlt	.+2      	; 0x11676 <gpib_read_str+0x80>
   11674:	3f c0       	rjmp	.+126    	; 0x116f4 <gpib_read_str+0xfe>
    {
        val = gpib_read_byte(NO_TRACE);
   11676:	80 e0       	ldi	r24, 0x00	; 0
   11678:	90 e0       	ldi	r25, 0x00	; 0
   1167a:	b3 de       	rcall	.-666    	; 0x113e2 <gpib_read_byte>
   1167c:	ec 01       	movw	r28, r24
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_BUS_DECODE)
   1167e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11682:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11686:	90 ff       	sbrs	r25, 0
   11688:	02 c0       	rjmp	.+4      	; 0x1168e <gpib_read_str+0x98>
            gpib_decode(val);
   1168a:	ce 01       	movw	r24, r28
   1168c:	b0 df       	rcall	.-160    	; 0x115ee <gpib_decode>
#endif
        if(val & ERROR_MASK)
   1168e:	9e 01       	movw	r18, r28
   11690:	22 27       	eor	r18, r18
   11692:	30 7d       	andi	r19, 0xD0	; 208
   11694:	f6 01       	movw	r30, r12
   11696:	80 81       	ld	r24, Z
   11698:	91 81       	ldd	r25, Z+1	; 0x01
   1169a:	21 15       	cp	r18, r1
   1169c:	31 05       	cpc	r19, r1
   1169e:	99 f2       	breq	.-90     	; 0x11646 <gpib_read_str+0x50>
        {
            *status |= (val & ERROR_MASK);
   116a0:	82 2b       	or	r24, r18
   116a2:	93 2b       	or	r25, r19
   116a4:	91 83       	std	Z+1, r25	; 0x01
   116a6:	80 83       	st	Z, r24
            break;
   116a8:	28 c0       	rjmp	.+80     	; 0x116fa <gpib_read_str+0x104>
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
        {
            if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   116aa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   116ae:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   116b2:	81 72       	andi	r24, 0x21	; 33
   116b4:	91 70       	andi	r25, 0x01	; 1
   116b6:	89 2b       	or	r24, r25
   116b8:	81 f0       	breq	.+32     	; 0x116da <gpib_read_str+0xe4>
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
   116ba:	ce 01       	movw	r24, r28
   116bc:	99 27       	eor	r25, r25
   116be:	ed b7       	in	r30, 0x3d	; 61
   116c0:	fe b7       	in	r31, 0x3e	; 62
   116c2:	97 83       	std	Z+7, r25	; 0x07
   116c4:	86 83       	std	Z+6, r24	; 0x06
   116c6:	15 83       	std	Z+5, r17	; 0x05
   116c8:	04 83       	std	Z+4, r16	; 0x04
   116ca:	88 ea       	ldi	r24, 0xA8	; 168
   116cc:	9f e0       	ldi	r25, 0x0F	; 15
   116ce:	a0 e0       	ldi	r26, 0x00	; 0
   116d0:	81 83       	std	Z+1, r24	; 0x01
   116d2:	92 83       	std	Z+2, r25	; 0x02
   116d4:	a3 83       	std	Z+3, r26	; 0x03
   116d6:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
            gpib_unread(val);
   116da:	ce 01       	movw	r24, r28
   116dc:	6a db       	rcall	.-2348   	; 0x10db2 <gpib_unread>
            break;
   116de:	0d c0       	rjmp	.+26     	; 0x116fa <gpib_read_str+0x104>
            buf[ind] = (val & CMD_MASK);
        else
            buf[ind] = (val & DATA_MASK);
        ++ind;

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   116e0:	d0 ff       	sbrs	r29, 0
   116e2:	c2 cf       	rjmp	.-124    	; 0x11668 <gpib_read_str+0x72>
        {

            if(*status & EOI_FLAG)
   116e4:	f6 01       	movw	r30, r12
   116e6:	80 81       	ld	r24, Z
   116e8:	91 81       	ldd	r25, Z+1	; 0x01
   116ea:	90 fd       	sbrc	r25, 0
   116ec:	1f c0       	rjmp	.+62     	; 0x1172c <gpib_read_str+0x136>
                return(ind);
/// @todo TODO
///  decode this state - for now I just set the EOI_FLAG
            *status |= EOI_FLAG;
   116ee:	91 60       	ori	r25, 0x01	; 1
   116f0:	91 83       	std	Z+1, r25	; 0x01
   116f2:	80 83       	st	Z, r24
            break;
        }
    }
    if ( ind != size ) 
   116f4:	0a 15       	cp	r16, r10
   116f6:	1b 05       	cpc	r17, r11
   116f8:	c9 f0       	breq	.+50     	; 0x1172c <gpib_read_str+0x136>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   116fa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   116fe:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11702:	81 72       	andi	r24, 0x21	; 33
   11704:	99 27       	eor	r25, r25
   11706:	89 2b       	or	r24, r25
   11708:	89 f0       	breq	.+34     	; 0x1172c <gpib_read_str+0x136>
            printf("[gpib_read_str read(%d) expected(%d)]\n", ind , size);
   1170a:	ed b7       	in	r30, 0x3d	; 61
   1170c:	fe b7       	in	r31, 0x3e	; 62
   1170e:	b7 82       	std	Z+7, r11	; 0x07
   11710:	a6 82       	std	Z+6, r10	; 0x06
   11712:	15 83       	std	Z+5, r17	; 0x05
   11714:	04 83       	std	Z+4, r16	; 0x04
   11716:	81 e8       	ldi	r24, 0x81	; 129
   11718:	9f e0       	ldi	r25, 0x0F	; 15
   1171a:	a0 e0       	ldi	r26, 0x00	; 0
   1171c:	81 83       	std	Z+1, r24	; 0x01
   1171e:	92 83       	std	Z+2, r25	; 0x02
   11720:	a3 83       	std	Z+3, r26	; 0x03
   11722:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   11726:	02 c0       	rjmp	.+4      	; 0x1172c <gpib_read_str+0x136>
   11728:	00 e0       	ldi	r16, 0x00	; 0
   1172a:	10 e0       	ldi	r17, 0x00	; 0
    }
    return(ind);
}
   1172c:	c8 01       	movw	r24, r16
   1172e:	cd b7       	in	r28, 0x3d	; 61
   11730:	de b7       	in	r29, 0x3e	; 62
   11732:	27 96       	adiw	r28, 0x07	; 7
   11734:	ea e0       	ldi	r30, 0x0A	; 10
   11736:	0c 94 31 e7 	jmp	0x1ce62	; 0x1ce62 <__epilogue_restores__+0x10>

0001173a <gpib_write_str>:
///     - Error Flags:
///       - IFC_FLAG
/// @see: gpib_write_byte()
/// @see: gpib.h _FLAGS defines for a full list)
int gpib_write_str(uint8_t *buf, int size, uint16_t *status)
{
   1173a:	a7 e0       	ldi	r26, 0x07	; 7
   1173c:	b0 e0       	ldi	r27, 0x00	; 0
   1173e:	e3 ea       	ldi	r30, 0xA3	; 163
   11740:	fb e8       	ldi	r31, 0x8B	; 139
   11742:	0c 94 15 e7 	jmp	0x1ce2a	; 0x1ce2a <__prologue_saves__+0x10>
   11746:	d8 2f       	mov	r29, r24
   11748:	c9 2f       	mov	r28, r25
   1174a:	7b 01       	movw	r14, r22
   1174c:	8a 01       	movw	r16, r20
    uint16_t val, ch;
    int ind = 0;

    *status &= STATUS_MASK;
   1174e:	fa 01       	movw	r30, r20
   11750:	80 81       	ld	r24, Z
   11752:	91 81       	ldd	r25, Z+1	; 0x01
   11754:	88 27       	eor	r24, r24
   11756:	91 83       	std	Z+1, r25	; 0x01
   11758:	80 83       	st	Z, r24

    if(!size)
   1175a:	67 2b       	or	r22, r23
   1175c:	91 f4       	brne	.+36     	; 0x11782 <gpib_write_str+0x48>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   1175e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11762:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11766:	81 72       	andi	r24, 0x21	; 33
   11768:	91 70       	andi	r25, 0x01	; 1
   1176a:	89 2b       	or	r24, r25
   1176c:	51 f0       	breq	.+20     	; 0x11782 <gpib_write_str+0x48>
            printf("gpib_write_str: size = 0\n");
   1176e:	87 e6       	ldi	r24, 0x67	; 103
   11770:	9f e0       	ldi	r25, 0x0F	; 15
   11772:	a0 e0       	ldi	r26, 0x00	; 0
   11774:	ed b7       	in	r30, 0x3d	; 61
   11776:	fe b7       	in	r31, 0x3e	; 62
   11778:	81 83       	std	Z+1, r24	; 0x01
   1177a:	92 83       	std	Z+2, r25	; 0x02
   1177c:	a3 83       	std	Z+3, r26	; 0x03
   1177e:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    }

	// Start with NRFD and NDAC = 1 - ie off the OC BUS
	gpib_rx_init(0);
   11782:	80 e0       	ldi	r24, 0x00	; 0
   11784:	4d da       	rcall	.-2918   	; 0x10c20 <gpib_rx_init>

// Wait until ATN is released!
#if 1
    if (GPIB_PIN_TST(ATN) == 0)
   11786:	4e 9b       	sbis	0x09, 6	; 9
   11788:	06 c0       	rjmp	.+12     	; 0x11796 <gpib_write_str+0x5c>
#endif

// Wait until DAV is released!
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
   1178a:	64 ef       	ldi	r22, 0xF4	; 244
   1178c:	71 e0       	ldi	r23, 0x01	; 1
   1178e:	80 e0       	ldi	r24, 0x00	; 0
   11790:	90 e0       	ldi	r25, 0x00	; 0
   11792:	04 da       	rcall	.-3064   	; 0x10b9c <gpib_timeout_set>
	while ( GPIB_PIN_TST(DAV) == 0)
   11794:	18 c0       	rjmp	.+48     	; 0x117c6 <gpib_write_str+0x8c>
#endif
		// Wait for ATN free
		// Keep in mind that we have been addressed to talk already
		// So waiting is ok - they won't be expecting a reply until
		// They are ready
		gpib_timeout_set(HTIMEOUT);
   11796:	64 ef       	ldi	r22, 0xF4	; 244
   11798:	71 e0       	ldi	r23, 0x01	; 1
   1179a:	80 e0       	ldi	r24, 0x00	; 0
   1179c:	90 e0       	ldi	r25, 0x00	; 0
   1179e:	fe d9       	rcall	.-3076   	; 0x10b9c <gpib_timeout_set>
		while(GPIB_PIN_TST(ATN) == 0)
   117a0:	4e 99       	sbic	0x09, 6	; 9
   117a2:	f3 cf       	rjmp	.-26     	; 0x1178a <gpib_write_str+0x50>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   117a4:	80 91 e7 1c 	lds	r24, 0x1CE7	; 0x801ce7 <gpib_timer+0x8>
		// So waiting is ok - they won't be expecting a reply until
		// They are ready
		gpib_timeout_set(HTIMEOUT);
		while(GPIB_PIN_TST(ATN) == 0)
		{
			if(gpib_timeout_test())
   117a8:	88 23       	and	r24, r24
			{
				gpib_rx_init(1);
   117aa:	d1 f3       	breq	.-12     	; 0x117a0 <gpib_write_str+0x66>
   117ac:	81 e0       	ldi	r24, 0x01	; 1
   117ae:	38 da       	rcall	.-2960   	; 0x10c20 <gpib_rx_init>
				if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   117b0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   117b4:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   117b8:	85 70       	andi	r24, 0x05	; 5
   117ba:	99 27       	eor	r25, r25
   117bc:	89 2b       	or	r24, r25
   117be:	d9 f0       	breq	.+54     	; 0x117f6 <gpib_write_str+0xbc>
					printf("<gpib_write_str timeout waiting for ATN = 1>\n");
   117c0:	89 e3       	ldi	r24, 0x39	; 57
   117c2:	9f e0       	ldi	r25, 0x0F	; 15
   117c4:	10 c0       	rjmp	.+32     	; 0x117e6 <gpib_write_str+0xac>

// Wait until DAV is released!
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
	while ( GPIB_PIN_TST(DAV) == 0)
   117c6:	19 99       	sbic	0x03, 1	; 3
   117c8:	1f c0       	rjmp	.+62     	; 0x11808 <gpib_write_str+0xce>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   117ca:	80 91 e7 1c 	lds	r24, 0x1CE7	; 0x801ce7 <gpib_timer+0x8>
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
	while ( GPIB_PIN_TST(DAV) == 0)
	{
		if(gpib_timeout_test())
   117ce:	88 23       	and	r24, r24
   117d0:	d1 f3       	breq	.-12     	; 0x117c6 <gpib_write_str+0x8c>
		{
			if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   117d2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   117d6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   117da:	85 70       	andi	r24, 0x05	; 5
   117dc:	99 27       	eor	r25, r25
   117de:	89 2b       	or	r24, r25
   117e0:	51 f0       	breq	.+20     	; 0x117f6 <gpib_write_str+0xbc>
				printf("<BUS waiting for DAV==1>\n");
   117e2:	8f e1       	ldi	r24, 0x1F	; 31
   117e4:	9f e0       	ldi	r25, 0x0F	; 15
   117e6:	a0 e0       	ldi	r26, 0x00	; 0
   117e8:	ed b7       	in	r30, 0x3d	; 61
   117ea:	fe b7       	in	r31, 0x3e	; 62
   117ec:	81 83       	std	Z+1, r24	; 0x01
   117ee:	92 83       	std	Z+2, r25	; 0x02
   117f0:	a3 83       	std	Z+3, r26	; 0x03
   117f2:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
			*status |= (TIMEOUT_FLAG | BUS_ERROR_FLAG);
   117f6:	f8 01       	movw	r30, r16
   117f8:	80 81       	ld	r24, Z
   117fa:	91 81       	ldd	r25, Z+1	; 0x01
   117fc:	90 6c       	ori	r25, 0xC0	; 192
   117fe:	91 83       	std	Z+1, r25	; 0x01
   11800:	80 83       	st	Z, r24
			return(ind);
   11802:	c0 e0       	ldi	r28, 0x00	; 0
   11804:	d0 e0       	ldi	r29, 0x00	; 0
   11806:	45 c0       	rjmp	.+138    	; 0x11892 <gpib_write_str+0x158>
   11808:	cd 2e       	mov	r12, r29
   1180a:	dc 2e       	mov	r13, r28

// Wait until DAV is released!
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
	while ( GPIB_PIN_TST(DAV) == 0)
   1180c:	c0 e0       	ldi	r28, 0x00	; 0
   1180e:	d0 e0       	ldi	r29, 0x00	; 0
			return(ind);
		}
	}
#endif

    while(ind < size)
   11810:	ce 15       	cp	r28, r14
   11812:	df 05       	cpc	r29, r15
   11814:	1c f5       	brge	.+70     	; 0x1185c <gpib_write_str+0x122>
    {
        ch = buf[ind++] & 0xff;                   // unsigned
   11816:	21 96       	adiw	r28, 0x01	; 1
   11818:	f6 01       	movw	r30, r12
   1181a:	81 91       	ld	r24, Z+
   1181c:	6f 01       	movw	r12, r30
   1181e:	90 e0       	ldi	r25, 0x00	; 0

        if( (*status & EOI_FLAG) && (ind == size ) )
   11820:	f8 01       	movw	r30, r16
   11822:	20 81       	ld	r18, Z
   11824:	31 81       	ldd	r19, Z+1	; 0x01
   11826:	30 ff       	sbrs	r19, 0
   11828:	04 c0       	rjmp	.+8      	; 0x11832 <gpib_write_str+0xf8>
   1182a:	ec 16       	cp	r14, r28
   1182c:	fd 06       	cpc	r15, r29
            ch |= EOI_FLAG;
   1182e:	09 f4       	brne	.+2      	; 0x11832 <gpib_write_str+0xf8>

/// @return Returns

        val = gpib_write_byte(ch);
   11830:	91 60       	ori	r25, 0x01	; 1
   11832:	0b db       	rcall	.-2538   	; 0x10e4a <gpib_write_byte>
        *status |= (val & ERROR_MASK);
   11834:	5c 01       	movw	r10, r24
   11836:	aa 24       	eor	r10, r10
   11838:	f0 ed       	ldi	r31, 0xD0	; 208
   1183a:	bf 22       	and	r11, r31
   1183c:	f8 01       	movw	r30, r16
   1183e:	20 81       	ld	r18, Z
   11840:	31 81       	ldd	r19, Z+1	; 0x01
   11842:	2a 29       	or	r18, r10
   11844:	3b 29       	or	r19, r11
   11846:	31 83       	std	Z+1, r19	; 0x01
   11848:	20 83       	st	Z, r18

#if SDEBUG
        if(debuglevel & GPIB_RW_STR_BUS_DECODE)
   1184a:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1184e:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
            gpib_decode(val);
   11852:	30 fd       	sbrc	r19, 0
#endif
        if(val & ERROR_MASK)
   11854:	cc de       	rcall	.-616    	; 0x115ee <gpib_decode>
   11856:	a1 14       	cp	r10, r1
   11858:	b1 04       	cpc	r11, r1

    }                                             // while(ind < size)

// End by setting receive mode and set NRFD and NDAC busy until
// we get back to the main loop (this happens very quickly
	gpib_rx_init(1);	// BUSY
   1185a:	d1 f2       	breq	.-76     	; 0x11810 <gpib_write_str+0xd6>
   1185c:	81 e0       	ldi	r24, 0x01	; 1
   1185e:	e0 d9       	rcall	.-3136   	; 0x10c20 <gpib_rx_init>

    if ( ind != size )
   11860:	ce 15       	cp	r28, r14
   11862:	df 05       	cpc	r29, r15
   11864:	b1 f0       	breq	.+44     	; 0x11892 <gpib_write_str+0x158>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   11866:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1186a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1186e:	81 72       	andi	r24, 0x21	; 33
   11870:	91 70       	andi	r25, 0x01	; 1
   11872:	89 2b       	or	r24, r25
   11874:	71 f0       	breq	.+28     	; 0x11892 <gpib_write_str+0x158>
            printf("[gpib_write_str sent(%d) expected(%d)]\n", ind,size);
   11876:	ed b7       	in	r30, 0x3d	; 61
   11878:	fe b7       	in	r31, 0x3e	; 62
   1187a:	f7 82       	std	Z+7, r15	; 0x07
   1187c:	e6 82       	std	Z+6, r14	; 0x06
   1187e:	d5 83       	std	Z+5, r29	; 0x05
   11880:	c4 83       	std	Z+4, r28	; 0x04
   11882:	87 ef       	ldi	r24, 0xF7	; 247
   11884:	9e e0       	ldi	r25, 0x0E	; 14
   11886:	a0 e0       	ldi	r26, 0x00	; 0
   11888:	81 83       	std	Z+1, r24	; 0x01
   1188a:	92 83       	std	Z+2, r25	; 0x02
   1188c:	a3 83       	std	Z+3, r26	; 0x03
   1188e:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    }
    return(ind);
}
   11892:	ce 01       	movw	r24, r28
   11894:	cd b7       	in	r28, 0x3d	; 61
   11896:	de b7       	in	r29, 0x3e	; 62
   11898:	27 96       	adiw	r28, 0x07	; 7
   1189a:	ea e0       	ldi	r30, 0x0A	; 10
   1189c:	0c 94 31 e7 	jmp	0x1ce62	; 0x1ce62 <__epilogue_restores__+0x10>

000118a0 <gpib_file_init>:
{
    int index = find_device(PRINTER_TYPE, address, BASE_MSA);
    if(index == -1)
        return(0);
    return(set_active_device(index));
}
   118a0:	ad b7       	in	r26, 0x3d	; 61
   118a2:	be b7       	in	r27, 0x3e	; 62
   118a4:	17 97       	sbiw	r26, 0x07	; 7
   118a6:	0f b6       	in	r0, 0x3f	; 63
   118a8:	f8 94       	cli
   118aa:	be bf       	out	0x3e, r27	; 62
   118ac:	0f be       	out	0x3f, r0	; 63
   118ae:	ad bf       	out	0x3d, r26	; 61
   118b0:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <debuglevel+0x1>
   118b4:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <debuglevel>
   118b8:	88 eb       	ldi	r24, 0xB8	; 184
   118ba:	91 e0       	ldi	r25, 0x01	; 1
   118bc:	0e 94 96 9e 	call	0x13d2c	; 0x13d2c <Read_Config>
   118c0:	18 16       	cp	r1, r24
   118c2:	19 06       	cpc	r1, r25
   118c4:	8c f4       	brge	.+34     	; 0x118e8 <gpib_file_init+0x48>
   118c6:	ed b7       	in	r30, 0x3d	; 61
   118c8:	fe b7       	in	r31, 0x3e	; 62
   118ca:	97 83       	std	Z+7, r25	; 0x07
   118cc:	86 83       	std	Z+6, r24	; 0x06
   118ce:	88 eb       	ldi	r24, 0xB8	; 184
   118d0:	91 e0       	ldi	r25, 0x01	; 1
   118d2:	95 83       	std	Z+5, r25	; 0x05
   118d4:	84 83       	std	Z+4, r24	; 0x04
   118d6:	8b ec       	ldi	r24, 0xCB	; 203
   118d8:	94 e1       	ldi	r25, 0x14	; 20
   118da:	a0 e0       	ldi	r26, 0x00	; 0
   118dc:	81 83       	std	Z+1, r24	; 0x01
   118de:	92 83       	std	Z+2, r25	; 0x02
   118e0:	a3 83       	std	Z+3, r26	; 0x03
   118e2:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   118e6:	10 c0       	rjmp	.+32     	; 0x11908 <gpib_file_init+0x68>
   118e8:	89 2b       	or	r24, r25
   118ea:	71 f0       	breq	.+28     	; 0x11908 <gpib_file_init+0x68>
   118ec:	88 eb       	ldi	r24, 0xB8	; 184
   118ee:	91 e0       	ldi	r25, 0x01	; 1
   118f0:	ed b7       	in	r30, 0x3d	; 61
   118f2:	fe b7       	in	r31, 0x3e	; 62
   118f4:	95 83       	std	Z+5, r25	; 0x05
   118f6:	84 83       	std	Z+4, r24	; 0x04
   118f8:	8a eb       	ldi	r24, 0xBA	; 186
   118fa:	94 e1       	ldi	r25, 0x14	; 20
   118fc:	a0 e0       	ldi	r26, 0x00	; 0
   118fe:	81 83       	std	Z+1, r24	; 0x01
   11900:	92 83       	std	Z+2, r25	; 0x02
   11902:	a3 83       	std	Z+3, r26	; 0x03
   11904:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   11908:	0e 94 5c 9a 	call	0x134b8	; 0x134b8 <set_Config_Defaults>
   1190c:	0e 94 1c 70 	call	0xe038	; 0xe038 <mmc_wp_status>
   11910:	89 2b       	or	r24, r25
   11912:	51 f0       	breq	.+20     	; 0x11928 <gpib_file_init+0x88>
   11914:	81 ea       	ldi	r24, 0xA1	; 161
   11916:	94 e1       	ldi	r25, 0x14	; 20
   11918:	a0 e0       	ldi	r26, 0x00	; 0
   1191a:	ed b7       	in	r30, 0x3d	; 61
   1191c:	fe b7       	in	r31, 0x3e	; 62
   1191e:	81 83       	std	Z+1, r24	; 0x01
   11920:	92 83       	std	Z+2, r25	; 0x02
   11922:	a3 83       	std	Z+3, r26	; 0x03
   11924:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   11928:	ad b7       	in	r26, 0x3d	; 61
   1192a:	be b7       	in	r27, 0x3e	; 62
   1192c:	17 96       	adiw	r26, 0x07	; 7
   1192e:	0f b6       	in	r0, 0x3f	; 63
   11930:	f8 94       	cli
   11932:	be bf       	out	0x3e, r27	; 62
   11934:	0f be       	out	0x3f, r0	; 63
   11936:	ad bf       	out	0x3d, r26	; 61
   11938:	08 95       	ret

0001193a <SS80_is_MLA>:
   1193a:	40 e2       	ldi	r20, 0x20	; 32
   1193c:	50 e0       	ldi	r21, 0x00	; 0
   1193e:	bc 01       	movw	r22, r24
   11940:	83 e0       	ldi	r24, 0x03	; 3
   11942:	90 e0       	ldi	r25, 0x00	; 0
   11944:	0e 94 94 97 	call	0x12f28	; 0x12f28 <find_device>
   11948:	8f 3f       	cpi	r24, 0xFF	; 255
   1194a:	31 f0       	breq	.+12     	; 0x11958 <SS80_is_MLA+0x1e>
   1194c:	0e 94 bd 97 	call	0x12f7a	; 0x12f7a <set_active_device>
   11950:	08 2e       	mov	r0, r24
   11952:	00 0c       	add	r0, r0
   11954:	99 0b       	sbc	r25, r25
   11956:	08 95       	ret
   11958:	80 e0       	ldi	r24, 0x00	; 0
   1195a:	90 e0       	ldi	r25, 0x00	; 0
   1195c:	08 95       	ret

0001195e <SS80_is_MTA>:
   1195e:	40 e4       	ldi	r20, 0x40	; 64
   11960:	50 e0       	ldi	r21, 0x00	; 0
   11962:	bc 01       	movw	r22, r24
   11964:	83 e0       	ldi	r24, 0x03	; 3
   11966:	90 e0       	ldi	r25, 0x00	; 0
   11968:	0e 94 94 97 	call	0x12f28	; 0x12f28 <find_device>
   1196c:	8f 3f       	cpi	r24, 0xFF	; 255
   1196e:	31 f0       	breq	.+12     	; 0x1197c <SS80_is_MTA+0x1e>
   11970:	0e 94 bd 97 	call	0x12f7a	; 0x12f7a <set_active_device>
   11974:	08 2e       	mov	r0, r24
   11976:	00 0c       	add	r0, r0
   11978:	99 0b       	sbc	r25, r25
   1197a:	08 95       	ret
   1197c:	80 e0       	ldi	r24, 0x00	; 0
   1197e:	90 e0       	ldi	r25, 0x00	; 0
   11980:	08 95       	ret

00011982 <SS80_is_MSA>:
   11982:	40 e6       	ldi	r20, 0x60	; 96
   11984:	50 e0       	ldi	r21, 0x00	; 0
   11986:	bc 01       	movw	r22, r24
   11988:	83 e0       	ldi	r24, 0x03	; 3
   1198a:	90 e0       	ldi	r25, 0x00	; 0
   1198c:	0e 94 94 97 	call	0x12f28	; 0x12f28 <find_device>
   11990:	8f 3f       	cpi	r24, 0xFF	; 255
   11992:	31 f0       	breq	.+12     	; 0x119a0 <SS80_is_MSA+0x1e>
   11994:	0e 94 bd 97 	call	0x12f7a	; 0x12f7a <set_active_device>
   11998:	08 2e       	mov	r0, r24
   1199a:	00 0c       	add	r0, r0
   1199c:	99 0b       	sbc	r25, r25
   1199e:	08 95       	ret
   119a0:	80 e0       	ldi	r24, 0x00	; 0
   119a2:	90 e0       	ldi	r25, 0x00	; 0
   119a4:	08 95       	ret

000119a6 <AMIGO_is_MLA>:
   119a6:	40 e2       	ldi	r20, 0x20	; 32
   119a8:	50 e0       	ldi	r21, 0x00	; 0
   119aa:	bc 01       	movw	r22, r24
   119ac:	81 e0       	ldi	r24, 0x01	; 1
   119ae:	90 e0       	ldi	r25, 0x00	; 0
   119b0:	0e 94 94 97 	call	0x12f28	; 0x12f28 <find_device>
   119b4:	8f 3f       	cpi	r24, 0xFF	; 255
   119b6:	31 f0       	breq	.+12     	; 0x119c4 <AMIGO_is_MLA+0x1e>
   119b8:	0e 94 bd 97 	call	0x12f7a	; 0x12f7a <set_active_device>
   119bc:	08 2e       	mov	r0, r24
   119be:	00 0c       	add	r0, r0
   119c0:	99 0b       	sbc	r25, r25
   119c2:	08 95       	ret
   119c4:	80 e0       	ldi	r24, 0x00	; 0
   119c6:	90 e0       	ldi	r25, 0x00	; 0
   119c8:	08 95       	ret

000119ca <AMIGO_is_MTA>:
   119ca:	40 e4       	ldi	r20, 0x40	; 64
   119cc:	50 e0       	ldi	r21, 0x00	; 0
   119ce:	bc 01       	movw	r22, r24
   119d0:	81 e0       	ldi	r24, 0x01	; 1
   119d2:	90 e0       	ldi	r25, 0x00	; 0
   119d4:	0e 94 94 97 	call	0x12f28	; 0x12f28 <find_device>
   119d8:	8f 3f       	cpi	r24, 0xFF	; 255
   119da:	31 f0       	breq	.+12     	; 0x119e8 <AMIGO_is_MTA+0x1e>
   119dc:	0e 94 bd 97 	call	0x12f7a	; 0x12f7a <set_active_device>
   119e0:	08 2e       	mov	r0, r24
   119e2:	00 0c       	add	r0, r0
   119e4:	99 0b       	sbc	r25, r25
   119e6:	08 95       	ret
   119e8:	80 e0       	ldi	r24, 0x00	; 0
   119ea:	90 e0       	ldi	r25, 0x00	; 0
   119ec:	08 95       	ret

000119ee <AMIGO_is_MSA>:
   119ee:	40 e6       	ldi	r20, 0x60	; 96
   119f0:	50 e0       	ldi	r21, 0x00	; 0
   119f2:	bc 01       	movw	r22, r24
   119f4:	81 e0       	ldi	r24, 0x01	; 1
   119f6:	90 e0       	ldi	r25, 0x00	; 0
   119f8:	0e 94 94 97 	call	0x12f28	; 0x12f28 <find_device>
   119fc:	8f 3f       	cpi	r24, 0xFF	; 255
   119fe:	31 f0       	breq	.+12     	; 0x11a0c <AMIGO_is_MSA+0x1e>
   11a00:	0e 94 bd 97 	call	0x12f7a	; 0x12f7a <set_active_device>
   11a04:	08 2e       	mov	r0, r24
   11a06:	00 0c       	add	r0, r0
   11a08:	99 0b       	sbc	r25, r25
   11a0a:	08 95       	ret
   11a0c:	80 e0       	ldi	r24, 0x00	; 0
   11a0e:	90 e0       	ldi	r25, 0x00	; 0
   11a10:	08 95       	ret

00011a12 <PRINTER_is_MLA>:
   11a12:	40 e2       	ldi	r20, 0x20	; 32
   11a14:	50 e0       	ldi	r21, 0x00	; 0
   11a16:	bc 01       	movw	r22, r24
   11a18:	84 e0       	ldi	r24, 0x04	; 4
   11a1a:	90 e0       	ldi	r25, 0x00	; 0
   11a1c:	0e 94 94 97 	call	0x12f28	; 0x12f28 <find_device>
   11a20:	8f 3f       	cpi	r24, 0xFF	; 255
   11a22:	31 f0       	breq	.+12     	; 0x11a30 <PRINTER_is_MLA+0x1e>
   11a24:	0e 94 bd 97 	call	0x12f7a	; 0x12f7a <set_active_device>
   11a28:	08 2e       	mov	r0, r24
   11a2a:	00 0c       	add	r0, r0
   11a2c:	99 0b       	sbc	r25, r25
   11a2e:	08 95       	ret
   11a30:	80 e0       	ldi	r24, 0x00	; 0
   11a32:	90 e0       	ldi	r25, 0x00	; 0
   11a34:	08 95       	ret

00011a36 <PRINTER_is_MTA>:
   11a36:	40 e4       	ldi	r20, 0x40	; 64
   11a38:	50 e0       	ldi	r21, 0x00	; 0
   11a3a:	bc 01       	movw	r22, r24
   11a3c:	84 e0       	ldi	r24, 0x04	; 4
   11a3e:	90 e0       	ldi	r25, 0x00	; 0
   11a40:	0e 94 94 97 	call	0x12f28	; 0x12f28 <find_device>
   11a44:	8f 3f       	cpi	r24, 0xFF	; 255
   11a46:	31 f0       	breq	.+12     	; 0x11a54 <PRINTER_is_MTA+0x1e>
   11a48:	0e 94 bd 97 	call	0x12f7a	; 0x12f7a <set_active_device>
   11a4c:	08 2e       	mov	r0, r24
   11a4e:	00 0c       	add	r0, r0
   11a50:	99 0b       	sbc	r25, r25
   11a52:	08 95       	ret
   11a54:	80 e0       	ldi	r24, 0x00	; 0
   11a56:	90 e0       	ldi	r25, 0x00	; 0
   11a58:	08 95       	ret

00011a5a <gpib_init_devices>:
///
/// - Used at power up, Bus IFC or user aborts
/// @return  void
void gpib_init_devices(void)
{
    gpib_bus_init();                              // Not busy - we have to free all pins on the BUS
   11a5a:	aa d8       	rcall	.-3756   	; 0x10bb0 <gpib_bus_init>

// Init PPR talking and listening states
// Enable this 14 April 2020 - testing MIke Gore
    gpib_state_init();
   11a5c:	11 d9       	rcall	.-3550   	; 0x10c80 <gpib_state_init>
   11a5e:	0e 94 10 ae 	call	0x15c20	; 0x15c20 <SS80_init>

    SS80_init();                                  // SS80 state init
   11a62:	0e 94 a5 b3 	call	0x1674a	; 0x1674a <amigo_init>

#ifdef AMIGO
    amigo_init();                                 // AMIGO state init
   11a66:	0c 94 d0 be 	jmp	0x17da0	; 0x17da0 <printer_close>
#endif

    printer_close();                              // Close any open fprinter files
   11a6a:	08 95       	ret

00011a6c <gpib_trace_task>:
   11a6c:	0f 93       	push	r16
/// @param name: File name to save log file to.
/// @return  void
///   Exit on Key Press

void gpib_trace_task( char *name , int detail)
{
   11a6e:	1f 93       	push	r17
   11a70:	cf 93       	push	r28
   11a72:	df 93       	push	r29
   11a74:	00 d0       	rcall	.+0      	; 0x11a76 <gpib_trace_task+0xa>
   11a76:	00 d0       	rcall	.+0      	; 0x11a78 <gpib_trace_task+0xc>
   11a78:	1f 92       	push	r1
   11a7a:	eb 01       	movw	r28, r22
    int ch;

    if(name && *name)
   11a7c:	00 97       	sbiw	r24, 0x00	; 0
   11a7e:	09 f4       	brne	.+2      	; 0x11a82 <gpib_trace_task+0x16>
   11a80:	44 c0       	rjmp	.+136    	; 0x11b0a <gpib_trace_task+0x9e>
   11a82:	fc 01       	movw	r30, r24
   11a84:	20 81       	ld	r18, Z
   11a86:	22 23       	and	r18, r18
   11a88:	09 f4       	brne	.+2      	; 0x11a8c <gpib_trace_task+0x20>
   11a8a:	3f c0       	rjmp	.+126    	; 0x11b0a <gpib_trace_task+0x9e>
    {
        name = skipspaces(name);
   11a8c:	0e 94 5b 32 	call	0x64b6	; 0x64b6 <skipspaces>
   11a90:	8c 01       	movw	r16, r24
        printf("Capturing GPIB BUS to:%s\n", name);
   11a92:	ed b7       	in	r30, 0x3d	; 61
   11a94:	fe b7       	in	r31, 0x3e	; 62
   11a96:	95 83       	std	Z+5, r25	; 0x05
   11a98:	84 83       	std	Z+4, r24	; 0x04
   11a9a:	87 e8       	ldi	r24, 0x87	; 135
   11a9c:	94 e1       	ldi	r25, 0x14	; 20
   11a9e:	a0 e0       	ldi	r26, 0x00	; 0
   11aa0:	81 83       	std	Z+1, r24	; 0x01
   11aa2:	92 83       	std	Z+2, r25	; 0x02
   11aa4:	a3 83       	std	Z+3, r26	; 0x03
   11aa6:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
        if(detail)
   11aaa:	20 97       	sbiw	r28, 0x00	; 0
   11aac:	51 f0       	breq	.+20     	; 0x11ac2 <gpib_trace_task+0x56>
            printf("FULL GPIB BUS handshake logging requested\n");
   11aae:	8c e5       	ldi	r24, 0x5C	; 92
   11ab0:	94 e1       	ldi	r25, 0x14	; 20
   11ab2:	a0 e0       	ldi	r26, 0x00	; 0
   11ab4:	ed b7       	in	r30, 0x3d	; 61
   11ab6:	fe b7       	in	r31, 0x3e	; 62
   11ab8:	81 83       	std	Z+1, r24	; 0x01
   11aba:	92 83       	std	Z+2, r25	; 0x02
   11abc:	a3 83       	std	Z+3, r26	; 0x03
   11abe:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
        printf("Press ANY key to exit\n");
   11ac2:	85 e4       	ldi	r24, 0x45	; 69
   11ac4:	94 e1       	ldi	r25, 0x14	; 20
   11ac6:	a0 e0       	ldi	r26, 0x00	; 0
   11ac8:	ed b7       	in	r30, 0x3d	; 61
   11aca:	fe b7       	in	r31, 0x3e	; 62
   11acc:	81 83       	std	Z+1, r24	; 0x01
   11ace:	92 83       	std	Z+2, r25	; 0x02
   11ad0:	a3 83       	std	Z+3, r26	; 0x03
   11ad2:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>

        gpib_log_fp = fopen(name,"wb");
   11ad6:	6c e0       	ldi	r22, 0x0C	; 12
   11ad8:	79 e0       	ldi	r23, 0x09	; 9
   11ada:	c8 01       	movw	r24, r16
   11adc:	0e 94 6b 7e 	call	0xfcd6	; 0xfcd6 <fopen>
   11ae0:	90 93 61 19 	sts	0x1961, r25	; 0x801961 <gpib_log_fp+0x1>
   11ae4:	80 93 60 19 	sts	0x1960, r24	; 0x801960 <gpib_log_fp>
        if(gpib_log_fp == NULL)
   11ae8:	89 2b       	or	r24, r25
   11aea:	b9 f4       	brne	.+46     	; 0x11b1a <gpib_trace_task+0xae>
        {
            perror("open failed");
   11aec:	8a e9       	ldi	r24, 0x9A	; 154
   11aee:	9d e0       	ldi	r25, 0x0D	; 13
   11af0:	0e 94 9c 78 	call	0xf138	; 0xf138 <perror>
            printf("exiting...\n");
   11af4:	89 e3       	ldi	r24, 0x39	; 57
   11af6:	94 e1       	ldi	r25, 0x14	; 20
   11af8:	a0 e0       	ldi	r26, 0x00	; 0
   11afa:	ed b7       	in	r30, 0x3d	; 61
   11afc:	fe b7       	in	r31, 0x3e	; 62
   11afe:	81 83       	std	Z+1, r24	; 0x01
   11b00:	92 83       	std	Z+2, r25	; 0x02
   11b02:	a3 83       	std	Z+3, r26	; 0x03
   11b04:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
            return;
   11b08:	3d c0       	rjmp	.+122    	; 0x11b84 <gpib_trace_task+0x118>
        }
    }
    else
    {
        gpib_log_fp = stdout;
   11b0a:	80 91 c1 1c 	lds	r24, 0x1CC1	; 0x801cc1 <__iob+0x2>
   11b0e:	90 91 c2 1c 	lds	r25, 0x1CC2	; 0x801cc2 <__iob+0x3>
   11b12:	90 93 61 19 	sts	0x1961, r25	; 0x801961 <gpib_log_fp+0x1>
   11b16:	80 93 60 19 	sts	0x1960, r24	; 0x801960 <gpib_log_fp>
    }

    // gpib_state_init();                            // Init PPR talking and listening states
	// gpib_state_init is in gpib_init_devices()
    gpib_init_devices();
   11b1a:	9f df       	rcall	.-194    	; 0x11a5a <gpib_init_devices>

    gpib_decode_header(gpib_log_fp);
   11b1c:	80 91 60 19 	lds	r24, 0x1960	; 0x801960 <gpib_log_fp>
   11b20:	90 91 61 19 	lds	r25, 0x1961	; 0x801961 <gpib_log_fp+0x1>
   11b24:	ca da       	rcall	.-2668   	; 0x110ba <gpib_decode_header>
    while(1)                                      // Main loop, forever
    {
        if(uart_keyhit(0))
   11b26:	80 e0       	ldi	r24, 0x00	; 0
   11b28:	0e 94 91 2a 	call	0x5522	; 0x5522 <uart_keyhit>
   11b2c:	89 2b       	or	r24, r25
            break;

        ch = gpib_read_byte(detail);
   11b2e:	31 f4       	brne	.+12     	; 0x11b3c <gpib_trace_task+0xd0>
   11b30:	ce 01       	movw	r24, r28
        if(!detail)
   11b32:	57 dc       	rcall	.-1874   	; 0x113e2 <gpib_read_byte>
   11b34:	20 97       	sbiw	r28, 0x00	; 0
            gpib_decode(ch);
   11b36:	b9 f7       	brne	.-18     	; 0x11b26 <gpib_trace_task+0xba>
   11b38:	5a dd       	rcall	.-1356   	; 0x115ee <gpib_decode>
   11b3a:	f5 cf       	rjmp	.-22     	; 0x11b26 <gpib_trace_task+0xba>
    }

    printf("Done\n");
   11b3c:	83 e3       	ldi	r24, 0x33	; 51
   11b3e:	94 e1       	ldi	r25, 0x14	; 20
   11b40:	a0 e0       	ldi	r26, 0x00	; 0
   11b42:	ed b7       	in	r30, 0x3d	; 61
   11b44:	fe b7       	in	r31, 0x3e	; 62
   11b46:	81 83       	std	Z+1, r24	; 0x01
   11b48:	92 83       	std	Z+2, r25	; 0x02
   11b4a:	a3 83       	std	Z+3, r26	; 0x03
   11b4c:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    if(gpib_log_fp)
   11b50:	80 91 60 19 	lds	r24, 0x1960	; 0x801960 <gpib_log_fp>
   11b54:	90 91 61 19 	lds	r25, 0x1961	; 0x801961 <gpib_log_fp+0x1>
   11b58:	00 97       	sbiw	r24, 0x00	; 0
   11b5a:	a1 f0       	breq	.+40     	; 0x11b84 <gpib_trace_task+0x118>
    {
        fclose(gpib_log_fp);
   11b5c:	0e 94 15 7d 	call	0xfa2a	; 0xfa2a <fclose>
        printf("Capturing Closed\n");
   11b60:	81 e2       	ldi	r24, 0x21	; 33
   11b62:	94 e1       	ldi	r25, 0x14	; 20
   11b64:	a0 e0       	ldi	r26, 0x00	; 0
   11b66:	ed b7       	in	r30, 0x3d	; 61
   11b68:	fe b7       	in	r31, 0x3e	; 62
   11b6a:	81 83       	std	Z+1, r24	; 0x01
   11b6c:	92 83       	std	Z+2, r25	; 0x02
   11b6e:	a3 83       	std	Z+3, r26	; 0x03
   11b70:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
        gpib_log_fp = stdout;
   11b74:	80 91 c1 1c 	lds	r24, 0x1CC1	; 0x801cc1 <__iob+0x2>
   11b78:	90 91 c2 1c 	lds	r25, 0x1CC2	; 0x801cc2 <__iob+0x3>
   11b7c:	90 93 61 19 	sts	0x1961, r25	; 0x801961 <gpib_log_fp+0x1>
   11b80:	80 93 60 19 	sts	0x1960, r24	; 0x801960 <gpib_log_fp>
    }
}
   11b84:	cd b7       	in	r28, 0x3d	; 61
   11b86:	de b7       	in	r29, 0x3e	; 62
   11b88:	25 96       	adiw	r28, 0x05	; 5
   11b8a:	e4 e0       	ldi	r30, 0x04	; 4
   11b8c:	0c 94 37 e7 	jmp	0x1ce6e	; 0x1ce6e <__epilogue_restores__+0x1c>

00011b90 <gpib_error_test>:
///
/// @return  val
/// @return ABORT flag on user keypress

uint16_t gpib_error_test(uint16_t val)
{
   11b90:	ef 92       	push	r14
   11b92:	ff 92       	push	r15
   11b94:	0f 93       	push	r16
   11b96:	1f 93       	push	r17
   11b98:	cf 93       	push	r28
   11b9a:	df 93       	push	r29
   11b9c:	00 d0       	rcall	.+0      	; 0x11b9e <gpib_error_test+0xe>
   11b9e:	1f 92       	push	r1
   11ba0:	7c 01       	movw	r14, r24

    if(val & ERROR_MASK || uart_keyhit(0) || mmc_ins_status() != 1 )
   11ba2:	ec 01       	movw	r28, r24
   11ba4:	cc 27       	eor	r28, r28
   11ba6:	d0 7d       	andi	r29, 0xD0	; 208
   11ba8:	20 97       	sbiw	r28, 0x00	; 0
   11baa:	61 f0       	breq	.+24     	; 0x11bc4 <gpib_error_test+0x34>
    {
        val &= ERROR_MASK;

///@brief IFC is and important state so display it for most messages
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
   11bac:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11bb0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11bb4:	8d 72       	andi	r24, 0x2D	; 45
   11bb6:	99 27       	eor	r25, r25
   11bb8:	87 01       	movw	r16, r14
   11bba:	00 27       	eor	r16, r16
   11bbc:	10 71       	andi	r17, 0x10	; 16
   11bbe:	89 2b       	or	r24, r25
   11bc0:	59 f4       	brne	.+22     	; 0x11bd8 <gpib_error_test+0x48>
   11bc2:	17 c0       	rjmp	.+46     	; 0x11bf2 <gpib_error_test+0x62>
/// @return ABORT flag on user keypress

uint16_t gpib_error_test(uint16_t val)
{

    if(val & ERROR_MASK || uart_keyhit(0) || mmc_ins_status() != 1 )
   11bc4:	80 e0       	ldi	r24, 0x00	; 0
   11bc6:	0e 94 91 2a 	call	0x5522	; 0x5522 <uart_keyhit>
   11bca:	89 2b       	or	r24, r25
   11bcc:	79 f7       	brne	.-34     	; 0x11bac <gpib_error_test+0x1c>
   11bce:	0e 94 1a 6f 	call	0xde34	; 0xde34 <mmc_ins_status>
   11bd2:	01 97       	sbiw	r24, 0x01	; 1
   11bd4:	59 f7       	brne	.-42     	; 0x11bac <gpib_error_test+0x1c>
   11bd6:	62 c0       	rjmp	.+196    	; 0x11c9c <gpib_error_test+0x10c>

///@brief IFC is and important state so display it for most messages
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
        {
/// Bus Clear, reseat all states, etc
            if(val & IFC_FLAG)
   11bd8:	01 15       	cp	r16, r1
   11bda:	11 05       	cpc	r17, r1
   11bdc:	51 f0       	breq	.+20     	; 0x11bf2 <gpib_error_test+0x62>
                printf("<IFC>\n");
   11bde:	8a e1       	ldi	r24, 0x1A	; 26
   11be0:	94 e1       	ldi	r25, 0x14	; 20
   11be2:	a0 e0       	ldi	r26, 0x00	; 0
   11be4:	ed b7       	in	r30, 0x3d	; 61
   11be6:	fe b7       	in	r31, 0x3e	; 62
   11be8:	81 83       	std	Z+1, r24	; 0x01
   11bea:	92 83       	std	Z+2, r25	; 0x02
   11bec:	a3 83       	std	Z+3, r26	; 0x03
   11bee:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
        }

        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
   11bf2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11bf6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11bfa:	8d 72       	andi	r24, 0x2D	; 45
   11bfc:	99 27       	eor	r25, r25
   11bfe:	89 2b       	or	r24, r25
   11c00:	c1 f0       	breq	.+48     	; 0x11c32 <gpib_error_test+0xa2>
        {
            if(val & TIMEOUT_FLAG)
   11c02:	f6 fe       	sbrs	r15, 6
   11c04:	0a c0       	rjmp	.+20     	; 0x11c1a <gpib_error_test+0x8a>
                printf("<TIMEOUT>\n");
   11c06:	8f e0       	ldi	r24, 0x0F	; 15
   11c08:	94 e1       	ldi	r25, 0x14	; 20
   11c0a:	a0 e0       	ldi	r26, 0x00	; 0
   11c0c:	ed b7       	in	r30, 0x3d	; 61
   11c0e:	fe b7       	in	r31, 0x3e	; 62
   11c10:	81 83       	std	Z+1, r24	; 0x01
   11c12:	92 83       	std	Z+2, r25	; 0x02
   11c14:	a3 83       	std	Z+3, r26	; 0x03
   11c16:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
            if(val & BUS_ERROR_FLAG)
   11c1a:	d7 ff       	sbrs	r29, 7
   11c1c:	0a c0       	rjmp	.+20     	; 0x11c32 <gpib_error_test+0xa2>
                printf("<BUS>\n");
   11c1e:	88 e0       	ldi	r24, 0x08	; 8
   11c20:	94 e1       	ldi	r25, 0x14	; 20
   11c22:	a0 e0       	ldi	r26, 0x00	; 0
   11c24:	ed b7       	in	r30, 0x3d	; 61
   11c26:	fe b7       	in	r31, 0x3e	; 62
   11c28:	81 83       	std	Z+1, r24	; 0x01
   11c2a:	92 83       	std	Z+2, r25	; 0x02
   11c2c:	a3 83       	std	Z+3, r26	; 0x03
   11c2e:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
        }

        if(uart_keyhit(0))
   11c32:	80 e0       	ldi	r24, 0x00	; 0
   11c34:	0e 94 91 2a 	call	0x5522	; 0x5522 <uart_keyhit>
   11c38:	89 2b       	or	r24, r25
   11c3a:	51 f0       	breq	.+20     	; 0x11c50 <gpib_error_test+0xc0>
            printf("<INTERRUPT>\n");
   11c3c:	8b ef       	ldi	r24, 0xFB	; 251
   11c3e:	93 e1       	ldi	r25, 0x13	; 19
   11c40:	a0 e0       	ldi	r26, 0x00	; 0
   11c42:	ed b7       	in	r30, 0x3d	; 61
   11c44:	fe b7       	in	r31, 0x3e	; 62
   11c46:	81 83       	std	Z+1, r24	; 0x01
   11c48:	92 83       	std	Z+2, r25	; 0x02
   11c4a:	a3 83       	std	Z+3, r26	; 0x03
   11c4c:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>

        if( mmc_ins_status() != 1 )
   11c50:	0e 94 1a 6f 	call	0xde34	; 0xde34 <mmc_ins_status>
   11c54:	01 97       	sbiw	r24, 0x01	; 1
   11c56:	51 f0       	breq	.+20     	; 0x11c6c <gpib_error_test+0xdc>
            printf("<MEDIA MISSING>\n");
   11c58:	8a ee       	ldi	r24, 0xEA	; 234
   11c5a:	93 e1       	ldi	r25, 0x13	; 19
   11c5c:	a0 e0       	ldi	r26, 0x00	; 0
   11c5e:	ed b7       	in	r30, 0x3d	; 61
   11c60:	fe b7       	in	r31, 0x3e	; 62
   11c62:	81 83       	std	Z+1, r24	; 0x01
   11c64:	92 83       	std	Z+2, r25	; 0x02
   11c66:	a3 83       	std	Z+3, r26	; 0x03
   11c68:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>

        if(val & IFC_FLAG)
   11c6c:	01 15       	cp	r16, r1
   11c6e:	11 05       	cpc	r17, r1
   11c70:	09 f0       	breq	.+2      	; 0x11c74 <gpib_error_test+0xe4>
        {
            gpib_init_devices();
   11c72:	f3 de       	rcall	.-538    	; 0x11a5a <gpib_init_devices>
        }

        if(uart_keyhit(0))
   11c74:	80 e0       	ldi	r24, 0x00	; 0
   11c76:	0e 94 91 2a 	call	0x5522	; 0x5522 <uart_keyhit>
   11c7a:	89 2b       	or	r24, r25
        {
            gpib_init_devices();
   11c7c:	11 f0       	breq	.+4      	; 0x11c82 <gpib_error_test+0xf2>
   11c7e:	ed de       	rcall	.-550    	; 0x11a5a <gpib_init_devices>
   11c80:	0b c0       	rjmp	.+22     	; 0x11c98 <gpib_error_test+0x108>
            return(ABORT_FLAG);
        }

/// @todo  do we want to always exit here ?
///  low level GPIB functions are still useful even without a DISK
        if( mmc_ins_status() != 1 )
   11c82:	0e 94 1a 6f 	call	0xde34	; 0xde34 <mmc_ins_status>
   11c86:	01 97       	sbiw	r24, 0x01	; 1
   11c88:	39 f4       	brne	.+14     	; 0x11c98 <gpib_error_test+0x108>
        {
            return(ABORT_FLAG);
        }

// Wait for IFC free
        if(val & IFC_FLAG )
   11c8a:	01 15       	cp	r16, r1
   11c8c:	11 05       	cpc	r17, r1
   11c8e:	31 f0       	breq	.+12     	; 0x11c9c <gpib_error_test+0x10c>
        {
            while(GPIB_IO_RD(IFC) == 0)
   11c90:	54 98       	cbi	0x0a, 4	; 10
   11c92:	4c 9b       	sbis	0x09, 4	; 9
   11c94:	fd cf       	rjmp	.-6      	; 0x11c90 <gpib_error_test+0x100>
   11c96:	02 c0       	rjmp	.+4      	; 0x11c9c <gpib_error_test+0x10c>

/// @todo  do we want to always exit here ?
///  low level GPIB functions are still useful even without a DISK
        if( mmc_ins_status() != 1 )
        {
            return(ABORT_FLAG);
   11c98:	c1 e0       	ldi	r28, 0x01	; 1
   11c9a:	d0 e0       	ldi	r29, 0x00	; 0
                ;
        }
        return(val);
    }
    return(0);
}
   11c9c:	ce 01       	movw	r24, r28
   11c9e:	cd b7       	in	r28, 0x3d	; 61
   11ca0:	de b7       	in	r29, 0x3e	; 62
   11ca2:	23 96       	adiw	r28, 0x03	; 3
   11ca4:	e6 e0       	ldi	r30, 0x06	; 6
   11ca6:	0c 94 35 e7 	jmp	0x1ce6a	; 0x1ce6a <__epilogue_restores__+0x18>

00011caa <GPIB_COMMANDS>:
///
/// @return GPIB status from emulator command.
/// @return 0 if no emulator command processed.

uint16_t GPIB_COMMANDS(uint16_t val, uint8_t unread)
{
   11caa:	1f 93       	push	r17
   11cac:	cf 93       	push	r28
   11cae:	df 93       	push	r29
   11cb0:	ec 01       	movw	r28, r24
   11cb2:	16 2f       	mov	r17, r22
    uint16_t status;

///@brief talking ?
    if(talking != UNT)
   11cb4:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   11cb8:	8f 35       	cpi	r24, 0x5F	; 95
   11cba:	91 f0       	breq	.+36     	; 0x11ce0 <GPIB_COMMANDS+0x36>
    {

#ifdef AMIGO
        if ( AMIGO_is_MLA(listening) )
   11cbc:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   11cc0:	90 e0       	ldi	r25, 0x00	; 0
   11cc2:	71 de       	rcall	.-798    	; 0x119a6 <AMIGO_is_MLA>
   11cc4:	89 2b       	or	r24, r25
   11cc6:	c9 f4       	brne	.+50     	; 0x11cfa <GPIB_COMMANDS+0x50>
            secondary = 0;
            return(status);
        }
#endif                                    // ifdef AMIGO

        if ( SS80_is_MLA(listening) )
   11cc8:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   11ccc:	90 e0       	ldi	r25, 0x00	; 0
   11cce:	35 de       	rcall	.-918    	; 0x1193a <SS80_is_MLA>
   11cd0:	89 2b       	or	r24, r25
   11cd2:	11 f5       	brne	.+68     	; 0x11d18 <GPIB_COMMANDS+0x6e>
            status = SS80_COMMANDS(secondary);
            secondary = 0;
            return(status);
        }

        if ( PRINTER_is_MLA(listening) )
   11cd4:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   11cd8:	90 e0       	ldi	r25, 0x00	; 0
   11cda:	9b de       	rcall	.-714    	; 0x11a12 <PRINTER_is_MLA>
   11cdc:	89 2b       	or	r24, r25
   11cde:	59 f5       	brne	.+86     	; 0x11d36 <GPIB_COMMANDS+0x8c>
            return(status);
        }
    }

///@brief listening ?
    if(listening != UNL)
   11ce0:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   11ce4:	8f 33       	cpi	r24, 0x3F	; 63
   11ce6:	19 f4       	brne	.+6      	; 0x11cee <GPIB_COMMANDS+0x44>
            status = PRINTER_COMMANDS(secondary);
            secondary = 0;
            return(status);
        }
    }
    return(0);
   11ce8:	80 e0       	ldi	r24, 0x00	; 0
   11cea:	90 e0       	ldi	r25, 0x00	; 0
   11cec:	2e c0       	rjmp	.+92     	; 0x11d4a <GPIB_COMMANDS+0xa0>

///@brief listening ?
    if(listening != UNL)
    {
#ifdef AMIGO
        if ( AMIGO_is_MTA(talking) )
   11cee:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   11cf2:	90 e0       	ldi	r25, 0x00	; 0
   11cf4:	6a de       	rcall	.-812    	; 0x119ca <AMIGO_is_MTA>
   11cf6:	89 2b       	or	r24, r25
   11cf8:	49 f0       	breq	.+18     	; 0x11d0c <GPIB_COMMANDS+0x62>
        {
            if(unread)
   11cfa:	11 23       	and	r17, r17
   11cfc:	11 f0       	breq	.+4      	; 0x11d02 <GPIB_COMMANDS+0x58>
                gpib_unread(val);
   11cfe:	ce 01       	movw	r24, r28
   11d00:	58 d8       	rcall	.-3920   	; 0x10db2 <gpib_unread>
   11d02:	80 91 ef 1e 	lds	r24, 0x1EEF	; 0x801eef <secondary>
            status = AMIGO_COMMANDS(secondary);
   11d06:	0e 94 cb bd 	call	0x17b96	; 0x17b96 <AMIGO_COMMANDS>
   11d0a:	1d c0       	rjmp	.+58     	; 0x11d46 <GPIB_COMMANDS+0x9c>
            secondary = 0;
            return(status);
        }
#endif

        if ( SS80_is_MTA(talking) )
   11d0c:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   11d10:	90 e0       	ldi	r25, 0x00	; 0
   11d12:	25 de       	rcall	.-950    	; 0x1195e <SS80_is_MTA>
   11d14:	89 2b       	or	r24, r25
   11d16:	49 f0       	breq	.+18     	; 0x11d2a <GPIB_COMMANDS+0x80>
        {
            if(unread)
   11d18:	11 23       	and	r17, r17
   11d1a:	11 f0       	breq	.+4      	; 0x11d20 <GPIB_COMMANDS+0x76>
                gpib_unread(val);
   11d1c:	ce 01       	movw	r24, r28
   11d1e:	49 d8       	rcall	.-3950   	; 0x10db2 <gpib_unread>
   11d20:	80 91 ef 1e 	lds	r24, 0x1EEF	; 0x801eef <secondary>
            status = SS80_COMMANDS(secondary);
   11d24:	0e 94 f1 b1 	call	0x163e2	; 0x163e2 <SS80_COMMANDS>
   11d28:	0e c0       	rjmp	.+28     	; 0x11d46 <GPIB_COMMANDS+0x9c>
            secondary = 0;
            return(status);
        }

        if ( PRINTER_is_MTA(talking) )
   11d2a:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   11d2e:	90 e0       	ldi	r25, 0x00	; 0
   11d30:	82 de       	rcall	.-764    	; 0x11a36 <PRINTER_is_MTA>
   11d32:	89 2b       	or	r24, r25
   11d34:	c9 f2       	breq	.-78     	; 0x11ce8 <GPIB_COMMANDS+0x3e>
        {
            if(unread)
   11d36:	11 23       	and	r17, r17
   11d38:	11 f0       	breq	.+4      	; 0x11d3e <GPIB_COMMANDS+0x94>
                gpib_unread(val);
   11d3a:	ce 01       	movw	r24, r28
   11d3c:	3a d8       	rcall	.-3980   	; 0x10db2 <gpib_unread>
   11d3e:	80 91 ef 1e 	lds	r24, 0x1EEF	; 0x801eef <secondary>
            status = PRINTER_COMMANDS(secondary);
   11d42:	0e 94 44 c0 	call	0x18088	; 0x18088 <PRINTER_COMMANDS>
   11d46:	10 92 ef 1e 	sts	0x1EEF, r1	; 0x801eef <secondary>
            secondary = 0;
   11d4a:	df 91       	pop	r29
            return(status);
        }
    }
    return(0);
}
   11d4c:	cf 91       	pop	r28
   11d4e:	1f 91       	pop	r17
   11d50:	08 95       	ret

00011d52 <Send_Identify>:
   11d52:	cf 92       	push	r12
///
/// @return  0 on GPIB error returns error flags
/// @see gpib.h ERROR_MASK for a full list.

int Send_Identify(uint8_t ch, uint16_t ID)
{
   11d54:	df 92       	push	r13
   11d56:	ff 92       	push	r15
   11d58:	0f 93       	push	r16
   11d5a:	1f 93       	push	r17
   11d5c:	cf 93       	push	r28
   11d5e:	df 93       	push	r29
   11d60:	cd b7       	in	r28, 0x3d	; 61
   11d62:	de b7       	in	r29, 0x3e	; 62
   11d64:	2b 97       	sbiw	r28, 0x0b	; 11
   11d66:	0f b6       	in	r0, 0x3f	; 63
   11d68:	f8 94       	cli
   11d6a:	de bf       	out	0x3e, r29	; 62
   11d6c:	0f be       	out	0x3f, r0	; 63
   11d6e:	cd bf       	out	0x3d, r28	; 61
   11d70:	f8 2e       	mov	r15, r24
   11d72:	6b 01       	movw	r12, r22
    uint16_t status = EOI_FLAG;
   11d74:	80 e0       	ldi	r24, 0x00	; 0
   11d76:	91 e0       	ldi	r25, 0x01	; 1
   11d78:	9b 87       	std	Y+11, r25	; 0x0b
   11d7a:	8a 87       	std	Y+10, r24	; 0x0a
    uint8_t tmp[2];

    V2B_MSB(tmp,0,2,ID);
   11d7c:	8b 01       	movw	r16, r22
   11d7e:	20 e0       	ldi	r18, 0x00	; 0
   11d80:	30 e0       	ldi	r19, 0x00	; 0
   11d82:	42 e0       	ldi	r20, 0x02	; 2
   11d84:	50 e0       	ldi	r21, 0x00	; 0
   11d86:	60 e0       	ldi	r22, 0x00	; 0
   11d88:	70 e0       	ldi	r23, 0x00	; 0
   11d8a:	ce 01       	movw	r24, r28
   11d8c:	08 96       	adiw	r24, 0x08	; 8
   11d8e:	0e 94 7f c0 	call	0x180fe	; 0x180fe <V2B_MSB>
    if(gpib_write_str(tmp,2, &status) != 2)
   11d92:	ae 01       	movw	r20, r28
   11d94:	46 5f       	subi	r20, 0xF6	; 246
   11d96:	5f 4f       	sbci	r21, 0xFF	; 255
   11d98:	62 e0       	ldi	r22, 0x02	; 2
   11d9a:	70 e0       	ldi	r23, 0x00	; 0
   11d9c:	ce 01       	movw	r24, r28
   11d9e:	08 96       	adiw	r24, 0x08	; 8
   11da0:	cc dc       	rcall	.-1640   	; 0x1173a <gpib_write_str>
   11da2:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11da6:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11daa:	02 97       	sbiw	r24, 0x02	; 2
   11dac:	79 f0       	breq	.+30     	; 0x11dcc <Send_Identify+0x7a>
    {
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11dae:	25 72       	andi	r18, 0x25	; 37
   11db0:	33 27       	eor	r19, r19
   11db2:	23 2b       	or	r18, r19
   11db4:	f9 f0       	breq	.+62     	; 0x11df4 <Send_Identify+0xa2>
            printf("[IDENT Unit:%02XH=%04XH FAILED]\n",
   11db6:	ed b7       	in	r30, 0x3d	; 61
   11db8:	fe b7       	in	r31, 0x3e	; 62
   11dba:	d7 82       	std	Z+7, r13	; 0x07
   11dbc:	c6 82       	std	Z+6, r12	; 0x06
   11dbe:	8f 2d       	mov	r24, r15
   11dc0:	90 e0       	ldi	r25, 0x00	; 0
   11dc2:	95 83       	std	Z+5, r25	; 0x05
   11dc4:	84 83       	std	Z+4, r24	; 0x04
   11dc6:	89 ec       	ldi	r24, 0xC9	; 201
   11dc8:	93 e1       	ldi	r25, 0x13	; 19
   11dca:	0e c0       	rjmp	.+28     	; 0x11de8 <Send_Identify+0x96>
                (int)ch,(int)ID);
        return(status & ERROR_MASK);
    }
#if SDEBUG
    if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11dcc:	24 72       	andi	r18, 0x24	; 36
   11dce:	33 27       	eor	r19, r19
   11dd0:	23 2b       	or	r18, r19
   11dd2:	81 f0       	breq	.+32     	; 0x11df4 <Send_Identify+0xa2>
        printf("[IDENT Unit:%02XH=%04XH]\n", (int)ch,(int)ID);
   11dd4:	ed b7       	in	r30, 0x3d	; 61
   11dd6:	fe b7       	in	r31, 0x3e	; 62
   11dd8:	d7 82       	std	Z+7, r13	; 0x07
   11dda:	c6 82       	std	Z+6, r12	; 0x06
   11ddc:	8f 2d       	mov	r24, r15
   11dde:	90 e0       	ldi	r25, 0x00	; 0
   11de0:	95 83       	std	Z+5, r25	; 0x05
   11de2:	84 83       	std	Z+4, r24	; 0x04
   11de4:	8f ea       	ldi	r24, 0xAF	; 175
   11de6:	93 e1       	ldi	r25, 0x13	; 19
   11de8:	a0 e0       	ldi	r26, 0x00	; 0
   11dea:	81 83       	std	Z+1, r24	; 0x01
   11dec:	92 83       	std	Z+2, r25	; 0x02
   11dee:	a3 83       	std	Z+3, r26	; 0x03
   11df0:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
#endif
    return (status & ERROR_MASK);
   11df4:	8a 85       	ldd	r24, Y+10	; 0x0a
   11df6:	9b 85       	ldd	r25, Y+11	; 0x0b
   11df8:	88 27       	eor	r24, r24
   11dfa:	90 7d       	andi	r25, 0xD0	; 208
}
   11dfc:	2b 96       	adiw	r28, 0x0b	; 11
   11dfe:	0f b6       	in	r0, 0x3f	; 63
   11e00:	f8 94       	cli
   11e02:	de bf       	out	0x3e, r29	; 62
   11e04:	0f be       	out	0x3f, r0	; 63
   11e06:	cd bf       	out	0x3d, r28	; 61
   11e08:	df 91       	pop	r29
   11e0a:	cf 91       	pop	r28
   11e0c:	1f 91       	pop	r17
   11e0e:	0f 91       	pop	r16
   11e10:	ff 90       	pop	r15
   11e12:	df 90       	pop	r13
   11e14:	cf 90       	pop	r12
   11e16:	08 95       	ret

00011e18 <GPIB>:
/// @return  0 on sucess
/// @return GPIB error flags on fail
/// @see gpib.h ERROR_MASK defines for a full list.

int GPIB(uint8_t ch)
{
   11e18:	00 d0       	rcall	.+0      	; 0x11e1a <GPIB+0x2>
   11e1a:	00 d0       	rcall	.+0      	; 0x11e1c <GPIB+0x4>
   11e1c:	1f 92       	push	r1
   11e1e:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11e22:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
///@brief Parallel Poll Configure
///TODO
    if(ch == PPC)
   11e26:	85 30       	cpi	r24, 0x05	; 5
   11e28:	89 f4       	brne	.+34     	; 0x11e4c <GPIB+0x34>
    {
        if(debuglevel & (GPIB_ERR + GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   11e2a:	27 71       	andi	r18, 0x17	; 23
   11e2c:	33 27       	eor	r19, r19
   11e2e:	23 2b       	or	r18, r19
   11e30:	51 f0       	breq	.+20     	; 0x11e46 <GPIB+0x2e>
            printf("[PPC unsupported TODO]\n");
   11e32:	87 e9       	ldi	r24, 0x97	; 151
   11e34:	93 e1       	ldi	r25, 0x13	; 19
   11e36:	a0 e0       	ldi	r26, 0x00	; 0
   11e38:	ed b7       	in	r30, 0x3d	; 61
   11e3a:	fe b7       	in	r31, 0x3e	; 62
   11e3c:	81 83       	std	Z+1, r24	; 0x01
   11e3e:	92 83       	std	Z+2, r25	; 0x02
   11e40:	a3 83       	std	Z+3, r26	; 0x03
   11e42:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
        spoll = 0;
   11e46:	10 92 eb 1e 	sts	0x1EEB, r1	; 0x801eeb <spoll>
   11e4a:	a0 c0       	rjmp	.+320    	; 0x11f8c <GPIB+0x174>
        return 0;
    }
///@brief Parallel Poll Unconfigure
///TODO
    if(ch == PPU)
   11e4c:	85 31       	cpi	r24, 0x15	; 21
   11e4e:	39 f4       	brne	.+14     	; 0x11e5e <GPIB+0x46>
    {
        if(debuglevel & (GPIB_ERR + GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   11e50:	27 71       	andi	r18, 0x17	; 23
   11e52:	33 27       	eor	r19, r19
   11e54:	23 2b       	or	r18, r19
   11e56:	b9 f3       	breq	.-18     	; 0x11e46 <GPIB+0x2e>
            printf("[PPU unsupported TODO]\n");
   11e58:	8f e7       	ldi	r24, 0x7F	; 127
   11e5a:	93 e1       	ldi	r25, 0x13	; 19
   11e5c:	ec cf       	rjmp	.-40     	; 0x11e36 <GPIB+0x1e>
    }

/// @todo FIXME
#if defined(SPOLL)
///@brief Serial Poll Enable
    if(ch == SPE)
   11e5e:	88 31       	cpi	r24, 0x18	; 24
   11e60:	d9 f4       	brne	.+54     	; 0x11e98 <GPIB+0x80>
    {
#if SDEBUG
        if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   11e62:	26 70       	andi	r18, 0x06	; 6
   11e64:	33 27       	eor	r19, r19
   11e66:	23 2b       	or	r18, r19
   11e68:	51 f0       	breq	.+20     	; 0x11e7e <GPIB+0x66>
            printf("[SPE]\n");
   11e6a:	88 e7       	ldi	r24, 0x78	; 120
   11e6c:	93 e1       	ldi	r25, 0x13	; 19
   11e6e:	a0 e0       	ldi	r26, 0x00	; 0
   11e70:	ed b7       	in	r30, 0x3d	; 61
   11e72:	fe b7       	in	r31, 0x3e	; 62
   11e74:	81 83       	std	Z+1, r24	; 0x01
   11e76:	92 83       	std	Z+2, r25	; 0x02
   11e78:	a3 83       	std	Z+3, r26	; 0x03
   11e7a:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
#endif
        spoll = 1;
   11e7e:	81 e0       	ldi	r24, 0x01	; 1
   11e80:	80 93 eb 1e 	sts	0x1EEB, r24	; 0x801eeb <spoll>
        if(SS80_is_MTA(talking))
   11e84:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   11e88:	90 e0       	ldi	r25, 0x00	; 0
   11e8a:	69 dd       	rcall	.-1326   	; 0x1195e <SS80_is_MTA>
   11e8c:	89 2b       	or	r24, r25
   11e8e:	09 f4       	brne	.+2      	; 0x11e92 <GPIB+0x7a>
   11e90:	7d c0       	rjmp	.+250    	; 0x11f8c <GPIB+0x174>
        {
            return( SS80_Report() );
   11e92:	0e 94 a4 ad 	call	0x15b48	; 0x15b48 <SS80_Report>
   11e96:	7c c0       	rjmp	.+248    	; 0x11f90 <GPIB+0x178>
        }
        return 0;
    }

///@brief Serial Poll Disable
    if(ch == SPD)
   11e98:	89 31       	cpi	r24, 0x19	; 25
   11e9a:	39 f4       	brne	.+14     	; 0x11eaa <GPIB+0x92>
    {
#if SDEBUG
        if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   11e9c:	26 70       	andi	r18, 0x06	; 6
   11e9e:	33 27       	eor	r19, r19
   11ea0:	23 2b       	or	r18, r19
   11ea2:	89 f2       	breq	.-94     	; 0x11e46 <GPIB+0x2e>
            printf("[SPD]\n");
   11ea4:	81 e7       	ldi	r24, 0x71	; 113
   11ea6:	93 e1       	ldi	r25, 0x13	; 19
   11ea8:	c6 cf       	rjmp	.-116    	; 0x11e36 <GPIB+0x1e>
        return 0;
    }
#endif                                        // #if defined(SPOLL)

///@brief Selected Device Clear
    if(ch == SDC )
   11eaa:	84 30       	cpi	r24, 0x04	; 4
   11eac:	09 f0       	breq	.+2      	; 0x11eb0 <GPIB+0x98>
   11eae:	48 c0       	rjmp	.+144    	; 0x11f40 <GPIB+0x128>
    {
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11eb0:	22 ff       	sbrs	r18, 2
   11eb2:	0a c0       	rjmp	.+20     	; 0x11ec8 <GPIB+0xb0>
            printf("[SDC]\n");
   11eb4:	8a e6       	ldi	r24, 0x6A	; 106
   11eb6:	93 e1       	ldi	r25, 0x13	; 19
   11eb8:	a0 e0       	ldi	r26, 0x00	; 0
   11eba:	ed b7       	in	r30, 0x3d	; 61
   11ebc:	fe b7       	in	r31, 0x3e	; 62
   11ebe:	81 83       	std	Z+1, r24	; 0x01
   11ec0:	92 83       	std	Z+2, r25	; 0x02
   11ec2:	a3 83       	std	Z+3, r26	; 0x03
   11ec4:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
#endif
        if(SS80_is_MLA(listening))
   11ec8:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   11ecc:	90 e0       	ldi	r25, 0x00	; 0
   11ece:	35 dd       	rcall	.-1430   	; 0x1193a <SS80_is_MLA>
   11ed0:	89 2b       	or	r24, r25
   11ed2:	d9 f0       	breq	.+54     	; 0x11f0a <GPIB+0xf2>
        {
///  Note: Suposed to be unsupported in SS80 - pg 4-2
///  CS80 3-4
#if SDEBUG
            if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11ed4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11ed8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11edc:	84 72       	andi	r24, 0x24	; 36
   11ede:	99 27       	eor	r25, r25
   11ee0:	89 2b       	or	r24, r25
   11ee2:	51 f0       	breq	.+20     	; 0x11ef8 <GPIB+0xe0>
                printf("[SDC SS80]\n");
   11ee4:	8e e5       	ldi	r24, 0x5E	; 94
   11ee6:	93 e1       	ldi	r25, 0x13	; 19
   11ee8:	a0 e0       	ldi	r26, 0x00	; 0
   11eea:	ed b7       	in	r30, 0x3d	; 61
   11eec:	fe b7       	in	r31, 0x3e	; 62
   11eee:	81 83       	std	Z+1, r24	; 0x01
   11ef0:	92 83       	std	Z+2, r25	; 0x02
   11ef2:	a3 83       	std	Z+3, r26	; 0x03
   11ef4:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
#endif
            return(SS80_Selected_Device_Clear(SS80s->unitNO) );
   11ef8:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   11efc:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   11f00:	85 81       	ldd	r24, Z+5	; 0x05
   11f02:	90 e0       	ldi	r25, 0x00	; 0
   11f04:	0e 94 76 ae 	call	0x15cec	; 0x15cec <SS80_Selected_Device_Clear>
   11f08:	43 c0       	rjmp	.+134    	; 0x11f90 <GPIB+0x178>
        }

#ifdef AMIGO
        if(AMIGO_is_MLA(listening))
   11f0a:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   11f0e:	90 e0       	ldi	r25, 0x00	; 0
   11f10:	4a dd       	rcall	.-1388   	; 0x119a6 <AMIGO_is_MLA>
   11f12:	89 2b       	or	r24, r25
   11f14:	d9 f1       	breq	.+118    	; 0x11f8c <GPIB+0x174>
        {
///  Note: Suposed to be unsupported in SS80 - pg 4-2
#if SDEBUG
            if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11f16:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11f1a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11f1e:	84 72       	andi	r24, 0x24	; 36
   11f20:	99 27       	eor	r25, r25
   11f22:	89 2b       	or	r24, r25
   11f24:	51 f0       	breq	.+20     	; 0x11f3a <GPIB+0x122>
                printf("[SDC AMIGO]\n");
   11f26:	81 e5       	ldi	r24, 0x51	; 81
   11f28:	93 e1       	ldi	r25, 0x13	; 19
   11f2a:	a0 e0       	ldi	r26, 0x00	; 0
   11f2c:	ed b7       	in	r30, 0x3d	; 61
   11f2e:	fe b7       	in	r31, 0x3e	; 62
   11f30:	81 83       	std	Z+1, r24	; 0x01
   11f32:	92 83       	std	Z+2, r25	; 0x02
   11f34:	a3 83       	std	Z+3, r26	; 0x03
   11f36:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
#endif
            return( amigo_cmd_clear() );
   11f3a:	0e 94 b1 b8 	call	0x17162	; 0x17162 <amigo_cmd_clear>
   11f3e:	28 c0       	rjmp	.+80     	; 0x11f90 <GPIB+0x178>
/// @todo FIXME
        return( 0 );
    }

///@brief   (Universal) Device Clear
    if(ch == DCL )
   11f40:	84 31       	cpi	r24, 0x14	; 20
   11f42:	99 f4       	brne	.+38     	; 0x11f6a <GPIB+0x152>
    {
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11f44:	22 ff       	sbrs	r18, 2
   11f46:	0a c0       	rjmp	.+20     	; 0x11f5c <GPIB+0x144>
            printf("[DCL]\n");
   11f48:	8a e4       	ldi	r24, 0x4A	; 74
   11f4a:	93 e1       	ldi	r25, 0x13	; 19
   11f4c:	a0 e0       	ldi	r26, 0x00	; 0
   11f4e:	ed b7       	in	r30, 0x3d	; 61
   11f50:	fe b7       	in	r31, 0x3e	; 62
   11f52:	81 83       	std	Z+1, r24	; 0x01
   11f54:	92 83       	std	Z+2, r25	; 0x02
   11f56:	a3 83       	std	Z+3, r26	; 0x03
   11f58:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
#endif
        SS80_Universal_Device_Clear();
   11f5c:	0e 94 68 ae 	call	0x15cd0	; 0x15cd0 <SS80_Universal_Device_Clear>

#ifdef AMIGO
        amigo_cmd_clear();
   11f60:	0e 94 b1 b8 	call	0x17162	; 0x17162 <amigo_cmd_clear>
#endif

/// @todo Fixme
        printer_close();
   11f64:	0e 94 d0 be 	call	0x17da0	; 0x17da0 <printer_close>
   11f68:	11 c0       	rjmp	.+34     	; 0x11f8c <GPIB+0x174>
        return( 0 );
    }

    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   11f6a:	25 71       	andi	r18, 0x15	; 21
   11f6c:	33 27       	eor	r19, r19
   11f6e:	23 2b       	or	r18, r19
   11f70:	69 f0       	breq	.+26     	; 0x11f8c <GPIB+0x174>
        printf("[GPIB (%02XH) not defined TODO]\n", 0xff & ch);
   11f72:	90 e0       	ldi	r25, 0x00	; 0
   11f74:	ed b7       	in	r30, 0x3d	; 61
   11f76:	fe b7       	in	r31, 0x3e	; 62
   11f78:	95 83       	std	Z+5, r25	; 0x05
   11f7a:	84 83       	std	Z+4, r24	; 0x04
   11f7c:	89 e2       	ldi	r24, 0x29	; 41
   11f7e:	93 e1       	ldi	r25, 0x13	; 19
   11f80:	a0 e0       	ldi	r26, 0x00	; 0
   11f82:	81 83       	std	Z+1, r24	; 0x01
   11f84:	92 83       	std	Z+2, r25	; 0x02
   11f86:	a3 83       	std	Z+3, r26	; 0x03
   11f88:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    return(0);
   11f8c:	80 e0       	ldi	r24, 0x00	; 0
   11f8e:	90 e0       	ldi	r25, 0x00	; 0
}
   11f90:	0f 90       	pop	r0
   11f92:	0f 90       	pop	r0
   11f94:	0f 90       	pop	r0
   11f96:	0f 90       	pop	r0
   11f98:	0f 90       	pop	r0
   11f9a:	08 95       	ret

00011f9c <GPIB_TALK>:
/// @param[in] ch 8 bit talk command
///
/// @return  0

int GPIB_TALK(uint8_t ch)
{
   11f9c:	cf 93       	push	r28
   11f9e:	df 93       	push	r29
   11fa0:	00 d0       	rcall	.+0      	; 0x11fa2 <GPIB_TALK+0x6>
   11fa2:	00 d0       	rcall	.+0      	; 0x11fa4 <GPIB_TALK+0x8>
   11fa4:	1f 92       	push	r1

///  NOTE: we must track the "addressed state" of each device
///  so we can determine its state - ie: command vs Secondary states
///  save talking state
    talking_last = talking;
   11fa6:	90 91 ee 1e 	lds	r25, 0x1EEE	; 0x801eee <talking>
   11faa:	90 93 f1 1e 	sts	0x1EF1, r25	; 0x801ef1 <talking_last>
    talking = ch;
   11fae:	80 93 ee 1e 	sts	0x1EEE, r24	; 0x801eee <talking>

    talk_cleanup();

///@brief  Universal Untalk
    if(ch == UNT)
   11fb2:	8f 35       	cpi	r24, 0x5F	; 95
   11fb4:	79 f4       	brne	.+30     	; 0x11fd4 <GPIB_TALK+0x38>
    {
//FIXME talking = 0 ????
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11fb6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11fba:	82 ff       	sbrs	r24, 2
   11fbc:	7f c0       	rjmp	.+254    	; 0x120bc <GPIB_TALK+0x120>
            printf("[UNT]\n");
   11fbe:	86 ed       	ldi	r24, 0xD6	; 214
   11fc0:	92 e1       	ldi	r25, 0x12	; 18
   11fc2:	a0 e0       	ldi	r26, 0x00	; 0
   11fc4:	ed b7       	in	r30, 0x3d	; 61
   11fc6:	fe b7       	in	r31, 0x3e	; 62
   11fc8:	81 83       	std	Z+1, r24	; 0x01
   11fca:	92 83       	std	Z+2, r25	; 0x02
   11fcc:	a3 83       	std	Z+3, r26	; 0x03
   11fce:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   11fd2:	74 c0       	rjmp	.+232    	; 0x120bc <GPIB_TALK+0x120>
#endif
        return(0);
    }

    if(SS80_is_MTA(ch))
   11fd4:	c8 2f       	mov	r28, r24
   11fd6:	d0 e0       	ldi	r29, 0x00	; 0
   11fd8:	ce 01       	movw	r24, r28
   11fda:	c1 dc       	rcall	.-1662   	; 0x1195e <SS80_is_MTA>
   11fdc:	89 2b       	or	r24, r25
   11fde:	e1 f0       	breq	.+56     	; 0x12018 <GPIB_TALK+0x7c>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11fe0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11fe4:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11fe8:	84 72       	andi	r24, 0x24	; 36
   11fea:	99 27       	eor	r25, r25
   11fec:	89 2b       	or	r24, r25
   11fee:	61 f0       	breq	.+24     	; 0x12008 <GPIB_TALK+0x6c>
            printf("[TA %02XH SS80]\n", 0xff & ch);
   11ff0:	ed b7       	in	r30, 0x3d	; 61
   11ff2:	fe b7       	in	r31, 0x3e	; 62
   11ff4:	d5 83       	std	Z+5, r29	; 0x05
   11ff6:	c4 83       	std	Z+4, r28	; 0x04
   11ff8:	85 ec       	ldi	r24, 0xC5	; 197
   11ffa:	92 e1       	ldi	r25, 0x12	; 18
   11ffc:	a0 e0       	ldi	r26, 0x00	; 0
   11ffe:	81 83       	std	Z+1, r24	; 0x01
   12000:	92 83       	std	Z+2, r25	; 0x02
   12002:	a3 83       	std	Z+3, r26	; 0x03
   12004:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
#endif

        if (spoll)
   12008:	80 91 eb 1e 	lds	r24, 0x1EEB	; 0x801eeb <spoll>
   1200c:	88 23       	and	r24, r24
   1200e:	09 f4       	brne	.+2      	; 0x12012 <GPIB_TALK+0x76>
   12010:	55 c0       	rjmp	.+170    	; 0x120bc <GPIB_TALK+0x120>
        {
            SS80_Report();
   12012:	0e 94 a4 ad 	call	0x15b48	; 0x15b48 <SS80_Report>
   12016:	52 c0       	rjmp	.+164    	; 0x120bc <GPIB_TALK+0x120>
        }
        return(0);
    }

#ifdef AMIGO
    if(AMIGO_is_MTA(ch))
   12018:	ce 01       	movw	r24, r28
   1201a:	d7 dc       	rcall	.-1618   	; 0x119ca <AMIGO_is_MTA>
   1201c:	89 2b       	or	r24, r25
   1201e:	81 f0       	breq	.+32     	; 0x12040 <GPIB_TALK+0xa4>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   12020:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12024:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12028:	84 72       	andi	r24, 0x24	; 36
   1202a:	99 27       	eor	r25, r25
   1202c:	89 2b       	or	r24, r25
   1202e:	09 f4       	brne	.+2      	; 0x12032 <GPIB_TALK+0x96>
   12030:	45 c0       	rjmp	.+138    	; 0x120bc <GPIB_TALK+0x120>
            printf("[TA %02XH AMIGO]\n", 0xff & ch);
   12032:	ed b7       	in	r30, 0x3d	; 61
   12034:	fe b7       	in	r31, 0x3e	; 62
   12036:	d5 83       	std	Z+5, r29	; 0x05
   12038:	c4 83       	std	Z+4, r28	; 0x04
   1203a:	83 eb       	ldi	r24, 0xB3	; 179
   1203c:	92 e1       	ldi	r25, 0x12	; 18
#endif
        return(0);
    }
#endif                                        // #ifdef AMIGO

    if(PRINTER_is_MTA(ch))
   1203e:	38 c0       	rjmp	.+112    	; 0x120b0 <GPIB_TALK+0x114>
   12040:	ce 01       	movw	r24, r28
   12042:	f9 dc       	rcall	.-1550   	; 0x11a36 <PRINTER_is_MTA>
   12044:	89 2b       	or	r24, r25
   12046:	79 f0       	breq	.+30     	; 0x12066 <GPIB_TALK+0xca>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   12048:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1204c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12050:	84 72       	andi	r24, 0x24	; 36
   12052:	99 27       	eor	r25, r25
   12054:	89 2b       	or	r24, r25
   12056:	91 f1       	breq	.+100    	; 0x120bc <GPIB_TALK+0x120>
            printf("[TA %02XH PRINTER]\n", 0xff & ch);
   12058:	ed b7       	in	r30, 0x3d	; 61
   1205a:	fe b7       	in	r31, 0x3e	; 62
   1205c:	d5 83       	std	Z+5, r29	; 0x05
   1205e:	c4 83       	std	Z+4, r28	; 0x04
   12060:	8f e9       	ldi	r24, 0x9F	; 159
   12062:	92 e1       	ldi	r25, 0x12	; 18
   12064:	25 c0       	rjmp	.+74     	; 0x120b0 <GPIB_TALK+0x114>
#endif
        return(0);
    }

    if(PRINTER_is_MLA(listening))
   12066:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   1206a:	90 e0       	ldi	r25, 0x00	; 0
   1206c:	d2 dc       	rcall	.-1628   	; 0x11a12 <PRINTER_is_MLA>
   1206e:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12072:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12076:	89 2b       	or	r24, r25
   12078:	99 f0       	breq	.+38     	; 0x120a0 <GPIB_TALK+0x104>
    {
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   1207a:	24 72       	andi	r18, 0x24	; 36
   1207c:	33 27       	eor	r19, r19
   1207e:	23 2b       	or	r18, r19
   12080:	51 f0       	breq	.+20     	; 0x12096 <GPIB_TALK+0xfa>
            printf("[PRINTER OPEN]\n");
   12082:	8f e8       	ldi	r24, 0x8F	; 143
   12084:	92 e1       	ldi	r25, 0x12	; 18
   12086:	a0 e0       	ldi	r26, 0x00	; 0
   12088:	ed b7       	in	r30, 0x3d	; 61
   1208a:	fe b7       	in	r31, 0x3e	; 62
   1208c:	81 83       	std	Z+1, r24	; 0x01
   1208e:	92 83       	std	Z+2, r25	; 0x02
   12090:	a3 83       	std	Z+3, r26	; 0x03
   12092:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
        printer_open(NULL);
   12096:	80 e0       	ldi	r24, 0x00	; 0
   12098:	90 e0       	ldi	r25, 0x00	; 0
   1209a:	0e 94 28 bf 	call	0x17e50	; 0x17e50 <printer_open>
   1209e:	0e c0       	rjmp	.+28     	; 0x120bc <GPIB_TALK+0x120>
        return(0);
    }

#if SDEBUG
    if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   120a0:	22 ff       	sbrs	r18, 2
   120a2:	0c c0       	rjmp	.+24     	; 0x120bc <GPIB_TALK+0x120>
        printf("[TA %02XH]\n", 0xff & ch);
   120a4:	ed b7       	in	r30, 0x3d	; 61
   120a6:	fe b7       	in	r31, 0x3e	; 62
   120a8:	d5 83       	std	Z+5, r29	; 0x05
   120aa:	c4 83       	std	Z+4, r28	; 0x04
   120ac:	83 e8       	ldi	r24, 0x83	; 131
   120ae:	92 e1       	ldi	r25, 0x12	; 18
   120b0:	a0 e0       	ldi	r26, 0x00	; 0
   120b2:	81 83       	std	Z+1, r24	; 0x01
   120b4:	92 83       	std	Z+2, r25	; 0x02
   120b6:	a3 83       	std	Z+3, r26	; 0x03
   120b8:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
#endif
    return(0);
}                                                 // Talk Address primary address group
   120bc:	80 e0       	ldi	r24, 0x00	; 0
   120be:	90 e0       	ldi	r25, 0x00	; 0
   120c0:	cd b7       	in	r28, 0x3d	; 61
   120c2:	de b7       	in	r29, 0x3e	; 62
   120c4:	25 96       	adiw	r28, 0x05	; 5
   120c6:	e2 e0       	ldi	r30, 0x02	; 2
   120c8:	0c 94 39 e7 	jmp	0x1ce72	; 0x1ce72 <__epilogue_restores__+0x20>

000120cc <GPIB_SECONDARY_ADDRESS>:
///
/// @param[in] ch 8 bit secondary address.
///
/// @return  0
int GPIB_SECONDARY_ADDRESS(uint8_t ch)
{
   120cc:	a9 e0       	ldi	r26, 0x09	; 9
   120ce:	b0 e0       	ldi	r27, 0x00	; 0
   120d0:	ec e6       	ldi	r30, 0x6C	; 108
   120d2:	f0 e9       	ldi	r31, 0x90	; 144
   120d4:	0c 94 1c e7 	jmp	0x1ce38	; 0x1ce38 <__prologue_saves__+0x1e>
   120d8:	18 2f       	mov	r17, r24
///  note: any errors will reset lastcmd
///  Universal Talk mode
///  Treat this as a Secondary Address ?
///  SS80 Ident 4-31
///  If we have our secondary address then send IDENT
    if(SS80_is_MSA(ch) )
   120da:	c8 2f       	mov	r28, r24
   120dc:	d0 e0       	ldi	r29, 0x00	; 0
   120de:	ce 01       	movw	r24, r28
   120e0:	50 dc       	rcall	.-1888   	; 0x11982 <SS80_is_MSA>
   120e2:	89 2b       	or	r24, r25
   120e4:	09 f1       	breq	.+66     	; 0x12128 <GPIB_SECONDARY_ADDRESS+0x5c>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   120e6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   120ea:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   120ee:	84 72       	andi	r24, 0x24	; 36
   120f0:	99 27       	eor	r25, r25
   120f2:	89 2b       	or	r24, r25
   120f4:	61 f0       	breq	.+24     	; 0x1210e <GPIB_SECONDARY_ADDRESS+0x42>
            printf("[SA %02XH SS80]\n", 0xff & ch);
   120f6:	ed b7       	in	r30, 0x3d	; 61
   120f8:	fe b7       	in	r31, 0x3e	; 62
   120fa:	d5 83       	std	Z+5, r29	; 0x05
   120fc:	c4 83       	std	Z+4, r28	; 0x04
   120fe:	82 e7       	ldi	r24, 0x72	; 114
   12100:	92 e1       	ldi	r25, 0x12	; 18
   12102:	a0 e0       	ldi	r26, 0x00	; 0
   12104:	81 83       	std	Z+1, r24	; 0x01
   12106:	92 83       	std	Z+2, r25	; 0x02
   12108:	a3 83       	std	Z+3, r26	; 0x03
   1210a:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
#endif
///@brief ch = secondary address
        gpib_disable_PPR(SS80p->HEADER.PPR);
   1210e:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   12112:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   12116:	81 81       	ldd	r24, Z+1	; 0x01
   12118:	90 e0       	ldi	r25, 0x00	; 0
   1211a:	0e 94 a3 86 	call	0x10d46	; 0x10d46 <gpib_disable_PPR>
        return(Send_Identify( ch, SS80p->CONFIG.ID) );
   1211e:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   12122:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   12126:	25 c0       	rjmp	.+74     	; 0x12172 <GPIB_SECONDARY_ADDRESS+0xa6>

    }

#ifdef AMIGO
    if(AMIGO_is_MSA(ch) )
   12128:	ce 01       	movw	r24, r28
   1212a:	61 dc       	rcall	.-1854   	; 0x119ee <AMIGO_is_MSA>
   1212c:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12130:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12134:	89 2b       	or	r24, r25
   12136:	11 f1       	breq	.+68     	; 0x1217c <GPIB_SECONDARY_ADDRESS+0xb0>
    {
/// @todo
///     Two identify bytes should be repeated until untalked
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   12138:	c9 01       	movw	r24, r18
   1213a:	84 72       	andi	r24, 0x24	; 36
   1213c:	99 27       	eor	r25, r25
   1213e:	89 2b       	or	r24, r25
   12140:	61 f0       	breq	.+24     	; 0x1215a <GPIB_SECONDARY_ADDRESS+0x8e>
            printf("[SA %02XH AMIGO]\n", 0xff & ch);
   12142:	ed b7       	in	r30, 0x3d	; 61
   12144:	fe b7       	in	r31, 0x3e	; 62
   12146:	d5 83       	std	Z+5, r29	; 0x05
   12148:	c4 83       	std	Z+4, r28	; 0x04
   1214a:	80 e6       	ldi	r24, 0x60	; 96
   1214c:	92 e1       	ldi	r25, 0x12	; 18
   1214e:	a0 e0       	ldi	r26, 0x00	; 0
   12150:	81 83       	std	Z+1, r24	; 0x01
   12152:	92 83       	std	Z+2, r25	; 0x02
   12154:	a3 83       	std	Z+3, r26	; 0x03
   12156:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
#endif
///@brief ch = secondary address
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   1215a:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   1215e:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   12162:	81 81       	ldd	r24, Z+1	; 0x01
   12164:	90 e0       	ldi	r25, 0x00	; 0
   12166:	0e 94 a3 86 	call	0x10d46	; 0x10d46 <gpib_disable_PPR>
        return( Send_Identify( ch, AMIGOp->CONFIG.ID) );
   1216a:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   1216e:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   12172:	66 81       	ldd	r22, Z+6	; 0x06
   12174:	77 81       	ldd	r23, Z+7	; 0x07
   12176:	81 2f       	mov	r24, r17
   12178:	ec dd       	rcall	.-1064   	; 0x11d52 <Send_Identify>
   1217a:	1d c0       	rjmp	.+58     	; 0x121b6 <GPIB_SECONDARY_ADDRESS+0xea>
    }
#endif                                        // #ifdef AMIGO

#if SDEBUG
    if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   1217c:	c9 01       	movw	r24, r18
   1217e:	84 72       	andi	r24, 0x24	; 36
   12180:	99 27       	eor	r25, r25
   12182:	00 97       	sbiw	r24, 0x00	; 0
   12184:	c1 f0       	breq	.+48     	; 0x121b6 <GPIB_SECONDARY_ADDRESS+0xea>
        printf("[SA %02XH, listen:%02XH, talk:%02XH]\n",
   12186:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   1218a:	90 e0       	ldi	r25, 0x00	; 0
   1218c:	ed b7       	in	r30, 0x3d	; 61
   1218e:	fe b7       	in	r31, 0x3e	; 62
   12190:	91 87       	std	Z+9, r25	; 0x09
   12192:	80 87       	std	Z+8, r24	; 0x08
   12194:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   12198:	90 e0       	ldi	r25, 0x00	; 0
   1219a:	97 83       	std	Z+7, r25	; 0x07
   1219c:	86 83       	std	Z+6, r24	; 0x06
   1219e:	d5 83       	std	Z+5, r29	; 0x05
   121a0:	c4 83       	std	Z+4, r28	; 0x04
   121a2:	8a e3       	ldi	r24, 0x3A	; 58
   121a4:	92 e1       	ldi	r25, 0x12	; 18
   121a6:	a0 e0       	ldi	r26, 0x00	; 0
   121a8:	81 83       	std	Z+1, r24	; 0x01
   121aa:	92 83       	std	Z+2, r25	; 0x02
   121ac:	a3 83       	std	Z+3, r26	; 0x03
   121ae:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
            0xff & ch, 0xff & listening, 0xff & talking);
#endif
    return(0);
   121b2:	80 e0       	ldi	r24, 0x00	; 0
   121b4:	90 e0       	ldi	r25, 0x00	; 0
}
   121b6:	cd b7       	in	r28, 0x3d	; 61
   121b8:	de b7       	in	r29, 0x3e	; 62
   121ba:	29 96       	adiw	r28, 0x09	; 9
   121bc:	e3 e0       	ldi	r30, 0x03	; 3
   121be:	0c 94 38 e7 	jmp	0x1ce70	; 0x1ce70 <__epilogue_restores__+0x1e>

000121c2 <listen_cleanup>:
/// - Used to cleanup or close at the end of any listen address transition.
/// - Also called when GPIB bus reset or unlisten.
/// For now we just use this to close printer capture
/// @return  void
void listen_cleanup()
{
   121c2:	00 d0       	rcall	.+0      	; 0x121c4 <listen_cleanup+0x2>
   121c4:	1f 92       	push	r1
    if(listening_last)
   121c6:	60 91 ea 1e 	lds	r22, 0x1EEA	; 0x801eea <listening_last>
   121ca:	66 23       	and	r22, r22
   121cc:	e1 f0       	breq	.+56     	; 0x12206 <listen_cleanup+0x44>
    {
        int index = find_device(PRINTER_TYPE, listening_last, BASE_MLA);
   121ce:	70 e0       	ldi	r23, 0x00	; 0
   121d0:	40 e2       	ldi	r20, 0x20	; 32
   121d2:	50 e0       	ldi	r21, 0x00	; 0
   121d4:	84 e0       	ldi	r24, 0x04	; 4
   121d6:	90 e0       	ldi	r25, 0x00	; 0
   121d8:	a7 d6       	rcall	.+3406   	; 0x12f28 <find_device>
        if(index == -1)
   121da:	8f 3f       	cpi	r24, 0xFF	; 255
   121dc:	a1 f0       	breq	.+40     	; 0x12206 <listen_cleanup+0x44>
            return;

//We should not set the active device globally
//FIXME if we have to then printer close should temprarily do so
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   121de:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   121e2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   121e6:	84 72       	andi	r24, 0x24	; 36
   121e8:	99 27       	eor	r25, r25
   121ea:	89 2b       	or	r24, r25
   121ec:	51 f0       	breq	.+20     	; 0x12202 <listen_cleanup+0x40>
            printf("[PRINTER close]\n");
   121ee:	89 e2       	ldi	r24, 0x29	; 41
   121f0:	92 e1       	ldi	r25, 0x12	; 18
   121f2:	a0 e0       	ldi	r26, 0x00	; 0
   121f4:	ed b7       	in	r30, 0x3d	; 61
   121f6:	fe b7       	in	r31, 0x3e	; 62
   121f8:	81 83       	std	Z+1, r24	; 0x01
   121fa:	92 83       	std	Z+2, r25	; 0x02
   121fc:	a3 83       	std	Z+3, r26	; 0x03
   121fe:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
        printer_close();
   12202:	0e 94 d0 be 	call	0x17da0	; 0x17da0 <printer_close>
    }
}
   12206:	0f 90       	pop	r0
   12208:	0f 90       	pop	r0
   1220a:	0f 90       	pop	r0
   1220c:	08 95       	ret

0001220e <GPIB_LISTEN>:
/// @param[in] ch 8 bit listen command
///
/// @return  0

int GPIB_LISTEN(uint8_t ch)
{
   1220e:	cf 93       	push	r28
   12210:	df 93       	push	r29
   12212:	00 d0       	rcall	.+0      	; 0x12214 <GPIB_LISTEN+0x6>
   12214:	00 d0       	rcall	.+0      	; 0x12216 <GPIB_LISTEN+0x8>
   12216:	1f 92       	push	r1
   12218:	c8 2f       	mov	r28, r24
    listening_last = listening;
   1221a:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   1221e:	80 93 ea 1e 	sts	0x1EEA, r24	; 0x801eea <listening_last>
    listening = ch;
   12222:	c0 93 f0 1e 	sts	0x1EF0, r28	; 0x801ef0 <listening>

    listen_cleanup();
   12226:	cd df       	rcall	.-102    	; 0x121c2 <listen_cleanup>

///  NOTE: we must track the "addressed state" of each device
///  so we can determine its state - ie: command vs Secondary states
///@brief  Universal Unlisten
    if(ch == UNL)
   12228:	cf 33       	cpi	r28, 0x3F	; 63
   1222a:	19 f5       	brne	.+70     	; 0x12272 <GPIB_LISTEN+0x64>
    {
        listening = 0;
   1222c:	10 92 f0 1e 	sts	0x1EF0, r1	; 0x801ef0 <listening>

#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   12230:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12234:	82 ff       	sbrs	r24, 2
   12236:	74 c0       	rjmp	.+232    	; 0x12320 <GPIB_LISTEN+0x112>
        {
            printf("[UNL]\n");
   12238:	82 e2       	ldi	r24, 0x22	; 34
   1223a:	93 e1       	ldi	r25, 0x13	; 19
   1223c:	a0 e0       	ldi	r26, 0x00	; 0
   1223e:	ed b7       	in	r30, 0x3d	; 61
   12240:	fe b7       	in	r31, 0x3e	; 62
   12242:	81 83       	std	Z+1, r24	; 0x01
   12244:	92 83       	std	Z+2, r25	; 0x02
   12246:	a3 83       	std	Z+3, r26	; 0x03
   12248:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
///@brief add a line break if we both Untalk and Unlisten
            if(lastcmd == UNT)
   1224c:	80 91 e8 1c 	lds	r24, 0x1CE8	; 0x801ce8 <lastcmd>
   12250:	90 91 e9 1c 	lds	r25, 0x1CE9	; 0x801ce9 <lastcmd+0x1>
   12254:	8f 35       	cpi	r24, 0x5F	; 95
   12256:	91 05       	cpc	r25, r1
   12258:	09 f0       	breq	.+2      	; 0x1225c <GPIB_LISTEN+0x4e>
   1225a:	62 c0       	rjmp	.+196    	; 0x12320 <GPIB_LISTEN+0x112>
                printf("\n");
   1225c:	80 e2       	ldi	r24, 0x20	; 32
   1225e:	93 e1       	ldi	r25, 0x13	; 19
   12260:	a0 e0       	ldi	r26, 0x00	; 0
   12262:	ed b7       	in	r30, 0x3d	; 61
   12264:	fe b7       	in	r31, 0x3e	; 62
   12266:	81 83       	std	Z+1, r24	; 0x01
   12268:	92 83       	std	Z+2, r25	; 0x02
   1226a:	a3 83       	std	Z+3, r26	; 0x03
   1226c:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   12270:	57 c0       	rjmp	.+174    	; 0x12320 <GPIB_LISTEN+0x112>
#endif
        return(0);
    }

#ifdef AMIGO
    if(AMIGO_is_MLA(ch))
   12272:	d0 e0       	ldi	r29, 0x00	; 0
   12274:	ce 01       	movw	r24, r28
   12276:	97 db       	rcall	.-2258   	; 0x119a6 <AMIGO_is_MLA>
   12278:	89 2b       	or	r24, r25
   1227a:	81 f0       	breq	.+32     	; 0x1229c <GPIB_LISTEN+0x8e>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   1227c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12280:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12284:	84 72       	andi	r24, 0x24	; 36
   12286:	99 27       	eor	r25, r25
   12288:	89 2b       	or	r24, r25
   1228a:	09 f4       	brne	.+2      	; 0x1228e <GPIB_LISTEN+0x80>
   1228c:	49 c0       	rjmp	.+146    	; 0x12320 <GPIB_LISTEN+0x112>
            printf("[LA %02XH AMIGO]\n", 0xff & ch);
   1228e:	ed b7       	in	r30, 0x3d	; 61
   12290:	fe b7       	in	r31, 0x3e	; 62
   12292:	d5 83       	std	Z+5, r29	; 0x05
   12294:	c4 83       	std	Z+4, r28	; 0x04
   12296:	8e e0       	ldi	r24, 0x0E	; 14
   12298:	93 e1       	ldi	r25, 0x13	; 19
#endif
        return(0);
    }
#endif                                        // #ifdef AMIGO

    if(SS80_is_MLA(ch))
   1229a:	3c c0       	rjmp	.+120    	; 0x12314 <GPIB_LISTEN+0x106>
   1229c:	ce 01       	movw	r24, r28
   1229e:	4d db       	rcall	.-2406   	; 0x1193a <SS80_is_MLA>
   122a0:	89 2b       	or	r24, r25
   122a2:	79 f0       	breq	.+30     	; 0x122c2 <GPIB_LISTEN+0xb4>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   122a4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   122a8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   122ac:	84 72       	andi	r24, 0x24	; 36
   122ae:	99 27       	eor	r25, r25
   122b0:	89 2b       	or	r24, r25
   122b2:	b1 f1       	breq	.+108    	; 0x12320 <GPIB_LISTEN+0x112>
            printf("[LA %02XH SS80]\n", 0xff & ch);
   122b4:	ed b7       	in	r30, 0x3d	; 61
   122b6:	fe b7       	in	r31, 0x3e	; 62
   122b8:	d5 83       	std	Z+5, r29	; 0x05
   122ba:	c4 83       	std	Z+4, r28	; 0x04
   122bc:	8d ef       	ldi	r24, 0xFD	; 253
   122be:	92 e1       	ldi	r25, 0x12	; 18
#endif
        return(0);
    }

    if(PRINTER_is_MLA(ch))
   122c0:	29 c0       	rjmp	.+82     	; 0x12314 <GPIB_LISTEN+0x106>
   122c2:	ce 01       	movw	r24, r28
   122c4:	a6 db       	rcall	.-2228   	; 0x11a12 <PRINTER_is_MLA>
   122c6:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   122ca:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   122ce:	89 2b       	or	r24, r25
   122d0:	c9 f0       	breq	.+50     	; 0x12304 <GPIB_LISTEN+0xf6>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   122d2:	24 72       	andi	r18, 0x24	; 36
   122d4:	33 27       	eor	r19, r19
   122d6:	23 2b       	or	r18, r19
   122d8:	61 f0       	breq	.+24     	; 0x122f2 <GPIB_LISTEN+0xe4>
            printf("[LA %02XH PRINTER]\n", 0xff & ch);
   122da:	ed b7       	in	r30, 0x3d	; 61
   122dc:	fe b7       	in	r31, 0x3e	; 62
   122de:	d5 83       	std	Z+5, r29	; 0x05
   122e0:	c4 83       	std	Z+4, r28	; 0x04
   122e2:	89 ee       	ldi	r24, 0xE9	; 233
   122e4:	92 e1       	ldi	r25, 0x12	; 18
   122e6:	a0 e0       	ldi	r26, 0x00	; 0
   122e8:	81 83       	std	Z+1, r24	; 0x01
   122ea:	92 83       	std	Z+2, r25	; 0x02
   122ec:	a3 83       	std	Z+3, r26	; 0x03
   122ee:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
#endif
        if(talking != UNT)
   122f2:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   122f6:	8f 35       	cpi	r24, 0x5F	; 95
   122f8:	99 f0       	breq	.+38     	; 0x12320 <GPIB_LISTEN+0x112>
        {
///@brief NULL creates a file named based on date and time
// FIXME use printer structure to permit multiple printers
            printer_open(NULL);
   122fa:	80 e0       	ldi	r24, 0x00	; 0
   122fc:	90 e0       	ldi	r25, 0x00	; 0
   122fe:	0e 94 28 bf 	call	0x17e50	; 0x17e50 <printer_open>
   12302:	0e c0       	rjmp	.+28     	; 0x12320 <GPIB_LISTEN+0x112>
        }
        return(0);
    }
#if SDEBUG
    if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   12304:	22 ff       	sbrs	r18, 2
   12306:	0c c0       	rjmp	.+24     	; 0x12320 <GPIB_LISTEN+0x112>
        printf("[LA %02XH]\n", 0xff & ch);
   12308:	ed b7       	in	r30, 0x3d	; 61
   1230a:	fe b7       	in	r31, 0x3e	; 62
   1230c:	d5 83       	std	Z+5, r29	; 0x05
   1230e:	c4 83       	std	Z+4, r28	; 0x04
   12310:	8d ed       	ldi	r24, 0xDD	; 221
   12312:	92 e1       	ldi	r25, 0x12	; 18
   12314:	a0 e0       	ldi	r26, 0x00	; 0
   12316:	81 83       	std	Z+1, r24	; 0x01
   12318:	92 83       	std	Z+2, r25	; 0x02
   1231a:	a3 83       	std	Z+3, r26	; 0x03
   1231c:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
#endif
    return(0);
}                                                 // Listen Primary Address group
   12320:	80 e0       	ldi	r24, 0x00	; 0
   12322:	90 e0       	ldi	r25, 0x00	; 0
   12324:	cd b7       	in	r28, 0x3d	; 61
   12326:	de b7       	in	r29, 0x3e	; 62
   12328:	25 96       	adiw	r28, 0x05	; 5
   1232a:	e2 e0       	ldi	r30, 0x02	; 2
   1232c:	0c 94 39 e7 	jmp	0x1ce72	; 0x1ce72 <__epilogue_restores__+0x20>

00012330 <gpib_task>:
/// - Reads and processes GPIB control or data bytes
/// and calls emulator task.
/// @return  void

void gpib_task(void)
{
   12330:	cf 93       	push	r28
   12332:	df 93       	push	r29
    uint16_t val;
    uint8_t ch;
    uint16_t status;

    gpib_init_devices();                          // Init devices
   12334:	92 db       	rcall	.-2268   	; 0x11a5a <gpib_init_devices>
	// gpib_state_init() is now done in gpib_init_devices
    // gpib_state_init();                            // Init PPR talking and listening states

    gpib_log_fp = NULL;
   12336:	10 92 61 19 	sts	0x1961, r1	; 0x801961 <gpib_log_fp+0x1>
   1233a:	10 92 60 19 	sts	0x1960, r1	; 0x801960 <gpib_log_fp>

    while(1)
    {


        val = gpib_read_byte(NO_TRACE);
   1233e:	80 e0       	ldi	r24, 0x00	; 0
   12340:	90 e0       	ldi	r25, 0x00	; 0
   12342:	4f d8       	rcall	.-3938   	; 0x113e2 <gpib_read_byte>
   12344:	ec 01       	movw	r28, r24

#if SDEBUG
        if(debuglevel & GPIB_TOP_LEVEL_BUS_DECODE)
   12346:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1234a:	83 ff       	sbrs	r24, 3
            gpib_decode(val);
   1234c:	02 c0       	rjmp	.+4      	; 0x12352 <gpib_task+0x22>
   1234e:	ce 01       	movw	r24, r28
   12350:	4e d9       	rcall	.-3428   	; 0x115ee <gpib_decode>
#endif
        status = gpib_error_test(val);
   12352:	ce 01       	movw	r24, r28
   12354:	1d dc       	rcall	.-1990   	; 0x11b90 <gpib_error_test>
        if(status & ABORT_FLAG)
        {
            return;
        }
        else if(status & MEDIA_FLAG)
   12356:	9c 01       	movw	r18, r24
   12358:	23 70       	andi	r18, 0x03	; 3
   1235a:	33 27       	eor	r19, r19
   1235c:	23 2b       	or	r18, r19
   1235e:	09 f0       	breq	.+2      	; 0x12362 <gpib_task+0x32>
   12360:	43 c0       	rjmp	.+134    	; 0x123e8 <gpib_task+0xb8>
        {
            return;
        }
        else if(status)
   12362:	89 2b       	or	r24, r25
   12364:	61 f7       	brne	.-40     	; 0x1233e <gpib_task+0xe>
        {
            continue;
        }
///@brief GPIB commands with ATN set (COMMANDS)
        if(val & ATN_FLAG)
   12366:	d2 ff       	sbrs	r29, 2
   12368:	26 c0       	rjmp	.+76     	; 0x123b6 <gpib_task+0x86>
        {
            ch = val & CMD_MASK;
   1236a:	8c 2f       	mov	r24, r28
   1236c:	8f 77       	andi	r24, 0x7F	; 127
            if(ch <= 0x1f)
   1236e:	80 32       	cpi	r24, 0x20	; 32
            {
                GPIB(ch);
   12370:	10 f4       	brcc	.+4      	; 0x12376 <gpib_task+0x46>
   12372:	52 dd       	rcall	.-1372   	; 0x11e18 <GPIB>
                continue;
   12374:	e4 cf       	rjmp	.-56     	; 0x1233e <gpib_task+0xe>
            }
///@brief GPIB listen
            if(ch >= 0x20 && ch <= 0x3f)
   12376:	90 ee       	ldi	r25, 0xE0	; 224
   12378:	98 0f       	add	r25, r24
   1237a:	90 32       	cpi	r25, 0x20	; 32
            {
                GPIB_LISTEN(ch);
   1237c:	10 f4       	brcc	.+4      	; 0x12382 <gpib_task+0x52>
   1237e:	47 df       	rcall	.-370    	; 0x1220e <GPIB_LISTEN>
                continue;
   12380:	de cf       	rjmp	.-68     	; 0x1233e <gpib_task+0xe>
            }
///@brief GPIB talk
            if(ch >= 0x40 && ch <= 0x5f)
   12382:	90 ec       	ldi	r25, 0xC0	; 192
   12384:	98 0f       	add	r25, r24
   12386:	90 32       	cpi	r25, 0x20	; 32
            {
                GPIB_TALK(ch);
   12388:	10 f4       	brcc	.+4      	; 0x1238e <gpib_task+0x5e>
   1238a:	08 de       	rcall	.-1008   	; 0x11f9c <GPIB_TALK>
                continue;
   1238c:	d8 cf       	rjmp	.-80     	; 0x1233e <gpib_task+0xe>
            }

///@brief GPIB secondary
/// Note: We know ch >= 0x60 && ch <= 0x7f because of previous tests

            if( listening && lastcmd == UNT)
   1238e:	90 91 f0 1e 	lds	r25, 0x1EF0	; 0x801ef0 <listening>
   12392:	99 23       	and	r25, r25
   12394:	59 f0       	breq	.+22     	; 0x123ac <gpib_task+0x7c>
   12396:	20 91 e8 1c 	lds	r18, 0x1CE8	; 0x801ce8 <lastcmd>
   1239a:	30 91 e9 1c 	lds	r19, 0x1CE9	; 0x801ce9 <lastcmd+0x1>
   1239e:	2f 35       	cpi	r18, 0x5F	; 95
   123a0:	31 05       	cpc	r19, r1
            {
                secondary = 0;
   123a2:	21 f4       	brne	.+8      	; 0x123ac <gpib_task+0x7c>
   123a4:	10 92 ef 1e 	sts	0x1EEF, r1	; 0x801eef <secondary>
                GPIB_SECONDARY_ADDRESS(ch);
   123a8:	91 de       	rcall	.-734    	; 0x120cc <GPIB_SECONDARY_ADDRESS>
                continue;
   123aa:	c9 cf       	rjmp	.-110    	; 0x1233e <gpib_task+0xe>
            }

///@brief We have to keep track of secondary address that may happen out of order with older AMIGO protocol
/// this method works for SS80 as well
            secondary = ch;
   123ac:	80 93 ef 1e 	sts	0x1EEF, r24	; 0x801eef <secondary>
///@brief GPIB_COMMANDS does most of the work
            status = GPIB_COMMANDS(secondary,0);
   123b0:	60 e0       	ldi	r22, 0x00	; 0
   123b2:	90 e0       	ldi	r25, 0x00	; 0
        }                                         // GPIB ATN

///@brief GPIB commands without ATN set (DATA)
        else                                      // GPIB Data
        {
            if ( PRINTER_is_MLA(listening) )
   123b4:	12 c0       	rjmp	.+36     	; 0x123da <gpib_task+0xaa>
   123b6:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   123ba:	90 e0       	ldi	r25, 0x00	; 0
   123bc:	2a db       	rcall	.-2476   	; 0x11a12 <PRINTER_is_MLA>
   123be:	89 2b       	or	r24, r25
   123c0:	29 f0       	breq	.+10     	; 0x123cc <gpib_task+0x9c>
            {
                printer_buffer( 0xff & val );
   123c2:	ce 01       	movw	r24, r28
   123c4:	99 27       	eor	r25, r25
   123c6:	0e 94 cb bf 	call	0x17f96	; 0x17f96 <printer_buffer>
                continue;
   123ca:	b9 cf       	rjmp	.-142    	; 0x1233e <gpib_task+0xe>
            }

            if(!secondary)
   123cc:	80 91 ef 1e 	lds	r24, 0x1EEF	; 0x801eef <secondary>
   123d0:	88 23       	and	r24, r24
                continue;

// ONLY secondar commands at this point
///@brief GPIB_COMMANDS does most of the work
            status = GPIB_COMMANDS(val,1);
   123d2:	09 f4       	brne	.+2      	; 0x123d6 <gpib_task+0xa6>
   123d4:	b4 cf       	rjmp	.-152    	; 0x1233e <gpib_task+0xe>
   123d6:	61 e0       	ldi	r22, 0x01	; 1
   123d8:	ce 01       	movw	r24, r28
            status = gpib_error_test(status);
   123da:	67 dc       	rcall	.-1842   	; 0x11caa <GPIB_COMMANDS>
   123dc:	d9 db       	rcall	.-2126   	; 0x11b90 <gpib_error_test>

            if(status & ( ABORT_FLAG | MEDIA_FLAG ))
   123de:	83 70       	andi	r24, 0x03	; 3
   123e0:	99 27       	eor	r25, r25
   123e2:	89 2b       	or	r24, r25
   123e4:	09 f4       	brne	.+2      	; 0x123e8 <gpib_task+0xb8>
   123e6:	ab cf       	rjmp	.-170    	; 0x1233e <gpib_task+0xe>
            }
            continue;
        }
    }                                             // while(1)
    return;
}
   123e8:	df 91       	pop	r29
   123ea:	cf 91       	pop	r28
   123ec:	08 95       	ret

000123ee <talk_cleanup>:
/// - Not used in this emulator.
///
/// @return  void

void talk_cleanup()
{
   123ee:	08 95       	ret

000123f0 <gpib_help>:
///  Help Menu for User invoked GPIB functions and tasks
///  See: int gpib_tests(char *str)
/// @return  void

void gpib_help(int full)
{
   123f0:	cf 93       	push	r28
   123f2:	df 93       	push	r29
   123f4:	00 d0       	rcall	.+0      	; 0x123f6 <gpib_help+0x6>
   123f6:	1f 92       	push	r1
   123f8:	ec 01       	movw	r28, r24
    printf("gpib  help\n");
   123fa:	85 e2       	ldi	r24, 0x25	; 37
   123fc:	98 e1       	ldi	r25, 0x18	; 24
   123fe:	a0 e0       	ldi	r26, 0x00	; 0
   12400:	ed b7       	in	r30, 0x3d	; 61
   12402:	fe b7       	in	r31, 0x3e	; 62
   12404:	81 83       	std	Z+1, r24	; 0x01
   12406:	92 83       	std	Z+2, r25	; 0x02
   12408:	a3 83       	std	Z+3, r26	; 0x03
   1240a:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    if(full)
   1240e:	cd 2b       	or	r28, r29
   12410:	51 f0       	breq	.+20     	; 0x12426 <gpib_help+0x36>
    {
        printf("Note: gpib prefix is optional\n"
   12412:	8a ee       	ldi	r24, 0xEA	; 234
   12414:	94 e1       	ldi	r25, 0x14	; 20
   12416:	a0 e0       	ldi	r26, 0x00	; 0
   12418:	ed b7       	in	r30, 0x3d	; 61
   1241a:	fe b7       	in	r31, 0x3e	; 62
   1241c:	81 83       	std	Z+1, r24	; 0x01
   1241e:	92 83       	std	Z+2, r25	; 0x02
   12420:	a3 83       	std	Z+3, r26	; 0x03
   12422:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
			"     Example: gpib mount PRINTER 5\n"
			"gpib umount address"
			"     Example: gpib umount 6\n"
            );
    }
}
   12426:	cd b7       	in	r28, 0x3d	; 61
   12428:	de b7       	in	r29, 0x3e	; 62
   1242a:	23 96       	adiw	r28, 0x03	; 3
   1242c:	e2 e0       	ldi	r30, 0x02	; 2
   1242e:	0c 94 39 e7 	jmp	0x1ce72	; 0x1ce72 <__epilogue_restores__+0x20>

00012432 <gpib_tests>:

/// @brief GPIB user tests
///  User invoked GPIB functions and tasks
/// @return  1 matched token, 0 if not
int gpib_tests(int argc, char * argv[])
{
   12432:	a5 e0       	ldi	r26, 0x05	; 5
   12434:	b0 e0       	ldi	r27, 0x00	; 0
   12436:	ef e1       	ldi	r30, 0x1F	; 31
   12438:	f2 e9       	ldi	r31, 0x92	; 146
   1243a:	0c 94 15 e7 	jmp	0x1ce2a	; 0x1ce2a <__prologue_saves__+0x10>

    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   1243e:	fb 01       	movw	r30, r22
   12440:	e0 80       	ld	r14, Z
   12442:	f1 80       	ldd	r15, Z+1	; 0x01

    if(!ptr)
   12444:	e1 14       	cp	r14, r1
   12446:	f1 04       	cpc	r15, r1
   12448:	19 f4       	brne	.+6      	; 0x12450 <gpib_tests+0x1e>
        return(0);
   1244a:	80 e0       	ldi	r24, 0x00	; 0
   1244c:	90 e0       	ldi	r25, 0x00	; 0
   1244e:	f1 c0       	rjmp	.+482    	; 0x12632 <gpib_tests+0x200>
   12450:	6b 01       	movw	r12, r22
   12452:	5c 01       	movw	r10, r24

    if( MATCH(ptr,"gpib") )
   12454:	66 ea       	ldi	r22, 0xA6	; 166
   12456:	7d e0       	ldi	r23, 0x0D	; 13
   12458:	c7 01       	movw	r24, r14
   1245a:	0e 94 65 32 	call	0x64ca	; 0x64ca <MATCH>
   1245e:	89 2b       	or	r24, r25
   12460:	a1 f0       	breq	.+40     	; 0x1248a <gpib_tests+0x58>
    {
        ptr = argv[ind++];
   12462:	f6 01       	movw	r30, r12
   12464:	e2 80       	ldd	r14, Z+2	; 0x02
   12466:	f3 80       	ldd	r15, Z+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
   12468:	e1 14       	cp	r14, r1
   1246a:	f1 04       	cpc	r15, r1
   1246c:	21 f4       	brne	.+8      	; 0x12476 <gpib_tests+0x44>
        {
            gpib_help(1);
   1246e:	81 e0       	ldi	r24, 0x01	; 1
   12470:	90 e0       	ldi	r25, 0x00	; 0
   12472:	be df       	rcall	.-132    	; 0x123f0 <gpib_help>
   12474:	dc c0       	rjmp	.+440    	; 0x1262e <gpib_tests+0x1fc>
        return(0);

    if( MATCH(ptr,"gpib") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
   12476:	6d e6       	ldi	r22, 0x6D	; 109
   12478:	76 e1       	ldi	r23, 0x16	; 22
   1247a:	c7 01       	movw	r24, r14
   1247c:	0e 94 65 32 	call	0x64ca	; 0x64ca <MATCH>
   12480:	89 2b       	or	r24, r25
   12482:	a9 f7       	brne	.-22     	; 0x1246e <gpib_tests+0x3c>
    if(!ptr)
        return(0);

    if( MATCH(ptr,"gpib") )
    {
        ptr = argv[ind++];
   12484:	c2 e0       	ldi	r28, 0x02	; 2
   12486:	d0 e0       	ldi	r29, 0x00	; 0
   12488:	02 c0       	rjmp	.+4      	; 0x1248e <gpib_tests+0x5c>

    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   1248a:	c1 e0       	ldi	r28, 0x01	; 1
   1248c:	d0 e0       	ldi	r29, 0x00	; 0
            gpib_help(1);
            return(1);
        }
    }

    if (MATCHI(ptr,"debug") )
   1248e:	6b ea       	ldi	r22, 0xAB	; 171
   12490:	7d e0       	ldi	r23, 0x0D	; 13
   12492:	c7 01       	movw	r24, r14
   12494:	0e 94 79 32 	call	0x64f2	; 0x64f2 <MATCHI>
   12498:	89 2b       	or	r24, r25
   1249a:	29 f1       	breq	.+74     	; 0x124e6 <gpib_tests+0xb4>
    {
        ptr = argv[ind];
   1249c:	fe 01       	movw	r30, r28
   1249e:	ee 0f       	add	r30, r30
   124a0:	ff 1f       	adc	r31, r31
   124a2:	ec 0d       	add	r30, r12
   124a4:	fd 1d       	adc	r31, r13
        if(*ptr == '=')
   124a6:	01 90       	ld	r0, Z+
   124a8:	f0 81       	ld	r31, Z
   124aa:	e0 2d       	mov	r30, r0
   124ac:	80 81       	ld	r24, Z
   124ae:	8d 33       	cpi	r24, 0x3D	; 61
   124b0:	09 f4       	brne	.+2      	; 0x124b4 <gpib_tests+0x82>
            ++ind;
   124b2:	21 96       	adiw	r28, 0x01	; 1
        debuglevel = get_value(argv[ind]);
   124b4:	cc 0f       	add	r28, r28
   124b6:	dd 1f       	adc	r29, r29
   124b8:	cc 0d       	add	r28, r12
   124ba:	dd 1d       	adc	r29, r13
   124bc:	88 81       	ld	r24, Y
   124be:	99 81       	ldd	r25, Y+1	; 0x01
   124c0:	0e 94 70 33 	call	0x66e0	; 0x66e0 <get_value>
   124c4:	70 93 b7 01 	sts	0x01B7, r23	; 0x8001b7 <debuglevel+0x1>
   124c8:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <debuglevel>
        printf("debug=%04XH\n", debuglevel);
   124cc:	ed b7       	in	r30, 0x3d	; 61
   124ce:	fe b7       	in	r31, 0x3e	; 62
   124d0:	75 83       	std	Z+5, r23	; 0x05
   124d2:	64 83       	std	Z+4, r22	; 0x04
   124d4:	8d ed       	ldi	r24, 0xDD	; 221
   124d6:	94 e1       	ldi	r25, 0x14	; 20
   124d8:	a0 e0       	ldi	r26, 0x00	; 0
   124da:	81 83       	std	Z+1, r24	; 0x01
   124dc:	92 83       	std	Z+2, r25	; 0x02
   124de:	a3 83       	std	Z+3, r26	; 0x03
   124e0:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   124e4:	a4 c0       	rjmp	.+328    	; 0x1262e <gpib_tests+0x1fc>
        return(1);
    }

    if (MATCHI(ptr,"mount") )
   124e6:	62 eb       	ldi	r22, 0xB2	; 178
   124e8:	7d e0       	ldi	r23, 0x0D	; 13
   124ea:	c7 01       	movw	r24, r14
   124ec:	0e 94 79 32 	call	0x64f2	; 0x64f2 <MATCHI>
   124f0:	89 2b       	or	r24, r25
   124f2:	61 f0       	breq	.+24     	; 0x1250c <gpib_tests+0xda>
    {
		if(!mount(argc, argv))
   124f4:	b6 01       	movw	r22, r12
   124f6:	c5 01       	movw	r24, r10
   124f8:	0e 94 ba a2 	call	0x14574	; 0x14574 <mount>
   124fc:	81 11       	cpse	r24, r1
   124fe:	03 c0       	rjmp	.+6      	; 0x12506 <gpib_tests+0xd4>
			return(-1);
   12500:	8f ef       	ldi	r24, 0xFF	; 255
   12502:	9f ef       	ldi	r25, 0xFF	; 255
   12504:	96 c0       	rjmp	.+300    	; 0x12632 <gpib_tests+0x200>
#ifdef LCD_SUPPORT
    extern void update_drive_counts();
    update_drive_counts();
   12506:	0e 94 6f e4 	call	0x1c8de	; 0x1c8de <update_drive_counts>
   1250a:	91 c0       	rjmp	.+290    	; 0x1262e <gpib_tests+0x1fc>
#endif

		return(1);
    }
    if (MATCHI(ptr,"umount") )
   1250c:	61 eb       	ldi	r22, 0xB1	; 177
   1250e:	7d e0       	ldi	r23, 0x0D	; 13
   12510:	c7 01       	movw	r24, r14
   12512:	0e 94 79 32 	call	0x64f2	; 0x64f2 <MATCHI>
   12516:	89 2b       	or	r24, r25
   12518:	29 f0       	breq	.+10     	; 0x12524 <gpib_tests+0xf2>
    {
		if(!umount(argc, argv))
   1251a:	b6 01       	movw	r22, r12
   1251c:	c5 01       	movw	r24, r10
   1251e:	0e 94 00 9d 	call	0x13a00	; 0x13a00 <umount>
   12522:	ec cf       	rjmp	.-40     	; 0x124fc <gpib_tests+0xca>
    update_drive_counts();
#endif
		return(1);
	}

    if (MATCHI(ptr,"addresses") )
   12524:	68 eb       	ldi	r22, 0xB8	; 184
   12526:	7d e0       	ldi	r23, 0x0D	; 13
   12528:	c7 01       	movw	r24, r14
   1252a:	0e 94 79 32 	call	0x64f2	; 0x64f2 <MATCHI>
   1252e:	89 2b       	or	r24, r25
   12530:	c9 f0       	breq	.+50     	; 0x12564 <gpib_tests+0x132>
    {
        ptr = argv[ind];
   12532:	cc 0f       	add	r28, r28
   12534:	dd 1f       	adc	r29, r29
   12536:	cc 0d       	add	r28, r12
   12538:	dd 1d       	adc	r29, r13
   1253a:	88 81       	ld	r24, Y
   1253c:	99 81       	ldd	r25, Y+1	; 0x01
        if(ptr && *ptr && MATCH(ptr,"-v"))
   1253e:	00 97       	sbiw	r24, 0x00	; 0
   12540:	69 f0       	breq	.+26     	; 0x1255c <gpib_tests+0x12a>
   12542:	fc 01       	movw	r30, r24
   12544:	20 81       	ld	r18, Z
   12546:	22 23       	and	r18, r18
   12548:	49 f0       	breq	.+18     	; 0x1255c <gpib_tests+0x12a>
   1254a:	62 ec       	ldi	r22, 0xC2	; 194
   1254c:	7d e0       	ldi	r23, 0x0D	; 13
   1254e:	0e 94 65 32 	call	0x64ca	; 0x64ca <MATCH>
   12552:	89 2b       	or	r24, r25
   12554:	19 f0       	breq	.+6      	; 0x1255c <gpib_tests+0x12a>
            display_Addresses(1);
   12556:	81 e0       	ldi	r24, 0x01	; 1
   12558:	90 e0       	ldi	r25, 0x00	; 0
   1255a:	02 c0       	rjmp	.+4      	; 0x12560 <gpib_tests+0x12e>
        else
            display_Addresses(0);
   1255c:	80 e0       	ldi	r24, 0x00	; 0
   1255e:	90 e0       	ldi	r25, 0x00	; 0
   12560:	47 d1       	rcall	.+654    	; 0x127f0 <display_Addresses>
   12562:	65 c0       	rjmp	.+202    	; 0x1262e <gpib_tests+0x1fc>
        return(1);
    }

    if (MATCHI(ptr,"config") )
   12564:	65 ec       	ldi	r22, 0xC5	; 197
   12566:	7d e0       	ldi	r23, 0x0D	; 13
   12568:	c7 01       	movw	r24, r14
   1256a:	0e 94 79 32 	call	0x64f2	; 0x64f2 <MATCHI>
   1256e:	89 2b       	or	r24, r25
   12570:	c9 f0       	breq	.+50     	; 0x125a4 <gpib_tests+0x172>
    {
        ptr = argv[ind];
   12572:	cc 0f       	add	r28, r28
   12574:	dd 1f       	adc	r29, r29
   12576:	cc 0d       	add	r28, r12
   12578:	dd 1d       	adc	r29, r13
   1257a:	88 81       	ld	r24, Y
   1257c:	99 81       	ldd	r25, Y+1	; 0x01
        if(ptr && *ptr && MATCH(ptr,"-v"))
   1257e:	00 97       	sbiw	r24, 0x00	; 0
   12580:	69 f0       	breq	.+26     	; 0x1259c <gpib_tests+0x16a>
   12582:	fc 01       	movw	r30, r24
   12584:	20 81       	ld	r18, Z
   12586:	22 23       	and	r18, r18
   12588:	49 f0       	breq	.+18     	; 0x1259c <gpib_tests+0x16a>
   1258a:	62 ec       	ldi	r22, 0xC2	; 194
   1258c:	7d e0       	ldi	r23, 0x0D	; 13
   1258e:	0e 94 65 32 	call	0x64ca	; 0x64ca <MATCH>
   12592:	89 2b       	or	r24, r25
   12594:	19 f0       	breq	.+6      	; 0x1259c <gpib_tests+0x16a>
            display_Config(1);
   12596:	81 e0       	ldi	r24, 0x01	; 1
   12598:	90 e0       	ldi	r25, 0x00	; 0
   1259a:	02 c0       	rjmp	.+4      	; 0x125a0 <gpib_tests+0x16e>
        else
            display_Config(0);
   1259c:	80 e0       	ldi	r24, 0x00	; 0
   1259e:	90 e0       	ldi	r25, 0x00	; 0
   125a0:	fb d1       	rcall	.+1014   	; 0x12998 <display_Config>
   125a2:	45 c0       	rjmp	.+138    	; 0x1262e <gpib_tests+0x1fc>
        return(1);
    }

    if (MATCHI(ptr,"elapsed_reset") )
   125a4:	6c ec       	ldi	r22, 0xCC	; 204
   125a6:	7d e0       	ldi	r23, 0x0D	; 13
   125a8:	c7 01       	movw	r24, r14
   125aa:	0e 94 79 32 	call	0x64f2	; 0x64f2 <MATCHI>
   125ae:	89 2b       	or	r24, r25
   125b0:	19 f0       	breq	.+6      	; 0x125b8 <gpib_tests+0x186>
    {
        gpib_timer_elapsed_begin();
   125b2:	0e 94 93 85 	call	0x10b26	; 0x10b26 <gpib_timer_elapsed_begin>
   125b6:	3b c0       	rjmp	.+118    	; 0x1262e <gpib_tests+0x1fc>
        return(1);
    }

    if (MATCHI(ptr,"elapsed") )
   125b8:	6a ed       	ldi	r22, 0xDA	; 218
   125ba:	7d e0       	ldi	r23, 0x0D	; 13
   125bc:	c7 01       	movw	r24, r14
   125be:	0e 94 79 32 	call	0x64f2	; 0x64f2 <MATCHI>
   125c2:	89 2b       	or	r24, r25
   125c4:	29 f0       	breq	.+10     	; 0x125d0 <gpib_tests+0x19e>
    {
        gpib_timer_elapsed_end("gpib elapsed:");
   125c6:	82 ee       	ldi	r24, 0xE2	; 226
   125c8:	9d e0       	ldi	r25, 0x0D	; 13
   125ca:	0e 94 a5 85 	call	0x10b4a	; 0x10b4a <gpib_timer_elapsed_end>
   125ce:	2f c0       	rjmp	.+94     	; 0x1262e <gpib_tests+0x1fc>
        return(1);
    }

    if (MATCHI(ptr,"task") )
   125d0:	60 ef       	ldi	r22, 0xF0	; 240
   125d2:	7d e0       	ldi	r23, 0x0D	; 13
   125d4:	c7 01       	movw	r24, r14
   125d6:	0e 94 79 32 	call	0x64f2	; 0x64f2 <MATCHI>
   125da:	89 2b       	or	r24, r25
    {
        gpib_task();
   125dc:	11 f0       	breq	.+4      	; 0x125e2 <gpib_tests+0x1b0>
   125de:	a8 de       	rcall	.-688    	; 0x12330 <gpib_task>
   125e0:	26 c0       	rjmp	.+76     	; 0x1262e <gpib_tests+0x1fc>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
   125e2:	8e 01       	movw	r16, r28
   125e4:	0f 5f       	subi	r16, 0xFF	; 255
   125e6:	1f 4f       	sbci	r17, 0xFF	; 255
   125e8:	95 01       	movw	r18, r10
   125ea:	a8 01       	movw	r20, r16
   125ec:	65 ef       	ldi	r22, 0xF5	; 245
   125ee:	7d e0       	ldi	r23, 0x0D	; 13
   125f0:	c7 01       	movw	r24, r14
   125f2:	0e 94 8d 32 	call	0x651a	; 0x651a <MATCHARGS>
   125f6:	89 2b       	or	r24, r25
   125f8:	09 f4       	brne	.+2      	; 0x125fc <gpib_tests+0x1ca>
   125fa:	27 cf       	rjmp	.-434    	; 0x1244a <gpib_tests+0x18>
    {
        int detail = 0;
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
   125fc:	00 0f       	add	r16, r16
   125fe:	11 1f       	adc	r17, r17
   12600:	e6 01       	movw	r28, r12
   12602:	c0 0f       	add	r28, r16
   12604:	d1 1f       	adc	r29, r17
   12606:	88 81       	ld	r24, Y
   12608:	99 81       	ldd	r25, Y+1	; 0x01
   1260a:	00 97       	sbiw	r24, 0x00	; 0
   1260c:	51 f0       	breq	.+20     	; 0x12622 <gpib_tests+0x1f0>
   1260e:	6b ef       	ldi	r22, 0xFB	; 251
   12610:	7d e0       	ldi	r23, 0x0D	; 13
   12612:	0e 94 65 32 	call	0x64ca	; 0x64ca <MATCH>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
    {
        int detail = 0;
   12616:	61 e0       	ldi	r22, 0x01	; 1
   12618:	70 e0       	ldi	r23, 0x00	; 0
   1261a:	89 2b       	or	r24, r25
   1261c:	21 f4       	brne	.+8      	; 0x12626 <gpib_tests+0x1f4>
   1261e:	60 e0       	ldi	r22, 0x00	; 0
   12620:	02 c0       	rjmp	.+4      	; 0x12626 <gpib_tests+0x1f4>
   12622:	60 e0       	ldi	r22, 0x00	; 0
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
            detail = 1;
        gpib_trace_task(argv[ind], detail);
   12624:	70 e0       	ldi	r23, 0x00	; 0
   12626:	22 97       	sbiw	r28, 0x02	; 2
   12628:	88 81       	ld	r24, Y
   1262a:	99 81       	ldd	r25, Y+1	; 0x01
   1262c:	1f da       	rcall	.-3010   	; 0x11a6c <gpib_trace_task>
        return(1);
   1262e:	81 e0       	ldi	r24, 0x01	; 1
   12630:	90 e0       	ldi	r25, 0x00	; 0

    }                                             // port write
#endif                                        // #ifdef GPIB_EXTENDED_TESTS

    return(0);
}
   12632:	cd b7       	in	r28, 0x3d	; 61
   12634:	de b7       	in	r29, 0x3e	; 62
   12636:	25 96       	adiw	r28, 0x05	; 5
   12638:	ea e0       	ldi	r30, 0x0A	; 10
   1263a:	0c 94 31 e7 	jmp	0x1ce62	; 0x1ce62 <__epilogue_restores__+0x10>

0001263e <tok_index>:

	if(index_ppr(ppr) == -1)
		return(1);
	printf("WARNING PPR (%d) already in use\n", (int)ppr);
	return(0);
}
   1263e:	0f 93       	push	r16
   12640:	1f 93       	push	r17
   12642:	cf 93       	push	r28
   12644:	8c 01       	movw	r16, r24
   12646:	c0 e0       	ldi	r28, 0x00	; 0
   12648:	24 e0       	ldi	r18, 0x04	; 4
   1264a:	c2 02       	muls	r28, r18
   1264c:	f0 01       	movw	r30, r0
   1264e:	11 24       	eor	r1, r1
   12650:	ec 53       	subi	r30, 0x3C	; 60
   12652:	fe 4f       	sbci	r31, 0xFE	; 254
   12654:	82 81       	ldd	r24, Z+2	; 0x02
   12656:	93 81       	ldd	r25, Z+3	; 0x03
   12658:	01 96       	adiw	r24, 0x01	; 1
   1265a:	49 f0       	breq	.+18     	; 0x1266e <tok_index+0x30>
   1265c:	60 81       	ld	r22, Z
   1265e:	71 81       	ldd	r23, Z+1	; 0x01
   12660:	c8 01       	movw	r24, r16
   12662:	0e 94 79 32 	call	0x64f2	; 0x64f2 <MATCHI>
   12666:	89 2b       	or	r24, r25
   12668:	21 f4       	brne	.+8      	; 0x12672 <tok_index+0x34>
   1266a:	cf 5f       	subi	r28, 0xFF	; 255
   1266c:	ed cf       	rjmp	.-38     	; 0x12648 <tok_index+0xa>
   1266e:	8f ef       	ldi	r24, 0xFF	; 255
   12670:	01 c0       	rjmp	.+2      	; 0x12674 <tok_index+0x36>
   12672:	8c 2f       	mov	r24, r28
   12674:	cf 91       	pop	r28
   12676:	1f 91       	pop	r17
   12678:	0f 91       	pop	r16
   1267a:	08 95       	ret

0001267c <tok_name>:
   1267c:	e4 ec       	ldi	r30, 0xC4	; 196
   1267e:	f1 e0       	ldi	r31, 0x01	; 1
   12680:	20 e0       	ldi	r18, 0x00	; 0
   12682:	30 e0       	ldi	r19, 0x00	; 0
   12684:	90 e0       	ldi	r25, 0x00	; 0
   12686:	42 81       	ldd	r20, Z+2	; 0x02
   12688:	53 81       	ldd	r21, Z+3	; 0x03
   1268a:	4f 3f       	cpi	r20, 0xFF	; 255
   1268c:	6f ef       	ldi	r22, 0xFF	; 255
   1268e:	56 07       	cpc	r21, r22
   12690:	89 f0       	breq	.+34     	; 0x126b4 <tok_name+0x38>
   12692:	34 96       	adiw	r30, 0x04	; 4
   12694:	48 17       	cp	r20, r24
   12696:	59 07       	cpc	r21, r25
   12698:	51 f4       	brne	.+20     	; 0x126ae <tok_name+0x32>
   1269a:	22 0f       	add	r18, r18
   1269c:	33 1f       	adc	r19, r19
   1269e:	22 0f       	add	r18, r18
   126a0:	33 1f       	adc	r19, r19
   126a2:	f9 01       	movw	r30, r18
   126a4:	ec 53       	subi	r30, 0x3C	; 60
   126a6:	fe 4f       	sbci	r31, 0xFE	; 254
   126a8:	80 81       	ld	r24, Z
   126aa:	91 81       	ldd	r25, Z+1	; 0x01
   126ac:	08 95       	ret
   126ae:	2f 5f       	subi	r18, 0xFF	; 255
   126b0:	3f 4f       	sbci	r19, 0xFF	; 255
   126b2:	e9 cf       	rjmp	.-46     	; 0x12686 <tok_name+0xa>
   126b4:	80 e2       	ldi	r24, 0x20	; 32
   126b6:	9c e0       	ldi	r25, 0x0C	; 12
   126b8:	08 95       	ret

000126ba <print_tok_val>:
   126ba:	cf 92       	push	r12
   126bc:	df 92       	push	r13
   126be:	ef 92       	push	r14
   126c0:	ff 92       	push	r15
   126c2:	0f 93       	push	r16
   126c4:	1f 93       	push	r17
   126c6:	cf 93       	push	r28
   126c8:	ad b7       	in	r26, 0x3d	; 61
   126ca:	be b7       	in	r27, 0x3e	; 62
   126cc:	1d 97       	sbiw	r26, 0x0d	; 13
   126ce:	0f b6       	in	r0, 0x3f	; 63
   126d0:	f8 94       	cli
   126d2:	be bf       	out	0x3e, r27	; 62
   126d4:	0f be       	out	0x3f, r0	; 63
   126d6:	ad bf       	out	0x3d, r26	; 61
   126d8:	c6 2f       	mov	r28, r22
   126da:	69 01       	movw	r12, r18
   126dc:	7a 01       	movw	r14, r20
   126de:	ce df       	rcall	.-100    	; 0x1267c <tok_name>
   126e0:	8c 01       	movw	r16, r24
   126e2:	cc 23       	and	r28, r28
   126e4:	31 f0       	breq	.+12     	; 0x126f2 <print_tok_val+0x38>
   126e6:	80 e2       	ldi	r24, 0x20	; 32
   126e8:	90 e0       	ldi	r25, 0x00	; 0
   126ea:	0e 94 7d 76 	call	0xecfa	; 0xecfa <putchar>
   126ee:	c1 50       	subi	r28, 0x01	; 1
   126f0:	f8 cf       	rjmp	.-16     	; 0x126e2 <print_tok_val+0x28>
   126f2:	ed b7       	in	r30, 0x3d	; 61
   126f4:	fe b7       	in	r31, 0x3e	; 62
   126f6:	c2 86       	std	Z+10, r12	; 0x0a
   126f8:	d3 86       	std	Z+11, r13	; 0x0b
   126fa:	e4 86       	std	Z+12, r14	; 0x0c
   126fc:	f5 86       	std	Z+13, r15	; 0x0d
   126fe:	c6 82       	std	Z+6, r12	; 0x06
   12700:	d7 82       	std	Z+7, r13	; 0x07
   12702:	e0 86       	std	Z+8, r14	; 0x08
   12704:	f1 86       	std	Z+9, r15	; 0x09
   12706:	15 83       	std	Z+5, r17	; 0x05
   12708:	04 83       	std	Z+4, r16	; 0x04
   1270a:	8e e3       	ldi	r24, 0x3E	; 62
   1270c:	91 e2       	ldi	r25, 0x21	; 33
   1270e:	a0 e0       	ldi	r26, 0x00	; 0
   12710:	81 83       	std	Z+1, r24	; 0x01
   12712:	92 83       	std	Z+2, r25	; 0x02
   12714:	a3 83       	std	Z+3, r26	; 0x03
   12716:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   1271a:	ad b7       	in	r26, 0x3d	; 61
   1271c:	be b7       	in	r27, 0x3e	; 62
   1271e:	1d 96       	adiw	r26, 0x0d	; 13
   12720:	0f b6       	in	r0, 0x3f	; 63
   12722:	f8 94       	cli
   12724:	be bf       	out	0x3e, r27	; 62
   12726:	0f be       	out	0x3f, r0	; 63
   12728:	ad bf       	out	0x3d, r26	; 61
   1272a:	cf 91       	pop	r28
   1272c:	1f 91       	pop	r17
   1272e:	0f 91       	pop	r16
   12730:	ff 90       	pop	r15
   12732:	ef 90       	pop	r14
   12734:	df 90       	pop	r13
   12736:	cf 90       	pop	r12
   12738:	08 95       	ret

0001273a <print_tok_str>:
   1273a:	ef 92       	push	r14
   1273c:	ff 92       	push	r15
   1273e:	0f 93       	push	r16
   12740:	1f 93       	push	r17
   12742:	cf 93       	push	r28
   12744:	ad b7       	in	r26, 0x3d	; 61
   12746:	be b7       	in	r27, 0x3e	; 62
   12748:	17 97       	sbiw	r26, 0x07	; 7
   1274a:	0f b6       	in	r0, 0x3f	; 63
   1274c:	f8 94       	cli
   1274e:	be bf       	out	0x3e, r27	; 62
   12750:	0f be       	out	0x3f, r0	; 63
   12752:	ad bf       	out	0x3d, r26	; 61
   12754:	c6 2f       	mov	r28, r22
   12756:	7a 01       	movw	r14, r20
   12758:	91 df       	rcall	.-222    	; 0x1267c <tok_name>
   1275a:	8c 01       	movw	r16, r24
   1275c:	cc 23       	and	r28, r28
   1275e:	31 f0       	breq	.+12     	; 0x1276c <print_tok_str+0x32>
   12760:	80 e2       	ldi	r24, 0x20	; 32
   12762:	90 e0       	ldi	r25, 0x00	; 0
   12764:	0e 94 7d 76 	call	0xecfa	; 0xecfa <putchar>
   12768:	c1 50       	subi	r28, 0x01	; 1
   1276a:	f8 cf       	rjmp	.-16     	; 0x1275c <print_tok_str+0x22>
   1276c:	ed b7       	in	r30, 0x3d	; 61
   1276e:	fe b7       	in	r31, 0x3e	; 62
   12770:	f7 82       	std	Z+7, r15	; 0x07
   12772:	e6 82       	std	Z+6, r14	; 0x06
   12774:	15 83       	std	Z+5, r17	; 0x05
   12776:	04 83       	std	Z+4, r16	; 0x04
   12778:	82 e3       	ldi	r24, 0x32	; 50
   1277a:	91 e2       	ldi	r25, 0x21	; 33
   1277c:	a0 e0       	ldi	r26, 0x00	; 0
   1277e:	81 83       	std	Z+1, r24	; 0x01
   12780:	92 83       	std	Z+2, r25	; 0x02
   12782:	a3 83       	std	Z+3, r26	; 0x03
   12784:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   12788:	ad b7       	in	r26, 0x3d	; 61
   1278a:	be b7       	in	r27, 0x3e	; 62
   1278c:	17 96       	adiw	r26, 0x07	; 7
   1278e:	0f b6       	in	r0, 0x3f	; 63
   12790:	f8 94       	cli
   12792:	be bf       	out	0x3e, r27	; 62
   12794:	0f be       	out	0x3f, r0	; 63
   12796:	ad bf       	out	0x3d, r26	; 61
   12798:	cf 91       	pop	r28
   1279a:	1f 91       	pop	r17
   1279c:	0f 91       	pop	r16
   1279e:	ff 90       	pop	r15
   127a0:	ef 90       	pop	r14
   127a2:	08 95       	ret

000127a4 <print_tok>:
   127a4:	0f 93       	push	r16
   127a6:	1f 93       	push	r17
   127a8:	cf 93       	push	r28
   127aa:	00 d0       	rcall	.+0      	; 0x127ac <print_tok+0x8>
   127ac:	00 d0       	rcall	.+0      	; 0x127ae <print_tok+0xa>
   127ae:	1f 92       	push	r1
   127b0:	c6 2f       	mov	r28, r22
   127b2:	64 df       	rcall	.-312    	; 0x1267c <tok_name>
   127b4:	8c 01       	movw	r16, r24
   127b6:	cc 23       	and	r28, r28
   127b8:	31 f0       	breq	.+12     	; 0x127c6 <print_tok+0x22>
   127ba:	80 e2       	ldi	r24, 0x20	; 32
   127bc:	90 e0       	ldi	r25, 0x00	; 0
   127be:	0e 94 7d 76 	call	0xecfa	; 0xecfa <putchar>
   127c2:	c1 50       	subi	r28, 0x01	; 1
   127c4:	f8 cf       	rjmp	.-16     	; 0x127b6 <print_tok+0x12>
   127c6:	ed b7       	in	r30, 0x3d	; 61
   127c8:	fe b7       	in	r31, 0x3e	; 62
   127ca:	15 83       	std	Z+5, r17	; 0x05
   127cc:	04 83       	std	Z+4, r16	; 0x04
   127ce:	8e e2       	ldi	r24, 0x2E	; 46
   127d0:	91 e2       	ldi	r25, 0x21	; 33
   127d2:	a0 e0       	ldi	r26, 0x00	; 0
   127d4:	81 83       	std	Z+1, r24	; 0x01
   127d6:	92 83       	std	Z+2, r25	; 0x02
   127d8:	a3 83       	std	Z+3, r26	; 0x03
   127da:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   127de:	0f 90       	pop	r0
   127e0:	0f 90       	pop	r0
   127e2:	0f 90       	pop	r0
   127e4:	0f 90       	pop	r0
   127e6:	0f 90       	pop	r0
   127e8:	cf 91       	pop	r28
   127ea:	1f 91       	pop	r17
   127ec:	0f 91       	pop	r16
   127ee:	08 95       	ret

000127f0 <display_Addresses>:
   127f0:	2f 92       	push	r2
   127f2:	3f 92       	push	r3
   127f4:	4f 92       	push	r4
   127f6:	6f 92       	push	r6
   127f8:	7f 92       	push	r7
   127fa:	8f 92       	push	r8
   127fc:	cf 92       	push	r12
   127fe:	df 92       	push	r13
   12800:	ef 92       	push	r14
   12802:	0f 93       	push	r16
   12804:	1f 93       	push	r17
   12806:	cf 93       	push	r28
   12808:	df 93       	push	r29
   1280a:	cd b7       	in	r28, 0x3d	; 61
   1280c:	de b7       	in	r29, 0x3e	; 62
   1280e:	2a 97       	sbiw	r28, 0x0a	; 10
   12810:	0f b6       	in	r0, 0x3f	; 63
   12812:	f8 94       	cli
   12814:	de bf       	out	0x3e, r29	; 62
   12816:	0f be       	out	0x3f, r0	; 63
   12818:	cd bf       	out	0x3d, r28	; 61
   1281a:	88 ef       	ldi	r24, 0xF8	; 248
   1281c:	9d e1       	ldi	r25, 0x1D	; 29
   1281e:	a0 e0       	ldi	r26, 0x00	; 0
   12820:	ed b7       	in	r30, 0x3d	; 61
   12822:	fe b7       	in	r31, 0x3e	; 62
   12824:	81 83       	std	Z+1, r24	; 0x01
   12826:	92 83       	std	Z+2, r25	; 0x02
   12828:	a3 83       	std	Z+3, r26	; 0x03
   1282a:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   1282e:	04 ef       	ldi	r16, 0xF4	; 244
   12830:	1e e1       	ldi	r17, 0x1E	; 30
   12832:	8a ed       	ldi	r24, 0xDA	; 218
   12834:	9d e1       	ldi	r25, 0x1D	; 29
   12836:	6c 01       	movw	r12, r24
   12838:	e1 2c       	mov	r14, r1
   1283a:	8c ed       	ldi	r24, 0xDC	; 220
   1283c:	9d e1       	ldi	r25, 0x1D	; 29
   1283e:	3c 01       	movw	r6, r24
   12840:	81 2c       	mov	r8, r1
   12842:	85 ee       	ldi	r24, 0xE5	; 229
   12844:	9d e1       	ldi	r25, 0x1D	; 29
   12846:	1c 01       	movw	r2, r24
   12848:	41 2c       	mov	r4, r1
   1284a:	8f ee       	ldi	r24, 0xEF	; 239
   1284c:	9d e1       	ldi	r25, 0x1D	; 29
   1284e:	9c 01       	movw	r18, r24
   12850:	40 e0       	ldi	r20, 0x00	; 0
   12852:	2e 83       	std	Y+6, r18	; 0x06
   12854:	3f 83       	std	Y+7, r19	; 0x07
   12856:	48 87       	std	Y+8, r20	; 0x08
   12858:	f8 01       	movw	r30, r16
   1285a:	80 81       	ld	r24, Z
   1285c:	88 23       	and	r24, r24
   1285e:	09 f4       	brne	.+2      	; 0x12862 <display_Addresses+0x72>
   12860:	76 c0       	rjmp	.+236    	; 0x1294e <display_Addresses+0x15e>
   12862:	83 30       	cpi	r24, 0x03	; 3
   12864:	21 f0       	breq	.+8      	; 0x1286e <display_Addresses+0x7e>
   12866:	81 30       	cpi	r24, 0x01	; 1
   12868:	09 f0       	breq	.+2      	; 0x1286c <display_Addresses+0x7c>
   1286a:	57 c0       	rjmp	.+174    	; 0x1291a <display_Addresses+0x12a>
   1286c:	1f c0       	rjmp	.+62     	; 0x128ac <display_Addresses+0xbc>
   1286e:	f8 01       	movw	r30, r16
   12870:	87 81       	ldd	r24, Z+7	; 0x07
   12872:	90 85       	ldd	r25, Z+8	; 0x08
   12874:	90 93 69 19 	sts	0x1969, r25	; 0x801969 <SS80p+0x1>
   12878:	80 93 68 19 	sts	0x1968, r24	; 0x801968 <SS80p>
   1287c:	fc 01       	movw	r30, r24
   1287e:	84 81       	ldd	r24, Z+4	; 0x04
   12880:	95 81       	ldd	r25, Z+5	; 0x05
   12882:	ed b7       	in	r30, 0x3d	; 61
   12884:	fe b7       	in	r31, 0x3e	; 62
   12886:	95 83       	std	Z+5, r25	; 0x05
   12888:	84 83       	std	Z+4, r24	; 0x04
   1288a:	2e 81       	ldd	r18, Y+6	; 0x06
   1288c:	3f 81       	ldd	r19, Y+7	; 0x07
   1288e:	48 85       	ldd	r20, Y+8	; 0x08
   12890:	21 83       	std	Z+1, r18	; 0x01
   12892:	32 83       	std	Z+2, r19	; 0x02
   12894:	43 83       	std	Z+3, r20	; 0x03
   12896:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   1289a:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   1289e:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   128a2:	42 81       	ldd	r20, Z+2	; 0x02
   128a4:	53 81       	ldd	r21, Z+3	; 0x03
   128a6:	64 e0       	ldi	r22, 0x04	; 4
   128a8:	82 e1       	ldi	r24, 0x12	; 18
   128aa:	47 df       	rcall	.-370    	; 0x1273a <print_tok_str>
   128ac:	f8 01       	movw	r30, r16
   128ae:	80 81       	ld	r24, Z
   128b0:	81 30       	cpi	r24, 0x01	; 1
   128b2:	d9 f4       	brne	.+54     	; 0x128ea <display_Addresses+0xfa>
   128b4:	87 81       	ldd	r24, Z+7	; 0x07
   128b6:	90 85       	ldd	r25, Z+8	; 0x08
   128b8:	90 93 65 19 	sts	0x1965, r25	; 0x801965 <AMIGOp+0x1>
   128bc:	80 93 64 19 	sts	0x1964, r24	; 0x801964 <AMIGOp>
   128c0:	fc 01       	movw	r30, r24
   128c2:	84 81       	ldd	r24, Z+4	; 0x04
   128c4:	95 81       	ldd	r25, Z+5	; 0x05
   128c6:	ed b7       	in	r30, 0x3d	; 61
   128c8:	fe b7       	in	r31, 0x3e	; 62
   128ca:	95 83       	std	Z+5, r25	; 0x05
   128cc:	84 83       	std	Z+4, r24	; 0x04
   128ce:	21 82       	std	Z+1, r2	; 0x01
   128d0:	32 82       	std	Z+2, r3	; 0x02
   128d2:	43 82       	std	Z+3, r4	; 0x03
   128d4:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   128d8:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   128dc:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   128e0:	42 81       	ldd	r20, Z+2	; 0x02
   128e2:	53 81       	ldd	r21, Z+3	; 0x03
   128e4:	64 e0       	ldi	r22, 0x04	; 4
   128e6:	82 e1       	ldi	r24, 0x12	; 18
   128e8:	28 df       	rcall	.-432    	; 0x1273a <print_tok_str>
   128ea:	f8 01       	movw	r30, r16
   128ec:	21 81       	ldd	r18, Z+1	; 0x01
   128ee:	30 e0       	ldi	r19, 0x00	; 0
   128f0:	40 e0       	ldi	r20, 0x00	; 0
   128f2:	50 e0       	ldi	r21, 0x00	; 0
   128f4:	64 e0       	ldi	r22, 0x04	; 4
   128f6:	81 e0       	ldi	r24, 0x01	; 1
   128f8:	e0 de       	rcall	.-576    	; 0x126ba <print_tok_val>
   128fa:	f8 01       	movw	r30, r16
   128fc:	22 81       	ldd	r18, Z+2	; 0x02
   128fe:	30 e0       	ldi	r19, 0x00	; 0
   12900:	40 e0       	ldi	r20, 0x00	; 0
   12902:	50 e0       	ldi	r21, 0x00	; 0
   12904:	64 e0       	ldi	r22, 0x04	; 4
   12906:	8f e1       	ldi	r24, 0x1F	; 31
   12908:	d8 de       	rcall	.-592    	; 0x126ba <print_tok_val>
   1290a:	f8 01       	movw	r30, r16
   1290c:	23 81       	ldd	r18, Z+3	; 0x03
   1290e:	34 81       	ldd	r19, Z+4	; 0x04
   12910:	45 81       	ldd	r20, Z+5	; 0x05
   12912:	56 81       	ldd	r21, Z+6	; 0x06
   12914:	64 e0       	ldi	r22, 0x04	; 4
   12916:	83 e0       	ldi	r24, 0x03	; 3
   12918:	d0 de       	rcall	.-608    	; 0x126ba <print_tok_val>
   1291a:	f8 01       	movw	r30, r16
   1291c:	80 81       	ld	r24, Z
   1291e:	84 30       	cpi	r24, 0x04	; 4
   12920:	79 f4       	brne	.+30     	; 0x12940 <display_Addresses+0x150>
   12922:	ed b7       	in	r30, 0x3d	; 61
   12924:	fe b7       	in	r31, 0x3e	; 62
   12926:	61 82       	std	Z+1, r6	; 0x01
   12928:	72 82       	std	Z+2, r7	; 0x02
   1292a:	83 82       	std	Z+3, r8	; 0x03
   1292c:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   12930:	f8 01       	movw	r30, r16
   12932:	21 81       	ldd	r18, Z+1	; 0x01
   12934:	30 e0       	ldi	r19, 0x00	; 0
   12936:	40 e0       	ldi	r20, 0x00	; 0
   12938:	50 e0       	ldi	r21, 0x00	; 0
   1293a:	64 e0       	ldi	r22, 0x04	; 4
   1293c:	81 e0       	ldi	r24, 0x01	; 1
   1293e:	bd de       	rcall	.-646    	; 0x126ba <print_tok_val>
   12940:	ed b7       	in	r30, 0x3d	; 61
   12942:	fe b7       	in	r31, 0x3e	; 62
   12944:	c1 82       	std	Z+1, r12	; 0x01
   12946:	d2 82       	std	Z+2, r13	; 0x02
   12948:	e3 82       	std	Z+3, r14	; 0x03
   1294a:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   1294e:	05 5f       	subi	r16, 0xF5	; 245
   12950:	1f 4f       	sbci	r17, 0xFF	; 255
   12952:	ff e1       	ldi	r31, 0x1F	; 31
   12954:	08 37       	cpi	r16, 0x78	; 120
   12956:	1f 07       	cpc	r17, r31
   12958:	09 f0       	breq	.+2      	; 0x1295c <display_Addresses+0x16c>
   1295a:	7e cf       	rjmp	.-260    	; 0x12858 <display_Addresses+0x68>
   1295c:	88 ed       	ldi	r24, 0xD8	; 216
   1295e:	9d e1       	ldi	r25, 0x1D	; 29
   12960:	a0 e0       	ldi	r26, 0x00	; 0
   12962:	ed b7       	in	r30, 0x3d	; 61
   12964:	fe b7       	in	r31, 0x3e	; 62
   12966:	81 83       	std	Z+1, r24	; 0x01
   12968:	92 83       	std	Z+2, r25	; 0x02
   1296a:	a3 83       	std	Z+3, r26	; 0x03
   1296c:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   12970:	2a 96       	adiw	r28, 0x0a	; 10
   12972:	0f b6       	in	r0, 0x3f	; 63
   12974:	f8 94       	cli
   12976:	de bf       	out	0x3e, r29	; 62
   12978:	0f be       	out	0x3f, r0	; 63
   1297a:	cd bf       	out	0x3d, r28	; 61
   1297c:	df 91       	pop	r29
   1297e:	cf 91       	pop	r28
   12980:	1f 91       	pop	r17
   12982:	0f 91       	pop	r16
   12984:	ef 90       	pop	r14
   12986:	df 90       	pop	r13
   12988:	cf 90       	pop	r12
   1298a:	8f 90       	pop	r8
   1298c:	7f 90       	pop	r7
   1298e:	6f 90       	pop	r6
   12990:	4f 90       	pop	r4
   12992:	3f 90       	pop	r3
   12994:	2f 90       	pop	r2
   12996:	08 95       	ret

00012998 <display_Config>:
   12998:	2f 92       	push	r2
   1299a:	3f 92       	push	r3
   1299c:	4f 92       	push	r4
   1299e:	6f 92       	push	r6
   129a0:	7f 92       	push	r7
   129a2:	8f 92       	push	r8
   129a4:	af 92       	push	r10
   129a6:	bf 92       	push	r11
   129a8:	cf 92       	push	r12
   129aa:	df 92       	push	r13
   129ac:	ef 92       	push	r14
   129ae:	0f 93       	push	r16
   129b0:	1f 93       	push	r17
   129b2:	cf 93       	push	r28
   129b4:	df 93       	push	r29
   129b6:	cd b7       	in	r28, 0x3d	; 61
   129b8:	de b7       	in	r29, 0x3e	; 62
   129ba:	62 97       	sbiw	r28, 0x12	; 18
   129bc:	0f b6       	in	r0, 0x3f	; 63
   129be:	f8 94       	cli
   129c0:	de bf       	out	0x3e, r29	; 62
   129c2:	0f be       	out	0x3f, r0	; 63
   129c4:	cd bf       	out	0x3d, r28	; 61
   129c6:	5c 01       	movw	r10, r24
   129c8:	88 eb       	ldi	r24, 0xB8	; 184
   129ca:	9d e1       	ldi	r25, 0x1D	; 29
   129cc:	a0 e0       	ldi	r26, 0x00	; 0
   129ce:	ed b7       	in	r30, 0x3d	; 61
   129d0:	fe b7       	in	r31, 0x3e	; 62
   129d2:	81 83       	std	Z+1, r24	; 0x01
   129d4:	92 83       	std	Z+2, r25	; 0x02
   129d6:	a3 83       	std	Z+3, r26	; 0x03
   129d8:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   129dc:	04 ef       	ldi	r16, 0xF4	; 244
   129de:	1e e1       	ldi	r17, 0x1E	; 30
   129e0:	8d e3       	ldi	r24, 0x3D	; 61
   129e2:	9d e1       	ldi	r25, 0x1D	; 29
   129e4:	9c 01       	movw	r18, r24
   129e6:	40 e0       	ldi	r20, 0x00	; 0
   129e8:	28 87       	std	Y+8, r18	; 0x08
   129ea:	39 87       	std	Y+9, r19	; 0x09
   129ec:	4a 87       	std	Y+10, r20	; 0x0a
   129ee:	82 e7       	ldi	r24, 0x72	; 114
   129f0:	9d e1       	ldi	r25, 0x1D	; 29
   129f2:	6c 01       	movw	r12, r24
   129f4:	e1 2c       	mov	r14, r1
   129f6:	83 e5       	ldi	r24, 0x53	; 83
   129f8:	9d e1       	ldi	r25, 0x1D	; 29
   129fa:	3c 01       	movw	r6, r24
   129fc:	81 2c       	mov	r8, r1
   129fe:	8f e3       	ldi	r24, 0x3F	; 63
   12a00:	9d e1       	ldi	r25, 0x1D	; 29
   12a02:	1c 01       	movw	r2, r24
   12a04:	41 2c       	mov	r4, r1
   12a06:	8f ea       	ldi	r24, 0xAF	; 175
   12a08:	9d e1       	ldi	r25, 0x1D	; 29
   12a0a:	9c 01       	movw	r18, r24
   12a0c:	40 e0       	ldi	r20, 0x00	; 0
   12a0e:	2b 87       	std	Y+11, r18	; 0x0b
   12a10:	3c 87       	std	Y+12, r19	; 0x0c
   12a12:	4d 87       	std	Y+13, r20	; 0x0d
   12a14:	80 e9       	ldi	r24, 0x90	; 144
   12a16:	9d e1       	ldi	r25, 0x1D	; 29
   12a18:	9c 01       	movw	r18, r24
   12a1a:	40 e0       	ldi	r20, 0x00	; 0
   12a1c:	2e 87       	std	Y+14, r18	; 0x0e
   12a1e:	3f 87       	std	Y+15, r19	; 0x0f
   12a20:	48 8b       	std	Y+16, r20	; 0x10
   12a22:	f8 01       	movw	r30, r16
   12a24:	80 81       	ld	r24, Z
   12a26:	88 23       	and	r24, r24
   12a28:	09 f4       	brne	.+2      	; 0x12a2c <display_Config+0x94>
   12a2a:	16 c2       	rjmp	.+1068   	; 0x12e58 <display_Config+0x4c0>
   12a2c:	83 30       	cpi	r24, 0x03	; 3
   12a2e:	09 f0       	breq	.+2      	; 0x12a32 <display_Config+0x9a>
   12a30:	3f c1       	rjmp	.+638    	; 0x12cb0 <display_Config+0x318>
   12a32:	27 81       	ldd	r18, Z+7	; 0x07
   12a34:	30 85       	ldd	r19, Z+8	; 0x08
   12a36:	3a 8b       	std	Y+18, r19	; 0x12
   12a38:	29 8b       	std	Y+17, r18	; 0x11
   12a3a:	f9 01       	movw	r30, r18
   12a3c:	84 81       	ldd	r24, Z+4	; 0x04
   12a3e:	95 81       	ldd	r25, Z+5	; 0x05
   12a40:	ed b7       	in	r30, 0x3d	; 61
   12a42:	fe b7       	in	r31, 0x3e	; 62
   12a44:	95 83       	std	Z+5, r25	; 0x05
   12a46:	84 83       	std	Z+4, r24	; 0x04
   12a48:	2b 85       	ldd	r18, Y+11	; 0x0b
   12a4a:	3c 85       	ldd	r19, Y+12	; 0x0c
   12a4c:	4d 85       	ldd	r20, Y+13	; 0x0d
   12a4e:	21 83       	std	Z+1, r18	; 0x01
   12a50:	32 83       	std	Z+2, r19	; 0x02
   12a52:	43 83       	std	Z+3, r20	; 0x03
   12a54:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   12a58:	e9 89       	ldd	r30, Y+17	; 0x11
   12a5a:	fa 89       	ldd	r31, Y+18	; 0x12
   12a5c:	80 81       	ld	r24, Z
   12a5e:	90 e0       	ldi	r25, 0x00	; 0
   12a60:	ed b7       	in	r30, 0x3d	; 61
   12a62:	fe b7       	in	r31, 0x3e	; 62
   12a64:	95 83       	std	Z+5, r25	; 0x05
   12a66:	84 83       	std	Z+4, r24	; 0x04
   12a68:	2e 85       	ldd	r18, Y+14	; 0x0e
   12a6a:	3f 85       	ldd	r19, Y+15	; 0x0f
   12a6c:	48 89       	ldd	r20, Y+16	; 0x10
   12a6e:	21 83       	std	Z+1, r18	; 0x01
   12a70:	32 83       	std	Z+2, r19	; 0x02
   12a72:	43 83       	std	Z+3, r20	; 0x03
   12a74:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   12a78:	64 e0       	ldi	r22, 0x04	; 4
   12a7a:	89 e0       	ldi	r24, 0x09	; 9
   12a7c:	93 de       	rcall	.-730    	; 0x127a4 <print_tok>
   12a7e:	e9 89       	ldd	r30, Y+17	; 0x11
   12a80:	fa 89       	ldd	r31, Y+18	; 0x12
   12a82:	20 81       	ld	r18, Z
   12a84:	30 e0       	ldi	r19, 0x00	; 0
   12a86:	40 e0       	ldi	r20, 0x00	; 0
   12a88:	50 e0       	ldi	r21, 0x00	; 0
   12a8a:	68 e0       	ldi	r22, 0x08	; 8
   12a8c:	81 e0       	ldi	r24, 0x01	; 1
   12a8e:	15 de       	rcall	.-982    	; 0x126ba <print_tok_val>
   12a90:	e9 89       	ldd	r30, Y+17	; 0x11
   12a92:	fa 89       	ldd	r31, Y+18	; 0x12
   12a94:	21 81       	ldd	r18, Z+1	; 0x01
   12a96:	30 e0       	ldi	r19, 0x00	; 0
   12a98:	40 e0       	ldi	r20, 0x00	; 0
   12a9a:	50 e0       	ldi	r21, 0x00	; 0
   12a9c:	68 e0       	ldi	r22, 0x08	; 8
   12a9e:	8f e1       	ldi	r24, 0x1F	; 31
   12aa0:	0c de       	rcall	.-1000   	; 0x126ba <print_tok_val>
   12aa2:	e9 89       	ldd	r30, Y+17	; 0x11
   12aa4:	fa 89       	ldd	r31, Y+18	; 0x12
   12aa6:	42 81       	ldd	r20, Z+2	; 0x02
   12aa8:	53 81       	ldd	r21, Z+3	; 0x03
   12aaa:	68 e0       	ldi	r22, 0x08	; 8
   12aac:	82 e1       	ldi	r24, 0x12	; 18
   12aae:	45 de       	rcall	.-886    	; 0x1273a <print_tok_str>
   12ab0:	64 e0       	ldi	r22, 0x04	; 4
   12ab2:	81 e1       	ldi	r24, 0x11	; 17
   12ab4:	77 de       	rcall	.-786    	; 0x127a4 <print_tok>
   12ab6:	64 e0       	ldi	r22, 0x04	; 4
   12ab8:	85 e1       	ldi	r24, 0x15	; 21
   12aba:	74 de       	rcall	.-792    	; 0x127a4 <print_tok>
   12abc:	e9 89       	ldd	r30, Y+17	; 0x11
   12abe:	fa 89       	ldd	r31, Y+18	; 0x12
   12ac0:	26 81       	ldd	r18, Z+6	; 0x06
   12ac2:	37 81       	ldd	r19, Z+7	; 0x07
   12ac4:	40 e0       	ldi	r20, 0x00	; 0
   12ac6:	50 e0       	ldi	r21, 0x00	; 0
   12ac8:	68 e0       	ldi	r22, 0x08	; 8
   12aca:	87 e1       	ldi	r24, 0x17	; 23
   12acc:	f6 dd       	rcall	.-1044   	; 0x126ba <print_tok_val>
   12ace:	64 e0       	ldi	r22, 0x04	; 4
   12ad0:	81 e1       	ldi	r24, 0x11	; 17
   12ad2:	68 de       	rcall	.-816    	; 0x127a4 <print_tok>
   12ad4:	a1 14       	cp	r10, r1
   12ad6:	b1 04       	cpc	r11, r1
   12ad8:	09 f1       	breq	.+66     	; 0x12b1c <display_Config+0x184>
   12ada:	64 e0       	ldi	r22, 0x04	; 4
   12adc:	8b e0       	ldi	r24, 0x0B	; 11
   12ade:	62 de       	rcall	.-828    	; 0x127a4 <print_tok>
   12ae0:	e9 89       	ldd	r30, Y+17	; 0x11
   12ae2:	fa 89       	ldd	r31, Y+18	; 0x12
   12ae4:	20 85       	ldd	r18, Z+8	; 0x08
   12ae6:	31 85       	ldd	r19, Z+9	; 0x09
   12ae8:	40 e0       	ldi	r20, 0x00	; 0
   12aea:	50 e0       	ldi	r21, 0x00	; 0
   12aec:	68 e0       	ldi	r22, 0x08	; 8
   12aee:	88 e2       	ldi	r24, 0x28	; 40
   12af0:	e4 dd       	rcall	.-1080   	; 0x126ba <print_tok_val>
   12af2:	e9 89       	ldd	r30, Y+17	; 0x11
   12af4:	fa 89       	ldd	r31, Y+18	; 0x12
   12af6:	22 85       	ldd	r18, Z+10	; 0x0a
   12af8:	33 85       	ldd	r19, Z+11	; 0x0b
   12afa:	40 e0       	ldi	r20, 0x00	; 0
   12afc:	50 e0       	ldi	r21, 0x00	; 0
   12afe:	68 e0       	ldi	r22, 0x08	; 8
   12b00:	85 e2       	ldi	r24, 0x25	; 37
   12b02:	db dd       	rcall	.-1098   	; 0x126ba <print_tok_val>
   12b04:	e9 89       	ldd	r30, Y+17	; 0x11
   12b06:	fa 89       	ldd	r31, Y+18	; 0x12
   12b08:	24 85       	ldd	r18, Z+12	; 0x0c
   12b0a:	30 e0       	ldi	r19, 0x00	; 0
   12b0c:	40 e0       	ldi	r20, 0x00	; 0
   12b0e:	50 e0       	ldi	r21, 0x00	; 0
   12b10:	68 e0       	ldi	r22, 0x08	; 8
   12b12:	86 e2       	ldi	r24, 0x26	; 38
   12b14:	d2 dd       	rcall	.-1116   	; 0x126ba <print_tok_val>
   12b16:	64 e0       	ldi	r22, 0x04	; 4
   12b18:	81 e1       	ldi	r24, 0x11	; 17
   12b1a:	44 de       	rcall	.-888    	; 0x127a4 <print_tok>
   12b1c:	64 e0       	ldi	r22, 0x04	; 4
   12b1e:	87 e2       	ldi	r24, 0x27	; 39
   12b20:	41 de       	rcall	.-894    	; 0x127a4 <print_tok>
   12b22:	a1 14       	cp	r10, r1
   12b24:	b1 04       	cpc	r11, r1
   12b26:	49 f0       	breq	.+18     	; 0x12b3a <display_Config+0x1a2>
   12b28:	e9 89       	ldd	r30, Y+17	; 0x11
   12b2a:	fa 89       	ldd	r31, Y+18	; 0x12
   12b2c:	25 85       	ldd	r18, Z+13	; 0x0d
   12b2e:	30 e0       	ldi	r19, 0x00	; 0
   12b30:	40 e0       	ldi	r20, 0x00	; 0
   12b32:	50 e0       	ldi	r21, 0x00	; 0
   12b34:	68 e0       	ldi	r22, 0x08	; 8
   12b36:	89 e2       	ldi	r24, 0x29	; 41
   12b38:	c0 dd       	rcall	.-1152   	; 0x126ba <print_tok_val>
   12b3a:	e9 89       	ldd	r30, Y+17	; 0x11
   12b3c:	fa 89       	ldd	r31, Y+18	; 0x12
   12b3e:	26 85       	ldd	r18, Z+14	; 0x0e
   12b40:	37 85       	ldd	r19, Z+15	; 0x0f
   12b42:	40 89       	ldd	r20, Z+16	; 0x10
   12b44:	51 89       	ldd	r21, Z+17	; 0x11
   12b46:	68 e0       	ldi	r22, 0x08	; 8
   12b48:	8f e0       	ldi	r24, 0x0F	; 15
   12b4a:	b7 dd       	rcall	.-1170   	; 0x126ba <print_tok_val>
   12b4c:	a1 14       	cp	r10, r1
   12b4e:	b1 04       	cpc	r11, r1
   12b50:	09 f4       	brne	.+2      	; 0x12b54 <display_Config+0x1bc>
   12b52:	5a c0       	rjmp	.+180    	; 0x12c08 <display_Config+0x270>
   12b54:	e9 89       	ldd	r30, Y+17	; 0x11
   12b56:	fa 89       	ldd	r31, Y+18	; 0x12
   12b58:	22 89       	ldd	r18, Z+18	; 0x12
   12b5a:	33 89       	ldd	r19, Z+19	; 0x13
   12b5c:	40 e0       	ldi	r20, 0x00	; 0
   12b5e:	50 e0       	ldi	r21, 0x00	; 0
   12b60:	68 e0       	ldi	r22, 0x08	; 8
   12b62:	87 e0       	ldi	r24, 0x07	; 7
   12b64:	aa dd       	rcall	.-1196   	; 0x126ba <print_tok_val>
   12b66:	e9 89       	ldd	r30, Y+17	; 0x11
   12b68:	fa 89       	ldd	r31, Y+18	; 0x12
   12b6a:	24 89       	ldd	r18, Z+20	; 0x14
   12b6c:	30 e0       	ldi	r19, 0x00	; 0
   12b6e:	40 e0       	ldi	r20, 0x00	; 0
   12b70:	50 e0       	ldi	r21, 0x00	; 0
   12b72:	68 e0       	ldi	r22, 0x08	; 8
   12b74:	85 e0       	ldi	r24, 0x05	; 5
   12b76:	a1 dd       	rcall	.-1214   	; 0x126ba <print_tok_val>
   12b78:	e9 89       	ldd	r30, Y+17	; 0x11
   12b7a:	fa 89       	ldd	r31, Y+18	; 0x12
   12b7c:	25 89       	ldd	r18, Z+21	; 0x15
   12b7e:	30 e0       	ldi	r19, 0x00	; 0
   12b80:	40 e0       	ldi	r20, 0x00	; 0
   12b82:	50 e0       	ldi	r21, 0x00	; 0
   12b84:	68 e0       	ldi	r22, 0x08	; 8
   12b86:	86 e0       	ldi	r24, 0x06	; 6
   12b88:	98 dd       	rcall	.-1232   	; 0x126ba <print_tok_val>
   12b8a:	e9 89       	ldd	r30, Y+17	; 0x11
   12b8c:	fa 89       	ldd	r31, Y+18	; 0x12
   12b8e:	26 89       	ldd	r18, Z+22	; 0x16
   12b90:	37 89       	ldd	r19, Z+23	; 0x17
   12b92:	40 e0       	ldi	r20, 0x00	; 0
   12b94:	50 e0       	ldi	r21, 0x00	; 0
   12b96:	68 e0       	ldi	r22, 0x08	; 8
   12b98:	84 e0       	ldi	r24, 0x04	; 4
   12b9a:	8f dd       	rcall	.-1250   	; 0x126ba <print_tok_val>
   12b9c:	e9 89       	ldd	r30, Y+17	; 0x11
   12b9e:	fa 89       	ldd	r31, Y+18	; 0x12
   12ba0:	20 8d       	ldd	r18, Z+24	; 0x18
   12ba2:	31 8d       	ldd	r19, Z+25	; 0x19
   12ba4:	40 e0       	ldi	r20, 0x00	; 0
   12ba6:	50 e0       	ldi	r21, 0x00	; 0
   12ba8:	68 e0       	ldi	r22, 0x08	; 8
   12baa:	8a e0       	ldi	r24, 0x0A	; 10
   12bac:	86 dd       	rcall	.-1268   	; 0x126ba <print_tok_val>
   12bae:	e9 89       	ldd	r30, Y+17	; 0x11
   12bb0:	fa 89       	ldd	r31, Y+18	; 0x12
   12bb2:	22 8d       	ldd	r18, Z+26	; 0x1a
   12bb4:	33 8d       	ldd	r19, Z+27	; 0x1b
   12bb6:	40 e0       	ldi	r20, 0x00	; 0
   12bb8:	50 e0       	ldi	r21, 0x00	; 0
   12bba:	68 e0       	ldi	r22, 0x08	; 8
   12bbc:	8e e1       	ldi	r24, 0x1E	; 30
   12bbe:	7d dd       	rcall	.-1286   	; 0x126ba <print_tok_val>
   12bc0:	e9 89       	ldd	r30, Y+17	; 0x11
   12bc2:	fa 89       	ldd	r31, Y+18	; 0x12
   12bc4:	24 8d       	ldd	r18, Z+28	; 0x1c
   12bc6:	35 8d       	ldd	r19, Z+29	; 0x1d
   12bc8:	40 e0       	ldi	r20, 0x00	; 0
   12bca:	50 e0       	ldi	r21, 0x00	; 0
   12bcc:	68 e0       	ldi	r22, 0x08	; 8
   12bce:	80 e0       	ldi	r24, 0x00	; 0
   12bd0:	74 dd       	rcall	.-1304   	; 0x126ba <print_tok_val>
   12bd2:	e9 89       	ldd	r30, Y+17	; 0x11
   12bd4:	fa 89       	ldd	r31, Y+18	; 0x12
   12bd6:	26 8d       	ldd	r18, Z+30	; 0x1e
   12bd8:	30 e0       	ldi	r19, 0x00	; 0
   12bda:	40 e0       	ldi	r20, 0x00	; 0
   12bdc:	50 e0       	ldi	r21, 0x00	; 0
   12bde:	68 e0       	ldi	r22, 0x08	; 8
   12be0:	8c e1       	ldi	r24, 0x1C	; 28
   12be2:	6b dd       	rcall	.-1322   	; 0x126ba <print_tok_val>
   12be4:	e9 89       	ldd	r30, Y+17	; 0x11
   12be6:	fa 89       	ldd	r31, Y+18	; 0x12
   12be8:	27 8d       	ldd	r18, Z+31	; 0x1f
   12bea:	30 e0       	ldi	r19, 0x00	; 0
   12bec:	40 e0       	ldi	r20, 0x00	; 0
   12bee:	50 e0       	ldi	r21, 0x00	; 0
   12bf0:	68 e0       	ldi	r22, 0x08	; 8
   12bf2:	83 e1       	ldi	r24, 0x13	; 19
   12bf4:	62 dd       	rcall	.-1340   	; 0x126ba <print_tok_val>
   12bf6:	e9 89       	ldd	r30, Y+17	; 0x11
   12bf8:	fa 89       	ldd	r31, Y+18	; 0x12
   12bfa:	20 a1       	ldd	r18, Z+32	; 0x20
   12bfc:	30 e0       	ldi	r19, 0x00	; 0
   12bfe:	40 e0       	ldi	r20, 0x00	; 0
   12c00:	50 e0       	ldi	r21, 0x00	; 0
   12c02:	68 e0       	ldi	r22, 0x08	; 8
   12c04:	81 e2       	ldi	r24, 0x21	; 33
   12c06:	59 dd       	rcall	.-1358   	; 0x126ba <print_tok_val>
   12c08:	64 e0       	ldi	r22, 0x04	; 4
   12c0a:	81 e1       	ldi	r24, 0x11	; 17
   12c0c:	cb dd       	rcall	.-1130   	; 0x127a4 <print_tok>
   12c0e:	a1 14       	cp	r10, r1
   12c10:	b1 04       	cpc	r11, r1
   12c12:	99 f1       	breq	.+102    	; 0x12c7a <display_Config+0x2e2>
   12c14:	64 e0       	ldi	r22, 0x04	; 4
   12c16:	8a e2       	ldi	r24, 0x2A	; 42
   12c18:	c5 dd       	rcall	.-1142   	; 0x127a4 <print_tok>
   12c1a:	e9 89       	ldd	r30, Y+17	; 0x11
   12c1c:	fa 89       	ldd	r31, Y+18	; 0x12
   12c1e:	21 a1       	ldd	r18, Z+33	; 0x21
   12c20:	32 a1       	ldd	r19, Z+34	; 0x22
   12c22:	43 a1       	ldd	r20, Z+35	; 0x23
   12c24:	54 a1       	ldd	r21, Z+36	; 0x24
   12c26:	68 e0       	ldi	r22, 0x08	; 8
   12c28:	8a e1       	ldi	r24, 0x1A	; 26
   12c2a:	47 dd       	rcall	.-1394   	; 0x126ba <print_tok_val>
   12c2c:	e9 89       	ldd	r30, Y+17	; 0x11
   12c2e:	fa 89       	ldd	r31, Y+18	; 0x12
   12c30:	25 a1       	ldd	r18, Z+37	; 0x25
   12c32:	30 e0       	ldi	r19, 0x00	; 0
   12c34:	40 e0       	ldi	r20, 0x00	; 0
   12c36:	50 e0       	ldi	r21, 0x00	; 0
   12c38:	68 e0       	ldi	r22, 0x08	; 8
   12c3a:	8b e1       	ldi	r24, 0x1B	; 27
   12c3c:	3e dd       	rcall	.-1412   	; 0x126ba <print_tok_val>
   12c3e:	e9 89       	ldd	r30, Y+17	; 0x11
   12c40:	fa 89       	ldd	r31, Y+18	; 0x12
   12c42:	26 a1       	ldd	r18, Z+38	; 0x26
   12c44:	37 a1       	ldd	r19, Z+39	; 0x27
   12c46:	40 e0       	ldi	r20, 0x00	; 0
   12c48:	50 e0       	ldi	r21, 0x00	; 0
   12c4a:	68 e0       	ldi	r22, 0x08	; 8
   12c4c:	8d e1       	ldi	r24, 0x1D	; 29
   12c4e:	35 dd       	rcall	.-1430   	; 0x126ba <print_tok_val>
   12c50:	e9 89       	ldd	r30, Y+17	; 0x11
   12c52:	fa 89       	ldd	r31, Y+18	; 0x12
   12c54:	20 a5       	ldd	r18, Z+40	; 0x28
   12c56:	31 a5       	ldd	r19, Z+41	; 0x29
   12c58:	42 a5       	ldd	r20, Z+42	; 0x2a
   12c5a:	53 a5       	ldd	r21, Z+43	; 0x2b
   12c5c:	68 e0       	ldi	r22, 0x08	; 8
   12c5e:	89 e1       	ldi	r24, 0x19	; 25
   12c60:	2c dd       	rcall	.-1448   	; 0x126ba <print_tok_val>
   12c62:	e9 89       	ldd	r30, Y+17	; 0x11
   12c64:	fa 89       	ldd	r31, Y+18	; 0x12
   12c66:	24 a5       	ldd	r18, Z+44	; 0x2c
   12c68:	30 e0       	ldi	r19, 0x00	; 0
   12c6a:	40 e0       	ldi	r20, 0x00	; 0
   12c6c:	50 e0       	ldi	r21, 0x00	; 0
   12c6e:	68 e0       	ldi	r22, 0x08	; 8
   12c70:	88 e1       	ldi	r24, 0x18	; 24
   12c72:	23 dd       	rcall	.-1466   	; 0x126ba <print_tok_val>
   12c74:	64 e0       	ldi	r22, 0x04	; 4
   12c76:	81 e1       	ldi	r24, 0x11	; 17
   12c78:	95 dd       	rcall	.-1238   	; 0x127a4 <print_tok>
   12c7a:	e9 89       	ldd	r30, Y+17	; 0x11
   12c7c:	fa 89       	ldd	r31, Y+18	; 0x12
   12c7e:	80 a5       	ldd	r24, Z+40	; 0x28
   12c80:	91 a5       	ldd	r25, Z+41	; 0x29
   12c82:	a2 a5       	ldd	r26, Z+42	; 0x2a
   12c84:	b3 a5       	ldd	r27, Z+43	; 0x2b
   12c86:	01 96       	adiw	r24, 0x01	; 1
   12c88:	a1 1d       	adc	r26, r1
   12c8a:	b1 1d       	adc	r27, r1
   12c8c:	ed b7       	in	r30, 0x3d	; 61
   12c8e:	fe b7       	in	r31, 0x3e	; 62
   12c90:	84 83       	std	Z+4, r24	; 0x04
   12c92:	95 83       	std	Z+5, r25	; 0x05
   12c94:	a6 83       	std	Z+6, r26	; 0x06
   12c96:	b7 83       	std	Z+7, r27	; 0x07
   12c98:	2c e7       	ldi	r18, 0x7C	; 124
   12c9a:	3d e1       	ldi	r19, 0x1D	; 29
   12c9c:	c9 01       	movw	r24, r18
   12c9e:	a0 e0       	ldi	r26, 0x00	; 0
   12ca0:	81 83       	std	Z+1, r24	; 0x01
   12ca2:	92 83       	std	Z+2, r25	; 0x02
   12ca4:	a3 83       	std	Z+3, r26	; 0x03
   12ca6:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   12caa:	60 e0       	ldi	r22, 0x00	; 0
   12cac:	81 e1       	ldi	r24, 0x11	; 17
   12cae:	7a dd       	rcall	.-1292   	; 0x127a4 <print_tok>
   12cb0:	f8 01       	movw	r30, r16
   12cb2:	80 81       	ld	r24, Z
   12cb4:	81 30       	cpi	r24, 0x01	; 1
   12cb6:	09 f0       	breq	.+2      	; 0x12cba <display_Config+0x322>
   12cb8:	a8 c0       	rjmp	.+336    	; 0x12e0a <display_Config+0x472>
   12cba:	27 81       	ldd	r18, Z+7	; 0x07
   12cbc:	30 85       	ldd	r19, Z+8	; 0x08
   12cbe:	3a 8b       	std	Y+18, r19	; 0x12
   12cc0:	29 8b       	std	Y+17, r18	; 0x11
   12cc2:	f9 01       	movw	r30, r18
   12cc4:	84 81       	ldd	r24, Z+4	; 0x04
   12cc6:	95 81       	ldd	r25, Z+5	; 0x05
   12cc8:	ed b7       	in	r30, 0x3d	; 61
   12cca:	fe b7       	in	r31, 0x3e	; 62
   12ccc:	95 83       	std	Z+5, r25	; 0x05
   12cce:	84 83       	std	Z+4, r24	; 0x04
   12cd0:	c1 82       	std	Z+1, r12	; 0x01
   12cd2:	d2 82       	std	Z+2, r13	; 0x02
   12cd4:	e3 82       	std	Z+3, r14	; 0x03
   12cd6:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   12cda:	e9 89       	ldd	r30, Y+17	; 0x11
   12cdc:	fa 89       	ldd	r31, Y+18	; 0x12
   12cde:	80 81       	ld	r24, Z
   12ce0:	90 e0       	ldi	r25, 0x00	; 0
   12ce2:	ed b7       	in	r30, 0x3d	; 61
   12ce4:	fe b7       	in	r31, 0x3e	; 62
   12ce6:	95 83       	std	Z+5, r25	; 0x05
   12ce8:	84 83       	std	Z+4, r24	; 0x04
   12cea:	61 82       	std	Z+1, r6	; 0x01
   12cec:	72 82       	std	Z+2, r7	; 0x02
   12cee:	83 82       	std	Z+3, r8	; 0x03
   12cf0:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   12cf4:	64 e0       	ldi	r22, 0x04	; 4
   12cf6:	85 e1       	ldi	r24, 0x15	; 21
   12cf8:	55 dd       	rcall	.-1366   	; 0x127a4 <print_tok>
   12cfa:	e9 89       	ldd	r30, Y+17	; 0x11
   12cfc:	fa 89       	ldd	r31, Y+18	; 0x12
   12cfe:	20 81       	ld	r18, Z
   12d00:	30 e0       	ldi	r19, 0x00	; 0
   12d02:	40 e0       	ldi	r20, 0x00	; 0
   12d04:	50 e0       	ldi	r21, 0x00	; 0
   12d06:	68 e0       	ldi	r22, 0x08	; 8
   12d08:	81 e0       	ldi	r24, 0x01	; 1
   12d0a:	d7 dc       	rcall	.-1618   	; 0x126ba <print_tok_val>
   12d0c:	e9 89       	ldd	r30, Y+17	; 0x11
   12d0e:	fa 89       	ldd	r31, Y+18	; 0x12
   12d10:	21 81       	ldd	r18, Z+1	; 0x01
   12d12:	30 e0       	ldi	r19, 0x00	; 0
   12d14:	40 e0       	ldi	r20, 0x00	; 0
   12d16:	50 e0       	ldi	r21, 0x00	; 0
   12d18:	68 e0       	ldi	r22, 0x08	; 8
   12d1a:	8f e1       	ldi	r24, 0x1F	; 31
   12d1c:	ce dc       	rcall	.-1636   	; 0x126ba <print_tok_val>
   12d1e:	e9 89       	ldd	r30, Y+17	; 0x11
   12d20:	fa 89       	ldd	r31, Y+18	; 0x12
   12d22:	42 81       	ldd	r20, Z+2	; 0x02
   12d24:	53 81       	ldd	r21, Z+3	; 0x03
   12d26:	68 e0       	ldi	r22, 0x08	; 8
   12d28:	82 e1       	ldi	r24, 0x12	; 18
   12d2a:	07 dd       	rcall	.-1522   	; 0x1273a <print_tok_str>
   12d2c:	64 e0       	ldi	r22, 0x04	; 4
   12d2e:	81 e1       	ldi	r24, 0x11	; 17
   12d30:	39 dd       	rcall	.-1422   	; 0x127a4 <print_tok>
   12d32:	64 e0       	ldi	r22, 0x04	; 4
   12d34:	89 e0       	ldi	r24, 0x09	; 9
   12d36:	36 dd       	rcall	.-1428   	; 0x127a4 <print_tok>
   12d38:	e9 89       	ldd	r30, Y+17	; 0x11
   12d3a:	fa 89       	ldd	r31, Y+18	; 0x12
   12d3c:	26 81       	ldd	r18, Z+6	; 0x06
   12d3e:	37 81       	ldd	r19, Z+7	; 0x07
   12d40:	40 e0       	ldi	r20, 0x00	; 0
   12d42:	50 e0       	ldi	r21, 0x00	; 0
   12d44:	68 e0       	ldi	r22, 0x08	; 8
   12d46:	87 e1       	ldi	r24, 0x17	; 23
   12d48:	b8 dc       	rcall	.-1680   	; 0x126ba <print_tok_val>
   12d4a:	64 e0       	ldi	r22, 0x04	; 4
   12d4c:	81 e1       	ldi	r24, 0x11	; 17
   12d4e:	2a dd       	rcall	.-1452   	; 0x127a4 <print_tok>
   12d50:	a1 14       	cp	r10, r1
   12d52:	b1 04       	cpc	r11, r1
   12d54:	91 f1       	breq	.+100    	; 0x12dba <display_Config+0x422>
   12d56:	64 e0       	ldi	r22, 0x04	; 4
   12d58:	84 e1       	ldi	r24, 0x14	; 20
   12d5a:	24 dd       	rcall	.-1464   	; 0x127a4 <print_tok>
   12d5c:	e9 89       	ldd	r30, Y+17	; 0x11
   12d5e:	fa 89       	ldd	r31, Y+18	; 0x12
   12d60:	20 85       	ldd	r18, Z+8	; 0x08
   12d62:	31 85       	ldd	r19, Z+9	; 0x09
   12d64:	03 2e       	mov	r0, r19
   12d66:	00 0c       	add	r0, r0
   12d68:	44 0b       	sbc	r20, r20
   12d6a:	55 0b       	sbc	r21, r21
   12d6c:	68 e0       	ldi	r22, 0x08	; 8
   12d6e:	88 e0       	ldi	r24, 0x08	; 8
   12d70:	a4 dc       	rcall	.-1720   	; 0x126ba <print_tok_val>
   12d72:	e9 89       	ldd	r30, Y+17	; 0x11
   12d74:	fa 89       	ldd	r31, Y+18	; 0x12
   12d76:	22 85       	ldd	r18, Z+10	; 0x0a
   12d78:	33 85       	ldd	r19, Z+11	; 0x0b
   12d7a:	03 2e       	mov	r0, r19
   12d7c:	00 0c       	add	r0, r0
   12d7e:	44 0b       	sbc	r20, r20
   12d80:	55 0b       	sbc	r21, r21
   12d82:	68 e0       	ldi	r22, 0x08	; 8
   12d84:	82 e2       	ldi	r24, 0x22	; 34
   12d86:	99 dc       	rcall	.-1742   	; 0x126ba <print_tok_val>
   12d88:	e9 89       	ldd	r30, Y+17	; 0x11
   12d8a:	fa 89       	ldd	r31, Y+18	; 0x12
   12d8c:	24 85       	ldd	r18, Z+12	; 0x0c
   12d8e:	35 85       	ldd	r19, Z+13	; 0x0d
   12d90:	03 2e       	mov	r0, r19
   12d92:	00 0c       	add	r0, r0
   12d94:	44 0b       	sbc	r20, r20
   12d96:	55 0b       	sbc	r21, r21
   12d98:	68 e0       	ldi	r22, 0x08	; 8
   12d9a:	86 e1       	ldi	r24, 0x16	; 22
   12d9c:	8e dc       	rcall	.-1764   	; 0x126ba <print_tok_val>
   12d9e:	e9 89       	ldd	r30, Y+17	; 0x11
   12da0:	fa 89       	ldd	r31, Y+18	; 0x12
   12da2:	26 85       	ldd	r18, Z+14	; 0x0e
   12da4:	37 85       	ldd	r19, Z+15	; 0x0f
   12da6:	03 2e       	mov	r0, r19
   12da8:	00 0c       	add	r0, r0
   12daa:	44 0b       	sbc	r20, r20
   12dac:	55 0b       	sbc	r21, r21
   12dae:	68 e0       	ldi	r22, 0x08	; 8
   12db0:	8d e0       	ldi	r24, 0x0D	; 13
   12db2:	83 dc       	rcall	.-1786   	; 0x126ba <print_tok_val>
   12db4:	64 e0       	ldi	r22, 0x04	; 4
   12db6:	81 e1       	ldi	r24, 0x11	; 17
   12db8:	f5 dc       	rcall	.-1558   	; 0x127a4 <print_tok>
   12dba:	e9 89       	ldd	r30, Y+17	; 0x11
   12dbc:	fa 89       	ldd	r31, Y+18	; 0x12
   12dbe:	46 85       	ldd	r20, Z+14	; 0x0e
   12dc0:	57 85       	ldd	r21, Z+15	; 0x0f
   12dc2:	22 85       	ldd	r18, Z+10	; 0x0a
   12dc4:	33 85       	ldd	r19, Z+11	; 0x0b
   12dc6:	42 9f       	mul	r20, r18
   12dc8:	c0 01       	movw	r24, r0
   12dca:	43 9f       	mul	r20, r19
   12dcc:	90 0d       	add	r25, r0
   12dce:	52 9f       	mul	r21, r18
   12dd0:	90 0d       	add	r25, r0
   12dd2:	11 24       	eor	r1, r1
   12dd4:	44 85       	ldd	r20, Z+12	; 0x0c
   12dd6:	55 85       	ldd	r21, Z+13	; 0x0d
   12dd8:	84 9f       	mul	r24, r20
   12dda:	90 01       	movw	r18, r0
   12ddc:	85 9f       	mul	r24, r21
   12dde:	30 0d       	add	r19, r0
   12de0:	94 9f       	mul	r25, r20
   12de2:	30 0d       	add	r19, r0
   12de4:	11 24       	eor	r1, r1
   12de6:	c9 01       	movw	r24, r18
   12de8:	33 0f       	add	r19, r19
   12dea:	aa 0b       	sbc	r26, r26
   12dec:	bb 0b       	sbc	r27, r27
   12dee:	ed b7       	in	r30, 0x3d	; 61
   12df0:	fe b7       	in	r31, 0x3e	; 62
   12df2:	84 83       	std	Z+4, r24	; 0x04
   12df4:	95 83       	std	Z+5, r25	; 0x05
   12df6:	a6 83       	std	Z+6, r26	; 0x06
   12df8:	b7 83       	std	Z+7, r27	; 0x07
   12dfa:	21 82       	std	Z+1, r2	; 0x01
   12dfc:	32 82       	std	Z+2, r3	; 0x02
   12dfe:	43 82       	std	Z+3, r4	; 0x03
   12e00:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   12e04:	60 e0       	ldi	r22, 0x00	; 0
   12e06:	81 e1       	ldi	r24, 0x11	; 17
   12e08:	cd dc       	rcall	.-1638   	; 0x127a4 <print_tok>
   12e0a:	f8 01       	movw	r30, r16
   12e0c:	80 81       	ld	r24, Z
   12e0e:	84 30       	cpi	r24, 0x04	; 4
   12e10:	c9 f4       	brne	.+50     	; 0x12e44 <display_Config+0x4ac>
   12e12:	27 81       	ldd	r18, Z+7	; 0x07
   12e14:	30 85       	ldd	r19, Z+8	; 0x08
   12e16:	3a 8b       	std	Y+18, r19	; 0x12
   12e18:	29 8b       	std	Y+17, r18	; 0x11
   12e1a:	60 e0       	ldi	r22, 0x00	; 0
   12e1c:	80 e2       	ldi	r24, 0x20	; 32
   12e1e:	c2 dc       	rcall	.-1660   	; 0x127a4 <print_tok>
   12e20:	64 e0       	ldi	r22, 0x04	; 4
   12e22:	89 e0       	ldi	r24, 0x09	; 9
   12e24:	bf dc       	rcall	.-1666   	; 0x127a4 <print_tok>
   12e26:	e9 89       	ldd	r30, Y+17	; 0x11
   12e28:	fa 89       	ldd	r31, Y+18	; 0x12
   12e2a:	20 81       	ld	r18, Z
   12e2c:	30 e0       	ldi	r19, 0x00	; 0
   12e2e:	40 e0       	ldi	r20, 0x00	; 0
   12e30:	50 e0       	ldi	r21, 0x00	; 0
   12e32:	68 e0       	ldi	r22, 0x08	; 8
   12e34:	81 e0       	ldi	r24, 0x01	; 1
   12e36:	41 dc       	rcall	.-1918   	; 0x126ba <print_tok_val>
   12e38:	64 e0       	ldi	r22, 0x04	; 4
   12e3a:	81 e1       	ldi	r24, 0x11	; 17
   12e3c:	b3 dc       	rcall	.-1690   	; 0x127a4 <print_tok>
   12e3e:	60 e0       	ldi	r22, 0x00	; 0
   12e40:	81 e1       	ldi	r24, 0x11	; 17
   12e42:	b0 dc       	rcall	.-1696   	; 0x127a4 <print_tok>
   12e44:	28 85       	ldd	r18, Y+8	; 0x08
   12e46:	39 85       	ldd	r19, Y+9	; 0x09
   12e48:	4a 85       	ldd	r20, Y+10	; 0x0a
   12e4a:	ed b7       	in	r30, 0x3d	; 61
   12e4c:	fe b7       	in	r31, 0x3e	; 62
   12e4e:	21 83       	std	Z+1, r18	; 0x01
   12e50:	32 83       	std	Z+2, r19	; 0x02
   12e52:	43 83       	std	Z+3, r20	; 0x03
   12e54:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   12e58:	05 5f       	subi	r16, 0xF5	; 245
   12e5a:	1f 4f       	sbci	r17, 0xFF	; 255
   12e5c:	28 e7       	ldi	r18, 0x78	; 120
   12e5e:	3f e1       	ldi	r19, 0x1F	; 31
   12e60:	20 17       	cp	r18, r16
   12e62:	31 07       	cpc	r19, r17
   12e64:	09 f0       	breq	.+2      	; 0x12e68 <display_Config+0x4d0>
   12e66:	dd cd       	rjmp	.-1094   	; 0x12a22 <display_Config+0x8a>
   12e68:	8b e3       	ldi	r24, 0x3B	; 59
   12e6a:	9d e1       	ldi	r25, 0x1D	; 29
   12e6c:	a0 e0       	ldi	r26, 0x00	; 0
   12e6e:	ed b7       	in	r30, 0x3d	; 61
   12e70:	fe b7       	in	r31, 0x3e	; 62
   12e72:	81 83       	std	Z+1, r24	; 0x01
   12e74:	92 83       	std	Z+2, r25	; 0x02
   12e76:	a3 83       	std	Z+3, r26	; 0x03
   12e78:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   12e7c:	62 96       	adiw	r28, 0x12	; 18
   12e7e:	0f b6       	in	r0, 0x3f	; 63
   12e80:	f8 94       	cli
   12e82:	de bf       	out	0x3e, r29	; 62
   12e84:	0f be       	out	0x3f, r0	; 63
   12e86:	cd bf       	out	0x3d, r28	; 61
   12e88:	df 91       	pop	r29
   12e8a:	cf 91       	pop	r28
   12e8c:	1f 91       	pop	r17
   12e8e:	0f 91       	pop	r16
   12e90:	ef 90       	pop	r14
   12e92:	df 90       	pop	r13
   12e94:	cf 90       	pop	r12
   12e96:	bf 90       	pop	r11
   12e98:	af 90       	pop	r10
   12e9a:	8f 90       	pop	r8
   12e9c:	7f 90       	pop	r7
   12e9e:	6f 90       	pop	r6
   12ea0:	4f 90       	pop	r4
   12ea2:	3f 90       	pop	r3
   12ea4:	2f 90       	pop	r2
   12ea6:	08 95       	ret

00012ea8 <find_type>:
   12ea8:	e4 ef       	ldi	r30, 0xF4	; 244
   12eaa:	fe e1       	ldi	r31, 0x1E	; 30
   12eac:	20 e0       	ldi	r18, 0x00	; 0
   12eae:	30 e0       	ldi	r19, 0x00	; 0
   12eb0:	40 81       	ld	r20, Z
   12eb2:	50 e0       	ldi	r21, 0x00	; 0
   12eb4:	48 17       	cp	r20, r24
   12eb6:	59 07       	cpc	r21, r25
   12eb8:	11 f4       	brne	.+4      	; 0x12ebe <find_type+0x16>
   12eba:	82 2f       	mov	r24, r18
   12ebc:	08 95       	ret
   12ebe:	2f 5f       	subi	r18, 0xFF	; 255
   12ec0:	3f 4f       	sbci	r19, 0xFF	; 255
   12ec2:	3b 96       	adiw	r30, 0x0b	; 11
   12ec4:	2c 30       	cpi	r18, 0x0C	; 12
   12ec6:	31 05       	cpc	r19, r1
   12ec8:	99 f7       	brne	.-26     	; 0x12eb0 <find_type+0x8>
   12eca:	8f ef       	ldi	r24, 0xFF	; 255
   12ecc:	08 95       	ret

00012ece <count_drive_types>:
   12ece:	e4 ef       	ldi	r30, 0xF4	; 244
   12ed0:	fe e1       	ldi	r31, 0x1E	; 30
   12ed2:	20 e0       	ldi	r18, 0x00	; 0
   12ed4:	30 e0       	ldi	r19, 0x00	; 0
   12ed6:	90 81       	ld	r25, Z
   12ed8:	98 13       	cpse	r25, r24
   12eda:	02 c0       	rjmp	.+4      	; 0x12ee0 <count_drive_types+0x12>
   12edc:	2f 5f       	subi	r18, 0xFF	; 255
   12ede:	3f 4f       	sbci	r19, 0xFF	; 255
   12ee0:	3b 96       	adiw	r30, 0x0b	; 11
   12ee2:	9f e1       	ldi	r25, 0x1F	; 31
   12ee4:	e8 37       	cpi	r30, 0x78	; 120
   12ee6:	f9 07       	cpc	r31, r25
   12ee8:	b1 f7       	brne	.-20     	; 0x12ed6 <count_drive_types+0x8>
   12eea:	82 2f       	mov	r24, r18
   12eec:	08 95       	ret

00012eee <type_to_str>:
   12eee:	00 97       	sbiw	r24, 0x00	; 0
   12ef0:	59 f0       	breq	.+22     	; 0x12f08 <type_to_str+0x1a>
   12ef2:	81 30       	cpi	r24, 0x01	; 1
   12ef4:	91 05       	cpc	r25, r1
   12ef6:	59 f0       	breq	.+22     	; 0x12f0e <type_to_str+0x20>
   12ef8:	83 30       	cpi	r24, 0x03	; 3
   12efa:	91 05       	cpc	r25, r1
   12efc:	59 f0       	breq	.+22     	; 0x12f14 <type_to_str+0x26>
   12efe:	04 97       	sbiw	r24, 0x04	; 4
   12f00:	61 f0       	breq	.+24     	; 0x12f1a <type_to_str+0x2c>
   12f02:	89 e2       	ldi	r24, 0x29	; 41
   12f04:	9e e0       	ldi	r25, 0x0E	; 14
   12f06:	08 95       	ret
   12f08:	8f ef       	ldi	r24, 0xFF	; 255
   12f0a:	9d e0       	ldi	r25, 0x0D	; 13
   12f0c:	08 95       	ret
   12f0e:	87 e0       	ldi	r24, 0x07	; 7
   12f10:	9e e0       	ldi	r25, 0x0E	; 14
   12f12:	08 95       	ret
   12f14:	8f e1       	ldi	r24, 0x1F	; 31
   12f16:	9e e0       	ldi	r25, 0x0E	; 14
   12f18:	08 95       	ret
   12f1a:	82 e1       	ldi	r24, 0x12	; 18
   12f1c:	9e e0       	ldi	r25, 0x0E	; 14
   12f1e:	08 95       	ret

00012f20 <find_free>:
   12f20:	80 e0       	ldi	r24, 0x00	; 0
   12f22:	90 e0       	ldi	r25, 0x00	; 0
   12f24:	c1 cf       	rjmp	.-126    	; 0x12ea8 <find_type>
   12f26:	08 95       	ret

00012f28 <find_device>:
   12f28:	9b 01       	movw	r18, r22
   12f2a:	20 52       	subi	r18, 0x20	; 32
   12f2c:	31 09       	sbc	r19, r1
   12f2e:	2f 35       	cpi	r18, 0x5F	; 95
   12f30:	31 05       	cpc	r19, r1
   12f32:	08 f5       	brcc	.+66     	; 0x12f76 <find_device+0x4e>
   12f34:	64 17       	cp	r22, r20
   12f36:	75 07       	cpc	r23, r21
   12f38:	f4 f0       	brlt	.+60     	; 0x12f76 <find_device+0x4e>
   12f3a:	9a 01       	movw	r18, r20
   12f3c:	22 5e       	subi	r18, 0xE2	; 226
   12f3e:	3f 4f       	sbci	r19, 0xFF	; 255
   12f40:	26 17       	cp	r18, r22
   12f42:	37 07       	cpc	r19, r23
   12f44:	c4 f0       	brlt	.+48     	; 0x12f76 <find_device+0x4e>
   12f46:	64 1b       	sub	r22, r20
   12f48:	75 0b       	sbc	r23, r21
   12f4a:	e4 ef       	ldi	r30, 0xF4	; 244
   12f4c:	fe e1       	ldi	r31, 0x1E	; 30
   12f4e:	20 e0       	ldi	r18, 0x00	; 0
   12f50:	30 e0       	ldi	r19, 0x00	; 0
   12f52:	40 81       	ld	r20, Z
   12f54:	50 e0       	ldi	r21, 0x00	; 0
   12f56:	48 17       	cp	r20, r24
   12f58:	59 07       	cpc	r21, r25
   12f5a:	39 f4       	brne	.+14     	; 0x12f6a <find_device+0x42>
   12f5c:	41 81       	ldd	r20, Z+1	; 0x01
   12f5e:	50 e0       	ldi	r21, 0x00	; 0
   12f60:	64 17       	cp	r22, r20
   12f62:	75 07       	cpc	r23, r21
   12f64:	11 f4       	brne	.+4      	; 0x12f6a <find_device+0x42>
   12f66:	82 2f       	mov	r24, r18
   12f68:	08 95       	ret
   12f6a:	2f 5f       	subi	r18, 0xFF	; 255
   12f6c:	3f 4f       	sbci	r19, 0xFF	; 255
   12f6e:	3b 96       	adiw	r30, 0x0b	; 11
   12f70:	2c 30       	cpi	r18, 0x0C	; 12
   12f72:	31 05       	cpc	r19, r1
   12f74:	71 f7       	brne	.-36     	; 0x12f52 <find_device+0x2a>
   12f76:	8f ef       	ldi	r24, 0xFF	; 255
   12f78:	08 95       	ret

00012f7a <set_active_device>:
   12f7a:	a9 e0       	ldi	r26, 0x09	; 9
   12f7c:	b0 e0       	ldi	r27, 0x00	; 0
   12f7e:	e3 ec       	ldi	r30, 0xC3	; 195
   12f80:	f7 e9       	ldi	r31, 0x97	; 151
   12f82:	0c 94 1b e7 	jmp	0x1ce36	; 0x1ce36 <__prologue_saves__+0x1c>
   12f86:	8f 3f       	cpi	r24, 0xFF	; 255
   12f88:	09 f4       	brne	.+2      	; 0x12f8c <set_active_device+0x12>
   12f8a:	b5 c0       	rjmp	.+362    	; 0x130f6 <set_active_device+0x17c>
   12f8c:	e8 2f       	mov	r30, r24
   12f8e:	8c 30       	cpi	r24, 0x0C	; 12
   12f90:	a0 f0       	brcs	.+40     	; 0x12fba <set_active_device+0x40>
   12f92:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12f96:	80 ff       	sbrs	r24, 0
   12f98:	ae c0       	rjmp	.+348    	; 0x130f6 <set_active_device+0x17c>
   12f9a:	0e 2e       	mov	r0, r30
   12f9c:	00 0c       	add	r0, r0
   12f9e:	ff 0b       	sbc	r31, r31
   12fa0:	cd b7       	in	r28, 0x3d	; 61
   12fa2:	de b7       	in	r29, 0x3e	; 62
   12fa4:	fd 83       	std	Y+5, r31	; 0x05
   12fa6:	ec 83       	std	Y+4, r30	; 0x04
   12fa8:	86 e1       	ldi	r24, 0x16	; 22
   12faa:	9d e1       	ldi	r25, 0x1D	; 29
   12fac:	a0 e0       	ldi	r26, 0x00	; 0
   12fae:	89 83       	std	Y+1, r24	; 0x01
   12fb0:	9a 83       	std	Y+2, r25	; 0x02
   12fb2:	ab 83       	std	Y+3, r26	; 0x03
   12fb4:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   12fb8:	9e c0       	rjmp	.+316    	; 0x130f6 <set_active_device+0x17c>
   12fba:	08 2f       	mov	r16, r24
   12fbc:	88 0f       	add	r24, r24
   12fbe:	11 0b       	sbc	r17, r17
   12fc0:	8b e0       	ldi	r24, 0x0B	; 11
   12fc2:	e8 02       	muls	r30, r24
   12fc4:	f0 01       	movw	r30, r0
   12fc6:	11 24       	eor	r1, r1
   12fc8:	ec 50       	subi	r30, 0x0C	; 12
   12fca:	f1 4e       	sbci	r31, 0xE1	; 225
   12fcc:	81 81       	ldd	r24, Z+1	; 0x01
   12fce:	8f 31       	cpi	r24, 0x1F	; 31
   12fd0:	a0 f0       	brcs	.+40     	; 0x12ffa <set_active_device+0x80>
   12fd2:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <debuglevel>
   12fd6:	90 ff       	sbrs	r25, 0
   12fd8:	8e c0       	rjmp	.+284    	; 0x130f6 <set_active_device+0x17c>
   12fda:	90 e0       	ldi	r25, 0x00	; 0
   12fdc:	cd b7       	in	r28, 0x3d	; 61
   12fde:	de b7       	in	r29, 0x3e	; 62
   12fe0:	9f 83       	std	Y+7, r25	; 0x07
   12fe2:	8e 83       	std	Y+6, r24	; 0x06
   12fe4:	1d 83       	std	Y+5, r17	; 0x05
   12fe6:	0c 83       	std	Y+4, r16	; 0x04
   12fe8:	8d ed       	ldi	r24, 0xDD	; 221
   12fea:	9c e1       	ldi	r25, 0x1C	; 28
   12fec:	a0 e0       	ldi	r26, 0x00	; 0
   12fee:	89 83       	std	Y+1, r24	; 0x01
   12ff0:	9a 83       	std	Y+2, r25	; 0x02
   12ff2:	ab 83       	std	Y+3, r26	; 0x03
   12ff4:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   12ff8:	7e c0       	rjmp	.+252    	; 0x130f6 <set_active_device+0x17c>
   12ffa:	20 81       	ld	r18, Z
   12ffc:	c2 2f       	mov	r28, r18
   12ffe:	d0 e0       	ldi	r29, 0x00	; 0
   13000:	87 81       	ldd	r24, Z+7	; 0x07
   13002:	90 85       	ldd	r25, Z+8	; 0x08
   13004:	00 97       	sbiw	r24, 0x00	; 0
   13006:	89 f4       	brne	.+34     	; 0x1302a <set_active_device+0xb0>
   13008:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1300c:	80 ff       	sbrs	r24, 0
   1300e:	73 c0       	rjmp	.+230    	; 0x130f6 <set_active_device+0x17c>
   13010:	ce 01       	movw	r24, r28
   13012:	6d df       	rcall	.-294    	; 0x12eee <type_to_str>
   13014:	ed b7       	in	r30, 0x3d	; 61
   13016:	fe b7       	in	r31, 0x3e	; 62
   13018:	91 87       	std	Z+9, r25	; 0x09
   1301a:	80 87       	std	Z+8, r24	; 0x08
   1301c:	d7 83       	std	Z+7, r29	; 0x07
   1301e:	c6 83       	std	Z+6, r28	; 0x06
   13020:	15 83       	std	Z+5, r17	; 0x05
   13022:	04 83       	std	Z+4, r16	; 0x04
   13024:	88 ea       	ldi	r24, 0xA8	; 168
   13026:	9c e1       	ldi	r25, 0x1C	; 28
   13028:	5e c0       	rjmp	.+188    	; 0x130e6 <set_active_device+0x16c>
   1302a:	20 97       	sbiw	r28, 0x00	; 0
   1302c:	91 f4       	brne	.+36     	; 0x13052 <set_active_device+0xd8>
   1302e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   13032:	80 ff       	sbrs	r24, 0
   13034:	60 c0       	rjmp	.+192    	; 0x130f6 <set_active_device+0x17c>
   13036:	80 e0       	ldi	r24, 0x00	; 0
   13038:	90 e0       	ldi	r25, 0x00	; 0
   1303a:	59 df       	rcall	.-334    	; 0x12eee <type_to_str>
   1303c:	ed b7       	in	r30, 0x3d	; 61
   1303e:	fe b7       	in	r31, 0x3e	; 62
   13040:	91 87       	std	Z+9, r25	; 0x09
   13042:	80 87       	std	Z+8, r24	; 0x08
   13044:	17 82       	std	Z+7, r1	; 0x07
   13046:	16 82       	std	Z+6, r1	; 0x06
   13048:	15 83       	std	Z+5, r17	; 0x05
   1304a:	04 83       	std	Z+4, r16	; 0x04
   1304c:	83 e7       	ldi	r24, 0x73	; 115
   1304e:	9c e1       	ldi	r25, 0x1C	; 28
   13050:	4a c0       	rjmp	.+148    	; 0x130e6 <set_active_device+0x16c>
   13052:	c4 30       	cpi	r28, 0x04	; 4
   13054:	d1 05       	cpc	r29, r1
   13056:	29 f4       	brne	.+10     	; 0x13062 <set_active_device+0xe8>
   13058:	90 93 6b 19 	sts	0x196B, r25	; 0x80196b <PRINTERp+0x1>
   1305c:	80 93 6a 19 	sts	0x196A, r24	; 0x80196a <PRINTERp>
   13060:	30 c0       	rjmp	.+96     	; 0x130c2 <set_active_device+0x148>
   13062:	2d 7f       	andi	r18, 0xFD	; 253
   13064:	21 30       	cpi	r18, 0x01	; 1
   13066:	79 f5       	brne	.+94     	; 0x130c6 <set_active_device+0x14c>
   13068:	21 85       	ldd	r18, Z+9	; 0x09
   1306a:	32 85       	ldd	r19, Z+10	; 0x0a
   1306c:	21 15       	cp	r18, r1
   1306e:	31 05       	cpc	r19, r1
   13070:	89 f4       	brne	.+34     	; 0x13094 <set_active_device+0x11a>
   13072:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   13076:	80 ff       	sbrs	r24, 0
   13078:	3e c0       	rjmp	.+124    	; 0x130f6 <set_active_device+0x17c>
   1307a:	ce 01       	movw	r24, r28
   1307c:	38 df       	rcall	.-400    	; 0x12eee <type_to_str>
   1307e:	ed b7       	in	r30, 0x3d	; 61
   13080:	fe b7       	in	r31, 0x3e	; 62
   13082:	91 87       	std	Z+9, r25	; 0x09
   13084:	80 87       	std	Z+8, r24	; 0x08
   13086:	d7 83       	std	Z+7, r29	; 0x07
   13088:	c6 83       	std	Z+6, r28	; 0x06
   1308a:	15 83       	std	Z+5, r17	; 0x05
   1308c:	04 83       	std	Z+4, r16	; 0x04
   1308e:	8b e3       	ldi	r24, 0x3B	; 59
   13090:	9c e1       	ldi	r25, 0x1C	; 28
   13092:	29 c0       	rjmp	.+82     	; 0x130e6 <set_active_device+0x16c>
   13094:	c1 30       	cpi	r28, 0x01	; 1
   13096:	d1 05       	cpc	r29, r1
   13098:	49 f4       	brne	.+18     	; 0x130ac <set_active_device+0x132>
   1309a:	90 93 65 19 	sts	0x1965, r25	; 0x801965 <AMIGOp+0x1>
   1309e:	80 93 64 19 	sts	0x1964, r24	; 0x801964 <AMIGOp>
   130a2:	30 93 63 19 	sts	0x1963, r19	; 0x801963 <AMIGOs+0x1>
   130a6:	20 93 62 19 	sts	0x1962, r18	; 0x801962 <AMIGOs>
   130aa:	0b c0       	rjmp	.+22     	; 0x130c2 <set_active_device+0x148>
   130ac:	c3 30       	cpi	r28, 0x03	; 3
   130ae:	d1 05       	cpc	r29, r1
   130b0:	51 f4       	brne	.+20     	; 0x130c6 <set_active_device+0x14c>
   130b2:	90 93 69 19 	sts	0x1969, r25	; 0x801969 <SS80p+0x1>
   130b6:	80 93 68 19 	sts	0x1968, r24	; 0x801968 <SS80p>
   130ba:	30 93 67 19 	sts	0x1967, r19	; 0x801967 <SS80s+0x1>
   130be:	20 93 66 19 	sts	0x1966, r18	; 0x801966 <SS80s>
   130c2:	81 e0       	ldi	r24, 0x01	; 1
   130c4:	19 c0       	rjmp	.+50     	; 0x130f8 <set_active_device+0x17e>
   130c6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   130ca:	80 ff       	sbrs	r24, 0
   130cc:	14 c0       	rjmp	.+40     	; 0x130f6 <set_active_device+0x17c>
   130ce:	ce 01       	movw	r24, r28
   130d0:	0e df       	rcall	.-484    	; 0x12eee <type_to_str>
   130d2:	ed b7       	in	r30, 0x3d	; 61
   130d4:	fe b7       	in	r31, 0x3e	; 62
   130d6:	91 87       	std	Z+9, r25	; 0x09
   130d8:	80 87       	std	Z+8, r24	; 0x08
   130da:	d7 83       	std	Z+7, r29	; 0x07
   130dc:	c6 83       	std	Z+6, r28	; 0x06
   130de:	15 83       	std	Z+5, r17	; 0x05
   130e0:	04 83       	std	Z+4, r16	; 0x04
   130e2:	80 e1       	ldi	r24, 0x10	; 16
   130e4:	9c e1       	ldi	r25, 0x1C	; 28
   130e6:	a0 e0       	ldi	r26, 0x00	; 0
   130e8:	cd b7       	in	r28, 0x3d	; 61
   130ea:	de b7       	in	r29, 0x3e	; 62
   130ec:	89 83       	std	Y+1, r24	; 0x01
   130ee:	9a 83       	std	Y+2, r25	; 0x02
   130f0:	ab 83       	std	Y+3, r26	; 0x03
   130f2:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   130f6:	80 e0       	ldi	r24, 0x00	; 0
   130f8:	cd b7       	in	r28, 0x3d	; 61
   130fa:	de b7       	in	r29, 0x3e	; 62
   130fc:	29 96       	adiw	r28, 0x09	; 9
   130fe:	e4 e0       	ldi	r30, 0x04	; 4
   13100:	0c 94 37 e7 	jmp	0x1ce6e	; 0x1ce6e <__epilogue_restores__+0x1c>

00013104 <SS80_Set_Defaults>:
   13104:	0f 93       	push	r16
   13106:	1f 93       	push	r17
   13108:	cf 93       	push	r28
   1310a:	df 93       	push	r29
   1310c:	18 2f       	mov	r17, r24
   1310e:	82 e0       	ldi	r24, 0x02	; 2
   13110:	90 e0       	ldi	r25, 0x00	; 0
   13112:	ca de       	rcall	.-620    	; 0x12ea8 <find_type>
   13114:	87 fd       	sbrc	r24, 7
   13116:	69 c0       	rjmp	.+210    	; 0x131ea <SS80_Set_Defaults+0xe6>
   13118:	2b e0       	ldi	r18, 0x0B	; 11
   1311a:	12 03       	mulsu	r17, r18
   1311c:	e0 01       	movw	r28, r0
   1311e:	11 24       	eor	r1, r1
   13120:	cc 50       	subi	r28, 0x0C	; 12
   13122:	d1 4e       	sbci	r29, 0xE1	; 225
   13124:	0f 80       	ldd	r0, Y+7	; 0x07
   13126:	d8 85       	ldd	r29, Y+8	; 0x08
   13128:	c0 2d       	mov	r28, r0
   1312a:	38 2f       	mov	r19, r24
   1312c:	32 03       	mulsu	r19, r18
   1312e:	f0 01       	movw	r30, r0
   13130:	11 24       	eor	r1, r1
   13132:	ec 50       	subi	r30, 0x0C	; 12
   13134:	f1 4e       	sbci	r31, 0xE1	; 225
   13136:	07 81       	ldd	r16, Z+7	; 0x07
   13138:	10 85       	ldd	r17, Z+8	; 0x08
   1313a:	f8 01       	movw	r30, r16
   1313c:	80 81       	ld	r24, Z
   1313e:	88 83       	st	Y, r24
   13140:	81 81       	ldd	r24, Z+1	; 0x01
   13142:	89 83       	std	Y+1, r24	; 0x01
   13144:	82 81       	ldd	r24, Z+2	; 0x02
   13146:	93 81       	ldd	r25, Z+3	; 0x03
   13148:	0e 94 1b 32 	call	0x6436	; 0x6436 <stralloc>
   1314c:	9b 83       	std	Y+3, r25	; 0x03
   1314e:	8a 83       	std	Y+2, r24	; 0x02
   13150:	f8 01       	movw	r30, r16
   13152:	86 81       	ldd	r24, Z+6	; 0x06
   13154:	97 81       	ldd	r25, Z+7	; 0x07
   13156:	9f 83       	std	Y+7, r25	; 0x07
   13158:	8e 83       	std	Y+6, r24	; 0x06
   1315a:	80 85       	ldd	r24, Z+8	; 0x08
   1315c:	91 85       	ldd	r25, Z+9	; 0x09
   1315e:	99 87       	std	Y+9, r25	; 0x09
   13160:	88 87       	std	Y+8, r24	; 0x08
   13162:	82 85       	ldd	r24, Z+10	; 0x0a
   13164:	93 85       	ldd	r25, Z+11	; 0x0b
   13166:	9b 87       	std	Y+11, r25	; 0x0b
   13168:	8a 87       	std	Y+10, r24	; 0x0a
   1316a:	84 85       	ldd	r24, Z+12	; 0x0c
   1316c:	8c 87       	std	Y+12, r24	; 0x0c
   1316e:	85 85       	ldd	r24, Z+13	; 0x0d
   13170:	8d 87       	std	Y+13, r24	; 0x0d
   13172:	86 85       	ldd	r24, Z+14	; 0x0e
   13174:	97 85       	ldd	r25, Z+15	; 0x0f
   13176:	a0 89       	ldd	r26, Z+16	; 0x10
   13178:	b1 89       	ldd	r27, Z+17	; 0x11
   1317a:	8e 87       	std	Y+14, r24	; 0x0e
   1317c:	9f 87       	std	Y+15, r25	; 0x0f
   1317e:	a8 8b       	std	Y+16, r26	; 0x10
   13180:	b9 8b       	std	Y+17, r27	; 0x11
   13182:	82 89       	ldd	r24, Z+18	; 0x12
   13184:	93 89       	ldd	r25, Z+19	; 0x13
   13186:	9b 8b       	std	Y+19, r25	; 0x13
   13188:	8a 8b       	std	Y+18, r24	; 0x12
   1318a:	84 89       	ldd	r24, Z+20	; 0x14
   1318c:	8c 8b       	std	Y+20, r24	; 0x14
   1318e:	85 89       	ldd	r24, Z+21	; 0x15
   13190:	8d 8b       	std	Y+21, r24	; 0x15
   13192:	86 89       	ldd	r24, Z+22	; 0x16
   13194:	97 89       	ldd	r25, Z+23	; 0x17
   13196:	9f 8b       	std	Y+23, r25	; 0x17
   13198:	8e 8b       	std	Y+22, r24	; 0x16
   1319a:	80 8d       	ldd	r24, Z+24	; 0x18
   1319c:	91 8d       	ldd	r25, Z+25	; 0x19
   1319e:	99 8f       	std	Y+25, r25	; 0x19
   131a0:	88 8f       	std	Y+24, r24	; 0x18
   131a2:	82 8d       	ldd	r24, Z+26	; 0x1a
   131a4:	93 8d       	ldd	r25, Z+27	; 0x1b
   131a6:	9b 8f       	std	Y+27, r25	; 0x1b
   131a8:	8a 8f       	std	Y+26, r24	; 0x1a
   131aa:	84 8d       	ldd	r24, Z+28	; 0x1c
   131ac:	95 8d       	ldd	r25, Z+29	; 0x1d
   131ae:	9d 8f       	std	Y+29, r25	; 0x1d
   131b0:	8c 8f       	std	Y+28, r24	; 0x1c
   131b2:	86 8d       	ldd	r24, Z+30	; 0x1e
   131b4:	8e 8f       	std	Y+30, r24	; 0x1e
   131b6:	87 8d       	ldd	r24, Z+31	; 0x1f
   131b8:	8f 8f       	std	Y+31, r24	; 0x1f
   131ba:	81 a1       	ldd	r24, Z+33	; 0x21
   131bc:	92 a1       	ldd	r25, Z+34	; 0x22
   131be:	a3 a1       	ldd	r26, Z+35	; 0x23
   131c0:	b4 a1       	ldd	r27, Z+36	; 0x24
   131c2:	89 a3       	std	Y+33, r24	; 0x21
   131c4:	9a a3       	std	Y+34, r25	; 0x22
   131c6:	ab a3       	std	Y+35, r26	; 0x23
   131c8:	bc a3       	std	Y+36, r27	; 0x24
   131ca:	85 a1       	ldd	r24, Z+37	; 0x25
   131cc:	8d a3       	std	Y+37, r24	; 0x25
   131ce:	86 a1       	ldd	r24, Z+38	; 0x26
   131d0:	97 a1       	ldd	r25, Z+39	; 0x27
   131d2:	9f a3       	std	Y+39, r25	; 0x27
   131d4:	8e a3       	std	Y+38, r24	; 0x26
   131d6:	80 a5       	ldd	r24, Z+40	; 0x28
   131d8:	91 a5       	ldd	r25, Z+41	; 0x29
   131da:	a2 a5       	ldd	r26, Z+42	; 0x2a
   131dc:	b3 a5       	ldd	r27, Z+43	; 0x2b
   131de:	88 a7       	std	Y+40, r24	; 0x28
   131e0:	99 a7       	std	Y+41, r25	; 0x29
   131e2:	aa a7       	std	Y+42, r26	; 0x2a
   131e4:	bb a7       	std	Y+43, r27	; 0x2b
   131e6:	84 a5       	ldd	r24, Z+44	; 0x2c
   131e8:	8c a7       	std	Y+44, r24	; 0x2c
   131ea:	df 91       	pop	r29
   131ec:	cf 91       	pop	r28
   131ee:	1f 91       	pop	r17
   131f0:	0f 91       	pop	r16
   131f2:	08 95       	ret

000131f4 <free_device>:
   131f4:	0f 93       	push	r16
   131f6:	1f 93       	push	r17
   131f8:	cf 93       	push	r28
   131fa:	df 93       	push	r29
   131fc:	8c 30       	cpi	r24, 0x0C	; 12
   131fe:	08 f0       	brcs	.+2      	; 0x13202 <free_device+0xe>
   13200:	55 c0       	rjmp	.+170    	; 0x132ac <free_device+0xb8>
   13202:	08 2f       	mov	r16, r24
   13204:	08 2e       	mov	r0, r24
   13206:	00 0c       	add	r0, r0
   13208:	11 0b       	sbc	r17, r17
   1320a:	9b e0       	ldi	r25, 0x0B	; 11
   1320c:	89 02       	muls	r24, r25
   1320e:	f0 01       	movw	r30, r0
   13210:	11 24       	eor	r1, r1
   13212:	ec 50       	subi	r30, 0x0C	; 12
   13214:	f1 4e       	sbci	r31, 0xE1	; 225
   13216:	80 81       	ld	r24, Z
   13218:	83 30       	cpi	r24, 0x03	; 3
   1321a:	51 f4       	brne	.+20     	; 0x13230 <free_device+0x3c>
   1321c:	c7 81       	ldd	r28, Z+7	; 0x07
   1321e:	d0 85       	ldd	r29, Z+8	; 0x08
   13220:	8a 81       	ldd	r24, Y+2	; 0x02
   13222:	9b 81       	ldd	r25, Y+3	; 0x03
   13224:	0e 94 24 28 	call	0x5048	; 0x5048 <safefree>
   13228:	8c 81       	ldd	r24, Y+4	; 0x04
   1322a:	9d 81       	ldd	r25, Y+5	; 0x05
   1322c:	0e 94 24 28 	call	0x5048	; 0x5048 <safefree>
   13230:	8b e0       	ldi	r24, 0x0B	; 11
   13232:	80 9f       	mul	r24, r16
   13234:	f0 01       	movw	r30, r0
   13236:	81 9f       	mul	r24, r17
   13238:	f0 0d       	add	r31, r0
   1323a:	11 24       	eor	r1, r1
   1323c:	ec 50       	subi	r30, 0x0C	; 12
   1323e:	f1 4e       	sbci	r31, 0xE1	; 225
   13240:	80 81       	ld	r24, Z
   13242:	81 30       	cpi	r24, 0x01	; 1
   13244:	51 f4       	brne	.+20     	; 0x1325a <free_device+0x66>
   13246:	c7 81       	ldd	r28, Z+7	; 0x07
   13248:	d0 85       	ldd	r29, Z+8	; 0x08
   1324a:	8a 81       	ldd	r24, Y+2	; 0x02
   1324c:	9b 81       	ldd	r25, Y+3	; 0x03
   1324e:	0e 94 24 28 	call	0x5048	; 0x5048 <safefree>
   13252:	8c 81       	ldd	r24, Y+4	; 0x04
   13254:	9d 81       	ldd	r25, Y+5	; 0x05
   13256:	0e 94 24 28 	call	0x5048	; 0x5048 <safefree>
   1325a:	8b e0       	ldi	r24, 0x0B	; 11
   1325c:	80 9f       	mul	r24, r16
   1325e:	f0 01       	movw	r30, r0
   13260:	81 9f       	mul	r24, r17
   13262:	f0 0d       	add	r31, r0
   13264:	11 24       	eor	r1, r1
   13266:	ec 50       	subi	r30, 0x0C	; 12
   13268:	f1 4e       	sbci	r31, 0xE1	; 225
   1326a:	80 81       	ld	r24, Z
   1326c:	84 30       	cpi	r24, 0x04	; 4
   1326e:	11 f4       	brne	.+4      	; 0x13274 <free_device+0x80>
   13270:	0e 94 d0 be 	call	0x17da0	; 0x17da0 <printer_close>
   13274:	8b e0       	ldi	r24, 0x0B	; 11
   13276:	80 9f       	mul	r24, r16
   13278:	e0 01       	movw	r28, r0
   1327a:	81 9f       	mul	r24, r17
   1327c:	d0 0d       	add	r29, r0
   1327e:	11 24       	eor	r1, r1
   13280:	cc 50       	subi	r28, 0x0C	; 12
   13282:	d1 4e       	sbci	r29, 0xE1	; 225
   13284:	8f 81       	ldd	r24, Y+7	; 0x07
   13286:	98 85       	ldd	r25, Y+8	; 0x08
   13288:	0e 94 24 28 	call	0x5048	; 0x5048 <safefree>
   1328c:	89 85       	ldd	r24, Y+9	; 0x09
   1328e:	9a 85       	ldd	r25, Y+10	; 0x0a
   13290:	0e 94 24 28 	call	0x5048	; 0x5048 <safefree>
   13294:	18 82       	st	Y, r1
   13296:	19 82       	std	Y+1, r1	; 0x01
   13298:	8f ef       	ldi	r24, 0xFF	; 255
   1329a:	8a 83       	std	Y+2, r24	; 0x02
   1329c:	1b 82       	std	Y+3, r1	; 0x03
   1329e:	1c 82       	std	Y+4, r1	; 0x04
   132a0:	1d 82       	std	Y+5, r1	; 0x05
   132a2:	1e 82       	std	Y+6, r1	; 0x06
   132a4:	18 86       	std	Y+8, r1	; 0x08
   132a6:	1f 82       	std	Y+7, r1	; 0x07
   132a8:	1a 86       	std	Y+10, r1	; 0x0a
   132aa:	19 86       	std	Y+9, r1	; 0x09
   132ac:	df 91       	pop	r29
   132ae:	cf 91       	pop	r28
   132b0:	1f 91       	pop	r17
   132b2:	0f 91       	pop	r16
   132b4:	08 95       	ret

000132b6 <alloc_device>:
   132b6:	0f 93       	push	r16
   132b8:	1f 93       	push	r17
   132ba:	cf 93       	push	r28
   132bc:	ad b7       	in	r26, 0x3d	; 61
   132be:	be b7       	in	r27, 0x3e	; 62
   132c0:	17 97       	sbiw	r26, 0x07	; 7
   132c2:	0f b6       	in	r0, 0x3f	; 63
   132c4:	f8 94       	cli
   132c6:	be bf       	out	0x3e, r27	; 62
   132c8:	0f be       	out	0x3f, r0	; 63
   132ca:	ad bf       	out	0x3d, r26	; 61
   132cc:	8c 01       	movw	r16, r24
   132ce:	28 de       	rcall	.-944    	; 0x12f20 <find_free>
   132d0:	c8 2f       	mov	r28, r24
   132d2:	8f 3f       	cpi	r24, 0xFF	; 255
   132d4:	89 f4       	brne	.+34     	; 0x132f8 <alloc_device+0x42>
   132d6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   132da:	80 ff       	sbrs	r24, 0
   132dc:	98 c0       	rjmp	.+304    	; 0x1340e <alloc_device+0x158>
   132de:	ed b7       	in	r30, 0x3d	; 61
   132e0:	fe b7       	in	r31, 0x3e	; 62
   132e2:	15 83       	std	Z+5, r17	; 0x05
   132e4:	04 83       	std	Z+4, r16	; 0x04
   132e6:	8c ee       	ldi	r24, 0xEC	; 236
   132e8:	9b e1       	ldi	r25, 0x1B	; 27
   132ea:	a0 e0       	ldi	r26, 0x00	; 0
   132ec:	81 83       	std	Z+1, r24	; 0x01
   132ee:	92 83       	std	Z+2, r25	; 0x02
   132f0:	a3 83       	std	Z+3, r26	; 0x03
   132f2:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   132f6:	8b c0       	rjmp	.+278    	; 0x1340e <alloc_device+0x158>
   132f8:	02 30       	cpi	r16, 0x02	; 2
   132fa:	11 05       	cpc	r17, r1
   132fc:	c1 f1       	breq	.+112    	; 0x1336e <alloc_device+0xb8>
   132fe:	dc f4       	brge	.+54     	; 0x13336 <alloc_device+0x80>
   13300:	01 30       	cpi	r16, 0x01	; 1
   13302:	11 05       	cpc	r17, r1
   13304:	09 f0       	breq	.+2      	; 0x13308 <alloc_device+0x52>
   13306:	6e c0       	rjmp	.+220    	; 0x133e4 <alloc_device+0x12e>
   13308:	fb e0       	ldi	r31, 0x0B	; 11
   1330a:	8f 02       	muls	r24, r31
   1330c:	80 01       	movw	r16, r0
   1330e:	11 24       	eor	r1, r1
   13310:	0c 50       	subi	r16, 0x0C	; 12
   13312:	11 4e       	sbci	r17, 0xE1	; 225
   13314:	81 e0       	ldi	r24, 0x01	; 1
   13316:	f8 01       	movw	r30, r16
   13318:	80 83       	st	Z, r24
   1331a:	61 e0       	ldi	r22, 0x01	; 1
   1331c:	70 e0       	ldi	r23, 0x00	; 0
   1331e:	87 e1       	ldi	r24, 0x17	; 23
   13320:	90 e0       	ldi	r25, 0x00	; 0
   13322:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <safecalloc>
   13326:	f8 01       	movw	r30, r16
   13328:	90 87       	std	Z+8, r25	; 0x08
   1332a:	87 83       	std	Z+7, r24	; 0x07
   1332c:	61 e0       	ldi	r22, 0x01	; 1
   1332e:	70 e0       	ldi	r23, 0x00	; 0
   13330:	88 e1       	ldi	r24, 0x18	; 24
   13332:	90 e0       	ldi	r25, 0x00	; 0
   13334:	51 c0       	rjmp	.+162    	; 0x133d8 <alloc_device+0x122>
   13336:	03 30       	cpi	r16, 0x03	; 3
   13338:	11 05       	cpc	r17, r1
   1333a:	81 f1       	breq	.+96     	; 0x1339c <alloc_device+0xe6>
   1333c:	04 30       	cpi	r16, 0x04	; 4
   1333e:	11 05       	cpc	r17, r1
   13340:	09 f0       	breq	.+2      	; 0x13344 <alloc_device+0x8e>
   13342:	50 c0       	rjmp	.+160    	; 0x133e4 <alloc_device+0x12e>
   13344:	fb e0       	ldi	r31, 0x0B	; 11
   13346:	8f 02       	muls	r24, r31
   13348:	80 01       	movw	r16, r0
   1334a:	11 24       	eor	r1, r1
   1334c:	0c 50       	subi	r16, 0x0C	; 12
   1334e:	11 4e       	sbci	r17, 0xE1	; 225
   13350:	84 e0       	ldi	r24, 0x04	; 4
   13352:	f8 01       	movw	r30, r16
   13354:	80 83       	st	Z, r24
   13356:	61 e0       	ldi	r22, 0x01	; 1
   13358:	70 e0       	ldi	r23, 0x00	; 0
   1335a:	8d e0       	ldi	r24, 0x0D	; 13
   1335c:	90 e0       	ldi	r25, 0x00	; 0
   1335e:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <safecalloc>
   13362:	f8 01       	movw	r30, r16
   13364:	90 87       	std	Z+8, r25	; 0x08
   13366:	87 83       	std	Z+7, r24	; 0x07
   13368:	12 86       	std	Z+10, r1	; 0x0a
   1336a:	11 86       	std	Z+9, r1	; 0x09
   1336c:	50 c0       	rjmp	.+160    	; 0x1340e <alloc_device+0x158>
   1336e:	fb e0       	ldi	r31, 0x0B	; 11
   13370:	8f 02       	muls	r24, r31
   13372:	80 01       	movw	r16, r0
   13374:	11 24       	eor	r1, r1
   13376:	0c 50       	subi	r16, 0x0C	; 12
   13378:	11 4e       	sbci	r17, 0xE1	; 225
   1337a:	82 e0       	ldi	r24, 0x02	; 2
   1337c:	f8 01       	movw	r30, r16
   1337e:	80 83       	st	Z, r24
   13380:	61 e0       	ldi	r22, 0x01	; 1
   13382:	70 e0       	ldi	r23, 0x00	; 0
   13384:	84 e3       	ldi	r24, 0x34	; 52
   13386:	90 e0       	ldi	r25, 0x00	; 0
   13388:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <safecalloc>
   1338c:	f8 01       	movw	r30, r16
   1338e:	90 87       	std	Z+8, r25	; 0x08
   13390:	87 83       	std	Z+7, r24	; 0x07
   13392:	61 e0       	ldi	r22, 0x01	; 1
   13394:	70 e0       	ldi	r23, 0x00	; 0
   13396:	86 e1       	ldi	r24, 0x16	; 22
   13398:	90 e0       	ldi	r25, 0x00	; 0
   1339a:	1e c0       	rjmp	.+60     	; 0x133d8 <alloc_device+0x122>
   1339c:	fb e0       	ldi	r31, 0x0B	; 11
   1339e:	8f 02       	muls	r24, r31
   133a0:	80 01       	movw	r16, r0
   133a2:	11 24       	eor	r1, r1
   133a4:	0c 50       	subi	r16, 0x0C	; 12
   133a6:	11 4e       	sbci	r17, 0xE1	; 225
   133a8:	83 e0       	ldi	r24, 0x03	; 3
   133aa:	f8 01       	movw	r30, r16
   133ac:	80 83       	st	Z, r24
   133ae:	61 e0       	ldi	r22, 0x01	; 1
   133b0:	70 e0       	ldi	r23, 0x00	; 0
   133b2:	84 e3       	ldi	r24, 0x34	; 52
   133b4:	90 e0       	ldi	r25, 0x00	; 0
   133b6:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <safecalloc>
   133ba:	f8 01       	movw	r30, r16
   133bc:	90 87       	std	Z+8, r25	; 0x08
   133be:	87 83       	std	Z+7, r24	; 0x07
   133c0:	61 e0       	ldi	r22, 0x01	; 1
   133c2:	70 e0       	ldi	r23, 0x00	; 0
   133c4:	86 e1       	ldi	r24, 0x16	; 22
   133c6:	90 e0       	ldi	r25, 0x00	; 0
   133c8:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <safecalloc>
   133cc:	f8 01       	movw	r30, r16
   133ce:	92 87       	std	Z+10, r25	; 0x0a
   133d0:	81 87       	std	Z+9, r24	; 0x09
   133d2:	8c 2f       	mov	r24, r28
   133d4:	97 de       	rcall	.-722    	; 0x13104 <SS80_Set_Defaults>
   133d6:	1b c0       	rjmp	.+54     	; 0x1340e <alloc_device+0x158>
   133d8:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <safecalloc>
   133dc:	f8 01       	movw	r30, r16
   133de:	92 87       	std	Z+10, r25	; 0x0a
   133e0:	81 87       	std	Z+9, r24	; 0x09
   133e2:	15 c0       	rjmp	.+42     	; 0x1340e <alloc_device+0x158>
   133e4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   133e8:	80 ff       	sbrs	r24, 0
   133ea:	10 c0       	rjmp	.+32     	; 0x1340c <alloc_device+0x156>
   133ec:	c8 01       	movw	r24, r16
   133ee:	7f dd       	rcall	.-1282   	; 0x12eee <type_to_str>
   133f0:	ed b7       	in	r30, 0x3d	; 61
   133f2:	fe b7       	in	r31, 0x3e	; 62
   133f4:	97 83       	std	Z+7, r25	; 0x07
   133f6:	86 83       	std	Z+6, r24	; 0x06
   133f8:	15 83       	std	Z+5, r17	; 0x05
   133fa:	04 83       	std	Z+4, r16	; 0x04
   133fc:	8a ec       	ldi	r24, 0xCA	; 202
   133fe:	9b e1       	ldi	r25, 0x1B	; 27
   13400:	a0 e0       	ldi	r26, 0x00	; 0
   13402:	81 83       	std	Z+1, r24	; 0x01
   13404:	92 83       	std	Z+2, r25	; 0x02
   13406:	a3 83       	std	Z+3, r26	; 0x03
   13408:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   1340c:	cf ef       	ldi	r28, 0xFF	; 255
   1340e:	8c 2f       	mov	r24, r28
   13410:	ad b7       	in	r26, 0x3d	; 61
   13412:	be b7       	in	r27, 0x3e	; 62
   13414:	17 96       	adiw	r26, 0x07	; 7
   13416:	0f b6       	in	r0, 0x3f	; 63
   13418:	f8 94       	cli
   1341a:	be bf       	out	0x3e, r27	; 62
   1341c:	0f be       	out	0x3f, r0	; 63
   1341e:	ad bf       	out	0x3d, r26	; 61
   13420:	cf 91       	pop	r28
   13422:	1f 91       	pop	r17
   13424:	0f 91       	pop	r16
   13426:	08 95       	ret

00013428 <init_Devices>:
   13428:	10 92 77 19 	sts	0x1977, r1	; 0x801977 <stack_ind+0x1>
   1342c:	10 92 76 19 	sts	0x1976, r1	; 0x801976 <stack_ind>
   13430:	e4 ef       	ldi	r30, 0xF4	; 244
   13432:	fe e1       	ldi	r31, 0x1E	; 30
   13434:	8f ef       	ldi	r24, 0xFF	; 255
   13436:	10 82       	st	Z, r1
   13438:	11 82       	std	Z+1, r1	; 0x01
   1343a:	82 83       	std	Z+2, r24	; 0x02
   1343c:	13 82       	std	Z+3, r1	; 0x03
   1343e:	14 82       	std	Z+4, r1	; 0x04
   13440:	15 82       	std	Z+5, r1	; 0x05
   13442:	16 82       	std	Z+6, r1	; 0x06
   13444:	10 86       	std	Z+8, r1	; 0x08
   13446:	17 82       	std	Z+7, r1	; 0x07
   13448:	12 86       	std	Z+10, r1	; 0x0a
   1344a:	11 86       	std	Z+9, r1	; 0x09
   1344c:	3b 96       	adiw	r30, 0x0b	; 11
   1344e:	9f e1       	ldi	r25, 0x1F	; 31
   13450:	e8 37       	cpi	r30, 0x78	; 120
   13452:	f9 07       	cpc	r31, r25
   13454:	81 f7       	brne	.-32     	; 0x13436 <init_Devices+0xe>
   13456:	08 95       	ret

00013458 <push_state>:
   13458:	20 91 76 19 	lds	r18, 0x1976	; 0x801976 <stack_ind>
   1345c:	30 91 77 19 	lds	r19, 0x1977	; 0x801977 <stack_ind+0x1>
   13460:	25 30       	cpi	r18, 0x05	; 5
   13462:	31 05       	cpc	r19, r1
   13464:	7c f4       	brge	.+30     	; 0x13484 <push_state+0x2c>
   13466:	a9 01       	movw	r20, r18
   13468:	4f 5f       	subi	r20, 0xFF	; 255
   1346a:	5f 4f       	sbci	r21, 0xFF	; 255
   1346c:	50 93 77 19 	sts	0x1977, r21	; 0x801977 <stack_ind+0x1>
   13470:	40 93 76 19 	sts	0x1976, r20	; 0x801976 <stack_ind>
   13474:	22 0f       	add	r18, r18
   13476:	33 1f       	adc	r19, r19
   13478:	f9 01       	movw	r30, r18
   1347a:	e4 59       	subi	r30, 0x94	; 148
   1347c:	f6 4e       	sbci	r31, 0xE6	; 230
   1347e:	80 83       	st	Z, r24
   13480:	91 83       	std	Z+1, r25	; 0x01
   13482:	08 95       	ret
   13484:	80 e0       	ldi	r24, 0x00	; 0
   13486:	90 e0       	ldi	r25, 0x00	; 0
   13488:	08 95       	ret

0001348a <pop_state>:
   1348a:	80 91 76 19 	lds	r24, 0x1976	; 0x801976 <stack_ind>
   1348e:	90 91 77 19 	lds	r25, 0x1977	; 0x801977 <stack_ind+0x1>
   13492:	18 16       	cp	r1, r24
   13494:	19 06       	cpc	r1, r25
   13496:	6c f4       	brge	.+26     	; 0x134b2 <pop_state+0x28>
   13498:	01 97       	sbiw	r24, 0x01	; 1
   1349a:	90 93 77 19 	sts	0x1977, r25	; 0x801977 <stack_ind+0x1>
   1349e:	80 93 76 19 	sts	0x1976, r24	; 0x801976 <stack_ind>
   134a2:	88 0f       	add	r24, r24
   134a4:	99 1f       	adc	r25, r25
   134a6:	fc 01       	movw	r30, r24
   134a8:	e4 59       	subi	r30, 0x94	; 148
   134aa:	f6 4e       	sbci	r31, 0xE6	; 230
   134ac:	80 81       	ld	r24, Z
   134ae:	91 81       	ldd	r25, Z+1	; 0x01
   134b0:	08 95       	ret
   134b2:	80 e0       	ldi	r24, 0x00	; 0
   134b4:	90 e0       	ldi	r25, 0x00	; 0
   134b6:	08 95       	ret

000134b8 <set_Config_Defaults>:
   134b8:	08 95       	ret

000134ba <hpdir_set_device>:
   134ba:	cf 93       	push	r28
   134bc:	df 93       	push	r29
   134be:	00 d0       	rcall	.+0      	; 0x134c0 <hpdir_set_device+0x6>
   134c0:	1f 92       	push	r1
   134c2:	2b e0       	ldi	r18, 0x0B	; 11
   134c4:	82 02       	muls	r24, r18
   134c6:	c0 01       	movw	r24, r0
   134c8:	11 24       	eor	r1, r1
   134ca:	fc 01       	movw	r30, r24
   134cc:	ec 50       	subi	r30, 0x0C	; 12
   134ce:	f1 4e       	sbci	r31, 0xE1	; 225
   134d0:	80 81       	ld	r24, Z
   134d2:	83 30       	cpi	r24, 0x03	; 3
   134d4:	a1 f5       	brne	.+104    	; 0x1353e <hpdir_set_device+0x84>
   134d6:	c7 81       	ldd	r28, Z+7	; 0x07
   134d8:	d0 85       	ldd	r29, Z+8	; 0x08
   134da:	80 91 f8 1f 	lds	r24, 0x1FF8	; 0x801ff8 <hpdir+0x80>
   134de:	90 91 f9 1f 	lds	r25, 0x1FF9	; 0x801ff9 <hpdir+0x81>
   134e2:	9f 83       	std	Y+7, r25	; 0x07
   134e4:	8e 83       	std	Y+6, r24	; 0x06
   134e6:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <hpdir+0x8c>
   134ea:	90 91 05 20 	lds	r25, 0x2005	; 0x802005 <hpdir+0x8d>
   134ee:	a0 91 06 20 	lds	r26, 0x2006	; 0x802006 <hpdir+0x8e>
   134f2:	b0 91 07 20 	lds	r27, 0x2007	; 0x802007 <hpdir+0x8f>
   134f6:	8e 87       	std	Y+14, r24	; 0x0e
   134f8:	9f 87       	std	Y+15, r25	; 0x0f
   134fa:	a8 8b       	std	Y+16, r26	; 0x10
   134fc:	b9 8b       	std	Y+17, r27	; 0x11
   134fe:	80 91 18 20 	lds	r24, 0x2018	; 0x802018 <hpdir+0xa0>
   13502:	90 91 19 20 	lds	r25, 0x2019	; 0x802019 <hpdir+0xa1>
   13506:	9b 8b       	std	Y+19, r25	; 0x13
   13508:	8a 8b       	std	Y+18, r24	; 0x12
   1350a:	19 a2       	std	Y+33, r1	; 0x21
   1350c:	1a a2       	std	Y+34, r1	; 0x22
   1350e:	1b a2       	std	Y+35, r1	; 0x23
   13510:	1c a2       	std	Y+36, r1	; 0x24
   13512:	1d a2       	std	Y+37, r1	; 0x25
   13514:	1f a2       	std	Y+39, r1	; 0x27
   13516:	1e a2       	std	Y+38, r1	; 0x26
   13518:	80 91 24 20 	lds	r24, 0x2024	; 0x802024 <hpdir+0xac>
   1351c:	90 91 25 20 	lds	r25, 0x2025	; 0x802025 <hpdir+0xad>
   13520:	a0 91 26 20 	lds	r26, 0x2026	; 0x802026 <hpdir+0xae>
   13524:	b0 91 27 20 	lds	r27, 0x2027	; 0x802027 <hpdir+0xaf>
   13528:	ac 01       	movw	r20, r24
   1352a:	bd 01       	movw	r22, r26
   1352c:	41 50       	subi	r20, 0x01	; 1
   1352e:	51 09       	sbc	r21, r1
   13530:	61 09       	sbc	r22, r1
   13532:	71 09       	sbc	r23, r1
   13534:	48 a7       	std	Y+40, r20	; 0x28
   13536:	59 a7       	std	Y+41, r21	; 0x29
   13538:	6a a7       	std	Y+42, r22	; 0x2a
   1353a:	7b a7       	std	Y+43, r23	; 0x2b
   1353c:	2a c0       	rjmp	.+84     	; 0x13592 <hpdir_set_device+0xd8>
   1353e:	81 30       	cpi	r24, 0x01	; 1
   13540:	a1 f5       	brne	.+104    	; 0x135aa <hpdir_set_device+0xf0>
   13542:	c7 81       	ldd	r28, Z+7	; 0x07
   13544:	d0 85       	ldd	r29, Z+8	; 0x08
   13546:	80 91 f8 1f 	lds	r24, 0x1FF8	; 0x801ff8 <hpdir+0x80>
   1354a:	90 91 f9 1f 	lds	r25, 0x1FF9	; 0x801ff9 <hpdir+0x81>
   1354e:	9f 83       	std	Y+7, r25	; 0x07
   13550:	8e 83       	std	Y+6, r24	; 0x06
   13552:	80 91 18 20 	lds	r24, 0x2018	; 0x802018 <hpdir+0xa0>
   13556:	90 91 19 20 	lds	r25, 0x2019	; 0x802019 <hpdir+0xa1>
   1355a:	99 87       	std	Y+9, r25	; 0x09
   1355c:	88 87       	std	Y+8, r24	; 0x08
   1355e:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <hpdir+0x9c>
   13562:	90 91 15 20 	lds	r25, 0x2015	; 0x802015 <hpdir+0x9d>
   13566:	9b 87       	std	Y+11, r25	; 0x0b
   13568:	8a 87       	std	Y+10, r24	; 0x0a
   1356a:	80 91 10 20 	lds	r24, 0x2010	; 0x802010 <hpdir+0x98>
   1356e:	90 91 11 20 	lds	r25, 0x2011	; 0x802011 <hpdir+0x99>
   13572:	9d 87       	std	Y+13, r25	; 0x0d
   13574:	8c 87       	std	Y+12, r24	; 0x0c
   13576:	80 91 0c 20 	lds	r24, 0x200C	; 0x80200c <hpdir+0x94>
   1357a:	90 91 0d 20 	lds	r25, 0x200D	; 0x80200d <hpdir+0x95>
   1357e:	9f 87       	std	Y+15, r25	; 0x0f
   13580:	8e 87       	std	Y+14, r24	; 0x0e
   13582:	80 91 24 20 	lds	r24, 0x2024	; 0x802024 <hpdir+0xac>
   13586:	90 91 25 20 	lds	r25, 0x2025	; 0x802025 <hpdir+0xad>
   1358a:	a0 91 26 20 	lds	r26, 0x2026	; 0x802026 <hpdir+0xae>
   1358e:	b0 91 27 20 	lds	r27, 0x2027	; 0x802027 <hpdir+0xaf>
   13592:	83 83       	std	Z+3, r24	; 0x03
   13594:	94 83       	std	Z+4, r25	; 0x04
   13596:	a5 83       	std	Z+5, r26	; 0x05
   13598:	b6 83       	std	Z+6, r27	; 0x06
   1359a:	88 e7       	ldi	r24, 0x78	; 120
   1359c:	9f e1       	ldi	r25, 0x1F	; 31
   1359e:	0e 94 1b 32 	call	0x6436	; 0x6436 <stralloc>
   135a2:	9d 83       	std	Y+5, r25	; 0x05
   135a4:	8c 83       	std	Y+4, r24	; 0x04
   135a6:	81 e0       	ldi	r24, 0x01	; 1
   135a8:	0b c0       	rjmp	.+22     	; 0x135c0 <hpdir_set_device+0x106>
   135aa:	82 ea       	ldi	r24, 0xA2	; 162
   135ac:	9b e1       	ldi	r25, 0x1B	; 27
   135ae:	a0 e0       	ldi	r26, 0x00	; 0
   135b0:	ed b7       	in	r30, 0x3d	; 61
   135b2:	fe b7       	in	r31, 0x3e	; 62
   135b4:	81 83       	std	Z+1, r24	; 0x01
   135b6:	92 83       	std	Z+2, r25	; 0x02
   135b8:	a3 83       	std	Z+3, r26	; 0x03
   135ba:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   135be:	80 e0       	ldi	r24, 0x00	; 0
   135c0:	cd b7       	in	r28, 0x3d	; 61
   135c2:	de b7       	in	r29, 0x3e	; 62
   135c4:	23 96       	adiw	r28, 0x03	; 3
   135c6:	e2 e0       	ldi	r30, 0x02	; 2
   135c8:	0c 94 39 e7 	jmp	0x1ce72	; 0x1ce72 <__epilogue_restores__+0x20>

000135cc <hpdir_set_parameters>:
   135cc:	cf 93       	push	r28
   135ce:	00 d0       	rcall	.+0      	; 0x135d0 <hpdir_set_parameters+0x4>
   135d0:	1f 92       	push	r1
   135d2:	c8 2f       	mov	r28, r24
   135d4:	cb 01       	movw	r24, r22
   135d6:	41 e0       	ldi	r20, 0x01	; 1
   135d8:	50 e0       	ldi	r21, 0x00	; 0
   135da:	60 e0       	ldi	r22, 0x00	; 0
   135dc:	70 e0       	ldi	r23, 0x00	; 0
   135de:	0e 94 2a a4 	call	0x14854	; 0x14854 <hpdir_find_drive>
   135e2:	89 2b       	or	r24, r25
   135e4:	19 f0       	breq	.+6      	; 0x135ec <hpdir_set_parameters+0x20>
   135e6:	8c 2f       	mov	r24, r28
   135e8:	68 df       	rcall	.-304    	; 0x134ba <hpdir_set_device>
   135ea:	0b c0       	rjmp	.+22     	; 0x13602 <hpdir_set_parameters+0x36>
   135ec:	8a e7       	ldi	r24, 0x7A	; 122
   135ee:	9b e1       	ldi	r25, 0x1B	; 27
   135f0:	a0 e0       	ldi	r26, 0x00	; 0
   135f2:	ed b7       	in	r30, 0x3d	; 61
   135f4:	fe b7       	in	r31, 0x3e	; 62
   135f6:	81 83       	std	Z+1, r24	; 0x01
   135f8:	92 83       	std	Z+2, r25	; 0x02
   135fa:	a3 83       	std	Z+3, r26	; 0x03
   135fc:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   13600:	80 e0       	ldi	r24, 0x00	; 0
   13602:	0f 90       	pop	r0
   13604:	0f 90       	pop	r0
   13606:	0f 90       	pop	r0
   13608:	cf 91       	pop	r28
   1360a:	08 95       	ret

0001360c <format_drives>:
   1360c:	2f 92       	push	r2
   1360e:	3f 92       	push	r3
   13610:	4f 92       	push	r4
   13612:	5f 92       	push	r5
   13614:	6f 92       	push	r6
   13616:	7f 92       	push	r7
   13618:	8f 92       	push	r8
   1361a:	af 92       	push	r10
   1361c:	bf 92       	push	r11
   1361e:	cf 92       	push	r12
   13620:	df 92       	push	r13
   13622:	ef 92       	push	r14
   13624:	ff 92       	push	r15
   13626:	0f 93       	push	r16
   13628:	1f 93       	push	r17
   1362a:	cf 93       	push	r28
   1362c:	df 93       	push	r29
   1362e:	cd b7       	in	r28, 0x3d	; 61
   13630:	de b7       	in	r29, 0x3e	; 62
   13632:	ce 56       	subi	r28, 0x6E	; 110
   13634:	d1 09       	sbc	r29, r1
   13636:	0f b6       	in	r0, 0x3f	; 63
   13638:	f8 94       	cli
   1363a:	de bf       	out	0x3e, r29	; 62
   1363c:	0f be       	out	0x3f, r0	; 63
   1363e:	cd bf       	out	0x3d, r28	; 61
   13640:	84 ef       	ldi	r24, 0xF4	; 244
   13642:	c8 2e       	mov	r12, r24
   13644:	8e e1       	ldi	r24, 0x1E	; 30
   13646:	d8 2e       	mov	r13, r24
   13648:	a0 96       	adiw	r28, 0x20	; 32
   1364a:	1f ae       	std	Y+63, r1	; 0x3f
   1364c:	1e ae       	std	Y+62, r1	; 0x3e
   1364e:	a0 97       	sbiw	r28, 0x20	; 32
   13650:	6e 96       	adiw	r28, 0x1e	; 30
   13652:	1f ae       	std	Y+63, r1	; 0x3f
   13654:	1e ae       	std	Y+62, r1	; 0x3e
   13656:	6e 97       	sbiw	r28, 0x1e	; 30
   13658:	6c 96       	adiw	r28, 0x1c	; 28
   1365a:	1f ae       	std	Y+63, r1	; 0x3f
   1365c:	1e ae       	std	Y+62, r1	; 0x3e
   1365e:	6c 97       	sbiw	r28, 0x1c	; 28
   13660:	87 e5       	ldi	r24, 0x57	; 87
   13662:	9a e1       	ldi	r25, 0x1A	; 26
   13664:	9c 01       	movw	r18, r24
   13666:	40 e0       	ldi	r20, 0x00	; 0
   13668:	a3 96       	adiw	r28, 0x23	; 35
   1366a:	2d af       	std	Y+61, r18	; 0x3d
   1366c:	3e af       	std	Y+62, r19	; 0x3e
   1366e:	4f af       	std	Y+63, r20	; 0x3f
   13670:	a3 97       	sbiw	r28, 0x23	; 35
   13672:	8f e4       	ldi	r24, 0x4F	; 79
   13674:	9a e1       	ldi	r25, 0x1A	; 26
   13676:	9c 01       	movw	r18, r24
   13678:	40 e0       	ldi	r20, 0x00	; 0
   1367a:	a6 96       	adiw	r28, 0x26	; 38
   1367c:	2d af       	std	Y+61, r18	; 0x3d
   1367e:	3e af       	std	Y+62, r19	; 0x3e
   13680:	4f af       	std	Y+63, r20	; 0x3f
   13682:	a6 97       	sbiw	r28, 0x26	; 38
   13684:	81 e7       	ldi	r24, 0x71	; 113
   13686:	9a e1       	ldi	r25, 0x1A	; 26
   13688:	9c 01       	movw	r18, r24
   1368a:	40 e0       	ldi	r20, 0x00	; 0
   1368c:	a9 96       	adiw	r28, 0x29	; 41
   1368e:	2d af       	std	Y+61, r18	; 0x3d
   13690:	3e af       	std	Y+62, r19	; 0x3e
   13692:	4f af       	std	Y+63, r20	; 0x3f
   13694:	a9 97       	sbiw	r28, 0x29	; 41
   13696:	8b e9       	ldi	r24, 0x9B	; 155
   13698:	9a e1       	ldi	r25, 0x1A	; 26
   1369a:	9c 01       	movw	r18, r24
   1369c:	40 e0       	ldi	r20, 0x00	; 0
   1369e:	ac 96       	adiw	r28, 0x2c	; 44
   136a0:	2d af       	std	Y+61, r18	; 0x3d
   136a2:	3e af       	std	Y+62, r19	; 0x3e
   136a4:	4f af       	std	Y+63, r20	; 0x3f
   136a6:	ac 97       	sbiw	r28, 0x2c	; 44
   136a8:	83 e9       	ldi	r24, 0x93	; 147
   136aa:	9a e1       	ldi	r25, 0x1A	; 26
   136ac:	9c 01       	movw	r18, r24
   136ae:	40 e0       	ldi	r20, 0x00	; 0
   136b0:	af 96       	adiw	r28, 0x2f	; 47
   136b2:	2d af       	std	Y+61, r18	; 0x3d
   136b4:	3e af       	std	Y+62, r19	; 0x3e
   136b6:	4f af       	std	Y+63, r20	; 0x3f
   136b8:	af 97       	sbiw	r28, 0x2f	; 47
   136ba:	85 eb       	ldi	r24, 0xB5	; 181
   136bc:	9a e1       	ldi	r25, 0x1A	; 26
   136be:	3c 01       	movw	r6, r24
   136c0:	81 2c       	mov	r8, r1
   136c2:	f6 01       	movw	r30, r12
   136c4:	80 81       	ld	r24, Z
   136c6:	88 23       	and	r24, r24
   136c8:	09 f4       	brne	.+2      	; 0x136cc <format_drives+0xc0>
   136ca:	f0 c0       	rjmp	.+480    	; 0x138ac <format_drives+0x2a0>
   136cc:	83 30       	cpi	r24, 0x03	; 3
   136ce:	09 f0       	breq	.+2      	; 0x136d2 <format_drives+0xc6>
   136d0:	71 c0       	rjmp	.+226    	; 0x137b4 <format_drives+0x1a8>
   136d2:	a7 80       	ldd	r10, Z+7	; 0x07
   136d4:	b0 84       	ldd	r11, Z+8	; 0x08
   136d6:	be 01       	movw	r22, r28
   136d8:	66 5f       	subi	r22, 0xF6	; 246
   136da:	7f 4f       	sbci	r23, 0xFF	; 255
   136dc:	f5 01       	movw	r30, r10
   136de:	82 81       	ldd	r24, Z+2	; 0x02
   136e0:	93 81       	ldd	r25, Z+3	; 0x03
   136e2:	0e 94 70 79 	call	0xf2e0	; 0xf2e0 <stat>
   136e6:	01 96       	adiw	r24, 0x01	; 1
   136e8:	09 f0       	breq	.+2      	; 0x136ec <format_drives+0xe0>
   136ea:	64 c0       	rjmp	.+200    	; 0x137b4 <format_drives+0x1a8>
   136ec:	f5 01       	movw	r30, r10
   136ee:	82 89       	ldd	r24, Z+18	; 0x12
   136f0:	93 89       	ldd	r25, Z+19	; 0x13
   136f2:	81 15       	cp	r24, r1
   136f4:	91 40       	sbci	r25, 0x01	; 1
   136f6:	31 f0       	breq	.+12     	; 0x13704 <format_drives+0xf8>
   136f8:	ed b7       	in	r30, 0x3d	; 61
   136fa:	fe b7       	in	r31, 0x3e	; 62
   136fc:	61 82       	std	Z+1, r6	; 0x01
   136fe:	72 82       	std	Z+2, r7	; 0x02
   13700:	83 82       	std	Z+3, r8	; 0x03
   13702:	7a c0       	rjmp	.+244    	; 0x137f8 <format_drives+0x1ec>
   13704:	f6 01       	movw	r30, r12
   13706:	23 80       	ldd	r2, Z+3	; 0x03
   13708:	34 80       	ldd	r3, Z+4	; 0x04
   1370a:	45 80       	ldd	r4, Z+5	; 0x05
   1370c:	56 80       	ldd	r5, Z+6	; 0x06
   1370e:	ed b7       	in	r30, 0x3d	; 61
   13710:	fe b7       	in	r31, 0x3e	; 62
   13712:	26 82       	std	Z+6, r2	; 0x06
   13714:	37 82       	std	Z+7, r3	; 0x07
   13716:	40 86       	std	Z+8, r4	; 0x08
   13718:	51 86       	std	Z+9, r5	; 0x09
   1371a:	f5 01       	movw	r30, r10
   1371c:	82 81       	ldd	r24, Z+2	; 0x02
   1371e:	93 81       	ldd	r25, Z+3	; 0x03
   13720:	ed b7       	in	r30, 0x3d	; 61
   13722:	fe b7       	in	r31, 0x3e	; 62
   13724:	95 83       	std	Z+5, r25	; 0x05
   13726:	84 83       	std	Z+4, r24	; 0x04
   13728:	ac 96       	adiw	r28, 0x2c	; 44
   1372a:	2d ad       	ldd	r18, Y+61	; 0x3d
   1372c:	3e ad       	ldd	r19, Y+62	; 0x3e
   1372e:	4f ad       	ldd	r20, Y+63	; 0x3f
   13730:	ac 97       	sbiw	r28, 0x2c	; 44
   13732:	21 83       	std	Z+1, r18	; 0x01
   13734:	32 83       	std	Z+2, r19	; 0x02
   13736:	43 83       	std	Z+3, r20	; 0x03
   13738:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   1373c:	6e 96       	adiw	r28, 0x1e	; 30
   1373e:	2e ad       	ldd	r18, Y+62	; 0x3e
   13740:	3f ad       	ldd	r19, Y+63	; 0x3f
   13742:	6e 97       	sbiw	r28, 0x1e	; 30
   13744:	ed b7       	in	r30, 0x3d	; 61
   13746:	fe b7       	in	r31, 0x3e	; 62
   13748:	37 83       	std	Z+7, r19	; 0x07
   1374a:	26 83       	std	Z+6, r18	; 0x06
   1374c:	af 96       	adiw	r28, 0x2f	; 47
   1374e:	8d ad       	ldd	r24, Y+61	; 0x3d
   13750:	9e ad       	ldd	r25, Y+62	; 0x3e
   13752:	af ad       	ldd	r26, Y+63	; 0x3f
   13754:	af 97       	sbiw	r28, 0x2f	; 47
   13756:	83 83       	std	Z+3, r24	; 0x03
   13758:	94 83       	std	Z+4, r25	; 0x04
   1375a:	a5 83       	std	Z+5, r26	; 0x05
   1375c:	2a e3       	ldi	r18, 0x3A	; 58
   1375e:	30 e0       	ldi	r19, 0x00	; 0
   13760:	2c 0f       	add	r18, r28
   13762:	3d 1f       	adc	r19, r29
   13764:	32 83       	std	Z+2, r19	; 0x02
   13766:	21 83       	std	Z+1, r18	; 0x01
   13768:	0e 94 18 47 	call	0x8e30	; 0x8e30 <sprintf_P>
   1376c:	f5 01       	movw	r30, r10
   1376e:	a2 80       	ldd	r10, Z+2	; 0x02
   13770:	b3 80       	ldd	r11, Z+3	; 0x03
   13772:	c2 01       	movw	r24, r4
   13774:	b1 01       	movw	r22, r2
   13776:	0e 94 0d a4 	call	0x1481a	; 0x1481a <lif_dir_count>
   1377a:	9b 01       	movw	r18, r22
   1377c:	ac 01       	movw	r20, r24
   1377e:	82 01       	movw	r16, r4
   13780:	71 01       	movw	r14, r2
   13782:	be 01       	movw	r22, r28
   13784:	66 5c       	subi	r22, 0xC6	; 198
   13786:	7f 4f       	sbci	r23, 0xFF	; 255
   13788:	c5 01       	movw	r24, r10
   1378a:	0e 94 96 de 	call	0x1bd2c	; 0x1bd2c <lif_create_image>
   1378e:	6c 96       	adiw	r28, 0x1c	; 28
   13790:	2e ad       	ldd	r18, Y+62	; 0x3e
   13792:	3f ad       	ldd	r19, Y+63	; 0x3f
   13794:	6c 97       	sbiw	r28, 0x1c	; 28
   13796:	2f 5f       	subi	r18, 0xFF	; 255
   13798:	3f 4f       	sbci	r19, 0xFF	; 255
   1379a:	6c 96       	adiw	r28, 0x1c	; 28
   1379c:	3f af       	std	Y+63, r19	; 0x3f
   1379e:	2e af       	std	Y+62, r18	; 0x3e
   137a0:	6c 97       	sbiw	r28, 0x1c	; 28
   137a2:	6e 96       	adiw	r28, 0x1e	; 30
   137a4:	8e ad       	ldd	r24, Y+62	; 0x3e
   137a6:	9f ad       	ldd	r25, Y+63	; 0x3f
   137a8:	6e 97       	sbiw	r28, 0x1e	; 30
   137aa:	01 96       	adiw	r24, 0x01	; 1
   137ac:	6e 96       	adiw	r28, 0x1e	; 30
   137ae:	9f af       	std	Y+63, r25	; 0x3f
   137b0:	8e af       	std	Y+62, r24	; 0x3e
   137b2:	6e 97       	sbiw	r28, 0x1e	; 30
   137b4:	f6 01       	movw	r30, r12
   137b6:	80 81       	ld	r24, Z
   137b8:	81 30       	cpi	r24, 0x01	; 1
   137ba:	09 f0       	breq	.+2      	; 0x137be <format_drives+0x1b2>
   137bc:	77 c0       	rjmp	.+238    	; 0x138ac <format_drives+0x2a0>
   137be:	a7 80       	ldd	r10, Z+7	; 0x07
   137c0:	b0 84       	ldd	r11, Z+8	; 0x08
   137c2:	be 01       	movw	r22, r28
   137c4:	66 5f       	subi	r22, 0xF6	; 246
   137c6:	7f 4f       	sbci	r23, 0xFF	; 255
   137c8:	f5 01       	movw	r30, r10
   137ca:	82 81       	ldd	r24, Z+2	; 0x02
   137cc:	93 81       	ldd	r25, Z+3	; 0x03
   137ce:	0e 94 70 79 	call	0xf2e0	; 0xf2e0 <stat>
   137d2:	01 96       	adiw	r24, 0x01	; 1
   137d4:	09 f0       	breq	.+2      	; 0x137d8 <format_drives+0x1cc>
   137d6:	6a c0       	rjmp	.+212    	; 0x138ac <format_drives+0x2a0>
   137d8:	f5 01       	movw	r30, r10
   137da:	80 85       	ldd	r24, Z+8	; 0x08
   137dc:	91 85       	ldd	r25, Z+9	; 0x09
   137de:	81 15       	cp	r24, r1
   137e0:	91 40       	sbci	r25, 0x01	; 1
   137e2:	69 f0       	breq	.+26     	; 0x137fe <format_drives+0x1f2>
   137e4:	a9 96       	adiw	r28, 0x29	; 41
   137e6:	2d ad       	ldd	r18, Y+61	; 0x3d
   137e8:	3e ad       	ldd	r19, Y+62	; 0x3e
   137ea:	4f ad       	ldd	r20, Y+63	; 0x3f
   137ec:	a9 97       	sbiw	r28, 0x29	; 41
   137ee:	ed b7       	in	r30, 0x3d	; 61
   137f0:	fe b7       	in	r31, 0x3e	; 62
   137f2:	21 83       	std	Z+1, r18	; 0x01
   137f4:	32 83       	std	Z+2, r19	; 0x02
   137f6:	43 83       	std	Z+3, r20	; 0x03
   137f8:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   137fc:	57 c0       	rjmp	.+174    	; 0x138ac <format_drives+0x2a0>
   137fe:	f6 01       	movw	r30, r12
   13800:	23 80       	ldd	r2, Z+3	; 0x03
   13802:	34 80       	ldd	r3, Z+4	; 0x04
   13804:	45 80       	ldd	r4, Z+5	; 0x05
   13806:	56 80       	ldd	r5, Z+6	; 0x06
   13808:	ed b7       	in	r30, 0x3d	; 61
   1380a:	fe b7       	in	r31, 0x3e	; 62
   1380c:	26 82       	std	Z+6, r2	; 0x06
   1380e:	37 82       	std	Z+7, r3	; 0x07
   13810:	40 86       	std	Z+8, r4	; 0x08
   13812:	51 86       	std	Z+9, r5	; 0x09
   13814:	f5 01       	movw	r30, r10
   13816:	82 81       	ldd	r24, Z+2	; 0x02
   13818:	93 81       	ldd	r25, Z+3	; 0x03
   1381a:	ed b7       	in	r30, 0x3d	; 61
   1381c:	fe b7       	in	r31, 0x3e	; 62
   1381e:	95 83       	std	Z+5, r25	; 0x05
   13820:	84 83       	std	Z+4, r24	; 0x04
   13822:	a3 96       	adiw	r28, 0x23	; 35
   13824:	2d ad       	ldd	r18, Y+61	; 0x3d
   13826:	3e ad       	ldd	r19, Y+62	; 0x3e
   13828:	4f ad       	ldd	r20, Y+63	; 0x3f
   1382a:	a3 97       	sbiw	r28, 0x23	; 35
   1382c:	21 83       	std	Z+1, r18	; 0x01
   1382e:	32 83       	std	Z+2, r19	; 0x02
   13830:	43 83       	std	Z+3, r20	; 0x03
   13832:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   13836:	a0 96       	adiw	r28, 0x20	; 32
   13838:	2e ad       	ldd	r18, Y+62	; 0x3e
   1383a:	3f ad       	ldd	r19, Y+63	; 0x3f
   1383c:	a0 97       	sbiw	r28, 0x20	; 32
   1383e:	ed b7       	in	r30, 0x3d	; 61
   13840:	fe b7       	in	r31, 0x3e	; 62
   13842:	37 83       	std	Z+7, r19	; 0x07
   13844:	26 83       	std	Z+6, r18	; 0x06
   13846:	a6 96       	adiw	r28, 0x26	; 38
   13848:	8d ad       	ldd	r24, Y+61	; 0x3d
   1384a:	9e ad       	ldd	r25, Y+62	; 0x3e
   1384c:	af ad       	ldd	r26, Y+63	; 0x3f
   1384e:	a6 97       	sbiw	r28, 0x26	; 38
   13850:	83 83       	std	Z+3, r24	; 0x03
   13852:	94 83       	std	Z+4, r25	; 0x04
   13854:	a5 83       	std	Z+5, r26	; 0x05
   13856:	2a e3       	ldi	r18, 0x3A	; 58
   13858:	30 e0       	ldi	r19, 0x00	; 0
   1385a:	2c 0f       	add	r18, r28
   1385c:	3d 1f       	adc	r19, r29
   1385e:	32 83       	std	Z+2, r19	; 0x02
   13860:	21 83       	std	Z+1, r18	; 0x01
   13862:	0e 94 18 47 	call	0x8e30	; 0x8e30 <sprintf_P>
   13866:	f5 01       	movw	r30, r10
   13868:	a2 80       	ldd	r10, Z+2	; 0x02
   1386a:	b3 80       	ldd	r11, Z+3	; 0x03
   1386c:	c2 01       	movw	r24, r4
   1386e:	b1 01       	movw	r22, r2
   13870:	d4 d7       	rcall	.+4008   	; 0x1481a <lif_dir_count>
   13872:	9b 01       	movw	r18, r22
   13874:	ac 01       	movw	r20, r24
   13876:	82 01       	movw	r16, r4
   13878:	71 01       	movw	r14, r2
   1387a:	be 01       	movw	r22, r28
   1387c:	66 5c       	subi	r22, 0xC6	; 198
   1387e:	7f 4f       	sbci	r23, 0xFF	; 255
   13880:	c5 01       	movw	r24, r10
   13882:	0e 94 96 de 	call	0x1bd2c	; 0x1bd2c <lif_create_image>
   13886:	6c 96       	adiw	r28, 0x1c	; 28
   13888:	2e ad       	ldd	r18, Y+62	; 0x3e
   1388a:	3f ad       	ldd	r19, Y+63	; 0x3f
   1388c:	6c 97       	sbiw	r28, 0x1c	; 28
   1388e:	2f 5f       	subi	r18, 0xFF	; 255
   13890:	3f 4f       	sbci	r19, 0xFF	; 255
   13892:	6c 96       	adiw	r28, 0x1c	; 28
   13894:	3f af       	std	Y+63, r19	; 0x3f
   13896:	2e af       	std	Y+62, r18	; 0x3e
   13898:	6c 97       	sbiw	r28, 0x1c	; 28
   1389a:	a0 96       	adiw	r28, 0x20	; 32
   1389c:	8e ad       	ldd	r24, Y+62	; 0x3e
   1389e:	9f ad       	ldd	r25, Y+63	; 0x3f
   138a0:	a0 97       	sbiw	r28, 0x20	; 32
   138a2:	01 96       	adiw	r24, 0x01	; 1
   138a4:	a0 96       	adiw	r28, 0x20	; 32
   138a6:	9f af       	std	Y+63, r25	; 0x3f
   138a8:	8e af       	std	Y+62, r24	; 0x3e
   138aa:	a0 97       	sbiw	r28, 0x20	; 32
   138ac:	9b e0       	ldi	r25, 0x0B	; 11
   138ae:	c9 0e       	add	r12, r25
   138b0:	d1 1c       	adc	r13, r1
   138b2:	a8 e7       	ldi	r26, 0x78	; 120
   138b4:	ca 16       	cp	r12, r26
   138b6:	af e1       	ldi	r26, 0x1F	; 31
   138b8:	da 06       	cpc	r13, r26
   138ba:	09 f0       	breq	.+2      	; 0x138be <format_drives+0x2b2>
   138bc:	02 cf       	rjmp	.-508    	; 0x136c2 <format_drives+0xb6>
   138be:	6c 96       	adiw	r28, 0x1c	; 28
   138c0:	ee ad       	ldd	r30, Y+62	; 0x3e
   138c2:	ff ad       	ldd	r31, Y+63	; 0x3f
   138c4:	6c 97       	sbiw	r28, 0x1c	; 28
   138c6:	ef 2b       	or	r30, r31
   138c8:	11 f0       	breq	.+4      	; 0x138ce <format_drives+0x2c2>
   138ca:	0e 94 3b 32 	call	0x6476	; 0x6476 <sep>
   138ce:	c2 59       	subi	r28, 0x92	; 146
   138d0:	df 4f       	sbci	r29, 0xFF	; 255
   138d2:	0f b6       	in	r0, 0x3f	; 63
   138d4:	f8 94       	cli
   138d6:	de bf       	out	0x3e, r29	; 62
   138d8:	0f be       	out	0x3f, r0	; 63
   138da:	cd bf       	out	0x3d, r28	; 61
   138dc:	df 91       	pop	r29
   138de:	cf 91       	pop	r28
   138e0:	1f 91       	pop	r17
   138e2:	0f 91       	pop	r16
   138e4:	ff 90       	pop	r15
   138e6:	ef 90       	pop	r14
   138e8:	df 90       	pop	r13
   138ea:	cf 90       	pop	r12
   138ec:	bf 90       	pop	r11
   138ee:	af 90       	pop	r10
   138f0:	8f 90       	pop	r8
   138f2:	7f 90       	pop	r7
   138f4:	6f 90       	pop	r6
   138f6:	5f 90       	pop	r5
   138f8:	4f 90       	pop	r4
   138fa:	3f 90       	pop	r3
   138fc:	2f 90       	pop	r2
   138fe:	08 95       	ret

00013900 <mount_usage>:
   13900:	00 d0       	rcall	.+0      	; 0x13902 <mount_usage+0x2>
   13902:	1f 92       	push	r1
   13904:	86 e4       	ldi	r24, 0x46	; 70
   13906:	9a e1       	ldi	r25, 0x1A	; 26
   13908:	a0 e0       	ldi	r26, 0x00	; 0
   1390a:	ed b7       	in	r30, 0x3d	; 61
   1390c:	fe b7       	in	r31, 0x3e	; 62
   1390e:	81 83       	std	Z+1, r24	; 0x01
   13910:	92 83       	std	Z+2, r25	; 0x02
   13912:	a3 83       	std	Z+3, r26	; 0x03
   13914:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   13918:	85 e3       	ldi	r24, 0x35	; 53
   1391a:	9a e1       	ldi	r25, 0x1A	; 26
   1391c:	a0 e0       	ldi	r26, 0x00	; 0
   1391e:	ed b7       	in	r30, 0x3d	; 61
   13920:	fe b7       	in	r31, 0x3e	; 62
   13922:	81 83       	std	Z+1, r24	; 0x01
   13924:	92 83       	std	Z+2, r25	; 0x02
   13926:	a3 83       	std	Z+3, r26	; 0x03
   13928:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   1392c:	86 e1       	ldi	r24, 0x16	; 22
   1392e:	9a e1       	ldi	r25, 0x1A	; 26
   13930:	a0 e0       	ldi	r26, 0x00	; 0
   13932:	ed b7       	in	r30, 0x3d	; 61
   13934:	fe b7       	in	r31, 0x3e	; 62
   13936:	81 83       	std	Z+1, r24	; 0x01
   13938:	92 83       	std	Z+2, r25	; 0x02
   1393a:	a3 83       	std	Z+3, r26	; 0x03
   1393c:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   13940:	88 ef       	ldi	r24, 0xF8	; 248
   13942:	99 e1       	ldi	r25, 0x19	; 25
   13944:	a0 e0       	ldi	r26, 0x00	; 0
   13946:	ed b7       	in	r30, 0x3d	; 61
   13948:	fe b7       	in	r31, 0x3e	; 62
   1394a:	81 83       	std	Z+1, r24	; 0x01
   1394c:	92 83       	std	Z+2, r25	; 0x02
   1394e:	a3 83       	std	Z+3, r26	; 0x03
   13950:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   13954:	86 ef       	ldi	r24, 0xF6	; 246
   13956:	99 e1       	ldi	r25, 0x19	; 25
   13958:	a0 e0       	ldi	r26, 0x00	; 0
   1395a:	ed b7       	in	r30, 0x3d	; 61
   1395c:	fe b7       	in	r31, 0x3e	; 62
   1395e:	81 83       	std	Z+1, r24	; 0x01
   13960:	92 83       	std	Z+2, r25	; 0x02
   13962:	a3 83       	std	Z+3, r26	; 0x03
   13964:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   13968:	84 ee       	ldi	r24, 0xE4	; 228
   1396a:	99 e1       	ldi	r25, 0x19	; 25
   1396c:	a0 e0       	ldi	r26, 0x00	; 0
   1396e:	ed b7       	in	r30, 0x3d	; 61
   13970:	fe b7       	in	r31, 0x3e	; 62
   13972:	81 83       	std	Z+1, r24	; 0x01
   13974:	92 83       	std	Z+2, r25	; 0x02
   13976:	a3 83       	std	Z+3, r26	; 0x03
   13978:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   1397c:	8f ec       	ldi	r24, 0xCF	; 207
   1397e:	99 e1       	ldi	r25, 0x19	; 25
   13980:	a0 e0       	ldi	r26, 0x00	; 0
   13982:	ed b7       	in	r30, 0x3d	; 61
   13984:	fe b7       	in	r31, 0x3e	; 62
   13986:	81 83       	std	Z+1, r24	; 0x01
   13988:	92 83       	std	Z+2, r25	; 0x02
   1398a:	a3 83       	std	Z+3, r26	; 0x03
   1398c:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   13990:	8d ec       	ldi	r24, 0xCD	; 205
   13992:	99 e1       	ldi	r25, 0x19	; 25
   13994:	a0 e0       	ldi	r26, 0x00	; 0
   13996:	ed b7       	in	r30, 0x3d	; 61
   13998:	fe b7       	in	r31, 0x3e	; 62
   1399a:	81 83       	std	Z+1, r24	; 0x01
   1399c:	92 83       	std	Z+2, r25	; 0x02
   1399e:	a3 83       	std	Z+3, r26	; 0x03
   139a0:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   139a4:	82 eb       	ldi	r24, 0xB2	; 178
   139a6:	99 e1       	ldi	r25, 0x19	; 25
   139a8:	a0 e0       	ldi	r26, 0x00	; 0
   139aa:	ed b7       	in	r30, 0x3d	; 61
   139ac:	fe b7       	in	r31, 0x3e	; 62
   139ae:	81 83       	std	Z+1, r24	; 0x01
   139b0:	92 83       	std	Z+2, r25	; 0x02
   139b2:	a3 83       	std	Z+3, r26	; 0x03
   139b4:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   139b8:	87 ea       	ldi	r24, 0xA7	; 167
   139ba:	99 e1       	ldi	r25, 0x19	; 25
   139bc:	a0 e0       	ldi	r26, 0x00	; 0
   139be:	ed b7       	in	r30, 0x3d	; 61
   139c0:	fe b7       	in	r31, 0x3e	; 62
   139c2:	81 83       	std	Z+1, r24	; 0x01
   139c4:	92 83       	std	Z+2, r25	; 0x02
   139c6:	a3 83       	std	Z+3, r26	; 0x03
   139c8:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   139cc:	0f 90       	pop	r0
   139ce:	0f 90       	pop	r0
   139d0:	0f 90       	pop	r0
   139d2:	08 95       	ret

000139d4 <index_address>:
   139d4:	e4 ef       	ldi	r30, 0xF4	; 244
   139d6:	fe e1       	ldi	r31, 0x1E	; 30
   139d8:	90 e0       	ldi	r25, 0x00	; 0
   139da:	28 2f       	mov	r18, r24
   139dc:	88 0f       	add	r24, r24
   139de:	33 0b       	sbc	r19, r19
   139e0:	80 81       	ld	r24, Z
   139e2:	88 23       	and	r24, r24
   139e4:	29 f0       	breq	.+10     	; 0x139f0 <index_address+0x1c>
   139e6:	41 81       	ldd	r20, Z+1	; 0x01
   139e8:	50 e0       	ldi	r21, 0x00	; 0
   139ea:	42 17       	cp	r20, r18
   139ec:	53 07       	cpc	r21, r19
   139ee:	31 f0       	breq	.+12     	; 0x139fc <index_address+0x28>
   139f0:	9f 5f       	subi	r25, 0xFF	; 255
   139f2:	3b 96       	adiw	r30, 0x0b	; 11
   139f4:	9c 30       	cpi	r25, 0x0C	; 12
   139f6:	a1 f7       	brne	.-24     	; 0x139e0 <index_address+0xc>
   139f8:	8f ef       	ldi	r24, 0xFF	; 255
   139fa:	08 95       	ret
   139fc:	89 2f       	mov	r24, r25
   139fe:	08 95       	ret

00013a00 <umount>:

/// ===============================================
/// @brief umount disks - testing
/// @return Devices[] index on success, -1 on error
int8_t umount(int argc, char *argv[])
{
   13a00:	cf 93       	push	r28
   13a02:	df 93       	push	r29
   13a04:	00 d0       	rcall	.+0      	; 0x13a06 <umount+0x6>
   13a06:	00 d0       	rcall	.+0      	; 0x13a08 <umount+0x8>
   13a08:	1f 92       	push	r1
   13a0a:	eb 01       	movw	r28, r22

	int8_t address;
	int8_t index;

	if(argc != 2)
   13a0c:	02 97       	sbiw	r24, 0x02	; 2
   13a0e:	f1 f0       	breq	.+60     	; 0x13a4c <umount+0x4c>
	{
		printf("Usage:\n");
   13a10:	8f e9       	ldi	r24, 0x9F	; 159
   13a12:	99 e1       	ldi	r25, 0x19	; 25
   13a14:	a0 e0       	ldi	r26, 0x00	; 0
   13a16:	ed b7       	in	r30, 0x3d	; 61
   13a18:	fe b7       	in	r31, 0x3e	; 62
   13a1a:	81 83       	std	Z+1, r24	; 0x01
   13a1c:	92 83       	std	Z+2, r25	; 0x02
   13a1e:	a3 83       	std	Z+3, r26	; 0x03
   13a20:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
		printf("  umount address\n");
   13a24:	8d e8       	ldi	r24, 0x8D	; 141
   13a26:	99 e1       	ldi	r25, 0x19	; 25
   13a28:	a0 e0       	ldi	r26, 0x00	; 0
   13a2a:	ed b7       	in	r30, 0x3d	; 61
   13a2c:	fe b7       	in	r31, 0x3e	; 62
   13a2e:	81 83       	std	Z+1, r24	; 0x01
   13a30:	92 83       	std	Z+2, r25	; 0x02
   13a32:	a3 83       	std	Z+3, r26	; 0x03
   13a34:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
		printf("  - address is the device address\n");
   13a38:	8a e6       	ldi	r24, 0x6A	; 106
   13a3a:	99 e1       	ldi	r25, 0x19	; 25
   13a3c:	a0 e0       	ldi	r26, 0x00	; 0
   13a3e:	ed b7       	in	r30, 0x3d	; 61
   13a40:	fe b7       	in	r31, 0x3e	; 62
   13a42:	81 83       	std	Z+1, r24	; 0x01
   13a44:	92 83       	std	Z+2, r25	; 0x02
   13a46:	a3 83       	std	Z+3, r26	; 0x03
   13a48:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
	}
	address = atoi(argv[1]);
   13a4c:	8a 81       	ldd	r24, Y+2	; 0x02
   13a4e:	9b 81       	ldd	r25, Y+3	; 0x03
   13a50:	0e 94 c5 47 	call	0x8f8a	; 0x8f8a <atoi>
   13a54:	d8 2f       	mov	r29, r24
	index = index_address(address);
   13a56:	be df       	rcall	.-132    	; 0x139d4 <index_address>
   13a58:	c8 2f       	mov	r28, r24
	if(index == -1)
   13a5a:	8f 3f       	cpi	r24, 0xFF	; 255
   13a5c:	89 f4       	brne	.+34     	; 0x13a80 <umount+0x80>
	{
		printf("umount address:[%d] NOT found\n", address);
   13a5e:	8d 2f       	mov	r24, r29
   13a60:	dd 0f       	add	r29, r29
   13a62:	99 0b       	sbc	r25, r25
   13a64:	ed b7       	in	r30, 0x3d	; 61
   13a66:	fe b7       	in	r31, 0x3e	; 62
   13a68:	95 83       	std	Z+5, r25	; 0x05
   13a6a:	84 83       	std	Z+4, r24	; 0x04
   13a6c:	8b e4       	ldi	r24, 0x4B	; 75
   13a6e:	99 e1       	ldi	r25, 0x19	; 25
   13a70:	a0 e0       	ldi	r26, 0x00	; 0
   13a72:	81 83       	std	Z+1, r24	; 0x01
   13a74:	92 83       	std	Z+2, r25	; 0x02
   13a76:	a3 83       	std	Z+3, r26	; 0x03
   13a78:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
		return(-1);
   13a7c:	8f ef       	ldi	r24, 0xFF	; 255
	}
	free_device(index);
   13a7e:	02 c0       	rjmp	.+4      	; 0x13a84 <umount+0x84>
   13a80:	b9 db       	rcall	.-2190   	; 0x131f4 <free_device>
	return(index);
   13a82:	8c 2f       	mov	r24, r28
}
   13a84:	cd b7       	in	r28, 0x3d	; 61
   13a86:	de b7       	in	r29, 0x3e	; 62
   13a88:	25 96       	adiw	r28, 0x05	; 5
   13a8a:	e2 e0       	ldi	r30, 0x02	; 2
   13a8c:	0c 94 39 e7 	jmp	0x1ce72	; 0x1ce72 <__epilogue_restores__+0x20>

00013a90 <display_mount>:
	return(1);
}


void display_mount(int8_t index )
{
   13a90:	a9 e0       	ldi	r26, 0x09	; 9
   13a92:	b0 e0       	ldi	r27, 0x00	; 0
   13a94:	ee e4       	ldi	r30, 0x4E	; 78
   13a96:	fd e9       	ldi	r31, 0x9D	; 157
   13a98:	0c 94 1b e7 	jmp	0x1ce36	; 0x1ce36 <__prologue_saves__+0x1c>
#ifdef AMIGO
///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

	if(Devices[index].TYPE == NO_TYPE)
   13a9c:	08 2f       	mov	r16, r24
   13a9e:	08 2e       	mov	r0, r24
   13aa0:	00 0c       	add	r0, r0
   13aa2:	11 0b       	sbc	r17, r17
   13aa4:	9b e0       	ldi	r25, 0x0B	; 11
   13aa6:	89 02       	muls	r24, r25
   13aa8:	f0 01       	movw	r30, r0
   13aaa:	11 24       	eor	r1, r1
   13aac:	ec 50       	subi	r30, 0x0C	; 12
   13aae:	f1 4e       	sbci	r31, 0xE1	; 225
   13ab0:	80 81       	ld	r24, Z
   13ab2:	88 23       	and	r24, r24
   13ab4:	09 f4       	brne	.+2      	; 0x13ab8 <display_mount+0x28>
   13ab6:	5f c0       	rjmp	.+190    	; 0x13b76 <display_mount+0xe6>
		return;

	if(Devices[index].TYPE == SS80_TYPE)
   13ab8:	83 30       	cpi	r24, 0x03	; 3
   13aba:	c9 f4       	brne	.+50     	; 0x13aee <display_mount+0x5e>
	{
		SS80p= (SS80DiskType *)Devices[index].dev;
   13abc:	07 80       	ldd	r0, Z+7	; 0x07
   13abe:	f0 85       	ldd	r31, Z+8	; 0x08
   13ac0:	e0 2d       	mov	r30, r0

		printf("SS80    %-8s %2d %s\n", SS80p->HEADER.model, (int) SS80p->HEADER.ADDRESS, SS80p->HEADER.NAME);
   13ac2:	82 81       	ldd	r24, Z+2	; 0x02
   13ac4:	93 81       	ldd	r25, Z+3	; 0x03
   13ac6:	cd b7       	in	r28, 0x3d	; 61
   13ac8:	de b7       	in	r29, 0x3e	; 62
   13aca:	99 87       	std	Y+9, r25	; 0x09
   13acc:	88 87       	std	Y+8, r24	; 0x08
   13ace:	80 81       	ld	r24, Z
   13ad0:	90 e0       	ldi	r25, 0x00	; 0
   13ad2:	9f 83       	std	Y+7, r25	; 0x07
   13ad4:	8e 83       	std	Y+6, r24	; 0x06
   13ad6:	84 81       	ldd	r24, Z+4	; 0x04
   13ad8:	95 81       	ldd	r25, Z+5	; 0x05
   13ada:	9d 83       	std	Y+5, r25	; 0x05
   13adc:	8c 83       	std	Y+4, r24	; 0x04
   13ade:	8a e6       	ldi	r24, 0x6A	; 106
   13ae0:	98 e1       	ldi	r25, 0x18	; 24
   13ae2:	a0 e0       	ldi	r26, 0x00	; 0
   13ae4:	89 83       	std	Y+1, r24	; 0x01
   13ae6:	9a 83       	std	Y+2, r25	; 0x02
   13ae8:	ab 83       	std	Y+3, r26	; 0x03
   13aea:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
	}

#ifdef AMIGO
	if(Devices[index].TYPE == AMIGO_TYPE )
   13aee:	8b e0       	ldi	r24, 0x0B	; 11
   13af0:	80 9f       	mul	r24, r16
   13af2:	f0 01       	movw	r30, r0
   13af4:	81 9f       	mul	r24, r17
   13af6:	f0 0d       	add	r31, r0
   13af8:	11 24       	eor	r1, r1
   13afa:	ec 50       	subi	r30, 0x0C	; 12
   13afc:	f1 4e       	sbci	r31, 0xE1	; 225
   13afe:	80 81       	ld	r24, Z
   13b00:	81 30       	cpi	r24, 0x01	; 1
   13b02:	c9 f4       	brne	.+50     	; 0x13b36 <display_mount+0xa6>
	{
		AMIGOp = (AMIGODiskType *)Devices[index].dev;
   13b04:	07 80       	ldd	r0, Z+7	; 0x07
   13b06:	f0 85       	ldd	r31, Z+8	; 0x08
   13b08:	e0 2d       	mov	r30, r0
		printf("AMIGO   %-8s %2d %s\n", AMIGOp->HEADER.model, (int) AMIGOp->HEADER.ADDRESS, AMIGOp->HEADER.NAME);
   13b0a:	82 81       	ldd	r24, Z+2	; 0x02
   13b0c:	93 81       	ldd	r25, Z+3	; 0x03
   13b0e:	cd b7       	in	r28, 0x3d	; 61
   13b10:	de b7       	in	r29, 0x3e	; 62
   13b12:	99 87       	std	Y+9, r25	; 0x09
   13b14:	88 87       	std	Y+8, r24	; 0x08
   13b16:	80 81       	ld	r24, Z
   13b18:	90 e0       	ldi	r25, 0x00	; 0
   13b1a:	9f 83       	std	Y+7, r25	; 0x07
   13b1c:	8e 83       	std	Y+6, r24	; 0x06
   13b1e:	84 81       	ldd	r24, Z+4	; 0x04
   13b20:	95 81       	ldd	r25, Z+5	; 0x05
   13b22:	9d 83       	std	Y+5, r25	; 0x05
   13b24:	8c 83       	std	Y+4, r24	; 0x04
   13b26:	85 e5       	ldi	r24, 0x55	; 85
   13b28:	98 e1       	ldi	r25, 0x18	; 24
   13b2a:	a0 e0       	ldi	r26, 0x00	; 0
   13b2c:	89 83       	std	Y+1, r24	; 0x01
   13b2e:	9a 83       	std	Y+2, r25	; 0x02
   13b30:	ab 83       	std	Y+3, r26	; 0x03
   13b32:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
	}
#endif                                    // #ifdef AMIGO

	if(Devices[index].TYPE == PRINTER_TYPE )
   13b36:	8b e0       	ldi	r24, 0x0B	; 11
   13b38:	80 9f       	mul	r24, r16
   13b3a:	f0 01       	movw	r30, r0
   13b3c:	81 9f       	mul	r24, r17
   13b3e:	f0 0d       	add	r31, r0
   13b40:	11 24       	eor	r1, r1
   13b42:	ec 50       	subi	r30, 0x0C	; 12
   13b44:	f1 4e       	sbci	r31, 0xE1	; 225
   13b46:	80 81       	ld	r24, Z
   13b48:	84 30       	cpi	r24, 0x04	; 4
   13b4a:	a9 f4       	brne	.+42     	; 0x13b76 <display_mount+0xe6>
	{
            PRINTERp= (PRINTERDeviceType *)Devices[index].dev;
            printf("PRINTER %-8s %2d\n", " ", (int) PRINTERp->HEADER.ADDRESS);
   13b4c:	07 80       	ldd	r0, Z+7	; 0x07
   13b4e:	f0 85       	ldd	r31, Z+8	; 0x08
   13b50:	e0 2d       	mov	r30, r0
   13b52:	80 81       	ld	r24, Z
   13b54:	90 e0       	ldi	r25, 0x00	; 0
   13b56:	cd b7       	in	r28, 0x3d	; 61
   13b58:	de b7       	in	r29, 0x3e	; 62
   13b5a:	9f 83       	std	Y+7, r25	; 0x07
   13b5c:	8e 83       	std	Y+6, r24	; 0x06
   13b5e:	89 e6       	ldi	r24, 0x69	; 105
   13b60:	94 e0       	ldi	r25, 0x04	; 4
   13b62:	9d 83       	std	Y+5, r25	; 0x05
   13b64:	8c 83       	std	Y+4, r24	; 0x04
   13b66:	83 e4       	ldi	r24, 0x43	; 67
   13b68:	98 e1       	ldi	r25, 0x18	; 24
   13b6a:	a0 e0       	ldi	r26, 0x00	; 0
   13b6c:	89 83       	std	Y+1, r24	; 0x01
   13b6e:	9a 83       	std	Y+2, r25	; 0x02
   13b70:	ab 83       	std	Y+3, r26	; 0x03
   13b72:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
	}
}
   13b76:	cd b7       	in	r28, 0x3d	; 61
   13b78:	de b7       	in	r29, 0x3e	; 62
   13b7a:	29 96       	adiw	r28, 0x09	; 9
   13b7c:	e4 e0       	ldi	r30, 0x04	; 4
   13b7e:	0c 94 37 e7 	jmp	0x1ce6e	; 0x1ce6e <__epilogue_restores__+0x1c>

00013b82 <verify_device>:

/// ===============================================
/// @brief Verify a device and delete it is there are any errors
/// @return  1 = OK 0 = ERROR
int8_t verify_device(int8_t index)
{
   13b82:	a5 e0       	ldi	r26, 0x05	; 5
   13b84:	b0 e0       	ldi	r27, 0x00	; 0
   13b86:	e7 ec       	ldi	r30, 0xC7	; 199
   13b88:	fd e9       	ldi	r31, 0x9D	; 157
   13b8a:	0c 94 18 e7 	jmp	0x1ce30	; 0x1ce30 <__prologue_saves__+0x16>
#ifdef AMIGO
///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    if(Devices[index].TYPE == NO_TYPE)
   13b8e:	e8 2e       	mov	r14, r24
   13b90:	08 2e       	mov	r0, r24
   13b92:	00 0c       	add	r0, r0
   13b94:	ff 08       	sbc	r15, r15
   13b96:	9b e0       	ldi	r25, 0x0B	; 11
   13b98:	89 02       	muls	r24, r25
   13b9a:	f0 01       	movw	r30, r0
   13b9c:	11 24       	eor	r1, r1
   13b9e:	ec 50       	subi	r30, 0x0C	; 12
   13ba0:	f1 4e       	sbci	r31, 0xE1	; 225
   13ba2:	10 81       	ld	r17, Z
   13ba4:	11 23       	and	r17, r17
   13ba6:	09 f1       	breq	.+66     	; 0x13bea <verify_device+0x68>
   13ba8:	d8 2e       	mov	r13, r24
        return(ret);

	address = Devices[index].ADDRESS;
   13baa:	81 81       	ldd	r24, Z+1	; 0x01
    type = Devices[index].TYPE;
	ppr = Devices[index].PPR;
   13bac:	02 81       	ldd	r16, Z+2	; 0x02

	if(address < 0 || address > 31)
   13bae:	80 32       	cpi	r24, 0x20	; 32
   13bb0:	78 f0       	brcs	.+30     	; 0x13bd0 <verify_device+0x4e>
	{
		printf("Address (%d) out of range\n", (int) address);
   13bb2:	90 e0       	ldi	r25, 0x00	; 0
   13bb4:	ed b7       	in	r30, 0x3d	; 61
   13bb6:	fe b7       	in	r31, 0x3e	; 62
   13bb8:	95 83       	std	Z+5, r25	; 0x05
   13bba:	84 83       	std	Z+4, r24	; 0x04
   13bbc:	8f e5       	ldi	r24, 0x5F	; 95
   13bbe:	9b e1       	ldi	r25, 0x1B	; 27
   13bc0:	a0 e0       	ldi	r26, 0x00	; 0
   13bc2:	81 83       	std	Z+1, r24	; 0x01
   13bc4:	92 83       	std	Z+2, r25	; 0x02
   13bc6:	a3 83       	std	Z+3, r26	; 0x03
   13bc8:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
		ret = 0;
   13bcc:	80 e0       	ldi	r24, 0x00	; 0
   13bce:	01 c0       	rjmp	.+2      	; 0x13bd2 <verify_device+0x50>
int8_t verify_device(int8_t index)
{
    long sectors;
	int8_t type;
	int address,ppr;
	int8_t ret = 1;	
   13bd0:	81 e0       	ldi	r24, 0x01	; 1
	}
	addr_bits |= addr_mask;

	
	// Printers do not use PPR
	if(type == PRINTER_TYPE)
   13bd2:	14 30       	cpi	r17, 0x04	; 4
   13bd4:	61 f4       	brne	.+24     	; 0x13bee <verify_device+0x6c>
	{
		Devices[index].PPR = 0xff;
   13bd6:	8b e0       	ldi	r24, 0x0B	; 11
   13bd8:	8e 9d       	mul	r24, r14
   13bda:	f0 01       	movw	r30, r0
   13bdc:	8f 9d       	mul	r24, r15
   13bde:	f0 0d       	add	r31, r0
   13be0:	11 24       	eor	r1, r1
   13be2:	ec 50       	subi	r30, 0x0C	; 12
   13be4:	f1 4e       	sbci	r31, 0xE1	; 225
   13be6:	8f ef       	ldi	r24, 0xFF	; 255
   13be8:	82 83       	std	Z+2, r24	; 0x02
		return(1);
   13bea:	81 e0       	ldi	r24, 0x01	; 1
   13bec:	90 c0       	rjmp	.+288    	; 0x13d0e <verify_device+0x18c>
	}
	if(type == SS80_TYPE || AMIGO_TYPE)
	{
		if(ppr < 0 || ppr > 7)
   13bee:	08 30       	cpi	r16, 0x08	; 8
   13bf0:	08 f0       	brcs	.+2      	; 0x13bf4 <verify_device+0x72>
		{
			ret = 0;
   13bf2:	80 e0       	ldi	r24, 0x00	; 0
			printf("PPR (%d) duplicated\n", (int) ppr);
			ret = 0;
		}
		ppr_bits |= ppr_mask;
	}
    if(type == SS80_TYPE)
   13bf4:	13 30       	cpi	r17, 0x03	; 3
   13bf6:	79 f5       	brne	.+94     	; 0x13c56 <verify_device+0xd4>
    {
        SS80p= (SS80DiskType *)Devices[index].dev;
   13bf8:	9b e0       	ldi	r25, 0x0B	; 11
   13bfa:	9e 9d       	mul	r25, r14
   13bfc:	f0 01       	movw	r30, r0
   13bfe:	9f 9d       	mul	r25, r15
   13c00:	f0 0d       	add	r31, r0
   13c02:	11 24       	eor	r1, r1
   13c04:	ec 50       	subi	r30, 0x0C	; 12
   13c06:	f1 4e       	sbci	r31, 0xE1	; 225
   13c08:	c7 81       	ldd	r28, Z+7	; 0x07
   13c0a:	d0 85       	ldd	r29, Z+8	; 0x08
        if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
   13c0c:	2a 89       	ldd	r18, Y+18	; 0x12
   13c0e:	3b 89       	ldd	r19, Y+19	; 0x13
   13c10:	21 15       	cp	r18, r1
   13c12:	31 40       	sbci	r19, 0x01	; 1
   13c14:	79 f0       	breq	.+30     	; 0x13c34 <verify_device+0xb2>
        {
// SS80p->UNIT.BYTES_PER_BLOCK = 256;
            printf("Warning: %s BYTES_PER_BLOCK != 256, Adjusting to 256\n", SS80p->HEADER.model);
   13c16:	8c 81       	ldd	r24, Y+4	; 0x04
   13c18:	9d 81       	ldd	r25, Y+5	; 0x05
   13c1a:	ed b7       	in	r30, 0x3d	; 61
   13c1c:	fe b7       	in	r31, 0x3e	; 62
   13c1e:	95 83       	std	Z+5, r25	; 0x05
   13c20:	84 83       	std	Z+4, r24	; 0x04
   13c22:	89 e2       	ldi	r24, 0x29	; 41
   13c24:	9b e1       	ldi	r25, 0x1B	; 27
   13c26:	a0 e0       	ldi	r26, 0x00	; 0
   13c28:	81 83       	std	Z+1, r24	; 0x01
   13c2a:	92 83       	std	Z+2, r25	; 0x02
   13c2c:	a3 83       	std	Z+3, r26	; 0x03
   13c2e:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
			ret = 0;
   13c32:	80 e0       	ldi	r24, 0x00	; 0
        }
        sectors = SS80p->VOLUME.MAX_BLOCK_NUMBER+1;
        Devices[index].BLOCKS = sectors;
   13c34:	9b e0       	ldi	r25, 0x0B	; 11
   13c36:	9e 9d       	mul	r25, r14
   13c38:	f0 01       	movw	r30, r0
   13c3a:	9f 9d       	mul	r25, r15
   13c3c:	f0 0d       	add	r31, r0
   13c3e:	11 24       	eor	r1, r1
   13c40:	ec 50       	subi	r30, 0x0C	; 12
   13c42:	f1 4e       	sbci	r31, 0xE1	; 225
   13c44:	48 a5       	ldd	r20, Y+40	; 0x28
   13c46:	59 a5       	ldd	r21, Y+41	; 0x29
   13c48:	6a a5       	ldd	r22, Y+42	; 0x2a
   13c4a:	7b a5       	ldd	r23, Y+43	; 0x2b
   13c4c:	4f 5f       	subi	r20, 0xFF	; 255
   13c4e:	5f 4f       	sbci	r21, 0xFF	; 255
   13c50:	6f 4f       	sbci	r22, 0xFF	; 255
   13c52:	7f 4f       	sbci	r23, 0xFF	; 255
   13c54:	47 c0       	rjmp	.+142    	; 0x13ce4 <verify_device+0x162>
    }                                         // SS80_TYPE

#ifdef AMIGO
    if(type == AMIGO_TYPE )
   13c56:	11 30       	cpi	r17, 0x01	; 1
   13c58:	09 f0       	breq	.+2      	; 0x13c5c <verify_device+0xda>
   13c5a:	48 c0       	rjmp	.+144    	; 0x13cec <verify_device+0x16a>
    {
        AMIGOp = (AMIGODiskType *)Devices[index].dev;
   13c5c:	9b e0       	ldi	r25, 0x0B	; 11
   13c5e:	9e 9d       	mul	r25, r14
   13c60:	f0 01       	movw	r30, r0
   13c62:	9f 9d       	mul	r25, r15
   13c64:	f0 0d       	add	r31, r0
   13c66:	11 24       	eor	r1, r1
   13c68:	ec 50       	subi	r30, 0x0C	; 12
   13c6a:	f1 4e       	sbci	r31, 0xE1	; 225
   13c6c:	c7 81       	ldd	r28, Z+7	; 0x07
   13c6e:	d0 85       	ldd	r29, Z+8	; 0x08
        if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
   13c70:	28 85       	ldd	r18, Y+8	; 0x08
   13c72:	39 85       	ldd	r19, Y+9	; 0x09
   13c74:	21 15       	cp	r18, r1
   13c76:	31 40       	sbci	r19, 0x01	; 1
   13c78:	a9 f0       	breq	.+42     	; 0x13ca4 <verify_device+0x122>
        {
            AMIGOp->GEOMETRY.BYTES_PER_SECTOR = 256;
   13c7a:	80 e0       	ldi	r24, 0x00	; 0
   13c7c:	91 e0       	ldi	r25, 0x01	; 1
   13c7e:	99 87       	std	Y+9, r25	; 0x09
   13c80:	88 87       	std	Y+8, r24	; 0x08
            printf("Warning: %s BYTES_PER_SECTOR != 256, Adjusting to 256\n", SS80p->HEADER.model);
   13c82:	80 91 04 00 	lds	r24, 0x0004	; 0x800004 <__TEXT_REGION_LENGTH__+0x7e0004>
   13c86:	90 91 05 00 	lds	r25, 0x0005	; 0x800005 <__TEXT_REGION_LENGTH__+0x7e0005>
   13c8a:	ed b7       	in	r30, 0x3d	; 61
   13c8c:	fe b7       	in	r31, 0x3e	; 62
   13c8e:	95 83       	std	Z+5, r25	; 0x05
   13c90:	84 83       	std	Z+4, r24	; 0x04
   13c92:	82 ef       	ldi	r24, 0xF2	; 242
   13c94:	9a e1       	ldi	r25, 0x1A	; 26
   13c96:	a0 e0       	ldi	r26, 0x00	; 0
   13c98:	81 83       	std	Z+1, r24	; 0x01
   13c9a:	92 83       	std	Z+2, r25	; 0x02
   13c9c:	a3 83       	std	Z+3, r26	; 0x03
   13c9e:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
			ret = 0;
   13ca2:	80 e0       	ldi	r24, 0x00	; 0
        }
        sectors = AMIGOp->GEOMETRY.SECTORS_PER_TRACK
            * AMIGOp->GEOMETRY.HEADS
            * AMIGOp->GEOMETRY.CYLINDERS;
        Devices[index].BLOCKS = sectors;
   13ca4:	9b e0       	ldi	r25, 0x0B	; 11
   13ca6:	9e 9d       	mul	r25, r14
   13ca8:	f0 01       	movw	r30, r0
   13caa:	9f 9d       	mul	r25, r15
   13cac:	f0 0d       	add	r31, r0
   13cae:	11 24       	eor	r1, r1
   13cb0:	ec 50       	subi	r30, 0x0C	; 12
   13cb2:	f1 4e       	sbci	r31, 0xE1	; 225
   13cb4:	4a 85       	ldd	r20, Y+10	; 0x0a
   13cb6:	5b 85       	ldd	r21, Y+11	; 0x0b
   13cb8:	2c 85       	ldd	r18, Y+12	; 0x0c
   13cba:	3d 85       	ldd	r19, Y+13	; 0x0d
   13cbc:	42 9f       	mul	r20, r18
   13cbe:	b0 01       	movw	r22, r0
   13cc0:	43 9f       	mul	r20, r19
   13cc2:	70 0d       	add	r23, r0
   13cc4:	52 9f       	mul	r21, r18
   13cc6:	70 0d       	add	r23, r0
   13cc8:	11 24       	eor	r1, r1
   13cca:	2e 85       	ldd	r18, Y+14	; 0x0e
   13ccc:	3f 85       	ldd	r19, Y+15	; 0x0f
   13cce:	62 9f       	mul	r22, r18
   13cd0:	a0 01       	movw	r20, r0
   13cd2:	63 9f       	mul	r22, r19
   13cd4:	50 0d       	add	r21, r0
   13cd6:	72 9f       	mul	r23, r18
   13cd8:	50 0d       	add	r21, r0
   13cda:	11 24       	eor	r1, r1
   13cdc:	05 2e       	mov	r0, r21
   13cde:	00 0c       	add	r0, r0
   13ce0:	66 0b       	sbc	r22, r22
   13ce2:	77 0b       	sbc	r23, r23
   13ce4:	43 83       	std	Z+3, r20	; 0x03
   13ce6:	54 83       	std	Z+4, r21	; 0x04
   13ce8:	65 83       	std	Z+5, r22	; 0x05
   13cea:	76 83       	std	Z+6, r23	; 0x06
    }
#endif                                    // #ifdef AMIGO
	if(!ret)
   13cec:	81 11       	cpse	r24, r1
   13cee:	7d cf       	rjmp	.-262    	; 0x13bea <verify_device+0x68>
	{
		printf("Device errors - removing: ");
   13cf0:	87 ed       	ldi	r24, 0xD7	; 215
   13cf2:	9a e1       	ldi	r25, 0x1A	; 26
   13cf4:	a0 e0       	ldi	r26, 0x00	; 0
   13cf6:	ed b7       	in	r30, 0x3d	; 61
   13cf8:	fe b7       	in	r31, 0x3e	; 62
   13cfa:	81 83       	std	Z+1, r24	; 0x01
   13cfc:	92 83       	std	Z+2, r25	; 0x02
   13cfe:	a3 83       	std	Z+3, r26	; 0x03
   13d00:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
		display_mount(index);	
   13d04:	8d 2d       	mov	r24, r13
   13d06:	c4 de       	rcall	.-632    	; 0x13a90 <display_mount>
		free_device(index);
   13d08:	8d 2d       	mov	r24, r13
   13d0a:	74 da       	rcall	.-2840   	; 0x131f4 <free_device>
   13d0c:	80 e0       	ldi	r24, 0x00	; 0
	}
	return(ret);
}
   13d0e:	cd b7       	in	r28, 0x3d	; 61
   13d10:	de b7       	in	r29, 0x3e	; 62
   13d12:	25 96       	adiw	r28, 0x05	; 5
   13d14:	e7 e0       	ldi	r30, 0x07	; 7
   13d16:	0c 94 34 e7 	jmp	0x1ce68	; 0x1ce68 <__epilogue_restores__+0x16>

00013d1a <verify_devices>:

/// ===============================================
/// @brief Post process and Verify all devices
/// @return  1 = OK 0 = ERROR
void verify_devices()
{
   13d1a:	cf 93       	push	r28
	int8_t i;

	for(i=0;i<MAX_DEVICES;++i)
   13d1c:	c0 e0       	ldi	r28, 0x00	; 0
		verify_device(i);
   13d1e:	8c 2f       	mov	r24, r28
   13d20:	30 df       	rcall	.-416    	; 0x13b82 <verify_device>
   13d22:	cf 5f       	subi	r28, 0xFF	; 255
/// @return  1 = OK 0 = ERROR
void verify_devices()
{
	int8_t i;

	for(i=0;i<MAX_DEVICES;++i)
   13d24:	cc 30       	cpi	r28, 0x0C	; 12
   13d26:	d9 f7       	brne	.-10     	; 0x13d1e <verify_devices+0x4>
		verify_device(i);

}
   13d28:	cf 91       	pop	r28
   13d2a:	08 95       	ret

00013d2c <Read_Config>:
/// Set all drive parameters and debuglevel
///
/// @param name: config file name to process
/// @return  number of parse errors
int Read_Config(char *name)
{
   13d2c:	ae e1       	ldi	r26, 0x1E	; 30
   13d2e:	b1 e0       	ldi	r27, 0x01	; 1
   13d30:	ec e9       	ldi	r30, 0x9C	; 156
   13d32:	fe e9       	ldi	r31, 0x9E	; 158
   13d34:	0c 94 0d e7 	jmp	0x1ce1a	; 0x1ce1a <__prologue_saves__>
   13d38:	8c 01       	movw	r16, r24
	int8_t address;

    char str[128];
    char token[128];

    init_Devices();
   13d3a:	76 db       	rcall	.-2324   	; 0x13428 <init_Devices>

    printf("Reading: %s\n", name);
   13d3c:	ed b7       	in	r30, 0x3d	; 61
   13d3e:	fe b7       	in	r31, 0x3e	; 62
   13d40:	15 83       	std	Z+5, r17	; 0x05
   13d42:	04 83       	std	Z+4, r16	; 0x04
   13d44:	81 e2       	ldi	r24, 0x21	; 33
   13d46:	91 e2       	ldi	r25, 0x21	; 33
   13d48:	a0 e0       	ldi	r26, 0x00	; 0
   13d4a:	81 83       	std	Z+1, r24	; 0x01
   13d4c:	92 83       	std	Z+2, r25	; 0x02
   13d4e:	a3 83       	std	Z+3, r26	; 0x03
   13d50:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    cfg = fopen(name, "rb");
   13d54:	6e ef       	ldi	r22, 0xFE	; 254
   13d56:	78 e0       	ldi	r23, 0x08	; 8
   13d58:	c8 01       	movw	r24, r16
   13d5a:	0e 94 6b 7e 	call	0xfcd6	; 0xfcd6 <fopen>
   13d5e:	c5 5f       	subi	r28, 0xF5	; 245
   13d60:	de 4f       	sbci	r29, 0xFE	; 254
   13d62:	99 83       	std	Y+1, r25	; 0x01
   13d64:	88 83       	st	Y, r24
   13d66:	cb 50       	subi	r28, 0x0B	; 11
   13d68:	d1 40       	sbci	r29, 0x01	; 1
    if(cfg == NULL)
   13d6a:	89 2b       	or	r24, r25
   13d6c:	09 f4       	brne	.+2      	; 0x13d70 <Read_Config+0x44>
   13d6e:	58 c0       	rjmp	.+176    	; 0x13e20 <Read_Config+0xf4>
   13d70:	21 2c       	mov	r2, r1
   13d72:	31 2c       	mov	r3, r1
   13d74:	c8 5f       	subi	r28, 0xF8	; 248
   13d76:	de 4f       	sbci	r29, 0xFE	; 254
   13d78:	18 82       	st	Y, r1
   13d7a:	c8 50       	subi	r28, 0x08	; 8
   13d7c:	d1 40       	sbci	r29, 0x01	; 1
   13d7e:	41 2c       	mov	r4, r1
   13d80:	51 2c       	mov	r5, r1
   13d82:	e1 2c       	mov	r14, r1
   13d84:	f1 2c       	mov	r15, r1
   13d86:	c7 5f       	subi	r28, 0xF7	; 247
   13d88:	de 4f       	sbci	r29, 0xFE	; 254
   13d8a:	19 82       	std	Y+1, r1	; 0x01
   13d8c:	18 82       	st	Y, r1
   13d8e:	c9 50       	subi	r28, 0x09	; 9
   13d90:	d1 40       	sbci	r29, 0x01	; 1
   13d92:	c1 2c       	mov	r12, r1
   13d94:	d1 2c       	mov	r13, r1
   13d96:	61 2c       	mov	r6, r1
   13d98:	71 2c       	mov	r7, r1
                        break;
                }
                break;
#endif                                // #ifdef AMIGO
            default:
                printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   13d9a:	80 e7       	ldi	r24, 0x70	; 112
   13d9c:	9e e1       	ldi	r25, 0x1E	; 30
   13d9e:	9c 01       	movw	r18, r24
   13da0:	40 e0       	ldi	r20, 0x00	; 0
   13da2:	c3 5f       	subi	r28, 0xF3	; 243
   13da4:	de 4f       	sbci	r29, 0xFE	; 254
   13da6:	28 83       	st	Y, r18
   13da8:	39 83       	std	Y+1, r19	; 0x01
   13daa:	4a 83       	std	Y+2, r20	; 0x02
   13dac:	cd 50       	subi	r28, 0x0D	; 13
   13dae:	d1 40       	sbci	r29, 0x01	; 1
                        break;
                    case TOK_CYLINDERS:
                        AMIGOp->GEOMETRY.CYLINDERS = val.w;
                        break;
                    default:
                        printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   13db0:	82 e9       	ldi	r24, 0x92	; 146
   13db2:	9e e1       	ldi	r25, 0x1E	; 30
   13db4:	9c 01       	movw	r18, r24
   13db6:	40 e0       	ldi	r20, 0x00	; 0
   13db8:	c0 5f       	subi	r28, 0xF0	; 240
   13dba:	de 4f       	sbci	r29, 0xFE	; 254
   13dbc:	28 83       	st	Y, r18
   13dbe:	39 83       	std	Y+1, r19	; 0x01
   13dc0:	4a 83       	std	Y+2, r20	; 0x02
   13dc2:	c0 51       	subi	r28, 0x10	; 16
   13dc4:	d1 40       	sbci	r29, 0x01	; 1
                {
                    AMIGOp->CONFIG.ID = val.w;
                }
                else
                {
                    printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   13dc6:	82 ec       	ldi	r24, 0xC2	; 194
   13dc8:	9e e1       	ldi	r25, 0x1E	; 30
   13dca:	9c 01       	movw	r18, r24
   13dcc:	40 e0       	ldi	r20, 0x00	; 0
   13dce:	cd 5e       	subi	r28, 0xED	; 237
   13dd0:	de 4f       	sbci	r29, 0xFE	; 254
   13dd2:	28 83       	st	Y, r18
   13dd4:	39 83       	std	Y+1, r19	; 0x01
   13dd6:	4a 83       	std	Y+2, r20	; 0x02
   13dd8:	c3 51       	subi	r28, 0x13	; 19
   13dda:	d1 40       	sbci	r29, 0x01	; 1
                        break;
                    case TOK_FILE:
                        AMIGOp->HEADER.NAME = stralloc(token);
                        break;
                    default:
                        printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   13ddc:	81 ef       	ldi	r24, 0xF1	; 241
   13dde:	9e e1       	ldi	r25, 0x1E	; 30
   13de0:	9c 01       	movw	r18, r24
   13de2:	40 e0       	ldi	r20, 0x00	; 0
   13de4:	ca 5e       	subi	r28, 0xEA	; 234
   13de6:	de 4f       	sbci	r29, 0xFE	; 254
   13de8:	28 83       	st	Y, r18
   13dea:	39 83       	std	Y+1, r19	; 0x01
   13dec:	4a 83       	std	Y+2, r20	; 0x02
   13dee:	c6 51       	subi	r28, 0x16	; 22
   13df0:	d1 40       	sbci	r29, 0x01	; 1
                    case TOK_GEOMETRY:
                        push_state(state);
                        state = AMIGO_GEOMETRY;
                        break;
                    default:
                        printf("Unexpected AMIGO START token: %s, at line:%d\n", ptr,lines);
   13df2:	81 e2       	ldi	r24, 0x21	; 33
   13df4:	9f e1       	ldi	r25, 0x1F	; 31
   13df6:	9c 01       	movw	r18, r24
   13df8:	40 e0       	ldi	r20, 0x00	; 0
   13dfa:	c7 5e       	subi	r28, 0xE7	; 231
   13dfc:	de 4f       	sbci	r29, 0xFE	; 254
   13dfe:	28 83       	st	Y, r18
   13e00:	39 83       	std	Y+1, r19	; 0x01
   13e02:	4a 83       	std	Y+2, r20	; 0x02
   13e04:	c9 51       	subi	r28, 0x19	; 25
   13e06:	d1 40       	sbci	r29, 0x01	; 1
                        break;
                    case TOK_INTERLEAVE:
                        SS80p->VOLUME.INTERLEAVE = val.b;
                        break;
                    default:
                        printf("Unexpected SS80 VOLUME token: %s, at line:%d\n", ptr,lines);
   13e08:	8f e4       	ldi	r24, 0x4F	; 79
   13e0a:	9f e1       	ldi	r25, 0x1F	; 31
   13e0c:	9c 01       	movw	r18, r24
   13e0e:	40 e0       	ldi	r20, 0x00	; 0
   13e10:	c4 5e       	subi	r28, 0xE4	; 228
   13e12:	de 4f       	sbci	r29, 0xFE	; 254
   13e14:	28 83       	st	Y, r18
   13e16:	39 83       	std	Y+1, r19	; 0x01
   13e18:	4a 83       	std	Y+2, r20	; 0x02
   13e1a:	cc 51       	subi	r28, 0x1C	; 28
   13e1c:	d1 40       	sbci	r29, 0x01	; 1
   13e1e:	26 c0       	rjmp	.+76     	; 0x13e6c <Read_Config+0x140>
    cfg = fopen(name, "rb");
    if(cfg == NULL)
    {
        ++errors;
//FIXME
        perror("Read_Config - open");
   13e20:	81 e5       	ldi	r24, 0x51	; 81
   13e22:	9e e0       	ldi	r25, 0x0E	; 14
   13e24:	0e 94 9c 78 	call	0xf138	; 0xf138 <perror>
        printf("Read_Config: open(%s) failed\n", name);
   13e28:	ed b7       	in	r30, 0x3d	; 61
   13e2a:	fe b7       	in	r31, 0x3e	; 62
   13e2c:	15 83       	std	Z+5, r17	; 0x05
   13e2e:	04 83       	std	Z+4, r16	; 0x04
   13e30:	83 e0       	ldi	r24, 0x03	; 3
   13e32:	91 e2       	ldi	r25, 0x21	; 33
   13e34:	a0 e0       	ldi	r26, 0x00	; 0
   13e36:	81 83       	std	Z+1, r24	; 0x01
   13e38:	92 83       	std	Z+2, r25	; 0x02
   13e3a:	a3 83       	std	Z+3, r26	; 0x03
   13e3c:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
        set_Config_Defaults();
        return(errors);
   13e40:	81 e0       	ldi	r24, 0x01	; 1
   13e42:	90 e0       	ldi	r25, 0x00	; 0
   13e44:	70 c3       	rjmp	.+1760   	; 0x14526 <Read_Config+0x7fa>
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
        ++lines;
   13e46:	ff ef       	ldi	r31, 0xFF	; 255
   13e48:	2f 1a       	sub	r2, r31
   13e4a:	3f 0a       	sbc	r3, r31

        ptr = get_token(str, token, sizeof(token)-2);
   13e4c:	4e e7       	ldi	r20, 0x7E	; 126
   13e4e:	50 e0       	ldi	r21, 0x00	; 0
   13e50:	9e 01       	movw	r18, r28
   13e52:	28 5f       	subi	r18, 0xF8	; 248
   13e54:	3f 4f       	sbci	r19, 0xFF	; 255
   13e56:	49 01       	movw	r8, r18
   13e58:	b9 01       	movw	r22, r18
   13e5a:	ce 01       	movw	r24, r28
   13e5c:	88 57       	subi	r24, 0x78	; 120
   13e5e:	9f 4f       	sbci	r25, 0xFF	; 255
   13e60:	0e 94 2d 33 	call	0x665a	; 0x665a <get_token>
   13e64:	5c 01       	movw	r10, r24

// Skip comments
        if(token[0] == 0 || token[0]  == '#')
   13e66:	88 85       	ldd	r24, Y+8	; 0x08
   13e68:	81 11       	cpse	r24, r1
   13e6a:	10 c0       	rjmp	.+32     	; 0x13e8c <Read_Config+0x160>
        printf("Read_Config: open(%s) failed\n", name);
        set_Config_Defaults();
        return(errors);
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   13e6c:	c5 5f       	subi	r28, 0xF5	; 245
   13e6e:	de 4f       	sbci	r29, 0xFE	; 254
   13e70:	48 81       	ld	r20, Y
   13e72:	59 81       	ldd	r21, Y+1	; 0x01
   13e74:	cb 50       	subi	r28, 0x0B	; 11
   13e76:	d1 40       	sbci	r29, 0x01	; 1
   13e78:	6e e7       	ldi	r22, 0x7E	; 126
   13e7a:	70 e0       	ldi	r23, 0x00	; 0
   13e7c:	ce 01       	movw	r24, r28
   13e7e:	88 57       	subi	r24, 0x78	; 120
   13e80:	9f 4f       	sbci	r25, 0xFF	; 255
   13e82:	0e 94 83 76 	call	0xed06	; 0xed06 <fgets>
   13e86:	89 2b       	or	r24, r25
   13e88:	f1 f6       	brne	.-68     	; 0x13e46 <Read_Config+0x11a>
   13e8a:	0d c3       	rjmp	.+1562   	; 0x144a6 <Read_Config+0x77a>
        ++lines;

        ptr = get_token(str, token, sizeof(token)-2);

// Skip comments
        if(token[0] == 0 || token[0]  == '#')
   13e8c:	83 32       	cpi	r24, 0x23	; 35
   13e8e:	71 f3       	breq	.-36     	; 0x13e6c <Read_Config+0x140>
            continue;

        val.l = 0;
        tok = TOK_INVALID;

        if( ( ind = tok_index(token) )  == -1)
   13e90:	c4 01       	movw	r24, r8
   13e92:	0e 94 1f 93 	call	0x1263e	; 0x1263e <tok_index>
   13e96:	8f 3f       	cpi	r24, 0xFF	; 255
   13e98:	49 f4       	brne	.+18     	; 0x13eac <Read_Config+0x180>
        {
            printf("Unexpected token: %s, at line:%d\n", token,lines);
   13e9a:	ed b7       	in	r30, 0x3d	; 61
   13e9c:	fe b7       	in	r31, 0x3e	; 62
   13e9e:	37 82       	std	Z+7, r3	; 0x07
   13ea0:	26 82       	std	Z+6, r2	; 0x06
   13ea2:	95 82       	std	Z+5, r9	; 0x05
   13ea4:	84 82       	std	Z+4, r8	; 0x04
   13ea6:	81 ee       	ldi	r24, 0xE1	; 225
   13ea8:	90 e2       	ldi	r25, 0x20	; 32
   13eaa:	c4 c0       	rjmp	.+392    	; 0x14034 <Read_Config+0x308>
            ++errors;
            continue;
        }
        tok = tokens[ind].tok;
   13eac:	24 e0       	ldi	r18, 0x04	; 4
   13eae:	82 02       	muls	r24, r18
   13eb0:	f0 01       	movw	r30, r0
   13eb2:	11 24       	eor	r1, r1
   13eb4:	ec 53       	subi	r30, 0x3C	; 60
   13eb6:	fe 4f       	sbci	r31, 0xFE	; 254
   13eb8:	02 81       	ldd	r16, Z+2	; 0x02
   13eba:	13 81       	ldd	r17, Z+3	; 0x03

// get optional argument
        ptr = get_token(ptr, token, sizeof(token)-2);
   13ebc:	4e e7       	ldi	r20, 0x7E	; 126
   13ebe:	50 e0       	ldi	r21, 0x00	; 0
   13ec0:	b4 01       	movw	r22, r8
   13ec2:	c5 01       	movw	r24, r10
   13ec4:	0e 94 2d 33 	call	0x665a	; 0x665a <get_token>
   13ec8:	5c 01       	movw	r10, r24
        if(MATCH(token,"="))
   13eca:	64 e6       	ldi	r22, 0x64	; 100
   13ecc:	7e e0       	ldi	r23, 0x0E	; 14
   13ece:	c4 01       	movw	r24, r8
   13ed0:	0e 94 65 32 	call	0x64ca	; 0x64ca <MATCH>
   13ed4:	89 2b       	or	r24, r25
   13ed6:	39 f0       	breq	.+14     	; 0x13ee6 <Read_Config+0x1ba>
            ptr = get_token(ptr, token, sizeof(token)-2);
   13ed8:	4e e7       	ldi	r20, 0x7E	; 126
   13eda:	50 e0       	ldi	r21, 0x00	; 0
   13edc:	b4 01       	movw	r22, r8
   13ede:	c5 01       	movw	r24, r10
   13ee0:	0e 94 2d 33 	call	0x665a	; 0x665a <get_token>
   13ee4:	5c 01       	movw	r10, r24
        val.l = get_value(token);
   13ee6:	c4 01       	movw	r24, r8
   13ee8:	0e 94 70 33 	call	0x66e0	; 0x66e0 <get_value>
        val.w = (uint16_t) 0xFFFF & val.l;
        val.b = (uint8_t) 0xFF & val.l;

//FIXME check for state and last state
        if(tok == TOK_END )
   13eec:	01 31       	cpi	r16, 0x11	; 17
   13eee:	11 05       	cpc	r17, r1
        {
            state = pop_state();
   13ef0:	19 f4       	brne	.+6      	; 0x13ef8 <Read_Config+0x1cc>
   13ef2:	cb da       	rcall	.-2666   	; 0x1348a <pop_state>
   13ef4:	3c 01       	movw	r6, r24
            continue;
   13ef6:	ba cf       	rjmp	.-140    	; 0x13e6c <Read_Config+0x140>
        }

        switch(state)
   13ef8:	30 e1       	ldi	r19, 0x10	; 16
   13efa:	63 16       	cp	r6, r19
   13efc:	71 04       	cpc	r7, r1
   13efe:	08 f0       	brcs	.+2      	; 0x13f02 <Read_Config+0x1d6>
   13f00:	bc c2       	rjmp	.+1400   	; 0x1447a <Read_Config+0x74e>
   13f02:	f3 01       	movw	r30, r6
   13f04:	ea 53       	subi	r30, 0x3A	; 58
   13f06:	ff 4f       	sbci	r31, 0xFF	; 255
   13f08:	0c 94 de e6 	jmp	0x1cdbc	; 0x1cdbc <__tablejump2__>
        {
            case START_STATE:
                switch(tok)
   13f0c:	0e 30       	cpi	r16, 0x0E	; 14
   13f0e:	11 05       	cpc	r17, r1
   13f10:	09 f4       	brne	.+2      	; 0x13f14 <Read_Config+0x1e8>
   13f12:	83 c0       	rjmp	.+262    	; 0x1401a <Read_Config+0x2ee>
   13f14:	44 f4       	brge	.+16     	; 0x13f26 <Read_Config+0x1fa>
   13f16:	02 30       	cpi	r16, 0x02	; 2
   13f18:	11 05       	cpc	r17, r1
   13f1a:	09 f4       	brne	.+2      	; 0x13f1e <Read_Config+0x1f2>
   13f1c:	42 c0       	rjmp	.+132    	; 0x13fa2 <Read_Config+0x276>
   13f1e:	0c 30       	cpi	r16, 0x0C	; 12
   13f20:	11 05       	cpc	r17, r1
   13f22:	19 f1       	breq	.+70     	; 0x13f6a <Read_Config+0x23e>
   13f24:	7f c0       	rjmp	.+254    	; 0x14024 <Read_Config+0x2f8>
   13f26:	03 32       	cpi	r16, 0x23	; 35
   13f28:	11 05       	cpc	r17, r1
   13f2a:	f9 f0       	breq	.+62     	; 0x13f6a <Read_Config+0x23e>
   13f2c:	04 32       	cpi	r16, 0x24	; 36
   13f2e:	11 05       	cpc	r17, r1
   13f30:	29 f0       	breq	.+10     	; 0x13f3c <Read_Config+0x210>
   13f32:	00 32       	cpi	r16, 0x20	; 32
   13f34:	11 05       	cpc	r17, r1
   13f36:	09 f0       	breq	.+2      	; 0x13f3a <Read_Config+0x20e>
   13f38:	75 c0       	rjmp	.+234    	; 0x14024 <Read_Config+0x2f8>
   13f3a:	4f c0       	rjmp	.+158    	; 0x13fda <Read_Config+0x2ae>
                {
                    case TOK_SS80_DEFAULT:
                        push_state(state);
   13f3c:	80 e0       	ldi	r24, 0x00	; 0
   13f3e:	90 e0       	ldi	r25, 0x00	; 0
   13f40:	8b da       	rcall	.-2794   	; 0x13458 <push_state>
                        state = SS80_STATE;
                        index = alloc_device(SS80_DEFAULT_TYPE);
   13f42:	82 e0       	ldi	r24, 0x02	; 2
   13f44:	90 e0       	ldi	r25, 0x00	; 0
   13f46:	b7 d9       	rcall	.-3218   	; 0x132b6 <alloc_device>
   13f48:	c8 5f       	subi	r28, 0xF8	; 248
   13f4a:	de 4f       	sbci	r29, 0xFE	; 254
   13f4c:	88 83       	st	Y, r24
   13f4e:	c8 50       	subi	r28, 0x08	; 8
   13f50:	d1 40       	sbci	r29, 0x01	; 1
   13f52:	8f 3f       	cpi	r24, 0xFF	; 255
                        if(index == -1)
   13f54:	09 f4       	brne	.+2      	; 0x13f58 <Read_Config+0x22c>
   13f56:	8a cf       	rjmp	.-236    	; 0x13e6c <Read_Config+0x140>
   13f58:	4b e0       	ldi	r20, 0x0B	; 11
                            state = START_STATE;
                        else
                            SS80p = (SS80DiskType *) Devices[index].dev;
   13f5a:	84 02       	muls	r24, r20
   13f5c:	f0 01       	movw	r30, r0
   13f5e:	11 24       	eor	r1, r1
   13f60:	ec 50       	subi	r30, 0x0C	; 12
   13f62:	f1 4e       	sbci	r31, 0xE1	; 225
   13f64:	e7 80       	ldd	r14, Z+7	; 0x07
   13f66:	f0 84       	ldd	r15, Z+8	; 0x08
   13f68:	18 c0       	rjmp	.+48     	; 0x13f9a <Read_Config+0x26e>
                        break;
                    case TOK_SS80:
                    case TOK_CS80:
                        push_state(state);
   13f6a:	80 e0       	ldi	r24, 0x00	; 0
   13f6c:	90 e0       	ldi	r25, 0x00	; 0
   13f6e:	74 da       	rcall	.-2840   	; 0x13458 <push_state>
                        state = SS80_STATE;
                        index = alloc_device(SS80_TYPE);
   13f70:	83 e0       	ldi	r24, 0x03	; 3
   13f72:	90 e0       	ldi	r25, 0x00	; 0
   13f74:	a0 d9       	rcall	.-3264   	; 0x132b6 <alloc_device>
   13f76:	c8 5f       	subi	r28, 0xF8	; 248
   13f78:	de 4f       	sbci	r29, 0xFE	; 254
   13f7a:	88 83       	st	Y, r24
   13f7c:	c8 50       	subi	r28, 0x08	; 8
   13f7e:	d1 40       	sbci	r29, 0x01	; 1
   13f80:	8f 3f       	cpi	r24, 0xFF	; 255
                        if(index == -1)
   13f82:	09 f4       	brne	.+2      	; 0x13f86 <Read_Config+0x25a>
   13f84:	73 cf       	rjmp	.-282    	; 0x13e6c <Read_Config+0x140>
   13f86:	9b e0       	ldi	r25, 0x0B	; 11
                        {
                            state = START_STATE;
                        }
                        else
                        {
                            SS80p = (SS80DiskType *) Devices[index].dev;
   13f88:	89 02       	muls	r24, r25
   13f8a:	f0 01       	movw	r30, r0
   13f8c:	11 24       	eor	r1, r1
   13f8e:	ec 50       	subi	r30, 0x0C	; 12
   13f90:	f1 4e       	sbci	r31, 0xE1	; 225
   13f92:	e7 80       	ldd	r14, Z+7	; 0x07
   13f94:	f0 84       	ldd	r15, Z+8	; 0x08
                            hpdir_set_parameters(index,token); // also SS80p->HEADER.model
   13f96:	b4 01       	movw	r22, r8
   13f98:	19 db       	rcall	.-2510   	; 0x135cc <hpdir_set_parameters>
                            SS80p = (SS80DiskType *) Devices[index].dev;
                        break;
                    case TOK_SS80:
                    case TOK_CS80:
                        push_state(state);
                        state = SS80_STATE;
   13f9a:	66 24       	eor	r6, r6
   13f9c:	63 94       	inc	r6
   13f9e:	71 2c       	mov	r7, r1
                            hpdir_set_parameters(index,token); // also SS80p->HEADER.model
                        }
                        break;
#ifdef AMIGO
                    case TOK_AMIGO:
                        push_state(state);
   13fa0:	65 cf       	rjmp	.-310    	; 0x13e6c <Read_Config+0x140>
   13fa2:	80 e0       	ldi	r24, 0x00	; 0
   13fa4:	90 e0       	ldi	r25, 0x00	; 0
   13fa6:	58 da       	rcall	.-2896   	; 0x13458 <push_state>
                        state = AMIGO_STATE;
                        index = alloc_device(AMIGO_TYPE);
   13fa8:	81 e0       	ldi	r24, 0x01	; 1
   13faa:	90 e0       	ldi	r25, 0x00	; 0
   13fac:	84 d9       	rcall	.-3320   	; 0x132b6 <alloc_device>
   13fae:	c8 5f       	subi	r28, 0xF8	; 248
   13fb0:	de 4f       	sbci	r29, 0xFE	; 254
   13fb2:	88 83       	st	Y, r24
   13fb4:	c8 50       	subi	r28, 0x08	; 8
   13fb6:	d1 40       	sbci	r29, 0x01	; 1
   13fb8:	8f 3f       	cpi	r24, 0xFF	; 255
                        if(index == -1)
   13fba:	09 f4       	brne	.+2      	; 0x13fbe <Read_Config+0x292>
   13fbc:	57 cf       	rjmp	.-338    	; 0x13e6c <Read_Config+0x140>
   13fbe:	ab e0       	ldi	r26, 0x0B	; 11
                        {
                            state = START_STATE;
                        }
                        else
                        {
                            AMIGOp = (AMIGODiskType *) Devices[index].dev;
   13fc0:	8a 02       	muls	r24, r26
   13fc2:	f0 01       	movw	r30, r0
   13fc4:	11 24       	eor	r1, r1
   13fc6:	ec 50       	subi	r30, 0x0C	; 12
   13fc8:	f1 4e       	sbci	r31, 0xE1	; 225
   13fca:	47 80       	ldd	r4, Z+7	; 0x07
   13fcc:	50 84       	ldd	r5, Z+8	; 0x08
                            hpdir_set_parameters(index,token); // also sets AMIGOp->HEADER.model
   13fce:	b4 01       	movw	r22, r8
   13fd0:	fd da       	rcall	.-2566   	; 0x135cc <hpdir_set_parameters>
                        }
                        break;
#ifdef AMIGO
                    case TOK_AMIGO:
                        push_state(state);
                        state = AMIGO_STATE;
   13fd2:	aa e0       	ldi	r26, 0x0A	; 10
   13fd4:	6a 2e       	mov	r6, r26
   13fd6:	71 2c       	mov	r7, r1
   13fd8:	49 cf       	rjmp	.-366    	; 0x13e6c <Read_Config+0x140>
                            hpdir_set_parameters(index,token); // also sets AMIGOp->HEADER.model
                        }
                        break;
#endif
                    case TOK_PRINTER:
                        push_state(state);
   13fda:	80 e0       	ldi	r24, 0x00	; 0
   13fdc:	90 e0       	ldi	r25, 0x00	; 0
   13fde:	3c da       	rcall	.-2952   	; 0x13458 <push_state>
   13fe0:	84 e0       	ldi	r24, 0x04	; 4
                        state = PRINTER_STATE;
                        index = alloc_device(PRINTER_TYPE);
   13fe2:	90 e0       	ldi	r25, 0x00	; 0
   13fe4:	68 d9       	rcall	.-3376   	; 0x132b6 <alloc_device>
   13fe6:	c8 5f       	subi	r28, 0xF8	; 248
   13fe8:	de 4f       	sbci	r29, 0xFE	; 254
   13fea:	88 83       	st	Y, r24
   13fec:	c8 50       	subi	r28, 0x08	; 8
   13fee:	d1 40       	sbci	r29, 0x01	; 1
   13ff0:	8f 3f       	cpi	r24, 0xFF	; 255
   13ff2:	09 f4       	brne	.+2      	; 0x13ff6 <Read_Config+0x2ca>
                        if(index == -1)
   13ff4:	3b cf       	rjmp	.-394    	; 0x13e6c <Read_Config+0x140>
   13ff6:	bb e0       	ldi	r27, 0x0B	; 11
   13ff8:	8b 02       	muls	r24, r27
                            state = START_STATE;
                        else
                            PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
   13ffa:	f0 01       	movw	r30, r0
   13ffc:	11 24       	eor	r1, r1
   13ffe:	ec 50       	subi	r30, 0x0C	; 12
   14000:	f1 4e       	sbci	r31, 0xE1	; 225
   14002:	27 81       	ldd	r18, Z+7	; 0x07
   14004:	30 85       	ldd	r19, Z+8	; 0x08
   14006:	c7 5f       	subi	r28, 0xF7	; 247
   14008:	de 4f       	sbci	r29, 0xFE	; 254
   1400a:	39 83       	std	Y+1, r19	; 0x01
   1400c:	28 83       	st	Y, r18
   1400e:	c9 50       	subi	r28, 0x09	; 9
   14010:	d1 40       	sbci	r29, 0x01	; 1
   14012:	fe e0       	ldi	r31, 0x0E	; 14
   14014:	6f 2e       	mov	r6, r31
                        }
                        break;
#endif
                    case TOK_PRINTER:
                        push_state(state);
                        state = PRINTER_STATE;
   14016:	71 2c       	mov	r7, r1
   14018:	29 cf       	rjmp	.-430    	; 0x13e6c <Read_Config+0x140>
   1401a:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <debuglevel>
                            state = START_STATE;
                        else
                            PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
                        break;
                    case TOK_DEBUG:
                        debuglevel = val.w;
   1401e:	70 93 b7 01 	sts	0x01B7, r23	; 0x8001b7 <debuglevel+0x1>
   14022:	24 cf       	rjmp	.-440    	; 0x13e6c <Read_Config+0x140>
   14024:	ed b7       	in	r30, 0x3d	; 61
                        break;
   14026:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected token: %s, at line:%d\n", ptr,lines);
   14028:	37 82       	std	Z+7, r3	; 0x07
   1402a:	26 82       	std	Z+6, r2	; 0x06
   1402c:	b5 82       	std	Z+5, r11	; 0x05
   1402e:	a4 82       	std	Z+4, r10	; 0x04
   14030:	8f eb       	ldi	r24, 0xBF	; 191
   14032:	90 e2       	ldi	r25, 0x20	; 32
   14034:	a0 e0       	ldi	r26, 0x00	; 0
   14036:	81 83       	std	Z+1, r24	; 0x01
   14038:	92 83       	std	Z+2, r25	; 0x02
   1403a:	a3 83       	std	Z+3, r26	; 0x03
   1403c:	2e c2       	rjmp	.+1116   	; 0x1449a <Read_Config+0x76e>
   1403e:	09 30       	cpi	r16, 0x09	; 9
                        break;
                }
                break;

            case PRINTER_STATE:
                if(tok == TOK_CONFIG)
   14040:	11 05       	cpc	r17, r1
   14042:	39 f4       	brne	.+14     	; 0x14052 <Read_Config+0x326>
   14044:	8e e0       	ldi	r24, 0x0E	; 14
                {
                    push_state(state);
   14046:	90 e0       	ldi	r25, 0x00	; 0
   14048:	07 da       	rcall	.-3058   	; 0x13458 <push_state>
   1404a:	ef e0       	ldi	r30, 0x0F	; 15
   1404c:	6e 2e       	mov	r6, r30
                    state = PRINTER_CONFIG;
   1404e:	71 2c       	mov	r7, r1
   14050:	0d cf       	rjmp	.-486    	; 0x13e6c <Read_Config+0x140>
   14052:	ed b7       	in	r30, 0x3d	; 61
                {
                    printf("Unexpected PRINTER token: %s, at line:%d\n", ptr,lines);
                    ++errors;
                    break;
                }
                break;
   14054:	fe b7       	in	r31, 0x3e	; 62
                    push_state(state);
                    state = PRINTER_CONFIG;
                }
                else
                {
                    printf("Unexpected PRINTER token: %s, at line:%d\n", ptr,lines);
   14056:	37 82       	std	Z+7, r3	; 0x07
   14058:	26 82       	std	Z+6, r2	; 0x06
   1405a:	b5 82       	std	Z+5, r11	; 0x05
   1405c:	a4 82       	std	Z+4, r10	; 0x04
   1405e:	85 e9       	ldi	r24, 0x95	; 149
   14060:	90 e2       	ldi	r25, 0x20	; 32
   14062:	e8 cf       	rjmp	.-48     	; 0x14034 <Read_Config+0x308>
   14064:	01 30       	cpi	r16, 0x01	; 1
   14066:	11 05       	cpc	r17, r1
                    break;
                }
                break;

            case PRINTER_CONFIG:
                if(tok == TOK_ADDRESS)
   14068:	c1 f4       	brne	.+48     	; 0x1409a <Read_Config+0x36e>
   1406a:	c8 5f       	subi	r28, 0xF8	; 248
   1406c:	de 4f       	sbci	r29, 0xFE	; 254
                {
					address = val.b;
                    Devices[index].ADDRESS = address;
   1406e:	28 81       	ld	r18, Y
   14070:	c8 50       	subi	r28, 0x08	; 8
   14072:	d1 40       	sbci	r29, 0x01	; 1
   14074:	3b e0       	ldi	r19, 0x0B	; 11
   14076:	23 02       	muls	r18, r19
   14078:	f0 01       	movw	r30, r0
   1407a:	11 24       	eor	r1, r1
   1407c:	ec 50       	subi	r30, 0x0C	; 12
   1407e:	f1 4e       	sbci	r31, 0xE1	; 225
   14080:	61 83       	std	Z+1, r22	; 0x01
   14082:	c7 5f       	subi	r28, 0xF7	; 247
   14084:	de 4f       	sbci	r29, 0xFE	; 254
                    PRINTERp->HEADER.ADDRESS  = address;
   14086:	a8 81       	ld	r26, Y
   14088:	b9 81       	ldd	r27, Y+1	; 0x01
   1408a:	c9 50       	subi	r28, 0x09	; 9
   1408c:	d1 40       	sbci	r29, 0x01	; 1
   1408e:	6c 93       	st	X, r22
   14090:	8f ef       	ldi	r24, 0xFF	; 255
   14092:	82 83       	std	Z+2, r24	; 0x02
// NO PPR
                    Devices[index].PPR = 0xff;
   14094:	fd 01       	movw	r30, r26
   14096:	81 83       	std	Z+1, r24	; 0x01
                    PRINTERp->HEADER.PPR = 0xff;
   14098:	e9 ce       	rjmp	.-558    	; 0x13e6c <Read_Config+0x140>
   1409a:	ed b7       	in	r30, 0x3d	; 61
   1409c:	fe b7       	in	r31, 0x3e	; 62
                }
                else
                {
                    printf("Unexpected PRINTER CONFIG token: %s, at line:%d\n", ptr,lines);
   1409e:	37 82       	std	Z+7, r3	; 0x07
   140a0:	26 82       	std	Z+6, r2	; 0x06
   140a2:	b5 82       	std	Z+5, r11	; 0x05
   140a4:	a4 82       	std	Z+4, r10	; 0x04
   140a6:	84 e6       	ldi	r24, 0x64	; 100
   140a8:	90 e2       	ldi	r25, 0x20	; 32
   140aa:	c4 cf       	rjmp	.-120    	; 0x14034 <Read_Config+0x308>
   140ac:	05 31       	cpi	r16, 0x15	; 21
                    ++errors;
                }
                break;

            case SS80_STATE:
                switch(tok)
   140ae:	11 05       	cpc	r17, r1
   140b0:	d9 f0       	breq	.+54     	; 0x140e8 <Read_Config+0x3bc>
   140b2:	6c f4       	brge	.+26     	; 0x140ce <Read_Config+0x3a2>
   140b4:	09 30       	cpi	r16, 0x09	; 9
   140b6:	11 05       	cpc	r17, r1
   140b8:	f1 f0       	breq	.+60     	; 0x140f6 <Read_Config+0x3ca>
   140ba:	0b 30       	cpi	r16, 0x0B	; 11
   140bc:	11 05       	cpc	r17, r1
   140be:	49 f5       	brne	.+82     	; 0x14112 <Read_Config+0x3e6>
   140c0:	81 e0       	ldi	r24, 0x01	; 1
                    case TOK_CONFIG:
                        push_state(state);
                        state = SS80_CONFIG;
                        break;
                    case TOK_CONTROLLER:
                        push_state(state);
   140c2:	90 e0       	ldi	r25, 0x00	; 0
   140c4:	c9 d9       	rcall	.-3182   	; 0x13458 <push_state>
   140c6:	54 e0       	ldi	r21, 0x04	; 4
                        state = SS80_CONTROLLER;
   140c8:	65 2e       	mov	r6, r21
   140ca:	71 2c       	mov	r7, r1
   140cc:	cf ce       	rjmp	.-610    	; 0x13e6c <Read_Config+0x140>
                        break;
   140ce:	07 32       	cpi	r16, 0x27	; 39
                    ++errors;
                }
                break;

            case SS80_STATE:
                switch(tok)
   140d0:	11 05       	cpc	r17, r1
   140d2:	c1 f0       	breq	.+48     	; 0x14104 <Read_Config+0x3d8>
   140d4:	0a 32       	cpi	r16, 0x2A	; 42
   140d6:	11 05       	cpc	r17, r1
   140d8:	e1 f4       	brne	.+56     	; 0x14112 <Read_Config+0x3e6>
                    case TOK_UNIT:
                        push_state(state);
                        state = SS80_UNIT;
                        break;
                    case TOK_VOLUME:
                        push_state(state);
   140da:	81 e0       	ldi	r24, 0x01	; 1
   140dc:	90 e0       	ldi	r25, 0x00	; 0
   140de:	bc d9       	rcall	.-3208   	; 0x13458 <push_state>
                        state = SS80_VOLUME;
   140e0:	36 e0       	ldi	r19, 0x06	; 6
   140e2:	63 2e       	mov	r6, r19
   140e4:	71 2c       	mov	r7, r1
                        break;
   140e6:	c2 ce       	rjmp	.-636    	; 0x13e6c <Read_Config+0x140>

            case SS80_STATE:
                switch(tok)
                {
                    case TOK_HEADER:
                        push_state(state);
   140e8:	81 e0       	ldi	r24, 0x01	; 1
   140ea:	90 e0       	ldi	r25, 0x00	; 0
   140ec:	b5 d9       	rcall	.-3222   	; 0x13458 <push_state>
                        state = SS80_HEADER;
   140ee:	72 e0       	ldi	r23, 0x02	; 2
   140f0:	67 2e       	mov	r6, r23
   140f2:	71 2c       	mov	r7, r1
                        break;
   140f4:	bb ce       	rjmp	.-650    	; 0x13e6c <Read_Config+0x140>
                    case TOK_CONFIG:
                        push_state(state);
   140f6:	81 e0       	ldi	r24, 0x01	; 1
   140f8:	90 e0       	ldi	r25, 0x00	; 0
   140fa:	ae d9       	rcall	.-3236   	; 0x13458 <push_state>
   140fc:	63 e0       	ldi	r22, 0x03	; 3
                        state = SS80_CONFIG;
   140fe:	66 2e       	mov	r6, r22
   14100:	71 2c       	mov	r7, r1
   14102:	b4 ce       	rjmp	.-664    	; 0x13e6c <Read_Config+0x140>
                        break;
   14104:	81 e0       	ldi	r24, 0x01	; 1
                    case TOK_CONTROLLER:
                        push_state(state);
                        state = SS80_CONTROLLER;
                        break;
                    case TOK_UNIT:
                        push_state(state);
   14106:	90 e0       	ldi	r25, 0x00	; 0
   14108:	a7 d9       	rcall	.-3250   	; 0x13458 <push_state>
   1410a:	45 e0       	ldi	r20, 0x05	; 5
   1410c:	64 2e       	mov	r6, r20
                        state = SS80_UNIT;
   1410e:	71 2c       	mov	r7, r1
   14110:	ad ce       	rjmp	.-678    	; 0x13e6c <Read_Config+0x140>
   14112:	ed b7       	in	r30, 0x3d	; 61
                        break;
   14114:	fe b7       	in	r31, 0x3e	; 62
                    case TOK_VOLUME:
                        push_state(state);
                        state = SS80_VOLUME;
                        break;
                    default:
                        printf("Unexpected SS80 START token: %s, at line:%d\n", ptr,lines);
   14116:	37 82       	std	Z+7, r3	; 0x07
   14118:	26 82       	std	Z+6, r2	; 0x06
   1411a:	b5 82       	std	Z+5, r11	; 0x05
   1411c:	a4 82       	std	Z+4, r10	; 0x04
   1411e:	87 e3       	ldi	r24, 0x37	; 55
   14120:	90 e2       	ldi	r25, 0x20	; 32
   14122:	88 cf       	rjmp	.-240    	; 0x14034 <Read_Config+0x308>
   14124:	02 31       	cpi	r16, 0x12	; 18
   14126:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_HEADER:
                switch(tok)
   14128:	11 f1       	breq	.+68     	; 0x1416e <Read_Config+0x442>
   1412a:	0f 31       	cpi	r16, 0x1F	; 31
   1412c:	11 05       	cpc	r17, r1
   1412e:	89 f0       	breq	.+34     	; 0x14152 <Read_Config+0x426>
   14130:	01 30       	cpi	r16, 0x01	; 1
   14132:	11 05       	cpc	r17, r1
   14134:	09 f5       	brne	.+66     	; 0x14178 <Read_Config+0x44c>
   14136:	c8 5f       	subi	r28, 0xF8	; 248
   14138:	de 4f       	sbci	r29, 0xFE	; 254
                {
                    case TOK_ADDRESS:
						address = val.b;
                        Devices[index].ADDRESS = address;
   1413a:	28 81       	ld	r18, Y
   1413c:	c8 50       	subi	r28, 0x08	; 8
   1413e:	d1 40       	sbci	r29, 0x01	; 1
   14140:	3b e0       	ldi	r19, 0x0B	; 11
   14142:	23 02       	muls	r18, r19
   14144:	f0 01       	movw	r30, r0
   14146:	11 24       	eor	r1, r1
   14148:	ec 50       	subi	r30, 0x0C	; 12
   1414a:	f1 4e       	sbci	r31, 0xE1	; 225
   1414c:	61 83       	std	Z+1, r22	; 0x01
   1414e:	d7 01       	movw	r26, r14
   14150:	33 c1       	rjmp	.+614    	; 0x143b8 <Read_Config+0x68c>
                        SS80p->HEADER.ADDRESS  = address;
   14152:	c8 5f       	subi	r28, 0xF8	; 248
   14154:	de 4f       	sbci	r29, 0xFE	; 254
                        break;
                    case TOK_PPR:
						ppr = val.b;
                        Devices[index].PPR = ppr;
   14156:	b8 81       	ld	r27, Y
   14158:	c8 50       	subi	r28, 0x08	; 8
   1415a:	d1 40       	sbci	r29, 0x01	; 1
   1415c:	2b e0       	ldi	r18, 0x0B	; 11
   1415e:	b2 02       	muls	r27, r18
   14160:	f0 01       	movw	r30, r0
   14162:	11 24       	eor	r1, r1
   14164:	ec 50       	subi	r30, 0x0C	; 12
   14166:	f1 4e       	sbci	r31, 0xE1	; 225
   14168:	62 83       	std	Z+2, r22	; 0x02
   1416a:	f7 01       	movw	r30, r14
   1416c:	27 c1       	rjmp	.+590    	; 0x143bc <Read_Config+0x690>
                        SS80p->HEADER.PPR = ppr;
   1416e:	c4 01       	movw	r24, r8
   14170:	0e 94 1b 32 	call	0x6436	; 0x6436 <stralloc>
                        break;
                    case TOK_FILE:
                        SS80p->HEADER.NAME = stralloc(token);
   14174:	f7 01       	movw	r30, r14
   14176:	28 c1       	rjmp	.+592    	; 0x143c8 <Read_Config+0x69c>
   14178:	ed b7       	in	r30, 0x3d	; 61
   1417a:	fe b7       	in	r31, 0x3e	; 62
                        break;
                    default:
                        printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   1417c:	37 82       	std	Z+7, r3	; 0x07
   1417e:	26 82       	std	Z+6, r2	; 0x06
   14180:	b5 82       	std	Z+5, r11	; 0x05
   14182:	a4 82       	std	Z+4, r10	; 0x04
   14184:	89 e0       	ldi	r24, 0x09	; 9
   14186:	90 e2       	ldi	r25, 0x20	; 32
   14188:	55 cf       	rjmp	.-342    	; 0x14034 <Read_Config+0x308>
   1418a:	07 31       	cpi	r16, 0x17	; 23
   1418c:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_CONFIG:
                if(tok == TOK_ID )
   1418e:	21 f4       	brne	.+8      	; 0x14198 <Read_Config+0x46c>
   14190:	96 2f       	mov	r25, r22
   14192:	87 2f       	mov	r24, r23
                {
                    SS80p->CONFIG.ID = val.w;
   14194:	f7 01       	movw	r30, r14
   14196:	2f c1       	rjmp	.+606    	; 0x143f6 <Read_Config+0x6ca>
   14198:	ed b7       	in	r30, 0x3d	; 61
   1419a:	fe b7       	in	r31, 0x3e	; 62
                }
                else
                {
                    printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   1419c:	37 82       	std	Z+7, r3	; 0x07
   1419e:	26 82       	std	Z+6, r2	; 0x06
   141a0:	b5 82       	std	Z+5, r11	; 0x05
   141a2:	a4 82       	std	Z+4, r10	; 0x04
   141a4:	8b ed       	ldi	r24, 0xDB	; 219
   141a6:	9f e1       	ldi	r25, 0x1F	; 31
   141a8:	45 cf       	rjmp	.-374    	; 0x14034 <Read_Config+0x308>
   141aa:	06 32       	cpi	r16, 0x26	; 38
   141ac:	11 05       	cpc	r17, r1
                    ++errors;
                }
                break;

            case SS80_CONTROLLER:
                switch(tok)
   141ae:	71 f0       	breq	.+28     	; 0x141cc <Read_Config+0x4a0>
   141b0:	08 32       	cpi	r16, 0x28	; 40
   141b2:	11 05       	cpc	r17, r1
   141b4:	39 f0       	breq	.+14     	; 0x141c4 <Read_Config+0x498>
   141b6:	05 32       	cpi	r16, 0x25	; 37
   141b8:	11 05       	cpc	r17, r1
   141ba:	59 f4       	brne	.+22     	; 0x141d2 <Read_Config+0x4a6>
   141bc:	96 2f       	mov	r25, r22
   141be:	87 2f       	mov	r24, r23
                {
                    case TOK_UNITS_INSTALLED:
                        SS80p->CONTROLLER.UNITS_INSTALLED = val.w;
                        break;
                    case TOK_TRANSFER_RATE:
                        SS80p->CONTROLLER.TRANSFER_RATE = val.w;
   141c0:	f7 01       	movw	r30, r14
   141c2:	42 c1       	rjmp	.+644    	; 0x14448 <Read_Config+0x71c>
   141c4:	96 2f       	mov	r25, r22
   141c6:	87 2f       	mov	r24, r23

            case SS80_CONTROLLER:
                switch(tok)
                {
                    case TOK_UNITS_INSTALLED:
                        SS80p->CONTROLLER.UNITS_INSTALLED = val.w;
   141c8:	f7 01       	movw	r30, r14
   141ca:	3b c1       	rjmp	.+630    	; 0x14442 <Read_Config+0x716>
   141cc:	f7 01       	movw	r30, r14
   141ce:	64 87       	std	Z+12, r22	; 0x0c
                        break;
                    case TOK_TRANSFER_RATE:
                        SS80p->CONTROLLER.TRANSFER_RATE = val.w;
                        break;
                    case TOK_TYPE:
                        SS80p->CONTROLLER.TYPE = val.b;
   141d0:	4d ce       	rjmp	.-870    	; 0x13e6c <Read_Config+0x140>
   141d2:	ed b7       	in	r30, 0x3d	; 61
                        break;
   141d4:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected SS80 CONTROLLER token: %s, at line:%d\n", ptr,lines);
   141d6:	37 82       	std	Z+7, r3	; 0x07
   141d8:	26 82       	std	Z+6, r2	; 0x06
   141da:	b5 82       	std	Z+5, r11	; 0x05
   141dc:	a4 82       	std	Z+4, r10	; 0x04
   141de:	89 ea       	ldi	r24, 0xA9	; 169
   141e0:	9f e1       	ldi	r25, 0x1F	; 31
   141e2:	28 cf       	rjmp	.-432    	; 0x14034 <Read_Config+0x308>
   141e4:	0a 30       	cpi	r16, 0x0A	; 10
   141e6:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   141e8:	09 f4       	brne	.+2      	; 0x141ec <Read_Config+0x4c0>
   141ea:	45 c0       	rjmp	.+138    	; 0x14276 <Read_Config+0x54a>
   141ec:	d4 f4       	brge	.+52     	; 0x14222 <Read_Config+0x4f6>
   141ee:	05 30       	cpi	r16, 0x05	; 5
   141f0:	11 05       	cpc	r17, r1
   141f2:	d1 f1       	breq	.+116    	; 0x14268 <Read_Config+0x53c>
   141f4:	64 f4       	brge	.+24     	; 0x1420e <Read_Config+0x4e2>
   141f6:	01 15       	cp	r16, r1
   141f8:	11 05       	cpc	r17, r1
   141fa:	09 f4       	brne	.+2      	; 0x141fe <Read_Config+0x4d2>
   141fc:	40 c0       	rjmp	.+128    	; 0x1427e <Read_Config+0x552>
   141fe:	04 30       	cpi	r16, 0x04	; 4
   14200:	11 05       	cpc	r17, r1
   14202:	09 f0       	breq	.+2      	; 0x14206 <Read_Config+0x4da>
   14204:	46 c0       	rjmp	.+140    	; 0x14292 <Read_Config+0x566>
   14206:	f7 01       	movw	r30, r14
   14208:	66 8b       	std	Z+22, r22	; 0x16
                        break;
                    case TOK_BURST_SIZE:
                        SS80p->UNIT.BURST_SIZE = val.b;
                        break;
                    case TOK_BLOCK_TIME:
                        SS80p->UNIT.BLOCK_TIME = val.w;
   1420a:	77 8b       	std	Z+23, r23	; 0x17
   1420c:	2f ce       	rjmp	.-930    	; 0x13e6c <Read_Config+0x140>
   1420e:	06 30       	cpi	r16, 0x06	; 6
                        break;
   14210:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   14212:	71 f1       	breq	.+92     	; 0x14270 <Read_Config+0x544>
   14214:	07 30       	cpi	r16, 0x07	; 7
   14216:	11 05       	cpc	r17, r1
   14218:	e1 f5       	brne	.+120    	; 0x14292 <Read_Config+0x566>
   1421a:	f7 01       	movw	r30, r14
   1421c:	62 8b       	std	Z+18, r22	; 0x12
                        break;
                    case TOK_DEVICE_NUMBER:
                        SS80p->UNIT.DEVICE_NUMBER = val.l;
                        break;
                    case TOK_BYTES_PER_BLOCK:
                        SS80p->UNIT.BYTES_PER_BLOCK = val.w;
   1421e:	73 8b       	std	Z+19, r23	; 0x13
   14220:	25 ce       	rjmp	.-950    	; 0x13e6c <Read_Config+0x140>
   14222:	0c 31       	cpi	r16, 0x1C	; 28
                        break;
   14224:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   14226:	79 f1       	breq	.+94     	; 0x14286 <Read_Config+0x55a>
   14228:	4c f4       	brge	.+18     	; 0x1423c <Read_Config+0x510>
   1422a:	0f 30       	cpi	r16, 0x0F	; 15
   1422c:	11 05       	cpc	r17, r1
   1422e:	b1 f0       	breq	.+44     	; 0x1425c <Read_Config+0x530>
   14230:	03 31       	cpi	r16, 0x13	; 19
   14232:	11 05       	cpc	r17, r1
   14234:	71 f5       	brne	.+92     	; 0x14292 <Read_Config+0x566>
   14236:	f7 01       	movw	r30, r14
   14238:	67 8f       	std	Z+31, r22	; 0x1f
                        break;
                    case TOK_MAXIMUM_INTERLEAVE:
                        SS80p->UNIT.MAXIMUM_INTERLEAVE = val.b;
                        break;
                    case TOK_FIXED_VOLUMES:
                        SS80p->UNIT.FIXED_VOLUMES = val.b;
   1423a:	18 ce       	rjmp	.-976    	; 0x13e6c <Read_Config+0x140>
   1423c:	01 32       	cpi	r16, 0x21	; 33
                        break;
   1423e:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   14240:	29 f1       	breq	.+74     	; 0x1428c <Read_Config+0x560>
   14242:	09 32       	cpi	r16, 0x29	; 41
   14244:	11 05       	cpc	r17, r1
   14246:	39 f0       	breq	.+14     	; 0x14256 <Read_Config+0x52a>
   14248:	0e 31       	cpi	r16, 0x1E	; 30
   1424a:	11 05       	cpc	r17, r1
   1424c:	11 f5       	brne	.+68     	; 0x14292 <Read_Config+0x566>
   1424e:	f7 01       	movw	r30, r14
   14250:	62 8f       	std	Z+26, r22	; 0x1a
                        break;
                    case TOK_CONTINUOUS_TRANSFER_RATE:
                        SS80p->UNIT.CONTINUOUS_TRANSFER_RATE = val.w;
                        break;
                    case TOK_OPTIMAL_RETRY_TIME:
                        SS80p->UNIT.OPTIMAL_RETRY_TIME = val.w;
   14252:	73 8f       	std	Z+27, r23	; 0x1b
   14254:	0b ce       	rjmp	.-1002   	; 0x13e6c <Read_Config+0x140>
   14256:	f7 01       	movw	r30, r14
                        break;
   14258:	65 87       	std	Z+13, r22	; 0x0d

            case SS80_UNIT:
                switch(tok)
                {
                    case TOK_UNIT_TYPE:
                        SS80p->UNIT.UNIT_TYPE = val.b;
   1425a:	08 ce       	rjmp	.-1008   	; 0x13e6c <Read_Config+0x140>
   1425c:	f7 01       	movw	r30, r14
                        break;
   1425e:	66 87       	std	Z+14, r22	; 0x0e
                    case TOK_DEVICE_NUMBER:
                        SS80p->UNIT.DEVICE_NUMBER = val.l;
   14260:	77 87       	std	Z+15, r23	; 0x0f
   14262:	80 8b       	std	Z+16, r24	; 0x10
   14264:	91 8b       	std	Z+17, r25	; 0x11
   14266:	02 ce       	rjmp	.-1020   	; 0x13e6c <Read_Config+0x140>
   14268:	61 70       	andi	r22, 0x01	; 1
                        break;
   1426a:	f7 01       	movw	r30, r14
                    case TOK_BYTES_PER_BLOCK:
                        SS80p->UNIT.BYTES_PER_BLOCK = val.w;
                        break;
                    case TOK_BUFFERED_BLOCKS:
                        SS80p->UNIT.BUFFERED_BLOCKS = 1 & val.b;
   1426c:	64 8b       	std	Z+20, r22	; 0x14
   1426e:	fe cd       	rjmp	.-1028   	; 0x13e6c <Read_Config+0x140>
   14270:	f7 01       	movw	r30, r14
                        break;
   14272:	65 8b       	std	Z+21, r22	; 0x15
                    case TOK_BURST_SIZE:
                        SS80p->UNIT.BURST_SIZE = val.b;
   14274:	fb cd       	rjmp	.-1034   	; 0x13e6c <Read_Config+0x140>
   14276:	f7 01       	movw	r30, r14
                        break;
   14278:	60 8f       	std	Z+24, r22	; 0x18
                    case TOK_BLOCK_TIME:
                        SS80p->UNIT.BLOCK_TIME = val.w;
                        break;
                    case TOK_CONTINUOUS_TRANSFER_RATE:
                        SS80p->UNIT.CONTINUOUS_TRANSFER_RATE = val.w;
   1427a:	71 8f       	std	Z+25, r23	; 0x19
   1427c:	f7 cd       	rjmp	.-1042   	; 0x13e6c <Read_Config+0x140>
   1427e:	f7 01       	movw	r30, r14
                        break;
   14280:	64 8f       	std	Z+28, r22	; 0x1c
                    case TOK_OPTIMAL_RETRY_TIME:
                        SS80p->UNIT.OPTIMAL_RETRY_TIME = val.w;
                        break;
                    case TOK_ACCESS_TIME:
                        SS80p->UNIT.ACCESS_TIME = val.w;
   14282:	75 8f       	std	Z+29, r23	; 0x1d
   14284:	f3 cd       	rjmp	.-1050   	; 0x13e6c <Read_Config+0x140>
   14286:	f7 01       	movw	r30, r14
                        break;
   14288:	66 8f       	std	Z+30, r22	; 0x1e
                    case TOK_MAXIMUM_INTERLEAVE:
                        SS80p->UNIT.MAXIMUM_INTERLEAVE = val.b;
   1428a:	f0 cd       	rjmp	.-1056   	; 0x13e6c <Read_Config+0x140>
   1428c:	f7 01       	movw	r30, r14
                        break;
   1428e:	60 a3       	std	Z+32, r22	; 0x20
                    case TOK_FIXED_VOLUMES:
                        SS80p->UNIT.FIXED_VOLUMES = val.b;
                        break;
                    case TOK_REMOVABLE_VOLUMES:
                        SS80p->UNIT.REMOVABLE_VOLUMES = val.b;
   14290:	ed cd       	rjmp	.-1062   	; 0x13e6c <Read_Config+0x140>
   14292:	ed b7       	in	r30, 0x3d	; 61
                        break;
   14294:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected SS80 UNIT token: %s, at line:%d\n", ptr,lines);
   14296:	37 82       	std	Z+7, r3	; 0x07
   14298:	26 82       	std	Z+6, r2	; 0x06
   1429a:	b5 82       	std	Z+5, r11	; 0x05
   1429c:	a4 82       	std	Z+4, r10	; 0x04
   1429e:	8d e7       	ldi	r24, 0x7D	; 125
   142a0:	9f e1       	ldi	r25, 0x1F	; 31
   142a2:	c8 ce       	rjmp	.-624    	; 0x14034 <Read_Config+0x308>
   142a4:	0a 31       	cpi	r16, 0x1A	; 26
   142a6:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_VOLUME:
                switch(tok)
   142a8:	b9 f0       	breq	.+46     	; 0x142d8 <Read_Config+0x5ac>
   142aa:	64 f4       	brge	.+24     	; 0x142c4 <Read_Config+0x598>
   142ac:	08 31       	cpi	r16, 0x18	; 24
   142ae:	11 05       	cpc	r17, r1
   142b0:	e1 f0       	breq	.+56     	; 0x142ea <Read_Config+0x5be>
   142b2:	09 31       	cpi	r16, 0x19	; 25
   142b4:	11 05       	cpc	r17, r1
   142b6:	e1 f4       	brne	.+56     	; 0x142f0 <Read_Config+0x5c4>
   142b8:	f7 01       	movw	r30, r14
   142ba:	60 a7       	std	Z+40, r22	; 0x28
                        break;
                    case TOK_MAX_SECTOR:
                        SS80p->VOLUME.MAX_SECTOR = val.w;
                        break;
                    case TOK_MAX_BLOCK_NUMBER:
                        SS80p->VOLUME.MAX_BLOCK_NUMBER = val.l;
   142bc:	71 a7       	std	Z+41, r23	; 0x29
   142be:	82 a7       	std	Z+42, r24	; 0x2a
   142c0:	93 a7       	std	Z+43, r25	; 0x2b
   142c2:	d4 cd       	rjmp	.-1112   	; 0x13e6c <Read_Config+0x140>
   142c4:	0b 31       	cpi	r16, 0x1B	; 27
                        break;
   142c6:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_VOLUME:
                switch(tok)
   142c8:	69 f0       	breq	.+26     	; 0x142e4 <Read_Config+0x5b8>
   142ca:	0d 31       	cpi	r16, 0x1D	; 29
   142cc:	11 05       	cpc	r17, r1
   142ce:	81 f4       	brne	.+32     	; 0x142f0 <Read_Config+0x5c4>
   142d0:	f7 01       	movw	r30, r14
   142d2:	66 a3       	std	Z+38, r22	; 0x26
                        break;
                    case TOK_MAX_HEAD:
                        SS80p->VOLUME.MAX_HEAD = val.b;
                        break;
                    case TOK_MAX_SECTOR:
                        SS80p->VOLUME.MAX_SECTOR = val.w;
   142d4:	77 a3       	std	Z+39, r23	; 0x27
   142d6:	ca cd       	rjmp	.-1132   	; 0x13e6c <Read_Config+0x140>
   142d8:	f7 01       	movw	r30, r14
                        break;
   142da:	61 a3       	std	Z+33, r22	; 0x21

            case SS80_VOLUME:
                switch(tok)
                {
                    case TOK_MAX_CYLINDER:
                        SS80p->VOLUME.MAX_CYLINDER = val.l;
   142dc:	72 a3       	std	Z+34, r23	; 0x22
   142de:	83 a3       	std	Z+35, r24	; 0x23
   142e0:	94 a3       	std	Z+36, r25	; 0x24
   142e2:	c4 cd       	rjmp	.-1144   	; 0x13e6c <Read_Config+0x140>
   142e4:	f7 01       	movw	r30, r14
                        break;
   142e6:	65 a3       	std	Z+37, r22	; 0x25
                    case TOK_MAX_HEAD:
                        SS80p->VOLUME.MAX_HEAD = val.b;
   142e8:	c1 cd       	rjmp	.-1150   	; 0x13e6c <Read_Config+0x140>
   142ea:	f7 01       	movw	r30, r14
                        break;
   142ec:	64 a7       	std	Z+44, r22	; 0x2c
                        break;
                    case TOK_MAX_BLOCK_NUMBER:
                        SS80p->VOLUME.MAX_BLOCK_NUMBER = val.l;
                        break;
                    case TOK_INTERLEAVE:
                        SS80p->VOLUME.INTERLEAVE = val.b;
   142ee:	be cd       	rjmp	.-1156   	; 0x13e6c <Read_Config+0x140>
   142f0:	ed b7       	in	r30, 0x3d	; 61
                        break;
   142f2:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected SS80 VOLUME token: %s, at line:%d\n", ptr,lines);
   142f4:	37 82       	std	Z+7, r3	; 0x07
   142f6:	26 82       	std	Z+6, r2	; 0x06
   142f8:	b5 82       	std	Z+5, r11	; 0x05
   142fa:	a4 82       	std	Z+4, r10	; 0x04
   142fc:	c4 5e       	subi	r28, 0xE4	; 228
   142fe:	de 4f       	sbci	r29, 0xFE	; 254
   14300:	28 81       	ld	r18, Y
   14302:	39 81       	ldd	r19, Y+1	; 0x01
   14304:	4a 81       	ldd	r20, Y+2	; 0x02
   14306:	cc 51       	subi	r28, 0x1C	; 28
   14308:	d1 40       	sbci	r29, 0x01	; 1
   1430a:	c4 c0       	rjmp	.+392    	; 0x14494 <Read_Config+0x768>
   1430c:	04 31       	cpi	r16, 0x14	; 20
                }
                break;

#ifdef AMIGO
            case AMIGO_STATE:
                switch(tok)
   1430e:	11 05       	cpc	r17, r1
   14310:	a1 f0       	breq	.+40     	; 0x1433a <Read_Config+0x60e>
   14312:	05 31       	cpi	r16, 0x15	; 21
   14314:	11 05       	cpc	r17, r1
   14316:	51 f0       	breq	.+20     	; 0x1432c <Read_Config+0x600>
   14318:	09 30       	cpi	r16, 0x09	; 9
   1431a:	11 05       	cpc	r17, r1
                    case TOK_HEADER:
                        push_state(state);
                        state = AMIGO_HEADER;
                        break;
                    case TOK_CONFIG:
                        push_state(state);
   1431c:	a9 f4       	brne	.+42     	; 0x14348 <Read_Config+0x61c>
   1431e:	8a e0       	ldi	r24, 0x0A	; 10
   14320:	90 e0       	ldi	r25, 0x00	; 0
   14322:	9a d8       	rcall	.-3788   	; 0x13458 <push_state>
                        state = AMIGO_CONFIG;
   14324:	9c e0       	ldi	r25, 0x0C	; 12
   14326:	69 2e       	mov	r6, r25
   14328:	71 2c       	mov	r7, r1
                        break;
   1432a:	a0 cd       	rjmp	.-1216   	; 0x13e6c <Read_Config+0x140>
#ifdef AMIGO
            case AMIGO_STATE:
                switch(tok)
                {
                    case TOK_HEADER:
                        push_state(state);
   1432c:	8a e0       	ldi	r24, 0x0A	; 10
   1432e:	90 e0       	ldi	r25, 0x00	; 0
   14330:	93 d8       	rcall	.-3802   	; 0x13458 <push_state>
   14332:	2b e0       	ldi	r18, 0x0B	; 11
                        state = AMIGO_HEADER;
   14334:	62 2e       	mov	r6, r18
   14336:	71 2c       	mov	r7, r1
   14338:	99 cd       	rjmp	.-1230   	; 0x13e6c <Read_Config+0x140>
                        break;
   1433a:	8a e0       	ldi	r24, 0x0A	; 10
                    case TOK_CONFIG:
                        push_state(state);
                        state = AMIGO_CONFIG;
                        break;
                    case TOK_GEOMETRY:
                        push_state(state);
   1433c:	90 e0       	ldi	r25, 0x00	; 0
   1433e:	8c d8       	rcall	.-3816   	; 0x13458 <push_state>
   14340:	8d e0       	ldi	r24, 0x0D	; 13
   14342:	68 2e       	mov	r6, r24
                        state = AMIGO_GEOMETRY;
   14344:	71 2c       	mov	r7, r1
   14346:	92 cd       	rjmp	.-1244   	; 0x13e6c <Read_Config+0x140>
   14348:	ed b7       	in	r30, 0x3d	; 61
                        break;
   1434a:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected AMIGO START token: %s, at line:%d\n", ptr,lines);
   1434c:	37 82       	std	Z+7, r3	; 0x07
   1434e:	26 82       	std	Z+6, r2	; 0x06
   14350:	b5 82       	std	Z+5, r11	; 0x05
   14352:	a4 82       	std	Z+4, r10	; 0x04
   14354:	c7 5e       	subi	r28, 0xE7	; 231
   14356:	de 4f       	sbci	r29, 0xFE	; 254
   14358:	28 81       	ld	r18, Y
   1435a:	39 81       	ldd	r19, Y+1	; 0x01
   1435c:	4a 81       	ldd	r20, Y+2	; 0x02
   1435e:	c9 51       	subi	r28, 0x19	; 25
   14360:	d1 40       	sbci	r29, 0x01	; 1
   14362:	98 c0       	rjmp	.+304    	; 0x14494 <Read_Config+0x768>
   14364:	00 31       	cpi	r16, 0x10	; 16
   14366:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case AMIGO_HEADER:
                switch(tok)
   14368:	09 f4       	brne	.+2      	; 0x1436c <Read_Config+0x640>
   1436a:	80 cd       	rjmp	.-1280   	; 0x13e6c <Read_Config+0x140>
   1436c:	8c f4       	brge	.+34     	; 0x14390 <Read_Config+0x664>
   1436e:	01 30       	cpi	r16, 0x01	; 1
   14370:	11 05       	cpc	r17, r1
   14372:	69 f5       	brne	.+90     	; 0x143ce <Read_Config+0x6a2>
   14374:	c8 5f       	subi	r28, 0xF8	; 248
   14376:	de 4f       	sbci	r29, 0xFE	; 254
                {
                    case TOK_DRIVE:
                        break;
                    case TOK_ADDRESS:
						address =  val.b;
                        Devices[index].ADDRESS = address;
   14378:	28 81       	ld	r18, Y
   1437a:	c8 50       	subi	r28, 0x08	; 8
   1437c:	d1 40       	sbci	r29, 0x01	; 1
   1437e:	3b e0       	ldi	r19, 0x0B	; 11
   14380:	23 02       	muls	r18, r19
   14382:	f0 01       	movw	r30, r0
   14384:	11 24       	eor	r1, r1
   14386:	ec 50       	subi	r30, 0x0C	; 12
   14388:	f1 4e       	sbci	r31, 0xE1	; 225
   1438a:	61 83       	std	Z+1, r22	; 0x01
   1438c:	d2 01       	movw	r26, r4
   1438e:	14 c0       	rjmp	.+40     	; 0x143b8 <Read_Config+0x68c>
                        AMIGOp->HEADER.ADDRESS = address;
   14390:	02 31       	cpi	r16, 0x12	; 18
   14392:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case AMIGO_HEADER:
                switch(tok)
   14394:	a9 f0       	breq	.+42     	; 0x143c0 <Read_Config+0x694>
   14396:	0f 31       	cpi	r16, 0x1F	; 31
   14398:	11 05       	cpc	r17, r1
   1439a:	c9 f4       	brne	.+50     	; 0x143ce <Read_Config+0x6a2>
   1439c:	c8 5f       	subi	r28, 0xF8	; 248
   1439e:	de 4f       	sbci	r29, 0xFE	; 254
                        Devices[index].ADDRESS = address;
                        AMIGOp->HEADER.ADDRESS = address;
                        break;
                    case TOK_PPR:
						ppr = val.b;
                        Devices[index].PPR = ppr;
   143a0:	b8 81       	ld	r27, Y
   143a2:	c8 50       	subi	r28, 0x08	; 8
   143a4:	d1 40       	sbci	r29, 0x01	; 1
   143a6:	2b e0       	ldi	r18, 0x0B	; 11
   143a8:	b2 02       	muls	r27, r18
   143aa:	f0 01       	movw	r30, r0
   143ac:	11 24       	eor	r1, r1
   143ae:	ec 50       	subi	r30, 0x0C	; 12
   143b0:	f1 4e       	sbci	r31, 0xE1	; 225
   143b2:	62 83       	std	Z+2, r22	; 0x02
   143b4:	f2 01       	movw	r30, r4
   143b6:	02 c0       	rjmp	.+4      	; 0x143bc <Read_Config+0x690>
                        AMIGOp->HEADER.PPR = ppr;
   143b8:	6c 93       	st	X, r22
   143ba:	58 cd       	rjmp	.-1360   	; 0x13e6c <Read_Config+0x140>
                    case TOK_DRIVE:
                        break;
                    case TOK_ADDRESS:
						address =  val.b;
                        Devices[index].ADDRESS = address;
                        AMIGOp->HEADER.ADDRESS = address;
   143bc:	61 83       	std	Z+1, r22	; 0x01
                        break;
   143be:	56 cd       	rjmp	.-1364   	; 0x13e6c <Read_Config+0x140>
                    case TOK_PPR:
						ppr = val.b;
                        Devices[index].PPR = ppr;
                        AMIGOp->HEADER.PPR = ppr;
   143c0:	c4 01       	movw	r24, r8
                        break;
   143c2:	0e 94 1b 32 	call	0x6436	; 0x6436 <stralloc>
                    case TOK_FILE:
                        AMIGOp->HEADER.NAME = stralloc(token);
   143c6:	f2 01       	movw	r30, r4
   143c8:	93 83       	std	Z+3, r25	; 0x03
   143ca:	82 83       	std	Z+2, r24	; 0x02
   143cc:	4f cd       	rjmp	.-1378   	; 0x13e6c <Read_Config+0x140>
   143ce:	ed b7       	in	r30, 0x3d	; 61
                        break;
   143d0:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   143d2:	37 82       	std	Z+7, r3	; 0x07
   143d4:	26 82       	std	Z+6, r2	; 0x06
   143d6:	b5 82       	std	Z+5, r11	; 0x05
   143d8:	a4 82       	std	Z+4, r10	; 0x04
   143da:	ca 5e       	subi	r28, 0xEA	; 234
   143dc:	de 4f       	sbci	r29, 0xFE	; 254
   143de:	28 81       	ld	r18, Y
   143e0:	39 81       	ldd	r19, Y+1	; 0x01
   143e2:	4a 81       	ldd	r20, Y+2	; 0x02
   143e4:	c6 51       	subi	r28, 0x16	; 22
   143e6:	d1 40       	sbci	r29, 0x01	; 1
   143e8:	55 c0       	rjmp	.+170    	; 0x14494 <Read_Config+0x768>
   143ea:	07 31       	cpi	r16, 0x17	; 23
   143ec:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case AMIGO_CONFIG:
                if(tok == TOK_ID )
   143ee:	31 f4       	brne	.+12     	; 0x143fc <Read_Config+0x6d0>
   143f0:	96 2f       	mov	r25, r22
   143f2:	87 2f       	mov	r24, r23
                {
                    AMIGOp->CONFIG.ID = val.w;
   143f4:	f2 01       	movw	r30, r4
   143f6:	96 83       	std	Z+6, r25	; 0x06
   143f8:	87 83       	std	Z+7, r24	; 0x07
   143fa:	38 cd       	rjmp	.-1424   	; 0x13e6c <Read_Config+0x140>
   143fc:	ed b7       	in	r30, 0x3d	; 61
   143fe:	fe b7       	in	r31, 0x3e	; 62
                }
                else
                {
                    printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   14400:	37 82       	std	Z+7, r3	; 0x07
   14402:	26 82       	std	Z+6, r2	; 0x06
   14404:	b5 82       	std	Z+5, r11	; 0x05
   14406:	a4 82       	std	Z+4, r10	; 0x04
   14408:	cd 5e       	subi	r28, 0xED	; 237
   1440a:	de 4f       	sbci	r29, 0xFE	; 254
   1440c:	28 81       	ld	r18, Y
   1440e:	39 81       	ldd	r19, Y+1	; 0x01
   14410:	4a 81       	ldd	r20, Y+2	; 0x02
   14412:	c3 51       	subi	r28, 0x13	; 19
   14414:	d1 40       	sbci	r29, 0x01	; 1
   14416:	3e c0       	rjmp	.+124    	; 0x14494 <Read_Config+0x768>
   14418:	0d 30       	cpi	r16, 0x0D	; 13
   1441a:	11 05       	cpc	r17, r1
                    ++errors;
                }
                break;

            case AMIGO_GEOMETRY:
                switch(tok)
   1441c:	e1 f0       	breq	.+56     	; 0x14456 <Read_Config+0x72a>
   1441e:	3c f4       	brge	.+14     	; 0x1442e <Read_Config+0x702>
   14420:	08 30       	cpi	r16, 0x08	; 8
   14422:	11 05       	cpc	r17, r1
   14424:	e1 f4       	brne	.+56     	; 0x1445e <Read_Config+0x732>
   14426:	96 2f       	mov	r25, r22
   14428:	87 2f       	mov	r24, r23
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
   1442a:	f2 01       	movw	r30, r4
   1442c:	0a c0       	rjmp	.+20     	; 0x14442 <Read_Config+0x716>
   1442e:	06 31       	cpi	r16, 0x16	; 22
   14430:	11 05       	cpc	r17, r1
                    ++errors;
                }
                break;

            case AMIGO_GEOMETRY:
                switch(tok)
   14432:	69 f0       	breq	.+26     	; 0x1444e <Read_Config+0x722>
   14434:	02 32       	cpi	r16, 0x22	; 34
   14436:	11 05       	cpc	r17, r1
   14438:	91 f4       	brne	.+36     	; 0x1445e <Read_Config+0x732>
   1443a:	96 2f       	mov	r25, r22
   1443c:	87 2f       	mov	r24, r23
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
                        break;
                    case TOK_SECTORS_PER_TRACK:
                        AMIGOp->GEOMETRY.SECTORS_PER_TRACK = val.w;
   1443e:	f2 01       	movw	r30, r4
   14440:	03 c0       	rjmp	.+6      	; 0x14448 <Read_Config+0x71c>
   14442:	90 87       	std	Z+8, r25	; 0x08
   14444:	81 87       	std	Z+9, r24	; 0x09

            case AMIGO_GEOMETRY:
                switch(tok)
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
   14446:	12 cd       	rjmp	.-1500   	; 0x13e6c <Read_Config+0x140>
   14448:	92 87       	std	Z+10, r25	; 0x0a
                        break;
   1444a:	83 87       	std	Z+11, r24	; 0x0b
                    case TOK_SECTORS_PER_TRACK:
                        AMIGOp->GEOMETRY.SECTORS_PER_TRACK = val.w;
   1444c:	0f cd       	rjmp	.-1506   	; 0x13e6c <Read_Config+0x140>
   1444e:	f2 01       	movw	r30, r4
                        break;
   14450:	64 87       	std	Z+12, r22	; 0x0c
                    case TOK_HEADS:
                        AMIGOp->GEOMETRY.HEADS = val.w;
   14452:	75 87       	std	Z+13, r23	; 0x0d
   14454:	0b cd       	rjmp	.-1514   	; 0x13e6c <Read_Config+0x140>
   14456:	f2 01       	movw	r30, r4
                        break;
   14458:	66 87       	std	Z+14, r22	; 0x0e
                    case TOK_CYLINDERS:
                        AMIGOp->GEOMETRY.CYLINDERS = val.w;
   1445a:	77 87       	std	Z+15, r23	; 0x0f
   1445c:	07 cd       	rjmp	.-1522   	; 0x13e6c <Read_Config+0x140>
   1445e:	ed b7       	in	r30, 0x3d	; 61
                        break;
   14460:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   14462:	37 82       	std	Z+7, r3	; 0x07
   14464:	26 82       	std	Z+6, r2	; 0x06
   14466:	b5 82       	std	Z+5, r11	; 0x05
   14468:	a4 82       	std	Z+4, r10	; 0x04
   1446a:	c0 5f       	subi	r28, 0xF0	; 240
   1446c:	de 4f       	sbci	r29, 0xFE	; 254
   1446e:	28 81       	ld	r18, Y
   14470:	39 81       	ldd	r19, Y+1	; 0x01
   14472:	4a 81       	ldd	r20, Y+2	; 0x02
   14474:	c0 51       	subi	r28, 0x10	; 16
   14476:	d1 40       	sbci	r29, 0x01	; 1
   14478:	0d c0       	rjmp	.+26     	; 0x14494 <Read_Config+0x768>
   1447a:	ed b7       	in	r30, 0x3d	; 61
   1447c:	fe b7       	in	r31, 0x3e	; 62
                        break;
                }
                break;
#endif                                // #ifdef AMIGO
            default:
                printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   1447e:	37 82       	std	Z+7, r3	; 0x07
   14480:	26 82       	std	Z+6, r2	; 0x06
   14482:	b5 82       	std	Z+5, r11	; 0x05
   14484:	a4 82       	std	Z+4, r10	; 0x04
   14486:	c3 5f       	subi	r28, 0xF3	; 243
   14488:	de 4f       	sbci	r29, 0xFE	; 254
   1448a:	28 81       	ld	r18, Y
   1448c:	39 81       	ldd	r19, Y+1	; 0x01
   1448e:	4a 81       	ldd	r20, Y+2	; 0x02
   14490:	cd 50       	subi	r28, 0x0D	; 13
   14492:	d1 40       	sbci	r29, 0x01	; 1
   14494:	21 83       	std	Z+1, r18	; 0x01
   14496:	32 83       	std	Z+2, r19	; 0x02
   14498:	43 83       	std	Z+3, r20	; 0x03
   1449a:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   1449e:	ff ef       	ldi	r31, 0xFF	; 255
   144a0:	cf 1a       	sub	r12, r31
                ++errors;
   144a2:	df 0a       	sbc	r13, r31
   144a4:	e3 cc       	rjmp	.-1594   	; 0x13e6c <Read_Config+0x140>
   144a6:	61 14       	cp	r6, r1
                break;
   144a8:	71 04       	cpc	r7, r1

        }                                         // switch
    }                                             //while
    if(state != START_STATE)
   144aa:	79 f0       	breq	.+30     	; 0x144ca <Read_Config+0x79e>
   144ac:	ed b7       	in	r30, 0x3d	; 61
   144ae:	fe b7       	in	r31, 0x3e	; 62
    {
        printf("Missing END statement at line:%d\n", lines);
   144b0:	35 82       	std	Z+5, r3	; 0x05
   144b2:	24 82       	std	Z+4, r2	; 0x04
   144b4:	8e e4       	ldi	r24, 0x4E	; 78
   144b6:	9e e1       	ldi	r25, 0x1E	; 30
   144b8:	a0 e0       	ldi	r26, 0x00	; 0
   144ba:	81 83       	std	Z+1, r24	; 0x01
   144bc:	92 83       	std	Z+2, r25	; 0x02
   144be:	a3 83       	std	Z+3, r26	; 0x03
   144c0:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   144c4:	ff ef       	ldi	r31, 0xFF	; 255
   144c6:	cf 1a       	sub	r12, r31
        ++errors;
   144c8:	df 0a       	sbc	r13, r31
   144ca:	ed b7       	in	r30, 0x3d	; 61
   144cc:	fe b7       	in	r31, 0x3e	; 62
    }
    printf("Read_Config: read(%d) lines\n", lines);
   144ce:	35 82       	std	Z+5, r3	; 0x05
   144d0:	24 82       	std	Z+4, r2	; 0x04
   144d2:	81 e3       	ldi	r24, 0x31	; 49
   144d4:	9e e1       	ldi	r25, 0x1E	; 30
   144d6:	a0 e0       	ldi	r26, 0x00	; 0
   144d8:	81 83       	std	Z+1, r24	; 0x01
   144da:	92 83       	std	Z+2, r25	; 0x02
   144dc:	a3 83       	std	Z+3, r26	; 0x03
   144de:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   144e2:	c1 14       	cp	r12, r1
   144e4:	d1 04       	cpc	r13, r1
    if(errors)
   144e6:	61 f0       	breq	.+24     	; 0x14500 <Read_Config+0x7d4>
   144e8:	ed b7       	in	r30, 0x3d	; 61
   144ea:	fe b7       	in	r31, 0x3e	; 62
        printf("Read_Config: ****** errors(%d) ******\n", errors);
   144ec:	d5 82       	std	Z+5, r13	; 0x05
   144ee:	c4 82       	std	Z+4, r12	; 0x04
   144f0:	8a e0       	ldi	r24, 0x0A	; 10
   144f2:	9e e1       	ldi	r25, 0x1E	; 30
   144f4:	a0 e0       	ldi	r26, 0x00	; 0
   144f6:	81 83       	std	Z+1, r24	; 0x01
   144f8:	92 83       	std	Z+2, r25	; 0x02
   144fa:	a3 83       	std	Z+3, r26	; 0x03
   144fc:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   14500:	c5 5f       	subi	r28, 0xF5	; 245
   14502:	de 4f       	sbci	r29, 0xFE	; 254

    if(fclose(cfg) == EOF)
   14504:	88 81       	ld	r24, Y
   14506:	99 81       	ldd	r25, Y+1	; 0x01
   14508:	cb 50       	subi	r28, 0x0B	; 11
   1450a:	d1 40       	sbci	r29, 0x01	; 1
   1450c:	0e 94 15 7d 	call	0xfa2a	; 0xfa2a <fclose>
   14510:	01 96       	adiw	r24, 0x01	; 1
   14512:	39 f4       	brne	.+14     	; 0x14522 <Read_Config+0x7f6>
   14514:	86 e6       	ldi	r24, 0x66	; 102
   14516:	9e e0       	ldi	r25, 0x0E	; 14
    {
        perror("Read_Config - close error");
   14518:	0e 94 9c 78 	call	0xf138	; 0xf138 <perror>
   1451c:	2f ef       	ldi	r18, 0xFF	; 255
        ++errors;
   1451e:	c2 1a       	sub	r12, r18
   14520:	d2 0a       	sbc	r13, r18
   14522:	fb db       	rcall	.-2058   	; 0x13d1a <verify_devices>
    }

// Post process and fixup any devices
    verify_devices();
   14524:	c6 01       	movw	r24, r12
   14526:	c2 5e       	subi	r28, 0xE2	; 226

    return(errors);
   14528:	de 4f       	sbci	r29, 0xFE	; 254
}
   1452a:	e2 e1       	ldi	r30, 0x12	; 18
   1452c:	0c 94 29 e7 	jmp	0x1ce52	; 0x1ce52 <__epilogue_restores__>

00014530 <display_mounts>:
   14530:	cf 93       	push	r28
   14532:	00 d0       	rcall	.+0      	; 0x14534 <display_mounts+0x4>
            printf("PRINTER %-8s %2d\n", " ", (int) PRINTERp->HEADER.ADDRESS);
	}
}

void display_mounts()
{
   14534:	1f 92       	push	r1
	int8_t i;
	printf("Mounted drives\n");
   14536:	83 e3       	ldi	r24, 0x33	; 51
   14538:	98 e1       	ldi	r25, 0x18	; 24
   1453a:	a0 e0       	ldi	r26, 0x00	; 0
   1453c:	ed b7       	in	r30, 0x3d	; 61
   1453e:	fe b7       	in	r31, 0x3e	; 62
   14540:	81 83       	std	Z+1, r24	; 0x01
   14542:	92 83       	std	Z+2, r25	; 0x02
   14544:	a3 83       	std	Z+3, r26	; 0x03
   14546:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
	for(i=0;i<MAX_DEVICES;++i)
   1454a:	c0 e0       	ldi	r28, 0x00	; 0
		display_mount(i);
   1454c:	8c 2f       	mov	r24, r28
   1454e:	a0 da       	rcall	.-2752   	; 0x13a90 <display_mount>
   14550:	cf 5f       	subi	r28, 0xFF	; 255

void display_mounts()
{
	int8_t i;
	printf("Mounted drives\n");
	for(i=0;i<MAX_DEVICES;++i)
   14552:	cc 30       	cpi	r28, 0x0C	; 12
   14554:	d9 f7       	brne	.-10     	; 0x1454c <display_mounts+0x1c>
		display_mount(i);
    printf("\n");
   14556:	81 e3       	ldi	r24, 0x31	; 49
   14558:	98 e1       	ldi	r25, 0x18	; 24
   1455a:	a0 e0       	ldi	r26, 0x00	; 0
   1455c:	ed b7       	in	r30, 0x3d	; 61
   1455e:	fe b7       	in	r31, 0x3e	; 62
   14560:	81 83       	std	Z+1, r24	; 0x01
   14562:	92 83       	std	Z+2, r25	; 0x02
   14564:	a3 83       	std	Z+3, r26	; 0x03
   14566:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
}
   1456a:	0f 90       	pop	r0
   1456c:	0f 90       	pop	r0
   1456e:	0f 90       	pop	r0
   14570:	cf 91       	pop	r28
   14572:	08 95       	ret

00014574 <mount>:

/// ===============================================
/// @brief mount disks - testing
/// @return Devices[] index on success, -1 on error
int8_t mount(int argc, char *argv[])
{
   14574:	a5 e0       	ldi	r26, 0x05	; 5
   14576:	b0 e0       	ldi	r27, 0x00	; 0
   14578:	e0 ec       	ldi	r30, 0xC0	; 192
   1457a:	f2 ea       	ldi	r31, 0xA2	; 162
   1457c:	0c 94 17 e7 	jmp	0x1ce2e	; 0x1ce2e <__prologue_saves__+0x14>
   14580:	eb 01       	movw	r28, r22
	{
		printf("argv[%d] = %s\n", (int) i, argv[i]);

	}
#endif
	if(argc == 1)
   14582:	81 30       	cpi	r24, 0x01	; 1
   14584:	91 05       	cpc	r25, r1
   14586:	11 f4       	brne	.+4      	; 0x1458c <mount+0x18>
	{
		display_mounts();
   14588:	d3 df       	rcall	.-90     	; 0x14530 <display_mounts>
   1458a:	c2 c0       	rjmp	.+388    	; 0x14710 <mount+0x19c>
		return(1);
	}
	else if(argc == 3)
   1458c:	83 30       	cpi	r24, 0x03	; 3
   1458e:	91 05       	cpc	r25, r1
   14590:	61 f5       	brne	.+88     	; 0x145ea <mount+0x76>
	{
			if(MATCHI(argv[1], "PRINTER"))
   14592:	60 e8       	ldi	r22, 0x80	; 128
   14594:	7e e0       	ldi	r23, 0x0E	; 14
   14596:	8a 81       	ldd	r24, Y+2	; 0x02
   14598:	9b 81       	ldd	r25, Y+3	; 0x03
   1459a:	0e 94 79 32 	call	0x64f2	; 0x64f2 <MATCHI>
   1459e:	89 2b       	or	r24, r25
   145a0:	09 f4       	brne	.+2      	; 0x145a4 <mount+0x30>
   145a2:	b6 c0       	rjmp	.+364    	; 0x14710 <mount+0x19c>
			{
				// FIXME - do we want to have separtate address and ppr ?
				int8_t address = atoi(argv[2]) & 0xff;
   145a4:	8c 81       	ldd	r24, Y+4	; 0x04
   145a6:	9d 81       	ldd	r25, Y+5	; 0x05
   145a8:	0e 94 c5 47 	call	0x8f8a	; 0x8f8a <atoi>
   145ac:	c8 2f       	mov	r28, r24
				index = alloc_device(PRINTER_TYPE);
   145ae:	84 e0       	ldi	r24, 0x04	; 4
   145b0:	90 e0       	ldi	r25, 0x00	; 0
   145b2:	0e 94 5b 99 	call	0x132b6	; 0x132b6 <alloc_device>
				if(index < 0)
   145b6:	87 ff       	sbrs	r24, 7
   145b8:	0b c0       	rjmp	.+22     	; 0x145d0 <mount+0x5c>
				{
					printf("Could not allocate PRINTER structure\n");
   145ba:	85 e2       	ldi	r24, 0x25	; 37
   145bc:	99 e1       	ldi	r25, 0x19	; 25
   145be:	a0 e0       	ldi	r26, 0x00	; 0
   145c0:	ed b7       	in	r30, 0x3d	; 61
   145c2:	fe b7       	in	r31, 0x3e	; 62
   145c4:	81 83       	std	Z+1, r24	; 0x01
   145c6:	92 83       	std	Z+2, r25	; 0x02
   145c8:	a3 83       	std	Z+3, r26	; 0x03
   145ca:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   145ce:	9e c0       	rjmp	.+316    	; 0x1470c <mount+0x198>
					return(0);
				}
				PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
   145d0:	9b e0       	ldi	r25, 0x0B	; 11
   145d2:	89 02       	muls	r24, r25
   145d4:	f0 01       	movw	r30, r0
   145d6:	11 24       	eor	r1, r1
   145d8:	ec 50       	subi	r30, 0x0C	; 12
   145da:	f1 4e       	sbci	r31, 0xE1	; 225
				PRINTERp->HEADER.ADDRESS  = address;
   145dc:	a7 81       	ldd	r26, Z+7	; 0x07
   145de:	b0 85       	ldd	r27, Z+8	; 0x08
   145e0:	cc 93       	st	X, r28
				Devices[index].ADDRESS = address;
   145e2:	c1 83       	std	Z+1, r28	; 0x01
				Devices[index].PPR = 0xff;
   145e4:	9f ef       	ldi	r25, 0xFF	; 255
   145e6:	92 83       	std	Z+2, r25	; 0x02
   145e8:	80 c0       	rjmp	.+256    	; 0x146ea <mount+0x176>
				return( verify_device(index) );
			}
	}
	else if(argc == 4)
   145ea:	04 97       	sbiw	r24, 0x04	; 4
   145ec:	09 f0       	breq	.+2      	; 0x145f0 <mount+0x7c>
   145ee:	8d c0       	rjmp	.+282    	; 0x1470a <mount+0x196>
		/*
		argv[1] = 9121
		argv[2] = 2
		argv[3] = amigo2.lif
		*/
		if(!hpdir_find_drive(argv[1],0,0) )
   145f0:	40 e0       	ldi	r20, 0x00	; 0
   145f2:	50 e0       	ldi	r21, 0x00	; 0
   145f4:	60 e0       	ldi	r22, 0x00	; 0
   145f6:	70 e0       	ldi	r23, 0x00	; 0
   145f8:	8a 81       	ldd	r24, Y+2	; 0x02
   145fa:	9b 81       	ldd	r25, Y+3	; 0x03
   145fc:	2b d1       	rcall	.+598    	; 0x14854 <hpdir_find_drive>
   145fe:	89 2b       	or	r24, r25
   14600:	59 f4       	brne	.+22     	; 0x14618 <mount+0xa4>
		{
			printf("WARNING: model NOT found in hpdir.ini!\n");
   14602:	8d ef       	ldi	r24, 0xFD	; 253
   14604:	98 e1       	ldi	r25, 0x18	; 24
   14606:	a0 e0       	ldi	r26, 0x00	; 0
   14608:	ed b7       	in	r30, 0x3d	; 61
   1460a:	fe b7       	in	r31, 0x3e	; 62
   1460c:	81 83       	std	Z+1, r24	; 0x01
   1460e:	92 83       	std	Z+2, r25	; 0x02
   14610:	a3 83       	std	Z+3, r26	; 0x03
   14612:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   14616:	37 c0       	rjmp	.+110    	; 0x14686 <mount+0x112>
			return(-1);
		}
		if(MATCHI(hpdir.TYPE, "SS80") || MATCHI(hpdir.TYPE,"CS80") )
   14618:	68 e8       	ldi	r22, 0x88	; 136
   1461a:	7e e0       	ldi	r23, 0x0E	; 14
   1461c:	88 ed       	ldi	r24, 0xD8	; 216
   1461e:	9f e1       	ldi	r25, 0x1F	; 31
   14620:	0e 94 79 32 	call	0x64f2	; 0x64f2 <MATCHI>
   14624:	89 2b       	or	r24, r25
   14626:	a9 f0       	breq	.+42     	; 0x14652 <mount+0xde>
		{
			// FIXME - do we want to have separtate address and ppr ?
			int8_t address = atoi(argv[2]) & 0xff;
   14628:	8c 81       	ldd	r24, Y+4	; 0x04
   1462a:	9d 81       	ldd	r25, Y+5	; 0x05
   1462c:	0e 94 c5 47 	call	0x8f8a	; 0x8f8a <atoi>
   14630:	e8 2e       	mov	r14, r24
			int8_t ppr = address;
			index = alloc_device(SS80_TYPE);
   14632:	83 e0       	ldi	r24, 0x03	; 3
   14634:	90 e0       	ldi	r25, 0x00	; 0
   14636:	0e 94 5b 99 	call	0x132b6	; 0x132b6 <alloc_device>
   1463a:	f8 2e       	mov	r15, r24
			if(index < 0)
   1463c:	87 ff       	sbrs	r24, 7
   1463e:	12 c0       	rjmp	.+36     	; 0x14664 <mount+0xf0>
			{
				printf("Could not allocate SS80 structure for %s\n",argv[2]);
   14640:	8c 81       	ldd	r24, Y+4	; 0x04
   14642:	9d 81       	ldd	r25, Y+5	; 0x05
   14644:	ed b7       	in	r30, 0x3d	; 61
   14646:	fe b7       	in	r31, 0x3e	; 62
   14648:	95 83       	std	Z+5, r25	; 0x05
   1464a:	84 83       	std	Z+4, r24	; 0x04
   1464c:	83 ed       	ldi	r24, 0xD3	; 211
   1464e:	98 e1       	ldi	r25, 0x18	; 24
   14650:	38 c0       	rjmp	.+112    	; 0x146c2 <mount+0x14e>
		if(!hpdir_find_drive(argv[1],0,0) )
		{
			printf("WARNING: model NOT found in hpdir.ini!\n");
			return(-1);
		}
		if(MATCHI(hpdir.TYPE, "SS80") || MATCHI(hpdir.TYPE,"CS80") )
   14652:	6d e8       	ldi	r22, 0x8D	; 141
   14654:	7e e0       	ldi	r23, 0x0E	; 14
   14656:	88 ed       	ldi	r24, 0xD8	; 216
   14658:	9f e1       	ldi	r25, 0x1F	; 31
   1465a:	0e 94 79 32 	call	0x64f2	; 0x64f2 <MATCHI>
   1465e:	89 2b       	or	r24, r25
   14660:	19 f7       	brne	.-58     	; 0x14628 <mount+0xb4>
   14662:	13 c0       	rjmp	.+38     	; 0x1468a <mount+0x116>
			if(index < 0)
			{
				printf("Could not allocate SS80 structure for %s\n",argv[2]);
				return(0);
			}
			SS80p = (SS80DiskType *) Devices[index].dev;
   14664:	ff 2d       	mov	r31, r15
   14666:	8b e0       	ldi	r24, 0x0B	; 11
   14668:	f8 02       	muls	r31, r24
   1466a:	80 01       	movw	r16, r0
   1466c:	11 24       	eor	r1, r1
   1466e:	0c 50       	subi	r16, 0x0C	; 12
   14670:	11 4e       	sbci	r17, 0xE1	; 225
   14672:	f8 01       	movw	r30, r16
   14674:	c7 80       	ldd	r12, Z+7	; 0x07
   14676:	d0 84       	ldd	r13, Z+8	; 0x08
			if( !hpdir_set_parameters(index, argv[1] ) )
   14678:	6a 81       	ldd	r22, Y+2	; 0x02
   1467a:	7b 81       	ldd	r23, Y+3	; 0x03
   1467c:	8f 2d       	mov	r24, r15
   1467e:	0e 94 e6 9a 	call	0x135cc	; 0x135cc <hpdir_set_parameters>
   14682:	81 11       	cpse	r24, r1
   14684:	25 c0       	rjmp	.+74     	; 0x146d0 <mount+0x15c>
				return(-1);
   14686:	8f ef       	ldi	r24, 0xFF	; 255
   14688:	44 c0       	rjmp	.+136    	; 0x14712 <mount+0x19e>
			Devices[index].ADDRESS = address;
			Devices[index].PPR = ppr;
			return( verify_device(index) );
		}
#ifdef AMIGO
		else if(MATCH(hpdir.TYPE, "AMIGO"))
   1468a:	62 e9       	ldi	r22, 0x92	; 146
   1468c:	7e e0       	ldi	r23, 0x0E	; 14
   1468e:	88 ed       	ldi	r24, 0xD8	; 216
   14690:	9f e1       	ldi	r25, 0x1F	; 31
   14692:	0e 94 65 32 	call	0x64ca	; 0x64ca <MATCH>
   14696:	89 2b       	or	r24, r25
   14698:	51 f1       	breq	.+84     	; 0x146ee <mount+0x17a>
		{
			// FIXME - do we want to have separtate address and ppr ?
			int8_t address = atoi(argv[2]) & 0xff;
   1469a:	8c 81       	ldd	r24, Y+4	; 0x04
   1469c:	9d 81       	ldd	r25, Y+5	; 0x05
   1469e:	0e 94 c5 47 	call	0x8f8a	; 0x8f8a <atoi>
   146a2:	e8 2e       	mov	r14, r24
			int8_t ppr = address;
			index = alloc_device(AMIGO_TYPE);
   146a4:	81 e0       	ldi	r24, 0x01	; 1
   146a6:	90 e0       	ldi	r25, 0x00	; 0
   146a8:	0e 94 5b 99 	call	0x132b6	; 0x132b6 <alloc_device>
   146ac:	f8 2e       	mov	r15, r24
			if(index < 0)
   146ae:	87 ff       	sbrs	r24, 7
   146b0:	d9 cf       	rjmp	.-78     	; 0x14664 <mount+0xf0>
			{
				printf("Could not allocate AMIGO structure for %s\n",argv[2]);
   146b2:	8c 81       	ldd	r24, Y+4	; 0x04
   146b4:	9d 81       	ldd	r25, Y+5	; 0x05
   146b6:	ed b7       	in	r30, 0x3d	; 61
   146b8:	fe b7       	in	r31, 0x3e	; 62
   146ba:	95 83       	std	Z+5, r25	; 0x05
   146bc:	84 83       	std	Z+4, r24	; 0x04
   146be:	88 ea       	ldi	r24, 0xA8	; 168
   146c0:	98 e1       	ldi	r25, 0x18	; 24
   146c2:	a0 e0       	ldi	r26, 0x00	; 0
   146c4:	81 83       	std	Z+1, r24	; 0x01
   146c6:	92 83       	std	Z+2, r25	; 0x02
   146c8:	a3 83       	std	Z+3, r26	; 0x03
   146ca:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   146ce:	1e c0       	rjmp	.+60     	; 0x1470c <mount+0x198>
				return(0);
			}
			AMIGOp = (AMIGODiskType *) Devices[index].dev;
			if( !hpdir_set_parameters(index, argv[1] ) )
				return(-1);
			AMIGOp->HEADER.NAME = stralloc(argv[3]);
   146d0:	8e 81       	ldd	r24, Y+6	; 0x06
   146d2:	9f 81       	ldd	r25, Y+7	; 0x07
   146d4:	0e 94 1b 32 	call	0x6436	; 0x6436 <stralloc>
   146d8:	f6 01       	movw	r30, r12
   146da:	93 83       	std	Z+3, r25	; 0x03
   146dc:	82 83       	std	Z+2, r24	; 0x02
			AMIGOp->HEADER.ADDRESS  = address;
   146de:	e0 82       	st	Z, r14
			AMIGOp->HEADER.PPR = ppr;
   146e0:	e1 82       	std	Z+1, r14	; 0x01
			Devices[index].ADDRESS = address;
   146e2:	f8 01       	movw	r30, r16
   146e4:	e1 82       	std	Z+1, r14	; 0x01
			Devices[index].PPR = ppr;
			return( verify_device(index) );
   146e6:	e2 82       	std	Z+2, r14	; 0x02
   146e8:	8f 2d       	mov	r24, r15
   146ea:	4b da       	rcall	.-2922   	; 0x13b82 <verify_device>
   146ec:	12 c0       	rjmp	.+36     	; 0x14712 <mount+0x19e>
		}
#endif
		else
		{
			printf("Expected AMIGO or SS80 or CS80 for [%s]\n",argv[1]);
   146ee:	8a 81       	ldd	r24, Y+2	; 0x02
   146f0:	9b 81       	ldd	r25, Y+3	; 0x03
   146f2:	ed b7       	in	r30, 0x3d	; 61
   146f4:	fe b7       	in	r31, 0x3e	; 62
   146f6:	95 83       	std	Z+5, r25	; 0x05
   146f8:	84 83       	std	Z+4, r24	; 0x04
   146fa:	8f e7       	ldi	r24, 0x7F	; 127
   146fc:	98 e1       	ldi	r25, 0x18	; 24
   146fe:	a0 e0       	ldi	r26, 0x00	; 0
   14700:	81 83       	std	Z+1, r24	; 0x01
   14702:	92 83       	std	Z+2, r25	; 0x02
   14704:	a3 83       	std	Z+3, r26	; 0x03
   14706:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
			return(0);
		}
	}
	else 
	{
		mount_usage();
   1470a:	fa d8       	rcall	.-3596   	; 0x13900 <mount_usage>
		return(0);
   1470c:	80 e0       	ldi	r24, 0x00	; 0
   1470e:	01 c0       	rjmp	.+2      	; 0x14712 <mount+0x19e>
	}
	return(1);
   14710:	81 e0       	ldi	r24, 0x01	; 1
}
   14712:	cd b7       	in	r28, 0x3d	; 61
   14714:	de b7       	in	r29, 0x3e	; 62
   14716:	25 96       	adiw	r28, 0x05	; 5
   14718:	e8 e0       	ldi	r30, 0x08	; 8
   1471a:	0c 94 33 e7 	jmp	0x1ce66	; 0x1ce66 <__epilogue_restores__+0x14>

0001471e <hpdir_init>:
/// disk parameters from a single hpdir disk entry
///
///@return void
void hpdir_init()
{
    memset(hpdir.model,0,sizeof(hpdir.model) -1); // 1
   1471e:	8f e1       	ldi	r24, 0x1F	; 31
   14720:	e8 e7       	ldi	r30, 0x78	; 120
   14722:	ff e1       	ldi	r31, 0x1F	; 31
   14724:	df 01       	movw	r26, r30
   14726:	98 2f       	mov	r25, r24
   14728:	1d 92       	st	X+, r1
   1472a:	9a 95       	dec	r25
   1472c:	e9 f7       	brne	.-6      	; 0x14728 <hpdir_init+0xa>
// 2
    memset(hpdir.comment,0,sizeof(hpdir.comment) -1);
   1472e:	9f e3       	ldi	r25, 0x3F	; 63
   14730:	e8 e9       	ldi	r30, 0x98	; 152
   14732:	ff e1       	ldi	r31, 0x1F	; 31
   14734:	df 01       	movw	r26, r30
   14736:	1d 92       	st	X+, r1
   14738:	9a 95       	dec	r25
   1473a:	e9 f7       	brne	.-6      	; 0x14736 <hpdir_init+0x18>
    memset(hpdir.TYPE,0,sizeof(hpdir.TYPE) -1);   // 3
   1473c:	e8 ed       	ldi	r30, 0xD8	; 216
   1473e:	ff e1       	ldi	r31, 0x1F	; 31
   14740:	df 01       	movw	r26, r30
   14742:	1d 92       	st	X+, r1
   14744:	8a 95       	dec	r24
   14746:	e9 f7       	brne	.-6      	; 0x14742 <hpdir_init+0x24>
    hpdir.ID = 0;                                 // 4
   14748:	10 92 f8 1f 	sts	0x1FF8, r1	; 0x801ff8 <hpdir+0x80>
   1474c:	10 92 f9 1f 	sts	0x1FF9, r1	; 0x801ff9 <hpdir+0x81>
   14750:	10 92 fa 1f 	sts	0x1FFA, r1	; 0x801ffa <hpdir+0x82>
   14754:	10 92 fb 1f 	sts	0x1FFB, r1	; 0x801ffb <hpdir+0x83>
    hpdir.mask_stat2 = 0;                         // 5
   14758:	10 92 fc 1f 	sts	0x1FFC, r1	; 0x801ffc <hpdir+0x84>
   1475c:	10 92 fd 1f 	sts	0x1FFD, r1	; 0x801ffd <hpdir+0x85>
   14760:	10 92 fe 1f 	sts	0x1FFE, r1	; 0x801ffe <hpdir+0x86>
   14764:	10 92 ff 1f 	sts	0x1FFF, r1	; 0x801fff <hpdir+0x87>
    hpdir.id_stat2 = 0;                           // 6
   14768:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <hpdir+0x88>
   1476c:	10 92 01 20 	sts	0x2001, r1	; 0x802001 <hpdir+0x89>
   14770:	10 92 02 20 	sts	0x2002, r1	; 0x802002 <hpdir+0x8a>
   14774:	10 92 03 20 	sts	0x2003, r1	; 0x802003 <hpdir+0x8b>
    hpdir.DEVICE_NUMBER = 0;                      // 7
   14778:	10 92 04 20 	sts	0x2004, r1	; 0x802004 <hpdir+0x8c>
   1477c:	10 92 05 20 	sts	0x2005, r1	; 0x802005 <hpdir+0x8d>
   14780:	10 92 06 20 	sts	0x2006, r1	; 0x802006 <hpdir+0x8e>
   14784:	10 92 07 20 	sts	0x2007, r1	; 0x802007 <hpdir+0x8f>
    hpdir.UNITS_INSTALLED = 0x8001;               // 8
   14788:	81 e0       	ldi	r24, 0x01	; 1
   1478a:	90 e8       	ldi	r25, 0x80	; 128
   1478c:	a0 e0       	ldi	r26, 0x00	; 0
   1478e:	b0 e0       	ldi	r27, 0x00	; 0
   14790:	80 93 08 20 	sts	0x2008, r24	; 0x802008 <hpdir+0x90>
   14794:	90 93 09 20 	sts	0x2009, r25	; 0x802009 <hpdir+0x91>
   14798:	a0 93 0a 20 	sts	0x200A, r26	; 0x80200a <hpdir+0x92>
   1479c:	b0 93 0b 20 	sts	0x200B, r27	; 0x80200b <hpdir+0x93>
    hpdir.CYLINDERS = 0;                          // 9
   147a0:	10 92 0c 20 	sts	0x200C, r1	; 0x80200c <hpdir+0x94>
   147a4:	10 92 0d 20 	sts	0x200D, r1	; 0x80200d <hpdir+0x95>
   147a8:	10 92 0e 20 	sts	0x200E, r1	; 0x80200e <hpdir+0x96>
   147ac:	10 92 0f 20 	sts	0x200F, r1	; 0x80200f <hpdir+0x97>
    hpdir.HEADS= 0;                               // 10
   147b0:	10 92 10 20 	sts	0x2010, r1	; 0x802010 <hpdir+0x98>
   147b4:	10 92 11 20 	sts	0x2011, r1	; 0x802011 <hpdir+0x99>
   147b8:	10 92 12 20 	sts	0x2012, r1	; 0x802012 <hpdir+0x9a>
   147bc:	10 92 13 20 	sts	0x2013, r1	; 0x802013 <hpdir+0x9b>
    hpdir.SECTORS= 0;                             // 11
   147c0:	10 92 14 20 	sts	0x2014, r1	; 0x802014 <hpdir+0x9c>
   147c4:	10 92 15 20 	sts	0x2015, r1	; 0x802015 <hpdir+0x9d>
   147c8:	10 92 16 20 	sts	0x2016, r1	; 0x802016 <hpdir+0x9e>
   147cc:	10 92 17 20 	sts	0x2017, r1	; 0x802017 <hpdir+0x9f>
    hpdir.BYTES_PER_SECTOR = 0;                   // 12
   147d0:	10 92 18 20 	sts	0x2018, r1	; 0x802018 <hpdir+0xa0>
   147d4:	10 92 19 20 	sts	0x2019, r1	; 0x802019 <hpdir+0xa1>
   147d8:	10 92 1a 20 	sts	0x201A, r1	; 0x80201a <hpdir+0xa2>
   147dc:	10 92 1b 20 	sts	0x201B, r1	; 0x80201b <hpdir+0xa3>
    hpdir.INTERLEAVE = 0;                         // 13
   147e0:	10 92 1c 20 	sts	0x201C, r1	; 0x80201c <hpdir+0xa4>
   147e4:	10 92 1d 20 	sts	0x201D, r1	; 0x80201d <hpdir+0xa5>
   147e8:	10 92 1e 20 	sts	0x201E, r1	; 0x80201e <hpdir+0xa6>
   147ec:	10 92 1f 20 	sts	0x201F, r1	; 0x80201f <hpdir+0xa7>
    hpdir.FIXED = 1;                              // 14 ALWAYS 1
   147f0:	81 e0       	ldi	r24, 0x01	; 1
   147f2:	90 e0       	ldi	r25, 0x00	; 0
   147f4:	a0 e0       	ldi	r26, 0x00	; 0
   147f6:	b0 e0       	ldi	r27, 0x00	; 0
   147f8:	80 93 20 20 	sts	0x2020, r24	; 0x802020 <hpdir+0xa8>
   147fc:	90 93 21 20 	sts	0x2021, r25	; 0x802021 <hpdir+0xa9>
   14800:	a0 93 22 20 	sts	0x2022, r26	; 0x802022 <hpdir+0xaa>
   14804:	b0 93 23 20 	sts	0x2023, r27	; 0x802023 <hpdir+0xab>

// Computed values
    hpdir.BLOCKS = 0;
   14808:	10 92 24 20 	sts	0x2024, r1	; 0x802024 <hpdir+0xac>
   1480c:	10 92 25 20 	sts	0x2025, r1	; 0x802025 <hpdir+0xad>
   14810:	10 92 26 20 	sts	0x2026, r1	; 0x802026 <hpdir+0xae>
   14814:	10 92 27 20 	sts	0x2027, r1	; 0x802027 <hpdir+0xaf>
   14818:	08 95       	ret

0001481a <lif_dir_count>:
///@param[in] blocks: size of LIF image in total
///
///@return Size of LIF directory in blocks
long lif_dir_count(long blocks)
{
    int scale = 0;
   1481a:	20 e0       	ldi	r18, 0x00	; 0
   1481c:	30 e0       	ldi	r19, 0x00	; 0
    long num = 1;
    while(blocks)
   1481e:	61 15       	cp	r22, r1
   14820:	71 05       	cpc	r23, r1
   14822:	81 05       	cpc	r24, r1
   14824:	91 05       	cpc	r25, r1
   14826:	39 f0       	breq	.+14     	; 0x14836 <lif_dir_count+0x1c>
    {
        scale++;
   14828:	2f 5f       	subi	r18, 0xFF	; 255
   1482a:	3f 4f       	sbci	r19, 0xFF	; 255
        blocks >>= 1;
   1482c:	95 95       	asr	r25
   1482e:	87 95       	ror	r24
   14830:	77 95       	ror	r23
   14832:	67 95       	ror	r22
   14834:	f4 cf       	rjmp	.-24     	; 0x1481e <lif_dir_count+0x4>
    }
    scale>>=1;
   14836:	35 95       	asr	r19
   14838:	27 95       	ror	r18
///
///@return Size of LIF directory in blocks
long lif_dir_count(long blocks)
{
    int scale = 0;
    long num = 1;
   1483a:	61 e0       	ldi	r22, 0x01	; 1
   1483c:	70 e0       	ldi	r23, 0x00	; 0
   1483e:	80 e0       	ldi	r24, 0x00	; 0
   14840:	90 e0       	ldi	r25, 0x00	; 0
    {
        scale++;
        blocks >>= 1;
    }
    scale>>=1;
    while(scale--)
   14842:	21 50       	subi	r18, 0x01	; 1
   14844:	31 09       	sbc	r19, r1
   14846:	28 f0       	brcs	.+10     	; 0x14852 <lif_dir_count+0x38>
        num <<=1;
   14848:	66 0f       	add	r22, r22
   1484a:	77 1f       	adc	r23, r23
   1484c:	88 1f       	adc	r24, r24
   1484e:	99 1f       	adc	r25, r25
   14850:	f8 cf       	rjmp	.-16     	; 0x14842 <lif_dir_count+0x28>
    return(num);
}
   14852:	08 95       	ret

00014854 <hpdir_find_drive>:
///
///@param[in] model: model string
///
///@return 1 on sucess or 0 on fail
int hpdir_find_drive(char *model, int list, int verbose)
{
   14854:	2f 92       	push	r2
   14856:	3f 92       	push	r3
   14858:	4f 92       	push	r4
   1485a:	5f 92       	push	r5
   1485c:	6f 92       	push	r6
   1485e:	8f 92       	push	r8
   14860:	9f 92       	push	r9
   14862:	af 92       	push	r10
   14864:	bf 92       	push	r11
   14866:	cf 92       	push	r12
   14868:	df 92       	push	r13
   1486a:	ef 92       	push	r14
   1486c:	ff 92       	push	r15
   1486e:	0f 93       	push	r16
   14870:	1f 93       	push	r17
   14872:	cf 93       	push	r28
   14874:	df 93       	push	r29
   14876:	cd b7       	in	r28, 0x3d	; 61
   14878:	de b7       	in	r29, 0x3e	; 62
   1487a:	c9 58       	subi	r28, 0x89	; 137
   1487c:	d1 40       	sbci	r29, 0x01	; 1
   1487e:	0f b6       	in	r0, 0x3f	; 63
   14880:	f8 94       	cli
   14882:	de bf       	out	0x3e, r29	; 62
   14884:	0f be       	out	0x3f, r0	; 63
   14886:	cd bf       	out	0x3d, r28	; 61
   14888:	6c 01       	movw	r12, r24
   1488a:	c8 57       	subi	r28, 0x78	; 120
   1488c:	de 4f       	sbci	r29, 0xFE	; 254
   1488e:	79 83       	std	Y+1, r23	; 0x01
   14890:	68 83       	st	Y, r22
   14892:	c8 58       	subi	r28, 0x88	; 136
   14894:	d1 40       	sbci	r29, 0x01	; 1
   14896:	5a 01       	movw	r10, r20
    FILE *cfg;
    char *ptr;
    char str[256];
    char token[128];

    hpdir_init();
   14898:	42 df       	rcall	.-380    	; 0x1471e <hpdir_init>

    cfg = fopen("hpdir.ini","rb");
   1489a:	6e ef       	ldi	r22, 0xFE	; 254
   1489c:	78 e0       	ldi	r23, 0x08	; 8
   1489e:	87 e5       	ldi	r24, 0x57	; 87
   148a0:	90 e1       	ldi	r25, 0x10	; 16
   148a2:	0e 94 6b 7e 	call	0xfcd6	; 0xfcd6 <fopen>
   148a6:	7c 01       	movw	r14, r24

#ifndef LIF_STAND_ALONE
    if(cfg == NULL)
   148a8:	89 2b       	or	r24, r25
   148aa:	49 f4       	brne	.+18     	; 0x148be <hpdir_find_drive+0x6a>
        cfg = fopen("/hpdir.ini","rb");
   148ac:	6e ef       	ldi	r22, 0xFE	; 254
   148ae:	78 e0       	ldi	r23, 0x08	; 8
   148b0:	86 e5       	ldi	r24, 0x56	; 86
   148b2:	90 e1       	ldi	r25, 0x10	; 16
   148b4:	0e 94 6b 7e 	call	0xfcd6	; 0xfcd6 <fopen>
   148b8:	7c 01       	movw	r14, r24
        strcat  (name, "/hpdir.ini");
        cfg = fopen(name, "rb");
    }
#endif

    if(cfg == NULL)
   148ba:	89 2b       	or	r24, r25
   148bc:	51 f0       	breq	.+20     	; 0x148d2 <hpdir_find_drive+0x7e>
// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);

        if(MATCHI(token,"[driveinfo]"))
        {
            driveinfo = 1;
   148be:	21 2c       	mov	r2, r1
   148c0:	31 2c       	mov	r3, r1

        if(*ptr == '[' && driveinfo == 1 )
            break;

// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);
   148c2:	8e 01       	movw	r16, r28
   148c4:	08 5f       	subi	r16, 0xF8	; 248
   148c6:	1e 4f       	sbci	r17, 0xFE	; 254
        if( driveinfo != 1)
            continue;

        if(list)
        {
            printf("%s %s\n", token, ptr);
   148c8:	83 e9       	ldi	r24, 0x93	; 147
   148ca:	91 e2       	ldi	r25, 0x21	; 33
   148cc:	2c 01       	movw	r4, r24
   148ce:	61 2c       	mov	r6, r1
   148d0:	1e c0       	rjmp	.+60     	; 0x1490e <hpdir_find_drive+0xba>
    }
#endif

    if(cfg == NULL)
    {
        if(verbose)
   148d2:	ab 28       	or	r10, r11
   148d4:	09 f4       	brne	.+2      	; 0x148d8 <hpdir_find_drive+0x84>
   148d6:	79 c1       	rjmp	.+754    	; 0x14bca <hpdir_find_drive+0x376>
            printf("Error: hpdir.ini not found!\n");
   148d8:	8a e9       	ldi	r24, 0x9A	; 154
   148da:	91 e2       	ldi	r25, 0x21	; 33
   148dc:	a0 e0       	ldi	r26, 0x00	; 0
   148de:	ed b7       	in	r30, 0x3d	; 61
   148e0:	fe b7       	in	r31, 0x3e	; 62
   148e2:	81 83       	std	Z+1, r24	; 0x01
   148e4:	92 83       	std	Z+2, r25	; 0x02
   148e6:	a3 83       	std	Z+3, r26	; 0x03
   148e8:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   148ec:	6e c1       	rjmp	.+732    	; 0x14bca <hpdir_find_drive+0x376>
    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
        errors = 0;
        ptr = str;

        trim_tail(ptr);
   148ee:	ce 01       	movw	r24, r28
   148f0:	08 96       	adiw	r24, 0x08	; 8
   148f2:	0e 94 4b 32 	call	0x6496	; 0x6496 <trim_tail>
        ptr = skipspaces(ptr);
   148f6:	ce 01       	movw	r24, r28
   148f8:	08 96       	adiw	r24, 0x08	; 8
   148fa:	0e 94 5b 32 	call	0x64b6	; 0x64b6 <skipspaces>

        len = strlen(ptr);
   148fe:	fc 01       	movw	r30, r24
   14900:	01 90       	ld	r0, Z+
   14902:	00 20       	and	r0, r0
   14904:	e9 f7       	brne	.-6      	; 0x14900 <hpdir_find_drive+0xac>
   14906:	31 97       	sbiw	r30, 0x01	; 1
        if(!len)
   14908:	8e 17       	cp	r24, r30
   1490a:	9f 07       	cpc	r25, r31
   1490c:	51 f4       	brne	.+20     	; 0x14922 <hpdir_find_drive+0xce>
        return(0);
    }

// printf("Searching /hpdir.ini for model:%s\n", model);

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   1490e:	a7 01       	movw	r20, r14
   14910:	6e ef       	ldi	r22, 0xFE	; 254
   14912:	70 e0       	ldi	r23, 0x00	; 0
   14914:	ce 01       	movw	r24, r28
   14916:	08 96       	adiw	r24, 0x08	; 8
   14918:	0e 94 83 76 	call	0xed06	; 0xed06 <fgets>
   1491c:	89 2b       	or	r24, r25
   1491e:	39 f7       	brne	.-50     	; 0x148ee <hpdir_find_drive+0x9a>
   14920:	0c c0       	rjmp	.+24     	; 0x1493a <hpdir_find_drive+0xe6>
        len = strlen(ptr);
        if(!len)
            continue;

// Skip comments
        if(*ptr == ';' || *ptr == '#' )
   14922:	fc 01       	movw	r30, r24
   14924:	20 81       	ld	r18, Z
   14926:	2b 33       	cpi	r18, 0x3B	; 59
   14928:	91 f3       	breq	.-28     	; 0x1490e <hpdir_find_drive+0xba>
   1492a:	23 32       	cpi	r18, 0x23	; 35
   1492c:	81 f3       	breq	.-32     	; 0x1490e <hpdir_find_drive+0xba>
            continue;

        if(*ptr == '[' && driveinfo == 1 )
   1492e:	2b 35       	cpi	r18, 0x5B	; 91
   14930:	39 f4       	brne	.+14     	; 0x14940 <hpdir_find_drive+0xec>
   14932:	f1 e0       	ldi	r31, 0x01	; 1
   14934:	2f 16       	cp	r2, r31
   14936:	31 04       	cpc	r3, r1
   14938:	19 f4       	brne	.+6      	; 0x14940 <hpdir_find_drive+0xec>
int hpdir_find_drive(char *model, int list, int verbose)
{
    int len;
    int errors = 0;
    int driveinfo=0;
    int found = 0;
   1493a:	00 e0       	ldi	r16, 0x00	; 0
   1493c:	10 e0       	ldi	r17, 0x00	; 0
   1493e:	32 c1       	rjmp	.+612    	; 0x14ba4 <hpdir_find_drive+0x350>

        if(*ptr == '[' && driveinfo == 1 )
            break;

// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);
   14940:	4e e7       	ldi	r20, 0x7E	; 126
   14942:	50 e0       	ldi	r21, 0x00	; 0
   14944:	b8 01       	movw	r22, r16
   14946:	0e 94 2d 33 	call	0x665a	; 0x665a <get_token>
   1494a:	4c 01       	movw	r8, r24

        if(MATCHI(token,"[driveinfo]"))
   1494c:	61 e6       	ldi	r22, 0x61	; 97
   1494e:	70 e1       	ldi	r23, 0x10	; 16
   14950:	c8 01       	movw	r24, r16
   14952:	0e 94 79 32 	call	0x64f2	; 0x64f2 <MATCHI>
   14956:	89 2b       	or	r24, r25
   14958:	21 f0       	breq	.+8      	; 0x14962 <hpdir_find_drive+0x10e>
        {
            driveinfo = 1;
   1495a:	22 24       	eor	r2, r2
   1495c:	23 94       	inc	r2
   1495e:	31 2c       	mov	r3, r1
   14960:	d6 cf       	rjmp	.-84     	; 0x1490e <hpdir_find_drive+0xba>
            continue;
        }

        if( driveinfo != 1)
   14962:	21 e0       	ldi	r18, 0x01	; 1
   14964:	22 16       	cp	r2, r18
   14966:	31 04       	cpc	r3, r1
   14968:	91 f6       	brne	.-92     	; 0x1490e <hpdir_find_drive+0xba>
            continue;

        if(list)
   1496a:	c8 57       	subi	r28, 0x78	; 120
   1496c:	de 4f       	sbci	r29, 0xFE	; 254
   1496e:	88 81       	ld	r24, Y
   14970:	99 81       	ldd	r25, Y+1	; 0x01
   14972:	c8 58       	subi	r28, 0x88	; 136
   14974:	d1 40       	sbci	r29, 0x01	; 1
   14976:	89 2b       	or	r24, r25
   14978:	61 f0       	breq	.+24     	; 0x14992 <hpdir_find_drive+0x13e>
        {
            printf("%s %s\n", token, ptr);
   1497a:	ed b7       	in	r30, 0x3d	; 61
   1497c:	fe b7       	in	r31, 0x3e	; 62
   1497e:	97 82       	std	Z+7, r9	; 0x07
   14980:	86 82       	std	Z+6, r8	; 0x06
   14982:	15 83       	std	Z+5, r17	; 0x05
   14984:	04 83       	std	Z+4, r16	; 0x04
   14986:	41 82       	std	Z+1, r4	; 0x01
   14988:	52 82       	std	Z+2, r5	; 0x02
   1498a:	63 82       	std	Z+3, r6	; 0x03
   1498c:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
            continue;
   14990:	be cf       	rjmp	.-132    	; 0x1490e <hpdir_find_drive+0xba>
        }

        if ( ! MATCHI(model,token) )
   14992:	b8 01       	movw	r22, r16
   14994:	c6 01       	movw	r24, r12
   14996:	0e 94 79 32 	call	0x64f2	; 0x64f2 <MATCHI>
   1499a:	89 2b       	or	r24, r25
            continue;

        hpdir_init();
   1499c:	f1 f2       	breq	.-68     	; 0x1495a <hpdir_find_drive+0x106>
   1499e:	bf de       	rcall	.-642    	; 0x1471e <hpdir_init>

        if(verbose)
   149a0:	a1 14       	cp	r10, r1
   149a2:	b1 04       	cpc	r11, r1
   149a4:	61 f0       	breq	.+24     	; 0x149be <hpdir_find_drive+0x16a>
            printf("Model: %s found in hpdir.ini\n", model);
   149a6:	ed b7       	in	r30, 0x3d	; 61
   149a8:	fe b7       	in	r31, 0x3e	; 62
   149aa:	d5 82       	std	Z+5, r13	; 0x05
   149ac:	c4 82       	std	Z+4, r12	; 0x04
   149ae:	85 e7       	ldi	r24, 0x75	; 117
   149b0:	91 e2       	ldi	r25, 0x21	; 33
   149b2:	a0 e0       	ldi	r26, 0x00	; 0
   149b4:	81 83       	std	Z+1, r24	; 0x01
   149b6:	92 83       	std	Z+2, r25	; 0x02
   149b8:	a3 83       	std	Z+3, r26	; 0x03
   149ba:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>

// 1 Model
        strncpy(hpdir.model,token,sizeof(hpdir.model)-2);
   149be:	4e e1       	ldi	r20, 0x1E	; 30
   149c0:	50 e0       	ldi	r21, 0x00	; 0
   149c2:	b8 01       	movw	r22, r16
   149c4:	88 e7       	ldi	r24, 0x78	; 120
   149c6:	9f e1       	ldi	r25, 0x1F	; 31
   149c8:	0e 94 78 31 	call	0x62f0	; 0x62f0 <strncpy>

// =
        ptr = get_token(ptr, token,     sizeof(token)-2);
   149cc:	4e e7       	ldi	r20, 0x7E	; 126
   149ce:	50 e0       	ldi	r21, 0x00	; 0
   149d0:	b8 01       	movw	r22, r16
   149d2:	c4 01       	movw	r24, r8
   149d4:	0e 94 2d 33 	call	0x665a	; 0x665a <get_token>

// 2 Comment
        ptr = get_token(ptr, hpdir.comment, sizeof(hpdir.comment)-2);
   149d8:	4e e3       	ldi	r20, 0x3E	; 62
   149da:	50 e0       	ldi	r21, 0x00	; 0
   149dc:	68 e9       	ldi	r22, 0x98	; 152
   149de:	7f e1       	ldi	r23, 0x1F	; 31
   149e0:	0e 94 2d 33 	call	0x665a	; 0x665a <get_token>

// 3 AMIGO/SS80/CS80
        ptr = get_token(ptr, hpdir.TYPE,  sizeof(hpdir.TYPE)-2);
   149e4:	4e e1       	ldi	r20, 0x1E	; 30
   149e6:	50 e0       	ldi	r21, 0x00	; 0
   149e8:	68 ed       	ldi	r22, 0xD8	; 216
   149ea:	7f e1       	ldi	r23, 0x1F	; 31
   149ec:	0e 94 2d 33 	call	0x665a	; 0x665a <get_token>

// 4 Identify ID
        ptr = get_token(ptr, token,         sizeof(token)-2);
   149f0:	4e e7       	ldi	r20, 0x7E	; 126
   149f2:	50 e0       	ldi	r21, 0x00	; 0
   149f4:	b8 01       	movw	r22, r16
   149f6:	0e 94 2d 33 	call	0x665a	; 0x665a <get_token>
   149fa:	4c 01       	movw	r8, r24
        hpdir.ID = get_value(token);
   149fc:	c8 01       	movw	r24, r16
   149fe:	0e 94 70 33 	call	0x66e0	; 0x66e0 <get_value>
   14a02:	60 93 f8 1f 	sts	0x1FF8, r22	; 0x801ff8 <hpdir+0x80>
   14a06:	70 93 f9 1f 	sts	0x1FF9, r23	; 0x801ff9 <hpdir+0x81>
   14a0a:	80 93 fa 1f 	sts	0x1FFA, r24	; 0x801ffa <hpdir+0x82>
   14a0e:	90 93 fb 1f 	sts	0x1FFB, r25	; 0x801ffb <hpdir+0x83>

// 5 MASK STAT 2
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14a12:	4e e7       	ldi	r20, 0x7E	; 126
   14a14:	50 e0       	ldi	r21, 0x00	; 0
   14a16:	b8 01       	movw	r22, r16
   14a18:	c4 01       	movw	r24, r8
   14a1a:	0e 94 2d 33 	call	0x665a	; 0x665a <get_token>
   14a1e:	4c 01       	movw	r8, r24
        hpdir.mask_stat2 = get_value(token);
   14a20:	c8 01       	movw	r24, r16
   14a22:	0e 94 70 33 	call	0x66e0	; 0x66e0 <get_value>
   14a26:	60 93 fc 1f 	sts	0x1FFC, r22	; 0x801ffc <hpdir+0x84>
   14a2a:	70 93 fd 1f 	sts	0x1FFD, r23	; 0x801ffd <hpdir+0x85>
   14a2e:	80 93 fe 1f 	sts	0x1FFE, r24	; 0x801ffe <hpdir+0x86>
   14a32:	90 93 ff 1f 	sts	0x1FFF, r25	; 0x801fff <hpdir+0x87>

// 6 STAT2
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14a36:	4e e7       	ldi	r20, 0x7E	; 126
   14a38:	50 e0       	ldi	r21, 0x00	; 0
   14a3a:	b8 01       	movw	r22, r16
   14a3c:	c4 01       	movw	r24, r8
   14a3e:	0e 94 2d 33 	call	0x665a	; 0x665a <get_token>
   14a42:	4c 01       	movw	r8, r24
        hpdir.id_stat2 = get_value(token);
   14a44:	c8 01       	movw	r24, r16
   14a46:	0e 94 70 33 	call	0x66e0	; 0x66e0 <get_value>
   14a4a:	60 93 00 20 	sts	0x2000, r22	; 0x802000 <hpdir+0x88>
   14a4e:	70 93 01 20 	sts	0x2001, r23	; 0x802001 <hpdir+0x89>
   14a52:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <hpdir+0x8a>
   14a56:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <hpdir+0x8b>

// 7 BCD include model number
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14a5a:	4e e7       	ldi	r20, 0x7E	; 126
   14a5c:	50 e0       	ldi	r21, 0x00	; 0
   14a5e:	b8 01       	movw	r22, r16
   14a60:	c4 01       	movw	r24, r8
   14a62:	0e 94 2d 33 	call	0x665a	; 0x665a <get_token>
   14a66:	4c 01       	movw	r8, r24
        hpdir.DEVICE_NUMBER = get_value(token);
   14a68:	c8 01       	movw	r24, r16
   14a6a:	0e 94 70 33 	call	0x66e0	; 0x66e0 <get_value>
   14a6e:	60 93 04 20 	sts	0x2004, r22	; 0x802004 <hpdir+0x8c>
   14a72:	70 93 05 20 	sts	0x2005, r23	; 0x802005 <hpdir+0x8d>
   14a76:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <hpdir+0x8e>
   14a7a:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <hpdir+0x8f>

// 8 Units installed
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14a7e:	4e e7       	ldi	r20, 0x7E	; 126
   14a80:	50 e0       	ldi	r21, 0x00	; 0
   14a82:	b8 01       	movw	r22, r16
   14a84:	c4 01       	movw	r24, r8
   14a86:	0e 94 2d 33 	call	0x665a	; 0x665a <get_token>
   14a8a:	4c 01       	movw	r8, r24
        hpdir.UNITS_INSTALLED = get_value(token);
   14a8c:	c8 01       	movw	r24, r16
   14a8e:	0e 94 70 33 	call	0x66e0	; 0x66e0 <get_value>
   14a92:	60 93 08 20 	sts	0x2008, r22	; 0x802008 <hpdir+0x90>
   14a96:	70 93 09 20 	sts	0x2009, r23	; 0x802009 <hpdir+0x91>
   14a9a:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <hpdir+0x92>
   14a9e:	90 93 0b 20 	sts	0x200B, r25	; 0x80200b <hpdir+0x93>

// 9 Cylinders
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14aa2:	4e e7       	ldi	r20, 0x7E	; 126
   14aa4:	50 e0       	ldi	r21, 0x00	; 0
   14aa6:	b8 01       	movw	r22, r16
   14aa8:	c4 01       	movw	r24, r8
   14aaa:	0e 94 2d 33 	call	0x665a	; 0x665a <get_token>
   14aae:	4c 01       	movw	r8, r24
        hpdir.CYLINDERS = get_value(token);
   14ab0:	c8 01       	movw	r24, r16
   14ab2:	0e 94 70 33 	call	0x66e0	; 0x66e0 <get_value>
   14ab6:	60 93 0c 20 	sts	0x200C, r22	; 0x80200c <hpdir+0x94>
   14aba:	70 93 0d 20 	sts	0x200D, r23	; 0x80200d <hpdir+0x95>
   14abe:	80 93 0e 20 	sts	0x200E, r24	; 0x80200e <hpdir+0x96>
   14ac2:	90 93 0f 20 	sts	0x200F, r25	; 0x80200f <hpdir+0x97>

// 10 Heads
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14ac6:	4e e7       	ldi	r20, 0x7E	; 126
   14ac8:	50 e0       	ldi	r21, 0x00	; 0
   14aca:	b8 01       	movw	r22, r16
   14acc:	c4 01       	movw	r24, r8
   14ace:	0e 94 2d 33 	call	0x665a	; 0x665a <get_token>
   14ad2:	4c 01       	movw	r8, r24
        hpdir.HEADS = get_value(token);
   14ad4:	c8 01       	movw	r24, r16
   14ad6:	0e 94 70 33 	call	0x66e0	; 0x66e0 <get_value>
   14ada:	60 93 10 20 	sts	0x2010, r22	; 0x802010 <hpdir+0x98>
   14ade:	70 93 11 20 	sts	0x2011, r23	; 0x802011 <hpdir+0x99>
   14ae2:	80 93 12 20 	sts	0x2012, r24	; 0x802012 <hpdir+0x9a>
   14ae6:	90 93 13 20 	sts	0x2013, r25	; 0x802013 <hpdir+0x9b>

// 11 Sectors
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14aea:	4e e7       	ldi	r20, 0x7E	; 126
   14aec:	50 e0       	ldi	r21, 0x00	; 0
   14aee:	b8 01       	movw	r22, r16
   14af0:	c4 01       	movw	r24, r8
   14af2:	0e 94 2d 33 	call	0x665a	; 0x665a <get_token>
   14af6:	4c 01       	movw	r8, r24
        hpdir.SECTORS = get_value(token);
   14af8:	c8 01       	movw	r24, r16
   14afa:	0e 94 70 33 	call	0x66e0	; 0x66e0 <get_value>
   14afe:	60 93 14 20 	sts	0x2014, r22	; 0x802014 <hpdir+0x9c>
   14b02:	70 93 15 20 	sts	0x2015, r23	; 0x802015 <hpdir+0x9d>
   14b06:	80 93 16 20 	sts	0x2016, r24	; 0x802016 <hpdir+0x9e>
   14b0a:	90 93 17 20 	sts	0x2017, r25	; 0x802017 <hpdir+0x9f>

// 12 Bytes Per Block/Sector
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14b0e:	4e e7       	ldi	r20, 0x7E	; 126
   14b10:	50 e0       	ldi	r21, 0x00	; 0
   14b12:	b8 01       	movw	r22, r16
   14b14:	c4 01       	movw	r24, r8
   14b16:	0e 94 2d 33 	call	0x665a	; 0x665a <get_token>
   14b1a:	4c 01       	movw	r8, r24
        hpdir.BYTES_PER_SECTOR = get_value(token);
   14b1c:	c8 01       	movw	r24, r16
   14b1e:	0e 94 70 33 	call	0x66e0	; 0x66e0 <get_value>
   14b22:	60 93 18 20 	sts	0x2018, r22	; 0x802018 <hpdir+0xa0>
   14b26:	70 93 19 20 	sts	0x2019, r23	; 0x802019 <hpdir+0xa1>
   14b2a:	80 93 1a 20 	sts	0x201A, r24	; 0x80201a <hpdir+0xa2>
   14b2e:	90 93 1b 20 	sts	0x201B, r25	; 0x80201b <hpdir+0xa3>

// 13 Interleave
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14b32:	4e e7       	ldi	r20, 0x7E	; 126
   14b34:	50 e0       	ldi	r21, 0x00	; 0
   14b36:	b8 01       	movw	r22, r16
   14b38:	c4 01       	movw	r24, r8
   14b3a:	0e 94 2d 33 	call	0x665a	; 0x665a <get_token>
        hpdir.INTERLEAVE = get_value(token);
   14b3e:	c8 01       	movw	r24, r16
   14b40:	0e 94 70 33 	call	0x66e0	; 0x66e0 <get_value>
   14b44:	60 93 1c 20 	sts	0x201C, r22	; 0x80201c <hpdir+0xa4>
   14b48:	70 93 1d 20 	sts	0x201D, r23	; 0x80201d <hpdir+0xa5>
   14b4c:	80 93 1e 20 	sts	0x201E, r24	; 0x80201e <hpdir+0xa6>
   14b50:	90 93 1f 20 	sts	0x201F, r25	; 0x80201f <hpdir+0xa7>

// Computed values
        hpdir.BLOCKS = ( hpdir.CYLINDERS * hpdir.HEADS * hpdir.SECTORS );
   14b54:	20 91 0c 20 	lds	r18, 0x200C	; 0x80200c <hpdir+0x94>
   14b58:	30 91 0d 20 	lds	r19, 0x200D	; 0x80200d <hpdir+0x95>
   14b5c:	40 91 0e 20 	lds	r20, 0x200E	; 0x80200e <hpdir+0x96>
   14b60:	50 91 0f 20 	lds	r21, 0x200F	; 0x80200f <hpdir+0x97>
   14b64:	60 91 10 20 	lds	r22, 0x2010	; 0x802010 <hpdir+0x98>
   14b68:	70 91 11 20 	lds	r23, 0x2011	; 0x802011 <hpdir+0x99>
   14b6c:	80 91 12 20 	lds	r24, 0x2012	; 0x802012 <hpdir+0x9a>
   14b70:	90 91 13 20 	lds	r25, 0x2013	; 0x802013 <hpdir+0x9b>
   14b74:	0e 94 5e e6 	call	0x1ccbc	; 0x1ccbc <__mulsi3>
   14b78:	9b 01       	movw	r18, r22
   14b7a:	ac 01       	movw	r20, r24
   14b7c:	60 91 14 20 	lds	r22, 0x2014	; 0x802014 <hpdir+0x9c>
   14b80:	70 91 15 20 	lds	r23, 0x2015	; 0x802015 <hpdir+0x9d>
   14b84:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <hpdir+0x9e>
   14b88:	90 91 17 20 	lds	r25, 0x2017	; 0x802017 <hpdir+0x9f>
   14b8c:	0e 94 5e e6 	call	0x1ccbc	; 0x1ccbc <__mulsi3>
   14b90:	60 93 24 20 	sts	0x2024, r22	; 0x802024 <hpdir+0xac>
   14b94:	70 93 25 20 	sts	0x2025, r23	; 0x802025 <hpdir+0xad>
   14b98:	80 93 26 20 	sts	0x2026, r24	; 0x802026 <hpdir+0xae>
   14b9c:	90 93 27 20 	sts	0x2027, r25	; 0x802027 <hpdir+0xaf>
        {
            if(verbose)
                printf("Error /hpdir.ini parsing\n");
            break;
        }
        found = 1;
   14ba0:	01 e0       	ldi	r16, 0x01	; 1
   14ba2:	10 e0       	ldi	r17, 0x00	; 0
        break;

    }                                             // while
    fclose(cfg);
   14ba4:	c7 01       	movw	r24, r14
   14ba6:	0e 94 15 7d 	call	0xfa2a	; 0xfa2a <fclose>
	if(verbose && !found)
   14baa:	ab 28       	or	r10, r11
   14bac:	81 f0       	breq	.+32     	; 0x14bce <hpdir_find_drive+0x37a>
   14bae:	01 2b       	or	r16, r17
   14bb0:	81 f4       	brne	.+32     	; 0x14bd2 <hpdir_find_drive+0x37e>
		printf("Model: %s NOT found in hpdir.ini\n", model);
   14bb2:	ed b7       	in	r30, 0x3d	; 61
   14bb4:	fe b7       	in	r31, 0x3e	; 62
   14bb6:	d5 82       	std	Z+5, r13	; 0x05
   14bb8:	c4 82       	std	Z+4, r12	; 0x04
   14bba:	83 e5       	ldi	r24, 0x53	; 83
   14bbc:	91 e2       	ldi	r25, 0x21	; 33
   14bbe:	a0 e0       	ldi	r26, 0x00	; 0
   14bc0:	81 83       	std	Z+1, r24	; 0x01
   14bc2:	92 83       	std	Z+2, r25	; 0x02
   14bc4:	a3 83       	std	Z+3, r26	; 0x03
   14bc6:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>

    if(cfg == NULL)
    {
        if(verbose)
            printf("Error: hpdir.ini not found!\n");
        return(0);
   14bca:	80 e0       	ldi	r24, 0x00	; 0
   14bcc:	03 c0       	rjmp	.+6      	; 0x14bd4 <hpdir_find_drive+0x380>
   14bce:	c8 01       	movw	r24, r16
   14bd0:	02 c0       	rjmp	.+4      	; 0x14bd6 <hpdir_find_drive+0x382>
   14bd2:	81 e0       	ldi	r24, 0x01	; 1
   14bd4:	90 e0       	ldi	r25, 0x00	; 0
    }                                             // while
    fclose(cfg);
	if(verbose && !found)
		printf("Model: %s NOT found in hpdir.ini\n", model);
    return(found);
}
   14bd6:	c7 57       	subi	r28, 0x77	; 119
   14bd8:	de 4f       	sbci	r29, 0xFE	; 254
   14bda:	0f b6       	in	r0, 0x3f	; 63
   14bdc:	f8 94       	cli
   14bde:	de bf       	out	0x3e, r29	; 62
   14be0:	0f be       	out	0x3f, r0	; 63
   14be2:	cd bf       	out	0x3d, r28	; 61
   14be4:	df 91       	pop	r29
   14be6:	cf 91       	pop	r28
   14be8:	1f 91       	pop	r17
   14bea:	0f 91       	pop	r16
   14bec:	ff 90       	pop	r15
   14bee:	ef 90       	pop	r14
   14bf0:	df 90       	pop	r13
   14bf2:	cf 90       	pop	r12
   14bf4:	bf 90       	pop	r11
   14bf6:	af 90       	pop	r10
   14bf8:	9f 90       	pop	r9
   14bfa:	8f 90       	pop	r8
   14bfc:	6f 90       	pop	r6
   14bfe:	5f 90       	pop	r5
   14c00:	4f 90       	pop	r4
   14c02:	3f 90       	pop	r3
   14c04:	2f 90       	pop	r2
   14c06:	08 95       	ret

00014c08 <SS80ControllerPack>:
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
        printf("[SS80 Increment to (%lXH)]\n",
            (long) SS80_Blocks_to_Bytes(SS80s->AddressBlocks));
#endif
    return(0);
}
   14c08:	0f 93       	push	r16
   14c0a:	1f 93       	push	r17
   14c0c:	25 e0       	ldi	r18, 0x05	; 5
   14c0e:	30 e0       	ldi	r19, 0x00	; 0
   14c10:	fc 01       	movw	r30, r24
   14c12:	31 83       	std	Z+1, r19	; 0x01
   14c14:	20 83       	st	Z, r18
   14c16:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14c1a:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14c1e:	00 85       	ldd	r16, Z+8	; 0x08
   14c20:	11 85       	ldd	r17, Z+9	; 0x09
   14c22:	20 e0       	ldi	r18, 0x00	; 0
   14c24:	30 e0       	ldi	r19, 0x00	; 0
   14c26:	42 e0       	ldi	r20, 0x02	; 2
   14c28:	50 e0       	ldi	r21, 0x00	; 0
   14c2a:	60 e0       	ldi	r22, 0x00	; 0
   14c2c:	70 e0       	ldi	r23, 0x00	; 0
   14c2e:	88 e9       	ldi	r24, 0x98	; 152
   14c30:	99 e1       	ldi	r25, 0x19	; 25
   14c32:	0e 94 7f c0 	call	0x180fe	; 0x180fe <V2B_MSB>
   14c36:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14c3a:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14c3e:	02 85       	ldd	r16, Z+10	; 0x0a
   14c40:	13 85       	ldd	r17, Z+11	; 0x0b
   14c42:	20 e0       	ldi	r18, 0x00	; 0
   14c44:	30 e0       	ldi	r19, 0x00	; 0
   14c46:	42 e0       	ldi	r20, 0x02	; 2
   14c48:	50 e0       	ldi	r21, 0x00	; 0
   14c4a:	61 e0       	ldi	r22, 0x01	; 1
   14c4c:	70 e0       	ldi	r23, 0x00	; 0
   14c4e:	88 e9       	ldi	r24, 0x98	; 152
   14c50:	99 e1       	ldi	r25, 0x19	; 25
   14c52:	0e 94 7f c0 	call	0x180fe	; 0x180fe <V2B_MSB>
   14c56:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14c5a:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14c5e:	04 85       	ldd	r16, Z+12	; 0x0c
   14c60:	10 e0       	ldi	r17, 0x00	; 0
   14c62:	20 e0       	ldi	r18, 0x00	; 0
   14c64:	30 e0       	ldi	r19, 0x00	; 0
   14c66:	41 e0       	ldi	r20, 0x01	; 1
   14c68:	50 e0       	ldi	r21, 0x00	; 0
   14c6a:	64 e0       	ldi	r22, 0x04	; 4
   14c6c:	70 e0       	ldi	r23, 0x00	; 0
   14c6e:	88 e9       	ldi	r24, 0x98	; 152
   14c70:	99 e1       	ldi	r25, 0x19	; 25
   14c72:	0e 94 7f c0 	call	0x180fe	; 0x180fe <V2B_MSB>
   14c76:	88 e9       	ldi	r24, 0x98	; 152
   14c78:	99 e1       	ldi	r25, 0x19	; 25
   14c7a:	1f 91       	pop	r17
   14c7c:	0f 91       	pop	r16
   14c7e:	08 95       	ret

00014c80 <SS80UnitPack>:
   14c80:	0f 93       	push	r16
   14c82:	1f 93       	push	r17
   14c84:	23 e1       	ldi	r18, 0x13	; 19
   14c86:	30 e0       	ldi	r19, 0x00	; 0
   14c88:	fc 01       	movw	r30, r24
   14c8a:	31 83       	std	Z+1, r19	; 0x01
   14c8c:	20 83       	st	Z, r18
   14c8e:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14c92:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14c96:	05 85       	ldd	r16, Z+13	; 0x0d
   14c98:	10 e0       	ldi	r17, 0x00	; 0
   14c9a:	20 e0       	ldi	r18, 0x00	; 0
   14c9c:	30 e0       	ldi	r19, 0x00	; 0
   14c9e:	41 e0       	ldi	r20, 0x01	; 1
   14ca0:	50 e0       	ldi	r21, 0x00	; 0
   14ca2:	60 e0       	ldi	r22, 0x00	; 0
   14ca4:	70 e0       	ldi	r23, 0x00	; 0
   14ca6:	85 e8       	ldi	r24, 0x85	; 133
   14ca8:	99 e1       	ldi	r25, 0x19	; 25
   14caa:	0e 94 7f c0 	call	0x180fe	; 0x180fe <V2B_MSB>
   14cae:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14cb2:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14cb6:	06 85       	ldd	r16, Z+14	; 0x0e
   14cb8:	17 85       	ldd	r17, Z+15	; 0x0f
   14cba:	20 89       	ldd	r18, Z+16	; 0x10
   14cbc:	31 89       	ldd	r19, Z+17	; 0x11
   14cbe:	43 e0       	ldi	r20, 0x03	; 3
   14cc0:	50 e0       	ldi	r21, 0x00	; 0
   14cc2:	61 e0       	ldi	r22, 0x01	; 1
   14cc4:	70 e0       	ldi	r23, 0x00	; 0
   14cc6:	85 e8       	ldi	r24, 0x85	; 133
   14cc8:	99 e1       	ldi	r25, 0x19	; 25
   14cca:	0e 94 7f c0 	call	0x180fe	; 0x180fe <V2B_MSB>
   14cce:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14cd2:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14cd6:	02 89       	ldd	r16, Z+18	; 0x12
   14cd8:	13 89       	ldd	r17, Z+19	; 0x13
   14cda:	20 e0       	ldi	r18, 0x00	; 0
   14cdc:	30 e0       	ldi	r19, 0x00	; 0
   14cde:	42 e0       	ldi	r20, 0x02	; 2
   14ce0:	50 e0       	ldi	r21, 0x00	; 0
   14ce2:	64 e0       	ldi	r22, 0x04	; 4
   14ce4:	70 e0       	ldi	r23, 0x00	; 0
   14ce6:	85 e8       	ldi	r24, 0x85	; 133
   14ce8:	99 e1       	ldi	r25, 0x19	; 25
   14cea:	0e 94 7f c0 	call	0x180fe	; 0x180fe <V2B_MSB>
   14cee:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14cf2:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14cf6:	04 89       	ldd	r16, Z+20	; 0x14
   14cf8:	10 e0       	ldi	r17, 0x00	; 0
   14cfa:	20 e0       	ldi	r18, 0x00	; 0
   14cfc:	30 e0       	ldi	r19, 0x00	; 0
   14cfe:	41 e0       	ldi	r20, 0x01	; 1
   14d00:	50 e0       	ldi	r21, 0x00	; 0
   14d02:	66 e0       	ldi	r22, 0x06	; 6
   14d04:	70 e0       	ldi	r23, 0x00	; 0
   14d06:	85 e8       	ldi	r24, 0x85	; 133
   14d08:	99 e1       	ldi	r25, 0x19	; 25
   14d0a:	0e 94 7f c0 	call	0x180fe	; 0x180fe <V2B_MSB>
   14d0e:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14d12:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14d16:	05 89       	ldd	r16, Z+21	; 0x15
   14d18:	10 e0       	ldi	r17, 0x00	; 0
   14d1a:	20 e0       	ldi	r18, 0x00	; 0
   14d1c:	30 e0       	ldi	r19, 0x00	; 0
   14d1e:	41 e0       	ldi	r20, 0x01	; 1
   14d20:	50 e0       	ldi	r21, 0x00	; 0
   14d22:	67 e0       	ldi	r22, 0x07	; 7
   14d24:	70 e0       	ldi	r23, 0x00	; 0
   14d26:	85 e8       	ldi	r24, 0x85	; 133
   14d28:	99 e1       	ldi	r25, 0x19	; 25
   14d2a:	0e 94 7f c0 	call	0x180fe	; 0x180fe <V2B_MSB>
   14d2e:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14d32:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14d36:	06 89       	ldd	r16, Z+22	; 0x16
   14d38:	17 89       	ldd	r17, Z+23	; 0x17
   14d3a:	20 e0       	ldi	r18, 0x00	; 0
   14d3c:	30 e0       	ldi	r19, 0x00	; 0
   14d3e:	42 e0       	ldi	r20, 0x02	; 2
   14d40:	50 e0       	ldi	r21, 0x00	; 0
   14d42:	68 e0       	ldi	r22, 0x08	; 8
   14d44:	70 e0       	ldi	r23, 0x00	; 0
   14d46:	85 e8       	ldi	r24, 0x85	; 133
   14d48:	99 e1       	ldi	r25, 0x19	; 25
   14d4a:	0e 94 7f c0 	call	0x180fe	; 0x180fe <V2B_MSB>
   14d4e:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14d52:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14d56:	00 8d       	ldd	r16, Z+24	; 0x18
   14d58:	11 8d       	ldd	r17, Z+25	; 0x19
   14d5a:	20 e0       	ldi	r18, 0x00	; 0
   14d5c:	30 e0       	ldi	r19, 0x00	; 0
   14d5e:	42 e0       	ldi	r20, 0x02	; 2
   14d60:	50 e0       	ldi	r21, 0x00	; 0
   14d62:	6a e0       	ldi	r22, 0x0A	; 10
   14d64:	70 e0       	ldi	r23, 0x00	; 0
   14d66:	85 e8       	ldi	r24, 0x85	; 133
   14d68:	99 e1       	ldi	r25, 0x19	; 25
   14d6a:	0e 94 7f c0 	call	0x180fe	; 0x180fe <V2B_MSB>
   14d6e:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14d72:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14d76:	02 8d       	ldd	r16, Z+26	; 0x1a
   14d78:	13 8d       	ldd	r17, Z+27	; 0x1b
   14d7a:	20 e0       	ldi	r18, 0x00	; 0
   14d7c:	30 e0       	ldi	r19, 0x00	; 0
   14d7e:	42 e0       	ldi	r20, 0x02	; 2
   14d80:	50 e0       	ldi	r21, 0x00	; 0
   14d82:	6c e0       	ldi	r22, 0x0C	; 12
   14d84:	70 e0       	ldi	r23, 0x00	; 0
   14d86:	85 e8       	ldi	r24, 0x85	; 133
   14d88:	99 e1       	ldi	r25, 0x19	; 25
   14d8a:	0e 94 7f c0 	call	0x180fe	; 0x180fe <V2B_MSB>
   14d8e:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14d92:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14d96:	04 8d       	ldd	r16, Z+28	; 0x1c
   14d98:	15 8d       	ldd	r17, Z+29	; 0x1d
   14d9a:	20 e0       	ldi	r18, 0x00	; 0
   14d9c:	30 e0       	ldi	r19, 0x00	; 0
   14d9e:	42 e0       	ldi	r20, 0x02	; 2
   14da0:	50 e0       	ldi	r21, 0x00	; 0
   14da2:	6e e0       	ldi	r22, 0x0E	; 14
   14da4:	70 e0       	ldi	r23, 0x00	; 0
   14da6:	85 e8       	ldi	r24, 0x85	; 133
   14da8:	99 e1       	ldi	r25, 0x19	; 25
   14daa:	0e 94 7f c0 	call	0x180fe	; 0x180fe <V2B_MSB>
   14dae:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14db2:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14db6:	06 8d       	ldd	r16, Z+30	; 0x1e
   14db8:	10 e0       	ldi	r17, 0x00	; 0
   14dba:	20 e0       	ldi	r18, 0x00	; 0
   14dbc:	30 e0       	ldi	r19, 0x00	; 0
   14dbe:	41 e0       	ldi	r20, 0x01	; 1
   14dc0:	50 e0       	ldi	r21, 0x00	; 0
   14dc2:	60 e1       	ldi	r22, 0x10	; 16
   14dc4:	70 e0       	ldi	r23, 0x00	; 0
   14dc6:	85 e8       	ldi	r24, 0x85	; 133
   14dc8:	99 e1       	ldi	r25, 0x19	; 25
   14dca:	0e 94 7f c0 	call	0x180fe	; 0x180fe <V2B_MSB>
   14dce:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14dd2:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14dd6:	07 8d       	ldd	r16, Z+31	; 0x1f
   14dd8:	10 e0       	ldi	r17, 0x00	; 0
   14dda:	20 e0       	ldi	r18, 0x00	; 0
   14ddc:	30 e0       	ldi	r19, 0x00	; 0
   14dde:	41 e0       	ldi	r20, 0x01	; 1
   14de0:	50 e0       	ldi	r21, 0x00	; 0
   14de2:	61 e1       	ldi	r22, 0x11	; 17
   14de4:	70 e0       	ldi	r23, 0x00	; 0
   14de6:	85 e8       	ldi	r24, 0x85	; 133
   14de8:	99 e1       	ldi	r25, 0x19	; 25
   14dea:	0e 94 7f c0 	call	0x180fe	; 0x180fe <V2B_MSB>
   14dee:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14df2:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14df6:	00 a1       	ldd	r16, Z+32	; 0x20
   14df8:	10 e0       	ldi	r17, 0x00	; 0
   14dfa:	20 e0       	ldi	r18, 0x00	; 0
   14dfc:	30 e0       	ldi	r19, 0x00	; 0
   14dfe:	41 e0       	ldi	r20, 0x01	; 1
   14e00:	50 e0       	ldi	r21, 0x00	; 0
   14e02:	62 e1       	ldi	r22, 0x12	; 18
   14e04:	70 e0       	ldi	r23, 0x00	; 0
   14e06:	85 e8       	ldi	r24, 0x85	; 133
   14e08:	99 e1       	ldi	r25, 0x19	; 25
   14e0a:	0e 94 7f c0 	call	0x180fe	; 0x180fe <V2B_MSB>
   14e0e:	85 e8       	ldi	r24, 0x85	; 133
   14e10:	99 e1       	ldi	r25, 0x19	; 25
   14e12:	1f 91       	pop	r17
   14e14:	0f 91       	pop	r16
   14e16:	08 95       	ret

00014e18 <SS80VolumePack>:
   14e18:	0f 93       	push	r16
   14e1a:	1f 93       	push	r17
   14e1c:	2d e0       	ldi	r18, 0x0D	; 13
   14e1e:	30 e0       	ldi	r19, 0x00	; 0
   14e20:	fc 01       	movw	r30, r24
   14e22:	31 83       	std	Z+1, r19	; 0x01
   14e24:	20 83       	st	Z, r18
   14e26:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14e2a:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14e2e:	01 a1       	ldd	r16, Z+33	; 0x21
   14e30:	12 a1       	ldd	r17, Z+34	; 0x22
   14e32:	23 a1       	ldd	r18, Z+35	; 0x23
   14e34:	34 a1       	ldd	r19, Z+36	; 0x24
   14e36:	43 e0       	ldi	r20, 0x03	; 3
   14e38:	50 e0       	ldi	r21, 0x00	; 0
   14e3a:	60 e0       	ldi	r22, 0x00	; 0
   14e3c:	70 e0       	ldi	r23, 0x00	; 0
   14e3e:	88 e7       	ldi	r24, 0x78	; 120
   14e40:	99 e1       	ldi	r25, 0x19	; 25
   14e42:	0e 94 7f c0 	call	0x180fe	; 0x180fe <V2B_MSB>
   14e46:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14e4a:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14e4e:	05 a1       	ldd	r16, Z+37	; 0x25
   14e50:	10 e0       	ldi	r17, 0x00	; 0
   14e52:	20 e0       	ldi	r18, 0x00	; 0
   14e54:	30 e0       	ldi	r19, 0x00	; 0
   14e56:	41 e0       	ldi	r20, 0x01	; 1
   14e58:	50 e0       	ldi	r21, 0x00	; 0
   14e5a:	63 e0       	ldi	r22, 0x03	; 3
   14e5c:	70 e0       	ldi	r23, 0x00	; 0
   14e5e:	88 e7       	ldi	r24, 0x78	; 120
   14e60:	99 e1       	ldi	r25, 0x19	; 25
   14e62:	0e 94 7f c0 	call	0x180fe	; 0x180fe <V2B_MSB>
   14e66:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14e6a:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14e6e:	06 a1       	ldd	r16, Z+38	; 0x26
   14e70:	17 a1       	ldd	r17, Z+39	; 0x27
   14e72:	20 e0       	ldi	r18, 0x00	; 0
   14e74:	30 e0       	ldi	r19, 0x00	; 0
   14e76:	42 e0       	ldi	r20, 0x02	; 2
   14e78:	50 e0       	ldi	r21, 0x00	; 0
   14e7a:	64 e0       	ldi	r22, 0x04	; 4
   14e7c:	70 e0       	ldi	r23, 0x00	; 0
   14e7e:	88 e7       	ldi	r24, 0x78	; 120
   14e80:	99 e1       	ldi	r25, 0x19	; 25
   14e82:	0e 94 7f c0 	call	0x180fe	; 0x180fe <V2B_MSB>
   14e86:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14e8a:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14e8e:	00 a5       	ldd	r16, Z+40	; 0x28
   14e90:	11 a5       	ldd	r17, Z+41	; 0x29
   14e92:	22 a5       	ldd	r18, Z+42	; 0x2a
   14e94:	33 a5       	ldd	r19, Z+43	; 0x2b
   14e96:	46 e0       	ldi	r20, 0x06	; 6
   14e98:	50 e0       	ldi	r21, 0x00	; 0
   14e9a:	66 e0       	ldi	r22, 0x06	; 6
   14e9c:	70 e0       	ldi	r23, 0x00	; 0
   14e9e:	88 e7       	ldi	r24, 0x78	; 120
   14ea0:	99 e1       	ldi	r25, 0x19	; 25
   14ea2:	0e 94 7f c0 	call	0x180fe	; 0x180fe <V2B_MSB>
   14ea6:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14eaa:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14eae:	04 a5       	ldd	r16, Z+44	; 0x2c
   14eb0:	10 e0       	ldi	r17, 0x00	; 0
   14eb2:	20 e0       	ldi	r18, 0x00	; 0
   14eb4:	30 e0       	ldi	r19, 0x00	; 0
   14eb6:	41 e0       	ldi	r20, 0x01	; 1
   14eb8:	50 e0       	ldi	r21, 0x00	; 0
   14eba:	6c e0       	ldi	r22, 0x0C	; 12
   14ebc:	70 e0       	ldi	r23, 0x00	; 0
   14ebe:	88 e7       	ldi	r24, 0x78	; 120
   14ec0:	99 e1       	ldi	r25, 0x19	; 25
   14ec2:	0e 94 7f c0 	call	0x180fe	; 0x180fe <V2B_MSB>
   14ec6:	88 e7       	ldi	r24, 0x78	; 120
   14ec8:	99 e1       	ldi	r25, 0x19	; 25
   14eca:	1f 91       	pop	r17
   14ecc:	0f 91       	pop	r16
   14ece:	08 95       	ret

00014ed0 <SS80_test_extended_status>:
   14ed0:	9b 01       	movw	r18, r22
   14ed2:	43 e0       	ldi	r20, 0x03	; 3
   14ed4:	35 95       	asr	r19
   14ed6:	27 95       	ror	r18
   14ed8:	4a 95       	dec	r20
   14eda:	e1 f7       	brne	.-8      	; 0x14ed4 <SS80_test_extended_status+0x4>
   14edc:	82 0f       	add	r24, r18
   14ede:	93 1f       	adc	r25, r19
   14ee0:	67 70       	andi	r22, 0x07	; 7
   14ee2:	77 27       	eor	r23, r23
   14ee4:	20 e8       	ldi	r18, 0x80	; 128
   14ee6:	30 e0       	ldi	r19, 0x00	; 0
   14ee8:	02 c0       	rjmp	.+4      	; 0x14eee <SS80_test_extended_status+0x1e>
   14eea:	35 95       	asr	r19
   14eec:	27 95       	ror	r18
   14eee:	6a 95       	dec	r22
   14ef0:	e2 f7       	brpl	.-8      	; 0x14eea <SS80_test_extended_status+0x1a>
   14ef2:	fc 01       	movw	r30, r24
   14ef4:	80 81       	ld	r24, Z
   14ef6:	28 23       	and	r18, r24
   14ef8:	81 e0       	ldi	r24, 0x01	; 1
   14efa:	90 e0       	ldi	r25, 0x00	; 0
   14efc:	11 f4       	brne	.+4      	; 0x14f02 <SS80_test_extended_status+0x32>
   14efe:	80 e0       	ldi	r24, 0x00	; 0
   14f00:	90 e0       	ldi	r25, 0x00	; 0
   14f02:	08 95       	ret

00014f04 <SS80_display_extended_status>:
   14f04:	6f 92       	push	r6
   14f06:	7f 92       	push	r7
   14f08:	8f 92       	push	r8
   14f0a:	ef 92       	push	r14
   14f0c:	ff 92       	push	r15
   14f0e:	0f 93       	push	r16
   14f10:	1f 93       	push	r17
   14f12:	cf 93       	push	r28
   14f14:	df 93       	push	r29
   14f16:	ad b7       	in	r26, 0x3d	; 61
   14f18:	be b7       	in	r27, 0x3e	; 62
   14f1a:	17 97       	sbiw	r26, 0x07	; 7
   14f1c:	0f b6       	in	r0, 0x3f	; 63
   14f1e:	f8 94       	cli
   14f20:	be bf       	out	0x3e, r27	; 62
   14f22:	0f be       	out	0x3f, r0	; 63
   14f24:	ad bf       	out	0x3d, r26	; 61
   14f26:	fc 01       	movw	r30, r24
   14f28:	ac 01       	movw	r20, r24
   14f2a:	48 5f       	subi	r20, 0xF8	; 248
   14f2c:	5f 4f       	sbci	r21, 0xFF	; 255
   14f2e:	20 e0       	ldi	r18, 0x00	; 0
   14f30:	30 e0       	ldi	r19, 0x00	; 0
   14f32:	a1 91       	ld	r26, Z+
   14f34:	aa 23       	and	r26, r26
   14f36:	11 f0       	breq	.+4      	; 0x14f3c <SS80_display_extended_status+0x38>
   14f38:	21 e0       	ldi	r18, 0x01	; 1
   14f3a:	30 e0       	ldi	r19, 0x00	; 0
   14f3c:	e4 17       	cp	r30, r20
   14f3e:	f5 07       	cpc	r31, r21
   14f40:	c1 f7       	brne	.-16     	; 0x14f32 <SS80_display_extended_status+0x2e>
   14f42:	23 2b       	or	r18, r19
   14f44:	81 f1       	breq	.+96     	; 0x14fa6 <SS80_display_extended_status+0xa2>
   14f46:	ec 01       	movw	r28, r24
   14f48:	ed b7       	in	r30, 0x3d	; 61
   14f4a:	fe b7       	in	r31, 0x3e	; 62
   14f4c:	75 83       	std	Z+5, r23	; 0x05
   14f4e:	64 83       	std	Z+4, r22	; 0x04
   14f50:	83 ef       	ldi	r24, 0xF3	; 243
   14f52:	97 e2       	ldi	r25, 0x27	; 39
   14f54:	a0 e0       	ldi	r26, 0x00	; 0
   14f56:	81 83       	std	Z+1, r24	; 0x01
   14f58:	92 83       	std	Z+2, r25	; 0x02
   14f5a:	a3 83       	std	Z+3, r26	; 0x03
   14f5c:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   14f60:	0c e7       	ldi	r16, 0x7C	; 124
   14f62:	12 e0       	ldi	r17, 0x02	; 2
   14f64:	88 ee       	ldi	r24, 0xE8	; 232
   14f66:	97 e2       	ldi	r25, 0x27	; 39
   14f68:	3c 01       	movw	r6, r24
   14f6a:	81 2c       	mov	r8, r1
   14f6c:	f8 01       	movw	r30, r16
   14f6e:	e0 80       	ld	r14, Z
   14f70:	f1 80       	ldd	r15, Z+1	; 0x01
   14f72:	ff ef       	ldi	r31, 0xFF	; 255
   14f74:	ef 16       	cp	r14, r31
   14f76:	ff 06       	cpc	r15, r31
   14f78:	b1 f0       	breq	.+44     	; 0x14fa6 <SS80_display_extended_status+0xa2>
   14f7a:	b7 01       	movw	r22, r14
   14f7c:	ce 01       	movw	r24, r28
   14f7e:	a8 df       	rcall	.-176    	; 0x14ed0 <SS80_test_extended_status>
   14f80:	89 2b       	or	r24, r25
   14f82:	71 f0       	breq	.+28     	; 0x14fa0 <SS80_display_extended_status+0x9c>
   14f84:	f8 01       	movw	r30, r16
   14f86:	82 81       	ldd	r24, Z+2	; 0x02
   14f88:	93 81       	ldd	r25, Z+3	; 0x03
   14f8a:	ed b7       	in	r30, 0x3d	; 61
   14f8c:	fe b7       	in	r31, 0x3e	; 62
   14f8e:	97 83       	std	Z+7, r25	; 0x07
   14f90:	86 83       	std	Z+6, r24	; 0x06
   14f92:	f5 82       	std	Z+5, r15	; 0x05
   14f94:	e4 82       	std	Z+4, r14	; 0x04
   14f96:	61 82       	std	Z+1, r6	; 0x01
   14f98:	72 82       	std	Z+2, r7	; 0x02
   14f9a:	83 82       	std	Z+3, r8	; 0x03
   14f9c:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   14fa0:	0c 5f       	subi	r16, 0xFC	; 252
   14fa2:	1f 4f       	sbci	r17, 0xFF	; 255
   14fa4:	e3 cf       	rjmp	.-58     	; 0x14f6c <SS80_display_extended_status+0x68>
   14fa6:	ad b7       	in	r26, 0x3d	; 61
   14fa8:	be b7       	in	r27, 0x3e	; 62
   14faa:	17 96       	adiw	r26, 0x07	; 7
   14fac:	0f b6       	in	r0, 0x3f	; 63
   14fae:	f8 94       	cli
   14fb0:	be bf       	out	0x3e, r27	; 62
   14fb2:	0f be       	out	0x3f, r0	; 63
   14fb4:	ad bf       	out	0x3d, r26	; 61
   14fb6:	df 91       	pop	r29
   14fb8:	cf 91       	pop	r28
   14fba:	1f 91       	pop	r17
   14fbc:	0f 91       	pop	r16
   14fbe:	ff 90       	pop	r15
   14fc0:	ef 90       	pop	r14
   14fc2:	8f 90       	pop	r8
   14fc4:	7f 90       	pop	r7
   14fc6:	6f 90       	pop	r6
   14fc8:	08 95       	ret

00014fca <SS80_send_status>:
   14fca:	a9 e1       	ldi	r26, 0x19	; 25
   14fcc:	b0 e0       	ldi	r27, 0x00	; 0
   14fce:	eb ee       	ldi	r30, 0xEB	; 235
   14fd0:	f7 ea       	ldi	r31, 0xA7	; 167
   14fd2:	0c 94 19 e7 	jmp	0x1ce32	; 0x1ce32 <__prologue_saves__+0x18>
   14fd6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14fda:	85 ff       	sbrs	r24, 5
   14fdc:	0a c0       	rjmp	.+20     	; 0x14ff2 <SS80_send_status+0x28>
   14fde:	84 ed       	ldi	r24, 0xD4	; 212
   14fe0:	97 e2       	ldi	r25, 0x27	; 39
   14fe2:	a0 e0       	ldi	r26, 0x00	; 0
   14fe4:	ed b7       	in	r30, 0x3d	; 61
   14fe6:	fe b7       	in	r31, 0x3e	; 62
   14fe8:	81 83       	std	Z+1, r24	; 0x01
   14fea:	92 83       	std	Z+2, r25	; 0x02
   14fec:	a3 83       	std	Z+3, r26	; 0x03
   14fee:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   14ff2:	ce 01       	movw	r24, r28
   14ff4:	04 96       	adiw	r24, 0x04	; 4
   14ff6:	7c 01       	movw	r14, r24
   14ff8:	84 e1       	ldi	r24, 0x14	; 20
   14ffa:	f7 01       	movw	r30, r14
   14ffc:	11 92       	st	Z+, r1
   14ffe:	8a 95       	dec	r24
   15000:	e9 f7       	brne	.-6      	; 0x14ffc <SS80_send_status+0x32>
   15002:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15006:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   1500a:	86 81       	ldd	r24, Z+6	; 0x06
   1500c:	20 e1       	ldi	r18, 0x10	; 16
   1500e:	82 9f       	mul	r24, r18
   15010:	c0 01       	movw	r24, r0
   15012:	11 24       	eor	r1, r1
   15014:	95 81       	ldd	r25, Z+5	; 0x05
   15016:	9f 70       	andi	r25, 0x0F	; 15
   15018:	89 2b       	or	r24, r25
   1501a:	8c 83       	std	Y+4, r24	; 0x04
   1501c:	8f ef       	ldi	r24, 0xFF	; 255
   1501e:	8d 83       	std	Y+5, r24	; 0x05
   15020:	83 81       	ldd	r24, Z+3	; 0x03
   15022:	86 ff       	sbrs	r24, 6
   15024:	02 c0       	rjmp	.+4      	; 0x1502a <SS80_send_status+0x60>
   15026:	92 e0       	ldi	r25, 0x02	; 2
   15028:	9e 83       	std	Y+6, r25	; 0x06
   1502a:	82 ff       	sbrs	r24, 2
   1502c:	03 c0       	rjmp	.+6      	; 0x15034 <SS80_send_status+0x6a>
   1502e:	9e 81       	ldd	r25, Y+6	; 0x06
   15030:	91 60       	ori	r25, 0x01	; 1
   15032:	9e 83       	std	Y+6, r25	; 0x06
   15034:	80 ff       	sbrs	r24, 0
   15036:	02 c0       	rjmp	.+4      	; 0x1503c <SS80_send_status+0x72>
   15038:	82 e0       	ldi	r24, 0x02	; 2
   1503a:	88 87       	std	Y+8, r24	; 0x08
   1503c:	83 81       	ldd	r24, Z+3	; 0x03
   1503e:	81 ff       	sbrs	r24, 1
   15040:	03 c0       	rjmp	.+6      	; 0x15048 <SS80_send_status+0x7e>
   15042:	88 85       	ldd	r24, Y+8	; 0x08
   15044:	82 60       	ori	r24, 0x02	; 2
   15046:	88 87       	std	Y+8, r24	; 0x08
   15048:	83 81       	ldd	r24, Z+3	; 0x03
   1504a:	83 ff       	sbrs	r24, 3
   1504c:	02 c0       	rjmp	.+4      	; 0x15052 <SS80_send_status+0x88>
   1504e:	88 e0       	ldi	r24, 0x08	; 8
   15050:	8a 87       	std	Y+10, r24	; 0x0a
   15052:	83 81       	ldd	r24, Z+3	; 0x03
   15054:	94 81       	ldd	r25, Z+4	; 0x04
   15056:	89 2b       	or	r24, r25
   15058:	59 f4       	brne	.+22     	; 0x15070 <SS80_send_status+0xa6>
   1505a:	07 81       	ldd	r16, Z+7	; 0x07
   1505c:	10 85       	ldd	r17, Z+8	; 0x08
   1505e:	21 85       	ldd	r18, Z+9	; 0x09
   15060:	32 85       	ldd	r19, Z+10	; 0x0a
   15062:	46 e0       	ldi	r20, 0x06	; 6
   15064:	50 e0       	ldi	r21, 0x00	; 0
   15066:	6a e0       	ldi	r22, 0x0A	; 10
   15068:	70 e0       	ldi	r23, 0x00	; 0
   1506a:	c7 01       	movw	r24, r14
   1506c:	0e 94 7f c0 	call	0x180fe	; 0x180fe <V2B_MSB>
   15070:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15074:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15078:	83 81       	ldd	r24, Z+3	; 0x03
   1507a:	94 81       	ldd	r25, Z+4	; 0x04
   1507c:	89 2b       	or	r24, r25
   1507e:	11 f0       	breq	.+4      	; 0x15084 <SS80_send_status+0xba>
   15080:	81 e0       	ldi	r24, 0x01	; 1
   15082:	82 83       	std	Z+2, r24	; 0x02
   15084:	80 e0       	ldi	r24, 0x00	; 0
   15086:	91 e0       	ldi	r25, 0x01	; 1
   15088:	99 8f       	std	Y+25, r25	; 0x19
   1508a:	88 8f       	std	Y+24, r24	; 0x18
   1508c:	ae 01       	movw	r20, r28
   1508e:	48 5e       	subi	r20, 0xE8	; 232
   15090:	5f 4f       	sbci	r21, 0xFF	; 255
   15092:	64 e1       	ldi	r22, 0x14	; 20
   15094:	70 e0       	ldi	r23, 0x00	; 0
   15096:	c7 01       	movw	r24, r14
   15098:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <gpib_write_str>
   1509c:	44 97       	sbiw	r24, 0x14	; 20
   1509e:	71 f0       	breq	.+28     	; 0x150bc <SS80_send_status+0xf2>
   150a0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   150a4:	80 ff       	sbrs	r24, 0
   150a6:	0a c0       	rjmp	.+20     	; 0x150bc <SS80_send_status+0xf2>
   150a8:	89 eb       	ldi	r24, 0xB9	; 185
   150aa:	97 e2       	ldi	r25, 0x27	; 39
   150ac:	a0 e0       	ldi	r26, 0x00	; 0
   150ae:	ed b7       	in	r30, 0x3d	; 61
   150b0:	fe b7       	in	r31, 0x3e	; 62
   150b2:	81 83       	std	Z+1, r24	; 0x01
   150b4:	92 83       	std	Z+2, r25	; 0x02
   150b6:	a3 83       	std	Z+3, r26	; 0x03
   150b8:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   150bc:	88 8d       	ldd	r24, Y+24	; 0x18
   150be:	99 8d       	ldd	r25, Y+25	; 0x19
   150c0:	88 27       	eor	r24, r24
   150c2:	90 7d       	andi	r25, 0xD0	; 208
   150c4:	69 96       	adiw	r28, 0x19	; 25
   150c6:	e6 e0       	ldi	r30, 0x06	; 6
   150c8:	0c 94 35 e7 	jmp	0x1ce6a	; 0x1ce6a <__epilogue_restores__+0x18>

000150cc <SS80_describe>:
   150cc:	a7 e0       	ldi	r26, 0x07	; 7
   150ce:	b0 e0       	ldi	r27, 0x00	; 0
   150d0:	ec e6       	ldi	r30, 0x6C	; 108
   150d2:	f8 ea       	ldi	r31, 0xA8	; 168
   150d4:	0c 94 1d e7 	jmp	0x1ce3a	; 0x1ce3a <__prologue_saves__+0x20>
   150d8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   150dc:	85 ff       	sbrs	r24, 5
   150de:	0a c0       	rjmp	.+20     	; 0x150f4 <SS80_describe+0x28>
   150e0:	88 ea       	ldi	r24, 0xA8	; 168
   150e2:	97 e2       	ldi	r25, 0x27	; 39
   150e4:	a0 e0       	ldi	r26, 0x00	; 0
   150e6:	ed b7       	in	r30, 0x3d	; 61
   150e8:	fe b7       	in	r31, 0x3e	; 62
   150ea:	81 83       	std	Z+1, r24	; 0x01
   150ec:	92 83       	std	Z+2, r25	; 0x02
   150ee:	a3 83       	std	Z+3, r26	; 0x03
   150f0:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   150f4:	1f 82       	std	Y+7, r1	; 0x07
   150f6:	1e 82       	std	Y+6, r1	; 0x06
   150f8:	ce 01       	movw	r24, r28
   150fa:	04 96       	adiw	r24, 0x04	; 4
   150fc:	85 dd       	rcall	.-1270   	; 0x14c08 <SS80ControllerPack>
   150fe:	6c 81       	ldd	r22, Y+4	; 0x04
   15100:	7d 81       	ldd	r23, Y+5	; 0x05
   15102:	ae 01       	movw	r20, r28
   15104:	4a 5f       	subi	r20, 0xFA	; 250
   15106:	5f 4f       	sbci	r21, 0xFF	; 255
   15108:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <gpib_write_str>
   1510c:	2c 81       	ldd	r18, Y+4	; 0x04
   1510e:	3d 81       	ldd	r19, Y+5	; 0x05
   15110:	82 17       	cp	r24, r18
   15112:	93 07       	cpc	r25, r19
   15114:	39 f0       	breq	.+14     	; 0x15124 <SS80_describe+0x58>
   15116:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1511a:	80 ff       	sbrs	r24, 0
   1511c:	3c c0       	rjmp	.+120    	; 0x15196 <SS80_describe+0xca>
   1511e:	85 e8       	ldi	r24, 0x85	; 133
   15120:	97 e2       	ldi	r25, 0x27	; 39
   15122:	31 c0       	rjmp	.+98     	; 0x15186 <SS80_describe+0xba>
   15124:	1f 82       	std	Y+7, r1	; 0x07
   15126:	1e 82       	std	Y+6, r1	; 0x06
   15128:	ce 01       	movw	r24, r28
   1512a:	04 96       	adiw	r24, 0x04	; 4
   1512c:	a9 dd       	rcall	.-1198   	; 0x14c80 <SS80UnitPack>
   1512e:	6c 81       	ldd	r22, Y+4	; 0x04
   15130:	7d 81       	ldd	r23, Y+5	; 0x05
   15132:	ae 01       	movw	r20, r28
   15134:	4a 5f       	subi	r20, 0xFA	; 250
   15136:	5f 4f       	sbci	r21, 0xFF	; 255
   15138:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <gpib_write_str>
   1513c:	2c 81       	ldd	r18, Y+4	; 0x04
   1513e:	3d 81       	ldd	r19, Y+5	; 0x05
   15140:	82 17       	cp	r24, r18
   15142:	93 07       	cpc	r25, r19
   15144:	39 f0       	breq	.+14     	; 0x15154 <SS80_describe+0x88>
   15146:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1514a:	80 ff       	sbrs	r24, 0
   1514c:	24 c0       	rjmp	.+72     	; 0x15196 <SS80_describe+0xca>
   1514e:	88 e6       	ldi	r24, 0x68	; 104
   15150:	97 e2       	ldi	r25, 0x27	; 39
   15152:	19 c0       	rjmp	.+50     	; 0x15186 <SS80_describe+0xba>
   15154:	80 e0       	ldi	r24, 0x00	; 0
   15156:	91 e0       	ldi	r25, 0x01	; 1
   15158:	9f 83       	std	Y+7, r25	; 0x07
   1515a:	8e 83       	std	Y+6, r24	; 0x06
   1515c:	ce 01       	movw	r24, r28
   1515e:	04 96       	adiw	r24, 0x04	; 4
   15160:	5b de       	rcall	.-842    	; 0x14e18 <SS80VolumePack>
   15162:	6c 81       	ldd	r22, Y+4	; 0x04
   15164:	7d 81       	ldd	r23, Y+5	; 0x05
   15166:	ae 01       	movw	r20, r28
   15168:	4a 5f       	subi	r20, 0xFA	; 250
   1516a:	5f 4f       	sbci	r21, 0xFF	; 255
   1516c:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <gpib_write_str>
   15170:	2c 81       	ldd	r18, Y+4	; 0x04
   15172:	3d 81       	ldd	r19, Y+5	; 0x05
   15174:	82 17       	cp	r24, r18
   15176:	93 07       	cpc	r25, r19
   15178:	99 f0       	breq	.+38     	; 0x151a0 <SS80_describe+0xd4>
   1517a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1517e:	80 ff       	sbrs	r24, 0
   15180:	0a c0       	rjmp	.+20     	; 0x15196 <SS80_describe+0xca>
   15182:	89 e4       	ldi	r24, 0x49	; 73
   15184:	97 e2       	ldi	r25, 0x27	; 39
   15186:	a0 e0       	ldi	r26, 0x00	; 0
   15188:	ed b7       	in	r30, 0x3d	; 61
   1518a:	fe b7       	in	r31, 0x3e	; 62
   1518c:	81 83       	std	Z+1, r24	; 0x01
   1518e:	92 83       	std	Z+2, r25	; 0x02
   15190:	a3 83       	std	Z+3, r26	; 0x03
   15192:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   15196:	8e 81       	ldd	r24, Y+6	; 0x06
   15198:	9f 81       	ldd	r25, Y+7	; 0x07
   1519a:	88 27       	eor	r24, r24
   1519c:	90 7d       	andi	r25, 0xD0	; 208
   1519e:	02 c0       	rjmp	.+4      	; 0x151a4 <SS80_describe+0xd8>
   151a0:	80 e0       	ldi	r24, 0x00	; 0
   151a2:	90 e0       	ldi	r25, 0x00	; 0
   151a4:	27 96       	adiw	r28, 0x07	; 7
   151a6:	e2 e0       	ldi	r30, 0x02	; 2
   151a8:	0c 94 39 e7 	jmp	0x1ce72	; 0x1ce72 <__epilogue_restores__+0x20>

000151ac <SS80_Check_Unit>:
   151ac:	00 d0       	rcall	.+0      	; 0x151ae <SS80_Check_Unit+0x2>
   151ae:	00 d0       	rcall	.+0      	; 0x151b0 <SS80_Check_Unit+0x4>
   151b0:	1f 92       	push	r1
   151b2:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   151b6:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   151ba:	88 23       	and	r24, r24
   151bc:	c9 f0       	breq	.+50     	; 0x151f0 <SS80_Check_Unit+0x44>
   151be:	8f 30       	cpi	r24, 0x0F	; 15
   151c0:	b9 f0       	breq	.+46     	; 0x151f0 <SS80_Check_Unit+0x44>
   151c2:	23 81       	ldd	r18, Z+3	; 0x03
   151c4:	34 81       	ldd	r19, Z+4	; 0x04
   151c6:	20 64       	ori	r18, 0x40	; 64
   151c8:	34 83       	std	Z+4, r19	; 0x04
   151ca:	23 83       	std	Z+3, r18	; 0x03
   151cc:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <debuglevel>
   151d0:	90 ff       	sbrs	r25, 0
   151d2:	0f c0       	rjmp	.+30     	; 0x151f2 <SS80_Check_Unit+0x46>
   151d4:	90 e0       	ldi	r25, 0x00	; 0
   151d6:	ed b7       	in	r30, 0x3d	; 61
   151d8:	fe b7       	in	r31, 0x3e	; 62
   151da:	95 83       	std	Z+5, r25	; 0x05
   151dc:	84 83       	std	Z+4, r24	; 0x04
   151de:	81 e3       	ldi	r24, 0x31	; 49
   151e0:	97 e2       	ldi	r25, 0x27	; 39
   151e2:	a0 e0       	ldi	r26, 0x00	; 0
   151e4:	81 83       	std	Z+1, r24	; 0x01
   151e6:	92 83       	std	Z+2, r25	; 0x02
   151e8:	a3 83       	std	Z+3, r26	; 0x03
   151ea:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   151ee:	01 c0       	rjmp	.+2      	; 0x151f2 <SS80_Check_Unit+0x46>
   151f0:	85 83       	std	Z+5, r24	; 0x05
   151f2:	0f 90       	pop	r0
   151f4:	0f 90       	pop	r0
   151f6:	0f 90       	pop	r0
   151f8:	0f 90       	pop	r0
   151fa:	0f 90       	pop	r0
   151fc:	08 95       	ret

000151fe <SS80_Check_Volume>:
   151fe:	00 d0       	rcall	.+0      	; 0x15200 <SS80_Check_Volume+0x2>
   15200:	00 d0       	rcall	.+0      	; 0x15202 <SS80_Check_Volume+0x4>
   15202:	1f 92       	push	r1
   15204:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15208:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   1520c:	88 23       	and	r24, r24
   1520e:	b9 f0       	breq	.+46     	; 0x1523e <SS80_Check_Volume+0x40>
   15210:	23 81       	ldd	r18, Z+3	; 0x03
   15212:	34 81       	ldd	r19, Z+4	; 0x04
   15214:	20 64       	ori	r18, 0x40	; 64
   15216:	34 83       	std	Z+4, r19	; 0x04
   15218:	23 83       	std	Z+3, r18	; 0x03
   1521a:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <debuglevel>
   1521e:	90 ff       	sbrs	r25, 0
   15220:	0f c0       	rjmp	.+30     	; 0x15240 <SS80_Check_Volume+0x42>
   15222:	90 e0       	ldi	r25, 0x00	; 0
   15224:	ed b7       	in	r30, 0x3d	; 61
   15226:	fe b7       	in	r31, 0x3e	; 62
   15228:	95 83       	std	Z+5, r25	; 0x05
   1522a:	84 83       	std	Z+4, r24	; 0x04
   1522c:	87 e1       	ldi	r24, 0x17	; 23
   1522e:	97 e2       	ldi	r25, 0x27	; 39
   15230:	a0 e0       	ldi	r26, 0x00	; 0
   15232:	81 83       	std	Z+1, r24	; 0x01
   15234:	92 83       	std	Z+2, r25	; 0x02
   15236:	a3 83       	std	Z+3, r26	; 0x03
   15238:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   1523c:	01 c0       	rjmp	.+2      	; 0x15240 <SS80_Check_Volume+0x42>
   1523e:	16 82       	std	Z+6, r1	; 0x06
   15240:	0f 90       	pop	r0
   15242:	0f 90       	pop	r0
   15244:	0f 90       	pop	r0
   15246:	0f 90       	pop	r0
   15248:	0f 90       	pop	r0
   1524a:	08 95       	ret

0001524c <SS80_Command_State>:
   1524c:	2f 92       	push	r2
   1524e:	3f 92       	push	r3
   15250:	4f 92       	push	r4
   15252:	6f 92       	push	r6
   15254:	7f 92       	push	r7
   15256:	8f 92       	push	r8
   15258:	af 92       	push	r10
   1525a:	bf 92       	push	r11
   1525c:	cf 92       	push	r12
   1525e:	ef 92       	push	r14
   15260:	ff 92       	push	r15
   15262:	0f 93       	push	r16
   15264:	1f 93       	push	r17
   15266:	cf 93       	push	r28
   15268:	df 93       	push	r29
   1526a:	cd b7       	in	r28, 0x3d	; 61
   1526c:	de b7       	in	r29, 0x3e	; 62
   1526e:	66 97       	sbiw	r28, 0x16	; 22
   15270:	0f b6       	in	r0, 0x3f	; 63
   15272:	f8 94       	cli
   15274:	de bf       	out	0x3e, r29	; 62
   15276:	0f be       	out	0x3f, r0	; 63
   15278:	cd bf       	out	0x3d, r28	; 61
   1527a:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   1527e:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   15282:	81 81       	ldd	r24, Z+1	; 0x01
   15284:	90 e0       	ldi	r25, 0x00	; 0
   15286:	0e 94 a3 86 	call	0x10d46	; 0x10d46 <gpib_disable_PPR>
   1528a:	80 e0       	ldi	r24, 0x00	; 0
   1528c:	91 e0       	ldi	r25, 0x01	; 1
   1528e:	99 87       	std	Y+9, r25	; 0x09
   15290:	88 87       	std	Y+8, r24	; 0x08
   15292:	ae 01       	movw	r20, r28
   15294:	48 5f       	subi	r20, 0xF8	; 248
   15296:	5f 4f       	sbci	r21, 0xFF	; 255
   15298:	60 e0       	ldi	r22, 0x00	; 0
   1529a:	72 e0       	ldi	r23, 0x02	; 2
   1529c:	8a ee       	ldi	r24, 0xEA	; 234
   1529e:	9c e1       	ldi	r25, 0x1C	; 28
   152a0:	0e 94 fb 8a 	call	0x115f6	; 0x115f6 <gpib_read_str>
   152a4:	9b 87       	std	Y+11, r25	; 0x0b
   152a6:	8a 87       	std	Y+10, r24	; 0x0a
   152a8:	88 85       	ldd	r24, Y+8	; 0x08
   152aa:	99 85       	ldd	r25, Y+9	; 0x09
   152ac:	9c 01       	movw	r18, r24
   152ae:	22 27       	eor	r18, r18
   152b0:	30 7d       	andi	r19, 0xD0	; 208
   152b2:	23 2b       	or	r18, r19
   152b4:	79 f0       	breq	.+30     	; 0x152d4 <SS80_Command_State+0x88>
   152b6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   152ba:	80 ff       	sbrs	r24, 0
   152bc:	21 c2       	rjmp	.+1090   	; 0x15700 <SS80_Command_State+0x4b4>
   152be:	81 ef       	ldi	r24, 0xF1	; 241
   152c0:	96 e2       	ldi	r25, 0x26	; 38
   152c2:	a0 e0       	ldi	r26, 0x00	; 0
   152c4:	ed b7       	in	r30, 0x3d	; 61
   152c6:	fe b7       	in	r31, 0x3e	; 62
   152c8:	81 83       	std	Z+1, r24	; 0x01
   152ca:	92 83       	std	Z+2, r25	; 0x02
   152cc:	a3 83       	std	Z+3, r26	; 0x03
   152ce:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   152d2:	16 c2       	rjmp	.+1068   	; 0x15700 <SS80_Command_State+0x4b4>
   152d4:	2a 85       	ldd	r18, Y+10	; 0x0a
   152d6:	3b 85       	ldd	r19, Y+11	; 0x0b
   152d8:	23 2b       	or	r18, r19
   152da:	09 f4       	brne	.+2      	; 0x152de <SS80_Command_State+0x92>
   152dc:	16 c2       	rjmp	.+1068   	; 0x1570a <SS80_Command_State+0x4be>
   152de:	90 fd       	sbrc	r25, 0
   152e0:	0e c0       	rjmp	.+28     	; 0x152fe <SS80_Command_State+0xb2>
   152e2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   152e6:	80 ff       	sbrs	r24, 0
   152e8:	0a c0       	rjmp	.+20     	; 0x152fe <SS80_Command_State+0xb2>
   152ea:	88 ed       	ldi	r24, 0xD8	; 216
   152ec:	96 e2       	ldi	r25, 0x26	; 38
   152ee:	a0 e0       	ldi	r26, 0x00	; 0
   152f0:	ed b7       	in	r30, 0x3d	; 61
   152f2:	fe b7       	in	r31, 0x3e	; 62
   152f4:	81 83       	std	Z+1, r24	; 0x01
   152f6:	92 83       	std	Z+2, r25	; 0x02
   152f8:	a3 83       	std	Z+3, r26	; 0x03
   152fa:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   152fe:	e1 2c       	mov	r14, r1
   15300:	f1 2c       	mov	r15, r1
   15302:	8c ed       	ldi	r24, 0xDC	; 220
   15304:	95 e2       	ldi	r25, 0x25	; 37
   15306:	9c 01       	movw	r18, r24
   15308:	40 e0       	ldi	r20, 0x00	; 0
   1530a:	2e 87       	std	Y+14, r18	; 0x0e
   1530c:	3f 87       	std	Y+15, r19	; 0x0f
   1530e:	48 8b       	std	Y+16, r20	; 0x10
   15310:	81 e0       	ldi	r24, 0x01	; 1
   15312:	96 e2       	ldi	r25, 0x26	; 38
   15314:	9c 01       	movw	r18, r24
   15316:	40 e0       	ldi	r20, 0x00	; 0
   15318:	29 8b       	std	Y+17, r18	; 0x11
   1531a:	3a 8b       	std	Y+18, r19	; 0x12
   1531c:	4b 8b       	std	Y+19, r20	; 0x13
   1531e:	8b e1       	ldi	r24, 0x1B	; 27
   15320:	96 e2       	ldi	r25, 0x26	; 38
   15322:	9c 01       	movw	r18, r24
   15324:	40 e0       	ldi	r20, 0x00	; 0
   15326:	2c 8b       	std	Y+20, r18	; 0x14
   15328:	3d 8b       	std	Y+21, r19	; 0x15
   1532a:	4e 8b       	std	Y+22, r20	; 0x16
   1532c:	81 e3       	ldi	r24, 0x31	; 49
   1532e:	96 e2       	ldi	r25, 0x26	; 38
   15330:	3c 01       	movw	r6, r24
   15332:	81 2c       	mov	r8, r1
   15334:	8f e3       	ldi	r24, 0x3F	; 63
   15336:	96 e2       	ldi	r25, 0x26	; 38
   15338:	5c 01       	movw	r10, r24
   1533a:	c1 2c       	mov	r12, r1
   1533c:	8b e5       	ldi	r24, 0x5B	; 91
   1533e:	96 e2       	ldi	r25, 0x26	; 38
   15340:	1c 01       	movw	r2, r24
   15342:	41 2c       	mov	r4, r1
   15344:	2a 85       	ldd	r18, Y+10	; 0x0a
   15346:	3b 85       	ldd	r19, Y+11	; 0x0b
   15348:	87 01       	movw	r16, r14
   1534a:	e2 16       	cp	r14, r18
   1534c:	f3 06       	cpc	r15, r19
   1534e:	0c f0       	brlt	.+2      	; 0x15352 <SS80_Command_State+0x106>
   15350:	b6 c1       	rjmp	.+876    	; 0x156be <SS80_Command_State+0x472>
   15352:	0f 5f       	subi	r16, 0xFF	; 255
   15354:	1f 4f       	sbci	r17, 0xFF	; 255
   15356:	f7 01       	movw	r30, r14
   15358:	e6 51       	subi	r30, 0x16	; 22
   1535a:	f3 4e       	sbci	r31, 0xE3	; 227
   1535c:	80 81       	ld	r24, Z
   1535e:	28 2f       	mov	r18, r24
   15360:	30 e0       	ldi	r19, 0x00	; 0
   15362:	a9 01       	movw	r20, r18
   15364:	40 52       	subi	r20, 0x20	; 32
   15366:	51 09       	sbc	r21, r1
   15368:	40 31       	cpi	r20, 0x10	; 16
   1536a:	51 05       	cpc	r21, r1
   1536c:	98 f4       	brcc	.+38     	; 0x15394 <SS80_Command_State+0x148>
   1536e:	80 52       	subi	r24, 0x20	; 32
   15370:	1d df       	rcall	.-454    	; 0x151ac <SS80_Check_Unit>
   15372:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15376:	85 ff       	sbrs	r24, 5
   15378:	a0 c1       	rjmp	.+832    	; 0x156ba <SS80_Command_State+0x46e>
   1537a:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   1537e:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15382:	85 81       	ldd	r24, Z+5	; 0x05
   15384:	90 e0       	ldi	r25, 0x00	; 0
   15386:	ed b7       	in	r30, 0x3d	; 61
   15388:	fe b7       	in	r31, 0x3e	; 62
   1538a:	95 83       	std	Z+5, r25	; 0x05
   1538c:	84 83       	std	Z+4, r24	; 0x04
   1538e:	82 ec       	ldi	r24, 0xC2	; 194
   15390:	96 e2       	ldi	r25, 0x26	; 38
   15392:	19 c0       	rjmp	.+50     	; 0x153c6 <SS80_Command_State+0x17a>
   15394:	a9 01       	movw	r20, r18
   15396:	40 54       	subi	r20, 0x40	; 64
   15398:	51 09       	sbc	r21, r1
   1539a:	40 31       	cpi	r20, 0x10	; 16
   1539c:	51 05       	cpc	r21, r1
   1539e:	d0 f4       	brcc	.+52     	; 0x153d4 <SS80_Command_State+0x188>
   153a0:	80 54       	subi	r24, 0x40	; 64
   153a2:	2d df       	rcall	.-422    	; 0x151fe <SS80_Check_Volume>
   153a4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   153a8:	85 ff       	sbrs	r24, 5
   153aa:	87 c1       	rjmp	.+782    	; 0x156ba <SS80_Command_State+0x46e>
   153ac:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   153b0:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   153b4:	86 81       	ldd	r24, Z+6	; 0x06
   153b6:	90 e0       	ldi	r25, 0x00	; 0
   153b8:	ed b7       	in	r30, 0x3d	; 61
   153ba:	fe b7       	in	r31, 0x3e	; 62
   153bc:	95 83       	std	Z+5, r25	; 0x05
   153be:	84 83       	std	Z+4, r24	; 0x04
   153c0:	29 ea       	ldi	r18, 0xA9	; 169
   153c2:	36 e2       	ldi	r19, 0x26	; 38
   153c4:	c9 01       	movw	r24, r18
   153c6:	a0 e0       	ldi	r26, 0x00	; 0
   153c8:	81 83       	std	Z+1, r24	; 0x01
   153ca:	92 83       	std	Z+2, r25	; 0x02
   153cc:	a3 83       	std	Z+3, r26	; 0x03
   153ce:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   153d2:	73 c1       	rjmp	.+742    	; 0x156ba <SS80_Command_State+0x46e>
   153d4:	21 15       	cp	r18, r1
   153d6:	31 05       	cpc	r19, r1
   153d8:	79 f4       	brne	.+30     	; 0x153f8 <SS80_Command_State+0x1ac>
   153da:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   153de:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   153e2:	81 e0       	ldi	r24, 0x01	; 1
   153e4:	90 e0       	ldi	r25, 0x00	; 0
   153e6:	91 83       	std	Z+1, r25	; 0x01
   153e8:	80 83       	st	Z, r24
   153ea:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   153ee:	85 ff       	sbrs	r24, 5
   153f0:	66 c1       	rjmp	.+716    	; 0x156be <SS80_Command_State+0x472>
   153f2:	81 e9       	ldi	r24, 0x91	; 145
   153f4:	96 e2       	ldi	r25, 0x26	; 38
   153f6:	0f c0       	rjmp	.+30     	; 0x15416 <SS80_Command_State+0x1ca>
   153f8:	22 30       	cpi	r18, 0x02	; 2
   153fa:	31 05       	cpc	r19, r1
   153fc:	a9 f4       	brne	.+42     	; 0x15428 <SS80_Command_State+0x1dc>
   153fe:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15402:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15406:	31 83       	std	Z+1, r19	; 0x01
   15408:	20 83       	st	Z, r18
   1540a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1540e:	85 ff       	sbrs	r24, 5
   15410:	56 c1       	rjmp	.+684    	; 0x156be <SS80_Command_State+0x472>
   15412:	88 e7       	ldi	r24, 0x78	; 120
   15414:	96 e2       	ldi	r25, 0x26	; 38
   15416:	a0 e0       	ldi	r26, 0x00	; 0
   15418:	ed b7       	in	r30, 0x3d	; 61
   1541a:	fe b7       	in	r31, 0x3e	; 62
   1541c:	81 83       	std	Z+1, r24	; 0x01
   1541e:	92 83       	std	Z+2, r25	; 0x02
   15420:	a3 83       	std	Z+3, r26	; 0x03
   15422:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   15426:	4b c1       	rjmp	.+662    	; 0x156be <SS80_Command_State+0x472>
   15428:	20 31       	cpi	r18, 0x10	; 16
   1542a:	31 05       	cpc	r19, r1
   1542c:	b1 f5       	brne	.+108    	; 0x1549a <SS80_Command_State+0x24e>
   1542e:	20 91 66 19 	lds	r18, 0x1966	; 0x801966 <SS80s>
   15432:	30 91 67 19 	lds	r19, 0x1967	; 0x801967 <SS80s+0x1>
   15436:	3d 87       	std	Y+13, r19	; 0x0d
   15438:	2c 87       	std	Y+12, r18	; 0x0c
   1543a:	46 e0       	ldi	r20, 0x06	; 6
   1543c:	50 e0       	ldi	r21, 0x00	; 0
   1543e:	b8 01       	movw	r22, r16
   15440:	8a ee       	ldi	r24, 0xEA	; 234
   15442:	9c e1       	ldi	r25, 0x1C	; 28
   15444:	0e 94 a8 c0 	call	0x18150	; 0x18150 <B2V_MSB>
   15448:	ec 85       	ldd	r30, Y+12	; 0x0c
   1544a:	fd 85       	ldd	r31, Y+13	; 0x0d
   1544c:	67 83       	std	Z+7, r22	; 0x07
   1544e:	70 87       	std	Z+8, r23	; 0x08
   15450:	81 87       	std	Z+9, r24	; 0x09
   15452:	92 87       	std	Z+10, r25	; 0x0a
   15454:	87 01       	movw	r16, r14
   15456:	09 5f       	subi	r16, 0xF9	; 249
   15458:	1f 4f       	sbci	r17, 0xFF	; 255
   1545a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1545e:	85 ff       	sbrs	r24, 5
   15460:	2c c1       	rjmp	.+600    	; 0x156ba <SS80_Command_State+0x46e>
   15462:	20 91 66 19 	lds	r18, 0x1966	; 0x801966 <SS80s>
   15466:	30 91 67 19 	lds	r19, 0x1967	; 0x801967 <SS80s+0x1>
   1546a:	80 91 68 19 	lds	r24, 0x1968	; 0x801968 <SS80p>
   1546e:	90 91 69 19 	lds	r25, 0x1969	; 0x801969 <SS80p+0x1>
   15472:	fc 01       	movw	r30, r24
   15474:	a2 89       	ldd	r26, Z+18	; 0x12
   15476:	b3 89       	ldd	r27, Z+19	; 0x13
   15478:	f9 01       	movw	r30, r18
   1547a:	27 81       	ldd	r18, Z+7	; 0x07
   1547c:	30 85       	ldd	r19, Z+8	; 0x08
   1547e:	41 85       	ldd	r20, Z+9	; 0x09
   15480:	52 85       	ldd	r21, Z+10	; 0x0a
   15482:	0e 94 ed e6 	call	0x1cdda	; 0x1cdda <__muluhisi3>
   15486:	ed b7       	in	r30, 0x3d	; 61
   15488:	fe b7       	in	r31, 0x3e	; 62
   1548a:	64 83       	std	Z+4, r22	; 0x04
   1548c:	75 83       	std	Z+5, r23	; 0x05
   1548e:	86 83       	std	Z+6, r24	; 0x06
   15490:	97 83       	std	Z+7, r25	; 0x07
   15492:	21 82       	std	Z+1, r2	; 0x01
   15494:	32 82       	std	Z+2, r3	; 0x02
   15496:	43 82       	std	Z+3, r4	; 0x03
   15498:	2e c0       	rjmp	.+92     	; 0x154f6 <SS80_Command_State+0x2aa>
   1549a:	28 31       	cpi	r18, 0x18	; 24
   1549c:	31 05       	cpc	r19, r1
   1549e:	71 f5       	brne	.+92     	; 0x154fc <SS80_Command_State+0x2b0>
   154a0:	20 91 66 19 	lds	r18, 0x1966	; 0x801966 <SS80s>
   154a4:	30 91 67 19 	lds	r19, 0x1967	; 0x801967 <SS80s+0x1>
   154a8:	3d 87       	std	Y+13, r19	; 0x0d
   154aa:	2c 87       	std	Y+12, r18	; 0x0c
   154ac:	44 e0       	ldi	r20, 0x04	; 4
   154ae:	50 e0       	ldi	r21, 0x00	; 0
   154b0:	b8 01       	movw	r22, r16
   154b2:	8a ee       	ldi	r24, 0xEA	; 234
   154b4:	9c e1       	ldi	r25, 0x1C	; 28
   154b6:	0e 94 a8 c0 	call	0x18150	; 0x18150 <B2V_MSB>
   154ba:	ec 85       	ldd	r30, Y+12	; 0x0c
   154bc:	fd 85       	ldd	r31, Y+13	; 0x0d
   154be:	63 87       	std	Z+11, r22	; 0x0b
   154c0:	74 87       	std	Z+12, r23	; 0x0c
   154c2:	85 87       	std	Z+13, r24	; 0x0d
   154c4:	96 87       	std	Z+14, r25	; 0x0e
   154c6:	87 01       	movw	r16, r14
   154c8:	0b 5f       	subi	r16, 0xFB	; 251
   154ca:	1f 4f       	sbci	r17, 0xFF	; 255
   154cc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   154d0:	85 ff       	sbrs	r24, 5
   154d2:	f3 c0       	rjmp	.+486    	; 0x156ba <SS80_Command_State+0x46e>
   154d4:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   154d8:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   154dc:	83 85       	ldd	r24, Z+11	; 0x0b
   154de:	94 85       	ldd	r25, Z+12	; 0x0c
   154e0:	a5 85       	ldd	r26, Z+13	; 0x0d
   154e2:	b6 85       	ldd	r27, Z+14	; 0x0e
   154e4:	ed b7       	in	r30, 0x3d	; 61
   154e6:	fe b7       	in	r31, 0x3e	; 62
   154e8:	84 83       	std	Z+4, r24	; 0x04
   154ea:	95 83       	std	Z+5, r25	; 0x05
   154ec:	a6 83       	std	Z+6, r26	; 0x06
   154ee:	b7 83       	std	Z+7, r27	; 0x07
   154f0:	a1 82       	std	Z+1, r10	; 0x01
   154f2:	b2 82       	std	Z+2, r11	; 0x02
   154f4:	c3 82       	std	Z+3, r12	; 0x03
   154f6:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   154fa:	df c0       	rjmp	.+446    	; 0x156ba <SS80_Command_State+0x46e>
   154fc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15500:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   15504:	24 33       	cpi	r18, 0x34	; 52
   15506:	31 05       	cpc	r19, r1
   15508:	41 f4       	brne	.+16     	; 0x1551a <SS80_Command_State+0x2ce>
   1550a:	85 ff       	sbrs	r24, 5
   1550c:	d6 c0       	rjmp	.+428    	; 0x156ba <SS80_Command_State+0x46e>
   1550e:	ed b7       	in	r30, 0x3d	; 61
   15510:	fe b7       	in	r31, 0x3e	; 62
   15512:	61 82       	std	Z+1, r6	; 0x01
   15514:	72 82       	std	Z+2, r7	; 0x02
   15516:	83 82       	std	Z+3, r8	; 0x03
   15518:	2b c0       	rjmp	.+86     	; 0x15570 <SS80_Command_State+0x324>
   1551a:	29 33       	cpi	r18, 0x39	; 57
   1551c:	31 05       	cpc	r19, r1
   1551e:	49 f4       	brne	.+18     	; 0x15532 <SS80_Command_State+0x2e6>
   15520:	87 01       	movw	r16, r14
   15522:	0d 5f       	subi	r16, 0xFD	; 253
   15524:	1f 4f       	sbci	r17, 0xFF	; 255
   15526:	85 ff       	sbrs	r24, 5
   15528:	c8 c0       	rjmp	.+400    	; 0x156ba <SS80_Command_State+0x46e>
   1552a:	2c 89       	ldd	r18, Y+20	; 0x14
   1552c:	3d 89       	ldd	r19, Y+21	; 0x15
   1552e:	4e 89       	ldd	r20, Y+22	; 0x16
   15530:	1a c0       	rjmp	.+52     	; 0x15566 <SS80_Command_State+0x31a>
   15532:	2b 33       	cpi	r18, 0x3B	; 59
   15534:	31 05       	cpc	r19, r1
   15536:	49 f4       	brne	.+18     	; 0x1554a <SS80_Command_State+0x2fe>
   15538:	87 01       	movw	r16, r14
   1553a:	0e 5f       	subi	r16, 0xFE	; 254
   1553c:	1f 4f       	sbci	r17, 0xFF	; 255
   1553e:	85 ff       	sbrs	r24, 5
   15540:	bc c0       	rjmp	.+376    	; 0x156ba <SS80_Command_State+0x46e>
   15542:	29 89       	ldd	r18, Y+17	; 0x11
   15544:	3a 89       	ldd	r19, Y+18	; 0x12
   15546:	4b 89       	ldd	r20, Y+19	; 0x13
   15548:	0e c0       	rjmp	.+28     	; 0x15566 <SS80_Command_State+0x31a>
   1554a:	28 34       	cpi	r18, 0x48	; 72
   1554c:	31 05       	cpc	r19, r1
   1554e:	99 f4       	brne	.+38     	; 0x15576 <SS80_Command_State+0x32a>
   15550:	87 01       	movw	r16, r14
   15552:	0e 5f       	subi	r16, 0xFE	; 254
   15554:	1f 4f       	sbci	r17, 0xFF	; 255
   15556:	80 73       	andi	r24, 0x30	; 48
   15558:	99 27       	eor	r25, r25
   1555a:	89 2b       	or	r24, r25
   1555c:	09 f4       	brne	.+2      	; 0x15560 <SS80_Command_State+0x314>
   1555e:	ad c0       	rjmp	.+346    	; 0x156ba <SS80_Command_State+0x46e>
   15560:	2e 85       	ldd	r18, Y+14	; 0x0e
   15562:	3f 85       	ldd	r19, Y+15	; 0x0f
   15564:	48 89       	ldd	r20, Y+16	; 0x10
   15566:	ed b7       	in	r30, 0x3d	; 61
   15568:	fe b7       	in	r31, 0x3e	; 62
   1556a:	21 83       	std	Z+1, r18	; 0x01
   1556c:	32 83       	std	Z+2, r19	; 0x02
   1556e:	43 83       	std	Z+3, r20	; 0x03
   15570:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   15574:	a2 c0       	rjmp	.+324    	; 0x156ba <SS80_Command_State+0x46e>
   15576:	24 30       	cpi	r18, 0x04	; 4
   15578:	31 05       	cpc	r19, r1
   1557a:	41 f4       	brne	.+16     	; 0x1558c <SS80_Command_State+0x340>
   1557c:	80 73       	andi	r24, 0x30	; 48
   1557e:	99 27       	eor	r25, r25
   15580:	89 2b       	or	r24, r25
   15582:	09 f4       	brne	.+2      	; 0x15586 <SS80_Command_State+0x33a>
   15584:	9c c0       	rjmp	.+312    	; 0x156be <SS80_Command_State+0x472>
   15586:	8b eb       	ldi	r24, 0xBB	; 187
   15588:	95 e2       	ldi	r25, 0x25	; 37
   1558a:	45 cf       	rjmp	.-374    	; 0x15416 <SS80_Command_State+0x1ca>
   1558c:	2e 30       	cpi	r18, 0x0E	; 14
   1558e:	31 05       	cpc	r19, r1
   15590:	29 f4       	brne	.+10     	; 0x1559c <SS80_Command_State+0x350>
   15592:	85 ff       	sbrs	r24, 5
   15594:	94 c0       	rjmp	.+296    	; 0x156be <SS80_Command_State+0x472>
   15596:	85 ea       	ldi	r24, 0xA5	; 165
   15598:	95 e2       	ldi	r25, 0x25	; 37
   1559a:	3d cf       	rjmp	.-390    	; 0x15416 <SS80_Command_State+0x1ca>
   1559c:	2f 30       	cpi	r18, 0x0F	; 15
   1559e:	31 05       	cpc	r19, r1
   155a0:	29 f4       	brne	.+10     	; 0x155ac <SS80_Command_State+0x360>
   155a2:	85 ff       	sbrs	r24, 5
   155a4:	8c c0       	rjmp	.+280    	; 0x156be <SS80_Command_State+0x472>
   155a6:	88 e8       	ldi	r24, 0x88	; 136
   155a8:	95 e2       	ldi	r25, 0x25	; 37
   155aa:	35 cf       	rjmp	.-406    	; 0x15416 <SS80_Command_State+0x1ca>
   155ac:	21 33       	cpi	r18, 0x31	; 49
   155ae:	31 05       	cpc	r19, r1
   155b0:	59 f4       	brne	.+22     	; 0x155c8 <SS80_Command_State+0x37c>
   155b2:	87 01       	movw	r16, r14
   155b4:	0d 5f       	subi	r16, 0xFD	; 253
   155b6:	1f 4f       	sbci	r17, 0xFF	; 255
   155b8:	80 73       	andi	r24, 0x30	; 48
   155ba:	99 27       	eor	r25, r25
   155bc:	89 2b       	or	r24, r25
   155be:	09 f4       	brne	.+2      	; 0x155c2 <SS80_Command_State+0x376>
   155c0:	7e c0       	rjmp	.+252    	; 0x156be <SS80_Command_State+0x472>
   155c2:	8c e6       	ldi	r24, 0x6C	; 108
   155c4:	95 e2       	ldi	r25, 0x25	; 37
   155c6:	27 cf       	rjmp	.-434    	; 0x15416 <SS80_Command_State+0x1ca>
   155c8:	25 33       	cpi	r18, 0x35	; 53
   155ca:	31 05       	cpc	r19, r1
   155cc:	69 f4       	brne	.+26     	; 0x155e8 <SS80_Command_State+0x39c>
   155ce:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   155d2:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   155d6:	24 e0       	ldi	r18, 0x04	; 4
   155d8:	30 e0       	ldi	r19, 0x00	; 0
   155da:	31 83       	std	Z+1, r19	; 0x01
   155dc:	20 83       	st	Z, r18
   155de:	85 ff       	sbrs	r24, 5
   155e0:	6e c0       	rjmp	.+220    	; 0x156be <SS80_Command_State+0x472>
   155e2:	8b e5       	ldi	r24, 0x5B	; 91
   155e4:	95 e2       	ldi	r25, 0x25	; 37
   155e6:	17 cf       	rjmp	.-466    	; 0x15416 <SS80_Command_State+0x1ca>
   155e8:	27 33       	cpi	r18, 0x37	; 55
   155ea:	31 05       	cpc	r19, r1
   155ec:	59 f4       	brne	.+22     	; 0x15604 <SS80_Command_State+0x3b8>
   155ee:	87 01       	movw	r16, r14
   155f0:	0d 5f       	subi	r16, 0xFD	; 253
   155f2:	1f 4f       	sbci	r17, 0xFF	; 255
   155f4:	80 73       	andi	r24, 0x30	; 48
   155f6:	99 27       	eor	r25, r25
   155f8:	89 2b       	or	r24, r25
   155fa:	09 f4       	brne	.+2      	; 0x155fe <SS80_Command_State+0x3b2>
   155fc:	60 c0       	rjmp	.+192    	; 0x156be <SS80_Command_State+0x472>
   155fe:	8d e3       	ldi	r24, 0x3D	; 61
   15600:	95 e2       	ldi	r25, 0x25	; 37
   15602:	09 cf       	rjmp	.-494    	; 0x15416 <SS80_Command_State+0x1ca>
   15604:	2e 33       	cpi	r18, 0x3E	; 62
   15606:	31 05       	cpc	r19, r1
   15608:	c1 f4       	brne	.+48     	; 0x1563a <SS80_Command_State+0x3ee>
   1560a:	80 73       	andi	r24, 0x30	; 48
   1560c:	99 27       	eor	r25, r25
   1560e:	89 2b       	or	r24, r25
   15610:	81 f0       	breq	.+32     	; 0x15632 <SS80_Command_State+0x3e6>
   15612:	8e e1       	ldi	r24, 0x1E	; 30
   15614:	95 e2       	ldi	r25, 0x25	; 37
   15616:	a0 e0       	ldi	r26, 0x00	; 0
   15618:	ed b7       	in	r30, 0x3d	; 61
   1561a:	fe b7       	in	r31, 0x3e	; 62
   1561c:	81 83       	std	Z+1, r24	; 0x01
   1561e:	92 83       	std	Z+2, r25	; 0x02
   15620:	a3 83       	std	Z+3, r26	; 0x03
   15622:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   15626:	6d e6       	ldi	r22, 0x6D	; 109
   15628:	70 e1       	ldi	r23, 0x10	; 16
   1562a:	c8 01       	movw	r24, r16
   1562c:	86 51       	subi	r24, 0x16	; 22
   1562e:	93 4e       	sbci	r25, 0xE3	; 227
   15630:	69 dc       	rcall	.-1838   	; 0x14f04 <SS80_display_extended_status>
   15632:	87 01       	movw	r16, r14
   15634:	07 5f       	subi	r16, 0xF7	; 247
   15636:	1f 4f       	sbci	r17, 0xFF	; 255
   15638:	42 c0       	rjmp	.+132    	; 0x156be <SS80_Command_State+0x472>
   1563a:	2c 34       	cpi	r18, 0x4C	; 76
   1563c:	31 05       	cpc	r19, r1
   1563e:	39 f4       	brne	.+14     	; 0x1564e <SS80_Command_State+0x402>
   15640:	80 73       	andi	r24, 0x30	; 48
   15642:	99 27       	eor	r25, r25
   15644:	89 2b       	or	r24, r25
   15646:	d9 f1       	breq	.+118    	; 0x156be <SS80_Command_State+0x472>
   15648:	83 e0       	ldi	r24, 0x03	; 3
   1564a:	95 e2       	ldi	r25, 0x25	; 37
   1564c:	e4 ce       	rjmp	.-568    	; 0x15416 <SS80_Command_State+0x1ca>
   1564e:	2d 34       	cpi	r18, 0x4D	; 77
   15650:	31 05       	cpc	r19, r1
   15652:	39 f4       	brne	.+14     	; 0x15662 <SS80_Command_State+0x416>
   15654:	80 73       	andi	r24, 0x30	; 48
   15656:	99 27       	eor	r25, r25
   15658:	89 2b       	or	r24, r25
   1565a:	89 f1       	breq	.+98     	; 0x156be <SS80_Command_State+0x472>
   1565c:	8a ee       	ldi	r24, 0xEA	; 234
   1565e:	94 e2       	ldi	r25, 0x24	; 36
   15660:	da ce       	rjmp	.-588    	; 0x15416 <SS80_Command_State+0x1ca>
   15662:	2d 30       	cpi	r18, 0x0D	; 13
   15664:	31 05       	cpc	r19, r1
   15666:	69 f4       	brne	.+26     	; 0x15682 <SS80_Command_State+0x436>
   15668:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   1566c:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15670:	23 e0       	ldi	r18, 0x03	; 3
   15672:	30 e0       	ldi	r19, 0x00	; 0
   15674:	31 83       	std	Z+1, r19	; 0x01
   15676:	20 83       	st	Z, r18
   15678:	85 ff       	sbrs	r24, 5
   1567a:	21 c0       	rjmp	.+66     	; 0x156be <SS80_Command_State+0x472>
   1567c:	83 ed       	ldi	r24, 0xD3	; 211
   1567e:	94 e2       	ldi	r25, 0x24	; 36
   15680:	ca ce       	rjmp	.-620    	; 0x15416 <SS80_Command_State+0x1ca>
   15682:	23 33       	cpi	r18, 0x33	; 51
   15684:	31 05       	cpc	r19, r1
   15686:	51 f4       	brne	.+20     	; 0x1569c <SS80_Command_State+0x450>
   15688:	87 01       	movw	r16, r14
   1568a:	0c 5f       	subi	r16, 0xFC	; 252
   1568c:	1f 4f       	sbci	r17, 0xFF	; 255
   1568e:	80 73       	andi	r24, 0x30	; 48
   15690:	99 27       	eor	r25, r25
   15692:	89 2b       	or	r24, r25
   15694:	a1 f0       	breq	.+40     	; 0x156be <SS80_Command_State+0x472>
   15696:	80 eb       	ldi	r24, 0xB0	; 176
   15698:	94 e2       	ldi	r25, 0x24	; 36
   1569a:	bd ce       	rjmp	.-646    	; 0x15416 <SS80_Command_State+0x1ca>
   1569c:	80 ff       	sbrs	r24, 0
   1569e:	28 c0       	rjmp	.+80     	; 0x156f0 <SS80_Command_State+0x4a4>
   156a0:	ed b7       	in	r30, 0x3d	; 61
   156a2:	fe b7       	in	r31, 0x3e	; 62
   156a4:	35 83       	std	Z+5, r19	; 0x05
   156a6:	24 83       	std	Z+4, r18	; 0x04
   156a8:	80 e9       	ldi	r24, 0x90	; 144
   156aa:	94 e2       	ldi	r25, 0x24	; 36
   156ac:	a0 e0       	ldi	r26, 0x00	; 0
   156ae:	81 83       	std	Z+1, r24	; 0x01
   156b0:	92 83       	std	Z+2, r25	; 0x02
   156b2:	a3 83       	std	Z+3, r26	; 0x03
   156b4:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   156b8:	02 c0       	rjmp	.+4      	; 0x156be <SS80_Command_State+0x472>
   156ba:	78 01       	movw	r14, r16
   156bc:	43 ce       	rjmp	.-890    	; 0x15344 <SS80_Command_State+0xf8>
   156be:	8a 85       	ldd	r24, Y+10	; 0x0a
   156c0:	9b 85       	ldd	r25, Y+11	; 0x0b
   156c2:	08 17       	cp	r16, r24
   156c4:	19 07       	cpc	r17, r25
   156c6:	a1 f0       	breq	.+40     	; 0x156f0 <SS80_Command_State+0x4a4>
   156c8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   156cc:	80 ff       	sbrs	r24, 0
   156ce:	10 c0       	rjmp	.+32     	; 0x156f0 <SS80_Command_State+0x4a4>
   156d0:	2a 85       	ldd	r18, Y+10	; 0x0a
   156d2:	3b 85       	ldd	r19, Y+11	; 0x0b
   156d4:	ed b7       	in	r30, 0x3d	; 61
   156d6:	fe b7       	in	r31, 0x3e	; 62
   156d8:	37 83       	std	Z+7, r19	; 0x07
   156da:	26 83       	std	Z+6, r18	; 0x06
   156dc:	15 83       	std	Z+5, r17	; 0x05
   156de:	04 83       	std	Z+4, r16	; 0x04
   156e0:	88 e5       	ldi	r24, 0x58	; 88
   156e2:	94 e2       	ldi	r25, 0x24	; 36
   156e4:	a0 e0       	ldi	r26, 0x00	; 0
   156e6:	81 83       	std	Z+1, r24	; 0x01
   156e8:	92 83       	std	Z+2, r25	; 0x02
   156ea:	a3 83       	std	Z+3, r26	; 0x03
   156ec:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   156f0:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   156f4:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   156f8:	81 81       	ldd	r24, Z+1	; 0x01
   156fa:	90 e0       	ldi	r25, 0x00	; 0
   156fc:	0e 94 6d 86 	call	0x10cda	; 0x10cda <gpib_enable_PPR>
   15700:	88 85       	ldd	r24, Y+8	; 0x08
   15702:	99 85       	ldd	r25, Y+9	; 0x09
   15704:	88 27       	eor	r24, r24
   15706:	90 7d       	andi	r25, 0xD0	; 208
   15708:	02 c0       	rjmp	.+4      	; 0x1570e <SS80_Command_State+0x4c2>
   1570a:	80 e0       	ldi	r24, 0x00	; 0
   1570c:	90 e0       	ldi	r25, 0x00	; 0
   1570e:	66 96       	adiw	r28, 0x16	; 22
   15710:	0f b6       	in	r0, 0x3f	; 63
   15712:	f8 94       	cli
   15714:	de bf       	out	0x3e, r29	; 62
   15716:	0f be       	out	0x3f, r0	; 63
   15718:	cd bf       	out	0x3d, r28	; 61
   1571a:	df 91       	pop	r29
   1571c:	cf 91       	pop	r28
   1571e:	1f 91       	pop	r17
   15720:	0f 91       	pop	r16
   15722:	ff 90       	pop	r15
   15724:	ef 90       	pop	r14
   15726:	cf 90       	pop	r12
   15728:	bf 90       	pop	r11
   1572a:	af 90       	pop	r10
   1572c:	8f 90       	pop	r8
   1572e:	7f 90       	pop	r7
   15730:	6f 90       	pop	r6
   15732:	4f 90       	pop	r4
   15734:	3f 90       	pop	r3
   15736:	2f 90       	pop	r2
   15738:	08 95       	ret

0001573a <SS80_cmd_seek>:
   1573a:	a7 e0       	ldi	r26, 0x07	; 7
   1573c:	b0 e0       	ldi	r27, 0x00	; 0
   1573e:	e3 ea       	ldi	r30, 0xA3	; 163
   15740:	fb ea       	ldi	r31, 0xAB	; 171
   15742:	0c 94 0f e7 	jmp	0x1ce1e	; 0x1ce1e <__prologue_saves__+0x4>
   15746:	c0 91 66 19 	lds	r28, 0x1966	; 0x801966 <SS80s>
   1574a:	d0 91 67 19 	lds	r29, 0x1967	; 0x801967 <SS80s+0x1>
   1574e:	8f 80       	ldd	r8, Y+7	; 0x07
   15750:	98 84       	ldd	r9, Y+8	; 0x08
   15752:	a9 84       	ldd	r10, Y+9	; 0x09
   15754:	ba 84       	ldd	r11, Y+10	; 0x0a
   15756:	00 91 68 19 	lds	r16, 0x1968	; 0x801968 <SS80p>
   1575a:	10 91 69 19 	lds	r17, 0x1969	; 0x801969 <SS80p+0x1>
   1575e:	f8 01       	movw	r30, r16
   15760:	c2 88       	ldd	r12, Z+18	; 0x12
   15762:	d3 88       	ldd	r13, Z+19	; 0x13
   15764:	e1 2c       	mov	r14, r1
   15766:	f1 2c       	mov	r15, r1
   15768:	6b 85       	ldd	r22, Y+11	; 0x0b
   1576a:	7c 85       	ldd	r23, Y+12	; 0x0c
   1576c:	8d 85       	ldd	r24, Y+13	; 0x0d
   1576e:	9e 85       	ldd	r25, Y+14	; 0x0e
   15770:	a7 01       	movw	r20, r14
   15772:	96 01       	movw	r18, r12
   15774:	0e 94 a0 e6 	call	0x1cd40	; 0x1cd40 <__udivmodsi4>
   15778:	da 01       	movw	r26, r20
   1577a:	c9 01       	movw	r24, r18
   1577c:	88 0d       	add	r24, r8
   1577e:	99 1d       	adc	r25, r9
   15780:	aa 1d       	adc	r26, r10
   15782:	bb 1d       	adc	r27, r11
   15784:	f8 01       	movw	r30, r16
   15786:	40 a4       	ldd	r4, Z+40	; 0x28
   15788:	51 a4       	ldd	r5, Z+41	; 0x29
   1578a:	62 a4       	ldd	r6, Z+42	; 0x2a
   1578c:	73 a4       	ldd	r7, Z+43	; 0x2b
   1578e:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   15792:	50 91 b7 01 	lds	r21, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   15796:	48 16       	cp	r4, r24
   15798:	59 06       	cpc	r5, r25
   1579a:	6a 06       	cpc	r6, r26
   1579c:	7b 06       	cpc	r7, r27
   1579e:	f0 f4       	brcc	.+60     	; 0x157dc <SS80_cmd_seek+0xa2>
   157a0:	81 e0       	ldi	r24, 0x01	; 1
   157a2:	8a 83       	std	Y+2, r24	; 0x02
   157a4:	8b 81       	ldd	r24, Y+3	; 0x03
   157a6:	9c 81       	ldd	r25, Y+4	; 0x04
   157a8:	84 60       	ori	r24, 0x04	; 4
   157aa:	9c 83       	std	Y+4, r25	; 0x04
   157ac:	8b 83       	std	Y+3, r24	; 0x03
   157ae:	40 ff       	sbrs	r20, 0
   157b0:	31 c0       	rjmp	.+98     	; 0x15814 <SS80_cmd_seek+0xda>
   157b2:	a2 89       	ldd	r26, Z+18	; 0x12
   157b4:	b3 89       	ldd	r27, Z+19	; 0x13
   157b6:	a5 01       	movw	r20, r10
   157b8:	94 01       	movw	r18, r8
   157ba:	0e 94 ed e6 	call	0x1cdda	; 0x1cdda <__muluhisi3>
   157be:	ed b7       	in	r30, 0x3d	; 61
   157c0:	fe b7       	in	r31, 0x3e	; 62
   157c2:	64 83       	std	Z+4, r22	; 0x04
   157c4:	75 83       	std	Z+5, r23	; 0x05
   157c6:	86 83       	std	Z+6, r24	; 0x06
   157c8:	97 83       	std	Z+7, r25	; 0x07
   157ca:	85 e1       	ldi	r24, 0x15	; 21
   157cc:	93 e2       	ldi	r25, 0x23	; 35
   157ce:	a0 e0       	ldi	r26, 0x00	; 0
   157d0:	81 83       	std	Z+1, r24	; 0x01
   157d2:	92 83       	std	Z+2, r25	; 0x02
   157d4:	a3 83       	std	Z+3, r26	; 0x03
   157d6:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   157da:	1c c0       	rjmp	.+56     	; 0x15814 <SS80_cmd_seek+0xda>
   157dc:	ca 01       	movw	r24, r20
   157de:	80 72       	andi	r24, 0x20	; 32
   157e0:	99 27       	eor	r25, r25
   157e2:	45 ff       	sbrs	r20, 5
   157e4:	19 c0       	rjmp	.+50     	; 0x15818 <SS80_cmd_seek+0xde>
   157e6:	a5 01       	movw	r20, r10
   157e8:	94 01       	movw	r18, r8
   157ea:	c7 01       	movw	r24, r14
   157ec:	b6 01       	movw	r22, r12
   157ee:	0e 94 5e e6 	call	0x1ccbc	; 0x1ccbc <__mulsi3>
   157f2:	ed b7       	in	r30, 0x3d	; 61
   157f4:	fe b7       	in	r31, 0x3e	; 62
   157f6:	64 83       	std	Z+4, r22	; 0x04
   157f8:	75 83       	std	Z+5, r23	; 0x05
   157fa:	86 83       	std	Z+6, r24	; 0x06
   157fc:	97 83       	std	Z+7, r25	; 0x07
   157fe:	81 e0       	ldi	r24, 0x01	; 1
   15800:	93 e2       	ldi	r25, 0x23	; 35
   15802:	a0 e0       	ldi	r26, 0x00	; 0
   15804:	81 83       	std	Z+1, r24	; 0x01
   15806:	92 83       	std	Z+2, r25	; 0x02
   15808:	a3 83       	std	Z+3, r26	; 0x03
   1580a:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   1580e:	80 e0       	ldi	r24, 0x00	; 0
   15810:	90 e0       	ldi	r25, 0x00	; 0
   15812:	02 c0       	rjmp	.+4      	; 0x15818 <SS80_cmd_seek+0xde>
   15814:	81 e0       	ldi	r24, 0x01	; 1
   15816:	90 e0       	ldi	r25, 0x00	; 0
   15818:	cd b7       	in	r28, 0x3d	; 61
   1581a:	de b7       	in	r29, 0x3e	; 62
   1581c:	27 96       	adiw	r28, 0x07	; 7
   1581e:	e0 e1       	ldi	r30, 0x10	; 16
   15820:	0c 94 2b e7 	jmp	0x1ce56	; 0x1ce56 <__epilogue_restores__+0x4>

00015824 <SS80_locate_and_write>:
   15824:	a3 e1       	ldi	r26, 0x13	; 19
   15826:	b0 e0       	ldi	r27, 0x00	; 0
   15828:	e8 e1       	ldi	r30, 0x18	; 24
   1582a:	fc ea       	ldi	r31, 0xAC	; 172
   1582c:	0c 94 0d e7 	jmp	0x1ce1a	; 0x1ce1a <__prologue_saves__>
   15830:	00 91 66 19 	lds	r16, 0x1966	; 0x801966 <SS80s>
   15834:	10 91 67 19 	lds	r17, 0x1967	; 0x801967 <SS80s+0x1>
   15838:	80 91 68 19 	lds	r24, 0x1968	; 0x801968 <SS80p>
   1583c:	90 91 69 19 	lds	r25, 0x1969	; 0x801969 <SS80p+0x1>
   15840:	fc 01       	movw	r30, r24
   15842:	a2 89       	ldd	r26, Z+18	; 0x12
   15844:	b3 89       	ldd	r27, Z+19	; 0x13
   15846:	f8 01       	movw	r30, r16
   15848:	27 81       	ldd	r18, Z+7	; 0x07
   1584a:	30 85       	ldd	r19, Z+8	; 0x08
   1584c:	41 85       	ldd	r20, Z+9	; 0x09
   1584e:	52 85       	ldd	r21, Z+10	; 0x0a
   15850:	0e 94 ed e6 	call	0x1cdda	; 0x1cdda <__muluhisi3>
   15854:	4b 01       	movw	r8, r22
   15856:	5c 01       	movw	r10, r24
   15858:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1585c:	85 ff       	sbrs	r24, 5
   1585e:	16 c0       	rjmp	.+44     	; 0x1588c <SS80_locate_and_write+0x68>
   15860:	83 85       	ldd	r24, Z+11	; 0x0b
   15862:	94 85       	ldd	r25, Z+12	; 0x0c
   15864:	a5 85       	ldd	r26, Z+13	; 0x0d
   15866:	b6 85       	ldd	r27, Z+14	; 0x0e
   15868:	ed b7       	in	r30, 0x3d	; 61
   1586a:	fe b7       	in	r31, 0x3e	; 62
   1586c:	80 87       	std	Z+8, r24	; 0x08
   1586e:	91 87       	std	Z+9, r25	; 0x09
   15870:	a2 87       	std	Z+10, r26	; 0x0a
   15872:	b3 87       	std	Z+11, r27	; 0x0b
   15874:	84 82       	std	Z+4, r8	; 0x04
   15876:	95 82       	std	Z+5, r9	; 0x05
   15878:	a6 82       	std	Z+6, r10	; 0x06
   1587a:	b7 82       	std	Z+7, r11	; 0x07
   1587c:	88 e9       	ldi	r24, 0x98	; 152
   1587e:	98 e2       	ldi	r25, 0x28	; 40
   15880:	a0 e0       	ldi	r26, 0x00	; 0
   15882:	81 83       	std	Z+1, r24	; 0x01
   15884:	92 83       	std	Z+2, r25	; 0x02
   15886:	a3 83       	std	Z+3, r26	; 0x03
   15888:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   1588c:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15890:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15894:	12 82       	std	Z+2, r1	; 0x02
   15896:	54 98       	cbi	0x0a, 4	; 10
   15898:	4c 99       	sbic	0x09, 4	; 9
   1589a:	03 c0       	rjmp	.+6      	; 0x158a2 <SS80_locate_and_write+0x7e>
   1589c:	80 e0       	ldi	r24, 0x00	; 0
   1589e:	90 e1       	ldi	r25, 0x10	; 16
   158a0:	4f c1       	rjmp	.+670    	; 0x15b40 <SS80_locate_and_write+0x31c>
   158a2:	4b df       	rcall	.-362    	; 0x1573a <SS80_cmd_seek>
   158a4:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   158a8:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   158ac:	89 2b       	or	r24, r25
   158ae:	41 f0       	breq	.+16     	; 0x158c0 <SS80_locate_and_write+0x9c>
   158b0:	83 81       	ldd	r24, Z+3	; 0x03
   158b2:	94 81       	ldd	r25, Z+4	; 0x04
   158b4:	82 60       	ori	r24, 0x02	; 2
   158b6:	94 83       	std	Z+4, r25	; 0x04
   158b8:	83 83       	std	Z+3, r24	; 0x03
   158ba:	01 e0       	ldi	r16, 0x01	; 1
   158bc:	10 e0       	ldi	r17, 0x00	; 0
   158be:	02 c0       	rjmp	.+4      	; 0x158c4 <SS80_locate_and_write+0xa0>
   158c0:	00 e0       	ldi	r16, 0x00	; 0
   158c2:	10 e0       	ldi	r17, 0x00	; 0
   158c4:	23 84       	ldd	r2, Z+11	; 0x0b
   158c6:	34 84       	ldd	r3, Z+12	; 0x0c
   158c8:	1d 86       	std	Y+13, r1	; 0x0d
   158ca:	1c 86       	std	Y+12, r1	; 0x0c
   158cc:	41 2c       	mov	r4, r1
   158ce:	51 2c       	mov	r5, r1
   158d0:	32 01       	movw	r6, r4
   158d2:	8b e4       	ldi	r24, 0x4B	; 75
   158d4:	98 e2       	ldi	r25, 0x28	; 40
   158d6:	9c 01       	movw	r18, r24
   158d8:	40 e0       	ldi	r20, 0x00	; 0
   158da:	2e 87       	std	Y+14, r18	; 0x0e
   158dc:	3f 87       	std	Y+15, r19	; 0x0f
   158de:	48 8b       	std	Y+16, r20	; 0x10
   158e0:	81 e7       	ldi	r24, 0x71	; 113
   158e2:	98 e2       	ldi	r25, 0x28	; 40
   158e4:	9c 01       	movw	r18, r24
   158e6:	40 e0       	ldi	r20, 0x00	; 0
   158e8:	29 8b       	std	Y+17, r18	; 0x11
   158ea:	3a 8b       	std	Y+18, r19	; 0x12
   158ec:	4b 8b       	std	Y+19, r20	; 0x13
   158ee:	12 14       	cp	r1, r2
   158f0:	13 04       	cpc	r1, r3
   158f2:	0c f0       	brlt	.+2      	; 0x158f6 <SS80_locate_and_write+0xd2>
   158f4:	f5 c0       	rjmp	.+490    	; 0x15ae0 <SS80_locate_and_write+0x2bc>
   158f6:	54 98       	cbi	0x0a, 4	; 10
   158f8:	4c 9b       	sbis	0x09, 4	; 9
   158fa:	d0 cf       	rjmp	.-96     	; 0x1589c <SS80_locate_and_write+0x78>
   158fc:	71 01       	movw	r14, r2
   158fe:	31 e0       	ldi	r19, 0x01	; 1
   15900:	23 16       	cp	r2, r19
   15902:	33 06       	cpc	r3, r19
   15904:	1c f0       	brlt	.+6      	; 0x1590c <SS80_locate_and_write+0xe8>
   15906:	e1 2c       	mov	r14, r1
   15908:	ff 24       	eor	r15, r15
   1590a:	f3 94       	inc	r15
   1590c:	ea ee       	ldi	r30, 0xEA	; 234
   1590e:	fc e1       	ldi	r31, 0x1C	; 28
   15910:	20 e0       	ldi	r18, 0x00	; 0
   15912:	32 e0       	ldi	r19, 0x02	; 2
   15914:	11 92       	st	Z+, r1
   15916:	21 50       	subi	r18, 0x01	; 1
   15918:	30 40       	sbci	r19, 0x00	; 0
   1591a:	e1 f7       	brne	.-8      	; 0x15914 <SS80_locate_and_write+0xf0>
   1591c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15920:	87 fd       	sbrc	r24, 7
   15922:	0e 94 93 85 	call	0x10b26	; 0x10b26 <gpib_timer_elapsed_begin>
   15926:	ae 01       	movw	r20, r28
   15928:	44 5f       	subi	r20, 0xF4	; 244
   1592a:	5f 4f       	sbci	r21, 0xFF	; 255
   1592c:	b7 01       	movw	r22, r14
   1592e:	8a ee       	ldi	r24, 0xEA	; 234
   15930:	9c e1       	ldi	r25, 0x1C	; 28
   15932:	0e 94 fb 8a 	call	0x115f6	; 0x115f6 <gpib_read_str>
   15936:	6c 01       	movw	r12, r24
   15938:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1593c:	87 ff       	sbrs	r24, 7
   1593e:	04 c0       	rjmp	.+8      	; 0x15948 <SS80_locate_and_write+0x124>
   15940:	89 e8       	ldi	r24, 0x89	; 137
   15942:	90 e1       	ldi	r25, 0x10	; 16
   15944:	0e 94 a5 85 	call	0x10b4a	; 0x10b4a <gpib_timer_elapsed_end>
   15948:	ce 14       	cp	r12, r14
   1594a:	df 04       	cpc	r13, r15
   1594c:	39 f1       	breq	.+78     	; 0x1599c <SS80_locate_and_write+0x178>
   1594e:	8c 85       	ldd	r24, Y+12	; 0x0c
   15950:	9d 85       	ldd	r25, Y+13	; 0x0d
   15952:	9c 01       	movw	r18, r24
   15954:	22 27       	eor	r18, r18
   15956:	30 7d       	andi	r19, 0xD0	; 208
   15958:	23 2b       	or	r18, r19
   1595a:	d1 f0       	breq	.+52     	; 0x15990 <SS80_locate_and_write+0x16c>
   1595c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15960:	80 ff       	sbrs	r24, 0
   15962:	0a c0       	rjmp	.+20     	; 0x15978 <SS80_locate_and_write+0x154>
   15964:	85 e8       	ldi	r24, 0x85	; 133
   15966:	98 e2       	ldi	r25, 0x28	; 40
   15968:	a0 e0       	ldi	r26, 0x00	; 0
   1596a:	ed b7       	in	r30, 0x3d	; 61
   1596c:	fe b7       	in	r31, 0x3e	; 62
   1596e:	81 83       	std	Z+1, r24	; 0x01
   15970:	92 83       	std	Z+2, r25	; 0x02
   15972:	a3 83       	std	Z+3, r26	; 0x03
   15974:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   15978:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   1597c:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15980:	83 81       	ldd	r24, Z+3	; 0x03
   15982:	94 81       	ldd	r25, Z+4	; 0x04
   15984:	82 60       	ori	r24, 0x02	; 2
   15986:	94 83       	std	Z+4, r25	; 0x04
   15988:	83 83       	std	Z+3, r24	; 0x03
   1598a:	81 e0       	ldi	r24, 0x01	; 1
   1598c:	82 83       	std	Z+2, r24	; 0x02
   1598e:	99 c0       	rjmp	.+306    	; 0x15ac2 <SS80_locate_and_write+0x29e>
   15990:	c1 14       	cp	r12, r1
   15992:	d1 04       	cpc	r13, r1
   15994:	09 f0       	breq	.+2      	; 0x15998 <SS80_locate_and_write+0x174>
   15996:	d0 c0       	rjmp	.+416    	; 0x15b38 <SS80_locate_and_write+0x314>
   15998:	90 fd       	sbrc	r25, 0
   1599a:	93 c0       	rjmp	.+294    	; 0x15ac2 <SS80_locate_and_write+0x29e>
   1599c:	01 15       	cp	r16, r1
   1599e:	11 05       	cpc	r17, r1
   159a0:	09 f0       	breq	.+2      	; 0x159a4 <SS80_locate_and_write+0x180>
   159a2:	84 c0       	rjmp	.+264    	; 0x15aac <SS80_locate_and_write+0x288>
   159a4:	c1 14       	cp	r12, r1
   159a6:	d1 04       	cpc	r13, r1
   159a8:	09 f4       	brne	.+2      	; 0x159ac <SS80_locate_and_write+0x188>
   159aa:	82 c0       	rjmp	.+260    	; 0x15ab0 <SS80_locate_and_write+0x28c>
   159ac:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   159b0:	86 fd       	sbrc	r24, 6
   159b2:	0e 94 93 85 	call	0x10b26	; 0x10b26 <gpib_timer_elapsed_begin>
   159b6:	e0 90 66 19 	lds	r14, 0x1966	; 0x801966 <SS80s>
   159ba:	f0 90 67 19 	lds	r15, 0x1967	; 0x801967 <SS80s+0x1>
   159be:	f3 e0       	ldi	r31, 0x03	; 3
   159c0:	ef 0e       	add	r14, r31
   159c2:	f1 1c       	adc	r15, r1
   159c4:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   159c8:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   159cc:	86 01       	movw	r16, r12
   159ce:	2a ee       	ldi	r18, 0xEA	; 234
   159d0:	3c e1       	ldi	r19, 0x1C	; 28
   159d2:	b5 01       	movw	r22, r10
   159d4:	a4 01       	movw	r20, r8
   159d6:	82 81       	ldd	r24, Z+2	; 0x02
   159d8:	93 81       	ldd	r25, Z+3	; 0x03
   159da:	0e 94 3c 85 	call	0x10a78	; 0x10a78 <dbf_open_write>
   159de:	7c 01       	movw	r14, r24
   159e0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   159e4:	86 ff       	sbrs	r24, 6
   159e6:	04 c0       	rjmp	.+8      	; 0x159f0 <SS80_locate_and_write+0x1cc>
   159e8:	84 e9       	ldi	r24, 0x94	; 148
   159ea:	90 e1       	ldi	r25, 0x10	; 16
   159ec:	0e 94 a5 85 	call	0x10b4a	; 0x10b4a <gpib_timer_elapsed_end>
   159f0:	ce 14       	cp	r12, r14
   159f2:	df 04       	cpc	r13, r15
   159f4:	39 f1       	breq	.+78     	; 0x15a44 <SS80_locate_and_write+0x220>
   159f6:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   159fa:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   159fe:	83 81       	ldd	r24, Z+3	; 0x03
   15a00:	94 81       	ldd	r25, Z+4	; 0x04
   15a02:	82 60       	ori	r24, 0x02	; 2
   15a04:	94 83       	std	Z+4, r25	; 0x04
   15a06:	83 83       	std	Z+3, r24	; 0x03
   15a08:	0e 94 1c 70 	call	0xe038	; 0xe038 <mmc_wp_status>
   15a0c:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15a10:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15a14:	89 2b       	or	r24, r25
   15a16:	29 f0       	breq	.+10     	; 0x15a22 <SS80_locate_and_write+0x1fe>
   15a18:	83 81       	ldd	r24, Z+3	; 0x03
   15a1a:	94 81       	ldd	r25, Z+4	; 0x04
   15a1c:	88 60       	ori	r24, 0x08	; 8
   15a1e:	94 83       	std	Z+4, r25	; 0x04
   15a20:	83 83       	std	Z+3, r24	; 0x03
   15a22:	21 e0       	ldi	r18, 0x01	; 1
   15a24:	22 83       	std	Z+2, r18	; 0x02
   15a26:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15a2a:	80 ff       	sbrs	r24, 0
   15a2c:	27 c0       	rjmp	.+78     	; 0x15a7c <SS80_locate_and_write+0x258>
   15a2e:	89 89       	ldd	r24, Y+17	; 0x11
   15a30:	9a 89       	ldd	r25, Y+18	; 0x12
   15a32:	ab 89       	ldd	r26, Y+19	; 0x13
   15a34:	ed b7       	in	r30, 0x3d	; 61
   15a36:	fe b7       	in	r31, 0x3e	; 62
   15a38:	81 83       	std	Z+1, r24	; 0x01
   15a3a:	92 83       	std	Z+2, r25	; 0x02
   15a3c:	a3 83       	std	Z+3, r26	; 0x03
   15a3e:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   15a42:	1c c0       	rjmp	.+56     	; 0x15a7c <SS80_locate_and_write+0x258>
   15a44:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15a48:	85 ff       	sbrs	r24, 5
   15a4a:	0c c0       	rjmp	.+24     	; 0x15a64 <SS80_locate_and_write+0x240>
   15a4c:	ed b7       	in	r30, 0x3d	; 61
   15a4e:	fe b7       	in	r31, 0x3e	; 62
   15a50:	d5 82       	std	Z+5, r13	; 0x05
   15a52:	c4 82       	std	Z+4, r12	; 0x04
   15a54:	2e 85       	ldd	r18, Y+14	; 0x0e
   15a56:	3f 85       	ldd	r19, Y+15	; 0x0f
   15a58:	48 89       	ldd	r20, Y+16	; 0x10
   15a5a:	21 83       	std	Z+1, r18	; 0x01
   15a5c:	32 83       	std	Z+2, r19	; 0x02
   15a5e:	43 83       	std	Z+3, r20	; 0x03
   15a60:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   15a64:	c6 01       	movw	r24, r12
   15a66:	0d 2c       	mov	r0, r13
   15a68:	00 0c       	add	r0, r0
   15a6a:	aa 0b       	sbc	r26, r26
   15a6c:	bb 0b       	sbc	r27, r27
   15a6e:	88 0e       	add	r8, r24
   15a70:	99 1e       	adc	r9, r25
   15a72:	aa 1e       	adc	r10, r26
   15a74:	bb 1e       	adc	r11, r27
   15a76:	00 e0       	ldi	r16, 0x00	; 0
   15a78:	10 e0       	ldi	r17, 0x00	; 0
   15a7a:	05 c0       	rjmp	.+10     	; 0x15a86 <SS80_locate_and_write+0x262>
   15a7c:	ec 14       	cp	r14, r12
   15a7e:	fd 04       	cpc	r15, r13
   15a80:	64 f0       	brlt	.+24     	; 0x15a9a <SS80_locate_and_write+0x276>
   15a82:	01 e0       	ldi	r16, 0x01	; 1
   15a84:	10 e0       	ldi	r17, 0x00	; 0
   15a86:	c7 01       	movw	r24, r14
   15a88:	0f 2c       	mov	r0, r15
   15a8a:	00 0c       	add	r0, r0
   15a8c:	aa 0b       	sbc	r26, r26
   15a8e:	bb 0b       	sbc	r27, r27
   15a90:	48 0e       	add	r4, r24
   15a92:	59 1e       	adc	r5, r25
   15a94:	6a 1e       	adc	r6, r26
   15a96:	7b 1e       	adc	r7, r27
   15a98:	0b c0       	rjmp	.+22     	; 0x15ab0 <SS80_locate_and_write+0x28c>
   15a9a:	c6 01       	movw	r24, r12
   15a9c:	0d 2c       	mov	r0, r13
   15a9e:	00 0c       	add	r0, r0
   15aa0:	aa 0b       	sbc	r26, r26
   15aa2:	bb 0b       	sbc	r27, r27
   15aa4:	48 0e       	add	r4, r24
   15aa6:	59 1e       	adc	r5, r25
   15aa8:	6a 1e       	adc	r6, r26
   15aaa:	7b 1e       	adc	r7, r27
   15aac:	01 e0       	ldi	r16, 0x01	; 1
   15aae:	10 e0       	ldi	r17, 0x00	; 0
   15ab0:	2c 18       	sub	r2, r12
   15ab2:	3d 08       	sbc	r3, r13
   15ab4:	8c 85       	ldd	r24, Y+12	; 0x0c
   15ab6:	9d 85       	ldd	r25, Y+13	; 0x0d
   15ab8:	90 ff       	sbrs	r25, 0
   15aba:	19 cf       	rjmp	.-462    	; 0x158ee <SS80_locate_and_write+0xca>
   15abc:	12 14       	cp	r1, r2
   15abe:	13 04       	cpc	r1, r3
   15ac0:	7c f4       	brge	.+30     	; 0x15ae0 <SS80_locate_and_write+0x2bc>
   15ac2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15ac6:	80 ff       	sbrs	r24, 0
   15ac8:	1d c0       	rjmp	.+58     	; 0x15b04 <SS80_locate_and_write+0x2e0>
   15aca:	83 e2       	ldi	r24, 0x23	; 35
   15acc:	98 e2       	ldi	r25, 0x28	; 40
   15ace:	a0 e0       	ldi	r26, 0x00	; 0
   15ad0:	ed b7       	in	r30, 0x3d	; 61
   15ad2:	fe b7       	in	r31, 0x3e	; 62
   15ad4:	81 83       	std	Z+1, r24	; 0x01
   15ad6:	92 83       	std	Z+2, r25	; 0x02
   15ad8:	a3 83       	std	Z+3, r26	; 0x03
   15ada:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   15ade:	12 c0       	rjmp	.+36     	; 0x15b04 <SS80_locate_and_write+0x2e0>
   15ae0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15ae4:	85 ff       	sbrs	r24, 5
   15ae6:	0e c0       	rjmp	.+28     	; 0x15b04 <SS80_locate_and_write+0x2e0>
   15ae8:	ed b7       	in	r30, 0x3d	; 61
   15aea:	fe b7       	in	r31, 0x3e	; 62
   15aec:	44 82       	std	Z+4, r4	; 0x04
   15aee:	55 82       	std	Z+5, r5	; 0x05
   15af0:	66 82       	std	Z+6, r6	; 0x06
   15af2:	77 82       	std	Z+7, r7	; 0x07
   15af4:	88 ef       	ldi	r24, 0xF8	; 248
   15af6:	97 e2       	ldi	r25, 0x27	; 39
   15af8:	a0 e0       	ldi	r26, 0x00	; 0
   15afa:	81 83       	std	Z+1, r24	; 0x01
   15afc:	92 83       	std	Z+2, r25	; 0x02
   15afe:	a3 83       	std	Z+3, r26	; 0x03
   15b00:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   15b04:	00 91 66 19 	lds	r16, 0x1966	; 0x801966 <SS80s>
   15b08:	10 91 67 19 	lds	r17, 0x1967	; 0x801967 <SS80s+0x1>
   15b0c:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   15b10:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   15b14:	22 89       	ldd	r18, Z+18	; 0x12
   15b16:	33 89       	ldd	r19, Z+19	; 0x13
   15b18:	40 e0       	ldi	r20, 0x00	; 0
   15b1a:	50 e0       	ldi	r21, 0x00	; 0
   15b1c:	c5 01       	movw	r24, r10
   15b1e:	b4 01       	movw	r22, r8
   15b20:	0e 94 a0 e6 	call	0x1cd40	; 0x1cd40 <__udivmodsi4>
   15b24:	f8 01       	movw	r30, r16
   15b26:	27 83       	std	Z+7, r18	; 0x07
   15b28:	30 87       	std	Z+8, r19	; 0x08
   15b2a:	41 87       	std	Z+9, r20	; 0x09
   15b2c:	52 87       	std	Z+10, r21	; 0x0a
   15b2e:	8c 85       	ldd	r24, Y+12	; 0x0c
   15b30:	9d 85       	ldd	r25, Y+13	; 0x0d
   15b32:	88 27       	eor	r24, r24
   15b34:	90 7d       	andi	r25, 0xD0	; 208
   15b36:	04 c0       	rjmp	.+8      	; 0x15b40 <SS80_locate_and_write+0x31c>
   15b38:	01 2b       	or	r16, r17
   15b3a:	09 f4       	brne	.+2      	; 0x15b3e <SS80_locate_and_write+0x31a>
   15b3c:	37 cf       	rjmp	.-402    	; 0x159ac <SS80_locate_and_write+0x188>
   15b3e:	b6 cf       	rjmp	.-148    	; 0x15aac <SS80_locate_and_write+0x288>
   15b40:	63 96       	adiw	r28, 0x13	; 19
   15b42:	e2 e1       	ldi	r30, 0x12	; 18
   15b44:	0c 94 29 e7 	jmp	0x1ce52	; 0x1ce52 <__epilogue_restores__>

00015b48 <SS80_Report>:
   15b48:	a8 e0       	ldi	r26, 0x08	; 8
   15b4a:	b0 e0       	ldi	r27, 0x00	; 0
   15b4c:	ea ea       	ldi	r30, 0xAA	; 170
   15b4e:	fd ea       	ldi	r31, 0xAD	; 173
   15b50:	0c 94 1d e7 	jmp	0x1ce3a	; 0x1ce3a <__prologue_saves__+0x20>
   15b54:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15b58:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15b5c:	82 81       	ldd	r24, Z+2	; 0x02
   15b5e:	88 87       	std	Y+8, r24	; 0x08
   15b60:	80 e0       	ldi	r24, 0x00	; 0
   15b62:	91 e0       	ldi	r25, 0x01	; 1
   15b64:	9f 83       	std	Y+7, r25	; 0x07
   15b66:	8e 83       	std	Y+6, r24	; 0x06
   15b68:	ae 01       	movw	r20, r28
   15b6a:	4a 5f       	subi	r20, 0xFA	; 250
   15b6c:	5f 4f       	sbci	r21, 0xFF	; 255
   15b6e:	61 e0       	ldi	r22, 0x01	; 1
   15b70:	70 e0       	ldi	r23, 0x00	; 0
   15b72:	ce 01       	movw	r24, r28
   15b74:	08 96       	adiw	r24, 0x08	; 8
   15b76:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <gpib_write_str>
   15b7a:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   15b7e:	01 97       	sbiw	r24, 0x01	; 1
   15b80:	89 f0       	breq	.+34     	; 0x15ba4 <SS80_Report+0x5c>
   15b82:	20 ff       	sbrs	r18, 0
   15b84:	0a c0       	rjmp	.+20     	; 0x15b9a <SS80_Report+0x52>
   15b86:	87 ee       	ldi	r24, 0xE7	; 231
   15b88:	92 e2       	ldi	r25, 0x22	; 34
   15b8a:	a0 e0       	ldi	r26, 0x00	; 0
   15b8c:	ed b7       	in	r30, 0x3d	; 61
   15b8e:	fe b7       	in	r31, 0x3e	; 62
   15b90:	81 83       	std	Z+1, r24	; 0x01
   15b92:	92 83       	std	Z+2, r25	; 0x02
   15b94:	a3 83       	std	Z+3, r26	; 0x03
   15b96:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   15b9a:	8e 81       	ldd	r24, Y+6	; 0x06
   15b9c:	9f 81       	ldd	r25, Y+7	; 0x07
   15b9e:	88 27       	eor	r24, r24
   15ba0:	90 7d       	andi	r25, 0xD0	; 208
   15ba2:	1b c0       	rjmp	.+54     	; 0x15bda <SS80_Report+0x92>
   15ba4:	25 ff       	sbrs	r18, 5
   15ba6:	12 c0       	rjmp	.+36     	; 0x15bcc <SS80_Report+0x84>
   15ba8:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15bac:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15bb0:	82 81       	ldd	r24, Z+2	; 0x02
   15bb2:	90 e0       	ldi	r25, 0x00	; 0
   15bb4:	ed b7       	in	r30, 0x3d	; 61
   15bb6:	fe b7       	in	r31, 0x3e	; 62
   15bb8:	95 83       	std	Z+5, r25	; 0x05
   15bba:	84 83       	std	Z+4, r24	; 0x04
   15bbc:	84 ed       	ldi	r24, 0xD4	; 212
   15bbe:	92 e2       	ldi	r25, 0x22	; 34
   15bc0:	a0 e0       	ldi	r26, 0x00	; 0
   15bc2:	81 83       	std	Z+1, r24	; 0x01
   15bc4:	92 83       	std	Z+2, r25	; 0x02
   15bc6:	a3 83       	std	Z+3, r26	; 0x03
   15bc8:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   15bcc:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15bd0:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15bd4:	12 82       	std	Z+2, r1	; 0x02
   15bd6:	80 e0       	ldi	r24, 0x00	; 0
   15bd8:	90 e0       	ldi	r25, 0x00	; 0
   15bda:	28 96       	adiw	r28, 0x08	; 8
   15bdc:	e2 e0       	ldi	r30, 0x02	; 2
   15bde:	0c 94 39 e7 	jmp	0x1ce72	; 0x1ce72 <__epilogue_restores__+0x20>

00015be2 <Clear_Common>:
   15be2:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15be6:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15bea:	25 81       	ldd	r18, Z+5	; 0x05
   15bec:	30 e0       	ldi	r19, 0x00	; 0
   15bee:	28 17       	cp	r18, r24
   15bf0:	39 07       	cpc	r19, r25
   15bf2:	19 f0       	breq	.+6      	; 0x15bfa <Clear_Common+0x18>
   15bf4:	0f 97       	sbiw	r24, 0x0f	; 15
   15bf6:	99 f4       	brne	.+38     	; 0x15c1e <Clear_Common+0x3c>
   15bf8:	03 c0       	rjmp	.+6      	; 0x15c00 <Clear_Common+0x1e>
   15bfa:	2f 30       	cpi	r18, 0x0F	; 15
   15bfc:	31 05       	cpc	r19, r1
   15bfe:	09 f4       	brne	.+2      	; 0x15c02 <Clear_Common+0x20>
   15c00:	15 82       	std	Z+5, r1	; 0x05
   15c02:	16 82       	std	Z+6, r1	; 0x06
   15c04:	17 82       	std	Z+7, r1	; 0x07
   15c06:	10 86       	std	Z+8, r1	; 0x08
   15c08:	11 86       	std	Z+9, r1	; 0x09
   15c0a:	12 86       	std	Z+10, r1	; 0x0a
   15c0c:	13 86       	std	Z+11, r1	; 0x0b
   15c0e:	14 86       	std	Z+12, r1	; 0x0c
   15c10:	15 86       	std	Z+13, r1	; 0x0d
   15c12:	16 86       	std	Z+14, r1	; 0x0e
   15c14:	11 82       	std	Z+1, r1	; 0x01
   15c16:	10 82       	st	Z, r1
   15c18:	14 82       	std	Z+4, r1	; 0x04
   15c1a:	13 82       	std	Z+3, r1	; 0x03
   15c1c:	12 82       	std	Z+2, r1	; 0x02
   15c1e:	08 95       	ret

00015c20 <SS80_init>:
   15c20:	cf 92       	push	r12
   15c22:	df 92       	push	r13
   15c24:	ef 92       	push	r14
   15c26:	0f 93       	push	r16
   15c28:	1f 93       	push	r17
   15c2a:	cf 93       	push	r28
   15c2c:	df 93       	push	r29
   15c2e:	00 d0       	rcall	.+0      	; 0x15c30 <SS80_init+0x10>
   15c30:	00 d0       	rcall	.+0      	; 0x15c32 <SS80_init+0x12>
   15c32:	1f 92       	push	r1
   15c34:	0d e6       	ldi	r16, 0x6D	; 109
   15c36:	1f e1       	ldi	r17, 0x1F	; 31
   15c38:	cb e0       	ldi	r28, 0x0B	; 11
   15c3a:	d2 e0       	ldi	r29, 0x02	; 2
   15c3c:	81 ea       	ldi	r24, 0xA1	; 161
   15c3e:	99 e2       	ldi	r25, 0x29	; 41
   15c40:	6c 01       	movw	r12, r24
   15c42:	e1 2c       	mov	r14, r1
   15c44:	f8 01       	movw	r30, r16
   15c46:	80 81       	ld	r24, Z
   15c48:	83 30       	cpi	r24, 0x03	; 3
   15c4a:	29 f5       	brne	.+74     	; 0x15c96 <SS80_init+0x76>
   15c4c:	8c 2f       	mov	r24, r28
   15c4e:	0e 94 bd 97 	call	0x12f7a	; 0x12f7a <set_active_device>
   15c52:	88 23       	and	r24, r24
   15c54:	01 f1       	breq	.+64     	; 0x15c96 <SS80_init+0x76>
   15c56:	8f e0       	ldi	r24, 0x0F	; 15
   15c58:	90 e0       	ldi	r25, 0x00	; 0
   15c5a:	c3 df       	rcall	.-122    	; 0x15be2 <Clear_Common>
   15c5c:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15c60:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15c64:	d2 83       	std	Z+2, r29	; 0x02
   15c66:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15c6a:	85 ff       	sbrs	r24, 5
   15c6c:	0c c0       	rjmp	.+24     	; 0x15c86 <SS80_init+0x66>
   15c6e:	f8 01       	movw	r30, r16
   15c70:	81 81       	ldd	r24, Z+1	; 0x01
   15c72:	90 e0       	ldi	r25, 0x00	; 0
   15c74:	ed b7       	in	r30, 0x3d	; 61
   15c76:	fe b7       	in	r31, 0x3e	; 62
   15c78:	95 83       	std	Z+5, r25	; 0x05
   15c7a:	84 83       	std	Z+4, r24	; 0x04
   15c7c:	c1 82       	std	Z+1, r12	; 0x01
   15c7e:	d2 82       	std	Z+2, r13	; 0x02
   15c80:	e3 82       	std	Z+3, r14	; 0x03
   15c82:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   15c86:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   15c8a:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   15c8e:	81 81       	ldd	r24, Z+1	; 0x01
   15c90:	90 e0       	ldi	r25, 0x00	; 0
   15c92:	0e 94 a3 86 	call	0x10d46	; 0x10d46 <gpib_disable_PPR>
   15c96:	0b 50       	subi	r16, 0x0B	; 11
   15c98:	11 09       	sbc	r17, r1
   15c9a:	c1 50       	subi	r28, 0x01	; 1
   15c9c:	98 f6       	brcc	.-90     	; 0x15c44 <SS80_init+0x24>
   15c9e:	0f 90       	pop	r0
   15ca0:	0f 90       	pop	r0
   15ca2:	0f 90       	pop	r0
   15ca4:	0f 90       	pop	r0
   15ca6:	0f 90       	pop	r0
   15ca8:	df 91       	pop	r29
   15caa:	cf 91       	pop	r28
   15cac:	1f 91       	pop	r17
   15cae:	0f 91       	pop	r16
   15cb0:	ef 90       	pop	r14
   15cb2:	df 90       	pop	r13
   15cb4:	cf 90       	pop	r12
   15cb6:	08 95       	ret

00015cb8 <SS80_Channel_Independent_Clear>:
   15cb8:	94 df       	rcall	.-216    	; 0x15be2 <Clear_Common>
   15cba:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   15cbe:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   15cc2:	81 81       	ldd	r24, Z+1	; 0x01
   15cc4:	90 e0       	ldi	r25, 0x00	; 0
   15cc6:	0e 94 6d 86 	call	0x10cda	; 0x10cda <gpib_enable_PPR>
   15cca:	80 e0       	ldi	r24, 0x00	; 0
   15ccc:	90 e0       	ldi	r25, 0x00	; 0
   15cce:	08 95       	ret

00015cd0 <SS80_Universal_Device_Clear>:
   15cd0:	8f e0       	ldi	r24, 0x0F	; 15
   15cd2:	90 e0       	ldi	r25, 0x00	; 0
   15cd4:	86 df       	rcall	.-244    	; 0x15be2 <Clear_Common>
   15cd6:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   15cda:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   15cde:	81 81       	ldd	r24, Z+1	; 0x01
   15ce0:	90 e0       	ldi	r25, 0x00	; 0
   15ce2:	0e 94 6d 86 	call	0x10cda	; 0x10cda <gpib_enable_PPR>
   15ce6:	80 e0       	ldi	r24, 0x00	; 0
   15ce8:	90 e0       	ldi	r25, 0x00	; 0
   15cea:	08 95       	ret

00015cec <SS80_Selected_Device_Clear>:
   15cec:	cf 93       	push	r28
   15cee:	df 93       	push	r29
   15cf0:	00 d0       	rcall	.+0      	; 0x15cf2 <SS80_Selected_Device_Clear+0x6>
   15cf2:	1f 92       	push	r1
   15cf4:	ec 01       	movw	r28, r24
   15cf6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15cfa:	85 ff       	sbrs	r24, 5
   15cfc:	0a c0       	rjmp	.+20     	; 0x15d12 <SS80_Selected_Device_Clear+0x26>
   15cfe:	88 ec       	ldi	r24, 0xC8	; 200
   15d00:	92 e2       	ldi	r25, 0x22	; 34
   15d02:	a0 e0       	ldi	r26, 0x00	; 0
   15d04:	ed b7       	in	r30, 0x3d	; 61
   15d06:	fe b7       	in	r31, 0x3e	; 62
   15d08:	81 83       	std	Z+1, r24	; 0x01
   15d0a:	92 83       	std	Z+2, r25	; 0x02
   15d0c:	a3 83       	std	Z+3, r26	; 0x03
   15d0e:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   15d12:	ce 01       	movw	r24, r28
   15d14:	66 df       	rcall	.-308    	; 0x15be2 <Clear_Common>
   15d16:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   15d1a:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   15d1e:	81 81       	ldd	r24, Z+1	; 0x01
   15d20:	90 e0       	ldi	r25, 0x00	; 0
   15d22:	0e 94 6d 86 	call	0x10cda	; 0x10cda <gpib_enable_PPR>
   15d26:	80 e0       	ldi	r24, 0x00	; 0
   15d28:	90 e0       	ldi	r25, 0x00	; 0
   15d2a:	cd b7       	in	r28, 0x3d	; 61
   15d2c:	de b7       	in	r29, 0x3e	; 62
   15d2e:	23 96       	adiw	r28, 0x03	; 3
   15d30:	e2 e0       	ldi	r30, 0x02	; 2
   15d32:	0c 94 39 e7 	jmp	0x1ce72	; 0x1ce72 <__epilogue_restores__+0x20>

00015d36 <SS80_Amigo_Clear>:
   15d36:	a6 e0       	ldi	r26, 0x06	; 6
   15d38:	b0 e0       	ldi	r27, 0x00	; 0
   15d3a:	e1 ea       	ldi	r30, 0xA1	; 161
   15d3c:	fe ea       	ldi	r31, 0xAE	; 174
   15d3e:	0c 94 1d e7 	jmp	0x1ce3a	; 0x1ce3a <__prologue_saves__+0x20>
   15d42:	1d 82       	std	Y+5, r1	; 0x05
   15d44:	1c 82       	std	Y+4, r1	; 0x04
   15d46:	ae 01       	movw	r20, r28
   15d48:	4c 5f       	subi	r20, 0xFC	; 252
   15d4a:	5f 4f       	sbci	r21, 0xFF	; 255
   15d4c:	61 e0       	ldi	r22, 0x01	; 1
   15d4e:	70 e0       	ldi	r23, 0x00	; 0
   15d50:	ce 01       	movw	r24, r28
   15d52:	06 96       	adiw	r24, 0x06	; 6
   15d54:	0e 94 fb 8a 	call	0x115f6	; 0x115f6 <gpib_read_str>
   15d58:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   15d5c:	01 97       	sbiw	r24, 0x01	; 1
   15d5e:	89 f0       	breq	.+34     	; 0x15d82 <SS80_Amigo_Clear+0x4c>
   15d60:	20 ff       	sbrs	r18, 0
   15d62:	0a c0       	rjmp	.+20     	; 0x15d78 <SS80_Amigo_Clear+0x42>
   15d64:	85 eb       	ldi	r24, 0xB5	; 181
   15d66:	92 e2       	ldi	r25, 0x22	; 34
   15d68:	a0 e0       	ldi	r26, 0x00	; 0
   15d6a:	ed b7       	in	r30, 0x3d	; 61
   15d6c:	fe b7       	in	r31, 0x3e	; 62
   15d6e:	81 83       	std	Z+1, r24	; 0x01
   15d70:	92 83       	std	Z+2, r25	; 0x02
   15d72:	a3 83       	std	Z+3, r26	; 0x03
   15d74:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   15d78:	8c 81       	ldd	r24, Y+4	; 0x04
   15d7a:	9d 81       	ldd	r25, Y+5	; 0x05
   15d7c:	88 27       	eor	r24, r24
   15d7e:	90 7d       	andi	r25, 0xD0	; 208
   15d80:	19 c0       	rjmp	.+50     	; 0x15db4 <SS80_Amigo_Clear+0x7e>
   15d82:	25 ff       	sbrs	r18, 5
   15d84:	0a c0       	rjmp	.+20     	; 0x15d9a <SS80_Amigo_Clear+0x64>
   15d86:	86 ea       	ldi	r24, 0xA6	; 166
   15d88:	92 e2       	ldi	r25, 0x22	; 34
   15d8a:	a0 e0       	ldi	r26, 0x00	; 0
   15d8c:	ed b7       	in	r30, 0x3d	; 61
   15d8e:	fe b7       	in	r31, 0x3e	; 62
   15d90:	81 83       	std	Z+1, r24	; 0x01
   15d92:	92 83       	std	Z+2, r25	; 0x02
   15d94:	a3 83       	std	Z+3, r26	; 0x03
   15d96:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   15d9a:	8f e0       	ldi	r24, 0x0F	; 15
   15d9c:	90 e0       	ldi	r25, 0x00	; 0
   15d9e:	21 df       	rcall	.-446    	; 0x15be2 <Clear_Common>
   15da0:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   15da4:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   15da8:	81 81       	ldd	r24, Z+1	; 0x01
   15daa:	90 e0       	ldi	r25, 0x00	; 0
   15dac:	0e 94 6d 86 	call	0x10cda	; 0x10cda <gpib_enable_PPR>
   15db0:	80 e0       	ldi	r24, 0x00	; 0
   15db2:	90 e0       	ldi	r25, 0x00	; 0
   15db4:	26 96       	adiw	r28, 0x06	; 6
   15db6:	e2 e0       	ldi	r30, 0x02	; 2
   15db8:	0c 94 39 e7 	jmp	0x1ce72	; 0x1ce72 <__epilogue_restores__+0x20>

00015dbc <SS80_Cancel>:
   15dbc:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15dc0:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15dc4:	11 82       	std	Z+1, r1	; 0x01
   15dc6:	10 82       	st	Z, r1
   15dc8:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   15dcc:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   15dd0:	81 81       	ldd	r24, Z+1	; 0x01
   15dd2:	90 e0       	ldi	r25, 0x00	; 0
   15dd4:	0e 94 6d 86 	call	0x10cda	; 0x10cda <gpib_enable_PPR>
   15dd8:	80 e0       	ldi	r24, 0x00	; 0
   15dda:	90 e0       	ldi	r25, 0x00	; 0
   15ddc:	08 95       	ret

00015dde <SS80_Transparent_State>:
   15dde:	a9 e0       	ldi	r26, 0x09	; 9
   15de0:	b0 e0       	ldi	r27, 0x00	; 0
   15de2:	e5 ef       	ldi	r30, 0xF5	; 245
   15de4:	fe ea       	ldi	r31, 0xAE	; 174
   15de6:	0c 94 15 e7 	jmp	0x1ce2a	; 0x1ce2a <__prologue_saves__+0x10>
   15dea:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   15dee:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   15df2:	81 81       	ldd	r24, Z+1	; 0x01
   15df4:	90 e0       	ldi	r25, 0x00	; 0
   15df6:	0e 94 a3 86 	call	0x10d46	; 0x10d46 <gpib_disable_PPR>
   15dfa:	80 e0       	ldi	r24, 0x00	; 0
   15dfc:	91 e0       	ldi	r25, 0x01	; 1
   15dfe:	99 87       	std	Y+9, r25	; 0x09
   15e00:	88 87       	std	Y+8, r24	; 0x08
   15e02:	ae 01       	movw	r20, r28
   15e04:	48 5f       	subi	r20, 0xF8	; 248
   15e06:	5f 4f       	sbci	r21, 0xFF	; 255
   15e08:	60 e0       	ldi	r22, 0x00	; 0
   15e0a:	72 e0       	ldi	r23, 0x02	; 2
   15e0c:	8a ee       	ldi	r24, 0xEA	; 234
   15e0e:	9c e1       	ldi	r25, 0x1C	; 28
   15e10:	0e 94 fb 8a 	call	0x115f6	; 0x115f6 <gpib_read_str>
   15e14:	7c 01       	movw	r14, r24
   15e16:	88 85       	ldd	r24, Y+8	; 0x08
   15e18:	99 85       	ldd	r25, Y+9	; 0x09
   15e1a:	9c 01       	movw	r18, r24
   15e1c:	22 27       	eor	r18, r18
   15e1e:	30 7d       	andi	r19, 0xD0	; 208
   15e20:	23 2b       	or	r18, r19
   15e22:	79 f0       	breq	.+30     	; 0x15e42 <SS80_Transparent_State+0x64>
   15e24:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15e28:	80 ff       	sbrs	r24, 0
   15e2a:	da c0       	rjmp	.+436    	; 0x15fe0 <SS80_Transparent_State+0x202>
   15e2c:	85 e4       	ldi	r24, 0x45	; 69
   15e2e:	94 e2       	ldi	r25, 0x24	; 36
   15e30:	a0 e0       	ldi	r26, 0x00	; 0
   15e32:	ed b7       	in	r30, 0x3d	; 61
   15e34:	fe b7       	in	r31, 0x3e	; 62
   15e36:	81 83       	std	Z+1, r24	; 0x01
   15e38:	92 83       	std	Z+2, r25	; 0x02
   15e3a:	a3 83       	std	Z+3, r26	; 0x03
   15e3c:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   15e40:	cf c0       	rjmp	.+414    	; 0x15fe0 <SS80_Transparent_State+0x202>
   15e42:	e1 14       	cp	r14, r1
   15e44:	f1 04       	cpc	r15, r1
   15e46:	09 f4       	brne	.+2      	; 0x15e4a <SS80_Transparent_State+0x6c>
   15e48:	d0 c0       	rjmp	.+416    	; 0x15fea <SS80_Transparent_State+0x20c>
   15e4a:	90 fd       	sbrc	r25, 0
   15e4c:	0e c0       	rjmp	.+28     	; 0x15e6a <SS80_Transparent_State+0x8c>
   15e4e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15e52:	80 ff       	sbrs	r24, 0
   15e54:	0a c0       	rjmp	.+20     	; 0x15e6a <SS80_Transparent_State+0x8c>
   15e56:	8c e2       	ldi	r24, 0x2C	; 44
   15e58:	94 e2       	ldi	r25, 0x24	; 36
   15e5a:	a0 e0       	ldi	r26, 0x00	; 0
   15e5c:	ed b7       	in	r30, 0x3d	; 61
   15e5e:	fe b7       	in	r31, 0x3e	; 62
   15e60:	81 83       	std	Z+1, r24	; 0x01
   15e62:	92 83       	std	Z+2, r25	; 0x02
   15e64:	a3 83       	std	Z+3, r26	; 0x03
   15e66:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   15e6a:	8a ee       	ldi	r24, 0xEA	; 234
   15e6c:	a8 2e       	mov	r10, r24
   15e6e:	8c e1       	ldi	r24, 0x1C	; 28
   15e70:	b8 2e       	mov	r11, r24
   15e72:	00 e0       	ldi	r16, 0x00	; 0
   15e74:	10 e0       	ldi	r17, 0x00	; 0
   15e76:	0e 15       	cp	r16, r14
   15e78:	1f 05       	cpc	r17, r15
   15e7a:	0c f0       	brlt	.+2      	; 0x15e7e <SS80_Transparent_State+0xa0>
   15e7c:	9c c0       	rjmp	.+312    	; 0x15fb6 <SS80_Transparent_State+0x1d8>
   15e7e:	68 01       	movw	r12, r16
   15e80:	ff ef       	ldi	r31, 0xFF	; 255
   15e82:	cf 1a       	sub	r12, r31
   15e84:	df 0a       	sbc	r13, r31
   15e86:	f5 01       	movw	r30, r10
   15e88:	81 91       	ld	r24, Z+
   15e8a:	5f 01       	movw	r10, r30
   15e8c:	28 2f       	mov	r18, r24
   15e8e:	30 e0       	ldi	r19, 0x00	; 0
   15e90:	a9 01       	movw	r20, r18
   15e92:	40 52       	subi	r20, 0x20	; 32
   15e94:	51 09       	sbc	r21, r1
   15e96:	40 31       	cpi	r20, 0x10	; 16
   15e98:	51 05       	cpc	r21, r1
   15e9a:	20 f4       	brcc	.+8      	; 0x15ea4 <SS80_Transparent_State+0xc6>
   15e9c:	80 52       	subi	r24, 0x20	; 32
   15e9e:	86 d9       	rcall	.-3316   	; 0x151ac <SS80_Check_Unit>
   15ea0:	86 01       	movw	r16, r12
   15ea2:	e9 cf       	rjmp	.-46     	; 0x15e76 <SS80_Transparent_State+0x98>
   15ea4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15ea8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   15eac:	21 30       	cpi	r18, 0x01	; 1
   15eae:	31 05       	cpc	r19, r1
   15eb0:	c9 f4       	brne	.+50     	; 0x15ee4 <SS80_Transparent_State+0x106>
   15eb2:	0e 5f       	subi	r16, 0xFE	; 254
   15eb4:	1f 4f       	sbci	r17, 0xFF	; 255
   15eb6:	80 73       	andi	r24, 0x30	; 48
   15eb8:	99 27       	eor	r25, r25
   15eba:	89 2b       	or	r24, r25
   15ebc:	51 f0       	breq	.+20     	; 0x15ed2 <SS80_Transparent_State+0xf4>
   15ebe:	87 e0       	ldi	r24, 0x07	; 7
   15ec0:	94 e2       	ldi	r25, 0x24	; 36
   15ec2:	a0 e0       	ldi	r26, 0x00	; 0
   15ec4:	ed b7       	in	r30, 0x3d	; 61
   15ec6:	fe b7       	in	r31, 0x3e	; 62
   15ec8:	81 83       	std	Z+1, r24	; 0x01
   15eca:	92 83       	std	Z+2, r25	; 0x02
   15ecc:	a3 83       	std	Z+3, r26	; 0x03
   15ece:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   15ed2:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   15ed6:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   15eda:	81 81       	ldd	r24, Z+1	; 0x01
   15edc:	90 e0       	ldi	r25, 0x00	; 0
   15ede:	0e 94 6d 86 	call	0x10cda	; 0x10cda <gpib_enable_PPR>
   15ee2:	69 c0       	rjmp	.+210    	; 0x15fb6 <SS80_Transparent_State+0x1d8>
   15ee4:	22 30       	cpi	r18, 0x02	; 2
   15ee6:	31 05       	cpc	r19, r1
   15ee8:	51 f4       	brne	.+20     	; 0x15efe <SS80_Transparent_State+0x120>
   15eea:	0b 5f       	subi	r16, 0xFB	; 251
   15eec:	1f 4f       	sbci	r17, 0xFF	; 255
   15eee:	80 73       	andi	r24, 0x30	; 48
   15ef0:	99 27       	eor	r25, r25
   15ef2:	89 2b       	or	r24, r25
   15ef4:	09 f4       	brne	.+2      	; 0x15ef8 <SS80_Transparent_State+0x11a>
   15ef6:	5f c0       	rjmp	.+190    	; 0x15fb6 <SS80_Transparent_State+0x1d8>
   15ef8:	8a ee       	ldi	r24, 0xEA	; 234
   15efa:	93 e2       	ldi	r25, 0x23	; 35
   15efc:	0c c0       	rjmp	.+24     	; 0x15f16 <SS80_Transparent_State+0x138>
   15efe:	23 30       	cpi	r18, 0x03	; 3
   15f00:	31 05       	cpc	r19, r1
   15f02:	91 f4       	brne	.+36     	; 0x15f28 <SS80_Transparent_State+0x14a>
   15f04:	0b 5f       	subi	r16, 0xFB	; 251
   15f06:	1f 4f       	sbci	r17, 0xFF	; 255
   15f08:	80 73       	andi	r24, 0x30	; 48
   15f0a:	99 27       	eor	r25, r25
   15f0c:	89 2b       	or	r24, r25
   15f0e:	09 f4       	brne	.+2      	; 0x15f12 <SS80_Transparent_State+0x134>
   15f10:	52 c0       	rjmp	.+164    	; 0x15fb6 <SS80_Transparent_State+0x1d8>
   15f12:	8c ec       	ldi	r24, 0xCC	; 204
   15f14:	93 e2       	ldi	r25, 0x23	; 35
   15f16:	a0 e0       	ldi	r26, 0x00	; 0
   15f18:	ed b7       	in	r30, 0x3d	; 61
   15f1a:	fe b7       	in	r31, 0x3e	; 62
   15f1c:	81 83       	std	Z+1, r24	; 0x01
   15f1e:	92 83       	std	Z+2, r25	; 0x02
   15f20:	a3 83       	std	Z+3, r26	; 0x03
   15f22:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   15f26:	47 c0       	rjmp	.+142    	; 0x15fb6 <SS80_Transparent_State+0x1d8>
   15f28:	28 30       	cpi	r18, 0x08	; 8
   15f2a:	31 05       	cpc	r19, r1
   15f2c:	e1 f4       	brne	.+56     	; 0x15f66 <SS80_Transparent_State+0x188>
   15f2e:	85 ff       	sbrs	r24, 5
   15f30:	12 c0       	rjmp	.+36     	; 0x15f56 <SS80_Transparent_State+0x178>
   15f32:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15f36:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15f3a:	85 81       	ldd	r24, Z+5	; 0x05
   15f3c:	90 e0       	ldi	r25, 0x00	; 0
   15f3e:	ed b7       	in	r30, 0x3d	; 61
   15f40:	fe b7       	in	r31, 0x3e	; 62
   15f42:	95 83       	std	Z+5, r25	; 0x05
   15f44:	84 83       	std	Z+4, r24	; 0x04
   15f46:	85 ea       	ldi	r24, 0xA5	; 165
   15f48:	93 e2       	ldi	r25, 0x23	; 35
   15f4a:	a0 e0       	ldi	r26, 0x00	; 0
   15f4c:	81 83       	std	Z+1, r24	; 0x01
   15f4e:	92 83       	std	Z+2, r25	; 0x02
   15f50:	a3 83       	std	Z+3, r26	; 0x03
   15f52:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   15f56:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15f5a:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15f5e:	85 81       	ldd	r24, Z+5	; 0x05
   15f60:	90 e0       	ldi	r25, 0x00	; 0
   15f62:	aa de       	rcall	.-684    	; 0x15cb8 <SS80_Channel_Independent_Clear>
   15f64:	44 c0       	rjmp	.+136    	; 0x15fee <SS80_Transparent_State+0x210>
   15f66:	29 30       	cpi	r18, 0x09	; 9
   15f68:	31 05       	cpc	r19, r1
   15f6a:	b1 f4       	brne	.+44     	; 0x15f98 <SS80_Transparent_State+0x1ba>
   15f6c:	85 ff       	sbrs	r24, 5
   15f6e:	12 c0       	rjmp	.+36     	; 0x15f94 <SS80_Transparent_State+0x1b6>
   15f70:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15f74:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15f78:	85 81       	ldd	r24, Z+5	; 0x05
   15f7a:	90 e0       	ldi	r25, 0x00	; 0
   15f7c:	ed b7       	in	r30, 0x3d	; 61
   15f7e:	fe b7       	in	r31, 0x3e	; 62
   15f80:	95 83       	std	Z+5, r25	; 0x05
   15f82:	84 83       	std	Z+4, r24	; 0x04
   15f84:	81 e9       	ldi	r24, 0x91	; 145
   15f86:	93 e2       	ldi	r25, 0x23	; 35
   15f88:	a0 e0       	ldi	r26, 0x00	; 0
   15f8a:	81 83       	std	Z+1, r24	; 0x01
   15f8c:	92 83       	std	Z+2, r25	; 0x02
   15f8e:	a3 83       	std	Z+3, r26	; 0x03
   15f90:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   15f94:	13 df       	rcall	.-474    	; 0x15dbc <SS80_Cancel>
   15f96:	2b c0       	rjmp	.+86     	; 0x15fee <SS80_Transparent_State+0x210>
   15f98:	80 ff       	sbrs	r24, 0
   15f9a:	22 c0       	rjmp	.+68     	; 0x15fe0 <SS80_Transparent_State+0x202>
   15f9c:	ed b7       	in	r30, 0x3d	; 61
   15f9e:	fe b7       	in	r31, 0x3e	; 62
   15fa0:	35 83       	std	Z+5, r19	; 0x05
   15fa2:	24 83       	std	Z+4, r18	; 0x04
   15fa4:	81 e7       	ldi	r24, 0x71	; 113
   15fa6:	93 e2       	ldi	r25, 0x23	; 35
   15fa8:	a0 e0       	ldi	r26, 0x00	; 0
   15faa:	81 83       	std	Z+1, r24	; 0x01
   15fac:	92 83       	std	Z+2, r25	; 0x02
   15fae:	a3 83       	std	Z+3, r26	; 0x03
   15fb0:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   15fb4:	86 01       	movw	r16, r12
   15fb6:	0e 15       	cp	r16, r14
   15fb8:	1f 05       	cpc	r17, r15
   15fba:	91 f0       	breq	.+36     	; 0x15fe0 <SS80_Transparent_State+0x202>
   15fbc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15fc0:	80 ff       	sbrs	r24, 0
   15fc2:	0e c0       	rjmp	.+28     	; 0x15fe0 <SS80_Transparent_State+0x202>
   15fc4:	ed b7       	in	r30, 0x3d	; 61
   15fc6:	fe b7       	in	r31, 0x3e	; 62
   15fc8:	f7 82       	std	Z+7, r15	; 0x07
   15fca:	e6 82       	std	Z+6, r14	; 0x06
   15fcc:	15 83       	std	Z+5, r17	; 0x05
   15fce:	04 83       	std	Z+4, r16	; 0x04
   15fd0:	85 e3       	ldi	r24, 0x35	; 53
   15fd2:	93 e2       	ldi	r25, 0x23	; 35
   15fd4:	a0 e0       	ldi	r26, 0x00	; 0
   15fd6:	81 83       	std	Z+1, r24	; 0x01
   15fd8:	92 83       	std	Z+2, r25	; 0x02
   15fda:	a3 83       	std	Z+3, r26	; 0x03
   15fdc:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   15fe0:	88 85       	ldd	r24, Y+8	; 0x08
   15fe2:	99 85       	ldd	r25, Y+9	; 0x09
   15fe4:	88 27       	eor	r24, r24
   15fe6:	90 7d       	andi	r25, 0xD0	; 208
   15fe8:	02 c0       	rjmp	.+4      	; 0x15fee <SS80_Transparent_State+0x210>
   15fea:	80 e0       	ldi	r24, 0x00	; 0
   15fec:	90 e0       	ldi	r25, 0x00	; 0
   15fee:	29 96       	adiw	r28, 0x09	; 9
   15ff0:	ea e0       	ldi	r30, 0x0A	; 10
   15ff2:	0c 94 31 e7 	jmp	0x1ce62	; 0x1ce62 <__epilogue_restores__+0x10>

00015ff6 <SS80_error_return>:
/// @return  0 on send
/// @return GPIB flags on send error
/// @see gpib.h _FLAGS defines for a full list.

int SS80_error_return( void )
{
   15ff6:	a6 e0       	ldi	r26, 0x06	; 6
   15ff8:	b0 e0       	ldi	r27, 0x00	; 0
   15ffa:	e1 e0       	ldi	r30, 0x01	; 1
   15ffc:	f0 eb       	ldi	r31, 0xB0	; 176
   15ffe:	0c 94 1d e7 	jmp	0x1ce3a	; 0x1ce3a <__prologue_saves__+0x20>
    uint8_t tmp[1];
    uint16_t status = EOI_FLAG;
   16002:	80 e0       	ldi	r24, 0x00	; 0
   16004:	91 e0       	ldi	r25, 0x01	; 1
   16006:	9d 83       	std	Y+5, r25	; 0x05
   16008:	8c 83       	std	Y+4, r24	; 0x04

    SS80s->qstat = 1;
   1600a:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   1600e:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   16012:	81 e0       	ldi	r24, 0x01	; 1
   16014:	82 83       	std	Z+2, r24	; 0x02
    tmp[0] = SS80s->qstat;
   16016:	8e 83       	std	Y+6, r24	; 0x06

    status = EOI_FLAG;
    if( gpib_write_str(tmp,sizeof(tmp), &status) != sizeof(tmp))
   16018:	ae 01       	movw	r20, r28
   1601a:	4c 5f       	subi	r20, 0xFC	; 252
   1601c:	5f 4f       	sbci	r21, 0xFF	; 255
   1601e:	61 e0       	ldi	r22, 0x01	; 1
   16020:	70 e0       	ldi	r23, 0x00	; 0
   16022:	ce 01       	movw	r24, r28
   16024:	06 96       	adiw	r24, 0x06	; 6
   16026:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <gpib_write_str>
   1602a:	01 97       	sbiw	r24, 0x01	; 1
   1602c:	99 f0       	breq	.+38     	; 0x16054 <SS80_error_return+0x5e>
    {
        if(debuglevel & GPIB_ERR)
   1602e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16032:	80 ff       	sbrs	r24, 0
   16034:	0a c0       	rjmp	.+20     	; 0x1604a <SS80_error_return+0x54>
            printf("[GPIB Error Return - Write ERROR]\n");
   16036:	83 e8       	ldi	r24, 0x83	; 131
   16038:	92 e2       	ldi	r25, 0x22	; 34
   1603a:	a0 e0       	ldi	r26, 0x00	; 0
   1603c:	ed b7       	in	r30, 0x3d	; 61
   1603e:	fe b7       	in	r31, 0x3e	; 62
   16040:	81 83       	std	Z+1, r24	; 0x01
   16042:	92 83       	std	Z+2, r25	; 0x02
   16044:	a3 83       	std	Z+3, r26	; 0x03
   16046:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
        return(status & ERROR_MASK);
   1604a:	8c 81       	ldd	r24, Y+4	; 0x04
   1604c:	9d 81       	ldd	r25, Y+5	; 0x05
   1604e:	88 27       	eor	r24, r24
   16050:	90 7d       	andi	r25, 0xD0	; 208
   16052:	07 c0       	rjmp	.+14     	; 0x16062 <SS80_error_return+0x6c>
    }
    SS80s->qstat = 0;
   16054:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   16058:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   1605c:	12 82       	std	Z+2, r1	; 0x02
    return(0);
   1605e:	80 e0       	ldi	r24, 0x00	; 0
   16060:	90 e0       	ldi	r25, 0x00	; 0
}
   16062:	26 96       	adiw	r28, 0x06	; 6
   16064:	e2 e0       	ldi	r30, 0x02	; 2
   16066:	0c 94 39 e7 	jmp	0x1ce72	; 0x1ce72 <__epilogue_restores__+0x20>

0001606a <SS80_locate_and_read>:
///  - Currenly we will only process 2 ** 31 bytes Max in one transfer.
///  - If an seek or I/O error happens then we MUST continue to
/// read and discard the GPIB data until we get an EOI or GPIB error...

int SS80_locate_and_read( void )
{
   1606a:	a7 e1       	ldi	r26, 0x17	; 23
   1606c:	b0 e0       	ldi	r27, 0x00	; 0
   1606e:	eb e3       	ldi	r30, 0x3B	; 59
   16070:	f0 eb       	ldi	r31, 0xB0	; 176
   16072:	0c 94 0e e7 	jmp	0x1ce1c	; 0x1ce1c <__prologue_saves__+0x2>
    DWORD total_bytes;
    DWORD count;
    int chunk;
    int len;
    uint16_t status;
    uint32_t Address = SS80_Blocks_to_Bytes(SS80s->AddressBlocks);
   16076:	60 91 66 19 	lds	r22, 0x1966	; 0x801966 <SS80s>
   1607a:	70 91 67 19 	lds	r23, 0x1967	; 0x801967 <SS80s+0x1>
   1607e:	fb 01       	movw	r30, r22
   16080:	27 81       	ldd	r18, Z+7	; 0x07
   16082:	30 85       	ldd	r19, Z+8	; 0x08
   16084:	41 85       	ldd	r20, Z+9	; 0x09
   16086:	52 85       	ldd	r21, Z+10	; 0x0a

/// @brief  SS80 Return current address in bytes
/// @return Byte Address
uint32_t SS80_Blocks_to_Bytes(uint32_t block)
{
    return(block * SS80p->UNIT.BYTES_PER_BLOCK);
   16088:	80 91 68 19 	lds	r24, 0x1968	; 0x801968 <SS80p>
   1608c:	90 91 69 19 	lds	r25, 0x1969	; 0x801969 <SS80p+0x1>
   16090:	fc 01       	movw	r30, r24
   16092:	a2 89       	ldd	r26, Z+18	; 0x12
   16094:	b3 89       	ldd	r27, Z+19	; 0x13
    int chunk;
    int len;
    uint16_t status;
    uint32_t Address = SS80_Blocks_to_Bytes(SS80s->AddressBlocks);

    SS80s->qstat = 0;
   16096:	fb 01       	movw	r30, r22
   16098:	12 82       	std	Z+2, r1	; 0x02

    status = 0;
   1609a:	1d 86       	std	Y+13, r1	; 0x0d
   1609c:	1c 86       	std	Y+12, r1	; 0x0c

    if( GPIB_IO_RD(IFC) == 0)
   1609e:	54 98       	cbi	0x0a, 4	; 10
   160a0:	4c 99       	sbic	0x09, 4	; 9
   160a2:	03 c0       	rjmp	.+6      	; 0x160aa <SS80_locate_and_read+0x40>
        return(IFC_FLAG);
   160a4:	80 e0       	ldi	r24, 0x00	; 0
   160a6:	90 e1       	ldi	r25, 0x10	; 16
   160a8:	3e c1       	rjmp	.+636    	; 0x16326 <SS80_locate_and_read+0x2bc>

/// @brief  SS80 Return current address in bytes
/// @return Byte Address
uint32_t SS80_Blocks_to_Bytes(uint32_t block)
{
    return(block * SS80p->UNIT.BYTES_PER_BLOCK);
   160aa:	0e 94 ed e6 	call	0x1cdda	; 0x1cdda <__muluhisi3>
   160ae:	4b 01       	movw	r8, r22
   160b0:	5c 01       	movw	r10, r24
/// @todo FIXME
///  SS80 4-39
///  For now we will assume the controller will never do this

#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   160b2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   160b6:	85 ff       	sbrs	r24, 5
   160b8:	1a c0       	rjmp	.+52     	; 0x160ee <SS80_locate_and_read+0x84>
        printf("[SS80 Locate and Read at %08lXH(%lXH)]\n",
   160ba:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   160be:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   160c2:	83 85       	ldd	r24, Z+11	; 0x0b
   160c4:	94 85       	ldd	r25, Z+12	; 0x0c
   160c6:	a5 85       	ldd	r26, Z+13	; 0x0d
   160c8:	b6 85       	ldd	r27, Z+14	; 0x0e
   160ca:	ed b7       	in	r30, 0x3d	; 61
   160cc:	fe b7       	in	r31, 0x3e	; 62
   160ce:	80 87       	std	Z+8, r24	; 0x08
   160d0:	91 87       	std	Z+9, r25	; 0x09
   160d2:	a2 87       	std	Z+10, r26	; 0x0a
   160d4:	b3 87       	std	Z+11, r27	; 0x0b
   160d6:	84 82       	std	Z+4, r8	; 0x04
   160d8:	95 82       	std	Z+5, r9	; 0x05
   160da:	a6 82       	std	Z+6, r10	; 0x06
   160dc:	b7 82       	std	Z+7, r11	; 0x07
   160de:	8d e5       	ldi	r24, 0x5D	; 93
   160e0:	99 e2       	ldi	r25, 0x29	; 41
   160e2:	a0 e0       	ldi	r26, 0x00	; 0
   160e4:	81 83       	std	Z+1, r24	; 0x01
   160e6:	92 83       	std	Z+2, r25	; 0x02
   160e8:	a3 83       	std	Z+3, r26	; 0x03
   160ea:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
            (long) Address, (long) SS80s->Length);
#endif

    if( SS80_cmd_seek() )
   160ee:	25 db       	rcall	.-2486   	; 0x1573a <SS80_cmd_seek>
   160f0:	89 2b       	or	r24, r25
   160f2:	09 f0       	breq	.+2      	; 0x160f6 <SS80_locate_and_read+0x8c>
   160f4:	ae c0       	rjmp	.+348    	; 0x16252 <SS80_locate_and_read+0x1e8>
    {
        return(SS80_error_return());
    }

    count = SS80s->Length;
   160f6:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   160fa:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   160fe:	43 84       	ldd	r4, Z+11	; 0x0b
   16100:	54 84       	ldd	r5, Z+12	; 0x0c
   16102:	65 84       	ldd	r6, Z+13	; 0x0d
   16104:	76 84       	ldd	r7, Z+14	; 0x0e
    total_bytes = 0;
   16106:	1e 86       	std	Y+14, r1	; 0x0e
   16108:	1f 86       	std	Y+15, r1	; 0x0f
   1610a:	18 8a       	std	Y+16, r1	; 0x10
   1610c:	19 8a       	std	Y+17, r1	; 0x11

#if SDEBUG
        if(debuglevel & GPIB_DISK_IO_TIMING)
            gpib_timer_elapsed_end("disk READ ");
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
            printf("[SS80 Disk Read %02XH bytes]\n", len);
   1610e:	8f e3       	ldi	r24, 0x3F	; 63
   16110:	99 e2       	ldi	r25, 0x29	; 41
   16112:	9c 01       	movw	r18, r24
   16114:	40 e0       	ldi	r20, 0x00	; 0
   16116:	2a 8b       	std	Y+18, r18	; 0x12
   16118:	3b 8b       	std	Y+19, r19	; 0x13
   1611a:	4c 8b       	std	Y+20, r20	; 0x14
        if(debuglevel & GPIB_RW_STR_TIMING)
            gpib_timer_elapsed_end("GPIB write");
#endif
        if( len != chunk)
        {
            SS80s->qstat = 1;
   1611c:	33 24       	eor	r3, r3
   1611e:	33 94       	inc	r3
            if(debuglevel & GPIB_ERR)
                printf("[SS80 GPIB Write Error]\n");
   16120:	8e e0       	ldi	r24, 0x0E	; 14
   16122:	99 e2       	ldi	r25, 0x29	; 41
   16124:	9c 01       	movw	r18, r24
   16126:	40 e0       	ldi	r20, 0x00	; 0
   16128:	2d 8b       	std	Y+21, r18	; 0x15
   1612a:	3e 8b       	std	Y+22, r19	; 0x16
   1612c:	4f 8b       	std	Y+23, r20	; 0x17
        return(SS80_error_return());
    }

    count = SS80s->Length;
    total_bytes = 0;
    while(count > 0 )
   1612e:	34 c0       	rjmp	.+104    	; 0x16198 <SS80_locate_and_read+0x12e>
                printf("[SS80 Disk Read Error]\n");
            return( SS80_error_return() );
        }

#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   16130:	87 fd       	sbrc	r24, 7
            gpib_timer_elapsed_begin();
   16132:	0e 94 93 85 	call	0x10b26	; 0x10b26 <gpib_timer_elapsed_begin>
#endif
        len = gpib_write_str(gpib_iobuff, chunk, &status);
   16136:	ae 01       	movw	r20, r28
   16138:	44 5f       	subi	r20, 0xF4	; 244
   1613a:	5f 4f       	sbci	r21, 0xFF	; 255
   1613c:	b6 01       	movw	r22, r12
   1613e:	8a ee       	ldi	r24, 0xEA	; 234
   16140:	9c e1       	ldi	r25, 0x1C	; 28
   16142:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <gpib_write_str>
   16146:	8c 01       	movw	r16, r24
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   16148:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1614c:	87 ff       	sbrs	r24, 7
   1614e:	04 c0       	rjmp	.+8      	; 0x16158 <SS80_locate_and_read+0xee>
            gpib_timer_elapsed_end("GPIB write");
   16150:	8a ea       	ldi	r24, 0xAA	; 170
   16152:	90 e1       	ldi	r25, 0x10	; 16
   16154:	0e 94 a5 85 	call	0x10b4a	; 0x10b4a <gpib_timer_elapsed_end>
#endif
        if( len != chunk)
   16158:	c0 16       	cp	r12, r16
   1615a:	d1 06       	cpc	r13, r17
   1615c:	09 f0       	breq	.+2      	; 0x16160 <SS80_locate_and_read+0xf6>
   1615e:	82 c0       	rjmp	.+260    	; 0x16264 <SS80_locate_and_read+0x1fa>
                SS80s->Errors |= ERR_GPIB;
                break;
            }
        }

        Address += chunk;
   16160:	0d 2c       	mov	r0, r13
   16162:	00 0c       	add	r0, r0
   16164:	ee 08       	sbc	r14, r14
   16166:	ff 08       	sbc	r15, r15
   16168:	8c 0c       	add	r8, r12
   1616a:	9d 1c       	adc	r9, r13
   1616c:	ae 1c       	adc	r10, r14
   1616e:	bf 1c       	adc	r11, r15
        total_bytes = total_bytes + len;
   16170:	01 2e       	mov	r0, r17
   16172:	00 0c       	add	r0, r0
   16174:	22 0b       	sbc	r18, r18
   16176:	33 0b       	sbc	r19, r19
   16178:	8e 85       	ldd	r24, Y+14	; 0x0e
   1617a:	9f 85       	ldd	r25, Y+15	; 0x0f
   1617c:	a8 89       	ldd	r26, Y+16	; 0x10
   1617e:	b9 89       	ldd	r27, Y+17	; 0x11
   16180:	80 0f       	add	r24, r16
   16182:	91 1f       	adc	r25, r17
   16184:	a2 1f       	adc	r26, r18
   16186:	b3 1f       	adc	r27, r19
   16188:	8e 87       	std	Y+14, r24	; 0x0e
   1618a:	9f 87       	std	Y+15, r25	; 0x0f
   1618c:	a8 8b       	std	Y+16, r26	; 0x10
   1618e:	b9 8b       	std	Y+17, r27	; 0x11
        count -= len;
   16190:	40 1a       	sub	r4, r16
   16192:	51 0a       	sbc	r5, r17
   16194:	62 0a       	sbc	r6, r18
   16196:	73 0a       	sbc	r7, r19
        return(SS80_error_return());
    }

    count = SS80s->Length;
    total_bytes = 0;
    while(count > 0 )
   16198:	41 14       	cp	r4, r1
   1619a:	51 04       	cpc	r5, r1
   1619c:	61 04       	cpc	r6, r1
   1619e:	71 04       	cpc	r7, r1
   161a0:	09 f4       	brne	.+2      	; 0x161a4 <SS80_locate_and_read+0x13a>
   161a2:	92 c0       	rjmp	.+292    	; 0x162c8 <SS80_locate_and_read+0x25e>
    {
        if( GPIB_IO_RD(IFC) == 0)
   161a4:	54 98       	cbi	0x0a, 4	; 10
   161a6:	4c 9b       	sbis	0x09, 4	; 9
   161a8:	7d cf       	rjmp	.-262    	; 0x160a4 <SS80_locate_and_read+0x3a>
        {
            return(IFC_FLAG);
        }

        if(count > 256)
   161aa:	31 e0       	ldi	r19, 0x01	; 1
   161ac:	43 16       	cp	r4, r19
   161ae:	53 06       	cpc	r5, r19
   161b0:	61 04       	cpc	r6, r1
   161b2:	71 04       	cpc	r7, r1
   161b4:	08 f4       	brcc	.+2      	; 0x161b8 <SS80_locate_and_read+0x14e>
   161b6:	4f c0       	rjmp	.+158    	; 0x16256 <SS80_locate_and_read+0x1ec>
        {
            chunk = 256;
            status = 0;                           // GPIB status
   161b8:	1d 86       	std	Y+13, r1	; 0x0d
   161ba:	1c 86       	std	Y+12, r1	; 0x0c
            return(IFC_FLAG);
        }

        if(count > 256)
        {
            chunk = 256;
   161bc:	c1 2c       	mov	r12, r1
   161be:	dd 24       	eor	r13, r13
   161c0:	d3 94       	inc	r13
            chunk = count;
            status |= EOI_FLAG;                   // GPIB EOI on final charater
        }

#if SDEBUG
        if(debuglevel & GPIB_DISK_IO_TIMING)
   161c2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   161c6:	86 fd       	sbrc	r24, 6
            gpib_timer_elapsed_begin();
   161c8:	0e 94 93 85 	call	0x10b26	; 0x10b26 <gpib_timer_elapsed_begin>
#endif

// FIXME len != chunk
        len = dbf_open_read(SS80p->HEADER.NAME, Address, gpib_iobuff, chunk, &SS80s->Errors);
   161cc:	e0 90 66 19 	lds	r14, 0x1966	; 0x801966 <SS80s>
   161d0:	f0 90 67 19 	lds	r15, 0x1967	; 0x801967 <SS80s+0x1>
   161d4:	43 e0       	ldi	r20, 0x03	; 3
   161d6:	e4 0e       	add	r14, r20
   161d8:	f1 1c       	adc	r15, r1
   161da:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   161de:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   161e2:	86 01       	movw	r16, r12
   161e4:	2a ee       	ldi	r18, 0xEA	; 234
   161e6:	3c e1       	ldi	r19, 0x1C	; 28
   161e8:	b5 01       	movw	r22, r10
   161ea:	a4 01       	movw	r20, r8
   161ec:	82 81       	ldd	r24, Z+2	; 0x02
   161ee:	93 81       	ldd	r25, Z+3	; 0x03
   161f0:	0e 94 e5 84 	call	0x109ca	; 0x109ca <dbf_open_read>
   161f4:	8c 01       	movw	r16, r24

#if SDEBUG
        if(debuglevel & GPIB_DISK_IO_TIMING)
   161f6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   161fa:	86 ff       	sbrs	r24, 6
   161fc:	04 c0       	rjmp	.+8      	; 0x16206 <SS80_locate_and_read+0x19c>
            gpib_timer_elapsed_end("disk READ ");
   161fe:	8f e9       	ldi	r24, 0x9F	; 159
   16200:	90 e1       	ldi	r25, 0x10	; 16
   16202:	0e 94 a5 85 	call	0x10b4a	; 0x10b4a <gpib_timer_elapsed_end>
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16206:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1620a:	85 ff       	sbrs	r24, 5
   1620c:	0c c0       	rjmp	.+24     	; 0x16226 <SS80_locate_and_read+0x1bc>
            printf("[SS80 Disk Read %02XH bytes]\n", len);
   1620e:	ed b7       	in	r30, 0x3d	; 61
   16210:	fe b7       	in	r31, 0x3e	; 62
   16212:	15 83       	std	Z+5, r17	; 0x05
   16214:	04 83       	std	Z+4, r16	; 0x04
   16216:	2a 89       	ldd	r18, Y+18	; 0x12
   16218:	3b 89       	ldd	r19, Y+19	; 0x13
   1621a:	4c 89       	ldd	r20, Y+20	; 0x14
   1621c:	21 83       	std	Z+1, r18	; 0x01
   1621e:	32 83       	std	Z+2, r19	; 0x02
   16220:	43 83       	std	Z+3, r20	; 0x03
   16222:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   16226:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
#endif
        if(len < 0)
   1622a:	17 ff       	sbrs	r17, 7
   1622c:	81 cf       	rjmp	.-254    	; 0x16130 <SS80_locate_and_read+0xc6>
        {
            SS80s->qstat = 1;
   1622e:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   16232:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   16236:	91 e0       	ldi	r25, 0x01	; 1
   16238:	92 83       	std	Z+2, r25	; 0x02
/// @return Return
            if(debuglevel & GPIB_ERR)
   1623a:	80 ff       	sbrs	r24, 0
   1623c:	0a c0       	rjmp	.+20     	; 0x16252 <SS80_locate_and_read+0x1e8>
                printf("[SS80 Disk Read Error]\n");
   1623e:	87 e2       	ldi	r24, 0x27	; 39
   16240:	99 e2       	ldi	r25, 0x29	; 41
   16242:	a0 e0       	ldi	r26, 0x00	; 0
   16244:	ed b7       	in	r30, 0x3d	; 61
   16246:	fe b7       	in	r31, 0x3e	; 62
   16248:	81 83       	std	Z+1, r24	; 0x01
   1624a:	92 83       	std	Z+2, r25	; 0x02
   1624c:	a3 83       	std	Z+3, r26	; 0x03
   1624e:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
            return( SS80_error_return() );
   16252:	d1 de       	rcall	.-606    	; 0x15ff6 <SS80_error_return>
   16254:	68 c0       	rjmp	.+208    	; 0x16326 <SS80_locate_and_read+0x2bc>
            chunk = 256;
            status = 0;                           // GPIB status
        }
        else
        {
            chunk = count;
   16256:	62 01       	movw	r12, r4
            status |= EOI_FLAG;                   // GPIB EOI on final charater
   16258:	8c 85       	ldd	r24, Y+12	; 0x0c
   1625a:	9d 85       	ldd	r25, Y+13	; 0x0d
   1625c:	91 60       	ori	r25, 0x01	; 1
   1625e:	9d 87       	std	Y+13, r25	; 0x0d
   16260:	8c 87       	std	Y+12, r24	; 0x0c
   16262:	af cf       	rjmp	.-162    	; 0x161c2 <SS80_locate_and_read+0x158>
        if(debuglevel & GPIB_RW_STR_TIMING)
            gpib_timer_elapsed_end("GPIB write");
#endif
        if( len != chunk)
        {
            SS80s->qstat = 1;
   16264:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   16268:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   1626c:	32 82       	std	Z+2, r3	; 0x02
            if(debuglevel & GPIB_ERR)
   1626e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16272:	80 ff       	sbrs	r24, 0
   16274:	0a c0       	rjmp	.+20     	; 0x1628a <SS80_locate_and_read+0x220>
                printf("[SS80 GPIB Write Error]\n");
   16276:	2d 89       	ldd	r18, Y+21	; 0x15
   16278:	3e 89       	ldd	r19, Y+22	; 0x16
   1627a:	4f 89       	ldd	r20, Y+23	; 0x17
   1627c:	ed b7       	in	r30, 0x3d	; 61
   1627e:	fe b7       	in	r31, 0x3e	; 62
   16280:	21 83       	std	Z+1, r18	; 0x01
   16282:	32 83       	std	Z+2, r19	; 0x02
   16284:	43 83       	std	Z+3, r20	; 0x03
   16286:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
            if(status & ERROR_MASK)
   1628a:	8c 85       	ldd	r24, Y+12	; 0x0c
   1628c:	9d 85       	ldd	r25, Y+13	; 0x0d
   1628e:	88 27       	eor	r24, r24
   16290:	90 7d       	andi	r25, 0xD0	; 208
   16292:	89 2b       	or	r24, r25
   16294:	09 f4       	brne	.+2      	; 0x16298 <SS80_locate_and_read+0x22e>
   16296:	64 cf       	rjmp	.-312    	; 0x16160 <SS80_locate_and_read+0xf6>
            {
                SS80s->Errors |= ERR_GPIB;
   16298:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   1629c:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   162a0:	83 81       	ldd	r24, Z+3	; 0x03
   162a2:	94 81       	ldd	r25, Z+4	; 0x04
   162a4:	80 62       	ori	r24, 0x20	; 32
   162a6:	94 83       	std	Z+4, r25	; 0x04
   162a8:	83 83       	std	Z+3, r24	; 0x03
        count -= len;
    }
///  Note: this should not happen unless we exit on errors above
    if(count > 0)
    {
        if(debuglevel & GPIB_ERR)
   162aa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   162ae:	80 ff       	sbrs	r24, 0
   162b0:	21 c0       	rjmp	.+66     	; 0x162f4 <SS80_locate_and_read+0x28a>
            printf("[SS80 Buffered Read DID NOT FINISH]\n");
   162b2:	89 ee       	ldi	r24, 0xE9	; 233
   162b4:	98 e2       	ldi	r25, 0x28	; 40
   162b6:	a0 e0       	ldi	r26, 0x00	; 0
   162b8:	ed b7       	in	r30, 0x3d	; 61
   162ba:	fe b7       	in	r31, 0x3e	; 62
   162bc:	81 83       	std	Z+1, r24	; 0x01
   162be:	92 83       	std	Z+2, r25	; 0x02
   162c0:	a3 83       	std	Z+3, r26	; 0x03
   162c2:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   162c6:	16 c0       	rjmp	.+44     	; 0x162f4 <SS80_locate_and_read+0x28a>
    }
    else
    {
#if SDEBUG
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   162c8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   162cc:	85 ff       	sbrs	r24, 5
   162ce:	12 c0       	rjmp	.+36     	; 0x162f4 <SS80_locate_and_read+0x28a>
            printf("[SS80 Buffered Read Total(%lXH) bytes]\n", (long) total_bytes);
   162d0:	8e 85       	ldd	r24, Y+14	; 0x0e
   162d2:	9f 85       	ldd	r25, Y+15	; 0x0f
   162d4:	a8 89       	ldd	r26, Y+16	; 0x10
   162d6:	b9 89       	ldd	r27, Y+17	; 0x11
   162d8:	ed b7       	in	r30, 0x3d	; 61
   162da:	fe b7       	in	r31, 0x3e	; 62
   162dc:	84 83       	std	Z+4, r24	; 0x04
   162de:	95 83       	std	Z+5, r25	; 0x05
   162e0:	a6 83       	std	Z+6, r26	; 0x06
   162e2:	b7 83       	std	Z+7, r27	; 0x07
   162e4:	81 ec       	ldi	r24, 0xC1	; 193
   162e6:	98 e2       	ldi	r25, 0x28	; 40
   162e8:	a0 e0       	ldi	r26, 0x00	; 0
   162ea:	81 83       	std	Z+1, r24	; 0x01
   162ec:	92 83       	std	Z+2, r25	; 0x02
   162ee:	a3 83       	std	Z+3, r26	; 0x03
   162f0:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
#endif
    }

    SS80s->AddressBlocks = SS80_Bytes_to_Blocks(Address);
   162f4:	00 91 66 19 	lds	r16, 0x1966	; 0x801966 <SS80s>
   162f8:	10 91 67 19 	lds	r17, 0x1967	; 0x801967 <SS80s+0x1>

/// @brief  SS80 Return current block addresss from bytes
/// @return Block Address
uint32_t SS80_Bytes_to_Blocks(uint32_t bytes)
{
    return(bytes / SS80p->UNIT.BYTES_PER_BLOCK);
   162fc:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   16300:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
            printf("[SS80 Buffered Read Total(%lXH) bytes]\n", (long) total_bytes);
#endif
    }

    SS80s->AddressBlocks = SS80_Bytes_to_Blocks(Address);
   16304:	22 89       	ldd	r18, Z+18	; 0x12
   16306:	33 89       	ldd	r19, Z+19	; 0x13
   16308:	40 e0       	ldi	r20, 0x00	; 0
   1630a:	50 e0       	ldi	r21, 0x00	; 0
   1630c:	c5 01       	movw	r24, r10
   1630e:	b4 01       	movw	r22, r8
   16310:	0e 94 a0 e6 	call	0x1cd40	; 0x1cd40 <__udivmodsi4>
   16314:	f8 01       	movw	r30, r16
   16316:	27 83       	std	Z+7, r18	; 0x07
   16318:	30 87       	std	Z+8, r19	; 0x08
   1631a:	41 87       	std	Z+9, r20	; 0x09
   1631c:	52 87       	std	Z+10, r21	; 0x0a
    return (status & ERROR_MASK);
   1631e:	8c 85       	ldd	r24, Y+12	; 0x0c
   16320:	9d 85       	ldd	r25, Y+13	; 0x0d
   16322:	88 27       	eor	r24, r24
   16324:	90 7d       	andi	r25, 0xD0	; 208
}
   16326:	67 96       	adiw	r28, 0x17	; 23
   16328:	e1 e1       	ldi	r30, 0x11	; 17
   1632a:	0c 94 2a e7 	jmp	0x1ce54	; 0x1ce54 <__epilogue_restores__+0x2>

0001632e <SS80_Execute_State>:
/// - State: EXEC STATE COMMAND
/// @return 0 on sucess
/// @return GPIB error flags on fail
/// @see gpib.h ERROR_MASK defines for a full list of error flags.
int SS80_Execute_State(void)
{
   1632e:	cf 93       	push	r28
   16330:	df 93       	push	r29
   16332:	00 d0       	rcall	.+0      	; 0x16334 <SS80_Execute_State+0x6>
   16334:	00 d0       	rcall	.+0      	; 0x16336 <SS80_Execute_State+0x8>
   16336:	1f 92       	push	r1
    int ret = 0;

    gpib_disable_PPR(SS80p->HEADER.PPR);
   16338:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   1633c:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   16340:	81 81       	ldd	r24, Z+1	; 0x01
   16342:	90 e0       	ldi	r25, 0x00	; 0
   16344:	0e 94 a3 86 	call	0x10d46	; 0x10d46 <gpib_disable_PPR>
    switch(SS80s->estate)
   16348:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   1634c:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   16350:	80 81       	ld	r24, Z
   16352:	91 81       	ldd	r25, Z+1	; 0x01
   16354:	82 30       	cpi	r24, 0x02	; 2
   16356:	91 05       	cpc	r25, r1
   16358:	89 f0       	breq	.+34     	; 0x1637c <SS80_Execute_State+0x4e>
   1635a:	3c f4       	brge	.+14     	; 0x1636a <SS80_Execute_State+0x3c>
   1635c:	00 97       	sbiw	r24, 0x00	; 0
   1635e:	81 f1       	breq	.+96     	; 0x163c0 <SS80_Execute_State+0x92>
   16360:	81 30       	cpi	r24, 0x01	; 1
   16362:	91 05       	cpc	r25, r1
   16364:	b9 f4       	brne	.+46     	; 0x16394 <SS80_Execute_State+0x66>
    {
        case EXEC_IDLE:
            break;
        case EXEC_LOCATE_AND_READ:
            ret = SS80_locate_and_read();
   16366:	81 de       	rcall	.-766    	; 0x1606a <SS80_locate_and_read>
   16368:	0d c0       	rjmp	.+26     	; 0x16384 <SS80_Execute_State+0x56>
int SS80_Execute_State(void)
{
    int ret = 0;

    gpib_disable_PPR(SS80p->HEADER.PPR);
    switch(SS80s->estate)
   1636a:	83 30       	cpi	r24, 0x03	; 3
   1636c:	91 05       	cpc	r25, r1
   1636e:	41 f0       	breq	.+16     	; 0x16380 <SS80_Execute_State+0x52>
   16370:	84 30       	cpi	r24, 0x04	; 4
   16372:	91 05       	cpc	r25, r1
   16374:	79 f4       	brne	.+30     	; 0x16394 <SS80_Execute_State+0x66>
        case EXEC_SEND_STATUS:
            ret = SS80_send_status();
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_DESCRIBE:
            ret = SS80_describe();
   16376:	0e 94 66 a8 	call	0x150cc	; 0x150cc <SS80_describe>
        case EXEC_LOCATE_AND_READ:
            ret = SS80_locate_and_read();
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_LOCATE_AND_WRITE:
            ret = SS80_locate_and_write();
   1637a:	04 c0       	rjmp	.+8      	; 0x16384 <SS80_Execute_State+0x56>
   1637c:	53 da       	rcall	.-2906   	; 0x15824 <SS80_locate_and_write>
   1637e:	02 c0       	rjmp	.+4      	; 0x16384 <SS80_Execute_State+0x56>
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_SEND_STATUS:
            ret = SS80_send_status();
   16380:	0e 94 e5 a7 	call	0x14fca	; 0x14fca <SS80_send_status>
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_DESCRIBE:
            ret = SS80_describe();
   16384:	ec 01       	movw	r28, r24
            SS80s->estate = EXEC_IDLE;
   16386:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   1638a:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   1638e:	11 82       	std	Z+1, r1	; 0x01
   16390:	10 82       	st	Z, r1
            break;
   16392:	18 c0       	rjmp	.+48     	; 0x163c4 <SS80_Execute_State+0x96>
        default:
            if(debuglevel & GPIB_ERR)
   16394:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   16398:	20 ff       	sbrs	r18, 0
   1639a:	0c c0       	rjmp	.+24     	; 0x163b4 <SS80_Execute_State+0x86>
                printf("[SS80 EXEC state:%d error]\n", SS80s->estate);
   1639c:	ed b7       	in	r30, 0x3d	; 61
   1639e:	fe b7       	in	r31, 0x3e	; 62
   163a0:	95 83       	std	Z+5, r25	; 0x05
   163a2:	84 83       	std	Z+4, r24	; 0x04
   163a4:	85 e8       	ldi	r24, 0x85	; 133
   163a6:	99 e2       	ldi	r25, 0x29	; 41
   163a8:	a0 e0       	ldi	r26, 0x00	; 0
   163aa:	81 83       	std	Z+1, r24	; 0x01
   163ac:	92 83       	std	Z+2, r25	; 0x02
   163ae:	a3 83       	std	Z+3, r26	; 0x03
   163b0:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
            SS80s->estate = EXEC_IDLE;
   163b4:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   163b8:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   163bc:	11 82       	std	Z+1, r1	; 0x01
   163be:	10 82       	st	Z, r1
/// @return 0 on sucess
/// @return GPIB error flags on fail
/// @see gpib.h ERROR_MASK defines for a full list of error flags.
int SS80_Execute_State(void)
{
    int ret = 0;
   163c0:	c0 e0       	ldi	r28, 0x00	; 0
   163c2:	d0 e0       	ldi	r29, 0x00	; 0
            if(debuglevel & GPIB_ERR)
                printf("[SS80 EXEC state:%d error]\n", SS80s->estate);
            SS80s->estate = EXEC_IDLE;
            break;
    }
    gpib_enable_PPR(SS80p->HEADER.PPR);
   163c4:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   163c8:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   163cc:	81 81       	ldd	r24, Z+1	; 0x01
   163ce:	90 e0       	ldi	r25, 0x00	; 0
   163d0:	0e 94 6d 86 	call	0x10cda	; 0x10cda <gpib_enable_PPR>
    return(ret);
}
   163d4:	ce 01       	movw	r24, r28
   163d6:	cd b7       	in	r28, 0x3d	; 61
   163d8:	de b7       	in	r29, 0x3e	; 62
   163da:	25 96       	adiw	r28, 0x05	; 5
   163dc:	e2 e0       	ldi	r30, 0x02	; 2
   163de:	0c 94 39 e7 	jmp	0x1ce72	; 0x1ce72 <__epilogue_restores__+0x20>

000163e2 <SS80_COMMANDS>:
/// @param[in] ch command.
/// @return  0 on send
/// @see GPIB error status
/// @see gpib.h _FLAGS defines for a full list.
int SS80_COMMANDS(uint8_t ch)
{
   163e2:	a9 e0       	ldi	r26, 0x09	; 9
   163e4:	b0 e0       	ldi	r27, 0x00	; 0
   163e6:	e7 ef       	ldi	r30, 0xF7	; 247
   163e8:	f1 eb       	ldi	r31, 0xB1	; 177
   163ea:	0c 94 1c e7 	jmp	0x1ce38	; 0x1ce38 <__prologue_saves__+0x1e>
   163ee:	18 2f       	mov	r17, r24
    if(SS80_is_MTA(talking) || SS80_is_MLA(listening))
   163f0:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   163f4:	90 e0       	ldi	r25, 0x00	; 0
   163f6:	0e 94 af 8c 	call	0x1195e	; 0x1195e <SS80_is_MTA>
   163fa:	89 2b       	or	r24, r25
   163fc:	19 f0       	breq	.+6      	; 0x16404 <SS80_COMMANDS+0x22>
    {
        if(ch == 0x65 )
   163fe:	15 36       	cpi	r17, 0x65	; 101
   16400:	19 f5       	brne	.+70     	; 0x16448 <SS80_COMMANDS+0x66>
   16402:	09 c0       	rjmp	.+18     	; 0x16416 <SS80_COMMANDS+0x34>
/// @return  0 on send
/// @see GPIB error status
/// @see gpib.h _FLAGS defines for a full list.
int SS80_COMMANDS(uint8_t ch)
{
    if(SS80_is_MTA(talking) || SS80_is_MLA(listening))
   16404:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   16408:	90 e0       	ldi	r25, 0x00	; 0
   1640a:	0e 94 9d 8c 	call	0x1193a	; 0x1193a <SS80_is_MLA>
   1640e:	ec 01       	movw	r28, r24
   16410:	89 2b       	or	r24, r25
   16412:	a9 f7       	brne	.-22     	; 0x163fe <SS80_COMMANDS+0x1c>
   16414:	ad c0       	rjmp	.+346    	; 0x16570 <SS80_COMMANDS+0x18e>
    {
        if(ch == 0x65 )
        {
            if(SS80_is_MLA(listening))
   16416:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   1641a:	90 e0       	ldi	r25, 0x00	; 0
   1641c:	0e 94 9d 8c 	call	0x1193a	; 0x1193a <SS80_is_MLA>
   16420:	89 2b       	or	r24, r25
   16422:	09 f4       	brne	.+2      	; 0x16426 <SS80_COMMANDS+0x44>
   16424:	a2 c0       	rjmp	.+324    	; 0x1656a <SS80_COMMANDS+0x188>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16426:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1642a:	85 ff       	sbrs	r24, 5
   1642c:	0a c0       	rjmp	.+20     	; 0x16442 <SS80_COMMANDS+0x60>
                    printf("[SS80 Command State]\n");
   1642e:	8d e6       	ldi	r24, 0x6D	; 109
   16430:	92 e2       	ldi	r25, 0x22	; 34
   16432:	a0 e0       	ldi	r26, 0x00	; 0
   16434:	ed b7       	in	r30, 0x3d	; 61
   16436:	fe b7       	in	r31, 0x3e	; 62
   16438:	81 83       	std	Z+1, r24	; 0x01
   1643a:	92 83       	std	Z+2, r25	; 0x02
   1643c:	a3 83       	std	Z+3, r26	; 0x03
   1643e:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
#endif
                return ( SS80_Command_State() );
   16442:	0e 94 26 a9 	call	0x1524c	; 0x1524c <SS80_Command_State>
   16446:	73 c0       	rjmp	.+230    	; 0x1652e <SS80_COMMANDS+0x14c>
            }
            return(0);
        }

        if(ch == 0x6e )
   16448:	1e 36       	cpi	r17, 0x6E	; 110
   1644a:	01 f5       	brne	.+64     	; 0x1648c <SS80_COMMANDS+0xaa>
        {
            if(SS80_is_MLA(listening)  || SS80_is_MTA(talking))
   1644c:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   16450:	90 e0       	ldi	r25, 0x00	; 0
   16452:	0e 94 9d 8c 	call	0x1193a	; 0x1193a <SS80_is_MLA>
   16456:	89 2b       	or	r24, r25
   16458:	79 f0       	breq	.+30     	; 0x16478 <SS80_COMMANDS+0x96>
            {
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1645a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1645e:	85 ff       	sbrs	r24, 5
   16460:	13 c0       	rjmp	.+38     	; 0x16488 <SS80_COMMANDS+0xa6>
                    printf("[SS00 Execute State]\n");
   16462:	87 e5       	ldi	r24, 0x57	; 87
   16464:	92 e2       	ldi	r25, 0x22	; 34
   16466:	a0 e0       	ldi	r26, 0x00	; 0
   16468:	ed b7       	in	r30, 0x3d	; 61
   1646a:	fe b7       	in	r31, 0x3e	; 62
   1646c:	81 83       	std	Z+1, r24	; 0x01
   1646e:	92 83       	std	Z+2, r25	; 0x02
   16470:	a3 83       	std	Z+3, r26	; 0x03
   16472:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   16476:	08 c0       	rjmp	.+16     	; 0x16488 <SS80_COMMANDS+0xa6>
            return(0);
        }

        if(ch == 0x6e )
        {
            if(SS80_is_MLA(listening)  || SS80_is_MTA(talking))
   16478:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   1647c:	90 e0       	ldi	r25, 0x00	; 0
   1647e:	0e 94 af 8c 	call	0x1195e	; 0x1195e <SS80_is_MTA>
   16482:	89 2b       	or	r24, r25
   16484:	51 f7       	brne	.-44     	; 0x1645a <SS80_COMMANDS+0x78>
   16486:	71 c0       	rjmp	.+226    	; 0x1656a <SS80_COMMANDS+0x188>
            {
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
                    printf("[SS00 Execute State]\n");
                return ( SS80_Execute_State() );
   16488:	52 df       	rcall	.-348    	; 0x1632e <SS80_Execute_State>
   1648a:	51 c0       	rjmp	.+162    	; 0x1652e <SS80_COMMANDS+0x14c>

            }
            return(0);
        }

        if(ch == 0x70 )
   1648c:	10 37       	cpi	r17, 0x70	; 112
   1648e:	b9 f5       	brne	.+110    	; 0x164fe <SS80_COMMANDS+0x11c>
        {
            if(SS80_is_MTA(talking) )
   16490:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   16494:	90 e0       	ldi	r25, 0x00	; 0
   16496:	0e 94 af 8c 	call	0x1195e	; 0x1195e <SS80_is_MTA>
   1649a:	89 2b       	or	r24, r25
   1649c:	81 f0       	breq	.+32     	; 0x164be <SS80_COMMANDS+0xdc>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1649e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   164a2:	85 ff       	sbrs	r24, 5
   164a4:	0a c0       	rjmp	.+20     	; 0x164ba <SS80_COMMANDS+0xd8>
                    printf("[SS80 Report State]\n");
   164a6:	82 e4       	ldi	r24, 0x42	; 66
   164a8:	92 e2       	ldi	r25, 0x22	; 34
   164aa:	a0 e0       	ldi	r26, 0x00	; 0
   164ac:	ed b7       	in	r30, 0x3d	; 61
   164ae:	fe b7       	in	r31, 0x3e	; 62
   164b0:	81 83       	std	Z+1, r24	; 0x01
   164b2:	92 83       	std	Z+2, r25	; 0x02
   164b4:	a3 83       	std	Z+3, r26	; 0x03
   164b6:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
#endif
                return( SS80_Report() );
   164ba:	46 db       	rcall	.-2420   	; 0x15b48 <SS80_Report>
   164bc:	38 c0       	rjmp	.+112    	; 0x1652e <SS80_COMMANDS+0x14c>
            }

            if(SS80_is_MLA(listening))
   164be:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   164c2:	90 e0       	ldi	r25, 0x00	; 0
   164c4:	0e 94 9d 8c 	call	0x1193a	; 0x1193a <SS80_is_MLA>
   164c8:	89 2b       	or	r24, r25
   164ca:	09 f4       	brne	.+2      	; 0x164ce <SS80_COMMANDS+0xec>
   164cc:	4e c0       	rjmp	.+156    	; 0x1656a <SS80_COMMANDS+0x188>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   164ce:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   164d2:	85 ff       	sbrs	r24, 5
   164d4:	0a c0       	rjmp	.+20     	; 0x164ea <SS80_COMMANDS+0x108>
                    printf("[Amigo Clear]\n");
   164d6:	83 e3       	ldi	r24, 0x33	; 51
   164d8:	92 e2       	ldi	r25, 0x22	; 34
   164da:	a0 e0       	ldi	r26, 0x00	; 0
   164dc:	ed b7       	in	r30, 0x3d	; 61
   164de:	fe b7       	in	r31, 0x3e	; 62
   164e0:	81 83       	std	Z+1, r24	; 0x01
   164e2:	92 83       	std	Z+2, r25	; 0x02
   164e4:	a3 83       	std	Z+3, r26	; 0x03
   164e6:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
#endif
                gpib_disable_PPR(SS80p->HEADER.PPR);
   164ea:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   164ee:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   164f2:	81 81       	ldd	r24, Z+1	; 0x01
   164f4:	90 e0       	ldi	r25, 0x00	; 0
   164f6:	0e 94 a3 86 	call	0x10d46	; 0x10d46 <gpib_disable_PPR>
                return( SS80_Amigo_Clear() );
   164fa:	1d dc       	rcall	.-1990   	; 0x15d36 <SS80_Amigo_Clear>
   164fc:	18 c0       	rjmp	.+48     	; 0x1652e <SS80_COMMANDS+0x14c>
            }
            return (0);
        }
        if(ch == 0x72 )
   164fe:	12 37       	cpi	r17, 0x72	; 114
   16500:	c1 f4       	brne	.+48     	; 0x16532 <SS80_COMMANDS+0x150>
        {
            if(SS80_is_MLA(listening) )
   16502:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   16506:	90 e0       	ldi	r25, 0x00	; 0
   16508:	0e 94 9d 8c 	call	0x1193a	; 0x1193a <SS80_is_MLA>
   1650c:	89 2b       	or	r24, r25
   1650e:	89 f0       	breq	.+34     	; 0x16532 <SS80_COMMANDS+0x150>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16510:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16514:	85 ff       	sbrs	r24, 5
   16516:	0a c0       	rjmp	.+20     	; 0x1652c <SS80_COMMANDS+0x14a>
                    printf("[SS80 Transparent]\n");
   16518:	8f e1       	ldi	r24, 0x1F	; 31
   1651a:	92 e2       	ldi	r25, 0x22	; 34
   1651c:	a0 e0       	ldi	r26, 0x00	; 0
   1651e:	ed b7       	in	r30, 0x3d	; 61
   16520:	fe b7       	in	r31, 0x3e	; 62
   16522:	81 83       	std	Z+1, r24	; 0x01
   16524:	92 83       	std	Z+2, r25	; 0x02
   16526:	a3 83       	std	Z+3, r26	; 0x03
   16528:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
#endif
                return( SS80_Transparent_State() );
   1652c:	58 dc       	rcall	.-1872   	; 0x15dde <SS80_Transparent_State>
   1652e:	ec 01       	movw	r28, r24
   16530:	3b c0       	rjmp	.+118    	; 0x165a8 <SS80_COMMANDS+0x1c6>
            }
        }
        if(debuglevel & GPIB_ERR)
   16532:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16536:	80 ff       	sbrs	r24, 0
   16538:	18 c0       	rjmp	.+48     	; 0x1656a <SS80_COMMANDS+0x188>
            printf("[SS80 SC Unknown: %02XH, listen:%02XH, talk:%02XH]\n",
   1653a:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   1653e:	90 e0       	ldi	r25, 0x00	; 0
   16540:	ed b7       	in	r30, 0x3d	; 61
   16542:	fe b7       	in	r31, 0x3e	; 62
   16544:	91 87       	std	Z+9, r25	; 0x09
   16546:	80 87       	std	Z+8, r24	; 0x08
   16548:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   1654c:	90 e0       	ldi	r25, 0x00	; 0
   1654e:	97 83       	std	Z+7, r25	; 0x07
   16550:	86 83       	std	Z+6, r24	; 0x06
   16552:	81 2f       	mov	r24, r17
   16554:	90 e0       	ldi	r25, 0x00	; 0
   16556:	95 83       	std	Z+5, r25	; 0x05
   16558:	84 83       	std	Z+4, r24	; 0x04
   1655a:	8b ee       	ldi	r24, 0xEB	; 235
   1655c:	91 e2       	ldi	r25, 0x21	; 33
   1655e:	a0 e0       	ldi	r26, 0x00	; 0
   16560:	81 83       	std	Z+1, r24	; 0x01
   16562:	92 83       	std	Z+2, r25	; 0x02
   16564:	a3 83       	std	Z+3, r26	; 0x03
   16566:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
                0xff & ch, 0xff & listening, 0xff & talking);
        return(0);
   1656a:	c0 e0       	ldi	r28, 0x00	; 0
   1656c:	d0 e0       	ldi	r29, 0x00	; 0
   1656e:	1c c0       	rjmp	.+56     	; 0x165a8 <SS80_COMMANDS+0x1c6>
    }

    if(debuglevel & GPIB_ERR)
   16570:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16574:	80 ff       	sbrs	r24, 0
   16576:	f9 cf       	rjmp	.-14     	; 0x1656a <SS80_COMMANDS+0x188>
        printf("[SS80 Unknown SC: %02XH, listen:%02XH, talk:%02XH]\n",
   16578:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   1657c:	90 e0       	ldi	r25, 0x00	; 0
   1657e:	ed b7       	in	r30, 0x3d	; 61
   16580:	fe b7       	in	r31, 0x3e	; 62
   16582:	91 87       	std	Z+9, r25	; 0x09
   16584:	80 87       	std	Z+8, r24	; 0x08
   16586:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   1658a:	90 e0       	ldi	r25, 0x00	; 0
   1658c:	97 83       	std	Z+7, r25	; 0x07
   1658e:	86 83       	std	Z+6, r24	; 0x06
   16590:	81 2f       	mov	r24, r17
   16592:	90 e0       	ldi	r25, 0x00	; 0
   16594:	95 83       	std	Z+5, r25	; 0x05
   16596:	84 83       	std	Z+4, r24	; 0x04
   16598:	87 eb       	ldi	r24, 0xB7	; 183
   1659a:	91 e2       	ldi	r25, 0x21	; 33
   1659c:	a0 e0       	ldi	r26, 0x00	; 0
   1659e:	81 83       	std	Z+1, r24	; 0x01
   165a0:	92 83       	std	Z+2, r25	; 0x02
   165a2:	a3 83       	std	Z+3, r26	; 0x03
   165a4:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
            0xff & ch, 0xff & listening, 0xff & talking);
    return(0);
}
   165a8:	ce 01       	movw	r24, r28
   165aa:	cd b7       	in	r28, 0x3d	; 61
   165ac:	de b7       	in	r29, 0x3e	; 62
   165ae:	29 96       	adiw	r28, 0x09	; 9
   165b0:	e3 e0       	ldi	r30, 0x03	; 3
   165b2:	0c 94 38 e7 	jmp	0x1ce70	; 0x1ce70 <__epilogue_restores__+0x1e>

000165b6 <amigo_overflow_check>:
    }
/// @todo FIXME
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
    AMIGOs->dsj = 0;
    return(status & ERROR_MASK);
}
   165b6:	cf 92       	push	r12
   165b8:	df 92       	push	r13
   165ba:	ef 92       	push	r14
   165bc:	0f 93       	push	r16
   165be:	1f 93       	push	r17
   165c0:	cf 93       	push	r28
   165c2:	df 93       	push	r29
   165c4:	00 d0       	rcall	.+0      	; 0x165c6 <amigo_overflow_check+0x10>
   165c6:	00 d0       	rcall	.+0      	; 0x165c8 <amigo_overflow_check+0x12>
   165c8:	1f 92       	push	r1
   165ca:	ec 01       	movw	r28, r24
   165cc:	8b 01       	movw	r16, r22
   165ce:	80 e0       	ldi	r24, 0x00	; 0
   165d0:	90 e0       	ldi	r25, 0x00	; 0
   165d2:	2f e6       	ldi	r18, 0x6F	; 111
   165d4:	31 e3       	ldi	r19, 0x31	; 49
   165d6:	69 01       	movw	r12, r18
   165d8:	e1 2c       	mov	r14, r1
   165da:	2d 81       	ldd	r18, Y+5	; 0x05
   165dc:	30 e0       	ldi	r19, 0x00	; 0
   165de:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   165e2:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   165e6:	42 85       	ldd	r20, Z+10	; 0x0a
   165e8:	53 85       	ldd	r21, Z+11	; 0x0b
   165ea:	24 17       	cp	r18, r20
   165ec:	35 07       	cpc	r19, r21
   165ee:	64 f1       	brlt	.+88     	; 0x16648 <amigo_overflow_check+0x92>
   165f0:	1d 82       	std	Y+5, r1	; 0x05
   165f2:	2c 81       	ldd	r18, Y+4	; 0x04
   165f4:	2f 5f       	subi	r18, 0xFF	; 255
   165f6:	2c 83       	std	Y+4, r18	; 0x04
   165f8:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   165fc:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16600:	2c 81       	ldd	r18, Y+4	; 0x04
   16602:	30 e0       	ldi	r19, 0x00	; 0
   16604:	44 85       	ldd	r20, Z+12	; 0x0c
   16606:	55 85       	ldd	r21, Z+13	; 0x0d
   16608:	24 17       	cp	r18, r20
   1660a:	35 07       	cpc	r19, r21
   1660c:	34 f3       	brlt	.-52     	; 0x165da <amigo_overflow_check+0x24>
   1660e:	1c 82       	std	Y+4, r1	; 0x04
   16610:	2b 81       	ldd	r18, Y+3	; 0x03
   16612:	2f 5f       	subi	r18, 0xFF	; 255
   16614:	2b 83       	std	Y+3, r18	; 0x03
   16616:	30 e0       	ldi	r19, 0x00	; 0
   16618:	46 85       	ldd	r20, Z+14	; 0x0e
   1661a:	57 85       	ldd	r21, Z+15	; 0x0f
   1661c:	24 17       	cp	r18, r20
   1661e:	35 07       	cpc	r19, r21
   16620:	5c f3       	brlt	.-42     	; 0x165f8 <amigo_overflow_check+0x42>
   16622:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16626:	80 ff       	sbrs	r24, 0
   16628:	0c c0       	rjmp	.+24     	; 0x16642 <amigo_overflow_check+0x8c>
   1662a:	01 15       	cp	r16, r1
   1662c:	11 05       	cpc	r17, r1
   1662e:	49 f0       	breq	.+18     	; 0x16642 <amigo_overflow_check+0x8c>
   16630:	ed b7       	in	r30, 0x3d	; 61
   16632:	fe b7       	in	r31, 0x3e	; 62
   16634:	15 83       	std	Z+5, r17	; 0x05
   16636:	04 83       	std	Z+4, r16	; 0x04
   16638:	c1 82       	std	Z+1, r12	; 0x01
   1663a:	d2 82       	std	Z+2, r13	; 0x02
   1663c:	e3 82       	std	Z+3, r14	; 0x03
   1663e:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   16642:	81 e0       	ldi	r24, 0x01	; 1
   16644:	90 e0       	ldi	r25, 0x00	; 0
   16646:	d8 cf       	rjmp	.-80     	; 0x165f8 <amigo_overflow_check+0x42>
   16648:	0f 90       	pop	r0
   1664a:	0f 90       	pop	r0
   1664c:	0f 90       	pop	r0
   1664e:	0f 90       	pop	r0
   16650:	0f 90       	pop	r0
   16652:	df 91       	pop	r29
   16654:	cf 91       	pop	r28
   16656:	1f 91       	pop	r17
   16658:	0f 91       	pop	r16
   1665a:	ef 90       	pop	r14
   1665c:	df 90       	pop	r13
   1665e:	cf 90       	pop	r12
   16660:	08 95       	ret

00016662 <amigo_chs_to_logical>:
   16662:	a1 e1       	ldi	r26, 0x11	; 17
   16664:	b0 e0       	ldi	r27, 0x00	; 0
   16666:	e7 e3       	ldi	r30, 0x37	; 55
   16668:	f3 eb       	ldi	r31, 0xB3	; 179
   1666a:	0c 94 11 e7 	jmp	0x1ce22	; 0x1ce22 <__prologue_saves__+0x8>
   1666e:	8b 01       	movw	r16, r22
   16670:	60 91 64 19 	lds	r22, 0x1964	; 0x801964 <AMIGOp>
   16674:	70 91 65 19 	lds	r23, 0x1965	; 0x801965 <AMIGOp+0x1>
   16678:	fb 01       	movw	r30, r22
   1667a:	42 85       	ldd	r20, Z+10	; 0x0a
   1667c:	53 85       	ldd	r21, Z+11	; 0x0b
   1667e:	fc 01       	movw	r30, r24
   16680:	c4 81       	ldd	r28, Z+4	; 0x04
   16682:	d0 e0       	ldi	r29, 0x00	; 0
   16684:	4c 9f       	mul	r20, r28
   16686:	90 01       	movw	r18, r0
   16688:	4d 9f       	mul	r20, r29
   1668a:	30 0d       	add	r19, r0
   1668c:	5c 9f       	mul	r21, r28
   1668e:	30 0d       	add	r19, r0
   16690:	11 24       	eor	r1, r1
   16692:	49 01       	movw	r8, r18
   16694:	33 0f       	add	r19, r19
   16696:	aa 08       	sbc	r10, r10
   16698:	bb 08       	sbc	r11, r11
   1669a:	63 80       	ldd	r6, Z+3	; 0x03
   1669c:	71 2c       	mov	r7, r1
   1669e:	fb 01       	movw	r30, r22
   166a0:	e4 84       	ldd	r14, Z+12	; 0x0c
   166a2:	f5 84       	ldd	r15, Z+13	; 0x0d
   166a4:	4e 9d       	mul	r20, r14
   166a6:	d0 01       	movw	r26, r0
   166a8:	4f 9d       	mul	r20, r15
   166aa:	b0 0d       	add	r27, r0
   166ac:	5e 9d       	mul	r21, r14
   166ae:	b0 0d       	add	r27, r0
   166b0:	11 24       	eor	r1, r1
   166b2:	a6 9d       	mul	r26, r6
   166b4:	90 01       	movw	r18, r0
   166b6:	a7 9d       	mul	r26, r7
   166b8:	30 0d       	add	r19, r0
   166ba:	b6 9d       	mul	r27, r6
   166bc:	30 0d       	add	r19, r0
   166be:	11 24       	eor	r1, r1
   166c0:	69 01       	movw	r12, r18
   166c2:	33 0f       	add	r19, r19
   166c4:	ee 08       	sbc	r14, r14
   166c6:	ff 08       	sbc	r15, r15
   166c8:	8c 0c       	add	r8, r12
   166ca:	9d 1c       	adc	r9, r13
   166cc:	ae 1c       	adc	r10, r14
   166ce:	bf 1c       	adc	r11, r15
   166d0:	fc 01       	movw	r30, r24
   166d2:	f5 80       	ldd	r15, Z+5	; 0x05
   166d4:	a5 01       	movw	r20, r10
   166d6:	94 01       	movw	r18, r8
   166d8:	2f 0d       	add	r18, r15
   166da:	31 1d       	adc	r19, r1
   166dc:	41 1d       	adc	r20, r1
   166de:	51 1d       	adc	r21, r1
   166e0:	fb 01       	movw	r30, r22
   166e2:	a0 85       	ldd	r26, Z+8	; 0x08
   166e4:	b1 85       	ldd	r27, Z+9	; 0x09
   166e6:	0e 94 f7 e6 	call	0x1cdee	; 0x1cdee <__mulshisi3>
   166ea:	4b 01       	movw	r8, r22
   166ec:	5c 01       	movw	r10, r24
   166ee:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   166f2:	85 ff       	sbrs	r24, 5
   166f4:	22 c0       	rjmp	.+68     	; 0x1673a <amigo_chs_to_logical+0xd8>
   166f6:	8f 2d       	mov	r24, r15
   166f8:	90 e0       	ldi	r25, 0x00	; 0
   166fa:	ed b7       	in	r30, 0x3d	; 61
   166fc:	fe b7       	in	r31, 0x3e	; 62
   166fe:	91 8b       	std	Z+17, r25	; 0x11
   16700:	80 8b       	std	Z+16, r24	; 0x10
   16702:	d7 87       	std	Z+15, r29	; 0x0f
   16704:	c6 87       	std	Z+14, r28	; 0x0e
   16706:	75 86       	std	Z+13, r7	; 0x0d
   16708:	64 86       	std	Z+12, r6	; 0x0c
   1670a:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   1670e:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16712:	81 81       	ldd	r24, Z+1	; 0x01
   16714:	90 e0       	ldi	r25, 0x00	; 0
   16716:	ed b7       	in	r30, 0x3d	; 61
   16718:	fe b7       	in	r31, 0x3e	; 62
   1671a:	93 87       	std	Z+11, r25	; 0x0b
   1671c:	82 87       	std	Z+10, r24	; 0x0a
   1671e:	86 82       	std	Z+6, r8	; 0x06
   16720:	97 82       	std	Z+7, r9	; 0x07
   16722:	a0 86       	std	Z+8, r10	; 0x08
   16724:	b1 86       	std	Z+9, r11	; 0x09
   16726:	15 83       	std	Z+5, r17	; 0x05
   16728:	04 83       	std	Z+4, r16	; 0x04
   1672a:	8c e1       	ldi	r24, 0x1C	; 28
   1672c:	91 e3       	ldi	r25, 0x31	; 49
   1672e:	a0 e0       	ldi	r26, 0x00	; 0
   16730:	81 83       	std	Z+1, r24	; 0x01
   16732:	92 83       	std	Z+2, r25	; 0x02
   16734:	a3 83       	std	Z+3, r26	; 0x03
   16736:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   1673a:	c5 01       	movw	r24, r10
   1673c:	b4 01       	movw	r22, r8
   1673e:	cd b7       	in	r28, 0x3d	; 61
   16740:	de b7       	in	r29, 0x3e	; 62
   16742:	61 96       	adiw	r28, 0x11	; 17
   16744:	ee e0       	ldi	r30, 0x0E	; 14
   16746:	0c 94 2d e7 	jmp	0x1ce5a	; 0x1ce5a <__epilogue_restores__+0x8>

0001674a <amigo_init>:
   1674a:	ff 92       	push	r15
   1674c:	0f 93       	push	r16
   1674e:	1f 93       	push	r17
   16750:	cf 93       	push	r28
   16752:	df 93       	push	r29
   16754:	0d e6       	ldi	r16, 0x6D	; 109
   16756:	1f e1       	ldi	r17, 0x1F	; 31
   16758:	cb e0       	ldi	r28, 0x0B	; 11
   1675a:	d4 e0       	ldi	r29, 0x04	; 4
   1675c:	82 e0       	ldi	r24, 0x02	; 2
   1675e:	f8 2e       	mov	r15, r24
   16760:	d8 01       	movw	r26, r16
   16762:	8c 91       	ld	r24, X
   16764:	81 30       	cpi	r24, 0x01	; 1
   16766:	31 f5       	brne	.+76     	; 0x167b4 <amigo_init+0x6a>
   16768:	8c 2f       	mov	r24, r28
   1676a:	0e 94 bd 97 	call	0x12f7a	; 0x12f7a <set_active_device>
   1676e:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16772:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16776:	10 82       	st	Z, r1
   16778:	9f 01       	movw	r18, r30
   1677a:	27 5f       	subi	r18, 0xF7	; 247
   1677c:	3f 4f       	sbci	r19, 0xFF	; 255
   1677e:	d9 01       	movw	r26, r18
   16780:	8d 2f       	mov	r24, r29
   16782:	1d 92       	st	X+, r1
   16784:	8a 95       	dec	r24
   16786:	e9 f7       	brne	.-6      	; 0x16782 <amigo_init+0x38>
   16788:	2c 5f       	subi	r18, 0xFC	; 252
   1678a:	3f 4f       	sbci	r19, 0xFF	; 255
   1678c:	d9 01       	movw	r26, r18
   1678e:	8d 2f       	mov	r24, r29
   16790:	1d 92       	st	X+, r1
   16792:	8a 95       	dec	r24
   16794:	e9 f7       	brne	.-6      	; 0x16790 <amigo_init+0x46>
   16796:	11 82       	std	Z+1, r1	; 0x01
   16798:	15 82       	std	Z+5, r1	; 0x05
   1679a:	14 82       	std	Z+4, r1	; 0x04
   1679c:	13 82       	std	Z+3, r1	; 0x03
   1679e:	f6 82       	std	Z+6, r15	; 0x06
   167a0:	10 86       	std	Z+8, r1	; 0x08
   167a2:	17 82       	std	Z+7, r1	; 0x07
   167a4:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   167a8:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   167ac:	81 81       	ldd	r24, Z+1	; 0x01
   167ae:	90 e0       	ldi	r25, 0x00	; 0
   167b0:	0e 94 a3 86 	call	0x10d46	; 0x10d46 <gpib_disable_PPR>
   167b4:	0b 50       	subi	r16, 0x0B	; 11
   167b6:	11 09       	sbc	r17, r1
   167b8:	c1 50       	subi	r28, 0x01	; 1
   167ba:	90 f6       	brcc	.-92     	; 0x16760 <amigo_init+0x16>
   167bc:	cd b7       	in	r28, 0x3d	; 61
   167be:	de b7       	in	r29, 0x3e	; 62
   167c0:	e5 e0       	ldi	r30, 0x05	; 5
   167c2:	0c 94 36 e7 	jmp	0x1ce6c	; 0x1ce6c <__epilogue_restores__+0x1a>

000167c6 <amigo_request_logical_address>:
   167c6:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   167ca:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   167ce:	15 86       	std	Z+13, r1	; 0x0d
   167d0:	83 81       	ldd	r24, Z+3	; 0x03
   167d2:	86 87       	std	Z+14, r24	; 0x0e
   167d4:	84 81       	ldd	r24, Z+4	; 0x04
   167d6:	87 87       	std	Z+15, r24	; 0x0f
   167d8:	85 81       	ldd	r24, Z+5	; 0x05
   167da:	80 8b       	std	Z+16, r24	; 0x10
   167dc:	80 e0       	ldi	r24, 0x00	; 0
   167de:	90 e0       	ldi	r25, 0x00	; 0
   167e0:	08 95       	ret

000167e2 <amigo_request_status>:
   167e2:	00 d0       	rcall	.+0      	; 0x167e4 <amigo_request_status+0x2>
   167e4:	1f 92       	push	r1
   167e6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   167ea:	85 ff       	sbrs	r24, 5
   167ec:	0a c0       	rjmp	.+20     	; 0x16802 <amigo_request_status+0x20>
   167ee:	8f ee       	ldi	r24, 0xEF	; 239
   167f0:	91 e3       	ldi	r25, 0x31	; 49
   167f2:	a0 e0       	ldi	r26, 0x00	; 0
   167f4:	ed b7       	in	r30, 0x3d	; 61
   167f6:	fe b7       	in	r31, 0x3e	; 62
   167f8:	81 83       	std	Z+1, r24	; 0x01
   167fa:	92 83       	std	Z+2, r25	; 0x02
   167fc:	a3 83       	std	Z+3, r26	; 0x03
   167fe:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   16802:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16806:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   1680a:	11 86       	std	Z+9, r1	; 0x09
   1680c:	81 81       	ldd	r24, Z+1	; 0x01
   1680e:	82 87       	std	Z+10, r24	; 0x0a
   16810:	8d e0       	ldi	r24, 0x0D	; 13
   16812:	83 87       	std	Z+11, r24	; 0x0b
   16814:	14 86       	std	Z+12, r1	; 0x0c
   16816:	0e 94 1c 70 	call	0xe038	; 0xe038 <mmc_wp_status>
   1681a:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   1681e:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16822:	89 2b       	or	r24, r25
   16824:	19 f0       	breq	.+6      	; 0x1682c <amigo_request_status+0x4a>
   16826:	84 85       	ldd	r24, Z+12	; 0x0c
   16828:	80 66       	ori	r24, 0x60	; 96
   1682a:	84 87       	std	Z+12, r24	; 0x0c
   1682c:	86 81       	ldd	r24, Z+6	; 0x06
   1682e:	82 30       	cpi	r24, 0x02	; 2
   16830:	31 f4       	brne	.+12     	; 0x1683e <amigo_request_status+0x5c>
   16832:	83 e1       	ldi	r24, 0x13	; 19
   16834:	81 87       	std	Z+9, r24	; 0x09
   16836:	84 85       	ldd	r24, Z+12	; 0x0c
   16838:	88 60       	ori	r24, 0x08	; 8
   1683a:	84 87       	std	Z+12, r24	; 0x0c
   1683c:	21 c0       	rjmp	.+66     	; 0x16880 <amigo_request_status+0x9e>
   1683e:	27 81       	ldd	r18, Z+7	; 0x07
   16840:	30 85       	ldd	r19, Z+8	; 0x08
   16842:	21 15       	cp	r18, r1
   16844:	31 05       	cpc	r19, r1
   16846:	11 f4       	brne	.+4      	; 0x1684c <amigo_request_status+0x6a>
   16848:	81 30       	cpi	r24, 0x01	; 1
   1684a:	d1 f4       	brne	.+52     	; 0x16880 <amigo_request_status+0x9e>
   1684c:	26 fd       	sbrc	r18, 6
   1684e:	0c c0       	rjmp	.+24     	; 0x16868 <amigo_request_status+0x86>
   16850:	25 ff       	sbrs	r18, 5
   16852:	03 c0       	rjmp	.+6      	; 0x1685a <amigo_request_status+0x78>
   16854:	8a e0       	ldi	r24, 0x0A	; 10
   16856:	81 87       	std	Z+9, r24	; 0x09
   16858:	0d c0       	rjmp	.+26     	; 0x16874 <amigo_request_status+0x92>
   1685a:	84 85       	ldd	r24, Z+12	; 0x0c
   1685c:	24 ff       	sbrs	r18, 4
   1685e:	02 c0       	rjmp	.+4      	; 0x16864 <amigo_request_status+0x82>
   16860:	83 60       	ori	r24, 0x03	; 3
   16862:	07 c0       	rjmp	.+14     	; 0x16872 <amigo_request_status+0x90>
   16864:	21 ff       	sbrs	r18, 1
   16866:	02 c0       	rjmp	.+4      	; 0x1686c <amigo_request_status+0x8a>
   16868:	83 e1       	ldi	r24, 0x13	; 19
   1686a:	f5 cf       	rjmp	.-22     	; 0x16856 <amigo_request_status+0x74>
   1686c:	22 ff       	sbrs	r18, 2
   1686e:	02 c0       	rjmp	.+4      	; 0x16874 <amigo_request_status+0x92>
   16870:	84 60       	ori	r24, 0x04	; 4
   16872:	84 87       	std	Z+12, r24	; 0x0c
   16874:	84 85       	ldd	r24, Z+12	; 0x0c
   16876:	80 61       	ori	r24, 0x10	; 16
   16878:	84 87       	std	Z+12, r24	; 0x0c
   1687a:	83 85       	ldd	r24, Z+11	; 0x0b
   1687c:	80 68       	ori	r24, 0x80	; 128
   1687e:	83 87       	std	Z+11, r24	; 0x0b
   16880:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16884:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16888:	81 81       	ldd	r24, Z+1	; 0x01
   1688a:	90 e0       	ldi	r25, 0x00	; 0
   1688c:	0e 94 6d 86 	call	0x10cda	; 0x10cda <gpib_enable_PPR>
   16890:	80 e0       	ldi	r24, 0x00	; 0
   16892:	90 e0       	ldi	r25, 0x00	; 0
   16894:	0f 90       	pop	r0
   16896:	0f 90       	pop	r0
   16898:	0f 90       	pop	r0
   1689a:	08 95       	ret

0001689c <amigo_send_logical_address>:
   1689c:	a5 e0       	ldi	r26, 0x05	; 5
   1689e:	b0 e0       	ldi	r27, 0x00	; 0
   168a0:	e4 e5       	ldi	r30, 0x54	; 84
   168a2:	f4 eb       	ldi	r31, 0xB4	; 180
   168a4:	0c 94 1d e7 	jmp	0x1ce3a	; 0x1ce3a <__prologue_saves__+0x20>
   168a8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   168ac:	85 ff       	sbrs	r24, 5
   168ae:	0a c0       	rjmp	.+20     	; 0x168c4 <amigo_send_logical_address+0x28>
   168b0:	81 ed       	ldi	r24, 0xD1	; 209
   168b2:	91 e3       	ldi	r25, 0x31	; 49
   168b4:	a0 e0       	ldi	r26, 0x00	; 0
   168b6:	ed b7       	in	r30, 0x3d	; 61
   168b8:	fe b7       	in	r31, 0x3e	; 62
   168ba:	81 83       	std	Z+1, r24	; 0x01
   168bc:	92 83       	std	Z+2, r25	; 0x02
   168be:	a3 83       	std	Z+3, r26	; 0x03
   168c0:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   168c4:	80 e0       	ldi	r24, 0x00	; 0
   168c6:	91 e0       	ldi	r25, 0x01	; 1
   168c8:	9d 83       	std	Y+5, r25	; 0x05
   168ca:	8c 83       	std	Y+4, r24	; 0x04
   168cc:	80 91 62 19 	lds	r24, 0x1962	; 0x801962 <AMIGOs>
   168d0:	90 91 63 19 	lds	r25, 0x1963	; 0x801963 <AMIGOs+0x1>
   168d4:	ae 01       	movw	r20, r28
   168d6:	4c 5f       	subi	r20, 0xFC	; 252
   168d8:	5f 4f       	sbci	r21, 0xFF	; 255
   168da:	64 e0       	ldi	r22, 0x04	; 4
   168dc:	70 e0       	ldi	r23, 0x00	; 0
   168de:	0d 96       	adiw	r24, 0x0d	; 13
   168e0:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <gpib_write_str>
   168e4:	2c 81       	ldd	r18, Y+4	; 0x04
   168e6:	3d 81       	ldd	r19, Y+5	; 0x05
   168e8:	22 27       	eor	r18, r18
   168ea:	30 7d       	andi	r19, 0xD0	; 208
   168ec:	23 2b       	or	r18, r19
   168ee:	11 f4       	brne	.+4      	; 0x168f4 <amigo_send_logical_address+0x58>
   168f0:	04 97       	sbiw	r24, 0x04	; 4
   168f2:	c9 f0       	breq	.+50     	; 0x16926 <amigo_send_logical_address+0x8a>
   168f4:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   168f8:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   168fc:	87 81       	ldd	r24, Z+7	; 0x07
   168fe:	90 85       	ldd	r25, Z+8	; 0x08
   16900:	80 62       	ori	r24, 0x20	; 32
   16902:	90 87       	std	Z+8, r25	; 0x08
   16904:	87 83       	std	Z+7, r24	; 0x07
   16906:	81 e0       	ldi	r24, 0x01	; 1
   16908:	86 83       	std	Z+6, r24	; 0x06
   1690a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1690e:	80 ff       	sbrs	r24, 0
   16910:	0a c0       	rjmp	.+20     	; 0x16926 <amigo_send_logical_address+0x8a>
   16912:	87 eb       	ldi	r24, 0xB7	; 183
   16914:	91 e3       	ldi	r25, 0x31	; 49
   16916:	a0 e0       	ldi	r26, 0x00	; 0
   16918:	ed b7       	in	r30, 0x3d	; 61
   1691a:	fe b7       	in	r31, 0x3e	; 62
   1691c:	81 83       	std	Z+1, r24	; 0x01
   1691e:	92 83       	std	Z+2, r25	; 0x02
   16920:	a3 83       	std	Z+3, r26	; 0x03
   16922:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   16926:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   1692a:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   1692e:	81 81       	ldd	r24, Z+1	; 0x01
   16930:	90 e0       	ldi	r25, 0x00	; 0
   16932:	0e 94 6d 86 	call	0x10cda	; 0x10cda <gpib_enable_PPR>
   16936:	8c 81       	ldd	r24, Y+4	; 0x04
   16938:	9d 81       	ldd	r25, Y+5	; 0x05
   1693a:	88 27       	eor	r24, r24
   1693c:	90 7d       	andi	r25, 0xD0	; 208
   1693e:	25 96       	adiw	r28, 0x05	; 5
   16940:	e2 e0       	ldi	r30, 0x02	; 2
   16942:	0c 94 39 e7 	jmp	0x1ce72	; 0x1ce72 <__epilogue_restores__+0x20>

00016946 <amigo_send_status>:
   16946:	a5 e0       	ldi	r26, 0x05	; 5
   16948:	b0 e0       	ldi	r27, 0x00	; 0
   1694a:	e9 ea       	ldi	r30, 0xA9	; 169
   1694c:	f4 eb       	ldi	r31, 0xB4	; 180
   1694e:	0c 94 1d e7 	jmp	0x1ce3a	; 0x1ce3a <__prologue_saves__+0x20>
   16952:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16956:	85 ff       	sbrs	r24, 5
   16958:	0a c0       	rjmp	.+20     	; 0x1696e <amigo_send_status+0x28>
   1695a:	82 ea       	ldi	r24, 0xA2	; 162
   1695c:	91 e3       	ldi	r25, 0x31	; 49
   1695e:	a0 e0       	ldi	r26, 0x00	; 0
   16960:	ed b7       	in	r30, 0x3d	; 61
   16962:	fe b7       	in	r31, 0x3e	; 62
   16964:	81 83       	std	Z+1, r24	; 0x01
   16966:	92 83       	std	Z+2, r25	; 0x02
   16968:	a3 83       	std	Z+3, r26	; 0x03
   1696a:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   1696e:	80 e0       	ldi	r24, 0x00	; 0
   16970:	91 e0       	ldi	r25, 0x01	; 1
   16972:	9d 83       	std	Y+5, r25	; 0x05
   16974:	8c 83       	std	Y+4, r24	; 0x04
   16976:	80 91 62 19 	lds	r24, 0x1962	; 0x801962 <AMIGOs>
   1697a:	90 91 63 19 	lds	r25, 0x1963	; 0x801963 <AMIGOs+0x1>
   1697e:	ae 01       	movw	r20, r28
   16980:	4c 5f       	subi	r20, 0xFC	; 252
   16982:	5f 4f       	sbci	r21, 0xFF	; 255
   16984:	64 e0       	ldi	r22, 0x04	; 4
   16986:	70 e0       	ldi	r23, 0x00	; 0
   16988:	09 96       	adiw	r24, 0x09	; 9
   1698a:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <gpib_write_str>
   1698e:	2c 81       	ldd	r18, Y+4	; 0x04
   16990:	3d 81       	ldd	r19, Y+5	; 0x05
   16992:	22 27       	eor	r18, r18
   16994:	30 7d       	andi	r19, 0xD0	; 208
   16996:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   1699a:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   1699e:	23 2b       	or	r18, r19
   169a0:	11 f4       	brne	.+4      	; 0x169a6 <amigo_send_status+0x60>
   169a2:	04 97       	sbiw	r24, 0x04	; 4
   169a4:	b1 f0       	breq	.+44     	; 0x169d2 <amigo_send_status+0x8c>
   169a6:	87 81       	ldd	r24, Z+7	; 0x07
   169a8:	90 85       	ldd	r25, Z+8	; 0x08
   169aa:	80 62       	ori	r24, 0x20	; 32
   169ac:	90 87       	std	Z+8, r25	; 0x08
   169ae:	87 83       	std	Z+7, r24	; 0x07
   169b0:	81 e0       	ldi	r24, 0x01	; 1
   169b2:	86 83       	std	Z+6, r24	; 0x06
   169b4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   169b8:	80 ff       	sbrs	r24, 0
   169ba:	0e c0       	rjmp	.+28     	; 0x169d8 <amigo_send_status+0x92>
   169bc:	88 e8       	ldi	r24, 0x88	; 136
   169be:	91 e3       	ldi	r25, 0x31	; 49
   169c0:	a0 e0       	ldi	r26, 0x00	; 0
   169c2:	ed b7       	in	r30, 0x3d	; 61
   169c4:	fe b7       	in	r31, 0x3e	; 62
   169c6:	81 83       	std	Z+1, r24	; 0x01
   169c8:	92 83       	std	Z+2, r25	; 0x02
   169ca:	a3 83       	std	Z+3, r26	; 0x03
   169cc:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   169d0:	03 c0       	rjmp	.+6      	; 0x169d8 <amigo_send_status+0x92>
   169d2:	10 86       	std	Z+8, r1	; 0x08
   169d4:	17 82       	std	Z+7, r1	; 0x07
   169d6:	16 82       	std	Z+6, r1	; 0x06
   169d8:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   169dc:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   169e0:	81 81       	ldd	r24, Z+1	; 0x01
   169e2:	90 e0       	ldi	r25, 0x00	; 0
   169e4:	0e 94 6d 86 	call	0x10cda	; 0x10cda <gpib_enable_PPR>
   169e8:	8c 81       	ldd	r24, Y+4	; 0x04
   169ea:	9d 81       	ldd	r25, Y+5	; 0x05
   169ec:	88 27       	eor	r24, r24
   169ee:	90 7d       	andi	r25, 0xD0	; 208
   169f0:	25 96       	adiw	r28, 0x05	; 5
   169f2:	e2 e0       	ldi	r30, 0x02	; 2
   169f4:	0c 94 39 e7 	jmp	0x1ce72	; 0x1ce72 <__epilogue_restores__+0x20>

000169f8 <amigo_increment>:
   169f8:	a1 e1       	ldi	r26, 0x11	; 17
   169fa:	b0 e0       	ldi	r27, 0x00	; 0
   169fc:	e2 e0       	ldi	r30, 0x02	; 2
   169fe:	f5 eb       	ldi	r31, 0xB5	; 181
   16a00:	0c 94 1d e7 	jmp	0x1ce3a	; 0x1ce3a <__prologue_saves__+0x20>
   16a04:	bc 01       	movw	r22, r24
   16a06:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16a0a:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16a0e:	91 e1       	ldi	r25, 0x11	; 17
   16a10:	de 01       	movw	r26, r28
   16a12:	11 96       	adiw	r26, 0x01	; 1
   16a14:	01 90       	ld	r0, Z+
   16a16:	0d 92       	st	X+, r0
   16a18:	9a 95       	dec	r25
   16a1a:	e1 f7       	brne	.-8      	; 0x16a14 <amigo_increment+0x1c>
   16a1c:	9e 81       	ldd	r25, Y+6	; 0x06
   16a1e:	9f 5f       	subi	r25, 0xFF	; 255
   16a20:	9e 83       	std	Y+6, r25	; 0x06
   16a22:	ce 01       	movw	r24, r28
   16a24:	01 96       	adiw	r24, 0x01	; 1
   16a26:	c7 dd       	rcall	.-1138   	; 0x165b6 <amigo_overflow_check>
   16a28:	00 97       	sbiw	r24, 0x00	; 0
   16a2a:	59 f4       	brne	.+22     	; 0x16a42 <amigo_increment+0x4a>
   16a2c:	a0 91 62 19 	lds	r26, 0x1962	; 0x801962 <AMIGOs>
   16a30:	b0 91 63 19 	lds	r27, 0x1963	; 0x801963 <AMIGOs+0x1>
   16a34:	21 e1       	ldi	r18, 0x11	; 17
   16a36:	fe 01       	movw	r30, r28
   16a38:	31 96       	adiw	r30, 0x01	; 1
   16a3a:	01 90       	ld	r0, Z+
   16a3c:	0d 92       	st	X+, r0
   16a3e:	2a 95       	dec	r18
   16a40:	e1 f7       	brne	.-8      	; 0x16a3a <amigo_increment+0x42>
   16a42:	61 96       	adiw	r28, 0x11	; 17
   16a44:	e2 e0       	ldi	r30, 0x02	; 2
   16a46:	0c 94 39 e7 	jmp	0x1ce72	; 0x1ce72 <__epilogue_restores__+0x20>

00016a4a <amigo_seek>:
   16a4a:	0f 93       	push	r16
   16a4c:	1f 93       	push	r17
   16a4e:	cf 93       	push	r28
   16a50:	df 93       	push	r29
   16a52:	ec 01       	movw	r28, r24
   16a54:	66 e8       	ldi	r22, 0x86	; 134
   16a56:	75 e1       	ldi	r23, 0x15	; 21
   16a58:	ae dd       	rcall	.-1188   	; 0x165b6 <amigo_overflow_check>
   16a5a:	8c 01       	movw	r16, r24
   16a5c:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16a60:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16a64:	89 2b       	or	r24, r25
   16a66:	41 f0       	breq	.+16     	; 0x16a78 <amigo_seek+0x2e>
   16a68:	81 e0       	ldi	r24, 0x01	; 1
   16a6a:	86 83       	std	Z+6, r24	; 0x06
   16a6c:	87 81       	ldd	r24, Z+7	; 0x07
   16a6e:	90 85       	ldd	r25, Z+8	; 0x08
   16a70:	84 60       	ori	r24, 0x04	; 4
   16a72:	90 87       	std	Z+8, r25	; 0x08
   16a74:	87 83       	std	Z+7, r24	; 0x07
   16a76:	06 c0       	rjmp	.+12     	; 0x16a84 <amigo_seek+0x3a>
   16a78:	8d 81       	ldd	r24, Y+5	; 0x05
   16a7a:	85 83       	std	Z+5, r24	; 0x05
   16a7c:	8c 81       	ldd	r24, Y+4	; 0x04
   16a7e:	84 83       	std	Z+4, r24	; 0x04
   16a80:	8b 81       	ldd	r24, Y+3	; 0x03
   16a82:	83 83       	std	Z+3, r24	; 0x03
   16a84:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16a88:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16a8c:	81 81       	ldd	r24, Z+1	; 0x01
   16a8e:	90 e0       	ldi	r25, 0x00	; 0
   16a90:	0e 94 6d 86 	call	0x10cda	; 0x10cda <gpib_enable_PPR>
   16a94:	c8 01       	movw	r24, r16
   16a96:	df 91       	pop	r29
   16a98:	cf 91       	pop	r28
   16a9a:	1f 91       	pop	r17
   16a9c:	0f 91       	pop	r16
   16a9e:	08 95       	ret

00016aa0 <amigo_verify>:
   16aa0:	8f 92       	push	r8
   16aa2:	9f 92       	push	r9
   16aa4:	af 92       	push	r10
   16aa6:	bf 92       	push	r11
   16aa8:	ef 92       	push	r14
   16aaa:	ff 92       	push	r15
   16aac:	0f 93       	push	r16
   16aae:	1f 93       	push	r17
   16ab0:	cf 93       	push	r28
   16ab2:	df 93       	push	r29
   16ab4:	ad b7       	in	r26, 0x3d	; 61
   16ab6:	be b7       	in	r27, 0x3e	; 62
   16ab8:	19 97       	sbiw	r26, 0x09	; 9
   16aba:	0f b6       	in	r0, 0x3f	; 63
   16abc:	f8 94       	cli
   16abe:	be bf       	out	0x3e, r27	; 62
   16ac0:	0f be       	out	0x3f, r0	; 63
   16ac2:	ad bf       	out	0x3d, r26	; 61
   16ac4:	7c 01       	movw	r14, r24
   16ac6:	6b e8       	ldi	r22, 0x8B	; 139
   16ac8:	75 e1       	ldi	r23, 0x15	; 21
   16aca:	80 91 62 19 	lds	r24, 0x1962	; 0x801962 <AMIGOs>
   16ace:	90 91 63 19 	lds	r25, 0x1963	; 0x801963 <AMIGOs+0x1>
   16ad2:	c7 dd       	rcall	.-1138   	; 0x16662 <amigo_chs_to_logical>
   16ad4:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   16ad8:	25 ff       	sbrs	r18, 5
   16ada:	10 c0       	rjmp	.+32     	; 0x16afc <amigo_verify+0x5c>
   16adc:	ed b7       	in	r30, 0x3d	; 61
   16ade:	fe b7       	in	r31, 0x3e	; 62
   16ae0:	e0 86       	std	Z+8, r14	; 0x08
   16ae2:	f1 86       	std	Z+9, r15	; 0x09
   16ae4:	64 83       	std	Z+4, r22	; 0x04
   16ae6:	75 83       	std	Z+5, r23	; 0x05
   16ae8:	86 83       	std	Z+6, r24	; 0x06
   16aea:	97 83       	std	Z+7, r25	; 0x07
   16aec:	87 e4       	ldi	r24, 0x47	; 71
   16aee:	91 e3       	ldi	r25, 0x31	; 49
   16af0:	a0 e0       	ldi	r26, 0x00	; 0
   16af2:	81 83       	std	Z+1, r24	; 0x01
   16af4:	92 83       	std	Z+2, r25	; 0x02
   16af6:	a3 83       	std	Z+3, r26	; 0x03
   16af8:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   16afc:	e7 01       	movw	r28, r14
   16afe:	20 97       	sbiw	r28, 0x00	; 0
   16b00:	09 f4       	brne	.+2      	; 0x16b04 <amigo_verify+0x64>
   16b02:	4b c0       	rjmp	.+150    	; 0x16b9a <amigo_verify+0xfa>
   16b04:	68 e9       	ldi	r22, 0x98	; 152
   16b06:	75 e1       	ldi	r23, 0x15	; 21
   16b08:	80 91 62 19 	lds	r24, 0x1962	; 0x801962 <AMIGOs>
   16b0c:	90 91 63 19 	lds	r25, 0x1963	; 0x801963 <AMIGOs+0x1>
   16b10:	a8 dd       	rcall	.-1200   	; 0x16662 <amigo_chs_to_logical>
   16b12:	4b 01       	movw	r8, r22
   16b14:	5c 01       	movw	r10, r24
   16b16:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16b1a:	86 fd       	sbrc	r24, 6
   16b1c:	0e 94 93 85 	call	0x10b26	; 0x10b26 <gpib_timer_elapsed_begin>
   16b20:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16b24:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16b28:	e0 90 62 19 	lds	r14, 0x1962	; 0x801962 <AMIGOs>
   16b2c:	f0 90 63 19 	lds	r15, 0x1963	; 0x801963 <AMIGOs+0x1>
   16b30:	87 e0       	ldi	r24, 0x07	; 7
   16b32:	e8 0e       	add	r14, r24
   16b34:	f1 1c       	adc	r15, r1
   16b36:	00 85       	ldd	r16, Z+8	; 0x08
   16b38:	11 85       	ldd	r17, Z+9	; 0x09
   16b3a:	2a ee       	ldi	r18, 0xEA	; 234
   16b3c:	3c e1       	ldi	r19, 0x1C	; 28
   16b3e:	b5 01       	movw	r22, r10
   16b40:	a4 01       	movw	r20, r8
   16b42:	82 81       	ldd	r24, Z+2	; 0x02
   16b44:	93 81       	ldd	r25, Z+3	; 0x03
   16b46:	0e 94 e5 84 	call	0x109ca	; 0x109ca <dbf_open_read>
   16b4a:	7c 01       	movw	r14, r24
   16b4c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16b50:	86 ff       	sbrs	r24, 6
   16b52:	04 c0       	rjmp	.+8      	; 0x16b5c <amigo_verify+0xbc>
   16b54:	8f e9       	ldi	r24, 0x9F	; 159
   16b56:	90 e1       	ldi	r25, 0x10	; 16
   16b58:	0e 94 a5 85 	call	0x10b4a	; 0x10b4a <gpib_timer_elapsed_end>
   16b5c:	20 91 62 19 	lds	r18, 0x1962	; 0x801962 <AMIGOs>
   16b60:	30 91 63 19 	lds	r19, 0x1963	; 0x801963 <AMIGOs+0x1>
   16b64:	f9 01       	movw	r30, r18
   16b66:	87 81       	ldd	r24, Z+7	; 0x07
   16b68:	90 85       	ldd	r25, Z+8	; 0x08
   16b6a:	89 2b       	or	r24, r25
   16b6c:	21 f0       	breq	.+8      	; 0x16b76 <amigo_verify+0xd6>
   16b6e:	81 e0       	ldi	r24, 0x01	; 1
   16b70:	f9 01       	movw	r30, r18
   16b72:	86 83       	std	Z+6, r24	; 0x06
   16b74:	15 c0       	rjmp	.+42     	; 0x16ba0 <amigo_verify+0x100>
   16b76:	80 91 64 19 	lds	r24, 0x1964	; 0x801964 <AMIGOp>
   16b7a:	90 91 65 19 	lds	r25, 0x1965	; 0x801965 <AMIGOp+0x1>
   16b7e:	fc 01       	movw	r30, r24
   16b80:	80 85       	ldd	r24, Z+8	; 0x08
   16b82:	91 85       	ldd	r25, Z+9	; 0x09
   16b84:	e8 16       	cp	r14, r24
   16b86:	f9 06       	cpc	r15, r25
   16b88:	91 f7       	brne	.-28     	; 0x16b6e <amigo_verify+0xce>
   16b8a:	80 ea       	ldi	r24, 0xA0	; 160
   16b8c:	95 e1       	ldi	r25, 0x15	; 21
   16b8e:	34 df       	rcall	.-408    	; 0x169f8 <amigo_increment>
   16b90:	21 97       	sbiw	r28, 0x01	; 1
   16b92:	89 2b       	or	r24, r25
   16b94:	09 f4       	brne	.+2      	; 0x16b98 <amigo_verify+0xf8>
   16b96:	b3 cf       	rjmp	.-154    	; 0x16afe <amigo_verify+0x5e>
   16b98:	03 c0       	rjmp	.+6      	; 0x16ba0 <amigo_verify+0x100>
   16b9a:	c0 e0       	ldi	r28, 0x00	; 0
   16b9c:	d0 e0       	ldi	r29, 0x00	; 0
   16b9e:	02 c0       	rjmp	.+4      	; 0x16ba4 <amigo_verify+0x104>
   16ba0:	c1 e0       	ldi	r28, 0x01	; 1
   16ba2:	d0 e0       	ldi	r29, 0x00	; 0
   16ba4:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16ba8:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16bac:	81 81       	ldd	r24, Z+1	; 0x01
   16bae:	90 e0       	ldi	r25, 0x00	; 0
   16bb0:	0e 94 6d 86 	call	0x10cda	; 0x10cda <gpib_enable_PPR>
   16bb4:	ce 01       	movw	r24, r28
   16bb6:	ad b7       	in	r26, 0x3d	; 61
   16bb8:	be b7       	in	r27, 0x3e	; 62
   16bba:	19 96       	adiw	r26, 0x09	; 9
   16bbc:	0f b6       	in	r0, 0x3f	; 63
   16bbe:	f8 94       	cli
   16bc0:	be bf       	out	0x3e, r27	; 62
   16bc2:	0f be       	out	0x3f, r0	; 63
   16bc4:	ad bf       	out	0x3d, r26	; 61
   16bc6:	df 91       	pop	r29
   16bc8:	cf 91       	pop	r28
   16bca:	1f 91       	pop	r17
   16bcc:	0f 91       	pop	r16
   16bce:	ff 90       	pop	r15
   16bd0:	ef 90       	pop	r14
   16bd2:	bf 90       	pop	r11
   16bd4:	af 90       	pop	r10
   16bd6:	9f 90       	pop	r9
   16bd8:	8f 90       	pop	r8
   16bda:	08 95       	ret

00016bdc <amigo_format>:
   16bdc:	ef 92       	push	r14
   16bde:	ff 92       	push	r15
   16be0:	0f 93       	push	r16
   16be2:	1f 93       	push	r17
   16be4:	cf 93       	push	r28
   16be6:	df 93       	push	r29
   16be8:	00 d0       	rcall	.+0      	; 0x16bea <amigo_format+0xe>
   16bea:	1f 92       	push	r1
   16bec:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16bf0:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16bf4:	15 82       	std	Z+5, r1	; 0x05
   16bf6:	14 82       	std	Z+4, r1	; 0x04
   16bf8:	13 82       	std	Z+3, r1	; 0x03
   16bfa:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16bfe:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16c02:	40 85       	ldd	r20, Z+8	; 0x08
   16c04:	51 85       	ldd	r21, Z+9	; 0x09
   16c06:	68 2f       	mov	r22, r24
   16c08:	70 e0       	ldi	r23, 0x00	; 0
   16c0a:	8a ee       	ldi	r24, 0xEA	; 234
   16c0c:	9c e1       	ldi	r25, 0x1C	; 28
   16c0e:	0e 94 05 eb 	call	0x1d60a	; 0x1d60a <memset>
   16c12:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16c16:	85 ff       	sbrs	r24, 5
   16c18:	0a c0       	rjmp	.+20     	; 0x16c2e <amigo_format+0x52>
   16c1a:	8c e0       	ldi	r24, 0x0C	; 12
   16c1c:	91 e3       	ldi	r25, 0x31	; 49
   16c1e:	a0 e0       	ldi	r26, 0x00	; 0
   16c20:	ed b7       	in	r30, 0x3d	; 61
   16c22:	fe b7       	in	r31, 0x3e	; 62
   16c24:	81 83       	std	Z+1, r24	; 0x01
   16c26:	92 83       	std	Z+2, r25	; 0x02
   16c28:	a3 83       	std	Z+3, r26	; 0x03
   16c2a:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   16c2e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16c32:	86 fd       	sbrc	r24, 6
   16c34:	0e 94 93 85 	call	0x10b26	; 0x10b26 <gpib_timer_elapsed_begin>
   16c38:	67 ea       	ldi	r22, 0xA7	; 167
   16c3a:	75 e1       	ldi	r23, 0x15	; 21
   16c3c:	80 91 62 19 	lds	r24, 0x1962	; 0x801962 <AMIGOs>
   16c40:	90 91 63 19 	lds	r25, 0x1963	; 0x801963 <AMIGOs+0x1>
   16c44:	0e dd       	rcall	.-1508   	; 0x16662 <amigo_chs_to_logical>
   16c46:	ab 01       	movw	r20, r22
   16c48:	bc 01       	movw	r22, r24
   16c4a:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16c4e:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16c52:	e0 90 62 19 	lds	r14, 0x1962	; 0x801962 <AMIGOs>
   16c56:	f0 90 63 19 	lds	r15, 0x1963	; 0x801963 <AMIGOs+0x1>
   16c5a:	87 e0       	ldi	r24, 0x07	; 7
   16c5c:	e8 0e       	add	r14, r24
   16c5e:	f1 1c       	adc	r15, r1
   16c60:	00 85       	ldd	r16, Z+8	; 0x08
   16c62:	11 85       	ldd	r17, Z+9	; 0x09
   16c64:	2a ee       	ldi	r18, 0xEA	; 234
   16c66:	3c e1       	ldi	r19, 0x1C	; 28
   16c68:	82 81       	ldd	r24, Z+2	; 0x02
   16c6a:	93 81       	ldd	r25, Z+3	; 0x03
   16c6c:	0e 94 3c 85 	call	0x10a78	; 0x10a78 <dbf_open_write>
   16c70:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16c74:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16c78:	27 81       	ldd	r18, Z+7	; 0x07
   16c7a:	30 85       	ldd	r19, Z+8	; 0x08
   16c7c:	21 15       	cp	r18, r1
   16c7e:	31 05       	cpc	r19, r1
   16c80:	49 f4       	brne	.+18     	; 0x16c94 <amigo_format+0xb8>
   16c82:	c0 91 64 19 	lds	r28, 0x1964	; 0x801964 <AMIGOp>
   16c86:	d0 91 65 19 	lds	r29, 0x1965	; 0x801965 <AMIGOp+0x1>
   16c8a:	48 85       	ldd	r20, Y+8	; 0x08
   16c8c:	59 85       	ldd	r21, Y+9	; 0x09
   16c8e:	84 17       	cp	r24, r20
   16c90:	95 07       	cpc	r25, r21
   16c92:	41 f0       	breq	.+16     	; 0x16ca4 <amigo_format+0xc8>
   16c94:	22 60       	ori	r18, 0x02	; 2
   16c96:	30 87       	std	Z+8, r19	; 0x08
   16c98:	27 83       	std	Z+7, r18	; 0x07
   16c9a:	81 e0       	ldi	r24, 0x01	; 1
   16c9c:	86 83       	std	Z+6, r24	; 0x06
   16c9e:	c1 e0       	ldi	r28, 0x01	; 1
   16ca0:	d0 e0       	ldi	r29, 0x00	; 0
   16ca2:	0f c0       	rjmp	.+30     	; 0x16cc2 <amigo_format+0xe6>
   16ca4:	80 e0       	ldi	r24, 0x00	; 0
   16ca6:	90 e0       	ldi	r25, 0x00	; 0
   16ca8:	a7 de       	rcall	.-690    	; 0x169f8 <amigo_increment>
   16caa:	89 2b       	or	r24, r25
   16cac:	29 f2       	breq	.-118    	; 0x16c38 <amigo_format+0x5c>
   16cae:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16cb2:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16cb6:	15 82       	std	Z+5, r1	; 0x05
   16cb8:	14 82       	std	Z+4, r1	; 0x04
   16cba:	13 82       	std	Z+3, r1	; 0x03
   16cbc:	16 82       	std	Z+6, r1	; 0x06
   16cbe:	c0 e0       	ldi	r28, 0x00	; 0
   16cc0:	d0 e0       	ldi	r29, 0x00	; 0
   16cc2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16cc6:	86 ff       	sbrs	r24, 6
   16cc8:	04 c0       	rjmp	.+8      	; 0x16cd2 <amigo_format+0xf6>
   16cca:	87 ea       	ldi	r24, 0xA7	; 167
   16ccc:	95 e1       	ldi	r25, 0x15	; 21
   16cce:	0e 94 a5 85 	call	0x10b4a	; 0x10b4a <gpib_timer_elapsed_end>
   16cd2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16cd6:	85 ff       	sbrs	r24, 5
   16cd8:	0a c0       	rjmp	.+20     	; 0x16cee <amigo_format+0x112>
   16cda:	87 ef       	ldi	r24, 0xF7	; 247
   16cdc:	90 e3       	ldi	r25, 0x30	; 48
   16cde:	a0 e0       	ldi	r26, 0x00	; 0
   16ce0:	ed b7       	in	r30, 0x3d	; 61
   16ce2:	fe b7       	in	r31, 0x3e	; 62
   16ce4:	81 83       	std	Z+1, r24	; 0x01
   16ce6:	92 83       	std	Z+2, r25	; 0x02
   16ce8:	a3 83       	std	Z+3, r26	; 0x03
   16cea:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   16cee:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16cf2:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16cf6:	81 81       	ldd	r24, Z+1	; 0x01
   16cf8:	90 e0       	ldi	r25, 0x00	; 0
   16cfa:	0e 94 6d 86 	call	0x10cda	; 0x10cda <gpib_enable_PPR>
   16cfe:	ce 01       	movw	r24, r28
   16d00:	cd b7       	in	r28, 0x3d	; 61
   16d02:	de b7       	in	r29, 0x3e	; 62
   16d04:	23 96       	adiw	r28, 0x03	; 3
   16d06:	e6 e0       	ldi	r30, 0x06	; 6
   16d08:	0c 94 35 e7 	jmp	0x1ce6a	; 0x1ce6a <__epilogue_restores__+0x18>

00016d0c <amigo_buffered_read_command>:
   16d0c:	8f 92       	push	r8
   16d0e:	9f 92       	push	r9
   16d10:	af 92       	push	r10
   16d12:	bf 92       	push	r11
   16d14:	ef 92       	push	r14
   16d16:	ff 92       	push	r15
   16d18:	0f 93       	push	r16
   16d1a:	1f 93       	push	r17
   16d1c:	cf 93       	push	r28
   16d1e:	df 93       	push	r29
   16d20:	00 d0       	rcall	.+0      	; 0x16d22 <amigo_buffered_read_command+0x16>
   16d22:	00 d0       	rcall	.+0      	; 0x16d24 <amigo_buffered_read_command+0x18>
   16d24:	1f 92       	push	r1
   16d26:	6e ea       	ldi	r22, 0xAE	; 174
   16d28:	75 e1       	ldi	r23, 0x15	; 21
   16d2a:	80 91 62 19 	lds	r24, 0x1962	; 0x801962 <AMIGOs>
   16d2e:	90 91 63 19 	lds	r25, 0x1963	; 0x801963 <AMIGOs+0x1>
   16d32:	97 dc       	rcall	.-1746   	; 0x16662 <amigo_chs_to_logical>
   16d34:	4b 01       	movw	r8, r22
   16d36:	5c 01       	movw	r10, r24
   16d38:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16d3c:	85 ff       	sbrs	r24, 5
   16d3e:	12 c0       	rjmp	.+36     	; 0x16d64 <amigo_buffered_read_command+0x58>
   16d40:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16d44:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16d48:	80 81       	ld	r24, Z
   16d4a:	90 e0       	ldi	r25, 0x00	; 0
   16d4c:	ed b7       	in	r30, 0x3d	; 61
   16d4e:	fe b7       	in	r31, 0x3e	; 62
   16d50:	95 83       	std	Z+5, r25	; 0x05
   16d52:	84 83       	std	Z+4, r24	; 0x04
   16d54:	85 ee       	ldi	r24, 0xE5	; 229
   16d56:	90 e3       	ldi	r25, 0x30	; 48
   16d58:	a0 e0       	ldi	r26, 0x00	; 0
   16d5a:	81 83       	std	Z+1, r24	; 0x01
   16d5c:	92 83       	std	Z+2, r25	; 0x02
   16d5e:	a3 83       	std	Z+3, r26	; 0x03
   16d60:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   16d64:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16d68:	86 fd       	sbrc	r24, 6
   16d6a:	0e 94 93 85 	call	0x10b26	; 0x10b26 <gpib_timer_elapsed_begin>
   16d6e:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16d72:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16d76:	e0 90 62 19 	lds	r14, 0x1962	; 0x801962 <AMIGOs>
   16d7a:	f0 90 63 19 	lds	r15, 0x1963	; 0x801963 <AMIGOs+0x1>
   16d7e:	87 e0       	ldi	r24, 0x07	; 7
   16d80:	e8 0e       	add	r14, r24
   16d82:	f1 1c       	adc	r15, r1
   16d84:	00 85       	ldd	r16, Z+8	; 0x08
   16d86:	11 85       	ldd	r17, Z+9	; 0x09
   16d88:	2a ee       	ldi	r18, 0xEA	; 234
   16d8a:	3c e1       	ldi	r19, 0x1C	; 28
   16d8c:	b5 01       	movw	r22, r10
   16d8e:	a4 01       	movw	r20, r8
   16d90:	82 81       	ldd	r24, Z+2	; 0x02
   16d92:	93 81       	ldd	r25, Z+3	; 0x03
   16d94:	0e 94 e5 84 	call	0x109ca	; 0x109ca <dbf_open_read>
   16d98:	7c 01       	movw	r14, r24
   16d9a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16d9e:	86 ff       	sbrs	r24, 6
   16da0:	04 c0       	rjmp	.+8      	; 0x16daa <amigo_buffered_read_command+0x9e>
   16da2:	8f e9       	ldi	r24, 0x9F	; 159
   16da4:	90 e1       	ldi	r25, 0x10	; 16
   16da6:	0e 94 a5 85 	call	0x10b4a	; 0x10b4a <gpib_timer_elapsed_end>
   16daa:	c0 91 62 19 	lds	r28, 0x1962	; 0x801962 <AMIGOs>
   16dae:	d0 91 63 19 	lds	r29, 0x1963	; 0x801963 <AMIGOs+0x1>
   16db2:	8f 81       	ldd	r24, Y+7	; 0x07
   16db4:	98 85       	ldd	r25, Y+8	; 0x08
   16db6:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16dba:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16dbe:	89 2b       	or	r24, r25
   16dc0:	29 f4       	brne	.+10     	; 0x16dcc <amigo_buffered_read_command+0xc0>
   16dc2:	80 85       	ldd	r24, Z+8	; 0x08
   16dc4:	91 85       	ldd	r25, Z+9	; 0x09
   16dc6:	e8 16       	cp	r14, r24
   16dc8:	f9 06       	cpc	r15, r25
   16dca:	19 f0       	breq	.+6      	; 0x16dd2 <amigo_buffered_read_command+0xc6>
   16dcc:	81 e0       	ldi	r24, 0x01	; 1
   16dce:	8e 83       	std	Y+6, r24	; 0x06
   16dd0:	14 c0       	rjmp	.+40     	; 0x16dfa <amigo_buffered_read_command+0xee>
   16dd2:	8e ea       	ldi	r24, 0xAE	; 174
   16dd4:	95 e1       	ldi	r25, 0x15	; 21
   16dd6:	10 de       	rcall	.-992    	; 0x169f8 <amigo_increment>
   16dd8:	89 2b       	or	r24, r25
   16dda:	59 f0       	breq	.+22     	; 0x16df2 <amigo_buffered_read_command+0xe6>
   16ddc:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16de0:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16de4:	81 e0       	ldi	r24, 0x01	; 1
   16de6:	86 83       	std	Z+6, r24	; 0x06
   16de8:	87 81       	ldd	r24, Z+7	; 0x07
   16dea:	90 85       	ldd	r25, Z+8	; 0x08
   16dec:	84 60       	ori	r24, 0x04	; 4
   16dee:	90 87       	std	Z+8, r25	; 0x08
   16df0:	87 83       	std	Z+7, r24	; 0x07
   16df2:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16df6:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16dfa:	81 81       	ldd	r24, Z+1	; 0x01
   16dfc:	90 e0       	ldi	r25, 0x00	; 0
   16dfe:	0e 94 6d 86 	call	0x10cda	; 0x10cda <gpib_enable_PPR>
   16e02:	80 e0       	ldi	r24, 0x00	; 0
   16e04:	90 e0       	ldi	r25, 0x00	; 0
   16e06:	0f 90       	pop	r0
   16e08:	0f 90       	pop	r0
   16e0a:	0f 90       	pop	r0
   16e0c:	0f 90       	pop	r0
   16e0e:	0f 90       	pop	r0
   16e10:	df 91       	pop	r29
   16e12:	cf 91       	pop	r28
   16e14:	1f 91       	pop	r17
   16e16:	0f 91       	pop	r16
   16e18:	ff 90       	pop	r15
   16e1a:	ef 90       	pop	r14
   16e1c:	bf 90       	pop	r11
   16e1e:	af 90       	pop	r10
   16e20:	9f 90       	pop	r9
   16e22:	8f 90       	pop	r8
   16e24:	08 95       	ret

00016e26 <amigo_buffered_read_execute>:
   16e26:	a5 e0       	ldi	r26, 0x05	; 5
   16e28:	b0 e0       	ldi	r27, 0x00	; 0
   16e2a:	e9 e1       	ldi	r30, 0x19	; 25
   16e2c:	f7 eb       	ldi	r31, 0xB7	; 183
   16e2e:	0c 94 1b e7 	jmp	0x1ce36	; 0x1ce36 <__prologue_saves__+0x1c>
   16e32:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16e36:	87 fd       	sbrc	r24, 7
   16e38:	0e 94 93 85 	call	0x10b26	; 0x10b26 <gpib_timer_elapsed_begin>
   16e3c:	80 e0       	ldi	r24, 0x00	; 0
   16e3e:	91 e0       	ldi	r25, 0x01	; 1
   16e40:	9d 83       	std	Y+5, r25	; 0x05
   16e42:	8c 83       	std	Y+4, r24	; 0x04
   16e44:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16e48:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16e4c:	60 85       	ldd	r22, Z+8	; 0x08
   16e4e:	71 85       	ldd	r23, Z+9	; 0x09
   16e50:	ae 01       	movw	r20, r28
   16e52:	4c 5f       	subi	r20, 0xFC	; 252
   16e54:	5f 4f       	sbci	r21, 0xFF	; 255
   16e56:	8a ee       	ldi	r24, 0xEA	; 234
   16e58:	9c e1       	ldi	r25, 0x1C	; 28
   16e5a:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <gpib_write_str>
   16e5e:	8c 01       	movw	r16, r24
   16e60:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16e64:	87 ff       	sbrs	r24, 7
   16e66:	04 c0       	rjmp	.+8      	; 0x16e70 <amigo_buffered_read_execute+0x4a>
   16e68:	8a ea       	ldi	r24, 0xAA	; 170
   16e6a:	90 e1       	ldi	r25, 0x10	; 16
   16e6c:	0e 94 a5 85 	call	0x10b4a	; 0x10b4a <gpib_timer_elapsed_end>
   16e70:	8c 81       	ldd	r24, Y+4	; 0x04
   16e72:	9d 81       	ldd	r25, Y+5	; 0x05
   16e74:	88 27       	eor	r24, r24
   16e76:	90 7d       	andi	r25, 0xD0	; 208
   16e78:	89 2b       	or	r24, r25
   16e7a:	49 f4       	brne	.+18     	; 0x16e8e <amigo_buffered_read_execute+0x68>
   16e7c:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16e80:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16e84:	80 85       	ldd	r24, Z+8	; 0x08
   16e86:	91 85       	ldd	r25, Z+9	; 0x09
   16e88:	08 17       	cp	r16, r24
   16e8a:	19 07       	cpc	r17, r25
   16e8c:	c9 f0       	breq	.+50     	; 0x16ec0 <amigo_buffered_read_execute+0x9a>
   16e8e:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16e92:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16e96:	81 e0       	ldi	r24, 0x01	; 1
   16e98:	86 83       	std	Z+6, r24	; 0x06
   16e9a:	87 81       	ldd	r24, Z+7	; 0x07
   16e9c:	90 85       	ldd	r25, Z+8	; 0x08
   16e9e:	80 62       	ori	r24, 0x20	; 32
   16ea0:	90 87       	std	Z+8, r25	; 0x08
   16ea2:	87 83       	std	Z+7, r24	; 0x07
   16ea4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16ea8:	80 ff       	sbrs	r24, 0
   16eaa:	0a c0       	rjmp	.+20     	; 0x16ec0 <amigo_buffered_read_execute+0x9a>
   16eac:	8b ec       	ldi	r24, 0xCB	; 203
   16eae:	90 e3       	ldi	r25, 0x30	; 48
   16eb0:	a0 e0       	ldi	r26, 0x00	; 0
   16eb2:	ed b7       	in	r30, 0x3d	; 61
   16eb4:	fe b7       	in	r31, 0x3e	; 62
   16eb6:	81 83       	std	Z+1, r24	; 0x01
   16eb8:	92 83       	std	Z+2, r25	; 0x02
   16eba:	a3 83       	std	Z+3, r26	; 0x03
   16ebc:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   16ec0:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16ec4:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16ec8:	81 81       	ldd	r24, Z+1	; 0x01
   16eca:	90 e0       	ldi	r25, 0x00	; 0
   16ecc:	0e 94 6d 86 	call	0x10cda	; 0x10cda <gpib_enable_PPR>
   16ed0:	8c 81       	ldd	r24, Y+4	; 0x04
   16ed2:	9d 81       	ldd	r25, Y+5	; 0x05
   16ed4:	25 96       	adiw	r28, 0x05	; 5
   16ed6:	e4 e0       	ldi	r30, 0x04	; 4
   16ed8:	0c 94 37 e7 	jmp	0x1ce6e	; 0x1ce6e <__epilogue_restores__+0x1c>

00016edc <amigo_buffered_write>:
   16edc:	8f 92       	push	r8
   16ede:	9f 92       	push	r9
   16ee0:	af 92       	push	r10
   16ee2:	bf 92       	push	r11
   16ee4:	ef 92       	push	r14
   16ee6:	ff 92       	push	r15
   16ee8:	0f 93       	push	r16
   16eea:	1f 93       	push	r17
   16eec:	cf 93       	push	r28
   16eee:	df 93       	push	r29
   16ef0:	cd b7       	in	r28, 0x3d	; 61
   16ef2:	de b7       	in	r29, 0x3e	; 62
   16ef4:	27 97       	sbiw	r28, 0x07	; 7
   16ef6:	0f b6       	in	r0, 0x3f	; 63
   16ef8:	f8 94       	cli
   16efa:	de bf       	out	0x3e, r29	; 62
   16efc:	0f be       	out	0x3f, r0	; 63
   16efe:	cd bf       	out	0x3d, r28	; 61
   16f00:	6c eb       	ldi	r22, 0xBC	; 188
   16f02:	75 e1       	ldi	r23, 0x15	; 21
   16f04:	80 91 62 19 	lds	r24, 0x1962	; 0x801962 <AMIGOs>
   16f08:	90 91 63 19 	lds	r25, 0x1963	; 0x801963 <AMIGOs+0x1>
   16f0c:	aa db       	rcall	.-2220   	; 0x16662 <amigo_chs_to_logical>
   16f0e:	4b 01       	movw	r8, r22
   16f10:	5c 01       	movw	r10, r24
   16f12:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16f16:	87 fd       	sbrc	r24, 7
   16f18:	0e 94 93 85 	call	0x10b26	; 0x10b26 <gpib_timer_elapsed_begin>
   16f1c:	1f 82       	std	Y+7, r1	; 0x07
   16f1e:	1e 82       	std	Y+6, r1	; 0x06
   16f20:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16f24:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16f28:	60 85       	ldd	r22, Z+8	; 0x08
   16f2a:	71 85       	ldd	r23, Z+9	; 0x09
   16f2c:	ae 01       	movw	r20, r28
   16f2e:	4a 5f       	subi	r20, 0xFA	; 250
   16f30:	5f 4f       	sbci	r21, 0xFF	; 255
   16f32:	8a ee       	ldi	r24, 0xEA	; 234
   16f34:	9c e1       	ldi	r25, 0x1C	; 28
   16f36:	0e 94 fb 8a 	call	0x115f6	; 0x115f6 <gpib_read_str>
   16f3a:	7c 01       	movw	r14, r24
   16f3c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16f40:	85 ff       	sbrs	r24, 5
   16f42:	12 c0       	rjmp	.+36     	; 0x16f68 <amigo_buffered_write+0x8c>
   16f44:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16f48:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16f4c:	80 81       	ld	r24, Z
   16f4e:	90 e0       	ldi	r25, 0x00	; 0
   16f50:	ed b7       	in	r30, 0x3d	; 61
   16f52:	fe b7       	in	r31, 0x3e	; 62
   16f54:	95 83       	std	Z+5, r25	; 0x05
   16f56:	84 83       	std	Z+4, r24	; 0x04
   16f58:	89 eb       	ldi	r24, 0xB9	; 185
   16f5a:	90 e3       	ldi	r25, 0x30	; 48
   16f5c:	a0 e0       	ldi	r26, 0x00	; 0
   16f5e:	81 83       	std	Z+1, r24	; 0x01
   16f60:	92 83       	std	Z+2, r25	; 0x02
   16f62:	a3 83       	std	Z+3, r26	; 0x03
   16f64:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   16f68:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16f6c:	87 ff       	sbrs	r24, 7
   16f6e:	04 c0       	rjmp	.+8      	; 0x16f78 <amigo_buffered_write+0x9c>
   16f70:	8b ec       	ldi	r24, 0xCB	; 203
   16f72:	95 e1       	ldi	r25, 0x15	; 21
   16f74:	0e 94 a5 85 	call	0x10b4a	; 0x10b4a <gpib_timer_elapsed_end>
   16f78:	8e 81       	ldd	r24, Y+6	; 0x06
   16f7a:	9f 81       	ldd	r25, Y+7	; 0x07
   16f7c:	88 27       	eor	r24, r24
   16f7e:	90 7d       	andi	r25, 0xD0	; 208
   16f80:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   16f84:	89 2b       	or	r24, r25
   16f86:	49 f4       	brne	.+18     	; 0x16f9a <amigo_buffered_write+0xbe>
   16f88:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16f8c:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16f90:	80 85       	ldd	r24, Z+8	; 0x08
   16f92:	91 85       	ldd	r25, Z+9	; 0x09
   16f94:	e8 16       	cp	r14, r24
   16f96:	f9 06       	cpc	r15, r25
   16f98:	c1 f0       	breq	.+48     	; 0x16fca <amigo_buffered_write+0xee>
   16f9a:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16f9e:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16fa2:	81 e0       	ldi	r24, 0x01	; 1
   16fa4:	86 83       	std	Z+6, r24	; 0x06
   16fa6:	87 81       	ldd	r24, Z+7	; 0x07
   16fa8:	90 85       	ldd	r25, Z+8	; 0x08
   16faa:	80 62       	ori	r24, 0x20	; 32
   16fac:	90 87       	std	Z+8, r25	; 0x08
   16fae:	87 83       	std	Z+7, r24	; 0x07
   16fb0:	20 ff       	sbrs	r18, 0
   16fb2:	5e c0       	rjmp	.+188    	; 0x17070 <amigo_buffered_write+0x194>
   16fb4:	8a e9       	ldi	r24, 0x9A	; 154
   16fb6:	90 e3       	ldi	r25, 0x30	; 48
   16fb8:	a0 e0       	ldi	r26, 0x00	; 0
   16fba:	ed b7       	in	r30, 0x3d	; 61
   16fbc:	fe b7       	in	r31, 0x3e	; 62
   16fbe:	81 83       	std	Z+1, r24	; 0x01
   16fc0:	92 83       	std	Z+2, r25	; 0x02
   16fc2:	a3 83       	std	Z+3, r26	; 0x03
   16fc4:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   16fc8:	53 c0       	rjmp	.+166    	; 0x17070 <amigo_buffered_write+0x194>
   16fca:	26 fd       	sbrc	r18, 6
   16fcc:	0e 94 93 85 	call	0x10b26	; 0x10b26 <gpib_timer_elapsed_begin>
   16fd0:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16fd4:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16fd8:	e0 90 62 19 	lds	r14, 0x1962	; 0x801962 <AMIGOs>
   16fdc:	f0 90 63 19 	lds	r15, 0x1963	; 0x801963 <AMIGOs+0x1>
   16fe0:	87 e0       	ldi	r24, 0x07	; 7
   16fe2:	e8 0e       	add	r14, r24
   16fe4:	f1 1c       	adc	r15, r1
   16fe6:	00 85       	ldd	r16, Z+8	; 0x08
   16fe8:	11 85       	ldd	r17, Z+9	; 0x09
   16fea:	2a ee       	ldi	r18, 0xEA	; 234
   16fec:	3c e1       	ldi	r19, 0x1C	; 28
   16fee:	b5 01       	movw	r22, r10
   16ff0:	a4 01       	movw	r20, r8
   16ff2:	82 81       	ldd	r24, Z+2	; 0x02
   16ff4:	93 81       	ldd	r25, Z+3	; 0x03
   16ff6:	0e 94 3c 85 	call	0x10a78	; 0x10a78 <dbf_open_write>
   16ffa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16ffe:	86 ff       	sbrs	r24, 6
   17000:	04 c0       	rjmp	.+8      	; 0x1700a <amigo_buffered_write+0x12e>
   17002:	84 e9       	ldi	r24, 0x94	; 148
   17004:	90 e1       	ldi	r25, 0x10	; 16
   17006:	0e 94 a5 85 	call	0x10b4a	; 0x10b4a <gpib_timer_elapsed_end>
   1700a:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   1700e:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   17012:	87 81       	ldd	r24, Z+7	; 0x07
   17014:	90 85       	ldd	r25, Z+8	; 0x08
   17016:	89 2b       	or	r24, r25
   17018:	d9 f0       	breq	.+54     	; 0x17050 <amigo_buffered_write+0x174>
   1701a:	81 e0       	ldi	r24, 0x01	; 1
   1701c:	86 83       	std	Z+6, r24	; 0x06
   1701e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17022:	80 ff       	sbrs	r24, 0
   17024:	0a c0       	rjmp	.+20     	; 0x1703a <amigo_buffered_write+0x15e>
   17026:	8a e7       	ldi	r24, 0x7A	; 122
   17028:	90 e3       	ldi	r25, 0x30	; 48
   1702a:	a0 e0       	ldi	r26, 0x00	; 0
   1702c:	ed b7       	in	r30, 0x3d	; 61
   1702e:	fe b7       	in	r31, 0x3e	; 62
   17030:	81 83       	std	Z+1, r24	; 0x01
   17032:	92 83       	std	Z+2, r25	; 0x02
   17034:	a3 83       	std	Z+3, r26	; 0x03
   17036:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   1703a:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   1703e:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   17042:	81 81       	ldd	r24, Z+1	; 0x01
   17044:	90 e0       	ldi	r25, 0x00	; 0
   17046:	0e 94 6d 86 	call	0x10cda	; 0x10cda <gpib_enable_PPR>
   1704a:	80 e0       	ldi	r24, 0x00	; 0
   1704c:	90 e0       	ldi	r25, 0x00	; 0
   1704e:	1c c0       	rjmp	.+56     	; 0x17088 <amigo_buffered_write+0x1ac>
   17050:	8c eb       	ldi	r24, 0xBC	; 188
   17052:	95 e1       	ldi	r25, 0x15	; 21
   17054:	d1 dc       	rcall	.-1630   	; 0x169f8 <amigo_increment>
   17056:	89 2b       	or	r24, r25
   17058:	59 f0       	breq	.+22     	; 0x17070 <amigo_buffered_write+0x194>
   1705a:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   1705e:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   17062:	81 e0       	ldi	r24, 0x01	; 1
   17064:	86 83       	std	Z+6, r24	; 0x06
   17066:	87 81       	ldd	r24, Z+7	; 0x07
   17068:	90 85       	ldd	r25, Z+8	; 0x08
   1706a:	84 60       	ori	r24, 0x04	; 4
   1706c:	90 87       	std	Z+8, r25	; 0x08
   1706e:	87 83       	std	Z+7, r24	; 0x07
   17070:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   17074:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   17078:	81 81       	ldd	r24, Z+1	; 0x01
   1707a:	90 e0       	ldi	r25, 0x00	; 0
   1707c:	0e 94 6d 86 	call	0x10cda	; 0x10cda <gpib_enable_PPR>
   17080:	8e 81       	ldd	r24, Y+6	; 0x06
   17082:	9f 81       	ldd	r25, Y+7	; 0x07
   17084:	88 27       	eor	r24, r24
   17086:	90 7d       	andi	r25, 0xD0	; 208
   17088:	27 96       	adiw	r28, 0x07	; 7
   1708a:	0f b6       	in	r0, 0x3f	; 63
   1708c:	f8 94       	cli
   1708e:	de bf       	out	0x3e, r29	; 62
   17090:	0f be       	out	0x3f, r0	; 63
   17092:	cd bf       	out	0x3d, r28	; 61
   17094:	df 91       	pop	r29
   17096:	cf 91       	pop	r28
   17098:	1f 91       	pop	r17
   1709a:	0f 91       	pop	r16
   1709c:	ff 90       	pop	r15
   1709e:	ef 90       	pop	r14
   170a0:	bf 90       	pop	r11
   170a2:	af 90       	pop	r10
   170a4:	9f 90       	pop	r9
   170a6:	8f 90       	pop	r8
   170a8:	08 95       	ret

000170aa <amigo_cmd_dsj>:
   170aa:	a8 e0       	ldi	r26, 0x08	; 8
   170ac:	b0 e0       	ldi	r27, 0x00	; 0
   170ae:	eb e5       	ldi	r30, 0x5B	; 91
   170b0:	f8 eb       	ldi	r31, 0xB8	; 184
   170b2:	0c 94 1d e7 	jmp	0x1ce3a	; 0x1ce3a <__prologue_saves__+0x20>
   170b6:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   170ba:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   170be:	86 81       	ldd	r24, Z+6	; 0x06
   170c0:	88 87       	std	Y+8, r24	; 0x08
   170c2:	80 e0       	ldi	r24, 0x00	; 0
   170c4:	91 e0       	ldi	r25, 0x01	; 1
   170c6:	9f 83       	std	Y+7, r25	; 0x07
   170c8:	8e 83       	std	Y+6, r24	; 0x06
   170ca:	ae 01       	movw	r20, r28
   170cc:	4a 5f       	subi	r20, 0xFA	; 250
   170ce:	5f 4f       	sbci	r21, 0xFF	; 255
   170d0:	61 e0       	ldi	r22, 0x01	; 1
   170d2:	70 e0       	ldi	r23, 0x00	; 0
   170d4:	ce 01       	movw	r24, r28
   170d6:	08 96       	adiw	r24, 0x08	; 8
   170d8:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <gpib_write_str>
   170dc:	2e 81       	ldd	r18, Y+6	; 0x06
   170de:	3f 81       	ldd	r19, Y+7	; 0x07
   170e0:	22 27       	eor	r18, r18
   170e2:	30 7d       	andi	r19, 0xD0	; 208
   170e4:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   170e8:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   170ec:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   170f0:	23 2b       	or	r18, r19
   170f2:	11 f4       	brne	.+4      	; 0x170f8 <amigo_cmd_dsj+0x4e>
   170f4:	01 97       	sbiw	r24, 0x01	; 1
   170f6:	c1 f0       	breq	.+48     	; 0x17128 <amigo_cmd_dsj+0x7e>
   170f8:	81 e0       	ldi	r24, 0x01	; 1
   170fa:	86 83       	std	Z+6, r24	; 0x06
   170fc:	87 81       	ldd	r24, Z+7	; 0x07
   170fe:	90 85       	ldd	r25, Z+8	; 0x08
   17100:	80 62       	ori	r24, 0x20	; 32
   17102:	90 87       	std	Z+8, r25	; 0x08
   17104:	87 83       	std	Z+7, r24	; 0x07
   17106:	40 ff       	sbrs	r20, 0
   17108:	0a c0       	rjmp	.+20     	; 0x1711e <amigo_cmd_dsj+0x74>
   1710a:	80 e6       	ldi	r24, 0x60	; 96
   1710c:	90 e3       	ldi	r25, 0x30	; 48
   1710e:	a0 e0       	ldi	r26, 0x00	; 0
   17110:	ed b7       	in	r30, 0x3d	; 61
   17112:	fe b7       	in	r31, 0x3e	; 62
   17114:	81 83       	std	Z+1, r24	; 0x01
   17116:	92 83       	std	Z+2, r25	; 0x02
   17118:	a3 83       	std	Z+3, r26	; 0x03
   1711a:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   1711e:	8e 81       	ldd	r24, Y+6	; 0x06
   17120:	9f 81       	ldd	r25, Y+7	; 0x07
   17122:	88 27       	eor	r24, r24
   17124:	90 7d       	andi	r25, 0xD0	; 208
   17126:	19 c0       	rjmp	.+50     	; 0x1715a <amigo_cmd_dsj+0xb0>
   17128:	45 ff       	sbrs	r20, 5
   1712a:	0e c0       	rjmp	.+28     	; 0x17148 <amigo_cmd_dsj+0x9e>
   1712c:	86 81       	ldd	r24, Z+6	; 0x06
   1712e:	90 e0       	ldi	r25, 0x00	; 0
   17130:	ed b7       	in	r30, 0x3d	; 61
   17132:	fe b7       	in	r31, 0x3e	; 62
   17134:	95 83       	std	Z+5, r25	; 0x05
   17136:	84 83       	std	Z+4, r24	; 0x04
   17138:	83 e5       	ldi	r24, 0x53	; 83
   1713a:	90 e3       	ldi	r25, 0x30	; 48
   1713c:	a0 e0       	ldi	r26, 0x00	; 0
   1713e:	81 83       	std	Z+1, r24	; 0x01
   17140:	92 83       	std	Z+2, r25	; 0x02
   17142:	a3 83       	std	Z+3, r26	; 0x03
   17144:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   17148:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   1714c:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   17150:	16 82       	std	Z+6, r1	; 0x06
   17152:	10 86       	std	Z+8, r1	; 0x08
   17154:	17 82       	std	Z+7, r1	; 0x07
   17156:	80 e0       	ldi	r24, 0x00	; 0
   17158:	90 e0       	ldi	r25, 0x00	; 0
   1715a:	28 96       	adiw	r28, 0x08	; 8
   1715c:	e2 e0       	ldi	r30, 0x02	; 2
   1715e:	0c 94 39 e7 	jmp	0x1ce72	; 0x1ce72 <__epilogue_restores__+0x20>

00017162 <amigo_cmd_clear>:
/// - Reference: A23.
/// - Select sector 0.
/// @return  0

int amigo_cmd_clear()
{
   17162:	00 d0       	rcall	.+0      	; 0x17164 <amigo_cmd_clear+0x2>
   17164:	1f 92       	push	r1
#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17166:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1716a:	85 ff       	sbrs	r24, 5
   1716c:	0a c0       	rjmp	.+20     	; 0x17182 <amigo_cmd_clear+0x20>
        printf("[AMIGO Clear]\n");
   1716e:	84 e4       	ldi	r24, 0x44	; 68
   17170:	90 e3       	ldi	r25, 0x30	; 48
   17172:	a0 e0       	ldi	r26, 0x00	; 0
   17174:	ed b7       	in	r30, 0x3d	; 61
   17176:	fe b7       	in	r31, 0x3e	; 62
   17178:	81 83       	std	Z+1, r24	; 0x01
   1717a:	92 83       	std	Z+2, r25	; 0x02
   1717c:	a3 83       	std	Z+3, r26	; 0x03
   1717e:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
#endif
    AMIGOs->sector = 0;
   17182:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   17186:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   1718a:	15 82       	std	Z+5, r1	; 0x05
    AMIGOs->head = 0;
   1718c:	14 82       	std	Z+4, r1	; 0x04
    AMIGOs->cyl = 0;
   1718e:	13 82       	std	Z+3, r1	; 0x03
/// @todo FIXME
///
///  Clear the DSJ byte that might be 2 after powerup
///
    AMIGOs->dsj = 0;
   17190:	16 82       	std	Z+6, r1	; 0x06
    AMIGOs->Errors =0;
   17192:	10 86       	std	Z+8, r1	; 0x08
   17194:	17 82       	std	Z+7, r1	; 0x07

    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   17196:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   1719a:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   1719e:	81 81       	ldd	r24, Z+1	; 0x01
   171a0:	90 e0       	ldi	r25, 0x00	; 0
   171a2:	0e 94 6d 86 	call	0x10cda	; 0x10cda <gpib_enable_PPR>
    return(0);
}
   171a6:	80 e0       	ldi	r24, 0x00	; 0
   171a8:	90 e0       	ldi	r25, 0x00	; 0
   171aa:	0f 90       	pop	r0
   171ac:	0f 90       	pop	r0
   171ae:	0f 90       	pop	r0
   171b0:	08 95       	ret

000171b2 <amigo_todo_op>:
/// @param[in] opcode: GPIB data byte OP Code
/// @param[in] len: Length of GOIB data returned
/// @return  0

int amigo_todo_op(uint8_t secondary, uint8_t opcode, int len)
{
   171b2:	af e0       	ldi	r26, 0x0F	; 15
   171b4:	b0 e0       	ldi	r27, 0x00	; 0
   171b6:	ef ed       	ldi	r30, 0xDF	; 223
   171b8:	f8 eb       	ldi	r31, 0xB8	; 184
   171ba:	0c 94 19 e7 	jmp	0x1ce32	; 0x1ce32 <__prologue_saves__+0x18>
   171be:	c8 2f       	mov	r28, r24
   171c0:	e6 2e       	mov	r14, r22
   171c2:	8a 01       	movw	r16, r20
    if(AMIGO_is_MLA(listening))
   171c4:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   171c8:	90 e0       	ldi	r25, 0x00	; 0
   171ca:	0e 94 d3 8c 	call	0x119a6	; 0x119a6 <AMIGO_is_MLA>
   171ce:	20 91 ee 1e 	lds	r18, 0x1EEE	; 0x801eee <talking>
   171d2:	f1 2c       	mov	r15, r1
   171d4:	d0 e0       	ldi	r29, 0x00	; 0
   171d6:	89 2b       	or	r24, r25
   171d8:	f1 f0       	breq	.+60     	; 0x17216 <amigo_todo_op+0x64>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   171da:	82 2f       	mov	r24, r18
   171dc:	90 e0       	ldi	r25, 0x00	; 0
   171de:	ed b7       	in	r30, 0x3d	; 61
   171e0:	fe b7       	in	r31, 0x3e	; 62
   171e2:	97 87       	std	Z+15, r25	; 0x0f
   171e4:	86 87       	std	Z+14, r24	; 0x0e
   171e6:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   171ea:	90 e0       	ldi	r25, 0x00	; 0
   171ec:	95 87       	std	Z+13, r25	; 0x0d
   171ee:	84 87       	std	Z+12, r24	; 0x0c
   171f0:	13 87       	std	Z+11, r17	; 0x0b
   171f2:	02 87       	std	Z+10, r16	; 0x0a
   171f4:	f1 86       	std	Z+9, r15	; 0x09
   171f6:	e0 86       	std	Z+8, r14	; 0x08
   171f8:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   171fc:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   17200:	80 81       	ld	r24, Z
   17202:	90 e0       	ldi	r25, 0x00	; 0
   17204:	ed b7       	in	r30, 0x3d	; 61
   17206:	fe b7       	in	r31, 0x3e	; 62
   17208:	97 83       	std	Z+7, r25	; 0x07
   1720a:	86 83       	std	Z+6, r24	; 0x06
   1720c:	d5 83       	std	Z+5, r29	; 0x05
   1720e:	c4 83       	std	Z+4, r28	; 0x04
   17210:	8d ed       	ldi	r24, 0xDD	; 221
   17212:	9f e2       	ldi	r25, 0x2F	; 47
   17214:	51 c0       	rjmp	.+162    	; 0x172b8 <amigo_todo_op+0x106>
            secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(AMIGO_is_MTA(talking))
   17216:	82 2f       	mov	r24, r18
   17218:	90 e0       	ldi	r25, 0x00	; 0
   1721a:	0e 94 e5 8c 	call	0x119ca	; 0x119ca <AMIGO_is_MTA>
   1721e:	20 91 f0 1e 	lds	r18, 0x1EF0	; 0x801ef0 <listening>
   17222:	30 91 ee 1e 	lds	r19, 0x1EEE	; 0x801eee <talking>
   17226:	a0 91 62 19 	lds	r26, 0x1962	; 0x801962 <AMIGOs>
   1722a:	b0 91 63 19 	lds	r27, 0x1963	; 0x801963 <AMIGOs+0x1>
   1722e:	89 2b       	or	r24, r25
   17230:	b1 f0       	breq	.+44     	; 0x1725e <amigo_todo_op+0xac>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   17232:	83 2f       	mov	r24, r19
   17234:	90 e0       	ldi	r25, 0x00	; 0
   17236:	ed b7       	in	r30, 0x3d	; 61
   17238:	fe b7       	in	r31, 0x3e	; 62
   1723a:	97 87       	std	Z+15, r25	; 0x0f
   1723c:	86 87       	std	Z+14, r24	; 0x0e
   1723e:	30 e0       	ldi	r19, 0x00	; 0
   17240:	35 87       	std	Z+13, r19	; 0x0d
   17242:	24 87       	std	Z+12, r18	; 0x0c
   17244:	13 87       	std	Z+11, r17	; 0x0b
   17246:	02 87       	std	Z+10, r16	; 0x0a
   17248:	f1 86       	std	Z+9, r15	; 0x09
   1724a:	e0 86       	std	Z+8, r14	; 0x08
   1724c:	8c 91       	ld	r24, X
   1724e:	90 e0       	ldi	r25, 0x00	; 0
   17250:	97 83       	std	Z+7, r25	; 0x07
   17252:	86 83       	std	Z+6, r24	; 0x06
   17254:	d5 83       	std	Z+5, r29	; 0x05
   17256:	c4 83       	std	Z+4, r28	; 0x04
   17258:	86 e7       	ldi	r24, 0x76	; 118
   1725a:	9f e2       	ldi	r25, 0x2F	; 47
   1725c:	2d c0       	rjmp	.+90     	; 0x172b8 <amigo_todo_op+0x106>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(talking == UNT)
   1725e:	3f 35       	cpi	r19, 0x5F	; 95
   17260:	b1 f4       	brne	.+44     	; 0x1728e <amigo_todo_op+0xdc>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   17262:	8f e5       	ldi	r24, 0x5F	; 95
   17264:	90 e0       	ldi	r25, 0x00	; 0
   17266:	ed b7       	in	r30, 0x3d	; 61
   17268:	fe b7       	in	r31, 0x3e	; 62
   1726a:	97 87       	std	Z+15, r25	; 0x0f
   1726c:	86 87       	std	Z+14, r24	; 0x0e
   1726e:	30 e0       	ldi	r19, 0x00	; 0
   17270:	35 87       	std	Z+13, r19	; 0x0d
   17272:	24 87       	std	Z+12, r18	; 0x0c
   17274:	13 87       	std	Z+11, r17	; 0x0b
   17276:	02 87       	std	Z+10, r16	; 0x0a
   17278:	f1 86       	std	Z+9, r15	; 0x09
   1727a:	e0 86       	std	Z+8, r14	; 0x08
   1727c:	8c 91       	ld	r24, X
   1727e:	90 e0       	ldi	r25, 0x00	; 0
   17280:	97 83       	std	Z+7, r25	; 0x07
   17282:	86 83       	std	Z+6, r24	; 0x06
   17284:	d5 83       	std	Z+5, r29	; 0x05
   17286:	c4 83       	std	Z+4, r28	; 0x04
   17288:	8f e0       	ldi	r24, 0x0F	; 15
   1728a:	9f e2       	ldi	r25, 0x2F	; 47
   1728c:	15 c0       	rjmp	.+42     	; 0x172b8 <amigo_todo_op+0x106>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else
        printf("[U Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   1728e:	83 2f       	mov	r24, r19
   17290:	90 e0       	ldi	r25, 0x00	; 0
   17292:	ed b7       	in	r30, 0x3d	; 61
   17294:	fe b7       	in	r31, 0x3e	; 62
   17296:	97 87       	std	Z+15, r25	; 0x0f
   17298:	86 87       	std	Z+14, r24	; 0x0e
   1729a:	30 e0       	ldi	r19, 0x00	; 0
   1729c:	35 87       	std	Z+13, r19	; 0x0d
   1729e:	24 87       	std	Z+12, r18	; 0x0c
   172a0:	13 87       	std	Z+11, r17	; 0x0b
   172a2:	02 87       	std	Z+10, r16	; 0x0a
   172a4:	f1 86       	std	Z+9, r15	; 0x09
   172a6:	e0 86       	std	Z+8, r14	; 0x08
   172a8:	8c 91       	ld	r24, X
   172aa:	90 e0       	ldi	r25, 0x00	; 0
   172ac:	97 83       	std	Z+7, r25	; 0x07
   172ae:	86 83       	std	Z+6, r24	; 0x06
   172b0:	d5 83       	std	Z+5, r29	; 0x05
   172b2:	c4 83       	std	Z+4, r28	; 0x04
   172b4:	8a ea       	ldi	r24, 0xAA	; 170
   172b6:	9e e2       	ldi	r25, 0x2E	; 46
   172b8:	a0 e0       	ldi	r26, 0x00	; 0
   172ba:	81 83       	std	Z+1, r24	; 0x01
   172bc:	92 83       	std	Z+2, r25	; 0x02
   172be:	a3 83       	std	Z+3, r26	; 0x03
   172c0:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
            secondary, AMIGOs->state, opcode, len, listening, talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   172c4:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   172c8:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   172cc:	81 81       	ldd	r24, Z+1	; 0x01
   172ce:	90 e0       	ldi	r25, 0x00	; 0
   172d0:	0e 94 6d 86 	call	0x10cda	; 0x10cda <gpib_enable_PPR>
    return(0);
}
   172d4:	80 e0       	ldi	r24, 0x00	; 0
   172d6:	90 e0       	ldi	r25, 0x00	; 0
   172d8:	cd b7       	in	r28, 0x3d	; 61
   172da:	de b7       	in	r29, 0x3e	; 62
   172dc:	2f 96       	adiw	r28, 0x0f	; 15
   172de:	e6 e0       	ldi	r30, 0x06	; 6
   172e0:	0c 94 35 e7 	jmp	0x1ce6a	; 0x1ce6a <__epilogue_restores__+0x18>

000172e4 <amigo_todo>:
/// @param[in] secondary: GPIB seconday command
///
/// @return  0

int amigo_todo(uint8_t secondary)
{
   172e4:	ab e0       	ldi	r26, 0x0B	; 11
   172e6:	b0 e0       	ldi	r27, 0x00	; 0
   172e8:	e8 e7       	ldi	r30, 0x78	; 120
   172ea:	f9 eb       	ldi	r31, 0xB9	; 185
   172ec:	0c 94 1d e7 	jmp	0x1ce3a	; 0x1ce3a <__prologue_saves__+0x20>
   172f0:	c8 2f       	mov	r28, r24
    if(AMIGO_is_MLA(listening))
   172f2:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   172f6:	90 e0       	ldi	r25, 0x00	; 0
   172f8:	0e 94 d3 8c 	call	0x119a6	; 0x119a6 <AMIGO_is_MLA>
   172fc:	20 91 ee 1e 	lds	r18, 0x1EEE	; 0x801eee <talking>
   17300:	d0 e0       	ldi	r29, 0x00	; 0
   17302:	89 2b       	or	r24, r25
   17304:	d1 f0       	breq	.+52     	; 0x1733a <amigo_todo+0x56>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   17306:	82 2f       	mov	r24, r18
   17308:	90 e0       	ldi	r25, 0x00	; 0
   1730a:	ed b7       	in	r30, 0x3d	; 61
   1730c:	fe b7       	in	r31, 0x3e	; 62
   1730e:	93 87       	std	Z+11, r25	; 0x0b
   17310:	82 87       	std	Z+10, r24	; 0x0a
   17312:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17316:	90 e0       	ldi	r25, 0x00	; 0
   17318:	91 87       	std	Z+9, r25	; 0x09
   1731a:	80 87       	std	Z+8, r24	; 0x08
   1731c:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   17320:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   17324:	80 81       	ld	r24, Z
   17326:	90 e0       	ldi	r25, 0x00	; 0
   17328:	ed b7       	in	r30, 0x3d	; 61
   1732a:	fe b7       	in	r31, 0x3e	; 62
   1732c:	97 83       	std	Z+7, r25	; 0x07
   1732e:	86 83       	std	Z+6, r24	; 0x06
   17330:	d5 83       	std	Z+5, r29	; 0x05
   17332:	c4 83       	std	Z+4, r28	; 0x04
   17334:	8a e5       	ldi	r24, 0x5A	; 90
   17336:	9e e2       	ldi	r25, 0x2E	; 46
   17338:	43 c0       	rjmp	.+134    	; 0x173c0 <amigo_todo+0xdc>
            secondary,AMIGOs->state,listening,talking);
    else if(AMIGO_is_MTA(talking))
   1733a:	82 2f       	mov	r24, r18
   1733c:	90 e0       	ldi	r25, 0x00	; 0
   1733e:	0e 94 e5 8c 	call	0x119ca	; 0x119ca <AMIGO_is_MTA>
   17342:	20 91 f0 1e 	lds	r18, 0x1EF0	; 0x801ef0 <listening>
   17346:	40 91 ee 1e 	lds	r20, 0x1EEE	; 0x801eee <talking>
   1734a:	a0 91 62 19 	lds	r26, 0x1962	; 0x801962 <AMIGOs>
   1734e:	b0 91 63 19 	lds	r27, 0x1963	; 0x801963 <AMIGOs+0x1>
   17352:	89 2b       	or	r24, r25
   17354:	89 f0       	breq	.+34     	; 0x17378 <amigo_todo+0x94>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   17356:	50 e0       	ldi	r21, 0x00	; 0
   17358:	ed b7       	in	r30, 0x3d	; 61
   1735a:	fe b7       	in	r31, 0x3e	; 62
   1735c:	53 87       	std	Z+11, r21	; 0x0b
   1735e:	42 87       	std	Z+10, r20	; 0x0a
   17360:	30 e0       	ldi	r19, 0x00	; 0
   17362:	31 87       	std	Z+9, r19	; 0x09
   17364:	20 87       	std	Z+8, r18	; 0x08
   17366:	8c 91       	ld	r24, X
   17368:	90 e0       	ldi	r25, 0x00	; 0
   1736a:	97 83       	std	Z+7, r25	; 0x07
   1736c:	86 83       	std	Z+6, r24	; 0x06
   1736e:	d5 83       	std	Z+5, r29	; 0x05
   17370:	c4 83       	std	Z+4, r28	; 0x04
   17372:	8a e0       	ldi	r24, 0x0A	; 10
   17374:	9e e2       	ldi	r25, 0x2E	; 46
   17376:	24 c0       	rjmp	.+72     	; 0x173c0 <amigo_todo+0xdc>
                secondary,AMIGOs->state,listening,talking);
    else if(talking == UNT)
   17378:	4f 35       	cpi	r20, 0x5F	; 95
   1737a:	91 f4       	brne	.+36     	; 0x173a0 <amigo_todo+0xbc>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   1737c:	8f e5       	ldi	r24, 0x5F	; 95
   1737e:	90 e0       	ldi	r25, 0x00	; 0
   17380:	ed b7       	in	r30, 0x3d	; 61
   17382:	fe b7       	in	r31, 0x3e	; 62
   17384:	93 87       	std	Z+11, r25	; 0x0b
   17386:	82 87       	std	Z+10, r24	; 0x0a
   17388:	30 e0       	ldi	r19, 0x00	; 0
   1738a:	31 87       	std	Z+9, r19	; 0x09
   1738c:	20 87       	std	Z+8, r18	; 0x08
   1738e:	8c 91       	ld	r24, X
   17390:	90 e0       	ldi	r25, 0x00	; 0
   17392:	97 83       	std	Z+7, r25	; 0x07
   17394:	86 83       	std	Z+6, r24	; 0x06
   17396:	d5 83       	std	Z+5, r29	; 0x05
   17398:	c4 83       	std	Z+4, r28	; 0x04
   1739a:	8a eb       	ldi	r24, 0xBA	; 186
   1739c:	9d e2       	ldi	r25, 0x2D	; 45
   1739e:	10 c0       	rjmp	.+32     	; 0x173c0 <amigo_todo+0xdc>
                secondary,AMIGOs->state,listening,talking);
    else
        printf("[E   Amigo ERROR secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   173a0:	50 e0       	ldi	r21, 0x00	; 0
   173a2:	ed b7       	in	r30, 0x3d	; 61
   173a4:	fe b7       	in	r31, 0x3e	; 62
   173a6:	53 87       	std	Z+11, r21	; 0x0b
   173a8:	42 87       	std	Z+10, r20	; 0x0a
   173aa:	30 e0       	ldi	r19, 0x00	; 0
   173ac:	31 87       	std	Z+9, r19	; 0x09
   173ae:	20 87       	std	Z+8, r18	; 0x08
   173b0:	8c 91       	ld	r24, X
   173b2:	90 e0       	ldi	r25, 0x00	; 0
   173b4:	97 83       	std	Z+7, r25	; 0x07
   173b6:	86 83       	std	Z+6, r24	; 0x06
   173b8:	d5 83       	std	Z+5, r29	; 0x05
   173ba:	c4 83       	std	Z+4, r28	; 0x04
   173bc:	89 e6       	ldi	r24, 0x69	; 105
   173be:	9d e2       	ldi	r25, 0x2D	; 45
   173c0:	a0 e0       	ldi	r26, 0x00	; 0
   173c2:	81 83       	std	Z+1, r24	; 0x01
   173c4:	92 83       	std	Z+2, r25	; 0x02
   173c6:	a3 83       	std	Z+3, r26	; 0x03
   173c8:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
            secondary,AMIGOs->state,listening,talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   173cc:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   173d0:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   173d4:	81 81       	ldd	r24, Z+1	; 0x01
   173d6:	90 e0       	ldi	r25, 0x00	; 0
   173d8:	0e 94 6d 86 	call	0x10cda	; 0x10cda <gpib_enable_PPR>
    return(0);
}
   173dc:	80 e0       	ldi	r24, 0x00	; 0
   173de:	90 e0       	ldi	r25, 0x00	; 0
   173e0:	cd b7       	in	r28, 0x3d	; 61
   173e2:	de b7       	in	r29, 0x3e	; 62
   173e4:	2b 96       	adiw	r28, 0x0b	; 11
   173e6:	e2 e0       	ldi	r30, 0x02	; 2
   173e8:	0c 94 39 e7 	jmp	0x1ce72	; 0x1ce72 <__epilogue_restores__+0x20>

000173ec <amigo_check_unit>:
/// @brief  Amigo Check Valid unit
/// @param[in] unit: unit to set
/// @return void
void amigo_check_unit(uint8_t unit)
{
    if(unit != 15)
   173ec:	8f 30       	cpi	r24, 0x0F	; 15
   173ee:	29 f0       	breq	.+10     	; 0x173fa <amigo_check_unit+0xe>
        AMIGOs->unitNO = unit;
   173f0:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   173f4:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   173f8:	81 83       	std	Z+1, r24	; 0x01
    if(AMIGOs->unitNO != 0)
   173fa:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   173fe:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   17402:	81 81       	ldd	r24, Z+1	; 0x01
   17404:	88 23       	and	r24, r24
   17406:	29 f0       	breq	.+10     	; 0x17412 <amigo_check_unit+0x26>
        AMIGOs->Errors |= ERR_UNIT;
   17408:	87 81       	ldd	r24, Z+7	; 0x07
   1740a:	90 85       	ldd	r25, Z+8	; 0x08
   1740c:	80 64       	ori	r24, 0x40	; 64
   1740e:	90 87       	std	Z+8, r25	; 0x08
   17410:	87 83       	std	Z+7, r24	; 0x07
   17412:	08 95       	ret

00017414 <Amigo_Command>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)

int Amigo_Command( int secondary )
{
   17414:	ac e1       	ldi	r26, 0x1C	; 28
   17416:	b0 e0       	ldi	r27, 0x00	; 0
   17418:	e0 e1       	ldi	r30, 0x10	; 16
   1741a:	fa eb       	ldi	r31, 0xBA	; 186
   1741c:	0c 94 19 e7 	jmp	0x1ce32	; 0x1ce32 <__prologue_saves__+0x18>
   17420:	7c 01       	movw	r14, r24
    uint8_t *ptr;
    uint16_t status;                              // Current status
    UINT len;                                     // Size of Data/Op Codes/Parameters read in bytes

#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17422:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17426:	85 ff       	sbrs	r24, 5
   17428:	16 c0       	rjmp	.+44     	; 0x17456 <Amigo_Command+0x42>
        printf("[AMIGO Command(%02XH): listen:%02XH, talk:%02XH]\n",
   1742a:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   1742e:	90 e0       	ldi	r25, 0x00	; 0
   17430:	ed b7       	in	r30, 0x3d	; 61
   17432:	fe b7       	in	r31, 0x3e	; 62
   17434:	91 87       	std	Z+9, r25	; 0x09
   17436:	80 87       	std	Z+8, r24	; 0x08
   17438:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   1743c:	90 e0       	ldi	r25, 0x00	; 0
   1743e:	97 83       	std	Z+7, r25	; 0x07
   17440:	86 83       	std	Z+6, r24	; 0x06
   17442:	f5 82       	std	Z+5, r15	; 0x05
   17444:	e4 82       	std	Z+4, r14	; 0x04
   17446:	87 e3       	ldi	r24, 0x37	; 55
   17448:	9d e2       	ldi	r25, 0x2D	; 45
   1744a:	a0 e0       	ldi	r26, 0x00	; 0
   1744c:	81 83       	std	Z+1, r24	; 0x01
   1744e:	92 83       	std	Z+2, r25	; 0x02
   17450:	a3 83       	std	Z+3, r26	; 0x03
   17452:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
            secondary, listening, talking);
#endif

///  Reference: A14
    if (secondary == 0x7e && AMIGO_is_MTA(talking))
   17456:	fe e7       	ldi	r31, 0x7E	; 126
   17458:	ef 16       	cp	r14, r31
   1745a:	f1 04       	cpc	r15, r1
   1745c:	f1 f5       	brne	.+124    	; 0x174da <Amigo_Command+0xc6>
   1745e:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   17462:	90 e0       	ldi	r25, 0x00	; 0
   17464:	0e 94 e5 8c 	call	0x119ca	; 0x119ca <AMIGO_is_MTA>
   17468:	89 2b       	or	r24, r25
   1746a:	09 f4       	brne	.+2      	; 0x1746e <Amigo_Command+0x5a>
   1746c:	86 c0       	rjmp	.+268    	; 0x1757a <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   1746e:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   17472:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   17476:	81 81       	ldd	r24, Z+1	; 0x01
   17478:	90 e0       	ldi	r25, 0x00	; 0
   1747a:	0e 94 a3 86 	call	0x10d46	; 0x10d46 <gpib_disable_PPR>
        status = EOI_FLAG;
   1747e:	80 e0       	ldi	r24, 0x00	; 0
   17480:	91 e0       	ldi	r25, 0x01	; 1
   17482:	9c 8f       	std	Y+28, r25	; 0x1c
   17484:	8b 8f       	std	Y+27, r24	; 0x1b
        len = gpib_write_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   17486:	ae 01       	movw	r20, r28
   17488:	45 5e       	subi	r20, 0xE5	; 229
   1748a:	5f 4f       	sbci	r21, 0xFF	; 255
   1748c:	60 e0       	ldi	r22, 0x00	; 0
   1748e:	72 e0       	ldi	r23, 0x02	; 2
   17490:	8a ee       	ldi	r24, 0xEA	; 234
   17492:	9c e1       	ldi	r25, 0x1C	; 28
   17494:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <gpib_write_str>
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   17498:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   1749c:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   174a0:	81 81       	ldd	r24, Z+1	; 0x01
   174a2:	90 e0       	ldi	r25, 0x00	; 0
   174a4:	0e 94 6d 86 	call	0x10cda	; 0x10cda <gpib_enable_PPR>
        if(status & ERROR_MASK)
   174a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
   174aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
   174ac:	88 27       	eor	r24, r24
   174ae:	90 7d       	andi	r25, 0xD0	; 208
   174b0:	89 2b       	or	r24, r25
   174b2:	09 f4       	brne	.+2      	; 0x174b6 <Amigo_Command+0xa2>
   174b4:	89 c2       	rjmp	.+1298   	; 0x179c8 <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   174b6:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   174ba:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   174be:	81 e0       	ldi	r24, 0x01	; 1
   174c0:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   174c2:	87 81       	ldd	r24, Z+7	; 0x07
   174c4:	90 85       	ldd	r25, Z+8	; 0x08
   174c6:	80 62       	ori	r24, 0x20	; 32
   174c8:	90 87       	std	Z+8, r25	; 0x08
   174ca:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & GPIB_ERR)
   174cc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   174d0:	80 ff       	sbrs	r24, 0
   174d2:	7a c2       	rjmp	.+1268   	; 0x179c8 <Amigo_Command+0x5b4>
                printf("[AMIGO_Command:GPIB write error]\n");
   174d4:	85 e1       	ldi	r24, 0x15	; 21
   174d6:	9d e2       	ldi	r25, 0x2D	; 45
   174d8:	8e c0       	rjmp	.+284    	; 0x175f6 <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

///  Reference: A25
    if (secondary == 0x7f && AMIGO_is_MLA(listening))
   174da:	ff e7       	ldi	r31, 0x7F	; 127
   174dc:	ef 16       	cp	r14, r31
   174de:	f1 04       	cpc	r15, r1
   174e0:	09 f0       	breq	.+2      	; 0x174e4 <Amigo_Command+0xd0>
   174e2:	4b c0       	rjmp	.+150    	; 0x1757a <Amigo_Command+0x166>
   174e4:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   174e8:	90 e0       	ldi	r25, 0x00	; 0
   174ea:	0e 94 d3 8c 	call	0x119a6	; 0x119a6 <AMIGO_is_MLA>
   174ee:	89 2b       	or	r24, r25
   174f0:	09 f4       	brne	.+2      	; 0x174f4 <Amigo_Command+0xe0>
   174f2:	43 c0       	rjmp	.+134    	; 0x1757a <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   174f4:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   174f8:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   174fc:	81 81       	ldd	r24, Z+1	; 0x01
   174fe:	90 e0       	ldi	r25, 0x00	; 0
   17500:	0e 94 a3 86 	call	0x10d46	; 0x10d46 <gpib_disable_PPR>
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   17504:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17508:	87 fd       	sbrc	r24, 7
            gpib_timer_elapsed_begin();
   1750a:	0e 94 93 85 	call	0x10b26	; 0x10b26 <gpib_timer_elapsed_begin>
#endif
        status = EOI_FLAG;
   1750e:	80 e0       	ldi	r24, 0x00	; 0
   17510:	91 e0       	ldi	r25, 0x01	; 1
   17512:	9c 8f       	std	Y+28, r25	; 0x1c
   17514:	8b 8f       	std	Y+27, r24	; 0x1b
        len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   17516:	ae 01       	movw	r20, r28
   17518:	45 5e       	subi	r20, 0xE5	; 229
   1751a:	5f 4f       	sbci	r21, 0xFF	; 255
   1751c:	60 e0       	ldi	r22, 0x00	; 0
   1751e:	72 e0       	ldi	r23, 0x02	; 2
   17520:	8a ee       	ldi	r24, 0xEA	; 234
   17522:	9c e1       	ldi	r25, 0x1C	; 28
   17524:	0e 94 fb 8a 	call	0x115f6	; 0x115f6 <gpib_read_str>
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   17528:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1752c:	87 ff       	sbrs	r24, 7
   1752e:	04 c0       	rjmp	.+8      	; 0x17538 <Amigo_Command+0x124>
            gpib_timer_elapsed_end("GPIB read");
   17530:	8b ec       	ldi	r24, 0xCB	; 203
   17532:	95 e1       	ldi	r25, 0x15	; 21
   17534:	0e 94 a5 85 	call	0x10b4a	; 0x10b4a <gpib_timer_elapsed_end>
#endif
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   17538:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   1753c:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   17540:	81 81       	ldd	r24, Z+1	; 0x01
   17542:	90 e0       	ldi	r25, 0x00	; 0
   17544:	0e 94 6d 86 	call	0x10cda	; 0x10cda <gpib_enable_PPR>
        if(status & ERROR_MASK)
   17548:	8b 8d       	ldd	r24, Y+27	; 0x1b
   1754a:	9c 8d       	ldd	r25, Y+28	; 0x1c
   1754c:	88 27       	eor	r24, r24
   1754e:	90 7d       	andi	r25, 0xD0	; 208
   17550:	89 2b       	or	r24, r25
   17552:	09 f4       	brne	.+2      	; 0x17556 <Amigo_Command+0x142>
   17554:	39 c2       	rjmp	.+1138   	; 0x179c8 <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   17556:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   1755a:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   1755e:	81 e0       	ldi	r24, 0x01	; 1
   17560:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   17562:	87 81       	ldd	r24, Z+7	; 0x07
   17564:	90 85       	ldd	r25, Z+8	; 0x08
   17566:	80 62       	ori	r24, 0x20	; 32
   17568:	90 87       	std	Z+8, r25	; 0x08
   1756a:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & GPIB_ERR)
   1756c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17570:	80 ff       	sbrs	r24, 0
   17572:	2a c2       	rjmp	.+1108   	; 0x179c8 <Amigo_Command+0x5b4>
                printf("[AMIGO Command:GPIB read error]\n");
   17574:	84 ef       	ldi	r24, 0xF4	; 244
   17576:	9c e2       	ldi	r25, 0x2C	; 44
   17578:	3e c0       	rjmp	.+124    	; 0x175f6 <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   1757a:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   1757e:	90 e0       	ldi	r25, 0x00	; 0
   17580:	0e 94 d3 8c 	call	0x119a6	; 0x119a6 <AMIGO_is_MLA>
   17584:	89 2b       	or	r24, r25
   17586:	19 f4       	brne	.+6      	; 0x1758e <Amigo_Command+0x17a>
        return(0);
   17588:	80 e0       	ldi	r24, 0x00	; 0
   1758a:	90 e0       	ldi	r25, 0x00	; 0
   1758c:	25 c2       	rjmp	.+1098   	; 0x179d8 <Amigo_Command+0x5c4>
                printf("[AMIGO Command:GPIB read error]\n");
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   1758e:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   17592:	90 e0       	ldi	r25, 0x00	; 0
   17594:	0e 94 e5 8c 	call	0x119ca	; 0x119ca <AMIGO_is_MTA>
   17598:	89 2b       	or	r24, r25
   1759a:	b1 f7       	brne	.-20     	; 0x17588 <Amigo_Command+0x174>
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   1759c:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   175a0:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   175a4:	81 81       	ldd	r24, Z+1	; 0x01
   175a6:	90 e0       	ldi	r25, 0x00	; 0
   175a8:	0e 94 a3 86 	call	0x10d46	; 0x10d46 <gpib_disable_PPR>

///  Note: the function will "unread" any commands and return
///  All Data MUST have EOI

    status = EOI_FLAG;
   175ac:	80 e0       	ldi	r24, 0x00	; 0
   175ae:	91 e0       	ldi	r25, 0x01	; 1
   175b0:	9c 8f       	std	Y+28, r25	; 0x1c
   175b2:	8b 8f       	std	Y+27, r24	; 0x1b
    len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   175b4:	ae 01       	movw	r20, r28
   175b6:	45 5e       	subi	r20, 0xE5	; 229
   175b8:	5f 4f       	sbci	r21, 0xFF	; 255
   175ba:	60 e0       	ldi	r22, 0x00	; 0
   175bc:	72 e0       	ldi	r23, 0x02	; 2
   175be:	8a ee       	ldi	r24, 0xEA	; 234
   175c0:	9c e1       	ldi	r25, 0x1C	; 28
   175c2:	0e 94 fb 8a 	call	0x115f6	; 0x115f6 <gpib_read_str>
   175c6:	8c 01       	movw	r16, r24
    if(status & ERROR_MASK)
   175c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
   175ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
   175cc:	88 27       	eor	r24, r24
   175ce:	90 7d       	andi	r25, 0xD0	; 208
   175d0:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   175d4:	89 2b       	or	r24, r25
   175d6:	c1 f0       	breq	.+48     	; 0x17608 <Amigo_Command+0x1f4>
    {
        AMIGOs->dsj = 1;
   175d8:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   175dc:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   175e0:	81 e0       	ldi	r24, 0x01	; 1
   175e2:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   175e4:	87 81       	ldd	r24, Z+7	; 0x07
   175e6:	90 85       	ldd	r25, Z+8	; 0x08
   175e8:	80 62       	ori	r24, 0x20	; 32
   175ea:	90 87       	std	Z+8, r25	; 0x08
   175ec:	87 83       	std	Z+7, r24	; 0x07
        if(debuglevel & GPIB_ERR)
   175ee:	20 ff       	sbrs	r18, 0
   175f0:	eb c1       	rjmp	.+982    	; 0x179c8 <Amigo_Command+0x5b4>
            printf("[AMIGO Command:GPIB read error]\n");
   175f2:	83 ed       	ldi	r24, 0xD3	; 211
   175f4:	9c e2       	ldi	r25, 0x2C	; 44
   175f6:	a0 e0       	ldi	r26, 0x00	; 0
   175f8:	ed b7       	in	r30, 0x3d	; 61
   175fa:	fe b7       	in	r31, 0x3e	; 62
   175fc:	81 83       	std	Z+1, r24	; 0x01
   175fe:	92 83       	std	Z+2, r25	; 0x02
   17600:	a3 83       	std	Z+3, r26	; 0x03
   17602:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   17606:	e0 c1       	rjmp	.+960    	; 0x179c8 <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }
#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17608:	25 ff       	sbrs	r18, 5
   1760a:	0e c0       	rjmp	.+28     	; 0x17628 <Amigo_Command+0x214>
        printf("[AMIGO Command(%02XH): GPIB read bytes:%02XH]\n",
   1760c:	ed b7       	in	r30, 0x3d	; 61
   1760e:	fe b7       	in	r31, 0x3e	; 62
   17610:	17 83       	std	Z+7, r17	; 0x07
   17612:	06 83       	std	Z+6, r16	; 0x06
   17614:	f5 82       	std	Z+5, r15	; 0x05
   17616:	e4 82       	std	Z+4, r14	; 0x04
   17618:	84 ea       	ldi	r24, 0xA4	; 164
   1761a:	9c e2       	ldi	r25, 0x2C	; 44
   1761c:	a0 e0       	ldi	r26, 0x00	; 0
   1761e:	81 83       	std	Z+1, r24	; 0x01
   17620:	92 83       	std	Z+2, r25	; 0x02
   17622:	a3 83       	std	Z+3, r26	; 0x03
   17624:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
            secondary, len);
#endif
    if(!len)
   17628:	01 15       	cp	r16, r1
   1762a:	11 05       	cpc	r17, r1
   1762c:	61 f4       	brne	.+24     	; 0x17646 <Amigo_Command+0x232>
    {
        AMIGOs->dsj = 1;
   1762e:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   17632:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   17636:	81 e0       	ldi	r24, 0x01	; 1
   17638:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   1763a:	87 81       	ldd	r24, Z+7	; 0x07
   1763c:	90 85       	ldd	r25, Z+8	; 0x08
   1763e:	80 62       	ori	r24, 0x20	; 32
   17640:	90 87       	std	Z+8, r25	; 0x08
   17642:	87 83       	std	Z+7, r24	; 0x07
   17644:	c1 c1       	rjmp	.+898    	; 0x179c8 <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }

    ptr = gpib_iobuff;
    op = *ptr++;
   17646:	60 91 ea 1c 	lds	r22, 0x1CEA	; 0x801cea <gpib_iobuff>

    if (secondary == 0x68)
   1764a:	f8 e6       	ldi	r31, 0x68	; 104
   1764c:	ef 16       	cp	r14, r31
   1764e:	f1 04       	cpc	r15, r1
   17650:	09 f0       	breq	.+2      	; 0x17654 <Amigo_Command+0x240>
   17652:	28 c1       	rjmp	.+592    	; 0x178a4 <Amigo_Command+0x490>
    {
        if(op == 0x00 && len == 2)
   17654:	61 11       	cpse	r22, r1
   17656:	2e c0       	rjmp	.+92     	; 0x176b4 <Amigo_Command+0x2a0>
   17658:	02 30       	cpi	r16, 0x02	; 2
   1765a:	11 05       	cpc	r17, r1
   1765c:	09 f0       	breq	.+2      	; 0x17660 <Amigo_Command+0x24c>
   1765e:	b9 c1       	rjmp	.+882    	; 0x179d2 <Amigo_Command+0x5be>
        {
///  Reference: A40

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17660:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17664:	85 ff       	sbrs	r24, 5
   17666:	0a c0       	rjmp	.+20     	; 0x1767c <Amigo_Command+0x268>
                printf("[AMIGO Cold Load Read Command]\n");
   17668:	84 e8       	ldi	r24, 0x84	; 132
   1766a:	9c e2       	ldi	r25, 0x2C	; 44
   1766c:	a0 e0       	ldi	r26, 0x00	; 0
   1766e:	ed b7       	in	r30, 0x3d	; 61
   17670:	fe b7       	in	r31, 0x3e	; 62
   17672:	81 83       	std	Z+1, r24	; 0x01
   17674:	92 83       	std	Z+2, r25	; 0x02
   17676:	a3 83       	std	Z+3, r26	; 0x03
   17678:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
#endif
///TODO we do NOT support multiple units yet
            AMIGOs->unitNO = 0;
   1767c:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   17680:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   17684:	11 82       	std	Z+1, r1	; 0x01
            AMIGOs->dsj = 0;
   17686:	16 82       	std	Z+6, r1	; 0x06
            AMIGOs->Errors = 0;
   17688:	10 86       	std	Z+8, r1	; 0x08
   1768a:	17 82       	std	Z+7, r1	; 0x07
/// Fill in temparary address
            tmp.cyl = 0;
   1768c:	1d 86       	std	Y+13, r1	; 0x0d
            tmp.head = ( (0xff & *ptr) >> 6) & 0x03;
   1768e:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
   17692:	98 2f       	mov	r25, r24
   17694:	92 95       	swap	r25
   17696:	96 95       	lsr	r25
   17698:	96 95       	lsr	r25
   1769a:	93 70       	andi	r25, 0x03	; 3
   1769c:	9e 87       	std	Y+14, r25	; 0x0e
            tmp.sector = 0x3f & *ptr;
   1769e:	8f 73       	andi	r24, 0x3F	; 63
   176a0:	8f 87       	std	Y+15, r24	; 0x0f
            ++ptr;
//update to real address on sucess
            amigo_seek((AMIGOStateType *) &tmp);
   176a2:	ce 01       	movw	r24, r28
   176a4:	0a 96       	adiw	r24, 0x0a	; 10
   176a6:	d1 d9       	rcall	.-3166   	; 0x16a4a <amigo_seek>
            AMIGOs->state = AMIGO_COLD_LOAD_READ;
   176a8:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   176ac:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   176b0:	85 e0       	ldi	r24, 0x05	; 5
   176b2:	19 c1       	rjmp	.+562    	; 0x178e6 <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 5)
   176b4:	62 30       	cpi	r22, 0x02	; 2
   176b6:	09 f0       	breq	.+2      	; 0x176ba <Amigo_Command+0x2a6>
   176b8:	3f c0       	rjmp	.+126    	; 0x17738 <Amigo_Command+0x324>
   176ba:	05 30       	cpi	r16, 0x05	; 5
   176bc:	11 05       	cpc	r17, r1
   176be:	d1 f4       	brne	.+52     	; 0x176f4 <Amigo_Command+0x2e0>
/// @brief
///  Seek 1 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   176c0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   176c4:	85 ff       	sbrs	r24, 5
   176c6:	0a c0       	rjmp	.+20     	; 0x176dc <Amigo_Command+0x2c8>
                printf("[AMIGO Seek len=5]\n");
   176c8:	80 e7       	ldi	r24, 0x70	; 112
   176ca:	9c e2       	ldi	r25, 0x2C	; 44
   176cc:	a0 e0       	ldi	r26, 0x00	; 0
   176ce:	ed b7       	in	r30, 0x3d	; 61
   176d0:	fe b7       	in	r31, 0x3e	; 62
   176d2:	81 83       	std	Z+1, r24	; 0x01
   176d4:	92 83       	std	Z+2, r25	; 0x02
   176d6:	a3 83       	std	Z+3, r26	; 0x03
   176d8:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   176dc:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
   176e0:	85 de       	rcall	.-758    	; 0x173ec <amigo_check_unit>

/// Fill in temparary address
            tmp.cyl = 0xff & *ptr++;
   176e2:	80 91 ec 1c 	lds	r24, 0x1CEC	; 0x801cec <gpib_iobuff+0x2>
   176e6:	8d 87       	std	Y+13, r24	; 0x0d
            tmp.head = 0xff & *ptr++;
   176e8:	80 91 ed 1c 	lds	r24, 0x1CED	; 0x801ced <gpib_iobuff+0x3>
   176ec:	8e 87       	std	Y+14, r24	; 0x0e
            tmp.sector = 0xff & *ptr++;
   176ee:	80 91 ee 1c 	lds	r24, 0x1CEE	; 0x801cee <gpib_iobuff+0x4>
   176f2:	1d c0       	rjmp	.+58     	; 0x1772e <Amigo_Command+0x31a>
//update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 6)
   176f4:	06 30       	cpi	r16, 0x06	; 6
   176f6:	11 05       	cpc	r17, r1
   176f8:	09 f0       	breq	.+2      	; 0x176fc <Amigo_Command+0x2e8>
   176fa:	6b c1       	rjmp	.+726    	; 0x179d2 <Amigo_Command+0x5be>
/// @brief
///  Seek 2 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   176fc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17700:	85 ff       	sbrs	r24, 5
   17702:	0a c0       	rjmp	.+20     	; 0x17718 <Amigo_Command+0x304>
                printf("[AMIGO Seek len=6]\n");
   17704:	8c e5       	ldi	r24, 0x5C	; 92
   17706:	9c e2       	ldi	r25, 0x2C	; 44
   17708:	a0 e0       	ldi	r26, 0x00	; 0
   1770a:	ed b7       	in	r30, 0x3d	; 61
   1770c:	fe b7       	in	r31, 0x3e	; 62
   1770e:	81 83       	std	Z+1, r24	; 0x01
   17710:	92 83       	std	Z+2, r25	; 0x02
   17712:	a3 83       	std	Z+3, r26	; 0x03
   17714:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17718:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
   1771c:	67 de       	rcall	.-818    	; 0x173ec <amigo_check_unit>
/// Fill in temparary address
            tmp.cyl = (0xff & *ptr++) << 8;       // MSB
            tmp.cyl |= (0xff & *ptr++);           // LSB
   1771e:	80 91 ed 1c 	lds	r24, 0x1CED	; 0x801ced <gpib_iobuff+0x3>
   17722:	8d 87       	std	Y+13, r24	; 0x0d
            tmp.head = 0xff & *ptr++;
   17724:	80 91 ee 1c 	lds	r24, 0x1CEE	; 0x801cee <gpib_iobuff+0x4>
   17728:	8e 87       	std	Y+14, r24	; 0x0e
            tmp.sector = 0xff & *ptr++;
   1772a:	80 91 ef 1c 	lds	r24, 0x1CEF	; 0x801cef <gpib_iobuff+0x5>
//update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
   1772e:	8f 87       	std	Y+15, r24	; 0x0f
   17730:	ce 01       	movw	r24, r28
   17732:	0a 96       	adiw	r24, 0x0a	; 10
   17734:	8a d9       	rcall	.-3308   	; 0x16a4a <amigo_seek>
   17736:	d8 c0       	rjmp	.+432    	; 0x178e8 <Amigo_Command+0x4d4>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x03 && len == 2)
   17738:	63 30       	cpi	r22, 0x03	; 3
   1773a:	e9 f4       	brne	.+58     	; 0x17776 <Amigo_Command+0x362>
   1773c:	02 30       	cpi	r16, 0x02	; 2
   1773e:	11 05       	cpc	r17, r1
   17740:	09 f0       	breq	.+2      	; 0x17744 <Amigo_Command+0x330>
   17742:	47 c1       	rjmp	.+654    	; 0x179d2 <Amigo_Command+0x5be>
        {
///  Reference: A15
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17744:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17748:	85 ff       	sbrs	r24, 5
   1774a:	0a c0       	rjmp	.+20     	; 0x17760 <Amigo_Command+0x34c>
                printf("[AMIGO Request Status Buffered Command]\n");
   1774c:	83 e3       	ldi	r24, 0x33	; 51
   1774e:	9c e2       	ldi	r25, 0x2C	; 44
   17750:	a0 e0       	ldi	r26, 0x00	; 0
   17752:	ed b7       	in	r30, 0x3d	; 61
   17754:	fe b7       	in	r31, 0x3e	; 62
   17756:	81 83       	std	Z+1, r24	; 0x01
   17758:	92 83       	std	Z+2, r25	; 0x02
   1775a:	a3 83       	std	Z+3, r26	; 0x03
   1775c:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17760:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
            amigo_request_status();
   17764:	43 de       	rcall	.-890    	; 0x173ec <amigo_check_unit>
   17766:	3d d8       	rcall	.-3974   	; 0x167e2 <amigo_request_status>
            AMIGOs->state = AMIGO_REQUEST_STATUS_BUFFERED;
   17768:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   1776c:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   17770:	83 e0       	ldi	r24, 0x03	; 3
   17772:	80 83       	st	Z, r24
   17774:	29 c1       	rjmp	.+594    	; 0x179c8 <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
        else if(op == 0x05 && len == 2)
   17776:	65 30       	cpi	r22, 0x05	; 5
   17778:	d9 f4       	brne	.+54     	; 0x177b0 <Amigo_Command+0x39c>
   1777a:	02 30       	cpi	r16, 0x02	; 2
   1777c:	11 05       	cpc	r17, r1
   1777e:	09 f0       	breq	.+2      	; 0x17782 <Amigo_Command+0x36e>
   17780:	28 c1       	rjmp	.+592    	; 0x179d2 <Amigo_Command+0x5be>
        {
///  Reference: A35
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17782:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17786:	85 ff       	sbrs	r24, 5
   17788:	0a c0       	rjmp	.+20     	; 0x1779e <Amigo_Command+0x38a>
                printf("[AMIGO Read Unbuffered Command]\n");
   1778a:	82 e1       	ldi	r24, 0x12	; 18
   1778c:	9c e2       	ldi	r25, 0x2C	; 44
   1778e:	a0 e0       	ldi	r26, 0x00	; 0
   17790:	ed b7       	in	r30, 0x3d	; 61
   17792:	fe b7       	in	r31, 0x3e	; 62
   17794:	81 83       	std	Z+1, r24	; 0x01
   17796:	92 83       	std	Z+2, r25	; 0x02
   17798:	a3 83       	std	Z+3, r26	; 0x03
   1779a:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1779e:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
   177a2:	24 de       	rcall	.-952    	; 0x173ec <amigo_check_unit>
            AMIGOs->state = AMIGO_READ_UNBUFFERED;
   177a4:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   177a8:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   177ac:	86 e0       	ldi	r24, 0x06	; 6
   177ae:	e7 c0       	rjmp	.+462    	; 0x1797e <Amigo_Command+0x56a>
            return(status & ERROR_MASK);
#else
			return( amigo_buffered_read_command() );
#endif
        }
        else if(op == 0x07 && len == 4)
   177b0:	67 30       	cpi	r22, 0x07	; 7
   177b2:	f9 f4       	brne	.+62     	; 0x177f2 <Amigo_Command+0x3de>
   177b4:	04 30       	cpi	r16, 0x04	; 4
   177b6:	11 05       	cpc	r17, r1
   177b8:	09 f0       	breq	.+2      	; 0x177bc <Amigo_Command+0x3a8>
   177ba:	0b c1       	rjmp	.+534    	; 0x179d2 <Amigo_Command+0x5be>
        {
            uint16_t sectors;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   177bc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   177c0:	85 ff       	sbrs	r24, 5
   177c2:	0a c0       	rjmp	.+20     	; 0x177d8 <Amigo_Command+0x3c4>
                printf("[AMIGO Verify]\n");
   177c4:	82 e0       	ldi	r24, 0x02	; 2
   177c6:	9c e2       	ldi	r25, 0x2C	; 44
   177c8:	a0 e0       	ldi	r26, 0x00	; 0
   177ca:	ed b7       	in	r30, 0x3d	; 61
   177cc:	fe b7       	in	r31, 0x3e	; 62
   177ce:	81 83       	std	Z+1, r24	; 0x01
   177d0:	92 83       	std	Z+2, r25	; 0x02
   177d2:	a3 83       	std	Z+3, r26	; 0x03
   177d4:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   177d8:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
   177dc:	07 de       	rcall	.-1010   	; 0x173ec <amigo_check_unit>
            sectors = (0xff & *ptr++) << 8;
   177de:	80 91 ec 1c 	lds	r24, 0x1CEC	; 0x801cec <gpib_iobuff+0x2>
   177e2:	90 e0       	ldi	r25, 0x00	; 0
   177e4:	98 2f       	mov	r25, r24
            sectors |= (0xff & *ptr++);
            return ( amigo_verify( sectors) );
   177e6:	88 27       	eor	r24, r24
   177e8:	20 91 ed 1c 	lds	r18, 0x1CED	; 0x801ced <gpib_iobuff+0x3>
   177ec:	82 2b       	or	r24, r18
   177ee:	58 d9       	rcall	.-3408   	; 0x16aa0 <amigo_verify>
   177f0:	f3 c0       	rjmp	.+486    	; 0x179d8 <Amigo_Command+0x5c4>
        }
        else if(op == 0x08 && len == 2)
   177f2:	68 30       	cpi	r22, 0x08	; 8
   177f4:	d9 f4       	brne	.+54     	; 0x1782c <Amigo_Command+0x418>
   177f6:	02 30       	cpi	r16, 0x02	; 2
   177f8:	11 05       	cpc	r17, r1
   177fa:	09 f0       	breq	.+2      	; 0x177fe <Amigo_Command+0x3ea>
   177fc:	ea c0       	rjmp	.+468    	; 0x179d2 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   177fe:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17802:	85 ff       	sbrs	r24, 5
   17804:	0a c0       	rjmp	.+20     	; 0x1781a <Amigo_Command+0x406>
                printf("[AMIGO Write Unbuffered Command]\n");
   17806:	80 ee       	ldi	r24, 0xE0	; 224
   17808:	9b e2       	ldi	r25, 0x2B	; 43
   1780a:	a0 e0       	ldi	r26, 0x00	; 0
   1780c:	ed b7       	in	r30, 0x3d	; 61
   1780e:	fe b7       	in	r31, 0x3e	; 62
   17810:	81 83       	std	Z+1, r24	; 0x01
   17812:	92 83       	std	Z+2, r25	; 0x02
   17814:	a3 83       	std	Z+3, r26	; 0x03
   17816:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1781a:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
   1781e:	e6 dd       	rcall	.-1076   	; 0x173ec <amigo_check_unit>
            AMIGOs->state = AMIGO_WRITE_UNBUFFERED;
   17820:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   17824:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   17828:	88 e0       	ldi	r24, 0x08	; 8
   1782a:	5d c0       	rjmp	.+186    	; 0x178e6 <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if((op == 0x0B || op == 0x2b) && len == 2)
   1782c:	86 2f       	mov	r24, r22
   1782e:	8f 7d       	andi	r24, 0xDF	; 223
   17830:	8b 30       	cpi	r24, 0x0B	; 11
   17832:	d9 f4       	brne	.+54     	; 0x1786a <Amigo_Command+0x456>
   17834:	02 30       	cpi	r16, 0x02	; 2
   17836:	11 05       	cpc	r17, r1
   17838:	09 f0       	breq	.+2      	; 0x1783c <Amigo_Command+0x428>
   1783a:	cb c0       	rjmp	.+406    	; 0x179d2 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1783c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17840:	85 ff       	sbrs	r24, 5
   17842:	0a c0       	rjmp	.+20     	; 0x17858 <Amigo_Command+0x444>
                printf("[AMIGO Initialize Command]\n");
   17844:	84 ec       	ldi	r24, 0xC4	; 196
   17846:	9b e2       	ldi	r25, 0x2B	; 43
   17848:	a0 e0       	ldi	r26, 0x00	; 0
   1784a:	ed b7       	in	r30, 0x3d	; 61
   1784c:	fe b7       	in	r31, 0x3e	; 62
   1784e:	81 83       	std	Z+1, r24	; 0x01
   17850:	92 83       	std	Z+2, r25	; 0x02
   17852:	a3 83       	std	Z+3, r26	; 0x03
   17854:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17858:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
   1785c:	c7 dd       	rcall	.-1138   	; 0x173ec <amigo_check_unit>
            AMIGOs->state = AMIGO_INITIALIZE;
   1785e:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   17862:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   17866:	8a e0       	ldi	r24, 0x0A	; 10
   17868:	3e c0       	rjmp	.+124    	; 0x178e6 <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x14 && len == 2)
   1786a:	64 31       	cpi	r22, 0x14	; 20
   1786c:	09 f0       	breq	.+2      	; 0x17870 <Amigo_Command+0x45c>
   1786e:	b1 c0       	rjmp	.+354    	; 0x179d2 <Amigo_Command+0x5be>
   17870:	02 30       	cpi	r16, 0x02	; 2
   17872:	11 05       	cpc	r17, r1
   17874:	09 f0       	breq	.+2      	; 0x17878 <Amigo_Command+0x464>
   17876:	ad c0       	rjmp	.+346    	; 0x179d2 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17878:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1787c:	85 ff       	sbrs	r24, 5
   1787e:	0a c0       	rjmp	.+20     	; 0x17894 <Amigo_Command+0x480>
                printf("[AMIGO Request Logical Address Command]\n");
   17880:	8b e9       	ldi	r24, 0x9B	; 155
   17882:	9b e2       	ldi	r25, 0x2B	; 43
   17884:	a0 e0       	ldi	r26, 0x00	; 0
   17886:	ed b7       	in	r30, 0x3d	; 61
   17888:	fe b7       	in	r31, 0x3e	; 62
   1788a:	81 83       	std	Z+1, r24	; 0x01
   1788c:	92 83       	std	Z+2, r25	; 0x02
   1788e:	a3 83       	std	Z+3, r26	; 0x03
   17890:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
#endif
            amigo_request_logical_address();
   17894:	0e 94 e3 b3 	call	0x167c6	; 0x167c6 <amigo_request_logical_address>
            AMIGOs->state = AMIGO_REQUEST_LOGICAL_ADDRESS;
   17898:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   1789c:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   178a0:	84 e0       	ldi	r24, 0x04	; 4
   178a2:	21 c0       	rjmp	.+66     	; 0x178e6 <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x69)
   178a4:	f9 e6       	ldi	r31, 0x69	; 105
   178a6:	ef 16       	cp	r14, r31
   178a8:	f1 04       	cpc	r15, r1
   178aa:	39 f5       	brne	.+78     	; 0x178fa <Amigo_Command+0x4e6>
    {
        if(op == 0x08 && len == 2)
   178ac:	68 30       	cpi	r22, 0x08	; 8
   178ae:	09 f0       	breq	.+2      	; 0x178b2 <Amigo_Command+0x49e>
   178b0:	90 c0       	rjmp	.+288    	; 0x179d2 <Amigo_Command+0x5be>
   178b2:	02 30       	cpi	r16, 0x02	; 2
   178b4:	11 05       	cpc	r17, r1
   178b6:	09 f0       	breq	.+2      	; 0x178ba <Amigo_Command+0x4a6>
   178b8:	8c c0       	rjmp	.+280    	; 0x179d2 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   178ba:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   178be:	85 ff       	sbrs	r24, 5
   178c0:	0a c0       	rjmp	.+20     	; 0x178d6 <Amigo_Command+0x4c2>
                printf("[AMIGO Write Buffered Command]\n");
   178c2:	8b e7       	ldi	r24, 0x7B	; 123
   178c4:	9b e2       	ldi	r25, 0x2B	; 43
   178c6:	a0 e0       	ldi	r26, 0x00	; 0
   178c8:	ed b7       	in	r30, 0x3d	; 61
   178ca:	fe b7       	in	r31, 0x3e	; 62
   178cc:	81 83       	std	Z+1, r24	; 0x01
   178ce:	92 83       	std	Z+2, r25	; 0x02
   178d0:	a3 83       	std	Z+3, r26	; 0x03
   178d2:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   178d6:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
   178da:	88 dd       	rcall	.-1264   	; 0x173ec <amigo_check_unit>
            AMIGOs->state = AMIGO_WRITE_BUFFERED;
   178dc:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   178e0:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   178e4:	89 e0       	ldi	r24, 0x09	; 9
   178e6:	80 83       	st	Z, r24
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
   178e8:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   178ec:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   178f0:	81 81       	ldd	r24, Z+1	; 0x01
   178f2:	90 e0       	ldi	r25, 0x00	; 0
   178f4:	0e 94 6d 86 	call	0x10cda	; 0x10cda <gpib_enable_PPR>
   178f8:	67 c0       	rjmp	.+206    	; 0x179c8 <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x6A)
   178fa:	fa e6       	ldi	r31, 0x6A	; 106
   178fc:	ef 16       	cp	r14, r31
   178fe:	f1 04       	cpc	r15, r1
   17900:	09 f0       	breq	.+2      	; 0x17904 <Amigo_Command+0x4f0>
   17902:	40 c0       	rjmp	.+128    	; 0x17984 <Amigo_Command+0x570>
    {
        if(op == 0x08 && len == 2)
   17904:	68 30       	cpi	r22, 0x08	; 8
   17906:	f1 f4       	brne	.+60     	; 0x17944 <Amigo_Command+0x530>
   17908:	02 30       	cpi	r16, 0x02	; 2
   1790a:	11 05       	cpc	r17, r1
   1790c:	09 f0       	breq	.+2      	; 0x17910 <Amigo_Command+0x4fc>
   1790e:	61 c0       	rjmp	.+194    	; 0x179d2 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17910:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17914:	85 ff       	sbrs	r24, 5
   17916:	0a c0       	rjmp	.+20     	; 0x1792c <Amigo_Command+0x518>
                printf("[AMIGO Request Status Unbuffered Command]\n");
   17918:	80 e5       	ldi	r24, 0x50	; 80
   1791a:	9b e2       	ldi	r25, 0x2B	; 43
   1791c:	a0 e0       	ldi	r26, 0x00	; 0
   1791e:	ed b7       	in	r30, 0x3d	; 61
   17920:	fe b7       	in	r31, 0x3e	; 62
   17922:	81 83       	std	Z+1, r24	; 0x01
   17924:	92 83       	std	Z+2, r25	; 0x02
   17926:	a3 83       	std	Z+3, r26	; 0x03
   17928:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1792c:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
   17930:	5d dd       	rcall	.-1350   	; 0x173ec <amigo_check_unit>
            AMIGOs->state = AMIGO_REQUEST_STATUS_UNBUFFERED;
   17932:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   17936:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   1793a:	82 e0       	ldi	r24, 0x02	; 2
   1793c:	80 83       	st	Z, r24
            amigo_request_status();
   1793e:	0e 94 f1 b3 	call	0x167e2	; 0x167e2 <amigo_request_status>
   17942:	42 c0       	rjmp	.+132    	; 0x179c8 <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
        if(op == 0x05 && len == 2)
   17944:	65 30       	cpi	r22, 0x05	; 5
   17946:	09 f0       	breq	.+2      	; 0x1794a <Amigo_Command+0x536>
   17948:	44 c0       	rjmp	.+136    	; 0x179d2 <Amigo_Command+0x5be>
   1794a:	02 30       	cpi	r16, 0x02	; 2
   1794c:	11 05       	cpc	r17, r1
   1794e:	09 f0       	breq	.+2      	; 0x17952 <Amigo_Command+0x53e>
   17950:	40 c0       	rjmp	.+128    	; 0x179d2 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17952:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17956:	85 ff       	sbrs	r24, 5
   17958:	0a c0       	rjmp	.+20     	; 0x1796e <Amigo_Command+0x55a>
                printf("[AMIGO Read Buffered Command]\n");
   1795a:	81 e3       	ldi	r24, 0x31	; 49
   1795c:	9b e2       	ldi	r25, 0x2B	; 43
   1795e:	a0 e0       	ldi	r26, 0x00	; 0
   17960:	ed b7       	in	r30, 0x3d	; 61
   17962:	fe b7       	in	r31, 0x3e	; 62
   17964:	81 83       	std	Z+1, r24	; 0x01
   17966:	92 83       	std	Z+2, r25	; 0x02
   17968:	a3 83       	std	Z+3, r26	; 0x03
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1796a:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   1796e:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_READ_BUFFERED;
   17972:	3c dd       	rcall	.-1416   	; 0x173ec <amigo_check_unit>
   17974:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   17978:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   1797c:	87 e0       	ldi	r24, 0x07	; 7

#if 0
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
#else
			return( amigo_buffered_read_command() );
   1797e:	80 83       	st	Z, r24
   17980:	c5 d9       	rcall	.-3190   	; 0x16d0c <amigo_buffered_read_command>
   17982:	2a c0       	rjmp	.+84     	; 0x179d8 <Amigo_Command+0x5c4>
#endif
        }
    }
    else if (secondary == 0x6C)
   17984:	fc e6       	ldi	r31, 0x6C	; 108
   17986:	ef 16       	cp	r14, r31
   17988:	f1 04       	cpc	r15, r1
   1798a:	d1 f4       	brne	.+52     	; 0x179c0 <Amigo_Command+0x5ac>
    {
        if(op == 0x18 && len == 5)
   1798c:	68 31       	cpi	r22, 0x18	; 24
   1798e:	09 f5       	brne	.+66     	; 0x179d2 <Amigo_Command+0x5be>
   17990:	05 30       	cpi	r16, 0x05	; 5
   17992:	11 05       	cpc	r17, r1
   17994:	f1 f4       	brne	.+60     	; 0x179d2 <Amigo_Command+0x5be>
        {
///  Reference: A48 ..  A50

            uint8_t db;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17996:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1799a:	85 ff       	sbrs	r24, 5
   1799c:	0a c0       	rjmp	.+20     	; 0x179b2 <Amigo_Command+0x59e>
                printf("[AMIGO Format]\n");
   1799e:	81 e2       	ldi	r24, 0x21	; 33
   179a0:	9b e2       	ldi	r25, 0x2B	; 43
   179a2:	a0 e0       	ldi	r26, 0x00	; 0
   179a4:	ed b7       	in	r30, 0x3d	; 61
   179a6:	fe b7       	in	r31, 0x3e	; 62
   179a8:	81 83       	std	Z+1, r24	; 0x01
   179aa:	92 83       	std	Z+2, r25	; 0x02
   179ac:	a3 83       	std	Z+3, r26	; 0x03
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   179ae:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   179b2:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
            ++ptr;                                // override not used
            ++ptr;                                // interleave not used
            db = 0xff & *ptr++;
            amigo_format(db);
   179b6:	1a dd       	rcall	.-1484   	; 0x173ec <amigo_check_unit>
   179b8:	80 91 ee 1c 	lds	r24, 0x1CEE	; 0x801cee <gpib_iobuff+0x4>
   179bc:	0f d9       	rcall	.-3554   	; 0x16bdc <amigo_format>
   179be:	04 c0       	rjmp	.+8      	; 0x179c8 <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x70)                   // HP-300 Clear
   179c0:	f0 e7       	ldi	r31, 0x70	; 112
   179c2:	ef 16       	cp	r14, r31
   179c4:	f1 04       	cpc	r15, r1
    {
///  Reference: A23
        ++ptr;                                    // Dummy byte
        return(status & ERROR_MASK);
   179c6:	29 f4       	brne	.+10     	; 0x179d2 <Amigo_Command+0x5be>
   179c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
   179ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
   179cc:	88 27       	eor	r24, r24
   179ce:	90 7d       	andi	r25, 0xD0	; 208
    }
    return ( amigo_todo_op(secondary, op, len) );
   179d0:	03 c0       	rjmp	.+6      	; 0x179d8 <Amigo_Command+0x5c4>
   179d2:	a8 01       	movw	r20, r16
   179d4:	8e 2d       	mov	r24, r14
   179d6:	ed db       	rcall	.-2086   	; 0x171b2 <amigo_todo_op>
}
   179d8:	6c 96       	adiw	r28, 0x1c	; 28
   179da:	e6 e0       	ldi	r30, 0x06	; 6
   179dc:	0c 94 35 e7 	jmp	0x1ce6a	; 0x1ce6a <__epilogue_restores__+0x18>

000179e0 <Amigo_Execute>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)

int Amigo_Execute( int secondary )
{
   179e0:	a9 e0       	ldi	r26, 0x09	; 9
   179e2:	b0 e0       	ldi	r27, 0x00	; 0
   179e4:	e6 ef       	ldi	r30, 0xF6	; 246
   179e6:	fc eb       	ldi	r31, 0xBC	; 188
   179e8:	0c 94 1d e7 	jmp	0x1ce3a	; 0x1ce3a <__prologue_saves__+0x20>
   179ec:	ec 01       	movw	r28, r24
#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   179ee:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   179f2:	85 ff       	sbrs	r24, 5
   179f4:	16 c0       	rjmp	.+44     	; 0x17a22 <Amigo_Execute+0x42>
        printf("[AMIGO Execute(%02XH): listen:%02XH, talk:%02XH]\n",
   179f6:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   179fa:	90 e0       	ldi	r25, 0x00	; 0
   179fc:	ed b7       	in	r30, 0x3d	; 61
   179fe:	fe b7       	in	r31, 0x3e	; 62
   17a00:	91 87       	std	Z+9, r25	; 0x09
   17a02:	80 87       	std	Z+8, r24	; 0x08
   17a04:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17a08:	90 e0       	ldi	r25, 0x00	; 0
   17a0a:	97 83       	std	Z+7, r25	; 0x07
   17a0c:	86 83       	std	Z+6, r24	; 0x06
   17a0e:	d5 83       	std	Z+5, r29	; 0x05
   17a10:	c4 83       	std	Z+4, r28	; 0x04
   17a12:	8f ee       	ldi	r24, 0xEF	; 239
   17a14:	9a e2       	ldi	r25, 0x2A	; 42
   17a16:	a0 e0       	ldi	r26, 0x00	; 0
   17a18:	81 83       	std	Z+1, r24	; 0x01
   17a1a:	92 83       	std	Z+2, r25	; 0x02
   17a1c:	a3 83       	std	Z+3, r26	; 0x03
   17a1e:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
            secondary, listening, talking);
#endif

    if(talking == UNT)
   17a22:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   17a26:	8f 35       	cpi	r24, 0x5F	; 95
   17a28:	09 f4       	brne	.+2      	; 0x17a2c <Amigo_Execute+0x4c>
   17a2a:	ad c0       	rjmp	.+346    	; 0x17b86 <Amigo_Execute+0x1a6>
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   17a2c:	90 e0       	ldi	r25, 0x00	; 0
   17a2e:	0e 94 e5 8c 	call	0x119ca	; 0x119ca <AMIGO_is_MTA>
   17a32:	89 2b       	or	r24, r25
   17a34:	39 f0       	breq	.+14     	; 0x17a44 <Amigo_Execute+0x64>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
   17a36:	ce 01       	movw	r24, r28
   17a38:	87 7f       	andi	r24, 0xF7	; 247
   17a3a:	80 36       	cpi	r24, 0x60	; 96
   17a3c:	91 05       	cpc	r25, r1
   17a3e:	09 f0       	breq	.+2      	; 0x17a42 <Amigo_Execute+0x62>
   17a40:	a2 c0       	rjmp	.+324    	; 0x17b86 <Amigo_Execute+0x1a6>
   17a42:	08 c0       	rjmp	.+16     	; 0x17a54 <Amigo_Execute+0x74>
#endif

    if(talking == UNT)
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   17a44:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17a48:	90 e0       	ldi	r25, 0x00	; 0
   17a4a:	0e 94 d3 8c 	call	0x119a6	; 0x119a6 <AMIGO_is_MLA>
   17a4e:	89 2b       	or	r24, r25
   17a50:	91 f7       	brne	.-28     	; 0x17a36 <Amigo_Execute+0x56>
   17a52:	99 c0       	rjmp	.+306    	; 0x17b86 <Amigo_Execute+0x1a6>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17a54:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   17a58:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   17a5c:	81 81       	ldd	r24, Z+1	; 0x01
   17a5e:	90 e0       	ldi	r25, 0x00	; 0
   17a60:	0e 94 a3 86 	call	0x10d46	; 0x10d46 <gpib_disable_PPR>

    if(secondary == 0x60)
   17a64:	c0 36       	cpi	r28, 0x60	; 96
   17a66:	d1 05       	cpc	r29, r1
   17a68:	09 f0       	breq	.+2      	; 0x17a6c <Amigo_Execute+0x8c>
   17a6a:	4e c0       	rjmp	.+156    	; 0x17b08 <Amigo_Execute+0x128>
    {
        switch(AMIGOs->state)
   17a6c:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   17a70:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   17a74:	e0 81       	ld	r30, Z
   17a76:	8e 2f       	mov	r24, r30
   17a78:	90 e0       	ldi	r25, 0x00	; 0
   17a7a:	8b 30       	cpi	r24, 0x0B	; 11
   17a7c:	91 05       	cpc	r25, r1
   17a7e:	08 f0       	brcs	.+2      	; 0x17a82 <Amigo_Execute+0xa2>
   17a80:	41 c0       	rjmp	.+130    	; 0x17b04 <Amigo_Execute+0x124>
   17a82:	fc 01       	movw	r30, r24
   17a84:	ea 52       	subi	r30, 0x2A	; 42
   17a86:	ff 4f       	sbci	r31, 0xFF	; 255
   17a88:	0c 94 de e6 	jmp	0x1cdbc	; 0x1cdbc <__tablejump2__>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_COLD_LOAD_READ:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17a8c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17a90:	85 ff       	sbrs	r24, 5
   17a92:	18 c0       	rjmp	.+48     	; 0x17ac4 <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Cold Load Read]\n");
   17a94:	8f ec       	ldi	r24, 0xCF	; 207
   17a96:	9a e2       	ldi	r25, 0x2A	; 42
   17a98:	0d c0       	rjmp	.+26     	; 0x17ab4 <Amigo_Execute+0xd4>
#endif
                return ( amigo_buffered_read_execute() );
            case AMIGO_READ_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17a9a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17a9e:	85 ff       	sbrs	r24, 5
   17aa0:	11 c0       	rjmp	.+34     	; 0x17ac4 <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Read Unbuffered]\n");
   17aa2:	8e ea       	ldi	r24, 0xAE	; 174
   17aa4:	9a e2       	ldi	r25, 0x2A	; 42
   17aa6:	06 c0       	rjmp	.+12     	; 0x17ab4 <Amigo_Execute+0xd4>
#endif
                return ( amigo_buffered_read_execute() );
            case AMIGO_READ_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17aa8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17aac:	85 ff       	sbrs	r24, 5
   17aae:	0a c0       	rjmp	.+20     	; 0x17ac4 <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Read Buffered]\n");
   17ab0:	8f e8       	ldi	r24, 0x8F	; 143
   17ab2:	9a e2       	ldi	r25, 0x2A	; 42
   17ab4:	a0 e0       	ldi	r26, 0x00	; 0
   17ab6:	ed b7       	in	r30, 0x3d	; 61
   17ab8:	fe b7       	in	r31, 0x3e	; 62
   17aba:	81 83       	std	Z+1, r24	; 0x01
   17abc:	92 83       	std	Z+2, r25	; 0x02
   17abe:	a3 83       	std	Z+3, r26	; 0x03
   17ac0:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
#endif
                return ( amigo_buffered_read_execute() );
   17ac4:	b0 d9       	rcall	.-3232   	; 0x16e26 <amigo_buffered_read_execute>
   17ac6:	61 c0       	rjmp	.+194    	; 0x17b8a <Amigo_Execute+0x1aa>
            case AMIGO_WRITE_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17ac8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17acc:	85 ff       	sbrs	r24, 5
   17ace:	18 c0       	rjmp	.+48     	; 0x17b00 <Amigo_Execute+0x120>
                    printf("[AMIGO Execute Write Unbuffered]\n");
   17ad0:	8d e6       	ldi	r24, 0x6D	; 109
   17ad2:	9a e2       	ldi	r25, 0x2A	; 42
   17ad4:	0d c0       	rjmp	.+26     	; 0x17af0 <Amigo_Execute+0x110>
#endif
                return ( amigo_buffered_write() );
            case AMIGO_INITIALIZE:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17ad6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17ada:	85 ff       	sbrs	r24, 5
   17adc:	11 c0       	rjmp	.+34     	; 0x17b00 <Amigo_Execute+0x120>
                    printf("[AMIGO Execute Initialize]\n");
   17ade:	81 e5       	ldi	r24, 0x51	; 81
   17ae0:	9a e2       	ldi	r25, 0x2A	; 42
   17ae2:	06 c0       	rjmp	.+12     	; 0x17af0 <Amigo_Execute+0x110>
#endif
                return ( amigo_buffered_write() );
            case AMIGO_WRITE_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17ae4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17ae8:	85 ff       	sbrs	r24, 5
   17aea:	0a c0       	rjmp	.+20     	; 0x17b00 <Amigo_Execute+0x120>
                    printf("[AMIGO Execute Write Buffered]\n");
   17aec:	81 e3       	ldi	r24, 0x31	; 49
   17aee:	9a e2       	ldi	r25, 0x2A	; 42
   17af0:	a0 e0       	ldi	r26, 0x00	; 0
   17af2:	ed b7       	in	r30, 0x3d	; 61
   17af4:	fe b7       	in	r31, 0x3e	; 62
   17af6:	81 83       	std	Z+1, r24	; 0x01
   17af8:	92 83       	std	Z+2, r25	; 0x02
   17afa:	a3 83       	std	Z+3, r26	; 0x03
   17afc:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
#endif
                return ( amigo_buffered_write() );
   17b00:	ed d9       	rcall	.-3110   	; 0x16edc <amigo_buffered_write>
   17b02:	43 c0       	rjmp	.+134    	; 0x17b8a <Amigo_Execute+0x1aa>
            default:
                return ( amigo_todo(secondary) );
   17b04:	80 e6       	ldi	r24, 0x60	; 96
   17b06:	3d c0       	rjmp	.+122    	; 0x17b82 <Amigo_Execute+0x1a2>
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    if(secondary == 0x68)
   17b08:	c8 36       	cpi	r28, 0x68	; 104
   17b0a:	d1 05       	cpc	r29, r1
   17b0c:	e1 f5       	brne	.+120    	; 0x17b86 <Amigo_Execute+0x1a6>
    {
        switch(AMIGOs->state)
   17b0e:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   17b12:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   17b16:	80 81       	ld	r24, Z
   17b18:	82 30       	cpi	r24, 0x02	; 2
   17b1a:	81 f0       	breq	.+32     	; 0x17b3c <Amigo_Execute+0x15c>
   17b1c:	18 f4       	brcc	.+6      	; 0x17b24 <Amigo_Execute+0x144>
   17b1e:	88 23       	and	r24, r24
   17b20:	91 f1       	breq	.+100    	; 0x17b86 <Amigo_Execute+0x1a6>
   17b22:	2e c0       	rjmp	.+92     	; 0x17b80 <Amigo_Execute+0x1a0>
   17b24:	83 30       	cpi	r24, 0x03	; 3
   17b26:	19 f0       	breq	.+6      	; 0x17b2e <Amigo_Execute+0x14e>
   17b28:	84 30       	cpi	r24, 0x04	; 4
   17b2a:	c9 f0       	breq	.+50     	; 0x17b5e <Amigo_Execute+0x17e>
   17b2c:	29 c0       	rjmp	.+82     	; 0x17b80 <Amigo_Execute+0x1a0>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_REQUEST_STATUS_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17b2e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17b32:	85 ff       	sbrs	r24, 5
   17b34:	11 c0       	rjmp	.+34     	; 0x17b58 <Amigo_Execute+0x178>
                    printf("[AMIGO Execute Request Status Buffered]\n");
   17b36:	88 e0       	ldi	r24, 0x08	; 8
   17b38:	9a e2       	ldi	r25, 0x2A	; 42
   17b3a:	06 c0       	rjmp	.+12     	; 0x17b48 <Amigo_Execute+0x168>
#endif
                return ( amigo_send_status() );
            case AMIGO_REQUEST_STATUS_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17b3c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17b40:	85 ff       	sbrs	r24, 5
   17b42:	0a c0       	rjmp	.+20     	; 0x17b58 <Amigo_Execute+0x178>
                    printf("[AMIGO Exicute Request Status Unbuffered]\n");
   17b44:	8d ed       	ldi	r24, 0xDD	; 221
   17b46:	99 e2       	ldi	r25, 0x29	; 41
   17b48:	a0 e0       	ldi	r26, 0x00	; 0
   17b4a:	ed b7       	in	r30, 0x3d	; 61
   17b4c:	fe b7       	in	r31, 0x3e	; 62
   17b4e:	81 83       	std	Z+1, r24	; 0x01
   17b50:	92 83       	std	Z+2, r25	; 0x02
   17b52:	a3 83       	std	Z+3, r26	; 0x03
   17b54:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
#endif
                return ( amigo_send_status() );
   17b58:	0e 94 a3 b4 	call	0x16946	; 0x16946 <amigo_send_status>
   17b5c:	16 c0       	rjmp	.+44     	; 0x17b8a <Amigo_Execute+0x1aa>
            case AMIGO_REQUEST_LOGICAL_ADDRESS:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17b5e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17b62:	85 ff       	sbrs	r24, 5
   17b64:	0a c0       	rjmp	.+20     	; 0x17b7a <Amigo_Execute+0x19a>
                    printf("[AMIGO Execute Request Logical Address]\n");
   17b66:	84 eb       	ldi	r24, 0xB4	; 180
   17b68:	99 e2       	ldi	r25, 0x29	; 41
   17b6a:	a0 e0       	ldi	r26, 0x00	; 0
   17b6c:	ed b7       	in	r30, 0x3d	; 61
   17b6e:	fe b7       	in	r31, 0x3e	; 62
   17b70:	81 83       	std	Z+1, r24	; 0x01
   17b72:	92 83       	std	Z+2, r25	; 0x02
   17b74:	a3 83       	std	Z+3, r26	; 0x03
   17b76:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
#endif
                return ( amigo_send_logical_address() );
   17b7a:	0e 94 4e b4 	call	0x1689c	; 0x1689c <amigo_send_logical_address>
   17b7e:	05 c0       	rjmp	.+10     	; 0x17b8a <Amigo_Execute+0x1aa>
            default:
                return ( amigo_todo(secondary) );
   17b80:	88 e6       	ldi	r24, 0x68	; 104
   17b82:	b0 db       	rcall	.-2208   	; 0x172e4 <amigo_todo>
   17b84:	02 c0       	rjmp	.+4      	; 0x17b8a <Amigo_Execute+0x1aa>
    if(secondary == 0x68)
    {
        switch(AMIGOs->state)
        {
            case AMIGO_IDLE:
                return(0);
   17b86:	80 e0       	ldi	r24, 0x00	; 0
   17b88:	90 e0       	ldi	r25, 0x00	; 0
                return ( amigo_todo(secondary) );
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    return(0);
}
   17b8a:	cd b7       	in	r28, 0x3d	; 61
   17b8c:	de b7       	in	r29, 0x3e	; 62
   17b8e:	29 96       	adiw	r28, 0x09	; 9
   17b90:	e2 e0       	ldi	r30, 0x02	; 2
   17b92:	0c 94 39 e7 	jmp	0x1ce72	; 0x1ce72 <__epilogue_restores__+0x20>

00017b96 <AMIGO_COMMANDS>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{
   17b96:	cf 93       	push	r28
   17b98:	df 93       	push	r29
   17b9a:	c8 2f       	mov	r28, r24

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   17b9c:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   17ba0:	90 e0       	ldi	r25, 0x00	; 0
   17ba2:	0e 94 e5 8c 	call	0x119ca	; 0x119ca <AMIGO_is_MTA>
   17ba6:	89 2b       	or	r24, r25
   17ba8:	51 f0       	breq	.+20     	; 0x17bbe <AMIGO_COMMANDS+0x28>
    {

        if(talking == UNT && AMIGO_is_MLA(listening))
   17baa:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   17bae:	8f 35       	cpi	r24, 0x5F	; 95
   17bb0:	71 f4       	brne	.+28     	; 0x17bce <AMIGO_COMMANDS+0x38>
   17bb2:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17bb6:	90 e0       	ldi	r25, 0x00	; 0
   17bb8:	0e 94 d3 8c 	call	0x119a6	; 0x119a6 <AMIGO_is_MLA>
   17bbc:	08 c0       	rjmp	.+16     	; 0x17bce <AMIGO_COMMANDS+0x38>
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   17bbe:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17bc2:	90 e0       	ldi	r25, 0x00	; 0
   17bc4:	0e 94 d3 8c 	call	0x119a6	; 0x119a6 <AMIGO_is_MLA>
   17bc8:	89 2b       	or	r24, r25
   17bca:	79 f7       	brne	.-34     	; 0x17baa <AMIGO_COMMANDS+0x14>
   17bcc:	76 c0       	rjmp	.+236    	; 0x17cba <AMIGO_COMMANDS+0x124>

        if(talking == UNT && AMIGO_is_MLA(listening))
        {
// printf("AMIGO COMMANDS %02XH NO TALK ADDRESS!\n", ch);
        }
        if(listening == 0 && AMIGO_is_MTA(talking))
   17bce:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17bd2:	81 11       	cpse	r24, r1
   17bd4:	05 c0       	rjmp	.+10     	; 0x17be0 <AMIGO_COMMANDS+0x4a>
   17bd6:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   17bda:	90 e0       	ldi	r25, 0x00	; 0
   17bdc:	0e 94 e5 8c 	call	0x119ca	; 0x119ca <AMIGO_is_MTA>
        {
// printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   17be0:	c0 36       	cpi	r28, 0x60	; 96
   17be2:	99 f4       	brne	.+38     	; 0x17c0a <AMIGO_COMMANDS+0x74>
   17be4:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   17be8:	90 e0       	ldi	r25, 0x00	; 0
   17bea:	0e 94 e5 8c 	call	0x119ca	; 0x119ca <AMIGO_is_MTA>
   17bee:	89 2b       	or	r24, r25
   17bf0:	19 f0       	breq	.+6      	; 0x17bf8 <AMIGO_COMMANDS+0x62>
        {
            return (Amigo_Execute(ch) );
   17bf2:	80 e6       	ldi	r24, 0x60	; 96
   17bf4:	90 e0       	ldi	r25, 0x00	; 0
   17bf6:	14 c0       	rjmp	.+40     	; 0x17c20 <AMIGO_COMMANDS+0x8a>
        if(listening == 0 && AMIGO_is_MTA(talking))
        {
// printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   17bf8:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17bfc:	90 e0       	ldi	r25, 0x00	; 0
   17bfe:	0e 94 d3 8c 	call	0x119a6	; 0x119a6 <AMIGO_is_MLA>
   17c02:	89 2b       	or	r24, r25
   17c04:	09 f4       	brne	.+2      	; 0x17c08 <AMIGO_COMMANDS+0x72>
   17c06:	59 c0       	rjmp	.+178    	; 0x17cba <AMIGO_COMMANDS+0x124>
   17c08:	f4 cf       	rjmp	.-24     	; 0x17bf2 <AMIGO_COMMANDS+0x5c>
        {
            return (Amigo_Execute(ch) );
        }

        if(ch == 0x68 && AMIGO_is_MTA(talking) )
   17c0a:	c8 36       	cpi	r28, 0x68	; 104
   17c0c:	c1 f4       	brne	.+48     	; 0x17c3e <AMIGO_COMMANDS+0xa8>
   17c0e:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   17c12:	90 e0       	ldi	r25, 0x00	; 0
   17c14:	0e 94 e5 8c 	call	0x119ca	; 0x119ca <AMIGO_is_MTA>
   17c18:	89 2b       	or	r24, r25
   17c1a:	21 f0       	breq	.+8      	; 0x17c24 <AMIGO_COMMANDS+0x8e>
        {
            return (Amigo_Execute(ch) );
   17c1c:	88 e6       	ldi	r24, 0x68	; 104
   17c1e:	90 e0       	ldi	r25, 0x00	; 0
   17c20:	df de       	rcall	.-578    	; 0x179e0 <Amigo_Execute>
   17c22:	0b c0       	rjmp	.+22     	; 0x17c3a <AMIGO_COMMANDS+0xa4>
        }

        if(ch == 0x68 && AMIGO_is_MLA(listening) )// Single byte command
   17c24:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17c28:	90 e0       	ldi	r25, 0x00	; 0
   17c2a:	0e 94 d3 8c 	call	0x119a6	; 0x119a6 <AMIGO_is_MLA>
   17c2e:	89 2b       	or	r24, r25
   17c30:	09 f4       	brne	.+2      	; 0x17c34 <AMIGO_COMMANDS+0x9e>
   17c32:	43 c0       	rjmp	.+134    	; 0x17cba <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17c34:	88 e6       	ldi	r24, 0x68	; 104
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) )// Single byte command
        {
            return (Amigo_Command(ch) );
   17c36:	90 e0       	ldi	r25, 0x00	; 0
   17c38:	ed db       	rcall	.-2086   	; 0x17414 <Amigo_Command>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
            return( amigo_cmd_dsj() );
   17c3a:	ec 01       	movw	r28, r24
   17c3c:	40 c0       	rjmp	.+128    	; 0x17cbe <AMIGO_COMMANDS+0x128>

        if(ch == 0x68 && AMIGO_is_MLA(listening) )// Single byte command
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x69 && AMIGO_is_MLA(listening) )// Single byte command
   17c3e:	c9 36       	cpi	r28, 0x69	; 105
   17c40:	51 f4       	brne	.+20     	; 0x17c56 <AMIGO_COMMANDS+0xc0>
   17c42:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17c46:	90 e0       	ldi	r25, 0x00	; 0
   17c48:	0e 94 d3 8c 	call	0x119a6	; 0x119a6 <AMIGO_is_MLA>
   17c4c:	89 2b       	or	r24, r25
   17c4e:	a9 f1       	breq	.+106    	; 0x17cba <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17c50:	89 e6       	ldi	r24, 0x69	; 105
   17c52:	90 e0       	ldi	r25, 0x00	; 0
   17c54:	f1 cf       	rjmp	.-30     	; 0x17c38 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6a && AMIGO_is_MLA(listening) )// Single byte command
   17c56:	ca 36       	cpi	r28, 0x6A	; 106
   17c58:	51 f4       	brne	.+20     	; 0x17c6e <AMIGO_COMMANDS+0xd8>
   17c5a:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17c5e:	90 e0       	ldi	r25, 0x00	; 0
   17c60:	0e 94 d3 8c 	call	0x119a6	; 0x119a6 <AMIGO_is_MLA>
   17c64:	89 2b       	or	r24, r25
   17c66:	49 f1       	breq	.+82     	; 0x17cba <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17c68:	8a e6       	ldi	r24, 0x6A	; 106
   17c6a:	90 e0       	ldi	r25, 0x00	; 0
   17c6c:	e5 cf       	rjmp	.-54     	; 0x17c38 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) )// Single byte command
   17c6e:	cc 36       	cpi	r28, 0x6C	; 108
   17c70:	51 f4       	brne	.+20     	; 0x17c86 <AMIGO_COMMANDS+0xf0>
   17c72:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17c76:	90 e0       	ldi	r25, 0x00	; 0
   17c78:	0e 94 d3 8c 	call	0x119a6	; 0x119a6 <AMIGO_is_MLA>
   17c7c:	89 2b       	or	r24, r25
   17c7e:	e9 f0       	breq	.+58     	; 0x17cba <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17c80:	8c e6       	ldi	r24, 0x6C	; 108
   17c82:	90 e0       	ldi	r25, 0x00	; 0
   17c84:	d9 cf       	rjmp	.-78     	; 0x17c38 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
   17c86:	c0 37       	cpi	r28, 0x70	; 112
   17c88:	c1 f4       	brne	.+48     	; 0x17cba <AMIGO_COMMANDS+0x124>
   17c8a:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   17c8e:	90 e0       	ldi	r25, 0x00	; 0
   17c90:	0e 94 e5 8c 	call	0x119ca	; 0x119ca <AMIGO_is_MTA>
   17c94:	ec 01       	movw	r28, r24
   17c96:	89 2b       	or	r24, r25
   17c98:	51 f0       	breq	.+20     	; 0x17cae <AMIGO_COMMANDS+0x118>
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17c9a:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   17c9e:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   17ca2:	81 81       	ldd	r24, Z+1	; 0x01
   17ca4:	90 e0       	ldi	r25, 0x00	; 0
   17ca6:	0e 94 a3 86 	call	0x10d46	; 0x10d46 <gpib_disable_PPR>
            return( amigo_cmd_dsj() );
   17caa:	ff d9       	rcall	.-3074   	; 0x170aa <amigo_cmd_dsj>
   17cac:	c6 cf       	rjmp	.-116    	; 0x17c3a <AMIGO_COMMANDS+0xa4>
        }
        if(ch == 0x7e && ch == 0x7f)
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x70 && AMIGO_is_MLA(listening))
   17cae:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17cb2:	90 e0       	ldi	r25, 0x00	; 0
   17cb4:	0e 94 d3 8c 	call	0x119a6	; 0x119a6 <AMIGO_is_MLA>
   17cb8:	02 c0       	rjmp	.+4      	; 0x17cbe <AMIGO_COMMANDS+0x128>
        {
// NOP
        }
    }
    return(0);
   17cba:	c0 e0       	ldi	r28, 0x00	; 0
   17cbc:	d0 e0       	ldi	r29, 0x00	; 0
}
   17cbe:	ce 01       	movw	r24, r28
   17cc0:	df 91       	pop	r29
   17cc2:	cf 91       	pop	r28
   17cc4:	08 95       	ret

00017cc6 <printer_init>:
/// - Only called once after power on by main().
/// @return  void

void printer_init()
{
    plot.error = 0;
   17cc6:	ed e9       	ldi	r30, 0x9D	; 157
   17cc8:	f9 e1       	ldi	r31, 0x19	; 25
   17cca:	10 86       	std	Z+8, r1	; 0x08
    plot.count = 0;
   17ccc:	10 82       	st	Z, r1
   17cce:	11 82       	std	Z+1, r1	; 0x01
   17cd0:	12 82       	std	Z+2, r1	; 0x02
   17cd2:	13 82       	std	Z+3, r1	; 0x03
    plot.ind = 0;
   17cd4:	15 82       	std	Z+5, r1	; 0x05
   17cd6:	14 82       	std	Z+4, r1	; 0x04
    plot.fp = NULL;
   17cd8:	12 86       	std	Z+10, r1	; 0x0a
   17cda:	11 86       	std	Z+9, r1	; 0x09
    plot.buf = NULL;
   17cdc:	14 86       	std	Z+12, r1	; 0x0c
   17cde:	13 86       	std	Z+11, r1	; 0x0b
   17ce0:	08 95       	ret

00017ce2 <receive_plot_flush>:
/// @see posix.h
/// @see printer_buffer()
/// @return  file handle

int receive_plot_flush()
{
   17ce2:	cf 93       	push	r28
   17ce4:	df 93       	push	r29
   17ce6:	ad b7       	in	r26, 0x3d	; 61
   17ce8:	be b7       	in	r27, 0x3e	; 62
   17cea:	17 97       	sbiw	r26, 0x07	; 7
   17cec:	0f b6       	in	r0, 0x3f	; 63
   17cee:	f8 94       	cli
   17cf0:	be bf       	out	0x3e, r27	; 62
   17cf2:	0f be       	out	0x3f, r0	; 63
   17cf4:	ad bf       	out	0x3d, r26	; 61
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
   17cf6:	20 91 a6 19 	lds	r18, 0x19A6	; 0x8019a6 <plot+0x9>
   17cfa:	30 91 a7 19 	lds	r19, 0x19A7	; 0x8019a7 <plot+0xa>
   17cfe:	21 15       	cp	r18, r1
   17d00:	31 05       	cpc	r19, r1
   17d02:	09 f4       	brne	.+2      	; 0x17d06 <receive_plot_flush+0x24>
   17d04:	45 c0       	rjmp	.+138    	; 0x17d90 <receive_plot_flush+0xae>
   17d06:	80 91 a1 19 	lds	r24, 0x19A1	; 0x8019a1 <plot+0x4>
   17d0a:	90 91 a2 19 	lds	r25, 0x19A2	; 0x8019a2 <plot+0x5>
   17d0e:	00 97       	sbiw	r24, 0x00	; 0
   17d10:	09 f4       	brne	.+2      	; 0x17d14 <receive_plot_flush+0x32>
   17d12:	40 c0       	rjmp	.+128    	; 0x17d94 <receive_plot_flush+0xb2>
        return(0);

    ret  = fwrite(plot.buf, 1, plot.ind , plot.fp);
   17d14:	ac 01       	movw	r20, r24
   17d16:	61 e0       	ldi	r22, 0x01	; 1
   17d18:	70 e0       	ldi	r23, 0x00	; 0
   17d1a:	80 91 a8 19 	lds	r24, 0x19A8	; 0x8019a8 <plot+0xb>
   17d1e:	90 91 a9 19 	lds	r25, 0x19A9	; 0x8019a9 <plot+0xc>
   17d22:	0e 94 93 7c 	call	0xf926	; 0xf926 <fwrite>
   17d26:	ec 01       	movw	r28, r24
    if(ret != plot.ind)
   17d28:	80 91 a1 19 	lds	r24, 0x19A1	; 0x8019a1 <plot+0x4>
   17d2c:	90 91 a2 19 	lds	r25, 0x19A2	; 0x8019a2 <plot+0x5>
   17d30:	c8 17       	cp	r28, r24
   17d32:	d9 07       	cpc	r29, r25
   17d34:	09 f1       	breq	.+66     	; 0x17d78 <receive_plot_flush+0x96>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   17d36:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17d3a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17d3e:	81 72       	andi	r24, 0x21	; 33
   17d40:	99 27       	eor	r25, r25
   17d42:	89 2b       	or	r24, r25
   17d44:	b1 f0       	breq	.+44     	; 0x17d72 <receive_plot_flush+0x90>
        {
            perror("receive_plot_flush");
   17d46:	85 ed       	ldi	r24, 0xD5	; 213
   17d48:	95 e1       	ldi	r25, 0x15	; 21
   17d4a:	0e 94 9c 78 	call	0xf138	; 0xf138 <perror>
            printf("write failed: wanted %d, got:%d\n", plot.ind, ret);
   17d4e:	ed b7       	in	r30, 0x3d	; 61
   17d50:	fe b7       	in	r31, 0x3e	; 62
   17d52:	d7 83       	std	Z+7, r29	; 0x07
   17d54:	c6 83       	std	Z+6, r28	; 0x06
   17d56:	80 91 a1 19 	lds	r24, 0x19A1	; 0x8019a1 <plot+0x4>
   17d5a:	90 91 a2 19 	lds	r25, 0x19A2	; 0x8019a2 <plot+0x5>
   17d5e:	95 83       	std	Z+5, r25	; 0x05
   17d60:	84 83       	std	Z+4, r24	; 0x04
   17d62:	84 e4       	ldi	r24, 0x44	; 68
   17d64:	92 e3       	ldi	r25, 0x32	; 50
   17d66:	a0 e0       	ldi	r26, 0x00	; 0
   17d68:	81 83       	std	Z+1, r24	; 0x01
   17d6a:	92 83       	std	Z+2, r25	; 0x02
   17d6c:	a3 83       	std	Z+3, r26	; 0x03
   17d6e:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
        }
        return(-1);
   17d72:	8f ef       	ldi	r24, 0xFF	; 255
   17d74:	9f ef       	ldi	r25, 0xFF	; 255
   17d76:	0e c0       	rjmp	.+28     	; 0x17d94 <receive_plot_flush+0xb2>
    }

    fno = fileno( plot.fp );
   17d78:	80 91 a6 19 	lds	r24, 0x19A6	; 0x8019a6 <plot+0x9>
   17d7c:	90 91 a7 19 	lds	r25, 0x19A7	; 0x8019a7 <plot+0xa>
   17d80:	0e 94 e6 76 	call	0xedcc	; 0xedcc <fileno>
    if(fno < 0)
   17d84:	97 fd       	sbrc	r25, 7
   17d86:	f5 cf       	rjmp	.-22     	; 0x17d72 <receive_plot_flush+0x90>
        return(-1);
///@brief sync filesystem after every write
    syncfs( fno );
   17d88:	0e 94 dd 7b 	call	0xf7ba	; 0xf7ba <syncfs>
    return (ret);
   17d8c:	ce 01       	movw	r24, r28
   17d8e:	02 c0       	rjmp	.+4      	; 0x17d94 <receive_plot_flush+0xb2>
{
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
        return(0);
   17d90:	80 e0       	ldi	r24, 0x00	; 0
   17d92:	90 e0       	ldi	r25, 0x00	; 0
    if(fno < 0)
        return(-1);
///@brief sync filesystem after every write
    syncfs( fno );
    return (ret);
}
   17d94:	cd b7       	in	r28, 0x3d	; 61
   17d96:	de b7       	in	r29, 0x3e	; 62
   17d98:	27 96       	adiw	r28, 0x07	; 7
   17d9a:	e2 e0       	ldi	r30, 0x02	; 2
   17d9c:	0c 94 39 e7 	jmp	0x1ce72	; 0x1ce72 <__epilogue_restores__+0x20>

00017da0 <printer_close>:
/// @see posix.h
/// @return  void
/// FYI: for the HP54645D plots end with: pd;pu;pu;sp0;
/// This gets called
void printer_close()
{
   17da0:	ad b7       	in	r26, 0x3d	; 61
   17da2:	be b7       	in	r27, 0x3e	; 62
   17da4:	17 97       	sbiw	r26, 0x07	; 7
   17da6:	0f b6       	in	r0, 0x3f	; 63
   17da8:	f8 94       	cli
   17daa:	be bf       	out	0x3e, r27	; 62
   17dac:	0f be       	out	0x3f, r0	; 63
   17dae:	ad bf       	out	0x3d, r26	; 61
    if( receive_plot_flush() < 0 )
   17db0:	98 df       	rcall	.-208    	; 0x17ce2 <receive_plot_flush>
   17db2:	97 ff       	sbrs	r25, 7
   17db4:	03 c0       	rjmp	.+6      	; 0x17dbc <printer_close+0x1c>
        plot.error = 1;
   17db6:	81 e0       	ldi	r24, 0x01	; 1
   17db8:	80 93 a5 19 	sts	0x19A5, r24	; 0x8019a5 <plot+0x8>

    if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   17dbc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17dc0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17dc4:	81 72       	andi	r24, 0x21	; 33
   17dc6:	99 27       	eor	r25, r25
   17dc8:	89 2b       	or	r24, r25
   17dca:	71 f0       	breq	.+28     	; 0x17de8 <printer_close+0x48>
    {
        if(plot.error)
   17dcc:	80 91 a5 19 	lds	r24, 0x19A5	; 0x8019a5 <plot+0x8>
   17dd0:	88 23       	and	r24, r24
   17dd2:	51 f0       	breq	.+20     	; 0x17de8 <printer_close+0x48>
            printf("ERROR durring write\n");
   17dd4:	83 e7       	ldi	r24, 0x73	; 115
   17dd6:	92 e3       	ldi	r25, 0x32	; 50
   17dd8:	a0 e0       	ldi	r26, 0x00	; 0
   17dda:	ed b7       	in	r30, 0x3d	; 61
   17ddc:	fe b7       	in	r31, 0x3e	; 62
   17dde:	81 83       	std	Z+1, r24	; 0x01
   17de0:	92 83       	std	Z+2, r25	; 0x02
   17de2:	a3 83       	std	Z+3, r26	; 0x03
   17de4:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    }

    if(plot.fp)
   17de8:	80 91 a6 19 	lds	r24, 0x19A6	; 0x8019a6 <plot+0x9>
   17dec:	90 91 a7 19 	lds	r25, 0x19A7	; 0x8019a7 <plot+0xa>
   17df0:	00 97       	sbiw	r24, 0x00	; 0
   17df2:	e1 f0       	breq	.+56     	; 0x17e2c <printer_close+0x8c>
    {
        fclose(plot.fp);
   17df4:	0e 94 15 7d 	call	0xfa2a	; 0xfa2a <fclose>
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17df8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17dfc:	85 ff       	sbrs	r24, 5
   17dfe:	16 c0       	rjmp	.+44     	; 0x17e2c <printer_close+0x8c>
            printf("\nDONE: %08ld\n",plot.count);
   17e00:	80 91 9d 19 	lds	r24, 0x199D	; 0x80199d <plot>
   17e04:	90 91 9e 19 	lds	r25, 0x199E	; 0x80199e <plot+0x1>
   17e08:	a0 91 9f 19 	lds	r26, 0x199F	; 0x80199f <plot+0x2>
   17e0c:	b0 91 a0 19 	lds	r27, 0x19A0	; 0x8019a0 <plot+0x3>
   17e10:	ed b7       	in	r30, 0x3d	; 61
   17e12:	fe b7       	in	r31, 0x3e	; 62
   17e14:	84 83       	std	Z+4, r24	; 0x04
   17e16:	95 83       	std	Z+5, r25	; 0x05
   17e18:	a6 83       	std	Z+6, r26	; 0x06
   17e1a:	b7 83       	std	Z+7, r27	; 0x07
   17e1c:	85 e6       	ldi	r24, 0x65	; 101
   17e1e:	92 e3       	ldi	r25, 0x32	; 50
   17e20:	a0 e0       	ldi	r26, 0x00	; 0
   17e22:	81 83       	std	Z+1, r24	; 0x01
   17e24:	92 83       	std	Z+2, r25	; 0x02
   17e26:	a3 83       	std	Z+3, r26	; 0x03
   17e28:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    }

    if(plot.buf)
   17e2c:	80 91 a8 19 	lds	r24, 0x19A8	; 0x8019a8 <plot+0xb>
   17e30:	90 91 a9 19 	lds	r25, 0x19A9	; 0x8019a9 <plot+0xc>
   17e34:	00 97       	sbiw	r24, 0x00	; 0
   17e36:	11 f0       	breq	.+4      	; 0x17e3c <printer_close+0x9c>
        safefree(plot.buf);
   17e38:	0e 94 24 28 	call	0x5048	; 0x5048 <safefree>
    printer_init();
   17e3c:	44 df       	rcall	.-376    	; 0x17cc6 <printer_init>
}
   17e3e:	ad b7       	in	r26, 0x3d	; 61
   17e40:	be b7       	in	r27, 0x3e	; 62
   17e42:	17 96       	adiw	r26, 0x07	; 7
   17e44:	0f b6       	in	r0, 0x3f	; 63
   17e46:	f8 94       	cli
   17e48:	be bf       	out	0x3e, r27	; 62
   17e4a:	0f be       	out	0x3f, r0	; 63
   17e4c:	ad bf       	out	0x3d, r26	; 61
   17e4e:	08 95       	ret

00017e50 <printer_open>:
/// @see posix.c
/// @see posix.h
/// @return  void

void printer_open(char *name)
{
   17e50:	ad e5       	ldi	r26, 0x5D	; 93
   17e52:	b0 e0       	ldi	r27, 0x00	; 0
   17e54:	ee e2       	ldi	r30, 0x2E	; 46
   17e56:	ff eb       	ldi	r31, 0xBF	; 191
   17e58:	0c 94 19 e7 	jmp	0x1ce32	; 0x1ce32 <__prologue_saves__+0x18>
   17e5c:	8c 01       	movw	r16, r24

    char *ptr;

    if(!name)
   17e5e:	89 2b       	or	r24, r25
   17e60:	09 f0       	breq	.+2      	; 0x17e64 <printer_open+0x14>
   17e62:	4f c0       	rjmp	.+158    	; 0x17f02 <printer_open+0xb2>
        time_t seconds;
        tm_t *tc;
        ts_t ts;
        char fname[64];

        clock_gettime(0, (ts_t *) &ts);
   17e64:	be 01       	movw	r22, r28
   17e66:	6e 5a       	subi	r22, 0xAE	; 174
   17e68:	7f 4f       	sbci	r23, 0xFF	; 255
   17e6a:	80 e0       	ldi	r24, 0x00	; 0
   17e6c:	90 e0       	ldi	r25, 0x00	; 0
   17e6e:	0e 94 ea 33 	call	0x67d4	; 0x67d4 <clock_gettime>
        seconds = ts.tv_sec;
   17e72:	66 96       	adiw	r28, 0x16	; 22
   17e74:	8c ad       	ldd	r24, Y+60	; 0x3c
   17e76:	9d ad       	ldd	r25, Y+61	; 0x3d
   17e78:	ae ad       	ldd	r26, Y+62	; 0x3e
   17e7a:	bf ad       	ldd	r27, Y+63	; 0x3f
   17e7c:	66 97       	sbiw	r28, 0x16	; 22
   17e7e:	6e 96       	adiw	r28, 0x1e	; 30
   17e80:	8c af       	std	Y+60, r24	; 0x3c
   17e82:	9d af       	std	Y+61, r25	; 0x3d
   17e84:	ae af       	std	Y+62, r26	; 0x3e
   17e86:	bf af       	std	Y+63, r27	; 0x3f
   17e88:	6e 97       	sbiw	r28, 0x1e	; 30
        tc = gmtime(&seconds);
   17e8a:	ce 01       	movw	r24, r28
   17e8c:	86 5a       	subi	r24, 0xA6	; 166
   17e8e:	9f 4f       	sbci	r25, 0xFF	; 255
   17e90:	0e 94 d4 37 	call	0x6fa8	; 0x6fa8 <gmtime>
   17e94:	8c 01       	movw	r16, r24
        sprintf(fname,"/plot-%02d%s%04d-%02d%02d%02d.plt",
   17e96:	fc 01       	movw	r30, r24
   17e98:	e6 80       	ldd	r14, Z+6	; 0x06
   17e9a:	f7 80       	ldd	r15, Z+7	; 0x07
   17e9c:	80 85       	ldd	r24, Z+8	; 0x08
   17e9e:	91 85       	ldd	r25, Z+9	; 0x09
   17ea0:	0e 94 b0 36 	call	0x6d60	; 0x6d60 <tm_mon_to_ascii>
   17ea4:	f8 01       	movw	r30, r16
   17ea6:	20 81       	ld	r18, Z
   17ea8:	31 81       	ldd	r19, Z+1	; 0x01
   17eaa:	ed b7       	in	r30, 0x3d	; 61
   17eac:	fe b7       	in	r31, 0x3e	; 62
   17eae:	31 8b       	std	Z+17, r19	; 0x11
   17eb0:	20 8b       	std	Z+16, r18	; 0x10
   17eb2:	f8 01       	movw	r30, r16
   17eb4:	22 81       	ldd	r18, Z+2	; 0x02
   17eb6:	33 81       	ldd	r19, Z+3	; 0x03
   17eb8:	ed b7       	in	r30, 0x3d	; 61
   17eba:	fe b7       	in	r31, 0x3e	; 62
   17ebc:	37 87       	std	Z+15, r19	; 0x0f
   17ebe:	26 87       	std	Z+14, r18	; 0x0e
   17ec0:	f8 01       	movw	r30, r16
   17ec2:	24 81       	ldd	r18, Z+4	; 0x04
   17ec4:	35 81       	ldd	r19, Z+5	; 0x05
   17ec6:	ed b7       	in	r30, 0x3d	; 61
   17ec8:	fe b7       	in	r31, 0x3e	; 62
   17eca:	35 87       	std	Z+13, r19	; 0x0d
   17ecc:	24 87       	std	Z+12, r18	; 0x0c
   17ece:	f8 01       	movw	r30, r16
   17ed0:	22 85       	ldd	r18, Z+10	; 0x0a
   17ed2:	33 85       	ldd	r19, Z+11	; 0x0b
   17ed4:	24 59       	subi	r18, 0x94	; 148
   17ed6:	38 4f       	sbci	r19, 0xF8	; 248
   17ed8:	ed b7       	in	r30, 0x3d	; 61
   17eda:	fe b7       	in	r31, 0x3e	; 62
   17edc:	33 87       	std	Z+11, r19	; 0x0b
   17ede:	22 87       	std	Z+10, r18	; 0x0a
   17ee0:	91 87       	std	Z+9, r25	; 0x09
   17ee2:	80 87       	std	Z+8, r24	; 0x08
   17ee4:	f7 82       	std	Z+7, r15	; 0x07
   17ee6:	e6 82       	std	Z+6, r14	; 0x06
   17ee8:	8a ea       	ldi	r24, 0xAA	; 170
   17eea:	92 e3       	ldi	r25, 0x32	; 50
   17eec:	a0 e0       	ldi	r26, 0x00	; 0
   17eee:	83 83       	std	Z+3, r24	; 0x03
   17ef0:	94 83       	std	Z+4, r25	; 0x04
   17ef2:	a5 83       	std	Z+5, r26	; 0x05
   17ef4:	8e 01       	movw	r16, r28
   17ef6:	0e 5e       	subi	r16, 0xEE	; 238
   17ef8:	1f 4f       	sbci	r17, 0xFF	; 255
   17efa:	12 83       	std	Z+2, r17	; 0x02
   17efc:	01 83       	std	Z+1, r16	; 0x01
   17efe:	0e 94 18 47 	call	0x8e30	; 0x8e30 <sprintf_P>
    else
    {
        ptr = name;
    }

    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17f02:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17f06:	85 ff       	sbrs	r24, 5
   17f08:	0c c0       	rjmp	.+24     	; 0x17f22 <printer_open+0xd2>
        printf("Capturing plot to:%s\n", ptr);
   17f0a:	ed b7       	in	r30, 0x3d	; 61
   17f0c:	fe b7       	in	r31, 0x3e	; 62
   17f0e:	15 83       	std	Z+5, r17	; 0x05
   17f10:	04 83       	std	Z+4, r16	; 0x04
   17f12:	84 e9       	ldi	r24, 0x94	; 148
   17f14:	92 e3       	ldi	r25, 0x32	; 50
   17f16:	a0 e0       	ldi	r26, 0x00	; 0
   17f18:	81 83       	std	Z+1, r24	; 0x01
   17f1a:	92 83       	std	Z+2, r25	; 0x02
   17f1c:	a3 83       	std	Z+3, r26	; 0x03
   17f1e:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>

    plot.fp = fopen(ptr,"wb");
   17f22:	6c e0       	ldi	r22, 0x0C	; 12
   17f24:	79 e0       	ldi	r23, 0x09	; 9
   17f26:	c8 01       	movw	r24, r16
   17f28:	0e 94 6b 7e 	call	0xfcd6	; 0xfcd6 <fopen>
   17f2c:	90 93 a7 19 	sts	0x19A7, r25	; 0x8019a7 <plot+0xa>
   17f30:	80 93 a6 19 	sts	0x19A6, r24	; 0x8019a6 <plot+0x9>
    if(plot.fp == NULL)
   17f34:	89 2b       	or	r24, r25
   17f36:	b9 f4       	brne	.+46     	; 0x17f66 <printer_open+0x116>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   17f38:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17f3c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17f40:	81 72       	andi	r24, 0x21	; 33
   17f42:	99 27       	eor	r25, r25
   17f44:	89 2b       	or	r24, r25
   17f46:	11 f1       	breq	.+68     	; 0x17f8c <printer_open+0x13c>
        {
            perror("open failed");
   17f48:	8a e9       	ldi	r24, 0x9A	; 154
   17f4a:	9d e0       	ldi	r25, 0x0D	; 13
   17f4c:	0e 94 9c 78 	call	0xf138	; 0xf138 <perror>
            printf("exiting...\n");
   17f50:	88 e8       	ldi	r24, 0x88	; 136
   17f52:	92 e3       	ldi	r25, 0x32	; 50
   17f54:	a0 e0       	ldi	r26, 0x00	; 0
   17f56:	ed b7       	in	r30, 0x3d	; 61
   17f58:	fe b7       	in	r31, 0x3e	; 62
   17f5a:	81 83       	std	Z+1, r24	; 0x01
   17f5c:	92 83       	std	Z+2, r25	; 0x02
   17f5e:	a3 83       	std	Z+3, r26	; 0x03
   17f60:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   17f64:	13 c0       	rjmp	.+38     	; 0x17f8c <printer_open+0x13c>
        }
        return;
    }

    plot.buf = calloc(512+1,1);
   17f66:	61 e0       	ldi	r22, 0x01	; 1
   17f68:	70 e0       	ldi	r23, 0x00	; 0
   17f6a:	81 e0       	ldi	r24, 0x01	; 1
   17f6c:	92 e0       	ldi	r25, 0x02	; 2
   17f6e:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <safecalloc>
   17f72:	90 93 a9 19 	sts	0x19A9, r25	; 0x8019a9 <plot+0xc>
   17f76:	80 93 a8 19 	sts	0x19A8, r24	; 0x8019a8 <plot+0xb>
    if(plot.buf == NULL)
   17f7a:	89 2b       	or	r24, r25
   17f7c:	09 f4       	brne	.+2      	; 0x17f80 <printer_open+0x130>
        printer_close();
   17f7e:	10 df       	rcall	.-480    	; 0x17da0 <printer_close>
    plot.size = 512;
   17f80:	80 e0       	ldi	r24, 0x00	; 0
   17f82:	92 e0       	ldi	r25, 0x02	; 2
   17f84:	90 93 a4 19 	sts	0x19A4, r25	; 0x8019a4 <plot+0x7>
   17f88:	80 93 a3 19 	sts	0x19A3, r24	; 0x8019a3 <plot+0x6>
}
   17f8c:	c3 5a       	subi	r28, 0xA3	; 163
   17f8e:	df 4f       	sbci	r29, 0xFF	; 255
   17f90:	e6 e0       	ldi	r30, 0x06	; 6
   17f92:	0c 94 35 e7 	jmp	0x1ce6a	; 0x1ce6a <__epilogue_restores__+0x18>

00017f96 <printer_buffer>:
///
/// @see posix.c
/// @see posix.h
/// @return  void
void printer_buffer( uint16_t val )
{
   17f96:	cf 93       	push	r28
   17f98:	df 93       	push	r29
   17f9a:	ad b7       	in	r26, 0x3d	; 61
   17f9c:	be b7       	in	r27, 0x3e	; 62
   17f9e:	17 97       	sbiw	r26, 0x07	; 7
   17fa0:	0f b6       	in	r0, 0x3f	; 63
   17fa2:	f8 94       	cli
   17fa4:	be bf       	out	0x3e, r27	; 62
   17fa6:	0f be       	out	0x3f, r0	; 63
   17fa8:	ad bf       	out	0x3d, r26	; 61
   17faa:	ec 01       	movw	r28, r24

    uint16_t ch;

    if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   17fac:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17fb0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17fb4:	81 72       	andi	r24, 0x21	; 33
   17fb6:	99 27       	eor	r25, r25
   17fb8:	89 2b       	or	r24, r25
   17fba:	c1 f0       	breq	.+48     	; 0x17fec <printer_buffer+0x56>
    {
        if( ( plot.count & 255L ) == 0)
   17fbc:	80 91 9d 19 	lds	r24, 0x199D	; 0x80199d <plot>
   17fc0:	30 91 9e 19 	lds	r19, 0x199E	; 0x80199e <plot+0x1>
   17fc4:	20 91 9f 19 	lds	r18, 0x199F	; 0x80199f <plot+0x2>
   17fc8:	90 91 a0 19 	lds	r25, 0x19A0	; 0x8019a0 <plot+0x3>
   17fcc:	81 11       	cpse	r24, r1
   17fce:	0e c0       	rjmp	.+28     	; 0x17fec <printer_buffer+0x56>
            printf("%08ld\r",plot.count);
   17fd0:	ed b7       	in	r30, 0x3d	; 61
   17fd2:	fe b7       	in	r31, 0x3e	; 62
   17fd4:	84 83       	std	Z+4, r24	; 0x04
   17fd6:	35 83       	std	Z+5, r19	; 0x05
   17fd8:	26 83       	std	Z+6, r18	; 0x06
   17fda:	97 83       	std	Z+7, r25	; 0x07
   17fdc:	8d e3       	ldi	r24, 0x3D	; 61
   17fde:	92 e3       	ldi	r25, 0x32	; 50
   17fe0:	a0 e0       	ldi	r26, 0x00	; 0
   17fe2:	81 83       	std	Z+1, r24	; 0x01
   17fe4:	92 83       	std	Z+2, r25	; 0x02
   17fe6:	a3 83       	std	Z+3, r26	; 0x03
   17fe8:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    }

    ch = val & 0xff;
    if(val & (0xff00 & ~REN_FLAG))
   17fec:	ce 01       	movw	r24, r28
   17fee:	88 27       	eor	r24, r24
   17ff0:	97 7f       	andi	r25, 0xF7	; 247
   17ff2:	89 2b       	or	r24, r25
   17ff4:	41 f0       	breq	.+16     	; 0x18006 <printer_buffer+0x70>
    {
        if( receive_plot_flush() )
   17ff6:	75 de       	rcall	.-790    	; 0x17ce2 <receive_plot_flush>
   17ff8:	89 2b       	or	r24, r25
   17ffa:	09 f4       	brne	.+2      	; 0x17ffe <printer_buffer+0x68>
   17ffc:	3f c0       	rjmp	.+126    	; 0x1807c <printer_buffer+0xe6>
            plot.error = 1;
   17ffe:	81 e0       	ldi	r24, 0x01	; 1
   18000:	80 93 a5 19 	sts	0x19A5, r24	; 0x8019a5 <plot+0x8>
   18004:	3b c0       	rjmp	.+118    	; 0x1807c <printer_buffer+0xe6>
//plot.count += strlen(ptr);
    }
    else
    {
        ch  = val & 0xff;
        plot.buf[plot.ind++] = ch;
   18006:	20 91 a8 19 	lds	r18, 0x19A8	; 0x8019a8 <plot+0xb>
   1800a:	30 91 a9 19 	lds	r19, 0x19A9	; 0x8019a9 <plot+0xc>
   1800e:	80 91 a1 19 	lds	r24, 0x19A1	; 0x8019a1 <plot+0x4>
   18012:	90 91 a2 19 	lds	r25, 0x19A2	; 0x8019a2 <plot+0x5>
   18016:	ac 01       	movw	r20, r24
   18018:	4f 5f       	subi	r20, 0xFF	; 255
   1801a:	5f 4f       	sbci	r21, 0xFF	; 255
   1801c:	50 93 a2 19 	sts	0x19A2, r21	; 0x8019a2 <plot+0x5>
   18020:	40 93 a1 19 	sts	0x19A1, r20	; 0x8019a1 <plot+0x4>
   18024:	f9 01       	movw	r30, r18
   18026:	e8 0f       	add	r30, r24
   18028:	f9 1f       	adc	r31, r25
   1802a:	c0 83       	st	Z, r28
        plot.count++;
   1802c:	80 91 9d 19 	lds	r24, 0x199D	; 0x80199d <plot>
   18030:	90 91 9e 19 	lds	r25, 0x199E	; 0x80199e <plot+0x1>
   18034:	a0 91 9f 19 	lds	r26, 0x199F	; 0x80199f <plot+0x2>
   18038:	b0 91 a0 19 	lds	r27, 0x19A0	; 0x8019a0 <plot+0x3>
   1803c:	01 96       	adiw	r24, 0x01	; 1
   1803e:	a1 1d       	adc	r26, r1
   18040:	b1 1d       	adc	r27, r1
   18042:	80 93 9d 19 	sts	0x199D, r24	; 0x80199d <plot>
   18046:	90 93 9e 19 	sts	0x199E, r25	; 0x80199e <plot+0x1>
   1804a:	a0 93 9f 19 	sts	0x199F, r26	; 0x80199f <plot+0x2>
   1804e:	b0 93 a0 19 	sts	0x19A0, r27	; 0x8019a0 <plot+0x3>

        if(plot.ind >= plot.size)
   18052:	20 91 a1 19 	lds	r18, 0x19A1	; 0x8019a1 <plot+0x4>
   18056:	30 91 a2 19 	lds	r19, 0x19A2	; 0x8019a2 <plot+0x5>
   1805a:	80 91 a3 19 	lds	r24, 0x19A3	; 0x8019a3 <plot+0x6>
   1805e:	90 91 a4 19 	lds	r25, 0x19A4	; 0x8019a4 <plot+0x7>
   18062:	28 17       	cp	r18, r24
   18064:	39 07       	cpc	r19, r25
        {
            if( receive_plot_flush() < 0 )
   18066:	54 f0       	brlt	.+20     	; 0x1807c <printer_buffer+0xe6>
   18068:	3c de       	rcall	.-904    	; 0x17ce2 <receive_plot_flush>
   1806a:	97 ff       	sbrs	r25, 7
   1806c:	03 c0       	rjmp	.+6      	; 0x18074 <printer_buffer+0xde>
                plot.error = 1;
   1806e:	81 e0       	ldi	r24, 0x01	; 1
   18070:	80 93 a5 19 	sts	0x19A5, r24	; 0x8019a5 <plot+0x8>
            plot.ind  = 0;
   18074:	10 92 a2 19 	sts	0x19A2, r1	; 0x8019a2 <plot+0x5>
   18078:	10 92 a1 19 	sts	0x19A1, r1	; 0x8019a1 <plot+0x4>
        }
    }
}
   1807c:	cd b7       	in	r28, 0x3d	; 61
   1807e:	de b7       	in	r29, 0x3e	; 62
   18080:	27 96       	adiw	r28, 0x07	; 7
   18082:	e2 e0       	ldi	r30, 0x02	; 2
   18084:	0c 94 39 e7 	jmp	0x1ce72	; 0x1ce72 <__epilogue_restores__+0x20>

00018088 <PRINTER_COMMANDS>:
///
/// @todo  Fully emulated plotter response.
/// @return  0

int PRINTER_COMMANDS(uint8_t ch)
{
   18088:	cf 93       	push	r28
   1808a:	00 d0       	rcall	.+0      	; 0x1808c <PRINTER_COMMANDS+0x4>
   1808c:	00 d0       	rcall	.+0      	; 0x1808e <PRINTER_COMMANDS+0x6>
   1808e:	1f 92       	push	r1
   18090:	c8 2f       	mov	r28, r24

// We could, for example, use secondaries to set file names, etc
// We don not use them yet
    if(PRINTER_is_MLA(listening))
   18092:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   18096:	90 e0       	ldi	r25, 0x00	; 0
   18098:	0e 94 09 8d 	call	0x11a12	; 0x11a12 <PRINTER_is_MLA>
   1809c:	89 2b       	or	r24, r25
   1809e:	69 f0       	breq	.+26     	; 0x180ba <PRINTER_COMMANDS+0x32>
    {
#if SDEBUG
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   180a0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   180a4:	85 ff       	sbrs	r24, 5
   180a6:	22 c0       	rjmp	.+68     	; 0x180ec <PRINTER_COMMANDS+0x64>
            printf("[SC PRINTER Listen: %02XH]\n",  0xff & ch );
   180a8:	8c 2f       	mov	r24, r28
   180aa:	90 e0       	ldi	r25, 0x00	; 0
   180ac:	ed b7       	in	r30, 0x3d	; 61
   180ae:	fe b7       	in	r31, 0x3e	; 62
   180b0:	95 83       	std	Z+5, r25	; 0x05
   180b2:	84 83       	std	Z+4, r24	; 0x04
   180b4:	81 e2       	ldi	r24, 0x21	; 33
   180b6:	92 e3       	ldi	r25, 0x32	; 50
   180b8:	13 c0       	rjmp	.+38     	; 0x180e0 <PRINTER_COMMANDS+0x58>
#endif
        return(0);
    }

    if(PRINTER_is_MTA(talking))
   180ba:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   180be:	90 e0       	ldi	r25, 0x00	; 0
   180c0:	0e 94 1b 8d 	call	0x11a36	; 0x11a36 <PRINTER_is_MTA>
   180c4:	89 2b       	or	r24, r25
   180c6:	91 f0       	breq	.+36     	; 0x180ec <PRINTER_COMMANDS+0x64>
    {
#if SDEBUG
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   180c8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   180cc:	85 ff       	sbrs	r24, 5
   180ce:	0e c0       	rjmp	.+28     	; 0x180ec <PRINTER_COMMANDS+0x64>
            printf("[SC PRINTER Talk: %02XH]\n",  0xff & ch );
   180d0:	8c 2f       	mov	r24, r28
   180d2:	90 e0       	ldi	r25, 0x00	; 0
   180d4:	ed b7       	in	r30, 0x3d	; 61
   180d6:	fe b7       	in	r31, 0x3e	; 62
   180d8:	95 83       	std	Z+5, r25	; 0x05
   180da:	84 83       	std	Z+4, r24	; 0x04
   180dc:	87 e0       	ldi	r24, 0x07	; 7
   180de:	92 e3       	ldi	r25, 0x32	; 50
   180e0:	a0 e0       	ldi	r26, 0x00	; 0
   180e2:	81 83       	std	Z+1, r24	; 0x01
   180e4:	92 83       	std	Z+2, r25	; 0x02
   180e6:	a3 83       	std	Z+3, r26	; 0x03
   180e8:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
#endif
        return(0);
    }
    return(0);
}
   180ec:	80 e0       	ldi	r24, 0x00	; 0
   180ee:	90 e0       	ldi	r25, 0x00	; 0
   180f0:	0f 90       	pop	r0
   180f2:	0f 90       	pop	r0
   180f4:	0f 90       	pop	r0
   180f6:	0f 90       	pop	r0
   180f8:	0f 90       	pop	r0
   180fa:	cf 91       	pop	r28
   180fc:	08 95       	ret

000180fe <V2B_MSB>:
///@param index: offset into byte array
///@param size: number of bytes to process
///@param val: Value to convert
///@return void
void V2B_MSB(uint8_t *B, int index, int size, uint32_t val)
{
   180fe:	0f 93       	push	r16
   18100:	1f 93       	push	r17
   18102:	da 01       	movw	r26, r20
   18104:	11 97       	sbiw	r26, 0x01	; 1
    int i;
    for(i=size-1;i>=0;--i)
   18106:	b7 fd       	sbrc	r27, 7
   18108:	0b c0       	rjmp	.+22     	; 0x18120 <V2B_MSB+0x22>
    {
        B[index+i] = val & 0xff;
   1810a:	fd 01       	movw	r30, r26
   1810c:	e6 0f       	add	r30, r22
   1810e:	f7 1f       	adc	r31, r23
   18110:	e8 0f       	add	r30, r24
   18112:	f9 1f       	adc	r31, r25
   18114:	00 83       	st	Z, r16
        val >>= 8;
   18116:	01 2f       	mov	r16, r17
   18118:	12 2f       	mov	r17, r18
   1811a:	23 2f       	mov	r18, r19
   1811c:	33 27       	eor	r19, r19
   1811e:	f2 cf       	rjmp	.-28     	; 0x18104 <V2B_MSB+0x6>
    }
}
   18120:	1f 91       	pop	r17
   18122:	0f 91       	pop	r16
   18124:	08 95       	ret

00018126 <V2B_LSB>:
///@param index: offset into byte array
///@param size: number of bytes to process
///@param val: Value to convert
///@return void
void V2B_LSB(uint8_t *B, int index, int size, uint32_t val)
{
   18126:	0f 93       	push	r16
   18128:	1f 93       	push	r17
   1812a:	fc 01       	movw	r30, r24
   1812c:	e6 0f       	add	r30, r22
   1812e:	f7 1f       	adc	r31, r23
   18130:	bf 01       	movw	r22, r30
    int i;
    for(i=0;i<size;++i)
   18132:	cf 01       	movw	r24, r30
   18134:	86 1b       	sub	r24, r22
   18136:	97 0b       	sbc	r25, r23
   18138:	84 17       	cp	r24, r20
   1813a:	95 07       	cpc	r25, r21
   1813c:	34 f4       	brge	.+12     	; 0x1814a <V2B_LSB+0x24>
    {
        B[index+i] = val & 0xff;
   1813e:	01 93       	st	Z+, r16
        val >>= 8;
   18140:	01 2f       	mov	r16, r17
   18142:	12 2f       	mov	r17, r18
   18144:	23 2f       	mov	r18, r19
   18146:	33 27       	eor	r19, r19
   18148:	f4 cf       	rjmp	.-24     	; 0x18132 <V2B_LSB+0xc>
    }
}
   1814a:	1f 91       	pop	r17
   1814c:	0f 91       	pop	r16
   1814e:	08 95       	ret

00018150 <B2V_MSB>:
///@param B: byte array
///@param index: offset into byte array
///@param size: number of bytes to process
///@return value
uint32_t B2V_MSB(uint8_t *B, int index, int size)
{
   18150:	cf 92       	push	r12
   18152:	df 92       	push	r13
   18154:	ef 92       	push	r14
   18156:	ff 92       	push	r15
   18158:	fc 01       	movw	r30, r24
   1815a:	e6 0f       	add	r30, r22
   1815c:	f7 1f       	adc	r31, r23
    int i;
    uint32_t val = 0;
   1815e:	60 e0       	ldi	r22, 0x00	; 0
   18160:	70 e0       	ldi	r23, 0x00	; 0
   18162:	cb 01       	movw	r24, r22
   18164:	df 01       	movw	r26, r30

    for(i=0;i<size;++i)
   18166:	9f 01       	movw	r18, r30
   18168:	2a 1b       	sub	r18, r26
   1816a:	3b 0b       	sbc	r19, r27
   1816c:	24 17       	cp	r18, r20
   1816e:	35 07       	cpc	r19, r21
   18170:	4c f4       	brge	.+18     	; 0x18184 <B2V_MSB+0x34>
    {
        val <<= 8;
   18172:	cc 24       	eor	r12, r12
   18174:	d6 2e       	mov	r13, r22
   18176:	e7 2e       	mov	r14, r23
   18178:	f8 2e       	mov	r15, r24
        val |= (uint8_t) (B[i+index] & 0xff);
   1817a:	21 91       	ld	r18, Z+
   1817c:	c7 01       	movw	r24, r14
   1817e:	b6 01       	movw	r22, r12
   18180:	62 2b       	or	r22, r18
   18182:	f1 cf       	rjmp	.-30     	; 0x18166 <B2V_MSB+0x16>
    }
    return(val);
}
   18184:	ff 90       	pop	r15
   18186:	ef 90       	pop	r14
   18188:	df 90       	pop	r13
   1818a:	cf 90       	pop	r12
   1818c:	08 95       	ret

0001818e <B2V_LSB>:
///@param B: byte array
///@param index: offset into byte array
///@param size: number of bytes to process
///@return value
uint32_t B2V_LSB(uint8_t *B, int index, int size)
{
   1818e:	cf 92       	push	r12
   18190:	df 92       	push	r13
   18192:	ef 92       	push	r14
   18194:	ff 92       	push	r15
   18196:	9c 01       	movw	r18, r24
   18198:	db 01       	movw	r26, r22
    int i;
    uint32_t val = 0;
   1819a:	60 e0       	ldi	r22, 0x00	; 0
   1819c:	70 e0       	ldi	r23, 0x00	; 0
   1819e:	cb 01       	movw	r24, r22
   181a0:	41 50       	subi	r20, 0x01	; 1
   181a2:	51 09       	sbc	r21, r1

    for(i=size-1;i>=0;--i)
   181a4:	57 fd       	sbrc	r21, 7
   181a6:	0e c0       	rjmp	.+28     	; 0x181c4 <B2V_LSB+0x36>
    {
        val <<= 8;
   181a8:	cc 24       	eor	r12, r12
   181aa:	d6 2e       	mov	r13, r22
   181ac:	e7 2e       	mov	r14, r23
   181ae:	f8 2e       	mov	r15, r24
        val |= (uint8_t) (B[i+index] & 0xff);
   181b0:	fa 01       	movw	r30, r20
   181b2:	ea 0f       	add	r30, r26
   181b4:	fb 1f       	adc	r31, r27
   181b6:	e2 0f       	add	r30, r18
   181b8:	f3 1f       	adc	r31, r19
   181ba:	e0 81       	ld	r30, Z
   181bc:	c7 01       	movw	r24, r14
   181be:	b6 01       	movw	r22, r12
   181c0:	6e 2b       	or	r22, r30
   181c2:	ee cf       	rjmp	.-36     	; 0x181a0 <B2V_LSB+0x12>
    }
    return(val);
}
   181c4:	ff 90       	pop	r15
   181c6:	ef 90       	pop	r14
   181c8:	df 90       	pop	r13
   181ca:	cf 90       	pop	r12
   181cc:	08 95       	ret

000181ce <lif_help>:
            return( (lifdir_t *) &LIF->DIR );

// Skip purged records
    }
    return( NULL );
}
   181ce:	cf 93       	push	r28
   181d0:	df 93       	push	r29
   181d2:	00 d0       	rcall	.+0      	; 0x181d4 <lif_help+0x6>
   181d4:	1f 92       	push	r1
   181d6:	ec 01       	movw	r28, r24
   181d8:	82 e0       	ldi	r24, 0x02	; 2
   181da:	97 e4       	ldi	r25, 0x47	; 71
   181dc:	a0 e0       	ldi	r26, 0x00	; 0
   181de:	ed b7       	in	r30, 0x3d	; 61
   181e0:	fe b7       	in	r31, 0x3e	; 62
   181e2:	81 83       	std	Z+1, r24	; 0x01
   181e4:	92 83       	std	Z+2, r25	; 0x02
   181e6:	a3 83       	std	Z+3, r26	; 0x03
   181e8:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   181ec:	cd 2b       	or	r28, r29
   181ee:	51 f0       	breq	.+20     	; 0x18204 <lif_help+0x36>
   181f0:	8e e3       	ldi	r24, 0x3E	; 62
   181f2:	95 e4       	ldi	r25, 0x45	; 69
   181f4:	a0 e0       	ldi	r26, 0x00	; 0
   181f6:	ed b7       	in	r30, 0x3d	; 61
   181f8:	fe b7       	in	r31, 0x3e	; 62
   181fa:	81 83       	std	Z+1, r24	; 0x01
   181fc:	92 83       	std	Z+2, r25	; 0x02
   181fe:	a3 83       	std	Z+3, r26	; 0x03
   18200:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   18204:	cd b7       	in	r28, 0x3d	; 61
   18206:	de b7       	in	r29, 0x3e	; 62
   18208:	23 96       	adiw	r28, 0x03	; 3
   1820a:	e2 e0       	ldi	r30, 0x02	; 2
   1820c:	0c 94 39 e7 	jmp	0x1ce72	; 0x1ce72 <__epilogue_restores__+0x20>

00018210 <lif_calloc>:
   18210:	cf 92       	push	r12
   18212:	df 92       	push	r13
   18214:	ef 92       	push	r14
   18216:	ff 92       	push	r15
   18218:	cf 93       	push	r28
   1821a:	df 93       	push	r29
   1821c:	ad b7       	in	r26, 0x3d	; 61
   1821e:	be b7       	in	r27, 0x3e	; 62
   18220:	17 97       	sbiw	r26, 0x07	; 7
   18222:	0f b6       	in	r0, 0x3f	; 63
   18224:	f8 94       	cli
   18226:	be bf       	out	0x3e, r27	; 62
   18228:	0f be       	out	0x3f, r0	; 63
   1822a:	ad bf       	out	0x3d, r26	; 61
   1822c:	6b 01       	movw	r12, r22
   1822e:	7c 01       	movw	r14, r24
   18230:	61 e0       	ldi	r22, 0x01	; 1
   18232:	70 e0       	ldi	r23, 0x00	; 0
   18234:	c6 01       	movw	r24, r12
   18236:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <safecalloc>
   1823a:	ec 01       	movw	r28, r24
   1823c:	89 2b       	or	r24, r25
   1823e:	71 f4       	brne	.+28     	; 0x1825c <lif_calloc+0x4c>
   18240:	ed b7       	in	r30, 0x3d	; 61
   18242:	fe b7       	in	r31, 0x3e	; 62
   18244:	c4 82       	std	Z+4, r12	; 0x04
   18246:	d5 82       	std	Z+5, r13	; 0x05
   18248:	e6 82       	std	Z+6, r14	; 0x06
   1824a:	f7 82       	std	Z+7, r15	; 0x07
   1824c:	87 ed       	ldi	r24, 0xD7	; 215
   1824e:	94 e4       	ldi	r25, 0x44	; 68
   18250:	a0 e0       	ldi	r26, 0x00	; 0
   18252:	81 83       	std	Z+1, r24	; 0x01
   18254:	92 83       	std	Z+2, r25	; 0x02
   18256:	a3 83       	std	Z+3, r26	; 0x03
   18258:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   1825c:	ce 01       	movw	r24, r28
   1825e:	ad b7       	in	r26, 0x3d	; 61
   18260:	be b7       	in	r27, 0x3e	; 62
   18262:	17 96       	adiw	r26, 0x07	; 7
   18264:	0f b6       	in	r0, 0x3f	; 63
   18266:	f8 94       	cli
   18268:	be bf       	out	0x3e, r27	; 62
   1826a:	0f be       	out	0x3f, r0	; 63
   1826c:	ad bf       	out	0x3d, r26	; 61
   1826e:	df 91       	pop	r29
   18270:	cf 91       	pop	r28
   18272:	ff 90       	pop	r15
   18274:	ef 90       	pop	r14
   18276:	df 90       	pop	r13
   18278:	cf 90       	pop	r12
   1827a:	08 95       	ret

0001827c <lif_free>:
   1827c:	00 d0       	rcall	.+0      	; 0x1827e <lif_free+0x2>
   1827e:	1f 92       	push	r1
   18280:	00 97       	sbiw	r24, 0x00	; 0
   18282:	59 f4       	brne	.+22     	; 0x1829a <lif_free+0x1e>
   18284:	8f eb       	ldi	r24, 0xBF	; 191
   18286:	94 e4       	ldi	r25, 0x44	; 68
   18288:	a0 e0       	ldi	r26, 0x00	; 0
   1828a:	ed b7       	in	r30, 0x3d	; 61
   1828c:	fe b7       	in	r31, 0x3e	; 62
   1828e:	81 83       	std	Z+1, r24	; 0x01
   18290:	92 83       	std	Z+2, r25	; 0x02
   18292:	a3 83       	std	Z+3, r26	; 0x03
   18294:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   18298:	02 c0       	rjmp	.+4      	; 0x1829e <lif_free+0x22>
   1829a:	0e 94 24 28 	call	0x5048	; 0x5048 <safefree>
   1829e:	0f 90       	pop	r0
   182a0:	0f 90       	pop	r0
   182a2:	0f 90       	pop	r0
   182a4:	08 95       	ret

000182a6 <lif_stralloc>:
   182a6:	0f 93       	push	r16
   182a8:	1f 93       	push	r17
   182aa:	cf 93       	push	r28
   182ac:	df 93       	push	r29
   182ae:	ec 01       	movw	r28, r24
   182b0:	fc 01       	movw	r30, r24
   182b2:	01 90       	ld	r0, Z+
   182b4:	00 20       	and	r0, r0
   182b6:	e9 f7       	brne	.-6      	; 0x182b2 <lif_stralloc+0xc>
   182b8:	bf 01       	movw	r22, r30
   182ba:	68 1b       	sub	r22, r24
   182bc:	79 0b       	sbc	r23, r25
   182be:	6d 5f       	subi	r22, 0xFD	; 253
   182c0:	7f 4f       	sbci	r23, 0xFF	; 255
   182c2:	07 2e       	mov	r0, r23
   182c4:	00 0c       	add	r0, r0
   182c6:	88 0b       	sbc	r24, r24
   182c8:	99 0b       	sbc	r25, r25
   182ca:	a2 df       	rcall	.-188    	; 0x18210 <lif_calloc>
   182cc:	8c 01       	movw	r16, r24
   182ce:	00 97       	sbiw	r24, 0x00	; 0
   182d0:	19 f0       	breq	.+6      	; 0x182d8 <lif_stralloc+0x32>
   182d2:	be 01       	movw	r22, r28
   182d4:	0e 94 6d 31 	call	0x62da	; 0x62da <strcpy>
   182d8:	c8 01       	movw	r24, r16
   182da:	df 91       	pop	r29
   182dc:	cf 91       	pop	r28
   182de:	1f 91       	pop	r17
   182e0:	0f 91       	pop	r16
   182e2:	08 95       	ret

000182e4 <lif_open>:
   182e4:	ef 92       	push	r14
   182e6:	ff 92       	push	r15
   182e8:	0f 93       	push	r16
   182ea:	1f 93       	push	r17
   182ec:	cf 93       	push	r28
   182ee:	df 93       	push	r29
   182f0:	ad b7       	in	r26, 0x3d	; 61
   182f2:	be b7       	in	r27, 0x3e	; 62
   182f4:	17 97       	sbiw	r26, 0x07	; 7
   182f6:	0f b6       	in	r0, 0x3f	; 63
   182f8:	f8 94       	cli
   182fa:	be bf       	out	0x3e, r27	; 62
   182fc:	0f be       	out	0x3f, r0	; 63
   182fe:	ad bf       	out	0x3d, r26	; 61
   18300:	8c 01       	movw	r16, r24
   18302:	7b 01       	movw	r14, r22
   18304:	0e 94 6b 7e 	call	0xfcd6	; 0xfcd6 <fopen>
   18308:	ec 01       	movw	r28, r24
   1830a:	89 2b       	or	r24, r25
   1830c:	71 f4       	brne	.+28     	; 0x1832a <lif_open+0x46>
   1830e:	ed b7       	in	r30, 0x3d	; 61
   18310:	fe b7       	in	r31, 0x3e	; 62
   18312:	f7 82       	std	Z+7, r15	; 0x07
   18314:	e6 82       	std	Z+6, r14	; 0x06
   18316:	15 83       	std	Z+5, r17	; 0x05
   18318:	04 83       	std	Z+4, r16	; 0x04
   1831a:	8a e9       	ldi	r24, 0x9A	; 154
   1831c:	94 e4       	ldi	r25, 0x44	; 68
   1831e:	a0 e0       	ldi	r26, 0x00	; 0
   18320:	81 83       	std	Z+1, r24	; 0x01
   18322:	92 83       	std	Z+2, r25	; 0x02
   18324:	a3 83       	std	Z+3, r26	; 0x03
   18326:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   1832a:	ce 01       	movw	r24, r28
   1832c:	cd b7       	in	r28, 0x3d	; 61
   1832e:	de b7       	in	r29, 0x3e	; 62
   18330:	27 96       	adiw	r28, 0x07	; 7
   18332:	e6 e0       	ldi	r30, 0x06	; 6
   18334:	0c 94 35 e7 	jmp	0x1ce6a	; 0x1ce6a <__epilogue_restores__+0x18>

00018338 <lif_stat>:
   18338:	0f 93       	push	r16
   1833a:	1f 93       	push	r17
   1833c:	cf 93       	push	r28
   1833e:	df 93       	push	r29
   18340:	00 d0       	rcall	.+0      	; 0x18342 <lif_stat+0xa>
   18342:	00 d0       	rcall	.+0      	; 0x18344 <lif_stat+0xc>
   18344:	1f 92       	push	r1
   18346:	8c 01       	movw	r16, r24
   18348:	d6 2f       	mov	r29, r22
   1834a:	c7 2f       	mov	r28, r23
   1834c:	0e 94 70 79 	call	0xf2e0	; 0xf2e0 <stat>
   18350:	97 ff       	sbrs	r25, 7
   18352:	0f c0       	rjmp	.+30     	; 0x18372 <lif_stat+0x3a>
   18354:	ed b7       	in	r30, 0x3d	; 61
   18356:	fe b7       	in	r31, 0x3e	; 62
   18358:	15 83       	std	Z+5, r17	; 0x05
   1835a:	04 83       	std	Z+4, r16	; 0x04
   1835c:	81 e8       	ldi	r24, 0x81	; 129
   1835e:	94 e4       	ldi	r25, 0x44	; 68
   18360:	a0 e0       	ldi	r26, 0x00	; 0
   18362:	81 83       	std	Z+1, r24	; 0x01
   18364:	92 83       	std	Z+2, r25	; 0x02
   18366:	a3 83       	std	Z+3, r26	; 0x03
   18368:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   1836c:	80 e0       	ldi	r24, 0x00	; 0
   1836e:	90 e0       	ldi	r25, 0x00	; 0
   18370:	02 c0       	rjmp	.+4      	; 0x18376 <lif_stat+0x3e>
   18372:	8d 2f       	mov	r24, r29
   18374:	9c 2f       	mov	r25, r28
   18376:	cd b7       	in	r28, 0x3d	; 61
   18378:	de b7       	in	r29, 0x3e	; 62
   1837a:	25 96       	adiw	r28, 0x05	; 5
   1837c:	e4 e0       	ldi	r30, 0x04	; 4
   1837e:	0c 94 37 e7 	jmp	0x1ce6e	; 0x1ce6e <__epilogue_restores__+0x1c>

00018382 <lif_seek_msg>:
   18382:	a9 e0       	ldi	r26, 0x09	; 9
   18384:	b0 e0       	ldi	r27, 0x00	; 0
   18386:	e7 ec       	ldi	r30, 0xC7	; 199
   18388:	f1 ec       	ldi	r31, 0xC1	; 193
   1838a:	0c 94 17 e7 	jmp	0x1ce2e	; 0x1ce2e <__prologue_saves__+0x14>
   1838e:	ec 01       	movw	r28, r24
   18390:	6a 01       	movw	r12, r20
   18392:	7b 01       	movw	r14, r22
   18394:	89 01       	movw	r16, r18
   18396:	0e 94 aa 7a 	call	0xf554	; 0xf554 <ftell>
   1839a:	6c 15       	cp	r22, r12
   1839c:	7d 05       	cpc	r23, r13
   1839e:	8e 05       	cpc	r24, r14
   183a0:	9f 05       	cpc	r25, r15
   183a2:	19 f4       	brne	.+6      	; 0x183aa <lif_seek_msg+0x28>
   183a4:	81 e0       	ldi	r24, 0x01	; 1
   183a6:	90 e0       	ldi	r25, 0x00	; 0
   183a8:	1b c0       	rjmp	.+54     	; 0x183e0 <lif_seek_msg+0x5e>
   183aa:	20 e0       	ldi	r18, 0x00	; 0
   183ac:	30 e0       	ldi	r19, 0x00	; 0
   183ae:	b7 01       	movw	r22, r14
   183b0:	a6 01       	movw	r20, r12
   183b2:	ce 01       	movw	r24, r28
   183b4:	0e 94 2d 7b 	call	0xf65a	; 0xf65a <fseek>
   183b8:	97 ff       	sbrs	r25, 7
   183ba:	f4 cf       	rjmp	.-24     	; 0x183a4 <lif_seek_msg+0x22>
   183bc:	ed b7       	in	r30, 0x3d	; 61
   183be:	fe b7       	in	r31, 0x3e	; 62
   183c0:	c6 82       	std	Z+6, r12	; 0x06
   183c2:	d7 82       	std	Z+7, r13	; 0x07
   183c4:	e0 86       	std	Z+8, r14	; 0x08
   183c6:	f1 86       	std	Z+9, r15	; 0x09
   183c8:	15 83       	std	Z+5, r17	; 0x05
   183ca:	04 83       	std	Z+4, r16	; 0x04
   183cc:	80 e6       	ldi	r24, 0x60	; 96
   183ce:	94 e4       	ldi	r25, 0x44	; 68
   183d0:	a0 e0       	ldi	r26, 0x00	; 0
   183d2:	81 83       	std	Z+1, r24	; 0x01
   183d4:	92 83       	std	Z+2, r25	; 0x02
   183d6:	a3 83       	std	Z+3, r26	; 0x03
   183d8:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   183dc:	80 e0       	ldi	r24, 0x00	; 0
   183de:	90 e0       	ldi	r25, 0x00	; 0
   183e0:	cd b7       	in	r28, 0x3d	; 61
   183e2:	de b7       	in	r29, 0x3e	; 62
   183e4:	29 96       	adiw	r28, 0x09	; 9
   183e6:	e8 e0       	ldi	r30, 0x08	; 8
   183e8:	0c 94 33 e7 	jmp	0x1ce66	; 0x1ce66 <__epilogue_restores__+0x14>

000183ec <lif_read>:
   183ec:	af e0       	ldi	r26, 0x0F	; 15
   183ee:	b0 e0       	ldi	r27, 0x00	; 0
   183f0:	ec ef       	ldi	r30, 0xFC	; 252
   183f2:	f1 ec       	ldi	r31, 0xC1	; 193
   183f4:	0c 94 13 e7 	jmp	0x1ce26	; 0x1ce26 <__prologue_saves__+0xc>
   183f8:	ec 01       	movw	r28, r24
   183fa:	7b 01       	movw	r14, r22
   183fc:	49 01       	movw	r8, r18
   183fe:	5a 01       	movw	r10, r20
   18400:	28 81       	ld	r18, Y
   18402:	39 81       	ldd	r19, Y+1	; 0x01
   18404:	b5 01       	movw	r22, r10
   18406:	a4 01       	movw	r20, r8
   18408:	8a 81       	ldd	r24, Y+2	; 0x02
   1840a:	9b 81       	ldd	r25, Y+3	; 0x03
   1840c:	ba df       	rcall	.-140    	; 0x18382 <lif_seek_msg>
   1840e:	89 2b       	or	r24, r25
   18410:	a1 f1       	breq	.+104    	; 0x1847a <lif_read+0x8e>
   18412:	2a 81       	ldd	r18, Y+2	; 0x02
   18414:	3b 81       	ldd	r19, Y+3	; 0x03
   18416:	a8 01       	movw	r20, r16
   18418:	61 e0       	ldi	r22, 0x01	; 1
   1841a:	70 e0       	ldi	r23, 0x00	; 0
   1841c:	c7 01       	movw	r24, r14
   1841e:	0e 94 c1 7b 	call	0xf782	; 0xf782 <fread>
   18422:	6c 01       	movw	r12, r24
   18424:	e1 2c       	mov	r14, r1
   18426:	f1 2c       	mov	r15, r1
   18428:	b8 01       	movw	r22, r16
   1842a:	01 2e       	mov	r0, r17
   1842c:	00 0c       	add	r0, r0
   1842e:	88 0b       	sbc	r24, r24
   18430:	99 0b       	sbc	r25, r25
   18432:	c6 16       	cp	r12, r22
   18434:	d7 06       	cpc	r13, r23
   18436:	e8 06       	cpc	r14, r24
   18438:	f9 06       	cpc	r15, r25
   1843a:	29 f1       	breq	.+74     	; 0x18486 <lif_read+0x9a>
   1843c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18440:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18444:	92 ff       	sbrs	r25, 2
   18446:	1d c0       	rjmp	.+58     	; 0x18482 <lif_read+0x96>
   18448:	ed b7       	in	r30, 0x3d	; 61
   1844a:	fe b7       	in	r31, 0x3e	; 62
   1844c:	17 87       	std	Z+15, r17	; 0x0f
   1844e:	06 87       	std	Z+14, r16	; 0x0e
   18450:	c2 86       	std	Z+10, r12	; 0x0a
   18452:	d3 86       	std	Z+11, r13	; 0x0b
   18454:	e4 86       	std	Z+12, r14	; 0x0c
   18456:	f5 86       	std	Z+13, r15	; 0x0d
   18458:	86 82       	std	Z+6, r8	; 0x06
   1845a:	97 82       	std	Z+7, r9	; 0x07
   1845c:	a0 86       	std	Z+8, r10	; 0x08
   1845e:	b1 86       	std	Z+9, r11	; 0x09
   18460:	88 81       	ld	r24, Y
   18462:	99 81       	ldd	r25, Y+1	; 0x01
   18464:	95 83       	std	Z+5, r25	; 0x05
   18466:	84 83       	std	Z+4, r24	; 0x04
   18468:	84 e2       	ldi	r24, 0x24	; 36
   1846a:	94 e4       	ldi	r25, 0x44	; 68
   1846c:	a0 e0       	ldi	r26, 0x00	; 0
   1846e:	81 83       	std	Z+1, r24	; 0x01
   18470:	92 83       	std	Z+2, r25	; 0x02
   18472:	a3 83       	std	Z+3, r26	; 0x03
   18474:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   18478:	04 c0       	rjmp	.+8      	; 0x18482 <lif_read+0x96>
   1847a:	60 e0       	ldi	r22, 0x00	; 0
   1847c:	70 e0       	ldi	r23, 0x00	; 0
   1847e:	cb 01       	movw	r24, r22
   18480:	02 c0       	rjmp	.+4      	; 0x18486 <lif_read+0x9a>
   18482:	c7 01       	movw	r24, r14
   18484:	b6 01       	movw	r22, r12
   18486:	cd b7       	in	r28, 0x3d	; 61
   18488:	de b7       	in	r29, 0x3e	; 62
   1848a:	2f 96       	adiw	r28, 0x0f	; 15
   1848c:	ec e0       	ldi	r30, 0x0C	; 12
   1848e:	0c 94 2f e7 	jmp	0x1ce5e	; 0x1ce5e <__epilogue_restores__+0xc>

00018492 <lif_write>:
   18492:	8f 92       	push	r8
   18494:	9f 92       	push	r9
   18496:	af 92       	push	r10
   18498:	bf 92       	push	r11
   1849a:	ef 92       	push	r14
   1849c:	ff 92       	push	r15
   1849e:	0f 93       	push	r16
   184a0:	1f 93       	push	r17
   184a2:	cf 93       	push	r28
   184a4:	df 93       	push	r29
   184a6:	ad b7       	in	r26, 0x3d	; 61
   184a8:	be b7       	in	r27, 0x3e	; 62
   184aa:	1d 97       	sbiw	r26, 0x0d	; 13
   184ac:	0f b6       	in	r0, 0x3f	; 63
   184ae:	f8 94       	cli
   184b0:	be bf       	out	0x3e, r27	; 62
   184b2:	0f be       	out	0x3f, r0	; 63
   184b4:	ad bf       	out	0x3d, r26	; 61
   184b6:	7c 01       	movw	r14, r24
   184b8:	eb 01       	movw	r28, r22
   184ba:	49 01       	movw	r8, r18
   184bc:	5a 01       	movw	r10, r20
   184be:	fc 01       	movw	r30, r24
   184c0:	20 81       	ld	r18, Z
   184c2:	31 81       	ldd	r19, Z+1	; 0x01
   184c4:	b5 01       	movw	r22, r10
   184c6:	a4 01       	movw	r20, r8
   184c8:	82 81       	ldd	r24, Z+2	; 0x02
   184ca:	93 81       	ldd	r25, Z+3	; 0x03
   184cc:	5a df       	rcall	.-332    	; 0x18382 <lif_seek_msg>
   184ce:	00 97       	sbiw	r24, 0x00	; 0
   184d0:	81 f1       	breq	.+96     	; 0x18532 <lif_write+0xa0>
   184d2:	f7 01       	movw	r30, r14
   184d4:	22 81       	ldd	r18, Z+2	; 0x02
   184d6:	33 81       	ldd	r19, Z+3	; 0x03
   184d8:	a8 01       	movw	r20, r16
   184da:	61 e0       	ldi	r22, 0x01	; 1
   184dc:	70 e0       	ldi	r23, 0x00	; 0
   184de:	ce 01       	movw	r24, r28
   184e0:	0e 94 93 7c 	call	0xf926	; 0xf926 <fwrite>
   184e4:	ec 01       	movw	r28, r24
   184e6:	08 17       	cp	r16, r24
   184e8:	19 07       	cpc	r17, r25
   184ea:	01 f1       	breq	.+64     	; 0x1852c <lif_write+0x9a>
   184ec:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   184f0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   184f4:	92 ff       	sbrs	r25, 2
   184f6:	1c c0       	rjmp	.+56     	; 0x18530 <lif_write+0x9e>
   184f8:	ed b7       	in	r30, 0x3d	; 61
   184fa:	fe b7       	in	r31, 0x3e	; 62
   184fc:	15 87       	std	Z+13, r17	; 0x0d
   184fe:	04 87       	std	Z+12, r16	; 0x0c
   18500:	d3 87       	std	Z+11, r29	; 0x0b
   18502:	c2 87       	std	Z+10, r28	; 0x0a
   18504:	86 82       	std	Z+6, r8	; 0x06
   18506:	97 82       	std	Z+7, r9	; 0x07
   18508:	a0 86       	std	Z+8, r10	; 0x08
   1850a:	b1 86       	std	Z+9, r11	; 0x09
   1850c:	f7 01       	movw	r30, r14
   1850e:	80 81       	ld	r24, Z
   18510:	91 81       	ldd	r25, Z+1	; 0x01
   18512:	ed b7       	in	r30, 0x3d	; 61
   18514:	fe b7       	in	r31, 0x3e	; 62
   18516:	95 83       	std	Z+5, r25	; 0x05
   18518:	84 83       	std	Z+4, r24	; 0x04
   1851a:	87 ee       	ldi	r24, 0xE7	; 231
   1851c:	93 e4       	ldi	r25, 0x43	; 67
   1851e:	a0 e0       	ldi	r26, 0x00	; 0
   18520:	81 83       	std	Z+1, r24	; 0x01
   18522:	92 83       	std	Z+2, r25	; 0x02
   18524:	a3 83       	std	Z+3, r26	; 0x03
   18526:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   1852a:	02 c0       	rjmp	.+4      	; 0x18530 <lif_write+0x9e>
   1852c:	c8 01       	movw	r24, r16
   1852e:	01 c0       	rjmp	.+2      	; 0x18532 <lif_write+0xa0>
   18530:	ce 01       	movw	r24, r28
   18532:	ad b7       	in	r26, 0x3d	; 61
   18534:	be b7       	in	r27, 0x3e	; 62
   18536:	1d 96       	adiw	r26, 0x0d	; 13
   18538:	0f b6       	in	r0, 0x3f	; 63
   1853a:	f8 94       	cli
   1853c:	be bf       	out	0x3e, r27	; 62
   1853e:	0f be       	out	0x3f, r0	; 63
   18540:	ad bf       	out	0x3d, r26	; 61
   18542:	df 91       	pop	r29
   18544:	cf 91       	pop	r28
   18546:	1f 91       	pop	r17
   18548:	0f 91       	pop	r16
   1854a:	ff 90       	pop	r15
   1854c:	ef 90       	pop	r14
   1854e:	bf 90       	pop	r11
   18550:	af 90       	pop	r10
   18552:	9f 90       	pop	r9
   18554:	8f 90       	pop	r8
   18556:	08 95       	ret

00018558 <lif_chars>:
   18558:	80 32       	cpi	r24, 0x20	; 32
   1855a:	91 05       	cpc	r25, r1
   1855c:	e1 f0       	breq	.+56     	; 0x18596 <lif_chars+0x3e>
   1855e:	9c 01       	movw	r18, r24
   18560:	21 56       	subi	r18, 0x61	; 97
   18562:	31 09       	sbc	r19, r1
   18564:	2a 31       	cpi	r18, 0x1A	; 26
   18566:	31 05       	cpc	r19, r1
   18568:	10 f4       	brcc	.+4      	; 0x1856e <lif_chars+0x16>
   1856a:	80 97       	sbiw	r24, 0x20	; 32
   1856c:	08 95       	ret
   1856e:	9c 01       	movw	r18, r24
   18570:	21 54       	subi	r18, 0x41	; 65
   18572:	31 09       	sbc	r19, r1
   18574:	2a 31       	cpi	r18, 0x1A	; 26
   18576:	31 05       	cpc	r19, r1
   18578:	c8 f0       	brcs	.+50     	; 0x185ac <lif_chars+0x54>
   1857a:	16 16       	cp	r1, r22
   1857c:	17 06       	cpc	r1, r23
   1857e:	74 f4       	brge	.+28     	; 0x1859c <lif_chars+0x44>
   18580:	2f 5e       	subi	r18, 0xEF	; 239
   18582:	3f 4f       	sbci	r19, 0xFF	; 255
   18584:	2a 30       	cpi	r18, 0x0A	; 10
   18586:	31 05       	cpc	r19, r1
   18588:	88 f0       	brcs	.+34     	; 0x185ac <lif_chars+0x54>
   1858a:	8f 35       	cpi	r24, 0x5F	; 95
   1858c:	91 05       	cpc	r25, r1
   1858e:	49 f0       	breq	.+18     	; 0x185a2 <lif_chars+0x4a>
   18590:	8d 97       	sbiw	r24, 0x2d	; 45
   18592:	21 f4       	brne	.+8      	; 0x1859c <lif_chars+0x44>
   18594:	09 c0       	rjmp	.+18     	; 0x185a8 <lif_chars+0x50>
   18596:	80 e2       	ldi	r24, 0x20	; 32
   18598:	90 e0       	ldi	r25, 0x00	; 0
   1859a:	08 95       	ret
   1859c:	80 e0       	ldi	r24, 0x00	; 0
   1859e:	90 e0       	ldi	r25, 0x00	; 0
   185a0:	08 95       	ret
   185a2:	8f e5       	ldi	r24, 0x5F	; 95
   185a4:	90 e0       	ldi	r25, 0x00	; 0
   185a6:	08 95       	ret
   185a8:	8d e2       	ldi	r24, 0x2D	; 45
   185aa:	90 e0       	ldi	r25, 0x00	; 0
   185ac:	08 95       	ret

000185ae <lif_B2S>:
   185ae:	a0 e0       	ldi	r26, 0x00	; 0
   185b0:	b0 e0       	ldi	r27, 0x00	; 0
   185b2:	ed ed       	ldi	r30, 0xDD	; 221
   185b4:	f2 ec       	ldi	r31, 0xC2	; 194
   185b6:	0c 94 13 e7 	jmp	0x1ce26	; 0x1ce26 <__prologue_saves__+0xc>
   185ba:	5c 01       	movw	r10, r24
   185bc:	6b 01       	movw	r12, r22
   185be:	ea 01       	movw	r28, r20
   185c0:	4c 01       	movw	r8, r24
   185c2:	ee 24       	eor	r14, r14
   185c4:	e3 94       	inc	r14
   185c6:	f1 2c       	mov	r15, r1
   185c8:	00 e0       	ldi	r16, 0x00	; 0
   185ca:	10 e0       	ldi	r17, 0x00	; 0
   185cc:	0c 17       	cp	r16, r28
   185ce:	1d 07       	cpc	r17, r29
   185d0:	6c f4       	brge	.+26     	; 0x185ec <lif_B2S+0x3e>
   185d2:	f4 01       	movw	r30, r8
   185d4:	81 91       	ld	r24, Z+
   185d6:	4f 01       	movw	r8, r30
   185d8:	b8 01       	movw	r22, r16
   185da:	90 e0       	ldi	r25, 0x00	; 0
   185dc:	bd df       	rcall	.-134    	; 0x18558 <lif_chars>
   185de:	89 2b       	or	r24, r25
   185e0:	11 f4       	brne	.+4      	; 0x185e6 <lif_B2S+0x38>
   185e2:	e1 2c       	mov	r14, r1
   185e4:	f1 2c       	mov	r15, r1
   185e6:	0f 5f       	subi	r16, 0xFF	; 255
   185e8:	1f 4f       	sbci	r17, 0xFF	; 255
   185ea:	f0 cf       	rjmp	.-32     	; 0x185cc <lif_B2S+0x1e>
   185ec:	d6 01       	movw	r26, r12
   185ee:	f5 01       	movw	r30, r10
   185f0:	cf 01       	movw	r24, r30
   185f2:	8a 19       	sub	r24, r10
   185f4:	9b 09       	sbc	r25, r11
   185f6:	8c 17       	cp	r24, r28
   185f8:	9d 07       	cpc	r25, r29
   185fa:	1c f4       	brge	.+6      	; 0x18602 <lif_B2S+0x54>
   185fc:	81 91       	ld	r24, Z+
   185fe:	8d 93       	st	X+, r24
   18600:	f7 cf       	rjmp	.-18     	; 0x185f0 <lif_B2S+0x42>
   18602:	d7 ff       	sbrs	r29, 7
   18604:	02 c0       	rjmp	.+4      	; 0x1860a <lif_B2S+0x5c>
   18606:	c0 e0       	ldi	r28, 0x00	; 0
   18608:	d0 e0       	ldi	r29, 0x00	; 0
   1860a:	cc 0d       	add	r28, r12
   1860c:	dd 1d       	adc	r29, r13
   1860e:	18 82       	st	Y, r1
   18610:	c6 01       	movw	r24, r12
   18612:	0e 94 4b 32 	call	0x6496	; 0x6496 <trim_tail>
   18616:	c7 01       	movw	r24, r14
   18618:	cd b7       	in	r28, 0x3d	; 61
   1861a:	de b7       	in	r29, 0x3e	; 62
   1861c:	ec e0       	ldi	r30, 0x0C	; 12
   1861e:	0c 94 2f e7 	jmp	0x1ce5e	; 0x1ce5e <__epilogue_restores__+0xc>

00018622 <lif_checkname>:
   18622:	ef 92       	push	r14
   18624:	ff 92       	push	r15
   18626:	0f 93       	push	r16
   18628:	1f 93       	push	r17
   1862a:	cf 93       	push	r28
   1862c:	df 93       	push	r29
   1862e:	7c 01       	movw	r14, r24
   18630:	ec 01       	movw	r28, r24
   18632:	01 e0       	ldi	r16, 0x01	; 1
   18634:	10 e0       	ldi	r17, 0x00	; 0
   18636:	be 01       	movw	r22, r28
   18638:	6e 19       	sub	r22, r14
   1863a:	7f 09       	sbc	r23, r15
   1863c:	89 91       	ld	r24, Y+
   1863e:	88 23       	and	r24, r24
   18640:	39 f0       	breq	.+14     	; 0x18650 <lif_checkname+0x2e>
   18642:	90 e0       	ldi	r25, 0x00	; 0
   18644:	89 df       	rcall	.-238    	; 0x18558 <lif_chars>
   18646:	89 2b       	or	r24, r25
   18648:	b1 f7       	brne	.-20     	; 0x18636 <lif_checkname+0x14>
   1864a:	00 e0       	ldi	r16, 0x00	; 0
   1864c:	10 e0       	ldi	r17, 0x00	; 0
   1864e:	f3 cf       	rjmp	.-26     	; 0x18636 <lif_checkname+0x14>
   18650:	c8 01       	movw	r24, r16
   18652:	cd b7       	in	r28, 0x3d	; 61
   18654:	de b7       	in	r29, 0x3e	; 62
   18656:	e6 e0       	ldi	r30, 0x06	; 6
   18658:	0c 94 35 e7 	jmp	0x1ce6a	; 0x1ce6a <__epilogue_restores__+0x18>

0001865c <lif_S2B>:
   1865c:	fb 01       	movw	r30, r22
   1865e:	dc 01       	movw	r26, r24
   18660:	20 e0       	ldi	r18, 0x00	; 0
   18662:	30 e0       	ldi	r19, 0x00	; 0
   18664:	61 91       	ld	r22, Z+
   18666:	61 11       	cpse	r22, r1
   18668:	05 c0       	rjmp	.+10     	; 0x18674 <lif_S2B+0x18>
   1866a:	fc 01       	movw	r30, r24
   1866c:	e2 0f       	add	r30, r18
   1866e:	f3 1f       	adc	r31, r19
   18670:	60 e2       	ldi	r22, 0x20	; 32
   18672:	08 c0       	rjmp	.+16     	; 0x18684 <lif_S2B+0x28>
   18674:	24 17       	cp	r18, r20
   18676:	35 07       	cpc	r19, r21
   18678:	24 f4       	brge	.+8      	; 0x18682 <lif_S2B+0x26>
   1867a:	6d 93       	st	X+, r22
   1867c:	2f 5f       	subi	r18, 0xFF	; 255
   1867e:	3f 4f       	sbci	r19, 0xFF	; 255
   18680:	f1 cf       	rjmp	.-30     	; 0x18664 <lif_S2B+0x8>
   18682:	08 95       	ret
   18684:	9f 01       	movw	r18, r30
   18686:	28 1b       	sub	r18, r24
   18688:	39 0b       	sbc	r19, r25
   1868a:	24 17       	cp	r18, r20
   1868c:	35 07       	cpc	r19, r21
   1868e:	14 f4       	brge	.+4      	; 0x18694 <lif_S2B+0x38>
   18690:	61 93       	st	Z+, r22
   18692:	f8 cf       	rjmp	.-16     	; 0x18684 <lif_S2B+0x28>
   18694:	08 95       	ret

00018696 <lif_fixname>:
   18696:	a0 e0       	ldi	r26, 0x00	; 0
   18698:	b0 e0       	ldi	r27, 0x00	; 0
   1869a:	e1 e5       	ldi	r30, 0x51	; 81
   1869c:	f3 ec       	ldi	r31, 0xC3	; 195
   1869e:	0c 94 16 e7 	jmp	0x1ce2c	; 0x1ce2c <__prologue_saves__+0x12>
   186a2:	8c 01       	movw	r16, r24
   186a4:	cb 01       	movw	r24, r22
   186a6:	7a 01       	movw	r14, r20
   186a8:	0e 94 3c 77 	call	0xee78	; 0xee78 <basename>
   186ac:	6c 01       	movw	r12, r24
   186ae:	e8 01       	movw	r28, r16
   186b0:	80 e2       	ldi	r24, 0x20	; 32
   186b2:	b8 2e       	mov	r11, r24
   186b4:	be 01       	movw	r22, r28
   186b6:	60 1b       	sub	r22, r16
   186b8:	71 0b       	sbc	r23, r17
   186ba:	f6 01       	movw	r30, r12
   186bc:	81 91       	ld	r24, Z+
   186be:	6f 01       	movw	r12, r30
   186c0:	81 11       	cpse	r24, r1
   186c2:	02 c0       	rjmp	.+4      	; 0x186c8 <lif_fixname+0x32>
   186c4:	20 e2       	ldi	r18, 0x20	; 32
   186c6:	0e c0       	rjmp	.+28     	; 0x186e4 <lif_fixname+0x4e>
   186c8:	1e 14       	cp	r1, r14
   186ca:	1f 04       	cpc	r1, r15
   186cc:	dc f7       	brge	.-10     	; 0x186c4 <lif_fixname+0x2e>
   186ce:	8e 32       	cpi	r24, 0x2E	; 46
   186d0:	c9 f3       	breq	.-14     	; 0x186c4 <lif_fixname+0x2e>
   186d2:	90 e0       	ldi	r25, 0x00	; 0
   186d4:	41 df       	rcall	.-382    	; 0x18558 <lif_chars>
   186d6:	88 23       	and	r24, r24
   186d8:	11 f0       	breq	.+4      	; 0x186de <lif_fixname+0x48>
   186da:	88 83       	st	Y, r24
   186dc:	01 c0       	rjmp	.+2      	; 0x186e0 <lif_fixname+0x4a>
   186de:	b8 82       	st	Y, r11
   186e0:	21 96       	adiw	r28, 0x01	; 1
   186e2:	e8 cf       	rjmp	.-48     	; 0x186b4 <lif_fixname+0x1e>
   186e4:	ce 01       	movw	r24, r28
   186e6:	80 1b       	sub	r24, r16
   186e8:	91 0b       	sbc	r25, r17
   186ea:	8e 15       	cp	r24, r14
   186ec:	9f 05       	cpc	r25, r15
   186ee:	14 f4       	brge	.+4      	; 0x186f4 <lif_fixname+0x5e>
   186f0:	29 93       	st	Y+, r18
   186f2:	f8 cf       	rjmp	.-16     	; 0x186e4 <lif_fixname+0x4e>
   186f4:	18 82       	st	Y, r1
   186f6:	f8 01       	movw	r30, r16
   186f8:	01 90       	ld	r0, Z+
   186fa:	00 20       	and	r0, r0
   186fc:	e9 f7       	brne	.-6      	; 0x186f8 <lif_fixname+0x62>
   186fe:	cf 01       	movw	r24, r30
   18700:	01 97       	sbiw	r24, 0x01	; 1
   18702:	80 1b       	sub	r24, r16
   18704:	91 0b       	sbc	r25, r17
   18706:	cd b7       	in	r28, 0x3d	; 61
   18708:	de b7       	in	r29, 0x3e	; 62
   1870a:	e9 e0       	ldi	r30, 0x09	; 9
   1870c:	0c 94 32 e7 	jmp	0x1ce64	; 0x1ce64 <__epilogue_restores__+0x12>

00018710 <lif_vol2str>:
   18710:	ef 92       	push	r14
   18712:	ff 92       	push	r15
   18714:	0f 93       	push	r16
   18716:	1f 93       	push	r17
   18718:	cf 93       	push	r28
   1871a:	df 93       	push	r29
   1871c:	7c 01       	movw	r14, r24
   1871e:	eb 01       	movw	r28, r22
   18720:	fc 01       	movw	r30, r24
   18722:	04 a1       	ldd	r16, Z+36	; 0x24
   18724:	15 a1       	ldd	r17, Z+37	; 0x25
   18726:	20 e0       	ldi	r18, 0x00	; 0
   18728:	30 e0       	ldi	r19, 0x00	; 0
   1872a:	42 e0       	ldi	r20, 0x02	; 2
   1872c:	50 e0       	ldi	r21, 0x00	; 0
   1872e:	60 e0       	ldi	r22, 0x00	; 0
   18730:	70 e0       	ldi	r23, 0x00	; 0
   18732:	ce 01       	movw	r24, r28
   18734:	e4 dc       	rcall	.-1592   	; 0x180fe <V2B_MSB>
   18736:	b7 01       	movw	r22, r14
   18738:	6a 5d       	subi	r22, 0xDA	; 218
   1873a:	7f 4f       	sbci	r23, 0xFF	; 255
   1873c:	46 e0       	ldi	r20, 0x06	; 6
   1873e:	50 e0       	ldi	r21, 0x00	; 0
   18740:	ce 01       	movw	r24, r28
   18742:	02 96       	adiw	r24, 0x02	; 2
   18744:	8b df       	rcall	.-234    	; 0x1865c <lif_S2B>
   18746:	f7 01       	movw	r30, r14
   18748:	05 a5       	ldd	r16, Z+45	; 0x2d
   1874a:	16 a5       	ldd	r17, Z+46	; 0x2e
   1874c:	27 a5       	ldd	r18, Z+47	; 0x2f
   1874e:	30 a9       	ldd	r19, Z+48	; 0x30
   18750:	44 e0       	ldi	r20, 0x04	; 4
   18752:	50 e0       	ldi	r21, 0x00	; 0
   18754:	68 e0       	ldi	r22, 0x08	; 8
   18756:	70 e0       	ldi	r23, 0x00	; 0
   18758:	ce 01       	movw	r24, r28
   1875a:	d1 dc       	rcall	.-1630   	; 0x180fe <V2B_MSB>
   1875c:	f7 01       	movw	r30, r14
   1875e:	01 a9       	ldd	r16, Z+49	; 0x31
   18760:	12 a9       	ldd	r17, Z+50	; 0x32
   18762:	20 e0       	ldi	r18, 0x00	; 0
   18764:	30 e0       	ldi	r19, 0x00	; 0
   18766:	42 e0       	ldi	r20, 0x02	; 2
   18768:	50 e0       	ldi	r21, 0x00	; 0
   1876a:	6c e0       	ldi	r22, 0x0C	; 12
   1876c:	70 e0       	ldi	r23, 0x00	; 0
   1876e:	ce 01       	movw	r24, r28
   18770:	c6 dc       	rcall	.-1652   	; 0x180fe <V2B_MSB>
   18772:	00 e0       	ldi	r16, 0x00	; 0
   18774:	10 e0       	ldi	r17, 0x00	; 0
   18776:	98 01       	movw	r18, r16
   18778:	42 e0       	ldi	r20, 0x02	; 2
   1877a:	50 e0       	ldi	r21, 0x00	; 0
   1877c:	6e e0       	ldi	r22, 0x0E	; 14
   1877e:	70 e0       	ldi	r23, 0x00	; 0
   18780:	ce 01       	movw	r24, r28
   18782:	bd dc       	rcall	.-1670   	; 0x180fe <V2B_MSB>
   18784:	f7 01       	movw	r30, r14
   18786:	05 a9       	ldd	r16, Z+53	; 0x35
   18788:	16 a9       	ldd	r17, Z+54	; 0x36
   1878a:	27 a9       	ldd	r18, Z+55	; 0x37
   1878c:	30 ad       	ldd	r19, Z+56	; 0x38
   1878e:	44 e0       	ldi	r20, 0x04	; 4
   18790:	50 e0       	ldi	r21, 0x00	; 0
   18792:	60 e1       	ldi	r22, 0x10	; 16
   18794:	70 e0       	ldi	r23, 0x00	; 0
   18796:	ce 01       	movw	r24, r28
   18798:	b2 dc       	rcall	.-1692   	; 0x180fe <V2B_MSB>
   1879a:	f7 01       	movw	r30, r14
   1879c:	01 ad       	ldd	r16, Z+57	; 0x39
   1879e:	12 ad       	ldd	r17, Z+58	; 0x3a
   187a0:	20 e0       	ldi	r18, 0x00	; 0
   187a2:	30 e0       	ldi	r19, 0x00	; 0
   187a4:	42 e0       	ldi	r20, 0x02	; 2
   187a6:	50 e0       	ldi	r21, 0x00	; 0
   187a8:	64 e1       	ldi	r22, 0x14	; 20
   187aa:	70 e0       	ldi	r23, 0x00	; 0
   187ac:	ce 01       	movw	r24, r28
   187ae:	a7 dc       	rcall	.-1714   	; 0x180fe <V2B_MSB>
   187b0:	00 e0       	ldi	r16, 0x00	; 0
   187b2:	10 e0       	ldi	r17, 0x00	; 0
   187b4:	98 01       	movw	r18, r16
   187b6:	42 e0       	ldi	r20, 0x02	; 2
   187b8:	50 e0       	ldi	r21, 0x00	; 0
   187ba:	66 e1       	ldi	r22, 0x16	; 22
   187bc:	70 e0       	ldi	r23, 0x00	; 0
   187be:	ce 01       	movw	r24, r28
   187c0:	9e dc       	rcall	.-1732   	; 0x180fe <V2B_MSB>
   187c2:	f7 01       	movw	r30, r14
   187c4:	fd 96       	adiw	r30, 0x3d	; 61
   187c6:	00 81       	ld	r16, Z
   187c8:	11 81       	ldd	r17, Z+1	; 0x01
   187ca:	22 81       	ldd	r18, Z+2	; 0x02
   187cc:	33 81       	ldd	r19, Z+3	; 0x03
   187ce:	44 e0       	ldi	r20, 0x04	; 4
   187d0:	50 e0       	ldi	r21, 0x00	; 0
   187d2:	68 e1       	ldi	r22, 0x18	; 24
   187d4:	70 e0       	ldi	r23, 0x00	; 0
   187d6:	ce 01       	movw	r24, r28
   187d8:	92 dc       	rcall	.-1756   	; 0x180fe <V2B_MSB>
   187da:	f7 01       	movw	r30, r14
   187dc:	ef 5b       	subi	r30, 0xBF	; 191
   187de:	ff 4f       	sbci	r31, 0xFF	; 255
   187e0:	00 81       	ld	r16, Z
   187e2:	11 81       	ldd	r17, Z+1	; 0x01
   187e4:	22 81       	ldd	r18, Z+2	; 0x02
   187e6:	33 81       	ldd	r19, Z+3	; 0x03
   187e8:	44 e0       	ldi	r20, 0x04	; 4
   187ea:	50 e0       	ldi	r21, 0x00	; 0
   187ec:	6c e1       	ldi	r22, 0x1C	; 28
   187ee:	70 e0       	ldi	r23, 0x00	; 0
   187f0:	ce 01       	movw	r24, r28
   187f2:	85 dc       	rcall	.-1782   	; 0x180fe <V2B_MSB>
   187f4:	f7 01       	movw	r30, r14
   187f6:	eb 5b       	subi	r30, 0xBB	; 187
   187f8:	ff 4f       	sbci	r31, 0xFF	; 255
   187fa:	00 81       	ld	r16, Z
   187fc:	11 81       	ldd	r17, Z+1	; 0x01
   187fe:	22 81       	ldd	r18, Z+2	; 0x02
   18800:	33 81       	ldd	r19, Z+3	; 0x03
   18802:	44 e0       	ldi	r20, 0x04	; 4
   18804:	50 e0       	ldi	r21, 0x00	; 0
   18806:	60 e2       	ldi	r22, 0x20	; 32
   18808:	70 e0       	ldi	r23, 0x00	; 0
   1880a:	ce 01       	movw	r24, r28
   1880c:	78 dc       	rcall	.-1808   	; 0x180fe <V2B_MSB>
   1880e:	de 01       	movw	r26, r28
   18810:	94 96       	adiw	r26, 0x24	; 36
   18812:	f7 01       	movw	r30, r14
   18814:	e7 5b       	subi	r30, 0xB7	; 183
   18816:	ff 4f       	sbci	r31, 0xFF	; 255
   18818:	86 e0       	ldi	r24, 0x06	; 6
   1881a:	01 90       	ld	r0, Z+
   1881c:	0d 92       	st	X+, r0
   1881e:	8a 95       	dec	r24
   18820:	e1 f7       	brne	.-8      	; 0x1881a <lif_vol2str+0x10a>
   18822:	cd b7       	in	r28, 0x3d	; 61
   18824:	de b7       	in	r29, 0x3e	; 62
   18826:	e6 e0       	ldi	r30, 0x06	; 6
   18828:	0c 94 35 e7 	jmp	0x1ce6a	; 0x1ce6a <__epilogue_restores__+0x18>

0001882c <lif_str2vol>:
   1882c:	0f 93       	push	r16
   1882e:	1f 93       	push	r17
   18830:	cf 93       	push	r28
   18832:	df 93       	push	r29
   18834:	8c 01       	movw	r16, r24
   18836:	eb 01       	movw	r28, r22
   18838:	42 e0       	ldi	r20, 0x02	; 2
   1883a:	50 e0       	ldi	r21, 0x00	; 0
   1883c:	60 e0       	ldi	r22, 0x00	; 0
   1883e:	70 e0       	ldi	r23, 0x00	; 0
   18840:	87 dc       	rcall	.-1778   	; 0x18150 <B2V_MSB>
   18842:	7d a3       	std	Y+37, r23	; 0x25
   18844:	6c a3       	std	Y+36, r22	; 0x24
   18846:	be 01       	movw	r22, r28
   18848:	6a 5d       	subi	r22, 0xDA	; 218
   1884a:	7f 4f       	sbci	r23, 0xFF	; 255
   1884c:	46 e0       	ldi	r20, 0x06	; 6
   1884e:	50 e0       	ldi	r21, 0x00	; 0
   18850:	c8 01       	movw	r24, r16
   18852:	02 96       	adiw	r24, 0x02	; 2
   18854:	ac de       	rcall	.-680    	; 0x185ae <lif_B2S>
   18856:	44 e0       	ldi	r20, 0x04	; 4
   18858:	50 e0       	ldi	r21, 0x00	; 0
   1885a:	68 e0       	ldi	r22, 0x08	; 8
   1885c:	70 e0       	ldi	r23, 0x00	; 0
   1885e:	c8 01       	movw	r24, r16
   18860:	77 dc       	rcall	.-1810   	; 0x18150 <B2V_MSB>
   18862:	6d a7       	std	Y+45, r22	; 0x2d
   18864:	7e a7       	std	Y+46, r23	; 0x2e
   18866:	8f a7       	std	Y+47, r24	; 0x2f
   18868:	98 ab       	std	Y+48, r25	; 0x30
   1886a:	42 e0       	ldi	r20, 0x02	; 2
   1886c:	50 e0       	ldi	r21, 0x00	; 0
   1886e:	6c e0       	ldi	r22, 0x0C	; 12
   18870:	70 e0       	ldi	r23, 0x00	; 0
   18872:	c8 01       	movw	r24, r16
   18874:	6d dc       	rcall	.-1830   	; 0x18150 <B2V_MSB>
   18876:	7a ab       	std	Y+50, r23	; 0x32
   18878:	69 ab       	std	Y+49, r22	; 0x31
   1887a:	42 e0       	ldi	r20, 0x02	; 2
   1887c:	50 e0       	ldi	r21, 0x00	; 0
   1887e:	6e e0       	ldi	r22, 0x0E	; 14
   18880:	70 e0       	ldi	r23, 0x00	; 0
   18882:	c8 01       	movw	r24, r16
   18884:	65 dc       	rcall	.-1846   	; 0x18150 <B2V_MSB>
   18886:	7c ab       	std	Y+52, r23	; 0x34
   18888:	6b ab       	std	Y+51, r22	; 0x33
   1888a:	44 e0       	ldi	r20, 0x04	; 4
   1888c:	50 e0       	ldi	r21, 0x00	; 0
   1888e:	60 e1       	ldi	r22, 0x10	; 16
   18890:	70 e0       	ldi	r23, 0x00	; 0
   18892:	c8 01       	movw	r24, r16
   18894:	5d dc       	rcall	.-1862   	; 0x18150 <B2V_MSB>
   18896:	6d ab       	std	Y+53, r22	; 0x35
   18898:	7e ab       	std	Y+54, r23	; 0x36
   1889a:	8f ab       	std	Y+55, r24	; 0x37
   1889c:	98 af       	std	Y+56, r25	; 0x38
   1889e:	42 e0       	ldi	r20, 0x02	; 2
   188a0:	50 e0       	ldi	r21, 0x00	; 0
   188a2:	64 e1       	ldi	r22, 0x14	; 20
   188a4:	70 e0       	ldi	r23, 0x00	; 0
   188a6:	c8 01       	movw	r24, r16
   188a8:	53 dc       	rcall	.-1882   	; 0x18150 <B2V_MSB>
   188aa:	7a af       	std	Y+58, r23	; 0x3a
   188ac:	69 af       	std	Y+57, r22	; 0x39
   188ae:	42 e0       	ldi	r20, 0x02	; 2
   188b0:	50 e0       	ldi	r21, 0x00	; 0
   188b2:	66 e1       	ldi	r22, 0x16	; 22
   188b4:	70 e0       	ldi	r23, 0x00	; 0
   188b6:	c8 01       	movw	r24, r16
   188b8:	4b dc       	rcall	.-1898   	; 0x18150 <B2V_MSB>
   188ba:	7c af       	std	Y+60, r23	; 0x3c
   188bc:	6b af       	std	Y+59, r22	; 0x3b
   188be:	44 e0       	ldi	r20, 0x04	; 4
   188c0:	50 e0       	ldi	r21, 0x00	; 0
   188c2:	68 e1       	ldi	r22, 0x18	; 24
   188c4:	70 e0       	ldi	r23, 0x00	; 0
   188c6:	c8 01       	movw	r24, r16
   188c8:	43 dc       	rcall	.-1914   	; 0x18150 <B2V_MSB>
   188ca:	fe 01       	movw	r30, r28
   188cc:	fd 96       	adiw	r30, 0x3d	; 61
   188ce:	60 83       	st	Z, r22
   188d0:	71 83       	std	Z+1, r23	; 0x01
   188d2:	82 83       	std	Z+2, r24	; 0x02
   188d4:	93 83       	std	Z+3, r25	; 0x03
   188d6:	44 e0       	ldi	r20, 0x04	; 4
   188d8:	50 e0       	ldi	r21, 0x00	; 0
   188da:	6c e1       	ldi	r22, 0x1C	; 28
   188dc:	70 e0       	ldi	r23, 0x00	; 0
   188de:	c8 01       	movw	r24, r16
   188e0:	37 dc       	rcall	.-1938   	; 0x18150 <B2V_MSB>
   188e2:	fe 01       	movw	r30, r28
   188e4:	ef 5b       	subi	r30, 0xBF	; 191
   188e6:	ff 4f       	sbci	r31, 0xFF	; 255
   188e8:	60 83       	st	Z, r22
   188ea:	71 83       	std	Z+1, r23	; 0x01
   188ec:	82 83       	std	Z+2, r24	; 0x02
   188ee:	93 83       	std	Z+3, r25	; 0x03
   188f0:	44 e0       	ldi	r20, 0x04	; 4
   188f2:	50 e0       	ldi	r21, 0x00	; 0
   188f4:	60 e2       	ldi	r22, 0x20	; 32
   188f6:	70 e0       	ldi	r23, 0x00	; 0
   188f8:	c8 01       	movw	r24, r16
   188fa:	2a dc       	rcall	.-1964   	; 0x18150 <B2V_MSB>
   188fc:	fe 01       	movw	r30, r28
   188fe:	eb 5b       	subi	r30, 0xBB	; 187
   18900:	ff 4f       	sbci	r31, 0xFF	; 255
   18902:	60 83       	st	Z, r22
   18904:	71 83       	std	Z+1, r23	; 0x01
   18906:	82 83       	std	Z+2, r24	; 0x02
   18908:	93 83       	std	Z+3, r25	; 0x03
   1890a:	de 01       	movw	r26, r28
   1890c:	a7 5b       	subi	r26, 0xB7	; 183
   1890e:	bf 4f       	sbci	r27, 0xFF	; 255
   18910:	f8 01       	movw	r30, r16
   18912:	b4 96       	adiw	r30, 0x24	; 36
   18914:	86 e0       	ldi	r24, 0x06	; 6
   18916:	01 90       	ld	r0, Z+
   18918:	0d 92       	st	X+, r0
   1891a:	8a 95       	dec	r24
   1891c:	e1 f7       	brne	.-8      	; 0x18916 <lif_str2vol+0xea>
   1891e:	df 91       	pop	r29
   18920:	cf 91       	pop	r28
   18922:	1f 91       	pop	r17
   18924:	0f 91       	pop	r16
   18926:	08 95       	ret

00018928 <lif_dir2str>:
   18928:	ef 92       	push	r14
   1892a:	ff 92       	push	r15
   1892c:	0f 93       	push	r16
   1892e:	1f 93       	push	r17
   18930:	cf 93       	push	r28
   18932:	df 93       	push	r29
   18934:	ec 01       	movw	r28, r24
   18936:	7b 01       	movw	r14, r22
   18938:	bc 01       	movw	r22, r24
   1893a:	61 5b       	subi	r22, 0xB1	; 177
   1893c:	7f 4f       	sbci	r23, 0xFF	; 255
   1893e:	4a e0       	ldi	r20, 0x0A	; 10
   18940:	50 e0       	ldi	r21, 0x00	; 0
   18942:	c7 01       	movw	r24, r14
   18944:	8b de       	rcall	.-746    	; 0x1865c <lif_S2B>
   18946:	fe 01       	movw	r30, r28
   18948:	e6 5a       	subi	r30, 0xA6	; 166
   1894a:	ff 4f       	sbci	r31, 0xFF	; 255
   1894c:	00 81       	ld	r16, Z
   1894e:	11 81       	ldd	r17, Z+1	; 0x01
   18950:	20 e0       	ldi	r18, 0x00	; 0
   18952:	30 e0       	ldi	r19, 0x00	; 0
   18954:	42 e0       	ldi	r20, 0x02	; 2
   18956:	50 e0       	ldi	r21, 0x00	; 0
   18958:	6a e0       	ldi	r22, 0x0A	; 10
   1895a:	70 e0       	ldi	r23, 0x00	; 0
   1895c:	c7 01       	movw	r24, r14
   1895e:	cf db       	rcall	.-2146   	; 0x180fe <V2B_MSB>
   18960:	fe 01       	movw	r30, r28
   18962:	e4 5a       	subi	r30, 0xA4	; 164
   18964:	ff 4f       	sbci	r31, 0xFF	; 255
   18966:	00 81       	ld	r16, Z
   18968:	11 81       	ldd	r17, Z+1	; 0x01
   1896a:	22 81       	ldd	r18, Z+2	; 0x02
   1896c:	33 81       	ldd	r19, Z+3	; 0x03
   1896e:	44 e0       	ldi	r20, 0x04	; 4
   18970:	50 e0       	ldi	r21, 0x00	; 0
   18972:	6c e0       	ldi	r22, 0x0C	; 12
   18974:	70 e0       	ldi	r23, 0x00	; 0
   18976:	c7 01       	movw	r24, r14
   18978:	c2 db       	rcall	.-2172   	; 0x180fe <V2B_MSB>
   1897a:	fe 01       	movw	r30, r28
   1897c:	e0 5a       	subi	r30, 0xA0	; 160
   1897e:	ff 4f       	sbci	r31, 0xFF	; 255
   18980:	00 81       	ld	r16, Z
   18982:	11 81       	ldd	r17, Z+1	; 0x01
   18984:	22 81       	ldd	r18, Z+2	; 0x02
   18986:	33 81       	ldd	r19, Z+3	; 0x03
   18988:	44 e0       	ldi	r20, 0x04	; 4
   1898a:	50 e0       	ldi	r21, 0x00	; 0
   1898c:	60 e1       	ldi	r22, 0x10	; 16
   1898e:	70 e0       	ldi	r23, 0x00	; 0
   18990:	c7 01       	movw	r24, r14
   18992:	b5 db       	rcall	.-2198   	; 0x180fe <V2B_MSB>
   18994:	d7 01       	movw	r26, r14
   18996:	54 96       	adiw	r26, 0x14	; 20
   18998:	fe 01       	movw	r30, r28
   1899a:	ec 59       	subi	r30, 0x9C	; 156
   1899c:	ff 4f       	sbci	r31, 0xFF	; 255
   1899e:	86 e0       	ldi	r24, 0x06	; 6
   189a0:	01 90       	ld	r0, Z+
   189a2:	0d 92       	st	X+, r0
   189a4:	8a 95       	dec	r24
   189a6:	e1 f7       	brne	.-8      	; 0x189a0 <lif_dir2str+0x78>
   189a8:	fe 01       	movw	r30, r28
   189aa:	e6 59       	subi	r30, 0x96	; 150
   189ac:	ff 4f       	sbci	r31, 0xFF	; 255
   189ae:	00 81       	ld	r16, Z
   189b0:	11 81       	ldd	r17, Z+1	; 0x01
   189b2:	20 e0       	ldi	r18, 0x00	; 0
   189b4:	30 e0       	ldi	r19, 0x00	; 0
   189b6:	42 e0       	ldi	r20, 0x02	; 2
   189b8:	50 e0       	ldi	r21, 0x00	; 0
   189ba:	6a e1       	ldi	r22, 0x1A	; 26
   189bc:	70 e0       	ldi	r23, 0x00	; 0
   189be:	c7 01       	movw	r24, r14
   189c0:	9e db       	rcall	.-2244   	; 0x180fe <V2B_MSB>
   189c2:	fe 01       	movw	r30, r28
   189c4:	e4 59       	subi	r30, 0x94	; 148
   189c6:	ff 4f       	sbci	r31, 0xFF	; 255
   189c8:	00 81       	ld	r16, Z
   189ca:	11 81       	ldd	r17, Z+1	; 0x01
   189cc:	20 e0       	ldi	r18, 0x00	; 0
   189ce:	30 e0       	ldi	r19, 0x00	; 0
   189d0:	42 e0       	ldi	r20, 0x02	; 2
   189d2:	50 e0       	ldi	r21, 0x00	; 0
   189d4:	6c e1       	ldi	r22, 0x1C	; 28
   189d6:	70 e0       	ldi	r23, 0x00	; 0
   189d8:	c7 01       	movw	r24, r14
   189da:	a5 db       	rcall	.-2230   	; 0x18126 <V2B_LSB>
   189dc:	c2 59       	subi	r28, 0x92	; 146
   189de:	df 4f       	sbci	r29, 0xFF	; 255
   189e0:	08 81       	ld	r16, Y
   189e2:	19 81       	ldd	r17, Y+1	; 0x01
   189e4:	20 e0       	ldi	r18, 0x00	; 0
   189e6:	30 e0       	ldi	r19, 0x00	; 0
   189e8:	42 e0       	ldi	r20, 0x02	; 2
   189ea:	50 e0       	ldi	r21, 0x00	; 0
   189ec:	6e e1       	ldi	r22, 0x1E	; 30
   189ee:	70 e0       	ldi	r23, 0x00	; 0
   189f0:	c7 01       	movw	r24, r14
   189f2:	99 db       	rcall	.-2254   	; 0x18126 <V2B_LSB>
   189f4:	cd b7       	in	r28, 0x3d	; 61
   189f6:	de b7       	in	r29, 0x3e	; 62
   189f8:	e6 e0       	ldi	r30, 0x06	; 6
   189fa:	0c 94 35 e7 	jmp	0x1ce6a	; 0x1ce6a <__epilogue_restores__+0x18>

000189fe <lif_str2dir>:
   189fe:	0f 93       	push	r16
   18a00:	1f 93       	push	r17
   18a02:	cf 93       	push	r28
   18a04:	df 93       	push	r29
   18a06:	8c 01       	movw	r16, r24
   18a08:	eb 01       	movw	r28, r22
   18a0a:	61 5b       	subi	r22, 0xB1	; 177
   18a0c:	7f 4f       	sbci	r23, 0xFF	; 255
   18a0e:	4a e0       	ldi	r20, 0x0A	; 10
   18a10:	50 e0       	ldi	r21, 0x00	; 0
   18a12:	cd dd       	rcall	.-1126   	; 0x185ae <lif_B2S>
   18a14:	42 e0       	ldi	r20, 0x02	; 2
   18a16:	50 e0       	ldi	r21, 0x00	; 0
   18a18:	6a e0       	ldi	r22, 0x0A	; 10
   18a1a:	70 e0       	ldi	r23, 0x00	; 0
   18a1c:	c8 01       	movw	r24, r16
   18a1e:	98 db       	rcall	.-2256   	; 0x18150 <B2V_MSB>
   18a20:	fe 01       	movw	r30, r28
   18a22:	e6 5a       	subi	r30, 0xA6	; 166
   18a24:	ff 4f       	sbci	r31, 0xFF	; 255
   18a26:	71 83       	std	Z+1, r23	; 0x01
   18a28:	60 83       	st	Z, r22
   18a2a:	44 e0       	ldi	r20, 0x04	; 4
   18a2c:	50 e0       	ldi	r21, 0x00	; 0
   18a2e:	6c e0       	ldi	r22, 0x0C	; 12
   18a30:	70 e0       	ldi	r23, 0x00	; 0
   18a32:	c8 01       	movw	r24, r16
   18a34:	8d db       	rcall	.-2278   	; 0x18150 <B2V_MSB>
   18a36:	fe 01       	movw	r30, r28
   18a38:	e4 5a       	subi	r30, 0xA4	; 164
   18a3a:	ff 4f       	sbci	r31, 0xFF	; 255
   18a3c:	60 83       	st	Z, r22
   18a3e:	71 83       	std	Z+1, r23	; 0x01
   18a40:	82 83       	std	Z+2, r24	; 0x02
   18a42:	93 83       	std	Z+3, r25	; 0x03
   18a44:	44 e0       	ldi	r20, 0x04	; 4
   18a46:	50 e0       	ldi	r21, 0x00	; 0
   18a48:	60 e1       	ldi	r22, 0x10	; 16
   18a4a:	70 e0       	ldi	r23, 0x00	; 0
   18a4c:	c8 01       	movw	r24, r16
   18a4e:	80 db       	rcall	.-2304   	; 0x18150 <B2V_MSB>
   18a50:	fe 01       	movw	r30, r28
   18a52:	e0 5a       	subi	r30, 0xA0	; 160
   18a54:	ff 4f       	sbci	r31, 0xFF	; 255
   18a56:	60 83       	st	Z, r22
   18a58:	71 83       	std	Z+1, r23	; 0x01
   18a5a:	82 83       	std	Z+2, r24	; 0x02
   18a5c:	93 83       	std	Z+3, r25	; 0x03
   18a5e:	de 01       	movw	r26, r28
   18a60:	ac 59       	subi	r26, 0x9C	; 156
   18a62:	bf 4f       	sbci	r27, 0xFF	; 255
   18a64:	f8 01       	movw	r30, r16
   18a66:	74 96       	adiw	r30, 0x14	; 20
   18a68:	86 e0       	ldi	r24, 0x06	; 6
   18a6a:	01 90       	ld	r0, Z+
   18a6c:	0d 92       	st	X+, r0
   18a6e:	8a 95       	dec	r24
   18a70:	e1 f7       	brne	.-8      	; 0x18a6a <lif_str2dir+0x6c>
   18a72:	42 e0       	ldi	r20, 0x02	; 2
   18a74:	50 e0       	ldi	r21, 0x00	; 0
   18a76:	6a e1       	ldi	r22, 0x1A	; 26
   18a78:	70 e0       	ldi	r23, 0x00	; 0
   18a7a:	c8 01       	movw	r24, r16
   18a7c:	69 db       	rcall	.-2350   	; 0x18150 <B2V_MSB>
   18a7e:	fe 01       	movw	r30, r28
   18a80:	e6 59       	subi	r30, 0x96	; 150
   18a82:	ff 4f       	sbci	r31, 0xFF	; 255
   18a84:	71 83       	std	Z+1, r23	; 0x01
   18a86:	60 83       	st	Z, r22
   18a88:	42 e0       	ldi	r20, 0x02	; 2
   18a8a:	50 e0       	ldi	r21, 0x00	; 0
   18a8c:	6c e1       	ldi	r22, 0x1C	; 28
   18a8e:	70 e0       	ldi	r23, 0x00	; 0
   18a90:	c8 01       	movw	r24, r16
   18a92:	7d db       	rcall	.-2310   	; 0x1818e <B2V_LSB>
   18a94:	fe 01       	movw	r30, r28
   18a96:	e4 59       	subi	r30, 0x94	; 148
   18a98:	ff 4f       	sbci	r31, 0xFF	; 255
   18a9a:	71 83       	std	Z+1, r23	; 0x01
   18a9c:	60 83       	st	Z, r22
   18a9e:	42 e0       	ldi	r20, 0x02	; 2
   18aa0:	50 e0       	ldi	r21, 0x00	; 0
   18aa2:	6e e1       	ldi	r22, 0x1E	; 30
   18aa4:	70 e0       	ldi	r23, 0x00	; 0
   18aa6:	c8 01       	movw	r24, r16
   18aa8:	72 db       	rcall	.-2332   	; 0x1818e <B2V_LSB>
   18aaa:	c2 59       	subi	r28, 0x92	; 146
   18aac:	df 4f       	sbci	r29, 0xFF	; 255
   18aae:	79 83       	std	Y+1, r23	; 0x01
   18ab0:	68 83       	st	Y, r22
   18ab2:	df 91       	pop	r29
   18ab4:	cf 91       	pop	r28
   18ab6:	1f 91       	pop	r17
   18ab8:	0f 91       	pop	r16
   18aba:	08 95       	ret

00018abc <lif_BIN2BCD>:
   18abc:	6a e0       	ldi	r22, 0x0A	; 10
   18abe:	0e 94 6d e6 	call	0x1ccda	; 0x1ccda <__udivmodqi4>
   18ac2:	82 95       	swap	r24
   18ac4:	80 7f       	andi	r24, 0xF0	; 240
   18ac6:	89 2b       	or	r24, r25
   18ac8:	08 95       	ret

00018aca <lif_BCD2BIN>:
   18aca:	28 2f       	mov	r18, r24
   18acc:	22 95       	swap	r18
   18ace:	2f 70       	andi	r18, 0x0F	; 15
   18ad0:	8f 70       	andi	r24, 0x0F	; 15
   18ad2:	90 e0       	ldi	r25, 0x00	; 0
   18ad4:	3a e0       	ldi	r19, 0x0A	; 10
   18ad6:	23 9f       	mul	r18, r19
   18ad8:	80 0d       	add	r24, r0
   18ada:	91 1d       	adc	r25, r1
   18adc:	11 24       	eor	r1, r1
   18ade:	08 95       	ret

00018ae0 <lif_time2lifbcd>:
   18ae0:	aa e1       	ldi	r26, 0x1A	; 26
   18ae2:	b0 e0       	ldi	r27, 0x00	; 0
   18ae4:	e6 e7       	ldi	r30, 0x76	; 118
   18ae6:	f5 ec       	ldi	r31, 0xC5	; 197
   18ae8:	0c 94 1b e7 	jmp	0x1ce36	; 0x1ce36 <__prologue_saves__+0x1c>
   18aec:	8b 01       	movw	r16, r22
   18aee:	9c 01       	movw	r18, r24
   18af0:	6f 8b       	std	Y+23, r22	; 0x17
   18af2:	78 8f       	std	Y+24, r23	; 0x18
   18af4:	89 8f       	std	Y+25, r24	; 0x19
   18af6:	9a 8f       	std	Y+26, r25	; 0x1a
   18af8:	67 2b       	or	r22, r23
   18afa:	68 2b       	or	r22, r24
   18afc:	69 2b       	or	r22, r25
   18afe:	41 f4       	brne	.+16     	; 0x18b10 <lif_time2lifbcd+0x30>
   18b00:	fa 01       	movw	r30, r20
   18b02:	ca 01       	movw	r24, r20
   18b04:	06 96       	adiw	r24, 0x06	; 6
   18b06:	11 92       	st	Z+, r1
   18b08:	e8 17       	cp	r30, r24
   18b0a:	f9 07       	cpc	r31, r25
   18b0c:	e1 f7       	brne	.-8      	; 0x18b06 <lif_time2lifbcd+0x26>
   18b0e:	26 c0       	rjmp	.+76     	; 0x18b5c <lif_time2lifbcd+0x7c>
   18b10:	8a 01       	movw	r16, r20
   18b12:	be 01       	movw	r22, r28
   18b14:	6f 5f       	subi	r22, 0xFF	; 255
   18b16:	7f 4f       	sbci	r23, 0xFF	; 255
   18b18:	ce 01       	movw	r24, r28
   18b1a:	47 96       	adiw	r24, 0x17	; 23
   18b1c:	0e 94 bf 37 	call	0x6f7e	; 0x6f7e <gmtime_r>
   18b20:	8b 85       	ldd	r24, Y+11	; 0x0b
   18b22:	9c 85       	ldd	r25, Y+12	; 0x0c
   18b24:	64 e6       	ldi	r22, 0x64	; 100
   18b26:	70 e0       	ldi	r23, 0x00	; 0
   18b28:	0e 94 8d e6 	call	0x1cd1a	; 0x1cd1a <__divmodhi4>
   18b2c:	c7 df       	rcall	.-114    	; 0x18abc <lif_BIN2BCD>
   18b2e:	f8 01       	movw	r30, r16
   18b30:	80 83       	st	Z, r24
   18b32:	89 85       	ldd	r24, Y+9	; 0x09
   18b34:	8f 5f       	subi	r24, 0xFF	; 255
   18b36:	c2 df       	rcall	.-124    	; 0x18abc <lif_BIN2BCD>
   18b38:	f8 01       	movw	r30, r16
   18b3a:	81 83       	std	Z+1, r24	; 0x01
   18b3c:	8f 81       	ldd	r24, Y+7	; 0x07
   18b3e:	be df       	rcall	.-132    	; 0x18abc <lif_BIN2BCD>
   18b40:	f8 01       	movw	r30, r16
   18b42:	82 83       	std	Z+2, r24	; 0x02
   18b44:	8d 81       	ldd	r24, Y+5	; 0x05
   18b46:	ba df       	rcall	.-140    	; 0x18abc <lif_BIN2BCD>
   18b48:	f8 01       	movw	r30, r16
   18b4a:	83 83       	std	Z+3, r24	; 0x03
   18b4c:	8b 81       	ldd	r24, Y+3	; 0x03
   18b4e:	b6 df       	rcall	.-148    	; 0x18abc <lif_BIN2BCD>
   18b50:	f8 01       	movw	r30, r16
   18b52:	84 83       	std	Z+4, r24	; 0x04
   18b54:	89 81       	ldd	r24, Y+1	; 0x01
   18b56:	b2 df       	rcall	.-156    	; 0x18abc <lif_BIN2BCD>
   18b58:	f8 01       	movw	r30, r16
   18b5a:	85 83       	std	Z+5, r24	; 0x05
   18b5c:	6a 96       	adiw	r28, 0x1a	; 26
   18b5e:	e4 e0       	ldi	r30, 0x04	; 4
   18b60:	0c 94 37 e7 	jmp	0x1ce6e	; 0x1ce6e <__epilogue_restores__+0x1c>

00018b64 <lif_lifbcd2time>:
   18b64:	a6 e1       	ldi	r26, 0x16	; 22
   18b66:	b0 e0       	ldi	r27, 0x00	; 0
   18b68:	e8 eb       	ldi	r30, 0xB8	; 184
   18b6a:	f5 ec       	ldi	r31, 0xC5	; 197
   18b6c:	0c 94 15 e7 	jmp	0x1ce2a	; 0x1ce2a <__prologue_saves__+0x10>
   18b70:	8c 01       	movw	r16, r24
   18b72:	7c 01       	movw	r14, r24
   18b74:	5c 01       	movw	r10, r24
   18b76:	26 e0       	ldi	r18, 0x06	; 6
   18b78:	a2 0e       	add	r10, r18
   18b7a:	b1 1c       	adc	r11, r1
   18b7c:	cc 24       	eor	r12, r12
   18b7e:	c3 94       	inc	r12
   18b80:	d1 2c       	mov	r13, r1
   18b82:	f7 01       	movw	r30, r14
   18b84:	81 91       	ld	r24, Z+
   18b86:	7f 01       	movw	r14, r30
   18b88:	a0 df       	rcall	.-192    	; 0x18aca <lif_BCD2BIN>
   18b8a:	89 2b       	or	r24, r25
   18b8c:	11 f0       	breq	.+4      	; 0x18b92 <lif_lifbcd2time+0x2e>
   18b8e:	c1 2c       	mov	r12, r1
   18b90:	d1 2c       	mov	r13, r1
   18b92:	ea 14       	cp	r14, r10
   18b94:	fb 04       	cpc	r15, r11
   18b96:	a9 f7       	brne	.-22     	; 0x18b82 <lif_lifbcd2time+0x1e>
   18b98:	c1 14       	cp	r12, r1
   18b9a:	d1 04       	cpc	r13, r1
   18b9c:	61 f5       	brne	.+88     	; 0x18bf6 <lif_lifbcd2time+0x92>
   18b9e:	f8 01       	movw	r30, r16
   18ba0:	80 81       	ld	r24, Z
   18ba2:	93 df       	rcall	.-218    	; 0x18aca <lif_BCD2BIN>
   18ba4:	7c 01       	movw	r14, r24
   18ba6:	f8 01       	movw	r30, r16
   18ba8:	81 81       	ldd	r24, Z+1	; 0x01
   18baa:	8f df       	rcall	.-226    	; 0x18aca <lif_BCD2BIN>
   18bac:	01 97       	sbiw	r24, 0x01	; 1
   18bae:	f6 e4       	ldi	r31, 0x46	; 70
   18bb0:	ef 16       	cp	r14, r31
   18bb2:	f1 04       	cpc	r15, r1
   18bb4:	1c f4       	brge	.+6      	; 0x18bbc <lif_lifbcd2time+0x58>
   18bb6:	24 e6       	ldi	r18, 0x64	; 100
   18bb8:	e2 0e       	add	r14, r18
   18bba:	f1 1c       	adc	r15, r1
   18bbc:	fc 86       	std	Y+12, r15	; 0x0c
   18bbe:	eb 86       	std	Y+11, r14	; 0x0b
   18bc0:	9a 87       	std	Y+10, r25	; 0x0a
   18bc2:	89 87       	std	Y+9, r24	; 0x09
   18bc4:	f8 01       	movw	r30, r16
   18bc6:	82 81       	ldd	r24, Z+2	; 0x02
   18bc8:	80 df       	rcall	.-256    	; 0x18aca <lif_BCD2BIN>
   18bca:	98 87       	std	Y+8, r25	; 0x08
   18bcc:	8f 83       	std	Y+7, r24	; 0x07
   18bce:	f8 01       	movw	r30, r16
   18bd0:	83 81       	ldd	r24, Z+3	; 0x03
   18bd2:	7b df       	rcall	.-266    	; 0x18aca <lif_BCD2BIN>
   18bd4:	9e 83       	std	Y+6, r25	; 0x06
   18bd6:	8d 83       	std	Y+5, r24	; 0x05
   18bd8:	f8 01       	movw	r30, r16
   18bda:	84 81       	ldd	r24, Z+4	; 0x04
   18bdc:	76 df       	rcall	.-276    	; 0x18aca <lif_BCD2BIN>
   18bde:	9c 83       	std	Y+4, r25	; 0x04
   18be0:	8b 83       	std	Y+3, r24	; 0x03
   18be2:	f8 01       	movw	r30, r16
   18be4:	85 81       	ldd	r24, Z+5	; 0x05
   18be6:	71 df       	rcall	.-286    	; 0x18aca <lif_BCD2BIN>
   18be8:	9a 83       	std	Y+2, r25	; 0x02
   18bea:	89 83       	std	Y+1, r24	; 0x01
   18bec:	ce 01       	movw	r24, r28
   18bee:	01 96       	adiw	r24, 0x01	; 1
   18bf0:	0e 94 93 3a 	call	0x7526	; 0x7526 <timegm>
   18bf4:	03 c0       	rjmp	.+6      	; 0x18bfc <lif_lifbcd2time+0x98>
   18bf6:	60 e0       	ldi	r22, 0x00	; 0
   18bf8:	70 e0       	ldi	r23, 0x00	; 0
   18bfa:	cb 01       	movw	r24, r22
   18bfc:	66 96       	adiw	r28, 0x16	; 22
   18bfe:	ea e0       	ldi	r30, 0x0A	; 10
   18c00:	0c 94 31 e7 	jmp	0x1ce62	; 0x1ce62 <__epilogue_restores__+0x10>

00018c04 <lif_ctime_gmt>:
   18c04:	a6 e1       	ldi	r26, 0x16	; 22
   18c06:	b0 e0       	ldi	r27, 0x00	; 0
   18c08:	e8 e0       	ldi	r30, 0x08	; 8
   18c0a:	f6 ec       	ldi	r31, 0xC6	; 198
   18c0c:	0c 94 1b e7 	jmp	0x1ce36	; 0x1ce36 <__prologue_saves__+0x1c>
   18c10:	20 e2       	ldi	r18, 0x20	; 32
   18c12:	ea ec       	ldi	r30, 0xCA	; 202
   18c14:	f9 e1       	ldi	r31, 0x19	; 25
   18c16:	df 01       	movw	r26, r30
   18c18:	1d 92       	st	X+, r1
   18c1a:	2a 95       	dec	r18
   18c1c:	e9 f7       	brne	.-6      	; 0x18c18 <lif_ctime_gmt+0x14>
   18c1e:	be 01       	movw	r22, r28
   18c20:	6f 5f       	subi	r22, 0xFF	; 255
   18c22:	7f 4f       	sbci	r23, 0xFF	; 255
   18c24:	0e 94 bf 37 	call	0x6f7e	; 0x6f7e <gmtime_r>
   18c28:	6a ec       	ldi	r22, 0xCA	; 202
   18c2a:	79 e1       	ldi	r23, 0x19	; 25
   18c2c:	0e 94 ef 3c 	call	0x79de	; 0x79de <asctime_r>
   18c30:	8c 01       	movw	r16, r24
   18c32:	0e 94 4b 32 	call	0x6496	; 0x6496 <trim_tail>
   18c36:	c8 01       	movw	r24, r16
   18c38:	66 96       	adiw	r28, 0x16	; 22
   18c3a:	e4 e0       	ldi	r30, 0x04	; 4
   18c3c:	0c 94 37 e7 	jmp	0x1ce6e	; 0x1ce6e <__epilogue_restores__+0x1c>

00018c40 <lif_lifbcd2timestr>:
   18c40:	a4 e0       	ldi	r26, 0x04	; 4
   18c42:	b0 e0       	ldi	r27, 0x00	; 0
   18c44:	e6 e2       	ldi	r30, 0x26	; 38
   18c46:	f6 ec       	ldi	r31, 0xC6	; 198
   18c48:	0c 94 1d e7 	jmp	0x1ce3a	; 0x1ce3a <__prologue_saves__+0x20>
   18c4c:	20 e2       	ldi	r18, 0x20	; 32
   18c4e:	ea ea       	ldi	r30, 0xAA	; 170
   18c50:	f9 e1       	ldi	r31, 0x19	; 25
   18c52:	df 01       	movw	r26, r30
   18c54:	1d 92       	st	X+, r1
   18c56:	2a 95       	dec	r18
   18c58:	e9 f7       	brne	.-6      	; 0x18c54 <lif_lifbcd2timestr+0x14>
   18c5a:	84 df       	rcall	.-248    	; 0x18b64 <lif_lifbcd2time>
   18c5c:	69 83       	std	Y+1, r22	; 0x01
   18c5e:	7a 83       	std	Y+2, r23	; 0x02
   18c60:	8b 83       	std	Y+3, r24	; 0x03
   18c62:	9c 83       	std	Y+4, r25	; 0x04
   18c64:	67 2b       	or	r22, r23
   18c66:	68 2b       	or	r22, r24
   18c68:	69 2b       	or	r22, r25
   18c6a:	29 f0       	breq	.+10     	; 0x18c76 <lif_lifbcd2timestr+0x36>
   18c6c:	ce 01       	movw	r24, r28
   18c6e:	01 96       	adiw	r24, 0x01	; 1
   18c70:	c9 df       	rcall	.-110    	; 0x18c04 <lif_ctime_gmt>
   18c72:	bc 01       	movw	r22, r24
   18c74:	02 c0       	rjmp	.+4      	; 0x18c7a <lif_lifbcd2timestr+0x3a>
   18c76:	68 ee       	ldi	r22, 0xE8	; 232
   18c78:	75 e1       	ldi	r23, 0x15	; 21
   18c7a:	8a ea       	ldi	r24, 0xAA	; 170
   18c7c:	99 e1       	ldi	r25, 0x19	; 25
   18c7e:	0e 94 6d 31 	call	0x62da	; 0x62da <strcpy>
   18c82:	8a ea       	ldi	r24, 0xAA	; 170
   18c84:	99 e1       	ldi	r25, 0x19	; 25
   18c86:	24 96       	adiw	r28, 0x04	; 4
   18c88:	e2 e0       	ldi	r30, 0x02	; 2
   18c8a:	0c 94 39 e7 	jmp	0x1ce72	; 0x1ce72 <__epilogue_restores__+0x20>

00018c8e <lif_image_clear>:
   18c8e:	20 e7       	ldi	r18, 0x70	; 112
   18c90:	fc 01       	movw	r30, r24
   18c92:	11 92       	st	Z+, r1
   18c94:	2a 95       	dec	r18
   18c96:	e9 f7       	brne	.-6      	; 0x18c92 <lif_image_clear+0x4>
   18c98:	08 95       	ret

00018c9a <lif_dir_clear>:
   18c9a:	81 5b       	subi	r24, 0xB1	; 177
   18c9c:	9f 4f       	sbci	r25, 0xFF	; 255
   18c9e:	21 e2       	ldi	r18, 0x21	; 33
   18ca0:	fc 01       	movw	r30, r24
   18ca2:	11 92       	st	Z+, r1
   18ca4:	2a 95       	dec	r18
   18ca6:	e9 f7       	brne	.-6      	; 0x18ca2 <lif_dir_clear+0x8>
   18ca8:	08 95       	ret

00018caa <lif_vol_clear>:
   18caa:	84 96       	adiw	r24, 0x24	; 36
   18cac:	2b e2       	ldi	r18, 0x2B	; 43
   18cae:	fc 01       	movw	r30, r24
   18cb0:	11 92       	st	Z+, r1
   18cb2:	2a 95       	dec	r18
   18cb4:	e9 f7       	brne	.-6      	; 0x18cb0 <lif_vol_clear+0x6>
   18cb6:	08 95       	ret

00018cb8 <lif_dump_vol>:
   18cb8:	cf 93       	push	r28
   18cba:	df 93       	push	r29
   18cbc:	ad b7       	in	r26, 0x3d	; 61
   18cbe:	be b7       	in	r27, 0x3e	; 62
   18cc0:	17 97       	sbiw	r26, 0x07	; 7
   18cc2:	0f b6       	in	r0, 0x3f	; 63
   18cc4:	f8 94       	cli
   18cc6:	be bf       	out	0x3e, r27	; 62
   18cc8:	0f be       	out	0x3f, r0	; 63
   18cca:	ad bf       	out	0x3d, r26	; 61
   18ccc:	ec 01       	movw	r28, r24
   18cce:	ed b7       	in	r30, 0x3d	; 61
   18cd0:	fe b7       	in	r31, 0x3e	; 62
   18cd2:	75 83       	std	Z+5, r23	; 0x05
   18cd4:	64 83       	std	Z+4, r22	; 0x04
   18cd6:	82 ee       	ldi	r24, 0xE2	; 226
   18cd8:	93 e4       	ldi	r25, 0x43	; 67
   18cda:	a0 e0       	ldi	r26, 0x00	; 0
   18cdc:	81 83       	std	Z+1, r24	; 0x01
   18cde:	92 83       	std	Z+2, r25	; 0x02
   18ce0:	a3 83       	std	Z+3, r26	; 0x03
   18ce2:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   18ce6:	88 81       	ld	r24, Y
   18ce8:	99 81       	ldd	r25, Y+1	; 0x01
   18cea:	ed b7       	in	r30, 0x3d	; 61
   18cec:	fe b7       	in	r31, 0x3e	; 62
   18cee:	95 83       	std	Z+5, r25	; 0x05
   18cf0:	84 83       	std	Z+4, r24	; 0x04
   18cf2:	88 ec       	ldi	r24, 0xC8	; 200
   18cf4:	93 e4       	ldi	r25, 0x43	; 67
   18cf6:	a0 e0       	ldi	r26, 0x00	; 0
   18cf8:	81 83       	std	Z+1, r24	; 0x01
   18cfa:	92 83       	std	Z+2, r25	; 0x02
   18cfc:	a3 83       	std	Z+3, r26	; 0x03
   18cfe:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   18d02:	8c 81       	ldd	r24, Y+4	; 0x04
   18d04:	9d 81       	ldd	r25, Y+5	; 0x05
   18d06:	ae 81       	ldd	r26, Y+6	; 0x06
   18d08:	bf 81       	ldd	r27, Y+7	; 0x07
   18d0a:	ed b7       	in	r30, 0x3d	; 61
   18d0c:	fe b7       	in	r31, 0x3e	; 62
   18d0e:	84 83       	std	Z+4, r24	; 0x04
   18d10:	95 83       	std	Z+5, r25	; 0x05
   18d12:	a6 83       	std	Z+6, r26	; 0x06
   18d14:	b7 83       	std	Z+7, r27	; 0x07
   18d16:	8b ea       	ldi	r24, 0xAB	; 171
   18d18:	93 e4       	ldi	r25, 0x43	; 67
   18d1a:	a0 e0       	ldi	r26, 0x00	; 0
   18d1c:	81 83       	std	Z+1, r24	; 0x01
   18d1e:	92 83       	std	Z+2, r25	; 0x02
   18d20:	a3 83       	std	Z+3, r26	; 0x03
   18d22:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   18d26:	88 85       	ldd	r24, Y+8	; 0x08
   18d28:	99 85       	ldd	r25, Y+9	; 0x09
   18d2a:	aa 85       	ldd	r26, Y+10	; 0x0a
   18d2c:	bb 85       	ldd	r27, Y+11	; 0x0b
   18d2e:	ed b7       	in	r30, 0x3d	; 61
   18d30:	fe b7       	in	r31, 0x3e	; 62
   18d32:	84 83       	std	Z+4, r24	; 0x04
   18d34:	95 83       	std	Z+5, r25	; 0x05
   18d36:	a6 83       	std	Z+6, r26	; 0x06
   18d38:	b7 83       	std	Z+7, r27	; 0x07
   18d3a:	8e e8       	ldi	r24, 0x8E	; 142
   18d3c:	93 e4       	ldi	r25, 0x43	; 67
   18d3e:	a0 e0       	ldi	r26, 0x00	; 0
   18d40:	81 83       	std	Z+1, r24	; 0x01
   18d42:	92 83       	std	Z+2, r25	; 0x02
   18d44:	a3 83       	std	Z+3, r26	; 0x03
   18d46:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   18d4a:	8c 85       	ldd	r24, Y+12	; 0x0c
   18d4c:	9d 85       	ldd	r25, Y+13	; 0x0d
   18d4e:	ae 85       	ldd	r26, Y+14	; 0x0e
   18d50:	bf 85       	ldd	r27, Y+15	; 0x0f
   18d52:	ed b7       	in	r30, 0x3d	; 61
   18d54:	fe b7       	in	r31, 0x3e	; 62
   18d56:	84 83       	std	Z+4, r24	; 0x04
   18d58:	95 83       	std	Z+5, r25	; 0x05
   18d5a:	a6 83       	std	Z+6, r26	; 0x06
   18d5c:	b7 83       	std	Z+7, r27	; 0x07
   18d5e:	81 e7       	ldi	r24, 0x71	; 113
   18d60:	93 e4       	ldi	r25, 0x43	; 67
   18d62:	a0 e0       	ldi	r26, 0x00	; 0
   18d64:	81 83       	std	Z+1, r24	; 0x01
   18d66:	92 83       	std	Z+2, r25	; 0x02
   18d68:	a3 83       	std	Z+3, r26	; 0x03
   18d6a:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   18d6e:	88 89       	ldd	r24, Y+16	; 0x10
   18d70:	99 89       	ldd	r25, Y+17	; 0x11
   18d72:	aa 89       	ldd	r26, Y+18	; 0x12
   18d74:	bb 89       	ldd	r27, Y+19	; 0x13
   18d76:	ed b7       	in	r30, 0x3d	; 61
   18d78:	fe b7       	in	r31, 0x3e	; 62
   18d7a:	84 83       	std	Z+4, r24	; 0x04
   18d7c:	95 83       	std	Z+5, r25	; 0x05
   18d7e:	a6 83       	std	Z+6, r26	; 0x06
   18d80:	b7 83       	std	Z+7, r27	; 0x07
   18d82:	84 e5       	ldi	r24, 0x54	; 84
   18d84:	93 e4       	ldi	r25, 0x43	; 67
   18d86:	a0 e0       	ldi	r26, 0x00	; 0
   18d88:	81 83       	std	Z+1, r24	; 0x01
   18d8a:	92 83       	std	Z+2, r25	; 0x02
   18d8c:	a3 83       	std	Z+3, r26	; 0x03
   18d8e:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   18d92:	8c 89       	ldd	r24, Y+20	; 0x14
   18d94:	9d 89       	ldd	r25, Y+21	; 0x15
   18d96:	ae 89       	ldd	r26, Y+22	; 0x16
   18d98:	bf 89       	ldd	r27, Y+23	; 0x17
   18d9a:	ed b7       	in	r30, 0x3d	; 61
   18d9c:	fe b7       	in	r31, 0x3e	; 62
   18d9e:	84 83       	std	Z+4, r24	; 0x04
   18da0:	95 83       	std	Z+5, r25	; 0x05
   18da2:	a6 83       	std	Z+6, r26	; 0x06
   18da4:	b7 83       	std	Z+7, r27	; 0x07
   18da6:	87 e3       	ldi	r24, 0x37	; 55
   18da8:	93 e4       	ldi	r25, 0x43	; 67
   18daa:	a0 e0       	ldi	r26, 0x00	; 0
   18dac:	81 83       	std	Z+1, r24	; 0x01
   18dae:	92 83       	std	Z+2, r25	; 0x02
   18db0:	a3 83       	std	Z+3, r26	; 0x03
   18db2:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   18db6:	88 8d       	ldd	r24, Y+24	; 0x18
   18db8:	99 8d       	ldd	r25, Y+25	; 0x19
   18dba:	aa 8d       	ldd	r26, Y+26	; 0x1a
   18dbc:	bb 8d       	ldd	r27, Y+27	; 0x1b
   18dbe:	ed b7       	in	r30, 0x3d	; 61
   18dc0:	fe b7       	in	r31, 0x3e	; 62
   18dc2:	84 83       	std	Z+4, r24	; 0x04
   18dc4:	95 83       	std	Z+5, r25	; 0x05
   18dc6:	a6 83       	std	Z+6, r26	; 0x06
   18dc8:	b7 83       	std	Z+7, r27	; 0x07
   18dca:	8a e1       	ldi	r24, 0x1A	; 26
   18dcc:	93 e4       	ldi	r25, 0x43	; 67
   18dce:	a0 e0       	ldi	r26, 0x00	; 0
   18dd0:	81 83       	std	Z+1, r24	; 0x01
   18dd2:	92 83       	std	Z+2, r25	; 0x02
   18dd4:	a3 83       	std	Z+3, r26	; 0x03
   18dd6:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   18dda:	8c 8d       	ldd	r24, Y+28	; 0x1c
   18ddc:	9d 8d       	ldd	r25, Y+29	; 0x1d
   18dde:	09 2e       	mov	r0, r25
   18de0:	00 0c       	add	r0, r0
   18de2:	aa 0b       	sbc	r26, r26
   18de4:	bb 0b       	sbc	r27, r27
   18de6:	ed b7       	in	r30, 0x3d	; 61
   18de8:	fe b7       	in	r31, 0x3e	; 62
   18dea:	84 83       	std	Z+4, r24	; 0x04
   18dec:	95 83       	std	Z+5, r25	; 0x05
   18dee:	a6 83       	std	Z+6, r26	; 0x06
   18df0:	b7 83       	std	Z+7, r27	; 0x07
   18df2:	8d ef       	ldi	r24, 0xFD	; 253
   18df4:	92 e4       	ldi	r25, 0x42	; 66
   18df6:	a0 e0       	ldi	r26, 0x00	; 0
   18df8:	81 83       	std	Z+1, r24	; 0x01
   18dfa:	92 83       	std	Z+2, r25	; 0x02
   18dfc:	a3 83       	std	Z+3, r26	; 0x03
   18dfe:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   18e02:	8e 8d       	ldd	r24, Y+30	; 0x1e
   18e04:	9f 8d       	ldd	r25, Y+31	; 0x1f
   18e06:	09 2e       	mov	r0, r25
   18e08:	00 0c       	add	r0, r0
   18e0a:	aa 0b       	sbc	r26, r26
   18e0c:	bb 0b       	sbc	r27, r27
   18e0e:	ed b7       	in	r30, 0x3d	; 61
   18e10:	fe b7       	in	r31, 0x3e	; 62
   18e12:	84 83       	std	Z+4, r24	; 0x04
   18e14:	95 83       	std	Z+5, r25	; 0x05
   18e16:	a6 83       	std	Z+6, r26	; 0x06
   18e18:	b7 83       	std	Z+7, r27	; 0x07
   18e1a:	80 ee       	ldi	r24, 0xE0	; 224
   18e1c:	92 e4       	ldi	r25, 0x42	; 66
   18e1e:	a0 e0       	ldi	r26, 0x00	; 0
   18e20:	81 83       	std	Z+1, r24	; 0x01
   18e22:	92 83       	std	Z+2, r25	; 0x02
   18e24:	a3 83       	std	Z+3, r26	; 0x03
   18e26:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   18e2a:	ce 01       	movw	r24, r28
   18e2c:	86 96       	adiw	r24, 0x26	; 38
   18e2e:	ed b7       	in	r30, 0x3d	; 61
   18e30:	fe b7       	in	r31, 0x3e	; 62
   18e32:	95 83       	std	Z+5, r25	; 0x05
   18e34:	84 83       	std	Z+4, r24	; 0x04
   18e36:	86 ec       	ldi	r24, 0xC6	; 198
   18e38:	92 e4       	ldi	r25, 0x42	; 66
   18e3a:	a0 e0       	ldi	r26, 0x00	; 0
   18e3c:	81 83       	std	Z+1, r24	; 0x01
   18e3e:	92 83       	std	Z+2, r25	; 0x02
   18e40:	a3 83       	std	Z+3, r26	; 0x03
   18e42:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   18e46:	8c a1       	ldd	r24, Y+36	; 0x24
   18e48:	9d a1       	ldd	r25, Y+37	; 0x25
   18e4a:	ed b7       	in	r30, 0x3d	; 61
   18e4c:	fe b7       	in	r31, 0x3e	; 62
   18e4e:	95 83       	std	Z+5, r25	; 0x05
   18e50:	84 83       	std	Z+4, r24	; 0x04
   18e52:	8a ea       	ldi	r24, 0xAA	; 170
   18e54:	92 e4       	ldi	r25, 0x42	; 66
   18e56:	a0 e0       	ldi	r26, 0x00	; 0
   18e58:	81 83       	std	Z+1, r24	; 0x01
   18e5a:	92 83       	std	Z+2, r25	; 0x02
   18e5c:	a3 83       	std	Z+3, r26	; 0x03
   18e5e:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   18e62:	8d a5       	ldd	r24, Y+45	; 0x2d
   18e64:	9e a5       	ldd	r25, Y+46	; 0x2e
   18e66:	af a5       	ldd	r26, Y+47	; 0x2f
   18e68:	b8 a9       	ldd	r27, Y+48	; 0x30
   18e6a:	ed b7       	in	r30, 0x3d	; 61
   18e6c:	fe b7       	in	r31, 0x3e	; 62
   18e6e:	84 83       	std	Z+4, r24	; 0x04
   18e70:	95 83       	std	Z+5, r25	; 0x05
   18e72:	a6 83       	std	Z+6, r26	; 0x06
   18e74:	b7 83       	std	Z+7, r27	; 0x07
   18e76:	8d e8       	ldi	r24, 0x8D	; 141
   18e78:	92 e4       	ldi	r25, 0x42	; 66
   18e7a:	a0 e0       	ldi	r26, 0x00	; 0
   18e7c:	81 83       	std	Z+1, r24	; 0x01
   18e7e:	92 83       	std	Z+2, r25	; 0x02
   18e80:	a3 83       	std	Z+3, r26	; 0x03
   18e82:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   18e86:	8d a9       	ldd	r24, Y+53	; 0x35
   18e88:	9e a9       	ldd	r25, Y+54	; 0x36
   18e8a:	af a9       	ldd	r26, Y+55	; 0x37
   18e8c:	b8 ad       	ldd	r27, Y+56	; 0x38
   18e8e:	ed b7       	in	r30, 0x3d	; 61
   18e90:	fe b7       	in	r31, 0x3e	; 62
   18e92:	84 83       	std	Z+4, r24	; 0x04
   18e94:	95 83       	std	Z+5, r25	; 0x05
   18e96:	a6 83       	std	Z+6, r26	; 0x06
   18e98:	b7 83       	std	Z+7, r27	; 0x07
   18e9a:	80 e7       	ldi	r24, 0x70	; 112
   18e9c:	92 e4       	ldi	r25, 0x42	; 66
   18e9e:	a0 e0       	ldi	r26, 0x00	; 0
   18ea0:	81 83       	std	Z+1, r24	; 0x01
   18ea2:	92 83       	std	Z+2, r25	; 0x02
   18ea4:	a3 83       	std	Z+3, r26	; 0x03
   18ea6:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   18eaa:	89 a9       	ldd	r24, Y+49	; 0x31
   18eac:	9a a9       	ldd	r25, Y+50	; 0x32
   18eae:	ed b7       	in	r30, 0x3d	; 61
   18eb0:	fe b7       	in	r31, 0x3e	; 62
   18eb2:	95 83       	std	Z+5, r25	; 0x05
   18eb4:	84 83       	std	Z+4, r24	; 0x04
   18eb6:	84 e5       	ldi	r24, 0x54	; 84
   18eb8:	92 e4       	ldi	r25, 0x42	; 66
   18eba:	a0 e0       	ldi	r26, 0x00	; 0
   18ebc:	81 83       	std	Z+1, r24	; 0x01
   18ebe:	92 83       	std	Z+2, r25	; 0x02
   18ec0:	a3 83       	std	Z+3, r26	; 0x03
   18ec2:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   18ec6:	89 ad       	ldd	r24, Y+57	; 0x39
   18ec8:	9a ad       	ldd	r25, Y+58	; 0x3a
   18eca:	ed b7       	in	r30, 0x3d	; 61
   18ecc:	fe b7       	in	r31, 0x3e	; 62
   18ece:	95 83       	std	Z+5, r25	; 0x05
   18ed0:	84 83       	std	Z+4, r24	; 0x04
   18ed2:	88 e3       	ldi	r24, 0x38	; 56
   18ed4:	92 e4       	ldi	r25, 0x42	; 66
   18ed6:	a0 e0       	ldi	r26, 0x00	; 0
   18ed8:	81 83       	std	Z+1, r24	; 0x01
   18eda:	92 83       	std	Z+2, r25	; 0x02
   18edc:	a3 83       	std	Z+3, r26	; 0x03
   18ede:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   18ee2:	ce 01       	movw	r24, r28
   18ee4:	87 5b       	subi	r24, 0xB7	; 183
   18ee6:	9f 4f       	sbci	r25, 0xFF	; 255
   18ee8:	ab de       	rcall	.-682    	; 0x18c40 <lif_lifbcd2timestr>
   18eea:	ed b7       	in	r30, 0x3d	; 61
   18eec:	fe b7       	in	r31, 0x3e	; 62
   18eee:	95 83       	std	Z+5, r25	; 0x05
   18ef0:	84 83       	std	Z+4, r24	; 0x04
   18ef2:	8e e1       	ldi	r24, 0x1E	; 30
   18ef4:	92 e4       	ldi	r25, 0x42	; 66
   18ef6:	a0 e0       	ldi	r26, 0x00	; 0
   18ef8:	81 83       	std	Z+1, r24	; 0x01
   18efa:	92 83       	std	Z+2, r25	; 0x02
   18efc:	a3 83       	std	Z+3, r26	; 0x03
   18efe:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   18f02:	ce 01       	movw	r24, r28
   18f04:	81 5b       	subi	r24, 0xB1	; 177
   18f06:	9f 4f       	sbci	r25, 0xFF	; 255
   18f08:	ed b7       	in	r30, 0x3d	; 61
   18f0a:	fe b7       	in	r31, 0x3e	; 62
   18f0c:	95 83       	std	Z+5, r25	; 0x05
   18f0e:	84 83       	std	Z+4, r24	; 0x04
   18f10:	84 e0       	ldi	r24, 0x04	; 4
   18f12:	92 e4       	ldi	r25, 0x42	; 66
   18f14:	a0 e0       	ldi	r26, 0x00	; 0
   18f16:	81 83       	std	Z+1, r24	; 0x01
   18f18:	92 83       	std	Z+2, r25	; 0x02
   18f1a:	a3 83       	std	Z+3, r26	; 0x03
   18f1c:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   18f20:	fe 01       	movw	r30, r28
   18f22:	e6 5a       	subi	r30, 0xA6	; 166
   18f24:	ff 4f       	sbci	r31, 0xFF	; 255
   18f26:	80 81       	ld	r24, Z
   18f28:	91 81       	ldd	r25, Z+1	; 0x01
   18f2a:	ed b7       	in	r30, 0x3d	; 61
   18f2c:	fe b7       	in	r31, 0x3e	; 62
   18f2e:	95 83       	std	Z+5, r25	; 0x05
   18f30:	84 83       	std	Z+4, r24	; 0x04
   18f32:	88 ee       	ldi	r24, 0xE8	; 232
   18f34:	91 e4       	ldi	r25, 0x41	; 65
   18f36:	a0 e0       	ldi	r26, 0x00	; 0
   18f38:	81 83       	std	Z+1, r24	; 0x01
   18f3a:	92 83       	std	Z+2, r25	; 0x02
   18f3c:	a3 83       	std	Z+3, r26	; 0x03
   18f3e:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   18f42:	fe 01       	movw	r30, r28
   18f44:	e6 59       	subi	r30, 0x96	; 150
   18f46:	ff 4f       	sbci	r31, 0xFF	; 255
   18f48:	80 81       	ld	r24, Z
   18f4a:	91 81       	ldd	r25, Z+1	; 0x01
   18f4c:	ed b7       	in	r30, 0x3d	; 61
   18f4e:	fe b7       	in	r31, 0x3e	; 62
   18f50:	95 83       	std	Z+5, r25	; 0x05
   18f52:	84 83       	std	Z+4, r24	; 0x04
   18f54:	8c ec       	ldi	r24, 0xCC	; 204
   18f56:	91 e4       	ldi	r25, 0x41	; 65
   18f58:	a0 e0       	ldi	r26, 0x00	; 0
   18f5a:	81 83       	std	Z+1, r24	; 0x01
   18f5c:	92 83       	std	Z+2, r25	; 0x02
   18f5e:	a3 83       	std	Z+3, r26	; 0x03
   18f60:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   18f64:	fe 01       	movw	r30, r28
   18f66:	e4 5a       	subi	r30, 0xA4	; 164
   18f68:	ff 4f       	sbci	r31, 0xFF	; 255
   18f6a:	80 81       	ld	r24, Z
   18f6c:	91 81       	ldd	r25, Z+1	; 0x01
   18f6e:	a2 81       	ldd	r26, Z+2	; 0x02
   18f70:	b3 81       	ldd	r27, Z+3	; 0x03
   18f72:	ed b7       	in	r30, 0x3d	; 61
   18f74:	fe b7       	in	r31, 0x3e	; 62
   18f76:	84 83       	std	Z+4, r24	; 0x04
   18f78:	95 83       	std	Z+5, r25	; 0x05
   18f7a:	a6 83       	std	Z+6, r26	; 0x06
   18f7c:	b7 83       	std	Z+7, r27	; 0x07
   18f7e:	8f ea       	ldi	r24, 0xAF	; 175
   18f80:	91 e4       	ldi	r25, 0x41	; 65
   18f82:	a0 e0       	ldi	r26, 0x00	; 0
   18f84:	81 83       	std	Z+1, r24	; 0x01
   18f86:	92 83       	std	Z+2, r25	; 0x02
   18f88:	a3 83       	std	Z+3, r26	; 0x03
   18f8a:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   18f8e:	fe 01       	movw	r30, r28
   18f90:	e0 5a       	subi	r30, 0xA0	; 160
   18f92:	ff 4f       	sbci	r31, 0xFF	; 255
   18f94:	80 81       	ld	r24, Z
   18f96:	91 81       	ldd	r25, Z+1	; 0x01
   18f98:	a2 81       	ldd	r26, Z+2	; 0x02
   18f9a:	b3 81       	ldd	r27, Z+3	; 0x03
   18f9c:	ed b7       	in	r30, 0x3d	; 61
   18f9e:	fe b7       	in	r31, 0x3e	; 62
   18fa0:	84 83       	std	Z+4, r24	; 0x04
   18fa2:	95 83       	std	Z+5, r25	; 0x05
   18fa4:	a6 83       	std	Z+6, r26	; 0x06
   18fa6:	b7 83       	std	Z+7, r27	; 0x07
   18fa8:	82 e9       	ldi	r24, 0x92	; 146
   18faa:	91 e4       	ldi	r25, 0x41	; 65
   18fac:	a0 e0       	ldi	r26, 0x00	; 0
   18fae:	81 83       	std	Z+1, r24	; 0x01
   18fb0:	92 83       	std	Z+2, r25	; 0x02
   18fb2:	a3 83       	std	Z+3, r26	; 0x03
   18fb4:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   18fb8:	fe 01       	movw	r30, r28
   18fba:	e4 59       	subi	r30, 0x94	; 148
   18fbc:	ff 4f       	sbci	r31, 0xFF	; 255
   18fbe:	80 81       	ld	r24, Z
   18fc0:	91 81       	ldd	r25, Z+1	; 0x01
   18fc2:	a0 e0       	ldi	r26, 0x00	; 0
   18fc4:	b0 e0       	ldi	r27, 0x00	; 0
   18fc6:	ed b7       	in	r30, 0x3d	; 61
   18fc8:	fe b7       	in	r31, 0x3e	; 62
   18fca:	84 83       	std	Z+4, r24	; 0x04
   18fcc:	95 83       	std	Z+5, r25	; 0x05
   18fce:	a6 83       	std	Z+6, r26	; 0x06
   18fd0:	b7 83       	std	Z+7, r27	; 0x07
   18fd2:	85 e7       	ldi	r24, 0x75	; 117
   18fd4:	91 e4       	ldi	r25, 0x41	; 65
   18fd6:	a0 e0       	ldi	r26, 0x00	; 0
   18fd8:	81 83       	std	Z+1, r24	; 0x01
   18fda:	92 83       	std	Z+2, r25	; 0x02
   18fdc:	a3 83       	std	Z+3, r26	; 0x03
   18fde:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   18fe2:	fe 01       	movw	r30, r28
   18fe4:	e2 59       	subi	r30, 0x92	; 146
   18fe6:	ff 4f       	sbci	r31, 0xFF	; 255
   18fe8:	80 81       	ld	r24, Z
   18fea:	91 81       	ldd	r25, Z+1	; 0x01
   18fec:	ed b7       	in	r30, 0x3d	; 61
   18fee:	fe b7       	in	r31, 0x3e	; 62
   18ff0:	95 83       	std	Z+5, r25	; 0x05
   18ff2:	84 83       	std	Z+4, r24	; 0x04
   18ff4:	89 e5       	ldi	r24, 0x59	; 89
   18ff6:	91 e4       	ldi	r25, 0x41	; 65
   18ff8:	a0 e0       	ldi	r26, 0x00	; 0
   18ffa:	81 83       	std	Z+1, r24	; 0x01
   18ffc:	92 83       	std	Z+2, r25	; 0x02
   18ffe:	a3 83       	std	Z+3, r26	; 0x03
   19000:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   19004:	ce 01       	movw	r24, r28
   19006:	8c 59       	subi	r24, 0x9C	; 156
   19008:	9f 4f       	sbci	r25, 0xFF	; 255
   1900a:	1a de       	rcall	.-972    	; 0x18c40 <lif_lifbcd2timestr>
   1900c:	ed b7       	in	r30, 0x3d	; 61
   1900e:	fe b7       	in	r31, 0x3e	; 62
   19010:	95 83       	std	Z+5, r25	; 0x05
   19012:	84 83       	std	Z+4, r24	; 0x04
   19014:	8f e3       	ldi	r24, 0x3F	; 63
   19016:	91 e4       	ldi	r25, 0x41	; 65
   19018:	a0 e0       	ldi	r26, 0x00	; 0
   1901a:	81 83       	std	Z+1, r24	; 0x01
   1901c:	92 83       	std	Z+2, r25	; 0x02
   1901e:	a3 83       	std	Z+3, r26	; 0x03
   19020:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   19024:	8d e3       	ldi	r24, 0x3D	; 61
   19026:	91 e4       	ldi	r25, 0x41	; 65
   19028:	a0 e0       	ldi	r26, 0x00	; 0
   1902a:	ed b7       	in	r30, 0x3d	; 61
   1902c:	fe b7       	in	r31, 0x3e	; 62
   1902e:	81 83       	std	Z+1, r24	; 0x01
   19030:	92 83       	std	Z+2, r25	; 0x02
   19032:	a3 83       	std	Z+3, r26	; 0x03
   19034:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   19038:	cd b7       	in	r28, 0x3d	; 61
   1903a:	de b7       	in	r29, 0x3e	; 62
   1903c:	27 96       	adiw	r28, 0x07	; 7
   1903e:	e2 e0       	ldi	r30, 0x02	; 2
   19040:	0c 94 39 e7 	jmp	0x1ce72	; 0x1ce72 <__epilogue_restores__+0x20>

00019044 <lif_check_volume>:
   19044:	0f 93       	push	r16
   19046:	1f 93       	push	r17
   19048:	cf 93       	push	r28
   1904a:	df 93       	push	r29
   1904c:	ad b7       	in	r26, 0x3d	; 61
   1904e:	be b7       	in	r27, 0x3e	; 62
   19050:	17 97       	sbiw	r26, 0x07	; 7
   19052:	0f b6       	in	r0, 0x3f	; 63
   19054:	f8 94       	cli
   19056:	be bf       	out	0x3e, r27	; 62
   19058:	0f be       	out	0x3f, r0	; 63
   1905a:	ad bf       	out	0x3d, r26	; 61
   1905c:	ec 01       	movw	r28, r24
   1905e:	86 96       	adiw	r24, 0x26	; 38
   19060:	e0 da       	rcall	.-2624   	; 0x18622 <lif_checkname>
   19062:	89 2b       	or	r24, r25
   19064:	89 f4       	brne	.+34     	; 0x19088 <lif_check_volume+0x44>
   19066:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1906a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1906e:	92 ff       	sbrs	r25, 2
   19070:	0e c0       	rjmp	.+28     	; 0x1908e <lif_check_volume+0x4a>
   19072:	8e e1       	ldi	r24, 0x1E	; 30
   19074:	91 e4       	ldi	r25, 0x41	; 65
   19076:	a0 e0       	ldi	r26, 0x00	; 0
   19078:	ed b7       	in	r30, 0x3d	; 61
   1907a:	fe b7       	in	r31, 0x3e	; 62
   1907c:	81 83       	std	Z+1, r24	; 0x01
   1907e:	92 83       	std	Z+2, r25	; 0x02
   19080:	a3 83       	std	Z+3, r26	; 0x03
   19082:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   19086:	03 c0       	rjmp	.+6      	; 0x1908e <lif_check_volume+0x4a>
   19088:	81 e0       	ldi	r24, 0x01	; 1
   1908a:	90 e0       	ldi	r25, 0x00	; 0
   1908c:	02 c0       	rjmp	.+4      	; 0x19092 <lif_check_volume+0x4e>
   1908e:	80 e0       	ldi	r24, 0x00	; 0
   19090:	90 e0       	ldi	r25, 0x00	; 0
   19092:	29 a9       	ldd	r18, Y+49	; 0x31
   19094:	3a a9       	ldd	r19, Y+50	; 0x32
   19096:	21 15       	cp	r18, r1
   19098:	f0 e1       	ldi	r31, 0x10	; 16
   1909a:	3f 07       	cpc	r19, r31
   1909c:	a1 f0       	breq	.+40     	; 0x190c6 <lif_check_volume+0x82>
   1909e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   190a2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   190a6:	92 ff       	sbrs	r25, 2
   190a8:	0c c0       	rjmp	.+24     	; 0x190c2 <lif_check_volume+0x7e>
   190aa:	ed b7       	in	r30, 0x3d	; 61
   190ac:	fe b7       	in	r31, 0x3e	; 62
   190ae:	35 83       	std	Z+5, r19	; 0x05
   190b0:	24 83       	std	Z+4, r18	; 0x04
   190b2:	85 ee       	ldi	r24, 0xE5	; 229
   190b4:	90 e4       	ldi	r25, 0x40	; 64
   190b6:	a0 e0       	ldi	r26, 0x00	; 0
   190b8:	81 83       	std	Z+1, r24	; 0x01
   190ba:	92 83       	std	Z+2, r25	; 0x02
   190bc:	a3 83       	std	Z+3, r26	; 0x03
   190be:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   190c2:	80 e0       	ldi	r24, 0x00	; 0
   190c4:	90 e0       	ldi	r25, 0x00	; 0
   190c6:	29 ad       	ldd	r18, Y+57	; 0x39
   190c8:	3a ad       	ldd	r19, Y+58	; 0x3a
   190ca:	22 30       	cpi	r18, 0x02	; 2
   190cc:	31 05       	cpc	r19, r1
   190ce:	a0 f0       	brcs	.+40     	; 0x190f8 <lif_check_volume+0xb4>
   190d0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   190d4:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   190d8:	92 ff       	sbrs	r25, 2
   190da:	0c c0       	rjmp	.+24     	; 0x190f4 <lif_check_volume+0xb0>
   190dc:	ed b7       	in	r30, 0x3d	; 61
   190de:	fe b7       	in	r31, 0x3e	; 62
   190e0:	35 83       	std	Z+5, r19	; 0x05
   190e2:	24 83       	std	Z+4, r18	; 0x04
   190e4:	8d ec       	ldi	r24, 0xCD	; 205
   190e6:	90 e4       	ldi	r25, 0x40	; 64
   190e8:	a0 e0       	ldi	r26, 0x00	; 0
   190ea:	81 83       	std	Z+1, r24	; 0x01
   190ec:	92 83       	std	Z+2, r25	; 0x02
   190ee:	a3 83       	std	Z+3, r26	; 0x03
   190f0:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   190f4:	80 e0       	ldi	r24, 0x00	; 0
   190f6:	90 e0       	ldi	r25, 0x00	; 0
   190f8:	2b a9       	ldd	r18, Y+51	; 0x33
   190fa:	3c a9       	ldd	r19, Y+52	; 0x34
   190fc:	23 2b       	or	r18, r19
   190fe:	91 f0       	breq	.+36     	; 0x19124 <lif_check_volume+0xe0>
   19100:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19104:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19108:	92 ff       	sbrs	r25, 2
   1910a:	0a c0       	rjmp	.+20     	; 0x19120 <lif_check_volume+0xdc>
   1910c:	84 e9       	ldi	r24, 0x94	; 148
   1910e:	90 e4       	ldi	r25, 0x40	; 64
   19110:	a0 e0       	ldi	r26, 0x00	; 0
   19112:	ed b7       	in	r30, 0x3d	; 61
   19114:	fe b7       	in	r31, 0x3e	; 62
   19116:	81 83       	std	Z+1, r24	; 0x01
   19118:	92 83       	std	Z+2, r25	; 0x02
   1911a:	a3 83       	std	Z+3, r26	; 0x03
   1911c:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   19120:	80 e0       	ldi	r24, 0x00	; 0
   19122:	90 e0       	ldi	r25, 0x00	; 0
   19124:	2b ad       	ldd	r18, Y+59	; 0x3b
   19126:	3c ad       	ldd	r19, Y+60	; 0x3c
   19128:	23 2b       	or	r18, r19
   1912a:	91 f0       	breq	.+36     	; 0x19150 <lif_check_volume+0x10c>
   1912c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19130:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19134:	92 ff       	sbrs	r25, 2
   19136:	0a c0       	rjmp	.+20     	; 0x1914c <lif_check_volume+0x108>
   19138:	8b e5       	ldi	r24, 0x5B	; 91
   1913a:	90 e4       	ldi	r25, 0x40	; 64
   1913c:	a0 e0       	ldi	r26, 0x00	; 0
   1913e:	ed b7       	in	r30, 0x3d	; 61
   19140:	fe b7       	in	r31, 0x3e	; 62
   19142:	81 83       	std	Z+1, r24	; 0x01
   19144:	92 83       	std	Z+2, r25	; 0x02
   19146:	a3 83       	std	Z+3, r26	; 0x03
   19148:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   1914c:	80 e0       	ldi	r24, 0x00	; 0
   1914e:	90 e0       	ldi	r25, 0x00	; 0
   19150:	4d a5       	ldd	r20, Y+45	; 0x2d
   19152:	5e a5       	ldd	r21, Y+46	; 0x2e
   19154:	6f a5       	ldd	r22, Y+47	; 0x2f
   19156:	78 a9       	ldd	r23, Y+48	; 0x30
   19158:	45 2b       	or	r20, r21
   1915a:	46 2b       	or	r20, r22
   1915c:	47 2b       	or	r20, r23
   1915e:	b1 f4       	brne	.+44     	; 0x1918c <lif_check_volume+0x148>
   19160:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19164:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19168:	92 ff       	sbrs	r25, 2
   1916a:	0e c0       	rjmp	.+28     	; 0x19188 <lif_check_volume+0x144>
   1916c:	ed b7       	in	r30, 0x3d	; 61
   1916e:	fe b7       	in	r31, 0x3e	; 62
   19170:	14 82       	std	Z+4, r1	; 0x04
   19172:	15 82       	std	Z+5, r1	; 0x05
   19174:	16 82       	std	Z+6, r1	; 0x06
   19176:	17 82       	std	Z+7, r1	; 0x07
   19178:	86 e3       	ldi	r24, 0x36	; 54
   1917a:	90 e4       	ldi	r25, 0x40	; 64
   1917c:	a0 e0       	ldi	r26, 0x00	; 0
   1917e:	81 83       	std	Z+1, r24	; 0x01
   19180:	92 83       	std	Z+2, r25	; 0x02
   19182:	a3 83       	std	Z+3, r26	; 0x03
   19184:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   19188:	80 e0       	ldi	r24, 0x00	; 0
   1918a:	90 e0       	ldi	r25, 0x00	; 0
   1918c:	4d a9       	ldd	r20, Y+53	; 0x35
   1918e:	5e a9       	ldd	r21, Y+54	; 0x36
   19190:	6f a9       	ldd	r22, Y+55	; 0x37
   19192:	78 ad       	ldd	r23, Y+56	; 0x38
   19194:	45 2b       	or	r20, r21
   19196:	46 2b       	or	r20, r22
   19198:	47 2b       	or	r20, r23
   1919a:	91 f4       	brne	.+36     	; 0x191c0 <lif_check_volume+0x17c>
   1919c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   191a0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   191a4:	92 ff       	sbrs	r25, 2
   191a6:	0a c0       	rjmp	.+20     	; 0x191bc <lif_check_volume+0x178>
   191a8:	87 e0       	ldi	r24, 0x07	; 7
   191aa:	90 e4       	ldi	r25, 0x40	; 64
   191ac:	a0 e0       	ldi	r26, 0x00	; 0
   191ae:	ed b7       	in	r30, 0x3d	; 61
   191b0:	fe b7       	in	r31, 0x3e	; 62
   191b2:	81 83       	std	Z+1, r24	; 0x01
   191b4:	92 83       	std	Z+2, r25	; 0x02
   191b6:	a3 83       	std	Z+3, r26	; 0x03
   191b8:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   191bc:	80 e0       	ldi	r24, 0x00	; 0
   191be:	90 e0       	ldi	r25, 0x00	; 0
   191c0:	0d a5       	ldd	r16, Y+45	; 0x2d
   191c2:	1e a5       	ldd	r17, Y+46	; 0x2e
   191c4:	2f a5       	ldd	r18, Y+47	; 0x2f
   191c6:	38 a9       	ldd	r19, Y+48	; 0x30
   191c8:	4d a9       	ldd	r20, Y+53	; 0x35
   191ca:	5e a9       	ldd	r21, Y+54	; 0x36
   191cc:	6f a9       	ldd	r22, Y+55	; 0x37
   191ce:	78 ad       	ldd	r23, Y+56	; 0x38
   191d0:	40 0f       	add	r20, r16
   191d2:	51 1f       	adc	r21, r17
   191d4:	62 1f       	adc	r22, r18
   191d6:	73 1f       	adc	r23, r19
   191d8:	0c 81       	ldd	r16, Y+4	; 0x04
   191da:	1d 81       	ldd	r17, Y+5	; 0x05
   191dc:	2e 81       	ldd	r18, Y+6	; 0x06
   191de:	3f 81       	ldd	r19, Y+7	; 0x07
   191e0:	04 17       	cp	r16, r20
   191e2:	15 07       	cpc	r17, r21
   191e4:	26 07       	cpc	r18, r22
   191e6:	37 07       	cpc	r19, r23
   191e8:	90 f4       	brcc	.+36     	; 0x1920e <lif_check_volume+0x1ca>
   191ea:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   191ee:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   191f2:	92 ff       	sbrs	r25, 2
   191f4:	0a c0       	rjmp	.+20     	; 0x1920a <lif_check_volume+0x1c6>
   191f6:	8b ed       	ldi	r24, 0xDB	; 219
   191f8:	9f e3       	ldi	r25, 0x3F	; 63
   191fa:	a0 e0       	ldi	r26, 0x00	; 0
   191fc:	ed b7       	in	r30, 0x3d	; 61
   191fe:	fe b7       	in	r31, 0x3e	; 62
   19200:	81 83       	std	Z+1, r24	; 0x01
   19202:	92 83       	std	Z+2, r25	; 0x02
   19204:	a3 83       	std	Z+3, r26	; 0x03
   19206:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   1920a:	80 e0       	ldi	r24, 0x00	; 0
   1920c:	90 e0       	ldi	r25, 0x00	; 0
   1920e:	cd b7       	in	r28, 0x3d	; 61
   19210:	de b7       	in	r29, 0x3e	; 62
   19212:	27 96       	adiw	r28, 0x07	; 7
   19214:	e4 e0       	ldi	r30, 0x04	; 4
   19216:	0c 94 37 e7 	jmp	0x1ce6e	; 0x1ce6e <__epilogue_restores__+0x1c>

0001921a <lif_check_dir>:
   1921a:	a5 e1       	ldi	r26, 0x15	; 21
   1921c:	b0 e0       	ldi	r27, 0x00	; 0
   1921e:	e3 e1       	ldi	r30, 0x13	; 19
   19220:	f9 ec       	ldi	r31, 0xC9	; 201
   19222:	0c 94 0d e7 	jmp	0x1ce1a	; 0x1ce1a <__prologue_saves__>
   19226:	6c 01       	movw	r12, r24
   19228:	2a e5       	ldi	r18, 0x5A	; 90
   1922a:	c2 0e       	add	r12, r18
   1922c:	d1 1c       	adc	r13, r1
   1922e:	f6 01       	movw	r30, r12
   19230:	20 81       	ld	r18, Z
   19232:	31 81       	ldd	r19, Z+1	; 0x01
   19234:	21 50       	subi	r18, 0x01	; 1
   19236:	31 09       	sbc	r19, r1
   19238:	2e 3f       	cpi	r18, 0xFE	; 254
   1923a:	3f 4f       	sbci	r19, 0xFF	; 255
   1923c:	08 f0       	brcs	.+2      	; 0x19240 <lif_check_dir+0x26>
   1923e:	9a c1       	rjmp	.+820    	; 0x19574 <lif_check_dir+0x35a>
   19240:	9d 8b       	std	Y+21, r25	; 0x15
   19242:	8c 8b       	std	Y+20, r24	; 0x14
   19244:	7c 01       	movw	r14, r24
   19246:	2f e4       	ldi	r18, 0x4F	; 79
   19248:	e2 0e       	add	r14, r18
   1924a:	f1 1c       	adc	r15, r1
   1924c:	c7 01       	movw	r24, r14
   1924e:	e9 d9       	rcall	.-3118   	; 0x18622 <lif_checkname>
   19250:	89 2b       	or	r24, r25
   19252:	99 f4       	brne	.+38     	; 0x1927a <lif_check_dir+0x60>
   19254:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19258:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1925c:	92 ff       	sbrs	r25, 2
   1925e:	0f c0       	rjmp	.+30     	; 0x1927e <lif_check_dir+0x64>
   19260:	ed b7       	in	r30, 0x3d	; 61
   19262:	fe b7       	in	r31, 0x3e	; 62
   19264:	f5 82       	std	Z+5, r15	; 0x05
   19266:	e4 82       	std	Z+4, r14	; 0x04
   19268:	8a eb       	ldi	r24, 0xBA	; 186
   1926a:	9f e3       	ldi	r25, 0x3F	; 63
   1926c:	a0 e0       	ldi	r26, 0x00	; 0
   1926e:	81 83       	std	Z+1, r24	; 0x01
   19270:	92 83       	std	Z+2, r25	; 0x02
   19272:	a3 83       	std	Z+3, r26	; 0x03
   19274:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   19278:	02 c0       	rjmp	.+4      	; 0x1927e <lif_check_dir+0x64>
   1927a:	01 e0       	ldi	r16, 0x01	; 1
   1927c:	01 c0       	rjmp	.+2      	; 0x19280 <lif_check_dir+0x66>
   1927e:	00 e0       	ldi	r16, 0x00	; 0
   19280:	10 e0       	ldi	r17, 0x00	; 0
   19282:	ec 89       	ldd	r30, Y+20	; 0x14
   19284:	fd 89       	ldd	r31, Y+21	; 0x15
   19286:	84 85       	ldd	r24, Z+12	; 0x0c
   19288:	95 85       	ldd	r25, Z+13	; 0x0d
   1928a:	a6 85       	ldd	r26, Z+14	; 0x0e
   1928c:	b7 85       	ldd	r27, Z+15	; 0x0f
   1928e:	00 97       	sbiw	r24, 0x00	; 0
   19290:	a1 05       	cpc	r26, r1
   19292:	b1 05       	cpc	r27, r1
   19294:	39 f1       	breq	.+78     	; 0x192e4 <lif_check_dir+0xca>
   19296:	e4 5a       	subi	r30, 0xA4	; 164
   19298:	ff 4f       	sbci	r31, 0xFF	; 255
   1929a:	40 81       	ld	r20, Z
   1929c:	51 81       	ldd	r21, Z+1	; 0x01
   1929e:	62 81       	ldd	r22, Z+2	; 0x02
   192a0:	73 81       	ldd	r23, Z+3	; 0x03
   192a2:	48 17       	cp	r20, r24
   192a4:	59 07       	cpc	r21, r25
   192a6:	6a 07       	cpc	r22, r26
   192a8:	7b 07       	cpc	r23, r27
   192aa:	e0 f4       	brcc	.+56     	; 0x192e4 <lif_check_dir+0xca>
   192ac:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   192b0:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   192b4:	32 ff       	sbrs	r19, 2
   192b6:	14 c0       	rjmp	.+40     	; 0x192e0 <lif_check_dir+0xc6>
   192b8:	ed b7       	in	r30, 0x3d	; 61
   192ba:	fe b7       	in	r31, 0x3e	; 62
   192bc:	82 87       	std	Z+10, r24	; 0x0a
   192be:	93 87       	std	Z+11, r25	; 0x0b
   192c0:	a4 87       	std	Z+12, r26	; 0x0c
   192c2:	b5 87       	std	Z+13, r27	; 0x0d
   192c4:	46 83       	std	Z+6, r20	; 0x06
   192c6:	57 83       	std	Z+7, r21	; 0x07
   192c8:	60 87       	std	Z+8, r22	; 0x08
   192ca:	71 87       	std	Z+9, r23	; 0x09
   192cc:	f5 82       	std	Z+5, r15	; 0x05
   192ce:	e4 82       	std	Z+4, r14	; 0x04
   192d0:	86 e7       	ldi	r24, 0x76	; 118
   192d2:	9f e3       	ldi	r25, 0x3F	; 63
   192d4:	a0 e0       	ldi	r26, 0x00	; 0
   192d6:	81 83       	std	Z+1, r24	; 0x01
   192d8:	92 83       	std	Z+2, r25	; 0x02
   192da:	a3 83       	std	Z+3, r26	; 0x03
   192dc:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   192e0:	00 e0       	ldi	r16, 0x00	; 0
   192e2:	10 e0       	ldi	r17, 0x00	; 0
   192e4:	ec 89       	ldd	r30, Y+20	; 0x14
   192e6:	fd 89       	ldd	r31, Y+21	; 0x15
   192e8:	44 81       	ldd	r20, Z+4	; 0x04
   192ea:	55 81       	ldd	r21, Z+5	; 0x05
   192ec:	66 81       	ldd	r22, Z+6	; 0x06
   192ee:	77 81       	ldd	r23, Z+7	; 0x07
   192f0:	41 15       	cp	r20, r1
   192f2:	51 05       	cpc	r21, r1
   192f4:	61 05       	cpc	r22, r1
   192f6:	71 05       	cpc	r23, r1
   192f8:	99 f1       	breq	.+102    	; 0x19360 <lif_check_dir+0x146>
   192fa:	e4 5a       	subi	r30, 0xA4	; 164
   192fc:	ff 4f       	sbci	r31, 0xFF	; 255
   192fe:	80 80       	ld	r8, Z
   19300:	91 80       	ldd	r9, Z+1	; 0x01
   19302:	a2 80       	ldd	r10, Z+2	; 0x02
   19304:	b3 80       	ldd	r11, Z+3	; 0x03
   19306:	ec 89       	ldd	r30, Y+20	; 0x14
   19308:	fd 89       	ldd	r31, Y+21	; 0x15
   1930a:	e0 5a       	subi	r30, 0xA0	; 160
   1930c:	ff 4f       	sbci	r31, 0xFF	; 255
   1930e:	80 81       	ld	r24, Z
   19310:	91 81       	ldd	r25, Z+1	; 0x01
   19312:	a2 81       	ldd	r26, Z+2	; 0x02
   19314:	b3 81       	ldd	r27, Z+3	; 0x03
   19316:	88 0d       	add	r24, r8
   19318:	99 1d       	adc	r25, r9
   1931a:	aa 1d       	adc	r26, r10
   1931c:	bb 1d       	adc	r27, r11
   1931e:	48 17       	cp	r20, r24
   19320:	59 07       	cpc	r21, r25
   19322:	6a 07       	cpc	r22, r26
   19324:	7b 07       	cpc	r23, r27
   19326:	e0 f4       	brcc	.+56     	; 0x19360 <lif_check_dir+0x146>
   19328:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1932c:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19330:	32 ff       	sbrs	r19, 2
   19332:	14 c0       	rjmp	.+40     	; 0x1935c <lif_check_dir+0x142>
   19334:	ed b7       	in	r30, 0x3d	; 61
   19336:	fe b7       	in	r31, 0x3e	; 62
   19338:	42 87       	std	Z+10, r20	; 0x0a
   1933a:	53 87       	std	Z+11, r21	; 0x0b
   1933c:	64 87       	std	Z+12, r22	; 0x0c
   1933e:	75 87       	std	Z+13, r23	; 0x0d
   19340:	86 83       	std	Z+6, r24	; 0x06
   19342:	97 83       	std	Z+7, r25	; 0x07
   19344:	a0 87       	std	Z+8, r26	; 0x08
   19346:	b1 87       	std	Z+9, r27	; 0x09
   19348:	f5 82       	std	Z+5, r15	; 0x05
   1934a:	e4 82       	std	Z+4, r14	; 0x04
   1934c:	85 e3       	ldi	r24, 0x35	; 53
   1934e:	9f e3       	ldi	r25, 0x3F	; 63
   19350:	a0 e0       	ldi	r26, 0x00	; 0
   19352:	81 83       	std	Z+1, r24	; 0x01
   19354:	92 83       	std	Z+2, r25	; 0x02
   19356:	a3 83       	std	Z+3, r26	; 0x03
   19358:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   1935c:	00 e0       	ldi	r16, 0x00	; 0
   1935e:	10 e0       	ldi	r17, 0x00	; 0
   19360:	ec 89       	ldd	r30, Y+20	; 0x14
   19362:	fd 89       	ldd	r31, Y+21	; 0x15
   19364:	e6 59       	subi	r30, 0x96	; 150
   19366:	ff 4f       	sbci	r31, 0xFF	; 255
   19368:	80 81       	ld	r24, Z
   1936a:	91 81       	ldd	r25, Z+1	; 0x01
   1936c:	81 30       	cpi	r24, 0x01	; 1
   1936e:	f0 e8       	ldi	r31, 0x80	; 128
   19370:	9f 07       	cpc	r25, r31
   19372:	b1 f0       	breq	.+44     	; 0x193a0 <lif_check_dir+0x186>
   19374:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   19378:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1937c:	32 ff       	sbrs	r19, 2
   1937e:	0e c0       	rjmp	.+28     	; 0x1939c <lif_check_dir+0x182>
   19380:	ed b7       	in	r30, 0x3d	; 61
   19382:	fe b7       	in	r31, 0x3e	; 62
   19384:	97 83       	std	Z+7, r25	; 0x07
   19386:	86 83       	std	Z+6, r24	; 0x06
   19388:	f5 82       	std	Z+5, r15	; 0x05
   1938a:	e4 82       	std	Z+4, r14	; 0x04
   1938c:	87 e0       	ldi	r24, 0x07	; 7
   1938e:	9f e3       	ldi	r25, 0x3F	; 63
   19390:	a0 e0       	ldi	r26, 0x00	; 0
   19392:	81 83       	std	Z+1, r24	; 0x01
   19394:	92 83       	std	Z+2, r25	; 0x02
   19396:	a3 83       	std	Z+3, r26	; 0x03
   19398:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   1939c:	00 e0       	ldi	r16, 0x00	; 0
   1939e:	10 e0       	ldi	r17, 0x00	; 0
   193a0:	f6 01       	movw	r30, r12
   193a2:	80 81       	ld	r24, Z
   193a4:	91 81       	ldd	r25, Z+1	; 0x01
   193a6:	8c 7f       	andi	r24, 0xFC	; 252
   193a8:	80 31       	cpi	r24, 0x10	; 16
   193aa:	90 4e       	sbci	r25, 0xE0	; 224
   193ac:	09 f0       	breq	.+2      	; 0x193b0 <lif_check_dir+0x196>
   193ae:	b3 c0       	rjmp	.+358    	; 0x19516 <lif_check_dir+0x2fc>
   193b0:	cc 88       	ldd	r12, Y+20	; 0x14
   193b2:	dd 88       	ldd	r13, Y+21	; 0x15
   193b4:	2c e6       	ldi	r18, 0x6C	; 108
   193b6:	c2 0e       	add	r12, r18
   193b8:	d1 1c       	adc	r13, r1
   193ba:	f6 01       	movw	r30, r12
   193bc:	80 81       	ld	r24, Z
   193be:	91 81       	ldd	r25, Z+1	; 0x01
   193c0:	00 97       	sbiw	r24, 0x00	; 0
   193c2:	09 f4       	brne	.+2      	; 0x193c6 <lif_check_dir+0x1ac>
   193c4:	a8 c0       	rjmp	.+336    	; 0x19516 <lif_check_dir+0x2fc>
   193c6:	4c 01       	movw	r8, r24
   193c8:	a1 2c       	mov	r10, r1
   193ca:	b1 2c       	mov	r11, r1
   193cc:	77 27       	eor	r23, r23
   193ce:	6b 2d       	mov	r22, r11
   193d0:	5a 2d       	mov	r21, r10
   193d2:	49 2d       	mov	r20, r9
   193d4:	9c 01       	movw	r18, r24
   193d6:	33 27       	eor	r19, r19
   193d8:	3b 8b       	std	Y+19, r19	; 0x13
   193da:	2a 8b       	std	Y+18, r18	; 0x12
   193dc:	db 01       	movw	r26, r22
   193de:	ca 01       	movw	r24, r20
   193e0:	23 2b       	or	r18, r19
   193e2:	19 f0       	breq	.+6      	; 0x193ea <lif_check_dir+0x1d0>
   193e4:	01 96       	adiw	r24, 0x01	; 1
   193e6:	a1 1d       	adc	r26, r1
   193e8:	b1 1d       	adc	r27, r1
   193ea:	2c 88       	ldd	r2, Y+20	; 0x14
   193ec:	3d 88       	ldd	r3, Y+21	; 0x15
   193ee:	30 e6       	ldi	r19, 0x60	; 96
   193f0:	23 0e       	add	r2, r19
   193f2:	31 1c       	adc	r3, r1
   193f4:	f1 01       	movw	r30, r2
   193f6:	40 80       	ld	r4, Z
   193f8:	51 80       	ldd	r5, Z+1	; 0x01
   193fa:	62 80       	ldd	r6, Z+2	; 0x02
   193fc:	73 80       	ldd	r7, Z+3	; 0x03
   193fe:	48 16       	cp	r4, r24
   19400:	59 06       	cpc	r5, r25
   19402:	6a 06       	cpc	r6, r26
   19404:	7b 06       	cpc	r7, r27
   19406:	40 f5       	brcc	.+80     	; 0x19458 <lif_check_dir+0x23e>
   19408:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1940c:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19410:	32 ff       	sbrs	r19, 2
   19412:	20 c0       	rjmp	.+64     	; 0x19454 <lif_check_dir+0x23a>
   19414:	2a 89       	ldd	r18, Y+18	; 0x12
   19416:	3b 89       	ldd	r19, Y+19	; 0x13
   19418:	23 2b       	or	r18, r19
   1941a:	21 f0       	breq	.+8      	; 0x19424 <lif_check_dir+0x20a>
   1941c:	4f 5f       	subi	r20, 0xFF	; 255
   1941e:	5f 4f       	sbci	r21, 0xFF	; 255
   19420:	6f 4f       	sbci	r22, 0xFF	; 255
   19422:	7f 4f       	sbci	r23, 0xFF	; 255
   19424:	ed b7       	in	r30, 0x3d	; 61
   19426:	fe b7       	in	r31, 0x3e	; 62
   19428:	46 86       	std	Z+14, r4	; 0x0e
   1942a:	57 86       	std	Z+15, r5	; 0x0f
   1942c:	60 8a       	std	Z+16, r6	; 0x10
   1942e:	71 8a       	std	Z+17, r7	; 0x11
   19430:	42 87       	std	Z+10, r20	; 0x0a
   19432:	53 87       	std	Z+11, r21	; 0x0b
   19434:	64 87       	std	Z+12, r22	; 0x0c
   19436:	75 87       	std	Z+13, r23	; 0x0d
   19438:	86 82       	std	Z+6, r8	; 0x06
   1943a:	97 82       	std	Z+7, r9	; 0x07
   1943c:	a0 86       	std	Z+8, r10	; 0x08
   1943e:	b1 86       	std	Z+9, r11	; 0x09
   19440:	f5 82       	std	Z+5, r15	; 0x05
   19442:	e4 82       	std	Z+4, r14	; 0x04
   19444:	8c eb       	ldi	r24, 0xBC	; 188
   19446:	9e e3       	ldi	r25, 0x3E	; 62
   19448:	a0 e0       	ldi	r26, 0x00	; 0
   1944a:	81 83       	std	Z+1, r24	; 0x01
   1944c:	92 83       	std	Z+2, r25	; 0x02
   1944e:	a3 83       	std	Z+3, r26	; 0x03
   19450:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   19454:	00 e0       	ldi	r16, 0x00	; 0
   19456:	10 e0       	ldi	r17, 0x00	; 0
   19458:	f6 01       	movw	r30, r12
   1945a:	20 81       	ld	r18, Z
   1945c:	31 81       	ldd	r19, Z+1	; 0x01
   1945e:	a9 01       	movw	r20, r18
   19460:	60 e0       	ldi	r22, 0x00	; 0
   19462:	70 e0       	ldi	r23, 0x00	; 0
   19464:	bb 27       	eor	r27, r27
   19466:	a7 2f       	mov	r26, r23
   19468:	96 2f       	mov	r25, r22
   1946a:	85 2f       	mov	r24, r21
   1946c:	f9 01       	movw	r30, r18
   1946e:	ff 27       	eor	r31, r31
   19470:	fb 8b       	std	Y+19, r31	; 0x13
   19472:	ea 8b       	std	Y+18, r30	; 0x12
   19474:	2c 01       	movw	r4, r24
   19476:	3d 01       	movw	r6, r26
   19478:	ef 2b       	or	r30, r31
   1947a:	29 f0       	breq	.+10     	; 0x19486 <lif_check_dir+0x26c>
   1947c:	ff ef       	ldi	r31, 0xFF	; 255
   1947e:	4f 1a       	sub	r4, r31
   19480:	5f 0a       	sbc	r5, r31
   19482:	6f 0a       	sbc	r6, r31
   19484:	7f 0a       	sbc	r7, r31
   19486:	f1 01       	movw	r30, r2
   19488:	80 80       	ld	r8, Z
   1948a:	91 80       	ldd	r9, Z+1	; 0x01
   1948c:	a2 80       	ldd	r10, Z+2	; 0x02
   1948e:	b3 80       	ldd	r11, Z+3	; 0x03
   19490:	48 14       	cp	r4, r8
   19492:	59 04       	cpc	r5, r9
   19494:	6a 04       	cpc	r6, r10
   19496:	7b 04       	cpc	r7, r11
   19498:	28 f5       	brcc	.+74     	; 0x194e4 <lif_check_dir+0x2ca>
   1949a:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1949e:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   194a2:	32 ff       	sbrs	r19, 2
   194a4:	1f c0       	rjmp	.+62     	; 0x194e4 <lif_check_dir+0x2ca>
   194a6:	2a 89       	ldd	r18, Y+18	; 0x12
   194a8:	3b 89       	ldd	r19, Y+19	; 0x13
   194aa:	23 2b       	or	r18, r19
   194ac:	19 f0       	breq	.+6      	; 0x194b4 <lif_check_dir+0x29a>
   194ae:	01 96       	adiw	r24, 0x01	; 1
   194b0:	a1 1d       	adc	r26, r1
   194b2:	b1 1d       	adc	r27, r1
   194b4:	ed b7       	in	r30, 0x3d	; 61
   194b6:	fe b7       	in	r31, 0x3e	; 62
   194b8:	86 86       	std	Z+14, r8	; 0x0e
   194ba:	97 86       	std	Z+15, r9	; 0x0f
   194bc:	a0 8a       	std	Z+16, r10	; 0x10
   194be:	b1 8a       	std	Z+17, r11	; 0x11
   194c0:	82 87       	std	Z+10, r24	; 0x0a
   194c2:	93 87       	std	Z+11, r25	; 0x0b
   194c4:	a4 87       	std	Z+12, r26	; 0x0c
   194c6:	b5 87       	std	Z+13, r27	; 0x0d
   194c8:	46 83       	std	Z+6, r20	; 0x06
   194ca:	57 83       	std	Z+7, r21	; 0x07
   194cc:	60 87       	std	Z+8, r22	; 0x08
   194ce:	71 87       	std	Z+9, r23	; 0x09
   194d0:	f5 82       	std	Z+5, r15	; 0x05
   194d2:	e4 82       	std	Z+4, r14	; 0x04
   194d4:	81 e7       	ldi	r24, 0x71	; 113
   194d6:	9e e3       	ldi	r25, 0x3E	; 62
   194d8:	a0 e0       	ldi	r26, 0x00	; 0
   194da:	81 83       	std	Z+1, r24	; 0x01
   194dc:	92 83       	std	Z+2, r25	; 0x02
   194de:	a3 83       	std	Z+3, r26	; 0x03
   194e0:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   194e4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   194e8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   194ec:	92 ff       	sbrs	r25, 2
   194ee:	13 c0       	rjmp	.+38     	; 0x19516 <lif_check_dir+0x2fc>
   194f0:	f6 01       	movw	r30, r12
   194f2:	80 81       	ld	r24, Z
   194f4:	91 81       	ldd	r25, Z+1	; 0x01
   194f6:	89 2b       	or	r24, r25
   194f8:	71 f4       	brne	.+28     	; 0x19516 <lif_check_dir+0x2fc>
   194fa:	ed b7       	in	r30, 0x3d	; 61
   194fc:	fe b7       	in	r31, 0x3e	; 62
   194fe:	f5 82       	std	Z+5, r15	; 0x05
   19500:	e4 82       	std	Z+4, r14	; 0x04
   19502:	86 e4       	ldi	r24, 0x46	; 70
   19504:	9e e3       	ldi	r25, 0x3E	; 62
   19506:	a0 e0       	ldi	r26, 0x00	; 0
   19508:	81 83       	std	Z+1, r24	; 0x01
   1950a:	92 83       	std	Z+2, r25	; 0x02
   1950c:	a3 83       	std	Z+3, r26	; 0x03
   1950e:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   19512:	00 e0       	ldi	r16, 0x00	; 0
   19514:	10 e0       	ldi	r17, 0x00	; 0
   19516:	ec 89       	ldd	r30, Y+20	; 0x14
   19518:	fd 89       	ldd	r31, Y+21	; 0x15
   1951a:	e2 59       	subi	r30, 0x92	; 146
   1951c:	ff 4f       	sbci	r31, 0xFF	; 255
   1951e:	20 81       	ld	r18, Z
   19520:	31 81       	ldd	r19, Z+1	; 0x01
   19522:	21 15       	cp	r18, r1
   19524:	f1 e0       	ldi	r31, 0x01	; 1
   19526:	3f 07       	cpc	r19, r31
   19528:	41 f1       	breq	.+80     	; 0x1957a <lif_check_dir+0x360>
   1952a:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   1952e:	50 91 b7 01 	lds	r21, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19532:	ca 01       	movw	r24, r20
   19534:	88 27       	eor	r24, r24
   19536:	94 70       	andi	r25, 0x04	; 4
   19538:	52 ff       	sbrs	r21, 2
   1953a:	20 c0       	rjmp	.+64     	; 0x1957c <lif_check_dir+0x362>
   1953c:	c9 01       	movw	r24, r18
   1953e:	a0 e0       	ldi	r26, 0x00	; 0
   19540:	b0 e0       	ldi	r27, 0x00	; 0
   19542:	ed b7       	in	r30, 0x3d	; 61
   19544:	fe b7       	in	r31, 0x3e	; 62
   19546:	86 83       	std	Z+6, r24	; 0x06
   19548:	97 83       	std	Z+7, r25	; 0x07
   1954a:	a0 87       	std	Z+8, r26	; 0x08
   1954c:	b1 87       	std	Z+9, r27	; 0x09
   1954e:	ec 89       	ldd	r30, Y+20	; 0x14
   19550:	fd 89       	ldd	r31, Y+21	; 0x15
   19552:	80 81       	ld	r24, Z
   19554:	91 81       	ldd	r25, Z+1	; 0x01
   19556:	ed b7       	in	r30, 0x3d	; 61
   19558:	fe b7       	in	r31, 0x3e	; 62
   1955a:	95 83       	std	Z+5, r25	; 0x05
   1955c:	84 83       	std	Z+4, r24	; 0x04
   1955e:	8a e1       	ldi	r24, 0x1A	; 26
   19560:	9e e3       	ldi	r25, 0x3E	; 62
   19562:	a0 e0       	ldi	r26, 0x00	; 0
   19564:	81 83       	std	Z+1, r24	; 0x01
   19566:	92 83       	std	Z+2, r25	; 0x02
   19568:	a3 83       	std	Z+3, r26	; 0x03
   1956a:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   1956e:	80 e0       	ldi	r24, 0x00	; 0
   19570:	90 e0       	ldi	r25, 0x00	; 0
   19572:	04 c0       	rjmp	.+8      	; 0x1957c <lif_check_dir+0x362>
   19574:	81 e0       	ldi	r24, 0x01	; 1
   19576:	90 e0       	ldi	r25, 0x00	; 0
   19578:	01 c0       	rjmp	.+2      	; 0x1957c <lif_check_dir+0x362>
   1957a:	c8 01       	movw	r24, r16
   1957c:	65 96       	adiw	r28, 0x15	; 21
   1957e:	e2 e1       	ldi	r30, 0x12	; 18
   19580:	0c 94 29 e7 	jmp	0x1ce52	; 0x1ce52 <__epilogue_restores__>

00019584 <lif_close_volume>:
   19584:	cf 93       	push	r28
   19586:	df 93       	push	r29
   19588:	00 97       	sbiw	r24, 0x00	; 0
   1958a:	f9 f0       	breq	.+62     	; 0x195ca <lif_close_volume+0x46>
   1958c:	ec 01       	movw	r28, r24
   1958e:	8a 81       	ldd	r24, Y+2	; 0x02
   19590:	9b 81       	ldd	r25, Y+3	; 0x03
   19592:	00 97       	sbiw	r24, 0x00	; 0
   19594:	79 f0       	breq	.+30     	; 0x195b4 <lif_close_volume+0x30>
   19596:	22 e0       	ldi	r18, 0x02	; 2
   19598:	30 e0       	ldi	r19, 0x00	; 0
   1959a:	40 e0       	ldi	r20, 0x00	; 0
   1959c:	50 e0       	ldi	r21, 0x00	; 0
   1959e:	ba 01       	movw	r22, r20
   195a0:	0e 94 2d 7b 	call	0xf65a	; 0xf65a <fseek>
   195a4:	8a 81       	ldd	r24, Y+2	; 0x02
   195a6:	9b 81       	ldd	r25, Y+3	; 0x03
   195a8:	0e 94 15 7d 	call	0xfa2a	; 0xfa2a <fclose>
   195ac:	1b 82       	std	Y+3, r1	; 0x03
   195ae:	1a 82       	std	Y+2, r1	; 0x02
   195b0:	0e 94 10 7c 	call	0xf820	; 0xf820 <sync>
   195b4:	88 81       	ld	r24, Y
   195b6:	99 81       	ldd	r25, Y+1	; 0x01
   195b8:	00 97       	sbiw	r24, 0x00	; 0
   195ba:	11 f0       	breq	.+4      	; 0x195c0 <lif_close_volume+0x3c>
   195bc:	0e 94 3e c1 	call	0x1827c	; 0x1827c <lif_free>
   195c0:	ce 01       	movw	r24, r28
   195c2:	73 db       	rcall	.-2330   	; 0x18caa <lif_vol_clear>
   195c4:	ce 01       	movw	r24, r28
   195c6:	0e 94 3e c1 	call	0x1827c	; 0x1827c <lif_free>
   195ca:	df 91       	pop	r29
   195cc:	cf 91       	pop	r28
   195ce:	08 95       	ret

000195d0 <lif_checkdirindex>:
   195d0:	cf 92       	push	r12
   195d2:	df 92       	push	r13
   195d4:	ef 92       	push	r14
   195d6:	ff 92       	push	r15
   195d8:	cf 93       	push	r28
   195da:	df 93       	push	r29
   195dc:	ad b7       	in	r26, 0x3d	; 61
   195de:	be b7       	in	r27, 0x3e	; 62
   195e0:	17 97       	sbiw	r26, 0x07	; 7
   195e2:	0f b6       	in	r0, 0x3f	; 63
   195e4:	f8 94       	cli
   195e6:	be bf       	out	0x3e, r27	; 62
   195e8:	0f be       	out	0x3f, r0	; 63
   195ea:	ad bf       	out	0x3d, r26	; 61
   195ec:	9b 01       	movw	r18, r22
   195ee:	77 fd       	sbrc	r23, 7
   195f0:	25 c0       	rjmp	.+74     	; 0x1963c <lif_checkdirindex+0x6c>
   195f2:	ab 01       	movw	r20, r22
   195f4:	77 0f       	add	r23, r23
   195f6:	66 0b       	sbc	r22, r22
   195f8:	77 0b       	sbc	r23, r23
   195fa:	e5 e0       	ldi	r30, 0x05	; 5
   195fc:	44 0f       	add	r20, r20
   195fe:	55 1f       	adc	r21, r21
   19600:	66 1f       	adc	r22, r22
   19602:	77 1f       	adc	r23, r23
   19604:	ea 95       	dec	r30
   19606:	d1 f7       	brne	.-12     	; 0x195fc <lif_checkdirindex+0x2c>
   19608:	c5 2e       	mov	r12, r21
   1960a:	d6 2e       	mov	r13, r22
   1960c:	e7 2e       	mov	r14, r23
   1960e:	ff 24       	eor	r15, r15
   19610:	55 27       	eor	r21, r21
   19612:	66 27       	eor	r22, r22
   19614:	77 27       	eor	r23, r23
   19616:	45 2b       	or	r20, r21
   19618:	46 2b       	or	r20, r22
   1961a:	47 2b       	or	r20, r23
   1961c:	29 f0       	breq	.+10     	; 0x19628 <lif_checkdirindex+0x58>
   1961e:	4f ef       	ldi	r20, 0xFF	; 255
   19620:	c4 1a       	sub	r12, r20
   19622:	d4 0a       	sbc	r13, r20
   19624:	e4 0a       	sbc	r14, r20
   19626:	f4 0a       	sbc	r15, r20
   19628:	fc 01       	movw	r30, r24
   1962a:	45 a9       	ldd	r20, Z+53	; 0x35
   1962c:	56 a9       	ldd	r21, Z+54	; 0x36
   1962e:	67 a9       	ldd	r22, Z+55	; 0x37
   19630:	70 ad       	ldd	r23, Z+56	; 0x38
   19632:	4c 15       	cp	r20, r12
   19634:	5d 05       	cpc	r21, r13
   19636:	6e 05       	cpc	r22, r14
   19638:	7f 05       	cpc	r23, r15
   1963a:	08 f5       	brcc	.+66     	; 0x1967e <lif_checkdirindex+0xae>
   1963c:	ec 01       	movw	r28, r24
   1963e:	ed b7       	in	r30, 0x3d	; 61
   19640:	fe b7       	in	r31, 0x3e	; 62
   19642:	37 83       	std	Z+7, r19	; 0x07
   19644:	26 83       	std	Z+6, r18	; 0x06
   19646:	88 81       	ld	r24, Y
   19648:	99 81       	ldd	r25, Y+1	; 0x01
   1964a:	95 83       	std	Z+5, r25	; 0x05
   1964c:	84 83       	std	Z+4, r24	; 0x04
   1964e:	87 e5       	ldi	r24, 0x57	; 87
   19650:	9d e3       	ldi	r25, 0x3D	; 61
   19652:	a0 e0       	ldi	r26, 0x00	; 0
   19654:	81 83       	std	Z+1, r24	; 0x01
   19656:	92 83       	std	Z+2, r25	; 0x02
   19658:	a3 83       	std	Z+3, r26	; 0x03
   1965a:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   1965e:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   19662:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19666:	c9 01       	movw	r24, r18
   19668:	88 27       	eor	r24, r24
   1966a:	94 70       	andi	r25, 0x04	; 4
   1966c:	32 ff       	sbrs	r19, 2
   1966e:	09 c0       	rjmp	.+18     	; 0x19682 <lif_checkdirindex+0xb2>
   19670:	60 ef       	ldi	r22, 0xF0	; 240
   19672:	75 e1       	ldi	r23, 0x15	; 21
   19674:	ce 01       	movw	r24, r28
   19676:	20 db       	rcall	.-2496   	; 0x18cb8 <lif_dump_vol>
   19678:	80 e0       	ldi	r24, 0x00	; 0
   1967a:	90 e0       	ldi	r25, 0x00	; 0
   1967c:	02 c0       	rjmp	.+4      	; 0x19682 <lif_checkdirindex+0xb2>
   1967e:	81 e0       	ldi	r24, 0x01	; 1
   19680:	90 e0       	ldi	r25, 0x00	; 0
   19682:	ad b7       	in	r26, 0x3d	; 61
   19684:	be b7       	in	r27, 0x3e	; 62
   19686:	17 96       	adiw	r26, 0x07	; 7
   19688:	0f b6       	in	r0, 0x3f	; 63
   1968a:	f8 94       	cli
   1968c:	be bf       	out	0x3e, r27	; 62
   1968e:	0f be       	out	0x3f, r0	; 63
   19690:	ad bf       	out	0x3d, r26	; 61
   19692:	df 91       	pop	r29
   19694:	cf 91       	pop	r28
   19696:	ff 90       	pop	r15
   19698:	ef 90       	pop	r14
   1969a:	df 90       	pop	r13
   1969c:	cf 90       	pop	r12
   1969e:	08 95       	ret

000196a0 <lif_readdirindex>:
   196a0:	a5 e2       	ldi	r26, 0x25	; 37
   196a2:	b0 e0       	ldi	r27, 0x00	; 0
   196a4:	e6 e5       	ldi	r30, 0x56	; 86
   196a6:	fb ec       	ldi	r31, 0xCB	; 203
   196a8:	0c 94 17 e7 	jmp	0x1ce2e	; 0x1ce2e <__prologue_saves__+0x14>
   196ac:	7c 01       	movw	r14, r24
   196ae:	6b 01       	movw	r12, r22
   196b0:	8f df       	rcall	.-226    	; 0x195d0 <lif_checkdirindex>
   196b2:	89 2b       	or	r24, r25
   196b4:	19 f4       	brne	.+6      	; 0x196bc <lif_readdirindex+0x1c>
   196b6:	00 e0       	ldi	r16, 0x00	; 0
   196b8:	10 e0       	ldi	r17, 0x00	; 0
   196ba:	54 c0       	rjmp	.+168    	; 0x19764 <lif_readdirindex+0xc4>
   196bc:	f7 01       	movw	r30, r14
   196be:	85 a5       	ldd	r24, Z+45	; 0x2d
   196c0:	96 a5       	ldd	r25, Z+46	; 0x2e
   196c2:	a7 a5       	ldd	r26, Z+47	; 0x2f
   196c4:	b0 a9       	ldd	r27, Z+48	; 0x30
   196c6:	44 27       	eor	r20, r20
   196c8:	58 2f       	mov	r21, r24
   196ca:	69 2f       	mov	r22, r25
   196cc:	7a 2f       	mov	r23, r26
   196ce:	c6 01       	movw	r24, r12
   196d0:	0d 2c       	mov	r0, r13
   196d2:	00 0c       	add	r0, r0
   196d4:	aa 0b       	sbc	r26, r26
   196d6:	bb 0b       	sbc	r27, r27
   196d8:	35 e0       	ldi	r19, 0x05	; 5
   196da:	88 0f       	add	r24, r24
   196dc:	99 1f       	adc	r25, r25
   196de:	aa 1f       	adc	r26, r26
   196e0:	bb 1f       	adc	r27, r27
   196e2:	3a 95       	dec	r19
   196e4:	d1 f7       	brne	.-12     	; 0x196da <lif_readdirindex+0x3a>
   196e6:	9a 01       	movw	r18, r20
   196e8:	ab 01       	movw	r20, r22
   196ea:	28 0f       	add	r18, r24
   196ec:	39 1f       	adc	r19, r25
   196ee:	4a 1f       	adc	r20, r26
   196f0:	5b 1f       	adc	r21, r27
   196f2:	00 e2       	ldi	r16, 0x20	; 32
   196f4:	10 e0       	ldi	r17, 0x00	; 0
   196f6:	be 01       	movw	r22, r28
   196f8:	6a 5f       	subi	r22, 0xFA	; 250
   196fa:	7f 4f       	sbci	r23, 0xFF	; 255
   196fc:	c7 01       	movw	r24, r14
   196fe:	0e 94 f6 c1 	call	0x183ec	; 0x183ec <lif_read>
   19702:	60 32       	cpi	r22, 0x20	; 32
   19704:	71 05       	cpc	r23, r1
   19706:	81 05       	cpc	r24, r1
   19708:	91 05       	cpc	r25, r1
   1970a:	a8 f2       	brcs	.-86     	; 0x196b6 <lif_readdirindex+0x16>
   1970c:	b7 01       	movw	r22, r14
   1970e:	ce 01       	movw	r24, r28
   19710:	06 96       	adiw	r24, 0x06	; 6
   19712:	75 d9       	rcall	.-3350   	; 0x189fe <lif_str2dir>
   19714:	f7 01       	movw	r30, r14
   19716:	e6 5a       	subi	r30, 0xA6	; 166
   19718:	ff 4f       	sbci	r31, 0xFF	; 255
   1971a:	80 81       	ld	r24, Z
   1971c:	91 81       	ldd	r25, Z+1	; 0x01
   1971e:	01 96       	adiw	r24, 0x01	; 1
   19720:	19 f4       	brne	.+6      	; 0x19728 <lif_readdirindex+0x88>
   19722:	f7 01       	movw	r30, r14
   19724:	d3 a2       	std	Z+35, r13	; 0x23
   19726:	c2 a2       	std	Z+34, r12	; 0x22
   19728:	c7 01       	movw	r24, r14
   1972a:	77 dd       	rcall	.-1298   	; 0x1921a <lif_check_dir>
   1972c:	8c 01       	movw	r16, r24
   1972e:	89 2b       	or	r24, r25
   19730:	b9 f4       	brne	.+46     	; 0x19760 <lif_readdirindex+0xc0>
   19732:	ed b7       	in	r30, 0x3d	; 61
   19734:	fe b7       	in	r31, 0x3e	; 62
   19736:	d5 82       	std	Z+5, r13	; 0x05
   19738:	c4 82       	std	Z+4, r12	; 0x04
   1973a:	87 e3       	ldi	r24, 0x37	; 55
   1973c:	9d e3       	ldi	r25, 0x3D	; 61
   1973e:	a0 e0       	ldi	r26, 0x00	; 0
   19740:	81 83       	std	Z+1, r24	; 0x01
   19742:	92 83       	std	Z+2, r25	; 0x02
   19744:	a3 83       	std	Z+3, r26	; 0x03
   19746:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   1974a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1974e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19752:	92 ff       	sbrs	r25, 2
   19754:	b0 cf       	rjmp	.-160    	; 0x196b6 <lif_readdirindex+0x16>
   19756:	61 e0       	ldi	r22, 0x01	; 1
   19758:	76 e1       	ldi	r23, 0x16	; 22
   1975a:	c7 01       	movw	r24, r14
   1975c:	ad da       	rcall	.-2726   	; 0x18cb8 <lif_dump_vol>
   1975e:	02 c0       	rjmp	.+4      	; 0x19764 <lif_readdirindex+0xc4>
   19760:	01 e0       	ldi	r16, 0x01	; 1
   19762:	10 e0       	ldi	r17, 0x00	; 0
   19764:	c8 01       	movw	r24, r16
   19766:	a5 96       	adiw	r28, 0x25	; 37
   19768:	e8 e0       	ldi	r30, 0x08	; 8
   1976a:	0c 94 33 e7 	jmp	0x1ce66	; 0x1ce66 <__epilogue_restores__+0x14>

0001976e <lif_writedirindex>:
   1976e:	a0 e2       	ldi	r26, 0x20	; 32
   19770:	b0 e0       	ldi	r27, 0x00	; 0
   19772:	ed eb       	ldi	r30, 0xBD	; 189
   19774:	fb ec       	ldi	r31, 0xCB	; 203
   19776:	0c 94 15 e7 	jmp	0x1ce2a	; 0x1ce2a <__prologue_saves__+0x10>
   1977a:	5c 01       	movw	r10, r24
   1977c:	6b 01       	movw	r12, r22
   1977e:	4d dd       	rcall	.-1382   	; 0x1921a <lif_check_dir>
   19780:	7c 01       	movw	r14, r24
   19782:	89 2b       	or	r24, r25
   19784:	71 f4       	brne	.+28     	; 0x197a2 <lif_writedirindex+0x34>
   19786:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1978a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1978e:	92 fd       	sbrc	r25, 2
   19790:	03 c0       	rjmp	.+6      	; 0x19798 <lif_writedirindex+0x2a>
   19792:	e1 2c       	mov	r14, r1
   19794:	f1 2c       	mov	r15, r1
   19796:	42 c0       	rjmp	.+132    	; 0x1981c <lif_writedirindex+0xae>
   19798:	62 e1       	ldi	r22, 0x12	; 18
   1979a:	76 e1       	ldi	r23, 0x16	; 22
   1979c:	c5 01       	movw	r24, r10
   1979e:	8c da       	rcall	.-2792   	; 0x18cb8 <lif_dump_vol>
   197a0:	3d c0       	rjmp	.+122    	; 0x1981c <lif_writedirindex+0xae>
   197a2:	b6 01       	movw	r22, r12
   197a4:	c5 01       	movw	r24, r10
   197a6:	14 df       	rcall	.-472    	; 0x195d0 <lif_checkdirindex>
   197a8:	89 2b       	or	r24, r25
   197aa:	99 f3       	breq	.-26     	; 0x19792 <lif_writedirindex+0x24>
   197ac:	f5 01       	movw	r30, r10
   197ae:	e6 5a       	subi	r30, 0xA6	; 166
   197b0:	ff 4f       	sbci	r31, 0xFF	; 255
   197b2:	80 81       	ld	r24, Z
   197b4:	91 81       	ldd	r25, Z+1	; 0x01
   197b6:	01 96       	adiw	r24, 0x01	; 1
   197b8:	19 f4       	brne	.+6      	; 0x197c0 <lif_writedirindex+0x52>
   197ba:	f5 01       	movw	r30, r10
   197bc:	d3 a2       	std	Z+35, r13	; 0x23
   197be:	c2 a2       	std	Z+34, r12	; 0x22
   197c0:	f5 01       	movw	r30, r10
   197c2:	85 a5       	ldd	r24, Z+45	; 0x2d
   197c4:	96 a5       	ldd	r25, Z+46	; 0x2e
   197c6:	a7 a5       	ldd	r26, Z+47	; 0x2f
   197c8:	b0 a9       	ldd	r27, Z+48	; 0x30
   197ca:	ba 2f       	mov	r27, r26
   197cc:	a9 2f       	mov	r26, r25
   197ce:	98 2f       	mov	r25, r24
   197d0:	88 27       	eor	r24, r24
   197d2:	0d 2c       	mov	r0, r13
   197d4:	00 0c       	add	r0, r0
   197d6:	ee 08       	sbc	r14, r14
   197d8:	ff 08       	sbc	r15, r15
   197da:	35 e0       	ldi	r19, 0x05	; 5
   197dc:	cc 0c       	add	r12, r12
   197de:	dd 1c       	adc	r13, r13
   197e0:	ee 1c       	adc	r14, r14
   197e2:	ff 1c       	adc	r15, r15
   197e4:	3a 95       	dec	r19
   197e6:	d1 f7       	brne	.-12     	; 0x197dc <lif_writedirindex+0x6e>
   197e8:	c8 0e       	add	r12, r24
   197ea:	d9 1e       	adc	r13, r25
   197ec:	ea 1e       	adc	r14, r26
   197ee:	fb 1e       	adc	r15, r27
   197f0:	be 01       	movw	r22, r28
   197f2:	6f 5f       	subi	r22, 0xFF	; 255
   197f4:	7f 4f       	sbci	r23, 0xFF	; 255
   197f6:	c5 01       	movw	r24, r10
   197f8:	97 d8       	rcall	.-3794   	; 0x18928 <lif_dir2str>
   197fa:	00 e2       	ldi	r16, 0x20	; 32
   197fc:	10 e0       	ldi	r17, 0x00	; 0
   197fe:	a7 01       	movw	r20, r14
   19800:	96 01       	movw	r18, r12
   19802:	be 01       	movw	r22, r28
   19804:	6f 5f       	subi	r22, 0xFF	; 255
   19806:	7f 4f       	sbci	r23, 0xFF	; 255
   19808:	c5 01       	movw	r24, r10
   1980a:	0e 94 49 c2 	call	0x18492	; 0x18492 <lif_write>
   1980e:	31 e0       	ldi	r19, 0x01	; 1
   19810:	20 e0       	ldi	r18, 0x00	; 0
   19812:	80 97       	sbiw	r24, 0x20	; 32
   19814:	0c f4       	brge	.+2      	; 0x19818 <lif_writedirindex+0xaa>
   19816:	30 e0       	ldi	r19, 0x00	; 0
   19818:	e3 2e       	mov	r14, r19
   1981a:	f2 2e       	mov	r15, r18
   1981c:	c7 01       	movw	r24, r14
   1981e:	a0 96       	adiw	r28, 0x20	; 32
   19820:	ea e0       	ldi	r30, 0x0A	; 10
   19822:	0c 94 31 e7 	jmp	0x1ce62	; 0x1ce62 <__epilogue_restores__+0x10>

00019826 <lif_writedirEOF>:
   19826:	0f 93       	push	r16
   19828:	1f 93       	push	r17
   1982a:	cf 93       	push	r28
   1982c:	df 93       	push	r29
   1982e:	ec 01       	movw	r28, r24
   19830:	8b 01       	movw	r16, r22
   19832:	33 da       	rcall	.-2970   	; 0x18c9a <lif_dir_clear>
   19834:	fe 01       	movw	r30, r28
   19836:	e6 5a       	subi	r30, 0xA6	; 166
   19838:	ff 4f       	sbci	r31, 0xFF	; 255
   1983a:	8f ef       	ldi	r24, 0xFF	; 255
   1983c:	9f ef       	ldi	r25, 0xFF	; 255
   1983e:	91 83       	std	Z+1, r25	; 0x01
   19840:	80 83       	st	Z, r24
   19842:	1b a3       	std	Y+35, r17	; 0x23
   19844:	0a a3       	std	Y+34, r16	; 0x22
   19846:	b8 01       	movw	r22, r16
   19848:	ce 01       	movw	r24, r28
   1984a:	91 df       	rcall	.-222    	; 0x1976e <lif_writedirindex>
   1984c:	df 91       	pop	r29
   1984e:	cf 91       	pop	r28
   19850:	1f 91       	pop	r17
   19852:	0f 91       	pop	r16
   19854:	08 95       	ret

00019856 <lif_updatefree>:
/// @brief Update free space
/// @parameter[in] *LIF: LIF structure
/// @return: LIF or NULL on error
MEMSPACE
lif_t *lif_updatefree(lif_t *LIF)
{
   19856:	2f 92       	push	r2
   19858:	3f 92       	push	r3
   1985a:	4f 92       	push	r4
   1985c:	5f 92       	push	r5
   1985e:	6f 92       	push	r6
   19860:	7f 92       	push	r7
   19862:	8f 92       	push	r8
   19864:	af 92       	push	r10
   19866:	bf 92       	push	r11
   19868:	cf 92       	push	r12
   1986a:	df 92       	push	r13
   1986c:	ef 92       	push	r14
   1986e:	ff 92       	push	r15
   19870:	0f 93       	push	r16
   19872:	1f 93       	push	r17
   19874:	cf 93       	push	r28
   19876:	df 93       	push	r29
   19878:	cd b7       	in	r28, 0x3d	; 61
   1987a:	de b7       	in	r29, 0x3e	; 62
   1987c:	2f 97       	sbiw	r28, 0x0f	; 15
   1987e:	0f b6       	in	r0, 0x3f	; 63
   19880:	f8 94       	cli
   19882:	de bf       	out	0x3e, r29	; 62
   19884:	0f be       	out	0x3f, r0	; 63
   19886:	cd bf       	out	0x3d, r28	; 61
   19888:	9f 87       	std	Y+15, r25	; 0x0f
   1988a:	8e 87       	std	Y+14, r24	; 0x0e
    int index = 0;
    int purgeindex = -1;

// Start of free space
    uint32_t start = LIF->filestart;
   1988c:	fc 01       	movw	r30, r24
   1988e:	24 84       	ldd	r2, Z+12	; 0x0c
   19890:	35 84       	ldd	r3, Z+13	; 0x0d
   19892:	46 84       	ldd	r4, Z+14	; 0x0e
   19894:	57 84       	ldd	r5, Z+15	; 0x0f
// Free sectors
    LIF->freesectors = LIF->filesectors;
   19896:	80 89       	ldd	r24, Z+16	; 0x10
   19898:	91 89       	ldd	r25, Z+17	; 0x11
   1989a:	a2 89       	ldd	r26, Z+18	; 0x12
   1989c:	b3 89       	ldd	r27, Z+19	; 0x13
   1989e:	80 8f       	std	Z+24, r24	; 0x18
   198a0:	91 8f       	std	Z+25, r25	; 0x19
   198a2:	a2 8f       	std	Z+26, r26	; 0x1a
   198a4:	b3 8f       	std	Z+27, r27	; 0x1b
// Used sectors
    LIF->usedsectors = 0;
   198a6:	14 8a       	std	Z+20, r1	; 0x14
   198a8:	15 8a       	std	Z+21, r1	; 0x15
   198aa:	16 8a       	std	Z+22, r1	; 0x16
   198ac:	17 8a       	std	Z+23, r1	; 0x17
// Purged files
    LIF->purged= 0;
   198ae:	17 8e       	std	Z+31, r1	; 0x1f
   198b0:	16 8e       	std	Z+30, r1	; 0x1e
// Files
    LIF->files = 0;
   198b2:	15 8e       	std	Z+29, r1	; 0x1d
   198b4:	14 8e       	std	Z+28, r1	; 0x1c
// Director pointer
    LIF->dirindex = 0;
   198b6:	11 a2       	std	Z+33, r1	; 0x21
   198b8:	10 a2       	std	Z+32, r1	; 0x20
// Directory EOF record
    LIF->EOFindex = 0;
   198ba:	13 a2       	std	Z+35, r1	; 0x23
   198bc:	12 a2       	std	Z+34, r1	; 0x22
   198be:	cc 24       	eor	r12, r12
   198c0:	c3 94       	inc	r12
   198c2:	d1 2c       	mov	r13, r1
/// @return: LIF or NULL on error
MEMSPACE
lif_t *lif_updatefree(lif_t *LIF)
{
    int index = 0;
    int purgeindex = -1;
   198c4:	0f ef       	ldi	r16, 0xFF	; 255
   198c6:	1f ef       	ldi	r17, 0xFF	; 255
        if( !lif_readdirindex(LIF,index) )
        {
            return(NULL);
        }

        if(LIF->DIR.FileType == 0xffff)
   198c8:	e6 5a       	subi	r30, 0xA6	; 166
   198ca:	ff 4f       	sbci	r31, 0xFF	; 255
   198cc:	f9 87       	std	Y+9, r31	; 0x09
   198ce:	e8 87       	std	Y+8, r30	; 0x08
            LIF->purged++;
            ++index;
            continue;
        }
        purgeindex = -1;
        if(start > LIF->DIR.FileStartSector)
   198d0:	ae 84       	ldd	r10, Y+14	; 0x0e
   198d2:	bf 84       	ldd	r11, Y+15	; 0x0f
   198d4:	fc e5       	ldi	r31, 0x5C	; 92
   198d6:	af 0e       	add	r10, r31
   198d8:	b1 1c       	adc	r11, r1
        {
            if(debuglevel & LIF_DEBUG)
                printf("lif_update_free:[%s] error previous record file area overlaps this one:[%s]\n", LIF->name, LIF->DIR.filename);

        }
        LIF->usedsectors += LIF->DIR.FileSectors;
   198da:	8e 85       	ldd	r24, Y+14	; 0x0e
   198dc:	9f 85       	ldd	r25, Y+15	; 0x0f
   198de:	80 5a       	subi	r24, 0xA0	; 160
   198e0:	9f 4f       	sbci	r25, 0xFF	; 255
   198e2:	9b 87       	std	Y+11, r25	; 0x0b
   198e4:	8a 87       	std	Y+10, r24	; 0x0a
        }
        purgeindex = -1;
        if(start > LIF->DIR.FileStartSector)
        {
            if(debuglevel & LIF_DEBUG)
                printf("lif_update_free:[%s] error previous record file area overlaps this one:[%s]\n", LIF->name, LIF->DIR.filename);
   198e6:	ee 85       	ldd	r30, Y+14	; 0x0e
   198e8:	ff 85       	ldd	r31, Y+15	; 0x0f
   198ea:	e1 5b       	subi	r30, 0xB1	; 177
   198ec:	ff 4f       	sbci	r31, 0xFF	; 255
   198ee:	fd 87       	std	Y+13, r31	; 0x0d
   198f0:	ec 87       	std	Y+12, r30	; 0x0c
   198f2:	8a ee       	ldi	r24, 0xEA	; 234
   198f4:	9c e3       	ldi	r25, 0x3C	; 60
   198f6:	3c 01       	movw	r6, r24
   198f8:	81 2c       	mov	r8, r1
   198fa:	76 01       	movw	r14, r12
   198fc:	21 e0       	ldi	r18, 0x01	; 1
   198fe:	e2 1a       	sub	r14, r18
   19900:	f1 08       	sbc	r15, r1
    LIF->EOFindex = 0;

/// Update free
    while(1)
    {
        if( !lif_readdirindex(LIF,index) )
   19902:	b7 01       	movw	r22, r14
   19904:	8e 85       	ldd	r24, Y+14	; 0x0e
   19906:	9f 85       	ldd	r25, Y+15	; 0x0f
   19908:	cb de       	rcall	.-618    	; 0x196a0 <lif_readdirindex>
   1990a:	89 2b       	or	r24, r25
   1990c:	19 f4       	brne	.+6      	; 0x19914 <lif_updatefree+0xbe>
        {
            return(NULL);
   1990e:	80 e0       	ldi	r24, 0x00	; 0
   19910:	90 e0       	ldi	r25, 0x00	; 0
   19912:	93 c0       	rjmp	.+294    	; 0x19a3a <lif_updatefree+0x1e4>
        }

        if(LIF->DIR.FileType == 0xffff)
   19914:	e8 85       	ldd	r30, Y+8	; 0x08
   19916:	f9 85       	ldd	r31, Y+9	; 0x09
   19918:	80 81       	ld	r24, Z
   1991a:	91 81       	ldd	r25, Z+1	; 0x01
   1991c:	8f 3f       	cpi	r24, 0xFF	; 255
   1991e:	ff ef       	ldi	r31, 0xFF	; 255
   19920:	9f 07       	cpc	r25, r31
   19922:	c1 f4       	brne	.+48     	; 0x19954 <lif_updatefree+0xfe>
        {
            LIF->EOFindex = index;
            if(purgeindex != -1)
            {
                LIF->EOFindex = purgeindex;
   19924:	ee 85       	ldd	r30, Y+14	; 0x0e
   19926:	ff 85       	ldd	r31, Y+15	; 0x0f
        }

        if(LIF->DIR.FileType == 0xffff)
        {
            LIF->EOFindex = index;
            if(purgeindex != -1)
   19928:	0f 3f       	cpi	r16, 0xFF	; 255
   1992a:	2f ef       	ldi	r18, 0xFF	; 255
   1992c:	12 07       	cpc	r17, r18
   1992e:	09 f4       	brne	.+2      	; 0x19932 <lif_updatefree+0xdc>
   19930:	7a c0       	rjmp	.+244    	; 0x19a26 <lif_updatefree+0x1d0>
            {
                LIF->EOFindex = purgeindex;
   19932:	13 a3       	std	Z+35, r17	; 0x23
   19934:	02 a3       	std	Z+34, r16	; 0x22

// Adjust purged file count
                LIF->purged -= (index - purgeindex);
   19936:	e0 1a       	sub	r14, r16
   19938:	f1 0a       	sbc	r15, r17
   1993a:	86 8d       	ldd	r24, Z+30	; 0x1e
   1993c:	97 8d       	ldd	r25, Z+31	; 0x1f
   1993e:	8e 19       	sub	r24, r14
   19940:	9f 09       	sbc	r25, r15
   19942:	97 8f       	std	Z+31, r25	; 0x1f
   19944:	86 8f       	std	Z+30, r24	; 0x1e
// update EOF
                if(!lif_writedirEOF(LIF,purgeindex))
   19946:	b8 01       	movw	r22, r16
   19948:	cf 01       	movw	r24, r30
   1994a:	6d df       	rcall	.-294    	; 0x19826 <lif_writedirEOF>
   1994c:	89 2b       	or	r24, r25
   1994e:	09 f0       	breq	.+2      	; 0x19952 <lif_updatefree+0xfc>
   19950:	6c c0       	rjmp	.+216    	; 0x19a2a <lif_updatefree+0x1d4>
   19952:	dd cf       	rjmp	.-70     	; 0x1990e <lif_updatefree+0xb8>
                    return(NULL);
                }
            }
            break;
        }
        if(LIF->DIR.FileType == 0)
   19954:	89 2b       	or	r24, r25
   19956:	81 f4       	brne	.+32     	; 0x19978 <lif_updatefree+0x122>
        {
            if(purgeindex == -1)
   19958:	0f 3f       	cpi	r16, 0xFF	; 255
   1995a:	ff ef       	ldi	r31, 0xFF	; 255
   1995c:	1f 07       	cpc	r17, r31
   1995e:	09 f4       	brne	.+2      	; 0x19962 <lif_updatefree+0x10c>
   19960:	87 01       	movw	r16, r14
                purgeindex = index;
            LIF->purged++;
   19962:	ee 85       	ldd	r30, Y+14	; 0x0e
   19964:	ff 85       	ldd	r31, Y+15	; 0x0f
   19966:	86 8d       	ldd	r24, Z+30	; 0x1e
   19968:	97 8d       	ldd	r25, Z+31	; 0x1f
   1996a:	01 96       	adiw	r24, 0x01	; 1
   1996c:	97 8f       	std	Z+31, r25	; 0x1f
   1996e:	86 8f       	std	Z+30, r24	; 0x1e
   19970:	ff ef       	ldi	r31, 0xFF	; 255
   19972:	cf 1a       	sub	r12, r31
   19974:	df 0a       	sbc	r13, r31
   19976:	c1 cf       	rjmp	.-126    	; 0x198fa <lif_updatefree+0xa4>
            ++index;
            continue;
        }
        purgeindex = -1;
        if(start > LIF->DIR.FileStartSector)
   19978:	f5 01       	movw	r30, r10
   1997a:	80 81       	ld	r24, Z
   1997c:	91 81       	ldd	r25, Z+1	; 0x01
   1997e:	a2 81       	ldd	r26, Z+2	; 0x02
   19980:	b3 81       	ldd	r27, Z+3	; 0x03
   19982:	82 15       	cp	r24, r2
   19984:	93 05       	cpc	r25, r3
   19986:	a4 05       	cpc	r26, r4
   19988:	b5 05       	cpc	r27, r5
   1998a:	c8 f4       	brcc	.+50     	; 0x199be <lif_updatefree+0x168>
        {
            if(debuglevel & LIF_DEBUG)
   1998c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19990:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19994:	92 ff       	sbrs	r25, 2
   19996:	13 c0       	rjmp	.+38     	; 0x199be <lif_updatefree+0x168>
                printf("lif_update_free:[%s] error previous record file area overlaps this one:[%s]\n", LIF->name, LIF->DIR.filename);
   19998:	8c 85       	ldd	r24, Y+12	; 0x0c
   1999a:	9d 85       	ldd	r25, Y+13	; 0x0d
   1999c:	ed b7       	in	r30, 0x3d	; 61
   1999e:	fe b7       	in	r31, 0x3e	; 62
   199a0:	97 83       	std	Z+7, r25	; 0x07
   199a2:	86 83       	std	Z+6, r24	; 0x06
   199a4:	ee 85       	ldd	r30, Y+14	; 0x0e
   199a6:	ff 85       	ldd	r31, Y+15	; 0x0f
   199a8:	80 81       	ld	r24, Z
   199aa:	91 81       	ldd	r25, Z+1	; 0x01
   199ac:	ed b7       	in	r30, 0x3d	; 61
   199ae:	fe b7       	in	r31, 0x3e	; 62
   199b0:	95 83       	std	Z+5, r25	; 0x05
   199b2:	84 83       	std	Z+4, r24	; 0x04
   199b4:	61 82       	std	Z+1, r6	; 0x01
   199b6:	72 82       	std	Z+2, r7	; 0x02
   199b8:	83 82       	std	Z+3, r8	; 0x03
   199ba:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>

        }
        LIF->usedsectors += LIF->DIR.FileSectors;
   199be:	ea 85       	ldd	r30, Y+10	; 0x0a
   199c0:	fb 85       	ldd	r31, Y+11	; 0x0b
   199c2:	80 81       	ld	r24, Z
   199c4:	91 81       	ldd	r25, Z+1	; 0x01
   199c6:	a2 81       	ldd	r26, Z+2	; 0x02
   199c8:	b3 81       	ldd	r27, Z+3	; 0x03
   199ca:	ee 85       	ldd	r30, Y+14	; 0x0e
   199cc:	ff 85       	ldd	r31, Y+15	; 0x0f
   199ce:	44 89       	ldd	r20, Z+20	; 0x14
   199d0:	55 89       	ldd	r21, Z+21	; 0x15
   199d2:	66 89       	ldd	r22, Z+22	; 0x16
   199d4:	77 89       	ldd	r23, Z+23	; 0x17
   199d6:	48 0f       	add	r20, r24
   199d8:	59 1f       	adc	r21, r25
   199da:	6a 1f       	adc	r22, r26
   199dc:	7b 1f       	adc	r23, r27
   199de:	44 8b       	std	Z+20, r20	; 0x14
   199e0:	55 8b       	std	Z+21, r21	; 0x15
   199e2:	66 8b       	std	Z+22, r22	; 0x16
   199e4:	77 8b       	std	Z+23, r23	; 0x17
        LIF->freesectors -= LIF->DIR.FileSectors;
   199e6:	40 8d       	ldd	r20, Z+24	; 0x18
   199e8:	51 8d       	ldd	r21, Z+25	; 0x19
   199ea:	62 8d       	ldd	r22, Z+26	; 0x1a
   199ec:	73 8d       	ldd	r23, Z+27	; 0x1b
   199ee:	48 1b       	sub	r20, r24
   199f0:	59 0b       	sbc	r21, r25
   199f2:	6a 0b       	sbc	r22, r26
   199f4:	7b 0b       	sbc	r23, r27
   199f6:	40 8f       	std	Z+24, r20	; 0x18
   199f8:	51 8f       	std	Z+25, r21	; 0x19
   199fa:	62 8f       	std	Z+26, r22	; 0x1a
   199fc:	73 8f       	std	Z+27, r23	; 0x1b
        LIF->files++;
   199fe:	24 8d       	ldd	r18, Z+28	; 0x1c
   19a00:	35 8d       	ldd	r19, Z+29	; 0x1d
   19a02:	2f 5f       	subi	r18, 0xFF	; 255
   19a04:	3f 4f       	sbci	r19, 0xFF	; 255
   19a06:	35 8f       	std	Z+29, r19	; 0x1d
   19a08:	24 8f       	std	Z+28, r18	; 0x1c
        ++index;
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   19a0a:	f5 01       	movw	r30, r10
   19a0c:	40 81       	ld	r20, Z
   19a0e:	51 81       	ldd	r21, Z+1	; 0x01
   19a10:	62 81       	ldd	r22, Z+2	; 0x02
   19a12:	73 81       	ldd	r23, Z+3	; 0x03
   19a14:	1c 01       	movw	r2, r24
   19a16:	2d 01       	movw	r4, r26
   19a18:	24 0e       	add	r2, r20
   19a1a:	35 1e       	adc	r3, r21
   19a1c:	46 1e       	adc	r4, r22
   19a1e:	57 1e       	adc	r5, r23
                purgeindex = index;
            LIF->purged++;
            ++index;
            continue;
        }
        purgeindex = -1;
   19a20:	0f ef       	ldi	r16, 0xFF	; 255
   19a22:	1f ef       	ldi	r17, 0xFF	; 255
   19a24:	a5 cf       	rjmp	.-182    	; 0x19970 <lif_updatefree+0x11a>
            return(NULL);
        }

        if(LIF->DIR.FileType == 0xffff)
        {
            LIF->EOFindex = index;
   19a26:	f3 a2       	std	Z+35, r15	; 0x23
   19a28:	e2 a2       	std	Z+34, r14	; 0x22
/// @return void
MEMSPACE
void lif_rewinddir(lif_t *LIF)
{
// Directory index
    LIF->dirindex = -1;
   19a2a:	8f ef       	ldi	r24, 0xFF	; 255
   19a2c:	9f ef       	ldi	r25, 0xFF	; 255
   19a2e:	ee 85       	ldd	r30, Y+14	; 0x0e
   19a30:	ff 85       	ldd	r31, Y+15	; 0x0f
   19a32:	91 a3       	std	Z+33, r25	; 0x21
   19a34:	80 a3       	std	Z+32, r24	; 0x20
        ++index;
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
    }
// rewind
    lif_rewinddir(LIF);
    return(LIF);
   19a36:	8e 85       	ldd	r24, Y+14	; 0x0e
   19a38:	9f 85       	ldd	r25, Y+15	; 0x0f
}
   19a3a:	2f 96       	adiw	r28, 0x0f	; 15
   19a3c:	0f b6       	in	r0, 0x3f	; 63
   19a3e:	f8 94       	cli
   19a40:	de bf       	out	0x3e, r29	; 62
   19a42:	0f be       	out	0x3f, r0	; 63
   19a44:	cd bf       	out	0x3d, r28	; 61
   19a46:	df 91       	pop	r29
   19a48:	cf 91       	pop	r28
   19a4a:	1f 91       	pop	r17
   19a4c:	0f 91       	pop	r16
   19a4e:	ff 90       	pop	r15
   19a50:	ef 90       	pop	r14
   19a52:	df 90       	pop	r13
   19a54:	cf 90       	pop	r12
   19a56:	bf 90       	pop	r11
   19a58:	af 90       	pop	r10
   19a5a:	8f 90       	pop	r8
   19a5c:	7f 90       	pop	r7
   19a5e:	6f 90       	pop	r6
   19a60:	5f 90       	pop	r5
   19a62:	4f 90       	pop	r4
   19a64:	3f 90       	pop	r3
   19a66:	2f 90       	pop	r2
   19a68:	08 95       	ret

00019a6a <lif_create_volume>:
/// @param[in] dirstart:   Directory start sector
/// @param[in] dirsectors: Directory sectors
/// @return pointer to LIF structure
MEMSPACE
lif_t *lif_create_volume(char *imagename, char *liflabel, long dirstart, long dirsectors, long filesectors)
{
   19a6a:	a9 e2       	ldi	r26, 0x29	; 41
   19a6c:	b1 e0       	ldi	r27, 0x01	; 1
   19a6e:	eb e3       	ldi	r30, 0x3B	; 59
   19a70:	fd ec       	ldi	r31, 0xCD	; 205
   19a72:	0c 94 0d e7 	jmp	0x1ce1a	; 0x1ce1a <__prologue_saves__>
   19a76:	4c 01       	movw	r8, r24
   19a78:	3b 01       	movw	r6, r22
   19a7a:	19 01       	movw	r2, r18
   19a7c:	2a 01       	movw	r4, r20
   19a7e:	ca 5d       	subi	r28, 0xDA	; 218
   19a80:	de 4f       	sbci	r29, 0xFE	; 254
   19a82:	e8 82       	st	Y, r14
   19a84:	f9 82       	std	Y+1, r15	; 0x01
   19a86:	0a 83       	std	Y+2, r16	; 0x02
   19a88:	1b 83       	std	Y+3, r17	; 0x03
   19a8a:	c6 52       	subi	r28, 0x26	; 38
   19a8c:	d1 40       	sbci	r29, 0x01	; 1
   19a8e:	c2 5e       	subi	r28, 0xE2	; 226
   19a90:	de 4f       	sbci	r29, 0xFE	; 254
   19a92:	a8 82       	st	Y, r10
   19a94:	b9 82       	std	Y+1, r11	; 0x01
   19a96:	ca 82       	std	Y+2, r12	; 0x02
   19a98:	db 82       	std	Y+3, r13	; 0x03
   19a9a:	ce 51       	subi	r28, 0x1E	; 30
   19a9c:	d1 40       	sbci	r29, 0x01	; 1
    long i;
    long offset;
    long count;
    uint8_t buffer[LIF_SECTOR_SIZE];

    time_t t = time(NULL);
   19a9e:	80 e0       	ldi	r24, 0x00	; 0
   19aa0:	90 e0       	ldi	r25, 0x00	; 0
   19aa2:	0e 94 2e 38 	call	0x705c	; 0x705c <time>
   19aa6:	5b 01       	movw	r10, r22
   19aa8:	6c 01       	movw	r12, r24

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
   19aaa:	64 e7       	ldi	r22, 0x74	; 116
   19aac:	70 e0       	ldi	r23, 0x00	; 0
   19aae:	80 e0       	ldi	r24, 0x00	; 0
   19ab0:	90 e0       	ldi	r25, 0x00	; 0
   19ab2:	0e 94 08 c1 	call	0x18210	; 0x18210 <lif_calloc>
   19ab6:	7c 01       	movw	r14, r24
    if(LIF == NULL)
   19ab8:	89 2b       	or	r24, r25
   19aba:	09 f4       	brne	.+2      	; 0x19abe <lif_create_volume+0x54>
   19abc:	b6 c2       	rjmp	.+1388   	; 0x1a02a <lif_create_volume+0x5c0>
        return(NULL);

    printf("Creating:%s, Label:[%s], Directory Start %ld, Directory Size: %ld, File Sectors:%ld\n",
   19abe:	c2 5e       	subi	r28, 0xE2	; 226
   19ac0:	de 4f       	sbci	r29, 0xFE	; 254
   19ac2:	28 81       	ld	r18, Y
   19ac4:	39 81       	ldd	r19, Y+1	; 0x01
   19ac6:	4a 81       	ldd	r20, Y+2	; 0x02
   19ac8:	5b 81       	ldd	r21, Y+3	; 0x03
   19aca:	ce 51       	subi	r28, 0x1E	; 30
   19acc:	d1 40       	sbci	r29, 0x01	; 1
   19ace:	ed b7       	in	r30, 0x3d	; 61
   19ad0:	fe b7       	in	r31, 0x3e	; 62
   19ad2:	20 8b       	std	Z+16, r18	; 0x10
   19ad4:	31 8b       	std	Z+17, r19	; 0x11
   19ad6:	42 8b       	std	Z+18, r20	; 0x12
   19ad8:	53 8b       	std	Z+19, r21	; 0x13
   19ada:	ca 5d       	subi	r28, 0xDA	; 218
   19adc:	de 4f       	sbci	r29, 0xFE	; 254
   19ade:	28 81       	ld	r18, Y
   19ae0:	39 81       	ldd	r19, Y+1	; 0x01
   19ae2:	4a 81       	ldd	r20, Y+2	; 0x02
   19ae4:	5b 81       	ldd	r21, Y+3	; 0x03
   19ae6:	c6 52       	subi	r28, 0x26	; 38
   19ae8:	d1 40       	sbci	r29, 0x01	; 1
   19aea:	24 87       	std	Z+12, r18	; 0x0c
   19aec:	35 87       	std	Z+13, r19	; 0x0d
   19aee:	46 87       	std	Z+14, r20	; 0x0e
   19af0:	57 87       	std	Z+15, r21	; 0x0f
   19af2:	20 86       	std	Z+8, r2	; 0x08
   19af4:	31 86       	std	Z+9, r3	; 0x09
   19af6:	42 86       	std	Z+10, r4	; 0x0a
   19af8:	53 86       	std	Z+11, r5	; 0x0b
   19afa:	77 82       	std	Z+7, r7	; 0x07
   19afc:	66 82       	std	Z+6, r6	; 0x06
   19afe:	95 82       	std	Z+5, r9	; 0x05
   19b00:	84 82       	std	Z+4, r8	; 0x04
   19b02:	85 ec       	ldi	r24, 0xC5	; 197
   19b04:	9d e3       	ldi	r25, 0x3D	; 61
   19b06:	a0 e0       	ldi	r26, 0x00	; 0
   19b08:	81 83       	std	Z+1, r24	; 0x01
   19b0a:	92 83       	std	Z+2, r25	; 0x02
   19b0c:	a3 83       	std	Z+3, r26	; 0x03
   19b0e:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
        imagename, liflabel, dirstart, dirsectors, filesectors );

    if(debuglevel & LIF_DEBUG)
   19b12:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19b16:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19b1a:	92 ff       	sbrs	r25, 2
   19b1c:	04 c0       	rjmp	.+8      	; 0x19b26 <lif_create_volume+0xbc>
        lif_dump_vol(LIF,"lif_create_volume");
   19b1e:	64 e2       	ldi	r22, 0x24	; 36
   19b20:	76 e1       	ldi	r23, 0x16	; 22
   19b22:	c7 01       	movw	r24, r14
   19b24:	c9 d8       	rcall	.-3694   	; 0x18cb8 <lif_dump_vol>

    lif_image_clear(LIF);
   19b26:	c7 01       	movw	r24, r14
   19b28:	b2 d8       	rcall	.-3740   	; 0x18c8e <lif_image_clear>

// Initialize volume header
    LIF->VOL.LIFid = 0x8000;
   19b2a:	80 e0       	ldi	r24, 0x00	; 0
   19b2c:	90 e8       	ldi	r25, 0x80	; 128
   19b2e:	f7 01       	movw	r30, r14
   19b30:	95 a3       	std	Z+37, r25	; 0x25
   19b32:	84 a3       	std	Z+36, r24	; 0x24
    lif_fixname(LIF->VOL.Label, liflabel, 6);
   19b34:	46 e0       	ldi	r20, 0x06	; 6
   19b36:	50 e0       	ldi	r21, 0x00	; 0
   19b38:	b3 01       	movw	r22, r6
   19b3a:	c7 01       	movw	r24, r14
   19b3c:	86 96       	adiw	r24, 0x26	; 38
   19b3e:	0e 94 4b c3 	call	0x18696	; 0x18696 <lif_fixname>
    LIF->VOL.DirStartSector = dirstart;
   19b42:	f7 01       	movw	r30, r14
   19b44:	25 a6       	std	Z+45, r2	; 0x2d
   19b46:	36 a6       	std	Z+46, r3	; 0x2e
   19b48:	47 a6       	std	Z+47, r4	; 0x2f
   19b4a:	50 aa       	std	Z+48, r5	; 0x30
    LIF->VOL.DirSectors = dirsectors;
   19b4c:	ca 5d       	subi	r28, 0xDA	; 218
   19b4e:	de 4f       	sbci	r29, 0xFE	; 254
   19b50:	28 81       	ld	r18, Y
   19b52:	39 81       	ldd	r19, Y+1	; 0x01
   19b54:	4a 81       	ldd	r20, Y+2	; 0x02
   19b56:	5b 81       	ldd	r21, Y+3	; 0x03
   19b58:	c6 52       	subi	r28, 0x26	; 38
   19b5a:	d1 40       	sbci	r29, 0x01	; 1
   19b5c:	25 ab       	std	Z+53, r18	; 0x35
   19b5e:	36 ab       	std	Z+54, r19	; 0x36
   19b60:	47 ab       	std	Z+55, r20	; 0x37
   19b62:	50 af       	std	Z+56, r21	; 0x38
    LIF->VOL.System3000LIFid = 0x1000;
   19b64:	80 e0       	ldi	r24, 0x00	; 0
   19b66:	90 e1       	ldi	r25, 0x10	; 16
   19b68:	92 ab       	std	Z+50, r25	; 0x32
   19b6a:	81 ab       	std	Z+49, r24	; 0x31
    LIF->VOL.tracks_per_side = 0;
   19b6c:	fd 96       	adiw	r30, 0x3d	; 61
   19b6e:	10 82       	st	Z, r1
   19b70:	11 82       	std	Z+1, r1	; 0x01
   19b72:	12 82       	std	Z+2, r1	; 0x02
   19b74:	13 82       	std	Z+3, r1	; 0x03
    LIF->VOL.sides = 0;
   19b76:	34 96       	adiw	r30, 0x04	; 4
   19b78:	10 82       	st	Z, r1
   19b7a:	11 82       	std	Z+1, r1	; 0x01
   19b7c:	12 82       	std	Z+2, r1	; 0x02
   19b7e:	13 82       	std	Z+3, r1	; 0x03
    LIF->VOL.sectors_per_track = 0;
   19b80:	34 96       	adiw	r30, 0x04	; 4
   19b82:	10 82       	st	Z, r1
   19b84:	11 82       	std	Z+1, r1	; 0x01
   19b86:	12 82       	std	Z+2, r1	; 0x02
   19b88:	13 82       	std	Z+3, r1	; 0x03
///@brief 0 causes time to return the current date

    lif_time2lifbcd(t, LIF->VOL.date);
   19b8a:	a7 01       	movw	r20, r14
   19b8c:	47 5b       	subi	r20, 0xB7	; 183
   19b8e:	5f 4f       	sbci	r21, 0xFF	; 255
   19b90:	c6 01       	movw	r24, r12
   19b92:	b5 01       	movw	r22, r10
   19b94:	0e 94 70 c5 	call	0x18ae0	; 0x18ae0 <lif_time2lifbcd>

// update LIF headers
    LIF->name = lif_stralloc(imagename);
   19b98:	c4 01       	movw	r24, r8
   19b9a:	0e 94 53 c1 	call	0x182a6	; 0x182a6 <lif_stralloc>
   19b9e:	d7 01       	movw	r26, r14
   19ba0:	8d 93       	st	X+, r24
   19ba2:	9c 93       	st	X, r25
    if(LIF->name == NULL)
   19ba4:	89 2b       	or	r24, r25
   19ba6:	09 f4       	brne	.+2      	; 0x19baa <lif_create_volume+0x140>
   19ba8:	35 c2       	rjmp	.+1130   	; 0x1a014 <lif_create_volume+0x5aa>
        lif_close_volume(LIF);
        return(NULL);
    }

// Initilize all LIF headers
    LIF->filesectors = filesectors;
   19baa:	c2 5e       	subi	r28, 0xE2	; 226
   19bac:	de 4f       	sbci	r29, 0xFE	; 254
   19bae:	28 81       	ld	r18, Y
   19bb0:	39 81       	ldd	r19, Y+1	; 0x01
   19bb2:	4a 81       	ldd	r20, Y+2	; 0x02
   19bb4:	5b 81       	ldd	r21, Y+3	; 0x03
   19bb6:	ce 51       	subi	r28, 0x1E	; 30
   19bb8:	d1 40       	sbci	r29, 0x01	; 1
   19bba:	f7 01       	movw	r30, r14
   19bbc:	20 8b       	std	Z+16, r18	; 0x10
   19bbe:	31 8b       	std	Z+17, r19	; 0x11
   19bc0:	42 8b       	std	Z+18, r20	; 0x12
   19bc2:	53 8b       	std	Z+19, r21	; 0x13
    LIF->filestart = dirstart + dirsectors;
   19bc4:	ca 5d       	subi	r28, 0xDA	; 218
   19bc6:	de 4f       	sbci	r29, 0xFE	; 254
   19bc8:	88 81       	ld	r24, Y
   19bca:	99 81       	ldd	r25, Y+1	; 0x01
   19bcc:	aa 81       	ldd	r26, Y+2	; 0x02
   19bce:	bb 81       	ldd	r27, Y+3	; 0x03
   19bd0:	c6 52       	subi	r28, 0x26	; 38
   19bd2:	d1 40       	sbci	r29, 0x01	; 1
   19bd4:	82 0d       	add	r24, r2
   19bd6:	93 1d       	adc	r25, r3
   19bd8:	a4 1d       	adc	r26, r4
   19bda:	b5 1d       	adc	r27, r5
   19bdc:	84 87       	std	Z+12, r24	; 0x0c
   19bde:	95 87       	std	Z+13, r25	; 0x0d
   19be0:	a6 87       	std	Z+14, r26	; 0x0e
   19be2:	b7 87       	std	Z+15, r27	; 0x0f
    LIF->sectors = (LIF->filestart+LIF->filesectors);
   19be4:	82 0f       	add	r24, r18
   19be6:	93 1f       	adc	r25, r19
   19be8:	a4 1f       	adc	r26, r20
   19bea:	b5 1f       	adc	r27, r21
   19bec:	84 83       	std	Z+4, r24	; 0x04
   19bee:	95 83       	std	Z+5, r25	; 0x05
   19bf0:	a6 83       	std	Z+6, r26	; 0x06
   19bf2:	b7 83       	std	Z+7, r27	; 0x07
    LIF->imagebytes = LIF->sectors * (long)LIF_SECTOR_SIZE;
   19bf4:	ba 2f       	mov	r27, r26
   19bf6:	a9 2f       	mov	r26, r25
   19bf8:	98 2f       	mov	r25, r24
   19bfa:	88 27       	eor	r24, r24
   19bfc:	80 87       	std	Z+8, r24	; 0x08
   19bfe:	91 87       	std	Z+9, r25	; 0x09
   19c00:	a2 87       	std	Z+10, r26	; 0x0a
   19c02:	b3 87       	std	Z+11, r27	; 0x0b
    LIF->freesectors = LIF->filesectors;
   19c04:	20 8f       	std	Z+24, r18	; 0x18
   19c06:	31 8f       	std	Z+25, r19	; 0x19
   19c08:	42 8f       	std	Z+26, r20	; 0x1a
   19c0a:	53 8f       	std	Z+27, r21	; 0x1b
    LIF->usedsectors = 0;
   19c0c:	14 8a       	std	Z+20, r1	; 0x14
   19c0e:	15 8a       	std	Z+21, r1	; 0x15
   19c10:	16 8a       	std	Z+22, r1	; 0x16
   19c12:	17 8a       	std	Z+23, r1	; 0x17
    LIF->files = 0;
   19c14:	15 8e       	std	Z+29, r1	; 0x1d
   19c16:	14 8e       	std	Z+28, r1	; 0x1c
    LIF->purged = 0;
   19c18:	17 8e       	std	Z+31, r1	; 0x1f
   19c1a:	16 8e       	std	Z+30, r1	; 0x1e
    LIF->dirindex = 0;
   19c1c:	11 a2       	std	Z+33, r1	; 0x21
   19c1e:	10 a2       	std	Z+32, r1	; 0x20
    LIF->EOFindex = 0;
   19c20:	13 a2       	std	Z+35, r1	; 0x23
   19c22:	12 a2       	std	Z+34, r1	; 0x22

    memset(buffer,0,LIF_SECTOR_SIZE);
   19c24:	61 2c       	mov	r6, r1
   19c26:	77 24       	eor	r7, r7
   19c28:	73 94       	inc	r7
   19c2a:	9e 01       	movw	r18, r28
   19c2c:	2c 5e       	subi	r18, 0xEC	; 236
   19c2e:	3f 4f       	sbci	r19, 0xFF	; 255
   19c30:	49 01       	movw	r8, r18
   19c32:	d9 01       	movw	r26, r18
   19c34:	f3 01       	movw	r30, r6
   19c36:	1d 92       	st	X+, r1
   19c38:	31 97       	sbiw	r30, 0x01	; 1
   19c3a:	e9 f7       	brne	.-6      	; 0x19c36 <lif_create_volume+0x1cc>

    lif_vol2str(LIF,buffer);
   19c3c:	b9 01       	movw	r22, r18
   19c3e:	c7 01       	movw	r24, r14
   19c40:	0e 94 88 c3 	call	0x18710	; 0x18710 <lif_vol2str>

// Write Volume header
    LIF->fp = lif_open(LIF->name,"wb+");
   19c44:	66 e1       	ldi	r22, 0x16	; 22
   19c46:	79 e0       	ldi	r23, 0x09	; 9
   19c48:	d7 01       	movw	r26, r14
   19c4a:	8d 91       	ld	r24, X+
   19c4c:	9c 91       	ld	r25, X
   19c4e:	0e 94 72 c1 	call	0x182e4	; 0x182e4 <lif_open>
   19c52:	f7 01       	movw	r30, r14
   19c54:	93 83       	std	Z+3, r25	; 0x03
   19c56:	82 83       	std	Z+2, r24	; 0x02
    if(LIF->fp == NULL)
   19c58:	89 2b       	or	r24, r25
   19c5a:	09 f4       	brne	.+2      	; 0x19c5e <lif_create_volume+0x1f4>
   19c5c:	db c1       	rjmp	.+950    	; 0x1a014 <lif_create_volume+0x5aa>
    }

    offset = 0;
    count = 0;

    size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19c5e:	00 e0       	ldi	r16, 0x00	; 0
   19c60:	11 e0       	ldi	r17, 0x01	; 1
   19c62:	20 e0       	ldi	r18, 0x00	; 0
   19c64:	30 e0       	ldi	r19, 0x00	; 0
   19c66:	a9 01       	movw	r20, r18
   19c68:	b4 01       	movw	r22, r8
   19c6a:	c7 01       	movw	r24, r14
   19c6c:	0e 94 49 c2 	call	0x18492	; 0x18492 <lif_write>
   19c70:	9c 01       	movw	r18, r24
   19c72:	99 0f       	add	r25, r25
   19c74:	44 0b       	sbc	r20, r20
   19c76:	55 0b       	sbc	r21, r21
   19c78:	ca 5e       	subi	r28, 0xEA	; 234
   19c7a:	de 4f       	sbci	r29, 0xFE	; 254
   19c7c:	28 83       	st	Y, r18
   19c7e:	39 83       	std	Y+1, r19	; 0x01
   19c80:	4a 83       	std	Y+2, r20	; 0x02
   19c82:	5b 83       	std	Y+3, r21	; 0x03
   19c84:	c6 51       	subi	r28, 0x16	; 22
   19c86:	d1 40       	sbci	r29, 0x01	; 1

    if(size < LIF_SECTOR_SIZE)
   19c88:	2f 3f       	cpi	r18, 0xFF	; 255
   19c8a:	31 05       	cpc	r19, r1
   19c8c:	41 05       	cpc	r20, r1
   19c8e:	51 05       	cpc	r21, r1
   19c90:	09 f0       	breq	.+2      	; 0x19c94 <lif_create_volume+0x22a>
   19c92:	0c f4       	brge	.+2      	; 0x19c96 <lif_create_volume+0x22c>
   19c94:	bf c1       	rjmp	.+894    	; 0x1a014 <lif_create_volume+0x5aa>
        return(NULL);
    }
    offset += size;
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);
   19c96:	d4 01       	movw	r26, r8
   19c98:	f3 01       	movw	r30, r6
   19c9a:	1d 92       	st	X+, r1
   19c9c:	31 97       	sbiw	r30, 0x01	; 1
   19c9e:	e9 f7       	brne	.-6      	; 0x19c9a <lif_create_volume+0x230>

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   19ca0:	21 e0       	ldi	r18, 0x01	; 1
   19ca2:	30 e0       	ldi	r19, 0x00	; 0
   19ca4:	40 e0       	ldi	r20, 0x00	; 0
   19ca6:	50 e0       	ldi	r21, 0x00	; 0
   19ca8:	c6 5e       	subi	r28, 0xE6	; 230
   19caa:	de 4f       	sbci	r29, 0xFE	; 254
   19cac:	28 83       	st	Y, r18
   19cae:	39 83       	std	Y+1, r19	; 0x01
   19cb0:	4a 83       	std	Y+2, r20	; 0x02
   19cb2:	5b 83       	std	Y+3, r21	; 0x03
   19cb4:	ca 51       	subi	r28, 0x1A	; 26
   19cb6:	d1 40       	sbci	r29, 0x01	; 1
   19cb8:	64 01       	movw	r12, r8
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        printf("\tWrote: %ld\r", count);
   19cba:	88 eb       	ldi	r24, 0xB8	; 184
   19cbc:	9d e3       	ldi	r25, 0x3D	; 61
   19cbe:	3c 01       	movw	r6, r24
   19cc0:	81 2c       	mov	r8, r1
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   19cc2:	c6 5e       	subi	r28, 0xE6	; 230
   19cc4:	de 4f       	sbci	r29, 0xFE	; 254
   19cc6:	88 81       	ld	r24, Y
   19cc8:	99 81       	ldd	r25, Y+1	; 0x01
   19cca:	aa 81       	ldd	r26, Y+2	; 0x02
   19ccc:	bb 81       	ldd	r27, Y+3	; 0x03
   19cce:	ca 51       	subi	r28, 0x1A	; 26
   19cd0:	d1 40       	sbci	r29, 0x01	; 1
   19cd2:	82 15       	cp	r24, r2
   19cd4:	93 05       	cpc	r25, r3
   19cd6:	a4 05       	cpc	r26, r4
   19cd8:	b5 05       	cpc	r27, r5
   19cda:	0c f0       	brlt	.+2      	; 0x19cde <lif_create_volume+0x274>
   19cdc:	55 c0       	rjmp	.+170    	; 0x19d88 <lif_create_volume+0x31e>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19cde:	00 e0       	ldi	r16, 0x00	; 0
   19ce0:	11 e0       	ldi	r17, 0x01	; 1
   19ce2:	ca 5e       	subi	r28, 0xEA	; 234
   19ce4:	de 4f       	sbci	r29, 0xFE	; 254
   19ce6:	28 81       	ld	r18, Y
   19ce8:	39 81       	ldd	r19, Y+1	; 0x01
   19cea:	4a 81       	ldd	r20, Y+2	; 0x02
   19cec:	5b 81       	ldd	r21, Y+3	; 0x03
   19cee:	c6 51       	subi	r28, 0x16	; 22
   19cf0:	d1 40       	sbci	r29, 0x01	; 1
   19cf2:	b6 01       	movw	r22, r12
   19cf4:	c7 01       	movw	r24, r14
   19cf6:	0e 94 49 c2 	call	0x18492	; 0x18492 <lif_write>
   19cfa:	09 2e       	mov	r0, r25
   19cfc:	00 0c       	add	r0, r0
   19cfe:	aa 0b       	sbc	r26, r26
   19d00:	bb 0b       	sbc	r27, r27
        if(size < LIF_SECTOR_SIZE)
   19d02:	8f 3f       	cpi	r24, 0xFF	; 255
   19d04:	91 05       	cpc	r25, r1
   19d06:	a1 05       	cpc	r26, r1
   19d08:	b1 05       	cpc	r27, r1
   19d0a:	09 f0       	breq	.+2      	; 0x19d0e <lif_create_volume+0x2a4>
   19d0c:	0c f4       	brge	.+2      	; 0x19d10 <lif_create_volume+0x2a6>
   19d0e:	82 c1       	rjmp	.+772    	; 0x1a014 <lif_create_volume+0x5aa>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   19d10:	ca 5e       	subi	r28, 0xEA	; 234
   19d12:	de 4f       	sbci	r29, 0xFE	; 254
   19d14:	28 81       	ld	r18, Y
   19d16:	39 81       	ldd	r19, Y+1	; 0x01
   19d18:	4a 81       	ldd	r20, Y+2	; 0x02
   19d1a:	5b 81       	ldd	r21, Y+3	; 0x03
   19d1c:	c6 51       	subi	r28, 0x16	; 22
   19d1e:	d1 40       	sbci	r29, 0x01	; 1
   19d20:	28 0f       	add	r18, r24
   19d22:	39 1f       	adc	r19, r25
   19d24:	4a 1f       	adc	r20, r26
   19d26:	5b 1f       	adc	r21, r27
   19d28:	ca 5e       	subi	r28, 0xEA	; 234
   19d2a:	de 4f       	sbci	r29, 0xFE	; 254
   19d2c:	28 83       	st	Y, r18
   19d2e:	39 83       	std	Y+1, r19	; 0x01
   19d30:	4a 83       	std	Y+2, r20	; 0x02
   19d32:	5b 83       	std	Y+3, r21	; 0x03
   19d34:	c6 51       	subi	r28, 0x16	; 22
   19d36:	d1 40       	sbci	r29, 0x01	; 1
        printf("\tWrote: %ld\r", count);
   19d38:	c6 5e       	subi	r28, 0xE6	; 230
   19d3a:	de 4f       	sbci	r29, 0xFE	; 254
   19d3c:	88 81       	ld	r24, Y
   19d3e:	99 81       	ldd	r25, Y+1	; 0x01
   19d40:	aa 81       	ldd	r26, Y+2	; 0x02
   19d42:	bb 81       	ldd	r27, Y+3	; 0x03
   19d44:	ca 51       	subi	r28, 0x1A	; 26
   19d46:	d1 40       	sbci	r29, 0x01	; 1
   19d48:	ed b7       	in	r30, 0x3d	; 61
   19d4a:	fe b7       	in	r31, 0x3e	; 62
   19d4c:	84 83       	std	Z+4, r24	; 0x04
   19d4e:	95 83       	std	Z+5, r25	; 0x05
   19d50:	a6 83       	std	Z+6, r26	; 0x06
   19d52:	b7 83       	std	Z+7, r27	; 0x07
   19d54:	61 82       	std	Z+1, r6	; 0x01
   19d56:	72 82       	std	Z+2, r7	; 0x02
   19d58:	83 82       	std	Z+3, r8	; 0x03
   19d5a:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   19d5e:	c6 5e       	subi	r28, 0xE6	; 230
   19d60:	de 4f       	sbci	r29, 0xFE	; 254
   19d62:	28 81       	ld	r18, Y
   19d64:	39 81       	ldd	r19, Y+1	; 0x01
   19d66:	4a 81       	ldd	r20, Y+2	; 0x02
   19d68:	5b 81       	ldd	r21, Y+3	; 0x03
   19d6a:	ca 51       	subi	r28, 0x1A	; 26
   19d6c:	d1 40       	sbci	r29, 0x01	; 1
   19d6e:	2f 5f       	subi	r18, 0xFF	; 255
   19d70:	3f 4f       	sbci	r19, 0xFF	; 255
   19d72:	4f 4f       	sbci	r20, 0xFF	; 255
   19d74:	5f 4f       	sbci	r21, 0xFF	; 255
   19d76:	c6 5e       	subi	r28, 0xE6	; 230
   19d78:	de 4f       	sbci	r29, 0xFE	; 254
   19d7a:	28 83       	st	Y, r18
   19d7c:	39 83       	std	Y+1, r19	; 0x01
   19d7e:	4a 83       	std	Y+2, r20	; 0x02
   19d80:	5b 83       	std	Y+3, r21	; 0x03
   19d82:	ca 51       	subi	r28, 0x1A	; 26
   19d84:	d1 40       	sbci	r29, 0x01	; 1
   19d86:	9d cf       	rjmp	.-198    	; 0x19cc2 <lif_create_volume+0x258>
        printf("\tWrote: %ld\r", count);
        ++count;
    }

// Write Directory sectors
    lif_dir_clear(LIF);
   19d88:	c7 01       	movw	r24, r14
   19d8a:	0e 94 4d c6 	call	0x18c9a	; 0x18c9a <lif_dir_clear>
    LIF->DIR.FileType = 0xffff;
   19d8e:	8f ef       	ldi	r24, 0xFF	; 255
   19d90:	9f ef       	ldi	r25, 0xFF	; 255
   19d92:	f7 01       	movw	r30, r14
   19d94:	e6 5a       	subi	r30, 0xA6	; 166
   19d96:	ff 4f       	sbci	r31, 0xFF	; 255
   19d98:	91 83       	std	Z+1, r25	; 0x01
   19d9a:	80 83       	st	Z, r24
   19d9c:	46 01       	movw	r8, r12
   19d9e:	6e 01       	movw	r12, r28
   19da0:	9c ee       	ldi	r25, 0xEC	; 236
   19da2:	c9 1a       	sub	r12, r25
   19da4:	9e ef       	ldi	r25, 0xFE	; 254
   19da6:	d9 0a       	sbc	r13, r25

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);
   19da8:	b4 01       	movw	r22, r8
   19daa:	c7 01       	movw	r24, r14
   19dac:	0e 94 94 c4 	call	0x18928	; 0x18928 <lif_dir2str>
   19db0:	a0 e2       	ldi	r26, 0x20	; 32
   19db2:	8a 0e       	add	r8, r26
   19db4:	91 1c       	adc	r9, r1

// Write Directory sectors
    lif_dir_clear(LIF);
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
   19db6:	c8 14       	cp	r12, r8
   19db8:	d9 04       	cpc	r13, r9
   19dba:	b1 f7       	brne	.-20     	; 0x19da8 <lif_create_volume+0x33e>
   19dbc:	a1 2c       	mov	r10, r1
   19dbe:	b1 2c       	mov	r11, r1
   19dc0:	65 01       	movw	r12, r10
   19dc2:	fe 01       	movw	r30, r28
   19dc4:	74 96       	adiw	r30, 0x14	; 20
   19dc6:	cc 5e       	subi	r28, 0xEC	; 236
   19dc8:	de 4f       	sbci	r29, 0xFE	; 254
   19dca:	f9 83       	std	Y+1, r31	; 0x01
   19dcc:	e8 83       	st	Y, r30
   19dce:	c4 51       	subi	r28, 0x14	; 20
   19dd0:	d1 40       	sbci	r29, 0x01	; 1
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
   19dd2:	84 e6       	ldi	r24, 0x64	; 100
   19dd4:	28 2e       	mov	r2, r24
   19dd6:	31 2c       	mov	r3, r1
   19dd8:	41 2c       	mov	r4, r1
   19dda:	51 2c       	mov	r5, r1
            printf("\tWrote: %ld\r", count);
   19ddc:	8b ea       	ldi	r24, 0xAB	; 171
   19dde:	9d e3       	ldi	r25, 0x3D	; 61
   19de0:	3c 01       	movw	r6, r24
   19de2:	81 2c       	mov	r8, r1
   19de4:	c6 5e       	subi	r28, 0xE6	; 230
   19de6:	de 4f       	sbci	r29, 0xFE	; 254
   19de8:	28 81       	ld	r18, Y
   19dea:	39 81       	ldd	r19, Y+1	; 0x01
   19dec:	4a 81       	ldd	r20, Y+2	; 0x02
   19dee:	5b 81       	ldd	r21, Y+3	; 0x03
   19df0:	ca 51       	subi	r28, 0x1A	; 26
   19df2:	d1 40       	sbci	r29, 0x01	; 1
   19df4:	2a 0d       	add	r18, r10
   19df6:	3b 1d       	adc	r19, r11
   19df8:	4c 1d       	adc	r20, r12
   19dfa:	5d 1d       	adc	r21, r13
   19dfc:	ce 5d       	subi	r28, 0xDE	; 222
   19dfe:	de 4f       	sbci	r29, 0xFE	; 254
   19e00:	28 83       	st	Y, r18
   19e02:	39 83       	std	Y+1, r19	; 0x01
   19e04:	4a 83       	std	Y+2, r20	; 0x02
   19e06:	5b 83       	std	Y+3, r21	; 0x03
   19e08:	c2 52       	subi	r28, 0x22	; 34
   19e0a:	d1 40       	sbci	r29, 0x01	; 1
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   19e0c:	ca 5d       	subi	r28, 0xDA	; 218
   19e0e:	de 4f       	sbci	r29, 0xFE	; 254
   19e10:	88 81       	ld	r24, Y
   19e12:	99 81       	ldd	r25, Y+1	; 0x01
   19e14:	aa 81       	ldd	r26, Y+2	; 0x02
   19e16:	bb 81       	ldd	r27, Y+3	; 0x03
   19e18:	c6 52       	subi	r28, 0x26	; 38
   19e1a:	d1 40       	sbci	r29, 0x01	; 1
   19e1c:	a8 16       	cp	r10, r24
   19e1e:	b9 06       	cpc	r11, r25
   19e20:	ca 06       	cpc	r12, r26
   19e22:	db 06       	cpc	r13, r27
   19e24:	0c f0       	brlt	.+2      	; 0x19e28 <lif_create_volume+0x3be>
   19e26:	58 c0       	rjmp	.+176    	; 0x19ed8 <lif_create_volume+0x46e>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19e28:	00 e0       	ldi	r16, 0x00	; 0
   19e2a:	11 e0       	ldi	r17, 0x01	; 1
   19e2c:	ca 5e       	subi	r28, 0xEA	; 234
   19e2e:	de 4f       	sbci	r29, 0xFE	; 254
   19e30:	28 81       	ld	r18, Y
   19e32:	39 81       	ldd	r19, Y+1	; 0x01
   19e34:	4a 81       	ldd	r20, Y+2	; 0x02
   19e36:	5b 81       	ldd	r21, Y+3	; 0x03
   19e38:	c6 51       	subi	r28, 0x16	; 22
   19e3a:	d1 40       	sbci	r29, 0x01	; 1
   19e3c:	be 01       	movw	r22, r28
   19e3e:	6c 5e       	subi	r22, 0xEC	; 236
   19e40:	7f 4f       	sbci	r23, 0xFF	; 255
   19e42:	c7 01       	movw	r24, r14
   19e44:	0e 94 49 c2 	call	0x18492	; 0x18492 <lif_write>
   19e48:	09 2e       	mov	r0, r25
   19e4a:	00 0c       	add	r0, r0
   19e4c:	aa 0b       	sbc	r26, r26
   19e4e:	bb 0b       	sbc	r27, r27
        if(size < LIF_SECTOR_SIZE)
   19e50:	8f 3f       	cpi	r24, 0xFF	; 255
   19e52:	91 05       	cpc	r25, r1
   19e54:	a1 05       	cpc	r26, r1
   19e56:	b1 05       	cpc	r27, r1
   19e58:	09 f0       	breq	.+2      	; 0x19e5c <lif_create_volume+0x3f2>
   19e5a:	0c f4       	brge	.+2      	; 0x19e5e <lif_create_volume+0x3f4>
   19e5c:	db c0       	rjmp	.+438    	; 0x1a014 <lif_create_volume+0x5aa>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   19e5e:	ca 5e       	subi	r28, 0xEA	; 234
   19e60:	de 4f       	sbci	r29, 0xFE	; 254
   19e62:	28 81       	ld	r18, Y
   19e64:	39 81       	ldd	r19, Y+1	; 0x01
   19e66:	4a 81       	ldd	r20, Y+2	; 0x02
   19e68:	5b 81       	ldd	r21, Y+3	; 0x03
   19e6a:	c6 51       	subi	r28, 0x16	; 22
   19e6c:	d1 40       	sbci	r29, 0x01	; 1
   19e6e:	28 0f       	add	r18, r24
   19e70:	39 1f       	adc	r19, r25
   19e72:	4a 1f       	adc	r20, r26
   19e74:	5b 1f       	adc	r21, r27
   19e76:	ca 5e       	subi	r28, 0xEA	; 234
   19e78:	de 4f       	sbci	r29, 0xFE	; 254
   19e7a:	28 83       	st	Y, r18
   19e7c:	39 83       	std	Y+1, r19	; 0x01
   19e7e:	4a 83       	std	Y+2, r20	; 0x02
   19e80:	5b 83       	std	Y+3, r21	; 0x03
   19e82:	c6 51       	subi	r28, 0x16	; 22
   19e84:	d1 40       	sbci	r29, 0x01	; 1
        if((count % 100) == 0)
   19e86:	ce 5d       	subi	r28, 0xDE	; 222
   19e88:	de 4f       	sbci	r29, 0xFE	; 254
   19e8a:	68 81       	ld	r22, Y
   19e8c:	79 81       	ldd	r23, Y+1	; 0x01
   19e8e:	8a 81       	ldd	r24, Y+2	; 0x02
   19e90:	9b 81       	ldd	r25, Y+3	; 0x03
   19e92:	c2 52       	subi	r28, 0x22	; 34
   19e94:	d1 40       	sbci	r29, 0x01	; 1
   19e96:	a2 01       	movw	r20, r4
   19e98:	91 01       	movw	r18, r2
   19e9a:	0e 94 c2 e6 	call	0x1cd84	; 0x1cd84 <__divmodsi4>
   19e9e:	67 2b       	or	r22, r23
   19ea0:	68 2b       	or	r22, r24
   19ea2:	69 2b       	or	r22, r25
   19ea4:	99 f4       	brne	.+38     	; 0x19ecc <lif_create_volume+0x462>
            printf("\tWrote: %ld\r", count);
   19ea6:	ce 5d       	subi	r28, 0xDE	; 222
   19ea8:	de 4f       	sbci	r29, 0xFE	; 254
   19eaa:	88 81       	ld	r24, Y
   19eac:	99 81       	ldd	r25, Y+1	; 0x01
   19eae:	aa 81       	ldd	r26, Y+2	; 0x02
   19eb0:	bb 81       	ldd	r27, Y+3	; 0x03
   19eb2:	c2 52       	subi	r28, 0x22	; 34
   19eb4:	d1 40       	sbci	r29, 0x01	; 1
   19eb6:	ed b7       	in	r30, 0x3d	; 61
   19eb8:	fe b7       	in	r31, 0x3e	; 62
   19eba:	84 83       	std	Z+4, r24	; 0x04
   19ebc:	95 83       	std	Z+5, r25	; 0x05
   19ebe:	a6 83       	std	Z+6, r26	; 0x06
   19ec0:	b7 83       	std	Z+7, r27	; 0x07
   19ec2:	61 82       	std	Z+1, r6	; 0x01
   19ec4:	72 82       	std	Z+2, r7	; 0x02
   19ec6:	83 82       	std	Z+3, r8	; 0x03
   19ec8:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   19ecc:	ff ef       	ldi	r31, 0xFF	; 255
   19ece:	af 1a       	sub	r10, r31
   19ed0:	bf 0a       	sbc	r11, r31
   19ed2:	cf 0a       	sbc	r12, r31
   19ed4:	df 0a       	sbc	r13, r31
   19ed6:	86 cf       	rjmp	.-244    	; 0x19de4 <lif_create_volume+0x37a>
            printf("\tWrote: %ld\r", count);
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
   19ed8:	80 e0       	ldi	r24, 0x00	; 0
   19eda:	91 e0       	ldi	r25, 0x01	; 1
   19edc:	cc 5e       	subi	r28, 0xEC	; 236
   19ede:	de 4f       	sbci	r29, 0xFE	; 254
   19ee0:	a8 81       	ld	r26, Y
   19ee2:	b9 81       	ldd	r27, Y+1	; 0x01
   19ee4:	c4 51       	subi	r28, 0x14	; 20
   19ee6:	d1 40       	sbci	r29, 0x01	; 1
   19ee8:	fc 01       	movw	r30, r24
   19eea:	1d 92       	st	X+, r1
   19eec:	31 97       	sbiw	r30, 0x01	; 1
   19eee:	e9 f7       	brne	.-6      	; 0x19eea <lif_create_volume+0x480>
    for(i=0;i<filesectors;++i)
   19ef0:	81 2c       	mov	r8, r1
   19ef2:	91 2c       	mov	r9, r1
   19ef4:	54 01       	movw	r10, r8
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
            printf("\tWrote: %ld\r", count);
   19ef6:	8e e9       	ldi	r24, 0x9E	; 158
   19ef8:	9d e3       	ldi	r25, 0x3D	; 61
   19efa:	9c 01       	movw	r18, r24
   19efc:	40 e0       	ldi	r20, 0x00	; 0
   19efe:	c6 5e       	subi	r28, 0xE6	; 230
   19f00:	de 4f       	sbci	r29, 0xFE	; 254
   19f02:	28 83       	st	Y, r18
   19f04:	39 83       	std	Y+1, r19	; 0x01
   19f06:	4a 83       	std	Y+2, r20	; 0x02
   19f08:	ca 51       	subi	r28, 0x1A	; 26
   19f0a:	d1 40       	sbci	r29, 0x01	; 1
   19f0c:	ce 5d       	subi	r28, 0xDE	; 222
   19f0e:	de 4f       	sbci	r29, 0xFE	; 254
   19f10:	48 80       	ld	r4, Y
   19f12:	59 80       	ldd	r5, Y+1	; 0x01
   19f14:	6a 80       	ldd	r6, Y+2	; 0x02
   19f16:	7b 80       	ldd	r7, Y+3	; 0x03
   19f18:	c2 52       	subi	r28, 0x22	; 34
   19f1a:	d1 40       	sbci	r29, 0x01	; 1
   19f1c:	48 0c       	add	r4, r8
   19f1e:	59 1c       	adc	r5, r9
   19f20:	6a 1c       	adc	r6, r10
   19f22:	7b 1c       	adc	r7, r11
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   19f24:	c2 5e       	subi	r28, 0xE2	; 226
   19f26:	de 4f       	sbci	r29, 0xFE	; 254
   19f28:	28 81       	ld	r18, Y
   19f2a:	39 81       	ldd	r19, Y+1	; 0x01
   19f2c:	4a 81       	ldd	r20, Y+2	; 0x02
   19f2e:	5b 81       	ldd	r21, Y+3	; 0x03
   19f30:	ce 51       	subi	r28, 0x1E	; 30
   19f32:	d1 40       	sbci	r29, 0x01	; 1
   19f34:	82 16       	cp	r8, r18
   19f36:	93 06       	cpc	r9, r19
   19f38:	a4 06       	cpc	r10, r20
   19f3a:	b5 06       	cpc	r11, r21
   19f3c:	0c f0       	brlt	.+2      	; 0x19f40 <lif_create_volume+0x4d6>
   19f3e:	53 c0       	rjmp	.+166    	; 0x19fe6 <lif_create_volume+0x57c>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19f40:	00 e0       	ldi	r16, 0x00	; 0
   19f42:	11 e0       	ldi	r17, 0x01	; 1
   19f44:	ca 5e       	subi	r28, 0xEA	; 234
   19f46:	de 4f       	sbci	r29, 0xFE	; 254
   19f48:	28 81       	ld	r18, Y
   19f4a:	39 81       	ldd	r19, Y+1	; 0x01
   19f4c:	4a 81       	ldd	r20, Y+2	; 0x02
   19f4e:	5b 81       	ldd	r21, Y+3	; 0x03
   19f50:	c6 51       	subi	r28, 0x16	; 22
   19f52:	d1 40       	sbci	r29, 0x01	; 1
   19f54:	be 01       	movw	r22, r28
   19f56:	6c 5e       	subi	r22, 0xEC	; 236
   19f58:	7f 4f       	sbci	r23, 0xFF	; 255
   19f5a:	c7 01       	movw	r24, r14
   19f5c:	0e 94 49 c2 	call	0x18492	; 0x18492 <lif_write>
   19f60:	09 2e       	mov	r0, r25
   19f62:	00 0c       	add	r0, r0
   19f64:	aa 0b       	sbc	r26, r26
   19f66:	bb 0b       	sbc	r27, r27
        if(size < LIF_SECTOR_SIZE)
   19f68:	8f 3f       	cpi	r24, 0xFF	; 255
   19f6a:	91 05       	cpc	r25, r1
   19f6c:	a1 05       	cpc	r26, r1
   19f6e:	b1 05       	cpc	r27, r1
   19f70:	09 f0       	breq	.+2      	; 0x19f74 <lif_create_volume+0x50a>
   19f72:	0c f4       	brge	.+2      	; 0x19f76 <lif_create_volume+0x50c>
   19f74:	4f c0       	rjmp	.+158    	; 0x1a014 <lif_create_volume+0x5aa>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   19f76:	ca 5e       	subi	r28, 0xEA	; 234
   19f78:	de 4f       	sbci	r29, 0xFE	; 254
   19f7a:	28 81       	ld	r18, Y
   19f7c:	39 81       	ldd	r19, Y+1	; 0x01
   19f7e:	4a 81       	ldd	r20, Y+2	; 0x02
   19f80:	5b 81       	ldd	r21, Y+3	; 0x03
   19f82:	c6 51       	subi	r28, 0x16	; 22
   19f84:	d1 40       	sbci	r29, 0x01	; 1
   19f86:	28 0f       	add	r18, r24
   19f88:	39 1f       	adc	r19, r25
   19f8a:	4a 1f       	adc	r20, r26
   19f8c:	5b 1f       	adc	r21, r27
   19f8e:	ca 5e       	subi	r28, 0xEA	; 234
   19f90:	de 4f       	sbci	r29, 0xFE	; 254
   19f92:	28 83       	st	Y, r18
   19f94:	39 83       	std	Y+1, r19	; 0x01
   19f96:	4a 83       	std	Y+2, r20	; 0x02
   19f98:	5b 83       	std	Y+3, r21	; 0x03
   19f9a:	c6 51       	subi	r28, 0x16	; 22
   19f9c:	d1 40       	sbci	r29, 0x01	; 1
        if((count % 100) == 0)
   19f9e:	c3 01       	movw	r24, r6
   19fa0:	b2 01       	movw	r22, r4
   19fa2:	24 e6       	ldi	r18, 0x64	; 100
   19fa4:	30 e0       	ldi	r19, 0x00	; 0
   19fa6:	40 e0       	ldi	r20, 0x00	; 0
   19fa8:	50 e0       	ldi	r21, 0x00	; 0
   19faa:	0e 94 c2 e6 	call	0x1cd84	; 0x1cd84 <__divmodsi4>
   19fae:	67 2b       	or	r22, r23
   19fb0:	68 2b       	or	r22, r24
   19fb2:	69 2b       	or	r22, r25
   19fb4:	91 f4       	brne	.+36     	; 0x19fda <lif_create_volume+0x570>
            printf("\tWrote: %ld\r", count);
   19fb6:	ed b7       	in	r30, 0x3d	; 61
   19fb8:	fe b7       	in	r31, 0x3e	; 62
   19fba:	44 82       	std	Z+4, r4	; 0x04
   19fbc:	55 82       	std	Z+5, r5	; 0x05
   19fbe:	66 82       	std	Z+6, r6	; 0x06
   19fc0:	77 82       	std	Z+7, r7	; 0x07
   19fc2:	c6 5e       	subi	r28, 0xE6	; 230
   19fc4:	de 4f       	sbci	r29, 0xFE	; 254
   19fc6:	28 81       	ld	r18, Y
   19fc8:	39 81       	ldd	r19, Y+1	; 0x01
   19fca:	4a 81       	ldd	r20, Y+2	; 0x02
   19fcc:	ca 51       	subi	r28, 0x1A	; 26
   19fce:	d1 40       	sbci	r29, 0x01	; 1
   19fd0:	21 83       	std	Z+1, r18	; 0x01
   19fd2:	32 83       	std	Z+2, r19	; 0x02
   19fd4:	43 83       	std	Z+3, r20	; 0x03
   19fd6:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   19fda:	ff ef       	ldi	r31, 0xFF	; 255
   19fdc:	8f 1a       	sub	r8, r31
   19fde:	9f 0a       	sbc	r9, r31
   19fe0:	af 0a       	sbc	r10, r31
   19fe2:	bf 0a       	sbc	r11, r31
   19fe4:	93 cf       	rjmp	.-218    	; 0x19f0c <lif_create_volume+0x4a2>
        offset += size;
        if((count % 100) == 0)
            printf("\tWrote: %ld\r", count);
        ++count;
    }
    printf("\tWrote: %ld\n", count);
   19fe6:	ed b7       	in	r30, 0x3d	; 61
   19fe8:	fe b7       	in	r31, 0x3e	; 62
   19fea:	44 82       	std	Z+4, r4	; 0x04
   19fec:	55 82       	std	Z+5, r5	; 0x05
   19fee:	66 82       	std	Z+6, r6	; 0x06
   19ff0:	77 82       	std	Z+7, r7	; 0x07
   19ff2:	81 e9       	ldi	r24, 0x91	; 145
   19ff4:	9d e3       	ldi	r25, 0x3D	; 61
   19ff6:	a0 e0       	ldi	r26, 0x00	; 0
   19ff8:	81 83       	std	Z+1, r24	; 0x01
   19ffa:	92 83       	std	Z+2, r25	; 0x02
   19ffc:	a3 83       	std	Z+3, r26	; 0x03
   19ffe:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
/// @return void
MEMSPACE
void lif_rewinddir(lif_t *LIF)
{
// Directory index
    LIF->dirindex = -1;
   1a002:	8f ef       	ldi	r24, 0xFF	; 255
   1a004:	9f ef       	ldi	r25, 0xFF	; 255
   1a006:	f7 01       	movw	r30, r14
   1a008:	91 a3       	std	Z+33, r25	; 0x21
    printf("\tWrote: %ld\n", count);

    lif_rewinddir(LIF);

// As a sanity check verify basic values
    if( !lif_check_volume(LIF) )
   1a00a:	80 a3       	std	Z+32, r24	; 0x20
   1a00c:	c7 01       	movw	r24, r14
   1a00e:	1a d8       	rcall	.-4044   	; 0x19044 <lif_check_volume>
   1a010:	89 2b       	or	r24, r25
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a012:	19 f4       	brne	.+6      	; 0x1a01a <lif_create_volume+0x5b0>
   1a014:	c7 01       	movw	r24, r14
   1a016:	b6 da       	rcall	.-2708   	; 0x19584 <lif_close_volume>
   1a018:	08 c0       	rjmp	.+16     	; 0x1a02a <lif_create_volume+0x5c0>
        lif_closedir(LIF);
        return(NULL);
    }

// Scan directory and verify values
    if( !lif_updatefree(LIF))
   1a01a:	c7 01       	movw	r24, r14
   1a01c:	1c dc       	rcall	.-1992   	; 0x19856 <lif_updatefree>
   1a01e:	6c 01       	movw	r12, r24
   1a020:	89 2b       	or	r24, r25
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a022:	31 f4       	brne	.+12     	; 0x1a030 <lif_create_volume+0x5c6>
   1a024:	c7 01       	movw	r24, r14
   1a026:	ae da       	rcall	.-2724   	; 0x19584 <lif_close_volume>

// Scan directory and verify values
    if( !lif_updatefree(LIF))
    {
        lif_closedir(LIF);
        return(NULL);
   1a028:	04 c0       	rjmp	.+8      	; 0x1a032 <lif_create_volume+0x5c8>

    time_t t = time(NULL);

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
    if(LIF == NULL)
        return(NULL);
   1a02a:	c1 2c       	mov	r12, r1
   1a02c:	d1 2c       	mov	r13, r1
   1a02e:	01 c0       	rjmp	.+2      	; 0x1a032 <lif_create_volume+0x5c8>
   1a030:	67 01       	movw	r12, r14
        lif_closedir(LIF);
        return(NULL);
    }

    return(LIF);
}
   1a032:	c6 01       	movw	r24, r12
   1a034:	c7 5d       	subi	r28, 0xD7	; 215
   1a036:	de 4f       	sbci	r29, 0xFE	; 254
   1a038:	e2 e1       	ldi	r30, 0x12	; 18
   1a03a:	0c 94 29 e7 	jmp	0x1ce52	; 0x1ce52 <__epilogue_restores__>

0001a03e <lif_newdir>:
/// @param[in] *LIF: LIF pointer
/// @param[in] sectors: try to find specified free space
/// @return index or free record or -1 on error
MEMSPACE
int lif_newdir(lif_t *LIF, long sectors)
{
   1a03e:	ad e1       	ldi	r26, 0x1D	; 29
   1a040:	b0 e0       	ldi	r27, 0x00	; 0
   1a042:	e5 e2       	ldi	r30, 0x25	; 37
   1a044:	f0 ed       	ldi	r31, 0xD0	; 208
   1a046:	0c 94 0d e7 	jmp	0x1ce1a	; 0x1ce1a <__prologue_saves__>
   1a04a:	9d 8f       	std	Y+29, r25	; 0x1d
   1a04c:	8c 8f       	std	Y+28, r24	; 0x1c
   1a04e:	4a 01       	movw	r8, r20
   1a050:	5b 01       	movw	r10, r22

// Directory index
    index = 0;

// Start of free space
    start = LIF->filestart;
   1a052:	fc 01       	movw	r30, r24
   1a054:	c4 84       	ldd	r12, Z+12	; 0x0c
   1a056:	d5 84       	ldd	r13, Z+13	; 0x0d
   1a058:	e6 84       	ldd	r14, Z+14	; 0x0e
   1a05a:	f7 84       	ldd	r15, Z+15	; 0x0f

// Update all file information
    if(lif_updatefree(LIF) == NULL)
   1a05c:	fc db       	rcall	.-2056   	; 0x19856 <lif_updatefree>
   1a05e:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a060:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a062:	40 8d       	ldd	r20, Z+24	; 0x18
   1a064:	51 8d       	ldd	r21, Z+25	; 0x19
   1a066:	62 8d       	ldd	r22, Z+26	; 0x1a
   1a068:	73 8d       	ldd	r23, Z+27	; 0x1b
   1a06a:	89 2b       	or	r24, r25
   1a06c:	99 f4       	brne	.+38     	; 0x1a094 <lif_newdir+0x56>
    {
        printf("lif_newdir: not enough free space:[%ld] for size:[%ld]\n", (long)LIF->freesectors, (long) sectors);
   1a06e:	ed b7       	in	r30, 0x3d	; 61
   1a070:	fe b7       	in	r31, 0x3e	; 62
   1a072:	80 86       	std	Z+8, r8	; 0x08
   1a074:	91 86       	std	Z+9, r9	; 0x09
   1a076:	a2 86       	std	Z+10, r10	; 0x0a
   1a078:	b3 86       	std	Z+11, r11	; 0x0b
   1a07a:	44 83       	std	Z+4, r20	; 0x04
   1a07c:	55 83       	std	Z+5, r21	; 0x05
   1a07e:	66 83       	std	Z+6, r22	; 0x06
   1a080:	77 83       	std	Z+7, r23	; 0x07
   1a082:	82 eb       	ldi	r24, 0xB2	; 178
   1a084:	9c e3       	ldi	r25, 0x3C	; 60
   1a086:	a0 e0       	ldi	r26, 0x00	; 0
   1a088:	81 83       	std	Z+1, r24	; 0x01
   1a08a:	92 83       	std	Z+2, r25	; 0x02
   1a08c:	a3 83       	std	Z+3, r26	; 0x03
   1a08e:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   1a092:	2f c1       	rjmp	.+606    	; 0x1a2f2 <lif_newdir+0x2b4>
        return(-1);
    }

// Not enough room ?
    if(sectors > (long)LIF->freesectors)
   1a094:	48 15       	cp	r20, r8
   1a096:	59 05       	cpc	r21, r9
   1a098:	6a 05       	cpc	r22, r10
   1a09a:	7b 05       	cpc	r23, r11
   1a09c:	c4 f0       	brlt	.+48     	; 0x1a0ce <lif_newdir+0x90>
   1a09e:	44 24       	eor	r4, r4
   1a0a0:	43 94       	inc	r4
   1a0a2:	51 2c       	mov	r5, r1
   1a0a4:	61 2c       	mov	r6, r1
   1a0a6:	71 2c       	mov	r7, r1
#endif
            break;
        }

// We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   1a0a8:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a0aa:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1a0ac:	86 5a       	subi	r24, 0xA6	; 166
   1a0ae:	9f 4f       	sbci	r25, 0xFF	; 255
   1a0b0:	9d 8b       	std	Y+21, r25	; 0x15
   1a0b2:	8c 8b       	std	Y+20, r24	; 0x14
   1a0b4:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a0b6:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a0b8:	e4 5a       	subi	r30, 0xA4	; 164
   1a0ba:	ff 4f       	sbci	r31, 0xFF	; 255
   1a0bc:	fb 8b       	std	Y+19, r31	; 0x13
   1a0be:	ea 8b       	std	Y+18, r30	; 0x12
                freestate = 0;                    // Try again
        }

// Computed start of next record
// Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   1a0c0:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a0c2:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1a0c4:	80 5a       	subi	r24, 0xA0	; 160
   1a0c6:	9f 4f       	sbci	r25, 0xFF	; 255
   1a0c8:	9f 8b       	std	Y+23, r25	; 0x17
   1a0ca:	8e 8b       	std	Y+22, r24	; 0x16
   1a0cc:	21 c0       	rjmp	.+66     	; 0x1a110 <lif_newdir+0xd2>
    }

// Not enough room ?
    if(sectors > (long)LIF->freesectors)
    {
        printf("lif_newdir: not enough free space:[%ld]\n", (long)LIF->freesectors);
   1a0ce:	ed b7       	in	r30, 0x3d	; 61
   1a0d0:	fe b7       	in	r31, 0x3e	; 62
   1a0d2:	44 83       	std	Z+4, r20	; 0x04
   1a0d4:	55 83       	std	Z+5, r21	; 0x05
   1a0d6:	66 83       	std	Z+6, r22	; 0x06
   1a0d8:	77 83       	std	Z+7, r23	; 0x07
   1a0da:	89 e8       	ldi	r24, 0x89	; 137
   1a0dc:	9c e3       	ldi	r25, 0x3C	; 60
   1a0de:	a0 e0       	ldi	r26, 0x00	; 0
   1a0e0:	81 83       	std	Z+1, r24	; 0x01
   1a0e2:	92 83       	std	Z+2, r25	; 0x02
   1a0e4:	a3 83       	std	Z+3, r26	; 0x03
   1a0e6:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   1a0ea:	03 c1       	rjmp	.+518    	; 0x1a2f2 <lif_newdir+0x2b4>
#endif
            break;
        }

// We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   1a0ec:	ec 89       	ldd	r30, Y+20	; 0x14
   1a0ee:	fd 89       	ldd	r31, Y+21	; 0x15
   1a0f0:	80 81       	ld	r24, Z
   1a0f2:	91 81       	ldd	r25, Z+1	; 0x01
   1a0f4:	8f 3f       	cpi	r24, 0xFF	; 255
   1a0f6:	ff ef       	ldi	r31, 0xFF	; 255
   1a0f8:	9f 07       	cpc	r25, r31
   1a0fa:	a1 f0       	breq	.+40     	; 0x1a124 <lif_newdir+0xe6>
            }
            return(index);
        }

// PURGED records
        if(LIF->DIR.FileType == 0)
   1a0fc:	89 2b       	or	r24, r25
   1a0fe:	09 f0       	breq	.+2      	; 0x1a102 <lif_newdir+0xc4>
   1a100:	ce c0       	rjmp	.+412    	; 0x1a29e <lif_newdir+0x260>
        {
            if(freestate == 0)
   1a102:	61 14       	cp	r6, r1
   1a104:	71 04       	cpc	r7, r1
   1a106:	09 f4       	brne	.+2      	; 0x1a10a <lif_newdir+0xcc>
   1a108:	c1 c0       	rjmp	.+386    	; 0x1a28c <lif_newdir+0x24e>
   1a10a:	ff ef       	ldi	r31, 0xFF	; 255
   1a10c:	4f 1a       	sub	r4, r31
   1a10e:	5f 0a       	sbc	r5, r31
   1a110:	82 01       	movw	r16, r4
   1a112:	01 50       	subi	r16, 0x01	; 1
   1a114:	11 09       	sbc	r17, r1

// Update free space and EOF pointers
    while(1)
    {
// Write new EOF after current one
        if( !lif_readdirindex(LIF,index) )
   1a116:	b8 01       	movw	r22, r16
   1a118:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a11a:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1a11c:	c1 da       	rcall	.-2686   	; 0x196a0 <lif_readdirindex>
   1a11e:	89 2b       	or	r24, r25
   1a120:	29 f7       	brne	.-54     	; 0x1a0ec <lif_newdir+0xae>
   1a122:	e7 c0       	rjmp	.+462    	; 0x1a2f2 <lif_newdir+0x2b4>
        if(LIF->DIR.FileType == 0xffff)
        {

// Was enough free space found in purged area ?
// Do NOT need to update EOF!
            if(freestate == 2)
   1a124:	22 e0       	ldi	r18, 0x02	; 2
   1a126:	62 16       	cp	r6, r18
   1a128:	71 04       	cpc	r7, r1
   1a12a:	09 f0       	breq	.+2      	; 0x1a12e <lif_newdir+0xf0>
   1a12c:	46 c0       	rjmp	.+140    	; 0x1a1ba <lif_newdir+0x17c>
            {
// Update free pace for new file
                lif_dir_clear(LIF);
   1a12e:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a130:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1a132:	0e 94 4d c6 	call	0x18c9a	; 0x18c9a <lif_dir_clear>
                LIF->DIR.FileStartSector = freestart;
   1a136:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a138:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a13a:	e4 5a       	subi	r30, 0xA4	; 164
   1a13c:	ff 4f       	sbci	r31, 0xFF	; 255
   1a13e:	88 8d       	ldd	r24, Y+24	; 0x18
   1a140:	80 83       	st	Z, r24
   1a142:	99 8d       	ldd	r25, Y+25	; 0x19
   1a144:	91 83       	std	Z+1, r25	; 0x01
   1a146:	2a 8d       	ldd	r18, Y+26	; 0x1a
   1a148:	22 83       	std	Z+2, r18	; 0x02
   1a14a:	8b 8d       	ldd	r24, Y+27	; 0x1b
   1a14c:	83 83       	std	Z+3, r24	; 0x03
                LIF->DIR.FileSectors = sectors;
   1a14e:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a150:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a152:	e0 5a       	subi	r30, 0xA0	; 160
   1a154:	ff 4f       	sbci	r31, 0xFF	; 255
   1a156:	80 82       	st	Z, r8
   1a158:	91 82       	std	Z+1, r9	; 0x01
   1a15a:	a2 82       	std	Z+2, r10	; 0x02
   1a15c:	b3 82       	std	Z+3, r11	; 0x03
                LIF->usedsectors += sectors;
   1a15e:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a160:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a162:	84 89       	ldd	r24, Z+20	; 0x14
   1a164:	95 89       	ldd	r25, Z+21	; 0x15
   1a166:	a6 89       	ldd	r26, Z+22	; 0x16
   1a168:	b7 89       	ldd	r27, Z+23	; 0x17
   1a16a:	88 0d       	add	r24, r8
   1a16c:	99 1d       	adc	r25, r9
   1a16e:	aa 1d       	adc	r26, r10
   1a170:	bb 1d       	adc	r27, r11
   1a172:	84 8b       	std	Z+20, r24	; 0x14
   1a174:	95 8b       	std	Z+21, r25	; 0x15
   1a176:	a6 8b       	std	Z+22, r26	; 0x16
   1a178:	b7 8b       	std	Z+23, r27	; 0x17
                LIF->freesectors -= sectors;
   1a17a:	80 8d       	ldd	r24, Z+24	; 0x18
   1a17c:	91 8d       	ldd	r25, Z+25	; 0x19
   1a17e:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a180:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a182:	88 19       	sub	r24, r8
   1a184:	99 09       	sbc	r25, r9
   1a186:	aa 09       	sbc	r26, r10
   1a188:	bb 09       	sbc	r27, r11
   1a18a:	80 8f       	std	Z+24, r24	; 0x18
   1a18c:	91 8f       	std	Z+25, r25	; 0x19
   1a18e:	a2 8f       	std	Z+26, r26	; 0x1a
   1a190:	b3 8f       	std	Z+27, r27	; 0x1b
                LIF->files++;
   1a192:	84 8d       	ldd	r24, Z+28	; 0x1c
   1a194:	95 8d       	ldd	r25, Z+29	; 0x1d
   1a196:	01 96       	adiw	r24, 0x01	; 1
   1a198:	95 8f       	std	Z+29, r25	; 0x1d
   1a19a:	84 8f       	std	Z+28, r24	; 0x1c
                LIF->purged--;
   1a19c:	86 8d       	ldd	r24, Z+30	; 0x1e
   1a19e:	97 8d       	ldd	r25, Z+31	; 0x1f
   1a1a0:	01 97       	sbiw	r24, 0x01	; 1
   1a1a2:	97 8f       	std	Z+31, r25	; 0x1f
   1a1a4:	86 8f       	std	Z+30, r24	; 0x1e
                LIF->dirindex = freeindex;
   1a1a6:	20 a2       	std	Z+32, r2	; 0x20
   1a1a8:	31 a2       	std	Z+33, r3	; 0x21
// Write new record (FileType is still EOF until data is updated by user)
                if( !lif_writedirindex(LIF,freeindex))
   1a1aa:	b1 01       	movw	r22, r2
   1a1ac:	cf 01       	movw	r24, r30
   1a1ae:	df da       	rcall	.-2626   	; 0x1976e <lif_writedirindex>
   1a1b0:	89 2b       	or	r24, r25
   1a1b2:	09 f4       	brne	.+2      	; 0x1a1b6 <lif_newdir+0x178>
   1a1b4:	9e c0       	rjmp	.+316    	; 0x1a2f2 <lif_newdir+0x2b4>
   1a1b6:	c1 01       	movw	r24, r2
   1a1b8:	9e c0       	rjmp	.+316    	; 0x1a2f6 <lif_newdir+0x2b8>
                    break;
                }
                return(freeindex);
            }

            if(debuglevel & LIF_DEBUG)
   1a1ba:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a1be:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a1c2:	92 ff       	sbrs	r25, 2
   1a1c4:	1e c0       	rjmp	.+60     	; 0x1a202 <lif_newdir+0x1c4>
                printf("lif_newdir: index:[%d] adding at:[%ld]to purged space:[%ld] sectors, free:[%ld]\n",
   1a1c6:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a1c8:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a1ca:	80 8d       	ldd	r24, Z+24	; 0x18
   1a1cc:	91 8d       	ldd	r25, Z+25	; 0x19
   1a1ce:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a1d0:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a1d2:	ed b7       	in	r30, 0x3d	; 61
   1a1d4:	fe b7       	in	r31, 0x3e	; 62
   1a1d6:	86 87       	std	Z+14, r24	; 0x0e
   1a1d8:	97 87       	std	Z+15, r25	; 0x0f
   1a1da:	a0 8b       	std	Z+16, r26	; 0x10
   1a1dc:	b1 8b       	std	Z+17, r27	; 0x11
   1a1de:	82 86       	std	Z+10, r8	; 0x0a
   1a1e0:	93 86       	std	Z+11, r9	; 0x0b
   1a1e2:	a4 86       	std	Z+12, r10	; 0x0c
   1a1e4:	b5 86       	std	Z+13, r11	; 0x0d
   1a1e6:	c6 82       	std	Z+6, r12	; 0x06
   1a1e8:	d7 82       	std	Z+7, r13	; 0x07
   1a1ea:	e0 86       	std	Z+8, r14	; 0x08
   1a1ec:	f1 86       	std	Z+9, r15	; 0x09
   1a1ee:	15 83       	std	Z+5, r17	; 0x05
   1a1f0:	04 83       	std	Z+4, r16	; 0x04
   1a1f2:	88 e3       	ldi	r24, 0x38	; 56
   1a1f4:	9c e3       	ldi	r25, 0x3C	; 60
   1a1f6:	a0 e0       	ldi	r26, 0x00	; 0
   1a1f8:	81 83       	std	Z+1, r24	; 0x01
   1a1fa:	92 83       	std	Z+2, r25	; 0x02
   1a1fc:	a3 83       	std	Z+3, r26	; 0x03
   1a1fe:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
                    (int) index,(long)start,(long) sectors, (long)LIF->freesectors);

// Write new EOF after current one
            if( !lif_writedirEOF(LIF,index+1) )
   1a202:	b8 01       	movw	r22, r16
   1a204:	6f 5f       	subi	r22, 0xFF	; 255
   1a206:	7f 4f       	sbci	r23, 0xFF	; 255
   1a208:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a20a:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1a20c:	0c db       	rcall	.-2536   	; 0x19826 <lif_writedirEOF>
   1a20e:	89 2b       	or	r24, r25
   1a210:	09 f4       	brne	.+2      	; 0x1a214 <lif_newdir+0x1d6>
   1a212:	6f c0       	rjmp	.+222    	; 0x1a2f2 <lif_newdir+0x2b4>
            {
                break;
            }

            lif_dir_clear(LIF);
   1a214:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a216:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1a218:	0e 94 4d c6 	call	0x18c9a	; 0x18c9a <lif_dir_clear>
            LIF->DIR.FileStartSector = start;
   1a21c:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a21e:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a220:	e4 5a       	subi	r30, 0xA4	; 164
   1a222:	ff 4f       	sbci	r31, 0xFF	; 255
   1a224:	c0 82       	st	Z, r12
   1a226:	d1 82       	std	Z+1, r13	; 0x01
   1a228:	e2 82       	std	Z+2, r14	; 0x02
   1a22a:	f3 82       	std	Z+3, r15	; 0x03
            LIF->DIR.FileSectors = sectors;
   1a22c:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a22e:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a230:	e0 5a       	subi	r30, 0xA0	; 160
   1a232:	ff 4f       	sbci	r31, 0xFF	; 255
   1a234:	80 82       	st	Z, r8
   1a236:	91 82       	std	Z+1, r9	; 0x01
   1a238:	a2 82       	std	Z+2, r10	; 0x02
   1a23a:	b3 82       	std	Z+3, r11	; 0x03
            LIF->usedsectors += sectors;
   1a23c:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a23e:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a240:	84 89       	ldd	r24, Z+20	; 0x14
   1a242:	95 89       	ldd	r25, Z+21	; 0x15
   1a244:	a6 89       	ldd	r26, Z+22	; 0x16
   1a246:	b7 89       	ldd	r27, Z+23	; 0x17
   1a248:	88 0d       	add	r24, r8
   1a24a:	99 1d       	adc	r25, r9
   1a24c:	aa 1d       	adc	r26, r10
   1a24e:	bb 1d       	adc	r27, r11
   1a250:	84 8b       	std	Z+20, r24	; 0x14
   1a252:	95 8b       	std	Z+21, r25	; 0x15
   1a254:	a6 8b       	std	Z+22, r26	; 0x16
   1a256:	b7 8b       	std	Z+23, r27	; 0x17
            LIF->freesectors -= sectors;
   1a258:	80 8d       	ldd	r24, Z+24	; 0x18
   1a25a:	91 8d       	ldd	r25, Z+25	; 0x19
   1a25c:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a25e:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a260:	88 19       	sub	r24, r8
   1a262:	99 09       	sbc	r25, r9
   1a264:	aa 09       	sbc	r26, r10
   1a266:	bb 09       	sbc	r27, r11
   1a268:	80 8f       	std	Z+24, r24	; 0x18
   1a26a:	91 8f       	std	Z+25, r25	; 0x19
   1a26c:	a2 8f       	std	Z+26, r26	; 0x1a
   1a26e:	b3 8f       	std	Z+27, r27	; 0x1b
            LIF->files++;
   1a270:	84 8d       	ldd	r24, Z+28	; 0x1c
   1a272:	95 8d       	ldd	r25, Z+29	; 0x1d
   1a274:	01 96       	adiw	r24, 0x01	; 1
   1a276:	95 8f       	std	Z+29, r25	; 0x1d
   1a278:	84 8f       	std	Z+28, r24	; 0x1c
            LIF->dirindex = index;
   1a27a:	11 a3       	std	Z+33, r17	; 0x21
// Write new record (FileType is still EOF until data is updated by user )
            if( !lif_writedirindex(LIF,index))
   1a27c:	00 a3       	std	Z+32, r16	; 0x20
   1a27e:	b8 01       	movw	r22, r16
   1a280:	cf 01       	movw	r24, r30
   1a282:	75 da       	rcall	.-2838   	; 0x1976e <lif_writedirindex>
   1a284:	89 2b       	or	r24, r25
   1a286:	a9 f1       	breq	.+106    	; 0x1a2f2 <lif_newdir+0x2b4>
   1a288:	c8 01       	movw	r24, r16
   1a28a:	35 c0       	rjmp	.+106    	; 0x1a2f6 <lif_newdir+0x2b8>
        }

// PURGED records
        if(LIF->DIR.FileType == 0)
        {
            if(freestate == 0)
   1a28c:	c8 8e       	std	Y+24, r12	; 0x18
   1a28e:	d9 8e       	std	Y+25, r13	; 0x19
   1a290:	ea 8e       	std	Y+26, r14	; 0x1a
   1a292:	fb 8e       	std	Y+27, r15	; 0x1b
   1a294:	18 01       	movw	r2, r16
            {
                freeindex = index;
                freestart = start;
                freestate = 1;
   1a296:	66 24       	eor	r6, r6
   1a298:	63 94       	inc	r6
   1a29a:	71 2c       	mov	r7, r1
            }
            ++index;
            continue;
   1a29c:	36 cf       	rjmp	.-404    	; 0x1a10a <lif_newdir+0xcc>
        }

// VALID record
        if(freestate == 1)
   1a29e:	f1 e0       	ldi	r31, 0x01	; 1
   1a2a0:	6f 16       	cp	r6, r31
   1a2a2:	71 04       	cpc	r7, r1
   1a2a4:	a9 f4       	brne	.+42     	; 0x1a2d0 <lif_newdir+0x292>
        {
            long freesectors;
// Compute sectors of purged space between valid records
// Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
   1a2a6:	ea 89       	ldd	r30, Y+18	; 0x12
   1a2a8:	fb 89       	ldd	r31, Y+19	; 0x13
   1a2aa:	80 81       	ld	r24, Z
   1a2ac:	91 81       	ldd	r25, Z+1	; 0x01
   1a2ae:	a2 81       	ldd	r26, Z+2	; 0x02
   1a2b0:	b3 81       	ldd	r27, Z+3	; 0x03
   1a2b2:	8c 19       	sub	r24, r12
   1a2b4:	9d 09       	sbc	r25, r13
   1a2b6:	ae 09       	sbc	r26, r14
   1a2b8:	bf 09       	sbc	r27, r15
   1a2ba:	88 15       	cp	r24, r8
   1a2bc:	99 05       	cpc	r25, r9
   1a2be:	aa 05       	cpc	r26, r10
   1a2c0:	bb 05       	cpc	r27, r11
   1a2c2:	1c f4       	brge	.+6      	; 0x1a2ca <lif_newdir+0x28c>
                freestate = 2;                    // Found free space in purged record
            else
                freestate = 0;                    // Try again
   1a2c4:	61 2c       	mov	r6, r1
   1a2c6:	71 2c       	mov	r7, r1
   1a2c8:	03 c0       	rjmp	.+6      	; 0x1a2d0 <lif_newdir+0x292>
            long freesectors;
// Compute sectors of purged space between valid records
// Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
                freestate = 2;                    // Found free space in purged record
   1a2ca:	82 e0       	ldi	r24, 0x02	; 2
   1a2cc:	68 2e       	mov	r6, r24
   1a2ce:	71 2c       	mov	r7, r1
                freestate = 0;                    // Try again
        }

// Computed start of next record
// Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   1a2d0:	ea 89       	ldd	r30, Y+18	; 0x12
   1a2d2:	fb 89       	ldd	r31, Y+19	; 0x13
   1a2d4:	c0 80       	ld	r12, Z
   1a2d6:	d1 80       	ldd	r13, Z+1	; 0x01
   1a2d8:	e2 80       	ldd	r14, Z+2	; 0x02
   1a2da:	f3 80       	ldd	r15, Z+3	; 0x03
   1a2dc:	ee 89       	ldd	r30, Y+22	; 0x16
   1a2de:	ff 89       	ldd	r31, Y+23	; 0x17
   1a2e0:	80 81       	ld	r24, Z
   1a2e2:	91 81       	ldd	r25, Z+1	; 0x01
   1a2e4:	a2 81       	ldd	r26, Z+2	; 0x02
   1a2e6:	b3 81       	ldd	r27, Z+3	; 0x03
   1a2e8:	c8 0e       	add	r12, r24
   1a2ea:	d9 1e       	adc	r13, r25
   1a2ec:	ea 1e       	adc	r14, r26
   1a2ee:	fb 1e       	adc	r15, r27
   1a2f0:	0c cf       	rjmp	.-488    	; 0x1a10a <lif_newdir+0xcc>
        ++index;
    }
// ERROR
    return(-1);
   1a2f2:	8f ef       	ldi	r24, 0xFF	; 255
   1a2f4:	9f ef       	ldi	r25, 0xFF	; 255
}
   1a2f6:	6d 96       	adiw	r28, 0x1d	; 29
   1a2f8:	e2 e1       	ldi	r30, 0x12	; 18
   1a2fa:	0c 94 29 e7 	jmp	0x1ce52	; 0x1ce52 <__epilogue_restores__>

0001a2fe <lif_open_volume>:
/// @param[in] *name: file name of LIF image
/// @param[in] *mode: "rb" = read, "rb+" = read/write
/// @return LIF pointer on sucesses or NULL on error
MEMSPACE
lif_t *lif_open_volume(char *name, char *mode)
{
   1a2fe:	a9 e3       	ldi	r26, 0x39	; 57
   1a300:	b1 e0       	ldi	r27, 0x01	; 1
   1a302:	e5 e8       	ldi	r30, 0x85	; 133
   1a304:	f1 ed       	ldi	r31, 0xD1	; 209
   1a306:	0c 94 13 e7 	jmp	0x1ce26	; 0x1ce26 <__prologue_saves__+0xc>
   1a30a:	6c 01       	movw	r12, r24
   1a30c:	8b 01       	movw	r16, r22
    lif_t *LIF;
    stat_t sb, *sp;
    uint8_t buffer[LIF_SECTOR_SIZE];

    sp = lif_stat(name, (stat_t *)&sb);
   1a30e:	be 01       	movw	r22, r28
   1a310:	66 5f       	subi	r22, 0xF6	; 246
   1a312:	7e 4f       	sbci	r23, 0xFE	; 254
   1a314:	0e 94 9c c1 	call	0x18338	; 0x18338 <lif_stat>
   1a318:	5c 01       	movw	r10, r24
    if(sp == NULL)
   1a31a:	00 97       	sbiw	r24, 0x00	; 0
   1a31c:	09 f1       	breq	.+66     	; 0x1a360 <lif_open_volume+0x62>
        return(NULL);

// To read LIF volume we must have at minimum two sectors
// volume header a directory entry
    if(sp->st_size < (long)LIF_SECTOR_SIZE*2)
   1a31e:	fc 01       	movw	r30, r24
   1a320:	80 8d       	ldd	r24, Z+24	; 0x18
   1a322:	91 8d       	ldd	r25, Z+25	; 0x19
   1a324:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a326:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a328:	81 15       	cp	r24, r1
   1a32a:	f2 e0       	ldi	r31, 0x02	; 2
   1a32c:	9f 07       	cpc	r25, r31
   1a32e:	a1 05       	cpc	r26, r1
   1a330:	b1 05       	cpc	r27, r1
   1a332:	c8 f4       	brcc	.+50     	; 0x1a366 <lif_open_volume+0x68>
    {
        if(debuglevel & LIF_DEBUG)
   1a334:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1a338:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a33c:	32 ff       	sbrs	r19, 2
   1a33e:	10 c0       	rjmp	.+32     	; 0x1a360 <lif_open_volume+0x62>
            printf("lif_open_volume:[%s] error volume header area too small:[%ld]\n", name, (long)sp->st_size);
   1a340:	ed b7       	in	r30, 0x3d	; 61
   1a342:	fe b7       	in	r31, 0x3e	; 62
   1a344:	86 83       	std	Z+6, r24	; 0x06
   1a346:	97 83       	std	Z+7, r25	; 0x07
   1a348:	a0 87       	std	Z+8, r26	; 0x08
   1a34a:	b1 87       	std	Z+9, r27	; 0x09
   1a34c:	d5 82       	std	Z+5, r13	; 0x05
   1a34e:	c4 82       	std	Z+4, r12	; 0x04
   1a350:	89 ef       	ldi	r24, 0xF9	; 249
   1a352:	9b e3       	ldi	r25, 0x3B	; 59
   1a354:	a0 e0       	ldi	r26, 0x00	; 0
   1a356:	81 83       	std	Z+1, r24	; 0x01
   1a358:	92 83       	std	Z+2, r25	; 0x02
   1a35a:	a3 83       	std	Z+3, r26	; 0x03
   1a35c:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
        return(NULL);
   1a360:	00 e0       	ldi	r16, 0x00	; 0
   1a362:	10 e0       	ldi	r17, 0x00	; 0
   1a364:	c6 c0       	rjmp	.+396    	; 0x1a4f2 <lif_open_volume+0x1f4>
    }

// Allocate LIF structure
    LIF = lif_calloc(sizeof(lif_t)+4);
   1a366:	64 e7       	ldi	r22, 0x74	; 116
   1a368:	70 e0       	ldi	r23, 0x00	; 0
   1a36a:	80 e0       	ldi	r24, 0x00	; 0
   1a36c:	90 e0       	ldi	r25, 0x00	; 0
   1a36e:	0e 94 08 c1 	call	0x18210	; 0x18210 <lif_calloc>
   1a372:	7c 01       	movw	r14, r24
    if(!LIF)
   1a374:	89 2b       	or	r24, r25
   1a376:	a1 f3       	breq	.-24     	; 0x1a360 <lif_open_volume+0x62>
        return(NULL);

    LIF->name = lif_stralloc(name);
   1a378:	c6 01       	movw	r24, r12
   1a37a:	0e 94 53 c1 	call	0x182a6	; 0x182a6 <lif_stralloc>
   1a37e:	f7 01       	movw	r30, r14
   1a380:	91 83       	std	Z+1, r25	; 0x01
   1a382:	80 83       	st	Z, r24
    if(!LIF->name)
   1a384:	00 97       	sbiw	r24, 0x00	; 0
   1a386:	09 f4       	brne	.+2      	; 0x1a38a <lif_open_volume+0x8c>
   1a388:	5e c0       	rjmp	.+188    	; 0x1a446 <lif_open_volume+0x148>
    {
        lif_closedir(LIF);
        return(NULL);
    }

    LIF->imagebytes = sp->st_size;
   1a38a:	f5 01       	movw	r30, r10
   1a38c:	80 8c       	ldd	r8, Z+24	; 0x18
   1a38e:	91 8c       	ldd	r9, Z+25	; 0x19
   1a390:	a2 8c       	ldd	r10, Z+26	; 0x1a
   1a392:	b3 8c       	ldd	r11, Z+27	; 0x1b
   1a394:	f7 01       	movw	r30, r14
   1a396:	80 86       	std	Z+8, r8	; 0x08
   1a398:	91 86       	std	Z+9, r9	; 0x09
   1a39a:	a2 86       	std	Z+10, r10	; 0x0a
   1a39c:	b3 86       	std	Z+11, r11	; 0x0b
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a39e:	77 27       	eor	r23, r23
   1a3a0:	6b 2d       	mov	r22, r11
   1a3a2:	5a 2d       	mov	r21, r10
   1a3a4:	49 2d       	mov	r20, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a3a6:	88 20       	and	r8, r8
   1a3a8:	21 f0       	breq	.+8      	; 0x1a3b2 <lif_open_volume+0xb4>
        ++sectors;
   1a3aa:	4f 5f       	subi	r20, 0xFF	; 255
   1a3ac:	5f 4f       	sbci	r21, 0xFF	; 255
   1a3ae:	6f 4f       	sbci	r22, 0xFF	; 255
   1a3b0:	7f 4f       	sbci	r23, 0xFF	; 255
        lif_closedir(LIF);
        return(NULL);
    }

    LIF->imagebytes = sp->st_size;
    LIF->sectors = lif_bytes2sectors(sp->st_size);
   1a3b2:	f7 01       	movw	r30, r14
   1a3b4:	44 83       	std	Z+4, r20	; 0x04
   1a3b6:	55 83       	std	Z+5, r21	; 0x05
   1a3b8:	66 83       	std	Z+6, r22	; 0x06
   1a3ba:	77 83       	std	Z+7, r23	; 0x07

    LIF->fp = lif_open(LIF->name,mode);
   1a3bc:	b8 01       	movw	r22, r16
   1a3be:	0e 94 72 c1 	call	0x182e4	; 0x182e4 <lif_open>
   1a3c2:	f7 01       	movw	r30, r14
   1a3c4:	93 83       	std	Z+3, r25	; 0x03
   1a3c6:	82 83       	std	Z+2, r24	; 0x02
    if(!LIF->fp)
   1a3c8:	89 2b       	or	r24, r25
   1a3ca:	e9 f1       	breq	.+122    	; 0x1a446 <lif_open_volume+0x148>
        lif_closedir(LIF);
        return(NULL);
    }

// Volume header must be it least one sector
    if( lif_read(LIF, buffer, 0, LIF_SECTOR_SIZE) < LIF_SECTOR_SIZE)
   1a3cc:	00 e0       	ldi	r16, 0x00	; 0
   1a3ce:	11 e0       	ldi	r17, 0x01	; 1
   1a3d0:	20 e0       	ldi	r18, 0x00	; 0
   1a3d2:	30 e0       	ldi	r19, 0x00	; 0
   1a3d4:	a9 01       	movw	r20, r18
   1a3d6:	be 01       	movw	r22, r28
   1a3d8:	66 5f       	subi	r22, 0xF6	; 246
   1a3da:	7f 4f       	sbci	r23, 0xFF	; 255
   1a3dc:	c7 01       	movw	r24, r14
   1a3de:	0e 94 f6 c1 	call	0x183ec	; 0x183ec <lif_read>
   1a3e2:	6f 3f       	cpi	r22, 0xFF	; 255
   1a3e4:	71 05       	cpc	r23, r1
   1a3e6:	81 05       	cpc	r24, r1
   1a3e8:	91 05       	cpc	r25, r1
   1a3ea:	09 f0       	breq	.+2      	; 0x1a3ee <lif_open_volume+0xf0>
   1a3ec:	6c f4       	brge	.+26     	; 0x1a408 <lif_open_volume+0x10a>
    {
        if(debuglevel & LIF_DEBUG)
   1a3ee:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a3f2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a3f6:	92 ff       	sbrs	r25, 2
   1a3f8:	26 c0       	rjmp	.+76     	; 0x1a446 <lif_open_volume+0x148>
            printf("lif_open_volume:[%s] error read volume header failed\n", name);
   1a3fa:	ed b7       	in	r30, 0x3d	; 61
   1a3fc:	fe b7       	in	r31, 0x3e	; 62
   1a3fe:	d5 82       	std	Z+5, r13	; 0x05
   1a400:	c4 82       	std	Z+4, r12	; 0x04
   1a402:	83 ec       	ldi	r24, 0xC3	; 195
   1a404:	9b e3       	ldi	r25, 0x3B	; 59
   1a406:	19 c0       	rjmp	.+50     	; 0x1a43a <lif_open_volume+0x13c>
        lif_closedir(LIF);
        return(NULL);
    }

// Unpack Volumes has the Directory start sector
    lif_str2vol(buffer, LIF);
   1a408:	b7 01       	movw	r22, r14
   1a40a:	ce 01       	movw	r24, r28
   1a40c:	0a 96       	adiw	r24, 0x0a	; 10
   1a40e:	0e 94 16 c4 	call	0x1882c	; 0x1882c <lif_str2vol>

// Validate basic Volume headers
    if( !lif_check_volume(LIF) )
   1a412:	c7 01       	movw	r24, r14
   1a414:	0e 94 22 c8 	call	0x19044	; 0x19044 <lif_check_volume>
   1a418:	89 2b       	or	r24, r25
   1a41a:	c1 f4       	brne	.+48     	; 0x1a44c <lif_open_volume+0x14e>
    {
        if(debuglevel & LIF_DEBUG)
   1a41c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a420:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a424:	92 ff       	sbrs	r25, 2
   1a426:	0f c0       	rjmp	.+30     	; 0x1a446 <lif_open_volume+0x148>
            printf("lif_open_volume:[%s] error volume validate failed\n", LIF->name);
   1a428:	f7 01       	movw	r30, r14
   1a42a:	80 81       	ld	r24, Z
   1a42c:	91 81       	ldd	r25, Z+1	; 0x01
   1a42e:	ed b7       	in	r30, 0x3d	; 61
   1a430:	fe b7       	in	r31, 0x3e	; 62
   1a432:	95 83       	std	Z+5, r25	; 0x05
   1a434:	84 83       	std	Z+4, r24	; 0x04
   1a436:	80 e9       	ldi	r24, 0x90	; 144
   1a438:	9b e3       	ldi	r25, 0x3B	; 59
   1a43a:	a0 e0       	ldi	r26, 0x00	; 0
   1a43c:	81 83       	std	Z+1, r24	; 0x01
   1a43e:	92 83       	std	Z+2, r25	; 0x02
   1a440:	a3 83       	std	Z+3, r26	; 0x03
   1a442:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a446:	c7 01       	movw	r24, r14
   1a448:	9d d8       	rcall	.-3782   	; 0x19584 <lif_close_volume>
   1a44a:	8a cf       	rjmp	.-236    	; 0x1a360 <lif_open_volume+0x62>
        lif_closedir(LIF);
        return(NULL);
    }

// Initialize remaining LIF headers
    LIF->filestart = LIF->VOL.DirStartSector + LIF->VOL.DirSectors;
   1a44c:	f7 01       	movw	r30, r14
   1a44e:	45 a5       	ldd	r20, Z+45	; 0x2d
   1a450:	56 a5       	ldd	r21, Z+46	; 0x2e
   1a452:	67 a5       	ldd	r22, Z+47	; 0x2f
   1a454:	70 a9       	ldd	r23, Z+48	; 0x30
   1a456:	85 a9       	ldd	r24, Z+53	; 0x35
   1a458:	96 a9       	ldd	r25, Z+54	; 0x36
   1a45a:	a7 a9       	ldd	r26, Z+55	; 0x37
   1a45c:	b0 ad       	ldd	r27, Z+56	; 0x38
   1a45e:	48 0f       	add	r20, r24
   1a460:	59 1f       	adc	r21, r25
   1a462:	6a 1f       	adc	r22, r26
   1a464:	7b 1f       	adc	r23, r27
   1a466:	44 87       	std	Z+12, r20	; 0x0c
   1a468:	55 87       	std	Z+13, r21	; 0x0d
   1a46a:	66 87       	std	Z+14, r22	; 0x0e
   1a46c:	77 87       	std	Z+15, r23	; 0x0f
    LIF->filesectors = LIF->sectors - LIF->filestart;
   1a46e:	84 81       	ldd	r24, Z+4	; 0x04
   1a470:	95 81       	ldd	r25, Z+5	; 0x05
   1a472:	a6 81       	ldd	r26, Z+6	; 0x06
   1a474:	b7 81       	ldd	r27, Z+7	; 0x07
   1a476:	84 1b       	sub	r24, r20
   1a478:	95 0b       	sbc	r25, r21
   1a47a:	a6 0b       	sbc	r26, r22
   1a47c:	b7 0b       	sbc	r27, r23
   1a47e:	80 8b       	std	Z+16, r24	; 0x10
   1a480:	91 8b       	std	Z+17, r25	; 0x11
   1a482:	a2 8b       	std	Z+18, r26	; 0x12
   1a484:	b3 8b       	std	Z+19, r27	; 0x13
    LIF->freesectors = LIF->filesectors;
   1a486:	80 8f       	std	Z+24, r24	; 0x18
   1a488:	91 8f       	std	Z+25, r25	; 0x19
   1a48a:	a2 8f       	std	Z+26, r26	; 0x1a
   1a48c:	b3 8f       	std	Z+27, r27	; 0x1b
    LIF->usedsectors = 0;
   1a48e:	14 8a       	std	Z+20, r1	; 0x14
   1a490:	15 8a       	std	Z+21, r1	; 0x15
   1a492:	16 8a       	std	Z+22, r1	; 0x16
   1a494:	17 8a       	std	Z+23, r1	; 0x17
    LIF->purged = 0;
   1a496:	17 8e       	std	Z+31, r1	; 0x1f
   1a498:	16 8e       	std	Z+30, r1	; 0x1e
    LIF->files = 0;
   1a49a:	15 8e       	std	Z+29, r1	; 0x1d
   1a49c:	14 8e       	std	Z+28, r1	; 0x1c
    LIF->dirindex = 0;
   1a49e:	11 a2       	std	Z+33, r1	; 0x21
   1a4a0:	10 a2       	std	Z+32, r1	; 0x20
    LIF->EOFindex = 0;
   1a4a2:	13 a2       	std	Z+35, r1	; 0x23
   1a4a4:	12 a2       	std	Z+34, r1	; 0x22

    if( lif_updatefree(LIF) == NULL)
   1a4a6:	c7 01       	movw	r24, r14
   1a4a8:	d6 d9       	rcall	.-3156   	; 0x19856 <lif_updatefree>
   1a4aa:	8c 01       	movw	r16, r24
   1a4ac:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a4b0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a4b4:	01 15       	cp	r16, r1
   1a4b6:	11 05       	cpc	r17, r1
   1a4b8:	a1 f4       	brne	.+40     	; 0x1a4e2 <lif_open_volume+0x1e4>
    {
        if(debuglevel & LIF_DEBUG)
   1a4ba:	92 ff       	sbrs	r25, 2
   1a4bc:	0f c0       	rjmp	.+30     	; 0x1a4dc <lif_open_volume+0x1de>
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
   1a4be:	f7 01       	movw	r30, r14
   1a4c0:	80 81       	ld	r24, Z
   1a4c2:	91 81       	ldd	r25, Z+1	; 0x01
   1a4c4:	ed b7       	in	r30, 0x3d	; 61
   1a4c6:	fe b7       	in	r31, 0x3e	; 62
   1a4c8:	95 83       	std	Z+5, r25	; 0x05
   1a4ca:	84 83       	std	Z+4, r24	; 0x04
   1a4cc:	8d e5       	ldi	r24, 0x5D	; 93
   1a4ce:	9b e3       	ldi	r25, 0x3B	; 59
   1a4d0:	a0 e0       	ldi	r26, 0x00	; 0
   1a4d2:	81 83       	std	Z+1, r24	; 0x01
   1a4d4:	92 83       	std	Z+2, r25	; 0x02
   1a4d6:	a3 83       	std	Z+3, r26	; 0x03
   1a4d8:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a4dc:	c7 01       	movw	r24, r14
   1a4de:	52 d8       	rcall	.-3932   	; 0x19584 <lif_close_volume>
    if( lif_updatefree(LIF) == NULL)
    {
        if(debuglevel & LIF_DEBUG)
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
        lif_closedir(LIF);
        return(NULL);
   1a4e0:	08 c0       	rjmp	.+16     	; 0x1a4f2 <lif_open_volume+0x1f4>
    }

    if(debuglevel &LIF_DEBUG)
   1a4e2:	92 ff       	sbrs	r25, 2
   1a4e4:	05 c0       	rjmp	.+10     	; 0x1a4f0 <lif_open_volume+0x1f2>
        lif_dump_vol(LIF, "Volume Listing");
   1a4e6:	66 e3       	ldi	r22, 0x36	; 54
   1a4e8:	76 e1       	ldi	r23, 0x16	; 22
   1a4ea:	c7 01       	movw	r24, r14
   1a4ec:	0e 94 5c c6 	call	0x18cb8	; 0x18cb8 <lif_dump_vol>
   1a4f0:	87 01       	movw	r16, r14
    return( LIF );
}
   1a4f2:	c8 01       	movw	r24, r16
   1a4f4:	c7 5c       	subi	r28, 0xC7	; 199
   1a4f6:	de 4f       	sbci	r29, 0xFE	; 254
   1a4f8:	ec e0       	ldi	r30, 0x0C	; 12
   1a4fa:	0c 94 2f e7 	jmp	0x1ce5e	; 0x1ce5e <__epilogue_restores__+0xc>

0001a4fe <lif_dir>:
/// @brief Display a LIF image file directory
/// @param[in] lifimagename: LIF disk image name
/// @return -1 on error or number of files found
MEMSPACE
void lif_dir(char *lifimagename)
{
   1a4fe:	2f 92       	push	r2
   1a500:	3f 92       	push	r3
   1a502:	4f 92       	push	r4
   1a504:	5f 92       	push	r5
   1a506:	6f 92       	push	r6
   1a508:	8f 92       	push	r8
   1a50a:	9f 92       	push	r9
   1a50c:	af 92       	push	r10
   1a50e:	bf 92       	push	r11
   1a510:	cf 92       	push	r12
   1a512:	df 92       	push	r13
   1a514:	ef 92       	push	r14
   1a516:	0f 93       	push	r16
   1a518:	1f 93       	push	r17
   1a51a:	cf 93       	push	r28
   1a51c:	df 93       	push	r29
   1a51e:	cd b7       	in	r28, 0x3d	; 61
   1a520:	de b7       	in	r29, 0x3e	; 62
   1a522:	af 97       	sbiw	r28, 0x2f	; 47
   1a524:	0f b6       	in	r0, 0x3f	; 63
   1a526:	f8 94       	cli
   1a528:	de bf       	out	0x3e, r29	; 62
   1a52a:	0f be       	out	0x3f, r0	; 63
   1a52c:	cd bf       	out	0x3d, r28	; 61
    int index = 0;
    char *vol;

    int warn = ' ';

    LIF = lif_open_volume(lifimagename,"rb+");
   1a52e:	68 e0       	ldi	r22, 0x08	; 8
   1a530:	79 e0       	ldi	r23, 0x09	; 9
   1a532:	e5 de       	rcall	.-566    	; 0x1a2fe <lif_open_volume>
   1a534:	9f a7       	std	Y+47, r25	; 0x2f
   1a536:	8e a7       	std	Y+46, r24	; 0x2e
    if(LIF == NULL)
   1a538:	00 97       	sbiw	r24, 0x00	; 0
   1a53a:	09 f4       	brne	.+2      	; 0x1a53e <lif_dir+0x40>
   1a53c:	9e c1       	rjmp	.+828    	; 0x1a87a <lif_dir+0x37c>
        return;

    vol = (char *)LIF->VOL.Label;
    if(!vol[0])
   1a53e:	fc 01       	movw	r30, r24
   1a540:	86 a1       	ldd	r24, Z+38	; 0x26
   1a542:	88 23       	and	r24, r24
   1a544:	21 f0       	breq	.+8      	; 0x1a54e <lif_dir+0x50>

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return;

    vol = (char *)LIF->VOL.Label;
   1a546:	8f 01       	movw	r16, r30
   1a548:	0a 5d       	subi	r16, 0xDA	; 218
   1a54a:	1f 4f       	sbci	r17, 0xFF	; 255
   1a54c:	02 c0       	rjmp	.+4      	; 0x1a552 <lif_dir+0x54>
    if(!vol[0])
        vol = "<EMPTY>";
   1a54e:	08 ee       	ldi	r16, 0xE8	; 232
   1a550:	15 e1       	ldi	r17, 0x15	; 21

    printf("Volume:[%s] Date:[%s]\n", vol, lif_lifbcd2timestr(LIF->VOL.date));
   1a552:	8e a5       	ldd	r24, Y+46	; 0x2e
   1a554:	9f a5       	ldd	r25, Y+47	; 0x2f
   1a556:	87 5b       	subi	r24, 0xB7	; 183
   1a558:	9f 4f       	sbci	r25, 0xFF	; 255
   1a55a:	0e 94 20 c6 	call	0x18c40	; 0x18c40 <lif_lifbcd2timestr>
   1a55e:	ed b7       	in	r30, 0x3d	; 61
   1a560:	fe b7       	in	r31, 0x3e	; 62
   1a562:	97 83       	std	Z+7, r25	; 0x07
   1a564:	86 83       	std	Z+6, r24	; 0x06
   1a566:	15 83       	std	Z+5, r17	; 0x05
   1a568:	04 83       	std	Z+4, r16	; 0x04
   1a56a:	86 e4       	ldi	r24, 0x46	; 70
   1a56c:	9b e3       	ldi	r25, 0x3B	; 59
   1a56e:	a0 e0       	ldi	r26, 0x00	; 0
   1a570:	81 83       	std	Z+1, r24	; 0x01
   1a572:	92 83       	std	Z+2, r25	; 0x02
   1a574:	a3 83       	std	Z+3, r26	; 0x03
   1a576:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>

    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
   1a57a:	86 e0       	ldi	r24, 0x06	; 6
   1a57c:	9b e3       	ldi	r25, 0x3B	; 59
   1a57e:	a0 e0       	ldi	r26, 0x00	; 0
   1a580:	ed b7       	in	r30, 0x3d	; 61
   1a582:	fe b7       	in	r31, 0x3e	; 62
   1a584:	81 83       	std	Z+1, r24	; 0x01
   1a586:	92 83       	std	Z+2, r25	; 0x02
   1a588:	a3 83       	std	Z+3, r26	; 0x03
   1a58a:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    long bytes;
    lif_t *LIF;
    int index = 0;
    char *vol;

    int warn = ' ';
   1a58e:	00 e2       	ldi	r16, 0x20	; 32
   1a590:	10 e0       	ldi	r17, 0x00	; 0
   1a592:	1f 8b       	std	Y+23, r17	; 0x17
   1a594:	0e 8b       	std	Y+22, r16	; 0x16
MEMSPACE
void lif_dir(char *lifimagename)
{
    long bytes;
    lif_t *LIF;
    int index = 0;
   1a596:	21 2c       	mov	r2, r1
   1a598:	31 2c       	mov	r3, r1
    {

        if(!lif_readdirindex(LIF,index))
            break;

        if(LIF->DIR.FileType == 0xffff)
   1a59a:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a59c:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a59e:	06 5a       	subi	r16, 0xA6	; 166
   1a5a0:	1f 4f       	sbci	r17, 0xFF	; 255
   1a5a2:	1d 8f       	std	Y+29, r17	; 0x1d
   1a5a4:	0c 8f       	std	Y+28, r16	; 0x1c
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   1a5a6:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a5a8:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a5aa:	00 5a       	subi	r16, 0xA0	; 160
   1a5ac:	1f 4f       	sbci	r17, 0xFF	; 255
   1a5ae:	1d a3       	std	Y+37, r17	; 0x25
   1a5b0:	0c a3       	std	Y+36, r16	; 0x24

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1a5b2:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a5b4:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a5b6:	04 59       	subi	r16, 0x94	; 148
   1a5b8:	1f 4f       	sbci	r17, 0xFF	; 255
   1a5ba:	1f a3       	std	Y+39, r17	; 0x27
   1a5bc:	0e a3       	std	Y+38, r16	; 0x26
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   1a5be:	8a eb       	ldi	r24, 0xBA	; 186
   1a5c0:	9a e3       	ldi	r25, 0x3A	; 58
   1a5c2:	6c 01       	movw	r12, r24
   1a5c4:	e1 2c       	mov	r14, r1
   1a5c6:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a5c8:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a5ca:	01 5b       	subi	r16, 0xB1	; 177
   1a5cc:	1f 4f       	sbci	r17, 0xFF	; 255
   1a5ce:	1f 8f       	std	Y+31, r17	; 0x1f
   1a5d0:	0e 8f       	std	Y+30, r16	; 0x1e
                }
            }
        }

// name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n",
   1a5d2:	8a e8       	ldi	r24, 0x8A	; 138
   1a5d4:	9a e3       	ldi	r25, 0x3A	; 58
   1a5d6:	2c 01       	movw	r4, r24
   1a5d8:	61 2c       	mov	r6, r1
   1a5da:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a5dc:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a5de:	04 5a       	subi	r16, 0xA4	; 164
   1a5e0:	1f 4f       	sbci	r17, 0xFF	; 255
   1a5e2:	19 a7       	std	Y+41, r17	; 0x29
   1a5e4:	08 a7       	std	Y+40, r16	; 0x28
   1a5e6:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a5e8:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a5ea:	02 59       	subi	r16, 0x92	; 146
   1a5ec:	1f 4f       	sbci	r17, 0xFF	; 255
   1a5ee:	1b a7       	std	Y+43, r17	; 0x2b
   1a5f0:	0a a7       	std	Y+42, r16	; 0x2a
   1a5f2:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a5f4:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a5f6:	0c 59       	subi	r16, 0x9C	; 156
   1a5f8:	1f 4f       	sbci	r17, 0xFF	; 255
   1a5fa:	1d a7       	std	Y+45, r17	; 0x2d
   1a5fc:	0c a7       	std	Y+44, r16	; 0x2c

    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
    while(1)
    {

        if(!lif_readdirindex(LIF,index))
   1a5fe:	b1 01       	movw	r22, r2
   1a600:	8e a5       	ldd	r24, Y+46	; 0x2e
   1a602:	9f a5       	ldd	r25, Y+47	; 0x2f
   1a604:	4d d8       	rcall	.-3942   	; 0x196a0 <lif_readdirindex>
   1a606:	89 2b       	or	r24, r25
   1a608:	09 f4       	brne	.+2      	; 0x1a60c <lif_dir+0x10e>
   1a60a:	ad c0       	rjmp	.+346    	; 0x1a766 <lif_dir+0x268>
            break;

        if(LIF->DIR.FileType == 0xffff)
   1a60c:	ac 8d       	ldd	r26, Y+28	; 0x1c
   1a60e:	bd 8d       	ldd	r27, Y+29	; 0x1d
   1a610:	8d 91       	ld	r24, X+
   1a612:	9c 91       	ld	r25, X
   1a614:	8f 3f       	cpi	r24, 0xFF	; 255
   1a616:	bf ef       	ldi	r27, 0xFF	; 255
   1a618:	9b 07       	cpc	r25, r27
   1a61a:	09 f4       	brne	.+2      	; 0x1a61e <lif_dir+0x120>
   1a61c:	a4 c0       	rjmp	.+328    	; 0x1a766 <lif_dir+0x268>
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   1a61e:	ec a1       	ldd	r30, Y+36	; 0x24
   1a620:	fd a1       	ldd	r31, Y+37	; 0x25
   1a622:	40 81       	ld	r20, Z
   1a624:	51 81       	ldd	r21, Z+1	; 0x01
   1a626:	62 81       	ldd	r22, Z+2	; 0x02
   1a628:	73 81       	ldd	r23, Z+3	; 0x03
   1a62a:	00 27       	eor	r16, r16
   1a62c:	14 2f       	mov	r17, r20
   1a62e:	25 2f       	mov	r18, r21
   1a630:	36 2f       	mov	r19, r22
   1a632:	08 8f       	std	Y+24, r16	; 0x18
   1a634:	19 8f       	std	Y+25, r17	; 0x19
   1a636:	2a 8f       	std	Y+26, r18	; 0x1a
   1a638:	3b 8f       	std	Y+27, r19	; 0x1b

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
   1a63a:	8c 7f       	andi	r24, 0xFC	; 252
   1a63c:	80 31       	cpi	r24, 0x10	; 16
   1a63e:	90 4e       	sbci	r25, 0xE0	; 224
   1a640:	09 f0       	breq	.+2      	; 0x1a644 <lif_dir+0x146>
   1a642:	4b c0       	rjmp	.+150    	; 0x1a6da <lif_dir+0x1dc>
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1a644:	ae a1       	ldd	r26, Y+38	; 0x26
   1a646:	bf a1       	ldd	r27, Y+39	; 0x27
   1a648:	8d 91       	ld	r24, X+
   1a64a:	9c 91       	ld	r25, X
   1a64c:	00 97       	sbiw	r24, 0x00	; 0
   1a64e:	b9 f0       	breq	.+46     	; 0x1a67e <lif_dir+0x180>
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a650:	4c 01       	movw	r8, r24
   1a652:	a1 2c       	mov	r10, r1
   1a654:	b1 2c       	mov	r11, r1
   1a656:	33 27       	eor	r19, r19
   1a658:	2b 2d       	mov	r18, r11
   1a65a:	1a 2d       	mov	r17, r10
   1a65c:	09 2d       	mov	r16, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a65e:	88 23       	and	r24, r24
   1a660:	21 f0       	breq	.+8      	; 0x1a66a <lif_dir+0x16c>
        ++sectors;
   1a662:	0f 5f       	subi	r16, 0xFF	; 255
   1a664:	1f 4f       	sbci	r17, 0xFF	; 255
   1a666:	2f 4f       	sbci	r18, 0xFF	; 255
   1a668:	3f 4f       	sbci	r19, 0xFF	; 255

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1a66a:	40 17       	cp	r20, r16
   1a66c:	51 07       	cpc	r21, r17
   1a66e:	62 07       	cpc	r22, r18
   1a670:	73 07       	cpc	r23, r19
   1a672:	29 f4       	brne	.+10     	; 0x1a67e <lif_dir+0x180>
            {
                bytes = LIF->DIR.FileBytes;
   1a674:	88 8e       	std	Y+24, r8	; 0x18
   1a676:	99 8e       	std	Y+25, r9	; 0x19
   1a678:	aa 8e       	std	Y+26, r10	; 0x1a
   1a67a:	bb 8e       	std	Y+27, r11	; 0x1b
   1a67c:	2e c0       	rjmp	.+92     	; 0x1a6da <lif_dir+0x1dc>
            }
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
   1a67e:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1a682:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a686:	32 ff       	sbrs	r19, 2
   1a688:	24 c0       	rjmp	.+72     	; 0x1a6d2 <lif_dir+0x1d4>
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   1a68a:	4c 01       	movw	r8, r24
   1a68c:	a1 2c       	mov	r10, r1
   1a68e:	b1 2c       	mov	r11, r1
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a690:	33 27       	eor	r19, r19
   1a692:	2b 2d       	mov	r18, r11
   1a694:	1a 2d       	mov	r17, r10
   1a696:	09 2d       	mov	r16, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a698:	88 23       	and	r24, r24
   1a69a:	21 f0       	breq	.+8      	; 0x1a6a4 <lif_dir+0x1a6>
        ++sectors;
   1a69c:	0f 5f       	subi	r16, 0xFF	; 255
   1a69e:	1f 4f       	sbci	r17, 0xFF	; 255
   1a6a0:	2f 4f       	sbci	r18, 0xFF	; 255
   1a6a2:	3f 4f       	sbci	r19, 0xFF	; 255
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   1a6a4:	ed b7       	in	r30, 0x3d	; 61
   1a6a6:	fe b7       	in	r31, 0x3e	; 62
   1a6a8:	46 87       	std	Z+14, r20	; 0x0e
   1a6aa:	57 87       	std	Z+15, r21	; 0x0f
   1a6ac:	60 8b       	std	Z+16, r22	; 0x10
   1a6ae:	71 8b       	std	Z+17, r23	; 0x11
   1a6b0:	02 87       	std	Z+10, r16	; 0x0a
   1a6b2:	13 87       	std	Z+11, r17	; 0x0b
   1a6b4:	24 87       	std	Z+12, r18	; 0x0c
   1a6b6:	35 87       	std	Z+13, r19	; 0x0d
   1a6b8:	86 82       	std	Z+6, r8	; 0x06
   1a6ba:	97 82       	std	Z+7, r9	; 0x07
   1a6bc:	a0 86       	std	Z+8, r10	; 0x08
   1a6be:	b1 86       	std	Z+9, r11	; 0x09
   1a6c0:	0e 8d       	ldd	r16, Y+30	; 0x1e
   1a6c2:	1f 8d       	ldd	r17, Y+31	; 0x1f
   1a6c4:	15 83       	std	Z+5, r17	; 0x05
   1a6c6:	04 83       	std	Z+4, r16	; 0x04
   1a6c8:	c1 82       	std	Z+1, r12	; 0x01
   1a6ca:	d2 82       	std	Z+2, r13	; 0x02
   1a6cc:	e3 82       	std	Z+3, r14	; 0x03
   1a6ce:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
            {
                bytes = LIF->DIR.FileBytes;
            }
            else
            {
                warn = '!';
   1a6d2:	01 e2       	ldi	r16, 0x21	; 33
   1a6d4:	10 e0       	ldi	r17, 0x00	; 0
   1a6d6:	1f 8b       	std	Y+23, r17	; 0x17
   1a6d8:	0e 8b       	std	Y+22, r16	; 0x16
                }
            }
        }

// name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n",
   1a6da:	ac 8d       	ldd	r26, Y+28	; 0x1c
   1a6dc:	bd 8d       	ldd	r27, Y+29	; 0x1d
   1a6de:	8d 90       	ld	r8, X+
   1a6e0:	9c 90       	ld	r9, X
   1a6e2:	81 14       	cp	r8, r1
   1a6e4:	91 04       	cpc	r9, r1
   1a6e6:	19 f0       	breq	.+6      	; 0x1a6ee <lif_dir+0x1f0>
   1a6e8:	0e 8d       	ldd	r16, Y+30	; 0x1e
   1a6ea:	1f 8d       	ldd	r17, Y+31	; 0x1f
   1a6ec:	02 c0       	rjmp	.+4      	; 0x1a6f2 <lif_dir+0x1f4>
   1a6ee:	05 e4       	ldi	r16, 0x45	; 69
   1a6f0:	16 e1       	ldi	r17, 0x16	; 22
   1a6f2:	a8 a5       	ldd	r26, Y+40	; 0x28
   1a6f4:	b9 a5       	ldd	r27, Y+41	; 0x29
   1a6f6:	8d 91       	ld	r24, X+
   1a6f8:	9d 91       	ld	r25, X+
   1a6fa:	0d 90       	ld	r0, X+
   1a6fc:	bc 91       	ld	r27, X
   1a6fe:	a0 2d       	mov	r26, r0
   1a700:	88 a3       	std	Y+32, r24	; 0x20
   1a702:	99 a3       	std	Y+33, r25	; 0x21
   1a704:	aa a3       	std	Y+34, r26	; 0x22
   1a706:	bb a3       	std	Y+35, r27	; 0x23
   1a708:	ea a5       	ldd	r30, Y+42	; 0x2a
   1a70a:	fb a5       	ldd	r31, Y+43	; 0x2b
   1a70c:	a0 80       	ld	r10, Z
   1a70e:	b1 80       	ldd	r11, Z+1	; 0x01
   1a710:	8c a5       	ldd	r24, Y+44	; 0x2c
   1a712:	9d a5       	ldd	r25, Y+45	; 0x2d
   1a714:	0e 94 20 c6 	call	0x18c40	; 0x18c40 <lif_lifbcd2timestr>
   1a718:	ed b7       	in	r30, 0x3d	; 61
   1a71a:	fe b7       	in	r31, 0x3e	; 62
   1a71c:	95 8b       	std	Z+21, r25	; 0x15
   1a71e:	84 8b       	std	Z+20, r24	; 0x14
   1a720:	b3 8a       	std	Z+19, r11	; 0x13
   1a722:	a2 8a       	std	Z+18, r10	; 0x12
   1a724:	2e 89       	ldd	r18, Y+22	; 0x16
   1a726:	3f 89       	ldd	r19, Y+23	; 0x17
   1a728:	31 8b       	std	Z+17, r19	; 0x11
   1a72a:	20 8b       	std	Z+16, r18	; 0x10
   1a72c:	88 8d       	ldd	r24, Y+24	; 0x18
   1a72e:	99 8d       	ldd	r25, Y+25	; 0x19
   1a730:	aa 8d       	ldd	r26, Y+26	; 0x1a
   1a732:	bb 8d       	ldd	r27, Y+27	; 0x1b
   1a734:	84 87       	std	Z+12, r24	; 0x0c
   1a736:	95 87       	std	Z+13, r25	; 0x0d
   1a738:	a6 87       	std	Z+14, r26	; 0x0e
   1a73a:	b7 87       	std	Z+15, r27	; 0x0f
   1a73c:	88 a1       	ldd	r24, Y+32	; 0x20
   1a73e:	99 a1       	ldd	r25, Y+33	; 0x21
   1a740:	aa a1       	ldd	r26, Y+34	; 0x22
   1a742:	bb a1       	ldd	r27, Y+35	; 0x23
   1a744:	80 87       	std	Z+8, r24	; 0x08
   1a746:	91 87       	std	Z+9, r25	; 0x09
   1a748:	a2 87       	std	Z+10, r26	; 0x0a
   1a74a:	b3 87       	std	Z+11, r27	; 0x0b
   1a74c:	97 82       	std	Z+7, r9	; 0x07
   1a74e:	86 82       	std	Z+6, r8	; 0x06
   1a750:	15 83       	std	Z+5, r17	; 0x05
   1a752:	04 83       	std	Z+4, r16	; 0x04
   1a754:	41 82       	std	Z+1, r4	; 0x01
   1a756:	52 82       	std	Z+2, r5	; 0x02
   1a758:	63 82       	std	Z+3, r6	; 0x03
   1a75a:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
            (long)bytes,
            warn,
            (int)LIF->DIR.SectorSize,
            lif_lifbcd2timestr(LIF->DIR.date));

        ++index;
   1a75e:	ff ef       	ldi	r31, 0xFF	; 255
   1a760:	2f 1a       	sub	r2, r31
   1a762:	3f 0a       	sbc	r3, r31
    }
   1a764:	4c cf       	rjmp	.-360    	; 0x1a5fe <lif_dir+0x100>

    printf("\n");
   1a766:	88 e8       	ldi	r24, 0x88	; 136
   1a768:	9a e3       	ldi	r25, 0x3A	; 58
   1a76a:	a0 e0       	ldi	r26, 0x00	; 0
   1a76c:	ed b7       	in	r30, 0x3d	; 61
   1a76e:	fe b7       	in	r31, 0x3e	; 62
   1a770:	81 83       	std	Z+1, r24	; 0x01
   1a772:	92 83       	std	Z+2, r25	; 0x02
   1a774:	a3 83       	std	Z+3, r26	; 0x03
   1a776:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    printf("%8ld Files\n", (long)LIF->files);
   1a77a:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a77c:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a77e:	84 8d       	ldd	r24, Z+28	; 0x1c
   1a780:	95 8d       	ldd	r25, Z+29	; 0x1d
   1a782:	09 2e       	mov	r0, r25
   1a784:	00 0c       	add	r0, r0
   1a786:	aa 0b       	sbc	r26, r26
   1a788:	bb 0b       	sbc	r27, r27
   1a78a:	ed b7       	in	r30, 0x3d	; 61
   1a78c:	fe b7       	in	r31, 0x3e	; 62
   1a78e:	84 83       	std	Z+4, r24	; 0x04
   1a790:	95 83       	std	Z+5, r25	; 0x05
   1a792:	a6 83       	std	Z+6, r26	; 0x06
   1a794:	b7 83       	std	Z+7, r27	; 0x07
   1a796:	8c e7       	ldi	r24, 0x7C	; 124
   1a798:	9a e3       	ldi	r25, 0x3A	; 58
   1a79a:	a0 e0       	ldi	r26, 0x00	; 0
   1a79c:	81 83       	std	Z+1, r24	; 0x01
   1a79e:	92 83       	std	Z+2, r25	; 0x02
   1a7a0:	a3 83       	std	Z+3, r26	; 0x03
   1a7a2:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    printf("%8ld Purged\n", (long)LIF->purged);
   1a7a6:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a7a8:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a7aa:	86 8d       	ldd	r24, Z+30	; 0x1e
   1a7ac:	97 8d       	ldd	r25, Z+31	; 0x1f
   1a7ae:	09 2e       	mov	r0, r25
   1a7b0:	00 0c       	add	r0, r0
   1a7b2:	aa 0b       	sbc	r26, r26
   1a7b4:	bb 0b       	sbc	r27, r27
   1a7b6:	ed b7       	in	r30, 0x3d	; 61
   1a7b8:	fe b7       	in	r31, 0x3e	; 62
   1a7ba:	84 83       	std	Z+4, r24	; 0x04
   1a7bc:	95 83       	std	Z+5, r25	; 0x05
   1a7be:	a6 83       	std	Z+6, r26	; 0x06
   1a7c0:	b7 83       	std	Z+7, r27	; 0x07
   1a7c2:	8f e6       	ldi	r24, 0x6F	; 111
   1a7c4:	9a e3       	ldi	r25, 0x3A	; 58
   1a7c6:	a0 e0       	ldi	r26, 0x00	; 0
   1a7c8:	81 83       	std	Z+1, r24	; 0x01
   1a7ca:	92 83       	std	Z+2, r25	; 0x02
   1a7cc:	a3 83       	std	Z+3, r26	; 0x03
   1a7ce:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    printf("%8ld Dir  start\n",   (long)LIF->VOL.DirStartSector);
   1a7d2:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a7d4:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a7d6:	85 a5       	ldd	r24, Z+45	; 0x2d
   1a7d8:	96 a5       	ldd	r25, Z+46	; 0x2e
   1a7da:	a7 a5       	ldd	r26, Z+47	; 0x2f
   1a7dc:	b0 a9       	ldd	r27, Z+48	; 0x30
   1a7de:	ed b7       	in	r30, 0x3d	; 61
   1a7e0:	fe b7       	in	r31, 0x3e	; 62
   1a7e2:	84 83       	std	Z+4, r24	; 0x04
   1a7e4:	95 83       	std	Z+5, r25	; 0x05
   1a7e6:	a6 83       	std	Z+6, r26	; 0x06
   1a7e8:	b7 83       	std	Z+7, r27	; 0x07
   1a7ea:	8e e5       	ldi	r24, 0x5E	; 94
   1a7ec:	9a e3       	ldi	r25, 0x3A	; 58
   1a7ee:	a0 e0       	ldi	r26, 0x00	; 0
   1a7f0:	81 83       	std	Z+1, r24	; 0x01
   1a7f2:	92 83       	std	Z+2, r25	; 0x02
   1a7f4:	a3 83       	std	Z+3, r26	; 0x03
   1a7f6:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    printf("%8ld Dir  sectors\n", (long)LIF->VOL.DirSectors);
   1a7fa:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a7fc:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a7fe:	85 a9       	ldd	r24, Z+53	; 0x35
   1a800:	96 a9       	ldd	r25, Z+54	; 0x36
   1a802:	a7 a9       	ldd	r26, Z+55	; 0x37
   1a804:	b0 ad       	ldd	r27, Z+56	; 0x38
   1a806:	ed b7       	in	r30, 0x3d	; 61
   1a808:	fe b7       	in	r31, 0x3e	; 62
   1a80a:	84 83       	std	Z+4, r24	; 0x04
   1a80c:	95 83       	std	Z+5, r25	; 0x05
   1a80e:	a6 83       	std	Z+6, r26	; 0x06
   1a810:	b7 83       	std	Z+7, r27	; 0x07
   1a812:	8b e4       	ldi	r24, 0x4B	; 75
   1a814:	9a e3       	ldi	r25, 0x3A	; 58
   1a816:	a0 e0       	ldi	r26, 0x00	; 0
   1a818:	81 83       	std	Z+1, r24	; 0x01
   1a81a:	92 83       	std	Z+2, r25	; 0x02
   1a81c:	a3 83       	std	Z+3, r26	; 0x03
   1a81e:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
   1a822:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a824:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a826:	84 89       	ldd	r24, Z+20	; 0x14
   1a828:	95 89       	ldd	r25, Z+21	; 0x15
   1a82a:	a6 89       	ldd	r26, Z+22	; 0x16
   1a82c:	b7 89       	ldd	r27, Z+23	; 0x17
   1a82e:	ed b7       	in	r30, 0x3d	; 61
   1a830:	fe b7       	in	r31, 0x3e	; 62
   1a832:	84 83       	std	Z+4, r24	; 0x04
   1a834:	95 83       	std	Z+5, r25	; 0x05
   1a836:	a6 83       	std	Z+6, r26	; 0x06
   1a838:	b7 83       	std	Z+7, r27	; 0x07
   1a83a:	88 e3       	ldi	r24, 0x38	; 56
   1a83c:	9a e3       	ldi	r25, 0x3A	; 58
   1a83e:	a0 e0       	ldi	r26, 0x00	; 0
   1a840:	81 83       	std	Z+1, r24	; 0x01
   1a842:	92 83       	std	Z+2, r25	; 0x02
   1a844:	a3 83       	std	Z+3, r26	; 0x03
   1a846:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    printf("%8ld Free sectors\n", (long)LIF->freesectors);
   1a84a:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a84c:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a84e:	80 8d       	ldd	r24, Z+24	; 0x18
   1a850:	91 8d       	ldd	r25, Z+25	; 0x19
   1a852:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a854:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a856:	ed b7       	in	r30, 0x3d	; 61
   1a858:	fe b7       	in	r31, 0x3e	; 62
   1a85a:	84 83       	std	Z+4, r24	; 0x04
   1a85c:	95 83       	std	Z+5, r25	; 0x05
   1a85e:	a6 83       	std	Z+6, r26	; 0x06
   1a860:	b7 83       	std	Z+7, r27	; 0x07
   1a862:	85 e2       	ldi	r24, 0x25	; 37
   1a864:	9a e3       	ldi	r25, 0x3A	; 58
   1a866:	a0 e0       	ldi	r26, 0x00	; 0
   1a868:	81 83       	std	Z+1, r24	; 0x01
   1a86a:	92 83       	std	Z+2, r25	; 0x02
   1a86c:	a3 83       	std	Z+3, r26	; 0x03
   1a86e:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a872:	8e a5       	ldd	r24, Y+46	; 0x2e
   1a874:	9f a5       	ldd	r25, Y+47	; 0x2f
   1a876:	0e 94 c2 ca 	call	0x19584	; 0x19584 <lif_close_volume>
    printf("%8ld Dir  sectors\n", (long)LIF->VOL.DirSectors);
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
    printf("%8ld Free sectors\n", (long)LIF->freesectors);

    lif_closedir(LIF);
}
   1a87a:	af 96       	adiw	r28, 0x2f	; 47
   1a87c:	0f b6       	in	r0, 0x3f	; 63
   1a87e:	f8 94       	cli
   1a880:	de bf       	out	0x3e, r29	; 62
   1a882:	0f be       	out	0x3f, r0	; 63
   1a884:	cd bf       	out	0x3d, r28	; 61
   1a886:	df 91       	pop	r29
   1a888:	cf 91       	pop	r28
   1a88a:	1f 91       	pop	r17
   1a88c:	0f 91       	pop	r16
   1a88e:	ef 90       	pop	r14
   1a890:	df 90       	pop	r13
   1a892:	cf 90       	pop	r12
   1a894:	bf 90       	pop	r11
   1a896:	af 90       	pop	r10
   1a898:	9f 90       	pop	r9
   1a89a:	8f 90       	pop	r8
   1a89c:	6f 90       	pop	r6
   1a89e:	5f 90       	pop	r5
   1a8a0:	4f 90       	pop	r4
   1a8a2:	3f 90       	pop	r3
   1a8a4:	2f 90       	pop	r2
   1a8a6:	08 95       	ret

0001a8a8 <lif_find_file>:
/// @param[in] *LIF: directory pointer
/// @param[in] liflabel: File name in LIF image
/// @return Directory index of record
MEMSPACE
int lif_find_file(lif_t *LIF, char *liflabel)
{
   1a8a8:	a5 e0       	ldi	r26, 0x05	; 5
   1a8aa:	b0 e0       	ldi	r27, 0x00	; 0
   1a8ac:	ea e5       	ldi	r30, 0x5A	; 90
   1a8ae:	f4 ed       	ldi	r31, 0xD4	; 212
   1a8b0:	0c 94 15 e7 	jmp	0x1ce2a	; 0x1ce2a <__prologue_saves__+0x10>
   1a8b4:	7c 01       	movw	r14, r24
   1a8b6:	eb 01       	movw	r28, r22
    int index;

    if( !lif_checkname(liflabel) )
   1a8b8:	cb 01       	movw	r24, r22
   1a8ba:	0e 94 11 c3 	call	0x18622	; 0x18622 <lif_checkname>
   1a8be:	89 2b       	or	r24, r25
   1a8c0:	69 f4       	brne	.+26     	; 0x1a8dc <lif_find_file+0x34>
    {
        if(debuglevel & LIF_DEBUG)
   1a8c2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a8c6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a8ca:	92 ff       	sbrs	r25, 2
   1a8cc:	48 c0       	rjmp	.+144    	; 0x1a95e <lif_find_file+0xb6>
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
   1a8ce:	ed b7       	in	r30, 0x3d	; 61
   1a8d0:	fe b7       	in	r31, 0x3e	; 62
   1a8d2:	d5 83       	std	Z+5, r29	; 0x05
   1a8d4:	c4 83       	std	Z+4, r28	; 0x04
   1a8d6:	8e ef       	ldi	r24, 0xFE	; 254
   1a8d8:	99 e3       	ldi	r25, 0x39	; 57
   1a8da:	15 c0       	rjmp	.+42     	; 0x1a906 <lif_find_file+0x5e>
        return(-1);
    }
    if(strlen(liflabel) > 10)
   1a8dc:	fe 01       	movw	r30, r28
   1a8de:	01 90       	ld	r0, Z+
   1a8e0:	00 20       	and	r0, r0
   1a8e2:	e9 f7       	brne	.-6      	; 0x1a8de <lif_find_file+0x36>
   1a8e4:	31 97       	sbiw	r30, 0x01	; 1
   1a8e6:	ec 1b       	sub	r30, r28
   1a8e8:	fd 0b       	sbc	r31, r29
   1a8ea:	3b 97       	sbiw	r30, 0x0b	; 11
   1a8ec:	98 f0       	brcs	.+38     	; 0x1a914 <lif_find_file+0x6c>
    {
        if(debuglevel & LIF_DEBUG)
   1a8ee:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a8f2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a8f6:	92 ff       	sbrs	r25, 2
   1a8f8:	32 c0       	rjmp	.+100    	; 0x1a95e <lif_find_file+0xb6>
            printf("lif_find_file:[%s] liflabel too big\n", liflabel);
   1a8fa:	ed b7       	in	r30, 0x3d	; 61
   1a8fc:	fe b7       	in	r31, 0x3e	; 62
   1a8fe:	d5 83       	std	Z+5, r29	; 0x05
   1a900:	c4 83       	std	Z+4, r28	; 0x04
   1a902:	89 ed       	ldi	r24, 0xD9	; 217
   1a904:	99 e3       	ldi	r25, 0x39	; 57
   1a906:	a0 e0       	ldi	r26, 0x00	; 0
   1a908:	81 83       	std	Z+1, r24	; 0x01
   1a90a:	92 83       	std	Z+2, r25	; 0x02
   1a90c:	a3 83       	std	Z+3, r26	; 0x03
   1a90e:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   1a912:	25 c0       	rjmp	.+74     	; 0x1a95e <lif_find_file+0xb6>
        return(-1);
    }

    if(LIF == NULL)
   1a914:	e1 14       	cp	r14, r1
   1a916:	f1 04       	cpc	r15, r1
   1a918:	11 f1       	breq	.+68     	; 0x1a95e <lif_find_file+0xb6>
   1a91a:	00 e0       	ldi	r16, 0x00	; 0
   1a91c:	10 e0       	ldi	r17, 0x00	; 0
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1a91e:	67 01       	movw	r12, r14
   1a920:	fa e5       	ldi	r31, 0x5A	; 90
   1a922:	cf 0e       	add	r12, r31
   1a924:	d1 1c       	adc	r13, r1
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a926:	57 01       	movw	r10, r14
   1a928:	2f e4       	ldi	r18, 0x4F	; 79
   1a92a:	a2 0e       	add	r10, r18
   1a92c:	b1 1c       	adc	r11, r1
        return(-1);

    index = 0;
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
   1a92e:	b8 01       	movw	r22, r16
   1a930:	c7 01       	movw	r24, r14
   1a932:	0e 94 50 cb 	call	0x196a0	; 0x196a0 <lif_readdirindex>
   1a936:	89 2b       	or	r24, r25
   1a938:	91 f0       	breq	.+36     	; 0x1a95e <lif_find_file+0xb6>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1a93a:	f6 01       	movw	r30, r12
   1a93c:	80 81       	ld	r24, Z
   1a93e:	91 81       	ldd	r25, Z+1	; 0x01
   1a940:	8f 3f       	cpi	r24, 0xFF	; 255
   1a942:	ff ef       	ldi	r31, 0xFF	; 255
   1a944:	9f 07       	cpc	r25, r31
   1a946:	59 f0       	breq	.+22     	; 0x1a95e <lif_find_file+0xb6>
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a948:	89 2b       	or	r24, r25
   1a94a:	31 f0       	breq	.+12     	; 0x1a958 <lif_find_file+0xb0>
   1a94c:	be 01       	movw	r22, r28
   1a94e:	c5 01       	movw	r24, r10
   1a950:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <strcasecmp>
   1a954:	89 2b       	or	r24, r25
   1a956:	31 f0       	breq	.+12     	; 0x1a964 <lif_find_file+0xbc>
            break;
        ++index;
   1a958:	0f 5f       	subi	r16, 0xFF	; 255
   1a95a:	1f 4f       	sbci	r17, 0xFF	; 255
   1a95c:	e8 cf       	rjmp	.-48     	; 0x1a92e <lif_find_file+0x86>

    if( !lif_checkname(liflabel) )
    {
        if(debuglevel & LIF_DEBUG)
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
        return(-1);
   1a95e:	8f ef       	ldi	r24, 0xFF	; 255
   1a960:	9f ef       	ldi	r25, 0xFF	; 255
   1a962:	01 c0       	rjmp	.+2      	; 0x1a966 <lif_find_file+0xbe>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a964:	c8 01       	movw	r24, r16
            break;
        ++index;
    }
    return(index);
}
   1a966:	cd b7       	in	r28, 0x3d	; 61
   1a968:	de b7       	in	r29, 0x3e	; 62
   1a96a:	25 96       	adiw	r28, 0x05	; 5
   1a96c:	ea e0       	ldi	r30, 0x0A	; 10
   1a96e:	0c 94 31 e7 	jmp	0x1ce62	; 0x1ce62 <__epilogue_restores__+0x10>

0001a972 <lif_e010_pad_sector>:
/// @param[in] offset: sector offset
/// @param[in] wbuf: E010 PAD data
/// @return size of E010 PAD data
MEMSPACE
int lif_e010_pad_sector(long offset, uint8_t *wbuf)
{
   1a972:	a5 e0       	ldi	r26, 0x05	; 5
   1a974:	b0 e0       	ldi	r27, 0x00	; 0
   1a976:	ef eb       	ldi	r30, 0xBF	; 191
   1a978:	f4 ed       	ldi	r31, 0xD4	; 212
   1a97a:	0c 94 17 e7 	jmp	0x1ce2e	; 0x1ce2e <__prologue_saves__+0x14>
   1a97e:	6b 01       	movw	r12, r22
   1a980:	7c 01       	movw	r14, r24
   1a982:	8a 01       	movw	r16, r20
    int ind;
    int pos,rem;

// Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
   1a984:	20 e0       	ldi	r18, 0x00	; 0
   1a986:	31 e0       	ldi	r19, 0x01	; 1
   1a988:	40 e0       	ldi	r20, 0x00	; 0
   1a98a:	50 e0       	ldi	r21, 0x00	; 0
   1a98c:	0e 94 c2 e6 	call	0x1cd84	; 0x1cd84 <__divmodsi4>
    if(!pos)
   1a990:	61 15       	cp	r22, r1
   1a992:	71 05       	cpc	r23, r1
   1a994:	e1 f1       	breq	.+120    	; 0x1aa0e <lif_e010_pad_sector+0x9c>
        return(0);

// Number of bytes free in this sector
    rem = (long)LIF_SECTOR_SIZE - (long)pos;
   1a996:	c0 e0       	ldi	r28, 0x00	; 0
   1a998:	d1 e0       	ldi	r29, 0x01	; 1
   1a99a:	c6 1b       	sub	r28, r22
   1a99c:	d7 0b       	sbc	r29, r23

// Bytes written to wbuf
    ind = 0;
// PAD
    wbuf[ind++] = 0xEF;
   1a99e:	f8 01       	movw	r30, r16
   1a9a0:	8f ee       	ldi	r24, 0xEF	; 239
   1a9a2:	81 93       	st	Z+, r24
    while(ind<rem)
        wbuf[ind++] = 0xff;
   1a9a4:	2f ef       	ldi	r18, 0xFF	; 255

// Bytes written to wbuf
    ind = 0;
// PAD
    wbuf[ind++] = 0xEF;
    while(ind<rem)
   1a9a6:	cf 01       	movw	r24, r30
   1a9a8:	80 1b       	sub	r24, r16
   1a9aa:	91 0b       	sbc	r25, r17
   1a9ac:	8c 17       	cp	r24, r28
   1a9ae:	9d 07       	cpc	r25, r29
   1a9b0:	14 f4       	brge	.+4      	; 0x1a9b6 <lif_e010_pad_sector+0x44>
        wbuf[ind++] = 0xff;
   1a9b2:	21 93       	st	Z+, r18
   1a9b4:	f8 cf       	rjmp	.-16     	; 0x1a9a6 <lif_e010_pad_sector+0x34>
   1a9b6:	1c 16       	cp	r1, r28
   1a9b8:	1d 06       	cpc	r1, r29
   1a9ba:	14 f0       	brlt	.+4      	; 0x1a9c0 <lif_e010_pad_sector+0x4e>
   1a9bc:	c1 e0       	ldi	r28, 0x01	; 1
   1a9be:	d0 e0       	ldi	r29, 0x00	; 0

    pos = (offset + (long) ind)  % (long) LIF_SECTOR_SIZE;
   1a9c0:	ce 01       	movw	r24, r28
   1a9c2:	0d 2e       	mov	r0, r29
   1a9c4:	00 0c       	add	r0, r0
   1a9c6:	aa 0b       	sbc	r26, r26
   1a9c8:	bb 0b       	sbc	r27, r27
   1a9ca:	bc 01       	movw	r22, r24
   1a9cc:	cd 01       	movw	r24, r26
   1a9ce:	6c 0d       	add	r22, r12
   1a9d0:	7d 1d       	adc	r23, r13
   1a9d2:	8e 1d       	adc	r24, r14
   1a9d4:	9f 1d       	adc	r25, r15
   1a9d6:	20 e0       	ldi	r18, 0x00	; 0
   1a9d8:	31 e0       	ldi	r19, 0x01	; 1
   1a9da:	40 e0       	ldi	r20, 0x00	; 0
   1a9dc:	50 e0       	ldi	r21, 0x00	; 0
   1a9de:	0e 94 c2 e6 	call	0x1cd84	; 0x1cd84 <__divmodsi4>
// NEW SECTOR
// Debugging make sure we are at sector boundry
    if(pos)
   1a9e2:	61 15       	cp	r22, r1
   1a9e4:	71 05       	cpc	r23, r1
   1a9e6:	b1 f0       	breq	.+44     	; 0x1aa14 <lif_e010_pad_sector+0xa2>
    {
        if(debuglevel & LIF_DEBUG)
   1a9e8:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1a9ec:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a9f0:	32 ff       	sbrs	r19, 2
   1a9f2:	12 c0       	rjmp	.+36     	; 0x1aa18 <lif_e010_pad_sector+0xa6>
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
   1a9f4:	ed b7       	in	r30, 0x3d	; 61
   1a9f6:	fe b7       	in	r31, 0x3e	; 62
   1a9f8:	75 83       	std	Z+5, r23	; 0x05
   1a9fa:	64 83       	std	Z+4, r22	; 0x04
   1a9fc:	80 ea       	ldi	r24, 0xA0	; 160
   1a9fe:	99 e3       	ldi	r25, 0x39	; 57
   1aa00:	a0 e0       	ldi	r26, 0x00	; 0
   1aa02:	81 83       	std	Z+1, r24	; 0x01
   1aa04:	92 83       	std	Z+2, r25	; 0x02
   1aa06:	a3 83       	std	Z+3, r26	; 0x03
   1aa08:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   1aa0c:	05 c0       	rjmp	.+10     	; 0x1aa18 <lif_e010_pad_sector+0xa6>
    int pos,rem;

// Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
    if(!pos)
        return(0);
   1aa0e:	80 e0       	ldi	r24, 0x00	; 0
   1aa10:	90 e0       	ldi	r25, 0x00	; 0
   1aa12:	04 c0       	rjmp	.+8      	; 0x1aa1c <lif_e010_pad_sector+0xaa>
   1aa14:	ce 01       	movw	r24, r28
   1aa16:	02 c0       	rjmp	.+4      	; 0x1aa1c <lif_e010_pad_sector+0xaa>
// Debugging make sure we are at sector boundry
    if(pos)
    {
        if(debuglevel & LIF_DEBUG)
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
        return(-1);
   1aa18:	8f ef       	ldi	r24, 0xFF	; 255
   1aa1a:	9f ef       	ldi	r25, 0xFF	; 255
    }
    return(ind);
}
   1aa1c:	cd b7       	in	r28, 0x3d	; 61
   1aa1e:	de b7       	in	r29, 0x3e	; 62
   1aa20:	25 96       	adiw	r28, 0x05	; 5
   1aa22:	e8 e0       	ldi	r30, 0x08	; 8
   1aa24:	0c 94 33 e7 	jmp	0x1ce66	; 0x1ce66 <__epilogue_restores__+0x14>

0001aa28 <lif_ascii_string_to_e010>:
/// @param[in] offset: E010 data sector offset, only used in formatting wbuf with headers
/// @param[in] wbuf: E010 data result
/// @return size of E010 data
MEMSPACE
int lif_ascii_string_to_e010(char *str, long offset, uint8_t *wbuf)
{
   1aa28:	a5 e0       	ldi	r26, 0x05	; 5
   1aa2a:	b0 e0       	ldi	r27, 0x00	; 0
   1aa2c:	ea e1       	ldi	r30, 0x1A	; 26
   1aa2e:	f5 ed       	ldi	r31, 0xD5	; 213
   1aa30:	0c 94 0d e7 	jmp	0x1ce1a	; 0x1ce1a <__prologue_saves__>
   1aa34:	ec 01       	movw	r28, r24
   1aa36:	4a 01       	movw	r8, r20
   1aa38:	5b 01       	movw	r10, r22
   1aa3a:	79 01       	movw	r14, r18
    int ind;
    int len;
    int pos,rem;

// String size
    len = strlen(str);
   1aa3c:	fc 01       	movw	r30, r24
   1aa3e:	01 90       	ld	r0, Z+
   1aa40:	00 20       	and	r0, r0
   1aa42:	e9 f7       	brne	.-6      	; 0x1aa3e <lif_ascii_string_to_e010+0x16>
   1aa44:	31 97       	sbiw	r30, 0x01	; 1
   1aa46:	6f 01       	movw	r12, r30
   1aa48:	c8 1a       	sub	r12, r24
   1aa4a:	d9 0a       	sbc	r13, r25
    ind = 0;

// Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1aa4c:	41 2c       	mov	r4, r1
   1aa4e:	51 2c       	mov	r5, r1
   1aa50:	32 01       	movw	r6, r4
   1aa52:	53 94       	inc	r5
   1aa54:	cb 01       	movw	r24, r22
   1aa56:	ba 01       	movw	r22, r20
   1aa58:	a3 01       	movw	r20, r6
   1aa5a:	92 01       	movw	r18, r4
   1aa5c:	0e 94 c2 e6 	call	0x1cd84	; 0x1cd84 <__divmodsi4>
   1aa60:	21 2c       	mov	r2, r1
   1aa62:	33 24       	eor	r3, r3
   1aa64:	33 94       	inc	r3
   1aa66:	c1 01       	movw	r24, r2
   1aa68:	86 1b       	sub	r24, r22
   1aa6a:	97 0b       	sbc	r25, r23

/// We ALWAYS pad a sector if:
///   There is no room for a 0xdf single header
///   - OR -
///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
   1aa6c:	86 30       	cpi	r24, 0x06	; 6
   1aa6e:	91 05       	cpc	r25, r1
   1aa70:	20 f0       	brcs	.+8      	; 0x1aa7a <lif_ascii_string_to_e010+0x52>
    ind = 0;

// Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1aa72:	1c 01       	movw	r2, r24

// String size
    len = strlen(str);

// Output buffer index
    ind = 0;
   1aa74:	00 e0       	ldi	r16, 0x00	; 0
   1aa76:	10 e0       	ldi	r17, 0x00	; 0
   1aa78:	17 c0       	rjmp	.+46     	; 0x1aaa8 <lif_ascii_string_to_e010+0x80>
///   There is no room for a 0xdf single header
///   - OR -
///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
    {
        ind = lif_e010_pad_sector(offset, wbuf);
   1aa7a:	a7 01       	movw	r20, r14
   1aa7c:	c5 01       	movw	r24, r10
   1aa7e:	b4 01       	movw	r22, r8
   1aa80:	78 df       	rcall	.-272    	; 0x1a972 <lif_e010_pad_sector>
   1aa82:	8c 01       	movw	r16, r24
        if(ind < 0)
   1aa84:	97 fd       	sbrc	r25, 7
   1aa86:	83 c0       	rjmp	.+262    	; 0x1ab8e <lif_ascii_string_to_e010+0x166>
            return(ind);

// Compute the current offset in this sector
        pos = ((offset + ind) % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
        rem = (long) LIF_SECTOR_SIZE - pos;
   1aa88:	09 2e       	mov	r0, r25
   1aa8a:	00 0c       	add	r0, r0
   1aa8c:	aa 0b       	sbc	r26, r26
   1aa8e:	bb 0b       	sbc	r27, r27
   1aa90:	bc 01       	movw	r22, r24
   1aa92:	cd 01       	movw	r24, r26
   1aa94:	68 0d       	add	r22, r8
   1aa96:	79 1d       	adc	r23, r9
   1aa98:	8a 1d       	adc	r24, r10
   1aa9a:	9b 1d       	adc	r25, r11
   1aa9c:	a3 01       	movw	r20, r6
   1aa9e:	92 01       	movw	r18, r4
   1aaa0:	0e 94 c2 e6 	call	0x1cd84	; 0x1cd84 <__divmodsi4>
   1aaa4:	26 1a       	sub	r2, r22
   1aaa6:	37 0a       	sbc	r3, r23
   1aaa8:	f7 01       	movw	r30, r14
   1aaaa:	e0 0f       	add	r30, r16
   1aaac:	f1 1f       	adc	r31, r17
   1aaae:	0d 5f       	subi	r16, 0xFD	; 253
   1aab0:	1f 4f       	sbci	r17, 0xFF	; 255
    }

// Note: IMPORTANT we have >= 6 bytes!!!

// Do not have to split, there is enough room
    if(rem >= (3 + len))
   1aab2:	c6 01       	movw	r24, r12
   1aab4:	02 96       	adiw	r24, 0x02	; 2
   1aab6:	82 15       	cp	r24, r2
   1aab8:	93 05       	cpc	r25, r3
   1aaba:	84 f4       	brge	.+32     	; 0x1aadc <lif_ascii_string_to_e010+0xb4>
    {

// Write string in new sector
// The full string + header will fit
        wbuf[ind++] = 0xDF;
   1aabc:	8f ed       	ldi	r24, 0xDF	; 223
   1aabe:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1aac0:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >> 8) & 0xff;
   1aac2:	d2 82       	std	Z+2, r13	; 0x02
   1aac4:	f7 01       	movw	r30, r14
   1aac6:	e0 0f       	add	r30, r16
   1aac8:	f1 1f       	adc	r31, r17
   1aaca:	cf 01       	movw	r24, r30
   1aacc:	8e 19       	sub	r24, r14
   1aace:	9f 09       	sbc	r25, r15
// Write string
        while(*str)
   1aad0:	29 91       	ld	r18, Y+
   1aad2:	22 23       	and	r18, r18
   1aad4:	09 f4       	brne	.+2      	; 0x1aad8 <lif_ascii_string_to_e010+0xb0>
   1aad6:	5b c0       	rjmp	.+182    	; 0x1ab8e <lif_ascii_string_to_e010+0x166>
            wbuf[ind++] = *str++;
   1aad8:	21 93       	st	Z+, r18
   1aada:	f7 cf       	rjmp	.-18     	; 0x1aaca <lif_ascii_string_to_e010+0xa2>

// CURRENT SECTOR
// String spans a sector , so split the string

// 1st Split string header
        wbuf[ind++] = 0xCF;
   1aadc:	8f ec       	ldi	r24, 0xCF	; 207
   1aade:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1aae0:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >>8) & 0xff;
   1aae2:	d2 82       	std	Z+2, r13	; 0x02
   1aae4:	d7 01       	movw	r26, r14
   1aae6:	a0 0f       	add	r26, r16
   1aae8:	b1 1f       	adc	r27, r17
// Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1aaea:	fe 01       	movw	r30, r28
   1aaec:	81 91       	ld	r24, Z+
   1aaee:	81 11       	cpse	r24, r1
   1aaf0:	0e c0       	rjmp	.+28     	; 0x1ab0e <lif_ascii_string_to_e010+0xe6>
            wbuf[ind++] = *str++;

// NEW SECTOR
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
   1aaf2:	c8 01       	movw	r24, r16
   1aaf4:	01 2e       	mov	r0, r17
   1aaf6:	00 0c       	add	r0, r0
   1aaf8:	aa 0b       	sbc	r26, r26
   1aafa:	bb 0b       	sbc	r27, r27
   1aafc:	bc 01       	movw	r22, r24
   1aafe:	cd 01       	movw	r24, r26
   1ab00:	68 0d       	add	r22, r8
   1ab02:	79 1d       	adc	r23, r9
   1ab04:	8a 1d       	adc	r24, r10
   1ab06:	9b 1d       	adc	r25, r11
   1ab08:	61 11       	cpse	r22, r1
   1ab0a:	09 c0       	rjmp	.+18     	; 0x1ab1e <lif_ascii_string_to_e010+0xf6>
   1ab0c:	21 c0       	rjmp	.+66     	; 0x1ab50 <lif_ascii_string_to_e010+0x128>
// 1st Split string header
        wbuf[ind++] = 0xCF;
        wbuf[ind++] = len & 0xff;
        wbuf[ind++] = (len >>8) & 0xff;
// Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1ab0e:	02 15       	cp	r16, r2
   1ab10:	13 05       	cpc	r17, r3
   1ab12:	7c f7       	brge	.-34     	; 0x1aaf2 <lif_ascii_string_to_e010+0xca>
            wbuf[ind++] = *str++;
   1ab14:	0f 5f       	subi	r16, 0xFF	; 255
   1ab16:	1f 4f       	sbci	r17, 0xFF	; 255
   1ab18:	8d 93       	st	X+, r24
   1ab1a:	ef 01       	movw	r28, r30
   1ab1c:	e6 cf       	rjmp	.-52     	; 0x1aaea <lif_ascii_string_to_e010+0xc2>

// NEW SECTOR
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & LIF_DEBUG)
   1ab1e:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1ab22:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1ab26:	32 ff       	sbrs	r19, 2
   1ab28:	30 c0       	rjmp	.+96     	; 0x1ab8a <lif_ascii_string_to_e010+0x162>
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
   1ab2a:	20 e0       	ldi	r18, 0x00	; 0
   1ab2c:	31 e0       	ldi	r19, 0x01	; 1
   1ab2e:	40 e0       	ldi	r20, 0x00	; 0
   1ab30:	50 e0       	ldi	r21, 0x00	; 0
   1ab32:	0e 94 c2 e6 	call	0x1cd84	; 0x1cd84 <__divmodsi4>
   1ab36:	ed b7       	in	r30, 0x3d	; 61
   1ab38:	fe b7       	in	r31, 0x3e	; 62
   1ab3a:	75 83       	std	Z+5, r23	; 0x05
   1ab3c:	64 83       	std	Z+4, r22	; 0x04
   1ab3e:	8c e7       	ldi	r24, 0x7C	; 124
   1ab40:	99 e3       	ldi	r25, 0x39	; 57
   1ab42:	a0 e0       	ldi	r26, 0x00	; 0
   1ab44:	81 83       	std	Z+1, r24	; 0x01
   1ab46:	92 83       	std	Z+2, r25	; 0x02
   1ab48:	a3 83       	std	Z+3, r26	; 0x03
   1ab4a:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   1ab4e:	1d c0       	rjmp	.+58     	; 0x1ab8a <lif_ascii_string_to_e010+0x162>
            return(-1);
        }

// Update remining string length
        len = strlen(str);
   1ab50:	fe 01       	movw	r30, r28
   1ab52:	01 90       	ld	r0, Z+
   1ab54:	00 20       	and	r0, r0
   1ab56:	e9 f7       	brne	.-6      	; 0x1ab52 <lif_ascii_string_to_e010+0x12a>
   1ab58:	31 97       	sbiw	r30, 0x01	; 1
   1ab5a:	9f 01       	movw	r18, r30
   1ab5c:	2c 1b       	sub	r18, r28
   1ab5e:	3d 0b       	sbc	r19, r29
// 2nd Split string header
        wbuf[ind++] = 0x6F;
   1ab60:	d7 01       	movw	r26, r14
   1ab62:	a0 0f       	add	r26, r16
   1ab64:	b1 1f       	adc	r27, r17
   1ab66:	8f e6       	ldi	r24, 0x6F	; 111
   1ab68:	8c 93       	st	X, r24
        wbuf[ind++] = (len & 0xff);
   1ab6a:	fd 01       	movw	r30, r26
   1ab6c:	21 83       	std	Z+1, r18	; 0x01
        wbuf[ind++] = (len>>8) & 0xff;
   1ab6e:	32 83       	std	Z+2, r19	; 0x02
   1ab70:	0d 5f       	subi	r16, 0xFD	; 253
   1ab72:	1f 4f       	sbci	r17, 0xFF	; 255
   1ab74:	f7 01       	movw	r30, r14
   1ab76:	e0 0f       	add	r30, r16
   1ab78:	f1 1f       	adc	r31, r17
   1ab7a:	cf 01       	movw	r24, r30
   1ab7c:	8e 19       	sub	r24, r14
   1ab7e:	9f 09       	sbc	r25, r15
// Write string
        while(*str)
   1ab80:	29 91       	ld	r18, Y+
   1ab82:	22 23       	and	r18, r18
   1ab84:	21 f0       	breq	.+8      	; 0x1ab8e <lif_ascii_string_to_e010+0x166>
            wbuf[ind++] = *str++;
   1ab86:	21 93       	st	Z+, r18
   1ab88:	f8 cf       	rjmp	.-16     	; 0x1ab7a <lif_ascii_string_to_e010+0x152>
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & LIF_DEBUG)
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
            return(-1);
   1ab8a:	8f ef       	ldi	r24, 0xFF	; 255
   1ab8c:	9f ef       	ldi	r25, 0xFF	; 255
        while(*str)
            wbuf[ind++] = *str++;
    }

    return(ind);
}
   1ab8e:	cd b7       	in	r28, 0x3d	; 61
   1ab90:	de b7       	in	r29, 0x3e	; 62
   1ab92:	25 96       	adiw	r28, 0x05	; 5
   1ab94:	e2 e1       	ldi	r30, 0x12	; 18
   1ab96:	0c 94 29 e7 	jmp	0x1ce52	; 0x1ce52 <__epilogue_restores__>

0001ab9a <lif_add_ascii_file_as_e010_wrapper>:
/// @param[in] userfile: User ASCII file source
/// @param[in] *LIF: Where to write file if set (not NULL)
/// @return size of formatted result
MEMSPACE
long lif_add_ascii_file_as_e010_wrapper(lif_t *LIF, uint32_t offset, char *username)
{
   1ab9a:	ad e0       	ldi	r26, 0x0D	; 13
   1ab9c:	b3 e0       	ldi	r27, 0x03	; 3
   1ab9e:	e3 ed       	ldi	r30, 0xD3	; 211
   1aba0:	f5 ed       	ldi	r31, 0xD5	; 213
   1aba2:	0c 94 0d e7 	jmp	0x1ce1a	; 0x1ce1a <__prologue_saves__>
   1aba6:	5c 01       	movw	r10, r24
   1aba8:	2a 01       	movw	r4, r20
   1abaa:	3b 01       	movw	r6, r22
   1abac:	c9 01       	movw	r24, r18
// strings are limited to less then this
    char str[LIF_SECTOR_SIZE+1];
// output buffer must be larger then a single sectors because of either headers or padding
    uint8_t obuf[LIF_SECTOR_SIZE*2];

    fi = lif_open(username, "rb");
   1abae:	6e ef       	ldi	r22, 0xFE	; 254
   1abb0:	78 e0       	ldi	r23, 0x08	; 8
   1abb2:	0e 94 72 c1 	call	0x182e4	; 0x182e4 <lif_open>
   1abb6:	c7 5f       	subi	r28, 0xF7	; 247
   1abb8:	dc 4f       	sbci	r29, 0xFC	; 252
   1abba:	99 83       	std	Y+1, r25	; 0x01
   1abbc:	88 83       	st	Y, r24
   1abbe:	c9 50       	subi	r28, 0x09	; 9
   1abc0:	d3 40       	sbci	r29, 0x03	; 3
    if(fi == NULL)
   1abc2:	89 2b       	or	r24, r25
   1abc4:	09 f4       	brne	.+2      	; 0x1abc8 <lif_add_ascii_file_as_e010_wrapper+0x2e>
   1abc6:	63 c0       	rjmp	.+198    	; 0x1ac8e <lif_add_ascii_file_as_e010_wrapper+0xf4>
   1abc8:	81 2c       	mov	r8, r1
   1abca:	91 2c       	mov	r9, r1
   1abcc:	c1 2c       	mov	r12, r1
   1abce:	d1 2c       	mov	r13, r1
   1abd0:	76 01       	movw	r14, r12

        if(count > 256)
        {
            count = 0;
            if(LIF)
                printf("\tWrote: %8ld\r", (long)bytes);
   1abd2:	8e e6       	ldi	r24, 0x6E	; 110
   1abd4:	99 e3       	ldi	r25, 0x39	; 57
   1abd6:	9c 01       	movw	r18, r24
   1abd8:	40 e0       	ldi	r20, 0x00	; 0
   1abda:	c5 5f       	subi	r28, 0xF5	; 245
   1abdc:	dc 4f       	sbci	r29, 0xFC	; 252
   1abde:	28 83       	st	Y, r18
   1abe0:	39 83       	std	Y+1, r19	; 0x01
   1abe2:	4a 83       	std	Y+2, r20	; 0x02
   1abe4:	cb 50       	subi	r28, 0x0B	; 11
   1abe6:	d3 40       	sbci	r29, 0x03	; 3
   1abe8:	14 c0       	rjmp	.+40     	; 0x1ac12 <lif_add_ascii_file_as_e010_wrapper+0x78>
                fclose(fi);
                return(-1);
            }
        }

        offset += size;
   1abea:	c1 01       	movw	r24, r2
   1abec:	03 2c       	mov	r0, r3
   1abee:	00 0c       	add	r0, r0
   1abf0:	aa 0b       	sbc	r26, r26
   1abf2:	bb 0b       	sbc	r27, r27
   1abf4:	48 0e       	add	r4, r24
   1abf6:	59 1e       	adc	r5, r25
   1abf8:	6a 1e       	adc	r6, r26
   1abfa:	7b 1e       	adc	r7, r27
        bytes += size;
   1abfc:	c8 0e       	add	r12, r24
   1abfe:	d9 1e       	adc	r13, r25
   1ac00:	ea 1e       	adc	r14, r26
   1ac02:	fb 1e       	adc	r15, r27
        count += size;
   1ac04:	82 0c       	add	r8, r2
   1ac06:	93 1c       	adc	r9, r3

        if(count > 256)
   1ac08:	31 e0       	ldi	r19, 0x01	; 1
   1ac0a:	83 16       	cp	r8, r19
   1ac0c:	93 06       	cpc	r9, r19
   1ac0e:	0c f0       	brlt	.+2      	; 0x1ac12 <lif_add_ascii_file_as_e010_wrapper+0x78>
   1ac10:	43 c0       	rjmp	.+134    	; 0x1ac98 <lif_add_ascii_file_as_e010_wrapper+0xfe>
    bytes = 0;
    count = 0;

// Read user file and write LIF records
// reserve 3 + LIF header bytes + 1 (EOS)
    while( fgets((char *)str,(int)sizeof(str) - 4, fi) != NULL )
   1ac12:	c7 5f       	subi	r28, 0xF7	; 247
   1ac14:	dc 4f       	sbci	r29, 0xFC	; 252
   1ac16:	48 81       	ld	r20, Y
   1ac18:	59 81       	ldd	r21, Y+1	; 0x01
   1ac1a:	c9 50       	subi	r28, 0x09	; 9
   1ac1c:	d3 40       	sbci	r29, 0x03	; 3
   1ac1e:	6d ef       	ldi	r22, 0xFD	; 253
   1ac20:	70 e0       	ldi	r23, 0x00	; 0
   1ac22:	ce 01       	movw	r24, r28
   1ac24:	88 5f       	subi	r24, 0xF8	; 248
   1ac26:	9d 4f       	sbci	r25, 0xFD	; 253
   1ac28:	0e 94 83 76 	call	0xed06	; 0xed06 <fgets>
   1ac2c:	89 2b       	or	r24, r25
   1ac2e:	09 f4       	brne	.+2      	; 0x1ac32 <lif_add_ascii_file_as_e010_wrapper+0x98>
   1ac30:	4b c0       	rjmp	.+150    	; 0x1acc8 <lif_add_ascii_file_as_e010_wrapper+0x12e>
    {
        trim_tail((char *)str);
   1ac32:	ce 01       	movw	r24, r28
   1ac34:	88 5f       	subi	r24, 0xF8	; 248
   1ac36:	9d 4f       	sbci	r25, 0xFD	; 253
   1ac38:	0e 94 4b 32 	call	0x6496	; 0x6496 <trim_tail>

        strcat((char *)str,"\r");                 // HP85 lines end with "\r"
   1ac3c:	6e e4       	ldi	r22, 0x4E	; 78
   1ac3e:	76 e1       	ldi	r23, 0x16	; 22
   1ac40:	ce 01       	movw	r24, r28
   1ac42:	88 5f       	subi	r24, 0xF8	; 248
   1ac44:	9d 4f       	sbci	r25, 0xFD	; 253
   1ac46:	0e 94 8e 31 	call	0x631c	; 0x631c <strcat>

        size = lif_ascii_string_to_e010(str, offset, obuf);
   1ac4a:	9e 01       	movw	r18, r28
   1ac4c:	28 5f       	subi	r18, 0xF8	; 248
   1ac4e:	3f 4f       	sbci	r19, 0xFF	; 255
   1ac50:	b3 01       	movw	r22, r6
   1ac52:	a2 01       	movw	r20, r4
   1ac54:	ce 01       	movw	r24, r28
   1ac56:	88 5f       	subi	r24, 0xF8	; 248
   1ac58:	9d 4f       	sbci	r25, 0xFD	; 253
   1ac5a:	e6 de       	rcall	.-564    	; 0x1aa28 <lif_ascii_string_to_e010>
   1ac5c:	1c 01       	movw	r2, r24
// Write string
// Now Write string
        if(LIF)
   1ac5e:	a1 14       	cp	r10, r1
   1ac60:	b1 04       	cpc	r11, r1
   1ac62:	19 f2       	breq	.-122    	; 0x1abea <lif_add_ascii_file_as_e010_wrapper+0x50>
        {
            len = lif_write(LIF, obuf, offset, size);
   1ac64:	8c 01       	movw	r16, r24
   1ac66:	a3 01       	movw	r20, r6
   1ac68:	92 01       	movw	r18, r4
   1ac6a:	be 01       	movw	r22, r28
   1ac6c:	68 5f       	subi	r22, 0xF8	; 248
   1ac6e:	7f 4f       	sbci	r23, 0xFF	; 255
   1ac70:	c5 01       	movw	r24, r10
   1ac72:	0e 94 49 c2 	call	0x18492	; 0x18492 <lif_write>
            if(len < size)
   1ac76:	82 15       	cp	r24, r2
   1ac78:	93 05       	cpc	r25, r3
   1ac7a:	0c f0       	brlt	.+2      	; 0x1ac7e <lif_add_ascii_file_as_e010_wrapper+0xe4>
   1ac7c:	b6 cf       	rjmp	.-148    	; 0x1abea <lif_add_ascii_file_as_e010_wrapper+0x50>
            {
                fclose(fi);
   1ac7e:	c7 5f       	subi	r28, 0xF7	; 247
   1ac80:	dc 4f       	sbci	r29, 0xFC	; 252
   1ac82:	88 81       	ld	r24, Y
   1ac84:	99 81       	ldd	r25, Y+1	; 0x01
   1ac86:	c9 50       	subi	r28, 0x09	; 9
   1ac88:	d3 40       	sbci	r29, 0x03	; 3
   1ac8a:	0e 94 15 7d 	call	0xfa2a	; 0xfa2a <fclose>
                return(-1);
   1ac8e:	6f ef       	ldi	r22, 0xFF	; 255
   1ac90:	7f ef       	ldi	r23, 0xFF	; 255
   1ac92:	8f ef       	ldi	r24, 0xFF	; 255
   1ac94:	9f ef       	ldi	r25, 0xFF	; 255
   1ac96:	84 c0       	rjmp	.+264    	; 0x1ada0 <lif_add_ascii_file_as_e010_wrapper+0x206>
        count += size;

        if(count > 256)
        {
            count = 0;
            if(LIF)
   1ac98:	a1 14       	cp	r10, r1
   1ac9a:	b1 04       	cpc	r11, r1
   1ac9c:	91 f0       	breq	.+36     	; 0x1acc2 <lif_add_ascii_file_as_e010_wrapper+0x128>
                printf("\tWrote: %8ld\r", (long)bytes);
   1ac9e:	ed b7       	in	r30, 0x3d	; 61
   1aca0:	fe b7       	in	r31, 0x3e	; 62
   1aca2:	c4 82       	std	Z+4, r12	; 0x04
   1aca4:	d5 82       	std	Z+5, r13	; 0x05
   1aca6:	e6 82       	std	Z+6, r14	; 0x06
   1aca8:	f7 82       	std	Z+7, r15	; 0x07
   1acaa:	c5 5f       	subi	r28, 0xF5	; 245
   1acac:	dc 4f       	sbci	r29, 0xFC	; 252
   1acae:	28 81       	ld	r18, Y
   1acb0:	39 81       	ldd	r19, Y+1	; 0x01
   1acb2:	4a 81       	ldd	r20, Y+2	; 0x02
   1acb4:	cb 50       	subi	r28, 0x0B	; 11
   1acb6:	d3 40       	sbci	r29, 0x03	; 3
   1acb8:	21 83       	std	Z+1, r18	; 0x01
   1acba:	32 83       	std	Z+2, r19	; 0x02
   1acbc:	43 83       	std	Z+3, r20	; 0x03
   1acbe:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
        bytes += size;
        count += size;

        if(count > 256)
        {
            count = 0;
   1acc2:	81 2c       	mov	r8, r1
   1acc4:	91 2c       	mov	r9, r1
   1acc6:	a5 cf       	rjmp	.-182    	; 0x1ac12 <lif_add_ascii_file_as_e010_wrapper+0x78>
            if(LIF)
                printf("\tWrote: %8ld\r", (long)bytes);
        }
    }

    fclose(fi);
   1acc8:	c7 5f       	subi	r28, 0xF7	; 247
   1acca:	dc 4f       	sbci	r29, 0xFC	; 252
   1accc:	88 81       	ld	r24, Y
   1acce:	99 81       	ldd	r25, Y+1	; 0x01
   1acd0:	c9 50       	subi	r28, 0x09	; 9
   1acd2:	d3 40       	sbci	r29, 0x03	; 3
   1acd4:	0e 94 15 7d 	call	0xfa2a	; 0xfa2a <fclose>

// Write EOF
    str[0] = 0;
   1acd8:	c8 5f       	subi	r28, 0xF8	; 248
   1acda:	dd 4f       	sbci	r29, 0xFD	; 253
   1acdc:	18 82       	st	Y, r1
   1acde:	c8 50       	subi	r28, 0x08	; 8
   1ace0:	d2 40       	sbci	r29, 0x02	; 2
// We only want to return the count of bytes in the file NOT the padding at the end
// Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);
   1ace2:	9e 01       	movw	r18, r28
   1ace4:	28 5f       	subi	r18, 0xF8	; 248
   1ace6:	3f 4f       	sbci	r19, 0xFF	; 255
   1ace8:	b3 01       	movw	r22, r6
   1acea:	a2 01       	movw	r20, r4
   1acec:	ce 01       	movw	r24, r28
   1acee:	88 5f       	subi	r24, 0xF8	; 248
   1acf0:	9d 4f       	sbci	r25, 0xFD	; 253
   1acf2:	9a de       	rcall	.-716    	; 0x1aa28 <lif_ascii_string_to_e010>
   1acf4:	4c 01       	movw	r8, r24

    if(LIF)
   1acf6:	a1 14       	cp	r10, r1
   1acf8:	b1 04       	cpc	r11, r1
   1acfa:	d1 f4       	brne	.+52     	; 0x1ad30 <lif_add_ascii_file_as_e010_wrapper+0x196>
            return(-1);

    }

    offset += size;
    bytes += size;
   1acfc:	c4 01       	movw	r24, r8
   1acfe:	09 2c       	mov	r0, r9
   1ad00:	00 0c       	add	r0, r0
   1ad02:	aa 0b       	sbc	r26, r26
   1ad04:	bb 0b       	sbc	r27, r27
   1ad06:	c8 0e       	add	r12, r24
   1ad08:	d9 1e       	adc	r13, r25
   1ad0a:	ea 1e       	adc	r14, r26
   1ad0c:	fb 1e       	adc	r15, r27

// PAD
    size = lif_e010_pad_sector(offset, obuf);
   1ad0e:	12 01       	movw	r2, r4
   1ad10:	23 01       	movw	r4, r6
   1ad12:	28 0e       	add	r2, r24
   1ad14:	39 1e       	adc	r3, r25
   1ad16:	4a 1e       	adc	r4, r26
   1ad18:	5b 1e       	adc	r5, r27
   1ad1a:	ae 01       	movw	r20, r28
   1ad1c:	48 5f       	subi	r20, 0xF8	; 248
   1ad1e:	5f 4f       	sbci	r21, 0xFF	; 255
   1ad20:	c2 01       	movw	r24, r4
   1ad22:	b1 01       	movw	r22, r2
   1ad24:	26 de       	rcall	.-948    	; 0x1a972 <lif_e010_pad_sector>
   1ad26:	3c 01       	movw	r6, r24
    if(LIF)
   1ad28:	a1 14       	cp	r10, r1
   1ad2a:	b1 04       	cpc	r11, r1
   1ad2c:	e1 f4       	brne	.+56     	; 0x1ad66 <lif_add_ascii_file_as_e010_wrapper+0x1cc>
   1ad2e:	36 c0       	rjmp	.+108    	; 0x1ad9c <lif_add_ascii_file_as_e010_wrapper+0x202>
// Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);

    if(LIF)
    {
        printf("\tWrote: %8ld\r", (long)bytes);
   1ad30:	ed b7       	in	r30, 0x3d	; 61
   1ad32:	fe b7       	in	r31, 0x3e	; 62
   1ad34:	c4 82       	std	Z+4, r12	; 0x04
   1ad36:	d5 82       	std	Z+5, r13	; 0x05
   1ad38:	e6 82       	std	Z+6, r14	; 0x06
   1ad3a:	f7 82       	std	Z+7, r15	; 0x07
   1ad3c:	80 e6       	ldi	r24, 0x60	; 96
   1ad3e:	99 e3       	ldi	r25, 0x39	; 57
   1ad40:	a0 e0       	ldi	r26, 0x00	; 0
   1ad42:	81 83       	std	Z+1, r24	; 0x01
   1ad44:	92 83       	std	Z+2, r25	; 0x02
   1ad46:	a3 83       	std	Z+3, r26	; 0x03
   1ad48:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
        len = lif_write(LIF, obuf, offset, size);
   1ad4c:	84 01       	movw	r16, r8
   1ad4e:	a3 01       	movw	r20, r6
   1ad50:	92 01       	movw	r18, r4
   1ad52:	be 01       	movw	r22, r28
   1ad54:	68 5f       	subi	r22, 0xF8	; 248
   1ad56:	7f 4f       	sbci	r23, 0xFF	; 255
   1ad58:	c5 01       	movw	r24, r10
   1ad5a:	0e 94 49 c2 	call	0x18492	; 0x18492 <lif_write>
        if(len < size)
   1ad5e:	88 15       	cp	r24, r8
   1ad60:	99 05       	cpc	r25, r9
   1ad62:	64 f6       	brge	.-104    	; 0x1acfc <lif_add_ascii_file_as_e010_wrapper+0x162>
   1ad64:	94 cf       	rjmp	.-216    	; 0x1ac8e <lif_add_ascii_file_as_e010_wrapper+0xf4>

// PAD
    size = lif_e010_pad_sector(offset, obuf);
    if(LIF)
    {
        len = lif_write(LIF, obuf, offset, size);
   1ad66:	8c 01       	movw	r16, r24
   1ad68:	a2 01       	movw	r20, r4
   1ad6a:	91 01       	movw	r18, r2
   1ad6c:	be 01       	movw	r22, r28
   1ad6e:	68 5f       	subi	r22, 0xF8	; 248
   1ad70:	7f 4f       	sbci	r23, 0xFF	; 255
   1ad72:	c5 01       	movw	r24, r10
   1ad74:	0e 94 49 c2 	call	0x18492	; 0x18492 <lif_write>
        if(len < size)
   1ad78:	86 15       	cp	r24, r6
   1ad7a:	97 05       	cpc	r25, r7
   1ad7c:	0c f4       	brge	.+2      	; 0x1ad80 <lif_add_ascii_file_as_e010_wrapper+0x1e6>
   1ad7e:	87 cf       	rjmp	.-242    	; 0x1ac8e <lif_add_ascii_file_as_e010_wrapper+0xf4>
            return(-1);
    }

    if(LIF)
        printf("\tWrote: %8ld\r",(long)bytes);
   1ad80:	ed b7       	in	r30, 0x3d	; 61
   1ad82:	fe b7       	in	r31, 0x3e	; 62
   1ad84:	c4 82       	std	Z+4, r12	; 0x04
   1ad86:	d5 82       	std	Z+5, r13	; 0x05
   1ad88:	e6 82       	std	Z+6, r14	; 0x06
   1ad8a:	f7 82       	std	Z+7, r15	; 0x07
   1ad8c:	82 e5       	ldi	r24, 0x52	; 82
   1ad8e:	99 e3       	ldi	r25, 0x39	; 57
   1ad90:	a0 e0       	ldi	r26, 0x00	; 0
   1ad92:	81 83       	std	Z+1, r24	; 0x01
   1ad94:	92 83       	std	Z+2, r25	; 0x02
   1ad96:	a3 83       	std	Z+3, r26	; 0x03
   1ad98:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>

    return(bytes);
   1ad9c:	b6 01       	movw	r22, r12
   1ad9e:	c7 01       	movw	r24, r14
}
   1ada0:	c3 5f       	subi	r28, 0xF3	; 243
   1ada2:	dc 4f       	sbci	r29, 0xFC	; 252
   1ada4:	e2 e1       	ldi	r30, 0x12	; 18
   1ada6:	0c 94 29 e7 	jmp	0x1ce52	; 0x1ce52 <__epilogue_restores__>

0001adaa <lif_add_ascii_file_as_e010>:
/// @param[in] lifname: LIF file name
/// @param[in] userfile: userfile name
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_ascii_file_as_e010(char *lifimagename, char *lifname, char *userfile)
{
   1adaa:	ab e3       	ldi	r26, 0x3B	; 59
   1adac:	b0 e0       	ldi	r27, 0x00	; 0
   1adae:	eb ed       	ldi	r30, 0xDB	; 219
   1adb0:	f6 ed       	ldi	r31, 0xD6	; 214
   1adb2:	0c 94 0d e7 	jmp	0x1ce1a	; 0x1ce1a <__prologue_saves__>
   1adb6:	6c 01       	movw	r12, r24
   1adb8:	1b 01       	movw	r2, r22
   1adba:	7a 01       	movw	r14, r20
    long offset;
    int index;
    lif_t *LIF;
    stat_t st, *sp;

    if(!*lifimagename)
   1adbc:	fc 01       	movw	r30, r24
   1adbe:	80 81       	ld	r24, Z
   1adc0:	81 11       	cpse	r24, r1
   1adc2:	03 c0       	rjmp	.+6      	; 0x1adca <lif_add_ascii_file_as_e010+0x20>
    {
        printf("lif_add_ascii_file_as_e010: lifimagename is empty\n");
   1adc4:	8f e1       	ldi	r24, 0x1F	; 31
   1adc6:	99 e3       	ldi	r25, 0x39	; 57
   1adc8:	1a c0       	rjmp	.+52     	; 0x1adfe <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*lifname)
   1adca:	fb 01       	movw	r30, r22
   1adcc:	80 81       	ld	r24, Z
   1adce:	81 11       	cpse	r24, r1
   1add0:	03 c0       	rjmp	.+6      	; 0x1add8 <lif_add_ascii_file_as_e010+0x2e>
    {
        printf("lif_add_ascii_file_as_e010: lifname is empty\n");
   1add2:	81 ef       	ldi	r24, 0xF1	; 241
   1add4:	98 e3       	ldi	r25, 0x38	; 56
   1add6:	13 c0       	rjmp	.+38     	; 0x1adfe <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*userfile)
   1add8:	fa 01       	movw	r30, r20
   1adda:	80 81       	ld	r24, Z
   1addc:	81 11       	cpse	r24, r1
   1adde:	03 c0       	rjmp	.+6      	; 0x1ade6 <lif_add_ascii_file_as_e010+0x3c>
    {
        printf("lif_add_ascii_file_as_e010: userfile is empty\n");
   1ade0:	82 ec       	ldi	r24, 0xC2	; 194
   1ade2:	98 e3       	ldi	r25, 0x38	; 56
   1ade4:	0c c0       	rjmp	.+24     	; 0x1adfe <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }

//Get size and date info
    sp = lif_stat(userfile, (stat_t *)&st);
   1ade6:	be 01       	movw	r22, r28
   1ade8:	66 5f       	subi	r22, 0xF6	; 246
   1adea:	7f 4f       	sbci	r23, 0xFF	; 255
   1adec:	ca 01       	movw	r24, r20
   1adee:	0e 94 9c c1 	call	0x18338	; 0x18338 <lif_stat>
   1adf2:	9b af       	std	Y+59, r25	; 0x3b
   1adf4:	8a af       	std	Y+58, r24	; 0x3a
    if(!sp)
   1adf6:	89 2b       	or	r24, r25
   1adf8:	59 f4       	brne	.+22     	; 0x1ae10 <lif_add_ascii_file_as_e010+0x66>
    {
        printf("lif_add_ascii_file_as_e010: userfile not found\n");
   1adfa:	82 e9       	ldi	r24, 0x92	; 146
   1adfc:	98 e3       	ldi	r25, 0x38	; 56
   1adfe:	a0 e0       	ldi	r26, 0x00	; 0
   1ae00:	ed b7       	in	r30, 0x3d	; 61
   1ae02:	fe b7       	in	r31, 0x3e	; 62
   1ae04:	81 83       	std	Z+1, r24	; 0x01
   1ae06:	92 83       	std	Z+2, r25	; 0x02
   1ae08:	a3 83       	std	Z+3, r26	; 0x03
   1ae0a:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   1ae0e:	01 c1       	rjmp	.+514    	; 0x1b012 <lif_add_ascii_file_as_e010+0x268>
        return(-1);
    }

    if(debuglevel & LIF_DEBUG)
   1ae10:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1ae14:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1ae18:	92 ff       	sbrs	r25, 2
   1ae1a:	10 c0       	rjmp	.+32     	; 0x1ae3c <lif_add_ascii_file_as_e010+0x92>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n",
   1ae1c:	ed b7       	in	r30, 0x3d	; 61
   1ae1e:	fe b7       	in	r31, 0x3e	; 62
   1ae20:	f1 86       	std	Z+9, r15	; 0x09
   1ae22:	e0 86       	std	Z+8, r14	; 0x08
   1ae24:	37 82       	std	Z+7, r3	; 0x07
   1ae26:	26 82       	std	Z+6, r2	; 0x06
   1ae28:	d5 82       	std	Z+5, r13	; 0x05
   1ae2a:	c4 82       	std	Z+4, r12	; 0x04
   1ae2c:	83 e6       	ldi	r24, 0x63	; 99
   1ae2e:	98 e3       	ldi	r25, 0x38	; 56
   1ae30:	a0 e0       	ldi	r26, 0x00	; 0
   1ae32:	81 83       	std	Z+1, r24	; 0x01
   1ae34:	92 83       	std	Z+2, r25	; 0x02
   1ae36:	a3 83       	std	Z+3, r26	; 0x03
   1ae38:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
            lifimagename, lifname, userfile);

// Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
   1ae3c:	97 01       	movw	r18, r14
   1ae3e:	40 e0       	ldi	r20, 0x00	; 0
   1ae40:	50 e0       	ldi	r21, 0x00	; 0
   1ae42:	ba 01       	movw	r22, r20
   1ae44:	80 e0       	ldi	r24, 0x00	; 0
   1ae46:	90 e0       	ldi	r25, 0x00	; 0
   1ae48:	a8 de       	rcall	.-688    	; 0x1ab9a <lif_add_ascii_file_as_e010_wrapper>
   1ae4a:	4b 01       	movw	r8, r22
   1ae4c:	5c 01       	movw	r10, r24
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1ae4e:	47 2e       	mov	r4, r23
   1ae50:	58 2e       	mov	r5, r24
   1ae52:	69 2e       	mov	r6, r25
   1ae54:	77 24       	eor	r7, r7
    if(bytes % (long)LIF_SECTOR_SIZE)
   1ae56:	66 23       	and	r22, r22
   1ae58:	29 f0       	breq	.+10     	; 0x1ae64 <lif_add_ascii_file_as_e010+0xba>
        ++sectors;
   1ae5a:	ff ef       	ldi	r31, 0xFF	; 255
   1ae5c:	4f 1a       	sub	r4, r31
   1ae5e:	5f 0a       	sbc	r5, r31
   1ae60:	6f 0a       	sbc	r6, r31
   1ae62:	7f 0a       	sbc	r7, r31

// Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
   1ae64:	61 e0       	ldi	r22, 0x01	; 1
   1ae66:	79 e0       	ldi	r23, 0x09	; 9
   1ae68:	c6 01       	movw	r24, r12
   1ae6a:	49 da       	rcall	.-2926   	; 0x1a2fe <lif_open_volume>
   1ae6c:	8c 01       	movw	r16, r24
    if(LIF == NULL)
   1ae6e:	00 97       	sbiw	r24, 0x00	; 0
   1ae70:	09 f4       	brne	.+2      	; 0x1ae74 <lif_add_ascii_file_as_e010+0xca>
   1ae72:	cf c0       	rjmp	.+414    	; 0x1b012 <lif_add_ascii_file_as_e010+0x268>
        return(-1);

// Now find free record
    index = lif_newdir(LIF, sectors);
   1ae74:	b3 01       	movw	r22, r6
   1ae76:	a2 01       	movw	r20, r4
   1ae78:	e2 d8       	rcall	.-3644   	; 0x1a03e <lif_newdir>
   1ae7a:	3c 01       	movw	r6, r24
    if(index == -1)
   1ae7c:	8f ef       	ldi	r24, 0xFF	; 255
   1ae7e:	68 16       	cp	r6, r24
   1ae80:	78 06       	cpc	r7, r24
   1ae82:	79 f4       	brne	.+30     	; 0x1aea2 <lif_add_ascii_file_as_e010+0xf8>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n",
   1ae84:	ed b7       	in	r30, 0x3d	; 61
   1ae86:	fe b7       	in	r31, 0x3e	; 62
   1ae88:	f7 82       	std	Z+7, r15	; 0x07
   1ae8a:	e6 82       	std	Z+6, r14	; 0x06
   1ae8c:	d5 82       	std	Z+5, r13	; 0x05
   1ae8e:	c4 82       	std	Z+4, r12	; 0x04
   1ae90:	83 e3       	ldi	r24, 0x33	; 51
   1ae92:	98 e3       	ldi	r25, 0x38	; 56
   1ae94:	a0 e0       	ldi	r26, 0x00	; 0
   1ae96:	81 83       	std	Z+1, r24	; 0x01
   1ae98:	92 83       	std	Z+2, r25	; 0x02
   1ae9a:	a3 83       	std	Z+3, r26	; 0x03
   1ae9c:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   1aea0:	a0 c0       	rjmp	.+320    	; 0x1afe2 <lif_add_ascii_file_as_e010+0x238>
        lif_closedir(LIF);
        return(-1);
    }

// Initialize the free directory entry
    lif_fixname(LIF->DIR.filename, lifname,10);
   1aea2:	68 01       	movw	r12, r16
   1aea4:	ff e4       	ldi	r31, 0x4F	; 79
   1aea6:	cf 0e       	add	r12, r31
   1aea8:	d1 1c       	adc	r13, r1
   1aeaa:	4a e0       	ldi	r20, 0x0A	; 10
   1aeac:	50 e0       	ldi	r21, 0x00	; 0
   1aeae:	b1 01       	movw	r22, r2
   1aeb0:	c6 01       	movw	r24, r12
   1aeb2:	0e 94 4b c3 	call	0x18696	; 0x18696 <lif_fixname>
    LIF->DIR.FileType = 0xe010;                   // 10
   1aeb6:	80 e1       	ldi	r24, 0x10	; 16
   1aeb8:	90 ee       	ldi	r25, 0xE0	; 224
   1aeba:	f8 01       	movw	r30, r16
   1aebc:	e6 5a       	subi	r30, 0xA6	; 166
   1aebe:	ff 4f       	sbci	r31, 0xFF	; 255
   1aec0:	91 83       	std	Z+1, r25	; 0x01
   1aec2:	80 83       	st	Z, r24
    lif_time2lifbcd(sp->st_mtime, LIF->DIR.date);
   1aec4:	ea ad       	ldd	r30, Y+58	; 0x3a
   1aec6:	fb ad       	ldd	r31, Y+59	; 0x3b
   1aec8:	60 a5       	ldd	r22, Z+40	; 0x28
   1aeca:	71 a5       	ldd	r23, Z+41	; 0x29
   1aecc:	82 a5       	ldd	r24, Z+42	; 0x2a
   1aece:	93 a5       	ldd	r25, Z+43	; 0x2b
   1aed0:	a8 01       	movw	r20, r16
   1aed2:	4c 59       	subi	r20, 0x9C	; 156
   1aed4:	5f 4f       	sbci	r21, 0xFF	; 255
   1aed6:	0e 94 70 c5 	call	0x18ae0	; 0x18ae0 <lif_time2lifbcd>

    LIF->DIR.VolNumber = 0x8001;                  // 26
   1aeda:	81 e0       	ldi	r24, 0x01	; 1
   1aedc:	90 e8       	ldi	r25, 0x80	; 128
   1aede:	f8 01       	movw	r30, r16
   1aee0:	e6 59       	subi	r30, 0x96	; 150
   1aee2:	ff 4f       	sbci	r31, 0xFF	; 255
   1aee4:	91 83       	std	Z+1, r25	; 0x01
   1aee6:	80 83       	st	Z, r24
    LIF->DIR.FileBytes = bytes;                   // 28
   1aee8:	32 96       	adiw	r30, 0x02	; 2
   1aeea:	91 82       	std	Z+1, r9	; 0x01
   1aeec:	80 82       	st	Z, r8
    LIF->DIR.SectorSize  = 0x100;                 // 30
   1aeee:	80 e0       	ldi	r24, 0x00	; 0
   1aef0:	91 e0       	ldi	r25, 0x01	; 1
   1aef2:	32 96       	adiw	r30, 0x02	; 2
   1aef4:	91 83       	std	Z+1, r25	; 0x01
   1aef6:	80 83       	st	Z, r24
    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1aef8:	58 01       	movw	r10, r16
   1aefa:	fc e5       	ldi	r31, 0x5C	; 92
   1aefc:	af 0e       	add	r10, r31
   1aefe:	b1 1c       	adc	r11, r1
   1af00:	f5 01       	movw	r30, r10
   1af02:	80 81       	ld	r24, Z
   1af04:	91 81       	ldd	r25, Z+1	; 0x01
   1af06:	a2 81       	ldd	r26, Z+2	; 0x02
   1af08:	b3 81       	ldd	r27, Z+3	; 0x03
   1af0a:	22 24       	eor	r2, r2
   1af0c:	38 2e       	mov	r3, r24
   1af0e:	49 2e       	mov	r4, r25
   1af10:	5a 2e       	mov	r5, r26

    if(debuglevel & LIF_DEBUG)
   1af12:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1af16:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1af1a:	92 ff       	sbrs	r25, 2
   1af1c:	05 c0       	rjmp	.+10     	; 0x1af28 <lif_add_ascii_file_as_e010+0x17e>
        lif_dump_vol(LIF,"lif_after lif_newdir");
   1af1e:	60 e5       	ldi	r22, 0x50	; 80
   1af20:	76 e1       	ldi	r23, 0x16	; 22
   1af22:	c8 01       	movw	r24, r16
   1af24:	0e 94 5c c6 	call	0x18cb8	; 0x18cb8 <lif_dump_vol>

// Write converted file into free space first
    bytes = lif_add_ascii_file_as_e010_wrapper(LIF,offset,userfile);
   1af28:	97 01       	movw	r18, r14
   1af2a:	b2 01       	movw	r22, r4
   1af2c:	a1 01       	movw	r20, r2
   1af2e:	c8 01       	movw	r24, r16
   1af30:	34 de       	rcall	.-920    	; 0x1ab9a <lif_add_ascii_file_as_e010_wrapper>
   1af32:	4b 01       	movw	r8, r22
   1af34:	7c 01       	movw	r14, r24

    if(debuglevel & LIF_DEBUG)
   1af36:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1af3a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1af3e:	92 ff       	sbrs	r25, 2
   1af40:	4a c0       	rjmp	.+148    	; 0x1afd6 <lif_add_ascii_file_as_e010+0x22c>
    {
        printf("New Directory Information AFTER write\n");
   1af42:	8c e0       	ldi	r24, 0x0C	; 12
   1af44:	98 e3       	ldi	r25, 0x38	; 56
   1af46:	a0 e0       	ldi	r26, 0x00	; 0
   1af48:	ed b7       	in	r30, 0x3d	; 61
   1af4a:	fe b7       	in	r31, 0x3e	; 62
   1af4c:	81 83       	std	Z+1, r24	; 0x01
   1af4e:	92 83       	std	Z+2, r25	; 0x02
   1af50:	a3 83       	std	Z+3, r26	; 0x03
   1af52:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
        printf("Name:              %s\n", LIF->DIR.filename);
   1af56:	ed b7       	in	r30, 0x3d	; 61
   1af58:	fe b7       	in	r31, 0x3e	; 62
   1af5a:	d5 82       	std	Z+5, r13	; 0x05
   1af5c:	c4 82       	std	Z+4, r12	; 0x04
   1af5e:	85 ef       	ldi	r24, 0xF5	; 245
   1af60:	97 e3       	ldi	r25, 0x37	; 55
   1af62:	a0 e0       	ldi	r26, 0x00	; 0
   1af64:	81 83       	std	Z+1, r24	; 0x01
   1af66:	92 83       	std	Z+2, r25	; 0x02
   1af68:	a3 83       	std	Z+3, r26	; 0x03
   1af6a:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
        printf("Index:            %4d\n", (int)index);
   1af6e:	ed b7       	in	r30, 0x3d	; 61
   1af70:	fe b7       	in	r31, 0x3e	; 62
   1af72:	75 82       	std	Z+5, r7	; 0x05
   1af74:	64 82       	std	Z+4, r6	; 0x04
   1af76:	8e ed       	ldi	r24, 0xDE	; 222
   1af78:	97 e3       	ldi	r25, 0x37	; 55
   1af7a:	a0 e0       	ldi	r26, 0x00	; 0
   1af7c:	81 83       	std	Z+1, r24	; 0x01
   1af7e:	92 83       	std	Z+2, r25	; 0x02
   1af80:	a3 83       	std	Z+3, r26	; 0x03
   1af82:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
        printf("First Sector:     %4lxH\n", (long) LIF->DIR.FileStartSector);
   1af86:	f5 01       	movw	r30, r10
   1af88:	80 81       	ld	r24, Z
   1af8a:	91 81       	ldd	r25, Z+1	; 0x01
   1af8c:	a2 81       	ldd	r26, Z+2	; 0x02
   1af8e:	b3 81       	ldd	r27, Z+3	; 0x03
   1af90:	ed b7       	in	r30, 0x3d	; 61
   1af92:	fe b7       	in	r31, 0x3e	; 62
   1af94:	84 83       	std	Z+4, r24	; 0x04
   1af96:	95 83       	std	Z+5, r25	; 0x05
   1af98:	a6 83       	std	Z+6, r26	; 0x06
   1af9a:	b7 83       	std	Z+7, r27	; 0x07
   1af9c:	85 ec       	ldi	r24, 0xC5	; 197
   1af9e:	97 e3       	ldi	r25, 0x37	; 55
   1afa0:	a0 e0       	ldi	r26, 0x00	; 0
   1afa2:	81 83       	std	Z+1, r24	; 0x01
   1afa4:	92 83       	std	Z+2, r25	; 0x02
   1afa6:	a3 83       	std	Z+3, r26	; 0x03
   1afa8:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
        printf("File Sectors:     %4lxH\n", (long)LIF->DIR.FileSectors);
   1afac:	f8 01       	movw	r30, r16
   1afae:	e0 5a       	subi	r30, 0xA0	; 160
   1afb0:	ff 4f       	sbci	r31, 0xFF	; 255
   1afb2:	80 81       	ld	r24, Z
   1afb4:	91 81       	ldd	r25, Z+1	; 0x01
   1afb6:	a2 81       	ldd	r26, Z+2	; 0x02
   1afb8:	b3 81       	ldd	r27, Z+3	; 0x03
   1afba:	ed b7       	in	r30, 0x3d	; 61
   1afbc:	fe b7       	in	r31, 0x3e	; 62
   1afbe:	84 83       	std	Z+4, r24	; 0x04
   1afc0:	95 83       	std	Z+5, r25	; 0x05
   1afc2:	a6 83       	std	Z+6, r26	; 0x06
   1afc4:	b7 83       	std	Z+7, r27	; 0x07
   1afc6:	8c ea       	ldi	r24, 0xAC	; 172
   1afc8:	97 e3       	ldi	r25, 0x37	; 55
   1afca:	a0 e0       	ldi	r26, 0x00	; 0
   1afcc:	81 83       	std	Z+1, r24	; 0x01
   1afce:	92 83       	std	Z+2, r25	; 0x02
   1afd0:	a3 83       	std	Z+3, r26	; 0x03
   1afd2:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    }

// Write directory record
// Note: lif_newdir alrwady did the new EOF
    if( !lif_writedirindex(LIF,index))
   1afd6:	b3 01       	movw	r22, r6
   1afd8:	c8 01       	movw	r24, r16
   1afda:	0e 94 b7 cb 	call	0x1976e	; 0x1976e <lif_writedirindex>
   1afde:	89 2b       	or	r24, r25
   1afe0:	21 f4       	brne	.+8      	; 0x1afea <lif_add_ascii_file_as_e010+0x240>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1afe2:	c8 01       	movw	r24, r16
   1afe4:	0e 94 c2 ca 	call	0x19584	; 0x19584 <lif_close_volume>
   1afe8:	14 c0       	rjmp	.+40     	; 0x1b012 <lif_add_ascii_file_as_e010+0x268>
   1afea:	c8 01       	movw	r24, r16
   1afec:	0e 94 c2 ca 	call	0x19584	; 0x19584 <lif_close_volume>
        return(-1);
    }

    lif_closedir(LIF);

    printf("\tWrote: %8ld\n", bytes);
   1aff0:	ed b7       	in	r30, 0x3d	; 61
   1aff2:	fe b7       	in	r31, 0x3e	; 62
   1aff4:	84 82       	std	Z+4, r8	; 0x04
   1aff6:	95 82       	std	Z+5, r9	; 0x05
   1aff8:	e6 82       	std	Z+6, r14	; 0x06
   1affa:	f7 82       	std	Z+7, r15	; 0x07
   1affc:	8e e9       	ldi	r24, 0x9E	; 158
   1affe:	97 e3       	ldi	r25, 0x37	; 55
   1b000:	a0 e0       	ldi	r26, 0x00	; 0
   1b002:	81 83       	std	Z+1, r24	; 0x01
   1b004:	92 83       	std	Z+2, r25	; 0x02
   1b006:	a3 83       	std	Z+3, r26	; 0x03
   1b008:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>

// Return file size
    return(bytes);
   1b00c:	b4 01       	movw	r22, r8
   1b00e:	c7 01       	movw	r24, r14
   1b010:	04 c0       	rjmp	.+8      	; 0x1b01a <lif_add_ascii_file_as_e010+0x270>
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
    if(LIF == NULL)
        return(-1);
   1b012:	6f ef       	ldi	r22, 0xFF	; 255
   1b014:	7f ef       	ldi	r23, 0xFF	; 255
   1b016:	8f ef       	ldi	r24, 0xFF	; 255
   1b018:	9f ef       	ldi	r25, 0xFF	; 255

    printf("\tWrote: %8ld\n", bytes);

// Return file size
    return(bytes);
}
   1b01a:	eb 96       	adiw	r28, 0x3b	; 59
   1b01c:	e2 e1       	ldi	r30, 0x12	; 18
   1b01e:	0c 94 29 e7 	jmp	0x1ce52	; 0x1ce52 <__epilogue_restores__>

0001b022 <lif_extract_e010_as_ascii>:
/// @param[in] lifname:  name of file in LIF image
/// @param[in] username: name to call the extracted image
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_e010_as_ascii(char *lifimagename, char *lifname, char *username)
{
   1b022:	a7 e3       	ldi	r26, 0x37	; 55
   1b024:	b2 e0       	ldi	r27, 0x02	; 2
   1b026:	e7 e1       	ldi	r30, 0x17	; 23
   1b028:	f8 ed       	ldi	r31, 0xD8	; 216
   1b02a:	0c 94 0d e7 	jmp	0x1ce1a	; 0x1ce1a <__prologue_saves__>
   1b02e:	7c 01       	movw	r14, r24
   1b030:	8b 01       	movw	r16, r22
   1b032:	ca 5d       	subi	r28, 0xDA	; 218
   1b034:	dd 4f       	sbci	r29, 0xFD	; 253
   1b036:	59 83       	std	Y+1, r21	; 0x01
   1b038:	48 83       	st	Y, r20
   1b03a:	c6 52       	subi	r28, 0x26	; 38
   1b03c:	d2 40       	sbci	r29, 0x02	; 2
// read buffer
    uint8_t buf[LIF_SECTOR_SIZE+4];
// Write buffer, FYI: will ALWAYS be smaller then the read data buffer
    uint8_t wbuf[LIF_SECTOR_SIZE+4];

    LIF = lif_open_volume(lifimagename,"r");
   1b03e:	62 e4       	ldi	r22, 0x42	; 66
   1b040:	73 e0       	ldi	r23, 0x03	; 3
   1b042:	5d d9       	rcall	.-3398   	; 0x1a2fe <lif_open_volume>
   1b044:	6c 01       	movw	r12, r24
    if(LIF == NULL)
   1b046:	00 97       	sbiw	r24, 0x00	; 0
   1b048:	69 f4       	brne	.+26     	; 0x1b064 <lif_extract_e010_as_ascii+0x42>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1b04a:	ed b7       	in	r30, 0x3d	; 61
   1b04c:	fe b7       	in	r31, 0x3e	; 62
   1b04e:	f5 82       	std	Z+5, r15	; 0x05
   1b050:	e4 82       	std	Z+4, r14	; 0x04
   1b052:	86 e8       	ldi	r24, 0x86	; 134
   1b054:	97 e3       	ldi	r25, 0x37	; 55
   1b056:	a0 e0       	ldi	r26, 0x00	; 0
   1b058:	81 83       	std	Z+1, r24	; 0x01
   1b05a:	92 83       	std	Z+2, r25	; 0x02
   1b05c:	a3 83       	std	Z+3, r26	; 0x03
   1b05e:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   1b062:	13 c0       	rjmp	.+38     	; 0x1b08a <lif_extract_e010_as_ascii+0x68>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1b064:	b8 01       	movw	r22, r16
   1b066:	20 dc       	rcall	.-1984   	; 0x1a8a8 <lif_find_file>
    if(index == -1)
   1b068:	01 96       	adiw	r24, 0x01	; 1
   1b06a:	91 f4       	brne	.+36     	; 0x1b090 <lif_extract_e010_as_ascii+0x6e>
    {
        printf("LIF File not found:%s\n", lifname);
   1b06c:	ed b7       	in	r30, 0x3d	; 61
   1b06e:	fe b7       	in	r31, 0x3e	; 62
   1b070:	15 83       	std	Z+5, r17	; 0x05
   1b072:	04 83       	std	Z+4, r16	; 0x04
   1b074:	8f e6       	ldi	r24, 0x6F	; 111
   1b076:	97 e3       	ldi	r25, 0x37	; 55
   1b078:	a0 e0       	ldi	r26, 0x00	; 0
   1b07a:	81 83       	std	Z+1, r24	; 0x01
   1b07c:	92 83       	std	Z+2, r25	; 0x02
   1b07e:	a3 83       	std	Z+3, r26	; 0x03
   1b080:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b084:	c6 01       	movw	r24, r12
   1b086:	0e 94 c2 ca 	call	0x19584	; 0x19584 <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("LIF File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1b08a:	80 e0       	ldi	r24, 0x00	; 0
   1b08c:	90 e0       	ldi	r25, 0x00	; 0
   1b08e:	73 c2       	rjmp	.+1254   	; 0x1b576 <lif_extract_e010_as_ascii+0x554>
    }

    if((LIF->DIR.FileType & 0xFFFC) != 0xE010)
   1b090:	f6 01       	movw	r30, r12
   1b092:	e6 5a       	subi	r30, 0xA6	; 166
   1b094:	ff 4f       	sbci	r31, 0xFF	; 255
   1b096:	80 81       	ld	r24, Z
   1b098:	91 81       	ldd	r25, Z+1	; 0x01
   1b09a:	9c 01       	movw	r18, r24
   1b09c:	2c 7f       	andi	r18, 0xFC	; 252
   1b09e:	20 31       	cpi	r18, 0x10	; 16
   1b0a0:	30 4e       	sbci	r19, 0xE0	; 224
   1b0a2:	a9 f0       	breq	.+42     	; 0x1b0ce <lif_extract_e010_as_ascii+0xac>
    {
        printf("File %s has wrong type:[%04XH] expected 0xE010..0xE013\n", username, (int) LIF->DIR.FileType);
   1b0a4:	ed b7       	in	r30, 0x3d	; 61
   1b0a6:	fe b7       	in	r31, 0x3e	; 62
   1b0a8:	97 83       	std	Z+7, r25	; 0x07
   1b0aa:	86 83       	std	Z+6, r24	; 0x06
   1b0ac:	ca 5d       	subi	r28, 0xDA	; 218
   1b0ae:	dd 4f       	sbci	r29, 0xFD	; 253
   1b0b0:	28 81       	ld	r18, Y
   1b0b2:	39 81       	ldd	r19, Y+1	; 0x01
   1b0b4:	c6 52       	subi	r28, 0x26	; 38
   1b0b6:	d2 40       	sbci	r29, 0x02	; 2
   1b0b8:	35 83       	std	Z+5, r19	; 0x05
   1b0ba:	24 83       	std	Z+4, r18	; 0x04
   1b0bc:	87 e3       	ldi	r24, 0x37	; 55
   1b0be:	97 e3       	ldi	r25, 0x37	; 55
   1b0c0:	a0 e0       	ldi	r26, 0x00	; 0
   1b0c2:	81 83       	std	Z+1, r24	; 0x01
   1b0c4:	92 83       	std	Z+2, r25	; 0x02
   1b0c6:	a3 83       	std	Z+3, r26	; 0x03
   1b0c8:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   1b0cc:	db cf       	rjmp	.-74     	; 0x1b084 <lif_extract_e010_as_ascii+0x62>
        lif_closedir(LIF);
        return(0);
    }

    start = LIF->DIR.FileStartSector;
   1b0ce:	f6 01       	movw	r30, r12
   1b0d0:	e4 5a       	subi	r30, 0xA4	; 164
   1b0d2:	ff 4f       	sbci	r31, 0xFF	; 255
   1b0d4:	80 80       	ld	r8, Z
   1b0d6:	91 80       	ldd	r9, Z+1	; 0x01
   1b0d8:	a2 80       	ldd	r10, Z+2	; 0x02
   1b0da:	b3 80       	ldd	r11, Z+3	; 0x03
    end = start + LIF->DIR.FileSectors;
   1b0dc:	34 96       	adiw	r30, 0x04	; 4
   1b0de:	80 81       	ld	r24, Z
   1b0e0:	91 81       	ldd	r25, Z+1	; 0x01
   1b0e2:	a2 81       	ldd	r26, Z+2	; 0x02
   1b0e4:	b3 81       	ldd	r27, Z+3	; 0x03
   1b0e6:	a5 01       	movw	r20, r10
   1b0e8:	94 01       	movw	r18, r8
   1b0ea:	28 0f       	add	r18, r24
   1b0ec:	39 1f       	adc	r19, r25
   1b0ee:	4a 1f       	adc	r20, r26
   1b0f0:	5b 1f       	adc	r21, r27
   1b0f2:	c4 5d       	subi	r28, 0xD4	; 212
   1b0f4:	dd 4f       	sbci	r29, 0xFD	; 253
   1b0f6:	28 83       	st	Y, r18
   1b0f8:	39 83       	std	Y+1, r19	; 0x01
   1b0fa:	4a 83       	std	Y+2, r20	; 0x02
   1b0fc:	5b 83       	std	Y+3, r21	; 0x03
   1b0fe:	cc 52       	subi	r28, 0x2C	; 44
   1b100:	d2 40       	sbci	r29, 0x02	; 2

    t = lif_lifbcd2time(LIF->DIR.date);
   1b102:	c6 01       	movw	r24, r12
   1b104:	8c 59       	subi	r24, 0x9C	; 156
   1b106:	9f 4f       	sbci	r25, 0xFF	; 255
   1b108:	0e 94 b2 c5 	call	0x18b64	; 0x18b64 <lif_lifbcd2time>
   1b10c:	c8 5d       	subi	r28, 0xD8	; 216
   1b10e:	dd 4f       	sbci	r29, 0xFD	; 253
   1b110:	68 83       	st	Y, r22
   1b112:	79 83       	std	Y+1, r23	; 0x01
   1b114:	8a 83       	std	Y+2, r24	; 0x02
   1b116:	9b 83       	std	Y+3, r25	; 0x03
   1b118:	c8 52       	subi	r28, 0x28	; 40
   1b11a:	d2 40       	sbci	r29, 0x02	; 2

    offset = start * (long) LIF_SECTOR_SIZE;
   1b11c:	ba 2d       	mov	r27, r10
   1b11e:	a9 2d       	mov	r26, r9
   1b120:	98 2d       	mov	r25, r8
   1b122:	88 27       	eor	r24, r24
   1b124:	c2 5e       	subi	r28, 0xE2	; 226
   1b126:	dd 4f       	sbci	r29, 0xFD	; 253
   1b128:	88 83       	st	Y, r24
   1b12a:	99 83       	std	Y+1, r25	; 0x01
   1b12c:	aa 83       	std	Y+2, r26	; 0x02
   1b12e:	bb 83       	std	Y+3, r27	; 0x03
   1b130:	ce 51       	subi	r28, 0x1E	; 30
   1b132:	d2 40       	sbci	r29, 0x02	; 2

    fo = lif_open(username,"wb");
   1b134:	6c e0       	ldi	r22, 0x0C	; 12
   1b136:	79 e0       	ldi	r23, 0x09	; 9
   1b138:	ca 5d       	subi	r28, 0xDA	; 218
   1b13a:	dd 4f       	sbci	r29, 0xFD	; 253
   1b13c:	88 81       	ld	r24, Y
   1b13e:	99 81       	ldd	r25, Y+1	; 0x01
   1b140:	c6 52       	subi	r28, 0x26	; 38
   1b142:	d2 40       	sbci	r29, 0x02	; 2
   1b144:	0e 94 72 c1 	call	0x182e4	; 0x182e4 <lif_open>
   1b148:	cc 5d       	subi	r28, 0xDC	; 220
   1b14a:	dd 4f       	sbci	r29, 0xFD	; 253
   1b14c:	99 83       	std	Y+1, r25	; 0x01
   1b14e:	88 83       	st	Y, r24
   1b150:	c4 52       	subi	r28, 0x24	; 36
   1b152:	d2 40       	sbci	r29, 0x02	; 2
    if(fo == NULL)
   1b154:	89 2b       	or	r24, r25
   1b156:	09 f4       	brne	.+2      	; 0x1b15a <lif_extract_e010_as_ascii+0x138>
   1b158:	95 cf       	rjmp	.-214    	; 0x1b084 <lif_extract_e010_as_ascii+0x62>
    {
        lif_closedir(LIF);
        return(0);
    }

    printf("Extracting: %s\n", username);
   1b15a:	ca 5d       	subi	r28, 0xDA	; 218
   1b15c:	dd 4f       	sbci	r29, 0xFD	; 253
   1b15e:	28 81       	ld	r18, Y
   1b160:	39 81       	ldd	r19, Y+1	; 0x01
   1b162:	c6 52       	subi	r28, 0x26	; 38
   1b164:	d2 40       	sbci	r29, 0x02	; 2
   1b166:	ed b7       	in	r30, 0x3d	; 61
   1b168:	fe b7       	in	r31, 0x3e	; 62
   1b16a:	35 83       	std	Z+5, r19	; 0x05
   1b16c:	24 83       	std	Z+4, r18	; 0x04
   1b16e:	87 e2       	ldi	r24, 0x27	; 39
   1b170:	97 e3       	ldi	r25, 0x37	; 55
   1b172:	a0 e0       	ldi	r26, 0x00	; 0
   1b174:	81 83       	std	Z+1, r24	; 0x01
   1b176:	92 83       	std	Z+2, r25	; 0x02
   1b178:	a3 83       	std	Z+3, r26	; 0x03
   1b17a:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>

    bytes = 0;
    wind = 0;
   1b17e:	21 2c       	mov	r2, r1
   1b180:	31 2c       	mov	r3, r1
    uint32_t start, end;                          // sectors
    long offset, bytes;                           // bytes
    int index;
    int i, len,size;
    int status = 1;
    int done = 0;
   1b182:	ce 5d       	subi	r28, 0xDE	; 222
   1b184:	dd 4f       	sbci	r29, 0xFD	; 253
   1b186:	19 82       	std	Y+1, r1	; 0x01
   1b188:	18 82       	st	Y, r1
   1b18a:	c2 52       	subi	r28, 0x22	; 34
   1b18c:	d2 40       	sbci	r29, 0x02	; 2
    lif_t *LIF;
    uint32_t start, end;                          // sectors
    long offset, bytes;                           // bytes
    int index;
    int i, len,size;
    int status = 1;
   1b18e:	ee 24       	eor	r14, r14
   1b190:	e3 94       	inc	r14
   1b192:	f1 2c       	mov	r15, r1
        return(0);
    }

    printf("Extracting: %s\n", username);

    bytes = 0;
   1b194:	41 2c       	mov	r4, r1
   1b196:	51 2c       	mov	r5, r1
   1b198:	32 01       	movw	r6, r4
                        status = 0;
                        done = 1;
                        break;
                    }
                    bytes += size;
                    printf("\tWrote: %8ld\r", bytes);
   1b19a:	86 e6       	ldi	r24, 0x66	; 102
   1b19c:	96 e3       	ldi	r25, 0x36	; 54
   1b19e:	9c 01       	movw	r18, r24
   1b1a0:	40 e0       	ldi	r20, 0x00	; 0
   1b1a2:	ce 5c       	subi	r28, 0xCE	; 206
   1b1a4:	dd 4f       	sbci	r29, 0xFD	; 253
   1b1a6:	28 83       	st	Y, r18
   1b1a8:	39 83       	std	Y+1, r19	; 0x01
   1b1aa:	4a 83       	std	Y+2, r20	; 0x02
   1b1ac:	c2 53       	subi	r28, 0x32	; 50
   1b1ae:	d2 40       	sbci	r29, 0x02	; 2
                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1b1b0:	84 e7       	ldi	r24, 0x74	; 116
   1b1b2:	96 e3       	ldi	r25, 0x36	; 54
   1b1b4:	9c 01       	movw	r18, r24
   1b1b6:	40 e0       	ldi	r20, 0x00	; 0
   1b1b8:	cb 5c       	subi	r28, 0xCB	; 203
   1b1ba:	dd 4f       	sbci	r29, 0xFD	; 253
   1b1bc:	28 83       	st	Y, r18
   1b1be:	39 83       	std	Y+1, r19	; 0x01
   1b1c0:	4a 83       	std	Y+2, r20	; 0x02
   1b1c2:	c5 53       	subi	r28, 0x35	; 53
   1b1c4:	d2 40       	sbci	r29, 0x02	; 2

    bytes = 0;
    wind = 0;
    ind = 0;

    while(lif_bytes2sectors(offset) <= end)
   1b1c6:	c2 5e       	subi	r28, 0xE2	; 226
   1b1c8:	dd 4f       	sbci	r29, 0xFD	; 253
   1b1ca:	28 81       	ld	r18, Y
   1b1cc:	39 81       	ldd	r19, Y+1	; 0x01
   1b1ce:	4a 81       	ldd	r20, Y+2	; 0x02
   1b1d0:	5b 81       	ldd	r21, Y+3	; 0x03
   1b1d2:	ce 51       	subi	r28, 0x1E	; 30
   1b1d4:	d2 40       	sbci	r29, 0x02	; 2
   1b1d6:	bb 27       	eor	r27, r27
   1b1d8:	a5 2f       	mov	r26, r21
   1b1da:	94 2f       	mov	r25, r20
   1b1dc:	83 2f       	mov	r24, r19
   1b1de:	c4 5d       	subi	r28, 0xD4	; 212
   1b1e0:	dd 4f       	sbci	r29, 0xFD	; 253
   1b1e2:	28 81       	ld	r18, Y
   1b1e4:	39 81       	ldd	r19, Y+1	; 0x01
   1b1e6:	4a 81       	ldd	r20, Y+2	; 0x02
   1b1e8:	5b 81       	ldd	r21, Y+3	; 0x03
   1b1ea:	cc 52       	subi	r28, 0x2C	; 44
   1b1ec:	d2 40       	sbci	r29, 0x02	; 2
   1b1ee:	28 17       	cp	r18, r24
   1b1f0:	39 07       	cpc	r19, r25
   1b1f2:	4a 07       	cpc	r20, r26
   1b1f4:	5b 07       	cpc	r21, r27
   1b1f6:	08 f4       	brcc	.+2      	; 0x1b1fa <lif_extract_e010_as_ascii+0x1d8>
   1b1f8:	51 c1       	rjmp	.+674    	; 0x1b49c <lif_extract_e010_as_ascii+0x47a>
    {
// LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
   1b1fa:	00 e0       	ldi	r16, 0x00	; 0
   1b1fc:	11 e0       	ldi	r17, 0x01	; 1
   1b1fe:	c2 5e       	subi	r28, 0xE2	; 226
   1b200:	dd 4f       	sbci	r29, 0xFD	; 253
   1b202:	28 81       	ld	r18, Y
   1b204:	39 81       	ldd	r19, Y+1	; 0x01
   1b206:	4a 81       	ldd	r20, Y+2	; 0x02
   1b208:	5b 81       	ldd	r21, Y+3	; 0x03
   1b20a:	ce 51       	subi	r28, 0x1E	; 30
   1b20c:	d2 40       	sbci	r29, 0x02	; 2
   1b20e:	be 01       	movw	r22, r28
   1b210:	60 5f       	subi	r22, 0xF0	; 240
   1b212:	7e 4f       	sbci	r23, 0xFE	; 254
   1b214:	c6 01       	movw	r24, r12
   1b216:	0e 94 f6 c1 	call	0x183ec	; 0x183ec <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1b21a:	6f 3f       	cpi	r22, 0xFF	; 255
   1b21c:	71 05       	cpc	r23, r1
   1b21e:	09 f0       	breq	.+2      	; 0x1b222 <lif_extract_e010_as_ascii+0x200>
   1b220:	0c f4       	brge	.+2      	; 0x1b224 <lif_extract_e010_as_ascii+0x202>
   1b222:	3a c1       	rjmp	.+628    	; 0x1b498 <lif_extract_e010_as_ascii+0x476>
   1b224:	00 e0       	ldi	r16, 0x00	; 0
   1b226:	10 e0       	ldi	r17, 0x00	; 0
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1b228:	ce 5d       	subi	r28, 0xDE	; 222
   1b22a:	dd 4f       	sbci	r29, 0xFD	; 253
   1b22c:	88 81       	ld	r24, Y
   1b22e:	99 81       	ldd	r25, Y+1	; 0x01
   1b230:	c2 52       	subi	r28, 0x22	; 34
   1b232:	d2 40       	sbci	r29, 0x02	; 2
   1b234:	89 2b       	or	r24, r25
   1b236:	09 f0       	breq	.+2      	; 0x1b23a <lif_extract_e010_as_ascii+0x218>
   1b238:	1b c1       	rjmp	.+566    	; 0x1b470 <lif_extract_e010_as_ascii+0x44e>
        {
            if(buf[ind] == 0xDF || buf[ind] == 0xCF || buf[ind] == 0x6F)
   1b23a:	e0 e1       	ldi	r30, 0x10	; 16
   1b23c:	f1 e0       	ldi	r31, 0x01	; 1
   1b23e:	ec 0f       	add	r30, r28
   1b240:	fd 1f       	adc	r31, r29
   1b242:	e0 0f       	add	r30, r16
   1b244:	f1 1f       	adc	r31, r17
   1b246:	80 81       	ld	r24, Z
   1b248:	98 2f       	mov	r25, r24
   1b24a:	9f 7e       	andi	r25, 0xEF	; 239
   1b24c:	9f 3c       	cpi	r25, 0xCF	; 207
   1b24e:	11 f0       	breq	.+4      	; 0x1b254 <lif_extract_e010_as_ascii+0x232>
   1b250:	8f 36       	cpi	r24, 0x6F	; 111
   1b252:	c9 f5       	brne	.+114    	; 0x1b2c6 <lif_extract_e010_as_ascii+0x2a4>
            {
                ++ind;
                len = buf[ind++] & 0xff;
   1b254:	e0 e1       	ldi	r30, 0x10	; 16
   1b256:	f1 e0       	ldi	r31, 0x01	; 1
   1b258:	ec 0f       	add	r30, r28
   1b25a:	fd 1f       	adc	r31, r29
   1b25c:	e0 0f       	add	r30, r16
   1b25e:	f1 1f       	adc	r31, r17
   1b260:	a1 80       	ldd	r10, Z+1	; 0x01
                len |= ((buf[ind++] & 0xff) <<8);
   1b262:	f8 01       	movw	r30, r16
   1b264:	32 96       	adiw	r30, 0x02	; 2
   1b266:	40 e1       	ldi	r20, 0x10	; 16
   1b268:	51 e0       	ldi	r21, 0x01	; 1
   1b26a:	4c 0f       	add	r20, r28
   1b26c:	5d 1f       	adc	r21, r29
   1b26e:	e4 0f       	add	r30, r20
   1b270:	f5 1f       	adc	r31, r21
   1b272:	0d 5f       	subi	r16, 0xFD	; 253
   1b274:	1f 4f       	sbci	r17, 0xFF	; 255
   1b276:	80 81       	ld	r24, Z
   1b278:	b1 2c       	mov	r11, r1
   1b27a:	b8 2a       	or	r11, r24
// EOF ?
                if(len == 0)
   1b27c:	a1 14       	cp	r10, r1
   1b27e:	b1 04       	cpc	r11, r1
   1b280:	09 f4       	brne	.+2      	; 0x1b284 <lif_extract_e010_as_ascii+0x262>
   1b282:	ee c0       	rjmp	.+476    	; 0x1b460 <lif_extract_e010_as_ascii+0x43e>
                {
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
   1b284:	5f ef       	ldi	r21, 0xFF	; 255
   1b286:	a5 16       	cp	r10, r21
   1b288:	b1 04       	cpc	r11, r1
   1b28a:	09 f0       	breq	.+2      	; 0x1b28e <lif_extract_e010_as_ascii+0x26c>
   1b28c:	7c f4       	brge	.+30     	; 0x1b2ac <lif_extract_e010_as_ascii+0x28a>
   1b28e:	c4 5e       	subi	r28, 0xE4	; 228
   1b290:	dd 4f       	sbci	r29, 0xFD	; 253
   1b292:	19 82       	std	Y+1, r1	; 0x01
   1b294:	18 82       	st	Y, r1
   1b296:	cc 51       	subi	r28, 0x1C	; 28
   1b298:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
   1b29a:	c5 01       	movw	r24, r10
   1b29c:	01 97       	sbiw	r24, 0x01	; 1
   1b29e:	c0 5d       	subi	r28, 0xD0	; 208
   1b2a0:	dd 4f       	sbci	r29, 0xFD	; 253
   1b2a2:	99 83       	std	Y+1, r25	; 0x01
   1b2a4:	88 83       	st	Y, r24
   1b2a6:	c0 53       	subi	r28, 0x30	; 48
   1b2a8:	d2 40       	sbci	r29, 0x02	; 2
   1b2aa:	68 c0       	rjmp	.+208    	; 0x1b37c <lif_extract_e010_as_ascii+0x35a>
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
                {
                    printf("lif_extract_e010_as_ascii: string too big size = %d\n", (int)len);
   1b2ac:	ed b7       	in	r30, 0x3d	; 61
   1b2ae:	fe b7       	in	r31, 0x3e	; 62
   1b2b0:	b5 82       	std	Z+5, r11	; 0x05
   1b2b2:	a4 82       	std	Z+4, r10	; 0x04
   1b2b4:	82 ef       	ldi	r24, 0xF2	; 242
   1b2b6:	96 e3       	ldi	r25, 0x36	; 54
   1b2b8:	a0 e0       	ldi	r26, 0x00	; 0
   1b2ba:	81 83       	std	Z+1, r24	; 0x01
   1b2bc:	92 83       	std	Z+2, r25	; 0x02
   1b2be:	a3 83       	std	Z+3, r26	; 0x03
   1b2c0:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   1b2c4:	1e c0       	rjmp	.+60     	; 0x1b302 <lif_extract_e010_as_ascii+0x2e0>
                    status = 0;
                    done = 1;
                    break;
                }
            }
            else if(buf[ind] == 0xEF)
   1b2c6:	8f 3e       	cpi	r24, 0xEF	; 239
   1b2c8:	09 f4       	brne	.+2      	; 0x1b2cc <lif_extract_e010_as_ascii+0x2aa>
   1b2ca:	d2 c0       	rjmp	.+420    	; 0x1b470 <lif_extract_e010_as_ascii+0x44e>
                ind = 0;
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
   1b2cc:	ed b7       	in	r30, 0x3d	; 61
   1b2ce:	fe b7       	in	r31, 0x3e	; 62
   1b2d0:	13 87       	std	Z+11, r17	; 0x0b
   1b2d2:	02 87       	std	Z+10, r16	; 0x0a
   1b2d4:	c2 5e       	subi	r28, 0xE2	; 226
   1b2d6:	dd 4f       	sbci	r29, 0xFD	; 253
   1b2d8:	28 81       	ld	r18, Y
   1b2da:	39 81       	ldd	r19, Y+1	; 0x01
   1b2dc:	4a 81       	ldd	r20, Y+2	; 0x02
   1b2de:	5b 81       	ldd	r21, Y+3	; 0x03
   1b2e0:	ce 51       	subi	r28, 0x1E	; 30
   1b2e2:	d2 40       	sbci	r29, 0x02	; 2
   1b2e4:	26 83       	std	Z+6, r18	; 0x06
   1b2e6:	37 83       	std	Z+7, r19	; 0x07
   1b2e8:	40 87       	std	Z+8, r20	; 0x08
   1b2ea:	51 87       	std	Z+9, r21	; 0x09
   1b2ec:	90 e0       	ldi	r25, 0x00	; 0
   1b2ee:	95 83       	std	Z+5, r25	; 0x05
   1b2f0:	84 83       	std	Z+4, r24	; 0x04
   1b2f2:	8c e9       	ldi	r24, 0x9C	; 156
   1b2f4:	96 e3       	ldi	r25, 0x36	; 54
   1b2f6:	a0 e0       	ldi	r26, 0x00	; 0
   1b2f8:	81 83       	std	Z+1, r24	; 0x01
   1b2fa:	92 83       	std	Z+2, r25	; 0x02
   1b2fc:	a3 83       	std	Z+3, r26	; 0x03
   1b2fe:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
                status = 0;
                done = 1;
   1b302:	21 e0       	ldi	r18, 0x01	; 1
   1b304:	30 e0       	ldi	r19, 0x00	; 0
   1b306:	ce 5d       	subi	r28, 0xDE	; 222
   1b308:	dd 4f       	sbci	r29, 0xFD	; 253
   1b30a:	39 83       	std	Y+1, r19	; 0x01
   1b30c:	28 83       	st	Y, r18
   1b30e:	c2 52       	subi	r28, 0x22	; 34
   1b310:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
                status = 0;
   1b312:	e1 2c       	mov	r14, r1
   1b314:	f1 2c       	mov	r15, r1
                done = 1;
                break;
   1b316:	ac c0       	rjmp	.+344    	; 0x1b470 <lif_extract_e010_as_ascii+0x44e>
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1b318:	0f 3f       	cpi	r16, 0xFF	; 255
   1b31a:	11 05       	cpc	r17, r1
   1b31c:	11 f0       	breq	.+4      	; 0x1b322 <lif_extract_e010_as_ascii+0x300>
   1b31e:	0c f0       	brlt	.+2      	; 0x1b322 <lif_extract_e010_as_ascii+0x300>
   1b320:	a7 c0       	rjmp	.+334    	; 0x1b470 <lif_extract_e010_as_ascii+0x44e>
            {
                if(buf[ind] == '\r' && i == len-1)
   1b322:	e0 e1       	ldi	r30, 0x10	; 16
   1b324:	f1 e0       	ldi	r31, 0x01	; 1
   1b326:	ec 0f       	add	r30, r28
   1b328:	fd 1f       	adc	r31, r29
   1b32a:	e0 0f       	add	r30, r16
   1b32c:	f1 1f       	adc	r31, r17
   1b32e:	20 81       	ld	r18, Z
   1b330:	a1 01       	movw	r20, r2
   1b332:	4f 5f       	subi	r20, 0xFF	; 255
   1b334:	5f 4f       	sbci	r21, 0xFF	; 255
   1b336:	4a 01       	movw	r8, r20
   1b338:	2d 30       	cpi	r18, 0x0D	; 13
   1b33a:	51 f1       	breq	.+84     	; 0x1b390 <lif_extract_e010_as_ascii+0x36e>
                    ++ind;
                    break;
                }
                else
                {
                    wbuf[wind++] = buf[ind++];
   1b33c:	98 2d       	mov	r25, r8
   1b33e:	89 2d       	mov	r24, r9
   1b340:	0f 5f       	subi	r16, 0xFF	; 255
   1b342:	1f 4f       	sbci	r17, 0xFF	; 255
   1b344:	ec e0       	ldi	r30, 0x0C	; 12
   1b346:	f0 e0       	ldi	r31, 0x00	; 0
   1b348:	ec 0f       	add	r30, r28
   1b34a:	fd 1f       	adc	r31, r29
   1b34c:	e2 0d       	add	r30, r2
   1b34e:	f3 1d       	adc	r31, r3
   1b350:	20 83       	st	Z, r18
                }

                if(wind >= LIF_SECTOR_SIZE)
   1b352:	ef ef       	ldi	r30, 0xFF	; 255
   1b354:	8e 16       	cp	r8, r30
   1b356:	91 04       	cpc	r9, r1
   1b358:	09 f0       	breq	.+2      	; 0x1b35c <lif_extract_e010_as_ascii+0x33a>
   1b35a:	ac f5       	brge	.+106    	; 0x1b3c6 <lif_extract_e010_as_ascii+0x3a4>
                status = 0;
                done = 1;
                break;
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1b35c:	c4 5e       	subi	r28, 0xE4	; 228
   1b35e:	dd 4f       	sbci	r29, 0xFD	; 253
   1b360:	28 81       	ld	r18, Y
   1b362:	39 81       	ldd	r19, Y+1	; 0x01
   1b364:	cc 51       	subi	r28, 0x1C	; 28
   1b366:	d2 40       	sbci	r29, 0x02	; 2
   1b368:	2f 5f       	subi	r18, 0xFF	; 255
   1b36a:	3f 4f       	sbci	r19, 0xFF	; 255
   1b36c:	c4 5e       	subi	r28, 0xE4	; 228
   1b36e:	dd 4f       	sbci	r29, 0xFD	; 253
   1b370:	39 83       	std	Y+1, r19	; 0x01
   1b372:	28 83       	st	Y, r18
   1b374:	cc 51       	subi	r28, 0x1C	; 28
   1b376:	d2 40       	sbci	r29, 0x02	; 2
   1b378:	29 2e       	mov	r2, r25
   1b37a:	38 2e       	mov	r3, r24
   1b37c:	c4 5e       	subi	r28, 0xE4	; 228
   1b37e:	dd 4f       	sbci	r29, 0xFD	; 253
   1b380:	48 81       	ld	r20, Y
   1b382:	59 81       	ldd	r21, Y+1	; 0x01
   1b384:	cc 51       	subi	r28, 0x1C	; 28
   1b386:	d2 40       	sbci	r29, 0x02	; 2
   1b388:	4a 15       	cp	r20, r10
   1b38a:	5b 05       	cpc	r21, r11
   1b38c:	2c f2       	brlt	.-118    	; 0x1b318 <lif_extract_e010_as_ascii+0x2f6>
   1b38e:	62 c0       	rjmp	.+196    	; 0x1b454 <lif_extract_e010_as_ascii+0x432>
            {
                if(buf[ind] == '\r' && i == len-1)
   1b390:	c4 5e       	subi	r28, 0xE4	; 228
   1b392:	dd 4f       	sbci	r29, 0xFD	; 253
   1b394:	88 81       	ld	r24, Y
   1b396:	99 81       	ldd	r25, Y+1	; 0x01
   1b398:	cc 51       	subi	r28, 0x1C	; 28
   1b39a:	d2 40       	sbci	r29, 0x02	; 2
   1b39c:	c0 5d       	subi	r28, 0xD0	; 208
   1b39e:	dd 4f       	sbci	r29, 0xFD	; 253
   1b3a0:	a8 81       	ld	r26, Y
   1b3a2:	b9 81       	ldd	r27, Y+1	; 0x01
   1b3a4:	c0 53       	subi	r28, 0x30	; 48
   1b3a6:	d2 40       	sbci	r29, 0x02	; 2
   1b3a8:	8a 17       	cp	r24, r26
   1b3aa:	9b 07       	cpc	r25, r27
   1b3ac:	39 f6       	brne	.-114    	; 0x1b33c <lif_extract_e010_as_ascii+0x31a>
                {
                    wbuf[wind++] = '\n';
   1b3ae:	ec e0       	ldi	r30, 0x0C	; 12
   1b3b0:	f0 e0       	ldi	r31, 0x00	; 0
   1b3b2:	ec 0f       	add	r30, r28
   1b3b4:	fd 1f       	adc	r31, r29
   1b3b6:	e2 0d       	add	r30, r2
   1b3b8:	f3 1d       	adc	r31, r3
   1b3ba:	ba e0       	ldi	r27, 0x0A	; 10
   1b3bc:	b0 83       	st	Z, r27
                    ++ind;
   1b3be:	0f 5f       	subi	r16, 0xFF	; 255
   1b3c0:	1f 4f       	sbci	r17, 0xFF	; 255
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
                {
                    wbuf[wind++] = '\n';
   1b3c2:	1a 01       	movw	r2, r20
                    ++ind;
                    break;
   1b3c4:	47 c0       	rjmp	.+142    	; 0x1b454 <lif_extract_e010_as_ascii+0x432>
                    wbuf[wind++] = buf[ind++];
                }

                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
   1b3c6:	cc 5d       	subi	r28, 0xDC	; 220
   1b3c8:	dd 4f       	sbci	r29, 0xFD	; 253
   1b3ca:	28 81       	ld	r18, Y
   1b3cc:	39 81       	ldd	r19, Y+1	; 0x01
   1b3ce:	c4 52       	subi	r28, 0x24	; 36
   1b3d0:	d2 40       	sbci	r29, 0x02	; 2
   1b3d2:	a4 01       	movw	r20, r8
   1b3d4:	61 e0       	ldi	r22, 0x01	; 1
   1b3d6:	70 e0       	ldi	r23, 0x00	; 0
   1b3d8:	ce 01       	movw	r24, r28
   1b3da:	0c 96       	adiw	r24, 0x0c	; 12
   1b3dc:	0e 94 93 7c 	call	0xf926	; 0xf926 <fwrite>
                    if(size < wind)
   1b3e0:	88 15       	cp	r24, r8
   1b3e2:	99 05       	cpc	r25, r9
   1b3e4:	d4 f4       	brge	.+52     	; 0x1b41a <lif_extract_e010_as_ascii+0x3f8>
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1b3e6:	cb 5c       	subi	r28, 0xCB	; 203
   1b3e8:	dd 4f       	sbci	r29, 0xFD	; 253
   1b3ea:	28 81       	ld	r18, Y
   1b3ec:	39 81       	ldd	r19, Y+1	; 0x01
   1b3ee:	4a 81       	ldd	r20, Y+2	; 0x02
   1b3f0:	c5 53       	subi	r28, 0x35	; 53
   1b3f2:	d2 40       	sbci	r29, 0x02	; 2
   1b3f4:	ed b7       	in	r30, 0x3d	; 61
   1b3f6:	fe b7       	in	r31, 0x3e	; 62
   1b3f8:	21 83       	std	Z+1, r18	; 0x01
   1b3fa:	32 83       	std	Z+2, r19	; 0x02
   1b3fc:	43 83       	std	Z+3, r20	; 0x03
   1b3fe:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
                    ++ind;
                    break;
                }
                else
                {
                    wbuf[wind++] = buf[ind++];
   1b402:	14 01       	movw	r2, r8
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
                        done = 1;
   1b404:	21 e0       	ldi	r18, 0x01	; 1
   1b406:	30 e0       	ldi	r19, 0x00	; 0
   1b408:	ce 5d       	subi	r28, 0xDE	; 222
   1b40a:	dd 4f       	sbci	r29, 0xFD	; 253
   1b40c:	39 83       	std	Y+1, r19	; 0x01
   1b40e:	28 83       	st	Y, r18
   1b410:	c2 52       	subi	r28, 0x22	; 34
   1b412:	d2 40       	sbci	r29, 0x02	; 2
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
   1b414:	e1 2c       	mov	r14, r1
   1b416:	f1 2c       	mov	r15, r1
                        done = 1;
                        break;
   1b418:	1d c0       	rjmp	.+58     	; 0x1b454 <lif_extract_e010_as_ascii+0x432>
                    }
                    bytes += size;
   1b41a:	09 2e       	mov	r0, r25
   1b41c:	00 0c       	add	r0, r0
   1b41e:	aa 0b       	sbc	r26, r26
   1b420:	bb 0b       	sbc	r27, r27
   1b422:	48 0e       	add	r4, r24
   1b424:	59 1e       	adc	r5, r25
   1b426:	6a 1e       	adc	r6, r26
   1b428:	7b 1e       	adc	r7, r27
                    printf("\tWrote: %8ld\r", bytes);
   1b42a:	ed b7       	in	r30, 0x3d	; 61
   1b42c:	fe b7       	in	r31, 0x3e	; 62
   1b42e:	44 82       	std	Z+4, r4	; 0x04
   1b430:	55 82       	std	Z+5, r5	; 0x05
   1b432:	66 82       	std	Z+6, r6	; 0x06
   1b434:	77 82       	std	Z+7, r7	; 0x07
   1b436:	ce 5c       	subi	r28, 0xCE	; 206
   1b438:	dd 4f       	sbci	r29, 0xFD	; 253
   1b43a:	28 81       	ld	r18, Y
   1b43c:	39 81       	ldd	r19, Y+1	; 0x01
   1b43e:	4a 81       	ldd	r20, Y+2	; 0x02
   1b440:	c2 53       	subi	r28, 0x32	; 50
   1b442:	d2 40       	sbci	r29, 0x02	; 2
   1b444:	21 83       	std	Z+1, r18	; 0x01
   1b446:	32 83       	std	Z+2, r19	; 0x02
   1b448:	43 83       	std	Z+3, r20	; 0x03
   1b44a:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
                    wind = 0;
   1b44e:	90 e0       	ldi	r25, 0x00	; 0
   1b450:	80 e0       	ldi	r24, 0x00	; 0
   1b452:	84 cf       	rjmp	.-248    	; 0x1b35c <lif_extract_e010_as_ascii+0x33a>
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1b454:	0f 3f       	cpi	r16, 0xFF	; 255
   1b456:	11 05       	cpc	r17, r1
   1b458:	09 f0       	breq	.+2      	; 0x1b45c <lif_extract_e010_as_ascii+0x43a>
   1b45a:	0c f4       	brge	.+2      	; 0x1b45e <lif_extract_e010_as_ascii+0x43c>
   1b45c:	e5 ce       	rjmp	.-566    	; 0x1b228 <lif_extract_e010_as_ascii+0x206>
   1b45e:	08 c0       	rjmp	.+16     	; 0x1b470 <lif_extract_e010_as_ascii+0x44e>
                len = buf[ind++] & 0xff;
                len |= ((buf[ind++] & 0xff) <<8);
// EOF ?
                if(len == 0)
                {
                    done = 1;
   1b460:	a1 e0       	ldi	r26, 0x01	; 1
   1b462:	b0 e0       	ldi	r27, 0x00	; 0
   1b464:	ce 5d       	subi	r28, 0xDE	; 222
   1b466:	dd 4f       	sbci	r29, 0xFD	; 253
   1b468:	b9 83       	std	Y+1, r27	; 0x01
   1b46a:	a8 83       	st	Y, r26
   1b46c:	c2 52       	subi	r28, 0x22	; 34
   1b46e:	d2 40       	sbci	r29, 0x02	; 2

            }                                     // for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)

        }                                         // while(ind < LIF_SECTOR_SIZE && status)

        offset += (long) LIF_SECTOR_SIZE;
   1b470:	c2 5e       	subi	r28, 0xE2	; 226
   1b472:	dd 4f       	sbci	r29, 0xFD	; 253
   1b474:	28 81       	ld	r18, Y
   1b476:	39 81       	ldd	r19, Y+1	; 0x01
   1b478:	4a 81       	ldd	r20, Y+2	; 0x02
   1b47a:	5b 81       	ldd	r21, Y+3	; 0x03
   1b47c:	ce 51       	subi	r28, 0x1E	; 30
   1b47e:	d2 40       	sbci	r29, 0x02	; 2
   1b480:	3f 5f       	subi	r19, 0xFF	; 255
   1b482:	4f 4f       	sbci	r20, 0xFF	; 255
   1b484:	5f 4f       	sbci	r21, 0xFF	; 255
   1b486:	c2 5e       	subi	r28, 0xE2	; 226
   1b488:	dd 4f       	sbci	r29, 0xFD	; 253
   1b48a:	28 83       	st	Y, r18
   1b48c:	39 83       	std	Y+1, r19	; 0x01
   1b48e:	4a 83       	std	Y+2, r20	; 0x02
   1b490:	5b 83       	std	Y+3, r21	; 0x03
   1b492:	ce 51       	subi	r28, 0x1E	; 30
   1b494:	d2 40       	sbci	r29, 0x02	; 2
   1b496:	97 ce       	rjmp	.-722    	; 0x1b1c6 <lif_extract_e010_as_ascii+0x1a4>
    {
// LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
        if(size < LIF_SECTOR_SIZE)
        {
            status = 0;
   1b498:	e1 2c       	mov	r14, r1
   1b49a:	f1 2c       	mov	r15, r1
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b49c:	c6 01       	movw	r24, r12
   1b49e:	0e 94 c2 ca 	call	0x19584	; 0x19584 <lif_close_volume>

    }                                             // while(offset <= end)

    lif_closedir(LIF);
// Flush any remaining bytes
    if(wind)
   1b4a2:	21 14       	cp	r2, r1
   1b4a4:	31 04       	cpc	r3, r1
   1b4a6:	31 f1       	breq	.+76     	; 0x1b4f4 <lif_extract_e010_as_ascii+0x4d2>
    {
        size = fwrite(wbuf,1,wind,fo);
   1b4a8:	cc 5d       	subi	r28, 0xDC	; 220
   1b4aa:	dd 4f       	sbci	r29, 0xFD	; 253
   1b4ac:	28 81       	ld	r18, Y
   1b4ae:	39 81       	ldd	r19, Y+1	; 0x01
   1b4b0:	c4 52       	subi	r28, 0x24	; 36
   1b4b2:	d2 40       	sbci	r29, 0x02	; 2
   1b4b4:	a1 01       	movw	r20, r2
   1b4b6:	61 e0       	ldi	r22, 0x01	; 1
   1b4b8:	70 e0       	ldi	r23, 0x00	; 0
   1b4ba:	ce 01       	movw	r24, r28
   1b4bc:	0c 96       	adiw	r24, 0x0c	; 12
   1b4be:	0e 94 93 7c 	call	0xf926	; 0xf926 <fwrite>
   1b4c2:	8c 01       	movw	r16, r24
        if(size < wind)
   1b4c4:	82 15       	cp	r24, r2
   1b4c6:	93 05       	cpc	r25, r3
   1b4c8:	64 f4       	brge	.+24     	; 0x1b4e2 <lif_extract_e010_as_ascii+0x4c0>
        {
            printf("lif_extract_e010_as_ascii: write error\n");
   1b4ca:	8e e3       	ldi	r24, 0x3E	; 62
   1b4cc:	96 e3       	ldi	r25, 0x36	; 54
   1b4ce:	a0 e0       	ldi	r26, 0x00	; 0
   1b4d0:	ed b7       	in	r30, 0x3d	; 61
   1b4d2:	fe b7       	in	r31, 0x3e	; 62
   1b4d4:	81 83       	std	Z+1, r24	; 0x01
   1b4d6:	92 83       	std	Z+2, r25	; 0x02
   1b4d8:	a3 83       	std	Z+3, r26	; 0x03
   1b4da:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
            status = 0;
   1b4de:	e1 2c       	mov	r14, r1
   1b4e0:	f1 2c       	mov	r15, r1
        }
        bytes += size;
   1b4e2:	c8 01       	movw	r24, r16
   1b4e4:	01 2e       	mov	r0, r17
   1b4e6:	00 0c       	add	r0, r0
   1b4e8:	aa 0b       	sbc	r26, r26
   1b4ea:	bb 0b       	sbc	r27, r27
   1b4ec:	48 0e       	add	r4, r24
   1b4ee:	59 1e       	adc	r5, r25
   1b4f0:	6a 1e       	adc	r6, r26
   1b4f2:	7b 1e       	adc	r7, r27
    }
    fclose(fo);
   1b4f4:	cc 5d       	subi	r28, 0xDC	; 220
   1b4f6:	dd 4f       	sbci	r29, 0xFD	; 253
   1b4f8:	88 81       	ld	r24, Y
   1b4fa:	99 81       	ldd	r25, Y+1	; 0x01
   1b4fc:	c4 52       	subi	r28, 0x24	; 36
   1b4fe:	d2 40       	sbci	r29, 0x02	; 2
   1b500:	0e 94 15 7d 	call	0xfa2a	; 0xfa2a <fclose>
    if(t)
   1b504:	c8 5d       	subi	r28, 0xD8	; 216
   1b506:	dd 4f       	sbci	r29, 0xFD	; 253
   1b508:	28 81       	ld	r18, Y
   1b50a:	39 81       	ldd	r19, Y+1	; 0x01
   1b50c:	4a 81       	ldd	r20, Y+2	; 0x02
   1b50e:	5b 81       	ldd	r21, Y+3	; 0x03
   1b510:	c8 52       	subi	r28, 0x28	; 40
   1b512:	d2 40       	sbci	r29, 0x02	; 2
   1b514:	21 15       	cp	r18, r1
   1b516:	31 05       	cpc	r19, r1
   1b518:	41 05       	cpc	r20, r1
   1b51a:	51 05       	cpc	r21, r1
   1b51c:	d9 f0       	breq	.+54     	; 0x1b554 <lif_extract_e010_as_ascii+0x532>
    {
        struct utimbuf times;
        times.modtime = t;
   1b51e:	c8 5e       	subi	r28, 0xE8	; 232
   1b520:	dd 4f       	sbci	r29, 0xFD	; 253
   1b522:	28 83       	st	Y, r18
   1b524:	39 83       	std	Y+1, r19	; 0x01
   1b526:	4a 83       	std	Y+2, r20	; 0x02
   1b528:	5b 83       	std	Y+3, r21	; 0x03
   1b52a:	c8 51       	subi	r28, 0x18	; 24
   1b52c:	d2 40       	sbci	r29, 0x02	; 2
        times.actime = t;
   1b52e:	cc 5e       	subi	r28, 0xEC	; 236
   1b530:	dd 4f       	sbci	r29, 0xFD	; 253
   1b532:	28 83       	st	Y, r18
   1b534:	39 83       	std	Y+1, r19	; 0x01
   1b536:	4a 83       	std	Y+2, r20	; 0x02
   1b538:	5b 83       	std	Y+3, r21	; 0x03
   1b53a:	c4 51       	subi	r28, 0x14	; 20
   1b53c:	d2 40       	sbci	r29, 0x02	; 2
        utime(username, (struct utimbuf *) &times);
   1b53e:	be 01       	movw	r22, r28
   1b540:	6c 5e       	subi	r22, 0xEC	; 236
   1b542:	7d 4f       	sbci	r23, 0xFD	; 253
   1b544:	ca 5d       	subi	r28, 0xDA	; 218
   1b546:	dd 4f       	sbci	r29, 0xFD	; 253
   1b548:	88 81       	ld	r24, Y
   1b54a:	99 81       	ldd	r25, Y+1	; 0x01
   1b54c:	c6 52       	subi	r28, 0x26	; 38
   1b54e:	d2 40       	sbci	r29, 0x02	; 2
   1b550:	0e 94 52 7a 	call	0xf4a4	; 0xf4a4 <utime>
    }
    sync();
   1b554:	0e 94 10 7c 	call	0xf820	; 0xf820 <sync>
    printf("\tWrote: %8ld\n", bytes);
   1b558:	ed b7       	in	r30, 0x3d	; 61
   1b55a:	fe b7       	in	r31, 0x3e	; 62
   1b55c:	44 82       	std	Z+4, r4	; 0x04
   1b55e:	55 82       	std	Z+5, r5	; 0x05
   1b560:	66 82       	std	Z+6, r6	; 0x06
   1b562:	77 82       	std	Z+7, r7	; 0x07
   1b564:	80 e3       	ldi	r24, 0x30	; 48
   1b566:	96 e3       	ldi	r25, 0x36	; 54
   1b568:	a0 e0       	ldi	r26, 0x00	; 0
   1b56a:	81 83       	std	Z+1, r24	; 0x01
   1b56c:	92 83       	std	Z+2, r25	; 0x02
   1b56e:	a3 83       	std	Z+3, r26	; 0x03
   1b570:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    return(status);
   1b574:	c7 01       	movw	r24, r14
}
   1b576:	c9 5c       	subi	r28, 0xC9	; 201
   1b578:	dd 4f       	sbci	r29, 0xFD	; 253
   1b57a:	e2 e1       	ldi	r30, 0x12	; 18
   1b57c:	0c 94 29 e7 	jmp	0x1ce52	; 0x1ce52 <__epilogue_restores__>

0001b580 <lif_extract_lif_as_lif>:
/// @param[in] lifname:  name of file in LIF image we want to extract
/// @param[in] username: new LIF file to create
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_lif_as_lif(char *lifimagename, char *lifname, char *username)
{
   1b580:	a4 e1       	ldi	r26, 0x14	; 20
   1b582:	b1 e0       	ldi	r27, 0x01	; 1
   1b584:	e6 ec       	ldi	r30, 0xC6	; 198
   1b586:	fa ed       	ldi	r31, 0xDA	; 218
   1b588:	0c 94 0d e7 	jmp	0x1ce1a	; 0x1ce1a <__prologue_saves__>
   1b58c:	7c 01       	movw	r14, r24
   1b58e:	8b 01       	movw	r16, r22
   1b590:	3a 01       	movw	r6, r20
    int i, size;
    int sectors;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    LIF = lif_open_volume(lifimagename,"r");
   1b592:	62 e4       	ldi	r22, 0x42	; 66
   1b594:	73 e0       	ldi	r23, 0x03	; 3
   1b596:	0e 94 7f d1 	call	0x1a2fe	; 0x1a2fe <lif_open_volume>
   1b59a:	4c 01       	movw	r8, r24
    if(LIF == NULL)
   1b59c:	00 97       	sbiw	r24, 0x00	; 0
   1b59e:	69 f4       	brne	.+26     	; 0x1b5ba <lif_extract_lif_as_lif+0x3a>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1b5a0:	ed b7       	in	r30, 0x3d	; 61
   1b5a2:	fe b7       	in	r31, 0x3e	; 62
   1b5a4:	f5 82       	std	Z+5, r15	; 0x05
   1b5a6:	e4 82       	std	Z+4, r14	; 0x04
   1b5a8:	88 e1       	ldi	r24, 0x18	; 24
   1b5aa:	96 e3       	ldi	r25, 0x36	; 54
   1b5ac:	a0 e0       	ldi	r26, 0x00	; 0
   1b5ae:	81 83       	std	Z+1, r24	; 0x01
   1b5b0:	92 83       	std	Z+2, r25	; 0x02
   1b5b2:	a3 83       	std	Z+3, r26	; 0x03
   1b5b4:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   1b5b8:	13 c0       	rjmp	.+38     	; 0x1b5e0 <lif_extract_lif_as_lif+0x60>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1b5ba:	b8 01       	movw	r22, r16
   1b5bc:	75 d9       	rcall	.-3350   	; 0x1a8a8 <lif_find_file>
    if(index == -1)
   1b5be:	01 96       	adiw	r24, 0x01	; 1
   1b5c0:	91 f4       	brne	.+36     	; 0x1b5e6 <lif_extract_lif_as_lif+0x66>
    {
        printf("File not found:%s\n", lifname);
   1b5c2:	ed b7       	in	r30, 0x3d	; 61
   1b5c4:	fe b7       	in	r31, 0x3e	; 62
   1b5c6:	15 83       	std	Z+5, r17	; 0x05
   1b5c8:	04 83       	std	Z+4, r16	; 0x04
   1b5ca:	85 e0       	ldi	r24, 0x05	; 5
   1b5cc:	96 e3       	ldi	r25, 0x36	; 54
   1b5ce:	a0 e0       	ldi	r26, 0x00	; 0
   1b5d0:	81 83       	std	Z+1, r24	; 0x01
   1b5d2:	92 83       	std	Z+2, r25	; 0x02
   1b5d4:	a3 83       	std	Z+3, r26	; 0x03
   1b5d6:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b5da:	c4 01       	movw	r24, r8
   1b5dc:	0e 94 c2 ca 	call	0x19584	; 0x19584 <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1b5e0:	00 e0       	ldi	r16, 0x00	; 0
   1b5e2:	10 e0       	ldi	r17, 0x00	; 0
   1b5e4:	ff c0       	rjmp	.+510    	; 0x1b7e4 <lif_extract_lif_as_lif+0x264>
    }

    sectors = LIF->DIR.FileSectors;
   1b5e6:	94 01       	movw	r18, r8
   1b5e8:	20 5a       	subi	r18, 0xA0	; 160
   1b5ea:	3f 4f       	sbci	r19, 0xFF	; 255
   1b5ec:	c0 5f       	subi	r28, 0xF0	; 240
   1b5ee:	de 4f       	sbci	r29, 0xFE	; 254
   1b5f0:	39 83       	std	Y+1, r19	; 0x01
   1b5f2:	28 83       	st	Y, r18
   1b5f4:	c0 51       	subi	r28, 0x10	; 16
   1b5f6:	d1 40       	sbci	r29, 0x01	; 1

//Initialize the user file lif_t structure
    ULIF = lif_create_volume(username, "HFSLIF",1,1,sectors);
   1b5f8:	f9 01       	movw	r30, r18
   1b5fa:	a0 80       	ld	r10, Z
   1b5fc:	b1 80       	ldd	r11, Z+1	; 0x01
   1b5fe:	0b 2c       	mov	r0, r11
   1b600:	00 0c       	add	r0, r0
   1b602:	cc 08       	sbc	r12, r12
   1b604:	dd 08       	sbc	r13, r13
   1b606:	e1 2c       	mov	r14, r1
   1b608:	f1 2c       	mov	r15, r1
   1b60a:	87 01       	movw	r16, r14
   1b60c:	e3 94       	inc	r14
   1b60e:	21 e0       	ldi	r18, 0x01	; 1
   1b610:	30 e0       	ldi	r19, 0x00	; 0
   1b612:	40 e0       	ldi	r20, 0x00	; 0
   1b614:	50 e0       	ldi	r21, 0x00	; 0
   1b616:	65 e6       	ldi	r22, 0x65	; 101
   1b618:	76 e1       	ldi	r23, 0x16	; 22
   1b61a:	c3 01       	movw	r24, r6
   1b61c:	0e 94 35 cd 	call	0x19a6a	; 0x19a6a <lif_create_volume>
   1b620:	7c 01       	movw	r14, r24
    if(ULIF == NULL)
   1b622:	89 2b       	or	r24, r25
   1b624:	d1 f2       	breq	.-76     	; 0x1b5da <lif_extract_lif_as_lif+0x5a>
    }

// Only the start sector changes

// Copy directory record
    ULIF->DIR = LIF->DIR;
   1b626:	81 e2       	ldi	r24, 0x21	; 33
   1b628:	f4 01       	movw	r30, r8
   1b62a:	e1 5b       	subi	r30, 0xB1	; 177
   1b62c:	ff 4f       	sbci	r31, 0xFF	; 255
   1b62e:	d7 01       	movw	r26, r14
   1b630:	a1 5b       	subi	r26, 0xB1	; 177
   1b632:	bf 4f       	sbci	r27, 0xFF	; 255
   1b634:	01 90       	ld	r0, Z+
   1b636:	0d 92       	st	X+, r0
   1b638:	8a 95       	dec	r24
   1b63a:	e1 f7       	brne	.-8      	; 0x1b634 <lif_extract_lif_as_lif+0xb4>

    ULIF->DIR.FileStartSector = 2;
   1b63c:	82 e0       	ldi	r24, 0x02	; 2
   1b63e:	90 e0       	ldi	r25, 0x00	; 0
   1b640:	a0 e0       	ldi	r26, 0x00	; 0
   1b642:	b0 e0       	ldi	r27, 0x00	; 0
   1b644:	f7 01       	movw	r30, r14
   1b646:	e4 5a       	subi	r30, 0xA4	; 164
   1b648:	ff 4f       	sbci	r31, 0xFF	; 255
   1b64a:	80 83       	st	Z, r24
   1b64c:	91 83       	std	Z+1, r25	; 0x01
   1b64e:	a2 83       	std	Z+2, r26	; 0x02
   1b650:	b3 83       	std	Z+3, r27	; 0x03
    ULIF->filesectors = LIF->DIR.FileSectors;
   1b652:	c0 5f       	subi	r28, 0xF0	; 240
   1b654:	de 4f       	sbci	r29, 0xFE	; 254
   1b656:	e8 81       	ld	r30, Y
   1b658:	f9 81       	ldd	r31, Y+1	; 0x01
   1b65a:	c0 51       	subi	r28, 0x10	; 16
   1b65c:	d1 40       	sbci	r29, 0x01	; 1
   1b65e:	80 81       	ld	r24, Z
   1b660:	91 81       	ldd	r25, Z+1	; 0x01
   1b662:	a2 81       	ldd	r26, Z+2	; 0x02
   1b664:	b3 81       	ldd	r27, Z+3	; 0x03
   1b666:	f7 01       	movw	r30, r14
   1b668:	80 8b       	std	Z+16, r24	; 0x10
   1b66a:	91 8b       	std	Z+17, r25	; 0x11
   1b66c:	a2 8b       	std	Z+18, r26	; 0x12
   1b66e:	b3 8b       	std	Z+19, r27	; 0x13

    if( !lif_writedirindex(ULIF,0))
   1b670:	60 e0       	ldi	r22, 0x00	; 0
   1b672:	70 e0       	ldi	r23, 0x00	; 0
   1b674:	c7 01       	movw	r24, r14
   1b676:	0e 94 b7 cb 	call	0x1976e	; 0x1976e <lif_writedirindex>
   1b67a:	8c 01       	movw	r16, r24
   1b67c:	89 2b       	or	r24, r25
   1b67e:	41 f0       	breq	.+16     	; 0x1b690 <lif_extract_lif_as_lif+0x110>
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
    }
    if( !lif_writedirEOF(ULIF,1) )
   1b680:	61 e0       	ldi	r22, 0x01	; 1
   1b682:	70 e0       	ldi	r23, 0x00	; 0
   1b684:	c7 01       	movw	r24, r14
   1b686:	0e 94 13 cc 	call	0x19826	; 0x19826 <lif_writedirEOF>
   1b68a:	8c 01       	movw	r16, r24
   1b68c:	89 2b       	or	r24, r25
   1b68e:	39 f4       	brne	.+14     	; 0x1b69e <lif_extract_lif_as_lif+0x11e>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b690:	c4 01       	movw	r24, r8
   1b692:	0e 94 c2 ca 	call	0x19584	; 0x19584 <lif_close_volume>
   1b696:	c7 01       	movw	r24, r14
   1b698:	0e 94 c2 ca 	call	0x19584	; 0x19584 <lif_close_volume>
    }
    if( !lif_writedirEOF(ULIF,1) )
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
   1b69c:	a3 c0       	rjmp	.+326    	; 0x1b7e4 <lif_extract_lif_as_lif+0x264>
    }

    uoffset =  ULIF->filestart * (long) LIF_SECTOR_SIZE;
   1b69e:	f7 01       	movw	r30, r14
   1b6a0:	44 84       	ldd	r4, Z+12	; 0x0c
   1b6a2:	55 84       	ldd	r5, Z+13	; 0x0d
   1b6a4:	66 84       	ldd	r6, Z+14	; 0x0e
   1b6a6:	77 84       	ldd	r7, Z+15	; 0x0f
   1b6a8:	76 2c       	mov	r7, r6
   1b6aa:	65 2c       	mov	r6, r5
   1b6ac:	54 2c       	mov	r5, r4
   1b6ae:	44 24       	eor	r4, r4

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b6b0:	f4 01       	movw	r30, r8
   1b6b2:	e4 5a       	subi	r30, 0xA4	; 164
   1b6b4:	ff 4f       	sbci	r31, 0xFF	; 255
   1b6b6:	80 81       	ld	r24, Z
   1b6b8:	91 81       	ldd	r25, Z+1	; 0x01
   1b6ba:	a2 81       	ldd	r26, Z+2	; 0x02
   1b6bc:	b3 81       	ldd	r27, Z+3	; 0x03
   1b6be:	22 27       	eor	r18, r18
   1b6c0:	38 2f       	mov	r19, r24
   1b6c2:	49 2f       	mov	r20, r25
   1b6c4:	5a 2f       	mov	r21, r26
   1b6c6:	c4 5f       	subi	r28, 0xF4	; 244
   1b6c8:	de 4f       	sbci	r29, 0xFE	; 254
   1b6ca:	28 83       	st	Y, r18
   1b6cc:	39 83       	std	Y+1, r19	; 0x01
   1b6ce:	4a 83       	std	Y+2, r20	; 0x02
   1b6d0:	5b 83       	std	Y+3, r21	; 0x03
   1b6d2:	cc 50       	subi	r28, 0x0C	; 12
   1b6d4:	d1 40       	sbci	r29, 0x01	; 1

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b6d6:	21 2c       	mov	r2, r1
   1b6d8:	31 2c       	mov	r3, r1
            return(0);
        }
        bytes += size;
        offset += size;
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
   1b6da:	87 ef       	ldi	r24, 0xF7	; 247
   1b6dc:	95 e3       	ldi	r25, 0x35	; 53
   1b6de:	9c 01       	movw	r18, r24
   1b6e0:	40 e0       	ldi	r20, 0x00	; 0
   1b6e2:	ce 5e       	subi	r28, 0xEE	; 238
   1b6e4:	de 4f       	sbci	r29, 0xFE	; 254
   1b6e6:	28 83       	st	Y, r18
   1b6e8:	39 83       	std	Y+1, r19	; 0x01
   1b6ea:	4a 83       	std	Y+2, r20	; 0x02
   1b6ec:	c2 51       	subi	r28, 0x12	; 18
   1b6ee:	d1 40       	sbci	r29, 0x01	; 1

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b6f0:	c0 5f       	subi	r28, 0xF0	; 240
   1b6f2:	de 4f       	sbci	r29, 0xFE	; 254
   1b6f4:	e8 81       	ld	r30, Y
   1b6f6:	f9 81       	ldd	r31, Y+1	; 0x01
   1b6f8:	c0 51       	subi	r28, 0x10	; 16
   1b6fa:	d1 40       	sbci	r29, 0x01	; 1
   1b6fc:	80 81       	ld	r24, Z
   1b6fe:	91 81       	ldd	r25, Z+1	; 0x01
   1b700:	28 16       	cp	r2, r24
   1b702:	39 06       	cpc	r3, r25
   1b704:	0c f0       	brlt	.+2      	; 0x1b708 <lif_extract_lif_as_lif+0x188>
   1b706:	58 c0       	rjmp	.+176    	; 0x1b7b8 <lif_extract_lif_as_lif+0x238>
    {
        size = lif_read(LIF, buf, offset,LIF_SECTOR_SIZE);
   1b708:	00 e0       	ldi	r16, 0x00	; 0
   1b70a:	11 e0       	ldi	r17, 0x01	; 1
   1b70c:	c4 5f       	subi	r28, 0xF4	; 244
   1b70e:	de 4f       	sbci	r29, 0xFE	; 254
   1b710:	28 81       	ld	r18, Y
   1b712:	39 81       	ldd	r19, Y+1	; 0x01
   1b714:	4a 81       	ldd	r20, Y+2	; 0x02
   1b716:	5b 81       	ldd	r21, Y+3	; 0x03
   1b718:	cc 50       	subi	r28, 0x0C	; 12
   1b71a:	d1 40       	sbci	r29, 0x01	; 1
   1b71c:	be 01       	movw	r22, r28
   1b71e:	68 5f       	subi	r22, 0xF8	; 248
   1b720:	7f 4f       	sbci	r23, 0xFF	; 255
   1b722:	c4 01       	movw	r24, r8
   1b724:	0e 94 f6 c1 	call	0x183ec	; 0x183ec <lif_read>
   1b728:	5b 01       	movw	r10, r22
   1b72a:	6c 01       	movw	r12, r24
        if(size < LIF_SECTOR_SIZE)
   1b72c:	6f 3f       	cpi	r22, 0xFF	; 255
   1b72e:	71 05       	cpc	r23, r1
   1b730:	09 f0       	breq	.+2      	; 0x1b734 <lif_extract_lif_as_lif+0x1b4>
   1b732:	2c f4       	brge	.+10     	; 0x1b73e <lif_extract_lif_as_lif+0x1be>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b734:	c4 01       	movw	r24, r8
   1b736:	0e 94 c2 ca 	call	0x19584	; 0x19584 <lif_close_volume>
   1b73a:	c7 01       	movw	r24, r14
   1b73c:	4f cf       	rjmp	.-354    	; 0x1b5dc <lif_extract_lif_as_lif+0x5c>
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }

        lif_write(ULIF,buf,uoffset,LIF_SECTOR_SIZE);
   1b73e:	00 e0       	ldi	r16, 0x00	; 0
   1b740:	11 e0       	ldi	r17, 0x01	; 1
   1b742:	a3 01       	movw	r20, r6
   1b744:	92 01       	movw	r18, r4
   1b746:	be 01       	movw	r22, r28
   1b748:	68 5f       	subi	r22, 0xF8	; 248
   1b74a:	7f 4f       	sbci	r23, 0xFF	; 255
   1b74c:	c7 01       	movw	r24, r14
   1b74e:	0e 94 49 c2 	call	0x18492	; 0x18492 <lif_write>
        {
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }
        bytes += size;
   1b752:	c5 01       	movw	r24, r10
   1b754:	0b 2c       	mov	r0, r11
   1b756:	00 0c       	add	r0, r0
   1b758:	aa 0b       	sbc	r26, r26
   1b75a:	bb 0b       	sbc	r27, r27
   1b75c:	48 0e       	add	r4, r24
   1b75e:	59 1e       	adc	r5, r25
   1b760:	6a 1e       	adc	r6, r26
   1b762:	7b 1e       	adc	r7, r27
        offset += size;
   1b764:	c4 5f       	subi	r28, 0xF4	; 244
   1b766:	de 4f       	sbci	r29, 0xFE	; 254
   1b768:	28 81       	ld	r18, Y
   1b76a:	39 81       	ldd	r19, Y+1	; 0x01
   1b76c:	4a 81       	ldd	r20, Y+2	; 0x02
   1b76e:	5b 81       	ldd	r21, Y+3	; 0x03
   1b770:	cc 50       	subi	r28, 0x0C	; 12
   1b772:	d1 40       	sbci	r29, 0x01	; 1
   1b774:	28 0f       	add	r18, r24
   1b776:	39 1f       	adc	r19, r25
   1b778:	4a 1f       	adc	r20, r26
   1b77a:	5b 1f       	adc	r21, r27
   1b77c:	c4 5f       	subi	r28, 0xF4	; 244
   1b77e:	de 4f       	sbci	r29, 0xFE	; 254
   1b780:	28 83       	st	Y, r18
   1b782:	39 83       	std	Y+1, r19	; 0x01
   1b784:	4a 83       	std	Y+2, r20	; 0x02
   1b786:	5b 83       	std	Y+3, r21	; 0x03
   1b788:	cc 50       	subi	r28, 0x0C	; 12
   1b78a:	d1 40       	sbci	r29, 0x01	; 1
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
   1b78c:	ed b7       	in	r30, 0x3d	; 61
   1b78e:	fe b7       	in	r31, 0x3e	; 62
   1b790:	44 82       	std	Z+4, r4	; 0x04
   1b792:	55 82       	std	Z+5, r5	; 0x05
   1b794:	66 82       	std	Z+6, r6	; 0x06
   1b796:	77 82       	std	Z+7, r7	; 0x07
   1b798:	ce 5e       	subi	r28, 0xEE	; 238
   1b79a:	de 4f       	sbci	r29, 0xFE	; 254
   1b79c:	28 81       	ld	r18, Y
   1b79e:	39 81       	ldd	r19, Y+1	; 0x01
   1b7a0:	4a 81       	ldd	r20, Y+2	; 0x02
   1b7a2:	c2 51       	subi	r28, 0x12	; 18
   1b7a4:	d1 40       	sbci	r29, 0x01	; 1
   1b7a6:	21 83       	std	Z+1, r18	; 0x01
   1b7a8:	32 83       	std	Z+2, r19	; 0x02
   1b7aa:	43 83       	std	Z+3, r20	; 0x03
   1b7ac:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b7b0:	ff ef       	ldi	r31, 0xFF	; 255
   1b7b2:	2f 1a       	sub	r2, r31
   1b7b4:	3f 0a       	sbc	r3, r31
   1b7b6:	9c cf       	rjmp	.-200    	; 0x1b6f0 <lif_extract_lif_as_lif+0x170>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b7b8:	c4 01       	movw	r24, r8
   1b7ba:	0e 94 c2 ca 	call	0x19584	; 0x19584 <lif_close_volume>
   1b7be:	c7 01       	movw	r24, r14
   1b7c0:	0e 94 c2 ca 	call	0x19584	; 0x19584 <lif_close_volume>
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
    }
    lif_closedir(LIF);
    lif_closedir(ULIF);
    printf("\tWrote: %8ld\n", bytes);
   1b7c4:	ed b7       	in	r30, 0x3d	; 61
   1b7c6:	fe b7       	in	r31, 0x3e	; 62
   1b7c8:	44 82       	std	Z+4, r4	; 0x04
   1b7ca:	55 82       	std	Z+5, r5	; 0x05
   1b7cc:	66 82       	std	Z+6, r6	; 0x06
   1b7ce:	77 82       	std	Z+7, r7	; 0x07
   1b7d0:	89 ee       	ldi	r24, 0xE9	; 233
   1b7d2:	95 e3       	ldi	r25, 0x35	; 53
   1b7d4:	a0 e0       	ldi	r26, 0x00	; 0
   1b7d6:	81 83       	std	Z+1, r24	; 0x01
   1b7d8:	92 83       	std	Z+2, r25	; 0x02
   1b7da:	a3 83       	std	Z+3, r26	; 0x03
   1b7dc:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    return(1);
   1b7e0:	01 e0       	ldi	r16, 0x01	; 1
   1b7e2:	10 e0       	ldi	r17, 0x00	; 0
}
   1b7e4:	c8 01       	movw	r24, r16
   1b7e6:	cc 5e       	subi	r28, 0xEC	; 236
   1b7e8:	de 4f       	sbci	r29, 0xFE	; 254
   1b7ea:	e2 e1       	ldi	r30, 0x12	; 18
   1b7ec:	0c 94 29 e7 	jmp	0x1ce52	; 0x1ce52 <__epilogue_restores__>

0001b7f0 <lif_add_lif_file>:
/// @param[in] lifname: LIF file name to copy file to
/// @param[in] userfile: LIF mage name copy file from
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_lif_file(char *lifimagename, char *lifname, char *userfile)
{
   1b7f0:	2f 92       	push	r2
   1b7f2:	3f 92       	push	r3
   1b7f4:	4f 92       	push	r4
   1b7f6:	5f 92       	push	r5
   1b7f8:	6f 92       	push	r6
   1b7fa:	8f 92       	push	r8
   1b7fc:	9f 92       	push	r9
   1b7fe:	af 92       	push	r10
   1b800:	bf 92       	push	r11
   1b802:	cf 92       	push	r12
   1b804:	df 92       	push	r13
   1b806:	ef 92       	push	r14
   1b808:	ff 92       	push	r15
   1b80a:	0f 93       	push	r16
   1b80c:	1f 93       	push	r17
   1b80e:	cf 93       	push	r28
   1b810:	df 93       	push	r29
   1b812:	cd b7       	in	r28, 0x3d	; 61
   1b814:	de b7       	in	r29, 0x3e	; 62
   1b816:	cd 51       	subi	r28, 0x1D	; 29
   1b818:	d1 40       	sbci	r29, 0x01	; 1
   1b81a:	0f b6       	in	r0, 0x3f	; 63
   1b81c:	f8 94       	cli
   1b81e:	de bf       	out	0x3e, r29	; 62
   1b820:	0f be       	out	0x3f, r0	; 63
   1b822:	cd bf       	out	0x3d, r28	; 61
   1b824:	5c 01       	movw	r10, r24
   1b826:	7b 01       	movw	r14, r22
   1b828:	4a 01       	movw	r8, r20
    long offset, uoffset, start, bytes;
    int i, size;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    if(!*lifimagename)
   1b82a:	dc 01       	movw	r26, r24
   1b82c:	8c 91       	ld	r24, X
   1b82e:	81 11       	cpse	r24, r1
   1b830:	03 c0       	rjmp	.+6      	; 0x1b838 <lif_add_lif_file+0x48>
    {
        printf("lif_add: lifimagename is empty\n");
   1b832:	89 ec       	ldi	r24, 0xC9	; 201
   1b834:	95 e3       	ldi	r25, 0x35	; 53
   1b836:	06 c0       	rjmp	.+12     	; 0x1b844 <lif_add_lif_file+0x54>
        return(-1);
    }
    if(!*lifname)
   1b838:	db 01       	movw	r26, r22
   1b83a:	8c 91       	ld	r24, X
   1b83c:	81 11       	cpse	r24, r1
   1b83e:	0b c0       	rjmp	.+22     	; 0x1b856 <lif_add_lif_file+0x66>
    {
        printf("lif_add: lifname is empty\n");
   1b840:	8e ea       	ldi	r24, 0xAE	; 174
   1b842:	95 e3       	ldi	r25, 0x35	; 53
   1b844:	a0 e0       	ldi	r26, 0x00	; 0
   1b846:	ed b7       	in	r30, 0x3d	; 61
   1b848:	fe b7       	in	r31, 0x3e	; 62
   1b84a:	81 83       	std	Z+1, r24	; 0x01
   1b84c:	92 83       	std	Z+2, r25	; 0x02
   1b84e:	a3 83       	std	Z+3, r26	; 0x03
   1b850:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   1b854:	25 c1       	rjmp	.+586    	; 0x1baa0 <lif_add_lif_file+0x2b0>
        return(-1);
    }
    if(!*userfile)
   1b856:	da 01       	movw	r26, r20
   1b858:	8c 91       	ld	r24, X
   1b85a:	81 11       	cpse	r24, r1
   1b85c:	03 c0       	rjmp	.+6      	; 0x1b864 <lif_add_lif_file+0x74>
    {
        printf("lif_add: userfile is empty\n");
   1b85e:	82 e9       	ldi	r24, 0x92	; 146
   1b860:	95 e3       	ldi	r25, 0x35	; 53
   1b862:	f0 cf       	rjmp	.-32     	; 0x1b844 <lif_add_lif_file+0x54>
        return(-1);
    }

    if(debuglevel & LIF_DEBUG)
   1b864:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1b868:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1b86c:	92 ff       	sbrs	r25, 2
   1b86e:	10 c0       	rjmp	.+32     	; 0x1b890 <lif_add_lif_file+0xa0>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n",
   1b870:	ed b7       	in	r30, 0x3d	; 61
   1b872:	fe b7       	in	r31, 0x3e	; 62
   1b874:	51 87       	std	Z+9, r21	; 0x09
   1b876:	40 87       	std	Z+8, r20	; 0x08
   1b878:	77 83       	std	Z+7, r23	; 0x07
   1b87a:	66 83       	std	Z+6, r22	; 0x06
   1b87c:	b5 82       	std	Z+5, r11	; 0x05
   1b87e:	a4 82       	std	Z+4, r10	; 0x04
   1b880:	83 e6       	ldi	r24, 0x63	; 99
   1b882:	95 e3       	ldi	r25, 0x35	; 53
   1b884:	a0 e0       	ldi	r26, 0x00	; 0
   1b886:	81 83       	std	Z+1, r24	; 0x01
   1b888:	92 83       	std	Z+2, r25	; 0x02
   1b88a:	a3 83       	std	Z+3, r26	; 0x03
   1b88c:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
            lifimagename, lifname, userfile);

// open  userfile as LIF image
    ULIF = lif_open_volume(userfile,"rb+");
   1b890:	68 e0       	ldi	r22, 0x08	; 8
   1b892:	79 e0       	ldi	r23, 0x09	; 9
   1b894:	c4 01       	movw	r24, r8
   1b896:	0e 94 7f d1 	call	0x1a2fe	; 0x1a2fe <lif_open_volume>
   1b89a:	6c 01       	movw	r12, r24
    if(ULIF == NULL)
   1b89c:	00 97       	sbiw	r24, 0x00	; 0
   1b89e:	09 f4       	brne	.+2      	; 0x1b8a2 <lif_add_lif_file+0xb2>
   1b8a0:	ff c0       	rjmp	.+510    	; 0x1baa0 <lif_add_lif_file+0x2b0>
        return(-1);

// find lif file in user image
    index = lif_find_file(ULIF, lifname);
   1b8a2:	b7 01       	movw	r22, r14
   1b8a4:	01 d8       	rcall	.-4094   	; 0x1a8a8 <lif_find_file>
    if(index == -1)
   1b8a6:	01 96       	adiw	r24, 0x01	; 1
   1b8a8:	a1 f4       	brne	.+40     	; 0x1b8d2 <lif_add_lif_file+0xe2>
    {
        printf("File not found:%s\n", lifname);
   1b8aa:	ed b7       	in	r30, 0x3d	; 61
   1b8ac:	fe b7       	in	r31, 0x3e	; 62
   1b8ae:	f5 82       	std	Z+5, r15	; 0x05
   1b8b0:	e4 82       	std	Z+4, r14	; 0x04
   1b8b2:	80 e5       	ldi	r24, 0x50	; 80
   1b8b4:	95 e3       	ldi	r25, 0x35	; 53
   1b8b6:	a0 e0       	ldi	r26, 0x00	; 0
   1b8b8:	81 83       	std	Z+1, r24	; 0x01
   1b8ba:	92 83       	std	Z+2, r25	; 0x02
   1b8bc:	a3 83       	std	Z+3, r26	; 0x03
   1b8be:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b8c2:	c6 01       	movw	r24, r12
   1b8c4:	0e 94 c2 ca 	call	0x19584	; 0x19584 <lif_close_volume>
    index = lif_find_file(ULIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(ULIF);
        return(0);
   1b8c8:	60 e0       	ldi	r22, 0x00	; 0
   1b8ca:	70 e0       	ldi	r23, 0x00	; 0
   1b8cc:	80 e0       	ldi	r24, 0x00	; 0
   1b8ce:	90 e0       	ldi	r25, 0x00	; 0
   1b8d0:	ff c0       	rjmp	.+510    	; 0x1bad0 <lif_add_lif_file+0x2e0>
    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1b8d2:	68 e0       	ldi	r22, 0x08	; 8
   1b8d4:	79 e0       	ldi	r23, 0x09	; 9
   1b8d6:	c5 01       	movw	r24, r10
   1b8d8:	0e 94 7f d1 	call	0x1a2fe	; 0x1a2fe <lif_open_volume>
   1b8dc:	7c 01       	movw	r14, r24
    if(LIF == NULL)
   1b8de:	00 97       	sbiw	r24, 0x00	; 0
   1b8e0:	09 f4       	brne	.+2      	; 0x1b8e4 <lif_add_lif_file+0xf4>
   1b8e2:	de c0       	rjmp	.+444    	; 0x1baa0 <lif_add_lif_file+0x2b0>
        return(-1);

// Now find a new free record that is big enough
    index = lif_newdir(LIF, ULIF->DIR.FileSectors);
   1b8e4:	f6 01       	movw	r30, r12
   1b8e6:	e0 5a       	subi	r30, 0xA0	; 160
   1b8e8:	ff 4f       	sbci	r31, 0xFF	; 255
   1b8ea:	40 81       	ld	r20, Z
   1b8ec:	51 81       	ldd	r21, Z+1	; 0x01
   1b8ee:	62 81       	ldd	r22, Z+2	; 0x02
   1b8f0:	73 81       	ldd	r23, Z+3	; 0x03
   1b8f2:	0e 94 1f d0 	call	0x1a03e	; 0x1a03e <lif_newdir>
   1b8f6:	ca 5e       	subi	r28, 0xEA	; 234
   1b8f8:	de 4f       	sbci	r29, 0xFE	; 254
   1b8fa:	99 83       	std	Y+1, r25	; 0x01
   1b8fc:	88 83       	st	Y, r24
   1b8fe:	c6 51       	subi	r28, 0x16	; 22
   1b900:	d1 40       	sbci	r29, 0x01	; 1
    if(index == -1)
   1b902:	01 96       	adiw	r24, 0x01	; 1
   1b904:	79 f4       	brne	.+30     	; 0x1b924 <lif_add_lif_file+0x134>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n",
   1b906:	ed b7       	in	r30, 0x3d	; 61
   1b908:	fe b7       	in	r31, 0x3e	; 62
   1b90a:	97 82       	std	Z+7, r9	; 0x07
   1b90c:	86 82       	std	Z+6, r8	; 0x06
   1b90e:	b5 82       	std	Z+5, r11	; 0x05
   1b910:	a4 82       	std	Z+4, r10	; 0x04
   1b912:	80 e2       	ldi	r24, 0x20	; 32
   1b914:	95 e3       	ldi	r25, 0x35	; 53
   1b916:	a0 e0       	ldi	r26, 0x00	; 0
   1b918:	81 83       	std	Z+1, r24	; 0x01
   1b91a:	92 83       	std	Z+2, r25	; 0x02
   1b91c:	a3 83       	std	Z+3, r26	; 0x03
   1b91e:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   1b922:	a8 c0       	rjmp	.+336    	; 0x1ba74 <lif_add_lif_file+0x284>
        lif_closedir(ULIF);
        return(-1);
    }

// Save start sector
    start = LIF->DIR.FileStartSector;
   1b924:	c7 01       	movw	r24, r14
   1b926:	84 5a       	subi	r24, 0xA4	; 164
   1b928:	9f 4f       	sbci	r25, 0xFF	; 255
   1b92a:	dc 01       	movw	r26, r24
   1b92c:	4d 91       	ld	r20, X+
   1b92e:	5d 91       	ld	r21, X+
   1b930:	6d 91       	ld	r22, X+
   1b932:	7c 91       	ld	r23, X
   1b934:	13 97       	sbiw	r26, 0x03	; 3

// Copy user image directory record to master image directory record
    LIF->DIR = ULIF->DIR;
   1b936:	21 e2       	ldi	r18, 0x21	; 33
   1b938:	f6 01       	movw	r30, r12
   1b93a:	e1 5b       	subi	r30, 0xB1	; 177
   1b93c:	ff 4f       	sbci	r31, 0xFF	; 255
   1b93e:	1d 97       	sbiw	r26, 0x0d	; 13
   1b940:	01 90       	ld	r0, Z+
   1b942:	0d 92       	st	X+, r0
   1b944:	2a 95       	dec	r18
   1b946:	e1 f7       	brne	.-8      	; 0x1b940 <lif_add_lif_file+0x150>

// Restore FileStartSector
    LIF->DIR.FileStartSector = start;
   1b948:	fc 01       	movw	r30, r24
   1b94a:	40 83       	st	Z, r20
   1b94c:	51 83       	std	Z+1, r21	; 0x01
   1b94e:	62 83       	std	Z+2, r22	; 0x02
   1b950:	73 83       	std	Z+3, r23	; 0x03

// Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b952:	b6 2f       	mov	r27, r22
   1b954:	a5 2f       	mov	r26, r21
   1b956:	94 2f       	mov	r25, r20
   1b958:	88 27       	eor	r24, r24
   1b95a:	c2 5f       	subi	r28, 0xF2	; 242
   1b95c:	de 4f       	sbci	r29, 0xFE	; 254
   1b95e:	88 83       	st	Y, r24
   1b960:	99 83       	std	Y+1, r25	; 0x01
   1b962:	aa 83       	std	Y+2, r26	; 0x02
   1b964:	bb 83       	std	Y+3, r27	; 0x03
   1b966:	ce 50       	subi	r28, 0x0E	; 14
   1b968:	d1 40       	sbci	r29, 0x01	; 1
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b96a:	f6 01       	movw	r30, r12
   1b96c:	e4 5a       	subi	r30, 0xA4	; 164
   1b96e:	ff 4f       	sbci	r31, 0xFF	; 255
   1b970:	80 81       	ld	r24, Z
   1b972:	91 81       	ldd	r25, Z+1	; 0x01
   1b974:	a2 81       	ldd	r26, Z+2	; 0x02
   1b976:	b3 81       	ldd	r27, Z+3	; 0x03
   1b978:	22 27       	eor	r18, r18
   1b97a:	38 2f       	mov	r19, r24
   1b97c:	49 2f       	mov	r20, r25
   1b97e:	5a 2f       	mov	r21, r26
   1b980:	ce 5e       	subi	r28, 0xEE	; 238
   1b982:	de 4f       	sbci	r29, 0xFE	; 254
   1b984:	28 83       	st	Y, r18
   1b986:	39 83       	std	Y+1, r19	; 0x01
   1b988:	4a 83       	std	Y+2, r20	; 0x02
   1b98a:	5b 83       	std	Y+3, r21	; 0x03
   1b98c:	c2 51       	subi	r28, 0x12	; 18
   1b98e:	d1 40       	sbci	r29, 0x01	; 1
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b990:	21 2c       	mov	r2, r1
   1b992:	31 2c       	mov	r3, r1

// Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
   1b994:	81 2c       	mov	r8, r1
   1b996:	91 2c       	mov	r9, r1
   1b998:	54 01       	movw	r10, r8
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b99a:	a7 01       	movw	r20, r14
   1b99c:	40 5a       	subi	r20, 0xA0	; 160
   1b99e:	5f 4f       	sbci	r21, 0xFF	; 255
   1b9a0:	c4 5e       	subi	r28, 0xE4	; 228
   1b9a2:	de 4f       	sbci	r29, 0xFE	; 254
   1b9a4:	59 83       	std	Y+1, r21	; 0x01
   1b9a6:	48 83       	st	Y, r20
   1b9a8:	cc 51       	subi	r28, 0x1C	; 28
   1b9aa:	d1 40       	sbci	r29, 0x01	; 1
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
        printf("\tWrote: %8ld\r", bytes);
   1b9ac:	82 e1       	ldi	r24, 0x12	; 18
   1b9ae:	95 e3       	ldi	r25, 0x35	; 53
   1b9b0:	2c 01       	movw	r4, r24
   1b9b2:	61 2c       	mov	r6, r1
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b9b4:	27 c0       	rjmp	.+78     	; 0x1ba04 <lif_add_lif_file+0x214>
            lif_closedir(ULIF);
            return(-1);
        }

// Write
        size = lif_write(LIF, buf, offset, LIF_SECTOR_SIZE);
   1b9b6:	00 e0       	ldi	r16, 0x00	; 0
   1b9b8:	11 e0       	ldi	r17, 0x01	; 1
   1b9ba:	c8 5e       	subi	r28, 0xE8	; 232
   1b9bc:	de 4f       	sbci	r29, 0xFE	; 254
   1b9be:	28 81       	ld	r18, Y
   1b9c0:	39 81       	ldd	r19, Y+1	; 0x01
   1b9c2:	4a 81       	ldd	r20, Y+2	; 0x02
   1b9c4:	5b 81       	ldd	r21, Y+3	; 0x03
   1b9c6:	c8 51       	subi	r28, 0x18	; 24
   1b9c8:	d1 40       	sbci	r29, 0x01	; 1
   1b9ca:	be 01       	movw	r22, r28
   1b9cc:	66 5f       	subi	r22, 0xF6	; 246
   1b9ce:	7f 4f       	sbci	r23, 0xFF	; 255
   1b9d0:	c7 01       	movw	r24, r14
   1b9d2:	0e 94 49 c2 	call	0x18492	; 0x18492 <lif_write>
        if(size < LIF_SECTOR_SIZE)
   1b9d6:	8f 3f       	cpi	r24, 0xFF	; 255
   1b9d8:	91 05       	cpc	r25, r1
   1b9da:	09 f0       	breq	.+2      	; 0x1b9de <lif_add_lif_file+0x1ee>
   1b9dc:	0c f4       	brge	.+2      	; 0x1b9e0 <lif_add_lif_file+0x1f0>
   1b9de:	4a c0       	rjmp	.+148    	; 0x1ba74 <lif_add_lif_file+0x284>
            lif_closedir(ULIF);
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
   1b9e0:	5f ef       	ldi	r21, 0xFF	; 255
   1b9e2:	95 1a       	sub	r9, r21
   1b9e4:	a5 0a       	sbc	r10, r21
   1b9e6:	b5 0a       	sbc	r11, r21
        printf("\tWrote: %8ld\r", bytes);
   1b9e8:	ed b7       	in	r30, 0x3d	; 61
   1b9ea:	fe b7       	in	r31, 0x3e	; 62
   1b9ec:	84 82       	std	Z+4, r8	; 0x04
   1b9ee:	95 82       	std	Z+5, r9	; 0x05
   1b9f0:	a6 82       	std	Z+6, r10	; 0x06
   1b9f2:	b7 82       	std	Z+7, r11	; 0x07
   1b9f4:	41 82       	std	Z+1, r4	; 0x01
   1b9f6:	52 82       	std	Z+2, r5	; 0x02
   1b9f8:	63 82       	std	Z+3, r6	; 0x03
   1b9fa:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b9fe:	ff ef       	ldi	r31, 0xFF	; 255
   1ba00:	2f 1a       	sub	r2, r31
   1ba02:	3f 0a       	sbc	r3, r31
   1ba04:	ce 5e       	subi	r28, 0xEE	; 238
   1ba06:	de 4f       	sbci	r29, 0xFE	; 254
   1ba08:	28 81       	ld	r18, Y
   1ba0a:	39 81       	ldd	r19, Y+1	; 0x01
   1ba0c:	4a 81       	ldd	r20, Y+2	; 0x02
   1ba0e:	5b 81       	ldd	r21, Y+3	; 0x03
   1ba10:	c2 51       	subi	r28, 0x12	; 18
   1ba12:	d1 40       	sbci	r29, 0x01	; 1
   1ba14:	28 0d       	add	r18, r8
   1ba16:	39 1d       	adc	r19, r9
   1ba18:	4a 1d       	adc	r20, r10
   1ba1a:	5b 1d       	adc	r21, r11
   1ba1c:	c2 5f       	subi	r28, 0xF2	; 242
   1ba1e:	de 4f       	sbci	r29, 0xFE	; 254
   1ba20:	88 81       	ld	r24, Y
   1ba22:	99 81       	ldd	r25, Y+1	; 0x01
   1ba24:	aa 81       	ldd	r26, Y+2	; 0x02
   1ba26:	bb 81       	ldd	r27, Y+3	; 0x03
   1ba28:	ce 50       	subi	r28, 0x0E	; 14
   1ba2a:	d1 40       	sbci	r29, 0x01	; 1
   1ba2c:	88 0d       	add	r24, r8
   1ba2e:	99 1d       	adc	r25, r9
   1ba30:	aa 1d       	adc	r26, r10
   1ba32:	bb 1d       	adc	r27, r11
   1ba34:	c8 5e       	subi	r28, 0xE8	; 232
   1ba36:	de 4f       	sbci	r29, 0xFE	; 254
   1ba38:	88 83       	st	Y, r24
   1ba3a:	99 83       	std	Y+1, r25	; 0x01
   1ba3c:	aa 83       	std	Y+2, r26	; 0x02
   1ba3e:	bb 83       	std	Y+3, r27	; 0x03
   1ba40:	c8 51       	subi	r28, 0x18	; 24
   1ba42:	d1 40       	sbci	r29, 0x01	; 1
   1ba44:	c4 5e       	subi	r28, 0xE4	; 228
   1ba46:	de 4f       	sbci	r29, 0xFE	; 254
   1ba48:	a8 81       	ld	r26, Y
   1ba4a:	b9 81       	ldd	r27, Y+1	; 0x01
   1ba4c:	cc 51       	subi	r28, 0x1C	; 28
   1ba4e:	d1 40       	sbci	r29, 0x01	; 1
   1ba50:	8d 91       	ld	r24, X+
   1ba52:	9c 91       	ld	r25, X
   1ba54:	28 16       	cp	r2, r24
   1ba56:	39 06       	cpc	r3, r25
   1ba58:	94 f4       	brge	.+36     	; 0x1ba7e <lif_add_lif_file+0x28e>
    {
// Read
        size = lif_read(ULIF, buf, uoffset, LIF_SECTOR_SIZE);
   1ba5a:	00 e0       	ldi	r16, 0x00	; 0
   1ba5c:	11 e0       	ldi	r17, 0x01	; 1
   1ba5e:	be 01       	movw	r22, r28
   1ba60:	66 5f       	subi	r22, 0xF6	; 246
   1ba62:	7f 4f       	sbci	r23, 0xFF	; 255
   1ba64:	c6 01       	movw	r24, r12
   1ba66:	0e 94 f6 c1 	call	0x183ec	; 0x183ec <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1ba6a:	6f 3f       	cpi	r22, 0xFF	; 255
   1ba6c:	71 05       	cpc	r23, r1
   1ba6e:	11 f0       	breq	.+4      	; 0x1ba74 <lif_add_lif_file+0x284>
   1ba70:	0c f0       	brlt	.+2      	; 0x1ba74 <lif_add_lif_file+0x284>
   1ba72:	a1 cf       	rjmp	.-190    	; 0x1b9b6 <lif_add_lif_file+0x1c6>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ba74:	c7 01       	movw	r24, r14
   1ba76:	0e 94 c2 ca 	call	0x19584	; 0x19584 <lif_close_volume>
   1ba7a:	c6 01       	movw	r24, r12
   1ba7c:	0f c0       	rjmp	.+30     	; 0x1ba9c <lif_add_lif_file+0x2ac>
   1ba7e:	c6 01       	movw	r24, r12
   1ba80:	0e 94 c2 ca 	call	0x19584	; 0x19584 <lif_close_volume>
        printf("\tWrote: %8ld\r", bytes);
    }
    lif_closedir(ULIF);

// Write directory record
    if( !lif_writedirindex(LIF,index))
   1ba84:	ca 5e       	subi	r28, 0xEA	; 234
   1ba86:	de 4f       	sbci	r29, 0xFE	; 254
   1ba88:	68 81       	ld	r22, Y
   1ba8a:	79 81       	ldd	r23, Y+1	; 0x01
   1ba8c:	c6 51       	subi	r28, 0x16	; 22
   1ba8e:	d1 40       	sbci	r29, 0x01	; 1
   1ba90:	c7 01       	movw	r24, r14
   1ba92:	0e 94 b7 cb 	call	0x1976e	; 0x1976e <lif_writedirindex>
   1ba96:	89 2b       	or	r24, r25
   1ba98:	41 f4       	brne	.+16     	; 0x1baaa <lif_add_lif_file+0x2ba>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ba9a:	c7 01       	movw	r24, r14
   1ba9c:	0e 94 c2 ca 	call	0x19584	; 0x19584 <lif_close_volume>

// Write directory record
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
   1baa0:	6f ef       	ldi	r22, 0xFF	; 255
   1baa2:	7f ef       	ldi	r23, 0xFF	; 255
   1baa4:	8f ef       	ldi	r24, 0xFF	; 255
   1baa6:	9f ef       	ldi	r25, 0xFF	; 255
   1baa8:	13 c0       	rjmp	.+38     	; 0x1bad0 <lif_add_lif_file+0x2e0>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1baaa:	c7 01       	movw	r24, r14
   1baac:	0e 94 c2 ca 	call	0x19584	; 0x19584 <lif_close_volume>
    {
        lif_closedir(LIF);
        return(-1);
    }
    lif_closedir(LIF);
    printf("\tWrote: %8ld\n", bytes);
   1bab0:	ed b7       	in	r30, 0x3d	; 61
   1bab2:	fe b7       	in	r31, 0x3e	; 62
   1bab4:	84 82       	std	Z+4, r8	; 0x04
   1bab6:	95 82       	std	Z+5, r9	; 0x05
   1bab8:	a6 82       	std	Z+6, r10	; 0x06
   1baba:	b7 82       	std	Z+7, r11	; 0x07
   1babc:	84 e0       	ldi	r24, 0x04	; 4
   1babe:	95 e3       	ldi	r25, 0x35	; 53
   1bac0:	a0 e0       	ldi	r26, 0x00	; 0
   1bac2:	81 83       	std	Z+1, r24	; 0x01
   1bac4:	92 83       	std	Z+2, r25	; 0x02
   1bac6:	a3 83       	std	Z+3, r26	; 0x03
   1bac8:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    return(bytes);
   1bacc:	b4 01       	movw	r22, r8
   1bace:	c5 01       	movw	r24, r10
}
   1bad0:	c3 5e       	subi	r28, 0xE3	; 227
   1bad2:	de 4f       	sbci	r29, 0xFE	; 254
   1bad4:	0f b6       	in	r0, 0x3f	; 63
   1bad6:	f8 94       	cli
   1bad8:	de bf       	out	0x3e, r29	; 62
   1bada:	0f be       	out	0x3f, r0	; 63
   1badc:	cd bf       	out	0x3d, r28	; 61
   1bade:	df 91       	pop	r29
   1bae0:	cf 91       	pop	r28
   1bae2:	1f 91       	pop	r17
   1bae4:	0f 91       	pop	r16
   1bae6:	ff 90       	pop	r15
   1bae8:	ef 90       	pop	r14
   1baea:	df 90       	pop	r13
   1baec:	cf 90       	pop	r12
   1baee:	bf 90       	pop	r11
   1baf0:	af 90       	pop	r10
   1baf2:	9f 90       	pop	r9
   1baf4:	8f 90       	pop	r8
   1baf6:	6f 90       	pop	r6
   1baf8:	5f 90       	pop	r5
   1bafa:	4f 90       	pop	r4
   1bafc:	3f 90       	pop	r3
   1bafe:	2f 90       	pop	r2
   1bb00:	08 95       	ret

0001bb02 <lif_del_file>:
/// @param[in] lifimagename: LIF image name
/// @param[in] lifname: LIF file name
/// @return 1 if deleted, 0 if not found, -1 error
MEMSPACE
int lif_del_file(char *lifimagename, char *lifname)
{
   1bb02:	ef 92       	push	r14
   1bb04:	ff 92       	push	r15
   1bb06:	0f 93       	push	r16
   1bb08:	1f 93       	push	r17
   1bb0a:	cf 93       	push	r28
   1bb0c:	df 93       	push	r29
   1bb0e:	ad b7       	in	r26, 0x3d	; 61
   1bb10:	be b7       	in	r27, 0x3e	; 62
   1bb12:	17 97       	sbiw	r26, 0x07	; 7
   1bb14:	0f b6       	in	r0, 0x3f	; 63
   1bb16:	f8 94       	cli
   1bb18:	be bf       	out	0x3e, r27	; 62
   1bb1a:	0f be       	out	0x3f, r0	; 63
   1bb1c:	ad bf       	out	0x3d, r26	; 61
   1bb1e:	7c 01       	movw	r14, r24
   1bb20:	8b 01       	movw	r16, r22
    lif_t *LIF;
    int index;

    if(!*lifimagename)
   1bb22:	fc 01       	movw	r30, r24
   1bb24:	80 81       	ld	r24, Z
   1bb26:	81 11       	cpse	r24, r1
   1bb28:	03 c0       	rjmp	.+6      	; 0x1bb30 <lif_del_file+0x2e>
    {
        printf("lif_del_file: lifimagename is empty\n");
   1bb2a:	8f ed       	ldi	r24, 0xDF	; 223
   1bb2c:	94 e3       	ldi	r25, 0x34	; 52
   1bb2e:	06 c0       	rjmp	.+12     	; 0x1bb3c <lif_del_file+0x3a>
        return(-1);
    }
    if(!*lifname)
   1bb30:	fb 01       	movw	r30, r22
   1bb32:	80 81       	ld	r24, Z
   1bb34:	81 11       	cpse	r24, r1
   1bb36:	0b c0       	rjmp	.+22     	; 0x1bb4e <lif_del_file+0x4c>
    {
        printf("lif_del_file: lifname is empty\n");
   1bb38:	8f eb       	ldi	r24, 0xBF	; 191
   1bb3a:	94 e3       	ldi	r25, 0x34	; 52
   1bb3c:	a0 e0       	ldi	r26, 0x00	; 0
   1bb3e:	ed b7       	in	r30, 0x3d	; 61
   1bb40:	fe b7       	in	r31, 0x3e	; 62
   1bb42:	81 83       	std	Z+1, r24	; 0x01
   1bb44:	92 83       	std	Z+2, r25	; 0x02
   1bb46:	a3 83       	std	Z+3, r26	; 0x03
   1bb48:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   1bb4c:	68 c0       	rjmp	.+208    	; 0x1bc1e <lif_del_file+0x11c>
        return(-1);
    }
    if(debuglevel & LIF_DEBUG)
   1bb4e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1bb52:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1bb56:	92 ff       	sbrs	r25, 2
   1bb58:	0e c0       	rjmp	.+28     	; 0x1bb76 <lif_del_file+0x74>
        printf("LIF image:[%s], LIF name:[%s]\n",
   1bb5a:	ed b7       	in	r30, 0x3d	; 61
   1bb5c:	fe b7       	in	r31, 0x3e	; 62
   1bb5e:	77 83       	std	Z+7, r23	; 0x07
   1bb60:	66 83       	std	Z+6, r22	; 0x06
   1bb62:	f5 82       	std	Z+5, r15	; 0x05
   1bb64:	e4 82       	std	Z+4, r14	; 0x04
   1bb66:	80 ea       	ldi	r24, 0xA0	; 160
   1bb68:	94 e3       	ldi	r25, 0x34	; 52
   1bb6a:	a0 e0       	ldi	r26, 0x00	; 0
   1bb6c:	81 83       	std	Z+1, r24	; 0x01
   1bb6e:	92 83       	std	Z+2, r25	; 0x02
   1bb70:	a3 83       	std	Z+3, r26	; 0x03
   1bb72:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
            lifimagename, lifname);

    LIF = lif_open_volume(lifimagename,"rb+");
   1bb76:	68 e0       	ldi	r22, 0x08	; 8
   1bb78:	79 e0       	ldi	r23, 0x09	; 9
   1bb7a:	c7 01       	movw	r24, r14
   1bb7c:	0e 94 7f d1 	call	0x1a2fe	; 0x1a2fe <lif_open_volume>
   1bb80:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1bb82:	00 97       	sbiw	r24, 0x00	; 0
   1bb84:	09 f4       	brne	.+2      	; 0x1bb88 <lif_del_file+0x86>
   1bb86:	4b c0       	rjmp	.+150    	; 0x1bc1e <lif_del_file+0x11c>
        return(-1);

// Now find file record
    index = lif_find_file(LIF, lifname);
   1bb88:	b8 01       	movw	r22, r16
   1bb8a:	0e 94 54 d4 	call	0x1a8a8	; 0x1a8a8 <lif_find_file>
    if(index == -1)
   1bb8e:	8f 3f       	cpi	r24, 0xFF	; 255
   1bb90:	ff ef       	ldi	r31, 0xFF	; 255
   1bb92:	9f 07       	cpc	r25, r31
   1bb94:	a1 f4       	brne	.+40     	; 0x1bbbe <lif_del_file+0xbc>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bb96:	ce 01       	movw	r24, r28
   1bb98:	0e 94 c2 ca 	call	0x19584	; 0x19584 <lif_close_volume>
// Now find file record
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        lif_closedir(LIF);
        printf("LIF image:[%s] lif name:[%s] not found\n", lifimagename, lifname);
   1bb9c:	ed b7       	in	r30, 0x3d	; 61
   1bb9e:	fe b7       	in	r31, 0x3e	; 62
   1bba0:	17 83       	std	Z+7, r17	; 0x07
   1bba2:	06 83       	std	Z+6, r16	; 0x06
   1bba4:	f5 82       	std	Z+5, r15	; 0x05
   1bba6:	e4 82       	std	Z+4, r14	; 0x04
   1bba8:	88 e7       	ldi	r24, 0x78	; 120
   1bbaa:	94 e3       	ldi	r25, 0x34	; 52
   1bbac:	a0 e0       	ldi	r26, 0x00	; 0
   1bbae:	81 83       	std	Z+1, r24	; 0x01
   1bbb0:	92 83       	std	Z+2, r25	; 0x02
   1bbb2:	a3 83       	std	Z+3, r26	; 0x03
   1bbb4:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
        return(0);
   1bbb8:	80 e0       	ldi	r24, 0x00	; 0
   1bbba:	90 e0       	ldi	r25, 0x00	; 0
   1bbbc:	32 c0       	rjmp	.+100    	; 0x1bc22 <lif_del_file+0x120>
    }

// IF the next record is EOF then update EOF
    if(index >= LIF->EOFindex-1)
   1bbbe:	2a a1       	ldd	r18, Y+34	; 0x22
   1bbc0:	3b a1       	ldd	r19, Y+35	; 0x23
   1bbc2:	21 50       	subi	r18, 0x01	; 1
   1bbc4:	31 09       	sbc	r19, r1
   1bbc6:	fe 01       	movw	r30, r28
   1bbc8:	e6 5a       	subi	r30, 0xA6	; 166
   1bbca:	ff 4f       	sbci	r31, 0xFF	; 255
   1bbcc:	82 17       	cp	r24, r18
   1bbce:	93 07       	cpc	r25, r19
   1bbd0:	2c f0       	brlt	.+10     	; 0x1bbdc <lif_del_file+0xda>
        LIF->DIR.FileType = 0xffff;
   1bbd2:	2f ef       	ldi	r18, 0xFF	; 255
   1bbd4:	3f ef       	ldi	r19, 0xFF	; 255
   1bbd6:	31 83       	std	Z+1, r19	; 0x01
   1bbd8:	20 83       	st	Z, r18
   1bbda:	02 c0       	rjmp	.+4      	; 0x1bbe0 <lif_del_file+0xde>
    else
        LIF->DIR.FileType = 0;
   1bbdc:	11 82       	std	Z+1, r1	; 0x01
   1bbde:	10 82       	st	Z, r1

// re-Write directory record
    if( !lif_writedirindex(LIF,index) )
   1bbe0:	bc 01       	movw	r22, r24
   1bbe2:	ce 01       	movw	r24, r28
   1bbe4:	0e 94 b7 cb 	call	0x1976e	; 0x1976e <lif_writedirindex>
   1bbe8:	89 2b       	or	r24, r25
   1bbea:	21 f4       	brne	.+8      	; 0x1bbf4 <lif_del_file+0xf2>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bbec:	ce 01       	movw	r24, r28
   1bbee:	0e 94 c2 ca 	call	0x19584	; 0x19584 <lif_close_volume>
   1bbf2:	15 c0       	rjmp	.+42     	; 0x1bc1e <lif_del_file+0x11c>
    {
        lif_closedir(LIF);
        return(-1);
    }

    lif_updatefree(LIF);
   1bbf4:	ce 01       	movw	r24, r28
   1bbf6:	0e 94 2b cc 	call	0x19856	; 0x19856 <lif_updatefree>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bbfa:	ce 01       	movw	r24, r28
   1bbfc:	0e 94 c2 ca 	call	0x19584	; 0x19584 <lif_close_volume>
    }

    lif_updatefree(LIF);

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);
   1bc00:	ed b7       	in	r30, 0x3d	; 61
   1bc02:	fe b7       	in	r31, 0x3e	; 62
   1bc04:	15 83       	std	Z+5, r17	; 0x05
   1bc06:	04 83       	std	Z+4, r16	; 0x04
   1bc08:	89 e6       	ldi	r24, 0x69	; 105
   1bc0a:	94 e3       	ldi	r25, 0x34	; 52
   1bc0c:	a0 e0       	ldi	r26, 0x00	; 0
   1bc0e:	81 83       	std	Z+1, r24	; 0x01
   1bc10:	92 83       	std	Z+2, r25	; 0x02
   1bc12:	a3 83       	std	Z+3, r26	; 0x03
   1bc14:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>

    return(1);
   1bc18:	81 e0       	ldi	r24, 0x01	; 1
   1bc1a:	90 e0       	ldi	r25, 0x00	; 0
   1bc1c:	02 c0       	rjmp	.+4      	; 0x1bc22 <lif_del_file+0x120>
        printf("LIF image:[%s], LIF name:[%s]\n",
            lifimagename, lifname);

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1);
   1bc1e:	8f ef       	ldi	r24, 0xFF	; 255
   1bc20:	9f ef       	ldi	r25, 0xFF	; 255

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);

    return(1);
}
   1bc22:	cd b7       	in	r28, 0x3d	; 61
   1bc24:	de b7       	in	r29, 0x3e	; 62
   1bc26:	27 96       	adiw	r28, 0x07	; 7
   1bc28:	e6 e0       	ldi	r30, 0x06	; 6
   1bc2a:	0c 94 35 e7 	jmp	0x1ce6a	; 0x1ce6a <__epilogue_restores__+0x18>

0001bc2e <lif_rename_file>:
/// @param[in] oldlifname: old LIF file name
/// @param[in] newlifname: new LIF file name
/// @return 1 if renamed, 0 if not found, -1 error
MEMSPACE
int lif_rename_file(char *lifimagename, char *oldlifname, char *newlifname)
{
   1bc2e:	a7 e0       	ldi	r26, 0x07	; 7
   1bc30:	b0 e0       	ldi	r27, 0x00	; 0
   1bc32:	ed e1       	ldi	r30, 0x1D	; 29
   1bc34:	fe ed       	ldi	r31, 0xDE	; 222
   1bc36:	0c 94 15 e7 	jmp	0x1ce2a	; 0x1ce2a <__prologue_saves__+0x10>
   1bc3a:	6c 01       	movw	r12, r24
   1bc3c:	8b 01       	movw	r16, r22
   1bc3e:	7a 01       	movw	r14, r20
    int index;
    lif_t *LIF;

    if(!*lifimagename)
   1bc40:	fc 01       	movw	r30, r24
   1bc42:	80 81       	ld	r24, Z
   1bc44:	81 11       	cpse	r24, r1
   1bc46:	03 c0       	rjmp	.+6      	; 0x1bc4e <lif_rename_file+0x20>
    {
        printf("lif_rename_file: lifimagename is empty\n");
   1bc48:	81 e4       	ldi	r24, 0x41	; 65
   1bc4a:	94 e3       	ldi	r25, 0x34	; 52
   1bc4c:	06 c0       	rjmp	.+12     	; 0x1bc5a <lif_rename_file+0x2c>
        return(-1);
    }
    if(!*oldlifname)
   1bc4e:	fb 01       	movw	r30, r22
   1bc50:	80 81       	ld	r24, Z
   1bc52:	81 11       	cpse	r24, r1
   1bc54:	0b c0       	rjmp	.+22     	; 0x1bc6c <lif_rename_file+0x3e>
    {
        printf("lif_rename_file: old lifname is empty\n");
   1bc56:	8a e1       	ldi	r24, 0x1A	; 26
   1bc58:	94 e3       	ldi	r25, 0x34	; 52
   1bc5a:	a0 e0       	ldi	r26, 0x00	; 0
   1bc5c:	ed b7       	in	r30, 0x3d	; 61
   1bc5e:	fe b7       	in	r31, 0x3e	; 62
   1bc60:	81 83       	std	Z+1, r24	; 0x01
   1bc62:	92 83       	std	Z+2, r25	; 0x02
   1bc64:	a3 83       	std	Z+3, r26	; 0x03
   1bc66:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   1bc6a:	58 c0       	rjmp	.+176    	; 0x1bd1c <lif_rename_file+0xee>
        return(-1);
    }
    if(!*newlifname)
   1bc6c:	fa 01       	movw	r30, r20
   1bc6e:	80 81       	ld	r24, Z
   1bc70:	81 11       	cpse	r24, r1
   1bc72:	03 c0       	rjmp	.+6      	; 0x1bc7a <lif_rename_file+0x4c>
    {
        printf("lif_rename_file: new lifname is empty\n");
   1bc74:	83 ef       	ldi	r24, 0xF3	; 243
   1bc76:	93 e3       	ldi	r25, 0x33	; 51
   1bc78:	f0 cf       	rjmp	.-32     	; 0x1bc5a <lif_rename_file+0x2c>
        return(-1);
    }

    if(!lif_checkname(newlifname))
   1bc7a:	ca 01       	movw	r24, r20
   1bc7c:	0e 94 11 c3 	call	0x18622	; 0x18622 <lif_checkname>
   1bc80:	89 2b       	or	r24, r25
   1bc82:	19 f4       	brne	.+6      	; 0x1bc8a <lif_rename_file+0x5c>
    {
        printf("lif_rename_file: new lifname contains bad characters\n");
   1bc84:	8d eb       	ldi	r24, 0xBD	; 189
   1bc86:	93 e3       	ldi	r25, 0x33	; 51
   1bc88:	e8 cf       	rjmp	.-48     	; 0x1bc5a <lif_rename_file+0x2c>
        return(-1);

    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1bc8a:	68 e0       	ldi	r22, 0x08	; 8
   1bc8c:	79 e0       	ldi	r23, 0x09	; 9
   1bc8e:	c6 01       	movw	r24, r12
   1bc90:	0e 94 7f d1 	call	0x1a2fe	; 0x1a2fe <lif_open_volume>
   1bc94:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1bc96:	00 97       	sbiw	r24, 0x00	; 0
   1bc98:	09 f4       	brne	.+2      	; 0x1bc9c <lif_rename_file+0x6e>
   1bc9a:	40 c0       	rjmp	.+128    	; 0x1bd1c <lif_rename_file+0xee>
        return(-1);

// Now find file record
    index = lif_find_file(LIF, oldlifname);
   1bc9c:	b8 01       	movw	r22, r16
   1bc9e:	0e 94 54 d4 	call	0x1a8a8	; 0x1a8a8 <lif_find_file>
   1bca2:	5c 01       	movw	r10, r24
    if(index == -1)
   1bca4:	01 96       	adiw	r24, 0x01	; 1
   1bca6:	a1 f4       	brne	.+40     	; 0x1bcd0 <lif_rename_file+0xa2>
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
   1bca8:	ed b7       	in	r30, 0x3d	; 61
   1bcaa:	fe b7       	in	r31, 0x3e	; 62
   1bcac:	17 83       	std	Z+7, r17	; 0x07
   1bcae:	06 83       	std	Z+6, r16	; 0x06
   1bcb0:	d5 82       	std	Z+5, r13	; 0x05
   1bcb2:	c4 82       	std	Z+4, r12	; 0x04
   1bcb4:	84 e9       	ldi	r24, 0x94	; 148
   1bcb6:	93 e3       	ldi	r25, 0x33	; 51
   1bcb8:	a0 e0       	ldi	r26, 0x00	; 0
   1bcba:	81 83       	std	Z+1, r24	; 0x01
   1bcbc:	92 83       	std	Z+2, r25	; 0x02
   1bcbe:	a3 83       	std	Z+3, r26	; 0x03
   1bcc0:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bcc4:	ce 01       	movw	r24, r28
   1bcc6:	0e 94 c2 ca 	call	0x19584	; 0x19584 <lif_close_volume>
    index = lif_find_file(LIF, oldlifname);
    if(index == -1)
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
        lif_closedir(LIF);
        return(0);
   1bcca:	80 e0       	ldi	r24, 0x00	; 0
   1bccc:	90 e0       	ldi	r25, 0x00	; 0
   1bcce:	28 c0       	rjmp	.+80     	; 0x1bd20 <lif_rename_file+0xf2>
    }
    lif_fixname(LIF->DIR.filename, newlifname, 10);
   1bcd0:	4a e0       	ldi	r20, 0x0A	; 10
   1bcd2:	50 e0       	ldi	r21, 0x00	; 0
   1bcd4:	b7 01       	movw	r22, r14
   1bcd6:	ce 01       	movw	r24, r28
   1bcd8:	81 5b       	subi	r24, 0xB1	; 177
   1bcda:	9f 4f       	sbci	r25, 0xFF	; 255
   1bcdc:	0e 94 4b c3 	call	0x18696	; 0x18696 <lif_fixname>

// re-Write directory record
    if( !lif_writedirindex(LIF,index))
   1bce0:	b5 01       	movw	r22, r10
   1bce2:	ce 01       	movw	r24, r28
   1bce4:	0e 94 b7 cb 	call	0x1976e	; 0x1976e <lif_writedirindex>
   1bce8:	89 2b       	or	r24, r25
   1bcea:	21 f4       	brne	.+8      	; 0x1bcf4 <lif_rename_file+0xc6>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bcec:	ce 01       	movw	r24, r28
   1bcee:	0e 94 c2 ca 	call	0x19584	; 0x19584 <lif_close_volume>
   1bcf2:	14 c0       	rjmp	.+40     	; 0x1bd1c <lif_rename_file+0xee>
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);
   1bcf4:	ed b7       	in	r30, 0x3d	; 61
   1bcf6:	fe b7       	in	r31, 0x3e	; 62
   1bcf8:	f7 82       	std	Z+7, r15	; 0x07
   1bcfa:	e6 82       	std	Z+6, r14	; 0x06
   1bcfc:	15 83       	std	Z+5, r17	; 0x05
   1bcfe:	04 83       	std	Z+4, r16	; 0x04
   1bd00:	8d e7       	ldi	r24, 0x7D	; 125
   1bd02:	93 e3       	ldi	r25, 0x33	; 51
   1bd04:	a0 e0       	ldi	r26, 0x00	; 0
   1bd06:	81 83       	std	Z+1, r24	; 0x01
   1bd08:	92 83       	std	Z+2, r25	; 0x02
   1bd0a:	a3 83       	std	Z+3, r26	; 0x03
   1bd0c:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bd10:	ce 01       	movw	r24, r28
   1bd12:	0e 94 c2 ca 	call	0x19584	; 0x19584 <lif_close_volume>
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
   1bd16:	81 e0       	ldi	r24, 0x01	; 1
   1bd18:	90 e0       	ldi	r25, 0x00	; 0
   1bd1a:	02 c0       	rjmp	.+4      	; 0x1bd20 <lif_rename_file+0xf2>

    }

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1);
   1bd1c:	8f ef       	ldi	r24, 0xFF	; 255
   1bd1e:	9f ef       	ldi	r25, 0xFF	; 255
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
}
   1bd20:	cd b7       	in	r28, 0x3d	; 61
   1bd22:	de b7       	in	r29, 0x3e	; 62
   1bd24:	27 96       	adiw	r28, 0x07	; 7
   1bd26:	ea e0       	ldi	r30, 0x0A	; 10
   1bd28:	0c 94 31 e7 	jmp	0x1ce62	; 0x1ce62 <__epilogue_restores__+0x10>

0001bd2c <lif_create_image>:
/// @param[in] dirsectors: Number of LIF directory sectors
/// @param[in] sectors: total disk image size in sectors
///@return bytes writting to disk image
MEMSPACE
long lif_create_image(char *lifimagename, char *liflabel, uint32_t dirsectors, uint32_t sectors)
{
   1bd2c:	4f 92       	push	r4
   1bd2e:	5f 92       	push	r5
   1bd30:	6f 92       	push	r6
   1bd32:	7f 92       	push	r7
   1bd34:	af 92       	push	r10
   1bd36:	bf 92       	push	r11
   1bd38:	cf 92       	push	r12
   1bd3a:	df 92       	push	r13
   1bd3c:	ef 92       	push	r14
   1bd3e:	ff 92       	push	r15
   1bd40:	0f 93       	push	r16
   1bd42:	1f 93       	push	r17
   1bd44:	cf 93       	push	r28
   1bd46:	df 93       	push	r29
   1bd48:	ad b7       	in	r26, 0x3d	; 61
   1bd4a:	be b7       	in	r27, 0x3e	; 62
   1bd4c:	17 97       	sbiw	r26, 0x07	; 7
   1bd4e:	0f b6       	in	r0, 0x3f	; 63
   1bd50:	f8 94       	cli
   1bd52:	be bf       	out	0x3e, r27	; 62
   1bd54:	0f be       	out	0x3f, r0	; 63
   1bd56:	ad bf       	out	0x3d, r26	; 61
   1bd58:	27 01       	movw	r4, r14
   1bd5a:	38 01       	movw	r6, r16
    uint32_t dirstart,filestart,filesectors,end;
    lif_t *LIF;

    if(!*lifimagename)
   1bd5c:	dc 01       	movw	r26, r24
   1bd5e:	ec 91       	ld	r30, X
   1bd60:	e1 11       	cpse	r30, r1
   1bd62:	03 c0       	rjmp	.+6      	; 0x1bd6a <lif_create_image+0x3e>
    {
        printf("lif_create_image: lifimagename is empty\n");
   1bd64:	84 e5       	ldi	r24, 0x54	; 84
   1bd66:	93 e3       	ldi	r25, 0x33	; 51
   1bd68:	16 c0       	rjmp	.+44     	; 0x1bd96 <lif_create_image+0x6a>
        return(-1);
    }
    if(!*liflabel)
   1bd6a:	db 01       	movw	r26, r22
   1bd6c:	ec 91       	ld	r30, X
   1bd6e:	e1 11       	cpse	r30, r1
   1bd70:	03 c0       	rjmp	.+6      	; 0x1bd78 <lif_create_image+0x4c>
    {
        printf("lif_create_image: liflabel is empty\n");
   1bd72:	8f e2       	ldi	r24, 0x2F	; 47
   1bd74:	93 e3       	ldi	r25, 0x33	; 51
   1bd76:	0f c0       	rjmp	.+30     	; 0x1bd96 <lif_create_image+0x6a>
        return(-1);
    }
    if(!dirsectors)
   1bd78:	21 15       	cp	r18, r1
   1bd7a:	31 05       	cpc	r19, r1
   1bd7c:	41 05       	cpc	r20, r1
   1bd7e:	51 05       	cpc	r21, r1
   1bd80:	19 f4       	brne	.+6      	; 0x1bd88 <lif_create_image+0x5c>
    {
        printf("lif_create_image: dirsectors is 0\n");
   1bd82:	8c e0       	ldi	r24, 0x0C	; 12
   1bd84:	93 e3       	ldi	r25, 0x33	; 51
   1bd86:	07 c0       	rjmp	.+14     	; 0x1bd96 <lif_create_image+0x6a>
        return(-1);
    }
    if(!sectors)
   1bd88:	e1 14       	cp	r14, r1
   1bd8a:	f1 04       	cpc	r15, r1
   1bd8c:	01 05       	cpc	r16, r1
   1bd8e:	11 05       	cpc	r17, r1
   1bd90:	59 f4       	brne	.+22     	; 0x1bda8 <lif_create_image+0x7c>
    {
        printf("lif_create_image: sectors is 0\n");
   1bd92:	8c ee       	ldi	r24, 0xEC	; 236
   1bd94:	92 e3       	ldi	r25, 0x32	; 50
   1bd96:	a0 e0       	ldi	r26, 0x00	; 0
   1bd98:	ed b7       	in	r30, 0x3d	; 61
   1bd9a:	fe b7       	in	r31, 0x3e	; 62
   1bd9c:	81 83       	std	Z+1, r24	; 0x01
   1bd9e:	92 83       	std	Z+2, r25	; 0x02
   1bda0:	a3 83       	std	Z+3, r26	; 0x03
   1bda2:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   1bda6:	2b c0       	rjmp	.+86     	; 0x1bdfe <lif_create_image+0xd2>
    dirstart = 2;
    filestart = dirstart + dirsectors;
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
   1bda8:	67 01       	movw	r12, r14
   1bdaa:	78 01       	movw	r14, r16
   1bdac:	f2 e0       	ldi	r31, 0x02	; 2
   1bdae:	cf 1a       	sub	r12, r31
   1bdb0:	d1 08       	sbc	r13, r1
   1bdb2:	e1 08       	sbc	r14, r1
   1bdb4:	f1 08       	sbc	r15, r1
   1bdb6:	56 01       	movw	r10, r12
   1bdb8:	67 01       	movw	r12, r14
   1bdba:	a2 1a       	sub	r10, r18
   1bdbc:	b3 0a       	sbc	r11, r19
   1bdbe:	c4 0a       	sbc	r12, r20
   1bdc0:	d5 0a       	sbc	r13, r21
   1bdc2:	79 01       	movw	r14, r18
   1bdc4:	8a 01       	movw	r16, r20
   1bdc6:	22 e0       	ldi	r18, 0x02	; 2
   1bdc8:	30 e0       	ldi	r19, 0x00	; 0
   1bdca:	40 e0       	ldi	r20, 0x00	; 0
   1bdcc:	50 e0       	ldi	r21, 0x00	; 0
   1bdce:	0e 94 35 cd 	call	0x19a6a	; 0x19a6a <lif_create_volume>
    if(LIF == NULL)
   1bdd2:	00 97       	sbiw	r24, 0x00	; 0
   1bdd4:	a1 f0       	breq	.+40     	; 0x1bdfe <lif_create_image+0xd2>
        return(-1);
    lif_close_volume(LIF);
   1bdd6:	0e 94 c2 ca 	call	0x19584	; 0x19584 <lif_close_volume>

    printf("\tFormatting: wrote %ld sectors\n", (long)end);
   1bdda:	82 01       	movw	r16, r4
   1bddc:	d6 2d       	mov	r29, r6
   1bdde:	c7 2d       	mov	r28, r7
   1bde0:	ed b7       	in	r30, 0x3d	; 61
   1bde2:	fe b7       	in	r31, 0x3e	; 62
   1bde4:	44 82       	std	Z+4, r4	; 0x04
   1bde6:	15 83       	std	Z+5, r17	; 0x05
   1bde8:	66 82       	std	Z+6, r6	; 0x06
   1bdea:	77 82       	std	Z+7, r7	; 0x07
   1bdec:	8c ec       	ldi	r24, 0xCC	; 204
   1bdee:	92 e3       	ldi	r25, 0x32	; 50
   1bdf0:	a0 e0       	ldi	r26, 0x00	; 0
   1bdf2:	81 83       	std	Z+1, r24	; 0x01
   1bdf4:	92 83       	std	Z+2, r25	; 0x02
   1bdf6:	a3 83       	std	Z+3, r26	; 0x03
   1bdf8:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    return(end);
   1bdfc:	04 c0       	rjmp	.+8      	; 0x1be06 <lif_create_image+0xda>
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
    if(LIF == NULL)
        return(-1);
   1bdfe:	0f ef       	ldi	r16, 0xFF	; 255
   1be00:	1f ef       	ldi	r17, 0xFF	; 255
   1be02:	df ef       	ldi	r29, 0xFF	; 255
   1be04:	cf ef       	ldi	r28, 0xFF	; 255
    lif_close_volume(LIF);

    printf("\tFormatting: wrote %ld sectors\n", (long)end);
    return(end);
}
   1be06:	b8 01       	movw	r22, r16
   1be08:	8d 2f       	mov	r24, r29
   1be0a:	9c 2f       	mov	r25, r28
   1be0c:	ad b7       	in	r26, 0x3d	; 61
   1be0e:	be b7       	in	r27, 0x3e	; 62
   1be10:	17 96       	adiw	r26, 0x07	; 7
   1be12:	0f b6       	in	r0, 0x3f	; 63
   1be14:	f8 94       	cli
   1be16:	be bf       	out	0x3e, r27	; 62
   1be18:	0f be       	out	0x3f, r0	; 63
   1be1a:	ad bf       	out	0x3d, r26	; 61
   1be1c:	df 91       	pop	r29
   1be1e:	cf 91       	pop	r28
   1be20:	1f 91       	pop	r17
   1be22:	0f 91       	pop	r16
   1be24:	ff 90       	pop	r15
   1be26:	ef 90       	pop	r14
   1be28:	df 90       	pop	r13
   1be2a:	cf 90       	pop	r12
   1be2c:	bf 90       	pop	r11
   1be2e:	af 90       	pop	r10
   1be30:	7f 90       	pop	r7
   1be32:	6f 90       	pop	r6
   1be34:	5f 90       	pop	r5
   1be36:	4f 90       	pop	r4
   1be38:	08 95       	ret

0001be3a <lif_tests>:

/// @brief LIF user tests
/// @return  1 matched token, 0 if not
MEMSPACE
int lif_tests(int argc, char *argv[])
{
   1be3a:	a5 e0       	ldi	r26, 0x05	; 5
   1be3c:	b0 e0       	ldi	r27, 0x00	; 0
   1be3e:	e2 e2       	ldi	r30, 0x22	; 34
   1be40:	ff ed       	ldi	r31, 0xDF	; 223
   1be42:	f1 c7       	rjmp	.+4066   	; 0x1ce26 <__prologue_saves__+0xc>
        printf("%d:%s\n", i, argv[i]);
    printf("\n");
#endif

// Nothing to do ?
    if(argc < 2)
   1be44:	82 30       	cpi	r24, 0x02	; 2
   1be46:	91 05       	cpc	r25, r1
   1be48:	1c f4       	brge	.+6      	; 0x1be50 <lif_tests+0x16>
        return (0);
   1be4a:	80 e0       	ldi	r24, 0x00	; 0
   1be4c:	90 e0       	ldi	r25, 0x00	; 0
   1be4e:	8f c1       	rjmp	.+798    	; 0x1c16e <lif_tests+0x334>

// Argument 1
    ind = 1;
    ptr = argv[ind++];
   1be50:	fb 01       	movw	r30, r22
   1be52:	e2 80       	ldd	r14, Z+2	; 0x02
   1be54:	f3 80       	ldd	r15, Z+3	; 0x03

// Argument 1 missing ?
//        Nothing to do
// argc should really get this
    if(!ptr || !*ptr)
   1be56:	e1 14       	cp	r14, r1
   1be58:	f1 04       	cpc	r15, r1
   1be5a:	09 f4       	brne	.+2      	; 0x1be5e <lif_tests+0x24>
   1be5c:	86 c1       	rjmp	.+780    	; 0x1c16a <lif_tests+0x330>
   1be5e:	f7 01       	movw	r30, r14
   1be60:	20 81       	ld	r18, Z
   1be62:	22 23       	and	r18, r18
   1be64:	09 f4       	brne	.+2      	; 0x1be68 <lif_tests+0x2e>
   1be66:	81 c1       	rjmp	.+770    	; 0x1c16a <lif_tests+0x330>
   1be68:	8b 01       	movw	r16, r22
   1be6a:	6c 01       	movw	r12, r24
        return(1);


	if(MATCHI_LEN(argv[0],"lif"))
   1be6c:	63 eb       	ldi	r22, 0xB3	; 179
   1be6e:	76 e1       	ldi	r23, 0x16	; 22
   1be70:	f8 01       	movw	r30, r16
   1be72:	80 81       	ld	r24, Z
   1be74:	91 81       	ldd	r25, Z+1	; 0x01
   1be76:	0e 94 b7 32 	call	0x656e	; 0x656e <MATCHI_LEN>
   1be7a:	89 2b       	or	r24, r25
   1be7c:	d1 f0       	breq	.+52     	; 0x1beb2 <lif_tests+0x78>
	{
		if(MATCHI(ptr,"help") || MATCHI(ptr,"-help") || MATCHI(ptr,"-?") )
   1be7e:	6d e6       	ldi	r22, 0x6D	; 109
   1be80:	76 e1       	ldi	r23, 0x16	; 22
   1be82:	c7 01       	movw	r24, r14
   1be84:	0e 94 79 32 	call	0x64f2	; 0x64f2 <MATCHI>
   1be88:	89 2b       	or	r24, r25
   1be8a:	29 f0       	breq	.+10     	; 0x1be96 <lif_tests+0x5c>
		{
			lif_help(1);
   1be8c:	81 e0       	ldi	r24, 0x01	; 1
   1be8e:	90 e0       	ldi	r25, 0x00	; 0
   1be90:	0e 94 e7 c0 	call	0x181ce	; 0x181ce <lif_help>
   1be94:	6a c1       	rjmp	.+724    	; 0x1c16a <lif_tests+0x330>
        return(1);


	if(MATCHI_LEN(argv[0],"lif"))
	{
		if(MATCHI(ptr,"help") || MATCHI(ptr,"-help") || MATCHI(ptr,"-?") )
   1be96:	6c e6       	ldi	r22, 0x6C	; 108
   1be98:	76 e1       	ldi	r23, 0x16	; 22
   1be9a:	c7 01       	movw	r24, r14
   1be9c:	0e 94 79 32 	call	0x64f2	; 0x64f2 <MATCHI>
   1bea0:	89 2b       	or	r24, r25
   1bea2:	a1 f7       	brne	.-24     	; 0x1be8c <lif_tests+0x52>
   1bea4:	62 e7       	ldi	r22, 0x72	; 114
   1bea6:	76 e1       	ldi	r23, 0x16	; 22
   1bea8:	c7 01       	movw	r24, r14
   1beaa:	0e 94 79 32 	call	0x64f2	; 0x64f2 <MATCHI>
   1beae:	89 2b       	or	r24, r25
   1beb0:	69 f7       	brne	.-38     	; 0x1be8c <lif_tests+0x52>
		}
	}

// Turn one debugging
// in the future we can add tests for specific messages
	debuglevel &= ~0x400;
   1beb2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1beb6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1beba:	9b 7f       	andi	r25, 0xFB	; 251
   1bebc:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <debuglevel+0x1>
   1bec0:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <debuglevel>
    if (MATCHARGS(ptr,"-d", (ind + 0) ,argc))
   1bec4:	96 01       	movw	r18, r12
   1bec6:	42 e0       	ldi	r20, 0x02	; 2
   1bec8:	50 e0       	ldi	r21, 0x00	; 0
   1beca:	65 e7       	ldi	r22, 0x75	; 117
   1becc:	76 e1       	ldi	r23, 0x16	; 22
   1bece:	c7 01       	movw	r24, r14
   1bed0:	0e 94 8d 32 	call	0x651a	; 0x651a <MATCHARGS>
   1bed4:	89 2b       	or	r24, r25
   1bed6:	79 f0       	breq	.+30     	; 0x1bef6 <lif_tests+0xbc>
    {
        debuglevel |= 0x400;
   1bed8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1bedc:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1bee0:	94 60       	ori	r25, 0x04	; 4
   1bee2:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <debuglevel+0x1>
   1bee6:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <debuglevel>
        ptr = argv[ind++];
   1beea:	f8 01       	movw	r30, r16
   1beec:	e4 80       	ldd	r14, Z+4	; 0x04
   1beee:	f5 80       	ldd	r15, Z+5	; 0x05
   1bef0:	c3 e0       	ldi	r28, 0x03	; 3
   1bef2:	d0 e0       	ldi	r29, 0x00	; 0
   1bef4:	02 c0       	rjmp	.+4      	; 0x1befa <lif_tests+0xc0>
    if(argc < 2)
        return (0);

// Argument 1
    ind = 1;
    ptr = argv[ind++];
   1bef6:	c2 e0       	ldi	r28, 0x02	; 2
   1bef8:	d0 e0       	ldi	r29, 0x00	; 0
    {
        debuglevel |= 0x400;
        ptr = argv[ind++];
    }

    if (MATCHARGS(ptr,"addbin", (ind + 3) ,argc))
   1befa:	5e 01       	movw	r10, r28
   1befc:	f3 e0       	ldi	r31, 0x03	; 3
   1befe:	af 0e       	add	r10, r31
   1bf00:	b1 1c       	adc	r11, r1
   1bf02:	96 01       	movw	r18, r12
   1bf04:	a5 01       	movw	r20, r10
   1bf06:	68 e7       	ldi	r22, 0x78	; 120
   1bf08:	76 e1       	ldi	r23, 0x16	; 22
   1bf0a:	c7 01       	movw	r24, r14
   1bf0c:	0e 94 8d 32 	call	0x651a	; 0x651a <MATCHARGS>
   1bf10:	89 2b       	or	r24, r25
   1bf12:	61 f0       	breq	.+24     	; 0x1bf2c <lif_tests+0xf2>
    {
        lif_add_lif_file(argv[ind],argv[ind+1],argv[ind+2]);
   1bf14:	cc 0f       	add	r28, r28
   1bf16:	dd 1f       	adc	r29, r29
   1bf18:	c0 0f       	add	r28, r16
   1bf1a:	d1 1f       	adc	r29, r17
   1bf1c:	4c 81       	ldd	r20, Y+4	; 0x04
   1bf1e:	5d 81       	ldd	r21, Y+5	; 0x05
   1bf20:	6a 81       	ldd	r22, Y+2	; 0x02
   1bf22:	7b 81       	ldd	r23, Y+3	; 0x03
   1bf24:	88 81       	ld	r24, Y
   1bf26:	99 81       	ldd	r25, Y+1	; 0x01
   1bf28:	63 dc       	rcall	.-1850   	; 0x1b7f0 <lif_add_lif_file>
   1bf2a:	1f c1       	rjmp	.+574    	; 0x1c16a <lif_tests+0x330>

        return(1);
    }

    if (MATCHARGS(ptr,"add", (ind + 3) ,argc))
   1bf2c:	96 01       	movw	r18, r12
   1bf2e:	a5 01       	movw	r20, r10
   1bf30:	6f e7       	ldi	r22, 0x7F	; 127
   1bf32:	76 e1       	ldi	r23, 0x16	; 22
   1bf34:	c7 01       	movw	r24, r14
   1bf36:	0e 94 8d 32 	call	0x651a	; 0x651a <MATCHARGS>
   1bf3a:	89 2b       	or	r24, r25
   1bf3c:	69 f0       	breq	.+26     	; 0x1bf58 <lif_tests+0x11e>
    {
        lif_add_ascii_file_as_e010(argv[ind],argv[ind+1],argv[ind+2]);
   1bf3e:	cc 0f       	add	r28, r28
   1bf40:	dd 1f       	adc	r29, r29
   1bf42:	c0 0f       	add	r28, r16
   1bf44:	d1 1f       	adc	r29, r17
   1bf46:	4c 81       	ldd	r20, Y+4	; 0x04
   1bf48:	5d 81       	ldd	r21, Y+5	; 0x05
   1bf4a:	6a 81       	ldd	r22, Y+2	; 0x02
   1bf4c:	7b 81       	ldd	r23, Y+3	; 0x03
   1bf4e:	88 81       	ld	r24, Y
   1bf50:	99 81       	ldd	r25, Y+1	; 0x01
   1bf52:	0e 94 d5 d6 	call	0x1adaa	; 0x1adaa <lif_add_ascii_file_as_e010>
   1bf56:	09 c1       	rjmp	.+530    	; 0x1c16a <lif_tests+0x330>
        return(1);
    }
    if (MATCHARGS(ptr,"createdisk", (ind + 3) ,argc))
   1bf58:	96 01       	movw	r18, r12
   1bf5a:	a5 01       	movw	r20, r10
   1bf5c:	63 e8       	ldi	r22, 0x83	; 131
   1bf5e:	76 e1       	ldi	r23, 0x16	; 22
   1bf60:	c7 01       	movw	r24, r14
   1bf62:	0e 94 8d 32 	call	0x651a	; 0x651a <MATCHARGS>
   1bf66:	89 2b       	or	r24, r25
   1bf68:	09 f4       	brne	.+2      	; 0x1bf6c <lif_tests+0x132>
   1bf6a:	42 c0       	rjmp	.+132    	; 0x1bff0 <lif_tests+0x1b6>
    {
///@brief format LIF image
        long dir,sectors;
        char *name = argv[ind];
   1bf6c:	ce 01       	movw	r24, r28
   1bf6e:	88 0f       	add	r24, r24
   1bf70:	99 1f       	adc	r25, r25
   1bf72:	e8 01       	movw	r28, r16
   1bf74:	c8 0f       	add	r28, r24
   1bf76:	d9 1f       	adc	r29, r25
   1bf78:	c8 80       	ld	r12, Y
   1bf7a:	d9 80       	ldd	r13, Y+1	; 0x01
        char *label = argv[ind+1];
   1bf7c:	aa 80       	ldd	r10, Y+2	; 0x02
   1bf7e:	bb 80       	ldd	r11, Y+3	; 0x03
        char *model = argv[ind+2];
   1bf80:	0c 80       	ldd	r0, Y+4	; 0x04
   1bf82:	dd 81       	ldd	r29, Y+5	; 0x05
   1bf84:	c0 2d       	mov	r28, r0
        if( MATCHI_LEN(model,"hp"))
   1bf86:	6e e8       	ldi	r22, 0x8E	; 142
   1bf88:	76 e1       	ldi	r23, 0x16	; 22
   1bf8a:	ce 01       	movw	r24, r28
   1bf8c:	0e 94 b7 32 	call	0x656e	; 0x656e <MATCHI_LEN>
   1bf90:	89 2b       	or	r24, r25
   1bf92:	09 f0       	breq	.+2      	; 0x1bf96 <lif_tests+0x15c>
            model +=2;
   1bf94:	22 96       	adiw	r28, 0x02	; 2
        if(hpdir_find_drive(model,0, 0))
   1bf96:	40 e0       	ldi	r20, 0x00	; 0
   1bf98:	50 e0       	ldi	r21, 0x00	; 0
   1bf9a:	60 e0       	ldi	r22, 0x00	; 0
   1bf9c:	70 e0       	ldi	r23, 0x00	; 0
   1bf9e:	ce 01       	movw	r24, r28
   1bfa0:	0e 94 2a a4 	call	0x14854	; 0x14854 <hpdir_find_drive>
   1bfa4:	89 2b       	or	r24, r25
   1bfa6:	b9 f0       	breq	.+46     	; 0x1bfd6 <lif_tests+0x19c>
        {
            dir = lif_dir_count(hpdir.BLOCKS);
   1bfa8:	60 91 24 20 	lds	r22, 0x2024	; 0x802024 <hpdir+0xac>
   1bfac:	70 91 25 20 	lds	r23, 0x2025	; 0x802025 <hpdir+0xad>
   1bfb0:	80 91 26 20 	lds	r24, 0x2026	; 0x802026 <hpdir+0xae>
   1bfb4:	90 91 27 20 	lds	r25, 0x2027	; 0x802027 <hpdir+0xaf>
   1bfb8:	0e 94 0d a4 	call	0x1481a	; 0x1481a <lif_dir_count>
   1bfbc:	9b 01       	movw	r18, r22
   1bfbe:	ac 01       	movw	r20, r24
            sectors = hpdir.BLOCKS;
			// NOTE: we could grab the directory size for non 0 entries in the hpdir.ini file - I use a computed value which is also fine
            lif_create_image(name, label, dir, sectors);
   1bfc0:	e0 90 24 20 	lds	r14, 0x2024	; 0x802024 <hpdir+0xac>
   1bfc4:	f0 90 25 20 	lds	r15, 0x2025	; 0x802025 <hpdir+0xad>
   1bfc8:	00 91 26 20 	lds	r16, 0x2026	; 0x802026 <hpdir+0xae>
   1bfcc:	10 91 27 20 	lds	r17, 0x2027	; 0x802027 <hpdir+0xaf>
   1bfd0:	b5 01       	movw	r22, r10
   1bfd2:	c6 01       	movw	r24, r12
   1bfd4:	2e c0       	rjmp	.+92     	; 0x1c032 <lif_tests+0x1f8>
            return(1);
        }
        printf("Disk: %s not found in hpdir.ini\n", model);
   1bfd6:	ed b7       	in	r30, 0x3d	; 61
   1bfd8:	fe b7       	in	r31, 0x3e	; 62
   1bfda:	d5 83       	std	Z+5, r29	; 0x05
   1bfdc:	c4 83       	std	Z+4, r28	; 0x04
   1bfde:	8d e1       	ldi	r24, 0x1D	; 29
   1bfe0:	95 e4       	ldi	r25, 0x45	; 69
   1bfe2:	a0 e0       	ldi	r26, 0x00	; 0
   1bfe4:	81 83       	std	Z+1, r24	; 0x01
   1bfe6:	92 83       	std	Z+2, r25	; 0x02
   1bfe8:	a3 83       	std	Z+3, r26	; 0x03
   1bfea:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   1bfee:	bd c0       	rjmp	.+378    	; 0x1c16a <lif_tests+0x330>
        return(1);
    }
    if (MATCHARGS(ptr,"create", (ind + 4) ,argc))
   1bff0:	96 01       	movw	r18, r12
   1bff2:	ae 01       	movw	r20, r28
   1bff4:	4c 5f       	subi	r20, 0xFC	; 252
   1bff6:	5f 4f       	sbci	r21, 0xFF	; 255
   1bff8:	61 e9       	ldi	r22, 0x91	; 145
   1bffa:	76 e1       	ldi	r23, 0x16	; 22
   1bffc:	c7 01       	movw	r24, r14
   1bffe:	0e 94 8d 32 	call	0x651a	; 0x651a <MATCHARGS>
   1c002:	89 2b       	or	r24, r25
   1c004:	c1 f0       	breq	.+48     	; 0x1c036 <lif_tests+0x1fc>
    {
///@brief format LIF image
        lif_create_image(argv[ind],argv[ind+1], atol(argv[ind+2]), atol(argv[ind+3]) );
   1c006:	cc 0f       	add	r28, r28
   1c008:	dd 1f       	adc	r29, r29
   1c00a:	c0 0f       	add	r28, r16
   1c00c:	d1 1f       	adc	r29, r17
   1c00e:	8c 81       	ldd	r24, Y+4	; 0x04
   1c010:	9d 81       	ldd	r25, Y+5	; 0x05
   1c012:	0e 94 cc 47 	call	0x8f98	; 0x8f98 <atol>
   1c016:	4b 01       	movw	r8, r22
   1c018:	5c 01       	movw	r10, r24
   1c01a:	8e 81       	ldd	r24, Y+6	; 0x06
   1c01c:	9f 81       	ldd	r25, Y+7	; 0x07
   1c01e:	0e 94 cc 47 	call	0x8f98	; 0x8f98 <atol>
   1c022:	7b 01       	movw	r14, r22
   1c024:	8c 01       	movw	r16, r24
   1c026:	6a 81       	ldd	r22, Y+2	; 0x02
   1c028:	7b 81       	ldd	r23, Y+3	; 0x03
   1c02a:	a5 01       	movw	r20, r10
   1c02c:	94 01       	movw	r18, r8
   1c02e:	88 81       	ld	r24, Y
   1c030:	99 81       	ldd	r25, Y+1	; 0x01
   1c032:	7c de       	rcall	.-776    	; 0x1bd2c <lif_create_image>
   1c034:	9a c0       	rjmp	.+308    	; 0x1c16a <lif_tests+0x330>
        return(1);
    }
    if (MATCHARGS(ptr,"del", (ind + 2) ,argc))
   1c036:	96 01       	movw	r18, r12
   1c038:	ae 01       	movw	r20, r28
   1c03a:	4e 5f       	subi	r20, 0xFE	; 254
   1c03c:	5f 4f       	sbci	r21, 0xFF	; 255
   1c03e:	68 e9       	ldi	r22, 0x98	; 152
   1c040:	76 e1       	ldi	r23, 0x16	; 22
   1c042:	c7 01       	movw	r24, r14
   1c044:	0e 94 8d 32 	call	0x651a	; 0x651a <MATCHARGS>
   1c048:	89 2b       	or	r24, r25
   1c04a:	51 f0       	breq	.+20     	; 0x1c060 <lif_tests+0x226>
    {
        lif_del_file(argv[ind],argv[ind+1]);
   1c04c:	cc 0f       	add	r28, r28
   1c04e:	dd 1f       	adc	r29, r29
   1c050:	c0 0f       	add	r28, r16
   1c052:	d1 1f       	adc	r29, r17
   1c054:	6a 81       	ldd	r22, Y+2	; 0x02
   1c056:	7b 81       	ldd	r23, Y+3	; 0x03
   1c058:	88 81       	ld	r24, Y
   1c05a:	99 81       	ldd	r25, Y+1	; 0x01
   1c05c:	52 dd       	rcall	.-1372   	; 0x1bb02 <lif_del_file>
   1c05e:	85 c0       	rjmp	.+266    	; 0x1c16a <lif_tests+0x330>
        return(1);
    }
    if (MATCHARGS(ptr,"dir", (ind + 1) ,argc))
   1c060:	96 01       	movw	r18, r12
   1c062:	ae 01       	movw	r20, r28
   1c064:	4f 5f       	subi	r20, 0xFF	; 255
   1c066:	5f 4f       	sbci	r21, 0xFF	; 255
   1c068:	68 ed       	ldi	r22, 0xD8	; 216
   1c06a:	7b e0       	ldi	r23, 0x0B	; 11
   1c06c:	c7 01       	movw	r24, r14
   1c06e:	0e 94 8d 32 	call	0x651a	; 0x651a <MATCHARGS>
   1c072:	89 2b       	or	r24, r25
   1c074:	49 f0       	breq	.+18     	; 0x1c088 <lif_tests+0x24e>
    {
        lif_dir(argv[ind]);
   1c076:	cc 0f       	add	r28, r28
   1c078:	dd 1f       	adc	r29, r29
   1c07a:	c0 0f       	add	r28, r16
   1c07c:	d1 1f       	adc	r29, r17
   1c07e:	88 81       	ld	r24, Y
   1c080:	99 81       	ldd	r25, Y+1	; 0x01
   1c082:	0e 94 7f d2 	call	0x1a4fe	; 0x1a4fe <lif_dir>
   1c086:	71 c0       	rjmp	.+226    	; 0x1c16a <lif_tests+0x330>
        return(1);
    }
    if (MATCHARGS(ptr,"extractbin", (ind + 3) ,argc))
   1c088:	96 01       	movw	r18, r12
   1c08a:	a5 01       	movw	r20, r10
   1c08c:	6c e9       	ldi	r22, 0x9C	; 156
   1c08e:	76 e1       	ldi	r23, 0x16	; 22
   1c090:	c7 01       	movw	r24, r14
   1c092:	0e 94 8d 32 	call	0x651a	; 0x651a <MATCHARGS>
   1c096:	89 2b       	or	r24, r25
   1c098:	71 f0       	breq	.+28     	; 0x1c0b6 <lif_tests+0x27c>
    {

        lif_extract_lif_as_lif(argv[ind],argv[ind+1],argv[ind+2]);
   1c09a:	ce 01       	movw	r24, r28
   1c09c:	88 0f       	add	r24, r24
   1c09e:	99 1f       	adc	r25, r25
   1c0a0:	e8 01       	movw	r28, r16
   1c0a2:	c8 0f       	add	r28, r24
   1c0a4:	d9 1f       	adc	r29, r25
   1c0a6:	4c 81       	ldd	r20, Y+4	; 0x04
   1c0a8:	5d 81       	ldd	r21, Y+5	; 0x05
   1c0aa:	6a 81       	ldd	r22, Y+2	; 0x02
   1c0ac:	7b 81       	ldd	r23, Y+3	; 0x03
   1c0ae:	88 81       	ld	r24, Y
   1c0b0:	99 81       	ldd	r25, Y+1	; 0x01
   1c0b2:	66 da       	rcall	.-2868   	; 0x1b580 <lif_extract_lif_as_lif>
   1c0b4:	5a c0       	rjmp	.+180    	; 0x1c16a <lif_tests+0x330>
        return(1);
    }
    if (MATCHARGS(ptr,"extract", (ind + 3) ,argc))
   1c0b6:	96 01       	movw	r18, r12
   1c0b8:	a5 01       	movw	r20, r10
   1c0ba:	67 ea       	ldi	r22, 0xA7	; 167
   1c0bc:	76 e1       	ldi	r23, 0x16	; 22
   1c0be:	c7 01       	movw	r24, r14
   1c0c0:	0e 94 8d 32 	call	0x651a	; 0x651a <MATCHARGS>
   1c0c4:	89 2b       	or	r24, r25
   1c0c6:	79 f0       	breq	.+30     	; 0x1c0e6 <lif_tests+0x2ac>
    {

        lif_extract_e010_as_ascii(argv[ind],argv[ind+1],argv[ind+2]);
   1c0c8:	ce 01       	movw	r24, r28
   1c0ca:	88 0f       	add	r24, r24
   1c0cc:	99 1f       	adc	r25, r25
   1c0ce:	e8 01       	movw	r28, r16
   1c0d0:	c8 0f       	add	r28, r24
   1c0d2:	d9 1f       	adc	r29, r25
   1c0d4:	4c 81       	ldd	r20, Y+4	; 0x04
   1c0d6:	5d 81       	ldd	r21, Y+5	; 0x05
   1c0d8:	6a 81       	ldd	r22, Y+2	; 0x02
   1c0da:	7b 81       	ldd	r23, Y+3	; 0x03
   1c0dc:	88 81       	ld	r24, Y
   1c0de:	99 81       	ldd	r25, Y+1	; 0x01
   1c0e0:	0e 94 11 d8 	call	0x1b022	; 0x1b022 <lif_extract_e010_as_ascii>
   1c0e4:	42 c0       	rjmp	.+132    	; 0x1c16a <lif_tests+0x330>
        return(1);
    }
    if (MATCHARGS(ptr,"rename", (ind + 3) ,argc))
   1c0e6:	96 01       	movw	r18, r12
   1c0e8:	a5 01       	movw	r20, r10
   1c0ea:	65 ee       	ldi	r22, 0xE5	; 229
   1c0ec:	7b e0       	ldi	r23, 0x0B	; 11
   1c0ee:	c7 01       	movw	r24, r14
   1c0f0:	0e 94 8d 32 	call	0x651a	; 0x651a <MATCHARGS>
   1c0f4:	89 2b       	or	r24, r25
   1c0f6:	71 f0       	breq	.+28     	; 0x1c114 <lif_tests+0x2da>
    {
        lif_rename_file(argv[ind],argv[ind+1],argv[ind+2]);
   1c0f8:	ce 01       	movw	r24, r28
   1c0fa:	88 0f       	add	r24, r24
   1c0fc:	99 1f       	adc	r25, r25
   1c0fe:	e8 01       	movw	r28, r16
   1c100:	c8 0f       	add	r28, r24
   1c102:	d9 1f       	adc	r29, r25
   1c104:	4c 81       	ldd	r20, Y+4	; 0x04
   1c106:	5d 81       	ldd	r21, Y+5	; 0x05
   1c108:	6a 81       	ldd	r22, Y+2	; 0x02
   1c10a:	7b 81       	ldd	r23, Y+3	; 0x03
   1c10c:	88 81       	ld	r24, Y
   1c10e:	99 81       	ldd	r25, Y+1	; 0x01
   1c110:	8e dd       	rcall	.-1252   	; 0x1bc2e <lif_rename_file>
   1c112:	2b c0       	rjmp	.+86     	; 0x1c16a <lif_tests+0x330>
        return(1);
    }

	if(MATCHI_LEN(argv[0],"td02lif"))
   1c114:	6f ea       	ldi	r22, 0xAF	; 175
   1c116:	76 e1       	ldi	r23, 0x16	; 22
   1c118:	f8 01       	movw	r30, r16
   1c11a:	80 81       	ld	r24, Z
   1c11c:	91 81       	ldd	r25, Z+1	; 0x01
   1c11e:	0e 94 b7 32 	call	0x656e	; 0x656e <MATCHI_LEN>
   1c122:	89 2b       	or	r24, r25
   1c124:	09 f4       	brne	.+2      	; 0x1c128 <lif_tests+0x2ee>
   1c126:	91 ce       	rjmp	.-734    	; 0x1be4a <lif_tests+0x10>
	{
		if(MATCHI(ptr,"help") || MATCHI(ptr,"-help") || MATCHI(ptr,"-?") )
   1c128:	6d e6       	ldi	r22, 0x6D	; 109
   1c12a:	76 e1       	ldi	r23, 0x16	; 22
   1c12c:	c7 01       	movw	r24, r14
   1c12e:	0e 94 79 32 	call	0x64f2	; 0x64f2 <MATCHI>
   1c132:	89 2b       	or	r24, r25
   1c134:	59 f0       	breq	.+22     	; 0x1c14c <lif_tests+0x312>
		{
#ifdef TELEDISK
			td0_help(1);
			return(1);
#else
		    printf("td02lif support not enabled\n");
   1c136:	80 e0       	ldi	r24, 0x00	; 0
   1c138:	95 e4       	ldi	r25, 0x45	; 69
   1c13a:	a0 e0       	ldi	r26, 0x00	; 0
   1c13c:	ed b7       	in	r30, 0x3d	; 61
   1c13e:	fe b7       	in	r31, 0x3e	; 62
   1c140:	81 83       	std	Z+1, r24	; 0x01
   1c142:	92 83       	std	Z+2, r25	; 0x02
   1c144:	a3 83       	std	Z+3, r26	; 0x03
   1c146:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   1c14a:	0f c0       	rjmp	.+30     	; 0x1c16a <lif_tests+0x330>
        return(1);
    }

	if(MATCHI_LEN(argv[0],"td02lif"))
	{
		if(MATCHI(ptr,"help") || MATCHI(ptr,"-help") || MATCHI(ptr,"-?") )
   1c14c:	6c e6       	ldi	r22, 0x6C	; 108
   1c14e:	76 e1       	ldi	r23, 0x16	; 22
   1c150:	c7 01       	movw	r24, r14
   1c152:	0e 94 79 32 	call	0x64f2	; 0x64f2 <MATCHI>
   1c156:	89 2b       	or	r24, r25
   1c158:	71 f7       	brne	.-36     	; 0x1c136 <lif_tests+0x2fc>
   1c15a:	62 e7       	ldi	r22, 0x72	; 114
   1c15c:	76 e1       	ldi	r23, 0x16	; 22
   1c15e:	c7 01       	movw	r24, r14
   1c160:	0e 94 79 32 	call	0x64f2	; 0x64f2 <MATCHI>
   1c164:	89 2b       	or	r24, r25
   1c166:	39 f7       	brne	.-50     	; 0x1c136 <lif_tests+0x2fc>
   1c168:	70 ce       	rjmp	.-800    	; 0x1be4a <lif_tests+0x10>

// Argument 1 missing ?
//        Nothing to do
// argc should really get this
    if(!ptr || !*ptr)
        return(1);
   1c16a:	81 e0       	ldi	r24, 0x01	; 1
   1c16c:	90 e0       	ldi	r25, 0x00	; 0
        td02lif(argc,argv);
        return(1);
#endif
    }
    return(0);
}
   1c16e:	cd b7       	in	r28, 0x3d	; 61
   1c170:	de b7       	in	r29, 0x3e	; 62
   1c172:	25 96       	adiw	r28, 0x05	; 5
   1c174:	ec e0       	ldi	r30, 0x0C	; 12
   1c176:	73 c6       	rjmp	.+3302   	; 0x1ce5e <__epilogue_restores__+0xc>

0001c178 <lcd_task>:
static int16_t lcd_display_time = 0;

///@brief LCD timer function called at 1000HZ
void lcd_task()
{
	++lcd_display_time;
   1c178:	80 91 ea 19 	lds	r24, 0x19EA	; 0x8019ea <lcd_display_time>
   1c17c:	90 91 eb 19 	lds	r25, 0x19EB	; 0x8019eb <lcd_display_time+0x1>
   1c180:	01 96       	adiw	r24, 0x01	; 1
   1c182:	90 93 eb 19 	sts	0x19EB, r25	; 0x8019eb <lcd_display_time+0x1>
   1c186:	80 93 ea 19 	sts	0x19EA, r24	; 0x8019ea <lcd_display_time>
   1c18a:	08 95       	ret

0001c18c <copyright>:
int8_t debug_input = 0;

///@brief Display Copyright
///@return void
void copyright()
{
   1c18c:	00 d0       	rcall	.+0      	; 0x1c18e <copyright+0x2>
   1c18e:	00 d0       	rcall	.+0      	; 0x1c190 <copyright+0x4>
   1c190:	1f 92       	push	r1
    printf("Stand alone version of LIF utilities for linux\n");
   1c192:	8a ef       	ldi	r24, 0xFA	; 250
   1c194:	9b e4       	ldi	r25, 0x4B	; 75
   1c196:	a0 e0       	ldi	r26, 0x00	; 0
   1c198:	ed b7       	in	r30, 0x3d	; 61
   1c19a:	fe b7       	in	r31, 0x3e	; 62
   1c19c:	81 83       	std	Z+1, r24	; 0x01
   1c19e:	92 83       	std	Z+2, r25	; 0x02
   1c1a0:	a3 83       	std	Z+3, r26	; 0x03
   1c1a2:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    printf("HP85 Disk and Device Emulator\n");
   1c1a6:	8b ed       	ldi	r24, 0xDB	; 219
   1c1a8:	9b e4       	ldi	r25, 0x4B	; 75
   1c1aa:	a0 e0       	ldi	r26, 0x00	; 0
   1c1ac:	ed b7       	in	r30, 0x3d	; 61
   1c1ae:	fe b7       	in	r31, 0x3e	; 62
   1c1b0:	81 83       	std	Z+1, r24	; 0x01
   1c1b2:	92 83       	std	Z+2, r25	; 0x02
   1c1b4:	a3 83       	std	Z+3, r26	; 0x03
   1c1b6:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    printf(" (c) 2014-2020 by Mike Gore\n");
   1c1ba:	8e eb       	ldi	r24, 0xBE	; 190
   1c1bc:	9b e4       	ldi	r25, 0x4B	; 75
   1c1be:	a0 e0       	ldi	r26, 0x00	; 0
   1c1c0:	ed b7       	in	r30, 0x3d	; 61
   1c1c2:	fe b7       	in	r31, 0x3e	; 62
   1c1c4:	81 83       	std	Z+1, r24	; 0x01
   1c1c6:	92 83       	std	Z+2, r25	; 0x02
   1c1c8:	a3 83       	std	Z+3, r26	; 0x03
   1c1ca:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    printf(" GNU version 3\n");
   1c1ce:	8e ea       	ldi	r24, 0xAE	; 174
   1c1d0:	9b e4       	ldi	r25, 0x4B	; 75
   1c1d2:	a0 e0       	ldi	r26, 0x00	; 0
   1c1d4:	ed b7       	in	r30, 0x3d	; 61
   1c1d6:	fe b7       	in	r31, 0x3e	; 62
   1c1d8:	81 83       	std	Z+1, r24	; 0x01
   1c1da:	92 83       	std	Z+2, r25	; 0x02
   1c1dc:	a3 83       	std	Z+3, r26	; 0x03
   1c1de:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    printf("-> https://github.com/magore/hp85disk\n");
   1c1e2:	87 e8       	ldi	r24, 0x87	; 135
   1c1e4:	9b e4       	ldi	r25, 0x4B	; 75
   1c1e6:	a0 e0       	ldi	r26, 0x00	; 0
   1c1e8:	ed b7       	in	r30, 0x3d	; 61
   1c1ea:	fe b7       	in	r31, 0x3e	; 62
   1c1ec:	81 83       	std	Z+1, r24	; 0x01
   1c1ee:	92 83       	std	Z+2, r25	; 0x02
   1c1f0:	a3 83       	std	Z+3, r26	; 0x03
   1c1f2:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    printf("   GIT last pushed:   %s\n", GIT_VERSION);
   1c1f6:	87 eb       	ldi	r24, 0xB7	; 183
   1c1f8:	96 e1       	ldi	r25, 0x16	; 22
   1c1fa:	ed b7       	in	r30, 0x3d	; 61
   1c1fc:	fe b7       	in	r31, 0x3e	; 62
   1c1fe:	95 83       	std	Z+5, r25	; 0x05
   1c200:	84 83       	std	Z+4, r24	; 0x04
   1c202:	8d e6       	ldi	r24, 0x6D	; 109
   1c204:	9b e4       	ldi	r25, 0x4B	; 75
   1c206:	a0 e0       	ldi	r26, 0x00	; 0
   1c208:	81 83       	std	Z+1, r24	; 0x01
   1c20a:	92 83       	std	Z+2, r25	; 0x02
   1c20c:	a3 83       	std	Z+3, r26	; 0x03
   1c20e:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    printf("   Last updated file: %s\n", LOCAL_MOD);
   1c212:	8b ed       	ldi	r24, 0xDB	; 219
   1c214:	96 e1       	ldi	r25, 0x16	; 22
   1c216:	ed b7       	in	r30, 0x3d	; 61
   1c218:	fe b7       	in	r31, 0x3e	; 62
   1c21a:	95 83       	std	Z+5, r25	; 0x05
   1c21c:	84 83       	std	Z+4, r24	; 0x04
   1c21e:	83 e5       	ldi	r24, 0x53	; 83
   1c220:	9b e4       	ldi	r25, 0x4B	; 75
   1c222:	a0 e0       	ldi	r26, 0x00	; 0
   1c224:	81 83       	std	Z+1, r24	; 0x01
   1c226:	92 83       	std	Z+2, r25	; 0x02
   1c228:	a3 83       	std	Z+3, r26	; 0x03
   1c22a:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    printf("\n");
   1c22e:	81 e5       	ldi	r24, 0x51	; 81
   1c230:	9b e4       	ldi	r25, 0x4B	; 75
   1c232:	a0 e0       	ldi	r26, 0x00	; 0
   1c234:	ed b7       	in	r30, 0x3d	; 61
   1c236:	fe b7       	in	r31, 0x3e	; 62
   1c238:	81 83       	std	Z+1, r24	; 0x01
   1c23a:	92 83       	std	Z+2, r25	; 0x02
   1c23c:	a3 83       	std	Z+3, r26	; 0x03
   1c23e:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
}
   1c242:	0f 90       	pop	r0
   1c244:	0f 90       	pop	r0
   1c246:	0f 90       	pop	r0
   1c248:	0f 90       	pop	r0
   1c24a:	0f 90       	pop	r0
   1c24c:	08 95       	ret

0001c24e <lcd_time>:
/// - Example output: "Thu Dec  8 21:45:05 EST 2011".
///
/// @return buf string pointer.
MEMSPACE
char *lcd_time(tm_t *t, char *buf, int max)
{
   1c24e:	a1 e1       	ldi	r26, 0x11	; 17
   1c250:	b0 e0       	ldi	r27, 0x00	; 0
   1c252:	ec e2       	ldi	r30, 0x2C	; 44
   1c254:	f1 ee       	ldi	r31, 0xE1	; 225
   1c256:	ed c5       	rjmp	.+3034   	; 0x1ce32 <__prologue_saves__+0x18>
   1c258:	ec 01       	movw	r28, r24
   1c25a:	7b 01       	movw	r14, r22
   1c25c:	8a 01       	movw	r16, r20
// normaize tm_t before output
    (void) normalize(t,0);
   1c25e:	60 e0       	ldi	r22, 0x00	; 0
   1c260:	70 e0       	ldi	r23, 0x00	; 0
   1c262:	0e 94 cb 38 	call	0x7196	; 0x7196 <normalize>
    memset(buf,0,max);
   1c266:	a8 01       	movw	r20, r16
   1c268:	60 e0       	ldi	r22, 0x00	; 0
   1c26a:	70 e0       	ldi	r23, 0x00	; 0
   1c26c:	c7 01       	movw	r24, r14
   1c26e:	0e 94 05 eb 	call	0x1d60a	; 0x1d60a <memset>
    snprintf(buf,max-1,"%s %2d %02d:%02d:%02d",
   1c272:	88 85       	ldd	r24, Y+8	; 0x08
   1c274:	99 85       	ldd	r25, Y+9	; 0x09
   1c276:	0e 94 b0 36 	call	0x6d60	; 0x6d60 <tm_mon_to_ascii>
   1c27a:	28 81       	ld	r18, Y
   1c27c:	39 81       	ldd	r19, Y+1	; 0x01
   1c27e:	ed b7       	in	r30, 0x3d	; 61
   1c280:	fe b7       	in	r31, 0x3e	; 62
   1c282:	31 8b       	std	Z+17, r19	; 0x11
   1c284:	20 8b       	std	Z+16, r18	; 0x10
   1c286:	2a 81       	ldd	r18, Y+2	; 0x02
   1c288:	3b 81       	ldd	r19, Y+3	; 0x03
   1c28a:	37 87       	std	Z+15, r19	; 0x0f
   1c28c:	26 87       	std	Z+14, r18	; 0x0e
   1c28e:	2c 81       	ldd	r18, Y+4	; 0x04
   1c290:	3d 81       	ldd	r19, Y+5	; 0x05
   1c292:	35 87       	std	Z+13, r19	; 0x0d
   1c294:	24 87       	std	Z+12, r18	; 0x0c
   1c296:	2e 81       	ldd	r18, Y+6	; 0x06
   1c298:	3f 81       	ldd	r19, Y+7	; 0x07
   1c29a:	33 87       	std	Z+11, r19	; 0x0b
   1c29c:	22 87       	std	Z+10, r18	; 0x0a
   1c29e:	91 87       	std	Z+9, r25	; 0x09
   1c2a0:	80 87       	std	Z+8, r24	; 0x08
   1c2a2:	8b e3       	ldi	r24, 0x3B	; 59
   1c2a4:	9b e4       	ldi	r25, 0x4B	; 75
   1c2a6:	a0 e0       	ldi	r26, 0x00	; 0
   1c2a8:	85 83       	std	Z+5, r24	; 0x05
   1c2aa:	96 83       	std	Z+6, r25	; 0x06
   1c2ac:	a7 83       	std	Z+7, r26	; 0x07
   1c2ae:	01 50       	subi	r16, 0x01	; 1
   1c2b0:	11 09       	sbc	r17, r1
   1c2b2:	14 83       	std	Z+4, r17	; 0x04
   1c2b4:	03 83       	std	Z+3, r16	; 0x03
   1c2b6:	f2 82       	std	Z+2, r15	; 0x02
   1c2b8:	e1 82       	std	Z+1, r14	; 0x01
   1c2ba:	0e 94 04 47 	call	0x8e08	; 0x8e08 <snprintf_P>
        (int)t->tm_mday,
        (int)t->tm_hour,
        (int)t->tm_min,
        (int)t->tm_sec);
    return(buf);
}
   1c2be:	c7 01       	movw	r24, r14
   1c2c0:	cd b7       	in	r28, 0x3d	; 61
   1c2c2:	de b7       	in	r29, 0x3e	; 62
   1c2c4:	61 96       	adiw	r28, 0x11	; 17
   1c2c6:	e6 e0       	ldi	r30, 0x06	; 6
   1c2c8:	d0 c5       	rjmp	.+2976   	; 0x1ce6a <__epilogue_restores__+0x18>

0001c2ca <lcd_backlight>:

///@brief lcd_backlight LCD Backlight settings
/// @param[in] rgb: hex value 0xRRGGBB, RR,GG,BB values are 0 to 255
uint8_t  _backlight[5] = { 0x7c, '+', 0x80, 0x80, 0x80 };	/* Backlight half bright */
uint8_t lcd_backlight(uint32_t rgb)
{
   1c2ca:	cf 93       	push	r28
   1c2cc:	00 d0       	rcall	.+0      	; 0x1c2ce <lcd_backlight+0x4>
   1c2ce:	1f 92       	push	r1

	_backlight[2] = 0xff & (rgb >> 16);
   1c2d0:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <_backlight+0x2>
	_backlight[3] = 0xff & (rgb >> 8);
   1c2d4:	70 93 f3 02 	sts	0x02F3, r23	; 0x8002f3 <_backlight+0x3>
	_backlight[4] = 0xff & (rgb );
   1c2d8:	60 93 f4 02 	sts	0x02F4, r22	; 0x8002f4 <_backlight+0x4>

	if(! i2c_fn(0x72, TW_WRITE, _backlight, sizeof(_backlight)) )
   1c2dc:	25 e0       	ldi	r18, 0x05	; 5
   1c2de:	40 ef       	ldi	r20, 0xF0	; 240
   1c2e0:	52 e0       	ldi	r21, 0x02	; 2
   1c2e2:	60 e0       	ldi	r22, 0x00	; 0
   1c2e4:	82 e7       	ldi	r24, 0x72	; 114
   1c2e6:	0e 94 43 2d 	call	0x5a86	; 0x5a86 <i2c_fn>
   1c2ea:	c8 2f       	mov	r28, r24
   1c2ec:	81 11       	cpse	r24, r1
   1c2ee:	0d c0       	rjmp	.+26     	; 0x1c30a <lcd_backlight+0x40>
	{
		i2c_display_task_errors();
   1c2f0:	0e 94 47 2f 	call	0x5e8e	; 0x5e8e <i2c_display_task_errors>
        printf("I2C LCD is NOT attached!\n");
   1c2f4:	81 e2       	ldi	r24, 0x21	; 33
   1c2f6:	9b e4       	ldi	r25, 0x4B	; 75
   1c2f8:	a0 e0       	ldi	r26, 0x00	; 0
   1c2fa:	ed b7       	in	r30, 0x3d	; 61
   1c2fc:	fe b7       	in	r31, 0x3e	; 62
   1c2fe:	81 83       	std	Z+1, r24	; 0x01
   1c300:	92 83       	std	Z+2, r25	; 0x02
   1c302:	a3 83       	std	Z+3, r26	; 0x03
   1c304:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   1c308:	01 c0       	rjmp	.+2      	; 0x1c30c <lcd_backlight+0x42>
		return(0);
	}
	return(1);
   1c30a:	c1 e0       	ldi	r28, 0x01	; 1
}
   1c30c:	8c 2f       	mov	r24, r28
   1c30e:	0f 90       	pop	r0
   1c310:	0f 90       	pop	r0
   1c312:	0f 90       	pop	r0
   1c314:	cf 91       	pop	r28
   1c316:	08 95       	ret

0001c318 <lcd_setup>:
///@brief LCD setup code
/// For a SparkFun SERLCD 2x16 display
/// Initializes the I2C deiplay update task structure 
/// Passes the structures to the interrupt handler
void lcd_setup()
{
   1c318:	cf 93       	push	r28
   1c31a:	ad b7       	in	r26, 0x3d	; 61
   1c31c:	be b7       	in	r27, 0x3e	; 62
   1c31e:	17 97       	sbiw	r26, 0x07	; 7
   1c320:	0f b6       	in	r0, 0x3f	; 63
   1c322:	f8 94       	cli
   1c324:	be bf       	out	0x3e, r27	; 62
   1c326:	0f be       	out	0x3f, r0	; 63
   1c328:	ad bf       	out	0x3d, r26	; 61
	int ind = 0;
    uint8_t sreg = SREG;
   1c32a:	cf b7       	in	r28, 0x3f	; 63

    printf("I2C LCD initialization start\n");
   1c32c:	83 e0       	ldi	r24, 0x03	; 3
   1c32e:	9b e4       	ldi	r25, 0x4B	; 75
   1c330:	a0 e0       	ldi	r26, 0x00	; 0
   1c332:	ed b7       	in	r30, 0x3d	; 61
   1c334:	fe b7       	in	r31, 0x3e	; 62
   1c336:	81 83       	std	Z+1, r24	; 0x01
   1c338:	92 83       	std	Z+2, r25	; 0x02
   1c33a:	a3 83       	std	Z+3, r26	; 0x03
   1c33c:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>

	if(set_timers(lcd_task,1) == -1)
   1c340:	61 e0       	ldi	r22, 0x01	; 1
   1c342:	70 e0       	ldi	r23, 0x00	; 0
   1c344:	8c eb       	ldi	r24, 0xBC	; 188
   1c346:	90 ee       	ldi	r25, 0xE0	; 224
   1c348:	0e 94 da 34 	call	0x69b4	; 0x69b4 <set_timers>
   1c34c:	01 96       	adiw	r24, 0x01	; 1
   1c34e:	51 f4       	brne	.+20     	; 0x1c364 <lcd_setup+0x4c>
        printf("lcd_task init failed\n");
   1c350:	8d ee       	ldi	r24, 0xED	; 237
   1c352:	9a e4       	ldi	r25, 0x4A	; 74
   1c354:	a0 e0       	ldi	r26, 0x00	; 0
   1c356:	ed b7       	in	r30, 0x3d	; 61
   1c358:	fe b7       	in	r31, 0x3e	; 62
   1c35a:	81 83       	std	Z+1, r24	; 0x01
   1c35c:	92 83       	std	Z+2, r25	; 0x02
   1c35e:	a3 83       	std	Z+3, r26	; 0x03
   1c360:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>

	i2c_init(100000);
   1c364:	60 ea       	ldi	r22, 0xA0	; 160
   1c366:	76 e8       	ldi	r23, 0x86	; 134
   1c368:	81 e0       	ldi	r24, 0x01	; 1
   1c36a:	90 e0       	ldi	r25, 0x00	; 0
   1c36c:	0e 94 4a 2c 	call	0x5894	; 0x5894 <i2c_init>

	i2c_task_init();
   1c370:	0e 94 0b 2c 	call	0x5816	; 0x5816 <i2c_task_init>

	cli();
   1c374:	f8 94       	cli

	// Default startup message
    sprintf((char *) _line1, "%-16s", "HP85Disk V2");
   1c376:	8f ef       	ldi	r24, 0xFF	; 255
   1c378:	96 e1       	ldi	r25, 0x16	; 22
   1c37a:	ed b7       	in	r30, 0x3d	; 61
   1c37c:	fe b7       	in	r31, 0x3e	; 62
   1c37e:	97 83       	std	Z+7, r25	; 0x07
   1c380:	86 83       	std	Z+6, r24	; 0x06
   1c382:	87 ee       	ldi	r24, 0xE7	; 231
   1c384:	9a e4       	ldi	r25, 0x4A	; 74
   1c386:	a0 e0       	ldi	r26, 0x00	; 0
   1c388:	83 83       	std	Z+3, r24	; 0x03
   1c38a:	94 83       	std	Z+4, r25	; 0x04
   1c38c:	a5 83       	std	Z+5, r26	; 0x05
   1c38e:	8c e0       	ldi	r24, 0x0C	; 12
   1c390:	93 e0       	ldi	r25, 0x03	; 3
   1c392:	92 83       	std	Z+2, r25	; 0x02
   1c394:	81 83       	std	Z+1, r24	; 0x01
   1c396:	0e 94 18 47 	call	0x8e30	; 0x8e30 <sprintf_P>
    sprintf((char *) _line2, "%-16s", "(C)Mike Gore");
   1c39a:	8b e0       	ldi	r24, 0x0B	; 11
   1c39c:	97 e1       	ldi	r25, 0x17	; 23
   1c39e:	ed b7       	in	r30, 0x3d	; 61
   1c3a0:	fe b7       	in	r31, 0x3e	; 62
   1c3a2:	97 83       	std	Z+7, r25	; 0x07
   1c3a4:	86 83       	std	Z+6, r24	; 0x06
   1c3a6:	81 ee       	ldi	r24, 0xE1	; 225
   1c3a8:	9a e4       	ldi	r25, 0x4A	; 74
   1c3aa:	a0 e0       	ldi	r26, 0x00	; 0
   1c3ac:	83 83       	std	Z+3, r24	; 0x03
   1c3ae:	94 83       	std	Z+4, r25	; 0x04
   1c3b0:	a5 83       	std	Z+5, r26	; 0x05
   1c3b2:	85 ef       	ldi	r24, 0xF5	; 245
   1c3b4:	92 e0       	ldi	r25, 0x02	; 2
   1c3b6:	92 83       	std	Z+2, r25	; 0x02
   1c3b8:	81 83       	std	Z+1, r24	; 0x01
   1c3ba:	0e 94 18 47 	call	0x8e30	; 0x8e30 <sprintf_P>

	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _cmd1, sizeof(_cmd1));
   1c3be:	22 e0       	ldi	r18, 0x02	; 2
   1c3c0:	41 e2       	ldi	r20, 0x21	; 33
   1c3c2:	53 e0       	ldi	r21, 0x03	; 3
   1c3c4:	60 e0       	ldi	r22, 0x00	; 0
   1c3c6:	82 e7       	ldi	r24, 0x72	; 114
   1c3c8:	0e 94 20 2c 	call	0x5840	; 0x5840 <i2c_task_op_add>
   1c3cc:	90 93 57 17 	sts	0x1757, r25	; 0x801757 <i2c_task_op+0x1>
   1c3d0:	80 93 56 17 	sts	0x1756, r24	; 0x801756 <i2c_task_op>
	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _line1, 16);
   1c3d4:	20 e1       	ldi	r18, 0x10	; 16
   1c3d6:	4c e0       	ldi	r20, 0x0C	; 12
   1c3d8:	53 e0       	ldi	r21, 0x03	; 3
   1c3da:	60 e0       	ldi	r22, 0x00	; 0
   1c3dc:	82 e7       	ldi	r24, 0x72	; 114
   1c3de:	0e 94 20 2c 	call	0x5840	; 0x5840 <i2c_task_op_add>
   1c3e2:	90 93 59 17 	sts	0x1759, r25	; 0x801759 <i2c_task_op+0x3>
   1c3e6:	80 93 58 17 	sts	0x1758, r24	; 0x801758 <i2c_task_op+0x2>
	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _cmd2, sizeof(_cmd2));
   1c3ea:	22 e0       	ldi	r18, 0x02	; 2
   1c3ec:	4a e0       	ldi	r20, 0x0A	; 10
   1c3ee:	53 e0       	ldi	r21, 0x03	; 3
   1c3f0:	60 e0       	ldi	r22, 0x00	; 0
   1c3f2:	82 e7       	ldi	r24, 0x72	; 114
   1c3f4:	0e 94 20 2c 	call	0x5840	; 0x5840 <i2c_task_op_add>
   1c3f8:	90 93 5b 17 	sts	0x175B, r25	; 0x80175b <i2c_task_op+0x5>
   1c3fc:	80 93 5a 17 	sts	0x175A, r24	; 0x80175a <i2c_task_op+0x4>
	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _line2, 16);
   1c400:	20 e1       	ldi	r18, 0x10	; 16
   1c402:	45 ef       	ldi	r20, 0xF5	; 245
   1c404:	52 e0       	ldi	r21, 0x02	; 2
   1c406:	60 e0       	ldi	r22, 0x00	; 0
   1c408:	82 e7       	ldi	r24, 0x72	; 114
   1c40a:	0e 94 20 2c 	call	0x5840	; 0x5840 <i2c_task_op_add>
   1c40e:	90 93 5d 17 	sts	0x175D, r25	; 0x80175d <i2c_task_op+0x7>
   1c412:	80 93 5c 17 	sts	0x175C, r24	; 0x80175c <i2c_task_op+0x6>

	SREG = sreg;
   1c416:	cf bf       	out	0x3f, r28	; 63

    i2c_task_run();
   1c418:	0e 94 e0 2c 	call	0x59c0	; 0x59c0 <i2c_task_run>
	// wait long enough for us to see the startup message
    delayms(1000);
   1c41c:	68 ee       	ldi	r22, 0xE8	; 232
   1c41e:	73 e0       	ldi	r23, 0x03	; 3
   1c420:	80 e0       	ldi	r24, 0x00	; 0
   1c422:	90 e0       	ldi	r25, 0x00	; 0
   1c424:	0e 94 86 28 	call	0x510c	; 0x510c <delayms>
	
	// Verify the task finished - it normally takes < 30mS
    if(!i2c_task_done())
   1c428:	0e 94 c1 2c 	call	0x5982	; 0x5982 <i2c_task_done>
   1c42c:	81 11       	cpse	r24, r1
   1c42e:	0c c0       	rjmp	.+24     	; 0x1c448 <lcd_setup+0x130>
	{
		i2c_display_task_errors();
   1c430:	0e 94 47 2f 	call	0x5e8e	; 0x5e8e <i2c_display_task_errors>
        printf("I2C LCD is NOT attached!\n");
   1c434:	87 ec       	ldi	r24, 0xC7	; 199
   1c436:	9a e4       	ldi	r25, 0x4A	; 74
   1c438:	a0 e0       	ldi	r26, 0x00	; 0
   1c43a:	ed b7       	in	r30, 0x3d	; 61
   1c43c:	fe b7       	in	r31, 0x3e	; 62
   1c43e:	81 83       	std	Z+1, r24	; 0x01
   1c440:	92 83       	std	Z+2, r25	; 0x02
   1c442:	a3 83       	std	Z+3, r26	; 0x03
   1c444:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
	}

    sep();
   1c448:	0e 94 3b 32 	call	0x6476	; 0x6476 <sep>
}
   1c44c:	ad b7       	in	r26, 0x3d	; 61
   1c44e:	be b7       	in	r27, 0x3e	; 62
   1c450:	17 96       	adiw	r26, 0x07	; 7
   1c452:	0f b6       	in	r0, 0x3f	; 63
   1c454:	f8 94       	cli
   1c456:	be bf       	out	0x3e, r27	; 62
   1c458:	0f be       	out	0x3f, r0	; 63
   1c45a:	ad bf       	out	0x3d, r26	; 61
   1c45c:	cf 91       	pop	r28
   1c45e:	08 95       	ret

0001c460 <i2c_lcd_task>:


///@brief Update the LCD wile the system is running
/// Display SD card fault status and the current time
void i2c_lcd_task()
{
   1c460:	af e2       	ldi	r26, 0x2F	; 47
   1c462:	b0 e0       	ldi	r27, 0x00	; 0
   1c464:	e5 e3       	ldi	r30, 0x35	; 53
   1c466:	f2 ee       	ldi	r31, 0xE2	; 226
   1c468:	e7 c4       	rjmp	.+2510   	; 0x1ce38 <__prologue_saves__+0x1e>
	char buf[32];
	uint8_t sreg=SREG;
   1c46a:	1f b7       	in	r17, 0x3f	; 63
    ts_t ts;

	cli();
   1c46c:	f8 94       	cli
	if(!mmc_ins_status())
   1c46e:	0e 94 1a 6f 	call	0xde34	; 0xde34 <mmc_ins_status>
   1c472:	89 2b       	or	r24, r25
   1c474:	49 f4       	brne	.+18     	; 0x1c488 <i2c_lcd_task+0x28>
	{
		sprintf((char *) _line2,"%-16s", "SD Card Fault");
   1c476:	88 e1       	ldi	r24, 0x18	; 24
   1c478:	97 e1       	ldi	r25, 0x17	; 23
   1c47a:	ed b7       	in	r30, 0x3d	; 61
   1c47c:	fe b7       	in	r31, 0x3e	; 62
   1c47e:	97 83       	std	Z+7, r25	; 0x07
   1c480:	86 83       	std	Z+6, r24	; 0x06
   1c482:	81 ec       	ldi	r24, 0xC1	; 193
   1c484:	9a e4       	ldi	r25, 0x4A	; 74
   1c486:	17 c0       	rjmp	.+46     	; 0x1c4b6 <i2c_lcd_task+0x56>
	}
	else
	{
		clock_gettime(0, (ts_t *) &ts);
   1c488:	be 01       	movw	r22, r28
   1c48a:	68 5d       	subi	r22, 0xD8	; 216
   1c48c:	7f 4f       	sbci	r23, 0xFF	; 255
   1c48e:	80 e0       	ldi	r24, 0x00	; 0
   1c490:	90 e0       	ldi	r25, 0x00	; 0
   1c492:	0e 94 ea 33 	call	0x67d4	; 0x67d4 <clock_gettime>
		sprintf((char *) _line2, "%-16s", lcd_time(gmtime(&(ts.tv_sec)),buf,sizeof(buf)-1) );
   1c496:	ce 01       	movw	r24, r28
   1c498:	88 96       	adiw	r24, 0x28	; 40
   1c49a:	0e 94 d4 37 	call	0x6fa8	; 0x6fa8 <gmtime>
   1c49e:	4f e1       	ldi	r20, 0x1F	; 31
   1c4a0:	50 e0       	ldi	r21, 0x00	; 0
   1c4a2:	be 01       	movw	r22, r28
   1c4a4:	68 5f       	subi	r22, 0xF8	; 248
   1c4a6:	7f 4f       	sbci	r23, 0xFF	; 255
   1c4a8:	d2 de       	rcall	.-604    	; 0x1c24e <lcd_time>
   1c4aa:	ed b7       	in	r30, 0x3d	; 61
   1c4ac:	fe b7       	in	r31, 0x3e	; 62
   1c4ae:	97 83       	std	Z+7, r25	; 0x07
   1c4b0:	86 83       	std	Z+6, r24	; 0x06
   1c4b2:	8b eb       	ldi	r24, 0xBB	; 187
   1c4b4:	9a e4       	ldi	r25, 0x4A	; 74
   1c4b6:	a0 e0       	ldi	r26, 0x00	; 0
   1c4b8:	83 83       	std	Z+3, r24	; 0x03
   1c4ba:	94 83       	std	Z+4, r25	; 0x04
   1c4bc:	a5 83       	std	Z+5, r26	; 0x05
   1c4be:	85 ef       	ldi	r24, 0xF5	; 245
   1c4c0:	92 e0       	ldi	r25, 0x02	; 2
   1c4c2:	92 83       	std	Z+2, r25	; 0x02
   1c4c4:	81 83       	std	Z+1, r24	; 0x01
   1c4c6:	0e 94 18 47 	call	0x8e30	; 0x8e30 <sprintf_P>
		// sprintf((char *) _line2,"%16ld.%03ld", (long) ts.tv_sec, (long) ts.tv_nsec / 1000000UL);
	}
	SREG=sreg;
   1c4ca:	1f bf       	out	0x3f, r17	; 63

    i2c_task_run();
   1c4cc:	0e 94 e0 2c 	call	0x59c0	; 0x59c0 <i2c_task_run>
}
   1c4d0:	af 96       	adiw	r28, 0x2f	; 47
   1c4d2:	e3 e0       	ldi	r30, 0x03	; 3
   1c4d4:	cd c4       	rjmp	.+2458   	; 0x1ce70 <__epilogue_restores__+0x1e>

0001c4d6 <gpib_user_task>:
///@brief GPIB callback from gpib_read_byte()
/// This function gets called evry time trough the read loop
/// This task run in the forground - is not an interrupt task
void gpib_user_task()
{
	uint8_t sreg = SREG;
   1c4d6:	8f b7       	in	r24, 0x3f	; 63

	cli();
   1c4d8:	f8 94       	cli
	if(lcd_display_time > 100) // increments at 1000HZ
   1c4da:	20 91 ea 19 	lds	r18, 0x19EA	; 0x8019ea <lcd_display_time>
   1c4de:	30 91 eb 19 	lds	r19, 0x19EB	; 0x8019eb <lcd_display_time+0x1>
   1c4e2:	25 36       	cpi	r18, 0x65	; 101
   1c4e4:	31 05       	cpc	r19, r1
   1c4e6:	3c f0       	brlt	.+14     	; 0x1c4f6 <gpib_user_task+0x20>
	{
		lcd_display_time = 0;
   1c4e8:	10 92 eb 19 	sts	0x19EB, r1	; 0x8019eb <lcd_display_time+0x1>
   1c4ec:	10 92 ea 19 	sts	0x19EA, r1	; 0x8019ea <lcd_display_time>
		SREG = sreg;
   1c4f0:	8f bf       	out	0x3f, r24	; 63
		i2c_lcd_task();
   1c4f2:	b6 cf       	rjmp	.-148    	; 0x1c460 <i2c_lcd_task>
		return;
   1c4f4:	08 95       	ret
	}
	SREG = sreg;
   1c4f6:	8f bf       	out	0x3f, r24	; 63
   1c4f8:	08 95       	ret

0001c4fa <help>:
/// @brief  Display the main help menu - calls all other help menus
/// @return  void
/// @see gpib_help()
/// @see fatfs_help()
void help()
{
   1c4fa:	00 d0       	rcall	.+0      	; 0x1c4fc <help+0x2>
   1c4fc:	1f 92       	push	r1

    copyright();
   1c4fe:	46 de       	rcall	.-884    	; 0x1c18c <copyright>

#ifdef FATFS_TESTS
    fatfs_help(0);
   1c500:	80 e0       	ldi	r24, 0x00	; 0
   1c502:	90 e0       	ldi	r25, 0x00	; 0
   1c504:	0e 94 41 73 	call	0xe682	; 0xe682 <fatfs_help>
#endif

#ifdef POSIX_TESTS
    posix_help(0);
   1c508:	80 e0       	ldi	r24, 0x00	; 0
   1c50a:	90 e0       	ldi	r25, 0x00	; 0
   1c50c:	0e 94 97 7e 	call	0xfd2e	; 0xfd2e <posix_help>
#endif

#ifdef LIF_SUPPORT
    lif_help(0);
   1c510:	80 e0       	ldi	r24, 0x00	; 0
   1c512:	90 e0       	ldi	r25, 0x00	; 0
   1c514:	0e 94 e7 c0 	call	0x181ce	; 0x181ce <lif_help>
#endif
#ifdef TELEDISK
    td0_help(0);
#endif

    gpib_help(0);
   1c518:	80 e0       	ldi	r24, 0x00	; 0
   1c51a:	90 e0       	ldi	r25, 0x00	; 0
   1c51c:	0e 94 f8 91 	call	0x123f0	; 0x123f0 <gpib_help>

    printf(
   1c520:	8a ef       	ldi	r24, 0xFA	; 250
   1c522:	99 e4       	ldi	r25, 0x49	; 73
   1c524:	a0 e0       	ldi	r26, 0x00	; 0
   1c526:	ed b7       	in	r30, 0x3d	; 61
   1c528:	fe b7       	in	r31, 0x3e	; 62
   1c52a:	81 83       	std	Z+1, r24	; 0x01
   1c52c:	92 83       	std	Z+2, r25	; 0x02
   1c52e:	a3 83       	std	Z+3, r26	; 0x03
   1c530:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
        "reset   - reset emulator\n"
        "setdate - set date\n"
        "time    - display current time\n"
        "\n"
        );
}
   1c534:	0f 90       	pop	r0
   1c536:	0f 90       	pop	r0
   1c538:	0f 90       	pop	r0
   1c53a:	08 95       	ret

0001c53c <user_task.part.1>:
/// If a keypress is detected read a line from the uart
/// parse the result and call various user functions.
/// ? will return a list of fuctions and paramters permitted
/// @param[in] gpib - if non-zero run gpib while there are no user commands
/// @return  void
void user_task(uint8_t gpib)
   1c53c:	6f 92       	push	r6
   1c53e:	7f 92       	push	r7
   1c540:	8f 92       	push	r8
   1c542:	cf 92       	push	r12
   1c544:	df 92       	push	r13
   1c546:	ef 92       	push	r14
   1c548:	ff 92       	push	r15
   1c54a:	0f 93       	push	r16
   1c54c:	1f 93       	push	r17
   1c54e:	cf 93       	push	r28
   1c550:	df 93       	push	r29
   1c552:	cd b7       	in	r28, 0x3d	; 61
   1c554:	de b7       	in	r29, 0x3e	; 62
   1c556:	cb 56       	subi	r28, 0x6B	; 107
   1c558:	d1 40       	sbci	r29, 0x01	; 1
   1c55a:	0f b6       	in	r0, 0x3f	; 63
   1c55c:	f8 94       	cli
   1c55e:	de bf       	out	0x3e, r29	; 62
   1c560:	0f be       	out	0x3f, r0	; 63
   1c562:	cd bf       	out	0x3d, r28	; 61
        gpib_task();

    if(!kbhit(0))
        return;

    printf("\n>");
   1c564:	87 ef       	ldi	r24, 0xF7	; 247
   1c566:	99 e4       	ldi	r25, 0x49	; 73
   1c568:	a0 e0       	ldi	r26, 0x00	; 0
   1c56a:	ed b7       	in	r30, 0x3d	; 61
   1c56c:	fe b7       	in	r31, 0x3e	; 62
   1c56e:	81 83       	std	Z+1, r24	; 0x01
   1c570:	92 83       	std	Z+2, r25	; 0x02
   1c572:	a3 83       	std	Z+3, r26	; 0x03
   1c574:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>

	memset(line,0,sizeof(line)-1);
   1c578:	8e 01       	movw	r16, r28
   1c57a:	0a 5f       	subi	r16, 0xFA	; 250
   1c57c:	1f 4f       	sbci	r17, 0xFF	; 255
   1c57e:	8f ef       	ldi	r24, 0xFF	; 255
   1c580:	f8 01       	movw	r30, r16
   1c582:	11 92       	st	Z+, r1
   1c584:	8a 95       	dec	r24
   1c586:	e9 f7       	brne	.-6      	; 0x1c582 <user_task.part.1+0x46>

    fgets(line,sizeof(line)-2,stdin);
   1c588:	40 91 bf 1c 	lds	r20, 0x1CBF	; 0x801cbf <__iob>
   1c58c:	50 91 c0 1c 	lds	r21, 0x1CC0	; 0x801cc0 <__iob+0x1>
   1c590:	6e ef       	ldi	r22, 0xFE	; 254
   1c592:	70 e0       	ldi	r23, 0x00	; 0
   1c594:	c8 01       	movw	r24, r16
   1c596:	0e 94 83 76 	call	0xed06	; 0xed06 <fgets>
    trim_tail(line);
   1c59a:	c8 01       	movw	r24, r16
   1c59c:	0e 94 4b 32 	call	0x6496	; 0x6496 <trim_tail>
    argc = split_args(line,argv,50);
   1c5a0:	42 e3       	ldi	r20, 0x32	; 50
   1c5a2:	50 e0       	ldi	r21, 0x00	; 0
   1c5a4:	be 01       	movw	r22, r28
   1c5a6:	6a 5f       	subi	r22, 0xFA	; 250
   1c5a8:	7e 4f       	sbci	r23, 0xFE	; 254
   1c5aa:	c8 01       	movw	r24, r16
   1c5ac:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <split_args>
   1c5b0:	6c 01       	movw	r12, r24

	if(debug_input)
   1c5b2:	80 91 ec 19 	lds	r24, 0x19EC	; 0x8019ec <debug_input>
   1c5b6:	81 11       	cpse	r24, r1
   1c5b8:	0a c0       	rjmp	.+20     	; 0x1c5ce <user_task.part.1+0x92>
			printf("   [%s]\n", argv[i]);
	}

    ind = 0;
	result = 0;
    ptr = argv[ind++];
   1c5ba:	ca 5f       	subi	r28, 0xFA	; 250
   1c5bc:	de 4f       	sbci	r29, 0xFE	; 254
   1c5be:	e8 80       	ld	r14, Y
   1c5c0:	f9 80       	ldd	r15, Y+1	; 0x01
   1c5c2:	c6 50       	subi	r28, 0x06	; 6
   1c5c4:	d1 40       	sbci	r29, 0x01	; 1

    if(!ptr || argc < 1)
   1c5c6:	e1 14       	cp	r14, r1
   1c5c8:	f1 04       	cpc	r15, r1
   1c5ca:	51 f5       	brne	.+84     	; 0x1c620 <user_task.part.1+0xe4>
   1c5cc:	b7 c0       	rjmp	.+366    	; 0x1c73c <user_task.part.1+0x200>
    trim_tail(line);
    argc = split_args(line,argv,50);

	if(debug_input)
	{
        printf("Argument count = %d\n", argc);
   1c5ce:	ed b7       	in	r30, 0x3d	; 61
   1c5d0:	fe b7       	in	r31, 0x3e	; 62
   1c5d2:	d5 82       	std	Z+5, r13	; 0x05
   1c5d4:	c4 82       	std	Z+4, r12	; 0x04
   1c5d6:	82 ee       	ldi	r24, 0xE2	; 226
   1c5d8:	99 e4       	ldi	r25, 0x49	; 73
   1c5da:	a0 e0       	ldi	r26, 0x00	; 0
   1c5dc:	81 83       	std	Z+1, r24	; 0x01
   1c5de:	92 83       	std	Z+2, r25	; 0x02
   1c5e0:	a3 83       	std	Z+3, r26	; 0x03
   1c5e2:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   1c5e6:	ce 01       	movw	r24, r28
   1c5e8:	8a 5f       	subi	r24, 0xFA	; 250
   1c5ea:	9e 4f       	sbci	r25, 0xFE	; 254
   1c5ec:	7c 01       	movw	r14, r24
		for(i=0;i<argc;++i)
   1c5ee:	00 e0       	ldi	r16, 0x00	; 0
   1c5f0:	10 e0       	ldi	r17, 0x00	; 0
			printf("   [%s]\n", argv[i]);
   1c5f2:	89 ed       	ldi	r24, 0xD9	; 217
   1c5f4:	99 e4       	ldi	r25, 0x49	; 73
   1c5f6:	3c 01       	movw	r6, r24
   1c5f8:	81 2c       	mov	r8, r1
    argc = split_args(line,argv,50);

	if(debug_input)
	{
        printf("Argument count = %d\n", argc);
		for(i=0;i<argc;++i)
   1c5fa:	0c 15       	cp	r16, r12
   1c5fc:	1d 05       	cpc	r17, r13
   1c5fe:	ec f6       	brge	.-70     	; 0x1c5ba <user_task.part.1+0x7e>
			printf("   [%s]\n", argv[i]);
   1c600:	f7 01       	movw	r30, r14
   1c602:	81 91       	ld	r24, Z+
   1c604:	91 91       	ld	r25, Z+
   1c606:	7f 01       	movw	r14, r30
   1c608:	ed b7       	in	r30, 0x3d	; 61
   1c60a:	fe b7       	in	r31, 0x3e	; 62
   1c60c:	95 83       	std	Z+5, r25	; 0x05
   1c60e:	84 83       	std	Z+4, r24	; 0x04
   1c610:	61 82       	std	Z+1, r6	; 0x01
   1c612:	72 82       	std	Z+2, r7	; 0x02
   1c614:	83 82       	std	Z+3, r8	; 0x03
   1c616:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    argc = split_args(line,argv,50);

	if(debug_input)
	{
        printf("Argument count = %d\n", argc);
		for(i=0;i<argc;++i)
   1c61a:	0f 5f       	subi	r16, 0xFF	; 255
   1c61c:	1f 4f       	sbci	r17, 0xFF	; 255
   1c61e:	ed cf       	rjmp	.-38     	; 0x1c5fa <user_task.part.1+0xbe>

    ind = 0;
	result = 0;
    ptr = argv[ind++];

    if(!ptr || argc < 1)
   1c620:	1c 14       	cp	r1, r12
   1c622:	1d 04       	cpc	r1, r13
   1c624:	0c f0       	brlt	.+2      	; 0x1c628 <user_task.part.1+0xec>
   1c626:	8a c0       	rjmp	.+276    	; 0x1c73c <user_task.part.1+0x200>
    {
        result = 1;
    }
    else if (MATCHI(ptr,"input") )
   1c628:	6d e2       	ldi	r22, 0x2D	; 45
   1c62a:	77 e1       	ldi	r23, 0x17	; 23
   1c62c:	c7 01       	movw	r24, r14
   1c62e:	0e 94 79 32 	call	0x64f2	; 0x64f2 <MATCHI>
   1c632:	89 2b       	or	r24, r25
   1c634:	d9 f0       	breq	.+54     	; 0x1c66c <user_task.part.1+0x130>
    {
        debug_input = !debug_input;
   1c636:	80 91 ec 19 	lds	r24, 0x19EC	; 0x8019ec <debug_input>
   1c63a:	91 e0       	ldi	r25, 0x01	; 1
   1c63c:	81 11       	cpse	r24, r1
   1c63e:	90 e0       	ldi	r25, 0x00	; 0
   1c640:	90 93 ec 19 	sts	0x19EC, r25	; 0x8019ec <debug_input>
		printf("Input debugging: %s\n", debug_input ? "ON" : "OFF");
   1c644:	88 23       	and	r24, r24
   1c646:	19 f0       	breq	.+6      	; 0x1c64e <user_task.part.1+0x112>
   1c648:	89 e2       	ldi	r24, 0x29	; 41
   1c64a:	97 e1       	ldi	r25, 0x17	; 23
   1c64c:	02 c0       	rjmp	.+4      	; 0x1c652 <user_task.part.1+0x116>
   1c64e:	86 e2       	ldi	r24, 0x26	; 38
   1c650:	97 e1       	ldi	r25, 0x17	; 23
   1c652:	ed b7       	in	r30, 0x3d	; 61
   1c654:	fe b7       	in	r31, 0x3e	; 62
   1c656:	95 83       	std	Z+5, r25	; 0x05
   1c658:	84 83       	std	Z+4, r24	; 0x04
   1c65a:	84 ec       	ldi	r24, 0xC4	; 196
   1c65c:	99 e4       	ldi	r25, 0x49	; 73
   1c65e:	a0 e0       	ldi	r26, 0x00	; 0
   1c660:	81 83       	std	Z+1, r24	; 0x01
   1c662:	92 83       	std	Z+2, r25	; 0x02
   1c664:	a3 83       	std	Z+3, r26	; 0x03
   1c666:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   1c66a:	68 c0       	rjmp	.+208    	; 0x1c73c <user_task.part.1+0x200>

    }
#endif

#ifdef LCD_SUPPORT
    else if (MATCHI(ptr,"backlight") )
   1c66c:	63 e3       	ldi	r22, 0x33	; 51
   1c66e:	77 e1       	ldi	r23, 0x17	; 23
   1c670:	c7 01       	movw	r24, r14
   1c672:	0e 94 79 32 	call	0x64f2	; 0x64f2 <MATCHI>
   1c676:	89 2b       	or	r24, r25
   1c678:	f9 f0       	breq	.+62     	; 0x1c6b8 <user_task.part.1+0x17c>
    {
		uint32_t rgb;
        ptr = argv[ind];
   1c67a:	c8 5f       	subi	r28, 0xF8	; 248
   1c67c:	de 4f       	sbci	r29, 0xFE	; 254
   1c67e:	e8 80       	ld	r14, Y
   1c680:	f9 80       	ldd	r15, Y+1	; 0x01
   1c682:	c8 50       	subi	r28, 0x08	; 8
   1c684:	d1 40       	sbci	r29, 0x01	; 1
        if(*ptr == '=')
   1c686:	f7 01       	movw	r30, r14
   1c688:	80 81       	ld	r24, Z
   1c68a:	8d 33       	cpi	r24, 0x3D	; 61
   1c68c:	19 f4       	brne	.+6      	; 0x1c694 <user_task.part.1+0x158>
            ++ind;
   1c68e:	82 e0       	ldi	r24, 0x02	; 2
   1c690:	90 e0       	ldi	r25, 0x00	; 0
   1c692:	02 c0       	rjmp	.+4      	; 0x1c698 <user_task.part.1+0x15c>
			printf("   [%s]\n", argv[i]);
	}

    ind = 0;
	result = 0;
    ptr = argv[ind++];
   1c694:	81 e0       	ldi	r24, 0x01	; 1
   1c696:	90 e0       	ldi	r25, 0x00	; 0
    {
		uint32_t rgb;
        ptr = argv[ind];
        if(*ptr == '=')
            ++ind;
        rgb = get_value(argv[ind]);
   1c698:	88 0f       	add	r24, r24
   1c69a:	99 1f       	adc	r25, r25
   1c69c:	e6 e0       	ldi	r30, 0x06	; 6
   1c69e:	f1 e0       	ldi	r31, 0x01	; 1
   1c6a0:	ec 0f       	add	r30, r28
   1c6a2:	fd 1f       	adc	r31, r29
   1c6a4:	e8 0f       	add	r30, r24
   1c6a6:	f9 1f       	adc	r31, r25
   1c6a8:	80 81       	ld	r24, Z
   1c6aa:	91 81       	ldd	r25, Z+1	; 0x01
   1c6ac:	0e 94 70 33 	call	0x66e0	; 0x66e0 <get_value>
		result = lcd_backlight(rgb);
   1c6b0:	0c de       	rcall	.-1000   	; 0x1c2ca <lcd_backlight>
   1c6b2:	08 2f       	mov	r16, r24
   1c6b4:	10 e0       	ldi	r17, 0x00	; 0
   1c6b6:	44 c0       	rjmp	.+136    	; 0x1c740 <user_task.part.1+0x204>
    }
#endif

    else if ( MATCH(ptr,"mem") )
   1c6b8:	6d e3       	ldi	r22, 0x3D	; 61
   1c6ba:	77 e1       	ldi	r23, 0x17	; 23
   1c6bc:	c7 01       	movw	r24, r14
   1c6be:	0e 94 65 32 	call	0x64ca	; 0x64ca <MATCH>
   1c6c2:	89 2b       	or	r24, r25
   1c6c4:	19 f0       	breq	.+6      	; 0x1c6cc <user_task.part.1+0x190>
    {
        PrintFree();
   1c6c6:	0e 94 47 27 	call	0x4e8e	; 0x4e8e <PrintFree>
   1c6ca:	38 c0       	rjmp	.+112    	; 0x1c73c <user_task.part.1+0x200>
        result = 1;

    }
    else if ( MATCHI(ptr,"reset") )
   1c6cc:	64 ed       	ldi	r22, 0xD4	; 212
   1c6ce:	7d e0       	ldi	r23, 0x0D	; 13
   1c6d0:	c7 01       	movw	r24, r14
   1c6d2:	0e 94 79 32 	call	0x64f2	; 0x64f2 <MATCHI>
   1c6d6:	89 2b       	or	r24, r25
   1c6d8:	51 f0       	breq	.+20     	; 0x1c6ee <user_task.part.1+0x1b2>
    {
        cli();
   1c6da:	f8 94       	cli
        uart_rx_flush(0);
   1c6dc:	80 e0       	ldi	r24, 0x00	; 0
   1c6de:	0e 94 ce 28 	call	0x519c	; 0x519c <uart_rx_flush>
        cli();
   1c6e2:	f8 94       	cli
        MCUSR = (1 << EXTRF);
   1c6e4:	82 e0       	ldi	r24, 0x02	; 2
   1c6e6:	84 bf       	out	0x34, r24	; 52
        RESET();
   1c6e8:	e0 e0       	ldi	r30, 0x00	; 0
   1c6ea:	fc ef       	ldi	r31, 0xFC	; 252
   1c6ec:	09 95       	icall
		// should not return!
        result = 1;
    }
    else if ( MATCHI(ptr,"setdate" ) )
   1c6ee:	61 e4       	ldi	r22, 0x41	; 65
   1c6f0:	77 e1       	ldi	r23, 0x17	; 23
   1c6f2:	c7 01       	movw	r24, r14
   1c6f4:	0e 94 79 32 	call	0x64f2	; 0x64f2 <MATCHI>
   1c6f8:	89 2b       	or	r24, r25
   1c6fa:	19 f0       	breq	.+6      	; 0x1c702 <user_task.part.1+0x1c6>
    {
        setdate();
   1c6fc:	0e 94 b4 3b 	call	0x7768	; 0x7768 <setdate>
   1c700:	07 c0       	rjmp	.+14     	; 0x1c710 <user_task.part.1+0x1d4>
        display_clock();
        result = 1;
    }
    else if ( MATCHI(ptr,"time") )
   1c702:	69 e4       	ldi	r22, 0x49	; 73
   1c704:	77 e1       	ldi	r23, 0x17	; 23
   1c706:	c7 01       	movw	r24, r14
   1c708:	0e 94 79 32 	call	0x64f2	; 0x64f2 <MATCHI>
   1c70c:	89 2b       	or	r24, r25
   1c70e:	19 f0       	breq	.+6      	; 0x1c716 <user_task.part.1+0x1da>
    {
        display_clock();
   1c710:	0e 94 d0 3d 	call	0x7ba0	; 0x7ba0 <display_clock>
   1c714:	13 c0       	rjmp	.+38     	; 0x1c73c <user_task.part.1+0x200>
        result = 1;
    }
    else if ( MATCHI(ptr,"help") || MATCHI(ptr,"?") )
   1c716:	6d e6       	ldi	r22, 0x6D	; 109
   1c718:	76 e1       	ldi	r23, 0x16	; 22
   1c71a:	c7 01       	movw	r24, r14
   1c71c:	0e 94 79 32 	call	0x64f2	; 0x64f2 <MATCHI>
   1c720:	89 2b       	or	r24, r25
    {
        help();
   1c722:	11 f0       	breq	.+4      	; 0x1c728 <user_task.part.1+0x1ec>
   1c724:	ea de       	rcall	.-556    	; 0x1c4fa <help>
   1c726:	0a c0       	rjmp	.+20     	; 0x1c73c <user_task.part.1+0x200>
    else if ( MATCHI(ptr,"time") )
    {
        display_clock();
        result = 1;
    }
    else if ( MATCHI(ptr,"help") || MATCHI(ptr,"?") )
   1c728:	63 e7       	ldi	r22, 0x73	; 115
   1c72a:	76 e1       	ldi	r23, 0x16	; 22
   1c72c:	c7 01       	movw	r24, r14
   1c72e:	0e 94 79 32 	call	0x64f2	; 0x64f2 <MATCHI>
   1c732:	89 2b       	or	r24, r25
   1c734:	b9 f7       	brne	.-18     	; 0x1c724 <user_task.part.1+0x1e8>
		for(i=0;i<argc;++i)
			printf("   [%s]\n", argv[i]);
	}

    ind = 0;
	result = 0;
   1c736:	00 e0       	ldi	r16, 0x00	; 0
   1c738:	10 e0       	ldi	r17, 0x00	; 0
   1c73a:	02 c0       	rjmp	.+4      	; 0x1c740 <user_task.part.1+0x204>
    ptr = argv[ind++];

    if(!ptr || argc < 1)
    {
        result = 1;
   1c73c:	01 e0       	ldi	r16, 0x01	; 1
   1c73e:	10 e0       	ldi	r17, 0x00	; 0
    {
        help();
        result = 1;
    }

    if (MATCHI(ptr,"dir") )
   1c740:	68 ed       	ldi	r22, 0xD8	; 216
   1c742:	7b e0       	ldi	r23, 0x0B	; 11
   1c744:	c7 01       	movw	r24, r14
   1c746:	0e 94 79 32 	call	0x64f2	; 0x64f2 <MATCHI>
   1c74a:	89 2b       	or	r24, r25
   1c74c:	51 f1       	breq	.+84     	; 0x1c7a2 <user_task.part.1+0x266>
   1c74e:	86 e0       	ldi	r24, 0x06	; 6
   1c750:	68 2e       	mov	r6, r24
   1c752:	77 24       	eor	r7, r7
   1c754:	73 94       	inc	r7
   1c756:	6c 0e       	add	r6, r28
   1c758:	7d 1e       	adc	r7, r29
   1c75a:	f2 e0       	ldi	r31, 0x02	; 2
   1c75c:	6f 0e       	add	r6, r31
   1c75e:	71 1c       	adc	r7, r1
   1c760:	ee 24       	eor	r14, r14
   1c762:	e3 94       	inc	r14
   1c764:	f1 2c       	mov	r15, r1
   1c766:	01 e0       	ldi	r16, 0x01	; 1
   1c768:	10 e0       	ldi	r17, 0x00	; 0
    {
        int i;
        int args = 0;
        result = 1;
        for(i=1;i<argc;++i)
   1c76a:	ec 14       	cp	r14, r12
   1c76c:	fd 04       	cpc	r15, r13
   1c76e:	74 f4       	brge	.+28     	; 0x1c78c <user_task.part.1+0x250>
        {
            if(fatfs_ls(argv[i]) == 0)
   1c770:	f3 01       	movw	r30, r6
   1c772:	81 91       	ld	r24, Z+
   1c774:	91 91       	ld	r25, Z+
   1c776:	3f 01       	movw	r6, r30
   1c778:	0e 94 53 73 	call	0xe6a6	; 0xe6a6 <fatfs_ls>
   1c77c:	89 2b       	or	r24, r25
   1c77e:	11 f4       	brne	.+4      	; 0x1c784 <user_task.part.1+0x248>
				result = -1;
   1c780:	0f ef       	ldi	r16, 0xFF	; 255
   1c782:	1f ef       	ldi	r17, 0xFF	; 255
    if (MATCHI(ptr,"dir") )
    {
        int i;
        int args = 0;
        result = 1;
        for(i=1;i<argc;++i)
   1c784:	ff ef       	ldi	r31, 0xFF	; 255
   1c786:	ef 1a       	sub	r14, r31
   1c788:	ff 0a       	sbc	r15, r31
   1c78a:	ef cf       	rjmp	.-34     	; 0x1c76a <user_task.part.1+0x22e>
        {
            if(fatfs_ls(argv[i]) == 0)
				result = -1;
            ++args;
        }
        if(!args)
   1c78c:	ea 94       	dec	r14
   1c78e:	ef 28       	or	r14, r15
   1c790:	41 f4       	brne	.+16     	; 0x1c7a2 <user_task.part.1+0x266>
        {
            if(fatfs_ls("") == 0)
   1c792:	80 e2       	ldi	r24, 0x20	; 32
   1c794:	9c e0       	ldi	r25, 0x0C	; 12
   1c796:	0e 94 53 73 	call	0xe6a6	; 0xe6a6 <fatfs_ls>
   1c79a:	89 2b       	or	r24, r25
   1c79c:	11 f4       	brne	.+4      	; 0x1c7a2 <user_task.part.1+0x266>
				result = -1;
   1c79e:	0f ef       	ldi	r16, 0xFF	; 255
   1c7a0:	1f ef       	ldi	r17, 0xFF	; 255
        }
    }

	if( (ret = gpib_tests(argc,argv)) )
   1c7a2:	be 01       	movw	r22, r28
   1c7a4:	6a 5f       	subi	r22, 0xFA	; 250
   1c7a6:	7e 4f       	sbci	r23, 0xFE	; 254
   1c7a8:	c6 01       	movw	r24, r12
   1c7aa:	0e 94 19 92 	call	0x12432	; 0x12432 <gpib_tests>
   1c7ae:	00 97       	sbiw	r24, 0x00	; 0
   1c7b0:	51 f0       	breq	.+20     	; 0x1c7c6 <user_task.part.1+0x28a>
    {
		if(ret < 0)
   1c7b2:	97 fd       	sbrc	r25, 7
   1c7b4:	03 c0       	rjmp	.+6      	; 0x1c7bc <user_task.part.1+0x280>
			result = -1;
		else
			result = 1;
   1c7b6:	01 e0       	ldi	r16, 0x01	; 1
   1c7b8:	10 e0       	ldi	r17, 0x00	; 0
   1c7ba:	02 c0       	rjmp	.+4      	; 0x1c7c0 <user_task.part.1+0x284>
    }

	if( (ret = gpib_tests(argc,argv)) )
    {
		if(ret < 0)
			result = -1;
   1c7bc:	0f ef       	ldi	r16, 0xFF	; 255
   1c7be:	1f ef       	ldi	r17, 0xFF	; 255
		else
			result = 1;
// Restore GPIB BUS states
        gpib_init_devices();
   1c7c0:	0e 94 2d 8d 	call	0x11a5a	; 0x11a5a <gpib_init_devices>
   1c7c4:	0f c0       	rjmp	.+30     	; 0x1c7e4 <user_task.part.1+0x2a8>
    }

#ifdef POSIX_TESTS
    else if( (ret = posix_tests(argc,argv)) )
   1c7c6:	be 01       	movw	r22, r28
   1c7c8:	6a 5f       	subi	r22, 0xFA	; 250
   1c7ca:	7e 4f       	sbci	r23, 0xFE	; 254
   1c7cc:	c6 01       	movw	r24, r12
   1c7ce:	0e 94 fe 81 	call	0x103fc	; 0x103fc <posix_tests>
   1c7d2:	00 97       	sbiw	r24, 0x00	; 0
   1c7d4:	39 f0       	breq	.+14     	; 0x1c7e4 <user_task.part.1+0x2a8>
	{
		if(ret < 0)
   1c7d6:	97 fd       	sbrc	r25, 7
   1c7d8:	03 c0       	rjmp	.+6      	; 0x1c7e0 <user_task.part.1+0x2a4>
			result = -1;
		else
			result = 1;
   1c7da:	01 e0       	ldi	r16, 0x01	; 1
   1c7dc:	10 e0       	ldi	r17, 0x00	; 0
   1c7de:	02 c0       	rjmp	.+4      	; 0x1c7e4 <user_task.part.1+0x2a8>

#ifdef POSIX_TESTS
    else if( (ret = posix_tests(argc,argv)) )
	{
		if(ret < 0)
			result = -1;
   1c7e0:	0f ef       	ldi	r16, 0xFF	; 255
   1c7e2:	1f ef       	ldi	r17, 0xFF	; 255
			result = 1;
	}
#endif

#ifdef FATFS_TESTS
    if( (ret = fatfs_tests(argc,argv) ))
   1c7e4:	be 01       	movw	r22, r28
   1c7e6:	6a 5f       	subi	r22, 0xFA	; 250
   1c7e8:	7e 4f       	sbci	r23, 0xFE	; 254
   1c7ea:	c6 01       	movw	r24, r12
   1c7ec:	0e 94 5f 74 	call	0xe8be	; 0xe8be <fatfs_tests>
   1c7f0:	00 97       	sbiw	r24, 0x00	; 0
   1c7f2:	39 f0       	breq	.+14     	; 0x1c802 <user_task.part.1+0x2c6>
	{
		if(ret < 0)
   1c7f4:	97 fd       	sbrc	r25, 7
   1c7f6:	03 c0       	rjmp	.+6      	; 0x1c7fe <user_task.part.1+0x2c2>
			result = -1;
		else
			result = 1;
   1c7f8:	01 e0       	ldi	r16, 0x01	; 1
   1c7fa:	10 e0       	ldi	r17, 0x00	; 0
   1c7fc:	02 c0       	rjmp	.+4      	; 0x1c802 <user_task.part.1+0x2c6>

#ifdef FATFS_TESTS
    if( (ret = fatfs_tests(argc,argv) ))
	{
		if(ret < 0)
			result = -1;
   1c7fe:	0f ef       	ldi	r16, 0xFF	; 255
   1c800:	1f ef       	ldi	r17, 0xFF	; 255
			result = 1;
	}
#endif

#ifdef LIF_SUPPORT
    if( (ret = lif_tests(argc,argv)) )
   1c802:	be 01       	movw	r22, r28
   1c804:	6a 5f       	subi	r22, 0xFA	; 250
   1c806:	7e 4f       	sbci	r23, 0xFE	; 254
   1c808:	c6 01       	movw	r24, r12
   1c80a:	17 db       	rcall	.-2514   	; 0x1be3a <lif_tests>
   1c80c:	00 97       	sbiw	r24, 0x00	; 0
   1c80e:	19 f0       	breq	.+6      	; 0x1c816 <user_task.part.1+0x2da>
	{
		if(ret < 0)
   1c810:	97 ff       	sbrs	r25, 7
   1c812:	04 c0       	rjmp	.+8      	; 0x1c81c <user_task.part.1+0x2e0>
   1c814:	09 c0       	rjmp	.+18     	; 0x1c828 <user_task.part.1+0x2ec>
			result = -1;
		else
			result = 1;
	}
#endif
    if(result == 1)
   1c816:	01 30       	cpi	r16, 0x01	; 1
   1c818:	11 05       	cpc	r17, r1
   1c81a:	19 f4       	brne	.+6      	; 0x1c822 <user_task.part.1+0x2e6>
        printf("OK\n");
   1c81c:	80 ec       	ldi	r24, 0xC0	; 192
   1c81e:	99 e4       	ldi	r25, 0x49	; 73
   1c820:	05 c0       	rjmp	.+10     	; 0x1c82c <user_task.part.1+0x2f0>
	else if(result == -1)
   1c822:	0f 3f       	cpi	r16, 0xFF	; 255
   1c824:	1f 4f       	sbci	r17, 0xFF	; 255
   1c826:	59 f4       	brne	.+22     	; 0x1c83e <user_task.part.1+0x302>
        printf("Command FAILED\n");
   1c828:	80 eb       	ldi	r24, 0xB0	; 176
   1c82a:	99 e4       	ldi	r25, 0x49	; 73
   1c82c:	a0 e0       	ldi	r26, 0x00	; 0
   1c82e:	ed b7       	in	r30, 0x3d	; 61
   1c830:	fe b7       	in	r31, 0x3e	; 62
   1c832:	81 83       	std	Z+1, r24	; 0x01
   1c834:	92 83       	std	Z+2, r25	; 0x02
   1c836:	a3 83       	std	Z+3, r26	; 0x03
   1c838:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   1c83c:	33 c0       	rjmp	.+102    	; 0x1c8a4 <user_task.part.1+0x368>
    else
	{
        printf("Invalid Command\n");
   1c83e:	8f e9       	ldi	r24, 0x9F	; 159
   1c840:	99 e4       	ldi	r25, 0x49	; 73
   1c842:	a0 e0       	ldi	r26, 0x00	; 0
   1c844:	ed b7       	in	r30, 0x3d	; 61
   1c846:	fe b7       	in	r31, 0x3e	; 62
   1c848:	81 83       	std	Z+1, r24	; 0x01
   1c84a:	92 83       	std	Z+2, r25	; 0x02
   1c84c:	a3 83       	std	Z+3, r26	; 0x03
   1c84e:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
        printf("    Argument count = %d\n", argc);
   1c852:	ed b7       	in	r30, 0x3d	; 61
   1c854:	fe b7       	in	r31, 0x3e	; 62
   1c856:	d5 82       	std	Z+5, r13	; 0x05
   1c858:	c4 82       	std	Z+4, r12	; 0x04
   1c85a:	86 e8       	ldi	r24, 0x86	; 134
   1c85c:	99 e4       	ldi	r25, 0x49	; 73
   1c85e:	a0 e0       	ldi	r26, 0x00	; 0
   1c860:	81 83       	std	Z+1, r24	; 0x01
   1c862:	92 83       	std	Z+2, r25	; 0x02
   1c864:	a3 83       	std	Z+3, r26	; 0x03
   1c866:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
   1c86a:	8e 01       	movw	r16, r28
   1c86c:	0a 5f       	subi	r16, 0xFA	; 250
   1c86e:	1e 4f       	sbci	r17, 0xFE	; 254
		for(i=0;i<argc;++i)
   1c870:	e1 2c       	mov	r14, r1
   1c872:	f1 2c       	mov	r15, r1
			printf("       [%s]\n", argv[i]);
   1c874:	89 e7       	ldi	r24, 0x79	; 121
   1c876:	99 e4       	ldi	r25, 0x49	; 73
   1c878:	3c 01       	movw	r6, r24
   1c87a:	81 2c       	mov	r8, r1
        printf("Command FAILED\n");
    else
	{
        printf("Invalid Command\n");
        printf("    Argument count = %d\n", argc);
		for(i=0;i<argc;++i)
   1c87c:	ec 14       	cp	r14, r12
   1c87e:	fd 04       	cpc	r15, r13
   1c880:	8c f4       	brge	.+34     	; 0x1c8a4 <user_task.part.1+0x368>
			printf("       [%s]\n", argv[i]);
   1c882:	f8 01       	movw	r30, r16
   1c884:	81 91       	ld	r24, Z+
   1c886:	91 91       	ld	r25, Z+
   1c888:	8f 01       	movw	r16, r30
   1c88a:	ed b7       	in	r30, 0x3d	; 61
   1c88c:	fe b7       	in	r31, 0x3e	; 62
   1c88e:	95 83       	std	Z+5, r25	; 0x05
   1c890:	84 83       	std	Z+4, r24	; 0x04
   1c892:	61 82       	std	Z+1, r6	; 0x01
   1c894:	72 82       	std	Z+2, r7	; 0x02
   1c896:	83 82       	std	Z+3, r8	; 0x03
   1c898:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
        printf("Command FAILED\n");
    else
	{
        printf("Invalid Command\n");
        printf("    Argument count = %d\n", argc);
		for(i=0;i<argc;++i)
   1c89c:	ff ef       	ldi	r31, 0xFF	; 255
   1c89e:	ef 1a       	sub	r14, r31
   1c8a0:	ff 0a       	sbc	r15, r31
   1c8a2:	ec cf       	rjmp	.-40     	; 0x1c87c <user_task.part.1+0x340>
			printf("       [%s]\n", argv[i]);
	}
}
   1c8a4:	c5 59       	subi	r28, 0x95	; 149
   1c8a6:	de 4f       	sbci	r29, 0xFE	; 254
   1c8a8:	0f b6       	in	r0, 0x3f	; 63
   1c8aa:	f8 94       	cli
   1c8ac:	de bf       	out	0x3e, r29	; 62
   1c8ae:	0f be       	out	0x3f, r0	; 63
   1c8b0:	cd bf       	out	0x3d, r28	; 61
   1c8b2:	df 91       	pop	r29
   1c8b4:	cf 91       	pop	r28
   1c8b6:	1f 91       	pop	r17
   1c8b8:	0f 91       	pop	r16
   1c8ba:	ff 90       	pop	r15
   1c8bc:	ef 90       	pop	r14
   1c8be:	df 90       	pop	r13
   1c8c0:	cf 90       	pop	r12
   1c8c2:	8f 90       	pop	r8
   1c8c4:	7f 90       	pop	r7
   1c8c6:	6f 90       	pop	r6
   1c8c8:	08 95       	ret

0001c8ca <user_task>:
	int ret;
    char *argv[51];
    char line[256];


    if(gpib)
   1c8ca:	81 11       	cpse	r24, r1
        gpib_task();
   1c8cc:	0e 94 98 91 	call	0x12330	; 0x12330 <gpib_task>

    if(!kbhit(0))
   1c8d0:	80 e0       	ldi	r24, 0x00	; 0
   1c8d2:	0e 94 0e 2a 	call	0x541c	; 0x541c <uart_rx_count>
   1c8d6:	89 2b       	or	r24, r25
   1c8d8:	09 f0       	breq	.+2      	; 0x1c8dc <user_task+0x12>
   1c8da:	30 ce       	rjmp	.-928    	; 0x1c53c <user_task.part.1>
   1c8dc:	08 95       	ret

0001c8de <update_drive_counts>:
	}
}

#ifdef LCD_SUPPORT
void update_drive_counts()
{
   1c8de:	a9 e2       	ldi	r26, 0x29	; 41
   1c8e0:	b0 e0       	ldi	r27, 0x00	; 0
   1c8e2:	e4 e7       	ldi	r30, 0x74	; 116
   1c8e4:	f4 ee       	ldi	r31, 0xE4	; 228
   1c8e6:	a7 c2       	rjmp	.+1358   	; 0x1ce36 <__prologue_saves__+0x1c>
	char tmp[32];

    sprintf((char *) tmp, "SS80=%d AMIGO=%d",
   1c8e8:	83 e0       	ldi	r24, 0x03	; 3
   1c8ea:	0e 94 67 97 	call	0x12ece	; 0x12ece <count_drive_types>
   1c8ee:	18 2f       	mov	r17, r24
   1c8f0:	81 e0       	ldi	r24, 0x01	; 1
   1c8f2:	0e 94 67 97 	call	0x12ece	; 0x12ece <count_drive_types>
   1c8f6:	08 2e       	mov	r0, r24
   1c8f8:	00 0c       	add	r0, r0
   1c8fa:	99 0b       	sbc	r25, r25
   1c8fc:	ed b7       	in	r30, 0x3d	; 61
   1c8fe:	fe b7       	in	r31, 0x3e	; 62
   1c900:	91 87       	std	Z+9, r25	; 0x09
   1c902:	80 87       	std	Z+8, r24	; 0x08
   1c904:	81 2f       	mov	r24, r17
   1c906:	11 0f       	add	r17, r17
   1c908:	99 0b       	sbc	r25, r25
   1c90a:	97 83       	std	Z+7, r25	; 0x07
   1c90c:	86 83       	std	Z+6, r24	; 0x06
   1c90e:	88 e6       	ldi	r24, 0x68	; 104
   1c910:	99 e4       	ldi	r25, 0x49	; 73
   1c912:	a0 e0       	ldi	r26, 0x00	; 0
   1c914:	83 83       	std	Z+3, r24	; 0x03
   1c916:	94 83       	std	Z+4, r25	; 0x04
   1c918:	a5 83       	std	Z+5, r26	; 0x05
   1c91a:	8e 01       	movw	r16, r28
   1c91c:	06 5f       	subi	r16, 0xF6	; 246
   1c91e:	1f 4f       	sbci	r17, 0xFF	; 255
   1c920:	12 83       	std	Z+2, r17	; 0x02
   1c922:	01 83       	std	Z+1, r16	; 0x01
   1c924:	0e 94 18 47 	call	0x8e30	; 0x8e30 <sprintf_P>
        (int) count_drive_types(SS80_TYPE),
        (int) count_drive_types(AMIGO_TYPE) );
	sprintf((char *) _line1, "%-16s", tmp);
   1c928:	ed b7       	in	r30, 0x3d	; 61
   1c92a:	fe b7       	in	r31, 0x3e	; 62
   1c92c:	17 83       	std	Z+7, r17	; 0x07
   1c92e:	06 83       	std	Z+6, r16	; 0x06
   1c930:	82 e6       	ldi	r24, 0x62	; 98
   1c932:	99 e4       	ldi	r25, 0x49	; 73
   1c934:	a0 e0       	ldi	r26, 0x00	; 0
   1c936:	83 83       	std	Z+3, r24	; 0x03
   1c938:	94 83       	std	Z+4, r25	; 0x04
   1c93a:	a5 83       	std	Z+5, r26	; 0x05
   1c93c:	8c e0       	ldi	r24, 0x0C	; 12
   1c93e:	93 e0       	ldi	r25, 0x03	; 3
   1c940:	92 83       	std	Z+2, r25	; 0x02
   1c942:	81 83       	std	Z+1, r24	; 0x01
   1c944:	0e 94 18 47 	call	0x8e30	; 0x8e30 <sprintf_P>
}
   1c948:	a9 96       	adiw	r28, 0x29	; 41
   1c94a:	e4 e0       	ldi	r30, 0x04	; 4
   1c94c:	90 c2       	rjmp	.+1312   	; 0x1ce6e <__epilogue_restores__+0x1c>

0001c94e <main>:
#endif

/// @brief  main() for gpib project
/// @return  should never return!
int main(void)
{
   1c94e:	cf 93       	push	r28
   1c950:	df 93       	push	r29
   1c952:	cd b7       	in	r28, 0x3d	; 61
   1c954:	de b7       	in	r29, 0x3e	; 62
   1c956:	63 97       	sbiw	r28, 0x13	; 19
   1c958:	0f b6       	in	r0, 0x3f	; 63
   1c95a:	f8 94       	cli
   1c95c:	de bf       	out	0x3e, r29	; 62
   1c95e:	0f be       	out	0x3f, r0	; 63
   1c960:	cd bf       	out	0x3d, r28	; 61
    ts_t ts;
    uint32_t actual,baud;

	clear_error();		// Clear error state
   1c962:	0e 94 2b 27 	call	0x4e56	; 0x4e56 <clear_error>

	GPIO_PIN_LOW(LED1);	// Activity status
   1c966:	46 98       	cbi	0x08, 6	; 8
   1c968:	3e 9a       	sbi	0x07, 6	; 7

///@ initialize bus state as soon as practical
    gpib_bus_init();
   1c96a:	0e 94 d8 85 	call	0x10bb0	; 0x10bb0 <gpib_bus_init>
// BAUD setting moved to Makefile
    baud = BAUD;

///@ Initialize UART early
/// Returns actual BAUD rate - possible with hardware - may differ slightly
    actual = uart_init(0, baud);                  // Serial Port Initialize
   1c96e:	40 e0       	ldi	r20, 0x00	; 0
   1c970:	52 ec       	ldi	r21, 0xC2	; 194
   1c972:	61 e0       	ldi	r22, 0x01	; 1
   1c974:	70 e0       	ldi	r23, 0x00	; 0
   1c976:	80 e0       	ldi	r24, 0x00	; 0
   1c978:	0e 94 79 29 	call	0x52f2	; 0x52f2 <uart_init>
   1c97c:	6b 01       	movw	r12, r22
   1c97e:	7c 01       	movw	r14, r24

///@brief Power up delay
    delayms(200);
   1c980:	68 ec       	ldi	r22, 0xC8	; 200
   1c982:	70 e0       	ldi	r23, 0x00	; 0
   1c984:	80 e0       	ldi	r24, 0x00	; 0
   1c986:	90 e0       	ldi	r25, 0x00	; 0
   1c988:	0e 94 86 28 	call	0x510c	; 0x510c <delayms>

    sep();
   1c98c:	0e 94 3b 32 	call	0x6476	; 0x6476 <sep>
    printf("Start\n");
   1c990:	8b e5       	ldi	r24, 0x5B	; 91
   1c992:	99 e4       	ldi	r25, 0x49	; 73
   1c994:	a0 e0       	ldi	r26, 0x00	; 0
   1c996:	ed b7       	in	r30, 0x3d	; 61
   1c998:	fe b7       	in	r31, 0x3e	; 62
   1c99a:	81 83       	std	Z+1, r24	; 0x01
   1c99c:	92 83       	std	Z+2, r25	; 0x02
   1c99e:	a3 83       	std	Z+3, r26	; 0x03
   1c9a0:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    printf("CPU Clock = %lu\n", F_CPU);
   1c9a4:	80 e0       	ldi	r24, 0x00	; 0
   1c9a6:	9d e2       	ldi	r25, 0x2D	; 45
   1c9a8:	a1 e3       	ldi	r26, 0x31	; 49
   1c9aa:	b1 e0       	ldi	r27, 0x01	; 1
   1c9ac:	ed b7       	in	r30, 0x3d	; 61
   1c9ae:	fe b7       	in	r31, 0x3e	; 62
   1c9b0:	84 83       	std	Z+4, r24	; 0x04
   1c9b2:	95 83       	std	Z+5, r25	; 0x05
   1c9b4:	a6 83       	std	Z+6, r26	; 0x06
   1c9b6:	b7 83       	std	Z+7, r27	; 0x07
   1c9b8:	8a e4       	ldi	r24, 0x4A	; 74
   1c9ba:	99 e4       	ldi	r25, 0x49	; 73
   1c9bc:	a0 e0       	ldi	r26, 0x00	; 0
   1c9be:	81 83       	std	Z+1, r24	; 0x01
   1c9c0:	92 83       	std	Z+2, r25	; 0x02
   1c9c2:	a3 83       	std	Z+3, r26	; 0x03
   1c9c4:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    printf("Requested Baud Rate: %ld, Actual: %ld\n", (long)baud, (long)actual);
   1c9c8:	ed b7       	in	r30, 0x3d	; 61
   1c9ca:	fe b7       	in	r31, 0x3e	; 62
   1c9cc:	c0 86       	std	Z+8, r12	; 0x08
   1c9ce:	d1 86       	std	Z+9, r13	; 0x09
   1c9d0:	e2 86       	std	Z+10, r14	; 0x0a
   1c9d2:	f3 86       	std	Z+11, r15	; 0x0b
   1c9d4:	80 e0       	ldi	r24, 0x00	; 0
   1c9d6:	92 ec       	ldi	r25, 0xC2	; 194
   1c9d8:	a1 e0       	ldi	r26, 0x01	; 1
   1c9da:	b0 e0       	ldi	r27, 0x00	; 0
   1c9dc:	84 83       	std	Z+4, r24	; 0x04
   1c9de:	95 83       	std	Z+5, r25	; 0x05
   1c9e0:	a6 83       	std	Z+6, r26	; 0x06
   1c9e2:	b7 83       	std	Z+7, r27	; 0x07
   1c9e4:	83 e2       	ldi	r24, 0x23	; 35
   1c9e6:	99 e4       	ldi	r25, 0x49	; 73
   1c9e8:	a0 e0       	ldi	r26, 0x00	; 0
   1c9ea:	81 83       	std	Z+1, r24	; 0x01
   1c9ec:	92 83       	std	Z+2, r25	; 0x02
   1c9ee:	a3 83       	std	Z+3, r26	; 0x03
   1c9f0:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>

    init_timers();
   1c9f4:	0e 94 21 36 	call	0x6c42	; 0x6c42 <init_timers>

    sep();
   1c9f8:	0e 94 3b 32 	call	0x6476	; 0x6476 <sep>
    printf("HP85 Disk and Device Emulator\n");
   1c9fc:	84 e0       	ldi	r24, 0x04	; 4
   1c9fe:	99 e4       	ldi	r25, 0x49	; 73
   1ca00:	a0 e0       	ldi	r26, 0x00	; 0
   1ca02:	ed b7       	in	r30, 0x3d	; 61
   1ca04:	fe b7       	in	r31, 0x3e	; 62
   1ca06:	81 83       	std	Z+1, r24	; 0x01
   1ca08:	92 83       	std	Z+2, r25	; 0x02
   1ca0a:	a3 83       	std	Z+3, r26	; 0x03
   1ca0c:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    printf(" (C) 2014-2020 by Mike Gore\n");
   1ca10:	87 ee       	ldi	r24, 0xE7	; 231
   1ca12:	98 e4       	ldi	r25, 0x48	; 72
   1ca14:	a0 e0       	ldi	r26, 0x00	; 0
   1ca16:	ed b7       	in	r30, 0x3d	; 61
   1ca18:	fe b7       	in	r31, 0x3e	; 62
   1ca1a:	81 83       	std	Z+1, r24	; 0x01
   1ca1c:	92 83       	std	Z+2, r25	; 0x02
   1ca1e:	a3 83       	std	Z+3, r26	; 0x03
   1ca20:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    printf(" GNU version 3\n");
   1ca24:	87 ed       	ldi	r24, 0xD7	; 215
   1ca26:	98 e4       	ldi	r25, 0x48	; 72
   1ca28:	a0 e0       	ldi	r26, 0x00	; 0
   1ca2a:	ed b7       	in	r30, 0x3d	; 61
   1ca2c:	fe b7       	in	r31, 0x3e	; 62
   1ca2e:	81 83       	std	Z+1, r24	; 0x01
   1ca30:	92 83       	std	Z+2, r25	; 0x02
   1ca32:	a3 83       	std	Z+3, r26	; 0x03
   1ca34:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    printf("-> https://github.com/magore/hp85disk\n");
   1ca38:	80 eb       	ldi	r24, 0xB0	; 176
   1ca3a:	98 e4       	ldi	r25, 0x48	; 72
   1ca3c:	a0 e0       	ldi	r26, 0x00	; 0
   1ca3e:	ed b7       	in	r30, 0x3d	; 61
   1ca40:	fe b7       	in	r31, 0x3e	; 62
   1ca42:	81 83       	std	Z+1, r24	; 0x01
   1ca44:	92 83       	std	Z+2, r25	; 0x02
   1ca46:	a3 83       	std	Z+3, r26	; 0x03
   1ca48:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    printf("   GIT last pushed:   %s\n", GIT_VERSION);
   1ca4c:	87 eb       	ldi	r24, 0xB7	; 183
   1ca4e:	96 e1       	ldi	r25, 0x16	; 22
   1ca50:	ed b7       	in	r30, 0x3d	; 61
   1ca52:	fe b7       	in	r31, 0x3e	; 62
   1ca54:	95 83       	std	Z+5, r25	; 0x05
   1ca56:	84 83       	std	Z+4, r24	; 0x04
   1ca58:	86 e9       	ldi	r24, 0x96	; 150
   1ca5a:	98 e4       	ldi	r25, 0x48	; 72
   1ca5c:	a0 e0       	ldi	r26, 0x00	; 0
   1ca5e:	81 83       	std	Z+1, r24	; 0x01
   1ca60:	92 83       	std	Z+2, r25	; 0x02
   1ca62:	a3 83       	std	Z+3, r26	; 0x03
   1ca64:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    printf("   Last updated file: %s\n", LOCAL_MOD);
   1ca68:	8b ed       	ldi	r24, 0xDB	; 219
   1ca6a:	96 e1       	ldi	r25, 0x16	; 22
   1ca6c:	ed b7       	in	r30, 0x3d	; 61
   1ca6e:	fe b7       	in	r31, 0x3e	; 62
   1ca70:	95 83       	std	Z+5, r25	; 0x05
   1ca72:	84 83       	std	Z+4, r24	; 0x04
   1ca74:	8c e7       	ldi	r24, 0x7C	; 124
   1ca76:	98 e4       	ldi	r25, 0x48	; 72
   1ca78:	a0 e0       	ldi	r26, 0x00	; 0
   1ca7a:	81 83       	std	Z+1, r24	; 0x01
   1ca7c:	92 83       	std	Z+2, r25	; 0x02
   1ca7e:	a3 83       	std	Z+3, r26	; 0x03
   1ca80:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>

    sep();
   1ca84:	0e 94 3b 32 	call	0x6476	; 0x6476 <sep>
    PrintFree();
   1ca88:	0e 94 47 27 	call	0x4e8e	; 0x4e8e <PrintFree>

    sep();
   1ca8c:	0e 94 3b 32 	call	0x6476	; 0x6476 <sep>
    // delayms(200);                                 ///@brief Power up delay

///@ initialize SPI bus
    printf("Initializing SPI bus\n");
   1ca90:	86 e6       	ldi	r24, 0x66	; 102
   1ca92:	98 e4       	ldi	r25, 0x48	; 72
   1ca94:	a0 e0       	ldi	r26, 0x00	; 0
   1ca96:	ed b7       	in	r30, 0x3d	; 61
   1ca98:	fe b7       	in	r31, 0x3e	; 62
   1ca9a:	81 83       	std	Z+1, r24	; 0x01
   1ca9c:	92 83       	std	Z+2, r25	; 0x02
   1ca9e:	a3 83       	std	Z+3, r26	; 0x03
   1caa0:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    spi_init(MMC_SLOW,GPIO_B3);
   1caa4:	4b e0       	ldi	r20, 0x0B	; 11
   1caa6:	50 e0       	ldi	r21, 0x00	; 0
   1caa8:	60 e2       	ldi	r22, 0x20	; 32
   1caaa:	71 ea       	ldi	r23, 0xA1	; 161
   1caac:	87 e0       	ldi	r24, 0x07	; 7
   1caae:	90 e0       	ldi	r25, 0x00	; 0
   1cab0:	0e 94 ad 26 	call	0x4d5a	; 0x4d5a <spi_init>

///@ initialize I2C bus
    printf("Initializing I2C bus\n");
   1cab4:	80 e5       	ldi	r24, 0x50	; 80
   1cab6:	98 e4       	ldi	r25, 0x48	; 72
   1cab8:	a0 e0       	ldi	r26, 0x00	; 0
   1caba:	ed b7       	in	r30, 0x3d	; 61
   1cabc:	fe b7       	in	r31, 0x3e	; 62
   1cabe:	81 83       	std	Z+1, r24	; 0x01
   1cac0:	92 83       	std	Z+2, r25	; 0x02
   1cac2:	a3 83       	std	Z+3, r26	; 0x03
   1cac4:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
	i2c_init(100000);
   1cac8:	60 ea       	ldi	r22, 0xA0	; 160
   1caca:	76 e8       	ldi	r23, 0x86	; 134
   1cacc:	81 e0       	ldi	r24, 0x01	; 1
   1cace:	90 e0       	ldi	r25, 0x00	; 0
   1cad0:	0e 94 4a 2c 	call	0x5894	; 0x5894 <i2c_init>
    sep();
   1cad4:	0e 94 3b 32 	call	0x6476	; 0x6476 <sep>

///@ initialize clock by RTC if we have it
    printf("Initializing RTC\n");
   1cad8:	8e e3       	ldi	r24, 0x3E	; 62
   1cada:	98 e4       	ldi	r25, 0x48	; 72
   1cadc:	a0 e0       	ldi	r26, 0x00	; 0
   1cade:	ed b7       	in	r30, 0x3d	; 61
   1cae0:	fe b7       	in	r31, 0x3e	; 62
   1cae2:	81 83       	std	Z+1, r24	; 0x01
   1cae4:	92 83       	std	Z+2, r25	; 0x02
   1cae6:	a3 83       	std	Z+3, r26	; 0x03
   1cae8:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    clock_clear();
   1caec:	0e 94 de 35 	call	0x6bbc	; 0x6bbc <clock_clear>
    printf("Clock cleared\n");
   1caf0:	8f e2       	ldi	r24, 0x2F	; 47
   1caf2:	98 e4       	ldi	r25, 0x48	; 72
   1caf4:	a0 e0       	ldi	r26, 0x00	; 0
   1caf6:	ed b7       	in	r30, 0x3d	; 61
   1caf8:	fe b7       	in	r31, 0x3e	; 62
   1cafa:	81 83       	std	Z+1, r24	; 0x01
   1cafc:	92 83       	std	Z+2, r25	; 0x02
   1cafe:	a3 83       	std	Z+3, r26	; 0x03
   1cb00:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    clock_getres(0, (ts_t *) &ts);
   1cb04:	be 01       	movw	r22, r28
   1cb06:	64 5f       	subi	r22, 0xF4	; 244
   1cb08:	7f 4f       	sbci	r23, 0xFF	; 255
   1cb0a:	80 e0       	ldi	r24, 0x00	; 0
   1cb0c:	90 e0       	ldi	r25, 0x00	; 0
   1cb0e:	0e 94 7e 36 	call	0x6cfc	; 0x6cfc <clock_getres>
    printf("System Task Interrupt Rate: %ld Nano Seconds\n", (long) ts.tv_nsec);
   1cb12:	88 89       	ldd	r24, Y+16	; 0x10
   1cb14:	99 89       	ldd	r25, Y+17	; 0x11
   1cb16:	aa 89       	ldd	r26, Y+18	; 0x12
   1cb18:	bb 89       	ldd	r27, Y+19	; 0x13
   1cb1a:	ed b7       	in	r30, 0x3d	; 61
   1cb1c:	fe b7       	in	r31, 0x3e	; 62
   1cb1e:	84 83       	std	Z+4, r24	; 0x04
   1cb20:	95 83       	std	Z+5, r25	; 0x05
   1cb22:	a6 83       	std	Z+6, r26	; 0x06
   1cb24:	b7 83       	std	Z+7, r27	; 0x07
   1cb26:	81 e0       	ldi	r24, 0x01	; 1
   1cb28:	98 e4       	ldi	r25, 0x48	; 72
   1cb2a:	a0 e0       	ldi	r26, 0x00	; 0
   1cb2c:	81 83       	std	Z+1, r24	; 0x01
   1cb2e:	92 83       	std	Z+2, r25	; 0x02
   1cb30:	a3 83       	std	Z+3, r26	; 0x03
   1cb32:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>

// Timezone offset we just use local time
    initialize_clock(0);
   1cb36:	80 e0       	ldi	r24, 0x00	; 0
   1cb38:	90 e0       	ldi	r25, 0x00	; 0
   1cb3a:	0e 94 59 3d 	call	0x7ab2	; 0x7ab2 <initialize_clock>
    display_clock();
   1cb3e:	0e 94 d0 3d 	call	0x7ba0	; 0x7ba0 <display_clock>
    sep();
   1cb42:	0e 94 3b 32 	call	0x6476	; 0x6476 <sep>

///@ initialize Optional I2C LCD
#ifdef LCD_SUPPORT
	lcd_setup();
   1cb46:	e8 db       	rcall	.-2096   	; 0x1c318 <lcd_setup>
#endif

///@ initialize MMC bus
    printf("MMC initializing start\n");
   1cb48:	89 ee       	ldi	r24, 0xE9	; 233
   1cb4a:	97 e4       	ldi	r25, 0x47	; 71
   1cb4c:	a0 e0       	ldi	r26, 0x00	; 0
   1cb4e:	ed b7       	in	r30, 0x3d	; 61
   1cb50:	fe b7       	in	r31, 0x3e	; 62
   1cb52:	81 83       	std	Z+1, r24	; 0x01
   1cb54:	92 83       	std	Z+2, r25	; 0x02
   1cb56:	a3 83       	std	Z+3, r26	; 0x03
   1cb58:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    if ( !mmc_init(1) )
   1cb5c:	81 e0       	ldi	r24, 0x01	; 1
   1cb5e:	90 e0       	ldi	r25, 0x00	; 0
   1cb60:	0e 94 4b 6f 	call	0xde96	; 0xde96 <mmc_init>
   1cb64:	89 2b       	or	r24, r25
   1cb66:	51 f4       	brne	.+20     	; 0x1cb7c <main+0x22e>
		printf("MMC initialized\n");
   1cb68:	88 ed       	ldi	r24, 0xD8	; 216
   1cb6a:	97 e4       	ldi	r25, 0x47	; 71
   1cb6c:	a0 e0       	ldi	r26, 0x00	; 0
   1cb6e:	ed b7       	in	r30, 0x3d	; 61
   1cb70:	fe b7       	in	r31, 0x3e	; 62
   1cb72:	81 83       	std	Z+1, r24	; 0x01
   1cb74:	92 83       	std	Z+2, r25	; 0x02
   1cb76:	a3 83       	std	Z+3, r26	; 0x03
   1cb78:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    sep();
   1cb7c:	0e 94 3b 32 	call	0x6476	; 0x6476 <sep>

///@ initialize bus state as soon as practical
    gpib_bus_init();
   1cb80:	0e 94 d8 85 	call	0x10bb0	; 0x10bb0 <gpib_bus_init>
    printf("GPIB bus initialized\n");
   1cb84:	82 ec       	ldi	r24, 0xC2	; 194
   1cb86:	97 e4       	ldi	r25, 0x47	; 71
   1cb88:	a0 e0       	ldi	r26, 0x00	; 0
   1cb8a:	ed b7       	in	r30, 0x3d	; 61
   1cb8c:	fe b7       	in	r31, 0x3e	; 62
   1cb8e:	81 83       	std	Z+1, r24	; 0x01
   1cb90:	92 83       	std	Z+2, r25	; 0x02
   1cb92:	a3 83       	std	Z+3, r26	; 0x03
   1cb94:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>

///@ initialize Printer Capture
    printer_init();
   1cb98:	0e 94 63 be 	call	0x17cc6	; 0x17cc6 <printer_init>
    printf("Printer initialized\n");
   1cb9c:	8d ea       	ldi	r24, 0xAD	; 173
   1cb9e:	97 e4       	ldi	r25, 0x47	; 71
   1cba0:	a0 e0       	ldi	r26, 0x00	; 0
   1cba2:	ed b7       	in	r30, 0x3d	; 61
   1cba4:	fe b7       	in	r31, 0x3e	; 62
   1cba6:	81 83       	std	Z+1, r24	; 0x01
   1cba8:	92 83       	std	Z+2, r25	; 0x02
   1cbaa:	a3 83       	std	Z+3, r26	; 0x03
   1cbac:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>

///@ initialize GPIB timer tasks
    printf("GPIB Timer Setup\n");
   1cbb0:	8b e9       	ldi	r24, 0x9B	; 155
   1cbb2:	97 e4       	ldi	r25, 0x47	; 71
   1cbb4:	a0 e0       	ldi	r26, 0x00	; 0
   1cbb6:	ed b7       	in	r30, 0x3d	; 61
   1cbb8:	fe b7       	in	r31, 0x3e	; 62
   1cbba:	81 83       	std	Z+1, r24	; 0x01
   1cbbc:	92 83       	std	Z+2, r25	; 0x02
   1cbbe:	a3 83       	std	Z+3, r26	; 0x03
   1cbc0:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    gpib_timer_init();
   1cbc4:	0e 94 ec 83 	call	0x107d8	; 0x107d8 <gpib_timer_init>
    printf("GPIB Timer initialized\n");
   1cbc8:	83 e8       	ldi	r24, 0x83	; 131
   1cbca:	97 e4       	ldi	r25, 0x47	; 71
   1cbcc:	a0 e0       	ldi	r26, 0x00	; 0
   1cbce:	ed b7       	in	r30, 0x3d	; 61
   1cbd0:	fe b7       	in	r31, 0x3e	; 62
   1cbd2:	81 83       	std	Z+1, r24	; 0x01
   1cbd4:	92 83       	std	Z+2, r25	; 0x02
   1cbd6:	a3 83       	std	Z+3, r26	; 0x03
   1cbd8:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>

///@brief Process hp85disk emulator config file
    gpib_file_init();
   1cbdc:	0e 94 50 8c 	call	0x118a0	; 0x118a0 <gpib_file_init>
    printf("GPIB File init done\n");
   1cbe0:	8e e6       	ldi	r24, 0x6E	; 110
   1cbe2:	97 e4       	ldi	r25, 0x47	; 71
   1cbe4:	a0 e0       	ldi	r26, 0x00	; 0
   1cbe6:	ed b7       	in	r30, 0x3d	; 61
   1cbe8:	fe b7       	in	r31, 0x3e	; 62
   1cbea:	81 83       	std	Z+1, r24	; 0x01
   1cbec:	92 83       	std	Z+2, r25	; 0x02
   1cbee:	a3 83       	std	Z+3, r26	; 0x03
   1cbf0:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>

///@brief GPIB talking/listening state variables
///Must be done AFTER gpib_file_init() so we have a valid configuration
    gpib_state_init();
   1cbf4:	0e 94 40 86 	call	0x10c80	; 0x10c80 <gpib_state_init>
    printf("GPIB State init done\n");
   1cbf8:	88 e5       	ldi	r24, 0x58	; 88
   1cbfa:	97 e4       	ldi	r25, 0x47	; 71
   1cbfc:	a0 e0       	ldi	r26, 0x00	; 0
   1cbfe:	ed b7       	in	r30, 0x3d	; 61
   1cc00:	fe b7       	in	r31, 0x3e	; 62
   1cc02:	81 83       	std	Z+1, r24	; 0x01
   1cc04:	92 83       	std	Z+2, r25	; 0x02
   1cc06:	a3 83       	std	Z+3, r26	; 0x03
   1cc08:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    sep();
   1cc0c:	0e 94 3b 32 	call	0x6476	; 0x6476 <sep>

///@brief Display Address Summary
    display_Addresses(0);
   1cc10:	80 e0       	ldi	r24, 0x00	; 0
   1cc12:	90 e0       	ldi	r25, 0x00	; 0
   1cc14:	0e 94 f8 93 	call	0x127f0	; 0x127f0 <display_Addresses>
    sep();
   1cc18:	0e 94 3b 32 	call	0x6476	; 0x6476 <sep>

///@brief Display debug level
    printf("debuglevel   = %04xH\n",(int)debuglevel);
   1cc1c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1cc20:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1cc24:	ed b7       	in	r30, 0x3d	; 61
   1cc26:	fe b7       	in	r31, 0x3e	; 62
   1cc28:	95 83       	std	Z+5, r25	; 0x05
   1cc2a:	84 83       	std	Z+4, r24	; 0x04
   1cc2c:	82 e4       	ldi	r24, 0x42	; 66
   1cc2e:	97 e4       	ldi	r25, 0x47	; 71
   1cc30:	a0 e0       	ldi	r26, 0x00	; 0
   1cc32:	81 83       	std	Z+1, r24	; 0x01
   1cc34:	92 83       	std	Z+2, r25	; 0x02
   1cc36:	a3 83       	std	Z+3, r26	; 0x03
   1cc38:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
    sep();
   1cc3c:	0e 94 3b 32 	call	0x6476	; 0x6476 <sep>

///@brief Format any drives that do not yet exist
    format_drives();
   1cc40:	0e 94 06 9b 	call	0x1360c	; 0x1360c <format_drives>

#ifdef LCD_SUPPORT
	update_drive_counts();
   1cc44:	4c de       	rcall	.-872    	; 0x1c8de <update_drive_counts>
	sprintf((char *) _line2, "%-16s", "(C)Mike Gore");
   1cc46:	8b e0       	ldi	r24, 0x0B	; 11
   1cc48:	97 e1       	ldi	r25, 0x17	; 23
   1cc4a:	ed b7       	in	r30, 0x3d	; 61
   1cc4c:	fe b7       	in	r31, 0x3e	; 62
   1cc4e:	97 83       	std	Z+7, r25	; 0x07
   1cc50:	86 83       	std	Z+6, r24	; 0x06
   1cc52:	8c e3       	ldi	r24, 0x3C	; 60
   1cc54:	97 e4       	ldi	r25, 0x47	; 71
   1cc56:	a0 e0       	ldi	r26, 0x00	; 0
   1cc58:	83 83       	std	Z+3, r24	; 0x03
   1cc5a:	94 83       	std	Z+4, r25	; 0x04
   1cc5c:	a5 83       	std	Z+5, r26	; 0x05
   1cc5e:	85 ef       	ldi	r24, 0xF5	; 245
   1cc60:	92 e0       	ldi	r25, 0x02	; 2
   1cc62:	92 83       	std	Z+2, r25	; 0x02
   1cc64:	81 83       	std	Z+1, r24	; 0x01
   1cc66:	0e 94 18 47 	call	0x8e30	; 0x8e30 <sprintf_P>

	i2c_task_run();
   1cc6a:	0e 94 e0 2c 	call	0x59c0	; 0x59c0 <i2c_task_run>
	delayms(1000);
   1cc6e:	68 ee       	ldi	r22, 0xE8	; 232
   1cc70:	73 e0       	ldi	r23, 0x03	; 3
   1cc72:	80 e0       	ldi	r24, 0x00	; 0
   1cc74:	90 e0       	ldi	r25, 0x00	; 0
   1cc76:	0e 94 86 28 	call	0x510c	; 0x510c <delayms>
    if(!i2c_task.done || i2c_task.error )
   1cc7a:	80 91 78 17 	lds	r24, 0x1778	; 0x801778 <i2c_task+0x2>
   1cc7e:	88 23       	and	r24, r24
   1cc80:	21 f0       	breq	.+8      	; 0x1cc8a <main+0x33c>
   1cc82:	80 91 79 17 	lds	r24, 0x1779	; 0x801779 <i2c_task+0x3>
   1cc86:	88 23       	and	r24, r24
   1cc88:	61 f0       	breq	.+24     	; 0x1cca2 <main+0x354>
	{
		i2c_display_task_errors();
   1cc8a:	0e 94 47 2f 	call	0x5e8e	; 0x5e8e <i2c_display_task_errors>
		printf("I2C LCD is NOT attached!\n");
   1cc8e:	82 e2       	ldi	r24, 0x22	; 34
   1cc90:	97 e4       	ldi	r25, 0x47	; 71
   1cc92:	a0 e0       	ldi	r26, 0x00	; 0
   1cc94:	ed b7       	in	r30, 0x3d	; 61
   1cc96:	fe b7       	in	r31, 0x3e	; 62
   1cc98:	81 83       	std	Z+1, r24	; 0x01
   1cc9a:	92 83       	std	Z+2, r25	; 0x02
   1cc9c:	a3 83       	std	Z+3, r26	; 0x03
   1cc9e:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
	}
#endif

///@brief Start main GPIB state machine
    printf("Starting GPIB TASK\n");
   1cca2:	8e e0       	ldi	r24, 0x0E	; 14
   1cca4:	97 e4       	ldi	r25, 0x47	; 71
   1cca6:	a0 e0       	ldi	r26, 0x00	; 0
   1cca8:	ed b7       	in	r30, 0x3d	; 61
   1ccaa:	fe b7       	in	r31, 0x3e	; 62
   1ccac:	81 83       	std	Z+1, r24	; 0x01
   1ccae:	92 83       	std	Z+2, r25	; 0x02
   1ccb0:	a3 83       	std	Z+3, r26	; 0x03
   1ccb2:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <printf_P>
///@brief Keep the task running 
/// task does not exit unless a keypress occurs
/// When it restarts ALL GPIB states are reset 
    while ( 1)
    {
        user_task(1);
   1ccb6:	81 e0       	ldi	r24, 0x01	; 1
   1ccb8:	08 de       	rcall	.-1008   	; 0x1c8ca <user_task>
   1ccba:	fd cf       	rjmp	.-6      	; 0x1ccb6 <main+0x368>

0001ccbc <__mulsi3>:
   1ccbc:	db 01       	movw	r26, r22
   1ccbe:	8f 93       	push	r24
   1ccc0:	9f 93       	push	r25
   1ccc2:	8b d0       	rcall	.+278    	; 0x1cdda <__muluhisi3>
   1ccc4:	bf 91       	pop	r27
   1ccc6:	af 91       	pop	r26
   1ccc8:	a2 9f       	mul	r26, r18
   1ccca:	80 0d       	add	r24, r0
   1cccc:	91 1d       	adc	r25, r1
   1ccce:	a3 9f       	mul	r26, r19
   1ccd0:	90 0d       	add	r25, r0
   1ccd2:	b2 9f       	mul	r27, r18
   1ccd4:	90 0d       	add	r25, r0
   1ccd6:	11 24       	eor	r1, r1
   1ccd8:	08 95       	ret

0001ccda <__udivmodqi4>:
   1ccda:	99 1b       	sub	r25, r25
   1ccdc:	79 e0       	ldi	r23, 0x09	; 9
   1ccde:	04 c0       	rjmp	.+8      	; 0x1cce8 <__udivmodqi4_ep>

0001cce0 <__udivmodqi4_loop>:
   1cce0:	99 1f       	adc	r25, r25
   1cce2:	96 17       	cp	r25, r22
   1cce4:	08 f0       	brcs	.+2      	; 0x1cce8 <__udivmodqi4_ep>
   1cce6:	96 1b       	sub	r25, r22

0001cce8 <__udivmodqi4_ep>:
   1cce8:	88 1f       	adc	r24, r24
   1ccea:	7a 95       	dec	r23
   1ccec:	c9 f7       	brne	.-14     	; 0x1cce0 <__udivmodqi4_loop>
   1ccee:	80 95       	com	r24
   1ccf0:	08 95       	ret

0001ccf2 <__udivmodhi4>:
   1ccf2:	aa 1b       	sub	r26, r26
   1ccf4:	bb 1b       	sub	r27, r27
   1ccf6:	51 e1       	ldi	r21, 0x11	; 17
   1ccf8:	07 c0       	rjmp	.+14     	; 0x1cd08 <__udivmodhi4_ep>

0001ccfa <__udivmodhi4_loop>:
   1ccfa:	aa 1f       	adc	r26, r26
   1ccfc:	bb 1f       	adc	r27, r27
   1ccfe:	a6 17       	cp	r26, r22
   1cd00:	b7 07       	cpc	r27, r23
   1cd02:	10 f0       	brcs	.+4      	; 0x1cd08 <__udivmodhi4_ep>
   1cd04:	a6 1b       	sub	r26, r22
   1cd06:	b7 0b       	sbc	r27, r23

0001cd08 <__udivmodhi4_ep>:
   1cd08:	88 1f       	adc	r24, r24
   1cd0a:	99 1f       	adc	r25, r25
   1cd0c:	5a 95       	dec	r21
   1cd0e:	a9 f7       	brne	.-22     	; 0x1ccfa <__udivmodhi4_loop>
   1cd10:	80 95       	com	r24
   1cd12:	90 95       	com	r25
   1cd14:	bc 01       	movw	r22, r24
   1cd16:	cd 01       	movw	r24, r26
   1cd18:	08 95       	ret

0001cd1a <__divmodhi4>:
   1cd1a:	97 fb       	bst	r25, 7
   1cd1c:	07 2e       	mov	r0, r23
   1cd1e:	16 f4       	brtc	.+4      	; 0x1cd24 <__divmodhi4+0xa>
   1cd20:	00 94       	com	r0
   1cd22:	06 d0       	rcall	.+12     	; 0x1cd30 <__divmodhi4_neg1>
   1cd24:	77 fd       	sbrc	r23, 7
   1cd26:	08 d0       	rcall	.+16     	; 0x1cd38 <__divmodhi4_neg2>
   1cd28:	e4 df       	rcall	.-56     	; 0x1ccf2 <__udivmodhi4>
   1cd2a:	07 fc       	sbrc	r0, 7
   1cd2c:	05 d0       	rcall	.+10     	; 0x1cd38 <__divmodhi4_neg2>
   1cd2e:	3e f4       	brtc	.+14     	; 0x1cd3e <__divmodhi4_exit>

0001cd30 <__divmodhi4_neg1>:
   1cd30:	90 95       	com	r25
   1cd32:	81 95       	neg	r24
   1cd34:	9f 4f       	sbci	r25, 0xFF	; 255
   1cd36:	08 95       	ret

0001cd38 <__divmodhi4_neg2>:
   1cd38:	70 95       	com	r23
   1cd3a:	61 95       	neg	r22
   1cd3c:	7f 4f       	sbci	r23, 0xFF	; 255

0001cd3e <__divmodhi4_exit>:
   1cd3e:	08 95       	ret

0001cd40 <__udivmodsi4>:
   1cd40:	a1 e2       	ldi	r26, 0x21	; 33
   1cd42:	1a 2e       	mov	r1, r26
   1cd44:	aa 1b       	sub	r26, r26
   1cd46:	bb 1b       	sub	r27, r27
   1cd48:	fd 01       	movw	r30, r26
   1cd4a:	0d c0       	rjmp	.+26     	; 0x1cd66 <__udivmodsi4_ep>

0001cd4c <__udivmodsi4_loop>:
   1cd4c:	aa 1f       	adc	r26, r26
   1cd4e:	bb 1f       	adc	r27, r27
   1cd50:	ee 1f       	adc	r30, r30
   1cd52:	ff 1f       	adc	r31, r31
   1cd54:	a2 17       	cp	r26, r18
   1cd56:	b3 07       	cpc	r27, r19
   1cd58:	e4 07       	cpc	r30, r20
   1cd5a:	f5 07       	cpc	r31, r21
   1cd5c:	20 f0       	brcs	.+8      	; 0x1cd66 <__udivmodsi4_ep>
   1cd5e:	a2 1b       	sub	r26, r18
   1cd60:	b3 0b       	sbc	r27, r19
   1cd62:	e4 0b       	sbc	r30, r20
   1cd64:	f5 0b       	sbc	r31, r21

0001cd66 <__udivmodsi4_ep>:
   1cd66:	66 1f       	adc	r22, r22
   1cd68:	77 1f       	adc	r23, r23
   1cd6a:	88 1f       	adc	r24, r24
   1cd6c:	99 1f       	adc	r25, r25
   1cd6e:	1a 94       	dec	r1
   1cd70:	69 f7       	brne	.-38     	; 0x1cd4c <__udivmodsi4_loop>
   1cd72:	60 95       	com	r22
   1cd74:	70 95       	com	r23
   1cd76:	80 95       	com	r24
   1cd78:	90 95       	com	r25
   1cd7a:	9b 01       	movw	r18, r22
   1cd7c:	ac 01       	movw	r20, r24
   1cd7e:	bd 01       	movw	r22, r26
   1cd80:	cf 01       	movw	r24, r30
   1cd82:	08 95       	ret

0001cd84 <__divmodsi4>:
   1cd84:	05 2e       	mov	r0, r21
   1cd86:	97 fb       	bst	r25, 7
   1cd88:	16 f4       	brtc	.+4      	; 0x1cd8e <__divmodsi4+0xa>
   1cd8a:	00 94       	com	r0
   1cd8c:	0f d0       	rcall	.+30     	; 0x1cdac <__negsi2>
   1cd8e:	57 fd       	sbrc	r21, 7
   1cd90:	05 d0       	rcall	.+10     	; 0x1cd9c <__divmodsi4_neg2>
   1cd92:	d6 df       	rcall	.-84     	; 0x1cd40 <__udivmodsi4>
   1cd94:	07 fc       	sbrc	r0, 7
   1cd96:	02 d0       	rcall	.+4      	; 0x1cd9c <__divmodsi4_neg2>
   1cd98:	46 f4       	brtc	.+16     	; 0x1cdaa <__divmodsi4_exit>
   1cd9a:	08 c0       	rjmp	.+16     	; 0x1cdac <__negsi2>

0001cd9c <__divmodsi4_neg2>:
   1cd9c:	50 95       	com	r21
   1cd9e:	40 95       	com	r20
   1cda0:	30 95       	com	r19
   1cda2:	21 95       	neg	r18
   1cda4:	3f 4f       	sbci	r19, 0xFF	; 255
   1cda6:	4f 4f       	sbci	r20, 0xFF	; 255
   1cda8:	5f 4f       	sbci	r21, 0xFF	; 255

0001cdaa <__divmodsi4_exit>:
   1cdaa:	08 95       	ret

0001cdac <__negsi2>:
   1cdac:	90 95       	com	r25
   1cdae:	80 95       	com	r24
   1cdb0:	70 95       	com	r23
   1cdb2:	61 95       	neg	r22
   1cdb4:	7f 4f       	sbci	r23, 0xFF	; 255
   1cdb6:	8f 4f       	sbci	r24, 0xFF	; 255
   1cdb8:	9f 4f       	sbci	r25, 0xFF	; 255
   1cdba:	08 95       	ret

0001cdbc <__tablejump2__>:
   1cdbc:	ee 0f       	add	r30, r30
   1cdbe:	ff 1f       	adc	r31, r31
   1cdc0:	00 24       	eor	r0, r0
   1cdc2:	00 1c       	adc	r0, r0
   1cdc4:	0b be       	out	0x3b, r0	; 59
   1cdc6:	07 90       	elpm	r0, Z+
   1cdc8:	f6 91       	elpm	r31, Z
   1cdca:	e0 2d       	mov	r30, r0
   1cdcc:	09 94       	ijmp

0001cdce <__usmulhisi3>:
   1cdce:	6f d0       	rcall	.+222    	; 0x1ceae <__umulhisi3>

0001cdd0 <__usmulhisi3_tail>:
   1cdd0:	b7 ff       	sbrs	r27, 7
   1cdd2:	08 95       	ret
   1cdd4:	82 1b       	sub	r24, r18
   1cdd6:	93 0b       	sbc	r25, r19
   1cdd8:	08 95       	ret

0001cdda <__muluhisi3>:
   1cdda:	69 d0       	rcall	.+210    	; 0x1ceae <__umulhisi3>
   1cddc:	a5 9f       	mul	r26, r21
   1cdde:	90 0d       	add	r25, r0
   1cde0:	b4 9f       	mul	r27, r20
   1cde2:	90 0d       	add	r25, r0
   1cde4:	a4 9f       	mul	r26, r20
   1cde6:	80 0d       	add	r24, r0
   1cde8:	91 1d       	adc	r25, r1
   1cdea:	11 24       	eor	r1, r1
   1cdec:	08 95       	ret

0001cdee <__mulshisi3>:
   1cdee:	b7 ff       	sbrs	r27, 7
   1cdf0:	f4 cf       	rjmp	.-24     	; 0x1cdda <__muluhisi3>

0001cdf2 <__mulohisi3>:
   1cdf2:	f3 df       	rcall	.-26     	; 0x1cdda <__muluhisi3>
   1cdf4:	82 1b       	sub	r24, r18
   1cdf6:	93 0b       	sbc	r25, r19
   1cdf8:	08 95       	ret

0001cdfa <__negdi2>:
   1cdfa:	60 95       	com	r22
   1cdfc:	70 95       	com	r23
   1cdfe:	80 95       	com	r24
   1ce00:	90 95       	com	r25
   1ce02:	30 95       	com	r19
   1ce04:	40 95       	com	r20
   1ce06:	50 95       	com	r21
   1ce08:	21 95       	neg	r18
   1ce0a:	3f 4f       	sbci	r19, 0xFF	; 255
   1ce0c:	4f 4f       	sbci	r20, 0xFF	; 255
   1ce0e:	5f 4f       	sbci	r21, 0xFF	; 255
   1ce10:	6f 4f       	sbci	r22, 0xFF	; 255
   1ce12:	7f 4f       	sbci	r23, 0xFF	; 255
   1ce14:	8f 4f       	sbci	r24, 0xFF	; 255
   1ce16:	9f 4f       	sbci	r25, 0xFF	; 255
   1ce18:	08 95       	ret

0001ce1a <__prologue_saves__>:
   1ce1a:	2f 92       	push	r2
   1ce1c:	3f 92       	push	r3
   1ce1e:	4f 92       	push	r4
   1ce20:	5f 92       	push	r5
   1ce22:	6f 92       	push	r6
   1ce24:	7f 92       	push	r7
   1ce26:	8f 92       	push	r8
   1ce28:	9f 92       	push	r9
   1ce2a:	af 92       	push	r10
   1ce2c:	bf 92       	push	r11
   1ce2e:	cf 92       	push	r12
   1ce30:	df 92       	push	r13
   1ce32:	ef 92       	push	r14
   1ce34:	ff 92       	push	r15
   1ce36:	0f 93       	push	r16
   1ce38:	1f 93       	push	r17
   1ce3a:	cf 93       	push	r28
   1ce3c:	df 93       	push	r29
   1ce3e:	cd b7       	in	r28, 0x3d	; 61
   1ce40:	de b7       	in	r29, 0x3e	; 62
   1ce42:	ca 1b       	sub	r28, r26
   1ce44:	db 0b       	sbc	r29, r27
   1ce46:	0f b6       	in	r0, 0x3f	; 63
   1ce48:	f8 94       	cli
   1ce4a:	de bf       	out	0x3e, r29	; 62
   1ce4c:	0f be       	out	0x3f, r0	; 63
   1ce4e:	cd bf       	out	0x3d, r28	; 61
   1ce50:	09 94       	ijmp

0001ce52 <__epilogue_restores__>:
   1ce52:	2a 88       	ldd	r2, Y+18	; 0x12
   1ce54:	39 88       	ldd	r3, Y+17	; 0x11
   1ce56:	48 88       	ldd	r4, Y+16	; 0x10
   1ce58:	5f 84       	ldd	r5, Y+15	; 0x0f
   1ce5a:	6e 84       	ldd	r6, Y+14	; 0x0e
   1ce5c:	7d 84       	ldd	r7, Y+13	; 0x0d
   1ce5e:	8c 84       	ldd	r8, Y+12	; 0x0c
   1ce60:	9b 84       	ldd	r9, Y+11	; 0x0b
   1ce62:	aa 84       	ldd	r10, Y+10	; 0x0a
   1ce64:	b9 84       	ldd	r11, Y+9	; 0x09
   1ce66:	c8 84       	ldd	r12, Y+8	; 0x08
   1ce68:	df 80       	ldd	r13, Y+7	; 0x07
   1ce6a:	ee 80       	ldd	r14, Y+6	; 0x06
   1ce6c:	fd 80       	ldd	r15, Y+5	; 0x05
   1ce6e:	0c 81       	ldd	r16, Y+4	; 0x04
   1ce70:	1b 81       	ldd	r17, Y+3	; 0x03
   1ce72:	aa 81       	ldd	r26, Y+2	; 0x02
   1ce74:	b9 81       	ldd	r27, Y+1	; 0x01
   1ce76:	ce 0f       	add	r28, r30
   1ce78:	d1 1d       	adc	r29, r1
   1ce7a:	0f b6       	in	r0, 0x3f	; 63
   1ce7c:	f8 94       	cli
   1ce7e:	de bf       	out	0x3e, r29	; 62
   1ce80:	0f be       	out	0x3f, r0	; 63
   1ce82:	cd bf       	out	0x3d, r28	; 61
   1ce84:	ed 01       	movw	r28, r26
   1ce86:	08 95       	ret

0001ce88 <__xload_1>:
   1ce88:	57 fd       	sbrc	r21, 7
   1ce8a:	03 c0       	rjmp	.+6      	; 0x1ce92 <__xload_1+0xa>
   1ce8c:	5b bf       	out	0x3b, r21	; 59
   1ce8e:	67 91       	elpm	r22, Z+
   1ce90:	08 95       	ret
   1ce92:	60 81       	ld	r22, Z
   1ce94:	08 95       	ret

0001ce96 <__cmpdi2_s8>:
   1ce96:	00 24       	eor	r0, r0
   1ce98:	a7 fd       	sbrc	r26, 7
   1ce9a:	00 94       	com	r0
   1ce9c:	2a 17       	cp	r18, r26
   1ce9e:	30 05       	cpc	r19, r0
   1cea0:	40 05       	cpc	r20, r0
   1cea2:	50 05       	cpc	r21, r0
   1cea4:	60 05       	cpc	r22, r0
   1cea6:	70 05       	cpc	r23, r0
   1cea8:	80 05       	cpc	r24, r0
   1ceaa:	90 05       	cpc	r25, r0
   1ceac:	08 95       	ret

0001ceae <__umulhisi3>:
   1ceae:	a2 9f       	mul	r26, r18
   1ceb0:	b0 01       	movw	r22, r0
   1ceb2:	b3 9f       	mul	r27, r19
   1ceb4:	c0 01       	movw	r24, r0
   1ceb6:	a3 9f       	mul	r26, r19
   1ceb8:	70 0d       	add	r23, r0
   1ceba:	81 1d       	adc	r24, r1
   1cebc:	11 24       	eor	r1, r1
   1cebe:	91 1d       	adc	r25, r1
   1cec0:	b2 9f       	mul	r27, r18
   1cec2:	70 0d       	add	r23, r0
   1cec4:	81 1d       	adc	r24, r1
   1cec6:	11 24       	eor	r1, r1
   1cec8:	91 1d       	adc	r25, r1
   1ceca:	08 95       	ret

0001cecc <__subsf3>:
   1cecc:	50 58       	subi	r21, 0x80	; 128

0001cece <__addsf3>:
   1cece:	bb 27       	eor	r27, r27
   1ced0:	aa 27       	eor	r26, r26
   1ced2:	0e d0       	rcall	.+28     	; 0x1cef0 <__addsf3x>
   1ced4:	75 c1       	rjmp	.+746    	; 0x1d1c0 <__fp_round>
   1ced6:	66 d1       	rcall	.+716    	; 0x1d1a4 <__fp_pscA>
   1ced8:	30 f0       	brcs	.+12     	; 0x1cee6 <__addsf3+0x18>
   1ceda:	6b d1       	rcall	.+726    	; 0x1d1b2 <__fp_pscB>
   1cedc:	20 f0       	brcs	.+8      	; 0x1cee6 <__addsf3+0x18>
   1cede:	31 f4       	brne	.+12     	; 0x1ceec <__addsf3+0x1e>
   1cee0:	9f 3f       	cpi	r25, 0xFF	; 255
   1cee2:	11 f4       	brne	.+4      	; 0x1cee8 <__addsf3+0x1a>
   1cee4:	1e f4       	brtc	.+6      	; 0x1ceec <__addsf3+0x1e>
   1cee6:	5b c1       	rjmp	.+694    	; 0x1d19e <__fp_nan>
   1cee8:	0e f4       	brtc	.+2      	; 0x1ceec <__addsf3+0x1e>
   1ceea:	e0 95       	com	r30
   1ceec:	e7 fb       	bst	r30, 7
   1ceee:	51 c1       	rjmp	.+674    	; 0x1d192 <__fp_inf>

0001cef0 <__addsf3x>:
   1cef0:	e9 2f       	mov	r30, r25
   1cef2:	77 d1       	rcall	.+750    	; 0x1d1e2 <__fp_split3>
   1cef4:	80 f3       	brcs	.-32     	; 0x1ced6 <__addsf3+0x8>
   1cef6:	ba 17       	cp	r27, r26
   1cef8:	62 07       	cpc	r22, r18
   1cefa:	73 07       	cpc	r23, r19
   1cefc:	84 07       	cpc	r24, r20
   1cefe:	95 07       	cpc	r25, r21
   1cf00:	18 f0       	brcs	.+6      	; 0x1cf08 <__addsf3x+0x18>
   1cf02:	71 f4       	brne	.+28     	; 0x1cf20 <__addsf3x+0x30>
   1cf04:	9e f5       	brtc	.+102    	; 0x1cf6c <__addsf3x+0x7c>
   1cf06:	8f c1       	rjmp	.+798    	; 0x1d226 <__fp_zero>
   1cf08:	0e f4       	brtc	.+2      	; 0x1cf0c <__addsf3x+0x1c>
   1cf0a:	e0 95       	com	r30
   1cf0c:	0b 2e       	mov	r0, r27
   1cf0e:	ba 2f       	mov	r27, r26
   1cf10:	a0 2d       	mov	r26, r0
   1cf12:	0b 01       	movw	r0, r22
   1cf14:	b9 01       	movw	r22, r18
   1cf16:	90 01       	movw	r18, r0
   1cf18:	0c 01       	movw	r0, r24
   1cf1a:	ca 01       	movw	r24, r20
   1cf1c:	a0 01       	movw	r20, r0
   1cf1e:	11 24       	eor	r1, r1
   1cf20:	ff 27       	eor	r31, r31
   1cf22:	59 1b       	sub	r21, r25
   1cf24:	99 f0       	breq	.+38     	; 0x1cf4c <__addsf3x+0x5c>
   1cf26:	59 3f       	cpi	r21, 0xF9	; 249
   1cf28:	50 f4       	brcc	.+20     	; 0x1cf3e <__addsf3x+0x4e>
   1cf2a:	50 3e       	cpi	r21, 0xE0	; 224
   1cf2c:	68 f1       	brcs	.+90     	; 0x1cf88 <__addsf3x+0x98>
   1cf2e:	1a 16       	cp	r1, r26
   1cf30:	f0 40       	sbci	r31, 0x00	; 0
   1cf32:	a2 2f       	mov	r26, r18
   1cf34:	23 2f       	mov	r18, r19
   1cf36:	34 2f       	mov	r19, r20
   1cf38:	44 27       	eor	r20, r20
   1cf3a:	58 5f       	subi	r21, 0xF8	; 248
   1cf3c:	f3 cf       	rjmp	.-26     	; 0x1cf24 <__addsf3x+0x34>
   1cf3e:	46 95       	lsr	r20
   1cf40:	37 95       	ror	r19
   1cf42:	27 95       	ror	r18
   1cf44:	a7 95       	ror	r26
   1cf46:	f0 40       	sbci	r31, 0x00	; 0
   1cf48:	53 95       	inc	r21
   1cf4a:	c9 f7       	brne	.-14     	; 0x1cf3e <__addsf3x+0x4e>
   1cf4c:	7e f4       	brtc	.+30     	; 0x1cf6c <__addsf3x+0x7c>
   1cf4e:	1f 16       	cp	r1, r31
   1cf50:	ba 0b       	sbc	r27, r26
   1cf52:	62 0b       	sbc	r22, r18
   1cf54:	73 0b       	sbc	r23, r19
   1cf56:	84 0b       	sbc	r24, r20
   1cf58:	ba f0       	brmi	.+46     	; 0x1cf88 <__addsf3x+0x98>
   1cf5a:	91 50       	subi	r25, 0x01	; 1
   1cf5c:	a1 f0       	breq	.+40     	; 0x1cf86 <__addsf3x+0x96>
   1cf5e:	ff 0f       	add	r31, r31
   1cf60:	bb 1f       	adc	r27, r27
   1cf62:	66 1f       	adc	r22, r22
   1cf64:	77 1f       	adc	r23, r23
   1cf66:	88 1f       	adc	r24, r24
   1cf68:	c2 f7       	brpl	.-16     	; 0x1cf5a <__addsf3x+0x6a>
   1cf6a:	0e c0       	rjmp	.+28     	; 0x1cf88 <__addsf3x+0x98>
   1cf6c:	ba 0f       	add	r27, r26
   1cf6e:	62 1f       	adc	r22, r18
   1cf70:	73 1f       	adc	r23, r19
   1cf72:	84 1f       	adc	r24, r20
   1cf74:	48 f4       	brcc	.+18     	; 0x1cf88 <__addsf3x+0x98>
   1cf76:	87 95       	ror	r24
   1cf78:	77 95       	ror	r23
   1cf7a:	67 95       	ror	r22
   1cf7c:	b7 95       	ror	r27
   1cf7e:	f7 95       	ror	r31
   1cf80:	9e 3f       	cpi	r25, 0xFE	; 254
   1cf82:	08 f0       	brcs	.+2      	; 0x1cf86 <__addsf3x+0x96>
   1cf84:	b3 cf       	rjmp	.-154    	; 0x1ceec <__addsf3+0x1e>
   1cf86:	93 95       	inc	r25
   1cf88:	88 0f       	add	r24, r24
   1cf8a:	08 f0       	brcs	.+2      	; 0x1cf8e <__addsf3x+0x9e>
   1cf8c:	99 27       	eor	r25, r25
   1cf8e:	ee 0f       	add	r30, r30
   1cf90:	97 95       	ror	r25
   1cf92:	87 95       	ror	r24
   1cf94:	08 95       	ret

0001cf96 <__cmpsf2>:
   1cf96:	d9 d0       	rcall	.+434    	; 0x1d14a <__fp_cmp>
   1cf98:	08 f4       	brcc	.+2      	; 0x1cf9c <__cmpsf2+0x6>
   1cf9a:	81 e0       	ldi	r24, 0x01	; 1
   1cf9c:	08 95       	ret

0001cf9e <__divsf3>:
   1cf9e:	0c d0       	rcall	.+24     	; 0x1cfb8 <__divsf3x>
   1cfa0:	0f c1       	rjmp	.+542    	; 0x1d1c0 <__fp_round>
   1cfa2:	07 d1       	rcall	.+526    	; 0x1d1b2 <__fp_pscB>
   1cfa4:	40 f0       	brcs	.+16     	; 0x1cfb6 <__divsf3+0x18>
   1cfa6:	fe d0       	rcall	.+508    	; 0x1d1a4 <__fp_pscA>
   1cfa8:	30 f0       	brcs	.+12     	; 0x1cfb6 <__divsf3+0x18>
   1cfaa:	21 f4       	brne	.+8      	; 0x1cfb4 <__divsf3+0x16>
   1cfac:	5f 3f       	cpi	r21, 0xFF	; 255
   1cfae:	19 f0       	breq	.+6      	; 0x1cfb6 <__divsf3+0x18>
   1cfb0:	f0 c0       	rjmp	.+480    	; 0x1d192 <__fp_inf>
   1cfb2:	51 11       	cpse	r21, r1
   1cfb4:	39 c1       	rjmp	.+626    	; 0x1d228 <__fp_szero>
   1cfb6:	f3 c0       	rjmp	.+486    	; 0x1d19e <__fp_nan>

0001cfb8 <__divsf3x>:
   1cfb8:	14 d1       	rcall	.+552    	; 0x1d1e2 <__fp_split3>
   1cfba:	98 f3       	brcs	.-26     	; 0x1cfa2 <__divsf3+0x4>

0001cfbc <__divsf3_pse>:
   1cfbc:	99 23       	and	r25, r25
   1cfbe:	c9 f3       	breq	.-14     	; 0x1cfb2 <__divsf3+0x14>
   1cfc0:	55 23       	and	r21, r21
   1cfc2:	b1 f3       	breq	.-20     	; 0x1cfb0 <__divsf3+0x12>
   1cfc4:	95 1b       	sub	r25, r21
   1cfc6:	55 0b       	sbc	r21, r21
   1cfc8:	bb 27       	eor	r27, r27
   1cfca:	aa 27       	eor	r26, r26
   1cfcc:	62 17       	cp	r22, r18
   1cfce:	73 07       	cpc	r23, r19
   1cfd0:	84 07       	cpc	r24, r20
   1cfd2:	38 f0       	brcs	.+14     	; 0x1cfe2 <__divsf3_pse+0x26>
   1cfd4:	9f 5f       	subi	r25, 0xFF	; 255
   1cfd6:	5f 4f       	sbci	r21, 0xFF	; 255
   1cfd8:	22 0f       	add	r18, r18
   1cfda:	33 1f       	adc	r19, r19
   1cfdc:	44 1f       	adc	r20, r20
   1cfde:	aa 1f       	adc	r26, r26
   1cfe0:	a9 f3       	breq	.-22     	; 0x1cfcc <__divsf3_pse+0x10>
   1cfe2:	33 d0       	rcall	.+102    	; 0x1d04a <__divsf3_pse+0x8e>
   1cfe4:	0e 2e       	mov	r0, r30
   1cfe6:	3a f0       	brmi	.+14     	; 0x1cff6 <__divsf3_pse+0x3a>
   1cfe8:	e0 e8       	ldi	r30, 0x80	; 128
   1cfea:	30 d0       	rcall	.+96     	; 0x1d04c <__divsf3_pse+0x90>
   1cfec:	91 50       	subi	r25, 0x01	; 1
   1cfee:	50 40       	sbci	r21, 0x00	; 0
   1cff0:	e6 95       	lsr	r30
   1cff2:	00 1c       	adc	r0, r0
   1cff4:	ca f7       	brpl	.-14     	; 0x1cfe8 <__divsf3_pse+0x2c>
   1cff6:	29 d0       	rcall	.+82     	; 0x1d04a <__divsf3_pse+0x8e>
   1cff8:	fe 2f       	mov	r31, r30
   1cffa:	27 d0       	rcall	.+78     	; 0x1d04a <__divsf3_pse+0x8e>
   1cffc:	66 0f       	add	r22, r22
   1cffe:	77 1f       	adc	r23, r23
   1d000:	88 1f       	adc	r24, r24
   1d002:	bb 1f       	adc	r27, r27
   1d004:	26 17       	cp	r18, r22
   1d006:	37 07       	cpc	r19, r23
   1d008:	48 07       	cpc	r20, r24
   1d00a:	ab 07       	cpc	r26, r27
   1d00c:	b0 e8       	ldi	r27, 0x80	; 128
   1d00e:	09 f0       	breq	.+2      	; 0x1d012 <__divsf3_pse+0x56>
   1d010:	bb 0b       	sbc	r27, r27
   1d012:	80 2d       	mov	r24, r0
   1d014:	bf 01       	movw	r22, r30
   1d016:	ff 27       	eor	r31, r31
   1d018:	93 58       	subi	r25, 0x83	; 131
   1d01a:	5f 4f       	sbci	r21, 0xFF	; 255
   1d01c:	2a f0       	brmi	.+10     	; 0x1d028 <__divsf3_pse+0x6c>
   1d01e:	9e 3f       	cpi	r25, 0xFE	; 254
   1d020:	51 05       	cpc	r21, r1
   1d022:	68 f0       	brcs	.+26     	; 0x1d03e <__divsf3_pse+0x82>
   1d024:	b6 c0       	rjmp	.+364    	; 0x1d192 <__fp_inf>
   1d026:	00 c1       	rjmp	.+512    	; 0x1d228 <__fp_szero>
   1d028:	5f 3f       	cpi	r21, 0xFF	; 255
   1d02a:	ec f3       	brlt	.-6      	; 0x1d026 <__divsf3_pse+0x6a>
   1d02c:	98 3e       	cpi	r25, 0xE8	; 232
   1d02e:	dc f3       	brlt	.-10     	; 0x1d026 <__divsf3_pse+0x6a>
   1d030:	86 95       	lsr	r24
   1d032:	77 95       	ror	r23
   1d034:	67 95       	ror	r22
   1d036:	b7 95       	ror	r27
   1d038:	f7 95       	ror	r31
   1d03a:	9f 5f       	subi	r25, 0xFF	; 255
   1d03c:	c9 f7       	brne	.-14     	; 0x1d030 <__divsf3_pse+0x74>
   1d03e:	88 0f       	add	r24, r24
   1d040:	91 1d       	adc	r25, r1
   1d042:	96 95       	lsr	r25
   1d044:	87 95       	ror	r24
   1d046:	97 f9       	bld	r25, 7
   1d048:	08 95       	ret
   1d04a:	e1 e0       	ldi	r30, 0x01	; 1
   1d04c:	66 0f       	add	r22, r22
   1d04e:	77 1f       	adc	r23, r23
   1d050:	88 1f       	adc	r24, r24
   1d052:	bb 1f       	adc	r27, r27
   1d054:	62 17       	cp	r22, r18
   1d056:	73 07       	cpc	r23, r19
   1d058:	84 07       	cpc	r24, r20
   1d05a:	ba 07       	cpc	r27, r26
   1d05c:	20 f0       	brcs	.+8      	; 0x1d066 <__divsf3_pse+0xaa>
   1d05e:	62 1b       	sub	r22, r18
   1d060:	73 0b       	sbc	r23, r19
   1d062:	84 0b       	sbc	r24, r20
   1d064:	ba 0b       	sbc	r27, r26
   1d066:	ee 1f       	adc	r30, r30
   1d068:	88 f7       	brcc	.-30     	; 0x1d04c <__divsf3_pse+0x90>
   1d06a:	e0 95       	com	r30
   1d06c:	08 95       	ret

0001d06e <__fixsfsi>:
   1d06e:	04 d0       	rcall	.+8      	; 0x1d078 <__fixunssfsi>
   1d070:	68 94       	set
   1d072:	b1 11       	cpse	r27, r1
   1d074:	d9 c0       	rjmp	.+434    	; 0x1d228 <__fp_szero>
   1d076:	08 95       	ret

0001d078 <__fixunssfsi>:
   1d078:	bc d0       	rcall	.+376    	; 0x1d1f2 <__fp_splitA>
   1d07a:	88 f0       	brcs	.+34     	; 0x1d09e <__fixunssfsi+0x26>
   1d07c:	9f 57       	subi	r25, 0x7F	; 127
   1d07e:	90 f0       	brcs	.+36     	; 0x1d0a4 <__fixunssfsi+0x2c>
   1d080:	b9 2f       	mov	r27, r25
   1d082:	99 27       	eor	r25, r25
   1d084:	b7 51       	subi	r27, 0x17	; 23
   1d086:	a0 f0       	brcs	.+40     	; 0x1d0b0 <__fixunssfsi+0x38>
   1d088:	d1 f0       	breq	.+52     	; 0x1d0be <__fixunssfsi+0x46>
   1d08a:	66 0f       	add	r22, r22
   1d08c:	77 1f       	adc	r23, r23
   1d08e:	88 1f       	adc	r24, r24
   1d090:	99 1f       	adc	r25, r25
   1d092:	1a f0       	brmi	.+6      	; 0x1d09a <__fixunssfsi+0x22>
   1d094:	ba 95       	dec	r27
   1d096:	c9 f7       	brne	.-14     	; 0x1d08a <__fixunssfsi+0x12>
   1d098:	12 c0       	rjmp	.+36     	; 0x1d0be <__fixunssfsi+0x46>
   1d09a:	b1 30       	cpi	r27, 0x01	; 1
   1d09c:	81 f0       	breq	.+32     	; 0x1d0be <__fixunssfsi+0x46>
   1d09e:	c3 d0       	rcall	.+390    	; 0x1d226 <__fp_zero>
   1d0a0:	b1 e0       	ldi	r27, 0x01	; 1
   1d0a2:	08 95       	ret
   1d0a4:	c0 c0       	rjmp	.+384    	; 0x1d226 <__fp_zero>
   1d0a6:	67 2f       	mov	r22, r23
   1d0a8:	78 2f       	mov	r23, r24
   1d0aa:	88 27       	eor	r24, r24
   1d0ac:	b8 5f       	subi	r27, 0xF8	; 248
   1d0ae:	39 f0       	breq	.+14     	; 0x1d0be <__fixunssfsi+0x46>
   1d0b0:	b9 3f       	cpi	r27, 0xF9	; 249
   1d0b2:	cc f3       	brlt	.-14     	; 0x1d0a6 <__fixunssfsi+0x2e>
   1d0b4:	86 95       	lsr	r24
   1d0b6:	77 95       	ror	r23
   1d0b8:	67 95       	ror	r22
   1d0ba:	b3 95       	inc	r27
   1d0bc:	d9 f7       	brne	.-10     	; 0x1d0b4 <__fixunssfsi+0x3c>
   1d0be:	3e f4       	brtc	.+14     	; 0x1d0ce <__fixunssfsi+0x56>
   1d0c0:	90 95       	com	r25
   1d0c2:	80 95       	com	r24
   1d0c4:	70 95       	com	r23
   1d0c6:	61 95       	neg	r22
   1d0c8:	7f 4f       	sbci	r23, 0xFF	; 255
   1d0ca:	8f 4f       	sbci	r24, 0xFF	; 255
   1d0cc:	9f 4f       	sbci	r25, 0xFF	; 255
   1d0ce:	08 95       	ret

0001d0d0 <__floatunsisf>:
   1d0d0:	e8 94       	clt
   1d0d2:	09 c0       	rjmp	.+18     	; 0x1d0e6 <__floatsisf+0x12>

0001d0d4 <__floatsisf>:
   1d0d4:	97 fb       	bst	r25, 7
   1d0d6:	3e f4       	brtc	.+14     	; 0x1d0e6 <__floatsisf+0x12>
   1d0d8:	90 95       	com	r25
   1d0da:	80 95       	com	r24
   1d0dc:	70 95       	com	r23
   1d0de:	61 95       	neg	r22
   1d0e0:	7f 4f       	sbci	r23, 0xFF	; 255
   1d0e2:	8f 4f       	sbci	r24, 0xFF	; 255
   1d0e4:	9f 4f       	sbci	r25, 0xFF	; 255
   1d0e6:	99 23       	and	r25, r25
   1d0e8:	a9 f0       	breq	.+42     	; 0x1d114 <__floatsisf+0x40>
   1d0ea:	f9 2f       	mov	r31, r25
   1d0ec:	96 e9       	ldi	r25, 0x96	; 150
   1d0ee:	bb 27       	eor	r27, r27
   1d0f0:	93 95       	inc	r25
   1d0f2:	f6 95       	lsr	r31
   1d0f4:	87 95       	ror	r24
   1d0f6:	77 95       	ror	r23
   1d0f8:	67 95       	ror	r22
   1d0fa:	b7 95       	ror	r27
   1d0fc:	f1 11       	cpse	r31, r1
   1d0fe:	f8 cf       	rjmp	.-16     	; 0x1d0f0 <__floatsisf+0x1c>
   1d100:	fa f4       	brpl	.+62     	; 0x1d140 <__floatsisf+0x6c>
   1d102:	bb 0f       	add	r27, r27
   1d104:	11 f4       	brne	.+4      	; 0x1d10a <__floatsisf+0x36>
   1d106:	60 ff       	sbrs	r22, 0
   1d108:	1b c0       	rjmp	.+54     	; 0x1d140 <__floatsisf+0x6c>
   1d10a:	6f 5f       	subi	r22, 0xFF	; 255
   1d10c:	7f 4f       	sbci	r23, 0xFF	; 255
   1d10e:	8f 4f       	sbci	r24, 0xFF	; 255
   1d110:	9f 4f       	sbci	r25, 0xFF	; 255
   1d112:	16 c0       	rjmp	.+44     	; 0x1d140 <__floatsisf+0x6c>
   1d114:	88 23       	and	r24, r24
   1d116:	11 f0       	breq	.+4      	; 0x1d11c <__floatsisf+0x48>
   1d118:	96 e9       	ldi	r25, 0x96	; 150
   1d11a:	11 c0       	rjmp	.+34     	; 0x1d13e <__floatsisf+0x6a>
   1d11c:	77 23       	and	r23, r23
   1d11e:	21 f0       	breq	.+8      	; 0x1d128 <__floatsisf+0x54>
   1d120:	9e e8       	ldi	r25, 0x8E	; 142
   1d122:	87 2f       	mov	r24, r23
   1d124:	76 2f       	mov	r23, r22
   1d126:	05 c0       	rjmp	.+10     	; 0x1d132 <__floatsisf+0x5e>
   1d128:	66 23       	and	r22, r22
   1d12a:	71 f0       	breq	.+28     	; 0x1d148 <__floatsisf+0x74>
   1d12c:	96 e8       	ldi	r25, 0x86	; 134
   1d12e:	86 2f       	mov	r24, r22
   1d130:	70 e0       	ldi	r23, 0x00	; 0
   1d132:	60 e0       	ldi	r22, 0x00	; 0
   1d134:	2a f0       	brmi	.+10     	; 0x1d140 <__floatsisf+0x6c>
   1d136:	9a 95       	dec	r25
   1d138:	66 0f       	add	r22, r22
   1d13a:	77 1f       	adc	r23, r23
   1d13c:	88 1f       	adc	r24, r24
   1d13e:	da f7       	brpl	.-10     	; 0x1d136 <__floatsisf+0x62>
   1d140:	88 0f       	add	r24, r24
   1d142:	96 95       	lsr	r25
   1d144:	87 95       	ror	r24
   1d146:	97 f9       	bld	r25, 7
   1d148:	08 95       	ret

0001d14a <__fp_cmp>:
   1d14a:	99 0f       	add	r25, r25
   1d14c:	00 08       	sbc	r0, r0
   1d14e:	55 0f       	add	r21, r21
   1d150:	aa 0b       	sbc	r26, r26
   1d152:	e0 e8       	ldi	r30, 0x80	; 128
   1d154:	fe ef       	ldi	r31, 0xFE	; 254
   1d156:	16 16       	cp	r1, r22
   1d158:	17 06       	cpc	r1, r23
   1d15a:	e8 07       	cpc	r30, r24
   1d15c:	f9 07       	cpc	r31, r25
   1d15e:	c0 f0       	brcs	.+48     	; 0x1d190 <__fp_cmp+0x46>
   1d160:	12 16       	cp	r1, r18
   1d162:	13 06       	cpc	r1, r19
   1d164:	e4 07       	cpc	r30, r20
   1d166:	f5 07       	cpc	r31, r21
   1d168:	98 f0       	brcs	.+38     	; 0x1d190 <__fp_cmp+0x46>
   1d16a:	62 1b       	sub	r22, r18
   1d16c:	73 0b       	sbc	r23, r19
   1d16e:	84 0b       	sbc	r24, r20
   1d170:	95 0b       	sbc	r25, r21
   1d172:	39 f4       	brne	.+14     	; 0x1d182 <__fp_cmp+0x38>
   1d174:	0a 26       	eor	r0, r26
   1d176:	61 f0       	breq	.+24     	; 0x1d190 <__fp_cmp+0x46>
   1d178:	23 2b       	or	r18, r19
   1d17a:	24 2b       	or	r18, r20
   1d17c:	25 2b       	or	r18, r21
   1d17e:	21 f4       	brne	.+8      	; 0x1d188 <__fp_cmp+0x3e>
   1d180:	08 95       	ret
   1d182:	0a 26       	eor	r0, r26
   1d184:	09 f4       	brne	.+2      	; 0x1d188 <__fp_cmp+0x3e>
   1d186:	a1 40       	sbci	r26, 0x01	; 1
   1d188:	a6 95       	lsr	r26
   1d18a:	8f ef       	ldi	r24, 0xFF	; 255
   1d18c:	81 1d       	adc	r24, r1
   1d18e:	81 1d       	adc	r24, r1
   1d190:	08 95       	ret

0001d192 <__fp_inf>:
   1d192:	97 f9       	bld	r25, 7
   1d194:	9f 67       	ori	r25, 0x7F	; 127
   1d196:	80 e8       	ldi	r24, 0x80	; 128
   1d198:	70 e0       	ldi	r23, 0x00	; 0
   1d19a:	60 e0       	ldi	r22, 0x00	; 0
   1d19c:	08 95       	ret

0001d19e <__fp_nan>:
   1d19e:	9f ef       	ldi	r25, 0xFF	; 255
   1d1a0:	80 ec       	ldi	r24, 0xC0	; 192
   1d1a2:	08 95       	ret

0001d1a4 <__fp_pscA>:
   1d1a4:	00 24       	eor	r0, r0
   1d1a6:	0a 94       	dec	r0
   1d1a8:	16 16       	cp	r1, r22
   1d1aa:	17 06       	cpc	r1, r23
   1d1ac:	18 06       	cpc	r1, r24
   1d1ae:	09 06       	cpc	r0, r25
   1d1b0:	08 95       	ret

0001d1b2 <__fp_pscB>:
   1d1b2:	00 24       	eor	r0, r0
   1d1b4:	0a 94       	dec	r0
   1d1b6:	12 16       	cp	r1, r18
   1d1b8:	13 06       	cpc	r1, r19
   1d1ba:	14 06       	cpc	r1, r20
   1d1bc:	05 06       	cpc	r0, r21
   1d1be:	08 95       	ret

0001d1c0 <__fp_round>:
   1d1c0:	09 2e       	mov	r0, r25
   1d1c2:	03 94       	inc	r0
   1d1c4:	00 0c       	add	r0, r0
   1d1c6:	11 f4       	brne	.+4      	; 0x1d1cc <__fp_round+0xc>
   1d1c8:	88 23       	and	r24, r24
   1d1ca:	52 f0       	brmi	.+20     	; 0x1d1e0 <__fp_round+0x20>
   1d1cc:	bb 0f       	add	r27, r27
   1d1ce:	40 f4       	brcc	.+16     	; 0x1d1e0 <__fp_round+0x20>
   1d1d0:	bf 2b       	or	r27, r31
   1d1d2:	11 f4       	brne	.+4      	; 0x1d1d8 <__fp_round+0x18>
   1d1d4:	60 ff       	sbrs	r22, 0
   1d1d6:	04 c0       	rjmp	.+8      	; 0x1d1e0 <__fp_round+0x20>
   1d1d8:	6f 5f       	subi	r22, 0xFF	; 255
   1d1da:	7f 4f       	sbci	r23, 0xFF	; 255
   1d1dc:	8f 4f       	sbci	r24, 0xFF	; 255
   1d1de:	9f 4f       	sbci	r25, 0xFF	; 255
   1d1e0:	08 95       	ret

0001d1e2 <__fp_split3>:
   1d1e2:	57 fd       	sbrc	r21, 7
   1d1e4:	90 58       	subi	r25, 0x80	; 128
   1d1e6:	44 0f       	add	r20, r20
   1d1e8:	55 1f       	adc	r21, r21
   1d1ea:	59 f0       	breq	.+22     	; 0x1d202 <__fp_splitA+0x10>
   1d1ec:	5f 3f       	cpi	r21, 0xFF	; 255
   1d1ee:	71 f0       	breq	.+28     	; 0x1d20c <__fp_splitA+0x1a>
   1d1f0:	47 95       	ror	r20

0001d1f2 <__fp_splitA>:
   1d1f2:	88 0f       	add	r24, r24
   1d1f4:	97 fb       	bst	r25, 7
   1d1f6:	99 1f       	adc	r25, r25
   1d1f8:	61 f0       	breq	.+24     	; 0x1d212 <__fp_splitA+0x20>
   1d1fa:	9f 3f       	cpi	r25, 0xFF	; 255
   1d1fc:	79 f0       	breq	.+30     	; 0x1d21c <__fp_splitA+0x2a>
   1d1fe:	87 95       	ror	r24
   1d200:	08 95       	ret
   1d202:	12 16       	cp	r1, r18
   1d204:	13 06       	cpc	r1, r19
   1d206:	14 06       	cpc	r1, r20
   1d208:	55 1f       	adc	r21, r21
   1d20a:	f2 cf       	rjmp	.-28     	; 0x1d1f0 <__fp_split3+0xe>
   1d20c:	46 95       	lsr	r20
   1d20e:	f1 df       	rcall	.-30     	; 0x1d1f2 <__fp_splitA>
   1d210:	08 c0       	rjmp	.+16     	; 0x1d222 <__fp_splitA+0x30>
   1d212:	16 16       	cp	r1, r22
   1d214:	17 06       	cpc	r1, r23
   1d216:	18 06       	cpc	r1, r24
   1d218:	99 1f       	adc	r25, r25
   1d21a:	f1 cf       	rjmp	.-30     	; 0x1d1fe <__fp_splitA+0xc>
   1d21c:	86 95       	lsr	r24
   1d21e:	71 05       	cpc	r23, r1
   1d220:	61 05       	cpc	r22, r1
   1d222:	08 94       	sec
   1d224:	08 95       	ret

0001d226 <__fp_zero>:
   1d226:	e8 94       	clt

0001d228 <__fp_szero>:
   1d228:	bb 27       	eor	r27, r27
   1d22a:	66 27       	eor	r22, r22
   1d22c:	77 27       	eor	r23, r23
   1d22e:	cb 01       	movw	r24, r22
   1d230:	97 f9       	bld	r25, 7
   1d232:	08 95       	ret

0001d234 <__gesf2>:
   1d234:	8a df       	rcall	.-236    	; 0x1d14a <__fp_cmp>
   1d236:	08 f4       	brcc	.+2      	; 0x1d23a <__gesf2+0x6>
   1d238:	8f ef       	ldi	r24, 0xFF	; 255
   1d23a:	08 95       	ret

0001d23c <__mulsf3>:
   1d23c:	0b d0       	rcall	.+22     	; 0x1d254 <__mulsf3x>
   1d23e:	c0 cf       	rjmp	.-128    	; 0x1d1c0 <__fp_round>
   1d240:	b1 df       	rcall	.-158    	; 0x1d1a4 <__fp_pscA>
   1d242:	28 f0       	brcs	.+10     	; 0x1d24e <__mulsf3+0x12>
   1d244:	b6 df       	rcall	.-148    	; 0x1d1b2 <__fp_pscB>
   1d246:	18 f0       	brcs	.+6      	; 0x1d24e <__mulsf3+0x12>
   1d248:	95 23       	and	r25, r21
   1d24a:	09 f0       	breq	.+2      	; 0x1d24e <__mulsf3+0x12>
   1d24c:	a2 cf       	rjmp	.-188    	; 0x1d192 <__fp_inf>
   1d24e:	a7 cf       	rjmp	.-178    	; 0x1d19e <__fp_nan>
   1d250:	11 24       	eor	r1, r1
   1d252:	ea cf       	rjmp	.-44     	; 0x1d228 <__fp_szero>

0001d254 <__mulsf3x>:
   1d254:	c6 df       	rcall	.-116    	; 0x1d1e2 <__fp_split3>
   1d256:	a0 f3       	brcs	.-24     	; 0x1d240 <__mulsf3+0x4>

0001d258 <__mulsf3_pse>:
   1d258:	95 9f       	mul	r25, r21
   1d25a:	d1 f3       	breq	.-12     	; 0x1d250 <__mulsf3+0x14>
   1d25c:	95 0f       	add	r25, r21
   1d25e:	50 e0       	ldi	r21, 0x00	; 0
   1d260:	55 1f       	adc	r21, r21
   1d262:	62 9f       	mul	r22, r18
   1d264:	f0 01       	movw	r30, r0
   1d266:	72 9f       	mul	r23, r18
   1d268:	bb 27       	eor	r27, r27
   1d26a:	f0 0d       	add	r31, r0
   1d26c:	b1 1d       	adc	r27, r1
   1d26e:	63 9f       	mul	r22, r19
   1d270:	aa 27       	eor	r26, r26
   1d272:	f0 0d       	add	r31, r0
   1d274:	b1 1d       	adc	r27, r1
   1d276:	aa 1f       	adc	r26, r26
   1d278:	64 9f       	mul	r22, r20
   1d27a:	66 27       	eor	r22, r22
   1d27c:	b0 0d       	add	r27, r0
   1d27e:	a1 1d       	adc	r26, r1
   1d280:	66 1f       	adc	r22, r22
   1d282:	82 9f       	mul	r24, r18
   1d284:	22 27       	eor	r18, r18
   1d286:	b0 0d       	add	r27, r0
   1d288:	a1 1d       	adc	r26, r1
   1d28a:	62 1f       	adc	r22, r18
   1d28c:	73 9f       	mul	r23, r19
   1d28e:	b0 0d       	add	r27, r0
   1d290:	a1 1d       	adc	r26, r1
   1d292:	62 1f       	adc	r22, r18
   1d294:	83 9f       	mul	r24, r19
   1d296:	a0 0d       	add	r26, r0
   1d298:	61 1d       	adc	r22, r1
   1d29a:	22 1f       	adc	r18, r18
   1d29c:	74 9f       	mul	r23, r20
   1d29e:	33 27       	eor	r19, r19
   1d2a0:	a0 0d       	add	r26, r0
   1d2a2:	61 1d       	adc	r22, r1
   1d2a4:	23 1f       	adc	r18, r19
   1d2a6:	84 9f       	mul	r24, r20
   1d2a8:	60 0d       	add	r22, r0
   1d2aa:	21 1d       	adc	r18, r1
   1d2ac:	82 2f       	mov	r24, r18
   1d2ae:	76 2f       	mov	r23, r22
   1d2b0:	6a 2f       	mov	r22, r26
   1d2b2:	11 24       	eor	r1, r1
   1d2b4:	9f 57       	subi	r25, 0x7F	; 127
   1d2b6:	50 40       	sbci	r21, 0x00	; 0
   1d2b8:	8a f0       	brmi	.+34     	; 0x1d2dc <__mulsf3_pse+0x84>
   1d2ba:	e1 f0       	breq	.+56     	; 0x1d2f4 <__mulsf3_pse+0x9c>
   1d2bc:	88 23       	and	r24, r24
   1d2be:	4a f0       	brmi	.+18     	; 0x1d2d2 <__mulsf3_pse+0x7a>
   1d2c0:	ee 0f       	add	r30, r30
   1d2c2:	ff 1f       	adc	r31, r31
   1d2c4:	bb 1f       	adc	r27, r27
   1d2c6:	66 1f       	adc	r22, r22
   1d2c8:	77 1f       	adc	r23, r23
   1d2ca:	88 1f       	adc	r24, r24
   1d2cc:	91 50       	subi	r25, 0x01	; 1
   1d2ce:	50 40       	sbci	r21, 0x00	; 0
   1d2d0:	a9 f7       	brne	.-22     	; 0x1d2bc <__mulsf3_pse+0x64>
   1d2d2:	9e 3f       	cpi	r25, 0xFE	; 254
   1d2d4:	51 05       	cpc	r21, r1
   1d2d6:	70 f0       	brcs	.+28     	; 0x1d2f4 <__mulsf3_pse+0x9c>
   1d2d8:	5c cf       	rjmp	.-328    	; 0x1d192 <__fp_inf>
   1d2da:	a6 cf       	rjmp	.-180    	; 0x1d228 <__fp_szero>
   1d2dc:	5f 3f       	cpi	r21, 0xFF	; 255
   1d2de:	ec f3       	brlt	.-6      	; 0x1d2da <__mulsf3_pse+0x82>
   1d2e0:	98 3e       	cpi	r25, 0xE8	; 232
   1d2e2:	dc f3       	brlt	.-10     	; 0x1d2da <__mulsf3_pse+0x82>
   1d2e4:	86 95       	lsr	r24
   1d2e6:	77 95       	ror	r23
   1d2e8:	67 95       	ror	r22
   1d2ea:	b7 95       	ror	r27
   1d2ec:	f7 95       	ror	r31
   1d2ee:	e7 95       	ror	r30
   1d2f0:	9f 5f       	subi	r25, 0xFF	; 255
   1d2f2:	c1 f7       	brne	.-16     	; 0x1d2e4 <__mulsf3_pse+0x8c>
   1d2f4:	fe 2b       	or	r31, r30
   1d2f6:	88 0f       	add	r24, r24
   1d2f8:	91 1d       	adc	r25, r1
   1d2fa:	96 95       	lsr	r25
   1d2fc:	87 95       	ror	r24
   1d2fe:	97 f9       	bld	r25, 7
   1d300:	08 95       	ret

0001d302 <round>:
   1d302:	77 df       	rcall	.-274    	; 0x1d1f2 <__fp_splitA>
   1d304:	e0 f0       	brcs	.+56     	; 0x1d33e <round+0x3c>
   1d306:	9e 37       	cpi	r25, 0x7E	; 126
   1d308:	d8 f0       	brcs	.+54     	; 0x1d340 <round+0x3e>
   1d30a:	96 39       	cpi	r25, 0x96	; 150
   1d30c:	b8 f4       	brcc	.+46     	; 0x1d33c <round+0x3a>
   1d30e:	9e 38       	cpi	r25, 0x8E	; 142
   1d310:	48 f4       	brcc	.+18     	; 0x1d324 <round+0x22>
   1d312:	67 2f       	mov	r22, r23
   1d314:	78 2f       	mov	r23, r24
   1d316:	88 27       	eor	r24, r24
   1d318:	98 5f       	subi	r25, 0xF8	; 248
   1d31a:	f9 cf       	rjmp	.-14     	; 0x1d30e <round+0xc>
   1d31c:	86 95       	lsr	r24
   1d31e:	77 95       	ror	r23
   1d320:	67 95       	ror	r22
   1d322:	93 95       	inc	r25
   1d324:	95 39       	cpi	r25, 0x95	; 149
   1d326:	d0 f3       	brcs	.-12     	; 0x1d31c <round+0x1a>
   1d328:	b6 2f       	mov	r27, r22
   1d32a:	b1 70       	andi	r27, 0x01	; 1
   1d32c:	6b 0f       	add	r22, r27
   1d32e:	71 1d       	adc	r23, r1
   1d330:	81 1d       	adc	r24, r1
   1d332:	20 f4       	brcc	.+8      	; 0x1d33c <round+0x3a>
   1d334:	87 95       	ror	r24
   1d336:	77 95       	ror	r23
   1d338:	67 95       	ror	r22
   1d33a:	93 95       	inc	r25
   1d33c:	02 c0       	rjmp	.+4      	; 0x1d342 <__fp_mintl>
   1d33e:	1c c0       	rjmp	.+56     	; 0x1d378 <__fp_mpack>
   1d340:	73 cf       	rjmp	.-282    	; 0x1d228 <__fp_szero>

0001d342 <__fp_mintl>:
   1d342:	88 23       	and	r24, r24
   1d344:	71 f4       	brne	.+28     	; 0x1d362 <__fp_mintl+0x20>
   1d346:	77 23       	and	r23, r23
   1d348:	21 f0       	breq	.+8      	; 0x1d352 <__fp_mintl+0x10>
   1d34a:	98 50       	subi	r25, 0x08	; 8
   1d34c:	87 2b       	or	r24, r23
   1d34e:	76 2f       	mov	r23, r22
   1d350:	07 c0       	rjmp	.+14     	; 0x1d360 <__fp_mintl+0x1e>
   1d352:	66 23       	and	r22, r22
   1d354:	11 f4       	brne	.+4      	; 0x1d35a <__fp_mintl+0x18>
   1d356:	99 27       	eor	r25, r25
   1d358:	0d c0       	rjmp	.+26     	; 0x1d374 <__fp_mintl+0x32>
   1d35a:	90 51       	subi	r25, 0x10	; 16
   1d35c:	86 2b       	or	r24, r22
   1d35e:	70 e0       	ldi	r23, 0x00	; 0
   1d360:	60 e0       	ldi	r22, 0x00	; 0
   1d362:	2a f0       	brmi	.+10     	; 0x1d36e <__fp_mintl+0x2c>
   1d364:	9a 95       	dec	r25
   1d366:	66 0f       	add	r22, r22
   1d368:	77 1f       	adc	r23, r23
   1d36a:	88 1f       	adc	r24, r24
   1d36c:	da f7       	brpl	.-10     	; 0x1d364 <__fp_mintl+0x22>
   1d36e:	88 0f       	add	r24, r24
   1d370:	96 95       	lsr	r25
   1d372:	87 95       	ror	r24
   1d374:	97 f9       	bld	r25, 7
   1d376:	08 95       	ret

0001d378 <__fp_mpack>:
   1d378:	9f 3f       	cpi	r25, 0xFF	; 255
   1d37a:	31 f0       	breq	.+12     	; 0x1d388 <__fp_mpack_finite+0xc>

0001d37c <__fp_mpack_finite>:
   1d37c:	91 50       	subi	r25, 0x01	; 1
   1d37e:	20 f4       	brcc	.+8      	; 0x1d388 <__fp_mpack_finite+0xc>
   1d380:	87 95       	ror	r24
   1d382:	77 95       	ror	r23
   1d384:	67 95       	ror	r22
   1d386:	b7 95       	ror	r27
   1d388:	88 0f       	add	r24, r24
   1d38a:	91 1d       	adc	r25, r1
   1d38c:	96 95       	lsr	r25
   1d38e:	87 95       	ror	r24
   1d390:	97 f9       	bld	r25, 7
   1d392:	08 95       	ret

0001d394 <calloc>:
   1d394:	0f 93       	push	r16
   1d396:	1f 93       	push	r17
   1d398:	cf 93       	push	r28
   1d39a:	df 93       	push	r29
   1d39c:	86 9f       	mul	r24, r22
   1d39e:	80 01       	movw	r16, r0
   1d3a0:	87 9f       	mul	r24, r23
   1d3a2:	10 0d       	add	r17, r0
   1d3a4:	96 9f       	mul	r25, r22
   1d3a6:	10 0d       	add	r17, r0
   1d3a8:	11 24       	eor	r1, r1
   1d3aa:	c8 01       	movw	r24, r16
   1d3ac:	0d d0       	rcall	.+26     	; 0x1d3c8 <malloc>
   1d3ae:	ec 01       	movw	r28, r24
   1d3b0:	00 97       	sbiw	r24, 0x00	; 0
   1d3b2:	21 f0       	breq	.+8      	; 0x1d3bc <calloc+0x28>
   1d3b4:	a8 01       	movw	r20, r16
   1d3b6:	60 e0       	ldi	r22, 0x00	; 0
   1d3b8:	70 e0       	ldi	r23, 0x00	; 0
   1d3ba:	27 d1       	rcall	.+590    	; 0x1d60a <memset>
   1d3bc:	ce 01       	movw	r24, r28
   1d3be:	df 91       	pop	r29
   1d3c0:	cf 91       	pop	r28
   1d3c2:	1f 91       	pop	r17
   1d3c4:	0f 91       	pop	r16
   1d3c6:	08 95       	ret

0001d3c8 <malloc>:
   1d3c8:	0f 93       	push	r16
   1d3ca:	1f 93       	push	r17
   1d3cc:	cf 93       	push	r28
   1d3ce:	df 93       	push	r29
   1d3d0:	82 30       	cpi	r24, 0x02	; 2
   1d3d2:	91 05       	cpc	r25, r1
   1d3d4:	10 f4       	brcc	.+4      	; 0x1d3da <malloc+0x12>
   1d3d6:	82 e0       	ldi	r24, 0x02	; 2
   1d3d8:	90 e0       	ldi	r25, 0x00	; 0
   1d3da:	e0 91 2e 20 	lds	r30, 0x202E	; 0x80202e <__flp>
   1d3de:	f0 91 2f 20 	lds	r31, 0x202F	; 0x80202f <__flp+0x1>
   1d3e2:	20 e0       	ldi	r18, 0x00	; 0
   1d3e4:	30 e0       	ldi	r19, 0x00	; 0
   1d3e6:	a0 e0       	ldi	r26, 0x00	; 0
   1d3e8:	b0 e0       	ldi	r27, 0x00	; 0
   1d3ea:	30 97       	sbiw	r30, 0x00	; 0
   1d3ec:	19 f1       	breq	.+70     	; 0x1d434 <malloc+0x6c>
   1d3ee:	40 81       	ld	r20, Z
   1d3f0:	51 81       	ldd	r21, Z+1	; 0x01
   1d3f2:	02 81       	ldd	r16, Z+2	; 0x02
   1d3f4:	13 81       	ldd	r17, Z+3	; 0x03
   1d3f6:	48 17       	cp	r20, r24
   1d3f8:	59 07       	cpc	r21, r25
   1d3fa:	c8 f0       	brcs	.+50     	; 0x1d42e <malloc+0x66>
   1d3fc:	84 17       	cp	r24, r20
   1d3fe:	95 07       	cpc	r25, r21
   1d400:	69 f4       	brne	.+26     	; 0x1d41c <malloc+0x54>
   1d402:	10 97       	sbiw	r26, 0x00	; 0
   1d404:	31 f0       	breq	.+12     	; 0x1d412 <malloc+0x4a>
   1d406:	12 96       	adiw	r26, 0x02	; 2
   1d408:	0c 93       	st	X, r16
   1d40a:	12 97       	sbiw	r26, 0x02	; 2
   1d40c:	13 96       	adiw	r26, 0x03	; 3
   1d40e:	1c 93       	st	X, r17
   1d410:	27 c0       	rjmp	.+78     	; 0x1d460 <malloc+0x98>
   1d412:	00 93 2e 20 	sts	0x202E, r16	; 0x80202e <__flp>
   1d416:	10 93 2f 20 	sts	0x202F, r17	; 0x80202f <__flp+0x1>
   1d41a:	22 c0       	rjmp	.+68     	; 0x1d460 <malloc+0x98>
   1d41c:	21 15       	cp	r18, r1
   1d41e:	31 05       	cpc	r19, r1
   1d420:	19 f0       	breq	.+6      	; 0x1d428 <malloc+0x60>
   1d422:	42 17       	cp	r20, r18
   1d424:	53 07       	cpc	r21, r19
   1d426:	18 f4       	brcc	.+6      	; 0x1d42e <malloc+0x66>
   1d428:	9a 01       	movw	r18, r20
   1d42a:	bd 01       	movw	r22, r26
   1d42c:	ef 01       	movw	r28, r30
   1d42e:	df 01       	movw	r26, r30
   1d430:	f8 01       	movw	r30, r16
   1d432:	db cf       	rjmp	.-74     	; 0x1d3ea <malloc+0x22>
   1d434:	21 15       	cp	r18, r1
   1d436:	31 05       	cpc	r19, r1
   1d438:	f9 f0       	breq	.+62     	; 0x1d478 <malloc+0xb0>
   1d43a:	28 1b       	sub	r18, r24
   1d43c:	39 0b       	sbc	r19, r25
   1d43e:	24 30       	cpi	r18, 0x04	; 4
   1d440:	31 05       	cpc	r19, r1
   1d442:	80 f4       	brcc	.+32     	; 0x1d464 <malloc+0x9c>
   1d444:	8a 81       	ldd	r24, Y+2	; 0x02
   1d446:	9b 81       	ldd	r25, Y+3	; 0x03
   1d448:	61 15       	cp	r22, r1
   1d44a:	71 05       	cpc	r23, r1
   1d44c:	21 f0       	breq	.+8      	; 0x1d456 <malloc+0x8e>
   1d44e:	fb 01       	movw	r30, r22
   1d450:	93 83       	std	Z+3, r25	; 0x03
   1d452:	82 83       	std	Z+2, r24	; 0x02
   1d454:	04 c0       	rjmp	.+8      	; 0x1d45e <malloc+0x96>
   1d456:	90 93 2f 20 	sts	0x202F, r25	; 0x80202f <__flp+0x1>
   1d45a:	80 93 2e 20 	sts	0x202E, r24	; 0x80202e <__flp>
   1d45e:	fe 01       	movw	r30, r28
   1d460:	32 96       	adiw	r30, 0x02	; 2
   1d462:	44 c0       	rjmp	.+136    	; 0x1d4ec <malloc+0x124>
   1d464:	fe 01       	movw	r30, r28
   1d466:	e2 0f       	add	r30, r18
   1d468:	f3 1f       	adc	r31, r19
   1d46a:	81 93       	st	Z+, r24
   1d46c:	91 93       	st	Z+, r25
   1d46e:	22 50       	subi	r18, 0x02	; 2
   1d470:	31 09       	sbc	r19, r1
   1d472:	39 83       	std	Y+1, r19	; 0x01
   1d474:	28 83       	st	Y, r18
   1d476:	3a c0       	rjmp	.+116    	; 0x1d4ec <malloc+0x124>
   1d478:	20 91 2c 20 	lds	r18, 0x202C	; 0x80202c <__brkval>
   1d47c:	30 91 2d 20 	lds	r19, 0x202D	; 0x80202d <__brkval+0x1>
   1d480:	23 2b       	or	r18, r19
   1d482:	41 f4       	brne	.+16     	; 0x1d494 <malloc+0xcc>
   1d484:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
   1d488:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
   1d48c:	30 93 2d 20 	sts	0x202D, r19	; 0x80202d <__brkval+0x1>
   1d490:	20 93 2c 20 	sts	0x202C, r18	; 0x80202c <__brkval>
   1d494:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
   1d498:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
   1d49c:	21 15       	cp	r18, r1
   1d49e:	31 05       	cpc	r19, r1
   1d4a0:	41 f4       	brne	.+16     	; 0x1d4b2 <malloc+0xea>
   1d4a2:	2d b7       	in	r18, 0x3d	; 61
   1d4a4:	3e b7       	in	r19, 0x3e	; 62
   1d4a6:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
   1d4aa:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
   1d4ae:	24 1b       	sub	r18, r20
   1d4b0:	35 0b       	sbc	r19, r21
   1d4b2:	e0 91 2c 20 	lds	r30, 0x202C	; 0x80202c <__brkval>
   1d4b6:	f0 91 2d 20 	lds	r31, 0x202D	; 0x80202d <__brkval+0x1>
   1d4ba:	e2 17       	cp	r30, r18
   1d4bc:	f3 07       	cpc	r31, r19
   1d4be:	a0 f4       	brcc	.+40     	; 0x1d4e8 <malloc+0x120>
   1d4c0:	2e 1b       	sub	r18, r30
   1d4c2:	3f 0b       	sbc	r19, r31
   1d4c4:	28 17       	cp	r18, r24
   1d4c6:	39 07       	cpc	r19, r25
   1d4c8:	78 f0       	brcs	.+30     	; 0x1d4e8 <malloc+0x120>
   1d4ca:	ac 01       	movw	r20, r24
   1d4cc:	4e 5f       	subi	r20, 0xFE	; 254
   1d4ce:	5f 4f       	sbci	r21, 0xFF	; 255
   1d4d0:	24 17       	cp	r18, r20
   1d4d2:	35 07       	cpc	r19, r21
   1d4d4:	48 f0       	brcs	.+18     	; 0x1d4e8 <malloc+0x120>
   1d4d6:	4e 0f       	add	r20, r30
   1d4d8:	5f 1f       	adc	r21, r31
   1d4da:	50 93 2d 20 	sts	0x202D, r21	; 0x80202d <__brkval+0x1>
   1d4de:	40 93 2c 20 	sts	0x202C, r20	; 0x80202c <__brkval>
   1d4e2:	81 93       	st	Z+, r24
   1d4e4:	91 93       	st	Z+, r25
   1d4e6:	02 c0       	rjmp	.+4      	; 0x1d4ec <malloc+0x124>
   1d4e8:	e0 e0       	ldi	r30, 0x00	; 0
   1d4ea:	f0 e0       	ldi	r31, 0x00	; 0
   1d4ec:	cf 01       	movw	r24, r30
   1d4ee:	df 91       	pop	r29
   1d4f0:	cf 91       	pop	r28
   1d4f2:	1f 91       	pop	r17
   1d4f4:	0f 91       	pop	r16
   1d4f6:	08 95       	ret

0001d4f8 <free>:
   1d4f8:	cf 93       	push	r28
   1d4fa:	df 93       	push	r29
   1d4fc:	00 97       	sbiw	r24, 0x00	; 0
   1d4fe:	09 f4       	brne	.+2      	; 0x1d502 <free+0xa>
   1d500:	81 c0       	rjmp	.+258    	; 0x1d604 <free+0x10c>
   1d502:	fc 01       	movw	r30, r24
   1d504:	32 97       	sbiw	r30, 0x02	; 2
   1d506:	13 82       	std	Z+3, r1	; 0x03
   1d508:	12 82       	std	Z+2, r1	; 0x02
   1d50a:	a0 91 2e 20 	lds	r26, 0x202E	; 0x80202e <__flp>
   1d50e:	b0 91 2f 20 	lds	r27, 0x202F	; 0x80202f <__flp+0x1>
   1d512:	10 97       	sbiw	r26, 0x00	; 0
   1d514:	81 f4       	brne	.+32     	; 0x1d536 <free+0x3e>
   1d516:	20 81       	ld	r18, Z
   1d518:	31 81       	ldd	r19, Z+1	; 0x01
   1d51a:	82 0f       	add	r24, r18
   1d51c:	93 1f       	adc	r25, r19
   1d51e:	20 91 2c 20 	lds	r18, 0x202C	; 0x80202c <__brkval>
   1d522:	30 91 2d 20 	lds	r19, 0x202D	; 0x80202d <__brkval+0x1>
   1d526:	28 17       	cp	r18, r24
   1d528:	39 07       	cpc	r19, r25
   1d52a:	51 f5       	brne	.+84     	; 0x1d580 <free+0x88>
   1d52c:	f0 93 2d 20 	sts	0x202D, r31	; 0x80202d <__brkval+0x1>
   1d530:	e0 93 2c 20 	sts	0x202C, r30	; 0x80202c <__brkval>
   1d534:	67 c0       	rjmp	.+206    	; 0x1d604 <free+0x10c>
   1d536:	ed 01       	movw	r28, r26
   1d538:	20 e0       	ldi	r18, 0x00	; 0
   1d53a:	30 e0       	ldi	r19, 0x00	; 0
   1d53c:	ce 17       	cp	r28, r30
   1d53e:	df 07       	cpc	r29, r31
   1d540:	40 f4       	brcc	.+16     	; 0x1d552 <free+0x5a>
   1d542:	4a 81       	ldd	r20, Y+2	; 0x02
   1d544:	5b 81       	ldd	r21, Y+3	; 0x03
   1d546:	9e 01       	movw	r18, r28
   1d548:	41 15       	cp	r20, r1
   1d54a:	51 05       	cpc	r21, r1
   1d54c:	f1 f0       	breq	.+60     	; 0x1d58a <free+0x92>
   1d54e:	ea 01       	movw	r28, r20
   1d550:	f5 cf       	rjmp	.-22     	; 0x1d53c <free+0x44>
   1d552:	d3 83       	std	Z+3, r29	; 0x03
   1d554:	c2 83       	std	Z+2, r28	; 0x02
   1d556:	40 81       	ld	r20, Z
   1d558:	51 81       	ldd	r21, Z+1	; 0x01
   1d55a:	84 0f       	add	r24, r20
   1d55c:	95 1f       	adc	r25, r21
   1d55e:	c8 17       	cp	r28, r24
   1d560:	d9 07       	cpc	r29, r25
   1d562:	59 f4       	brne	.+22     	; 0x1d57a <free+0x82>
   1d564:	88 81       	ld	r24, Y
   1d566:	99 81       	ldd	r25, Y+1	; 0x01
   1d568:	84 0f       	add	r24, r20
   1d56a:	95 1f       	adc	r25, r21
   1d56c:	02 96       	adiw	r24, 0x02	; 2
   1d56e:	91 83       	std	Z+1, r25	; 0x01
   1d570:	80 83       	st	Z, r24
   1d572:	8a 81       	ldd	r24, Y+2	; 0x02
   1d574:	9b 81       	ldd	r25, Y+3	; 0x03
   1d576:	93 83       	std	Z+3, r25	; 0x03
   1d578:	82 83       	std	Z+2, r24	; 0x02
   1d57a:	21 15       	cp	r18, r1
   1d57c:	31 05       	cpc	r19, r1
   1d57e:	29 f4       	brne	.+10     	; 0x1d58a <free+0x92>
   1d580:	f0 93 2f 20 	sts	0x202F, r31	; 0x80202f <__flp+0x1>
   1d584:	e0 93 2e 20 	sts	0x202E, r30	; 0x80202e <__flp>
   1d588:	3d c0       	rjmp	.+122    	; 0x1d604 <free+0x10c>
   1d58a:	e9 01       	movw	r28, r18
   1d58c:	fb 83       	std	Y+3, r31	; 0x03
   1d58e:	ea 83       	std	Y+2, r30	; 0x02
   1d590:	49 91       	ld	r20, Y+
   1d592:	59 91       	ld	r21, Y+
   1d594:	c4 0f       	add	r28, r20
   1d596:	d5 1f       	adc	r29, r21
   1d598:	ec 17       	cp	r30, r28
   1d59a:	fd 07       	cpc	r31, r29
   1d59c:	61 f4       	brne	.+24     	; 0x1d5b6 <free+0xbe>
   1d59e:	80 81       	ld	r24, Z
   1d5a0:	91 81       	ldd	r25, Z+1	; 0x01
   1d5a2:	84 0f       	add	r24, r20
   1d5a4:	95 1f       	adc	r25, r21
   1d5a6:	02 96       	adiw	r24, 0x02	; 2
   1d5a8:	e9 01       	movw	r28, r18
   1d5aa:	99 83       	std	Y+1, r25	; 0x01
   1d5ac:	88 83       	st	Y, r24
   1d5ae:	82 81       	ldd	r24, Z+2	; 0x02
   1d5b0:	93 81       	ldd	r25, Z+3	; 0x03
   1d5b2:	9b 83       	std	Y+3, r25	; 0x03
   1d5b4:	8a 83       	std	Y+2, r24	; 0x02
   1d5b6:	e0 e0       	ldi	r30, 0x00	; 0
   1d5b8:	f0 e0       	ldi	r31, 0x00	; 0
   1d5ba:	12 96       	adiw	r26, 0x02	; 2
   1d5bc:	8d 91       	ld	r24, X+
   1d5be:	9c 91       	ld	r25, X
   1d5c0:	13 97       	sbiw	r26, 0x03	; 3
   1d5c2:	00 97       	sbiw	r24, 0x00	; 0
   1d5c4:	19 f0       	breq	.+6      	; 0x1d5cc <free+0xd4>
   1d5c6:	fd 01       	movw	r30, r26
   1d5c8:	dc 01       	movw	r26, r24
   1d5ca:	f7 cf       	rjmp	.-18     	; 0x1d5ba <free+0xc2>
   1d5cc:	8d 91       	ld	r24, X+
   1d5ce:	9c 91       	ld	r25, X
   1d5d0:	11 97       	sbiw	r26, 0x01	; 1
   1d5d2:	9d 01       	movw	r18, r26
   1d5d4:	2e 5f       	subi	r18, 0xFE	; 254
   1d5d6:	3f 4f       	sbci	r19, 0xFF	; 255
   1d5d8:	82 0f       	add	r24, r18
   1d5da:	93 1f       	adc	r25, r19
   1d5dc:	20 91 2c 20 	lds	r18, 0x202C	; 0x80202c <__brkval>
   1d5e0:	30 91 2d 20 	lds	r19, 0x202D	; 0x80202d <__brkval+0x1>
   1d5e4:	28 17       	cp	r18, r24
   1d5e6:	39 07       	cpc	r19, r25
   1d5e8:	69 f4       	brne	.+26     	; 0x1d604 <free+0x10c>
   1d5ea:	30 97       	sbiw	r30, 0x00	; 0
   1d5ec:	29 f4       	brne	.+10     	; 0x1d5f8 <free+0x100>
   1d5ee:	10 92 2f 20 	sts	0x202F, r1	; 0x80202f <__flp+0x1>
   1d5f2:	10 92 2e 20 	sts	0x202E, r1	; 0x80202e <__flp>
   1d5f6:	02 c0       	rjmp	.+4      	; 0x1d5fc <free+0x104>
   1d5f8:	13 82       	std	Z+3, r1	; 0x03
   1d5fa:	12 82       	std	Z+2, r1	; 0x02
   1d5fc:	b0 93 2d 20 	sts	0x202D, r27	; 0x80202d <__brkval+0x1>
   1d600:	a0 93 2c 20 	sts	0x202C, r26	; 0x80202c <__brkval>
   1d604:	df 91       	pop	r29
   1d606:	cf 91       	pop	r28
   1d608:	08 95       	ret

0001d60a <memset>:
   1d60a:	dc 01       	movw	r26, r24
   1d60c:	01 c0       	rjmp	.+2      	; 0x1d610 <memset+0x6>
   1d60e:	6d 93       	st	X+, r22
   1d610:	41 50       	subi	r20, 0x01	; 1
   1d612:	50 40       	sbci	r21, 0x00	; 0
   1d614:	e0 f7       	brcc	.-8      	; 0x1d60e <memset+0x4>
   1d616:	08 95       	ret

0001d618 <_exit>:
   1d618:	f8 94       	cli

0001d61a <__stop_program>:
   1d61a:	ff cf       	rjmp	.-2      	; 0x1d61a <__stop_program>
