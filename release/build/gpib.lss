
gpib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000164e  00800100  0001d578  0001d60c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0001d578  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000008e2  0080174e  0080174e  0001ec5a  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0001ec5a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001ec6c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00001718  00000000  00000000  0001ecac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0002900d  00000000  00000000  000203c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006147  00000000  00000000  000493d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0001252c  00000000  00000000  0004f518  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00005100  00000000  00000000  00061a44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000049b9  00000000  00000000  00066b44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00024504  00000000  00000000  0006b4fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001760  00000000  00000000  0008fa01  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00800100 l    d  .data	00000000 .data
00000000 l    d  .text	00000000 .text
0080174e l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .note.gnu.avr.deviceinfo	00000000 .note.gnu.avr.deviceinfo
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 malloc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000001c2 l     O .text	0000001e __c.3622
000001e0 l     O .text	0000001d __c.3617
0080174e l     O .bss	00000001 error_flag
00000000 l    df *ABS*	00000000 time.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00006cb4 l     F .text	0000002a IS_Leap
00800388 l     O .data	00000018 __days
008017c6 l     O .bss	00000016 t.3676
008017dc l     O .bss	00000002 p.3677
008017a8 l     O .bss	00000008 ts.3755
008017b0 l     O .bss	00000016 t.3688
008003a0 l     O .data	0000001a __days_sum
00000719 l     O .text	00000012 __c.3795
00000708 l     O .text	00000011 __c.3797
000006f7 l     O .text	00000011 __c.3799
000006e5 l     O .text	00000012 __c.3801
000006d4 l     O .text	00000011 __c.3803
000006bd l     O .text	00000017 __c.3805
0000072b l     O .text	00000021 __c.3774
0000074c l     O .text	0000001d __c.3649
008017fe l     O .bss	00000020 buf.3654
008017de l     O .bss	00000020 buf.3666
000006ab l     O .text	00000012 __c.3851
00000696 l     O .text	00000015 __c.3853
0000067f l     O .text	00000017 __c.3855
00000665 l     O .text	0000001a __c.3857
00000641 l     O .text	00000024 __c.3859
0000062f l     O .text	00000012 __c.3866
0000061e l     O .text	00000011 __c.3868
0000060d l     O .text	00000011 __c.3870
000005fb l     O .text	00000012 __c.3872
000005ea l     O .text	00000011 __c.3874
00000000 l    df *ABS*	00000000 mmc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000d35e l     F .text	00000004 xchg_spi
0000d362 l     F .text	0000000c deselect
0000d36e l     F .text	00000046 rcvr_datablock
0000d3d8 l     F .text	00000044 select
00000769 l     O .text	00000010 __c.3617
0000d41c l     F .text	00000086 send_cmd
0000d4a2 l     F .text	0000004e xmit_datablock
00801823 l     O .bss	00000001 CardType
00801825 l     O .bss	00000001 Timer1
00801824 l     O .bss	00000001 Timer2
00000000 l    df *ABS*	00000000 posix.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00800ba6 l     O .data	00000014 CSWTCH.97
00000bce l     O .text	00000018 __c.3594
00000bb6 l     O .text	00000018 __c.3601
0000ec52 l     F .text	0000001a _fprintf_putc
00801930 l     O .bss	0000002e _dp
00801830 l     O .bss	00000100 _de
00000ba2 l     O .text	00000008 __c.3917
00000b9e l     O .text	00000004 __c.3919
00000baa l     O .text	0000000c __c.3672
00000000 l    df *ABS*	00000000 posix_tests.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000e74 l     O .text	0000000c __c.3618
00000dae l     O .text	000000c6 __c.3620
00000d0b l     O .text	0000000c __c.3687
00000cfb l     O .text	00000010 __c.3689
00000cee l     O .text	0000000d __c.3691
00000cde l     O .text	00000010 __c.3693
00000cd1 l     O .text	0000000d __c.3695
00000cb5 l     O .text	0000000f __c.3700
00000cc4 l     O .text	0000000d __c.3697
00000ca2 l     O .text	00000013 __c.3704
00800180 l     O .data	00000002 _pagesize
00000c9b l     O .text	00000007 __c.3714
00000c99 l     O .text	00000002 __c.3716
00000d24 l     O .text	00000010 __c.3669
00000d22 l     O .text	00000002 __c.3674
00000d17 l     O .text	0000000b __c.3676
00000c87 l     O .text	00000012 __c.3728
00000c83 l     O .text	00000004 __c.3730
00000c69 l     O .text	0000001a __c.3735
00000c48 l     O .text	00000021 __c.3748
00000c32 l     O .text	00000016 __c.3750
00000c24 l     O .text	0000000e __c.3752
00000bf1 l     O .text	00000023 __c.3760
00000c14 l     O .text	00000010 __c.3757
00000be6 l     O .text	0000000b __c.3764
00000d9d l     O .text	00000011 __c.3636
00000d85 l     O .text	00000018 __c.3640
00000d74 l     O .text	00000011 __c.3647
00000d68 l     O .text	0000000c __c.3651
00000d64 l     O .text	00000004 __c.3653
00000d53 l     O .text	00000011 __c.3655
00000d45 l     O .text	0000000e __c.3657
00000d34 l     O .text	00000011 __c.3659
00000000 l    df *ABS*	00000000 gpib.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00001218 l     O .text	00000011 __c.4240
00001205 l     O .text	00000013 __c.4252
000011df l     O .text	00000026 __c.4257
000011c4 l     O .text	0000001b __c.4259
0000119d l     O .text	00000027 __c.4264
00001182 l     O .text	0000001b __c.4266
00001154 l     O .text	0000002e __c.4282
0000104f l     O .text	0000002f __c.4313
0000107e l     O .text	0000003c __c.4309
000010f6 l     O .text	0000003f __c.4303
000010ba l     O .text	0000003c __c.4305
00001135 l     O .text	0000001f __c.4298
0000103c l     O .text	00000013 __c.4318
00001015 l     O .text	00000009 __c.4360
0000100f l     O .text	00000006 __c.4362
00001004 l     O .text	0000000b __c.4366
00000ff9 l     O .text	0000000b __c.4368
00000fee l     O .text	0000000b __c.4370
0000101e l     O .text	0000001e __c.4334
00000fd5 l     O .text	00000019 __c.4386
00000fa8 l     O .text	0000002d __c.4389
00000f81 l     O .text	00000027 __c.4393
00000f67 l     O .text	0000001a __c.4403
00000f39 l     O .text	0000002e __c.4405
00000f1f l     O .text	0000001a __c.4410
00000ef7 l     O .text	00000028 __c.4418
00000000 l    df *ABS*	00000000 gpib_task.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000014cb l     O .text	00000012 __c.4248
000014ba l     O .text	00000011 __c.4250
000014a1 l     O .text	00000019 __c.4252
00001487 l     O .text	0000001a __c.4298
0000145c l     O .text	0000002b __c.4300
00001445 l     O .text	00000017 __c.4302
00001439 l     O .text	0000000c __c.4304
00001433 l     O .text	00000006 __c.4308
00001421 l     O .text	00000012 __c.4310
0000141a l     O .text	00000007 __c.4315
0000140f l     O .text	0000000b __c.4317
00001408 l     O .text	00000007 __c.4319
000013fb l     O .text	0000000d __c.4321
000013ea l     O .text	00000011 __c.4323
000013c9 l     O .text	00000021 __c.4350
000013af l     O .text	0000001a __c.4352
00001397 l     O .text	00000018 __c.4357
0000137f l     O .text	00000018 __c.4359
00001378 l     O .text	00000007 __c.4361
00001371 l     O .text	00000007 __c.4363
0000136a l     O .text	00000007 __c.4365
0000135e l     O .text	0000000c __c.4367
00001351 l     O .text	0000000d __c.4369
0000134a l     O .text	00000007 __c.4371
00001329 l     O .text	00000021 __c.4373
000012d6 l     O .text	00000007 __c.4393
000012c5 l     O .text	00000011 __c.4395
000012b3 l     O .text	00000012 __c.4397
0000129f l     O .text	00000014 __c.4399
0000128f l     O .text	00000010 __c.4401
00001283 l     O .text	0000000c __c.4403
00001272 l     O .text	00000011 __c.4408
00001260 l     O .text	00000012 __c.4410
0000123a l     O .text	00000026 __c.4412
00001229 l     O .text	00000011 __c.4417
00001322 l     O .text	00000007 __c.4378
00001320 l     O .text	00000002 __c.4380
0000130e l     O .text	00000012 __c.4382
000012fd l     O .text	00000011 __c.4384
000012e9 l     O .text	00000014 __c.4386
000012dd l     O .text	0000000c __c.4388
00000000 l    df *ABS*	00000000 drives.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000020bb l     O .text	00000015 __c.4467
000020af l     O .text	0000000c __c.4478
000020ab l     O .text	00000004 __c.4488
00001d75 l     O .text	00000012 __c.4634
00001d57 l     O .text	00000002 __c.4643
00001d59 l     O .text	00000009 __c.4641
00001d62 l     O .text	0000000a __c.4639
00001d6c l     O .text	00000009 __c.4637
00001d55 l     O .text	00000002 __c.4648
00001d35 l     O .text	00000020 __c.4657
00001cba l     O .text	00000002 __c.4672
00001cef l     O .text	0000000a __c.4666
00001cd0 l     O .text	0000001f __c.4668
00001cbc l     O .text	00000014 __c.4670
00001d2c l     O .text	00000009 __c.4660
00001d0d l     O .text	0000001f __c.4662
00001cf9 l     O .text	00000014 __c.4664
00001cb8 l     O .text	00000002 __c.4677
00001c93 l     O .text	00000025 __c.4716
00001c5a l     O .text	00000039 __c.4718
00001c25 l     O .text	00000035 __c.4720
00001bf0 l     O .text	00000035 __c.4722
00001bb8 l     O .text	00000038 __c.4724
00001b8d l     O .text	0000002b __c.4726
00001b69 l     O .text	00000024 __c.4747
00001b47 l     O .text	00000022 __c.4755
00801976 l     O .bss	00000002 stack_ind
0080196c l     O .bss	0000000a stack_p
00001b1f l     O .text	00000028 __c.4791
00001af7 l     O .text	00000028 __c.4797
000019d4 l     O .text	0000001a __c.4851
000019cc l     O .text	00000008 __c.4853
000019ee l     O .text	00000022 __c.4849
00001a18 l     O .text	0000001a __c.4845
00001a10 l     O .text	00000008 __c.4847
00001a32 l     O .text	00000022 __c.4843
000019c3 l     O .text	00000009 __c.4861
000019b2 l     O .text	00000011 __c.4863
0000198d l     O .text	00000025 __c.4865
0000196a l     O .text	00000023 __c.4867
00001968 l     O .text	00000002 __c.4869
00001956 l     O .text	00000012 __c.4871
00001941 l     O .text	00000015 __c.4873
0000193f l     O .text	00000002 __c.4875
00001924 l     O .text	0000001b __c.4877
00001919 l     O .text	0000000b __c.4879
00001911 l     O .text	00000008 __c.4915
000018ff l     O .text	00000012 __c.4917
000018dc l     O .text	00000023 __c.4919
000018bd l     O .text	0000001f __c.4921
000017e8 l     O .text	00000015 __c.4952
000017d3 l     O .text	00000015 __c.4954
000017c1 l     O .text	00000012 __c.4956
00001adc l     O .text	0000001b __c.4813
00001aa6 l     O .text	00000036 __c.4819
00001a6f l     O .text	00000037 __c.4821
00001a54 l     O .text	0000001b __c.4823
0000209e l     O .text	0000000d __c.4509
00001ded l     O .text	00000022 __c.4620
00001e0f l     O .text	00000030 __c.4617
00001e3f l     O .text	0000002f __c.4608
00001e6e l     O .text	00000030 __c.4605
00001e9e l     O .text	0000002e __c.4596
00001ecc l     O .text	0000002e __c.4588
00002080 l     O .text	0000001e __c.4511
0000205e l     O .text	00000022 __c.4514
0000203c l     O .text	00000022 __c.4525
00002012 l     O .text	0000002a __c.4529
00001fe1 l     O .text	00000031 __c.4532
00001fb4 l     O .text	0000002d __c.4542
00001f86 l     O .text	0000002e __c.4550
00001f58 l     O .text	0000002e __c.4553
00001f26 l     O .text	00000032 __c.4561
00001efa l     O .text	0000002c __c.4578
00001dcb l     O .text	00000022 __c.4624
00001dae l     O .text	0000001d __c.4626
00001d87 l     O .text	00000027 __c.4628
000017b1 l     O .text	00000010 __c.4961
000017af l     O .text	00000002 __c.4966
00001897 l     O .text	00000026 __c.4932
0000186f l     O .text	00000028 __c.4934
00001845 l     O .text	0000002a __c.4938
0000181a l     O .text	0000002b __c.4942
000017fd l     O .text	0000001d __c.4944
00000000 l    df *ABS*	00000000 ss80.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00801998 l     O .bss	00000005 B.4253
00801985 l     O .bss	00000013 B.4257
00801978 l     O .bss	0000000d B.4261
00002770 l     O .text	00000005 __c.4364
00002765 l     O .text	0000000b __c.4366
00002751 l     O .text	00000014 __c.4376
00002736 l     O .text	0000001b __c.4378
00002725 l     O .text	00000011 __c.4386
00002702 l     O .text	00000023 __c.4388
000026e5 l     O .text	0000001d __c.4390
000026c6 l     O .text	0000001f __c.4392
000026ae l     O .text	00000018 __c.4397
00002694 l     O .text	0000001a __c.4402
0000266e l     O .text	00000026 __c.4411
00002655 l     O .text	00000019 __c.4413
00002559 l     O .text	00000025 __c.4435
0000257e l     O .text	0000001a __c.4433
00002598 l     O .text	00000016 __c.4431
000025ae l     O .text	0000000e __c.4429
000025bc l     O .text	0000001c __c.4427
000025d8 l     O .text	0000001d __c.4425
0000263f l     O .text	00000016 __c.4415
00002626 l     O .text	00000019 __c.4418
0000260e l     O .text	00000018 __c.4420
000025f5 l     O .text	00000019 __c.4423
00002538 l     O .text	00000021 __c.4437
00002522 l     O .text	00000016 __c.4439
00002505 l     O .text	0000001d __c.4441
000024e9 l     O .text	0000001c __c.4443
000024d8 l     O .text	00000011 __c.4445
000024ba l     O .text	0000001e __c.4447
0000249b l     O .text	0000001f __c.4449
00002480 l     O .text	0000001b __c.4451
00002467 l     O .text	00000019 __c.4453
00002450 l     O .text	00000017 __c.4455
0000242d l     O .text	00000023 __c.4457
0000240d l     O .text	00000020 __c.4459
000023d5 l     O .text	00000038 __c.4462
00002292 l     O .text	00000020 __c.4495
0000227e l     O .text	00000014 __c.4497
00002815 l     O .text	00000029 __c.4325
000027c8 l     O .text	00000026 __c.4333
000027ee l     O .text	00000014 __c.4331
00002802 l     O .text	00000013 __c.4327
000027a0 l     O .text	00000028 __c.4337
00002775 l     O .text	0000002b __c.4339
00002264 l     O .text	0000001a __c.4504
00002251 l     O .text	00000013 __c.4506
0000291e l     O .text	00000013 __c.4267
00002245 l     O .text	0000000c __c.4520
00002232 l     O .text	00000013 __c.4527
00002223 l     O .text	0000000f __c.4529
000023c2 l     O .text	00000013 __c.4471
000023a9 l     O .text	00000019 __c.4473
00002384 l     O .text	00000025 __c.4476
00002367 l     O .text	0000001d __c.4479
00002349 l     O .text	0000001e __c.4481
00002322 l     O .text	00000027 __c.4483
0000230e l     O .text	00000014 __c.4485
000022ee l     O .text	00000020 __c.4487
000022b2 l     O .text	0000003c __c.4490
00002200 l     O .text	00000023 __c.4543
000028da l     O .text	00000028 __c.4300
000028bc l     O .text	0000001e __c.4302
0000288b l     O .text	00000019 __c.4306
000028a4 l     O .text	00000018 __c.4304
00002866 l     O .text	00000025 __c.4311
0000283e l     O .text	00000028 __c.4313
00002902 l     O .text	0000001c __c.4283
000021ea l     O .text	00000016 __c.4548
000021d4 l     O .text	00000016 __c.4550
000021bf l     O .text	00000015 __c.4552
000021b0 l     O .text	0000000f __c.4554
0000219c l     O .text	00000014 __c.4556
00002168 l     O .text	00000034 __c.4558
00002134 l     O .text	00000034 __c.4560
00000000 l    df *ABS*	00000000 main.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
008019ea l     O .bss	00000002 lcd_display_time
00004b77 l     O .text	00000030 __c.4466
00004b58 l     O .text	0000001f __c.4468
00004b3b l     O .text	0000001d __c.4470
00004b2b l     O .text	00000010 __c.4472
00004b04 l     O .text	00000027 __c.4474
00004aea l     O .text	0000001a __c.4476
00004ad0 l     O .text	0000001a __c.4478
00004ace l     O .text	00000002 __c.4480
00004ab8 l     O .text	00000016 __c.4494
00004a9e l     O .text	0000001a __c.4500
00004a80 l     O .text	0000001e __c.4506
00004a6a l     O .text	00000016 __c.4508
00004a64 l     O .text	00000006 __c.4510
00004a5e l     O .text	00000006 __c.4512
00004a44 l     O .text	0000001a __c.4514
00004a3e l     O .text	00000006 __c.4521
00004a38 l     O .text	00000006 __c.4523
00004977 l     O .text	000000c1 __c.4530
0001c4b4 l     F .text	0000038e user_task.part.1
00004974 l     O .text	00000003 __c.4543
0000495f l     O .text	00000015 __c.4545
00004956 l     O .text	00000009 __c.4547
00004941 l     O .text	00000015 __c.4552
0000493d l     O .text	00000004 __c.4560
0000492d l     O .text	00000010 __c.4562
0000491c l     O .text	00000011 __c.4564
00004903 l     O .text	00000019 __c.4566
000048f6 l     O .text	0000000d __c.4568
000048ef l     O .text	00000007 __c.4580
000048de l     O .text	00000011 __c.4582
000048b7 l     O .text	00000027 __c.4584
00004898 l     O .text	0000001f __c.4586
0000487b l     O .text	0000001d __c.4588
0000486b l     O .text	00000010 __c.4590
00004844 l     O .text	00000027 __c.4592
0000482a l     O .text	0000001a __c.4594
00004810 l     O .text	0000001a __c.4596
000047fa l     O .text	00000016 __c.4598
000047e4 l     O .text	00000016 __c.4600
000047d2 l     O .text	00000012 __c.4602
000047c3 l     O .text	0000000f __c.4604
00004795 l     O .text	0000002e __c.4606
0000477d l     O .text	00000018 __c.4608
0000476c l     O .text	00000011 __c.4610
00004756 l     O .text	00000016 __c.4612
00004741 l     O .text	00000015 __c.4614
0000472f l     O .text	00000012 __c.4616
00004717 l     O .text	00000018 __c.4618
00004702 l     O .text	00000015 __c.4620
000046ec l     O .text	00000016 __c.4622
000046d6 l     O .text	00000016 __c.4624
000046c5 l     O .text	00000011 __c.4626
000046bf l     O .text	00000006 __c.4628
000046b9 l     O .text	00000006 __c.4630
0000469f l     O .text	0000001a __c.4632
0000468b l     O .text	00000014 __c.4634
00000000 l    df *ABS*	00000000 i2c.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000429 l     O .text	00000018 __c.3593
00000410 l     O .text	00000019 __c.3595
000003fa l     O .text	00000016 __c.3597
000003de l     O .text	0000001c __c.3640
00801755 l     O .bss	00000001 i2c_init_status
000003c7 l     O .text	00000017 __c.3646
00005b36 l     F .text	00000014 i2c_next
000003c1 l     O .text	00000006 __c.3696
000003b3 l     O .text	0000000e __c.3698
000003a9 l     O .text	0000000a __c.3700
0000039d l     O .text	0000000c __c.3702
0000038b l     O .text	00000012 __c.3704
00000379 l     O .text	00000012 __c.3706
00000366 l     O .text	00000013 __c.3708
00000364 l     O .text	00000002 __c.3710
00000351 l     O .text	00000013 __c.3715
0000033d l     O .text	00000014 __c.3717
00000333 l     O .text	0000000a __c.3719
00000331 l     O .text	00000002 __c.3721
00000000 l    df *ABS*	00000000 parsing.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000051e l     O .text	00000020 __c.3586
000004f8 l     O .text	00000026 __c.3629
00000000 l    df *ABS*	00000000 printf.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00007c28 l     F .text	00000018 _putc_fn
00000000 l    df *ABS*	00000000 ff.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00008f22 l     F .text	0000002a ld_dword
00008f4c l     F .text	0000000c st_dword
00008f58 l     F .text	00000012 mem_set
00008f6a l     F .text	0000001e mem_cmp
00008f88 l     F .text	00000050 clst2sect
00008fd8 l     F .text	00000078 clmt_clust
00009050 l     F .text	0000001e sum_sfn
0080046b l     O .data	00000080 ExCvt
0000906e l     F .text	00000058 get_ldnumber
0080181e l     O .bss	00000001 CurrVol
000090c6 l     F .text	00000058 validate
0000911e l     F .text	00000254 get_fileinfo
00009372 l     F .text	00000016 mem_cpy.part.0
00009388 l     F .text	0000002a ld_clust.isra.3
000093b2 l     F .text	0000001a st_clust.isra.4
000093cc l     F .text	000000a6 sync_window.part.5
00009472 l     F .text	000000e4 sync_fs
00009556 l     F .text	00000150 dir_clear
000096a6 l     F .text	00000076 move_window
0000971c l     F .text	00000080 check_fs
0000979c l     F .text	000004b4 mount_volume
00801821 l     O .bss	00000002 FatFs
0080181f l     O .bss	00000002 Fsid
00009c50 l     F .text	000001f2 put_fat
00009e42 l     F .text	00000168 get_fat.isra.9
00009faa l     F .text	00000182 dir_sdi
0000a12c l     F .text	0000024c create_chain
0000a378 l     F .text	00000122 remove_chain
0000a49a l     F .text	000001d0 dir_next
0000a66a l     F .text	00000072 dir_alloc
0000a6dc l     F .text	00000192 dir_read
008004eb l     O .data	0000000d LfnOfs
0000a86e l     F .text	00000090 dir_remove
0000a8fe l     F .text	0000021c dir_find
0000ab1a l     F .text	0000031c dir_register
0000ae36 l     F .text	00000478 follow_path
00000000 l    df *ABS*	00000000 ffunicode.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
008007a6 l     O .data	00000100 uc437
008004f8 l     O .data	000000bc cvt2.1843
008005b4 l     O .data	000001f2 cvt1.1842
00000000 l    df *ABS*	00000000 mmc_hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000ddcc l     F .text	00000048 mmc_task
00000827 l     O .text	0000001c __c.3594
0000081a l     O .text	0000000d __c.3622
0000080a l     O .text	00000010 __c.3636
00801826 l     O .bss	00000002 mmc_init_flag
000007ea l     O .text	00000020 __c.3638
000007d7 l     O .text	00000013 __c.3640
000007cb l     O .text	0000000c __c.3642
000007ba l     O .text	00000011 __c.3644
0000079c l     O .text	0000001e __c.3647
00000787 l     O .text	00000015 __c.3649
00000779 l     O .text	0000000e __c.3651
00000000 l    df *ABS*	00000000 fatfs_sup.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000a9c l     O .text	00000007 __c.3596
008008ca l     O .data	00000008 CSWTCH.25
00000a8b l     O .text	00000011 __c.3632
00000a6c l     O .text	0000001f __c.3634
00000a4e l     O .text	0000001e __c.3636
00000a2f l     O .text	0000001f __c.3638
00000a11 l     O .text	0000001e __c.3640
000009f3 l     O .text	0000001e __c.3642
000009d4 l     O .text	0000001f __c.3644
000009b5 l     O .text	0000001f __c.3646
00000996 l     O .text	0000001f __c.3648
00000977 l     O .text	0000001f __c.3650
00000958 l     O .text	0000001f __c.3652
00000938 l     O .text	00000020 __c.3654
0000091a l     O .text	0000001e __c.3656
000008f5 l     O .text	00000025 __c.3658
000008cf l     O .text	00000026 __c.3660
00000882 l     O .text	0000004d __c.3662
00000867 l     O .text	0000001b __c.3668
00000845 l     O .text	00000022 __c.3670
00000843 l     O .text	00000002 __c.3672
00000000 l    df *ABS*	00000000 fatfs_tests.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000b21 l     O .text	0000007d __c.3587
00000ae1 l     O .text	0000000e __c.3622
00000ab8 l     O .text	00000029 __c.3626
00000aa3 l     O .text	00000015 __c.3628
00000b11 l     O .text	00000010 __c.3605
00000afd l     O .text	00000014 __c.3607
00000aef l     O .text	0000000e __c.3609
00000000 l    df *ABS*	00000000 gpib_tests.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000017a3 l     O .text	0000000c __c.4433
000014ea l     O .text	000002b9 __c.4435
000014dd l     O .text	0000000d __c.4443
00000000 l    df *ABS*	00000000 drives_sup.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00002110 l     O .text	00000007 __c.3641
00002117 l     O .text	0000001d __c.3637
000020f2 l     O .text	0000001e __c.3643
000020d0 l     O .text	00000022 __c.3648
00000000 l    df *ABS*	00000000 amigo.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0001652e l     F .text	000000ac amigo_overflow_check
000030ec l     O .text	00000019 __c.4190
000165da l     F .text	000000e8 amigo_chs_to_logical
00003099 l     O .text	0000002b __c.4183
0000316c l     O .text	00000018 __c.4160
0000314e l     O .text	0000001e __c.4166
00003134 l     O .text	0000001a __c.4168
0000311f l     O .text	00000015 __c.4174
00003105 l     O .text	0000001a __c.4176
000030c4 l     O .text	00000028 __c.4213
00003089 l     O .text	00000010 __c.4224
00003074 l     O .text	00000015 __c.4228
00003062 l     O .text	00000012 __c.4234
00003048 l     O .text	0000001a __c.4240
00003036 l     O .text	00000012 __c.4247
00003017 l     O .text	0000001f __c.4249
00002ff7 l     O .text	00000020 __c.4251
00002fdd l     O .text	0000001a __c.4258
00002fd0 l     O .text	0000000d __c.4260
00002fc1 l     O .text	0000000f __c.4273
00002f5a l     O .text	00000067 __c.4280
00002ef3 l     O .text	00000067 __c.4282
00002e8c l     O .text	00000067 __c.4284
00002e27 l     O .text	00000065 __c.4286
00002dd7 l     O .text	00000050 __c.4291
00002d87 l     O .text	00000050 __c.4293
00002d37 l     O .text	00000050 __c.4295
00002ce6 l     O .text	00000051 __c.4297
00002cb4 l     O .text	00000032 __c.4309
00002c92 l     O .text	00000022 __c.4311
00002c71 l     O .text	00000021 __c.4313
00002c50 l     O .text	00000021 __c.4315
00002c21 l     O .text	0000002f __c.4317
00002c01 l     O .text	00000020 __c.4320
00002bed l     O .text	00000014 __c.4323
00002bd9 l     O .text	00000014 __c.4326
00002bb0 l     O .text	00000029 __c.4328
00002b8f l     O .text	00000021 __c.4330
00002b7f l     O .text	00000010 __c.4333
00002b5d l     O .text	00000022 __c.4335
00002b41 l     O .text	0000001c __c.4337
00002b18 l     O .text	00000029 __c.4339
00002af8 l     O .text	00000020 __c.4341
00002acd l     O .text	0000002b __c.4343
00002aae l     O .text	0000001f __c.4345
00002a9e l     O .text	00000010 __c.4348
00002a6c l     O .text	00000032 __c.4353
00002a4c l     O .text	00000020 __c.4357
00002a2b l     O .text	00000021 __c.4360
00002a0c l     O .text	0000001f __c.4363
000029ea l     O .text	00000022 __c.4366
000029ce l     O .text	0000001c __c.4369
000029ae l     O .text	00000020 __c.4372
00002985 l     O .text	00000029 __c.4377
0000295a l     O .text	0000002b __c.4380
00002931 l     O .text	00000029 __c.4383
00000000 l    df *ABS*	00000000 printer.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000031c1 l     O .text	00000021 __c.4132
000031f0 l     O .text	00000015 __c.4124
000031e2 l     O .text	0000000e __c.4126
00003227 l     O .text	00000022 __c.4114
00003211 l     O .text	00000016 __c.4116
00003205 l     O .text	0000000c __c.4118
000031ba l     O .text	00000007 __c.4138
0000319e l     O .text	0000001c __c.4143
00003184 l     O .text	0000001a __c.4145
00000000 l    df *ABS*	00000000 lifutils.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000467f l     O .text	0000000c __c.3845
000044bb l     O .text	000001c4 __c.3847
00004454 l     O .text	00000029 __c.3868
0000443c l     O .text	00000018 __c.3873
00004417 l     O .text	00000025 __c.3885
000043fe l     O .text	00000019 __c.3891
000043dd l     O .text	00000021 __c.3898
000043a1 l     O .text	0000003c __c.3907
00004364 l     O .text	0000003d __c.3916
008019ca l     O .bss	00000020 _lif_ctime_buf.4019
008019aa l     O .bss	00000020 _timestr.4024
0000435f l     O .text	00000005 __c.4039
00004345 l     O .text	0000001a __c.4041
00004328 l     O .text	0000001d __c.4043
0000430b l     O .text	0000001d __c.4045
000042ee l     O .text	0000001d __c.4047
000042d1 l     O .text	0000001d __c.4049
000042b4 l     O .text	0000001d __c.4051
00004297 l     O .text	0000001d __c.4053
0000427a l     O .text	0000001d __c.4055
0000425d l     O .text	0000001d __c.4057
00004243 l     O .text	0000001a __c.4059
00004227 l     O .text	0000001c __c.4061
0000420a l     O .text	0000001d __c.4063
000041ed l     O .text	0000001d __c.4065
000041d1 l     O .text	0000001c __c.4067
000041b5 l     O .text	0000001c __c.4069
0000419b l     O .text	0000001a __c.4071
00004181 l     O .text	0000001a __c.4073
00004165 l     O .text	0000001c __c.4075
00004149 l     O .text	0000001c __c.4077
0000412c l     O .text	0000001d __c.4079
0000410f l     O .text	0000001d __c.4081
000040f2 l     O .text	0000001d __c.4083
000040d6 l     O .text	0000001c __c.4085
000040bc l     O .text	0000001a __c.4087
000040ba l     O .text	00000002 __c.4089
0000409b l     O .text	0000001f __c.4096
00004062 l     O .text	00000039 __c.4098
0000404a l     O .text	00000018 __c.4100
00004011 l     O .text	00000039 __c.4102
00003fd8 l     O .text	00000039 __c.4104
00003fb3 l     O .text	00000025 __c.4106
00003f84 l     O .text	0000002f __c.4108
00003f58 l     O .text	0000002c __c.4110
00003f37 l     O .text	00000021 __c.4116
00003ef3 l     O .text	00000044 __c.4118
00003eb2 l     O .text	00000041 __c.4120
00003e84 l     O .text	0000002e __c.4122
00003e39 l     O .text	0000004b __c.4124
00003dee l     O .text	0000004b __c.4126
00003dc3 l     O .text	0000002b __c.4128
00003d97 l     O .text	0000002c __c.4130
00003cd4 l     O .text	0000003a __c.4185
00003cb4 l     O .text	00000020 __c.4194
00003c67 l     O .text	0000004d __c.4219
00003d42 l     O .text	00000055 __c.4146
00003d35 l     O .text	0000000d __c.4148
00003d28 l     O .text	0000000d __c.4156
00003d1b l     O .text	0000000d __c.4161
00003d0e l     O .text	0000000d __c.4166
00003c2f l     O .text	00000038 __c.4231
00003c06 l     O .text	00000029 __c.4233
00003bb5 l     O .text	00000051 __c.4236
00003b76 l     O .text	0000003f __c.4249
00003b40 l     O .text	00000036 __c.4251
00003b0d l     O .text	00000033 __c.4253
00003ada l     O .text	00000033 __c.4255
00003ac3 l     O .text	00000017 __c.4265
00003a83 l     O .text	00000040 __c.4267
00003a37 l     O .text	0000004c __c.4270
00003a07 l     O .text	00000030 __c.4272
00003a05 l     O .text	00000002 __c.4275
000039f9 l     O .text	0000000c __c.4277
000039ec l     O .text	0000000d __c.4279
000039db l     O .text	00000011 __c.4281
000039c8 l     O .text	00000013 __c.4283
000039b5 l     O .text	00000013 __c.4285
000039a2 l     O .text	00000013 __c.4287
0000397b l     O .text	00000027 __c.4294
00003956 l     O .text	00000025 __c.4296
0000391d l     O .text	00000039 __c.4310
000038f9 l     O .text	00000024 __c.4327
000038eb l     O .text	0000000e __c.4344
000038dd l     O .text	0000000e __c.4349
000038cf l     O .text	0000000e __c.4351
0000389c l     O .text	00000033 __c.4365
0000386e l     O .text	0000002e __c.4367
0000383f l     O .text	0000002f __c.4369
0000380f l     O .text	00000030 __c.4371
000037e0 l     O .text	0000002f __c.4373
000037b0 l     O .text	00000030 __c.4375
00003789 l     O .text	00000027 __c.4377
00003772 l     O .text	00000017 __c.4379
0000375b l     O .text	00000017 __c.4381
00003742 l     O .text	00000019 __c.4383
00003729 l     O .text	00000019 __c.4385
0000371b l     O .text	0000000e __c.4387
00003703 l     O .text	00000018 __c.4411
000036ec l     O .text	00000017 __c.4413
000036b4 l     O .text	00000038 __c.4415
000036a4 l     O .text	00000010 __c.4417
000035e3 l     O .text	0000000e __c.4428
000035f1 l     O .text	00000028 __c.4426
0000366f l     O .text	00000035 __c.4421
00003619 l     O .text	00000056 __c.4423
000035bb l     O .text	00000028 __c.4436
000035ad l     O .text	0000000e __c.4439
00003595 l     O .text	00000018 __c.4456
00003582 l     O .text	00000013 __c.4458
00003574 l     O .text	0000000e __c.4460
00003566 l     O .text	0000000e __c.4465
00003546 l     O .text	00000020 __c.4482
0000352b l     O .text	0000001b __c.4484
0000350f l     O .text	0000001c __c.4486
000034e0 l     O .text	0000002f __c.4488
000034cd l     O .text	00000013 __c.4490
0000349d l     O .text	00000030 __c.4492
0000348f l     O .text	0000000e __c.4494
00003481 l     O .text	0000000e __c.4499
0000345c l     O .text	00000025 __c.4507
0000343c l     O .text	00000020 __c.4509
0000341d l     O .text	0000001f __c.4511
000033f5 l     O .text	00000028 __c.4513
000033e6 l     O .text	0000000f __c.4515
000033be l     O .text	00000028 __c.4524
00003397 l     O .text	00000027 __c.4526
00003370 l     O .text	00000027 __c.4528
0000333a l     O .text	00000036 __c.4530
00003311 l     O .text	00000029 __c.4532
000032fa l     O .text	00000017 __c.4534
000032d1 l     O .text	00000029 __c.4547
000032ac l     O .text	00000025 __c.4549
00003289 l     O .text	00000023 __c.4551
00003269 l     O .text	00000020 __c.4553
00003249 l     O .text	00000020 __c.4555
0000449a l     O .text	00000021 __c.3860
0000447d l     O .text	0000001d __c.3862
00000000 l    df *ABS*	00000000 ram.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000307 l     O .text	0000000d __c.3604
000002f4 l     O .text	00000013 __c.3606
000002e1 l     O .text	00000013 __c.3608
000002c3 l     O .text	0000001e __c.3610
000002a5 l     O .text	0000001e __c.3612
00000287 l     O .text	0000001e __c.3614
00000269 l     O .text	0000001e __c.3616
00000255 l     O .text	00000014 __c.3618
0000023a l     O .text	0000001b __c.3633
00000222 l     O .text	00000018 __c.3639
000001fd l     O .text	00000025 __c.3648
00000000 l    df *ABS*	00000000 spi.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00801751 l     O .bss	00000004 SPI0_Speed_value
00000314 l     O .text	0000001d __c.3602
0080174f l     O .bss	00000002 SPI0_Mode_value
00000000 l    df *ABS*	00000000 rtc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000004de l     O .text	0000001a __c.3601
000004c2 l     O .text	0000001c __c.3609
000004a9 l     O .text	00000019 __c.3611
00000498 l     O .text	00000011 __c.3619
00000488 l     O .text	00000010 __c.3625
00000474 l     O .text	00000014 __c.3631
0000045f l     O .text	00000015 __c.3633
00000441 l     O .text	0000001e __c.3643
00000000 l    df *ABS*	00000000 timer.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000068b6 l     F .text	0000007c clock_settime.part.2
000005cd l     O .text	0000001d __c.3599
000005c3 l     O .text	0000000a __c.3619
00801784 l     O .bss	00000020 _ts_to_str
0080177c l     O .bss	00000008 __clock_elapsed
000005b5 l     O .text	0000000e __c.3633
000005aa l     O .text	0000000b __c.3635
008017a4 l     O .bss	00000002 timers_configured
008017a6 l     O .bss	00000002 timers_enabled
00000596 l     O .text	00000014 __c.3655
00000583 l     O .text	00000013 __c.3657
00000577 l     O .text	0000000c __c.3659
0000055f l     O .text	00000018 __c.3661
0000054e l     O .text	00000011 __c.3663
0000053e l     O .text	00000010 __c.3665
00000000 l    df *ABS*	00000000 gpib_hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000eda l     O .text	0000001d __c.3744
0080195e l     O .bss	00000001 _ppr_reg
00000ec7 l     O .text	00000013 __c.3762
00000eb6 l     O .text	00000011 __c.3776
00000ea9 l     O .text	0000000d __c.3785
00000e9b l     O .text	0000000e __c.3794
00000e8e l     O .text	0000000d __c.3801
00000e80 l     O .text	0000000e __c.3807
00000000 l    df *ABS*	00000000 _clear_bss.o
00004bd8 l       .text	00000000 .do_clear_bss_start
00004bd6 l       .text	00000000 .do_clear_bss_loop
00000000 l    df *ABS*	00000000 delay.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 rs232.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 stringsup.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 timer_hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 mathio.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 ffsystem.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 diskio.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 vector.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 _udivmodqi4.o
0001cc44 l       .text	00000000 __udivmodqi4_ep
0001cc3c l       .text	00000000 __udivmodqi4_loop
00000000 l    df *ABS*	00000000 _udivmodhi4.o
0001cc64 l       .text	00000000 __udivmodhi4_ep
0001cc56 l       .text	00000000 __udivmodhi4_loop
00000000 l    df *ABS*	00000000 _divmodhi4.o
0001cc8c l       .text	00000000 __divmodhi4_neg1
0001cc94 l       .text	00000000 __divmodhi4_neg2
0001cc9a l       .text	00000000 __divmodhi4_exit
00000000 l    df *ABS*	00000000 _udivmodsi4.o
0001ccc2 l       .text	00000000 __udivmodsi4_ep
0001cca8 l       .text	00000000 __udivmodsi4_loop
00000000 l    df *ABS*	00000000 _divmodsi4.o
0001ccf8 l       .text	00000000 __divmodsi4_neg2
0001cd06 l       .text	00000000 __divmodsi4_exit
00000000 l    df *ABS*	00000000 calloc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 _exit.o
0001d576 l       .text	00000000 __stop_program
00000000 l    df *ABS*	00000000 
00000000 l       *UND*	00000000 --library=m
00015c64 g     F .text	0000004a SS80_Selected_Device_Clear
0001cd2a g       .text	00000002 .hidden __usmulhisi3
0000ec78 g     F .text	0000000c putchar
000118dc g     F .text	00000024 SS80_is_MTA
00006752 g     F .text	000000ea clock_gettime
00005e0c g     F .text	000000d4 i2c_display_task_errors
000061a4 g     F .text	00000084 rtc_init
00011c28 g     F .text	000000a8 GPIB_COMMANDS
00004be6  w      .text	00000000 __vector_22
00010d30 g     F .text	00000054 gpib_unread
00004dca g     F .text	0000000a set_error
00014e48 g     F .text	00000034 SS80_test_extended_status
00006258  w    F .text	00000016 strcpy
00007a06 g     F .text	00000008 asctime
00006cde g     F .text	00000020 tm_mon_to_ascii
00801a80 g     O .bss	00000235 Fatfs
0000edac g     F .text	0000004a mctime
00004be6  w      .text	00000000 __vector_28
0000dd2c g     F .text	0000001a mmc_fast
00005fe4 g     F .text	0000008c rtc_write
00005a04 g     F .text	00000058 i2c_fn
00015d56 g     F .text	00000218 SS80_Transparent_State
0080195f g     O .bss	00000001 gpib_unread_f
00004cb4 g     F .text	00000004 spi_RX_buffer
0001236e g     F .text	00000042 gpib_help
00015ac0 g     F .text	0000009a SS80_Report
0000f8dc g     F .text	0000006a free_file_descriptor
0000ea6c g     F .text	00000096 fatfs_putc
0001ce0a g       .text	0000001e .hidden __umulhisi3
008001b8 g     O .data	0000000c cfgfile
00004be6  w      .text	00000000 __vector_1
00011d96 g     F .text	00000184 GPIB
0000e600 g     F .text	00000024 fatfs_help
000069a8 g     F .text	00000016 delete_all_timers
000055e6 g     F .text	0000000c SPI0_TXRX_Byte
0001d2d8 g       .text	00000000 __fp_mpack_finite
0000f422 g     F .text	00000086 utime
00801a50 g     O .bss	00000008 __clock
0001c1c6 g     F .text	0000007c lcd_time
00012ea0 g     F .text	00000052 find_device
00007834 g     F .text	00000128 set_dst
0000f140 g     F .text	00000096 fdevopen
00011900 g     F .text	00000024 SS80_is_MSA
00004c50 g     F .text	00000060 spi_end
000188a0 g     F .text	000000d6 lif_dir2str
0001d25e g     F .text	00000040 round
0001322e g     F .text	00000172 alloc_device
00004fc6 g     F .text	0000006a safefree
00013878 g     F .text	000000d4 mount_usage
00011f1a g     F .text	00000130 GPIB_TALK
00004be6  w      .text	00000000 __vector_32
0000ff00 g       *ABS*	00000000 __DATA_REGION_LENGTH__
0001cefa g     F .text	00000004 __divsf3
0001cdae g       .text	00000036 .hidden __epilogue_restores__
0000539a g     F .text	00000018 uart_rx_count
00014792 g     F .text	0000003a lif_dir_count
00801cdf g     O .bss	00000009 gpib_timer
0001204a g     F .text	000000f6 GPIB_SECONDARY_ADDRESS
00000000 g       *ABS*	00000000 __TEXT_REGION_ORIGIN__
00018c22 g     F .text	0000000e lif_vol_clear
0000683c g     F .text	0000007a clock_task
000110dc g     F .text	00000284 gpib_trace_display
0001bba6 g     F .text	000000fe lif_rename_file
00013ca4 g     F .text	00000804 Read_Config
00012e20 g     F .text	00000026 find_type
0001d11c g     F .text	00000022 __fp_round
00012e46 g     F .text	00000020 count_drive_types
00006cfe g     F .text	00000042 Days_Per_Month
00006b98 g     F .text	00000028 execute_timers
0000fff4 g     F .text	00000176 ls_info
00004be6  w      .text	00000000 __vector_34
0000dce6 g     F .text	0000001a mmc_spi_begin
0001cfca g     F .text	0000000a __fixsfsi
00006ab2 g     F .text	0000000c clock_elapsed_begin
000062c0  w    F .text	00000032 reverse
0000d63a g     F .text	00000006 mmc_disk_status
0001d13e g     F .text	00000044 __fp_split3
00010b1a g     F .text	00000014 gpib_timeout_set
0001cc4e g       .text	00000028 .hidden __udivmodhi4
00004c4c g     F .text	00000004 chip_select_init
00006a40 g     F .text	00000072 ts_to_str
00008f16 g     F .text	0000000c atol
00007d88 g     F .text	000000aa p_ntoa
0000dfbc g     F .text	000000d8 tm_to_fat
00004e0c g     F .text	00000122 PrintFree
00017022 g     F .text	000000b8 amigo_cmd_dsj
0000d3b4 g     F .text	00000024 wait_ready
000001c2 g       .text	00000000 __trampolines_start
00013432 g     F .text	00000112 hpdir_set_device
0001d0a6 g     F .text	00000048 __fp_cmp
000116b8 g     F .text	00000166 gpib_write_str
008002f0 g     O .data	00000005 _backlight
00801cbd g     O .bss	00000002 errno
00015d34 g     F .text	00000022 SS80_Cancel
0001d578 g       .text	00000000 _etext
0000d7ea g     F .text	00000488 mmc_disk_ioctl
00006448 g     F .text	00000028 MATCH
00800125 g     O .data	00000010 __WDay
000196e6 g     F .text	000000b8 lif_writedirindex
000054a4 g     F .text	000000ce SPI0_Speed
0000593e g     F .text	000000c6 i2c_task_run
00006abe g     F .text	0000007c clock_elapsed_end
0000d22e g     F .text	000000c4 ff_wtoupper
0001ce28 g     F .text	0000000a __subsf3
0001b768 g     F .text	00000312 lif_add_lif_file
00801ce8 g     O .bss	00000002 lastcmd
00004be6  w      .text	00000000 __vector_24
00013430 g     F .text	00000002 set_Config_Defaults
00005f76 g     F .text	00000062 i2c_rtc_read
00006434 g     F .text	00000014 skipspaces
0000be42 g     F .text	0000026c f_getcwd
00004be6  w      .text	00000000 __vector_12
00010756 g     F .text	00000032 gpib_timer_init
000107b8 g     F .text	0000002c ppr_init
0000ec84 g     F .text	00000068 fgets
000053b2 g     F .text	0000004c uart_get_tail
00004f82 g     F .text	00000044 safemalloc
0001ba7a g     F .text	0000012c lif_del_file
00007bf6 g     F .text	00000032 _putc_buffer_fn
0001a9a0 g     F .text	00000172 lif_ascii_string_to_e010
0000ddb2 g     F .text	0000001a mmc_ins_status
0080030a g     O .data	00000002 _cmd2
00018bb8 g     F .text	0000004e lif_lifbcd2timestr
00801cea g     O .bss	00000200 gpib_iobuff
00018076 g     F .text	00000028 V2B_MSB
00018a58 g     F .text	00000084 lif_time2lifbcd
00012e98 g     F .text	00000008 find_free
000058dc g     F .text	00000024 i2c_done
00019192 g     F .text	0000036a lif_check_dir
00004be6 g       .text	00000000 __bad_interrupt
0000508a g     F .text	00000090 delayms
00015c30 g     F .text	00000018 SS80_Channel_Independent_Clear
0000ff1a g     F .text	000000da cat
00008d86 g     F .text	00000028 snprintf_P
0001712a g     F .text	00000132 amigo_todo_op
00015cae g     F .text	00000086 SS80_Amigo_Clear
0000f0b6 g     F .text	0000008a perror
0001c44e g     F .text	00000024 gpib_user_task
0001ebc6 g       *ABS*	00000000 __data_load_end
0000d2fe g     F .text	0000000c disk_initialize
0080199d g     O .bss	0000000d plot
00010ac8 g     F .text	00000006 gpib_timer_elapsed_end
000181f4 g     F .text	0000002a lif_free
0000ed1c g     F .text	0000002e puts
0000fcee g     F .text	000001bc copy
00006ca4 g     F .text	00000010 clock_settime
0001821e g     F .text	0000003e lif_stralloc
00006228  w    F .text	00000016 islower
00004dde g     F .text	0000002e freeRam
0001673e g     F .text	0000001c amigo_request_logical_address
00005a5c g     F .text	0000001c i2c_send_stop
0000cd22 g     F .text	0000022a f_rename
00004be6  w      .text	00000000 __vector_6
00010aaa g     F .text	0000001e gpib_timer_reset
000199e2 g     F .text	000005d4 lif_create_volume
0001d324 g     F .text	00000130 malloc
00004cd8 g     F .text	00000040 spi_init
0000fcac g     F .text	00000042 posix_help
00004be6  w      .text	00000000 __vector_31
0001081a g     F .text	00000046 dbf_open
0001c104 g     F .text	000000c2 copyright
0000bd8c g     F .text	000000b6 f_chdir
0001cef2 g       .text	00000000 __lesf2
00004c1c g     F .text	00000030 chip_deselect
00018000 g     F .text	00000076 PRINTER_COMMANDS
00006b3a g     F .text	00000036 clock_clear
00007a30 g     F .text	000000ee initialize_clock
0000ddb0 g     F .text	00000002 mmc_power_off
000144a8 g     F .text	00000044 display_mounts
0000dfb6 g     F .text	00000006 mmc_wp_status
0000e966 g     F .text	00000106 fatfs_getc
00801eea g     O .bss	00000001 listening_last
0000d2f2 g     F .text	0000000c disk_status
00800102 g     O .data	00000002 __malloc_heap_start
000001c2 g       .text	00000000 __trampolines_end
00006c7a g     F .text	0000002a clock_getres
00801776 g     O .bss	00000004 i2c_task
0001ab12 g     F .text	00000210 lif_add_ascii_file_as_e010_wrapper
00008454  w    F .text	00000038 strlen_X
00018a42 g     F .text	00000016 lif_BCD2BIN
0001825c g     F .text	00000054 lif_open
00007b1e g     F .text	000000d8 display_clock
000107e4 g     F .text	0000001a ppr_bit_set
00004be6  w      .text	00000000 __vector_3
000107b0 g     F .text	00000008 ppr_reg
0001156c g     F .text	00000008 gpib_decode
0000511a g     F .text	00000022 uart_rx_flush
0000efc4 g     F .text	00000004 rmdir
00006932 g     F .text	00000076 set_timers
00801a74 g     O .bss	0000000c dst
0000f03a g     F .text	0000007c readdir
0001d182 g     F .text	0000000e __fp_zero
0000c706 g     F .text	0000002a f_closedir
0001c290 g     F .text	00000148 lcd_setup
0000d34a g     F .text	00000014 disk_ioctl
0001bdb2 g     F .text	0000033e lif_tests
00008318 g     F .text	00000084 _puts_pad
00004cb8 g     F .text	00000020 spi_TX
008019ec g     O .bss	00000001 debug_input
00018c30 g     F .text	0000038c lif_dump_vol
00012140 g     F .text	0000004c listen_cleanup
00018adc g     F .text	000000a0 lif_lifbcd2time
00018976 g     F .text	000000be lif_str2dir
00013a08 g     F .text	000000f2 display_mount
00005674 g     F .text	0000002c SPI0_TXRX
0080030c g     O .data	00000015 _line1
0001cef2 g       .text	00000000 __nesf2
00013544 g     F .text	00000040 hpdir_set_parameters
00005ee0 g     F .text	0000000e BINtoBCD
0000f508 g     F .text	000000d0 lseek
00004be6  w      .text	00000000 __vector_23
0001d578 g       *ABS*	00000000 __data_load_start
0080182a g     O .bss	00000004 _mmc_clock
00004ba8 g       .text	00000000 __dtors_end
0001394c g     F .text	0000002c index_address
000119d8 g     F .text	00000012 gpib_init_devices
00006364  w    F .text	00000050 strncasecmp
00802030 g       .bss	00000000 __bss_end
000184d0 g     F .text	00000056 lif_chars
0001cd36 g       .text	00000014 .hidden __muluhisi3
000126b2 g     F .text	0000006a print_tok_str
00004be6  w      .text	00000000 __vector_30
00000400 g       *ABS*	00000000 __LOCK_REGION_LENGTH__
00013584 g     F .text	000002f4 format_drives
00004be6  w      .text	00000000 __vector_25
0080202c g     O .bss	00000002 __brkval
00006efc g     F .text	0000002a gmtime_r
0000ee50 g     F .text	00000052 chmod
00006bc0 g     F .text	000000ba init_timers
0001196c g     F .text	00000024 AMIGO_is_MSA
00019548 g     F .text	000000d0 lif_checkdirindex
0000c9f4 g     F .text	0000014e f_unlink
00010d90 g     F .text	00000020 gpib_control_pin_read
00010948 g     F .text	000000ae dbf_open_read
00005f00 g     F .text	00000076 i2c_rtc_write
0000ddae g     F .text	00000002 mmc_power_on
00008e4c g     F .text	000000bc strtol
00010aa4 g     F .text	00000006 gpib_timer_elapsed_begin
0000513c g     F .text	00000134 uart_ubr
0000d19e g     F .text	00000066 ff_uni2oem
000056f6 g     F .text	0000009e i2c_check_op
0001a8ea g     F .text	000000b6 lif_e010_pad_sector
00018146 g     F .text	00000042 lif_help
00006520 g     F .text	000000b8 split_args
0000ef48 g     F .text	0000003e rename
0001090e g     F .text	0000003a dbf_close
00017c5a g     F .text	000000be receive_plot_flush
0001cf14 g     F .text	000000dc __divsf3x
00004be6  w      .text	00000000 __vector_11
00801eeb g     O .bss	00000001 spoll
0000edf6 g     F .text	0000001c basename
00014e7c g     F .text	000000c6 SS80_display_extended_status
00017b0e g     F .text	00000130 AMIGO_COMMANDS
0001860e g     F .text	0000007a lif_fixname
0000d702 g     F .text	000000e8 mmc_disk_write
00004ba8  w      .text	00000000 __init
0001d2f0 g     F .text	00000034 calloc
0001b4f8 g     F .text	00000270 lif_extract_lif_as_lif
000066de g     F .text	00000026 install_timers_isr
00010788 g     F .text	00000014 reverse_8bits
00015044 g     F .text	000000e0 SS80_describe
00005436 g     F .text	0000002c uart_getchar
00007e32 g     F .text	0000020e p_ftoa
0000f7c8 g     F .text	000000dc write
00018526 g     F .text	00000074 lif_B2S
0001d190 g       .text	00000000 __gtsf2
0000fc6c g     F .text	00000040 fprintf
00011038 g     F .text	000000a4 gpib_decode_header
00011360 g     F .text	0000020c gpib_read_byte
000125b6 g     F .text	0000003e tok_index
00015c48 g     F .text	0000001c SS80_Universal_Device_Clear
0001ad22 g     F .text	00000278 lif_add_ascii_file_as_e010
00006704 g     F .text	0000004e __vector_13
0000629a  w    F .text	00000026 strcat
008019ef g     O .bss	00000057 uarts
00004dd4 g     F .text	0000000a clear_error
0001d1b4 g       .text	00000000 __mulsf3_pse
00004be6  w      .text	00000000 __vector_17
00004da8 g     F .text	00000022 spi_TXRX
0001d0fa g     F .text	00000006 __fp_nan
00012ef2 g     F .text	0000018a set_active_device
00004be6  w      .text	00000000 __vector_19
0000665e g     F .text	0000007c get_value
0000564c g     F .text	00000028 SPI0_TX
0001859a g     F .text	0000003a lif_checkname
0000ee12 g     F .text	0000003e chdir
00004be6  w      .text	00000000 __vector_7
00016d9e g     F .text	000000b6 amigo_buffered_read_execute
0000de14 g     F .text	000001a2 mmc_init
0000e624 g     F .text	000001a6 fatfs_ls
0001d0ee g     F .text	0000000c __fp_inf
00008dae g     F .text	00000028 sprintf_P
0001cdf2 g       .text	00000018 .hidden __cmpdi2_s8
0000f1d6 g     F .text	00000088 fat_time_to_unix
0000f5d8 g     F .text	0000004e fseek
00801cb5 g     O .bss	00000004 AccSize
00018c06 g     F .text	0000000c lif_image_clear
0000dd58 g     F .text	0000000e mmc_set_ms_timeout
000066da g     F .text	00000004 enable_system_task
0000dd4c g     F .text	00000006 mmc_spi_RX_buffer
00005900 g     F .text	00000024 i2c_task_done
0000701c g     F .text	00000058 is_dst
00005270 g     F .text	0000008e uart_init
00014b80 g     F .text	00000078 SS80ControllerPack
00013c92 g     F .text	00000012 verify_devices
00801ef4 g     O .bss	00000084 Devices
00004bce g       .text	00000010 .hidden __do_clear_bss
00005572 g     F .text	00000074 SPI0_Mode
00810000 g       .comment	00000000 __eeprom_end
0001a276 g     F .text	00000200 lif_open_volume
0000feaa g     F .text	00000070 testpage
00017f0e g     F .text	000000f2 printer_buffer
0000bd5a g     F .text	00000032 f_close
0001d1b0 g     F .text	000000d2 __mulsf3x
00017c3e g     F .text	0000001c printer_init
0000dd08 g     F .text	0000001a mmc_slow
000063f4 g     F .text	00000020 sep
00800100 g     O .data	00000002 __malloc_heap_end
0001079c g     F .text	00000014 ppr_set
00016b54 g     F .text	00000130 amigo_format
0000f626 g     F .text	000000da read
0001979e g     F .text	00000030 lif_writedirEOF
0000dd00 g     F .text	00000008 mmc_spi_end
0001d030 g       .text	00000000 __floatsisf
000170da g     F .text	00000050 amigo_cmd_clear
00000000 g       .text	00000000 __vectors
000197ce g     F .text	00000214 lif_updatefree
000056a0 g     F .text	0000002a SPI0_RX
0000b696 g     F .text	00000296 f_read
008019ed g     O .bss	00000002 rtc_ok
00010bda g     F .text	00000024 gpib_tx_init
000118b8 g     F .text	00000024 SS80_is_MLA
000052fe g     F .text	00000048 uart_rx_interrupt
00005462 g     F .text	00000006 uart0_getchar
00004be6  w      .text	00000000 __vector_27
00010cc4 g     F .text	0000006c gpib_disable_PPR
0000e0e4 g     F .text	000000e0 fatfs_scan_files
00004bea g     F .text	00000032 chip_select
0080174e g       .data	00000000 __data_end
000108d4 g     F .text	0000003a dbf_lseek
0001635a g     F .text	000001d4 SS80_COMMANDS
000063b4 g     F .text	00000040 stralloc
0000c730 g     F .text	00000088 f_readdir
00801eec g     O .bss	00000002 current
00015176 g     F .text	0000004e SS80_Check_Volume
0000dcae g     F .text	00000038 mmc_install_timer
00007d52 g     F .text	00000036 pch
00008e10 g     F .text	0000003c atodigit
0001cc18 g       .text	0000001e .hidden __mulsi3
0000626e  w    F .text	0000002c strncpy
0000ef86 g     F .text	0000003e unlink
0000f79e g     F .text	0000002a sync
00015b98 g     F .text	00000098 SS80_init
0001cef2 g       .text	00000000 __eqsf2
0000f9b8 g     F .text	0000008a new_file_descriptor
00006326  w    F .text	0000003e strcasecmp
0001cd56 g       .text	00000020 .hidden __negdi2
00018106 g     F .text	00000040 B2V_LSB
0000e4fa g     F .text	00000106 fatfs_filinfo_list
0000cf4c g     F .text	0000009a f_chmod
00801a58 g     O .bss	00000018 timer_irq
00005924 g     F .text	0000001a i2c_send_start
00012e66 g     F .text	00000032 type_to_str
00000000  w      .text	00000000 __vector_default
0001cc76 g       .text	00000026 .hidden __divmodhi4
00014bf8 g     F .text	00000198 SS80UnitPack
000109f6 g     F .text	000000ae dbf_open_write
00004be6  w      .text	00000000 __vector_5
0000dc72 g     F .text	0000003c mmc_disk_timerproc
00801a46 g     O .bss	0000000a i2c
00007728 g     F .text	0000010c find_dst
00800182 g     O .data	00000034 gpib_tokens
00004be6  w      .text	00000000 __vector_33
000125f4 g     F .text	0000003e tok_name
00011574 g     F .text	00000144 gpib_read_str
0001a476 g     F .text	000003aa lif_dir
00016e54 g     F .text	000001ce amigo_buffered_write
00000400 g       *ABS*	00000000 __SIGNATURE_REGION_LENGTH__
00014f42 g     F .text	00000102 SS80_send_status
0001cd18 g       .text	00000012 .hidden __tablejump2__
000119ea g     F .text	00000124 gpib_trace_task
00800135 g     O .data	00000001 Stat
0000f392 g     F .text	00000090 unix_time_to_fat
00004ba8 g       .text	00000000 __ctors_start
0000d4f0 g     F .text	0000014a mmc_disk_initialize
00801a70 g     O .bss	00000004 __tzone
0000e094 g     F .text	00000026 get_fattime
00800321 g     O .data	00000002 _cmd1
0000f700 g     F .text	00000038 fread
00018c12 g     F .text	00000010 lif_dir_clear
00016970 g     F .text	00000052 amigo_increment
0001218c g     F .text	00000122 GPIB_LISTEN
008001b6 g     O .data	00000002 debuglevel
0080182e g     O .bss	00000002 _mmc_timeout
00004bb4 g       .text	0000001a .hidden __do_copy_data
0080027c g     O .data	00000074 faults
0000fb80 g     F .text	000000d4 posix_fopen_modes_to_open
000180c8 g     F .text	0000003e B2V_MSB
0080177a g     O .bss	00000002 i2c_callback
00018a34 g     F .text	0000000e lif_BIN2BCD
0001d29e g     F .text	00000036 __fp_mintl
0001cef2 g     F .text	00000008 __cmpsf2
0001cde4 g       .text	0000000e .hidden __xload_1
00010b9e g     F .text	0000003c gpib_rx_init
00006f7e g     F .text	0000005c gettimeofday
0001d10e g     F .text	0000000e __fp_pscB
0001d14e g       .text	00000000 __fp_splitA
00018b7c g     F .text	0000003c lif_ctime_gmt
00018364 g     F .text	000000a6 lif_read
0000fc54 g     F .text	00000018 fopen
0080174e g       .bss	00000000 __bss_start
0000795c g     F .text	000000aa asctime_r
0000710c g     F .text	00000008 localtime
0001d566 g     F .text	0000000e memset
0001725c g     F .text	00000108 amigo_todo
000133d0 g     F .text	00000032 push_state
000076e6 g     F .text	00000042 setdate
0001c856 g     F .text	000003c2 main
008002f5 g     O .data	00000015 _line2
0001236c g     F .text	00000002 talk_cleanup
00006116 g     F .text	0000008e rtc_run
00013afa g     F .text	00000198 verify_device
0000f4d2 g     F .text	00000036 ftell
00801eee g     O .bss	00000001 talking
0000bc5a g     F .text	00000100 f_sync
00801962 g     O .bss	00000002 AMIGOs
0001cef2 g       .text	00000000 __ltsf2
000054a0 g     F .text	00000004 uart_keyhit
000133a0 g     F .text	00000030 init_Devices
00004be6  w      .text	00000000 __vector_4
000194fc g     F .text	0000004c lif_close_volume
0000dd22 g     F .text	0000000a mmc_spi_init
00800100 g       *ABS*	00000000 __DATA_REGION_ORIGIN__
00019618 g     F .text	000000ce lif_readdirindex
0001738c g     F .text	000005cc Amigo_Command
0000f9a8 g     F .text	00000010 fclose
0000ec6c g     F .text	0000000c getchar
000168be g     F .text	000000b2 amigo_send_status
000166c2 g     F .text	0000007c amigo_init
00800136 g     O .data	0000004a sys_errlist
00006fda g     F .text	00000042 time
0000effe g     F .text	0000003c opendir
0001d2d4 g     F .text	0000001c __fp_mpack
0001307c g     F .text	000000f0 SS80_Set_Defaults
00005fd8 g     F .text	0000000c i2c_rtc_init
00006f5a g     F .text	00000024 settimezone
0000b2ae g     F .text	00000078 f_mount
0000e1e2 g     F .text	00000318 fatfs_status
00011948 g     F .text	00000024 AMIGO_is_MTA
0001cd08 g       .text	00000010 .hidden __negsi2
0000c624 g     F .text	000000e2 f_opendir
00015b5a g     F .text	0000003e Clear_Common
0001c472 g     F .text	00000042 help
00010c58 g     F .text	0000006c gpib_enable_PPR
000144ec g     F .text	000001aa mount
00016a18 g     F .text	0000013c amigo_verify
0001d198 g     F .text	00000004 __mulsf3
000065d8 g     F .text	00000086 get_token
0001675a g     F .text	000000ba amigo_request_status
00012768 g     F .text	000001a8 display_Addresses
0000f4a8 g     F .text	0000002a fileno_to_fatfs
0000d204 g     F .text	0000002a ff_oem2uni
0000630c  w    F .text	0000001a strcmp
00010bfe g     F .text	0000005a gpib_state_init
00000000  w      *ABS*	00000000 __heap_end
00010ace g     F .text	0000004c gpib_timer_task
00005030 g     F .text	0000005a delayus
00013402 g     F .text	0000002e pop_state
00004be6  w      .text	00000000 __vector_9
0000eea2 g     F .text	0000004a getcwd
00004be6  w      .text	00000000 __vector_2
00006470 g     F .text	00000028 MATCHI
00017364 g     F .text	00000028 amigo_check_unit
0001ce4c g     F .text	000000cc __addsf3x
00000400 g       *ABS*	00000000 __USER_SIGNATURE_REGION_LENGTH__
0000c0ae g     F .text	00000576 f_lseek
0000eb02 g     F .text	000000ac fgetc
00801eef g     O .bss	00000001 secondary
00008d3a g     F .text	0000004c vsnprintf_P
00007a0e g     F .text	00000022 ctime_gm
0001d190 g     F .text	00000008 __gesf2
00014696 g     F .text	000000fc hpdir_init
00016814 g     F .text	000000aa amigo_send_logical_address
00015124 g     F .text	00000052 SS80_Check_Unit
0001181e g     F .text	0000009a gpib_file_init
0080010a g     O .data	00000001 _cs_pin
00013978 g     F .text	00000090 umount
00801960 g     O .bss	00000002 gpib_log_fp
00004be6  w      .text	00000000 __vector_21
00004be6  w      .text	00000000 __vector_15
00008040 g     F .text	000002d8 p_etoa
0001271c g     F .text	0000004c print_tok
00801756 g     O .bss	00000020 i2c_task_op
00015fe2 g     F .text	000002c4 SS80_locate_and_read
00005812 g     F .text	000000ca i2c_init
000123b0 g     F .text	00000206 gpib_tests
0001316c g     F .text	000000c2 free_device
00801cb9 g     O .bss	00000002 AccDirs
0000d198 g     F .text	00000006 ff_memfree
0080196a g     O .bss	00000002 PRINTERp
0001d100 g     F .text	0000000e __fp_pscA
0001cc36 g       .text	00000018 .hidden __udivmodqi4
00801ef0 g     O .bss	00000001 listening
00011b0e g     F .text	0000011a gpib_error_test
00801966 g     O .bss	00000002 SS80s
0000c7b8 g     F .text	0000007c f_stat
00010b2e g     F .text	00000070 gpib_bus_init
000056ca g     F .text	0000002c i2c_timer
0000ebae g     F .text	000000a4 fputc
00004be6  w      .text	00000000 __vector_29
0000548c g     F .text	00000014 uart0_putchar
00008dd6 g     F .text	0000003a printf_P
0001cd4e g       .text	00000008 .hidden __mulohisi3
000162a6 g     F .text	000000b4 SS80_Execute_State
000074a4 g     F .text	00000008 timegm
000151c4 g     F .text	000004ee SS80_Command_State
00006f3c g     F .text	0000001e gettimezone
00802030 g       .comment	00000000 __heap_start
00006414 g     F .text	00000020 trim_tail
00010dc8 g     F .text	00000270 gpib_write_byte
00017d18 g     F .text	000000b0 printer_close
000057be g     F .text	00000054 i2c_task_op_add
00018fbc g     F .text	000001d6 lif_check_volume
00007074 g     F .text	00000098 localtime_r
008001c4 g     O .data	000000b8 tokens
00801cbb g     O .bss	00000002 AccFiles
00006070 g     F .text	000000a6 rtc_read
00004ba8 g       .text	00000000 __dtors_start
00004ba8 g       .text	00000000 __ctors_end
0001cce0 g       .text	00000028 .hidden __divmodsi4
00010d84 g     F .text	0000000c gpib_bus_read
0000f25e g     F .text	00000134 stat
000040ff  w      *ABS*	00000000 __stack
0000f738 g     F .text	00000066 syncfs
00018188 g     F .text	0000006c lif_calloc
0000f8a4 g     F .text	00000038 fwrite
00011cd0 g     F .text	000000c6 Send_Identify
00801828 g     O .bss	00000002 _mmc_pre
0000dd52 g     F .text	00000006 mmc_spi_TXRX
0080174e g       .data	00000000 _edata
0000cfe6 g     F .text	000000b2 f_utime
00012910 g     F .text	00000510 display_Config
0001cd2c g       .text	0000000a .hidden __usmulhisi3_tail
00802030 g       .comment	00000000 _end
000182fa g     F .text	0000006a lif_seek_msg
00004d18 g     F .text	00000090 spi_begin
00017dc8 g     F .text	00000146 printer_open
0000b92c g     F .text	0000032e f_write
00004be6  w      .text	00000000 __vector_8
0001a820 g     F .text	000000ca lif_find_file
00005b4a g     F .text	000001d4 __vector_26
00007c40 g     F .text	00000112 bin2num
0001cf18 g       .text	00000000 __divsf3_pse
00800106 g     O .data	00000004 _spi_clock
0000839c g     F .text	000000b8 _puts_pad_X
00801964 g     O .bss	00000002 AMIGOp
0000dd46 g     F .text	00000006 mmc_spi_TX_buffer
0000b326 g     F .text	00000370 f_open
00018688 g     F .text	0000011c lif_vol2str
0000d32a g     F .text	00000020 disk_write
0001016a g     F .text	00000210 ls
0001d574  w      .text	00000000 .hidden exit
000122ae g     F .text	000000be gpib_task
00005a78 g     F .text	000000be i2c_task_next_op
0001d02c g     F .text	0000007a __floatunsisf
00016c84 g     F .text	0000011a amigo_buffered_read_command
000069be g     F .text	00000082 subtract_timespec
0001cc76 g       .text	00000000 .hidden _div
00005d1e g     F .text	000000ee i2c_print_error
00017958 g     F .text	000001b6 Amigo_Execute
000062f2  w    F .text	0000001a strupper
0080202e g     O .bss	00000002 __flp
00012632 g     F .text	00000080 print_tok_val
0001cc9c g       .text	00000044 .hidden __udivmodsi4
000119b4 g     F .text	00000024 PRINTER_is_MTA
00019fb6 g     F .text	000002c0 lif_newdir
000147cc g     F .text	000003b4 hpdir_find_drive
00011990 g     F .text	00000024 PRINTER_is_MLA
00008f08 g     F .text	0000000e atoi
00006d40 g     F .text	000001bc time_to_tm
0000e0ba g     F .text	0000002a put_rc
0000ed4a g     F .text	00000038 fileno
0080010b g     O .data	0000001a __Month
000055f2 g     F .text	0000005a SPI0_Init
0000cb42 g     F .text	000001e0 f_mkdir
0001cfd4 g     F .text	00000058 __fixunssfsi
00801f78 g     O .bss	000000b4 hpdir
000074ac g     F .text	0000023a setdate_r
00006498 g     F .text	00000054 MATCHARGS
00004cb0 g     F .text	00000004 spi_TX_buffer
00010000 g       *ABS*	00000000 __EEPROM_REGION_LENGTH__
0001d574 g       .text	00000000 .hidden _exit
0001840a g     F .text	000000c6 lif_write
000185d4 g     F .text	0000003a lif_S2B
0001c842 g     F .text	00000014 user_task
00801ef1 g     O .bss	00000001 talking_last
00010860 g     F .text	0000003a dbf_read
00005eee g     F .text	00000012 BCDtoBIN
0001c3d8 g     F .text	00000076 i2c_lcd_task
00007114 g     F .text	00000390 normalize
00006f26 g     F .text	00000016 gmtime
00004be6  w      .text	00000000 __vector_14
0000e83c g     F .text	0000012a fatfs_tests
0001bca4 g     F .text	0000010e lif_create_image
0000d30a g     F .text	00000020 disk_read
0000fa42 g     F .text	0000013e open
0000623e  w    F .text	0000001a toupper
0001579c g     F .text	00000324 SS80_locate_and_write
0001c0f0 g     F .text	00000014 lcd_task
0000848c g     F .text	000008ae _printf_fn
00004be6  w      .text	00000000 __vector_10
000107fe g     F .text	0000001c ppr_bit_clr
00801cbf g     O .bss	00000020 __iob
0000d098 g     F .text	000000fa f_getlabel
000187a4 g     F .text	000000fc lif_str2vol
0000c834 g     F .text	000001c0 f_getfree
0000ecec g     F .text	00000030 fputs
00004be6  w      .text	00000000 __vector_16
000064ec g     F .text	00000034 MATCHI_LEN
00800100 g       .data	00000000 __data_start
00004f2e g     F .text	00000054 safecalloc
0000ed82 g     F .text	0000002a fileno_to_stream
000156b2 g     F .text	000000ea SS80_cmd_seek
0000efc8 g     F .text	00000036 closedir
00004be6  w      .text	00000000 __vector_18
00005794 g     F .text	0000002a i2c_task_init
00000003 g       *ABS*	00000000 __FUSE_REGION_LENGTH__
00014d90 g     F .text	000000b8 SS80VolumePack
0000d640 g     F .text	000000c2 mmc_disk_read
0000e7ca g     F .text	00000072 mmc_test
00020000 g       *ABS*	00000000 __TEXT_REGION_LENGTH__
000182b0 g     F .text	0000004a lif_stat
000053fe g     F .text	00000006 uart_rx_byte
00015f6e g     F .text	00000074 SS80_error_return
00800104 g     O .data	00000002 __malloc_margin
00005346 g     F .text	00000054 __vector_20
0000eeec g     F .text	0000005c mkdir
0001c242 g     F .text	0000004e lcd_backlight
00005468 g     F .text	00000024 uart_putchar
0001037a g     F .text	000003dc posix_tests
00801ef2 g     O .bss	00000002 gpib_unread_data
0000f946 g     F .text	00000062 close
0001ce2a g       .text	00000000 __addsf3
0001cd76 g       .text	00000038 .hidden __prologue_saves__
00011924 g     F .text	00000024 AMIGO_is_MLA
0000dd66 g     F .text	00000048 mmc_test_timeout
0001af9a g     F .text	0000055e lif_extract_e010_as_ascii
000169c2 g     F .text	00000056 amigo_seek
00010db0 g     F .text	00000018 gpib_handshake_pin_read
00006b70 g     F .text	00000028 enable_timers
0000e1c4 g     F .text	0000001e fatfs_fstype
0001809e g     F .text	0000002a V2B_LSB
0001089a g     F .text	0000003a dbf_write
00801968 g     O .bss	00000002 SS80p
0000d192 g     F .text	00000006 ff_memalloc
0001d454 g     F .text	00000112 free
0001d184 g       .text	00000000 __fp_szero
00005404 g     F .text	00000032 uart_tx_byte
0001cd4a g       .text	00000004 .hidden __mulshisi3



Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d4 25 	jmp	0x4ba8	; 0x4ba8 <__ctors_end>
       4:	0c 94 f3 25 	jmp	0x4be6	; 0x4be6 <__bad_interrupt>
       8:	0c 94 f3 25 	jmp	0x4be6	; 0x4be6 <__bad_interrupt>
       c:	0c 94 f3 25 	jmp	0x4be6	; 0x4be6 <__bad_interrupt>
      10:	0c 94 f3 25 	jmp	0x4be6	; 0x4be6 <__bad_interrupt>
      14:	0c 94 f3 25 	jmp	0x4be6	; 0x4be6 <__bad_interrupt>
      18:	0c 94 f3 25 	jmp	0x4be6	; 0x4be6 <__bad_interrupt>
      1c:	0c 94 f3 25 	jmp	0x4be6	; 0x4be6 <__bad_interrupt>
      20:	0c 94 f3 25 	jmp	0x4be6	; 0x4be6 <__bad_interrupt>
      24:	0c 94 f3 25 	jmp	0x4be6	; 0x4be6 <__bad_interrupt>
      28:	0c 94 f3 25 	jmp	0x4be6	; 0x4be6 <__bad_interrupt>
      2c:	0c 94 f3 25 	jmp	0x4be6	; 0x4be6 <__bad_interrupt>
      30:	0c 94 f3 25 	jmp	0x4be6	; 0x4be6 <__bad_interrupt>
      34:	0c 94 82 33 	jmp	0x6704	; 0x6704 <__vector_13>
      38:	0c 94 f3 25 	jmp	0x4be6	; 0x4be6 <__bad_interrupt>
      3c:	0c 94 f3 25 	jmp	0x4be6	; 0x4be6 <__bad_interrupt>
      40:	0c 94 f3 25 	jmp	0x4be6	; 0x4be6 <__bad_interrupt>
      44:	0c 94 f3 25 	jmp	0x4be6	; 0x4be6 <__bad_interrupt>
      48:	0c 94 f3 25 	jmp	0x4be6	; 0x4be6 <__bad_interrupt>
      4c:	0c 94 f3 25 	jmp	0x4be6	; 0x4be6 <__bad_interrupt>
      50:	0c 94 a3 29 	jmp	0x5346	; 0x5346 <__vector_20>
      54:	0c 94 f3 25 	jmp	0x4be6	; 0x4be6 <__bad_interrupt>
      58:	0c 94 f3 25 	jmp	0x4be6	; 0x4be6 <__bad_interrupt>
      5c:	0c 94 f3 25 	jmp	0x4be6	; 0x4be6 <__bad_interrupt>
      60:	0c 94 f3 25 	jmp	0x4be6	; 0x4be6 <__bad_interrupt>
      64:	0c 94 f3 25 	jmp	0x4be6	; 0x4be6 <__bad_interrupt>
      68:	0c 94 a5 2d 	jmp	0x5b4a	; 0x5b4a <__vector_26>
      6c:	0c 94 f3 25 	jmp	0x4be6	; 0x4be6 <__bad_interrupt>
      70:	0c 94 f3 25 	jmp	0x4be6	; 0x4be6 <__bad_interrupt>
      74:	0c 94 f3 25 	jmp	0x4be6	; 0x4be6 <__bad_interrupt>
      78:	0c 94 f3 25 	jmp	0x4be6	; 0x4be6 <__bad_interrupt>
      7c:	0c 94 f3 25 	jmp	0x4be6	; 0x4be6 <__bad_interrupt>
      80:	0c 94 f3 25 	jmp	0x4be6	; 0x4be6 <__bad_interrupt>
      84:	0c 94 f3 25 	jmp	0x4be6	; 0x4be6 <__bad_interrupt>
      88:	0c 94 f3 25 	jmp	0x4be6	; 0x4be6 <__bad_interrupt>
      8c:	b2 43       	sbci	r27, 0x32	; 50
      8e:	02 45       	sbci	r16, 0x52	; 82
      90:	ea 43       	sbci	r30, 0x3A	; 58
      92:	d5 44       	sbci	r29, 0x45	; 69
      94:	d5 44       	sbci	r29, 0x45	; 69
      96:	02 45       	sbci	r16, 0x52	; 82
      98:	02 45       	sbci	r16, 0x52	; 82
      9a:	02 45       	sbci	r16, 0x52	; 82
      9c:	02 45       	sbci	r16, 0x52	; 82
      9e:	02 45       	sbci	r16, 0x52	; 82
      a0:	02 45       	sbci	r16, 0x52	; 82
      a2:	02 45       	sbci	r16, 0x52	; 82
      a4:	02 45       	sbci	r16, 0x52	; 82
      a6:	b2 43       	sbci	r27, 0x32	; 50
      a8:	af 43       	sbci	r26, 0x3F	; 63
      aa:	02 45       	sbci	r16, 0x52	; 82
      ac:	02 45       	sbci	r16, 0x52	; 82
      ae:	f8 44       	sbci	r31, 0x48	; 72
      b0:	02 45       	sbci	r16, 0x52	; 82
      b2:	e4 43       	sbci	r30, 0x34	; 52
      b4:	02 45       	sbci	r16, 0x52	; 82
      b6:	02 45       	sbci	r16, 0x52	; 82
      b8:	b2 43       	sbci	r27, 0x32	; 50
      ba:	02 45       	sbci	r16, 0x52	; 82
      bc:	02 45       	sbci	r16, 0x52	; 82
      be:	02 45       	sbci	r16, 0x52	; 82
      c0:	02 45       	sbci	r16, 0x52	; 82
      c2:	02 45       	sbci	r16, 0x52	; 82
      c4:	02 45       	sbci	r16, 0x52	; 82
      c6:	02 45       	sbci	r16, 0x52	; 82
      c8:	02 45       	sbci	r16, 0x52	; 82
      ca:	02 45       	sbci	r16, 0x52	; 82
      cc:	b2 43       	sbci	r27, 0x32	; 50
      ce:	fd 44       	sbci	r31, 0x4D	; 77
      d0:	ea 43       	sbci	r30, 0x3A	; 58
      d2:	d5 44       	sbci	r29, 0x45	; 69
      d4:	d5 44       	sbci	r29, 0x45	; 69
      d6:	02 45       	sbci	r16, 0x52	; 82
      d8:	02 45       	sbci	r16, 0x52	; 82
      da:	02 45       	sbci	r16, 0x52	; 82
      dc:	02 45       	sbci	r16, 0x52	; 82
      de:	02 45       	sbci	r16, 0x52	; 82
      e0:	02 45       	sbci	r16, 0x52	; 82
      e2:	02 45       	sbci	r16, 0x52	; 82
      e4:	02 45       	sbci	r16, 0x52	; 82
      e6:	b2 43       	sbci	r27, 0x32	; 50
      e8:	af 43       	sbci	r26, 0x3F	; 63
      ea:	02 45       	sbci	r16, 0x52	; 82
      ec:	02 45       	sbci	r16, 0x52	; 82
      ee:	f3 44       	sbci	r31, 0x43	; 67
      f0:	02 45       	sbci	r16, 0x52	; 82
      f2:	e4 43       	sbci	r30, 0x34	; 52
      f4:	02 45       	sbci	r16, 0x52	; 82
      f6:	02 45       	sbci	r16, 0x52	; 82
      f8:	b2 43       	sbci	r27, 0x32	; 50
      fa:	27 45       	sbci	r18, 0x57	; 87
      fc:	68 46       	sbci	r22, 0x68	; 104
      fe:	1a 45       	sbci	r17, 0x5A	; 90
     100:	82 45       	sbci	r24, 0x52	; 82
     102:	66 45       	sbci	r22, 0x56	; 86
     104:	68 46       	sbci	r22, 0x68	; 104
     106:	68 46       	sbci	r22, 0x68	; 104
     108:	68 46       	sbci	r22, 0x68	; 104
     10a:	68 46       	sbci	r22, 0x68	; 104
     10c:	68 46       	sbci	r22, 0x68	; 104
     10e:	68 46       	sbci	r22, 0x68	; 104
     110:	68 46       	sbci	r22, 0x68	; 104
     112:	68 46       	sbci	r22, 0x68	; 104
     114:	34 45       	sbci	r19, 0x54	; 84
     116:	48 45       	sbci	r20, 0x58	; 88
     118:	68 46       	sbci	r22, 0x68	; 104
     11a:	68 46       	sbci	r22, 0x68	; 104
     11c:	0e 46       	sbci	r16, 0x6E	; 110
     11e:	68 46       	sbci	r22, 0x68	; 104
     120:	16 45       	sbci	r17, 0x56	; 86
     122:	68 46       	sbci	r22, 0x68	; 104
     124:	68 46       	sbci	r22, 0x68	; 104
     126:	48 45       	sbci	r20, 0x58	; 88
     128:	68 46       	sbci	r22, 0x68	; 104
     12a:	68 46       	sbci	r22, 0x68	; 104
     12c:	68 46       	sbci	r22, 0x68	; 104
     12e:	68 46       	sbci	r22, 0x68	; 104
     130:	68 46       	sbci	r22, 0x68	; 104
     132:	68 46       	sbci	r22, 0x68	; 104
     134:	68 46       	sbci	r22, 0x68	; 104
     136:	68 46       	sbci	r22, 0x68	; 104
     138:	68 46       	sbci	r22, 0x68	; 104
     13a:	27 45       	sbci	r18, 0x57	; 87
     13c:	b6 45       	sbci	r27, 0x56	; 86
     13e:	1a 45       	sbci	r17, 0x5A	; 90
     140:	82 45       	sbci	r24, 0x52	; 82
     142:	66 45       	sbci	r22, 0x56	; 86
     144:	68 46       	sbci	r22, 0x68	; 104
     146:	68 46       	sbci	r22, 0x68	; 104
     148:	68 46       	sbci	r22, 0x68	; 104
     14a:	68 46       	sbci	r22, 0x68	; 104
     14c:	68 46       	sbci	r22, 0x68	; 104
     14e:	68 46       	sbci	r22, 0x68	; 104
     150:	68 46       	sbci	r22, 0x68	; 104
     152:	68 46       	sbci	r22, 0x68	; 104
     154:	34 45       	sbci	r19, 0x54	; 84
     156:	48 45       	sbci	r20, 0x58	; 88
     158:	68 46       	sbci	r22, 0x68	; 104
     15a:	68 46       	sbci	r22, 0x68	; 104
     15c:	b6 45       	sbci	r27, 0x56	; 86
     15e:	68 46       	sbci	r22, 0x68	; 104
     160:	16 45       	sbci	r17, 0x56	; 86
     162:	68 46       	sbci	r22, 0x68	; 104
     164:	68 46       	sbci	r22, 0x68	; 104
     166:	48 45       	sbci	r20, 0x58	; 88
     168:	47 69       	ori	r20, 0x97	; 151
     16a:	51 69       	ori	r21, 0x91	; 145
     16c:	59 69       	ori	r21, 0x99	; 153
     16e:	5c 69       	ori	r21, 0x9C	; 156
     170:	5f 69       	ori	r21, 0x9F	; 159
     172:	62 69       	ori	r22, 0x92	; 146
     174:	65 69       	ori	r22, 0x95	; 149
     176:	68 69       	ori	r22, 0x98	; 152
     178:	6b 69       	ori	r22, 0x9B	; 155
     17a:	44 87       	std	Z+12, r20	; 0x0c
     17c:	4c 87       	std	Y+12, r20	; 0x0c
     17e:	7d 87       	std	Y+13, r23	; 0x0d
     180:	96 87       	std	Z+14, r25	; 0x0e
     182:	b2 87       	std	Z+10, r27	; 0x0a
     184:	bf 87       	std	Y+15, r27	; 0x0f
     186:	db 87       	std	Y+11, r29	; 0x0b
     188:	05 88       	ldd	r0, Z+21	; 0x15
     18a:	e8 87       	std	Y+8, r30	; 0x08
     18c:	42 9f       	mul	r20, r18
     18e:	12 a0       	ldd	r1, Z+34	; 0x22
     190:	4e a0       	ldd	r4, Y+38	; 0x26
     192:	81 a0       	ldd	r8, Z+33	; 0x21
     194:	91 a0       	ldd	r9, Z+33	; 0x21
     196:	ae a0       	ldd	r10, Y+38	; 0x26
     198:	0e a1       	ldd	r16, Y+38	; 0x26
     19a:	f9 a1       	ldd	r31, Y+33	; 0x21
     19c:	f9 a1       	ldd	r31, Y+33	; 0x21
     19e:	f9 a1       	ldd	r31, Y+33	; 0x21
     1a0:	42 a1       	ldd	r20, Z+34	; 0x22
     1a2:	6e a1       	ldd	r22, Y+38	; 0x26
     1a4:	b1 a1       	ldd	r27, Z+33	; 0x21
     1a6:	c8 a1       	ldd	r28, Y+32	; 0x20
     1a8:	db 9f       	mul	r29, r27
     1aa:	ee 9f       	mul	r30, r30
     1ac:	7f bd       	out	0x2f, r23	; 47
     1ae:	3e bd       	out	0x2e, r19	; 46
     1b0:	3e bd       	out	0x2e, r19	; 46
     1b2:	3e bd       	out	0x2e, r19	; 46
     1b4:	3e bd       	out	0x2e, r19	; 46
     1b6:	02 bd       	out	0x22, r16	; 34
     1b8:	09 bd       	out	0x29, r16	; 41
     1ba:	10 bd       	out	0x20, r17	; 32
     1bc:	20 bd       	out	0x20, r18	; 32
     1be:	2e bd       	out	0x2e, r18	; 46
     1c0:	27 bd       	out	0x27, r18	; 39

000001c2 <__trampolines_end>:
     1c2:	63 73       	andi	r22, 0x33	; 51
     1c4:	5f 64       	ori	r21, 0x4F	; 79
     1c6:	69 73       	andi	r22, 0x39	; 57
     1c8:	61 62       	ori	r22, 0x21	; 33
     1ca:	6c 65       	ori	r22, 0x5C	; 92
     1cc:	20 77       	andi	r18, 0x70	; 112
     1ce:	61 73       	andi	r22, 0x31	; 49
     1d0:	3a 20       	and	r3, r10
     1d2:	25 64       	ori	r18, 0x45	; 69
     1d4:	2c 20       	and	r2, r12
     1d6:	77 61       	ori	r23, 0x17	; 23
     1d8:	6e 74       	andi	r22, 0x4E	; 78
     1da:	3a 20       	and	r3, r10
     1dc:	25 64       	ori	r18, 0x45	; 69
     1de:	0a 00       	.word	0x000a	; ????

000001e0 <__c.3617>:
     1e0:	63 73 5f 65 6e 61 62 6c 65 20 77 61 73 3a 20 25     cs_enable was: %
     1f0:	64 2c 20 77 61 6e 74 3a 20 25 64 0a 00              d, want: %d..

000001fd <__c.3648>:
     1fd:	73 61 66 65 66 72 65 65 3a 20 46 52 45 45 20 45     safefree: FREE E
     20d:	52 52 4f 52 20 28 25 75 29 2c 20 74 6f 70 3a 28     RROR (%u), top:(
     21d:	25 75 29 0a 00                                      %u)..

00000222 <__c.3639>:
     222:	73 61 66 65 6d 61 6c 6c 6f 63 28 25 64 29 20 66     safemalloc(%d) f
     232:	61 69 6c 65 64 21 0a 00                             ailed!..

0000023a <__c.3633>:
     23a:	73 61 66 65 63 61 6c 6c 6f 63 28 25 64 2c 25 64     safecalloc(%d,%d
     24a:	29 20 66 61 69 6c 65 64 21 0a 00                    ) failed!..

00000255 <__c.3618>:
     255:	20 20 5f 5f 62 72 6b 76 61 6c 3a 20 20 20 20 25       __brkval:    %
     265:	35 75 0a 00                                         5u..

00000269 <__c.3616>:
     269:	20 20 4d 61 6c 6c 6f 63 20 73 74 61 72 74 20 25       Malloc start %
     279:	35 75 20 20 65 6e 64 3a 20 25 35 75 0a 00           5u  end: %5u..

00000287 <__c.3614>:
     287:	20 20 48 65 61 70 3a 20 73 74 61 72 74 3a 20 25       Heap: start: %
     297:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000002a5 <__c.3612>:
     2a5:	20 20 44 61 74 61 20 20 73 74 61 72 74 3a 20 25       Data  start: %
     2b5:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000002c3 <__c.3610>:
     2c3:	20 20 42 53 53 20 20 20 73 74 61 72 74 3a 20 25       BSS   start: %
     2d3:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000002e1 <__c.3608>:
     2e1:	20 20 53 74 61 63 6b 20 46 72 65 65 3a 20 20 25       Stack Free:  %
     2f1:	75 0a 00                                            u..

000002f4 <__c.3606>:
     2f4:	20 20 53 74 61 63 6b 20 54 6f 70 3a 20 20 20 25       Stack Top:   %
     304:	75 0a 00                                            u..

00000307 <__c.3604>:
     307:	46 72 65 65 20 52 61 6d 3a 25 75 0a 00              Free Ram:%u..

00000314 <__c.3602>:
     314:	53 50 49 30 5f 4d 6f 64 65 3a 20 49 6e 76 61 6c     SPI0_Mode: Inval
     324:	69 64 20 6d 6f 64 65 28 25 64 29 0a 00              id mode(%d)..

00000331 <__c.3721>:
     331:	0a 00                                               ..

00000333 <__c.3719>:
     333:	74 61 73 6b 3a 20 25 64 0a 00                       task: %d..

0000033d <__c.3717>:
     33d:	69 32 63 5f 74 61 73 6b 2e 65 72 72 6f 72 3a 20     i2c_task.error: 
     34d:	25 64 0a 00                                         %d..

00000351 <__c.3715>:
     351:	69 32 63 5f 74 61 73 6b 2e 64 6f 6e 65 3a 20 25     i2c_task.done: %
     361:	64 0a 00                                            d..

00000364 <__c.3710>:
     364:	0a 00                                               ..

00000366 <__c.3708>:
     366:	20 20 54 57 5f 4d 54 5f 44 41 54 41 5f 4e 41 43       TW_MT_DATA_NAC
     376:	4b 0a 00                                            K..

00000379 <__c.3706>:
     379:	20 20 54 57 5f 4d 54 5f 53 4c 41 5f 4e 41 43 4b       TW_MT_SLA_NACK
     389:	0a 00                                               ..

0000038b <__c.3704>:
     38b:	20 20 54 57 5f 4d 52 5f 53 4c 41 5f 4e 41 43 4b       TW_MR_SLA_NACK
     39b:	0a 00                                               ..

0000039d <__c.3702>:
     39d:	20 20 4f 50 5f 45 52 52 4f 52 0a 00                   OP_ERROR..

000003a9 <__c.3700>:
     3a9:	20 20 4f 50 5f 4c 45 4e 0a 00                         OP_LEN..

000003b3 <__c.3698>:
     3b3:	20 20 4f 50 5f 54 49 4d 45 4f 55 54 0a 00             OP_TIMEOUT..

000003c1 <__c.3696>:
     3c1:	20 20 25 73 0a 00                                     %s..

000003c7 <__c.3646>:
     3c7:	69 32 63 5f 74 69 6d 65 72 20 69 6e 69 74 20 66     i2c_timer init f
     3d7:	61 69 6c 65 64 0a 00                                ailed..

000003de <__c.3640>:
     3de:	69 32 63 5f 69 6e 69 74 20 70 72 65 73 63 61 6c     i2c_init prescal
     3ee:	65 20 6f 76 65 72 66 6c 6f 77 0a 00                 e overflow..

000003fa <__c.3597>:
     3fa:	49 32 43 20 6f 70 5b 25 64 5d 2d 3e 6c 65 6e 20     I2C op[%d]->len 
     40a:	3d 3d 20 30 0a 00                                   == 0..

00000410 <__c.3595>:
     410:	49 32 43 20 6f 70 5b 25 64 5d 2d 3e 62 75 66 20     I2C op[%d]->buf 
     420:	3d 3d 20 4e 55 4c 4c 0a 00                          == NULL..

00000429 <__c.3593>:
     429:	49 32 43 20 6f 70 5b 49 4e 44 45 58 20 25 64 20     I2C op[INDEX %d 
     439:	3e 3d 20 25 64 5d 0a 00                             >= %d]..

00000441 <__c.3643>:
     441:	72 74 63 5f 69 6e 69 74 20 20 77 72 69 74 65 20     rtc_init  write 
     451:	65 70 6f 63 68 20 66 61 69 6c 65 64 0a 00           epoch failed..

0000045f <__c.3633>:
     45f:	72 74 63 5f 72 75 6e 20 77 72 69 74 65 20 65 72     rtc_run write er
     46f:	72 6f 72 0a 00                                      ror..

00000474 <__c.3631>:
     474:	72 74 63 5f 72 75 6e 20 72 65 61 64 20 65 72 72     rtc_run read err
     484:	6f 72 0a 00                                         or..

00000488 <__c.3625>:
     488:	72 74 63 5f 72 65 61 64 20 65 72 72 6f 72 0a 00     rtc_read error..

00000498 <__c.3619>:
     498:	72 74 63 5f 77 72 69 74 65 20 65 72 72 6f 72 0a     rtc_write error.
	...

000004a9 <__c.3611>:
     4a9:	69 32 63 5f 72 74 63 5f 72 65 61 64 20 64 61 74     i2c_rtc_read dat
     4b9:	61 20 65 72 72 6f 72 0a 00                          a error..

000004c2 <__c.3609>:
     4c2:	69 32 63 5f 72 74 63 5f 72 65 61 64 20 61 64 64     i2c_rtc_read add
     4d2:	72 65 73 73 20 65 72 72 6f 72 0a 00                 ress error..

000004de <__c.3601>:
     4de:	69 32 63 5f 72 74 63 5f 77 72 69 74 65 20 64 61     i2c_rtc_write da
     4ee:	74 61 20 65 72 72 6f 72 0a 00                       ta error..

000004f8 <__c.3629>:
     4f8:	25 73 20 65 78 70 65 63 74 65 64 20 25 64 20 61     %s expected %d a
     508:	72 67 75 6d 65 6e 74 73 20 6f 6e 6c 79 20 67 6f     rguments only go
     518:	74 20 25 64 0a 00                                   t %d..

0000051e <__c.3586>:
     51e:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     52e:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

0000053e <__c.3665>:
     53e:	54 69 6d 65 72 73 20 65 6e 61 62 6c 65 64 0a 00     Timers enabled..

0000054e <__c.3663>:
     54e:	43 6c 6f 63 6b 20 49 6e 73 74 61 6c 6c 65 64 0a     Clock Installed.
	...

0000055f <__c.3661>:
     55f:	43 6c 6f 63 6b 20 74 61 73 6b 20 69 6e 69 74 20     Clock task init 
     56f:	66 61 69 6c 65 64 0a 00                             failed..

00000577 <__c.3659>:
     577:	43 6c 6f 63 6b 20 49 6e 69 74 0a 00                 Clock Init..

00000583 <__c.3657>:
     583:	54 69 6d 65 72 73 20 63 6f 6e 66 69 67 75 72 65     Timers configure
     593:	64 0a 00                                            d..

00000596 <__c.3655>:
     596:	54 69 6d 65 72 73 20 69 6e 69 74 20 63 61 6c 6c     Timers init call
     5a6:	65 64 0a 00                                         ed..

000005aa <__c.3635>:
     5aa:	5b 54 69 6d 65 3a 25 73 5d 0a 00                    [Time:%s]..

000005b5 <__c.3633>:
     5b5:	5b 25 73 20 54 69 6d 65 3a 25 73 5d 0a 00           [%s Time:%s]..

000005c3 <__c.3619>:
     5c3:	25 6c 64 2e 25 30 39 6c 64 00                       %ld.%09ld.

000005cd <__c.3599>:
     5cd:	73 65 74 5f 74 69 6d 65 72 73 3a 20 4e 6f 20 6d     set_timers: No m
     5dd:	6f 72 65 20 74 69 6d 65 72 73 21 0a 00              ore timers!..

000005ea <__c.3874>:
     5ea:	63 6c 6b 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     clk time:    %s.
	...

000005fb <__c.3872>:
     5fb:	63 6c 6b 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     clk seconds: %lu
     60b:	0a 00                                               ..

0000060d <__c.3870>:
     60d:	52 54 43 20 72 65 61 64 20 66 61 69 6c 65 64 0a     RTC read failed.
	...

0000061e <__c.3868>:
     61e:	72 74 63 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     rtc time:    %s.
	...

0000062f <__c.3866>:
     62f:	72 74 63 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     rtc seconds: %lu
     63f:	0a 00                                               ..

00000641 <__c.3859>:
     641:	75 73 65 20 73 65 74 64 61 74 65 20 63 6f 6d 6d     use setdate comm
     651:	61 6e 64 20 74 6f 20 63 68 61 6e 67 65 20 74 69     and to change ti
     661:	6d 65 0a 00                                         me..

00000665 <__c.3857>:
     665:	72 74 63 20 72 65 61 64 20 65 72 72 6f 72 61 66     rtc read erroraf
     675:	74 65 72 20 69 6e 69 74 0a 00                       ter init..

0000067f <__c.3855>:
     67f:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     68f:	61 69 6c 65 64 0a 00                                ailed..

00000696 <__c.3853>:
     696:	61 74 74 65 6d 70 74 69 6e 67 20 72 74 63 20 69     attempting rtc i
     6a6:	6e 69 74 0a 00                                      nit..

000006ab <__c.3851>:
     6ab:	72 74 63 20 75 6e 69 6e 69 74 69 6c 69 7a 65 64     rtc uninitilized
     6bb:	0a 00                                               ..

000006bd <__c.3805>:
     6bd:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     6cd:	61 69 6c 65 64 0a 00                                ailed..

000006d4 <__c.3803>:
     6d4:	69 6e 76 61 6c 69 64 20 6d 69 6e 3a 20 25 64 0a     invalid min: %d.
	...

000006e5 <__c.3801>:
     6e5:	69 6e 76 61 6c 69 64 20 68 6f 75 72 3a 20 25 64     invalid hour: %d
     6f5:	0a 00                                               ..

000006f7 <__c.3799>:
     6f7:	69 6e 76 61 6c 69 64 20 64 61 79 3a 20 25 64 0a     invalid day: %d.
	...

00000708 <__c.3797>:
     708:	69 6e 76 61 6c 69 64 20 6d 6f 6e 3a 20 25 64 0a     invalid mon: %d.
	...

00000719 <__c.3795>:
     719:	69 6e 76 61 6c 69 64 20 79 65 61 72 3a 20 25 64     invalid year: %d
     729:	0a 00                                               ..

0000072b <__c.3774>:
     72b:	45 6e 74 65 72 20 64 61 74 65 20 59 59 59 59 20     Enter date YYYY 
     73b:	4d 4d 20 44 44 20 48 48 3a 4d 4d 3a 53 53 20 3e     MM DD HH:MM:SS >
	...

0000074c <__c.3649>:
     74c:	25 73 20 25 73 20 25 32 64 20 25 30 32 64 3a 25     %s %s %2d %02d:%
     75c:	30 32 64 3a 25 30 32 64 20 25 34 64 00              02d:%02d %4d.

00000769 <__c.3617>:
     769:	73 65 6c 65 63 74 20 66 61 69 6c 65 64 21 0a 00     select failed!..

00000779 <__c.3651>:
     779:	45 4e 44 20 4d 4d 43 20 49 4e 49 54 0a 00           END MMC INIT..

00000787 <__c.3649>:
     787:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 3a 20     MMC Block Size: 
     797:	25 6c 64 0a 00                                      %ld..

0000079c <__c.3647>:
     79c:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 20 2d     MMC Block Size -
     7ac:	20 72 65 61 64 20 66 61 69 6c 65 64 0a 00            read failed..

000007ba <__c.3644>:
     7ba:	2c 20 43 6f 64 65 20 70 61 67 65 3a 20 25 75 0a     , Code page: %u.
	...

000007cb <__c.3642>:
     7cb:	4c 46 4e 20 45 6e 61 62 6c 65 64 00                 LFN Enabled.

000007d7 <__c.3640>:
     7d7:	4d 4d 43 20 43 61 72 64 20 49 6e 73 65 72 74 65     MMC Card Inserte
     7e7:	64 0a 00                                            d..

000007ea <__c.3638>:
     7ea:	2a 2a 2a 20 4d 4d 43 20 43 61 72 64 20 4e 4f 54     *** MMC Card NOT
     7fa:	20 49 6e 73 65 72 74 65 64 21 20 2a 2a 2a 0a 00      Inserted! ***..

0000080a <__c.3636>:
     80a:	53 54 41 52 54 20 4d 4d 43 20 49 4e 49 54 0a 00     START MMC INIT..

0000081a <__c.3622>:
     81a:	4d 4d 43 20 54 49 4d 45 4f 55 54 0a 00              MMC TIMEOUT..

00000827 <__c.3594>:
     827:	4d 4d 43 20 43 6c 6f 63 6b 20 74 61 73 6b 20 69     MMC Clock task i
     837:	6e 69 74 20 66 61 69 6c 65 64 0a 00                 nit failed..

00000843 <__c.3672>:
     843:	0a 00                                               ..

00000845 <__c.3670>:
     845:	25 73 20 25 75 2f 25 30 32 75 2f 25 30 32 75 20     %s %u/%02u/%02u 
     855:	25 30 32 75 3a 25 30 32 75 20 25 39 6c 75 20 25     %02u:%02u %9lu %
     865:	73 00                                               s.

00000867 <__c.3668>:
     867:	66 61 74 66 73 5f 66 69 6c 69 6e 66 6f 5f 6c 69     fatfs_filinfo_li
     877:	73 74 3a 20 65 6d 70 74 79 0a 00                    st: empty..

00000882 <__c.3662>:
     882:	25 75 20 66 69 6c 65 73 2c 20 25 6c 75 20 62 79     %u files, %lu by
     892:	74 65 73 2e 0a 25 75 20 66 6f 6c 64 65 72 73 2e     tes..%u folders.
     8a2:	0a 25 6c 75 20 4b 42 20 74 6f 74 61 6c 20 64 69     .%lu KB total di
     8b2:	73 6b 20 73 70 61 63 65 2e 0a 25 6c 75 20 4b 42     sk space..%lu KB
     8c2:	20 61 76 61 69 6c 61 62 6c 65 2e 0a 00               available...

000008cf <__c.3660>:
     8cf:	66 61 74 66 73 5f 73 74 61 74 75 73 20 66 61 74     fatfs_status fat
     8df:	66 73 5f 73 63 61 6e 5f 66 69 6c 65 73 20 66 61     fs_scan_files fa
     8ef:	69 6c 65 64 0a 00                                   iled..

000008f5 <__c.3658>:
     8f5:	56 6f 6c 75 6d 65 20 53 2f 4e 20 20 20 20 20 20     Volume S/N      
     905:	20 20 20 20 20 20 20 20 3d 20 25 30 34 58 2d 25             = %04X-%
     915:	30 34 58 0a 00                                      04X..

0000091a <__c.3656>:
     91a:	56 6f 6c 75 6d 65 20 6e 61 6d 65 20 20 20 20 20     Volume name     
     92a:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

00000938 <__c.3654>:
     938:	66 61 74 66 73 5f 73 74 61 74 75 73 20 66 5f 67     fatfs_status f_g
     948:	65 74 6c 61 62 65 6c 20 66 61 69 6c 65 64 0a 00     etlabel failed..

00000958 <__c.3652>:
     958:	44 61 74 61 20 73 74 61 72 74 20 28 6c 62 61 29     Data start (lba)
     968:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000977 <__c.3650>:
     977:	44 49 52 20 73 74 61 72 74 20 28 6c 62 61 2c 63     DIR start (lba,c
     987:	6c 75 73 74 6f 72 29 20 3d 20 25 6c 75 0a 00        lustor) = %lu..

00000996 <__c.3648>:
     996:	46 41 54 20 73 74 61 72 74 20 28 6c 62 61 29 20     FAT start (lba) 
     9a6:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

000009b5 <__c.3646>:
     9b5:	4e 75 6d 62 65 72 20 6f 66 20 63 6c 75 73 74 65     Number of cluste
     9c5:	72 73 20 20 20 20 20 20 3d 20 25 6c 75 0a 00        rs      = %lu..

000009d4 <__c.3644>:
     9d4:	53 65 63 74 6f 72 73 2f 46 41 54 20 20 20 20 20     Sectors/FAT     
     9e4:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

000009f3 <__c.3642>:
     9f3:	52 6f 6f 74 20 44 49 52 20 65 6e 74 72 69 65 73     Root DIR entries
     a03:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

00000a11 <__c.3640>:
     a11:	4e 75 6d 62 65 72 20 6f 66 20 46 41 54 73 20 20     Number of FATs  
     a21:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

00000a2f <__c.3638>:
     a2f:	42 79 74 65 73 2f 43 6c 75 73 74 65 72 20 20 20     Bytes/Cluster   
     a3f:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000a4e <__c.3636>:
     a4e:	46 41 54 20 74 79 70 65 20 20 20 20 20 20 20 20     FAT type        
     a5e:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

00000a6c <__c.3634>:
     a6c:	66 61 74 66 73 5f 73 74 61 74 75 73 20 66 5f 67     fatfs_status f_g
     a7c:	65 74 66 72 65 65 20 66 61 69 6c 65 64 0a 00        etfree failed..

00000a8b <__c.3632>:
     a8b:	66 61 74 66 73 20 73 74 61 74 75 73 3a 25 73 0a     fatfs status:%s.
	...

00000a9c <__c.3596>:
     a9c:	72 63 3d 25 75 0a 00                                rc=%u..

00000aa3 <__c.3628>:
     aa3:	2c 20 25 31 30 6c 75 4b 20 62 79 74 65 73 20 66     , %10luK bytes f
     ab3:	72 65 65 0a 00                                      ree..

00000ab8 <__c.3626>:
     ab8:	25 34 75 20 46 69 6c 65 28 73 29 2c 25 31 30 6c     %4u File(s),%10l
     ac8:	75 20 62 79 74 65 73 20 74 6f 74 61 6c 0a 25 34     u bytes total.%4
     ad8:	75 20 44 69 72 28 73 29 00                          u Dir(s).

00000ae1 <__c.3622>:
     ae1:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000aef <__c.3609>:
     aef:	45 4e 44 20 4d 4d 43 20 54 45 53 54 0a 00           END MMC TEST..

00000afd <__c.3607>:
     afd:	4d 4d 43 20 44 69 72 65 63 74 6f 72 79 20 4c 69     MMC Directory Li
     b0d:	73 74 0a 00                                         st..

00000b11 <__c.3605>:
     b11:	53 54 41 52 54 20 4d 4d 43 20 54 45 53 54 0a 00     START MMC TEST..

00000b21 <__c.3587>:
     b21:	4e 6f 74 65 3a 20 66 61 74 66 73 20 74 65 73 74     Note: fatfs test
     b31:	73 20 4d 55 53 54 20 73 74 61 72 74 20 77 69 74     s MUST start wit
     b41:	68 20 22 66 61 74 66 73 22 20 6b 65 79 77 6f 72     h "fatfs" keywor
     b51:	64 0a 66 61 74 66 73 20 68 65 6c 70 0a 66 61 74     d.fatfs help.fat
     b61:	66 73 20 6d 6d 63 5f 74 65 73 74 0a 66 61 74 66     fs mmc_test.fatf
     b71:	73 20 6d 6d 63 5f 69 6e 69 74 0a 66 61 74 66 73     s mmc_init.fatfs
     b81:	20 6c 73 20 64 69 72 65 63 74 6f 72 79 0a 66 61      ls directory.fa
     b91:	74 66 73 20 73 74 61 74 75 73 0a 0a 00              tfs status...

00000b9e <__c.3919>:
     b9e:	25 73 0a 00                                         %s..

00000ba2 <__c.3917>:
     ba2:	25 73 3a 20 25 73 0a 00                             %s: %s..

00000baa <__c.3672>:
     baa:	53 65 65 6b 20 66 61 69 6c 65 64 00                 Seek failed.

00000bb6 <__c.3601>:
     bb6:	66 70 75 74 63 20 73 74 72 65 61 6d 2d 3e 70 75     fputc stream->pu
     bc6:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000bce <__c.3594>:
     bce:	66 67 65 74 63 20 73 74 72 65 61 6d 2d 3e 67 65     fgetc stream->ge
     bde:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000be6 <__c.3764>:
     be6:	46 69 6c 65 73 3a 20 25 64 0a 00                    Files: %d..

00000bf1 <__c.3760>:
     bf1:	6e 61 6d 65 3a 5b 25 73 5d 20 74 6f 6f 20 6c 6f     name:[%s] too lo
     c01:	6e 67 20 77 69 74 68 20 66 75 6c 6c 20 70 61 74     ng with full pat
     c11:	68 0a 00                                            h..

00000c14 <__c.3757>:
     c14:	6f 70 65 6e 64 69 72 20 66 61 69 6c 65 64 0a 00     opendir failed..

00000c24 <__c.3752>:
     c24:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000c32 <__c.3750>:
     c32:	6c 73 3a 20 63 61 6e 6e 6f 74 20 73 74 61 74 20     ls: cannot stat 
     c42:	5b 25 73 5d 0a 00                                   [%s]..

00000c48 <__c.3748>:
     c48:	6c 73 3a 20 43 61 6e 27 74 20 67 65 74 20 63 75     ls: Can't get cu
     c58:	72 72 65 6e 74 20 64 69 72 65 63 74 6f 72 79 0a     rrent directory.
	...

00000c69 <__c.3735>:
     c69:	25 73 20 6e 6f 6e 65 20 6e 6f 6e 65 20 25 31 32     %s none none %12
     c79:	6c 64 20 25 73 20 25 73 0a 00                       ld %s %s..

00000c83 <__c.3730>:
     c83:	25 73 0a 00                                         %s..

00000c87 <__c.3728>:
     c87:	63 61 6e 20 6e 6f 74 20 73 74 61 74 3a 20 25 73     can not stat: %s
     c97:	0a 00                                               ..

00000c99 <__c.3716>:
     c99:	0d 00                                               ..

00000c9b <__c.3714>:
     c9b:	4d 6f 72 65 2e 2e 00                                More...

00000ca2 <__c.3704>:
     ca2:	25 6c 75 20 62 79 74 65 73 20 63 6f 70 69 65 64     %lu bytes copied
     cb2:	2e 0a 00                                            ...

00000cb5 <__c.3700>:
     cb5:	43 6f 70 69 65 64 3a 20 25 30 38 6c 64 0d 00        Copied: %08ld..

00000cc4 <__c.3697>:
     cc4:	57 72 69 74 65 20 65 72 72 6f 72 0a 00              Write error..

00000cd1 <__c.3695>:
     cd1:	0a 43 6f 70 79 69 6e 67 2e 2e 2e 0a 00              .Copying.....

00000cde <__c.3693>:
     cde:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000cee <__c.3691>:
     cee:	43 72 65 61 74 69 6e 67 20 25 73 0a 00              Creating %s..

00000cfb <__c.3689>:
     cfb:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000d0b <__c.3687>:
     d0b:	4f 70 65 6e 69 6e 67 20 25 73 0a 00                 Opening %s..

00000d17 <__c.3676>:
     d17:	25 6c 64 20 62 79 74 65 73 0a 00                    %ld bytes..

00000d22 <__c.3674>:
     d22:	0a 00                                               ..

00000d24 <__c.3669>:
     d24:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000d34 <__c.3659>:
     d34:	72 6d 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     rmdir %s failed.
	...

00000d45 <__c.3657>:
     d45:	72 6d 20 25 73 20 66 61 69 6c 65 64 0a 00           rm %s failed..

00000d53 <__c.3655>:
     d53:	72 65 6e 61 6d 65 20 25 73 20 74 6f 20 25 73 0a     rename %s to %s.
	...

00000d64 <__c.3653>:
     d64:	25 73 0a 00                                         %s..

00000d68 <__c.3651>:
     d68:	70 77 64 20 46 41 49 4c 45 44 0a 00                 pwd FAILED..

00000d74 <__c.3647>:
     d74:	6d 6b 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     mkdir %s failed.
	...

00000d85 <__c.3640>:
     d85:	6c 73 3a 20 6e 75 6c 6c 20 61 72 67 75 6d 65 6e     ls: null argumen
     d95:	74 20 23 20 25 64 0a 00                             t # %d..

00000d9d <__c.3636>:
     d9d:	63 68 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     chdir %s failed.
	...

00000dae <__c.3620>:
     dae:	4e 6f 74 65 3a 20 70 6f 73 69 78 20 70 72 65 66     Note: posix pref
     dbe:	69 78 20 69 73 20 6f 70 74 69 6f 6e 61 6c 0a 70     ix is optional.p
     dce:	6f 73 69 78 20 63 61 74 20 66 69 6c 65 20 5b 2d     osix cat file [-
     dde:	70 5d 0a 70 6f 73 69 78 20 63 64 20 64 69 72 0a     p].posix cd dir.
     dee:	70 6f 73 69 78 20 63 6f 70 79 20 66 69 6c 65 31     posix copy file1
     dfe:	20 66 69 6c 65 32 0a 70 6f 73 69 78 20 6c 73 20      file2.posix ls 
     e0e:	64 69 72 20 5b 2d 6c 5d 0a 70 6f 73 69 78 20 6d     dir [-l].posix m
     e1e:	6b 64 69 72 20 64 69 72 0a 70 6f 73 69 78 20 70     kdir dir.posix p
     e2e:	61 67 65 20 4e 4e 0a 70 6f 73 69 78 20 70 77 64     age NN.posix pwd
     e3e:	0a 70 6f 73 69 78 20 72 6d 20 66 69 6c 65 0a 70     .posix rm file.p
     e4e:	6f 73 69 78 20 72 6d 64 69 72 20 64 69 72 0a 70     osix rmdir dir.p
     e5e:	6f 73 69 78 20 72 65 6e 61 6d 65 20 6f 6c 64 20     osix rename old 
     e6e:	6e 65 77 0a 0a 00                                   new...

00000e74 <__c.3618>:
     e74:	70 6f 73 69 78 20 68 65 6c 70 0a 00                 posix help..

00000e80 <__c.3807>:
     e80:	43 6c 6f 73 65 20 65 72 72 6f 72 3a 20 00           Close error: .

00000e8e <__c.3801>:
     e8e:	53 65 65 6b 20 65 72 72 6f 72 3a 20 00              Seek error: .

00000e9b <__c.3794>:
     e9b:	57 72 69 74 65 20 65 72 72 6f 72 3a 20 00           Write error: .

00000ea9 <__c.3785>:
     ea9:	52 65 61 64 20 65 72 72 6f 72 3a 20 00              Read error: .

00000eb6 <__c.3776>:
     eb6:	4f 70 65 6e 20 65 72 72 6f 72 3a 5b 25 73 5d 20     Open error:[%s] 
	...

00000ec7 <__c.3762>:
     ec7:	5b 50 50 52 20 44 49 53 41 42 4c 45 20 41 4c 4c     [PPR DISABLE ALL
     ed7:	5d 0a 00                                            ]..

00000eda <__c.3744>:
     eda:	47 50 49 42 20 43 6c 6f 63 6b 20 74 61 73 6b 20     GPIB Clock task 
     eea:	69 6e 69 74 20 66 61 69 6c 65 64 0a 00              init failed..

00000ef7 <__c.4418>:
     ef7:	5b 67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 20     [gpib_write_str 
     f07:	73 65 6e 74 28 25 64 29 20 65 78 70 65 63 74 65     sent(%d) expecte
     f17:	64 28 25 64 29 5d 0a 00                             d(%d)]..

00000f1f <__c.4410>:
     f1f:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
     f2f:	20 44 41 56 3d 3d 31 3e 0a 00                        DAV==1>..

00000f39 <__c.4405>:
     f39:	3c 67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 20     <gpib_write_str 
     f49:	74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67 20     timeout waiting 
     f59:	66 6f 72 20 41 54 4e 20 3d 20 31 3e 0a 00           for ATN = 1>..

00000f67 <__c.4403>:
     f67:	67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 3a 20     gpib_write_str: 
     f77:	73 69 7a 65 20 3d 20 30 0a 00                       size = 0..

00000f81 <__c.4393>:
     f81:	5b 67 70 69 62 5f 72 65 61 64 5f 73 74 72 20 72     [gpib_read_str r
     f91:	65 61 64 28 25 64 29 20 65 78 70 65 63 74 65 64     ead(%d) expected
     fa1:	28 25 64 29 5d 0a 00                                (%d)]..

00000fa8 <__c.4389>:
     fa8:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 28 69 6e     gpib_read_str(in
     fb8:	64 3a 25 64 29 3a 20 41 54 4e 20 25 30 32 58 48     d:%d): ATN %02XH
     fc8:	20 75 6e 65 78 70 65 63 74 65 64 0a 00               unexpected..

00000fd5 <__c.4386>:
     fd5:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 3a 20 73     gpib_read_str: s
     fe5:	69 7a 65 20 3d 20 30 0a 00                          ize = 0..

00000fee <__c.4370>:
     fee:	20 4d 53 41 20 25 30 32 58 68 00                     MSA %02Xh.

00000ff9 <__c.4368>:
     ff9:	20 4d 54 41 20 25 30 32 58 68 00                     MTA %02Xh.

00001004 <__c.4366>:
    1004:	20 4d 4c 41 20 25 30 32 58 68 00                     MLA %02Xh.

0000100f <__c.4362>:
    100f:	20 20 20 20 20 00                                        .

00001015 <__c.4360>:
    1015:	25 30 32 58 20 25 63 20 00                          %02X %c .

0000101e <__c.4334>:
    101e:	67 70 69 62 5f 72 65 61 64 5f 62 79 74 65 3a 20     gpib_read_byte: 
    102e:	49 46 43 20 73 74 61 74 65 3d 25 64 0a 00           IFC state=%d..

0000103c <__c.4318>:
    103c:	3c 47 50 49 42 20 54 58 20 54 49 4d 45 4f 55 54     <GPIB TX TIMEOUT
    104c:	3e 0a 00                                            >..

0000104f <__c.4313>:
    104f:	3c 67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65     <gpib_write_byte
    105f:	20 74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67      timeout waiting
    106f:	20 66 6f 72 20 4e 44 41 43 3d 3d 31 3e 0a 00         for NDAC==1>..

0000107e <__c.4309>:
    107e:	3c 67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65     <gpib_write_byte
    108e:	20 74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67      timeout waiting
    109e:	20 66 6f 72 20 4e 52 46 44 3d 3d 31 20 26 26 20      for NRFD==1 && 
    10ae:	4e 44 41 43 20 3d 3d 20 30 3e 0a 00                 NDAC == 0>..

000010ba <__c.4305>:
    10ba:	3c 67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65     <gpib_write_byte
    10ca:	20 74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67      timeout waiting
    10da:	20 66 6f 72 20 4e 52 46 44 3d 3d 31 20 26 26 20      for NRFD==1 && 
    10ea:	4e 44 41 43 20 3d 3d 20 30 3e 0a 00                 NDAC == 0>..

000010f6 <__c.4303>:
    10f6:	67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65 3a     gpib_write_byte:
    1106:	20 41 54 4e 20 3d 20 30 20 77 68 69 6c 65 20 77      ATN = 0 while w
    1116:	61 69 74 69 6e 67 20 66 6f 72 20 4e 52 46 44 20     aiting for NRFD 
    1126:	4c 4f 57 20 73 74 61 74 65 20 3d 25 64 0a 00        LOW state =%d..

00001135 <__c.4298>:
    1135:	67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65 3a     gpib_write_byte:
    1145:	20 49 46 43 20 73 74 61 74 65 3d 25 64 0a 00         IFC state=%d..

00001154 <__c.4282>:
    1154:	67 70 69 62 5f 75 6e 72 65 61 64 3a 20 65 72 72     gpib_unread: err
    1164:	6f 72 2c 20 63 61 6e 20 6f 6e 6c 79 20 62 65 20     or, can only be 
    1174:	63 61 6c 6c 65 64 20 6f 6e 63 65 21 0a 00           called once!..

00001182 <__c.4266>:
    1182:	5b 44 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [DPPR bit:%d, ma
    1192:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

0000119d <__c.4264>:
    119d:	67 70 69 62 5f 64 69 73 61 62 6c 65 5f 50 50 52     gpib_disable_PPR
    11ad:	3a 20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20     : bit %d out of 
    11bd:	72 61 6e 67 65 0a 00                                range..

000011c4 <__c.4259>:
    11c4:	5b 45 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [EPPR bit:%d, ma
    11d4:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

000011df <__c.4257>:
    11df:	67 70 69 62 5f 65 6e 61 62 6c 65 5f 50 50 52 3a     gpib_enable_PPR:
    11ef:	20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20 72      bit %d out of r
    11ff:	61 6e 67 65 0a 00                                   ange..

00001205 <__c.4252>:
    1205:	5b 47 50 49 42 20 53 54 41 54 45 20 49 4e 49 54     [GPIB STATE INIT
    1215:	5d 0a 00                                            ]..

00001218 <__c.4240>:
    1218:	5b 47 50 49 42 20 42 55 53 5f 49 4e 49 54 5d 0a     [GPIB BUS_INIT].
	...

00001229 <__c.4417>:
    1229:	5b 50 52 49 4e 54 45 52 20 63 6c 6f 73 65 5d 0a     [PRINTER close].
	...

0000123a <__c.4412>:
    123a:	5b 53 41 20 25 30 32 58 48 2c 20 6c 69 73 74 65     [SA %02XH, liste
    124a:	6e 3a 25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30     n:%02XH, talk:%0
    125a:	32 58 48 5d 0a 00                                   2XH]..

00001260 <__c.4410>:
    1260:	5b 53 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [SA %02XH AMIGO]
    1270:	0a 00                                               ..

00001272 <__c.4408>:
    1272:	5b 53 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [SA %02XH SS80].
	...

00001283 <__c.4403>:
    1283:	5b 54 41 20 25 30 32 58 48 5d 0a 00                 [TA %02XH]..

0000128f <__c.4401>:
    128f:	5b 50 52 49 4e 54 45 52 20 4f 50 45 4e 5d 0a 00     [PRINTER OPEN]..

0000129f <__c.4399>:
    129f:	5b 54 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [TA %02XH PRINTE
    12af:	52 5d 0a 00                                         R]..

000012b3 <__c.4397>:
    12b3:	5b 54 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [TA %02XH AMIGO]
    12c3:	0a 00                                               ..

000012c5 <__c.4395>:
    12c5:	5b 54 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [TA %02XH SS80].
	...

000012d6 <__c.4393>:
    12d6:	5b 55 4e 54 5d 0a 00                                [UNT]..

000012dd <__c.4388>:
    12dd:	5b 4c 41 20 25 30 32 58 48 5d 0a 00                 [LA %02XH]..

000012e9 <__c.4386>:
    12e9:	5b 4c 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [LA %02XH PRINTE
    12f9:	52 5d 0a 00                                         R]..

000012fd <__c.4384>:
    12fd:	5b 4c 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [LA %02XH SS80].
	...

0000130e <__c.4382>:
    130e:	5b 4c 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [LA %02XH AMIGO]
    131e:	0a 00                                               ..

00001320 <__c.4380>:
    1320:	0a 00                                               ..

00001322 <__c.4378>:
    1322:	5b 55 4e 4c 5d 0a 00                                [UNL]..

00001329 <__c.4373>:
    1329:	5b 47 50 49 42 20 28 25 30 32 58 48 29 20 6e 6f     [GPIB (%02XH) no
    1339:	74 20 64 65 66 69 6e 65 64 20 54 4f 44 4f 5d 0a     t defined TODO].
	...

0000134a <__c.4371>:
    134a:	5b 44 43 4c 5d 0a 00                                [DCL]..

00001351 <__c.4369>:
    1351:	5b 53 44 43 20 41 4d 49 47 4f 5d 0a 00              [SDC AMIGO]..

0000135e <__c.4367>:
    135e:	5b 53 44 43 20 53 53 38 30 5d 0a 00                 [SDC SS80]..

0000136a <__c.4365>:
    136a:	5b 53 44 43 5d 0a 00                                [SDC]..

00001371 <__c.4363>:
    1371:	5b 53 50 44 5d 0a 00                                [SPD]..

00001378 <__c.4361>:
    1378:	5b 53 50 45 5d 0a 00                                [SPE]..

0000137f <__c.4359>:
    137f:	5b 50 50 55 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPU unsupported
    138f:	20 54 4f 44 4f 5d 0a 00                              TODO]..

00001397 <__c.4357>:
    1397:	5b 50 50 43 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPC unsupported
    13a7:	20 54 4f 44 4f 5d 0a 00                              TODO]..

000013af <__c.4352>:
    13af:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    13bf:	48 3d 25 30 34 58 48 5d 0a 00                       H=%04XH]..

000013c9 <__c.4350>:
    13c9:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    13d9:	48 3d 25 30 34 58 48 20 46 41 49 4c 45 44 5d 0a     H=%04XH FAILED].
	...

000013ea <__c.4323>:
    13ea:	3c 4d 45 44 49 41 20 4d 49 53 53 49 4e 47 3e 0a     <MEDIA MISSING>.
	...

000013fb <__c.4321>:
    13fb:	3c 49 4e 54 45 52 52 55 50 54 3e 0a 00              <INTERRUPT>..

00001408 <__c.4319>:
    1408:	3c 42 55 53 3e 0a 00                                <BUS>..

0000140f <__c.4317>:
    140f:	3c 54 49 4d 45 4f 55 54 3e 0a 00                    <TIMEOUT>..

0000141a <__c.4315>:
    141a:	3c 49 46 43 3e 0a 00                                <IFC>..

00001421 <__c.4310>:
    1421:	43 61 70 74 75 72 69 6e 67 20 43 6c 6f 73 65 64     Capturing Closed
    1431:	0a 00                                               ..

00001433 <__c.4308>:
    1433:	44 6f 6e 65 0a 00                                   Done..

00001439 <__c.4304>:
    1439:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

00001445 <__c.4302>:
    1445:	50 72 65 73 73 20 41 4e 59 20 6b 65 79 20 74 6f     Press ANY key to
    1455:	20 65 78 69 74 0a 00                                 exit..

0000145c <__c.4300>:
    145c:	46 55 4c 4c 20 47 50 49 42 20 42 55 53 20 68 61     FULL GPIB BUS ha
    146c:	6e 64 73 68 61 6b 65 20 6c 6f 67 67 69 6e 67 20     ndshake logging 
    147c:	72 65 71 75 65 73 74 65 64 0a 00                    requested..

00001487 <__c.4298>:
    1487:	43 61 70 74 75 72 69 6e 67 20 47 50 49 42 20 42     Capturing GPIB B
    1497:	55 53 20 74 6f 3a 25 73 0a 00                       US to:%s..

000014a1 <__c.4252>:
    14a1:	43 61 72 64 20 69 73 20 77 72 69 74 65 20 70 72     Card is write pr
    14b1:	6f 74 65 63 74 65 64 0a 00                          otected..

000014ba <__c.4250>:
    14ba:	25 73 20 6f 70 65 6e 20 66 61 69 6c 75 72 65 0a     %s open failure.
	...

000014cb <__c.4248>:
    14cb:	25 73 20 68 61 64 20 25 64 20 65 72 72 6f 72 73     %s had %d errors
    14db:	0a 00                                               ..

000014dd <__c.4443>:
    14dd:	64 65 62 75 67 3d 25 30 34 58 48 0a 00              debug=%04XH..

000014ea <__c.4435>:
    14ea:	4e 6f 74 65 3a 20 67 70 69 62 20 70 72 65 66 69     Note: gpib prefi
    14fa:	78 20 69 73 20 6f 70 74 69 6f 6e 61 6c 0a 67 70     x is optional.gp
    150a:	69 62 20 61 64 64 72 65 73 73 65 73 0a 20 20 20     ib addresses.   
    151a:	44 69 73 70 6c 61 79 20 61 6c 6c 20 64 65 76 69     Display all devi
    152a:	63 65 20 47 50 49 42 20 62 75 73 20 61 64 64 72     ce GPIB bus addr
    153a:	65 73 73 65 73 20 61 6e 64 20 50 50 52 20 76 61     esses and PPR va
    154a:	6c 75 65 73 0a 67 70 69 62 20 63 6f 6e 66 69 67     lues.gpib config
    155a:	20 5b 2d 76 5d 0a 20 20 20 44 69 73 70 6c 61 79      [-v].   Display
    156a:	20 63 75 72 72 65 6e 74 20 64 72 69 76 65 73 20      current drives 
    157a:	63 6f 6e 66 69 67 75 72 61 74 69 6f 6e 0a 20 20     configuration.  
    158a:	20 2d 76 20 56 65 72 62 6f 73 65 20 2d 20 73 68      -v Verbose - sh
    159a:	6f 77 20 66 75 6c 6c 20 64 65 74 61 69 6c 0a 67     ow full detail.g
    15aa:	70 69 62 20 64 65 62 75 67 20 4e 0a 20 20 20 64     pib debug N.   d
    15ba:	65 62 75 67 20 6d 65 73 73 61 67 65 20 72 65 70     ebug message rep
    15ca:	6f 72 74 69 6e 67 20 73 65 65 20 68 70 64 69 73     orting see hpdis
    15da:	6b 2e 63 66 67 20 66 6f 72 20 64 65 74 61 69 6c     k.cfg for detail
    15ea:	73 0a 67 70 69 62 20 65 6c 61 70 73 65 64 0a 67     s.gpib elapsed.g
    15fa:	70 69 62 20 65 6c 61 70 73 65 64 5f 72 65 73 65     pib elapsed_rese
    160a:	74 0a 67 70 69 62 20 69 66 63 0a 67 70 69 62 20     t.gpib ifc.gpib 
    161a:	70 6c 6f 74 20 66 69 6c 65 6e 61 6d 65 2e 74 78     plot filename.tx
    162a:	74 0a 67 70 69 62 20 70 6c 6f 74 5f 65 63 68 6f     t.gpib plot_echo
    163a:	0a 67 70 69 62 20 74 61 73 6b 0a 67 70 69 62 20     .gpib task.gpib 
    164a:	74 72 61 63 65 20 66 69 6c 65 6e 61 6d 65 2e 74     trace filename.t
    165a:	78 74 20 5b 42 55 53 5d 0a 20 20 20 44 69 73 70     xt [BUS].   Disp
    166a:	6c 61 79 20 61 63 74 69 76 69 74 79 20 6f 66 20     lay activity of 
    167a:	47 50 49 42 20 62 75 73 20 61 6e 64 20 6c 6f 67     GPIB bus and log
    168a:	20 69 74 0a 20 20 20 42 55 53 20 2d 20 69 6e 63      it.   BUS - inc
    169a:	6c 75 64 65 20 68 61 6e 64 73 68 61 6b 65 20 73     lude handshake s
    16aa:	74 61 74 65 73 0a 0a 0a 67 70 69 62 20 6d 6f 75     tates...gpib mou
    16ba:	6e 74 20 41 4d 49 47 4f 7c 53 53 38 30 20 6d 6f     nt AMIGO|SS80 mo
    16ca:	64 65 6c 20 61 64 64 72 65 73 73 20 66 69 6c 65     del address file
    16da:	0a 20 20 20 20 20 45 78 61 6d 70 6c 65 3a 20 67     .     Example: g
    16ea:	70 69 62 20 6d 6f 75 6e 74 20 39 31 32 31 20 20     pib mount 9121  
    16fa:	36 20 2f 61 6d 69 67 6f 36 2e 6c 69 66 0a 20 20     6 /amigo6.lif.  
    170a:	20 20 20 45 78 61 6d 70 6c 65 3a 20 67 70 69 62        Example: gpib
    171a:	20 6d 6f 75 6e 74 20 39 31 33 34 44 20 32 20 2f      mount 9134D 2 /
    172a:	61 6d 69 67 6f 32 2e 6c 69 66 0a 67 70 69 62 20     amigo2.lif.gpib 
    173a:	6d 6f 75 6e 74 20 50 52 49 4e 54 45 52 20 61 64     mount PRINTER ad
    174a:	64 72 65 73 73 0a 20 20 20 20 20 45 78 61 6d 70     dress.     Examp
    175a:	6c 65 3a 20 67 70 69 62 20 6d 6f 75 6e 74 20 50     le: gpib mount P
    176a:	52 49 4e 54 45 52 20 35 0a 67 70 69 62 20 75 6d     RINTER 5.gpib um
    177a:	6f 75 6e 74 20 61 64 64 72 65 73 73 20 20 20 20     ount address    
    178a:	20 45 78 61 6d 70 6c 65 3a 20 67 70 69 62 20 75      Example: gpib u
    179a:	6d 6f 75 6e 74 20 36 0a 00                          mount 6..

000017a3 <__c.4433>:
    17a3:	67 70 69 62 20 20 68 65 6c 70 0a 00                 gpib  help..

000017af <__c.4966>:
    17af:	0a 00                                               ..

000017b1 <__c.4961>:
    17b1:	4d 6f 75 6e 74 65 64 20 64 72 69 76 65 73 0a 00     Mounted drives..

000017c1 <__c.4956>:
    17c1:	50 52 49 4e 54 45 52 20 25 2d 38 73 20 25 32 64     PRINTER %-8s %2d
    17d1:	0a 00                                               ..

000017d3 <__c.4954>:
    17d3:	41 4d 49 47 4f 20 20 20 25 2d 38 73 20 25 32 64     AMIGO   %-8s %2d
    17e3:	20 25 73 0a 00                                       %s..

000017e8 <__c.4952>:
    17e8:	53 53 38 30 20 20 20 20 25 2d 38 73 20 25 32 64     SS80    %-8s %2d
    17f8:	20 25 73 0a 00                                       %s..

000017fd <__c.4944>:
    17fd:	45 78 70 65 63 74 65 64 20 41 4d 49 47 4f 20 6f     Expected AMIGO o
    180d:	72 20 53 53 38 30 20 5b 25 73 5d 0a 00              r SS80 [%s]..

0000181a <__c.4942>:
    181a:	43 6f 75 6c 64 20 6e 6f 74 20 61 6c 6c 6f 63 61     Could not alloca
    182a:	74 65 20 41 4d 49 47 4f 20 73 74 72 75 63 74 75     te AMIGO structu
    183a:	72 65 20 66 6f 72 20 25 73 0a 00                    re for %s..

00001845 <__c.4938>:
    1845:	43 6f 75 6c 64 20 6e 6f 74 20 61 6c 6c 6f 63 61     Could not alloca
    1855:	74 65 20 53 53 38 30 20 73 74 72 75 63 74 75 72     te SS80 structur
    1865:	65 20 66 6f 72 20 25 73 0a 00                       e for %s..

0000186f <__c.4934>:
    186f:	57 41 52 4e 49 4e 47 3a 20 6d 6f 64 65 6c 20 4e     WARNING: model N
    187f:	4f 54 20 66 6f 75 6e 64 20 69 6e 20 68 70 64 69     OT found in hpdi
    188f:	72 2e 69 6e 69 21 0a 00                             r.ini!..

00001897 <__c.4932>:
    1897:	43 6f 75 6c 64 20 6e 6f 74 20 61 6c 6c 6f 63 61     Could not alloca
    18a7:	74 65 20 50 52 49 4e 54 45 52 20 73 74 72 75 63     te PRINTER struc
    18b7:	74 75 72 65 0a 00                                   ture..

000018bd <__c.4921>:
    18bd:	75 6d 6f 75 6e 74 20 61 64 64 72 65 73 73 3a 5b     umount address:[
    18cd:	25 64 5d 20 4e 4f 54 20 66 6f 75 6e 64 0a 00        %d] NOT found..

000018dc <__c.4919>:
    18dc:	20 20 2d 20 61 64 64 72 65 73 73 20 69 73 20 74       - address is t
    18ec:	68 65 20 64 65 76 69 63 65 20 61 64 64 72 65 73     he device addres
    18fc:	73 0a 00                                            s..

000018ff <__c.4917>:
    18ff:	20 20 75 6d 6f 75 6e 74 20 61 64 64 72 65 73 73       umount address
    190f:	0a 00                                               ..

00001911 <__c.4915>:
    1911:	55 73 61 67 65 3a 0a 00                             Usage:..

00001919 <__c.4879>:
    1919:	20 20 20 20 6d 6f 75 6e 74 0a 00                        mount..

00001924 <__c.4877>:
    1924:	44 69 73 70 6c 61 79 69 6e 67 20 6d 6f 75 6e 74     Displaying mount
    1934:	65 64 20 64 72 69 76 65 73 0a 00                    ed drives..

0000193f <__c.4875>:
    193f:	0a 00                                               ..

00001941 <__c.4873>:
    1941:	20 20 20 20 6d 6f 75 6e 74 20 50 52 49 4e 54 45         mount PRINTE
    1951:	52 20 35 0a 00                                      R 5..

00001956 <__c.4871>:
    1956:	4d 6f 75 6e 74 69 6e 67 20 70 72 69 6e 74 65 72     Mounting printer
    1966:	0a 00                                               ..

00001968 <__c.4869>:
    1968:	0a 00                                               ..

0000196a <__c.4867>:
    196a:	20 20 20 20 6d 6f 75 6e 74 20 53 53 38 30 20 39         mount SS80 9
    197a:	31 33 34 44 20 33 20 73 73 38 30 2d 33 2e 6c 69     134D 3 ss80-3.li
    198a:	66 0a 00                                            f..

0000198d <__c.4865>:
    198d:	20 20 20 20 6d 6f 75 6e 74 20 41 4d 49 47 4f 20         mount AMIGO 
    199d:	39 31 32 31 20 32 20 61 6d 69 67 6f 2d 32 32 2e     9121 2 amigo-22.
    19ad:	6c 69 66 0a 00                                      lif..

000019b2 <__c.4863>:
    19b2:	4d 6f 75 6e 74 69 6e 67 20 64 72 69 76 65 73 0a     Mounting drives.
	...

000019c3 <__c.4861>:
    19c3:	55 73 61 67 65 3a 20 0a 00                          Usage: ..

000019cc <__c.4853>:
    19cc:	41 4d 49 47 4f 25 64 00                             AMIGO%d.

000019d4 <__c.4851>:
    19d4:	66 6f 72 6d 61 74 69 6e 67 20 25 73 20 25 6c 64     formating %s %ld
    19e4:	20 73 65 63 74 6f 72 73 0a 00                        sectors..

000019ee <__c.4849>:
    19ee:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    19fe:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    1a0e:	0a 00                                               ..

00001a10 <__c.4847>:
    1a10:	53 53 38 30 2d 25 64 00                             SS80-%d.

00001a18 <__c.4845>:
    1a18:	66 6f 72 6d 61 74 69 6e 67 20 25 73 20 25 6c 64     formating %s %ld
    1a28:	20 73 65 63 74 6f 72 73 0a 00                        sectors..

00001a32 <__c.4843>:
    1a32:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    1a42:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    1a52:	0a 00                                               ..

00001a54 <__c.4823>:
    1a54:	44 65 76 69 63 65 20 65 72 72 6f 72 73 20 2d 20     Device errors - 
    1a64:	72 65 6d 6f 76 69 6e 67 3a 20 00                    removing: .

00001a6f <__c.4821>:
    1a6f:	57 61 72 6e 69 6e 67 3a 20 25 73 20 42 59 54 45     Warning: %s BYTE
    1a7f:	53 5f 50 45 52 5f 53 45 43 54 4f 52 20 21 3d 20     S_PER_SECTOR != 
    1a8f:	32 35 36 2c 20 41 64 6a 75 73 74 69 6e 67 20 74     256, Adjusting t
    1a9f:	6f 20 32 35 36 0a 00                                o 256..

00001aa6 <__c.4819>:
    1aa6:	57 61 72 6e 69 6e 67 3a 20 25 73 20 42 59 54 45     Warning: %s BYTE
    1ab6:	53 5f 50 45 52 5f 42 4c 4f 43 4b 20 21 3d 20 32     S_PER_BLOCK != 2
    1ac6:	35 36 2c 20 41 64 6a 75 73 74 69 6e 67 20 74 6f     56, Adjusting to
    1ad6:	20 32 35 36 0a 00                                    256..

00001adc <__c.4813>:
    1adc:	41 64 64 72 65 73 73 20 28 25 64 29 20 6f 75 74     Address (%d) out
    1aec:	20 6f 66 20 72 61 6e 67 65 0a 00                     of range..

00001af7 <__c.4797>:
    1af7:	57 41 52 4e 49 4e 47 3a 20 6d 6f 64 65 6c 20 4e     WARNING: model N
    1b07:	4f 54 20 66 6f 75 6e 64 20 69 6e 20 68 70 64 69     OT found in hpdi
    1b17:	72 2e 69 6e 69 21 0a 00                             r.ini!..

00001b1f <__c.4791>:
    1b1f:	68 70 64 69 72 20 69 6e 76 61 6c 69 64 20 74 79     hpdir invalid ty
    1b2f:	70 65 20 2d 20 4e 4f 54 20 41 4d 49 47 4f 20 6f     pe - NOT AMIGO o
    1b3f:	66 20 53 53 38 30 0a 00                             f SS80..

00001b47 <__c.4755>:
    1b47:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 69 6e     alloc_device: in
    1b57:	76 61 6c 69 64 20 74 79 70 65 3a 25 64 3a 25 73     valid type:%d:%s
    1b67:	0a 00                                               ..

00001b69 <__c.4747>:
    1b69:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 44 65     alloc_device: De
    1b79:	76 69 63 65 20 74 61 62 6c 65 20 69 73 20 66 75     vice table is fu
    1b89:	6c 6c 0a 00                                         ll..

00001b8d <__c.4726>:
    1b8d:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1b9d:	65 3a 28 25 64 29 20 69 6e 76 61 6c 69 64 20 74     e:(%d) invalid t
    1bad:	79 70 65 3a 25 64 3a 25 73 0a 00                    ype:%d:%s..

00001bb8 <__c.4724>:
    1bb8:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1bc8:	65 3a 20 69 6e 64 65 78 3a 20 25 64 20 74 79 70     e: index: %d typ
    1bd8:	65 3a 25 64 3a 25 73 2c 20 73 74 61 74 65 20 3d     e:%d:%s, state =
    1be8:	3d 20 4e 55 4c 4c 0a 00                             = NULL..

00001bf0 <__c.4722>:
    1bf0:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1c00:	65 3a 20 69 6e 64 65 78 20 25 64 20 75 6e 69 6e     e: index %d unin
    1c10:	69 74 61 6c 69 7a 65 64 20 74 79 70 65 3a 25 64     italized type:%d
    1c20:	3a 25 73 0a 00                                      :%s..

00001c25 <__c.4720>:
    1c25:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1c35:	65 3a 20 69 6e 64 65 78 3a 25 64 20 74 79 70 65     e: index:%d type
    1c45:	3a 25 64 3a 25 73 2c 20 64 65 76 20 3d 3d 20 4e     :%d:%s, dev == N
    1c55:	55 4c 4c 0a 00                                      ULL..

00001c5a <__c.4718>:
    1c5a:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1c6a:	65 3a 20 69 6e 64 65 78 3a 25 64 20 61 64 64 72     e: index:%d addr
    1c7a:	65 73 73 3a 20 25 30 32 58 48 20 6f 75 74 20 6f     ess: %02XH out o
    1c8a:	66 20 72 61 6e 67 65 0a 00                          f range..

00001c93 <__c.4716>:
    1c93:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1ca3:	65 3a 28 25 64 29 20 6f 75 74 20 6f 66 20 72 61     e:(%d) out of ra
    1cb3:	6e 67 65 0a 00                                      nge..

00001cb8 <__c.4677>:
    1cb8:	0a 00                                               ..

00001cba <__c.4672>:
    1cba:	0a 00                                               ..

00001cbc <__c.4670>:
    1cbc:	20 20 20 20 23 20 42 4c 4f 43 4b 53 20 3d 20 25         # BLOCKS = %
    1ccc:	6c 64 0a 00                                         ld..

00001cd0 <__c.4668>:
    1cd0:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    1ce0:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

00001cef <__c.4666>:
    1cef:	41 4d 49 47 4f 20 25 73 0a 00                       AMIGO %s..

00001cf9 <__c.4664>:
    1cf9:	20 20 20 20 23 20 42 4c 4f 43 4b 53 20 3d 20 25         # BLOCKS = %
    1d09:	6c 64 0a 00                                         ld..

00001d0d <__c.4662>:
    1d0d:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    1d1d:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

00001d2c <__c.4660>:
    1d2c:	53 53 38 30 20 25 73 0a 00                          SS80 %s..

00001d35 <__c.4657>:
    1d35:	43 75 72 72 65 6e 74 20 43 6f 6e 66 69 67 75 72     Current Configur
    1d45:	61 74 69 6f 6e 20 53 65 74 74 69 6e 67 73 0a 00     ation Settings..

00001d55 <__c.4648>:
    1d55:	0a 00                                               ..

00001d57 <__c.4643>:
    1d57:	0a 00                                               ..

00001d59 <__c.4641>:
    1d59:	50 52 49 4e 54 45 52 0a 00                          PRINTER..

00001d62 <__c.4639>:
    1d62:	41 4d 49 47 4f 20 25 73 0a 00                       AMIGO %s..

00001d6c <__c.4637>:
    1d6c:	53 53 38 30 20 25 73 0a 00                          SS80 %s..

00001d75 <__c.4634>:
    1d75:	44 65 76 69 63 65 20 41 64 64 72 65 73 73 65 73     Device Addresses
    1d85:	0a 00                                               ..

00001d87 <__c.4628>:
    1d87:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 2a 2a 2a     Read_Config: ***
    1d97:	2a 2a 2a 20 65 72 72 6f 72 73 28 25 64 29 20 2a     *** errors(%d) *
    1da7:	2a 2a 2a 2a 2a 0a 00                                *****..

00001dae <__c.4626>:
    1dae:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 72 65 61     Read_Config: rea
    1dbe:	64 28 25 64 29 20 6c 69 6e 65 73 0a 00              d(%d) lines..

00001dcb <__c.4624>:
    1dcb:	4d 69 73 73 69 6e 67 20 45 4e 44 20 73 74 61 74     Missing END stat
    1ddb:	65 6d 65 6e 74 20 61 74 20 6c 69 6e 65 3a 25 64     ement at line:%d
    1deb:	0a 00                                               ..

00001ded <__c.4620>:
    1ded:	55 6e 65 78 70 65 63 74 65 64 20 53 54 41 54 45     Unexpected STATE
    1dfd:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1e0d:	0a 00                                               ..

00001e0f <__c.4617>:
    1e0f:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1e1f:	20 47 45 4d 45 54 52 59 20 74 6f 6b 65 6e 3a 20      GEMETRY token: 
    1e2f:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00001e3f <__c.4608>:
    1e3f:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1e4f:	20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25      CONFIG token: %
    1e5f:	73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00        s, at line:%d..

00001e6e <__c.4605>:
    1e6e:	55 6e 65 78 70 65 63 74 65 64 20 48 45 41 44 45     Unexpected HEADE
    1e7e:	52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20     R CONFIG token: 
    1e8e:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00001e9e <__c.4596>:
    1e9e:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1eae:	20 53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73      START token: %s
    1ebe:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001ecc <__c.4588>:
    1ecc:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1edc:	56 4f 4c 55 4d 45 20 74 6f 6b 65 6e 3a 20 25 73     VOLUME token: %s
    1eec:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001efa <__c.4578>:
    1efa:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1f0a:	55 4e 49 54 20 74 6f 6b 65 6e 3a 20 25 73 2c 20     UNIT token: %s, 
    1f1a:	61 74 20 6c 69 6e 65 3a 25 64 0a 00                 at line:%d..

00001f26 <__c.4561>:
    1f26:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1f36:	43 4f 4e 54 52 4f 4c 4c 45 52 20 74 6f 6b 65 6e     CONTROLLER token
    1f46:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1f56:	0a 00                                               ..

00001f58 <__c.4553>:
    1f58:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1f68:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    1f78:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001f86 <__c.4550>:
    1f86:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1f96:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    1fa6:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001fb4 <__c.4542>:
    1fb4:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1fc4:	53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73 2c     START token: %s,
    1fd4:	20 61 74 20 6c 69 6e 65 3a 25 64 0a 00               at line:%d..

00001fe1 <__c.4532>:
    1fe1:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    1ff1:	45 52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a     ER CONFIG token:
    2001:	20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a      %s, at line:%d.
	...

00002012 <__c.4529>:
    2012:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    2022:	45 52 20 74 6f 6b 65 6e 3a 20 25 73 2c 20 61 74     ER token: %s, at
    2032:	20 6c 69 6e 65 3a 25 64 0a 00                        line:%d..

0000203c <__c.4525>:
    203c:	55 6e 65 78 70 65 63 74 65 64 20 74 6f 6b 65 6e     Unexpected token
    204c:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    205c:	0a 00                                               ..

0000205e <__c.4514>:
    205e:	55 6e 65 78 70 65 63 74 65 64 20 74 6f 6b 65 6e     Unexpected token
    206e:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    207e:	0a 00                                               ..

00002080 <__c.4511>:
    2080:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 6f 70 65     Read_Config: ope
    2090:	6e 28 25 73 29 20 66 61 69 6c 65 64 0a 00           n(%s) failed..

0000209e <__c.4509>:
    209e:	52 65 61 64 69 6e 67 3a 20 25 73 0a 00              Reading: %s..

000020ab <__c.4488>:
    20ab:	25 73 0a 00                                         %s..

000020af <__c.4478>:
    20af:	25 2d 32 35 73 20 3d 20 25 73 0a 00                 %-25s = %s..

000020bb <__c.4467>:
    20bb:	25 2d 32 35 73 20 3d 20 25 38 6c 78 48 20 28 25     %-25s = %8lxH (%
    20cb:	6c 64 29 0a 00                                      ld)..

000020d0 <__c.3648>:
    20d0:	4d 6f 64 65 6c 3a 20 25 73 20 4e 4f 54 20 66 6f     Model: %s NOT fo
    20e0:	75 6e 64 20 69 6e 20 68 70 64 69 72 2e 69 6e 69     und in hpdir.ini
    20f0:	0a 00                                               ..

000020f2 <__c.3643>:
    20f2:	4d 6f 64 65 6c 3a 20 25 73 20 66 6f 75 6e 64 20     Model: %s found 
    2102:	69 6e 20 68 70 64 69 72 2e 69 6e 69 0a 00           in hpdir.ini..

00002110 <__c.3641>:
    2110:	25 73 20 25 73 0a 00                                %s %s..

00002117 <__c.3637>:
    2117:	45 72 72 6f 72 3a 20 68 70 64 69 72 2e 69 6e 69     Error: hpdir.ini
    2127:	20 6e 6f 74 20 66 6f 75 6e 64 21 0a 00               not found!..

00002134 <__c.4560>:
    2134:	5b 53 53 38 30 20 55 6e 6b 6e 6f 77 6e 20 53 43     [SS80 Unknown SC
    2144:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    2154:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    2164:	48 5d 0a 00                                         H]..

00002168 <__c.4558>:
    2168:	5b 53 53 38 30 20 53 43 20 55 6e 6b 6e 6f 77 6e     [SS80 SC Unknown
    2178:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    2188:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    2198:	48 5d 0a 00                                         H]..

0000219c <__c.4556>:
    219c:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    21ac:	74 5d 0a 00                                         t]..

000021b0 <__c.4554>:
    21b0:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

000021bf <__c.4552>:
    21bf:	5b 53 53 38 30 20 52 65 70 6f 72 74 20 53 74 61     [SS80 Report Sta
    21cf:	74 65 5d 0a 00                                      te]..

000021d4 <__c.4550>:
    21d4:	5b 53 53 30 30 20 45 78 65 63 75 74 65 20 53 74     [SS00 Execute St
    21e4:	61 74 65 5d 0a 00                                   ate]..

000021ea <__c.4548>:
    21ea:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    21fa:	61 74 65 5d 0a 00                                   ate]..

00002200 <__c.4543>:
    2200:	5b 47 50 49 42 20 45 72 72 6f 72 20 52 65 74 75     [GPIB Error Retu
    2210:	72 6e 20 2d 20 57 72 69 74 65 20 45 52 52 4f 52     rn - Write ERROR
    2220:	5d 0a 00                                            ]..

00002223 <__c.4529>:
    2223:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

00002232 <__c.4527>:
    2232:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    2242:	5d 0a 00                                            ]..

00002245 <__c.4520>:
    2245:	5b 53 53 38 30 20 53 44 43 5d 0a 00                 [SS80 SDC]..

00002251 <__c.4506>:
    2251:	5b 53 53 38 30 20 71 73 74 61 74 20 25 30 32 58     [SS80 qstat %02X
    2261:	5d 0a 00                                            ]..

00002264 <__c.4504>:
    2264:	5b 53 53 38 30 20 71 73 74 61 74 20 73 65 6e 64     [SS80 qstat send
    2274:	20 46 41 49 4c 45 44 5d 0a 00                        FAILED]..

0000227e <__c.4497>:
    227e:	5b 53 53 38 30 20 53 65 65 6b 3a 25 30 38 6c 58     [SS80 Seek:%08lX
    228e:	48 5d 0a 00                                         H]..

00002292 <__c.4495>:
    2292:	5b 53 53 38 30 20 53 65 65 6b 20 4f 56 45 52 46     [SS80 Seek OVERF
    22a2:	4c 4f 57 20 61 74 20 25 30 38 6c 58 48 5d 0a 00     LOW at %08lXH]..

000022b2 <__c.4490>:
    22b2:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    22c2:	74 20 43 6f 6d 6d 61 6e 64 2c 20 45 72 72 6f 72     t Command, Error
    22d2:	20 61 74 20 28 25 64 29 20 6f 66 20 28 25 64 29      at (%d) of (%d)
    22e2:	20 4f 50 20 43 6f 64 65 73 5d 0a 00                  OP Codes]..

000022ee <__c.4487>:
    22ee:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    22fe:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

0000230e <__c.4485>:
    230e:	5b 53 53 38 30 20 43 61 6e 63 65 6c 20 28 25 64     [SS80 Cancel (%d
    231e:	29 5d 0a 00                                         )]..

00002322 <__c.4483>:
    2322:	5b 53 53 38 30 20 43 68 61 6e 6e 65 6c 20 49 6e     [SS80 Channel In
    2332:	64 65 70 65 6e 64 65 6e 74 20 43 6c 65 61 72 20     dependent Clear 
    2342:	28 25 64 29 5d 0a 00                                (%d)]..

00002349 <__c.4481>:
    2349:	5b 53 53 38 30 20 57 72 69 74 65 20 4c 6f 6f 70     [SS80 Write Loop
    2359:	62 61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00           back - TODO]..

00002367 <__c.4479>:
    2367:	5b 53 53 38 30 20 52 65 61 64 20 4c 6f 6f 70 62     [SS80 Read Loopb
    2377:	61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00              ack - TODO]..

00002384 <__c.4476>:
    2384:	5b 53 53 38 30 20 48 50 2d 49 42 20 50 61 72 69     [SS80 HP-IB Pari
    2394:	74 79 20 43 68 65 63 6b 69 6e 67 20 2d 20 54 4f     ty Checking - TO
    23a4:	44 4f 5d 0a 00                                      DO]..

000023a9 <__c.4473>:
    23a9:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    23b9:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

000023c2 <__c.4471>:
    23c2:	5b 47 50 49 42 20 52 65 61 64 20 45 52 52 4f 52     [GPIB Read ERROR
    23d2:	5d 0a 00                                            ]..

000023d5 <__c.4462>:
    23d5:	5b 53 53 38 30 20 45 78 65 63 75 74 65 20 43 6f     [SS80 Execute Co
    23e5:	6d 6d 61 6e 64 2c 20 45 72 72 6f 72 20 61 74 20     mmand, Error at 
    23f5:	28 25 64 29 20 6f 66 20 28 25 64 29 20 4f 50 20     (%d) of (%d) OP 
    2405:	43 6f 64 65 73 5d 0a 00                             Codes]..

0000240d <__c.4459>:
    240d:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    241d:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

0000242d <__c.4457>:
    242d:	5b 53 53 38 30 20 49 6e 69 74 69 61 74 65 20 44     [SS80 Initiate D
    243d:	69 61 67 6e 6f 73 74 69 63 20 2d 20 54 4f 44 4f     iagnostic - TODO
    244d:	5d 0a 00                                            ]..

00002450 <__c.4455>:
    2450:	5b 53 53 38 30 20 52 65 71 75 65 73 74 20 53 74     [SS80 Request St
    2460:	61 74 75 73 5d 0a 00                                atus]..

00002467 <__c.4453>:
    2467:	5b 53 53 38 30 20 44 6f 6f 72 20 4c 6f 63 6b 20     [SS80 Door Lock 
    2477:	2d 20 54 4f 44 4f 5d 0a 00                          - TODO]..

00002480 <__c.4451>:
    2480:	5b 53 53 38 30 20 44 6f 6f 72 20 55 6e 4c 6f 63     [SS80 Door UnLoc
    2490:	6b 20 2d 20 54 4f 44 4f 5d 0a 00                    k - TODO]..

0000249b <__c.4449>:
    249b:	5b 53 53 38 30 20 53 65 74 20 53 74 61 74 75 73     [SS80 Set Status
    24ab:	20 4d 61 73 6b 20 2d 20 54 4f 44 4f 5d 0a 00         Mask - TODO]..

000024ba <__c.4447>:
    24ba:	5b 53 53 38 30 20 49 6e 69 74 69 61 6c 69 7a 65     [SS80 Initialize
    24ca:	20 4d 65 64 69 61 20 54 4f 44 4f 5d 0a 00            Media TODO]..

000024d8 <__c.4445>:
    24d8:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

000024e9 <__c.4443>:
    24e9:	5b 53 53 38 30 20 56 61 6c 69 64 61 74 65 20 4b     [SS80 Validate K
    24f9:	65 79 20 2d 20 54 4f 44 4f 5d 0a 00                 ey - TODO]..

00002505 <__c.4441>:
    2505:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 44 65     [SS80 Release De
    2515:	6e 69 65 64 20 4e 4f 2d 4f 50 5d 0a 00              nied NO-OP]..

00002522 <__c.4439>:
    2522:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 4e 4f     [SS80 Release NO
    2532:	2d 4f 50 5d 0a 00                                   -OP]..

00002538 <__c.4437>:
    2538:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2548:	20 56 65 72 69 66 79 20 2d 20 54 4f 44 4f 5d 0a      Verify - TODO].
	...

00002559 <__c.4435>:
    2559:	5b 53 53 38 30 20 53 65 74 20 52 65 74 75 72 6e     [SS80 Set Return
    2569:	20 41 64 64 72 65 73 73 69 6e 67 20 2d 20 54 4f      Addressing - TO
    2579:	44 4f 5d 0a 00                                      DO]..

0000257e <__c.4433>:
    257e:	5b 53 53 38 30 20 53 65 74 20 52 65 6c 65 61 73     [SS80 Set Releas
    258e:	65 20 4e 4f 2d 4f 50 5d 0a 00                       e NO-OP]..

00002598 <__c.4431>:
    2598:	5b 53 53 38 30 20 53 65 74 20 52 50 53 20 4e 4f     [SS80 Set RPS NO
    25a8:	2d 4f 50 5d 0a 00                                   -OP]..

000025ae <__c.4429>:
    25ae:	5b 53 53 38 30 20 4e 4f 2d 4f 50 5d 0a 00           [SS80 NO-OP]..

000025bc <__c.4427>:
    25bc:	5b 53 53 38 30 20 53 65 74 20 4c 65 6e 67 74 68     [SS80 Set Length
    25cc:	3a 28 25 30 38 6c 58 48 29 5d 0a 00                 :(%08lXH)]..

000025d8 <__c.4425>:
    25d8:	5b 53 53 38 30 20 53 65 74 20 41 64 64 72 65 73     [SS80 Set Addres
    25e8:	73 3a 28 25 30 38 6c 58 48 29 5d 0a 00              s:(%08lXH)]..

000025f5 <__c.4423>:
    25f5:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2605:	20 57 72 69 74 65 5d 0a 00                           Write]..

0000260e <__c.4420>:
    260e:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    261e:	20 52 65 61 64 5d 0a 00                              Read]..

00002626 <__c.4418>:
    2626:	5b 53 53 38 30 20 53 65 74 20 56 6f 6c 75 6d 65     [SS80 Set Volume
    2636:	3a 20 28 25 64 29 5d 0a 00                          : (%d)]..

0000263f <__c.4415>:
    263f:	5b 53 53 38 30 20 53 65 74 20 55 6e 69 74 3a 28     [SS80 Set Unit:(
    264f:	25 64 29 5d 0a 00                                   %d)]..

00002655 <__c.4413>:
    2655:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    2665:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

0000266e <__c.4411>:
    266e:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    267e:	61 74 65 20 47 50 49 42 20 52 65 61 64 20 45 52     ate GPIB Read ER
    268e:	52 4f 52 5d 0a 00                                   ROR]..

00002694 <__c.4402>:
    2694:	5b 53 53 38 30 20 56 6f 6c 75 6d 65 3a 25 64 20     [SS80 Volume:%d 
    26a4:	69 6e 76 61 6c 69 64 5d 0a 00                       invalid]..

000026ae <__c.4397>:
    26ae:	5b 53 53 38 30 20 55 4e 49 54 3a 25 64 20 69 6e     [SS80 UNIT:%d in
    26be:	76 61 6c 69 64 5d 0a 00                             valid]..

000026c6 <__c.4392>:
    26c6:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 56     [SS80 Describe V
    26d6:	6f 6c 75 6d 65 20 46 41 49 4c 45 44 5d 0a 00        olume FAILED]..

000026e5 <__c.4390>:
    26e5:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 55     [SS80 Describe U
    26f5:	6e 69 74 20 46 41 49 4c 45 44 5d 0a 00              nit FAILED]..

00002702 <__c.4388>:
    2702:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 43     [SS80 Describe C
    2712:	6f 6e 74 72 6f 6c 6c 65 72 20 46 41 49 4c 45 44     ontroller FAILED
    2722:	5d 0a 00                                            ]..

00002725 <__c.4386>:
    2725:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

00002736 <__c.4378>:
    2736:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    2746:	73 20 46 41 49 4c 45 44 5d 0a 00                    s FAILED]..

00002751 <__c.4376>:
    2751:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    2761:	73 5d 0a 00                                         s]..

00002765 <__c.4366>:
    2765:	20 20 20 20 25 64 3a 25 73 0a 00                        %d:%s..

00002770 <__c.4364>:
    2770:	25 73 3a 0a 00                                      %s:..

00002775 <__c.4339>:
    2775:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2785:	20 57 72 69 74 65 20 57 72 6f 74 65 20 54 6f 74      Write Wrote Tot
    2795:	61 6c 28 25 6c 78 48 29 5d 0a 00                    al(%lxH)]..

000027a0 <__c.4337>:
    27a0:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    27b0:	20 57 72 69 74 65 20 44 49 44 20 4e 4f 54 20 46      Write DID NOT F
    27c0:	49 4e 49 53 48 5d 0a 00                             INISH]..

000027c8 <__c.4333>:
    27c8:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    27d8:	20 57 72 69 74 65 20 77 72 6f 74 65 28 25 30 32      Write wrote(%02
    27e8:	58 48 29 5d 0a 00                                   XH)]..

000027ee <__c.4331>:
    27ee:	5b 44 69 73 6b 20 57 72 69 74 65 20 45 72 72 6f     [Disk Write Erro
    27fe:	72 5d 0a 00                                         r]..

00002802 <__c.4327>:
    2802:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    2812:	5d 0a 00                                            ]..

00002815 <__c.4325>:
    2815:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2825:	20 57 72 69 74 65 20 61 74 20 25 30 38 6c 58 48      Write at %08lXH
    2835:	28 25 6c 58 48 29 5d 0a 00                          (%lXH)]..

0000283e <__c.4313>:
    283e:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    284e:	65 61 64 20 54 6f 74 61 6c 28 25 6c 58 48 29 20     ead Total(%lXH) 
    285e:	62 79 74 65 73 5d 0a 00                             bytes]..

00002866 <__c.4311>:
    2866:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    2876:	65 61 64 20 44 49 44 20 4e 4f 54 20 46 49 4e 49     ead DID NOT FINI
    2886:	53 48 5d 0a 00                                      SH]..

0000288b <__c.4306>:
    288b:	5b 53 53 38 30 20 47 50 49 42 20 57 72 69 74 65     [SS80 GPIB Write
    289b:	20 45 72 72 6f 72 5d 0a 00                           Error]..

000028a4 <__c.4304>:
    28a4:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    28b4:	45 72 72 6f 72 5d 0a 00                             Error]..

000028bc <__c.4302>:
    28bc:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    28cc:	25 30 32 58 48 20 62 79 74 65 73 5d 0a 00           %02XH bytes]..

000028da <__c.4300>:
    28da:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    28ea:	20 52 65 61 64 20 61 74 20 25 30 38 6c 58 48 28      Read at %08lXH(
    28fa:	25 6c 58 48 29 5d 0a 00                             %lXH)]..

00002902 <__c.4283>:
    2902:	5b 53 53 38 30 20 45 58 45 43 20 73 74 61 74 65     [SS80 EXEC state
    2912:	3a 25 64 20 65 72 72 6f 72 5d 0a 00                 :%d error]..

0000291e <__c.4267>:
    291e:	5b 53 53 38 30 20 25 30 32 58 48 20 49 4e 49 54     [SS80 %02XH INIT
    292e:	5d 0a 00                                            ]..

00002931 <__c.4383>:
    2931:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2941:	65 71 75 65 73 74 20 4c 6f 67 69 63 61 6c 20 41     equest Logical A
    2951:	64 64 72 65 73 73 5d 0a 00                          ddress]..

0000295a <__c.4380>:
    295a:	5b 41 4d 49 47 4f 20 45 78 69 63 75 74 65 20 52     [AMIGO Exicute R
    296a:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 55 6e     equest Status Un
    297a:	62 75 66 66 65 72 65 64 5d 0a 00                    buffered]..

00002985 <__c.4377>:
    2985:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2995:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 42 75     equest Status Bu
    29a5:	66 66 65 72 65 64 5d 0a 00                          ffered]..

000029ae <__c.4372>:
    29ae:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    29be:	72 69 74 65 20 42 75 66 66 65 72 65 64 5d 0a 00     rite Buffered]..

000029ce <__c.4369>:
    29ce:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 49     [AMIGO Execute I
    29de:	6e 69 74 69 61 6c 69 7a 65 5d 0a 00                 nitialize]..

000029ea <__c.4366>:
    29ea:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    29fa:	72 69 74 65 20 55 6e 62 75 66 66 65 72 65 64 5d     rite Unbuffered]
    2a0a:	0a 00                                               ..

00002a0c <__c.4363>:
    2a0c:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2a1c:	65 61 64 20 42 75 66 66 65 72 65 64 5d 0a 00        ead Buffered]..

00002a2b <__c.4360>:
    2a2b:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2a3b:	65 61 64 20 55 6e 62 75 66 66 65 72 65 64 5d 0a     ead Unbuffered].
	...

00002a4c <__c.4357>:
    2a4c:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 43     [AMIGO Execute C
    2a5c:	6f 6c 64 20 4c 6f 61 64 20 52 65 61 64 5d 0a 00     old Load Read]..

00002a6c <__c.4353>:
    2a6c:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 28 25     [AMIGO Execute(%
    2a7c:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    2a8c:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    2a9c:	0a 00                                               ..

00002a9e <__c.4348>:
    2a9e:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 5d 0a 00     [AMIGO Format]..

00002aae <__c.4345>:
    2aae:	5b 41 4d 49 47 4f 20 52 65 61 64 20 42 75 66 66     [AMIGO Read Buff
    2abe:	65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00        ered Command]..

00002acd <__c.4343>:
    2acd:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    2add:	74 61 74 75 73 20 55 6e 62 75 66 66 65 72 65 64     tatus Unbuffered
    2aed:	20 43 6f 6d 6d 61 6e 64 5d 0a 00                     Command]..

00002af8 <__c.4341>:
    2af8:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 42 75 66     [AMIGO Write Buf
    2b08:	66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00     fered Command]..

00002b18 <__c.4339>:
    2b18:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 4c     [AMIGO Request L
    2b28:	6f 67 69 63 61 6c 20 41 64 64 72 65 73 73 20 43     ogical Address C
    2b38:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

00002b41 <__c.4337>:
    2b41:	5b 41 4d 49 47 4f 20 49 6e 69 74 69 61 6c 69 7a     [AMIGO Initializ
    2b51:	65 20 43 6f 6d 6d 61 6e 64 5d 0a 00                 e Command]..

00002b5d <__c.4335>:
    2b5d:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 55 6e 62     [AMIGO Write Unb
    2b6d:	75 66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d     uffered Command]
    2b7d:	0a 00                                               ..

00002b7f <__c.4333>:
    2b7f:	5b 41 4d 49 47 4f 20 56 65 72 69 66 79 5d 0a 00     [AMIGO Verify]..

00002b8f <__c.4330>:
    2b8f:	5b 41 4d 49 47 4f 20 52 65 61 64 20 55 6e 62 75     [AMIGO Read Unbu
    2b9f:	66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a     ffered Command].
	...

00002bb0 <__c.4328>:
    2bb0:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    2bc0:	74 61 74 75 73 20 42 75 66 66 65 72 65 64 20 43     tatus Buffered C
    2bd0:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

00002bd9 <__c.4326>:
    2bd9:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    2be9:	36 5d 0a 00                                         6]..

00002bed <__c.4323>:
    2bed:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    2bfd:	35 5d 0a 00                                         5]..

00002c01 <__c.4320>:
    2c01:	5b 41 4d 49 47 4f 20 43 6f 6c 64 20 4c 6f 61 64     [AMIGO Cold Load
    2c11:	20 52 65 61 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00      Read Command]..

00002c21 <__c.4317>:
    2c21:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    2c31:	30 32 58 48 29 3a 20 47 50 49 42 20 72 65 61 64     02XH): GPIB read
    2c41:	20 62 79 74 65 73 3a 25 30 32 58 48 5d 0a 00         bytes:%02XH]..

00002c50 <__c.4315>:
    2c50:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    2c60:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

00002c71 <__c.4313>:
    2c71:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    2c81:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

00002c92 <__c.4311>:
    2c92:	5b 41 4d 49 47 4f 5f 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO_Command:G
    2ca2:	50 49 42 20 77 72 69 74 65 20 65 72 72 6f 72 5d     PIB write error]
    2cb2:	0a 00                                               ..

00002cb4 <__c.4309>:
    2cb4:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    2cc4:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    2cd4:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    2ce4:	0a 00                                               ..

00002ce6 <__c.4297>:
    2ce6:	5b 45 20 20 20 41 6d 69 67 6f 20 45 52 52 4f 52     [E   Amigo ERROR
    2cf6:	20 73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58      secondary: %02X
    2d06:	48 2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20     H, state:%02XH, 
    2d16:	6c 69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c     listening:%02XH,
    2d26:	20 74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a      talking:%02XH].
	...

00002d37 <__c.4295>:
    2d37:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    2d47:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2d57:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2d67:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2d77:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002d87 <__c.4293>:
    2d87:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    2d97:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2da7:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2db7:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2dc7:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002dd7 <__c.4291>:
    2dd7:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    2de7:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2df7:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2e07:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2e17:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002e27 <__c.4286>:
    2e27:	5b 55 20 41 6d 69 67 6f 20 54 4f 44 4f 20 73 65     [U Amigo TODO se
    2e37:	63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48 2c 20     condary: %02XH, 
    2e47:	73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f 70 63     state:%02XH, opc
    2e57:	6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e 3a 25     ode:%02XH, len:%
    2e67:	33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a 25 30     3d, listening:%0
    2e77:	32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25 30 32     2XH, talking:%02
    2e87:	58 48 5d 0a 00                                      XH]..

00002e8c <__c.4284>:
    2e8c:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    2e9c:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2eac:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2ebc:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2ecc:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2edc:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2eec:	30 32 58 48 5d 0a 00                                02XH]..

00002ef3 <__c.4282>:
    2ef3:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    2f03:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2f13:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2f23:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2f33:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2f43:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2f53:	30 32 58 48 5d 0a 00                                02XH]..

00002f5a <__c.4280>:
    2f5a:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    2f6a:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2f7a:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2f8a:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2f9a:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2faa:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2fba:	30 32 58 48 5d 0a 00                                02XH]..

00002fc1 <__c.4273>:
    2fc1:	5b 41 4d 49 47 4f 20 43 6c 65 61 72 5d 0a 00        [AMIGO Clear]..

00002fd0 <__c.4260>:
    2fd0:	5b 44 53 4a 20 25 30 32 58 48 5d 0a 00              [DSJ %02XH]..

00002fdd <__c.4258>:
    2fdd:	5b 41 49 4d 47 4f 3a 20 44 53 4a 20 73 65 6e 64     [AIMGO: DSJ send
    2fed:	20 66 61 69 6c 65 64 5d 0a 00                        failed]..

00002ff7 <__c.4251>:
    2ff7:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 64 69 73     [AMIGO Write dis
    3007:	6b 20 77 72 69 74 65 20 65 72 72 6f 72 5d 0a 00     k write error]..

00003017 <__c.4249>:
    3017:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 47 50 49     [AMIGO Write GPI
    3027:	42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a 00        B read error]..

00003036 <__c.4247>:
    3036:	41 4d 49 47 4f 73 2d 3e 73 74 61 74 65 3a 25 64     AMIGOs->state:%d
    3046:	0a 00                                               ..

00003048 <__c.4240>:
    3048:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    3058:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00003062 <__c.4234>:
    3062:	41 4d 49 47 4f 73 2d 3e 73 74 61 74 65 3a 25 64     AMIGOs->state:%d
    3072:	0a 00                                               ..

00003074 <__c.4228>:
    3074:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 20 44 6f     [AMIGO Format Do
    3084:	6e 65 5d 0a 00                                      ne]..

00003089 <__c.4224>:
    3089:	5b 41 4d 49 47 4f 20 66 6f 72 6d 61 74 5d 0a 00     [AMIGO format]..

00003099 <__c.4183>:
    3099:	5b 41 4d 49 47 4f 20 25 73 2c 20 50 3a 25 30 38     [AMIGO %s, P:%08
    30a9:	6c 78 48 2c 20 55 3a 25 64 20 43 3a 25 64 20 48     lxH, U:%d C:%d H
    30b9:	3a 25 64 20 53 3a 25 64 5d 0a 00                    :%d S:%d]..

000030c4 <__c.4213>:
    30c4:	5b 41 4d 49 47 4f 20 76 65 72 69 66 79 20 50 3a     [AMIGO verify P:
    30d4:	25 30 38 6c 58 48 2c 20 73 65 63 74 6f 72 73 3a     %08lXH, sectors:
    30e4:	25 30 34 58 48 5d 0a 00                             %04XH]..

000030ec <__c.4190>:
    30ec:	5b 41 4d 49 47 4f 20 25 73 20 70 6f 73 20 4f 56     [AMIGO %s pos OV
    30fc:	45 52 46 4c 4f 57 5d 0a 00                          ERFLOW]..

00003105 <__c.4176>:
    3105:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    3115:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

0000311f <__c.4174>:
    311f:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 73 74 61 74     [AMIGO send stat
    312f:	75 73 5d 0a 00                                      us]..

00003134 <__c.4168>:
    3134:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    3144:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

0000314e <__c.4166>:
    314e:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 6c 6f 67 69     [AMIGO send logi
    315e:	63 61 6c 20 61 64 64 72 65 73 73 5d 0a 00           cal address]..

0000316c <__c.4160>:
    316c:	5b 41 4d 49 47 4f 20 72 65 71 75 65 73 74 20 73     [AMIGO request s
    317c:	74 61 74 75 73 5d 0a 00                             tatus]..

00003184 <__c.4145>:
    3184:	5b 53 43 20 50 52 49 4e 54 45 52 20 54 61 6c 6b     [SC PRINTER Talk
    3194:	3a 20 25 30 32 58 48 5d 0a 00                       : %02XH]..

0000319e <__c.4143>:
    319e:	5b 53 43 20 50 52 49 4e 54 45 52 20 4c 69 73 74     [SC PRINTER List
    31ae:	65 6e 3a 20 25 30 32 58 48 5d 0a 00                 en: %02XH]..

000031ba <__c.4138>:
    31ba:	25 30 38 6c 64 0d 00                                %08ld..

000031c1 <__c.4132>:
    31c1:	77 72 69 74 65 20 66 61 69 6c 65 64 3a 20 77 61     write failed: wa
    31d1:	6e 74 65 64 20 25 64 2c 20 67 6f 74 3a 25 64 0a     nted %d, got:%d.
	...

000031e2 <__c.4126>:
    31e2:	0a 44 4f 4e 45 3a 20 25 30 38 6c 64 0a 00           .DONE: %08ld..

000031f0 <__c.4124>:
    31f0:	45 52 52 4f 52 20 64 75 72 72 69 6e 67 20 77 72     ERROR durring wr
    3200:	69 74 65 0a 00                                      ite..

00003205 <__c.4118>:
    3205:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

00003211 <__c.4116>:
    3211:	43 61 70 74 75 72 69 6e 67 20 70 6c 6f 74 20 74     Capturing plot t
    3221:	6f 3a 25 73 0a 00                                   o:%s..

00003227 <__c.4114>:
    3227:	2f 70 6c 6f 74 2d 25 30 32 64 25 73 25 30 34 64     /plot-%02d%s%04d
    3237:	2d 25 30 32 64 25 30 32 64 25 30 32 64 2e 70 6c     -%02d%02d%02d.pl
    3247:	74 00                                               t.

00003249 <__c.4555>:
    3249:	09 46 6f 72 6d 61 74 74 69 6e 67 3a 20 77 72 6f     .Formatting: wro
    3259:	74 65 20 25 6c 64 20 73 65 63 74 6f 72 73 0a 00     te %ld sectors..

00003269 <__c.4553>:
    3269:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    3279:	3a 20 73 65 63 74 6f 72 73 20 69 73 20 30 0a 00     : sectors is 0..

00003289 <__c.4551>:
    3289:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    3299:	3a 20 64 69 72 73 65 63 74 6f 72 73 20 69 73 20     : dirsectors is 
    32a9:	30 0a 00                                            0..

000032ac <__c.4549>:
    32ac:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    32bc:	3a 20 6c 69 66 6c 61 62 65 6c 20 69 73 20 65 6d     : liflabel is em
    32cc:	70 74 79 0a 00                                      pty..

000032d1 <__c.4547>:
    32d1:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    32e1:	3a 20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69     : lifimagename i
    32f1:	73 20 65 6d 70 74 79 0a 00                          s empty..

000032fa <__c.4534>:
    32fa:	72 65 6e 61 6d 65 64 3a 20 25 31 30 73 20 74 6f     renamed: %10s to
    330a:	20 25 31 30 73 0a 00                                 %10s..

00003311 <__c.4532>:
    3311:	6c 69 66 5f 72 65 6e 61 6d 65 3a 5b 25 73 5d 20     lif_rename:[%s] 
    3321:	6c 69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f     lif name:[%s] no
    3331:	74 20 66 6f 75 6e 64 0a 00                          t found..

0000333a <__c.4530>:
    333a:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    334a:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 63 6f 6e      new lifname con
    335a:	74 61 69 6e 73 20 62 61 64 20 63 68 61 72 61 63     tains bad charac
    336a:	74 65 72 73 0a 00                                   ters..

00003370 <__c.4528>:
    3370:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    3380:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 69 73 20      new lifname is 
    3390:	65 6d 70 74 79 0a 00                                empty..

00003397 <__c.4526>:
    3397:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    33a7:	20 6f 6c 64 20 6c 69 66 6e 61 6d 65 20 69 73 20      old lifname is 
    33b7:	65 6d 70 74 79 0a 00                                empty..

000033be <__c.4524>:
    33be:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    33ce:	20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69 73      lifimagename is
    33de:	20 65 6d 70 74 79 0a 00                              empty..

000033e6 <__c.4515>:
    33e6:	44 65 6c 65 74 65 64 3a 20 25 31 30 73 0a 00        Deleted: %10s..

000033f5 <__c.4513>:
    33f5:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 20 6c     LIF image:[%s] l
    3405:	69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f 74     if name:[%s] not
    3415:	20 66 6f 75 6e 64 0a 00                              found..

0000341d <__c.4511>:
    341d:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    342d:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 0a 00        LIF name:[%s]..

0000343c <__c.4509>:
    343c:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    344c:	66 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     fname is empty..

0000345c <__c.4507>:
    345c:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    346c:	66 69 6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d     fimagename is em
    347c:	70 74 79 0a 00                                      pty..

00003481 <__c.4499>:
    3481:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

0000348f <__c.4494>:
    348f:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

0000349d <__c.4492>:
    349d:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    34ad:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    34bd:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

000034cd <__c.4490>:
    34cd:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    34dd:	73 0a 00                                            s..

000034e0 <__c.4488>:
    34e0:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    34f0:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    3500:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

0000350f <__c.4486>:
    350f:	6c 69 66 5f 61 64 64 3a 20 75 73 65 72 66 69 6c     lif_add: userfil
    351f:	65 20 69 73 20 65 6d 70 74 79 0a 00                 e is empty..

0000352b <__c.4484>:
    352b:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 6e 61 6d 65     lif_add: lifname
    353b:	20 69 73 20 65 6d 70 74 79 0a 00                     is empty..

00003546 <__c.4482>:
    3546:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 69 6d 61 67     lif_add: lifimag
    3556:	65 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     ename is empty..

00003566 <__c.4465>:
    3566:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

00003574 <__c.4460>:
    3574:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003582 <__c.4458>:
    3582:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    3592:	73 0a 00                                            s..

00003595 <__c.4456>:
    3595:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    35a5:	75 6e 64 3a 25 73 0a 00                             und:%s..

000035ad <__c.4439>:
    35ad:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

000035bb <__c.4436>:
    35bb:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    35cb:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    35db:	20 65 72 72 6f 72 0a 00                              error..

000035e3 <__c.4428>:
    35e3:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

000035f1 <__c.4426>:
    35f1:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    3601:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    3611:	20 65 72 72 6f 72 0a 00                              error..

00003619 <__c.4423>:
    3619:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    3629:	5f 61 73 5f 61 73 63 69 69 3a 20 75 6e 65 78 70     _as_ascii: unexp
    3639:	65 63 74 65 64 20 63 6f 6e 74 72 6f 6c 20 62 79     ected control by
    3649:	74 65 3a 5b 25 30 32 58 48 5d 20 40 20 6f 66 66     te:[%02XH] @ off
    3659:	73 65 74 3a 20 25 38 6c 78 2c 20 69 6e 64 3a 25     set: %8lx, ind:%
    3669:	30 32 58 48 0a 00                                   02XH..

0000366f <__c.4421>:
    366f:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    367f:	5f 61 73 5f 61 73 63 69 69 3a 20 73 74 72 69 6e     _as_ascii: strin
    368f:	67 20 74 6f 6f 20 62 69 67 20 73 69 7a 65 20 3d     g too big size =
    369f:	20 25 64 0a 00                                       %d..

000036a4 <__c.4417>:
    36a4:	45 78 74 72 61 63 74 69 6e 67 3a 20 25 73 0a 00     Extracting: %s..

000036b4 <__c.4415>:
    36b4:	46 69 6c 65 20 25 73 20 68 61 73 20 77 72 6f 6e     File %s has wron
    36c4:	67 20 74 79 70 65 3a 5b 25 30 34 58 48 5d 20 65     g type:[%04XH] e
    36d4:	78 70 65 63 74 65 64 20 30 78 45 30 31 30 2e 2e     xpected 0xE010..
    36e4:	30 78 45 30 31 33 0a 00                             0xE013..

000036ec <__c.4413>:
    36ec:	4c 49 46 20 46 69 6c 65 20 6e 6f 74 20 66 6f 75     LIF File not fou
    36fc:	6e 64 3a 25 73 0a 00                                nd:%s..

00003703 <__c.4411>:
    3703:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    3713:	75 6e 64 3a 25 73 0a 00                             und:%s..

0000371b <__c.4387>:
    371b:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

00003729 <__c.4385>:
    3729:	46 69 6c 65 20 53 65 63 74 6f 72 73 3a 20 20 20     File Sectors:   
    3739:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

00003742 <__c.4383>:
    3742:	46 69 72 73 74 20 53 65 63 74 6f 72 3a 20 20 20     First Sector:   
    3752:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

0000375b <__c.4381>:
    375b:	49 6e 64 65 78 3a 20 20 20 20 20 20 20 20 20 20     Index:          
    376b:	20 20 25 34 64 0a 00                                  %4d..

00003772 <__c.4379>:
    3772:	4e 61 6d 65 3a 20 20 20 20 20 20 20 20 20 20 20     Name:           
    3782:	20 20 20 25 73 0a 00                                   %s..

00003789 <__c.4377>:
    3789:	4e 65 77 20 44 69 72 65 63 74 6f 72 79 20 49 6e     New Directory In
    3799:	66 6f 72 6d 61 74 69 6f 6e 20 41 46 54 45 52 20     formation AFTER 
    37a9:	77 72 69 74 65 0a 00                                write..

000037b0 <__c.4375>:
    37b0:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    37c0:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    37d0:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

000037e0 <__c.4373>:
    37e0:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    37f0:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    3800:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

0000380f <__c.4371>:
    380f:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    381f:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    382f:	66 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 0a 00     file not found..

0000383f <__c.4369>:
    383f:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    384f:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    385f:	66 69 6c 65 20 69 73 20 65 6d 70 74 79 0a 00        file is empty..

0000386e <__c.4367>:
    386e:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    387e:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 6e     le_as_e010: lifn
    388e:	61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00           ame is empty..

0000389c <__c.4365>:
    389c:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    38ac:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 69     le_as_e010: lifi
    38bc:	6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d 70 74     magename is empt
    38cc:	79 0a 00                                            y..

000038cf <__c.4351>:
    38cf:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

000038dd <__c.4349>:
    38dd:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

000038eb <__c.4344>:
    38eb:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

000038f9 <__c.4327>:
    38f9:	45 78 70 65 63 74 65 64 20 73 65 63 74 6f 72 20     Expected sector 
    3909:	62 6f 75 6e 64 72 79 2c 20 6f 66 66 73 65 74 3a     boundry, offset:
    3919:	25 64 0a 00                                         %d..

0000391d <__c.4310>:
    391d:	6c 69 66 5f 65 30 31 30 5f 64 61 70 5f 73 65 63     lif_e010_dap_sec
    392d:	74 6f 72 3a 20 65 78 70 65 63 74 65 64 20 73 65     tor: expected se
    393d:	63 74 6f 72 20 62 6f 75 6e 64 72 79 3a 20 6f 66     ctor boundry: of
    394d:	66 73 65 74 3a 25 64 0a 00                          fset:%d..

00003956 <__c.4296>:
    3956:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    3966:	73 5d 20 6c 69 66 6c 61 62 65 6c 20 74 6f 6f 20     s] liflabel too 
    3976:	62 69 67 0a 00                                      big..

0000397b <__c.4294>:
    397b:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    398b:	73 5d 20 69 6e 76 61 6c 69 64 20 63 68 61 72 61     s] invalid chara
    399b:	63 74 65 72 73 0a 00                                cters..

000039a2 <__c.4287>:
    39a2:	25 38 6c 64 20 46 72 65 65 20 73 65 63 74 6f 72     %8ld Free sector
    39b2:	73 0a 00                                            s..

000039b5 <__c.4285>:
    39b5:	25 38 6c 64 20 55 73 65 64 20 73 65 63 74 6f 72     %8ld Used sector
    39c5:	73 0a 00                                            s..

000039c8 <__c.4283>:
    39c8:	25 38 6c 64 20 44 69 72 20 20 73 65 63 74 6f 72     %8ld Dir  sector
    39d8:	73 0a 00                                            s..

000039db <__c.4281>:
    39db:	25 38 6c 64 20 44 69 72 20 20 73 74 61 72 74 0a     %8ld Dir  start.
	...

000039ec <__c.4279>:
    39ec:	25 38 6c 64 20 50 75 72 67 65 64 0a 00              %8ld Purged..

000039f9 <__c.4277>:
    39f9:	25 38 6c 64 20 46 69 6c 65 73 0a 00                 %8ld Files..

00003a05 <__c.4275>:
    3a05:	0a 00                                               ..

00003a07 <__c.4272>:
    3a07:	25 2d 31 30 73 20 20 25 30 34 58 68 20 20 20 20     %-10s  %04Xh    
    3a17:	20 20 25 38 6c 58 68 20 20 20 25 39 6c 64 25 63       %8lXh   %9ld%c
    3a27:	20 20 20 20 20 20 25 34 64 20 20 20 25 73 0a 00           %4d   %s..

00003a37 <__c.4270>:
    3a37:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3a47:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    3a57:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3a67:	6f 72 73 3a 25 6c 64 20 21 3d 20 46 69 6c 65 53     ors:%ld != FileS
    3a77:	65 63 74 6f 72 73 3a 25 6c 64 0a 00                 ectors:%ld..

00003a83 <__c.4267>:
    3a83:	4e 41 4d 45 20 20 20 20 20 20 20 20 20 54 59 50     NAME         TYP
    3a93:	45 20 20 20 53 54 41 52 54 20 53 45 43 54 4f 52     E   START SECTOR
    3aa3:	20 20 20 20 20 20 20 20 53 49 5a 45 20 20 20 20             SIZE    
    3ab3:	52 45 43 53 49 5a 45 20 20 20 44 41 54 45 0a 00     RECSIZE   DATE..

00003ac3 <__c.4265>:
    3ac3:	56 6f 6c 75 6d 65 3a 5b 25 73 5d 20 44 61 74 65     Volume:[%s] Date
    3ad3:	3a 5b 25 73 5d 0a 00                                :[%s]..

00003ada <__c.4255>:
    3ada:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3aea:	5b 25 73 5d 20 65 72 72 6f 72 20 64 69 72 65 63     [%s] error direc
    3afa:	74 6f 72 79 20 63 68 65 63 6b 20 66 61 69 6c 65     tory check faile
    3b0a:	64 0a 00                                            d..

00003b0d <__c.4253>:
    3b0d:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3b1d:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    3b2d:	65 20 76 61 6c 69 64 61 74 65 20 66 61 69 6c 65     e validate faile
    3b3d:	64 0a 00                                            d..

00003b40 <__c.4251>:
    3b40:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3b50:	5b 25 73 5d 20 65 72 72 6f 72 20 72 65 61 64 20     [%s] error read 
    3b60:	76 6f 6c 75 6d 65 20 68 65 61 64 65 72 20 66 61     volume header fa
    3b70:	69 6c 65 64 0a 00                                   iled..

00003b76 <__c.4249>:
    3b76:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3b86:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    3b96:	65 20 68 65 61 64 65 72 20 61 72 65 61 20 74 6f     e header area to
    3ba6:	6f 20 73 6d 61 6c 6c 3a 5b 25 6c 64 5d 0a 00        o small:[%ld]..

00003bb5 <__c.4236>:
    3bb5:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 69 6e 64 65     lif_newdir: inde
    3bc5:	78 3a 5b 25 64 5d 20 61 64 64 69 6e 67 20 61 74     x:[%d] adding at
    3bd5:	3a 5b 25 6c 64 5d 74 6f 20 70 75 72 67 65 64 20     :[%ld]to purged 
    3be5:	73 70 61 63 65 3a 5b 25 6c 64 5d 20 73 65 63 74     space:[%ld] sect
    3bf5:	6f 72 73 2c 20 66 72 65 65 3a 5b 25 6c 64 5d 0a     ors, free:[%ld].
	...

00003c06 <__c.4233>:
    3c06:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    3c16:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    3c26:	65 3a 5b 25 6c 64 5d 0a 00                          e:[%ld]..

00003c2f <__c.4231>:
    3c2f:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    3c3f:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    3c4f:	65 3a 5b 25 6c 64 5d 20 66 6f 72 20 73 69 7a 65     e:[%ld] for size
    3c5f:	3a 5b 25 6c 64 5d 0a 00                             :[%ld]..

00003c67 <__c.4219>:
    3c67:	6c 69 66 5f 75 70 64 61 74 65 5f 66 72 65 65 3a     lif_update_free:
    3c77:	5b 25 73 5d 20 65 72 72 6f 72 20 70 72 65 76 69     [%s] error previ
    3c87:	6f 75 73 20 72 65 63 6f 72 64 20 66 69 6c 65 20     ous record file 
    3c97:	61 72 65 61 20 6f 76 65 72 6c 61 70 73 20 74 68     area overlaps th
    3ca7:	69 73 20 6f 6e 65 3a 5b 25 73 5d 0a 00              is one:[%s]..

00003cb4 <__c.4194>:
    3cb4:	6c 69 66 5f 63 68 65 63 6b 5f 64 69 72 3a 20 65     lif_check_dir: e
    3cc4:	72 72 6f 72 2c 20 69 6e 64 65 78 3a 25 64 0a 00     rror, index:%d..

00003cd4 <__c.4185>:
    3cd4:	6c 69 66 5f 63 68 65 63 6b 64 69 72 69 6e 64 65     lif_checkdirinde
    3ce4:	78 3a 5b 25 73 5d 20 64 69 72 65 63 6f 72 79 20     x:[%s] direcory 
    3cf4:	69 6e 64 65 78 3a 5b 25 64 5d 20 6f 75 74 20 6f     index:[%d] out o
    3d04:	66 20 62 6f 75 6e 64 73 0a 00                       f bounds..

00003d0e <__c.4166>:
    3d0e:	09 57 72 6f 74 65 3a 20 25 6c 64 0a 00              .Wrote: %ld..

00003d1b <__c.4161>:
    3d1b:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

00003d28 <__c.4156>:
    3d28:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

00003d35 <__c.4148>:
    3d35:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

00003d42 <__c.4146>:
    3d42:	43 72 65 61 74 69 6e 67 3a 25 73 2c 20 4c 61 62     Creating:%s, Lab
    3d52:	65 6c 3a 5b 25 73 5d 2c 20 44 69 72 65 63 74 6f     el:[%s], Directo
    3d62:	72 79 20 53 74 61 72 74 20 25 6c 64 2c 20 44 69     ry Start %ld, Di
    3d72:	72 65 63 74 6f 72 79 20 53 69 7a 65 3a 20 25 6c     rectory Size: %l
    3d82:	64 2c 20 46 69 6c 65 20 53 65 63 74 6f 72 73 3a     d, File Sectors:
    3d92:	25 6c 64 0a 00                                      %ld..

00003d97 <__c.4130>:
    3d97:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3da7:	73 5d 20 69 6e 76 61 6c 69 64 20 73 65 63 74 6f     s] invalid secto
    3db7:	72 20 73 69 7a 65 3a 25 6c 64 0a 00                 r size:%ld..

00003dc3 <__c.4128>:
    3dc3:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3dd3:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3de3:	79 74 65 73 20 3d 3d 20 30 0a 00                    ytes == 0..

00003dee <__c.4126>:
    3dee:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3dfe:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    3e0e:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3e1e:	6f 72 73 3a 25 6c 64 20 3c 20 46 69 6c 65 53 65     ors:%ld < FileSe
    3e2e:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003e39 <__c.4124>:
    3e39:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3e49:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3e59:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3e69:	6f 72 73 3a 25 6c 64 20 3e 20 46 69 6c 65 53 65     ors:%ld > FileSe
    3e79:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003e84 <__c.4122>:
    3e84:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3e94:	73 5d 20 69 6e 76 61 6c 69 64 20 56 6f 6c 75 6d     s] invalid Volum
    3ea4:	65 20 4e 75 6d 62 65 72 3a 25 58 68 0a 00           e Number:%Xh..

00003eb2 <__c.4120>:
    3eb2:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3ec2:	73 5d 20 69 6e 76 61 6c 69 64 20 65 6e 64 20 73     s] invalid end s
    3ed2:	65 63 74 6f 72 3a 25 6c 58 68 20 3e 20 74 6f 74     ector:%lXh > tot
    3ee2:	61 6c 20 73 65 63 74 6f 72 73 3a 25 6c 58 68 0a     al sectors:%lXh.
	...

00003ef3 <__c.4118>:
    3ef3:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3f03:	73 5d 20 69 6e 76 61 6c 69 64 20 73 74 61 72 74     s] invalid start
    3f13:	20 73 65 63 74 6f 72 3a 25 6c 58 68 20 3c 20 66      sector:%lXh < f
    3f23:	69 65 20 61 72 65 61 20 73 74 61 72 74 3a 25 6c     ie area start:%l
    3f33:	58 68 0a 00                                         Xh..

00003f37 <__c.4116>:
    3f37:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3f47:	73 5d 20 69 6e 76 61 6c 69 64 20 4e 61 6d 65 0a     s] invalid Name.
	...

00003f58 <__c.4110>:
    3f58:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3f68:	69 64 20 66 69 6c 65 20 73 74 61 72 74 20 3e 20     id file start > 
    3f78:	69 6d 61 67 65 20 73 69 7a 65 0a 00                 image size..

00003f84 <__c.4108>:
    3f84:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3f94:	69 64 20 44 69 72 65 63 74 6f 72 79 20 53 65 63     id Directory Sec
    3fa4:	74 6f 72 20 43 6f 75 6e 74 20 3c 20 31 0a 00        tor Count < 1..

00003fb3 <__c.4106>:
    3fb3:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3fc3:	69 64 20 73 74 61 72 74 20 73 65 63 74 6f 72 3a     id start sector:
    3fd3:	25 6c 64 0a 00                                      %ld..

00003fd8 <__c.4104>:
    3fd8:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3fe8:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    3ff8:	65 74 20 32 32 26 32 33 20 73 68 6f 75 6c 64 20     et 22&23 should 
    4008:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00004011 <__c.4102>:
    4011:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    4021:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    4031:	65 74 20 31 34 26 31 35 20 73 68 6f 75 6c 64 20     et 14&15 should 
    4041:	62 65 20 7a 65 72 6f 0a 00                          be zero..

0000404a <__c.4100>:
    404a:	4c 49 46 20 56 65 72 73 69 6f 6e 3a 20 25 30 34     LIF Version: %04
    405a:	58 48 20 3e 20 31 0a 00                             XH > 1..

00004062 <__c.4098>:
    4062:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    4072:	69 64 20 53 79 73 74 65 6d 33 30 30 30 20 49 44     id System3000 ID
    4082:	20 28 25 30 34 58 48 29 20 65 78 70 65 63 74 65      (%04XH) expecte
    4092:	64 20 31 30 30 30 48 0a 00                          d 1000H..

0000409b <__c.4096>:
    409b:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    40ab:	69 64 20 56 6f 6c 75 6d 65 20 4e 61 6d 65 00        id Volume Name.

000040ba <__c.4089>:
    40ba:	0a 00                                               ..

000040bc <__c.4087>:
    40bc:	44 49 52 20 46 69 6c 65 20 44 61 74 65 3a 20 20     DIR File Date:  
    40cc:	20 20 20 20 20 20 25 73 0a 00                             %s..

000040d6 <__c.4085>:
    40d6:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 20     DIR File sector 
    40e6:	73 69 7a 65 3a 20 25 38 58 68 0a 00                 size: %8Xh..

000040f2 <__c.4083>:
    40f2:	44 49 52 20 46 69 6c 65 20 62 79 74 65 73 3a 20     DIR File bytes: 
    4102:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

0000410f <__c.4081>:
    410f:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 73     DIR File sectors
    411f:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

0000412c <__c.4079>:
    412c:	44 49 52 20 46 69 6c 65 20 73 74 61 72 74 3a 20     DIR File start: 
    413c:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004149 <__c.4077>:
    4149:	44 49 52 20 46 69 6c 65 20 56 6f 6c 75 6d 65 23     DIR File Volume#
    4159:	3a 20 20 20 20 20 25 38 58 68 0a 00                 :     %8Xh..

00004165 <__c.4075>:
    4165:	44 49 52 20 46 69 6c 65 20 54 79 70 65 3a 20 20     DIR File Type:  
    4175:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00004181 <__c.4073>:
    4181:	44 49 52 20 46 69 6c 65 20 4e 61 6d 65 3a 20 20     DIR File Name:  
    4191:	20 20 20 20 20 20 25 73 0a 00                             %s..

0000419b <__c.4071>:
    419b:	56 4f 4c 20 44 61 74 65 3a 20 20 20 20 20 20 20     VOL Date:       
    41ab:	20 20 20 20 20 20 25 73 0a 00                             %s..

000041b5 <__c.4069>:
    41b5:	56 4f 4c 20 4c 49 46 56 65 72 73 69 6f 6e 3a 20     VOL LIFVersion: 
    41c5:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

000041d1 <__c.4067>:
    41d1:	56 4f 4c 20 33 30 30 30 4c 49 46 69 64 3a 20 20     VOL 3000LIFid:  
    41e1:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

000041ed <__c.4065>:
    41ed:	56 4f 4c 20 44 69 72 20 73 65 63 74 6f 72 73 3a     VOL Dir sectors:
    41fd:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

0000420a <__c.4063>:
    420a:	56 4f 4c 20 44 69 72 20 73 74 61 72 74 3a 20 20     VOL Dir start:  
    421a:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004227 <__c.4061>:
    4227:	56 4f 4c 20 4c 49 46 69 64 3a 20 20 20 20 20 20     VOL LIFid:      
    4237:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00004243 <__c.4059>:
    4243:	56 4f 4c 20 4c 61 62 65 6c 3a 20 20 20 20 20 20     VOL Label:      
    4253:	20 20 20 20 20 20 25 73 0a 00                             %s..

0000425d <__c.4057>:
    425d:	4c 49 46 20 70 75 72 67 65 64 3a 20 20 20 20 20     LIF purged:     
    426d:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

0000427a <__c.4055>:
    427a:	4c 49 46 20 66 69 6c 65 73 3a 20 20 20 20 20 20     LIF files:      
    428a:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004297 <__c.4053>:
    4297:	4c 49 46 20 66 72 65 65 3a 20 20 20 20 20 20 20     LIF free:       
    42a7:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000042b4 <__c.4051>:
    42b4:	4c 49 46 20 75 73 65 64 3a 20 20 20 20 20 20 20     LIF used:       
    42c4:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000042d1 <__c.4049>:
    42d1:	4c 49 46 20 66 69 6c 65 20 73 65 63 74 6f 72 73     LIF file sectors
    42e1:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

000042ee <__c.4047>:
    42ee:	4c 49 46 20 66 69 6c 65 73 74 61 72 74 3a 20 20     LIF filestart:  
    42fe:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

0000430b <__c.4045>:
    430b:	4c 49 46 20 62 79 74 65 73 3a 20 20 20 20 20 20     LIF bytes:      
    431b:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004328 <__c.4043>:
    4328:	4c 49 46 20 73 65 63 74 6f 72 73 3a 20 20 20 20     LIF sectors:    
    4338:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004345 <__c.4041>:
    4345:	4c 49 46 20 6e 61 6d 65 3a 20 20 20 20 20 20 20     LIF name:       
    4355:	20 20 20 20 20 20 25 73 0a 00                             %s..

0000435f <__c.4039>:
    435f:	0a 25 73 0a 00                                      .%s..

00004364 <__c.3916>:
    4364:	6c 69 66 5f 77 72 69 74 65 3a 20 57 72 69 74 65     lif_write: Write
    4374:	3a 5b 25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c     :[%s] offset:[%l
    4384:	64 5d 20 77 72 69 74 65 3a 5b 25 64 5d 20 65 78     d] write:[%d] ex
    4394:	70 65 63 74 65 64 3a 5b 25 64 5d 0a 00              pected:[%d]..

000043a1 <__c.3907>:
    43a1:	6c 69 66 5f 72 65 61 64 3a 20 72 65 61 64 3a 5b     lif_read: read:[
    43b1:	25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c 64 5d     %s] offset:[%ld]
    43c1:	20 77 72 69 74 65 3a 5b 25 6c 64 5d 20 65 78 70      write:[%ld] exp
    43d1:	65 63 74 65 64 3a 5b 25 64 5d 0a 00                 ected:[%d]..

000043dd <__c.3898>:
    43dd:	6c 69 66 5f 72 65 61 64 5f 6d 73 67 3a 20 25 73     lif_read_msg: %s
    43ed:	20 53 65 65 6b 20 65 72 72 6f 72 20 25 6c 64 0a      Seek error %ld.
	...

000043fe <__c.3891>:
    43fe:	6c 69 66 5f 73 74 61 74 3a 20 43 61 6e 27 74 20     lif_stat: Can't 
    440e:	73 74 61 74 3a 25 73 0a 00                          stat:%s..

00004417 <__c.3885>:
    4417:	6c 69 66 5f 6f 70 65 6e 3a 20 43 61 6e 27 74 20     lif_open: Can't 
    4427:	6f 70 65 6e 3a 5b 25 73 5d 20 6d 6f 64 65 3a 5b     open:[%s] mode:[
    4437:	25 73 5d 0a 00                                      %s]..

0000443c <__c.3873>:
    443c:	6c 69 66 5f 66 72 65 65 3a 20 4e 55 4c 4c 20 70     lif_free: NULL p
    444c:	6f 69 6e 74 65 72 0a 00                             ointer..

00004454 <__c.3868>:
    4454:	6c 69 66 5f 63 61 6c 6c 6f 63 3a 5b 25 6c 64 5d     lif_calloc:[%ld]
    4464:	20 6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65      not enough free
    4474:	20 6d 65 6d 6f 72 79 0a 00                           memory..

0000447d <__c.3862>:
    447d:	74 64 30 32 6c 69 66 20 73 75 70 70 6f 72 74 20     td02lif support 
    448d:	6e 6f 74 20 65 6e 61 62 6c 65 64 0a 00              not enabled..

0000449a <__c.3860>:
    449a:	44 69 73 6b 3a 20 25 73 20 6e 6f 74 20 66 6f 75     Disk: %s not fou
    44aa:	6e 64 20 69 6e 20 68 70 64 69 72 2e 69 6e 69 0a     nd in hpdir.ini.
	...

000044bb <__c.3847>:
    44bb:	6c 69 66 20 61 64 64 20 6c 69 66 69 6d 61 67 65     lif add lifimage
    44cb:	20 6c 69 66 6e 61 6d 65 20 66 72 6f 6d 5f 61 73      lifname from_as
    44db:	63 69 69 5f 66 69 6c 65 0a 6c 69 66 20 61 64 64     cii_file.lif add
    44eb:	62 69 6e 20 6c 69 66 69 6d 61 67 65 20 6c 69 66     bin lifimage lif
    44fb:	6e 61 6d 65 20 66 72 6f 6d 5f 6c 69 66 5f 66 69     name from_lif_fi
    450b:	6c 65 0a 6c 69 66 20 63 72 65 61 74 65 20 6c 69     le.lif create li
    451b:	66 69 6d 61 67 65 20 6c 61 62 65 6c 20 64 69 72     fimage label dir
    452b:	65 63 74 6f 72 79 5f 73 65 63 74 6f 72 73 20 73     ectory_sectors s
    453b:	65 63 74 6f 72 73 0a 6c 69 66 20 63 72 65 61 74     ectors.lif creat
    454b:	65 64 69 73 6b 20 6c 69 66 69 6d 61 67 65 20 6c     edisk lifimage l
    455b:	61 62 65 6c 20 6d 6f 64 65 6c 0a 6c 69 66 20 64     abel model.lif d
    456b:	65 6c 20 6c 69 66 69 6d 61 67 65 20 6e 61 6d 65     el lifimage name
    457b:	0a 6c 69 66 20 64 69 72 20 6c 69 66 69 6d 61 67     .lif dir lifimag
    458b:	65 0a 6c 69 66 20 65 78 74 72 61 63 74 20 6c 69     e.lif extract li
    459b:	66 69 6d 61 67 65 20 6c 69 66 6e 61 6d 65 20 74     fimage lifname t
    45ab:	6f 5f 61 73 63 69 69 5f 66 69 6c 65 0a 6c 69 66     o_ascii_file.lif
    45bb:	20 65 78 74 72 61 63 74 62 69 6e 20 6c 69 66 69      extractbin lifi
    45cb:	6d 61 67 65 20 6c 69 66 6e 61 6d 65 20 74 6f 5f     mage lifname to_
    45db:	6c 69 66 5f 66 69 6c 65 0a 20 20 20 20 65 78 74     lif_file.    ext
    45eb:	72 61 63 74 73 20 61 20 66 69 6c 65 20 69 6e 74     racts a file int
    45fb:	6f 20 61 20 73 69 67 6c 65 20 66 69 6c 65 20 4c     o a sigle file L
    460b:	49 46 20 69 6d 61 67 65 0a 6c 69 66 20 72 65 6e     IF image.lif ren
    461b:	61 6d 65 20 6c 69 66 69 6d 61 67 65 20 6f 6c 64     ame lifimage old
    462b:	6c 69 66 6e 61 6d 65 20 6e 65 77 6c 69 66 6e 61     lifname newlifna
    463b:	6d 65 0a 55 73 65 20 2d 64 20 20 61 66 74 65 72     me.Use -d  after
    464b:	20 27 6c 69 66 27 20 6b 65 79 77 6f 72 64 20 74      'lif' keyword t
    465b:	6f 20 65 6e 61 62 6c 65 20 4c 49 46 20 66 69 6c     o enable LIF fil
    466b:	65 73 79 73 74 65 6d 20 64 65 62 75 67 67 69 6e     esystem debuggin
    467b:	67 0a 0a 00                                         g...

0000467f <__c.3845>:
    467f:	6c 69 66 20 20 20 68 65 6c 70 0a 00                 lif   help..

0000468b <__c.4634>:
    468b:	53 74 61 72 74 69 6e 67 20 47 50 49 42 20 54 41     Starting GPIB TA
    469b:	53 4b 0a 00                                         SK..

0000469f <__c.4632>:
    469f:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    46af:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

000046b9 <__c.4630>:
    46b9:	25 2d 31 36 73 00                                   %-16s.

000046bf <__c.4628>:
    46bf:	25 2d 31 36 73 00                                   %-16s.

000046c5 <__c.4626>:
    46c5:	53 53 38 30 3d 25 64 20 41 4d 49 47 4f 3d 25 64     SS80=%d AMIGO=%d
	...

000046d6 <__c.4624>:
    46d6:	64 65 62 75 67 6c 65 76 65 6c 20 20 20 3d 20 25     debuglevel   = %
    46e6:	30 34 78 48 0a 00                                   04xH..

000046ec <__c.4622>:
    46ec:	47 50 49 42 20 53 74 61 74 65 20 69 6e 69 74 20     GPIB State init 
    46fc:	64 6f 6e 65 0a 00                                   done..

00004702 <__c.4620>:
    4702:	47 50 49 42 20 46 69 6c 65 20 69 6e 69 74 20 64     GPIB File init d
    4712:	6f 6e 65 0a 00                                      one..

00004717 <__c.4618>:
    4717:	47 50 49 42 20 54 69 6d 65 72 20 69 6e 69 74 69     GPIB Timer initi
    4727:	61 6c 69 7a 65 64 0a 00                             alized..

0000472f <__c.4616>:
    472f:	47 50 49 42 20 54 69 6d 65 72 20 53 65 74 75 70     GPIB Timer Setup
    473f:	0a 00                                               ..

00004741 <__c.4614>:
    4741:	50 72 69 6e 74 65 72 20 69 6e 69 74 69 61 6c 69     Printer initiali
    4751:	7a 65 64 0a 00                                      zed..

00004756 <__c.4612>:
    4756:	47 50 49 42 20 62 75 73 20 69 6e 69 74 69 61 6c     GPIB bus initial
    4766:	69 7a 65 64 0a 00                                   ized..

0000476c <__c.4610>:
    476c:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 65 64 0a     MMC initialized.
	...

0000477d <__c.4608>:
    477d:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 69 6e 67     MMC initializing
    478d:	20 73 74 61 72 74 0a 00                              start..

00004795 <__c.4606>:
    4795:	53 79 73 74 65 6d 20 54 61 73 6b 20 49 6e 74 65     System Task Inte
    47a5:	72 72 75 70 74 20 52 61 74 65 3a 20 25 6c 64 20     rrupt Rate: %ld 
    47b5:	4e 61 6e 6f 20 53 65 63 6f 6e 64 73 0a 00           Nano Seconds..

000047c3 <__c.4604>:
    47c3:	43 6c 6f 63 6b 20 63 6c 65 61 72 65 64 0a 00        Clock cleared..

000047d2 <__c.4602>:
    47d2:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 52 54 43     Initializing RTC
    47e2:	0a 00                                               ..

000047e4 <__c.4600>:
    47e4:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 49 32 43     Initializing I2C
    47f4:	20 62 75 73 0a 00                                    bus..

000047fa <__c.4598>:
    47fa:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 53 50 49     Initializing SPI
    480a:	20 62 75 73 0a 00                                    bus..

00004810 <__c.4596>:
    4810:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    4820:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

0000482a <__c.4594>:
    482a:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    483a:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

00004844 <__c.4592>:
    4844:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    4854:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    4864:	35 64 69 73 6b 0a 00                                5disk..

0000486b <__c.4590>:
    486b:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

0000487b <__c.4588>:
    487b:	20 28 43 29 20 32 30 31 34 2d 32 30 32 30 20 62      (C) 2014-2020 b
    488b:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

00004898 <__c.4586>:
    4898:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    48a8:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

000048b7 <__c.4584>:
    48b7:	52 65 71 75 65 73 74 65 64 20 42 61 75 64 20 52     Requested Baud R
    48c7:	61 74 65 3a 20 25 6c 64 2c 20 41 63 74 75 61 6c     ate: %ld, Actual
    48d7:	3a 20 25 6c 64 0a 00                                : %ld..

000048de <__c.4582>:
    48de:	43 50 55 20 43 6c 6f 63 6b 20 3d 20 25 6c 75 0a     CPU Clock = %lu.
	...

000048ef <__c.4580>:
    48ef:	53 74 61 72 74 0a 00                                Start..

000048f6 <__c.4568>:
    48f6:	20 20 20 20 20 20 20 5b 25 73 5d 0a 00                     [%s]..

00004903 <__c.4566>:
    4903:	20 20 20 20 41 72 67 75 6d 65 6e 74 20 63 6f 75         Argument cou
    4913:	6e 74 20 3d 20 25 64 0a 00                          nt = %d..

0000491c <__c.4564>:
    491c:	49 6e 76 61 6c 69 64 20 43 6f 6d 6d 61 6e 64 0a     Invalid Command.
	...

0000492d <__c.4562>:
    492d:	43 6f 6d 6d 61 6e 64 20 46 41 49 4c 45 44 0a 00     Command FAILED..

0000493d <__c.4560>:
    493d:	4f 4b 0a 00                                         OK..

00004941 <__c.4552>:
    4941:	49 6e 70 75 74 20 64 65 62 75 67 67 69 6e 67 3a     Input debugging:
    4951:	20 25 73 0a 00                                       %s..

00004956 <__c.4547>:
    4956:	20 20 20 5b 25 73 5d 0a 00                             [%s]..

0000495f <__c.4545>:
    495f:	41 72 67 75 6d 65 6e 74 20 63 6f 75 6e 74 20 3d     Argument count =
    496f:	20 25 64 0a 00                                       %d..

00004974 <__c.4543>:
    4974:	0a 3e 00                                            .>.

00004977 <__c.4530>:
    4977:	62 61 63 6b 6c 69 67 68 74 20 30 78 52 52 47 47     backlight 0xRRGG
    4987:	42 42 0a 68 65 6c 70 0a 64 69 72 20 64 69 72 65     BB.help.dir dire
    4997:	63 74 6f 72 69 65 73 20 6f 72 20 66 69 6c 65 20     ctories or file 
    49a7:	6c 69 73 74 0a 69 6e 70 75 74 20 20 20 2d 20 74     list.input   - t
    49b7:	6f 67 67 6c 65 20 69 6e 70 75 74 20 64 65 62 75     oggle input debu
    49c7:	67 67 69 6e 67 0a 6d 65 6d 20 20 20 20 20 2d 20     gging.mem     - 
    49d7:	64 69 73 70 6c 61 79 20 66 72 65 65 20 6d 65 6d     display free mem
    49e7:	6f 72 79 0a 72 65 73 65 74 20 20 20 2d 20 72 65     ory.reset   - re
    49f7:	73 65 74 20 65 6d 75 6c 61 74 6f 72 0a 73 65 74     set emulator.set
    4a07:	64 61 74 65 20 2d 20 73 65 74 20 64 61 74 65 0a     date - set date.
    4a17:	74 69 6d 65 20 20 20 20 2d 20 64 69 73 70 6c 61     time    - displa
    4a27:	79 20 63 75 72 72 65 6e 74 20 74 69 6d 65 0a 0a     y current time..
	...

00004a38 <__c.4523>:
    4a38:	25 2d 31 36 73 00                                   %-16s.

00004a3e <__c.4521>:
    4a3e:	25 2d 31 36 73 00                                   %-16s.

00004a44 <__c.4514>:
    4a44:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    4a54:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

00004a5e <__c.4512>:
    4a5e:	25 2d 31 36 73 00                                   %-16s.

00004a64 <__c.4510>:
    4a64:	25 2d 31 36 73 00                                   %-16s.

00004a6a <__c.4508>:
    4a6a:	6c 63 64 5f 74 61 73 6b 20 69 6e 69 74 20 66 61     lcd_task init fa
    4a7a:	69 6c 65 64 0a 00                                   iled..

00004a80 <__c.4506>:
    4a80:	49 32 43 20 4c 43 44 20 69 6e 69 74 69 61 6c 69     I2C LCD initiali
    4a90:	7a 61 74 69 6f 6e 20 73 74 61 72 74 0a 00           zation start..

00004a9e <__c.4500>:
    4a9e:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    4aae:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

00004ab8 <__c.4494>:
    4ab8:	25 73 20 25 32 64 20 25 30 32 64 3a 25 30 32 64     %s %2d %02d:%02d
    4ac8:	3a 25 30 32 64 00                                   :%02d.

00004ace <__c.4480>:
    4ace:	0a 00                                               ..

00004ad0 <__c.4478>:
    4ad0:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    4ae0:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

00004aea <__c.4476>:
    4aea:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    4afa:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

00004b04 <__c.4474>:
    4b04:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    4b14:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    4b24:	35 64 69 73 6b 0a 00                                5disk..

00004b2b <__c.4472>:
    4b2b:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

00004b3b <__c.4470>:
    4b3b:	20 28 63 29 20 32 30 31 34 2d 32 30 32 30 20 62      (c) 2014-2020 b
    4b4b:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

00004b58 <__c.4468>:
    4b58:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    4b68:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

00004b77 <__c.4466>:
    4b77:	53 74 61 6e 64 20 61 6c 6f 6e 65 20 76 65 72 73     Stand alone vers
    4b87:	69 6f 6e 20 6f 66 20 4c 49 46 20 75 74 69 6c 69     ion of LIF utili
    4b97:	74 69 65 73 20 66 6f 72 20 6c 69 6e 75 78 0a 00     ties for linux..
	...

00004ba8 <__ctors_end>:
    4ba8:	11 24       	eor	r1, r1
    4baa:	1f be       	out	0x3f, r1	; 63
    4bac:	cf ef       	ldi	r28, 0xFF	; 255
    4bae:	d0 e4       	ldi	r29, 0x40	; 64
    4bb0:	de bf       	out	0x3e, r29	; 62
    4bb2:	cd bf       	out	0x3d, r28	; 61

00004bb4 <__do_copy_data>:
    4bb4:	17 e1       	ldi	r17, 0x17	; 23
    4bb6:	a0 e0       	ldi	r26, 0x00	; 0
    4bb8:	b1 e0       	ldi	r27, 0x01	; 1
    4bba:	e8 e7       	ldi	r30, 0x78	; 120
    4bbc:	f5 ed       	ldi	r31, 0xD5	; 213
    4bbe:	01 e0       	ldi	r16, 0x01	; 1
    4bc0:	0b bf       	out	0x3b, r16	; 59
    4bc2:	02 c0       	rjmp	.+4      	; 0x4bc8 <__do_copy_data+0x14>
    4bc4:	07 90       	elpm	r0, Z+
    4bc6:	0d 92       	st	X+, r0
    4bc8:	ae 34       	cpi	r26, 0x4E	; 78
    4bca:	b1 07       	cpc	r27, r17
    4bcc:	d9 f7       	brne	.-10     	; 0x4bc4 <__do_copy_data+0x10>

00004bce <__do_clear_bss>:
    4bce:	20 e2       	ldi	r18, 0x20	; 32
    4bd0:	ae e4       	ldi	r26, 0x4E	; 78
    4bd2:	b7 e1       	ldi	r27, 0x17	; 23
    4bd4:	01 c0       	rjmp	.+2      	; 0x4bd8 <.do_clear_bss_start>

00004bd6 <.do_clear_bss_loop>:
    4bd6:	1d 92       	st	X+, r1

00004bd8 <.do_clear_bss_start>:
    4bd8:	a0 33       	cpi	r26, 0x30	; 48
    4bda:	b2 07       	cpc	r27, r18
    4bdc:	e1 f7       	brne	.-8      	; 0x4bd6 <.do_clear_bss_loop>
    4bde:	0e 94 2b e4 	call	0x1c856	; 0x1c856 <main>
    4be2:	0c 94 ba ea 	jmp	0x1d574	; 0x1d574 <_exit>

00004be6 <__bad_interrupt>:
    4be6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00004bea <chip_select>:
#endif
#ifdef AVR
    SPI0_RX(&data,1);
#endif
    return(data);
}
    4bea:	e8 2f       	mov	r30, r24
    4bec:	e6 95       	lsr	r30
    4bee:	e6 95       	lsr	r30
    4bf0:	e6 95       	lsr	r30
    4bf2:	93 e0       	ldi	r25, 0x03	; 3
    4bf4:	e9 9f       	mul	r30, r25
    4bf6:	f0 01       	movw	r30, r0
    4bf8:	11 24       	eor	r1, r1
    4bfa:	32 a1       	ldd	r19, Z+34	; 0x22
    4bfc:	28 2f       	mov	r18, r24
    4bfe:	27 70       	andi	r18, 0x07	; 7
    4c00:	81 e0       	ldi	r24, 0x01	; 1
    4c02:	90 e0       	ldi	r25, 0x00	; 0
    4c04:	01 c0       	rjmp	.+2      	; 0x4c08 <chip_select+0x1e>
    4c06:	88 0f       	add	r24, r24
    4c08:	2a 95       	dec	r18
    4c0a:	ea f7       	brpl	.-6      	; 0x4c06 <chip_select+0x1c>
    4c0c:	98 2f       	mov	r25, r24
    4c0e:	90 95       	com	r25
    4c10:	93 23       	and	r25, r19
    4c12:	92 a3       	std	Z+34, r25	; 0x22
    4c14:	91 a1       	ldd	r25, Z+33	; 0x21
    4c16:	89 2b       	or	r24, r25
    4c18:	81 a3       	std	Z+33, r24	; 0x21
    4c1a:	08 95       	ret

00004c1c <chip_deselect>:
    4c1c:	e8 2f       	mov	r30, r24
    4c1e:	e6 95       	lsr	r30
    4c20:	e6 95       	lsr	r30
    4c22:	e6 95       	lsr	r30
    4c24:	93 e0       	ldi	r25, 0x03	; 3
    4c26:	e9 9f       	mul	r30, r25
    4c28:	f0 01       	movw	r30, r0
    4c2a:	11 24       	eor	r1, r1
    4c2c:	32 a1       	ldd	r19, Z+34	; 0x22
    4c2e:	28 2f       	mov	r18, r24
    4c30:	27 70       	andi	r18, 0x07	; 7
    4c32:	81 e0       	ldi	r24, 0x01	; 1
    4c34:	90 e0       	ldi	r25, 0x00	; 0
    4c36:	01 c0       	rjmp	.+2      	; 0x4c3a <chip_deselect+0x1e>
    4c38:	88 0f       	add	r24, r24
    4c3a:	2a 95       	dec	r18
    4c3c:	ea f7       	brpl	.-6      	; 0x4c38 <chip_deselect+0x1c>
    4c3e:	93 2f       	mov	r25, r19
    4c40:	98 2b       	or	r25, r24
    4c42:	92 a3       	std	Z+34, r25	; 0x22
    4c44:	91 a1       	ldd	r25, Z+33	; 0x21
    4c46:	89 2b       	or	r24, r25
    4c48:	81 a3       	std	Z+33, r24	; 0x21
    4c4a:	08 95       	ret

00004c4c <chip_select_init>:
    4c4c:	e7 cf       	rjmp	.-50     	; 0x4c1c <chip_deselect>
    4c4e:	08 95       	ret

00004c50 <spi_end>:
    4c50:	cf 93       	push	r28
    4c52:	ad b7       	in	r26, 0x3d	; 61
    4c54:	be b7       	in	r27, 0x3e	; 62
    4c56:	17 97       	sbiw	r26, 0x07	; 7
    4c58:	0f b6       	in	r0, 0x3f	; 63
    4c5a:	f8 94       	cli
    4c5c:	be bf       	out	0x3e, r27	; 62
    4c5e:	0f be       	out	0x3f, r0	; 63
    4c60:	ad bf       	out	0x3d, r26	; 61
    4c62:	c8 2f       	mov	r28, r24
    4c64:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_cs_pin>
    4c68:	8c 17       	cp	r24, r28
    4c6a:	99 f0       	breq	.+38     	; 0x4c92 <spi_end+0x42>
    4c6c:	8f 3f       	cpi	r24, 0xFF	; 255
    4c6e:	89 f0       	breq	.+34     	; 0x4c92 <spi_end+0x42>
    4c70:	2c 2f       	mov	r18, r28
    4c72:	30 e0       	ldi	r19, 0x00	; 0
    4c74:	ed b7       	in	r30, 0x3d	; 61
    4c76:	fe b7       	in	r31, 0x3e	; 62
    4c78:	37 83       	std	Z+7, r19	; 0x07
    4c7a:	26 83       	std	Z+6, r18	; 0x06
    4c7c:	90 e0       	ldi	r25, 0x00	; 0
    4c7e:	95 83       	std	Z+5, r25	; 0x05
    4c80:	84 83       	std	Z+4, r24	; 0x04
    4c82:	82 ec       	ldi	r24, 0xC2	; 194
    4c84:	91 e0       	ldi	r25, 0x01	; 1
    4c86:	a0 e0       	ldi	r26, 0x00	; 0
    4c88:	81 83       	std	Z+1, r24	; 0x01
    4c8a:	92 83       	std	Z+2, r25	; 0x02
    4c8c:	a3 83       	std	Z+3, r26	; 0x03
    4c8e:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    4c92:	8c 2f       	mov	r24, r28
    4c94:	c3 df       	rcall	.-122    	; 0x4c1c <chip_deselect>
    4c96:	8f ef       	ldi	r24, 0xFF	; 255
    4c98:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_cs_pin>
    4c9c:	ad b7       	in	r26, 0x3d	; 61
    4c9e:	be b7       	in	r27, 0x3e	; 62
    4ca0:	17 96       	adiw	r26, 0x07	; 7
    4ca2:	0f b6       	in	r0, 0x3f	; 63
    4ca4:	f8 94       	cli
    4ca6:	be bf       	out	0x3e, r27	; 62
    4ca8:	0f be       	out	0x3f, r0	; 63
    4caa:	ad bf       	out	0x3d, r26	; 61
    4cac:	cf 91       	pop	r28
    4cae:	08 95       	ret

00004cb0 <spi_TX_buffer>:
    4cb0:	cd c4       	rjmp	.+2458   	; 0x564c <SPI0_TX>
    4cb2:	08 95       	ret

00004cb4 <spi_RX_buffer>:
    4cb4:	f5 c4       	rjmp	.+2538   	; 0x56a0 <SPI0_RX>
    4cb6:	08 95       	ret

00004cb8 <spi_TX>:

/// @brief SPI write 1 byte
/// @param[in] data: value to transmit
/// @return  void
void spi_TX(uint8_t data)
{
    4cb8:	a1 e0       	ldi	r26, 0x01	; 1
    4cba:	b0 e0       	ldi	r27, 0x00	; 0
    4cbc:	e2 e6       	ldi	r30, 0x62	; 98
    4cbe:	f6 e2       	ldi	r31, 0x26	; 38
    4cc0:	0c 94 cb e6 	jmp	0x1cd96	; 0x1cd96 <__prologue_saves__+0x20>
    4cc4:	89 83       	std	Y+1, r24	; 0x01
#ifdef ESP8266
    hspi_TX(&data,1);
#endif
#ifdef AVR
    SPI0_TX(&data,1);
    4cc6:	61 e0       	ldi	r22, 0x01	; 1
    4cc8:	70 e0       	ldi	r23, 0x00	; 0
    4cca:	ce 01       	movw	r24, r28
    4ccc:	01 96       	adiw	r24, 0x01	; 1
    4cce:	be d4       	rcall	.+2428   	; 0x564c <SPI0_TX>
#endif
}
    4cd0:	21 96       	adiw	r28, 0x01	; 1
    4cd2:	e2 e0       	ldi	r30, 0x02	; 2
    4cd4:	0c 94 e7 e6 	jmp	0x1cdce	; 0x1cdce <__epilogue_restores__+0x20>

00004cd8 <spi_init>:
 @return void
*/
uint8_t _cs_pin = 0xff;
uint32_t _spi_clock = -1L;
void spi_init(uint32_t clock, int pin)
{
    4cd8:	cf 92       	push	r12
    4cda:	df 92       	push	r13
    4cdc:	ef 92       	push	r14
    4cde:	ff 92       	push	r15
    4ce0:	6b 01       	movw	r12, r22
    4ce2:	7c 01       	movw	r14, r24
    4ce4:	84 2f       	mov	r24, r20
    spi_waitReady();
    chip_deselect(pin);
    4ce6:	9a df       	rcall	.-204    	; 0x4c1c <chip_deselect>
    _cs_pin = 0xff;
    4ce8:	8f ef       	ldi	r24, 0xFF	; 255
    4cea:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_cs_pin>

#ifdef AVR
    SPI0_Init(clock);                             // Initialize the SPI bus - does nothing if clock unchanged
    4cee:	c7 01       	movw	r24, r14
    4cf0:	b6 01       	movw	r22, r12
    4cf2:	7f d4       	rcall	.+2302   	; 0x55f2 <SPI0_Init>
    SPI0_Mode(0);                                 // Set the clocking mode, etc
    4cf4:	80 e0       	ldi	r24, 0x00	; 0
    4cf6:	90 e0       	ldi	r25, 0x00	; 0
#endif
#ifdef ESP8266
    hspi_init(clock,0);                           // Initialize the SPI bus - does nothing if clock unchanged
#endif
    spi_TX(0xff);
    4cf8:	3c d4       	rcall	.+2168   	; 0x5572 <SPI0_Mode>
    4cfa:	8f ef       	ldi	r24, 0xFF	; 255
    4cfc:	dd df       	rcall	.-70     	; 0x4cb8 <spi_TX>
    _spi_clock = clock;
    4cfe:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <_spi_clock>
    4d02:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <_spi_clock+0x1>
    4d06:	e0 92 08 01 	sts	0x0108, r14	; 0x800108 <_spi_clock+0x2>
    4d0a:	f0 92 09 01 	sts	0x0109, r15	; 0x800109 <_spi_clock+0x3>
// waits for any prior transactions to complete before updating
    spi_waitReady();
}
    4d0e:	ff 90       	pop	r15
    4d10:	ef 90       	pop	r14
    4d12:	df 90       	pop	r13
    4d14:	cf 90       	pop	r12
    4d16:	08 95       	ret

00004d18 <spi_begin>:
 @param[in] clock: SPI clock rate
 @param[in] pin: GPIO CS pin
 @return void
*/
void spi_begin(uint32_t clock, int pin)
{
    4d18:	cf 92       	push	r12
    4d1a:	df 92       	push	r13
    4d1c:	ef 92       	push	r14
    4d1e:	ff 92       	push	r15
    4d20:	cf 93       	push	r28
    4d22:	df 93       	push	r29
    4d24:	ad b7       	in	r26, 0x3d	; 61
    4d26:	be b7       	in	r27, 0x3e	; 62
    4d28:	17 97       	sbiw	r26, 0x07	; 7
    4d2a:	0f b6       	in	r0, 0x3f	; 63
    4d2c:	f8 94       	cli
    4d2e:	be bf       	out	0x3e, r27	; 62
    4d30:	0f be       	out	0x3f, r0	; 63
    4d32:	ad bf       	out	0x3d, r26	; 61
    4d34:	6b 01       	movw	r12, r22
    4d36:	7c 01       	movw	r14, r24
    4d38:	ea 01       	movw	r28, r20
// FIXME allow nesting by using an array of clock values for each pin

//@brief if there is a prior chip select in progress flag an error
    if(_cs_pin != 0xff)
    4d3a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_cs_pin>
    4d3e:	8f 3f       	cpi	r24, 0xFF	; 255
    4d40:	79 f0       	breq	.+30     	; 0x4d60 <spi_begin+0x48>
    {
// This implies a bug!
        printf("cs_enable was: %d, want: %d\n", 0xff & _cs_pin, pin);
    4d42:	ed b7       	in	r30, 0x3d	; 61
    4d44:	fe b7       	in	r31, 0x3e	; 62
    4d46:	46 83       	std	Z+6, r20	; 0x06
    4d48:	d7 83       	std	Z+7, r29	; 0x07
    4d4a:	90 e0       	ldi	r25, 0x00	; 0
    4d4c:	95 83       	std	Z+5, r25	; 0x05
    4d4e:	84 83       	std	Z+4, r24	; 0x04
    4d50:	80 ee       	ldi	r24, 0xE0	; 224
    4d52:	91 e0       	ldi	r25, 0x01	; 1
    4d54:	a0 e0       	ldi	r26, 0x00	; 0
    4d56:	81 83       	std	Z+1, r24	; 0x01
    4d58:	92 83       	std	Z+2, r25	; 0x02
    4d5a:	a3 83       	std	Z+3, r26	; 0x03
    4d5c:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
// waits for any prior transactions to complete before updating
    spi_waitReady();

///@brief initialize pin in case it has not been done yet
///@ we cache the clock frequency seeting for multiple device support
    if(_spi_clock != clock)
    4d60:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_spi_clock>
    4d64:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_spi_clock+0x1>
    4d68:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_spi_clock+0x2>
    4d6c:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_spi_clock+0x3>
    4d70:	8c 15       	cp	r24, r12
    4d72:	9d 05       	cpc	r25, r13
    4d74:	ae 05       	cpc	r26, r14
    4d76:	bf 05       	cpc	r27, r15
    4d78:	21 f0       	breq	.+8      	; 0x4d82 <spi_begin+0x6a>
    {
        spi_init(clock,pin);
    4d7a:	ae 01       	movw	r20, r28
    4d7c:	c7 01       	movw	r24, r14
    4d7e:	b6 01       	movw	r22, r12
    4d80:	ab df       	rcall	.-170    	; 0x4cd8 <spi_init>
    }

    chip_select(pin);
    4d82:	8c 2f       	mov	r24, r28
    4d84:	32 df       	rcall	.-412    	; 0x4bea <chip_select>
    _cs_pin = pin;
    4d86:	c0 93 0a 01 	sts	0x010A, r28	; 0x80010a <_cs_pin>
}
    4d8a:	ad b7       	in	r26, 0x3d	; 61
    4d8c:	be b7       	in	r27, 0x3e	; 62
    4d8e:	17 96       	adiw	r26, 0x07	; 7
    4d90:	0f b6       	in	r0, 0x3f	; 63
    4d92:	f8 94       	cli
    4d94:	be bf       	out	0x3e, r27	; 62
    4d96:	0f be       	out	0x3f, r0	; 63
    4d98:	ad bf       	out	0x3d, r26	; 61
    4d9a:	df 91       	pop	r29
    4d9c:	cf 91       	pop	r28
    4d9e:	ff 90       	pop	r15
    4da0:	ef 90       	pop	r14
    4da2:	df 90       	pop	r13
    4da4:	cf 90       	pop	r12
    4da6:	08 95       	ret

00004da8 <spi_TXRX>:

/// @brief SPI read and write 1 byte
/// @param[in] data: value to transmit
/// @return  uint8_t value read
uint8_t spi_TXRX(uint8_t data)
{
    4da8:	a1 e0       	ldi	r26, 0x01	; 1
    4daa:	b0 e0       	ldi	r27, 0x00	; 0
    4dac:	ea ed       	ldi	r30, 0xDA	; 218
    4dae:	f6 e2       	ldi	r31, 0x26	; 38
    4db0:	0c 94 cb e6 	jmp	0x1cd96	; 0x1cd96 <__prologue_saves__+0x20>
    4db4:	89 83       	std	Y+1, r24	; 0x01
#ifdef ESP8266
    hspi_TXRX(&data,1);
#endif
#ifdef AVR
    SPI0_TXRX(&data,1);
    4db6:	61 e0       	ldi	r22, 0x01	; 1
    4db8:	70 e0       	ldi	r23, 0x00	; 0
    4dba:	ce 01       	movw	r24, r28
    4dbc:	01 96       	adiw	r24, 0x01	; 1
    4dbe:	5a d4       	rcall	.+2228   	; 0x5674 <SPI0_TXRX>
#endif
    return(data);
}
    4dc0:	89 81       	ldd	r24, Y+1	; 0x01
    4dc2:	21 96       	adiw	r28, 0x01	; 1
    4dc4:	e2 e0       	ldi	r30, 0x02	; 2
    4dc6:	0c 94 e7 e6 	jmp	0x1cdce	; 0x1cdce <__epilogue_restores__+0x20>

00004dca <set_error>:
static uint8_t error_flag = 0;
/// @brief Set error condition
/// @return  void
void set_error(uint8_t error)
{
	error_flag = error;
    4dca:	80 93 4e 17 	sts	0x174E, r24	; 0x80174e <__data_end>
    GPIO_PIN_HI(LED2);
    4dce:	2c 9a       	sbi	0x05, 4	; 5
    4dd0:	24 9a       	sbi	0x04, 4	; 4
    4dd2:	08 95       	ret

00004dd4 <clear_error>:

/// @brief Set error condition
/// @return  void
void clear_error()
{
	error_flag = 0;
    4dd4:	10 92 4e 17 	sts	0x174E, r1	; 0x80174e <__data_end>
    GPIO_PIN_LOW(LED2);
    4dd8:	2c 98       	cbi	0x05, 4	; 5
    4dda:	24 9a       	sbi	0x04, 4	; 4
    4ddc:	08 95       	ret

00004dde <freeRam>:
/// - avr-libc dependent code.
///
/// @return free memory in bytes.
/// @see malloc().
uint16_t freeRam ()
{
    4dde:	a2 e0       	ldi	r26, 0x02	; 2
    4de0:	b0 e0       	ldi	r27, 0x00	; 0
    4de2:	e5 ef       	ldi	r30, 0xF5	; 245
    4de4:	f6 e2       	ldi	r31, 0x26	; 38
    4de6:	0c 94 cb e6 	jmp	0x1cd96	; 0x1cd96 <__prologue_saves__+0x20>
    extern void * __heap_start;
    extern void * __brkval;
    int ret;
    uint16_t top;

    if(__brkval)
    4dea:	20 91 2c 20 	lds	r18, 0x202C	; 0x80202c <__brkval>
    4dee:	30 91 2d 20 	lds	r19, 0x202D	; 0x80202d <__brkval+0x1>
    4df2:	21 15       	cp	r18, r1
    4df4:	31 05       	cpc	r19, r1
    4df6:	11 f4       	brne	.+4      	; 0x4dfc <freeRam+0x1e>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    4df8:	20 e3       	ldi	r18, 0x30	; 48
    4dfa:	30 e2       	ldi	r19, 0x20	; 32

    ret = (uint16_t) &v - top;
    return ( ret );
}
    4dfc:	ce 01       	movw	r24, r28
    4dfe:	01 96       	adiw	r24, 0x01	; 1
    4e00:	82 1b       	sub	r24, r18
    4e02:	93 0b       	sbc	r25, r19
    4e04:	22 96       	adiw	r28, 0x02	; 2
    4e06:	e2 e0       	ldi	r30, 0x02	; 2
    4e08:	0c 94 e7 e6 	jmp	0x1cdce	; 0x1cdce <__epilogue_restores__+0x20>

00004e0c <PrintFree>:
/// - avr-libc dependent code.
/// - Stack, BSS, Data, Heap, Malloc.
///
/// @return  void
void PrintFree()
{
    4e0c:	a9 e0       	ldi	r26, 0x09	; 9
    4e0e:	b0 e0       	ldi	r27, 0x00	; 0
    4e10:	ec e0       	ldi	r30, 0x0C	; 12
    4e12:	f7 e2       	ldi	r31, 0x27	; 39
    4e14:	0c 94 cb e6 	jmp	0x1cd96	; 0x1cd96 <__prologue_saves__+0x20>
    extern void * __data_start;
    extern void * __data_end;
    extern void * __stack;
    uint16_t ram;

    ram = freeRam();
    4e18:	e2 df       	rcall	.-60     	; 0x4dde <freeRam>
    4e1a:	99 87       	std	Y+9, r25	; 0x09
    4e1c:	88 87       	std	Y+8, r24	; 0x08

    printf("Free Ram:%u\n", ram);
    4e1e:	ed b7       	in	r30, 0x3d	; 61
    4e20:	fe b7       	in	r31, 0x3e	; 62
    4e22:	95 83       	std	Z+5, r25	; 0x05
    4e24:	84 83       	std	Z+4, r24	; 0x04
    4e26:	87 e0       	ldi	r24, 0x07	; 7
    4e28:	93 e0       	ldi	r25, 0x03	; 3
    4e2a:	a0 e0       	ldi	r26, 0x00	; 0
    4e2c:	81 83       	std	Z+1, r24	; 0x01
    4e2e:	92 83       	std	Z+2, r25	; 0x02
    4e30:	a3 83       	std	Z+3, r26	; 0x03
    4e32:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    printf("  Stack Top:   %u\n", (unsigned int) &__stack);
    4e36:	8f ef       	ldi	r24, 0xFF	; 255
    4e38:	90 e4       	ldi	r25, 0x40	; 64
    4e3a:	ed b7       	in	r30, 0x3d	; 61
    4e3c:	fe b7       	in	r31, 0x3e	; 62
    4e3e:	95 83       	std	Z+5, r25	; 0x05
    4e40:	84 83       	std	Z+4, r24	; 0x04
    4e42:	84 ef       	ldi	r24, 0xF4	; 244
    4e44:	92 e0       	ldi	r25, 0x02	; 2
    4e46:	a0 e0       	ldi	r26, 0x00	; 0
    4e48:	81 83       	std	Z+1, r24	; 0x01
    4e4a:	92 83       	std	Z+2, r25	; 0x02
    4e4c:	a3 83       	std	Z+3, r26	; 0x03
    4e4e:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    printf("  Stack Free:  %u\n", (unsigned int) &ram - 0);
    4e52:	ce 01       	movw	r24, r28
    4e54:	08 96       	adiw	r24, 0x08	; 8
    4e56:	ed b7       	in	r30, 0x3d	; 61
    4e58:	fe b7       	in	r31, 0x3e	; 62
    4e5a:	95 83       	std	Z+5, r25	; 0x05
    4e5c:	84 83       	std	Z+4, r24	; 0x04
    4e5e:	81 ee       	ldi	r24, 0xE1	; 225
    4e60:	92 e0       	ldi	r25, 0x02	; 2
    4e62:	a0 e0       	ldi	r26, 0x00	; 0
    4e64:	81 83       	std	Z+1, r24	; 0x01
    4e66:	92 83       	std	Z+2, r25	; 0x02
    4e68:	a3 83       	std	Z+3, r26	; 0x03
    4e6a:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>

    printf("  BSS   start: %5u, end: %5u\n",
    4e6e:	80 e3       	ldi	r24, 0x30	; 48
    4e70:	90 e2       	ldi	r25, 0x20	; 32
    4e72:	ed b7       	in	r30, 0x3d	; 61
    4e74:	fe b7       	in	r31, 0x3e	; 62
    4e76:	97 83       	std	Z+7, r25	; 0x07
    4e78:	86 83       	std	Z+6, r24	; 0x06
    4e7a:	8e e4       	ldi	r24, 0x4E	; 78
    4e7c:	97 e1       	ldi	r25, 0x17	; 23
    4e7e:	95 83       	std	Z+5, r25	; 0x05
    4e80:	84 83       	std	Z+4, r24	; 0x04
    4e82:	83 ec       	ldi	r24, 0xC3	; 195
    4e84:	92 e0       	ldi	r25, 0x02	; 2
    4e86:	a0 e0       	ldi	r26, 0x00	; 0
    4e88:	81 83       	std	Z+1, r24	; 0x01
    4e8a:	92 83       	std	Z+2, r25	; 0x02
    4e8c:	a3 83       	std	Z+3, r26	; 0x03
    4e8e:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
        (unsigned int)&__bss_start, (unsigned int)&__bss_end);

    printf("  Data  start: %5u, end: %5u\n",
    4e92:	8e e4       	ldi	r24, 0x4E	; 78
    4e94:	97 e1       	ldi	r25, 0x17	; 23
    4e96:	ed b7       	in	r30, 0x3d	; 61
    4e98:	fe b7       	in	r31, 0x3e	; 62
    4e9a:	97 83       	std	Z+7, r25	; 0x07
    4e9c:	86 83       	std	Z+6, r24	; 0x06
    4e9e:	80 e0       	ldi	r24, 0x00	; 0
    4ea0:	91 e0       	ldi	r25, 0x01	; 1
    4ea2:	95 83       	std	Z+5, r25	; 0x05
    4ea4:	84 83       	std	Z+4, r24	; 0x04
    4ea6:	85 ea       	ldi	r24, 0xA5	; 165
    4ea8:	92 e0       	ldi	r25, 0x02	; 2
    4eaa:	a0 e0       	ldi	r26, 0x00	; 0
    4eac:	81 83       	std	Z+1, r24	; 0x01
    4eae:	92 83       	std	Z+2, r25	; 0x02
    4eb0:	a3 83       	std	Z+3, r26	; 0x03
    4eb2:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
        (unsigned int)&__data_start, (unsigned int)&__data_end);

    printf("  Heap: start: %5u, end: %5u\n",
    4eb6:	80 e0       	ldi	r24, 0x00	; 0
    4eb8:	90 e0       	ldi	r25, 0x00	; 0
    4eba:	ed b7       	in	r30, 0x3d	; 61
    4ebc:	fe b7       	in	r31, 0x3e	; 62
    4ebe:	97 83       	std	Z+7, r25	; 0x07
    4ec0:	86 83       	std	Z+6, r24	; 0x06
    4ec2:	80 e3       	ldi	r24, 0x30	; 48
    4ec4:	90 e2       	ldi	r25, 0x20	; 32
    4ec6:	95 83       	std	Z+5, r25	; 0x05
    4ec8:	84 83       	std	Z+4, r24	; 0x04
    4eca:	87 e8       	ldi	r24, 0x87	; 135
    4ecc:	92 e0       	ldi	r25, 0x02	; 2
    4ece:	a0 e0       	ldi	r26, 0x00	; 0
    4ed0:	81 83       	std	Z+1, r24	; 0x01
    4ed2:	92 83       	std	Z+2, r25	; 0x02
    4ed4:	a3 83       	std	Z+3, r26	; 0x03
    4ed6:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
        (unsigned int)&__heap_start, (unsigned int)&__heap_end);

    printf("  Malloc start %5u  end: %5u\n",
    4eda:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    4ede:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    4ee2:	ed b7       	in	r30, 0x3d	; 61
    4ee4:	fe b7       	in	r31, 0x3e	; 62
    4ee6:	97 83       	std	Z+7, r25	; 0x07
    4ee8:	86 83       	std	Z+6, r24	; 0x06
    4eea:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__malloc_heap_start>
    4eee:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    4ef2:	95 83       	std	Z+5, r25	; 0x05
    4ef4:	84 83       	std	Z+4, r24	; 0x04
    4ef6:	89 e6       	ldi	r24, 0x69	; 105
    4ef8:	92 e0       	ldi	r25, 0x02	; 2
    4efa:	a0 e0       	ldi	r26, 0x00	; 0
    4efc:	81 83       	std	Z+1, r24	; 0x01
    4efe:	92 83       	std	Z+2, r25	; 0x02
    4f00:	a3 83       	std	Z+3, r26	; 0x03
    4f02:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
        (unsigned int)__malloc_heap_start, (unsigned int) __malloc_heap_end );

    printf("  __brkval:    %5u\n", (unsigned int) __brkval);
    4f06:	80 91 2c 20 	lds	r24, 0x202C	; 0x80202c <__brkval>
    4f0a:	90 91 2d 20 	lds	r25, 0x202D	; 0x80202d <__brkval+0x1>
    4f0e:	ed b7       	in	r30, 0x3d	; 61
    4f10:	fe b7       	in	r31, 0x3e	; 62
    4f12:	95 83       	std	Z+5, r25	; 0x05
    4f14:	84 83       	std	Z+4, r24	; 0x04
    4f16:	85 e5       	ldi	r24, 0x55	; 85
    4f18:	92 e0       	ldi	r25, 0x02	; 2
    4f1a:	a0 e0       	ldi	r26, 0x00	; 0
    4f1c:	81 83       	std	Z+1, r24	; 0x01
    4f1e:	92 83       	std	Z+2, r25	; 0x02
    4f20:	a3 83       	std	Z+3, r26	; 0x03
    4f22:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>

}
    4f26:	29 96       	adiw	r28, 0x09	; 9
    4f28:	e2 e0       	ldi	r30, 0x02	; 2
    4f2a:	0c 94 e7 e6 	jmp	0x1cdce	; 0x1cdce <__epilogue_restores__+0x20>

00004f2e <safecalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
///
/// @return  void.
void *safecalloc(int size, int elements)
{
    4f2e:	ef 92       	push	r14
    4f30:	ff 92       	push	r15
    4f32:	0f 93       	push	r16
    4f34:	1f 93       	push	r17
    4f36:	cf 93       	push	r28
    4f38:	df 93       	push	r29
    4f3a:	ad b7       	in	r26, 0x3d	; 61
    4f3c:	be b7       	in	r27, 0x3e	; 62
    4f3e:	17 97       	sbiw	r26, 0x07	; 7
    4f40:	0f b6       	in	r0, 0x3f	; 63
    4f42:	f8 94       	cli
    4f44:	be bf       	out	0x3e, r27	; 62
    4f46:	0f be       	out	0x3f, r0	; 63
    4f48:	ad bf       	out	0x3d, r26	; 61
    4f4a:	8c 01       	movw	r16, r24
    4f4c:	7b 01       	movw	r14, r22
    void *p = calloc(size, elements);
    4f4e:	0e 94 78 e9 	call	0x1d2f0	; 0x1d2f0 <calloc>
    4f52:	ec 01       	movw	r28, r24
    if(!p)
    4f54:	89 2b       	or	r24, r25
    4f56:	71 f4       	brne	.+28     	; 0x4f74 <safecalloc+0x46>
    {
        printf("safecalloc(%d,%d) failed!\n", size, elements);
    4f58:	ed b7       	in	r30, 0x3d	; 61
    4f5a:	fe b7       	in	r31, 0x3e	; 62
    4f5c:	f7 82       	std	Z+7, r15	; 0x07
    4f5e:	e6 82       	std	Z+6, r14	; 0x06
    4f60:	15 83       	std	Z+5, r17	; 0x05
    4f62:	04 83       	std	Z+4, r16	; 0x04
    4f64:	8a e3       	ldi	r24, 0x3A	; 58
    4f66:	92 e0       	ldi	r25, 0x02	; 2
    4f68:	a0 e0       	ldi	r26, 0x00	; 0
    4f6a:	81 83       	std	Z+1, r24	; 0x01
    4f6c:	92 83       	std	Z+2, r25	; 0x02
    4f6e:	a3 83       	std	Z+3, r26	; 0x03
    4f70:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    }
    return(p);
}
    4f74:	ce 01       	movw	r24, r28
    4f76:	cd b7       	in	r28, 0x3d	; 61
    4f78:	de b7       	in	r29, 0x3e	; 62
    4f7a:	27 96       	adiw	r28, 0x07	; 7
    4f7c:	e6 e0       	ldi	r30, 0x06	; 6
    4f7e:	0c 94 e3 e6 	jmp	0x1cdc6	; 0x1cdc6 <__epilogue_restores__+0x18>

00004f82 <safemalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
/// @param[in] size:  size
/// @return  void.
void *safemalloc(size_t size)
{
    4f82:	0f 93       	push	r16
    4f84:	1f 93       	push	r17
    4f86:	cf 93       	push	r28
    4f88:	df 93       	push	r29
    4f8a:	00 d0       	rcall	.+0      	; 0x4f8c <safemalloc+0xa>
    4f8c:	00 d0       	rcall	.+0      	; 0x4f8e <safemalloc+0xc>
    4f8e:	1f 92       	push	r1
    4f90:	8c 01       	movw	r16, r24
    void *p = calloc(size, 1);
    4f92:	61 e0       	ldi	r22, 0x01	; 1
    4f94:	70 e0       	ldi	r23, 0x00	; 0
    4f96:	0e 94 78 e9 	call	0x1d2f0	; 0x1d2f0 <calloc>
    4f9a:	ec 01       	movw	r28, r24
    if(!p)
    4f9c:	89 2b       	or	r24, r25
    4f9e:	61 f4       	brne	.+24     	; 0x4fb8 <safemalloc+0x36>
    {
        printf("safemalloc(%d) failed!\n", size);
    4fa0:	ed b7       	in	r30, 0x3d	; 61
    4fa2:	fe b7       	in	r31, 0x3e	; 62
    4fa4:	15 83       	std	Z+5, r17	; 0x05
    4fa6:	04 83       	std	Z+4, r16	; 0x04
    4fa8:	82 e2       	ldi	r24, 0x22	; 34
    4faa:	92 e0       	ldi	r25, 0x02	; 2
    4fac:	a0 e0       	ldi	r26, 0x00	; 0
    4fae:	81 83       	std	Z+1, r24	; 0x01
    4fb0:	92 83       	std	Z+2, r25	; 0x02
    4fb2:	a3 83       	std	Z+3, r26	; 0x03
    4fb4:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    }
    return(p);
}
    4fb8:	ce 01       	movw	r24, r28
    4fba:	cd b7       	in	r28, 0x3d	; 61
    4fbc:	de b7       	in	r29, 0x3e	; 62
    4fbe:	25 96       	adiw	r28, 0x05	; 5
    4fc0:	e4 e0       	ldi	r30, 0x04	; 4
    4fc2:	0c 94 e5 e6 	jmp	0x1cdca	; 0x1cdca <__epilogue_restores__+0x1c>

00004fc6 <safefree>:
///
/// @param[in] p: pointer to free.
///
/// @return  void.
void safefree(void *p)
{
    4fc6:	ad b7       	in	r26, 0x3d	; 61
    4fc8:	be b7       	in	r27, 0x3e	; 62
    4fca:	17 97       	sbiw	r26, 0x07	; 7
    4fcc:	0f b6       	in	r0, 0x3f	; 63
    4fce:	f8 94       	cli
    4fd0:	be bf       	out	0x3e, r27	; 62
    4fd2:	0f be       	out	0x3f, r0	; 63
    4fd4:	ad bf       	out	0x3d, r26	; 61
    extern void *__brkval;
    extern void * __heap_start;
    extern void * __heap_end;
    uint16_t top;

    if(p == NULL)
    4fd6:	00 97       	sbiw	r24, 0x00	; 0
    4fd8:	11 f1       	breq	.+68     	; 0x501e <safefree+0x58>
        return;

    if(__brkval)
    4fda:	20 91 2c 20 	lds	r18, 0x202C	; 0x80202c <__brkval>
    4fde:	30 91 2d 20 	lds	r19, 0x202D	; 0x80202d <__brkval+0x1>
    4fe2:	21 15       	cp	r18, r1
    4fe4:	31 05       	cpc	r19, r1
    4fe6:	11 f4       	brne	.+4      	; 0x4fec <safefree+0x26>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    4fe8:	20 e3       	ldi	r18, 0x30	; 48
    4fea:	30 e2       	ldi	r19, 0x20	; 32

    if( ((uint16_t) p >= (uint16_t) &__heap_start) &&
    4fec:	40 e2       	ldi	r20, 0x20	; 32
    4fee:	80 33       	cpi	r24, 0x30	; 48
    4ff0:	94 07       	cpc	r25, r20
    4ff2:	30 f0       	brcs	.+12     	; 0x5000 <safefree+0x3a>
    4ff4:	28 17       	cp	r18, r24
    4ff6:	39 07       	cpc	r19, r25
    4ff8:	18 f0       	brcs	.+6      	; 0x5000 <safefree+0x3a>
        ((uint16_t) p <= top) )
    {
        free(p);
    4ffa:	0e 94 2a ea 	call	0x1d454	; 0x1d454 <free>
        return;
    4ffe:	0f c0       	rjmp	.+30     	; 0x501e <safefree+0x58>
    }
    printf("safefree: FREE ERROR (%u), top:(%u)\n", (uint16_t) p, (uint16_t) top);
    5000:	ed b7       	in	r30, 0x3d	; 61
    5002:	fe b7       	in	r31, 0x3e	; 62
    5004:	37 83       	std	Z+7, r19	; 0x07
    5006:	26 83       	std	Z+6, r18	; 0x06
    5008:	95 83       	std	Z+5, r25	; 0x05
    500a:	84 83       	std	Z+4, r24	; 0x04
    500c:	8d ef       	ldi	r24, 0xFD	; 253
    500e:	91 e0       	ldi	r25, 0x01	; 1
    5010:	a0 e0       	ldi	r26, 0x00	; 0
    5012:	81 83       	std	Z+1, r24	; 0x01
    5014:	92 83       	std	Z+2, r25	; 0x02
    5016:	a3 83       	std	Z+3, r26	; 0x03
    5018:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    PrintFree();
    501c:	f7 de       	rcall	.-530    	; 0x4e0c <PrintFree>
}
    501e:	ad b7       	in	r26, 0x3d	; 61
    5020:	be b7       	in	r27, 0x3e	; 62
    5022:	17 96       	adiw	r26, 0x07	; 7
    5024:	0f b6       	in	r0, 0x3f	; 63
    5026:	f8 94       	cli
    5028:	be bf       	out	0x3e, r27	; 62
    502a:	0f be       	out	0x3f, r0	; 63
    502c:	ad bf       	out	0x3d, r26	; 61
    502e:	08 95       	ret

00005030 <delayus>:
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayus(uint32_t us)
{

    while (us >= 100U)
    5030:	64 36       	cpi	r22, 0x64	; 100
    5032:	71 05       	cpc	r23, r1
    5034:	81 05       	cpc	r24, r1
    5036:	91 05       	cpc	r25, r1
    5038:	58 f0       	brcs	.+22     	; 0x5050 <delayus+0x20>
    {
        us -= 100U;
    503a:	64 56       	subi	r22, 0x64	; 100
    503c:	71 09       	sbc	r23, r1
    503e:	81 09       	sbc	r24, r1
    5040:	91 09       	sbc	r25, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    5042:	e3 ef       	ldi	r30, 0xF3	; 243
    5044:	f1 e0       	ldi	r31, 0x01	; 1
    5046:	31 97       	sbiw	r30, 0x01	; 1
    5048:	f1 f7       	brne	.-4      	; 0x5046 <delayus+0x16>
    504a:	00 c0       	rjmp	.+0      	; 0x504c <delayus+0x1c>
    504c:	00 00       	nop
    504e:	f0 cf       	rjmp	.-32     	; 0x5030 <delayus>
        _delay_us(100);
    }
    while (us >= 10U)
    5050:	6a 30       	cpi	r22, 0x0A	; 10
    5052:	71 05       	cpc	r23, r1
    5054:	81 05       	cpc	r24, r1
    5056:	91 05       	cpc	r25, r1
    5058:	48 f0       	brcs	.+18     	; 0x506c <delayus+0x3c>
    {
        us -= 10U;
    505a:	6a 50       	subi	r22, 0x0A	; 10
    505c:	71 09       	sbc	r23, r1
    505e:	81 09       	sbc	r24, r1
    5060:	91 09       	sbc	r25, r1
    5062:	f2 e4       	ldi	r31, 0x42	; 66
    5064:	fa 95       	dec	r31
    5066:	f1 f7       	brne	.-4      	; 0x5064 <delayus+0x34>
    5068:	00 c0       	rjmp	.+0      	; 0x506a <delayus+0x3a>
    506a:	f2 cf       	rjmp	.-28     	; 0x5050 <delayus+0x20>
        _delay_us(10);
    }
    while (us != 0U)
    506c:	61 15       	cp	r22, r1
    506e:	71 05       	cpc	r23, r1
    5070:	81 05       	cpc	r24, r1
    5072:	91 05       	cpc	r25, r1
    5074:	49 f0       	breq	.+18     	; 0x5088 <delayus+0x58>
    {
        --us;
    5076:	61 50       	subi	r22, 0x01	; 1
    5078:	71 09       	sbc	r23, r1
    507a:	81 09       	sbc	r24, r1
    507c:	91 09       	sbc	r25, r1
    507e:	26 e0       	ldi	r18, 0x06	; 6
    5080:	2a 95       	dec	r18
    5082:	f1 f7       	brne	.-4      	; 0x5080 <delayus+0x50>
    5084:	00 c0       	rjmp	.+0      	; 0x5086 <delayus+0x56>
    5086:	f2 cf       	rjmp	.-28     	; 0x506c <delayus+0x3c>
        _delay_us(1);
    }
}
    5088:	08 95       	ret

0000508a <delayms>:
/// _delay_us() has limited range - this extends it.
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayms(uint32_t ms)
{
    while (ms--)
    508a:	61 15       	cp	r22, r1
    508c:	71 05       	cpc	r23, r1
    508e:	81 05       	cpc	r24, r1
    5090:	91 05       	cpc	r25, r1
    5092:	09 f4       	brne	.+2      	; 0x5096 <delayms+0xc>
    5094:	41 c0       	rjmp	.+130    	; 0x5118 <delayms+0x8e>
    5096:	e3 ef       	ldi	r30, 0xF3	; 243
    5098:	f1 e0       	ldi	r31, 0x01	; 1
    509a:	31 97       	sbiw	r30, 0x01	; 1
    509c:	f1 f7       	brne	.-4      	; 0x509a <delayms+0x10>
    509e:	00 c0       	rjmp	.+0      	; 0x50a0 <delayms+0x16>
    50a0:	00 00       	nop
    50a2:	e3 ef       	ldi	r30, 0xF3	; 243
    50a4:	f1 e0       	ldi	r31, 0x01	; 1
    50a6:	31 97       	sbiw	r30, 0x01	; 1
    50a8:	f1 f7       	brne	.-4      	; 0x50a6 <delayms+0x1c>
    50aa:	00 c0       	rjmp	.+0      	; 0x50ac <delayms+0x22>
    50ac:	00 00       	nop
    50ae:	e3 ef       	ldi	r30, 0xF3	; 243
    50b0:	f1 e0       	ldi	r31, 0x01	; 1
    50b2:	31 97       	sbiw	r30, 0x01	; 1
    50b4:	f1 f7       	brne	.-4      	; 0x50b2 <delayms+0x28>
    50b6:	00 c0       	rjmp	.+0      	; 0x50b8 <delayms+0x2e>
    50b8:	00 00       	nop
    50ba:	e3 ef       	ldi	r30, 0xF3	; 243
    50bc:	f1 e0       	ldi	r31, 0x01	; 1
    50be:	31 97       	sbiw	r30, 0x01	; 1
    50c0:	f1 f7       	brne	.-4      	; 0x50be <delayms+0x34>
    50c2:	00 c0       	rjmp	.+0      	; 0x50c4 <delayms+0x3a>
    50c4:	00 00       	nop
    50c6:	e3 ef       	ldi	r30, 0xF3	; 243
    50c8:	f1 e0       	ldi	r31, 0x01	; 1
    50ca:	31 97       	sbiw	r30, 0x01	; 1
    50cc:	f1 f7       	brne	.-4      	; 0x50ca <delayms+0x40>
    50ce:	00 c0       	rjmp	.+0      	; 0x50d0 <delayms+0x46>
    50d0:	00 00       	nop
    50d2:	e3 ef       	ldi	r30, 0xF3	; 243
    50d4:	f1 e0       	ldi	r31, 0x01	; 1
    50d6:	31 97       	sbiw	r30, 0x01	; 1
    50d8:	f1 f7       	brne	.-4      	; 0x50d6 <delayms+0x4c>
    50da:	00 c0       	rjmp	.+0      	; 0x50dc <delayms+0x52>
    50dc:	00 00       	nop
    50de:	e3 ef       	ldi	r30, 0xF3	; 243
    50e0:	f1 e0       	ldi	r31, 0x01	; 1
    50e2:	31 97       	sbiw	r30, 0x01	; 1
    50e4:	f1 f7       	brne	.-4      	; 0x50e2 <delayms+0x58>
    50e6:	00 c0       	rjmp	.+0      	; 0x50e8 <delayms+0x5e>
    50e8:	00 00       	nop
    50ea:	e3 ef       	ldi	r30, 0xF3	; 243
    50ec:	f1 e0       	ldi	r31, 0x01	; 1
    50ee:	31 97       	sbiw	r30, 0x01	; 1
    50f0:	f1 f7       	brne	.-4      	; 0x50ee <delayms+0x64>
    50f2:	00 c0       	rjmp	.+0      	; 0x50f4 <delayms+0x6a>
    50f4:	00 00       	nop
    50f6:	e3 ef       	ldi	r30, 0xF3	; 243
    50f8:	f1 e0       	ldi	r31, 0x01	; 1
    50fa:	31 97       	sbiw	r30, 0x01	; 1
    50fc:	f1 f7       	brne	.-4      	; 0x50fa <delayms+0x70>
    50fe:	00 c0       	rjmp	.+0      	; 0x5100 <delayms+0x76>
    5100:	00 00       	nop
    5102:	e3 ef       	ldi	r30, 0xF3	; 243
    5104:	f1 e0       	ldi	r31, 0x01	; 1
    5106:	31 97       	sbiw	r30, 0x01	; 1
    5108:	f1 f7       	brne	.-4      	; 0x5106 <delayms+0x7c>
    510a:	00 c0       	rjmp	.+0      	; 0x510c <delayms+0x82>
    510c:	00 00       	nop
    510e:	61 50       	subi	r22, 0x01	; 1
    5110:	71 09       	sbc	r23, r1
    5112:	81 09       	sbc	r24, r1
    5114:	91 09       	sbc	r25, r1
    5116:	b9 cf       	rjmp	.-142    	; 0x508a <delayms>
        _delay_us(100);                           // 700
        _delay_us(100);                           // 800
        _delay_us(100);                           // 900
        _delay_us(100);                           //1000
    }
}
    5118:	08 95       	ret

0000511a <uart_rx_flush>:

    cli();
    c = uarts[uart].rx_buf[uarts[uart].rx_tail];
    sei();
    return (c & 0xff);
}
    511a:	81 11       	cpse	r24, r1
    511c:	0e c0       	rjmp	.+28     	; 0x513a <uart_rx_flush+0x20>
    511e:	f8 94       	cli
    5120:	10 92 f3 19 	sts	0x19F3, r1	; 0x8019f3 <uarts+0x4>
    5124:	10 92 f2 19 	sts	0x19F2, r1	; 0x8019f2 <uarts+0x3>
    5128:	10 92 ef 19 	sts	0x19EF, r1	; 0x8019ef <uarts>
    512c:	10 92 f0 19 	sts	0x19F0, r1	; 0x8019f0 <uarts+0x1>
    5130:	10 92 f1 19 	sts	0x19F1, r1	; 0x8019f1 <uarts+0x2>
    5134:	10 92 f4 19 	sts	0x19F4, r1	; 0x8019f4 <uarts+0x5>
    5138:	78 94       	sei
    513a:	08 95       	ret

0000513c <uart_ubr>:
    513c:	4f 92       	push	r4
    513e:	5f 92       	push	r5
    5140:	6f 92       	push	r6
    5142:	7f 92       	push	r7
    5144:	8f 92       	push	r8
    5146:	9f 92       	push	r9
    5148:	af 92       	push	r10
    514a:	bf 92       	push	r11
    514c:	cf 92       	push	r12
    514e:	df 92       	push	r13
    5150:	ef 92       	push	r14
    5152:	ff 92       	push	r15
    5154:	cf 93       	push	r28
    5156:	df 93       	push	r29
    5158:	5a 01       	movw	r10, r20
    515a:	e9 01       	movw	r28, r18
    515c:	0e 94 16 e8 	call	0x1d02c	; 0x1d02c <__floatunsisf>
    5160:	2b 01       	movw	r4, r22
    5162:	3c 01       	movw	r6, r24
    5164:	20 e0       	ldi	r18, 0x00	; 0
    5166:	30 e0       	ldi	r19, 0x00	; 0
    5168:	40 e0       	ldi	r20, 0x00	; 0
    516a:	51 e4       	ldi	r21, 0x41	; 65
    516c:	0e 94 cc e8 	call	0x1d198	; 0x1d198 <__mulsf3>
    5170:	9b 01       	movw	r18, r22
    5172:	ac 01       	movw	r20, r24
    5174:	60 e8       	ldi	r22, 0x80	; 128
    5176:	76 e9       	ldi	r23, 0x96	; 150
    5178:	88 e9       	ldi	r24, 0x98	; 152
    517a:	9b e4       	ldi	r25, 0x4B	; 75
    517c:	0e 94 7d e7 	call	0x1cefa	; 0x1cefa <__divsf3>
    5180:	20 e0       	ldi	r18, 0x00	; 0
    5182:	30 e0       	ldi	r19, 0x00	; 0
    5184:	40 e8       	ldi	r20, 0x80	; 128
    5186:	5f e3       	ldi	r21, 0x3F	; 63
    5188:	0e 94 14 e7 	call	0x1ce28	; 0x1ce28 <__subsf3>
    518c:	0e 94 2f e9 	call	0x1d25e	; 0x1d25e <round>
    5190:	0e 94 ea e7 	call	0x1cfd4	; 0x1cfd4 <__fixunssfsi>
    5194:	6b 01       	movw	r12, r22
    5196:	7c 01       	movw	r14, r24
    5198:	c1 14       	cp	r12, r1
    519a:	80 e1       	ldi	r24, 0x10	; 16
    519c:	d8 06       	cpc	r13, r24
    519e:	e1 04       	cpc	r14, r1
    51a0:	f1 04       	cpc	r15, r1
    51a2:	58 f4       	brcc	.+22     	; 0x51ba <uart_ubr+0x7e>
    51a4:	81 e0       	ldi	r24, 0x01	; 1
    51a6:	90 e0       	ldi	r25, 0x00	; 0
    51a8:	f5 01       	movw	r30, r10
    51aa:	91 83       	std	Z+1, r25	; 0x01
    51ac:	80 83       	st	Z, r24
    51ae:	81 2c       	mov	r8, r1
    51b0:	91 2c       	mov	r9, r1
    51b2:	a1 2c       	mov	r10, r1
    51b4:	21 e4       	ldi	r18, 0x41	; 65
    51b6:	b2 2e       	mov	r11, r18
    51b8:	31 c0       	rjmp	.+98     	; 0x521c <uart_ubr+0xe0>
    51ba:	f5 01       	movw	r30, r10
    51bc:	11 82       	std	Z+1, r1	; 0x01
    51be:	10 82       	st	Z, r1
    51c0:	20 e0       	ldi	r18, 0x00	; 0
    51c2:	30 e0       	ldi	r19, 0x00	; 0
    51c4:	40 e8       	ldi	r20, 0x80	; 128
    51c6:	51 e4       	ldi	r21, 0x41	; 65
    51c8:	c3 01       	movw	r24, r6
    51ca:	b2 01       	movw	r22, r4
    51cc:	0e 94 cc e8 	call	0x1d198	; 0x1d198 <__mulsf3>
    51d0:	9b 01       	movw	r18, r22
    51d2:	ac 01       	movw	r20, r24
    51d4:	60 e8       	ldi	r22, 0x80	; 128
    51d6:	76 e9       	ldi	r23, 0x96	; 150
    51d8:	88 e9       	ldi	r24, 0x98	; 152
    51da:	9b e4       	ldi	r25, 0x4B	; 75
    51dc:	0e 94 7d e7 	call	0x1cefa	; 0x1cefa <__divsf3>
    51e0:	20 e0       	ldi	r18, 0x00	; 0
    51e2:	30 e0       	ldi	r19, 0x00	; 0
    51e4:	40 e8       	ldi	r20, 0x80	; 128
    51e6:	5f e3       	ldi	r21, 0x3F	; 63
    51e8:	0e 94 14 e7 	call	0x1ce28	; 0x1ce28 <__subsf3>
    51ec:	0e 94 2f e9 	call	0x1d25e	; 0x1d25e <round>
    51f0:	0e 94 ea e7 	call	0x1cfd4	; 0x1cfd4 <__fixunssfsi>
    51f4:	6b 01       	movw	r12, r22
    51f6:	7c 01       	movw	r14, r24
    51f8:	81 2c       	mov	r8, r1
    51fa:	91 2c       	mov	r9, r1
    51fc:	90 e8       	ldi	r25, 0x80	; 128
    51fe:	a9 2e       	mov	r10, r25
    5200:	91 e4       	ldi	r25, 0x41	; 65
    5202:	b9 2e       	mov	r11, r25
    5204:	c1 14       	cp	r12, r1
    5206:	f0 e1       	ldi	r31, 0x10	; 16
    5208:	df 06       	cpc	r13, r31
    520a:	e1 04       	cpc	r14, r1
    520c:	f1 04       	cpc	r15, r1
    520e:	30 f0       	brcs	.+12     	; 0x521c <uart_ubr+0xe0>
    5210:	cc 24       	eor	r12, r12
    5212:	ca 94       	dec	r12
    5214:	8f e0       	ldi	r24, 0x0F	; 15
    5216:	d8 2e       	mov	r13, r24
    5218:	e1 2c       	mov	r14, r1
    521a:	f1 2c       	mov	r15, r1
    521c:	c7 01       	movw	r24, r14
    521e:	b6 01       	movw	r22, r12
    5220:	6f 5f       	subi	r22, 0xFF	; 255
    5222:	7f 4f       	sbci	r23, 0xFF	; 255
    5224:	8f 4f       	sbci	r24, 0xFF	; 255
    5226:	9f 4f       	sbci	r25, 0xFF	; 255
    5228:	0e 94 16 e8 	call	0x1d02c	; 0x1d02c <__floatunsisf>
    522c:	a5 01       	movw	r20, r10
    522e:	94 01       	movw	r18, r8
    5230:	0e 94 cc e8 	call	0x1d198	; 0x1d198 <__mulsf3>
    5234:	9b 01       	movw	r18, r22
    5236:	ac 01       	movw	r20, r24
    5238:	60 e8       	ldi	r22, 0x80	; 128
    523a:	76 e9       	ldi	r23, 0x96	; 150
    523c:	88 e9       	ldi	r24, 0x98	; 152
    523e:	9b e4       	ldi	r25, 0x4B	; 75
    5240:	0e 94 7d e7 	call	0x1cefa	; 0x1cefa <__divsf3>
    5244:	0e 94 ea e7 	call	0x1cfd4	; 0x1cfd4 <__fixunssfsi>
    5248:	68 83       	st	Y, r22
    524a:	79 83       	std	Y+1, r23	; 0x01
    524c:	8a 83       	std	Y+2, r24	; 0x02
    524e:	9b 83       	std	Y+3, r25	; 0x03
    5250:	c6 01       	movw	r24, r12
    5252:	df 91       	pop	r29
    5254:	cf 91       	pop	r28
    5256:	ff 90       	pop	r15
    5258:	ef 90       	pop	r14
    525a:	df 90       	pop	r13
    525c:	cf 90       	pop	r12
    525e:	bf 90       	pop	r11
    5260:	af 90       	pop	r10
    5262:	9f 90       	pop	r9
    5264:	8f 90       	pop	r8
    5266:	7f 90       	pop	r7
    5268:	6f 90       	pop	r6
    526a:	5f 90       	pop	r5
    526c:	4f 90       	pop	r4
    526e:	08 95       	ret

00005270 <uart_init>:
    5270:	a6 e0       	ldi	r26, 0x06	; 6
    5272:	b0 e0       	ldi	r27, 0x00	; 0
    5274:	ee e3       	ldi	r30, 0x3E	; 62
    5276:	f9 e2       	ldi	r31, 0x29	; 41
    5278:	0c 94 cb e6 	jmp	0x1cd96	; 0x1cd96 <__prologue_saves__+0x20>
    527c:	1e 82       	std	Y+6, r1	; 0x06
    527e:	1d 82       	std	Y+5, r1	; 0x05
    5280:	81 11       	cpse	r24, r1
    5282:	36 c0       	rjmp	.+108    	; 0x52f0 <uart_init+0x80>
    5284:	cb 01       	movw	r24, r22
    5286:	ba 01       	movw	r22, r20
    5288:	9e 01       	movw	r18, r28
    528a:	2f 5f       	subi	r18, 0xFF	; 255
    528c:	3f 4f       	sbci	r19, 0xFF	; 255
    528e:	ae 01       	movw	r20, r28
    5290:	4b 5f       	subi	r20, 0xFB	; 251
    5292:	5f 4f       	sbci	r21, 0xFF	; 255
    5294:	53 df       	rcall	.-346    	; 0x513c <uart_ubr>
    5296:	f8 94       	cli
    5298:	10 92 f3 19 	sts	0x19F3, r1	; 0x8019f3 <uarts+0x4>
    529c:	10 92 f2 19 	sts	0x19F2, r1	; 0x8019f2 <uarts+0x3>
    52a0:	10 92 ef 19 	sts	0x19EF, r1	; 0x8019ef <uarts>
    52a4:	10 92 f0 19 	sts	0x19F0, r1	; 0x8019f0 <uarts+0x1>
    52a8:	10 92 f1 19 	sts	0x19F1, r1	; 0x8019f1 <uarts+0x2>
    52ac:	10 92 f4 19 	sts	0x19F4, r1	; 0x8019f4 <uarts+0x5>
    52b0:	78 94       	sei
    52b2:	f8 94       	cli
    52b4:	58 9a       	sbi	0x0b, 0	; 11
    52b6:	59 9a       	sbi	0x0b, 1	; 11
    52b8:	50 98       	cbi	0x0a, 0	; 10
    52ba:	51 9a       	sbi	0x0a, 1	; 10
    52bc:	28 e9       	ldi	r18, 0x98	; 152
    52be:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    52c2:	2d 81       	ldd	r18, Y+5	; 0x05
    52c4:	3e 81       	ldd	r19, Y+6	; 0x06
    52c6:	23 2b       	or	r18, r19
    52c8:	19 f0       	breq	.+6      	; 0x52d0 <uart_init+0x60>
    52ca:	22 e0       	ldi	r18, 0x02	; 2
    52cc:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    52d0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    52d4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    52d8:	78 94       	sei
    52da:	61 e3       	ldi	r22, 0x31	; 49
    52dc:	7a e2       	ldi	r23, 0x2A	; 42
    52de:	86 e4       	ldi	r24, 0x46	; 70
    52e0:	9a e2       	ldi	r25, 0x2A	; 42
    52e2:	0e 94 a0 78 	call	0xf140	; 0xf140 <fdevopen>
    52e6:	69 81       	ldd	r22, Y+1	; 0x01
    52e8:	7a 81       	ldd	r23, Y+2	; 0x02
    52ea:	8b 81       	ldd	r24, Y+3	; 0x03
    52ec:	9c 81       	ldd	r25, Y+4	; 0x04
    52ee:	03 c0       	rjmp	.+6      	; 0x52f6 <uart_init+0x86>
    52f0:	60 e0       	ldi	r22, 0x00	; 0
    52f2:	70 e0       	ldi	r23, 0x00	; 0
    52f4:	cb 01       	movw	r24, r22
    52f6:	26 96       	adiw	r28, 0x06	; 6
    52f8:	e2 e0       	ldi	r30, 0x02	; 2
    52fa:	0c 94 e7 e6 	jmp	0x1cdce	; 0x1cdce <__epilogue_restores__+0x20>

000052fe <uart_rx_interrupt>:
    52fe:	cf 93       	push	r28
    5300:	df 93       	push	r29
    5302:	27 e5       	ldi	r18, 0x57	; 87
    5304:	82 9f       	mul	r24, r18
    5306:	c0 01       	movw	r24, r0
    5308:	11 24       	eor	r1, r1
    530a:	fc 01       	movw	r30, r24
    530c:	e1 51       	subi	r30, 0x11	; 17
    530e:	f6 4e       	sbci	r31, 0xE6	; 230
    5310:	83 81       	ldd	r24, Z+3	; 0x03
    5312:	94 81       	ldd	r25, Z+4	; 0x04
    5314:	80 35       	cpi	r24, 0x50	; 80
    5316:	91 05       	cpc	r25, r1
    5318:	84 f4       	brge	.+32     	; 0x533a <uart_rx_interrupt+0x3c>
    531a:	30 81       	ld	r19, Z
    531c:	21 e0       	ldi	r18, 0x01	; 1
    531e:	23 0f       	add	r18, r19
    5320:	20 83       	st	Z, r18
    5322:	ef 01       	movw	r28, r30
    5324:	c3 0f       	add	r28, r19
    5326:	d1 1d       	adc	r29, r1
    5328:	6f 77       	andi	r22, 0x7F	; 127
    532a:	6e 83       	std	Y+6, r22	; 0x06
    532c:	01 96       	adiw	r24, 0x01	; 1
    532e:	94 83       	std	Z+4, r25	; 0x04
    5330:	83 83       	std	Z+3, r24	; 0x03
    5332:	20 35       	cpi	r18, 0x50	; 80
    5334:	28 f0       	brcs	.+10     	; 0x5340 <uart_rx_interrupt+0x42>
    5336:	10 82       	st	Z, r1
    5338:	03 c0       	rjmp	.+6      	; 0x5340 <uart_rx_interrupt+0x42>
    533a:	85 81       	ldd	r24, Z+5	; 0x05
    533c:	81 60       	ori	r24, 0x01	; 1
    533e:	85 83       	std	Z+5, r24	; 0x05
    5340:	df 91       	pop	r29
    5342:	cf 91       	pop	r28
    5344:	08 95       	ret

00005346 <__vector_20>:
    5346:	1f 92       	push	r1
    5348:	0f 92       	push	r0
    534a:	0f b6       	in	r0, 0x3f	; 63
    534c:	0f 92       	push	r0
    534e:	11 24       	eor	r1, r1
    5350:	0b b6       	in	r0, 0x3b	; 59
    5352:	0f 92       	push	r0
    5354:	2f 93       	push	r18
    5356:	3f 93       	push	r19
    5358:	4f 93       	push	r20
    535a:	5f 93       	push	r21
    535c:	6f 93       	push	r22
    535e:	7f 93       	push	r23
    5360:	8f 93       	push	r24
    5362:	9f 93       	push	r25
    5364:	af 93       	push	r26
    5366:	bf 93       	push	r27
    5368:	ef 93       	push	r30
    536a:	ff 93       	push	r31
    536c:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    5370:	80 e0       	ldi	r24, 0x00	; 0
    5372:	c5 df       	rcall	.-118    	; 0x52fe <uart_rx_interrupt>
    5374:	ff 91       	pop	r31
    5376:	ef 91       	pop	r30
    5378:	bf 91       	pop	r27
    537a:	af 91       	pop	r26
    537c:	9f 91       	pop	r25
    537e:	8f 91       	pop	r24
    5380:	7f 91       	pop	r23
    5382:	6f 91       	pop	r22
    5384:	5f 91       	pop	r21
    5386:	4f 91       	pop	r20
    5388:	3f 91       	pop	r19
    538a:	2f 91       	pop	r18
    538c:	0f 90       	pop	r0
    538e:	0b be       	out	0x3b, r0	; 59
    5390:	0f 90       	pop	r0
    5392:	0f be       	out	0x3f, r0	; 63
    5394:	0f 90       	pop	r0
    5396:	1f 90       	pop	r1
    5398:	18 95       	reti

0000539a <uart_rx_count>:
/// @return  Character count in ring buffer.
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
    539a:	81 11       	cpse	r24, r1
    539c:	07 c0       	rjmp	.+14     	; 0x53ac <uart_rx_count+0x12>
        return(EOF);

    cli();
    539e:	f8 94       	cli

    count = uarts[uart].rx_count;
    53a0:	80 91 f2 19 	lds	r24, 0x19F2	; 0x8019f2 <uarts+0x3>
    53a4:	90 91 f3 19 	lds	r25, 0x19F3	; 0x8019f3 <uarts+0x4>

    sei();
    53a8:	78 94       	sei

    return (count );
    53aa:	08 95       	ret
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
        return(EOF);
    53ac:	8f ef       	ldi	r24, 0xFF	; 255
    53ae:	9f ef       	ldi	r25, 0xFF	; 255
    count = uarts[uart].rx_count;

    sei();

    return (count );
}
    53b0:	08 95       	ret

000053b2 <uart_get_tail>:
/// @see uart_rx_count().
int uart_get_tail(uint8_t uart)
{
    uint8_t c;

    if (uart >= UARTS)
    53b2:	81 11       	cpse	r24, r1
    53b4:	21 c0       	rjmp	.+66     	; 0x53f8 <uart_get_tail+0x46>
    {
        return(EOF);
    }

    while(uart_rx_count(uart) < 1)
    53b6:	80 e0       	ldi	r24, 0x00	; 0
    53b8:	f0 df       	rcall	.-32     	; 0x539a <uart_rx_count>
    53ba:	18 16       	cp	r1, r24
    53bc:	19 06       	cpc	r1, r25
    53be:	dc f7       	brge	.-10     	; 0x53b6 <uart_get_tail+0x4>
        ;

    cli();
    53c0:	f8 94       	cli
    c = uarts[uart].rx_buf[uarts[uart].rx_tail++];
    53c2:	e0 91 f0 19 	lds	r30, 0x19F0	; 0x8019f0 <uarts+0x1>
    53c6:	91 e0       	ldi	r25, 0x01	; 1
    53c8:	9e 0f       	add	r25, r30
    53ca:	90 93 f0 19 	sts	0x19F0, r25	; 0x8019f0 <uarts+0x1>
    53ce:	f0 e0       	ldi	r31, 0x00	; 0
    53d0:	e1 51       	subi	r30, 0x11	; 17
    53d2:	f6 4e       	sbci	r31, 0xE6	; 230
    53d4:	86 81       	ldd	r24, Z+6	; 0x06
    if (uarts[uart].rx_tail >= RX_BUF_SIZE)
    53d6:	90 35       	cpi	r25, 0x50	; 80
    53d8:	10 f0       	brcs	.+4      	; 0x53de <uart_get_tail+0x2c>
        uarts[uart].rx_tail = 0;
    53da:	10 92 f0 19 	sts	0x19F0, r1	; 0x8019f0 <uarts+0x1>
    uarts[uart].rx_count--;
    53de:	20 91 f2 19 	lds	r18, 0x19F2	; 0x8019f2 <uarts+0x3>
    53e2:	30 91 f3 19 	lds	r19, 0x19F3	; 0x8019f3 <uarts+0x4>
    53e6:	21 50       	subi	r18, 0x01	; 1
    53e8:	31 09       	sbc	r19, r1
    53ea:	30 93 f3 19 	sts	0x19F3, r19	; 0x8019f3 <uarts+0x4>
    53ee:	20 93 f2 19 	sts	0x19F2, r18	; 0x8019f2 <uarts+0x3>
    sei();
    53f2:	78 94       	sei

    return (c & 0xff);
    53f4:	90 e0       	ldi	r25, 0x00	; 0
    53f6:	08 95       	ret
{
    uint8_t c;

    if (uart >= UARTS)
    {
        return(EOF);
    53f8:	8f ef       	ldi	r24, 0xFF	; 255
    53fa:	9f ef       	ldi	r25, 0xFF	; 255
        uarts[uart].rx_tail = 0;
    uarts[uart].rx_count--;
    sei();

    return (c & 0xff);
}
    53fc:	08 95       	ret

000053fe <uart_rx_byte>:
/// @param[in] uart: uart number.
///
/// @return  Character.
int uart_rx_byte(uint8_t uart)
{
    return( uart_get_tail(uart) & 0xff);
    53fe:	d9 df       	rcall	.-78     	; 0x53b2 <uart_get_tail>
}
    5400:	99 27       	eor	r25, r25
    5402:	08 95       	ret

00005404 <uart_tx_byte>:
/// @param[in] uart: uart number.
///
/// @return void.
int uart_tx_byte(int c, uint8_t uart)
{
    if(uart == 0)
    5404:	61 11       	cpse	r22, r1
    5406:	09 c0       	rjmp	.+18     	; 0x541a <uart_tx_byte+0x16>
    {
        while (!BIT_TST(UCSR0A, UDRE0))
    5408:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    540c:	25 ff       	sbrs	r18, 5
    540e:	fc cf       	rjmp	.-8      	; 0x5408 <uart_tx_byte+0x4>
            ;
        UDR0 = c & 0x7f;
    5410:	28 2f       	mov	r18, r24
    5412:	2f 77       	andi	r18, 0x7F	; 127
    5414:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
        return(c);
    5418:	08 95       	ret
    }
#ifdef UARTS > 1
    if(uart == 1)
    541a:	61 30       	cpi	r22, 0x01	; 1
    541c:	49 f4       	brne	.+18     	; 0x5430 <uart_tx_byte+0x2c>
    {
        while (!BIT_TST(UCSR1A, UDRE1))
    541e:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    5422:	25 ff       	sbrs	r18, 5
    5424:	fc cf       	rjmp	.-8      	; 0x541e <uart_tx_byte+0x1a>
            ;
        UDR1 = c & 0x7f;
    5426:	28 2f       	mov	r18, r24
    5428:	2f 77       	andi	r18, 0x7F	; 127
    542a:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    542e:	08 95       	ret
        return(c);
    }
#endif
    return(EOF);
    5430:	8f ef       	ldi	r24, 0xFF	; 255
    5432:	9f ef       	ldi	r25, 0xFF	; 255
}
    5434:	08 95       	ret

00005436 <uart_getchar>:
///
/// @param[in] uart: uart number.
///
/// @return  Character.
int uart_getchar(uint8_t uart)
{
    5436:	cf 93       	push	r28
    uint8_t c;

    if(uart >= UARTS)
    5438:	81 11       	cpse	r24, r1
    543a:	0f c0       	rjmp	.+30     	; 0x545a <uart_getchar+0x24>
        break;
    }
    if(c == '\r')
        c = '\n';
#endif
    c = uart_rx_byte(uart);
    543c:	e0 df       	rcall	.-64     	; 0x53fe <uart_rx_byte>
    543e:	c8 2f       	mov	r28, r24
    uart_tx_byte(c, uart);
    5440:	60 e0       	ldi	r22, 0x00	; 0
    5442:	90 e0       	ldi	r25, 0x00	; 0
    5444:	df df       	rcall	.-66     	; 0x5404 <uart_tx_byte>
    if(c == '\r')
    5446:	cd 30       	cpi	r28, 0x0D	; 13
    5448:	29 f4       	brne	.+10     	; 0x5454 <uart_getchar+0x1e>
    {
        c = '\n';
        uart_tx_byte(c, uart);
    544a:	60 e0       	ldi	r22, 0x00	; 0
    544c:	8a e0       	ldi	r24, 0x0A	; 10
    544e:	90 e0       	ldi	r25, 0x00	; 0
    5450:	d9 df       	rcall	.-78     	; 0x5404 <uart_tx_byte>
#endif
    c = uart_rx_byte(uart);
    uart_tx_byte(c, uart);
    if(c == '\r')
    {
        c = '\n';
    5452:	ca e0       	ldi	r28, 0x0A	; 10
        uart_tx_byte(c, uart);
    }
//FIXME ECHO
    return (c);
    5454:	8c 2f       	mov	r24, r28
    5456:	90 e0       	ldi	r25, 0x00	; 0
    5458:	02 c0       	rjmp	.+4      	; 0x545e <uart_getchar+0x28>
int uart_getchar(uint8_t uart)
{
    uint8_t c;

    if(uart >= UARTS)
        return(EOF);
    545a:	8f ef       	ldi	r24, 0xFF	; 255
    545c:	9f ef       	ldi	r25, 0xFF	; 255
        c = '\n';
        uart_tx_byte(c, uart);
    }
//FIXME ECHO
    return (c);
}
    545e:	cf 91       	pop	r28
    5460:	08 95       	ret

00005462 <uart0_getchar>:
///
/// @return  uart_getchar(0);.
/// @see fdevopen() from avr-libc.
int uart0_getchar( void *f  __attribute__((unused)))
{
    return( uart_getchar(0) );
    5462:	80 e0       	ldi	r24, 0x00	; 0
    5464:	e8 cf       	rjmp	.-48     	; 0x5436 <uart_getchar>
}
    5466:	08 95       	ret

00005468 <uart_putchar>:
/// @param[in] c: transmit character.
/// @param[in] uart: uart number.
///
/// @return void.
int uart_putchar(int c, int uart)
{
    5468:	1f 93       	push	r17
    546a:	cf 93       	push	r28
    546c:	df 93       	push	r29
    546e:	ec 01       	movw	r28, r24
    5470:	16 2f       	mov	r17, r22
    uart_tx_byte(c, uart);
    5472:	c8 df       	rcall	.-112    	; 0x5404 <uart_tx_byte>

    if( c == '\n' )
    5474:	ca 30       	cpi	r28, 0x0A	; 10
    5476:	d1 05       	cpc	r29, r1
    5478:	21 f4       	brne	.+8      	; 0x5482 <uart_putchar+0x1a>
        uart_tx_byte('\r', uart);
    547a:	61 2f       	mov	r22, r17
    547c:	8d e0       	ldi	r24, 0x0D	; 13
    547e:	90 e0       	ldi	r25, 0x00	; 0
    5480:	c1 df       	rcall	.-126    	; 0x5404 <uart_tx_byte>

    return(c);
}
    5482:	ce 01       	movw	r24, r28
    5484:	df 91       	pop	r29
    5486:	cf 91       	pop	r28
    5488:	1f 91       	pop	r17
    548a:	08 95       	ret

0000548c <uart0_putchar>:
/// @param[in] f: unused FILE *stream pointer.
///
/// @return  uart_putchar(c, 0);.
/// @see fdevopen() from avr-libc.
int uart0_putchar(int c, void *f  __attribute__((unused)))
{
    548c:	cf 93       	push	r28
    548e:	df 93       	push	r29
    5490:	ec 01       	movw	r28, r24
    uart_putchar(c, 0);
    5492:	60 e0       	ldi	r22, 0x00	; 0
    5494:	70 e0       	ldi	r23, 0x00	; 0
    5496:	e8 df       	rcall	.-48     	; 0x5468 <uart_putchar>
    return(c);
}
    5498:	ce 01       	movw	r24, r28
    549a:	df 91       	pop	r29
    549c:	cf 91       	pop	r28
    549e:	08 95       	ret

000054a0 <uart_keyhit>:
/// @param[in] uart: uart number.
///
/// @return  Character count in receive buffer.
int uart_keyhit(uint8_t uart)
{
    return ( uart_rx_count( uart ) );
    54a0:	7c cf       	rjmp	.-264    	; 0x539a <uart_rx_count>
}
    54a2:	08 95       	ret

000054a4 <SPI0_Speed>:
/// @brief  Return saved SPI mode as set by SPI0_Mode().
/// @return  saved mode.
int SPI0_Get_Mode( void )
{
    return(SPI0_Mode_value);
}
    54a4:	cf 92       	push	r12
    54a6:	df 92       	push	r13
    54a8:	ef 92       	push	r14
    54aa:	ff 92       	push	r15
    54ac:	6b 01       	movw	r12, r22
    54ae:	7c 01       	movw	r14, r24
    54b0:	80 91 51 17 	lds	r24, 0x1751	; 0x801751 <SPI0_Speed_value>
    54b4:	90 91 52 17 	lds	r25, 0x1752	; 0x801752 <SPI0_Speed_value+0x1>
    54b8:	a0 91 53 17 	lds	r26, 0x1753	; 0x801753 <SPI0_Speed_value+0x2>
    54bc:	b0 91 54 17 	lds	r27, 0x1754	; 0x801754 <SPI0_Speed_value+0x3>
    54c0:	8c 15       	cp	r24, r12
    54c2:	9d 05       	cpc	r25, r13
    54c4:	ae 05       	cpc	r26, r14
    54c6:	bf 05       	cpc	r27, r15
    54c8:	09 f4       	brne	.+2      	; 0x54cc <SPI0_Speed+0x28>
    54ca:	4e c0       	rjmp	.+156    	; 0x5568 <SPI0_Speed+0xc4>
    54cc:	60 e0       	ldi	r22, 0x00	; 0
    54ce:	7d e2       	ldi	r23, 0x2D	; 45
    54d0:	81 e3       	ldi	r24, 0x31	; 49
    54d2:	91 e0       	ldi	r25, 0x01	; 1
    54d4:	a7 01       	movw	r20, r14
    54d6:	96 01       	movw	r18, r12
    54d8:	0e 94 4e e6 	call	0x1cc9c	; 0x1cc9c <__udivmodsi4>
    54dc:	20 38       	cpi	r18, 0x80	; 128
    54de:	31 05       	cpc	r19, r1
    54e0:	41 05       	cpc	r20, r1
    54e2:	51 05       	cpc	r21, r1
    54e4:	28 f4       	brcc	.+10     	; 0x54f0 <SPI0_Speed+0x4c>
    54e6:	20 34       	cpi	r18, 0x40	; 64
    54e8:	31 05       	cpc	r19, r1
    54ea:	41 05       	cpc	r20, r1
    54ec:	51 05       	cpc	r21, r1
    54ee:	30 f0       	brcs	.+12     	; 0x54fc <SPI0_Speed+0x58>
    54f0:	8d b5       	in	r24, 0x2d	; 45
    54f2:	8e 7f       	andi	r24, 0xFE	; 254
    54f4:	8d bd       	out	0x2d, r24	; 45
    54f6:	8c b5       	in	r24, 0x2c	; 44
    54f8:	82 60       	ori	r24, 0x02	; 2
    54fa:	1b c0       	rjmp	.+54     	; 0x5532 <SPI0_Speed+0x8e>
    54fc:	8d b5       	in	r24, 0x2d	; 45
    54fe:	20 32       	cpi	r18, 0x20	; 32
    5500:	31 05       	cpc	r19, r1
    5502:	41 05       	cpc	r20, r1
    5504:	51 05       	cpc	r21, r1
    5506:	28 f0       	brcs	.+10     	; 0x5512 <SPI0_Speed+0x6e>
    5508:	81 60       	ori	r24, 0x01	; 1
    550a:	8d bd       	out	0x2d, r24	; 45
    550c:	8c b5       	in	r24, 0x2c	; 44
    550e:	82 60       	ori	r24, 0x02	; 2
    5510:	1f c0       	rjmp	.+62     	; 0x5550 <SPI0_Speed+0xac>
    5512:	20 31       	cpi	r18, 0x10	; 16
    5514:	31 05       	cpc	r19, r1
    5516:	41 05       	cpc	r20, r1
    5518:	51 05       	cpc	r21, r1
    551a:	10 f0       	brcs	.+4      	; 0x5520 <SPI0_Speed+0x7c>
    551c:	8e 7f       	andi	r24, 0xFE	; 254
    551e:	06 c0       	rjmp	.+12     	; 0x552c <SPI0_Speed+0x88>
    5520:	28 30       	cpi	r18, 0x08	; 8
    5522:	31 05       	cpc	r19, r1
    5524:	41 05       	cpc	r20, r1
    5526:	51 05       	cpc	r21, r1
    5528:	40 f0       	brcs	.+16     	; 0x553a <SPI0_Speed+0x96>
    552a:	81 60       	ori	r24, 0x01	; 1
    552c:	8d bd       	out	0x2d, r24	; 45
    552e:	8c b5       	in	r24, 0x2c	; 44
    5530:	8d 7f       	andi	r24, 0xFD	; 253
    5532:	8c bd       	out	0x2c, r24	; 44
    5534:	8c b5       	in	r24, 0x2c	; 44
    5536:	81 60       	ori	r24, 0x01	; 1
    5538:	0e c0       	rjmp	.+28     	; 0x5556 <SPI0_Speed+0xb2>
    553a:	24 30       	cpi	r18, 0x04	; 4
    553c:	31 05       	cpc	r19, r1
    553e:	41 05       	cpc	r20, r1
    5540:	51 05       	cpc	r21, r1
    5542:	10 f0       	brcs	.+4      	; 0x5548 <SPI0_Speed+0xa4>
    5544:	8e 7f       	andi	r24, 0xFE	; 254
    5546:	01 c0       	rjmp	.+2      	; 0x554a <SPI0_Speed+0xa6>
    5548:	81 60       	ori	r24, 0x01	; 1
    554a:	8d bd       	out	0x2d, r24	; 45
    554c:	8c b5       	in	r24, 0x2c	; 44
    554e:	8d 7f       	andi	r24, 0xFD	; 253
    5550:	8c bd       	out	0x2c, r24	; 44
    5552:	8c b5       	in	r24, 0x2c	; 44
    5554:	8e 7f       	andi	r24, 0xFE	; 254
    5556:	8c bd       	out	0x2c, r24	; 44
    5558:	c0 92 51 17 	sts	0x1751, r12	; 0x801751 <SPI0_Speed_value>
    555c:	d0 92 52 17 	sts	0x1752, r13	; 0x801752 <SPI0_Speed_value+0x1>
    5560:	e0 92 53 17 	sts	0x1753, r14	; 0x801753 <SPI0_Speed_value+0x2>
    5564:	f0 92 54 17 	sts	0x1754, r15	; 0x801754 <SPI0_Speed_value+0x3>
    5568:	ff 90       	pop	r15
    556a:	ef 90       	pop	r14
    556c:	df 90       	pop	r13
    556e:	cf 90       	pop	r12
    5570:	08 95       	ret

00005572 <SPI0_Mode>:
    5572:	cf 93       	push	r28
    5574:	df 93       	push	r29
    5576:	00 d0       	rcall	.+0      	; 0x5578 <SPI0_Mode+0x6>
    5578:	00 d0       	rcall	.+0      	; 0x557a <SPI0_Mode+0x8>
    557a:	1f 92       	push	r1
    557c:	ec 01       	movw	r28, r24
    557e:	81 30       	cpi	r24, 0x01	; 1
    5580:	91 05       	cpc	r25, r1
    5582:	71 f0       	breq	.+28     	; 0x55a0 <SPI0_Mode+0x2e>
    5584:	2c f4       	brge	.+10     	; 0x5590 <SPI0_Mode+0x1e>
    5586:	89 2b       	or	r24, r25
    5588:	c1 f4       	brne	.+48     	; 0x55ba <SPI0_Mode+0x48>
    558a:	8c b5       	in	r24, 0x2c	; 44
    558c:	87 7f       	andi	r24, 0xF7	; 247
    558e:	11 c0       	rjmp	.+34     	; 0x55b2 <SPI0_Mode+0x40>
    5590:	82 30       	cpi	r24, 0x02	; 2
    5592:	91 05       	cpc	r25, r1
    5594:	61 f0       	breq	.+24     	; 0x55ae <SPI0_Mode+0x3c>
    5596:	03 97       	sbiw	r24, 0x03	; 3
    5598:	81 f4       	brne	.+32     	; 0x55ba <SPI0_Mode+0x48>
    559a:	8c b5       	in	r24, 0x2c	; 44
    559c:	88 60       	ori	r24, 0x08	; 8
    559e:	02 c0       	rjmp	.+4      	; 0x55a4 <SPI0_Mode+0x32>
    55a0:	8c b5       	in	r24, 0x2c	; 44
    55a2:	87 7f       	andi	r24, 0xF7	; 247
    55a4:	8c bd       	out	0x2c, r24	; 44
    55a6:	8c b5       	in	r24, 0x2c	; 44
    55a8:	84 60       	ori	r24, 0x04	; 4
    55aa:	8c bd       	out	0x2c, r24	; 44
    55ac:	12 c0       	rjmp	.+36     	; 0x55d2 <SPI0_Mode+0x60>
    55ae:	8c b5       	in	r24, 0x2c	; 44
    55b0:	88 60       	ori	r24, 0x08	; 8
    55b2:	8c bd       	out	0x2c, r24	; 44
    55b4:	8c b5       	in	r24, 0x2c	; 44
    55b6:	8b 7f       	andi	r24, 0xFB	; 251
    55b8:	f8 cf       	rjmp	.-16     	; 0x55aa <SPI0_Mode+0x38>
    55ba:	ed b7       	in	r30, 0x3d	; 61
    55bc:	fe b7       	in	r31, 0x3e	; 62
    55be:	d5 83       	std	Z+5, r29	; 0x05
    55c0:	c4 83       	std	Z+4, r28	; 0x04
    55c2:	84 e1       	ldi	r24, 0x14	; 20
    55c4:	93 e0       	ldi	r25, 0x03	; 3
    55c6:	a0 e0       	ldi	r26, 0x00	; 0
    55c8:	81 83       	std	Z+1, r24	; 0x01
    55ca:	92 83       	std	Z+2, r25	; 0x02
    55cc:	a3 83       	std	Z+3, r26	; 0x03
    55ce:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    55d2:	d0 93 50 17 	sts	0x1750, r29	; 0x801750 <SPI0_Mode_value+0x1>
    55d6:	c0 93 4f 17 	sts	0x174F, r28	; 0x80174f <SPI0_Mode_value>
    55da:	cd b7       	in	r28, 0x3d	; 61
    55dc:	de b7       	in	r29, 0x3e	; 62
    55de:	25 96       	adiw	r28, 0x05	; 5
    55e0:	e2 e0       	ldi	r30, 0x02	; 2
    55e2:	0c 94 e7 e6 	jmp	0x1cdce	; 0x1cdce <__epilogue_restores__+0x20>

000055e6 <SPI0_TXRX_Byte>:
/// @param[in] Data: Data to send.
///
/// @return  Data received.
uint8_t SPI0_TXRX_Byte(uint8_t Data)
{
    SPDR = Data;                                  // Transmit
    55e6:	8e bd       	out	0x2e, r24	; 46

    while( !BIT_TST(SPSR,SPIF) )                  // Wait for send
    55e8:	0d b4       	in	r0, 0x2d	; 45
    55ea:	07 fe       	sbrs	r0, 7
    55ec:	fd cf       	rjmp	.-6      	; 0x55e8 <SPI0_TXRX_Byte+0x2>
        ;

    return (SPDR);                                // Received Data
    55ee:	8e b5       	in	r24, 0x2e	; 46
}
    55f0:	08 95       	ret

000055f2 <SPI0_Init>:

///@brief Initialize SPI0 device.
/// See Atmel App Note AVR151
/// Set default speed, IO pins and mode.
void SPI0_Init(uint32_t speed)
{
    55f2:	cf 92       	push	r12
    55f4:	df 92       	push	r13
    55f6:	ef 92       	push	r14
    55f8:	ff 92       	push	r15
    55fa:	cf 93       	push	r28
    55fc:	df 93       	push	r29
    55fe:	1f 92       	push	r1
    5600:	cd b7       	in	r28, 0x3d	; 61
    5602:	de b7       	in	r29, 0x3e	; 62
    5604:	6b 01       	movw	r12, r22
    5606:	7c 01       	movw	r14, r24
    printf("Port B DDR:   0x%02x\n", (int) GPIO_PORT_DDR_RD(GPIO_B));
    printf("Port B LATCH: 0x%02x\n", (int) GPIO_PORT_LATCH_RD(GPIO_B));
    printf("Port B PINS:  0x%02x\n", (int) GPIO_PORT_LATCH_RD(GPIO_B));
#endif

    SPCR = 0;                                     // Clear SPCR in case we are not called after RESET
    5608:	1c bc       	out	0x2c, r1	; 44

    GPIO_PIN_HI(SCK);                             // SCK Output
    560a:	2f 9a       	sbi	0x05, 7	; 5
    560c:	27 9a       	sbi	0x04, 7	; 4
    GPIO_PIN_HI(MOSI);                            // MOSI Output
    560e:	2d 9a       	sbi	0x05, 5	; 5
    5610:	25 9a       	sbi	0x04, 5	; 4
    GPIO_PIN_FLOAT(MISO);                         // MISO Input, no pull-up
    5612:	26 98       	cbi	0x04, 6	; 4

// Warning *** MSTR MUST be set BEFORE SPE!!!! *** otherwise SS will NOT behave as an output
    GPIO_PIN_LOW(SS);                             // SS Output must be HI prevent slave mode from getting set while initializing
    5614:	2c 98       	cbi	0x05, 4	; 5
    5616:	24 9a       	sbi	0x04, 4	; 4
    BIT_SET(SPCR, MSTR);                          // Master Mode
    5618:	8c b5       	in	r24, 0x2c	; 44
    561a:	80 61       	ori	r24, 0x10	; 16
    561c:	8c bd       	out	0x2c, r24	; 44
    BIT_SET(SPCR, SPE);                           // Enable SPI
    561e:	8c b5       	in	r24, 0x2c	; 44
    5620:	80 64       	ori	r24, 0x40	; 64
    5622:	8c bd       	out	0x2c, r24	; 44

// SPI Clear any pending interrupt flags
    D = SPSR;
    5624:	8d b5       	in	r24, 0x2d	; 45
    5626:	89 83       	std	Y+1, r24	; 0x01
    D = SPDR;
    5628:	8e b5       	in	r24, 0x2e	; 46
    562a:	89 83       	std	Y+1, r24	; 0x01

/// Set SPI clock mode 0
///  SPI Mode     CPOL    CPHA            Sample
///  0    0       0       Leading (Rising)   Edge
    SPI0_Mode(0);
    562c:	80 e0       	ldi	r24, 0x00	; 0
    562e:	90 e0       	ldi	r25, 0x00	; 0
    5630:	a0 df       	rcall	.-192    	; 0x5572 <SPI0_Mode>

// Set SPI clock speed
    SPI0_Speed(speed);
    5632:	c7 01       	movw	r24, r14
    5634:	b6 01       	movw	r22, r12
    5636:	36 df       	rcall	.-404    	; 0x54a4 <SPI0_Speed>

    SPI0_TXRX_Byte(0xff);                         // Send dummy 0xFF
    5638:	8f ef       	ldi	r24, 0xFF	; 255
    563a:	d5 df       	rcall	.-86     	; 0x55e6 <SPI0_TXRX_Byte>
    563c:	0f 90       	pop	r0
    SPI0_Init_state = 1;

}
    563e:	df 91       	pop	r29
    5640:	cf 91       	pop	r28
    5642:	ff 90       	pop	r15
    5644:	ef 90       	pop	r14
    5646:	df 90       	pop	r13
    5648:	cf 90       	pop	r12
    564a:	08 95       	ret

0000564c <SPI0_TX>:
    564c:	0f 93       	push	r16
/// @brief HSPI write using FIFO
/// @param[in] *data: transmit buffer
/// @param[in] count: number of bytes to write
/// @return  void
void SPI0_TX(uint8_t *data, int count)
{
    564e:	1f 93       	push	r17
    5650:	cf 93       	push	r28
    5652:	df 93       	push	r29
    5654:	8c 01       	movw	r16, r24
    5656:	eb 01       	movw	r28, r22

    while(count > 0)
    5658:	1c 16       	cp	r1, r28
    565a:	1d 06       	cpc	r1, r29
    565c:	34 f4       	brge	.+12     	; 0x566a <SPI0_TX+0x1e>
    {
        SPI0_TXRX_Byte(*data);
    565e:	f8 01       	movw	r30, r16
    5660:	81 91       	ld	r24, Z+
    5662:	8f 01       	movw	r16, r30
    5664:	c0 df       	rcall	.-128    	; 0x55e6 <SPI0_TXRX_Byte>
        ++data;
        --count;
    5666:	21 97       	sbiw	r28, 0x01	; 1
    5668:	f7 cf       	rjmp	.-18     	; 0x5658 <SPI0_TX+0xc>
    }
}
    566a:	df 91       	pop	r29
    566c:	cf 91       	pop	r28
    566e:	1f 91       	pop	r17
    5670:	0f 91       	pop	r16
    5672:	08 95       	ret

00005674 <SPI0_TXRX>:
/// @param[in] *data: transmit / receive buffer
/// @param[in] count: number of bytes to write / read
/// @return  void

void SPI0_TXRX(uint8_t *data, int count)
{
    5674:	0f 93       	push	r16
    5676:	1f 93       	push	r17
    5678:	cf 93       	push	r28
    567a:	df 93       	push	r29
    567c:	8c 01       	movw	r16, r24
    567e:	eb 01       	movw	r28, r22

    while(count > 0)
    5680:	1c 16       	cp	r1, r28
    5682:	1d 06       	cpc	r1, r29
    5684:	44 f4       	brge	.+16     	; 0x5696 <SPI0_TXRX+0x22>
    {
        *data = SPI0_TXRX_Byte(*data);
    5686:	f8 01       	movw	r30, r16
    5688:	80 81       	ld	r24, Z
    568a:	ad df       	rcall	.-166    	; 0x55e6 <SPI0_TXRX_Byte>
    568c:	f8 01       	movw	r30, r16
    568e:	81 93       	st	Z+, r24
    5690:	8f 01       	movw	r16, r30
        ++data;
        --count;
    5692:	21 97       	sbiw	r28, 0x01	; 1
    5694:	f5 cf       	rjmp	.-22     	; 0x5680 <SPI0_TXRX+0xc>
    }
}
    5696:	df 91       	pop	r29
    5698:	cf 91       	pop	r28
    569a:	1f 91       	pop	r17
    569c:	0f 91       	pop	r16
    569e:	08 95       	ret

000056a0 <SPI0_RX>:
/// @brief HSPI read using FIFO
/// @param[in] *data: receive buffer
/// @param[in] count: number of bytes to read
/// @return  void
void SPI0_RX(uint8_t *data, int count)
{
    56a0:	0f 93       	push	r16
    56a2:	1f 93       	push	r17
    56a4:	cf 93       	push	r28
    56a6:	df 93       	push	r29
    56a8:	8c 01       	movw	r16, r24
    56aa:	eb 01       	movw	r28, r22

    while(count > 0)
    56ac:	1c 16       	cp	r1, r28
    56ae:	1d 06       	cpc	r1, r29
    56b0:	3c f4       	brge	.+14     	; 0x56c0 <SPI0_RX+0x20>
    {
        *data = SPI0_TXRX_Byte(0xff);
    56b2:	8f ef       	ldi	r24, 0xFF	; 255
    56b4:	98 df       	rcall	.-208    	; 0x55e6 <SPI0_TXRX_Byte>
    56b6:	f8 01       	movw	r30, r16
    56b8:	81 93       	st	Z+, r24
    56ba:	8f 01       	movw	r16, r30
        ++data;
        --count;
    56bc:	21 97       	sbiw	r28, 0x01	; 1
    56be:	f6 cf       	rjmp	.-20     	; 0x56ac <SPI0_RX+0xc>
    }
}
    56c0:	df 91       	pop	r29
    56c2:	cf 91       	pop	r28
    56c4:	1f 91       	pop	r17
    56c6:	0f 91       	pop	r16
    56c8:	08 95       	ret

000056ca <i2c_timer>:
int8_t i2c_ok()
{
	if (i2c.flags) 
		return(0);
	return(1);
}
    56ca:	2f b7       	in	r18, 0x3f	; 63
    56cc:	80 91 47 1a 	lds	r24, 0x1A47	; 0x801a47 <i2c+0x1>
    56d0:	81 11       	cpse	r24, r1
    56d2:	04 c0       	rjmp	.+8      	; 0x56dc <i2c_timer+0x12>
    56d4:	80 91 48 1a 	lds	r24, 0x1A48	; 0x801a48 <i2c+0x2>
    56d8:	81 11       	cpse	r24, r1
    56da:	0b c0       	rjmp	.+22     	; 0x56f2 <i2c_timer+0x28>
    56dc:	80 91 4a 1a 	lds	r24, 0x1A4A	; 0x801a4a <i2c+0x4>
    56e0:	90 91 4b 1a 	lds	r25, 0x1A4B	; 0x801a4b <i2c+0x5>
    56e4:	00 97       	sbiw	r24, 0x00	; 0
    56e6:	29 f0       	breq	.+10     	; 0x56f2 <i2c_timer+0x28>
    56e8:	01 97       	sbiw	r24, 0x01	; 1
    56ea:	90 93 4b 1a 	sts	0x1A4B, r25	; 0x801a4b <i2c+0x5>
    56ee:	80 93 4a 1a 	sts	0x1A4A, r24	; 0x801a4a <i2c+0x4>
    56f2:	2f bf       	out	0x3f, r18	; 63
    56f4:	08 95       	ret

000056f6 <i2c_check_op>:
    56f6:	ad b7       	in	r26, 0x3d	; 61
    56f8:	be b7       	in	r27, 0x3e	; 62
    56fa:	17 97       	sbiw	r26, 0x07	; 7
    56fc:	0f b6       	in	r0, 0x3f	; 63
    56fe:	f8 94       	cli
    5700:	be bf       	out	0x3e, r27	; 62
    5702:	0f be       	out	0x3f, r0	; 63
    5704:	ad bf       	out	0x3d, r26	; 61
    5706:	28 2f       	mov	r18, r24
    5708:	08 2e       	mov	r0, r24
    570a:	00 0c       	add	r0, r0
    570c:	33 0b       	sbc	r19, r19
    570e:	80 31       	cpi	r24, 0x10	; 16
    5710:	88 f0       	brcs	.+34     	; 0x5734 <i2c_check_op+0x3e>
    5712:	80 e1       	ldi	r24, 0x10	; 16
    5714:	90 e0       	ldi	r25, 0x00	; 0
    5716:	ed b7       	in	r30, 0x3d	; 61
    5718:	fe b7       	in	r31, 0x3e	; 62
    571a:	97 83       	std	Z+7, r25	; 0x07
    571c:	86 83       	std	Z+6, r24	; 0x06
    571e:	35 83       	std	Z+5, r19	; 0x05
    5720:	24 83       	std	Z+4, r18	; 0x04
    5722:	89 e2       	ldi	r24, 0x29	; 41
    5724:	94 e0       	ldi	r25, 0x04	; 4
    5726:	a0 e0       	ldi	r26, 0x00	; 0
    5728:	81 83       	std	Z+1, r24	; 0x01
    572a:	92 83       	std	Z+2, r25	; 0x02
    572c:	a3 83       	std	Z+3, r26	; 0x03
    572e:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    5732:	24 c0       	rjmp	.+72     	; 0x577c <i2c_check_op+0x86>
    5734:	f9 01       	movw	r30, r18
    5736:	ee 0f       	add	r30, r30
    5738:	ff 1f       	adc	r31, r31
    573a:	ea 5a       	subi	r30, 0xAA	; 170
    573c:	f8 4e       	sbci	r31, 0xE8	; 232
    573e:	01 90       	ld	r0, Z+
    5740:	f0 81       	ld	r31, Z
    5742:	e0 2d       	mov	r30, r0
    5744:	30 97       	sbiw	r30, 0x00	; 0
    5746:	d1 f0       	breq	.+52     	; 0x577c <i2c_check_op+0x86>
    5748:	80 85       	ldd	r24, Z+8	; 0x08
    574a:	91 85       	ldd	r25, Z+9	; 0x09
    574c:	89 2b       	or	r24, r25
    574e:	39 f4       	brne	.+14     	; 0x575e <i2c_check_op+0x68>
    5750:	ed b7       	in	r30, 0x3d	; 61
    5752:	fe b7       	in	r31, 0x3e	; 62
    5754:	35 83       	std	Z+5, r19	; 0x05
    5756:	24 83       	std	Z+4, r18	; 0x04
    5758:	80 e1       	ldi	r24, 0x10	; 16
    575a:	94 e0       	ldi	r25, 0x04	; 4
    575c:	09 c0       	rjmp	.+18     	; 0x5770 <i2c_check_op+0x7a>
    575e:	86 81       	ldd	r24, Z+6	; 0x06
    5760:	81 11       	cpse	r24, r1
    5762:	0e c0       	rjmp	.+28     	; 0x5780 <i2c_check_op+0x8a>
    5764:	ed b7       	in	r30, 0x3d	; 61
    5766:	fe b7       	in	r31, 0x3e	; 62
    5768:	35 83       	std	Z+5, r19	; 0x05
    576a:	24 83       	std	Z+4, r18	; 0x04
    576c:	8a ef       	ldi	r24, 0xFA	; 250
    576e:	93 e0       	ldi	r25, 0x03	; 3
    5770:	a0 e0       	ldi	r26, 0x00	; 0
    5772:	81 83       	std	Z+1, r24	; 0x01
    5774:	92 83       	std	Z+2, r25	; 0x02
    5776:	a3 83       	std	Z+3, r26	; 0x03
    5778:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    577c:	80 e0       	ldi	r24, 0x00	; 0
    577e:	01 c0       	rjmp	.+2      	; 0x5782 <i2c_check_op+0x8c>
    5780:	81 e0       	ldi	r24, 0x01	; 1
    5782:	ad b7       	in	r26, 0x3d	; 61
    5784:	be b7       	in	r27, 0x3e	; 62
    5786:	17 96       	adiw	r26, 0x07	; 7
    5788:	0f b6       	in	r0, 0x3f	; 63
    578a:	f8 94       	cli
    578c:	be bf       	out	0x3e, r27	; 62
    578e:	0f be       	out	0x3f, r0	; 63
    5790:	ad bf       	out	0x3d, r26	; 61
    5792:	08 95       	ret

00005794 <i2c_task_init>:
    5794:	8f b7       	in	r24, 0x3f	; 63
    5796:	f8 94       	cli
    5798:	e6 e5       	ldi	r30, 0x56	; 86
    579a:	f7 e1       	ldi	r31, 0x17	; 23
    579c:	11 92       	st	Z+, r1
    579e:	11 92       	st	Z+, r1
    57a0:	97 e1       	ldi	r25, 0x17	; 23
    57a2:	e6 37       	cpi	r30, 0x76	; 118
    57a4:	f9 07       	cpc	r31, r25
    57a6:	d1 f7       	brne	.-12     	; 0x579c <i2c_task_init+0x8>
    57a8:	10 92 76 17 	sts	0x1776, r1	; 0x801776 <i2c_task>
    57ac:	91 e0       	ldi	r25, 0x01	; 1
    57ae:	90 93 78 17 	sts	0x1778, r25	; 0x801778 <i2c_task+0x2>
    57b2:	10 92 77 17 	sts	0x1777, r1	; 0x801777 <i2c_task+0x1>
    57b6:	10 92 79 17 	sts	0x1779, r1	; 0x801779 <i2c_task+0x3>
    57ba:	8f bf       	out	0x3f, r24	; 63
    57bc:	08 95       	ret

000057be <i2c_task_op_add>:
    57be:	ef 92       	push	r14
    57c0:	ff 92       	push	r15
    57c2:	0f 93       	push	r16
    57c4:	1f 93       	push	r17
    57c6:	cf 93       	push	r28
    57c8:	df 93       	push	r29
    57ca:	d8 2f       	mov	r29, r24
    57cc:	c6 2f       	mov	r28, r22
    57ce:	7a 01       	movw	r14, r20
    57d0:	02 2f       	mov	r16, r18
    57d2:	1f b7       	in	r17, 0x3f	; 63
    57d4:	6a e0       	ldi	r22, 0x0A	; 10
    57d6:	70 e0       	ldi	r23, 0x00	; 0
    57d8:	81 e0       	ldi	r24, 0x01	; 1
    57da:	90 e0       	ldi	r25, 0x00	; 0
    57dc:	a8 db       	rcall	.-2224   	; 0x4f2e <safecalloc>
    57de:	fc 01       	movw	r30, r24
    57e0:	89 2b       	or	r24, r25
    57e2:	89 f0       	breq	.+34     	; 0x5806 <i2c_task_op_add+0x48>
    57e4:	f8 94       	cli
    57e6:	11 82       	std	Z+1, r1	; 0x01
    57e8:	12 82       	std	Z+2, r1	; 0x02
    57ea:	dd 0f       	add	r29, r29
    57ec:	c1 70       	andi	r28, 0x01	; 1
    57ee:	cd 2b       	or	r28, r29
    57f0:	c0 83       	st	Z, r28
    57f2:	8a e0       	ldi	r24, 0x0A	; 10
    57f4:	90 e0       	ldi	r25, 0x00	; 0
    57f6:	95 83       	std	Z+5, r25	; 0x05
    57f8:	84 83       	std	Z+4, r24	; 0x04
    57fa:	13 82       	std	Z+3, r1	; 0x03
    57fc:	06 83       	std	Z+6, r16	; 0x06
    57fe:	17 82       	std	Z+7, r1	; 0x07
    5800:	f1 86       	std	Z+9, r15	; 0x09
    5802:	e0 86       	std	Z+8, r14	; 0x08
    5804:	1f bf       	out	0x3f, r17	; 63
    5806:	cf 01       	movw	r24, r30
    5808:	cd b7       	in	r28, 0x3d	; 61
    580a:	de b7       	in	r29, 0x3e	; 62
    580c:	e6 e0       	ldi	r30, 0x06	; 6
    580e:	0c 94 e3 e6 	jmp	0x1cdc6	; 0x1cdc6 <__epilogue_restores__+0x18>

00005812 <i2c_init>:
    5812:	cf 93       	push	r28
    5814:	00 d0       	rcall	.+0      	; 0x5816 <i2c_init+0x4>
    5816:	1f 92       	push	r1
    5818:	9b 01       	movw	r18, r22
    581a:	ac 01       	movw	r20, r24
    581c:	cf b7       	in	r28, 0x3f	; 63
    581e:	60 e0       	ldi	r22, 0x00	; 0
    5820:	7d e2       	ldi	r23, 0x2D	; 45
    5822:	81 e3       	ldi	r24, 0x31	; 49
    5824:	91 e0       	ldi	r25, 0x01	; 1
    5826:	0e 94 4e e6 	call	0x1cc9c	; 0x1cc9c <__udivmodsi4>
    582a:	da 01       	movw	r26, r20
    582c:	c9 01       	movw	r24, r18
    582e:	40 97       	sbiw	r24, 0x10	; 16
    5830:	a1 09       	sbc	r26, r1
    5832:	b1 09       	sbc	r27, r1
    5834:	ac 01       	movw	r20, r24
    5836:	bd 01       	movw	r22, r26
    5838:	76 95       	lsr	r23
    583a:	67 95       	ror	r22
    583c:	57 95       	ror	r21
    583e:	47 95       	ror	r20
    5840:	ca 01       	movw	r24, r20
    5842:	88 27       	eor	r24, r24
    5844:	89 2b       	or	r24, r25
    5846:	59 f0       	breq	.+22     	; 0x585e <i2c_init+0x4c>
    5848:	8e ed       	ldi	r24, 0xDE	; 222
    584a:	93 e0       	ldi	r25, 0x03	; 3
    584c:	a0 e0       	ldi	r26, 0x00	; 0
    584e:	ed b7       	in	r30, 0x3d	; 61
    5850:	fe b7       	in	r31, 0x3e	; 62
    5852:	81 83       	std	Z+1, r24	; 0x01
    5854:	92 83       	std	Z+2, r25	; 0x02
    5856:	a3 83       	std	Z+3, r26	; 0x03
    5858:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    585c:	3a c0       	rjmp	.+116    	; 0x58d2 <i2c_init+0xc0>
    585e:	f8 94       	cli
    5860:	40 93 b8 00 	sts	0x00B8, r20	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    5864:	10 92 47 1a 	sts	0x1A47, r1	; 0x801a47 <i2c+0x1>
    5868:	81 e0       	ldi	r24, 0x01	; 1
    586a:	80 93 48 1a 	sts	0x1A48, r24	; 0x801a48 <i2c+0x2>
    586e:	10 92 76 17 	sts	0x1776, r1	; 0x801776 <i2c_task>
    5872:	80 93 78 17 	sts	0x1778, r24	; 0x801778 <i2c_task+0x2>
    5876:	40 9a       	sbi	0x08, 0	; 8
    5878:	41 9a       	sbi	0x08, 1	; 8
    587a:	84 e8       	ldi	r24, 0x84	; 132
    587c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5880:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
    5884:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5888:	8c 7f       	andi	r24, 0xFC	; 252
    588a:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    588e:	80 91 55 17 	lds	r24, 0x1755	; 0x801755 <i2c_init_status>
    5892:	81 11       	cpse	r24, r1
    5894:	1d c0       	rjmp	.+58     	; 0x58d0 <i2c_init+0xbe>
    5896:	e6 e5       	ldi	r30, 0x56	; 86
    5898:	f7 e1       	ldi	r31, 0x17	; 23
    589a:	11 92       	st	Z+, r1
    589c:	11 92       	st	Z+, r1
    589e:	27 e1       	ldi	r18, 0x17	; 23
    58a0:	e6 37       	cpi	r30, 0x76	; 118
    58a2:	f2 07       	cpc	r31, r18
    58a4:	d1 f7       	brne	.-12     	; 0x589a <i2c_init+0x88>
    58a6:	61 e0       	ldi	r22, 0x01	; 1
    58a8:	70 e0       	ldi	r23, 0x00	; 0
    58aa:	85 e6       	ldi	r24, 0x65	; 101
    58ac:	9b e2       	ldi	r25, 0x2B	; 43
    58ae:	0e 94 99 34 	call	0x6932	; 0x6932 <set_timers>
    58b2:	01 96       	adiw	r24, 0x01	; 1
    58b4:	51 f4       	brne	.+20     	; 0x58ca <i2c_init+0xb8>
    58b6:	87 ec       	ldi	r24, 0xC7	; 199
    58b8:	93 e0       	ldi	r25, 0x03	; 3
    58ba:	a0 e0       	ldi	r26, 0x00	; 0
    58bc:	ed b7       	in	r30, 0x3d	; 61
    58be:	fe b7       	in	r31, 0x3e	; 62
    58c0:	81 83       	std	Z+1, r24	; 0x01
    58c2:	92 83       	std	Z+2, r25	; 0x02
    58c4:	a3 83       	std	Z+3, r26	; 0x03
    58c6:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    58ca:	81 e0       	ldi	r24, 0x01	; 1
    58cc:	80 93 55 17 	sts	0x1755, r24	; 0x801755 <i2c_init_status>
    58d0:	cf bf       	out	0x3f, r28	; 63
    58d2:	0f 90       	pop	r0
    58d4:	0f 90       	pop	r0
    58d6:	0f 90       	pop	r0
    58d8:	cf 91       	pop	r28
    58da:	08 95       	ret

000058dc <i2c_done>:
///@brief Is i2c structure done sending/receiving ?
///
/// @return  1 DONE, 0 NOT DONE
int8_t i2c_done()
{
	delayus(1);
    58dc:	61 e0       	ldi	r22, 0x01	; 1
    58de:	70 e0       	ldi	r23, 0x00	; 0
    58e0:	80 e0       	ldi	r24, 0x00	; 0
    58e2:	90 e0       	ldi	r25, 0x00	; 0
    58e4:	a5 db       	rcall	.-2230   	; 0x5030 <delayus>
	if(!i2c.enable || i2c.done )
    58e6:	80 91 47 1a 	lds	r24, 0x1A47	; 0x801a47 <i2c+0x1>
    58ea:	88 23       	and	r24, r24
    58ec:	39 f0       	breq	.+14     	; 0x58fc <i2c_done+0x20>
		return(1);
    58ee:	81 e0       	ldi	r24, 0x01	; 1
    58f0:	90 91 48 1a 	lds	r25, 0x1A48	; 0x801a48 <i2c+0x2>
    58f4:	91 11       	cpse	r25, r1
    58f6:	03 c0       	rjmp	.+6      	; 0x58fe <i2c_done+0x22>
    58f8:	80 e0       	ldi	r24, 0x00	; 0
    58fa:	08 95       	ret
    58fc:	81 e0       	ldi	r24, 0x01	; 1
	return(0);
}
    58fe:	08 95       	ret

00005900 <i2c_task_done>:
///@brief Are all i2c_task_op[] pointers done sending/receiving ?
///
/// @return  1 DONE, 0 NOT DONE
int8_t i2c_task_done()
{
	delayus(1);
    5900:	61 e0       	ldi	r22, 0x01	; 1
    5902:	70 e0       	ldi	r23, 0x00	; 0
    5904:	80 e0       	ldi	r24, 0x00	; 0
    5906:	90 e0       	ldi	r25, 0x00	; 0
    5908:	93 db       	rcall	.-2266   	; 0x5030 <delayus>
	if(!i2c_task.enable || i2c_task.done )
    590a:	80 91 76 17 	lds	r24, 0x1776	; 0x801776 <i2c_task>
    590e:	88 23       	and	r24, r24
    5910:	39 f0       	breq	.+14     	; 0x5920 <i2c_task_done+0x20>
		return(1);
    5912:	81 e0       	ldi	r24, 0x01	; 1
    5914:	90 91 78 17 	lds	r25, 0x1778	; 0x801778 <i2c_task+0x2>
    5918:	91 11       	cpse	r25, r1
    591a:	03 c0       	rjmp	.+6      	; 0x5922 <i2c_task_done+0x22>
    591c:	80 e0       	ldi	r24, 0x00	; 0
    591e:	08 95       	ret
    5920:	81 e0       	ldi	r24, 0x01	; 1
	return(0);
}
    5922:	08 95       	ret

00005924 <i2c_send_start>:
///@brief Send I2C START and enable interrupts
///
/// @return  void
void i2c_send_start()
{
	i2c.done = 0;
    5924:	e6 e4       	ldi	r30, 0x46	; 70
    5926:	fa e1       	ldi	r31, 0x1A	; 26
    5928:	12 82       	std	Z+2, r1	; 0x02
	i2c.enable = 1;
    592a:	81 e0       	ldi	r24, 0x01	; 1
    592c:	81 83       	std	Z+1, r24	; 0x01
	i2c.timeout = I2C_TIMEOUT;		// Start timeout timer
    592e:	8a e0       	ldi	r24, 0x0A	; 10
    5930:	90 e0       	ldi	r25, 0x00	; 0
    5932:	95 83       	std	Z+5, r25	; 0x05
    5934:	84 83       	std	Z+4, r24	; 0x04
	// Start a transactions
	// TWI Enable
	// TWI Interrupt Enable
	// TWI Interrupt Clear
	// TWI SEND RESTART
	TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWSTA);
    5936:	85 ea       	ldi	r24, 0xA5	; 165
    5938:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    593c:	08 95       	ret

0000593e <i2c_task_run>:

/// @brief Run all valid i2c_task_op[] tasks
///
/// @return  void
void i2c_task_run()
{
    593e:	ef 92       	push	r14
    5940:	ff 92       	push	r15
    5942:	0f 93       	push	r16
    5944:	1f 93       	push	r17
    5946:	cf 93       	push	r28
    5948:	df 93       	push	r29
	uint8_t sreg = SREG;
    594a:	ff b6       	in	r15, 0x3f	; 63
	i2c_op_t *o;
    uint8_t run = 0;
	int8_t i;


	cli();
    594c:	f8 94       	cli
	i2c_task.done = 0;
    594e:	10 92 78 17 	sts	0x1778, r1	; 0x801778 <i2c_task+0x2>
	i2c_task.error = 0;
    5952:	10 92 79 17 	sts	0x1779, r1	; 0x801779 <i2c_task+0x3>
	i2c_task.ind = 0;
    5956:	10 92 77 17 	sts	0x1777, r1	; 0x801777 <i2c_task+0x1>

	// re-enable tasks
	for(i=0;i2c_check_op(i);++i)
    595a:	c0 e0       	ldi	r28, 0x00	; 0
/// @return  void
void i2c_task_run()
{
	uint8_t sreg = SREG;
	i2c_op_t *o;
    uint8_t run = 0;
    595c:	d0 e0       	ldi	r29, 0x00	; 0

	// re-enable tasks
	for(i=0;i2c_check_op(i);++i)
	{
		o = i2c_task_op[i];
		o->enable = 1;
    595e:	ee 24       	eor	r14, r14
    5960:	e3 94       	inc	r14
		o->done = 0;
		o->flags = 0;
		o->ind = 0;
		o->timeout = I2C_TIMEOUT;
    5962:	0a e0       	ldi	r16, 0x0A	; 10
    5964:	10 e0       	ldi	r17, 0x00	; 0
	i2c_task.done = 0;
	i2c_task.error = 0;
	i2c_task.ind = 0;

	// re-enable tasks
	for(i=0;i2c_check_op(i);++i)
    5966:	8c 2f       	mov	r24, r28
    5968:	c6 de       	rcall	.-628    	; 0x56f6 <i2c_check_op>
    596a:	88 23       	and	r24, r24
    596c:	d1 f0       	breq	.+52     	; 0x59a2 <i2c_task_run+0x64>
	{
		o = i2c_task_op[i];
    596e:	ec 2f       	mov	r30, r28
    5970:	ee 0f       	add	r30, r30
    5972:	ff 0b       	sbc	r31, r31
    5974:	ea 5a       	subi	r30, 0xAA	; 170
    5976:	f8 4e       	sbci	r31, 0xE8	; 232
    5978:	01 90       	ld	r0, Z+
    597a:	f0 81       	ld	r31, Z
    597c:	e0 2d       	mov	r30, r0
		o->enable = 1;
    597e:	e1 82       	std	Z+1, r14	; 0x01
		o->done = 0;
    5980:	12 82       	std	Z+2, r1	; 0x02
		o->flags = 0;
    5982:	13 82       	std	Z+3, r1	; 0x03
		o->ind = 0;
    5984:	17 82       	std	Z+7, r1	; 0x07
		o->timeout = I2C_TIMEOUT;
    5986:	15 83       	std	Z+5, r17	; 0x05
    5988:	04 83       	std	Z+4, r16	; 0x04
		if(!run)
    598a:	d1 11       	cpse	r29, r1
    598c:	07 c0       	rjmp	.+14     	; 0x599c <i2c_task_run+0x5e>
		{
			run = 1;
			i2c = *o;
    598e:	8a e0       	ldi	r24, 0x0A	; 10
    5990:	a6 e4       	ldi	r26, 0x46	; 70
    5992:	ba e1       	ldi	r27, 0x1A	; 26
    5994:	01 90       	ld	r0, Z+
    5996:	0d 92       	st	X+, r0
    5998:	8a 95       	dec	r24
    599a:	e1 f7       	brne	.-8      	; 0x5994 <i2c_task_run+0x56>
    599c:	cf 5f       	subi	r28, 0xFF	; 255
    599e:	d1 e0       	ldi	r29, 0x01	; 1
    59a0:	e2 cf       	rjmp	.-60     	; 0x5966 <i2c_task_run+0x28>
		}
	}

	if(run)
    59a2:	dd 23       	and	r29, r29
    59a4:	91 f0       	breq	.+36     	; 0x59ca <i2c_task_run+0x8c>
	{
		// TASK callback
		i2c_callback = i2c_task_next_op;
    59a6:	8c e3       	ldi	r24, 0x3C	; 60
    59a8:	9d e2       	ldi	r25, 0x2D	; 45
    59aa:	90 93 7b 17 	sts	0x177B, r25	; 0x80177b <i2c_callback+0x1>
    59ae:	80 93 7a 17 	sts	0x177A, r24	; 0x80177a <i2c_callback>

		i2c_task.enable = 1;
    59b2:	81 e0       	ldi	r24, 0x01	; 1
    59b4:	80 93 76 17 	sts	0x1776, r24	; 0x801776 <i2c_task>
		i2c_task.done = 0;
    59b8:	10 92 78 17 	sts	0x1778, r1	; 0x801778 <i2c_task+0x2>

        // Reset Status
        TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    59bc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    59c0:	8c 7f       	andi	r24, 0xFC	; 252
    59c2:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
        // TWI Interrupt Clear
        // TWI SEND RESTART
        // TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWSTA);
        // Disable Slave Mode

		i2c_send_start();
    59c6:	ae df       	rcall	.-164    	; 0x5924 <i2c_send_start>
    59c8:	15 c0       	rjmp	.+42     	; 0x59f4 <i2c_task_run+0xb6>
        // FIXME we should notify the user ?
		// Nothing to DO
		// User Error

		// TASK callback
		i2c_callback = NULL;
    59ca:	10 92 7b 17 	sts	0x177B, r1	; 0x80177b <i2c_callback+0x1>
    59ce:	10 92 7a 17 	sts	0x177A, r1	; 0x80177a <i2c_callback>

		// TASK Nothing to DO
		i2c_task.enable = 0;
    59d2:	10 92 76 17 	sts	0x1776, r1	; 0x801776 <i2c_task>
		i2c_task.done = 1;
    59d6:	81 e0       	ldi	r24, 0x01	; 1
    59d8:	80 93 78 17 	sts	0x1778, r24	; 0x801778 <i2c_task+0x2>

		// I2C Nothing to do
        i2c.done = 1;
    59dc:	80 93 48 1a 	sts	0x1A48, r24	; 0x801a48 <i2c+0x2>
        i2c.enable = 0;
    59e0:	10 92 47 1a 	sts	0x1A47, r1	; 0x801a47 <i2c+0x1>

        // TWI Enable
        // TWI Disable Enable
        // TWI Interrupt Clear
        TWCR = _BV(TWEN) | _BV(TWINT);
    59e4:	84 e8       	ldi	r24, 0x84	; 132
    59e6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
        // Reset status
        TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    59ea:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    59ee:	8c 7f       	andi	r24, 0xFC	; 252
    59f0:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
        // Disable Slave Mode
        TWAR = 0;
    59f4:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
	}
	// Disable Slave Mode

	SREG = sreg;
    59f8:	ff be       	out	0x3f, r15	; 63

}
    59fa:	cd b7       	in	r28, 0x3d	; 61
    59fc:	de b7       	in	r29, 0x3e	; 62
    59fe:	e6 e0       	ldi	r30, 0x06	; 6
    5a00:	0c 94 e3 e6 	jmp	0x1cdc6	; 0x1cdc6 <__epilogue_restores__+0x18>

00005a04 <i2c_fn>:
/// @param[in] *buf: pointer to buffer for send or receive
/// @param[in] len: size of buffer to read or write
/// @return  1 = OK, 0 = ERROR
uint8_t i2c_fn(uint8_t address, uint8_t mode, uint8_t *buf, uint8_t len)
{
	uint8_t sreg = SREG;
    5a04:	9f b7       	in	r25, 0x3f	; 63
	
    cli();
    5a06:	f8 94       	cli

	// sign task only
	i2c_callback = NULL;
    5a08:	10 92 7b 17 	sts	0x177B, r1	; 0x80177b <i2c_callback+0x1>
    5a0c:	10 92 7a 17 	sts	0x177A, r1	; 0x80177a <i2c_callback>

	i2c.enable = 1; // Enabled
    5a10:	31 e0       	ldi	r19, 0x01	; 1
    5a12:	30 93 47 1a 	sts	0x1A47, r19	; 0x801a47 <i2c+0x1>
	i2c.done = 0;
    5a16:	10 92 48 1a 	sts	0x1A48, r1	; 0x801a48 <i2c+0x2>
    i2c.address = (address << 1) | (mode & 1);
    5a1a:	88 0f       	add	r24, r24
    5a1c:	61 70       	andi	r22, 0x01	; 1
    5a1e:	68 2b       	or	r22, r24
    5a20:	60 93 46 1a 	sts	0x1A46, r22	; 0x801a46 <i2c>
	i2c.flags = 0;
    5a24:	10 92 49 1a 	sts	0x1A49, r1	; 0x801a49 <i2c+0x3>
    i2c.len = len;
    5a28:	20 93 4c 1a 	sts	0x1A4C, r18	; 0x801a4c <i2c+0x6>
    i2c.ind = 0;
    5a2c:	10 92 4d 1a 	sts	0x1A4D, r1	; 0x801a4d <i2c+0x7>
    i2c.buf = buf;
    5a30:	50 93 4f 1a 	sts	0x1A4F, r21	; 0x801a4f <i2c+0x9>
    5a34:	40 93 4e 1a 	sts	0x1A4E, r20	; 0x801a4e <i2c+0x8>

	// Reset Status
	TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    5a38:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5a3c:	8c 7f       	andi	r24, 0xFC	; 252
    5a3e:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>

	// Disable Slave Mode
	TWAR = 0;
    5a42:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>

	SREG = sreg;
    5a46:	9f bf       	out	0x3f, r25	; 63

	i2c_send_start();
    5a48:	6d df       	rcall	.-294    	; 0x5924 <i2c_send_start>
	{
		printf("timeout: %d\r",(int)i2c.timeout);
	}
	printf("\n");
#else
	while(! i2c_done() )
    5a4a:	48 df       	rcall	.-368    	; 0x58dc <i2c_done>
    5a4c:	88 23       	and	r24, r24
    5a4e:	e9 f3       	breq	.-6      	; 0x5a4a <i2c_fn+0x46>
    5a50:	81 e0       	ldi	r24, 0x01	; 1
		;
#endif
	return( i2c.flags ? 0 : 1);
    5a52:	90 91 49 1a 	lds	r25, 0x1A49	; 0x801a49 <i2c+0x3>
    5a56:	91 11       	cpse	r25, r1
    5a58:	80 e0       	ldi	r24, 0x00	; 0
    5a5a:	08 95       	ret

00005a5c <i2c_send_stop>:
}
    5a5c:	e6 e4       	ldi	r30, 0x46	; 70
///
/// @return  void
void i2c_send_stop()
{
    // All transactions are done
    i2c.done = 1;
    5a5e:	fa e1       	ldi	r31, 0x1A	; 26
    5a60:	81 e0       	ldi	r24, 0x01	; 1
    5a62:	82 83       	std	Z+2, r24	; 0x02
    i2c.enable = 0;
    5a64:	11 82       	std	Z+1, r1	; 0x01
    // We are DONE
    // TWI Enable
    // TWI Interrupt Disable
    // TWI Interrupt Clear
    // TWI SEND STOP
    TWCR = _BV(TWEN) | _BV(TWINT) | _BV(TWSTO);
    5a66:	84 e9       	ldi	r24, 0x94	; 148
    5a68:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	delayus(10);
    5a6c:	6a e0       	ldi	r22, 0x0A	; 10
    5a6e:	70 e0       	ldi	r23, 0x00	; 0
    5a70:	80 e0       	ldi	r24, 0x00	; 0
    5a72:	90 e0       	ldi	r25, 0x00	; 0
    5a74:	dd ca       	rjmp	.-2630   	; 0x5030 <delayus>
    5a76:	08 95       	ret

00005a78 <i2c_task_next_op>:

///@brief I2C task ISR callback function
///
/// @return  void
int8_t i2c_task_next_op()
{
    5a78:	cf 93       	push	r28
    5a7a:	df 93       	push	r29
	i2c_op_t *o;

	// NOTE: we are in an ISR do not disable other interrupts

	if(i2c_task.enable)
    5a7c:	80 91 76 17 	lds	r24, 0x1776	; 0x801776 <i2c_task>
    5a80:	88 23       	and	r24, r24
    5a82:	09 f4       	brne	.+2      	; 0x5a86 <i2c_task_next_op+0xe>
    5a84:	46 c0       	rjmp	.+140    	; 0x5b12 <i2c_task_next_op+0x9a>
	{
		// Save state of LAST operation
		if(i2c_check_op(i2c_task.ind) )
    5a86:	80 91 77 17 	lds	r24, 0x1777	; 0x801777 <i2c_task+0x1>
    5a8a:	35 de       	rcall	.-918    	; 0x56f6 <i2c_check_op>
    5a8c:	88 23       	and	r24, r24
    5a8e:	b1 f0       	breq	.+44     	; 0x5abc <i2c_task_next_op+0x44>
		{
			o = i2c_task_op[i2c_task.ind];
    5a90:	e0 91 77 17 	lds	r30, 0x1777	; 0x801777 <i2c_task+0x1>
    5a94:	ee 0f       	add	r30, r30
    5a96:	ff 0b       	sbc	r31, r31
    5a98:	ea 5a       	subi	r30, 0xAA	; 170
    5a9a:	f8 4e       	sbci	r31, 0xE8	; 232
    5a9c:	c0 81       	ld	r28, Z
    5a9e:	d1 81       	ldd	r29, Z+1	; 0x01
			// Save state in last opperation
			*o = i2c;
    5aa0:	8a e0       	ldi	r24, 0x0A	; 10
    5aa2:	e6 e4       	ldi	r30, 0x46	; 70
    5aa4:	fa e1       	ldi	r31, 0x1A	; 26
    5aa6:	de 01       	movw	r26, r28
    5aa8:	01 90       	ld	r0, Z+
    5aaa:	0d 92       	st	X+, r0
    5aac:	8a 95       	dec	r24
    5aae:	e1 f7       	brne	.-8      	; 0x5aa8 <i2c_task_next_op+0x30>
			if(o->flags)
    5ab0:	8b 81       	ldd	r24, Y+3	; 0x03
    5ab2:	88 23       	and	r24, r24
    5ab4:	19 f0       	breq	.+6      	; 0x5abc <i2c_task_next_op+0x44>
				i2c_task.error = 1;
    5ab6:	81 e0       	ldi	r24, 0x01	; 1
    5ab8:	80 93 79 17 	sts	0x1779, r24	; 0x801779 <i2c_task+0x3>
		}

		if(i2c_check_op(i2c_task.ind+1) )
    5abc:	80 91 77 17 	lds	r24, 0x1777	; 0x801777 <i2c_task+0x1>
    5ac0:	8f 5f       	subi	r24, 0xFF	; 255
    5ac2:	19 de       	rcall	.-974    	; 0x56f6 <i2c_check_op>
    5ac4:	88 23       	and	r24, r24
    5ac6:	29 f1       	breq	.+74     	; 0x5b12 <i2c_task_next_op+0x9a>
		{
			i2c_task.ind++;
    5ac8:	e0 91 77 17 	lds	r30, 0x1777	; 0x801777 <i2c_task+0x1>
    5acc:	ef 5f       	subi	r30, 0xFF	; 255
    5ace:	e0 93 77 17 	sts	0x1777, r30	; 0x801777 <i2c_task+0x1>

			o = i2c_task_op[i2c_task.ind];
    5ad2:	ee 0f       	add	r30, r30
    5ad4:	ff 0b       	sbc	r31, r31
    5ad6:	ea 5a       	subi	r30, 0xAA	; 170
    5ad8:	f8 4e       	sbci	r31, 0xE8	; 232
    5ada:	01 90       	ld	r0, Z+
    5adc:	f0 81       	ld	r31, Z
    5ade:	e0 2d       	mov	r30, r0

			if( o->enable == 1 || o->done == 0)
    5ae0:	81 81       	ldd	r24, Z+1	; 0x01
    5ae2:	81 30       	cpi	r24, 0x01	; 1
    5ae4:	19 f0       	breq	.+6      	; 0x5aec <i2c_task_next_op+0x74>
    5ae6:	82 81       	ldd	r24, Z+2	; 0x02
    5ae8:	81 11       	cpse	r24, r1
    5aea:	13 c0       	rjmp	.+38     	; 0x5b12 <i2c_task_next_op+0x9a>
			{
				o->timeout = I2C_TIMEOUT;
    5aec:	8a e0       	ldi	r24, 0x0A	; 10
    5aee:	90 e0       	ldi	r25, 0x00	; 0
    5af0:	95 83       	std	Z+5, r25	; 0x05
    5af2:	84 83       	std	Z+4, r24	; 0x04
				o->flags = 0;
    5af4:	13 82       	std	Z+3, r1	; 0x03
				o->ind = 0;
    5af6:	17 82       	std	Z+7, r1	; 0x07
				o->enable = 1;
    5af8:	81 e0       	ldi	r24, 0x01	; 1
    5afa:	81 83       	std	Z+1, r24	; 0x01
				o->done = 0;
    5afc:	12 82       	std	Z+2, r1	; 0x02

				i2c = *o;
    5afe:	8a e0       	ldi	r24, 0x0A	; 10
    5b00:	a6 e4       	ldi	r26, 0x46	; 70
    5b02:	ba e1       	ldi	r27, 0x1A	; 26
    5b04:	01 90       	ld	r0, Z+
    5b06:	0d 92       	st	X+, r0
    5b08:	8a 95       	dec	r24

				i2c_send_start();
    5b0a:	e1 f7       	brne	.-8      	; 0x5b04 <i2c_task_next_op+0x8c>
    5b0c:	0b df       	rcall	.-490    	; 0x5924 <i2c_send_start>

				return(1);
    5b0e:	81 e0       	ldi	r24, 0x01	; 1
    5b10:	0f c0       	rjmp	.+30     	; 0x5b30 <i2c_task_next_op+0xb8>
			}
		}
	}
	// program error
	// Disable TASK
	i2c_task.enable = 0;
    5b12:	10 92 76 17 	sts	0x1776, r1	; 0x801776 <i2c_task>
	i2c_task.done = 1;
    5b16:	81 e0       	ldi	r24, 0x01	; 1
    5b18:	80 93 78 17 	sts	0x1778, r24	; 0x801778 <i2c_task+0x2>

	// I2C disable
	i2c.done = 1;
    5b1c:	80 93 48 1a 	sts	0x1A48, r24	; 0x801a48 <i2c+0x2>
	i2c.enable = 0;
    5b20:	10 92 47 1a 	sts	0x1A47, r1	; 0x801a47 <i2c+0x1>
	i2c.flags = 0;
    5b24:	10 92 49 1a 	sts	0x1A49, r1	; 0x801a49 <i2c+0x3>
	i2c.ind = 0;
    5b28:	10 92 4d 1a 	sts	0x1A4D, r1	; 0x801a4d <i2c+0x7>

	i2c_send_stop();
    5b2c:	97 df       	rcall	.-210    	; 0x5a5c <i2c_send_stop>

	return(0);
    5b2e:	80 e0       	ldi	r24, 0x00	; 0
}
    5b30:	df 91       	pop	r29
    5b32:	cf 91       	pop	r28
    5b34:	08 95       	ret

00005b36 <i2c_next>:
{

	// IF we have an i2c_callback() function then
	// it must save status and reset i2c structure for next operation

	if(i2c_callback)
    5b36:	e0 91 7a 17 	lds	r30, 0x177A	; 0x80177a <i2c_callback>
    5b3a:	f0 91 7b 17 	lds	r31, 0x177B	; 0x80177b <i2c_callback+0x1>
    5b3e:	30 97       	sbiw	r30, 0x00	; 0
    5b40:	11 f0       	breq	.+4      	; 0x5b46 <i2c_next+0x10>
	    i2c_callback();
    5b42:	09 95       	icall
    5b44:	08 95       	ret
	else
		i2c_send_stop();
    5b46:	8a cf       	rjmp	.-236    	; 0x5a5c <i2c_send_stop>
    5b48:	08 95       	ret

00005b4a <__vector_26>:

///@brief I2C ISR for send/receive
///
/// @return  void
ISR(TWI_vect)
{
    5b4a:	1f 92       	push	r1
    5b4c:	0f 92       	push	r0
    5b4e:	0f b6       	in	r0, 0x3f	; 63
    5b50:	0f 92       	push	r0
    5b52:	11 24       	eor	r1, r1
    5b54:	0b b6       	in	r0, 0x3b	; 59
    5b56:	0f 92       	push	r0
    5b58:	2f 93       	push	r18
    5b5a:	3f 93       	push	r19
    5b5c:	4f 93       	push	r20
    5b5e:	5f 93       	push	r21
    5b60:	6f 93       	push	r22
    5b62:	7f 93       	push	r23
    5b64:	8f 93       	push	r24
    5b66:	9f 93       	push	r25
    5b68:	af 93       	push	r26
    5b6a:	bf 93       	push	r27
    5b6c:	ef 93       	push	r30
    5b6e:	ff 93       	push	r31
	// FYI: reading TWSR clears the status
	// twi.h defines TW_STATUS
    // #define TW_STATUS (TWSR & TW_STATUS_MASK)
    uint8_t status = TW_STATUS;	
    5b70:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>

	// Are we Enabled to Receive/Send ?
	// Are we Done ?
	// Program errors - these should not happen
	if(!i2c.enable || i2c.done || !i2c.buf || !i2c.len )
    5b74:	90 91 47 1a 	lds	r25, 0x1A47	; 0x801a47 <i2c+0x1>
    5b78:	99 23       	and	r25, r25
    5b7a:	09 f1       	breq	.+66     	; 0x5bbe <__vector_26+0x74>
    5b7c:	90 91 48 1a 	lds	r25, 0x1A48	; 0x801a48 <i2c+0x2>
    5b80:	91 11       	cpse	r25, r1
    5b82:	1d c0       	rjmp	.+58     	; 0x5bbe <__vector_26+0x74>
    5b84:	20 91 4e 1a 	lds	r18, 0x1A4E	; 0x801a4e <i2c+0x8>
    5b88:	30 91 4f 1a 	lds	r19, 0x1A4F	; 0x801a4f <i2c+0x9>
    5b8c:	21 15       	cp	r18, r1
    5b8e:	31 05       	cpc	r19, r1
    5b90:	b1 f0       	breq	.+44     	; 0x5bbe <__vector_26+0x74>
    5b92:	90 91 4c 1a 	lds	r25, 0x1A4C	; 0x801a4c <i2c+0x6>
    5b96:	99 23       	and	r25, r25
    5b98:	91 f0       	breq	.+36     	; 0x5bbe <__vector_26+0x74>
		i2c_send_stop();
		return;
	}

	// TUMEOUT ? STOP everything
	if(i2c.timeout == 0)
    5b9a:	40 91 4a 1a 	lds	r20, 0x1A4A	; 0x801a4a <i2c+0x4>
    5b9e:	50 91 4b 1a 	lds	r21, 0x1A4B	; 0x801a4b <i2c+0x5>
    5ba2:	45 2b       	or	r20, r21
    5ba4:	71 f4       	brne	.+28     	; 0x5bc2 <__vector_26+0x78>
	{
		i2c.flags |= (I2C_OP_TIMEOUT);
    5ba6:	80 91 49 1a 	lds	r24, 0x1A49	; 0x801a49 <i2c+0x3>
    5baa:	81 60       	ori	r24, 0x01	; 1
    5bac:	80 93 49 1a 	sts	0x1A49, r24	; 0x801a49 <i2c+0x3>
		i2c_task.enable = 0;
    5bb0:	10 92 76 17 	sts	0x1776, r1	; 0x801776 <i2c_task>
		i2c_task.done = 1;
    5bb4:	81 e0       	ldi	r24, 0x01	; 1
    5bb6:	80 93 78 17 	sts	0x1778, r24	; 0x801778 <i2c_task+0x2>
		i2c_task.error = 1;
    5bba:	80 93 79 17 	sts	0x1779, r24	; 0x801779 <i2c_task+0x3>
		i2c_send_stop();
    5bbe:	4e df       	rcall	.-356    	; 0x5a5c <i2c_send_stop>
		return;
    5bc0:	9b c0       	rjmp	.+310    	; 0x5cf8 <__vector_26+0x1ae>
	}

	// Master Receiver mode
	switch (status)
    5bc2:	88 7f       	andi	r24, 0xF8	; 248
    5bc4:	80 33       	cpi	r24, 0x30	; 48
    5bc6:	09 f4       	brne	.+2      	; 0x5bca <__vector_26+0x80>
    5bc8:	83 c0       	rjmp	.+262    	; 0x5cd0 <__vector_26+0x186>
    5bca:	70 f4       	brcc	.+28     	; 0x5be8 <__vector_26+0x9e>
    5bcc:	88 31       	cpi	r24, 0x18	; 24
    5bce:	09 f1       	breq	.+66     	; 0x5c12 <__vector_26+0xc8>
    5bd0:	28 f4       	brcc	.+10     	; 0x5bdc <__vector_26+0x92>
    5bd2:	88 30       	cpi	r24, 0x08	; 8
    5bd4:	c9 f0       	breq	.+50     	; 0x5c08 <__vector_26+0xbe>
    5bd6:	80 31       	cpi	r24, 0x10	; 16
    5bd8:	b9 f0       	breq	.+46     	; 0x5c08 <__vector_26+0xbe>
    5bda:	83 c0       	rjmp	.+262    	; 0x5ce2 <__vector_26+0x198>
    5bdc:	80 32       	cpi	r24, 0x20	; 32
    5bde:	09 f4       	brne	.+2      	; 0x5be2 <__vector_26+0x98>
    5be0:	65 c0       	rjmp	.+202    	; 0x5cac <__vector_26+0x162>
    5be2:	88 32       	cpi	r24, 0x28	; 40
    5be4:	b1 f0       	breq	.+44     	; 0x5c12 <__vector_26+0xc8>
    5be6:	7d c0       	rjmp	.+250    	; 0x5ce2 <__vector_26+0x198>
    5be8:	88 34       	cpi	r24, 0x48	; 72
    5bea:	09 f4       	brne	.+2      	; 0x5bee <__vector_26+0xa4>
    5bec:	68 c0       	rjmp	.+208    	; 0x5cbe <__vector_26+0x174>
    5bee:	38 f4       	brcc	.+14     	; 0x5bfe <__vector_26+0xb4>
    5bf0:	88 33       	cpi	r24, 0x38	; 56
    5bf2:	09 f4       	brne	.+2      	; 0x5bf6 <__vector_26+0xac>
    5bf4:	57 c0       	rjmp	.+174    	; 0x5ca4 <__vector_26+0x15a>
    5bf6:	80 34       	cpi	r24, 0x40	; 64
    5bf8:	09 f4       	brne	.+2      	; 0x5bfc <__vector_26+0xb2>
    5bfa:	42 c0       	rjmp	.+132    	; 0x5c80 <__vector_26+0x136>
    5bfc:	72 c0       	rjmp	.+228    	; 0x5ce2 <__vector_26+0x198>
    5bfe:	80 35       	cpi	r24, 0x50	; 80
    5c00:	79 f1       	breq	.+94     	; 0x5c60 <__vector_26+0x116>
    5c02:	88 35       	cpi	r24, 0x58	; 88
    5c04:	b9 f0       	breq	.+46     	; 0x5c34 <__vector_26+0xea>
    5c06:	6d c0       	rjmp	.+218    	; 0x5ce2 <__vector_26+0x198>
	{
		case TW_START:		// START has been transmitted
		case TW_REP_START:  // RE-START has been transmitted
			i2c.ind = 0;
    5c08:	10 92 4d 1a 	sts	0x1A4D, r1	; 0x801a4d <i2c+0x7>
			TWDR = i2c.address;
    5c0c:	80 91 46 1a 	lds	r24, 0x1A46	; 0x801a46 <i2c>
    5c10:	0e c0       	rjmp	.+28     	; 0x5c2e <__vector_26+0xe4>
			break;


		case TW_MT_SLA_ACK:	// SLA+W trasnmitted and ACK received
		case TW_MT_DATA_ACK:// Data trasnmitted and ACK received
			if (i2c.ind < i2c.len)
    5c12:	80 91 4d 1a 	lds	r24, 0x1A4D	; 0x801a4d <i2c+0x7>
    5c16:	89 17       	cp	r24, r25
    5c18:	ec f4       	brge	.+58     	; 0x5c54 <__vector_26+0x10a>
			{
				TWDR = i2c.buf[i2c.ind++];
    5c1a:	91 e0       	ldi	r25, 0x01	; 1
    5c1c:	98 0f       	add	r25, r24
    5c1e:	90 93 4d 1a 	sts	0x1A4D, r25	; 0x801a4d <i2c+0x7>
    5c22:	f9 01       	movw	r30, r18
    5c24:	e8 0f       	add	r30, r24
    5c26:	f1 1d       	adc	r31, r1
    5c28:	87 fd       	sbrc	r24, 7
    5c2a:	fa 95       	dec	r31
    5c2c:	80 81       	ld	r24, Z
    5c2e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5c32:	36 c0       	rjmp	.+108    	; 0x5ca0 <__vector_26+0x156>
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
			}
			break;

		case TW_MR_DATA_NACK:	// Data received NACK transmitted
			if(i2c.ind < i2c.len)
    5c34:	80 91 4d 1a 	lds	r24, 0x1A4D	; 0x801a4d <i2c+0x7>
    5c38:	89 17       	cp	r24, r25
    5c3a:	64 f4       	brge	.+24     	; 0x5c54 <__vector_26+0x10a>
				i2c.buf[i2c.ind++] = TWDR;
    5c3c:	91 e0       	ldi	r25, 0x01	; 1
    5c3e:	98 0f       	add	r25, r24
    5c40:	90 93 4d 1a 	sts	0x1A4D, r25	; 0x801a4d <i2c+0x7>
    5c44:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5c48:	f9 01       	movw	r30, r18
    5c4a:	e8 0f       	add	r30, r24
    5c4c:	f1 1d       	adc	r31, r1
    5c4e:	87 fd       	sbrc	r24, 7
    5c50:	fa 95       	dec	r31
    5c52:	90 83       	st	Z, r25
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
			}
			else
			{
				// Done
				i2c.done = 1;
    5c54:	81 e0       	ldi	r24, 0x01	; 1
    5c56:	80 93 48 1a 	sts	0x1A48, r24	; 0x801a48 <i2c+0x2>
				i2c.enable = 0;
    5c5a:	10 92 47 1a 	sts	0x1A47, r1	; 0x801a47 <i2c+0x1>
    5c5e:	4b c0       	rjmp	.+150    	; 0x5cf6 <__vector_26+0x1ac>
				i2c_next();
			}
			break;

		case TW_MR_DATA_ACK:	// Data received ACK transmitted
			if(i2c.ind < i2c.len)
    5c60:	80 91 4d 1a 	lds	r24, 0x1A4D	; 0x801a4d <i2c+0x7>
    5c64:	89 17       	cp	r24, r25
    5c66:	64 f4       	brge	.+24     	; 0x5c80 <__vector_26+0x136>
				i2c.buf[i2c.ind++] = TWDR;
    5c68:	91 e0       	ldi	r25, 0x01	; 1
    5c6a:	98 0f       	add	r25, r24
    5c6c:	90 93 4d 1a 	sts	0x1A4D, r25	; 0x801a4d <i2c+0x7>
    5c70:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5c74:	f9 01       	movw	r30, r18
    5c76:	e8 0f       	add	r30, r24
    5c78:	f1 1d       	adc	r31, r1
    5c7a:	87 fd       	sbrc	r24, 7
    5c7c:	fa 95       	dec	r31
    5c7e:	90 83       	st	Z, r25
		case TW_MR_SLA_ACK:		// SLA+R transmitted ACK received
			if ((i2c.ind+1) < i2c.len)
    5c80:	80 91 4d 1a 	lds	r24, 0x1A4D	; 0x801a4d <i2c+0x7>
    5c84:	08 2e       	mov	r0, r24
    5c86:	00 0c       	add	r0, r0
    5c88:	99 0b       	sbc	r25, r25
    5c8a:	01 96       	adiw	r24, 0x01	; 1
    5c8c:	20 91 4c 1a 	lds	r18, 0x1A4C	; 0x801a4c <i2c+0x6>
    5c90:	02 2e       	mov	r0, r18
    5c92:	00 0c       	add	r0, r0
    5c94:	33 0b       	sbc	r19, r19
    5c96:	82 17       	cp	r24, r18
    5c98:	93 07       	cpc	r25, r19
    5c9a:	14 f4       	brge	.+4      	; 0x5ca0 <__vector_26+0x156>
			{
				// TWI Enable
				// TWI Interrupt Enable
				// TWI Interrupt Clear
				// SEND ACK after receive
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    5c9c:	85 ec       	ldi	r24, 0xC5	; 197
    5c9e:	03 c0       	rjmp	.+6      	; 0x5ca6 <__vector_26+0x15c>
				// LAST BYTE
				// TWI Enable
				// TWI Interrupt Enable
				// TWI Interrupt Clear
				// SEND NACK after receive
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    5ca0:	85 e8       	ldi	r24, 0x85	; 133
    5ca2:	01 c0       	rjmp	.+2      	; 0x5ca6 <__vector_26+0x15c>
		case TW_ARB_LOST:
			// TWI Enable
			// TWI Interrupt Enable
			// TWI Interrupt Clear
			// TWI SEND RESTART
			TWCR = _BV(TWEN) |  _BV(TWIE) | _BV(TWINT) | _BV(TWSTA);
    5ca4:	85 ea       	ldi	r24, 0xA5	; 165
    5ca6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			break;
    5caa:	26 c0       	rjmp	.+76     	; 0x5cf8 <__vector_26+0x1ae>

// Error cases
		case TW_MT_SLA_NACK:	// SLA+W transmitted NACK received
			i2c.done = 1;
    5cac:	81 e0       	ldi	r24, 0x01	; 1
    5cae:	80 93 48 1a 	sts	0x1A48, r24	; 0x801a48 <i2c+0x2>
			i2c.enable = 0;
    5cb2:	10 92 47 1a 	sts	0x1A47, r1	; 0x801a47 <i2c+0x1>
			i2c.flags |= I2C_TW_MT_SLA_NACK;
    5cb6:	80 91 49 1a 	lds	r24, 0x1A49	; 0x801a49 <i2c+0x3>
    5cba:	88 60       	ori	r24, 0x08	; 8
    5cbc:	1a c0       	rjmp	.+52     	; 0x5cf2 <__vector_26+0x1a8>
			// ERROR
			i2c_next();
			break;

		case TW_MR_SLA_NACK:	// SLA+R transmitted NACK received
			i2c.done = 1;
    5cbe:	81 e0       	ldi	r24, 0x01	; 1
    5cc0:	80 93 48 1a 	sts	0x1A48, r24	; 0x801a48 <i2c+0x2>
			i2c.enable = 0;
    5cc4:	10 92 47 1a 	sts	0x1A47, r1	; 0x801a47 <i2c+0x1>
			i2c.flags |= I2C_TW_MR_SLA_NACK;
    5cc8:	80 91 49 1a 	lds	r24, 0x1A49	; 0x801a49 <i2c+0x3>
    5ccc:	80 61       	ori	r24, 0x10	; 16
    5cce:	11 c0       	rjmp	.+34     	; 0x5cf2 <__vector_26+0x1a8>
			// ERROR
			i2c_next();
			break;

		case TW_MT_DATA_NACK:	// Data Transmitted NACK received
			i2c.done = 1;
    5cd0:	81 e0       	ldi	r24, 0x01	; 1
    5cd2:	80 93 48 1a 	sts	0x1A48, r24	; 0x801a48 <i2c+0x2>
			i2c.enable = 0;
    5cd6:	10 92 47 1a 	sts	0x1A47, r1	; 0x801a47 <i2c+0x1>
			i2c.flags |= I2C_TW_MT_DATA_NACK;
    5cda:	80 91 49 1a 	lds	r24, 0x1A49	; 0x801a49 <i2c+0x3>
    5cde:	80 62       	ori	r24, 0x20	; 32
    5ce0:	08 c0       	rjmp	.+16     	; 0x5cf2 <__vector_26+0x1a8>
			// ERROR
			i2c_next();
			break;

		default:				// Error
			i2c.done = 1;
    5ce2:	81 e0       	ldi	r24, 0x01	; 1
    5ce4:	80 93 48 1a 	sts	0x1A48, r24	; 0x801a48 <i2c+0x2>
			i2c.enable = 0;
    5ce8:	10 92 47 1a 	sts	0x1A47, r1	; 0x801a47 <i2c+0x1>
			// ERROR
			i2c.flags |= I2C_BUS_ERROR;
    5cec:	80 91 49 1a 	lds	r24, 0x1A49	; 0x801a49 <i2c+0x3>
    5cf0:	80 64       	ori	r24, 0x40	; 64
    5cf2:	80 93 49 1a 	sts	0x1A49, r24	; 0x801a49 <i2c+0x3>
			i2c_next();
    5cf6:	1f df       	rcall	.-450    	; 0x5b36 <i2c_next>
			break;
	}
}
    5cf8:	ff 91       	pop	r31
    5cfa:	ef 91       	pop	r30
    5cfc:	bf 91       	pop	r27
    5cfe:	af 91       	pop	r26
    5d00:	9f 91       	pop	r25
    5d02:	8f 91       	pop	r24
    5d04:	7f 91       	pop	r23
    5d06:	6f 91       	pop	r22
    5d08:	5f 91       	pop	r21
    5d0a:	4f 91       	pop	r20
    5d0c:	3f 91       	pop	r19
    5d0e:	2f 91       	pop	r18
    5d10:	0f 90       	pop	r0
    5d12:	0b be       	out	0x3b, r0	; 59
    5d14:	0f 90       	pop	r0
    5d16:	0f be       	out	0x3f, r0	; 63
    5d18:	0f 90       	pop	r0
    5d1a:	1f 90       	pop	r1
    5d1c:	18 95       	reti

00005d1e <i2c_print_error>:
/// @brief Display Errors for i2c_task_op[index]
///
/// @param[in] index: index of i2c_task_op[] array
/// @return  void
void i2c_print_error(i2c_op_t *o)
{
    5d1e:	cf 93       	push	r28
    5d20:	00 d0       	rcall	.+0      	; 0x5d22 <i2c_print_error+0x4>
    5d22:	00 d0       	rcall	.+0      	; 0x5d24 <i2c_print_error+0x6>
    5d24:	1f 92       	push	r1
    int flags = o->flags;
    5d26:	fc 01       	movw	r30, r24
    5d28:	c3 81       	ldd	r28, Z+3	; 0x03

	if(flags)
    5d2a:	cc 23       	and	r28, r28
    5d2c:	09 f4       	brne	.+2      	; 0x5d30 <i2c_print_error+0x12>
    5d2e:	67 c0       	rjmp	.+206    	; 0x5dfe <i2c_print_error+0xe0>
	{
		printf("  %s\n", (i2c.done ? "DONE" : "ACTIVE") );
    5d30:	80 91 48 1a 	lds	r24, 0x1A48	; 0x801a48 <i2c+0x2>
    5d34:	81 11       	cpse	r24, r1
    5d36:	03 c0       	rjmp	.+6      	; 0x5d3e <i2c_print_error+0x20>
    5d38:	88 e2       	ldi	r24, 0x28	; 40
    5d3a:	93 e0       	ldi	r25, 0x03	; 3
    5d3c:	02 c0       	rjmp	.+4      	; 0x5d42 <i2c_print_error+0x24>
    5d3e:	83 e2       	ldi	r24, 0x23	; 35
    5d40:	93 e0       	ldi	r25, 0x03	; 3
    5d42:	ed b7       	in	r30, 0x3d	; 61
    5d44:	fe b7       	in	r31, 0x3e	; 62
    5d46:	95 83       	std	Z+5, r25	; 0x05
    5d48:	84 83       	std	Z+4, r24	; 0x04
    5d4a:	81 ec       	ldi	r24, 0xC1	; 193
    5d4c:	93 e0       	ldi	r25, 0x03	; 3
    5d4e:	a0 e0       	ldi	r26, 0x00	; 0
    5d50:	81 83       	std	Z+1, r24	; 0x01
    5d52:	92 83       	std	Z+2, r25	; 0x02
    5d54:	a3 83       	std	Z+3, r26	; 0x03
    5d56:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
		if(flags & I2C_OP_TIMEOUT)
    5d5a:	c0 ff       	sbrs	r28, 0
    5d5c:	0a c0       	rjmp	.+20     	; 0x5d72 <i2c_print_error+0x54>
			printf("  OP_TIMEOUT\n");
    5d5e:	83 eb       	ldi	r24, 0xB3	; 179
    5d60:	93 e0       	ldi	r25, 0x03	; 3
    5d62:	a0 e0       	ldi	r26, 0x00	; 0
    5d64:	ed b7       	in	r30, 0x3d	; 61
    5d66:	fe b7       	in	r31, 0x3e	; 62
    5d68:	81 83       	std	Z+1, r24	; 0x01
    5d6a:	92 83       	std	Z+2, r25	; 0x02
    5d6c:	a3 83       	std	Z+3, r26	; 0x03
    5d6e:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
		if(flags & I2C_OP_LEN)
    5d72:	c1 ff       	sbrs	r28, 1
    5d74:	0a c0       	rjmp	.+20     	; 0x5d8a <i2c_print_error+0x6c>
			printf("  OP_LEN\n");
    5d76:	89 ea       	ldi	r24, 0xA9	; 169
    5d78:	93 e0       	ldi	r25, 0x03	; 3
    5d7a:	a0 e0       	ldi	r26, 0x00	; 0
    5d7c:	ed b7       	in	r30, 0x3d	; 61
    5d7e:	fe b7       	in	r31, 0x3e	; 62
    5d80:	81 83       	std	Z+1, r24	; 0x01
    5d82:	92 83       	std	Z+2, r25	; 0x02
    5d84:	a3 83       	std	Z+3, r26	; 0x03
    5d86:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
		if(flags & I2C_OP_ERROR)
    5d8a:	c2 ff       	sbrs	r28, 2
    5d8c:	0a c0       	rjmp	.+20     	; 0x5da2 <i2c_print_error+0x84>
			printf("  OP_ERROR\n");
    5d8e:	8d e9       	ldi	r24, 0x9D	; 157
    5d90:	93 e0       	ldi	r25, 0x03	; 3
    5d92:	a0 e0       	ldi	r26, 0x00	; 0
    5d94:	ed b7       	in	r30, 0x3d	; 61
    5d96:	fe b7       	in	r31, 0x3e	; 62
    5d98:	81 83       	std	Z+1, r24	; 0x01
    5d9a:	92 83       	std	Z+2, r25	; 0x02
    5d9c:	a3 83       	std	Z+3, r26	; 0x03
    5d9e:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
		if(flags & I2C_TW_MR_SLA_NACK)
    5da2:	c4 ff       	sbrs	r28, 4
    5da4:	0a c0       	rjmp	.+20     	; 0x5dba <i2c_print_error+0x9c>
			printf("  TW_MR_SLA_NACK\n");
    5da6:	8b e8       	ldi	r24, 0x8B	; 139
    5da8:	93 e0       	ldi	r25, 0x03	; 3
    5daa:	a0 e0       	ldi	r26, 0x00	; 0
    5dac:	ed b7       	in	r30, 0x3d	; 61
    5dae:	fe b7       	in	r31, 0x3e	; 62
    5db0:	81 83       	std	Z+1, r24	; 0x01
    5db2:	92 83       	std	Z+2, r25	; 0x02
    5db4:	a3 83       	std	Z+3, r26	; 0x03
    5db6:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
		if(flags & I2C_TW_MT_SLA_NACK)
    5dba:	c3 ff       	sbrs	r28, 3
    5dbc:	0a c0       	rjmp	.+20     	; 0x5dd2 <i2c_print_error+0xb4>
			printf("  TW_MT_SLA_NACK\n");
    5dbe:	89 e7       	ldi	r24, 0x79	; 121
    5dc0:	93 e0       	ldi	r25, 0x03	; 3
    5dc2:	a0 e0       	ldi	r26, 0x00	; 0
    5dc4:	ed b7       	in	r30, 0x3d	; 61
    5dc6:	fe b7       	in	r31, 0x3e	; 62
    5dc8:	81 83       	std	Z+1, r24	; 0x01
    5dca:	92 83       	std	Z+2, r25	; 0x02
    5dcc:	a3 83       	std	Z+3, r26	; 0x03
    5dce:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
		if(flags & I2C_TW_MT_DATA_NACK)
    5dd2:	c5 ff       	sbrs	r28, 5
    5dd4:	0a c0       	rjmp	.+20     	; 0x5dea <i2c_print_error+0xcc>
			printf("  TW_MT_DATA_NACK\n");
    5dd6:	86 e6       	ldi	r24, 0x66	; 102
    5dd8:	93 e0       	ldi	r25, 0x03	; 3
    5dda:	a0 e0       	ldi	r26, 0x00	; 0
    5ddc:	ed b7       	in	r30, 0x3d	; 61
    5dde:	fe b7       	in	r31, 0x3e	; 62
    5de0:	81 83       	std	Z+1, r24	; 0x01
    5de2:	92 83       	std	Z+2, r25	; 0x02
    5de4:	a3 83       	std	Z+3, r26	; 0x03
    5de6:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
		printf("\n");
    5dea:	84 e6       	ldi	r24, 0x64	; 100
    5dec:	93 e0       	ldi	r25, 0x03	; 3
    5dee:	a0 e0       	ldi	r26, 0x00	; 0
    5df0:	ed b7       	in	r30, 0x3d	; 61
    5df2:	fe b7       	in	r31, 0x3e	; 62
    5df4:	81 83       	std	Z+1, r24	; 0x01
    5df6:	92 83       	std	Z+2, r25	; 0x02
    5df8:	a3 83       	std	Z+3, r26	; 0x03
    5dfa:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
	}
}
    5dfe:	0f 90       	pop	r0
    5e00:	0f 90       	pop	r0
    5e02:	0f 90       	pop	r0
    5e04:	0f 90       	pop	r0
    5e06:	0f 90       	pop	r0
    5e08:	cf 91       	pop	r28
    5e0a:	08 95       	ret

00005e0c <i2c_display_task_errors>:

///@brief Display any task errors
void i2c_display_task_errors()
{
    5e0c:	6f 92       	push	r6
    5e0e:	7f 92       	push	r7
    5e10:	8f 92       	push	r8
    5e12:	af 92       	push	r10
    5e14:	bf 92       	push	r11
    5e16:	cf 92       	push	r12
    5e18:	df 92       	push	r13
    5e1a:	ef 92       	push	r14
    5e1c:	0f 93       	push	r16
    5e1e:	1f 93       	push	r17
    5e20:	cf 93       	push	r28
    5e22:	df 93       	push	r29
    5e24:	00 d0       	rcall	.+0      	; 0x5e26 <i2c_display_task_errors+0x1a>
    5e26:	00 d0       	rcall	.+0      	; 0x5e28 <i2c_display_task_errors+0x1c>
    5e28:	1f 92       	push	r1
	int8_t i;
	printf("i2c_task.done: %d\n", (int) i2c_task.done);
    5e2a:	80 91 78 17 	lds	r24, 0x1778	; 0x801778 <i2c_task+0x2>
    5e2e:	90 e0       	ldi	r25, 0x00	; 0
    5e30:	ed b7       	in	r30, 0x3d	; 61
    5e32:	fe b7       	in	r31, 0x3e	; 62
    5e34:	95 83       	std	Z+5, r25	; 0x05
    5e36:	84 83       	std	Z+4, r24	; 0x04
    5e38:	81 e5       	ldi	r24, 0x51	; 81
    5e3a:	93 e0       	ldi	r25, 0x03	; 3
    5e3c:	a0 e0       	ldi	r26, 0x00	; 0
    5e3e:	81 83       	std	Z+1, r24	; 0x01
    5e40:	92 83       	std	Z+2, r25	; 0x02
    5e42:	a3 83       	std	Z+3, r26	; 0x03
    5e44:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
	printf("i2c_task.error: %d\n", (int) i2c_task.error);
    5e48:	80 91 79 17 	lds	r24, 0x1779	; 0x801779 <i2c_task+0x3>
    5e4c:	90 e0       	ldi	r25, 0x00	; 0
    5e4e:	ed b7       	in	r30, 0x3d	; 61
    5e50:	fe b7       	in	r31, 0x3e	; 62
    5e52:	95 83       	std	Z+5, r25	; 0x05
    5e54:	84 83       	std	Z+4, r24	; 0x04
    5e56:	8d e3       	ldi	r24, 0x3D	; 61
    5e58:	93 e0       	ldi	r25, 0x03	; 3
    5e5a:	a0 e0       	ldi	r26, 0x00	; 0
    5e5c:	81 83       	std	Z+1, r24	; 0x01
    5e5e:	92 83       	std	Z+2, r25	; 0x02
    5e60:	a3 83       	std	Z+3, r26	; 0x03
    5e62:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    5e66:	c6 e5       	ldi	r28, 0x56	; 86
    5e68:	d7 e1       	ldi	r29, 0x17	; 23
	for(i=0;i2c_task_op[i] && i < I2C_OPS;++i)
    5e6a:	00 e0       	ldi	r16, 0x00	; 0
    5e6c:	10 e0       	ldi	r17, 0x00	; 0
	{
		printf("task: %d\n", (int) i);
    5e6e:	83 e3       	ldi	r24, 0x33	; 51
    5e70:	93 e0       	ldi	r25, 0x03	; 3
    5e72:	6c 01       	movw	r12, r24
    5e74:	e1 2c       	mov	r14, r1
		i2c_print_error(i2c_task_op[i]);
		printf("\n");
    5e76:	81 e3       	ldi	r24, 0x31	; 49
    5e78:	93 e0       	ldi	r25, 0x03	; 3
    5e7a:	3c 01       	movw	r6, r24
    5e7c:	81 2c       	mov	r8, r1
void i2c_display_task_errors()
{
	int8_t i;
	printf("i2c_task.done: %d\n", (int) i2c_task.done);
	printf("i2c_task.error: %d\n", (int) i2c_task.error);
	for(i=0;i2c_task_op[i] && i < I2C_OPS;++i)
    5e7e:	30 2f       	mov	r19, r16
    5e80:	21 2f       	mov	r18, r17
    5e82:	5e 01       	movw	r10, r28
    5e84:	0f 5f       	subi	r16, 0xFF	; 255
    5e86:	1f 4f       	sbci	r17, 0xFF	; 255
    5e88:	88 81       	ld	r24, Y
    5e8a:	99 81       	ldd	r25, Y+1	; 0x01
    5e8c:	89 2b       	or	r24, r25
    5e8e:	b1 f0       	breq	.+44     	; 0x5ebc <i2c_display_task_errors+0xb0>
	{
		printf("task: %d\n", (int) i);
    5e90:	ed b7       	in	r30, 0x3d	; 61
    5e92:	fe b7       	in	r31, 0x3e	; 62
    5e94:	34 83       	std	Z+4, r19	; 0x04
    5e96:	25 83       	std	Z+5, r18	; 0x05
    5e98:	c1 82       	std	Z+1, r12	; 0x01
    5e9a:	d2 82       	std	Z+2, r13	; 0x02
    5e9c:	e3 82       	std	Z+3, r14	; 0x03
    5e9e:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    5ea2:	22 96       	adiw	r28, 0x02	; 2
		i2c_print_error(i2c_task_op[i]);
    5ea4:	f5 01       	movw	r30, r10
    5ea6:	80 81       	ld	r24, Z
    5ea8:	91 81       	ldd	r25, Z+1	; 0x01
    5eaa:	39 df       	rcall	.-398    	; 0x5d1e <i2c_print_error>
		printf("\n");
    5eac:	ed b7       	in	r30, 0x3d	; 61
    5eae:	fe b7       	in	r31, 0x3e	; 62
    5eb0:	61 82       	std	Z+1, r6	; 0x01
    5eb2:	72 82       	std	Z+2, r7	; 0x02
    5eb4:	83 82       	std	Z+3, r8	; 0x03
    5eb6:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    5eba:	e1 cf       	rjmp	.-62     	; 0x5e7e <i2c_display_task_errors+0x72>
	}
}
    5ebc:	0f 90       	pop	r0
    5ebe:	0f 90       	pop	r0
    5ec0:	0f 90       	pop	r0
    5ec2:	0f 90       	pop	r0
    5ec4:	0f 90       	pop	r0
    5ec6:	df 91       	pop	r29
    5ec8:	cf 91       	pop	r28
    5eca:	1f 91       	pop	r17
    5ecc:	0f 91       	pop	r16
    5ece:	ef 90       	pop	r14
    5ed0:	df 90       	pop	r13
    5ed2:	cf 90       	pop	r12
    5ed4:	bf 90       	pop	r11
    5ed6:	af 90       	pop	r10
    5ed8:	8f 90       	pop	r8
    5eda:	7f 90       	pop	r7
    5edc:	6f 90       	pop	r6
    5ede:	08 95       	ret

00005ee0 <BINtoBCD>:
/// @return 0 if not running.
/// @return -1 ERROR
int8_t rtc_run_test()
{
	return ( rtc_run(-1) );
}
    5ee0:	6a e0       	ldi	r22, 0x0A	; 10
    5ee2:	0e 94 1b e6 	call	0x1cc36	; 0x1cc36 <__udivmodqi4>
    5ee6:	82 95       	swap	r24
    5ee8:	80 7f       	andi	r24, 0xF0	; 240
    5eea:	89 2b       	or	r24, r25
    5eec:	08 95       	ret

00005eee <BCDtoBIN>:
    5eee:	98 2f       	mov	r25, r24
    5ef0:	92 95       	swap	r25
    5ef2:	9f 70       	andi	r25, 0x0F	; 15
    5ef4:	8f 70       	andi	r24, 0x0F	; 15
    5ef6:	2a e0       	ldi	r18, 0x0A	; 10
    5ef8:	92 9f       	mul	r25, r18
    5efa:	80 0d       	add	r24, r0
    5efc:	11 24       	eor	r1, r1
    5efe:	08 95       	ret

00005f00 <i2c_rtc_write>:
    5f00:	ac e0       	ldi	r26, 0x0C	; 12
    5f02:	b0 e0       	ldi	r27, 0x00	; 0
    5f04:	e6 e8       	ldi	r30, 0x86	; 134
    5f06:	ff e2       	ldi	r31, 0x2F	; 47
    5f08:	0c 94 c9 e6 	jmp	0x1cd92	; 0x1cd92 <__prologue_saves__+0x1c>
    5f0c:	9f ef       	ldi	r25, 0xFF	; 255
    5f0e:	92 0f       	add	r25, r18
    5f10:	98 30       	cpi	r25, 0x08	; 8
    5f12:	50 f5       	brcc	.+84     	; 0x5f68 <i2c_rtc_write+0x68>
    5f14:	6c 83       	std	Y+4, r22	; 0x04
    5f16:	90 e0       	ldi	r25, 0x00	; 0
    5f18:	02 2f       	mov	r16, r18
    5f1a:	10 e0       	ldi	r17, 0x00	; 0
    5f1c:	69 2f       	mov	r22, r25
    5f1e:	09 2e       	mov	r0, r25
    5f20:	00 0c       	add	r0, r0
    5f22:	77 0b       	sbc	r23, r23
    5f24:	60 17       	cp	r22, r16
    5f26:	71 07       	cpc	r23, r17
    5f28:	6c f4       	brge	.+26     	; 0x5f44 <i2c_rtc_write+0x44>
    5f2a:	a5 e0       	ldi	r26, 0x05	; 5
    5f2c:	b0 e0       	ldi	r27, 0x00	; 0
    5f2e:	ac 0f       	add	r26, r28
    5f30:	bd 1f       	adc	r27, r29
    5f32:	a6 0f       	add	r26, r22
    5f34:	b7 1f       	adc	r27, r23
    5f36:	64 0f       	add	r22, r20
    5f38:	75 1f       	adc	r23, r21
    5f3a:	fb 01       	movw	r30, r22
    5f3c:	30 81       	ld	r19, Z
    5f3e:	3c 93       	st	X, r19
    5f40:	9f 5f       	subi	r25, 0xFF	; 255
    5f42:	ec cf       	rjmp	.-40     	; 0x5f1c <i2c_rtc_write+0x1c>
    5f44:	2f 5f       	subi	r18, 0xFF	; 255
    5f46:	ae 01       	movw	r20, r28
    5f48:	4c 5f       	subi	r20, 0xFC	; 252
    5f4a:	5f 4f       	sbci	r21, 0xFF	; 255
    5f4c:	60 e0       	ldi	r22, 0x00	; 0
    5f4e:	5a dd       	rcall	.-1356   	; 0x5a04 <i2c_fn>
    5f50:	81 11       	cpse	r24, r1
    5f52:	0c c0       	rjmp	.+24     	; 0x5f6c <i2c_rtc_write+0x6c>
    5f54:	8e ed       	ldi	r24, 0xDE	; 222
    5f56:	94 e0       	ldi	r25, 0x04	; 4
    5f58:	a0 e0       	ldi	r26, 0x00	; 0
    5f5a:	ed b7       	in	r30, 0x3d	; 61
    5f5c:	fe b7       	in	r31, 0x3e	; 62
    5f5e:	81 83       	std	Z+1, r24	; 0x01
    5f60:	92 83       	std	Z+2, r25	; 0x02
    5f62:	a3 83       	std	Z+3, r26	; 0x03
    5f64:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    5f68:	80 e0       	ldi	r24, 0x00	; 0
    5f6a:	01 c0       	rjmp	.+2      	; 0x5f6e <i2c_rtc_write+0x6e>
    5f6c:	81 e0       	ldi	r24, 0x01	; 1
    5f6e:	2c 96       	adiw	r28, 0x0c	; 12
    5f70:	e4 e0       	ldi	r30, 0x04	; 4
    5f72:	0c 94 e5 e6 	jmp	0x1cdca	; 0x1cdca <__epilogue_restores__+0x1c>

00005f76 <i2c_rtc_read>:
    5f76:	a4 e0       	ldi	r26, 0x04	; 4
    5f78:	b0 e0       	ldi	r27, 0x00	; 0
    5f7a:	e1 ec       	ldi	r30, 0xC1	; 193
    5f7c:	ff e2       	ldi	r31, 0x2F	; 47
    5f7e:	0c 94 c7 e6 	jmp	0x1cd8e	; 0x1cd8e <__prologue_saves__+0x18>
    5f82:	6c 83       	std	Y+4, r22	; 0x04
    5f84:	9f ef       	ldi	r25, 0xFF	; 255
    5f86:	92 0f       	add	r25, r18
    5f88:	98 30       	cpi	r25, 0x08	; 8
    5f8a:	f8 f4       	brcc	.+62     	; 0x5fca <i2c_rtc_read+0x54>
    5f8c:	02 2f       	mov	r16, r18
    5f8e:	7a 01       	movw	r14, r20
    5f90:	18 2f       	mov	r17, r24
    5f92:	21 e0       	ldi	r18, 0x01	; 1
    5f94:	ae 01       	movw	r20, r28
    5f96:	4c 5f       	subi	r20, 0xFC	; 252
    5f98:	5f 4f       	sbci	r21, 0xFF	; 255
    5f9a:	60 e0       	ldi	r22, 0x00	; 0
    5f9c:	33 dd       	rcall	.-1434   	; 0x5a04 <i2c_fn>
    5f9e:	81 11       	cpse	r24, r1
    5fa0:	03 c0       	rjmp	.+6      	; 0x5fa8 <i2c_rtc_read+0x32>
    5fa2:	82 ec       	ldi	r24, 0xC2	; 194
    5fa4:	94 e0       	ldi	r25, 0x04	; 4
    5fa6:	09 c0       	rjmp	.+18     	; 0x5fba <i2c_rtc_read+0x44>
    5fa8:	20 2f       	mov	r18, r16
    5faa:	a7 01       	movw	r20, r14
    5fac:	61 e0       	ldi	r22, 0x01	; 1
    5fae:	81 2f       	mov	r24, r17
    5fb0:	29 dd       	rcall	.-1454   	; 0x5a04 <i2c_fn>
    5fb2:	81 11       	cpse	r24, r1
    5fb4:	0c c0       	rjmp	.+24     	; 0x5fce <i2c_rtc_read+0x58>
    5fb6:	89 ea       	ldi	r24, 0xA9	; 169
    5fb8:	94 e0       	ldi	r25, 0x04	; 4
    5fba:	a0 e0       	ldi	r26, 0x00	; 0
    5fbc:	ed b7       	in	r30, 0x3d	; 61
    5fbe:	fe b7       	in	r31, 0x3e	; 62
    5fc0:	81 83       	std	Z+1, r24	; 0x01
    5fc2:	92 83       	std	Z+2, r25	; 0x02
    5fc4:	a3 83       	std	Z+3, r26	; 0x03
    5fc6:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    5fca:	80 e0       	ldi	r24, 0x00	; 0
    5fcc:	01 c0       	rjmp	.+2      	; 0x5fd0 <i2c_rtc_read+0x5a>
    5fce:	81 e0       	ldi	r24, 0x01	; 1
    5fd0:	24 96       	adiw	r28, 0x04	; 4
    5fd2:	e6 e0       	ldi	r30, 0x06	; 6
    5fd4:	0c 94 e3 e6 	jmp	0x1cdc6	; 0x1cdc6 <__epilogue_restores__+0x18>

00005fd8 <i2c_rtc_init>:
    5fd8:	60 ea       	ldi	r22, 0xA0	; 160
    5fda:	76 e8       	ldi	r23, 0x86	; 134
    5fdc:	81 e0       	ldi	r24, 0x01	; 1
    5fde:	90 e0       	ldi	r25, 0x00	; 0
    5fe0:	18 cc       	rjmp	.-2000   	; 0x5812 <i2c_init>
    5fe2:	08 95       	ret

00005fe4 <rtc_write>:
    5fe4:	ab e0       	ldi	r26, 0x0B	; 11
    5fe6:	b0 e0       	ldi	r27, 0x00	; 0
    5fe8:	e8 ef       	ldi	r30, 0xF8	; 248
    5fea:	ff e2       	ldi	r31, 0x2F	; 47
    5fec:	0c 94 c9 e6 	jmp	0x1cd92	; 0x1cd92 <__prologue_saves__+0x1c>
    5ff0:	8c 01       	movw	r16, r24
    5ff2:	fc 01       	movw	r30, r24
    5ff4:	80 81       	ld	r24, Z
    5ff6:	74 df       	rcall	.-280    	; 0x5ee0 <BINtoBCD>
    5ff8:	8f 77       	andi	r24, 0x7F	; 127
    5ffa:	8c 83       	std	Y+4, r24	; 0x04
    5ffc:	f8 01       	movw	r30, r16
    5ffe:	82 81       	ldd	r24, Z+2	; 0x02
    6000:	6f df       	rcall	.-290    	; 0x5ee0 <BINtoBCD>
    6002:	8f 77       	andi	r24, 0x7F	; 127
    6004:	8d 83       	std	Y+5, r24	; 0x05
    6006:	f8 01       	movw	r30, r16
    6008:	84 81       	ldd	r24, Z+4	; 0x04
    600a:	6a df       	rcall	.-300    	; 0x5ee0 <BINtoBCD>
    600c:	8f 73       	andi	r24, 0x3F	; 63
    600e:	8e 83       	std	Y+6, r24	; 0x06
    6010:	f8 01       	movw	r30, r16
    6012:	84 85       	ldd	r24, Z+12	; 0x0c
    6014:	87 70       	andi	r24, 0x07	; 7
    6016:	8f 5f       	subi	r24, 0xFF	; 255
    6018:	8f 83       	std	Y+7, r24	; 0x07
    601a:	86 81       	ldd	r24, Z+6	; 0x06
    601c:	61 df       	rcall	.-318    	; 0x5ee0 <BINtoBCD>
    601e:	8f 73       	andi	r24, 0x3F	; 63
    6020:	88 87       	std	Y+8, r24	; 0x08
    6022:	f8 01       	movw	r30, r16
    6024:	80 85       	ldd	r24, Z+8	; 0x08
    6026:	8f 5f       	subi	r24, 0xFF	; 255
    6028:	5b df       	rcall	.-330    	; 0x5ee0 <BINtoBCD>
    602a:	8f 71       	andi	r24, 0x1F	; 31
    602c:	89 87       	std	Y+9, r24	; 0x09
    602e:	f8 01       	movw	r30, r16
    6030:	82 85       	ldd	r24, Z+10	; 0x0a
    6032:	84 56       	subi	r24, 0x64	; 100
    6034:	55 df       	rcall	.-342    	; 0x5ee0 <BINtoBCD>
    6036:	8a 87       	std	Y+10, r24	; 0x0a
    6038:	83 e9       	ldi	r24, 0x93	; 147
    603a:	8b 87       	std	Y+11, r24	; 0x0b
    603c:	28 e0       	ldi	r18, 0x08	; 8
    603e:	ae 01       	movw	r20, r28
    6040:	4c 5f       	subi	r20, 0xFC	; 252
    6042:	5f 4f       	sbci	r21, 0xFF	; 255
    6044:	60 e0       	ldi	r22, 0x00	; 0
    6046:	88 e6       	ldi	r24, 0x68	; 104
    6048:	5b df       	rcall	.-330    	; 0x5f00 <i2c_rtc_write>
    604a:	81 11       	cpse	r24, r1
    604c:	0c c0       	rjmp	.+24     	; 0x6066 <rtc_write+0x82>
    604e:	88 e9       	ldi	r24, 0x98	; 152
    6050:	94 e0       	ldi	r25, 0x04	; 4
    6052:	a0 e0       	ldi	r26, 0x00	; 0
    6054:	ed b7       	in	r30, 0x3d	; 61
    6056:	fe b7       	in	r31, 0x3e	; 62
    6058:	81 83       	std	Z+1, r24	; 0x01
    605a:	92 83       	std	Z+2, r25	; 0x02
    605c:	a3 83       	std	Z+3, r26	; 0x03
    605e:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    6062:	80 e0       	ldi	r24, 0x00	; 0
    6064:	01 c0       	rjmp	.+2      	; 0x6068 <rtc_write+0x84>
    6066:	81 e0       	ldi	r24, 0x01	; 1
    6068:	2b 96       	adiw	r28, 0x0b	; 11
    606a:	e4 e0       	ldi	r30, 0x04	; 4
    606c:	0c 94 e5 e6 	jmp	0x1cdca	; 0x1cdca <__epilogue_restores__+0x1c>

00006070 <rtc_read>:
    6070:	ab e0       	ldi	r26, 0x0B	; 11
    6072:	b0 e0       	ldi	r27, 0x00	; 0
    6074:	ee e3       	ldi	r30, 0x3E	; 62
    6076:	f0 e3       	ldi	r31, 0x30	; 48
    6078:	0c 94 c9 e6 	jmp	0x1cd92	; 0x1cd92 <__prologue_saves__+0x1c>
    607c:	8c 01       	movw	r16, r24
    607e:	28 e0       	ldi	r18, 0x08	; 8
    6080:	ae 01       	movw	r20, r28
    6082:	4c 5f       	subi	r20, 0xFC	; 252
    6084:	5f 4f       	sbci	r21, 0xFF	; 255
    6086:	60 e0       	ldi	r22, 0x00	; 0
    6088:	88 e6       	ldi	r24, 0x68	; 104
    608a:	75 df       	rcall	.-278    	; 0x5f76 <i2c_rtc_read>
    608c:	81 11       	cpse	r24, r1
    608e:	0c c0       	rjmp	.+24     	; 0x60a8 <rtc_read+0x38>
    6090:	88 e8       	ldi	r24, 0x88	; 136
    6092:	94 e0       	ldi	r25, 0x04	; 4
    6094:	a0 e0       	ldi	r26, 0x00	; 0
    6096:	ed b7       	in	r30, 0x3d	; 61
    6098:	fe b7       	in	r31, 0x3e	; 62
    609a:	81 83       	std	Z+1, r24	; 0x01
    609c:	92 83       	std	Z+2, r25	; 0x02
    609e:	a3 83       	std	Z+3, r26	; 0x03
    60a0:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    60a4:	80 e0       	ldi	r24, 0x00	; 0
    60a6:	33 c0       	rjmp	.+102    	; 0x610e <rtc_read+0x9e>
    60a8:	8c 81       	ldd	r24, Y+4	; 0x04
    60aa:	8f 77       	andi	r24, 0x7F	; 127
    60ac:	20 df       	rcall	.-448    	; 0x5eee <BCDtoBIN>
    60ae:	90 e0       	ldi	r25, 0x00	; 0
    60b0:	f8 01       	movw	r30, r16
    60b2:	91 83       	std	Z+1, r25	; 0x01
    60b4:	80 83       	st	Z, r24
    60b6:	8d 81       	ldd	r24, Y+5	; 0x05
    60b8:	8f 77       	andi	r24, 0x7F	; 127
    60ba:	19 df       	rcall	.-462    	; 0x5eee <BCDtoBIN>
    60bc:	90 e0       	ldi	r25, 0x00	; 0
    60be:	f8 01       	movw	r30, r16
    60c0:	93 83       	std	Z+3, r25	; 0x03
    60c2:	82 83       	std	Z+2, r24	; 0x02
    60c4:	8e 81       	ldd	r24, Y+6	; 0x06
    60c6:	8f 73       	andi	r24, 0x3F	; 63
    60c8:	12 df       	rcall	.-476    	; 0x5eee <BCDtoBIN>
    60ca:	90 e0       	ldi	r25, 0x00	; 0
    60cc:	f8 01       	movw	r30, r16
    60ce:	95 83       	std	Z+5, r25	; 0x05
    60d0:	84 83       	std	Z+4, r24	; 0x04
    60d2:	8f 81       	ldd	r24, Y+7	; 0x07
    60d4:	87 70       	andi	r24, 0x07	; 7
    60d6:	90 e0       	ldi	r25, 0x00	; 0
    60d8:	01 97       	sbiw	r24, 0x01	; 1
    60da:	95 87       	std	Z+13, r25	; 0x0d
    60dc:	84 87       	std	Z+12, r24	; 0x0c
    60de:	88 85       	ldd	r24, Y+8	; 0x08
    60e0:	8f 73       	andi	r24, 0x3F	; 63
    60e2:	05 df       	rcall	.-502    	; 0x5eee <BCDtoBIN>
    60e4:	90 e0       	ldi	r25, 0x00	; 0
    60e6:	f8 01       	movw	r30, r16
    60e8:	97 83       	std	Z+7, r25	; 0x07
    60ea:	86 83       	std	Z+6, r24	; 0x06
    60ec:	89 85       	ldd	r24, Y+9	; 0x09
    60ee:	8f 71       	andi	r24, 0x1F	; 31
    60f0:	fe de       	rcall	.-516    	; 0x5eee <BCDtoBIN>
    60f2:	90 e0       	ldi	r25, 0x00	; 0
    60f4:	01 97       	sbiw	r24, 0x01	; 1
    60f6:	f8 01       	movw	r30, r16
    60f8:	91 87       	std	Z+9, r25	; 0x09
    60fa:	80 87       	std	Z+8, r24	; 0x08
    60fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    60fe:	f7 de       	rcall	.-530    	; 0x5eee <BCDtoBIN>
    6100:	90 e0       	ldi	r25, 0x00	; 0
    6102:	8c 59       	subi	r24, 0x9C	; 156
    6104:	9f 4f       	sbci	r25, 0xFF	; 255
    6106:	f8 01       	movw	r30, r16
    6108:	93 87       	std	Z+11, r25	; 0x0b
    610a:	82 87       	std	Z+10, r24	; 0x0a
    610c:	81 e0       	ldi	r24, 0x01	; 1
    610e:	2b 96       	adiw	r28, 0x0b	; 11
    6110:	e4 e0       	ldi	r30, 0x04	; 4
    6112:	0c 94 e5 e6 	jmp	0x1cdca	; 0x1cdca <__epilogue_restores__+0x1c>

00006116 <rtc_run>:
    6116:	a4 e0       	ldi	r26, 0x04	; 4
    6118:	b0 e0       	ldi	r27, 0x00	; 0
    611a:	e1 e9       	ldi	r30, 0x91	; 145
    611c:	f0 e3       	ldi	r31, 0x30	; 48
    611e:	0c 94 c9 e6 	jmp	0x1cd92	; 0x1cd92 <__prologue_saves__+0x1c>
    6122:	8c 01       	movw	r16, r24
    6124:	21 e0       	ldi	r18, 0x01	; 1
    6126:	ae 01       	movw	r20, r28
    6128:	4c 5f       	subi	r20, 0xFC	; 252
    612a:	5f 4f       	sbci	r21, 0xFF	; 255
    612c:	60 e0       	ldi	r22, 0x00	; 0
    612e:	88 e6       	ldi	r24, 0x68	; 104
    6130:	22 df       	rcall	.-444    	; 0x5f76 <i2c_rtc_read>
    6132:	81 11       	cpse	r24, r1
    6134:	03 c0       	rjmp	.+6      	; 0x613c <rtc_run+0x26>
    6136:	84 e7       	ldi	r24, 0x74	; 116
    6138:	94 e0       	ldi	r25, 0x04	; 4
    613a:	24 c0       	rjmp	.+72     	; 0x6184 <rtc_run+0x6e>
    613c:	8c 81       	ldd	r24, Y+4	; 0x04
    613e:	0f 3f       	cpi	r16, 0xFF	; 255
    6140:	ff ef       	ldi	r31, 0xFF	; 255
    6142:	1f 07       	cpc	r17, r31
    6144:	59 f4       	brne	.+22     	; 0x615c <rtc_run+0x46>
    6146:	08 2e       	mov	r0, r24
    6148:	00 0c       	add	r0, r0
    614a:	99 0b       	sbc	r25, r25
    614c:	80 95       	com	r24
    614e:	90 95       	com	r25
    6150:	89 2f       	mov	r24, r25
    6152:	88 1f       	adc	r24, r24
    6154:	88 27       	eor	r24, r24
    6156:	88 1f       	adc	r24, r24
    6158:	90 e0       	ldi	r25, 0x00	; 0
    615a:	20 c0       	rjmp	.+64     	; 0x619c <rtc_run+0x86>
    615c:	8f 77       	andi	r24, 0x7F	; 127
    615e:	01 15       	cp	r16, r1
    6160:	11 05       	cpc	r17, r1
    6162:	11 f4       	brne	.+4      	; 0x6168 <rtc_run+0x52>
    6164:	90 e8       	ldi	r25, 0x80	; 128
    6166:	01 c0       	rjmp	.+2      	; 0x616a <rtc_run+0x54>
    6168:	90 e0       	ldi	r25, 0x00	; 0
    616a:	89 2b       	or	r24, r25
    616c:	8c 83       	std	Y+4, r24	; 0x04
    616e:	21 e0       	ldi	r18, 0x01	; 1
    6170:	ae 01       	movw	r20, r28
    6172:	4c 5f       	subi	r20, 0xFC	; 252
    6174:	5f 4f       	sbci	r21, 0xFF	; 255
    6176:	60 e0       	ldi	r22, 0x00	; 0
    6178:	88 e6       	ldi	r24, 0x68	; 104
    617a:	c2 de       	rcall	.-636    	; 0x5f00 <i2c_rtc_write>
    617c:	81 11       	cpse	r24, r1
    617e:	0d c0       	rjmp	.+26     	; 0x619a <rtc_run+0x84>
    6180:	8f e5       	ldi	r24, 0x5F	; 95
    6182:	94 e0       	ldi	r25, 0x04	; 4
    6184:	a0 e0       	ldi	r26, 0x00	; 0
    6186:	ed b7       	in	r30, 0x3d	; 61
    6188:	fe b7       	in	r31, 0x3e	; 62
    618a:	81 83       	std	Z+1, r24	; 0x01
    618c:	92 83       	std	Z+2, r25	; 0x02
    618e:	a3 83       	std	Z+3, r26	; 0x03
    6190:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    6194:	8f ef       	ldi	r24, 0xFF	; 255
    6196:	9f ef       	ldi	r25, 0xFF	; 255
    6198:	01 c0       	rjmp	.+2      	; 0x619c <rtc_run+0x86>
    619a:	c8 01       	movw	r24, r16
    619c:	24 96       	adiw	r28, 0x04	; 4
    619e:	e4 e0       	ldi	r30, 0x04	; 4
    61a0:	0c 94 e5 e6 	jmp	0x1cdca	; 0x1cdca <__epilogue_restores__+0x1c>

000061a4 <rtc_init>:
/// @param[in] seconds: POSIX EPOCH time in seconds.
///
/// @return  run state 0 = STOP, 1 = RUN
/// @return -1 = ERROR
uint8_t rtc_init (int force, time_t seconds)
{
    61a4:	a7 e0       	ldi	r26, 0x07	; 7
    61a6:	b0 e0       	ldi	r27, 0x00	; 0
    61a8:	e8 ed       	ldi	r30, 0xD8	; 216
    61aa:	f0 e3       	ldi	r31, 0x30	; 48
    61ac:	0c 94 c9 e6 	jmp	0x1cd92	; 0x1cd92 <__prologue_saves__+0x1c>
    61b0:	8c 01       	movw	r16, r24
    61b2:	4c 83       	std	Y+4, r20	; 0x04
    61b4:	5d 83       	std	Y+5, r21	; 0x05
    61b6:	6e 83       	std	Y+6, r22	; 0x06
    61b8:	7f 83       	std	Y+7, r23	; 0x07
    int8_t    state;

    tm_t *tmp;

    i2c_rtc_init();
    61ba:	0e df       	rcall	.-484    	; 0x5fd8 <i2c_rtc_init>

    if(!force)
    61bc:	01 15       	cp	r16, r1
    61be:	11 05       	cpc	r17, r1
    61c0:	39 f4       	brne	.+14     	; 0x61d0 <rtc_init+0x2c>
    {
        state = rtc_run(-1);
    61c2:	8f ef       	ldi	r24, 0xFF	; 255
    61c4:	9f ef       	ldi	r25, 0xFF	; 255
    61c6:	a7 df       	rcall	.-178    	; 0x6116 <rtc_run>
        if(state < 0)
    61c8:	87 fd       	sbrc	r24, 7
    61ca:	16 c0       	rjmp	.+44     	; 0x61f8 <rtc_init+0x54>
        {
            rtc_ok = 0;
            return 0;
        }
        if(state == 0)                            // stopped
    61cc:	81 11       	cpse	r24, r1
    61ce:	22 c0       	rjmp	.+68     	; 0x6214 <rtc_init+0x70>
            force = 1;
    }

    if(force)                                     // INIT
    {
        if(rtc_run(0) < 0)                        // STOP RTC
    61d0:	80 e0       	ldi	r24, 0x00	; 0
    61d2:	90 e0       	ldi	r25, 0x00	; 0
    61d4:	a0 df       	rcall	.-192    	; 0x6116 <rtc_run>
    61d6:	97 fd       	sbrc	r25, 7
    61d8:	0f c0       	rjmp	.+30     	; 0x61f8 <rtc_init+0x54>
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }

        tmp = gmtime(&seconds);
    61da:	ce 01       	movw	r24, r28
    61dc:	04 96       	adiw	r24, 0x04	; 4
    61de:	a3 d6       	rcall	.+3398   	; 0x6f26 <gmtime>
    61e0:	00 97       	sbiw	r24, 0x00	; 0

        if(tmp == NULL || !rtc_write(tmp))
    61e2:	81 f4       	brne	.+32     	; 0x6204 <rtc_init+0x60>
    61e4:	81 e4       	ldi	r24, 0x41	; 65
        {
            printf("rtc_init  write epoch failed\n");
    61e6:	94 e0       	ldi	r25, 0x04	; 4
    61e8:	a0 e0       	ldi	r26, 0x00	; 0
    61ea:	ed b7       	in	r30, 0x3d	; 61
    61ec:	fe b7       	in	r31, 0x3e	; 62
    61ee:	81 83       	std	Z+1, r24	; 0x01
    61f0:	92 83       	std	Z+2, r25	; 0x02
    61f2:	a3 83       	std	Z+3, r26	; 0x03
    61f4:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    61f8:	10 92 ee 19 	sts	0x19EE, r1	; 0x8019ee <rtc_ok+0x1>
            rtc_ok = 0;
    61fc:	10 92 ed 19 	sts	0x19ED, r1	; 0x8019ed <rtc_ok>
            return 0;
    6200:	80 e0       	ldi	r24, 0x00	; 0
    6202:	0e c0       	rjmp	.+28     	; 0x6220 <rtc_init+0x7c>
            return 0;
        }

        tmp = gmtime(&seconds);

        if(tmp == NULL || !rtc_write(tmp))
    6204:	ef de       	rcall	.-546    	; 0x5fe4 <rtc_write>
    6206:	88 23       	and	r24, r24
    6208:	69 f3       	breq	.-38     	; 0x61e4 <rtc_init+0x40>
            printf("rtc_init  write epoch failed\n");
            rtc_ok = 0;
            return 0;
        }

        if(rtc_run(1) < 0)                        // START RTC
    620a:	81 e0       	ldi	r24, 0x01	; 1
    620c:	90 e0       	ldi	r25, 0x00	; 0
    620e:	83 df       	rcall	.-250    	; 0x6116 <rtc_run>
    6210:	97 fd       	sbrc	r25, 7
    6212:	f2 cf       	rjmp	.-28     	; 0x61f8 <rtc_init+0x54>
    6214:	81 e0       	ldi	r24, 0x01	; 1
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }
    }
    rtc_ok = 1;
    6216:	90 e0       	ldi	r25, 0x00	; 0
    6218:	90 93 ee 19 	sts	0x19EE, r25	; 0x8019ee <rtc_ok+0x1>
    621c:	80 93 ed 19 	sts	0x19ED, r24	; 0x8019ed <rtc_ok>
    6220:	27 96       	adiw	r28, 0x07	; 7
    return 1;
}
    6222:	e4 e0       	ldi	r30, 0x04	; 4
    6224:	0c 94 e5 e6 	jmp	0x1cdca	; 0x1cdca <__epilogue_restores__+0x1c>

00006228 <islower>:
    6228:	9c 01       	movw	r18, r24
    if(!ptr)
        return(ptr);
    strncpy(ptr,str,len);
    return(ptr);

}
    622a:	21 56       	subi	r18, 0x61	; 97
    622c:	31 09       	sbc	r19, r1
    622e:	81 e0       	ldi	r24, 0x01	; 1
    6230:	90 e0       	ldi	r25, 0x00	; 0
    6232:	2a 31       	cpi	r18, 0x1A	; 26
    6234:	31 05       	cpc	r19, r1
    6236:	10 f0       	brcs	.+4      	; 0x623c <islower+0x14>
    6238:	80 e0       	ldi	r24, 0x00	; 0
    623a:	90 e0       	ldi	r25, 0x00	; 0
    623c:	08 95       	ret

0000623e <toupper>:
    623e:	cf 93       	push	r28
    6240:	df 93       	push	r29
    6242:	ec 01       	movw	r28, r24
    6244:	f1 df       	rcall	.-30     	; 0x6228 <islower>
    6246:	89 2b       	or	r24, r25
    6248:	19 f0       	breq	.+6      	; 0x6250 <toupper+0x12>
    624a:	ce 01       	movw	r24, r28
    624c:	80 97       	sbiw	r24, 0x20	; 32
    624e:	01 c0       	rjmp	.+2      	; 0x6252 <toupper+0x14>
    6250:	ce 01       	movw	r24, r28
    6252:	df 91       	pop	r29
    6254:	cf 91       	pop	r28
    6256:	08 95       	ret

00006258 <strcpy>:
    6258:	fc 01       	movw	r30, r24
    625a:	db 01       	movw	r26, r22
    625c:	2d 91       	ld	r18, X+
    625e:	bd 01       	movw	r22, r26
    6260:	01 96       	adiw	r24, 0x01	; 1
    6262:	22 23       	and	r18, r18
    6264:	11 f0       	breq	.+4      	; 0x626a <strcpy+0x12>
    6266:	20 83       	st	Z, r18
    6268:	f7 cf       	rjmp	.-18     	; 0x6258 <strcpy>
    626a:	10 82       	st	Z, r1
    626c:	08 95       	ret

0000626e <strncpy>:
    626e:	db 01       	movw	r26, r22
    6270:	fc 01       	movw	r30, r24
    6272:	2d 91       	ld	r18, X+
    6274:	21 11       	cpse	r18, r1
    6276:	03 c0       	rjmp	.+6      	; 0x627e <strncpy+0x10>
    6278:	4e 0f       	add	r20, r30
    627a:	5f 1f       	adc	r21, r31
    627c:	08 c0       	rjmp	.+16     	; 0x628e <strncpy+0x20>
    627e:	41 15       	cp	r20, r1
    6280:	51 05       	cpc	r21, r1
    6282:	21 f0       	breq	.+8      	; 0x628c <strncpy+0x1e>
    6284:	21 93       	st	Z+, r18
    6286:	41 50       	subi	r20, 0x01	; 1
    6288:	51 09       	sbc	r21, r1
    628a:	f3 cf       	rjmp	.-26     	; 0x6272 <strncpy+0x4>
    628c:	08 95       	ret
    628e:	4e 17       	cp	r20, r30
    6290:	5f 07       	cpc	r21, r31
    6292:	11 f0       	breq	.+4      	; 0x6298 <strncpy+0x2a>
    6294:	11 92       	st	Z+, r1
    6296:	fb cf       	rjmp	.-10     	; 0x628e <strncpy+0x20>
    6298:	08 95       	ret

0000629a <strcat>:
    629a:	cf 93       	push	r28
    629c:	df 93       	push	r29
    629e:	d8 2f       	mov	r29, r24
    62a0:	c9 2f       	mov	r28, r25
    62a2:	28 2f       	mov	r18, r24
    62a4:	39 2f       	mov	r19, r25
    62a6:	c9 01       	movw	r24, r18
    62a8:	2f 5f       	subi	r18, 0xFF	; 255
    62aa:	3f 4f       	sbci	r19, 0xFF	; 255
    62ac:	fc 01       	movw	r30, r24
    62ae:	40 81       	ld	r20, Z
    62b0:	41 11       	cpse	r20, r1
    62b2:	f9 cf       	rjmp	.-14     	; 0x62a6 <strcat+0xc>
    62b4:	d1 df       	rcall	.-94     	; 0x6258 <strcpy>
    62b6:	8d 2f       	mov	r24, r29
    62b8:	9c 2f       	mov	r25, r28
    62ba:	df 91       	pop	r29
    62bc:	cf 91       	pop	r28
    62be:	08 95       	ret

000062c0 <reverse>:
    62c0:	fc 01       	movw	r30, r24
    62c2:	01 90       	ld	r0, Z+
    62c4:	00 20       	and	r0, r0
    62c6:	e9 f7       	brne	.-6      	; 0x62c2 <reverse+0x2>
    62c8:	31 97       	sbiw	r30, 0x01	; 1
    62ca:	e8 1b       	sub	r30, r24
    62cc:	f9 0b       	sbc	r31, r25
    62ce:	af 01       	movw	r20, r30
    62d0:	55 95       	asr	r21
    62d2:	47 95       	ror	r20
    62d4:	e8 0f       	add	r30, r24
    62d6:	f9 1f       	adc	r31, r25
    62d8:	dc 01       	movw	r26, r24
    62da:	9d 01       	movw	r18, r26
    62dc:	28 1b       	sub	r18, r24
    62de:	39 0b       	sbc	r19, r25
    62e0:	24 17       	cp	r18, r20
    62e2:	35 07       	cpc	r19, r21
    62e4:	2c f4       	brge	.+10     	; 0x62f0 <reverse+0x30>
    62e6:	22 91       	ld	r18, -Z
    62e8:	3c 91       	ld	r19, X
    62ea:	30 83       	st	Z, r19
    62ec:	2d 93       	st	X+, r18
    62ee:	f5 cf       	rjmp	.-22     	; 0x62da <reverse+0x1a>
    62f0:	08 95       	ret

000062f2 <strupper>:
    62f2:	cf 93       	push	r28
    62f4:	df 93       	push	r29
    62f6:	ec 01       	movw	r28, r24
    62f8:	88 81       	ld	r24, Y
    62fa:	88 23       	and	r24, r24
    62fc:	21 f0       	breq	.+8      	; 0x6306 <strupper+0x14>
    62fe:	90 e0       	ldi	r25, 0x00	; 0
    6300:	9e df       	rcall	.-196    	; 0x623e <toupper>
    6302:	89 93       	st	Y+, r24
    6304:	f9 cf       	rjmp	.-14     	; 0x62f8 <strupper+0x6>
    6306:	df 91       	pop	r29
    6308:	cf 91       	pop	r28
    630a:	08 95       	ret

0000630c <strcmp>:
    630c:	dc 01       	movw	r26, r24
    630e:	fb 01       	movw	r30, r22
    6310:	2d 91       	ld	r18, X+
    6312:	41 91       	ld	r20, Z+
    6314:	50 e0       	ldi	r21, 0x00	; 0
    6316:	30 e0       	ldi	r19, 0x00	; 0
    6318:	c9 01       	movw	r24, r18
    631a:	84 1b       	sub	r24, r20
    631c:	95 0b       	sbc	r25, r21
    631e:	11 f4       	brne	.+4      	; 0x6324 <strcmp+0x18>
    6320:	45 2b       	or	r20, r21
    6322:	b1 f7       	brne	.-20     	; 0x6310 <strcmp+0x4>
    6324:	08 95       	ret

00006326 <strcasecmp>:
    6326:	ef 92       	push	r14
    6328:	ff 92       	push	r15
    632a:	0f 93       	push	r16
    632c:	1f 93       	push	r17
    632e:	cf 93       	push	r28
    6330:	df 93       	push	r29
    6332:	7c 01       	movw	r14, r24
    6334:	8b 01       	movw	r16, r22
    6336:	f7 01       	movw	r30, r14
    6338:	81 91       	ld	r24, Z+
    633a:	7f 01       	movw	r14, r30
    633c:	90 e0       	ldi	r25, 0x00	; 0
    633e:	7f df       	rcall	.-258    	; 0x623e <toupper>
    6340:	ec 01       	movw	r28, r24
    6342:	f8 01       	movw	r30, r16
    6344:	81 91       	ld	r24, Z+
    6346:	8f 01       	movw	r16, r30
    6348:	90 e0       	ldi	r25, 0x00	; 0
    634a:	79 df       	rcall	.-270    	; 0x623e <toupper>
    634c:	9c 01       	movw	r18, r24
    634e:	ce 01       	movw	r24, r28
    6350:	82 1b       	sub	r24, r18
    6352:	93 0b       	sbc	r25, r19
    6354:	11 f4       	brne	.+4      	; 0x635a <strcasecmp+0x34>
    6356:	23 2b       	or	r18, r19
    6358:	71 f7       	brne	.-36     	; 0x6336 <strcasecmp+0x10>
    635a:	cd b7       	in	r28, 0x3d	; 61
    635c:	de b7       	in	r29, 0x3e	; 62
    635e:	e6 e0       	ldi	r30, 0x06	; 6
    6360:	0c 94 e3 e6 	jmp	0x1cdc6	; 0x1cdc6 <__epilogue_restores__+0x18>

00006364 <strncasecmp>:
    6364:	a0 e0       	ldi	r26, 0x00	; 0
    6366:	b0 e0       	ldi	r27, 0x00	; 0
    6368:	e8 eb       	ldi	r30, 0xB8	; 184
    636a:	f1 e3       	ldi	r31, 0x31	; 49
    636c:	0c 94 c5 e6 	jmp	0x1cd8a	; 0x1cd8a <__prologue_saves__+0x14>
    6370:	8c 01       	movw	r16, r24
    6372:	7b 01       	movw	r14, r22
    6374:	6c 01       	movw	r12, r24
    6376:	c4 0e       	add	r12, r20
    6378:	d5 1e       	adc	r13, r21
    637a:	0c 15       	cp	r16, r12
    637c:	1d 05       	cpc	r17, r13
    637e:	99 f0       	breq	.+38     	; 0x63a6 <strncasecmp+0x42>
    6380:	f8 01       	movw	r30, r16
    6382:	81 91       	ld	r24, Z+
    6384:	8f 01       	movw	r16, r30
    6386:	90 e0       	ldi	r25, 0x00	; 0
    6388:	5a df       	rcall	.-332    	; 0x623e <toupper>
    638a:	ec 01       	movw	r28, r24
    638c:	f7 01       	movw	r30, r14
    638e:	81 91       	ld	r24, Z+
    6390:	7f 01       	movw	r14, r30
    6392:	90 e0       	ldi	r25, 0x00	; 0
    6394:	54 df       	rcall	.-344    	; 0x623e <toupper>
    6396:	9c 01       	movw	r18, r24
    6398:	ce 01       	movw	r24, r28
    639a:	82 1b       	sub	r24, r18
    639c:	93 0b       	sbc	r25, r19
    639e:	29 f4       	brne	.+10     	; 0x63aa <strncasecmp+0x46>
    63a0:	23 2b       	or	r18, r19
    63a2:	59 f7       	brne	.-42     	; 0x637a <strncasecmp+0x16>
    63a4:	02 c0       	rjmp	.+4      	; 0x63aa <strncasecmp+0x46>
    63a6:	80 e0       	ldi	r24, 0x00	; 0
    63a8:	90 e0       	ldi	r25, 0x00	; 0
    63aa:	cd b7       	in	r28, 0x3d	; 61
    63ac:	de b7       	in	r29, 0x3e	; 62
    63ae:	e8 e0       	ldi	r30, 0x08	; 8
    63b0:	0c 94 e1 e6 	jmp	0x1cdc2	; 0x1cdc2 <__epilogue_restores__+0x14>

000063b4 <stralloc>:
///
///@return pointer to alocated string.
///@return NULL on out of memory.
MEMSPACE
char *stralloc(char *str)
{
    63b4:	0f 93       	push	r16
    63b6:	1f 93       	push	r17
    63b8:	cf 93       	push	r28
    63ba:	df 93       	push	r29
    char *ptr;
    int len;

    if(!str)
    63bc:	00 97       	sbiw	r24, 0x00	; 0
    63be:	99 f0       	breq	.+38     	; 0x63e6 <stralloc+0x32>
    63c0:	ec 01       	movw	r28, r24
        return(str);;
    len  = strlen(str);
    63c2:	fc 01       	movw	r30, r24
    63c4:	01 90       	ld	r0, Z+
    63c6:	00 20       	and	r0, r0
    63c8:	e9 f7       	brne	.-6      	; 0x63c4 <stralloc+0x10>
    63ca:	cf 01       	movw	r24, r30
    ptr = safecalloc(len+1,1);
    63cc:	61 e0       	ldi	r22, 0x01	; 1
    63ce:	70 e0       	ldi	r23, 0x00	; 0
    63d0:	8c 1b       	sub	r24, r28
    63d2:	9d 0b       	sbc	r25, r29
    63d4:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <safecalloc>
    63d8:	8c 01       	movw	r16, r24
    if(!ptr)
    63da:	00 97       	sbiw	r24, 0x00	; 0
    63dc:	21 f0       	breq	.+8      	; 0x63e6 <stralloc+0x32>
        return(ptr);
    strcpy(ptr,str);
    63de:	be 01       	movw	r22, r28
    63e0:	3b df       	rcall	.-394    	; 0x6258 <strcpy>
    return(ptr);
    63e2:	c8 01       	movw	r24, r16
    63e4:	02 c0       	rjmp	.+4      	; 0x63ea <stralloc+0x36>
    63e6:	80 e0       	ldi	r24, 0x00	; 0
    63e8:	90 e0       	ldi	r25, 0x00	; 0
}
    63ea:	df 91       	pop	r29
    63ec:	cf 91       	pop	r28
    63ee:	1f 91       	pop	r17
    63f0:	0f 91       	pop	r16
    63f2:	08 95       	ret

000063f4 <sep>:
        return(0);

    if(strncmp(str,pat,patlen) == 0)
        return(len);
    return(0);
}
    63f4:	00 d0       	rcall	.+0      	; 0x63f6 <sep+0x2>
    63f6:	1f 92       	push	r1
    63f8:	8e e1       	ldi	r24, 0x1E	; 30
    63fa:	95 e0       	ldi	r25, 0x05	; 5
    63fc:	a0 e0       	ldi	r26, 0x00	; 0
    63fe:	ed b7       	in	r30, 0x3d	; 61
    6400:	fe b7       	in	r31, 0x3e	; 62
    6402:	81 83       	std	Z+1, r24	; 0x01
    6404:	92 83       	std	Z+2, r25	; 0x02
    6406:	a3 83       	std	Z+3, r26	; 0x03
    6408:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    640c:	0f 90       	pop	r0
    640e:	0f 90       	pop	r0
    6410:	0f 90       	pop	r0
    6412:	08 95       	ret

00006414 <trim_tail>:
    6414:	00 97       	sbiw	r24, 0x00	; 0
    6416:	69 f0       	breq	.+26     	; 0x6432 <trim_tail+0x1e>
    6418:	fc 01       	movw	r30, r24
    641a:	01 90       	ld	r0, Z+
    641c:	00 20       	and	r0, r0
    641e:	e9 f7       	brne	.-6      	; 0x641a <trim_tail+0x6>
    6420:	31 97       	sbiw	r30, 0x01	; 1
    6422:	e8 17       	cp	r30, r24
    6424:	f9 07       	cpc	r31, r25
    6426:	29 f0       	breq	.+10     	; 0x6432 <trim_tail+0x1e>
    6428:	22 91       	ld	r18, -Z
    642a:	21 32       	cpi	r18, 0x21	; 33
    642c:	10 f4       	brcc	.+4      	; 0x6432 <trim_tail+0x1e>
    642e:	10 82       	st	Z, r1
    6430:	f8 cf       	rjmp	.-16     	; 0x6422 <trim_tail+0xe>
    6432:	08 95       	ret

00006434 <skipspaces>:
    6434:	00 97       	sbiw	r24, 0x00	; 0
    6436:	39 f0       	breq	.+14     	; 0x6446 <skipspaces+0x12>
    6438:	fc 01       	movw	r30, r24
    643a:	cf 01       	movw	r24, r30
    643c:	21 91       	ld	r18, Z+
    643e:	20 32       	cpi	r18, 0x20	; 32
    6440:	e1 f3       	breq	.-8      	; 0x643a <skipspaces+0x6>
    6442:	29 30       	cpi	r18, 0x09	; 9
    6444:	d1 f3       	breq	.-12     	; 0x643a <skipspaces+0x6>
    6446:	08 95       	ret

00006448 <MATCH>:
    6448:	cf 93       	push	r28
    644a:	df 93       	push	r29
    644c:	fb 01       	movw	r30, r22
    644e:	01 90       	ld	r0, Z+
    6450:	00 20       	and	r0, r0
    6452:	e9 f7       	brne	.-6      	; 0x644e <MATCH+0x6>
    6454:	31 97       	sbiw	r30, 0x01	; 1
    6456:	ef 01       	movw	r28, r30
    6458:	c6 1b       	sub	r28, r22
    645a:	d7 0b       	sbc	r29, r23
    645c:	57 df       	rcall	.-338    	; 0x630c <strcmp>
    645e:	89 2b       	or	r24, r25
    6460:	11 f4       	brne	.+4      	; 0x6466 <MATCH+0x1e>
    6462:	ce 01       	movw	r24, r28
    6464:	02 c0       	rjmp	.+4      	; 0x646a <MATCH+0x22>
    6466:	80 e0       	ldi	r24, 0x00	; 0
    6468:	90 e0       	ldi	r25, 0x00	; 0
    646a:	df 91       	pop	r29
    646c:	cf 91       	pop	r28
    646e:	08 95       	ret

00006470 <MATCHI>:
    6470:	cf 93       	push	r28
    6472:	df 93       	push	r29
    6474:	fb 01       	movw	r30, r22
    6476:	01 90       	ld	r0, Z+
    6478:	00 20       	and	r0, r0
    647a:	e9 f7       	brne	.-6      	; 0x6476 <MATCHI+0x6>
    647c:	31 97       	sbiw	r30, 0x01	; 1
    647e:	ef 01       	movw	r28, r30
    6480:	c6 1b       	sub	r28, r22
    6482:	d7 0b       	sbc	r29, r23
    6484:	50 df       	rcall	.-352    	; 0x6326 <strcasecmp>
    6486:	89 2b       	or	r24, r25
    6488:	11 f4       	brne	.+4      	; 0x648e <MATCHI+0x1e>
    648a:	ce 01       	movw	r24, r28
    648c:	02 c0       	rjmp	.+4      	; 0x6492 <MATCHI+0x22>
    648e:	80 e0       	ldi	r24, 0x00	; 0
    6490:	90 e0       	ldi	r25, 0x00	; 0
    6492:	df 91       	pop	r29
    6494:	cf 91       	pop	r28
    6496:	08 95       	ret

00006498 <MATCHARGS>:
    6498:	a9 e0       	ldi	r26, 0x09	; 9
    649a:	b0 e0       	ldi	r27, 0x00	; 0
    649c:	e2 e5       	ldi	r30, 0x52	; 82
    649e:	f2 e3       	ldi	r31, 0x32	; 50
    64a0:	0c 94 c7 e6 	jmp	0x1cd8e	; 0x1cd8e <__prologue_saves__+0x18>
    64a4:	eb 01       	movw	r28, r22
    64a6:	8a 01       	movw	r16, r20
    64a8:	79 01       	movw	r14, r18
    64aa:	e2 df       	rcall	.-60     	; 0x6470 <MATCHI>
    64ac:	00 97       	sbiw	r24, 0x00	; 0
    64ae:	c1 f0       	breq	.+48     	; 0x64e0 <MATCHARGS+0x48>
    64b0:	e0 16       	cp	r14, r16
    64b2:	f1 06       	cpc	r15, r17
    64b4:	9c f4       	brge	.+38     	; 0x64dc <MATCHARGS+0x44>
    64b6:	ed b7       	in	r30, 0x3d	; 61
    64b8:	fe b7       	in	r31, 0x3e	; 62
    64ba:	f1 86       	std	Z+9, r15	; 0x09
    64bc:	e0 86       	std	Z+8, r14	; 0x08
    64be:	17 83       	std	Z+7, r17	; 0x07
    64c0:	06 83       	std	Z+6, r16	; 0x06
    64c2:	d5 83       	std	Z+5, r29	; 0x05
    64c4:	c4 83       	std	Z+4, r28	; 0x04
    64c6:	88 ef       	ldi	r24, 0xF8	; 248
    64c8:	94 e0       	ldi	r25, 0x04	; 4
    64ca:	a0 e0       	ldi	r26, 0x00	; 0
    64cc:	81 83       	std	Z+1, r24	; 0x01
    64ce:	92 83       	std	Z+2, r25	; 0x02
    64d0:	a3 83       	std	Z+3, r26	; 0x03
    64d2:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    64d6:	80 e0       	ldi	r24, 0x00	; 0
    64d8:	90 e0       	ldi	r25, 0x00	; 0
    64da:	02 c0       	rjmp	.+4      	; 0x64e0 <MATCHARGS+0x48>
    64dc:	81 e0       	ldi	r24, 0x01	; 1
    64de:	90 e0       	ldi	r25, 0x00	; 0
    64e0:	cd b7       	in	r28, 0x3d	; 61
    64e2:	de b7       	in	r29, 0x3e	; 62
    64e4:	29 96       	adiw	r28, 0x09	; 9
    64e6:	e6 e0       	ldi	r30, 0x06	; 6
    64e8:	0c 94 e3 e6 	jmp	0x1cdc6	; 0x1cdc6 <__epilogue_restores__+0x18>

000064ec <MATCHI_LEN>:
    64ec:	cf 93       	push	r28
    64ee:	df 93       	push	r29
    64f0:	00 97       	sbiw	r24, 0x00	; 0
    64f2:	89 f0       	breq	.+34     	; 0x6516 <MATCHI_LEN+0x2a>
    64f4:	61 15       	cp	r22, r1
    64f6:	71 05       	cpc	r23, r1
    64f8:	71 f0       	breq	.+28     	; 0x6516 <MATCHI_LEN+0x2a>
    64fa:	eb 01       	movw	r28, r22
    64fc:	09 90       	ld	r0, Y+
    64fe:	00 20       	and	r0, r0
    6500:	e9 f7       	brne	.-6      	; 0x64fc <MATCHI_LEN+0x10>
    6502:	21 97       	sbiw	r28, 0x01	; 1
    6504:	c6 1b       	sub	r28, r22
    6506:	d7 0b       	sbc	r29, r23
    6508:	31 f0       	breq	.+12     	; 0x6516 <MATCHI_LEN+0x2a>
    650a:	ae 01       	movw	r20, r28
    650c:	2b df       	rcall	.-426    	; 0x6364 <strncasecmp>
    650e:	89 2b       	or	r24, r25
    6510:	11 f4       	brne	.+4      	; 0x6516 <MATCHI_LEN+0x2a>
    6512:	ce 01       	movw	r24, r28
    6514:	02 c0       	rjmp	.+4      	; 0x651a <MATCHI_LEN+0x2e>
    6516:	80 e0       	ldi	r24, 0x00	; 0
    6518:	90 e0       	ldi	r25, 0x00	; 0
    651a:	df 91       	pop	r29
    651c:	cf 91       	pop	r28
    651e:	08 95       	ret

00006520 <split_args>:
    6520:	a0 e0       	ldi	r26, 0x00	; 0
    6522:	b0 e0       	ldi	r27, 0x00	; 0
    6524:	e6 e9       	ldi	r30, 0x96	; 150
    6526:	f2 e3       	ldi	r31, 0x32	; 50
    6528:	0c 94 c5 e6 	jmp	0x1cd8a	; 0x1cd8a <__prologue_saves__+0x14>
    652c:	dc 01       	movw	r26, r24
    652e:	6a 01       	movw	r12, r20
    6530:	8b 01       	movw	r16, r22
    6532:	fb 01       	movw	r30, r22
    6534:	80 e0       	ldi	r24, 0x00	; 0
    6536:	90 e0       	ldi	r25, 0x00	; 0
    6538:	8c 15       	cp	r24, r12
    653a:	9d 05       	cpc	r25, r13
    653c:	24 f4       	brge	.+8      	; 0x6546 <split_args+0x26>
    653e:	11 92       	st	Z+, r1
    6540:	11 92       	st	Z+, r1
    6542:	01 96       	adiw	r24, 0x01	; 1
    6544:	f9 cf       	rjmp	.-14     	; 0x6538 <split_args+0x18>
    6546:	c1 14       	cp	r12, r1
    6548:	d1 04       	cpc	r13, r1
    654a:	d9 f1       	breq	.+118    	; 0x65c2 <split_args+0xa2>
    654c:	10 97       	sbiw	r26, 0x00	; 0
    654e:	c9 f1       	breq	.+114    	; 0x65c2 <split_args+0xa2>
    6550:	ee 24       	eor	r14, r14
    6552:	e3 94       	inc	r14
    6554:	f1 2c       	mov	r15, r1
    6556:	c0 e0       	ldi	r28, 0x00	; 0
    6558:	d0 e0       	ldi	r29, 0x00	; 0
    655a:	8c 91       	ld	r24, X
    655c:	88 23       	and	r24, r24
    655e:	b1 f1       	breq	.+108    	; 0x65cc <split_args+0xac>
    6560:	cc 15       	cp	r28, r12
    6562:	dd 05       	cpc	r29, r13
    6564:	9c f5       	brge	.+102    	; 0x65cc <split_args+0xac>
    6566:	cd 01       	movw	r24, r26
    6568:	65 df       	rcall	.-310    	; 0x6434 <skipspaces>
    656a:	dc 01       	movw	r26, r24
    656c:	2c 91       	ld	r18, X
    656e:	22 23       	and	r18, r18
    6570:	69 f1       	breq	.+90     	; 0x65cc <split_args+0xac>
    6572:	22 32       	cpi	r18, 0x22	; 34
    6574:	79 f4       	brne	.+30     	; 0x6594 <split_args+0x74>
    6576:	fc 01       	movw	r30, r24
    6578:	31 96       	adiw	r30, 0x01	; 1
    657a:	d8 01       	movw	r26, r16
    657c:	ed 93       	st	X+, r30
    657e:	fc 93       	st	X, r31
    6580:	df 01       	movw	r26, r30
    6582:	80 81       	ld	r24, Z
    6584:	31 96       	adiw	r30, 0x01	; 1
    6586:	88 23       	and	r24, r24
    6588:	a9 f0       	breq	.+42     	; 0x65b4 <split_args+0x94>
    658a:	82 32       	cpi	r24, 0x22	; 34
    658c:	c9 f7       	brne	.-14     	; 0x6580 <split_args+0x60>
    658e:	1c 92       	st	X, r1
    6590:	df 01       	movw	r26, r30
    6592:	10 c0       	rjmp	.+32     	; 0x65b4 <split_args+0x94>
    6594:	f8 01       	movw	r30, r16
    6596:	91 83       	std	Z+1, r25	; 0x01
    6598:	80 83       	st	Z, r24
    659a:	fc 01       	movw	r30, r24
    659c:	2e 2f       	mov	r18, r30
    659e:	9f 2f       	mov	r25, r31
    65a0:	81 91       	ld	r24, Z+
    65a2:	3f ed       	ldi	r19, 0xDF	; 223
    65a4:	38 0f       	add	r19, r24
    65a6:	3e 35       	cpi	r19, 0x5E	; 94
    65a8:	c8 f3       	brcs	.-14     	; 0x659c <split_args+0x7c>
    65aa:	88 23       	and	r24, r24
    65ac:	69 f0       	breq	.+26     	; 0x65c8 <split_args+0xa8>
    65ae:	a2 2f       	mov	r26, r18
    65b0:	b9 2f       	mov	r27, r25
    65b2:	1d 92       	st	X+, r1
    65b4:	21 96       	adiw	r28, 0x01	; 1
    65b6:	ff ef       	ldi	r31, 0xFF	; 255
    65b8:	ef 1a       	sub	r14, r31
    65ba:	ff 0a       	sbc	r15, r31
    65bc:	0e 5f       	subi	r16, 0xFE	; 254
    65be:	1f 4f       	sbci	r17, 0xFF	; 255
    65c0:	cc cf       	rjmp	.-104    	; 0x655a <split_args+0x3a>
    65c2:	80 e0       	ldi	r24, 0x00	; 0
    65c4:	90 e0       	ldi	r25, 0x00	; 0
    65c6:	03 c0       	rjmp	.+6      	; 0x65ce <split_args+0xae>
    65c8:	c7 01       	movw	r24, r14
    65ca:	01 c0       	rjmp	.+2      	; 0x65ce <split_args+0xae>
    65cc:	ce 01       	movw	r24, r28
    65ce:	cd b7       	in	r28, 0x3d	; 61
    65d0:	de b7       	in	r29, 0x3e	; 62
    65d2:	e8 e0       	ldi	r30, 0x08	; 8
    65d4:	0c 94 e1 e6 	jmp	0x1cdc2	; 0x1cdc2 <__epilogue_restores__+0x14>

000065d8 <get_token>:
    65d8:	ef 92       	push	r14
    65da:	ff 92       	push	r15
    65dc:	0f 93       	push	r16
    65de:	1f 93       	push	r17
    65e0:	cf 93       	push	r28
    65e2:	df 93       	push	r29
    65e4:	eb 01       	movw	r28, r22
    65e6:	8a 01       	movw	r16, r20
    65e8:	18 82       	st	Y, r1
    65ea:	00 97       	sbiw	r24, 0x00	; 0
    65ec:	89 f1       	breq	.+98     	; 0x6650 <get_token+0x78>
    65ee:	fc 01       	movw	r30, r24
    65f0:	20 81       	ld	r18, Z
    65f2:	22 23       	and	r18, r18
    65f4:	79 f1       	breq	.+94     	; 0x6654 <get_token+0x7c>
    65f6:	1e df       	rcall	.-452    	; 0x6434 <skipspaces>
    65f8:	7c 01       	movw	r14, r24
    65fa:	0c df       	rcall	.-488    	; 0x6414 <trim_tail>
    65fc:	f7 01       	movw	r30, r14
    65fe:	cf 01       	movw	r24, r30
    6600:	21 91       	ld	r18, Z+
    6602:	21 32       	cpi	r18, 0x21	; 33
    6604:	e0 f0       	brcs	.+56     	; 0x663e <get_token+0x66>
    6606:	10 16       	cp	r1, r16
    6608:	11 06       	cpc	r1, r17
    660a:	cc f4       	brge	.+50     	; 0x663e <get_token+0x66>
    660c:	22 32       	cpi	r18, 0x22	; 34
    660e:	79 f4       	brne	.+30     	; 0x662e <get_token+0x56>
    6610:	fc 01       	movw	r30, r24
    6612:	31 96       	adiw	r30, 0x01	; 1
    6614:	0c 0f       	add	r16, r28
    6616:	1d 1f       	adc	r17, r29
    6618:	cf 01       	movw	r24, r30
    661a:	21 91       	ld	r18, Z+
    661c:	22 23       	and	r18, r18
    661e:	79 f0       	breq	.+30     	; 0x663e <get_token+0x66>
    6620:	22 32       	cpi	r18, 0x22	; 34
    6622:	59 f0       	breq	.+22     	; 0x663a <get_token+0x62>
    6624:	c0 17       	cp	r28, r16
    6626:	d1 07       	cpc	r29, r17
    6628:	51 f0       	breq	.+20     	; 0x663e <get_token+0x66>
    662a:	29 93       	st	Y+, r18
    662c:	f5 cf       	rjmp	.-22     	; 0x6618 <get_token+0x40>
    662e:	2c 32       	cpi	r18, 0x2C	; 44
    6630:	31 f0       	breq	.+12     	; 0x663e <get_token+0x66>
    6632:	29 93       	st	Y+, r18
    6634:	01 50       	subi	r16, 0x01	; 1
    6636:	11 09       	sbc	r17, r1
    6638:	e2 cf       	rjmp	.-60     	; 0x65fe <get_token+0x26>
    663a:	cf 01       	movw	r24, r30
    663c:	18 82       	st	Y, r1
    663e:	fa de       	rcall	.-524    	; 0x6434 <skipspaces>
    6640:	fc 01       	movw	r30, r24
    6642:	80 81       	ld	r24, Z
    6644:	8c 32       	cpi	r24, 0x2C	; 44
    6646:	09 f4       	brne	.+2      	; 0x664a <get_token+0x72>
    6648:	31 96       	adiw	r30, 0x01	; 1
    664a:	18 82       	st	Y, r1
    664c:	cf 01       	movw	r24, r30
    664e:	02 c0       	rjmp	.+4      	; 0x6654 <get_token+0x7c>
    6650:	80 e0       	ldi	r24, 0x00	; 0
    6652:	90 e0       	ldi	r25, 0x00	; 0
    6654:	cd b7       	in	r28, 0x3d	; 61
    6656:	de b7       	in	r29, 0x3e	; 62
    6658:	e6 e0       	ldi	r30, 0x06	; 6
    665a:	0c 94 e3 e6 	jmp	0x1cdc6	; 0x1cdc6 <__epilogue_restores__+0x18>

0000665e <get_value>:
/// @param[in] str: string to examine
///
/// @return  value
MEMSPACE
int32_t get_value(char *str)
{
    665e:	a2 e0       	ldi	r26, 0x02	; 2
    6660:	b0 e0       	ldi	r27, 0x00	; 0
    6662:	e5 e3       	ldi	r30, 0x35	; 53
    6664:	f3 e3       	ldi	r31, 0x33	; 51
    6666:	0c 94 c9 e6 	jmp	0x1cd92	; 0x1cd92 <__prologue_saves__+0x1c>
    int base;
    int ret;
    char *ptr;
    char *endptr;

    if(!str || *str == 0)
    666a:	00 97       	sbiw	r24, 0x00	; 0
    666c:	79 f1       	breq	.+94     	; 0x66cc <get_value+0x6e>
    666e:	fc 01       	movw	r30, r24
    6670:	20 81       	ld	r18, Z
    6672:	22 23       	and	r18, r18
    6674:	59 f1       	breq	.+86     	; 0x66cc <get_value+0x6e>
        return(0);

    ptr = skipspaces(str);
    6676:	de de       	rcall	.-580    	; 0x6434 <skipspaces>
    6678:	8c 01       	movw	r16, r24
    base = 10;

// convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    667a:	6f e2       	ldi	r22, 0x2F	; 47
    667c:	73 e0       	ldi	r23, 0x03	; 3
    667e:	36 df       	rcall	.-404    	; 0x64ec <MATCHI_LEN>
    6680:	00 97       	sbiw	r24, 0x00	; 0
    6682:	29 f0       	breq	.+10     	; 0x668e <get_value+0x30>
    {
        base = 16;
        ptr += ret;
    6684:	08 0f       	add	r16, r24
    6686:	19 1f       	adc	r17, r25
    base = 10;

// convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    {
        base = 16;
    6688:	40 e1       	ldi	r20, 0x10	; 16
    668a:	50 e0       	ldi	r21, 0x00	; 0
    668c:	18 c0       	rjmp	.+48     	; 0x66be <get_value+0x60>
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    668e:	62 e3       	ldi	r22, 0x32	; 50
    6690:	73 e0       	ldi	r23, 0x03	; 3
    6692:	c8 01       	movw	r24, r16
    6694:	2b df       	rcall	.-426    	; 0x64ec <MATCHI_LEN>
    6696:	00 97       	sbiw	r24, 0x00	; 0
    6698:	29 f0       	breq	.+10     	; 0x66a4 <get_value+0x46>
    {
        base = 8;
        ptr += ret;
    669a:	08 0f       	add	r16, r24
    669c:	19 1f       	adc	r17, r25
        base = 16;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    {
        base = 8;
    669e:	48 e0       	ldi	r20, 0x08	; 8
    66a0:	50 e0       	ldi	r21, 0x00	; 0
    66a2:	0d c0       	rjmp	.+26     	; 0x66be <get_value+0x60>
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    66a4:	65 e3       	ldi	r22, 0x35	; 53
    66a6:	73 e0       	ldi	r23, 0x03	; 3
    66a8:	c8 01       	movw	r24, r16
    66aa:	20 df       	rcall	.-448    	; 0x64ec <MATCHI_LEN>
    66ac:	00 97       	sbiw	r24, 0x00	; 0
    66ae:	29 f0       	breq	.+10     	; 0x66ba <get_value+0x5c>
    {
        base = 2;
        ptr += ret;
    66b0:	08 0f       	add	r16, r24
    66b2:	19 1f       	adc	r17, r25
        base = 8;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
    66b4:	42 e0       	ldi	r20, 0x02	; 2
    66b6:	50 e0       	ldi	r21, 0x00	; 0
    66b8:	02 c0       	rjmp	.+4      	; 0x66be <get_value+0x60>

    if(!str || *str == 0)
        return(0);

    ptr = skipspaces(str);
    base = 10;
    66ba:	4a e0       	ldi	r20, 0x0A	; 10
    66bc:	50 e0       	ldi	r21, 0x00	; 0
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
    66be:	be 01       	movw	r22, r28
    66c0:	6f 5f       	subi	r22, 0xFF	; 255
    66c2:	7f 4f       	sbci	r23, 0xFF	; 255
    66c4:	c8 01       	movw	r24, r16
    66c6:	0e 94 26 47 	call	0x8e4c	; 0x8e4c <strtol>
    66ca:	03 c0       	rjmp	.+6      	; 0x66d2 <get_value+0x74>
    int ret;
    char *ptr;
    char *endptr;

    if(!str || *str == 0)
        return(0);
    66cc:	60 e0       	ldi	r22, 0x00	; 0
    66ce:	70 e0       	ldi	r23, 0x00	; 0
    66d0:	cb 01       	movw	r24, r22
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
}
    66d2:	22 96       	adiw	r28, 0x02	; 2
    66d4:	e4 e0       	ldi	r30, 0x04	; 4
    66d6:	0c 94 e5 e6 	jmp	0x1cdca	; 0x1cdca <__epilogue_restores__+0x1c>

000066da <enable_system_task>:
/// @brief Enable interrupts
/// @return void.
MEMSPACE
void enable_system_task()
{
    sei();
    66da:	78 94       	sei
    66dc:	08 95       	ret

000066de <install_timers_isr>:
///
/// @see ISR().
/// @return void.
MEMSPACE void install_timers_isr()
{
    cli();
    66de:	f8 94       	cli
    TCCR1B=(1<<WGM12) | TIMER1_PRE_1;             // No Prescale
    66e0:	89 e0       	ldi	r24, 0x09	; 9
    66e2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    TCCR1A=0;
    66e6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    OCR1A=(TIMER1_COUNTS_PER_TIC-1);              // 0 .. count
    66ea:	8f e1       	ldi	r24, 0x1F	; 31
    66ec:	9e e4       	ldi	r25, 0x4E	; 78
    66ee:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    66f2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    TIMSK1 |= (1<<OCIE1A);                        //Enable the Output Compare A interrupt
    66f6:	ef e6       	ldi	r30, 0x6F	; 111
    66f8:	f0 e0       	ldi	r31, 0x00	; 0
    66fa:	80 81       	ld	r24, Z
    66fc:	82 60       	ori	r24, 0x02	; 2
    66fe:	80 83       	st	Z, r24
    sei();
    6700:	78 94       	sei
    6702:	08 95       	ret

00006704 <__vector_13>:
/// @brief AVR Timer Interrupt Vector
///
/// - calls execute_timers() - we call this the System task.
///
ISR(TIMER1_COMPA_vect)
{
    6704:	1f 92       	push	r1
    6706:	0f 92       	push	r0
    6708:	0f b6       	in	r0, 0x3f	; 63
    670a:	0f 92       	push	r0
    670c:	11 24       	eor	r1, r1
    670e:	0b b6       	in	r0, 0x3b	; 59
    6710:	0f 92       	push	r0
    6712:	2f 93       	push	r18
    6714:	3f 93       	push	r19
    6716:	4f 93       	push	r20
    6718:	5f 93       	push	r21
    671a:	6f 93       	push	r22
    671c:	7f 93       	push	r23
    671e:	8f 93       	push	r24
    6720:	9f 93       	push	r25
    6722:	af 93       	push	r26
    6724:	bf 93       	push	r27
    6726:	ef 93       	push	r30
    6728:	ff 93       	push	r31
    execute_timers();
    672a:	36 d2       	rcall	.+1132   	; 0x6b98 <execute_timers>
}
    672c:	ff 91       	pop	r31
    672e:	ef 91       	pop	r30
    6730:	bf 91       	pop	r27
    6732:	af 91       	pop	r26
    6734:	9f 91       	pop	r25
    6736:	8f 91       	pop	r24
    6738:	7f 91       	pop	r23
    673a:	6f 91       	pop	r22
    673c:	5f 91       	pop	r21
    673e:	4f 91       	pop	r20
    6740:	3f 91       	pop	r19
    6742:	2f 91       	pop	r18
    6744:	0f 90       	pop	r0
    6746:	0b be       	out	0x3b, r0	; 59
    6748:	0f 90       	pop	r0
    674a:	0f be       	out	0x3f, r0	; 63
    674c:	0f 90       	pop	r0
    674e:	1f 90       	pop	r1
    6750:	18 95       	reti

00006752 <clock_gettime>:
///
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    6752:	0f 93       	push	r16
    6754:	1f 93       	push	r17
    6756:	cf 93       	push	r28
    6758:	df 93       	push	r29
    675a:	fb 01       	movw	r30, r22
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;

// disable interrupts
    cli();
    675c:	f8 94       	cli

    count1 = TCNT1;
    675e:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    6762:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    ts->tv_sec = __clock.tv_sec;
    6766:	80 91 50 1a 	lds	r24, 0x1A50	; 0x801a50 <__clock>
    676a:	90 91 51 1a 	lds	r25, 0x1A51	; 0x801a51 <__clock+0x1>
    676e:	a0 91 52 1a 	lds	r26, 0x1A52	; 0x801a52 <__clock+0x2>
    6772:	b0 91 53 1a 	lds	r27, 0x1A53	; 0x801a53 <__clock+0x3>
    6776:	80 83       	st	Z, r24
    6778:	91 83       	std	Z+1, r25	; 0x01
    677a:	a2 83       	std	Z+2, r26	; 0x02
    677c:	b3 83       	std	Z+3, r27	; 0x03
    ts->tv_nsec = __clock.tv_nsec;
    677e:	80 91 54 1a 	lds	r24, 0x1A54	; 0x801a54 <__clock+0x4>
    6782:	90 91 55 1a 	lds	r25, 0x1A55	; 0x801a55 <__clock+0x5>
    6786:	a0 91 56 1a 	lds	r26, 0x1A56	; 0x801a56 <__clock+0x6>
    678a:	b0 91 57 1a 	lds	r27, 0x1A57	; 0x801a57 <__clock+0x7>
    678e:	84 83       	std	Z+4, r24	; 0x04
    6790:	95 83       	std	Z+5, r25	; 0x05
    6792:	a6 83       	std	Z+6, r26	; 0x06
    6794:	b7 83       	std	Z+7, r27	; 0x07

    count2 = TCNT1;
    6796:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    679a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    if( TIFR1 & (1<<OCF1A) )
    679e:	b1 9b       	sbis	0x16, 1	; 22
    67a0:	03 c0       	rjmp	.+6      	; 0x67a8 <clock_gettime+0x56>
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    67a2:	c0 e0       	ldi	r28, 0x00	; 0
    67a4:	d0 e0       	ldi	r29, 0x00	; 0
    67a6:	3f c0       	rjmp	.+126    	; 0x6826 <clock_gettime+0xd4>
    count2 = TCNT1;

    if( TIFR1 & (1<<OCF1A) )
        pendingf = 1;

    if (count2 < count1)
    67a8:	82 17       	cp	r24, r18
    67aa:	93 07       	cpc	r25, r19
    67ac:	d0 f1       	brcs	.+116    	; 0x6822 <clock_gettime+0xd0>
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    67ae:	c0 e0       	ldi	r28, 0x00	; 0
    67b0:	d0 e0       	ldi	r29, 0x00	; 0
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    67b2:	40 e0       	ldi	r20, 0x00	; 0
    67b4:	50 e0       	ldi	r21, 0x00	; 0
    67b6:	ba 01       	movw	r22, r20
    else
    {
        if( pendingf )
            offset = TIMER1_COUNTS_PER_TIC;       // overflow
    }
    offset += count2;
    67b8:	9a 01       	movw	r18, r20
    67ba:	ab 01       	movw	r20, r22
    67bc:	28 0f       	add	r18, r24
    67be:	39 1f       	adc	r19, r25
    67c0:	41 1d       	adc	r20, r1
    67c2:	51 1d       	adc	r21, r1

// enable interrupts
    sei();
    67c4:	78 94       	sei

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    67c6:	a2 e3       	ldi	r26, 0x32	; 50
    67c8:	b0 e0       	ldi	r27, 0x00	; 0
    67ca:	0e 94 9b e6 	call	0x1cd36	; 0x1cd36 <__muluhisi3>
    67ce:	04 81       	ldd	r16, Z+4	; 0x04
    67d0:	15 81       	ldd	r17, Z+5	; 0x05
    67d2:	26 81       	ldd	r18, Z+6	; 0x06
    67d4:	37 81       	ldd	r19, Z+7	; 0x07
    67d6:	dc 01       	movw	r26, r24
    67d8:	cb 01       	movw	r24, r22
    67da:	80 0f       	add	r24, r16
    67dc:	91 1f       	adc	r25, r17
    67de:	a2 1f       	adc	r26, r18
    67e0:	b3 1f       	adc	r27, r19

    if (ts->tv_nsec >= 1000000000L)
    67e2:	81 15       	cp	r24, r1
    67e4:	2a ec       	ldi	r18, 0xCA	; 202
    67e6:	92 07       	cpc	r25, r18
    67e8:	2a e9       	ldi	r18, 0x9A	; 154
    67ea:	a2 07       	cpc	r26, r18
    67ec:	2b e3       	ldi	r18, 0x3B	; 59
    67ee:	b2 07       	cpc	r27, r18
    67f0:	2c f4       	brge	.+10     	; 0x67fc <clock_gettime+0xaa>
// enable interrupts
    sei();

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    67f2:	84 83       	std	Z+4, r24	; 0x04
    67f4:	95 83       	std	Z+5, r25	; 0x05
    67f6:	a6 83       	std	Z+6, r26	; 0x06
    67f8:	b7 83       	std	Z+7, r27	; 0x07
    67fa:	1a c0       	rjmp	.+52     	; 0x6830 <clock_gettime+0xde>

    if (ts->tv_nsec >= 1000000000L)
    {
        ts->tv_nsec -= 1000000000L;
    67fc:	9a 5c       	subi	r25, 0xCA	; 202
    67fe:	aa 49       	sbci	r26, 0x9A	; 154
    6800:	bb 43       	sbci	r27, 0x3B	; 59
    6802:	84 83       	std	Z+4, r24	; 0x04
    6804:	95 83       	std	Z+5, r25	; 0x05
    6806:	a6 83       	std	Z+6, r26	; 0x06
    6808:	b7 83       	std	Z+7, r27	; 0x07
        ts->tv_sec++;
    680a:	80 81       	ld	r24, Z
    680c:	91 81       	ldd	r25, Z+1	; 0x01
    680e:	a2 81       	ldd	r26, Z+2	; 0x02
    6810:	b3 81       	ldd	r27, Z+3	; 0x03
    6812:	01 96       	adiw	r24, 0x01	; 1
    6814:	a1 1d       	adc	r26, r1
    6816:	b1 1d       	adc	r27, r1
    6818:	80 83       	st	Z, r24
    681a:	91 83       	std	Z+1, r25	; 0x01
    681c:	a2 83       	std	Z+2, r26	; 0x02
    681e:	b3 83       	std	Z+3, r27	; 0x03
    }
    return(errorf);
    6820:	07 c0       	rjmp	.+14     	; 0x6830 <clock_gettime+0xde>

    if (count2 < count1)
    {
///  note: counter2 < count1 implies ISR flag must be set
        if( !pendingf )
            errorf = -1;                          // counter overflow and NO pending is an error!
    6822:	cf ef       	ldi	r28, 0xFF	; 255
    6824:	df ef       	ldi	r29, 0xFF	; 255
        offset = TIMER1_COUNTS_PER_TIC;           // overflow
    6826:	40 e2       	ldi	r20, 0x20	; 32
    6828:	5e e4       	ldi	r21, 0x4E	; 78
    682a:	60 e0       	ldi	r22, 0x00	; 0
    682c:	70 e0       	ldi	r23, 0x00	; 0
    682e:	c4 cf       	rjmp	.-120    	; 0x67b8 <clock_gettime+0x66>
    {
        ts->tv_nsec -= 1000000000L;
        ts->tv_sec++;
    }
    return(errorf);
}
    6830:	ce 01       	movw	r24, r28
    6832:	df 91       	pop	r29
    6834:	cf 91       	pop	r28
    6836:	1f 91       	pop	r17
    6838:	0f 91       	pop	r16
    683a:	08 95       	ret

0000683c <clock_task>:
void disable_timers()
{
    if(timers_configured && timers_enabled)
    {
        disable_system_task();
        timers_enabled = 0;
    683c:	80 91 54 1a 	lds	r24, 0x1A54	; 0x801a54 <__clock+0x4>
    6840:	90 91 55 1a 	lds	r25, 0x1A55	; 0x801a55 <__clock+0x5>
    6844:	a0 91 56 1a 	lds	r26, 0x1A56	; 0x801a56 <__clock+0x6>
    6848:	b0 91 57 1a 	lds	r27, 0x1A57	; 0x801a57 <__clock+0x7>
    684c:	80 5c       	subi	r24, 0xC0	; 192
    684e:	9d 4b       	sbci	r25, 0xBD	; 189
    6850:	a0 4f       	sbci	r26, 0xF0	; 240
    6852:	bf 4f       	sbci	r27, 0xFF	; 255
    6854:	80 93 54 1a 	sts	0x1A54, r24	; 0x801a54 <__clock+0x4>
    6858:	90 93 55 1a 	sts	0x1A55, r25	; 0x801a55 <__clock+0x5>
    685c:	a0 93 56 1a 	sts	0x1A56, r26	; 0x801a56 <__clock+0x6>
    6860:	b0 93 57 1a 	sts	0x1A57, r27	; 0x801a57 <__clock+0x7>
    6864:	80 91 54 1a 	lds	r24, 0x1A54	; 0x801a54 <__clock+0x4>
    6868:	90 91 55 1a 	lds	r25, 0x1A55	; 0x801a55 <__clock+0x5>
    686c:	a0 91 56 1a 	lds	r26, 0x1A56	; 0x801a56 <__clock+0x6>
    6870:	b0 91 57 1a 	lds	r27, 0x1A57	; 0x801a57 <__clock+0x7>
    6874:	81 15       	cp	r24, r1
    6876:	9a 4c       	sbci	r25, 0xCA	; 202
    6878:	aa 49       	sbci	r26, 0x9A	; 154
    687a:	bb 43       	sbci	r27, 0x3B	; 59
    687c:	dc f0       	brlt	.+54     	; 0x68b4 <clock_task+0x78>
    687e:	80 91 50 1a 	lds	r24, 0x1A50	; 0x801a50 <__clock>
    6882:	90 91 51 1a 	lds	r25, 0x1A51	; 0x801a51 <__clock+0x1>
    6886:	a0 91 52 1a 	lds	r26, 0x1A52	; 0x801a52 <__clock+0x2>
    688a:	b0 91 53 1a 	lds	r27, 0x1A53	; 0x801a53 <__clock+0x3>
    688e:	01 96       	adiw	r24, 0x01	; 1
    6890:	a1 1d       	adc	r26, r1
    6892:	b1 1d       	adc	r27, r1
    6894:	80 93 50 1a 	sts	0x1A50, r24	; 0x801a50 <__clock>
    6898:	90 93 51 1a 	sts	0x1A51, r25	; 0x801a51 <__clock+0x1>
    689c:	a0 93 52 1a 	sts	0x1A52, r26	; 0x801a52 <__clock+0x2>
    68a0:	b0 93 53 1a 	sts	0x1A53, r27	; 0x801a53 <__clock+0x3>
    68a4:	10 92 54 1a 	sts	0x1A54, r1	; 0x801a54 <__clock+0x4>
    68a8:	10 92 55 1a 	sts	0x1A55, r1	; 0x801a55 <__clock+0x5>
    68ac:	10 92 56 1a 	sts	0x1A56, r1	; 0x801a56 <__clock+0x6>
    68b0:	10 92 57 1a 	sts	0x1A57, r1	; 0x801a57 <__clock+0x7>
    68b4:	08 95       	ret

000068b6 <clock_settime.part.2>:
    68b6:	fc 01       	movw	r30, r24
    68b8:	84 81       	ldd	r24, Z+4	; 0x04
    68ba:	95 81       	ldd	r25, Z+5	; 0x05
    68bc:	a6 81       	ldd	r26, Z+6	; 0x06
    68be:	b7 81       	ldd	r27, Z+7	; 0x07
    68c0:	80 93 54 1a 	sts	0x1A54, r24	; 0x801a54 <__clock+0x4>
    68c4:	90 93 55 1a 	sts	0x1A55, r25	; 0x801a55 <__clock+0x5>
    68c8:	a0 93 56 1a 	sts	0x1A56, r26	; 0x801a56 <__clock+0x6>
    68cc:	b0 93 57 1a 	sts	0x1A57, r27	; 0x801a57 <__clock+0x7>
    68d0:	80 81       	ld	r24, Z
    68d2:	91 81       	ldd	r25, Z+1	; 0x01
    68d4:	a2 81       	ldd	r26, Z+2	; 0x02
    68d6:	b3 81       	ldd	r27, Z+3	; 0x03
    68d8:	80 93 50 1a 	sts	0x1A50, r24	; 0x801a50 <__clock>
    68dc:	90 93 51 1a 	sts	0x1A51, r25	; 0x801a51 <__clock+0x1>
    68e0:	a0 93 52 1a 	sts	0x1A52, r26	; 0x801a52 <__clock+0x2>
    68e4:	b0 93 53 1a 	sts	0x1A53, r27	; 0x801a53 <__clock+0x3>
    68e8:	80 91 54 1a 	lds	r24, 0x1A54	; 0x801a54 <__clock+0x4>
    68ec:	90 91 55 1a 	lds	r25, 0x1A55	; 0x801a55 <__clock+0x5>
    68f0:	a0 91 56 1a 	lds	r26, 0x1A56	; 0x801a56 <__clock+0x6>
    68f4:	b0 91 57 1a 	lds	r27, 0x1A57	; 0x801a57 <__clock+0x7>
    68f8:	44 81       	ldd	r20, Z+4	; 0x04
    68fa:	55 81       	ldd	r21, Z+5	; 0x05
    68fc:	66 81       	ldd	r22, Z+6	; 0x06
    68fe:	77 81       	ldd	r23, Z+7	; 0x07
    6900:	48 17       	cp	r20, r24
    6902:	59 07       	cpc	r21, r25
    6904:	6a 07       	cpc	r22, r26
    6906:	7b 07       	cpc	r23, r27
    6908:	b9 f6       	brne	.-82     	; 0x68b8 <clock_settime.part.2+0x2>
    690a:	80 91 50 1a 	lds	r24, 0x1A50	; 0x801a50 <__clock>
    690e:	90 91 51 1a 	lds	r25, 0x1A51	; 0x801a51 <__clock+0x1>
    6912:	a0 91 52 1a 	lds	r26, 0x1A52	; 0x801a52 <__clock+0x2>
    6916:	b0 91 53 1a 	lds	r27, 0x1A53	; 0x801a53 <__clock+0x3>
    691a:	40 81       	ld	r20, Z
    691c:	51 81       	ldd	r21, Z+1	; 0x01
    691e:	62 81       	ldd	r22, Z+2	; 0x02
    6920:	73 81       	ldd	r23, Z+3	; 0x03
    6922:	48 17       	cp	r20, r24
    6924:	59 07       	cpc	r21, r25
    6926:	6a 07       	cpc	r22, r26
    6928:	7b 07       	cpc	r23, r27
    692a:	31 f6       	brne	.-116    	; 0x68b8 <clock_settime.part.2+0x2>
    692c:	80 e0       	ldi	r24, 0x00	; 0
    692e:	90 e0       	ldi	r25, 0x00	; 0
    6930:	08 95       	ret

00006932 <set_timers>:
    6932:	00 d0       	rcall	.+0      	; 0x6934 <set_timers+0x2>
    6934:	1f 92       	push	r1
    6936:	00 97       	sbiw	r24, 0x00	; 0
    6938:	79 f1       	breq	.+94     	; 0x6998 <set_timers+0x66>
    693a:	e8 e5       	ldi	r30, 0x58	; 88
    693c:	fa e1       	ldi	r31, 0x1A	; 26
    693e:	4f ef       	ldi	r20, 0xFF	; 255
    6940:	5f ef       	ldi	r21, 0xFF	; 255
    6942:	20 e0       	ldi	r18, 0x00	; 0
    6944:	30 e0       	ldi	r19, 0x00	; 0
    6946:	60 81       	ld	r22, Z
    6948:	71 81       	ldd	r23, Z+1	; 0x01
    694a:	86 17       	cp	r24, r22
    694c:	97 07       	cpc	r25, r23
    694e:	79 f0       	breq	.+30     	; 0x696e <set_timers+0x3c>
    6950:	67 2b       	or	r22, r23
    6952:	71 f4       	brne	.+28     	; 0x6970 <set_timers+0x3e>
    6954:	f9 01       	movw	r30, r18
    6956:	ee 0f       	add	r30, r30
    6958:	ff 1f       	adc	r31, r31
    695a:	e2 0f       	add	r30, r18
    695c:	f3 1f       	adc	r31, r19
    695e:	e8 5a       	subi	r30, 0xA8	; 168
    6960:	f5 4e       	sbci	r31, 0xE5	; 229
    6962:	91 83       	std	Z+1, r25	; 0x01
    6964:	80 83       	st	Z, r24
    6966:	81 e0       	ldi	r24, 0x01	; 1
    6968:	82 83       	std	Z+2, r24	; 0x02
    696a:	c9 01       	movw	r24, r18
    696c:	19 c0       	rjmp	.+50     	; 0x69a0 <set_timers+0x6e>
    696e:	a9 01       	movw	r20, r18
    6970:	2f 5f       	subi	r18, 0xFF	; 255
    6972:	3f 4f       	sbci	r19, 0xFF	; 255
    6974:	33 96       	adiw	r30, 0x03	; 3
    6976:	28 30       	cpi	r18, 0x08	; 8
    6978:	31 05       	cpc	r19, r1
    697a:	29 f7       	brne	.-54     	; 0x6946 <set_timers+0x14>
    697c:	4f 3f       	cpi	r20, 0xFF	; 255
    697e:	8f ef       	ldi	r24, 0xFF	; 255
    6980:	58 07       	cpc	r21, r24
    6982:	69 f4       	brne	.+26     	; 0x699e <set_timers+0x6c>
    6984:	8d ec       	ldi	r24, 0xCD	; 205
    6986:	95 e0       	ldi	r25, 0x05	; 5
    6988:	a0 e0       	ldi	r26, 0x00	; 0
    698a:	ed b7       	in	r30, 0x3d	; 61
    698c:	fe b7       	in	r31, 0x3e	; 62
    698e:	81 83       	std	Z+1, r24	; 0x01
    6990:	92 83       	std	Z+2, r25	; 0x02
    6992:	a3 83       	std	Z+3, r26	; 0x03
    6994:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    6998:	8f ef       	ldi	r24, 0xFF	; 255
    699a:	9f ef       	ldi	r25, 0xFF	; 255
    699c:	01 c0       	rjmp	.+2      	; 0x69a0 <set_timers+0x6e>
    699e:	ca 01       	movw	r24, r20
    69a0:	0f 90       	pop	r0
    69a2:	0f 90       	pop	r0
    69a4:	0f 90       	pop	r0
    69a6:	08 95       	ret

000069a8 <delete_all_timers>:
    69a8:	e8 e5       	ldi	r30, 0x58	; 88
    69aa:	fa e1       	ldi	r31, 0x1A	; 26
    69ac:	12 82       	std	Z+2, r1	; 0x02
    69ae:	11 82       	std	Z+1, r1	; 0x01
    69b0:	10 82       	st	Z, r1
    69b2:	33 96       	adiw	r30, 0x03	; 3
    69b4:	8a e1       	ldi	r24, 0x1A	; 26
    69b6:	e0 37       	cpi	r30, 0x70	; 112
    69b8:	f8 07       	cpc	r31, r24
    69ba:	c1 f7       	brne	.-16     	; 0x69ac <delete_all_timers+0x4>
    69bc:	08 95       	ret

000069be <subtract_timespec>:
    69be:	0f 93       	push	r16
    69c0:	1f 93       	push	r17
    69c2:	cf 93       	push	r28
    69c4:	df 93       	push	r29
    69c6:	fc 01       	movw	r30, r24
    69c8:	84 81       	ldd	r24, Z+4	; 0x04
    69ca:	95 81       	ldd	r25, Z+5	; 0x05
    69cc:	a6 81       	ldd	r26, Z+6	; 0x06
    69ce:	b7 81       	ldd	r27, Z+7	; 0x07
    69d0:	eb 01       	movw	r28, r22
    69d2:	0c 81       	ldd	r16, Y+4	; 0x04
    69d4:	1d 81       	ldd	r17, Y+5	; 0x05
    69d6:	2e 81       	ldd	r18, Y+6	; 0x06
    69d8:	3f 81       	ldd	r19, Y+7	; 0x07
    69da:	80 1b       	sub	r24, r16
    69dc:	91 0b       	sbc	r25, r17
    69de:	a2 0b       	sbc	r26, r18
    69e0:	b3 0b       	sbc	r27, r19
    69e2:	b7 fd       	sbrc	r27, 7
    69e4:	05 c0       	rjmp	.+10     	; 0x69f0 <subtract_timespec+0x32>
    69e6:	84 83       	std	Z+4, r24	; 0x04
    69e8:	95 83       	std	Z+5, r25	; 0x05
    69ea:	a6 83       	std	Z+6, r26	; 0x06
    69ec:	b7 83       	std	Z+7, r27	; 0x07
    69ee:	12 c0       	rjmp	.+36     	; 0x6a14 <subtract_timespec+0x56>
    69f0:	96 53       	subi	r25, 0x36	; 54
    69f2:	a5 46       	sbci	r26, 0x65	; 101
    69f4:	b4 4c       	sbci	r27, 0xC4	; 196
    69f6:	84 83       	std	Z+4, r24	; 0x04
    69f8:	95 83       	std	Z+5, r25	; 0x05
    69fa:	a6 83       	std	Z+6, r26	; 0x06
    69fc:	b7 83       	std	Z+7, r27	; 0x07
    69fe:	80 81       	ld	r24, Z
    6a00:	91 81       	ldd	r25, Z+1	; 0x01
    6a02:	a2 81       	ldd	r26, Z+2	; 0x02
    6a04:	b3 81       	ldd	r27, Z+3	; 0x03
    6a06:	01 97       	sbiw	r24, 0x01	; 1
    6a08:	a1 09       	sbc	r26, r1
    6a0a:	b1 09       	sbc	r27, r1
    6a0c:	80 83       	st	Z, r24
    6a0e:	91 83       	std	Z+1, r25	; 0x01
    6a10:	a2 83       	std	Z+2, r26	; 0x02
    6a12:	b3 83       	std	Z+3, r27	; 0x03
    6a14:	80 81       	ld	r24, Z
    6a16:	91 81       	ldd	r25, Z+1	; 0x01
    6a18:	a2 81       	ldd	r26, Z+2	; 0x02
    6a1a:	b3 81       	ldd	r27, Z+3	; 0x03
    6a1c:	eb 01       	movw	r28, r22
    6a1e:	48 81       	ld	r20, Y
    6a20:	59 81       	ldd	r21, Y+1	; 0x01
    6a22:	6a 81       	ldd	r22, Y+2	; 0x02
    6a24:	7b 81       	ldd	r23, Y+3	; 0x03
    6a26:	84 1b       	sub	r24, r20
    6a28:	95 0b       	sbc	r25, r21
    6a2a:	a6 0b       	sbc	r26, r22
    6a2c:	b7 0b       	sbc	r27, r23
    6a2e:	80 83       	st	Z, r24
    6a30:	91 83       	std	Z+1, r25	; 0x01
    6a32:	a2 83       	std	Z+2, r26	; 0x02
    6a34:	b3 83       	std	Z+3, r27	; 0x03
    6a36:	df 91       	pop	r29
    6a38:	cf 91       	pop	r28
    6a3a:	1f 91       	pop	r17
    6a3c:	0f 91       	pop	r16
    6a3e:	08 95       	ret

00006a40 <ts_to_str>:
    6a40:	ad b7       	in	r26, 0x3d	; 61
    6a42:	be b7       	in	r27, 0x3e	; 62
    6a44:	1f 97       	sbiw	r26, 0x0f	; 15
    6a46:	0f b6       	in	r0, 0x3f	; 63
    6a48:	f8 94       	cli
    6a4a:	be bf       	out	0x3e, r27	; 62
    6a4c:	0f be       	out	0x3f, r0	; 63
    6a4e:	ad bf       	out	0x3d, r26	; 61
    6a50:	fc 01       	movw	r30, r24
    6a52:	44 81       	ldd	r20, Z+4	; 0x04
    6a54:	55 81       	ldd	r21, Z+5	; 0x05
    6a56:	66 81       	ldd	r22, Z+6	; 0x06
    6a58:	77 81       	ldd	r23, Z+7	; 0x07
    6a5a:	ed b7       	in	r30, 0x3d	; 61
    6a5c:	fe b7       	in	r31, 0x3e	; 62
    6a5e:	44 87       	std	Z+12, r20	; 0x0c
    6a60:	55 87       	std	Z+13, r21	; 0x0d
    6a62:	66 87       	std	Z+14, r22	; 0x0e
    6a64:	77 87       	std	Z+15, r23	; 0x0f
    6a66:	fc 01       	movw	r30, r24
    6a68:	80 81       	ld	r24, Z
    6a6a:	91 81       	ldd	r25, Z+1	; 0x01
    6a6c:	a2 81       	ldd	r26, Z+2	; 0x02
    6a6e:	b3 81       	ldd	r27, Z+3	; 0x03
    6a70:	ed b7       	in	r30, 0x3d	; 61
    6a72:	fe b7       	in	r31, 0x3e	; 62
    6a74:	80 87       	std	Z+8, r24	; 0x08
    6a76:	91 87       	std	Z+9, r25	; 0x09
    6a78:	a2 87       	std	Z+10, r26	; 0x0a
    6a7a:	b3 87       	std	Z+11, r27	; 0x0b
    6a7c:	83 ec       	ldi	r24, 0xC3	; 195
    6a7e:	95 e0       	ldi	r25, 0x05	; 5
    6a80:	a0 e0       	ldi	r26, 0x00	; 0
    6a82:	85 83       	std	Z+5, r24	; 0x05
    6a84:	96 83       	std	Z+6, r25	; 0x06
    6a86:	a7 83       	std	Z+7, r26	; 0x07
    6a88:	8f e1       	ldi	r24, 0x1F	; 31
    6a8a:	90 e0       	ldi	r25, 0x00	; 0
    6a8c:	94 83       	std	Z+4, r25	; 0x04
    6a8e:	83 83       	std	Z+3, r24	; 0x03
    6a90:	84 e8       	ldi	r24, 0x84	; 132
    6a92:	97 e1       	ldi	r25, 0x17	; 23
    6a94:	92 83       	std	Z+2, r25	; 0x02
    6a96:	81 83       	std	Z+1, r24	; 0x01
    6a98:	0e 94 c3 46 	call	0x8d86	; 0x8d86 <snprintf_P>
    6a9c:	84 e8       	ldi	r24, 0x84	; 132
    6a9e:	97 e1       	ldi	r25, 0x17	; 23
    6aa0:	ad b7       	in	r26, 0x3d	; 61
    6aa2:	be b7       	in	r27, 0x3e	; 62
    6aa4:	1f 96       	adiw	r26, 0x0f	; 15
    6aa6:	0f b6       	in	r0, 0x3f	; 63
    6aa8:	f8 94       	cli
    6aaa:	be bf       	out	0x3e, r27	; 62
    6aac:	0f be       	out	0x3f, r0	; 63
    6aae:	ad bf       	out	0x3d, r26	; 61
    6ab0:	08 95       	ret

00006ab2 <clock_elapsed_begin>:
    6ab2:	6c e7       	ldi	r22, 0x7C	; 124
    6ab4:	77 e1       	ldi	r23, 0x17	; 23
    6ab6:	80 e0       	ldi	r24, 0x00	; 0
    6ab8:	90 e0       	ldi	r25, 0x00	; 0
    6aba:	4b ce       	rjmp	.-874    	; 0x6752 <clock_gettime>
    6abc:	08 95       	ret

00006abe <clock_elapsed_end>:
    6abe:	af e0       	ldi	r26, 0x0F	; 15
    6ac0:	b0 e0       	ldi	r27, 0x00	; 0
    6ac2:	e5 e6       	ldi	r30, 0x65	; 101
    6ac4:	f5 e3       	ldi	r31, 0x35	; 53
    6ac6:	0c 94 c9 e6 	jmp	0x1cd92	; 0x1cd92 <__prologue_saves__+0x1c>
    6aca:	8c 01       	movw	r16, r24
    6acc:	be 01       	movw	r22, r28
    6ace:	68 5f       	subi	r22, 0xF8	; 248
    6ad0:	7f 4f       	sbci	r23, 0xFF	; 255
    6ad2:	80 e0       	ldi	r24, 0x00	; 0
    6ad4:	90 e0       	ldi	r25, 0x00	; 0
    6ad6:	3d de       	rcall	.-902    	; 0x6752 <clock_gettime>
    6ad8:	6c e7       	ldi	r22, 0x7C	; 124
    6ada:	77 e1       	ldi	r23, 0x17	; 23
    6adc:	ce 01       	movw	r24, r28
    6ade:	08 96       	adiw	r24, 0x08	; 8
    6ae0:	6e df       	rcall	.-292    	; 0x69be <subtract_timespec>
    6ae2:	01 15       	cp	r16, r1
    6ae4:	11 05       	cpc	r17, r1
    6ae6:	b1 f0       	breq	.+44     	; 0x6b14 <clock_elapsed_end+0x56>
    6ae8:	f8 01       	movw	r30, r16
    6aea:	80 81       	ld	r24, Z
    6aec:	88 23       	and	r24, r24
    6aee:	91 f0       	breq	.+36     	; 0x6b14 <clock_elapsed_end+0x56>
    6af0:	ce 01       	movw	r24, r28
    6af2:	08 96       	adiw	r24, 0x08	; 8
    6af4:	a5 df       	rcall	.-182    	; 0x6a40 <ts_to_str>
    6af6:	ed b7       	in	r30, 0x3d	; 61
    6af8:	fe b7       	in	r31, 0x3e	; 62
    6afa:	97 83       	std	Z+7, r25	; 0x07
    6afc:	86 83       	std	Z+6, r24	; 0x06
    6afe:	15 83       	std	Z+5, r17	; 0x05
    6b00:	04 83       	std	Z+4, r16	; 0x04
    6b02:	85 eb       	ldi	r24, 0xB5	; 181
    6b04:	95 e0       	ldi	r25, 0x05	; 5
    6b06:	a0 e0       	ldi	r26, 0x00	; 0
    6b08:	81 83       	std	Z+1, r24	; 0x01
    6b0a:	92 83       	std	Z+2, r25	; 0x02
    6b0c:	a3 83       	std	Z+3, r26	; 0x03
    6b0e:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    6b12:	0f c0       	rjmp	.+30     	; 0x6b32 <clock_elapsed_end+0x74>
    6b14:	ce 01       	movw	r24, r28
    6b16:	08 96       	adiw	r24, 0x08	; 8
    6b18:	93 df       	rcall	.-218    	; 0x6a40 <ts_to_str>
    6b1a:	ed b7       	in	r30, 0x3d	; 61
    6b1c:	fe b7       	in	r31, 0x3e	; 62
    6b1e:	95 83       	std	Z+5, r25	; 0x05
    6b20:	84 83       	std	Z+4, r24	; 0x04
    6b22:	8a ea       	ldi	r24, 0xAA	; 170
    6b24:	95 e0       	ldi	r25, 0x05	; 5
    6b26:	a0 e0       	ldi	r26, 0x00	; 0
    6b28:	81 83       	std	Z+1, r24	; 0x01
    6b2a:	92 83       	std	Z+2, r25	; 0x02
    6b2c:	a3 83       	std	Z+3, r26	; 0x03
    6b2e:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    6b32:	2f 96       	adiw	r28, 0x0f	; 15
    6b34:	e4 e0       	ldi	r30, 0x04	; 4
    6b36:	0c 94 e5 e6 	jmp	0x1cdca	; 0x1cdca <__epilogue_restores__+0x1c>

00006b3a <clock_clear>:
    6b3a:	a8 e0       	ldi	r26, 0x08	; 8
    6b3c:	b0 e0       	ldi	r27, 0x00	; 0
    6b3e:	e3 ea       	ldi	r30, 0xA3	; 163
    6b40:	f5 e3       	ldi	r31, 0x35	; 53
    6b42:	0c 94 cb e6 	jmp	0x1cd96	; 0x1cd96 <__prologue_saves__+0x20>
    6b46:	1d 82       	std	Y+5, r1	; 0x05
    6b48:	1e 82       	std	Y+6, r1	; 0x06
    6b4a:	1f 82       	std	Y+7, r1	; 0x07
    6b4c:	18 86       	std	Y+8, r1	; 0x08
    6b4e:	19 82       	std	Y+1, r1	; 0x01
    6b50:	1a 82       	std	Y+2, r1	; 0x02
    6b52:	1b 82       	std	Y+3, r1	; 0x03
    6b54:	1c 82       	std	Y+4, r1	; 0x04
    6b56:	ce 01       	movw	r24, r28
    6b58:	01 96       	adiw	r24, 0x01	; 1
    6b5a:	ad de       	rcall	.-678    	; 0x68b6 <clock_settime.part.2>
    6b5c:	e0 e7       	ldi	r30, 0x70	; 112
    6b5e:	fa e1       	ldi	r31, 0x1A	; 26
    6b60:	11 82       	std	Z+1, r1	; 0x01
    6b62:	10 82       	st	Z, r1
    6b64:	13 82       	std	Z+3, r1	; 0x03
    6b66:	12 82       	std	Z+2, r1	; 0x02
    6b68:	28 96       	adiw	r28, 0x08	; 8
    6b6a:	e2 e0       	ldi	r30, 0x02	; 2
    6b6c:	0c 94 e7 e6 	jmp	0x1cdce	; 0x1cdce <__epilogue_restores__+0x20>

00006b70 <enable_timers>:
///
/// @return  void
MEMSPACE
void enable_timers()
{
    if(timers_configured && !timers_enabled)
    6b70:	80 91 a4 17 	lds	r24, 0x17A4	; 0x8017a4 <timers_configured>
    6b74:	90 91 a5 17 	lds	r25, 0x17A5	; 0x8017a5 <timers_configured+0x1>
    6b78:	89 2b       	or	r24, r25
    6b7a:	69 f0       	breq	.+26     	; 0x6b96 <enable_timers+0x26>
    6b7c:	80 91 a6 17 	lds	r24, 0x17A6	; 0x8017a6 <timers_enabled>
    6b80:	90 91 a7 17 	lds	r25, 0x17A7	; 0x8017a7 <timers_enabled+0x1>
    6b84:	89 2b       	or	r24, r25
    6b86:	39 f4       	brne	.+14     	; 0x6b96 <enable_timers+0x26>
    {
        enable_system_task();
    6b88:	a8 dd       	rcall	.-1200   	; 0x66da <enable_system_task>
        timers_enabled = 1;
    6b8a:	81 e0       	ldi	r24, 0x01	; 1
    6b8c:	90 e0       	ldi	r25, 0x00	; 0
    6b8e:	90 93 a7 17 	sts	0x17A7, r25	; 0x8017a7 <timers_enabled+0x1>
    6b92:	80 93 a6 17 	sts	0x17A6, r24	; 0x8017a6 <timers_enabled>
    6b96:	08 95       	ret

00006b98 <execute_timers>:
/// @brief  Execute all user timers at SYSTEM_HZ rate.
///  Called by system task
///
/// @return  void
void execute_timers()
{
    6b98:	cf 93       	push	r28
    6b9a:	df 93       	push	r29
    6b9c:	c8 e5       	ldi	r28, 0x58	; 88
    6b9e:	da e1       	ldi	r29, 0x1A	; 26
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
    6ba0:	8a 81       	ldd	r24, Y+2	; 0x02
    6ba2:	88 23       	and	r24, r24
    6ba4:	29 f0       	breq	.+10     	; 0x6bb0 <execute_timers+0x18>
    6ba6:	e8 81       	ld	r30, Y
    6ba8:	f9 81       	ldd	r31, Y+1	; 0x01
    6baa:	30 97       	sbiw	r30, 0x00	; 0
    6bac:	09 f0       	breq	.+2      	; 0x6bb0 <execute_timers+0x18>
            (*timer_irq[i].user_timer_handler)();
    6bae:	09 95       	icall
    6bb0:	23 96       	adiw	r28, 0x03	; 3
/// @return  void
void execute_timers()
{
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    6bb2:	8a e1       	ldi	r24, 0x1A	; 26
    6bb4:	c0 37       	cpi	r28, 0x70	; 112
    6bb6:	d8 07       	cpc	r29, r24
    6bb8:	99 f7       	brne	.-26     	; 0x6ba0 <execute_timers+0x8>
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
            (*timer_irq[i].user_timer_handler)();
    }
}
    6bba:	df 91       	pop	r29
    6bbc:	cf 91       	pop	r28
    6bbe:	08 95       	ret

00006bc0 <init_timers>:
/// @see: timer_hal.c for hardware dependent interface
//
/// @return  void
MEMSPACE
void init_timers()
{
    6bc0:	00 d0       	rcall	.+0      	; 0x6bc2 <init_timers+0x2>
    6bc2:	1f 92       	push	r1
    printf("Timers init called\n");
    6bc4:	86 e9       	ldi	r24, 0x96	; 150
    6bc6:	95 e0       	ldi	r25, 0x05	; 5
    6bc8:	a0 e0       	ldi	r26, 0x00	; 0
    6bca:	ed b7       	in	r30, 0x3d	; 61
    6bcc:	fe b7       	in	r31, 0x3e	; 62
    6bce:	81 83       	std	Z+1, r24	; 0x01
    6bd0:	92 83       	std	Z+2, r25	; 0x02
    6bd2:	a3 83       	std	Z+3, r26	; 0x03
    6bd4:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>

    if(!timers_configured)
    6bd8:	80 91 a4 17 	lds	r24, 0x17A4	; 0x8017a4 <timers_configured>
    6bdc:	90 91 a5 17 	lds	r25, 0x17A5	; 0x8017a5 <timers_configured+0x1>
    6be0:	89 2b       	or	r24, r25
    6be2:	a9 f4       	brne	.+42     	; 0x6c0e <init_timers+0x4e>
    {
        install_timers_isr();
    6be4:	7c dd       	rcall	.-1288   	; 0x66de <install_timers_isr>
        timers_configured = 1;
    6be6:	81 e0       	ldi	r24, 0x01	; 1
    6be8:	90 e0       	ldi	r25, 0x00	; 0
    6bea:	90 93 a5 17 	sts	0x17A5, r25	; 0x8017a5 <timers_configured+0x1>
    6bee:	80 93 a4 17 	sts	0x17A4, r24	; 0x8017a4 <timers_configured>
        timers_enabled = 0;
    6bf2:	10 92 a7 17 	sts	0x17A7, r1	; 0x8017a7 <timers_enabled+0x1>
    6bf6:	10 92 a6 17 	sts	0x17A6, r1	; 0x8017a6 <timers_enabled>
        printf("Timers configured\n");
    6bfa:	83 e8       	ldi	r24, 0x83	; 131
    6bfc:	95 e0       	ldi	r25, 0x05	; 5
    6bfe:	a0 e0       	ldi	r26, 0x00	; 0
    6c00:	ed b7       	in	r30, 0x3d	; 61
    6c02:	fe b7       	in	r31, 0x3e	; 62
    6c04:	81 83       	std	Z+1, r24	; 0x01
    6c06:	92 83       	std	Z+2, r25	; 0x02
    6c08:	a3 83       	std	Z+3, r26	; 0x03
    6c0a:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    }

    delete_all_timers();

    clock_clear();
    6c0e:	cc de       	rcall	.-616    	; 0x69a8 <delete_all_timers>
    6c10:	94 df       	rcall	.-216    	; 0x6b3a <clock_clear>
    printf("Clock Init\n");
    6c12:	87 e7       	ldi	r24, 0x77	; 119
    6c14:	95 e0       	ldi	r25, 0x05	; 5
    6c16:	a0 e0       	ldi	r26, 0x00	; 0
    6c18:	ed b7       	in	r30, 0x3d	; 61
    6c1a:	fe b7       	in	r31, 0x3e	; 62
    6c1c:	81 83       	std	Z+1, r24	; 0x01
    6c1e:	92 83       	std	Z+2, r25	; 0x02
    6c20:	a3 83       	std	Z+3, r26	; 0x03
    6c22:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>

///  See time.c
    if(set_timers(clock_task,1) == -1)
    6c26:	61 e0       	ldi	r22, 0x01	; 1
    6c28:	70 e0       	ldi	r23, 0x00	; 0
    6c2a:	8e e1       	ldi	r24, 0x1E	; 30
    6c2c:	94 e3       	ldi	r25, 0x34	; 52
    6c2e:	81 de       	rcall	.-766    	; 0x6932 <set_timers>
    6c30:	01 96       	adiw	r24, 0x01	; 1
    6c32:	51 f4       	brne	.+20     	; 0x6c48 <init_timers+0x88>
        printf("Clock task init failed\n");
    6c34:	8f e5       	ldi	r24, 0x5F	; 95
    6c36:	95 e0       	ldi	r25, 0x05	; 5
    6c38:	a0 e0       	ldi	r26, 0x00	; 0
    6c3a:	ed b7       	in	r30, 0x3d	; 61
    6c3c:	fe b7       	in	r31, 0x3e	; 62
    6c3e:	81 83       	std	Z+1, r24	; 0x01
    6c40:	92 83       	std	Z+2, r25	; 0x02
    6c42:	a3 83       	std	Z+3, r26	; 0x03
    6c44:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    printf("Clock Installed\n");
    6c48:	8e e4       	ldi	r24, 0x4E	; 78
    6c4a:	95 e0       	ldi	r25, 0x05	; 5
    6c4c:	a0 e0       	ldi	r26, 0x00	; 0
    6c4e:	ed b7       	in	r30, 0x3d	; 61
    6c50:	fe b7       	in	r31, 0x3e	; 62
    6c52:	81 83       	std	Z+1, r24	; 0x01
    6c54:	92 83       	std	Z+2, r25	; 0x02
    6c56:	a3 83       	std	Z+3, r26	; 0x03
    6c58:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>

    enable_timers();
    6c5c:	89 df       	rcall	.-238    	; 0x6b70 <enable_timers>

    printf("Timers enabled\n");
    6c5e:	8e e3       	ldi	r24, 0x3E	; 62
    6c60:	95 e0       	ldi	r25, 0x05	; 5
    6c62:	a0 e0       	ldi	r26, 0x00	; 0
    6c64:	ed b7       	in	r30, 0x3d	; 61
    6c66:	fe b7       	in	r31, 0x3e	; 62
    6c68:	81 83       	std	Z+1, r24	; 0x01
    6c6a:	92 83       	std	Z+2, r25	; 0x02
    6c6c:	a3 83       	std	Z+3, r26	; 0x03
    6c6e:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
}
    6c72:	0f 90       	pop	r0
    6c74:	0f 90       	pop	r0
    6c76:	0f 90       	pop	r0
    6c78:	08 95       	ret

00006c7a <clock_getres>:
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_getres(clockid_t clk_id  __attribute__((unused)), struct timespec *res)
{
    if(clk_id)
    6c7a:	89 2b       	or	r24, r25
    6c7c:	81 f4       	brne	.+32     	; 0x6c9e <clock_getres+0x24>
        return(-1);
    res->tv_sec = 0;
    6c7e:	fb 01       	movw	r30, r22
    6c80:	10 82       	st	Z, r1
    6c82:	11 82       	std	Z+1, r1	; 0x01
    6c84:	12 82       	std	Z+2, r1	; 0x02
    6c86:	13 82       	std	Z+3, r1	; 0x03
    res->tv_nsec = SYSTEM_TASK_TIC_NS;
    6c88:	80 e4       	ldi	r24, 0x40	; 64
    6c8a:	92 e4       	ldi	r25, 0x42	; 66
    6c8c:	af e0       	ldi	r26, 0x0F	; 15
    6c8e:	b0 e0       	ldi	r27, 0x00	; 0
    6c90:	84 83       	std	Z+4, r24	; 0x04
    6c92:	95 83       	std	Z+5, r25	; 0x05
    6c94:	a6 83       	std	Z+6, r26	; 0x06
    6c96:	b7 83       	std	Z+7, r27	; 0x07
    return(0);
    6c98:	80 e0       	ldi	r24, 0x00	; 0
    6c9a:	90 e0       	ldi	r25, 0x00	; 0
    6c9c:	08 95       	ret
/// @return -1 on error.
MEMSPACE
int clock_getres(clockid_t clk_id  __attribute__((unused)), struct timespec *res)
{
    if(clk_id)
        return(-1);
    6c9e:	8f ef       	ldi	r24, 0xFF	; 255
    6ca0:	9f ef       	ldi	r25, 0xFF	; 255
    res->tv_sec = 0;
    res->tv_nsec = SYSTEM_TASK_TIC_NS;
    return(0);
}
    6ca2:	08 95       	ret

00006ca4 <clock_settime>:
///
/// @return 0.
MEMSPACE
int clock_settime(clockid_t clk_id  __attribute__((unused)), const struct timespec *ts)
{
    if(clk_id)
    6ca4:	89 2b       	or	r24, r25
    6ca6:	19 f4       	brne	.+6      	; 0x6cae <clock_settime+0xa>
    6ca8:	cb 01       	movw	r24, r22
    6caa:	05 ce       	rjmp	.-1014   	; 0x68b6 <clock_settime.part.2>
    6cac:	08 95       	ret
        return(-1);
    6cae:	8f ef       	ldi	r24, 0xFF	; 255
    6cb0:	9f ef       	ldi	r25, 0xFF	; 255
            continue;
        break;
    }

    return(0);
}
    6cb2:	08 95       	ret

00006cb4 <IS_Leap>:
void print_dst_gmt()
{
    printf("DST START       GMT: %s\n", ctime_gm(&dst.start));
    printf("DST END         GMT: %s\n", ctime_gm(&dst.end));

}
    6cb4:	9c 01       	movw	r18, r24
    6cb6:	83 70       	andi	r24, 0x03	; 3
    6cb8:	99 27       	eor	r25, r25
    6cba:	00 97       	sbiw	r24, 0x00	; 0
    6cbc:	69 f4       	brne	.+26     	; 0x6cd8 <IS_Leap+0x24>
    6cbe:	2c 36       	cpi	r18, 0x6C	; 108
    6cc0:	47 e0       	ldi	r20, 0x07	; 7
    6cc2:	34 07       	cpc	r19, r20
    6cc4:	59 f0       	breq	.+22     	; 0x6cdc <IS_Leap+0x28>
    6cc6:	51 e0       	ldi	r21, 0x01	; 1
    6cc8:	40 e0       	ldi	r20, 0x00	; 0
    6cca:	24 33       	cpi	r18, 0x34	; 52
    6ccc:	38 40       	sbci	r19, 0x08	; 8
    6cce:	09 f4       	brne	.+2      	; 0x6cd2 <IS_Leap+0x1e>
    6cd0:	50 e0       	ldi	r21, 0x00	; 0
    6cd2:	85 2f       	mov	r24, r21
    6cd4:	94 2f       	mov	r25, r20
    6cd6:	08 95       	ret
    6cd8:	80 e0       	ldi	r24, 0x00	; 0
    6cda:	90 e0       	ldi	r25, 0x00	; 0
    6cdc:	08 95       	ret

00006cde <tm_mon_to_ascii>:
    6cde:	8c 30       	cpi	r24, 0x0C	; 12
    6ce0:	91 05       	cpc	r25, r1
    6ce2:	40 f4       	brcc	.+16     	; 0x6cf4 <tm_mon_to_ascii+0x16>
    6ce4:	88 0f       	add	r24, r24
    6ce6:	99 1f       	adc	r25, r25
    6ce8:	fc 01       	movw	r30, r24
    6cea:	e5 5f       	subi	r30, 0xF5	; 245
    6cec:	fe 4f       	sbci	r31, 0xFE	; 254
    6cee:	80 81       	ld	r24, Z
    6cf0:	91 81       	ldd	r25, Z+1	; 0x01
    6cf2:	08 95       	ret
    6cf4:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <__Month+0x18>
    6cf8:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <__Month+0x19>
    6cfc:	08 95       	ret

00006cfe <Days_Per_Month>:
    6cfe:	cf 93       	push	r28
    6d00:	df 93       	push	r29
    6d02:	8c 30       	cpi	r24, 0x0C	; 12
    6d04:	91 05       	cpc	r25, r1
    6d06:	24 f0       	brlt	.+8      	; 0x6d10 <Days_Per_Month+0x12>
    6d08:	6f 5f       	subi	r22, 0xFF	; 255
    6d0a:	7f 4f       	sbci	r23, 0xFF	; 255
    6d0c:	0c 97       	sbiw	r24, 0x0c	; 12
    6d0e:	f9 cf       	rjmp	.-14     	; 0x6d02 <Days_Per_Month+0x4>
    6d10:	97 ff       	sbrs	r25, 7
    6d12:	04 c0       	rjmp	.+8      	; 0x6d1c <Days_Per_Month+0x1e>
    6d14:	61 50       	subi	r22, 0x01	; 1
    6d16:	71 09       	sbc	r23, r1
    6d18:	0c 96       	adiw	r24, 0x0c	; 12
    6d1a:	fa cf       	rjmp	.-12     	; 0x6d10 <Days_Per_Month+0x12>
    6d1c:	fc 01       	movw	r30, r24
    6d1e:	ee 0f       	add	r30, r30
    6d20:	ff 1f       	adc	r31, r31
    6d22:	e8 57       	subi	r30, 0x78	; 120
    6d24:	fc 4f       	sbci	r31, 0xFC	; 252
    6d26:	c0 81       	ld	r28, Z
    6d28:	d1 81       	ldd	r29, Z+1	; 0x01
    6d2a:	01 97       	sbiw	r24, 0x01	; 1
    6d2c:	29 f4       	brne	.+10     	; 0x6d38 <Days_Per_Month+0x3a>
    6d2e:	cb 01       	movw	r24, r22
    6d30:	c1 df       	rcall	.-126    	; 0x6cb4 <IS_Leap>
    6d32:	89 2b       	or	r24, r25
    6d34:	09 f0       	breq	.+2      	; 0x6d38 <Days_Per_Month+0x3a>
    6d36:	21 96       	adiw	r28, 0x01	; 1
    6d38:	ce 01       	movw	r24, r28
    6d3a:	df 91       	pop	r29
    6d3c:	cf 91       	pop	r28
    6d3e:	08 95       	ret

00006d40 <time_to_tm>:
    6d40:	a0 e0       	ldi	r26, 0x00	; 0
    6d42:	b0 e0       	ldi	r27, 0x00	; 0
    6d44:	e6 ea       	ldi	r30, 0xA6	; 166
    6d46:	f6 e3       	ldi	r31, 0x36	; 54
    6d48:	0c 94 bd e6 	jmp	0x1cd7a	; 0x1cd7a <__prologue_saves__+0x4>
    6d4c:	e8 01       	movw	r28, r16
    6d4e:	e6 e1       	ldi	r30, 0x16	; 22
    6d50:	d8 01       	movw	r26, r16
    6d52:	1d 92       	st	X+, r1
    6d54:	ea 95       	dec	r30
    6d56:	e9 f7       	brne	.-6      	; 0x6d52 <time_to_tm+0x12>
    6d58:	61 15       	cp	r22, r1
    6d5a:	bd e5       	ldi	r27, 0x5D	; 93
    6d5c:	7b 07       	cpc	r23, r27
    6d5e:	bd ef       	ldi	r27, 0xFD	; 253
    6d60:	8b 07       	cpc	r24, r27
    6d62:	bf ef       	ldi	r27, 0xFF	; 255
    6d64:	9b 07       	cpc	r25, r27
    6d66:	08 f0       	brcs	.+2      	; 0x6d6a <time_to_tm+0x2a>
    6d68:	c0 c0       	rjmp	.+384    	; 0x6eea <time_to_tm+0x1aa>
    6d6a:	6b 01       	movw	r12, r22
    6d6c:	7c 01       	movw	r14, r24
    6d6e:	c2 1a       	sub	r12, r18
    6d70:	d3 0a       	sbc	r13, r19
    6d72:	e4 0a       	sbc	r14, r20
    6d74:	f5 0a       	sbc	r15, r21
    6d76:	46 01       	movw	r8, r12
    6d78:	57 01       	movw	r10, r14
    6d7a:	e0 e8       	ldi	r30, 0x80	; 128
    6d7c:	ce 16       	cp	r12, r30
    6d7e:	ee ea       	ldi	r30, 0xAE	; 174
    6d80:	de 06       	cpc	r13, r30
    6d82:	ee ef       	ldi	r30, 0xFE	; 254
    6d84:	ee 06       	cpc	r14, r30
    6d86:	ef ef       	ldi	r30, 0xFF	; 255
    6d88:	fe 06       	cpc	r15, r30
    6d8a:	50 f0       	brcs	.+20     	; 0x6da0 <time_to_tm+0x60>
    6d8c:	80 e8       	ldi	r24, 0x80	; 128
    6d8e:	88 0e       	add	r8, r24
    6d90:	81 e5       	ldi	r24, 0x51	; 81
    6d92:	98 1e       	adc	r9, r24
    6d94:	81 e0       	ldi	r24, 0x01	; 1
    6d96:	a8 1e       	adc	r10, r24
    6d98:	b1 1c       	adc	r11, r1
    6d9a:	01 e0       	ldi	r16, 0x01	; 1
    6d9c:	10 e0       	ldi	r17, 0x00	; 0
    6d9e:	02 c0       	rjmp	.+4      	; 0x6da4 <time_to_tm+0x64>
    6da0:	00 e0       	ldi	r16, 0x00	; 0
    6da2:	10 e0       	ldi	r17, 0x00	; 0
    6da4:	8c e3       	ldi	r24, 0x3C	; 60
    6da6:	48 2e       	mov	r4, r24
    6da8:	51 2c       	mov	r5, r1
    6daa:	61 2c       	mov	r6, r1
    6dac:	71 2c       	mov	r7, r1
    6dae:	c5 01       	movw	r24, r10
    6db0:	b4 01       	movw	r22, r8
    6db2:	a3 01       	movw	r20, r6
    6db4:	92 01       	movw	r18, r4
    6db6:	0e 94 4e e6 	call	0x1cc9c	; 0x1cc9c <__udivmodsi4>
    6dba:	79 83       	std	Y+1, r23	; 0x01
    6dbc:	68 83       	st	Y, r22
    6dbe:	ca 01       	movw	r24, r20
    6dc0:	b9 01       	movw	r22, r18
    6dc2:	a3 01       	movw	r20, r6
    6dc4:	92 01       	movw	r18, r4
    6dc6:	0e 94 4e e6 	call	0x1cc9c	; 0x1cc9c <__udivmodsi4>
    6dca:	7b 83       	std	Y+3, r23	; 0x03
    6dcc:	6a 83       	std	Y+2, r22	; 0x02
    6dce:	c5 01       	movw	r24, r10
    6dd0:	b4 01       	movw	r22, r8
    6dd2:	20 e1       	ldi	r18, 0x10	; 16
    6dd4:	3e e0       	ldi	r19, 0x0E	; 14
    6dd6:	40 e0       	ldi	r20, 0x00	; 0
    6dd8:	50 e0       	ldi	r21, 0x00	; 0
    6dda:	0e 94 4e e6 	call	0x1cc9c	; 0x1cc9c <__udivmodsi4>
    6dde:	ca 01       	movw	r24, r20
    6de0:	b9 01       	movw	r22, r18
    6de2:	28 e1       	ldi	r18, 0x18	; 24
    6de4:	30 e0       	ldi	r19, 0x00	; 0
    6de6:	40 e0       	ldi	r20, 0x00	; 0
    6de8:	50 e0       	ldi	r21, 0x00	; 0
    6dea:	0e 94 4e e6 	call	0x1cc9c	; 0x1cc9c <__udivmodsi4>
    6dee:	7d 83       	std	Y+5, r23	; 0x05
    6df0:	6c 83       	std	Y+4, r22	; 0x04
    6df2:	01 15       	cp	r16, r1
    6df4:	11 05       	cpc	r17, r1
    6df6:	89 f0       	breq	.+34     	; 0x6e1a <time_to_tm+0xda>
    6df8:	85 e4       	ldi	r24, 0x45	; 69
    6dfa:	90 e0       	ldi	r25, 0x00	; 0
    6dfc:	9b 87       	std	Y+11, r25	; 0x0b
    6dfe:	8a 87       	std	Y+10, r24	; 0x0a
    6e00:	8b e0       	ldi	r24, 0x0B	; 11
    6e02:	90 e0       	ldi	r25, 0x00	; 0
    6e04:	99 87       	std	Y+9, r25	; 0x09
    6e06:	88 87       	std	Y+8, r24	; 0x08
    6e08:	8f e1       	ldi	r24, 0x1F	; 31
    6e0a:	90 e0       	ldi	r25, 0x00	; 0
    6e0c:	9f 83       	std	Y+7, r25	; 0x07
    6e0e:	8e 83       	std	Y+6, r24	; 0x06
    6e10:	83 e0       	ldi	r24, 0x03	; 3
    6e12:	90 e0       	ldi	r25, 0x00	; 0
    6e14:	9d 87       	std	Y+13, r25	; 0x0d
    6e16:	8c 87       	std	Y+12, r24	; 0x0c
    6e18:	65 c0       	rjmp	.+202    	; 0x6ee4 <time_to_tm+0x1a4>
    6e1a:	c5 01       	movw	r24, r10
    6e1c:	b4 01       	movw	r22, r8
    6e1e:	20 e8       	ldi	r18, 0x80	; 128
    6e20:	31 e5       	ldi	r19, 0x51	; 81
    6e22:	41 e0       	ldi	r20, 0x01	; 1
    6e24:	50 e0       	ldi	r21, 0x00	; 0
    6e26:	0e 94 4e e6 	call	0x1cc9c	; 0x1cc9c <__udivmodsi4>
    6e2a:	49 01       	movw	r8, r18
    6e2c:	5a 01       	movw	r10, r20
    6e2e:	ca 01       	movw	r24, r20
    6e30:	b9 01       	movw	r22, r18
    6e32:	6c 5f       	subi	r22, 0xFC	; 252
    6e34:	7f 4f       	sbci	r23, 0xFF	; 255
    6e36:	8f 4f       	sbci	r24, 0xFF	; 255
    6e38:	9f 4f       	sbci	r25, 0xFF	; 255
    6e3a:	27 e0       	ldi	r18, 0x07	; 7
    6e3c:	30 e0       	ldi	r19, 0x00	; 0
    6e3e:	40 e0       	ldi	r20, 0x00	; 0
    6e40:	50 e0       	ldi	r21, 0x00	; 0
    6e42:	0e 94 70 e6 	call	0x1cce0	; 0x1cce0 <__divmodsi4>
    6e46:	7d 87       	std	Y+13, r23	; 0x0d
    6e48:	6c 87       	std	Y+12, r22	; 0x0c
    6e4a:	02 eb       	ldi	r16, 0xB2	; 178
    6e4c:	17 e0       	ldi	r17, 0x07	; 7
    6e4e:	c8 01       	movw	r24, r16
    6e50:	31 df       	rcall	.-414    	; 0x6cb4 <IS_Leap>
    6e52:	00 97       	sbiw	r24, 0x00	; 0
    6e54:	19 f4       	brne	.+6      	; 0x6e5c <time_to_tm+0x11c>
    6e56:	4d e6       	ldi	r20, 0x6D	; 109
    6e58:	51 e0       	ldi	r21, 0x01	; 1
    6e5a:	02 c0       	rjmp	.+4      	; 0x6e60 <time_to_tm+0x120>
    6e5c:	4e e6       	ldi	r20, 0x6E	; 110
    6e5e:	51 e0       	ldi	r21, 0x01	; 1
    6e60:	05 2e       	mov	r0, r21
    6e62:	00 0c       	add	r0, r0
    6e64:	66 0b       	sbc	r22, r22
    6e66:	77 0b       	sbc	r23, r23
    6e68:	84 16       	cp	r8, r20
    6e6a:	95 06       	cpc	r9, r21
    6e6c:	a6 06       	cpc	r10, r22
    6e6e:	b7 06       	cpc	r11, r23
    6e70:	3c f0       	brlt	.+14     	; 0x6e80 <time_to_tm+0x140>
    6e72:	0f 5f       	subi	r16, 0xFF	; 255
    6e74:	1f 4f       	sbci	r17, 0xFF	; 255
    6e76:	84 1a       	sub	r8, r20
    6e78:	95 0a       	sbc	r9, r21
    6e7a:	a6 0a       	sbc	r10, r22
    6e7c:	b7 0a       	sbc	r11, r23
    6e7e:	e7 cf       	rjmp	.-50     	; 0x6e4e <time_to_tm+0x10e>
    6e80:	0c 56       	subi	r16, 0x6C	; 108
    6e82:	17 40       	sbci	r17, 0x07	; 7
    6e84:	1b 87       	std	Y+11, r17	; 0x0b
    6e86:	0a 87       	std	Y+10, r16	; 0x0a
    6e88:	9f 86       	std	Y+15, r9	; 0x0f
    6e8a:	8e 86       	std	Y+14, r8	; 0x0e
    6e8c:	e8 e8       	ldi	r30, 0x88	; 136
    6e8e:	f3 e0       	ldi	r31, 0x03	; 3
    6e90:	20 e0       	ldi	r18, 0x00	; 0
    6e92:	30 e0       	ldi	r19, 0x00	; 0
    6e94:	18 14       	cp	r1, r8
    6e96:	19 04       	cpc	r1, r9
    6e98:	1a 04       	cpc	r1, r10
    6e9a:	1b 04       	cpc	r1, r11
    6e9c:	e4 f4       	brge	.+56     	; 0x6ed6 <time_to_tm+0x196>
    6e9e:	2c 30       	cpi	r18, 0x0C	; 12
    6ea0:	31 05       	cpc	r19, r1
    6ea2:	c9 f0       	breq	.+50     	; 0x6ed6 <time_to_tm+0x196>
    6ea4:	41 91       	ld	r20, Z+
    6ea6:	51 91       	ld	r21, Z+
    6ea8:	21 30       	cpi	r18, 0x01	; 1
    6eaa:	31 05       	cpc	r19, r1
    6eac:	21 f4       	brne	.+8      	; 0x6eb6 <time_to_tm+0x176>
    6eae:	00 97       	sbiw	r24, 0x00	; 0
    6eb0:	11 f0       	breq	.+4      	; 0x6eb6 <time_to_tm+0x176>
    6eb2:	4f 5f       	subi	r20, 0xFF	; 255
    6eb4:	5f 4f       	sbci	r21, 0xFF	; 255
    6eb6:	05 2e       	mov	r0, r21
    6eb8:	00 0c       	add	r0, r0
    6eba:	66 0b       	sbc	r22, r22
    6ebc:	77 0b       	sbc	r23, r23
    6ebe:	84 16       	cp	r8, r20
    6ec0:	95 06       	cpc	r9, r21
    6ec2:	a6 06       	cpc	r10, r22
    6ec4:	b7 06       	cpc	r11, r23
    6ec6:	3c f0       	brlt	.+14     	; 0x6ed6 <time_to_tm+0x196>
    6ec8:	84 1a       	sub	r8, r20
    6eca:	95 0a       	sbc	r9, r21
    6ecc:	a6 0a       	sbc	r10, r22
    6ece:	b7 0a       	sbc	r11, r23
    6ed0:	2f 5f       	subi	r18, 0xFF	; 255
    6ed2:	3f 4f       	sbci	r19, 0xFF	; 255
    6ed4:	df cf       	rjmp	.-66     	; 0x6e94 <time_to_tm+0x154>
    6ed6:	39 87       	std	Y+9, r19	; 0x09
    6ed8:	28 87       	std	Y+8, r18	; 0x08
    6eda:	af ef       	ldi	r26, 0xFF	; 255
    6edc:	8a 1a       	sub	r8, r26
    6ede:	9a 0a       	sbc	r9, r26
    6ee0:	9f 82       	std	Y+7, r9	; 0x07
    6ee2:	8e 82       	std	Y+6, r8	; 0x06
    6ee4:	b6 01       	movw	r22, r12
    6ee6:	c7 01       	movw	r24, r14
    6ee8:	04 c0       	rjmp	.+8      	; 0x6ef2 <time_to_tm+0x1b2>
    6eea:	6f ef       	ldi	r22, 0xFF	; 255
    6eec:	7f ef       	ldi	r23, 0xFF	; 255
    6eee:	8f ef       	ldi	r24, 0xFF	; 255
    6ef0:	9f ef       	ldi	r25, 0xFF	; 255
    6ef2:	cd b7       	in	r28, 0x3d	; 61
    6ef4:	de b7       	in	r29, 0x3e	; 62
    6ef6:	e0 e1       	ldi	r30, 0x10	; 16
    6ef8:	0c 94 d9 e6 	jmp	0x1cdb2	; 0x1cdb2 <__epilogue_restores__+0x4>

00006efc <gmtime_r>:
    6efc:	0f 93       	push	r16
    6efe:	1f 93       	push	r17
    6f00:	cf 93       	push	r28
    6f02:	df 93       	push	r29
    6f04:	eb 01       	movw	r28, r22
    6f06:	fc 01       	movw	r30, r24
    6f08:	60 81       	ld	r22, Z
    6f0a:	71 81       	ldd	r23, Z+1	; 0x01
    6f0c:	82 81       	ldd	r24, Z+2	; 0x02
    6f0e:	93 81       	ldd	r25, Z+3	; 0x03
    6f10:	8e 01       	movw	r16, r28
    6f12:	20 e0       	ldi	r18, 0x00	; 0
    6f14:	30 e0       	ldi	r19, 0x00	; 0
    6f16:	a9 01       	movw	r20, r18
    6f18:	13 df       	rcall	.-474    	; 0x6d40 <time_to_tm>
    6f1a:	ce 01       	movw	r24, r28
    6f1c:	df 91       	pop	r29
    6f1e:	cf 91       	pop	r28
    6f20:	1f 91       	pop	r17
    6f22:	0f 91       	pop	r16
    6f24:	08 95       	ret

00006f26 <gmtime>:
    6f26:	26 ec       	ldi	r18, 0xC6	; 198
    6f28:	37 e1       	ldi	r19, 0x17	; 23
    6f2a:	30 93 dd 17 	sts	0x17DD, r19	; 0x8017dd <p.3677+0x1>
    6f2e:	20 93 dc 17 	sts	0x17DC, r18	; 0x8017dc <p.3677>
    6f32:	b9 01       	movw	r22, r18
    6f34:	e3 df       	rcall	.-58     	; 0x6efc <gmtime_r>
    6f36:	86 ec       	ldi	r24, 0xC6	; 198
    6f38:	97 e1       	ldi	r25, 0x17	; 23
    6f3a:	08 95       	ret

00006f3c <gettimezone>:
    6f3c:	e0 e7       	ldi	r30, 0x70	; 112
    6f3e:	fa e1       	ldi	r31, 0x1A	; 26
    6f40:	20 81       	ld	r18, Z
    6f42:	31 81       	ldd	r19, Z+1	; 0x01
    6f44:	dc 01       	movw	r26, r24
    6f46:	2d 93       	st	X+, r18
    6f48:	3c 93       	st	X, r19
    6f4a:	22 81       	ldd	r18, Z+2	; 0x02
    6f4c:	33 81       	ldd	r19, Z+3	; 0x03
    6f4e:	fc 01       	movw	r30, r24
    6f50:	33 83       	std	Z+3, r19	; 0x03
    6f52:	22 83       	std	Z+2, r18	; 0x02
    6f54:	80 e0       	ldi	r24, 0x00	; 0
    6f56:	90 e0       	ldi	r25, 0x00	; 0
    6f58:	08 95       	ret

00006f5a <settimezone>:
    6f5a:	cf 93       	push	r28
    6f5c:	df 93       	push	r29
    6f5e:	ec 01       	movw	r28, r24
    6f60:	28 81       	ld	r18, Y
    6f62:	39 81       	ldd	r19, Y+1	; 0x01
    6f64:	e0 e7       	ldi	r30, 0x70	; 112
    6f66:	fa e1       	ldi	r31, 0x1A	; 26
    6f68:	31 83       	std	Z+1, r19	; 0x01
    6f6a:	20 83       	st	Z, r18
    6f6c:	8a 81       	ldd	r24, Y+2	; 0x02
    6f6e:	9b 81       	ldd	r25, Y+3	; 0x03
    6f70:	93 83       	std	Z+3, r25	; 0x03
    6f72:	82 83       	std	Z+2, r24	; 0x02
    6f74:	80 e0       	ldi	r24, 0x00	; 0
    6f76:	90 e0       	ldi	r25, 0x00	; 0
    6f78:	df 91       	pop	r29
    6f7a:	cf 91       	pop	r28
    6f7c:	08 95       	ret

00006f7e <gettimeofday>:
    6f7e:	a8 e0       	ldi	r26, 0x08	; 8
    6f80:	b0 e0       	ldi	r27, 0x00	; 0
    6f82:	e5 ec       	ldi	r30, 0xC5	; 197
    6f84:	f7 e3       	ldi	r31, 0x37	; 55
    6f86:	0c 94 c7 e6 	jmp	0x1cd8e	; 0x1cd8e <__prologue_saves__+0x18>
    6f8a:	8c 01       	movw	r16, r24
    6f8c:	7b 01       	movw	r14, r22
    6f8e:	be 01       	movw	r22, r28
    6f90:	6f 5f       	subi	r22, 0xFF	; 255
    6f92:	7f 4f       	sbci	r23, 0xFF	; 255
    6f94:	80 e0       	ldi	r24, 0x00	; 0
    6f96:	90 e0       	ldi	r25, 0x00	; 0
    6f98:	dc db       	rcall	.-2120   	; 0x6752 <clock_gettime>
    6f9a:	89 81       	ldd	r24, Y+1	; 0x01
    6f9c:	9a 81       	ldd	r25, Y+2	; 0x02
    6f9e:	ab 81       	ldd	r26, Y+3	; 0x03
    6fa0:	bc 81       	ldd	r27, Y+4	; 0x04
    6fa2:	f8 01       	movw	r30, r16
    6fa4:	80 83       	st	Z, r24
    6fa6:	91 83       	std	Z+1, r25	; 0x01
    6fa8:	a2 83       	std	Z+2, r26	; 0x02
    6faa:	b3 83       	std	Z+3, r27	; 0x03
    6fac:	6d 81       	ldd	r22, Y+5	; 0x05
    6fae:	7e 81       	ldd	r23, Y+6	; 0x06
    6fb0:	8f 81       	ldd	r24, Y+7	; 0x07
    6fb2:	98 85       	ldd	r25, Y+8	; 0x08
    6fb4:	28 ee       	ldi	r18, 0xE8	; 232
    6fb6:	33 e0       	ldi	r19, 0x03	; 3
    6fb8:	40 e0       	ldi	r20, 0x00	; 0
    6fba:	50 e0       	ldi	r21, 0x00	; 0
    6fbc:	0e 94 70 e6 	call	0x1cce0	; 0x1cce0 <__divmodsi4>
    6fc0:	f8 01       	movw	r30, r16
    6fc2:	24 83       	std	Z+4, r18	; 0x04
    6fc4:	35 83       	std	Z+5, r19	; 0x05
    6fc6:	46 83       	std	Z+6, r20	; 0x06
    6fc8:	57 83       	std	Z+7, r21	; 0x07
    6fca:	c7 01       	movw	r24, r14
    6fcc:	b7 df       	rcall	.-146    	; 0x6f3c <gettimezone>
    6fce:	80 e0       	ldi	r24, 0x00	; 0
    6fd0:	90 e0       	ldi	r25, 0x00	; 0
    6fd2:	28 96       	adiw	r28, 0x08	; 8
    6fd4:	e6 e0       	ldi	r30, 0x06	; 6
    6fd6:	0c 94 e3 e6 	jmp	0x1cdc6	; 0x1cdc6 <__epilogue_restores__+0x18>

00006fda <time>:
    6fda:	cf 93       	push	r28
    6fdc:	df 93       	push	r29
    6fde:	ec 01       	movw	r28, r24
    6fe0:	68 ea       	ldi	r22, 0xA8	; 168
    6fe2:	77 e1       	ldi	r23, 0x17	; 23
    6fe4:	80 e0       	ldi	r24, 0x00	; 0
    6fe6:	90 e0       	ldi	r25, 0x00	; 0
    6fe8:	b4 db       	rcall	.-2200   	; 0x6752 <clock_gettime>
    6fea:	20 97       	sbiw	r28, 0x00	; 0
    6fec:	61 f0       	breq	.+24     	; 0x7006 <time+0x2c>
    6fee:	80 91 a8 17 	lds	r24, 0x17A8	; 0x8017a8 <ts.3755>
    6ff2:	90 91 a9 17 	lds	r25, 0x17A9	; 0x8017a9 <ts.3755+0x1>
    6ff6:	a0 91 aa 17 	lds	r26, 0x17AA	; 0x8017aa <ts.3755+0x2>
    6ffa:	b0 91 ab 17 	lds	r27, 0x17AB	; 0x8017ab <ts.3755+0x3>
    6ffe:	88 83       	st	Y, r24
    7000:	99 83       	std	Y+1, r25	; 0x01
    7002:	aa 83       	std	Y+2, r26	; 0x02
    7004:	bb 83       	std	Y+3, r27	; 0x03
    7006:	60 91 a8 17 	lds	r22, 0x17A8	; 0x8017a8 <ts.3755>
    700a:	70 91 a9 17 	lds	r23, 0x17A9	; 0x8017a9 <ts.3755+0x1>
    700e:	80 91 aa 17 	lds	r24, 0x17AA	; 0x8017aa <ts.3755+0x2>
    7012:	90 91 ab 17 	lds	r25, 0x17AB	; 0x8017ab <ts.3755+0x3>
    7016:	df 91       	pop	r29
    7018:	cf 91       	pop	r28
    701a:	08 95       	ret

0000701c <is_dst>:
    701c:	cf 92       	push	r12
    701e:	df 92       	push	r13
    7020:	ef 92       	push	r14
    7022:	ff 92       	push	r15
    7024:	6b 01       	movw	r12, r22
    7026:	7c 01       	movw	r14, r24
    7028:	05 d4       	rcall	.+2058   	; 0x7834 <set_dst>
    702a:	80 91 74 1a 	lds	r24, 0x1A74	; 0x801a74 <dst>
    702e:	90 91 75 1a 	lds	r25, 0x1A75	; 0x801a75 <dst+0x1>
    7032:	a0 91 76 1a 	lds	r26, 0x1A76	; 0x801a76 <dst+0x2>
    7036:	b0 91 77 1a 	lds	r27, 0x1A77	; 0x801a77 <dst+0x3>
    703a:	c8 16       	cp	r12, r24
    703c:	d9 06       	cpc	r13, r25
    703e:	ea 06       	cpc	r14, r26
    7040:	fb 06       	cpc	r15, r27
    7042:	88 f0       	brcs	.+34     	; 0x7066 <is_dst+0x4a>
    7044:	81 e0       	ldi	r24, 0x01	; 1
    7046:	90 e0       	ldi	r25, 0x00	; 0
    7048:	40 91 78 1a 	lds	r20, 0x1A78	; 0x801a78 <dst+0x4>
    704c:	50 91 79 1a 	lds	r21, 0x1A79	; 0x801a79 <dst+0x5>
    7050:	60 91 7a 1a 	lds	r22, 0x1A7A	; 0x801a7a <dst+0x6>
    7054:	70 91 7b 1a 	lds	r23, 0x1A7B	; 0x801a7b <dst+0x7>
    7058:	4c 15       	cp	r20, r12
    705a:	5d 05       	cpc	r21, r13
    705c:	6e 05       	cpc	r22, r14
    705e:	7f 05       	cpc	r23, r15
    7060:	20 f4       	brcc	.+8      	; 0x706a <is_dst+0x4e>
    7062:	80 e0       	ldi	r24, 0x00	; 0
    7064:	02 c0       	rjmp	.+4      	; 0x706a <is_dst+0x4e>
    7066:	80 e0       	ldi	r24, 0x00	; 0
    7068:	90 e0       	ldi	r25, 0x00	; 0
    706a:	ff 90       	pop	r15
    706c:	ef 90       	pop	r14
    706e:	df 90       	pop	r13
    7070:	cf 90       	pop	r12
    7072:	08 95       	ret

00007074 <localtime_r>:
    7074:	4f 92       	push	r4
    7076:	5f 92       	push	r5
    7078:	6f 92       	push	r6
    707a:	7f 92       	push	r7
    707c:	af 92       	push	r10
    707e:	bf 92       	push	r11
    7080:	cf 92       	push	r12
    7082:	df 92       	push	r13
    7084:	ef 92       	push	r14
    7086:	ff 92       	push	r15
    7088:	0f 93       	push	r16
    708a:	1f 93       	push	r17
    708c:	cf 93       	push	r28
    708e:	df 93       	push	r29
    7090:	00 d0       	rcall	.+0      	; 0x7092 <localtime_r+0x1e>
    7092:	00 d0       	rcall	.+0      	; 0x7094 <localtime_r+0x20>
    7094:	cd b7       	in	r28, 0x3d	; 61
    7096:	de b7       	in	r29, 0x3e	; 62
    7098:	5b 01       	movw	r10, r22
    709a:	fc 01       	movw	r30, r24
    709c:	40 80       	ld	r4, Z
    709e:	51 80       	ldd	r5, Z+1	; 0x01
    70a0:	62 80       	ldd	r6, Z+2	; 0x02
    70a2:	73 80       	ldd	r7, Z+3	; 0x03
    70a4:	ce 01       	movw	r24, r28
    70a6:	01 96       	adiw	r24, 0x01	; 1
    70a8:	49 df       	rcall	.-366    	; 0x6f3c <gettimezone>
    70aa:	a9 81       	ldd	r26, Y+1	; 0x01
    70ac:	ba 81       	ldd	r27, Y+2	; 0x02
    70ae:	2c e3       	ldi	r18, 0x3C	; 60
    70b0:	30 e0       	ldi	r19, 0x00	; 0
    70b2:	0e 94 95 e6 	call	0x1cd2a	; 0x1cd2a <__usmulhisi3>
    70b6:	6b 01       	movw	r12, r22
    70b8:	7c 01       	movw	r14, r24
    70ba:	c3 01       	movw	r24, r6
    70bc:	b2 01       	movw	r22, r4
    70be:	6c 19       	sub	r22, r12
    70c0:	7d 09       	sbc	r23, r13
    70c2:	8e 09       	sbc	r24, r14
    70c4:	9f 09       	sbc	r25, r15
    70c6:	aa df       	rcall	.-172    	; 0x701c <is_dst>
    70c8:	89 2b       	or	r24, r25
    70ca:	31 f0       	breq	.+12     	; 0x70d8 <localtime_r+0x64>
    70cc:	f0 e1       	ldi	r31, 0x10	; 16
    70ce:	cf 1a       	sub	r12, r31
    70d0:	fe e0       	ldi	r31, 0x0E	; 14
    70d2:	df 0a       	sbc	r13, r31
    70d4:	e1 08       	sbc	r14, r1
    70d6:	f1 08       	sbc	r15, r1
    70d8:	85 01       	movw	r16, r10
    70da:	a7 01       	movw	r20, r14
    70dc:	96 01       	movw	r18, r12
    70de:	c3 01       	movw	r24, r6
    70e0:	b2 01       	movw	r22, r4
    70e2:	2e de       	rcall	.-932    	; 0x6d40 <time_to_tm>
    70e4:	c5 01       	movw	r24, r10
    70e6:	0f 90       	pop	r0
    70e8:	0f 90       	pop	r0
    70ea:	0f 90       	pop	r0
    70ec:	0f 90       	pop	r0
    70ee:	df 91       	pop	r29
    70f0:	cf 91       	pop	r28
    70f2:	1f 91       	pop	r17
    70f4:	0f 91       	pop	r16
    70f6:	ff 90       	pop	r15
    70f8:	ef 90       	pop	r14
    70fa:	df 90       	pop	r13
    70fc:	cf 90       	pop	r12
    70fe:	bf 90       	pop	r11
    7100:	af 90       	pop	r10
    7102:	7f 90       	pop	r7
    7104:	6f 90       	pop	r6
    7106:	5f 90       	pop	r5
    7108:	4f 90       	pop	r4
    710a:	08 95       	ret

0000710c <localtime>:
    710c:	60 eb       	ldi	r22, 0xB0	; 176
    710e:	77 e1       	ldi	r23, 0x17	; 23
    7110:	b1 cf       	rjmp	.-158    	; 0x7074 <localtime_r>
    7112:	08 95       	ret

00007114 <normalize>:
    7114:	aa e0       	ldi	r26, 0x0A	; 10
    7116:	b0 e0       	ldi	r27, 0x00	; 0
    7118:	e0 e9       	ldi	r30, 0x90	; 144
    711a:	f8 e3       	ldi	r31, 0x38	; 56
    711c:	0c 94 bb e6 	jmp	0x1cd76	; 0x1cd76 <__prologue_saves__>
    7120:	7c 01       	movw	r14, r24
    7122:	7a 87       	std	Y+10, r23	; 0x0a
    7124:	69 87       	std	Y+9, r22	; 0x09
    7126:	f7 01       	movw	r30, r14
    7128:	80 81       	ld	r24, Z
    712a:	91 81       	ldd	r25, Z+1	; 0x01
    712c:	8c 33       	cpi	r24, 0x3C	; 60
    712e:	91 05       	cpc	r25, r1
    7130:	5c f0       	brlt	.+22     	; 0x7148 <normalize+0x34>
    7132:	f7 01       	movw	r30, r14
    7134:	22 81       	ldd	r18, Z+2	; 0x02
    7136:	33 81       	ldd	r19, Z+3	; 0x03
    7138:	2f 5f       	subi	r18, 0xFF	; 255
    713a:	3f 4f       	sbci	r19, 0xFF	; 255
    713c:	33 83       	std	Z+3, r19	; 0x03
    713e:	22 83       	std	Z+2, r18	; 0x02
    7140:	cc 97       	sbiw	r24, 0x3c	; 60
    7142:	91 83       	std	Z+1, r25	; 0x01
    7144:	80 83       	st	Z, r24
    7146:	ef cf       	rjmp	.-34     	; 0x7126 <normalize+0x12>
    7148:	f7 01       	movw	r30, r14
    714a:	01 90       	ld	r0, Z+
    714c:	f0 81       	ld	r31, Z
    714e:	e0 2d       	mov	r30, r0
    7150:	fe 83       	std	Y+6, r31	; 0x06
    7152:	ed 83       	std	Y+5, r30	; 0x05
    7154:	f7 ff       	sbrs	r31, 7
    7156:	0d c0       	rjmp	.+26     	; 0x7172 <normalize+0x5e>
    7158:	f7 01       	movw	r30, r14
    715a:	82 81       	ldd	r24, Z+2	; 0x02
    715c:	93 81       	ldd	r25, Z+3	; 0x03
    715e:	01 97       	sbiw	r24, 0x01	; 1
    7160:	93 83       	std	Z+3, r25	; 0x03
    7162:	82 83       	std	Z+2, r24	; 0x02
    7164:	6d 81       	ldd	r22, Y+5	; 0x05
    7166:	7e 81       	ldd	r23, Y+6	; 0x06
    7168:	64 5c       	subi	r22, 0xC4	; 196
    716a:	7f 4f       	sbci	r23, 0xFF	; 255
    716c:	71 83       	std	Z+1, r23	; 0x01
    716e:	60 83       	st	Z, r22
    7170:	eb cf       	rjmp	.-42     	; 0x7148 <normalize+0x34>
    7172:	f7 01       	movw	r30, r14
    7174:	82 81       	ldd	r24, Z+2	; 0x02
    7176:	93 81       	ldd	r25, Z+3	; 0x03
    7178:	8c 33       	cpi	r24, 0x3C	; 60
    717a:	91 05       	cpc	r25, r1
    717c:	5c f0       	brlt	.+22     	; 0x7194 <normalize+0x80>
    717e:	f7 01       	movw	r30, r14
    7180:	24 81       	ldd	r18, Z+4	; 0x04
    7182:	35 81       	ldd	r19, Z+5	; 0x05
    7184:	2f 5f       	subi	r18, 0xFF	; 255
    7186:	3f 4f       	sbci	r19, 0xFF	; 255
    7188:	35 83       	std	Z+5, r19	; 0x05
    718a:	24 83       	std	Z+4, r18	; 0x04
    718c:	cc 97       	sbiw	r24, 0x3c	; 60
    718e:	93 83       	std	Z+3, r25	; 0x03
    7190:	82 83       	std	Z+2, r24	; 0x02
    7192:	ef cf       	rjmp	.-34     	; 0x7172 <normalize+0x5e>
    7194:	f7 01       	movw	r30, r14
    7196:	22 80       	ldd	r2, Z+2	; 0x02
    7198:	33 80       	ldd	r3, Z+3	; 0x03
    719a:	37 fe       	sbrs	r3, 7
    719c:	0d c0       	rjmp	.+26     	; 0x71b8 <normalize+0xa4>
    719e:	f7 01       	movw	r30, r14
    71a0:	84 81       	ldd	r24, Z+4	; 0x04
    71a2:	95 81       	ldd	r25, Z+5	; 0x05
    71a4:	01 97       	sbiw	r24, 0x01	; 1
    71a6:	95 83       	std	Z+5, r25	; 0x05
    71a8:	84 83       	std	Z+4, r24	; 0x04
    71aa:	fc e3       	ldi	r31, 0x3C	; 60
    71ac:	2f 0e       	add	r2, r31
    71ae:	31 1c       	adc	r3, r1
    71b0:	f7 01       	movw	r30, r14
    71b2:	33 82       	std	Z+3, r3	; 0x03
    71b4:	22 82       	std	Z+2, r2	; 0x02
    71b6:	ee cf       	rjmp	.-36     	; 0x7194 <normalize+0x80>
    71b8:	f7 01       	movw	r30, r14
    71ba:	84 81       	ldd	r24, Z+4	; 0x04
    71bc:	95 81       	ldd	r25, Z+5	; 0x05
    71be:	88 31       	cpi	r24, 0x18	; 24
    71c0:	91 05       	cpc	r25, r1
    71c2:	5c f0       	brlt	.+22     	; 0x71da <normalize+0xc6>
    71c4:	f7 01       	movw	r30, r14
    71c6:	26 81       	ldd	r18, Z+6	; 0x06
    71c8:	37 81       	ldd	r19, Z+7	; 0x07
    71ca:	2f 5f       	subi	r18, 0xFF	; 255
    71cc:	3f 4f       	sbci	r19, 0xFF	; 255
    71ce:	37 83       	std	Z+7, r19	; 0x07
    71d0:	26 83       	std	Z+6, r18	; 0x06
    71d2:	48 97       	sbiw	r24, 0x18	; 24
    71d4:	95 83       	std	Z+5, r25	; 0x05
    71d6:	84 83       	std	Z+4, r24	; 0x04
    71d8:	ef cf       	rjmp	.-34     	; 0x71b8 <normalize+0xa4>
    71da:	f7 01       	movw	r30, r14
    71dc:	04 81       	ldd	r16, Z+4	; 0x04
    71de:	15 81       	ldd	r17, Z+5	; 0x05
    71e0:	17 ff       	sbrs	r17, 7
    71e2:	0b c0       	rjmp	.+22     	; 0x71fa <normalize+0xe6>
    71e4:	f7 01       	movw	r30, r14
    71e6:	86 81       	ldd	r24, Z+6	; 0x06
    71e8:	97 81       	ldd	r25, Z+7	; 0x07
    71ea:	01 97       	sbiw	r24, 0x01	; 1
    71ec:	97 83       	std	Z+7, r25	; 0x07
    71ee:	86 83       	std	Z+6, r24	; 0x06
    71f0:	08 5e       	subi	r16, 0xE8	; 232
    71f2:	1f 4f       	sbci	r17, 0xFF	; 255
    71f4:	15 83       	std	Z+5, r17	; 0x05
    71f6:	04 83       	std	Z+4, r16	; 0x04
    71f8:	f0 cf       	rjmp	.-32     	; 0x71da <normalize+0xc6>
    71fa:	f7 01       	movw	r30, r14
    71fc:	80 85       	ldd	r24, Z+8	; 0x08
    71fe:	91 85       	ldd	r25, Z+9	; 0x09
    7200:	8c 30       	cpi	r24, 0x0C	; 12
    7202:	91 05       	cpc	r25, r1
    7204:	5c f0       	brlt	.+22     	; 0x721c <normalize+0x108>
    7206:	f7 01       	movw	r30, r14
    7208:	22 85       	ldd	r18, Z+10	; 0x0a
    720a:	33 85       	ldd	r19, Z+11	; 0x0b
    720c:	2f 5f       	subi	r18, 0xFF	; 255
    720e:	3f 4f       	sbci	r19, 0xFF	; 255
    7210:	33 87       	std	Z+11, r19	; 0x0b
    7212:	22 87       	std	Z+10, r18	; 0x0a
    7214:	0c 97       	sbiw	r24, 0x0c	; 12
    7216:	91 87       	std	Z+9, r25	; 0x09
    7218:	80 87       	std	Z+8, r24	; 0x08
    721a:	ef cf       	rjmp	.-34     	; 0x71fa <normalize+0xe6>
    721c:	f7 01       	movw	r30, r14
    721e:	80 85       	ldd	r24, Z+8	; 0x08
    7220:	91 85       	ldd	r25, Z+9	; 0x09
    7222:	97 ff       	sbrs	r25, 7
    7224:	2d c0       	rjmp	.+90     	; 0x7280 <normalize+0x16c>
    7226:	f7 01       	movw	r30, r14
    7228:	22 85       	ldd	r18, Z+10	; 0x0a
    722a:	33 85       	ldd	r19, Z+11	; 0x0b
    722c:	21 50       	subi	r18, 0x01	; 1
    722e:	31 09       	sbc	r19, r1
    7230:	33 87       	std	Z+11, r19	; 0x0b
    7232:	22 87       	std	Z+10, r18	; 0x0a
    7234:	0c 96       	adiw	r24, 0x0c	; 12
    7236:	91 87       	std	Z+9, r25	; 0x09
    7238:	80 87       	std	Z+8, r24	; 0x08
    723a:	f0 cf       	rjmp	.-32     	; 0x721c <normalize+0x108>
    723c:	f7 01       	movw	r30, r14
    723e:	c6 80       	ldd	r12, Z+6	; 0x06
    7240:	d7 80       	ldd	r13, Z+7	; 0x07
    7242:	a0 84       	ldd	r10, Z+8	; 0x08
    7244:	b1 84       	ldd	r11, Z+9	; 0x09
    7246:	b4 01       	movw	r22, r8
    7248:	c5 01       	movw	r24, r10
    724a:	59 dd       	rcall	.-1358   	; 0x6cfe <Days_Per_Month>
    724c:	8c 15       	cp	r24, r12
    724e:	9d 05       	cpc	r25, r13
    7250:	84 f5       	brge	.+96     	; 0x72b2 <normalize+0x19e>
    7252:	c8 1a       	sub	r12, r24
    7254:	d9 0a       	sbc	r13, r25
    7256:	f7 01       	movw	r30, r14
    7258:	d7 82       	std	Z+7, r13	; 0x07
    725a:	c6 82       	std	Z+6, r12	; 0x06
    725c:	c5 01       	movw	r24, r10
    725e:	01 96       	adiw	r24, 0x01	; 1
    7260:	91 87       	std	Z+9, r25	; 0x09
    7262:	80 87       	std	Z+8, r24	; 0x08
    7264:	0c 97       	sbiw	r24, 0x0c	; 12
    7266:	54 f3       	brlt	.-44     	; 0x723c <normalize+0x128>
    7268:	fb e0       	ldi	r31, 0x0B	; 11
    726a:	af 1a       	sub	r10, r31
    726c:	b1 08       	sbc	r11, r1
    726e:	f7 01       	movw	r30, r14
    7270:	b1 86       	std	Z+9, r11	; 0x09
    7272:	a0 86       	std	Z+8, r10	; 0x08
    7274:	ff ef       	ldi	r31, 0xFF	; 255
    7276:	8f 1a       	sub	r8, r31
    7278:	9f 0a       	sbc	r9, r31
    727a:	f7 01       	movw	r30, r14
    727c:	93 86       	std	Z+11, r9	; 0x0b
    727e:	82 86       	std	Z+10, r8	; 0x0a
    7280:	f7 01       	movw	r30, r14
    7282:	82 84       	ldd	r8, Z+10	; 0x0a
    7284:	93 84       	ldd	r9, Z+11	; 0x0b
    7286:	da cf       	rjmp	.-76     	; 0x723c <normalize+0x128>
    7288:	f7 01       	movw	r30, r14
    728a:	80 85       	ldd	r24, Z+8	; 0x08
    728c:	91 85       	ldd	r25, Z+9	; 0x09
    728e:	9c 01       	movw	r18, r24
    7290:	21 50       	subi	r18, 0x01	; 1
    7292:	31 09       	sbc	r19, r1
    7294:	37 fd       	sbrc	r19, 7
    7296:	16 c0       	rjmp	.+44     	; 0x72c4 <normalize+0x1b0>
    7298:	31 87       	std	Z+9, r19	; 0x09
    729a:	20 87       	std	Z+8, r18	; 0x08
    729c:	f7 01       	movw	r30, r14
    729e:	62 85       	ldd	r22, Z+10	; 0x0a
    72a0:	73 85       	ldd	r23, Z+11	; 0x0b
    72a2:	80 85       	ldd	r24, Z+8	; 0x08
    72a4:	91 85       	ldd	r25, Z+9	; 0x09
    72a6:	2b dd       	rcall	.-1450   	; 0x6cfe <Days_Per_Month>
    72a8:	88 0d       	add	r24, r8
    72aa:	99 1d       	adc	r25, r9
    72ac:	f7 01       	movw	r30, r14
    72ae:	97 83       	std	Z+7, r25	; 0x07
    72b0:	86 83       	std	Z+6, r24	; 0x06
    72b2:	f7 01       	movw	r30, r14
    72b4:	86 80       	ldd	r8, Z+6	; 0x06
    72b6:	97 80       	ldd	r9, Z+7	; 0x07
    72b8:	a2 84       	ldd	r10, Z+10	; 0x0a
    72ba:	b3 84       	ldd	r11, Z+11	; 0x0b
    72bc:	18 14       	cp	r1, r8
    72be:	19 04       	cpc	r1, r9
    72c0:	1c f7       	brge	.-58     	; 0x7288 <normalize+0x174>
    72c2:	0b c0       	rjmp	.+22     	; 0x72da <normalize+0x1c6>
    72c4:	0b 96       	adiw	r24, 0x0b	; 11
    72c6:	f7 01       	movw	r30, r14
    72c8:	91 87       	std	Z+9, r25	; 0x09
    72ca:	80 87       	std	Z+8, r24	; 0x08
    72cc:	f1 e0       	ldi	r31, 0x01	; 1
    72ce:	af 1a       	sub	r10, r31
    72d0:	b1 08       	sbc	r11, r1
    72d2:	f7 01       	movw	r30, r14
    72d4:	b3 86       	std	Z+11, r11	; 0x0b
    72d6:	a2 86       	std	Z+10, r10	; 0x0a
    72d8:	e1 cf       	rjmp	.-62     	; 0x729c <normalize+0x188>
    72da:	a5 01       	movw	r20, r10
    72dc:	44 59       	subi	r20, 0x94	; 148
    72de:	58 4f       	sbci	r21, 0xF8	; 248
    72e0:	58 87       	std	Y+8, r21	; 0x08
    72e2:	4f 83       	std	Y+7, r20	; 0x07
    72e4:	35 01       	movw	r6, r10
    72e6:	56 e4       	ldi	r21, 0x46	; 70
    72e8:	65 1a       	sub	r6, r21
    72ea:	71 08       	sbc	r7, r1
    72ec:	89 e8       	ldi	r24, 0x89	; 137
    72ee:	68 16       	cp	r6, r24
    72f0:	71 04       	cpc	r7, r1
    72f2:	08 f0       	brcs	.+2      	; 0x72f6 <normalize+0x1e2>
    72f4:	9b c0       	rjmp	.+310    	; 0x742c <normalize+0x318>
    72f6:	c0 84       	ldd	r12, Z+8	; 0x08
    72f8:	d1 84       	ldd	r13, Z+9	; 0x09
    72fa:	9c e0       	ldi	r25, 0x0C	; 12
    72fc:	c9 16       	cp	r12, r25
    72fe:	d1 04       	cpc	r13, r1
    7300:	08 f0       	brcs	.+2      	; 0x7304 <normalize+0x1f0>
    7302:	94 c0       	rjmp	.+296    	; 0x742c <normalize+0x318>
    7304:	24 01       	movw	r4, r8
    7306:	e1 e0       	ldi	r30, 0x01	; 1
    7308:	4e 1a       	sub	r4, r30
    730a:	51 08       	sbc	r5, r1
    730c:	6f 81       	ldd	r22, Y+7	; 0x07
    730e:	78 85       	ldd	r23, Y+8	; 0x08
    7310:	c6 01       	movw	r24, r12
    7312:	f5 dc       	rcall	.-1558   	; 0x6cfe <Days_Per_Month>
    7314:	48 16       	cp	r4, r24
    7316:	59 06       	cpc	r5, r25
    7318:	0c f0       	brlt	.+2      	; 0x731c <normalize+0x208>
    731a:	88 c0       	rjmp	.+272    	; 0x742c <normalize+0x318>
    731c:	08 31       	cpi	r16, 0x18	; 24
    731e:	11 05       	cpc	r17, r1
    7320:	0c f0       	brlt	.+2      	; 0x7324 <normalize+0x210>
    7322:	84 c0       	rjmp	.+264    	; 0x742c <normalize+0x318>
    7324:	fc e3       	ldi	r31, 0x3C	; 60
    7326:	2f 16       	cp	r2, r31
    7328:	31 04       	cpc	r3, r1
    732a:	0c f0       	brlt	.+2      	; 0x732e <normalize+0x21a>
    732c:	7f c0       	rjmp	.+254    	; 0x742c <normalize+0x318>
    732e:	4d 81       	ldd	r20, Y+5	; 0x05
    7330:	5e 81       	ldd	r21, Y+6	; 0x06
    7332:	4c 33       	cpi	r20, 0x3C	; 60
    7334:	51 05       	cpc	r21, r1
    7336:	0c f0       	brlt	.+2      	; 0x733a <normalize+0x226>
    7338:	79 c0       	rjmp	.+242    	; 0x742c <normalize+0x318>
    733a:	2d e6       	ldi	r18, 0x6D	; 109
    733c:	31 e0       	ldi	r19, 0x01	; 1
    733e:	d3 01       	movw	r26, r6
    7340:	0e 94 95 e6 	call	0x1cd2a	; 0x1cd2a <__usmulhisi3>
    7344:	f6 01       	movw	r30, r12
    7346:	ee 0f       	add	r30, r30
    7348:	ff 1f       	adc	r31, r31
    734a:	e0 56       	subi	r30, 0x60	; 96
    734c:	fc 4f       	sbci	r31, 0xFC	; 252
    734e:	20 81       	ld	r18, Z
    7350:	31 81       	ldd	r19, Z+1	; 0x01
    7352:	dc 01       	movw	r26, r24
    7354:	cb 01       	movw	r24, r22
    7356:	82 0f       	add	r24, r18
    7358:	93 1f       	adc	r25, r19
    735a:	a1 1d       	adc	r26, r1
    735c:	b1 1d       	adc	r27, r1
    735e:	05 2c       	mov	r0, r5
    7360:	00 0c       	add	r0, r0
    7362:	66 08       	sbc	r6, r6
    7364:	77 08       	sbc	r7, r7
    7366:	48 0e       	add	r4, r24
    7368:	59 1e       	adc	r5, r25
    736a:	6a 1e       	adc	r6, r26
    736c:	7b 1e       	adc	r7, r27
    736e:	1a 14       	cp	r1, r10
    7370:	1b 04       	cpc	r1, r11
    7372:	1c f4       	brge	.+6      	; 0x737a <normalize+0x266>
    7374:	51 e0       	ldi	r21, 0x01	; 1
    7376:	a5 1a       	sub	r10, r21
    7378:	b1 08       	sbc	r11, r1
    737a:	45 01       	movw	r8, r10
    737c:	95 94       	asr	r9
    737e:	87 94       	ror	r8
    7380:	95 94       	asr	r9
    7382:	87 94       	ror	r8
    7384:	88 ec       	ldi	r24, 0xC8	; 200
    7386:	a8 16       	cp	r10, r24
    7388:	b1 04       	cpc	r11, r1
    738a:	1c f0       	brlt	.+6      	; 0x7392 <normalize+0x27e>
    738c:	91 e0       	ldi	r25, 0x01	; 1
    738e:	89 1a       	sub	r8, r25
    7390:	91 08       	sbc	r9, r1
    7392:	09 2c       	mov	r0, r9
    7394:	00 0c       	add	r0, r0
    7396:	aa 08       	sbc	r10, r10
    7398:	bb 08       	sbc	r11, r11
    739a:	84 0c       	add	r8, r4
    739c:	95 1c       	adc	r9, r5
    739e:	a6 1c       	adc	r10, r6
    73a0:	b7 1c       	adc	r11, r7
    73a2:	24 01       	movw	r4, r8
    73a4:	35 01       	movw	r6, r10
    73a6:	e1 e1       	ldi	r30, 0x11	; 17
    73a8:	4e 1a       	sub	r4, r30
    73aa:	51 08       	sbc	r5, r1
    73ac:	61 08       	sbc	r6, r1
    73ae:	71 08       	sbc	r7, r1
    73b0:	f2 e0       	ldi	r31, 0x02	; 2
    73b2:	cf 16       	cp	r12, r31
    73b4:	d1 04       	cpc	r13, r1
    73b6:	64 f0       	brlt	.+24     	; 0x73d0 <normalize+0x2bc>
    73b8:	8f 81       	ldd	r24, Y+7	; 0x07
    73ba:	98 85       	ldd	r25, Y+8	; 0x08
    73bc:	7b dc       	rcall	.-1802   	; 0x6cb4 <IS_Leap>
    73be:	89 2b       	or	r24, r25
    73c0:	39 f0       	breq	.+14     	; 0x73d0 <normalize+0x2bc>
    73c2:	24 01       	movw	r4, r8
    73c4:	35 01       	movw	r6, r10
    73c6:	40 e1       	ldi	r20, 0x10	; 16
    73c8:	44 1a       	sub	r4, r20
    73ca:	51 08       	sbc	r5, r1
    73cc:	61 08       	sbc	r6, r1
    73ce:	71 08       	sbc	r7, r1
    73d0:	a8 e1       	ldi	r26, 0x18	; 24
    73d2:	b0 e0       	ldi	r27, 0x00	; 0
    73d4:	a3 01       	movw	r20, r6
    73d6:	92 01       	movw	r18, r4
    73d8:	0e 94 9b e6 	call	0x1cd36	; 0x1cd36 <__muluhisi3>
    73dc:	01 2e       	mov	r0, r17
    73de:	00 0c       	add	r0, r0
    73e0:	22 0b       	sbc	r18, r18
    73e2:	33 0b       	sbc	r19, r19
    73e4:	a9 01       	movw	r20, r18
    73e6:	98 01       	movw	r18, r16
    73e8:	26 0f       	add	r18, r22
    73ea:	37 1f       	adc	r19, r23
    73ec:	48 1f       	adc	r20, r24
    73ee:	59 1f       	adc	r21, r25
    73f0:	ac e3       	ldi	r26, 0x3C	; 60
    73f2:	b0 e0       	ldi	r27, 0x00	; 0
    73f4:	0e 94 9b e6 	call	0x1cd36	; 0x1cd36 <__muluhisi3>
    73f8:	81 01       	movw	r16, r2
    73fa:	03 2c       	mov	r0, r3
    73fc:	00 0c       	add	r0, r0
    73fe:	22 0b       	sbc	r18, r18
    7400:	33 0b       	sbc	r19, r19
    7402:	a9 01       	movw	r20, r18
    7404:	98 01       	movw	r18, r16
    7406:	26 0f       	add	r18, r22
    7408:	37 1f       	adc	r19, r23
    740a:	48 1f       	adc	r20, r24
    740c:	59 1f       	adc	r21, r25
    740e:	0e 94 9b e6 	call	0x1cd36	; 0x1cd36 <__muluhisi3>
    7412:	ed 81       	ldd	r30, Y+5	; 0x05
    7414:	fe 81       	ldd	r31, Y+6	; 0x06
    7416:	8f 01       	movw	r16, r30
    7418:	ff 0f       	add	r31, r31
    741a:	22 0b       	sbc	r18, r18
    741c:	33 0b       	sbc	r19, r19
    741e:	48 01       	movw	r8, r16
    7420:	59 01       	movw	r10, r18
    7422:	86 0e       	add	r8, r22
    7424:	97 1e       	adc	r9, r23
    7426:	a8 1e       	adc	r10, r24
    7428:	b9 1e       	adc	r11, r25
    742a:	04 c0       	rjmp	.+8      	; 0x7434 <normalize+0x320>
    742c:	88 24       	eor	r8, r8
    742e:	8a 94       	dec	r8
    7430:	98 2c       	mov	r9, r8
    7432:	54 01       	movw	r10, r8
    7434:	49 85       	ldd	r20, Y+9	; 0x09
    7436:	5a 85       	ldd	r21, Y+10	; 0x0a
    7438:	45 2b       	or	r20, r21
    743a:	e9 f0       	breq	.+58     	; 0x7476 <normalize+0x362>
    743c:	ce 01       	movw	r24, r28
    743e:	01 96       	adiw	r24, 0x01	; 1
    7440:	7d dd       	rcall	.-1286   	; 0x6f3c <gettimezone>
    7442:	a9 81       	ldd	r26, Y+1	; 0x01
    7444:	ba 81       	ldd	r27, Y+2	; 0x02
    7446:	2c e3       	ldi	r18, 0x3C	; 60
    7448:	30 e0       	ldi	r19, 0x00	; 0
    744a:	0e 94 95 e6 	call	0x1cd2a	; 0x1cd2a <__usmulhisi3>
    744e:	2b 01       	movw	r4, r22
    7450:	3c 01       	movw	r6, r24
    7452:	c5 01       	movw	r24, r10
    7454:	b4 01       	movw	r22, r8
    7456:	e2 dd       	rcall	.-1084   	; 0x701c <is_dst>
    7458:	89 2b       	or	r24, r25
    745a:	51 f0       	breq	.+20     	; 0x7470 <normalize+0x35c>
    745c:	50 e1       	ldi	r21, 0x10	; 16
    745e:	45 1a       	sub	r4, r21
    7460:	5e e0       	ldi	r21, 0x0E	; 14
    7462:	55 0a       	sbc	r5, r21
    7464:	61 08       	sbc	r6, r1
    7466:	71 08       	sbc	r7, r1
    7468:	cc 24       	eor	r12, r12
    746a:	c3 94       	inc	r12
    746c:	d1 2c       	mov	r13, r1
    746e:	08 c0       	rjmp	.+16     	; 0x7480 <normalize+0x36c>
    7470:	c1 2c       	mov	r12, r1
    7472:	d1 2c       	mov	r13, r1
    7474:	05 c0       	rjmp	.+10     	; 0x7480 <normalize+0x36c>
    7476:	c1 2c       	mov	r12, r1
    7478:	d1 2c       	mov	r13, r1
    747a:	41 2c       	mov	r4, r1
    747c:	51 2c       	mov	r5, r1
    747e:	32 01       	movw	r6, r4
    7480:	87 01       	movw	r16, r14
    7482:	a3 01       	movw	r20, r6
    7484:	92 01       	movw	r18, r4
    7486:	c5 01       	movw	r24, r10
    7488:	b4 01       	movw	r22, r8
    748a:	5a dc       	rcall	.-1868   	; 0x6d40 <time_to_tm>
    748c:	c1 14       	cp	r12, r1
    748e:	d1 04       	cpc	r13, r1
    7490:	29 f0       	breq	.+10     	; 0x749c <normalize+0x388>
    7492:	21 e0       	ldi	r18, 0x01	; 1
    7494:	30 e0       	ldi	r19, 0x00	; 0
    7496:	f7 01       	movw	r30, r14
    7498:	31 8b       	std	Z+17, r19	; 0x11
    749a:	20 8b       	std	Z+16, r18	; 0x10
    749c:	2a 96       	adiw	r28, 0x0a	; 10
    749e:	e2 e1       	ldi	r30, 0x12	; 18
    74a0:	0c 94 d7 e6 	jmp	0x1cdae	; 0x1cdae <__epilogue_restores__>

000074a4 <timegm>:
    74a4:	60 e0       	ldi	r22, 0x00	; 0
    74a6:	70 e0       	ldi	r23, 0x00	; 0
    74a8:	35 ce       	rjmp	.-918    	; 0x7114 <normalize>
    74aa:	08 95       	ret

000074ac <setdate_r>:
    74ac:	cf 92       	push	r12
    74ae:	df 92       	push	r13
    74b0:	ef 92       	push	r14
    74b2:	ff 92       	push	r15
    74b4:	cf 93       	push	r28
    74b6:	df 93       	push	r29
    74b8:	cd b7       	in	r28, 0x3d	; 61
    74ba:	de b7       	in	r29, 0x3e	; 62
    74bc:	a5 97       	sbiw	r28, 0x25	; 37
    74be:	0f b6       	in	r0, 0x3f	; 63
    74c0:	f8 94       	cli
    74c2:	de bf       	out	0x3e, r29	; 62
    74c4:	0f be       	out	0x3f, r0	; 63
    74c6:	cd bf       	out	0x3d, r28	; 61
    74c8:	9d a3       	std	Y+37, r25	; 0x25
    74ca:	8c a3       	std	Y+36, r24	; 0x24
    74cc:	1f 82       	std	Y+7, r1	; 0x07
    74ce:	1e 82       	std	Y+6, r1	; 0x06
    74d0:	19 86       	std	Y+9, r1	; 0x09
    74d2:	18 86       	std	Y+8, r1	; 0x08
    74d4:	1b 86       	std	Y+11, r1	; 0x0b
    74d6:	1a 86       	std	Y+10, r1	; 0x0a
    74d8:	1d 86       	std	Y+13, r1	; 0x0d
    74da:	1c 86       	std	Y+12, r1	; 0x0c
    74dc:	1f 86       	std	Y+15, r1	; 0x0f
    74de:	1e 86       	std	Y+14, r1	; 0x0e
    74e0:	19 8a       	std	Y+17, r1	; 0x11
    74e2:	18 8a       	std	Y+16, r1	; 0x10
    74e4:	8c a1       	ldd	r24, Y+36	; 0x24
    74e6:	9d a1       	ldd	r25, Y+37	; 0x25
    74e8:	fc 01       	movw	r30, r24
    74ea:	20 81       	ld	r18, Z
    74ec:	20 32       	cpi	r18, 0x20	; 32
    74ee:	21 f4       	brne	.+8      	; 0x74f8 <setdate_r+0x4c>
    74f0:	01 96       	adiw	r24, 0x01	; 1
    74f2:	9d a3       	std	Y+37, r25	; 0x25
    74f4:	8c a3       	std	Y+36, r24	; 0x24
    74f6:	f6 cf       	rjmp	.-20     	; 0x74e4 <setdate_r+0x38>
    74f8:	4a e0       	ldi	r20, 0x0A	; 10
    74fa:	50 e0       	ldi	r21, 0x00	; 0
    74fc:	be 01       	movw	r22, r28
    74fe:	6c 5d       	subi	r22, 0xDC	; 220
    7500:	7f 4f       	sbci	r23, 0xFF	; 255
    7502:	0e 94 26 47 	call	0x8e4c	; 0x8e4c <strtol>
    7506:	79 8b       	std	Y+17, r23	; 0x11
    7508:	68 8b       	std	Y+16, r22	; 0x10
    750a:	8c a1       	ldd	r24, Y+36	; 0x24
    750c:	9d a1       	ldd	r25, Y+37	; 0x25
    750e:	fc 01       	movw	r30, r24
    7510:	20 81       	ld	r18, Z
    7512:	20 32       	cpi	r18, 0x20	; 32
    7514:	21 f4       	brne	.+8      	; 0x751e <setdate_r+0x72>
    7516:	01 96       	adiw	r24, 0x01	; 1
    7518:	9d a3       	std	Y+37, r25	; 0x25
    751a:	8c a3       	std	Y+36, r24	; 0x24
    751c:	f6 cf       	rjmp	.-20     	; 0x750a <setdate_r+0x5e>
    751e:	4a e0       	ldi	r20, 0x0A	; 10
    7520:	50 e0       	ldi	r21, 0x00	; 0
    7522:	be 01       	movw	r22, r28
    7524:	6c 5d       	subi	r22, 0xDC	; 220
    7526:	7f 4f       	sbci	r23, 0xFF	; 255
    7528:	0e 94 26 47 	call	0x8e4c	; 0x8e4c <strtol>
    752c:	7f 87       	std	Y+15, r23	; 0x0f
    752e:	6e 87       	std	Y+14, r22	; 0x0e
    7530:	8c a1       	ldd	r24, Y+36	; 0x24
    7532:	9d a1       	ldd	r25, Y+37	; 0x25
    7534:	fc 01       	movw	r30, r24
    7536:	20 81       	ld	r18, Z
    7538:	20 32       	cpi	r18, 0x20	; 32
    753a:	21 f4       	brne	.+8      	; 0x7544 <setdate_r+0x98>
    753c:	01 96       	adiw	r24, 0x01	; 1
    753e:	9d a3       	std	Y+37, r25	; 0x25
    7540:	8c a3       	std	Y+36, r24	; 0x24
    7542:	f6 cf       	rjmp	.-20     	; 0x7530 <setdate_r+0x84>
    7544:	4a e0       	ldi	r20, 0x0A	; 10
    7546:	50 e0       	ldi	r21, 0x00	; 0
    7548:	be 01       	movw	r22, r28
    754a:	6c 5d       	subi	r22, 0xDC	; 220
    754c:	7f 4f       	sbci	r23, 0xFF	; 255
    754e:	0e 94 26 47 	call	0x8e4c	; 0x8e4c <strtol>
    7552:	7d 87       	std	Y+13, r23	; 0x0d
    7554:	6c 87       	std	Y+12, r22	; 0x0c
    7556:	8c a1       	ldd	r24, Y+36	; 0x24
    7558:	9d a1       	ldd	r25, Y+37	; 0x25
    755a:	fc 01       	movw	r30, r24
    755c:	20 81       	ld	r18, Z
    755e:	20 32       	cpi	r18, 0x20	; 32
    7560:	21 f4       	brne	.+8      	; 0x756a <setdate_r+0xbe>
    7562:	01 96       	adiw	r24, 0x01	; 1
    7564:	9d a3       	std	Y+37, r25	; 0x25
    7566:	8c a3       	std	Y+36, r24	; 0x24
    7568:	f6 cf       	rjmp	.-20     	; 0x7556 <setdate_r+0xaa>
    756a:	4a e0       	ldi	r20, 0x0A	; 10
    756c:	50 e0       	ldi	r21, 0x00	; 0
    756e:	be 01       	movw	r22, r28
    7570:	6c 5d       	subi	r22, 0xDC	; 220
    7572:	7f 4f       	sbci	r23, 0xFF	; 255
    7574:	0e 94 26 47 	call	0x8e4c	; 0x8e4c <strtol>
    7578:	7b 87       	std	Y+11, r23	; 0x0b
    757a:	6a 87       	std	Y+10, r22	; 0x0a
    757c:	ec a1       	ldd	r30, Y+36	; 0x24
    757e:	fd a1       	ldd	r31, Y+37	; 0x25
    7580:	80 81       	ld	r24, Z
    7582:	88 23       	and	r24, r24
    7584:	39 f0       	breq	.+14     	; 0x7594 <setdate_r+0xe8>
    7586:	80 32       	cpi	r24, 0x20	; 32
    7588:	11 f0       	breq	.+4      	; 0x758e <setdate_r+0xe2>
    758a:	8a 33       	cpi	r24, 0x3A	; 58
    758c:	19 f4       	brne	.+6      	; 0x7594 <setdate_r+0xe8>
    758e:	31 96       	adiw	r30, 0x01	; 1
    7590:	fd a3       	std	Y+37, r31	; 0x25
    7592:	ec a3       	std	Y+36, r30	; 0x24
    7594:	4a e0       	ldi	r20, 0x0A	; 10
    7596:	50 e0       	ldi	r21, 0x00	; 0
    7598:	be 01       	movw	r22, r28
    759a:	6c 5d       	subi	r22, 0xDC	; 220
    759c:	7f 4f       	sbci	r23, 0xFF	; 255
    759e:	8c a1       	ldd	r24, Y+36	; 0x24
    75a0:	9d a1       	ldd	r25, Y+37	; 0x25
    75a2:	0e 94 26 47 	call	0x8e4c	; 0x8e4c <strtol>
    75a6:	79 87       	std	Y+9, r23	; 0x09
    75a8:	68 87       	std	Y+8, r22	; 0x08
    75aa:	ec a1       	ldd	r30, Y+36	; 0x24
    75ac:	fd a1       	ldd	r31, Y+37	; 0x25
    75ae:	80 81       	ld	r24, Z
    75b0:	88 23       	and	r24, r24
    75b2:	39 f0       	breq	.+14     	; 0x75c2 <setdate_r+0x116>
    75b4:	80 32       	cpi	r24, 0x20	; 32
    75b6:	11 f0       	breq	.+4      	; 0x75bc <setdate_r+0x110>
    75b8:	8a 33       	cpi	r24, 0x3A	; 58
    75ba:	19 f4       	brne	.+6      	; 0x75c2 <setdate_r+0x116>
    75bc:	31 96       	adiw	r30, 0x01	; 1
    75be:	fd a3       	std	Y+37, r31	; 0x25
    75c0:	ec a3       	std	Y+36, r30	; 0x24
    75c2:	4a e0       	ldi	r20, 0x0A	; 10
    75c4:	50 e0       	ldi	r21, 0x00	; 0
    75c6:	be 01       	movw	r22, r28
    75c8:	6c 5d       	subi	r22, 0xDC	; 220
    75ca:	7f 4f       	sbci	r23, 0xFF	; 255
    75cc:	8c a1       	ldd	r24, Y+36	; 0x24
    75ce:	9d a1       	ldd	r25, Y+37	; 0x25
    75d0:	0e 94 26 47 	call	0x8e4c	; 0x8e4c <strtol>
    75d4:	7f 83       	std	Y+7, r23	; 0x07
    75d6:	6e 83       	std	Y+6, r22	; 0x06
    75d8:	2e 85       	ldd	r18, Y+14	; 0x0e
    75da:	3f 85       	ldd	r19, Y+15	; 0x0f
    75dc:	21 50       	subi	r18, 0x01	; 1
    75de:	31 09       	sbc	r19, r1
    75e0:	3f 87       	std	Y+15, r19	; 0x0f
    75e2:	2e 87       	std	Y+14, r18	; 0x0e
    75e4:	88 89       	ldd	r24, Y+16	; 0x10
    75e6:	99 89       	ldd	r25, Y+17	; 0x11
    75e8:	ac 01       	movw	r20, r24
    75ea:	42 5b       	subi	r20, 0xB2	; 178
    75ec:	57 40       	sbci	r21, 0x07	; 7
    75ee:	45 34       	cpi	r20, 0x45	; 69
    75f0:	51 05       	cpc	r21, r1
    75f2:	38 f0       	brcs	.+14     	; 0x7602 <setdate_r+0x156>
    75f4:	ed b7       	in	r30, 0x3d	; 61
    75f6:	fe b7       	in	r31, 0x3e	; 62
    75f8:	95 83       	std	Z+5, r25	; 0x05
    75fa:	84 83       	std	Z+4, r24	; 0x04
    75fc:	89 e1       	ldi	r24, 0x19	; 25
    75fe:	97 e0       	ldi	r25, 0x07	; 7
    7600:	34 c0       	rjmp	.+104    	; 0x766a <setdate_r+0x1be>
    7602:	8c 56       	subi	r24, 0x6C	; 108
    7604:	97 40       	sbci	r25, 0x07	; 7
    7606:	99 8b       	std	Y+17, r25	; 0x11
    7608:	88 8b       	std	Y+16, r24	; 0x10
    760a:	2c 30       	cpi	r18, 0x0C	; 12
    760c:	31 05       	cpc	r19, r1
    760e:	38 f0       	brcs	.+14     	; 0x761e <setdate_r+0x172>
    7610:	ed b7       	in	r30, 0x3d	; 61
    7612:	fe b7       	in	r31, 0x3e	; 62
    7614:	95 83       	std	Z+5, r25	; 0x05
    7616:	84 83       	std	Z+4, r24	; 0x04
    7618:	88 e0       	ldi	r24, 0x08	; 8
    761a:	97 e0       	ldi	r25, 0x07	; 7
    761c:	26 c0       	rjmp	.+76     	; 0x766a <setdate_r+0x1be>
    761e:	8c 85       	ldd	r24, Y+12	; 0x0c
    7620:	9d 85       	ldd	r25, Y+13	; 0x0d
    7622:	9c 01       	movw	r18, r24
    7624:	21 50       	subi	r18, 0x01	; 1
    7626:	31 09       	sbc	r19, r1
    7628:	2f 31       	cpi	r18, 0x1F	; 31
    762a:	31 05       	cpc	r19, r1
    762c:	38 f0       	brcs	.+14     	; 0x763c <setdate_r+0x190>
    762e:	ed b7       	in	r30, 0x3d	; 61
    7630:	fe b7       	in	r31, 0x3e	; 62
    7632:	95 83       	std	Z+5, r25	; 0x05
    7634:	84 83       	std	Z+4, r24	; 0x04
    7636:	87 ef       	ldi	r24, 0xF7	; 247
    7638:	96 e0       	ldi	r25, 0x06	; 6
    763a:	17 c0       	rjmp	.+46     	; 0x766a <setdate_r+0x1be>
    763c:	8a 85       	ldd	r24, Y+10	; 0x0a
    763e:	9b 85       	ldd	r25, Y+11	; 0x0b
    7640:	88 31       	cpi	r24, 0x18	; 24
    7642:	91 05       	cpc	r25, r1
    7644:	38 f0       	brcs	.+14     	; 0x7654 <setdate_r+0x1a8>
    7646:	ed b7       	in	r30, 0x3d	; 61
    7648:	fe b7       	in	r31, 0x3e	; 62
    764a:	95 83       	std	Z+5, r25	; 0x05
    764c:	84 83       	std	Z+4, r24	; 0x04
    764e:	85 ee       	ldi	r24, 0xE5	; 229
    7650:	96 e0       	ldi	r25, 0x06	; 6
    7652:	0b c0       	rjmp	.+22     	; 0x766a <setdate_r+0x1be>
    7654:	88 85       	ldd	r24, Y+8	; 0x08
    7656:	99 85       	ldd	r25, Y+9	; 0x09
    7658:	8c 33       	cpi	r24, 0x3C	; 60
    765a:	91 05       	cpc	r25, r1
    765c:	68 f0       	brcs	.+26     	; 0x7678 <setdate_r+0x1cc>
    765e:	ed b7       	in	r30, 0x3d	; 61
    7660:	fe b7       	in	r31, 0x3e	; 62
    7662:	95 83       	std	Z+5, r25	; 0x05
    7664:	84 83       	std	Z+4, r24	; 0x04
    7666:	84 ed       	ldi	r24, 0xD4	; 212
    7668:	96 e0       	ldi	r25, 0x06	; 6
    766a:	a0 e0       	ldi	r26, 0x00	; 0
    766c:	81 83       	std	Z+1, r24	; 0x01
    766e:	92 83       	std	Z+2, r25	; 0x02
    7670:	a3 83       	std	Z+3, r26	; 0x03
    7672:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    7676:	25 c0       	rjmp	.+74     	; 0x76c2 <setdate_r+0x216>
    7678:	ce 01       	movw	r24, r28
    767a:	06 96       	adiw	r24, 0x06	; 6
    767c:	13 df       	rcall	.-474    	; 0x74a4 <timegm>
    767e:	6b 01       	movw	r12, r22
    7680:	7c 01       	movw	r14, r24
    7682:	6c 8f       	std	Y+28, r22	; 0x1c
    7684:	7d 8f       	std	Y+29, r23	; 0x1d
    7686:	8e 8f       	std	Y+30, r24	; 0x1e
    7688:	9f 8f       	std	Y+31, r25	; 0x1f
    768a:	18 a2       	std	Y+32, r1	; 0x20
    768c:	19 a2       	std	Y+33, r1	; 0x21
    768e:	1a a2       	std	Y+34, r1	; 0x22
    7690:	1b a2       	std	Y+35, r1	; 0x23
    7692:	be 01       	movw	r22, r28
    7694:	64 5e       	subi	r22, 0xE4	; 228
    7696:	7f 4f       	sbci	r23, 0xFF	; 255
    7698:	80 e0       	ldi	r24, 0x00	; 0
    769a:	90 e0       	ldi	r25, 0x00	; 0
    769c:	03 db       	rcall	.-2554   	; 0x6ca4 <clock_settime>
    769e:	b7 01       	movw	r22, r14
    76a0:	a6 01       	movw	r20, r12
    76a2:	81 e0       	ldi	r24, 0x01	; 1
    76a4:	90 e0       	ldi	r25, 0x00	; 0
    76a6:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <rtc_init>
    76aa:	81 11       	cpse	r24, r1
    76ac:	0d c0       	rjmp	.+26     	; 0x76c8 <setdate_r+0x21c>
    76ae:	8d eb       	ldi	r24, 0xBD	; 189
    76b0:	96 e0       	ldi	r25, 0x06	; 6
    76b2:	a0 e0       	ldi	r26, 0x00	; 0
    76b4:	ed b7       	in	r30, 0x3d	; 61
    76b6:	fe b7       	in	r31, 0x3e	; 62
    76b8:	81 83       	std	Z+1, r24	; 0x01
    76ba:	92 83       	std	Z+2, r25	; 0x02
    76bc:	a3 83       	std	Z+3, r26	; 0x03
    76be:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    76c2:	8f ef       	ldi	r24, 0xFF	; 255
    76c4:	9f ef       	ldi	r25, 0xFF	; 255
    76c6:	02 c0       	rjmp	.+4      	; 0x76cc <setdate_r+0x220>
    76c8:	80 e0       	ldi	r24, 0x00	; 0
    76ca:	90 e0       	ldi	r25, 0x00	; 0
    76cc:	a5 96       	adiw	r28, 0x25	; 37
    76ce:	0f b6       	in	r0, 0x3f	; 63
    76d0:	f8 94       	cli
    76d2:	de bf       	out	0x3e, r29	; 62
    76d4:	0f be       	out	0x3f, r0	; 63
    76d6:	cd bf       	out	0x3d, r28	; 61
    76d8:	df 91       	pop	r29
    76da:	cf 91       	pop	r28
    76dc:	ff 90       	pop	r15
    76de:	ef 90       	pop	r14
    76e0:	df 90       	pop	r13
    76e2:	cf 90       	pop	r12
    76e4:	08 95       	ret

000076e6 <setdate>:
    76e6:	ab e2       	ldi	r26, 0x2B	; 43
    76e8:	b0 e0       	ldi	r27, 0x00	; 0
    76ea:	e9 e7       	ldi	r30, 0x79	; 121
    76ec:	fb e3       	ldi	r31, 0x3B	; 59
    76ee:	0c 94 cb e6 	jmp	0x1cd96	; 0x1cd96 <__prologue_saves__+0x20>
    76f2:	8b e2       	ldi	r24, 0x2B	; 43
    76f4:	97 e0       	ldi	r25, 0x07	; 7
    76f6:	a0 e0       	ldi	r26, 0x00	; 0
    76f8:	ed b7       	in	r30, 0x3d	; 61
    76fa:	fe b7       	in	r31, 0x3e	; 62
    76fc:	81 83       	std	Z+1, r24	; 0x01
    76fe:	92 83       	std	Z+2, r25	; 0x02
    7700:	a3 83       	std	Z+3, r26	; 0x03
    7702:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    7706:	40 91 bf 1c 	lds	r20, 0x1CBF	; 0x801cbf <__iob>
    770a:	50 91 c0 1c 	lds	r21, 0x1CC0	; 0x801cc0 <__iob+0x1>
    770e:	66 e2       	ldi	r22, 0x26	; 38
    7710:	70 e0       	ldi	r23, 0x00	; 0
    7712:	ce 01       	movw	r24, r28
    7714:	04 96       	adiw	r24, 0x04	; 4
    7716:	0e 94 42 76 	call	0xec84	; 0xec84 <fgets>
    771a:	ce 01       	movw	r24, r28
    771c:	04 96       	adiw	r24, 0x04	; 4
    771e:	c6 de       	rcall	.-628    	; 0x74ac <setdate_r>
    7720:	ab 96       	adiw	r28, 0x2b	; 43
    7722:	e2 e0       	ldi	r30, 0x02	; 2
    7724:	0c 94 e7 e6 	jmp	0x1cdce	; 0x1cdce <__epilogue_restores__+0x20>

00007728 <find_dst>:
    7728:	a8 e2       	ldi	r26, 0x28	; 40
    772a:	b0 e0       	ldi	r27, 0x00	; 0
    772c:	ea e9       	ldi	r30, 0x9A	; 154
    772e:	fb e3       	ldi	r31, 0x3B	; 59
    7730:	0c 94 bb e6 	jmp	0x1cd76	; 0x1cd76 <__prologue_saves__>
    7734:	3c 01       	movw	r6, r24
    7736:	1a 01       	movw	r2, r20
    7738:	2b 01       	movw	r4, r22
    773a:	49 01       	movw	r8, r18
    773c:	1c a3       	std	Y+36, r17	; 0x24
    773e:	0b a3       	std	Y+35, r16	; 0x23
    7740:	de a2       	std	Y+38, r13	; 0x26
    7742:	cd a2       	std	Y+37, r12	; 0x25
    7744:	b8 a6       	std	Y+40, r11	; 0x28
    7746:	af a2       	std	Y+39, r10	; 0x27
    7748:	be 01       	movw	r22, r28
    774a:	61 5e       	subi	r22, 0xE1	; 225
    774c:	7f 4f       	sbci	r23, 0xFF	; 255
    774e:	ce 01       	movw	r24, r28
    7750:	47 96       	adiw	r24, 0x17	; 23
    7752:	15 dc       	rcall	.-2006   	; 0x6f7e <gettimeofday>
    7754:	af 8d       	ldd	r26, Y+31	; 0x1f
    7756:	b8 a1       	ldd	r27, Y+32	; 0x20
    7758:	2c e3       	ldi	r18, 0x3C	; 60
    775a:	30 e0       	ldi	r19, 0x00	; 0
    775c:	0e 94 95 e6 	call	0x1cd2a	; 0x1cd2a <__usmulhisi3>
    7760:	5b 01       	movw	r10, r22
    7762:	6c 01       	movw	r12, r24
    7764:	61 14       	cp	r6, r1
    7766:	71 04       	cpc	r7, r1
    7768:	31 f0       	breq	.+12     	; 0x7776 <find_dst+0x4e>
    776a:	20 e1       	ldi	r18, 0x10	; 16
    776c:	a2 1a       	sub	r10, r18
    776e:	2e e0       	ldi	r18, 0x0E	; 14
    7770:	b2 0a       	sbc	r11, r18
    7772:	c1 08       	sbc	r12, r1
    7774:	d1 08       	sbc	r13, r1
    7776:	81 14       	cp	r8, r1
    7778:	91 04       	cpc	r9, r1
    777a:	39 f0       	breq	.+14     	; 0x778a <find_dst+0x62>
    777c:	4c e6       	ldi	r20, 0x6C	; 108
    777e:	84 1a       	sub	r8, r20
    7780:	47 e0       	ldi	r20, 0x07	; 7
    7782:	94 0a       	sbc	r9, r20
    7784:	9c 86       	std	Y+12, r9	; 0x0c
    7786:	8b 86       	std	Y+11, r8	; 0x0b
    7788:	11 c0       	rjmp	.+34     	; 0x77ac <find_dst+0x84>
    778a:	21 14       	cp	r2, r1
    778c:	31 04       	cpc	r3, r1
    778e:	41 04       	cpc	r4, r1
    7790:	51 04       	cpc	r5, r1
    7792:	21 f4       	brne	.+8      	; 0x779c <find_dst+0x74>
    7794:	2f 88       	ldd	r2, Y+23	; 0x17
    7796:	38 8c       	ldd	r3, Y+24	; 0x18
    7798:	49 8c       	ldd	r4, Y+25	; 0x19
    779a:	5a 8c       	ldd	r5, Y+26	; 0x1a
    779c:	8e 01       	movw	r16, r28
    779e:	0f 5f       	subi	r16, 0xFF	; 255
    77a0:	1f 4f       	sbci	r17, 0xFF	; 255
    77a2:	a6 01       	movw	r20, r12
    77a4:	95 01       	movw	r18, r10
    77a6:	c2 01       	movw	r24, r4
    77a8:	b1 01       	movw	r22, r2
    77aa:	ca da       	rcall	.-2668   	; 0x6d40 <time_to_tm>
    77ac:	8b a1       	ldd	r24, Y+35	; 0x23
    77ae:	9c a1       	ldd	r25, Y+36	; 0x24
    77b0:	01 97       	sbiw	r24, 0x01	; 1
    77b2:	9a 87       	std	Y+10, r25	; 0x0a
    77b4:	89 87       	std	Y+9, r24	; 0x09
    77b6:	81 e0       	ldi	r24, 0x01	; 1
    77b8:	90 e0       	ldi	r25, 0x00	; 0
    77ba:	98 87       	std	Y+8, r25	; 0x08
    77bc:	8f 83       	std	Y+7, r24	; 0x07
    77be:	8f a1       	ldd	r24, Y+39	; 0x27
    77c0:	98 a5       	ldd	r25, Y+40	; 0x28
    77c2:	9e 83       	std	Y+6, r25	; 0x06
    77c4:	8d 83       	std	Y+5, r24	; 0x05
    77c6:	1c 82       	std	Y+4, r1	; 0x04
    77c8:	1b 82       	std	Y+3, r1	; 0x03
    77ca:	1a 82       	std	Y+2, r1	; 0x02
    77cc:	19 82       	std	Y+1, r1	; 0x01
    77ce:	ce 01       	movw	r24, r28
    77d0:	01 96       	adiw	r24, 0x01	; 1
    77d2:	68 de       	rcall	.-816    	; 0x74a4 <timegm>
    77d4:	45 01       	movw	r8, r10
    77d6:	56 01       	movw	r10, r12
    77d8:	86 0e       	add	r8, r22
    77da:	97 1e       	adc	r9, r23
    77dc:	a8 1e       	adc	r10, r24
    77de:	b9 1e       	adc	r11, r25
    77e0:	8e 01       	movw	r16, r28
    77e2:	0f 5f       	subi	r16, 0xFF	; 255
    77e4:	1f 4f       	sbci	r17, 0xFF	; 255
    77e6:	20 e0       	ldi	r18, 0x00	; 0
    77e8:	30 e0       	ldi	r19, 0x00	; 0
    77ea:	a9 01       	movw	r20, r18
    77ec:	c5 01       	movw	r24, r10
    77ee:	b4 01       	movw	r22, r8
    77f0:	a7 da       	rcall	.-2738   	; 0x6d40 <time_to_tm>
    77f2:	2d 85       	ldd	r18, Y+13	; 0x0d
    77f4:	3e 85       	ldd	r19, Y+14	; 0x0e
    77f6:	e7 e0       	ldi	r30, 0x07	; 7
    77f8:	f0 e0       	ldi	r31, 0x00	; 0
    77fa:	c9 01       	movw	r24, r18
    77fc:	bf 01       	movw	r22, r30
    77fe:	0e 94 3b e6 	call	0x1cc76	; 0x1cc76 <__divmodhi4>
    7802:	4d a1       	ldd	r20, Y+37	; 0x25
    7804:	5e a1       	ldd	r21, Y+38	; 0x26
    7806:	48 17       	cp	r20, r24
    7808:	59 07       	cpc	r21, r25
    780a:	21 f4       	brne	.+8      	; 0x7814 <find_dst+0xec>
    780c:	51 e0       	ldi	r21, 0x01	; 1
    780e:	e5 1a       	sub	r14, r21
    7810:	f1 08       	sbc	r15, r1
    7812:	51 f0       	breq	.+20     	; 0x7828 <find_dst+0x100>
    7814:	80 e8       	ldi	r24, 0x80	; 128
    7816:	88 0e       	add	r8, r24
    7818:	81 e5       	ldi	r24, 0x51	; 81
    781a:	98 1e       	adc	r9, r24
    781c:	81 e0       	ldi	r24, 0x01	; 1
    781e:	a8 1e       	adc	r10, r24
    7820:	b1 1c       	adc	r11, r1
    7822:	2f 5f       	subi	r18, 0xFF	; 255
    7824:	3f 4f       	sbci	r19, 0xFF	; 255
    7826:	e9 cf       	rjmp	.-46     	; 0x77fa <find_dst+0xd2>
    7828:	c5 01       	movw	r24, r10
    782a:	b4 01       	movw	r22, r8
    782c:	a8 96       	adiw	r28, 0x28	; 40
    782e:	e2 e1       	ldi	r30, 0x12	; 18
    7830:	0c 94 d7 e6 	jmp	0x1cdae	; 0x1cdae <__epilogue_restores__>

00007834 <set_dst>:
    7834:	4f 92       	push	r4
    7836:	5f 92       	push	r5
    7838:	6f 92       	push	r6
    783a:	7f 92       	push	r7
    783c:	af 92       	push	r10
    783e:	bf 92       	push	r11
    7840:	cf 92       	push	r12
    7842:	df 92       	push	r13
    7844:	ef 92       	push	r14
    7846:	ff 92       	push	r15
    7848:	0f 93       	push	r16
    784a:	1f 93       	push	r17
    784c:	cf 93       	push	r28
    784e:	df 93       	push	r29
    7850:	cd b7       	in	r28, 0x3d	; 61
    7852:	de b7       	in	r29, 0x3e	; 62
    7854:	2c 97       	sbiw	r28, 0x0c	; 12
    7856:	0f b6       	in	r0, 0x3f	; 63
    7858:	f8 94       	cli
    785a:	de bf       	out	0x3e, r29	; 62
    785c:	0f be       	out	0x3f, r0	; 63
    785e:	cd bf       	out	0x3d, r28	; 61
    7860:	2b 01       	movw	r4, r22
    7862:	3c 01       	movw	r6, r24
    7864:	67 2b       	or	r22, r23
    7866:	68 2b       	or	r22, r24
    7868:	69 2b       	or	r22, r25
    786a:	51 f4       	brne	.+20     	; 0x7880 <set_dst+0x4c>
    786c:	be 01       	movw	r22, r28
    786e:	67 5f       	subi	r22, 0xF7	; 247
    7870:	7f 4f       	sbci	r23, 0xFF	; 255
    7872:	ce 01       	movw	r24, r28
    7874:	01 96       	adiw	r24, 0x01	; 1
    7876:	83 db       	rcall	.-2298   	; 0x6f7e <gettimeofday>
    7878:	49 80       	ldd	r4, Y+1	; 0x01
    787a:	5a 80       	ldd	r5, Y+2	; 0x02
    787c:	6b 80       	ldd	r6, Y+3	; 0x03
    787e:	7c 80       	ldd	r7, Y+4	; 0x04
    7880:	80 91 7c 1a 	lds	r24, 0x1A7C	; 0x801a7c <dst+0x8>
    7884:	90 91 7d 1a 	lds	r25, 0x1A7D	; 0x801a7d <dst+0x9>
    7888:	a0 91 7e 1a 	lds	r26, 0x1A7E	; 0x801a7e <dst+0xa>
    788c:	b0 91 7f 1a 	lds	r27, 0x1A7F	; 0x801a7f <dst+0xb>
    7890:	84 15       	cp	r24, r4
    7892:	95 05       	cpc	r25, r5
    7894:	a6 05       	cpc	r26, r6
    7896:	b7 05       	cpc	r27, r7
    7898:	50 f0       	brcs	.+20     	; 0x78ae <set_dst+0x7a>
    789a:	84 19       	sub	r24, r4
    789c:	95 09       	sbc	r25, r5
    789e:	a6 09       	sbc	r26, r6
    78a0:	b7 09       	sbc	r27, r7
    78a2:	80 38       	cpi	r24, 0x80	; 128
    78a4:	91 45       	sbci	r25, 0x51	; 81
    78a6:	a1 40       	sbci	r26, 0x01	; 1
    78a8:	b1 05       	cpc	r27, r1
    78aa:	70 f4       	brcc	.+28     	; 0x78c8 <set_dst+0x94>
    78ac:	42 c0       	rjmp	.+132    	; 0x7932 <set_dst+0xfe>
    78ae:	a3 01       	movw	r20, r6
    78b0:	92 01       	movw	r18, r4
    78b2:	28 1b       	sub	r18, r24
    78b4:	39 0b       	sbc	r19, r25
    78b6:	4a 0b       	sbc	r20, r26
    78b8:	5b 0b       	sbc	r21, r27
    78ba:	da 01       	movw	r26, r20
    78bc:	c9 01       	movw	r24, r18
    78be:	80 38       	cpi	r24, 0x80	; 128
    78c0:	91 45       	sbci	r25, 0x51	; 81
    78c2:	a1 40       	sbci	r26, 0x01	; 1
    78c4:	b1 05       	cpc	r27, r1
    78c6:	a8 f1       	brcs	.+106    	; 0x7932 <set_dst+0xfe>
    78c8:	40 92 7c 1a 	sts	0x1A7C, r4	; 0x801a7c <dst+0x8>
    78cc:	50 92 7d 1a 	sts	0x1A7D, r5	; 0x801a7d <dst+0x9>
    78d0:	60 92 7e 1a 	sts	0x1A7E, r6	; 0x801a7e <dst+0xa>
    78d4:	70 92 7f 1a 	sts	0x1A7F, r7	; 0x801a7f <dst+0xb>
    78d8:	82 e0       	ldi	r24, 0x02	; 2
    78da:	a8 2e       	mov	r10, r24
    78dc:	b1 2c       	mov	r11, r1
    78de:	c1 2c       	mov	r12, r1
    78e0:	d1 2c       	mov	r13, r1
    78e2:	92 e0       	ldi	r25, 0x02	; 2
    78e4:	e9 2e       	mov	r14, r25
    78e6:	f1 2c       	mov	r15, r1
    78e8:	03 e0       	ldi	r16, 0x03	; 3
    78ea:	10 e0       	ldi	r17, 0x00	; 0
    78ec:	20 e0       	ldi	r18, 0x00	; 0
    78ee:	30 e0       	ldi	r19, 0x00	; 0
    78f0:	b3 01       	movw	r22, r6
    78f2:	a2 01       	movw	r20, r4
    78f4:	80 e0       	ldi	r24, 0x00	; 0
    78f6:	90 e0       	ldi	r25, 0x00	; 0
    78f8:	17 df       	rcall	.-466    	; 0x7728 <find_dst>
    78fa:	60 93 74 1a 	sts	0x1A74, r22	; 0x801a74 <dst>
    78fe:	70 93 75 1a 	sts	0x1A75, r23	; 0x801a75 <dst+0x1>
    7902:	80 93 76 1a 	sts	0x1A76, r24	; 0x801a76 <dst+0x2>
    7906:	90 93 77 1a 	sts	0x1A77, r25	; 0x801a77 <dst+0x3>
    790a:	ee 24       	eor	r14, r14
    790c:	e3 94       	inc	r14
    790e:	f1 2c       	mov	r15, r1
    7910:	0b e0       	ldi	r16, 0x0B	; 11
    7912:	10 e0       	ldi	r17, 0x00	; 0
    7914:	20 e0       	ldi	r18, 0x00	; 0
    7916:	30 e0       	ldi	r19, 0x00	; 0
    7918:	b3 01       	movw	r22, r6
    791a:	a2 01       	movw	r20, r4
    791c:	81 e0       	ldi	r24, 0x01	; 1
    791e:	90 e0       	ldi	r25, 0x00	; 0
    7920:	03 df       	rcall	.-506    	; 0x7728 <find_dst>
    7922:	60 93 78 1a 	sts	0x1A78, r22	; 0x801a78 <dst+0x4>
    7926:	70 93 79 1a 	sts	0x1A79, r23	; 0x801a79 <dst+0x5>
    792a:	80 93 7a 1a 	sts	0x1A7A, r24	; 0x801a7a <dst+0x6>
    792e:	90 93 7b 1a 	sts	0x1A7B, r25	; 0x801a7b <dst+0x7>
    7932:	2c 96       	adiw	r28, 0x0c	; 12
    7934:	0f b6       	in	r0, 0x3f	; 63
    7936:	f8 94       	cli
    7938:	de bf       	out	0x3e, r29	; 62
    793a:	0f be       	out	0x3f, r0	; 63
    793c:	cd bf       	out	0x3d, r28	; 61
    793e:	df 91       	pop	r29
    7940:	cf 91       	pop	r28
    7942:	1f 91       	pop	r17
    7944:	0f 91       	pop	r16
    7946:	ff 90       	pop	r15
    7948:	ef 90       	pop	r14
    794a:	df 90       	pop	r13
    794c:	cf 90       	pop	r12
    794e:	bf 90       	pop	r11
    7950:	af 90       	pop	r10
    7952:	7f 90       	pop	r7
    7954:	6f 90       	pop	r6
    7956:	5f 90       	pop	r5
    7958:	4f 90       	pop	r4
    795a:	08 95       	ret

0000795c <asctime_r>:
    795c:	a5 e1       	ldi	r26, 0x15	; 21
    795e:	b0 e0       	ldi	r27, 0x00	; 0
    7960:	e4 eb       	ldi	r30, 0xB4	; 180
    7962:	fc e3       	ldi	r31, 0x3C	; 60
    7964:	0c 94 c9 e6 	jmp	0x1cd92	; 0x1cd92 <__prologue_saves__+0x1c>
    7968:	ec 01       	movw	r28, r24
    796a:	8b 01       	movw	r16, r22
    796c:	60 e0       	ldi	r22, 0x00	; 0
    796e:	70 e0       	ldi	r23, 0x00	; 0
    7970:	d1 db       	rcall	.-2142   	; 0x7114 <normalize>
    7972:	80 e2       	ldi	r24, 0x20	; 32
    7974:	f8 01       	movw	r30, r16
    7976:	11 92       	st	Z+, r1
    7978:	8a 95       	dec	r24
    797a:	e9 f7       	brne	.-6      	; 0x7976 <asctime_r+0x1a>
    797c:	8a 85       	ldd	r24, Y+10	; 0x0a
    797e:	9b 85       	ldd	r25, Y+11	; 0x0b
    7980:	84 59       	subi	r24, 0x94	; 148
    7982:	98 4f       	sbci	r25, 0xF8	; 248
    7984:	ed b7       	in	r30, 0x3d	; 61
    7986:	fe b7       	in	r31, 0x3e	; 62
    7988:	95 8b       	std	Z+21, r25	; 0x15
    798a:	84 8b       	std	Z+20, r24	; 0x14
    798c:	88 81       	ld	r24, Y
    798e:	99 81       	ldd	r25, Y+1	; 0x01
    7990:	93 8b       	std	Z+19, r25	; 0x13
    7992:	82 8b       	std	Z+18, r24	; 0x12
    7994:	8a 81       	ldd	r24, Y+2	; 0x02
    7996:	9b 81       	ldd	r25, Y+3	; 0x03
    7998:	91 8b       	std	Z+17, r25	; 0x11
    799a:	80 8b       	std	Z+16, r24	; 0x10
    799c:	8c 81       	ldd	r24, Y+4	; 0x04
    799e:	9d 81       	ldd	r25, Y+5	; 0x05
    79a0:	97 87       	std	Z+15, r25	; 0x0f
    79a2:	86 87       	std	Z+14, r24	; 0x0e
    79a4:	8e 81       	ldd	r24, Y+6	; 0x06
    79a6:	9f 81       	ldd	r25, Y+7	; 0x07
    79a8:	95 87       	std	Z+13, r25	; 0x0d
    79aa:	84 87       	std	Z+12, r24	; 0x0c
    79ac:	e8 85       	ldd	r30, Y+8	; 0x08
    79ae:	f9 85       	ldd	r31, Y+9	; 0x09
    79b0:	ee 0f       	add	r30, r30
    79b2:	ff 1f       	adc	r31, r31
    79b4:	e5 5f       	subi	r30, 0xF5	; 245
    79b6:	fe 4f       	sbci	r31, 0xFE	; 254
    79b8:	80 81       	ld	r24, Z
    79ba:	91 81       	ldd	r25, Z+1	; 0x01
    79bc:	ed b7       	in	r30, 0x3d	; 61
    79be:	fe b7       	in	r31, 0x3e	; 62
    79c0:	93 87       	std	Z+11, r25	; 0x0b
    79c2:	82 87       	std	Z+10, r24	; 0x0a
    79c4:	ec 85       	ldd	r30, Y+12	; 0x0c
    79c6:	fd 85       	ldd	r31, Y+13	; 0x0d
    79c8:	ee 0f       	add	r30, r30
    79ca:	ff 1f       	adc	r31, r31
    79cc:	eb 5d       	subi	r30, 0xDB	; 219
    79ce:	fe 4f       	sbci	r31, 0xFE	; 254
    79d0:	80 81       	ld	r24, Z
    79d2:	91 81       	ldd	r25, Z+1	; 0x01
    79d4:	ed b7       	in	r30, 0x3d	; 61
    79d6:	fe b7       	in	r31, 0x3e	; 62
    79d8:	91 87       	std	Z+9, r25	; 0x09
    79da:	80 87       	std	Z+8, r24	; 0x08
    79dc:	8c e4       	ldi	r24, 0x4C	; 76
    79de:	97 e0       	ldi	r25, 0x07	; 7
    79e0:	a0 e0       	ldi	r26, 0x00	; 0
    79e2:	85 83       	std	Z+5, r24	; 0x05
    79e4:	96 83       	std	Z+6, r25	; 0x06
    79e6:	a7 83       	std	Z+7, r26	; 0x07
    79e8:	80 e2       	ldi	r24, 0x20	; 32
    79ea:	90 e0       	ldi	r25, 0x00	; 0
    79ec:	94 83       	std	Z+4, r25	; 0x04
    79ee:	83 83       	std	Z+3, r24	; 0x03
    79f0:	12 83       	std	Z+2, r17	; 0x02
    79f2:	01 83       	std	Z+1, r16	; 0x01
    79f4:	0e 94 c3 46 	call	0x8d86	; 0x8d86 <snprintf_P>
    79f8:	c8 01       	movw	r24, r16
    79fa:	cd b7       	in	r28, 0x3d	; 61
    79fc:	de b7       	in	r29, 0x3e	; 62
    79fe:	65 96       	adiw	r28, 0x15	; 21
    7a00:	e4 e0       	ldi	r30, 0x04	; 4
    7a02:	0c 94 e5 e6 	jmp	0x1cdca	; 0x1cdca <__epilogue_restores__+0x1c>

00007a06 <asctime>:
    7a06:	6e ef       	ldi	r22, 0xFE	; 254
    7a08:	77 e1       	ldi	r23, 0x17	; 23
    7a0a:	a8 cf       	rjmp	.-176    	; 0x795c <asctime_r>
    7a0c:	08 95       	ret

00007a0e <ctime_gm>:
    7a0e:	a6 e1       	ldi	r26, 0x16	; 22
    7a10:	b0 e0       	ldi	r27, 0x00	; 0
    7a12:	ed e0       	ldi	r30, 0x0D	; 13
    7a14:	fd e3       	ldi	r31, 0x3D	; 61
    7a16:	0c 94 cb e6 	jmp	0x1cd96	; 0x1cd96 <__prologue_saves__+0x20>
    7a1a:	be 01       	movw	r22, r28
    7a1c:	6f 5f       	subi	r22, 0xFF	; 255
    7a1e:	7f 4f       	sbci	r23, 0xFF	; 255
    7a20:	6d da       	rcall	.-2854   	; 0x6efc <gmtime_r>
    7a22:	6e ed       	ldi	r22, 0xDE	; 222
    7a24:	77 e1       	ldi	r23, 0x17	; 23
    7a26:	9a df       	rcall	.-204    	; 0x795c <asctime_r>
    7a28:	66 96       	adiw	r28, 0x16	; 22
    7a2a:	e2 e0       	ldi	r30, 0x02	; 2
    7a2c:	0c 94 e7 e6 	jmp	0x1cdce	; 0x1cdce <__epilogue_restores__+0x20>

00007a30 <initialize_clock>:
/// @param[in] minwest: your time zone as minute west
///@return  void
///@see: clock_settime()
MEMSPACE
void initialize_clock(int minwest)
{
    7a30:	a5 e2       	ldi	r26, 0x25	; 37
    7a32:	b0 e0       	ldi	r27, 0x00	; 0
    7a34:	ee e1       	ldi	r30, 0x1E	; 30
    7a36:	fd e3       	ldi	r31, 0x3D	; 61
    7a38:	0c 94 c5 e6 	jmp	0x1cd8a	; 0x1cd8a <__prologue_saves__+0x14>
    7a3c:	8c 01       	movw	r16, r24
    tm_t tc;
    ts_t ts;
    tz_t tz;

#ifdef RTC_SUPPORT
    if(!rtc_init(0,0L))
    7a3e:	40 e0       	ldi	r20, 0x00	; 0
    7a40:	50 e0       	ldi	r21, 0x00	; 0
    7a42:	ba 01       	movw	r22, r20
    7a44:	80 e0       	ldi	r24, 0x00	; 0
    7a46:	90 e0       	ldi	r25, 0x00	; 0
    7a48:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <rtc_init>
    7a4c:	81 11       	cpse	r24, r1
    7a4e:	27 c0       	rjmp	.+78     	; 0x7a9e <initialize_clock+0x6e>
    {
        printf("rtc uninitilized\n");
    7a50:	8b ea       	ldi	r24, 0xAB	; 171
    7a52:	96 e0       	ldi	r25, 0x06	; 6
    7a54:	a0 e0       	ldi	r26, 0x00	; 0
    7a56:	ed b7       	in	r30, 0x3d	; 61
    7a58:	fe b7       	in	r31, 0x3e	; 62
    7a5a:	81 83       	std	Z+1, r24	; 0x01
    7a5c:	92 83       	std	Z+2, r25	; 0x02
    7a5e:	a3 83       	std	Z+3, r26	; 0x03
    7a60:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
        printf("attempting rtc init\n");
    7a64:	86 e9       	ldi	r24, 0x96	; 150
    7a66:	96 e0       	ldi	r25, 0x06	; 6
    7a68:	a0 e0       	ldi	r26, 0x00	; 0
    7a6a:	ed b7       	in	r30, 0x3d	; 61
    7a6c:	fe b7       	in	r31, 0x3e	; 62
    7a6e:	81 83       	std	Z+1, r24	; 0x01
    7a70:	92 83       	std	Z+2, r25	; 0x02
    7a72:	a3 83       	std	Z+3, r26	; 0x03
    7a74:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
        if( !rtc_init(1, (time_t) 0) )
    7a78:	40 e0       	ldi	r20, 0x00	; 0
    7a7a:	50 e0       	ldi	r21, 0x00	; 0
    7a7c:	ba 01       	movw	r22, r20
    7a7e:	81 e0       	ldi	r24, 0x01	; 1
    7a80:	90 e0       	ldi	r25, 0x00	; 0
    7a82:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <rtc_init>
    7a86:	81 11       	cpse	r24, r1
    7a88:	0a c0       	rjmp	.+20     	; 0x7a9e <initialize_clock+0x6e>
        {
            printf("rtc force init failed\n");
    7a8a:	8f e7       	ldi	r24, 0x7F	; 127
    7a8c:	96 e0       	ldi	r25, 0x06	; 6
    7a8e:	a0 e0       	ldi	r26, 0x00	; 0
    7a90:	ed b7       	in	r30, 0x3d	; 61
    7a92:	fe b7       	in	r31, 0x3e	; 62
    7a94:	81 83       	std	Z+1, r24	; 0x01
    7a96:	92 83       	std	Z+2, r25	; 0x02
    7a98:	a3 83       	std	Z+3, r26	; 0x03
    7a9a:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
        }
    }

    if(rtc_read(&tc))
    7a9e:	ce 01       	movw	r24, r28
    7aa0:	04 96       	adiw	r24, 0x04	; 4
    7aa2:	0e 94 38 30 	call	0x6070	; 0x6070 <rtc_read>
    7aa6:	88 23       	and	r24, r24
    7aa8:	51 f0       	breq	.+20     	; 0x7abe <initialize_clock+0x8e>
    {
        seconds = timegm(&tc);
    7aaa:	ce 01       	movw	r24, r28
    7aac:	04 96       	adiw	r24, 0x04	; 4
    7aae:	fa dc       	rcall	.-1548   	; 0x74a4 <timegm>
    7ab0:	6b 01       	movw	r12, r22
    7ab2:	7c 01       	movw	r14, r24
    }
#else
    printf("NO RTC\n");
    seconds = 0;
#endif                                        // RTC_SUPPORT
    if(!seconds)
    7ab4:	67 2b       	or	r22, r23
    7ab6:	68 2b       	or	r22, r24
    7ab8:	69 2b       	or	r22, r25
    7aba:	c1 f4       	brne	.+48     	; 0x7aec <initialize_clock+0xbc>
    7abc:	0a c0       	rjmp	.+20     	; 0x7ad2 <initialize_clock+0xa2>
        seconds = timegm(&tc);
    }
    else
    {
        seconds = 0;
        printf("rtc read errorafter init\n");
    7abe:	85 e6       	ldi	r24, 0x65	; 101
    7ac0:	96 e0       	ldi	r25, 0x06	; 6
    7ac2:	a0 e0       	ldi	r26, 0x00	; 0
    7ac4:	ed b7       	in	r30, 0x3d	; 61
    7ac6:	fe b7       	in	r31, 0x3e	; 62
    7ac8:	81 83       	std	Z+1, r24	; 0x01
    7aca:	92 83       	std	Z+2, r25	; 0x02
    7acc:	a3 83       	std	Z+3, r26	; 0x03
    7ace:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
#else
    printf("NO RTC\n");
    seconds = 0;
#endif                                        // RTC_SUPPORT
    if(!seconds)
        printf("use setdate command to change time\n");
    7ad2:	81 e4       	ldi	r24, 0x41	; 65
    7ad4:	96 e0       	ldi	r25, 0x06	; 6
    7ad6:	a0 e0       	ldi	r26, 0x00	; 0
    7ad8:	ed b7       	in	r30, 0x3d	; 61
    7ada:	fe b7       	in	r31, 0x3e	; 62
    7adc:	81 83       	std	Z+1, r24	; 0x01
    7ade:	92 83       	std	Z+2, r25	; 0x02
    7ae0:	a3 83       	std	Z+3, r26	; 0x03
    7ae2:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    7ae6:	c1 2c       	mov	r12, r1
    7ae8:	d1 2c       	mov	r13, r1
    7aea:	76 01       	movw	r14, r12
    tz.tz_minuteswest = minwest;
    7aec:	1b a3       	std	Y+35, r17	; 0x23
    7aee:	0a a3       	std	Y+34, r16	; 0x22
    tz.tz_dsttime = 0;
    7af0:	1d a2       	std	Y+37, r1	; 0x25
    7af2:	1c a2       	std	Y+36, r1	; 0x24
    settimezone( &tz );
    7af4:	ce 01       	movw	r24, r28
    7af6:	82 96       	adiw	r24, 0x22	; 34
    7af8:	30 da       	rcall	.-2976   	; 0x6f5a <settimezone>

    ts.tv_sec = seconds;
    7afa:	ca 8e       	std	Y+26, r12	; 0x1a
    7afc:	db 8e       	std	Y+27, r13	; 0x1b
    7afe:	ec 8e       	std	Y+28, r14	; 0x1c
    7b00:	fd 8e       	std	Y+29, r15	; 0x1d
    ts.tv_nsec = 0L;
    7b02:	1e 8e       	std	Y+30, r1	; 0x1e
    7b04:	1f 8e       	std	Y+31, r1	; 0x1f
    7b06:	18 a2       	std	Y+32, r1	; 0x20
    7b08:	19 a2       	std	Y+33, r1	; 0x21
    clock_settime(0, (ts_t *) &ts);
    7b0a:	be 01       	movw	r22, r28
    7b0c:	66 5e       	subi	r22, 0xE6	; 230
    7b0e:	7f 4f       	sbci	r23, 0xFF	; 255
    7b10:	80 e0       	ldi	r24, 0x00	; 0
    7b12:	90 e0       	ldi	r25, 0x00	; 0
    7b14:	c7 d8       	rcall	.-3698   	; 0x6ca4 <clock_settime>
}
    7b16:	a5 96       	adiw	r28, 0x25	; 37
    7b18:	e8 e0       	ldi	r30, 0x08	; 8
    7b1a:	0c 94 e1 e6 	jmp	0x1cdc2	; 0x1cdc2 <__epilogue_restores__+0x14>

00007b1e <display_clock>:
/// @see: rtc_read
/// @see: timegm()
/// @see: ascitime()
MEMSPACE
void display_clock()
{
    7b1e:	a9 e2       	ldi	r26, 0x29	; 41
    7b20:	b0 e0       	ldi	r27, 0x00	; 0
    7b22:	e5 e9       	ldi	r30, 0x95	; 149
    7b24:	fd e3       	ldi	r31, 0x3D	; 61
    7b26:	0c 94 cb e6 	jmp	0x1cd96	; 0x1cd96 <__prologue_saves__+0x20>
    time_t seconds;
    tm_t tc;
    ts_t ts;

#ifdef RTC_SUPPORT
    if(rtc_read(&tc))
    7b2a:	ce 01       	movw	r24, r28
    7b2c:	08 96       	adiw	r24, 0x08	; 8
    7b2e:	0e 94 38 30 	call	0x6070	; 0x6070 <rtc_read>
    7b32:	88 23       	and	r24, r24
    7b34:	29 f1       	breq	.+74     	; 0x7b80 <display_clock+0x62>
    {
        seconds = timegm(&tc);
    7b36:	ce 01       	movw	r24, r28
    7b38:	08 96       	adiw	r24, 0x08	; 8
    7b3a:	b4 dc       	rcall	.-1688   	; 0x74a4 <timegm>
    7b3c:	6e a3       	std	Y+38, r22	; 0x26
    7b3e:	7f a3       	std	Y+39, r23	; 0x27
    7b40:	88 a7       	std	Y+40, r24	; 0x28
    7b42:	99 a7       	std	Y+41, r25	; 0x29
        printf("rtc seconds: %lu\n",seconds);
    7b44:	ed b7       	in	r30, 0x3d	; 61
    7b46:	fe b7       	in	r31, 0x3e	; 62
    7b48:	64 83       	std	Z+4, r22	; 0x04
    7b4a:	75 83       	std	Z+5, r23	; 0x05
    7b4c:	86 83       	std	Z+6, r24	; 0x06
    7b4e:	97 83       	std	Z+7, r25	; 0x07
    7b50:	8f e2       	ldi	r24, 0x2F	; 47
    7b52:	96 e0       	ldi	r25, 0x06	; 6
    7b54:	a0 e0       	ldi	r26, 0x00	; 0
    7b56:	81 83       	std	Z+1, r24	; 0x01
    7b58:	92 83       	std	Z+2, r25	; 0x02
    7b5a:	a3 83       	std	Z+3, r26	; 0x03
    7b5c:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
        printf("rtc time:    %s\n",asctime(&tc));
    7b60:	ce 01       	movw	r24, r28
    7b62:	08 96       	adiw	r24, 0x08	; 8
    7b64:	50 df       	rcall	.-352    	; 0x7a06 <asctime>
    7b66:	ed b7       	in	r30, 0x3d	; 61
    7b68:	fe b7       	in	r31, 0x3e	; 62
    7b6a:	95 83       	std	Z+5, r25	; 0x05
    7b6c:	84 83       	std	Z+4, r24	; 0x04
    7b6e:	8e e1       	ldi	r24, 0x1E	; 30
    7b70:	96 e0       	ldi	r25, 0x06	; 6
    7b72:	a0 e0       	ldi	r26, 0x00	; 0
    7b74:	81 83       	std	Z+1, r24	; 0x01
    7b76:	92 83       	std	Z+2, r25	; 0x02
    7b78:	a3 83       	std	Z+3, r26	; 0x03
    7b7a:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    7b7e:	0a c0       	rjmp	.+20     	; 0x7b94 <display_clock+0x76>
            (int) tc.tm_wday);
#endif
    }
    else
    {
        printf("RTC read failed\n");
    7b80:	8d e0       	ldi	r24, 0x0D	; 13
    7b82:	96 e0       	ldi	r25, 0x06	; 6
    7b84:	a0 e0       	ldi	r26, 0x00	; 0
    7b86:	ed b7       	in	r30, 0x3d	; 61
    7b88:	fe b7       	in	r31, 0x3e	; 62
    7b8a:	81 83       	std	Z+1, r24	; 0x01
    7b8c:	92 83       	std	Z+2, r25	; 0x02
    7b8e:	a3 83       	std	Z+3, r26	; 0x03
    7b90:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    }
#endif                                        // RTC_SUPPORT

    clock_gettime(0, (ts_t *) &ts);
    7b94:	be 01       	movw	r22, r28
    7b96:	62 5e       	subi	r22, 0xE2	; 226
    7b98:	7f 4f       	sbci	r23, 0xFF	; 255
    7b9a:	80 e0       	ldi	r24, 0x00	; 0
    7b9c:	90 e0       	ldi	r25, 0x00	; 0
    7b9e:	0e 94 a9 33 	call	0x6752	; 0x6752 <clock_gettime>
    seconds = ts.tv_sec;
    7ba2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    7ba4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    7ba6:	a8 a1       	ldd	r26, Y+32	; 0x20
    7ba8:	b9 a1       	ldd	r27, Y+33	; 0x21
    7baa:	8e a3       	std	Y+38, r24	; 0x26
    7bac:	9f a3       	std	Y+39, r25	; 0x27
    7bae:	a8 a7       	std	Y+40, r26	; 0x28
    7bb0:	b9 a7       	std	Y+41, r27	; 0x29
    printf("clk seconds: %lu\n",seconds);
    7bb2:	ed b7       	in	r30, 0x3d	; 61
    7bb4:	fe b7       	in	r31, 0x3e	; 62
    7bb6:	84 83       	std	Z+4, r24	; 0x04
    7bb8:	95 83       	std	Z+5, r25	; 0x05
    7bba:	a6 83       	std	Z+6, r26	; 0x06
    7bbc:	b7 83       	std	Z+7, r27	; 0x07
    7bbe:	8b ef       	ldi	r24, 0xFB	; 251
    7bc0:	95 e0       	ldi	r25, 0x05	; 5
    7bc2:	a0 e0       	ldi	r26, 0x00	; 0
    7bc4:	81 83       	std	Z+1, r24	; 0x01
    7bc6:	92 83       	std	Z+2, r25	; 0x02
    7bc8:	a3 83       	std	Z+3, r26	; 0x03
    7bca:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    printf("clk time:    %s\n", asctime(gmtime(&seconds)));
    7bce:	ce 01       	movw	r24, r28
    7bd0:	86 96       	adiw	r24, 0x26	; 38
    7bd2:	a9 d9       	rcall	.-3246   	; 0x6f26 <gmtime>
    7bd4:	18 df       	rcall	.-464    	; 0x7a06 <asctime>
    7bd6:	ed b7       	in	r30, 0x3d	; 61
    7bd8:	fe b7       	in	r31, 0x3e	; 62
    7bda:	95 83       	std	Z+5, r25	; 0x05
    7bdc:	84 83       	std	Z+4, r24	; 0x04
    7bde:	8a ee       	ldi	r24, 0xEA	; 234
    7be0:	95 e0       	ldi	r25, 0x05	; 5
    7be2:	a0 e0       	ldi	r26, 0x00	; 0
    7be4:	81 83       	std	Z+1, r24	; 0x01
    7be6:	92 83       	std	Z+2, r25	; 0x02
    7be8:	a3 83       	std	Z+3, r26	; 0x03
    7bea:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
}
    7bee:	a9 96       	adiw	r28, 0x29	; 41
    7bf0:	e2 e0       	ldi	r30, 0x02	; 2
    7bf2:	0c 94 e7 e6 	jmp	0x1cdce	; 0x1cdce <__epilogue_restores__+0x20>

00007bf6 <_putc_buffer_fn>:
    va_start(va, format);
    _printf_fn(&fn, format, va);
    va_end(va);

    return ((int)fn.sent);
}
    7bf6:	fc 01       	movw	r30, r24
    7bf8:	84 81       	ldd	r24, Z+4	; 0x04
    7bfa:	95 81       	ldd	r25, Z+5	; 0x05
    7bfc:	00 97       	sbiw	r24, 0x00	; 0
    7bfe:	79 f0       	breq	.+30     	; 0x7c1e <_putc_buffer_fn+0x28>
    7c00:	66 23       	and	r22, r22
    7c02:	69 f0       	breq	.+26     	; 0x7c1e <_putc_buffer_fn+0x28>
    7c04:	01 97       	sbiw	r24, 0x01	; 1
    7c06:	95 83       	std	Z+5, r25	; 0x05
    7c08:	84 83       	std	Z+4, r24	; 0x04
    7c0a:	86 81       	ldd	r24, Z+6	; 0x06
    7c0c:	97 81       	ldd	r25, Z+7	; 0x07
    7c0e:	01 96       	adiw	r24, 0x01	; 1
    7c10:	97 83       	std	Z+7, r25	; 0x07
    7c12:	86 83       	std	Z+6, r24	; 0x06
    7c14:	a2 81       	ldd	r26, Z+2	; 0x02
    7c16:	b3 81       	ldd	r27, Z+3	; 0x03
    7c18:	6d 93       	st	X+, r22
    7c1a:	b3 83       	std	Z+3, r27	; 0x03
    7c1c:	a2 83       	std	Z+2, r26	; 0x02
    7c1e:	02 80       	ldd	r0, Z+2	; 0x02
    7c20:	f3 81       	ldd	r31, Z+3	; 0x03
    7c22:	e0 2d       	mov	r30, r0
    7c24:	10 82       	st	Z, r1
    7c26:	08 95       	ret

00007c28 <_putc_fn>:
    7c28:	fc 01       	movw	r30, r24
    7c2a:	26 81       	ldd	r18, Z+6	; 0x06
    7c2c:	37 81       	ldd	r19, Z+7	; 0x07
    7c2e:	2f 5f       	subi	r18, 0xFF	; 255
    7c30:	3f 4f       	sbci	r19, 0xFF	; 255
    7c32:	37 83       	std	Z+7, r19	; 0x07
    7c34:	26 83       	std	Z+6, r18	; 0x06
    7c36:	86 2f       	mov	r24, r22
    7c38:	90 e0       	ldi	r25, 0x00	; 0
    7c3a:	0c 94 3c 76 	jmp	0xec78	; 0xec78 <putchar>
    7c3e:	08 95       	ret

00007c40 <bin2num>:
    7c40:	a0 e0       	ldi	r26, 0x00	; 0
    7c42:	b0 e0       	ldi	r27, 0x00	; 0
    7c44:	e6 e2       	ldi	r30, 0x26	; 38
    7c46:	fe e3       	ldi	r31, 0x3E	; 62
    7c48:	0c 94 c2 e6 	jmp	0x1cd84	; 0x1cd84 <__prologue_saves__+0xe>
    7c4c:	ea 01       	movw	r28, r20
    7c4e:	53 e0       	ldi	r21, 0x03	; 3
    7c50:	ee 0c       	add	r14, r14
    7c52:	ff 1c       	adc	r15, r15
    7c54:	5a 95       	dec	r21
    7c56:	e1 f7       	brne	.-8      	; 0x7c50 <bin2num+0x10>
    7c58:	fc 01       	movw	r30, r24
    7c5a:	af 01       	movw	r20, r30
    7c5c:	48 1b       	sub	r20, r24
    7c5e:	59 0b       	sbc	r21, r25
    7c60:	c4 17       	cp	r28, r20
    7c62:	d5 07       	cpc	r29, r21
    7c64:	14 f0       	brlt	.+4      	; 0x7c6a <bin2num+0x2a>
    7c66:	11 92       	st	Z+, r1
    7c68:	f8 cf       	rjmp	.-16     	; 0x7c5a <bin2num+0x1a>
    7c6a:	41 e0       	ldi	r20, 0x01	; 1
    7c6c:	e4 1a       	sub	r14, r20
    7c6e:	f1 08       	sbc	r15, r1
    7c70:	5b 01       	movw	r10, r22
    7c72:	42 e0       	ldi	r20, 0x02	; 2
    7c74:	a4 1a       	sub	r10, r20
    7c76:	b1 08       	sbc	r11, r1
    7c78:	f7 fc       	sbrc	r15, 7
    7c7a:	3b c0       	rjmp	.+118    	; 0x7cf2 <bin2num+0xb2>
    7c7c:	f7 01       	movw	r30, r14
    7c7e:	43 e0       	ldi	r20, 0x03	; 3
    7c80:	f5 95       	asr	r31
    7c82:	e7 95       	ror	r30
    7c84:	4a 95       	dec	r20
    7c86:	e1 f7       	brne	.-8      	; 0x7c80 <bin2num+0x40>
    7c88:	e0 0f       	add	r30, r16
    7c8a:	f1 1f       	adc	r31, r17
    7c8c:	40 81       	ld	r20, Z
    7c8e:	50 e0       	ldi	r21, 0x00	; 0
    7c90:	f7 01       	movw	r30, r14
    7c92:	e7 70       	andi	r30, 0x07	; 7
    7c94:	ff 27       	eor	r31, r31
    7c96:	02 c0       	rjmp	.+4      	; 0x7c9c <bin2num+0x5c>
    7c98:	55 95       	asr	r21
    7c9a:	47 95       	ror	r20
    7c9c:	ea 95       	dec	r30
    7c9e:	e2 f7       	brpl	.-8      	; 0x7c98 <bin2num+0x58>
    7ca0:	41 70       	andi	r20, 0x01	; 1
    7ca2:	55 27       	eor	r21, r21
    7ca4:	dc 01       	movw	r26, r24
    7ca6:	e0 e0       	ldi	r30, 0x00	; 0
    7ca8:	f0 e0       	ldi	r31, 0x00	; 0
    7caa:	ec 17       	cp	r30, r28
    7cac:	fd 07       	cpc	r31, r29
    7cae:	ec f4       	brge	.+58     	; 0x7cea <bin2num+0xaa>
    7cb0:	ea 15       	cp	r30, r10
    7cb2:	fb 05       	cpc	r31, r11
    7cb4:	4c f0       	brlt	.+18     	; 0x7cc8 <bin2num+0x88>
    7cb6:	dc 01       	movw	r26, r24
    7cb8:	ae 0f       	add	r26, r30
    7cba:	bf 1f       	adc	r27, r31
    7cbc:	1c 92       	st	X, r1
    7cbe:	41 e0       	ldi	r20, 0x01	; 1
    7cc0:	e4 1a       	sub	r14, r20
    7cc2:	f1 08       	sbc	r15, r1
    7cc4:	ef 01       	movw	r28, r30
    7cc6:	d8 cf       	rjmp	.-80     	; 0x7c78 <bin2num+0x38>
    7cc8:	9c 90       	ld	r9, X
    7cca:	99 0c       	add	r9, r9
    7ccc:	94 2a       	or	r9, r20
    7cce:	49 2d       	mov	r20, r9
    7cd0:	50 e0       	ldi	r21, 0x00	; 0
    7cd2:	42 17       	cp	r20, r18
    7cd4:	53 07       	cpc	r21, r19
    7cd6:	24 f0       	brlt	.+8      	; 0x7ce0 <bin2num+0xa0>
    7cd8:	92 1a       	sub	r9, r18
    7cda:	41 e0       	ldi	r20, 0x01	; 1
    7cdc:	50 e0       	ldi	r21, 0x00	; 0
    7cde:	02 c0       	rjmp	.+4      	; 0x7ce4 <bin2num+0xa4>
    7ce0:	40 e0       	ldi	r20, 0x00	; 0
    7ce2:	50 e0       	ldi	r21, 0x00	; 0
    7ce4:	9d 92       	st	X+, r9
    7ce6:	31 96       	adiw	r30, 0x01	; 1
    7ce8:	e0 cf       	rjmp	.-64     	; 0x7caa <bin2num+0x6a>
    7cea:	41 15       	cp	r20, r1
    7cec:	51 05       	cpc	r21, r1
    7cee:	01 f7       	brne	.-64     	; 0x7cb0 <bin2num+0x70>
    7cf0:	e2 cf       	rjmp	.-60     	; 0x7cb6 <bin2num+0x76>
    7cf2:	fc 01       	movw	r30, r24
    7cf4:	9f 01       	movw	r18, r30
    7cf6:	28 1b       	sub	r18, r24
    7cf8:	39 0b       	sbc	r19, r25
    7cfa:	2c 17       	cp	r18, r28
    7cfc:	3d 07       	cpc	r19, r29
    7cfe:	4c f4       	brge	.+18     	; 0x7d12 <bin2num+0xd2>
    7d00:	20 81       	ld	r18, Z
    7d02:	2a 30       	cpi	r18, 0x0A	; 10
    7d04:	10 f4       	brcc	.+4      	; 0x7d0a <bin2num+0xca>
    7d06:	20 5d       	subi	r18, 0xD0	; 208
    7d08:	01 c0       	rjmp	.+2      	; 0x7d0c <bin2num+0xcc>
    7d0a:	29 5a       	subi	r18, 0xA9	; 169
    7d0c:	20 83       	st	Z, r18
    7d0e:	31 96       	adiw	r30, 0x01	; 1
    7d10:	f1 cf       	rjmp	.-30     	; 0x7cf4 <bin2num+0xb4>
    7d12:	9e 01       	movw	r18, r28
    7d14:	d7 ff       	sbrs	r29, 7
    7d16:	02 c0       	rjmp	.+4      	; 0x7d1c <bin2num+0xdc>
    7d18:	20 e0       	ldi	r18, 0x00	; 0
    7d1a:	30 e0       	ldi	r19, 0x00	; 0
    7d1c:	c1 14       	cp	r12, r1
    7d1e:	d1 04       	cpc	r13, r1
    7d20:	61 f0       	breq	.+24     	; 0x7d3a <bin2num+0xfa>
    7d22:	61 50       	subi	r22, 0x01	; 1
    7d24:	71 09       	sbc	r23, r1
    7d26:	26 17       	cp	r18, r22
    7d28:	37 07       	cpc	r19, r23
    7d2a:	3c f4       	brge	.+14     	; 0x7d3a <bin2num+0xfa>
    7d2c:	fc 01       	movw	r30, r24
    7d2e:	e2 0f       	add	r30, r18
    7d30:	f3 1f       	adc	r31, r19
    7d32:	c0 82       	st	Z, r12
    7d34:	21 96       	adiw	r28, 0x01	; 1
    7d36:	2f 5f       	subi	r18, 0xFF	; 255
    7d38:	3f 4f       	sbci	r19, 0xFF	; 255
    7d3a:	fc 01       	movw	r30, r24
    7d3c:	e2 0f       	add	r30, r18
    7d3e:	f3 1f       	adc	r31, r19
    7d40:	10 82       	st	Z, r1
    7d42:	0e 94 60 31 	call	0x62c0	; 0x62c0 <reverse>
    7d46:	ce 01       	movw	r24, r28
    7d48:	cd b7       	in	r28, 0x3d	; 61
    7d4a:	de b7       	in	r29, 0x3e	; 62
    7d4c:	eb e0       	ldi	r30, 0x0B	; 11
    7d4e:	0c 94 de e6 	jmp	0x1cdbc	; 0x1cdbc <__epilogue_restores__+0xe>

00007d52 <pch>:
    7d52:	fc 01       	movw	r30, r24
    7d54:	22 81       	ldd	r18, Z+2	; 0x02
    7d56:	33 81       	ldd	r19, Z+3	; 0x03
    7d58:	44 81       	ldd	r20, Z+4	; 0x04
    7d5a:	55 81       	ldd	r21, Z+5	; 0x05
    7d5c:	80 81       	ld	r24, Z
    7d5e:	91 81       	ldd	r25, Z+1	; 0x01
    7d60:	24 17       	cp	r18, r20
    7d62:	35 07       	cpc	r19, r21
    7d64:	54 f4       	brge	.+20     	; 0x7d7a <pch+0x28>
    7d66:	a9 01       	movw	r20, r18
    7d68:	4f 5f       	subi	r20, 0xFF	; 255
    7d6a:	5f 4f       	sbci	r21, 0xFF	; 255
    7d6c:	53 83       	std	Z+3, r21	; 0x03
    7d6e:	42 83       	std	Z+2, r20	; 0x02
    7d70:	dc 01       	movw	r26, r24
    7d72:	a2 0f       	add	r26, r18
    7d74:	b3 1f       	adc	r27, r19
    7d76:	6c 93       	st	X, r22
    7d78:	04 c0       	rjmp	.+8      	; 0x7d82 <pch+0x30>
    7d7a:	dc 01       	movw	r26, r24
    7d7c:	a2 0f       	add	r26, r18
    7d7e:	b3 1f       	adc	r27, r19
    7d80:	1c 92       	st	X, r1
    7d82:	82 81       	ldd	r24, Z+2	; 0x02
    7d84:	93 81       	ldd	r25, Z+3	; 0x03
    7d86:	08 95       	ret

00007d88 <p_ntoa>:
    7d88:	af 92       	push	r10
    7d8a:	cf 92       	push	r12
    7d8c:	df 92       	push	r13
    7d8e:	ef 92       	push	r14
    7d90:	ff 92       	push	r15
    7d92:	0f 93       	push	r16
    7d94:	1f 93       	push	r17
    7d96:	cf 93       	push	r28
    7d98:	df 93       	push	r29
    7d9a:	dc 01       	movw	r26, r24
    7d9c:	eb 01       	movw	r28, r22
    7d9e:	fa 01       	movw	r30, r20
    7da0:	b9 01       	movw	r22, r18
    7da2:	98 01       	movw	r18, r16
    7da4:	a6 01       	movw	r20, r12
    7da6:	9a 2d       	mov	r25, r10
    7da8:	a5 fa       	bst	r10, 5
    7daa:	cc 24       	eor	r12, r12
    7dac:	c0 f8       	bld	r12, 0
    7dae:	a6 fc       	sbrc	r10, 6
    7db0:	07 c0       	rjmp	.+14     	; 0x7dc0 <p_ntoa+0x38>
    7db2:	a2 fc       	sbrc	r10, 2
    7db4:	08 c0       	rjmp	.+16     	; 0x7dc6 <p_ntoa+0x3e>
    7db6:	a4 fe       	sbrs	r10, 4
    7db8:	09 c0       	rjmp	.+18     	; 0x7dcc <p_ntoa+0x44>
    7dba:	00 e2       	ldi	r16, 0x20	; 32
    7dbc:	10 e0       	ldi	r17, 0x00	; 0
    7dbe:	08 c0       	rjmp	.+16     	; 0x7dd0 <p_ntoa+0x48>
    7dc0:	0d e2       	ldi	r16, 0x2D	; 45
    7dc2:	10 e0       	ldi	r17, 0x00	; 0
    7dc4:	05 c0       	rjmp	.+10     	; 0x7dd0 <p_ntoa+0x48>
    7dc6:	0b e2       	ldi	r16, 0x2B	; 43
    7dc8:	10 e0       	ldi	r17, 0x00	; 0
    7dca:	02 c0       	rjmp	.+4      	; 0x7dd0 <p_ntoa+0x48>
    7dcc:	00 e0       	ldi	r16, 0x00	; 0
    7dce:	10 e0       	ldi	r17, 0x00	; 0
    7dd0:	95 ff       	sbrs	r25, 5
    7dd2:	04 c0       	rjmp	.+8      	; 0x7ddc <p_ntoa+0x54>
    7dd4:	89 2f       	mov	r24, r25
    7dd6:	8a 70       	andi	r24, 0x0A	; 10
    7dd8:	09 f0       	breq	.+2      	; 0x7ddc <p_ntoa+0x54>
    7dda:	c1 2c       	mov	r12, r1
    7ddc:	c0 fa       	bst	r12, 0
    7dde:	95 f9       	bld	r25, 5
    7de0:	89 2f       	mov	r24, r25
    7de2:	82 70       	andi	r24, 0x02	; 2
    7de4:	c8 2e       	mov	r12, r24
    7de6:	91 fd       	sbrc	r25, 1
    7de8:	02 c0       	rjmp	.+4      	; 0x7dee <p_ntoa+0x66>
    7dea:	40 e0       	ldi	r20, 0x00	; 0
    7dec:	50 e0       	ldi	r21, 0x00	; 0
    7dee:	89 2f       	mov	r24, r25
    7df0:	83 70       	andi	r24, 0x03	; 3
    7df2:	11 f4       	brne	.+4      	; 0x7df8 <p_ntoa+0x70>
    7df4:	41 e0       	ldi	r20, 0x01	; 1
    7df6:	50 e0       	ldi	r21, 0x00	; 0
    7df8:	90 ff       	sbrs	r25, 0
    7dfa:	0c c0       	rjmp	.+24     	; 0x7e14 <p_ntoa+0x8c>
    7dfc:	95 fd       	sbrc	r25, 5
    7dfe:	05 c0       	rjmp	.+10     	; 0x7e0a <p_ntoa+0x82>
    7e00:	c1 10       	cpse	r12, r1
    7e02:	08 c0       	rjmp	.+16     	; 0x7e14 <p_ntoa+0x8c>
    7e04:	41 e0       	ldi	r20, 0x01	; 1
    7e06:	50 e0       	ldi	r21, 0x00	; 0
    7e08:	05 c0       	rjmp	.+10     	; 0x7e14 <p_ntoa+0x8c>
    7e0a:	94 75       	andi	r25, 0x54	; 84
    7e0c:	a7 01       	movw	r20, r14
    7e0e:	11 f0       	breq	.+4      	; 0x7e14 <p_ntoa+0x8c>
    7e10:	41 50       	subi	r20, 0x01	; 1
    7e12:	51 09       	sbc	r21, r1
    7e14:	68 01       	movw	r12, r16
    7e16:	7e 01       	movw	r14, r28
    7e18:	8d 01       	movw	r16, r26
    7e1a:	cf 01       	movw	r24, r30
    7e1c:	11 df       	rcall	.-478    	; 0x7c40 <bin2num>
    7e1e:	df 91       	pop	r29
    7e20:	cf 91       	pop	r28
    7e22:	1f 91       	pop	r17
    7e24:	0f 91       	pop	r16
    7e26:	ff 90       	pop	r15
    7e28:	ef 90       	pop	r14
    7e2a:	df 90       	pop	r13
    7e2c:	cf 90       	pop	r12
    7e2e:	af 90       	pop	r10
    7e30:	08 95       	ret

00007e32 <p_ftoa>:
    7e32:	aa e0       	ldi	r26, 0x0A	; 10
    7e34:	b0 e0       	ldi	r27, 0x00	; 0
    7e36:	ef e1       	ldi	r30, 0x1F	; 31
    7e38:	ff e3       	ldi	r31, 0x3F	; 63
    7e3a:	0c 94 bb e6 	jmp	0x1cd76	; 0x1cd76 <__prologue_saves__>
    7e3e:	4b 01       	movw	r8, r22
    7e40:	5c 01       	movw	r10, r24
    7e42:	1a 01       	movw	r2, r20
    7e44:	28 01       	movw	r4, r16
    7e46:	c6 fa       	bst	r12, 6
    7e48:	11 27       	eor	r17, r17
    7e4a:	10 f9       	bld	r17, 0
    7e4c:	5a 83       	std	Y+2, r21	; 0x02
    7e4e:	49 83       	std	Y+1, r20	; 0x01
    7e50:	1c 82       	std	Y+4, r1	; 0x04
    7e52:	1b 82       	std	Y+3, r1	; 0x03
    7e54:	21 50       	subi	r18, 0x01	; 1
    7e56:	31 09       	sbc	r19, r1
    7e58:	3e 83       	std	Y+6, r19	; 0x06
    7e5a:	2d 83       	std	Y+5, r18	; 0x05
    7e5c:	fa 01       	movw	r30, r20
    7e5e:	10 82       	st	Z, r1
    7e60:	20 e0       	ldi	r18, 0x00	; 0
    7e62:	30 e0       	ldi	r19, 0x00	; 0
    7e64:	a9 01       	movw	r20, r18
    7e66:	0e 94 79 e7 	call	0x1cef2	; 0x1cef2 <__cmpsf2>
    7e6a:	87 ff       	sbrs	r24, 7
    7e6c:	05 c0       	rjmp	.+10     	; 0x7e78 <p_ftoa+0x46>
    7e6e:	b7 fa       	bst	r11, 7
    7e70:	b0 94       	com	r11
    7e72:	b7 f8       	bld	r11, 7
    7e74:	b0 94       	com	r11
    7e76:	11 e0       	ldi	r17, 0x01	; 1
    7e78:	10 fb       	bst	r17, 0
    7e7a:	c6 f8       	bld	r12, 6
    7e7c:	c6 fe       	sbrs	r12, 6
    7e7e:	02 c0       	rjmp	.+4      	; 0x7e84 <p_ftoa+0x52>
    7e80:	6d e2       	ldi	r22, 0x2D	; 45
    7e82:	07 c0       	rjmp	.+14     	; 0x7e92 <p_ftoa+0x60>
    7e84:	c2 fe       	sbrs	r12, 2
    7e86:	02 c0       	rjmp	.+4      	; 0x7e8c <p_ftoa+0x5a>
    7e88:	6b e2       	ldi	r22, 0x2B	; 43
    7e8a:	03 c0       	rjmp	.+6      	; 0x7e92 <p_ftoa+0x60>
    7e8c:	c4 fe       	sbrs	r12, 4
    7e8e:	04 c0       	rjmp	.+8      	; 0x7e98 <p_ftoa+0x66>
    7e90:	60 e2       	ldi	r22, 0x20	; 32
    7e92:	ce 01       	movw	r24, r28
    7e94:	01 96       	adiw	r24, 0x01	; 1
    7e96:	5d df       	rcall	.-326    	; 0x7d52 <pch>
    7e98:	37 01       	movw	r6, r14
    7e9a:	f7 fe       	sbrs	r15, 7
    7e9c:	02 c0       	rjmp	.+4      	; 0x7ea2 <p_ftoa+0x70>
    7e9e:	61 2c       	mov	r6, r1
    7ea0:	71 2c       	mov	r7, r1
    7ea2:	20 e0       	ldi	r18, 0x00	; 0
    7ea4:	30 e0       	ldi	r19, 0x00	; 0
    7ea6:	a9 01       	movw	r20, r18
    7ea8:	c5 01       	movw	r24, r10
    7eaa:	b4 01       	movw	r22, r8
    7eac:	0e 94 79 e7 	call	0x1cef2	; 0x1cef2 <__cmpsf2>
    7eb0:	88 23       	and	r24, r24
    7eb2:	d1 f1       	breq	.+116    	; 0x7f28 <p_ftoa+0xf6>
    7eb4:	c1 fe       	sbrs	r12, 1
    7eb6:	11 c0       	rjmp	.+34     	; 0x7eda <p_ftoa+0xa8>
    7eb8:	83 01       	movw	r16, r6
    7eba:	60 e0       	ldi	r22, 0x00	; 0
    7ebc:	70 e0       	ldi	r23, 0x00	; 0
    7ebe:	80 e0       	ldi	r24, 0x00	; 0
    7ec0:	9f e3       	ldi	r25, 0x3F	; 63
    7ec2:	01 15       	cp	r16, r1
    7ec4:	11 05       	cpc	r17, r1
    7ec6:	69 f0       	breq	.+26     	; 0x7ee2 <p_ftoa+0xb0>
    7ec8:	20 e0       	ldi	r18, 0x00	; 0
    7eca:	30 e0       	ldi	r19, 0x00	; 0
    7ecc:	40 e2       	ldi	r20, 0x20	; 32
    7ece:	51 e4       	ldi	r21, 0x41	; 65
    7ed0:	0e 94 7d e7 	call	0x1cefa	; 0x1cefa <__divsf3>
    7ed4:	01 50       	subi	r16, 0x01	; 1
    7ed6:	11 09       	sbc	r17, r1
    7ed8:	f4 cf       	rjmp	.-24     	; 0x7ec2 <p_ftoa+0x90>
    7eda:	60 e0       	ldi	r22, 0x00	; 0
    7edc:	70 e0       	ldi	r23, 0x00	; 0
    7ede:	80 e0       	ldi	r24, 0x00	; 0
    7ee0:	9f e3       	ldi	r25, 0x3F	; 63
    7ee2:	9b 01       	movw	r18, r22
    7ee4:	ac 01       	movw	r20, r24
    7ee6:	c5 01       	movw	r24, r10
    7ee8:	b4 01       	movw	r22, r8
    7eea:	0e 94 15 e7 	call	0x1ce2a	; 0x1ce2a <__addsf3>
    7eee:	4b 01       	movw	r8, r22
    7ef0:	5c 01       	movw	r10, r24
    7ef2:	ee 24       	eor	r14, r14
    7ef4:	e3 94       	inc	r14
    7ef6:	f1 2c       	mov	r15, r1
    7ef8:	20 e0       	ldi	r18, 0x00	; 0
    7efa:	30 e0       	ldi	r19, 0x00	; 0
    7efc:	40 e2       	ldi	r20, 0x20	; 32
    7efe:	51 e4       	ldi	r21, 0x41	; 65
    7f00:	c5 01       	movw	r24, r10
    7f02:	b4 01       	movw	r22, r8
    7f04:	0e 94 c8 e8 	call	0x1d190	; 0x1d190 <__gesf2>
    7f08:	87 fd       	sbrc	r24, 7
    7f0a:	11 c0       	rjmp	.+34     	; 0x7f2e <p_ftoa+0xfc>
    7f0c:	ff ef       	ldi	r31, 0xFF	; 255
    7f0e:	ef 1a       	sub	r14, r31
    7f10:	ff 0a       	sbc	r15, r31
    7f12:	20 e0       	ldi	r18, 0x00	; 0
    7f14:	30 e0       	ldi	r19, 0x00	; 0
    7f16:	40 e2       	ldi	r20, 0x20	; 32
    7f18:	51 e4       	ldi	r21, 0x41	; 65
    7f1a:	c5 01       	movw	r24, r10
    7f1c:	b4 01       	movw	r22, r8
    7f1e:	0e 94 7d e7 	call	0x1cefa	; 0x1cefa <__divsf3>
    7f22:	4b 01       	movw	r8, r22
    7f24:	5c 01       	movw	r10, r24
    7f26:	e8 cf       	rjmp	.-48     	; 0x7ef8 <p_ftoa+0xc6>
    7f28:	ee 24       	eor	r14, r14
    7f2a:	e3 94       	inc	r14
    7f2c:	f1 2c       	mov	r15, r1
    7f2e:	8c 2d       	mov	r24, r12
    7f30:	88 72       	andi	r24, 0x28	; 40
    7f32:	80 32       	cpi	r24, 0x20	; 32
    7f34:	c1 f4       	brne	.+48     	; 0x7f66 <p_ftoa+0x134>
    7f36:	82 01       	movw	r16, r4
    7f38:	0e 19       	sub	r16, r14
    7f3a:	1f 09       	sbc	r17, r15
    7f3c:	8b 81       	ldd	r24, Y+3	; 0x03
    7f3e:	9c 81       	ldd	r25, Y+4	; 0x04
    7f40:	08 1b       	sub	r16, r24
    7f42:	19 0b       	sbc	r17, r25
    7f44:	c1 fe       	sbrs	r12, 1
    7f46:	07 c0       	rjmp	.+14     	; 0x7f56 <p_ftoa+0x124>
    7f48:	61 14       	cp	r6, r1
    7f4a:	71 04       	cpc	r7, r1
    7f4c:	21 f0       	breq	.+8      	; 0x7f56 <p_ftoa+0x124>
    7f4e:	06 19       	sub	r16, r6
    7f50:	17 09       	sbc	r17, r7
    7f52:	01 50       	subi	r16, 0x01	; 1
    7f54:	11 09       	sbc	r17, r1
    7f56:	10 16       	cp	r1, r16
    7f58:	11 06       	cpc	r1, r17
    7f5a:	2c f4       	brge	.+10     	; 0x7f66 <p_ftoa+0x134>
    7f5c:	60 e3       	ldi	r22, 0x30	; 48
    7f5e:	ce 01       	movw	r24, r28
    7f60:	01 96       	adiw	r24, 0x01	; 1
    7f62:	f7 de       	rcall	.-530    	; 0x7d52 <pch>
    7f64:	f6 cf       	rjmp	.-20     	; 0x7f52 <p_ftoa+0x120>
    7f66:	c5 01       	movw	r24, r10
    7f68:	b4 01       	movw	r22, r8
    7f6a:	0e 94 e5 e7 	call	0x1cfca	; 0x1cfca <__fixsfsi>
    7f6e:	6f 83       	std	Y+7, r22	; 0x07
    7f70:	78 87       	std	Y+8, r23	; 0x08
    7f72:	89 87       	std	Y+9, r24	; 0x09
    7f74:	9a 87       	std	Y+10, r25	; 0x0a
    7f76:	6f 81       	ldd	r22, Y+7	; 0x07
    7f78:	60 5d       	subi	r22, 0xD0	; 208
    7f7a:	ce 01       	movw	r24, r28
    7f7c:	01 96       	adiw	r24, 0x01	; 1
    7f7e:	e9 de       	rcall	.-558    	; 0x7d52 <pch>
    7f80:	2f 81       	ldd	r18, Y+7	; 0x07
    7f82:	38 85       	ldd	r19, Y+8	; 0x08
    7f84:	b9 01       	movw	r22, r18
    7f86:	33 0f       	add	r19, r19
    7f88:	88 0b       	sbc	r24, r24
    7f8a:	99 0b       	sbc	r25, r25
    7f8c:	0e 94 18 e8 	call	0x1d030	; 0x1d030 <__floatsisf>
    7f90:	9b 01       	movw	r18, r22
    7f92:	ac 01       	movw	r20, r24
    7f94:	c5 01       	movw	r24, r10
    7f96:	b4 01       	movw	r22, r8
    7f98:	0e 94 14 e7 	call	0x1ce28	; 0x1ce28 <__subsf3>
    7f9c:	31 e0       	ldi	r19, 0x01	; 1
    7f9e:	e3 1a       	sub	r14, r19
    7fa0:	f1 08       	sbc	r15, r1
    7fa2:	20 e0       	ldi	r18, 0x00	; 0
    7fa4:	30 e0       	ldi	r19, 0x00	; 0
    7fa6:	40 e2       	ldi	r20, 0x20	; 32
    7fa8:	51 e4       	ldi	r21, 0x41	; 65
    7faa:	0e 94 cc e8 	call	0x1d198	; 0x1d198 <__mulsf3>
    7fae:	4b 01       	movw	r8, r22
    7fb0:	5c 01       	movw	r10, r24
    7fb2:	e1 14       	cp	r14, r1
    7fb4:	f1 04       	cpc	r15, r1
    7fb6:	b9 f6       	brne	.-82     	; 0x7f66 <p_ftoa+0x134>
    7fb8:	c1 fc       	sbrc	r12, 1
    7fba:	10 c0       	rjmp	.+32     	; 0x7fdc <p_ftoa+0x1aa>
    7fbc:	60 e0       	ldi	r22, 0x00	; 0
    7fbe:	ce 01       	movw	r24, r28
    7fc0:	01 96       	adiw	r24, 0x01	; 1
    7fc2:	c7 de       	rcall	.-626    	; 0x7d52 <pch>
    7fc4:	f1 01       	movw	r30, r2
    7fc6:	01 90       	ld	r0, Z+
    7fc8:	00 20       	and	r0, r0
    7fca:	e9 f7       	brne	.-6      	; 0x7fc6 <p_ftoa+0x194>
    7fcc:	31 97       	sbiw	r30, 0x01	; 1
    7fce:	cf 01       	movw	r24, r30
    7fd0:	82 19       	sub	r24, r2
    7fd2:	93 09       	sbc	r25, r3
    7fd4:	2a 96       	adiw	r28, 0x0a	; 10
    7fd6:	e2 e1       	ldi	r30, 0x12	; 18
    7fd8:	0c 94 d7 e6 	jmp	0x1cdae	; 0x1cdae <__epilogue_restores__>
    7fdc:	61 14       	cp	r6, r1
    7fde:	71 04       	cpc	r7, r1
    7fe0:	69 f3       	breq	.-38     	; 0x7fbc <p_ftoa+0x18a>
    7fe2:	6e e2       	ldi	r22, 0x2E	; 46
    7fe4:	ce 01       	movw	r24, r28
    7fe6:	01 96       	adiw	r24, 0x01	; 1
    7fe8:	b4 de       	rcall	.-664    	; 0x7d52 <pch>
    7fea:	c5 01       	movw	r24, r10
    7fec:	b4 01       	movw	r22, r8
    7fee:	0e 94 e5 e7 	call	0x1cfca	; 0x1cfca <__fixsfsi>
    7ff2:	6b 01       	movw	r12, r22
    7ff4:	7c 01       	movw	r14, r24
    7ff6:	07 2e       	mov	r0, r23
    7ff8:	00 0c       	add	r0, r0
    7ffa:	88 0b       	sbc	r24, r24
    7ffc:	99 0b       	sbc	r25, r25
    7ffe:	0e 94 18 e8 	call	0x1d030	; 0x1d030 <__floatsisf>
    8002:	9b 01       	movw	r18, r22
    8004:	ac 01       	movw	r20, r24
    8006:	c5 01       	movw	r24, r10
    8008:	b4 01       	movw	r22, r8
    800a:	0e 94 14 e7 	call	0x1ce28	; 0x1ce28 <__subsf3>
    800e:	4b 01       	movw	r8, r22
    8010:	5c 01       	movw	r10, r24
    8012:	b6 01       	movw	r22, r12
    8014:	60 5d       	subi	r22, 0xD0	; 208
    8016:	7f 4f       	sbci	r23, 0xFF	; 255
    8018:	ce 01       	movw	r24, r28
    801a:	01 96       	adiw	r24, 0x01	; 1
    801c:	9a de       	rcall	.-716    	; 0x7d52 <pch>
    801e:	81 e0       	ldi	r24, 0x01	; 1
    8020:	68 1a       	sub	r6, r24
    8022:	71 08       	sbc	r7, r1
    8024:	20 e0       	ldi	r18, 0x00	; 0
    8026:	30 e0       	ldi	r19, 0x00	; 0
    8028:	40 e2       	ldi	r20, 0x20	; 32
    802a:	51 e4       	ldi	r21, 0x41	; 65
    802c:	c5 01       	movw	r24, r10
    802e:	b4 01       	movw	r22, r8
    8030:	0e 94 cc e8 	call	0x1d198	; 0x1d198 <__mulsf3>
    8034:	4b 01       	movw	r8, r22
    8036:	5c 01       	movw	r10, r24
    8038:	61 14       	cp	r6, r1
    803a:	71 04       	cpc	r7, r1
    803c:	b1 f6       	brne	.-84     	; 0x7fea <p_ftoa+0x1b8>
    803e:	be cf       	rjmp	.-132    	; 0x7fbc <p_ftoa+0x18a>

00008040 <p_etoa>:
    8040:	a3 e1       	ldi	r26, 0x13	; 19
    8042:	b0 e0       	ldi	r27, 0x00	; 0
    8044:	e6 e2       	ldi	r30, 0x26	; 38
    8046:	f0 e4       	ldi	r31, 0x40	; 64
    8048:	0c 94 bb e6 	jmp	0x1cd76	; 0x1cd76 <__prologue_saves__>
    804c:	4b 01       	movw	r8, r22
    804e:	5c 01       	movw	r10, r24
    8050:	59 8b       	std	Y+17, r21	; 0x11
    8052:	48 8b       	std	Y+16, r20	; 0x10
    8054:	1b 8b       	std	Y+19, r17	; 0x13
    8056:	0a 8b       	std	Y+18, r16	; 0x12
    8058:	3c 2c       	mov	r3, r12
    805a:	c6 fa       	bst	r12, 6
    805c:	11 27       	eor	r17, r17
    805e:	10 f9       	bld	r17, 0
    8060:	59 87       	std	Y+9, r21	; 0x09
    8062:	48 87       	std	Y+8, r20	; 0x08
    8064:	1b 86       	std	Y+11, r1	; 0x0b
    8066:	1a 86       	std	Y+10, r1	; 0x0a
    8068:	21 50       	subi	r18, 0x01	; 1
    806a:	31 09       	sbc	r19, r1
    806c:	3d 87       	std	Y+13, r19	; 0x0d
    806e:	2c 87       	std	Y+12, r18	; 0x0c
    8070:	fa 01       	movw	r30, r20
    8072:	10 82       	st	Z, r1
    8074:	20 e0       	ldi	r18, 0x00	; 0
    8076:	30 e0       	ldi	r19, 0x00	; 0
    8078:	a9 01       	movw	r20, r18
    807a:	0e 94 79 e7 	call	0x1cef2	; 0x1cef2 <__cmpsf2>
    807e:	87 ff       	sbrs	r24, 7
    8080:	05 c0       	rjmp	.+10     	; 0x808c <p_etoa+0x4c>
    8082:	b7 fa       	bst	r11, 7
    8084:	b0 94       	com	r11
    8086:	b7 f8       	bld	r11, 7
    8088:	b0 94       	com	r11
    808a:	11 e0       	ldi	r17, 0x01	; 1
    808c:	10 fb       	bst	r17, 0
    808e:	36 f8       	bld	r3, 6
    8090:	36 fe       	sbrs	r3, 6
    8092:	02 c0       	rjmp	.+4      	; 0x8098 <p_etoa+0x58>
    8094:	6d e2       	ldi	r22, 0x2D	; 45
    8096:	07 c0       	rjmp	.+14     	; 0x80a6 <p_etoa+0x66>
    8098:	32 fe       	sbrs	r3, 2
    809a:	02 c0       	rjmp	.+4      	; 0x80a0 <p_etoa+0x60>
    809c:	6b e2       	ldi	r22, 0x2B	; 43
    809e:	03 c0       	rjmp	.+6      	; 0x80a6 <p_etoa+0x66>
    80a0:	34 fe       	sbrs	r3, 4
    80a2:	04 c0       	rjmp	.+8      	; 0x80ac <p_etoa+0x6c>
    80a4:	60 e2       	ldi	r22, 0x20	; 32
    80a6:	ce 01       	movw	r24, r28
    80a8:	08 96       	adiw	r24, 0x08	; 8
    80aa:	53 de       	rcall	.-858    	; 0x7d52 <pch>
    80ac:	37 01       	movw	r6, r14
    80ae:	f7 fe       	sbrs	r15, 7
    80b0:	02 c0       	rjmp	.+4      	; 0x80b6 <p_etoa+0x76>
    80b2:	61 2c       	mov	r6, r1
    80b4:	71 2c       	mov	r7, r1
    80b6:	1f 86       	std	Y+15, r1	; 0x0f
    80b8:	1e 86       	std	Y+14, r1	; 0x0e
    80ba:	20 e0       	ldi	r18, 0x00	; 0
    80bc:	30 e0       	ldi	r19, 0x00	; 0
    80be:	a9 01       	movw	r20, r18
    80c0:	c5 01       	movw	r24, r10
    80c2:	b4 01       	movw	r22, r8
    80c4:	0e 94 79 e7 	call	0x1cef2	; 0x1cef2 <__cmpsf2>
    80c8:	f3 2d       	mov	r31, r3
    80ca:	f2 70       	andi	r31, 0x02	; 2
    80cc:	2f 2e       	mov	r2, r31
    80ce:	88 23       	and	r24, r24
    80d0:	09 f4       	brne	.+2      	; 0x80d4 <p_etoa+0x94>
    80d2:	70 c0       	rjmp	.+224    	; 0x81b4 <p_etoa+0x174>
    80d4:	ff 23       	and	r31, r31
    80d6:	b1 f0       	breq	.+44     	; 0x8104 <p_etoa+0xc4>
    80d8:	83 01       	movw	r16, r6
    80da:	c1 2c       	mov	r12, r1
    80dc:	d1 2c       	mov	r13, r1
    80de:	e1 2c       	mov	r14, r1
    80e0:	2f e3       	ldi	r18, 0x3F	; 63
    80e2:	f2 2e       	mov	r15, r18
    80e4:	01 15       	cp	r16, r1
    80e6:	11 05       	cpc	r17, r1
    80e8:	91 f0       	breq	.+36     	; 0x810e <p_etoa+0xce>
    80ea:	20 e0       	ldi	r18, 0x00	; 0
    80ec:	30 e0       	ldi	r19, 0x00	; 0
    80ee:	40 e2       	ldi	r20, 0x20	; 32
    80f0:	51 e4       	ldi	r21, 0x41	; 65
    80f2:	c7 01       	movw	r24, r14
    80f4:	b6 01       	movw	r22, r12
    80f6:	0e 94 7d e7 	call	0x1cefa	; 0x1cefa <__divsf3>
    80fa:	6b 01       	movw	r12, r22
    80fc:	7c 01       	movw	r14, r24
    80fe:	01 50       	subi	r16, 0x01	; 1
    8100:	11 09       	sbc	r17, r1
    8102:	f0 cf       	rjmp	.-32     	; 0x80e4 <p_etoa+0xa4>
    8104:	c1 2c       	mov	r12, r1
    8106:	d1 2c       	mov	r13, r1
    8108:	e1 2c       	mov	r14, r1
    810a:	9f e3       	ldi	r25, 0x3F	; 63
    810c:	f9 2e       	mov	r15, r25
    810e:	41 2c       	mov	r4, r1
    8110:	51 2c       	mov	r5, r1
    8112:	82 01       	movw	r16, r4
    8114:	01 50       	subi	r16, 0x01	; 1
    8116:	11 09       	sbc	r17, r1
    8118:	20 e0       	ldi	r18, 0x00	; 0
    811a:	30 e0       	ldi	r19, 0x00	; 0
    811c:	40 e8       	ldi	r20, 0x80	; 128
    811e:	5f e3       	ldi	r21, 0x3F	; 63
    8120:	c5 01       	movw	r24, r10
    8122:	b4 01       	movw	r22, r8
    8124:	0e 94 79 e7 	call	0x1cef2	; 0x1cef2 <__cmpsf2>
    8128:	87 ff       	sbrs	r24, 7
    812a:	0c c0       	rjmp	.+24     	; 0x8144 <p_etoa+0x104>
    812c:	20 e0       	ldi	r18, 0x00	; 0
    812e:	30 e0       	ldi	r19, 0x00	; 0
    8130:	40 e2       	ldi	r20, 0x20	; 32
    8132:	51 e4       	ldi	r21, 0x41	; 65
    8134:	c5 01       	movw	r24, r10
    8136:	b4 01       	movw	r22, r8
    8138:	0e 94 cc e8 	call	0x1d198	; 0x1d198 <__mulsf3>
    813c:	4b 01       	movw	r8, r22
    813e:	5c 01       	movw	r10, r24
    8140:	28 01       	movw	r4, r16
    8142:	e7 cf       	rjmp	.-50     	; 0x8112 <p_etoa+0xd2>
    8144:	82 01       	movw	r16, r4
    8146:	0f 5f       	subi	r16, 0xFF	; 255
    8148:	1f 4f       	sbci	r17, 0xFF	; 255
    814a:	20 e0       	ldi	r18, 0x00	; 0
    814c:	30 e0       	ldi	r19, 0x00	; 0
    814e:	40 e2       	ldi	r20, 0x20	; 32
    8150:	51 e4       	ldi	r21, 0x41	; 65
    8152:	c5 01       	movw	r24, r10
    8154:	b4 01       	movw	r22, r8
    8156:	0e 94 c8 e8 	call	0x1d190	; 0x1d190 <__gesf2>
    815a:	87 fd       	sbrc	r24, 7
    815c:	0c c0       	rjmp	.+24     	; 0x8176 <p_etoa+0x136>
    815e:	20 e0       	ldi	r18, 0x00	; 0
    8160:	30 e0       	ldi	r19, 0x00	; 0
    8162:	40 e2       	ldi	r20, 0x20	; 32
    8164:	51 e4       	ldi	r21, 0x41	; 65
    8166:	c5 01       	movw	r24, r10
    8168:	b4 01       	movw	r22, r8
    816a:	0e 94 7d e7 	call	0x1cefa	; 0x1cefa <__divsf3>
    816e:	4b 01       	movw	r8, r22
    8170:	5c 01       	movw	r10, r24
    8172:	28 01       	movw	r4, r16
    8174:	e7 cf       	rjmp	.-50     	; 0x8144 <p_etoa+0x104>
    8176:	a7 01       	movw	r20, r14
    8178:	96 01       	movw	r18, r12
    817a:	c5 01       	movw	r24, r10
    817c:	b4 01       	movw	r22, r8
    817e:	0e 94 15 e7 	call	0x1ce2a	; 0x1ce2a <__addsf3>
    8182:	4b 01       	movw	r8, r22
    8184:	5c 01       	movw	r10, r24
    8186:	82 01       	movw	r16, r4
    8188:	2f ef       	ldi	r18, 0xFF	; 255
    818a:	42 1a       	sub	r4, r18
    818c:	52 0a       	sbc	r5, r18
    818e:	20 e0       	ldi	r18, 0x00	; 0
    8190:	30 e0       	ldi	r19, 0x00	; 0
    8192:	40 e2       	ldi	r20, 0x20	; 32
    8194:	51 e4       	ldi	r21, 0x41	; 65
    8196:	0e 94 c8 e8 	call	0x1d190	; 0x1d190 <__gesf2>
    819a:	87 fd       	sbrc	r24, 7
    819c:	09 c0       	rjmp	.+18     	; 0x81b0 <p_etoa+0x170>
    819e:	20 e0       	ldi	r18, 0x00	; 0
    81a0:	30 e0       	ldi	r19, 0x00	; 0
    81a2:	40 e2       	ldi	r20, 0x20	; 32
    81a4:	51 e4       	ldi	r21, 0x41	; 65
    81a6:	c5 01       	movw	r24, r10
    81a8:	b4 01       	movw	r22, r8
    81aa:	0e 94 7d e7 	call	0x1cefa	; 0x1cefa <__divsf3>
    81ae:	e9 cf       	rjmp	.-46     	; 0x8182 <p_etoa+0x142>
    81b0:	0e 87       	std	Y+14, r16	; 0x0e
    81b2:	1f 87       	std	Y+15, r17	; 0x0f
    81b4:	85 e6       	ldi	r24, 0x65	; 101
    81b6:	89 83       	std	Y+1, r24	; 0x01
    81b8:	8e 85       	ldd	r24, Y+14	; 0x0e
    81ba:	9f 85       	ldd	r25, Y+15	; 0x0f
    81bc:	97 ff       	sbrs	r25, 7
    81be:	08 c0       	rjmp	.+16     	; 0x81d0 <p_etoa+0x190>
    81c0:	91 95       	neg	r25
    81c2:	81 95       	neg	r24
    81c4:	91 09       	sbc	r25, r1
    81c6:	9f 87       	std	Y+15, r25	; 0x0f
    81c8:	8e 87       	std	Y+14, r24	; 0x0e
    81ca:	8d e2       	ldi	r24, 0x2D	; 45
    81cc:	90 e0       	ldi	r25, 0x00	; 0
    81ce:	02 c0       	rjmp	.+4      	; 0x81d4 <p_etoa+0x194>
    81d0:	8b e2       	ldi	r24, 0x2B	; 43
    81d2:	90 e0       	ldi	r25, 0x00	; 0
    81d4:	6c 01       	movw	r12, r24
    81d6:	82 e0       	ldi	r24, 0x02	; 2
    81d8:	e8 2e       	mov	r14, r24
    81da:	f1 2c       	mov	r15, r1
    81dc:	8e 01       	movw	r16, r28
    81de:	02 5f       	subi	r16, 0xF2	; 242
    81e0:	1f 4f       	sbci	r17, 0xFF	; 255
    81e2:	2a e0       	ldi	r18, 0x0A	; 10
    81e4:	30 e0       	ldi	r19, 0x00	; 0
    81e6:	42 e0       	ldi	r20, 0x02	; 2
    81e8:	50 e0       	ldi	r21, 0x00	; 0
    81ea:	65 e0       	ldi	r22, 0x05	; 5
    81ec:	70 e0       	ldi	r23, 0x00	; 0
    81ee:	ce 01       	movw	r24, r28
    81f0:	02 96       	adiw	r24, 0x02	; 2
    81f2:	26 dd       	rcall	.-1460   	; 0x7c40 <bin2num>
    81f4:	9c 01       	movw	r18, r24
    81f6:	93 2d       	mov	r25, r3
    81f8:	98 72       	andi	r25, 0x28	; 40
    81fa:	90 32       	cpi	r25, 0x20	; 32
    81fc:	71 f0       	breq	.+28     	; 0x821a <p_etoa+0x1da>
    81fe:	c5 01       	movw	r24, r10
    8200:	b4 01       	movw	r22, r8
    8202:	0e 94 e5 e7 	call	0x1cfca	; 0x1cfca <__fixsfsi>
    8206:	6b 01       	movw	r12, r22
    8208:	7c 01       	movw	r14, r24
    820a:	60 e3       	ldi	r22, 0x30	; 48
    820c:	6c 0d       	add	r22, r12
    820e:	ce 01       	movw	r24, r28
    8210:	08 96       	adiw	r24, 0x08	; 8
    8212:	9f dd       	rcall	.-1218   	; 0x7d52 <pch>
    8214:	21 10       	cpse	r2, r1
    8216:	20 c0       	rjmp	.+64     	; 0x8258 <p_etoa+0x218>
    8218:	63 c0       	rjmp	.+198    	; 0x82e0 <p_etoa+0x2a0>
    821a:	8a 85       	ldd	r24, Y+10	; 0x0a
    821c:	9b 85       	ldd	r25, Y+11	; 0x0b
    821e:	0a 89       	ldd	r16, Y+18	; 0x12
    8220:	1b 89       	ldd	r17, Y+19	; 0x13
    8222:	08 1b       	sub	r16, r24
    8224:	19 0b       	sbc	r17, r25
    8226:	22 20       	and	r2, r2
    8228:	41 f0       	breq	.+16     	; 0x823a <p_etoa+0x1fa>
    822a:	61 14       	cp	r6, r1
    822c:	71 04       	cpc	r7, r1
    822e:	29 f0       	breq	.+10     	; 0x823a <p_etoa+0x1fa>
    8230:	06 19       	sub	r16, r6
    8232:	17 09       	sbc	r17, r7
    8234:	06 50       	subi	r16, 0x06	; 6
    8236:	11 09       	sbc	r17, r1
    8238:	02 c0       	rjmp	.+4      	; 0x823e <p_etoa+0x1fe>
    823a:	05 50       	subi	r16, 0x05	; 5
    823c:	11 09       	sbc	r17, r1
    823e:	24 30       	cpi	r18, 0x04	; 4
    8240:	31 05       	cpc	r19, r1
    8242:	14 f0       	brlt	.+4      	; 0x8248 <p_etoa+0x208>
    8244:	01 50       	subi	r16, 0x01	; 1
    8246:	11 09       	sbc	r17, r1
    8248:	10 16       	cp	r1, r16
    824a:	11 06       	cpc	r1, r17
    824c:	c4 f6       	brge	.-80     	; 0x81fe <p_etoa+0x1be>
    824e:	60 e3       	ldi	r22, 0x30	; 48
    8250:	ce 01       	movw	r24, r28
    8252:	08 96       	adiw	r24, 0x08	; 8
    8254:	7e dd       	rcall	.-1284   	; 0x7d52 <pch>
    8256:	f6 cf       	rjmp	.-20     	; 0x8244 <p_etoa+0x204>
    8258:	61 14       	cp	r6, r1
    825a:	71 04       	cpc	r7, r1
    825c:	09 f4       	brne	.+2      	; 0x8260 <p_etoa+0x220>
    825e:	40 c0       	rjmp	.+128    	; 0x82e0 <p_etoa+0x2a0>
    8260:	b6 01       	movw	r22, r12
    8262:	dd 0c       	add	r13, r13
    8264:	88 0b       	sbc	r24, r24
    8266:	99 0b       	sbc	r25, r25
    8268:	0e 94 18 e8 	call	0x1d030	; 0x1d030 <__floatsisf>
    826c:	9b 01       	movw	r18, r22
    826e:	ac 01       	movw	r20, r24
    8270:	c5 01       	movw	r24, r10
    8272:	b4 01       	movw	r22, r8
    8274:	0e 94 14 e7 	call	0x1ce28	; 0x1ce28 <__subsf3>
    8278:	20 e0       	ldi	r18, 0x00	; 0
    827a:	30 e0       	ldi	r19, 0x00	; 0
    827c:	40 e2       	ldi	r20, 0x20	; 32
    827e:	51 e4       	ldi	r21, 0x41	; 65
    8280:	0e 94 cc e8 	call	0x1d198	; 0x1d198 <__mulsf3>
    8284:	4b 01       	movw	r8, r22
    8286:	5c 01       	movw	r10, r24
    8288:	6e e2       	ldi	r22, 0x2E	; 46
    828a:	ce 01       	movw	r24, r28
    828c:	08 96       	adiw	r24, 0x08	; 8
    828e:	61 dd       	rcall	.-1342   	; 0x7d52 <pch>
    8290:	c5 01       	movw	r24, r10
    8292:	b4 01       	movw	r22, r8
    8294:	0e 94 e5 e7 	call	0x1cfca	; 0x1cfca <__fixsfsi>
    8298:	6b 01       	movw	r12, r22
    829a:	7c 01       	movw	r14, r24
    829c:	07 2e       	mov	r0, r23
    829e:	00 0c       	add	r0, r0
    82a0:	88 0b       	sbc	r24, r24
    82a2:	99 0b       	sbc	r25, r25
    82a4:	0e 94 18 e8 	call	0x1d030	; 0x1d030 <__floatsisf>
    82a8:	9b 01       	movw	r18, r22
    82aa:	ac 01       	movw	r20, r24
    82ac:	c5 01       	movw	r24, r10
    82ae:	b4 01       	movw	r22, r8
    82b0:	0e 94 14 e7 	call	0x1ce28	; 0x1ce28 <__subsf3>
    82b4:	4b 01       	movw	r8, r22
    82b6:	5c 01       	movw	r10, r24
    82b8:	b6 01       	movw	r22, r12
    82ba:	60 5d       	subi	r22, 0xD0	; 208
    82bc:	7f 4f       	sbci	r23, 0xFF	; 255
    82be:	ce 01       	movw	r24, r28
    82c0:	08 96       	adiw	r24, 0x08	; 8
    82c2:	47 dd       	rcall	.-1394   	; 0x7d52 <pch>
    82c4:	20 e0       	ldi	r18, 0x00	; 0
    82c6:	30 e0       	ldi	r19, 0x00	; 0
    82c8:	40 e2       	ldi	r20, 0x20	; 32
    82ca:	51 e4       	ldi	r21, 0x41	; 65
    82cc:	c5 01       	movw	r24, r10
    82ce:	b4 01       	movw	r22, r8
    82d0:	0e 94 cc e8 	call	0x1d198	; 0x1d198 <__mulsf3>
    82d4:	4b 01       	movw	r8, r22
    82d6:	5c 01       	movw	r10, r24
    82d8:	31 e0       	ldi	r19, 0x01	; 1
    82da:	63 1a       	sub	r6, r19
    82dc:	71 08       	sbc	r7, r1
    82de:	c1 f6       	brne	.-80     	; 0x8290 <p_etoa+0x250>
    82e0:	8e 01       	movw	r16, r28
    82e2:	0f 5f       	subi	r16, 0xFF	; 255
    82e4:	1f 4f       	sbci	r17, 0xFF	; 255
    82e6:	f8 01       	movw	r30, r16
    82e8:	61 91       	ld	r22, Z+
    82ea:	8f 01       	movw	r16, r30
    82ec:	ce 01       	movw	r24, r28
    82ee:	08 96       	adiw	r24, 0x08	; 8
    82f0:	66 23       	and	r22, r22
    82f2:	11 f0       	breq	.+4      	; 0x82f8 <p_etoa+0x2b8>
    82f4:	2e dd       	rcall	.-1444   	; 0x7d52 <pch>
    82f6:	f7 cf       	rjmp	.-18     	; 0x82e6 <p_etoa+0x2a6>
    82f8:	2c dd       	rcall	.-1448   	; 0x7d52 <pch>
    82fa:	e8 89       	ldd	r30, Y+16	; 0x10
    82fc:	f9 89       	ldd	r31, Y+17	; 0x11
    82fe:	01 90       	ld	r0, Z+
    8300:	00 20       	and	r0, r0
    8302:	e9 f7       	brne	.-6      	; 0x82fe <p_etoa+0x2be>
    8304:	cf 01       	movw	r24, r30
    8306:	01 97       	sbiw	r24, 0x01	; 1
    8308:	28 89       	ldd	r18, Y+16	; 0x10
    830a:	39 89       	ldd	r19, Y+17	; 0x11
    830c:	82 1b       	sub	r24, r18
    830e:	93 0b       	sbc	r25, r19
    8310:	63 96       	adiw	r28, 0x13	; 19
    8312:	e2 e1       	ldi	r30, 0x12	; 18
    8314:	0c 94 d7 e6 	jmp	0x1cdae	; 0x1cdae <__epilogue_restores__>

00008318 <_puts_pad>:
    8318:	a0 e0       	ldi	r26, 0x00	; 0
    831a:	b0 e0       	ldi	r27, 0x00	; 0
    831c:	e2 e9       	ldi	r30, 0x92	; 146
    831e:	f1 e4       	ldi	r31, 0x41	; 65
    8320:	0c 94 c1 e6 	jmp	0x1cd82	; 0x1cd82 <__prologue_saves__+0xc>
    8324:	6c 01       	movw	r12, r24
    8326:	4b 01       	movw	r8, r22
    8328:	79 01       	movw	r14, r18
    832a:	24 17       	cp	r18, r20
    832c:	35 07       	cpc	r19, r21
    832e:	24 f4       	brge	.+8      	; 0x8338 <_puts_pad+0x20>
    8330:	ea 01       	movw	r28, r20
    8332:	c2 1b       	sub	r28, r18
    8334:	d3 0b       	sbc	r29, r19
    8336:	02 c0       	rjmp	.+4      	; 0x833c <_puts_pad+0x24>
    8338:	c0 e0       	ldi	r28, 0x00	; 0
    833a:	d0 e0       	ldi	r29, 0x00	; 0
    833c:	01 15       	cp	r16, r1
    833e:	11 05       	cpc	r17, r1
    8340:	49 f4       	brne	.+18     	; 0x8354 <_puts_pad+0x3c>
    8342:	21 97       	sbiw	r28, 0x01	; 1
    8344:	38 f0       	brcs	.+14     	; 0x8354 <_puts_pad+0x3c>
    8346:	d6 01       	movw	r26, r12
    8348:	ed 91       	ld	r30, X+
    834a:	fc 91       	ld	r31, X
    834c:	60 e2       	ldi	r22, 0x20	; 32
    834e:	c6 01       	movw	r24, r12
    8350:	09 95       	icall
    8352:	f7 cf       	rjmp	.-18     	; 0x8342 <_puts_pad+0x2a>
    8354:	54 01       	movw	r10, r8
    8356:	f5 01       	movw	r30, r10
    8358:	61 91       	ld	r22, Z+
    835a:	5f 01       	movw	r10, r30
    835c:	66 23       	and	r22, r22
    835e:	61 f0       	breq	.+24     	; 0x8378 <_puts_pad+0x60>
    8360:	e1 14       	cp	r14, r1
    8362:	f1 04       	cpc	r15, r1
    8364:	49 f0       	breq	.+18     	; 0x8378 <_puts_pad+0x60>
    8366:	d6 01       	movw	r26, r12
    8368:	ed 91       	ld	r30, X+
    836a:	fc 91       	ld	r31, X
    836c:	c6 01       	movw	r24, r12
    836e:	09 95       	icall
    8370:	b1 e0       	ldi	r27, 0x01	; 1
    8372:	eb 1a       	sub	r14, r27
    8374:	f1 08       	sbc	r15, r1
    8376:	ef cf       	rjmp	.-34     	; 0x8356 <_puts_pad+0x3e>
    8378:	01 15       	cp	r16, r1
    837a:	11 05       	cpc	r17, r1
    837c:	51 f0       	breq	.+20     	; 0x8392 <_puts_pad+0x7a>
    837e:	20 97       	sbiw	r28, 0x00	; 0
    8380:	41 f0       	breq	.+16     	; 0x8392 <_puts_pad+0x7a>
    8382:	d6 01       	movw	r26, r12
    8384:	ed 91       	ld	r30, X+
    8386:	fc 91       	ld	r31, X
    8388:	60 e2       	ldi	r22, 0x20	; 32
    838a:	c6 01       	movw	r24, r12
    838c:	09 95       	icall
    838e:	21 97       	sbiw	r28, 0x01	; 1
    8390:	f6 cf       	rjmp	.-20     	; 0x837e <_puts_pad+0x66>
    8392:	cd b7       	in	r28, 0x3d	; 61
    8394:	de b7       	in	r29, 0x3e	; 62
    8396:	ec e0       	ldi	r30, 0x0C	; 12
    8398:	0c 94 dd e6 	jmp	0x1cdba	; 0x1cdba <__epilogue_restores__+0xc>

0000839c <_puts_pad_X>:
    839c:	2f 92       	push	r2
    839e:	3f 92       	push	r3
    83a0:	4f 92       	push	r4
    83a2:	6f 92       	push	r6
    83a4:	7f 92       	push	r7
    83a6:	8f 92       	push	r8
    83a8:	cf 92       	push	r12
    83aa:	df 92       	push	r13
    83ac:	ef 92       	push	r14
    83ae:	ff 92       	push	r15
    83b0:	0f 93       	push	r16
    83b2:	1f 93       	push	r17
    83b4:	cf 93       	push	r28
    83b6:	df 93       	push	r29
    83b8:	6c 01       	movw	r12, r24
    83ba:	3a 01       	movw	r6, r20
    83bc:	86 2e       	mov	r8, r22
    83be:	02 17       	cp	r16, r18
    83c0:	13 07       	cpc	r17, r19
    83c2:	24 f4       	brge	.+8      	; 0x83cc <_puts_pad_X+0x30>
    83c4:	e9 01       	movw	r28, r18
    83c6:	c0 1b       	sub	r28, r16
    83c8:	d1 0b       	sbc	r29, r17
    83ca:	02 c0       	rjmp	.+4      	; 0x83d0 <_puts_pad_X+0x34>
    83cc:	c0 e0       	ldi	r28, 0x00	; 0
    83ce:	d0 e0       	ldi	r29, 0x00	; 0
    83d0:	e1 14       	cp	r14, r1
    83d2:	f1 04       	cpc	r15, r1
    83d4:	49 f4       	brne	.+18     	; 0x83e8 <_puts_pad_X+0x4c>
    83d6:	21 97       	sbiw	r28, 0x01	; 1
    83d8:	38 f0       	brcs	.+14     	; 0x83e8 <_puts_pad_X+0x4c>
    83da:	d6 01       	movw	r26, r12
    83dc:	ed 91       	ld	r30, X+
    83de:	fc 91       	ld	r31, X
    83e0:	60 e2       	ldi	r22, 0x20	; 32
    83e2:	c6 01       	movw	r24, r12
    83e4:	09 95       	icall
    83e6:	f7 cf       	rjmp	.-18     	; 0x83d6 <_puts_pad_X+0x3a>
    83e8:	13 01       	movw	r2, r6
    83ea:	48 2c       	mov	r4, r8
    83ec:	20 0e       	add	r2, r16
    83ee:	31 1e       	adc	r3, r17
    83f0:	41 1c       	adc	r4, r1
    83f2:	17 fd       	sbrc	r17, 7
    83f4:	4a 94       	dec	r4
    83f6:	f3 01       	movw	r30, r6
    83f8:	58 2d       	mov	r21, r8
    83fa:	0e 94 f2 e6 	call	0x1cde4	; 0x1cde4 <__xload_1>
    83fe:	66 23       	and	r22, r22
    8400:	71 f0       	breq	.+28     	; 0x841e <_puts_pad_X+0x82>
    8402:	62 14       	cp	r6, r2
    8404:	73 04       	cpc	r7, r3
    8406:	84 04       	cpc	r8, r4
    8408:	51 f0       	breq	.+20     	; 0x841e <_puts_pad_X+0x82>
    840a:	d6 01       	movw	r26, r12
    840c:	ed 91       	ld	r30, X+
    840e:	fc 91       	ld	r31, X
    8410:	c6 01       	movw	r24, r12
    8412:	09 95       	icall
    8414:	bf ef       	ldi	r27, 0xFF	; 255
    8416:	6b 1a       	sub	r6, r27
    8418:	7b 0a       	sbc	r7, r27
    841a:	8b 0a       	sbc	r8, r27
    841c:	ec cf       	rjmp	.-40     	; 0x83f6 <_puts_pad_X+0x5a>
    841e:	ef 28       	or	r14, r15
    8420:	51 f0       	breq	.+20     	; 0x8436 <_puts_pad_X+0x9a>
    8422:	20 97       	sbiw	r28, 0x00	; 0
    8424:	41 f0       	breq	.+16     	; 0x8436 <_puts_pad_X+0x9a>
    8426:	d6 01       	movw	r26, r12
    8428:	ed 91       	ld	r30, X+
    842a:	fc 91       	ld	r31, X
    842c:	60 e2       	ldi	r22, 0x20	; 32
    842e:	c6 01       	movw	r24, r12
    8430:	09 95       	icall
    8432:	21 97       	sbiw	r28, 0x01	; 1
    8434:	f6 cf       	rjmp	.-20     	; 0x8422 <_puts_pad_X+0x86>
    8436:	df 91       	pop	r29
    8438:	cf 91       	pop	r28
    843a:	1f 91       	pop	r17
    843c:	0f 91       	pop	r16
    843e:	ff 90       	pop	r15
    8440:	ef 90       	pop	r14
    8442:	df 90       	pop	r13
    8444:	cf 90       	pop	r12
    8446:	8f 90       	pop	r8
    8448:	7f 90       	pop	r7
    844a:	6f 90       	pop	r6
    844c:	4f 90       	pop	r4
    844e:	3f 90       	pop	r3
    8450:	2f 90       	pop	r2
    8452:	08 95       	ret

00008454 <strlen_X>:
    8454:	cf 92       	push	r12
    8456:	df 92       	push	r13
    8458:	ef 92       	push	r14
    845a:	9b 01       	movw	r18, r22
    845c:	48 2f       	mov	r20, r24
    845e:	80 e0       	ldi	r24, 0x00	; 0
    8460:	90 e0       	ldi	r25, 0x00	; 0
    8462:	2f 5f       	subi	r18, 0xFF	; 255
    8464:	3f 4f       	sbci	r19, 0xFF	; 255
    8466:	4f 4f       	sbci	r20, 0xFF	; 255
    8468:	69 01       	movw	r12, r18
    846a:	e4 2e       	mov	r14, r20
    846c:	51 e0       	ldi	r21, 0x01	; 1
    846e:	c5 1a       	sub	r12, r21
    8470:	d1 08       	sbc	r13, r1
    8472:	e1 08       	sbc	r14, r1
    8474:	f6 01       	movw	r30, r12
    8476:	5e 2d       	mov	r21, r14
    8478:	0e 94 f2 e6 	call	0x1cde4	; 0x1cde4 <__xload_1>
    847c:	66 23       	and	r22, r22
    847e:	11 f0       	breq	.+4      	; 0x8484 <strlen_X+0x30>
    8480:	01 96       	adiw	r24, 0x01	; 1
    8482:	ef cf       	rjmp	.-34     	; 0x8462 <strlen_X+0xe>
    8484:	ef 90       	pop	r14
    8486:	df 90       	pop	r13
    8488:	cf 90       	pop	r12
    848a:	08 95       	ret

0000848c <_printf_fn>:
    848c:	ae e6       	ldi	r26, 0x6E	; 110
    848e:	b0 e0       	ldi	r27, 0x00	; 0
    8490:	ec e4       	ldi	r30, 0x4C	; 76
    8492:	f2 e4       	ldi	r31, 0x42	; 66
    8494:	0c 94 bb e6 	jmp	0x1cd76	; 0x1cd76 <__prologue_saves__>
    8498:	a5 96       	adiw	r28, 0x25	; 37
    849a:	9f af       	std	Y+63, r25	; 0x3f
    849c:	8e af       	std	Y+62, r24	; 0x3e
    849e:	a5 97       	sbiw	r28, 0x25	; 37
    84a0:	6a 01       	movw	r12, r20
    84a2:	e6 2e       	mov	r14, r22
    84a4:	19 01       	movw	r2, r18
    84a6:	a9 96       	adiw	r28, 0x29	; 41
    84a8:	1c ae       	std	Y+60, r1	; 0x3c
    84aa:	1d ae       	std	Y+61, r1	; 0x3d
    84ac:	1e ae       	std	Y+62, r1	; 0x3e
    84ae:	1f ae       	std	Y+63, r1	; 0x3f
    84b0:	a9 97       	sbiw	r28, 0x29	; 41
    84b2:	8a e1       	ldi	r24, 0x1A	; 26
    84b4:	94 e0       	ldi	r25, 0x04	; 4
    84b6:	9c 01       	movw	r18, r24
    84b8:	40 e8       	ldi	r20, 0x80	; 128
    84ba:	ae 96       	adiw	r28, 0x2e	; 46
    84bc:	2d af       	std	Y+61, r18	; 0x3d
    84be:	3e af       	std	Y+62, r19	; 0x3e
    84c0:	4f af       	std	Y+63, r20	; 0x3f
    84c2:	ae 97       	sbiw	r28, 0x2e	; 46
    84c4:	ae 01       	movw	r20, r28
    84c6:	4f 5a       	subi	r20, 0xAF	; 175
    84c8:	5f 4f       	sbci	r21, 0xFF	; 255
    84ca:	67 96       	adiw	r28, 0x17	; 23
    84cc:	5f af       	std	Y+63, r21	; 0x3f
    84ce:	4e af       	std	Y+62, r20	; 0x3e
    84d0:	67 97       	sbiw	r28, 0x17	; 23
    84d2:	ce 01       	movw	r24, r28
    84d4:	8d 5b       	subi	r24, 0xBD	; 189
    84d6:	9f 4f       	sbci	r25, 0xFF	; 255
    84d8:	69 96       	adiw	r28, 0x19	; 25
    84da:	9f af       	std	Y+63, r25	; 0x3f
    84dc:	8e af       	std	Y+62, r24	; 0x3e
    84de:	69 97       	sbiw	r28, 0x19	; 25
    84e0:	de 01       	movw	r26, r28
    84e2:	a5 5b       	subi	r26, 0xB5	; 181
    84e4:	bf 4f       	sbci	r27, 0xFF	; 255
    84e6:	6b 96       	adiw	r28, 0x1b	; 27
    84e8:	bf af       	std	Y+63, r27	; 0x3f
    84ea:	ae af       	std	Y+62, r26	; 0x3e
    84ec:	6b 97       	sbiw	r28, 0x1b	; 27
    84ee:	fe 01       	movw	r30, r28
    84f0:	ed 5a       	subi	r30, 0xAD	; 173
    84f2:	ff 4f       	sbci	r31, 0xFF	; 255
    84f4:	6d 96       	adiw	r28, 0x1d	; 29
    84f6:	ff af       	std	Y+63, r31	; 0x3f
    84f8:	ee af       	std	Y+62, r30	; 0x3e
    84fa:	6d 97       	sbiw	r28, 0x1d	; 29
    84fc:	f6 01       	movw	r30, r12
    84fe:	5e 2d       	mov	r21, r14
    8500:	0e 94 f2 e6 	call	0x1cde4	; 0x1cde4 <__xload_1>
    8504:	66 23       	and	r22, r22
    8506:	09 f4       	brne	.+2      	; 0x850a <_printf_fn+0x7e>
    8508:	13 c4       	rjmp	.+2086   	; 0x8d30 <_printf_fn+0x8a4>
    850a:	ae 2d       	mov	r26, r14
    850c:	c6 01       	movw	r24, r12
    850e:	01 96       	adiw	r24, 0x01	; 1
    8510:	a1 1d       	adc	r26, r1
    8512:	3c 01       	movw	r6, r24
    8514:	8a 2e       	mov	r8, r26
    8516:	65 32       	cpi	r22, 0x25	; 37
    8518:	51 f0       	breq	.+20     	; 0x852e <_printf_fn+0xa2>
    851a:	a5 96       	adiw	r28, 0x25	; 37
    851c:	ae ad       	ldd	r26, Y+62	; 0x3e
    851e:	bf ad       	ldd	r27, Y+63	; 0x3f
    8520:	a5 97       	sbiw	r28, 0x25	; 37
    8522:	ed 91       	ld	r30, X+
    8524:	fc 91       	ld	r31, X
    8526:	11 97       	sbiw	r26, 0x01	; 1
    8528:	cd 01       	movw	r24, r26
    852a:	09 95       	icall
    852c:	d5 c3       	rjmp	.+1962   	; 0x8cd8 <_printf_fn+0x84c>
    852e:	91 2c       	mov	r9, r1
    8530:	f3 01       	movw	r30, r6
    8532:	58 2d       	mov	r21, r8
    8534:	0e 94 f2 e6 	call	0x1cde4	; 0x1cde4 <__xload_1>
    8538:	63 32       	cpi	r22, 0x23	; 35
    853a:	19 f4       	brne	.+6      	; 0x8542 <_printf_fn+0xb6>
    853c:	68 94       	set
    853e:	97 f8       	bld	r9, 7
    8540:	04 c0       	rjmp	.+8      	; 0x854a <_printf_fn+0xbe>
    8542:	6b 32       	cpi	r22, 0x2B	; 43
    8544:	39 f4       	brne	.+14     	; 0x8554 <_printf_fn+0xc8>
    8546:	68 94       	set
    8548:	92 f8       	bld	r9, 2
    854a:	bf ef       	ldi	r27, 0xFF	; 255
    854c:	6b 1a       	sub	r6, r27
    854e:	7b 0a       	sbc	r7, r27
    8550:	8b 0a       	sbc	r8, r27
    8552:	ee cf       	rjmp	.-36     	; 0x8530 <_printf_fn+0xa4>
    8554:	6d 32       	cpi	r22, 0x2D	; 45
    8556:	a9 f4       	brne	.+42     	; 0x8582 <_printf_fn+0xf6>
    8558:	93 fc       	sbrc	r9, 3
    855a:	05 c0       	rjmp	.+10     	; 0x8566 <_printf_fn+0xda>
    855c:	6d 32       	cpi	r22, 0x2D	; 45
    855e:	19 f4       	brne	.+6      	; 0x8566 <_printf_fn+0xda>
    8560:	68 94       	set
    8562:	93 f8       	bld	r9, 3
    8564:	f2 cf       	rjmp	.-28     	; 0x854a <_printf_fn+0xbe>
    8566:	94 fc       	sbrc	r9, 4
    8568:	05 c0       	rjmp	.+10     	; 0x8574 <_printf_fn+0xe8>
    856a:	60 32       	cpi	r22, 0x20	; 32
    856c:	19 f4       	brne	.+6      	; 0x8574 <_printf_fn+0xe8>
    856e:	68 94       	set
    8570:	94 f8       	bld	r9, 4
    8572:	eb cf       	rjmp	.-42     	; 0x854a <_printf_fn+0xbe>
    8574:	95 fc       	sbrc	r9, 5
    8576:	e9 cf       	rjmp	.-46     	; 0x854a <_printf_fn+0xbe>
    8578:	60 33       	cpi	r22, 0x30	; 48
    857a:	39 f7       	brne	.-50     	; 0x854a <_printf_fn+0xbe>
    857c:	68 94       	set
    857e:	95 f8       	bld	r9, 5
    8580:	e4 cf       	rjmp	.-56     	; 0x854a <_printf_fn+0xbe>
    8582:	86 2f       	mov	r24, r22
    8584:	8f 7e       	andi	r24, 0xEF	; 239
    8586:	80 32       	cpi	r24, 0x20	; 32
    8588:	39 f3       	breq	.-50     	; 0x8558 <_printf_fn+0xcc>
    858a:	70 e0       	ldi	r23, 0x00	; 0
    858c:	60 53       	subi	r22, 0x30	; 48
    858e:	71 09       	sbc	r23, r1
    8590:	6f 96       	adiw	r28, 0x1f	; 31
    8592:	1f ae       	std	Y+63, r1	; 0x3f
    8594:	1e ae       	std	Y+62, r1	; 0x3e
    8596:	6f 97       	sbiw	r28, 0x1f	; 31
    8598:	6a 30       	cpi	r22, 0x0A	; 10
    859a:	71 05       	cpc	r23, r1
    859c:	10 f5       	brcc	.+68     	; 0x85e2 <_printf_fn+0x156>
    859e:	2a e0       	ldi	r18, 0x0A	; 10
    85a0:	f3 01       	movw	r30, r6
    85a2:	58 2d       	mov	r21, r8
    85a4:	0e 94 f2 e6 	call	0x1cde4	; 0x1cde4 <__xload_1>
    85a8:	70 e0       	ldi	r23, 0x00	; 0
    85aa:	cb 01       	movw	r24, r22
    85ac:	c0 97       	sbiw	r24, 0x30	; 48
    85ae:	0a 97       	sbiw	r24, 0x0a	; 10
    85b0:	b0 f4       	brcc	.+44     	; 0x85de <_printf_fn+0x152>
    85b2:	ef ef       	ldi	r30, 0xFF	; 255
    85b4:	6e 1a       	sub	r6, r30
    85b6:	7e 0a       	sbc	r7, r30
    85b8:	8e 0a       	sbc	r8, r30
    85ba:	6f 96       	adiw	r28, 0x1f	; 31
    85bc:	4e ad       	ldd	r20, Y+62	; 0x3e
    85be:	5f ad       	ldd	r21, Y+63	; 0x3f
    85c0:	6f 97       	sbiw	r28, 0x1f	; 31
    85c2:	24 9f       	mul	r18, r20
    85c4:	c0 01       	movw	r24, r0
    85c6:	25 9f       	mul	r18, r21
    85c8:	90 0d       	add	r25, r0
    85ca:	11 24       	eor	r1, r1
    85cc:	68 0f       	add	r22, r24
    85ce:	79 1f       	adc	r23, r25
    85d0:	cb 01       	movw	r24, r22
    85d2:	c0 97       	sbiw	r24, 0x30	; 48
    85d4:	6f 96       	adiw	r28, 0x1f	; 31
    85d6:	9f af       	std	Y+63, r25	; 0x3f
    85d8:	8e af       	std	Y+62, r24	; 0x3e
    85da:	6f 97       	sbiw	r28, 0x1f	; 31
    85dc:	e1 cf       	rjmp	.-62     	; 0x85a0 <_printf_fn+0x114>
    85de:	68 94       	set
    85e0:	90 f8       	bld	r9, 0
    85e2:	f3 01       	movw	r30, r6
    85e4:	58 2d       	mov	r21, r8
    85e6:	0e 94 f2 e6 	call	0x1cde4	; 0x1cde4 <__xload_1>
    85ea:	6e 32       	cpi	r22, 0x2E	; 46
    85ec:	61 f5       	brne	.+88     	; 0x8646 <_printf_fn+0x1ba>
    85ee:	9f ef       	ldi	r25, 0xFF	; 255
    85f0:	69 1a       	sub	r6, r25
    85f2:	79 0a       	sbc	r7, r25
    85f4:	89 0a       	sbc	r8, r25
    85f6:	a1 96       	adiw	r28, 0x21	; 33
    85f8:	1f ae       	std	Y+63, r1	; 0x3f
    85fa:	1e ae       	std	Y+62, r1	; 0x3e
    85fc:	a1 97       	sbiw	r28, 0x21	; 33
    85fe:	2a e0       	ldi	r18, 0x0A	; 10
    8600:	f3 01       	movw	r30, r6
    8602:	58 2d       	mov	r21, r8
    8604:	0e 94 f2 e6 	call	0x1cde4	; 0x1cde4 <__xload_1>
    8608:	70 e0       	ldi	r23, 0x00	; 0
    860a:	cb 01       	movw	r24, r22
    860c:	c0 97       	sbiw	r24, 0x30	; 48
    860e:	0a 97       	sbiw	r24, 0x0a	; 10
    8610:	b8 f4       	brcc	.+46     	; 0x8640 <_printf_fn+0x1b4>
    8612:	af ef       	ldi	r26, 0xFF	; 255
    8614:	6a 1a       	sub	r6, r26
    8616:	7a 0a       	sbc	r7, r26
    8618:	8a 0a       	sbc	r8, r26
    861a:	a1 96       	adiw	r28, 0x21	; 33
    861c:	ee ad       	ldd	r30, Y+62	; 0x3e
    861e:	ff ad       	ldd	r31, Y+63	; 0x3f
    8620:	a1 97       	sbiw	r28, 0x21	; 33
    8622:	2e 9f       	mul	r18, r30
    8624:	c0 01       	movw	r24, r0
    8626:	2f 9f       	mul	r18, r31
    8628:	90 0d       	add	r25, r0
    862a:	11 24       	eor	r1, r1
    862c:	68 0f       	add	r22, r24
    862e:	79 1f       	adc	r23, r25
    8630:	ab 01       	movw	r20, r22
    8632:	40 53       	subi	r20, 0x30	; 48
    8634:	51 09       	sbc	r21, r1
    8636:	a1 96       	adiw	r28, 0x21	; 33
    8638:	5f af       	std	Y+63, r21	; 0x3f
    863a:	4e af       	std	Y+62, r20	; 0x3e
    863c:	a1 97       	sbiw	r28, 0x21	; 33
    863e:	e0 cf       	rjmp	.-64     	; 0x8600 <_printf_fn+0x174>
    8640:	68 94       	set
    8642:	91 f8       	bld	r9, 1
    8644:	04 c0       	rjmp	.+8      	; 0x864e <_printf_fn+0x1c2>
    8646:	a1 96       	adiw	r28, 0x21	; 33
    8648:	1f ae       	std	Y+63, r1	; 0x3f
    864a:	1e ae       	std	Y+62, r1	; 0x3e
    864c:	a1 97       	sbiw	r28, 0x21	; 33
    864e:	f3 01       	movw	r30, r6
    8650:	58 2d       	mov	r21, r8
    8652:	0e 94 f2 e6 	call	0x1cde4	; 0x1cde4 <__xload_1>
    8656:	69 34       	cpi	r22, 0x49	; 73
    8658:	91 f5       	brne	.+100    	; 0x86be <_printf_fn+0x232>
    865a:	5f ef       	ldi	r21, 0xFF	; 255
    865c:	65 1a       	sub	r6, r21
    865e:	75 0a       	sbc	r7, r21
    8660:	85 0a       	sbc	r8, r21
    8662:	41 2c       	mov	r4, r1
    8664:	51 2c       	mov	r5, r1
    8666:	2a e0       	ldi	r18, 0x0A	; 10
    8668:	f3 01       	movw	r30, r6
    866a:	58 2d       	mov	r21, r8
    866c:	0e 94 f2 e6 	call	0x1cde4	; 0x1cde4 <__xload_1>
    8670:	70 e0       	ldi	r23, 0x00	; 0
    8672:	cb 01       	movw	r24, r22
    8674:	c0 97       	sbiw	r24, 0x30	; 48
    8676:	0a 97       	sbiw	r24, 0x0a	; 10
    8678:	80 f4       	brcc	.+32     	; 0x869a <_printf_fn+0x20e>
    867a:	8f ef       	ldi	r24, 0xFF	; 255
    867c:	68 1a       	sub	r6, r24
    867e:	78 0a       	sbc	r7, r24
    8680:	88 0a       	sbc	r8, r24
    8682:	24 9d       	mul	r18, r4
    8684:	c0 01       	movw	r24, r0
    8686:	25 9d       	mul	r18, r5
    8688:	90 0d       	add	r25, r0
    868a:	11 24       	eor	r1, r1
    868c:	68 0f       	add	r22, r24
    868e:	79 1f       	adc	r23, r25
    8690:	2b 01       	movw	r4, r22
    8692:	90 e3       	ldi	r25, 0x30	; 48
    8694:	49 1a       	sub	r4, r25
    8696:	51 08       	sbc	r5, r1
    8698:	e7 cf       	rjmp	.-50     	; 0x8668 <_printf_fn+0x1dc>
    869a:	41 14       	cp	r4, r1
    869c:	51 04       	cpc	r5, r1
    869e:	09 f4       	brne	.+2      	; 0x86a2 <_printf_fn+0x216>
    86a0:	40 c0       	rjmp	.+128    	; 0x8722 <_printf_fn+0x296>
    86a2:	c2 01       	movw	r24, r4
    86a4:	87 70       	andi	r24, 0x07	; 7
    86a6:	99 27       	eor	r25, r25
    86a8:	89 2b       	or	r24, r25
    86aa:	c9 f5       	brne	.+114    	; 0x871e <_printf_fn+0x292>
    86ac:	63 e0       	ldi	r22, 0x03	; 3
    86ae:	55 94       	asr	r5
    86b0:	47 94       	ror	r4
    86b2:	6a 95       	dec	r22
    86b4:	e1 f7       	brne	.-8      	; 0x86ae <_printf_fn+0x222>
    86b6:	41 14       	cp	r4, r1
    86b8:	51 04       	cpc	r5, r1
    86ba:	99 f1       	breq	.+102    	; 0x8722 <_printf_fn+0x296>
    86bc:	21 c0       	rjmp	.+66     	; 0x8700 <_printf_fn+0x274>
    86be:	68 36       	cpi	r22, 0x68	; 104
    86c0:	29 f4       	brne	.+10     	; 0x86cc <_printf_fn+0x240>
    86c2:	af ef       	ldi	r26, 0xFF	; 255
    86c4:	6a 1a       	sub	r6, r26
    86c6:	7a 0a       	sbc	r7, r26
    86c8:	8a 0a       	sbc	r8, r26
    86ca:	09 c3       	rjmp	.+1554   	; 0x8cde <_printf_fn+0x852>
    86cc:	6c 36       	cpi	r22, 0x6C	; 108
    86ce:	09 f0       	breq	.+2      	; 0x86d2 <_printf_fn+0x246>
    86d0:	06 c3       	rjmp	.+1548   	; 0x8cde <_printf_fn+0x852>
    86d2:	a8 2d       	mov	r26, r8
    86d4:	c3 01       	movw	r24, r6
    86d6:	01 96       	adiw	r24, 0x01	; 1
    86d8:	a1 1d       	adc	r26, r1
    86da:	fc 01       	movw	r30, r24
    86dc:	5a 2f       	mov	r21, r26
    86de:	0e 94 f2 e6 	call	0x1cde4	; 0x1cde4 <__xload_1>
    86e2:	6c 36       	cpi	r22, 0x6C	; 108
    86e4:	31 f0       	breq	.+12     	; 0x86f2 <_printf_fn+0x266>
    86e6:	3c 01       	movw	r6, r24
    86e8:	8a 2e       	mov	r8, r26
    86ea:	54 e0       	ldi	r21, 0x04	; 4
    86ec:	45 2e       	mov	r4, r21
    86ee:	51 2c       	mov	r5, r1
    86f0:	07 c0       	rjmp	.+14     	; 0x8700 <_printf_fn+0x274>
    86f2:	b2 e0       	ldi	r27, 0x02	; 2
    86f4:	6b 0e       	add	r6, r27
    86f6:	71 1c       	adc	r7, r1
    86f8:	81 1c       	adc	r8, r1
    86fa:	48 e0       	ldi	r20, 0x08	; 8
    86fc:	44 2e       	mov	r4, r20
    86fe:	51 2c       	mov	r5, r1
    8700:	f3 01       	movw	r30, r6
    8702:	58 2d       	mov	r21, r8
    8704:	0e 94 f2 e6 	call	0x1cde4	; 0x1cde4 <__xload_1>
    8708:	e6 2f       	mov	r30, r22
    870a:	f0 e0       	ldi	r31, 0x00	; 0
    870c:	a3 96       	adiw	r28, 0x23	; 35
    870e:	ff af       	std	Y+63, r31	; 0x3f
    8710:	ee af       	std	Y+62, r30	; 0x3e
    8712:	a3 97       	sbiw	r28, 0x23	; 35
    8714:	e4 36       	cpi	r30, 0x64	; 100
    8716:	f1 05       	cpc	r31, r1
    8718:	09 f4       	brne	.+2      	; 0x871c <_printf_fn+0x290>
    871a:	e5 c2       	rjmp	.+1482   	; 0x8ce6 <_printf_fn+0x85a>
    871c:	06 c0       	rjmp	.+12     	; 0x872a <_printf_fn+0x29e>
    871e:	41 2c       	mov	r4, r1
    8720:	51 2c       	mov	r5, r1
    8722:	a3 96       	adiw	r28, 0x23	; 35
    8724:	1f ae       	std	Y+63, r1	; 0x3f
    8726:	1e ae       	std	Y+62, r1	; 0x3e
    8728:	a3 97       	sbiw	r28, 0x23	; 35
    872a:	31 e0       	ldi	r19, 0x01	; 1
    872c:	20 e0       	ldi	r18, 0x00	; 0
    872e:	a3 96       	adiw	r28, 0x23	; 35
    8730:	4e ad       	ldd	r20, Y+62	; 0x3e
    8732:	5f ad       	ldd	r21, Y+63	; 0x3f
    8734:	a3 97       	sbiw	r28, 0x23	; 35
    8736:	44 34       	cpi	r20, 0x44	; 68
    8738:	51 05       	cpc	r21, r1
    873a:	09 f0       	breq	.+2      	; 0x873e <_printf_fn+0x2b2>
    873c:	30 e0       	ldi	r19, 0x00	; 0
    873e:	83 2f       	mov	r24, r19
    8740:	92 2f       	mov	r25, r18
    8742:	a3 96       	adiw	r28, 0x23	; 35
    8744:	ee ad       	ldd	r30, Y+62	; 0x3e
    8746:	ff ad       	ldd	r31, Y+63	; 0x3f
    8748:	a3 97       	sbiw	r28, 0x23	; 35
    874a:	e2 54       	subi	r30, 0x42	; 66
    874c:	f1 09       	sbc	r31, r1
    874e:	e7 33       	cpi	r30, 0x37	; 55
    8750:	f1 05       	cpc	r31, r1
    8752:	08 f0       	brcs	.+2      	; 0x8756 <_printf_fn+0x2ca>
    8754:	57 c1       	rjmp	.+686    	; 0x8a04 <_printf_fn+0x578>
    8756:	ea 5b       	subi	r30, 0xBA	; 186
    8758:	ff 4f       	sbci	r31, 0xFF	; 255
    875a:	0c 94 8c e6 	jmp	0x1cd18	; 0x1cd18 <__tablejump2__>
    875e:	32 e0       	ldi	r19, 0x02	; 2
    8760:	43 2e       	mov	r4, r19
    8762:	51 2c       	mov	r5, r1
    8764:	29 2d       	mov	r18, r9
    8766:	28 72       	andi	r18, 0x28	; 40
    8768:	28 32       	cpi	r18, 0x28	; 40
    876a:	11 f4       	brne	.+4      	; 0x8770 <_printf_fn+0x2e4>
    876c:	e8 94       	clt
    876e:	95 f8       	bld	r9, 5
    8770:	29 2d       	mov	r18, r9
    8772:	22 72       	andi	r18, 0x22	; 34
    8774:	22 32       	cpi	r18, 0x22	; 34
    8776:	11 f4       	brne	.+4      	; 0x877c <_printf_fn+0x2f0>
    8778:	e8 94       	clt
    877a:	95 f8       	bld	r9, 5
    877c:	29 2d       	mov	r18, r9
    877e:	21 72       	andi	r18, 0x21	; 33
    8780:	21 32       	cpi	r18, 0x21	; 33
    8782:	79 f4       	brne	.+30     	; 0x87a2 <_printf_fn+0x316>
    8784:	a1 96       	adiw	r28, 0x21	; 33
    8786:	ae ad       	ldd	r26, Y+62	; 0x3e
    8788:	bf ad       	ldd	r27, Y+63	; 0x3f
    878a:	a1 97       	sbiw	r28, 0x21	; 33
    878c:	6f 96       	adiw	r28, 0x1f	; 31
    878e:	ee ad       	ldd	r30, Y+62	; 0x3e
    8790:	ff ad       	ldd	r31, Y+63	; 0x3f
    8792:	6f 97       	sbiw	r28, 0x1f	; 31
    8794:	ae 17       	cp	r26, r30
    8796:	bf 07       	cpc	r27, r31
    8798:	24 f4       	brge	.+8      	; 0x87a2 <_printf_fn+0x316>
    879a:	a1 96       	adiw	r28, 0x21	; 33
    879c:	ff af       	std	Y+63, r31	; 0x3f
    879e:	ee af       	std	Y+62, r30	; 0x3e
    87a0:	a1 97       	sbiw	r28, 0x21	; 33
    87a2:	29 2d       	mov	r18, r9
    87a4:	23 72       	andi	r18, 0x23	; 35
    87a6:	23 32       	cpi	r18, 0x23	; 35
    87a8:	79 f4       	brne	.+30     	; 0x87c8 <_printf_fn+0x33c>
    87aa:	a1 96       	adiw	r28, 0x21	; 33
    87ac:	2e ad       	ldd	r18, Y+62	; 0x3e
    87ae:	3f ad       	ldd	r19, Y+63	; 0x3f
    87b0:	a1 97       	sbiw	r28, 0x21	; 33
    87b2:	6f 96       	adiw	r28, 0x1f	; 31
    87b4:	4e ad       	ldd	r20, Y+62	; 0x3e
    87b6:	5f ad       	ldd	r21, Y+63	; 0x3f
    87b8:	6f 97       	sbiw	r28, 0x1f	; 31
    87ba:	24 17       	cp	r18, r20
    87bc:	35 07       	cpc	r19, r21
    87be:	24 f4       	brge	.+8      	; 0x87c8 <_printf_fn+0x33c>
    87c0:	a1 96       	adiw	r28, 0x21	; 33
    87c2:	5f af       	std	Y+63, r21	; 0x3f
    87c4:	4e af       	std	Y+62, r20	; 0x3e
    87c6:	a1 97       	sbiw	r28, 0x21	; 33
    87c8:	e8 94       	clt
    87ca:	94 f8       	bld	r9, 4
    87cc:	e8 94       	clt
    87ce:	92 f8       	bld	r9, 2
    87d0:	e8 94       	clt
    87d2:	96 f8       	bld	r9, 6
    87d4:	52 e0       	ldi	r21, 0x02	; 2
    87d6:	45 16       	cp	r4, r21
    87d8:	51 04       	cpc	r5, r1
    87da:	f9 f4       	brne	.+62     	; 0x881a <_printf_fn+0x38e>
    87dc:	51 01       	movw	r10, r2
    87de:	82 e0       	ldi	r24, 0x02	; 2
    87e0:	a8 0e       	add	r10, r24
    87e2:	b1 1c       	adc	r11, r1
    87e4:	d1 01       	movw	r26, r2
    87e6:	8d 91       	ld	r24, X+
    87e8:	9c 91       	ld	r25, X
    87ea:	65 96       	adiw	r28, 0x15	; 21
    87ec:	9f af       	std	Y+63, r25	; 0x3f
    87ee:	8e af       	std	Y+62, r24	; 0x3e
    87f0:	65 97       	sbiw	r28, 0x15	; 21
    87f2:	a3 96       	adiw	r28, 0x23	; 35
    87f4:	ee ad       	ldd	r30, Y+62	; 0x3e
    87f6:	ff ad       	ldd	r31, Y+63	; 0x3f
    87f8:	a3 97       	sbiw	r28, 0x23	; 35
    87fa:	e4 34       	cpi	r30, 0x44	; 68
    87fc:	f1 05       	cpc	r31, r1
    87fe:	09 f0       	breq	.+2      	; 0x8802 <_printf_fn+0x376>
    8800:	ac c0       	rjmp	.+344    	; 0x895a <_printf_fn+0x4ce>
    8802:	97 ff       	sbrs	r25, 7
    8804:	a7 c0       	rjmp	.+334    	; 0x8954 <_printf_fn+0x4c8>
    8806:	68 94       	set
    8808:	96 f8       	bld	r9, 6
    880a:	91 95       	neg	r25
    880c:	81 95       	neg	r24
    880e:	91 09       	sbc	r25, r1
    8810:	65 96       	adiw	r28, 0x15	; 21
    8812:	9f af       	std	Y+63, r25	; 0x3f
    8814:	8e af       	std	Y+62, r24	; 0x3e
    8816:	65 97       	sbiw	r28, 0x15	; 21
    8818:	9d c0       	rjmp	.+314    	; 0x8954 <_printf_fn+0x4c8>
    881a:	f4 e0       	ldi	r31, 0x04	; 4
    881c:	4f 16       	cp	r4, r31
    881e:	51 04       	cpc	r5, r1
    8820:	59 f5       	brne	.+86     	; 0x8878 <_printf_fn+0x3ec>
    8822:	51 01       	movw	r10, r2
    8824:	24 e0       	ldi	r18, 0x04	; 4
    8826:	a2 0e       	add	r10, r18
    8828:	b1 1c       	adc	r11, r1
    882a:	f1 01       	movw	r30, r2
    882c:	80 81       	ld	r24, Z
    882e:	91 81       	ldd	r25, Z+1	; 0x01
    8830:	a2 81       	ldd	r26, Z+2	; 0x02
    8832:	b3 81       	ldd	r27, Z+3	; 0x03
    8834:	2f 96       	adiw	r28, 0x0f	; 15
    8836:	8c af       	std	Y+60, r24	; 0x3c
    8838:	9d af       	std	Y+61, r25	; 0x3d
    883a:	ae af       	std	Y+62, r26	; 0x3e
    883c:	bf af       	std	Y+63, r27	; 0x3f
    883e:	2f 97       	sbiw	r28, 0x0f	; 15
    8840:	a3 96       	adiw	r28, 0x23	; 35
    8842:	2e ad       	ldd	r18, Y+62	; 0x3e
    8844:	3f ad       	ldd	r19, Y+63	; 0x3f
    8846:	a3 97       	sbiw	r28, 0x23	; 35
    8848:	24 34       	cpi	r18, 0x44	; 68
    884a:	31 05       	cpc	r19, r1
    884c:	09 f0       	breq	.+2      	; 0x8850 <_printf_fn+0x3c4>
    884e:	8f c0       	rjmp	.+286    	; 0x896e <_printf_fn+0x4e2>
    8850:	b7 ff       	sbrs	r27, 7
    8852:	8a c0       	rjmp	.+276    	; 0x8968 <_printf_fn+0x4dc>
    8854:	68 94       	set
    8856:	96 f8       	bld	r9, 6
    8858:	b0 95       	com	r27
    885a:	a0 95       	com	r26
    885c:	90 95       	com	r25
    885e:	81 95       	neg	r24
    8860:	9f 4f       	sbci	r25, 0xFF	; 255
    8862:	af 4f       	sbci	r26, 0xFF	; 255
    8864:	bf 4f       	sbci	r27, 0xFF	; 255
    8866:	2f 96       	adiw	r28, 0x0f	; 15
    8868:	8c af       	std	Y+60, r24	; 0x3c
    886a:	9d af       	std	Y+61, r25	; 0x3d
    886c:	ae af       	std	Y+62, r26	; 0x3e
    886e:	bf af       	std	Y+63, r27	; 0x3f
    8870:	2f 97       	sbiw	r28, 0x0f	; 15
    8872:	7a c0       	rjmp	.+244    	; 0x8968 <_printf_fn+0x4dc>
    8874:	81 e0       	ldi	r24, 0x01	; 1
    8876:	90 e0       	ldi	r25, 0x00	; 0
    8878:	51 01       	movw	r10, r2
    887a:	38 e0       	ldi	r19, 0x08	; 8
    887c:	43 16       	cp	r4, r19
    887e:	51 04       	cpc	r5, r1
    8880:	09 f0       	breq	.+2      	; 0x8884 <_printf_fn+0x3f8>
    8882:	7c c0       	rjmp	.+248    	; 0x897c <_printf_fn+0x4f0>
    8884:	48 e0       	ldi	r20, 0x08	; 8
    8886:	a4 0e       	add	r10, r20
    8888:	b1 1c       	adc	r11, r1
    888a:	d1 01       	movw	r26, r2
    888c:	fc 90       	ld	r15, X
    888e:	f1 01       	movw	r30, r2
    8890:	01 81       	ldd	r16, Z+1	; 0x01
    8892:	12 81       	ldd	r17, Z+2	; 0x02
    8894:	f3 81       	ldd	r31, Z+3	; 0x03
    8896:	aa 96       	adiw	r28, 0x2a	; 42
    8898:	ff af       	std	Y+63, r31	; 0x3f
    889a:	aa 97       	sbiw	r28, 0x2a	; 42
    889c:	f1 01       	movw	r30, r2
    889e:	f4 81       	ldd	r31, Z+4	; 0x04
    88a0:	ab 96       	adiw	r28, 0x2b	; 43
    88a2:	ff af       	std	Y+63, r31	; 0x3f
    88a4:	ab 97       	sbiw	r28, 0x2b	; 43
    88a6:	f1 01       	movw	r30, r2
    88a8:	b5 81       	ldd	r27, Z+5	; 0x05
    88aa:	f6 81       	ldd	r31, Z+6	; 0x06
    88ac:	af 96       	adiw	r28, 0x2f	; 47
    88ae:	ff af       	std	Y+63, r31	; 0x3f
    88b0:	af 97       	sbiw	r28, 0x2f	; 47
    88b2:	f1 01       	movw	r30, r2
    88b4:	37 80       	ldd	r3, Z+7	; 0x07
    88b6:	24 96       	adiw	r28, 0x04	; 4
    88b8:	ff ae       	std	Y+63, r15	; 0x3f
    88ba:	24 97       	sbiw	r28, 0x04	; 4
    88bc:	25 96       	adiw	r28, 0x05	; 5
    88be:	0f af       	std	Y+63, r16	; 0x3f
    88c0:	25 97       	sbiw	r28, 0x05	; 5
    88c2:	26 96       	adiw	r28, 0x06	; 6
    88c4:	1f af       	std	Y+63, r17	; 0x3f
    88c6:	26 97       	sbiw	r28, 0x06	; 6
    88c8:	aa 96       	adiw	r28, 0x2a	; 42
    88ca:	ff ad       	ldd	r31, Y+63	; 0x3f
    88cc:	aa 97       	sbiw	r28, 0x2a	; 42
    88ce:	27 96       	adiw	r28, 0x07	; 7
    88d0:	ff af       	std	Y+63, r31	; 0x3f
    88d2:	27 97       	sbiw	r28, 0x07	; 7
    88d4:	ab 96       	adiw	r28, 0x2b	; 43
    88d6:	ef ad       	ldd	r30, Y+63	; 0x3f
    88d8:	ab 97       	sbiw	r28, 0x2b	; 43
    88da:	28 96       	adiw	r28, 0x08	; 8
    88dc:	ef af       	std	Y+63, r30	; 0x3f
    88de:	28 97       	sbiw	r28, 0x08	; 8
    88e0:	29 96       	adiw	r28, 0x09	; 9
    88e2:	bf af       	std	Y+63, r27	; 0x3f
    88e4:	29 97       	sbiw	r28, 0x09	; 9
    88e6:	af 96       	adiw	r28, 0x2f	; 47
    88e8:	ff ad       	ldd	r31, Y+63	; 0x3f
    88ea:	af 97       	sbiw	r28, 0x2f	; 47
    88ec:	2a 96       	adiw	r28, 0x0a	; 10
    88ee:	ff af       	std	Y+63, r31	; 0x3f
    88f0:	2a 97       	sbiw	r28, 0x0a	; 10
    88f2:	2b 96       	adiw	r28, 0x0b	; 11
    88f4:	3f ae       	std	Y+63, r3	; 0x3f
    88f6:	2b 97       	sbiw	r28, 0x0b	; 11
    88f8:	89 2b       	or	r24, r25
    88fa:	09 f4       	brne	.+2      	; 0x88fe <_printf_fn+0x472>
    88fc:	4a c0       	rjmp	.+148    	; 0x8992 <_printf_fn+0x506>
    88fe:	2f 2d       	mov	r18, r15
    8900:	30 2f       	mov	r19, r16
    8902:	41 2f       	mov	r20, r17
    8904:	aa 96       	adiw	r28, 0x2a	; 42
    8906:	5f ad       	ldd	r21, Y+63	; 0x3f
    8908:	aa 97       	sbiw	r28, 0x2a	; 42
    890a:	6e 2f       	mov	r22, r30
    890c:	7b 2f       	mov	r23, r27
    890e:	8f 2f       	mov	r24, r31
    8910:	93 2d       	mov	r25, r3
    8912:	a0 e0       	ldi	r26, 0x00	; 0
    8914:	0e 94 f9 e6 	call	0x1cdf2	; 0x1cdf2 <__cmpdi2_s8>
    8918:	e4 f5       	brge	.+120    	; 0x8992 <_printf_fn+0x506>
    891a:	68 94       	set
    891c:	96 f8       	bld	r9, 6
    891e:	0e 94 ab e6 	call	0x1cd56	; 0x1cd56 <__negdi2>
    8922:	24 96       	adiw	r28, 0x04	; 4
    8924:	2f af       	std	Y+63, r18	; 0x3f
    8926:	24 97       	sbiw	r28, 0x04	; 4
    8928:	25 96       	adiw	r28, 0x05	; 5
    892a:	3f af       	std	Y+63, r19	; 0x3f
    892c:	25 97       	sbiw	r28, 0x05	; 5
    892e:	26 96       	adiw	r28, 0x06	; 6
    8930:	4f af       	std	Y+63, r20	; 0x3f
    8932:	26 97       	sbiw	r28, 0x06	; 6
    8934:	27 96       	adiw	r28, 0x07	; 7
    8936:	5f af       	std	Y+63, r21	; 0x3f
    8938:	27 97       	sbiw	r28, 0x07	; 7
    893a:	28 96       	adiw	r28, 0x08	; 8
    893c:	6f af       	std	Y+63, r22	; 0x3f
    893e:	28 97       	sbiw	r28, 0x08	; 8
    8940:	29 96       	adiw	r28, 0x09	; 9
    8942:	7f af       	std	Y+63, r23	; 0x3f
    8944:	29 97       	sbiw	r28, 0x09	; 9
    8946:	2a 96       	adiw	r28, 0x0a	; 10
    8948:	8f af       	std	Y+63, r24	; 0x3f
    894a:	2a 97       	sbiw	r28, 0x0a	; 10
    894c:	2b 96       	adiw	r28, 0x0b	; 11
    894e:	9f af       	std	Y+63, r25	; 0x3f
    8950:	2b 97       	sbiw	r28, 0x0b	; 11
    8952:	1f c0       	rjmp	.+62     	; 0x8992 <_printf_fn+0x506>
    8954:	22 e0       	ldi	r18, 0x02	; 2
    8956:	42 2e       	mov	r4, r18
    8958:	51 2c       	mov	r5, r1
    895a:	6c 96       	adiw	r28, 0x1c	; 28
    895c:	8f ad       	ldd	r24, Y+63	; 0x3f
    895e:	6c 97       	sbiw	r28, 0x1c	; 28
    8960:	6d 96       	adiw	r28, 0x1d	; 29
    8962:	9f ad       	ldd	r25, Y+63	; 0x3f
    8964:	6d 97       	sbiw	r28, 0x1d	; 29
    8966:	1b c0       	rjmp	.+54     	; 0x899e <_printf_fn+0x512>
    8968:	94 e0       	ldi	r25, 0x04	; 4
    896a:	49 2e       	mov	r4, r25
    896c:	51 2c       	mov	r5, r1
    896e:	6a 96       	adiw	r28, 0x1a	; 26
    8970:	8f ad       	ldd	r24, Y+63	; 0x3f
    8972:	6a 97       	sbiw	r28, 0x1a	; 26
    8974:	6b 96       	adiw	r28, 0x1b	; 27
    8976:	9f ad       	ldd	r25, Y+63	; 0x3f
    8978:	6b 97       	sbiw	r28, 0x1b	; 27
    897a:	11 c0       	rjmp	.+34     	; 0x899e <_printf_fn+0x512>
    897c:	66 96       	adiw	r28, 0x16	; 22
    897e:	8f ad       	ldd	r24, Y+63	; 0x3f
    8980:	66 97       	sbiw	r28, 0x16	; 22
    8982:	67 96       	adiw	r28, 0x17	; 23
    8984:	9f ad       	ldd	r25, Y+63	; 0x3f
    8986:	67 97       	sbiw	r28, 0x17	; 23
    8988:	a3 96       	adiw	r28, 0x23	; 35
    898a:	1f ae       	std	Y+63, r1	; 0x3f
    898c:	1e ae       	std	Y+62, r1	; 0x3e
    898e:	a3 97       	sbiw	r28, 0x23	; 35
    8990:	06 c0       	rjmp	.+12     	; 0x899e <_printf_fn+0x512>
    8992:	68 96       	adiw	r28, 0x18	; 24
    8994:	8f ad       	ldd	r24, Y+63	; 0x3f
    8996:	68 97       	sbiw	r28, 0x18	; 24
    8998:	69 96       	adiw	r28, 0x19	; 25
    899a:	9f ad       	ldd	r25, Y+63	; 0x3f
    899c:	69 97       	sbiw	r28, 0x19	; 25
    899e:	2f ef       	ldi	r18, 0xFF	; 255
    89a0:	62 1a       	sub	r6, r18
    89a2:	72 0a       	sbc	r7, r18
    89a4:	82 0a       	sbc	r8, r18
    89a6:	15 01       	movw	r2, r10
    89a8:	33 c0       	rjmp	.+102    	; 0x8a10 <_printf_fn+0x584>
    89aa:	91 fc       	sbrc	r9, 1
    89ac:	08 c0       	rjmp	.+16     	; 0x89be <_printf_fn+0x532>
    89ae:	68 94       	set
    89b0:	91 f8       	bld	r9, 1
    89b2:	46 e0       	ldi	r20, 0x06	; 6
    89b4:	50 e0       	ldi	r21, 0x00	; 0
    89b6:	a1 96       	adiw	r28, 0x21	; 33
    89b8:	5f af       	std	Y+63, r21	; 0x3f
    89ba:	4e af       	std	Y+62, r20	; 0x3e
    89bc:	a1 97       	sbiw	r28, 0x21	; 33
    89be:	d1 01       	movw	r26, r2
    89c0:	8d 91       	ld	r24, X+
    89c2:	9d 91       	ld	r25, X+
    89c4:	0d 90       	ld	r0, X+
    89c6:	bc 91       	ld	r27, X
    89c8:	a0 2d       	mov	r26, r0
    89ca:	a9 96       	adiw	r28, 0x29	; 41
    89cc:	8c af       	std	Y+60, r24	; 0x3c
    89ce:	9d af       	std	Y+61, r25	; 0x3d
    89d0:	ae af       	std	Y+62, r26	; 0x3e
    89d2:	bf af       	std	Y+63, r27	; 0x3f
    89d4:	a9 97       	sbiw	r28, 0x29	; 41
    89d6:	bf ef       	ldi	r27, 0xFF	; 255
    89d8:	6b 1a       	sub	r6, r27
    89da:	7b 0a       	sbc	r7, r27
    89dc:	8b 0a       	sbc	r8, r27
    89de:	f1 01       	movw	r30, r2
    89e0:	34 96       	adiw	r30, 0x04	; 4
    89e2:	1f 01       	movw	r2, r30
    89e4:	0f c0       	rjmp	.+30     	; 0x8a04 <_printf_fn+0x578>
    89e6:	ff ef       	ldi	r31, 0xFF	; 255
    89e8:	6f 1a       	sub	r6, r31
    89ea:	7f 0a       	sbc	r7, r31
    89ec:	8f 0a       	sbc	r8, r31
    89ee:	c5 c0       	rjmp	.+394    	; 0x8b7a <_printf_fn+0x6ee>
    89f0:	2f ef       	ldi	r18, 0xFF	; 255
    89f2:	62 1a       	sub	r6, r18
    89f4:	72 0a       	sbc	r7, r18
    89f6:	82 0a       	sbc	r8, r18
    89f8:	11 c1       	rjmp	.+546    	; 0x8c1c <_printf_fn+0x790>
    89fa:	3f ef       	ldi	r19, 0xFF	; 255
    89fc:	63 1a       	sub	r6, r19
    89fe:	73 0a       	sbc	r7, r19
    8a00:	83 0a       	sbc	r8, r19
    8a02:	c8 c0       	rjmp	.+400    	; 0x8b94 <_printf_fn+0x708>
    8a04:	66 96       	adiw	r28, 0x16	; 22
    8a06:	8f ad       	ldd	r24, Y+63	; 0x3f
    8a08:	66 97       	sbiw	r28, 0x16	; 22
    8a0a:	67 96       	adiw	r28, 0x17	; 23
    8a0c:	9f ad       	ldd	r25, Y+63	; 0x3f
    8a0e:	67 97       	sbiw	r28, 0x17	; 23
    8a10:	a3 96       	adiw	r28, 0x23	; 35
    8a12:	ee ad       	ldd	r30, Y+62	; 0x3e
    8a14:	ff ad       	ldd	r31, Y+63	; 0x3f
    8a16:	a3 97       	sbiw	r28, 0x23	; 35
    8a18:	e2 54       	subi	r30, 0x42	; 66
    8a1a:	f1 09       	sbc	r31, r1
    8a1c:	e7 33       	cpi	r30, 0x37	; 55
    8a1e:	f1 05       	cpc	r31, r1
    8a20:	08 f0       	brcs	.+2      	; 0x8a24 <_printf_fn+0x598>
    8a22:	56 c1       	rjmp	.+684    	; 0x8cd0 <_printf_fn+0x844>
    8a24:	e3 58       	subi	r30, 0x83	; 131
    8a26:	ff 4f       	sbci	r31, 0xFF	; 255
    8a28:	0c 94 8c e6 	jmp	0x1cd18	; 0x1cd18 <__tablejump2__>
    8a2c:	e8 94       	clt
    8a2e:	94 f8       	bld	r9, 4
    8a30:	e8 94       	clt
    8a32:	92 f8       	bld	r9, 2
    8a34:	a9 2c       	mov	r10, r9
    8a36:	b1 2c       	mov	r11, r1
    8a38:	a1 96       	adiw	r28, 0x21	; 33
    8a3a:	ce ac       	ldd	r12, Y+62	; 0x3e
    8a3c:	df ac       	ldd	r13, Y+63	; 0x3f
    8a3e:	a1 97       	sbiw	r28, 0x21	; 33
    8a40:	6f 96       	adiw	r28, 0x1f	; 31
    8a42:	ee ac       	ldd	r14, Y+62	; 0x3e
    8a44:	ff ac       	ldd	r15, Y+63	; 0x3f
    8a46:	6f 97       	sbiw	r28, 0x1f	; 31
    8a48:	0a e0       	ldi	r16, 0x0A	; 10
    8a4a:	10 e0       	ldi	r17, 0x00	; 0
    8a4c:	19 c0       	rjmp	.+50     	; 0x8a80 <_printf_fn+0x5f4>
    8a4e:	a9 2c       	mov	r10, r9
    8a50:	b1 2c       	mov	r11, r1
    8a52:	a1 96       	adiw	r28, 0x21	; 33
    8a54:	ce ac       	ldd	r12, Y+62	; 0x3e
    8a56:	df ac       	ldd	r13, Y+63	; 0x3f
    8a58:	a1 97       	sbiw	r28, 0x21	; 33
    8a5a:	6f 96       	adiw	r28, 0x1f	; 31
    8a5c:	ee ac       	ldd	r14, Y+62	; 0x3e
    8a5e:	ff ac       	ldd	r15, Y+63	; 0x3f
    8a60:	6f 97       	sbiw	r28, 0x1f	; 31
    8a62:	02 e0       	ldi	r16, 0x02	; 2
    8a64:	10 e0       	ldi	r17, 0x00	; 0
    8a66:	0c c0       	rjmp	.+24     	; 0x8a80 <_printf_fn+0x5f4>
    8a68:	a9 2c       	mov	r10, r9
    8a6a:	b1 2c       	mov	r11, r1
    8a6c:	a1 96       	adiw	r28, 0x21	; 33
    8a6e:	ce ac       	ldd	r12, Y+62	; 0x3e
    8a70:	df ac       	ldd	r13, Y+63	; 0x3f
    8a72:	a1 97       	sbiw	r28, 0x21	; 33
    8a74:	6f 96       	adiw	r28, 0x1f	; 31
    8a76:	ee ac       	ldd	r14, Y+62	; 0x3e
    8a78:	ff ac       	ldd	r15, Y+63	; 0x3f
    8a7a:	6f 97       	sbiw	r28, 0x1f	; 31
    8a7c:	08 e0       	ldi	r16, 0x08	; 8
    8a7e:	10 e0       	ldi	r17, 0x00	; 0
    8a80:	22 e4       	ldi	r18, 0x42	; 66
    8a82:	30 e0       	ldi	r19, 0x00	; 0
    8a84:	ae 01       	movw	r20, r28
    8a86:	4f 5f       	subi	r20, 0xFF	; 255
    8a88:	5f 4f       	sbci	r21, 0xFF	; 255
    8a8a:	b2 01       	movw	r22, r4
    8a8c:	7d d9       	rcall	.-3334   	; 0x7d88 <p_ntoa>
    8a8e:	34 c0       	rjmp	.+104    	; 0x8af8 <_printf_fn+0x66c>
    8a90:	a9 2c       	mov	r10, r9
    8a92:	b1 2c       	mov	r11, r1
    8a94:	a1 96       	adiw	r28, 0x21	; 33
    8a96:	ce ac       	ldd	r12, Y+62	; 0x3e
    8a98:	df ac       	ldd	r13, Y+63	; 0x3f
    8a9a:	a1 97       	sbiw	r28, 0x21	; 33
    8a9c:	6f 96       	adiw	r28, 0x1f	; 31
    8a9e:	ee ac       	ldd	r14, Y+62	; 0x3e
    8aa0:	ff ac       	ldd	r15, Y+63	; 0x3f
    8aa2:	6f 97       	sbiw	r28, 0x1f	; 31
    8aa4:	00 e1       	ldi	r16, 0x10	; 16
    8aa6:	10 e0       	ldi	r17, 0x00	; 0
    8aa8:	22 e4       	ldi	r18, 0x42	; 66
    8aaa:	30 e0       	ldi	r19, 0x00	; 0
    8aac:	ae 01       	movw	r20, r28
    8aae:	4f 5f       	subi	r20, 0xFF	; 255
    8ab0:	5f 4f       	sbci	r21, 0xFF	; 255
    8ab2:	b2 01       	movw	r22, r4
    8ab4:	69 d9       	rcall	.-3374   	; 0x7d88 <p_ntoa>
    8ab6:	6c 01       	movw	r12, r24
    8ab8:	a3 96       	adiw	r28, 0x23	; 35
    8aba:	6e ad       	ldd	r22, Y+62	; 0x3e
    8abc:	7f ad       	ldd	r23, Y+63	; 0x3f
    8abe:	a3 97       	sbiw	r28, 0x23	; 35
    8ac0:	67 7f       	andi	r22, 0xF7	; 247
    8ac2:	60 35       	cpi	r22, 0x50	; 80
    8ac4:	71 05       	cpc	r23, r1
    8ac6:	09 f0       	breq	.+2      	; 0x8aca <_printf_fn+0x63e>
    8ac8:	3f c0       	rjmp	.+126    	; 0x8b48 <_printf_fn+0x6bc>
    8aca:	3a c0       	rjmp	.+116    	; 0x8b40 <_printf_fn+0x6b4>
    8acc:	c9 2c       	mov	r12, r9
    8ace:	d1 2c       	mov	r13, r1
    8ad0:	a1 96       	adiw	r28, 0x21	; 33
    8ad2:	ee ac       	ldd	r14, Y+62	; 0x3e
    8ad4:	ff ac       	ldd	r15, Y+63	; 0x3f
    8ad6:	a1 97       	sbiw	r28, 0x21	; 33
    8ad8:	6f 96       	adiw	r28, 0x1f	; 31
    8ada:	0e ad       	ldd	r16, Y+62	; 0x3e
    8adc:	1f ad       	ldd	r17, Y+63	; 0x3f
    8ade:	6f 97       	sbiw	r28, 0x1f	; 31
    8ae0:	22 e4       	ldi	r18, 0x42	; 66
    8ae2:	30 e0       	ldi	r19, 0x00	; 0
    8ae4:	ae 01       	movw	r20, r28
    8ae6:	4f 5f       	subi	r20, 0xFF	; 255
    8ae8:	5f 4f       	sbci	r21, 0xFF	; 255
    8aea:	a9 96       	adiw	r28, 0x29	; 41
    8aec:	6c ad       	ldd	r22, Y+60	; 0x3c
    8aee:	7d ad       	ldd	r23, Y+61	; 0x3d
    8af0:	8e ad       	ldd	r24, Y+62	; 0x3e
    8af2:	9f ad       	ldd	r25, Y+63	; 0x3f
    8af4:	a9 97       	sbiw	r28, 0x29	; 41
    8af6:	9d d9       	rcall	.-3270   	; 0x7e32 <p_ftoa>
    8af8:	93 fa       	bst	r9, 3
    8afa:	00 27       	eor	r16, r16
    8afc:	00 f9       	bld	r16, 0
    8afe:	10 e0       	ldi	r17, 0x00	; 0
    8b00:	9c 01       	movw	r18, r24
    8b02:	27 c0       	rjmp	.+78     	; 0x8b52 <_printf_fn+0x6c6>
    8b04:	c9 2c       	mov	r12, r9
    8b06:	d1 2c       	mov	r13, r1
    8b08:	a1 96       	adiw	r28, 0x21	; 33
    8b0a:	ee ac       	ldd	r14, Y+62	; 0x3e
    8b0c:	ff ac       	ldd	r15, Y+63	; 0x3f
    8b0e:	a1 97       	sbiw	r28, 0x21	; 33
    8b10:	6f 96       	adiw	r28, 0x1f	; 31
    8b12:	0e ad       	ldd	r16, Y+62	; 0x3e
    8b14:	1f ad       	ldd	r17, Y+63	; 0x3f
    8b16:	6f 97       	sbiw	r28, 0x1f	; 31
    8b18:	22 e4       	ldi	r18, 0x42	; 66
    8b1a:	30 e0       	ldi	r19, 0x00	; 0
    8b1c:	ae 01       	movw	r20, r28
    8b1e:	4f 5f       	subi	r20, 0xFF	; 255
    8b20:	5f 4f       	sbci	r21, 0xFF	; 255
    8b22:	a9 96       	adiw	r28, 0x29	; 41
    8b24:	6c ad       	ldd	r22, Y+60	; 0x3c
    8b26:	7d ad       	ldd	r23, Y+61	; 0x3d
    8b28:	8e ad       	ldd	r24, Y+62	; 0x3e
    8b2a:	9f ad       	ldd	r25, Y+63	; 0x3f
    8b2c:	a9 97       	sbiw	r28, 0x29	; 41
    8b2e:	88 da       	rcall	.-2800   	; 0x8040 <p_etoa>
    8b30:	6c 01       	movw	r12, r24
    8b32:	a3 96       	adiw	r28, 0x23	; 35
    8b34:	4e ad       	ldd	r20, Y+62	; 0x3e
    8b36:	5f ad       	ldd	r21, Y+63	; 0x3f
    8b38:	a3 97       	sbiw	r28, 0x23	; 35
    8b3a:	45 34       	cpi	r20, 0x45	; 69
    8b3c:	51 05       	cpc	r21, r1
    8b3e:	21 f4       	brne	.+8      	; 0x8b48 <_printf_fn+0x6bc>
    8b40:	ce 01       	movw	r24, r28
    8b42:	01 96       	adiw	r24, 0x01	; 1
    8b44:	0e 94 79 31 	call	0x62f2	; 0x62f2 <strupper>
    8b48:	93 fa       	bst	r9, 3
    8b4a:	00 27       	eor	r16, r16
    8b4c:	00 f9       	bld	r16, 0
    8b4e:	10 e0       	ldi	r17, 0x00	; 0
    8b50:	96 01       	movw	r18, r12
    8b52:	6f 96       	adiw	r28, 0x1f	; 31
    8b54:	4e ad       	ldd	r20, Y+62	; 0x3e
    8b56:	5f ad       	ldd	r21, Y+63	; 0x3f
    8b58:	6f 97       	sbiw	r28, 0x1f	; 31
    8b5a:	be 01       	movw	r22, r28
    8b5c:	6f 5f       	subi	r22, 0xFF	; 255
    8b5e:	7f 4f       	sbci	r23, 0xFF	; 255
    8b60:	a5 96       	adiw	r28, 0x25	; 37
    8b62:	8e ad       	ldd	r24, Y+62	; 0x3e
    8b64:	9f ad       	ldd	r25, Y+63	; 0x3f
    8b66:	a5 97       	sbiw	r28, 0x25	; 37
    8b68:	d7 db       	rcall	.-2130   	; 0x8318 <_puts_pad>
    8b6a:	b6 c0       	rjmp	.+364    	; 0x8cd8 <_printf_fn+0x84c>
    8b6c:	a3 96       	adiw	r28, 0x23	; 35
    8b6e:	8e ad       	ldd	r24, Y+62	; 0x3e
    8b70:	9f ad       	ldd	r25, Y+63	; 0x3f
    8b72:	a3 97       	sbiw	r28, 0x23	; 35
    8b74:	83 37       	cpi	r24, 0x73	; 115
    8b76:	91 05       	cpc	r25, r1
    8b78:	69 f4       	brne	.+26     	; 0x8b94 <_printf_fn+0x708>
    8b7a:	61 01       	movw	r12, r2
    8b7c:	92 e0       	ldi	r25, 0x02	; 2
    8b7e:	c9 0e       	add	r12, r25
    8b80:	d1 1c       	adc	r13, r1
    8b82:	d1 01       	movw	r26, r2
    8b84:	6d 91       	ld	r22, X+
    8b86:	7c 91       	ld	r23, X
    8b88:	61 15       	cp	r22, r1
    8b8a:	71 05       	cpc	r23, r1
    8b8c:	91 f4       	brne	.+36     	; 0x8bb2 <_printf_fn+0x726>
    8b8e:	6a e1       	ldi	r22, 0x1A	; 26
    8b90:	74 e0       	ldi	r23, 0x04	; 4
    8b92:	0f c0       	rjmp	.+30     	; 0x8bb2 <_printf_fn+0x726>
    8b94:	61 01       	movw	r12, r2
    8b96:	b2 e0       	ldi	r27, 0x02	; 2
    8b98:	cb 0e       	add	r12, r27
    8b9a:	d1 1c       	adc	r13, r1
    8b9c:	f1 01       	movw	r30, r2
    8b9e:	80 81       	ld	r24, Z
    8ba0:	60 96       	adiw	r28, 0x10	; 16
    8ba2:	8f af       	std	Y+63, r24	; 0x3f
    8ba4:	60 97       	sbiw	r28, 0x10	; 16
    8ba6:	61 96       	adiw	r28, 0x11	; 17
    8ba8:	1f ae       	std	Y+63, r1	; 0x3f
    8baa:	61 97       	sbiw	r28, 0x11	; 17
    8bac:	be 01       	movw	r22, r28
    8bae:	61 5b       	subi	r22, 0xB1	; 177
    8bb0:	7f 4f       	sbci	r23, 0xFF	; 255
    8bb2:	fb 01       	movw	r30, r22
    8bb4:	01 90       	ld	r0, Z+
    8bb6:	00 20       	and	r0, r0
    8bb8:	e9 f7       	brne	.-6      	; 0x8bb4 <_printf_fn+0x728>
    8bba:	31 97       	sbiw	r30, 0x01	; 1
    8bbc:	e6 1b       	sub	r30, r22
    8bbe:	f7 0b       	sbc	r31, r23
    8bc0:	a1 96       	adiw	r28, 0x21	; 33
    8bc2:	2e ad       	ldd	r18, Y+62	; 0x3e
    8bc4:	3f ad       	ldd	r19, Y+63	; 0x3f
    8bc6:	a1 97       	sbiw	r28, 0x21	; 33
    8bc8:	23 2b       	or	r18, r19
    8bca:	21 f4       	brne	.+8      	; 0x8bd4 <_printf_fn+0x748>
    8bcc:	a1 96       	adiw	r28, 0x21	; 33
    8bce:	ff af       	std	Y+63, r31	; 0x3f
    8bd0:	ee af       	std	Y+62, r30	; 0x3e
    8bd2:	a1 97       	sbiw	r28, 0x21	; 33
    8bd4:	6f 96       	adiw	r28, 0x1f	; 31
    8bd6:	4e ad       	ldd	r20, Y+62	; 0x3e
    8bd8:	5f ad       	ldd	r21, Y+63	; 0x3f
    8bda:	6f 97       	sbiw	r28, 0x1f	; 31
    8bdc:	a1 96       	adiw	r28, 0x21	; 33
    8bde:	8e ad       	ldd	r24, Y+62	; 0x3e
    8be0:	9f ad       	ldd	r25, Y+63	; 0x3f
    8be2:	a1 97       	sbiw	r28, 0x21	; 33
    8be4:	48 17       	cp	r20, r24
    8be6:	59 07       	cpc	r21, r25
    8be8:	3c f4       	brge	.+14     	; 0x8bf8 <_printf_fn+0x76c>
    8bea:	41 15       	cp	r20, r1
    8bec:	51 05       	cpc	r21, r1
    8bee:	21 f0       	breq	.+8      	; 0x8bf8 <_printf_fn+0x76c>
    8bf0:	a1 96       	adiw	r28, 0x21	; 33
    8bf2:	5f af       	std	Y+63, r21	; 0x3f
    8bf4:	4e af       	std	Y+62, r20	; 0x3e
    8bf6:	a1 97       	sbiw	r28, 0x21	; 33
    8bf8:	93 fa       	bst	r9, 3
    8bfa:	00 27       	eor	r16, r16
    8bfc:	00 f9       	bld	r16, 0
    8bfe:	10 e0       	ldi	r17, 0x00	; 0
    8c00:	a1 96       	adiw	r28, 0x21	; 33
    8c02:	2e ad       	ldd	r18, Y+62	; 0x3e
    8c04:	3f ad       	ldd	r19, Y+63	; 0x3f
    8c06:	a1 97       	sbiw	r28, 0x21	; 33
    8c08:	6f 96       	adiw	r28, 0x1f	; 31
    8c0a:	4e ad       	ldd	r20, Y+62	; 0x3e
    8c0c:	5f ad       	ldd	r21, Y+63	; 0x3f
    8c0e:	6f 97       	sbiw	r28, 0x1f	; 31
    8c10:	a5 96       	adiw	r28, 0x25	; 37
    8c12:	8e ad       	ldd	r24, Y+62	; 0x3e
    8c14:	9f ad       	ldd	r25, Y+63	; 0x3f
    8c16:	a5 97       	sbiw	r28, 0x25	; 37
    8c18:	7f db       	rcall	.-2306   	; 0x8318 <_puts_pad>
    8c1a:	45 c0       	rjmp	.+138    	; 0x8ca6 <_printf_fn+0x81a>
    8c1c:	61 01       	movw	r12, r2
    8c1e:	92 e0       	ldi	r25, 0x02	; 2
    8c20:	c9 0e       	add	r12, r25
    8c22:	d1 1c       	adc	r13, r1
    8c24:	d1 01       	movw	r26, r2
    8c26:	2d 90       	ld	r2, X+
    8c28:	3c 90       	ld	r3, X
    8c2a:	41 2c       	mov	r4, r1
    8c2c:	21 14       	cp	r2, r1
    8c2e:	31 04       	cpc	r3, r1
    8c30:	41 04       	cpc	r4, r1
    8c32:	29 f4       	brne	.+10     	; 0x8c3e <_printf_fn+0x7b2>
    8c34:	ae 96       	adiw	r28, 0x2e	; 46
    8c36:	2d ac       	ldd	r2, Y+61	; 0x3d
    8c38:	3e ac       	ldd	r3, Y+62	; 0x3e
    8c3a:	4f ac       	ldd	r4, Y+63	; 0x3f
    8c3c:	ae 97       	sbiw	r28, 0x2e	; 46
    8c3e:	84 2d       	mov	r24, r4
    8c40:	b1 01       	movw	r22, r2
    8c42:	08 dc       	rcall	.-2032   	; 0x8454 <strlen_X>
    8c44:	a1 96       	adiw	r28, 0x21	; 33
    8c46:	ee ad       	ldd	r30, Y+62	; 0x3e
    8c48:	ff ad       	ldd	r31, Y+63	; 0x3f
    8c4a:	a1 97       	sbiw	r28, 0x21	; 33
    8c4c:	ef 2b       	or	r30, r31
    8c4e:	31 f4       	brne	.+12     	; 0x8c5c <_printf_fn+0x7d0>
    8c50:	a0 96       	adiw	r28, 0x20	; 32
    8c52:	8f af       	std	Y+63, r24	; 0x3f
    8c54:	a0 97       	sbiw	r28, 0x20	; 32
    8c56:	a1 96       	adiw	r28, 0x21	; 33
    8c58:	9f af       	std	Y+63, r25	; 0x3f
    8c5a:	a1 97       	sbiw	r28, 0x21	; 33
    8c5c:	6f 96       	adiw	r28, 0x1f	; 31
    8c5e:	2e ad       	ldd	r18, Y+62	; 0x3e
    8c60:	3f ad       	ldd	r19, Y+63	; 0x3f
    8c62:	6f 97       	sbiw	r28, 0x1f	; 31
    8c64:	a1 96       	adiw	r28, 0x21	; 33
    8c66:	4e ad       	ldd	r20, Y+62	; 0x3e
    8c68:	5f ad       	ldd	r21, Y+63	; 0x3f
    8c6a:	a1 97       	sbiw	r28, 0x21	; 33
    8c6c:	24 17       	cp	r18, r20
    8c6e:	35 07       	cpc	r19, r21
    8c70:	3c f4       	brge	.+14     	; 0x8c80 <_printf_fn+0x7f4>
    8c72:	21 15       	cp	r18, r1
    8c74:	31 05       	cpc	r19, r1
    8c76:	21 f0       	breq	.+8      	; 0x8c80 <_printf_fn+0x7f4>
    8c78:	a1 96       	adiw	r28, 0x21	; 33
    8c7a:	3f af       	std	Y+63, r19	; 0x3f
    8c7c:	2e af       	std	Y+62, r18	; 0x3e
    8c7e:	a1 97       	sbiw	r28, 0x21	; 33
    8c80:	93 fa       	bst	r9, 3
    8c82:	ee 24       	eor	r14, r14
    8c84:	e0 f8       	bld	r14, 0
    8c86:	f1 2c       	mov	r15, r1
    8c88:	a1 96       	adiw	r28, 0x21	; 33
    8c8a:	0e ad       	ldd	r16, Y+62	; 0x3e
    8c8c:	1f ad       	ldd	r17, Y+63	; 0x3f
    8c8e:	a1 97       	sbiw	r28, 0x21	; 33
    8c90:	6f 96       	adiw	r28, 0x1f	; 31
    8c92:	2e ad       	ldd	r18, Y+62	; 0x3e
    8c94:	3f ad       	ldd	r19, Y+63	; 0x3f
    8c96:	6f 97       	sbiw	r28, 0x1f	; 31
    8c98:	64 2d       	mov	r22, r4
    8c9a:	a1 01       	movw	r20, r2
    8c9c:	a5 96       	adiw	r28, 0x25	; 37
    8c9e:	8e ad       	ldd	r24, Y+62	; 0x3e
    8ca0:	9f ad       	ldd	r25, Y+63	; 0x3f
    8ca2:	a5 97       	sbiw	r28, 0x25	; 37
    8ca4:	7b db       	rcall	.-2314   	; 0x839c <_puts_pad_X>
    8ca6:	16 01       	movw	r2, r12
    8ca8:	17 c0       	rjmp	.+46     	; 0x8cd8 <_printf_fn+0x84c>
    8caa:	f6 01       	movw	r30, r12
    8cac:	5e 2d       	mov	r21, r14
    8cae:	0e 94 f2 e6 	call	0x1cde4	; 0x1cde4 <__xload_1>
    8cb2:	66 23       	and	r22, r22
    8cb4:	89 f0       	breq	.+34     	; 0x8cd8 <_printf_fn+0x84c>
    8cb6:	5f ef       	ldi	r21, 0xFF	; 255
    8cb8:	c5 1a       	sub	r12, r21
    8cba:	d5 0a       	sbc	r13, r21
    8cbc:	e5 0a       	sbc	r14, r21
    8cbe:	a5 96       	adiw	r28, 0x25	; 37
    8cc0:	ae ad       	ldd	r26, Y+62	; 0x3e
    8cc2:	bf ad       	ldd	r27, Y+63	; 0x3f
    8cc4:	a5 97       	sbiw	r28, 0x25	; 37
    8cc6:	ed 91       	ld	r30, X+
    8cc8:	fc 91       	ld	r31, X
    8cca:	11 97       	sbiw	r26, 0x01	; 1
    8ccc:	cd 01       	movw	r24, r26
    8cce:	09 95       	icall
    8cd0:	6c 14       	cp	r6, r12
    8cd2:	7d 04       	cpc	r7, r13
    8cd4:	8e 04       	cpc	r8, r14
    8cd6:	48 f7       	brcc	.-46     	; 0x8caa <_printf_fn+0x81e>
    8cd8:	e8 2c       	mov	r14, r8
    8cda:	63 01       	movw	r12, r6
    8cdc:	0f cc       	rjmp	.-2018   	; 0x84fc <_printf_fn+0x70>
    8cde:	82 e0       	ldi	r24, 0x02	; 2
    8ce0:	48 2e       	mov	r4, r24
    8ce2:	51 2c       	mov	r5, r1
    8ce4:	0d cd       	rjmp	.-1510   	; 0x8700 <_printf_fn+0x274>
    8ce6:	f2 e0       	ldi	r31, 0x02	; 2
    8ce8:	4f 16       	cp	r4, r31
    8cea:	51 04       	cpc	r5, r1
    8cec:	61 f4       	brne	.+24     	; 0x8d06 <_printf_fn+0x87a>
    8cee:	51 01       	movw	r10, r2
    8cf0:	b2 e0       	ldi	r27, 0x02	; 2
    8cf2:	ab 0e       	add	r10, r27
    8cf4:	b1 1c       	adc	r11, r1
    8cf6:	f1 01       	movw	r30, r2
    8cf8:	80 81       	ld	r24, Z
    8cfa:	91 81       	ldd	r25, Z+1	; 0x01
    8cfc:	65 96       	adiw	r28, 0x15	; 21
    8cfe:	9f af       	std	Y+63, r25	; 0x3f
    8d00:	8e af       	std	Y+62, r24	; 0x3e
    8d02:	65 97       	sbiw	r28, 0x15	; 21
    8d04:	7e cd       	rjmp	.-1284   	; 0x8802 <_printf_fn+0x376>
    8d06:	f4 e0       	ldi	r31, 0x04	; 4
    8d08:	4f 16       	cp	r4, r31
    8d0a:	51 04       	cpc	r5, r1
    8d0c:	09 f0       	breq	.+2      	; 0x8d10 <_printf_fn+0x884>
    8d0e:	b2 cd       	rjmp	.-1180   	; 0x8874 <_printf_fn+0x3e8>
    8d10:	51 01       	movw	r10, r2
    8d12:	24 e0       	ldi	r18, 0x04	; 4
    8d14:	a2 0e       	add	r10, r18
    8d16:	b1 1c       	adc	r11, r1
    8d18:	f1 01       	movw	r30, r2
    8d1a:	80 81       	ld	r24, Z
    8d1c:	91 81       	ldd	r25, Z+1	; 0x01
    8d1e:	a2 81       	ldd	r26, Z+2	; 0x02
    8d20:	b3 81       	ldd	r27, Z+3	; 0x03
    8d22:	2f 96       	adiw	r28, 0x0f	; 15
    8d24:	8c af       	std	Y+60, r24	; 0x3c
    8d26:	9d af       	std	Y+61, r25	; 0x3d
    8d28:	ae af       	std	Y+62, r26	; 0x3e
    8d2a:	bf af       	std	Y+63, r27	; 0x3f
    8d2c:	2f 97       	sbiw	r28, 0x0f	; 15
    8d2e:	90 cd       	rjmp	.-1248   	; 0x8850 <_printf_fn+0x3c4>
    8d30:	c2 59       	subi	r28, 0x92	; 146
    8d32:	df 4f       	sbci	r29, 0xFF	; 255
    8d34:	e2 e1       	ldi	r30, 0x12	; 18
    8d36:	0c 94 d7 e6 	jmp	0x1cdae	; 0x1cdae <__epilogue_restores__>

00008d3a <vsnprintf_P>:
    8d3a:	a8 e0       	ldi	r26, 0x08	; 8
    8d3c:	b0 e0       	ldi	r27, 0x00	; 0
    8d3e:	e3 ea       	ldi	r30, 0xA3	; 163
    8d40:	f6 e4       	ldi	r31, 0x46	; 70
    8d42:	0c 94 c7 e6 	jmp	0x1cd8e	; 0x1cd8e <__prologue_saves__+0x18>
    8d46:	7c 01       	movw	r14, r24
    8d48:	cb 01       	movw	r24, r22
    8d4a:	64 2f       	mov	r22, r20
    8d4c:	a9 01       	movw	r20, r18
    8d4e:	98 01       	movw	r18, r16
    8d50:	f7 01       	movw	r30, r14
    8d52:	10 82       	st	Z, r1
    8d54:	eb ef       	ldi	r30, 0xFB	; 251
    8d56:	fd e3       	ldi	r31, 0x3D	; 61
    8d58:	fa 83       	std	Y+2, r31	; 0x02
    8d5a:	e9 83       	std	Y+1, r30	; 0x01
    8d5c:	9e 83       	std	Y+6, r25	; 0x06
    8d5e:	8d 83       	std	Y+5, r24	; 0x05
    8d60:	18 86       	std	Y+8, r1	; 0x08
    8d62:	1f 82       	std	Y+7, r1	; 0x07
    8d64:	fc 82       	std	Y+4, r15	; 0x04
    8d66:	eb 82       	std	Y+3, r14	; 0x03
    8d68:	ce 01       	movw	r24, r28
    8d6a:	01 96       	adiw	r24, 0x01	; 1
    8d6c:	8f db       	rcall	.-2274   	; 0x848c <_printf_fn>
    8d6e:	f7 01       	movw	r30, r14
    8d70:	01 90       	ld	r0, Z+
    8d72:	00 20       	and	r0, r0
    8d74:	e9 f7       	brne	.-6      	; 0x8d70 <vsnprintf_P+0x36>
    8d76:	cf 01       	movw	r24, r30
    8d78:	01 97       	sbiw	r24, 0x01	; 1
    8d7a:	8e 19       	sub	r24, r14
    8d7c:	9f 09       	sbc	r25, r15
    8d7e:	28 96       	adiw	r28, 0x08	; 8
    8d80:	e6 e0       	ldi	r30, 0x06	; 6
    8d82:	0c 94 e3 e6 	jmp	0x1cdc6	; 0x1cdc6 <__epilogue_restores__+0x18>

00008d86 <snprintf_P>:
    8d86:	a0 e0       	ldi	r26, 0x00	; 0
    8d88:	b0 e0       	ldi	r27, 0x00	; 0
    8d8a:	e9 ec       	ldi	r30, 0xC9	; 201
    8d8c:	f6 e4       	ldi	r31, 0x46	; 70
    8d8e:	0c 94 c9 e6 	jmp	0x1cd92	; 0x1cd92 <__prologue_saves__+0x1c>
    8d92:	8e 01       	movw	r16, r28
    8d94:	02 5f       	subi	r16, 0xF2	; 242
    8d96:	1f 4f       	sbci	r17, 0xFF	; 255
    8d98:	2b 85       	ldd	r18, Y+11	; 0x0b
    8d9a:	3c 85       	ldd	r19, Y+12	; 0x0c
    8d9c:	4d 85       	ldd	r20, Y+13	; 0x0d
    8d9e:	69 85       	ldd	r22, Y+9	; 0x09
    8da0:	7a 85       	ldd	r23, Y+10	; 0x0a
    8da2:	8f 81       	ldd	r24, Y+7	; 0x07
    8da4:	98 85       	ldd	r25, Y+8	; 0x08
    8da6:	c9 df       	rcall	.-110    	; 0x8d3a <vsnprintf_P>
    8da8:	e4 e0       	ldi	r30, 0x04	; 4
    8daa:	0c 94 e5 e6 	jmp	0x1cdca	; 0x1cdca <__epilogue_restores__+0x1c>

00008dae <sprintf_P>:
    8dae:	a0 e0       	ldi	r26, 0x00	; 0
    8db0:	b0 e0       	ldi	r27, 0x00	; 0
    8db2:	ed ed       	ldi	r30, 0xDD	; 221
    8db4:	f6 e4       	ldi	r31, 0x46	; 70
    8db6:	0c 94 c9 e6 	jmp	0x1cd92	; 0x1cd92 <__prologue_saves__+0x1c>
    8dba:	8e 01       	movw	r16, r28
    8dbc:	04 5f       	subi	r16, 0xF4	; 244
    8dbe:	1f 4f       	sbci	r17, 0xFF	; 255
    8dc0:	29 85       	ldd	r18, Y+9	; 0x09
    8dc2:	3a 85       	ldd	r19, Y+10	; 0x0a
    8dc4:	4b 85       	ldd	r20, Y+11	; 0x0b
    8dc6:	60 e0       	ldi	r22, 0x00	; 0
    8dc8:	74 e0       	ldi	r23, 0x04	; 4
    8dca:	8f 81       	ldd	r24, Y+7	; 0x07
    8dcc:	98 85       	ldd	r25, Y+8	; 0x08
    8dce:	b5 df       	rcall	.-150    	; 0x8d3a <vsnprintf_P>
    8dd0:	e4 e0       	ldi	r30, 0x04	; 4
    8dd2:	0c 94 e5 e6 	jmp	0x1cdca	; 0x1cdca <__epilogue_restores__+0x1c>

00008dd6 <printf_P>:
/// @return size of printed string
/// TODO create a devprintf using an array of function prointers ?
MEMSPACE
int
printf_P(__memx const char *format, ...)
{
    8dd6:	a8 e0       	ldi	r26, 0x08	; 8
    8dd8:	b0 e0       	ldi	r27, 0x00	; 0
    8dda:	e1 ef       	ldi	r30, 0xF1	; 241
    8ddc:	f6 e4       	ldi	r31, 0x46	; 70
    8dde:	0c 94 cb e6 	jmp	0x1cd96	; 0x1cd96 <__prologue_saves__+0x20>
    8de2:	9e 01       	movw	r18, r28
    8de4:	23 5f       	subi	r18, 0xF3	; 243
    8de6:	3f 4f       	sbci	r19, 0xFF	; 255
    8de8:	f9 01       	movw	r30, r18
    8dea:	41 91       	ld	r20, Z+
    8dec:	51 91       	ld	r21, Z+
    8dee:	61 91       	ld	r22, Z+
    8df0:	9f 01       	movw	r18, r30
    printf_t fn;
    va_list va;

    fn.put = _putc_fn;
    8df2:	84 e1       	ldi	r24, 0x14	; 20
    8df4:	9e e3       	ldi	r25, 0x3E	; 62
    8df6:	9a 83       	std	Y+2, r25	; 0x02
    8df8:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    8dfa:	18 86       	std	Y+8, r1	; 0x08
    8dfc:	1f 82       	std	Y+7, r1	; 0x07

    va_start(va, format);
    _printf_fn(&fn, format, va);
    8dfe:	ce 01       	movw	r24, r28
    8e00:	01 96       	adiw	r24, 0x01	; 1
    8e02:	44 db       	rcall	.-2424   	; 0x848c <_printf_fn>
    va_end(va);

    return ((int)fn.sent);
}
    8e04:	8f 81       	ldd	r24, Y+7	; 0x07
    8e06:	98 85       	ldd	r25, Y+8	; 0x08
    8e08:	28 96       	adiw	r28, 0x08	; 8
    8e0a:	e2 e0       	ldi	r30, 0x02	; 2
    8e0c:	0c 94 e7 e6 	jmp	0x1cdce	; 0x1cdce <__epilogue_restores__+0x20>

00008e10 <atodigit>:
    if(sign)
        num = -num;
    if(endptr)
        *endptr = (char *) nptr;
    return(num);
}
    8e10:	9c 01       	movw	r18, r24
    8e12:	20 53       	subi	r18, 0x30	; 48
    8e14:	31 09       	sbc	r19, r1
    8e16:	2a 30       	cpi	r18, 0x0A	; 10
    8e18:	31 05       	cpc	r19, r1
    8e1a:	10 f4       	brcc	.+4      	; 0x8e20 <atodigit+0x10>
    8e1c:	c9 01       	movw	r24, r18
    8e1e:	10 c0       	rjmp	.+32     	; 0x8e40 <atodigit+0x30>
    8e20:	9c 01       	movw	r18, r24
    8e22:	21 54       	subi	r18, 0x41	; 65
    8e24:	31 09       	sbc	r19, r1
    8e26:	26 30       	cpi	r18, 0x06	; 6
    8e28:	31 05       	cpc	r19, r1
    8e2a:	10 f4       	brcc	.+4      	; 0x8e30 <atodigit+0x20>
    8e2c:	c7 97       	sbiw	r24, 0x37	; 55
    8e2e:	08 c0       	rjmp	.+16     	; 0x8e40 <atodigit+0x30>
    8e30:	9c 01       	movw	r18, r24
    8e32:	21 56       	subi	r18, 0x61	; 97
    8e34:	31 09       	sbc	r19, r1
    8e36:	26 30       	cpi	r18, 0x06	; 6
    8e38:	31 05       	cpc	r19, r1
    8e3a:	28 f4       	brcc	.+10     	; 0x8e46 <atodigit+0x36>
    8e3c:	87 55       	subi	r24, 0x57	; 87
    8e3e:	91 09       	sbc	r25, r1
    8e40:	86 17       	cp	r24, r22
    8e42:	97 07       	cpc	r25, r23
    8e44:	14 f0       	brlt	.+4      	; 0x8e4a <atodigit+0x3a>
    8e46:	8f ef       	ldi	r24, 0xFF	; 255
    8e48:	9f ef       	ldi	r25, 0xFF	; 255
    8e4a:	08 95       	ret

00008e4c <strtol>:
    8e4c:	a0 e0       	ldi	r26, 0x00	; 0
    8e4e:	b0 e0       	ldi	r27, 0x00	; 0
    8e50:	ec e2       	ldi	r30, 0x2C	; 44
    8e52:	f7 e4       	ldi	r31, 0x47	; 71
    8e54:	0c 94 bb e6 	jmp	0x1cd76	; 0x1cd76 <__prologue_saves__>
    8e58:	2b 01       	movw	r4, r22
    8e5a:	8a 01       	movw	r16, r20
    8e5c:	ec 01       	movw	r28, r24
    8e5e:	28 81       	ld	r18, Y
    8e60:	01 96       	adiw	r24, 0x01	; 1
    8e62:	20 32       	cpi	r18, 0x20	; 32
    8e64:	d9 f3       	breq	.-10     	; 0x8e5c <strtol+0x10>
    8e66:	29 30       	cpi	r18, 0x09	; 9
    8e68:	c9 f3       	breq	.-14     	; 0x8e5c <strtol+0x10>
    8e6a:	2d 32       	cpi	r18, 0x2D	; 45
    8e6c:	29 f4       	brne	.+10     	; 0x8e78 <strtol+0x2c>
    8e6e:	ec 01       	movw	r28, r24
    8e70:	66 24       	eor	r6, r6
    8e72:	63 94       	inc	r6
    8e74:	71 2c       	mov	r7, r1
    8e76:	05 c0       	rjmp	.+10     	; 0x8e82 <strtol+0x36>
    8e78:	2b 32       	cpi	r18, 0x2B	; 43
    8e7a:	09 f4       	brne	.+2      	; 0x8e7e <strtol+0x32>
    8e7c:	ec 01       	movw	r28, r24
    8e7e:	61 2c       	mov	r6, r1
    8e80:	71 2c       	mov	r7, r1
    8e82:	9e 01       	movw	r18, r28
    8e84:	2f 5f       	subi	r18, 0xFF	; 255
    8e86:	3f 4f       	sbci	r19, 0xFF	; 255
    8e88:	88 81       	ld	r24, Y
    8e8a:	80 33       	cpi	r24, 0x30	; 48
    8e8c:	11 f4       	brne	.+4      	; 0x8e92 <strtol+0x46>
    8e8e:	e9 01       	movw	r28, r18
    8e90:	f8 cf       	rjmp	.-16     	; 0x8e82 <strtol+0x36>
    8e92:	c1 2c       	mov	r12, r1
    8e94:	d1 2c       	mov	r13, r1
    8e96:	76 01       	movw	r14, r12
    8e98:	48 01       	movw	r8, r16
    8e9a:	01 2e       	mov	r0, r17
    8e9c:	00 0c       	add	r0, r0
    8e9e:	aa 08       	sbc	r10, r10
    8ea0:	bb 08       	sbc	r11, r11
    8ea2:	3c 2e       	mov	r3, r28
    8ea4:	2d 2e       	mov	r2, r29
    8ea6:	89 91       	ld	r24, Y+
    8ea8:	88 23       	and	r24, r24
    8eaa:	31 f0       	breq	.+12     	; 0x8eb8 <strtol+0x6c>
    8eac:	b8 01       	movw	r22, r16
    8eae:	90 e0       	ldi	r25, 0x00	; 0
    8eb0:	af df       	rcall	.-162    	; 0x8e10 <atodigit>
    8eb2:	fc 01       	movw	r30, r24
    8eb4:	97 ff       	sbrs	r25, 7
    8eb6:	0c c0       	rjmp	.+24     	; 0x8ed0 <strtol+0x84>
    8eb8:	61 14       	cp	r6, r1
    8eba:	71 04       	cpc	r7, r1
    8ebc:	c1 f0       	breq	.+48     	; 0x8eee <strtol+0xa2>
    8ebe:	f0 94       	com	r15
    8ec0:	e0 94       	com	r14
    8ec2:	d0 94       	com	r13
    8ec4:	c0 94       	com	r12
    8ec6:	c1 1c       	adc	r12, r1
    8ec8:	d1 1c       	adc	r13, r1
    8eca:	e1 1c       	adc	r14, r1
    8ecc:	f1 1c       	adc	r15, r1
    8ece:	0f c0       	rjmp	.+30     	; 0x8eee <strtol+0xa2>
    8ed0:	a5 01       	movw	r20, r10
    8ed2:	94 01       	movw	r18, r8
    8ed4:	c7 01       	movw	r24, r14
    8ed6:	b6 01       	movw	r22, r12
    8ed8:	0e 94 0c e6 	call	0x1cc18	; 0x1cc18 <__mulsi3>
    8edc:	6f 01       	movw	r12, r30
    8ede:	ff 0f       	add	r31, r31
    8ee0:	ee 08       	sbc	r14, r14
    8ee2:	ff 08       	sbc	r15, r15
    8ee4:	c6 0e       	add	r12, r22
    8ee6:	d7 1e       	adc	r13, r23
    8ee8:	e8 1e       	adc	r14, r24
    8eea:	f9 1e       	adc	r15, r25
    8eec:	da cf       	rjmp	.-76     	; 0x8ea2 <strtol+0x56>
    8eee:	41 14       	cp	r4, r1
    8ef0:	51 04       	cpc	r5, r1
    8ef2:	19 f0       	breq	.+6      	; 0x8efa <strtol+0xae>
    8ef4:	f2 01       	movw	r30, r4
    8ef6:	30 82       	st	Z, r3
    8ef8:	21 82       	std	Z+1, r2	; 0x01
    8efa:	c7 01       	movw	r24, r14
    8efc:	b6 01       	movw	r22, r12
    8efe:	cd b7       	in	r28, 0x3d	; 61
    8f00:	de b7       	in	r29, 0x3e	; 62
    8f02:	e2 e1       	ldi	r30, 0x12	; 18
    8f04:	0c 94 d7 e6 	jmp	0x1cdae	; 0x1cdae <__epilogue_restores__>

00008f08 <atoi>:
MEMSPACE
int
atoi(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    8f08:	4a e0       	ldi	r20, 0x0A	; 10
    8f0a:	50 e0       	ldi	r21, 0x00	; 0
    8f0c:	60 e0       	ldi	r22, 0x00	; 0
    8f0e:	70 e0       	ldi	r23, 0x00	; 0
    8f10:	9d df       	rcall	.-198    	; 0x8e4c <strtol>
    return((int)num);
}
    8f12:	cb 01       	movw	r24, r22
    8f14:	08 95       	ret

00008f16 <atol>:
MEMSPACE
long
atol(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    8f16:	4a e0       	ldi	r20, 0x0A	; 10
    8f18:	50 e0       	ldi	r21, 0x00	; 0
    8f1a:	60 e0       	ldi	r22, 0x00	; 0
    8f1c:	70 e0       	ldi	r23, 0x00	; 0
    8f1e:	96 cf       	rjmp	.-212    	; 0x8e4c <strtol>
    return(num);
}
    8f20:	08 95       	ret

00008f22 <ld_dword>:
#endif
		if (res != FR_OK) ABORT(fs, res);
	}

	LEAVE_FF(fs, res);
}
    8f22:	fc 01       	movw	r30, r24
    8f24:	62 81       	ldd	r22, Z+2	; 0x02
    8f26:	73 81       	ldd	r23, Z+3	; 0x03
    8f28:	cb 01       	movw	r24, r22
    8f2a:	a0 e0       	ldi	r26, 0x00	; 0
    8f2c:	b0 e0       	ldi	r27, 0x00	; 0
    8f2e:	ba 2f       	mov	r27, r26
    8f30:	a9 2f       	mov	r26, r25
    8f32:	98 2f       	mov	r25, r24
    8f34:	88 27       	eor	r24, r24
    8f36:	21 81       	ldd	r18, Z+1	; 0x01
    8f38:	82 2b       	or	r24, r18
    8f3a:	ba 2f       	mov	r27, r26
    8f3c:	a9 2f       	mov	r26, r25
    8f3e:	98 2f       	mov	r25, r24
    8f40:	88 27       	eor	r24, r24
    8f42:	20 81       	ld	r18, Z
    8f44:	bc 01       	movw	r22, r24
    8f46:	cd 01       	movw	r24, r26
    8f48:	62 2b       	or	r22, r18
    8f4a:	08 95       	ret

00008f4c <st_dword>:
    8f4c:	fc 01       	movw	r30, r24
    8f4e:	40 83       	st	Z, r20
    8f50:	51 83       	std	Z+1, r21	; 0x01
    8f52:	62 83       	std	Z+2, r22	; 0x02
    8f54:	73 83       	std	Z+3, r23	; 0x03
    8f56:	08 95       	ret

00008f58 <mem_set>:
    8f58:	48 0f       	add	r20, r24
    8f5a:	59 1f       	adc	r21, r25
    8f5c:	fc 01       	movw	r30, r24
    8f5e:	61 93       	st	Z+, r22
    8f60:	cf 01       	movw	r24, r30
    8f62:	e4 17       	cp	r30, r20
    8f64:	f5 07       	cpc	r31, r21
    8f66:	d1 f7       	brne	.-12     	; 0x8f5c <mem_set+0x4>
    8f68:	08 95       	ret

00008f6a <mem_cmp>:
    8f6a:	dc 01       	movw	r26, r24
    8f6c:	fb 01       	movw	r30, r22
    8f6e:	2d 91       	ld	r18, X+
    8f70:	81 91       	ld	r24, Z+
    8f72:	30 e0       	ldi	r19, 0x00	; 0
    8f74:	b9 01       	movw	r22, r18
    8f76:	68 1b       	sub	r22, r24
    8f78:	71 09       	sbc	r23, r1
    8f7a:	cb 01       	movw	r24, r22
    8f7c:	41 50       	subi	r20, 0x01	; 1
    8f7e:	51 09       	sbc	r21, r1
    8f80:	11 f0       	breq	.+4      	; 0x8f86 <mem_cmp+0x1c>
    8f82:	00 97       	sbiw	r24, 0x00	; 0
    8f84:	a1 f3       	breq	.-24     	; 0x8f6e <mem_cmp+0x4>
    8f86:	08 95       	ret

00008f88 <clst2sect>:
    8f88:	0f 93       	push	r16
    8f8a:	1f 93       	push	r17
    8f8c:	fc 01       	movw	r30, r24
    8f8e:	9a 01       	movw	r18, r20
    8f90:	ab 01       	movw	r20, r22
    8f92:	22 50       	subi	r18, 0x02	; 2
    8f94:	31 09       	sbc	r19, r1
    8f96:	41 09       	sbc	r20, r1
    8f98:	51 09       	sbc	r21, r1
    8f9a:	81 8d       	ldd	r24, Z+25	; 0x19
    8f9c:	92 8d       	ldd	r25, Z+26	; 0x1a
    8f9e:	a3 8d       	ldd	r26, Z+27	; 0x1b
    8fa0:	b4 8d       	ldd	r27, Z+28	; 0x1c
    8fa2:	02 97       	sbiw	r24, 0x02	; 2
    8fa4:	a1 09       	sbc	r26, r1
    8fa6:	b1 09       	sbc	r27, r1
    8fa8:	28 17       	cp	r18, r24
    8faa:	39 07       	cpc	r19, r25
    8fac:	4a 07       	cpc	r20, r26
    8fae:	5b 07       	cpc	r21, r27
    8fb0:	68 f4       	brcc	.+26     	; 0x8fcc <clst2sect+0x44>
    8fb2:	a1 85       	ldd	r26, Z+9	; 0x09
    8fb4:	b2 85       	ldd	r27, Z+10	; 0x0a
    8fb6:	0e 94 9b e6 	call	0x1cd36	; 0x1cd36 <__muluhisi3>
    8fba:	05 a5       	ldd	r16, Z+45	; 0x2d
    8fbc:	16 a5       	ldd	r17, Z+46	; 0x2e
    8fbe:	27 a5       	ldd	r18, Z+47	; 0x2f
    8fc0:	30 a9       	ldd	r19, Z+48	; 0x30
    8fc2:	60 0f       	add	r22, r16
    8fc4:	71 1f       	adc	r23, r17
    8fc6:	82 1f       	adc	r24, r18
    8fc8:	93 1f       	adc	r25, r19
    8fca:	03 c0       	rjmp	.+6      	; 0x8fd2 <clst2sect+0x4a>
    8fcc:	60 e0       	ldi	r22, 0x00	; 0
    8fce:	70 e0       	ldi	r23, 0x00	; 0
    8fd0:	cb 01       	movw	r24, r22
    8fd2:	1f 91       	pop	r17
    8fd4:	0f 91       	pop	r16
    8fd6:	08 95       	ret

00008fd8 <clmt_clust>:
    8fd8:	cf 93       	push	r28
    8fda:	df 93       	push	r29
    8fdc:	fc 01       	movw	r30, r24
    8fde:	c2 a1       	ldd	r28, Z+34	; 0x22
    8fe0:	d3 a1       	ldd	r29, Z+35	; 0x23
    8fe2:	24 96       	adiw	r28, 0x04	; 4
    8fe4:	cb 01       	movw	r24, r22
    8fe6:	ba 01       	movw	r22, r20
    8fe8:	29 e0       	ldi	r18, 0x09	; 9
    8fea:	96 95       	lsr	r25
    8fec:	87 95       	ror	r24
    8fee:	77 95       	ror	r23
    8ff0:	67 95       	ror	r22
    8ff2:	2a 95       	dec	r18
    8ff4:	d1 f7       	brne	.-12     	; 0x8fea <clmt_clust+0x12>
    8ff6:	01 90       	ld	r0, Z+
    8ff8:	f0 81       	ld	r31, Z
    8ffa:	e0 2d       	mov	r30, r0
    8ffc:	21 85       	ldd	r18, Z+9	; 0x09
    8ffe:	32 85       	ldd	r19, Z+10	; 0x0a
    9000:	40 e0       	ldi	r20, 0x00	; 0
    9002:	50 e0       	ldi	r21, 0x00	; 0
    9004:	0e 94 4e e6 	call	0x1cc9c	; 0x1cc9c <__udivmodsi4>
    9008:	88 81       	ld	r24, Y
    900a:	99 81       	ldd	r25, Y+1	; 0x01
    900c:	aa 81       	ldd	r26, Y+2	; 0x02
    900e:	bb 81       	ldd	r27, Y+3	; 0x03
    9010:	00 97       	sbiw	r24, 0x00	; 0
    9012:	a1 05       	cpc	r26, r1
    9014:	b1 05       	cpc	r27, r1
    9016:	b1 f0       	breq	.+44     	; 0x9044 <clmt_clust+0x6c>
    9018:	28 17       	cp	r18, r24
    901a:	39 07       	cpc	r19, r25
    901c:	4a 07       	cpc	r20, r26
    901e:	5b 07       	cpc	r21, r27
    9020:	30 f0       	brcs	.+12     	; 0x902e <clmt_clust+0x56>
    9022:	28 1b       	sub	r18, r24
    9024:	39 0b       	sbc	r19, r25
    9026:	4a 0b       	sbc	r20, r26
    9028:	5b 0b       	sbc	r21, r27
    902a:	28 96       	adiw	r28, 0x08	; 8
    902c:	ed cf       	rjmp	.-38     	; 0x9008 <clmt_clust+0x30>
    902e:	8c 81       	ldd	r24, Y+4	; 0x04
    9030:	9d 81       	ldd	r25, Y+5	; 0x05
    9032:	ae 81       	ldd	r26, Y+6	; 0x06
    9034:	bf 81       	ldd	r27, Y+7	; 0x07
    9036:	bc 01       	movw	r22, r24
    9038:	cd 01       	movw	r24, r26
    903a:	62 0f       	add	r22, r18
    903c:	73 1f       	adc	r23, r19
    903e:	84 1f       	adc	r24, r20
    9040:	95 1f       	adc	r25, r21
    9042:	03 c0       	rjmp	.+6      	; 0x904a <clmt_clust+0x72>
    9044:	60 e0       	ldi	r22, 0x00	; 0
    9046:	70 e0       	ldi	r23, 0x00	; 0
    9048:	cb 01       	movw	r24, r22
    904a:	df 91       	pop	r29
    904c:	cf 91       	pop	r28
    904e:	08 95       	ret

00009050 <sum_sfn>:
    9050:	fc 01       	movw	r30, r24
    9052:	9c 01       	movw	r18, r24
    9054:	25 5f       	subi	r18, 0xF5	; 245
    9056:	3f 4f       	sbci	r19, 0xFF	; 255
    9058:	80 e0       	ldi	r24, 0x00	; 0
    905a:	98 2f       	mov	r25, r24
    905c:	90 fb       	bst	r25, 0
    905e:	97 95       	ror	r25
    9060:	97 f9       	bld	r25, 7
    9062:	81 91       	ld	r24, Z+
    9064:	89 0f       	add	r24, r25
    9066:	e2 17       	cp	r30, r18
    9068:	f3 07       	cpc	r31, r19
    906a:	b9 f7       	brne	.-18     	; 0x905a <sum_sfn+0xa>
    906c:	08 95       	ret

0000906e <get_ldnumber>:
    906e:	cf 93       	push	r28
    9070:	df 93       	push	r29
    9072:	dc 01       	movw	r26, r24
    9074:	ed 91       	ld	r30, X+
    9076:	fc 91       	ld	r31, X
    9078:	11 97       	sbiw	r26, 0x01	; 1
    907a:	30 97       	sbiw	r30, 0x00	; 0
    907c:	f9 f0       	breq	.+62     	; 0x90bc <get_ldnumber+0x4e>
    907e:	9f 01       	movw	r18, r30
    9080:	2f 5f       	subi	r18, 0xFF	; 255
    9082:	3f 4f       	sbci	r19, 0xFF	; 255
    9084:	e9 01       	movw	r28, r18
    9086:	21 97       	sbiw	r28, 0x01	; 1
    9088:	88 81       	ld	r24, Y
    908a:	80 32       	cpi	r24, 0x20	; 32
    908c:	18 f0       	brcs	.+6      	; 0x9094 <get_ldnumber+0x26>
    908e:	8a 33       	cpi	r24, 0x3A	; 58
    9090:	b9 f7       	brne	.-18     	; 0x9080 <get_ldnumber+0x12>
    9092:	04 c0       	rjmp	.+8      	; 0x909c <get_ldnumber+0x2e>
    9094:	80 91 1e 18 	lds	r24, 0x181E	; 0x80181e <CurrVol>
    9098:	90 e0       	ldi	r25, 0x00	; 0
    909a:	12 c0       	rjmp	.+36     	; 0x90c0 <get_ldnumber+0x52>
    909c:	90 81       	ld	r25, Z
    909e:	80 ed       	ldi	r24, 0xD0	; 208
    90a0:	89 0f       	add	r24, r25
    90a2:	8a 30       	cpi	r24, 0x0A	; 10
    90a4:	58 f4       	brcc	.+22     	; 0x90bc <get_ldnumber+0x4e>
    90a6:	32 96       	adiw	r30, 0x02	; 2
    90a8:	2e 17       	cp	r18, r30
    90aa:	3f 07       	cpc	r19, r31
    90ac:	39 f4       	brne	.+14     	; 0x90bc <get_ldnumber+0x4e>
    90ae:	90 33       	cpi	r25, 0x30	; 48
    90b0:	29 f4       	brne	.+10     	; 0x90bc <get_ldnumber+0x4e>
    90b2:	2d 93       	st	X+, r18
    90b4:	3c 93       	st	X, r19
    90b6:	80 e0       	ldi	r24, 0x00	; 0
    90b8:	90 e0       	ldi	r25, 0x00	; 0
    90ba:	02 c0       	rjmp	.+4      	; 0x90c0 <get_ldnumber+0x52>
    90bc:	8f ef       	ldi	r24, 0xFF	; 255
    90be:	9f ef       	ldi	r25, 0xFF	; 255
    90c0:	df 91       	pop	r29
    90c2:	cf 91       	pop	r28
    90c4:	08 95       	ret

000090c6 <validate>:
    90c6:	0f 93       	push	r16
    90c8:	1f 93       	push	r17
    90ca:	cf 93       	push	r28
    90cc:	df 93       	push	r29
    90ce:	ec 01       	movw	r28, r24
    90d0:	8b 01       	movw	r16, r22
    90d2:	89 2b       	or	r24, r25
    90d4:	f9 f0       	breq	.+62     	; 0x9114 <validate+0x4e>
    90d6:	e8 81       	ld	r30, Y
    90d8:	f9 81       	ldd	r31, Y+1	; 0x01
    90da:	30 97       	sbiw	r30, 0x00	; 0
    90dc:	d9 f0       	breq	.+54     	; 0x9114 <validate+0x4e>
    90de:	80 81       	ld	r24, Z
    90e0:	88 23       	and	r24, r24
    90e2:	c1 f0       	breq	.+48     	; 0x9114 <validate+0x4e>
    90e4:	2a 81       	ldd	r18, Y+2	; 0x02
    90e6:	3b 81       	ldd	r19, Y+3	; 0x03
    90e8:	85 81       	ldd	r24, Z+5	; 0x05
    90ea:	96 81       	ldd	r25, Z+6	; 0x06
    90ec:	28 17       	cp	r18, r24
    90ee:	39 07       	cpc	r19, r25
    90f0:	89 f4       	brne	.+34     	; 0x9114 <validate+0x4e>
    90f2:	81 81       	ldd	r24, Z+1	; 0x01
    90f4:	0e 94 79 69 	call	0xd2f2	; 0xd2f2 <disk_status>
    90f8:	80 fd       	sbrc	r24, 0
    90fa:	0c c0       	rjmp	.+24     	; 0x9114 <validate+0x4e>
    90fc:	28 81       	ld	r18, Y
    90fe:	39 81       	ldd	r19, Y+1	; 0x01
    9100:	80 e0       	ldi	r24, 0x00	; 0
    9102:	90 e0       	ldi	r25, 0x00	; 0
    9104:	f8 01       	movw	r30, r16
    9106:	31 83       	std	Z+1, r19	; 0x01
    9108:	20 83       	st	Z, r18
    910a:	df 91       	pop	r29
    910c:	cf 91       	pop	r28
    910e:	1f 91       	pop	r17
    9110:	0f 91       	pop	r16
    9112:	08 95       	ret
    9114:	89 e0       	ldi	r24, 0x09	; 9
    9116:	90 e0       	ldi	r25, 0x00	; 0
    9118:	20 e0       	ldi	r18, 0x00	; 0
    911a:	30 e0       	ldi	r19, 0x00	; 0
    911c:	f3 cf       	rjmp	.-26     	; 0x9104 <validate+0x3e>

0000911e <get_fileinfo>:
    911e:	a8 e0       	ldi	r26, 0x08	; 8
    9120:	b0 e0       	ldi	r27, 0x00	; 0
    9122:	e5 e9       	ldi	r30, 0x95	; 149
    9124:	f8 e4       	ldi	r31, 0x48	; 72
    9126:	0c 94 bb e6 	jmp	0x1cd76	; 0x1cd76 <__prologue_saves__>
    912a:	fc 01       	movw	r30, r24
    912c:	01 90       	ld	r0, Z+
    912e:	f0 81       	ld	r31, Z
    9130:	e0 2d       	mov	r30, r0
    9132:	f8 87       	std	Y+8, r31	; 0x08
    9134:	ef 83       	std	Y+7, r30	; 0x07
    9136:	fb 01       	movw	r30, r22
    9138:	16 8a       	std	Z+22, r1	; 0x16
    913a:	fc 01       	movw	r30, r24
    913c:	06 89       	ldd	r16, Z+22	; 0x16
    913e:	17 89       	ldd	r17, Z+23	; 0x17
    9140:	20 8d       	ldd	r18, Z+24	; 0x18
    9142:	31 8d       	ldd	r19, Z+25	; 0x19
    9144:	01 15       	cp	r16, r1
    9146:	11 05       	cpc	r17, r1
    9148:	21 05       	cpc	r18, r1
    914a:	31 05       	cpc	r19, r1
    914c:	09 f4       	brne	.+2      	; 0x9150 <get_fileinfo+0x32>
    914e:	0d c1       	rjmp	.+538    	; 0x936a <get_fileinfo+0x24c>
    9150:	7e 83       	std	Y+6, r23	; 0x06
    9152:	6d 83       	std	Y+5, r22	; 0x05
    9154:	7c 01       	movw	r14, r24
    9156:	80 a5       	ldd	r24, Z+40	; 0x28
    9158:	91 a5       	ldd	r25, Z+41	; 0x29
    915a:	a2 a5       	ldd	r26, Z+42	; 0x2a
    915c:	b3 a5       	ldd	r27, Z+43	; 0x2b
    915e:	8f 3f       	cpi	r24, 0xFF	; 255
    9160:	9f 4f       	sbci	r25, 0xFF	; 255
    9162:	af 4f       	sbci	r26, 0xFF	; 255
    9164:	bf 4f       	sbci	r27, 0xFF	; 255
    9166:	09 f4       	brne	.+2      	; 0x916a <get_fileinfo+0x4c>
    9168:	6c c0       	rjmp	.+216    	; 0x9242 <get_fileinfo+0x124>
    916a:	a1 2c       	mov	r10, r1
    916c:	b1 2c       	mov	r11, r1
    916e:	c1 2c       	mov	r12, r1
    9170:	d1 2c       	mov	r13, r1
    9172:	00 e0       	ldi	r16, 0x00	; 0
    9174:	10 e0       	ldi	r17, 0x00	; 0
    9176:	66 24       	eor	r6, r6
    9178:	6a 94       	dec	r6
    917a:	71 2c       	mov	r7, r1
    917c:	ef 81       	ldd	r30, Y+7	; 0x07
    917e:	f8 85       	ldd	r31, Y+8	; 0x08
    9180:	83 85       	ldd	r24, Z+11	; 0x0b
    9182:	94 85       	ldd	r25, Z+12	; 0x0c
    9184:	fc 01       	movw	r30, r24
    9186:	ea 0d       	add	r30, r10
    9188:	fb 1d       	adc	r31, r11
    918a:	80 81       	ld	r24, Z
    918c:	91 81       	ldd	r25, Z+1	; 0x01
    918e:	00 97       	sbiw	r24, 0x00	; 0
    9190:	09 f4       	brne	.+2      	; 0x9194 <get_fileinfo+0x76>
    9192:	4d c0       	rjmp	.+154    	; 0x922e <get_fileinfo+0x110>
    9194:	c1 14       	cp	r12, r1
    9196:	d1 04       	cpc	r13, r1
    9198:	29 f4       	brne	.+10     	; 0x91a4 <get_fileinfo+0x86>
    919a:	9c 01       	movw	r18, r24
    919c:	38 5d       	subi	r19, 0xD8	; 216
    919e:	21 15       	cp	r18, r1
    91a0:	38 40       	sbci	r19, 0x08	; 8
    91a2:	f0 f1       	brcs	.+124    	; 0x9220 <get_fileinfo+0x102>
    91a4:	43 01       	movw	r8, r6
    91a6:	80 1a       	sub	r8, r16
    91a8:	91 0a       	sbc	r9, r17
    91aa:	a6 01       	movw	r20, r12
    91ac:	60 e0       	ldi	r22, 0x00	; 0
    91ae:	70 e0       	ldi	r23, 0x00	; 0
    91b0:	2a 01       	movw	r4, r20
    91b2:	33 24       	eor	r3, r3
    91b4:	22 24       	eor	r2, r2
    91b6:	a0 e0       	ldi	r26, 0x00	; 0
    91b8:	b0 e0       	ldi	r27, 0x00	; 0
    91ba:	28 2a       	or	r2, r24
    91bc:	39 2a       	or	r3, r25
    91be:	4a 2a       	or	r4, r26
    91c0:	5b 2a       	or	r5, r27
    91c2:	c2 01       	movw	r24, r4
    91c4:	b1 01       	movw	r22, r2
    91c6:	45 eb       	ldi	r20, 0xB5	; 181
    91c8:	51 e0       	ldi	r21, 0x01	; 1
    91ca:	0e 94 cf 68 	call	0xd19e	; 0xd19e <ff_uni2oem>
    91ce:	8f 3f       	cpi	r24, 0xFF	; 255
    91d0:	91 05       	cpc	r25, r1
    91d2:	89 f0       	breq	.+34     	; 0x91f6 <get_fileinfo+0xd8>
    91d4:	80 f0       	brcs	.+32     	; 0x91f6 <get_fileinfo+0xd8>
    91d6:	22 e0       	ldi	r18, 0x02	; 2
    91d8:	82 16       	cp	r8, r18
    91da:	91 04       	cpc	r9, r1
    91dc:	c0 f0       	brcs	.+48     	; 0x920e <get_fileinfo+0xf0>
    91de:	ed 81       	ldd	r30, Y+5	; 0x05
    91e0:	fe 81       	ldd	r31, Y+6	; 0x06
    91e2:	e0 0f       	add	r30, r16
    91e4:	f1 1f       	adc	r31, r17
    91e6:	96 8b       	std	Z+22, r25	; 0x16
    91e8:	ed 81       	ldd	r30, Y+5	; 0x05
    91ea:	fe 81       	ldd	r31, Y+6	; 0x06
    91ec:	e0 0f       	add	r30, r16
    91ee:	f1 1f       	adc	r31, r17
    91f0:	87 8b       	std	Z+23, r24	; 0x17
    91f2:	82 e0       	ldi	r24, 0x02	; 2
    91f4:	0d c0       	rjmp	.+26     	; 0x9210 <get_fileinfo+0xf2>
    91f6:	00 97       	sbiw	r24, 0x00	; 0
    91f8:	51 f0       	breq	.+20     	; 0x920e <get_fileinfo+0xf0>
    91fa:	81 14       	cp	r8, r1
    91fc:	91 04       	cpc	r9, r1
    91fe:	39 f0       	breq	.+14     	; 0x920e <get_fileinfo+0xf0>
    9200:	ed 81       	ldd	r30, Y+5	; 0x05
    9202:	fe 81       	ldd	r31, Y+6	; 0x06
    9204:	e0 0f       	add	r30, r16
    9206:	f1 1f       	adc	r31, r17
    9208:	86 8b       	std	Z+22, r24	; 0x16
    920a:	81 e0       	ldi	r24, 0x01	; 1
    920c:	01 c0       	rjmp	.+2      	; 0x9210 <get_fileinfo+0xf2>
    920e:	80 e0       	ldi	r24, 0x00	; 0
    9210:	28 2f       	mov	r18, r24
    9212:	30 e0       	ldi	r19, 0x00	; 0
    9214:	88 23       	and	r24, r24
    9216:	49 f0       	breq	.+18     	; 0x922a <get_fileinfo+0x10c>
    9218:	02 0f       	add	r16, r18
    921a:	13 1f       	adc	r17, r19
    921c:	80 e0       	ldi	r24, 0x00	; 0
    921e:	90 e0       	ldi	r25, 0x00	; 0
    9220:	32 e0       	ldi	r19, 0x02	; 2
    9222:	a3 0e       	add	r10, r19
    9224:	b1 1c       	adc	r11, r1
    9226:	6c 01       	movw	r12, r24
    9228:	a9 cf       	rjmp	.-174    	; 0x917c <get_fileinfo+0x5e>
    922a:	00 e0       	ldi	r16, 0x00	; 0
    922c:	10 e0       	ldi	r17, 0x00	; 0
    922e:	c1 14       	cp	r12, r1
    9230:	d1 04       	cpc	r13, r1
    9232:	11 f0       	breq	.+4      	; 0x9238 <get_fileinfo+0x11a>
    9234:	00 e0       	ldi	r16, 0x00	; 0
    9236:	10 e0       	ldi	r17, 0x00	; 0
    9238:	ed 81       	ldd	r30, Y+5	; 0x05
    923a:	fe 81       	ldd	r31, Y+6	; 0x06
    923c:	e0 0f       	add	r30, r16
    923e:	f1 1f       	adc	r31, r17
    9240:	16 8a       	std	Z+22, r1	; 0x16
    9242:	80 e0       	ldi	r24, 0x00	; 0
    9244:	90 e0       	ldi	r25, 0x00	; 0
    9246:	20 e0       	ldi	r18, 0x00	; 0
    9248:	30 e0       	ldi	r19, 0x00	; 0
    924a:	6e e2       	ldi	r22, 0x2E	; 46
    924c:	a9 01       	movw	r20, r18
    924e:	4f 5f       	subi	r20, 0xFF	; 255
    9250:	5f 4f       	sbci	r21, 0xFF	; 255
    9252:	f7 01       	movw	r30, r14
    9254:	a2 8d       	ldd	r26, Z+26	; 0x1a
    9256:	b3 8d       	ldd	r27, Z+27	; 0x1b
    9258:	fd 01       	movw	r30, r26
    925a:	e2 0f       	add	r30, r18
    925c:	f3 1f       	adc	r31, r19
    925e:	20 81       	ld	r18, Z
    9260:	30 e0       	ldi	r19, 0x00	; 0
    9262:	20 32       	cpi	r18, 0x20	; 32
    9264:	31 05       	cpc	r19, r1
    9266:	b9 f0       	breq	.+46     	; 0x9296 <get_fileinfo+0x178>
    9268:	25 30       	cpi	r18, 0x05	; 5
    926a:	31 05       	cpc	r19, r1
    926c:	11 f4       	brne	.+4      	; 0x9272 <get_fileinfo+0x154>
    926e:	25 ee       	ldi	r18, 0xE5	; 229
    9270:	30 e0       	ldi	r19, 0x00	; 0
    9272:	49 30       	cpi	r20, 0x09	; 9
    9274:	51 05       	cpc	r21, r1
    9276:	49 f4       	brne	.+18     	; 0x928a <get_fileinfo+0x16c>
    9278:	8c 30       	cpi	r24, 0x0C	; 12
    927a:	91 05       	cpc	r25, r1
    927c:	30 f4       	brcc	.+12     	; 0x928a <get_fileinfo+0x16c>
    927e:	ed 81       	ldd	r30, Y+5	; 0x05
    9280:	fe 81       	ldd	r31, Y+6	; 0x06
    9282:	e8 0f       	add	r30, r24
    9284:	f9 1f       	adc	r31, r25
    9286:	61 87       	std	Z+9, r22	; 0x09
    9288:	01 96       	adiw	r24, 0x01	; 1
    928a:	ed 81       	ldd	r30, Y+5	; 0x05
    928c:	fe 81       	ldd	r31, Y+6	; 0x06
    928e:	e8 0f       	add	r30, r24
    9290:	f9 1f       	adc	r31, r25
    9292:	21 87       	std	Z+9, r18	; 0x09
    9294:	01 96       	adiw	r24, 0x01	; 1
    9296:	9a 01       	movw	r18, r20
    9298:	4b 30       	cpi	r20, 0x0B	; 11
    929a:	51 05       	cpc	r21, r1
    929c:	b9 f6       	brne	.-82     	; 0x924c <get_fileinfo+0x12e>
    929e:	ed 81       	ldd	r30, Y+5	; 0x05
    92a0:	fe 81       	ldd	r31, Y+6	; 0x06
    92a2:	e8 0f       	add	r30, r24
    92a4:	f9 1f       	adc	r31, r25
    92a6:	11 86       	std	Z+9, r1	; 0x09
    92a8:	ed 81       	ldd	r30, Y+5	; 0x05
    92aa:	fe 81       	ldd	r31, Y+6	; 0x06
    92ac:	26 89       	ldd	r18, Z+22	; 0x16
    92ae:	21 11       	cpse	r18, r1
    92b0:	3a c0       	rjmp	.+116    	; 0x9326 <get_fileinfo+0x208>
    92b2:	89 2b       	or	r24, r25
    92b4:	31 f0       	breq	.+12     	; 0x92c2 <get_fileinfo+0x1a4>
    92b6:	df 01       	movw	r26, r30
    92b8:	19 96       	adiw	r26, 0x09	; 9
    92ba:	58 e0       	ldi	r21, 0x08	; 8
    92bc:	20 e0       	ldi	r18, 0x00	; 0
    92be:	30 e0       	ldi	r19, 0x00	; 0
    92c0:	16 c0       	rjmp	.+44     	; 0x92ee <get_fileinfo+0x1d0>
    92c2:	8f e3       	ldi	r24, 0x3F	; 63
    92c4:	ed 81       	ldd	r30, Y+5	; 0x05
    92c6:	fe 81       	ldd	r31, Y+6	; 0x06
    92c8:	86 8b       	std	Z+22, r24	; 0x16
    92ca:	21 e0       	ldi	r18, 0x01	; 1
    92cc:	30 e0       	ldi	r19, 0x00	; 0
    92ce:	1c c0       	rjmp	.+56     	; 0x9308 <get_fileinfo+0x1ea>
    92d0:	90 e0       	ldi	r25, 0x00	; 0
    92d2:	8e 32       	cpi	r24, 0x2E	; 46
    92d4:	91 05       	cpc	r25, r1
    92d6:	09 f4       	brne	.+2      	; 0x92da <get_fileinfo+0x1bc>
    92d8:	50 e1       	ldi	r21, 0x10	; 16
    92da:	bc 01       	movw	r22, r24
    92dc:	61 54       	subi	r22, 0x41	; 65
    92de:	71 09       	sbc	r23, r1
    92e0:	6a 31       	cpi	r22, 0x1A	; 26
    92e2:	71 05       	cpc	r23, r1
    92e4:	40 f0       	brcs	.+16     	; 0x92f6 <get_fileinfo+0x1d8>
    92e6:	fd 01       	movw	r30, r26
    92e8:	84 87       	std	Z+12, r24	; 0x0c
    92ea:	2f 5f       	subi	r18, 0xFF	; 255
    92ec:	3f 4f       	sbci	r19, 0xFF	; 255
    92ee:	8d 91       	ld	r24, X+
    92f0:	81 11       	cpse	r24, r1
    92f2:	ee cf       	rjmp	.-36     	; 0x92d0 <get_fileinfo+0x1b2>
    92f4:	09 c0       	rjmp	.+18     	; 0x9308 <get_fileinfo+0x1ea>
    92f6:	f7 01       	movw	r30, r14
    92f8:	62 8d       	ldd	r22, Z+26	; 0x1a
    92fa:	73 8d       	ldd	r23, Z+27	; 0x1b
    92fc:	fb 01       	movw	r30, r22
    92fe:	44 85       	ldd	r20, Z+12	; 0x0c
    9300:	45 23       	and	r20, r21
    9302:	89 f3       	breq	.-30     	; 0x92e6 <get_fileinfo+0x1c8>
    9304:	80 96       	adiw	r24, 0x20	; 32
    9306:	ef cf       	rjmp	.-34     	; 0x92e6 <get_fileinfo+0x1c8>
    9308:	ed 81       	ldd	r30, Y+5	; 0x05
    930a:	fe 81       	ldd	r31, Y+6	; 0x06
    930c:	e2 0f       	add	r30, r18
    930e:	f3 1f       	adc	r31, r19
    9310:	16 8a       	std	Z+22, r1	; 0x16
    9312:	f7 01       	movw	r30, r14
    9314:	82 8d       	ldd	r24, Z+26	; 0x1a
    9316:	93 8d       	ldd	r25, Z+27	; 0x1b
    9318:	fc 01       	movw	r30, r24
    931a:	84 85       	ldd	r24, Z+12	; 0x0c
    931c:	81 11       	cpse	r24, r1
    931e:	03 c0       	rjmp	.+6      	; 0x9326 <get_fileinfo+0x208>
    9320:	ed 81       	ldd	r30, Y+5	; 0x05
    9322:	fe 81       	ldd	r31, Y+6	; 0x06
    9324:	11 86       	std	Z+9, r1	; 0x09
    9326:	f7 01       	movw	r30, r14
    9328:	82 8d       	ldd	r24, Z+26	; 0x1a
    932a:	93 8d       	ldd	r25, Z+27	; 0x1b
    932c:	fc 01       	movw	r30, r24
    932e:	83 85       	ldd	r24, Z+11	; 0x0b
    9330:	ed 81       	ldd	r30, Y+5	; 0x05
    9332:	fe 81       	ldd	r31, Y+6	; 0x06
    9334:	80 87       	std	Z+8, r24	; 0x08
    9336:	f7 01       	movw	r30, r14
    9338:	02 8d       	ldd	r16, Z+26	; 0x1a
    933a:	13 8d       	ldd	r17, Z+27	; 0x1b
    933c:	c8 01       	movw	r24, r16
    933e:	4c 96       	adiw	r24, 0x1c	; 28
    9340:	f0 dd       	rcall	.-1056   	; 0x8f22 <ld_dword>
    9342:	ed 81       	ldd	r30, Y+5	; 0x05
    9344:	fe 81       	ldd	r31, Y+6	; 0x06
    9346:	60 83       	st	Z, r22
    9348:	71 83       	std	Z+1, r23	; 0x01
    934a:	82 83       	std	Z+2, r24	; 0x02
    934c:	93 83       	std	Z+3, r25	; 0x03
    934e:	f8 01       	movw	r30, r16
    9350:	86 89       	ldd	r24, Z+22	; 0x16
    9352:	97 89       	ldd	r25, Z+23	; 0x17
    9354:	ed 81       	ldd	r30, Y+5	; 0x05
    9356:	fe 81       	ldd	r31, Y+6	; 0x06
    9358:	97 83       	std	Z+7, r25	; 0x07
    935a:	86 83       	std	Z+6, r24	; 0x06
    935c:	f8 01       	movw	r30, r16
    935e:	80 8d       	ldd	r24, Z+24	; 0x18
    9360:	91 8d       	ldd	r25, Z+25	; 0x19
    9362:	ed 81       	ldd	r30, Y+5	; 0x05
    9364:	fe 81       	ldd	r31, Y+6	; 0x06
    9366:	95 83       	std	Z+5, r25	; 0x05
    9368:	84 83       	std	Z+4, r24	; 0x04
    936a:	28 96       	adiw	r28, 0x08	; 8
    936c:	e2 e1       	ldi	r30, 0x12	; 18
    936e:	0c 94 d7 e6 	jmp	0x1cdae	; 0x1cdae <__epilogue_restores__>

00009372 <mem_cpy.part.0>:
    9372:	fb 01       	movw	r30, r22
    9374:	48 0f       	add	r20, r24
    9376:	59 1f       	adc	r21, r25
    9378:	21 91       	ld	r18, Z+
    937a:	dc 01       	movw	r26, r24
    937c:	2d 93       	st	X+, r18
    937e:	cd 01       	movw	r24, r26
    9380:	a4 17       	cp	r26, r20
    9382:	b5 07       	cpc	r27, r21
    9384:	c9 f7       	brne	.-14     	; 0x9378 <mem_cpy.part.0+0x6>
    9386:	08 95       	ret

00009388 <ld_clust.isra.3>:
    9388:	fb 01       	movw	r30, r22
    938a:	42 8d       	ldd	r20, Z+26	; 0x1a
    938c:	53 8d       	ldd	r21, Z+27	; 0x1b
    938e:	60 e0       	ldi	r22, 0x00	; 0
    9390:	70 e0       	ldi	r23, 0x00	; 0
    9392:	83 30       	cpi	r24, 0x03	; 3
    9394:	59 f4       	brne	.+22     	; 0x93ac <ld_clust.isra.3+0x24>
    9396:	84 89       	ldd	r24, Z+20	; 0x14
    9398:	95 89       	ldd	r25, Z+21	; 0x15
    939a:	a0 e0       	ldi	r26, 0x00	; 0
    939c:	b0 e0       	ldi	r27, 0x00	; 0
    939e:	dc 01       	movw	r26, r24
    93a0:	99 27       	eor	r25, r25
    93a2:	88 27       	eor	r24, r24
    93a4:	48 2b       	or	r20, r24
    93a6:	59 2b       	or	r21, r25
    93a8:	6a 2b       	or	r22, r26
    93aa:	7b 2b       	or	r23, r27
    93ac:	cb 01       	movw	r24, r22
    93ae:	ba 01       	movw	r22, r20
    93b0:	08 95       	ret

000093b2 <st_clust.isra.4>:
    93b2:	fb 01       	movw	r30, r22
    93b4:	22 8f       	std	Z+26, r18	; 0x1a
    93b6:	33 8f       	std	Z+27, r19	; 0x1b
    93b8:	dc 01       	movw	r26, r24
    93ba:	8c 91       	ld	r24, X
    93bc:	83 30       	cpi	r24, 0x03	; 3
    93be:	29 f4       	brne	.+10     	; 0x93ca <st_clust.isra.4+0x18>
    93c0:	ca 01       	movw	r24, r20
    93c2:	aa 27       	eor	r26, r26
    93c4:	bb 27       	eor	r27, r27
    93c6:	84 8b       	std	Z+20, r24	; 0x14
    93c8:	95 8b       	std	Z+21, r25	; 0x15
    93ca:	08 95       	ret

000093cc <sync_window.part.5>:
    93cc:	8f 92       	push	r8
    93ce:	9f 92       	push	r9
    93d0:	af 92       	push	r10
    93d2:	bf 92       	push	r11
    93d4:	ef 92       	push	r14
    93d6:	ff 92       	push	r15
    93d8:	0f 93       	push	r16
    93da:	1f 93       	push	r17
    93dc:	cf 93       	push	r28
    93de:	df 93       	push	r29
    93e0:	ec 01       	movw	r28, r24
    93e2:	7c 01       	movw	r14, r24
    93e4:	45 e3       	ldi	r20, 0x35	; 53
    93e6:	e4 0e       	add	r14, r20
    93e8:	f1 1c       	adc	r15, r1
    93ea:	29 a9       	ldd	r18, Y+49	; 0x31
    93ec:	3a a9       	ldd	r19, Y+50	; 0x32
    93ee:	4b a9       	ldd	r20, Y+51	; 0x33
    93f0:	5c a9       	ldd	r21, Y+52	; 0x34
    93f2:	01 e0       	ldi	r16, 0x01	; 1
    93f4:	10 e0       	ldi	r17, 0x00	; 0
    93f6:	b7 01       	movw	r22, r14
    93f8:	89 81       	ldd	r24, Y+1	; 0x01
    93fa:	0e 94 95 69 	call	0xd32a	; 0xd32a <disk_write>
    93fe:	89 2b       	or	r24, r25
    9400:	41 f5       	brne	.+80     	; 0x9452 <sync_window.part.5+0x86>
    9402:	1b 82       	std	Y+3, r1	; 0x03
    9404:	09 a9       	ldd	r16, Y+49	; 0x31
    9406:	1a a9       	ldd	r17, Y+50	; 0x32
    9408:	2b a9       	ldd	r18, Y+51	; 0x33
    940a:	3c a9       	ldd	r19, Y+52	; 0x34
    940c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    940e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9410:	af 8d       	ldd	r26, Y+31	; 0x1f
    9412:	b8 a1       	ldd	r27, Y+32	; 0x20
    9414:	8d a0       	ldd	r8, Y+37	; 0x25
    9416:	9e a0       	ldd	r9, Y+38	; 0x26
    9418:	af a0       	ldd	r10, Y+39	; 0x27
    941a:	b8 a4       	ldd	r11, Y+40	; 0x28
    941c:	b9 01       	movw	r22, r18
    941e:	a8 01       	movw	r20, r16
    9420:	48 19       	sub	r20, r8
    9422:	59 09       	sbc	r21, r9
    9424:	6a 09       	sbc	r22, r10
    9426:	7b 09       	sbc	r23, r11
    9428:	48 17       	cp	r20, r24
    942a:	59 07       	cpc	r21, r25
    942c:	6a 07       	cpc	r22, r26
    942e:	7b 07       	cpc	r23, r27
    9430:	98 f4       	brcc	.+38     	; 0x9458 <sync_window.part.5+0x8c>
    9432:	6a 81       	ldd	r22, Y+2	; 0x02
    9434:	62 30       	cpi	r22, 0x02	; 2
    9436:	81 f4       	brne	.+32     	; 0x9458 <sync_window.part.5+0x8c>
    9438:	a9 01       	movw	r20, r18
    943a:	98 01       	movw	r18, r16
    943c:	28 0f       	add	r18, r24
    943e:	39 1f       	adc	r19, r25
    9440:	4a 1f       	adc	r20, r26
    9442:	5b 1f       	adc	r21, r27
    9444:	01 e0       	ldi	r16, 0x01	; 1
    9446:	10 e0       	ldi	r17, 0x00	; 0
    9448:	b7 01       	movw	r22, r14
    944a:	89 81       	ldd	r24, Y+1	; 0x01
    944c:	0e 94 95 69 	call	0xd32a	; 0xd32a <disk_write>
    9450:	03 c0       	rjmp	.+6      	; 0x9458 <sync_window.part.5+0x8c>
    9452:	81 e0       	ldi	r24, 0x01	; 1
    9454:	90 e0       	ldi	r25, 0x00	; 0
    9456:	02 c0       	rjmp	.+4      	; 0x945c <sync_window.part.5+0x90>
    9458:	80 e0       	ldi	r24, 0x00	; 0
    945a:	90 e0       	ldi	r25, 0x00	; 0
    945c:	df 91       	pop	r29
    945e:	cf 91       	pop	r28
    9460:	1f 91       	pop	r17
    9462:	0f 91       	pop	r16
    9464:	ff 90       	pop	r15
    9466:	ef 90       	pop	r14
    9468:	bf 90       	pop	r11
    946a:	af 90       	pop	r10
    946c:	9f 90       	pop	r9
    946e:	8f 90       	pop	r8
    9470:	08 95       	ret

00009472 <sync_fs>:
    9472:	ef 92       	push	r14
    9474:	ff 92       	push	r15
    9476:	0f 93       	push	r16
    9478:	1f 93       	push	r17
    947a:	cf 93       	push	r28
    947c:	df 93       	push	r29
    947e:	ec 01       	movw	r28, r24
    9480:	8b 81       	ldd	r24, Y+3	; 0x03
    9482:	81 11       	cpse	r24, r1
    9484:	05 c0       	rjmp	.+10     	; 0x9490 <sync_fs+0x1e>
    9486:	88 81       	ld	r24, Y
    9488:	83 30       	cpi	r24, 0x03	; 3
    948a:	09 f0       	breq	.+2      	; 0x948e <sync_fs+0x1c>
    948c:	52 c0       	rjmp	.+164    	; 0x9532 <sync_fs+0xc0>
    948e:	06 c0       	rjmp	.+12     	; 0x949c <sync_fs+0x2a>
    9490:	ce 01       	movw	r24, r28
    9492:	9c df       	rcall	.-200    	; 0x93cc <sync_window.part.5>
    9494:	00 97       	sbiw	r24, 0x00	; 0
    9496:	09 f0       	breq	.+2      	; 0x949a <sync_fs+0x28>
    9498:	59 c0       	rjmp	.+178    	; 0x954c <sync_fs+0xda>
    949a:	f5 cf       	rjmp	.-22     	; 0x9486 <sync_fs+0x14>
    949c:	8c 81       	ldd	r24, Y+4	; 0x04
    949e:	81 30       	cpi	r24, 0x01	; 1
    94a0:	09 f0       	breq	.+2      	; 0x94a4 <sync_fs+0x32>
    94a2:	47 c0       	rjmp	.+142    	; 0x9532 <sync_fs+0xc0>
    94a4:	40 e0       	ldi	r20, 0x00	; 0
    94a6:	52 e0       	ldi	r21, 0x02	; 2
    94a8:	60 e0       	ldi	r22, 0x00	; 0
    94aa:	70 e0       	ldi	r23, 0x00	; 0
    94ac:	7e 01       	movw	r14, r28
    94ae:	85 e3       	ldi	r24, 0x35	; 53
    94b0:	e8 0e       	add	r14, r24
    94b2:	f1 1c       	adc	r15, r1
    94b4:	c7 01       	movw	r24, r14
    94b6:	50 dd       	rcall	.-1376   	; 0x8f58 <mem_set>
    94b8:	85 e5       	ldi	r24, 0x55	; 85
    94ba:	fe 01       	movw	r30, r28
    94bc:	ed 5c       	subi	r30, 0xCD	; 205
    94be:	fd 4f       	sbci	r31, 0xFD	; 253
    94c0:	80 83       	st	Z, r24
    94c2:	8a ea       	ldi	r24, 0xAA	; 170
    94c4:	31 96       	adiw	r30, 0x01	; 1
    94c6:	80 83       	st	Z, r24
    94c8:	82 e5       	ldi	r24, 0x52	; 82
    94ca:	8d ab       	std	Y+53, r24	; 0x35
    94cc:	8e ab       	std	Y+54, r24	; 0x36
    94ce:	81 e6       	ldi	r24, 0x61	; 97
    94d0:	8f ab       	std	Y+55, r24	; 0x37
    94d2:	91 e4       	ldi	r25, 0x41	; 65
    94d4:	98 af       	std	Y+56, r25	; 0x38
    94d6:	22 e7       	ldi	r18, 0x72	; 114
    94d8:	7b 97       	sbiw	r30, 0x1b	; 27
    94da:	20 83       	st	Z, r18
    94dc:	31 96       	adiw	r30, 0x01	; 1
    94de:	20 83       	st	Z, r18
    94e0:	31 96       	adiw	r30, 0x01	; 1
    94e2:	90 83       	st	Z, r25
    94e4:	31 96       	adiw	r30, 0x01	; 1
    94e6:	80 83       	st	Z, r24
    94e8:	49 89       	ldd	r20, Y+17	; 0x11
    94ea:	5a 89       	ldd	r21, Y+18	; 0x12
    94ec:	6b 89       	ldd	r22, Y+19	; 0x13
    94ee:	7c 89       	ldd	r23, Y+20	; 0x14
    94f0:	ce 01       	movw	r24, r28
    94f2:	83 5e       	subi	r24, 0xE3	; 227
    94f4:	9d 4f       	sbci	r25, 0xFD	; 253
    94f6:	2a dd       	rcall	.-1452   	; 0x8f4c <st_dword>
    94f8:	4d 85       	ldd	r20, Y+13	; 0x0d
    94fa:	5e 85       	ldd	r21, Y+14	; 0x0e
    94fc:	6f 85       	ldd	r22, Y+15	; 0x0f
    94fe:	78 89       	ldd	r23, Y+16	; 0x10
    9500:	ce 01       	movw	r24, r28
    9502:	8f 5d       	subi	r24, 0xDF	; 223
    9504:	9d 4f       	sbci	r25, 0xFD	; 253
    9506:	22 dd       	rcall	.-1468   	; 0x8f4c <st_dword>
    9508:	89 a1       	ldd	r24, Y+33	; 0x21
    950a:	9a a1       	ldd	r25, Y+34	; 0x22
    950c:	ab a1       	ldd	r26, Y+35	; 0x23
    950e:	bc a1       	ldd	r27, Y+36	; 0x24
    9510:	9c 01       	movw	r18, r24
    9512:	ad 01       	movw	r20, r26
    9514:	2f 5f       	subi	r18, 0xFF	; 255
    9516:	3f 4f       	sbci	r19, 0xFF	; 255
    9518:	4f 4f       	sbci	r20, 0xFF	; 255
    951a:	5f 4f       	sbci	r21, 0xFF	; 255
    951c:	29 ab       	std	Y+49, r18	; 0x31
    951e:	3a ab       	std	Y+50, r19	; 0x32
    9520:	4b ab       	std	Y+51, r20	; 0x33
    9522:	5c ab       	std	Y+52, r21	; 0x34
    9524:	01 e0       	ldi	r16, 0x01	; 1
    9526:	10 e0       	ldi	r17, 0x00	; 0
    9528:	b7 01       	movw	r22, r14
    952a:	89 81       	ldd	r24, Y+1	; 0x01
    952c:	0e 94 95 69 	call	0xd32a	; 0xd32a <disk_write>
    9530:	1c 82       	std	Y+4, r1	; 0x04
    9532:	40 e0       	ldi	r20, 0x00	; 0
    9534:	50 e0       	ldi	r21, 0x00	; 0
    9536:	60 e0       	ldi	r22, 0x00	; 0
    9538:	89 81       	ldd	r24, Y+1	; 0x01
    953a:	0e 94 a5 69 	call	0xd34a	; 0xd34a <disk_ioctl>
    953e:	31 e0       	ldi	r19, 0x01	; 1
    9540:	20 e0       	ldi	r18, 0x00	; 0
    9542:	89 2b       	or	r24, r25
    9544:	09 f4       	brne	.+2      	; 0x9548 <sync_fs+0xd6>
    9546:	30 e0       	ldi	r19, 0x00	; 0
    9548:	83 2f       	mov	r24, r19
    954a:	92 2f       	mov	r25, r18
    954c:	cd b7       	in	r28, 0x3d	; 61
    954e:	de b7       	in	r29, 0x3e	; 62
    9550:	e6 e0       	ldi	r30, 0x06	; 6
    9552:	0c 94 e3 e6 	jmp	0x1cdc6	; 0x1cdc6 <__epilogue_restores__+0x18>

00009556 <dir_clear>:
    9556:	4f 92       	push	r4
    9558:	5f 92       	push	r5
    955a:	6f 92       	push	r6
    955c:	7f 92       	push	r7
    955e:	af 92       	push	r10
    9560:	bf 92       	push	r11
    9562:	cf 92       	push	r12
    9564:	df 92       	push	r13
    9566:	ef 92       	push	r14
    9568:	ff 92       	push	r15
    956a:	0f 93       	push	r16
    956c:	1f 93       	push	r17
    956e:	cf 93       	push	r28
    9570:	df 93       	push	r29
    9572:	ec 01       	movw	r28, r24
    9574:	6a 01       	movw	r12, r20
    9576:	7b 01       	movw	r14, r22
    9578:	8b 81       	ldd	r24, Y+3	; 0x03
    957a:	81 11       	cpse	r24, r1
    957c:	28 c0       	rjmp	.+80     	; 0x95ce <dir_clear+0x78>
    957e:	b7 01       	movw	r22, r14
    9580:	a6 01       	movw	r20, r12
    9582:	ce 01       	movw	r24, r28
    9584:	01 dd       	rcall	.-1534   	; 0x8f88 <clst2sect>
    9586:	2b 01       	movw	r4, r22
    9588:	3c 01       	movw	r6, r24
    958a:	69 ab       	std	Y+49, r22	; 0x31
    958c:	7a ab       	std	Y+50, r23	; 0x32
    958e:	8b ab       	std	Y+51, r24	; 0x33
    9590:	9c ab       	std	Y+52, r25	; 0x34
    9592:	5e 01       	movw	r10, r28
    9594:	25 e3       	ldi	r18, 0x35	; 53
    9596:	a2 0e       	add	r10, r18
    9598:	b1 1c       	adc	r11, r1
    959a:	40 e0       	ldi	r20, 0x00	; 0
    959c:	52 e0       	ldi	r21, 0x02	; 2
    959e:	60 e0       	ldi	r22, 0x00	; 0
    95a0:	70 e0       	ldi	r23, 0x00	; 0
    95a2:	c5 01       	movw	r24, r10
    95a4:	d9 dc       	rcall	.-1614   	; 0x8f58 <mem_set>
    95a6:	09 85       	ldd	r16, Y+9	; 0x09
    95a8:	1a 85       	ldd	r17, Y+10	; 0x0a
    95aa:	c8 01       	movw	r24, r16
    95ac:	a0 e0       	ldi	r26, 0x00	; 0
    95ae:	b0 e0       	ldi	r27, 0x00	; 0
    95b0:	39 e0       	ldi	r19, 0x09	; 9
    95b2:	88 0f       	add	r24, r24
    95b4:	99 1f       	adc	r25, r25
    95b6:	aa 1f       	adc	r26, r26
    95b8:	bb 1f       	adc	r27, r27
    95ba:	3a 95       	dec	r19
    95bc:	d1 f7       	brne	.-12     	; 0x95b2 <dir_clear+0x5c>
    95be:	81 15       	cp	r24, r1
    95c0:	90 48       	sbci	r25, 0x80	; 128
    95c2:	a1 05       	cpc	r26, r1
    95c4:	b1 05       	cpc	r27, r1
    95c6:	50 f0       	brcs	.+20     	; 0x95dc <dir_clear+0x86>
    95c8:	00 e0       	ldi	r16, 0x00	; 0
    95ca:	10 e8       	ldi	r17, 0x80	; 128
    95cc:	14 c0       	rjmp	.+40     	; 0x95f6 <dir_clear+0xa0>
    95ce:	ce 01       	movw	r24, r28
    95d0:	fd de       	rcall	.-518    	; 0x93cc <sync_window.part.5>
    95d2:	89 2b       	or	r24, r25
    95d4:	a1 f2       	breq	.-88     	; 0x957e <dir_clear+0x28>
    95d6:	81 e0       	ldi	r24, 0x01	; 1
    95d8:	90 e0       	ldi	r25, 0x00	; 0
    95da:	56 c0       	rjmp	.+172    	; 0x9688 <dir_clear+0x132>
    95dc:	10 2f       	mov	r17, r16
    95de:	00 27       	eor	r16, r16
    95e0:	11 0f       	add	r17, r17
    95e2:	09 c0       	rjmp	.+18     	; 0x95f6 <dir_clear+0xa0>
    95e4:	c8 01       	movw	r24, r16
    95e6:	0e 94 c9 68 	call	0xd192	; 0xd192 <ff_memalloc>
    95ea:	6c 01       	movw	r12, r24
    95ec:	00 97       	sbiw	r24, 0x00	; 0
    95ee:	09 f0       	breq	.+2      	; 0x95f2 <dir_clear+0x9c>
    95f0:	40 c0       	rjmp	.+128    	; 0x9672 <dir_clear+0x11c>
    95f2:	16 95       	lsr	r17
    95f4:	07 95       	ror	r16
    95f6:	01 30       	cpi	r16, 0x01	; 1
    95f8:	82 e0       	ldi	r24, 0x02	; 2
    95fa:	18 07       	cpc	r17, r24
    95fc:	98 f7       	brcc	.-26     	; 0x95e4 <dir_clear+0x8e>
    95fe:	e1 2c       	mov	r14, r1
    9600:	f1 2c       	mov	r15, r1
    9602:	11 c0       	rjmp	.+34     	; 0x9626 <dir_clear+0xd0>
    9604:	01 e0       	ldi	r16, 0x01	; 1
    9606:	10 e0       	ldi	r17, 0x00	; 0
    9608:	a3 01       	movw	r20, r6
    960a:	92 01       	movw	r18, r4
    960c:	2e 0d       	add	r18, r14
    960e:	3f 1d       	adc	r19, r15
    9610:	41 1d       	adc	r20, r1
    9612:	51 1d       	adc	r21, r1
    9614:	b5 01       	movw	r22, r10
    9616:	89 81       	ldd	r24, Y+1	; 0x01
    9618:	0e 94 95 69 	call	0xd32a	; 0xd32a <disk_write>
    961c:	89 2b       	or	r24, r25
    961e:	01 f5       	brne	.+64     	; 0x9660 <dir_clear+0x10a>
    9620:	2f ef       	ldi	r18, 0xFF	; 255
    9622:	e2 1a       	sub	r14, r18
    9624:	f2 0a       	sbc	r15, r18
    9626:	89 85       	ldd	r24, Y+9	; 0x09
    9628:	9a 85       	ldd	r25, Y+10	; 0x0a
    962a:	e8 16       	cp	r14, r24
    962c:	f9 06       	cpc	r15, r25
    962e:	50 f3       	brcs	.-44     	; 0x9604 <dir_clear+0xae>
    9630:	17 c0       	rjmp	.+46     	; 0x9660 <dir_clear+0x10a>
    9632:	85 01       	movw	r16, r10
    9634:	a3 01       	movw	r20, r6
    9636:	92 01       	movw	r18, r4
    9638:	2e 0d       	add	r18, r14
    963a:	3f 1d       	adc	r19, r15
    963c:	41 1d       	adc	r20, r1
    963e:	51 1d       	adc	r21, r1
    9640:	b6 01       	movw	r22, r12
    9642:	89 81       	ldd	r24, Y+1	; 0x01
    9644:	0e 94 95 69 	call	0xd32a	; 0xd32a <disk_write>
    9648:	89 2b       	or	r24, r25
    964a:	39 f4       	brne	.+14     	; 0x965a <dir_clear+0x104>
    964c:	ea 0c       	add	r14, r10
    964e:	fb 1c       	adc	r15, r11
    9650:	89 85       	ldd	r24, Y+9	; 0x09
    9652:	9a 85       	ldd	r25, Y+10	; 0x0a
    9654:	e8 16       	cp	r14, r24
    9656:	f9 06       	cpc	r15, r25
    9658:	60 f3       	brcs	.-40     	; 0x9632 <dir_clear+0xdc>
    965a:	c6 01       	movw	r24, r12
    965c:	0e 94 cc 68 	call	0xd198	; 0xd198 <ff_memfree>
    9660:	81 e0       	ldi	r24, 0x01	; 1
    9662:	90 e0       	ldi	r25, 0x00	; 0
    9664:	29 85       	ldd	r18, Y+9	; 0x09
    9666:	3a 85       	ldd	r19, Y+10	; 0x0a
    9668:	2e 15       	cp	r18, r14
    966a:	3f 05       	cpc	r19, r15
    966c:	69 f4       	brne	.+26     	; 0x9688 <dir_clear+0x132>
    966e:	80 e0       	ldi	r24, 0x00	; 0
    9670:	0b c0       	rjmp	.+22     	; 0x9688 <dir_clear+0x132>
    9672:	a8 01       	movw	r20, r16
    9674:	60 e0       	ldi	r22, 0x00	; 0
    9676:	70 e0       	ldi	r23, 0x00	; 0
    9678:	6f dc       	rcall	.-1826   	; 0x8f58 <mem_set>
    967a:	58 01       	movw	r10, r16
    967c:	ab 2c       	mov	r10, r11
    967e:	bb 24       	eor	r11, r11
    9680:	a6 94       	lsr	r10
    9682:	e1 2c       	mov	r14, r1
    9684:	f1 2c       	mov	r15, r1
    9686:	e4 cf       	rjmp	.-56     	; 0x9650 <dir_clear+0xfa>
    9688:	df 91       	pop	r29
    968a:	cf 91       	pop	r28
    968c:	1f 91       	pop	r17
    968e:	0f 91       	pop	r16
    9690:	ff 90       	pop	r15
    9692:	ef 90       	pop	r14
    9694:	df 90       	pop	r13
    9696:	cf 90       	pop	r12
    9698:	bf 90       	pop	r11
    969a:	af 90       	pop	r10
    969c:	7f 90       	pop	r7
    969e:	6f 90       	pop	r6
    96a0:	5f 90       	pop	r5
    96a2:	4f 90       	pop	r4
    96a4:	08 95       	ret

000096a6 <move_window>:
    96a6:	a0 e0       	ldi	r26, 0x00	; 0
    96a8:	b0 e0       	ldi	r27, 0x00	; 0
    96aa:	e9 e5       	ldi	r30, 0x59	; 89
    96ac:	fb e4       	ldi	r31, 0x4B	; 75
    96ae:	0c 94 c5 e6 	jmp	0x1cd8a	; 0x1cd8a <__prologue_saves__+0x14>
    96b2:	ec 01       	movw	r28, r24
    96b4:	6a 01       	movw	r12, r20
    96b6:	7b 01       	movw	r14, r22
    96b8:	89 a9       	ldd	r24, Y+49	; 0x31
    96ba:	9a a9       	ldd	r25, Y+50	; 0x32
    96bc:	ab a9       	ldd	r26, Y+51	; 0x33
    96be:	bc a9       	ldd	r27, Y+52	; 0x34
    96c0:	84 17       	cp	r24, r20
    96c2:	95 07       	cpc	r25, r21
    96c4:	a6 07       	cpc	r26, r22
    96c6:	b7 07       	cpc	r27, r23
    96c8:	11 f1       	breq	.+68     	; 0x970e <move_window+0x68>
    96ca:	8b 81       	ldd	r24, Y+3	; 0x03
    96cc:	81 11       	cpse	r24, r1
    96ce:	13 c0       	rjmp	.+38     	; 0x96f6 <move_window+0x50>
    96d0:	01 e0       	ldi	r16, 0x01	; 1
    96d2:	10 e0       	ldi	r17, 0x00	; 0
    96d4:	a7 01       	movw	r20, r14
    96d6:	96 01       	movw	r18, r12
    96d8:	be 01       	movw	r22, r28
    96da:	6b 5c       	subi	r22, 0xCB	; 203
    96dc:	7f 4f       	sbci	r23, 0xFF	; 255
    96de:	89 81       	ldd	r24, Y+1	; 0x01
    96e0:	0e 94 85 69 	call	0xd30a	; 0xd30a <disk_read>
    96e4:	89 2b       	or	r24, r25
    96e6:	61 f0       	breq	.+24     	; 0x9700 <move_window+0x5a>
    96e8:	81 e0       	ldi	r24, 0x01	; 1
    96ea:	90 e0       	ldi	r25, 0x00	; 0
    96ec:	cc 24       	eor	r12, r12
    96ee:	ca 94       	dec	r12
    96f0:	dc 2c       	mov	r13, r12
    96f2:	76 01       	movw	r14, r12
    96f4:	07 c0       	rjmp	.+14     	; 0x9704 <move_window+0x5e>
    96f6:	ce 01       	movw	r24, r28
    96f8:	69 de       	rcall	.-814    	; 0x93cc <sync_window.part.5>
    96fa:	00 97       	sbiw	r24, 0x00	; 0
    96fc:	51 f4       	brne	.+20     	; 0x9712 <move_window+0x6c>
    96fe:	e8 cf       	rjmp	.-48     	; 0x96d0 <move_window+0x2a>
    9700:	80 e0       	ldi	r24, 0x00	; 0
    9702:	90 e0       	ldi	r25, 0x00	; 0
    9704:	c9 aa       	std	Y+49, r12	; 0x31
    9706:	da aa       	std	Y+50, r13	; 0x32
    9708:	eb aa       	std	Y+51, r14	; 0x33
    970a:	fc aa       	std	Y+52, r15	; 0x34
    970c:	02 c0       	rjmp	.+4      	; 0x9712 <move_window+0x6c>
    970e:	80 e0       	ldi	r24, 0x00	; 0
    9710:	90 e0       	ldi	r25, 0x00	; 0
    9712:	cd b7       	in	r28, 0x3d	; 61
    9714:	de b7       	in	r29, 0x3e	; 62
    9716:	e8 e0       	ldi	r30, 0x08	; 8
    9718:	0c 94 e1 e6 	jmp	0x1cdc2	; 0x1cdc2 <__epilogue_restores__+0x14>

0000971c <check_fs>:
    971c:	cf 93       	push	r28
    971e:	df 93       	push	r29
    9720:	ec 01       	movw	r28, r24
    9722:	1b 82       	std	Y+3, r1	; 0x03
    9724:	8f ef       	ldi	r24, 0xFF	; 255
    9726:	9f ef       	ldi	r25, 0xFF	; 255
    9728:	dc 01       	movw	r26, r24
    972a:	89 ab       	std	Y+49, r24	; 0x31
    972c:	9a ab       	std	Y+50, r25	; 0x32
    972e:	ab ab       	std	Y+51, r26	; 0x33
    9730:	bc ab       	std	Y+52, r27	; 0x34
    9732:	ce 01       	movw	r24, r28
    9734:	b8 df       	rcall	.-144    	; 0x96a6 <move_window>
    9736:	89 2b       	or	r24, r25
    9738:	19 f5       	brne	.+70     	; 0x9780 <check_fs+0x64>
    973a:	fe 01       	movw	r30, r28
    973c:	ed 5c       	subi	r30, 0xCD	; 205
    973e:	fd 4f       	sbci	r31, 0xFD	; 253
    9740:	80 81       	ld	r24, Z
    9742:	91 81       	ldd	r25, Z+1	; 0x01
    9744:	85 35       	cpi	r24, 0x55	; 85
    9746:	9a 4a       	sbci	r25, 0xAA	; 170
    9748:	f1 f4       	brne	.+60     	; 0x9786 <check_fs+0x6a>
    974a:	8d a9       	ldd	r24, Y+53	; 0x35
    974c:	8b 3e       	cpi	r24, 0xEB	; 235
    974e:	19 f0       	breq	.+6      	; 0x9756 <check_fs+0x3a>
    9750:	88 5e       	subi	r24, 0xE8	; 232
    9752:	82 30       	cpi	r24, 0x02	; 2
    9754:	f0 f4       	brcc	.+60     	; 0x9792 <check_fs+0x76>
    9756:	43 e0       	ldi	r20, 0x03	; 3
    9758:	50 e0       	ldi	r21, 0x00	; 0
    975a:	66 ec       	ldi	r22, 0xC6	; 198
    975c:	78 e0       	ldi	r23, 0x08	; 8
    975e:	ce 01       	movw	r24, r28
    9760:	85 59       	subi	r24, 0x95	; 149
    9762:	9f 4f       	sbci	r25, 0xFF	; 255
    9764:	02 dc       	rcall	.-2044   	; 0x8f6a <mem_cmp>
    9766:	89 2b       	or	r24, r25
    9768:	89 f0       	breq	.+34     	; 0x978c <check_fs+0x70>
    976a:	45 e0       	ldi	r20, 0x05	; 5
    976c:	50 e0       	ldi	r21, 0x00	; 0
    976e:	61 e2       	ldi	r22, 0x21	; 33
    9770:	74 e0       	ldi	r23, 0x04	; 4
    9772:	ce 01       	movw	r24, r28
    9774:	89 57       	subi	r24, 0x79	; 121
    9776:	9f 4f       	sbci	r25, 0xFF	; 255
    9778:	f8 db       	rcall	.-2064   	; 0x8f6a <mem_cmp>
    977a:	89 2b       	or	r24, r25
    977c:	51 f4       	brne	.+20     	; 0x9792 <check_fs+0x76>
    977e:	06 c0       	rjmp	.+12     	; 0x978c <check_fs+0x70>
    9780:	84 e0       	ldi	r24, 0x04	; 4
    9782:	90 e0       	ldi	r25, 0x00	; 0
    9784:	08 c0       	rjmp	.+16     	; 0x9796 <check_fs+0x7a>
    9786:	83 e0       	ldi	r24, 0x03	; 3
    9788:	90 e0       	ldi	r25, 0x00	; 0
    978a:	05 c0       	rjmp	.+10     	; 0x9796 <check_fs+0x7a>
    978c:	80 e0       	ldi	r24, 0x00	; 0
    978e:	90 e0       	ldi	r25, 0x00	; 0
    9790:	02 c0       	rjmp	.+4      	; 0x9796 <check_fs+0x7a>
    9792:	82 e0       	ldi	r24, 0x02	; 2
    9794:	90 e0       	ldi	r25, 0x00	; 0
    9796:	df 91       	pop	r29
    9798:	cf 91       	pop	r28
    979a:	08 95       	ret

0000979c <mount_volume>:
    979c:	a0 e2       	ldi	r26, 0x20	; 32
    979e:	b0 e0       	ldi	r27, 0x00	; 0
    97a0:	e4 ed       	ldi	r30, 0xD4	; 212
    97a2:	fb e4       	ldi	r31, 0x4B	; 75
    97a4:	0c 94 bd e6 	jmp	0x1cd7a	; 0x1cd7a <__prologue_saves__+0x4>
    97a8:	5b 01       	movw	r10, r22
    97aa:	f4 2e       	mov	r15, r20
    97ac:	db 01       	movw	r26, r22
    97ae:	1d 92       	st	X+, r1
    97b0:	1c 92       	st	X, r1
    97b2:	5d dc       	rcall	.-1862   	; 0x906e <get_ldnumber>
    97b4:	6c 01       	movw	r12, r24
    97b6:	97 fd       	sbrc	r25, 7
    97b8:	39 c2       	rjmp	.+1138   	; 0x9c2c <mount_volume+0x490>
    97ba:	fc 01       	movw	r30, r24
    97bc:	ee 0f       	add	r30, r30
    97be:	ff 1f       	adc	r31, r31
    97c0:	ef 5d       	subi	r30, 0xDF	; 223
    97c2:	f7 4e       	sbci	r31, 0xE7	; 231
    97c4:	00 81       	ld	r16, Z
    97c6:	11 81       	ldd	r17, Z+1	; 0x01
    97c8:	01 15       	cp	r16, r1
    97ca:	11 05       	cpc	r17, r1
    97cc:	09 f4       	brne	.+2      	; 0x97d0 <mount_volume+0x34>
    97ce:	31 c2       	rjmp	.+1122   	; 0x9c32 <mount_volume+0x496>
    97d0:	f5 01       	movw	r30, r10
    97d2:	11 83       	std	Z+1, r17	; 0x01
    97d4:	00 83       	st	Z, r16
    97d6:	ff 2d       	mov	r31, r15
    97d8:	fe 7f       	andi	r31, 0xFE	; 254
    97da:	ff 2e       	mov	r15, r31
    97dc:	d8 01       	movw	r26, r16
    97de:	8c 91       	ld	r24, X
    97e0:	88 23       	and	r24, r24
    97e2:	71 f0       	breq	.+28     	; 0x9800 <mount_volume+0x64>
    97e4:	f8 01       	movw	r30, r16
    97e6:	81 81       	ldd	r24, Z+1	; 0x01
    97e8:	0e 94 79 69 	call	0xd2f2	; 0xd2f2 <disk_status>
    97ec:	80 fd       	sbrc	r24, 0
    97ee:	08 c0       	rjmp	.+16     	; 0x9800 <mount_volume+0x64>
    97f0:	ff 20       	and	r15, r15
    97f2:	09 f4       	brne	.+2      	; 0x97f6 <mount_volume+0x5a>
    97f4:	21 c2       	rjmp	.+1090   	; 0x9c38 <mount_volume+0x49c>
    97f6:	82 ff       	sbrs	r24, 2
    97f8:	1f c2       	rjmp	.+1086   	; 0x9c38 <mount_volume+0x49c>
    97fa:	8a e0       	ldi	r24, 0x0A	; 10
    97fc:	90 e0       	ldi	r25, 0x00	; 0
    97fe:	24 c2       	rjmp	.+1096   	; 0x9c48 <mount_volume+0x4ac>
    9800:	d8 01       	movw	r26, r16
    9802:	1c 92       	st	X, r1
    9804:	f8 01       	movw	r30, r16
    9806:	c1 82       	std	Z+1, r12	; 0x01
    9808:	8c 2d       	mov	r24, r12
    980a:	0e 94 7f 69 	call	0xd2fe	; 0xd2fe <disk_initialize>
    980e:	80 fd       	sbrc	r24, 0
    9810:	16 c2       	rjmp	.+1068   	; 0x9c3e <mount_volume+0x4a2>
    9812:	ff 20       	and	r15, r15
    9814:	11 f0       	breq	.+4      	; 0x981a <mount_volume+0x7e>
    9816:	82 fd       	sbrc	r24, 2
    9818:	f0 cf       	rjmp	.-32     	; 0x97fa <mount_volume+0x5e>
    981a:	40 e0       	ldi	r20, 0x00	; 0
    981c:	50 e0       	ldi	r21, 0x00	; 0
    981e:	ba 01       	movw	r22, r20
    9820:	c8 01       	movw	r24, r16
    9822:	7c df       	rcall	.-264    	; 0x971c <check_fs>
    9824:	82 30       	cpi	r24, 0x02	; 2
    9826:	91 05       	cpc	r25, r1
    9828:	b9 f5       	brne	.+110    	; 0x9898 <mount_volume+0xfc>
    982a:	68 01       	movw	r12, r16
    982c:	f5 e0       	ldi	r31, 0x05	; 5
    982e:	cf 1a       	sub	r12, r31
    9830:	fe ef       	ldi	r31, 0xFE	; 254
    9832:	df 0a       	sbc	r13, r31
    9834:	9e 01       	movw	r18, r28
    9836:	2f 5f       	subi	r18, 0xFF	; 255
    9838:	3f 4f       	sbci	r19, 0xFF	; 255
    983a:	79 01       	movw	r14, r18
    983c:	48 01       	movw	r8, r16
    983e:	35 ec       	ldi	r19, 0xC5	; 197
    9840:	83 1a       	sub	r8, r19
    9842:	3d ef       	ldi	r19, 0xFD	; 253
    9844:	93 0a       	sbc	r9, r19
    9846:	57 01       	movw	r10, r14
    9848:	c6 01       	movw	r24, r12
    984a:	6b db       	rcall	.-2346   	; 0x8f22 <ld_dword>
    984c:	d5 01       	movw	r26, r10
    984e:	6d 93       	st	X+, r22
    9850:	7d 93       	st	X+, r23
    9852:	8d 93       	st	X+, r24
    9854:	9d 93       	st	X+, r25
    9856:	5d 01       	movw	r10, r26
    9858:	b0 e1       	ldi	r27, 0x10	; 16
    985a:	cb 0e       	add	r12, r27
    985c:	d1 1c       	adc	r13, r1
    985e:	c8 14       	cp	r12, r8
    9860:	d9 04       	cpc	r13, r9
    9862:	91 f7       	brne	.-28     	; 0x9848 <mount_volume+0xac>
    9864:	6e 01       	movw	r12, r28
    9866:	e1 e1       	ldi	r30, 0x11	; 17
    9868:	ce 0e       	add	r12, r30
    986a:	d1 1c       	adc	r13, r1
    986c:	d7 01       	movw	r26, r14
    986e:	4d 91       	ld	r20, X+
    9870:	5d 91       	ld	r21, X+
    9872:	6d 91       	ld	r22, X+
    9874:	7d 91       	ld	r23, X+
    9876:	7d 01       	movw	r14, r26
    9878:	41 15       	cp	r20, r1
    987a:	51 05       	cpc	r21, r1
    987c:	61 05       	cpc	r22, r1
    987e:	71 05       	cpc	r23, r1
    9880:	31 f0       	breq	.+12     	; 0x988e <mount_volume+0xf2>
    9882:	c8 01       	movw	r24, r16
    9884:	4b df       	rcall	.-362    	; 0x971c <check_fs>
    9886:	82 30       	cpi	r24, 0x02	; 2
    9888:	91 05       	cpc	r25, r1
    988a:	18 f4       	brcc	.+6      	; 0x9892 <mount_volume+0xf6>
    988c:	05 c0       	rjmp	.+10     	; 0x9898 <mount_volume+0xfc>
    988e:	83 e0       	ldi	r24, 0x03	; 3
    9890:	90 e0       	ldi	r25, 0x00	; 0
    9892:	ce 14       	cp	r12, r14
    9894:	df 04       	cpc	r13, r15
    9896:	51 f7       	brne	.-44     	; 0x986c <mount_volume+0xd0>
    9898:	84 30       	cpi	r24, 0x04	; 4
    989a:	91 05       	cpc	r25, r1
    989c:	09 f4       	brne	.+2      	; 0x98a0 <mount_volume+0x104>
    989e:	d2 c1       	rjmp	.+932    	; 0x9c44 <mount_volume+0x4a8>
    98a0:	02 97       	sbiw	r24, 0x02	; 2
    98a2:	18 f0       	brcs	.+6      	; 0x98aa <mount_volume+0x10e>
    98a4:	8d e0       	ldi	r24, 0x0D	; 13
    98a6:	90 e0       	ldi	r25, 0x00	; 0
    98a8:	cf c1       	rjmp	.+926    	; 0x9c48 <mount_volume+0x4ac>
    98aa:	f8 01       	movw	r30, r16
    98ac:	e0 5c       	subi	r30, 0xC0	; 192
    98ae:	ff 4f       	sbci	r31, 0xFF	; 255
    98b0:	80 81       	ld	r24, Z
    98b2:	91 81       	ldd	r25, Z+1	; 0x01
    98b4:	81 15       	cp	r24, r1
    98b6:	92 40       	sbci	r25, 0x02	; 2
    98b8:	a9 f7       	brne	.-22     	; 0x98a4 <mount_volume+0x108>
    98ba:	3b 96       	adiw	r30, 0x0b	; 11
    98bc:	40 80       	ld	r4, Z
    98be:	51 80       	ldd	r5, Z+1	; 0x01
    98c0:	41 14       	cp	r4, r1
    98c2:	51 04       	cpc	r5, r1
    98c4:	19 f0       	breq	.+6      	; 0x98cc <mount_volume+0x130>
    98c6:	61 2c       	mov	r6, r1
    98c8:	71 2c       	mov	r7, r1
    98ca:	06 c0       	rjmp	.+12     	; 0x98d8 <mount_volume+0x13c>
    98cc:	c8 01       	movw	r24, r16
    98ce:	87 5a       	subi	r24, 0xA7	; 167
    98d0:	9f 4f       	sbci	r25, 0xFF	; 255
    98d2:	27 db       	rcall	.-2482   	; 0x8f22 <ld_dword>
    98d4:	2b 01       	movw	r4, r22
    98d6:	3c 01       	movw	r6, r24
    98d8:	f8 01       	movw	r30, r16
    98da:	21 a9       	ldd	r18, Z+49	; 0x31
    98dc:	32 a9       	ldd	r19, Z+50	; 0x32
    98de:	43 a9       	ldd	r20, Z+51	; 0x33
    98e0:	54 a9       	ldd	r21, Z+52	; 0x34
    98e2:	29 8b       	std	Y+17, r18	; 0x11
    98e4:	3a 8b       	std	Y+18, r19	; 0x12
    98e6:	4b 8b       	std	Y+19, r20	; 0x13
    98e8:	5c 8b       	std	Y+20, r21	; 0x14
    98ea:	45 8e       	std	Z+29, r4	; 0x1d
    98ec:	56 8e       	std	Z+30, r5	; 0x1e
    98ee:	67 8e       	std	Z+31, r6	; 0x1f
    98f0:	70 a2       	std	Z+32, r7	; 0x20
    98f2:	eb 5b       	subi	r30, 0xBB	; 187
    98f4:	ff 4f       	sbci	r31, 0xFF	; 255
    98f6:	a0 80       	ld	r10, Z
    98f8:	f8 01       	movw	r30, r16
    98fa:	a2 82       	std	Z+2, r10	; 0x02
    98fc:	8f ef       	ldi	r24, 0xFF	; 255
    98fe:	8a 0d       	add	r24, r10
    9900:	82 30       	cpi	r24, 0x02	; 2
    9902:	80 f6       	brcc	.-96     	; 0x98a4 <mount_volume+0x108>
    9904:	ee 5b       	subi	r30, 0xBE	; 190
    9906:	ff 4f       	sbci	r31, 0xFF	; 255
    9908:	b0 80       	ld	r11, Z
    990a:	8b 2d       	mov	r24, r11
    990c:	90 e0       	ldi	r25, 0x00	; 0
    990e:	f8 01       	movw	r30, r16
    9910:	92 87       	std	Z+10, r25	; 0x0a
    9912:	81 87       	std	Z+9, r24	; 0x09
    9914:	00 97       	sbiw	r24, 0x00	; 0
    9916:	31 f2       	breq	.-116    	; 0x98a4 <mount_volume+0x108>
    9918:	9c 01       	movw	r18, r24
    991a:	21 50       	subi	r18, 0x01	; 1
    991c:	31 09       	sbc	r19, r1
    991e:	82 23       	and	r24, r18
    9920:	93 23       	and	r25, r19
    9922:	89 2b       	or	r24, r25
    9924:	09 f0       	breq	.+2      	; 0x9928 <mount_volume+0x18c>
    9926:	be cf       	rjmp	.-132    	; 0x98a4 <mount_volume+0x108>
    9928:	ea 5b       	subi	r30, 0xBA	; 186
    992a:	ff 4f       	sbci	r31, 0xFF	; 255
    992c:	80 80       	ld	r8, Z
    992e:	91 80       	ldd	r9, Z+1	; 0x01
    9930:	f8 01       	movw	r30, r16
    9932:	90 86       	std	Z+8, r9	; 0x08
    9934:	87 82       	std	Z+7, r8	; 0x07
    9936:	c4 01       	movw	r24, r8
    9938:	8f 70       	andi	r24, 0x0F	; 15
    993a:	99 27       	eor	r25, r25
    993c:	89 2b       	or	r24, r25
    993e:	09 f0       	breq	.+2      	; 0x9942 <mount_volume+0x1a6>
    9940:	b1 cf       	rjmp	.-158    	; 0x98a4 <mount_volume+0x108>
    9942:	e8 5b       	subi	r30, 0xB8	; 184
    9944:	ff 4f       	sbci	r31, 0xFF	; 255
    9946:	80 81       	ld	r24, Z
    9948:	91 81       	ldd	r25, Z+1	; 0x01
    994a:	6c 01       	movw	r12, r24
    994c:	e1 2c       	mov	r14, r1
    994e:	f1 2c       	mov	r15, r1
    9950:	89 2b       	or	r24, r25
    9952:	31 f4       	brne	.+12     	; 0x9960 <mount_volume+0x1c4>
    9954:	c8 01       	movw	r24, r16
    9956:	8b 5a       	subi	r24, 0xAB	; 171
    9958:	9f 4f       	sbci	r25, 0xFF	; 255
    995a:	e3 da       	rcall	.-2618   	; 0x8f22 <ld_dword>
    995c:	6b 01       	movw	r12, r22
    995e:	7c 01       	movw	r14, r24
    9960:	f8 01       	movw	r30, r16
    9962:	ed 5b       	subi	r30, 0xBD	; 189
    9964:	ff 4f       	sbci	r31, 0xFF	; 255
    9966:	01 90       	ld	r0, Z+
    9968:	f0 81       	ld	r31, Z
    996a:	e0 2d       	mov	r30, r0
    996c:	30 97       	sbiw	r30, 0x00	; 0
    996e:	09 f4       	brne	.+2      	; 0x9972 <mount_volume+0x1d6>
    9970:	99 cf       	rjmp	.-206    	; 0x98a4 <mount_volume+0x108>
    9972:	aa 2d       	mov	r26, r10
    9974:	b0 e0       	ldi	r27, 0x00	; 0
    9976:	a3 01       	movw	r20, r6
    9978:	92 01       	movw	r18, r4
    997a:	0e 94 9b e6 	call	0x1cd36	; 0x1cd36 <__muluhisi3>
    997e:	69 8f       	std	Y+25, r22	; 0x19
    9980:	7a 8f       	std	Y+26, r23	; 0x1a
    9982:	8b 8f       	std	Y+27, r24	; 0x1b
    9984:	9c 8f       	std	Y+28, r25	; 0x1c
    9986:	9f 01       	movw	r18, r30
    9988:	40 e0       	ldi	r20, 0x00	; 0
    998a:	50 e0       	ldi	r21, 0x00	; 0
    998c:	2d 8f       	std	Y+29, r18	; 0x1d
    998e:	3e 8f       	std	Y+30, r19	; 0x1e
    9990:	4f 8f       	std	Y+31, r20	; 0x1f
    9992:	58 a3       	std	Y+32, r21	; 0x20
    9994:	c4 01       	movw	r24, r8
    9996:	f4 e0       	ldi	r31, 0x04	; 4
    9998:	96 95       	lsr	r25
    999a:	87 95       	ror	r24
    999c:	fa 95       	dec	r31
    999e:	e1 f7       	brne	.-8      	; 0x9998 <mount_volume+0x1fc>
    99a0:	28 0f       	add	r18, r24
    99a2:	39 1f       	adc	r19, r25
    99a4:	41 1d       	adc	r20, r1
    99a6:	51 1d       	adc	r21, r1
    99a8:	da 01       	movw	r26, r20
    99aa:	c9 01       	movw	r24, r18
    99ac:	29 8d       	ldd	r18, Y+25	; 0x19
    99ae:	3a 8d       	ldd	r19, Y+26	; 0x1a
    99b0:	4b 8d       	ldd	r20, Y+27	; 0x1b
    99b2:	5c 8d       	ldd	r21, Y+28	; 0x1c
    99b4:	28 0f       	add	r18, r24
    99b6:	39 1f       	adc	r19, r25
    99b8:	4a 1f       	adc	r20, r26
    99ba:	5b 1f       	adc	r21, r27
    99bc:	2d 8b       	std	Y+21, r18	; 0x15
    99be:	3e 8b       	std	Y+22, r19	; 0x16
    99c0:	4f 8b       	std	Y+23, r20	; 0x17
    99c2:	58 8f       	std	Y+24, r21	; 0x18
    99c4:	c2 16       	cp	r12, r18
    99c6:	d3 06       	cpc	r13, r19
    99c8:	e4 06       	cpc	r14, r20
    99ca:	f5 06       	cpc	r15, r21
    99cc:	08 f4       	brcc	.+2      	; 0x99d0 <mount_volume+0x234>
    99ce:	6a cf       	rjmp	.-300    	; 0x98a4 <mount_volume+0x108>
    99d0:	c7 01       	movw	r24, r14
    99d2:	b6 01       	movw	r22, r12
    99d4:	62 1b       	sub	r22, r18
    99d6:	73 0b       	sbc	r23, r19
    99d8:	84 0b       	sbc	r24, r20
    99da:	95 0b       	sbc	r25, r21
    99dc:	2b 2d       	mov	r18, r11
    99de:	30 e0       	ldi	r19, 0x00	; 0
    99e0:	40 e0       	ldi	r20, 0x00	; 0
    99e2:	50 e0       	ldi	r21, 0x00	; 0
    99e4:	0e 94 4e e6 	call	0x1cc9c	; 0x1cc9c <__udivmodsi4>
    99e8:	da 01       	movw	r26, r20
    99ea:	c9 01       	movw	r24, r18
    99ec:	01 97       	sbiw	r24, 0x01	; 1
    99ee:	a1 09       	sbc	r26, r1
    99f0:	b1 09       	sbc	r27, r1
    99f2:	85 3f       	cpi	r24, 0xF5	; 245
    99f4:	9f 4f       	sbci	r25, 0xFF	; 255
    99f6:	af 4f       	sbci	r26, 0xFF	; 255
    99f8:	bf 40       	sbci	r27, 0x0F	; 15
    99fa:	08 f0       	brcs	.+2      	; 0x99fe <mount_volume+0x262>
    99fc:	53 cf       	rjmp	.-346    	; 0x98a4 <mount_volume+0x108>
    99fe:	26 3f       	cpi	r18, 0xF6	; 246
    9a00:	8f ef       	ldi	r24, 0xFF	; 255
    9a02:	38 07       	cpc	r19, r24
    9a04:	41 05       	cpc	r20, r1
    9a06:	51 05       	cpc	r21, r1
    9a08:	50 f4       	brcc	.+20     	; 0x9a1e <mount_volume+0x282>
    9a0a:	26 3f       	cpi	r18, 0xF6	; 246
    9a0c:	9f e0       	ldi	r25, 0x0F	; 15
    9a0e:	39 07       	cpc	r19, r25
    9a10:	41 05       	cpc	r20, r1
    9a12:	51 05       	cpc	r21, r1
    9a14:	40 f4       	brcc	.+16     	; 0x9a26 <mount_volume+0x28a>
    9a16:	aa 24       	eor	r10, r10
    9a18:	a3 94       	inc	r10
    9a1a:	b1 2c       	mov	r11, r1
    9a1c:	07 c0       	rjmp	.+14     	; 0x9a2c <mount_volume+0x290>
    9a1e:	73 e0       	ldi	r23, 0x03	; 3
    9a20:	a7 2e       	mov	r10, r23
    9a22:	b1 2c       	mov	r11, r1
    9a24:	03 c0       	rjmp	.+6      	; 0x9a2c <mount_volume+0x290>
    9a26:	62 e0       	ldi	r22, 0x02	; 2
    9a28:	a6 2e       	mov	r10, r22
    9a2a:	b1 2c       	mov	r11, r1
    9a2c:	69 01       	movw	r12, r18
    9a2e:	7a 01       	movw	r14, r20
    9a30:	a2 e0       	ldi	r26, 0x02	; 2
    9a32:	ca 0e       	add	r12, r26
    9a34:	d1 1c       	adc	r13, r1
    9a36:	e1 1c       	adc	r14, r1
    9a38:	f1 1c       	adc	r15, r1
    9a3a:	f8 01       	movw	r30, r16
    9a3c:	c1 8e       	std	Z+25, r12	; 0x19
    9a3e:	d2 8e       	std	Z+26, r13	; 0x1a
    9a40:	e3 8e       	std	Z+27, r14	; 0x1b
    9a42:	f4 8e       	std	Z+28, r15	; 0x1c
    9a44:	29 89       	ldd	r18, Y+17	; 0x11
    9a46:	3a 89       	ldd	r19, Y+18	; 0x12
    9a48:	4b 89       	ldd	r20, Y+19	; 0x13
    9a4a:	5c 89       	ldd	r21, Y+20	; 0x14
    9a4c:	21 a3       	std	Z+33, r18	; 0x21
    9a4e:	32 a3       	std	Z+34, r19	; 0x22
    9a50:	43 a3       	std	Z+35, r20	; 0x23
    9a52:	54 a3       	std	Z+36, r21	; 0x24
    9a54:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9a56:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9a58:	af 8d       	ldd	r26, Y+31	; 0x1f
    9a5a:	b8 a1       	ldd	r27, Y+32	; 0x20
    9a5c:	28 0f       	add	r18, r24
    9a5e:	39 1f       	adc	r19, r25
    9a60:	4a 1f       	adc	r20, r26
    9a62:	5b 1f       	adc	r21, r27
    9a64:	2d 8f       	std	Y+29, r18	; 0x1d
    9a66:	3e 8f       	std	Y+30, r19	; 0x1e
    9a68:	4f 8f       	std	Y+31, r20	; 0x1f
    9a6a:	58 a3       	std	Y+32, r21	; 0x20
    9a6c:	25 a3       	std	Z+37, r18	; 0x25
    9a6e:	36 a3       	std	Z+38, r19	; 0x26
    9a70:	47 a3       	std	Z+39, r20	; 0x27
    9a72:	50 a7       	std	Z+40, r21	; 0x28
    9a74:	49 89       	ldd	r20, Y+17	; 0x11
    9a76:	5a 89       	ldd	r21, Y+18	; 0x12
    9a78:	6b 89       	ldd	r22, Y+19	; 0x13
    9a7a:	7c 89       	ldd	r23, Y+20	; 0x14
    9a7c:	8d 89       	ldd	r24, Y+21	; 0x15
    9a7e:	9e 89       	ldd	r25, Y+22	; 0x16
    9a80:	af 89       	ldd	r26, Y+23	; 0x17
    9a82:	b8 8d       	ldd	r27, Y+24	; 0x18
    9a84:	48 0f       	add	r20, r24
    9a86:	59 1f       	adc	r21, r25
    9a88:	6a 1f       	adc	r22, r26
    9a8a:	7b 1f       	adc	r23, r27
    9a8c:	45 a7       	std	Z+45, r20	; 0x2d
    9a8e:	56 a7       	std	Z+46, r21	; 0x2e
    9a90:	67 a7       	std	Z+47, r22	; 0x2f
    9a92:	70 ab       	std	Z+48, r23	; 0x30
    9a94:	f3 e0       	ldi	r31, 0x03	; 3
    9a96:	af 16       	cp	r10, r31
    9a98:	b1 04       	cpc	r11, r1
    9a9a:	e9 f4       	brne	.+58     	; 0x9ad6 <mount_volume+0x33a>
    9a9c:	f8 01       	movw	r30, r16
    9a9e:	e1 5a       	subi	r30, 0xA1	; 161
    9aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    9aa2:	80 81       	ld	r24, Z
    9aa4:	91 81       	ldd	r25, Z+1	; 0x01
    9aa6:	89 2b       	or	r24, r25
    9aa8:	09 f0       	breq	.+2      	; 0x9aac <mount_volume+0x310>
    9aaa:	fc ce       	rjmp	.-520    	; 0x98a4 <mount_volume+0x108>
    9aac:	81 14       	cp	r8, r1
    9aae:	91 04       	cpc	r9, r1
    9ab0:	09 f0       	breq	.+2      	; 0x9ab4 <mount_volume+0x318>
    9ab2:	f8 ce       	rjmp	.-528    	; 0x98a4 <mount_volume+0x108>
    9ab4:	c8 01       	movw	r24, r16
    9ab6:	8f 59       	subi	r24, 0x9F	; 159
    9ab8:	9f 4f       	sbci	r25, 0xFF	; 255
    9aba:	33 da       	rcall	.-2970   	; 0x8f22 <ld_dword>
    9abc:	f8 01       	movw	r30, r16
    9abe:	61 a7       	std	Z+41, r22	; 0x29
    9ac0:	72 a7       	std	Z+42, r23	; 0x2a
    9ac2:	83 a7       	std	Z+43, r24	; 0x2b
    9ac4:	94 a7       	std	Z+44, r25	; 0x2c
    9ac6:	42 e0       	ldi	r20, 0x02	; 2
    9ac8:	cc 0c       	add	r12, r12
    9aca:	dd 1c       	adc	r13, r13
    9acc:	ee 1c       	adc	r14, r14
    9ace:	ff 1c       	adc	r15, r15
    9ad0:	4a 95       	dec	r20
    9ad2:	d1 f7       	brne	.-12     	; 0x9ac8 <mount_volume+0x32c>
    9ad4:	33 c0       	rjmp	.+102    	; 0x9b3c <mount_volume+0x3a0>
    9ad6:	81 14       	cp	r8, r1
    9ad8:	91 04       	cpc	r9, r1
    9ada:	09 f4       	brne	.+2      	; 0x9ade <mount_volume+0x342>
    9adc:	e3 ce       	rjmp	.-570    	; 0x98a4 <mount_volume+0x108>
    9ade:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9ae0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9ae2:	af 8d       	ldd	r26, Y+31	; 0x1f
    9ae4:	b8 a1       	ldd	r27, Y+32	; 0x20
    9ae6:	29 8d       	ldd	r18, Y+25	; 0x19
    9ae8:	3a 8d       	ldd	r19, Y+26	; 0x1a
    9aea:	4b 8d       	ldd	r20, Y+27	; 0x1b
    9aec:	5c 8d       	ldd	r21, Y+28	; 0x1c
    9aee:	82 0f       	add	r24, r18
    9af0:	93 1f       	adc	r25, r19
    9af2:	a4 1f       	adc	r26, r20
    9af4:	b5 1f       	adc	r27, r21
    9af6:	f8 01       	movw	r30, r16
    9af8:	81 a7       	std	Z+41, r24	; 0x29
    9afa:	92 a7       	std	Z+42, r25	; 0x2a
    9afc:	a3 a7       	std	Z+43, r26	; 0x2b
    9afe:	b4 a7       	std	Z+44, r27	; 0x2c
    9b00:	f2 e0       	ldi	r31, 0x02	; 2
    9b02:	af 16       	cp	r10, r31
    9b04:	b1 04       	cpc	r11, r1
    9b06:	29 f4       	brne	.+10     	; 0x9b12 <mount_volume+0x376>
    9b08:	cc 0c       	add	r12, r12
    9b0a:	dd 1c       	adc	r13, r13
    9b0c:	ee 1c       	adc	r14, r14
    9b0e:	ff 1c       	adc	r15, r15
    9b10:	15 c0       	rjmp	.+42     	; 0x9b3c <mount_volume+0x3a0>
    9b12:	a3 e0       	ldi	r26, 0x03	; 3
    9b14:	b0 e0       	ldi	r27, 0x00	; 0
    9b16:	a7 01       	movw	r20, r14
    9b18:	96 01       	movw	r18, r12
    9b1a:	0e 94 9b e6 	call	0x1cd36	; 0x1cd36 <__muluhisi3>
    9b1e:	dc 01       	movw	r26, r24
    9b20:	cb 01       	movw	r24, r22
    9b22:	b6 95       	lsr	r27
    9b24:	a7 95       	ror	r26
    9b26:	97 95       	ror	r25
    9b28:	87 95       	ror	r24
    9b2a:	21 e0       	ldi	r18, 0x01	; 1
    9b2c:	c2 22       	and	r12, r18
    9b2e:	dd 24       	eor	r13, r13
    9b30:	ee 24       	eor	r14, r14
    9b32:	ff 24       	eor	r15, r15
    9b34:	c8 0e       	add	r12, r24
    9b36:	d9 1e       	adc	r13, r25
    9b38:	ea 1e       	adc	r14, r26
    9b3a:	fb 1e       	adc	r15, r27
    9b3c:	3f ef       	ldi	r19, 0xFF	; 255
    9b3e:	c3 0e       	add	r12, r19
    9b40:	31 e0       	ldi	r19, 0x01	; 1
    9b42:	d3 1e       	adc	r13, r19
    9b44:	e1 1c       	adc	r14, r1
    9b46:	f1 1c       	adc	r15, r1
    9b48:	89 e0       	ldi	r24, 0x09	; 9
    9b4a:	f6 94       	lsr	r15
    9b4c:	e7 94       	ror	r14
    9b4e:	d7 94       	ror	r13
    9b50:	c7 94       	ror	r12
    9b52:	8a 95       	dec	r24
    9b54:	d1 f7       	brne	.-12     	; 0x9b4a <mount_volume+0x3ae>
    9b56:	4c 14       	cp	r4, r12
    9b58:	5d 04       	cpc	r5, r13
    9b5a:	6e 04       	cpc	r6, r14
    9b5c:	7f 04       	cpc	r7, r15
    9b5e:	08 f4       	brcc	.+2      	; 0x9b62 <mount_volume+0x3c6>
    9b60:	a1 ce       	rjmp	.-702    	; 0x98a4 <mount_volume+0x108>
    9b62:	8f ef       	ldi	r24, 0xFF	; 255
    9b64:	9f ef       	ldi	r25, 0xFF	; 255
    9b66:	dc 01       	movw	r26, r24
    9b68:	f8 01       	movw	r30, r16
    9b6a:	81 8b       	std	Z+17, r24	; 0x11
    9b6c:	92 8b       	std	Z+18, r25	; 0x12
    9b6e:	a3 8b       	std	Z+19, r26	; 0x13
    9b70:	b4 8b       	std	Z+20, r27	; 0x14
    9b72:	85 87       	std	Z+13, r24	; 0x0d
    9b74:	96 87       	std	Z+14, r25	; 0x0e
    9b76:	a7 87       	std	Z+15, r26	; 0x0f
    9b78:	b0 8b       	std	Z+16, r27	; 0x10
    9b7a:	80 e8       	ldi	r24, 0x80	; 128
    9b7c:	84 83       	std	Z+4, r24	; 0x04
    9b7e:	f3 e0       	ldi	r31, 0x03	; 3
    9b80:	af 16       	cp	r10, r31
    9b82:	b1 04       	cpc	r11, r1
    9b84:	09 f0       	breq	.+2      	; 0x9b88 <mount_volume+0x3ec>
    9b86:	3f c0       	rjmp	.+126    	; 0x9c06 <mount_volume+0x46a>
    9b88:	f8 01       	movw	r30, r16
    9b8a:	eb 59       	subi	r30, 0x9B	; 155
    9b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    9b8e:	80 81       	ld	r24, Z
    9b90:	91 81       	ldd	r25, Z+1	; 0x01
    9b92:	01 97       	sbiw	r24, 0x01	; 1
    9b94:	c1 f5       	brne	.+112    	; 0x9c06 <mount_volume+0x46a>
    9b96:	49 89       	ldd	r20, Y+17	; 0x11
    9b98:	5a 89       	ldd	r21, Y+18	; 0x12
    9b9a:	6b 89       	ldd	r22, Y+19	; 0x13
    9b9c:	7c 89       	ldd	r23, Y+20	; 0x14
    9b9e:	4f 5f       	subi	r20, 0xFF	; 255
    9ba0:	5f 4f       	sbci	r21, 0xFF	; 255
    9ba2:	6f 4f       	sbci	r22, 0xFF	; 255
    9ba4:	7f 4f       	sbci	r23, 0xFF	; 255
    9ba6:	c8 01       	movw	r24, r16
    9ba8:	7e dd       	rcall	.-1284   	; 0x96a6 <move_window>
    9baa:	89 2b       	or	r24, r25
    9bac:	61 f5       	brne	.+88     	; 0x9c06 <mount_volume+0x46a>
    9bae:	f8 01       	movw	r30, r16
    9bb0:	14 82       	std	Z+4, r1	; 0x04
    9bb2:	ed 5c       	subi	r30, 0xCD	; 205
    9bb4:	fd 4f       	sbci	r31, 0xFD	; 253
    9bb6:	80 81       	ld	r24, Z
    9bb8:	91 81       	ldd	r25, Z+1	; 0x01
    9bba:	85 35       	cpi	r24, 0x55	; 85
    9bbc:	9a 4a       	sbci	r25, 0xAA	; 170
    9bbe:	19 f5       	brne	.+70     	; 0x9c06 <mount_volume+0x46a>
    9bc0:	c8 01       	movw	r24, r16
    9bc2:	c5 96       	adiw	r24, 0x35	; 53
    9bc4:	ae d9       	rcall	.-3236   	; 0x8f22 <ld_dword>
    9bc6:	62 35       	cpi	r22, 0x52	; 82
    9bc8:	72 45       	sbci	r23, 0x52	; 82
    9bca:	81 46       	sbci	r24, 0x61	; 97
    9bcc:	91 44       	sbci	r25, 0x41	; 65
    9bce:	d9 f4       	brne	.+54     	; 0x9c06 <mount_volume+0x46a>
    9bd0:	c8 01       	movw	r24, r16
    9bd2:	87 5e       	subi	r24, 0xE7	; 231
    9bd4:	9d 4f       	sbci	r25, 0xFD	; 253
    9bd6:	a5 d9       	rcall	.-3254   	; 0x8f22 <ld_dword>
    9bd8:	62 37       	cpi	r22, 0x72	; 114
    9bda:	72 47       	sbci	r23, 0x72	; 114
    9bdc:	81 44       	sbci	r24, 0x41	; 65
    9bde:	91 46       	sbci	r25, 0x61	; 97
    9be0:	91 f4       	brne	.+36     	; 0x9c06 <mount_volume+0x46a>
    9be2:	c8 01       	movw	r24, r16
    9be4:	83 5e       	subi	r24, 0xE3	; 227
    9be6:	9d 4f       	sbci	r25, 0xFD	; 253
    9be8:	9c d9       	rcall	.-3272   	; 0x8f22 <ld_dword>
    9bea:	f8 01       	movw	r30, r16
    9bec:	61 8b       	std	Z+17, r22	; 0x11
    9bee:	72 8b       	std	Z+18, r23	; 0x12
    9bf0:	83 8b       	std	Z+19, r24	; 0x13
    9bf2:	94 8b       	std	Z+20, r25	; 0x14
    9bf4:	c8 01       	movw	r24, r16
    9bf6:	8f 5d       	subi	r24, 0xDF	; 223
    9bf8:	9d 4f       	sbci	r25, 0xFD	; 253
    9bfa:	93 d9       	rcall	.-3290   	; 0x8f22 <ld_dword>
    9bfc:	f8 01       	movw	r30, r16
    9bfe:	65 87       	std	Z+13, r22	; 0x0d
    9c00:	76 87       	std	Z+14, r23	; 0x0e
    9c02:	87 87       	std	Z+15, r24	; 0x0f
    9c04:	90 8b       	std	Z+16, r25	; 0x10
    9c06:	d8 01       	movw	r26, r16
    9c08:	ac 92       	st	X, r10
    9c0a:	80 91 1f 18 	lds	r24, 0x181F	; 0x80181f <Fsid>
    9c0e:	90 91 20 18 	lds	r25, 0x1820	; 0x801820 <Fsid+0x1>
    9c12:	01 96       	adiw	r24, 0x01	; 1
    9c14:	90 93 20 18 	sts	0x1820, r25	; 0x801820 <Fsid+0x1>
    9c18:	80 93 1f 18 	sts	0x181F, r24	; 0x80181f <Fsid>
    9c1c:	f8 01       	movw	r30, r16
    9c1e:	96 83       	std	Z+6, r25	; 0x06
    9c20:	85 83       	std	Z+5, r24	; 0x05
    9c22:	15 8a       	std	Z+21, r1	; 0x15
    9c24:	16 8a       	std	Z+22, r1	; 0x16
    9c26:	17 8a       	std	Z+23, r1	; 0x17
    9c28:	10 8e       	std	Z+24, r1	; 0x18
    9c2a:	06 c0       	rjmp	.+12     	; 0x9c38 <mount_volume+0x49c>
    9c2c:	8b e0       	ldi	r24, 0x0B	; 11
    9c2e:	90 e0       	ldi	r25, 0x00	; 0
    9c30:	0b c0       	rjmp	.+22     	; 0x9c48 <mount_volume+0x4ac>
    9c32:	8c e0       	ldi	r24, 0x0C	; 12
    9c34:	90 e0       	ldi	r25, 0x00	; 0
    9c36:	08 c0       	rjmp	.+16     	; 0x9c48 <mount_volume+0x4ac>
    9c38:	80 e0       	ldi	r24, 0x00	; 0
    9c3a:	90 e0       	ldi	r25, 0x00	; 0
    9c3c:	05 c0       	rjmp	.+10     	; 0x9c48 <mount_volume+0x4ac>
    9c3e:	83 e0       	ldi	r24, 0x03	; 3
    9c40:	90 e0       	ldi	r25, 0x00	; 0
    9c42:	02 c0       	rjmp	.+4      	; 0x9c48 <mount_volume+0x4ac>
    9c44:	81 e0       	ldi	r24, 0x01	; 1
    9c46:	90 e0       	ldi	r25, 0x00	; 0
    9c48:	a0 96       	adiw	r28, 0x20	; 32
    9c4a:	e0 e1       	ldi	r30, 0x10	; 16
    9c4c:	0c 94 d9 e6 	jmp	0x1cdb2	; 0x1cdb2 <__epilogue_restores__+0x4>

00009c50 <put_fat>:
    9c50:	a6 e0       	ldi	r26, 0x06	; 6
    9c52:	b0 e0       	ldi	r27, 0x00	; 0
    9c54:	ee e2       	ldi	r30, 0x2E	; 46
    9c56:	fe e4       	ldi	r31, 0x4E	; 78
    9c58:	0c 94 bb e6 	jmp	0x1cd76	; 0x1cd76 <__prologue_saves__>
    9c5c:	42 30       	cpi	r20, 0x02	; 2
    9c5e:	51 05       	cpc	r21, r1
    9c60:	61 05       	cpc	r22, r1
    9c62:	71 05       	cpc	r23, r1
    9c64:	08 f4       	brcc	.+2      	; 0x9c68 <put_fat+0x18>
    9c66:	e5 c0       	rjmp	.+458    	; 0x9e32 <put_fat+0x1e2>
    9c68:	fc 01       	movw	r30, r24
    9c6a:	c1 8c       	ldd	r12, Z+25	; 0x19
    9c6c:	d2 8c       	ldd	r13, Z+26	; 0x1a
    9c6e:	e3 8c       	ldd	r14, Z+27	; 0x1b
    9c70:	f4 8c       	ldd	r15, Z+28	; 0x1c
    9c72:	4c 15       	cp	r20, r12
    9c74:	5d 05       	cpc	r21, r13
    9c76:	6e 05       	cpc	r22, r14
    9c78:	7f 05       	cpc	r23, r15
    9c7a:	08 f0       	brcs	.+2      	; 0x9c7e <put_fat+0x2e>
    9c7c:	da c0       	rjmp	.+436    	; 0x9e32 <put_fat+0x1e2>
    9c7e:	28 01       	movw	r4, r16
    9c80:	39 01       	movw	r6, r18
    9c82:	6a 01       	movw	r12, r20
    9c84:	7b 01       	movw	r14, r22
    9c86:	9e 83       	std	Y+6, r25	; 0x06
    9c88:	8d 83       	std	Y+5, r24	; 0x05
    9c8a:	80 81       	ld	r24, Z
    9c8c:	82 30       	cpi	r24, 0x02	; 2
    9c8e:	09 f4       	brne	.+2      	; 0x9c92 <put_fat+0x42>
    9c90:	73 c0       	rjmp	.+230    	; 0x9d78 <put_fat+0x128>
    9c92:	83 30       	cpi	r24, 0x03	; 3
    9c94:	09 f4       	brne	.+2      	; 0x9c98 <put_fat+0x48>
    9c96:	92 c0       	rjmp	.+292    	; 0x9dbc <put_fat+0x16c>
    9c98:	81 30       	cpi	r24, 0x01	; 1
    9c9a:	09 f0       	breq	.+2      	; 0x9c9e <put_fat+0x4e>
    9c9c:	ca c0       	rjmp	.+404    	; 0x9e32 <put_fat+0x1e2>
    9c9e:	4a 01       	movw	r8, r20
    9ca0:	96 94       	lsr	r9
    9ca2:	87 94       	ror	r8
    9ca4:	84 0e       	add	r8, r20
    9ca6:	95 1e       	adc	r9, r21
    9ca8:	c4 01       	movw	r24, r8
    9caa:	89 2f       	mov	r24, r25
    9cac:	99 27       	eor	r25, r25
    9cae:	86 95       	lsr	r24
    9cb0:	45 a1       	ldd	r20, Z+37	; 0x25
    9cb2:	56 a1       	ldd	r21, Z+38	; 0x26
    9cb4:	67 a1       	ldd	r22, Z+39	; 0x27
    9cb6:	70 a5       	ldd	r23, Z+40	; 0x28
    9cb8:	48 0f       	add	r20, r24
    9cba:	59 1f       	adc	r21, r25
    9cbc:	61 1d       	adc	r22, r1
    9cbe:	71 1d       	adc	r23, r1
    9cc0:	cf 01       	movw	r24, r30
    9cc2:	f1 dc       	rcall	.-1566   	; 0x96a6 <move_window>
    9cc4:	5c 01       	movw	r10, r24
    9cc6:	89 2b       	or	r24, r25
    9cc8:	09 f0       	breq	.+2      	; 0x9ccc <put_fat+0x7c>
    9cca:	b6 c0       	rjmp	.+364    	; 0x9e38 <put_fat+0x1e8>
    9ccc:	2d 80       	ldd	r2, Y+5	; 0x05
    9cce:	3e 80       	ldd	r3, Y+6	; 0x06
    9cd0:	f5 e3       	ldi	r31, 0x35	; 53
    9cd2:	2f 0e       	add	r2, r31
    9cd4:	31 1c       	adc	r3, r1
    9cd6:	84 01       	movw	r16, r8
    9cd8:	0f 5f       	subi	r16, 0xFF	; 255
    9cda:	1f 4f       	sbci	r17, 0xFF	; 255
    9cdc:	21 e0       	ldi	r18, 0x01	; 1
    9cde:	92 22       	and	r9, r18
    9ce0:	f1 01       	movw	r30, r2
    9ce2:	e8 0d       	add	r30, r8
    9ce4:	f9 1d       	adc	r31, r9
    9ce6:	d7 01       	movw	r26, r14
    9ce8:	c6 01       	movw	r24, r12
    9cea:	81 70       	andi	r24, 0x01	; 1
    9cec:	99 27       	eor	r25, r25
    9cee:	aa 27       	eor	r26, r26
    9cf0:	bb 27       	eor	r27, r27
    9cf2:	89 83       	std	Y+1, r24	; 0x01
    9cf4:	9a 83       	std	Y+2, r25	; 0x02
    9cf6:	ab 83       	std	Y+3, r26	; 0x03
    9cf8:	bc 83       	std	Y+4, r27	; 0x04
    9cfa:	c0 fe       	sbrs	r12, 0
    9cfc:	09 c0       	rjmp	.+18     	; 0x9d10 <put_fat+0xc0>
    9cfe:	80 81       	ld	r24, Z
    9d00:	28 2f       	mov	r18, r24
    9d02:	2f 70       	andi	r18, 0x0F	; 15
    9d04:	a0 e1       	ldi	r26, 0x10	; 16
    9d06:	4a 9e       	mul	r4, r26
    9d08:	c0 01       	movw	r24, r0
    9d0a:	11 24       	eor	r1, r1
    9d0c:	82 2b       	or	r24, r18
    9d0e:	01 c0       	rjmp	.+2      	; 0x9d12 <put_fat+0xc2>
    9d10:	84 2d       	mov	r24, r4
    9d12:	80 83       	st	Z, r24
    9d14:	81 e0       	ldi	r24, 0x01	; 1
    9d16:	ed 81       	ldd	r30, Y+5	; 0x05
    9d18:	fe 81       	ldd	r31, Y+6	; 0x06
    9d1a:	83 83       	std	Z+3, r24	; 0x03
    9d1c:	45 a1       	ldd	r20, Z+37	; 0x25
    9d1e:	56 a1       	ldd	r21, Z+38	; 0x26
    9d20:	67 a1       	ldd	r22, Z+39	; 0x27
    9d22:	70 a5       	ldd	r23, Z+40	; 0x28
    9d24:	c8 01       	movw	r24, r16
    9d26:	89 2f       	mov	r24, r25
    9d28:	99 27       	eor	r25, r25
    9d2a:	86 95       	lsr	r24
    9d2c:	48 0f       	add	r20, r24
    9d2e:	59 1f       	adc	r21, r25
    9d30:	61 1d       	adc	r22, r1
    9d32:	71 1d       	adc	r23, r1
    9d34:	cf 01       	movw	r24, r30
    9d36:	b7 dc       	rcall	.-1682   	; 0x96a6 <move_window>
    9d38:	5c 01       	movw	r10, r24
    9d3a:	89 2b       	or	r24, r25
    9d3c:	09 f0       	breq	.+2      	; 0x9d40 <put_fat+0xf0>
    9d3e:	7c c0       	rjmp	.+248    	; 0x9e38 <put_fat+0x1e8>
    9d40:	11 70       	andi	r17, 0x01	; 1
    9d42:	f1 01       	movw	r30, r2
    9d44:	e0 0f       	add	r30, r16
    9d46:	f1 1f       	adc	r31, r17
    9d48:	89 81       	ldd	r24, Y+1	; 0x01
    9d4a:	9a 81       	ldd	r25, Y+2	; 0x02
    9d4c:	ab 81       	ldd	r26, Y+3	; 0x03
    9d4e:	bc 81       	ldd	r27, Y+4	; 0x04
    9d50:	89 2b       	or	r24, r25
    9d52:	8a 2b       	or	r24, r26
    9d54:	8b 2b       	or	r24, r27
    9d56:	41 f0       	breq	.+16     	; 0x9d68 <put_fat+0x118>
    9d58:	54 e0       	ldi	r21, 0x04	; 4
    9d5a:	76 94       	lsr	r7
    9d5c:	67 94       	ror	r6
    9d5e:	57 94       	ror	r5
    9d60:	47 94       	ror	r4
    9d62:	5a 95       	dec	r21
    9d64:	d1 f7       	brne	.-12     	; 0x9d5a <put_fat+0x10a>
    9d66:	06 c0       	rjmp	.+12     	; 0x9d74 <put_fat+0x124>
    9d68:	00 81       	ld	r16, Z
    9d6a:	00 7f       	andi	r16, 0xF0	; 240
    9d6c:	85 2d       	mov	r24, r5
    9d6e:	8f 70       	andi	r24, 0x0F	; 15
    9d70:	40 2e       	mov	r4, r16
    9d72:	48 2a       	or	r4, r24
    9d74:	40 82       	st	Z, r4
    9d76:	58 c0       	rjmp	.+176    	; 0x9e28 <put_fat+0x1d8>
    9d78:	77 27       	eor	r23, r23
    9d7a:	6f 2d       	mov	r22, r15
    9d7c:	5e 2d       	mov	r21, r14
    9d7e:	4d 2d       	mov	r20, r13
    9d80:	ed 81       	ldd	r30, Y+5	; 0x05
    9d82:	fe 81       	ldd	r31, Y+6	; 0x06
    9d84:	85 a1       	ldd	r24, Z+37	; 0x25
    9d86:	96 a1       	ldd	r25, Z+38	; 0x26
    9d88:	a7 a1       	ldd	r26, Z+39	; 0x27
    9d8a:	b0 a5       	ldd	r27, Z+40	; 0x28
    9d8c:	48 0f       	add	r20, r24
    9d8e:	59 1f       	adc	r21, r25
    9d90:	6a 1f       	adc	r22, r26
    9d92:	7b 1f       	adc	r23, r27
    9d94:	cf 01       	movw	r24, r30
    9d96:	87 dc       	rcall	.-1778   	; 0x96a6 <move_window>
    9d98:	5c 01       	movw	r10, r24
    9d9a:	89 2b       	or	r24, r25
    9d9c:	09 f0       	breq	.+2      	; 0x9da0 <put_fat+0x150>
    9d9e:	4c c0       	rjmp	.+152    	; 0x9e38 <put_fat+0x1e8>
    9da0:	ed 81       	ldd	r30, Y+5	; 0x05
    9da2:	fe 81       	ldd	r31, Y+6	; 0x06
    9da4:	f5 96       	adiw	r30, 0x35	; 53
    9da6:	cc 0c       	add	r12, r12
    9da8:	dd 1c       	adc	r13, r13
    9daa:	e8 94       	clt
    9dac:	c0 f8       	bld	r12, 0
    9dae:	21 e0       	ldi	r18, 0x01	; 1
    9db0:	d2 22       	and	r13, r18
    9db2:	ec 0d       	add	r30, r12
    9db4:	fd 1d       	adc	r31, r13
    9db6:	40 82       	st	Z, r4
    9db8:	51 82       	std	Z+1, r5	; 0x01
    9dba:	36 c0       	rjmp	.+108    	; 0x9e28 <put_fat+0x1d8>
    9dbc:	ed 81       	ldd	r30, Y+5	; 0x05
    9dbe:	fe 81       	ldd	r31, Y+6	; 0x06
    9dc0:	85 a1       	ldd	r24, Z+37	; 0x25
    9dc2:	96 a1       	ldd	r25, Z+38	; 0x26
    9dc4:	a7 a1       	ldd	r26, Z+39	; 0x27
    9dc6:	b0 a5       	ldd	r27, Z+40	; 0x28
    9dc8:	27 e0       	ldi	r18, 0x07	; 7
    9dca:	76 95       	lsr	r23
    9dcc:	67 95       	ror	r22
    9dce:	57 95       	ror	r21
    9dd0:	47 95       	ror	r20
    9dd2:	2a 95       	dec	r18
    9dd4:	d1 f7       	brne	.-12     	; 0x9dca <put_fat+0x17a>
    9dd6:	48 0f       	add	r20, r24
    9dd8:	59 1f       	adc	r21, r25
    9dda:	6a 1f       	adc	r22, r26
    9ddc:	7b 1f       	adc	r23, r27
    9dde:	cf 01       	movw	r24, r30
    9de0:	62 dc       	rcall	.-1852   	; 0x96a6 <move_window>
    9de2:	5c 01       	movw	r10, r24
    9de4:	89 2b       	or	r24, r25
    9de6:	41 f5       	brne	.+80     	; 0x9e38 <put_fat+0x1e8>
    9de8:	4d 81       	ldd	r20, Y+5	; 0x05
    9dea:	5e 81       	ldd	r21, Y+6	; 0x06
    9dec:	4b 5c       	subi	r20, 0xCB	; 203
    9dee:	5f 4f       	sbci	r21, 0xFF	; 255
    9df0:	cc 0c       	add	r12, r12
    9df2:	dd 1c       	adc	r13, r13
    9df4:	cc 0c       	add	r12, r12
    9df6:	dd 1c       	adc	r13, r13
    9df8:	fc ef       	ldi	r31, 0xFC	; 252
    9dfa:	cf 22       	and	r12, r31
    9dfc:	f1 e0       	ldi	r31, 0x01	; 1
    9dfe:	df 22       	and	r13, r31
    9e00:	c4 0e       	add	r12, r20
    9e02:	d5 1e       	adc	r13, r21
    9e04:	c6 01       	movw	r24, r12
    9e06:	8d d8       	rcall	.-3814   	; 0x8f22 <ld_dword>
    9e08:	2f e0       	ldi	r18, 0x0F	; 15
    9e0a:	72 22       	and	r7, r18
    9e0c:	dc 01       	movw	r26, r24
    9e0e:	cb 01       	movw	r24, r22
    9e10:	88 27       	eor	r24, r24
    9e12:	99 27       	eor	r25, r25
    9e14:	aa 27       	eor	r26, r26
    9e16:	b0 7f       	andi	r27, 0xF0	; 240
    9e18:	b3 01       	movw	r22, r6
    9e1a:	a2 01       	movw	r20, r4
    9e1c:	48 2b       	or	r20, r24
    9e1e:	59 2b       	or	r21, r25
    9e20:	6a 2b       	or	r22, r26
    9e22:	7b 2b       	or	r23, r27
    9e24:	c6 01       	movw	r24, r12
    9e26:	92 d8       	rcall	.-3804   	; 0x8f4c <st_dword>
    9e28:	81 e0       	ldi	r24, 0x01	; 1
    9e2a:	ed 81       	ldd	r30, Y+5	; 0x05
    9e2c:	fe 81       	ldd	r31, Y+6	; 0x06
    9e2e:	83 83       	std	Z+3, r24	; 0x03
    9e30:	03 c0       	rjmp	.+6      	; 0x9e38 <put_fat+0x1e8>
    9e32:	82 e0       	ldi	r24, 0x02	; 2
    9e34:	a8 2e       	mov	r10, r24
    9e36:	b1 2c       	mov	r11, r1
    9e38:	c5 01       	movw	r24, r10
    9e3a:	26 96       	adiw	r28, 0x06	; 6
    9e3c:	e2 e1       	ldi	r30, 0x12	; 18
    9e3e:	0c 94 d7 e6 	jmp	0x1cdae	; 0x1cdae <__epilogue_restores__>

00009e42 <get_fat.isra.9>:
    9e42:	a0 e0       	ldi	r26, 0x00	; 0
    9e44:	b0 e0       	ldi	r27, 0x00	; 0
    9e46:	e7 e2       	ldi	r30, 0x27	; 39
    9e48:	ff e4       	ldi	r31, 0x4F	; 79
    9e4a:	0c 94 c3 e6 	jmp	0x1cd86	; 0x1cd86 <__prologue_saves__+0x10>
    9e4e:	42 30       	cpi	r20, 0x02	; 2
    9e50:	51 05       	cpc	r21, r1
    9e52:	61 05       	cpc	r22, r1
    9e54:	71 05       	cpc	r23, r1
    9e56:	08 f4       	brcc	.+2      	; 0x9e5a <get_fat.isra.9+0x18>
    9e58:	9f c0       	rjmp	.+318    	; 0x9f98 <get_fat.isra.9+0x156>
    9e5a:	fc 01       	movw	r30, r24
    9e5c:	01 8d       	ldd	r16, Z+25	; 0x19
    9e5e:	12 8d       	ldd	r17, Z+26	; 0x1a
    9e60:	23 8d       	ldd	r18, Z+27	; 0x1b
    9e62:	34 8d       	ldd	r19, Z+28	; 0x1c
    9e64:	40 17       	cp	r20, r16
    9e66:	51 07       	cpc	r21, r17
    9e68:	62 07       	cpc	r22, r18
    9e6a:	73 07       	cpc	r23, r19
    9e6c:	08 f0       	brcs	.+2      	; 0x9e70 <get_fat.isra.9+0x2e>
    9e6e:	94 c0       	rjmp	.+296    	; 0x9f98 <get_fat.isra.9+0x156>
    9e70:	6a 01       	movw	r12, r20
    9e72:	7b 01       	movw	r14, r22
    9e74:	8c 01       	movw	r16, r24
    9e76:	80 81       	ld	r24, Z
    9e78:	82 30       	cpi	r24, 0x02	; 2
    9e7a:	09 f4       	brne	.+2      	; 0x9e7e <get_fat.isra.9+0x3c>
    9e7c:	4b c0       	rjmp	.+150    	; 0x9f14 <get_fat.isra.9+0xd2>
    9e7e:	83 30       	cpi	r24, 0x03	; 3
    9e80:	09 f4       	brne	.+2      	; 0x9e84 <get_fat.isra.9+0x42>
    9e82:	67 c0       	rjmp	.+206    	; 0x9f52 <get_fat.isra.9+0x110>
    9e84:	81 30       	cpi	r24, 0x01	; 1
    9e86:	09 f0       	breq	.+2      	; 0x9e8a <get_fat.isra.9+0x48>
    9e88:	87 c0       	rjmp	.+270    	; 0x9f98 <get_fat.isra.9+0x156>
    9e8a:	ea 01       	movw	r28, r20
    9e8c:	d6 95       	lsr	r29
    9e8e:	c7 95       	ror	r28
    9e90:	cc 0d       	add	r28, r12
    9e92:	dd 1d       	adc	r29, r13
    9e94:	ce 01       	movw	r24, r28
    9e96:	89 2f       	mov	r24, r25
    9e98:	99 27       	eor	r25, r25
    9e9a:	86 95       	lsr	r24
    9e9c:	45 a1       	ldd	r20, Z+37	; 0x25
    9e9e:	56 a1       	ldd	r21, Z+38	; 0x26
    9ea0:	67 a1       	ldd	r22, Z+39	; 0x27
    9ea2:	70 a5       	ldd	r23, Z+40	; 0x28
    9ea4:	48 0f       	add	r20, r24
    9ea6:	59 1f       	adc	r21, r25
    9ea8:	61 1d       	adc	r22, r1
    9eaa:	71 1d       	adc	r23, r1
    9eac:	cf 01       	movw	r24, r30
    9eae:	fb db       	rcall	.-2058   	; 0x96a6 <move_window>
    9eb0:	89 2b       	or	r24, r25
    9eb2:	21 f0       	breq	.+8      	; 0x9ebc <get_fat.isra.9+0x7a>
    9eb4:	6f ef       	ldi	r22, 0xFF	; 255
    9eb6:	7f ef       	ldi	r23, 0xFF	; 255
    9eb8:	cb 01       	movw	r24, r22
    9eba:	72 c0       	rjmp	.+228    	; 0x9fa0 <get_fat.isra.9+0x15e>
    9ebc:	5e 01       	movw	r10, r28
    9ebe:	ff ef       	ldi	r31, 0xFF	; 255
    9ec0:	af 1a       	sub	r10, r31
    9ec2:	bf 0a       	sbc	r11, r31
    9ec4:	d1 70       	andi	r29, 0x01	; 1
    9ec6:	c0 0f       	add	r28, r16
    9ec8:	d1 1f       	adc	r29, r17
    9eca:	cd a9       	ldd	r28, Y+53	; 0x35
    9ecc:	c5 01       	movw	r24, r10
    9ece:	89 2f       	mov	r24, r25
    9ed0:	99 27       	eor	r25, r25
    9ed2:	86 95       	lsr	r24
    9ed4:	f8 01       	movw	r30, r16
    9ed6:	45 a1       	ldd	r20, Z+37	; 0x25
    9ed8:	56 a1       	ldd	r21, Z+38	; 0x26
    9eda:	67 a1       	ldd	r22, Z+39	; 0x27
    9edc:	70 a5       	ldd	r23, Z+40	; 0x28
    9ede:	48 0f       	add	r20, r24
    9ee0:	59 1f       	adc	r21, r25
    9ee2:	61 1d       	adc	r22, r1
    9ee4:	71 1d       	adc	r23, r1
    9ee6:	c8 01       	movw	r24, r16
    9ee8:	de db       	rcall	.-2116   	; 0x96a6 <move_window>
    9eea:	89 2b       	or	r24, r25
    9eec:	19 f7       	brne	.-58     	; 0x9eb4 <get_fat.isra.9+0x72>
    9eee:	f1 e0       	ldi	r31, 0x01	; 1
    9ef0:	bf 22       	and	r11, r31
    9ef2:	f8 01       	movw	r30, r16
    9ef4:	ea 0d       	add	r30, r10
    9ef6:	fb 1d       	adc	r31, r11
    9ef8:	85 a9       	ldd	r24, Z+53	; 0x35
    9efa:	6c 2f       	mov	r22, r28
    9efc:	70 e0       	ldi	r23, 0x00	; 0
    9efe:	78 2b       	or	r23, r24
    9f00:	c0 fe       	sbrs	r12, 0
    9f02:	06 c0       	rjmp	.+12     	; 0x9f10 <get_fat.isra.9+0xce>
    9f04:	54 e0       	ldi	r21, 0x04	; 4
    9f06:	76 95       	lsr	r23
    9f08:	67 95       	ror	r22
    9f0a:	5a 95       	dec	r21
    9f0c:	e1 f7       	brne	.-8      	; 0x9f06 <get_fat.isra.9+0xc4>
    9f0e:	1e c0       	rjmp	.+60     	; 0x9f4c <get_fat.isra.9+0x10a>
    9f10:	7f 70       	andi	r23, 0x0F	; 15
    9f12:	1c c0       	rjmp	.+56     	; 0x9f4c <get_fat.isra.9+0x10a>
    9f14:	77 27       	eor	r23, r23
    9f16:	6f 2d       	mov	r22, r15
    9f18:	5e 2d       	mov	r21, r14
    9f1a:	4d 2d       	mov	r20, r13
    9f1c:	85 a1       	ldd	r24, Z+37	; 0x25
    9f1e:	96 a1       	ldd	r25, Z+38	; 0x26
    9f20:	a7 a1       	ldd	r26, Z+39	; 0x27
    9f22:	b0 a5       	ldd	r27, Z+40	; 0x28
    9f24:	48 0f       	add	r20, r24
    9f26:	59 1f       	adc	r21, r25
    9f28:	6a 1f       	adc	r22, r26
    9f2a:	7b 1f       	adc	r23, r27
    9f2c:	cf 01       	movw	r24, r30
    9f2e:	bb db       	rcall	.-2186   	; 0x96a6 <move_window>
    9f30:	89 2b       	or	r24, r25
    9f32:	09 f0       	breq	.+2      	; 0x9f36 <get_fat.isra.9+0xf4>
    9f34:	bf cf       	rjmp	.-130    	; 0x9eb4 <get_fat.isra.9+0x72>
    9f36:	cc 0c       	add	r12, r12
    9f38:	dd 1c       	adc	r13, r13
    9f3a:	e8 94       	clt
    9f3c:	c0 f8       	bld	r12, 0
    9f3e:	f1 e0       	ldi	r31, 0x01	; 1
    9f40:	df 22       	and	r13, r31
    9f42:	f8 01       	movw	r30, r16
    9f44:	ec 0d       	add	r30, r12
    9f46:	fd 1d       	adc	r31, r13
    9f48:	65 a9       	ldd	r22, Z+53	; 0x35
    9f4a:	76 a9       	ldd	r23, Z+54	; 0x36
    9f4c:	80 e0       	ldi	r24, 0x00	; 0
    9f4e:	90 e0       	ldi	r25, 0x00	; 0
    9f50:	27 c0       	rjmp	.+78     	; 0x9fa0 <get_fat.isra.9+0x15e>
    9f52:	85 a1       	ldd	r24, Z+37	; 0x25
    9f54:	96 a1       	ldd	r25, Z+38	; 0x26
    9f56:	a7 a1       	ldd	r26, Z+39	; 0x27
    9f58:	b0 a5       	ldd	r27, Z+40	; 0x28
    9f5a:	27 e0       	ldi	r18, 0x07	; 7
    9f5c:	76 95       	lsr	r23
    9f5e:	67 95       	ror	r22
    9f60:	57 95       	ror	r21
    9f62:	47 95       	ror	r20
    9f64:	2a 95       	dec	r18
    9f66:	d1 f7       	brne	.-12     	; 0x9f5c <get_fat.isra.9+0x11a>
    9f68:	48 0f       	add	r20, r24
    9f6a:	59 1f       	adc	r21, r25
    9f6c:	6a 1f       	adc	r22, r26
    9f6e:	7b 1f       	adc	r23, r27
    9f70:	cf 01       	movw	r24, r30
    9f72:	99 db       	rcall	.-2254   	; 0x96a6 <move_window>
    9f74:	89 2b       	or	r24, r25
    9f76:	09 f0       	breq	.+2      	; 0x9f7a <get_fat.isra.9+0x138>
    9f78:	9d cf       	rjmp	.-198    	; 0x9eb4 <get_fat.isra.9+0x72>
    9f7a:	0b 5c       	subi	r16, 0xCB	; 203
    9f7c:	1f 4f       	sbci	r17, 0xFF	; 255
    9f7e:	cc 0c       	add	r12, r12
    9f80:	dd 1c       	adc	r13, r13
    9f82:	cc 0c       	add	r12, r12
    9f84:	dd 1c       	adc	r13, r13
    9f86:	c6 01       	movw	r24, r12
    9f88:	8c 7f       	andi	r24, 0xFC	; 252
    9f8a:	91 70       	andi	r25, 0x01	; 1
    9f8c:	80 0f       	add	r24, r16
    9f8e:	91 1f       	adc	r25, r17
    9f90:	0e 94 91 47 	call	0x8f22	; 0x8f22 <ld_dword>
    9f94:	9f 70       	andi	r25, 0x0F	; 15
    9f96:	04 c0       	rjmp	.+8      	; 0x9fa0 <get_fat.isra.9+0x15e>
    9f98:	61 e0       	ldi	r22, 0x01	; 1
    9f9a:	70 e0       	ldi	r23, 0x00	; 0
    9f9c:	80 e0       	ldi	r24, 0x00	; 0
    9f9e:	90 e0       	ldi	r25, 0x00	; 0
    9fa0:	cd b7       	in	r28, 0x3d	; 61
    9fa2:	de b7       	in	r29, 0x3e	; 62
    9fa4:	ea e0       	ldi	r30, 0x0A	; 10
    9fa6:	0c 94 df e6 	jmp	0x1cdbe	; 0x1cdbe <__epilogue_restores__+0x10>

00009faa <dir_sdi>:
    9faa:	a0 e0       	ldi	r26, 0x00	; 0
    9fac:	b0 e0       	ldi	r27, 0x00	; 0
    9fae:	eb ed       	ldi	r30, 0xDB	; 219
    9fb0:	ff e4       	ldi	r31, 0x4F	; 79
    9fb2:	0c 94 bd e6 	jmp	0x1cd7a	; 0x1cd7a <__prologue_saves__+0x4>
    9fb6:	ec 01       	movw	r28, r24
    9fb8:	6a 01       	movw	r12, r20
    9fba:	7b 01       	movw	r14, r22
    9fbc:	41 15       	cp	r20, r1
    9fbe:	51 05       	cpc	r21, r1
    9fc0:	80 e2       	ldi	r24, 0x20	; 32
    9fc2:	68 07       	cpc	r22, r24
    9fc4:	71 05       	cpc	r23, r1
    9fc6:	18 f0       	brcs	.+6      	; 0x9fce <dir_sdi+0x24>
    9fc8:	82 e0       	ldi	r24, 0x02	; 2
    9fca:	90 e0       	ldi	r25, 0x00	; 0
    9fcc:	aa c0       	rjmp	.+340    	; 0xa122 <dir_sdi+0x178>
    9fce:	db 01       	movw	r26, r22
    9fd0:	ca 01       	movw	r24, r20
    9fd2:	8f 71       	andi	r24, 0x1F	; 31
    9fd4:	99 27       	eor	r25, r25
    9fd6:	aa 27       	eor	r26, r26
    9fd8:	bb 27       	eor	r27, r27
    9fda:	89 2b       	or	r24, r25
    9fdc:	8a 2b       	or	r24, r26
    9fde:	8b 2b       	or	r24, r27
    9fe0:	99 f7       	brne	.-26     	; 0x9fc8 <dir_sdi+0x1e>
    9fe2:	08 81       	ld	r16, Y
    9fe4:	19 81       	ldd	r17, Y+1	; 0x01
    9fe6:	4e 87       	std	Y+14, r20	; 0x0e
    9fe8:	5f 87       	std	Y+15, r21	; 0x0f
    9fea:	68 8b       	std	Y+16, r22	; 0x10
    9fec:	79 8b       	std	Y+17, r23	; 0x11
    9fee:	8e 80       	ldd	r8, Y+6	; 0x06
    9ff0:	9f 80       	ldd	r9, Y+7	; 0x07
    9ff2:	a8 84       	ldd	r10, Y+8	; 0x08
    9ff4:	b9 84       	ldd	r11, Y+9	; 0x09
    9ff6:	81 14       	cp	r8, r1
    9ff8:	91 04       	cpc	r9, r1
    9ffa:	a1 04       	cpc	r10, r1
    9ffc:	b1 04       	cpc	r11, r1
    9ffe:	51 f5       	brne	.+84     	; 0xa054 <dir_sdi+0xaa>
    a000:	f8 01       	movw	r30, r16
    a002:	80 81       	ld	r24, Z
    a004:	83 30       	cpi	r24, 0x03	; 3
    a006:	40 f0       	brcs	.+16     	; 0xa018 <dir_sdi+0x6e>
    a008:	81 a5       	ldd	r24, Z+41	; 0x29
    a00a:	92 a5       	ldd	r25, Z+42	; 0x2a
    a00c:	a3 a5       	ldd	r26, Z+43	; 0x2b
    a00e:	b4 a5       	ldd	r27, Z+44	; 0x2c
    a010:	00 97       	sbiw	r24, 0x00	; 0
    a012:	a1 05       	cpc	r26, r1
    a014:	b1 05       	cpc	r27, r1
    a016:	e1 f4       	brne	.+56     	; 0xa050 <dir_sdi+0xa6>
    a018:	f8 01       	movw	r30, r16
    a01a:	87 81       	ldd	r24, Z+7	; 0x07
    a01c:	90 85       	ldd	r25, Z+8	; 0x08
    a01e:	a0 e0       	ldi	r26, 0x00	; 0
    a020:	b0 e0       	ldi	r27, 0x00	; 0
    a022:	b7 01       	movw	r22, r14
    a024:	a6 01       	movw	r20, r12
    a026:	25 e0       	ldi	r18, 0x05	; 5
    a028:	76 95       	lsr	r23
    a02a:	67 95       	ror	r22
    a02c:	57 95       	ror	r21
    a02e:	47 95       	ror	r20
    a030:	2a 95       	dec	r18
    a032:	d1 f7       	brne	.-12     	; 0xa028 <dir_sdi+0x7e>
    a034:	48 17       	cp	r20, r24
    a036:	59 07       	cpc	r21, r25
    a038:	6a 07       	cpc	r22, r26
    a03a:	7b 07       	cpc	r23, r27
    a03c:	28 f6       	brcc	.-118    	; 0x9fc8 <dir_sdi+0x1e>
    a03e:	81 a5       	ldd	r24, Z+41	; 0x29
    a040:	92 a5       	ldd	r25, Z+42	; 0x2a
    a042:	a3 a5       	ldd	r26, Z+43	; 0x2b
    a044:	b4 a5       	ldd	r27, Z+44	; 0x2c
    a046:	8e 8b       	std	Y+22, r24	; 0x16
    a048:	9f 8b       	std	Y+23, r25	; 0x17
    a04a:	a8 8f       	std	Y+24, r26	; 0x18
    a04c:	b9 8f       	std	Y+25, r27	; 0x19
    a04e:	3e c0       	rjmp	.+124    	; 0xa0cc <dir_sdi+0x122>
    a050:	4c 01       	movw	r8, r24
    a052:	5d 01       	movw	r10, r26
    a054:	f8 01       	movw	r30, r16
    a056:	41 84       	ldd	r4, Z+9	; 0x09
    a058:	52 84       	ldd	r5, Z+10	; 0x0a
    a05a:	61 2c       	mov	r6, r1
    a05c:	71 2c       	mov	r7, r1
    a05e:	39 e0       	ldi	r19, 0x09	; 9
    a060:	44 0c       	add	r4, r4
    a062:	55 1c       	adc	r5, r5
    a064:	66 1c       	adc	r6, r6
    a066:	77 1c       	adc	r7, r7
    a068:	3a 95       	dec	r19
    a06a:	d1 f7       	brne	.-12     	; 0xa060 <dir_sdi+0xb6>
    a06c:	b5 01       	movw	r22, r10
    a06e:	a4 01       	movw	r20, r8
    a070:	c4 14       	cp	r12, r4
    a072:	d5 04       	cpc	r13, r5
    a074:	e6 04       	cpc	r14, r6
    a076:	f7 04       	cpc	r15, r7
    a078:	10 f1       	brcs	.+68     	; 0xa0be <dir_sdi+0x114>
    a07a:	88 81       	ld	r24, Y
    a07c:	99 81       	ldd	r25, Y+1	; 0x01
    a07e:	e1 de       	rcall	.-574    	; 0x9e42 <get_fat.isra.9>
    a080:	4b 01       	movw	r8, r22
    a082:	5c 01       	movw	r10, r24
    a084:	6f 3f       	cpi	r22, 0xFF	; 255
    a086:	7f 4f       	sbci	r23, 0xFF	; 255
    a088:	8f 4f       	sbci	r24, 0xFF	; 255
    a08a:	9f 4f       	sbci	r25, 0xFF	; 255
    a08c:	09 f4       	brne	.+2      	; 0xa090 <dir_sdi+0xe6>
    a08e:	47 c0       	rjmp	.+142    	; 0xa11e <dir_sdi+0x174>
    a090:	82 e0       	ldi	r24, 0x02	; 2
    a092:	88 16       	cp	r8, r24
    a094:	91 04       	cpc	r9, r1
    a096:	a1 04       	cpc	r10, r1
    a098:	b1 04       	cpc	r11, r1
    a09a:	08 f4       	brcc	.+2      	; 0xa09e <dir_sdi+0xf4>
    a09c:	95 cf       	rjmp	.-214    	; 0x9fc8 <dir_sdi+0x1e>
    a09e:	f8 01       	movw	r30, r16
    a0a0:	81 8d       	ldd	r24, Z+25	; 0x19
    a0a2:	92 8d       	ldd	r25, Z+26	; 0x1a
    a0a4:	a3 8d       	ldd	r26, Z+27	; 0x1b
    a0a6:	b4 8d       	ldd	r27, Z+28	; 0x1c
    a0a8:	88 16       	cp	r8, r24
    a0aa:	99 06       	cpc	r9, r25
    a0ac:	aa 06       	cpc	r10, r26
    a0ae:	bb 06       	cpc	r11, r27
    a0b0:	08 f0       	brcs	.+2      	; 0xa0b4 <dir_sdi+0x10a>
    a0b2:	8a cf       	rjmp	.-236    	; 0x9fc8 <dir_sdi+0x1e>
    a0b4:	c4 18       	sub	r12, r4
    a0b6:	d5 08       	sbc	r13, r5
    a0b8:	e6 08       	sbc	r14, r6
    a0ba:	f7 08       	sbc	r15, r7
    a0bc:	d7 cf       	rjmp	.-82     	; 0xa06c <dir_sdi+0xc2>
    a0be:	c8 01       	movw	r24, r16
    a0c0:	0e 94 c4 47 	call	0x8f88	; 0x8f88 <clst2sect>
    a0c4:	6e 8b       	std	Y+22, r22	; 0x16
    a0c6:	7f 8b       	std	Y+23, r23	; 0x17
    a0c8:	88 8f       	std	Y+24, r24	; 0x18
    a0ca:	99 8f       	std	Y+25, r25	; 0x19
    a0cc:	8a 8a       	std	Y+18, r8	; 0x12
    a0ce:	9b 8a       	std	Y+19, r9	; 0x13
    a0d0:	ac 8a       	std	Y+20, r10	; 0x14
    a0d2:	bd 8a       	std	Y+21, r11	; 0x15
    a0d4:	8e 89       	ldd	r24, Y+22	; 0x16
    a0d6:	9f 89       	ldd	r25, Y+23	; 0x17
    a0d8:	a8 8d       	ldd	r26, Y+24	; 0x18
    a0da:	b9 8d       	ldd	r27, Y+25	; 0x19
    a0dc:	00 97       	sbiw	r24, 0x00	; 0
    a0de:	a1 05       	cpc	r26, r1
    a0e0:	b1 05       	cpc	r27, r1
    a0e2:	09 f4       	brne	.+2      	; 0xa0e6 <dir_sdi+0x13c>
    a0e4:	71 cf       	rjmp	.-286    	; 0x9fc8 <dir_sdi+0x1e>
    a0e6:	b7 01       	movw	r22, r14
    a0e8:	a6 01       	movw	r20, r12
    a0ea:	29 e0       	ldi	r18, 0x09	; 9
    a0ec:	76 95       	lsr	r23
    a0ee:	67 95       	ror	r22
    a0f0:	57 95       	ror	r21
    a0f2:	47 95       	ror	r20
    a0f4:	2a 95       	dec	r18
    a0f6:	d1 f7       	brne	.-12     	; 0xa0ec <dir_sdi+0x142>
    a0f8:	84 0f       	add	r24, r20
    a0fa:	95 1f       	adc	r25, r21
    a0fc:	a6 1f       	adc	r26, r22
    a0fe:	b7 1f       	adc	r27, r23
    a100:	8e 8b       	std	Y+22, r24	; 0x16
    a102:	9f 8b       	std	Y+23, r25	; 0x17
    a104:	a8 8f       	std	Y+24, r26	; 0x18
    a106:	b9 8f       	std	Y+25, r27	; 0x19
    a108:	0b 5c       	subi	r16, 0xCB	; 203
    a10a:	1f 4f       	sbci	r17, 0xFF	; 255
    a10c:	f1 e0       	ldi	r31, 0x01	; 1
    a10e:	df 22       	and	r13, r31
    a110:	c0 0e       	add	r12, r16
    a112:	d1 1e       	adc	r13, r17
    a114:	db 8e       	std	Y+27, r13	; 0x1b
    a116:	ca 8e       	std	Y+26, r12	; 0x1a
    a118:	80 e0       	ldi	r24, 0x00	; 0
    a11a:	90 e0       	ldi	r25, 0x00	; 0
    a11c:	02 c0       	rjmp	.+4      	; 0xa122 <dir_sdi+0x178>
    a11e:	81 e0       	ldi	r24, 0x01	; 1
    a120:	90 e0       	ldi	r25, 0x00	; 0
    a122:	cd b7       	in	r28, 0x3d	; 61
    a124:	de b7       	in	r29, 0x3e	; 62
    a126:	e0 e1       	ldi	r30, 0x10	; 16
    a128:	0c 94 d9 e6 	jmp	0x1cdb2	; 0x1cdb2 <__epilogue_restores__+0x4>

0000a12c <create_chain>:
    a12c:	a0 e0       	ldi	r26, 0x00	; 0
    a12e:	b0 e0       	ldi	r27, 0x00	; 0
    a130:	ec e9       	ldi	r30, 0x9C	; 156
    a132:	f0 e5       	ldi	r31, 0x50	; 80
    a134:	0c 94 bd e6 	jmp	0x1cd7a	; 0x1cd7a <__prologue_saves__+0x4>
    a138:	8c 01       	movw	r16, r24
    a13a:	2a 01       	movw	r4, r20
    a13c:	3b 01       	movw	r6, r22
    a13e:	fc 01       	movw	r30, r24
    a140:	c0 81       	ld	r28, Z
    a142:	d1 81       	ldd	r29, Z+1	; 0x01
    a144:	41 15       	cp	r20, r1
    a146:	51 05       	cpc	r21, r1
    a148:	61 05       	cpc	r22, r1
    a14a:	71 05       	cpc	r23, r1
    a14c:	99 f4       	brne	.+38     	; 0xa174 <create_chain+0x48>
    a14e:	8d 84       	ldd	r8, Y+13	; 0x0d
    a150:	9e 84       	ldd	r9, Y+14	; 0x0e
    a152:	af 84       	ldd	r10, Y+15	; 0x0f
    a154:	b8 88       	ldd	r11, Y+16	; 0x10
    a156:	81 14       	cp	r8, r1
    a158:	91 04       	cpc	r9, r1
    a15a:	a1 04       	cpc	r10, r1
    a15c:	b1 04       	cpc	r11, r1
    a15e:	51 f1       	breq	.+84     	; 0xa1b4 <create_chain+0x88>
    a160:	89 8d       	ldd	r24, Y+25	; 0x19
    a162:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a164:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a166:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a168:	88 16       	cp	r8, r24
    a16a:	99 06       	cpc	r9, r25
    a16c:	aa 06       	cpc	r10, r26
    a16e:	bb 06       	cpc	r11, r27
    a170:	28 f1       	brcs	.+74     	; 0xa1bc <create_chain+0x90>
    a172:	20 c0       	rjmp	.+64     	; 0xa1b4 <create_chain+0x88>
    a174:	ce 01       	movw	r24, r28
    a176:	65 de       	rcall	.-822    	; 0x9e42 <get_fat.isra.9>
    a178:	62 30       	cpi	r22, 0x02	; 2
    a17a:	71 05       	cpc	r23, r1
    a17c:	81 05       	cpc	r24, r1
    a17e:	91 05       	cpc	r25, r1
    a180:	08 f4       	brcc	.+2      	; 0xa184 <create_chain+0x58>
    a182:	ea c0       	rjmp	.+468    	; 0xa358 <create_chain+0x22c>
    a184:	6f 3f       	cpi	r22, 0xFF	; 255
    a186:	ff ef       	ldi	r31, 0xFF	; 255
    a188:	7f 07       	cpc	r23, r31
    a18a:	8f 07       	cpc	r24, r31
    a18c:	9f 07       	cpc	r25, r31
    a18e:	29 f4       	brne	.+10     	; 0xa19a <create_chain+0x6e>
    a190:	4f ef       	ldi	r20, 0xFF	; 255
    a192:	3f ef       	ldi	r19, 0xFF	; 255
    a194:	2f ef       	ldi	r18, 0xFF	; 255
    a196:	9f ef       	ldi	r25, 0xFF	; 255
    a198:	e7 c0       	rjmp	.+462    	; 0xa368 <create_chain+0x23c>
    a19a:	c9 8c       	ldd	r12, Y+25	; 0x19
    a19c:	da 8c       	ldd	r13, Y+26	; 0x1a
    a19e:	eb 8c       	ldd	r14, Y+27	; 0x1b
    a1a0:	fc 8c       	ldd	r15, Y+28	; 0x1c
    a1a2:	6c 15       	cp	r22, r12
    a1a4:	7d 05       	cpc	r23, r13
    a1a6:	8e 05       	cpc	r24, r14
    a1a8:	9f 05       	cpc	r25, r15
    a1aa:	08 f4       	brcc	.+2      	; 0xa1ae <create_chain+0x82>
    a1ac:	da c0       	rjmp	.+436    	; 0xa362 <create_chain+0x236>
    a1ae:	53 01       	movw	r10, r6
    a1b0:	42 01       	movw	r8, r4
    a1b2:	04 c0       	rjmp	.+8      	; 0xa1bc <create_chain+0x90>
    a1b4:	81 2c       	mov	r8, r1
    a1b6:	91 2c       	mov	r9, r1
    a1b8:	54 01       	movw	r10, r8
    a1ba:	83 94       	inc	r8
    a1bc:	89 89       	ldd	r24, Y+17	; 0x11
    a1be:	9a 89       	ldd	r25, Y+18	; 0x12
    a1c0:	ab 89       	ldd	r26, Y+19	; 0x13
    a1c2:	bc 89       	ldd	r27, Y+20	; 0x14
    a1c4:	89 2b       	or	r24, r25
    a1c6:	8a 2b       	or	r24, r26
    a1c8:	8b 2b       	or	r24, r27
    a1ca:	11 f4       	brne	.+4      	; 0xa1d0 <create_chain+0xa4>
    a1cc:	40 e0       	ldi	r20, 0x00	; 0
    a1ce:	c5 c0       	rjmp	.+394    	; 0xa35a <create_chain+0x22e>
    a1d0:	84 14       	cp	r8, r4
    a1d2:	95 04       	cpc	r9, r5
    a1d4:	a6 04       	cpc	r10, r6
    a1d6:	b7 04       	cpc	r11, r7
    a1d8:	09 f0       	breq	.+2      	; 0xa1dc <create_chain+0xb0>
    a1da:	46 c0       	rjmp	.+140    	; 0xa268 <create_chain+0x13c>
    a1dc:	75 01       	movw	r14, r10
    a1de:	64 01       	movw	r12, r8
    a1e0:	2f ef       	ldi	r18, 0xFF	; 255
    a1e2:	c2 1a       	sub	r12, r18
    a1e4:	d2 0a       	sbc	r13, r18
    a1e6:	e2 0a       	sbc	r14, r18
    a1e8:	f2 0a       	sbc	r15, r18
    a1ea:	89 8d       	ldd	r24, Y+25	; 0x19
    a1ec:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a1ee:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a1f0:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a1f2:	c8 16       	cp	r12, r24
    a1f4:	d9 06       	cpc	r13, r25
    a1f6:	ea 06       	cpc	r14, r26
    a1f8:	fb 06       	cpc	r15, r27
    a1fa:	28 f0       	brcs	.+10     	; 0xa206 <create_chain+0xda>
    a1fc:	92 e0       	ldi	r25, 0x02	; 2
    a1fe:	c9 2e       	mov	r12, r25
    a200:	d1 2c       	mov	r13, r1
    a202:	e1 2c       	mov	r14, r1
    a204:	f1 2c       	mov	r15, r1
    a206:	b7 01       	movw	r22, r14
    a208:	a6 01       	movw	r20, r12
    a20a:	f8 01       	movw	r30, r16
    a20c:	80 81       	ld	r24, Z
    a20e:	91 81       	ldd	r25, Z+1	; 0x01
    a210:	18 de       	rcall	.-976    	; 0x9e42 <get_fat.isra.9>
    a212:	61 30       	cpi	r22, 0x01	; 1
    a214:	71 05       	cpc	r23, r1
    a216:	81 05       	cpc	r24, r1
    a218:	91 05       	cpc	r25, r1
    a21a:	09 f4       	brne	.+2      	; 0xa21e <create_chain+0xf2>
    a21c:	9d c0       	rjmp	.+314    	; 0xa358 <create_chain+0x22c>
    a21e:	6f 3f       	cpi	r22, 0xFF	; 255
    a220:	ff ef       	ldi	r31, 0xFF	; 255
    a222:	7f 07       	cpc	r23, r31
    a224:	8f 07       	cpc	r24, r31
    a226:	9f 07       	cpc	r25, r31
    a228:	09 f4       	brne	.+2      	; 0xa22c <create_chain+0x100>
    a22a:	b2 cf       	rjmp	.-156    	; 0xa190 <create_chain+0x64>
    a22c:	67 2b       	or	r22, r23
    a22e:	68 2b       	or	r22, r24
    a230:	69 2b       	or	r22, r25
    a232:	a9 f0       	breq	.+42     	; 0xa25e <create_chain+0x132>
    a234:	8d 85       	ldd	r24, Y+13	; 0x0d
    a236:	9e 85       	ldd	r25, Y+14	; 0x0e
    a238:	af 85       	ldd	r26, Y+15	; 0x0f
    a23a:	b8 89       	ldd	r27, Y+16	; 0x10
    a23c:	82 30       	cpi	r24, 0x02	; 2
    a23e:	91 05       	cpc	r25, r1
    a240:	a1 05       	cpc	r26, r1
    a242:	b1 05       	cpc	r27, r1
    a244:	88 f0       	brcs	.+34     	; 0xa268 <create_chain+0x13c>
    a246:	49 8d       	ldd	r20, Y+25	; 0x19
    a248:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a24a:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a24c:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a24e:	84 17       	cp	r24, r20
    a250:	95 07       	cpc	r25, r21
    a252:	a6 07       	cpc	r26, r22
    a254:	b7 07       	cpc	r27, r23
    a256:	40 f4       	brcc	.+16     	; 0xa268 <create_chain+0x13c>
    a258:	4c 01       	movw	r8, r24
    a25a:	5d 01       	movw	r10, r26
    a25c:	05 c0       	rjmp	.+10     	; 0xa268 <create_chain+0x13c>
    a25e:	c1 14       	cp	r12, r1
    a260:	d1 04       	cpc	r13, r1
    a262:	e1 04       	cpc	r14, r1
    a264:	f1 04       	cpc	r15, r1
    a266:	c9 f5       	brne	.+114    	; 0xa2da <create_chain+0x1ae>
    a268:	75 01       	movw	r14, r10
    a26a:	64 01       	movw	r12, r8
    a26c:	2f ef       	ldi	r18, 0xFF	; 255
    a26e:	c2 1a       	sub	r12, r18
    a270:	d2 0a       	sbc	r13, r18
    a272:	e2 0a       	sbc	r14, r18
    a274:	f2 0a       	sbc	r15, r18
    a276:	89 8d       	ldd	r24, Y+25	; 0x19
    a278:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a27a:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a27c:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a27e:	c8 16       	cp	r12, r24
    a280:	d9 06       	cpc	r13, r25
    a282:	ea 06       	cpc	r14, r26
    a284:	fb 06       	cpc	r15, r27
    a286:	60 f0       	brcs	.+24     	; 0xa2a0 <create_chain+0x174>
    a288:	82 e0       	ldi	r24, 0x02	; 2
    a28a:	88 16       	cp	r8, r24
    a28c:	91 04       	cpc	r9, r1
    a28e:	a1 04       	cpc	r10, r1
    a290:	b1 04       	cpc	r11, r1
    a292:	08 f4       	brcc	.+2      	; 0xa296 <create_chain+0x16a>
    a294:	9b cf       	rjmp	.-202    	; 0xa1cc <create_chain+0xa0>
    a296:	82 e0       	ldi	r24, 0x02	; 2
    a298:	c8 2e       	mov	r12, r24
    a29a:	d1 2c       	mov	r13, r1
    a29c:	e1 2c       	mov	r14, r1
    a29e:	f1 2c       	mov	r15, r1
    a2a0:	b7 01       	movw	r22, r14
    a2a2:	a6 01       	movw	r20, r12
    a2a4:	f8 01       	movw	r30, r16
    a2a6:	80 81       	ld	r24, Z
    a2a8:	91 81       	ldd	r25, Z+1	; 0x01
    a2aa:	cb dd       	rcall	.-1130   	; 0x9e42 <get_fat.isra.9>
    a2ac:	61 15       	cp	r22, r1
    a2ae:	71 05       	cpc	r23, r1
    a2b0:	81 05       	cpc	r24, r1
    a2b2:	91 05       	cpc	r25, r1
    a2b4:	91 f0       	breq	.+36     	; 0xa2da <create_chain+0x1ae>
    a2b6:	61 30       	cpi	r22, 0x01	; 1
    a2b8:	71 05       	cpc	r23, r1
    a2ba:	81 05       	cpc	r24, r1
    a2bc:	91 05       	cpc	r25, r1
    a2be:	09 f4       	brne	.+2      	; 0xa2c2 <create_chain+0x196>
    a2c0:	4b c0       	rjmp	.+150    	; 0xa358 <create_chain+0x22c>
    a2c2:	6f 3f       	cpi	r22, 0xFF	; 255
    a2c4:	7f 4f       	sbci	r23, 0xFF	; 255
    a2c6:	8f 4f       	sbci	r24, 0xFF	; 255
    a2c8:	9f 4f       	sbci	r25, 0xFF	; 255
    a2ca:	09 f4       	brne	.+2      	; 0xa2ce <create_chain+0x1a2>
    a2cc:	61 cf       	rjmp	.-318    	; 0xa190 <create_chain+0x64>
    a2ce:	c8 14       	cp	r12, r8
    a2d0:	d9 04       	cpc	r13, r9
    a2d2:	ea 04       	cpc	r14, r10
    a2d4:	fb 04       	cpc	r15, r11
    a2d6:	51 f6       	brne	.-108    	; 0xa26c <create_chain+0x140>
    a2d8:	79 cf       	rjmp	.-270    	; 0xa1cc <create_chain+0xa0>
    a2da:	0f ef       	ldi	r16, 0xFF	; 255
    a2dc:	1f ef       	ldi	r17, 0xFF	; 255
    a2de:	98 01       	movw	r18, r16
    a2e0:	b7 01       	movw	r22, r14
    a2e2:	a6 01       	movw	r20, r12
    a2e4:	ce 01       	movw	r24, r28
    a2e6:	b4 dc       	rcall	.-1688   	; 0x9c50 <put_fat>
    a2e8:	00 97       	sbiw	r24, 0x00	; 0
    a2ea:	99 f5       	brne	.+102    	; 0xa352 <create_chain+0x226>
    a2ec:	41 14       	cp	r4, r1
    a2ee:	51 04       	cpc	r5, r1
    a2f0:	61 04       	cpc	r6, r1
    a2f2:	71 04       	cpc	r7, r1
    a2f4:	e9 f4       	brne	.+58     	; 0xa330 <create_chain+0x204>
    a2f6:	cd 86       	std	Y+13, r12	; 0x0d
    a2f8:	de 86       	std	Y+14, r13	; 0x0e
    a2fa:	ef 86       	std	Y+15, r14	; 0x0f
    a2fc:	f8 8a       	std	Y+16, r15	; 0x10
    a2fe:	89 89       	ldd	r24, Y+17	; 0x11
    a300:	9a 89       	ldd	r25, Y+18	; 0x12
    a302:	ab 89       	ldd	r26, Y+19	; 0x13
    a304:	bc 89       	ldd	r27, Y+20	; 0x14
    a306:	49 8d       	ldd	r20, Y+25	; 0x19
    a308:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a30a:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a30c:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a30e:	42 50       	subi	r20, 0x02	; 2
    a310:	51 09       	sbc	r21, r1
    a312:	61 09       	sbc	r22, r1
    a314:	71 09       	sbc	r23, r1
    a316:	48 17       	cp	r20, r24
    a318:	59 07       	cpc	r21, r25
    a31a:	6a 07       	cpc	r22, r26
    a31c:	7b 07       	cpc	r23, r27
    a31e:	88 f0       	brcs	.+34     	; 0xa342 <create_chain+0x216>
    a320:	01 97       	sbiw	r24, 0x01	; 1
    a322:	a1 09       	sbc	r26, r1
    a324:	b1 09       	sbc	r27, r1
    a326:	89 8b       	std	Y+17, r24	; 0x11
    a328:	9a 8b       	std	Y+18, r25	; 0x12
    a32a:	ab 8b       	std	Y+19, r26	; 0x13
    a32c:	bc 8b       	std	Y+20, r27	; 0x14
    a32e:	09 c0       	rjmp	.+18     	; 0xa342 <create_chain+0x216>
    a330:	97 01       	movw	r18, r14
    a332:	86 01       	movw	r16, r12
    a334:	b3 01       	movw	r22, r6
    a336:	a2 01       	movw	r20, r4
    a338:	ce 01       	movw	r24, r28
    a33a:	8a dc       	rcall	.-1772   	; 0x9c50 <put_fat>
    a33c:	00 97       	sbiw	r24, 0x00	; 0
    a33e:	d9 f2       	breq	.-74     	; 0xa2f6 <create_chain+0x1ca>
    a340:	08 c0       	rjmp	.+16     	; 0xa352 <create_chain+0x226>
    a342:	8c 81       	ldd	r24, Y+4	; 0x04
    a344:	81 60       	ori	r24, 0x01	; 1
    a346:	8c 83       	std	Y+4, r24	; 0x04
    a348:	4c 2d       	mov	r20, r12
    a34a:	3d 2d       	mov	r19, r13
    a34c:	2e 2d       	mov	r18, r14
    a34e:	9f 2d       	mov	r25, r15
    a350:	0b c0       	rjmp	.+22     	; 0xa368 <create_chain+0x23c>
    a352:	01 97       	sbiw	r24, 0x01	; 1
    a354:	09 f4       	brne	.+2      	; 0xa358 <create_chain+0x22c>
    a356:	1c cf       	rjmp	.-456    	; 0xa190 <create_chain+0x64>
    a358:	41 e0       	ldi	r20, 0x01	; 1
    a35a:	30 e0       	ldi	r19, 0x00	; 0
    a35c:	20 e0       	ldi	r18, 0x00	; 0
    a35e:	90 e0       	ldi	r25, 0x00	; 0
    a360:	03 c0       	rjmp	.+6      	; 0xa368 <create_chain+0x23c>
    a362:	46 2f       	mov	r20, r22
    a364:	37 2f       	mov	r19, r23
    a366:	28 2f       	mov	r18, r24
    a368:	64 2f       	mov	r22, r20
    a36a:	73 2f       	mov	r23, r19
    a36c:	82 2f       	mov	r24, r18
    a36e:	cd b7       	in	r28, 0x3d	; 61
    a370:	de b7       	in	r29, 0x3e	; 62
    a372:	e0 e1       	ldi	r30, 0x10	; 16
    a374:	0c 94 d9 e6 	jmp	0x1cdb2	; 0x1cdb2 <__epilogue_restores__+0x4>

0000a378 <remove_chain>:
    a378:	4f 92       	push	r4
    a37a:	5f 92       	push	r5
    a37c:	6f 92       	push	r6
    a37e:	7f 92       	push	r7
    a380:	af 92       	push	r10
    a382:	bf 92       	push	r11
    a384:	cf 92       	push	r12
    a386:	df 92       	push	r13
    a388:	ef 92       	push	r14
    a38a:	ff 92       	push	r15
    a38c:	0f 93       	push	r16
    a38e:	1f 93       	push	r17
    a390:	cf 93       	push	r28
    a392:	df 93       	push	r29
    a394:	5c 01       	movw	r10, r24
    a396:	6a 01       	movw	r12, r20
    a398:	7b 01       	movw	r14, r22
    a39a:	b9 01       	movw	r22, r18
    a39c:	a8 01       	movw	r20, r16
    a39e:	22 e0       	ldi	r18, 0x02	; 2
    a3a0:	c2 16       	cp	r12, r18
    a3a2:	d1 04       	cpc	r13, r1
    a3a4:	e1 04       	cpc	r14, r1
    a3a6:	f1 04       	cpc	r15, r1
    a3a8:	10 f4       	brcc	.+4      	; 0xa3ae <remove_chain+0x36>
    a3aa:	22 e0       	ldi	r18, 0x02	; 2
    a3ac:	27 c0       	rjmp	.+78     	; 0xa3fc <remove_chain+0x84>
    a3ae:	fc 01       	movw	r30, r24
    a3b0:	c0 81       	ld	r28, Z
    a3b2:	d1 81       	ldd	r29, Z+1	; 0x01
    a3b4:	89 8d       	ldd	r24, Y+25	; 0x19
    a3b6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a3b8:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a3ba:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a3bc:	c8 16       	cp	r12, r24
    a3be:	d9 06       	cpc	r13, r25
    a3c0:	ea 06       	cpc	r14, r26
    a3c2:	fb 06       	cpc	r15, r27
    a3c4:	90 f7       	brcc	.-28     	; 0xa3aa <remove_chain+0x32>
    a3c6:	41 15       	cp	r20, r1
    a3c8:	51 05       	cpc	r21, r1
    a3ca:	61 05       	cpc	r22, r1
    a3cc:	71 05       	cpc	r23, r1
    a3ce:	41 f0       	breq	.+16     	; 0xa3e0 <remove_chain+0x68>
    a3d0:	0f ef       	ldi	r16, 0xFF	; 255
    a3d2:	1f ef       	ldi	r17, 0xFF	; 255
    a3d4:	98 01       	movw	r18, r16
    a3d6:	ce 01       	movw	r24, r28
    a3d8:	3b dc       	rcall	.-1930   	; 0x9c50 <put_fat>
    a3da:	00 97       	sbiw	r24, 0x00	; 0
    a3dc:	09 f0       	breq	.+2      	; 0xa3e0 <remove_chain+0x68>
    a3de:	4c c0       	rjmp	.+152    	; 0xa478 <remove_chain+0x100>
    a3e0:	b7 01       	movw	r22, r14
    a3e2:	a6 01       	movw	r20, r12
    a3e4:	f5 01       	movw	r30, r10
    a3e6:	80 81       	ld	r24, Z
    a3e8:	91 81       	ldd	r25, Z+1	; 0x01
    a3ea:	2b dd       	rcall	.-1450   	; 0x9e42 <get_fat.isra.9>
    a3ec:	2b 01       	movw	r4, r22
    a3ee:	3c 01       	movw	r6, r24
    a3f0:	61 15       	cp	r22, r1
    a3f2:	71 05       	cpc	r23, r1
    a3f4:	81 05       	cpc	r24, r1
    a3f6:	91 05       	cpc	r25, r1
    a3f8:	19 f4       	brne	.+6      	; 0xa400 <remove_chain+0x88>
    a3fa:	20 e0       	ldi	r18, 0x00	; 0
    a3fc:	90 e0       	ldi	r25, 0x00	; 0
    a3fe:	3d c0       	rjmp	.+122    	; 0xa47a <remove_chain+0x102>
    a400:	61 30       	cpi	r22, 0x01	; 1
    a402:	71 05       	cpc	r23, r1
    a404:	81 05       	cpc	r24, r1
    a406:	91 05       	cpc	r25, r1
    a408:	81 f2       	breq	.-96     	; 0xa3aa <remove_chain+0x32>
    a40a:	6f 3f       	cpi	r22, 0xFF	; 255
    a40c:	7f 4f       	sbci	r23, 0xFF	; 255
    a40e:	8f 4f       	sbci	r24, 0xFF	; 255
    a410:	9f 4f       	sbci	r25, 0xFF	; 255
    a412:	81 f1       	breq	.+96     	; 0xa474 <remove_chain+0xfc>
    a414:	00 e0       	ldi	r16, 0x00	; 0
    a416:	10 e0       	ldi	r17, 0x00	; 0
    a418:	98 01       	movw	r18, r16
    a41a:	b7 01       	movw	r22, r14
    a41c:	a6 01       	movw	r20, r12
    a41e:	ce 01       	movw	r24, r28
    a420:	17 dc       	rcall	.-2002   	; 0x9c50 <put_fat>
    a422:	00 97       	sbiw	r24, 0x00	; 0
    a424:	49 f5       	brne	.+82     	; 0xa478 <remove_chain+0x100>
    a426:	89 89       	ldd	r24, Y+17	; 0x11
    a428:	9a 89       	ldd	r25, Y+18	; 0x12
    a42a:	ab 89       	ldd	r26, Y+19	; 0x13
    a42c:	bc 89       	ldd	r27, Y+20	; 0x14
    a42e:	49 8d       	ldd	r20, Y+25	; 0x19
    a430:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a432:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a434:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a436:	6a 01       	movw	r12, r20
    a438:	7b 01       	movw	r14, r22
    a43a:	e2 e0       	ldi	r30, 0x02	; 2
    a43c:	ce 1a       	sub	r12, r30
    a43e:	d1 08       	sbc	r13, r1
    a440:	e1 08       	sbc	r14, r1
    a442:	f1 08       	sbc	r15, r1
    a444:	8c 15       	cp	r24, r12
    a446:	9d 05       	cpc	r25, r13
    a448:	ae 05       	cpc	r26, r14
    a44a:	bf 05       	cpc	r27, r15
    a44c:	50 f4       	brcc	.+20     	; 0xa462 <remove_chain+0xea>
    a44e:	01 96       	adiw	r24, 0x01	; 1
    a450:	a1 1d       	adc	r26, r1
    a452:	b1 1d       	adc	r27, r1
    a454:	89 8b       	std	Y+17, r24	; 0x11
    a456:	9a 8b       	std	Y+18, r25	; 0x12
    a458:	ab 8b       	std	Y+19, r26	; 0x13
    a45a:	bc 8b       	std	Y+20, r27	; 0x14
    a45c:	8c 81       	ldd	r24, Y+4	; 0x04
    a45e:	81 60       	ori	r24, 0x01	; 1
    a460:	8c 83       	std	Y+4, r24	; 0x04
    a462:	73 01       	movw	r14, r6
    a464:	62 01       	movw	r12, r4
    a466:	44 16       	cp	r4, r20
    a468:	55 06       	cpc	r5, r21
    a46a:	66 06       	cpc	r6, r22
    a46c:	77 06       	cpc	r7, r23
    a46e:	08 f4       	brcc	.+2      	; 0xa472 <remove_chain+0xfa>
    a470:	b7 cf       	rjmp	.-146    	; 0xa3e0 <remove_chain+0x68>
    a472:	c3 cf       	rjmp	.-122    	; 0xa3fa <remove_chain+0x82>
    a474:	21 e0       	ldi	r18, 0x01	; 1
    a476:	c2 cf       	rjmp	.-124    	; 0xa3fc <remove_chain+0x84>
    a478:	28 2f       	mov	r18, r24
    a47a:	82 2f       	mov	r24, r18
    a47c:	df 91       	pop	r29
    a47e:	cf 91       	pop	r28
    a480:	1f 91       	pop	r17
    a482:	0f 91       	pop	r16
    a484:	ff 90       	pop	r15
    a486:	ef 90       	pop	r14
    a488:	df 90       	pop	r13
    a48a:	cf 90       	pop	r12
    a48c:	bf 90       	pop	r11
    a48e:	af 90       	pop	r10
    a490:	7f 90       	pop	r7
    a492:	6f 90       	pop	r6
    a494:	5f 90       	pop	r5
    a496:	4f 90       	pop	r4
    a498:	08 95       	ret

0000a49a <dir_next>:
    a49a:	4f 92       	push	r4
    a49c:	5f 92       	push	r5
    a49e:	6f 92       	push	r6
    a4a0:	7f 92       	push	r7
    a4a2:	af 92       	push	r10
    a4a4:	bf 92       	push	r11
    a4a6:	cf 92       	push	r12
    a4a8:	df 92       	push	r13
    a4aa:	ef 92       	push	r14
    a4ac:	ff 92       	push	r15
    a4ae:	0f 93       	push	r16
    a4b0:	1f 93       	push	r17
    a4b2:	cf 93       	push	r28
    a4b4:	df 93       	push	r29
    a4b6:	ec 01       	movw	r28, r24
    a4b8:	08 81       	ld	r16, Y
    a4ba:	19 81       	ldd	r17, Y+1	; 0x01
    a4bc:	ce 84       	ldd	r12, Y+14	; 0x0e
    a4be:	df 84       	ldd	r13, Y+15	; 0x0f
    a4c0:	e8 88       	ldd	r14, Y+16	; 0x10
    a4c2:	f9 88       	ldd	r15, Y+17	; 0x11
    a4c4:	80 e2       	ldi	r24, 0x20	; 32
    a4c6:	c8 0e       	add	r12, r24
    a4c8:	d1 1c       	adc	r13, r1
    a4ca:	e1 1c       	adc	r14, r1
    a4cc:	f1 1c       	adc	r15, r1
    a4ce:	c1 14       	cp	r12, r1
    a4d0:	d1 04       	cpc	r13, r1
    a4d2:	e0 e2       	ldi	r30, 0x20	; 32
    a4d4:	ee 06       	cpc	r14, r30
    a4d6:	f1 04       	cpc	r15, r1
    a4d8:	20 f0       	brcs	.+8      	; 0xa4e2 <dir_next+0x48>
    a4da:	1e 8a       	std	Y+22, r1	; 0x16
    a4dc:	1f 8a       	std	Y+23, r1	; 0x17
    a4de:	18 8e       	std	Y+24, r1	; 0x18
    a4e0:	19 8e       	std	Y+25, r1	; 0x19
    a4e2:	8e 89       	ldd	r24, Y+22	; 0x16
    a4e4:	9f 89       	ldd	r25, Y+23	; 0x17
    a4e6:	a8 8d       	ldd	r26, Y+24	; 0x18
    a4e8:	b9 8d       	ldd	r27, Y+25	; 0x19
    a4ea:	00 97       	sbiw	r24, 0x00	; 0
    a4ec:	a1 05       	cpc	r26, r1
    a4ee:	b1 05       	cpc	r27, r1
    a4f0:	09 f4       	brne	.+2      	; 0xa4f4 <dir_next+0x5a>
    a4f2:	a7 c0       	rjmp	.+334    	; 0xa642 <dir_next+0x1a8>
    a4f4:	5b 01       	movw	r10, r22
    a4f6:	b7 01       	movw	r22, r14
    a4f8:	a6 01       	movw	r20, r12
    a4fa:	51 70       	andi	r21, 0x01	; 1
    a4fc:	66 27       	eor	r22, r22
    a4fe:	77 27       	eor	r23, r23
    a500:	45 2b       	or	r20, r21
    a502:	46 2b       	or	r20, r22
    a504:	47 2b       	or	r20, r23
    a506:	09 f0       	breq	.+2      	; 0xa50a <dir_next+0x70>
    a508:	8d c0       	rjmp	.+282    	; 0xa624 <dir_next+0x18a>
    a50a:	01 96       	adiw	r24, 0x01	; 1
    a50c:	a1 1d       	adc	r26, r1
    a50e:	b1 1d       	adc	r27, r1
    a510:	8e 8b       	std	Y+22, r24	; 0x16
    a512:	9f 8b       	std	Y+23, r25	; 0x17
    a514:	a8 8f       	std	Y+24, r26	; 0x18
    a516:	b9 8f       	std	Y+25, r27	; 0x19
    a518:	4a 89       	ldd	r20, Y+18	; 0x12
    a51a:	5b 89       	ldd	r21, Y+19	; 0x13
    a51c:	6c 89       	ldd	r22, Y+20	; 0x14
    a51e:	7d 89       	ldd	r23, Y+21	; 0x15
    a520:	f8 01       	movw	r30, r16
    a522:	41 15       	cp	r20, r1
    a524:	51 05       	cpc	r21, r1
    a526:	61 05       	cpc	r22, r1
    a528:	71 05       	cpc	r23, r1
    a52a:	c1 f4       	brne	.+48     	; 0xa55c <dir_next+0xc2>
    a52c:	87 81       	ldd	r24, Z+7	; 0x07
    a52e:	90 85       	ldd	r25, Z+8	; 0x08
    a530:	a0 e0       	ldi	r26, 0x00	; 0
    a532:	b0 e0       	ldi	r27, 0x00	; 0
    a534:	b7 01       	movw	r22, r14
    a536:	a6 01       	movw	r20, r12
    a538:	35 e0       	ldi	r19, 0x05	; 5
    a53a:	76 95       	lsr	r23
    a53c:	67 95       	ror	r22
    a53e:	57 95       	ror	r21
    a540:	47 95       	ror	r20
    a542:	3a 95       	dec	r19
    a544:	d1 f7       	brne	.-12     	; 0xa53a <dir_next+0xa0>
    a546:	48 17       	cp	r20, r24
    a548:	59 07       	cpc	r21, r25
    a54a:	6a 07       	cpc	r22, r26
    a54c:	7b 07       	cpc	r23, r27
    a54e:	08 f4       	brcc	.+2      	; 0xa552 <dir_next+0xb8>
    a550:	69 c0       	rjmp	.+210    	; 0xa624 <dir_next+0x18a>
    a552:	1e 8a       	std	Y+22, r1	; 0x16
    a554:	1f 8a       	std	Y+23, r1	; 0x17
    a556:	18 8e       	std	Y+24, r1	; 0x18
    a558:	19 8e       	std	Y+25, r1	; 0x19
    a55a:	73 c0       	rjmp	.+230    	; 0xa642 <dir_next+0x1a8>
    a55c:	81 85       	ldd	r24, Z+9	; 0x09
    a55e:	92 85       	ldd	r25, Z+10	; 0x0a
    a560:	01 97       	sbiw	r24, 0x01	; 1
    a562:	a0 e0       	ldi	r26, 0x00	; 0
    a564:	b0 e0       	ldi	r27, 0x00	; 0
    a566:	26 01       	movw	r4, r12
    a568:	37 01       	movw	r6, r14
    a56a:	29 e0       	ldi	r18, 0x09	; 9
    a56c:	76 94       	lsr	r7
    a56e:	67 94       	ror	r6
    a570:	57 94       	ror	r5
    a572:	47 94       	ror	r4
    a574:	2a 95       	dec	r18
    a576:	d1 f7       	brne	.-12     	; 0xa56c <dir_next+0xd2>
    a578:	84 21       	and	r24, r4
    a57a:	95 21       	and	r25, r5
    a57c:	a6 21       	and	r26, r6
    a57e:	b7 21       	and	r27, r7
    a580:	89 2b       	or	r24, r25
    a582:	8a 2b       	or	r24, r26
    a584:	8b 2b       	or	r24, r27
    a586:	09 f0       	breq	.+2      	; 0xa58a <dir_next+0xf0>
    a588:	4d c0       	rjmp	.+154    	; 0xa624 <dir_next+0x18a>
    a58a:	c8 01       	movw	r24, r16
    a58c:	5a dc       	rcall	.-1868   	; 0x9e42 <get_fat.isra.9>
    a58e:	2b 01       	movw	r4, r22
    a590:	3c 01       	movw	r6, r24
    a592:	62 30       	cpi	r22, 0x02	; 2
    a594:	71 05       	cpc	r23, r1
    a596:	81 05       	cpc	r24, r1
    a598:	91 05       	cpc	r25, r1
    a59a:	18 f4       	brcc	.+6      	; 0xa5a2 <dir_next+0x108>
    a59c:	82 e0       	ldi	r24, 0x02	; 2
    a59e:	90 e0       	ldi	r25, 0x00	; 0
    a5a0:	55 c0       	rjmp	.+170    	; 0xa64c <dir_next+0x1b2>
    a5a2:	8f ef       	ldi	r24, 0xFF	; 255
    a5a4:	48 16       	cp	r4, r24
    a5a6:	58 06       	cpc	r5, r24
    a5a8:	68 06       	cpc	r6, r24
    a5aa:	78 06       	cpc	r7, r24
    a5ac:	19 f4       	brne	.+6      	; 0xa5b4 <dir_next+0x11a>
    a5ae:	81 e0       	ldi	r24, 0x01	; 1
    a5b0:	90 e0       	ldi	r25, 0x00	; 0
    a5b2:	4c c0       	rjmp	.+152    	; 0xa64c <dir_next+0x1b2>
    a5b4:	f8 01       	movw	r30, r16
    a5b6:	81 8d       	ldd	r24, Z+25	; 0x19
    a5b8:	92 8d       	ldd	r25, Z+26	; 0x1a
    a5ba:	a3 8d       	ldd	r26, Z+27	; 0x1b
    a5bc:	b4 8d       	ldd	r27, Z+28	; 0x1c
    a5be:	48 16       	cp	r4, r24
    a5c0:	59 06       	cpc	r5, r25
    a5c2:	6a 06       	cpc	r6, r26
    a5c4:	7b 06       	cpc	r7, r27
    a5c6:	08 f1       	brcs	.+66     	; 0xa60a <dir_next+0x170>
    a5c8:	ab 28       	or	r10, r11
    a5ca:	19 f2       	breq	.-122    	; 0xa552 <dir_next+0xb8>
    a5cc:	4a 89       	ldd	r20, Y+18	; 0x12
    a5ce:	5b 89       	ldd	r21, Y+19	; 0x13
    a5d0:	6c 89       	ldd	r22, Y+20	; 0x14
    a5d2:	7d 89       	ldd	r23, Y+21	; 0x15
    a5d4:	ce 01       	movw	r24, r28
    a5d6:	aa dd       	rcall	.-1196   	; 0xa12c <create_chain>
    a5d8:	2b 01       	movw	r4, r22
    a5da:	3c 01       	movw	r6, r24
    a5dc:	61 15       	cp	r22, r1
    a5de:	71 05       	cpc	r23, r1
    a5e0:	81 05       	cpc	r24, r1
    a5e2:	91 05       	cpc	r25, r1
    a5e4:	89 f1       	breq	.+98     	; 0xa648 <dir_next+0x1ae>
    a5e6:	61 30       	cpi	r22, 0x01	; 1
    a5e8:	71 05       	cpc	r23, r1
    a5ea:	81 05       	cpc	r24, r1
    a5ec:	91 05       	cpc	r25, r1
    a5ee:	b1 f2       	breq	.-84     	; 0xa59c <dir_next+0x102>
    a5f0:	8f ef       	ldi	r24, 0xFF	; 255
    a5f2:	48 16       	cp	r4, r24
    a5f4:	58 06       	cpc	r5, r24
    a5f6:	68 06       	cpc	r6, r24
    a5f8:	78 06       	cpc	r7, r24
    a5fa:	c9 f2       	breq	.-78     	; 0xa5ae <dir_next+0x114>
    a5fc:	b3 01       	movw	r22, r6
    a5fe:	a2 01       	movw	r20, r4
    a600:	c8 01       	movw	r24, r16
    a602:	0e 94 ab 4a 	call	0x9556	; 0x9556 <dir_clear>
    a606:	89 2b       	or	r24, r25
    a608:	91 f6       	brne	.-92     	; 0xa5ae <dir_next+0x114>
    a60a:	4a 8a       	std	Y+18, r4	; 0x12
    a60c:	5b 8a       	std	Y+19, r5	; 0x13
    a60e:	6c 8a       	std	Y+20, r6	; 0x14
    a610:	7d 8a       	std	Y+21, r7	; 0x15
    a612:	b3 01       	movw	r22, r6
    a614:	a2 01       	movw	r20, r4
    a616:	c8 01       	movw	r24, r16
    a618:	0e 94 c4 47 	call	0x8f88	; 0x8f88 <clst2sect>
    a61c:	6e 8b       	std	Y+22, r22	; 0x16
    a61e:	7f 8b       	std	Y+23, r23	; 0x17
    a620:	88 8f       	std	Y+24, r24	; 0x18
    a622:	99 8f       	std	Y+25, r25	; 0x19
    a624:	ce 86       	std	Y+14, r12	; 0x0e
    a626:	df 86       	std	Y+15, r13	; 0x0f
    a628:	e8 8a       	std	Y+16, r14	; 0x10
    a62a:	f9 8a       	std	Y+17, r15	; 0x11
    a62c:	0b 5c       	subi	r16, 0xCB	; 203
    a62e:	1f 4f       	sbci	r17, 0xFF	; 255
    a630:	e1 e0       	ldi	r30, 0x01	; 1
    a632:	de 22       	and	r13, r30
    a634:	c0 0e       	add	r12, r16
    a636:	d1 1e       	adc	r13, r17
    a638:	db 8e       	std	Y+27, r13	; 0x1b
    a63a:	ca 8e       	std	Y+26, r12	; 0x1a
    a63c:	80 e0       	ldi	r24, 0x00	; 0
    a63e:	90 e0       	ldi	r25, 0x00	; 0
    a640:	05 c0       	rjmp	.+10     	; 0xa64c <dir_next+0x1b2>
    a642:	84 e0       	ldi	r24, 0x04	; 4
    a644:	90 e0       	ldi	r25, 0x00	; 0
    a646:	02 c0       	rjmp	.+4      	; 0xa64c <dir_next+0x1b2>
    a648:	87 e0       	ldi	r24, 0x07	; 7
    a64a:	90 e0       	ldi	r25, 0x00	; 0
    a64c:	df 91       	pop	r29
    a64e:	cf 91       	pop	r28
    a650:	1f 91       	pop	r17
    a652:	0f 91       	pop	r16
    a654:	ff 90       	pop	r15
    a656:	ef 90       	pop	r14
    a658:	df 90       	pop	r13
    a65a:	cf 90       	pop	r12
    a65c:	bf 90       	pop	r11
    a65e:	af 90       	pop	r10
    a660:	7f 90       	pop	r7
    a662:	6f 90       	pop	r6
    a664:	5f 90       	pop	r5
    a666:	4f 90       	pop	r4
    a668:	08 95       	ret

0000a66a <dir_alloc>:
    a66a:	a0 e0       	ldi	r26, 0x00	; 0
    a66c:	b0 e0       	ldi	r27, 0x00	; 0
    a66e:	eb e3       	ldi	r30, 0x3B	; 59
    a670:	f3 e5       	ldi	r31, 0x53	; 83
    a672:	0c 94 c5 e6 	jmp	0x1cd8a	; 0x1cd8a <__prologue_saves__+0x14>
    a676:	ec 01       	movw	r28, r24
    a678:	6b 01       	movw	r12, r22
    a67a:	e8 80       	ld	r14, Y
    a67c:	f9 80       	ldd	r15, Y+1	; 0x01
    a67e:	40 e0       	ldi	r20, 0x00	; 0
    a680:	50 e0       	ldi	r21, 0x00	; 0
    a682:	ba 01       	movw	r22, r20
    a684:	92 dc       	rcall	.-1756   	; 0x9faa <dir_sdi>
    a686:	00 97       	sbiw	r24, 0x00	; 0
    a688:	f9 f4       	brne	.+62     	; 0xa6c8 <dir_alloc+0x5e>
    a68a:	00 e0       	ldi	r16, 0x00	; 0
    a68c:	10 e0       	ldi	r17, 0x00	; 0
    a68e:	4e 89       	ldd	r20, Y+22	; 0x16
    a690:	5f 89       	ldd	r21, Y+23	; 0x17
    a692:	68 8d       	ldd	r22, Y+24	; 0x18
    a694:	79 8d       	ldd	r23, Y+25	; 0x19
    a696:	c7 01       	movw	r24, r14
    a698:	06 d8       	rcall	.-4084   	; 0x96a6 <move_window>
    a69a:	00 97       	sbiw	r24, 0x00	; 0
    a69c:	a9 f4       	brne	.+42     	; 0xa6c8 <dir_alloc+0x5e>
    a69e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    a6a0:	fb 8d       	ldd	r31, Y+27	; 0x1b
    a6a2:	20 81       	ld	r18, Z
    a6a4:	25 3e       	cpi	r18, 0xE5	; 229
    a6a6:	11 f0       	breq	.+4      	; 0xa6ac <dir_alloc+0x42>
    a6a8:	21 11       	cpse	r18, r1
    a6aa:	06 c0       	rjmp	.+12     	; 0xa6b8 <dir_alloc+0x4e>
    a6ac:	0f 5f       	subi	r16, 0xFF	; 255
    a6ae:	1f 4f       	sbci	r17, 0xFF	; 255
    a6b0:	0c 15       	cp	r16, r12
    a6b2:	1d 05       	cpc	r17, r13
    a6b4:	19 f4       	brne	.+6      	; 0xa6bc <dir_alloc+0x52>
    a6b6:	0d c0       	rjmp	.+26     	; 0xa6d2 <dir_alloc+0x68>
    a6b8:	00 e0       	ldi	r16, 0x00	; 0
    a6ba:	10 e0       	ldi	r17, 0x00	; 0
    a6bc:	61 e0       	ldi	r22, 0x01	; 1
    a6be:	70 e0       	ldi	r23, 0x00	; 0
    a6c0:	ce 01       	movw	r24, r28
    a6c2:	eb de       	rcall	.-554    	; 0xa49a <dir_next>
    a6c4:	00 97       	sbiw	r24, 0x00	; 0
    a6c6:	19 f3       	breq	.-58     	; 0xa68e <dir_alloc+0x24>
    a6c8:	84 30       	cpi	r24, 0x04	; 4
    a6ca:	91 05       	cpc	r25, r1
    a6cc:	11 f4       	brne	.+4      	; 0xa6d2 <dir_alloc+0x68>
    a6ce:	87 e0       	ldi	r24, 0x07	; 7
    a6d0:	90 e0       	ldi	r25, 0x00	; 0
    a6d2:	cd b7       	in	r28, 0x3d	; 61
    a6d4:	de b7       	in	r29, 0x3e	; 62
    a6d6:	e8 e0       	ldi	r30, 0x08	; 8
    a6d8:	0c 94 e1 e6 	jmp	0x1cdc2	; 0x1cdc2 <__epilogue_restores__+0x14>

0000a6dc <dir_read>:
    a6dc:	a0 e0       	ldi	r26, 0x00	; 0
    a6de:	b0 e0       	ldi	r27, 0x00	; 0
    a6e0:	e4 e7       	ldi	r30, 0x74	; 116
    a6e2:	f3 e5       	ldi	r31, 0x53	; 83
    a6e4:	0c 94 c1 e6 	jmp	0x1cd82	; 0x1cd82 <__prologue_saves__+0xc>
    a6e8:	ec 01       	movw	r28, r24
    a6ea:	7b 01       	movw	r14, r22
    a6ec:	a8 80       	ld	r10, Y
    a6ee:	b9 80       	ldd	r11, Y+1	; 0x01
    a6f0:	dd 24       	eor	r13, r13
    a6f2:	da 94       	dec	r13
    a6f4:	1f ef       	ldi	r17, 0xFF	; 255
    a6f6:	84 e0       	ldi	r24, 0x04	; 4
    a6f8:	90 e0       	ldi	r25, 0x00	; 0
    a6fa:	fd e0       	ldi	r31, 0x0D	; 13
    a6fc:	cf 2e       	mov	r12, r31
    a6fe:	4e 89       	ldd	r20, Y+22	; 0x16
    a700:	5f 89       	ldd	r21, Y+23	; 0x17
    a702:	68 8d       	ldd	r22, Y+24	; 0x18
    a704:	79 8d       	ldd	r23, Y+25	; 0x19
    a706:	41 15       	cp	r20, r1
    a708:	51 05       	cpc	r21, r1
    a70a:	61 05       	cpc	r22, r1
    a70c:	71 05       	cpc	r23, r1
    a70e:	09 f4       	brne	.+2      	; 0xa712 <dir_read+0x36>
    a710:	9a c0       	rjmp	.+308    	; 0xa846 <dir_read+0x16a>
    a712:	c5 01       	movw	r24, r10
    a714:	0e 94 53 4b 	call	0x96a6	; 0x96a6 <move_window>
    a718:	00 97       	sbiw	r24, 0x00	; 0
    a71a:	09 f0       	breq	.+2      	; 0xa71e <dir_read+0x42>
    a71c:	96 c0       	rjmp	.+300    	; 0xa84a <dir_read+0x16e>
    a71e:	8a 8c       	ldd	r8, Y+26	; 0x1a
    a720:	9b 8c       	ldd	r9, Y+27	; 0x1b
    a722:	f4 01       	movw	r30, r8
    a724:	00 81       	ld	r16, Z
    a726:	00 23       	and	r16, r16
    a728:	09 f4       	brne	.+2      	; 0xa72c <dir_read+0x50>
    a72a:	97 c0       	rjmp	.+302    	; 0xa85a <dir_read+0x17e>
    a72c:	83 85       	ldd	r24, Z+11	; 0x0b
    a72e:	8f 73       	andi	r24, 0x3F	; 63
    a730:	8c 83       	std	Y+4, r24	; 0x04
    a732:	05 3e       	cpi	r16, 0xE5	; 229
    a734:	09 f4       	brne	.+2      	; 0xa738 <dir_read+0x5c>
    a736:	7e c0       	rjmp	.+252    	; 0xa834 <dir_read+0x158>
    a738:	0e 32       	cpi	r16, 0x2E	; 46
    a73a:	09 f4       	brne	.+2      	; 0xa73e <dir_read+0x62>
    a73c:	7b c0       	rjmp	.+246    	; 0xa834 <dir_read+0x158>
    a73e:	21 e0       	ldi	r18, 0x01	; 1
    a740:	30 e0       	ldi	r19, 0x00	; 0
    a742:	98 2f       	mov	r25, r24
    a744:	9f 71       	andi	r25, 0x1F	; 31
    a746:	98 30       	cpi	r25, 0x08	; 8
    a748:	11 f0       	breq	.+4      	; 0xa74e <dir_read+0x72>
    a74a:	20 e0       	ldi	r18, 0x00	; 0
    a74c:	30 e0       	ldi	r19, 0x00	; 0
    a74e:	2e 15       	cp	r18, r14
    a750:	3f 05       	cpc	r19, r15
    a752:	09 f0       	breq	.+2      	; 0xa756 <dir_read+0x7a>
    a754:	6f c0       	rjmp	.+222    	; 0xa834 <dir_read+0x158>
    a756:	8f 30       	cpi	r24, 0x0F	; 15
    a758:	09 f0       	breq	.+2      	; 0xa75c <dir_read+0x80>
    a75a:	5c c0       	rjmp	.+184    	; 0xa814 <dir_read+0x138>
    a75c:	06 ff       	sbrs	r16, 6
    a75e:	0c c0       	rjmp	.+24     	; 0xa778 <dir_read+0x9c>
    a760:	f4 01       	movw	r30, r8
    a762:	85 85       	ldd	r24, Z+13	; 0x0d
    a764:	0f 7b       	andi	r16, 0xBF	; 191
    a766:	4e 85       	ldd	r20, Y+14	; 0x0e
    a768:	5f 85       	ldd	r21, Y+15	; 0x0f
    a76a:	68 89       	ldd	r22, Y+16	; 0x10
    a76c:	79 89       	ldd	r23, Y+17	; 0x11
    a76e:	48 a7       	std	Y+40, r20	; 0x28
    a770:	59 a7       	std	Y+41, r21	; 0x29
    a772:	6a a7       	std	Y+42, r22	; 0x2a
    a774:	7b a7       	std	Y+43, r23	; 0x2b
    a776:	03 c0       	rjmp	.+6      	; 0xa77e <dir_read+0xa2>
    a778:	10 13       	cpse	r17, r16
    a77a:	5c c0       	rjmp	.+184    	; 0xa834 <dir_read+0x158>
    a77c:	8d 2d       	mov	r24, r13
    a77e:	f4 01       	movw	r30, r8
    a780:	d5 84       	ldd	r13, Z+13	; 0x0d
    a782:	d8 12       	cpse	r13, r24
    a784:	56 c0       	rjmp	.+172    	; 0xa832 <dir_read+0x156>
    a786:	82 8d       	ldd	r24, Z+26	; 0x1a
    a788:	93 8d       	ldd	r25, Z+27	; 0x1b
    a78a:	89 2b       	or	r24, r25
    a78c:	09 f0       	breq	.+2      	; 0xa790 <dir_read+0xb4>
    a78e:	52 c0       	rjmp	.+164    	; 0xa834 <dir_read+0x158>
    a790:	f5 01       	movw	r30, r10
    a792:	63 85       	ldd	r22, Z+11	; 0x0b
    a794:	74 85       	ldd	r23, Z+12	; 0x0c
    a796:	f4 01       	movw	r30, r8
    a798:	80 81       	ld	r24, Z
    a79a:	90 e0       	ldi	r25, 0x00	; 0
    a79c:	8f 7b       	andi	r24, 0xBF	; 191
    a79e:	01 97       	sbiw	r24, 0x01	; 1
    a7a0:	c8 9e       	mul	r12, r24
    a7a2:	90 01       	movw	r18, r0
    a7a4:	c9 9e       	mul	r12, r25
    a7a6:	30 0d       	add	r19, r0
    a7a8:	11 24       	eor	r1, r1
    a7aa:	ab ee       	ldi	r26, 0xEB	; 235
    a7ac:	b4 e0       	ldi	r27, 0x04	; 4
    a7ae:	81 e0       	ldi	r24, 0x01	; 1
    a7b0:	90 e0       	ldi	r25, 0x00	; 0
    a7b2:	4d 91       	ld	r20, X+
    a7b4:	f4 01       	movw	r30, r8
    a7b6:	e4 0f       	add	r30, r20
    a7b8:	f1 1d       	adc	r31, r1
    a7ba:	40 81       	ld	r20, Z
    a7bc:	51 81       	ldd	r21, Z+1	; 0x01
    a7be:	00 97       	sbiw	r24, 0x00	; 0
    a7c0:	81 f0       	breq	.+32     	; 0xa7e2 <dir_read+0x106>
    a7c2:	2f 3f       	cpi	r18, 0xFF	; 255
    a7c4:	31 05       	cpc	r19, r1
    a7c6:	09 f0       	breq	.+2      	; 0xa7ca <dir_read+0xee>
    a7c8:	a8 f5       	brcc	.+106    	; 0xa834 <dir_read+0x158>
    a7ca:	c9 01       	movw	r24, r18
    a7cc:	88 0f       	add	r24, r24
    a7ce:	99 1f       	adc	r25, r25
    a7d0:	86 0f       	add	r24, r22
    a7d2:	97 1f       	adc	r25, r23
    a7d4:	fc 01       	movw	r30, r24
    a7d6:	51 83       	std	Z+1, r21	; 0x01
    a7d8:	40 83       	st	Z, r20
    a7da:	ca 01       	movw	r24, r20
    a7dc:	2f 5f       	subi	r18, 0xFF	; 255
    a7de:	3f 4f       	sbci	r19, 0xFF	; 255
    a7e0:	03 c0       	rjmp	.+6      	; 0xa7e8 <dir_read+0x10c>
    a7e2:	4f 3f       	cpi	r20, 0xFF	; 255
    a7e4:	5f 4f       	sbci	r21, 0xFF	; 255
    a7e6:	31 f5       	brne	.+76     	; 0xa834 <dir_read+0x158>
    a7e8:	44 e0       	ldi	r20, 0x04	; 4
    a7ea:	a8 3f       	cpi	r26, 0xF8	; 248
    a7ec:	b4 07       	cpc	r27, r20
    a7ee:	09 f7       	brne	.-62     	; 0xa7b2 <dir_read+0xd6>
    a7f0:	f4 01       	movw	r30, r8
    a7f2:	40 81       	ld	r20, Z
    a7f4:	46 ff       	sbrs	r20, 6
    a7f6:	2e c0       	rjmp	.+92     	; 0xa854 <dir_read+0x178>
    a7f8:	89 2b       	or	r24, r25
    a7fa:	61 f1       	breq	.+88     	; 0xa854 <dir_read+0x178>
    a7fc:	2f 3f       	cpi	r18, 0xFF	; 255
    a7fe:	31 05       	cpc	r19, r1
    a800:	09 f0       	breq	.+2      	; 0xa804 <dir_read+0x128>
    a802:	c0 f4       	brcc	.+48     	; 0xa834 <dir_read+0x158>
    a804:	22 0f       	add	r18, r18
    a806:	33 1f       	adc	r19, r19
    a808:	fb 01       	movw	r30, r22
    a80a:	e2 0f       	add	r30, r18
    a80c:	f3 1f       	adc	r31, r19
    a80e:	11 82       	std	Z+1, r1	; 0x01
    a810:	10 82       	st	Z, r1
    a812:	20 c0       	rjmp	.+64     	; 0xa854 <dir_read+0x178>
    a814:	11 11       	cpse	r17, r1
    a816:	05 c0       	rjmp	.+10     	; 0xa822 <dir_read+0x146>
    a818:	c4 01       	movw	r24, r8
    a81a:	0e 94 28 48 	call	0x9050	; 0x9050 <sum_sfn>
    a81e:	d8 16       	cp	r13, r24
    a820:	f9 f0       	breq	.+62     	; 0xa860 <dir_read+0x184>
    a822:	8f ef       	ldi	r24, 0xFF	; 255
    a824:	9f ef       	ldi	r25, 0xFF	; 255
    a826:	dc 01       	movw	r26, r24
    a828:	88 a7       	std	Y+40, r24	; 0x28
    a82a:	99 a7       	std	Y+41, r25	; 0x29
    a82c:	aa a7       	std	Y+42, r26	; 0x2a
    a82e:	bb a7       	std	Y+43, r27	; 0x2b
    a830:	17 c0       	rjmp	.+46     	; 0xa860 <dir_read+0x184>
    a832:	d8 2e       	mov	r13, r24
    a834:	1f ef       	ldi	r17, 0xFF	; 255
    a836:	60 e0       	ldi	r22, 0x00	; 0
    a838:	70 e0       	ldi	r23, 0x00	; 0
    a83a:	ce 01       	movw	r24, r28
    a83c:	2e de       	rcall	.-932    	; 0xa49a <dir_next>
    a83e:	00 97       	sbiw	r24, 0x00	; 0
    a840:	09 f4       	brne	.+2      	; 0xa844 <dir_read+0x168>
    a842:	5d cf       	rjmp	.-326    	; 0xa6fe <dir_read+0x22>
    a844:	02 c0       	rjmp	.+4      	; 0xa84a <dir_read+0x16e>
    a846:	00 97       	sbiw	r24, 0x00	; 0
    a848:	59 f0       	breq	.+22     	; 0xa860 <dir_read+0x184>
    a84a:	1e 8a       	std	Y+22, r1	; 0x16
    a84c:	1f 8a       	std	Y+23, r1	; 0x17
    a84e:	18 8e       	std	Y+24, r1	; 0x18
    a850:	19 8e       	std	Y+25, r1	; 0x19
    a852:	08 c0       	rjmp	.+16     	; 0xa864 <dir_read+0x188>
    a854:	1f ef       	ldi	r17, 0xFF	; 255
    a856:	10 0f       	add	r17, r16
    a858:	ee cf       	rjmp	.-36     	; 0xa836 <dir_read+0x15a>
    a85a:	84 e0       	ldi	r24, 0x04	; 4
    a85c:	90 e0       	ldi	r25, 0x00	; 0
    a85e:	f5 cf       	rjmp	.-22     	; 0xa84a <dir_read+0x16e>
    a860:	80 e0       	ldi	r24, 0x00	; 0
    a862:	90 e0       	ldi	r25, 0x00	; 0
    a864:	cd b7       	in	r28, 0x3d	; 61
    a866:	de b7       	in	r29, 0x3e	; 62
    a868:	ec e0       	ldi	r30, 0x0C	; 12
    a86a:	0c 94 dd e6 	jmp	0x1cdba	; 0x1cdba <__epilogue_restores__+0xc>

0000a86e <dir_remove>:
    a86e:	a0 e0       	ldi	r26, 0x00	; 0
    a870:	b0 e0       	ldi	r27, 0x00	; 0
    a872:	ed e3       	ldi	r30, 0x3D	; 61
    a874:	f4 e5       	ldi	r31, 0x54	; 84
    a876:	0c 94 c3 e6 	jmp	0x1cd86	; 0x1cd86 <__prologue_saves__+0x10>
    a87a:	ec 01       	movw	r28, r24
    a87c:	08 81       	ld	r16, Y
    a87e:	19 81       	ldd	r17, Y+1	; 0x01
    a880:	ce 84       	ldd	r12, Y+14	; 0x0e
    a882:	df 84       	ldd	r13, Y+15	; 0x0f
    a884:	e8 88       	ldd	r14, Y+16	; 0x10
    a886:	f9 88       	ldd	r15, Y+17	; 0x11
    a888:	48 a5       	ldd	r20, Y+40	; 0x28
    a88a:	59 a5       	ldd	r21, Y+41	; 0x29
    a88c:	6a a5       	ldd	r22, Y+42	; 0x2a
    a88e:	7b a5       	ldd	r23, Y+43	; 0x2b
    a890:	4f 3f       	cpi	r20, 0xFF	; 255
    a892:	8f ef       	ldi	r24, 0xFF	; 255
    a894:	58 07       	cpc	r21, r24
    a896:	68 07       	cpc	r22, r24
    a898:	78 07       	cpc	r23, r24
    a89a:	29 f4       	brne	.+10     	; 0xa8a6 <dir_remove+0x38>
    a89c:	85 ee       	ldi	r24, 0xE5	; 229
    a89e:	b8 2e       	mov	r11, r24
    a8a0:	aa 24       	eor	r10, r10
    a8a2:	a3 94       	inc	r10
    a8a4:	19 c0       	rjmp	.+50     	; 0xa8d8 <dir_remove+0x6a>
    a8a6:	ce 01       	movw	r24, r28
    a8a8:	80 db       	rcall	.-2304   	; 0x9faa <dir_sdi>
    a8aa:	00 97       	sbiw	r24, 0x00	; 0
    a8ac:	19 f5       	brne	.+70     	; 0xa8f4 <dir_remove+0x86>
    a8ae:	f6 cf       	rjmp	.-20     	; 0xa89c <dir_remove+0x2e>
    a8b0:	ea 8d       	ldd	r30, Y+26	; 0x1a
    a8b2:	fb 8d       	ldd	r31, Y+27	; 0x1b
    a8b4:	b0 82       	st	Z, r11
    a8b6:	f8 01       	movw	r30, r16
    a8b8:	a3 82       	std	Z+3, r10	; 0x03
    a8ba:	4e 85       	ldd	r20, Y+14	; 0x0e
    a8bc:	5f 85       	ldd	r21, Y+15	; 0x0f
    a8be:	68 89       	ldd	r22, Y+16	; 0x10
    a8c0:	79 89       	ldd	r23, Y+17	; 0x11
    a8c2:	4c 15       	cp	r20, r12
    a8c4:	5d 05       	cpc	r21, r13
    a8c6:	6e 05       	cpc	r22, r14
    a8c8:	7f 05       	cpc	r23, r15
    a8ca:	a0 f4       	brcc	.+40     	; 0xa8f4 <dir_remove+0x86>
    a8cc:	60 e0       	ldi	r22, 0x00	; 0
    a8ce:	70 e0       	ldi	r23, 0x00	; 0
    a8d0:	ce 01       	movw	r24, r28
    a8d2:	e3 dd       	rcall	.-1082   	; 0xa49a <dir_next>
    a8d4:	00 97       	sbiw	r24, 0x00	; 0
    a8d6:	49 f4       	brne	.+18     	; 0xa8ea <dir_remove+0x7c>
    a8d8:	4e 89       	ldd	r20, Y+22	; 0x16
    a8da:	5f 89       	ldd	r21, Y+23	; 0x17
    a8dc:	68 8d       	ldd	r22, Y+24	; 0x18
    a8de:	79 8d       	ldd	r23, Y+25	; 0x19
    a8e0:	c8 01       	movw	r24, r16
    a8e2:	0e 94 53 4b 	call	0x96a6	; 0x96a6 <move_window>
    a8e6:	00 97       	sbiw	r24, 0x00	; 0
    a8e8:	19 f3       	breq	.-58     	; 0xa8b0 <dir_remove+0x42>
    a8ea:	84 30       	cpi	r24, 0x04	; 4
    a8ec:	91 05       	cpc	r25, r1
    a8ee:	11 f4       	brne	.+4      	; 0xa8f4 <dir_remove+0x86>
    a8f0:	82 e0       	ldi	r24, 0x02	; 2
    a8f2:	90 e0       	ldi	r25, 0x00	; 0
    a8f4:	cd b7       	in	r28, 0x3d	; 61
    a8f6:	de b7       	in	r29, 0x3e	; 62
    a8f8:	ea e0       	ldi	r30, 0x0A	; 10
    a8fa:	0c 94 df e6 	jmp	0x1cdbe	; 0x1cdbe <__epilogue_restores__+0x10>

0000a8fe <dir_find>:
    a8fe:	ac e0       	ldi	r26, 0x0C	; 12
    a900:	b0 e0       	ldi	r27, 0x00	; 0
    a902:	e5 e8       	ldi	r30, 0x85	; 133
    a904:	f4 e5       	ldi	r31, 0x54	; 84
    a906:	0c 94 bb e6 	jmp	0x1cd76	; 0x1cd76 <__prologue_saves__>
    a90a:	9c 87       	std	Y+12, r25	; 0x0c
    a90c:	8b 87       	std	Y+11, r24	; 0x0b
    a90e:	fc 01       	movw	r30, r24
    a910:	01 90       	ld	r0, Z+
    a912:	f0 81       	ld	r31, Z
    a914:	e0 2d       	mov	r30, r0
    a916:	fc 83       	std	Y+4, r31	; 0x04
    a918:	eb 83       	std	Y+3, r30	; 0x03
    a91a:	40 e0       	ldi	r20, 0x00	; 0
    a91c:	50 e0       	ldi	r21, 0x00	; 0
    a91e:	ba 01       	movw	r22, r20
    a920:	44 db       	rcall	.-2424   	; 0x9faa <dir_sdi>
    a922:	00 97       	sbiw	r24, 0x00	; 0
    a924:	09 f0       	breq	.+2      	; 0xa928 <dir_find+0x2a>
    a926:	e7 c0       	rjmp	.+462    	; 0xaaf6 <dir_find+0x1f8>
    a928:	8f ef       	ldi	r24, 0xFF	; 255
    a92a:	9f ef       	ldi	r25, 0xFF	; 255
    a92c:	dc 01       	movw	r26, r24
    a92e:	eb 85       	ldd	r30, Y+11	; 0x0b
    a930:	fc 85       	ldd	r31, Y+12	; 0x0c
    a932:	80 a7       	std	Z+40, r24	; 0x28
    a934:	91 a7       	std	Z+41, r25	; 0x29
    a936:	a2 a7       	std	Z+42, r26	; 0x2a
    a938:	b3 a7       	std	Z+43, r27	; 0x2b
    a93a:	0f ef       	ldi	r16, 0xFF	; 255
    a93c:	1f ef       	ldi	r17, 0xFF	; 255
    a93e:	44 24       	eor	r4, r4
    a940:	4a 94       	dec	r4
    a942:	54 2c       	mov	r5, r4
    a944:	32 01       	movw	r6, r4
    a946:	7c 96       	adiw	r30, 0x1c	; 28
    a948:	fa 87       	std	Y+10, r31	; 0x0a
    a94a:	e9 87       	std	Y+9, r30	; 0x09
    a94c:	eb 85       	ldd	r30, Y+11	; 0x0b
    a94e:	fc 85       	ldd	r31, Y+12	; 0x0c
    a950:	46 89       	ldd	r20, Z+22	; 0x16
    a952:	57 89       	ldd	r21, Z+23	; 0x17
    a954:	60 8d       	ldd	r22, Z+24	; 0x18
    a956:	71 8d       	ldd	r23, Z+25	; 0x19
    a958:	8b 81       	ldd	r24, Y+3	; 0x03
    a95a:	9c 81       	ldd	r25, Y+4	; 0x04
    a95c:	0e 94 53 4b 	call	0x96a6	; 0x96a6 <move_window>
    a960:	00 97       	sbiw	r24, 0x00	; 0
    a962:	09 f0       	breq	.+2      	; 0xa966 <dir_find+0x68>
    a964:	c8 c0       	rjmp	.+400    	; 0xaaf6 <dir_find+0x1f8>
    a966:	eb 85       	ldd	r30, Y+11	; 0x0b
    a968:	fc 85       	ldd	r31, Y+12	; 0x0c
    a96a:	e2 8c       	ldd	r14, Z+26	; 0x1a
    a96c:	f3 8c       	ldd	r15, Z+27	; 0x1b
    a96e:	f7 01       	movw	r30, r14
    a970:	d0 80       	ld	r13, Z
    a972:	dd 20       	and	r13, r13
    a974:	09 f4       	brne	.+2      	; 0xa978 <dir_find+0x7a>
    a976:	c1 c0       	rjmp	.+386    	; 0xaafa <dir_find+0x1fc>
    a978:	93 85       	ldd	r25, Z+11	; 0x0b
    a97a:	89 2f       	mov	r24, r25
    a97c:	8f 73       	andi	r24, 0x3F	; 63
    a97e:	eb 85       	ldd	r30, Y+11	; 0x0b
    a980:	fc 85       	ldd	r31, Y+12	; 0x0c
    a982:	84 83       	std	Z+4, r24	; 0x04
    a984:	f5 ee       	ldi	r31, 0xE5	; 229
    a986:	df 16       	cp	r13, r31
    a988:	09 f4       	brne	.+2      	; 0xa98c <dir_find+0x8e>
    a98a:	a6 c0       	rjmp	.+332    	; 0xaad8 <dir_find+0x1da>
    a98c:	93 ff       	sbrs	r25, 3
    a98e:	04 c0       	rjmp	.+8      	; 0xa998 <dir_find+0x9a>
    a990:	8f 30       	cpi	r24, 0x0F	; 15
    a992:	09 f0       	breq	.+2      	; 0xa996 <dir_find+0x98>
    a994:	a1 c0       	rjmp	.+322    	; 0xaad8 <dir_find+0x1da>
    a996:	03 c0       	rjmp	.+6      	; 0xa99e <dir_find+0xa0>
    a998:	8f 30       	cpi	r24, 0x0F	; 15
    a99a:	09 f0       	breq	.+2      	; 0xa99e <dir_find+0xa0>
    a99c:	88 c0       	rjmp	.+272    	; 0xaaae <dir_find+0x1b0>
    a99e:	eb 85       	ldd	r30, Y+11	; 0x0b
    a9a0:	fc 85       	ldd	r31, Y+12	; 0x0c
    a9a2:	87 a1       	ldd	r24, Z+39	; 0x27
    a9a4:	86 fd       	sbrc	r24, 6
    a9a6:	9f c0       	rjmp	.+318    	; 0xaae6 <dir_find+0x1e8>
    a9a8:	d6 fe       	sbrs	r13, 6
    a9aa:	10 c0       	rjmp	.+32     	; 0xa9cc <dir_find+0xce>
    a9ac:	f7 01       	movw	r30, r14
    a9ae:	05 85       	ldd	r16, Z+13	; 0x0d
    a9b0:	fd 2d       	mov	r31, r13
    a9b2:	ff 7b       	andi	r31, 0xBF	; 191
    a9b4:	df 2e       	mov	r13, r31
    a9b6:	eb 85       	ldd	r30, Y+11	; 0x0b
    a9b8:	fc 85       	ldd	r31, Y+12	; 0x0c
    a9ba:	86 85       	ldd	r24, Z+14	; 0x0e
    a9bc:	97 85       	ldd	r25, Z+15	; 0x0f
    a9be:	a0 89       	ldd	r26, Z+16	; 0x10
    a9c0:	b1 89       	ldd	r27, Z+17	; 0x11
    a9c2:	80 a7       	std	Z+40, r24	; 0x28
    a9c4:	91 a7       	std	Z+41, r25	; 0x29
    a9c6:	a2 a7       	std	Z+42, r26	; 0x2a
    a9c8:	b3 a7       	std	Z+43, r27	; 0x2b
    a9ca:	02 c0       	rjmp	.+4      	; 0xa9d0 <dir_find+0xd2>
    a9cc:	1d 11       	cpse	r17, r13
    a9ce:	8a c0       	rjmp	.+276    	; 0xaae4 <dir_find+0x1e6>
    a9d0:	f7 01       	movw	r30, r14
    a9d2:	c5 84       	ldd	r12, Z+13	; 0x0d
    a9d4:	c0 12       	cpse	r12, r16
    a9d6:	86 c0       	rjmp	.+268    	; 0xaae4 <dir_find+0x1e6>
    a9d8:	82 8d       	ldd	r24, Z+26	; 0x1a
    a9da:	93 8d       	ldd	r25, Z+27	; 0x1b
    a9dc:	89 2b       	or	r24, r25
    a9de:	09 f0       	breq	.+2      	; 0xa9e2 <dir_find+0xe4>
    a9e0:	91 c0       	rjmp	.+290    	; 0xab04 <dir_find+0x206>
    a9e2:	eb 81       	ldd	r30, Y+3	; 0x03
    a9e4:	fc 81       	ldd	r31, Y+4	; 0x04
    a9e6:	03 84       	ldd	r0, Z+11	; 0x0b
    a9e8:	f4 85       	ldd	r31, Z+12	; 0x0c
    a9ea:	e0 2d       	mov	r30, r0
    a9ec:	fe 83       	std	Y+6, r31	; 0x06
    a9ee:	ed 83       	std	Y+5, r30	; 0x05
    a9f0:	f7 01       	movw	r30, r14
    a9f2:	80 81       	ld	r24, Z
    a9f4:	8f 73       	andi	r24, 0x3F	; 63
    a9f6:	90 e0       	ldi	r25, 0x00	; 0
    a9f8:	01 97       	sbiw	r24, 0x01	; 1
    a9fa:	fd e0       	ldi	r31, 0x0D	; 13
    a9fc:	f8 9f       	mul	r31, r24
    a9fe:	80 01       	movw	r16, r0
    aa00:	f9 9f       	mul	r31, r25
    aa02:	10 0d       	add	r17, r0
    aa04:	11 24       	eor	r1, r1
    aa06:	2b ee       	ldi	r18, 0xEB	; 235
    aa08:	34 e0       	ldi	r19, 0x04	; 4
    aa0a:	3a 83       	std	Y+2, r19	; 0x02
    aa0c:	29 83       	std	Y+1, r18	; 0x01
    aa0e:	81 e0       	ldi	r24, 0x01	; 1
    aa10:	90 e0       	ldi	r25, 0x00	; 0
    aa12:	e9 81       	ldd	r30, Y+1	; 0x01
    aa14:	fa 81       	ldd	r31, Y+2	; 0x02
    aa16:	21 91       	ld	r18, Z+
    aa18:	fa 83       	std	Y+2, r31	; 0x02
    aa1a:	e9 83       	std	Y+1, r30	; 0x01
    aa1c:	f7 01       	movw	r30, r14
    aa1e:	e2 0f       	add	r30, r18
    aa20:	f1 1d       	adc	r31, r1
    aa22:	20 80       	ld	r2, Z
    aa24:	31 80       	ldd	r3, Z+1	; 0x01
    aa26:	00 97       	sbiw	r24, 0x00	; 0
    aa28:	39 f1       	breq	.+78     	; 0xaa78 <dir_find+0x17a>
    aa2a:	0f 3f       	cpi	r16, 0xFF	; 255
    aa2c:	11 05       	cpc	r17, r1
    aa2e:	11 f0       	breq	.+4      	; 0xaa34 <dir_find+0x136>
    aa30:	08 f0       	brcs	.+2      	; 0xaa34 <dir_find+0x136>
    aa32:	68 c0       	rjmp	.+208    	; 0xab04 <dir_find+0x206>
    aa34:	b1 01       	movw	r22, r2
    aa36:	80 e0       	ldi	r24, 0x00	; 0
    aa38:	90 e0       	ldi	r25, 0x00	; 0
    aa3a:	0e 94 17 69 	call	0xd22e	; 0xd22e <ff_wtoupper>
    aa3e:	4b 01       	movw	r8, r22
    aa40:	5c 01       	movw	r10, r24
    aa42:	98 01       	movw	r18, r16
    aa44:	2f 5f       	subi	r18, 0xFF	; 255
    aa46:	3f 4f       	sbci	r19, 0xFF	; 255
    aa48:	38 87       	std	Y+8, r19	; 0x08
    aa4a:	2f 83       	std	Y+7, r18	; 0x07
    aa4c:	00 0f       	add	r16, r16
    aa4e:	11 1f       	adc	r17, r17
    aa50:	ed 81       	ldd	r30, Y+5	; 0x05
    aa52:	fe 81       	ldd	r31, Y+6	; 0x06
    aa54:	e0 0f       	add	r30, r16
    aa56:	f1 1f       	adc	r31, r17
    aa58:	60 81       	ld	r22, Z
    aa5a:	71 81       	ldd	r23, Z+1	; 0x01
    aa5c:	80 e0       	ldi	r24, 0x00	; 0
    aa5e:	90 e0       	ldi	r25, 0x00	; 0
    aa60:	0e 94 17 69 	call	0xd22e	; 0xd22e <ff_wtoupper>
    aa64:	86 16       	cp	r8, r22
    aa66:	97 06       	cpc	r9, r23
    aa68:	a8 06       	cpc	r10, r24
    aa6a:	b9 06       	cpc	r11, r25
    aa6c:	09 f0       	breq	.+2      	; 0xaa70 <dir_find+0x172>
    aa6e:	4a c0       	rjmp	.+148    	; 0xab04 <dir_find+0x206>
    aa70:	c1 01       	movw	r24, r2
    aa72:	0f 81       	ldd	r16, Y+7	; 0x07
    aa74:	18 85       	ldd	r17, Y+8	; 0x08
    aa76:	05 c0       	rjmp	.+10     	; 0xaa82 <dir_find+0x184>
    aa78:	3f ef       	ldi	r19, 0xFF	; 255
    aa7a:	23 16       	cp	r2, r19
    aa7c:	33 06       	cpc	r3, r19
    aa7e:	09 f0       	breq	.+2      	; 0xaa82 <dir_find+0x184>
    aa80:	41 c0       	rjmp	.+130    	; 0xab04 <dir_find+0x206>
    aa82:	e9 81       	ldd	r30, Y+1	; 0x01
    aa84:	fa 81       	ldd	r31, Y+2	; 0x02
    aa86:	e8 5f       	subi	r30, 0xF8	; 248
    aa88:	f4 40       	sbci	r31, 0x04	; 4
    aa8a:	19 f6       	brne	.-122    	; 0xaa12 <dir_find+0x114>
    aa8c:	f7 01       	movw	r30, r14
    aa8e:	20 81       	ld	r18, Z
    aa90:	26 ff       	sbrs	r18, 6
    aa92:	3a c0       	rjmp	.+116    	; 0xab08 <dir_find+0x20a>
    aa94:	89 2b       	or	r24, r25
    aa96:	c1 f1       	breq	.+112    	; 0xab08 <dir_find+0x20a>
    aa98:	00 0f       	add	r16, r16
    aa9a:	11 1f       	adc	r17, r17
    aa9c:	ed 81       	ldd	r30, Y+5	; 0x05
    aa9e:	fe 81       	ldd	r31, Y+6	; 0x06
    aaa0:	e0 0f       	add	r30, r16
    aaa2:	f1 1f       	adc	r31, r17
    aaa4:	80 81       	ld	r24, Z
    aaa6:	91 81       	ldd	r25, Z+1	; 0x01
    aaa8:	89 2b       	or	r24, r25
    aaaa:	71 f1       	breq	.+92     	; 0xab08 <dir_find+0x20a>
    aaac:	2b c0       	rjmp	.+86     	; 0xab04 <dir_find+0x206>
    aaae:	11 11       	cpse	r17, r1
    aab0:	05 c0       	rjmp	.+10     	; 0xaabc <dir_find+0x1be>
    aab2:	c7 01       	movw	r24, r14
    aab4:	0e 94 28 48 	call	0x9050	; 0x9050 <sum_sfn>
    aab8:	08 17       	cp	r16, r24
    aaba:	09 f1       	breq	.+66     	; 0xaafe <dir_find+0x200>
    aabc:	eb 85       	ldd	r30, Y+11	; 0x0b
    aabe:	fc 85       	ldd	r31, Y+12	; 0x0c
    aac0:	87 a1       	ldd	r24, Z+39	; 0x27
    aac2:	80 fd       	sbrc	r24, 0
    aac4:	09 c0       	rjmp	.+18     	; 0xaad8 <dir_find+0x1da>
    aac6:	4b e0       	ldi	r20, 0x0B	; 11
    aac8:	50 e0       	ldi	r21, 0x00	; 0
    aaca:	69 85       	ldd	r22, Y+9	; 0x09
    aacc:	7a 85       	ldd	r23, Y+10	; 0x0a
    aace:	c7 01       	movw	r24, r14
    aad0:	0e 94 b5 47 	call	0x8f6a	; 0x8f6a <mem_cmp>
    aad4:	89 2b       	or	r24, r25
    aad6:	99 f0       	breq	.+38     	; 0xaafe <dir_find+0x200>
    aad8:	eb 85       	ldd	r30, Y+11	; 0x0b
    aada:	fc 85       	ldd	r31, Y+12	; 0x0c
    aadc:	40 a6       	std	Z+40, r4	; 0x28
    aade:	51 a6       	std	Z+41, r5	; 0x29
    aae0:	62 a6       	std	Z+42, r6	; 0x2a
    aae2:	73 a6       	std	Z+43, r7	; 0x2b
    aae4:	1f ef       	ldi	r17, 0xFF	; 255
    aae6:	60 e0       	ldi	r22, 0x00	; 0
    aae8:	70 e0       	ldi	r23, 0x00	; 0
    aaea:	8b 85       	ldd	r24, Y+11	; 0x0b
    aaec:	9c 85       	ldd	r25, Y+12	; 0x0c
    aaee:	d5 dc       	rcall	.-1622   	; 0xa49a <dir_next>
    aaf0:	00 97       	sbiw	r24, 0x00	; 0
    aaf2:	09 f4       	brne	.+2      	; 0xaaf6 <dir_find+0x1f8>
    aaf4:	2b cf       	rjmp	.-426    	; 0xa94c <dir_find+0x4e>
    aaf6:	28 2f       	mov	r18, r24
    aaf8:	0b c0       	rjmp	.+22     	; 0xab10 <dir_find+0x212>
    aafa:	24 e0       	ldi	r18, 0x04	; 4
    aafc:	01 c0       	rjmp	.+2      	; 0xab00 <dir_find+0x202>
    aafe:	20 e0       	ldi	r18, 0x00	; 0
    ab00:	90 e0       	ldi	r25, 0x00	; 0
    ab02:	06 c0       	rjmp	.+12     	; 0xab10 <dir_find+0x212>
    ab04:	0c 2d       	mov	r16, r12
    ab06:	ee cf       	rjmp	.-36     	; 0xaae4 <dir_find+0x1e6>
    ab08:	1f ef       	ldi	r17, 0xFF	; 255
    ab0a:	1d 0d       	add	r17, r13
    ab0c:	0c 2d       	mov	r16, r12
    ab0e:	eb cf       	rjmp	.-42     	; 0xaae6 <dir_find+0x1e8>
    ab10:	82 2f       	mov	r24, r18
    ab12:	2c 96       	adiw	r28, 0x0c	; 12
    ab14:	e2 e1       	ldi	r30, 0x12	; 18
    ab16:	0c 94 d7 e6 	jmp	0x1cdae	; 0x1cdae <__epilogue_restores__>

0000ab1a <dir_register>:
    ab1a:	a6 e1       	ldi	r26, 0x16	; 22
    ab1c:	b0 e0       	ldi	r27, 0x00	; 0
    ab1e:	e3 e9       	ldi	r30, 0x93	; 147
    ab20:	f5 e5       	ldi	r31, 0x55	; 85
    ab22:	0c 94 bb e6 	jmp	0x1cd76	; 0x1cd76 <__prologue_saves__>
    ab26:	fc 01       	movw	r30, r24
    ab28:	27 a1       	ldd	r18, Z+39	; 0x27
    ab2a:	20 7a       	andi	r18, 0xA0	; 160
    ab2c:	09 f0       	breq	.+2      	; 0xab30 <dir_register+0x16>
    ab2e:	53 c1       	rjmp	.+678    	; 0xadd6 <dir_register+0x2bc>
    ab30:	c0 80       	ld	r12, Z
    ab32:	d1 80       	ldd	r13, Z+1	; 0x01
    ab34:	f6 01       	movw	r30, r12
    ab36:	a3 85       	ldd	r26, Z+11	; 0x0b
    ab38:	b4 85       	ldd	r27, Z+12	; 0x0c
    ab3a:	81 2c       	mov	r8, r1
    ab3c:	91 2c       	mov	r9, r1
    ab3e:	2d 91       	ld	r18, X+
    ab40:	3d 91       	ld	r19, X+
    ab42:	23 2b       	or	r18, r19
    ab44:	21 f0       	breq	.+8      	; 0xab4e <dir_register+0x34>
    ab46:	ff ef       	ldi	r31, 0xFF	; 255
    ab48:	8f 1a       	sub	r8, r31
    ab4a:	9f 0a       	sbc	r9, r31
    ab4c:	f8 cf       	rjmp	.-16     	; 0xab3e <dir_register+0x24>
    ab4e:	8c 01       	movw	r16, r24
    ab50:	5c 01       	movw	r10, r24
    ab52:	2c e1       	ldi	r18, 0x1C	; 28
    ab54:	a2 0e       	add	r10, r18
    ab56:	b1 1c       	adc	r11, r1
    ab58:	4c e0       	ldi	r20, 0x0C	; 12
    ab5a:	50 e0       	ldi	r21, 0x00	; 0
    ab5c:	b5 01       	movw	r22, r10
    ab5e:	ce 01       	movw	r24, r28
    ab60:	01 96       	adiw	r24, 0x01	; 1
    ab62:	0e 94 b9 49 	call	0x9372	; 0x9372 <mem_cpy.part.0>
    ab66:	8c 85       	ldd	r24, Y+12	; 0x0c
    ab68:	80 ff       	sbrs	r24, 0
    ab6a:	94 c0       	rjmp	.+296    	; 0xac94 <dir_register+0x17a>
    ab6c:	80 e4       	ldi	r24, 0x40	; 64
    ab6e:	f8 01       	movw	r30, r16
    ab70:	87 a3       	std	Z+39, r24	; 0x27
    ab72:	41 2c       	mov	r4, r1
    ab74:	51 2c       	mov	r5, r1
    ab76:	32 01       	movw	r6, r4
    ab78:	43 94       	inc	r4
    ab7a:	72 01       	movw	r14, r4
    ab7c:	f6 01       	movw	r30, r12
    ab7e:	23 84       	ldd	r2, Z+11	; 0x0b
    ab80:	34 84       	ldd	r3, Z+12	; 0x0c
    ab82:	4b e0       	ldi	r20, 0x0B	; 11
    ab84:	50 e0       	ldi	r21, 0x00	; 0
    ab86:	be 01       	movw	r22, r28
    ab88:	6f 5f       	subi	r22, 0xFF	; 255
    ab8a:	7f 4f       	sbci	r23, 0xFF	; 255
    ab8c:	c5 01       	movw	r24, r10
    ab8e:	0e 94 b9 49 	call	0x9372	; 0x9372 <mem_cpy.part.0>
    ab92:	f6 e0       	ldi	r31, 0x06	; 6
    ab94:	4f 16       	cp	r4, r31
    ab96:	51 04       	cpc	r5, r1
    ab98:	18 f1       	brcs	.+70     	; 0xabe0 <dir_register+0xc6>
    ab9a:	f1 01       	movw	r30, r2
    ab9c:	b3 01       	movw	r22, r6
    ab9e:	a2 01       	movw	r20, r4
    aba0:	81 91       	ld	r24, Z+
    aba2:	91 91       	ld	r25, Z+
    aba4:	00 97       	sbiw	r24, 0x00	; 0
    aba6:	d9 f0       	breq	.+54     	; 0xabde <dir_register+0xc4>
    aba8:	20 e1       	ldi	r18, 0x10	; 16
    abaa:	30 e0       	ldi	r19, 0x00	; 0
    abac:	44 0f       	add	r20, r20
    abae:	55 1f       	adc	r21, r21
    abb0:	66 1f       	adc	r22, r22
    abb2:	77 1f       	adc	r23, r23
    abb4:	dc 01       	movw	r26, r24
    abb6:	a1 70       	andi	r26, 0x01	; 1
    abb8:	bb 27       	eor	r27, r27
    abba:	4a 0f       	add	r20, r26
    abbc:	5b 1f       	adc	r21, r27
    abbe:	61 1d       	adc	r22, r1
    abc0:	71 1d       	adc	r23, r1
    abc2:	96 95       	lsr	r25
    abc4:	87 95       	ror	r24
    abc6:	60 ff       	sbrs	r22, 0
    abc8:	06 c0       	rjmp	.+12     	; 0xabd6 <dir_register+0xbc>
    abca:	a1 e2       	ldi	r26, 0x21	; 33
    abcc:	4a 27       	eor	r20, r26
    abce:	a0 e1       	ldi	r26, 0x10	; 16
    abd0:	5a 27       	eor	r21, r26
    abd2:	a1 e0       	ldi	r26, 0x01	; 1
    abd4:	6a 27       	eor	r22, r26
    abd6:	21 50       	subi	r18, 0x01	; 1
    abd8:	31 09       	sbc	r19, r1
    abda:	41 f7       	brne	.-48     	; 0xabac <dir_register+0x92>
    abdc:	e1 cf       	rjmp	.-62     	; 0xaba0 <dir_register+0x86>
    abde:	7a 01       	movw	r14, r20
    abe0:	fe 01       	movw	r30, r28
    abe2:	75 96       	adiw	r30, 0x15	; 21
    abe4:	27 e0       	ldi	r18, 0x07	; 7
    abe6:	30 e0       	ldi	r19, 0x00	; 0
    abe8:	9e 2d       	mov	r25, r14
    abea:	9f 70       	andi	r25, 0x0F	; 15
    abec:	80 e3       	ldi	r24, 0x30	; 48
    abee:	89 0f       	add	r24, r25
    abf0:	8a 33       	cpi	r24, 0x3A	; 58
    abf2:	10 f0       	brcs	.+4      	; 0xabf8 <dir_register+0xde>
    abf4:	87 e3       	ldi	r24, 0x37	; 55
    abf6:	89 0f       	add	r24, r25
    abf8:	21 50       	subi	r18, 0x01	; 1
    abfa:	31 09       	sbc	r19, r1
    abfc:	82 93       	st	-Z, r24
    abfe:	a4 e0       	ldi	r26, 0x04	; 4
    ac00:	f6 94       	lsr	r15
    ac02:	e7 94       	ror	r14
    ac04:	aa 95       	dec	r26
    ac06:	e1 f7       	brne	.-8      	; 0xac00 <dir_register+0xe6>
    ac08:	e1 14       	cp	r14, r1
    ac0a:	f1 04       	cpc	r15, r1
    ac0c:	69 f7       	brne	.-38     	; 0xabe8 <dir_register+0xce>
    ac0e:	ed e0       	ldi	r30, 0x0D	; 13
    ac10:	f0 e0       	ldi	r31, 0x00	; 0
    ac12:	ec 0f       	add	r30, r28
    ac14:	fd 1f       	adc	r31, r29
    ac16:	e2 0f       	add	r30, r18
    ac18:	f3 1f       	adc	r31, r19
    ac1a:	4e e7       	ldi	r20, 0x7E	; 126
    ac1c:	40 83       	st	Z, r20
    ac1e:	f5 01       	movw	r30, r10
    ac20:	80 e0       	ldi	r24, 0x00	; 0
    ac22:	90 e0       	ldi	r25, 0x00	; 0
    ac24:	28 17       	cp	r18, r24
    ac26:	39 07       	cpc	r19, r25
    ac28:	29 f0       	breq	.+10     	; 0xac34 <dir_register+0x11a>
    ac2a:	41 91       	ld	r20, Z+
    ac2c:	40 32       	cpi	r20, 0x20	; 32
    ac2e:	11 f0       	breq	.+4      	; 0xac34 <dir_register+0x11a>
    ac30:	01 96       	adiw	r24, 0x01	; 1
    ac32:	f8 cf       	rjmp	.-16     	; 0xac24 <dir_register+0x10a>
    ac34:	f5 01       	movw	r30, r10
    ac36:	e8 0f       	add	r30, r24
    ac38:	f9 1f       	adc	r31, r25
    ac3a:	28 30       	cpi	r18, 0x08	; 8
    ac3c:	31 05       	cpc	r19, r1
    ac3e:	50 f4       	brcc	.+20     	; 0xac54 <dir_register+0x13a>
    ac40:	ad e0       	ldi	r26, 0x0D	; 13
    ac42:	b0 e0       	ldi	r27, 0x00	; 0
    ac44:	ac 0f       	add	r26, r28
    ac46:	bd 1f       	adc	r27, r29
    ac48:	a2 0f       	add	r26, r18
    ac4a:	b3 1f       	adc	r27, r19
    ac4c:	8c 91       	ld	r24, X
    ac4e:	2f 5f       	subi	r18, 0xFF	; 255
    ac50:	3f 4f       	sbci	r19, 0xFF	; 255
    ac52:	01 c0       	rjmp	.+2      	; 0xac56 <dir_register+0x13c>
    ac54:	80 e2       	ldi	r24, 0x20	; 32
    ac56:	81 93       	st	Z+, r24
    ac58:	cf 01       	movw	r24, r30
    ac5a:	8a 19       	sub	r24, r10
    ac5c:	9b 09       	sbc	r25, r11
    ac5e:	08 97       	sbiw	r24, 0x08	; 8
    ac60:	60 f3       	brcs	.-40     	; 0xac3a <dir_register+0x120>
    ac62:	c8 01       	movw	r24, r16
    ac64:	4c de       	rcall	.-872    	; 0xa8fe <dir_find>
    ac66:	00 97       	sbiw	r24, 0x00	; 0
    ac68:	71 f4       	brne	.+28     	; 0xac86 <dir_register+0x16c>
    ac6a:	8f ef       	ldi	r24, 0xFF	; 255
    ac6c:	48 1a       	sub	r4, r24
    ac6e:	58 0a       	sbc	r5, r24
    ac70:	68 0a       	sbc	r6, r24
    ac72:	78 0a       	sbc	r7, r24
    ac74:	94 e6       	ldi	r25, 0x64	; 100
    ac76:	49 16       	cp	r4, r25
    ac78:	51 04       	cpc	r5, r1
    ac7a:	61 04       	cpc	r6, r1
    ac7c:	71 04       	cpc	r7, r1
    ac7e:	09 f0       	breq	.+2      	; 0xac82 <dir_register+0x168>
    ac80:	7c cf       	rjmp	.-264    	; 0xab7a <dir_register+0x60>
    ac82:	27 e0       	ldi	r18, 0x07	; 7
    ac84:	a9 c0       	rjmp	.+338    	; 0xadd8 <dir_register+0x2be>
    ac86:	84 30       	cpi	r24, 0x04	; 4
    ac88:	91 05       	cpc	r25, r1
    ac8a:	09 f0       	breq	.+2      	; 0xac8e <dir_register+0x174>
    ac8c:	ce c0       	rjmp	.+412    	; 0xae2a <dir_register+0x310>
    ac8e:	8c 85       	ldd	r24, Y+12	; 0x0c
    ac90:	f8 01       	movw	r30, r16
    ac92:	87 a3       	std	Z+39, r24	; 0x27
    ac94:	8c 85       	ldd	r24, Y+12	; 0x0c
    ac96:	81 ff       	sbrs	r24, 1
    ac98:	0b c0       	rjmp	.+22     	; 0xacb0 <dir_register+0x196>
    ac9a:	c4 01       	movw	r24, r8
    ac9c:	0c 96       	adiw	r24, 0x0c	; 12
    ac9e:	6d e0       	ldi	r22, 0x0D	; 13
    aca0:	70 e0       	ldi	r23, 0x00	; 0
    aca2:	0e 94 27 e6 	call	0x1cc4e	; 0x1cc4e <__udivmodhi4>
    aca6:	7b 01       	movw	r14, r22
    aca8:	ff ef       	ldi	r31, 0xFF	; 255
    acaa:	ef 1a       	sub	r14, r31
    acac:	ff 0a       	sbc	r15, r31
    acae:	03 c0       	rjmp	.+6      	; 0xacb6 <dir_register+0x19c>
    acb0:	ee 24       	eor	r14, r14
    acb2:	e3 94       	inc	r14
    acb4:	f1 2c       	mov	r15, r1
    acb6:	b7 01       	movw	r22, r14
    acb8:	c8 01       	movw	r24, r16
    acba:	d7 dc       	rcall	.-1618   	; 0xa66a <dir_alloc>
    acbc:	00 97       	sbiw	r24, 0x00	; 0
    acbe:	09 f0       	breq	.+2      	; 0xacc2 <dir_register+0x1a8>
    acc0:	b4 c0       	rjmp	.+360    	; 0xae2a <dir_register+0x310>
    acc2:	21 e0       	ldi	r18, 0x01	; 1
    acc4:	e2 1a       	sub	r14, r18
    acc6:	f1 08       	sbc	r15, r1
    acc8:	09 f4       	brne	.+2      	; 0xaccc <dir_register+0x1b2>
    acca:	88 c0       	rjmp	.+272    	; 0xaddc <dir_register+0x2c2>
    accc:	f8 01       	movw	r30, r16
    acce:	46 85       	ldd	r20, Z+14	; 0x0e
    acd0:	57 85       	ldd	r21, Z+15	; 0x0f
    acd2:	60 89       	ldd	r22, Z+16	; 0x10
    acd4:	71 89       	ldd	r23, Z+17	; 0x11
    acd6:	c7 01       	movw	r24, r14
    acd8:	e5 e0       	ldi	r30, 0x05	; 5
    acda:	88 0f       	add	r24, r24
    acdc:	99 1f       	adc	r25, r25
    acde:	ea 95       	dec	r30
    ace0:	e1 f7       	brne	.-8      	; 0xacda <dir_register+0x1c0>
    ace2:	48 1b       	sub	r20, r24
    ace4:	59 0b       	sbc	r21, r25
    ace6:	61 09       	sbc	r22, r1
    ace8:	71 09       	sbc	r23, r1
    acea:	c8 01       	movw	r24, r16
    acec:	5e d9       	rcall	.-3396   	; 0x9faa <dir_sdi>
    acee:	00 97       	sbiw	r24, 0x00	; 0
    acf0:	09 f0       	breq	.+2      	; 0xacf4 <dir_register+0x1da>
    acf2:	9b c0       	rjmp	.+310    	; 0xae2a <dir_register+0x310>
    acf4:	c5 01       	movw	r24, r10
    acf6:	0e 94 28 48 	call	0x9050	; 0x9050 <sum_sfn>
    acfa:	68 2e       	mov	r6, r24
    acfc:	5f e0       	ldi	r21, 0x0F	; 15
    acfe:	35 2e       	mov	r3, r21
    ad00:	6d e0       	ldi	r22, 0x0D	; 13
    ad02:	46 2e       	mov	r4, r22
    ad04:	78 ef       	ldi	r23, 0xF8	; 248
    ad06:	87 2e       	mov	r8, r23
    ad08:	74 e0       	ldi	r23, 0x04	; 4
    ad0a:	97 2e       	mov	r9, r23
    ad0c:	55 24       	eor	r5, r5
    ad0e:	53 94       	inc	r5
    ad10:	f8 01       	movw	r30, r16
    ad12:	46 89       	ldd	r20, Z+22	; 0x16
    ad14:	57 89       	ldd	r21, Z+23	; 0x17
    ad16:	60 8d       	ldd	r22, Z+24	; 0x18
    ad18:	71 8d       	ldd	r23, Z+25	; 0x19
    ad1a:	c6 01       	movw	r24, r12
    ad1c:	0e 94 53 4b 	call	0x96a6	; 0x96a6 <move_window>
    ad20:	00 97       	sbiw	r24, 0x00	; 0
    ad22:	09 f0       	breq	.+2      	; 0xad26 <dir_register+0x20c>
    ad24:	82 c0       	rjmp	.+260    	; 0xae2a <dir_register+0x310>
    ad26:	f6 01       	movw	r30, r12
    ad28:	63 85       	ldd	r22, Z+11	; 0x0b
    ad2a:	74 85       	ldd	r23, Z+12	; 0x0c
    ad2c:	f8 01       	movw	r30, r16
    ad2e:	02 8c       	ldd	r0, Z+26	; 0x1a
    ad30:	f3 8d       	ldd	r31, Z+27	; 0x1b
    ad32:	e0 2d       	mov	r30, r0
    ad34:	fe 8b       	std	Y+22, r31	; 0x16
    ad36:	ed 8b       	std	Y+21, r30	; 0x15
    ad38:	7e 2c       	mov	r7, r14
    ad3a:	65 86       	std	Z+13, r6	; 0x0d
    ad3c:	33 86       	std	Z+11, r3	; 0x0b
    ad3e:	14 86       	std	Z+12, r1	; 0x0c
    ad40:	12 8e       	std	Z+26, r1	; 0x1a
    ad42:	13 8e       	std	Z+27, r1	; 0x1b
    ad44:	97 01       	movw	r18, r14
    ad46:	33 27       	eor	r19, r19
    ad48:	21 50       	subi	r18, 0x01	; 1
    ad4a:	31 09       	sbc	r19, r1
    ad4c:	42 9e       	mul	r4, r18
    ad4e:	c0 01       	movw	r24, r0
    ad50:	43 9e       	mul	r4, r19
    ad52:	90 0d       	add	r25, r0
    ad54:	11 24       	eor	r1, r1
    ad56:	ab ee       	ldi	r26, 0xEB	; 235
    ad58:	b4 e0       	ldi	r27, 0x04	; 4
    ad5a:	20 e0       	ldi	r18, 0x00	; 0
    ad5c:	30 e0       	ldi	r19, 0x00	; 0
    ad5e:	2f 3f       	cpi	r18, 0xFF	; 255
    ad60:	ff ef       	ldi	r31, 0xFF	; 255
    ad62:	3f 07       	cpc	r19, r31
    ad64:	49 f0       	breq	.+18     	; 0xad78 <dir_register+0x25e>
    ad66:	9c 01       	movw	r18, r24
    ad68:	22 0f       	add	r18, r18
    ad6a:	33 1f       	adc	r19, r19
    ad6c:	26 0f       	add	r18, r22
    ad6e:	37 1f       	adc	r19, r23
    ad70:	f9 01       	movw	r30, r18
    ad72:	20 81       	ld	r18, Z
    ad74:	31 81       	ldd	r19, Z+1	; 0x01
    ad76:	01 96       	adiw	r24, 0x01	; 1
    ad78:	4d 91       	ld	r20, X+
    ad7a:	ed 89       	ldd	r30, Y+21	; 0x15
    ad7c:	fe 89       	ldd	r31, Y+22	; 0x16
    ad7e:	e4 0f       	add	r30, r20
    ad80:	f1 1d       	adc	r31, r1
    ad82:	20 83       	st	Z, r18
    ad84:	31 83       	std	Z+1, r19	; 0x01
    ad86:	21 15       	cp	r18, r1
    ad88:	31 05       	cpc	r19, r1
    ad8a:	11 f4       	brne	.+4      	; 0xad90 <dir_register+0x276>
    ad8c:	2f ef       	ldi	r18, 0xFF	; 255
    ad8e:	3f ef       	ldi	r19, 0xFF	; 255
    ad90:	8a 16       	cp	r8, r26
    ad92:	9b 06       	cpc	r9, r27
    ad94:	21 f7       	brne	.-56     	; 0xad5e <dir_register+0x244>
    ad96:	2f 3f       	cpi	r18, 0xFF	; 255
    ad98:	3f 4f       	sbci	r19, 0xFF	; 255
    ad9a:	49 f0       	breq	.+18     	; 0xadae <dir_register+0x294>
    ad9c:	88 0f       	add	r24, r24
    ad9e:	99 1f       	adc	r25, r25
    ada0:	db 01       	movw	r26, r22
    ada2:	a8 0f       	add	r26, r24
    ada4:	b9 1f       	adc	r27, r25
    ada6:	8d 91       	ld	r24, X+
    ada8:	9c 91       	ld	r25, X
    adaa:	89 2b       	or	r24, r25
    adac:	19 f4       	brne	.+6      	; 0xadb4 <dir_register+0x29a>
    adae:	27 2d       	mov	r18, r7
    adb0:	20 64       	ori	r18, 0x40	; 64
    adb2:	72 2e       	mov	r7, r18
    adb4:	ed 89       	ldd	r30, Y+21	; 0x15
    adb6:	fe 89       	ldd	r31, Y+22	; 0x16
    adb8:	70 82       	st	Z, r7
    adba:	f6 01       	movw	r30, r12
    adbc:	53 82       	std	Z+3, r5	; 0x03
    adbe:	60 e0       	ldi	r22, 0x00	; 0
    adc0:	70 e0       	ldi	r23, 0x00	; 0
    adc2:	c8 01       	movw	r24, r16
    adc4:	6a db       	rcall	.-2348   	; 0xa49a <dir_next>
    adc6:	00 97       	sbiw	r24, 0x00	; 0
    adc8:	81 f5       	brne	.+96     	; 0xae2a <dir_register+0x310>
    adca:	f1 e0       	ldi	r31, 0x01	; 1
    adcc:	ef 1a       	sub	r14, r31
    adce:	f1 08       	sbc	r15, r1
    add0:	09 f0       	breq	.+2      	; 0xadd4 <dir_register+0x2ba>
    add2:	9e cf       	rjmp	.-196    	; 0xad10 <dir_register+0x1f6>
    add4:	03 c0       	rjmp	.+6      	; 0xaddc <dir_register+0x2c2>
    add6:	26 e0       	ldi	r18, 0x06	; 6
    add8:	90 e0       	ldi	r25, 0x00	; 0
    adda:	28 c0       	rjmp	.+80     	; 0xae2c <dir_register+0x312>
    addc:	f8 01       	movw	r30, r16
    adde:	46 89       	ldd	r20, Z+22	; 0x16
    ade0:	57 89       	ldd	r21, Z+23	; 0x17
    ade2:	60 8d       	ldd	r22, Z+24	; 0x18
    ade4:	71 8d       	ldd	r23, Z+25	; 0x19
    ade6:	c6 01       	movw	r24, r12
    ade8:	0e 94 53 4b 	call	0x96a6	; 0x96a6 <move_window>
    adec:	00 97       	sbiw	r24, 0x00	; 0
    adee:	e9 f4       	brne	.+58     	; 0xae2a <dir_register+0x310>
    adf0:	40 e2       	ldi	r20, 0x20	; 32
    adf2:	50 e0       	ldi	r21, 0x00	; 0
    adf4:	60 e0       	ldi	r22, 0x00	; 0
    adf6:	70 e0       	ldi	r23, 0x00	; 0
    adf8:	f8 01       	movw	r30, r16
    adfa:	82 8d       	ldd	r24, Z+26	; 0x1a
    adfc:	93 8d       	ldd	r25, Z+27	; 0x1b
    adfe:	0e 94 ac 47 	call	0x8f58	; 0x8f58 <mem_set>
    ae02:	4b e0       	ldi	r20, 0x0B	; 11
    ae04:	50 e0       	ldi	r21, 0x00	; 0
    ae06:	b5 01       	movw	r22, r10
    ae08:	f8 01       	movw	r30, r16
    ae0a:	82 8d       	ldd	r24, Z+26	; 0x1a
    ae0c:	93 8d       	ldd	r25, Z+27	; 0x1b
    ae0e:	0e 94 b9 49 	call	0x9372	; 0x9372 <mem_cpy.part.0>
    ae12:	f8 01       	movw	r30, r16
    ae14:	22 8d       	ldd	r18, Z+26	; 0x1a
    ae16:	33 8d       	ldd	r19, Z+27	; 0x1b
    ae18:	87 a1       	ldd	r24, Z+39	; 0x27
    ae1a:	88 71       	andi	r24, 0x18	; 24
    ae1c:	f9 01       	movw	r30, r18
    ae1e:	84 87       	std	Z+12, r24	; 0x0c
    ae20:	81 e0       	ldi	r24, 0x01	; 1
    ae22:	f6 01       	movw	r30, r12
    ae24:	83 83       	std	Z+3, r24	; 0x03
    ae26:	20 e0       	ldi	r18, 0x00	; 0
    ae28:	d7 cf       	rjmp	.-82     	; 0xadd8 <dir_register+0x2be>
    ae2a:	28 2f       	mov	r18, r24
    ae2c:	82 2f       	mov	r24, r18
    ae2e:	66 96       	adiw	r28, 0x16	; 22
    ae30:	e2 e1       	ldi	r30, 0x12	; 18
    ae32:	0c 94 d7 e6 	jmp	0x1cdae	; 0x1cdae <__epilogue_restores__>

0000ae36 <follow_path>:
    ae36:	a8 e0       	ldi	r26, 0x08	; 8
    ae38:	b0 e0       	ldi	r27, 0x00	; 0
    ae3a:	e1 e2       	ldi	r30, 0x21	; 33
    ae3c:	f7 e5       	ldi	r31, 0x57	; 87
    ae3e:	0c 94 bb e6 	jmp	0x1cd76	; 0x1cd76 <__prologue_saves__>
    ae42:	8c 01       	movw	r16, r24
    ae44:	78 87       	std	Y+8, r23	; 0x08
    ae46:	6f 83       	std	Y+7, r22	; 0x07
    ae48:	dc 01       	movw	r26, r24
    ae4a:	0d 90       	ld	r0, X+
    ae4c:	bc 91       	ld	r27, X
    ae4e:	a0 2d       	mov	r26, r0
    ae50:	ba 83       	std	Y+2, r27	; 0x02
    ae52:	a9 83       	std	Y+1, r26	; 0x01
    ae54:	fb 01       	movw	r30, r22
    ae56:	80 81       	ld	r24, Z
    ae58:	8f 32       	cpi	r24, 0x2F	; 47
    ae5a:	11 f0       	breq	.+4      	; 0xae60 <follow_path+0x2a>
    ae5c:	8c 35       	cpi	r24, 0x5C	; 92
    ae5e:	19 f4       	brne	.+6      	; 0xae66 <follow_path+0x30>
    ae60:	2f 81       	ldd	r18, Y+7	; 0x07
    ae62:	38 85       	ldd	r19, Y+8	; 0x08
    ae64:	0c c0       	rjmp	.+24     	; 0xae7e <follow_path+0x48>
    ae66:	e9 81       	ldd	r30, Y+1	; 0x01
    ae68:	fa 81       	ldd	r31, Y+2	; 0x02
    ae6a:	85 89       	ldd	r24, Z+21	; 0x15
    ae6c:	96 89       	ldd	r25, Z+22	; 0x16
    ae6e:	a7 89       	ldd	r26, Z+23	; 0x17
    ae70:	b0 8d       	ldd	r27, Z+24	; 0x18
    ae72:	f8 01       	movw	r30, r16
    ae74:	86 83       	std	Z+6, r24	; 0x06
    ae76:	97 83       	std	Z+7, r25	; 0x07
    ae78:	a0 87       	std	Z+8, r26	; 0x08
    ae7a:	b1 87       	std	Z+9, r27	; 0x09
    ae7c:	0f c0       	rjmp	.+30     	; 0xae9c <follow_path+0x66>
    ae7e:	38 87       	std	Y+8, r19	; 0x08
    ae80:	2f 83       	std	Y+7, r18	; 0x07
    ae82:	d9 01       	movw	r26, r18
    ae84:	8c 91       	ld	r24, X
    ae86:	2f 5f       	subi	r18, 0xFF	; 255
    ae88:	3f 4f       	sbci	r19, 0xFF	; 255
    ae8a:	8f 32       	cpi	r24, 0x2F	; 47
    ae8c:	c1 f3       	breq	.-16     	; 0xae7e <follow_path+0x48>
    ae8e:	8c 35       	cpi	r24, 0x5C	; 92
    ae90:	b1 f3       	breq	.-20     	; 0xae7e <follow_path+0x48>
    ae92:	f8 01       	movw	r30, r16
    ae94:	16 82       	std	Z+6, r1	; 0x06
    ae96:	17 82       	std	Z+7, r1	; 0x07
    ae98:	10 86       	std	Z+8, r1	; 0x08
    ae9a:	11 86       	std	Z+9, r1	; 0x09
    ae9c:	af 81       	ldd	r26, Y+7	; 0x07
    ae9e:	b8 85       	ldd	r27, Y+8	; 0x08
    aea0:	8c 91       	ld	r24, X
    aea2:	80 32       	cpi	r24, 0x20	; 32
    aea4:	58 f0       	brcs	.+22     	; 0xaebc <follow_path+0x86>
    aea6:	f8 01       	movw	r30, r16
    aea8:	7c 96       	adiw	r30, 0x1c	; 28
    aeaa:	fc 83       	std	Y+4, r31	; 0x04
    aeac:	eb 83       	std	Y+3, r30	; 0x03
    aeae:	29 81       	ldd	r18, Y+1	; 0x01
    aeb0:	3a 81       	ldd	r19, Y+2	; 0x02
    aeb2:	2b 5c       	subi	r18, 0xCB	; 203
    aeb4:	3f 4f       	sbci	r19, 0xFF	; 255
    aeb6:	3e 83       	std	Y+6, r19	; 0x06
    aeb8:	2d 83       	std	Y+5, r18	; 0x05
    aeba:	76 c0       	rjmp	.+236    	; 0xafa8 <follow_path+0x172>
    aebc:	80 e8       	ldi	r24, 0x80	; 128
    aebe:	f8 01       	movw	r30, r16
    aec0:	87 a3       	std	Z+39, r24	; 0x27
    aec2:	40 e0       	ldi	r20, 0x00	; 0
    aec4:	50 e0       	ldi	r21, 0x00	; 0
    aec6:	ba 01       	movw	r22, r20
    aec8:	c8 01       	movw	r24, r16
    aeca:	6f d8       	rcall	.-3874   	; 0x9faa <dir_sdi>
    aecc:	ec c1       	rjmp	.+984    	; 0xb2a6 <follow_path+0x470>
    aece:	65 eb       	ldi	r22, 0xB5	; 181
    aed0:	71 e0       	ldi	r23, 0x01	; 1
    aed2:	0e 94 02 69 	call	0xd204	; 0xd204 <ff_oem2uni>
    aed6:	00 97       	sbiw	r24, 0x00	; 0
    aed8:	09 f4       	brne	.+2      	; 0xaedc <follow_path+0xa6>
    aeda:	b8 c1       	rjmp	.+880    	; 0xb24c <follow_path+0x416>
    aedc:	80 32       	cpi	r24, 0x20	; 32
    aede:	91 05       	cpc	r25, r1
    aee0:	30 f1       	brcs	.+76     	; 0xaf2e <follow_path+0xf8>
    aee2:	8f 32       	cpi	r24, 0x2F	; 47
    aee4:	91 05       	cpc	r25, r1
    aee6:	09 f4       	brne	.+2      	; 0xaeea <follow_path+0xb4>
    aee8:	6b c0       	rjmp	.+214    	; 0xafc0 <follow_path+0x18a>
    aeea:	8c 35       	cpi	r24, 0x5C	; 92
    aeec:	91 05       	cpc	r25, r1
    aeee:	09 f4       	brne	.+2      	; 0xaef2 <follow_path+0xbc>
    aef0:	67 c0       	rjmp	.+206    	; 0xafc0 <follow_path+0x18a>
    aef2:	80 38       	cpi	r24, 0x80	; 128
    aef4:	91 05       	cpc	r25, r1
    aef6:	28 f4       	brcc	.+10     	; 0xaf02 <follow_path+0xcc>
    aef8:	e7 e2       	ldi	r30, 0x27	; 39
    aefa:	f4 e0       	ldi	r31, 0x04	; 4
    aefc:	21 91       	ld	r18, Z+
    aefe:	21 11       	cpse	r18, r1
    af00:	61 c0       	rjmp	.+194    	; 0xafc4 <follow_path+0x18e>
    af02:	ef 81       	ldd	r30, Y+7	; 0x07
    af04:	f8 85       	ldd	r31, Y+8	; 0x08
    af06:	ef 3f       	cpi	r30, 0xFF	; 255
    af08:	f1 05       	cpc	r31, r1
    af0a:	09 f4       	brne	.+2      	; 0xaf0e <follow_path+0xd8>
    af0c:	9f c1       	rjmp	.+830    	; 0xb24c <follow_path+0x416>
    af0e:	31 96       	adiw	r30, 0x01	; 1
    af10:	f8 87       	std	Y+8, r31	; 0x08
    af12:	ef 83       	std	Y+7, r30	; 0x07
    af14:	d6 01       	movw	r26, r12
    af16:	8d 93       	st	X+, r24
    af18:	9d 93       	st	X+, r25
    af1a:	6d 01       	movw	r12, r26
    af1c:	bf ef       	ldi	r27, 0xFF	; 255
    af1e:	eb 1a       	sub	r14, r27
    af20:	fb 0a       	sbc	r15, r27
    af22:	f7 01       	movw	r30, r14
    af24:	31 97       	sbiw	r30, 0x01	; 1
    af26:	80 81       	ld	r24, Z
    af28:	90 e0       	ldi	r25, 0x00	; 0
    af2a:	00 97       	sbiw	r24, 0x00	; 0
    af2c:	81 f6       	brne	.-96     	; 0xaece <follow_path+0x98>
    af2e:	74 e0       	ldi	r23, 0x04	; 4
    af30:	37 2e       	mov	r3, r23
    af32:	2f 81       	ldd	r18, Y+7	; 0x07
    af34:	38 85       	ldd	r19, Y+8	; 0x08
    af36:	22 0f       	add	r18, r18
    af38:	33 1f       	adc	r19, r19
    af3a:	8f 81       	ldd	r24, Y+7	; 0x07
    af3c:	98 85       	ldd	r25, Y+8	; 0x08
    af3e:	01 97       	sbiw	r24, 0x01	; 1
    af40:	09 f0       	breq	.+2      	; 0xaf44 <follow_path+0x10e>
    af42:	51 c0       	rjmp	.+162    	; 0xafe6 <follow_path+0x1b0>
    af44:	d5 01       	movw	r26, r10
    af46:	8d 91       	ld	r24, X+
    af48:	9c 91       	ld	r25, X
    af4a:	8e 97       	sbiw	r24, 0x2e	; 46
    af4c:	09 f0       	breq	.+2      	; 0xaf50 <follow_path+0x11a>
    af4e:	57 c0       	rjmp	.+174    	; 0xaffe <follow_path+0x1c8>
    af50:	f9 01       	movw	r30, r18
    af52:	ea 0d       	add	r30, r10
    af54:	fb 1d       	adc	r31, r11
    af56:	11 82       	std	Z+1, r1	; 0x01
    af58:	10 82       	st	Z, r1
    af5a:	f8 01       	movw	r30, r16
    af5c:	7c 96       	adiw	r30, 0x1c	; 28
    af5e:	80 e0       	ldi	r24, 0x00	; 0
    af60:	90 e0       	ldi	r25, 0x00	; 0
    af62:	2f 81       	ldd	r18, Y+7	; 0x07
    af64:	38 85       	ldd	r19, Y+8	; 0x08
    af66:	82 17       	cp	r24, r18
    af68:	93 07       	cpc	r25, r19
    af6a:	08 f0       	brcs	.+2      	; 0xaf6e <follow_path+0x138>
    af6c:	4c c0       	rjmp	.+152    	; 0xb006 <follow_path+0x1d0>
    af6e:	2e e2       	ldi	r18, 0x2E	; 46
    af70:	21 93       	st	Z+, r18
    af72:	01 96       	adiw	r24, 0x01	; 1
    af74:	8b 30       	cpi	r24, 0x0B	; 11
    af76:	91 05       	cpc	r25, r1
    af78:	a1 f7       	brne	.-24     	; 0xaf62 <follow_path+0x12c>
    af7a:	83 2d       	mov	r24, r3
    af7c:	80 62       	ori	r24, 0x20	; 32
    af7e:	f8 01       	movw	r30, r16
    af80:	87 a3       	std	Z+39, r24	; 0x27
    af82:	c8 01       	movw	r24, r16
    af84:	bc dc       	rcall	.-1672   	; 0xa8fe <dir_find>
    af86:	f8 01       	movw	r30, r16
    af88:	27 a1       	ldd	r18, Z+39	; 0x27
    af8a:	00 97       	sbiw	r24, 0x00	; 0
    af8c:	09 f4       	brne	.+2      	; 0xaf90 <follow_path+0x15a>
    af8e:	6a c1       	rjmp	.+724    	; 0xb264 <follow_path+0x42e>
    af90:	84 30       	cpi	r24, 0x04	; 4
    af92:	91 05       	cpc	r25, r1
    af94:	09 f0       	breq	.+2      	; 0xaf98 <follow_path+0x162>
    af96:	87 c1       	rjmp	.+782    	; 0xb2a6 <follow_path+0x470>
    af98:	32 2f       	mov	r19, r18
    af9a:	34 70       	andi	r19, 0x04	; 4
    af9c:	25 ff       	sbrs	r18, 5
    af9e:	5f c1       	rjmp	.+702    	; 0xb25e <follow_path+0x428>
    afa0:	31 11       	cpse	r19, r1
    afa2:	57 c1       	rjmp	.+686    	; 0xb252 <follow_path+0x41c>
    afa4:	f8 86       	std	Y+8, r15	; 0x08
    afa6:	ef 82       	std	Y+7, r14	; 0x07
    afa8:	d8 01       	movw	r26, r16
    afaa:	ed 91       	ld	r30, X+
    afac:	fc 91       	ld	r31, X
    afae:	a3 84       	ldd	r10, Z+11	; 0x0b
    afb0:	b4 84       	ldd	r11, Z+12	; 0x0c
    afb2:	45 01       	movw	r8, r10
    afb4:	65 01       	movw	r12, r10
    afb6:	ef 80       	ldd	r14, Y+7	; 0x07
    afb8:	f8 84       	ldd	r15, Y+8	; 0x08
    afba:	18 86       	std	Y+8, r1	; 0x08
    afbc:	1f 82       	std	Y+7, r1	; 0x07
    afbe:	ae cf       	rjmp	.-164    	; 0xaf1c <follow_path+0xe6>
    afc0:	97 01       	movw	r18, r14
    afc2:	06 c0       	rjmp	.+12     	; 0xafd0 <follow_path+0x19a>
    afc4:	30 e0       	ldi	r19, 0x00	; 0
    afc6:	82 17       	cp	r24, r18
    afc8:	93 07       	cpc	r25, r19
    afca:	09 f0       	breq	.+2      	; 0xafce <follow_path+0x198>
    afcc:	97 cf       	rjmp	.-210    	; 0xaefc <follow_path+0xc6>
    afce:	3e c1       	rjmp	.+636    	; 0xb24c <follow_path+0x416>
    afd0:	79 01       	movw	r14, r18
    afd2:	f9 01       	movw	r30, r18
    afd4:	80 81       	ld	r24, Z
    afd6:	2f 5f       	subi	r18, 0xFF	; 255
    afd8:	3f 4f       	sbci	r19, 0xFF	; 255
    afda:	8f 32       	cpi	r24, 0x2F	; 47
    afdc:	c9 f3       	breq	.-14     	; 0xafd0 <follow_path+0x19a>
    afde:	8c 35       	cpi	r24, 0x5C	; 92
    afe0:	b9 f3       	breq	.-18     	; 0xafd0 <follow_path+0x19a>
    afe2:	31 2c       	mov	r3, r1
    afe4:	a6 cf       	rjmp	.-180    	; 0xaf32 <follow_path+0xfc>
    afe6:	ef 81       	ldd	r30, Y+7	; 0x07
    afe8:	f8 85       	ldd	r31, Y+8	; 0x08
    afea:	32 97       	sbiw	r30, 0x02	; 2
    afec:	41 f4       	brne	.+16     	; 0xaffe <follow_path+0x1c8>
    afee:	f5 01       	movw	r30, r10
    aff0:	82 81       	ldd	r24, Z+2	; 0x02
    aff2:	93 81       	ldd	r25, Z+3	; 0x03
    aff4:	8e 97       	sbiw	r24, 0x2e	; 46
    aff6:	19 f4       	brne	.+6      	; 0xaffe <follow_path+0x1c8>
    aff8:	80 81       	ld	r24, Z
    affa:	91 81       	ldd	r25, Z+1	; 0x01
    affc:	a6 cf       	rjmp	.-180    	; 0xaf4a <follow_path+0x114>
    affe:	f9 01       	movw	r30, r18
    b000:	ea 0d       	add	r30, r10
    b002:	fb 1d       	adc	r31, r11
    b004:	0d c0       	rjmp	.+26     	; 0xb020 <follow_path+0x1ea>
    b006:	20 e2       	ldi	r18, 0x20	; 32
    b008:	b3 cf       	rjmp	.-154    	; 0xaf70 <follow_path+0x13a>
    b00a:	92 91       	ld	r25, -Z
    b00c:	82 91       	ld	r24, -Z
    b00e:	80 32       	cpi	r24, 0x20	; 32
    b010:	91 05       	cpc	r25, r1
    b012:	59 f4       	brne	.+22     	; 0xb02a <follow_path+0x1f4>
    b014:	2f 81       	ldd	r18, Y+7	; 0x07
    b016:	38 85       	ldd	r19, Y+8	; 0x08
    b018:	21 50       	subi	r18, 0x01	; 1
    b01a:	31 09       	sbc	r19, r1
    b01c:	38 87       	std	Y+8, r19	; 0x08
    b01e:	2f 83       	std	Y+7, r18	; 0x07
    b020:	8f 81       	ldd	r24, Y+7	; 0x07
    b022:	98 85       	ldd	r25, Y+8	; 0x08
    b024:	89 2b       	or	r24, r25
    b026:	89 f7       	brne	.-30     	; 0xb00a <follow_path+0x1d4>
    b028:	02 c0       	rjmp	.+4      	; 0xb02e <follow_path+0x1f8>
    b02a:	8e 97       	sbiw	r24, 0x2e	; 46
    b02c:	99 f3       	breq	.-26     	; 0xb014 <follow_path+0x1de>
    b02e:	ef 81       	ldd	r30, Y+7	; 0x07
    b030:	f8 85       	ldd	r31, Y+8	; 0x08
    b032:	ee 0f       	add	r30, r30
    b034:	ff 1f       	adc	r31, r31
    b036:	ea 0d       	add	r30, r10
    b038:	fb 1d       	adc	r31, r11
    b03a:	11 82       	std	Z+1, r1	; 0x01
    b03c:	10 82       	st	Z, r1
    b03e:	af 81       	ldd	r26, Y+7	; 0x07
    b040:	b8 85       	ldd	r27, Y+8	; 0x08
    b042:	ab 2b       	or	r26, r27
    b044:	09 f4       	brne	.+2      	; 0xb048 <follow_path+0x212>
    b046:	02 c1       	rjmp	.+516    	; 0xb24c <follow_path+0x416>
    b048:	61 2c       	mov	r6, r1
    b04a:	71 2c       	mov	r7, r1
    b04c:	d4 01       	movw	r26, r8
    b04e:	8d 91       	ld	r24, X+
    b050:	9d 91       	ld	r25, X+
    b052:	4d 01       	movw	r8, r26
    b054:	80 32       	cpi	r24, 0x20	; 32
    b056:	91 05       	cpc	r25, r1
    b058:	21 f4       	brne	.+8      	; 0xb062 <follow_path+0x22c>
    b05a:	bf ef       	ldi	r27, 0xFF	; 255
    b05c:	6b 1a       	sub	r6, r27
    b05e:	7b 0a       	sbc	r7, r27
    b060:	f5 cf       	rjmp	.-22     	; 0xb04c <follow_path+0x216>
    b062:	61 14       	cp	r6, r1
    b064:	71 04       	cpc	r7, r1
    b066:	11 f4       	brne	.+4      	; 0xb06c <follow_path+0x236>
    b068:	8e 97       	sbiw	r24, 0x2e	; 46
    b06a:	61 f4       	brne	.+24     	; 0xb084 <follow_path+0x24e>
    b06c:	b3 2d       	mov	r27, r3
    b06e:	b3 60       	ori	r27, 0x03	; 3
    b070:	3b 2e       	mov	r3, r27
    b072:	08 c0       	rjmp	.+16     	; 0xb084 <follow_path+0x24e>
    b074:	2f 81       	ldd	r18, Y+7	; 0x07
    b076:	38 85       	ldd	r19, Y+8	; 0x08
    b078:	21 50       	subi	r18, 0x01	; 1
    b07a:	31 09       	sbc	r19, r1
    b07c:	38 87       	std	Y+8, r19	; 0x08
    b07e:	2f 83       	std	Y+7, r18	; 0x07
    b080:	23 2b       	or	r18, r19
    b082:	21 f0       	breq	.+8      	; 0xb08c <follow_path+0x256>
    b084:	92 91       	ld	r25, -Z
    b086:	82 91       	ld	r24, -Z
    b088:	8e 97       	sbiw	r24, 0x2e	; 46
    b08a:	a1 f7       	brne	.-24     	; 0xb074 <follow_path+0x23e>
    b08c:	4b e0       	ldi	r20, 0x0B	; 11
    b08e:	50 e0       	ldi	r21, 0x00	; 0
    b090:	60 e2       	ldi	r22, 0x20	; 32
    b092:	70 e0       	ldi	r23, 0x00	; 0
    b094:	8b 81       	ldd	r24, Y+3	; 0x03
    b096:	9c 81       	ldd	r25, Y+4	; 0x04
    b098:	0e 94 ac 47 	call	0x8f58	; 0x8f58 <mem_set>
    b09c:	48 e0       	ldi	r20, 0x08	; 8
    b09e:	84 2e       	mov	r8, r20
    b0a0:	91 2c       	mov	r9, r1
    b0a2:	c1 2c       	mov	r12, r1
    b0a4:	d1 2c       	mov	r13, r1
    b0a6:	21 2c       	mov	r2, r1
    b0a8:	23 01       	movw	r4, r6
    b0aa:	3f ef       	ldi	r19, 0xFF	; 255
    b0ac:	43 1a       	sub	r4, r19
    b0ae:	53 0a       	sbc	r5, r19
    b0b0:	66 0c       	add	r6, r6
    b0b2:	77 1c       	adc	r7, r7
    b0b4:	f5 01       	movw	r30, r10
    b0b6:	e6 0d       	add	r30, r6
    b0b8:	f7 1d       	adc	r31, r7
    b0ba:	80 81       	ld	r24, Z
    b0bc:	91 81       	ldd	r25, Z+1	; 0x01
    b0be:	00 97       	sbiw	r24, 0x00	; 0
    b0c0:	09 f4       	brne	.+2      	; 0xb0c4 <follow_path+0x28e>
    b0c2:	9e c0       	rjmp	.+316    	; 0xb200 <follow_path+0x3ca>
    b0c4:	80 32       	cpi	r24, 0x20	; 32
    b0c6:	91 05       	cpc	r25, r1
    b0c8:	41 f0       	breq	.+16     	; 0xb0da <follow_path+0x2a4>
    b0ca:	8e 32       	cpi	r24, 0x2E	; 46
    b0cc:	91 05       	cpc	r25, r1
    b0ce:	51 f4       	brne	.+20     	; 0xb0e4 <follow_path+0x2ae>
    b0d0:	8f 81       	ldd	r24, Y+7	; 0x07
    b0d2:	98 85       	ldd	r25, Y+8	; 0x08
    b0d4:	84 15       	cp	r24, r4
    b0d6:	95 05       	cpc	r25, r5
    b0d8:	71 f0       	breq	.+28     	; 0xb0f6 <follow_path+0x2c0>
    b0da:	93 2d       	mov	r25, r3
    b0dc:	93 60       	ori	r25, 0x03	; 3
    b0de:	39 2e       	mov	r3, r25
    b0e0:	32 01       	movw	r6, r4
    b0e2:	e2 cf       	rjmp	.-60     	; 0xb0a8 <follow_path+0x272>
    b0e4:	c8 14       	cp	r12, r8
    b0e6:	d9 04       	cpc	r13, r9
    b0e8:	50 f4       	brcc	.+20     	; 0xb0fe <follow_path+0x2c8>
    b0ea:	af 81       	ldd	r26, Y+7	; 0x07
    b0ec:	b8 85       	ldd	r27, Y+8	; 0x08
    b0ee:	a4 15       	cp	r26, r4
    b0f0:	b5 05       	cpc	r27, r5
    b0f2:	49 f5       	brne	.+82     	; 0xb146 <follow_path+0x310>
    b0f4:	d2 c0       	rjmp	.+420    	; 0xb29a <follow_path+0x464>
    b0f6:	c8 14       	cp	r12, r8
    b0f8:	d9 04       	cpc	r13, r9
    b0fa:	08 f4       	brcc	.+2      	; 0xb0fe <follow_path+0x2c8>
    b0fc:	ce c0       	rjmp	.+412    	; 0xb29a <follow_path+0x464>
    b0fe:	bb e0       	ldi	r27, 0x0B	; 11
    b100:	8b 16       	cp	r8, r27
    b102:	91 04       	cpc	r9, r1
    b104:	39 f4       	brne	.+14     	; 0xb114 <follow_path+0x2de>
    b106:	e3 2d       	mov	r30, r3
    b108:	e3 60       	ori	r30, 0x03	; 3
    b10a:	3e 2e       	mov	r3, r30
    b10c:	2b e0       	ldi	r18, 0x0B	; 11
    b10e:	82 2e       	mov	r8, r18
    b110:	91 2c       	mov	r9, r1
    b112:	76 c0       	rjmp	.+236    	; 0xb200 <follow_path+0x3ca>
    b114:	2f 81       	ldd	r18, Y+7	; 0x07
    b116:	38 85       	ldd	r19, Y+8	; 0x08
    b118:	24 15       	cp	r18, r4
    b11a:	35 05       	cpc	r19, r5
    b11c:	49 f0       	breq	.+18     	; 0xb130 <follow_path+0x2fa>
    b11e:	33 2d       	mov	r19, r3
    b120:	33 60       	ori	r19, 0x03	; 3
    b122:	33 2e       	mov	r3, r19
    b124:	8f 81       	ldd	r24, Y+7	; 0x07
    b126:	98 85       	ldd	r25, Y+8	; 0x08
    b128:	84 15       	cp	r24, r4
    b12a:	95 05       	cpc	r25, r5
    b12c:	08 f4       	brcc	.+2      	; 0xb130 <follow_path+0x2fa>
    b12e:	68 c0       	rjmp	.+208    	; 0xb200 <follow_path+0x3ca>
    b130:	22 0c       	add	r2, r2
    b132:	22 0c       	add	r2, r2
    b134:	4f 80       	ldd	r4, Y+7	; 0x07
    b136:	58 84       	ldd	r5, Y+8	; 0x08
    b138:	8b e0       	ldi	r24, 0x0B	; 11
    b13a:	88 2e       	mov	r8, r24
    b13c:	91 2c       	mov	r9, r1
    b13e:	98 e0       	ldi	r25, 0x08	; 8
    b140:	c9 2e       	mov	r12, r25
    b142:	d1 2c       	mov	r13, r1
    b144:	cd cf       	rjmp	.-102    	; 0xb0e0 <follow_path+0x2aa>
    b146:	80 38       	cpi	r24, 0x80	; 128
    b148:	91 05       	cpc	r25, r1
    b14a:	70 f1       	brcs	.+92     	; 0xb1a8 <follow_path+0x372>
    b14c:	a3 2d       	mov	r26, r3
    b14e:	a2 60       	ori	r26, 0x02	; 2
    b150:	7a 2e       	mov	r7, r26
    b152:	bc 01       	movw	r22, r24
    b154:	80 e0       	ldi	r24, 0x00	; 0
    b156:	90 e0       	ldi	r25, 0x00	; 0
    b158:	45 eb       	ldi	r20, 0xB5	; 181
    b15a:	51 e0       	ldi	r21, 0x01	; 1
    b15c:	0e 94 cf 68 	call	0xd19e	; 0xd19e <ff_uni2oem>
    b160:	87 ff       	sbrs	r24, 7
    b162:	08 c0       	rjmp	.+16     	; 0xb174 <follow_path+0x33e>
    b164:	8f 77       	andi	r24, 0x7F	; 127
    b166:	99 27       	eor	r25, r25
    b168:	fc 01       	movw	r30, r24
    b16a:	e5 59       	subi	r30, 0x95	; 149
    b16c:	fb 4f       	sbci	r31, 0xFB	; 251
    b16e:	80 81       	ld	r24, Z
    b170:	90 e0       	ldi	r25, 0x00	; 0
    b172:	17 c0       	rjmp	.+46     	; 0xb1a2 <follow_path+0x36c>
    b174:	8f 3f       	cpi	r24, 0xFF	; 255
    b176:	91 05       	cpc	r25, r1
    b178:	a1 f0       	breq	.+40     	; 0xb1a2 <follow_path+0x36c>
    b17a:	98 f0       	brcs	.+38     	; 0xb1a2 <follow_path+0x36c>
    b17c:	94 01       	movw	r18, r8
    b17e:	21 50       	subi	r18, 0x01	; 1
    b180:	31 09       	sbc	r19, r1
    b182:	c2 16       	cp	r12, r18
    b184:	d3 06       	cpc	r13, r19
    b186:	28 f0       	brcs	.+10     	; 0xb192 <follow_path+0x35c>
    b188:	b3 2d       	mov	r27, r3
    b18a:	b3 60       	ori	r27, 0x03	; 3
    b18c:	3b 2e       	mov	r3, r27
    b18e:	64 01       	movw	r12, r8
    b190:	a7 cf       	rjmp	.-178    	; 0xb0e0 <follow_path+0x2aa>
    b192:	f8 01       	movw	r30, r16
    b194:	ec 0d       	add	r30, r12
    b196:	fd 1d       	adc	r31, r13
    b198:	94 8f       	std	Z+28, r25	; 0x1c
    b19a:	f6 01       	movw	r30, r12
    b19c:	31 96       	adiw	r30, 0x01	; 1
    b19e:	6f 01       	movw	r12, r30
    b1a0:	26 c0       	rjmp	.+76     	; 0xb1ee <follow_path+0x3b8>
    b1a2:	00 97       	sbiw	r24, 0x00	; 0
    b1a4:	59 f0       	breq	.+22     	; 0xb1bc <follow_path+0x386>
    b1a6:	01 c0       	rjmp	.+2      	; 0xb1aa <follow_path+0x374>
    b1a8:	73 2c       	mov	r7, r3
    b1aa:	e0 e3       	ldi	r30, 0x30	; 48
    b1ac:	f4 e0       	ldi	r31, 0x04	; 4
    b1ae:	21 91       	ld	r18, Z+
    b1b0:	22 23       	and	r18, r18
    b1b2:	51 f0       	breq	.+20     	; 0xb1c8 <follow_path+0x392>
    b1b4:	30 e0       	ldi	r19, 0x00	; 0
    b1b6:	82 17       	cp	r24, r18
    b1b8:	93 07       	cpc	r25, r19
    b1ba:	c9 f7       	brne	.-14     	; 0xb1ae <follow_path+0x378>
    b1bc:	f7 2d       	mov	r31, r7
    b1be:	f3 60       	ori	r31, 0x03	; 3
    b1c0:	7f 2e       	mov	r7, r31
    b1c2:	8f e5       	ldi	r24, 0x5F	; 95
    b1c4:	90 e0       	ldi	r25, 0x00	; 0
    b1c6:	13 c0       	rjmp	.+38     	; 0xb1ee <follow_path+0x3b8>
    b1c8:	9c 01       	movw	r18, r24
    b1ca:	21 54       	subi	r18, 0x41	; 65
    b1cc:	31 09       	sbc	r19, r1
    b1ce:	2a 31       	cpi	r18, 0x1A	; 26
    b1d0:	31 05       	cpc	r19, r1
    b1d2:	18 f4       	brcc	.+6      	; 0xb1da <follow_path+0x3a4>
    b1d4:	22 2d       	mov	r18, r2
    b1d6:	22 60       	ori	r18, 0x02	; 2
    b1d8:	22 2e       	mov	r2, r18
    b1da:	9c 01       	movw	r18, r24
    b1dc:	21 56       	subi	r18, 0x61	; 97
    b1de:	31 09       	sbc	r19, r1
    b1e0:	2a 31       	cpi	r18, 0x1A	; 26
    b1e2:	31 05       	cpc	r19, r1
    b1e4:	20 f4       	brcc	.+8      	; 0xb1ee <follow_path+0x3b8>
    b1e6:	32 2d       	mov	r19, r2
    b1e8:	31 60       	ori	r19, 0x01	; 1
    b1ea:	23 2e       	mov	r2, r19
    b1ec:	80 97       	sbiw	r24, 0x20	; 32
    b1ee:	f8 01       	movw	r30, r16
    b1f0:	ec 0d       	add	r30, r12
    b1f2:	fd 1d       	adc	r31, r13
    b1f4:	84 8f       	std	Z+28, r24	; 0x1c
    b1f6:	c6 01       	movw	r24, r12
    b1f8:	01 96       	adiw	r24, 0x01	; 1
    b1fa:	6c 01       	movw	r12, r24
    b1fc:	37 2c       	mov	r3, r7
    b1fe:	70 cf       	rjmp	.-288    	; 0xb0e0 <follow_path+0x2aa>
    b200:	f8 01       	movw	r30, r16
    b202:	84 8d       	ldd	r24, Z+28	; 0x1c
    b204:	85 3e       	cpi	r24, 0xE5	; 229
    b206:	11 f4       	brne	.+4      	; 0xb20c <follow_path+0x3d6>
    b208:	25 e0       	ldi	r18, 0x05	; 5
    b20a:	24 8f       	std	Z+28, r18	; 0x1c
    b20c:	38 e0       	ldi	r19, 0x08	; 8
    b20e:	83 16       	cp	r8, r19
    b210:	91 04       	cpc	r9, r1
    b212:	11 f4       	brne	.+4      	; 0xb218 <follow_path+0x3e2>
    b214:	22 0c       	add	r2, r2
    b216:	22 0c       	add	r2, r2
    b218:	82 2d       	mov	r24, r2
    b21a:	8c 70       	andi	r24, 0x0C	; 12
    b21c:	8c 30       	cpi	r24, 0x0C	; 12
    b21e:	21 f0       	breq	.+8      	; 0xb228 <follow_path+0x3f2>
    b220:	82 2d       	mov	r24, r2
    b222:	83 70       	andi	r24, 0x03	; 3
    b224:	83 30       	cpi	r24, 0x03	; 3
    b226:	19 f4       	brne	.+6      	; 0xb22e <follow_path+0x3f8>
    b228:	83 2d       	mov	r24, r3
    b22a:	82 60       	ori	r24, 0x02	; 2
    b22c:	38 2e       	mov	r3, r24
    b22e:	31 fc       	sbrc	r3, 1
    b230:	0a c0       	rjmp	.+20     	; 0xb246 <follow_path+0x410>
    b232:	20 fe       	sbrs	r2, 0
    b234:	03 c0       	rjmp	.+6      	; 0xb23c <follow_path+0x406>
    b236:	93 2d       	mov	r25, r3
    b238:	90 61       	ori	r25, 0x10	; 16
    b23a:	39 2e       	mov	r3, r25
    b23c:	22 fe       	sbrs	r2, 2
    b23e:	03 c0       	rjmp	.+6      	; 0xb246 <follow_path+0x410>
    b240:	a3 2d       	mov	r26, r3
    b242:	a8 60       	ori	r26, 0x08	; 8
    b244:	3a 2e       	mov	r3, r26
    b246:	f8 01       	movw	r30, r16
    b248:	37 a2       	std	Z+39, r3	; 0x27
    b24a:	9b ce       	rjmp	.-714    	; 0xaf82 <follow_path+0x14c>
    b24c:	86 e0       	ldi	r24, 0x06	; 6
    b24e:	90 e0       	ldi	r25, 0x00	; 0
    b250:	2a c0       	rjmp	.+84     	; 0xb2a6 <follow_path+0x470>
    b252:	80 e8       	ldi	r24, 0x80	; 128
    b254:	f8 01       	movw	r30, r16
    b256:	87 a3       	std	Z+39, r24	; 0x27
    b258:	80 e0       	ldi	r24, 0x00	; 0
    b25a:	90 e0       	ldi	r25, 0x00	; 0
    b25c:	24 c0       	rjmp	.+72     	; 0xb2a6 <follow_path+0x470>
    b25e:	33 23       	and	r19, r19
    b260:	c9 f0       	breq	.+50     	; 0xb294 <follow_path+0x45e>
    b262:	21 c0       	rjmp	.+66     	; 0xb2a6 <follow_path+0x470>
    b264:	22 fd       	sbrc	r18, 2
    b266:	1f c0       	rjmp	.+62     	; 0xb2a6 <follow_path+0x470>
    b268:	f8 01       	movw	r30, r16
    b26a:	84 81       	ldd	r24, Z+4	; 0x04
    b26c:	84 ff       	sbrs	r24, 4
    b26e:	12 c0       	rjmp	.+36     	; 0xb294 <follow_path+0x45e>
    b270:	66 85       	ldd	r22, Z+14	; 0x0e
    b272:	77 85       	ldd	r23, Z+15	; 0x0f
    b274:	71 70       	andi	r23, 0x01	; 1
    b276:	2d 81       	ldd	r18, Y+5	; 0x05
    b278:	3e 81       	ldd	r19, Y+6	; 0x06
    b27a:	62 0f       	add	r22, r18
    b27c:	73 1f       	adc	r23, r19
    b27e:	a9 81       	ldd	r26, Y+1	; 0x01
    b280:	ba 81       	ldd	r27, Y+2	; 0x02
    b282:	8c 91       	ld	r24, X
    b284:	0e 94 c4 49 	call	0x9388	; 0x9388 <ld_clust.isra.3>
    b288:	f8 01       	movw	r30, r16
    b28a:	66 83       	std	Z+6, r22	; 0x06
    b28c:	77 83       	std	Z+7, r23	; 0x07
    b28e:	80 87       	std	Z+8, r24	; 0x08
    b290:	91 87       	std	Z+9, r25	; 0x09
    b292:	88 ce       	rjmp	.-752    	; 0xafa4 <follow_path+0x16e>
    b294:	85 e0       	ldi	r24, 0x05	; 5
    b296:	90 e0       	ldi	r25, 0x00	; 0
    b298:	06 c0       	rjmp	.+12     	; 0xb2a6 <follow_path+0x470>
    b29a:	fb e0       	ldi	r31, 0x0B	; 11
    b29c:	8f 16       	cp	r8, r31
    b29e:	91 04       	cpc	r9, r1
    b2a0:	09 f0       	breq	.+2      	; 0xb2a4 <follow_path+0x46e>
    b2a2:	46 cf       	rjmp	.-372    	; 0xb130 <follow_path+0x2fa>
    b2a4:	30 cf       	rjmp	.-416    	; 0xb106 <follow_path+0x2d0>
    b2a6:	28 96       	adiw	r28, 0x08	; 8
    b2a8:	e2 e1       	ldi	r30, 0x12	; 18
    b2aa:	0c 94 d7 e6 	jmp	0x1cdae	; 0x1cdae <__epilogue_restores__>

0000b2ae <f_mount>:
    b2ae:	a6 e0       	ldi	r26, 0x06	; 6
    b2b0:	b0 e0       	ldi	r27, 0x00	; 0
    b2b2:	ed e5       	ldi	r30, 0x5D	; 93
    b2b4:	f9 e5       	ldi	r31, 0x59	; 89
    b2b6:	0c 94 ca e6 	jmp	0x1cd94	; 0x1cd94 <__prologue_saves__+0x1e>
    b2ba:	9c 83       	std	Y+4, r25	; 0x04
    b2bc:	8b 83       	std	Y+3, r24	; 0x03
    b2be:	7e 83       	std	Y+6, r23	; 0x06
    b2c0:	6d 83       	std	Y+5, r22	; 0x05
    b2c2:	14 2f       	mov	r17, r20
    b2c4:	7a 83       	std	Y+2, r23	; 0x02
    b2c6:	69 83       	std	Y+1, r22	; 0x01
    b2c8:	ce 01       	movw	r24, r28
    b2ca:	01 96       	adiw	r24, 0x01	; 1
    b2cc:	0e 94 37 48 	call	0x906e	; 0x906e <get_ldnumber>
    b2d0:	97 fd       	sbrc	r25, 7
    b2d2:	20 c0       	rjmp	.+64     	; 0xb314 <f_mount+0x66>
    b2d4:	88 0f       	add	r24, r24
    b2d6:	99 1f       	adc	r25, r25
    b2d8:	fc 01       	movw	r30, r24
    b2da:	ef 5d       	subi	r30, 0xDF	; 223
    b2dc:	f7 4e       	sbci	r31, 0xE7	; 231
    b2de:	01 90       	ld	r0, Z+
    b2e0:	f0 81       	ld	r31, Z
    b2e2:	e0 2d       	mov	r30, r0
    b2e4:	30 97       	sbiw	r30, 0x00	; 0
    b2e6:	09 f0       	breq	.+2      	; 0xb2ea <f_mount+0x3c>
    b2e8:	10 82       	st	Z, r1
    b2ea:	eb 81       	ldd	r30, Y+3	; 0x03
    b2ec:	fc 81       	ldd	r31, Y+4	; 0x04
    b2ee:	30 97       	sbiw	r30, 0x00	; 0
    b2f0:	09 f0       	breq	.+2      	; 0xb2f4 <f_mount+0x46>
    b2f2:	10 82       	st	Z, r1
    b2f4:	dc 01       	movw	r26, r24
    b2f6:	af 5d       	subi	r26, 0xDF	; 223
    b2f8:	b7 4e       	sbci	r27, 0xE7	; 231
    b2fa:	ed 93       	st	X+, r30
    b2fc:	fc 93       	st	X, r31
    b2fe:	11 23       	and	r17, r17
    b300:	61 f0       	breq	.+24     	; 0xb31a <f_mount+0x6c>
    b302:	40 e0       	ldi	r20, 0x00	; 0
    b304:	be 01       	movw	r22, r28
    b306:	6d 5f       	subi	r22, 0xFD	; 253
    b308:	7f 4f       	sbci	r23, 0xFF	; 255
    b30a:	ce 01       	movw	r24, r28
    b30c:	05 96       	adiw	r24, 0x05	; 5
    b30e:	0e 94 ce 4b 	call	0x979c	; 0x979c <mount_volume>
    b312:	05 c0       	rjmp	.+10     	; 0xb31e <f_mount+0x70>
    b314:	8b e0       	ldi	r24, 0x0B	; 11
    b316:	90 e0       	ldi	r25, 0x00	; 0
    b318:	02 c0       	rjmp	.+4      	; 0xb31e <f_mount+0x70>
    b31a:	80 e0       	ldi	r24, 0x00	; 0
    b31c:	90 e0       	ldi	r25, 0x00	; 0
    b31e:	26 96       	adiw	r28, 0x06	; 6
    b320:	e3 e0       	ldi	r30, 0x03	; 3
    b322:	0c 94 e6 e6 	jmp	0x1cdcc	; 0x1cdcc <__epilogue_restores__+0x1e>

0000b326 <f_open>:
    b326:	a6 e3       	ldi	r26, 0x36	; 54
    b328:	b0 e0       	ldi	r27, 0x00	; 0
    b32a:	e9 e9       	ldi	r30, 0x99	; 153
    b32c:	f9 e5       	ldi	r31, 0x59	; 89
    b32e:	0c 94 bb e6 	jmp	0x1cd76	; 0x1cd76 <__prologue_saves__>
    b332:	7a ab       	std	Y+50, r23	; 0x32
    b334:	69 ab       	std	Y+49, r22	; 0x31
    b336:	00 97       	sbiw	r24, 0x00	; 0
    b338:	09 f4       	brne	.+2      	; 0xb33c <f_open+0x16>
    b33a:	93 c1       	rjmp	.+806    	; 0xb662 <f_open+0x33c>
    b33c:	74 2e       	mov	r7, r20
    b33e:	7c 01       	movw	r14, r24
    b340:	24 2f       	mov	r18, r20
    b342:	2f 73       	andi	r18, 0x3F	; 63
    b344:	32 2e       	mov	r3, r18
    b346:	42 2f       	mov	r20, r18
    b348:	be 01       	movw	r22, r28
    b34a:	61 5d       	subi	r22, 0xD1	; 209
    b34c:	7f 4f       	sbci	r23, 0xFF	; 255
    b34e:	ce 01       	movw	r24, r28
    b350:	c1 96       	adiw	r24, 0x31	; 49
    b352:	0e 94 ce 4b 	call	0x979c	; 0x979c <mount_volume>
    b356:	00 97       	sbiw	r24, 0x00	; 0
    b358:	09 f0       	breq	.+2      	; 0xb35c <f_open+0x36>
    b35a:	7d c1       	rjmp	.+762    	; 0xb656 <f_open+0x330>
    b35c:	8f a5       	ldd	r24, Y+47	; 0x2f
    b35e:	98 a9       	ldd	r25, Y+48	; 0x30
    b360:	9a 83       	std	Y+2, r25	; 0x02
    b362:	89 83       	std	Y+1, r24	; 0x01
    b364:	80 e0       	ldi	r24, 0x00	; 0
    b366:	92 e0       	ldi	r25, 0x02	; 2
    b368:	0e 94 c9 68 	call	0xd192	; 0xd192 <ff_memalloc>
    b36c:	5c 01       	movw	r10, r24
    b36e:	00 97       	sbiw	r24, 0x00	; 0
    b370:	09 f4       	brne	.+2      	; 0xb374 <f_open+0x4e>
    b372:	79 c1       	rjmp	.+754    	; 0xb666 <f_open+0x340>
    b374:	ef a5       	ldd	r30, Y+47	; 0x2f
    b376:	f8 a9       	ldd	r31, Y+48	; 0x30
    b378:	94 87       	std	Z+12, r25	; 0x0c
    b37a:	83 87       	std	Z+11, r24	; 0x0b
    b37c:	69 a9       	ldd	r22, Y+49	; 0x31
    b37e:	7a a9       	ldd	r23, Y+50	; 0x32
    b380:	ce 01       	movw	r24, r28
    b382:	01 96       	adiw	r24, 0x01	; 1
    b384:	58 dd       	rcall	.-1360   	; 0xae36 <follow_path>
    b386:	8c 01       	movw	r16, r24
    b388:	89 2b       	or	r24, r25
    b38a:	29 f4       	brne	.+10     	; 0xb396 <f_open+0x70>
    b38c:	88 a5       	ldd	r24, Y+40	; 0x28
    b38e:	87 ff       	sbrs	r24, 7
    b390:	02 c0       	rjmp	.+4      	; 0xb396 <f_open+0x70>
    b392:	06 e0       	ldi	r16, 0x06	; 6
    b394:	10 e0       	ldi	r17, 0x00	; 0
    b396:	87 2d       	mov	r24, r7
    b398:	8c 71       	andi	r24, 0x1C	; 28
    b39a:	09 f4       	brne	.+2      	; 0xb39e <f_open+0x78>
    b39c:	75 c0       	rjmp	.+234    	; 0xb488 <f_open+0x162>
    b39e:	01 15       	cp	r16, r1
    b3a0:	11 05       	cpc	r17, r1
    b3a2:	79 f0       	breq	.+30     	; 0xb3c2 <f_open+0x9c>
    b3a4:	04 30       	cpi	r16, 0x04	; 4
    b3a6:	11 05       	cpc	r17, r1
    b3a8:	09 f0       	breq	.+2      	; 0xb3ac <f_open+0x86>
    b3aa:	6d c1       	rjmp	.+730    	; 0xb686 <f_open+0x360>
    b3ac:	ce 01       	movw	r24, r28
    b3ae:	01 96       	adiw	r24, 0x01	; 1
    b3b0:	b4 db       	rcall	.-2200   	; 0xab1a <dir_register>
    b3b2:	8c 01       	movw	r16, r24
    b3b4:	89 2b       	or	r24, r25
    b3b6:	09 f0       	breq	.+2      	; 0xb3ba <f_open+0x94>
    b3b8:	66 c1       	rjmp	.+716    	; 0xb686 <f_open+0x360>
    b3ba:	33 2d       	mov	r19, r3
    b3bc:	38 60       	ori	r19, 0x08	; 8
    b3be:	33 2e       	mov	r3, r19
    b3c0:	06 c0       	rjmp	.+12     	; 0xb3ce <f_open+0xa8>
    b3c2:	8d 81       	ldd	r24, Y+5	; 0x05
    b3c4:	81 71       	andi	r24, 0x11	; 17
    b3c6:	09 f0       	breq	.+2      	; 0xb3ca <f_open+0xa4>
    b3c8:	5c c1       	rjmp	.+696    	; 0xb682 <f_open+0x35c>
    b3ca:	72 fc       	sbrc	r7, 2
    b3cc:	51 c1       	rjmp	.+674    	; 0xb670 <f_open+0x34a>
    b3ce:	33 fe       	sbrs	r3, 3
    b3d0:	6b c0       	rjmp	.+214    	; 0xb4a8 <f_open+0x182>
    b3d2:	0b 8d       	ldd	r16, Y+27	; 0x1b
    b3d4:	1c 8d       	ldd	r17, Y+28	; 0x1c
    b3d6:	ef a5       	ldd	r30, Y+47	; 0x2f
    b3d8:	f8 a9       	ldd	r31, Y+48	; 0x30
    b3da:	b8 01       	movw	r22, r16
    b3dc:	80 81       	ld	r24, Z
    b3de:	0e 94 c4 49 	call	0x9388	; 0x9388 <ld_clust.isra.3>
    b3e2:	2b 01       	movw	r4, r22
    b3e4:	3c 01       	movw	r6, r24
    b3e6:	0e 94 4a 70 	call	0xe094	; 0xe094 <get_fattime>
    b3ea:	ab 01       	movw	r20, r22
    b3ec:	bc 01       	movw	r22, r24
    b3ee:	c8 01       	movw	r24, r16
    b3f0:	0e 96       	adiw	r24, 0x0e	; 14
    b3f2:	0e 94 a6 47 	call	0x8f4c	; 0x8f4c <st_dword>
    b3f6:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b3f8:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b3fa:	80 e2       	ldi	r24, 0x20	; 32
    b3fc:	83 87       	std	Z+11, r24	; 0x0b
    b3fe:	af a5       	ldd	r26, Y+47	; 0x2f
    b400:	b8 a9       	ldd	r27, Y+48	; 0x30
    b402:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b404:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b406:	12 8e       	std	Z+26, r1	; 0x1a
    b408:	13 8e       	std	Z+27, r1	; 0x1b
    b40a:	8c 91       	ld	r24, X
    b40c:	83 30       	cpi	r24, 0x03	; 3
    b40e:	11 f4       	brne	.+4      	; 0xb414 <f_open+0xee>
    b410:	14 8a       	std	Z+20, r1	; 0x14
    b412:	15 8a       	std	Z+21, r1	; 0x15
    b414:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b416:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b418:	14 8e       	std	Z+28, r1	; 0x1c
    b41a:	15 8e       	std	Z+29, r1	; 0x1d
    b41c:	16 8e       	std	Z+30, r1	; 0x1e
    b41e:	17 8e       	std	Z+31, r1	; 0x1f
    b420:	81 e0       	ldi	r24, 0x01	; 1
    b422:	fd 01       	movw	r30, r26
    b424:	83 83       	std	Z+3, r24	; 0x03
    b426:	41 14       	cp	r4, r1
    b428:	51 04       	cpc	r5, r1
    b42a:	61 04       	cpc	r6, r1
    b42c:	71 04       	cpc	r7, r1
    b42e:	c9 f1       	breq	.+114    	; 0xb4a2 <f_open+0x17c>
    b430:	21 a9       	ldd	r18, Z+49	; 0x31
    b432:	32 a9       	ldd	r19, Z+50	; 0x32
    b434:	43 a9       	ldd	r20, Z+51	; 0x33
    b436:	54 a9       	ldd	r21, Z+52	; 0x34
    b438:	2b ab       	std	Y+51, r18	; 0x33
    b43a:	3c ab       	std	Y+52, r19	; 0x34
    b43c:	4d ab       	std	Y+53, r20	; 0x35
    b43e:	5e ab       	std	Y+54, r21	; 0x36
    b440:	00 e0       	ldi	r16, 0x00	; 0
    b442:	10 e0       	ldi	r17, 0x00	; 0
    b444:	98 01       	movw	r18, r16
    b446:	b3 01       	movw	r22, r6
    b448:	a2 01       	movw	r20, r4
    b44a:	ce 01       	movw	r24, r28
    b44c:	01 96       	adiw	r24, 0x01	; 1
    b44e:	0e 94 bc 51 	call	0xa378	; 0xa378 <remove_chain>
    b452:	8c 01       	movw	r16, r24
    b454:	89 2b       	or	r24, r25
    b456:	09 f0       	breq	.+2      	; 0xb45a <f_open+0x134>
    b458:	16 c1       	rjmp	.+556    	; 0xb686 <f_open+0x360>
    b45a:	4b a9       	ldd	r20, Y+51	; 0x33
    b45c:	5c a9       	ldd	r21, Y+52	; 0x34
    b45e:	6d a9       	ldd	r22, Y+53	; 0x35
    b460:	7e a9       	ldd	r23, Y+54	; 0x36
    b462:	8f a5       	ldd	r24, Y+47	; 0x2f
    b464:	98 a9       	ldd	r25, Y+48	; 0x30
    b466:	0e 94 53 4b 	call	0x96a6	; 0x96a6 <move_window>
    b46a:	8c 01       	movw	r16, r24
    b46c:	ef a5       	ldd	r30, Y+47	; 0x2f
    b46e:	f8 a9       	ldd	r31, Y+48	; 0x30
    b470:	21 e0       	ldi	r18, 0x01	; 1
    b472:	42 1a       	sub	r4, r18
    b474:	51 08       	sbc	r5, r1
    b476:	61 08       	sbc	r6, r1
    b478:	71 08       	sbc	r7, r1
    b47a:	45 86       	std	Z+13, r4	; 0x0d
    b47c:	56 86       	std	Z+14, r5	; 0x0e
    b47e:	67 86       	std	Z+15, r6	; 0x0f
    b480:	70 8a       	std	Z+16, r7	; 0x10
    b482:	89 2b       	or	r24, r25
    b484:	61 f0       	breq	.+24     	; 0xb49e <f_open+0x178>
    b486:	ff c0       	rjmp	.+510    	; 0xb686 <f_open+0x360>
    b488:	01 15       	cp	r16, r1
    b48a:	11 05       	cpc	r17, r1
    b48c:	09 f0       	breq	.+2      	; 0xb490 <f_open+0x16a>
    b48e:	fb c0       	rjmp	.+502    	; 0xb686 <f_open+0x360>
    b490:	8d 81       	ldd	r24, Y+5	; 0x05
    b492:	84 fd       	sbrc	r24, 4
    b494:	f3 c0       	rjmp	.+486    	; 0xb67c <f_open+0x356>
    b496:	71 fe       	sbrs	r7, 1
    b498:	02 c0       	rjmp	.+4      	; 0xb49e <f_open+0x178>
    b49a:	80 fd       	sbrc	r24, 0
    b49c:	f2 c0       	rjmp	.+484    	; 0xb682 <f_open+0x35c>
    b49e:	33 fe       	sbrs	r3, 3
    b4a0:	03 c0       	rjmp	.+6      	; 0xb4a8 <f_open+0x182>
    b4a2:	33 2d       	mov	r19, r3
    b4a4:	30 64       	ori	r19, 0x40	; 64
    b4a6:	33 2e       	mov	r3, r19
    b4a8:	0f a5       	ldd	r16, Y+47	; 0x2f
    b4aa:	18 a9       	ldd	r17, Y+48	; 0x30
    b4ac:	f8 01       	movw	r30, r16
    b4ae:	81 a9       	ldd	r24, Z+49	; 0x31
    b4b0:	92 a9       	ldd	r25, Z+50	; 0x32
    b4b2:	a3 a9       	ldd	r26, Z+51	; 0x33
    b4b4:	b4 a9       	ldd	r27, Z+52	; 0x34
    b4b6:	f7 01       	movw	r30, r14
    b4b8:	84 8f       	std	Z+28, r24	; 0x1c
    b4ba:	95 8f       	std	Z+29, r25	; 0x1d
    b4bc:	a6 8f       	std	Z+30, r26	; 0x1e
    b4be:	b7 8f       	std	Z+31, r27	; 0x1f
    b4c0:	6b 8c       	ldd	r6, Y+27	; 0x1b
    b4c2:	7c 8c       	ldd	r7, Y+28	; 0x1c
    b4c4:	71 a2       	std	Z+33, r7	; 0x21
    b4c6:	60 a2       	std	Z+32, r6	; 0x20
    b4c8:	b3 01       	movw	r22, r6
    b4ca:	f8 01       	movw	r30, r16
    b4cc:	80 81       	ld	r24, Z
    b4ce:	0e 94 c4 49 	call	0x9388	; 0x9388 <ld_clust.isra.3>
    b4d2:	f7 01       	movw	r30, r14
    b4d4:	66 83       	std	Z+6, r22	; 0x06
    b4d6:	77 83       	std	Z+7, r23	; 0x07
    b4d8:	80 87       	std	Z+8, r24	; 0x08
    b4da:	91 87       	std	Z+9, r25	; 0x09
    b4dc:	c3 01       	movw	r24, r6
    b4de:	4c 96       	adiw	r24, 0x1c	; 28
    b4e0:	0e 94 91 47 	call	0x8f22	; 0x8f22 <ld_dword>
    b4e4:	f7 01       	movw	r30, r14
    b4e6:	62 87       	std	Z+10, r22	; 0x0a
    b4e8:	73 87       	std	Z+11, r23	; 0x0b
    b4ea:	84 87       	std	Z+12, r24	; 0x0c
    b4ec:	95 87       	std	Z+13, r25	; 0x0d
    b4ee:	13 a2       	std	Z+35, r1	; 0x23
    b4f0:	12 a2       	std	Z+34, r1	; 0x22
    b4f2:	11 83       	std	Z+1, r17	; 0x01
    b4f4:	00 83       	st	Z, r16
    b4f6:	f8 01       	movw	r30, r16
    b4f8:	85 81       	ldd	r24, Z+5	; 0x05
    b4fa:	96 81       	ldd	r25, Z+6	; 0x06
    b4fc:	f7 01       	movw	r30, r14
    b4fe:	93 83       	std	Z+3, r25	; 0x03
    b500:	82 83       	std	Z+2, r24	; 0x02
    b502:	36 86       	std	Z+14, r3	; 0x0e
    b504:	17 86       	std	Z+15, r1	; 0x0f
    b506:	10 8e       	std	Z+24, r1	; 0x18
    b508:	11 8e       	std	Z+25, r1	; 0x19
    b50a:	12 8e       	std	Z+26, r1	; 0x1a
    b50c:	13 8e       	std	Z+27, r1	; 0x1b
    b50e:	10 8a       	std	Z+16, r1	; 0x10
    b510:	11 8a       	std	Z+17, r1	; 0x11
    b512:	12 8a       	std	Z+18, r1	; 0x12
    b514:	13 8a       	std	Z+19, r1	; 0x13
    b516:	67 01       	movw	r12, r14
    b518:	f4 e2       	ldi	r31, 0x24	; 36
    b51a:	cf 0e       	add	r12, r31
    b51c:	d1 1c       	adc	r13, r1
    b51e:	40 e0       	ldi	r20, 0x00	; 0
    b520:	52 e0       	ldi	r21, 0x02	; 2
    b522:	60 e0       	ldi	r22, 0x00	; 0
    b524:	70 e0       	ldi	r23, 0x00	; 0
    b526:	c6 01       	movw	r24, r12
    b528:	0e 94 ac 47 	call	0x8f58	; 0x8f58 <mem_set>
    b52c:	35 fc       	sbrc	r3, 5
    b52e:	03 c0       	rjmp	.+6      	; 0xb536 <f_open+0x210>
    b530:	00 e0       	ldi	r16, 0x00	; 0
    b532:	10 e0       	ldi	r17, 0x00	; 0
    b534:	89 c0       	rjmp	.+274    	; 0xb648 <f_open+0x322>
    b536:	f7 01       	movw	r30, r14
    b538:	62 84       	ldd	r6, Z+10	; 0x0a
    b53a:	73 84       	ldd	r7, Z+11	; 0x0b
    b53c:	84 84       	ldd	r8, Z+12	; 0x0c
    b53e:	95 84       	ldd	r9, Z+13	; 0x0d
    b540:	61 14       	cp	r6, r1
    b542:	71 04       	cpc	r7, r1
    b544:	81 04       	cpc	r8, r1
    b546:	91 04       	cpc	r9, r1
    b548:	99 f3       	breq	.-26     	; 0xb530 <f_open+0x20a>
    b54a:	60 8a       	std	Z+16, r6	; 0x10
    b54c:	71 8a       	std	Z+17, r7	; 0x11
    b54e:	82 8a       	std	Z+18, r8	; 0x12
    b550:	93 8a       	std	Z+19, r9	; 0x13
    b552:	ef a5       	ldd	r30, Y+47	; 0x2f
    b554:	f8 a9       	ldd	r31, Y+48	; 0x30
    b556:	21 84       	ldd	r2, Z+9	; 0x09
    b558:	32 84       	ldd	r3, Z+10	; 0x0a
    b55a:	c1 01       	movw	r24, r2
    b55c:	a0 e0       	ldi	r26, 0x00	; 0
    b55e:	b0 e0       	ldi	r27, 0x00	; 0
    b560:	1c 01       	movw	r2, r24
    b562:	2d 01       	movw	r4, r26
    b564:	59 e0       	ldi	r21, 0x09	; 9
    b566:	22 0c       	add	r2, r2
    b568:	33 1c       	adc	r3, r3
    b56a:	44 1c       	adc	r4, r4
    b56c:	55 1c       	adc	r5, r5
    b56e:	5a 95       	dec	r21
    b570:	d1 f7       	brne	.-12     	; 0xb566 <f_open+0x240>
    b572:	f7 01       	movw	r30, r14
    b574:	46 81       	ldd	r20, Z+6	; 0x06
    b576:	57 81       	ldd	r21, Z+7	; 0x07
    b578:	60 85       	ldd	r22, Z+8	; 0x08
    b57a:	71 85       	ldd	r23, Z+9	; 0x09
    b57c:	26 14       	cp	r2, r6
    b57e:	37 04       	cpc	r3, r7
    b580:	48 04       	cpc	r4, r8
    b582:	59 04       	cpc	r5, r9
    b584:	f0 f4       	brcc	.+60     	; 0xb5c2 <f_open+0x29c>
    b586:	f7 01       	movw	r30, r14
    b588:	80 81       	ld	r24, Z
    b58a:	91 81       	ldd	r25, Z+1	; 0x01
    b58c:	0e 94 21 4f 	call	0x9e42	; 0x9e42 <get_fat.isra.9>
    b590:	ab 01       	movw	r20, r22
    b592:	bc 01       	movw	r22, r24
    b594:	d4 01       	movw	r26, r8
    b596:	c3 01       	movw	r24, r6
    b598:	82 19       	sub	r24, r2
    b59a:	93 09       	sbc	r25, r3
    b59c:	a4 09       	sbc	r26, r4
    b59e:	b5 09       	sbc	r27, r5
    b5a0:	3c 01       	movw	r6, r24
    b5a2:	4d 01       	movw	r8, r26
    b5a4:	42 30       	cpi	r20, 0x02	; 2
    b5a6:	51 05       	cpc	r21, r1
    b5a8:	61 05       	cpc	r22, r1
    b5aa:	71 05       	cpc	r23, r1
    b5ac:	08 f4       	brcc	.+2      	; 0xb5b0 <f_open+0x28a>
    b5ae:	63 c0       	rjmp	.+198    	; 0xb676 <f_open+0x350>
    b5b0:	4f 3f       	cpi	r20, 0xFF	; 255
    b5b2:	ff ef       	ldi	r31, 0xFF	; 255
    b5b4:	5f 07       	cpc	r21, r31
    b5b6:	6f 07       	cpc	r22, r31
    b5b8:	7f 07       	cpc	r23, r31
    b5ba:	01 f7       	brne	.-64     	; 0xb57c <f_open+0x256>
    b5bc:	01 e0       	ldi	r16, 0x01	; 1
    b5be:	10 e0       	ldi	r17, 0x00	; 0
    b5c0:	02 c0       	rjmp	.+4      	; 0xb5c6 <f_open+0x2a0>
    b5c2:	00 e0       	ldi	r16, 0x00	; 0
    b5c4:	10 e0       	ldi	r17, 0x00	; 0
    b5c6:	f7 01       	movw	r30, r14
    b5c8:	44 8b       	std	Z+20, r20	; 0x14
    b5ca:	55 8b       	std	Z+21, r21	; 0x15
    b5cc:	66 8b       	std	Z+22, r22	; 0x16
    b5ce:	77 8b       	std	Z+23, r23	; 0x17
    b5d0:	01 15       	cp	r16, r1
    b5d2:	11 05       	cpc	r17, r1
    b5d4:	c9 f5       	brne	.+114    	; 0xb648 <f_open+0x322>
    b5d6:	d4 01       	movw	r26, r8
    b5d8:	c3 01       	movw	r24, r6
    b5da:	91 70       	andi	r25, 0x01	; 1
    b5dc:	aa 27       	eor	r26, r26
    b5de:	bb 27       	eor	r27, r27
    b5e0:	89 2b       	or	r24, r25
    b5e2:	8a 2b       	or	r24, r26
    b5e4:	8b 2b       	or	r24, r27
    b5e6:	09 f4       	brne	.+2      	; 0xb5ea <f_open+0x2c4>
    b5e8:	a3 cf       	rjmp	.-186    	; 0xb530 <f_open+0x20a>
    b5ea:	4f a4       	ldd	r4, Y+47	; 0x2f
    b5ec:	58 a8       	ldd	r5, Y+48	; 0x30
    b5ee:	c2 01       	movw	r24, r4
    b5f0:	0e 94 c4 47 	call	0x8f88	; 0x8f88 <clst2sect>
    b5f4:	61 15       	cp	r22, r1
    b5f6:	71 05       	cpc	r23, r1
    b5f8:	81 05       	cpc	r24, r1
    b5fa:	91 05       	cpc	r25, r1
    b5fc:	19 f1       	breq	.+70     	; 0xb644 <f_open+0x31e>
    b5fe:	94 01       	movw	r18, r8
    b600:	83 01       	movw	r16, r6
    b602:	49 e0       	ldi	r20, 0x09	; 9
    b604:	36 95       	lsr	r19
    b606:	27 95       	ror	r18
    b608:	17 95       	ror	r17
    b60a:	07 95       	ror	r16
    b60c:	4a 95       	dec	r20
    b60e:	d1 f7       	brne	.-12     	; 0xb604 <f_open+0x2de>
    b610:	a9 01       	movw	r20, r18
    b612:	98 01       	movw	r18, r16
    b614:	26 0f       	add	r18, r22
    b616:	37 1f       	adc	r19, r23
    b618:	48 1f       	adc	r20, r24
    b61a:	59 1f       	adc	r21, r25
    b61c:	f7 01       	movw	r30, r14
    b61e:	20 8f       	std	Z+24, r18	; 0x18
    b620:	31 8f       	std	Z+25, r19	; 0x19
    b622:	42 8f       	std	Z+26, r20	; 0x1a
    b624:	53 8f       	std	Z+27, r21	; 0x1b
    b626:	01 e0       	ldi	r16, 0x01	; 1
    b628:	10 e0       	ldi	r17, 0x00	; 0
    b62a:	b6 01       	movw	r22, r12
    b62c:	f2 01       	movw	r30, r4
    b62e:	81 81       	ldd	r24, Z+1	; 0x01
    b630:	0e 94 85 69 	call	0xd30a	; 0xd30a <disk_read>
    b634:	31 e0       	ldi	r19, 0x01	; 1
    b636:	20 e0       	ldi	r18, 0x00	; 0
    b638:	89 2b       	or	r24, r25
    b63a:	09 f4       	brne	.+2      	; 0xb63e <f_open+0x318>
    b63c:	30 e0       	ldi	r19, 0x00	; 0
    b63e:	03 2f       	mov	r16, r19
    b640:	12 2f       	mov	r17, r18
    b642:	02 c0       	rjmp	.+4      	; 0xb648 <f_open+0x322>
    b644:	02 e0       	ldi	r16, 0x02	; 2
    b646:	10 e0       	ldi	r17, 0x00	; 0
    b648:	c5 01       	movw	r24, r10
    b64a:	0e 94 cc 68 	call	0xd198	; 0xd198 <ff_memfree>
    b64e:	01 15       	cp	r16, r1
    b650:	11 05       	cpc	r17, r1
    b652:	59 f0       	breq	.+22     	; 0xb66a <f_open+0x344>
    b654:	01 c0       	rjmp	.+2      	; 0xb658 <f_open+0x332>
    b656:	8c 01       	movw	r16, r24
    b658:	f7 01       	movw	r30, r14
    b65a:	11 82       	std	Z+1, r1	; 0x01
    b65c:	10 82       	st	Z, r1
    b65e:	c8 01       	movw	r24, r16
    b660:	16 c0       	rjmp	.+44     	; 0xb68e <f_open+0x368>
    b662:	89 e0       	ldi	r24, 0x09	; 9
    b664:	03 c0       	rjmp	.+6      	; 0xb66c <f_open+0x346>
    b666:	81 e1       	ldi	r24, 0x11	; 17
    b668:	01 c0       	rjmp	.+2      	; 0xb66c <f_open+0x346>
    b66a:	80 e0       	ldi	r24, 0x00	; 0
    b66c:	90 e0       	ldi	r25, 0x00	; 0
    b66e:	0f c0       	rjmp	.+30     	; 0xb68e <f_open+0x368>
    b670:	08 e0       	ldi	r16, 0x08	; 8
    b672:	10 e0       	ldi	r17, 0x00	; 0
    b674:	08 c0       	rjmp	.+16     	; 0xb686 <f_open+0x360>
    b676:	02 e0       	ldi	r16, 0x02	; 2
    b678:	10 e0       	ldi	r17, 0x00	; 0
    b67a:	a5 cf       	rjmp	.-182    	; 0xb5c6 <f_open+0x2a0>
    b67c:	04 e0       	ldi	r16, 0x04	; 4
    b67e:	10 e0       	ldi	r17, 0x00	; 0
    b680:	02 c0       	rjmp	.+4      	; 0xb686 <f_open+0x360>
    b682:	07 e0       	ldi	r16, 0x07	; 7
    b684:	10 e0       	ldi	r17, 0x00	; 0
    b686:	c5 01       	movw	r24, r10
    b688:	0e 94 cc 68 	call	0xd198	; 0xd198 <ff_memfree>
    b68c:	e5 cf       	rjmp	.-54     	; 0xb658 <f_open+0x332>
    b68e:	e6 96       	adiw	r28, 0x36	; 54
    b690:	e2 e1       	ldi	r30, 0x12	; 18
    b692:	0c 94 d7 e6 	jmp	0x1cdae	; 0x1cdae <__epilogue_restores__>

0000b696 <f_read>:
    b696:	a6 e0       	ldi	r26, 0x06	; 6
    b698:	b0 e0       	ldi	r27, 0x00	; 0
    b69a:	e1 e5       	ldi	r30, 0x51	; 81
    b69c:	fb e5       	ldi	r31, 0x5B	; 91
    b69e:	0c 94 bb e6 	jmp	0x1cd76	; 0x1cd76 <__prologue_saves__>
    b6a2:	7c 01       	movw	r14, r24
    b6a4:	4b 01       	movw	r8, r22
    b6a6:	5a 01       	movw	r10, r20
    b6a8:	3e 83       	std	Y+6, r19	; 0x06
    b6aa:	2d 83       	std	Y+5, r18	; 0x05
    b6ac:	f9 01       	movw	r30, r18
    b6ae:	11 82       	std	Z+1, r1	; 0x01
    b6b0:	10 82       	st	Z, r1
    b6b2:	be 01       	movw	r22, r28
    b6b4:	6f 5f       	subi	r22, 0xFF	; 255
    b6b6:	7f 4f       	sbci	r23, 0xFF	; 255
    b6b8:	0e 94 63 48 	call	0x90c6	; 0x90c6 <validate>
    b6bc:	00 97       	sbiw	r24, 0x00	; 0
    b6be:	09 f0       	breq	.+2      	; 0xb6c2 <f_read+0x2c>
    b6c0:	31 c1       	rjmp	.+610    	; 0xb924 <f_read+0x28e>
    b6c2:	f7 01       	movw	r30, r14
    b6c4:	87 85       	ldd	r24, Z+15	; 0x0f
    b6c6:	90 e0       	ldi	r25, 0x00	; 0
    b6c8:	00 97       	sbiw	r24, 0x00	; 0
    b6ca:	09 f0       	breq	.+2      	; 0xb6ce <f_read+0x38>
    b6cc:	2b c1       	rjmp	.+598    	; 0xb924 <f_read+0x28e>
    b6ce:	86 85       	ldd	r24, Z+14	; 0x0e
    b6d0:	80 ff       	sbrs	r24, 0
    b6d2:	26 c1       	rjmp	.+588    	; 0xb920 <f_read+0x28a>
    b6d4:	82 85       	ldd	r24, Z+10	; 0x0a
    b6d6:	93 85       	ldd	r25, Z+11	; 0x0b
    b6d8:	a4 85       	ldd	r26, Z+12	; 0x0c
    b6da:	b5 85       	ldd	r27, Z+13	; 0x0d
    b6dc:	40 89       	ldd	r20, Z+16	; 0x10
    b6de:	51 89       	ldd	r21, Z+17	; 0x11
    b6e0:	62 89       	ldd	r22, Z+18	; 0x12
    b6e2:	73 89       	ldd	r23, Z+19	; 0x13
    b6e4:	84 1b       	sub	r24, r20
    b6e6:	95 0b       	sbc	r25, r21
    b6e8:	a6 0b       	sbc	r26, r22
    b6ea:	b7 0b       	sbc	r27, r23
    b6ec:	a5 01       	movw	r20, r10
    b6ee:	60 e0       	ldi	r22, 0x00	; 0
    b6f0:	70 e0       	ldi	r23, 0x00	; 0
    b6f2:	84 17       	cp	r24, r20
    b6f4:	95 07       	cpc	r25, r21
    b6f6:	a6 07       	cpc	r26, r22
    b6f8:	b7 07       	cpc	r27, r23
    b6fa:	08 f4       	brcc	.+2      	; 0xb6fe <f_read+0x68>
    b6fc:	5c 01       	movw	r10, r24
    b6fe:	17 01       	movw	r2, r14
    b700:	f4 e2       	ldi	r31, 0x24	; 36
    b702:	2f 0e       	add	r2, r31
    b704:	31 1c       	adc	r3, r1
    b706:	a1 14       	cp	r10, r1
    b708:	b1 04       	cpc	r11, r1
    b70a:	09 f4       	brne	.+2      	; 0xb70e <f_read+0x78>
    b70c:	07 c1       	rjmp	.+526    	; 0xb91c <f_read+0x286>
    b70e:	f7 01       	movw	r30, r14
    b710:	40 89       	ldd	r20, Z+16	; 0x10
    b712:	51 89       	ldd	r21, Z+17	; 0x11
    b714:	62 89       	ldd	r22, Z+18	; 0x12
    b716:	73 89       	ldd	r23, Z+19	; 0x13
    b718:	db 01       	movw	r26, r22
    b71a:	ca 01       	movw	r24, r20
    b71c:	91 70       	andi	r25, 0x01	; 1
    b71e:	aa 27       	eor	r26, r26
    b720:	bb 27       	eor	r27, r27
    b722:	89 2b       	or	r24, r25
    b724:	8a 2b       	or	r24, r26
    b726:	8b 2b       	or	r24, r27
    b728:	09 f0       	breq	.+2      	; 0xb72c <f_read+0x96>
    b72a:	cb c0       	rjmp	.+406    	; 0xb8c2 <f_read+0x22c>
    b72c:	e9 81       	ldd	r30, Y+1	; 0x01
    b72e:	fa 81       	ldd	r31, Y+2	; 0x02
    b730:	01 85       	ldd	r16, Z+9	; 0x09
    b732:	12 85       	ldd	r17, Z+10	; 0x0a
    b734:	01 50       	subi	r16, 0x01	; 1
    b736:	11 09       	sbc	r17, r1
    b738:	db 01       	movw	r26, r22
    b73a:	ca 01       	movw	r24, r20
    b73c:	e9 e0       	ldi	r30, 0x09	; 9
    b73e:	b6 95       	lsr	r27
    b740:	a7 95       	ror	r26
    b742:	97 95       	ror	r25
    b744:	87 95       	ror	r24
    b746:	ea 95       	dec	r30
    b748:	d1 f7       	brne	.-12     	; 0xb73e <f_read+0xa8>
    b74a:	08 23       	and	r16, r24
    b74c:	19 23       	and	r17, r25
    b74e:	01 15       	cp	r16, r1
    b750:	11 05       	cpc	r17, r1
    b752:	91 f5       	brne	.+100    	; 0xb7b8 <f_read+0x122>
    b754:	f7 01       	movw	r30, r14
    b756:	41 15       	cp	r20, r1
    b758:	51 05       	cpc	r21, r1
    b75a:	61 05       	cpc	r22, r1
    b75c:	71 05       	cpc	r23, r1
    b75e:	29 f4       	brne	.+10     	; 0xb76a <f_read+0xd4>
    b760:	66 81       	ldd	r22, Z+6	; 0x06
    b762:	77 81       	ldd	r23, Z+7	; 0x07
    b764:	80 85       	ldd	r24, Z+8	; 0x08
    b766:	91 85       	ldd	r25, Z+9	; 0x09
    b768:	11 c0       	rjmp	.+34     	; 0xb78c <f_read+0xf6>
    b76a:	82 a1       	ldd	r24, Z+34	; 0x22
    b76c:	93 a1       	ldd	r25, Z+35	; 0x23
    b76e:	89 2b       	or	r24, r25
    b770:	21 f0       	breq	.+8      	; 0xb77a <f_read+0xe4>
    b772:	c7 01       	movw	r24, r14
    b774:	0e 94 ec 47 	call	0x8fd8	; 0x8fd8 <clmt_clust>
    b778:	09 c0       	rjmp	.+18     	; 0xb78c <f_read+0xf6>
    b77a:	f7 01       	movw	r30, r14
    b77c:	44 89       	ldd	r20, Z+20	; 0x14
    b77e:	55 89       	ldd	r21, Z+21	; 0x15
    b780:	66 89       	ldd	r22, Z+22	; 0x16
    b782:	77 89       	ldd	r23, Z+23	; 0x17
    b784:	80 81       	ld	r24, Z
    b786:	91 81       	ldd	r25, Z+1	; 0x01
    b788:	0e 94 21 4f 	call	0x9e42	; 0x9e42 <get_fat.isra.9>
    b78c:	62 30       	cpi	r22, 0x02	; 2
    b78e:	71 05       	cpc	r23, r1
    b790:	81 05       	cpc	r24, r1
    b792:	91 05       	cpc	r25, r1
    b794:	10 f4       	brcc	.+4      	; 0xb79a <f_read+0x104>
    b796:	82 e0       	ldi	r24, 0x02	; 2
    b798:	07 c0       	rjmp	.+14     	; 0xb7a8 <f_read+0x112>
    b79a:	6f 3f       	cpi	r22, 0xFF	; 255
    b79c:	ff ef       	ldi	r31, 0xFF	; 255
    b79e:	7f 07       	cpc	r23, r31
    b7a0:	8f 07       	cpc	r24, r31
    b7a2:	9f 07       	cpc	r25, r31
    b7a4:	21 f4       	brne	.+8      	; 0xb7ae <f_read+0x118>
    b7a6:	81 e0       	ldi	r24, 0x01	; 1
    b7a8:	f7 01       	movw	r30, r14
    b7aa:	87 87       	std	Z+15, r24	; 0x0f
    b7ac:	ba c0       	rjmp	.+372    	; 0xb922 <f_read+0x28c>
    b7ae:	f7 01       	movw	r30, r14
    b7b0:	64 8b       	std	Z+20, r22	; 0x14
    b7b2:	75 8b       	std	Z+21, r23	; 0x15
    b7b4:	86 8b       	std	Z+22, r24	; 0x16
    b7b6:	97 8b       	std	Z+23, r25	; 0x17
    b7b8:	89 81       	ldd	r24, Y+1	; 0x01
    b7ba:	9a 81       	ldd	r25, Y+2	; 0x02
    b7bc:	9c 83       	std	Y+4, r25	; 0x04
    b7be:	8b 83       	std	Y+3, r24	; 0x03
    b7c0:	f7 01       	movw	r30, r14
    b7c2:	44 89       	ldd	r20, Z+20	; 0x14
    b7c4:	55 89       	ldd	r21, Z+21	; 0x15
    b7c6:	66 89       	ldd	r22, Z+22	; 0x16
    b7c8:	77 89       	ldd	r23, Z+23	; 0x17
    b7ca:	0e 94 c4 47 	call	0x8f88	; 0x8f88 <clst2sect>
    b7ce:	61 15       	cp	r22, r1
    b7d0:	71 05       	cpc	r23, r1
    b7d2:	81 05       	cpc	r24, r1
    b7d4:	91 05       	cpc	r25, r1
    b7d6:	f9 f2       	breq	.-66     	; 0xb796 <f_read+0x100>
    b7d8:	2b 01       	movw	r4, r22
    b7da:	3c 01       	movw	r6, r24
    b7dc:	40 0e       	add	r4, r16
    b7de:	51 1e       	adc	r5, r17
    b7e0:	61 1c       	adc	r6, r1
    b7e2:	71 1c       	adc	r7, r1
    b7e4:	65 01       	movw	r12, r10
    b7e6:	cd 2c       	mov	r12, r13
    b7e8:	dd 24       	eor	r13, r13
    b7ea:	c6 94       	lsr	r12
    b7ec:	c1 14       	cp	r12, r1
    b7ee:	d1 04       	cpc	r13, r1
    b7f0:	d1 f1       	breq	.+116    	; 0xb866 <f_read+0x1d0>
    b7f2:	eb 81       	ldd	r30, Y+3	; 0x03
    b7f4:	fc 81       	ldd	r31, Y+4	; 0x04
    b7f6:	81 85       	ldd	r24, Z+9	; 0x09
    b7f8:	92 85       	ldd	r25, Z+10	; 0x0a
    b7fa:	98 01       	movw	r18, r16
    b7fc:	2c 0d       	add	r18, r12
    b7fe:	3d 1d       	adc	r19, r13
    b800:	82 17       	cp	r24, r18
    b802:	93 07       	cpc	r25, r19
    b804:	18 f4       	brcc	.+6      	; 0xb80c <f_read+0x176>
    b806:	6c 01       	movw	r12, r24
    b808:	c0 1a       	sub	r12, r16
    b80a:	d1 0a       	sbc	r13, r17
    b80c:	86 01       	movw	r16, r12
    b80e:	a3 01       	movw	r20, r6
    b810:	92 01       	movw	r18, r4
    b812:	b4 01       	movw	r22, r8
    b814:	eb 81       	ldd	r30, Y+3	; 0x03
    b816:	fc 81       	ldd	r31, Y+4	; 0x04
    b818:	81 81       	ldd	r24, Z+1	; 0x01
    b81a:	0e 94 85 69 	call	0xd30a	; 0xd30a <disk_read>
    b81e:	89 2b       	or	r24, r25
    b820:	11 f6       	brne	.-124    	; 0xb7a6 <f_read+0x110>
    b822:	f7 01       	movw	r30, r14
    b824:	86 85       	ldd	r24, Z+14	; 0x0e
    b826:	87 ff       	sbrs	r24, 7
    b828:	1a c0       	rjmp	.+52     	; 0xb85e <f_read+0x1c8>
    b82a:	80 8d       	ldd	r24, Z+24	; 0x18
    b82c:	91 8d       	ldd	r25, Z+25	; 0x19
    b82e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    b830:	b3 8d       	ldd	r27, Z+27	; 0x1b
    b832:	84 19       	sub	r24, r4
    b834:	95 09       	sbc	r25, r5
    b836:	a6 09       	sbc	r26, r6
    b838:	b7 09       	sbc	r27, r7
    b83a:	a6 01       	movw	r20, r12
    b83c:	60 e0       	ldi	r22, 0x00	; 0
    b83e:	70 e0       	ldi	r23, 0x00	; 0
    b840:	84 17       	cp	r24, r20
    b842:	95 07       	cpc	r25, r21
    b844:	a6 07       	cpc	r26, r22
    b846:	b7 07       	cpc	r27, r23
    b848:	50 f4       	brcc	.+20     	; 0xb85e <f_read+0x1c8>
    b84a:	98 2f       	mov	r25, r24
    b84c:	88 27       	eor	r24, r24
    b84e:	99 0f       	add	r25, r25
    b850:	40 e0       	ldi	r20, 0x00	; 0
    b852:	52 e0       	ldi	r21, 0x02	; 2
    b854:	b1 01       	movw	r22, r2
    b856:	88 0d       	add	r24, r8
    b858:	99 1d       	adc	r25, r9
    b85a:	0e 94 b9 49 	call	0x9372	; 0x9372 <mem_cpy.part.0>
    b85e:	dc 2c       	mov	r13, r12
    b860:	cc 24       	eor	r12, r12
    b862:	dd 0c       	add	r13, r13
    b864:	41 c0       	rjmp	.+130    	; 0xb8e8 <f_read+0x252>
    b866:	f7 01       	movw	r30, r14
    b868:	20 8d       	ldd	r18, Z+24	; 0x18
    b86a:	31 8d       	ldd	r19, Z+25	; 0x19
    b86c:	42 8d       	ldd	r20, Z+26	; 0x1a
    b86e:	53 8d       	ldd	r21, Z+27	; 0x1b
    b870:	42 16       	cp	r4, r18
    b872:	53 06       	cpc	r5, r19
    b874:	64 06       	cpc	r6, r20
    b876:	75 06       	cpc	r7, r21
    b878:	f9 f0       	breq	.+62     	; 0xb8b8 <f_read+0x222>
    b87a:	86 85       	ldd	r24, Z+14	; 0x0e
    b87c:	87 ff       	sbrs	r24, 7
    b87e:	0f c0       	rjmp	.+30     	; 0xb89e <f_read+0x208>
    b880:	01 e0       	ldi	r16, 0x01	; 1
    b882:	10 e0       	ldi	r17, 0x00	; 0
    b884:	b1 01       	movw	r22, r2
    b886:	eb 81       	ldd	r30, Y+3	; 0x03
    b888:	fc 81       	ldd	r31, Y+4	; 0x04
    b88a:	81 81       	ldd	r24, Z+1	; 0x01
    b88c:	0e 94 95 69 	call	0xd32a	; 0xd32a <disk_write>
    b890:	89 2b       	or	r24, r25
    b892:	09 f0       	breq	.+2      	; 0xb896 <f_read+0x200>
    b894:	88 cf       	rjmp	.-240    	; 0xb7a6 <f_read+0x110>
    b896:	f7 01       	movw	r30, r14
    b898:	86 85       	ldd	r24, Z+14	; 0x0e
    b89a:	8f 77       	andi	r24, 0x7F	; 127
    b89c:	86 87       	std	Z+14, r24	; 0x0e
    b89e:	e9 81       	ldd	r30, Y+1	; 0x01
    b8a0:	fa 81       	ldd	r31, Y+2	; 0x02
    b8a2:	01 e0       	ldi	r16, 0x01	; 1
    b8a4:	10 e0       	ldi	r17, 0x00	; 0
    b8a6:	a3 01       	movw	r20, r6
    b8a8:	92 01       	movw	r18, r4
    b8aa:	b1 01       	movw	r22, r2
    b8ac:	81 81       	ldd	r24, Z+1	; 0x01
    b8ae:	0e 94 85 69 	call	0xd30a	; 0xd30a <disk_read>
    b8b2:	89 2b       	or	r24, r25
    b8b4:	09 f0       	breq	.+2      	; 0xb8b8 <f_read+0x222>
    b8b6:	77 cf       	rjmp	.-274    	; 0xb7a6 <f_read+0x110>
    b8b8:	f7 01       	movw	r30, r14
    b8ba:	40 8e       	std	Z+24, r4	; 0x18
    b8bc:	51 8e       	std	Z+25, r5	; 0x19
    b8be:	62 8e       	std	Z+26, r6	; 0x1a
    b8c0:	73 8e       	std	Z+27, r7	; 0x1b
    b8c2:	f7 01       	movw	r30, r14
    b8c4:	60 89       	ldd	r22, Z+16	; 0x10
    b8c6:	71 89       	ldd	r23, Z+17	; 0x11
    b8c8:	71 70       	andi	r23, 0x01	; 1
    b8ca:	80 e0       	ldi	r24, 0x00	; 0
    b8cc:	92 e0       	ldi	r25, 0x02	; 2
    b8ce:	86 1b       	sub	r24, r22
    b8d0:	97 0b       	sbc	r25, r23
    b8d2:	65 01       	movw	r12, r10
    b8d4:	8a 15       	cp	r24, r10
    b8d6:	9b 05       	cpc	r25, r11
    b8d8:	08 f4       	brcc	.+2      	; 0xb8dc <f_read+0x246>
    b8da:	6c 01       	movw	r12, r24
    b8dc:	62 0d       	add	r22, r2
    b8de:	73 1d       	adc	r23, r3
    b8e0:	a6 01       	movw	r20, r12
    b8e2:	c4 01       	movw	r24, r8
    b8e4:	0e 94 b9 49 	call	0x9372	; 0x9372 <mem_cpy.part.0>
    b8e8:	ac 18       	sub	r10, r12
    b8ea:	bd 08       	sbc	r11, r13
    b8ec:	ed 81       	ldd	r30, Y+5	; 0x05
    b8ee:	fe 81       	ldd	r31, Y+6	; 0x06
    b8f0:	80 81       	ld	r24, Z
    b8f2:	91 81       	ldd	r25, Z+1	; 0x01
    b8f4:	8c 0d       	add	r24, r12
    b8f6:	9d 1d       	adc	r25, r13
    b8f8:	91 83       	std	Z+1, r25	; 0x01
    b8fa:	80 83       	st	Z, r24
    b8fc:	8c 0c       	add	r8, r12
    b8fe:	9d 1c       	adc	r9, r13
    b900:	f7 01       	movw	r30, r14
    b902:	80 89       	ldd	r24, Z+16	; 0x10
    b904:	91 89       	ldd	r25, Z+17	; 0x11
    b906:	a2 89       	ldd	r26, Z+18	; 0x12
    b908:	b3 89       	ldd	r27, Z+19	; 0x13
    b90a:	8c 0d       	add	r24, r12
    b90c:	9d 1d       	adc	r25, r13
    b90e:	a1 1d       	adc	r26, r1
    b910:	b1 1d       	adc	r27, r1
    b912:	80 8b       	std	Z+16, r24	; 0x10
    b914:	91 8b       	std	Z+17, r25	; 0x11
    b916:	a2 8b       	std	Z+18, r26	; 0x12
    b918:	b3 8b       	std	Z+19, r27	; 0x13
    b91a:	f5 ce       	rjmp	.-534    	; 0xb706 <f_read+0x70>
    b91c:	80 e0       	ldi	r24, 0x00	; 0
    b91e:	01 c0       	rjmp	.+2      	; 0xb922 <f_read+0x28c>
    b920:	87 e0       	ldi	r24, 0x07	; 7
    b922:	90 e0       	ldi	r25, 0x00	; 0
    b924:	26 96       	adiw	r28, 0x06	; 6
    b926:	e2 e1       	ldi	r30, 0x12	; 18
    b928:	0c 94 d7 e6 	jmp	0x1cdae	; 0x1cdae <__epilogue_restores__>

0000b92c <f_write>:
    b92c:	a8 e0       	ldi	r26, 0x08	; 8
    b92e:	b0 e0       	ldi	r27, 0x00	; 0
    b930:	ec e9       	ldi	r30, 0x9C	; 156
    b932:	fc e5       	ldi	r31, 0x5C	; 92
    b934:	0c 94 bb e6 	jmp	0x1cd76	; 0x1cd76 <__prologue_saves__>
    b938:	7c 01       	movw	r14, r24
    b93a:	3b 01       	movw	r6, r22
    b93c:	5a 01       	movw	r10, r20
    b93e:	38 87       	std	Y+8, r19	; 0x08
    b940:	2f 83       	std	Y+7, r18	; 0x07
    b942:	f9 01       	movw	r30, r18
    b944:	11 82       	std	Z+1, r1	; 0x01
    b946:	10 82       	st	Z, r1
    b948:	be 01       	movw	r22, r28
    b94a:	6f 5f       	subi	r22, 0xFF	; 255
    b94c:	7f 4f       	sbci	r23, 0xFF	; 255
    b94e:	0e 94 63 48 	call	0x90c6	; 0x90c6 <validate>
    b952:	00 97       	sbiw	r24, 0x00	; 0
    b954:	09 f0       	breq	.+2      	; 0xb958 <f_write+0x2c>
    b956:	7d c1       	rjmp	.+762    	; 0xbc52 <f_write+0x326>
    b958:	f7 01       	movw	r30, r14
    b95a:	87 85       	ldd	r24, Z+15	; 0x0f
    b95c:	90 e0       	ldi	r25, 0x00	; 0
    b95e:	00 97       	sbiw	r24, 0x00	; 0
    b960:	09 f0       	breq	.+2      	; 0xb964 <f_write+0x38>
    b962:	77 c1       	rjmp	.+750    	; 0xbc52 <f_write+0x326>
    b964:	86 85       	ldd	r24, Z+14	; 0x0e
    b966:	81 ff       	sbrs	r24, 1
    b968:	72 c1       	rjmp	.+740    	; 0xbc4e <f_write+0x322>
    b96a:	80 89       	ldd	r24, Z+16	; 0x10
    b96c:	91 89       	ldd	r25, Z+17	; 0x11
    b96e:	a2 89       	ldd	r26, Z+18	; 0x12
    b970:	b3 89       	ldd	r27, Z+19	; 0x13
    b972:	ac 01       	movw	r20, r24
    b974:	bd 01       	movw	r22, r26
    b976:	4a 0d       	add	r20, r10
    b978:	5b 1d       	adc	r21, r11
    b97a:	61 1d       	adc	r22, r1
    b97c:	71 1d       	adc	r23, r1
    b97e:	48 17       	cp	r20, r24
    b980:	59 07       	cpc	r21, r25
    b982:	6a 07       	cpc	r22, r26
    b984:	7b 07       	cpc	r23, r27
    b986:	18 f4       	brcc	.+6      	; 0xb98e <f_write+0x62>
    b988:	5c 01       	movw	r10, r24
    b98a:	a0 94       	com	r10
    b98c:	b0 94       	com	r11
    b98e:	97 01       	movw	r18, r14
    b990:	2c 5d       	subi	r18, 0xDC	; 220
    b992:	3f 4f       	sbci	r19, 0xFF	; 255
    b994:	3e 83       	std	Y+6, r19	; 0x06
    b996:	2d 83       	std	Y+5, r18	; 0x05
    b998:	a1 14       	cp	r10, r1
    b99a:	b1 04       	cpc	r11, r1
    b99c:	09 f4       	brne	.+2      	; 0xb9a0 <f_write+0x74>
    b99e:	4d c0       	rjmp	.+154    	; 0xba3a <f_write+0x10e>
    b9a0:	f7 01       	movw	r30, r14
    b9a2:	40 89       	ldd	r20, Z+16	; 0x10
    b9a4:	51 89       	ldd	r21, Z+17	; 0x11
    b9a6:	62 89       	ldd	r22, Z+18	; 0x12
    b9a8:	73 89       	ldd	r23, Z+19	; 0x13
    b9aa:	db 01       	movw	r26, r22
    b9ac:	ca 01       	movw	r24, r20
    b9ae:	91 70       	andi	r25, 0x01	; 1
    b9b0:	aa 27       	eor	r26, r26
    b9b2:	bb 27       	eor	r27, r27
    b9b4:	89 2b       	or	r24, r25
    b9b6:	8a 2b       	or	r24, r26
    b9b8:	8b 2b       	or	r24, r27
    b9ba:	09 f0       	breq	.+2      	; 0xb9be <f_write+0x92>
    b9bc:	05 c1       	rjmp	.+522    	; 0xbbc8 <f_write+0x29c>
    b9be:	e9 81       	ldd	r30, Y+1	; 0x01
    b9c0:	fa 81       	ldd	r31, Y+2	; 0x02
    b9c2:	81 84       	ldd	r8, Z+9	; 0x09
    b9c4:	92 84       	ldd	r9, Z+10	; 0x0a
    b9c6:	f1 e0       	ldi	r31, 0x01	; 1
    b9c8:	8f 1a       	sub	r8, r31
    b9ca:	91 08       	sbc	r9, r1
    b9cc:	db 01       	movw	r26, r22
    b9ce:	ca 01       	movw	r24, r20
    b9d0:	e9 e0       	ldi	r30, 0x09	; 9
    b9d2:	b6 95       	lsr	r27
    b9d4:	a7 95       	ror	r26
    b9d6:	97 95       	ror	r25
    b9d8:	87 95       	ror	r24
    b9da:	ea 95       	dec	r30
    b9dc:	d1 f7       	brne	.-12     	; 0xb9d2 <f_write+0xa6>
    b9de:	88 22       	and	r8, r24
    b9e0:	99 22       	and	r9, r25
    b9e2:	81 14       	cp	r8, r1
    b9e4:	91 04       	cpc	r9, r1
    b9e6:	09 f0       	breq	.+2      	; 0xb9ea <f_write+0xbe>
    b9e8:	51 c0       	rjmp	.+162    	; 0xba8c <f_write+0x160>
    b9ea:	f7 01       	movw	r30, r14
    b9ec:	41 15       	cp	r20, r1
    b9ee:	51 05       	cpc	r21, r1
    b9f0:	61 05       	cpc	r22, r1
    b9f2:	71 05       	cpc	r23, r1
    b9f4:	69 f4       	brne	.+26     	; 0xba10 <f_write+0xe4>
    b9f6:	66 81       	ldd	r22, Z+6	; 0x06
    b9f8:	77 81       	ldd	r23, Z+7	; 0x07
    b9fa:	80 85       	ldd	r24, Z+8	; 0x08
    b9fc:	91 85       	ldd	r25, Z+9	; 0x09
    b9fe:	61 15       	cp	r22, r1
    ba00:	71 05       	cpc	r23, r1
    ba02:	81 05       	cpc	r24, r1
    ba04:	91 05       	cpc	r25, r1
    ba06:	f9 f4       	brne	.+62     	; 0xba46 <f_write+0x11a>
    ba08:	40 e0       	ldi	r20, 0x00	; 0
    ba0a:	50 e0       	ldi	r21, 0x00	; 0
    ba0c:	ba 01       	movw	r22, r20
    ba0e:	0d c0       	rjmp	.+26     	; 0xba2a <f_write+0xfe>
    ba10:	82 a1       	ldd	r24, Z+34	; 0x22
    ba12:	93 a1       	ldd	r25, Z+35	; 0x23
    ba14:	89 2b       	or	r24, r25
    ba16:	21 f0       	breq	.+8      	; 0xba20 <f_write+0xf4>
    ba18:	c7 01       	movw	r24, r14
    ba1a:	0e 94 ec 47 	call	0x8fd8	; 0x8fd8 <clmt_clust>
    ba1e:	08 c0       	rjmp	.+16     	; 0xba30 <f_write+0x104>
    ba20:	f7 01       	movw	r30, r14
    ba22:	44 89       	ldd	r20, Z+20	; 0x14
    ba24:	55 89       	ldd	r21, Z+21	; 0x15
    ba26:	66 89       	ldd	r22, Z+22	; 0x16
    ba28:	77 89       	ldd	r23, Z+23	; 0x17
    ba2a:	c7 01       	movw	r24, r14
    ba2c:	0e 94 96 50 	call	0xa12c	; 0xa12c <create_chain>
    ba30:	61 15       	cp	r22, r1
    ba32:	71 05       	cpc	r23, r1
    ba34:	81 05       	cpc	r24, r1
    ba36:	91 05       	cpc	r25, r1
    ba38:	31 f4       	brne	.+12     	; 0xba46 <f_write+0x11a>
    ba3a:	f7 01       	movw	r30, r14
    ba3c:	86 85       	ldd	r24, Z+14	; 0x0e
    ba3e:	80 64       	ori	r24, 0x40	; 64
    ba40:	86 87       	std	Z+14, r24	; 0x0e
    ba42:	80 e0       	ldi	r24, 0x00	; 0
    ba44:	05 c1       	rjmp	.+522    	; 0xbc50 <f_write+0x324>
    ba46:	61 30       	cpi	r22, 0x01	; 1
    ba48:	71 05       	cpc	r23, r1
    ba4a:	81 05       	cpc	r24, r1
    ba4c:	91 05       	cpc	r25, r1
    ba4e:	11 f4       	brne	.+4      	; 0xba54 <f_write+0x128>
    ba50:	82 e0       	ldi	r24, 0x02	; 2
    ba52:	07 c0       	rjmp	.+14     	; 0xba62 <f_write+0x136>
    ba54:	6f 3f       	cpi	r22, 0xFF	; 255
    ba56:	ff ef       	ldi	r31, 0xFF	; 255
    ba58:	7f 07       	cpc	r23, r31
    ba5a:	8f 07       	cpc	r24, r31
    ba5c:	9f 07       	cpc	r25, r31
    ba5e:	21 f4       	brne	.+8      	; 0xba68 <f_write+0x13c>
    ba60:	81 e0       	ldi	r24, 0x01	; 1
    ba62:	f7 01       	movw	r30, r14
    ba64:	87 87       	std	Z+15, r24	; 0x0f
    ba66:	f4 c0       	rjmp	.+488    	; 0xbc50 <f_write+0x324>
    ba68:	f7 01       	movw	r30, r14
    ba6a:	64 8b       	std	Z+20, r22	; 0x14
    ba6c:	75 8b       	std	Z+21, r23	; 0x15
    ba6e:	86 8b       	std	Z+22, r24	; 0x16
    ba70:	97 8b       	std	Z+23, r25	; 0x17
    ba72:	06 81       	ldd	r16, Z+6	; 0x06
    ba74:	17 81       	ldd	r17, Z+7	; 0x07
    ba76:	20 85       	ldd	r18, Z+8	; 0x08
    ba78:	31 85       	ldd	r19, Z+9	; 0x09
    ba7a:	01 15       	cp	r16, r1
    ba7c:	11 05       	cpc	r17, r1
    ba7e:	21 05       	cpc	r18, r1
    ba80:	31 05       	cpc	r19, r1
    ba82:	21 f4       	brne	.+8      	; 0xba8c <f_write+0x160>
    ba84:	66 83       	std	Z+6, r22	; 0x06
    ba86:	77 83       	std	Z+7, r23	; 0x07
    ba88:	80 87       	std	Z+8, r24	; 0x08
    ba8a:	91 87       	std	Z+9, r25	; 0x09
    ba8c:	f7 01       	movw	r30, r14
    ba8e:	86 85       	ldd	r24, Z+14	; 0x0e
    ba90:	87 ff       	sbrs	r24, 7
    ba92:	13 c0       	rjmp	.+38     	; 0xbaba <f_write+0x18e>
    ba94:	20 8d       	ldd	r18, Z+24	; 0x18
    ba96:	31 8d       	ldd	r19, Z+25	; 0x19
    ba98:	42 8d       	ldd	r20, Z+26	; 0x1a
    ba9a:	53 8d       	ldd	r21, Z+27	; 0x1b
    ba9c:	e9 81       	ldd	r30, Y+1	; 0x01
    ba9e:	fa 81       	ldd	r31, Y+2	; 0x02
    baa0:	01 e0       	ldi	r16, 0x01	; 1
    baa2:	10 e0       	ldi	r17, 0x00	; 0
    baa4:	6d 81       	ldd	r22, Y+5	; 0x05
    baa6:	7e 81       	ldd	r23, Y+6	; 0x06
    baa8:	81 81       	ldd	r24, Z+1	; 0x01
    baaa:	0e 94 95 69 	call	0xd32a	; 0xd32a <disk_write>
    baae:	89 2b       	or	r24, r25
    bab0:	b9 f6       	brne	.-82     	; 0xba60 <f_write+0x134>
    bab2:	f7 01       	movw	r30, r14
    bab4:	86 85       	ldd	r24, Z+14	; 0x0e
    bab6:	8f 77       	andi	r24, 0x7F	; 127
    bab8:	86 87       	std	Z+14, r24	; 0x0e
    baba:	29 81       	ldd	r18, Y+1	; 0x01
    babc:	3a 81       	ldd	r19, Y+2	; 0x02
    babe:	3c 83       	std	Y+4, r19	; 0x04
    bac0:	2b 83       	std	Y+3, r18	; 0x03
    bac2:	f7 01       	movw	r30, r14
    bac4:	44 89       	ldd	r20, Z+20	; 0x14
    bac6:	55 89       	ldd	r21, Z+21	; 0x15
    bac8:	66 89       	ldd	r22, Z+22	; 0x16
    baca:	77 89       	ldd	r23, Z+23	; 0x17
    bacc:	c9 01       	movw	r24, r18
    bace:	0e 94 c4 47 	call	0x8f88	; 0x8f88 <clst2sect>
    bad2:	61 15       	cp	r22, r1
    bad4:	71 05       	cpc	r23, r1
    bad6:	81 05       	cpc	r24, r1
    bad8:	91 05       	cpc	r25, r1
    bada:	09 f4       	brne	.+2      	; 0xbade <f_write+0x1b2>
    badc:	b9 cf       	rjmp	.-142    	; 0xba50 <f_write+0x124>
    bade:	1b 01       	movw	r2, r22
    bae0:	2c 01       	movw	r4, r24
    bae2:	28 0c       	add	r2, r8
    bae4:	39 1c       	adc	r3, r9
    bae6:	41 1c       	adc	r4, r1
    bae8:	51 1c       	adc	r5, r1
    baea:	65 01       	movw	r12, r10
    baec:	cd 2c       	mov	r12, r13
    baee:	dd 24       	eor	r13, r13
    baf0:	c6 94       	lsr	r12
    baf2:	c1 14       	cp	r12, r1
    baf4:	d1 04       	cpc	r13, r1
    baf6:	f1 f1       	breq	.+124    	; 0xbb74 <f_write+0x248>
    baf8:	eb 81       	ldd	r30, Y+3	; 0x03
    bafa:	fc 81       	ldd	r31, Y+4	; 0x04
    bafc:	81 85       	ldd	r24, Z+9	; 0x09
    bafe:	92 85       	ldd	r25, Z+10	; 0x0a
    bb00:	94 01       	movw	r18, r8
    bb02:	2c 0d       	add	r18, r12
    bb04:	3d 1d       	adc	r19, r13
    bb06:	82 17       	cp	r24, r18
    bb08:	93 07       	cpc	r25, r19
    bb0a:	18 f4       	brcc	.+6      	; 0xbb12 <f_write+0x1e6>
    bb0c:	6c 01       	movw	r12, r24
    bb0e:	c8 18       	sub	r12, r8
    bb10:	d9 08       	sbc	r13, r9
    bb12:	86 01       	movw	r16, r12
    bb14:	a2 01       	movw	r20, r4
    bb16:	91 01       	movw	r18, r2
    bb18:	b3 01       	movw	r22, r6
    bb1a:	eb 81       	ldd	r30, Y+3	; 0x03
    bb1c:	fc 81       	ldd	r31, Y+4	; 0x04
    bb1e:	81 81       	ldd	r24, Z+1	; 0x01
    bb20:	0e 94 95 69 	call	0xd32a	; 0xd32a <disk_write>
    bb24:	89 2b       	or	r24, r25
    bb26:	09 f0       	breq	.+2      	; 0xbb2a <f_write+0x1fe>
    bb28:	9b cf       	rjmp	.-202    	; 0xba60 <f_write+0x134>
    bb2a:	f7 01       	movw	r30, r14
    bb2c:	80 8d       	ldd	r24, Z+24	; 0x18
    bb2e:	91 8d       	ldd	r25, Z+25	; 0x19
    bb30:	a2 8d       	ldd	r26, Z+26	; 0x1a
    bb32:	b3 8d       	ldd	r27, Z+27	; 0x1b
    bb34:	82 19       	sub	r24, r2
    bb36:	93 09       	sbc	r25, r3
    bb38:	a4 09       	sbc	r26, r4
    bb3a:	b5 09       	sbc	r27, r5
    bb3c:	a6 01       	movw	r20, r12
    bb3e:	60 e0       	ldi	r22, 0x00	; 0
    bb40:	70 e0       	ldi	r23, 0x00	; 0
    bb42:	84 17       	cp	r24, r20
    bb44:	95 07       	cpc	r25, r21
    bb46:	a6 07       	cpc	r26, r22
    bb48:	b7 07       	cpc	r27, r23
    bb4a:	80 f4       	brcc	.+32     	; 0xbb6c <f_write+0x240>
    bb4c:	98 2f       	mov	r25, r24
    bb4e:	88 27       	eor	r24, r24
    bb50:	99 0f       	add	r25, r25
    bb52:	b3 01       	movw	r22, r6
    bb54:	68 0f       	add	r22, r24
    bb56:	79 1f       	adc	r23, r25
    bb58:	40 e0       	ldi	r20, 0x00	; 0
    bb5a:	52 e0       	ldi	r21, 0x02	; 2
    bb5c:	8d 81       	ldd	r24, Y+5	; 0x05
    bb5e:	9e 81       	ldd	r25, Y+6	; 0x06
    bb60:	0e 94 b9 49 	call	0x9372	; 0x9372 <mem_cpy.part.0>
    bb64:	f7 01       	movw	r30, r14
    bb66:	86 85       	ldd	r24, Z+14	; 0x0e
    bb68:	8f 77       	andi	r24, 0x7F	; 127
    bb6a:	86 87       	std	Z+14, r24	; 0x0e
    bb6c:	dc 2c       	mov	r13, r12
    bb6e:	cc 24       	eor	r12, r12
    bb70:	dd 0c       	add	r13, r13
    bb72:	43 c0       	rjmp	.+134    	; 0xbbfa <f_write+0x2ce>
    bb74:	f7 01       	movw	r30, r14
    bb76:	80 8d       	ldd	r24, Z+24	; 0x18
    bb78:	91 8d       	ldd	r25, Z+25	; 0x19
    bb7a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    bb7c:	b3 8d       	ldd	r27, Z+27	; 0x1b
    bb7e:	28 16       	cp	r2, r24
    bb80:	39 06       	cpc	r3, r25
    bb82:	4a 06       	cpc	r4, r26
    bb84:	5b 06       	cpc	r5, r27
    bb86:	d9 f0       	breq	.+54     	; 0xbbbe <f_write+0x292>
    bb88:	40 89       	ldd	r20, Z+16	; 0x10
    bb8a:	51 89       	ldd	r21, Z+17	; 0x11
    bb8c:	62 89       	ldd	r22, Z+18	; 0x12
    bb8e:	73 89       	ldd	r23, Z+19	; 0x13
    bb90:	82 85       	ldd	r24, Z+10	; 0x0a
    bb92:	93 85       	ldd	r25, Z+11	; 0x0b
    bb94:	a4 85       	ldd	r26, Z+12	; 0x0c
    bb96:	b5 85       	ldd	r27, Z+13	; 0x0d
    bb98:	48 17       	cp	r20, r24
    bb9a:	59 07       	cpc	r21, r25
    bb9c:	6a 07       	cpc	r22, r26
    bb9e:	7b 07       	cpc	r23, r27
    bba0:	70 f4       	brcc	.+28     	; 0xbbbe <f_write+0x292>
    bba2:	01 e0       	ldi	r16, 0x01	; 1
    bba4:	10 e0       	ldi	r17, 0x00	; 0
    bba6:	a2 01       	movw	r20, r4
    bba8:	91 01       	movw	r18, r2
    bbaa:	6d 81       	ldd	r22, Y+5	; 0x05
    bbac:	7e 81       	ldd	r23, Y+6	; 0x06
    bbae:	eb 81       	ldd	r30, Y+3	; 0x03
    bbb0:	fc 81       	ldd	r31, Y+4	; 0x04
    bbb2:	81 81       	ldd	r24, Z+1	; 0x01
    bbb4:	0e 94 85 69 	call	0xd30a	; 0xd30a <disk_read>
    bbb8:	89 2b       	or	r24, r25
    bbba:	09 f0       	breq	.+2      	; 0xbbbe <f_write+0x292>
    bbbc:	51 cf       	rjmp	.-350    	; 0xba60 <f_write+0x134>
    bbbe:	f7 01       	movw	r30, r14
    bbc0:	20 8e       	std	Z+24, r2	; 0x18
    bbc2:	31 8e       	std	Z+25, r3	; 0x19
    bbc4:	42 8e       	std	Z+26, r4	; 0x1a
    bbc6:	53 8e       	std	Z+27, r5	; 0x1b
    bbc8:	f7 01       	movw	r30, r14
    bbca:	80 89       	ldd	r24, Z+16	; 0x10
    bbcc:	91 89       	ldd	r25, Z+17	; 0x11
    bbce:	91 70       	andi	r25, 0x01	; 1
    bbd0:	20 e0       	ldi	r18, 0x00	; 0
    bbd2:	32 e0       	ldi	r19, 0x02	; 2
    bbd4:	28 1b       	sub	r18, r24
    bbd6:	39 0b       	sbc	r19, r25
    bbd8:	65 01       	movw	r12, r10
    bbda:	2a 15       	cp	r18, r10
    bbdc:	3b 05       	cpc	r19, r11
    bbde:	08 f4       	brcc	.+2      	; 0xbbe2 <f_write+0x2b6>
    bbe0:	69 01       	movw	r12, r18
    bbe2:	a6 01       	movw	r20, r12
    bbe4:	b3 01       	movw	r22, r6
    bbe6:	2d 81       	ldd	r18, Y+5	; 0x05
    bbe8:	3e 81       	ldd	r19, Y+6	; 0x06
    bbea:	82 0f       	add	r24, r18
    bbec:	93 1f       	adc	r25, r19
    bbee:	0e 94 b9 49 	call	0x9372	; 0x9372 <mem_cpy.part.0>
    bbf2:	f7 01       	movw	r30, r14
    bbf4:	86 85       	ldd	r24, Z+14	; 0x0e
    bbf6:	80 68       	ori	r24, 0x80	; 128
    bbf8:	86 87       	std	Z+14, r24	; 0x0e
    bbfa:	ac 18       	sub	r10, r12
    bbfc:	bd 08       	sbc	r11, r13
    bbfe:	ef 81       	ldd	r30, Y+7	; 0x07
    bc00:	f8 85       	ldd	r31, Y+8	; 0x08
    bc02:	80 81       	ld	r24, Z
    bc04:	91 81       	ldd	r25, Z+1	; 0x01
    bc06:	8c 0d       	add	r24, r12
    bc08:	9d 1d       	adc	r25, r13
    bc0a:	91 83       	std	Z+1, r25	; 0x01
    bc0c:	80 83       	st	Z, r24
    bc0e:	6c 0c       	add	r6, r12
    bc10:	7d 1c       	adc	r7, r13
    bc12:	f7 01       	movw	r30, r14
    bc14:	80 89       	ldd	r24, Z+16	; 0x10
    bc16:	91 89       	ldd	r25, Z+17	; 0x11
    bc18:	a2 89       	ldd	r26, Z+18	; 0x12
    bc1a:	b3 89       	ldd	r27, Z+19	; 0x13
    bc1c:	8c 0d       	add	r24, r12
    bc1e:	9d 1d       	adc	r25, r13
    bc20:	a1 1d       	adc	r26, r1
    bc22:	b1 1d       	adc	r27, r1
    bc24:	80 8b       	std	Z+16, r24	; 0x10
    bc26:	91 8b       	std	Z+17, r25	; 0x11
    bc28:	a2 8b       	std	Z+18, r26	; 0x12
    bc2a:	b3 8b       	std	Z+19, r27	; 0x13
    bc2c:	42 85       	ldd	r20, Z+10	; 0x0a
    bc2e:	53 85       	ldd	r21, Z+11	; 0x0b
    bc30:	64 85       	ldd	r22, Z+12	; 0x0c
    bc32:	75 85       	ldd	r23, Z+13	; 0x0d
    bc34:	48 17       	cp	r20, r24
    bc36:	59 07       	cpc	r21, r25
    bc38:	6a 07       	cpc	r22, r26
    bc3a:	7b 07       	cpc	r23, r27
    bc3c:	10 f4       	brcc	.+4      	; 0xbc42 <f_write+0x316>
    bc3e:	ac 01       	movw	r20, r24
    bc40:	bd 01       	movw	r22, r26
    bc42:	f7 01       	movw	r30, r14
    bc44:	42 87       	std	Z+10, r20	; 0x0a
    bc46:	53 87       	std	Z+11, r21	; 0x0b
    bc48:	64 87       	std	Z+12, r22	; 0x0c
    bc4a:	75 87       	std	Z+13, r23	; 0x0d
    bc4c:	a5 ce       	rjmp	.-694    	; 0xb998 <f_write+0x6c>
    bc4e:	87 e0       	ldi	r24, 0x07	; 7
    bc50:	90 e0       	ldi	r25, 0x00	; 0
    bc52:	28 96       	adiw	r28, 0x08	; 8
    bc54:	e2 e1       	ldi	r30, 0x12	; 18
    bc56:	0c 94 d7 e6 	jmp	0x1cdae	; 0x1cdae <__epilogue_restores__>

0000bc5a <f_sync>:
    bc5a:	8f 92       	push	r8
    bc5c:	9f 92       	push	r9
    bc5e:	af 92       	push	r10
    bc60:	bf 92       	push	r11
    bc62:	ef 92       	push	r14
    bc64:	ff 92       	push	r15
    bc66:	0f 93       	push	r16
    bc68:	1f 93       	push	r17
    bc6a:	cf 93       	push	r28
    bc6c:	df 93       	push	r29
    bc6e:	00 d0       	rcall	.+0      	; 0xbc70 <f_sync+0x16>
    bc70:	cd b7       	in	r28, 0x3d	; 61
    bc72:	de b7       	in	r29, 0x3e	; 62
    bc74:	7c 01       	movw	r14, r24
    bc76:	be 01       	movw	r22, r28
    bc78:	6f 5f       	subi	r22, 0xFF	; 255
    bc7a:	7f 4f       	sbci	r23, 0xFF	; 255
    bc7c:	0e 94 63 48 	call	0x90c6	; 0x90c6 <validate>
    bc80:	00 97       	sbiw	r24, 0x00	; 0
    bc82:	09 f0       	breq	.+2      	; 0xbc86 <f_sync+0x2c>
    bc84:	5d c0       	rjmp	.+186    	; 0xbd40 <f_sync+0xe6>
    bc86:	f7 01       	movw	r30, r14
    bc88:	86 85       	ldd	r24, Z+14	; 0x0e
    bc8a:	86 ff       	sbrs	r24, 6
    bc8c:	55 c0       	rjmp	.+170    	; 0xbd38 <f_sync+0xde>
    bc8e:	87 ff       	sbrs	r24, 7
    bc90:	15 c0       	rjmp	.+42     	; 0xbcbc <f_sync+0x62>
    bc92:	20 8d       	ldd	r18, Z+24	; 0x18
    bc94:	31 8d       	ldd	r19, Z+25	; 0x19
    bc96:	42 8d       	ldd	r20, Z+26	; 0x1a
    bc98:	53 8d       	ldd	r21, Z+27	; 0x1b
    bc9a:	e9 81       	ldd	r30, Y+1	; 0x01
    bc9c:	fa 81       	ldd	r31, Y+2	; 0x02
    bc9e:	01 e0       	ldi	r16, 0x01	; 1
    bca0:	10 e0       	ldi	r17, 0x00	; 0
    bca2:	b7 01       	movw	r22, r14
    bca4:	6c 5d       	subi	r22, 0xDC	; 220
    bca6:	7f 4f       	sbci	r23, 0xFF	; 255
    bca8:	81 81       	ldd	r24, Z+1	; 0x01
    bcaa:	0e 94 95 69 	call	0xd32a	; 0xd32a <disk_write>
    bcae:	89 2b       	or	r24, r25
    bcb0:	09 f0       	breq	.+2      	; 0xbcb4 <f_sync+0x5a>
    bcb2:	44 c0       	rjmp	.+136    	; 0xbd3c <f_sync+0xe2>
    bcb4:	f7 01       	movw	r30, r14
    bcb6:	86 85       	ldd	r24, Z+14	; 0x0e
    bcb8:	8f 77       	andi	r24, 0x7F	; 127
    bcba:	86 87       	std	Z+14, r24	; 0x0e
    bcbc:	0e 94 4a 70 	call	0xe094	; 0xe094 <get_fattime>
    bcc0:	4b 01       	movw	r8, r22
    bcc2:	5c 01       	movw	r10, r24
    bcc4:	f7 01       	movw	r30, r14
    bcc6:	44 8d       	ldd	r20, Z+28	; 0x1c
    bcc8:	55 8d       	ldd	r21, Z+29	; 0x1d
    bcca:	66 8d       	ldd	r22, Z+30	; 0x1e
    bccc:	77 8d       	ldd	r23, Z+31	; 0x1f
    bcce:	89 81       	ldd	r24, Y+1	; 0x01
    bcd0:	9a 81       	ldd	r25, Y+2	; 0x02
    bcd2:	0e 94 53 4b 	call	0x96a6	; 0x96a6 <move_window>
    bcd6:	00 97       	sbiw	r24, 0x00	; 0
    bcd8:	99 f5       	brne	.+102    	; 0xbd40 <f_sync+0xe6>
    bcda:	f7 01       	movw	r30, r14
    bcdc:	00 a1       	ldd	r16, Z+32	; 0x20
    bcde:	11 a1       	ldd	r17, Z+33	; 0x21
    bce0:	f8 01       	movw	r30, r16
    bce2:	83 85       	ldd	r24, Z+11	; 0x0b
    bce4:	80 62       	ori	r24, 0x20	; 32
    bce6:	83 87       	std	Z+11, r24	; 0x0b
    bce8:	f7 01       	movw	r30, r14
    bcea:	26 81       	ldd	r18, Z+6	; 0x06
    bcec:	37 81       	ldd	r19, Z+7	; 0x07
    bcee:	40 85       	ldd	r20, Z+8	; 0x08
    bcf0:	51 85       	ldd	r21, Z+9	; 0x09
    bcf2:	b8 01       	movw	r22, r16
    bcf4:	80 81       	ld	r24, Z
    bcf6:	91 81       	ldd	r25, Z+1	; 0x01
    bcf8:	0e 94 d9 49 	call	0x93b2	; 0x93b2 <st_clust.isra.4>
    bcfc:	f7 01       	movw	r30, r14
    bcfe:	42 85       	ldd	r20, Z+10	; 0x0a
    bd00:	53 85       	ldd	r21, Z+11	; 0x0b
    bd02:	64 85       	ldd	r22, Z+12	; 0x0c
    bd04:	75 85       	ldd	r23, Z+13	; 0x0d
    bd06:	c8 01       	movw	r24, r16
    bd08:	4c 96       	adiw	r24, 0x1c	; 28
    bd0a:	0e 94 a6 47 	call	0x8f4c	; 0x8f4c <st_dword>
    bd0e:	b5 01       	movw	r22, r10
    bd10:	a4 01       	movw	r20, r8
    bd12:	c8 01       	movw	r24, r16
    bd14:	46 96       	adiw	r24, 0x16	; 22
    bd16:	0e 94 a6 47 	call	0x8f4c	; 0x8f4c <st_dword>
    bd1a:	f8 01       	movw	r30, r16
    bd1c:	12 8a       	std	Z+18, r1	; 0x12
    bd1e:	13 8a       	std	Z+19, r1	; 0x13
    bd20:	89 81       	ldd	r24, Y+1	; 0x01
    bd22:	9a 81       	ldd	r25, Y+2	; 0x02
    bd24:	21 e0       	ldi	r18, 0x01	; 1
    bd26:	fc 01       	movw	r30, r24
    bd28:	23 83       	std	Z+3, r18	; 0x03
    bd2a:	0e 94 39 4a 	call	0x9472	; 0x9472 <sync_fs>
    bd2e:	f7 01       	movw	r30, r14
    bd30:	26 85       	ldd	r18, Z+14	; 0x0e
    bd32:	2f 7b       	andi	r18, 0xBF	; 191
    bd34:	26 87       	std	Z+14, r18	; 0x0e
    bd36:	04 c0       	rjmp	.+8      	; 0xbd40 <f_sync+0xe6>
    bd38:	80 e0       	ldi	r24, 0x00	; 0
    bd3a:	01 c0       	rjmp	.+2      	; 0xbd3e <f_sync+0xe4>
    bd3c:	81 e0       	ldi	r24, 0x01	; 1
    bd3e:	90 e0       	ldi	r25, 0x00	; 0
    bd40:	0f 90       	pop	r0
    bd42:	0f 90       	pop	r0
    bd44:	df 91       	pop	r29
    bd46:	cf 91       	pop	r28
    bd48:	1f 91       	pop	r17
    bd4a:	0f 91       	pop	r16
    bd4c:	ff 90       	pop	r15
    bd4e:	ef 90       	pop	r14
    bd50:	bf 90       	pop	r11
    bd52:	af 90       	pop	r10
    bd54:	9f 90       	pop	r9
    bd56:	8f 90       	pop	r8
    bd58:	08 95       	ret

0000bd5a <f_close>:
    bd5a:	a2 e0       	ldi	r26, 0x02	; 2
    bd5c:	b0 e0       	ldi	r27, 0x00	; 0
    bd5e:	e3 eb       	ldi	r30, 0xB3	; 179
    bd60:	fe e5       	ldi	r31, 0x5E	; 94
    bd62:	0c 94 c9 e6 	jmp	0x1cd92	; 0x1cd92 <__prologue_saves__+0x1c>
    bd66:	8c 01       	movw	r16, r24
    bd68:	78 df       	rcall	.-272    	; 0xbc5a <f_sync>
    bd6a:	00 97       	sbiw	r24, 0x00	; 0
    bd6c:	59 f4       	brne	.+22     	; 0xbd84 <f_close+0x2a>
    bd6e:	be 01       	movw	r22, r28
    bd70:	6f 5f       	subi	r22, 0xFF	; 255
    bd72:	7f 4f       	sbci	r23, 0xFF	; 255
    bd74:	c8 01       	movw	r24, r16
    bd76:	0e 94 63 48 	call	0x90c6	; 0x90c6 <validate>
    bd7a:	00 97       	sbiw	r24, 0x00	; 0
    bd7c:	19 f4       	brne	.+6      	; 0xbd84 <f_close+0x2a>
    bd7e:	f8 01       	movw	r30, r16
    bd80:	11 82       	std	Z+1, r1	; 0x01
    bd82:	10 82       	st	Z, r1
    bd84:	22 96       	adiw	r28, 0x02	; 2
    bd86:	e4 e0       	ldi	r30, 0x04	; 4
    bd88:	0c 94 e5 e6 	jmp	0x1cdca	; 0x1cdca <__epilogue_restores__+0x1c>

0000bd8c <f_chdir>:
    bd8c:	a2 e3       	ldi	r26, 0x32	; 50
    bd8e:	b0 e0       	ldi	r27, 0x00	; 0
    bd90:	ec ec       	ldi	r30, 0xCC	; 204
    bd92:	fe e5       	ldi	r31, 0x5E	; 94
    bd94:	0c 94 c5 e6 	jmp	0x1cd8a	; 0x1cd8a <__prologue_saves__+0x14>
    bd98:	9a ab       	std	Y+50, r25	; 0x32
    bd9a:	89 ab       	std	Y+49, r24	; 0x31
    bd9c:	40 e0       	ldi	r20, 0x00	; 0
    bd9e:	be 01       	movw	r22, r28
    bda0:	61 5d       	subi	r22, 0xD1	; 209
    bda2:	7f 4f       	sbci	r23, 0xFF	; 255
    bda4:	ce 01       	movw	r24, r28
    bda6:	c1 96       	adiw	r24, 0x31	; 49
    bda8:	0e 94 ce 4b 	call	0x979c	; 0x979c <mount_volume>
    bdac:	00 97       	sbiw	r24, 0x00	; 0
    bdae:	09 f0       	breq	.+2      	; 0xbdb2 <f_chdir+0x26>
    bdb0:	44 c0       	rjmp	.+136    	; 0xbe3a <f_chdir+0xae>
    bdb2:	8f a5       	ldd	r24, Y+47	; 0x2f
    bdb4:	98 a9       	ldd	r25, Y+48	; 0x30
    bdb6:	9a 83       	std	Y+2, r25	; 0x02
    bdb8:	89 83       	std	Y+1, r24	; 0x01
    bdba:	80 e0       	ldi	r24, 0x00	; 0
    bdbc:	92 e0       	ldi	r25, 0x02	; 2
    bdbe:	0e 94 c9 68 	call	0xd192	; 0xd192 <ff_memalloc>
    bdc2:	7c 01       	movw	r14, r24
    bdc4:	00 97       	sbiw	r24, 0x00	; 0
    bdc6:	a9 f1       	breq	.+106    	; 0xbe32 <f_chdir+0xa6>
    bdc8:	ef a5       	ldd	r30, Y+47	; 0x2f
    bdca:	f8 a9       	ldd	r31, Y+48	; 0x30
    bdcc:	94 87       	std	Z+12, r25	; 0x0c
    bdce:	83 87       	std	Z+11, r24	; 0x0b
    bdd0:	69 a9       	ldd	r22, Y+49	; 0x31
    bdd2:	7a a9       	ldd	r23, Y+50	; 0x32
    bdd4:	ce 01       	movw	r24, r28
    bdd6:	01 96       	adiw	r24, 0x01	; 1
    bdd8:	2e d8       	rcall	.-4004   	; 0xae36 <follow_path>
    bdda:	8c 01       	movw	r16, r24
    bddc:	89 2b       	or	r24, r25
    bdde:	09 f5       	brne	.+66     	; 0xbe22 <f_chdir+0x96>
    bde0:	88 a5       	ldd	r24, Y+40	; 0x28
    bde2:	87 ff       	sbrs	r24, 7
    bde4:	0b c0       	rjmp	.+22     	; 0xbdfc <f_chdir+0x70>
    bde6:	ef a5       	ldd	r30, Y+47	; 0x2f
    bde8:	f8 a9       	ldd	r31, Y+48	; 0x30
    bdea:	8f 81       	ldd	r24, Y+7	; 0x07
    bdec:	98 85       	ldd	r25, Y+8	; 0x08
    bdee:	a9 85       	ldd	r26, Y+9	; 0x09
    bdf0:	ba 85       	ldd	r27, Y+10	; 0x0a
    bdf2:	85 8b       	std	Z+21, r24	; 0x15
    bdf4:	96 8b       	std	Z+22, r25	; 0x16
    bdf6:	a7 8b       	std	Z+23, r26	; 0x17
    bdf8:	b0 8f       	std	Z+24, r27	; 0x18
    bdfa:	13 c0       	rjmp	.+38     	; 0xbe22 <f_chdir+0x96>
    bdfc:	8d 81       	ldd	r24, Y+5	; 0x05
    bdfe:	84 ff       	sbrs	r24, 4
    be00:	0e c0       	rjmp	.+28     	; 0xbe1e <f_chdir+0x92>
    be02:	cf a4       	ldd	r12, Y+47	; 0x2f
    be04:	d8 a8       	ldd	r13, Y+48	; 0x30
    be06:	6b 8d       	ldd	r22, Y+27	; 0x1b
    be08:	7c 8d       	ldd	r23, Y+28	; 0x1c
    be0a:	f6 01       	movw	r30, r12
    be0c:	80 81       	ld	r24, Z
    be0e:	0e 94 c4 49 	call	0x9388	; 0x9388 <ld_clust.isra.3>
    be12:	f6 01       	movw	r30, r12
    be14:	65 8b       	std	Z+21, r22	; 0x15
    be16:	76 8b       	std	Z+22, r23	; 0x16
    be18:	87 8b       	std	Z+23, r24	; 0x17
    be1a:	90 8f       	std	Z+24, r25	; 0x18
    be1c:	02 c0       	rjmp	.+4      	; 0xbe22 <f_chdir+0x96>
    be1e:	05 e0       	ldi	r16, 0x05	; 5
    be20:	10 e0       	ldi	r17, 0x00	; 0
    be22:	c7 01       	movw	r24, r14
    be24:	0e 94 cc 68 	call	0xd198	; 0xd198 <ff_memfree>
    be28:	04 30       	cpi	r16, 0x04	; 4
    be2a:	11 05       	cpc	r17, r1
    be2c:	29 f4       	brne	.+10     	; 0xbe38 <f_chdir+0xac>
    be2e:	85 e0       	ldi	r24, 0x05	; 5
    be30:	01 c0       	rjmp	.+2      	; 0xbe34 <f_chdir+0xa8>
    be32:	81 e1       	ldi	r24, 0x11	; 17
    be34:	90 e0       	ldi	r25, 0x00	; 0
    be36:	01 c0       	rjmp	.+2      	; 0xbe3a <f_chdir+0xae>
    be38:	c8 01       	movw	r24, r16
    be3a:	e2 96       	adiw	r28, 0x32	; 50
    be3c:	e8 e0       	ldi	r30, 0x08	; 8
    be3e:	0c 94 e1 e6 	jmp	0x1cdc2	; 0x1cdc2 <__epilogue_restores__+0x14>

0000be42 <f_getcwd>:
    be42:	a8 e4       	ldi	r26, 0x48	; 72
    be44:	b1 e0       	ldi	r27, 0x01	; 1
    be46:	e7 e2       	ldi	r30, 0x27	; 39
    be48:	ff e5       	ldi	r31, 0x5F	; 95
    be4a:	0c 94 bb e6 	jmp	0x1cd76	; 0x1cd76 <__prologue_saves__>
    be4e:	c9 5b       	subi	r28, 0xB9	; 185
    be50:	de 4f       	sbci	r29, 0xFE	; 254
    be52:	99 83       	std	Y+1, r25	; 0x01
    be54:	88 83       	st	Y, r24
    be56:	c7 54       	subi	r28, 0x47	; 71
    be58:	d1 40       	sbci	r29, 0x01	; 1
    be5a:	4b 01       	movw	r8, r22
    be5c:	7c 01       	movw	r14, r24
    be5e:	fc 01       	movw	r30, r24
    be60:	10 82       	st	Z, r1
    be62:	40 e0       	ldi	r20, 0x00	; 0
    be64:	be 01       	movw	r22, r28
    be66:	6b 5b       	subi	r22, 0xBB	; 187
    be68:	7e 4f       	sbci	r23, 0xFE	; 254
    be6a:	ce 01       	movw	r24, r28
    be6c:	89 5b       	subi	r24, 0xB9	; 185
    be6e:	9e 4f       	sbci	r25, 0xFE	; 254
    be70:	0e 94 ce 4b 	call	0x979c	; 0x979c <mount_volume>
    be74:	1c 01       	movw	r2, r24
    be76:	89 2b       	or	r24, r25
    be78:	09 f0       	breq	.+2      	; 0xbe7c <f_getcwd+0x3a>
    be7a:	03 c1       	rjmp	.+518    	; 0xc082 <f_getcwd+0x240>
    be7c:	cb 5b       	subi	r28, 0xBB	; 187
    be7e:	de 4f       	sbci	r29, 0xFE	; 254
    be80:	88 81       	ld	r24, Y
    be82:	99 81       	ldd	r25, Y+1	; 0x01
    be84:	c5 54       	subi	r28, 0x45	; 69
    be86:	d1 40       	sbci	r29, 0x01	; 1
    be88:	c9 5e       	subi	r28, 0xE9	; 233
    be8a:	de 4f       	sbci	r29, 0xFE	; 254
    be8c:	99 83       	std	Y+1, r25	; 0x01
    be8e:	88 83       	st	Y, r24
    be90:	c7 51       	subi	r28, 0x17	; 23
    be92:	d1 40       	sbci	r29, 0x01	; 1
    be94:	80 e0       	ldi	r24, 0x00	; 0
    be96:	92 e0       	ldi	r25, 0x02	; 2
    be98:	0e 94 c9 68 	call	0xd192	; 0xd192 <ff_memalloc>
    be9c:	5c 01       	movw	r10, r24
    be9e:	00 97       	sbiw	r24, 0x00	; 0
    bea0:	09 f4       	brne	.+2      	; 0xbea4 <f_getcwd+0x62>
    bea2:	f3 c0       	rjmp	.+486    	; 0xc08a <f_getcwd+0x248>
    bea4:	cb 5b       	subi	r28, 0xBB	; 187
    bea6:	de 4f       	sbci	r29, 0xFE	; 254
    bea8:	e8 81       	ld	r30, Y
    beaa:	f9 81       	ldd	r31, Y+1	; 0x01
    beac:	c5 54       	subi	r28, 0x45	; 69
    beae:	d1 40       	sbci	r29, 0x01	; 1
    beb0:	94 87       	std	Z+12, r25	; 0x0c
    beb2:	83 87       	std	Z+11, r24	; 0x0b
    beb4:	85 89       	ldd	r24, Z+21	; 0x15
    beb6:	96 89       	ldd	r25, Z+22	; 0x16
    beb8:	a7 89       	ldd	r26, Z+23	; 0x17
    beba:	b0 8d       	ldd	r27, Z+24	; 0x18
    bebc:	c3 5e       	subi	r28, 0xE3	; 227
    bebe:	de 4f       	sbci	r29, 0xFE	; 254
    bec0:	88 83       	st	Y, r24
    bec2:	99 83       	std	Y+1, r25	; 0x01
    bec4:	aa 83       	std	Y+2, r26	; 0x02
    bec6:	bb 83       	std	Y+3, r27	; 0x03
    bec8:	cd 51       	subi	r28, 0x1D	; 29
    beca:	d1 40       	sbci	r29, 0x01	; 1
    becc:	84 01       	movw	r16, r8
    bece:	ce 01       	movw	r24, r28
    bed0:	01 96       	adiw	r24, 0x01	; 1
    bed2:	6c 01       	movw	r12, r24
    bed4:	c3 5e       	subi	r28, 0xE3	; 227
    bed6:	de 4f       	sbci	r29, 0xFE	; 254
    bed8:	48 80       	ld	r4, Y
    beda:	59 80       	ldd	r5, Y+1	; 0x01
    bedc:	6a 80       	ldd	r6, Y+2	; 0x02
    bede:	7b 80       	ldd	r7, Y+3	; 0x03
    bee0:	cd 51       	subi	r28, 0x1D	; 29
    bee2:	d1 40       	sbci	r29, 0x01	; 1
    bee4:	41 14       	cp	r4, r1
    bee6:	51 04       	cpc	r5, r1
    bee8:	61 04       	cpc	r6, r1
    beea:	71 04       	cpc	r7, r1
    beec:	09 f4       	brne	.+2      	; 0xbef0 <f_getcwd+0xae>
    beee:	a3 c0       	rjmp	.+326    	; 0xc036 <f_getcwd+0x1f4>
    bef0:	40 e2       	ldi	r20, 0x20	; 32
    bef2:	50 e0       	ldi	r21, 0x00	; 0
    bef4:	60 e0       	ldi	r22, 0x00	; 0
    bef6:	70 e0       	ldi	r23, 0x00	; 0
    bef8:	ce 01       	movw	r24, r28
    befa:	89 5e       	subi	r24, 0xE9	; 233
    befc:	9e 4f       	sbci	r25, 0xFE	; 254
    befe:	0e 94 d5 4f 	call	0x9faa	; 0x9faa <dir_sdi>
    bf02:	00 97       	sbiw	r24, 0x00	; 0
    bf04:	09 f0       	breq	.+2      	; 0xbf08 <f_getcwd+0xc6>
    bf06:	c6 c0       	rjmp	.+396    	; 0xc094 <f_getcwd+0x252>
    bf08:	c3 5d       	subi	r28, 0xD3	; 211
    bf0a:	de 4f       	sbci	r29, 0xFE	; 254
    bf0c:	48 81       	ld	r20, Y
    bf0e:	59 81       	ldd	r21, Y+1	; 0x01
    bf10:	6a 81       	ldd	r22, Y+2	; 0x02
    bf12:	7b 81       	ldd	r23, Y+3	; 0x03
    bf14:	cd 52       	subi	r28, 0x2D	; 45
    bf16:	d1 40       	sbci	r29, 0x01	; 1
    bf18:	cb 5b       	subi	r28, 0xBB	; 187
    bf1a:	de 4f       	sbci	r29, 0xFE	; 254
    bf1c:	88 81       	ld	r24, Y
    bf1e:	99 81       	ldd	r25, Y+1	; 0x01
    bf20:	c5 54       	subi	r28, 0x45	; 69
    bf22:	d1 40       	sbci	r29, 0x01	; 1
    bf24:	0e 94 53 4b 	call	0x96a6	; 0x96a6 <move_window>
    bf28:	00 97       	sbiw	r24, 0x00	; 0
    bf2a:	09 f0       	breq	.+2      	; 0xbf2e <f_getcwd+0xec>
    bf2c:	b3 c0       	rjmp	.+358    	; 0xc094 <f_getcwd+0x252>
    bf2e:	cf 5c       	subi	r28, 0xCF	; 207
    bf30:	de 4f       	sbci	r29, 0xFE	; 254
    bf32:	68 81       	ld	r22, Y
    bf34:	79 81       	ldd	r23, Y+1	; 0x01
    bf36:	c1 53       	subi	r28, 0x31	; 49
    bf38:	d1 40       	sbci	r29, 0x01	; 1
    bf3a:	cb 5b       	subi	r28, 0xBB	; 187
    bf3c:	de 4f       	sbci	r29, 0xFE	; 254
    bf3e:	e8 81       	ld	r30, Y
    bf40:	f9 81       	ldd	r31, Y+1	; 0x01
    bf42:	c5 54       	subi	r28, 0x45	; 69
    bf44:	d1 40       	sbci	r29, 0x01	; 1
    bf46:	80 81       	ld	r24, Z
    bf48:	0e 94 c4 49 	call	0x9388	; 0x9388 <ld_clust.isra.3>
    bf4c:	c3 5e       	subi	r28, 0xE3	; 227
    bf4e:	de 4f       	sbci	r29, 0xFE	; 254
    bf50:	68 83       	st	Y, r22
    bf52:	79 83       	std	Y+1, r23	; 0x01
    bf54:	8a 83       	std	Y+2, r24	; 0x02
    bf56:	9b 83       	std	Y+3, r25	; 0x03
    bf58:	cd 51       	subi	r28, 0x1D	; 29
    bf5a:	d1 40       	sbci	r29, 0x01	; 1
    bf5c:	40 e0       	ldi	r20, 0x00	; 0
    bf5e:	50 e0       	ldi	r21, 0x00	; 0
    bf60:	ba 01       	movw	r22, r20
    bf62:	ce 01       	movw	r24, r28
    bf64:	89 5e       	subi	r24, 0xE9	; 233
    bf66:	9e 4f       	sbci	r25, 0xFE	; 254
    bf68:	0e 94 d5 4f 	call	0x9faa	; 0x9faa <dir_sdi>
    bf6c:	00 97       	sbiw	r24, 0x00	; 0
    bf6e:	09 f0       	breq	.+2      	; 0xbf72 <f_getcwd+0x130>
    bf70:	91 c0       	rjmp	.+290    	; 0xc094 <f_getcwd+0x252>
    bf72:	60 e0       	ldi	r22, 0x00	; 0
    bf74:	70 e0       	ldi	r23, 0x00	; 0
    bf76:	ce 01       	movw	r24, r28
    bf78:	89 5e       	subi	r24, 0xE9	; 233
    bf7a:	9e 4f       	sbci	r25, 0xFE	; 254
    bf7c:	0e 94 6e 53 	call	0xa6dc	; 0xa6dc <dir_read>
    bf80:	00 97       	sbiw	r24, 0x00	; 0
    bf82:	09 f0       	breq	.+2      	; 0xbf86 <f_getcwd+0x144>
    bf84:	89 c0       	rjmp	.+274    	; 0xc098 <f_getcwd+0x256>
    bf86:	cf 5c       	subi	r28, 0xCF	; 207
    bf88:	de 4f       	sbci	r29, 0xFE	; 254
    bf8a:	68 81       	ld	r22, Y
    bf8c:	79 81       	ldd	r23, Y+1	; 0x01
    bf8e:	c1 53       	subi	r28, 0x31	; 49
    bf90:	d1 40       	sbci	r29, 0x01	; 1
    bf92:	cb 5b       	subi	r28, 0xBB	; 187
    bf94:	de 4f       	sbci	r29, 0xFE	; 254
    bf96:	e8 81       	ld	r30, Y
    bf98:	f9 81       	ldd	r31, Y+1	; 0x01
    bf9a:	c5 54       	subi	r28, 0x45	; 69
    bf9c:	d1 40       	sbci	r29, 0x01	; 1
    bf9e:	80 81       	ld	r24, Z
    bfa0:	0e 94 c4 49 	call	0x9388	; 0x9388 <ld_clust.isra.3>
    bfa4:	46 16       	cp	r4, r22
    bfa6:	57 06       	cpc	r5, r23
    bfa8:	68 06       	cpc	r6, r24
    bfaa:	79 06       	cpc	r7, r25
    bfac:	41 f4       	brne	.+16     	; 0xbfbe <f_getcwd+0x17c>
    bfae:	b6 01       	movw	r22, r12
    bfb0:	ce 01       	movw	r24, r28
    bfb2:	89 5e       	subi	r24, 0xE9	; 233
    bfb4:	9e 4f       	sbci	r25, 0xFE	; 254
    bfb6:	0e 94 8f 48 	call	0x911e	; 0x911e <get_fileinfo>
    bfba:	f6 01       	movw	r30, r12
    bfbc:	0a c0       	rjmp	.+20     	; 0xbfd2 <f_getcwd+0x190>
    bfbe:	60 e0       	ldi	r22, 0x00	; 0
    bfc0:	70 e0       	ldi	r23, 0x00	; 0
    bfc2:	ce 01       	movw	r24, r28
    bfc4:	89 5e       	subi	r24, 0xE9	; 233
    bfc6:	9e 4f       	sbci	r25, 0xFE	; 254
    bfc8:	0e 94 4d 52 	call	0xa49a	; 0xa49a <dir_next>
    bfcc:	00 97       	sbiw	r24, 0x00	; 0
    bfce:	89 f2       	breq	.-94     	; 0xbf72 <f_getcwd+0x130>
    bfd0:	63 c0       	rjmp	.+198    	; 0xc098 <f_getcwd+0x256>
    bfd2:	cf 01       	movw	r24, r30
    bfd4:	8c 19       	sub	r24, r12
    bfd6:	9d 09       	sbc	r25, r13
    bfd8:	31 96       	adiw	r30, 0x01	; 1
    bfda:	25 89       	ldd	r18, Z+21	; 0x15
    bfdc:	21 11       	cpse	r18, r1
    bfde:	f9 cf       	rjmp	.-14     	; 0xbfd2 <f_getcwd+0x190>
    bfe0:	9c 01       	movw	r18, r24
    bfe2:	2f 5f       	subi	r18, 0xFF	; 255
    bfe4:	3f 4f       	sbci	r19, 0xFF	; 255
    bfe6:	02 17       	cp	r16, r18
    bfe8:	13 07       	cpc	r17, r19
    bfea:	08 f4       	brcc	.+2      	; 0xbfee <f_getcwd+0x1ac>
    bfec:	51 c0       	rjmp	.+162    	; 0xc090 <f_getcwd+0x24e>
    bfee:	f6 01       	movw	r30, r12
    bff0:	e8 0f       	add	r30, r24
    bff2:	f9 1f       	adc	r31, r25
    bff4:	98 01       	movw	r18, r16
    bff6:	ce 16       	cp	r12, r30
    bff8:	df 06       	cpc	r13, r31
    bffa:	71 f0       	breq	.+28     	; 0xc018 <f_getcwd+0x1d6>
    bffc:	21 50       	subi	r18, 0x01	; 1
    bffe:	31 09       	sbc	r19, r1
    c000:	45 89       	ldd	r20, Z+21	; 0x15
    c002:	c9 5b       	subi	r28, 0xB9	; 185
    c004:	de 4f       	sbci	r29, 0xFE	; 254
    c006:	a8 81       	ld	r26, Y
    c008:	b9 81       	ldd	r27, Y+1	; 0x01
    c00a:	c7 54       	subi	r28, 0x47	; 71
    c00c:	d1 40       	sbci	r29, 0x01	; 1
    c00e:	a2 0f       	add	r26, r18
    c010:	b3 1f       	adc	r27, r19
    c012:	4c 93       	st	X, r20
    c014:	31 97       	sbiw	r30, 0x01	; 1
    c016:	ef cf       	rjmp	.-34     	; 0xbff6 <f_getcwd+0x1b4>
    c018:	80 95       	com	r24
    c01a:	90 95       	com	r25
    c01c:	08 0f       	add	r16, r24
    c01e:	19 1f       	adc	r17, r25
    c020:	c9 5b       	subi	r28, 0xB9	; 185
    c022:	de 4f       	sbci	r29, 0xFE	; 254
    c024:	e8 81       	ld	r30, Y
    c026:	f9 81       	ldd	r31, Y+1	; 0x01
    c028:	c7 54       	subi	r28, 0x47	; 71
    c02a:	d1 40       	sbci	r29, 0x01	; 1
    c02c:	e0 0f       	add	r30, r16
    c02e:	f1 1f       	adc	r31, r17
    c030:	9f e2       	ldi	r25, 0x2F	; 47
    c032:	90 83       	st	Z, r25
    c034:	4f cf       	rjmp	.-354    	; 0xbed4 <f_getcwd+0x92>
    c036:	08 15       	cp	r16, r8
    c038:	19 05       	cpc	r17, r9
    c03a:	61 f4       	brne	.+24     	; 0xc054 <f_getcwd+0x212>
    c03c:	01 50       	subi	r16, 0x01	; 1
    c03e:	11 09       	sbc	r17, r1
    c040:	c9 5b       	subi	r28, 0xB9	; 185
    c042:	de 4f       	sbci	r29, 0xFE	; 254
    c044:	e8 81       	ld	r30, Y
    c046:	f9 81       	ldd	r31, Y+1	; 0x01
    c048:	c7 54       	subi	r28, 0x47	; 71
    c04a:	d1 40       	sbci	r29, 0x01	; 1
    c04c:	e0 0f       	add	r30, r16
    c04e:	f1 1f       	adc	r31, r17
    c050:	8f e2       	ldi	r24, 0x2F	; 47
    c052:	80 83       	st	Z, r24
    c054:	ef ef       	ldi	r30, 0xFF	; 255
    c056:	ee 1a       	sub	r14, r30
    c058:	fe 0a       	sbc	r15, r30
    c05a:	c9 5b       	subi	r28, 0xB9	; 185
    c05c:	de 4f       	sbci	r29, 0xFE	; 254
    c05e:	e8 81       	ld	r30, Y
    c060:	f9 81       	ldd	r31, Y+1	; 0x01
    c062:	c7 54       	subi	r28, 0x47	; 71
    c064:	d1 40       	sbci	r29, 0x01	; 1
    c066:	e0 0f       	add	r30, r16
    c068:	f1 1f       	adc	r31, r17
    c06a:	80 81       	ld	r24, Z
    c06c:	f7 01       	movw	r30, r14
    c06e:	31 97       	sbiw	r30, 0x01	; 1
    c070:	80 83       	st	Z, r24
    c072:	0f 5f       	subi	r16, 0xFF	; 255
    c074:	1f 4f       	sbci	r17, 0xFF	; 255
    c076:	08 15       	cp	r16, r8
    c078:	19 05       	cpc	r17, r9
    c07a:	60 f3       	brcs	.-40     	; 0xc054 <f_getcwd+0x212>
    c07c:	c5 01       	movw	r24, r10
    c07e:	0e 94 cc 68 	call	0xd198	; 0xd198 <ff_memfree>
    c082:	f7 01       	movw	r30, r14
    c084:	10 82       	st	Z, r1
    c086:	c1 01       	movw	r24, r2
    c088:	0d c0       	rjmp	.+26     	; 0xc0a4 <f_getcwd+0x262>
    c08a:	81 e1       	ldi	r24, 0x11	; 17
    c08c:	90 e0       	ldi	r25, 0x00	; 0
    c08e:	0a c0       	rjmp	.+20     	; 0xc0a4 <f_getcwd+0x262>
    c090:	81 e1       	ldi	r24, 0x11	; 17
    c092:	90 e0       	ldi	r25, 0x00	; 0
    c094:	1c 01       	movw	r2, r24
    c096:	f2 cf       	rjmp	.-28     	; 0xc07c <f_getcwd+0x23a>
    c098:	84 30       	cpi	r24, 0x04	; 4
    c09a:	91 05       	cpc	r25, r1
    c09c:	d9 f7       	brne	.-10     	; 0xc094 <f_getcwd+0x252>
    c09e:	82 e0       	ldi	r24, 0x02	; 2
    c0a0:	90 e0       	ldi	r25, 0x00	; 0
    c0a2:	f8 cf       	rjmp	.-16     	; 0xc094 <f_getcwd+0x252>
    c0a4:	c8 5b       	subi	r28, 0xB8	; 184
    c0a6:	de 4f       	sbci	r29, 0xFE	; 254
    c0a8:	e2 e1       	ldi	r30, 0x12	; 18
    c0aa:	0c 94 d7 e6 	jmp	0x1cdae	; 0x1cdae <__epilogue_restores__>

0000c0ae <f_lseek>:
    c0ae:	aa e0       	ldi	r26, 0x0A	; 10
    c0b0:	b0 e0       	ldi	r27, 0x00	; 0
    c0b2:	ed e5       	ldi	r30, 0x5D	; 93
    c0b4:	f0 e6       	ldi	r31, 0x60	; 96
    c0b6:	0c 94 bb e6 	jmp	0x1cd76	; 0x1cd76 <__prologue_saves__>
    c0ba:	1c 01       	movw	r2, r24
    c0bc:	6a 01       	movw	r12, r20
    c0be:	7b 01       	movw	r14, r22
    c0c0:	be 01       	movw	r22, r28
    c0c2:	6f 5f       	subi	r22, 0xFF	; 255
    c0c4:	7f 4f       	sbci	r23, 0xFF	; 255
    c0c6:	0e 94 63 48 	call	0x90c6	; 0x90c6 <validate>
    c0ca:	00 97       	sbiw	r24, 0x00	; 0
    c0cc:	09 f0       	breq	.+2      	; 0xc0d0 <f_lseek+0x22>
    c0ce:	a6 c2       	rjmp	.+1356   	; 0xc61c <f_lseek+0x56e>
    c0d0:	f1 01       	movw	r30, r2
    c0d2:	87 85       	ldd	r24, Z+15	; 0x0f
    c0d4:	90 e0       	ldi	r25, 0x00	; 0
    c0d6:	00 97       	sbiw	r24, 0x00	; 0
    c0d8:	09 f0       	breq	.+2      	; 0xc0dc <f_lseek+0x2e>
    c0da:	a0 c2       	rjmp	.+1344   	; 0xc61c <f_lseek+0x56e>
    c0dc:	22 a1       	ldd	r18, Z+34	; 0x22
    c0de:	33 a1       	ldd	r19, Z+35	; 0x23
    c0e0:	21 15       	cp	r18, r1
    c0e2:	31 05       	cpc	r19, r1
    c0e4:	09 f4       	brne	.+2      	; 0xc0e8 <f_lseek+0x3a>
    c0e6:	2d c1       	rjmp	.+602    	; 0xc342 <f_lseek+0x294>
    c0e8:	ff ef       	ldi	r31, 0xFF	; 255
    c0ea:	cf 16       	cp	r12, r31
    c0ec:	df 06       	cpc	r13, r31
    c0ee:	ef 06       	cpc	r14, r31
    c0f0:	ff 06       	cpc	r15, r31
    c0f2:	09 f0       	breq	.+2      	; 0xc0f6 <f_lseek+0x48>
    c0f4:	9a c0       	rjmp	.+308    	; 0xc22a <f_lseek+0x17c>
    c0f6:	89 01       	movw	r16, r18
    c0f8:	0c 5f       	subi	r16, 0xFC	; 252
    c0fa:	1f 4f       	sbci	r17, 0xFF	; 255
    c0fc:	d9 01       	movw	r26, r18
    c0fe:	4d 91       	ld	r20, X+
    c100:	5d 91       	ld	r21, X+
    c102:	6d 91       	ld	r22, X+
    c104:	7c 91       	ld	r23, X
    c106:	4f 83       	std	Y+7, r20	; 0x07
    c108:	58 87       	std	Y+8, r21	; 0x08
    c10a:	69 87       	std	Y+9, r22	; 0x09
    c10c:	7a 87       	std	Y+10, r23	; 0x0a
    c10e:	f1 01       	movw	r30, r2
    c110:	86 80       	ldd	r8, Z+6	; 0x06
    c112:	97 80       	ldd	r9, Z+7	; 0x07
    c114:	a0 84       	ldd	r10, Z+8	; 0x08
    c116:	b1 84       	ldd	r11, Z+9	; 0x09
    c118:	52 e0       	ldi	r21, 0x02	; 2
    c11a:	c5 2e       	mov	r12, r21
    c11c:	d1 2c       	mov	r13, r1
    c11e:	e1 2c       	mov	r14, r1
    c120:	f1 2c       	mov	r15, r1
    c122:	81 14       	cp	r8, r1
    c124:	91 04       	cpc	r9, r1
    c126:	a1 04       	cpc	r10, r1
    c128:	b1 04       	cpc	r11, r1
    c12a:	09 f4       	brne	.+2      	; 0xc12e <f_lseek+0x80>
    c12c:	65 c0       	rjmp	.+202    	; 0xc1f8 <f_lseek+0x14a>
    c12e:	24 01       	movw	r4, r8
    c130:	35 01       	movw	r6, r10
    c132:	1b 82       	std	Y+3, r1	; 0x03
    c134:	1c 82       	std	Y+4, r1	; 0x04
    c136:	1d 82       	std	Y+5, r1	; 0x05
    c138:	1e 82       	std	Y+6, r1	; 0x06
    c13a:	2b 81       	ldd	r18, Y+3	; 0x03
    c13c:	3c 81       	ldd	r19, Y+4	; 0x04
    c13e:	4d 81       	ldd	r20, Y+5	; 0x05
    c140:	5e 81       	ldd	r21, Y+6	; 0x06
    c142:	2f 5f       	subi	r18, 0xFF	; 255
    c144:	3f 4f       	sbci	r19, 0xFF	; 255
    c146:	4f 4f       	sbci	r20, 0xFF	; 255
    c148:	5f 4f       	sbci	r21, 0xFF	; 255
    c14a:	2b 83       	std	Y+3, r18	; 0x03
    c14c:	3c 83       	std	Y+4, r19	; 0x04
    c14e:	4d 83       	std	Y+5, r20	; 0x05
    c150:	5e 83       	std	Y+6, r21	; 0x06
    c152:	b3 01       	movw	r22, r6
    c154:	a2 01       	movw	r20, r4
    c156:	d1 01       	movw	r26, r2
    c158:	8d 91       	ld	r24, X+
    c15a:	9c 91       	ld	r25, X
    c15c:	0e 94 21 4f 	call	0x9e42	; 0x9e42 <get_fat.isra.9>
    c160:	62 30       	cpi	r22, 0x02	; 2
    c162:	71 05       	cpc	r23, r1
    c164:	81 05       	cpc	r24, r1
    c166:	91 05       	cpc	r25, r1
    c168:	10 f4       	brcc	.+4      	; 0xc16e <f_lseek+0xc0>
    c16a:	82 e0       	ldi	r24, 0x02	; 2
    c16c:	07 c0       	rjmp	.+14     	; 0xc17c <f_lseek+0xce>
    c16e:	6f 3f       	cpi	r22, 0xFF	; 255
    c170:	ff ef       	ldi	r31, 0xFF	; 255
    c172:	7f 07       	cpc	r23, r31
    c174:	8f 07       	cpc	r24, r31
    c176:	9f 07       	cpc	r25, r31
    c178:	29 f4       	brne	.+10     	; 0xc184 <f_lseek+0xd6>
    c17a:	81 e0       	ldi	r24, 0x01	; 1
    c17c:	f1 01       	movw	r30, r2
    c17e:	87 87       	std	Z+15, r24	; 0x0f
    c180:	90 e0       	ldi	r25, 0x00	; 0
    c182:	4c c2       	rjmp	.+1176   	; 0xc61c <f_lseek+0x56e>
    c184:	a3 01       	movw	r20, r6
    c186:	92 01       	movw	r18, r4
    c188:	2f 5f       	subi	r18, 0xFF	; 255
    c18a:	3f 4f       	sbci	r19, 0xFF	; 255
    c18c:	4f 4f       	sbci	r20, 0xFF	; 255
    c18e:	5f 4f       	sbci	r21, 0xFF	; 255
    c190:	2b 01       	movw	r4, r22
    c192:	3c 01       	movw	r6, r24
    c194:	62 17       	cp	r22, r18
    c196:	73 07       	cpc	r23, r19
    c198:	84 07       	cpc	r24, r20
    c19a:	95 07       	cpc	r25, r21
    c19c:	71 f2       	breq	.-100    	; 0xc13a <f_lseek+0x8c>
    c19e:	f2 e0       	ldi	r31, 0x02	; 2
    c1a0:	cf 0e       	add	r12, r31
    c1a2:	d1 1c       	adc	r13, r1
    c1a4:	e1 1c       	adc	r14, r1
    c1a6:	f1 1c       	adc	r15, r1
    c1a8:	2f 81       	ldd	r18, Y+7	; 0x07
    c1aa:	38 85       	ldd	r19, Y+8	; 0x08
    c1ac:	49 85       	ldd	r20, Y+9	; 0x09
    c1ae:	5a 85       	ldd	r21, Y+10	; 0x0a
    c1b0:	2c 15       	cp	r18, r12
    c1b2:	3d 05       	cpc	r19, r13
    c1b4:	4e 05       	cpc	r20, r14
    c1b6:	5f 05       	cpc	r21, r15
    c1b8:	88 f0       	brcs	.+34     	; 0xc1dc <f_lseek+0x12e>
    c1ba:	2b 81       	ldd	r18, Y+3	; 0x03
    c1bc:	3c 81       	ldd	r19, Y+4	; 0x04
    c1be:	4d 81       	ldd	r20, Y+5	; 0x05
    c1c0:	5e 81       	ldd	r21, Y+6	; 0x06
    c1c2:	d8 01       	movw	r26, r16
    c1c4:	2d 93       	st	X+, r18
    c1c6:	3d 93       	st	X+, r19
    c1c8:	4d 93       	st	X+, r20
    c1ca:	5c 93       	st	X, r21
    c1cc:	13 97       	sbiw	r26, 0x03	; 3
    c1ce:	f8 01       	movw	r30, r16
    c1d0:	84 82       	std	Z+4, r8	; 0x04
    c1d2:	95 82       	std	Z+5, r9	; 0x05
    c1d4:	a6 82       	std	Z+6, r10	; 0x06
    c1d6:	b7 82       	std	Z+7, r11	; 0x07
    c1d8:	08 5f       	subi	r16, 0xF8	; 248
    c1da:	1f 4f       	sbci	r17, 0xFF	; 255
    c1dc:	e9 81       	ldd	r30, Y+1	; 0x01
    c1de:	fa 81       	ldd	r31, Y+2	; 0x02
    c1e0:	81 8c       	ldd	r8, Z+25	; 0x19
    c1e2:	92 8c       	ldd	r9, Z+26	; 0x1a
    c1e4:	a3 8c       	ldd	r10, Z+27	; 0x1b
    c1e6:	b4 8c       	ldd	r11, Z+28	; 0x1c
    c1e8:	68 15       	cp	r22, r8
    c1ea:	79 05       	cpc	r23, r9
    c1ec:	8a 05       	cpc	r24, r10
    c1ee:	9b 05       	cpc	r25, r11
    c1f0:	18 f4       	brcc	.+6      	; 0xc1f8 <f_lseek+0x14a>
    c1f2:	4b 01       	movw	r8, r22
    c1f4:	5c 01       	movw	r10, r24
    c1f6:	9b cf       	rjmp	.-202    	; 0xc12e <f_lseek+0x80>
    c1f8:	f1 01       	movw	r30, r2
    c1fa:	a2 a1       	ldd	r26, Z+34	; 0x22
    c1fc:	b3 a1       	ldd	r27, Z+35	; 0x23
    c1fe:	cd 92       	st	X+, r12
    c200:	dd 92       	st	X+, r13
    c202:	ed 92       	st	X+, r14
    c204:	fc 92       	st	X, r15
    c206:	13 97       	sbiw	r26, 0x03	; 3
    c208:	2f 81       	ldd	r18, Y+7	; 0x07
    c20a:	38 85       	ldd	r19, Y+8	; 0x08
    c20c:	49 85       	ldd	r20, Y+9	; 0x09
    c20e:	5a 85       	ldd	r21, Y+10	; 0x0a
    c210:	2c 15       	cp	r18, r12
    c212:	3d 05       	cpc	r19, r13
    c214:	4e 05       	cpc	r20, r14
    c216:	5f 05       	cpc	r21, r15
    c218:	08 f4       	brcc	.+2      	; 0xc21c <f_lseek+0x16e>
    c21a:	f7 c1       	rjmp	.+1006   	; 0xc60a <f_lseek+0x55c>
    c21c:	d8 01       	movw	r26, r16
    c21e:	1d 92       	st	X+, r1
    c220:	1d 92       	st	X+, r1
    c222:	1d 92       	st	X+, r1
    c224:	1c 92       	st	X, r1
    c226:	13 97       	sbiw	r26, 0x03	; 3
    c228:	ee c1       	rjmp	.+988    	; 0xc606 <f_lseek+0x558>
    c22a:	f1 01       	movw	r30, r2
    c22c:	82 85       	ldd	r24, Z+10	; 0x0a
    c22e:	93 85       	ldd	r25, Z+11	; 0x0b
    c230:	a4 85       	ldd	r26, Z+12	; 0x0c
    c232:	b5 85       	ldd	r27, Z+13	; 0x0d
    c234:	46 01       	movw	r8, r12
    c236:	57 01       	movw	r10, r14
    c238:	8c 15       	cp	r24, r12
    c23a:	9d 05       	cpc	r25, r13
    c23c:	ae 05       	cpc	r26, r14
    c23e:	bf 05       	cpc	r27, r15
    c240:	10 f4       	brcc	.+4      	; 0xc246 <f_lseek+0x198>
    c242:	4c 01       	movw	r8, r24
    c244:	5d 01       	movw	r10, r26
    c246:	f1 01       	movw	r30, r2
    c248:	80 8a       	std	Z+16, r8	; 0x10
    c24a:	91 8a       	std	Z+17, r9	; 0x11
    c24c:	a2 8a       	std	Z+18, r10	; 0x12
    c24e:	b3 8a       	std	Z+19, r11	; 0x13
    c250:	81 14       	cp	r8, r1
    c252:	91 04       	cpc	r9, r1
    c254:	a1 04       	cpc	r10, r1
    c256:	b1 04       	cpc	r11, r1
    c258:	09 f4       	brne	.+2      	; 0xc25c <f_lseek+0x1ae>
    c25a:	d5 c1       	rjmp	.+938    	; 0xc606 <f_lseek+0x558>
    c25c:	24 01       	movw	r4, r8
    c25e:	35 01       	movw	r6, r10
    c260:	f1 e0       	ldi	r31, 0x01	; 1
    c262:	4f 1a       	sub	r4, r31
    c264:	51 08       	sbc	r5, r1
    c266:	61 08       	sbc	r6, r1
    c268:	71 08       	sbc	r7, r1
    c26a:	b3 01       	movw	r22, r6
    c26c:	a2 01       	movw	r20, r4
    c26e:	c1 01       	movw	r24, r2
    c270:	0e 94 ec 47 	call	0x8fd8	; 0x8fd8 <clmt_clust>
    c274:	ab 01       	movw	r20, r22
    c276:	bc 01       	movw	r22, r24
    c278:	f1 01       	movw	r30, r2
    c27a:	44 8b       	std	Z+20, r20	; 0x14
    c27c:	55 8b       	std	Z+21, r21	; 0x15
    c27e:	66 8b       	std	Z+22, r22	; 0x16
    c280:	77 8b       	std	Z+23, r23	; 0x17
    c282:	e9 80       	ldd	r14, Y+1	; 0x01
    c284:	fa 80       	ldd	r15, Y+2	; 0x02
    c286:	c7 01       	movw	r24, r14
    c288:	0e 94 c4 47 	call	0x8f88	; 0x8f88 <clst2sect>
    c28c:	61 15       	cp	r22, r1
    c28e:	71 05       	cpc	r23, r1
    c290:	81 05       	cpc	r24, r1
    c292:	91 05       	cpc	r25, r1
    c294:	09 f4       	brne	.+2      	; 0xc298 <f_lseek+0x1ea>
    c296:	69 cf       	rjmp	.-302    	; 0xc16a <f_lseek+0xbc>
    c298:	95 01       	movw	r18, r10
    c29a:	84 01       	movw	r16, r8
    c29c:	11 70       	andi	r17, 0x01	; 1
    c29e:	22 27       	eor	r18, r18
    c2a0:	33 27       	eor	r19, r19
    c2a2:	01 15       	cp	r16, r1
    c2a4:	11 05       	cpc	r17, r1
    c2a6:	21 05       	cpc	r18, r1
    c2a8:	31 05       	cpc	r19, r1
    c2aa:	09 f4       	brne	.+2      	; 0xc2ae <f_lseek+0x200>
    c2ac:	ac c1       	rjmp	.+856    	; 0xc606 <f_lseek+0x558>
    c2ae:	f7 01       	movw	r30, r14
    c2b0:	81 84       	ldd	r8, Z+9	; 0x09
    c2b2:	92 84       	ldd	r9, Z+10	; 0x0a
    c2b4:	f1 e0       	ldi	r31, 0x01	; 1
    c2b6:	8f 1a       	sub	r8, r31
    c2b8:	91 08       	sbc	r9, r1
    c2ba:	a1 2c       	mov	r10, r1
    c2bc:	b1 2c       	mov	r11, r1
    c2be:	49 e0       	ldi	r20, 0x09	; 9
    c2c0:	76 94       	lsr	r7
    c2c2:	67 94       	ror	r6
    c2c4:	57 94       	ror	r5
    c2c6:	47 94       	ror	r4
    c2c8:	4a 95       	dec	r20
    c2ca:	d1 f7       	brne	.-12     	; 0xc2c0 <f_lseek+0x212>
    c2cc:	48 20       	and	r4, r8
    c2ce:	59 20       	and	r5, r9
    c2d0:	6a 20       	and	r6, r10
    c2d2:	7b 20       	and	r7, r11
    c2d4:	53 01       	movw	r10, r6
    c2d6:	42 01       	movw	r8, r4
    c2d8:	86 0e       	add	r8, r22
    c2da:	97 1e       	adc	r9, r23
    c2dc:	a8 1e       	adc	r10, r24
    c2de:	b9 1e       	adc	r11, r25
    c2e0:	f1 01       	movw	r30, r2
    c2e2:	20 8d       	ldd	r18, Z+24	; 0x18
    c2e4:	31 8d       	ldd	r19, Z+25	; 0x19
    c2e6:	42 8d       	ldd	r20, Z+26	; 0x1a
    c2e8:	53 8d       	ldd	r21, Z+27	; 0x1b
    c2ea:	82 16       	cp	r8, r18
    c2ec:	93 06       	cpc	r9, r19
    c2ee:	a4 06       	cpc	r10, r20
    c2f0:	b5 06       	cpc	r11, r21
    c2f2:	09 f4       	brne	.+2      	; 0xc2f6 <f_lseek+0x248>
    c2f4:	88 c1       	rjmp	.+784    	; 0xc606 <f_lseek+0x558>
    c2f6:	86 85       	ldd	r24, Z+14	; 0x0e
    c2f8:	b1 01       	movw	r22, r2
    c2fa:	6c 5d       	subi	r22, 0xDC	; 220
    c2fc:	7f 4f       	sbci	r23, 0xFF	; 255
    c2fe:	6b 01       	movw	r12, r22
    c300:	87 ff       	sbrs	r24, 7
    c302:	0d c0       	rjmp	.+26     	; 0xc31e <f_lseek+0x270>
    c304:	01 e0       	ldi	r16, 0x01	; 1
    c306:	10 e0       	ldi	r17, 0x00	; 0
    c308:	f7 01       	movw	r30, r14
    c30a:	81 81       	ldd	r24, Z+1	; 0x01
    c30c:	0e 94 95 69 	call	0xd32a	; 0xd32a <disk_write>
    c310:	89 2b       	or	r24, r25
    c312:	09 f0       	breq	.+2      	; 0xc316 <f_lseek+0x268>
    c314:	32 cf       	rjmp	.-412    	; 0xc17a <f_lseek+0xcc>
    c316:	f1 01       	movw	r30, r2
    c318:	86 85       	ldd	r24, Z+14	; 0x0e
    c31a:	8f 77       	andi	r24, 0x7F	; 127
    c31c:	86 87       	std	Z+14, r24	; 0x0e
    c31e:	e9 81       	ldd	r30, Y+1	; 0x01
    c320:	fa 81       	ldd	r31, Y+2	; 0x02
    c322:	01 e0       	ldi	r16, 0x01	; 1
    c324:	10 e0       	ldi	r17, 0x00	; 0
    c326:	a5 01       	movw	r20, r10
    c328:	94 01       	movw	r18, r8
    c32a:	b6 01       	movw	r22, r12
    c32c:	81 81       	ldd	r24, Z+1	; 0x01
    c32e:	ed d7       	rcall	.+4058   	; 0xd30a <disk_read>
    c330:	89 2b       	or	r24, r25
    c332:	09 f0       	breq	.+2      	; 0xc336 <f_lseek+0x288>
    c334:	22 cf       	rjmp	.-444    	; 0xc17a <f_lseek+0xcc>
    c336:	f1 01       	movw	r30, r2
    c338:	80 8e       	std	Z+24, r8	; 0x18
    c33a:	91 8e       	std	Z+25, r9	; 0x19
    c33c:	a2 8e       	std	Z+26, r10	; 0x1a
    c33e:	b3 8e       	std	Z+27, r11	; 0x1b
    c340:	62 c1       	rjmp	.+708    	; 0xc606 <f_lseek+0x558>
    c342:	f1 01       	movw	r30, r2
    c344:	82 85       	ldd	r24, Z+10	; 0x0a
    c346:	93 85       	ldd	r25, Z+11	; 0x0b
    c348:	a4 85       	ldd	r26, Z+12	; 0x0c
    c34a:	b5 85       	ldd	r27, Z+13	; 0x0d
    c34c:	8c 15       	cp	r24, r12
    c34e:	9d 05       	cpc	r25, r13
    c350:	ae 05       	cpc	r26, r14
    c352:	bf 05       	cpc	r27, r15
    c354:	28 f4       	brcc	.+10     	; 0xc360 <f_lseek+0x2b2>
    c356:	26 85       	ldd	r18, Z+14	; 0x0e
    c358:	21 fd       	sbrc	r18, 1
    c35a:	02 c0       	rjmp	.+4      	; 0xc360 <f_lseek+0x2b2>
    c35c:	6c 01       	movw	r12, r24
    c35e:	7d 01       	movw	r14, r26
    c360:	f1 01       	movw	r30, r2
    c362:	40 88       	ldd	r4, Z+16	; 0x10
    c364:	51 88       	ldd	r5, Z+17	; 0x11
    c366:	62 88       	ldd	r6, Z+18	; 0x12
    c368:	73 88       	ldd	r7, Z+19	; 0x13
    c36a:	10 8a       	std	Z+16, r1	; 0x10
    c36c:	11 8a       	std	Z+17, r1	; 0x11
    c36e:	12 8a       	std	Z+18, r1	; 0x12
    c370:	13 8a       	std	Z+19, r1	; 0x13
    c372:	c1 14       	cp	r12, r1
    c374:	d1 04       	cpc	r13, r1
    c376:	e1 04       	cpc	r14, r1
    c378:	f1 04       	cpc	r15, r1
    c37a:	09 f4       	brne	.+2      	; 0xc37e <f_lseek+0x2d0>
    c37c:	48 c1       	rjmp	.+656    	; 0xc60e <f_lseek+0x560>
    c37e:	e9 81       	ldd	r30, Y+1	; 0x01
    c380:	fa 81       	ldd	r31, Y+2	; 0x02
    c382:	81 84       	ldd	r8, Z+9	; 0x09
    c384:	92 84       	ldd	r9, Z+10	; 0x0a
    c386:	a1 2c       	mov	r10, r1
    c388:	b1 2c       	mov	r11, r1
    c38a:	39 e0       	ldi	r19, 0x09	; 9
    c38c:	88 0c       	add	r8, r8
    c38e:	99 1c       	adc	r9, r9
    c390:	aa 1c       	adc	r10, r10
    c392:	bb 1c       	adc	r11, r11
    c394:	3a 95       	dec	r19
    c396:	d1 f7       	brne	.-12     	; 0xc38c <f_lseek+0x2de>
    c398:	41 14       	cp	r4, r1
    c39a:	51 04       	cpc	r5, r1
    c39c:	61 04       	cpc	r6, r1
    c39e:	71 04       	cpc	r7, r1
    c3a0:	d9 f1       	breq	.+118    	; 0xc418 <f_lseek+0x36a>
    c3a2:	f1 e0       	ldi	r31, 0x01	; 1
    c3a4:	4f 1a       	sub	r4, r31
    c3a6:	51 08       	sbc	r5, r1
    c3a8:	61 08       	sbc	r6, r1
    c3aa:	71 08       	sbc	r7, r1
    c3ac:	c7 01       	movw	r24, r14
    c3ae:	b6 01       	movw	r22, r12
    c3b0:	61 50       	subi	r22, 0x01	; 1
    c3b2:	71 09       	sbc	r23, r1
    c3b4:	81 09       	sbc	r24, r1
    c3b6:	91 09       	sbc	r25, r1
    c3b8:	a5 01       	movw	r20, r10
    c3ba:	94 01       	movw	r18, r8
    c3bc:	0e 94 4e e6 	call	0x1cc9c	; 0x1cc9c <__udivmodsi4>
    c3c0:	2b 83       	std	Y+3, r18	; 0x03
    c3c2:	3c 83       	std	Y+4, r19	; 0x04
    c3c4:	4d 83       	std	Y+5, r20	; 0x05
    c3c6:	5e 83       	std	Y+6, r21	; 0x06
    c3c8:	c3 01       	movw	r24, r6
    c3ca:	b2 01       	movw	r22, r4
    c3cc:	a5 01       	movw	r20, r10
    c3ce:	94 01       	movw	r18, r8
    c3d0:	0e 94 4e e6 	call	0x1cc9c	; 0x1cc9c <__udivmodsi4>
    c3d4:	6b 81       	ldd	r22, Y+3	; 0x03
    c3d6:	7c 81       	ldd	r23, Y+4	; 0x04
    c3d8:	8d 81       	ldd	r24, Y+5	; 0x05
    c3da:	9e 81       	ldd	r25, Y+6	; 0x06
    c3dc:	62 17       	cp	r22, r18
    c3de:	73 07       	cpc	r23, r19
    c3e0:	84 07       	cpc	r24, r20
    c3e2:	95 07       	cpc	r25, r21
    c3e4:	c8 f0       	brcs	.+50     	; 0xc418 <f_lseek+0x36a>
    c3e6:	88 27       	eor	r24, r24
    c3e8:	99 27       	eor	r25, r25
    c3ea:	dc 01       	movw	r26, r24
    c3ec:	88 19       	sub	r24, r8
    c3ee:	99 09       	sbc	r25, r9
    c3f0:	aa 09       	sbc	r26, r10
    c3f2:	bb 09       	sbc	r27, r11
    c3f4:	48 22       	and	r4, r24
    c3f6:	59 22       	and	r5, r25
    c3f8:	6a 22       	and	r6, r26
    c3fa:	7b 22       	and	r7, r27
    c3fc:	f1 01       	movw	r30, r2
    c3fe:	40 8a       	std	Z+16, r4	; 0x10
    c400:	51 8a       	std	Z+17, r5	; 0x11
    c402:	62 8a       	std	Z+18, r6	; 0x12
    c404:	73 8a       	std	Z+19, r7	; 0x13
    c406:	c4 18       	sub	r12, r4
    c408:	d5 08       	sbc	r13, r5
    c40a:	e6 08       	sbc	r14, r6
    c40c:	f7 08       	sbc	r15, r7
    c40e:	44 89       	ldd	r20, Z+20	; 0x14
    c410:	55 89       	ldd	r21, Z+21	; 0x15
    c412:	66 89       	ldd	r22, Z+22	; 0x16
    c414:	77 89       	ldd	r23, Z+23	; 0x17
    c416:	29 c0       	rjmp	.+82     	; 0xc46a <f_lseek+0x3bc>
    c418:	f1 01       	movw	r30, r2
    c41a:	46 81       	ldd	r20, Z+6	; 0x06
    c41c:	57 81       	ldd	r21, Z+7	; 0x07
    c41e:	60 85       	ldd	r22, Z+8	; 0x08
    c420:	71 85       	ldd	r23, Z+9	; 0x09
    c422:	41 15       	cp	r20, r1
    c424:	51 05       	cpc	r21, r1
    c426:	61 05       	cpc	r22, r1
    c428:	71 05       	cpc	r23, r1
    c42a:	d1 f4       	brne	.+52     	; 0xc460 <f_lseek+0x3b2>
    c42c:	40 e0       	ldi	r20, 0x00	; 0
    c42e:	50 e0       	ldi	r21, 0x00	; 0
    c430:	ba 01       	movw	r22, r20
    c432:	c1 01       	movw	r24, r2
    c434:	0e 94 96 50 	call	0xa12c	; 0xa12c <create_chain>
    c438:	ab 01       	movw	r20, r22
    c43a:	bc 01       	movw	r22, r24
    c43c:	41 30       	cpi	r20, 0x01	; 1
    c43e:	51 05       	cpc	r21, r1
    c440:	61 05       	cpc	r22, r1
    c442:	71 05       	cpc	r23, r1
    c444:	09 f4       	brne	.+2      	; 0xc448 <f_lseek+0x39a>
    c446:	91 ce       	rjmp	.-734    	; 0xc16a <f_lseek+0xbc>
    c448:	4f 3f       	cpi	r20, 0xFF	; 255
    c44a:	ff ef       	ldi	r31, 0xFF	; 255
    c44c:	5f 07       	cpc	r21, r31
    c44e:	6f 07       	cpc	r22, r31
    c450:	7f 07       	cpc	r23, r31
    c452:	09 f4       	brne	.+2      	; 0xc456 <f_lseek+0x3a8>
    c454:	92 ce       	rjmp	.-732    	; 0xc17a <f_lseek+0xcc>
    c456:	f1 01       	movw	r30, r2
    c458:	46 83       	std	Z+6, r20	; 0x06
    c45a:	57 83       	std	Z+7, r21	; 0x07
    c45c:	60 87       	std	Z+8, r22	; 0x08
    c45e:	71 87       	std	Z+9, r23	; 0x09
    c460:	f1 01       	movw	r30, r2
    c462:	44 8b       	std	Z+20, r20	; 0x14
    c464:	55 8b       	std	Z+21, r21	; 0x15
    c466:	66 8b       	std	Z+22, r22	; 0x16
    c468:	77 8b       	std	Z+23, r23	; 0x17
    c46a:	41 15       	cp	r20, r1
    c46c:	51 05       	cpc	r21, r1
    c46e:	61 05       	cpc	r22, r1
    c470:	71 05       	cpc	r23, r1
    c472:	09 f0       	breq	.+2      	; 0xc476 <f_lseek+0x3c8>
    c474:	40 c0       	rjmp	.+128    	; 0xc4f6 <f_lseek+0x448>
    c476:	c1 2c       	mov	r12, r1
    c478:	d1 2c       	mov	r13, r1
    c47a:	76 01       	movw	r14, r12
    c47c:	79 c0       	rjmp	.+242    	; 0xc570 <f_lseek+0x4c2>
    c47e:	c8 18       	sub	r12, r8
    c480:	d9 08       	sbc	r13, r9
    c482:	ea 08       	sbc	r14, r10
    c484:	fb 08       	sbc	r15, r11
    c486:	f1 01       	movw	r30, r2
    c488:	80 89       	ldd	r24, Z+16	; 0x10
    c48a:	91 89       	ldd	r25, Z+17	; 0x11
    c48c:	a2 89       	ldd	r26, Z+18	; 0x12
    c48e:	b3 89       	ldd	r27, Z+19	; 0x13
    c490:	88 0d       	add	r24, r8
    c492:	99 1d       	adc	r25, r9
    c494:	aa 1d       	adc	r26, r10
    c496:	bb 1d       	adc	r27, r11
    c498:	80 8b       	std	Z+16, r24	; 0x10
    c49a:	91 8b       	std	Z+17, r25	; 0x11
    c49c:	a2 8b       	std	Z+18, r26	; 0x12
    c49e:	b3 8b       	std	Z+19, r27	; 0x13
    c4a0:	86 85       	ldd	r24, Z+14	; 0x0e
    c4a2:	81 ff       	sbrs	r24, 1
    c4a4:	2f c0       	rjmp	.+94     	; 0xc504 <f_lseek+0x456>
    c4a6:	c1 01       	movw	r24, r2
    c4a8:	0e 94 96 50 	call	0xa12c	; 0xa12c <create_chain>
    c4ac:	ab 01       	movw	r20, r22
    c4ae:	bc 01       	movw	r22, r24
    c4b0:	41 15       	cp	r20, r1
    c4b2:	51 05       	cpc	r21, r1
    c4b4:	61 05       	cpc	r22, r1
    c4b6:	71 05       	cpc	r23, r1
    c4b8:	61 f1       	breq	.+88     	; 0xc512 <f_lseek+0x464>
    c4ba:	4f 3f       	cpi	r20, 0xFF	; 255
    c4bc:	bf ef       	ldi	r27, 0xFF	; 255
    c4be:	5b 07       	cpc	r21, r27
    c4c0:	6b 07       	cpc	r22, r27
    c4c2:	7b 07       	cpc	r23, r27
    c4c4:	09 f4       	brne	.+2      	; 0xc4c8 <f_lseek+0x41a>
    c4c6:	59 ce       	rjmp	.-846    	; 0xc17a <f_lseek+0xcc>
    c4c8:	42 30       	cpi	r20, 0x02	; 2
    c4ca:	51 05       	cpc	r21, r1
    c4cc:	61 05       	cpc	r22, r1
    c4ce:	71 05       	cpc	r23, r1
    c4d0:	08 f4       	brcc	.+2      	; 0xc4d4 <f_lseek+0x426>
    c4d2:	4b ce       	rjmp	.-874    	; 0xc16a <f_lseek+0xbc>
    c4d4:	e9 81       	ldd	r30, Y+1	; 0x01
    c4d6:	fa 81       	ldd	r31, Y+2	; 0x02
    c4d8:	81 8d       	ldd	r24, Z+25	; 0x19
    c4da:	92 8d       	ldd	r25, Z+26	; 0x1a
    c4dc:	a3 8d       	ldd	r26, Z+27	; 0x1b
    c4de:	b4 8d       	ldd	r27, Z+28	; 0x1c
    c4e0:	48 17       	cp	r20, r24
    c4e2:	59 07       	cpc	r21, r25
    c4e4:	6a 07       	cpc	r22, r26
    c4e6:	7b 07       	cpc	r23, r27
    c4e8:	08 f0       	brcs	.+2      	; 0xc4ec <f_lseek+0x43e>
    c4ea:	3f ce       	rjmp	.-898    	; 0xc16a <f_lseek+0xbc>
    c4ec:	f1 01       	movw	r30, r2
    c4ee:	44 8b       	std	Z+20, r20	; 0x14
    c4f0:	55 8b       	std	Z+21, r21	; 0x15
    c4f2:	66 8b       	std	Z+22, r22	; 0x16
    c4f4:	77 8b       	std	Z+23, r23	; 0x17
    c4f6:	8c 14       	cp	r8, r12
    c4f8:	9d 04       	cpc	r9, r13
    c4fa:	ae 04       	cpc	r10, r14
    c4fc:	bf 04       	cpc	r11, r15
    c4fe:	08 f4       	brcc	.+2      	; 0xc502 <f_lseek+0x454>
    c500:	be cf       	rjmp	.-132    	; 0xc47e <f_lseek+0x3d0>
    c502:	0a c0       	rjmp	.+20     	; 0xc518 <f_lseek+0x46a>
    c504:	80 81       	ld	r24, Z
    c506:	91 81       	ldd	r25, Z+1	; 0x01
    c508:	0e 94 21 4f 	call	0x9e42	; 0x9e42 <get_fat.isra.9>
    c50c:	ab 01       	movw	r20, r22
    c50e:	bc 01       	movw	r22, r24
    c510:	d4 cf       	rjmp	.-88     	; 0xc4ba <f_lseek+0x40c>
    c512:	c1 2c       	mov	r12, r1
    c514:	d1 2c       	mov	r13, r1
    c516:	76 01       	movw	r14, r12
    c518:	f1 01       	movw	r30, r2
    c51a:	80 89       	ldd	r24, Z+16	; 0x10
    c51c:	91 89       	ldd	r25, Z+17	; 0x11
    c51e:	a2 89       	ldd	r26, Z+18	; 0x12
    c520:	b3 89       	ldd	r27, Z+19	; 0x13
    c522:	8c 0d       	add	r24, r12
    c524:	9d 1d       	adc	r25, r13
    c526:	ae 1d       	adc	r26, r14
    c528:	bf 1d       	adc	r27, r15
    c52a:	80 8b       	std	Z+16, r24	; 0x10
    c52c:	91 8b       	std	Z+17, r25	; 0x11
    c52e:	a2 8b       	std	Z+18, r26	; 0x12
    c530:	b3 8b       	std	Z+19, r27	; 0x13
    c532:	d7 01       	movw	r26, r14
    c534:	c6 01       	movw	r24, r12
    c536:	91 70       	andi	r25, 0x01	; 1
    c538:	aa 27       	eor	r26, r26
    c53a:	bb 27       	eor	r27, r27
    c53c:	89 2b       	or	r24, r25
    c53e:	8a 2b       	or	r24, r26
    c540:	8b 2b       	or	r24, r27
    c542:	09 f4       	brne	.+2      	; 0xc546 <f_lseek+0x498>
    c544:	98 cf       	rjmp	.-208    	; 0xc476 <f_lseek+0x3c8>
    c546:	89 81       	ldd	r24, Y+1	; 0x01
    c548:	9a 81       	ldd	r25, Y+2	; 0x02
    c54a:	0e 94 c4 47 	call	0x8f88	; 0x8f88 <clst2sect>
    c54e:	61 15       	cp	r22, r1
    c550:	71 05       	cpc	r23, r1
    c552:	81 05       	cpc	r24, r1
    c554:	91 05       	cpc	r25, r1
    c556:	09 f4       	brne	.+2      	; 0xc55a <f_lseek+0x4ac>
    c558:	08 ce       	rjmp	.-1008   	; 0xc16a <f_lseek+0xbc>
    c55a:	29 e0       	ldi	r18, 0x09	; 9
    c55c:	f6 94       	lsr	r15
    c55e:	e7 94       	ror	r14
    c560:	d7 94       	ror	r13
    c562:	c7 94       	ror	r12
    c564:	2a 95       	dec	r18
    c566:	d1 f7       	brne	.-12     	; 0xc55c <f_lseek+0x4ae>
    c568:	c6 0e       	add	r12, r22
    c56a:	d7 1e       	adc	r13, r23
    c56c:	e8 1e       	adc	r14, r24
    c56e:	f9 1e       	adc	r15, r25
    c570:	f1 01       	movw	r30, r2
    c572:	80 89       	ldd	r24, Z+16	; 0x10
    c574:	91 89       	ldd	r25, Z+17	; 0x11
    c576:	a2 89       	ldd	r26, Z+18	; 0x12
    c578:	b3 89       	ldd	r27, Z+19	; 0x13
    c57a:	42 85       	ldd	r20, Z+10	; 0x0a
    c57c:	53 85       	ldd	r21, Z+11	; 0x0b
    c57e:	64 85       	ldd	r22, Z+12	; 0x0c
    c580:	75 85       	ldd	r23, Z+13	; 0x0d
    c582:	48 17       	cp	r20, r24
    c584:	59 07       	cpc	r21, r25
    c586:	6a 07       	cpc	r22, r26
    c588:	7b 07       	cpc	r23, r27
    c58a:	38 f4       	brcc	.+14     	; 0xc59a <f_lseek+0x4ec>
    c58c:	82 87       	std	Z+10, r24	; 0x0a
    c58e:	93 87       	std	Z+11, r25	; 0x0b
    c590:	a4 87       	std	Z+12, r26	; 0x0c
    c592:	b5 87       	std	Z+13, r27	; 0x0d
    c594:	26 85       	ldd	r18, Z+14	; 0x0e
    c596:	20 64       	ori	r18, 0x40	; 64
    c598:	26 87       	std	Z+14, r18	; 0x0e
    c59a:	91 70       	andi	r25, 0x01	; 1
    c59c:	aa 27       	eor	r26, r26
    c59e:	bb 27       	eor	r27, r27
    c5a0:	89 2b       	or	r24, r25
    c5a2:	8a 2b       	or	r24, r26
    c5a4:	8b 2b       	or	r24, r27
    c5a6:	79 f1       	breq	.+94     	; 0xc606 <f_lseek+0x558>
    c5a8:	f1 01       	movw	r30, r2
    c5aa:	20 8d       	ldd	r18, Z+24	; 0x18
    c5ac:	31 8d       	ldd	r19, Z+25	; 0x19
    c5ae:	42 8d       	ldd	r20, Z+26	; 0x1a
    c5b0:	53 8d       	ldd	r21, Z+27	; 0x1b
    c5b2:	2c 15       	cp	r18, r12
    c5b4:	3d 05       	cpc	r19, r13
    c5b6:	4e 05       	cpc	r20, r14
    c5b8:	5f 05       	cpc	r21, r15
    c5ba:	29 f1       	breq	.+74     	; 0xc606 <f_lseek+0x558>
    c5bc:	86 85       	ldd	r24, Z+14	; 0x0e
    c5be:	b1 01       	movw	r22, r2
    c5c0:	6c 5d       	subi	r22, 0xDC	; 220
    c5c2:	7f 4f       	sbci	r23, 0xFF	; 255
    c5c4:	5b 01       	movw	r10, r22
    c5c6:	87 ff       	sbrs	r24, 7
    c5c8:	0d c0       	rjmp	.+26     	; 0xc5e4 <f_lseek+0x536>
    c5ca:	e9 81       	ldd	r30, Y+1	; 0x01
    c5cc:	fa 81       	ldd	r31, Y+2	; 0x02
    c5ce:	01 e0       	ldi	r16, 0x01	; 1
    c5d0:	10 e0       	ldi	r17, 0x00	; 0
    c5d2:	81 81       	ldd	r24, Z+1	; 0x01
    c5d4:	aa d6       	rcall	.+3412   	; 0xd32a <disk_write>
    c5d6:	89 2b       	or	r24, r25
    c5d8:	09 f0       	breq	.+2      	; 0xc5dc <f_lseek+0x52e>
    c5da:	cf cd       	rjmp	.-1122   	; 0xc17a <f_lseek+0xcc>
    c5dc:	f1 01       	movw	r30, r2
    c5de:	86 85       	ldd	r24, Z+14	; 0x0e
    c5e0:	8f 77       	andi	r24, 0x7F	; 127
    c5e2:	86 87       	std	Z+14, r24	; 0x0e
    c5e4:	e9 81       	ldd	r30, Y+1	; 0x01
    c5e6:	fa 81       	ldd	r31, Y+2	; 0x02
    c5e8:	01 e0       	ldi	r16, 0x01	; 1
    c5ea:	10 e0       	ldi	r17, 0x00	; 0
    c5ec:	a7 01       	movw	r20, r14
    c5ee:	96 01       	movw	r18, r12
    c5f0:	b5 01       	movw	r22, r10
    c5f2:	81 81       	ldd	r24, Z+1	; 0x01
    c5f4:	8a d6       	rcall	.+3348   	; 0xd30a <disk_read>
    c5f6:	89 2b       	or	r24, r25
    c5f8:	09 f0       	breq	.+2      	; 0xc5fc <f_lseek+0x54e>
    c5fa:	bf cd       	rjmp	.-1154   	; 0xc17a <f_lseek+0xcc>
    c5fc:	f1 01       	movw	r30, r2
    c5fe:	c0 8e       	std	Z+24, r12	; 0x18
    c600:	d1 8e       	std	Z+25, r13	; 0x19
    c602:	e2 8e       	std	Z+26, r14	; 0x1a
    c604:	f3 8e       	std	Z+27, r15	; 0x1b
    c606:	80 e0       	ldi	r24, 0x00	; 0
    c608:	bb cd       	rjmp	.-1162   	; 0xc180 <f_lseek+0xd2>
    c60a:	81 e1       	ldi	r24, 0x11	; 17
    c60c:	b9 cd       	rjmp	.-1166   	; 0xc180 <f_lseek+0xd2>
    c60e:	80 e0       	ldi	r24, 0x00	; 0
    c610:	90 e0       	ldi	r25, 0x00	; 0
    c612:	dc 01       	movw	r26, r24
    c614:	c1 2c       	mov	r12, r1
    c616:	d1 2c       	mov	r13, r1
    c618:	76 01       	movw	r14, r12
    c61a:	bf cf       	rjmp	.-130    	; 0xc59a <f_lseek+0x4ec>
    c61c:	2a 96       	adiw	r28, 0x0a	; 10
    c61e:	e2 e1       	ldi	r30, 0x12	; 18
    c620:	0c 94 d7 e6 	jmp	0x1cdae	; 0x1cdae <__epilogue_restores__>

0000c624 <f_opendir>:
    c624:	a4 e0       	ldi	r26, 0x04	; 4
    c626:	b0 e0       	ldi	r27, 0x00	; 0
    c628:	e8 e1       	ldi	r30, 0x18	; 24
    c62a:	f3 e6       	ldi	r31, 0x63	; 99
    c62c:	0c 94 c5 e6 	jmp	0x1cd8a	; 0x1cd8a <__prologue_saves__+0x14>
    c630:	7c 83       	std	Y+4, r23	; 0x04
    c632:	6b 83       	std	Y+3, r22	; 0x03
    c634:	00 97       	sbiw	r24, 0x00	; 0
    c636:	09 f4       	brne	.+2      	; 0xc63a <f_opendir+0x16>
    c638:	48 c0       	rjmp	.+144    	; 0xc6ca <f_opendir+0xa6>
    c63a:	8c 01       	movw	r16, r24
    c63c:	40 e0       	ldi	r20, 0x00	; 0
    c63e:	be 01       	movw	r22, r28
    c640:	6f 5f       	subi	r22, 0xFF	; 255
    c642:	7f 4f       	sbci	r23, 0xFF	; 255
    c644:	ce 01       	movw	r24, r28
    c646:	03 96       	adiw	r24, 0x03	; 3
    c648:	0e 94 ce 4b 	call	0x979c	; 0x979c <mount_volume>
    c64c:	7c 01       	movw	r14, r24
    c64e:	89 2b       	or	r24, r25
    c650:	b9 f5       	brne	.+110    	; 0xc6c0 <f_opendir+0x9c>
    c652:	89 81       	ldd	r24, Y+1	; 0x01
    c654:	9a 81       	ldd	r25, Y+2	; 0x02
    c656:	f8 01       	movw	r30, r16
    c658:	91 83       	std	Z+1, r25	; 0x01
    c65a:	80 83       	st	Z, r24
    c65c:	80 e0       	ldi	r24, 0x00	; 0
    c65e:	92 e0       	ldi	r25, 0x02	; 2
    c660:	98 d5       	rcall	.+2864   	; 0xd192 <ff_memalloc>
    c662:	6c 01       	movw	r12, r24
    c664:	00 97       	sbiw	r24, 0x00	; 0
    c666:	99 f1       	breq	.+102    	; 0xc6ce <f_opendir+0xaa>
    c668:	e9 81       	ldd	r30, Y+1	; 0x01
    c66a:	fa 81       	ldd	r31, Y+2	; 0x02
    c66c:	94 87       	std	Z+12, r25	; 0x0c
    c66e:	83 87       	std	Z+11, r24	; 0x0b
    c670:	6b 81       	ldd	r22, Y+3	; 0x03
    c672:	7c 81       	ldd	r23, Y+4	; 0x04
    c674:	c8 01       	movw	r24, r16
    c676:	0e 94 1b 57 	call	0xae36	; 0xae36 <follow_path>
    c67a:	7c 01       	movw	r14, r24
    c67c:	89 2b       	or	r24, r25
    c67e:	b9 f4       	brne	.+46     	; 0xc6ae <f_opendir+0x8a>
    c680:	f8 01       	movw	r30, r16
    c682:	87 a1       	ldd	r24, Z+39	; 0x27
    c684:	87 fd       	sbrc	r24, 7
    c686:	28 c0       	rjmp	.+80     	; 0xc6d8 <f_opendir+0xb4>
    c688:	84 81       	ldd	r24, Z+4	; 0x04
    c68a:	84 ff       	sbrs	r24, 4
    c68c:	0d c0       	rjmp	.+26     	; 0xc6a8 <f_opendir+0x84>
    c68e:	62 8d       	ldd	r22, Z+26	; 0x1a
    c690:	73 8d       	ldd	r23, Z+27	; 0x1b
    c692:	e9 81       	ldd	r30, Y+1	; 0x01
    c694:	fa 81       	ldd	r31, Y+2	; 0x02
    c696:	80 81       	ld	r24, Z
    c698:	0e 94 c4 49 	call	0x9388	; 0x9388 <ld_clust.isra.3>
    c69c:	f8 01       	movw	r30, r16
    c69e:	66 83       	std	Z+6, r22	; 0x06
    c6a0:	77 83       	std	Z+7, r23	; 0x07
    c6a2:	80 87       	std	Z+8, r24	; 0x08
    c6a4:	91 87       	std	Z+9, r25	; 0x09
    c6a6:	18 c0       	rjmp	.+48     	; 0xc6d8 <f_opendir+0xb4>
    c6a8:	95 e0       	ldi	r25, 0x05	; 5
    c6aa:	e9 2e       	mov	r14, r25
    c6ac:	f1 2c       	mov	r15, r1
    c6ae:	c6 01       	movw	r24, r12
    c6b0:	73 d5       	rcall	.+2790   	; 0xd198 <ff_memfree>
    c6b2:	f4 e0       	ldi	r31, 0x04	; 4
    c6b4:	ef 16       	cp	r14, r31
    c6b6:	f1 04       	cpc	r15, r1
    c6b8:	f1 f0       	breq	.+60     	; 0xc6f6 <f_opendir+0xd2>
    c6ba:	e1 14       	cp	r14, r1
    c6bc:	f1 04       	cpc	r15, r1
    c6be:	49 f0       	breq	.+18     	; 0xc6d2 <f_opendir+0xae>
    c6c0:	f8 01       	movw	r30, r16
    c6c2:	11 82       	std	Z+1, r1	; 0x01
    c6c4:	10 82       	st	Z, r1
    c6c6:	c7 01       	movw	r24, r14
    c6c8:	1a c0       	rjmp	.+52     	; 0xc6fe <f_opendir+0xda>
    c6ca:	89 e0       	ldi	r24, 0x09	; 9
    c6cc:	03 c0       	rjmp	.+6      	; 0xc6d4 <f_opendir+0xb0>
    c6ce:	81 e1       	ldi	r24, 0x11	; 17
    c6d0:	01 c0       	rjmp	.+2      	; 0xc6d4 <f_opendir+0xb0>
    c6d2:	80 e0       	ldi	r24, 0x00	; 0
    c6d4:	90 e0       	ldi	r25, 0x00	; 0
    c6d6:	13 c0       	rjmp	.+38     	; 0xc6fe <f_opendir+0xda>
    c6d8:	e9 81       	ldd	r30, Y+1	; 0x01
    c6da:	fa 81       	ldd	r31, Y+2	; 0x02
    c6dc:	85 81       	ldd	r24, Z+5	; 0x05
    c6de:	96 81       	ldd	r25, Z+6	; 0x06
    c6e0:	f8 01       	movw	r30, r16
    c6e2:	93 83       	std	Z+3, r25	; 0x03
    c6e4:	82 83       	std	Z+2, r24	; 0x02
    c6e6:	40 e0       	ldi	r20, 0x00	; 0
    c6e8:	50 e0       	ldi	r21, 0x00	; 0
    c6ea:	ba 01       	movw	r22, r20
    c6ec:	c8 01       	movw	r24, r16
    c6ee:	0e 94 d5 4f 	call	0x9faa	; 0x9faa <dir_sdi>
    c6f2:	7c 01       	movw	r14, r24
    c6f4:	dc cf       	rjmp	.-72     	; 0xc6ae <f_opendir+0x8a>
    c6f6:	85 e0       	ldi	r24, 0x05	; 5
    c6f8:	e8 2e       	mov	r14, r24
    c6fa:	f1 2c       	mov	r15, r1
    c6fc:	e1 cf       	rjmp	.-62     	; 0xc6c0 <f_opendir+0x9c>
    c6fe:	24 96       	adiw	r28, 0x04	; 4
    c700:	e8 e0       	ldi	r30, 0x08	; 8
    c702:	0c 94 e1 e6 	jmp	0x1cdc2	; 0x1cdc2 <__epilogue_restores__+0x14>

0000c706 <f_closedir>:
    c706:	a2 e0       	ldi	r26, 0x02	; 2
    c708:	b0 e0       	ldi	r27, 0x00	; 0
    c70a:	e9 e8       	ldi	r30, 0x89	; 137
    c70c:	f3 e6       	ldi	r31, 0x63	; 99
    c70e:	0c 94 c9 e6 	jmp	0x1cd92	; 0x1cd92 <__prologue_saves__+0x1c>
    c712:	8c 01       	movw	r16, r24
    c714:	be 01       	movw	r22, r28
    c716:	6f 5f       	subi	r22, 0xFF	; 255
    c718:	7f 4f       	sbci	r23, 0xFF	; 255
    c71a:	0e 94 63 48 	call	0x90c6	; 0x90c6 <validate>
    c71e:	00 97       	sbiw	r24, 0x00	; 0
    c720:	19 f4       	brne	.+6      	; 0xc728 <f_closedir+0x22>
    c722:	f8 01       	movw	r30, r16
    c724:	11 82       	std	Z+1, r1	; 0x01
    c726:	10 82       	st	Z, r1
    c728:	22 96       	adiw	r28, 0x02	; 2
    c72a:	e4 e0       	ldi	r30, 0x04	; 4
    c72c:	0c 94 e5 e6 	jmp	0x1cdca	; 0x1cdca <__epilogue_restores__+0x1c>

0000c730 <f_readdir>:
    c730:	a2 e0       	ldi	r26, 0x02	; 2
    c732:	b0 e0       	ldi	r27, 0x00	; 0
    c734:	ee e9       	ldi	r30, 0x9E	; 158
    c736:	f3 e6       	ldi	r31, 0x63	; 99
    c738:	0c 94 c3 e6 	jmp	0x1cd86	; 0x1cd86 <__prologue_saves__+0x10>
    c73c:	7c 01       	movw	r14, r24
    c73e:	5b 01       	movw	r10, r22
    c740:	be 01       	movw	r22, r28
    c742:	6f 5f       	subi	r22, 0xFF	; 255
    c744:	7f 4f       	sbci	r23, 0xFF	; 255
    c746:	0e 94 63 48 	call	0x90c6	; 0x90c6 <validate>
    c74a:	00 97       	sbiw	r24, 0x00	; 0
    c74c:	89 f5       	brne	.+98     	; 0xc7b0 <f_readdir+0x80>
    c74e:	a1 14       	cp	r10, r1
    c750:	b1 04       	cpc	r11, r1
    c752:	39 f4       	brne	.+14     	; 0xc762 <f_readdir+0x32>
    c754:	40 e0       	ldi	r20, 0x00	; 0
    c756:	50 e0       	ldi	r21, 0x00	; 0
    c758:	ba 01       	movw	r22, r20
    c75a:	c7 01       	movw	r24, r14
    c75c:	0e 94 d5 4f 	call	0x9faa	; 0x9faa <dir_sdi>
    c760:	27 c0       	rjmp	.+78     	; 0xc7b0 <f_readdir+0x80>
    c762:	80 e0       	ldi	r24, 0x00	; 0
    c764:	92 e0       	ldi	r25, 0x02	; 2
    c766:	15 d5       	rcall	.+2602   	; 0xd192 <ff_memalloc>
    c768:	6c 01       	movw	r12, r24
    c76a:	00 97       	sbiw	r24, 0x00	; 0
    c76c:	f9 f0       	breq	.+62     	; 0xc7ac <f_readdir+0x7c>
    c76e:	e9 81       	ldd	r30, Y+1	; 0x01
    c770:	fa 81       	ldd	r31, Y+2	; 0x02
    c772:	94 87       	std	Z+12, r25	; 0x0c
    c774:	83 87       	std	Z+11, r24	; 0x0b
    c776:	60 e0       	ldi	r22, 0x00	; 0
    c778:	70 e0       	ldi	r23, 0x00	; 0
    c77a:	c7 01       	movw	r24, r14
    c77c:	0e 94 6e 53 	call	0xa6dc	; 0xa6dc <dir_read>
    c780:	8c 01       	movw	r16, r24
    c782:	8b 7f       	andi	r24, 0xFB	; 251
    c784:	89 2b       	or	r24, r25
    c786:	71 f4       	brne	.+28     	; 0xc7a4 <f_readdir+0x74>
    c788:	b5 01       	movw	r22, r10
    c78a:	c7 01       	movw	r24, r14
    c78c:	0e 94 8f 48 	call	0x911e	; 0x911e <get_fileinfo>
    c790:	60 e0       	ldi	r22, 0x00	; 0
    c792:	70 e0       	ldi	r23, 0x00	; 0
    c794:	c7 01       	movw	r24, r14
    c796:	0e 94 4d 52 	call	0xa49a	; 0xa49a <dir_next>
    c79a:	8c 01       	movw	r16, r24
    c79c:	04 97       	sbiw	r24, 0x04	; 4
    c79e:	11 f4       	brne	.+4      	; 0xc7a4 <f_readdir+0x74>
    c7a0:	00 e0       	ldi	r16, 0x00	; 0
    c7a2:	10 e0       	ldi	r17, 0x00	; 0
    c7a4:	c6 01       	movw	r24, r12
    c7a6:	f8 d4       	rcall	.+2544   	; 0xd198 <ff_memfree>
    c7a8:	c8 01       	movw	r24, r16
    c7aa:	02 c0       	rjmp	.+4      	; 0xc7b0 <f_readdir+0x80>
    c7ac:	81 e1       	ldi	r24, 0x11	; 17
    c7ae:	90 e0       	ldi	r25, 0x00	; 0
    c7b0:	22 96       	adiw	r28, 0x02	; 2
    c7b2:	ea e0       	ldi	r30, 0x0A	; 10
    c7b4:	0c 94 df e6 	jmp	0x1cdbe	; 0x1cdbe <__epilogue_restores__+0x10>

0000c7b8 <f_stat>:
    c7b8:	a0 e3       	ldi	r26, 0x30	; 48
    c7ba:	b0 e0       	ldi	r27, 0x00	; 0
    c7bc:	e2 ee       	ldi	r30, 0xE2	; 226
    c7be:	f3 e6       	ldi	r31, 0x63	; 99
    c7c0:	0c 94 c5 e6 	jmp	0x1cd8a	; 0x1cd8a <__prologue_saves__+0x14>
    c7c4:	98 ab       	std	Y+48, r25	; 0x30
    c7c6:	8f a7       	std	Y+47, r24	; 0x2f
    c7c8:	6b 01       	movw	r12, r22
    c7ca:	40 e0       	ldi	r20, 0x00	; 0
    c7cc:	be 01       	movw	r22, r28
    c7ce:	6f 5f       	subi	r22, 0xFF	; 255
    c7d0:	7f 4f       	sbci	r23, 0xFF	; 255
    c7d2:	ce 01       	movw	r24, r28
    c7d4:	8f 96       	adiw	r24, 0x2f	; 47
    c7d6:	0e 94 ce 4b 	call	0x979c	; 0x979c <mount_volume>
    c7da:	00 97       	sbiw	r24, 0x00	; 0
    c7dc:	39 f5       	brne	.+78     	; 0xc82c <f_stat+0x74>
    c7de:	80 e0       	ldi	r24, 0x00	; 0
    c7e0:	92 e0       	ldi	r25, 0x02	; 2
    c7e2:	d7 d4       	rcall	.+2478   	; 0xd192 <ff_memalloc>
    c7e4:	7c 01       	movw	r14, r24
    c7e6:	00 97       	sbiw	r24, 0x00	; 0
    c7e8:	f9 f0       	breq	.+62     	; 0xc828 <f_stat+0x70>
    c7ea:	e9 81       	ldd	r30, Y+1	; 0x01
    c7ec:	fa 81       	ldd	r31, Y+2	; 0x02
    c7ee:	94 87       	std	Z+12, r25	; 0x0c
    c7f0:	83 87       	std	Z+11, r24	; 0x0b
    c7f2:	6f a5       	ldd	r22, Y+47	; 0x2f
    c7f4:	78 a9       	ldd	r23, Y+48	; 0x30
    c7f6:	ce 01       	movw	r24, r28
    c7f8:	01 96       	adiw	r24, 0x01	; 1
    c7fa:	0e 94 1b 57 	call	0xae36	; 0xae36 <follow_path>
    c7fe:	8c 01       	movw	r16, r24
    c800:	89 2b       	or	r24, r25
    c802:	71 f4       	brne	.+28     	; 0xc820 <f_stat+0x68>
    c804:	88 a5       	ldd	r24, Y+40	; 0x28
    c806:	87 fd       	sbrc	r24, 7
    c808:	09 c0       	rjmp	.+18     	; 0xc81c <f_stat+0x64>
    c80a:	c1 14       	cp	r12, r1
    c80c:	d1 04       	cpc	r13, r1
    c80e:	41 f0       	breq	.+16     	; 0xc820 <f_stat+0x68>
    c810:	b6 01       	movw	r22, r12
    c812:	ce 01       	movw	r24, r28
    c814:	01 96       	adiw	r24, 0x01	; 1
    c816:	0e 94 8f 48 	call	0x911e	; 0x911e <get_fileinfo>
    c81a:	02 c0       	rjmp	.+4      	; 0xc820 <f_stat+0x68>
    c81c:	06 e0       	ldi	r16, 0x06	; 6
    c81e:	10 e0       	ldi	r17, 0x00	; 0
    c820:	c7 01       	movw	r24, r14
    c822:	ba d4       	rcall	.+2420   	; 0xd198 <ff_memfree>
    c824:	c8 01       	movw	r24, r16
    c826:	02 c0       	rjmp	.+4      	; 0xc82c <f_stat+0x74>
    c828:	81 e1       	ldi	r24, 0x11	; 17
    c82a:	90 e0       	ldi	r25, 0x00	; 0
    c82c:	e0 96       	adiw	r28, 0x30	; 48
    c82e:	e8 e0       	ldi	r30, 0x08	; 8
    c830:	0c 94 e1 e6 	jmp	0x1cdc2	; 0x1cdc2 <__epilogue_restores__+0x14>

0000c834 <f_getfree>:
    c834:	aa e0       	ldi	r26, 0x0A	; 10
    c836:	b0 e0       	ldi	r27, 0x00	; 0
    c838:	e0 e2       	ldi	r30, 0x20	; 32
    c83a:	f4 e6       	ldi	r31, 0x64	; 100
    c83c:	0c 94 bb e6 	jmp	0x1cd76	; 0x1cd76 <__prologue_saves__>
    c840:	9c 83       	std	Y+4, r25	; 0x04
    c842:	8b 83       	std	Y+3, r24	; 0x03
    c844:	7e 83       	std	Y+6, r23	; 0x06
    c846:	6d 83       	std	Y+5, r22	; 0x05
    c848:	7a 01       	movw	r14, r20
    c84a:	40 e0       	ldi	r20, 0x00	; 0
    c84c:	be 01       	movw	r22, r28
    c84e:	6f 5f       	subi	r22, 0xFF	; 255
    c850:	7f 4f       	sbci	r23, 0xFF	; 255
    c852:	ce 01       	movw	r24, r28
    c854:	03 96       	adiw	r24, 0x03	; 3
    c856:	0e 94 ce 4b 	call	0x979c	; 0x979c <mount_volume>
    c85a:	8c 01       	movw	r16, r24
    c85c:	89 2b       	or	r24, r25
    c85e:	09 f0       	breq	.+2      	; 0xc862 <f_getfree+0x2e>
    c860:	c4 c0       	rjmp	.+392    	; 0xc9ea <f_getfree+0x1b6>
    c862:	69 80       	ldd	r6, Y+1	; 0x01
    c864:	7a 80       	ldd	r7, Y+2	; 0x02
    c866:	d7 01       	movw	r26, r14
    c868:	6d 92       	st	X+, r6
    c86a:	7c 92       	st	X, r7
    c86c:	f3 01       	movw	r30, r6
    c86e:	81 89       	ldd	r24, Z+17	; 0x11
    c870:	92 89       	ldd	r25, Z+18	; 0x12
    c872:	a3 89       	ldd	r26, Z+19	; 0x13
    c874:	b4 89       	ldd	r27, Z+20	; 0x14
    c876:	81 8c       	ldd	r8, Z+25	; 0x19
    c878:	92 8c       	ldd	r9, Z+26	; 0x1a
    c87a:	a3 8c       	ldd	r10, Z+27	; 0x1b
    c87c:	b4 8c       	ldd	r11, Z+28	; 0x1c
    c87e:	b5 01       	movw	r22, r10
    c880:	a4 01       	movw	r20, r8
    c882:	42 50       	subi	r20, 0x02	; 2
    c884:	51 09       	sbc	r21, r1
    c886:	61 09       	sbc	r22, r1
    c888:	71 09       	sbc	r23, r1
    c88a:	48 17       	cp	r20, r24
    c88c:	59 07       	cpc	r21, r25
    c88e:	6a 07       	cpc	r22, r26
    c890:	7b 07       	cpc	r23, r27
    c892:	38 f0       	brcs	.+14     	; 0xc8a2 <f_getfree+0x6e>
    c894:	ed 81       	ldd	r30, Y+5	; 0x05
    c896:	fe 81       	ldd	r31, Y+6	; 0x06
    c898:	80 83       	st	Z, r24
    c89a:	91 83       	std	Z+1, r25	; 0x01
    c89c:	a2 83       	std	Z+2, r26	; 0x02
    c89e:	b3 83       	std	Z+3, r27	; 0x03
    c8a0:	a4 c0       	rjmp	.+328    	; 0xc9ea <f_getfree+0x1b6>
    c8a2:	80 81       	ld	r24, Z
    c8a4:	81 30       	cpi	r24, 0x01	; 1
    c8a6:	a1 f5       	brne	.+104    	; 0xc910 <f_getfree+0xdc>
    c8a8:	82 e0       	ldi	r24, 0x02	; 2
    c8aa:	88 2e       	mov	r8, r24
    c8ac:	91 2c       	mov	r9, r1
    c8ae:	a1 2c       	mov	r10, r1
    c8b0:	b1 2c       	mov	r11, r1
    c8b2:	c1 2c       	mov	r12, r1
    c8b4:	d1 2c       	mov	r13, r1
    c8b6:	76 01       	movw	r14, r12
    c8b8:	b5 01       	movw	r22, r10
    c8ba:	a4 01       	movw	r20, r8
    c8bc:	c3 01       	movw	r24, r6
    c8be:	0e 94 21 4f 	call	0x9e42	; 0x9e42 <get_fat.isra.9>
    c8c2:	6f 3f       	cpi	r22, 0xFF	; 255
    c8c4:	bf ef       	ldi	r27, 0xFF	; 255
    c8c6:	7b 07       	cpc	r23, r27
    c8c8:	8b 07       	cpc	r24, r27
    c8ca:	9b 07       	cpc	r25, r27
    c8cc:	09 f4       	brne	.+2      	; 0xc8d0 <f_getfree+0x9c>
    c8ce:	76 c0       	rjmp	.+236    	; 0xc9bc <f_getfree+0x188>
    c8d0:	61 30       	cpi	r22, 0x01	; 1
    c8d2:	71 05       	cpc	r23, r1
    c8d4:	81 05       	cpc	r24, r1
    c8d6:	91 05       	cpc	r25, r1
    c8d8:	09 f4       	brne	.+2      	; 0xc8dc <f_getfree+0xa8>
    c8da:	73 c0       	rjmp	.+230    	; 0xc9c2 <f_getfree+0x18e>
    c8dc:	67 2b       	or	r22, r23
    c8de:	68 2b       	or	r22, r24
    c8e0:	69 2b       	or	r22, r25
    c8e2:	29 f4       	brne	.+10     	; 0xc8ee <f_getfree+0xba>
    c8e4:	ef ef       	ldi	r30, 0xFF	; 255
    c8e6:	ce 1a       	sub	r12, r30
    c8e8:	de 0a       	sbc	r13, r30
    c8ea:	ee 0a       	sbc	r14, r30
    c8ec:	fe 0a       	sbc	r15, r30
    c8ee:	ff ef       	ldi	r31, 0xFF	; 255
    c8f0:	8f 1a       	sub	r8, r31
    c8f2:	9f 0a       	sbc	r9, r31
    c8f4:	af 0a       	sbc	r10, r31
    c8f6:	bf 0a       	sbc	r11, r31
    c8f8:	e9 81       	ldd	r30, Y+1	; 0x01
    c8fa:	fa 81       	ldd	r31, Y+2	; 0x02
    c8fc:	81 8d       	ldd	r24, Z+25	; 0x19
    c8fe:	92 8d       	ldd	r25, Z+26	; 0x1a
    c900:	a3 8d       	ldd	r26, Z+27	; 0x1b
    c902:	b4 8d       	ldd	r27, Z+28	; 0x1c
    c904:	88 16       	cp	r8, r24
    c906:	99 06       	cpc	r9, r25
    c908:	aa 06       	cpc	r10, r26
    c90a:	bb 06       	cpc	r11, r27
    c90c:	a8 f2       	brcs	.-86     	; 0xc8b8 <f_getfree+0x84>
    c90e:	5d c0       	rjmp	.+186    	; 0xc9ca <f_getfree+0x196>
    c910:	f3 01       	movw	r30, r6
    c912:	45 a0       	ldd	r4, Z+37	; 0x25
    c914:	56 a0       	ldd	r5, Z+38	; 0x26
    c916:	67 a0       	ldd	r6, Z+39	; 0x27
    c918:	70 a4       	ldd	r7, Z+40	; 0x28
    c91a:	21 2c       	mov	r2, r1
    c91c:	31 2c       	mov	r3, r1
    c91e:	c1 2c       	mov	r12, r1
    c920:	d1 2c       	mov	r13, r1
    c922:	76 01       	movw	r14, r12
    c924:	21 14       	cp	r2, r1
    c926:	31 04       	cpc	r3, r1
    c928:	b1 f4       	brne	.+44     	; 0xc956 <f_getfree+0x122>
    c92a:	d3 01       	movw	r26, r6
    c92c:	c2 01       	movw	r24, r4
    c92e:	01 96       	adiw	r24, 0x01	; 1
    c930:	a1 1d       	adc	r26, r1
    c932:	b1 1d       	adc	r27, r1
    c934:	8f 83       	std	Y+7, r24	; 0x07
    c936:	98 87       	std	Y+8, r25	; 0x08
    c938:	a9 87       	std	Y+9, r26	; 0x09
    c93a:	ba 87       	std	Y+10, r27	; 0x0a
    c93c:	b3 01       	movw	r22, r6
    c93e:	a2 01       	movw	r20, r4
    c940:	89 81       	ldd	r24, Y+1	; 0x01
    c942:	9a 81       	ldd	r25, Y+2	; 0x02
    c944:	0e 94 53 4b 	call	0x96a6	; 0x96a6 <move_window>
    c948:	00 97       	sbiw	r24, 0x00	; 0
    c94a:	09 f0       	breq	.+2      	; 0xc94e <f_getfree+0x11a>
    c94c:	3d c0       	rjmp	.+122    	; 0xc9c8 <f_getfree+0x194>
    c94e:	4f 80       	ldd	r4, Y+7	; 0x07
    c950:	58 84       	ldd	r5, Y+8	; 0x08
    c952:	69 84       	ldd	r6, Y+9	; 0x09
    c954:	7a 84       	ldd	r7, Y+10	; 0x0a
    c956:	e9 81       	ldd	r30, Y+1	; 0x01
    c958:	fa 81       	ldd	r31, Y+2	; 0x02
    c95a:	80 81       	ld	r24, Z
    c95c:	82 30       	cpi	r24, 0x02	; 2
    c95e:	79 f4       	brne	.+30     	; 0xc97e <f_getfree+0x14a>
    c960:	e2 0d       	add	r30, r2
    c962:	f3 1d       	adc	r31, r3
    c964:	85 a9       	ldd	r24, Z+53	; 0x35
    c966:	96 a9       	ldd	r25, Z+54	; 0x36
    c968:	89 2b       	or	r24, r25
    c96a:	29 f4       	brne	.+10     	; 0xc976 <f_getfree+0x142>
    c96c:	9f ef       	ldi	r25, 0xFF	; 255
    c96e:	c9 1a       	sub	r12, r25
    c970:	d9 0a       	sbc	r13, r25
    c972:	e9 0a       	sbc	r14, r25
    c974:	f9 0a       	sbc	r15, r25
    c976:	a2 e0       	ldi	r26, 0x02	; 2
    c978:	2a 0e       	add	r2, r26
    c97a:	31 1c       	adc	r3, r1
    c97c:	15 c0       	rjmp	.+42     	; 0xc9a8 <f_getfree+0x174>
    c97e:	cf 01       	movw	r24, r30
    c980:	c5 96       	adiw	r24, 0x35	; 53
    c982:	82 0d       	add	r24, r2
    c984:	93 1d       	adc	r25, r3
    c986:	0e 94 91 47 	call	0x8f22	; 0x8f22 <ld_dword>
    c98a:	dc 01       	movw	r26, r24
    c98c:	cb 01       	movw	r24, r22
    c98e:	bf 70       	andi	r27, 0x0F	; 15
    c990:	89 2b       	or	r24, r25
    c992:	8a 2b       	or	r24, r26
    c994:	8b 2b       	or	r24, r27
    c996:	29 f4       	brne	.+10     	; 0xc9a2 <f_getfree+0x16e>
    c998:	bf ef       	ldi	r27, 0xFF	; 255
    c99a:	cb 1a       	sub	r12, r27
    c99c:	db 0a       	sbc	r13, r27
    c99e:	eb 0a       	sbc	r14, r27
    c9a0:	fb 0a       	sbc	r15, r27
    c9a2:	e4 e0       	ldi	r30, 0x04	; 4
    c9a4:	2e 0e       	add	r2, r30
    c9a6:	31 1c       	adc	r3, r1
    c9a8:	f1 e0       	ldi	r31, 0x01	; 1
    c9aa:	3f 22       	and	r3, r31
    c9ac:	21 e0       	ldi	r18, 0x01	; 1
    c9ae:	82 1a       	sub	r8, r18
    c9b0:	91 08       	sbc	r9, r1
    c9b2:	a1 08       	sbc	r10, r1
    c9b4:	b1 08       	sbc	r11, r1
    c9b6:	09 f0       	breq	.+2      	; 0xc9ba <f_getfree+0x186>
    c9b8:	b5 cf       	rjmp	.-150    	; 0xc924 <f_getfree+0xf0>
    c9ba:	07 c0       	rjmp	.+14     	; 0xc9ca <f_getfree+0x196>
    c9bc:	01 e0       	ldi	r16, 0x01	; 1
    c9be:	10 e0       	ldi	r17, 0x00	; 0
    c9c0:	04 c0       	rjmp	.+8      	; 0xc9ca <f_getfree+0x196>
    c9c2:	02 e0       	ldi	r16, 0x02	; 2
    c9c4:	10 e0       	ldi	r17, 0x00	; 0
    c9c6:	01 c0       	rjmp	.+2      	; 0xc9ca <f_getfree+0x196>
    c9c8:	8c 01       	movw	r16, r24
    c9ca:	ad 81       	ldd	r26, Y+5	; 0x05
    c9cc:	be 81       	ldd	r27, Y+6	; 0x06
    c9ce:	cd 92       	st	X+, r12
    c9d0:	dd 92       	st	X+, r13
    c9d2:	ed 92       	st	X+, r14
    c9d4:	fc 92       	st	X, r15
    c9d6:	13 97       	sbiw	r26, 0x03	; 3
    c9d8:	e9 81       	ldd	r30, Y+1	; 0x01
    c9da:	fa 81       	ldd	r31, Y+2	; 0x02
    c9dc:	c1 8a       	std	Z+17, r12	; 0x11
    c9de:	d2 8a       	std	Z+18, r13	; 0x12
    c9e0:	e3 8a       	std	Z+19, r14	; 0x13
    c9e2:	f4 8a       	std	Z+20, r15	; 0x14
    c9e4:	84 81       	ldd	r24, Z+4	; 0x04
    c9e6:	81 60       	ori	r24, 0x01	; 1
    c9e8:	84 83       	std	Z+4, r24	; 0x04
    c9ea:	c8 01       	movw	r24, r16
    c9ec:	2a 96       	adiw	r28, 0x0a	; 10
    c9ee:	e2 e1       	ldi	r30, 0x12	; 18
    c9f0:	0c 94 d7 e6 	jmp	0x1cdae	; 0x1cdae <__epilogue_restores__>

0000c9f4 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
    c9f4:	a0 e6       	ldi	r26, 0x60	; 96
    c9f6:	b0 e0       	ldi	r27, 0x00	; 0
    c9f8:	e0 e0       	ldi	r30, 0x00	; 0
    c9fa:	f5 e6       	ldi	r31, 0x65	; 101
    c9fc:	0c 94 c2 e6 	jmp	0x1cd84	; 0x1cd84 <__prologue_saves__+0xe>
    ca00:	a1 96       	adiw	r28, 0x21	; 33
    ca02:	9f af       	std	Y+63, r25	; 0x3f
    ca04:	8e af       	std	Y+62, r24	; 0x3e
    ca06:	a1 97       	sbiw	r28, 0x21	; 33
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
    ca08:	42 e0       	ldi	r20, 0x02	; 2
    ca0a:	be 01       	movw	r22, r28
    ca0c:	63 5a       	subi	r22, 0xA3	; 163
    ca0e:	7f 4f       	sbci	r23, 0xFF	; 255
    ca10:	ce 01       	movw	r24, r28
    ca12:	81 5a       	subi	r24, 0xA1	; 161
    ca14:	9f 4f       	sbci	r25, 0xFF	; 255
    ca16:	0e 94 ce 4b 	call	0x979c	; 0x979c <mount_volume>
	if (res == FR_OK) {
    ca1a:	00 97       	sbiw	r24, 0x00	; 0
    ca1c:	09 f0       	breq	.+2      	; 0xca20 <f_unlink+0x2c>
    ca1e:	8c c0       	rjmp	.+280    	; 0xcb38 <f_unlink+0x144>
		dj.obj.fs = fs;
    ca20:	6f 96       	adiw	r28, 0x1f	; 31
    ca22:	8e ad       	ldd	r24, Y+62	; 0x3e
    ca24:	9f ad       	ldd	r25, Y+63	; 0x3f
    ca26:	6f 97       	sbiw	r28, 0x1f	; 31
    ca28:	98 ab       	std	Y+48, r25	; 0x30
    ca2a:	8f a7       	std	Y+47, r24	; 0x2f
		INIT_NAMBUF(fs);
    ca2c:	80 e0       	ldi	r24, 0x00	; 0
    ca2e:	92 e0       	ldi	r25, 0x02	; 2
    ca30:	b0 d3       	rcall	.+1888   	; 0xd192 <ff_memalloc>
    ca32:	5c 01       	movw	r10, r24
    ca34:	00 97       	sbiw	r24, 0x00	; 0
    ca36:	09 f4       	brne	.+2      	; 0xca3a <f_unlink+0x46>
    ca38:	49 c0       	rjmp	.+146    	; 0xcacc <f_unlink+0xd8>
    ca3a:	6f 96       	adiw	r28, 0x1f	; 31
    ca3c:	ee ad       	ldd	r30, Y+62	; 0x3e
    ca3e:	ff ad       	ldd	r31, Y+63	; 0x3f
    ca40:	6f 97       	sbiw	r28, 0x1f	; 31
    ca42:	94 87       	std	Z+12, r25	; 0x0c
    ca44:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);		/* Follow the file path */
    ca46:	a1 96       	adiw	r28, 0x21	; 33
    ca48:	6e ad       	ldd	r22, Y+62	; 0x3e
    ca4a:	7f ad       	ldd	r23, Y+63	; 0x3f
    ca4c:	a1 97       	sbiw	r28, 0x21	; 33
    ca4e:	ce 01       	movw	r24, r28
    ca50:	8f 96       	adiw	r24, 0x2f	; 47
    ca52:	0e 94 1b 57 	call	0xae36	; 0xae36 <follow_path>
    ca56:	8c 01       	movw	r16, r24
		if (FF_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
    ca58:	89 2b       	or	r24, r25
    ca5a:	a1 f5       	brne	.+104    	; 0xcac4 <f_unlink+0xd0>
    ca5c:	67 96       	adiw	r28, 0x17	; 23
    ca5e:	8f ad       	ldd	r24, Y+63	; 0x3f
    ca60:	67 97       	sbiw	r28, 0x17	; 23
    ca62:	85 fd       	sbrc	r24, 5
    ca64:	36 c0       	rjmp	.+108    	; 0xcad2 <f_unlink+0xde>
		}
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
    ca66:	87 fd       	sbrc	r24, 7
    ca68:	34 c0       	rjmp	.+104    	; 0xcad2 <f_unlink+0xde>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
			} else {
				if (dj.obj.attr & AM_RDO) {
    ca6a:	9b a8       	ldd	r9, Y+51	; 0x33
    ca6c:	90 fc       	sbrc	r9, 0
    ca6e:	40 c0       	rjmp	.+128    	; 0xcaf0 <f_unlink+0xfc>
					init_alloc_info(fs, &obj);
					dclst = obj.sclust;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
    ca70:	6f 96       	adiw	r28, 0x1f	; 31
    ca72:	0e ad       	ldd	r16, Y+62	; 0x3e
    ca74:	1f ad       	ldd	r17, Y+63	; 0x3f
    ca76:	6f 97       	sbiw	r28, 0x1f	; 31
    ca78:	2b 96       	adiw	r28, 0x0b	; 11
    ca7a:	6e ad       	ldd	r22, Y+62	; 0x3e
    ca7c:	7f ad       	ldd	r23, Y+63	; 0x3f
    ca7e:	2b 97       	sbiw	r28, 0x0b	; 11
    ca80:	f8 01       	movw	r30, r16
    ca82:	80 81       	ld	r24, Z
    ca84:	0e 94 c4 49 	call	0x9388	; 0x9388 <ld_clust.isra.3>
    ca88:	6b 01       	movw	r12, r22
    ca8a:	7c 01       	movw	r14, r24
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
    ca8c:	94 fe       	sbrs	r9, 4
    ca8e:	33 c0       	rjmp	.+102    	; 0xcaf6 <f_unlink+0x102>
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
    ca90:	f8 01       	movw	r30, r16
    ca92:	85 89       	ldd	r24, Z+21	; 0x15
    ca94:	96 89       	ldd	r25, Z+22	; 0x16
    ca96:	a7 89       	ldd	r26, Z+23	; 0x17
    ca98:	b0 8d       	ldd	r27, Z+24	; 0x18
    ca9a:	c8 16       	cp	r12, r24
    ca9c:	d9 06       	cpc	r13, r25
    ca9e:	ea 06       	cpc	r14, r26
    caa0:	fb 06       	cpc	r15, r27
    caa2:	31 f1       	breq	.+76     	; 0xcaf0 <f_unlink+0xfc>
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;				/* Open the sub-directory */
    caa4:	1a 83       	std	Y+2, r17	; 0x02
    caa6:	09 83       	std	Y+1, r16	; 0x01
						sdj.obj.sclust = dclst;
    caa8:	cf 82       	std	Y+7, r12	; 0x07
    caaa:	d8 86       	std	Y+8, r13	; 0x08
    caac:	e9 86       	std	Y+9, r14	; 0x09
    caae:	fa 86       	std	Y+10, r15	; 0x0a
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
    cab0:	40 e0       	ldi	r20, 0x00	; 0
    cab2:	50 e0       	ldi	r21, 0x00	; 0
    cab4:	ba 01       	movw	r22, r20
    cab6:	ce 01       	movw	r24, r28
    cab8:	01 96       	adiw	r24, 0x01	; 1
    caba:	0e 94 d5 4f 	call	0x9faa	; 0x9faa <dir_sdi>
    cabe:	8c 01       	movw	r16, r24
						if (res == FR_OK) {
    cac0:	89 2b       	or	r24, r25
    cac2:	51 f0       	breq	.+20     	; 0xcad8 <f_unlink+0xe4>
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    cac4:	c5 01       	movw	r24, r10
    cac6:	68 d3       	rcall	.+1744   	; 0xd198 <ff_memfree>
    cac8:	c8 01       	movw	r24, r16
    caca:	36 c0       	rjmp	.+108    	; 0xcb38 <f_unlink+0x144>

	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    cacc:	81 e1       	ldi	r24, 0x11	; 17
    cace:	90 e0       	ldi	r25, 0x00	; 0
    cad0:	33 c0       	rjmp	.+102    	; 0xcb38 <f_unlink+0x144>
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
    cad2:	06 e0       	ldi	r16, 0x06	; 6
    cad4:	10 e0       	ldi	r17, 0x00	; 0
    cad6:	f6 cf       	rjmp	.-20     	; 0xcac4 <f_unlink+0xd0>
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
						if (res == FR_OK) {
							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
    cad8:	60 e0       	ldi	r22, 0x00	; 0
    cada:	70 e0       	ldi	r23, 0x00	; 0
    cadc:	ce 01       	movw	r24, r28
    cade:	01 96       	adiw	r24, 0x01	; 1
    cae0:	0e 94 6e 53 	call	0xa6dc	; 0xa6dc <dir_read>
    cae4:	8c 01       	movw	r16, r24
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
    cae6:	00 97       	sbiw	r24, 0x00	; 0
    cae8:	19 f0       	breq	.+6      	; 0xcaf0 <f_unlink+0xfc>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
    caea:	04 97       	sbiw	r24, 0x04	; 4
    caec:	21 f0       	breq	.+8      	; 0xcaf6 <f_unlink+0x102>
    caee:	ea cf       	rjmp	.-44     	; 0xcac4 <f_unlink+0xd0>
					dclst = ld_clust(fs, dj.dir);
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
						res = FR_DENIED;
    caf0:	07 e0       	ldi	r16, 0x07	; 7
    caf2:	10 e0       	ldi	r17, 0x00	; 0
    caf4:	e7 cf       	rjmp	.-50     	; 0xcac4 <f_unlink+0xd0>
						}
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);			/* Remove the directory entry */
    caf6:	ce 01       	movw	r24, r28
    caf8:	8f 96       	adiw	r24, 0x2f	; 47
    cafa:	0e 94 37 54 	call	0xa86e	; 0xa86e <dir_remove>
    cafe:	8c 01       	movw	r16, r24
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
    cb00:	89 2b       	or	r24, r25
    cb02:	01 f7       	brne	.-64     	; 0xcac4 <f_unlink+0xd0>
    cb04:	c1 14       	cp	r12, r1
    cb06:	d1 04       	cpc	r13, r1
    cb08:	e1 04       	cpc	r14, r1
    cb0a:	f1 04       	cpc	r15, r1
    cb0c:	41 f4       	brne	.+16     	; 0xcb1e <f_unlink+0x12a>
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    cb0e:	6f 96       	adiw	r28, 0x1f	; 31
    cb10:	8e ad       	ldd	r24, Y+62	; 0x3e
    cb12:	9f ad       	ldd	r25, Y+63	; 0x3f
    cb14:	6f 97       	sbiw	r28, 0x1f	; 31
    cb16:	0e 94 39 4a 	call	0x9472	; 0x9472 <sync_fs>
    cb1a:	8c 01       	movw	r16, r24
    cb1c:	d3 cf       	rjmp	.-90     	; 0xcac4 <f_unlink+0xd0>
				res = dir_remove(&dj);			/* Remove the directory entry */
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
#if FF_FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
    cb1e:	00 e0       	ldi	r16, 0x00	; 0
    cb20:	10 e0       	ldi	r17, 0x00	; 0
    cb22:	98 01       	movw	r18, r16
    cb24:	b7 01       	movw	r22, r14
    cb26:	a6 01       	movw	r20, r12
    cb28:	ce 01       	movw	r24, r28
    cb2a:	8f 96       	adiw	r24, 0x2f	; 47
    cb2c:	0e 94 bc 51 	call	0xa378	; 0xa378 <remove_chain>
    cb30:	8c 01       	movw	r16, r24
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    cb32:	89 2b       	or	r24, r25
    cb34:	39 f6       	brne	.-114    	; 0xcac4 <f_unlink+0xd0>
    cb36:	eb cf       	rjmp	.-42     	; 0xcb0e <f_unlink+0x11a>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cb38:	c0 5a       	subi	r28, 0xA0	; 160
    cb3a:	df 4f       	sbci	r29, 0xFF	; 255
    cb3c:	eb e0       	ldi	r30, 0x0B	; 11
    cb3e:	0c 94 de e6 	jmp	0x1cdbc	; 0x1cdbc <__epilogue_restores__+0xe>

0000cb42 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
    cb42:	a0 e4       	ldi	r26, 0x40	; 64
    cb44:	b0 e0       	ldi	r27, 0x00	; 0
    cb46:	e7 ea       	ldi	r30, 0xA7	; 167
    cb48:	f5 e6       	ldi	r31, 0x65	; 101
    cb4a:	0c 94 bd e6 	jmp	0x1cd7a	; 0x1cd7a <__prologue_saves__+0x4>
    cb4e:	21 96       	adiw	r28, 0x01	; 1
    cb50:	9f af       	std	Y+63, r25	; 0x3f
    cb52:	8e af       	std	Y+62, r24	; 0x3e
    cb54:	21 97       	sbiw	r28, 0x01	; 1
	FATFS *fs;
	DWORD dcl, pcl, tm;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    cb56:	42 e0       	ldi	r20, 0x02	; 2
    cb58:	be 01       	movw	r22, r28
    cb5a:	63 5c       	subi	r22, 0xC3	; 195
    cb5c:	7f 4f       	sbci	r23, 0xFF	; 255
    cb5e:	ce 01       	movw	r24, r28
    cb60:	cf 96       	adiw	r24, 0x3f	; 63
    cb62:	0e 94 ce 4b 	call	0x979c	; 0x979c <mount_volume>
	if (res == FR_OK) {
    cb66:	00 97       	sbiw	r24, 0x00	; 0
    cb68:	09 f0       	breq	.+2      	; 0xcb6c <f_mkdir+0x2a>
    cb6a:	d6 c0       	rjmp	.+428    	; 0xcd18 <f_mkdir+0x1d6>
		dj.obj.fs = fs;
    cb6c:	8d ad       	ldd	r24, Y+61	; 0x3d
    cb6e:	9e ad       	ldd	r25, Y+62	; 0x3e
    cb70:	9a 83       	std	Y+2, r25	; 0x02
    cb72:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    cb74:	80 e0       	ldi	r24, 0x00	; 0
    cb76:	92 e0       	ldi	r25, 0x02	; 2
    cb78:	0c d3       	rcall	.+1560   	; 0xd192 <ff_memalloc>
    cb7a:	6c 01       	movw	r12, r24
    cb7c:	00 97       	sbiw	r24, 0x00	; 0
    cb7e:	e9 f0       	breq	.+58     	; 0xcbba <f_mkdir+0x78>
    cb80:	ed ad       	ldd	r30, Y+61	; 0x3d
    cb82:	fe ad       	ldd	r31, Y+62	; 0x3e
    cb84:	94 87       	std	Z+12, r25	; 0x0c
    cb86:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);			/* Follow the file path */
    cb88:	21 96       	adiw	r28, 0x01	; 1
    cb8a:	6e ad       	ldd	r22, Y+62	; 0x3e
    cb8c:	7f ad       	ldd	r23, Y+63	; 0x3f
    cb8e:	21 97       	sbiw	r28, 0x01	; 1
    cb90:	ce 01       	movw	r24, r28
    cb92:	01 96       	adiw	r24, 0x01	; 1
    cb94:	0e 94 1b 57 	call	0xae36	; 0xae36 <follow_path>
    cb98:	7c 01       	movw	r14, r24
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    cb9a:	89 2b       	or	r24, r25
    cb9c:	89 f0       	breq	.+34     	; 0xcbc0 <f_mkdir+0x7e>
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
    cb9e:	84 e0       	ldi	r24, 0x04	; 4
    cba0:	e8 16       	cp	r14, r24
    cba2:	f1 04       	cpc	r15, r1
    cba4:	31 f4       	brne	.+12     	; 0xcbb2 <f_mkdir+0x70>
    cba6:	88 a5       	ldd	r24, Y+40	; 0x28
    cba8:	85 ff       	sbrs	r24, 5
    cbaa:	0e c0       	rjmp	.+28     	; 0xcbc8 <f_mkdir+0x86>
			res = FR_INVALID_NAME;
    cbac:	26 e0       	ldi	r18, 0x06	; 6
    cbae:	e2 2e       	mov	r14, r18
    cbb0:	f1 2c       	mov	r15, r1
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
			}
		}
		FREE_NAMBUF();
    cbb2:	c6 01       	movw	r24, r12
    cbb4:	f1 d2       	rcall	.+1506   	; 0xd198 <ff_memfree>
    cbb6:	c7 01       	movw	r24, r14
    cbb8:	af c0       	rjmp	.+350    	; 0xcd18 <f_mkdir+0x1d6>


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    cbba:	81 e1       	ldi	r24, 0x11	; 17
    cbbc:	90 e0       	ldi	r25, 0x00	; 0
    cbbe:	ac c0       	rjmp	.+344    	; 0xcd18 <f_mkdir+0x1d6>
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    cbc0:	38 e0       	ldi	r19, 0x08	; 8
    cbc2:	e3 2e       	mov	r14, r19
    cbc4:	f1 2c       	mov	r15, r1
    cbc6:	f5 cf       	rjmp	.-22     	; 0xcbb2 <f_mkdir+0x70>
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
    cbc8:	8d ad       	ldd	r24, Y+61	; 0x3d
    cbca:	9e ad       	ldd	r25, Y+62	; 0x3e
    cbcc:	98 ab       	std	Y+48, r25	; 0x30
    cbce:	8f a7       	std	Y+47, r24	; 0x2f
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
    cbd0:	40 e0       	ldi	r20, 0x00	; 0
    cbd2:	50 e0       	ldi	r21, 0x00	; 0
    cbd4:	ba 01       	movw	r22, r20
    cbd6:	ce 01       	movw	r24, r28
    cbd8:	8f 96       	adiw	r24, 0x2f	; 47
    cbda:	0e 94 96 50 	call	0xa12c	; 0xa12c <create_chain>
    cbde:	4b 01       	movw	r8, r22
    cbe0:	5c 01       	movw	r10, r24
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    cbe2:	67 2b       	or	r22, r23
    cbe4:	68 2b       	or	r22, r24
    cbe6:	69 2b       	or	r22, r25
    cbe8:	09 f1       	breq	.+66     	; 0xcc2c <f_mkdir+0xea>
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    cbea:	e1 e0       	ldi	r30, 0x01	; 1
    cbec:	8e 16       	cp	r8, r30
    cbee:	91 04       	cpc	r9, r1
    cbf0:	a1 04       	cpc	r10, r1
    cbf2:	b1 04       	cpc	r11, r1
    cbf4:	61 f0       	breq	.+24     	; 0xcc0e <f_mkdir+0xcc>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
    cbf6:	ff ef       	ldi	r31, 0xFF	; 255
    cbf8:	8f 16       	cp	r8, r31
    cbfa:	9f 06       	cpc	r9, r31
    cbfc:	af 06       	cpc	r10, r31
    cbfe:	bf 06       	cpc	r11, r31
    cc00:	d9 f4       	brne	.+54     	; 0xcc38 <f_mkdir+0xf6>
			tm = GET_FATTIME();
    cc02:	0e 94 4a 70 	call	0xe094	; 0xe094 <get_fattime>
    cc06:	ee 24       	eor	r14, r14
    cc08:	e3 94       	inc	r14
    cc0a:	f1 2c       	mov	r15, r1
    cc0c:	05 c0       	rjmp	.+10     	; 0xcc18 <f_mkdir+0xd6>
    cc0e:	0e 94 4a 70 	call	0xe094	; 0xe094 <get_fattime>
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    cc12:	92 e0       	ldi	r25, 0x02	; 2
    cc14:	e9 2e       	mov	r14, r25
    cc16:	f1 2c       	mov	r15, r1
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
    cc18:	00 e0       	ldi	r16, 0x00	; 0
    cc1a:	10 e0       	ldi	r17, 0x00	; 0
    cc1c:	98 01       	movw	r18, r16
    cc1e:	b5 01       	movw	r22, r10
    cc20:	a4 01       	movw	r20, r8
    cc22:	ce 01       	movw	r24, r28
    cc24:	8f 96       	adiw	r24, 0x2f	; 47
    cc26:	0e 94 bc 51 	call	0xa378	; 0xa378 <remove_chain>
    cc2a:	c3 cf       	rjmp	.-122    	; 0xcbb2 <f_mkdir+0x70>
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
			tm = GET_FATTIME();
    cc2c:	0e 94 4a 70 	call	0xe094	; 0xe094 <get_fattime>
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    cc30:	87 e0       	ldi	r24, 0x07	; 7
    cc32:	e8 2e       	mov	r14, r24
    cc34:	f1 2c       	mov	r15, r1
    cc36:	f0 cf       	rjmp	.-32     	; 0xcc18 <f_mkdir+0xd6>
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
			tm = GET_FATTIME();
    cc38:	0e 94 4a 70 	call	0xe094	; 0xe094 <get_fattime>
    cc3c:	2b 01       	movw	r4, r22
    cc3e:	3c 01       	movw	r6, r24
			if (res == FR_OK) {
				res = dir_clear(fs, dcl);		/* Clean up the new table */
    cc40:	b5 01       	movw	r22, r10
    cc42:	a4 01       	movw	r20, r8
    cc44:	8d ad       	ldd	r24, Y+61	; 0x3d
    cc46:	9e ad       	ldd	r25, Y+62	; 0x3e
    cc48:	0e 94 ab 4a 	call	0x9556	; 0x9556 <dir_clear>
    cc4c:	7c 01       	movw	r14, r24
				if (res == FR_OK) {
    cc4e:	89 2b       	or	r24, r25
    cc50:	19 f7       	brne	.-58     	; 0xcc18 <f_mkdir+0xd6>
					if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* Create dot entries (FAT only) */
						mem_set(fs->win + DIR_Name, ' ', 11);	/* Create "." entry */
    cc52:	8d ad       	ldd	r24, Y+61	; 0x3d
    cc54:	9e ad       	ldd	r25, Y+62	; 0x3e
    cc56:	4b e0       	ldi	r20, 0x0B	; 11
    cc58:	50 e0       	ldi	r21, 0x00	; 0
    cc5a:	60 e2       	ldi	r22, 0x20	; 32
    cc5c:	70 e0       	ldi	r23, 0x00	; 0
    cc5e:	c5 96       	adiw	r24, 0x35	; 53
    cc60:	0e 94 ac 47 	call	0x8f58	; 0x8f58 <mem_set>
						fs->win[DIR_Name] = '.';
    cc64:	8d ad       	ldd	r24, Y+61	; 0x3d
    cc66:	9e ad       	ldd	r25, Y+62	; 0x3e
    cc68:	1e e2       	ldi	r17, 0x2E	; 46
    cc6a:	fc 01       	movw	r30, r24
    cc6c:	15 ab       	std	Z+53, r17	; 0x35
						fs->win[DIR_Attr] = AM_DIR;
    cc6e:	e0 5c       	subi	r30, 0xC0	; 192
    cc70:	ff 4f       	sbci	r31, 0xFF	; 255
    cc72:	20 e1       	ldi	r18, 0x10	; 16
    cc74:	20 83       	st	Z, r18
						st_dword(fs->win + DIR_ModTime, tm);
    cc76:	b3 01       	movw	r22, r6
    cc78:	a2 01       	movw	r20, r4
    cc7a:	85 5b       	subi	r24, 0xB5	; 181
    cc7c:	9f 4f       	sbci	r25, 0xFF	; 255
    cc7e:	0e 94 a6 47 	call	0x8f4c	; 0x8f4c <st_dword>
						st_clust(fs, fs->win, dcl);
    cc82:	8d ad       	ldd	r24, Y+61	; 0x3d
    cc84:	9e ad       	ldd	r25, Y+62	; 0x3e
    cc86:	bc 01       	movw	r22, r24
    cc88:	6b 5c       	subi	r22, 0xCB	; 203
    cc8a:	7f 4f       	sbci	r23, 0xFF	; 255
    cc8c:	a5 01       	movw	r20, r10
    cc8e:	94 01       	movw	r18, r8
    cc90:	0e 94 d9 49 	call	0x93b2	; 0x93b2 <st_clust.isra.4>
						mem_cpy(fs->win + SZDIRE, fs->win, SZDIRE); /* Create ".." entry */
    cc94:	8d ad       	ldd	r24, Y+61	; 0x3d
    cc96:	9e ad       	ldd	r25, Y+62	; 0x3e
    cc98:	bc 01       	movw	r22, r24
    cc9a:	6b 5c       	subi	r22, 0xCB	; 203
    cc9c:	7f 4f       	sbci	r23, 0xFF	; 255
    cc9e:	40 e2       	ldi	r20, 0x20	; 32
    cca0:	50 e0       	ldi	r21, 0x00	; 0
    cca2:	8b 5a       	subi	r24, 0xAB	; 171
    cca4:	9f 4f       	sbci	r25, 0xFF	; 255
    cca6:	0e 94 b9 49 	call	0x9372	; 0x9372 <mem_cpy.part.0>
						fs->win[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
    ccaa:	8d ad       	ldd	r24, Y+61	; 0x3d
    ccac:	9e ad       	ldd	r25, Y+62	; 0x3e
    ccae:	fc 01       	movw	r30, r24
    ccb0:	ea 5a       	subi	r30, 0xAA	; 170
    ccb2:	ff 4f       	sbci	r31, 0xFF	; 255
    ccb4:	10 83       	st	Z, r17
						st_clust(fs, fs->win + SZDIRE, pcl);
    ccb6:	2f 81       	ldd	r18, Y+7	; 0x07
    ccb8:	38 85       	ldd	r19, Y+8	; 0x08
    ccba:	49 85       	ldd	r20, Y+9	; 0x09
    ccbc:	5a 85       	ldd	r21, Y+10	; 0x0a
    ccbe:	bc 01       	movw	r22, r24
    ccc0:	6b 5a       	subi	r22, 0xAB	; 171
    ccc2:	7f 4f       	sbci	r23, 0xFF	; 255
    ccc4:	0e 94 d9 49 	call	0x93b2	; 0x93b2 <st_clust.isra.4>
						fs->wflag = 1;
    ccc8:	ed ad       	ldd	r30, Y+61	; 0x3d
    ccca:	fe ad       	ldd	r31, Y+62	; 0x3e
    cccc:	81 e0       	ldi	r24, 0x01	; 1
    ccce:	83 83       	std	Z+3, r24	; 0x03
					}
					res = dir_register(&dj);	/* Register the object to the parent directoy */
    ccd0:	ce 01       	movw	r24, r28
    ccd2:	01 96       	adiw	r24, 0x01	; 1
    ccd4:	0e 94 8d 55 	call	0xab1a	; 0xab1a <dir_register>
    ccd8:	7c 01       	movw	r14, r24
				}
			}
			if (res == FR_OK) {
    ccda:	89 2b       	or	r24, r25
    ccdc:	09 f0       	breq	.+2      	; 0xcce0 <f_mkdir+0x19e>
    ccde:	9c cf       	rjmp	.-200    	; 0xcc18 <f_mkdir+0xd6>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					st_dword(dj.dir + DIR_ModTime, tm);	/* Created time */
    cce0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    cce2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    cce4:	b3 01       	movw	r22, r6
    cce6:	a2 01       	movw	r20, r4
    cce8:	46 96       	adiw	r24, 0x16	; 22
    ccea:	0e 94 a6 47 	call	0x8f4c	; 0x8f4c <st_dword>
					st_clust(fs, dj.dir, dcl);			/* Table start cluster */
    ccee:	6b 8d       	ldd	r22, Y+27	; 0x1b
    ccf0:	7c 8d       	ldd	r23, Y+28	; 0x1c
    ccf2:	a5 01       	movw	r20, r10
    ccf4:	94 01       	movw	r18, r8
    ccf6:	8d ad       	ldd	r24, Y+61	; 0x3d
    ccf8:	9e ad       	ldd	r25, Y+62	; 0x3e
    ccfa:	0e 94 d9 49 	call	0x93b2	; 0x93b2 <st_clust.isra.4>
					dj.dir[DIR_Attr] = AM_DIR;			/* Attribute */
    ccfe:	eb 8d       	ldd	r30, Y+27	; 0x1b
    cd00:	fc 8d       	ldd	r31, Y+28	; 0x1c
    cd02:	80 e1       	ldi	r24, 0x10	; 16
    cd04:	83 87       	std	Z+11, r24	; 0x0b
					fs->wflag = 1;
    cd06:	8d ad       	ldd	r24, Y+61	; 0x3d
    cd08:	9e ad       	ldd	r25, Y+62	; 0x3e
    cd0a:	21 e0       	ldi	r18, 0x01	; 1
    cd0c:	fc 01       	movw	r30, r24
    cd0e:	23 83       	std	Z+3, r18	; 0x03
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
    cd10:	0e 94 39 4a 	call	0x9472	; 0x9472 <sync_fs>
    cd14:	7c 01       	movw	r14, r24
    cd16:	4d cf       	rjmp	.-358    	; 0xcbb2 <f_mkdir+0x70>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cd18:	c0 5c       	subi	r28, 0xC0	; 192
    cd1a:	df 4f       	sbci	r29, 0xFF	; 255
    cd1c:	e0 e1       	ldi	r30, 0x10	; 16
    cd1e:	0c 94 d9 e6 	jmp	0x1cdb2	; 0x1cdb2 <__epilogue_restores__+0x4>

0000cd22 <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
    cd22:	a2 e8       	ldi	r26, 0x82	; 130
    cd24:	b0 e0       	ldi	r27, 0x00	; 0
    cd26:	e7 e9       	ldi	r30, 0x97	; 151
    cd28:	f6 e6       	ldi	r31, 0x66	; 102
    cd2a:	0c 94 c4 e6 	jmp	0x1cd88	; 0x1cd88 <__prologue_saves__+0x12>
    cd2e:	c1 58       	subi	r28, 0x81	; 129
    cd30:	df 4f       	sbci	r29, 0xFF	; 255
    cd32:	99 83       	std	Y+1, r25	; 0x01
    cd34:	88 83       	st	Y, r24
    cd36:	cf 57       	subi	r28, 0x7F	; 127
    cd38:	d0 40       	sbci	r29, 0x00	; 0
    cd3a:	cf 57       	subi	r28, 0x7F	; 127
    cd3c:	df 4f       	sbci	r29, 0xFF	; 255
    cd3e:	79 83       	std	Y+1, r23	; 0x01
    cd40:	68 83       	st	Y, r22
    cd42:	c1 58       	subi	r28, 0x81	; 129
    cd44:	d0 40       	sbci	r29, 0x00	; 0
	BYTE buf[FF_FS_EXFAT ? SZDIRE * 2 : SZDIRE], *dir;
	LBA_t sect;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
    cd46:	ce 01       	movw	r24, r28
    cd48:	8f 57       	subi	r24, 0x7F	; 127
    cd4a:	9f 4f       	sbci	r25, 0xFF	; 255
    cd4c:	0e 94 37 48 	call	0x906e	; 0x906e <get_ldnumber>
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
    cd50:	42 e0       	ldi	r20, 0x02	; 2
    cd52:	be 01       	movw	r22, r28
    cd54:	63 58       	subi	r22, 0x83	; 131
    cd56:	7f 4f       	sbci	r23, 0xFF	; 255
    cd58:	ce 01       	movw	r24, r28
    cd5a:	81 58       	subi	r24, 0x81	; 129
    cd5c:	9f 4f       	sbci	r25, 0xFF	; 255
    cd5e:	0e 94 ce 4b 	call	0x979c	; 0x979c <mount_volume>
	if (res == FR_OK) {
    cd62:	00 97       	sbiw	r24, 0x00	; 0
    cd64:	09 f0       	breq	.+2      	; 0xcd68 <f_rename+0x46>
    cd66:	ed c0       	rjmp	.+474    	; 0xcf42 <f_rename+0x220>
		djo.obj.fs = fs;
    cd68:	ef 96       	adiw	r28, 0x3f	; 63
    cd6a:	8e ad       	ldd	r24, Y+62	; 0x3e
    cd6c:	9f ad       	ldd	r25, Y+63	; 0x3f
    cd6e:	ef 97       	sbiw	r28, 0x3f	; 63
    cd70:	98 ab       	std	Y+48, r25	; 0x30
    cd72:	8f a7       	std	Y+47, r24	; 0x2f
		INIT_NAMBUF(fs);
    cd74:	80 e0       	ldi	r24, 0x00	; 0
    cd76:	92 e0       	ldi	r25, 0x02	; 2
    cd78:	0c d2       	rcall	.+1048   	; 0xd192 <ff_memalloc>
    cd7a:	6c 01       	movw	r12, r24
    cd7c:	00 97       	sbiw	r24, 0x00	; 0
    cd7e:	f1 f0       	breq	.+60     	; 0xcdbc <f_rename+0x9a>
    cd80:	ef 96       	adiw	r28, 0x3f	; 63
    cd82:	ee ad       	ldd	r30, Y+62	; 0x3e
    cd84:	ff ad       	ldd	r31, Y+63	; 0x3f
    cd86:	ef 97       	sbiw	r28, 0x3f	; 63
    cd88:	94 87       	std	Z+12, r25	; 0x0c
    cd8a:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&djo, path_old);		/* Check old object */
    cd8c:	c1 58       	subi	r28, 0x81	; 129
    cd8e:	df 4f       	sbci	r29, 0xFF	; 255
    cd90:	68 81       	ld	r22, Y
    cd92:	79 81       	ldd	r23, Y+1	; 0x01
    cd94:	cf 57       	subi	r28, 0x7F	; 127
    cd96:	d0 40       	sbci	r29, 0x00	; 0
    cd98:	ce 01       	movw	r24, r28
    cd9a:	8f 96       	adiw	r24, 0x2f	; 47
    cd9c:	0e 94 1b 57 	call	0xae36	; 0xae36 <follow_path>
    cda0:	8c 01       	movw	r16, r24
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
    cda2:	89 2b       	or	r24, r25
    cda4:	39 f4       	brne	.+14     	; 0xcdb4 <f_rename+0x92>
    cda6:	67 96       	adiw	r28, 0x17	; 23
    cda8:	8f ad       	ldd	r24, Y+63	; 0x3f
    cdaa:	67 97       	sbiw	r28, 0x17	; 23
    cdac:	80 7a       	andi	r24, 0xA0	; 160
    cdae:	49 f0       	breq	.+18     	; 0xcdc2 <f_rename+0xa0>
    cdb0:	06 e0       	ldi	r16, 0x06	; 6
    cdb2:	10 e0       	ldi	r17, 0x00	; 0
					res = sync_fs(fs);
				}
			}
/* End of the critical section */
		}
		FREE_NAMBUF();
    cdb4:	c6 01       	movw	r24, r12
    cdb6:	f0 d1       	rcall	.+992    	; 0xd198 <ff_memfree>
    cdb8:	c8 01       	movw	r24, r16
    cdba:	c3 c0       	rjmp	.+390    	; 0xcf42 <f_rename+0x220>

	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
	if (res == FR_OK) {
		djo.obj.fs = fs;
		INIT_NAMBUF(fs);
    cdbc:	81 e1       	ldi	r24, 0x11	; 17
    cdbe:	90 e0       	ldi	r25, 0x00	; 0
    cdc0:	c0 c0       	rjmp	.+384    	; 0xcf42 <f_rename+0x220>
    cdc2:	2b 96       	adiw	r28, 0x0b	; 11
    cdc4:	6e ad       	ldd	r22, Y+62	; 0x3e
    cdc6:	7f ad       	ldd	r23, Y+63	; 0x3f
    cdc8:	2b 97       	sbiw	r28, 0x0b	; 11
    cdca:	40 e2       	ldi	r20, 0x20	; 32
    cdcc:	50 e0       	ldi	r21, 0x00	; 0
    cdce:	ce 01       	movw	r24, r28
    cdd0:	83 5a       	subi	r24, 0xA3	; 163
    cdd2:	9f 4f       	sbci	r25, 0xFF	; 255
    cdd4:	0e 94 b9 49 	call	0x9372	; 0x9372 <mem_cpy.part.0>
    cdd8:	4e e2       	ldi	r20, 0x2E	; 46
    cdda:	50 e0       	ldi	r21, 0x00	; 0
    cddc:	be 01       	movw	r22, r28
    cdde:	61 5d       	subi	r22, 0xD1	; 209
    cde0:	7f 4f       	sbci	r23, 0xFF	; 255
    cde2:	ce 01       	movw	r24, r28
    cde4:	01 96       	adiw	r24, 0x01	; 1
    cde6:	0e 94 b9 49 	call	0x9372	; 0x9372 <mem_cpy.part.0>
			} else
#endif
			{	/* At FAT/FAT32 volume */
				mem_cpy(buf, djo.dir, SZDIRE);			/* Save directory entry of the object */
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
    cdea:	cf 57       	subi	r28, 0x7F	; 127
    cdec:	df 4f       	sbci	r29, 0xFF	; 255
    cdee:	68 81       	ld	r22, Y
    cdf0:	79 81       	ldd	r23, Y+1	; 0x01
    cdf2:	c1 58       	subi	r28, 0x81	; 129
    cdf4:	d0 40       	sbci	r29, 0x00	; 0
    cdf6:	ce 01       	movw	r24, r28
    cdf8:	01 96       	adiw	r24, 0x01	; 1
    cdfa:	0e 94 1b 57 	call	0xae36	; 0xae36 <follow_path>
    cdfe:	8c 01       	movw	r16, r24
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
    ce00:	89 2b       	or	r24, r25
    ce02:	f9 f4       	brne	.+62     	; 0xce42 <f_rename+0x120>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
    ce04:	4f 81       	ldd	r20, Y+7	; 0x07
    ce06:	58 85       	ldd	r21, Y+8	; 0x08
    ce08:	69 85       	ldd	r22, Y+9	; 0x09
    ce0a:	7a 85       	ldd	r23, Y+10	; 0x0a
    ce0c:	8d a9       	ldd	r24, Y+53	; 0x35
    ce0e:	9e a9       	ldd	r25, Y+54	; 0x36
    ce10:	af a9       	ldd	r26, Y+55	; 0x37
    ce12:	b8 ad       	ldd	r27, Y+56	; 0x38
    ce14:	48 17       	cp	r20, r24
    ce16:	59 07       	cpc	r21, r25
    ce18:	6a 07       	cpc	r22, r26
    ce1a:	7b 07       	cpc	r23, r27
    ce1c:	09 f0       	breq	.+2      	; 0xce20 <f_rename+0xfe>
    ce1e:	8b c0       	rjmp	.+278    	; 0xcf36 <f_rename+0x214>
    ce20:	4f 85       	ldd	r20, Y+15	; 0x0f
    ce22:	58 89       	ldd	r21, Y+16	; 0x10
    ce24:	69 89       	ldd	r22, Y+17	; 0x11
    ce26:	7a 89       	ldd	r23, Y+18	; 0x12
    ce28:	21 96       	adiw	r28, 0x01	; 1
    ce2a:	8c ad       	ldd	r24, Y+60	; 0x3c
    ce2c:	9d ad       	ldd	r25, Y+61	; 0x3d
    ce2e:	ae ad       	ldd	r26, Y+62	; 0x3e
    ce30:	bf ad       	ldd	r27, Y+63	; 0x3f
    ce32:	21 97       	sbiw	r28, 0x01	; 1
    ce34:	48 17       	cp	r20, r24
    ce36:	59 07       	cpc	r21, r25
    ce38:	6a 07       	cpc	r22, r26
    ce3a:	7b 07       	cpc	r23, r27
    ce3c:	09 f0       	breq	.+2      	; 0xce40 <f_rename+0x11e>
    ce3e:	7b c0       	rjmp	.+246    	; 0xcf36 <f_rename+0x214>
    ce40:	04 c0       	rjmp	.+8      	; 0xce4a <f_rename+0x128>
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
    ce42:	04 30       	cpi	r16, 0x04	; 4
    ce44:	11 05       	cpc	r17, r1
    ce46:	09 f0       	breq	.+2      	; 0xce4a <f_rename+0x128>
    ce48:	b5 cf       	rjmp	.-150    	; 0xcdb4 <f_rename+0x92>
					res = dir_register(&djn);			/* Register the new entry */
    ce4a:	ce 01       	movw	r24, r28
    ce4c:	01 96       	adiw	r24, 0x01	; 1
    ce4e:	0e 94 8d 55 	call	0xab1a	; 0xab1a <dir_register>
    ce52:	8c 01       	movw	r16, r24
					if (res == FR_OK) {
    ce54:	89 2b       	or	r24, r25
    ce56:	09 f0       	breq	.+2      	; 0xce5a <f_rename+0x138>
    ce58:	ad cf       	rjmp	.-166    	; 0xcdb4 <f_rename+0x92>
						dir = djn.dir;					/* Copy directory entry of the object except name */
    ce5a:	0b 8d       	ldd	r16, Y+27	; 0x1b
    ce5c:	1c 8d       	ldd	r17, Y+28	; 0x1c
    ce5e:	6d e5       	ldi	r22, 0x5D	; 93
    ce60:	70 e0       	ldi	r23, 0x00	; 0
    ce62:	6c 0f       	add	r22, r28
    ce64:	7d 1f       	adc	r23, r29
    ce66:	63 5f       	subi	r22, 0xF3	; 243
    ce68:	7f 4f       	sbci	r23, 0xFF	; 255
    ce6a:	43 e1       	ldi	r20, 0x13	; 19
    ce6c:	50 e0       	ldi	r21, 0x00	; 0
    ce6e:	c8 01       	movw	r24, r16
    ce70:	0d 96       	adiw	r24, 0x0d	; 13
    ce72:	0e 94 b9 49 	call	0x9372	; 0x9372 <mem_cpy.part.0>
						mem_cpy(dir + 13, buf + 13, SZDIRE - 13);
						dir[DIR_Attr] = buf[DIR_Attr];
    ce76:	a9 96       	adiw	r28, 0x29	; 41
    ce78:	8f ad       	ldd	r24, Y+63	; 0x3f
    ce7a:	a9 97       	sbiw	r28, 0x29	; 41
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
    ce7c:	84 ff       	sbrs	r24, 4
    ce7e:	80 62       	ori	r24, 0x20	; 32
    ce80:	f8 01       	movw	r30, r16
    ce82:	83 87       	std	Z+11, r24	; 0x0b
						fs->wflag = 1;
    ce84:	ef 96       	adiw	r28, 0x3f	; 63
    ce86:	ee ac       	ldd	r14, Y+62	; 0x3e
    ce88:	ff ac       	ldd	r15, Y+63	; 0x3f
    ce8a:	ef 97       	sbiw	r28, 0x3f	; 63
    ce8c:	bb 24       	eor	r11, r11
    ce8e:	b3 94       	inc	r11
    ce90:	f7 01       	movw	r30, r14
    ce92:	b3 82       	std	Z+3, r11	; 0x03
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
    ce94:	f8 01       	movw	r30, r16
    ce96:	83 85       	ldd	r24, Z+11	; 0x0b
    ce98:	84 ff       	sbrs	r24, 4
    ce9a:	3d c0       	rjmp	.+122    	; 0xcf16 <f_rename+0x1f4>
    ce9c:	4d a9       	ldd	r20, Y+53	; 0x35
    ce9e:	5e a9       	ldd	r21, Y+54	; 0x36
    cea0:	6f a9       	ldd	r22, Y+55	; 0x37
    cea2:	78 ad       	ldd	r23, Y+56	; 0x38
    cea4:	8f 81       	ldd	r24, Y+7	; 0x07
    cea6:	98 85       	ldd	r25, Y+8	; 0x08
    cea8:	a9 85       	ldd	r26, Y+9	; 0x09
    ceaa:	ba 85       	ldd	r27, Y+10	; 0x0a
    ceac:	48 17       	cp	r20, r24
    ceae:	59 07       	cpc	r21, r25
    ceb0:	6a 07       	cpc	r22, r26
    ceb2:	7b 07       	cpc	r23, r27
    ceb4:	81 f1       	breq	.+96     	; 0xcf16 <f_rename+0x1f4>
							sect = clst2sect(fs, ld_clust(fs, dir));
    ceb6:	b8 01       	movw	r22, r16
    ceb8:	f7 01       	movw	r30, r14
    ceba:	80 81       	ld	r24, Z
    cebc:	0e 94 c4 49 	call	0x9388	; 0x9388 <ld_clust.isra.3>
    cec0:	ab 01       	movw	r20, r22
    cec2:	bc 01       	movw	r22, r24
    cec4:	c7 01       	movw	r24, r14
    cec6:	0e 94 c4 47 	call	0x8f88	; 0x8f88 <clst2sect>
    ceca:	ab 01       	movw	r20, r22
    cecc:	bc 01       	movw	r22, r24
							if (sect == 0) {
    cece:	41 15       	cp	r20, r1
    ced0:	51 05       	cpc	r21, r1
    ced2:	61 05       	cpc	r22, r1
    ced4:	71 05       	cpc	r23, r1
    ced6:	91 f1       	breq	.+100    	; 0xcf3c <f_rename+0x21a>
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
    ced8:	c7 01       	movw	r24, r14
    ceda:	0e 94 53 4b 	call	0x96a6	; 0x96a6 <move_window>
    cede:	8c 01       	movw	r16, r24
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
								if (res == FR_OK && dir[1] == '.') {
    cee0:	89 2b       	or	r24, r25
    cee2:	09 f0       	breq	.+2      	; 0xcee6 <f_rename+0x1c4>
    cee4:	67 cf       	rjmp	.-306    	; 0xcdb4 <f_rename+0x92>
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    cee6:	ef 96       	adiw	r28, 0x3f	; 63
    cee8:	8e ad       	ldd	r24, Y+62	; 0x3e
    ceea:	9f ad       	ldd	r25, Y+63	; 0x3f
    ceec:	ef 97       	sbiw	r28, 0x3f	; 63
								if (res == FR_OK && dir[1] == '.') {
    ceee:	fc 01       	movw	r30, r24
    cef0:	ea 5a       	subi	r30, 0xAA	; 170
    cef2:	ff 4f       	sbci	r31, 0xFF	; 255
    cef4:	20 81       	ld	r18, Z
    cef6:	2e 32       	cpi	r18, 0x2E	; 46
    cef8:	71 f4       	brne	.+28     	; 0xcf16 <f_rename+0x1f4>
									st_clust(fs, dir, djn.obj.sclust);
    cefa:	2f 81       	ldd	r18, Y+7	; 0x07
    cefc:	38 85       	ldd	r19, Y+8	; 0x08
    cefe:	49 85       	ldd	r20, Y+9	; 0x09
    cf00:	5a 85       	ldd	r21, Y+10	; 0x0a
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    cf02:	bc 01       	movw	r22, r24
    cf04:	6b 5a       	subi	r22, 0xAB	; 171
    cf06:	7f 4f       	sbci	r23, 0xFF	; 255
								if (res == FR_OK && dir[1] == '.') {
									st_clust(fs, dir, djn.obj.sclust);
    cf08:	0e 94 d9 49 	call	0x93b2	; 0x93b2 <st_clust.isra.4>
									fs->wflag = 1;
    cf0c:	ef 96       	adiw	r28, 0x3f	; 63
    cf0e:	ee ad       	ldd	r30, Y+62	; 0x3e
    cf10:	ff ad       	ldd	r31, Y+63	; 0x3f
    cf12:	ef 97       	sbiw	r28, 0x3f	; 63
    cf14:	b3 82       	std	Z+3, r11	; 0x03
						}
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&djo);		/* Remove old entry */
    cf16:	ce 01       	movw	r24, r28
    cf18:	8f 96       	adiw	r24, 0x2f	; 47
    cf1a:	0e 94 37 54 	call	0xa86e	; 0xa86e <dir_remove>
    cf1e:	8c 01       	movw	r16, r24
				if (res == FR_OK) {
    cf20:	89 2b       	or	r24, r25
    cf22:	09 f0       	breq	.+2      	; 0xcf26 <f_rename+0x204>
    cf24:	47 cf       	rjmp	.-370    	; 0xcdb4 <f_rename+0x92>
					res = sync_fs(fs);
    cf26:	ef 96       	adiw	r28, 0x3f	; 63
    cf28:	8e ad       	ldd	r24, Y+62	; 0x3e
    cf2a:	9f ad       	ldd	r25, Y+63	; 0x3f
    cf2c:	ef 97       	sbiw	r28, 0x3f	; 63
    cf2e:	0e 94 39 4a 	call	0x9472	; 0x9472 <sync_fs>
    cf32:	8c 01       	movw	r16, r24
    cf34:	3f cf       	rjmp	.-386    	; 0xcdb4 <f_rename+0x92>
    cf36:	08 e0       	ldi	r16, 0x08	; 8
    cf38:	10 e0       	ldi	r17, 0x00	; 0
    cf3a:	3c cf       	rjmp	.-392    	; 0xcdb4 <f_rename+0x92>
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
						fs->wflag = 1;
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
							sect = clst2sect(fs, ld_clust(fs, dir));
							if (sect == 0) {
								res = FR_INT_ERR;
    cf3c:	02 e0       	ldi	r16, 0x02	; 2
    cf3e:	10 e0       	ldi	r17, 0x00	; 0
    cf40:	39 cf       	rjmp	.-398    	; 0xcdb4 <f_rename+0x92>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cf42:	ce 57       	subi	r28, 0x7E	; 126
    cf44:	df 4f       	sbci	r29, 0xFF	; 255
    cf46:	e9 e0       	ldi	r30, 0x09	; 9
    cf48:	0c 94 e0 e6 	jmp	0x1cdc0	; 0x1cdc0 <__epilogue_restores__+0x12>

0000cf4c <f_chmod>:
FRESULT f_chmod (
	const TCHAR* path,	/* Pointer to the file path */
	BYTE attr,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
    cf4c:	a2 e3       	ldi	r26, 0x32	; 50
    cf4e:	b0 e0       	ldi	r27, 0x00	; 0
    cf50:	ec ea       	ldi	r30, 0xAC	; 172
    cf52:	f7 e6       	ldi	r31, 0x67	; 103
    cf54:	0c 94 c5 e6 	jmp	0x1cd8a	; 0x1cd8a <__prologue_saves__+0x14>
    cf58:	9a ab       	std	Y+50, r25	; 0x32
    cf5a:	89 ab       	std	Y+49, r24	; 0x31
    cf5c:	e6 2e       	mov	r14, r22
    cf5e:	f4 2e       	mov	r15, r20
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    cf60:	42 e0       	ldi	r20, 0x02	; 2
    cf62:	be 01       	movw	r22, r28
    cf64:	61 5d       	subi	r22, 0xD1	; 209
    cf66:	7f 4f       	sbci	r23, 0xFF	; 255
    cf68:	ce 01       	movw	r24, r28
    cf6a:	c1 96       	adiw	r24, 0x31	; 49
    cf6c:	0e 94 ce 4b 	call	0x979c	; 0x979c <mount_volume>
	if (res == FR_OK) {
    cf70:	00 97       	sbiw	r24, 0x00	; 0
    cf72:	a9 f5       	brne	.+106    	; 0xcfde <f_chmod+0x92>
		dj.obj.fs = fs;
    cf74:	8f a5       	ldd	r24, Y+47	; 0x2f
    cf76:	98 a9       	ldd	r25, Y+48	; 0x30
    cf78:	9a 83       	std	Y+2, r25	; 0x02
    cf7a:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    cf7c:	80 e0       	ldi	r24, 0x00	; 0
    cf7e:	92 e0       	ldi	r25, 0x02	; 2
    cf80:	08 d1       	rcall	.+528    	; 0xd192 <ff_memalloc>
    cf82:	6c 01       	movw	r12, r24
    cf84:	00 97       	sbiw	r24, 0x00	; 0
    cf86:	b1 f0       	breq	.+44     	; 0xcfb4 <f_chmod+0x68>
    cf88:	ef a5       	ldd	r30, Y+47	; 0x2f
    cf8a:	f8 a9       	ldd	r31, Y+48	; 0x30
    cf8c:	94 87       	std	Z+12, r25	; 0x0c
    cf8e:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);	/* Follow the file path */
    cf90:	69 a9       	ldd	r22, Y+49	; 0x31
    cf92:	7a a9       	ldd	r23, Y+50	; 0x32
    cf94:	ce 01       	movw	r24, r28
    cf96:	01 96       	adiw	r24, 0x01	; 1
    cf98:	0e 94 1b 57 	call	0xae36	; 0xae36 <follow_path>
    cf9c:	8c 01       	movw	r16, r24
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
    cf9e:	89 2b       	or	r24, r25
    cfa0:	29 f4       	brne	.+10     	; 0xcfac <f_chmod+0x60>
    cfa2:	88 a5       	ldd	r24, Y+40	; 0x28
    cfa4:	80 7a       	andi	r24, 0xA0	; 160
    cfa6:	49 f0       	breq	.+18     	; 0xcfba <f_chmod+0x6e>
    cfa8:	06 e0       	ldi	r16, 0x06	; 6
    cfaa:	10 e0       	ldi	r17, 0x00	; 0
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    cfac:	c6 01       	movw	r24, r12
    cfae:	f4 d0       	rcall	.+488    	; 0xd198 <ff_memfree>
    cfb0:	c8 01       	movw	r24, r16
    cfb2:	15 c0       	rjmp	.+42     	; 0xcfde <f_chmod+0x92>


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    cfb4:	81 e1       	ldi	r24, 0x11	; 17
    cfb6:	90 e0       	ldi	r25, 0x00	; 0
    cfb8:	12 c0       	rjmp	.+36     	; 0xcfde <f_chmod+0x92>
				fs->dirbuf[XDIR_Attr] = (attr & mask) | (fs->dirbuf[XDIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
				res = store_xdir(&dj);
			} else
#endif
			{
				dj.dir[DIR_Attr] = (attr & mask) | (dj.dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
    cfba:	eb 8d       	ldd	r30, Y+27	; 0x1b
    cfbc:	fc 8d       	ldd	r31, Y+28	; 0x1c
    cfbe:	83 85       	ldd	r24, Z+11	; 0x0b
    cfc0:	6e 2d       	mov	r22, r14
    cfc2:	68 27       	eor	r22, r24
    cfc4:	6f 21       	and	r22, r15
    cfc6:	67 72       	andi	r22, 0x27	; 39
    cfc8:	68 27       	eor	r22, r24
    cfca:	63 87       	std	Z+11, r22	; 0x0b
				fs->wflag = 1;
    cfcc:	8f a5       	ldd	r24, Y+47	; 0x2f
    cfce:	98 a9       	ldd	r25, Y+48	; 0x30
    cfd0:	21 e0       	ldi	r18, 0x01	; 1
    cfd2:	fc 01       	movw	r30, r24
    cfd4:	23 83       	std	Z+3, r18	; 0x03
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
    cfd6:	0e 94 39 4a 	call	0x9472	; 0x9472 <sync_fs>
    cfda:	8c 01       	movw	r16, r24
    cfdc:	e7 cf       	rjmp	.-50     	; 0xcfac <f_chmod+0x60>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cfde:	e2 96       	adiw	r28, 0x32	; 50
    cfe0:	e8 e0       	ldi	r30, 0x08	; 8
    cfe2:	0c 94 e1 e6 	jmp	0x1cdc2	; 0x1cdc2 <__epilogue_restores__+0x14>

0000cfe6 <f_utime>:

FRESULT f_utime (
	const TCHAR* path,	/* Pointer to the file/directory name */
	const FILINFO* fno	/* Pointer to the timestamp to be set */
)
{
    cfe6:	a2 e3       	ldi	r26, 0x32	; 50
    cfe8:	b0 e0       	ldi	r27, 0x00	; 0
    cfea:	e9 ef       	ldi	r30, 0xF9	; 249
    cfec:	f7 e6       	ldi	r31, 0x67	; 103
    cfee:	0c 94 c5 e6 	jmp	0x1cd8a	; 0x1cd8a <__prologue_saves__+0x14>
    cff2:	9a ab       	std	Y+50, r25	; 0x32
    cff4:	89 ab       	std	Y+49, r24	; 0x31
    cff6:	6b 01       	movw	r12, r22
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    cff8:	42 e0       	ldi	r20, 0x02	; 2
    cffa:	be 01       	movw	r22, r28
    cffc:	61 5d       	subi	r22, 0xD1	; 209
    cffe:	7f 4f       	sbci	r23, 0xFF	; 255
    d000:	ce 01       	movw	r24, r28
    d002:	c1 96       	adiw	r24, 0x31	; 49
    d004:	0e 94 ce 4b 	call	0x979c	; 0x979c <mount_volume>
	if (res == FR_OK) {
    d008:	00 97       	sbiw	r24, 0x00	; 0
    d00a:	09 f0       	breq	.+2      	; 0xd00e <f_utime+0x28>
    d00c:	41 c0       	rjmp	.+130    	; 0xd090 <f_utime+0xaa>
		dj.obj.fs = fs;
    d00e:	8f a5       	ldd	r24, Y+47	; 0x2f
    d010:	98 a9       	ldd	r25, Y+48	; 0x30
    d012:	9a 83       	std	Y+2, r25	; 0x02
    d014:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    d016:	80 e0       	ldi	r24, 0x00	; 0
    d018:	92 e0       	ldi	r25, 0x02	; 2
    d01a:	bb d0       	rcall	.+374    	; 0xd192 <ff_memalloc>
    d01c:	7c 01       	movw	r14, r24
    d01e:	00 97       	sbiw	r24, 0x00	; 0
    d020:	b1 f0       	breq	.+44     	; 0xd04e <f_utime+0x68>
    d022:	ef a5       	ldd	r30, Y+47	; 0x2f
    d024:	f8 a9       	ldd	r31, Y+48	; 0x30
    d026:	94 87       	std	Z+12, r25	; 0x0c
    d028:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);	/* Follow the file path */
    d02a:	69 a9       	ldd	r22, Y+49	; 0x31
    d02c:	7a a9       	ldd	r23, Y+50	; 0x32
    d02e:	ce 01       	movw	r24, r28
    d030:	01 96       	adiw	r24, 0x01	; 1
    d032:	0e 94 1b 57 	call	0xae36	; 0xae36 <follow_path>
    d036:	8c 01       	movw	r16, r24
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
    d038:	89 2b       	or	r24, r25
    d03a:	29 f4       	brne	.+10     	; 0xd046 <f_utime+0x60>
    d03c:	88 a5       	ldd	r24, Y+40	; 0x28
    d03e:	80 7a       	andi	r24, 0xA0	; 160
    d040:	49 f0       	breq	.+18     	; 0xd054 <f_utime+0x6e>
    d042:	06 e0       	ldi	r16, 0x06	; 6
    d044:	10 e0       	ldi	r17, 0x00	; 0
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    d046:	c7 01       	movw	r24, r14
    d048:	a7 d0       	rcall	.+334    	; 0xd198 <ff_memfree>
    d04a:	c8 01       	movw	r24, r16
    d04c:	21 c0       	rjmp	.+66     	; 0xd090 <f_utime+0xaa>


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    d04e:	81 e1       	ldi	r24, 0x11	; 17
    d050:	90 e0       	ldi	r25, 0x00	; 0
    d052:	1e c0       	rjmp	.+60     	; 0xd090 <f_utime+0xaa>
				st_dword(fs->dirbuf + XDIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
				res = store_xdir(&dj);
			} else
#endif
			{
				st_dword(dj.dir + DIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
    d054:	f6 01       	movw	r30, r12
    d056:	44 81       	ldd	r20, Z+4	; 0x04
    d058:	55 81       	ldd	r21, Z+5	; 0x05
    d05a:	60 e0       	ldi	r22, 0x00	; 0
    d05c:	70 e0       	ldi	r23, 0x00	; 0
    d05e:	ba 01       	movw	r22, r20
    d060:	55 27       	eor	r21, r21
    d062:	44 27       	eor	r20, r20
    d064:	86 81       	ldd	r24, Z+6	; 0x06
    d066:	97 81       	ldd	r25, Z+7	; 0x07
    d068:	a0 e0       	ldi	r26, 0x00	; 0
    d06a:	b0 e0       	ldi	r27, 0x00	; 0
    d06c:	48 2b       	or	r20, r24
    d06e:	59 2b       	or	r21, r25
    d070:	6a 2b       	or	r22, r26
    d072:	7b 2b       	or	r23, r27
    d074:	8b 8d       	ldd	r24, Y+27	; 0x1b
    d076:	9c 8d       	ldd	r25, Y+28	; 0x1c
    d078:	46 96       	adiw	r24, 0x16	; 22
    d07a:	0e 94 a6 47 	call	0x8f4c	; 0x8f4c <st_dword>
				fs->wflag = 1;
    d07e:	8f a5       	ldd	r24, Y+47	; 0x2f
    d080:	98 a9       	ldd	r25, Y+48	; 0x30
    d082:	21 e0       	ldi	r18, 0x01	; 1
    d084:	fc 01       	movw	r30, r24
    d086:	23 83       	std	Z+3, r18	; 0x03
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
    d088:	0e 94 39 4a 	call	0x9472	; 0x9472 <sync_fs>
    d08c:	8c 01       	movw	r16, r24
    d08e:	db cf       	rjmp	.-74     	; 0xd046 <f_utime+0x60>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    d090:	e2 96       	adiw	r28, 0x32	; 50
    d092:	e8 e0       	ldi	r30, 0x08	; 8
    d094:	0c 94 e1 e6 	jmp	0x1cdc2	; 0x1cdc2 <__epilogue_restores__+0x14>

0000d098 <f_getlabel>:
FRESULT f_getlabel (
	const TCHAR* path,	/* Logical drive number */
	TCHAR* label,		/* Buffer to store the volume label */
	DWORD* vsn			/* Variable to store the volume serial number */
)
{
    d098:	a2 e3       	ldi	r26, 0x32	; 50
    d09a:	b0 e0       	ldi	r27, 0x00	; 0
    d09c:	e2 e5       	ldi	r30, 0x52	; 82
    d09e:	f8 e6       	ldi	r31, 0x68	; 104
    d0a0:	0c 94 c5 e6 	jmp	0x1cd8a	; 0x1cd8a <__prologue_saves__+0x14>
    d0a4:	9a ab       	std	Y+50, r25	; 0x32
    d0a6:	89 ab       	std	Y+49, r24	; 0x31
    d0a8:	7b 01       	movw	r14, r22
    d0aa:	6a 01       	movw	r12, r20
	FATFS *fs;
	UINT si, di;
	WCHAR wc;

	/* Get logical drive */
	res = mount_volume(&path, &fs, 0);
    d0ac:	40 e0       	ldi	r20, 0x00	; 0
    d0ae:	be 01       	movw	r22, r28
    d0b0:	61 5d       	subi	r22, 0xD1	; 209
    d0b2:	7f 4f       	sbci	r23, 0xFF	; 255
    d0b4:	ce 01       	movw	r24, r28
    d0b6:	c1 96       	adiw	r24, 0x31	; 49
    d0b8:	0e 94 ce 4b 	call	0x979c	; 0x979c <mount_volume>
    d0bc:	8c 01       	movw	r16, r24

	/* Get volume label */
	if (res == FR_OK && label) {
    d0be:	89 2b       	or	r24, r25
    d0c0:	09 f0       	breq	.+2      	; 0xd0c4 <f_getlabel+0x2c>
    d0c2:	62 c0       	rjmp	.+196    	; 0xd188 <f_getlabel+0xf0>
    d0c4:	e1 14       	cp	r14, r1
    d0c6:	f1 04       	cpc	r15, r1
    d0c8:	a1 f1       	breq	.+104    	; 0xd132 <f_getlabel+0x9a>
		dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
    d0ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    d0cc:	98 a9       	ldd	r25, Y+48	; 0x30
    d0ce:	9a 83       	std	Y+2, r25	; 0x02
    d0d0:	89 83       	std	Y+1, r24	; 0x01
    d0d2:	1f 82       	std	Y+7, r1	; 0x07
    d0d4:	18 86       	std	Y+8, r1	; 0x08
    d0d6:	19 86       	std	Y+9, r1	; 0x09
    d0d8:	1a 86       	std	Y+10, r1	; 0x0a
		res = dir_sdi(&dj, 0);
    d0da:	40 e0       	ldi	r20, 0x00	; 0
    d0dc:	50 e0       	ldi	r21, 0x00	; 0
    d0de:	ba 01       	movw	r22, r20
    d0e0:	ce 01       	movw	r24, r28
    d0e2:	01 96       	adiw	r24, 0x01	; 1
    d0e4:	0e 94 d5 4f 	call	0x9faa	; 0x9faa <dir_sdi>
		if (res == FR_OK) {
    d0e8:	00 97       	sbiw	r24, 0x00	; 0
    d0ea:	f1 f4       	brne	.+60     	; 0xd128 <f_getlabel+0x90>
		 	res = DIR_READ_LABEL(&dj);		/* Find a volume label entry */
    d0ec:	61 e0       	ldi	r22, 0x01	; 1
    d0ee:	70 e0       	ldi	r23, 0x00	; 0
    d0f0:	ce 01       	movw	r24, r28
    d0f2:	01 96       	adiw	r24, 0x01	; 1
    d0f4:	0e 94 6e 53 	call	0xa6dc	; 0xa6dc <dir_read>
		 	if (res == FR_OK) {
    d0f8:	00 97       	sbiw	r24, 0x00	; 0
    d0fa:	b1 f4       	brne	.+44     	; 0xd128 <f_getlabel+0x90>
    d0fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    d0fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    d100:	f7 01       	movw	r30, r14
    d102:	3b 96       	adiw	r30, 0x0b	; 11
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry */
					while (si < 11) {
						wc = dj.dir[si++];
    d104:	a7 01       	movw	r20, r14
    d106:	dc 01       	movw	r26, r24
    d108:	2d 91       	ld	r18, X+
    d10a:	cd 01       	movw	r24, r26
						wc = ff_oem2uni(wc, CODEPAGE);					/* Convert it into Unicode */
						if (wc != 0) wc = put_utf(wc, &label[di], 4);	/* Put it in Unicode */
						if (wc == 0) { di = 0; break; }
						di += wc;
#else									/* ANSI/OEM output */
						label[di++] = (TCHAR)wc;
    d10c:	da 01       	movw	r26, r20
    d10e:	2d 93       	st	X+, r18
    d110:	ad 01       	movw	r20, r26
					label[di] = 0;
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry */
					while (si < 11) {
    d112:	ae 17       	cp	r26, r30
    d114:	bf 07       	cpc	r27, r31
    d116:	b9 f7       	brne	.-18     	; 0xd106 <f_getlabel+0x6e>
#else									/* ANSI/OEM output */
						label[di++] = (TCHAR)wc;
#endif
					}
					do {				/* Truncate trailing spaces */
						label[di] = 0;
    d118:	10 82       	st	Z, r1
						if (di == 0) break;
    d11a:	ee 16       	cp	r14, r30
    d11c:	ff 06       	cpc	r15, r31
    d11e:	49 f0       	breq	.+18     	; 0xd132 <f_getlabel+0x9a>
					} while (label[--di] == ' ');
    d120:	82 91       	ld	r24, -Z
    d122:	80 32       	cpi	r24, 0x20	; 32
    d124:	c9 f3       	breq	.-14     	; 0xd118 <f_getlabel+0x80>
    d126:	05 c0       	rjmp	.+10     	; 0xd132 <f_getlabel+0x9a>
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
    d128:	84 30       	cpi	r24, 0x04	; 4
    d12a:	91 05       	cpc	r25, r1
    d12c:	61 f5       	brne	.+88     	; 0xd186 <f_getlabel+0xee>
			label[0] = 0;
    d12e:	f7 01       	movw	r30, r14
    d130:	10 82       	st	Z, r1
			res = FR_OK;
		}
	}

	/* Get volume serial number */
	if (res == FR_OK && vsn) {
    d132:	c1 14       	cp	r12, r1
    d134:	d1 04       	cpc	r13, r1
    d136:	41 f1       	breq	.+80     	; 0xd188 <f_getlabel+0xf0>
		res = move_window(fs, fs->volbase);
    d138:	8f a5       	ldd	r24, Y+47	; 0x2f
    d13a:	98 a9       	ldd	r25, Y+48	; 0x30
    d13c:	fc 01       	movw	r30, r24
    d13e:	41 a1       	ldd	r20, Z+33	; 0x21
    d140:	52 a1       	ldd	r21, Z+34	; 0x22
    d142:	63 a1       	ldd	r22, Z+35	; 0x23
    d144:	74 a1       	ldd	r23, Z+36	; 0x24
    d146:	0e 94 53 4b 	call	0x96a6	; 0x96a6 <move_window>
    d14a:	8c 01       	movw	r16, r24
		if (res == FR_OK) {
    d14c:	89 2b       	or	r24, r25
    d14e:	e1 f4       	brne	.+56     	; 0xd188 <f_getlabel+0xf0>
			switch (fs->fs_type) {
    d150:	ef a5       	ldd	r30, Y+47	; 0x2f
    d152:	f8 a9       	ldd	r31, Y+48	; 0x30
    d154:	80 81       	ld	r24, Z
    d156:	83 30       	cpi	r24, 0x03	; 3
    d158:	29 f0       	breq	.+10     	; 0xd164 <f_getlabel+0xcc>
    d15a:	84 30       	cpi	r24, 0x04	; 4
    d15c:	31 f0       	breq	.+12     	; 0xd16a <f_getlabel+0xd2>

			case FS_FAT32:
				di = BS_VolID32; break;

			default:
				di = BS_VolID;
    d15e:	87 e2       	ldi	r24, 0x27	; 39
    d160:	90 e0       	ldi	r25, 0x00	; 0
    d162:	05 c0       	rjmp	.+10     	; 0xd16e <f_getlabel+0xd6>
			switch (fs->fs_type) {
			case FS_EXFAT:
				di = BPB_VolIDEx; break;

			case FS_FAT32:
				di = BS_VolID32; break;
    d164:	83 e4       	ldi	r24, 0x43	; 67
    d166:	90 e0       	ldi	r25, 0x00	; 0
    d168:	02 c0       	rjmp	.+4      	; 0xd16e <f_getlabel+0xd6>
	if (res == FR_OK && vsn) {
		res = move_window(fs, fs->volbase);
		if (res == FR_OK) {
			switch (fs->fs_type) {
			case FS_EXFAT:
				di = BPB_VolIDEx; break;
    d16a:	84 e6       	ldi	r24, 0x64	; 100
    d16c:	90 e0       	ldi	r25, 0x00	; 0
				di = BS_VolID32; break;

			default:
				di = BS_VolID;
			}
			*vsn = ld_dword(fs->win + di);
    d16e:	f5 96       	adiw	r30, 0x35	; 53
    d170:	8e 0f       	add	r24, r30
    d172:	9f 1f       	adc	r25, r31
    d174:	0e 94 91 47 	call	0x8f22	; 0x8f22 <ld_dword>
    d178:	d6 01       	movw	r26, r12
    d17a:	6d 93       	st	X+, r22
    d17c:	7d 93       	st	X+, r23
    d17e:	8d 93       	st	X+, r24
    d180:	9c 93       	st	X, r25
    d182:	13 97       	sbiw	r26, 0x03	; 3
    d184:	01 c0       	rjmp	.+2      	; 0xd188 <f_getlabel+0xf0>
						if (di == 0) break;
					} while (label[--di] == ' ');
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
    d186:	8c 01       	movw	r16, r24
			*vsn = ld_dword(fs->win + di);
		}
	}

	LEAVE_FF(fs, res);
}
    d188:	c8 01       	movw	r24, r16
    d18a:	e2 96       	adiw	r28, 0x32	; 50
    d18c:	e8 e0       	ldi	r30, 0x08	; 8
    d18e:	0c 94 e1 e6 	jmp	0x1cdc2	; 0x1cdc2 <__epilogue_restores__+0x14>

0000d192 <ff_memalloc>:

void* ff_memalloc (	/* Returns pointer to the allocated memory block (null if not enough core) */
	UINT msize		/* Number of bytes to allocate */
)
{
	return safemalloc(msize);	/* Allocate a new memory block with POSIX API */
    d192:	0c 94 c1 27 	jmp	0x4f82	; 0x4f82 <safemalloc>
}
    d196:	08 95       	ret

0000d198 <ff_memfree>:

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free (nothing to do if null) */
)
{
	safefree(mblock);	/* Free the memory block with POSIX API */
    d198:	0c 94 e3 27 	jmp	0x4fc6	; 0x4fc6 <safefree>
    d19c:	08 95       	ret

0000d19e <ff_uni2oem>:
#if FF_CODE_PAGE != 0 && FF_CODE_PAGE < 900
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
    d19e:	cf 92       	push	r12
    d1a0:	df 92       	push	r13
    d1a2:	ef 92       	push	r14
    d1a4:	ff 92       	push	r15
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (uni < 0x80) {	/* ASCII? */
    d1a6:	60 38       	cpi	r22, 0x80	; 128
    d1a8:	71 05       	cpc	r23, r1
    d1aa:	81 05       	cpc	r24, r1
    d1ac:	91 05       	cpc	r25, r1
    d1ae:	10 f4       	brcc	.+4      	; 0xd1b4 <ff_uni2oem+0x16>
		c = (WCHAR)uni;
    d1b0:	cb 01       	movw	r24, r22
    d1b2:	23 c0       	rjmp	.+70     	; 0xd1fa <ff_uni2oem+0x5c>

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
    d1b4:	61 15       	cp	r22, r1
    d1b6:	71 05       	cpc	r23, r1
    d1b8:	21 e0       	ldi	r18, 0x01	; 1
    d1ba:	82 07       	cpc	r24, r18
    d1bc:	91 05       	cpc	r25, r1
    d1be:	d8 f4       	brcc	.+54     	; 0xd1f6 <ff_uni2oem+0x58>
    d1c0:	45 3b       	cpi	r20, 0xB5	; 181
    d1c2:	51 40       	sbci	r21, 0x01	; 1
    d1c4:	c1 f4       	brne	.+48     	; 0xd1f6 <ff_uni2oem+0x58>
    d1c6:	e6 ea       	ldi	r30, 0xA6	; 166
    d1c8:	f7 e0       	ldi	r31, 0x07	; 7
    d1ca:	20 e0       	ldi	r18, 0x00	; 0
    d1cc:	30 e0       	ldi	r19, 0x00	; 0
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
    d1ce:	c1 90       	ld	r12, Z+
    d1d0:	d1 90       	ld	r13, Z+
    d1d2:	e1 2c       	mov	r14, r1
    d1d4:	f1 2c       	mov	r15, r1
    d1d6:	6c 15       	cp	r22, r12
    d1d8:	7d 05       	cpc	r23, r13
    d1da:	8e 05       	cpc	r24, r14
    d1dc:	9f 05       	cpc	r25, r15
    d1de:	29 f0       	breq	.+10     	; 0xd1ea <ff_uni2oem+0x4c>
    d1e0:	2f 5f       	subi	r18, 0xFF	; 255
    d1e2:	3f 4f       	sbci	r19, 0xFF	; 255
    d1e4:	20 38       	cpi	r18, 0x80	; 128
    d1e6:	31 05       	cpc	r19, r1
    d1e8:	91 f7       	brne	.-28     	; 0xd1ce <ff_uni2oem+0x30>
			c = (c + 0x80) & 0xFF;
    d1ea:	b9 01       	movw	r22, r18
    d1ec:	60 58       	subi	r22, 0x80	; 128
    d1ee:	7f 4f       	sbci	r23, 0xFF	; 255
    d1f0:	cb 01       	movw	r24, r22
    d1f2:	99 27       	eor	r25, r25
    d1f4:	02 c0       	rjmp	.+4      	; 0xd1fa <ff_uni2oem+0x5c>
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
	WCHAR c = 0;
    d1f6:	80 e0       	ldi	r24, 0x00	; 0
    d1f8:	90 e0       	ldi	r25, 0x00	; 0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
    d1fa:	ff 90       	pop	r15
    d1fc:	ef 90       	pop	r14
    d1fe:	df 90       	pop	r13
    d200:	cf 90       	pop	r12
    d202:	08 95       	ret

0000d204 <ff_oem2uni>:
{
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (oem < 0x80) {	/* ASCII? */
    d204:	80 38       	cpi	r24, 0x80	; 128
    d206:	91 05       	cpc	r25, r1
    d208:	88 f0       	brcs	.+34     	; 0xd22c <ff_oem2uni+0x28>
		c = oem;

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
    d20a:	65 3b       	cpi	r22, 0xB5	; 181
    d20c:	71 40       	sbci	r23, 0x01	; 1
    d20e:	61 f4       	brne	.+24     	; 0xd228 <ff_oem2uni+0x24>
			if (oem < 0x100) c = p[oem - 0x80];
    d210:	8f 3f       	cpi	r24, 0xFF	; 255
    d212:	91 05       	cpc	r25, r1
    d214:	09 f0       	breq	.+2      	; 0xd218 <ff_oem2uni+0x14>
    d216:	40 f4       	brcc	.+16     	; 0xd228 <ff_oem2uni+0x24>
    d218:	88 0f       	add	r24, r24
    d21a:	99 1f       	adc	r25, r25
    d21c:	fc 01       	movw	r30, r24
    d21e:	ea 55       	subi	r30, 0x5A	; 90
    d220:	f9 4f       	sbci	r31, 0xF9	; 249
    d222:	80 81       	ld	r24, Z
    d224:	91 81       	ldd	r25, Z+1	; 0x01
    d226:	08 95       	ret
WCHAR ff_oem2uni (	/* Returns Unicode character in UTF-16, zero on error */
	WCHAR	oem,	/* OEM code to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
	WCHAR c = 0;
    d228:	80 e0       	ldi	r24, 0x00	; 0
    d22a:	90 e0       	ldi	r25, 0x00	; 0
			if (oem < 0x100) c = p[oem - 0x80];
		}
	}

	return c;
}
    d22c:	08 95       	ret

0000d22e <ff_wtoupper>:

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
    d22e:	61 15       	cp	r22, r1
    d230:	71 05       	cpc	r23, r1
    d232:	21 e0       	ldi	r18, 0x01	; 1
    d234:	82 07       	cpc	r24, r18
    d236:	91 05       	cpc	r25, r1
    d238:	08 f0       	brcs	.+2      	; 0xd23c <ff_wtoupper+0xe>
    d23a:	5a c0       	rjmp	.+180    	; 0xd2f0 <ff_wtoupper+0xc2>
		uc = (WORD)uni;
		p = uc < 0x1000 ? cvt1 : cvt2;
    d23c:	61 15       	cp	r22, r1
    d23e:	80 e1       	ldi	r24, 0x10	; 16
    d240:	78 07       	cpc	r23, r24
    d242:	18 f0       	brcs	.+6      	; 0xd24a <ff_wtoupper+0x1c>
    d244:	a8 ef       	ldi	r26, 0xF8	; 248
    d246:	b4 e0       	ldi	r27, 0x04	; 4
    d248:	02 c0       	rjmp	.+4      	; 0xd24e <ff_wtoupper+0x20>
    d24a:	a4 eb       	ldi	r26, 0xB4	; 180
    d24c:	b5 e0       	ldi	r27, 0x05	; 5
		for (;;) {
			bc = *p++;								/* Get the block base */
    d24e:	2d 91       	ld	r18, X+
    d250:	3c 91       	ld	r19, X
    d252:	11 97       	sbiw	r26, 0x01	; 1
			if (bc == 0 || uc < bc) break;			/* Not matched? */
    d254:	21 15       	cp	r18, r1
    d256:	31 05       	cpc	r19, r1
    d258:	09 f4       	brne	.+2      	; 0xd25c <ff_wtoupper+0x2e>
    d25a:	48 c0       	rjmp	.+144    	; 0xd2ec <ff_wtoupper+0xbe>
    d25c:	62 17       	cp	r22, r18
    d25e:	73 07       	cpc	r23, r19
    d260:	08 f4       	brcc	.+2      	; 0xd264 <ff_wtoupper+0x36>
    d262:	44 c0       	rjmp	.+136    	; 0xd2ec <ff_wtoupper+0xbe>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
    d264:	14 96       	adiw	r26, 0x04	; 4
    d266:	fd 01       	movw	r30, r26
    d268:	32 97       	sbiw	r30, 0x02	; 2
    d26a:	80 81       	ld	r24, Z
    d26c:	91 81       	ldd	r25, Z+1	; 0x01
    d26e:	e9 2f       	mov	r30, r25
    d270:	ff 27       	eor	r31, r31
    d272:	99 27       	eor	r25, r25
			if (uc < bc + nc) {	/* In the block? */
    d274:	a9 01       	movw	r20, r18
    d276:	48 0f       	add	r20, r24
    d278:	59 1f       	adc	r21, r25
    d27a:	64 17       	cp	r22, r20
    d27c:	75 07       	cpc	r23, r21
    d27e:	70 f5       	brcc	.+92     	; 0xd2dc <ff_wtoupper+0xae>
				switch (cmd) {
    d280:	e9 30       	cpi	r30, 0x09	; 9
    d282:	f1 05       	cpc	r31, r1
    d284:	98 f5       	brcc	.+102    	; 0xd2ec <ff_wtoupper+0xbe>
    d286:	ec 54       	subi	r30, 0x4C	; 76
    d288:	ff 4f       	sbci	r31, 0xFF	; 255
    d28a:	0c 94 8c e6 	jmp	0x1cd18	; 0x1cd18 <__tablejump2__>
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
    d28e:	62 1b       	sub	r22, r18
    d290:	73 0b       	sbc	r23, r19
    d292:	fb 01       	movw	r30, r22
    d294:	ee 0f       	add	r30, r30
    d296:	ff 1f       	adc	r31, r31
    d298:	ea 0f       	add	r30, r26
    d29a:	fb 1f       	adc	r31, r27
    d29c:	60 81       	ld	r22, Z
    d29e:	71 81       	ldd	r23, Z+1	; 0x01
    d2a0:	25 c0       	rjmp	.+74     	; 0xd2ec <ff_wtoupper+0xbe>
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
    d2a2:	cb 01       	movw	r24, r22
    d2a4:	82 1b       	sub	r24, r18
    d2a6:	93 0b       	sbc	r25, r19
    d2a8:	81 70       	andi	r24, 0x01	; 1
    d2aa:	99 27       	eor	r25, r25
    d2ac:	68 1b       	sub	r22, r24
    d2ae:	79 0b       	sbc	r23, r25
    d2b0:	1d c0       	rjmp	.+58     	; 0xd2ec <ff_wtoupper+0xbe>
				case 2: uc -= 16; break;			/* Shift -16 */
    d2b2:	60 51       	subi	r22, 0x10	; 16
    d2b4:	71 09       	sbc	r23, r1
    d2b6:	1a c0       	rjmp	.+52     	; 0xd2ec <ff_wtoupper+0xbe>
				case 3:	uc -= 32; break;			/* Shift -32 */
    d2b8:	60 52       	subi	r22, 0x20	; 32
    d2ba:	71 09       	sbc	r23, r1
    d2bc:	17 c0       	rjmp	.+46     	; 0xd2ec <ff_wtoupper+0xbe>
				case 4:	uc -= 48; break;			/* Shift -48 */
    d2be:	60 53       	subi	r22, 0x30	; 48
    d2c0:	71 09       	sbc	r23, r1
    d2c2:	14 c0       	rjmp	.+40     	; 0xd2ec <ff_wtoupper+0xbe>
				case 5:	uc -= 26; break;			/* Shift -26 */
    d2c4:	6a 51       	subi	r22, 0x1A	; 26
    d2c6:	71 09       	sbc	r23, r1
    d2c8:	11 c0       	rjmp	.+34     	; 0xd2ec <ff_wtoupper+0xbe>
				case 6:	uc += 8; break;				/* Shift +8 */
    d2ca:	68 5f       	subi	r22, 0xF8	; 248
    d2cc:	7f 4f       	sbci	r23, 0xFF	; 255
    d2ce:	0e c0       	rjmp	.+28     	; 0xd2ec <ff_wtoupper+0xbe>
				case 7: uc -= 80; break;			/* Shift -80 */
    d2d0:	60 55       	subi	r22, 0x50	; 80
    d2d2:	71 09       	sbc	r23, r1
    d2d4:	0b c0       	rjmp	.+22     	; 0xd2ec <ff_wtoupper+0xbe>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
    d2d6:	60 56       	subi	r22, 0x60	; 96
    d2d8:	7c 41       	sbci	r23, 0x1C	; 28
    d2da:	08 c0       	rjmp	.+16     	; 0xd2ec <ff_wtoupper+0xbe>
				}
				break;
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
    d2dc:	ef 2b       	or	r30, r31
    d2de:	09 f0       	breq	.+2      	; 0xd2e2 <ff_wtoupper+0xb4>
    d2e0:	b6 cf       	rjmp	.-148    	; 0xd24e <ff_wtoupper+0x20>
    d2e2:	88 0f       	add	r24, r24
    d2e4:	99 1f       	adc	r25, r25
    d2e6:	a8 0f       	add	r26, r24
    d2e8:	b9 1f       	adc	r27, r25
    d2ea:	b1 cf       	rjmp	.-158    	; 0xd24e <ff_wtoupper+0x20>
		}
		uni = uc;
    d2ec:	80 e0       	ldi	r24, 0x00	; 0
    d2ee:	90 e0       	ldi	r25, 0x00	; 0
	}

	return uni;
}
    d2f0:	08 95       	ret

0000d2f2 <disk_status>:

DSTATUS disk_status (
BYTE pdrv                                         /* Physical drive nmuber to identify the drive */
)
{
    switch (pdrv)
    d2f2:	81 11       	cpse	r24, r1
    d2f4:	02 c0       	rjmp	.+4      	; 0xd2fa <disk_status+0x8>
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_status() );
    d2f6:	a1 c1       	rjmp	.+834    	; 0xd63a <mmc_disk_status>
    d2f8:	08 95       	ret
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_status() );
#endif
    }
    return STA_NOINIT;
    d2fa:	81 e0       	ldi	r24, 0x01	; 1
}
    d2fc:	08 95       	ret

0000d2fe <disk_initialize>:
DSTATUS disk_initialize (
BYTE pdrv                                         /* Physical drive nmuber to identify the drive */
)
{

    switch (pdrv)
    d2fe:	81 11       	cpse	r24, r1
    d300:	02 c0       	rjmp	.+4      	; 0xd306 <disk_initialize+0x8>
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_initialize() );
    d302:	f6 c0       	rjmp	.+492    	; 0xd4f0 <mmc_disk_initialize>
    d304:	08 95       	ret
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_initialize() );
#endif
    }
    return STA_NOINIT;
    d306:	81 e0       	ldi	r24, 0x01	; 1
}
    d308:	08 95       	ret

0000d30a <disk_read>:
BYTE pdrv,                                        /* Physical drive nmuber to identify the drive */
BYTE *buff,                                       /* Data buffer to store read data */
LBA_t sector,                                     /* Start sector in LBA */
UINT count                                        /* Number of sectors to read */
)
{
    d30a:	0f 93       	push	r16
    d30c:	1f 93       	push	r17
    d30e:	fb 01       	movw	r30, r22
    switch (pdrv)
    d310:	81 11       	cpse	r24, r1
    d312:	06 c0       	rjmp	.+12     	; 0xd320 <disk_read+0x16>
    d314:	ba 01       	movw	r22, r20
    d316:	a9 01       	movw	r20, r18
    d318:	cf 01       	movw	r24, r30
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_read(buff, sector, count) );
    d31a:	98 01       	movw	r18, r16
    d31c:	91 d1       	rcall	.+802    	; 0xd640 <mmc_disk_read>
    d31e:	02 c0       	rjmp	.+4      	; 0xd324 <disk_read+0x1a>
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_read(buff, sector, count) );
#endif
    }
    return RES_PARERR;
    d320:	84 e0       	ldi	r24, 0x04	; 4
    d322:	90 e0       	ldi	r25, 0x00	; 0
}
    d324:	1f 91       	pop	r17
    d326:	0f 91       	pop	r16
    d328:	08 95       	ret

0000d32a <disk_write>:
BYTE pdrv,                                        /* Physical drive nmuber to identify the drive */
const BYTE *buff,                                 /* Data to be written */
LBA_t sector,                                     /* Start sector in LBA */
UINT count                                        /* Number of sectors to write */
)
{
    d32a:	0f 93       	push	r16
    d32c:	1f 93       	push	r17
    d32e:	fb 01       	movw	r30, r22
    switch (pdrv)
    d330:	81 11       	cpse	r24, r1
    d332:	06 c0       	rjmp	.+12     	; 0xd340 <disk_write+0x16>
    d334:	ba 01       	movw	r22, r20
    d336:	a9 01       	movw	r20, r18
    d338:	cf 01       	movw	r24, r30
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_write(buff, sector, count) );
    d33a:	98 01       	movw	r18, r16
    d33c:	e2 d1       	rcall	.+964    	; 0xd702 <mmc_disk_write>
    d33e:	02 c0       	rjmp	.+4      	; 0xd344 <disk_write+0x1a>
        case DEV_USB :
            return ( usb_disk_write(buff, sector, count) );
#endif
    }

    return RES_PARERR;
    d340:	84 e0       	ldi	r24, 0x04	; 4
    d342:	90 e0       	ldi	r25, 0x00	; 0
}
    d344:	1f 91       	pop	r17
    d346:	0f 91       	pop	r16
    d348:	08 95       	ret

0000d34a <disk_ioctl>:
DRESULT disk_ioctl (
BYTE pdrv,                                        /* Physical drive nmuber (0..) */
BYTE cmd,                                         /* Control code */
void *buff                                        /* Buffer to send/receive control data */
)
{
    d34a:	96 2f       	mov	r25, r22
    switch (pdrv)
    d34c:	81 11       	cpse	r24, r1
    d34e:	04 c0       	rjmp	.+8      	; 0xd358 <disk_ioctl+0xe>
    d350:	ba 01       	movw	r22, r20
    d352:	89 2f       	mov	r24, r25
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_ioctl(cmd, buff) );
    d354:	4a c2       	rjmp	.+1172   	; 0xd7ea <mmc_disk_ioctl>
    d356:	08 95       	ret
#ifdef DRV_USB
        case DEV_MMC :
            return ( usb_disk_ioctl(cmd, buff) );
#endif
    }
    return RES_PARERR;
    d358:	84 e0       	ldi	r24, 0x04	; 4
    d35a:	90 e0       	ldi	r25, 0x00	; 0
}
    d35c:	08 95       	ret

0000d35e <xchg_spi>:
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d35e:	f9 c4       	rjmp	.+2546   	; 0xdd52 <mmc_spi_TXRX>
    return dat;
}
    d360:	08 95       	ret

0000d362 <deselect>:
///@return void
MEMSPACE
static
void deselect (void)
{
    CS_HIGH();
    d362:	ce d4       	rcall	.+2460   	; 0xdd00 <mmc_spi_end>
    xchg_spi(0xFF);                               /*< Dummy clock (force DO hi-z for multiple slave SPI) */
    d364:	8f ef       	ldi	r24, 0xFF	; 255
    d366:	fb df       	rcall	.-10     	; 0xd35e <xchg_spi>
    xchg_spi(0xFF);                               /*< Dummy clock (force DO hi-z for multiple slave SPI) */
    d368:	8f ef       	ldi	r24, 0xFF	; 255
    d36a:	f9 cf       	rjmp	.-14     	; 0xd35e <xchg_spi>
    d36c:	08 95       	ret

0000d36e <rcvr_datablock>:
    d36e:	0f 93       	push	r16
static
int rcvr_datablock (
BYTE *buff,                                       /*< Data buffer to store received data */
UINT btr                                          /*< Byte count (must be multiple of 4) */
)
{
    d370:	1f 93       	push	r17
    d372:	cf 93       	push	r28
    d374:	df 93       	push	r29
    d376:	ec 01       	movw	r28, r24
    d378:	8b 01       	movw	r16, r22
    BYTE token;

    mmc_set_ms_timeout(1000);
    d37a:	88 ee       	ldi	r24, 0xE8	; 232
    d37c:	93 e0       	ldi	r25, 0x03	; 3
    d37e:	ec d4       	rcall	.+2520   	; 0xdd58 <mmc_set_ms_timeout>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d380:	8f ef       	ldi	r24, 0xFF	; 255
    d382:	e7 d4       	rcall	.+2510   	; 0xdd52 <mmc_spi_TXRX>

    mmc_set_ms_timeout(1000);
    do                                            /* Wait for data packet in timeout of 400ms */
    {
        token = xchg_spi(0xFF);
    } while ((token == 0xFF) && !mmc_test_timeout());
    d384:	8f 3f       	cpi	r24, 0xFF	; 255
    d386:	31 f4       	brne	.+12     	; 0xd394 <rcvr_datablock+0x26>
    d388:	ee d4       	rcall	.+2524   	; 0xdd66 <mmc_test_timeout>
    d38a:	89 2b       	or	r24, r25
    d38c:	c9 f3       	breq	.-14     	; 0xd380 <rcvr_datablock+0x12>
    if (token != 0xFE) return 0;                  /* If not valid data token, retutn with error */
    d38e:	80 e0       	ldi	r24, 0x00	; 0
    d390:	90 e0       	ldi	r25, 0x00	; 0
    d392:	0b c0       	rjmp	.+22     	; 0xd3aa <rcvr_datablock+0x3c>
    d394:	8e 3f       	cpi	r24, 0xFE	; 254
void rcvr_spi_multi (
BYTE *p,                                          /* Data read buffer */
UINT cnt                                          /* Size of data block */
)
{
    mmc_spi_RX_buffer((uint8_t *)p, cnt);
    d396:	d9 f7       	brne	.-10     	; 0xd38e <rcvr_datablock+0x20>
    d398:	b8 01       	movw	r22, r16
    d39a:	ce 01       	movw	r24, r28
        token = xchg_spi(0xFF);
    } while ((token == 0xFF) && !mmc_test_timeout());
    if (token != 0xFE) return 0;                  /* If not valid data token, retutn with error */

    rcvr_spi_multi(buff, btr);                    /* Receive the data block into buffer */
    xchg_spi(0xFF);                               /* Discard CRC */
    d39c:	d7 d4       	rcall	.+2478   	; 0xdd4c <mmc_spi_RX_buffer>
    d39e:	8f ef       	ldi	r24, 0xFF	; 255
    d3a0:	de df       	rcall	.-68     	; 0xd35e <xchg_spi>
    xchg_spi(0xFF);
    d3a2:	8f ef       	ldi	r24, 0xFF	; 255
    d3a4:	dc df       	rcall	.-72     	; 0xd35e <xchg_spi>
    d3a6:	81 e0       	ldi	r24, 0x01	; 1
    d3a8:	90 e0       	ldi	r25, 0x00	; 0
    d3aa:	df 91       	pop	r29

    return 1;                                     /* Return with success */
}
    d3ac:	cf 91       	pop	r28
    d3ae:	1f 91       	pop	r17
    d3b0:	0f 91       	pop	r16
    d3b2:	08 95       	ret

0000d3b4 <wait_ready>:
    d3b4:	cf 93       	push	r28
int wait_ready (
UINT wt                                           /*< Timeout [ms] */
)
{
    BYTE d;
    mmc_set_ms_timeout(wt);
    d3b6:	d0 d4       	rcall	.+2464   	; 0xdd58 <mmc_set_ms_timeout>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d3b8:	8f ef       	ldi	r24, 0xFF	; 255
    d3ba:	cb d4       	rcall	.+2454   	; 0xdd52 <mmc_spi_TXRX>
    d3bc:	c8 2f       	mov	r28, r24
{
    BYTE d;
    mmc_set_ms_timeout(wt);
    do
    d = xchg_spi(0xFF);
    while (d != 0xFF && !mmc_test_timeout());
    d3be:	8f 3f       	cpi	r24, 0xFF	; 255
    d3c0:	19 f0       	breq	.+6      	; 0xd3c8 <wait_ready+0x14>
    d3c2:	d1 d4       	rcall	.+2466   	; 0xdd66 <mmc_test_timeout>
    d3c4:	89 2b       	or	r24, r25
    d3c6:	c1 f3       	breq	.-16     	; 0xd3b8 <wait_ready+0x4>

    return (d == 0xFF) ? 1 : 0;
    d3c8:	81 e0       	ldi	r24, 0x01	; 1
    d3ca:	90 e0       	ldi	r25, 0x00	; 0
    d3cc:	cf 3f       	cpi	r28, 0xFF	; 255
    d3ce:	11 f0       	breq	.+4      	; 0xd3d4 <wait_ready+0x20>
    d3d0:	80 e0       	ldi	r24, 0x00	; 0
    d3d2:	90 e0       	ldi	r25, 0x00	; 0
}
    d3d4:	cf 91       	pop	r28
    d3d6:	08 95       	ret

0000d3d8 <select>:
///@return 1 Successful
///@return 0 Timeout
MEMSPACE
static
int select (void)
{
    d3d8:	cf 93       	push	r28
    d3da:	df 93       	push	r29
    d3dc:	00 d0       	rcall	.+0      	; 0xd3de <select+0x6>
    d3de:	1f 92       	push	r1
    CS_LOW();
    d3e0:	82 d4       	rcall	.+2308   	; 0xdce6 <mmc_spi_begin>
    xchg_spi(0xFF);                               /* Dummy clock (force DO enabled) */
    d3e2:	8f ef       	ldi	r24, 0xFF	; 255
    d3e4:	bc df       	rcall	.-136    	; 0xd35e <xchg_spi>

    if (wait_ready(1000))
    d3e6:	88 ee       	ldi	r24, 0xE8	; 232
    d3e8:	93 e0       	ldi	r25, 0x03	; 3
    d3ea:	e4 df       	rcall	.-56     	; 0xd3b4 <wait_ready>
    d3ec:	ec 01       	movw	r28, r24
    d3ee:	89 2b       	or	r24, r25
    d3f0:	61 f4       	brne	.+24     	; 0xd40a <select+0x32>
        return 1;                                 /* OK */

    printf("select failed!\n");
    d3f2:	89 e6       	ldi	r24, 0x69	; 105
    d3f4:	97 e0       	ldi	r25, 0x07	; 7
    d3f6:	a0 e0       	ldi	r26, 0x00	; 0
    d3f8:	ed b7       	in	r30, 0x3d	; 61
    d3fa:	fe b7       	in	r31, 0x3e	; 62
    d3fc:	81 83       	std	Z+1, r24	; 0x01
    d3fe:	92 83       	std	Z+2, r25	; 0x02
    d400:	a3 83       	std	Z+3, r26	; 0x03
    d402:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>

    deselect();
    d406:	ad df       	rcall	.-166    	; 0xd362 <deselect>
    d408:	02 c0       	rjmp	.+4      	; 0xd40e <select+0x36>
{
    CS_LOW();
    xchg_spi(0xFF);                               /* Dummy clock (force DO enabled) */

    if (wait_ready(1000))
        return 1;                                 /* OK */
    d40a:	c1 e0       	ldi	r28, 0x01	; 1
    d40c:	d0 e0       	ldi	r29, 0x00	; 0

    printf("select failed!\n");

    deselect();
    return 0;                                     /* Timeout */
}
    d40e:	ce 01       	movw	r24, r28
    d410:	cd b7       	in	r28, 0x3d	; 61
    d412:	de b7       	in	r29, 0x3e	; 62
    d414:	23 96       	adiw	r28, 0x03	; 3
    d416:	e2 e0       	ldi	r30, 0x02	; 2
    d418:	0c 94 e7 e6 	jmp	0x1cdce	; 0x1cdce <__epilogue_restores__+0x20>

0000d41c <send_cmd>:
static
BYTE send_cmd (
BYTE cmd,                                         /*< Command index */
DWORD arg                                         /*< Argument */
)
{
    d41c:	ff 92       	push	r15
    d41e:	0f 93       	push	r16
    d420:	1f 93       	push	r17
    d422:	cf 93       	push	r28
    d424:	df 93       	push	r29
    d426:	c8 2f       	mov	r28, r24
    d428:	d4 2f       	mov	r29, r20
    d42a:	15 2f       	mov	r17, r21
    d42c:	06 2f       	mov	r16, r22
    d42e:	f7 2e       	mov	r15, r23
    BYTE n, res;

    if (cmd & 0x80)                               /* ACMD<n> is the command sequense of CMD55-CMD<n> */
    d430:	87 ff       	sbrs	r24, 7
    d432:	08 c0       	rjmp	.+16     	; 0xd444 <send_cmd+0x28>
    {
        cmd &= 0x7F;
        res = send_cmd(CMD55, 0);
    d434:	40 e0       	ldi	r20, 0x00	; 0
    d436:	50 e0       	ldi	r21, 0x00	; 0
    d438:	ba 01       	movw	r22, r20
    d43a:	87 e3       	ldi	r24, 0x37	; 55
    d43c:	ef df       	rcall	.-34     	; 0xd41c <send_cmd>
        if (res > 1) return res;
    d43e:	82 30       	cpi	r24, 0x02	; 2
    d440:	58 f5       	brcc	.+86     	; 0xd498 <send_cmd+0x7c>
{
    BYTE n, res;

    if (cmd & 0x80)                               /* ACMD<n> is the command sequense of CMD55-CMD<n> */
    {
        cmd &= 0x7F;
    d442:	cf 77       	andi	r28, 0x7F	; 127
        res = send_cmd(CMD55, 0);
        if (res > 1) return res;
    }

/* Select the card and wait for ready except to stop multiple block read */
    if (cmd != CMD12)
    d444:	cc 30       	cpi	r28, 0x0C	; 12
    d446:	71 f4       	brne	.+28     	; 0xd464 <send_cmd+0x48>
        deselect();
        if (!select()) return 0xFF;
    }

/* Send command packet */
    xchg_spi(0x40 | cmd);                         /* Start + Command index */
    d448:	8c 2f       	mov	r24, r28
    d44a:	80 64       	ori	r24, 0x40	; 64
    d44c:	88 df       	rcall	.-240    	; 0xd35e <xchg_spi>
    xchg_spi((BYTE)(arg >> 24));                  /* Argument[31..24] */
    d44e:	8f 2d       	mov	r24, r15
    d450:	86 df       	rcall	.-244    	; 0xd35e <xchg_spi>
    xchg_spi((BYTE)(arg >> 16));                  /* Argument[23..16] */
    d452:	80 2f       	mov	r24, r16
    d454:	84 df       	rcall	.-248    	; 0xd35e <xchg_spi>
    xchg_spi((BYTE)(arg >> 8));                   /* Argument[15..8] */
    d456:	81 2f       	mov	r24, r17
    d458:	82 df       	rcall	.-252    	; 0xd35e <xchg_spi>
    d45a:	8d 2f       	mov	r24, r29
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    d45c:	80 df       	rcall	.-256    	; 0xd35e <xchg_spi>
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    d45e:	cc 23       	and	r28, r28
    d460:	c9 f0       	breq	.+50     	; 0xd494 <send_cmd+0x78>
    d462:	06 c0       	rjmp	.+12     	; 0xd470 <send_cmd+0x54>
    }

/* Select the card and wait for ready except to stop multiple block read */
    if (cmd != CMD12)
    {
        deselect();
    d464:	7e df       	rcall	.-260    	; 0xd362 <deselect>
    d466:	b8 df       	rcall	.-144    	; 0xd3d8 <select>
        if (!select()) return 0xFF;
    d468:	89 2b       	or	r24, r25
    d46a:	71 f7       	brne	.-36     	; 0xd448 <send_cmd+0x2c>
    d46c:	8f ef       	ldi	r24, 0xFF	; 255
    d46e:	14 c0       	rjmp	.+40     	; 0xd498 <send_cmd+0x7c>
    d470:	c8 30       	cpi	r28, 0x08	; 8
    xchg_spi((BYTE)(arg >> 16));                  /* Argument[23..16] */
    xchg_spi((BYTE)(arg >> 8));                   /* Argument[15..8] */
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    if (cmd == CMD8) n = 0x87;                    /* Valid CRC for CMD8(0x1AA) Stop */
    d472:	11 f4       	brne	.+4      	; 0xd478 <send_cmd+0x5c>
    d474:	87 e8       	ldi	r24, 0x87	; 135
    d476:	01 c0       	rjmp	.+2      	; 0xd47a <send_cmd+0x5e>

    xchg_spi(n);
    d478:	81 e0       	ldi	r24, 0x01	; 1
    d47a:	71 df       	rcall	.-286    	; 0xd35e <xchg_spi>

/* Receive command response */
    if (cmd == CMD12) xchg_spi(0xFF);             /* Skip a stuff byte when stop reading */
    d47c:	cc 30       	cpi	r28, 0x0C	; 12
    d47e:	11 f4       	brne	.+4      	; 0xd484 <send_cmd+0x68>
    d480:	8f ef       	ldi	r24, 0xFF	; 255
    d482:	6d df       	rcall	.-294    	; 0xd35e <xchg_spi>
    d484:	ca e0       	ldi	r28, 0x0A	; 10
    xchg_spi((BYTE)(arg >> 16));                  /* Argument[23..16] */
    xchg_spi((BYTE)(arg >> 8));                   /* Argument[15..8] */
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    if (cmd == CMD8) n = 0x87;                    /* Valid CRC for CMD8(0x1AA) Stop */
    d486:	8f ef       	ldi	r24, 0xFF	; 255
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d488:	64 d4       	rcall	.+2248   	; 0xdd52 <mmc_spi_TXRX>
    d48a:	87 ff       	sbrs	r24, 7
    d48c:	05 c0       	rjmp	.+10     	; 0xd498 <send_cmd+0x7c>
    n = 10;                                       /* Wait for a valid response in timeout of 10 attempts */
    do
    {
        res = xchg_spi(0xFF);
    }
    while ((res & 0x80) && --n);
    d48e:	c1 50       	subi	r28, 0x01	; 1
    d490:	d1 f7       	brne	.-12     	; 0xd486 <send_cmd+0x6a>
    d492:	02 c0       	rjmp	.+4      	; 0xd498 <send_cmd+0x7c>
    d494:	85 e9       	ldi	r24, 0x95	; 149
    d496:	f5 cf       	rjmp	.-22     	; 0xd482 <send_cmd+0x66>
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    if (cmd == CMD8) n = 0x87;                    /* Valid CRC for CMD8(0x1AA) Stop */

    xchg_spi(n);
    d498:	cd b7       	in	r28, 0x3d	; 61
    d49a:	de b7       	in	r29, 0x3e	; 62
        res = xchg_spi(0xFF);
    }
    while ((res & 0x80) && --n);

    return res;                                   /* Return with the response value */
}
    d49c:	e5 e0       	ldi	r30, 0x05	; 5
    d49e:	0c 94 e4 e6 	jmp	0x1cdc8	; 0x1cdc8 <__epilogue_restores__+0x1a>

0000d4a2 <xmit_datablock>:
    d4a2:	0f 93       	push	r16
    d4a4:	1f 93       	push	r17
static
int xmit_datablock (
const BYTE *buff,                                 /*< 512 byte data block to be transmitted */
BYTE token                                        /*< Data/Stop token */
)
{
    d4a6:	cf 93       	push	r28
    d4a8:	8c 01       	movw	r16, r24
    d4aa:	c6 2f       	mov	r28, r22
    BYTE resp;

    if (!wait_ready(1000)) return 0;
    d4ac:	88 ee       	ldi	r24, 0xE8	; 232
    d4ae:	93 e0       	ldi	r25, 0x03	; 3
    d4b0:	81 df       	rcall	.-254    	; 0xd3b4 <wait_ready>
    d4b2:	00 97       	sbiw	r24, 0x00	; 0
    d4b4:	c9 f0       	breq	.+50     	; 0xd4e8 <xmit_datablock+0x46>

    xchg_spi(token);                              /* Xmit data token */
    d4b6:	8c 2f       	mov	r24, r28
    d4b8:	52 df       	rcall	.-348    	; 0xd35e <xchg_spi>
    if (token != 0xFD)                            /* Is data token */
    d4ba:	cd 3f       	cpi	r28, 0xFD	; 253
    d4bc:	99 f0       	breq	.+38     	; 0xd4e4 <xmit_datablock+0x42>
void xmit_spi_multi (
const BYTE *p,                                    /* Data block to be sent */
UINT cnt                                          /* Size of data block */
)
{
    mmc_spi_TX_buffer((uint8_t *)p, cnt);
    d4be:	60 e0       	ldi	r22, 0x00	; 0
    d4c0:	72 e0       	ldi	r23, 0x02	; 2
    d4c2:	c8 01       	movw	r24, r16
    xchg_spi(token);                              /* Xmit data token */
    if (token != 0xFD)                            /* Is data token */
    {
        xmit_spi_multi(buff, 512);                /* Xmit the data block to the MMC */

        xchg_spi(0xFF);                           /* CRC (Dummy) */
    d4c4:	40 d4       	rcall	.+2176   	; 0xdd46 <mmc_spi_TX_buffer>
    d4c6:	8f ef       	ldi	r24, 0xFF	; 255
        xchg_spi(0xFF);
    d4c8:	4a df       	rcall	.-364    	; 0xd35e <xchg_spi>
    d4ca:	8f ef       	ldi	r24, 0xFF	; 255
    d4cc:	48 df       	rcall	.-368    	; 0xd35e <xchg_spi>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d4ce:	8f ef       	ldi	r24, 0xFF	; 255
    d4d0:	40 d4       	rcall	.+2176   	; 0xdd52 <mmc_spi_TXRX>
    d4d2:	8f 71       	andi	r24, 0x1F	; 31
BYTE token                                        /*< Data/Stop token */
)
{
    BYTE resp;

    if (!wait_ready(1000)) return 0;
    d4d4:	31 e0       	ldi	r19, 0x01	; 1
    d4d6:	20 e0       	ldi	r18, 0x00	; 0
    d4d8:	85 30       	cpi	r24, 0x05	; 5
    d4da:	09 f0       	breq	.+2      	; 0xd4de <xmit_datablock+0x3c>
    d4dc:	30 e0       	ldi	r19, 0x00	; 0
    d4de:	83 2f       	mov	r24, r19
    d4e0:	92 2f       	mov	r25, r18
    d4e2:	02 c0       	rjmp	.+4      	; 0xd4e8 <xmit_datablock+0x46>
    d4e4:	81 e0       	ldi	r24, 0x01	; 1
        resp = xchg_spi(0xFF);                    /* Reveive data response */
        if ((resp & 0x1F) != 0x05)                /* If not accepted, return with error */
            return 0;
    }

    return 1;
    d4e6:	90 e0       	ldi	r25, 0x00	; 0
    d4e8:	cf 91       	pop	r28
}
    d4ea:	1f 91       	pop	r17
    d4ec:	0f 91       	pop	r16
    d4ee:	08 95       	ret

0000d4f0 <mmc_disk_initialize>:
    d4f0:	a4 e0       	ldi	r26, 0x04	; 4

///@brief Initialize Disk Drive
///@return Stat
MEMSPACE
DSTATUS mmc_disk_initialize (void)
{
    d4f2:	b0 e0       	ldi	r27, 0x00	; 0
    d4f4:	ee e7       	ldi	r30, 0x7E	; 126
    d4f6:	fa e6       	ldi	r31, 0x6A	; 106
    d4f8:	0c 94 c5 e6 	jmp	0x1cd8a	; 0x1cd8a <__prologue_saves__+0x14>
void power_off (void)
{
/* Disable SPI function */
/* De-configure MOSI/MISO/SCLK/CS pins (set hi-z) */
/* Turn socket power off (nothing to do if no power controls) */
    mmc_power_off();
    d4fc:	59 d4       	rcall	.+2226   	; 0xddb0 <mmc_power_off>
DSTATUS mmc_disk_initialize (void)
{
    BYTE n, cmd, ty, ocr[4];

    power_off();                                  /* Turn off the socket power to reset the card */
    delayms(100);                                 /* Wait for 100ms */
    d4fe:	64 e6       	ldi	r22, 0x64	; 100
    d500:	70 e0       	ldi	r23, 0x00	; 0
    d502:	80 e0       	ldi	r24, 0x00	; 0
    d504:	90 e0       	ldi	r25, 0x00	; 0
    d506:	0e 94 45 28 	call	0x508a	; 0x508a <delayms>

    if (Stat & STA_NODISK) return Stat;           /* No card in the socket? */
    d50a:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d50e:	81 fd       	sbrc	r24, 1
void power_on (void)
{
/* Turn socket power on and wait for 10ms+ (nothing to do if no power controls) */
/* Configure MOSI/MISO/SCLK/CS pins */
/* Enable SPI module in SPI mode 0 */
    mmc_power_on();
    d510:	8e c0       	rjmp	.+284    	; 0xd62e <mmc_disk_initialize+0x13e>
    delayms(100);                                 /* Wait for 100ms */

    if (Stat & STA_NODISK) return Stat;           /* No card in the socket? */
    power_on();                                   /* Turn on the socket power */

    FCLK_SLOW();
    d512:	4d d4       	rcall	.+2202   	; 0xddae <mmc_power_on>
    d514:	f9 d3       	rcall	.+2034   	; 0xdd08 <mmc_slow>

    for (n = 10; n; n--) xchg_spi(0xFF);          /* 80 dummy clocks */
    d516:	1a e0       	ldi	r17, 0x0A	; 10
    d518:	8f ef       	ldi	r24, 0xFF	; 255
    d51a:	21 df       	rcall	.-446    	; 0xd35e <xchg_spi>
    d51c:	11 50       	subi	r17, 0x01	; 1
    d51e:	e1 f7       	brne	.-8      	; 0xd518 <mmc_disk_initialize+0x28>

    ty = 0;
    if (send_cmd(CMD0, 0) == 1)                   /* Enter Idle state */
    d520:	40 e0       	ldi	r20, 0x00	; 0
    d522:	50 e0       	ldi	r21, 0x00	; 0
    d524:	ba 01       	movw	r22, r20
    d526:	80 e0       	ldi	r24, 0x00	; 0
    d528:	79 df       	rcall	.-270    	; 0xd41c <send_cmd>
    d52a:	81 30       	cpi	r24, 0x01	; 1
    d52c:	09 f0       	breq	.+2      	; 0xd530 <mmc_disk_initialize+0x40>
    {
        mmc_set_ms_timeout(2000);                 /* Initialization timeout of 1000 msec */
    d52e:	6f c0       	rjmp	.+222    	; 0xd60e <mmc_disk_initialize+0x11e>
    d530:	80 ed       	ldi	r24, 0xD0	; 208
    d532:	97 e0       	ldi	r25, 0x07	; 7
        if (send_cmd(CMD8, 0x1AA) == 1)           /* SDv2? */
    d534:	11 d4       	rcall	.+2082   	; 0xdd58 <mmc_set_ms_timeout>
    d536:	4a ea       	ldi	r20, 0xAA	; 170
    d538:	51 e0       	ldi	r21, 0x01	; 1
    d53a:	60 e0       	ldi	r22, 0x00	; 0
    d53c:	70 e0       	ldi	r23, 0x00	; 0
    d53e:	88 e0       	ldi	r24, 0x08	; 8
    d540:	6d df       	rcall	.-294    	; 0xd41c <send_cmd>
    d542:	81 30       	cpi	r24, 0x01	; 1
    d544:	09 f0       	breq	.+2      	; 0xd548 <mmc_disk_initialize+0x58>
    d546:	3d c0       	rjmp	.+122    	; 0xd5c2 <mmc_disk_initialize+0xd2>
    d548:	8e 01       	movw	r16, r28
    d54a:	0f 5f       	subi	r16, 0xFF	; 255
    d54c:	1f 4f       	sbci	r17, 0xFF	; 255
    d54e:	6e 01       	movw	r12, r28
    d550:	85 e0       	ldi	r24, 0x05	; 5
    d552:	c8 0e       	add	r12, r24
    d554:	d1 1c       	adc	r13, r1
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d556:	78 01       	movw	r14, r16
    d558:	8f ef       	ldi	r24, 0xFF	; 255
    d55a:	fb d3       	rcall	.+2038   	; 0xdd52 <mmc_spi_TXRX>
    {
        mmc_set_ms_timeout(2000);                 /* Initialization timeout of 1000 msec */
        if (send_cmd(CMD8, 0x1AA) == 1)           /* SDv2? */
        {
            for (n = 0; n < 4; n++)
                ocr[n] = xchg_spi(0xFF);          /* Get trailing return value of R7 resp */
    d55c:	f7 01       	movw	r30, r14
    d55e:	81 93       	st	Z+, r24
    d560:	7f 01       	movw	r14, r30
    if (send_cmd(CMD0, 0) == 1)                   /* Enter Idle state */
    {
        mmc_set_ms_timeout(2000);                 /* Initialization timeout of 1000 msec */
        if (send_cmd(CMD8, 0x1AA) == 1)           /* SDv2? */
        {
            for (n = 0; n < 4; n++)
    d562:	ce 16       	cp	r12, r30
    d564:	df 06       	cpc	r13, r31
    d566:	c1 f7       	brne	.-16     	; 0xd558 <mmc_disk_initialize+0x68>
                ocr[n] = xchg_spi(0xFF);          /* Get trailing return value of R7 resp */
            if (ocr[2] == 0x01 && ocr[3] == 0xAA) /* The card can work at vdd range of 2.7-3.6V */
    d568:	8b 81       	ldd	r24, Y+3	; 0x03
    d56a:	81 30       	cpi	r24, 0x01	; 1
    d56c:	09 f0       	breq	.+2      	; 0xd570 <mmc_disk_initialize+0x80>
    d56e:	4f c0       	rjmp	.+158    	; 0xd60e <mmc_disk_initialize+0x11e>
    d570:	8c 81       	ldd	r24, Y+4	; 0x04
    d572:	8a 3a       	cpi	r24, 0xAA	; 170
    d574:	09 f0       	breq	.+2      	; 0xd578 <mmc_disk_initialize+0x88>
            {
/* Wait for leaving idle state (ACMD41 with HCS bit) */
                while (!mmc_test_timeout() && send_cmd(ACMD41, 1UL << 30))
    d576:	4b c0       	rjmp	.+150    	; 0xd60e <mmc_disk_initialize+0x11e>
    d578:	f6 d3       	rcall	.+2028   	; 0xdd66 <mmc_test_timeout>
    d57a:	89 2b       	or	r24, r25
    d57c:	29 f0       	breq	.+10     	; 0xd588 <mmc_disk_initialize+0x98>
                    ;
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
    d57e:	f3 d3       	rcall	.+2022   	; 0xdd66 <mmc_test_timeout>
    d580:	89 2b       	or	r24, r25
    d582:	09 f0       	breq	.+2      	; 0xd586 <mmc_disk_initialize+0x96>
    d584:	44 c0       	rjmp	.+136    	; 0xd60e <mmc_disk_initialize+0x11e>
    d586:	09 c0       	rjmp	.+18     	; 0xd59a <mmc_disk_initialize+0xaa>
            for (n = 0; n < 4; n++)
                ocr[n] = xchg_spi(0xFF);          /* Get trailing return value of R7 resp */
            if (ocr[2] == 0x01 && ocr[3] == 0xAA) /* The card can work at vdd range of 2.7-3.6V */
            {
/* Wait for leaving idle state (ACMD41 with HCS bit) */
                while (!mmc_test_timeout() && send_cmd(ACMD41, 1UL << 30))
    d588:	40 e0       	ldi	r20, 0x00	; 0
    d58a:	50 e0       	ldi	r21, 0x00	; 0
    d58c:	60 e0       	ldi	r22, 0x00	; 0
    d58e:	70 e4       	ldi	r23, 0x40	; 64
    d590:	89 ea       	ldi	r24, 0xA9	; 169
    d592:	44 df       	rcall	.-376    	; 0xd41c <send_cmd>
    d594:	81 11       	cpse	r24, r1
    d596:	f0 cf       	rjmp	.-32     	; 0xd578 <mmc_disk_initialize+0x88>
                    ;
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
    d598:	f2 cf       	rjmp	.-28     	; 0xd57e <mmc_disk_initialize+0x8e>
    d59a:	40 e0       	ldi	r20, 0x00	; 0
    d59c:	50 e0       	ldi	r21, 0x00	; 0
    d59e:	ba 01       	movw	r22, r20
    d5a0:	8a e3       	ldi	r24, 0x3A	; 58
    d5a2:	3c df       	rcall	.-392    	; 0xd41c <send_cmd>
    d5a4:	81 11       	cpse	r24, r1
    d5a6:	33 c0       	rjmp	.+102    	; 0xd60e <mmc_disk_initialize+0x11e>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d5a8:	8f ef       	ldi	r24, 0xFF	; 255
    d5aa:	d3 d3       	rcall	.+1958   	; 0xdd52 <mmc_spi_TXRX>
    d5ac:	f8 01       	movw	r30, r16
                while (!mmc_test_timeout() && send_cmd(ACMD41, 1UL << 30))
                    ;
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
                {
                    for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
    d5ae:	81 93       	st	Z+, r24
    d5b0:	8f 01       	movw	r16, r30
    d5b2:	ce 16       	cp	r12, r30
    d5b4:	df 06       	cpc	r13, r31
    d5b6:	c1 f7       	brne	.-16     	; 0xd5a8 <mmc_disk_initialize+0xb8>
/* Check if the card is SDv2 */
                    ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
    d5b8:	89 81       	ldd	r24, Y+1	; 0x01
    d5ba:	86 fd       	sbrc	r24, 6
    d5bc:	2a c0       	rjmp	.+84     	; 0xd612 <mmc_disk_initialize+0x122>
    d5be:	14 e0       	ldi	r17, 0x04	; 4
    d5c0:	29 c0       	rjmp	.+82     	; 0xd614 <mmc_disk_initialize+0x124>
                }
            }
        }
        else
        {                                         /* SDv1 or MMCv3 */
            mmc_set_ms_timeout(2000);             /* Initialization timeout of 2000 msec */
    d5c2:	80 ed       	ldi	r24, 0xD0	; 208
    d5c4:	97 e0       	ldi	r25, 0x07	; 7
    d5c6:	c8 d3       	rcall	.+1936   	; 0xdd58 <mmc_set_ms_timeout>
            if (send_cmd(ACMD41, 0) <= 1)
    d5c8:	40 e0       	ldi	r20, 0x00	; 0
    d5ca:	50 e0       	ldi	r21, 0x00	; 0
    d5cc:	ba 01       	movw	r22, r20
    d5ce:	89 ea       	ldi	r24, 0xA9	; 169
    d5d0:	25 df       	rcall	.-438    	; 0xd41c <send_cmd>
    d5d2:	82 30       	cpi	r24, 0x02	; 2
    d5d4:	18 f0       	brcs	.+6      	; 0xd5dc <mmc_disk_initialize+0xec>
            {
                ty = CT_SD1; cmd = ACMD41;        /* SDv1 */
            }
            else
            {
                ty = CT_MMC; cmd = CMD1;          /* MMCv3 */
    d5d6:	11 e0       	ldi	r17, 0x01	; 1
    d5d8:	01 e0       	ldi	r16, 0x01	; 1
        else
        {                                         /* SDv1 or MMCv3 */
            mmc_set_ms_timeout(2000);             /* Initialization timeout of 2000 msec */
            if (send_cmd(ACMD41, 0) <= 1)
            {
                ty = CT_SD1; cmd = ACMD41;        /* SDv1 */
    d5da:	02 c0       	rjmp	.+4      	; 0xd5e0 <mmc_disk_initialize+0xf0>
    d5dc:	12 e0       	ldi	r17, 0x02	; 2
            else
            {
                ty = CT_MMC; cmd = CMD1;          /* MMCv3 */
            }
/* Wait for leaving idle state */
            while (!mmc_test_timeout() && send_cmd(cmd, 0))
    d5de:	09 ea       	ldi	r16, 0xA9	; 169
    d5e0:	c2 d3       	rcall	.+1924   	; 0xdd66 <mmc_test_timeout>
    d5e2:	89 2b       	or	r24, r25
    d5e4:	21 f0       	breq	.+8      	; 0xd5ee <mmc_disk_initialize+0xfe>
                ;
/* Set R/W block length to 512 */
            if (mmc_test_timeout() || send_cmd(CMD16, 512) != 0)
    d5e6:	bf d3       	rcall	.+1918   	; 0xdd66 <mmc_test_timeout>
    d5e8:	89 2b       	or	r24, r25
    d5ea:	89 f4       	brne	.+34     	; 0xd60e <mmc_disk_initialize+0x11e>
    d5ec:	08 c0       	rjmp	.+16     	; 0xd5fe <mmc_disk_initialize+0x10e>
            else
            {
                ty = CT_MMC; cmd = CMD1;          /* MMCv3 */
            }
/* Wait for leaving idle state */
            while (!mmc_test_timeout() && send_cmd(cmd, 0))
    d5ee:	40 e0       	ldi	r20, 0x00	; 0
    d5f0:	50 e0       	ldi	r21, 0x00	; 0
    d5f2:	ba 01       	movw	r22, r20
    d5f4:	80 2f       	mov	r24, r16
    d5f6:	12 df       	rcall	.-476    	; 0xd41c <send_cmd>
    d5f8:	81 11       	cpse	r24, r1
    d5fa:	f2 cf       	rjmp	.-28     	; 0xd5e0 <mmc_disk_initialize+0xf0>
    d5fc:	f4 cf       	rjmp	.-24     	; 0xd5e6 <mmc_disk_initialize+0xf6>
                ;
/* Set R/W block length to 512 */
            if (mmc_test_timeout() || send_cmd(CMD16, 512) != 0)
    d5fe:	40 e0       	ldi	r20, 0x00	; 0
    d600:	52 e0       	ldi	r21, 0x02	; 2
    d602:	60 e0       	ldi	r22, 0x00	; 0
    d604:	70 e0       	ldi	r23, 0x00	; 0
    d606:	80 e1       	ldi	r24, 0x10	; 16
    d608:	09 df       	rcall	.-494    	; 0xd41c <send_cmd>
    d60a:	88 23       	and	r24, r24
                ty = 0;
    d60c:	19 f0       	breq	.+6      	; 0xd614 <mmc_disk_initialize+0x124>
    d60e:	10 e0       	ldi	r17, 0x00	; 0
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
                {
                    for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
/* Check if the card is SDv2 */
                    ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
    d610:	01 c0       	rjmp	.+2      	; 0xd614 <mmc_disk_initialize+0x124>
            if (mmc_test_timeout() || send_cmd(CMD16, 512) != 0)
                ty = 0;
        }
    }

    CardType = ty;
    d612:	1c e0       	ldi	r17, 0x0C	; 12
    d614:	10 93 23 18 	sts	0x1823, r17	; 0x801823 <CardType>
    deselect();
    d618:	a4 de       	rcall	.-696    	; 0xd362 <deselect>

    if (ty)                                       /* Initialization succeded */
    d61a:	11 23       	and	r17, r17
    d61c:	39 f0       	breq	.+14     	; 0xd62c <mmc_disk_initialize+0x13c>
    {
        Stat &= ~STA_NOINIT;                      /* Clear STA_NOINIT */
    d61e:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d622:	8e 7f       	andi	r24, 0xFE	; 254
    d624:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Stat>
        FCLK_FAST();
    d628:	81 d3       	rcall	.+1794   	; 0xdd2c <mmc_fast>
    d62a:	01 c0       	rjmp	.+2      	; 0xd62e <mmc_disk_initialize+0x13e>
    d62c:	c1 d3       	rcall	.+1922   	; 0xddb0 <mmc_power_off>
void power_off (void)
{
/* Disable SPI function */
/* De-configure MOSI/MISO/SCLK/CS pins (set hi-z) */
/* Turn socket power off (nothing to do if no power controls) */
    mmc_power_off();
    d62e:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    else
    {
        power_off();
    }

    return Stat;
    d632:	24 96       	adiw	r28, 0x04	; 4
    d634:	e8 e0       	ldi	r30, 0x08	; 8
}
    d636:	0c 94 e1 e6 	jmp	0x1cdc2	; 0x1cdc2 <__epilogue_restores__+0x14>

0000d63a <mmc_disk_status>:
    d63a:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
/// @return STA_NOINIT if no drive
MEMSPACE
DSTATUS mmc_disk_status ( void )
{
    return Stat;
}
    d63e:	08 95       	ret

0000d640 <mmc_disk_read>:
DRESULT mmc_disk_read (
BYTE *buff,                                       /*< Pointer to the data buffer to store read data */
DWORD sector,                                     /*< Start sector number (LBA) */
UINT count                                        /*< Sector count (1..128) */
)
{
    d640:	8f 92       	push	r8
    d642:	9f 92       	push	r9
    d644:	af 92       	push	r10
    d646:	bf 92       	push	r11
    d648:	ef 92       	push	r14
    d64a:	ff 92       	push	r15
    d64c:	1f 93       	push	r17
    d64e:	cf 93       	push	r28
    d650:	df 93       	push	r29
    d652:	7c 01       	movw	r14, r24
    d654:	4a 01       	movw	r8, r20
    d656:	5b 01       	movw	r10, r22
    d658:	e9 01       	movw	r28, r18
    BYTE cmd;

    if (!count)
    d65a:	20 97       	sbiw	r28, 0x00	; 0
    d65c:	19 f4       	brne	.+6      	; 0xd664 <mmc_disk_read+0x24>
    {
        deselect();
    d65e:	81 de       	rcall	.-766    	; 0xd362 <deselect>
        return RES_PARERR;
    d660:	84 e0       	ldi	r24, 0x04	; 4
    d662:	0d c0       	rjmp	.+26     	; 0xd67e <mmc_disk_read+0x3e>
    }

	if( Stat )
    d664:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d668:	88 23       	and	r24, r24
    d66a:	19 f0       	breq	.+6      	; 0xd672 <mmc_disk_read+0x32>
		set_error(1);
    d66c:	81 e0       	ldi	r24, 0x01	; 1
    d66e:	0e 94 e5 26 	call	0x4dca	; 0x4dca <set_error>

    if (Stat & STA_NOINIT)
    d672:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d676:	80 ff       	sbrs	r24, 0
    {
        deselect();
    d678:	04 c0       	rjmp	.+8      	; 0xd682 <mmc_disk_read+0x42>
    d67a:	73 de       	rcall	.-794    	; 0xd362 <deselect>
        return RES_NOTRDY;
    d67c:	83 e0       	ldi	r24, 0x03	; 3
    d67e:	90 e0       	ldi	r25, 0x00	; 0
    d680:	36 c0       	rjmp	.+108    	; 0xd6ee <mmc_disk_read+0xae>
    }
    if (Stat & STA_NODISK)
    d682:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d686:	81 fd       	sbrc	r24, 1
    d688:	f8 cf       	rjmp	.-16     	; 0xd67a <mmc_disk_read+0x3a>
    {
        deselect();
        return RES_NOTRDY;
	}
    GPIO_PIN_HI(LED1);
    d68a:	46 9a       	sbi	0x08, 6	; 8
    d68c:	3e 9a       	sbi	0x07, 6	; 7

    if (!(CardType & CT_BLOCK)) sector *= 512;    /* Convert to byte address if needed */
    d68e:	80 91 23 18 	lds	r24, 0x1823	; 0x801823 <CardType>
    d692:	83 fd       	sbrc	r24, 3
    d694:	07 c0       	rjmp	.+14     	; 0xd6a4 <mmc_disk_read+0x64>
    d696:	89 e0       	ldi	r24, 0x09	; 9
    d698:	88 0c       	add	r8, r8
    d69a:	99 1c       	adc	r9, r9
    d69c:	aa 1c       	adc	r10, r10
    d69e:	bb 1c       	adc	r11, r11
    d6a0:	8a 95       	dec	r24
    d6a2:	d1 f7       	brne	.-12     	; 0xd698 <mmc_disk_read+0x58>

    cmd = count > 1 ? CMD18 : CMD17;              /*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    d6a4:	c2 30       	cpi	r28, 0x02	; 2
    d6a6:	d1 05       	cpc	r29, r1
    d6a8:	10 f4       	brcc	.+4      	; 0xd6ae <mmc_disk_read+0x6e>
    d6aa:	11 e1       	ldi	r17, 0x11	; 17
    d6ac:	01 c0       	rjmp	.+2      	; 0xd6b0 <mmc_disk_read+0x70>
    d6ae:	12 e1       	ldi	r17, 0x12	; 18
    if (send_cmd(cmd, sector) == 0)
    d6b0:	b5 01       	movw	r22, r10
    d6b2:	a4 01       	movw	r20, r8
    d6b4:	81 2f       	mov	r24, r17
    d6b6:	b2 de       	rcall	.-668    	; 0xd41c <send_cmd>
    d6b8:	81 11       	cpse	r24, r1
    d6ba:	11 c0       	rjmp	.+34     	; 0xd6de <mmc_disk_read+0x9e>
    {
        do
        {
            if (!rcvr_datablock(buff, 512))
    d6bc:	60 e0       	ldi	r22, 0x00	; 0
    d6be:	72 e0       	ldi	r23, 0x02	; 2
    d6c0:	c7 01       	movw	r24, r14
    d6c2:	55 de       	rcall	.-854    	; 0xd36e <rcvr_datablock>
    d6c4:	89 2b       	or	r24, r25
    d6c6:	21 f0       	breq	.+8      	; 0xd6d0 <mmc_disk_read+0x90>
                break;
            buff += 512;
    d6c8:	8e ef       	ldi	r24, 0xFE	; 254
    d6ca:	f8 1a       	sub	r15, r24
        } while (--count);
    d6cc:	21 97       	sbiw	r28, 0x01	; 1
    d6ce:	b1 f7       	brne	.-20     	; 0xd6bc <mmc_disk_read+0x7c>
        if (cmd == CMD18) send_cmd(CMD12, 0);     /* STOP_TRANSMISSION */
    d6d0:	12 31       	cpi	r17, 0x12	; 18
    d6d2:	29 f4       	brne	.+10     	; 0xd6de <mmc_disk_read+0x9e>
    d6d4:	40 e0       	ldi	r20, 0x00	; 0
    d6d6:	50 e0       	ldi	r21, 0x00	; 0
    d6d8:	ba 01       	movw	r22, r20
    d6da:	8c e0       	ldi	r24, 0x0C	; 12
    }
    deselect();
    d6dc:	9f de       	rcall	.-706    	; 0xd41c <send_cmd>
    d6de:	41 de       	rcall	.-894    	; 0xd362 <deselect>
    GPIO_PIN_LOW(LED1);
    d6e0:	46 98       	cbi	0x08, 6	; 8
    d6e2:	3e 9a       	sbi	0x07, 6	; 7

    return count ? RES_ERROR : RES_OK;
    d6e4:	81 e0       	ldi	r24, 0x01	; 1
    d6e6:	90 e0       	ldi	r25, 0x00	; 0
    d6e8:	cd 2b       	or	r28, r29
    d6ea:	09 f4       	brne	.+2      	; 0xd6ee <mmc_disk_read+0xae>
    d6ec:	80 e0       	ldi	r24, 0x00	; 0
}
    d6ee:	df 91       	pop	r29
    d6f0:	cf 91       	pop	r28
    d6f2:	1f 91       	pop	r17
    d6f4:	ff 90       	pop	r15
    d6f6:	ef 90       	pop	r14
    d6f8:	bf 90       	pop	r11
    d6fa:	af 90       	pop	r10
    d6fc:	9f 90       	pop	r9
    d6fe:	8f 90       	pop	r8
    d700:	08 95       	ret

0000d702 <mmc_disk_write>:
DRESULT mmc_disk_write (
const BYTE *buff,                                 /*< Pointer to the data to be written */
DWORD sector,                                     /*< Start sector number (LBA) */
UINT count                                        /* Sector count (1..128) */
)
{
    d702:	a0 e0       	ldi	r26, 0x00	; 0
    d704:	b0 e0       	ldi	r27, 0x00	; 0
    d706:	e7 e8       	ldi	r30, 0x87	; 135
    d708:	fb e6       	ldi	r31, 0x6B	; 107
    d70a:	0c 94 c5 e6 	jmp	0x1cd8a	; 0x1cd8a <__prologue_saves__+0x14>
    d70e:	8c 01       	movw	r16, r24
    d710:	6a 01       	movw	r12, r20
    d712:	7b 01       	movw	r14, r22
    d714:	e9 01       	movw	r28, r18
    if (!count)
    d716:	20 97       	sbiw	r28, 0x00	; 0
    d718:	19 f4       	brne	.+6      	; 0xd720 <mmc_disk_write+0x1e>
    {
        deselect();
    d71a:	23 de       	rcall	.-954    	; 0xd362 <deselect>
        return RES_PARERR;
    d71c:	84 e0       	ldi	r24, 0x04	; 4
    d71e:	18 c0       	rjmp	.+48     	; 0xd750 <mmc_disk_write+0x4e>
    }

	if( Stat )
    d720:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d724:	88 23       	and	r24, r24
    d726:	19 f0       	breq	.+6      	; 0xd72e <mmc_disk_write+0x2c>
		set_error(1);
    d728:	81 e0       	ldi	r24, 0x01	; 1
    d72a:	0e 94 e5 26 	call	0x4dca	; 0x4dca <set_error>

    if (Stat & STA_NOINIT)
    d72e:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d732:	80 ff       	sbrs	r24, 0
    {
        deselect();
    d734:	03 c0       	rjmp	.+6      	; 0xd73c <mmc_disk_write+0x3a>
    d736:	15 de       	rcall	.-982    	; 0xd362 <deselect>
        return RES_NOTRDY;
    d738:	83 e0       	ldi	r24, 0x03	; 3
    d73a:	0a c0       	rjmp	.+20     	; 0xd750 <mmc_disk_write+0x4e>
    }
    if (Stat & STA_NODISK)
    d73c:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d740:	81 fd       	sbrc	r24, 1
    d742:	f9 cf       	rjmp	.-14     	; 0xd736 <mmc_disk_write+0x34>
    {
        deselect();
        return RES_NOTRDY;
	}
    if (Stat & STA_PROTECT)
    d744:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d748:	82 ff       	sbrs	r24, 2
    {
        deselect();
    d74a:	04 c0       	rjmp	.+8      	; 0xd754 <mmc_disk_write+0x52>
    d74c:	0a de       	rcall	.-1004   	; 0xd362 <deselect>
        return RES_WRPRT;
    d74e:	82 e0       	ldi	r24, 0x02	; 2
    d750:	90 e0       	ldi	r25, 0x00	; 0
    d752:	46 c0       	rjmp	.+140    	; 0xd7e0 <mmc_disk_write+0xde>
    }

    GPIO_PIN_HI(LED1);
    d754:	46 9a       	sbi	0x08, 6	; 8
    d756:	3e 9a       	sbi	0x07, 6	; 7

    if (!(CardType & CT_BLOCK)) sector *= 512;    /* Convert to byte address if needed */
    d758:	80 91 23 18 	lds	r24, 0x1823	; 0x801823 <CardType>
    d75c:	83 fd       	sbrc	r24, 3
    d75e:	07 c0       	rjmp	.+14     	; 0xd76e <mmc_disk_write+0x6c>
    d760:	99 e0       	ldi	r25, 0x09	; 9
    d762:	cc 0c       	add	r12, r12
    d764:	dd 1c       	adc	r13, r13
    d766:	ee 1c       	adc	r14, r14
    d768:	ff 1c       	adc	r15, r15
    d76a:	9a 95       	dec	r25
    d76c:	d1 f7       	brne	.-12     	; 0xd762 <mmc_disk_write+0x60>

    if (count == 1)                               /* Single block write */
    d76e:	c1 30       	cpi	r28, 0x01	; 1
    d770:	d1 05       	cpc	r29, r1
    d772:	89 f4       	brne	.+34     	; 0xd796 <mmc_disk_write+0x94>
    {
        if ((send_cmd(CMD24, sector) == 0)        /* WRITE_BLOCK */
    d774:	b7 01       	movw	r22, r14
    d776:	a6 01       	movw	r20, r12
    d778:	88 e1       	ldi	r24, 0x18	; 24
    d77a:	50 de       	rcall	.-864    	; 0xd41c <send_cmd>
    d77c:	81 11       	cpse	r24, r1
            && xmit_datablock(buff, 0xFE))
    d77e:	26 c0       	rjmp	.+76     	; 0xd7cc <mmc_disk_write+0xca>
    d780:	6e ef       	ldi	r22, 0xFE	; 254
    d782:	c8 01       	movw	r24, r16
    d784:	8e de       	rcall	.-740    	; 0xd4a2 <xmit_datablock>
    d786:	31 e0       	ldi	r19, 0x01	; 1
    d788:	20 e0       	ldi	r18, 0x00	; 0
    d78a:	89 2b       	or	r24, r25
    d78c:	09 f0       	breq	.+2      	; 0xd790 <mmc_disk_write+0x8e>
    d78e:	30 e0       	ldi	r19, 0x00	; 0
    d790:	c3 2f       	mov	r28, r19
    d792:	d2 2f       	mov	r29, r18
    d794:	1d c0       	rjmp	.+58     	; 0xd7d0 <mmc_disk_write+0xce>
            count = 0;
    }
    else                                          /* Multiple block write */
    {
        if (CardType & CT_SDC) send_cmd(ACMD23, count);
    d796:	86 70       	andi	r24, 0x06	; 6
    d798:	29 f0       	breq	.+10     	; 0xd7a4 <mmc_disk_write+0xa2>
    d79a:	ae 01       	movw	r20, r28
    d79c:	60 e0       	ldi	r22, 0x00	; 0
    d79e:	70 e0       	ldi	r23, 0x00	; 0
    d7a0:	87 e9       	ldi	r24, 0x97	; 151
        if (send_cmd(CMD25, sector) == 0)         /* WRITE_MULTIPLE_BLOCK */
    d7a2:	3c de       	rcall	.-904    	; 0xd41c <send_cmd>
    d7a4:	b7 01       	movw	r22, r14
    d7a6:	a6 01       	movw	r20, r12
    d7a8:	89 e1       	ldi	r24, 0x19	; 25
    d7aa:	38 de       	rcall	.-912    	; 0xd41c <send_cmd>
    d7ac:	81 11       	cpse	r24, r1
        {
            do
            {
                if (!xmit_datablock(buff, 0xFC)) break;
    d7ae:	10 c0       	rjmp	.+32     	; 0xd7d0 <mmc_disk_write+0xce>
    d7b0:	6c ef       	ldi	r22, 0xFC	; 252
    d7b2:	c8 01       	movw	r24, r16
    d7b4:	76 de       	rcall	.-788    	; 0xd4a2 <xmit_datablock>
    d7b6:	89 2b       	or	r24, r25
                buff += 512;
    d7b8:	19 f0       	breq	.+6      	; 0xd7c0 <mmc_disk_write+0xbe>
            } while (--count);
    d7ba:	1e 5f       	subi	r17, 0xFE	; 254
    d7bc:	21 97       	sbiw	r28, 0x01	; 1
            if (!xmit_datablock(0, 0xFD))         /* STOP_TRAN token */
    d7be:	c1 f7       	brne	.-16     	; 0xd7b0 <mmc_disk_write+0xae>
    d7c0:	6d ef       	ldi	r22, 0xFD	; 253
    d7c2:	80 e0       	ldi	r24, 0x00	; 0
    d7c4:	90 e0       	ldi	r25, 0x00	; 0
    d7c6:	6d de       	rcall	.-806    	; 0xd4a2 <xmit_datablock>
    d7c8:	89 2b       	or	r24, r25
                count = 1;
    d7ca:	11 f4       	brne	.+4      	; 0xd7d0 <mmc_disk_write+0xce>
    d7cc:	c1 e0       	ldi	r28, 0x01	; 1
        }
    }
    deselect();
    d7ce:	d0 e0       	ldi	r29, 0x00	; 0
    d7d0:	c8 dd       	rcall	.-1136   	; 0xd362 <deselect>
    GPIO_PIN_LOW(LED1);
    d7d2:	46 98       	cbi	0x08, 6	; 8
    d7d4:	3e 9a       	sbi	0x07, 6	; 7

    return count ? RES_ERROR : RES_OK;
    d7d6:	81 e0       	ldi	r24, 0x01	; 1
    d7d8:	90 e0       	ldi	r25, 0x00	; 0
    d7da:	cd 2b       	or	r28, r29
    d7dc:	09 f4       	brne	.+2      	; 0xd7e0 <mmc_disk_write+0xde>
    d7de:	80 e0       	ldi	r24, 0x00	; 0
}
    d7e0:	cd b7       	in	r28, 0x3d	; 61
    d7e2:	de b7       	in	r29, 0x3e	; 62
    d7e4:	e8 e0       	ldi	r30, 0x08	; 8
    d7e6:	0c 94 e1 e6 	jmp	0x1cdc2	; 0x1cdc2 <__epilogue_restores__+0x14>

0000d7ea <mmc_disk_ioctl>:
MEMSPACE
DRESULT mmc_disk_ioctl (
BYTE cmd,                                         /* Control code */
void *buff                                        /* Buffer to send/receive control data */
)
{
    d7ea:	a0 e1       	ldi	r26, 0x10	; 16
    d7ec:	b0 e0       	ldi	r27, 0x00	; 0
    d7ee:	eb ef       	ldi	r30, 0xFB	; 251
    d7f0:	fb e6       	ldi	r31, 0x6B	; 107
    d7f2:	0c 94 c5 e6 	jmp	0x1cd8a	; 0x1cd8a <__prologue_saves__+0x14>
    SDIO_CTRL *sdi;
    BYTE rc, *bp;
    UINT dc;
#endif

    if (Stat & STA_NOINIT)
    d7f6:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <Stat>
    d7fa:	90 fd       	sbrc	r25, 0
    d7fc:	31 c2       	rjmp	.+1122   	; 0xdc60 <mmc_disk_ioctl+0x476>
    d7fe:	8b 01       	movw	r16, r22
        return RES_NOTRDY;

    if (Stat & STA_NODISK)
    d800:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <Stat>
    d804:	91 ff       	sbrs	r25, 1
    d806:	02 c0       	rjmp	.+4      	; 0xd80c <mmc_disk_ioctl+0x22>
    {
        deselect();
    d808:	ac dd       	rcall	.-1192   	; 0xd362 <deselect>
    d80a:	2a c2       	rjmp	.+1108   	; 0xdc60 <mmc_disk_ioctl+0x476>
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    switch (cmd)
    d80c:	83 33       	cpi	r24, 0x33	; 51
    d80e:	09 f4       	brne	.+2      	; 0xd812 <mmc_disk_ioctl+0x28>
    d810:	01 c1       	rjmp	.+514    	; 0xda14 <mmc_disk_ioctl+0x22a>
    d812:	a0 f4       	brcc	.+40     	; 0xd83c <mmc_disk_ioctl+0x52>
    d814:	83 30       	cpi	r24, 0x03	; 3
    d816:	09 f4       	brne	.+2      	; 0xd81a <mmc_disk_ioctl+0x30>
    d818:	85 c0       	rjmp	.+266    	; 0xd924 <mmc_disk_ioctl+0x13a>
    d81a:	28 f4       	brcc	.+10     	; 0xd826 <mmc_disk_ioctl+0x3c>
    d81c:	88 23       	and	r24, r24
    d81e:	11 f1       	breq	.+68     	; 0xd864 <mmc_disk_ioctl+0x7a>
    d820:	81 30       	cpi	r24, 0x01	; 1
    d822:	11 f1       	breq	.+68     	; 0xd868 <mmc_disk_ioctl+0x7e>
    d824:	1f c2       	rjmp	.+1086   	; 0xdc64 <mmc_disk_ioctl+0x47a>
    d826:	87 30       	cpi	r24, 0x07	; 7
    d828:	09 f4       	brne	.+2      	; 0xd82c <mmc_disk_ioctl+0x42>
    d82a:	2a c1       	rjmp	.+596    	; 0xda80 <mmc_disk_ioctl+0x296>
    d82c:	82 33       	cpi	r24, 0x32	; 50
    d82e:	09 f0       	breq	.+2      	; 0xd832 <mmc_disk_ioctl+0x48>
    d830:	19 c2       	rjmp	.+1074   	; 0xdc64 <mmc_disk_ioctl+0x47a>
#endif

/* Following commands are never used by FatFs module */

        case MMC_GET_TYPE :                       /* Get card type flags (1 byte) */
            *ptr = CardType;
    d832:	80 91 23 18 	lds	r24, 0x1823	; 0x801823 <CardType>
    d836:	fb 01       	movw	r30, r22
    d838:	80 83       	st	Z, r24
    d83a:	28 c1       	rjmp	.+592    	; 0xda8c <mmc_disk_ioctl+0x2a2>
        deselect();
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    switch (cmd)
    d83c:	86 33       	cpi	r24, 0x36	; 54
    d83e:	09 f4       	brne	.+2      	; 0xd842 <mmc_disk_ioctl+0x58>
    d840:	0c c1       	rjmp	.+536    	; 0xda5a <mmc_disk_ioctl+0x270>
    d842:	38 f4       	brcc	.+14     	; 0xd852 <mmc_disk_ioctl+0x68>
    d844:	84 33       	cpi	r24, 0x34	; 52
    d846:	09 f4       	brne	.+2      	; 0xd84a <mmc_disk_ioctl+0x60>
    d848:	ea c0       	rjmp	.+468    	; 0xda1e <mmc_disk_ioctl+0x234>
    d84a:	85 33       	cpi	r24, 0x35	; 53
    d84c:	09 f4       	brne	.+2      	; 0xd850 <mmc_disk_ioctl+0x66>
    d84e:	f1 c0       	rjmp	.+482    	; 0xda32 <mmc_disk_ioctl+0x248>
    d850:	09 c2       	rjmp	.+1042   	; 0xdc64 <mmc_disk_ioctl+0x47a>
    d852:	88 33       	cpi	r24, 0x38	; 56
    d854:	09 f4       	brne	.+2      	; 0xd858 <mmc_disk_ioctl+0x6e>
    d856:	74 c1       	rjmp	.+744    	; 0xdb40 <mmc_disk_ioctl+0x356>
    d858:	08 f4       	brcc	.+2      	; 0xd85c <mmc_disk_ioctl+0x72>
    d85a:	1a c1       	rjmp	.+564    	; 0xda90 <mmc_disk_ioctl+0x2a6>
    d85c:	89 33       	cpi	r24, 0x39	; 57
    d85e:	09 f4       	brne	.+2      	; 0xd862 <mmc_disk_ioctl+0x78>
    d860:	bc c1       	rjmp	.+888    	; 0xdbda <mmc_disk_ioctl+0x3f0>
    {
        case CTRL_SYNC :                          /* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
            if (select()) res = RES_OK;
    d862:	00 c2       	rjmp	.+1024   	; 0xdc64 <mmc_disk_ioctl+0x47a>
    d864:	b9 dd       	rcall	.-1166   	; 0xd3d8 <select>
    d866:	06 c1       	rjmp	.+524    	; 0xda74 <mmc_disk_ioctl+0x28a>
            deselect();
            break;

        case GET_SECTOR_COUNT :                   /* Get number of sectors on the disk (DWORD) */
            if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16))
    d868:	40 e0       	ldi	r20, 0x00	; 0
    d86a:	50 e0       	ldi	r21, 0x00	; 0
    d86c:	ba 01       	movw	r22, r20
    d86e:	89 e0       	ldi	r24, 0x09	; 9
    d870:	d5 dd       	rcall	.-1110   	; 0xd41c <send_cmd>
    d872:	81 11       	cpse	r24, r1
    d874:	f1 c1       	rjmp	.+994    	; 0xdc58 <mmc_disk_ioctl+0x46e>
    d876:	60 e1       	ldi	r22, 0x10	; 16
    d878:	70 e0       	ldi	r23, 0x00	; 0
    d87a:	ce 01       	movw	r24, r28
    d87c:	01 96       	adiw	r24, 0x01	; 1
    d87e:	77 dd       	rcall	.-1298   	; 0xd36e <rcvr_datablock>
    d880:	89 2b       	or	r24, r25
    d882:	09 f4       	brne	.+2      	; 0xd886 <mmc_disk_ioctl+0x9c>
    d884:	e9 c1       	rjmp	.+978    	; 0xdc58 <mmc_disk_ioctl+0x46e>
            {
                if ((csd[0] >> 6) == 1)           /* SDC ver 2.00 */
    d886:	99 81       	ldd	r25, Y+1	; 0x01
    d888:	92 95       	swap	r25
    d88a:	96 95       	lsr	r25
    d88c:	96 95       	lsr	r25
    d88e:	93 70       	andi	r25, 0x03	; 3
    d890:	29 85       	ldd	r18, Y+9	; 0x09
    d892:	4a 85       	ldd	r20, Y+10	; 0x0a
    d894:	88 85       	ldd	r24, Y+8	; 0x08
    d896:	91 30       	cpi	r25, 0x01	; 1
    d898:	d9 f4       	brne	.+54     	; 0xd8d0 <mmc_disk_ioctl+0xe6>
                {
                    csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
                    *(DWORD*)buff = csize << 10;
    d89a:	30 e0       	ldi	r19, 0x00	; 0
    d89c:	32 2f       	mov	r19, r18
    d89e:	22 27       	eor	r18, r18
    d8a0:	24 0f       	add	r18, r20
    d8a2:	31 1d       	adc	r19, r1
    d8a4:	8f 73       	andi	r24, 0x3F	; 63
    d8a6:	90 e0       	ldi	r25, 0x00	; 0
    d8a8:	a0 e0       	ldi	r26, 0x00	; 0
    d8aa:	b0 e0       	ldi	r27, 0x00	; 0
    d8ac:	dc 01       	movw	r26, r24
    d8ae:	99 27       	eor	r25, r25
    d8b0:	88 27       	eor	r24, r24
    d8b2:	01 96       	adiw	r24, 0x01	; 1
    d8b4:	a1 1d       	adc	r26, r1
    d8b6:	b1 1d       	adc	r27, r1
    d8b8:	82 0f       	add	r24, r18
    d8ba:	93 1f       	adc	r25, r19
    d8bc:	a1 1d       	adc	r26, r1
    d8be:	b1 1d       	adc	r27, r1
    d8c0:	fa e0       	ldi	r31, 0x0A	; 10
    d8c2:	88 0f       	add	r24, r24
    d8c4:	99 1f       	adc	r25, r25
    d8c6:	aa 1f       	adc	r26, r26
    d8c8:	bb 1f       	adc	r27, r27
    d8ca:	fa 95       	dec	r31
    d8cc:	d1 f7       	brne	.-12     	; 0xd8c2 <mmc_disk_ioctl+0xd8>
    d8ce:	9b c0       	rjmp	.+310    	; 0xda06 <mmc_disk_ioctl+0x21c>
                }                                 /* SDC ver 1.XX or MMC*/
                else
                {
                    n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
                    csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
                    *(DWORD*)buff = csize << (n - 9);
    d8d0:	22 95       	swap	r18
    d8d2:	26 95       	lsr	r18
    d8d4:	26 95       	lsr	r18
    d8d6:	23 70       	andi	r18, 0x03	; 3
    d8d8:	f4 e0       	ldi	r31, 0x04	; 4
    d8da:	8f 9f       	mul	r24, r31
    d8dc:	c0 01       	movw	r24, r0
    d8de:	11 24       	eor	r1, r1
    d8e0:	82 0f       	add	r24, r18
    d8e2:	91 1d       	adc	r25, r1
    d8e4:	01 96       	adiw	r24, 0x01	; 1
    d8e6:	2f 81       	ldd	r18, Y+7	; 0x07
    d8e8:	23 70       	andi	r18, 0x03	; 3
    d8ea:	30 e0       	ldi	r19, 0x00	; 0
    d8ec:	32 2f       	mov	r19, r18
    d8ee:	22 27       	eor	r18, r18
    d8f0:	33 0f       	add	r19, r19
    d8f2:	33 0f       	add	r19, r19
    d8f4:	82 0f       	add	r24, r18
    d8f6:	93 1f       	adc	r25, r19
    d8f8:	a0 e0       	ldi	r26, 0x00	; 0
    d8fa:	b0 e0       	ldi	r27, 0x00	; 0
    d8fc:	2e 81       	ldd	r18, Y+6	; 0x06
    d8fe:	32 2f       	mov	r19, r18
    d900:	3f 70       	andi	r19, 0x0F	; 15
    d902:	2b 85       	ldd	r18, Y+11	; 0x0b
    d904:	22 1f       	adc	r18, r18
    d906:	22 27       	eor	r18, r18
    d908:	22 1f       	adc	r18, r18
    d90a:	23 0f       	add	r18, r19
    d90c:	43 70       	andi	r20, 0x03	; 3
    d90e:	44 0f       	add	r20, r20
    d910:	42 0f       	add	r20, r18
    d912:	47 50       	subi	r20, 0x07	; 7
    d914:	04 c0       	rjmp	.+8      	; 0xd91e <mmc_disk_ioctl+0x134>
    d916:	88 0f       	add	r24, r24
    d918:	99 1f       	adc	r25, r25
    d91a:	aa 1f       	adc	r26, r26
    d91c:	bb 1f       	adc	r27, r27
    d91e:	4a 95       	dec	r20
    d920:	d2 f7       	brpl	.-12     	; 0xd916 <mmc_disk_ioctl+0x12c>
    d922:	71 c0       	rjmp	.+226    	; 0xda06 <mmc_disk_ioctl+0x21c>
            }
            deselect();
            break;

        case GET_BLOCK_SIZE :                     /* Get erase block size in unit of sector (DWORD) */
            if (CardType & CT_SD2)                /* SDv2? */
    d924:	80 91 23 18 	lds	r24, 0x1823	; 0x801823 <CardType>
            {
                if (send_cmd(ACMD13, 0) == 0)     /* Read SD status */
    d928:	40 e0       	ldi	r20, 0x00	; 0
    d92a:	50 e0       	ldi	r21, 0x00	; 0
            }
            deselect();
            break;

        case GET_BLOCK_SIZE :                     /* Get erase block size in unit of sector (DWORD) */
            if (CardType & CT_SD2)                /* SDv2? */
    d92c:	ba 01       	movw	r22, r20
    d92e:	82 ff       	sbrs	r24, 2
            {
                if (send_cmd(ACMD13, 0) == 0)     /* Read SD status */
    d930:	24 c0       	rjmp	.+72     	; 0xd97a <mmc_disk_ioctl+0x190>
    d932:	8d e8       	ldi	r24, 0x8D	; 141
    d934:	73 dd       	rcall	.-1306   	; 0xd41c <send_cmd>
    d936:	81 11       	cpse	r24, r1
                {
                    xchg_spi(0xFF);
    d938:	8f c1       	rjmp	.+798    	; 0xdc58 <mmc_disk_ioctl+0x46e>
    d93a:	8f ef       	ldi	r24, 0xFF	; 255
                    if (rcvr_datablock(csd, 16))  /* Read partial block */
    d93c:	10 dd       	rcall	.-1504   	; 0xd35e <xchg_spi>
    d93e:	60 e1       	ldi	r22, 0x10	; 16
    d940:	70 e0       	ldi	r23, 0x00	; 0
    d942:	ce 01       	movw	r24, r28
    d944:	01 96       	adiw	r24, 0x01	; 1
    d946:	13 dd       	rcall	.-1498   	; 0xd36e <rcvr_datablock>
    d948:	89 2b       	or	r24, r25
    d94a:	09 f4       	brne	.+2      	; 0xd94e <mmc_disk_ioctl+0x164>
    d94c:	85 c1       	rjmp	.+778    	; 0xdc58 <mmc_disk_ioctl+0x46e>
    d94e:	50 e3       	ldi	r21, 0x30	; 48
                    {
/* Purge trailing data */
                        for (n = 64 - 16; n; n--) xchg_spi(0xFF);
    d950:	f5 2e       	mov	r15, r21
    d952:	8f ef       	ldi	r24, 0xFF	; 255
    d954:	04 dd       	rcall	.-1528   	; 0xd35e <xchg_spi>
    d956:	fa 94       	dec	r15
    d958:	f1 10       	cpse	r15, r1
    d95a:	fb cf       	rjmp	.-10     	; 0xd952 <mmc_disk_ioctl+0x168>
                        *(DWORD*)buff = 16UL << (csd[10] >> 4);
    d95c:	2b 85       	ldd	r18, Y+11	; 0x0b
    d95e:	22 95       	swap	r18
    d960:	2f 70       	andi	r18, 0x0F	; 15
    d962:	80 e1       	ldi	r24, 0x10	; 16
    d964:	90 e0       	ldi	r25, 0x00	; 0
    d966:	a0 e0       	ldi	r26, 0x00	; 0
    d968:	b0 e0       	ldi	r27, 0x00	; 0
    d96a:	04 c0       	rjmp	.+8      	; 0xd974 <mmc_disk_ioctl+0x18a>
    d96c:	88 0f       	add	r24, r24
    d96e:	99 1f       	adc	r25, r25
    d970:	aa 1f       	adc	r26, r26
    d972:	bb 1f       	adc	r27, r27
    d974:	2a 95       	dec	r18
    d976:	d2 f7       	brpl	.-12     	; 0xd96c <mmc_disk_ioctl+0x182>
                }
            }                                     /* SDv1 or MMCv3 */
            else
            {
/* Read CSD */
                if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16))
    d978:	46 c0       	rjmp	.+140    	; 0xda06 <mmc_disk_ioctl+0x21c>
    d97a:	89 e0       	ldi	r24, 0x09	; 9
    d97c:	4f dd       	rcall	.-1378   	; 0xd41c <send_cmd>
    d97e:	81 11       	cpse	r24, r1
    d980:	6b c1       	rjmp	.+726    	; 0xdc58 <mmc_disk_ioctl+0x46e>
    d982:	60 e1       	ldi	r22, 0x10	; 16
    d984:	70 e0       	ldi	r23, 0x00	; 0
    d986:	ce 01       	movw	r24, r28
    d988:	01 96       	adiw	r24, 0x01	; 1
    d98a:	f1 dc       	rcall	.-1566   	; 0xd36e <rcvr_datablock>
    d98c:	89 2b       	or	r24, r25
    d98e:	09 f4       	brne	.+2      	; 0xd992 <mmc_disk_ioctl+0x1a8>
    d990:	63 c1       	rjmp	.+710    	; 0xdc58 <mmc_disk_ioctl+0x46e>
                {
                    if (CardType & CT_SD1)        /* SDv1 */
    d992:	90 91 23 18 	lds	r25, 0x1823	; 0x801823 <CardType>
    d996:	2b 85       	ldd	r18, Y+11	; 0x0b
    d998:	8c 85       	ldd	r24, Y+12	; 0x0c
    d99a:	91 ff       	sbrs	r25, 1
    d99c:	16 c0       	rjmp	.+44     	; 0xd9ca <mmc_disk_ioctl+0x1e0>
                    {
                        *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    d99e:	2f 73       	andi	r18, 0x3F	; 63
    d9a0:	88 1f       	adc	r24, r24
    d9a2:	88 27       	eor	r24, r24
    d9a4:	88 1f       	adc	r24, r24
    d9a6:	90 e0       	ldi	r25, 0x00	; 0
    d9a8:	01 96       	adiw	r24, 0x01	; 1
    d9aa:	82 0f       	add	r24, r18
    d9ac:	91 1d       	adc	r25, r1
    d9ae:	82 0f       	add	r24, r18
    d9b0:	91 1d       	adc	r25, r1
    d9b2:	2e 85       	ldd	r18, Y+14	; 0x0e
    d9b4:	22 95       	swap	r18
    d9b6:	26 95       	lsr	r18
    d9b8:	26 95       	lsr	r18
    d9ba:	23 70       	andi	r18, 0x03	; 3
    d9bc:	21 50       	subi	r18, 0x01	; 1
    d9be:	02 c0       	rjmp	.+4      	; 0xd9c4 <mmc_disk_ioctl+0x1da>
    d9c0:	88 0f       	add	r24, r24
    d9c2:	99 1f       	adc	r25, r25
    d9c4:	2a 95       	dec	r18
    d9c6:	e2 f7       	brpl	.-8      	; 0xd9c0 <mmc_disk_ioctl+0x1d6>
    d9c8:	1c c0       	rjmp	.+56     	; 0xda02 <mmc_disk_ioctl+0x218>
                    }                             /* MMCv3 */
                    else
                    {
                        *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    d9ca:	38 2f       	mov	r19, r24
    d9cc:	33 70       	andi	r19, 0x03	; 3
    d9ce:	82 95       	swap	r24
    d9d0:	86 95       	lsr	r24
    d9d2:	87 70       	andi	r24, 0x07	; 7
    d9d4:	90 e0       	ldi	r25, 0x00	; 0
    d9d6:	f8 e0       	ldi	r31, 0x08	; 8
    d9d8:	3f 9f       	mul	r19, r31
    d9da:	80 0d       	add	r24, r0
    d9dc:	91 1d       	adc	r25, r1
    d9de:	11 24       	eor	r1, r1
    d9e0:	01 96       	adiw	r24, 0x01	; 1
    d9e2:	2c 77       	andi	r18, 0x7C	; 124
    d9e4:	30 e0       	ldi	r19, 0x00	; 0
    d9e6:	35 95       	asr	r19
    d9e8:	27 95       	ror	r18
    d9ea:	35 95       	asr	r19
    d9ec:	27 95       	ror	r18
    d9ee:	2f 5f       	subi	r18, 0xFF	; 255
    d9f0:	3f 4f       	sbci	r19, 0xFF	; 255
    d9f2:	82 9f       	mul	r24, r18
    d9f4:	a0 01       	movw	r20, r0
    d9f6:	83 9f       	mul	r24, r19
    d9f8:	50 0d       	add	r21, r0
    d9fa:	92 9f       	mul	r25, r18
    d9fc:	50 0d       	add	r21, r0
    d9fe:	11 24       	eor	r1, r1
    da00:	ca 01       	movw	r24, r20
    da02:	a0 e0       	ldi	r26, 0x00	; 0
    da04:	b0 e0       	ldi	r27, 0x00	; 0
    da06:	f8 01       	movw	r30, r16
    da08:	80 83       	st	Z, r24
    da0a:	91 83       	std	Z+1, r25	; 0x01
    da0c:	a2 83       	std	Z+2, r26	; 0x02
    da0e:	b3 83       	std	Z+3, r27	; 0x03
                    }
                    res = RES_OK;
    da10:	00 e0       	ldi	r16, 0x00	; 0
            res = RES_OK;
            break;

        case MMC_GET_CSD :                        /* Receive CSD as a data block (16 bytes) */
/* READ_CSD */
            if (send_cmd(CMD9, 0) == 0 && rcvr_datablock(ptr, 16))
    da12:	23 c1       	rjmp	.+582    	; 0xdc5a <mmc_disk_ioctl+0x470>
    da14:	40 e0       	ldi	r20, 0x00	; 0
    da16:	50 e0       	ldi	r21, 0x00	; 0
    da18:	ba 01       	movw	r22, r20
    da1a:	89 e0       	ldi	r24, 0x09	; 9
            deselect();
            break;

        case MMC_GET_CID :                        /* Receive CID as a data block (16 bytes) */
/* READ_CID */
            if (send_cmd(CMD10, 0) == 0 && rcvr_datablock(ptr, 16))
    da1c:	04 c0       	rjmp	.+8      	; 0xda26 <mmc_disk_ioctl+0x23c>
    da1e:	40 e0       	ldi	r20, 0x00	; 0
    da20:	50 e0       	ldi	r21, 0x00	; 0
    da22:	ba 01       	movw	r22, r20
    da24:	8a e0       	ldi	r24, 0x0A	; 10
    da26:	fa dc       	rcall	.-1548   	; 0xd41c <send_cmd>
    da28:	81 11       	cpse	r24, r1
    da2a:	16 c1       	rjmp	.+556    	; 0xdc58 <mmc_disk_ioctl+0x46e>
    da2c:	60 e1       	ldi	r22, 0x10	; 16
    da2e:	70 e0       	ldi	r23, 0x00	; 0
                res = RES_OK;
            deselect();
            break;

        case MMC_GET_OCR :                        /* Receive OCR as an R3 resp (4 bytes) */
            if (send_cmd(CMD58, 0) == 0)          /* READ_OCR */
    da30:	1f c0       	rjmp	.+62     	; 0xda70 <mmc_disk_ioctl+0x286>
    da32:	40 e0       	ldi	r20, 0x00	; 0
    da34:	50 e0       	ldi	r21, 0x00	; 0
    da36:	ba 01       	movw	r22, r20
    da38:	8a e3       	ldi	r24, 0x3A	; 58
    da3a:	f0 dc       	rcall	.-1568   	; 0xd41c <send_cmd>
    da3c:	81 11       	cpse	r24, r1
    da3e:	0c c1       	rjmp	.+536    	; 0xdc58 <mmc_disk_ioctl+0x46e>
    da40:	78 01       	movw	r14, r16
    da42:	f4 e0       	ldi	r31, 0x04	; 4
    da44:	ef 0e       	add	r14, r31
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    da46:	f1 1c       	adc	r15, r1
    da48:	8f ef       	ldi	r24, 0xFF	; 255
            break;

        case MMC_GET_OCR :                        /* Receive OCR as an R3 resp (4 bytes) */
            if (send_cmd(CMD58, 0) == 0)          /* READ_OCR */
            {
                for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
    da4a:	83 d1       	rcall	.+774    	; 0xdd52 <mmc_spi_TXRX>
    da4c:	f8 01       	movw	r30, r16
    da4e:	81 93       	st	Z+, r24
    da50:	8f 01       	movw	r16, r30
    da52:	ee 15       	cp	r30, r14
    da54:	ff 05       	cpc	r31, r15
            }
            deselect();
            break;

        case MMC_GET_SDSTAT :                     /* Receive SD statsu as a data block (64 bytes) */
            if (send_cmd(ACMD13, 0) == 0)         /* SD_STATUS */
    da56:	c1 f7       	brne	.-16     	; 0xda48 <mmc_disk_ioctl+0x25e>
    da58:	db cf       	rjmp	.-74     	; 0xda10 <mmc_disk_ioctl+0x226>
    da5a:	40 e0       	ldi	r20, 0x00	; 0
    da5c:	50 e0       	ldi	r21, 0x00	; 0
    da5e:	ba 01       	movw	r22, r20
    da60:	8d e8       	ldi	r24, 0x8D	; 141
    da62:	dc dc       	rcall	.-1608   	; 0xd41c <send_cmd>
            {
                xchg_spi(0xFF);
    da64:	81 11       	cpse	r24, r1
    da66:	f8 c0       	rjmp	.+496    	; 0xdc58 <mmc_disk_ioctl+0x46e>
    da68:	8f ef       	ldi	r24, 0xFF	; 255
                if (rcvr_datablock(ptr, 64)) res = RES_OK;
    da6a:	79 dc       	rcall	.-1806   	; 0xd35e <xchg_spi>
    da6c:	60 e4       	ldi	r22, 0x40	; 64
    da6e:	70 e0       	ldi	r23, 0x00	; 0
    da70:	c8 01       	movw	r24, r16
    da72:	7d dc       	rcall	.-1798   	; 0xd36e <rcvr_datablock>
    {
        deselect();
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    da74:	01 e0       	ldi	r16, 0x01	; 1
    da76:	10 e0       	ldi	r17, 0x00	; 0
    da78:	89 2b       	or	r24, r25
    da7a:	09 f4       	brne	.+2      	; 0xda7e <mmc_disk_ioctl+0x294>
    da7c:	ef c0       	rjmp	.+478    	; 0xdc5c <mmc_disk_ioctl+0x472>
    da7e:	ea c0       	rjmp	.+468    	; 0xdc54 <mmc_disk_ioctl+0x46a>
void power_off (void)
{
/* Disable SPI function */
/* De-configure MOSI/MISO/SCLK/CS pins (set hi-z) */
/* Turn socket power off (nothing to do if no power controls) */
    mmc_power_off();
    da80:	97 d1       	rcall	.+814    	; 0xddb0 <mmc_power_off>
    da82:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
            deselect();
            break;

        case CTRL_POWER_OFF :                     /* Power off */
            power_off();
            Stat |= STA_NOINIT;
    da86:	81 60       	ori	r24, 0x01	; 1
    da88:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Stat>
    da8c:	00 e0       	ldi	r16, 0x00	; 0
            res = RES_OK;
    da8e:	eb c0       	rjmp	.+470    	; 0xdc66 <mmc_disk_ioctl+0x47c>
    da90:	fb 01       	movw	r30, r22
            break;
#if _USE_ISDIO
        case ISDIO_READ:
            sdi = buff;
            if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
    da92:	43 81       	ldd	r20, Z+3	; 0x03
    da94:	54 81       	ldd	r21, Z+4	; 0x04
    da96:	65 81       	ldd	r22, Z+5	; 0x05
    da98:	76 81       	ldd	r23, Z+6	; 0x06
    da9a:	39 e0       	ldi	r19, 0x09	; 9
    da9c:	44 0f       	add	r20, r20
    da9e:	55 1f       	adc	r21, r21
    daa0:	66 1f       	adc	r22, r22
    daa2:	77 1f       	adc	r23, r23
    daa4:	3a 95       	dec	r19
    daa6:	d1 f7       	brne	.-12     	; 0xda9c <mmc_disk_ioctl+0x2b2>
    daa8:	70 68       	ori	r23, 0x80	; 128
    daaa:	80 81       	ld	r24, Z
    daac:	90 e0       	ldi	r25, 0x00	; 0
    daae:	a0 e0       	ldi	r26, 0x00	; 0
    dab0:	b0 e0       	ldi	r27, 0x00	; 0
    dab2:	2c e1       	ldi	r18, 0x1C	; 28
    dab4:	88 0f       	add	r24, r24
    dab6:	99 1f       	adc	r25, r25
    dab8:	aa 1f       	adc	r26, r26
    daba:	bb 1f       	adc	r27, r27
    dabc:	2a 95       	dec	r18
    dabe:	d1 f7       	brne	.-12     	; 0xdab4 <mmc_disk_ioctl+0x2ca>
    dac0:	48 2b       	or	r20, r24
    dac2:	59 2b       	or	r21, r25
    dac4:	6a 2b       	or	r22, r26
    dac6:	7b 2b       	or	r23, r27
    dac8:	81 81       	ldd	r24, Z+1	; 0x01
    daca:	92 81       	ldd	r25, Z+2	; 0x02
    dacc:	01 97       	sbiw	r24, 0x01	; 1
    dace:	91 70       	andi	r25, 0x01	; 1
    dad0:	a0 e0       	ldi	r26, 0x00	; 0
    dad2:	b0 e0       	ldi	r27, 0x00	; 0
    dad4:	48 2b       	or	r20, r24
    dad6:	59 2b       	or	r21, r25
    dad8:	6a 2b       	or	r22, r26
    dada:	7b 2b       	or	r23, r27
    dadc:	80 e3       	ldi	r24, 0x30	; 48
    dade:	9e dc       	rcall	.-1732   	; 0xd41c <send_cmd>
            {
                mmc_set_ms_timeout(1000);
    dae0:	81 11       	cpse	r24, r1
    dae2:	ba c0       	rjmp	.+372    	; 0xdc58 <mmc_disk_ioctl+0x46e>
    dae4:	88 ee       	ldi	r24, 0xE8	; 232
    dae6:	93 e0       	ldi	r25, 0x03	; 3
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    dae8:	37 d1       	rcall	.+622    	; 0xdd58 <mmc_set_ms_timeout>
    daea:	8f ef       	ldi	r24, 0xFF	; 255
    daec:	32 d1       	rcall	.+612    	; 0xdd52 <mmc_spi_TXRX>
        case ISDIO_READ:
            sdi = buff;
            if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
            {
                mmc_set_ms_timeout(1000);
                while( (rc = xchg_spi(0xFF)) == 0xFF && !mmc_test_timeout() )
    daee:	8f 3f       	cpi	r24, 0xFF	; 255
    daf0:	21 f4       	brne	.+8      	; 0xdafa <mmc_disk_ioctl+0x310>
    daf2:	39 d1       	rcall	.+626    	; 0xdd66 <mmc_test_timeout>
    daf4:	89 2b       	or	r24, r25
    daf6:	c9 f3       	breq	.-14     	; 0xdaea <mmc_disk_ioctl+0x300>
    daf8:	af c0       	rjmp	.+350    	; 0xdc58 <mmc_disk_ioctl+0x46e>
                    ;
                if (rc == 0xFE)
    dafa:	8e 3f       	cpi	r24, 0xFE	; 254
    dafc:	09 f0       	breq	.+2      	; 0xdb00 <mmc_disk_ioctl+0x316>
    dafe:	ac c0       	rjmp	.+344    	; 0xdc58 <mmc_disk_ioctl+0x46e>
                {
                    for (bp = sdi->data, dc = sdi->ndata; dc; dc--) *bp++ = xchg_spi(0xFF);
    db00:	f8 01       	movw	r30, r16
    db02:	e7 80       	ldd	r14, Z+7	; 0x07
    db04:	f0 84       	ldd	r15, Z+8	; 0x08
    db06:	c1 80       	ldd	r12, Z+1	; 0x01
    db08:	d2 80       	ldd	r13, Z+2	; 0x02
    db0a:	ce 0c       	add	r12, r14
    db0c:	df 1c       	adc	r13, r15
    db0e:	ce 14       	cp	r12, r14
    db10:	df 04       	cpc	r13, r15
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    db12:	31 f0       	breq	.+12     	; 0xdb20 <mmc_disk_ioctl+0x336>
    db14:	8f ef       	ldi	r24, 0xFF	; 255
    db16:	1d d1       	rcall	.+570    	; 0xdd52 <mmc_spi_TXRX>
                mmc_set_ms_timeout(1000);
                while( (rc = xchg_spi(0xFF)) == 0xFF && !mmc_test_timeout() )
                    ;
                if (rc == 0xFE)
                {
                    for (bp = sdi->data, dc = sdi->ndata; dc; dc--) *bp++ = xchg_spi(0xFF);
    db18:	f7 01       	movw	r30, r14
    db1a:	81 93       	st	Z+, r24
    db1c:	7f 01       	movw	r14, r30
    db1e:	f7 cf       	rjmp	.-18     	; 0xdb0e <mmc_disk_ioctl+0x324>
                    for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
    db20:	f8 01       	movw	r30, r16
    db22:	81 81       	ldd	r24, Z+1	; 0x01
    db24:	92 81       	ldd	r25, Z+2	; 0x02
    db26:	02 e0       	ldi	r16, 0x02	; 2
    db28:	12 e0       	ldi	r17, 0x02	; 2
    db2a:	08 1b       	sub	r16, r24
    db2c:	19 0b       	sbc	r17, r25
    db2e:	01 15       	cp	r16, r1
    db30:	11 05       	cpc	r17, r1
    db32:	09 f4       	brne	.+2      	; 0xdb36 <mmc_disk_ioctl+0x34c>
    db34:	6d cf       	rjmp	.-294    	; 0xda10 <mmc_disk_ioctl+0x226>
    db36:	8f ef       	ldi	r24, 0xFF	; 255
    db38:	12 dc       	rcall	.-2012   	; 0xd35e <xchg_spi>
    db3a:	01 50       	subi	r16, 0x01	; 1
    db3c:	11 09       	sbc	r17, r1
    db3e:	f7 cf       	rjmp	.-18     	; 0xdb2e <mmc_disk_ioctl+0x344>
    db40:	fb 01       	movw	r30, r22
            deselect();
            break;

        case ISDIO_WRITE:
            sdi = buff;
            if (send_cmd(CMD49, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
    db42:	43 81       	ldd	r20, Z+3	; 0x03
    db44:	54 81       	ldd	r21, Z+4	; 0x04
    db46:	65 81       	ldd	r22, Z+5	; 0x05
    db48:	76 81       	ldd	r23, Z+6	; 0x06
    db4a:	39 e0       	ldi	r19, 0x09	; 9
    db4c:	44 0f       	add	r20, r20
    db4e:	55 1f       	adc	r21, r21
    db50:	66 1f       	adc	r22, r22
    db52:	77 1f       	adc	r23, r23
    db54:	3a 95       	dec	r19
    db56:	d1 f7       	brne	.-12     	; 0xdb4c <mmc_disk_ioctl+0x362>
    db58:	70 68       	ori	r23, 0x80	; 128
    db5a:	80 81       	ld	r24, Z
    db5c:	90 e0       	ldi	r25, 0x00	; 0
    db5e:	a0 e0       	ldi	r26, 0x00	; 0
    db60:	b0 e0       	ldi	r27, 0x00	; 0
    db62:	2c e1       	ldi	r18, 0x1C	; 28
    db64:	88 0f       	add	r24, r24
    db66:	99 1f       	adc	r25, r25
    db68:	aa 1f       	adc	r26, r26
    db6a:	bb 1f       	adc	r27, r27
    db6c:	2a 95       	dec	r18
    db6e:	d1 f7       	brne	.-12     	; 0xdb64 <mmc_disk_ioctl+0x37a>
    db70:	48 2b       	or	r20, r24
    db72:	59 2b       	or	r21, r25
    db74:	6a 2b       	or	r22, r26
    db76:	7b 2b       	or	r23, r27
    db78:	81 81       	ldd	r24, Z+1	; 0x01
    db7a:	92 81       	ldd	r25, Z+2	; 0x02
    db7c:	01 97       	sbiw	r24, 0x01	; 1
    db7e:	91 70       	andi	r25, 0x01	; 1
    db80:	a0 e0       	ldi	r26, 0x00	; 0
    db82:	b0 e0       	ldi	r27, 0x00	; 0
    db84:	48 2b       	or	r20, r24
    db86:	59 2b       	or	r21, r25
    db88:	6a 2b       	or	r22, r26
    db8a:	7b 2b       	or	r23, r27
    db8c:	81 e3       	ldi	r24, 0x31	; 49
    db8e:	46 dc       	rcall	.-1908   	; 0xd41c <send_cmd>
            {
                xchg_spi(0xFF); xchg_spi(0xFE);
    db90:	81 11       	cpse	r24, r1
    db92:	62 c0       	rjmp	.+196    	; 0xdc58 <mmc_disk_ioctl+0x46e>
    db94:	8f ef       	ldi	r24, 0xFF	; 255
    db96:	e3 db       	rcall	.-2106   	; 0xd35e <xchg_spi>
    db98:	8e ef       	ldi	r24, 0xFE	; 254
    db9a:	e1 db       	rcall	.-2110   	; 0xd35e <xchg_spi>
                for (bp = sdi->data, dc = sdi->ndata; dc; dc--) xchg_spi(*bp++);
    db9c:	f8 01       	movw	r30, r16
    db9e:	e7 80       	ldd	r14, Z+7	; 0x07
    dba0:	f0 84       	ldd	r15, Z+8	; 0x08
    dba2:	c1 80       	ldd	r12, Z+1	; 0x01
    dba4:	d2 80       	ldd	r13, Z+2	; 0x02
    dba6:	ce 0c       	add	r12, r14
    dba8:	df 1c       	adc	r13, r15
    dbaa:	ec 14       	cp	r14, r12
    dbac:	fd 04       	cpc	r15, r13
    dbae:	29 f0       	breq	.+10     	; 0xdbba <mmc_disk_ioctl+0x3d0>
    dbb0:	f7 01       	movw	r30, r14
    dbb2:	81 91       	ld	r24, Z+
    dbb4:	7f 01       	movw	r14, r30
    dbb6:	d3 db       	rcall	.-2138   	; 0xd35e <xchg_spi>
    dbb8:	f8 cf       	rjmp	.-16     	; 0xdbaa <mmc_disk_ioctl+0x3c0>
                for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
    dbba:	f8 01       	movw	r30, r16
    dbbc:	81 81       	ldd	r24, Z+1	; 0x01
    dbbe:	92 81       	ldd	r25, Z+2	; 0x02
    dbc0:	02 e0       	ldi	r16, 0x02	; 2
    dbc2:	12 e0       	ldi	r17, 0x02	; 2
    dbc4:	08 1b       	sub	r16, r24
    dbc6:	19 0b       	sbc	r17, r25
    dbc8:	8f ef       	ldi	r24, 0xFF	; 255
    dbca:	01 15       	cp	r16, r1
    dbcc:	11 05       	cpc	r17, r1
    dbce:	09 f4       	brne	.+2      	; 0xdbd2 <mmc_disk_ioctl+0x3e8>
    dbd0:	3b c0       	rjmp	.+118    	; 0xdc48 <mmc_disk_ioctl+0x45e>
    dbd2:	c5 db       	rcall	.-2166   	; 0xd35e <xchg_spi>
    dbd4:	01 50       	subi	r16, 0x01	; 1
    dbd6:	11 09       	sbc	r17, r1
    dbd8:	f7 cf       	rjmp	.-18     	; 0xdbc8 <mmc_disk_ioctl+0x3de>
    dbda:	fb 01       	movw	r30, r22
            deselect();
            break;

        case ISDIO_MRITE:
            sdi = buff;
            if (send_cmd(CMD49, 0x84000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | sdi->ndata >> 8) == 0)
    dbdc:	43 81       	ldd	r20, Z+3	; 0x03
    dbde:	54 81       	ldd	r21, Z+4	; 0x04
    dbe0:	65 81       	ldd	r22, Z+5	; 0x05
    dbe2:	76 81       	ldd	r23, Z+6	; 0x06
    dbe4:	89 e0       	ldi	r24, 0x09	; 9
    dbe6:	44 0f       	add	r20, r20
    dbe8:	55 1f       	adc	r21, r21
    dbea:	66 1f       	adc	r22, r22
    dbec:	77 1f       	adc	r23, r23
    dbee:	8a 95       	dec	r24
    dbf0:	d1 f7       	brne	.-12     	; 0xdbe6 <mmc_disk_ioctl+0x3fc>
    dbf2:	74 68       	ori	r23, 0x84	; 132
    dbf4:	80 81       	ld	r24, Z
    dbf6:	90 e0       	ldi	r25, 0x00	; 0
    dbf8:	a0 e0       	ldi	r26, 0x00	; 0
    dbfa:	b0 e0       	ldi	r27, 0x00	; 0
    dbfc:	2c e1       	ldi	r18, 0x1C	; 28
    dbfe:	88 0f       	add	r24, r24
    dc00:	99 1f       	adc	r25, r25
    dc02:	aa 1f       	adc	r26, r26
    dc04:	bb 1f       	adc	r27, r27
    dc06:	2a 95       	dec	r18
    dc08:	d1 f7       	brne	.-12     	; 0xdbfe <mmc_disk_ioctl+0x414>
    dc0a:	48 2b       	or	r20, r24
    dc0c:	59 2b       	or	r21, r25
    dc0e:	6a 2b       	or	r22, r26
    dc10:	7b 2b       	or	r23, r27
    dc12:	82 81       	ldd	r24, Z+2	; 0x02
    dc14:	90 e0       	ldi	r25, 0x00	; 0
    dc16:	a0 e0       	ldi	r26, 0x00	; 0
    dc18:	b0 e0       	ldi	r27, 0x00	; 0
    dc1a:	48 2b       	or	r20, r24
    dc1c:	59 2b       	or	r21, r25
    dc1e:	6a 2b       	or	r22, r26
    dc20:	7b 2b       	or	r23, r27
            {
                xchg_spi(0xFF); xchg_spi(0xFE);
    dc22:	81 e3       	ldi	r24, 0x31	; 49
    dc24:	fb db       	rcall	.-2058   	; 0xd41c <send_cmd>
    dc26:	81 11       	cpse	r24, r1
    dc28:	17 c0       	rjmp	.+46     	; 0xdc58 <mmc_disk_ioctl+0x46e>
    dc2a:	8f ef       	ldi	r24, 0xFF	; 255
    dc2c:	98 db       	rcall	.-2256   	; 0xd35e <xchg_spi>
                xchg_spi(sdi->ndata);
    dc2e:	8e ef       	ldi	r24, 0xFE	; 254
    dc30:	96 db       	rcall	.-2260   	; 0xd35e <xchg_spi>
    dc32:	f8 01       	movw	r30, r16
    dc34:	81 81       	ldd	r24, Z+1	; 0x01
    dc36:	93 db       	rcall	.-2266   	; 0xd35e <xchg_spi>
    dc38:	01 e0       	ldi	r16, 0x01	; 1
                for (dc = 513; dc; dc--) xchg_spi(0xFF);
    dc3a:	12 e0       	ldi	r17, 0x02	; 2
    dc3c:	8f ef       	ldi	r24, 0xFF	; 255
    dc3e:	8f db       	rcall	.-2274   	; 0xd35e <xchg_spi>
    dc40:	01 50       	subi	r16, 0x01	; 1
    dc42:	11 09       	sbc	r17, r1
    dc44:	d9 f7       	brne	.-10     	; 0xdc3c <mmc_disk_ioctl+0x452>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    dc46:	8f ef       	ldi	r24, 0xFF	; 255
    dc48:	84 d0       	rcall	.+264    	; 0xdd52 <mmc_spi_TXRX>
    dc4a:	8f 71       	andi	r24, 0x1F	; 31
    {
        deselect();
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    dc4c:	01 e0       	ldi	r16, 0x01	; 1
    dc4e:	10 e0       	ldi	r17, 0x00	; 0
    dc50:	85 30       	cpi	r24, 0x05	; 5
    dc52:	21 f4       	brne	.+8      	; 0xdc5c <mmc_disk_ioctl+0x472>
    dc54:	00 e0       	ldi	r16, 0x00	; 0
    dc56:	02 c0       	rjmp	.+4      	; 0xdc5c <mmc_disk_ioctl+0x472>
    dc58:	01 e0       	ldi	r16, 0x01	; 1
    dc5a:	10 e0       	ldi	r17, 0x00	; 0
    dc5c:	82 db       	rcall	.-2300   	; 0xd362 <deselect>
                xchg_spi(0xFF); xchg_spi(0xFE);
                xchg_spi(sdi->ndata);
                for (dc = 513; dc; dc--) xchg_spi(0xFF);
                if ((xchg_spi(0xFF) & 0x1F) == 0x05) res = RES_OK;
            }
            deselect();
    dc5e:	04 c0       	rjmp	.+8      	; 0xdc68 <mmc_disk_ioctl+0x47e>
    dc60:	03 e0       	ldi	r16, 0x03	; 3
            break;
    dc62:	01 c0       	rjmp	.+2      	; 0xdc66 <mmc_disk_ioctl+0x47c>
    BYTE rc, *bp;
    UINT dc;
#endif

    if (Stat & STA_NOINIT)
        return RES_NOTRDY;
    dc64:	04 e0       	ldi	r16, 0x04	; 4
    dc66:	10 e0       	ldi	r17, 0x00	; 0
            }
            deselect();
            break;
#endif
        default:
            res = RES_PARERR;
    dc68:	c8 01       	movw	r24, r16
    dc6a:	60 96       	adiw	r28, 0x10	; 16
    }

    return res;
}
    dc6c:	e8 e0       	ldi	r30, 0x08	; 8
    dc6e:	0c 94 e1 e6 	jmp	0x1cdc2	; 0x1cdc2 <__epilogue_restores__+0x14>

0000dc72 <mmc_disk_timerproc>:
    dc72:	cf 93       	push	r28
    dc74:	80 91 25 18 	lds	r24, 0x1825	; 0x801825 <Timer1>
{
    BYTE n;
    BYTE s;

    n = Timer1;                                   /* 100Hz decrement timer */
    if (n) Timer1 = --n;
    dc78:	88 23       	and	r24, r24
    dc7a:	19 f0       	breq	.+6      	; 0xdc82 <mmc_disk_timerproc+0x10>
    dc7c:	81 50       	subi	r24, 0x01	; 1
    dc7e:	80 93 25 18 	sts	0x1825, r24	; 0x801825 <Timer1>
    n = Timer2;
    dc82:	80 91 24 18 	lds	r24, 0x1824	; 0x801824 <Timer2>
    if (n) Timer2 = --n;
    dc86:	88 23       	and	r24, r24
    dc88:	19 f0       	breq	.+6      	; 0xdc90 <mmc_disk_timerproc+0x1e>
    dc8a:	81 50       	subi	r24, 0x01	; 1
    dc8c:	80 93 24 18 	sts	0x1824, r24	; 0x801824 <Timer2>

    s = Stat;
    dc90:	c0 91 35 01 	lds	r28, 0x0135	; 0x800135 <Stat>
        s |= STA_PROTECT;
    else                                          /* Write enabled */
        s &= ~STA_PROTECT;
#endif

    if (MMC_CD)                                   /* Card inserted */
    dc94:	8e d0       	rcall	.+284    	; 0xddb2 <mmc_ins_status>
    dc96:	89 2b       	or	r24, r25
    dc98:	11 f0       	breq	.+4      	; 0xdc9e <mmc_disk_timerproc+0x2c>
	{
        s &= ~STA_NODISK;
    dc9a:	cd 7f       	andi	r28, 0xFD	; 253
    dc9c:	04 c0       	rjmp	.+8      	; 0xdca6 <mmc_disk_timerproc+0x34>
	}
    else                                          /* Socket empty */
	{	
        s |= (STA_NODISK | STA_NOINIT);
    dc9e:	c3 60       	ori	r28, 0x03	; 3
		set_error(1);
    dca0:	81 e0       	ldi	r24, 0x01	; 1
    dca2:	0e 94 e5 26 	call	0x4dca	; 0x4dca <set_error>
	}

    Stat = s;                                     /* Update MMC status */
    dca6:	c0 93 35 01 	sts	0x0135, r28	; 0x800135 <Stat>
}
    dcaa:	cf 91       	pop	r28
    dcac:	08 95       	ret

0000dcae <mmc_install_timer>:
void mmc_ms_wait(int ms)
{
    mmc_set_ms_timeout(ms);
    while(!mmc_test_timeout())
        ;
}
    dcae:	00 d0       	rcall	.+0      	; 0xdcb0 <mmc_install_timer+0x2>
    dcb0:	1f 92       	push	r1
    dcb2:	10 92 2f 18 	sts	0x182F, r1	; 0x80182f <_mmc_timeout+0x1>
    dcb6:	10 92 2e 18 	sts	0x182E, r1	; 0x80182e <_mmc_timeout>
    dcba:	61 e0       	ldi	r22, 0x01	; 1
    dcbc:	70 e0       	ldi	r23, 0x00	; 0
    dcbe:	86 ee       	ldi	r24, 0xE6	; 230
    dcc0:	9e e6       	ldi	r25, 0x6E	; 110
    dcc2:	0e 94 99 34 	call	0x6932	; 0x6932 <set_timers>
    dcc6:	01 96       	adiw	r24, 0x01	; 1
    dcc8:	51 f4       	brne	.+20     	; 0xdcde <mmc_install_timer+0x30>
    dcca:	87 e2       	ldi	r24, 0x27	; 39
    dccc:	98 e0       	ldi	r25, 0x08	; 8
    dcce:	a0 e0       	ldi	r26, 0x00	; 0
    dcd0:	ed b7       	in	r30, 0x3d	; 61
    dcd2:	fe b7       	in	r31, 0x3e	; 62
    dcd4:	81 83       	std	Z+1, r24	; 0x01
    dcd6:	92 83       	std	Z+2, r25	; 0x02
    dcd8:	a3 83       	std	Z+3, r26	; 0x03
    dcda:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    dcde:	0f 90       	pop	r0
    dce0:	0f 90       	pop	r0
    dce2:	0f 90       	pop	r0
    dce4:	08 95       	ret

0000dce6 <mmc_spi_begin>:
    dce6:	60 91 2a 18 	lds	r22, 0x182A	; 0x80182a <_mmc_clock>
    dcea:	70 91 2b 18 	lds	r23, 0x182B	; 0x80182b <_mmc_clock+0x1>
    dcee:	80 91 2c 18 	lds	r24, 0x182C	; 0x80182c <_mmc_clock+0x2>
    dcf2:	90 91 2d 18 	lds	r25, 0x182D	; 0x80182d <_mmc_clock+0x3>
    dcf6:	4b e0       	ldi	r20, 0x0B	; 11
    dcf8:	50 e0       	ldi	r21, 0x00	; 0
    dcfa:	0c 94 8c 26 	jmp	0x4d18	; 0x4d18 <spi_begin>
    dcfe:	08 95       	ret

0000dd00 <mmc_spi_end>:
    dd00:	8b e0       	ldi	r24, 0x0B	; 11
    dd02:	0c 94 28 26 	jmp	0x4c50	; 0x4c50 <spi_end>
    dd06:	08 95       	ret

0000dd08 <mmc_slow>:
    dd08:	80 e2       	ldi	r24, 0x20	; 32
    dd0a:	91 ea       	ldi	r25, 0xA1	; 161
    dd0c:	a7 e0       	ldi	r26, 0x07	; 7
    dd0e:	b0 e0       	ldi	r27, 0x00	; 0
    dd10:	80 93 2a 18 	sts	0x182A, r24	; 0x80182a <_mmc_clock>
    dd14:	90 93 2b 18 	sts	0x182B, r25	; 0x80182b <_mmc_clock+0x1>
    dd18:	a0 93 2c 18 	sts	0x182C, r26	; 0x80182c <_mmc_clock+0x2>
    dd1c:	b0 93 2d 18 	sts	0x182D, r27	; 0x80182d <_mmc_clock+0x3>
    dd20:	08 95       	ret

0000dd22 <mmc_spi_init>:
    dd22:	8b e0       	ldi	r24, 0x0B	; 11
    dd24:	0e 94 26 26 	call	0x4c4c	; 0x4c4c <chip_select_init>
    dd28:	ef cf       	rjmp	.-34     	; 0xdd08 <mmc_slow>
    dd2a:	08 95       	ret

0000dd2c <mmc_fast>:
    dd2c:	80 ea       	ldi	r24, 0xA0	; 160
    dd2e:	95 e2       	ldi	r25, 0x25	; 37
    dd30:	a6 e2       	ldi	r26, 0x26	; 38
    dd32:	b0 e0       	ldi	r27, 0x00	; 0
    dd34:	80 93 2a 18 	sts	0x182A, r24	; 0x80182a <_mmc_clock>
    dd38:	90 93 2b 18 	sts	0x182B, r25	; 0x80182b <_mmc_clock+0x1>
    dd3c:	a0 93 2c 18 	sts	0x182C, r26	; 0x80182c <_mmc_clock+0x2>
    dd40:	b0 93 2d 18 	sts	0x182D, r27	; 0x80182d <_mmc_clock+0x3>
    dd44:	08 95       	ret

0000dd46 <mmc_spi_TX_buffer>:
    dd46:	0c 94 58 26 	jmp	0x4cb0	; 0x4cb0 <spi_TX_buffer>
    dd4a:	08 95       	ret

0000dd4c <mmc_spi_RX_buffer>:
    dd4c:	0c 94 5a 26 	jmp	0x4cb4	; 0x4cb4 <spi_RX_buffer>
    dd50:	08 95       	ret

0000dd52 <mmc_spi_TXRX>:
    dd52:	0c 94 d4 26 	jmp	0x4da8	; 0x4da8 <spi_TXRX>
    dd56:	08 95       	ret

0000dd58 <mmc_set_ms_timeout>:
    dd58:	f8 94       	cli
    dd5a:	90 93 2f 18 	sts	0x182F, r25	; 0x80182f <_mmc_timeout+0x1>
    dd5e:	80 93 2e 18 	sts	0x182E, r24	; 0x80182e <_mmc_timeout>
    dd62:	78 94       	sei
    dd64:	08 95       	ret

0000dd66 <mmc_test_timeout>:
    dd66:	00 d0       	rcall	.+0      	; 0xdd68 <mmc_test_timeout+0x2>
    dd68:	1f 92       	push	r1
    dd6a:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    dd6e:	81 fd       	sbrc	r24, 1
    dd70:	15 c0       	rjmp	.+42     	; 0xdd9c <mmc_test_timeout+0x36>
    dd72:	80 91 2e 18 	lds	r24, 0x182E	; 0x80182e <_mmc_timeout>
    dd76:	90 91 2f 18 	lds	r25, 0x182F	; 0x80182f <_mmc_timeout+0x1>
    dd7a:	89 2b       	or	r24, r25
    dd7c:	91 f4       	brne	.+36     	; 0xdda2 <mmc_test_timeout+0x3c>
    dd7e:	8a e1       	ldi	r24, 0x1A	; 26
    dd80:	98 e0       	ldi	r25, 0x08	; 8
    dd82:	a0 e0       	ldi	r26, 0x00	; 0
    dd84:	ed b7       	in	r30, 0x3d	; 61
    dd86:	fe b7       	in	r31, 0x3e	; 62
    dd88:	81 83       	std	Z+1, r24	; 0x01
    dd8a:	92 83       	std	Z+2, r25	; 0x02
    dd8c:	a3 83       	std	Z+3, r26	; 0x03
    dd8e:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    dd92:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    dd96:	83 60       	ori	r24, 0x03	; 3
    dd98:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Stat>
    dd9c:	81 e0       	ldi	r24, 0x01	; 1
    dd9e:	90 e0       	ldi	r25, 0x00	; 0
    dda0:	02 c0       	rjmp	.+4      	; 0xdda6 <mmc_test_timeout+0x40>
    dda2:	80 e0       	ldi	r24, 0x00	; 0
    dda4:	90 e0       	ldi	r25, 0x00	; 0
    dda6:	0f 90       	pop	r0
    dda8:	0f 90       	pop	r0
    ddaa:	0f 90       	pop	r0
    ddac:	08 95       	ret

0000ddae <mmc_power_on>:
    ddae:	08 95       	ret

0000ddb0 <mmc_power_off>:
/// @brief  MMC Power OFF
///
/// @return void
MEMSPACE
void mmc_power_off()
{
    ddb0:	08 95       	ret

0000ddb2 <mmc_ins_status>:

MEMSPACE
int mmc_ins_status()
{
	// HI when card is NOT inserted
	if( GPIO_PIN_RD(GPIO_C7) )
    ddb2:	3f 98       	cbi	0x07, 7	; 7
    ddb4:	86 b1       	in	r24, 0x06	; 6
    ddb6:	08 2e       	mov	r0, r24
    ddb8:	00 0c       	add	r0, r0
    ddba:	99 0b       	sbc	r25, r25
    ddbc:	80 95       	com	r24
    ddbe:	90 95       	com	r25
		return (0);
	else
		return(1);;	
}
    ddc0:	89 2f       	mov	r24, r25
    ddc2:	88 1f       	adc	r24, r24
    ddc4:	88 27       	eor	r24, r24
    ddc6:	88 1f       	adc	r24, r24
    ddc8:	90 e0       	ldi	r25, 0x00	; 0
    ddca:	08 95       	ret

0000ddcc <mmc_task>:
 @brief 1000HZ timer task
 @return void
*/
static void mmc_task(void)
{
    if(_mmc_timeout)
    ddcc:	80 91 2e 18 	lds	r24, 0x182E	; 0x80182e <_mmc_timeout>
    ddd0:	90 91 2f 18 	lds	r25, 0x182F	; 0x80182f <_mmc_timeout+0x1>
    ddd4:	00 97       	sbiw	r24, 0x00	; 0
    ddd6:	29 f0       	breq	.+10     	; 0xdde2 <mmc_task+0x16>
        _mmc_timeout--;
    ddd8:	01 97       	sbiw	r24, 0x01	; 1
    ddda:	90 93 2f 18 	sts	0x182F, r25	; 0x80182f <_mmc_timeout+0x1>
    ddde:	80 93 2e 18 	sts	0x182E, r24	; 0x80182e <_mmc_timeout>

// 100HZ
    if(_mmc_pre++  < 10)
    dde2:	80 91 28 18 	lds	r24, 0x1828	; 0x801828 <_mmc_pre>
    dde6:	90 91 29 18 	lds	r25, 0x1829	; 0x801829 <_mmc_pre+0x1>
    ddea:	8a 30       	cpi	r24, 0x0A	; 10
    ddec:	91 05       	cpc	r25, r1
    ddee:	30 f4       	brcc	.+12     	; 0xddfc <mmc_task+0x30>
    ddf0:	01 96       	adiw	r24, 0x01	; 1
    ddf2:	90 93 29 18 	sts	0x1829, r25	; 0x801829 <_mmc_pre+0x1>
    ddf6:	80 93 28 18 	sts	0x1828, r24	; 0x801828 <_mmc_pre>
    ddfa:	08 95       	ret
        return;

    _mmc_pre = 0;
    ddfc:	10 92 29 18 	sts	0x1829, r1	; 0x801829 <_mmc_pre+0x1>
    de00:	10 92 28 18 	sts	0x1828, r1	; 0x801828 <_mmc_pre>

	if(!mmc_ins_status())
    de04:	d6 df       	rcall	.-84     	; 0xddb2 <mmc_ins_status>
    de06:	89 2b       	or	r24, r25
    de08:	19 f4       	brne	.+6      	; 0xde10 <mmc_task+0x44>
		set_error(1);
    de0a:	81 e0       	ldi	r24, 0x01	; 1
    de0c:	0e 94 e5 26 	call	0x4dca	; 0x4dca <set_error>

    mmc_disk_timerproc();
    de10:	30 cf       	rjmp	.-416    	; 0xdc72 <mmc_disk_timerproc>
    de12:	08 95       	ret

0000de14 <mmc_init>:
///
/// @param[in] verbose: display initialisation messages
/// @return
MEMSPACE
int mmc_init(int verbose)
{
    de14:	ac e0       	ldi	r26, 0x0C	; 12
    de16:	b1 e0       	ldi	r27, 0x01	; 1
    de18:	e0 e1       	ldi	r30, 0x10	; 16
    de1a:	ff e6       	ldi	r31, 0x6F	; 111
    de1c:	0c 94 c7 e6 	jmp	0x1cd8e	; 0x1cd8e <__prologue_saves__+0x18>
    de20:	7c 01       	movw	r14, r24
    int rc;

    char buff[MAX_NAME_LEN+1];

    Stat = 0;
    de22:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <Stat>
	clear_error();
    de26:	0e 94 ea 26 	call	0x4dd4	; 0x4dd4 <clear_error>

	// Card Detect
	GPIO_PIN_LATCH_LOW(GPIO_C7);
    de2a:	47 98       	cbi	0x08, 7	; 8
	GPIO_PIN_DIR_IN(GPIO_C7);
    de2c:	3f 98       	cbi	0x07, 7	; 7

    mmc_spi_init();
    de2e:	79 df       	rcall	.-270    	; 0xdd22 <mmc_spi_init>

    if( verbose)
    de30:	e1 14       	cp	r14, r1
    de32:	f1 04       	cpc	r15, r1
    de34:	51 f0       	breq	.+20     	; 0xde4a <mmc_init+0x36>
    {
        printf("START MMC INIT\n");
    de36:	8a e0       	ldi	r24, 0x0A	; 10
    de38:	98 e0       	ldi	r25, 0x08	; 8
    de3a:	a0 e0       	ldi	r26, 0x00	; 0
    de3c:	ed b7       	in	r30, 0x3d	; 61
    de3e:	fe b7       	in	r31, 0x3e	; 62
    de40:	81 83       	std	Z+1, r24	; 0x01
    de42:	92 83       	std	Z+2, r25	; 0x02
    de44:	a3 83       	std	Z+3, r26	; 0x03
    de46:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    }
// we only install timers once!
    if(!mmc_init_flag)
    de4a:	80 91 26 18 	lds	r24, 0x1826	; 0x801826 <mmc_init_flag>
    de4e:	90 91 27 18 	lds	r25, 0x1827	; 0x801827 <mmc_init_flag+0x1>
    de52:	89 2b       	or	r24, r25
        mmc_install_timer();
    de54:	09 f4       	brne	.+2      	; 0xde58 <mmc_init+0x44>

	if(!mmc_ins_status())
    de56:	2b df       	rcall	.-426    	; 0xdcae <mmc_install_timer>
    de58:	ac df       	rcall	.-168    	; 0xddb2 <mmc_ins_status>
    de5a:	89 2b       	or	r24, r25
    de5c:	61 f4       	brne	.+24     	; 0xde76 <mmc_init+0x62>
	{
		printf("*** MMC Card NOT Inserted! ***\n");
    de5e:	8a ee       	ldi	r24, 0xEA	; 234
    de60:	97 e0       	ldi	r25, 0x07	; 7
    de62:	a0 e0       	ldi	r26, 0x00	; 0
    de64:	ed b7       	in	r30, 0x3d	; 61
    de66:	fe b7       	in	r31, 0x3e	; 62
    de68:	81 83       	std	Z+1, r24	; 0x01
    de6a:	92 83       	std	Z+2, r25	; 0x02
    de6c:	a3 83       	std	Z+3, r26	; 0x03
    de6e:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
		return(RES_NOTRDY);	
    de72:	83 e0       	ldi	r24, 0x03	; 3
    de74:	9a c0       	rjmp	.+308    	; 0xdfaa <mmc_init+0x196>
	}


    if( verbose)
    de76:	e1 14       	cp	r14, r1
    de78:	f1 04       	cpc	r15, r1
    de7a:	11 f1       	breq	.+68     	; 0xdec0 <mmc_init+0xac>
    {
		printf("MMC Card Inserted\n");
    de7c:	87 ed       	ldi	r24, 0xD7	; 215
    de7e:	97 e0       	ldi	r25, 0x07	; 7
    de80:	a0 e0       	ldi	r26, 0x00	; 0
    de82:	ed b7       	in	r30, 0x3d	; 61
    de84:	fe b7       	in	r31, 0x3e	; 62
    de86:	81 83       	std	Z+1, r24	; 0x01
    de88:	92 83       	std	Z+2, r25	; 0x02
    de8a:	a3 83       	std	Z+3, r26	; 0x03
    de8c:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>

#if defined (FF_USE_LFN)
        printf("LFN Enabled");
    de90:	8b ec       	ldi	r24, 0xCB	; 203
    de92:	97 e0       	ldi	r25, 0x07	; 7
    de94:	a0 e0       	ldi	r26, 0x00	; 0
    de96:	ed b7       	in	r30, 0x3d	; 61
    de98:	fe b7       	in	r31, 0x3e	; 62
    de9a:	81 83       	std	Z+1, r24	; 0x01
    de9c:	92 83       	std	Z+2, r25	; 0x02
    de9e:	a3 83       	std	Z+3, r26	; 0x03
    dea0:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
#else
        printf("LFN Disabled");
#endif
        printf(", Code page: %u\n", FF_CODE_PAGE);
    dea4:	85 eb       	ldi	r24, 0xB5	; 181
    dea6:	91 e0       	ldi	r25, 0x01	; 1
    dea8:	ed b7       	in	r30, 0x3d	; 61
    deaa:	fe b7       	in	r31, 0x3e	; 62
    deac:	95 83       	std	Z+5, r25	; 0x05
    deae:	84 83       	std	Z+4, r24	; 0x04
    deb0:	8a eb       	ldi	r24, 0xBA	; 186
    deb2:	97 e0       	ldi	r25, 0x07	; 7
    deb4:	a0 e0       	ldi	r26, 0x00	; 0
    deb6:	81 83       	std	Z+1, r24	; 0x01
    deb8:	92 83       	std	Z+2, r25	; 0x02
    deba:	a3 83       	std	Z+3, r26	; 0x03
    debc:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    }

    rc = disk_initialize(DEV_MMC);                // aliased to mmc_disk_initialize()
    dec0:	80 e0       	ldi	r24, 0x00	; 0
    dec2:	1d da       	rcall	.-3014   	; 0xd2fe <disk_initialize>
    dec4:	08 2f       	mov	r16, r24
    dec6:	10 e0       	ldi	r17, 0x00	; 0

    if( rc != RES_OK  )
    dec8:	01 15       	cp	r16, r1
    deca:	11 05       	cpc	r17, r1
        put_rc(rc);
    decc:	19 f0       	breq	.+6      	; 0xded4 <mmc_init+0xc0>
    dece:	c8 01       	movw	r24, r16
    ded0:	f4 d0       	rcall	.+488    	; 0xe0ba <put_rc>
    ded2:	0e c0       	rjmp	.+28     	; 0xdef0 <mmc_init+0xdc>

    if( rc == RES_OK)
        rc = f_mount(&Fatfs[0],"/", 0);
    ded4:	40 e0       	ldi	r20, 0x00	; 0
    ded6:	66 ea       	ldi	r22, 0xA6	; 166
    ded8:	78 e0       	ldi	r23, 0x08	; 8
    deda:	80 e8       	ldi	r24, 0x80	; 128
    dedc:	9a e1       	ldi	r25, 0x1A	; 26
    dede:	0e 94 57 59 	call	0xb2ae	; 0xb2ae <f_mount>
    dee2:	8c 01       	movw	r16, r24

    if( rc != RES_OK || verbose)
    dee4:	89 2b       	or	r24, r25
    dee6:	21 f4       	brne	.+8      	; 0xdef0 <mmc_init+0xdc>
    dee8:	e1 14       	cp	r14, r1
    deea:	f1 04       	cpc	r15, r1
    deec:	09 f4       	brne	.+2      	; 0xdef0 <mmc_init+0xdc>
        put_rc( rc );
    deee:	4f c0       	rjmp	.+158    	; 0xdf8e <mmc_init+0x17a>
    def0:	c8 01       	movw	r24, r16
    def2:	e3 d0       	rcall	.+454    	; 0xe0ba <put_rc>

    if (verbose )
    def4:	e1 14       	cp	r14, r1
    def6:	f1 04       	cpc	r15, r1
    def8:	09 f4       	brne	.+2      	; 0xdefc <mmc_init+0xe8>
    defa:	49 c0       	rjmp	.+146    	; 0xdf8e <mmc_init+0x17a>
    {
        DWORD blksize = 0;
    defc:	c7 5f       	subi	r28, 0xF7	; 247
    defe:	de 4f       	sbci	r29, 0xFE	; 254
    df00:	18 82       	st	Y, r1
    df02:	19 82       	std	Y+1, r1	; 0x01
    df04:	1a 82       	std	Y+2, r1	; 0x02
    df06:	1b 82       	std	Y+3, r1	; 0x03
    df08:	c9 50       	subi	r28, 0x09	; 9
    df0a:	d1 40       	sbci	r29, 0x01	; 1
        if(rc == RES_OK)
    df0c:	01 15       	cp	r16, r1
    df0e:	11 05       	cpc	r17, r1
        {
            rc = disk_ioctl ( DEV_MMC, GET_BLOCK_SIZE, (void *) &blksize);
    df10:	a1 f5       	brne	.+104    	; 0xdf7a <mmc_init+0x166>
    df12:	ae 01       	movw	r20, r28
    df14:	47 5f       	subi	r20, 0xF7	; 247
    df16:	5e 4f       	sbci	r21, 0xFE	; 254
    df18:	63 e0       	ldi	r22, 0x03	; 3
    df1a:	80 e0       	ldi	r24, 0x00	; 0
    df1c:	16 da       	rcall	.-3028   	; 0xd34a <disk_ioctl>
            if( rc != RES_OK)
    df1e:	8c 01       	movw	r16, r24
    df20:	00 97       	sbiw	r24, 0x00	; 0
            {
                put_rc( rc );
    df22:	61 f0       	breq	.+24     	; 0xdf3c <mmc_init+0x128>
    df24:	ca d0       	rcall	.+404    	; 0xe0ba <put_rc>
                printf("MMC Block Size - read failed\n");
    df26:	8c e9       	ldi	r24, 0x9C	; 156
    df28:	97 e0       	ldi	r25, 0x07	; 7
    df2a:	a0 e0       	ldi	r26, 0x00	; 0
    df2c:	ed b7       	in	r30, 0x3d	; 61
    df2e:	fe b7       	in	r31, 0x3e	; 62
    df30:	81 83       	std	Z+1, r24	; 0x01
    df32:	92 83       	std	Z+2, r25	; 0x02
    df34:	a3 83       	std	Z+3, r26	; 0x03
    df36:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    df3a:	1f c0       	rjmp	.+62     	; 0xdf7a <mmc_init+0x166>
            }
            else
            {
                printf("MMC Block Size: %ld\n", blksize);
    df3c:	c7 5f       	subi	r28, 0xF7	; 247
    df3e:	de 4f       	sbci	r29, 0xFE	; 254
    df40:	88 81       	ld	r24, Y
    df42:	99 81       	ldd	r25, Y+1	; 0x01
    df44:	aa 81       	ldd	r26, Y+2	; 0x02
    df46:	bb 81       	ldd	r27, Y+3	; 0x03
    df48:	c9 50       	subi	r28, 0x09	; 9
    df4a:	d1 40       	sbci	r29, 0x01	; 1
    df4c:	ed b7       	in	r30, 0x3d	; 61
    df4e:	fe b7       	in	r31, 0x3e	; 62
    df50:	84 83       	std	Z+4, r24	; 0x04
    df52:	95 83       	std	Z+5, r25	; 0x05
    df54:	a6 83       	std	Z+6, r26	; 0x06
    df56:	b7 83       	std	Z+7, r27	; 0x07
    df58:	87 e8       	ldi	r24, 0x87	; 135
    df5a:	97 e0       	ldi	r25, 0x07	; 7
    df5c:	a0 e0       	ldi	r26, 0x00	; 0
    df5e:	81 83       	std	Z+1, r24	; 0x01
    df60:	92 83       	std	Z+2, r25	; 0x02
    df62:	a3 83       	std	Z+3, r26	; 0x03
    df64:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
            }
            if( rc == RES_OK)
            {
                strcpy(buff,"/");
    df68:	66 ea       	ldi	r22, 0xA6	; 166
    df6a:	78 e0       	ldi	r23, 0x08	; 8
    df6c:	ce 01       	movw	r24, r28
    df6e:	08 96       	adiw	r24, 0x08	; 8
    df70:	0e 94 2c 31 	call	0x6258	; 0x6258 <strcpy>
                fatfs_status(buff);
    df74:	ce 01       	movw	r24, r28
    df76:	08 96       	adiw	r24, 0x08	; 8
    df78:	34 d1       	rcall	.+616    	; 0xe1e2 <fatfs_status>
            }
        }
        printf("END MMC INIT\n");
    df7a:	89 e7       	ldi	r24, 0x79	; 121
    df7c:	97 e0       	ldi	r25, 0x07	; 7
    df7e:	a0 e0       	ldi	r26, 0x00	; 0
    df80:	ed b7       	in	r30, 0x3d	; 61
    df82:	fe b7       	in	r31, 0x3e	; 62
    df84:	81 83       	std	Z+1, r24	; 0x01
    df86:	92 83       	std	Z+2, r25	; 0x02
    df88:	a3 83       	std	Z+3, r26	; 0x03
    df8a:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    }
    mmc_init_flag = 1;
    df8e:	81 e0       	ldi	r24, 0x01	; 1
    df90:	90 e0       	ldi	r25, 0x00	; 0
    df92:	90 93 27 18 	sts	0x1827, r25	; 0x801827 <mmc_init_flag+0x1>
    df96:	80 93 26 18 	sts	0x1826, r24	; 0x801826 <mmc_init_flag>

	if(rc != RES_OK)
    df9a:	01 15       	cp	r16, r1
    df9c:	11 05       	cpc	r17, r1
    df9e:	21 f0       	breq	.+8      	; 0xdfa8 <mmc_init+0x194>
		set_error(1);
    dfa0:	0e 94 e5 26 	call	0x4dca	; 0x4dca <set_error>
    dfa4:	c8 01       	movw	r24, r16
    dfa6:	02 c0       	rjmp	.+4      	; 0xdfac <mmc_init+0x198>
    dfa8:	80 e0       	ldi	r24, 0x00	; 0
    dfaa:	90 e0       	ldi	r25, 0x00	; 0

    return( rc ) ;
}
    dfac:	c4 5f       	subi	r28, 0xF4	; 244
    dfae:	de 4f       	sbci	r29, 0xFE	; 254
    dfb0:	e6 e0       	ldi	r30, 0x06	; 6
    dfb2:	0c 94 e3 e6 	jmp	0x1cdc6	; 0x1cdc6 <__epilogue_restores__+0x18>

0000dfb6 <mmc_wp_status>:

MEMSPACE
int mmc_wp_status()
{
    return (0);
}
    dfb6:	80 e0       	ldi	r24, 0x00	; 0
    dfb8:	90 e0       	ldi	r25, 0x00	; 0
    dfba:	08 95       	ret

0000dfbc <tm_to_fat>:
/// @param[in] t: POSIX struct tm * to convert.
///
/// @return  FAT32 time.
MEMSPACE
uint32_t tm_to_fat(tm_t *t)
{
    dfbc:	0f 93       	push	r16
    dfbe:	1f 93       	push	r17
    dfc0:	fc 01       	movw	r30, r24
        | (((uint32_t)t->tm_mon+1) << 21)
        | (((uint32_t)t->tm_mday) << 16)
        | ((uint32_t)t->tm_hour << 11)
        | ((uint32_t)t->tm_min << 5)
        | ((uint32_t)t->tm_sec >> 1);
    return(fat);
    dfc2:	46 81       	ldd	r20, Z+6	; 0x06
    dfc4:	57 81       	ldd	r21, Z+7	; 0x07
    dfc6:	05 2e       	mov	r0, r21
    dfc8:	00 0c       	add	r0, r0
    dfca:	66 0b       	sbc	r22, r22
    dfcc:	77 0b       	sbc	r23, r23
    dfce:	ba 01       	movw	r22, r20
    dfd0:	55 27       	eor	r21, r21
    dfd2:	44 27       	eor	r20, r20
    dfd4:	84 81       	ldd	r24, Z+4	; 0x04
    dfd6:	95 81       	ldd	r25, Z+5	; 0x05
    dfd8:	09 2e       	mov	r0, r25
    dfda:	00 0c       	add	r0, r0
    dfdc:	aa 0b       	sbc	r26, r26
    dfde:	bb 0b       	sbc	r27, r27
    dfe0:	2b e0       	ldi	r18, 0x0B	; 11
    dfe2:	88 0f       	add	r24, r24
    dfe4:	99 1f       	adc	r25, r25
    dfe6:	aa 1f       	adc	r26, r26
    dfe8:	bb 1f       	adc	r27, r27
    dfea:	2a 95       	dec	r18
    dfec:	d1 f7       	brne	.-12     	; 0xdfe2 <tm_to_fat+0x26>
    dfee:	48 2b       	or	r20, r24
    dff0:	59 2b       	or	r21, r25
    dff2:	6a 2b       	or	r22, r26
    dff4:	7b 2b       	or	r23, r27
    dff6:	82 81       	ldd	r24, Z+2	; 0x02
    dff8:	93 81       	ldd	r25, Z+3	; 0x03
    dffa:	09 2e       	mov	r0, r25
    dffc:	00 0c       	add	r0, r0
    dffe:	aa 0b       	sbc	r26, r26
    e000:	bb 0b       	sbc	r27, r27
    e002:	35 e0       	ldi	r19, 0x05	; 5
    e004:	88 0f       	add	r24, r24
    e006:	99 1f       	adc	r25, r25
    e008:	aa 1f       	adc	r26, r26
    e00a:	bb 1f       	adc	r27, r27
    e00c:	3a 95       	dec	r19
    e00e:	d1 f7       	brne	.-12     	; 0xe004 <tm_to_fat+0x48>
    e010:	48 2b       	or	r20, r24
    e012:	59 2b       	or	r21, r25
    e014:	6a 2b       	or	r22, r26
    e016:	7b 2b       	or	r23, r27
    e018:	80 81       	ld	r24, Z
    e01a:	91 81       	ldd	r25, Z+1	; 0x01
    e01c:	09 2e       	mov	r0, r25
    e01e:	00 0c       	add	r0, r0
    e020:	aa 0b       	sbc	r26, r26
    e022:	bb 0b       	sbc	r27, r27
    e024:	b6 95       	lsr	r27
    e026:	a7 95       	ror	r26
    e028:	97 95       	ror	r25
    e02a:	87 95       	ror	r24
    e02c:	84 2b       	or	r24, r20
    e02e:	95 2b       	or	r25, r21
    e030:	a6 2b       	or	r26, r22
    e032:	b7 2b       	or	r27, r23
    e034:	02 85       	ldd	r16, Z+10	; 0x0a
    e036:	13 85       	ldd	r17, Z+11	; 0x0b
    e038:	00 55       	subi	r16, 0x50	; 80
    e03a:	11 09       	sbc	r17, r1
    e03c:	01 2e       	mov	r0, r17
    e03e:	00 0c       	add	r0, r0
    e040:	22 0b       	sbc	r18, r18
    e042:	33 0b       	sbc	r19, r19
    e044:	49 e1       	ldi	r20, 0x19	; 25
    e046:	00 0f       	add	r16, r16
    e048:	11 1f       	adc	r17, r17
    e04a:	22 1f       	adc	r18, r18
    e04c:	33 1f       	adc	r19, r19
    e04e:	4a 95       	dec	r20
    e050:	d1 f7       	brne	.-12     	; 0xe046 <tm_to_fat+0x8a>
    e052:	ac 01       	movw	r20, r24
    e054:	bd 01       	movw	r22, r26
    e056:	40 2b       	or	r20, r16
    e058:	51 2b       	or	r21, r17
    e05a:	62 2b       	or	r22, r18
    e05c:	73 2b       	or	r23, r19
    e05e:	80 85       	ldd	r24, Z+8	; 0x08
    e060:	91 85       	ldd	r25, Z+9	; 0x09
    e062:	09 2e       	mov	r0, r25
    e064:	00 0c       	add	r0, r0
    e066:	aa 0b       	sbc	r26, r26
    e068:	bb 0b       	sbc	r27, r27
    e06a:	01 96       	adiw	r24, 0x01	; 1
    e06c:	a1 1d       	adc	r26, r1
    e06e:	b1 1d       	adc	r27, r1
    e070:	e5 e1       	ldi	r30, 0x15	; 21
    e072:	88 0f       	add	r24, r24
    e074:	99 1f       	adc	r25, r25
    e076:	aa 1f       	adc	r26, r26
    e078:	bb 1f       	adc	r27, r27
    e07a:	ea 95       	dec	r30
    e07c:	d1 f7       	brne	.-12     	; 0xe072 <tm_to_fat+0xb6>
    e07e:	8a 01       	movw	r16, r20
    e080:	9b 01       	movw	r18, r22
    e082:	08 2b       	or	r16, r24
    e084:	19 2b       	or	r17, r25
    e086:	2a 2b       	or	r18, r26
    e088:	3b 2b       	or	r19, r27
    e08a:	c9 01       	movw	r24, r18
    e08c:	b8 01       	movw	r22, r16
}
    e08e:	1f 91       	pop	r17
    e090:	0f 91       	pop	r16
    e092:	08 95       	ret

0000e094 <get_fattime>:
///
/// @return FAT32 time.
/// @see tm_to_fat().
MEMSPACE
DWORD get_fattime (void)
{
    e094:	a4 e0       	ldi	r26, 0x04	; 4
    e096:	b0 e0       	ldi	r27, 0x00	; 0
    e098:	e0 e5       	ldi	r30, 0x50	; 80
    e09a:	f0 e7       	ldi	r31, 0x70	; 112
    e09c:	0c 94 cb e6 	jmp	0x1cd96	; 0x1cd96 <__prologue_saves__+0x20>
    time_t t;
/* Get GMT time */
    time(&t);
    e0a0:	ce 01       	movw	r24, r28
    e0a2:	01 96       	adiw	r24, 0x01	; 1
    e0a4:	0e 94 ed 37 	call	0x6fda	; 0x6fda <time>
    return( tm_to_fat(localtime(&t)));
    e0a8:	ce 01       	movw	r24, r28
    e0aa:	01 96       	adiw	r24, 0x01	; 1
    e0ac:	0e 94 86 38 	call	0x710c	; 0x710c <localtime>
    e0b0:	85 df       	rcall	.-246    	; 0xdfbc <tm_to_fat>
}
    e0b2:	24 96       	adiw	r28, 0x04	; 4
    e0b4:	e2 e0       	ldi	r30, 0x02	; 2
    e0b6:	0c 94 e7 e6 	jmp	0x1cdce	; 0x1cdce <__epilogue_restores__+0x20>

0000e0ba <put_rc>:
/// @param[in] rc: FatFs status return code
/// @return  void

MEMSPACE
void put_rc (int rc)
{
    e0ba:	00 d0       	rcall	.+0      	; 0xe0bc <put_rc+0x2>
    e0bc:	00 d0       	rcall	.+0      	; 0xe0be <put_rc+0x4>
    e0be:	1f 92       	push	r1
        ptr = "INVALID ERROR MESSAGE";
    else
        ptr = (char *) err_msg[(int)rc];
    printf("rc=%u FR_%s\n", rc, ptr);
#else
    printf("rc=%u\n", rc);
    e0c0:	ed b7       	in	r30, 0x3d	; 61
    e0c2:	fe b7       	in	r31, 0x3e	; 62
    e0c4:	95 83       	std	Z+5, r25	; 0x05
    e0c6:	84 83       	std	Z+4, r24	; 0x04
    e0c8:	8c e9       	ldi	r24, 0x9C	; 156
    e0ca:	9a e0       	ldi	r25, 0x0A	; 10
    e0cc:	a0 e0       	ldi	r26, 0x00	; 0
    e0ce:	81 83       	std	Z+1, r24	; 0x01
    e0d0:	92 83       	std	Z+2, r25	; 0x02
    e0d2:	a3 83       	std	Z+3, r26	; 0x03
    e0d4:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
#endif
}
    e0d8:	0f 90       	pop	r0
    e0da:	0f 90       	pop	r0
    e0dc:	0f 90       	pop	r0
    e0de:	0f 90       	pop	r0
    e0e0:	0f 90       	pop	r0
    e0e2:	08 95       	ret

0000e0e4 <fatfs_scan_files>:

MEMSPACE
int fatfs_scan_files (
char* path                                        /* Pointer to the working buffer with start path */
)
{
    e0e4:	a4 e4       	ldi	r26, 0x44	; 68
    e0e6:	b1 e0       	ldi	r27, 0x01	; 1
    e0e8:	e8 e7       	ldi	r30, 0x78	; 120
    e0ea:	f0 e7       	ldi	r31, 0x70	; 112
    e0ec:	0c 94 c6 e6 	jmp	0x1cd8c	; 0x1cd8c <__prologue_saves__+0x16>
    e0f0:	8c 01       	movw	r16, r24
    DIR dirs;
    FRESULT fr;
    int i;
    FILINFO info;

    fr = f_opendir(&dirs, path);
    e0f2:	bc 01       	movw	r22, r24
    e0f4:	ce 01       	movw	r24, r28
    e0f6:	89 5e       	subi	r24, 0xE9	; 233
    e0f8:	9e 4f       	sbci	r25, 0xFE	; 254
    e0fa:	0e 94 12 63 	call	0xc624	; 0xc624 <f_opendir>
    if (fr == FR_OK)
    e0fe:	00 97       	sbiw	r24, 0x00	; 0
    e100:	09 f0       	breq	.+2      	; 0xe104 <fatfs_scan_files+0x20>
    e102:	5b c0       	rjmp	.+182    	; 0xe1ba <fatfs_scan_files+0xd6>
        {
            if (info.fattrib & AM_DIR)
            {
                AccDirs++;
                i = strlen(path);
                path[i] = '/'; strcpy(path+i+1, info.fname);
    e104:	8f e2       	ldi	r24, 0x2F	; 47
    e106:	d8 2e       	mov	r13, r24
    FILINFO info;

    fr = f_opendir(&dirs, path);
    if (fr == FR_OK)
    {
        while (((fr = f_readdir(&dirs, &info)) == FR_OK) && info.fname[0])
    e108:	be 01       	movw	r22, r28
    e10a:	6f 5f       	subi	r22, 0xFF	; 255
    e10c:	7f 4f       	sbci	r23, 0xFF	; 255
    e10e:	ce 01       	movw	r24, r28
    e110:	89 5e       	subi	r24, 0xE9	; 233
    e112:	9e 4f       	sbci	r25, 0xFE	; 254
    e114:	0e 94 98 63 	call	0xc730	; 0xc730 <f_readdir>
    e118:	00 97       	sbiw	r24, 0x00	; 0
    e11a:	09 f0       	breq	.+2      	; 0xe11e <fatfs_scan_files+0x3a>
    e11c:	4e c0       	rjmp	.+156    	; 0xe1ba <fatfs_scan_files+0xd6>
    e11e:	2f 89       	ldd	r18, Y+23	; 0x17
    e120:	22 23       	and	r18, r18
    e122:	09 f4       	brne	.+2      	; 0xe126 <fatfs_scan_files+0x42>
    e124:	4a c0       	rjmp	.+148    	; 0xe1ba <fatfs_scan_files+0xd6>
        {
            if (info.fattrib & AM_DIR)
    e126:	89 85       	ldd	r24, Y+9	; 0x09
    e128:	84 ff       	sbrs	r24, 4
    e12a:	25 c0       	rjmp	.+74     	; 0xe176 <fatfs_scan_files+0x92>
            {
                AccDirs++;
    e12c:	80 91 b9 1c 	lds	r24, 0x1CB9	; 0x801cb9 <AccDirs>
    e130:	90 91 ba 1c 	lds	r25, 0x1CBA	; 0x801cba <AccDirs+0x1>
    e134:	01 96       	adiw	r24, 0x01	; 1
    e136:	90 93 ba 1c 	sts	0x1CBA, r25	; 0x801cba <AccDirs+0x1>
    e13a:	80 93 b9 1c 	sts	0x1CB9, r24	; 0x801cb9 <AccDirs>
                i = strlen(path);
    e13e:	f8 01       	movw	r30, r16
    e140:	01 90       	ld	r0, Z+
    e142:	00 20       	and	r0, r0
    e144:	e9 f7       	brne	.-6      	; 0xe140 <fatfs_scan_files+0x5c>
    e146:	31 97       	sbiw	r30, 0x01	; 1
    e148:	e0 1b       	sub	r30, r16
    e14a:	f1 0b       	sbc	r31, r17
                path[i] = '/'; strcpy(path+i+1, info.fname);
    e14c:	78 01       	movw	r14, r16
    e14e:	ee 0e       	add	r14, r30
    e150:	ff 1e       	adc	r15, r31
    e152:	d7 01       	movw	r26, r14
    e154:	dc 92       	st	X, r13
    e156:	cf 01       	movw	r24, r30
    e158:	01 96       	adiw	r24, 0x01	; 1
    e15a:	be 01       	movw	r22, r28
    e15c:	69 5e       	subi	r22, 0xE9	; 233
    e15e:	7f 4f       	sbci	r23, 0xFF	; 255
    e160:	80 0f       	add	r24, r16
    e162:	91 1f       	adc	r25, r17
    e164:	0e 94 2c 31 	call	0x6258	; 0x6258 <strcpy>
                fr = fatfs_scan_files(path);
    e168:	c8 01       	movw	r24, r16
    e16a:	bc df       	rcall	.-136    	; 0xe0e4 <fatfs_scan_files>
                path[i] = 0;
    e16c:	f7 01       	movw	r30, r14
    e16e:	10 82       	st	Z, r1
                if (fr != FR_OK) break;
    e170:	00 97       	sbiw	r24, 0x00	; 0
    e172:	51 f2       	breq	.-108    	; 0xe108 <fatfs_scan_files+0x24>
    e174:	22 c0       	rjmp	.+68     	; 0xe1ba <fatfs_scan_files+0xd6>
            }
            else
            {
//              xprintf(PSTR("%s/%s\n"), path, info.fname);
                AccFiles++;
    e176:	80 91 bb 1c 	lds	r24, 0x1CBB	; 0x801cbb <AccFiles>
    e17a:	90 91 bc 1c 	lds	r25, 0x1CBC	; 0x801cbc <AccFiles+0x1>
    e17e:	01 96       	adiw	r24, 0x01	; 1
    e180:	90 93 bc 1c 	sts	0x1CBC, r25	; 0x801cbc <AccFiles+0x1>
    e184:	80 93 bb 1c 	sts	0x1CBB, r24	; 0x801cbb <AccFiles>
                AccSize += info.fsize;
    e188:	40 91 b5 1c 	lds	r20, 0x1CB5	; 0x801cb5 <AccSize>
    e18c:	50 91 b6 1c 	lds	r21, 0x1CB6	; 0x801cb6 <AccSize+0x1>
    e190:	60 91 b7 1c 	lds	r22, 0x1CB7	; 0x801cb7 <AccSize+0x2>
    e194:	70 91 b8 1c 	lds	r23, 0x1CB8	; 0x801cb8 <AccSize+0x3>
    e198:	89 81       	ldd	r24, Y+1	; 0x01
    e19a:	9a 81       	ldd	r25, Y+2	; 0x02
    e19c:	ab 81       	ldd	r26, Y+3	; 0x03
    e19e:	bc 81       	ldd	r27, Y+4	; 0x04
    e1a0:	84 0f       	add	r24, r20
    e1a2:	95 1f       	adc	r25, r21
    e1a4:	a6 1f       	adc	r26, r22
    e1a6:	b7 1f       	adc	r27, r23
    e1a8:	80 93 b5 1c 	sts	0x1CB5, r24	; 0x801cb5 <AccSize>
    e1ac:	90 93 b6 1c 	sts	0x1CB6, r25	; 0x801cb6 <AccSize+0x1>
    e1b0:	a0 93 b7 1c 	sts	0x1CB7, r26	; 0x801cb7 <AccSize+0x2>
    e1b4:	b0 93 b8 1c 	sts	0x1CB8, r27	; 0x801cb8 <AccSize+0x3>
    e1b8:	a7 cf       	rjmp	.-178    	; 0xe108 <fatfs_scan_files+0x24>
#endif
        }
    }

    return fr;
}
    e1ba:	cc 5b       	subi	r28, 0xBC	; 188
    e1bc:	de 4f       	sbci	r29, 0xFE	; 254
    e1be:	e7 e0       	ldi	r30, 0x07	; 7
    e1c0:	0c 94 e2 e6 	jmp	0x1cdc4	; 0x1cdc4 <__epilogue_restores__+0x16>

0000e1c4 <fatfs_fstype>:
/// @brief  return a string with the file system type
/// @param[in] type: file system type
/// @return string with file system type
MEMSPACE
char *fatfs_fstype(int type)
{
    e1c4:	01 97       	sbiw	r24, 0x01	; 1
    e1c6:	84 30       	cpi	r24, 0x04	; 4
    e1c8:	91 05       	cpc	r25, r1
    e1ca:	40 f4       	brcc	.+16     	; 0xe1dc <fatfs_fstype+0x18>
    e1cc:	88 0f       	add	r24, r24
    e1ce:	99 1f       	adc	r25, r25
    e1d0:	fc 01       	movw	r30, r24
    e1d2:	e6 53       	subi	r30, 0x36	; 54
    e1d4:	f7 4f       	sbci	r31, 0xF7	; 247
    e1d6:	80 81       	ld	r24, Z
    e1d8:	91 81       	ldd	r25, Z+1	; 0x01
    e1da:	08 95       	ret
    char *ptr;
    switch(type)
    e1dc:	88 ea       	ldi	r24, 0xA8	; 168
    e1de:	98 e0       	ldi	r25, 0x08	; 8
        default:
            ptr = "UNKNOWN";
            break;
    }
    return(ptr);
}
    e1e0:	08 95       	ret

0000e1e2 <fatfs_status>:
/// @see AccFiles: Total number of Files
/// @see AccSize:  Total size of all files
/// @return  1 on success 0 on error
MEMSPACE
int fatfs_status(char *ptr)
{
    e1e2:	a7 e3       	ldi	r26, 0x37	; 55
    e1e4:	b0 e0       	ldi	r27, 0x00	; 0
    e1e6:	e7 ef       	ldi	r30, 0xF7	; 247
    e1e8:	f0 e7       	ldi	r31, 0x70	; 112
    e1ea:	0c 94 c5 e6 	jmp	0x1cd8a	; 0x1cd8a <__prologue_saves__+0x14>
    e1ee:	7c 01       	movw	r14, r24
    int res;
    FATFS *fs;
    char label[24+2];
    DWORD vsn;                                    // volume serial number

    while(*ptr == ' ' || *ptr == '\t')
    e1f0:	fc 01       	movw	r30, r24
    e1f2:	21 91       	ld	r18, Z+
    e1f4:	cf 01       	movw	r24, r30
    e1f6:	20 32       	cpi	r18, 0x20	; 32
    e1f8:	d1 f3       	breq	.-12     	; 0xe1ee <fatfs_status+0xc>
    e1fa:	29 30       	cpi	r18, 0x09	; 9
    e1fc:	c1 f3       	breq	.-16     	; 0xe1ee <fatfs_status+0xc>
        ++ptr;

    printf("fatfs status:%s\n",ptr);
    e1fe:	ed b7       	in	r30, 0x3d	; 61
    e200:	fe b7       	in	r31, 0x3e	; 62
    e202:	e4 82       	std	Z+4, r14	; 0x04
    e204:	f5 82       	std	Z+5, r15	; 0x05
    e206:	8b e8       	ldi	r24, 0x8B	; 139
    e208:	9a e0       	ldi	r25, 0x0A	; 10
    e20a:	a0 e0       	ldi	r26, 0x00	; 0
    e20c:	81 83       	std	Z+1, r24	; 0x01
    e20e:	92 83       	std	Z+2, r25	; 0x02
    e210:	a3 83       	std	Z+3, r26	; 0x03
    e212:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    res = f_getfree(ptr, (DWORD*)&p2, &fs);
    e216:	ae 01       	movw	r20, r28
    e218:	4a 5c       	subi	r20, 0xCA	; 202
    e21a:	5f 4f       	sbci	r21, 0xFF	; 255
    e21c:	be 01       	movw	r22, r28
    e21e:	6e 5c       	subi	r22, 0xCE	; 206
    e220:	7f 4f       	sbci	r23, 0xFF	; 255
    e222:	c7 01       	movw	r24, r14
    e224:	0e 94 1a 64 	call	0xc834	; 0xc834 <f_getfree>
    if (res)
    e228:	89 2b       	or	r24, r25
    e22a:	19 f0       	breq	.+6      	; 0xe232 <fatfs_status+0x50>
    {
        printf("fatfs_status f_getfree failed\n");
    e22c:	8c e6       	ldi	r24, 0x6C	; 108
    e22e:	9a e0       	ldi	r25, 0x0A	; 10
    e230:	c0 c0       	rjmp	.+384    	; 0xe3b2 <fatfs_status+0x1d0>
        return(0);
    }
    printf("FAT type                = %s\n",  fatfs_fstype(fs->fs_type));
    e232:	ee a9       	ldd	r30, Y+54	; 0x36
    e234:	ff a9       	ldd	r31, Y+55	; 0x37
    e236:	80 81       	ld	r24, Z
    e238:	90 e0       	ldi	r25, 0x00	; 0
    e23a:	c4 df       	rcall	.-120    	; 0xe1c4 <fatfs_fstype>
    e23c:	ed b7       	in	r30, 0x3d	; 61
    e23e:	fe b7       	in	r31, 0x3e	; 62
    e240:	95 83       	std	Z+5, r25	; 0x05
    e242:	84 83       	std	Z+4, r24	; 0x04
    e244:	8e e4       	ldi	r24, 0x4E	; 78
    e246:	9a e0       	ldi	r25, 0x0A	; 10
    e248:	a0 e0       	ldi	r26, 0x00	; 0
    e24a:	81 83       	std	Z+1, r24	; 0x01
    e24c:	92 83       	std	Z+2, r25	; 0x02
    e24e:	a3 83       	std	Z+3, r26	; 0x03
    e250:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    printf("Bytes/Cluster           = %lu\n", (DWORD)fs->csize * 512);
    e254:	ee a9       	ldd	r30, Y+54	; 0x36
    e256:	ff a9       	ldd	r31, Y+55	; 0x37
    e258:	81 85       	ldd	r24, Z+9	; 0x09
    e25a:	92 85       	ldd	r25, Z+10	; 0x0a
    e25c:	a0 e0       	ldi	r26, 0x00	; 0
    e25e:	b0 e0       	ldi	r27, 0x00	; 0
    e260:	39 e0       	ldi	r19, 0x09	; 9
    e262:	88 0f       	add	r24, r24
    e264:	99 1f       	adc	r25, r25
    e266:	aa 1f       	adc	r26, r26
    e268:	bb 1f       	adc	r27, r27
    e26a:	3a 95       	dec	r19
    e26c:	d1 f7       	brne	.-12     	; 0xe262 <fatfs_status+0x80>
    e26e:	ed b7       	in	r30, 0x3d	; 61
    e270:	fe b7       	in	r31, 0x3e	; 62
    e272:	84 83       	std	Z+4, r24	; 0x04
    e274:	95 83       	std	Z+5, r25	; 0x05
    e276:	a6 83       	std	Z+6, r26	; 0x06
    e278:	b7 83       	std	Z+7, r27	; 0x07
    e27a:	8f e2       	ldi	r24, 0x2F	; 47
    e27c:	9a e0       	ldi	r25, 0x0A	; 10
    e27e:	a0 e0       	ldi	r26, 0x00	; 0
    e280:	81 83       	std	Z+1, r24	; 0x01
    e282:	92 83       	std	Z+2, r25	; 0x02
    e284:	a3 83       	std	Z+3, r26	; 0x03
    e286:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    printf("Number of FATs          = %u\n",  fs->n_fats);
    e28a:	ee a9       	ldd	r30, Y+54	; 0x36
    e28c:	ff a9       	ldd	r31, Y+55	; 0x37
    e28e:	82 81       	ldd	r24, Z+2	; 0x02
    e290:	90 e0       	ldi	r25, 0x00	; 0
    e292:	ed b7       	in	r30, 0x3d	; 61
    e294:	fe b7       	in	r31, 0x3e	; 62
    e296:	95 83       	std	Z+5, r25	; 0x05
    e298:	84 83       	std	Z+4, r24	; 0x04
    e29a:	81 e1       	ldi	r24, 0x11	; 17
    e29c:	9a e0       	ldi	r25, 0x0A	; 10
    e29e:	a0 e0       	ldi	r26, 0x00	; 0
    e2a0:	81 83       	std	Z+1, r24	; 0x01
    e2a2:	92 83       	std	Z+2, r25	; 0x02
    e2a4:	a3 83       	std	Z+3, r26	; 0x03
    e2a6:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    printf("Root DIR entries        = %u\n",  fs->n_rootdir);
    e2aa:	ee a9       	ldd	r30, Y+54	; 0x36
    e2ac:	ff a9       	ldd	r31, Y+55	; 0x37
    e2ae:	87 81       	ldd	r24, Z+7	; 0x07
    e2b0:	90 85       	ldd	r25, Z+8	; 0x08
    e2b2:	ed b7       	in	r30, 0x3d	; 61
    e2b4:	fe b7       	in	r31, 0x3e	; 62
    e2b6:	95 83       	std	Z+5, r25	; 0x05
    e2b8:	84 83       	std	Z+4, r24	; 0x04
    e2ba:	83 ef       	ldi	r24, 0xF3	; 243
    e2bc:	99 e0       	ldi	r25, 0x09	; 9
    e2be:	a0 e0       	ldi	r26, 0x00	; 0
    e2c0:	81 83       	std	Z+1, r24	; 0x01
    e2c2:	92 83       	std	Z+2, r25	; 0x02
    e2c4:	a3 83       	std	Z+3, r26	; 0x03
    e2c6:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    printf("Sectors/FAT             = %lu\n", fs->fsize);
    e2ca:	ee a9       	ldd	r30, Y+54	; 0x36
    e2cc:	ff a9       	ldd	r31, Y+55	; 0x37
    e2ce:	85 8d       	ldd	r24, Z+29	; 0x1d
    e2d0:	96 8d       	ldd	r25, Z+30	; 0x1e
    e2d2:	a7 8d       	ldd	r26, Z+31	; 0x1f
    e2d4:	b0 a1       	ldd	r27, Z+32	; 0x20
    e2d6:	ed b7       	in	r30, 0x3d	; 61
    e2d8:	fe b7       	in	r31, 0x3e	; 62
    e2da:	84 83       	std	Z+4, r24	; 0x04
    e2dc:	95 83       	std	Z+5, r25	; 0x05
    e2de:	a6 83       	std	Z+6, r26	; 0x06
    e2e0:	b7 83       	std	Z+7, r27	; 0x07
    e2e2:	84 ed       	ldi	r24, 0xD4	; 212
    e2e4:	99 e0       	ldi	r25, 0x09	; 9
    e2e6:	a0 e0       	ldi	r26, 0x00	; 0
    e2e8:	81 83       	std	Z+1, r24	; 0x01
    e2ea:	92 83       	std	Z+2, r25	; 0x02
    e2ec:	a3 83       	std	Z+3, r26	; 0x03
    e2ee:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    printf("Number of clusters      = %lu\n", fs->n_fatent - 2);
    e2f2:	ee a9       	ldd	r30, Y+54	; 0x36
    e2f4:	ff a9       	ldd	r31, Y+55	; 0x37
    e2f6:	81 8d       	ldd	r24, Z+25	; 0x19
    e2f8:	92 8d       	ldd	r25, Z+26	; 0x1a
    e2fa:	a3 8d       	ldd	r26, Z+27	; 0x1b
    e2fc:	b4 8d       	ldd	r27, Z+28	; 0x1c
    e2fe:	02 97       	sbiw	r24, 0x02	; 2
    e300:	a1 09       	sbc	r26, r1
    e302:	b1 09       	sbc	r27, r1
    e304:	ed b7       	in	r30, 0x3d	; 61
    e306:	fe b7       	in	r31, 0x3e	; 62
    e308:	84 83       	std	Z+4, r24	; 0x04
    e30a:	95 83       	std	Z+5, r25	; 0x05
    e30c:	a6 83       	std	Z+6, r26	; 0x06
    e30e:	b7 83       	std	Z+7, r27	; 0x07
    e310:	85 eb       	ldi	r24, 0xB5	; 181
    e312:	99 e0       	ldi	r25, 0x09	; 9
    e314:	a0 e0       	ldi	r26, 0x00	; 0
    e316:	81 83       	std	Z+1, r24	; 0x01
    e318:	92 83       	std	Z+2, r25	; 0x02
    e31a:	a3 83       	std	Z+3, r26	; 0x03
    e31c:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    printf("FAT start (lba)         = %lu\n", fs->fatbase);
    e320:	ee a9       	ldd	r30, Y+54	; 0x36
    e322:	ff a9       	ldd	r31, Y+55	; 0x37
    e324:	85 a1       	ldd	r24, Z+37	; 0x25
    e326:	96 a1       	ldd	r25, Z+38	; 0x26
    e328:	a7 a1       	ldd	r26, Z+39	; 0x27
    e32a:	b0 a5       	ldd	r27, Z+40	; 0x28
    e32c:	ed b7       	in	r30, 0x3d	; 61
    e32e:	fe b7       	in	r31, 0x3e	; 62
    e330:	84 83       	std	Z+4, r24	; 0x04
    e332:	95 83       	std	Z+5, r25	; 0x05
    e334:	a6 83       	std	Z+6, r26	; 0x06
    e336:	b7 83       	std	Z+7, r27	; 0x07
    e338:	86 e9       	ldi	r24, 0x96	; 150
    e33a:	99 e0       	ldi	r25, 0x09	; 9
    e33c:	a0 e0       	ldi	r26, 0x00	; 0
    e33e:	81 83       	std	Z+1, r24	; 0x01
    e340:	92 83       	std	Z+2, r25	; 0x02
    e342:	a3 83       	std	Z+3, r26	; 0x03
    e344:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    printf("DIR start (lba,clustor) = %lu\n", fs->dirbase);
    e348:	ee a9       	ldd	r30, Y+54	; 0x36
    e34a:	ff a9       	ldd	r31, Y+55	; 0x37
    e34c:	81 a5       	ldd	r24, Z+41	; 0x29
    e34e:	92 a5       	ldd	r25, Z+42	; 0x2a
    e350:	a3 a5       	ldd	r26, Z+43	; 0x2b
    e352:	b4 a5       	ldd	r27, Z+44	; 0x2c
    e354:	ed b7       	in	r30, 0x3d	; 61
    e356:	fe b7       	in	r31, 0x3e	; 62
    e358:	84 83       	std	Z+4, r24	; 0x04
    e35a:	95 83       	std	Z+5, r25	; 0x05
    e35c:	a6 83       	std	Z+6, r26	; 0x06
    e35e:	b7 83       	std	Z+7, r27	; 0x07
    e360:	87 e7       	ldi	r24, 0x77	; 119
    e362:	99 e0       	ldi	r25, 0x09	; 9
    e364:	a0 e0       	ldi	r26, 0x00	; 0
    e366:	81 83       	std	Z+1, r24	; 0x01
    e368:	92 83       	std	Z+2, r25	; 0x02
    e36a:	a3 83       	std	Z+3, r26	; 0x03
    e36c:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    printf("Data start (lba)        = %lu\n", fs->database);
    e370:	ee a9       	ldd	r30, Y+54	; 0x36
    e372:	ff a9       	ldd	r31, Y+55	; 0x37
    e374:	85 a5       	ldd	r24, Z+45	; 0x2d
    e376:	96 a5       	ldd	r25, Z+46	; 0x2e
    e378:	a7 a5       	ldd	r26, Z+47	; 0x2f
    e37a:	b0 a9       	ldd	r27, Z+48	; 0x30
    e37c:	ed b7       	in	r30, 0x3d	; 61
    e37e:	fe b7       	in	r31, 0x3e	; 62
    e380:	84 83       	std	Z+4, r24	; 0x04
    e382:	95 83       	std	Z+5, r25	; 0x05
    e384:	a6 83       	std	Z+6, r26	; 0x06
    e386:	b7 83       	std	Z+7, r27	; 0x07
    e388:	88 e5       	ldi	r24, 0x58	; 88
    e38a:	99 e0       	ldi	r25, 0x09	; 9
    e38c:	a0 e0       	ldi	r26, 0x00	; 0
    e38e:	81 83       	std	Z+1, r24	; 0x01
    e390:	92 83       	std	Z+2, r25	; 0x02
    e392:	a3 83       	std	Z+3, r26	; 0x03
    e394:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>

#if FF_USE_LABEL
    res = f_getlabel(ptr, label, (DWORD*)&vsn);
    e398:	ae 01       	movw	r20, r28
    e39a:	42 5d       	subi	r20, 0xD2	; 210
    e39c:	5f 4f       	sbci	r21, 0xFF	; 255
    e39e:	be 01       	movw	r22, r28
    e3a0:	6c 5e       	subi	r22, 0xEC	; 236
    e3a2:	7f 4f       	sbci	r23, 0xFF	; 255
    e3a4:	c7 01       	movw	r24, r14
    e3a6:	0e 94 4c 68 	call	0xd098	; 0xd098 <f_getlabel>
    if (res)
    e3aa:	89 2b       	or	r24, r25
    e3ac:	69 f0       	breq	.+26     	; 0xe3c8 <fatfs_status+0x1e6>
    {
        printf("fatfs_status f_getlabel failed\n");
    e3ae:	88 e3       	ldi	r24, 0x38	; 56
    e3b0:	99 e0       	ldi	r25, 0x09	; 9
    e3b2:	a0 e0       	ldi	r26, 0x00	; 0
    e3b4:	ed b7       	in	r30, 0x3d	; 61
    e3b6:	fe b7       	in	r31, 0x3e	; 62
    e3b8:	81 83       	std	Z+1, r24	; 0x01
    e3ba:	92 83       	std	Z+2, r25	; 0x02
    e3bc:	a3 83       	std	Z+3, r26	; 0x03
    e3be:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
        return(0);
    e3c2:	80 e0       	ldi	r24, 0x00	; 0
    e3c4:	90 e0       	ldi	r25, 0x00	; 0
    e3c6:	95 c0       	rjmp	.+298    	; 0xe4f2 <fatfs_status+0x310>
    }
    printf("Volume name             = %s\n", label[0] ? label : "<blank>");
    e3c8:	8c 89       	ldd	r24, Y+20	; 0x14
    e3ca:	81 11       	cpse	r24, r1
    e3cc:	03 c0       	rjmp	.+6      	; 0xe3d4 <fatfs_status+0x1f2>
    e3ce:	80 eb       	ldi	r24, 0xB0	; 176
    e3d0:	98 e0       	ldi	r25, 0x08	; 8
    e3d2:	02 c0       	rjmp	.+4      	; 0xe3d8 <fatfs_status+0x1f6>
    e3d4:	ce 01       	movw	r24, r28
    e3d6:	44 96       	adiw	r24, 0x14	; 20
    e3d8:	ed b7       	in	r30, 0x3d	; 61
    e3da:	fe b7       	in	r31, 0x3e	; 62
    e3dc:	95 83       	std	Z+5, r25	; 0x05
    e3de:	84 83       	std	Z+4, r24	; 0x04
    e3e0:	8a e1       	ldi	r24, 0x1A	; 26
    e3e2:	99 e0       	ldi	r25, 0x09	; 9
    e3e4:	a0 e0       	ldi	r26, 0x00	; 0
    e3e6:	81 83       	std	Z+1, r24	; 0x01
    e3e8:	92 83       	std	Z+2, r25	; 0x02
    e3ea:	a3 83       	std	Z+3, r26	; 0x03
    e3ec:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    printf("Volume S/N              = %04X-%04X\n", (WORD)((DWORD)vsn >> 16), (WORD)(vsn & 0xFFFF));
    e3f0:	8e a5       	ldd	r24, Y+46	; 0x2e
    e3f2:	9f a5       	ldd	r25, Y+47	; 0x2f
    e3f4:	a8 a9       	ldd	r26, Y+48	; 0x30
    e3f6:	b9 a9       	ldd	r27, Y+49	; 0x31
    e3f8:	ed b7       	in	r30, 0x3d	; 61
    e3fa:	fe b7       	in	r31, 0x3e	; 62
    e3fc:	97 83       	std	Z+7, r25	; 0x07
    e3fe:	86 83       	std	Z+6, r24	; 0x06
    e400:	b5 83       	std	Z+5, r27	; 0x05
    e402:	a4 83       	std	Z+4, r26	; 0x04
    e404:	85 ef       	ldi	r24, 0xF5	; 245
    e406:	98 e0       	ldi	r25, 0x08	; 8
    e408:	a0 e0       	ldi	r26, 0x00	; 0
    e40a:	81 83       	std	Z+1, r24	; 0x01
    e40c:	92 83       	std	Z+2, r25	; 0x02
    e40e:	a3 83       	std	Z+3, r26	; 0x03
    e410:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
#endif

    AccSize = AccFiles = AccDirs = 0;
    e414:	10 92 ba 1c 	sts	0x1CBA, r1	; 0x801cba <AccDirs+0x1>
    e418:	10 92 b9 1c 	sts	0x1CB9, r1	; 0x801cb9 <AccDirs>
    e41c:	10 92 bc 1c 	sts	0x1CBC, r1	; 0x801cbc <AccFiles+0x1>
    e420:	10 92 bb 1c 	sts	0x1CBB, r1	; 0x801cbb <AccFiles>
    e424:	10 92 b5 1c 	sts	0x1CB5, r1	; 0x801cb5 <AccSize>
    e428:	10 92 b6 1c 	sts	0x1CB6, r1	; 0x801cb6 <AccSize+0x1>
    e42c:	10 92 b7 1c 	sts	0x1CB7, r1	; 0x801cb7 <AccSize+0x2>
    e430:	10 92 b8 1c 	sts	0x1CB8, r1	; 0x801cb8 <AccSize+0x3>
    res = fatfs_scan_files(ptr);
    e434:	c7 01       	movw	r24, r14
    e436:	56 de       	rcall	.-852    	; 0xe0e4 <fatfs_scan_files>
    if (res)
    e438:	89 2b       	or	r24, r25
    e43a:	19 f0       	breq	.+6      	; 0xe442 <fatfs_status+0x260>
    {
        printf("fatfs_status fatfs_scan_files failed\n");
    e43c:	8f ec       	ldi	r24, 0xCF	; 207
    e43e:	98 e0       	ldi	r25, 0x08	; 8
    e440:	b8 cf       	rjmp	.-144    	; 0xe3b2 <fatfs_status+0x1d0>
        return(0);
    }
    printf("%u files, %lu bytes.\n%u folders.\n"
    e442:	0e a9       	ldd	r16, Y+54	; 0x36
    e444:	1f a9       	ldd	r17, Y+55	; 0x37
    e446:	f8 01       	movw	r30, r16
    e448:	c1 84       	ldd	r12, Z+9	; 0x09
    e44a:	d2 84       	ldd	r13, Z+10	; 0x0a
    e44c:	e1 2c       	mov	r14, r1
    e44e:	f1 2c       	mov	r15, r1
    e450:	6a a9       	ldd	r22, Y+50	; 0x32
    e452:	7b a9       	ldd	r23, Y+51	; 0x33
    e454:	8c a9       	ldd	r24, Y+52	; 0x34
    e456:	9d a9       	ldd	r25, Y+53	; 0x35
    e458:	a7 01       	movw	r20, r14
    e45a:	96 01       	movw	r18, r12
    e45c:	0e 94 0c e6 	call	0x1cc18	; 0x1cc18 <__mulsi3>
    e460:	22 e0       	ldi	r18, 0x02	; 2
    e462:	30 e0       	ldi	r19, 0x00	; 0
    e464:	40 e0       	ldi	r20, 0x00	; 0
    e466:	50 e0       	ldi	r21, 0x00	; 0
    e468:	0e 94 70 e6 	call	0x1cce0	; 0x1cce0 <__divmodsi4>
    e46c:	ed b7       	in	r30, 0x3d	; 61
    e46e:	fe b7       	in	r31, 0x3e	; 62
    e470:	20 8b       	std	Z+16, r18	; 0x10
    e472:	31 8b       	std	Z+17, r19	; 0x11
    e474:	42 8b       	std	Z+18, r20	; 0x12
    e476:	53 8b       	std	Z+19, r21	; 0x13
    e478:	f8 01       	movw	r30, r16
    e47a:	81 8d       	ldd	r24, Z+25	; 0x19
    e47c:	92 8d       	ldd	r25, Z+26	; 0x1a
    e47e:	a3 8d       	ldd	r26, Z+27	; 0x1b
    e480:	b4 8d       	ldd	r27, Z+28	; 0x1c
    e482:	9c 01       	movw	r18, r24
    e484:	ad 01       	movw	r20, r26
    e486:	22 50       	subi	r18, 0x02	; 2
    e488:	31 09       	sbc	r19, r1
    e48a:	41 09       	sbc	r20, r1
    e48c:	51 09       	sbc	r21, r1
    e48e:	c7 01       	movw	r24, r14
    e490:	b6 01       	movw	r22, r12
    e492:	0e 94 0c e6 	call	0x1cc18	; 0x1cc18 <__mulsi3>
    e496:	dc 01       	movw	r26, r24
    e498:	cb 01       	movw	r24, r22
    e49a:	b6 95       	lsr	r27
    e49c:	a7 95       	ror	r26
    e49e:	97 95       	ror	r25
    e4a0:	87 95       	ror	r24
    e4a2:	ed b7       	in	r30, 0x3d	; 61
    e4a4:	fe b7       	in	r31, 0x3e	; 62
    e4a6:	84 87       	std	Z+12, r24	; 0x0c
    e4a8:	95 87       	std	Z+13, r25	; 0x0d
    e4aa:	a6 87       	std	Z+14, r26	; 0x0e
    e4ac:	b7 87       	std	Z+15, r27	; 0x0f
    e4ae:	80 91 b9 1c 	lds	r24, 0x1CB9	; 0x801cb9 <AccDirs>
    e4b2:	90 91 ba 1c 	lds	r25, 0x1CBA	; 0x801cba <AccDirs+0x1>
    e4b6:	93 87       	std	Z+11, r25	; 0x0b
    e4b8:	82 87       	std	Z+10, r24	; 0x0a
    e4ba:	80 91 b5 1c 	lds	r24, 0x1CB5	; 0x801cb5 <AccSize>
    e4be:	90 91 b6 1c 	lds	r25, 0x1CB6	; 0x801cb6 <AccSize+0x1>
    e4c2:	a0 91 b7 1c 	lds	r26, 0x1CB7	; 0x801cb7 <AccSize+0x2>
    e4c6:	b0 91 b8 1c 	lds	r27, 0x1CB8	; 0x801cb8 <AccSize+0x3>
    e4ca:	86 83       	std	Z+6, r24	; 0x06
    e4cc:	97 83       	std	Z+7, r25	; 0x07
    e4ce:	a0 87       	std	Z+8, r26	; 0x08
    e4d0:	b1 87       	std	Z+9, r27	; 0x09
    e4d2:	80 91 bb 1c 	lds	r24, 0x1CBB	; 0x801cbb <AccFiles>
    e4d6:	90 91 bc 1c 	lds	r25, 0x1CBC	; 0x801cbc <AccFiles+0x1>
    e4da:	95 83       	std	Z+5, r25	; 0x05
    e4dc:	84 83       	std	Z+4, r24	; 0x04
    e4de:	82 e8       	ldi	r24, 0x82	; 130
    e4e0:	98 e0       	ldi	r25, 0x08	; 8
    e4e2:	a0 e0       	ldi	r26, 0x00	; 0
    e4e4:	81 83       	std	Z+1, r24	; 0x01
    e4e6:	92 83       	std	Z+2, r25	; 0x02
    e4e8:	a3 83       	std	Z+3, r26	; 0x03
    e4ea:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
        "%lu KB total disk space.\n%lu KB available.\n",
        AccFiles, AccSize, AccDirs,
        (fs->n_fatent - 2) * fs->csize / 2, p2 * fs->csize / 2
        );
	return(1);
    e4ee:	81 e0       	ldi	r24, 0x01	; 1
    e4f0:	90 e0       	ldi	r25, 0x00	; 0
}
    e4f2:	e7 96       	adiw	r28, 0x37	; 55
    e4f4:	e8 e0       	ldi	r30, 0x08	; 8
    e4f6:	0c 94 e1 e6 	jmp	0x1cdc2	; 0x1cdc2 <__epilogue_restores__+0x14>

0000e4fa <fatfs_filinfo_list>:
/// @param[in] : FILINFO pointer
/// @return  void

MEMSPACE
void fatfs_filinfo_list(FILINFO *info)
{
    e4fa:	ab e1       	ldi	r26, 0x1B	; 27
    e4fc:	b0 e0       	ldi	r27, 0x00	; 0
    e4fe:	e3 e8       	ldi	r30, 0x83	; 131
    e500:	f2 e7       	ldi	r31, 0x72	; 114
    e502:	0c 94 cb e6 	jmp	0x1cd96	; 0x1cd96 <__prologue_saves__+0x20>
    e506:	dc 01       	movw	r26, r24
    char attrs[6];
    if(info->fname[0] == 0)
    e508:	fc 01       	movw	r30, r24
    e50a:	86 89       	ldd	r24, Z+22	; 0x16
    e50c:	81 11       	cpse	r24, r1
    e50e:	03 c0       	rjmp	.+6      	; 0xe516 <fatfs_filinfo_list+0x1c>
    {
        printf("fatfs_filinfo_list: empty\n");
    e510:	87 e6       	ldi	r24, 0x67	; 103
    e512:	98 e0       	ldi	r25, 0x08	; 8
    e514:	69 c0       	rjmp	.+210    	; 0xe5e8 <fatfs_filinfo_list+0xee>
        return;
    }
    attrs[0] = (info->fattrib & AM_DIR) ? 'D' : '-';
    e516:	fd 01       	movw	r30, r26
    e518:	80 85       	ldd	r24, Z+8	; 0x08
    e51a:	84 fd       	sbrc	r24, 4
    e51c:	02 c0       	rjmp	.+4      	; 0xe522 <fatfs_filinfo_list+0x28>
    e51e:	9d e2       	ldi	r25, 0x2D	; 45
    e520:	01 c0       	rjmp	.+2      	; 0xe524 <fatfs_filinfo_list+0x2a>
    e522:	94 e4       	ldi	r25, 0x44	; 68
    e524:	9e 8b       	std	Y+22, r25	; 0x16
    attrs[1] = (info->fattrib & AM_RDO) ? 'R' : '-';
    e526:	80 fd       	sbrc	r24, 0
    e528:	02 c0       	rjmp	.+4      	; 0xe52e <fatfs_filinfo_list+0x34>
    e52a:	9d e2       	ldi	r25, 0x2D	; 45
    e52c:	01 c0       	rjmp	.+2      	; 0xe530 <fatfs_filinfo_list+0x36>
    e52e:	92 e5       	ldi	r25, 0x52	; 82
    e530:	9f 8b       	std	Y+23, r25	; 0x17
    attrs[2] = (info->fattrib & AM_HID) ? 'H' : '-';
    e532:	81 fd       	sbrc	r24, 1
    e534:	02 c0       	rjmp	.+4      	; 0xe53a <fatfs_filinfo_list+0x40>
    e536:	9d e2       	ldi	r25, 0x2D	; 45
    e538:	01 c0       	rjmp	.+2      	; 0xe53c <fatfs_filinfo_list+0x42>
    e53a:	98 e4       	ldi	r25, 0x48	; 72
    e53c:	98 8f       	std	Y+24, r25	; 0x18
    attrs[3] = (info->fattrib & AM_SYS) ? 'S' : '-';
    e53e:	82 fd       	sbrc	r24, 2
    e540:	02 c0       	rjmp	.+4      	; 0xe546 <fatfs_filinfo_list+0x4c>
    e542:	9d e2       	ldi	r25, 0x2D	; 45
    e544:	01 c0       	rjmp	.+2      	; 0xe548 <fatfs_filinfo_list+0x4e>
    e546:	93 e5       	ldi	r25, 0x53	; 83
    e548:	99 8f       	std	Y+25, r25	; 0x19
    attrs[4] = (info->fattrib & AM_ARC) ? 'A' : '-';
    e54a:	85 fd       	sbrc	r24, 5
    e54c:	02 c0       	rjmp	.+4      	; 0xe552 <fatfs_filinfo_list+0x58>
    e54e:	8d e2       	ldi	r24, 0x2D	; 45
    e550:	01 c0       	rjmp	.+2      	; 0xe554 <fatfs_filinfo_list+0x5a>
    e552:	81 e4       	ldi	r24, 0x41	; 65
    e554:	8a 8f       	std	Y+26, r24	; 0x1a
    attrs[5] = 0;
    e556:	1b 8e       	std	Y+27, r1	; 0x1b
    printf("%s %u/%02u/%02u %02u:%02u %9lu %s",
    e558:	fd 01       	movw	r30, r26
    e55a:	24 81       	ldd	r18, Z+4	; 0x04
    e55c:	35 81       	ldd	r19, Z+5	; 0x05
    e55e:	46 81       	ldd	r20, Z+6	; 0x06
    e560:	57 81       	ldd	r21, Z+7	; 0x07
    e562:	cd 01       	movw	r24, r26
    e564:	46 96       	adiw	r24, 0x16	; 22
    e566:	ed b7       	in	r30, 0x3d	; 61
    e568:	fe b7       	in	r31, 0x3e	; 62
    e56a:	95 8b       	std	Z+21, r25	; 0x15
    e56c:	84 8b       	std	Z+20, r24	; 0x14
    e56e:	8d 91       	ld	r24, X+
    e570:	9d 91       	ld	r25, X+
    e572:	0d 90       	ld	r0, X+
    e574:	bc 91       	ld	r27, X
    e576:	a0 2d       	mov	r26, r0
    e578:	80 8b       	std	Z+16, r24	; 0x10
    e57a:	91 8b       	std	Z+17, r25	; 0x11
    e57c:	a2 8b       	std	Z+18, r26	; 0x12
    e57e:	b3 8b       	std	Z+19, r27	; 0x13
    e580:	ca 01       	movw	r24, r20
    e582:	45 e0       	ldi	r20, 0x05	; 5
    e584:	96 95       	lsr	r25
    e586:	87 95       	ror	r24
    e588:	4a 95       	dec	r20
    e58a:	e1 f7       	brne	.-8      	; 0xe584 <fatfs_filinfo_list+0x8a>
    e58c:	8f 73       	andi	r24, 0x3F	; 63
    e58e:	99 27       	eor	r25, r25
    e590:	97 87       	std	Z+15, r25	; 0x0f
    e592:	86 87       	std	Z+14, r24	; 0x0e
    e594:	85 2f       	mov	r24, r21
    e596:	86 95       	lsr	r24
    e598:	86 95       	lsr	r24
    e59a:	86 95       	lsr	r24
    e59c:	84 87       	std	Z+12, r24	; 0x0c
    e59e:	15 86       	std	Z+13, r1	; 0x0d
    e5a0:	c9 01       	movw	r24, r18
    e5a2:	8f 71       	andi	r24, 0x1F	; 31
    e5a4:	99 27       	eor	r25, r25
    e5a6:	93 87       	std	Z+11, r25	; 0x0b
    e5a8:	82 87       	std	Z+10, r24	; 0x0a
    e5aa:	c9 01       	movw	r24, r18
    e5ac:	55 e0       	ldi	r21, 0x05	; 5
    e5ae:	96 95       	lsr	r25
    e5b0:	87 95       	ror	r24
    e5b2:	5a 95       	dec	r21
    e5b4:	e1 f7       	brne	.-8      	; 0xe5ae <fatfs_filinfo_list+0xb4>
    e5b6:	8f 70       	andi	r24, 0x0F	; 15
    e5b8:	99 27       	eor	r25, r25
    e5ba:	91 87       	std	Z+9, r25	; 0x09
    e5bc:	80 87       	std	Z+8, r24	; 0x08
    e5be:	23 2f       	mov	r18, r19
    e5c0:	33 27       	eor	r19, r19
    e5c2:	26 95       	lsr	r18
    e5c4:	24 54       	subi	r18, 0x44	; 68
    e5c6:	38 4f       	sbci	r19, 0xF8	; 248
    e5c8:	37 83       	std	Z+7, r19	; 0x07
    e5ca:	26 83       	std	Z+6, r18	; 0x06
    e5cc:	ce 01       	movw	r24, r28
    e5ce:	46 96       	adiw	r24, 0x16	; 22
    e5d0:	95 83       	std	Z+5, r25	; 0x05
    e5d2:	84 83       	std	Z+4, r24	; 0x04
    e5d4:	85 e4       	ldi	r24, 0x45	; 69
    e5d6:	98 e0       	ldi	r25, 0x08	; 8
    e5d8:	a0 e0       	ldi	r26, 0x00	; 0
    e5da:	81 83       	std	Z+1, r24	; 0x01
    e5dc:	92 83       	std	Z+2, r25	; 0x02
    e5de:	a3 83       	std	Z+3, r26	; 0x03
    e5e0:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
        attrs,
        (info->fdate >> 9) + 1980, (info->fdate >> 5) & 15, info->fdate & 31,
        (info->ftime >> 11), (info->ftime >> 5) & 63,
        info->fsize, info->fname);
    printf("\n");
    e5e4:	83 e4       	ldi	r24, 0x43	; 67
    e5e6:	98 e0       	ldi	r25, 0x08	; 8
    e5e8:	a0 e0       	ldi	r26, 0x00	; 0
    e5ea:	ed b7       	in	r30, 0x3d	; 61
    e5ec:	fe b7       	in	r31, 0x3e	; 62
    e5ee:	81 83       	std	Z+1, r24	; 0x01
    e5f0:	92 83       	std	Z+2, r25	; 0x02
    e5f2:	a3 83       	std	Z+3, r26	; 0x03
    e5f4:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
}
    e5f8:	6b 96       	adiw	r28, 0x1b	; 27
    e5fa:	e2 e0       	ldi	r30, 0x02	; 2
    e5fc:	0c 94 e7 e6 	jmp	0x1cdce	; 0x1cdce <__epilogue_restores__+0x20>

0000e600 <fatfs_help>:

/// @brief Display FatFs test diagnostics help menu.
/// @return  void
MEMSPACE
void fatfs_help( int full)
{
    e600:	00 d0       	rcall	.+0      	; 0xe602 <fatfs_help+0x2>
    e602:	1f 92       	push	r1
    if(full)
    e604:	89 2b       	or	r24, r25
    e606:	51 f0       	breq	.+20     	; 0xe61c <fatfs_help+0x1c>
    {
        printf(
    e608:	81 e2       	ldi	r24, 0x21	; 33
    e60a:	9b e0       	ldi	r25, 0x0B	; 11
    e60c:	a0 e0       	ldi	r26, 0x00	; 0
    e60e:	ed b7       	in	r30, 0x3d	; 61
    e610:	fe b7       	in	r31, 0x3e	; 62
    e612:	81 83       	std	Z+1, r24	; 0x01
    e614:	92 83       	std	Z+2, r25	; 0x02
    e616:	a3 83       	std	Z+3, r26	; 0x03
    e618:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
#endif
            "\n"
            );
    }

}
    e61c:	0f 90       	pop	r0
    e61e:	0f 90       	pop	r0
    e620:	0f 90       	pop	r0
    e622:	08 95       	ret

0000e624 <fatfs_ls>:
///
/// @see fatfs_filinfo_list().
/// @return  1 on success or 0 on error
MEMSPACE
int fatfs_ls(char *name)
{
    e624:	a6 e5       	ldi	r26, 0x56	; 86
    e626:	b2 e0       	ldi	r27, 0x02	; 2
    e628:	e8 e1       	ldi	r30, 0x18	; 24
    e62a:	f3 e7       	ldi	r31, 0x73	; 115
    e62c:	0c 94 c3 e6 	jmp	0x1cd86	; 0x1cd86 <__prologue_saves__+0x10>
    FILINFO fno;
    DIR dirs;                                     /* Directory object */
    FATFS *fs;
    char buff[MAX_NAME_LEN+1];

	memset(buff,0,sizeof(buff)-1);
    e630:	8e 01       	movw	r16, r28
    e632:	0e 5d       	subi	r16, 0xDE	; 222
    e634:	1e 4f       	sbci	r17, 0xFE	; 254
    e636:	20 e0       	ldi	r18, 0x00	; 0
    e638:	31 e0       	ldi	r19, 0x01	; 1
    e63a:	f8 01       	movw	r30, r16
    e63c:	a9 01       	movw	r20, r18
    e63e:	11 92       	st	Z+, r1
    e640:	41 50       	subi	r20, 0x01	; 1
    e642:	50 40       	sbci	r21, 0x00	; 0
    e644:	e1 f7       	brne	.-8      	; 0xe63e <fatfs_ls+0x1a>

    if(!name || !*name)
    e646:	00 97       	sbiw	r24, 0x00	; 0
    e648:	21 f0       	breq	.+8      	; 0xe652 <fatfs_ls+0x2e>
    e64a:	fc 01       	movw	r30, r24
    e64c:	20 81       	ld	r18, Z
    e64e:	21 11       	cpse	r18, r1
    e650:	03 c0       	rjmp	.+6      	; 0xe658 <fatfs_ls+0x34>
    {
        strcpy(buff,".");
    e652:	61 ef       	ldi	r22, 0xF1	; 241
    e654:	72 e1       	ldi	r23, 0x12	; 18
    e656:	01 c0       	rjmp	.+2      	; 0xe65a <fatfs_ls+0x36>
    }
    else
    {
        strcpy(buff,name);
    e658:	bc 01       	movw	r22, r24
    e65a:	c8 01       	movw	r24, r16
    e65c:	0e 94 2c 31 	call	0x6258	; 0x6258 <strcpy>
    }
    printf("Listing:[%s]\n",buff);
    e660:	ed b7       	in	r30, 0x3d	; 61
    e662:	fe b7       	in	r31, 0x3e	; 62
    e664:	15 83       	std	Z+5, r17	; 0x05
    e666:	04 83       	std	Z+4, r16	; 0x04
    e668:	81 ee       	ldi	r24, 0xE1	; 225
    e66a:	9a e0       	ldi	r25, 0x0A	; 10
    e66c:	a0 e0       	ldi	r26, 0x00	; 0
    e66e:	81 83       	std	Z+1, r24	; 0x01
    e670:	92 83       	std	Z+2, r25	; 0x02
    e672:	a3 83       	std	Z+3, r26	; 0x03
    e674:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>

    res = f_opendir(&dirs, buff);
    e678:	b8 01       	movw	r22, r16
    e67a:	ce 01       	movw	r24, r28
    e67c:	8d 5d       	subi	r24, 0xDD	; 221
    e67e:	9d 4f       	sbci	r25, 0xFD	; 253
    e680:	0e 94 12 63 	call	0xc624	; 0xc624 <f_opendir>
    if (res != FR_OK) 
    e684:	89 2b       	or	r24, r25
    e686:	09 f0       	breq	.+2      	; 0xe68a <fatfs_ls+0x66>
    e688:	96 c0       	rjmp	.+300    	; 0xe7b6 <fatfs_ls+0x192>
	{ 
		return(0); 
	}
    p1 = s1 = s2 = 0;
    e68a:	cf 5a       	subi	r28, 0xAF	; 175
    e68c:	dd 4f       	sbci	r29, 0xFD	; 253
    e68e:	18 82       	st	Y, r1
    e690:	19 82       	std	Y+1, r1	; 0x01
    e692:	1a 82       	std	Y+2, r1	; 0x02
    e694:	1b 82       	std	Y+3, r1	; 0x03
    e696:	c1 55       	subi	r28, 0x51	; 81
    e698:	d2 40       	sbci	r29, 0x02	; 2
    e69a:	a1 2c       	mov	r10, r1
    e69c:	b1 2c       	mov	r11, r1
    e69e:	c1 2c       	mov	r12, r1
    e6a0:	d1 2c       	mov	r13, r1
    while(1)
    {
        res = f_readdir(&dirs, &fno);
    e6a2:	be 01       	movw	r22, r28
    e6a4:	64 5f       	subi	r22, 0xF4	; 244
    e6a6:	7f 4f       	sbci	r23, 0xFF	; 255
    e6a8:	ce 01       	movw	r24, r28
    e6aa:	8d 5d       	subi	r24, 0xDD	; 221
    e6ac:	9d 4f       	sbci	r25, 0xFD	; 253
    e6ae:	0e 94 98 63 	call	0xc730	; 0xc730 <f_readdir>
    e6b2:	7c 01       	movw	r14, r24
        if (res != FR_OK) 
    e6b4:	89 2b       	or	r24, r25
    e6b6:	49 f5       	brne	.+82     	; 0xe70a <fatfs_ls+0xe6>
			break;
		if(!fno.fname[0]) 
    e6b8:	8a a1       	ldd	r24, Y+34	; 0x22
    e6ba:	88 23       	and	r24, r24
    e6bc:	31 f1       	breq	.+76     	; 0xe70a <fatfs_ls+0xe6>
			break;
        if (fno.fattrib & AM_DIR)
    e6be:	8c 89       	ldd	r24, Y+20	; 0x14
    e6c0:	84 ff       	sbrs	r24, 4
    e6c2:	04 c0       	rjmp	.+8      	; 0xe6cc <fatfs_ls+0xa8>
        {
            s2++;
    e6c4:	ff ef       	ldi	r31, 0xFF	; 255
    e6c6:	af 1a       	sub	r10, r31
    e6c8:	bf 0a       	sbc	r11, r31
    e6ca:	1b c0       	rjmp	.+54     	; 0xe702 <fatfs_ls+0xde>
        }
        else
        {
            s1++; p1 += fno.fsize;
    e6cc:	4f ef       	ldi	r20, 0xFF	; 255
    e6ce:	c4 1a       	sub	r12, r20
    e6d0:	d4 0a       	sbc	r13, r20
    e6d2:	4c 85       	ldd	r20, Y+12	; 0x0c
    e6d4:	5d 85       	ldd	r21, Y+13	; 0x0d
    e6d6:	6e 85       	ldd	r22, Y+14	; 0x0e
    e6d8:	7f 85       	ldd	r23, Y+15	; 0x0f
    e6da:	cf 5a       	subi	r28, 0xAF	; 175
    e6dc:	dd 4f       	sbci	r29, 0xFD	; 253
    e6de:	88 81       	ld	r24, Y
    e6e0:	99 81       	ldd	r25, Y+1	; 0x01
    e6e2:	aa 81       	ldd	r26, Y+2	; 0x02
    e6e4:	bb 81       	ldd	r27, Y+3	; 0x03
    e6e6:	c1 55       	subi	r28, 0x51	; 81
    e6e8:	d2 40       	sbci	r29, 0x02	; 2
    e6ea:	84 0f       	add	r24, r20
    e6ec:	95 1f       	adc	r25, r21
    e6ee:	a6 1f       	adc	r26, r22
    e6f0:	b7 1f       	adc	r27, r23
    e6f2:	cf 5a       	subi	r28, 0xAF	; 175
    e6f4:	dd 4f       	sbci	r29, 0xFD	; 253
    e6f6:	88 83       	st	Y, r24
    e6f8:	99 83       	std	Y+1, r25	; 0x01
    e6fa:	aa 83       	std	Y+2, r26	; 0x02
    e6fc:	bb 83       	std	Y+3, r27	; 0x03
    e6fe:	c1 55       	subi	r28, 0x51	; 81
    e700:	d2 40       	sbci	r29, 0x02	; 2
        }
        fatfs_filinfo_list(&fno);
    e702:	ce 01       	movw	r24, r28
    e704:	0c 96       	adiw	r24, 0x0c	; 12
    e706:	f9 de       	rcall	.-526    	; 0xe4fa <fatfs_filinfo_list>
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    e708:	cc cf       	rjmp	.-104    	; 0xe6a2 <fatfs_ls+0x7e>
	f_closedir(&dirs);
    e70a:	ce 01       	movw	r24, r28
    e70c:	8d 5d       	subi	r24, 0xDD	; 221
    e70e:	9d 4f       	sbci	r25, 0xFD	; 253
    e710:	0e 94 83 63 	call	0xc706	; 0xc706 <f_closedir>
    printf("%4u File(s),%10lu bytes total\n%4u Dir(s)", s1, p1, s2);
    e714:	ed b7       	in	r30, 0x3d	; 61
    e716:	fe b7       	in	r31, 0x3e	; 62
    e718:	b3 86       	std	Z+11, r11	; 0x0b
    e71a:	a2 86       	std	Z+10, r10	; 0x0a
    e71c:	cf 5a       	subi	r28, 0xAF	; 175
    e71e:	dd 4f       	sbci	r29, 0xFD	; 253
    e720:	88 81       	ld	r24, Y
    e722:	99 81       	ldd	r25, Y+1	; 0x01
    e724:	aa 81       	ldd	r26, Y+2	; 0x02
    e726:	bb 81       	ldd	r27, Y+3	; 0x03
    e728:	c1 55       	subi	r28, 0x51	; 81
    e72a:	d2 40       	sbci	r29, 0x02	; 2
    e72c:	86 83       	std	Z+6, r24	; 0x06
    e72e:	97 83       	std	Z+7, r25	; 0x07
    e730:	a0 87       	std	Z+8, r26	; 0x08
    e732:	b1 87       	std	Z+9, r27	; 0x09
    e734:	d5 82       	std	Z+5, r13	; 0x05
    e736:	c4 82       	std	Z+4, r12	; 0x04
    e738:	88 eb       	ldi	r24, 0xB8	; 184
    e73a:	9a e0       	ldi	r25, 0x0A	; 10
    e73c:	a0 e0       	ldi	r26, 0x00	; 0
    e73e:	81 83       	std	Z+1, r24	; 0x01
    e740:	92 83       	std	Z+2, r25	; 0x02
    e742:	a3 83       	std	Z+3, r26	; 0x03
    e744:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    if (f_getfree(buff, (DWORD*)&p1, &fs) == FR_OK)
    e748:	ae 01       	movw	r20, r28
    e74a:	4b 5a       	subi	r20, 0xAB	; 171
    e74c:	5d 4f       	sbci	r21, 0xFD	; 253
    e74e:	be 01       	movw	r22, r28
    e750:	6f 5a       	subi	r22, 0xAF	; 175
    e752:	7d 4f       	sbci	r23, 0xFD	; 253
    e754:	c8 01       	movw	r24, r16
    e756:	0e 94 1a 64 	call	0xc834	; 0xc834 <f_getfree>
    e75a:	89 2b       	or	r24, r25
    e75c:	31 f5       	brne	.+76     	; 0xe7aa <fatfs_ls+0x186>
        printf(", %10luK bytes free\n", p1 * fs->csize / 2);
    e75e:	cb 5a       	subi	r28, 0xAB	; 171
    e760:	dd 4f       	sbci	r29, 0xFD	; 253
    e762:	e8 81       	ld	r30, Y
    e764:	f9 81       	ldd	r31, Y+1	; 0x01
    e766:	c5 55       	subi	r28, 0x55	; 85
    e768:	d2 40       	sbci	r29, 0x02	; 2
    e76a:	a1 85       	ldd	r26, Z+9	; 0x09
    e76c:	b2 85       	ldd	r27, Z+10	; 0x0a
    e76e:	cf 5a       	subi	r28, 0xAF	; 175
    e770:	dd 4f       	sbci	r29, 0xFD	; 253
    e772:	28 81       	ld	r18, Y
    e774:	39 81       	ldd	r19, Y+1	; 0x01
    e776:	4a 81       	ldd	r20, Y+2	; 0x02
    e778:	5b 81       	ldd	r21, Y+3	; 0x03
    e77a:	c1 55       	subi	r28, 0x51	; 81
    e77c:	d2 40       	sbci	r29, 0x02	; 2
    e77e:	0e 94 9b e6 	call	0x1cd36	; 0x1cd36 <__muluhisi3>
    e782:	22 e0       	ldi	r18, 0x02	; 2
    e784:	30 e0       	ldi	r19, 0x00	; 0
    e786:	40 e0       	ldi	r20, 0x00	; 0
    e788:	50 e0       	ldi	r21, 0x00	; 0
    e78a:	0e 94 70 e6 	call	0x1cce0	; 0x1cce0 <__divmodsi4>
    e78e:	ed b7       	in	r30, 0x3d	; 61
    e790:	fe b7       	in	r31, 0x3e	; 62
    e792:	24 83       	std	Z+4, r18	; 0x04
    e794:	35 83       	std	Z+5, r19	; 0x05
    e796:	46 83       	std	Z+6, r20	; 0x06
    e798:	57 83       	std	Z+7, r21	; 0x07
    e79a:	83 ea       	ldi	r24, 0xA3	; 163
    e79c:	9a e0       	ldi	r25, 0x0A	; 10
    e79e:	a0 e0       	ldi	r26, 0x00	; 0
    e7a0:	81 83       	std	Z+1, r24	; 0x01
    e7a2:	92 83       	std	Z+2, r25	; 0x02
    e7a4:	a3 83       	std	Z+3, r26	; 0x03
    e7a6:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
	if(res)
    e7aa:	e1 14       	cp	r14, r1
    e7ac:	f1 04       	cpc	r15, r1
    e7ae:	31 f4       	brne	.+12     	; 0xe7bc <fatfs_ls+0x198>
		return(-1);
	return(1);
    e7b0:	81 e0       	ldi	r24, 0x01	; 1
    e7b2:	90 e0       	ldi	r25, 0x00	; 0
    e7b4:	05 c0       	rjmp	.+10     	; 0xe7c0 <fatfs_ls+0x19c>
    printf("Listing:[%s]\n",buff);

    res = f_opendir(&dirs, buff);
    if (res != FR_OK) 
	{ 
		return(0); 
    e7b6:	80 e0       	ldi	r24, 0x00	; 0
    e7b8:	90 e0       	ldi	r25, 0x00	; 0
    e7ba:	02 c0       	rjmp	.+4      	; 0xe7c0 <fatfs_ls+0x19c>
	f_closedir(&dirs);
    printf("%4u File(s),%10lu bytes total\n%4u Dir(s)", s1, p1, s2);
    if (f_getfree(buff, (DWORD*)&p1, &fs) == FR_OK)
        printf(", %10luK bytes free\n", p1 * fs->csize / 2);
	if(res)
		return(-1);
    e7bc:	8f ef       	ldi	r24, 0xFF	; 255
    e7be:	9f ef       	ldi	r25, 0xFF	; 255
	return(1);
}
    e7c0:	ca 5a       	subi	r28, 0xAA	; 170
    e7c2:	dd 4f       	sbci	r29, 0xFD	; 253
    e7c4:	ea e0       	ldi	r30, 0x0A	; 10
    e7c6:	0c 94 df e6 	jmp	0x1cdbe	; 0x1cdbe <__epilogue_restores__+0x10>

0000e7ca <mmc_test>:
/// - Assumes the device is formatted
///
/// @return void
MEMSPACE
void mmc_test(void)
{
    e7ca:	a4 e0       	ldi	r26, 0x04	; 4
    e7cc:	b1 e0       	ldi	r27, 0x01	; 1
    e7ce:	eb ee       	ldi	r30, 0xEB	; 235
    e7d0:	f3 e7       	ldi	r31, 0x73	; 115
    e7d2:	0c 94 cb e6 	jmp	0x1cd96	; 0x1cd96 <__prologue_saves__+0x20>
    char buff[MAX_NAME_LEN+1];

    sep();
    e7d6:	0e 94 fa 31 	call	0x63f4	; 0x63f4 <sep>
    printf("START MMC TEST\n");
    e7da:	81 e1       	ldi	r24, 0x11	; 17
    e7dc:	9b e0       	ldi	r25, 0x0B	; 11
    e7de:	a0 e0       	ldi	r26, 0x00	; 0
    e7e0:	ed b7       	in	r30, 0x3d	; 61
    e7e2:	fe b7       	in	r31, 0x3e	; 62
    e7e4:	81 83       	std	Z+1, r24	; 0x01
    e7e6:	92 83       	std	Z+2, r25	; 0x02
    e7e8:	a3 83       	std	Z+3, r26	; 0x03
    e7ea:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    strcpy(buff,"/");
    e7ee:	66 ea       	ldi	r22, 0xA6	; 166
    e7f0:	78 e0       	ldi	r23, 0x08	; 8
    e7f2:	ce 01       	movw	r24, r28
    e7f4:	04 96       	adiw	r24, 0x04	; 4
    e7f6:	0e 94 2c 31 	call	0x6258	; 0x6258 <strcpy>
    fatfs_status(buff);
    e7fa:	ce 01       	movw	r24, r28
    e7fc:	04 96       	adiw	r24, 0x04	; 4
    e7fe:	f1 dc       	rcall	.-1566   	; 0xe1e2 <fatfs_status>
    printf("MMC Directory List\n");
    e800:	8d ef       	ldi	r24, 0xFD	; 253
    e802:	9a e0       	ldi	r25, 0x0A	; 10
    e804:	a0 e0       	ldi	r26, 0x00	; 0
    e806:	ed b7       	in	r30, 0x3d	; 61
    e808:	fe b7       	in	r31, 0x3e	; 62
    e80a:	81 83       	std	Z+1, r24	; 0x01
    e80c:	92 83       	std	Z+2, r25	; 0x02
    e80e:	a3 83       	std	Z+3, r26	; 0x03
    e810:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    fatfs_ls("/");
    e814:	86 ea       	ldi	r24, 0xA6	; 166
    e816:	98 e0       	ldi	r25, 0x08	; 8
    e818:	05 df       	rcall	.-502    	; 0xe624 <fatfs_ls>
    fatfs_cat("test3.txt");
    fatfs_ls("");
#endif
#endif

    printf("END MMC TEST\n");
    e81a:	8f ee       	ldi	r24, 0xEF	; 239
    e81c:	9a e0       	ldi	r25, 0x0A	; 10
    e81e:	a0 e0       	ldi	r26, 0x00	; 0
    e820:	ed b7       	in	r30, 0x3d	; 61
    e822:	fe b7       	in	r31, 0x3e	; 62
    e824:	81 83       	std	Z+1, r24	; 0x01
    e826:	92 83       	std	Z+2, r25	; 0x02
    e828:	a3 83       	std	Z+3, r26	; 0x03
    e82a:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    sep();
    e82e:	0e 94 fa 31 	call	0x63f4	; 0x63f4 <sep>
}
    e832:	cc 5f       	subi	r28, 0xFC	; 252
    e834:	de 4f       	sbci	r29, 0xFE	; 254
    e836:	e2 e0       	ldi	r30, 0x02	; 2
    e838:	0c 94 e7 e6 	jmp	0x1cdce	; 0x1cdce <__epilogue_restores__+0x20>

0000e83c <fatfs_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int fatfs_tests(int argc,char *argv[])
{
    e83c:	a4 e0       	ldi	r26, 0x04	; 4
    e83e:	b1 e0       	ldi	r27, 0x01	; 1
    e840:	e4 e2       	ldi	r30, 0x24	; 36
    e842:	f4 e7       	ldi	r31, 0x74	; 116
    e844:	0c 94 c5 e6 	jmp	0x1cd8a	; 0x1cd8a <__prologue_saves__+0x14>
    int ind;

    char buff[MAX_NAME_LEN+1];

    ind = 0;
    ptr = argv[ind];
    e848:	fb 01       	movw	r30, r22
    e84a:	20 81       	ld	r18, Z
    e84c:	31 81       	ldd	r19, Z+1	; 0x01

    if(!ptr)
    e84e:	21 15       	cp	r18, r1
    e850:	31 05       	cpc	r19, r1
    e852:	19 f4       	brne	.+6      	; 0xe85a <fatfs_tests+0x1e>
        return(0);
    e854:	80 e0       	ldi	r24, 0x00	; 0
    e856:	90 e0       	ldi	r25, 0x00	; 0
    e858:	81 c0       	rjmp	.+258    	; 0xe95c <fatfs_tests+0x120>
    e85a:	8b 01       	movw	r16, r22
    e85c:	6c 01       	movw	r12, r24

// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCHI(ptr,"fatfs") )
    e85e:	62 ed       	ldi	r22, 0xD2	; 210
    e860:	78 e0       	ldi	r23, 0x08	; 8
    e862:	c9 01       	movw	r24, r18
    e864:	0e 94 38 32 	call	0x6470	; 0x6470 <MATCHI>
    e868:	89 2b       	or	r24, r25
    e86a:	a1 f3       	breq	.-24     	; 0xe854 <fatfs_tests+0x18>
    {
        ptr = argv[++ind];
    e86c:	f8 01       	movw	r30, r16
    e86e:	e2 80       	ldd	r14, Z+2	; 0x02
    e870:	f3 80       	ldd	r15, Z+3	; 0x03
        if ( !ptr || MATCHI(ptr,"help") )
    e872:	e1 14       	cp	r14, r1
    e874:	f1 04       	cpc	r15, r1
    e876:	59 f4       	brne	.+22     	; 0xe88e <fatfs_tests+0x52>
MEMSPACE
void fatfs_help( int full)
{
    if(full)
    {
        printf(
    e878:	81 e2       	ldi	r24, 0x21	; 33
    e87a:	9b e0       	ldi	r25, 0x0B	; 11
    e87c:	a0 e0       	ldi	r26, 0x00	; 0
    e87e:	ed b7       	in	r30, 0x3d	; 61
    e880:	fe b7       	in	r31, 0x3e	; 62
    e882:	81 83       	std	Z+1, r24	; 0x01
    e884:	92 83       	std	Z+2, r25	; 0x02
    e886:	a3 83       	std	Z+3, r26	; 0x03
    e888:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    e88c:	40 c0       	rjmp	.+128    	; 0xe90e <fatfs_tests+0xd2>
// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCHI(ptr,"fatfs") )
    {
        ptr = argv[++ind];
        if ( !ptr || MATCHI(ptr,"help") )
    e88e:	6d e6       	ldi	r22, 0x6D	; 109
    e890:	76 e1       	ldi	r23, 0x16	; 22
    e892:	c7 01       	movw	r24, r14
    e894:	0e 94 38 32 	call	0x6470	; 0x6470 <MATCHI>
    e898:	89 2b       	or	r24, r25
    e89a:	71 f7       	brne	.-36     	; 0xe878 <fatfs_tests+0x3c>
    {
        return(0);
    }
#endif

    if (MATCHI(ptr,"ls") || MATCHI(ptr,"dir") )
    e89c:	68 ed       	ldi	r22, 0xD8	; 216
    e89e:	78 e0       	ldi	r23, 0x08	; 8
    e8a0:	c7 01       	movw	r24, r14
    e8a2:	0e 94 38 32 	call	0x6470	; 0x6470 <MATCHI>
    e8a6:	89 2b       	or	r24, r25
    e8a8:	31 f0       	breq	.+12     	; 0xe8b6 <fatfs_tests+0x7a>
    e8aa:	0c 5f       	subi	r16, 0xFC	; 252
    e8ac:	1f 4f       	sbci	r17, 0xFF	; 255
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int fatfs_tests(int argc,char *argv[])
{
    e8ae:	82 e0       	ldi	r24, 0x02	; 2
    e8b0:	e8 2e       	mov	r14, r24
    e8b2:	f1 2c       	mov	r15, r1
    e8b4:	12 c0       	rjmp	.+36     	; 0xe8da <fatfs_tests+0x9e>
    {
        return(0);
    }
#endif

    if (MATCHI(ptr,"ls") || MATCHI(ptr,"dir") )
    e8b6:	68 ed       	ldi	r22, 0xD8	; 216
    e8b8:	7b e0       	ldi	r23, 0x0B	; 11
    e8ba:	c7 01       	movw	r24, r14
    e8bc:	0e 94 38 32 	call	0x6470	; 0x6470 <MATCHI>
    e8c0:	89 2b       	or	r24, r25
    e8c2:	99 f7       	brne	.-26     	; 0xe8aa <fatfs_tests+0x6e>
    e8c4:	19 c0       	rjmp	.+50     	; 0xe8f8 <fatfs_tests+0xbc>
    {
        int i;
        int args = 0;
        for(i=ind+1;i<argc;++i)
        {
            if(fatfs_ls(argv[i]) == 0)
    e8c6:	f8 01       	movw	r30, r16
    e8c8:	81 91       	ld	r24, Z+
    e8ca:	91 91       	ld	r25, Z+
    e8cc:	8f 01       	movw	r16, r30
    e8ce:	aa de       	rcall	.-684    	; 0xe624 <fatfs_ls>
    e8d0:	89 2b       	or	r24, r25
    e8d2:	79 f0       	breq	.+30     	; 0xe8f2 <fatfs_tests+0xb6>

    if (MATCHI(ptr,"ls") || MATCHI(ptr,"dir") )
    {
        int i;
        int args = 0;
        for(i=ind+1;i<argc;++i)
    e8d4:	ff ef       	ldi	r31, 0xFF	; 255
    e8d6:	ef 1a       	sub	r14, r31
    e8d8:	ff 0a       	sbc	r15, r31
    e8da:	ec 14       	cp	r14, r12
    e8dc:	fd 04       	cpc	r15, r13
    e8de:	9c f3       	brlt	.-26     	; 0xe8c6 <fatfs_tests+0x8a>
			{
				return(-1);
			}
            ++args;
        }
        if(!args)
    e8e0:	82 e0       	ldi	r24, 0x02	; 2
    e8e2:	e8 16       	cp	r14, r24
    e8e4:	f1 04       	cpc	r15, r1
    e8e6:	99 f4       	brne	.+38     	; 0xe90e <fatfs_tests+0xd2>
        {
            if(fatfs_ls("") == 0)
    e8e8:	80 e2       	ldi	r24, 0x20	; 32
    e8ea:	9c e0       	ldi	r25, 0x0C	; 12
    e8ec:	9b de       	rcall	.-714    	; 0xe624 <fatfs_ls>
    }

    else if (MATCHARGS(ptr,"status", (ind + 1), argc))
    {
        strcpy(buff,argv[ind]);
        if(fatfs_status(argv[ind]) == 0)
    e8ee:	89 2b       	or	r24, r25
    e8f0:	71 f4       	brne	.+28     	; 0xe90e <fatfs_tests+0xd2>
        int args = 0;
        for(i=ind+1;i<argc;++i)
        {
            if(fatfs_ls(argv[i]) == 0)
			{
				return(-1);
    e8f2:	8f ef       	ldi	r24, 0xFF	; 255
    e8f4:	9f ef       	ldi	r25, 0xFF	; 255
    e8f6:	32 c0       	rjmp	.+100    	; 0xe95c <fatfs_tests+0x120>
			}
        }
        return(1);
    }

    else if (MATCHARGS(ptr,"mmc_test",(ind+0),argc ))
    e8f8:	96 01       	movw	r18, r12
    e8fa:	41 e0       	ldi	r20, 0x01	; 1
    e8fc:	50 e0       	ldi	r21, 0x00	; 0
    e8fe:	6b ed       	ldi	r22, 0xDB	; 219
    e900:	78 e0       	ldi	r23, 0x08	; 8
    e902:	c7 01       	movw	r24, r14
    e904:	0e 94 4c 32 	call	0x6498	; 0x6498 <MATCHARGS>
    e908:	89 2b       	or	r24, r25
    {
        mmc_test();
    e90a:	21 f0       	breq	.+8      	; 0xe914 <fatfs_tests+0xd8>
    e90c:	5e df       	rcall	.-324    	; 0xe7ca <mmc_test>
        return(1);
    e90e:	81 e0       	ldi	r24, 0x01	; 1
    e910:	90 e0       	ldi	r25, 0x00	; 0
    e912:	24 c0       	rjmp	.+72     	; 0xe95c <fatfs_tests+0x120>
    }

    else if (MATCHARGS(ptr,"mmc_init",(ind+0),argc))
    e914:	96 01       	movw	r18, r12
    e916:	41 e0       	ldi	r20, 0x01	; 1
    e918:	50 e0       	ldi	r21, 0x00	; 0
    e91a:	64 ee       	ldi	r22, 0xE4	; 228
    e91c:	78 e0       	ldi	r23, 0x08	; 8
    e91e:	c7 01       	movw	r24, r14
    e920:	0e 94 4c 32 	call	0x6498	; 0x6498 <MATCHARGS>
    e924:	89 2b       	or	r24, r25
    {
        mmc_init(1);
    e926:	21 f0       	breq	.+8      	; 0xe930 <fatfs_tests+0xf4>
    e928:	81 e0       	ldi	r24, 0x01	; 1
    e92a:	90 e0       	ldi	r25, 0x00	; 0
    e92c:	73 da       	rcall	.-2842   	; 0xde14 <mmc_init>
    e92e:	ef cf       	rjmp	.-34     	; 0xe90e <fatfs_tests+0xd2>
        return(1);
    }

    else if (MATCHARGS(ptr,"status", (ind + 1), argc))
    e930:	96 01       	movw	r18, r12
    e932:	42 e0       	ldi	r20, 0x02	; 2
    e934:	50 e0       	ldi	r21, 0x00	; 0
    e936:	6d ee       	ldi	r22, 0xED	; 237
    e938:	78 e0       	ldi	r23, 0x08	; 8
    e93a:	c7 01       	movw	r24, r14
    e93c:	0e 94 4c 32 	call	0x6498	; 0x6498 <MATCHARGS>
    e940:	89 2b       	or	r24, r25
    e942:	09 f4       	brne	.+2      	; 0xe946 <fatfs_tests+0x10a>
    e944:	87 cf       	rjmp	.-242    	; 0xe854 <fatfs_tests+0x18>
    {
        strcpy(buff,argv[ind]);
    e946:	f8 01       	movw	r30, r16
    e948:	02 81       	ldd	r16, Z+2	; 0x02
    e94a:	13 81       	ldd	r17, Z+3	; 0x03
    e94c:	b8 01       	movw	r22, r16
    e94e:	ce 01       	movw	r24, r28
    e950:	04 96       	adiw	r24, 0x04	; 4
    e952:	0e 94 2c 31 	call	0x6258	; 0x6258 <strcpy>
        if(fatfs_status(argv[ind]) == 0)
    e956:	c8 01       	movw	r24, r16
    e958:	44 dc       	rcall	.-1912   	; 0xe1e2 <fatfs_status>
    e95a:	c9 cf       	rjmp	.-110    	; 0xe8ee <fatfs_tests+0xb2>
        return(1);
    }
#endif

    return(0);
}
    e95c:	cc 5f       	subi	r28, 0xFC	; 252
    e95e:	de 4f       	sbci	r29, 0xFE	; 254
    e960:	e8 e0       	ldi	r30, 0x08	; 8
    e962:	0c 94 e1 e6 	jmp	0x1cdc2	; 0x1cdc2 <__epilogue_restores__+0x14>

0000e966 <fatfs_getc>:
    {
        errno = fatfs_to_errno(rc);
        return(-1);
    }
    return(0);
}
    e966:	8f 92       	push	r8
    e968:	9f 92       	push	r9
    e96a:	af 92       	push	r10
    e96c:	bf 92       	push	r11
    e96e:	ef 92       	push	r14
    e970:	ff 92       	push	r15
    e972:	0f 93       	push	r16
    e974:	1f 93       	push	r17
    e976:	cf 93       	push	r28
    e978:	df 93       	push	r29
    e97a:	00 d0       	rcall	.+0      	; 0xe97c <fatfs_getc+0x16>
    e97c:	1f 92       	push	r1
    e97e:	cd b7       	in	r28, 0x3d	; 61
    e980:	de b7       	in	r29, 0x3e	; 62
    e982:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    e986:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    e98a:	00 97       	sbiw	r24, 0x00	; 0
    e98c:	39 f4       	brne	.+14     	; 0xe99c <fatfs_getc+0x36>
    e98e:	89 e0       	ldi	r24, 0x09	; 9
    e990:	90 e0       	ldi	r25, 0x00	; 0
    e992:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    e996:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    e99a:	2f c0       	rjmp	.+94     	; 0xe9fa <fatfs_getc+0x94>
    e99c:	fc 01       	movw	r30, r24
    e99e:	e4 84       	ldd	r14, Z+12	; 0x0c
    e9a0:	f5 84       	ldd	r15, Z+13	; 0x0d
    e9a2:	e1 14       	cp	r14, r1
    e9a4:	f1 04       	cpc	r15, r1
    e9a6:	99 f3       	breq	.-26     	; 0xe98e <fatfs_getc+0x28>
    e9a8:	8c 01       	movw	r16, r24
    e9aa:	9e 01       	movw	r18, r28
    e9ac:	2f 5f       	subi	r18, 0xFF	; 255
    e9ae:	3f 4f       	sbci	r19, 0xFF	; 255
    e9b0:	41 e0       	ldi	r20, 0x01	; 1
    e9b2:	50 e0       	ldi	r21, 0x00	; 0
    e9b4:	be 01       	movw	r22, r28
    e9b6:	6d 5f       	subi	r22, 0xFD	; 253
    e9b8:	7f 4f       	sbci	r23, 0xFF	; 255
    e9ba:	c7 01       	movw	r24, r14
    e9bc:	0e 94 4b 5b 	call	0xb696	; 0xb696 <f_read>
    e9c0:	00 97       	sbiw	r24, 0x00	; 0
    e9c2:	31 f4       	brne	.+12     	; 0xe9d0 <fatfs_getc+0x6a>
    e9c4:	29 81       	ldd	r18, Y+1	; 0x01
    e9c6:	3a 81       	ldd	r19, Y+2	; 0x02
    e9c8:	21 30       	cpi	r18, 0x01	; 1
    e9ca:	31 05       	cpc	r19, r1
    e9cc:	c9 f0       	breq	.+50     	; 0xea00 <fatfs_getc+0x9a>
    e9ce:	03 c0       	rjmp	.+6      	; 0xe9d6 <fatfs_getc+0x70>
    e9d0:	84 31       	cpi	r24, 0x14	; 20
    e9d2:	91 05       	cpc	r25, r1
    e9d4:	40 f4       	brcc	.+16     	; 0xe9e6 <fatfs_getc+0x80>
    e9d6:	fc 01       	movw	r30, r24
    e9d8:	ea 55       	subi	r30, 0x5A	; 90
    e9da:	f4 4f       	sbci	r31, 0xF4	; 244
    e9dc:	80 81       	ld	r24, Z
    e9de:	08 2e       	mov	r0, r24
    e9e0:	00 0c       	add	r0, r0
    e9e2:	99 0b       	sbc	r25, r25
    e9e4:	02 c0       	rjmp	.+4      	; 0xe9ea <fatfs_getc+0x84>
    e9e6:	83 e2       	ldi	r24, 0x23	; 35
    e9e8:	90 e0       	ldi	r25, 0x00	; 0
    e9ea:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    e9ee:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    e9f2:	f8 01       	movw	r30, r16
    e9f4:	83 81       	ldd	r24, Z+3	; 0x03
    e9f6:	80 62       	ori	r24, 0x20	; 32
    e9f8:	83 83       	std	Z+3, r24	; 0x03
    e9fa:	8f ef       	ldi	r24, 0xFF	; 255
    e9fc:	9f ef       	ldi	r25, 0xFF	; 255
    e9fe:	28 c0       	rjmp	.+80     	; 0xea50 <fatfs_getc+0xea>
    ea00:	8b 81       	ldd	r24, Y+3	; 0x03
    ea02:	8d 30       	cpi	r24, 0x0D	; 13
    ea04:	01 f5       	brne	.+64     	; 0xea46 <fatfs_getc+0xe0>
    ea06:	f7 01       	movw	r30, r14
    ea08:	80 88       	ldd	r8, Z+16	; 0x10
    ea0a:	91 88       	ldd	r9, Z+17	; 0x11
    ea0c:	a2 88       	ldd	r10, Z+18	; 0x12
    ea0e:	b3 88       	ldd	r11, Z+19	; 0x13
    ea10:	9e 01       	movw	r18, r28
    ea12:	2f 5f       	subi	r18, 0xFF	; 255
    ea14:	3f 4f       	sbci	r19, 0xFF	; 255
    ea16:	41 e0       	ldi	r20, 0x01	; 1
    ea18:	50 e0       	ldi	r21, 0x00	; 0
    ea1a:	be 01       	movw	r22, r28
    ea1c:	6d 5f       	subi	r22, 0xFD	; 253
    ea1e:	7f 4f       	sbci	r23, 0xFF	; 255
    ea20:	c7 01       	movw	r24, r14
    ea22:	0e 94 4b 5b 	call	0xb696	; 0xb696 <f_read>
    ea26:	89 2b       	or	r24, r25
    ea28:	89 f4       	brne	.+34     	; 0xea4c <fatfs_getc+0xe6>
    ea2a:	89 81       	ldd	r24, Y+1	; 0x01
    ea2c:	9a 81       	ldd	r25, Y+2	; 0x02
    ea2e:	01 97       	sbiw	r24, 0x01	; 1
    ea30:	69 f4       	brne	.+26     	; 0xea4c <fatfs_getc+0xe6>
    ea32:	8b 81       	ldd	r24, Y+3	; 0x03
    ea34:	8a 30       	cpi	r24, 0x0A	; 10
    ea36:	31 f0       	breq	.+12     	; 0xea44 <fatfs_getc+0xde>
    ea38:	b5 01       	movw	r22, r10
    ea3a:	a4 01       	movw	r20, r8
    ea3c:	c7 01       	movw	r24, r14
    ea3e:	0e 94 57 60 	call	0xc0ae	; 0xc0ae <f_lseek>
    ea42:	04 c0       	rjmp	.+8      	; 0xea4c <fatfs_getc+0xe6>
    ea44:	8b 83       	std	Y+3, r24	; 0x03
    ea46:	8b 81       	ldd	r24, Y+3	; 0x03
    ea48:	90 e0       	ldi	r25, 0x00	; 0
    ea4a:	02 c0       	rjmp	.+4      	; 0xea50 <fatfs_getc+0xea>
    ea4c:	8a e0       	ldi	r24, 0x0A	; 10
    ea4e:	90 e0       	ldi	r25, 0x00	; 0
    ea50:	0f 90       	pop	r0
    ea52:	0f 90       	pop	r0
    ea54:	0f 90       	pop	r0
    ea56:	df 91       	pop	r29
    ea58:	cf 91       	pop	r28
    ea5a:	1f 91       	pop	r17
    ea5c:	0f 91       	pop	r16
    ea5e:	ff 90       	pop	r15
    ea60:	ef 90       	pop	r14
    ea62:	bf 90       	pop	r11
    ea64:	af 90       	pop	r10
    ea66:	9f 90       	pop	r9
    ea68:	8f 90       	pop	r8
    ea6a:	08 95       	ret

0000ea6c <fatfs_putc>:
    ea6c:	a3 e0       	ldi	r26, 0x03	; 3
    ea6e:	b0 e0       	ldi	r27, 0x00	; 0
    ea70:	ec e3       	ldi	r30, 0x3C	; 60
    ea72:	f5 e7       	ldi	r31, 0x75	; 117
    ea74:	0c 94 c9 e6 	jmp	0x1cd92	; 0x1cd92 <__prologue_saves__+0x1c>
    ea78:	8b 83       	std	Y+3, r24	; 0x03
    ea7a:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    ea7e:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    ea82:	61 15       	cp	r22, r1
    ea84:	71 05       	cpc	r23, r1
    ea86:	39 f4       	brne	.+14     	; 0xea96 <fatfs_putc+0x2a>
    ea88:	89 e0       	ldi	r24, 0x09	; 9
    ea8a:	90 e0       	ldi	r25, 0x00	; 0
    ea8c:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    ea90:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    ea94:	2d c0       	rjmp	.+90     	; 0xeaf0 <fatfs_putc+0x84>
    ea96:	fb 01       	movw	r30, r22
    ea98:	84 85       	ldd	r24, Z+12	; 0x0c
    ea9a:	95 85       	ldd	r25, Z+13	; 0x0d
    ea9c:	00 97       	sbiw	r24, 0x00	; 0
    ea9e:	a1 f3       	breq	.-24     	; 0xea88 <fatfs_putc+0x1c>
    eaa0:	8b 01       	movw	r16, r22
    eaa2:	9e 01       	movw	r18, r28
    eaa4:	2f 5f       	subi	r18, 0xFF	; 255
    eaa6:	3f 4f       	sbci	r19, 0xFF	; 255
    eaa8:	41 e0       	ldi	r20, 0x01	; 1
    eaaa:	50 e0       	ldi	r21, 0x00	; 0
    eaac:	be 01       	movw	r22, r28
    eaae:	6d 5f       	subi	r22, 0xFD	; 253
    eab0:	7f 4f       	sbci	r23, 0xFF	; 255
    eab2:	0e 94 96 5c 	call	0xb92c	; 0xb92c <f_write>
    eab6:	00 97       	sbiw	r24, 0x00	; 0
    eab8:	31 f4       	brne	.+12     	; 0xeac6 <fatfs_putc+0x5a>
    eaba:	29 81       	ldd	r18, Y+1	; 0x01
    eabc:	3a 81       	ldd	r19, Y+2	; 0x02
    eabe:	21 30       	cpi	r18, 0x01	; 1
    eac0:	31 05       	cpc	r19, r1
    eac2:	c9 f0       	breq	.+50     	; 0xeaf6 <fatfs_putc+0x8a>
    eac4:	03 c0       	rjmp	.+6      	; 0xeacc <fatfs_putc+0x60>
    eac6:	84 31       	cpi	r24, 0x14	; 20
    eac8:	91 05       	cpc	r25, r1
    eaca:	40 f4       	brcc	.+16     	; 0xeadc <fatfs_putc+0x70>
    eacc:	fc 01       	movw	r30, r24
    eace:	ea 55       	subi	r30, 0x5A	; 90
    ead0:	f4 4f       	sbci	r31, 0xF4	; 244
    ead2:	80 81       	ld	r24, Z
    ead4:	08 2e       	mov	r0, r24
    ead6:	00 0c       	add	r0, r0
    ead8:	99 0b       	sbc	r25, r25
    eada:	02 c0       	rjmp	.+4      	; 0xeae0 <fatfs_putc+0x74>
    eadc:	83 e2       	ldi	r24, 0x23	; 35
    eade:	90 e0       	ldi	r25, 0x00	; 0
    eae0:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    eae4:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    eae8:	f8 01       	movw	r30, r16
    eaea:	83 81       	ldd	r24, Z+3	; 0x03
    eaec:	80 62       	ori	r24, 0x20	; 32
    eaee:	83 83       	std	Z+3, r24	; 0x03
    eaf0:	8f ef       	ldi	r24, 0xFF	; 255
    eaf2:	9f ef       	ldi	r25, 0xFF	; 255
    eaf4:	02 c0       	rjmp	.+4      	; 0xeafa <fatfs_putc+0x8e>
    eaf6:	8b 81       	ldd	r24, Y+3	; 0x03
    eaf8:	90 e0       	ldi	r25, 0x00	; 0
    eafa:	23 96       	adiw	r28, 0x03	; 3
    eafc:	e4 e0       	ldi	r30, 0x04	; 4
    eafe:	0c 94 e5 e6 	jmp	0x1cdca	; 0x1cdca <__epilogue_restores__+0x1c>

0000eb02 <fgetc>:
    eb02:	cf 93       	push	r28
    eb04:	df 93       	push	r29
    eb06:	00 d0       	rcall	.+0      	; 0xeb08 <fgetc+0x6>
    eb08:	1f 92       	push	r1
    eb0a:	ec 01       	movw	r28, r24
    eb0c:	00 97       	sbiw	r24, 0x00	; 0
    eb0e:	39 f4       	brne	.+14     	; 0xeb1e <fgetc+0x1c>
    eb10:	89 e0       	ldi	r24, 0x09	; 9
    eb12:	90 e0       	ldi	r25, 0x00	; 0
    eb14:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    eb18:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    eb1c:	40 c0       	rjmp	.+128    	; 0xeb9e <fgetc+0x9c>
    eb1e:	2b 81       	ldd	r18, Y+3	; 0x03
    eb20:	20 ff       	sbrs	r18, 0
    eb22:	3d c0       	rjmp	.+122    	; 0xeb9e <fgetc+0x9c>
    eb24:	26 ff       	sbrs	r18, 6
    eb26:	0a c0       	rjmp	.+20     	; 0xeb3c <fgetc+0x3a>
    eb28:	2f 7b       	andi	r18, 0xBF	; 191
    eb2a:	2b 83       	std	Y+3, r18	; 0x03
    eb2c:	8e 81       	ldd	r24, Y+6	; 0x06
    eb2e:	9f 81       	ldd	r25, Y+7	; 0x07
    eb30:	01 96       	adiw	r24, 0x01	; 1
    eb32:	9f 83       	std	Y+7, r25	; 0x07
    eb34:	8e 83       	std	Y+6, r24	; 0x06
    eb36:	8a 81       	ldd	r24, Y+2	; 0x02
    eb38:	90 e0       	ldi	r25, 0x00	; 0
    eb3a:	33 c0       	rjmp	.+102    	; 0xeba2 <fgetc+0xa0>
    eb3c:	22 ff       	sbrs	r18, 2
    eb3e:	0d c0       	rjmp	.+26     	; 0xeb5a <fgetc+0x58>
    eb40:	e8 81       	ld	r30, Y
    eb42:	f9 81       	ldd	r31, Y+1	; 0x01
    eb44:	80 81       	ld	r24, Z
    eb46:	90 e0       	ldi	r25, 0x00	; 0
    eb48:	00 97       	sbiw	r24, 0x00	; 0
    eb4a:	19 f4       	brne	.+6      	; 0xeb52 <fgetc+0x50>
    eb4c:	20 62       	ori	r18, 0x20	; 32
    eb4e:	2b 83       	std	Y+3, r18	; 0x03
    eb50:	26 c0       	rjmp	.+76     	; 0xeb9e <fgetc+0x9c>
    eb52:	31 96       	adiw	r30, 0x01	; 1
    eb54:	f9 83       	std	Y+1, r31	; 0x01
    eb56:	e8 83       	st	Y, r30
    eb58:	1b c0       	rjmp	.+54     	; 0xeb90 <fgetc+0x8e>
    eb5a:	ea 85       	ldd	r30, Y+10	; 0x0a
    eb5c:	fb 85       	ldd	r31, Y+11	; 0x0b
    eb5e:	30 97       	sbiw	r30, 0x00	; 0
    eb60:	59 f4       	brne	.+22     	; 0xeb78 <fgetc+0x76>
    eb62:	8e ec       	ldi	r24, 0xCE	; 206
    eb64:	9b e0       	ldi	r25, 0x0B	; 11
    eb66:	a0 e0       	ldi	r26, 0x00	; 0
    eb68:	ed b7       	in	r30, 0x3d	; 61
    eb6a:	fe b7       	in	r31, 0x3e	; 62
    eb6c:	81 83       	std	Z+1, r24	; 0x01
    eb6e:	92 83       	std	Z+2, r25	; 0x02
    eb70:	a3 83       	std	Z+3, r26	; 0x03
    eb72:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    eb76:	13 c0       	rjmp	.+38     	; 0xeb9e <fgetc+0x9c>
    eb78:	09 95       	icall
    eb7a:	97 ff       	sbrs	r25, 7
    eb7c:	09 c0       	rjmp	.+18     	; 0xeb90 <fgetc+0x8e>
    eb7e:	2b 81       	ldd	r18, Y+3	; 0x03
    eb80:	02 96       	adiw	r24, 0x02	; 2
    eb82:	11 f0       	breq	.+4      	; 0xeb88 <fgetc+0x86>
    eb84:	80 e2       	ldi	r24, 0x20	; 32
    eb86:	01 c0       	rjmp	.+2      	; 0xeb8a <fgetc+0x88>
    eb88:	80 e1       	ldi	r24, 0x10	; 16
    eb8a:	82 2b       	or	r24, r18
    eb8c:	8b 83       	std	Y+3, r24	; 0x03
    eb8e:	07 c0       	rjmp	.+14     	; 0xeb9e <fgetc+0x9c>
    eb90:	2e 81       	ldd	r18, Y+6	; 0x06
    eb92:	3f 81       	ldd	r19, Y+7	; 0x07
    eb94:	2f 5f       	subi	r18, 0xFF	; 255
    eb96:	3f 4f       	sbci	r19, 0xFF	; 255
    eb98:	3f 83       	std	Y+7, r19	; 0x07
    eb9a:	2e 83       	std	Y+6, r18	; 0x06
    eb9c:	02 c0       	rjmp	.+4      	; 0xeba2 <fgetc+0xa0>
    eb9e:	8f ef       	ldi	r24, 0xFF	; 255
    eba0:	9f ef       	ldi	r25, 0xFF	; 255
    eba2:	cd b7       	in	r28, 0x3d	; 61
    eba4:	de b7       	in	r29, 0x3e	; 62
    eba6:	23 96       	adiw	r28, 0x03	; 3
    eba8:	e2 e0       	ldi	r30, 0x02	; 2
    ebaa:	0c 94 e7 e6 	jmp	0x1cdce	; 0x1cdce <__epilogue_restores__+0x20>

0000ebae <fputc>:
    ebae:	cf 93       	push	r28
    ebb0:	df 93       	push	r29
    ebb2:	00 d0       	rcall	.+0      	; 0xebb4 <fputc+0x6>
    ebb4:	1f 92       	push	r1
    ebb6:	eb 01       	movw	r28, r22
    ebb8:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    ebbc:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    ebc0:	20 91 c1 1c 	lds	r18, 0x1CC1	; 0x801cc1 <__iob+0x2>
    ebc4:	30 91 c2 1c 	lds	r19, 0x1CC2	; 0x801cc2 <__iob+0x3>
    ebc8:	62 17       	cp	r22, r18
    ebca:	73 07       	cpc	r23, r19
    ebcc:	49 f0       	breq	.+18     	; 0xebe0 <fputc+0x32>
    ebce:	20 91 c3 1c 	lds	r18, 0x1CC3	; 0x801cc3 <__iob+0x4>
    ebd2:	30 91 c4 1c 	lds	r19, 0x1CC4	; 0x801cc4 <__iob+0x5>
    ebd6:	62 17       	cp	r22, r18
    ebd8:	73 07       	cpc	r23, r19
    ebda:	11 f0       	breq	.+4      	; 0xebe0 <fputc+0x32>
    ebdc:	47 df       	rcall	.-370    	; 0xea6c <fatfs_putc>
    ebde:	33 c0       	rjmp	.+102    	; 0xec46 <fputc+0x98>
    ebe0:	2b 81       	ldd	r18, Y+3	; 0x03
    ebe2:	21 ff       	sbrs	r18, 1
    ebe4:	2e c0       	rjmp	.+92     	; 0xec42 <fputc+0x94>
    ebe6:	22 ff       	sbrs	r18, 2
    ebe8:	10 c0       	rjmp	.+32     	; 0xec0a <fputc+0x5c>
    ebea:	4e 81       	ldd	r20, Y+6	; 0x06
    ebec:	5f 81       	ldd	r21, Y+7	; 0x07
    ebee:	2c 81       	ldd	r18, Y+4	; 0x04
    ebf0:	3d 81       	ldd	r19, Y+5	; 0x05
    ebf2:	42 17       	cp	r20, r18
    ebf4:	53 07       	cpc	r21, r19
    ebf6:	f4 f4       	brge	.+60     	; 0xec34 <fputc+0x86>
    ebf8:	e8 81       	ld	r30, Y
    ebfa:	f9 81       	ldd	r31, Y+1	; 0x01
    ebfc:	9f 01       	movw	r18, r30
    ebfe:	2f 5f       	subi	r18, 0xFF	; 255
    ec00:	3f 4f       	sbci	r19, 0xFF	; 255
    ec02:	39 83       	std	Y+1, r19	; 0x01
    ec04:	28 83       	st	Y, r18
    ec06:	80 83       	st	Z, r24
    ec08:	15 c0       	rjmp	.+42     	; 0xec34 <fputc+0x86>
    ec0a:	e8 85       	ldd	r30, Y+8	; 0x08
    ec0c:	f9 85       	ldd	r31, Y+9	; 0x09
    ec0e:	30 97       	sbiw	r30, 0x00	; 0
    ec10:	59 f4       	brne	.+22     	; 0xec28 <fputc+0x7a>
    ec12:	86 eb       	ldi	r24, 0xB6	; 182
    ec14:	9b e0       	ldi	r25, 0x0B	; 11
    ec16:	a0 e0       	ldi	r26, 0x00	; 0
    ec18:	ed b7       	in	r30, 0x3d	; 61
    ec1a:	fe b7       	in	r31, 0x3e	; 62
    ec1c:	81 83       	std	Z+1, r24	; 0x01
    ec1e:	92 83       	std	Z+2, r25	; 0x02
    ec20:	a3 83       	std	Z+3, r26	; 0x03
    ec22:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    ec26:	0d c0       	rjmp	.+26     	; 0xec42 <fputc+0x94>
    ec28:	be 01       	movw	r22, r28
    ec2a:	09 95       	icall
    ec2c:	8f 3f       	cpi	r24, 0xFF	; 255
    ec2e:	ff ef       	ldi	r31, 0xFF	; 255
    ec30:	9f 07       	cpc	r25, r31
    ec32:	39 f0       	breq	.+14     	; 0xec42 <fputc+0x94>
    ec34:	2e 81       	ldd	r18, Y+6	; 0x06
    ec36:	3f 81       	ldd	r19, Y+7	; 0x07
    ec38:	2f 5f       	subi	r18, 0xFF	; 255
    ec3a:	3f 4f       	sbci	r19, 0xFF	; 255
    ec3c:	3f 83       	std	Y+7, r19	; 0x07
    ec3e:	2e 83       	std	Y+6, r18	; 0x06
    ec40:	02 c0       	rjmp	.+4      	; 0xec46 <fputc+0x98>
    ec42:	8f ef       	ldi	r24, 0xFF	; 255
    ec44:	9f ef       	ldi	r25, 0xFF	; 255
    ec46:	cd b7       	in	r28, 0x3d	; 61
    ec48:	de b7       	in	r29, 0x3e	; 62
    ec4a:	23 96       	adiw	r28, 0x03	; 3
    ec4c:	e2 e0       	ldi	r30, 0x02	; 2
    ec4e:	0c 94 e7 e6 	jmp	0x1cdce	; 0x1cdce <__epilogue_restores__+0x20>

0000ec52 <_fprintf_putc>:
    ec52:	fc 01       	movw	r30, r24
    ec54:	86 2f       	mov	r24, r22
    ec56:	26 81       	ldd	r18, Z+6	; 0x06
    ec58:	37 81       	ldd	r19, Z+7	; 0x07
    ec5a:	2f 5f       	subi	r18, 0xFF	; 255
    ec5c:	3f 4f       	sbci	r19, 0xFF	; 255
    ec5e:	37 83       	std	Z+7, r19	; 0x07
    ec60:	26 83       	std	Z+6, r18	; 0x06
    ec62:	62 81       	ldd	r22, Z+2	; 0x02
    ec64:	73 81       	ldd	r23, Z+3	; 0x03
    ec66:	90 e0       	ldi	r25, 0x00	; 0
    ec68:	a2 cf       	rjmp	.-188    	; 0xebae <fputc>
    ec6a:	08 95       	ret

0000ec6c <getchar>:
    ec6c:	80 91 bf 1c 	lds	r24, 0x1CBF	; 0x801cbf <__iob>
    ec70:	90 91 c0 1c 	lds	r25, 0x1CC0	; 0x801cc0 <__iob+0x1>
    ec74:	46 cf       	rjmp	.-372    	; 0xeb02 <fgetc>
    ec76:	08 95       	ret

0000ec78 <putchar>:
    ec78:	60 91 c1 1c 	lds	r22, 0x1CC1	; 0x801cc1 <__iob+0x2>
    ec7c:	70 91 c2 1c 	lds	r23, 0x1CC2	; 0x801cc2 <__iob+0x3>
    ec80:	96 cf       	rjmp	.-212    	; 0xebae <fputc>
    ec82:	08 95       	ret

0000ec84 <fgets>:
    ec84:	a0 e0       	ldi	r26, 0x00	; 0
    ec86:	b0 e0       	ldi	r27, 0x00	; 0
    ec88:	e8 e4       	ldi	r30, 0x48	; 72
    ec8a:	f6 e7       	ldi	r31, 0x76	; 118
    ec8c:	0c 94 c5 e6 	jmp	0x1cd8a	; 0x1cd8a <__prologue_saves__+0x14>
    ec90:	7c 01       	movw	r14, r24
    ec92:	6a 01       	movw	r12, r20
    ec94:	8b 01       	movw	r16, r22
    ec96:	c0 e0       	ldi	r28, 0x00	; 0
    ec98:	d0 e0       	ldi	r29, 0x00	; 0
    ec9a:	01 15       	cp	r16, r1
    ec9c:	11 05       	cpc	r17, r1
    ec9e:	41 f0       	breq	.+16     	; 0xecb0 <fgets+0x2c>
    eca0:	c6 01       	movw	r24, r12
    eca2:	2f df       	rcall	.-418    	; 0xeb02 <fgetc>
    eca4:	8f 3f       	cpi	r24, 0xFF	; 255
    eca6:	2f ef       	ldi	r18, 0xFF	; 255
    eca8:	92 07       	cpc	r25, r18
    ecaa:	39 f4       	brne	.+14     	; 0xecba <fgets+0x36>
    ecac:	20 97       	sbiw	r28, 0x00	; 0
    ecae:	b9 f0       	breq	.+46     	; 0xecde <fgets+0x5a>
    ecb0:	ce 0d       	add	r28, r14
    ecb2:	df 1d       	adc	r29, r15
    ecb4:	18 82       	st	Y, r1
    ecb6:	c7 01       	movw	r24, r14
    ecb8:	14 c0       	rjmp	.+40     	; 0xece2 <fgets+0x5e>
    ecba:	8a 30       	cpi	r24, 0x0A	; 10
    ecbc:	91 05       	cpc	r25, r1
    ecbe:	c1 f3       	breq	.-16     	; 0xecb0 <fgets+0x2c>
    ecc0:	88 30       	cpi	r24, 0x08	; 8
    ecc2:	91 05       	cpc	r25, r1
    ecc4:	21 f4       	brne	.+8      	; 0xecce <fgets+0x4a>
    ecc6:	20 97       	sbiw	r28, 0x00	; 0
    ecc8:	39 f0       	breq	.+14     	; 0xecd8 <fgets+0x54>
    ecca:	21 97       	sbiw	r28, 0x01	; 1
    eccc:	05 c0       	rjmp	.+10     	; 0xecd8 <fgets+0x54>
    ecce:	f7 01       	movw	r30, r14
    ecd0:	ec 0f       	add	r30, r28
    ecd2:	fd 1f       	adc	r31, r29
    ecd4:	80 83       	st	Z, r24
    ecd6:	21 96       	adiw	r28, 0x01	; 1
    ecd8:	01 50       	subi	r16, 0x01	; 1
    ecda:	11 09       	sbc	r17, r1
    ecdc:	de cf       	rjmp	.-68     	; 0xec9a <fgets+0x16>
    ecde:	80 e0       	ldi	r24, 0x00	; 0
    ece0:	90 e0       	ldi	r25, 0x00	; 0
    ece2:	cd b7       	in	r28, 0x3d	; 61
    ece4:	de b7       	in	r29, 0x3e	; 62
    ece6:	e8 e0       	ldi	r30, 0x08	; 8
    ece8:	0c 94 e1 e6 	jmp	0x1cdc2	; 0x1cdc2 <__epilogue_restores__+0x14>

0000ecec <fputs>:
    ecec:	0f 93       	push	r16
    ecee:	1f 93       	push	r17
    ecf0:	cf 93       	push	r28
    ecf2:	df 93       	push	r29
    ecf4:	8b 01       	movw	r16, r22
    ecf6:	ec 01       	movw	r28, r24
    ecf8:	89 91       	ld	r24, Y+
    ecfa:	88 23       	and	r24, r24
    ecfc:	41 f0       	breq	.+16     	; 0xed0e <fputs+0x22>
    ecfe:	b8 01       	movw	r22, r16
    ed00:	90 e0       	ldi	r25, 0x00	; 0
    ed02:	55 df       	rcall	.-342    	; 0xebae <fputc>
    ed04:	8f 3f       	cpi	r24, 0xFF	; 255
    ed06:	2f ef       	ldi	r18, 0xFF	; 255
    ed08:	92 07       	cpc	r25, r18
    ed0a:	b1 f7       	brne	.-20     	; 0xecf8 <fputs+0xc>
    ed0c:	02 c0       	rjmp	.+4      	; 0xed12 <fputs+0x26>
    ed0e:	80 e0       	ldi	r24, 0x00	; 0
    ed10:	90 e0       	ldi	r25, 0x00	; 0
    ed12:	df 91       	pop	r29
    ed14:	cf 91       	pop	r28
    ed16:	1f 91       	pop	r17
    ed18:	0f 91       	pop	r16
    ed1a:	08 95       	ret

0000ed1c <puts>:
    ed1c:	cf 93       	push	r28
    ed1e:	df 93       	push	r29
    ed20:	ec 01       	movw	r28, r24
    ed22:	89 91       	ld	r24, Y+
    ed24:	60 91 c1 1c 	lds	r22, 0x1CC1	; 0x801cc1 <__iob+0x2>
    ed28:	70 91 c2 1c 	lds	r23, 0x1CC2	; 0x801cc2 <__iob+0x3>
    ed2c:	88 23       	and	r24, r24
    ed2e:	39 f0       	breq	.+14     	; 0xed3e <puts+0x22>
    ed30:	90 e0       	ldi	r25, 0x00	; 0
    ed32:	3d df       	rcall	.-390    	; 0xebae <fputc>
    ed34:	8f 3f       	cpi	r24, 0xFF	; 255
    ed36:	2f ef       	ldi	r18, 0xFF	; 255
    ed38:	92 07       	cpc	r25, r18
    ed3a:	99 f7       	brne	.-26     	; 0xed22 <puts+0x6>
    ed3c:	03 c0       	rjmp	.+6      	; 0xed44 <puts+0x28>
    ed3e:	8a e0       	ldi	r24, 0x0A	; 10
    ed40:	90 e0       	ldi	r25, 0x00	; 0
    ed42:	35 df       	rcall	.-406    	; 0xebae <fputc>
    ed44:	df 91       	pop	r29
    ed46:	cf 91       	pop	r28
    ed48:	08 95       	ret

0000ed4a <fileno>:
    ed4a:	00 97       	sbiw	r24, 0x00	; 0
    ed4c:	39 f4       	brne	.+14     	; 0xed5c <fileno+0x12>
    ed4e:	89 e0       	ldi	r24, 0x09	; 9
    ed50:	90 e0       	ldi	r25, 0x00	; 0
    ed52:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    ed56:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    ed5a:	0e c0       	rjmp	.+28     	; 0xed78 <fileno+0x2e>
    ed5c:	ef eb       	ldi	r30, 0xBF	; 191
    ed5e:	fc e1       	ldi	r31, 0x1C	; 28
    ed60:	20 e0       	ldi	r18, 0x00	; 0
    ed62:	30 e0       	ldi	r19, 0x00	; 0
    ed64:	41 91       	ld	r20, Z+
    ed66:	51 91       	ld	r21, Z+
    ed68:	84 17       	cp	r24, r20
    ed6a:	95 07       	cpc	r25, r21
    ed6c:	41 f0       	breq	.+16     	; 0xed7e <fileno+0x34>
    ed6e:	2f 5f       	subi	r18, 0xFF	; 255
    ed70:	3f 4f       	sbci	r19, 0xFF	; 255
    ed72:	20 31       	cpi	r18, 0x10	; 16
    ed74:	31 05       	cpc	r19, r1
    ed76:	b1 f7       	brne	.-20     	; 0xed64 <fileno+0x1a>
    ed78:	8f ef       	ldi	r24, 0xFF	; 255
    ed7a:	9f ef       	ldi	r25, 0xFF	; 255
    ed7c:	08 95       	ret
    ed7e:	c9 01       	movw	r24, r18
    ed80:	08 95       	ret

0000ed82 <fileno_to_stream>:
    ed82:	80 31       	cpi	r24, 0x10	; 16
    ed84:	91 05       	cpc	r25, r1
    ed86:	48 f4       	brcc	.+18     	; 0xed9a <fileno_to_stream+0x18>
    ed88:	88 0f       	add	r24, r24
    ed8a:	99 1f       	adc	r25, r25
    ed8c:	fc 01       	movw	r30, r24
    ed8e:	e1 54       	subi	r30, 0x41	; 65
    ed90:	f3 4e       	sbci	r31, 0xE3	; 227
    ed92:	80 81       	ld	r24, Z
    ed94:	91 81       	ldd	r25, Z+1	; 0x01
    ed96:	00 97       	sbiw	r24, 0x00	; 0
    ed98:	41 f4       	brne	.+16     	; 0xedaa <fileno_to_stream+0x28>
    ed9a:	89 e0       	ldi	r24, 0x09	; 9
    ed9c:	90 e0       	ldi	r25, 0x00	; 0
    ed9e:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    eda2:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    eda6:	80 e0       	ldi	r24, 0x00	; 0
    eda8:	90 e0       	ldi	r25, 0x00	; 0
    edaa:	08 95       	ret

0000edac <mctime>:
    edac:	a4 e0       	ldi	r26, 0x04	; 4
    edae:	b0 e0       	ldi	r27, 0x00	; 0
    edb0:	ec ed       	ldi	r30, 0xDC	; 220
    edb2:	f6 e7       	ldi	r31, 0x76	; 118
    edb4:	0c 94 cb e6 	jmp	0x1cd96	; 0x1cd96 <__prologue_saves__+0x20>
    edb8:	69 83       	std	Y+1, r22	; 0x01
    edba:	7a 83       	std	Y+2, r23	; 0x02
    edbc:	8b 83       	std	Y+3, r24	; 0x03
    edbe:	9c 83       	std	Y+4, r25	; 0x04
    edc0:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    edc4:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    edc8:	ce 01       	movw	r24, r28
    edca:	01 96       	adiw	r24, 0x01	; 1
    edcc:	0e 94 07 3d 	call	0x7a0e	; 0x7a0e <ctime_gm>
    edd0:	fc 01       	movw	r30, r24
    edd2:	01 90       	ld	r0, Z+
    edd4:	00 20       	and	r0, r0
    edd6:	e9 f7       	brne	.-6      	; 0xedd2 <mctime+0x26>
    edd8:	31 97       	sbiw	r30, 0x01	; 1
    edda:	e8 1b       	sub	r30, r24
    eddc:	f9 0b       	sbc	r31, r25
    edde:	39 f0       	breq	.+14     	; 0xedee <mctime+0x42>
    ede0:	31 97       	sbiw	r30, 0x01	; 1
    ede2:	e8 0f       	add	r30, r24
    ede4:	f9 1f       	adc	r31, r25
    ede6:	20 81       	ld	r18, Z
    ede8:	2a 30       	cpi	r18, 0x0A	; 10
    edea:	09 f4       	brne	.+2      	; 0xedee <mctime+0x42>
    edec:	10 82       	st	Z, r1
    edee:	24 96       	adiw	r28, 0x04	; 4
    edf0:	e2 e0       	ldi	r30, 0x02	; 2
    edf2:	0c 94 e7 e6 	jmp	0x1cdce	; 0x1cdce <__epilogue_restores__+0x20>

0000edf6 <basename>:
    edf6:	00 97       	sbiw	r24, 0x00	; 0
    edf8:	49 f0       	breq	.+18     	; 0xee0c <basename+0x16>
    edfa:	fc 01       	movw	r30, r24
    edfc:	21 91       	ld	r18, Z+
    edfe:	22 23       	and	r18, r18
    ee00:	21 f0       	breq	.+8      	; 0xee0a <basename+0x14>
    ee02:	2f 32       	cpi	r18, 0x2F	; 47
    ee04:	d9 f7       	brne	.-10     	; 0xedfc <basename+0x6>
    ee06:	cf 01       	movw	r24, r30
    ee08:	f9 cf       	rjmp	.-14     	; 0xedfc <basename+0x6>
    ee0a:	08 95       	ret
    ee0c:	80 e2       	ldi	r24, 0x20	; 32
    ee0e:	9c e0       	ldi	r25, 0x0C	; 12
    ee10:	08 95       	ret

0000ee12 <chdir>:
    ee12:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    ee16:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    ee1a:	0e 94 c6 5e 	call	0xbd8c	; 0xbd8c <f_chdir>
    ee1e:	00 97       	sbiw	r24, 0x00	; 0
    ee20:	a1 f0       	breq	.+40     	; 0xee4a <chdir+0x38>
    ee22:	84 31       	cpi	r24, 0x14	; 20
    ee24:	91 05       	cpc	r25, r1
    ee26:	40 f4       	brcc	.+16     	; 0xee38 <chdir+0x26>
    ee28:	fc 01       	movw	r30, r24
    ee2a:	ea 55       	subi	r30, 0x5A	; 90
    ee2c:	f4 4f       	sbci	r31, 0xF4	; 244
    ee2e:	80 81       	ld	r24, Z
    ee30:	08 2e       	mov	r0, r24
    ee32:	00 0c       	add	r0, r0
    ee34:	99 0b       	sbc	r25, r25
    ee36:	02 c0       	rjmp	.+4      	; 0xee3c <chdir+0x2a>
    ee38:	83 e2       	ldi	r24, 0x23	; 35
    ee3a:	90 e0       	ldi	r25, 0x00	; 0
    ee3c:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    ee40:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    ee44:	8f ef       	ldi	r24, 0xFF	; 255
    ee46:	9f ef       	ldi	r25, 0xFF	; 255
    ee48:	08 95       	ret
    ee4a:	80 e0       	ldi	r24, 0x00	; 0
    ee4c:	90 e0       	ldi	r25, 0x00	; 0
    ee4e:	08 95       	ret

0000ee50 <chmod>:
    ee50:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    ee54:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    ee58:	42 79       	andi	r20, 0x92	; 146
    ee5a:	55 27       	eor	r21, r21
    ee5c:	66 27       	eor	r22, r22
    ee5e:	77 27       	eor	r23, r23
    ee60:	45 2b       	or	r20, r21
    ee62:	46 2b       	or	r20, r22
    ee64:	47 2b       	or	r20, r23
    ee66:	19 f0       	breq	.+6      	; 0xee6e <chmod+0x1e>
    ee68:	80 e0       	ldi	r24, 0x00	; 0
    ee6a:	90 e0       	ldi	r25, 0x00	; 0
    ee6c:	08 95       	ret
    ee6e:	41 e0       	ldi	r20, 0x01	; 1
    ee70:	61 e0       	ldi	r22, 0x01	; 1
    ee72:	0e 94 a6 67 	call	0xcf4c	; 0xcf4c <f_chmod>
    ee76:	00 97       	sbiw	r24, 0x00	; 0
    ee78:	b9 f3       	breq	.-18     	; 0xee68 <chmod+0x18>
    ee7a:	84 31       	cpi	r24, 0x14	; 20
    ee7c:	91 05       	cpc	r25, r1
    ee7e:	40 f4       	brcc	.+16     	; 0xee90 <chmod+0x40>
    ee80:	fc 01       	movw	r30, r24
    ee82:	ea 55       	subi	r30, 0x5A	; 90
    ee84:	f4 4f       	sbci	r31, 0xF4	; 244
    ee86:	80 81       	ld	r24, Z
    ee88:	08 2e       	mov	r0, r24
    ee8a:	00 0c       	add	r0, r0
    ee8c:	99 0b       	sbc	r25, r25
    ee8e:	02 c0       	rjmp	.+4      	; 0xee94 <chmod+0x44>
    ee90:	83 e2       	ldi	r24, 0x23	; 35
    ee92:	90 e0       	ldi	r25, 0x00	; 0
    ee94:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    ee98:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    ee9c:	8f ef       	ldi	r24, 0xFF	; 255
    ee9e:	9f ef       	ldi	r25, 0xFF	; 255
    eea0:	08 95       	ret

0000eea2 <getcwd>:
    eea2:	cf 93       	push	r28
    eea4:	df 93       	push	r29
    eea6:	d8 2f       	mov	r29, r24
    eea8:	c9 2f       	mov	r28, r25
    eeaa:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    eeae:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    eeb2:	0e 94 21 5f 	call	0xbe42	; 0xbe42 <f_getcwd>
    eeb6:	00 97       	sbiw	r24, 0x00	; 0
    eeb8:	a1 f0       	breq	.+40     	; 0xeee2 <getcwd+0x40>
    eeba:	84 31       	cpi	r24, 0x14	; 20
    eebc:	91 05       	cpc	r25, r1
    eebe:	40 f4       	brcc	.+16     	; 0xeed0 <getcwd+0x2e>
    eec0:	fc 01       	movw	r30, r24
    eec2:	ea 55       	subi	r30, 0x5A	; 90
    eec4:	f4 4f       	sbci	r31, 0xF4	; 244
    eec6:	80 81       	ld	r24, Z
    eec8:	08 2e       	mov	r0, r24
    eeca:	00 0c       	add	r0, r0
    eecc:	99 0b       	sbc	r25, r25
    eece:	02 c0       	rjmp	.+4      	; 0xeed4 <getcwd+0x32>
    eed0:	83 e2       	ldi	r24, 0x23	; 35
    eed2:	90 e0       	ldi	r25, 0x00	; 0
    eed4:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    eed8:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    eedc:	80 e0       	ldi	r24, 0x00	; 0
    eede:	90 e0       	ldi	r25, 0x00	; 0
    eee0:	02 c0       	rjmp	.+4      	; 0xeee6 <getcwd+0x44>
    eee2:	8d 2f       	mov	r24, r29
    eee4:	9c 2f       	mov	r25, r28
    eee6:	df 91       	pop	r29
    eee8:	cf 91       	pop	r28
    eeea:	08 95       	ret

0000eeec <mkdir>:
    eeec:	cf 93       	push	r28
    eeee:	df 93       	push	r29
    eef0:	ec 01       	movw	r28, r24
    eef2:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    eef6:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    eefa:	41 15       	cp	r20, r1
    eefc:	51 05       	cpc	r21, r1
    eefe:	61 05       	cpc	r22, r1
    ef00:	71 05       	cpc	r23, r1
    ef02:	41 f4       	brne	.+16     	; 0xef14 <mkdir+0x28>
    ef04:	ce 01       	movw	r24, r28
    ef06:	0e 94 a1 65 	call	0xcb42	; 0xcb42 <f_mkdir>
    ef0a:	00 97       	sbiw	r24, 0x00	; 0
    ef0c:	39 f4       	brne	.+14     	; 0xef1c <mkdir+0x30>
    ef0e:	80 e0       	ldi	r24, 0x00	; 0
    ef10:	90 e0       	ldi	r25, 0x00	; 0
    ef12:	17 c0       	rjmp	.+46     	; 0xef42 <mkdir+0x56>
    ef14:	9d df       	rcall	.-198    	; 0xee50 <chmod>
    ef16:	89 2b       	or	r24, r25
    ef18:	a9 f3       	breq	.-22     	; 0xef04 <mkdir+0x18>
    ef1a:	11 c0       	rjmp	.+34     	; 0xef3e <mkdir+0x52>
    ef1c:	84 31       	cpi	r24, 0x14	; 20
    ef1e:	91 05       	cpc	r25, r1
    ef20:	40 f4       	brcc	.+16     	; 0xef32 <mkdir+0x46>
    ef22:	fc 01       	movw	r30, r24
    ef24:	ea 55       	subi	r30, 0x5A	; 90
    ef26:	f4 4f       	sbci	r31, 0xF4	; 244
    ef28:	80 81       	ld	r24, Z
    ef2a:	08 2e       	mov	r0, r24
    ef2c:	00 0c       	add	r0, r0
    ef2e:	99 0b       	sbc	r25, r25
    ef30:	02 c0       	rjmp	.+4      	; 0xef36 <mkdir+0x4a>
    ef32:	83 e2       	ldi	r24, 0x23	; 35
    ef34:	90 e0       	ldi	r25, 0x00	; 0
    ef36:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    ef3a:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    ef3e:	8f ef       	ldi	r24, 0xFF	; 255
    ef40:	9f ef       	ldi	r25, 0xFF	; 255
    ef42:	df 91       	pop	r29
    ef44:	cf 91       	pop	r28
    ef46:	08 95       	ret

0000ef48 <rename>:
    ef48:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    ef4c:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    ef50:	0e 94 91 66 	call	0xcd22	; 0xcd22 <f_rename>
    ef54:	00 97       	sbiw	r24, 0x00	; 0
    ef56:	a1 f0       	breq	.+40     	; 0xef80 <rename+0x38>
    ef58:	84 31       	cpi	r24, 0x14	; 20
    ef5a:	91 05       	cpc	r25, r1
    ef5c:	40 f4       	brcc	.+16     	; 0xef6e <rename+0x26>
    ef5e:	fc 01       	movw	r30, r24
    ef60:	ea 55       	subi	r30, 0x5A	; 90
    ef62:	f4 4f       	sbci	r31, 0xF4	; 244
    ef64:	80 81       	ld	r24, Z
    ef66:	08 2e       	mov	r0, r24
    ef68:	00 0c       	add	r0, r0
    ef6a:	99 0b       	sbc	r25, r25
    ef6c:	02 c0       	rjmp	.+4      	; 0xef72 <rename+0x2a>
    ef6e:	83 e2       	ldi	r24, 0x23	; 35
    ef70:	90 e0       	ldi	r25, 0x00	; 0
    ef72:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    ef76:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    ef7a:	8f ef       	ldi	r24, 0xFF	; 255
    ef7c:	9f ef       	ldi	r25, 0xFF	; 255
    ef7e:	08 95       	ret
    ef80:	80 e0       	ldi	r24, 0x00	; 0
    ef82:	90 e0       	ldi	r25, 0x00	; 0
    ef84:	08 95       	ret

0000ef86 <unlink>:
    ef86:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    ef8a:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    ef8e:	0e 94 fa 64 	call	0xc9f4	; 0xc9f4 <f_unlink>
    ef92:	00 97       	sbiw	r24, 0x00	; 0
    ef94:	a1 f0       	breq	.+40     	; 0xefbe <unlink+0x38>
    ef96:	84 31       	cpi	r24, 0x14	; 20
    ef98:	91 05       	cpc	r25, r1
    ef9a:	40 f4       	brcc	.+16     	; 0xefac <unlink+0x26>
    ef9c:	fc 01       	movw	r30, r24
    ef9e:	ea 55       	subi	r30, 0x5A	; 90
    efa0:	f4 4f       	sbci	r31, 0xF4	; 244
    efa2:	80 81       	ld	r24, Z
    efa4:	08 2e       	mov	r0, r24
    efa6:	00 0c       	add	r0, r0
    efa8:	99 0b       	sbc	r25, r25
    efaa:	02 c0       	rjmp	.+4      	; 0xefb0 <unlink+0x2a>
    efac:	83 e2       	ldi	r24, 0x23	; 35
    efae:	90 e0       	ldi	r25, 0x00	; 0
    efb0:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    efb4:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    efb8:	8f ef       	ldi	r24, 0xFF	; 255
    efba:	9f ef       	ldi	r25, 0xFF	; 255
    efbc:	08 95       	ret
    efbe:	80 e0       	ldi	r24, 0x00	; 0
    efc0:	90 e0       	ldi	r25, 0x00	; 0
    efc2:	08 95       	ret

0000efc4 <rmdir>:
    efc4:	e0 cf       	rjmp	.-64     	; 0xef86 <unlink>
    efc6:	08 95       	ret

0000efc8 <closedir>:
    efc8:	0e 94 83 63 	call	0xc706	; 0xc706 <f_closedir>
    efcc:	00 97       	sbiw	r24, 0x00	; 0
    efce:	a1 f0       	breq	.+40     	; 0xeff8 <closedir+0x30>
    efd0:	84 31       	cpi	r24, 0x14	; 20
    efd2:	91 05       	cpc	r25, r1
    efd4:	40 f4       	brcc	.+16     	; 0xefe6 <closedir+0x1e>
    efd6:	fc 01       	movw	r30, r24
    efd8:	ea 55       	subi	r30, 0x5A	; 90
    efda:	f4 4f       	sbci	r31, 0xF4	; 244
    efdc:	80 81       	ld	r24, Z
    efde:	08 2e       	mov	r0, r24
    efe0:	00 0c       	add	r0, r0
    efe2:	99 0b       	sbc	r25, r25
    efe4:	02 c0       	rjmp	.+4      	; 0xefea <closedir+0x22>
    efe6:	83 e2       	ldi	r24, 0x23	; 35
    efe8:	90 e0       	ldi	r25, 0x00	; 0
    efea:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    efee:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    eff2:	8f ef       	ldi	r24, 0xFF	; 255
    eff4:	9f ef       	ldi	r25, 0xFF	; 255
    eff6:	08 95       	ret
    eff8:	80 e0       	ldi	r24, 0x00	; 0
    effa:	90 e0       	ldi	r25, 0x00	; 0
    effc:	08 95       	ret

0000effe <opendir>:
    effe:	bc 01       	movw	r22, r24
    f000:	80 e3       	ldi	r24, 0x30	; 48
    f002:	99 e1       	ldi	r25, 0x19	; 25
    f004:	0e 94 12 63 	call	0xc624	; 0xc624 <f_opendir>
    f008:	00 97       	sbiw	r24, 0x00	; 0
    f00a:	a1 f0       	breq	.+40     	; 0xf034 <opendir+0x36>
    f00c:	84 31       	cpi	r24, 0x14	; 20
    f00e:	91 05       	cpc	r25, r1
    f010:	40 f4       	brcc	.+16     	; 0xf022 <opendir+0x24>
    f012:	fc 01       	movw	r30, r24
    f014:	ea 55       	subi	r30, 0x5A	; 90
    f016:	f4 4f       	sbci	r31, 0xF4	; 244
    f018:	80 81       	ld	r24, Z
    f01a:	08 2e       	mov	r0, r24
    f01c:	00 0c       	add	r0, r0
    f01e:	99 0b       	sbc	r25, r25
    f020:	02 c0       	rjmp	.+4      	; 0xf026 <opendir+0x28>
    f022:	83 e2       	ldi	r24, 0x23	; 35
    f024:	90 e0       	ldi	r25, 0x00	; 0
    f026:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f02a:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    f02e:	80 e0       	ldi	r24, 0x00	; 0
    f030:	90 e0       	ldi	r25, 0x00	; 0
    f032:	08 95       	ret
    f034:	80 e3       	ldi	r24, 0x30	; 48
    f036:	99 e1       	ldi	r25, 0x19	; 25
    f038:	08 95       	ret

0000f03a <readdir>:
    f03a:	a6 e1       	ldi	r26, 0x16	; 22
    f03c:	b1 e0       	ldi	r27, 0x01	; 1
    f03e:	e3 e2       	ldi	r30, 0x23	; 35
    f040:	f8 e7       	ldi	r31, 0x78	; 120
    f042:	0c 94 c9 e6 	jmp	0x1cd92	; 0x1cd92 <__prologue_saves__+0x1c>
    f046:	10 92 30 18 	sts	0x1830, r1	; 0x801830 <_de>
    f04a:	be 01       	movw	r22, r28
    f04c:	6f 5f       	subi	r22, 0xFF	; 255
    f04e:	7f 4f       	sbci	r23, 0xFF	; 255
    f050:	0e 94 98 63 	call	0xc730	; 0xc730 <f_readdir>
    f054:	00 97       	sbiw	r24, 0x00	; 0
    f056:	a1 f0       	breq	.+40     	; 0xf080 <readdir+0x46>
    f058:	84 31       	cpi	r24, 0x14	; 20
    f05a:	91 05       	cpc	r25, r1
    f05c:	40 f4       	brcc	.+16     	; 0xf06e <readdir+0x34>
    f05e:	fc 01       	movw	r30, r24
    f060:	ea 55       	subi	r30, 0x5A	; 90
    f062:	f4 4f       	sbci	r31, 0xF4	; 244
    f064:	80 81       	ld	r24, Z
    f066:	08 2e       	mov	r0, r24
    f068:	00 0c       	add	r0, r0
    f06a:	99 0b       	sbc	r25, r25
    f06c:	02 c0       	rjmp	.+4      	; 0xf072 <readdir+0x38>
    f06e:	83 e2       	ldi	r24, 0x23	; 35
    f070:	90 e0       	ldi	r25, 0x00	; 0
    f072:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f076:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    f07a:	80 e0       	ldi	r24, 0x00	; 0
    f07c:	90 e0       	ldi	r25, 0x00	; 0
    f07e:	16 c0       	rjmp	.+44     	; 0xf0ac <readdir+0x72>
    f080:	be 01       	movw	r22, r28
    f082:	69 5e       	subi	r22, 0xE9	; 233
    f084:	7f 4f       	sbci	r23, 0xFF	; 255
    f086:	fb 01       	movw	r30, r22
    f088:	01 90       	ld	r0, Z+
    f08a:	00 20       	and	r0, r0
    f08c:	e9 f7       	brne	.-6      	; 0xf088 <readdir+0x4e>
    f08e:	31 97       	sbiw	r30, 0x01	; 1
    f090:	8f 01       	movw	r16, r30
    f092:	06 1b       	sub	r16, r22
    f094:	17 0b       	sbc	r17, r23
    f096:	a8 01       	movw	r20, r16
    f098:	80 e3       	ldi	r24, 0x30	; 48
    f09a:	98 e1       	ldi	r25, 0x18	; 24
    f09c:	0e 94 37 31 	call	0x626e	; 0x626e <strncpy>
    f0a0:	f8 01       	movw	r30, r16
    f0a2:	e0 5d       	subi	r30, 0xD0	; 208
    f0a4:	f7 4e       	sbci	r31, 0xE7	; 231
    f0a6:	10 82       	st	Z, r1
    f0a8:	80 e3       	ldi	r24, 0x30	; 48
    f0aa:	98 e1       	ldi	r25, 0x18	; 24
    f0ac:	ca 5e       	subi	r28, 0xEA	; 234
    f0ae:	de 4f       	sbci	r29, 0xFE	; 254
    f0b0:	e4 e0       	ldi	r30, 0x04	; 4
    f0b2:	0c 94 e5 e6 	jmp	0x1cdca	; 0x1cdca <__epilogue_restores__+0x1c>

0000f0b6 <perror>:
    f0b6:	ad b7       	in	r26, 0x3d	; 61
    f0b8:	be b7       	in	r27, 0x3e	; 62
    f0ba:	17 97       	sbiw	r26, 0x07	; 7
    f0bc:	0f b6       	in	r0, 0x3f	; 63
    f0be:	f8 94       	cli
    f0c0:	be bf       	out	0x3e, r27	; 62
    f0c2:	0f be       	out	0x3f, r0	; 63
    f0c4:	ad bf       	out	0x3d, r26	; 61
    f0c6:	20 91 bd 1c 	lds	r18, 0x1CBD	; 0x801cbd <errno>
    f0ca:	30 91 be 1c 	lds	r19, 0x1CBE	; 0x801cbe <errno+0x1>
    f0ce:	23 32       	cpi	r18, 0x23	; 35
    f0d0:	31 05       	cpc	r19, r1
    f0d2:	40 f4       	brcc	.+16     	; 0xf0e4 <perror+0x2e>
    f0d4:	22 0f       	add	r18, r18
    f0d6:	33 1f       	adc	r19, r19
    f0d8:	f9 01       	movw	r30, r18
    f0da:	ea 5c       	subi	r30, 0xCA	; 202
    f0dc:	fe 4f       	sbci	r31, 0xFE	; 254
    f0de:	20 81       	ld	r18, Z
    f0e0:	31 81       	ldd	r19, Z+1	; 0x01
    f0e2:	04 c0       	rjmp	.+8      	; 0xf0ec <perror+0x36>
    f0e4:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <sys_errlist+0x46>
    f0e8:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <sys_errlist+0x47>
    f0ec:	00 97       	sbiw	r24, 0x00	; 0
    f0ee:	99 f0       	breq	.+38     	; 0xf116 <perror+0x60>
    f0f0:	fc 01       	movw	r30, r24
    f0f2:	40 81       	ld	r20, Z
    f0f4:	44 23       	and	r20, r20
    f0f6:	79 f0       	breq	.+30     	; 0xf116 <perror+0x60>
    f0f8:	ed b7       	in	r30, 0x3d	; 61
    f0fa:	fe b7       	in	r31, 0x3e	; 62
    f0fc:	37 83       	std	Z+7, r19	; 0x07
    f0fe:	26 83       	std	Z+6, r18	; 0x06
    f100:	95 83       	std	Z+5, r25	; 0x05
    f102:	84 83       	std	Z+4, r24	; 0x04
    f104:	82 ea       	ldi	r24, 0xA2	; 162
    f106:	9b e0       	ldi	r25, 0x0B	; 11
    f108:	a0 e0       	ldi	r26, 0x00	; 0
    f10a:	81 83       	std	Z+1, r24	; 0x01
    f10c:	92 83       	std	Z+2, r25	; 0x02
    f10e:	a3 83       	std	Z+3, r26	; 0x03
    f110:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    f114:	0c c0       	rjmp	.+24     	; 0xf12e <perror+0x78>
    f116:	ed b7       	in	r30, 0x3d	; 61
    f118:	fe b7       	in	r31, 0x3e	; 62
    f11a:	35 83       	std	Z+5, r19	; 0x05
    f11c:	24 83       	std	Z+4, r18	; 0x04
    f11e:	8e e9       	ldi	r24, 0x9E	; 158
    f120:	9b e0       	ldi	r25, 0x0B	; 11
    f122:	a0 e0       	ldi	r26, 0x00	; 0
    f124:	81 83       	std	Z+1, r24	; 0x01
    f126:	92 83       	std	Z+2, r25	; 0x02
    f128:	a3 83       	std	Z+3, r26	; 0x03
    f12a:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    f12e:	ad b7       	in	r26, 0x3d	; 61
    f130:	be b7       	in	r27, 0x3e	; 62
    f132:	17 96       	adiw	r26, 0x07	; 7
    f134:	0f b6       	in	r0, 0x3f	; 63
    f136:	f8 94       	cli
    f138:	be bf       	out	0x3e, r27	; 62
    f13a:	0f be       	out	0x3f, r0	; 63
    f13c:	ad bf       	out	0x3d, r26	; 61
    f13e:	08 95       	ret

0000f140 <fdevopen>:
    f140:	0f 93       	push	r16
    f142:	1f 93       	push	r17
    f144:	cf 93       	push	r28
    f146:	df 93       	push	r29
    f148:	00 97       	sbiw	r24, 0x00	; 0
    f14a:	31 f4       	brne	.+12     	; 0xf158 <fdevopen+0x18>
    f14c:	61 15       	cp	r22, r1
    f14e:	71 05       	cpc	r23, r1
    f150:	19 f4       	brne	.+6      	; 0xf158 <fdevopen+0x18>
    f152:	80 e0       	ldi	r24, 0x00	; 0
    f154:	90 e0       	ldi	r25, 0x00	; 0
    f156:	3a c0       	rjmp	.+116    	; 0xf1cc <fdevopen+0x8c>
    f158:	8b 01       	movw	r16, r22
    f15a:	ec 01       	movw	r28, r24
    f15c:	6e e0       	ldi	r22, 0x0E	; 14
    f15e:	70 e0       	ldi	r23, 0x00	; 0
    f160:	81 e0       	ldi	r24, 0x01	; 1
    f162:	90 e0       	ldi	r25, 0x00	; 0
    f164:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <safecalloc>
    f168:	fc 01       	movw	r30, r24
    f16a:	89 2b       	or	r24, r25
    f16c:	91 f3       	breq	.-28     	; 0xf152 <fdevopen+0x12>
    f16e:	80 e8       	ldi	r24, 0x80	; 128
    f170:	83 83       	std	Z+3, r24	; 0x03
    f172:	01 15       	cp	r16, r1
    f174:	11 05       	cpc	r17, r1
    f176:	71 f0       	breq	.+28     	; 0xf194 <fdevopen+0x54>
    f178:	13 87       	std	Z+11, r17	; 0x0b
    f17a:	02 87       	std	Z+10, r16	; 0x0a
    f17c:	81 e8       	ldi	r24, 0x81	; 129
    f17e:	83 83       	std	Z+3, r24	; 0x03
    f180:	80 91 bf 1c 	lds	r24, 0x1CBF	; 0x801cbf <__iob>
    f184:	90 91 c0 1c 	lds	r25, 0x1CC0	; 0x801cc0 <__iob+0x1>
    f188:	89 2b       	or	r24, r25
    f18a:	21 f4       	brne	.+8      	; 0xf194 <fdevopen+0x54>
    f18c:	f0 93 c0 1c 	sts	0x1CC0, r31	; 0x801cc0 <__iob+0x1>
    f190:	e0 93 bf 1c 	sts	0x1CBF, r30	; 0x801cbf <__iob>
    f194:	20 97       	sbiw	r28, 0x00	; 0
    f196:	c9 f0       	breq	.+50     	; 0xf1ca <fdevopen+0x8a>
    f198:	d1 87       	std	Z+9, r29	; 0x09
    f19a:	c0 87       	std	Z+8, r28	; 0x08
    f19c:	83 81       	ldd	r24, Z+3	; 0x03
    f19e:	82 60       	ori	r24, 0x02	; 2
    f1a0:	83 83       	std	Z+3, r24	; 0x03
    f1a2:	80 91 c1 1c 	lds	r24, 0x1CC1	; 0x801cc1 <__iob+0x2>
    f1a6:	90 91 c2 1c 	lds	r25, 0x1CC2	; 0x801cc2 <__iob+0x3>
    f1aa:	89 2b       	or	r24, r25
    f1ac:	21 f4       	brne	.+8      	; 0xf1b6 <fdevopen+0x76>
    f1ae:	f0 93 c2 1c 	sts	0x1CC2, r31	; 0x801cc2 <__iob+0x3>
    f1b2:	e0 93 c1 1c 	sts	0x1CC1, r30	; 0x801cc1 <__iob+0x2>
    f1b6:	80 91 c3 1c 	lds	r24, 0x1CC3	; 0x801cc3 <__iob+0x4>
    f1ba:	90 91 c4 1c 	lds	r25, 0x1CC4	; 0x801cc4 <__iob+0x5>
    f1be:	89 2b       	or	r24, r25
    f1c0:	21 f4       	brne	.+8      	; 0xf1ca <fdevopen+0x8a>
    f1c2:	f0 93 c4 1c 	sts	0x1CC4, r31	; 0x801cc4 <__iob+0x5>
    f1c6:	e0 93 c3 1c 	sts	0x1CC3, r30	; 0x801cc3 <__iob+0x4>
    f1ca:	cf 01       	movw	r24, r30
    f1cc:	df 91       	pop	r29
    f1ce:	cf 91       	pop	r28
    f1d0:	1f 91       	pop	r17
    f1d2:	0f 91       	pop	r16
    f1d4:	08 95       	ret

0000f1d6 <fat_time_to_unix>:
    f1d6:	a6 e1       	ldi	r26, 0x16	; 22
    f1d8:	b0 e0       	ldi	r27, 0x00	; 0
    f1da:	e1 ef       	ldi	r30, 0xF1	; 241
    f1dc:	f8 e7       	ldi	r31, 0x78	; 120
    f1de:	0c 94 cb e6 	jmp	0x1cd96	; 0x1cd96 <__prologue_saves__+0x20>
    f1e2:	fe 01       	movw	r30, r28
    f1e4:	31 96       	adiw	r30, 0x01	; 1
    f1e6:	26 e1       	ldi	r18, 0x16	; 22
    f1e8:	df 01       	movw	r26, r30
    f1ea:	1d 92       	st	X+, r1
    f1ec:	2a 95       	dec	r18
    f1ee:	e9 f7       	brne	.-6      	; 0xf1ea <fat_time_to_unix+0x14>
    f1f0:	9b 01       	movw	r18, r22
    f1f2:	22 0f       	add	r18, r18
    f1f4:	33 1f       	adc	r19, r19
    f1f6:	2e 73       	andi	r18, 0x3E	; 62
    f1f8:	33 27       	eor	r19, r19
    f1fa:	3a 83       	std	Y+2, r19	; 0x02
    f1fc:	29 83       	std	Y+1, r18	; 0x01
    f1fe:	9b 01       	movw	r18, r22
    f200:	55 e0       	ldi	r21, 0x05	; 5
    f202:	36 95       	lsr	r19
    f204:	27 95       	ror	r18
    f206:	5a 95       	dec	r21
    f208:	e1 f7       	brne	.-8      	; 0xf202 <fat_time_to_unix+0x2c>
    f20a:	2f 73       	andi	r18, 0x3F	; 63
    f20c:	33 27       	eor	r19, r19
    f20e:	3c 83       	std	Y+4, r19	; 0x04
    f210:	2b 83       	std	Y+3, r18	; 0x03
    f212:	27 2f       	mov	r18, r23
    f214:	26 95       	lsr	r18
    f216:	26 95       	lsr	r18
    f218:	26 95       	lsr	r18
    f21a:	2d 83       	std	Y+5, r18	; 0x05
    f21c:	1e 82       	std	Y+6, r1	; 0x06
    f21e:	9c 01       	movw	r18, r24
    f220:	2f 71       	andi	r18, 0x1F	; 31
    f222:	33 27       	eor	r19, r19
    f224:	38 87       	std	Y+8, r19	; 0x08
    f226:	2f 83       	std	Y+7, r18	; 0x07
    f228:	9c 01       	movw	r18, r24
    f22a:	65 e0       	ldi	r22, 0x05	; 5
    f22c:	36 95       	lsr	r19
    f22e:	27 95       	ror	r18
    f230:	6a 95       	dec	r22
    f232:	e1 f7       	brne	.-8      	; 0xf22c <fat_time_to_unix+0x56>
    f234:	2f 70       	andi	r18, 0x0F	; 15
    f236:	33 27       	eor	r19, r19
    f238:	21 50       	subi	r18, 0x01	; 1
    f23a:	31 09       	sbc	r19, r1
    f23c:	3a 87       	std	Y+10, r19	; 0x0a
    f23e:	29 87       	std	Y+9, r18	; 0x09
    f240:	9c 01       	movw	r18, r24
    f242:	23 2f       	mov	r18, r19
    f244:	33 27       	eor	r19, r19
    f246:	26 95       	lsr	r18
    f248:	20 5b       	subi	r18, 0xB0	; 176
    f24a:	3f 4f       	sbci	r19, 0xFF	; 255
    f24c:	3c 87       	std	Y+12, r19	; 0x0c
    f24e:	2b 87       	std	Y+11, r18	; 0x0b
    f250:	cf 01       	movw	r24, r30
    f252:	0e 94 52 3a 	call	0x74a4	; 0x74a4 <timegm>
    f256:	66 96       	adiw	r28, 0x16	; 22
    f258:	e2 e0       	ldi	r30, 0x02	; 2
    f25a:	0c 94 e7 e6 	jmp	0x1cdce	; 0x1cdce <__epilogue_restores__+0x20>

0000f25e <stat>:
    f25e:	a6 e1       	ldi	r26, 0x16	; 22
    f260:	b1 e0       	ldi	r27, 0x01	; 1
    f262:	e5 e3       	ldi	r30, 0x35	; 53
    f264:	f9 e7       	ldi	r31, 0x79	; 121
    f266:	0c 94 c5 e6 	jmp	0x1cd8a	; 0x1cd8a <__prologue_saves__+0x14>
    f26a:	6c 01       	movw	r12, r24
    f26c:	8b 01       	movw	r16, r22
    f26e:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    f272:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    f276:	6c ef       	ldi	r22, 0xFC	; 252
    f278:	78 e0       	ldi	r23, 0x08	; 8
    f27a:	0e 94 24 32 	call	0x6448	; 0x6448 <MATCH>
    f27e:	89 2b       	or	r24, r25
    f280:	01 f1       	breq	.+64     	; 0xf2c2 <stat+0x64>
    f282:	f8 01       	movw	r30, r16
    f284:	14 a2       	std	Z+36, r1	; 0x24
    f286:	15 a2       	std	Z+37, r1	; 0x25
    f288:	16 a2       	std	Z+38, r1	; 0x26
    f28a:	17 a2       	std	Z+39, r1	; 0x27
    f28c:	10 a6       	std	Z+40, r1	; 0x28
    f28e:	11 a6       	std	Z+41, r1	; 0x29
    f290:	12 a6       	std	Z+42, r1	; 0x2a
    f292:	13 a6       	std	Z+43, r1	; 0x2b
    f294:	14 a6       	std	Z+44, r1	; 0x2c
    f296:	15 a6       	std	Z+45, r1	; 0x2d
    f298:	16 a6       	std	Z+46, r1	; 0x2e
    f29a:	17 a6       	std	Z+47, r1	; 0x2f
    f29c:	11 8a       	std	Z+17, r1	; 0x11
    f29e:	10 8a       	std	Z+16, r1	; 0x10
    f2a0:	13 8a       	std	Z+19, r1	; 0x13
    f2a2:	12 8a       	std	Z+18, r1	; 0x12
    f2a4:	10 8e       	std	Z+24, r1	; 0x18
    f2a6:	11 8e       	std	Z+25, r1	; 0x19
    f2a8:	12 8e       	std	Z+26, r1	; 0x1a
    f2aa:	13 8e       	std	Z+27, r1	; 0x1b
    f2ac:	80 e0       	ldi	r24, 0x00	; 0
    f2ae:	90 e4       	ldi	r25, 0x40	; 64
    f2b0:	a0 e0       	ldi	r26, 0x00	; 0
    f2b2:	b0 e0       	ldi	r27, 0x00	; 0
    f2b4:	80 87       	std	Z+8, r24	; 0x08
    f2b6:	91 87       	std	Z+9, r25	; 0x09
    f2b8:	a2 87       	std	Z+10, r26	; 0x0a
    f2ba:	b3 87       	std	Z+11, r27	; 0x0b
    f2bc:	e1 2c       	mov	r14, r1
    f2be:	f1 2c       	mov	r15, r1
    f2c0:	62 c0       	rjmp	.+196    	; 0xf386 <stat+0x128>
    f2c2:	66 ea       	ldi	r22, 0xA6	; 166
    f2c4:	78 e0       	ldi	r23, 0x08	; 8
    f2c6:	c6 01       	movw	r24, r12
    f2c8:	0e 94 24 32 	call	0x6448	; 0x6448 <MATCH>
    f2cc:	89 2b       	or	r24, r25
    f2ce:	c9 f6       	brne	.-78     	; 0xf282 <stat+0x24>
    f2d0:	61 ef       	ldi	r22, 0xF1	; 241
    f2d2:	72 e1       	ldi	r23, 0x12	; 18
    f2d4:	c6 01       	movw	r24, r12
    f2d6:	0e 94 24 32 	call	0x6448	; 0x6448 <MATCH>
    f2da:	7c 01       	movw	r14, r24
    f2dc:	89 2b       	or	r24, r25
    f2de:	89 f6       	brne	.-94     	; 0xf282 <stat+0x24>
    f2e0:	be 01       	movw	r22, r28
    f2e2:	6f 5f       	subi	r22, 0xFF	; 255
    f2e4:	7f 4f       	sbci	r23, 0xFF	; 255
    f2e6:	c6 01       	movw	r24, r12
    f2e8:	0e 94 dc 63 	call	0xc7b8	; 0xc7b8 <f_stat>
    f2ec:	00 97       	sbiw	r24, 0x00	; 0
    f2ee:	a9 f0       	breq	.+42     	; 0xf31a <stat+0xbc>
    f2f0:	84 31       	cpi	r24, 0x14	; 20
    f2f2:	91 05       	cpc	r25, r1
    f2f4:	40 f4       	brcc	.+16     	; 0xf306 <stat+0xa8>
    f2f6:	fc 01       	movw	r30, r24
    f2f8:	ea 55       	subi	r30, 0x5A	; 90
    f2fa:	f4 4f       	sbci	r31, 0xF4	; 244
    f2fc:	80 81       	ld	r24, Z
    f2fe:	08 2e       	mov	r0, r24
    f300:	00 0c       	add	r0, r0
    f302:	99 0b       	sbc	r25, r25
    f304:	02 c0       	rjmp	.+4      	; 0xf30a <stat+0xac>
    f306:	83 e2       	ldi	r24, 0x23	; 35
    f308:	90 e0       	ldi	r25, 0x00	; 0
    f30a:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f30e:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    f312:	ee 24       	eor	r14, r14
    f314:	ea 94       	dec	r14
    f316:	fe 2c       	mov	r15, r14
    f318:	36 c0       	rjmp	.+108    	; 0xf386 <stat+0x128>
    f31a:	89 81       	ldd	r24, Y+1	; 0x01
    f31c:	9a 81       	ldd	r25, Y+2	; 0x02
    f31e:	ab 81       	ldd	r26, Y+3	; 0x03
    f320:	bc 81       	ldd	r27, Y+4	; 0x04
    f322:	f8 01       	movw	r30, r16
    f324:	80 8f       	std	Z+24, r24	; 0x18
    f326:	91 8f       	std	Z+25, r25	; 0x19
    f328:	a2 8f       	std	Z+26, r26	; 0x1a
    f32a:	b3 8f       	std	Z+27, r27	; 0x1b
    f32c:	6f 81       	ldd	r22, Y+7	; 0x07
    f32e:	78 85       	ldd	r23, Y+8	; 0x08
    f330:	8d 81       	ldd	r24, Y+5	; 0x05
    f332:	9e 81       	ldd	r25, Y+6	; 0x06
    f334:	50 df       	rcall	.-352    	; 0xf1d6 <fat_time_to_unix>
    f336:	f8 01       	movw	r30, r16
    f338:	64 a3       	std	Z+36, r22	; 0x24
    f33a:	75 a3       	std	Z+37, r23	; 0x25
    f33c:	86 a3       	std	Z+38, r24	; 0x26
    f33e:	97 a3       	std	Z+39, r25	; 0x27
    f340:	60 a7       	std	Z+40, r22	; 0x28
    f342:	71 a7       	std	Z+41, r23	; 0x29
    f344:	82 a7       	std	Z+42, r24	; 0x2a
    f346:	93 a7       	std	Z+43, r25	; 0x2b
    f348:	64 a7       	std	Z+44, r22	; 0x2c
    f34a:	75 a7       	std	Z+45, r23	; 0x2d
    f34c:	86 a7       	std	Z+46, r24	; 0x2e
    f34e:	97 a7       	std	Z+47, r25	; 0x2f
    f350:	29 85       	ldd	r18, Y+9	; 0x09
    f352:	20 fd       	sbrc	r18, 0
    f354:	03 c0       	rjmp	.+6      	; 0xf35c <stat+0xfe>
    f356:	8f ef       	ldi	r24, 0xFF	; 255
    f358:	91 e0       	ldi	r25, 0x01	; 1
    f35a:	02 c0       	rjmp	.+4      	; 0xf360 <stat+0x102>
    f35c:	8d e6       	ldi	r24, 0x6D	; 109
    f35e:	91 e0       	ldi	r25, 0x01	; 1
    f360:	48 ee       	ldi	r20, 0xE8	; 232
    f362:	53 e0       	ldi	r21, 0x03	; 3
    f364:	f8 01       	movw	r30, r16
    f366:	51 8b       	std	Z+17, r21	; 0x11
    f368:	40 8b       	std	Z+16, r20	; 0x10
    f36a:	53 8b       	std	Z+19, r21	; 0x13
    f36c:	42 8b       	std	Z+18, r20	; 0x12
    f36e:	24 ff       	sbrs	r18, 4
    f370:	02 c0       	rjmp	.+4      	; 0xf376 <stat+0x118>
    f372:	90 64       	ori	r25, 0x40	; 64
    f374:	01 c0       	rjmp	.+2      	; 0xf378 <stat+0x11a>
    f376:	90 68       	ori	r25, 0x80	; 128
    f378:	a0 e0       	ldi	r26, 0x00	; 0
    f37a:	b0 e0       	ldi	r27, 0x00	; 0
    f37c:	f8 01       	movw	r30, r16
    f37e:	80 87       	std	Z+8, r24	; 0x08
    f380:	91 87       	std	Z+9, r25	; 0x09
    f382:	a2 87       	std	Z+10, r26	; 0x0a
    f384:	b3 87       	std	Z+11, r27	; 0x0b
    f386:	c7 01       	movw	r24, r14
    f388:	ca 5e       	subi	r28, 0xEA	; 234
    f38a:	de 4f       	sbci	r29, 0xFE	; 254
    f38c:	e8 e0       	ldi	r30, 0x08	; 8
    f38e:	0c 94 e1 e6 	jmp	0x1cdc2	; 0x1cdc2 <__epilogue_restores__+0x14>

0000f392 <unix_time_to_fat>:
    f392:	a4 e0       	ldi	r26, 0x04	; 4
    f394:	b0 e0       	ldi	r27, 0x00	; 0
    f396:	ef ec       	ldi	r30, 0xCF	; 207
    f398:	f9 e7       	ldi	r31, 0x79	; 121
    f39a:	0c 94 c7 e6 	jmp	0x1cd8e	; 0x1cd8e <__prologue_saves__+0x18>
    f39e:	69 83       	std	Y+1, r22	; 0x01
    f3a0:	7a 83       	std	Y+2, r23	; 0x02
    f3a2:	8b 83       	std	Y+3, r24	; 0x03
    f3a4:	9c 83       	std	Y+4, r25	; 0x04
    f3a6:	7a 01       	movw	r14, r20
    f3a8:	89 01       	movw	r16, r18
    f3aa:	ce 01       	movw	r24, r28
    f3ac:	01 96       	adiw	r24, 0x01	; 1
    f3ae:	0e 94 93 37 	call	0x6f26	; 0x6f26 <gmtime>
    f3b2:	fc 01       	movw	r30, r24
    f3b4:	22 85       	ldd	r18, Z+10	; 0x0a
    f3b6:	33 85       	ldd	r19, Z+11	; 0x0b
    f3b8:	20 55       	subi	r18, 0x50	; 80
    f3ba:	31 09       	sbc	r19, r1
    f3bc:	c9 01       	movw	r24, r18
    f3be:	98 2f       	mov	r25, r24
    f3c0:	88 27       	eor	r24, r24
    f3c2:	99 0f       	add	r25, r25
    f3c4:	20 85       	ldd	r18, Z+8	; 0x08
    f3c6:	31 85       	ldd	r19, Z+9	; 0x09
    f3c8:	2f 5f       	subi	r18, 0xFF	; 255
    f3ca:	3f 4f       	sbci	r19, 0xFF	; 255
    f3cc:	45 e0       	ldi	r20, 0x05	; 5
    f3ce:	22 0f       	add	r18, r18
    f3d0:	33 1f       	adc	r19, r19
    f3d2:	4a 95       	dec	r20
    f3d4:	e1 f7       	brne	.-8      	; 0xf3ce <unix_time_to_fat+0x3c>
    f3d6:	28 2b       	or	r18, r24
    f3d8:	39 2b       	or	r19, r25
    f3da:	86 81       	ldd	r24, Z+6	; 0x06
    f3dc:	97 81       	ldd	r25, Z+7	; 0x07
    f3de:	28 2b       	or	r18, r24
    f3e0:	39 2b       	or	r19, r25
    f3e2:	d7 01       	movw	r26, r14
    f3e4:	2d 93       	st	X+, r18
    f3e6:	3c 93       	st	X, r19
    f3e8:	84 81       	ldd	r24, Z+4	; 0x04
    f3ea:	20 e0       	ldi	r18, 0x00	; 0
    f3ec:	30 e0       	ldi	r19, 0x00	; 0
    f3ee:	38 2f       	mov	r19, r24
    f3f0:	33 0f       	add	r19, r19
    f3f2:	33 0f       	add	r19, r19
    f3f4:	33 0f       	add	r19, r19
    f3f6:	82 81       	ldd	r24, Z+2	; 0x02
    f3f8:	93 81       	ldd	r25, Z+3	; 0x03
    f3fa:	55 e0       	ldi	r21, 0x05	; 5
    f3fc:	88 0f       	add	r24, r24
    f3fe:	99 1f       	adc	r25, r25
    f400:	5a 95       	dec	r21
    f402:	e1 f7       	brne	.-8      	; 0xf3fc <unix_time_to_fat+0x6a>
    f404:	82 2b       	or	r24, r18
    f406:	93 2b       	or	r25, r19
    f408:	20 81       	ld	r18, Z
    f40a:	31 81       	ldd	r19, Z+1	; 0x01
    f40c:	36 95       	lsr	r19
    f40e:	27 95       	ror	r18
    f410:	82 2b       	or	r24, r18
    f412:	93 2b       	or	r25, r19
    f414:	f8 01       	movw	r30, r16
    f416:	91 83       	std	Z+1, r25	; 0x01
    f418:	80 83       	st	Z, r24
    f41a:	24 96       	adiw	r28, 0x04	; 4
    f41c:	e6 e0       	ldi	r30, 0x06	; 6
    f41e:	0c 94 e3 e6 	jmp	0x1cdc6	; 0x1cdc6 <__epilogue_restores__+0x18>

0000f422 <utime>:
    f422:	aa e1       	ldi	r26, 0x1A	; 26
    f424:	b1 e0       	ldi	r27, 0x01	; 1
    f426:	e7 e1       	ldi	r30, 0x17	; 23
    f428:	fa e7       	ldi	r31, 0x7A	; 122
    f42a:	0c 94 c9 e6 	jmp	0x1cd92	; 0x1cd92 <__prologue_saves__+0x1c>
    f42e:	8c 01       	movw	r16, r24
    f430:	61 15       	cp	r22, r1
    f432:	71 05       	cpc	r23, r1
    f434:	31 f0       	breq	.+12     	; 0xf442 <utime+0x20>
    f436:	fb 01       	movw	r30, r22
    f438:	64 81       	ldd	r22, Z+4	; 0x04
    f43a:	75 81       	ldd	r23, Z+5	; 0x05
    f43c:	86 81       	ldd	r24, Z+6	; 0x06
    f43e:	97 81       	ldd	r25, Z+7	; 0x07
    f440:	04 c0       	rjmp	.+8      	; 0xf44a <utime+0x28>
    f442:	80 e0       	ldi	r24, 0x00	; 0
    f444:	90 e0       	ldi	r25, 0x00	; 0
    f446:	0e 94 ed 37 	call	0x6fda	; 0x6fda <time>
    f44a:	9e 01       	movw	r18, r28
    f44c:	29 5e       	subi	r18, 0xE9	; 233
    f44e:	3e 4f       	sbci	r19, 0xFE	; 254
    f450:	ae 01       	movw	r20, r28
    f452:	47 5e       	subi	r20, 0xE7	; 231
    f454:	5e 4f       	sbci	r21, 0xFE	; 254
    f456:	9d df       	rcall	.-198    	; 0xf392 <unix_time_to_fat>
    f458:	c7 5e       	subi	r28, 0xE7	; 231
    f45a:	de 4f       	sbci	r29, 0xFE	; 254
    f45c:	88 81       	ld	r24, Y
    f45e:	99 81       	ldd	r25, Y+1	; 0x01
    f460:	c9 51       	subi	r28, 0x19	; 25
    f462:	d1 40       	sbci	r29, 0x01	; 1
    f464:	9e 83       	std	Y+6, r25	; 0x06
    f466:	8d 83       	std	Y+5, r24	; 0x05
    f468:	c9 5e       	subi	r28, 0xE9	; 233
    f46a:	de 4f       	sbci	r29, 0xFE	; 254
    f46c:	88 81       	ld	r24, Y
    f46e:	99 81       	ldd	r25, Y+1	; 0x01
    f470:	c7 51       	subi	r28, 0x17	; 23
    f472:	d1 40       	sbci	r29, 0x01	; 1
    f474:	98 87       	std	Y+8, r25	; 0x08
    f476:	8f 83       	std	Y+7, r24	; 0x07
    f478:	be 01       	movw	r22, r28
    f47a:	6f 5f       	subi	r22, 0xFF	; 255
    f47c:	7f 4f       	sbci	r23, 0xFF	; 255
    f47e:	c8 01       	movw	r24, r16
    f480:	0e 94 f3 67 	call	0xcfe6	; 0xcfe6 <f_utime>
    f484:	84 31       	cpi	r24, 0x14	; 20
    f486:	91 05       	cpc	r25, r1
    f488:	40 f4       	brcc	.+16     	; 0xf49a <utime+0x78>
    f48a:	fc 01       	movw	r30, r24
    f48c:	ea 55       	subi	r30, 0x5A	; 90
    f48e:	f4 4f       	sbci	r31, 0xF4	; 244
    f490:	80 81       	ld	r24, Z
    f492:	08 2e       	mov	r0, r24
    f494:	00 0c       	add	r0, r0
    f496:	99 0b       	sbc	r25, r25
    f498:	02 c0       	rjmp	.+4      	; 0xf49e <utime+0x7c>
    f49a:	83 e2       	ldi	r24, 0x23	; 35
    f49c:	90 e0       	ldi	r25, 0x00	; 0
    f49e:	c6 5e       	subi	r28, 0xE6	; 230
    f4a0:	de 4f       	sbci	r29, 0xFE	; 254
    f4a2:	e4 e0       	ldi	r30, 0x04	; 4
    f4a4:	0c 94 e5 e6 	jmp	0x1cdca	; 0x1cdca <__epilogue_restores__+0x1c>

0000f4a8 <fileno_to_fatfs>:
    f4a8:	83 30       	cpi	r24, 0x03	; 3
    f4aa:	91 05       	cpc	r25, r1
    f4ac:	48 f4       	brcc	.+18     	; 0xf4c0 <fileno_to_fatfs+0x18>
    f4ae:	89 e0       	ldi	r24, 0x09	; 9
    f4b0:	90 e0       	ldi	r25, 0x00	; 0
    f4b2:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f4b6:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    f4ba:	80 e0       	ldi	r24, 0x00	; 0
    f4bc:	90 e0       	ldi	r25, 0x00	; 0
    f4be:	08 95       	ret
    f4c0:	60 dc       	rcall	.-1856   	; 0xed82 <fileno_to_stream>
    f4c2:	00 97       	sbiw	r24, 0x00	; 0
    f4c4:	d1 f3       	breq	.-12     	; 0xf4ba <fileno_to_fatfs+0x12>
    f4c6:	fc 01       	movw	r30, r24
    f4c8:	84 85       	ldd	r24, Z+12	; 0x0c
    f4ca:	95 85       	ldd	r25, Z+13	; 0x0d
    f4cc:	00 97       	sbiw	r24, 0x00	; 0
    f4ce:	79 f3       	breq	.-34     	; 0xf4ae <fileno_to_fatfs+0x6>
    f4d0:	08 95       	ret

0000f4d2 <ftell>:
    f4d2:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    f4d6:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    f4da:	37 dc       	rcall	.-1938   	; 0xed4a <fileno>
    f4dc:	83 30       	cpi	r24, 0x03	; 3
    f4de:	91 05       	cpc	r25, r1
    f4e0:	48 f0       	brcs	.+18     	; 0xf4f4 <ftell+0x22>
    f4e2:	e2 df       	rcall	.-60     	; 0xf4a8 <fileno_to_fatfs>
    f4e4:	00 97       	sbiw	r24, 0x00	; 0
    f4e6:	51 f4       	brne	.+20     	; 0xf4fc <ftell+0x2a>
    f4e8:	89 e0       	ldi	r24, 0x09	; 9
    f4ea:	90 e0       	ldi	r25, 0x00	; 0
    f4ec:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f4f0:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    f4f4:	6f ef       	ldi	r22, 0xFF	; 255
    f4f6:	7f ef       	ldi	r23, 0xFF	; 255
    f4f8:	cb 01       	movw	r24, r22
    f4fa:	08 95       	ret
    f4fc:	fc 01       	movw	r30, r24
    f4fe:	60 89       	ldd	r22, Z+16	; 0x10
    f500:	71 89       	ldd	r23, Z+17	; 0x11
    f502:	82 89       	ldd	r24, Z+18	; 0x12
    f504:	93 89       	ldd	r25, Z+19	; 0x13
    f506:	08 95       	ret

0000f508 <lseek>:
    f508:	a3 e0       	ldi	r26, 0x03	; 3
    f50a:	b0 e0       	ldi	r27, 0x00	; 0
    f50c:	ea e8       	ldi	r30, 0x8A	; 138
    f50e:	fa e7       	ldi	r31, 0x7A	; 122
    f510:	0c 94 c3 e6 	jmp	0x1cd86	; 0x1cd86 <__prologue_saves__+0x10>
    f514:	5c 01       	movw	r10, r24
    f516:	6a 01       	movw	r12, r20
    f518:	7b 01       	movw	r14, r22
    f51a:	89 01       	movw	r16, r18
    f51c:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    f520:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    f524:	c1 df       	rcall	.-126    	; 0xf4a8 <fileno_to_fatfs>
    f526:	ec 01       	movw	r28, r24
    f528:	89 2b       	or	r24, r25
    f52a:	19 f4       	brne	.+6      	; 0xf532 <lseek+0x2a>
    f52c:	88 e1       	ldi	r24, 0x18	; 24
    f52e:	90 e0       	ldi	r25, 0x00	; 0
    f530:	26 c0       	rjmp	.+76     	; 0xf57e <lseek+0x76>
    f532:	83 e0       	ldi	r24, 0x03	; 3
    f534:	a8 16       	cp	r10, r24
    f536:	b1 04       	cpc	r11, r1
    f538:	d0 f1       	brcs	.+116    	; 0xf5ae <lseek+0xa6>
    f53a:	c5 01       	movw	r24, r10
    f53c:	22 dc       	rcall	.-1980   	; 0xed82 <fileno_to_stream>
    f53e:	fc 01       	movw	r30, r24
    f540:	93 81       	ldd	r25, Z+3	; 0x03
    f542:	90 64       	ori	r25, 0x40	; 64
    f544:	93 83       	std	Z+3, r25	; 0x03
    f546:	02 30       	cpi	r16, 0x02	; 2
    f548:	11 05       	cpc	r17, r1
    f54a:	a9 f5       	brne	.+106    	; 0xf5b6 <lseek+0xae>
    f54c:	8a 85       	ldd	r24, Y+10	; 0x0a
    f54e:	9b 85       	ldd	r25, Y+11	; 0x0b
    f550:	ac 85       	ldd	r26, Y+12	; 0x0c
    f552:	bd 85       	ldd	r27, Y+13	; 0x0d
    f554:	c8 0e       	add	r12, r24
    f556:	d9 1e       	adc	r13, r25
    f558:	ea 1e       	adc	r14, r26
    f55a:	fb 1e       	adc	r15, r27
    f55c:	b7 01       	movw	r22, r14
    f55e:	a6 01       	movw	r20, r12
    f560:	ce 01       	movw	r24, r28
    f562:	0e 94 57 60 	call	0xc0ae	; 0xc0ae <f_lseek>
    f566:	00 97       	sbiw	r24, 0x00	; 0
    f568:	79 f0       	breq	.+30     	; 0xf588 <lseek+0x80>
    f56a:	84 31       	cpi	r24, 0x14	; 20
    f56c:	91 05       	cpc	r25, r1
    f56e:	58 f5       	brcc	.+86     	; 0xf5c6 <lseek+0xbe>
    f570:	fc 01       	movw	r30, r24
    f572:	ea 55       	subi	r30, 0x5A	; 90
    f574:	f4 4f       	sbci	r31, 0xF4	; 244
    f576:	80 81       	ld	r24, Z
    f578:	08 2e       	mov	r0, r24
    f57a:	00 0c       	add	r0, r0
    f57c:	99 0b       	sbc	r25, r25
    f57e:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f582:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    f586:	13 c0       	rjmp	.+38     	; 0xf5ae <lseek+0xa6>
    f588:	68 89       	ldd	r22, Y+16	; 0x10
    f58a:	79 89       	ldd	r23, Y+17	; 0x11
    f58c:	8a 89       	ldd	r24, Y+18	; 0x12
    f58e:	9b 89       	ldd	r25, Y+19	; 0x13
    f590:	c6 16       	cp	r12, r22
    f592:	d7 06       	cpc	r13, r23
    f594:	e8 06       	cpc	r14, r24
    f596:	f9 06       	cpc	r15, r25
    f598:	c9 f0       	breq	.+50     	; 0xf5cc <lseek+0xc4>
    f59a:	8a ea       	ldi	r24, 0xAA	; 170
    f59c:	9b e0       	ldi	r25, 0x0B	; 11
    f59e:	a0 e0       	ldi	r26, 0x00	; 0
    f5a0:	ed b7       	in	r30, 0x3d	; 61
    f5a2:	fe b7       	in	r31, 0x3e	; 62
    f5a4:	81 83       	std	Z+1, r24	; 0x01
    f5a6:	92 83       	std	Z+2, r25	; 0x02
    f5a8:	a3 83       	std	Z+3, r26	; 0x03
    f5aa:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    f5ae:	6f ef       	ldi	r22, 0xFF	; 255
    f5b0:	7f ef       	ldi	r23, 0xFF	; 255
    f5b2:	cb 01       	movw	r24, r22
    f5b4:	0b c0       	rjmp	.+22     	; 0xf5cc <lseek+0xc4>
    f5b6:	01 30       	cpi	r16, 0x01	; 1
    f5b8:	11 05       	cpc	r17, r1
    f5ba:	81 f6       	brne	.-96     	; 0xf55c <lseek+0x54>
    f5bc:	88 89       	ldd	r24, Y+16	; 0x10
    f5be:	99 89       	ldd	r25, Y+17	; 0x11
    f5c0:	aa 89       	ldd	r26, Y+18	; 0x12
    f5c2:	bb 89       	ldd	r27, Y+19	; 0x13
    f5c4:	c7 cf       	rjmp	.-114    	; 0xf554 <lseek+0x4c>
    f5c6:	83 e2       	ldi	r24, 0x23	; 35
    f5c8:	90 e0       	ldi	r25, 0x00	; 0
    f5ca:	d9 cf       	rjmp	.-78     	; 0xf57e <lseek+0x76>
    f5cc:	cd b7       	in	r28, 0x3d	; 61
    f5ce:	de b7       	in	r29, 0x3e	; 62
    f5d0:	23 96       	adiw	r28, 0x03	; 3
    f5d2:	ea e0       	ldi	r30, 0x0A	; 10
    f5d4:	0c 94 df e6 	jmp	0x1cdbe	; 0x1cdbe <__epilogue_restores__+0x10>

0000f5d8 <fseek>:
    f5d8:	cf 92       	push	r12
    f5da:	df 92       	push	r13
    f5dc:	ef 92       	push	r14
    f5de:	ff 92       	push	r15
    f5e0:	cf 93       	push	r28
    f5e2:	df 93       	push	r29
    f5e4:	6a 01       	movw	r12, r20
    f5e6:	7b 01       	movw	r14, r22
    f5e8:	e9 01       	movw	r28, r18
    f5ea:	af db       	rcall	.-2210   	; 0xed4a <fileno>
    f5ec:	97 fd       	sbrc	r25, 7
    f5ee:	12 c0       	rjmp	.+36     	; 0xf614 <fseek+0x3c>
    f5f0:	9e 01       	movw	r18, r28
    f5f2:	b7 01       	movw	r22, r14
    f5f4:	a6 01       	movw	r20, r12
    f5f6:	88 df       	rcall	.-240    	; 0xf508 <lseek>
    f5f8:	21 e0       	ldi	r18, 0x01	; 1
    f5fa:	30 e0       	ldi	r19, 0x00	; 0
    f5fc:	6f 3f       	cpi	r22, 0xFF	; 255
    f5fe:	7f 4f       	sbci	r23, 0xFF	; 255
    f600:	8f 4f       	sbci	r24, 0xFF	; 255
    f602:	9f 4f       	sbci	r25, 0xFF	; 255
    f604:	11 f0       	breq	.+4      	; 0xf60a <fseek+0x32>
    f606:	20 e0       	ldi	r18, 0x00	; 0
    f608:	30 e0       	ldi	r19, 0x00	; 0
    f60a:	88 27       	eor	r24, r24
    f60c:	99 27       	eor	r25, r25
    f60e:	82 1b       	sub	r24, r18
    f610:	93 0b       	sbc	r25, r19
    f612:	02 c0       	rjmp	.+4      	; 0xf618 <fseek+0x40>
    f614:	8f ef       	ldi	r24, 0xFF	; 255
    f616:	9f ef       	ldi	r25, 0xFF	; 255
    f618:	df 91       	pop	r29
    f61a:	cf 91       	pop	r28
    f61c:	ff 90       	pop	r15
    f61e:	ef 90       	pop	r14
    f620:	df 90       	pop	r13
    f622:	cf 90       	pop	r12
    f624:	08 95       	ret

0000f626 <read>:
///
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t read(int fd, const void *buf, size_t count)
{
    f626:	a2 e0       	ldi	r26, 0x02	; 2
    f628:	b0 e0       	ldi	r27, 0x00	; 0
    f62a:	e9 e1       	ldi	r30, 0x19	; 25
    f62c:	fb e7       	ldi	r31, 0x7B	; 123
    f62e:	0c 94 c3 e6 	jmp	0x1cd86	; 0x1cd86 <__prologue_saves__+0x10>
    f632:	5c 01       	movw	r10, r24
    f634:	8b 01       	movw	r16, r22
    f636:	6a 01       	movw	r12, r20
    int ret;
    FIL *fh;
    FILE *stream;

//FIXME
    *(char *) buf = 0;
    f638:	fb 01       	movw	r30, r22
    f63a:	10 82       	st	Z, r1

    errno = 0;
    f63c:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    f640:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>

// TTY read function
// FIXME should we really be blocking ???
    stream = fileno_to_stream(fd);
    f644:	9e db       	rcall	.-2244   	; 0xed82 <fileno_to_stream>
    f646:	7c 01       	movw	r14, r24
    if(stream == stdin)
    f648:	80 91 bf 1c 	lds	r24, 0x1CBF	; 0x801cbf <__iob>
    f64c:	90 91 c0 1c 	lds	r25, 0x1CC0	; 0x801cc0 <__iob+0x1>
    f650:	e8 16       	cp	r14, r24
    f652:	f9 06       	cpc	r15, r25
    f654:	c9 f4       	brne	.+50     	; 0xf688 <read+0x62>
    {
        char *ptr = (char *) buf;
// ungetc is undefined for read
        stream->flags |= __SUNGET;
    f656:	f7 01       	movw	r30, r14
    f658:	83 81       	ldd	r24, Z+3	; 0x03
    f65a:	80 64       	ori	r24, 0x40	; 64
    f65c:	83 83       	std	Z+3, r24	; 0x03
        size = 0;
    f65e:	1a 82       	std	Y+2, r1	; 0x02
    f660:	19 82       	std	Y+1, r1	; 0x01
    f662:	c0 0e       	add	r12, r16
    f664:	d1 1e       	adc	r13, r17
        while(count--)
    f666:	0c 15       	cp	r16, r12
    f668:	1d 05       	cpc	r17, r13
    f66a:	09 f4       	brne	.+2      	; 0xf66e <read+0x48>
    f66c:	3d c0       	rjmp	.+122    	; 0xf6e8 <read+0xc2>
        {
            ret = fgetc(stream);
    f66e:	c7 01       	movw	r24, r14
    f670:	48 da       	rcall	.-2928   	; 0xeb02 <fgetc>
            if(ret < 0)
    f672:	97 fd       	sbrc	r25, 7
    f674:	39 c0       	rjmp	.+114    	; 0xf6e8 <read+0xc2>
                break;

            *ptr++ = ret;
    f676:	f8 01       	movw	r30, r16
    f678:	81 93       	st	Z+, r24
    f67a:	8f 01       	movw	r16, r30
            ++size;
    f67c:	89 81       	ldd	r24, Y+1	; 0x01
    f67e:	9a 81       	ldd	r25, Y+2	; 0x02
    f680:	01 96       	adiw	r24, 0x01	; 1
    f682:	9a 83       	std	Y+2, r25	; 0x02
    f684:	89 83       	std	Y+1, r24	; 0x01
    f686:	ef cf       	rjmp	.-34     	; 0xf666 <read+0x40>
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    f688:	80 91 c1 1c 	lds	r24, 0x1CC1	; 0x801cc1 <__iob+0x2>
    f68c:	90 91 c2 1c 	lds	r25, 0x1CC2	; 0x801cc2 <__iob+0x3>
    f690:	e8 16       	cp	r14, r24
    f692:	f9 06       	cpc	r15, r25
    f694:	71 f1       	breq	.+92     	; 0xf6f2 <read+0xcc>
    f696:	80 91 c3 1c 	lds	r24, 0x1CC3	; 0x801cc3 <__iob+0x4>
    f69a:	90 91 c4 1c 	lds	r25, 0x1CC4	; 0x801cc4 <__iob+0x5>
    f69e:	e8 16       	cp	r14, r24
    f6a0:	f9 06       	cpc	r15, r25
    {
        return(-1);
    }

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f6a2:	39 f1       	breq	.+78     	; 0xf6f2 <read+0xcc>
    f6a4:	c5 01       	movw	r24, r10
    f6a6:	00 df       	rcall	.-512    	; 0xf4a8 <fileno_to_fatfs>
    if ( fh == NULL )
    f6a8:	00 97       	sbiw	r24, 0x00	; 0
    f6aa:	19 f4       	brne	.+6      	; 0xf6b2 <read+0x8c>
    {
        errno = EBADF;
    f6ac:	89 e0       	ldi	r24, 0x09	; 9
    f6ae:	90 e0       	ldi	r25, 0x00	; 0
    f6b0:	16 c0       	rjmp	.+44     	; 0xf6de <read+0xb8>
        return(-1);
    }

    res = f_read(fh, (void *) buf, bytes, &size);
    f6b2:	9e 01       	movw	r18, r28
    f6b4:	2f 5f       	subi	r18, 0xFF	; 255
    f6b6:	3f 4f       	sbci	r19, 0xFF	; 255
    f6b8:	a6 01       	movw	r20, r12
    f6ba:	b8 01       	movw	r22, r16
    f6bc:	0e 94 4b 5b 	call	0xb696	; 0xb696 <f_read>
    if(res != FR_OK)
    f6c0:	00 97       	sbiw	r24, 0x00	; 0
    f6c2:	91 f0       	breq	.+36     	; 0xf6e8 <read+0xc2>
    f6c4:	84 31       	cpi	r24, 0x14	; 20
    f6c6:	91 05       	cpc	r25, r1
    f6c8:	40 f4       	brcc	.+16     	; 0xf6da <read+0xb4>
    f6ca:	fc 01       	movw	r30, r24
    f6cc:	ea 55       	subi	r30, 0x5A	; 90
    f6ce:	f4 4f       	sbci	r31, 0xF4	; 244
    f6d0:	80 81       	ld	r24, Z
    f6d2:	08 2e       	mov	r0, r24
    f6d4:	00 0c       	add	r0, r0
    f6d6:	99 0b       	sbc	r25, r25
    f6d8:	02 c0       	rjmp	.+4      	; 0xf6de <read+0xb8>
    f6da:	83 e2       	ldi	r24, 0x23	; 35
    f6dc:	90 e0       	ldi	r25, 0x00	; 0
    {
        errno = fatfs_to_errno(res);
    f6de:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f6e2:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    f6e6:	05 c0       	rjmp	.+10     	; 0xf6f2 <read+0xcc>
        return(-1);
    }
    return ((ssize_t) size);
    f6e8:	69 81       	ldd	r22, Y+1	; 0x01
    f6ea:	7a 81       	ldd	r23, Y+2	; 0x02
    f6ec:	80 e0       	ldi	r24, 0x00	; 0
    f6ee:	90 e0       	ldi	r25, 0x00	; 0
    f6f0:	03 c0       	rjmp	.+6      	; 0xf6f8 <read+0xd2>
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    {
        return(-1);
    f6f2:	6f ef       	ldi	r22, 0xFF	; 255
    f6f4:	7f ef       	ldi	r23, 0xFF	; 255
    f6f6:	cb 01       	movw	r24, r22
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    f6f8:	22 96       	adiw	r28, 0x02	; 2
    f6fa:	ea e0       	ldi	r30, 0x0A	; 10
    f6fc:	0c 94 df e6 	jmp	0x1cdbe	; 0x1cdbe <__epilogue_restores__+0x10>

0000f700 <fread>:
///
/// @return count on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    f700:	0f 93       	push	r16
    f702:	1f 93       	push	r17
    f704:	cf 93       	push	r28
    f706:	df 93       	push	r29
    f708:	ec 01       	movw	r28, r24
    f70a:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    f70c:	64 9f       	mul	r22, r20
    f70e:	80 01       	movw	r16, r0
    f710:	65 9f       	mul	r22, r21
    f712:	10 0d       	add	r17, r0
    f714:	74 9f       	mul	r23, r20
    f716:	10 0d       	add	r17, r0
    f718:	11 24       	eor	r1, r1
    int fn = fileno(stream);
    f71a:	17 db       	rcall	.-2514   	; 0xed4a <fileno>
    ssize_t ret;

// read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    f71c:	a8 01       	movw	r20, r16
    f71e:	be 01       	movw	r22, r28
    f720:	82 df       	rcall	.-252    	; 0xf626 <read>
    if(ret < 0)
    f722:	97 fd       	sbrc	r25, 7
    f724:	02 c0       	rjmp	.+4      	; 0xf72a <fread+0x2a>
        return(0);

    return((size_t) ret);
    f726:	cb 01       	movw	r24, r22
    f728:	02 c0       	rjmp	.+4      	; 0xf72e <fread+0x2e>
    ssize_t ret;

// read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    if(ret < 0)
        return(0);
    f72a:	80 e0       	ldi	r24, 0x00	; 0
    f72c:	90 e0       	ldi	r25, 0x00	; 0

    return((size_t) ret);
}
    f72e:	df 91       	pop	r29
    f730:	cf 91       	pop	r28
    f732:	1f 91       	pop	r17
    f734:	0f 91       	pop	r16
    f736:	08 95       	ret

0000f738 <syncfs>:
/// @param[in] fd: POSIX fileno to sync.
/// @return 0.
/// @return -1 on error witrh errno set.
MEMSPACE
int syncfs(int fd)
{
    f738:	cf 93       	push	r28
    f73a:	df 93       	push	r29
    FIL *fh;
    FRESULT res;
    FILE *stream;

    errno = 0;
    f73c:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    f740:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f744:	83 30       	cpi	r24, 0x03	; 3
    f746:	91 05       	cpc	r25, r1
    f748:	18 f4       	brcc	.+6      	; 0xf750 <syncfs+0x18>

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    if(fh == NULL)
    {
        errno = EBADF;
    f74a:	89 e0       	ldi	r24, 0x09	; 9
    f74c:	90 e0       	ldi	r25, 0x00	; 0
    f74e:	18 c0       	rjmp	.+48     	; 0xf780 <syncfs+0x48>
    f750:	ec 01       	movw	r28, r24
    if(isatty(fd))
    {
        errno = EBADF;
        return(-1);
    }
    stream = fileno_to_stream(fd);
    f752:	17 db       	rcall	.-2514   	; 0xed82 <fileno_to_stream>
    f754:	fc 01       	movw	r30, r24
// reset unget on sync
    stream->flags |= __SUNGET;
    f756:	93 81       	ldd	r25, Z+3	; 0x03
    f758:	90 64       	ori	r25, 0x40	; 64
    f75a:	93 83       	std	Z+3, r25	; 0x03

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f75c:	ce 01       	movw	r24, r28
    f75e:	a4 de       	rcall	.-696    	; 0xf4a8 <fileno_to_fatfs>
    if(fh == NULL)
    f760:	00 97       	sbiw	r24, 0x00	; 0
    f762:	99 f3       	breq	.-26     	; 0xf74a <syncfs+0x12>
    {
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    f764:	0e 94 2d 5e 	call	0xbc5a	; 0xbc5a <f_sync>
    if (res != FR_OK)
    f768:	00 97       	sbiw	r24, 0x00	; 0
    f76a:	a1 f0       	breq	.+40     	; 0xf794 <syncfs+0x5c>
    f76c:	84 31       	cpi	r24, 0x14	; 20
    f76e:	91 05       	cpc	r25, r1
    f770:	70 f4       	brcc	.+28     	; 0xf78e <syncfs+0x56>
    f772:	fc 01       	movw	r30, r24
    f774:	ea 55       	subi	r30, 0x5A	; 90
    f776:	f4 4f       	sbci	r31, 0xF4	; 244
    f778:	80 81       	ld	r24, Z
    f77a:	08 2e       	mov	r0, r24
    f77c:	00 0c       	add	r0, r0
    f77e:	99 0b       	sbc	r25, r25
    {
        errno = fatfs_to_errno(res);
    f780:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f784:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
        return(-1);
    f788:	8f ef       	ldi	r24, 0xFF	; 255
    f78a:	9f ef       	ldi	r25, 0xFF	; 255
    f78c:	05 c0       	rjmp	.+10     	; 0xf798 <syncfs+0x60>
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    if (res != FR_OK)
    f78e:	83 e2       	ldi	r24, 0x23	; 35
    f790:	90 e0       	ldi	r25, 0x00	; 0
    f792:	f6 cf       	rjmp	.-20     	; 0xf780 <syncfs+0x48>
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return(0);
    f794:	80 e0       	ldi	r24, 0x00	; 0
    f796:	90 e0       	ldi	r25, 0x00	; 0
}
    f798:	df 91       	pop	r29
    f79a:	cf 91       	pop	r28
    f79c:	08 95       	ret

0000f79e <sync>:
/// - man page sync (2).
///
/// @return  void.
MEMSPACE
void sync(void)
{
    f79e:	cf 93       	push	r28
    f7a0:	df 93       	push	r29
    FIL *fh;
    int i;

    for(i=0;i<MAX_FILES;++i)
    f7a2:	c0 e0       	ldi	r28, 0x00	; 0
    f7a4:	d0 e0       	ldi	r29, 0x00	; 0
    f7a6:	21 96       	adiw	r28, 0x01	; 1
    f7a8:	c0 31       	cpi	r28, 0x10	; 16
    f7aa:	d1 05       	cpc	r29, r1
    f7ac:	51 f0       	breq	.+20     	; 0xf7c2 <sync+0x24>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f7ae:	c3 30       	cpi	r28, 0x03	; 3
    f7b0:	d1 05       	cpc	r29, r1
    f7b2:	cc f3       	brlt	.-14     	; 0xf7a6 <sync+0x8>
    {
        if(isatty(i))
            continue;

// fileno_to_fatfs checks for i out of bounds
        fh = fileno_to_fatfs(i);
    f7b4:	ce 01       	movw	r24, r28
    f7b6:	78 de       	rcall	.-784    	; 0xf4a8 <fileno_to_fatfs>
        if(fh == NULL)
    f7b8:	89 2b       	or	r24, r25
    f7ba:	a9 f3       	breq	.-22     	; 0xf7a6 <sync+0x8>
            continue;

        (void ) syncfs(i);
    f7bc:	ce 01       	movw	r24, r28
    f7be:	bc df       	rcall	.-136    	; 0xf738 <syncfs>
    f7c0:	f2 cf       	rjmp	.-28     	; 0xf7a6 <sync+0x8>
    }
}
    f7c2:	df 91       	pop	r29
    f7c4:	cf 91       	pop	r28
    f7c6:	08 95       	ret

0000f7c8 <write>:
/// @param[in] count: number of bytes to write.
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t write(int fd, const void *buf, size_t count)
{
    f7c8:	a2 e0       	ldi	r26, 0x02	; 2
    f7ca:	b0 e0       	ldi	r27, 0x00	; 0
    f7cc:	ea ee       	ldi	r30, 0xEA	; 234
    f7ce:	fb e7       	ldi	r31, 0x7B	; 123
    f7d0:	0c 94 c1 e6 	jmp	0x1cd82	; 0x1cd82 <__prologue_saves__+0xc>
    f7d4:	8c 01       	movw	r16, r24
    f7d6:	b6 2e       	mov	r11, r22
    f7d8:	f7 2e       	mov	r15, r23
    f7da:	4a 01       	movw	r8, r20
    UINT size;
    UINT bytes = count;
    FRESULT res;
    FIL *fh;
    FILE *stream;
    errno = 0;
    f7dc:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    f7e0:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>

// TTY read function
    stream = fileno_to_stream(fd);
    f7e4:	ce da       	rcall	.-2660   	; 0xed82 <fileno_to_stream>
    f7e6:	6c 01       	movw	r12, r24
    if(stream == stdout || stream == stderr)
    f7e8:	80 91 c1 1c 	lds	r24, 0x1CC1	; 0x801cc1 <__iob+0x2>
    f7ec:	90 91 c2 1c 	lds	r25, 0x1CC2	; 0x801cc2 <__iob+0x3>
    f7f0:	c8 16       	cp	r12, r24
    f7f2:	d9 06       	cpc	r13, r25
    f7f4:	39 f0       	breq	.+14     	; 0xf804 <write+0x3c>
    f7f6:	80 91 c3 1c 	lds	r24, 0x1CC3	; 0x801cc3 <__iob+0x4>
    f7fa:	90 91 c4 1c 	lds	r25, 0x1CC4	; 0x801cc4 <__iob+0x5>
    f7fe:	c8 16       	cp	r12, r24
    f800:	d9 06       	cpc	r13, r25
    f802:	d1 f4       	brne	.+52     	; 0xf838 <write+0x70>
    {
        char *ptr = (char *) buf;
        size = 0;
    f804:	1a 82       	std	Y+2, r1	; 0x02
    f806:	19 82       	std	Y+1, r1	; 0x01
    f808:	0b 2d       	mov	r16, r11
    f80a:	1f 2d       	mov	r17, r15
    f80c:	78 01       	movw	r14, r16
    f80e:	e8 0c       	add	r14, r8
    f810:	f9 1c       	adc	r15, r9
        while(count--)
    f812:	0e 15       	cp	r16, r14
    f814:	1f 05       	cpc	r17, r15
    f816:	d1 f1       	breq	.+116    	; 0xf88c <write+0xc4>
        {
            int c,ret;
            c = *ptr++;
    f818:	f8 01       	movw	r30, r16
    f81a:	a1 90       	ld	r10, Z+
    f81c:	8f 01       	movw	r16, r30
    f81e:	b1 2c       	mov	r11, r1
            ret = fputc(c, stream);
    f820:	b6 01       	movw	r22, r12
    f822:	c5 01       	movw	r24, r10
    f824:	c4 d9       	rcall	.-3192   	; 0xebae <fputc>
            if(c != ret)
    f826:	a8 16       	cp	r10, r24
    f828:	b9 06       	cpc	r11, r25
    f82a:	81 f5       	brne	.+96     	; 0xf88c <write+0xc4>
                break;

            ++size;
    f82c:	89 81       	ldd	r24, Y+1	; 0x01
    f82e:	9a 81       	ldd	r25, Y+2	; 0x02
    f830:	01 96       	adiw	r24, 0x01	; 1
    f832:	9a 83       	std	Y+2, r25	; 0x02
    f834:	89 83       	std	Y+1, r24	; 0x01
    f836:	ed cf       	rjmp	.-38     	; 0xf812 <write+0x4a>
        }
        return(size);
    }
    if(stream == stdin)
    f838:	80 91 bf 1c 	lds	r24, 0x1CBF	; 0x801cbf <__iob>
    f83c:	90 91 c0 1c 	lds	r25, 0x1CC0	; 0x801cc0 <__iob+0x1>
    f840:	c8 16       	cp	r12, r24
    f842:	d9 06       	cpc	r13, r25
    {
        return(-1);
    }

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f844:	41 f1       	breq	.+80     	; 0xf896 <write+0xce>
    f846:	c8 01       	movw	r24, r16
    f848:	2f de       	rcall	.-930    	; 0xf4a8 <fileno_to_fatfs>
    if ( fh == NULL )
    f84a:	00 97       	sbiw	r24, 0x00	; 0
    f84c:	19 f4       	brne	.+6      	; 0xf854 <write+0x8c>
    {
        errno = EBADF;
    f84e:	89 e0       	ldi	r24, 0x09	; 9
    f850:	90 e0       	ldi	r25, 0x00	; 0
    f852:	17 c0       	rjmp	.+46     	; 0xf882 <write+0xba>
        return(-1);
    }

    res = f_write(fh, buf, bytes, &size);
    f854:	9e 01       	movw	r18, r28
    f856:	2f 5f       	subi	r18, 0xFF	; 255
    f858:	3f 4f       	sbci	r19, 0xFF	; 255
    f85a:	a4 01       	movw	r20, r8
    f85c:	6b 2d       	mov	r22, r11
    f85e:	7f 2d       	mov	r23, r15
    f860:	0e 94 96 5c 	call	0xb92c	; 0xb92c <f_write>
    if(res != FR_OK)
    f864:	00 97       	sbiw	r24, 0x00	; 0
    f866:	91 f0       	breq	.+36     	; 0xf88c <write+0xc4>
    f868:	84 31       	cpi	r24, 0x14	; 20
    f86a:	91 05       	cpc	r25, r1
    f86c:	40 f4       	brcc	.+16     	; 0xf87e <write+0xb6>
    f86e:	fc 01       	movw	r30, r24
    f870:	ea 55       	subi	r30, 0x5A	; 90
    f872:	f4 4f       	sbci	r31, 0xF4	; 244
    f874:	80 81       	ld	r24, Z
    f876:	08 2e       	mov	r0, r24
    f878:	00 0c       	add	r0, r0
    f87a:	99 0b       	sbc	r25, r25
    f87c:	02 c0       	rjmp	.+4      	; 0xf882 <write+0xba>
    f87e:	83 e2       	ldi	r24, 0x23	; 35
    f880:	90 e0       	ldi	r25, 0x00	; 0
    {
        errno = fatfs_to_errno(res);
    f882:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f886:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    f88a:	05 c0       	rjmp	.+10     	; 0xf896 <write+0xce>
        return(-1);
    }
    return ((ssize_t) size);
    f88c:	69 81       	ldd	r22, Y+1	; 0x01
    f88e:	7a 81       	ldd	r23, Y+2	; 0x02
    f890:	80 e0       	ldi	r24, 0x00	; 0
    f892:	90 e0       	ldi	r25, 0x00	; 0
    f894:	03 c0       	rjmp	.+6      	; 0xf89c <write+0xd4>
        }
        return(size);
    }
    if(stream == stdin)
    {
        return(-1);
    f896:	6f ef       	ldi	r22, 0xFF	; 255
    f898:	7f ef       	ldi	r23, 0xFF	; 255
    f89a:	cb 01       	movw	r24, r22
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    f89c:	22 96       	adiw	r28, 0x02	; 2
    f89e:	ec e0       	ldi	r30, 0x0C	; 12
    f8a0:	0c 94 dd e6 	jmp	0x1cdba	; 0x1cdba <__epilogue_restores__+0xc>

0000f8a4 <fwrite>:
///
/// @return count written on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    f8a4:	0f 93       	push	r16
    f8a6:	1f 93       	push	r17
    f8a8:	cf 93       	push	r28
    f8aa:	df 93       	push	r29
    f8ac:	ec 01       	movw	r28, r24
    f8ae:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    f8b0:	64 9f       	mul	r22, r20
    f8b2:	80 01       	movw	r16, r0
    f8b4:	65 9f       	mul	r22, r21
    f8b6:	10 0d       	add	r17, r0
    f8b8:	74 9f       	mul	r23, r20
    f8ba:	10 0d       	add	r17, r0
    f8bc:	11 24       	eor	r1, r1
    int fn = fileno(stream);
    f8be:	45 da       	rcall	.-2934   	; 0xed4a <fileno>
    ssize_t ret;

// write () checks for fn out of bounds
    ret =  write(fn, ptr, count);
    f8c0:	a8 01       	movw	r20, r16
    f8c2:	be 01       	movw	r22, r28
    f8c4:	81 df       	rcall	.-254    	; 0xf7c8 <write>

    if(ret < 0)
    f8c6:	97 fd       	sbrc	r25, 7
    f8c8:	02 c0       	rjmp	.+4      	; 0xf8ce <fwrite+0x2a>
        return(0);

    return((size_t) ret);
    f8ca:	cb 01       	movw	r24, r22
    f8cc:	02 c0       	rjmp	.+4      	; 0xf8d2 <fwrite+0x2e>

// write () checks for fn out of bounds
    ret =  write(fn, ptr, count);

    if(ret < 0)
        return(0);
    f8ce:	80 e0       	ldi	r24, 0x00	; 0
    f8d0:	90 e0       	ldi	r25, 0x00	; 0

    return((size_t) ret);
}
    f8d2:	df 91       	pop	r29
    f8d4:	cf 91       	pop	r28
    f8d6:	1f 91       	pop	r17
    f8d8:	0f 91       	pop	r16
    f8da:	08 95       	ret

0000f8dc <free_file_descriptor>:
///
/// @return fileno on success.
/// @return -1 on failure.
MEMSPACE
int free_file_descriptor(int fileno)
{
    f8dc:	0f 93       	push	r16
    f8de:	1f 93       	push	r17
    f8e0:	cf 93       	push	r28
    f8e2:	df 93       	push	r29
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f8e4:	83 30       	cpi	r24, 0x03	; 3
    f8e6:	91 05       	cpc	r25, r1
    f8e8:	48 f4       	brcc	.+18     	; 0xf8fc <free_file_descriptor+0x20>
    FILE *stream;
    FIL *fh;

    if(isatty( fileno ))
    {
        errno = EBADF;
    f8ea:	89 e0       	ldi	r24, 0x09	; 9
    f8ec:	90 e0       	ldi	r25, 0x00	; 0
    f8ee:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f8f2:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
        return(-1);
    f8f6:	8f ef       	ldi	r24, 0xFF	; 255
    f8f8:	9f ef       	ldi	r25, 0xFF	; 255
    f8fa:	20 c0       	rjmp	.+64     	; 0xf93c <free_file_descriptor+0x60>
    f8fc:	ec 01       	movw	r28, r24
    }

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    f8fe:	41 da       	rcall	.-2942   	; 0xed82 <fileno_to_stream>
    f900:	8c 01       	movw	r16, r24
    if(stream == NULL)
    f902:	89 2b       	or	r24, r25
    f904:	c1 f3       	breq	.-16     	; 0xf8f6 <free_file_descriptor+0x1a>
    {
        return(-1);
    }

    fh = fdev_get_udata(stream);
    f906:	f8 01       	movw	r30, r16
    f908:	84 85       	ldd	r24, Z+12	; 0x0c
    f90a:	95 85       	ldd	r25, Z+13	; 0x0d

    if(fh != NULL)
    f90c:	00 97       	sbiw	r24, 0x00	; 0
    f90e:	11 f0       	breq	.+4      	; 0xf914 <free_file_descriptor+0x38>
    {
        safefree(fh);
    f910:	0e 94 e3 27 	call	0x4fc6	; 0x4fc6 <safefree>
    }

    if(stream->buf != NULL && stream->flags & __SMALLOC)
    f914:	f8 01       	movw	r30, r16
    f916:	80 81       	ld	r24, Z
    f918:	91 81       	ldd	r25, Z+1	; 0x01
    f91a:	00 97       	sbiw	r24, 0x00	; 0
    f91c:	21 f0       	breq	.+8      	; 0xf926 <free_file_descriptor+0x4a>
    f91e:	23 81       	ldd	r18, Z+3	; 0x03
    f920:	27 fd       	sbrc	r18, 7
    {
        safefree(stream->buf);
    f922:	0e 94 e3 27 	call	0x4fc6	; 0x4fc6 <safefree>
    }

    __iob[fileno]  = NULL;
    f926:	fe 01       	movw	r30, r28
    f928:	ee 0f       	add	r30, r30
    f92a:	ff 1f       	adc	r31, r31
    f92c:	e1 54       	subi	r30, 0x41	; 65
    f92e:	f3 4e       	sbci	r31, 0xE3	; 227
    f930:	11 82       	std	Z+1, r1	; 0x01
    f932:	10 82       	st	Z, r1
    safefree(stream);
    f934:	c8 01       	movw	r24, r16
    f936:	0e 94 e3 27 	call	0x4fc6	; 0x4fc6 <safefree>
    return(fileno);
    f93a:	ce 01       	movw	r24, r28
}
    f93c:	df 91       	pop	r29
    f93e:	cf 91       	pop	r28
    f940:	1f 91       	pop	r17
    f942:	0f 91       	pop	r16
    f944:	08 95       	ret

0000f946 <close>:
///
/// @return 0 on sucess.
/// @return -1 on error with errno set.
MEMSPACE
int close(int fileno)
{
    f946:	0f 93       	push	r16
    f948:	1f 93       	push	r17
    f94a:	cf 93       	push	r28
    f94c:	df 93       	push	r29
    f94e:	8c 01       	movw	r16, r24
    FILE *stream;
    FIL *fh;
    int res;

    errno = 0;
    f950:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    f954:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    f958:	14 da       	rcall	.-3032   	; 0xed82 <fileno_to_stream>
    if(stream == NULL)
    f95a:	89 2b       	or	r24, r25
    f95c:	d9 f0       	breq	.+54     	; 0xf994 <close+0x4e>
    {
        return(-1);
    }

// fileno_to_fatfs checks for fileno out of bounds
    fh = fileno_to_fatfs(fileno);
    f95e:	c8 01       	movw	r24, r16
    f960:	a3 dd       	rcall	.-1210   	; 0xf4a8 <fileno_to_fatfs>
    if(fh == NULL)
    f962:	00 97       	sbiw	r24, 0x00	; 0
    f964:	b9 f0       	breq	.+46     	; 0xf994 <close+0x4e>
    {
        return(-1);
    }
    res = f_close(fh);
    f966:	0e 94 ad 5e 	call	0xbd5a	; 0xbd5a <f_close>
    free_file_descriptor(fileno);
    f96a:	ec 01       	movw	r28, r24
    f96c:	c8 01       	movw	r24, r16
    f96e:	b6 df       	rcall	.-148    	; 0xf8dc <free_file_descriptor>
    if (res != FR_OK)
    f970:	20 97       	sbiw	r28, 0x00	; 0
    f972:	99 f0       	breq	.+38     	; 0xf99a <close+0x54>
    f974:	c4 31       	cpi	r28, 0x14	; 20
    f976:	d1 05       	cpc	r29, r1
    f978:	38 f4       	brcc	.+14     	; 0xf988 <close+0x42>
    f97a:	ca 55       	subi	r28, 0x5A	; 90
    f97c:	d4 4f       	sbci	r29, 0xF4	; 244
    f97e:	88 81       	ld	r24, Y
    f980:	08 2e       	mov	r0, r24
    f982:	00 0c       	add	r0, r0
    f984:	99 0b       	sbc	r25, r25
    f986:	02 c0       	rjmp	.+4      	; 0xf98c <close+0x46>
    f988:	83 e2       	ldi	r24, 0x23	; 35
    f98a:	90 e0       	ldi	r25, 0x00	; 0
    {
        errno = fatfs_to_errno(res);
    f98c:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f990:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
        return(-1);
    f994:	8f ef       	ldi	r24, 0xFF	; 255
    f996:	9f ef       	ldi	r25, 0xFF	; 255
    f998:	02 c0       	rjmp	.+4      	; 0xf99e <close+0x58>
    }
    return(0);
    f99a:	80 e0       	ldi	r24, 0x00	; 0
    f99c:	90 e0       	ldi	r25, 0x00	; 0
}
    f99e:	df 91       	pop	r29
    f9a0:	cf 91       	pop	r28
    f9a2:	1f 91       	pop	r17
    f9a4:	0f 91       	pop	r16
    f9a6:	08 95       	ret

0000f9a8 <fclose>:
/// @return  0 on sucess.
/// @return  -1 on error witrh errno set.
MEMSPACE
int fclose(FILE *stream)
{
    int fn = fileno(stream);
    f9a8:	d0 d9       	rcall	.-3168   	; 0xed4a <fileno>
    if(fn < 0)
    f9aa:	97 fd       	sbrc	r25, 7
        return(EOF);

    return( close(fn) );
    f9ac:	02 c0       	rjmp	.+4      	; 0xf9b2 <fclose+0xa>
    f9ae:	cb cf       	rjmp	.-106    	; 0xf946 <close>
    f9b0:	08 95       	ret
MEMSPACE
int fclose(FILE *stream)
{
    int fn = fileno(stream);
    if(fn < 0)
        return(EOF);
    f9b2:	8f ef       	ldi	r24, 0xFF	; 255
    f9b4:	9f ef       	ldi	r25, 0xFF	; 255

    return( close(fn) );
}
    f9b6:	08 95       	ret

0000f9b8 <new_file_descriptor>:
///
/// @return fileno on success.
/// @return -1 on failure with errno set.
MEMSPACE
int new_file_descriptor( void )
{
    f9b8:	0f 93       	push	r16
    f9ba:	1f 93       	push	r17
    f9bc:	cf 93       	push	r28
    f9be:	df 93       	push	r29
    f9c0:	ef eb       	ldi	r30, 0xBF	; 191
    f9c2:	fc e1       	ldi	r31, 0x1C	; 28
    int i;
    FILE *stream;
    FIL *fh;

    for(i=0;i<MAX_FILES;++i)
    f9c4:	c0 e0       	ldi	r28, 0x00	; 0
    f9c6:	d0 e0       	ldi	r29, 0x00	; 0
    f9c8:	21 96       	adiw	r28, 0x01	; 1
    f9ca:	c0 31       	cpi	r28, 0x10	; 16
    f9cc:	d1 05       	cpc	r29, r1
    f9ce:	49 f0       	breq	.+18     	; 0xf9e2 <new_file_descriptor+0x2a>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f9d0:	c3 30       	cpi	r28, 0x03	; 3
    f9d2:	d1 05       	cpc	r29, r1
    f9d4:	24 f0       	brlt	.+8      	; 0xf9de <new_file_descriptor+0x26>

    for(i=0;i<MAX_FILES;++i)
    {
        if(isatty(i))
            continue;
        if( __iob[i] == NULL)
    f9d6:	82 81       	ldd	r24, Z+2	; 0x02
    f9d8:	93 81       	ldd	r25, Z+3	; 0x03
    f9da:	89 2b       	or	r24, r25
    f9dc:	59 f0       	breq	.+22     	; 0xf9f4 <new_file_descriptor+0x3c>
    f9de:	32 96       	adiw	r30, 0x02	; 2
    f9e0:	f3 cf       	rjmp	.-26     	; 0xf9c8 <new_file_descriptor+0x10>
            __iob[i]  = stream;
            fdev_set_udata(stream, (void *) fh);
            return(i);
        }
    }
    errno = ENFILE;
    f9e2:	87 e1       	ldi	r24, 0x17	; 23
    f9e4:	90 e0       	ldi	r25, 0x00	; 0
    f9e6:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f9ea:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    return(-1);
    f9ee:	8f ef       	ldi	r24, 0xFF	; 255
    f9f0:	9f ef       	ldi	r25, 0xFF	; 255
    f9f2:	22 c0       	rjmp	.+68     	; 0xfa38 <new_file_descriptor+0x80>
    {
        if(isatty(i))
            continue;
        if( __iob[i] == NULL)
        {
            stream = (FILE *) safecalloc(sizeof(FILE),1);
    f9f4:	61 e0       	ldi	r22, 0x01	; 1
    f9f6:	70 e0       	ldi	r23, 0x00	; 0
    f9f8:	8e e0       	ldi	r24, 0x0E	; 14
    f9fa:	90 e0       	ldi	r25, 0x00	; 0
    f9fc:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <safecalloc>
    fa00:	8c 01       	movw	r16, r24
            if(stream == NULL)
    fa02:	89 2b       	or	r24, r25
    fa04:	59 f0       	breq	.+22     	; 0xfa1c <new_file_descriptor+0x64>
            {
                errno = ENOMEM;
                return(-1);
            }
            fh = (FIL *) safecalloc(sizeof(FIL),1);
    fa06:	61 e0       	ldi	r22, 0x01	; 1
    fa08:	70 e0       	ldi	r23, 0x00	; 0
    fa0a:	84 e2       	ldi	r24, 0x24	; 36
    fa0c:	92 e0       	ldi	r25, 0x02	; 2
    fa0e:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <safecalloc>
            if(fh == NULL)
    fa12:	00 97       	sbiw	r24, 0x00	; 0
    fa14:	31 f4       	brne	.+12     	; 0xfa22 <new_file_descriptor+0x6a>
            {
                safefree(stream);
    fa16:	c8 01       	movw	r24, r16
    fa18:	0e 94 e3 27 	call	0x4fc6	; 0x4fc6 <safefree>
                errno = ENOMEM;
    fa1c:	8c e0       	ldi	r24, 0x0C	; 12
    fa1e:	90 e0       	ldi	r25, 0x00	; 0
    fa20:	e2 cf       	rjmp	.-60     	; 0xf9e6 <new_file_descriptor+0x2e>
                return(-1);
            }

            __iob[i]  = stream;
    fa22:	fe 01       	movw	r30, r28
    fa24:	ee 0f       	add	r30, r30
    fa26:	ff 1f       	adc	r31, r31
    fa28:	e1 54       	subi	r30, 0x41	; 65
    fa2a:	f3 4e       	sbci	r31, 0xE3	; 227
    fa2c:	11 83       	std	Z+1, r17	; 0x01
    fa2e:	00 83       	st	Z, r16
            fdev_set_udata(stream, (void *) fh);
    fa30:	f8 01       	movw	r30, r16
    fa32:	95 87       	std	Z+13, r25	; 0x0d
    fa34:	84 87       	std	Z+12, r24	; 0x0c
{
    int i;
    FILE *stream;
    FIL *fh;

    for(i=0;i<MAX_FILES;++i)
    fa36:	ce 01       	movw	r24, r28
            return(i);
        }
    }
    errno = ENFILE;
    return(-1);
}
    fa38:	df 91       	pop	r29
    fa3a:	cf 91       	pop	r28
    fa3c:	1f 91       	pop	r17
    fa3e:	0f 91       	pop	r16
    fa40:	08 95       	ret

0000fa42 <open>:
///
/// @return fileno on success.
/// @return -1 on error with errno set.
MEMSPACE
int open(const char *pathname, int flags)
{
    fa42:	a0 e0       	ldi	r26, 0x00	; 0
    fa44:	b0 e0       	ldi	r27, 0x00	; 0
    fa46:	e7 e2       	ldi	r30, 0x27	; 39
    fa48:	fd e7       	ldi	r31, 0x7D	; 125
    fa4a:	0c 94 bf e6 	jmp	0x1cd7e	; 0x1cd7e <__prologue_saves__+0x8>
    fa4e:	5c 01       	movw	r10, r24
    fa50:	6b 01       	movw	r12, r22
    int fatfs_modes;
    FILE *stream;
    FIL *fh;
    int res;

    errno = 0;
    fa52:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    fa56:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
        errno = fatfs_to_errno(res);
        return(-1);
    }
#endif

    if((flags & O_ACCMODE) == O_RDWR)
    fa5a:	7b 01       	movw	r14, r22
    fa5c:	83 e0       	ldi	r24, 0x03	; 3
    fa5e:	e8 22       	and	r14, r24
    fa60:	ff 24       	eor	r15, r15
    fa62:	e2 e0       	ldi	r30, 0x02	; 2
    fa64:	ee 16       	cp	r14, r30
    fa66:	f1 04       	cpc	r15, r1
    fa68:	31 f0       	breq	.+12     	; 0xfa76 <open+0x34>
        fatfs_modes = FA_READ | FA_WRITE;
    else if((flags & O_ACCMODE) == O_RDONLY)
    fa6a:	e1 14       	cp	r14, r1
    fa6c:	f1 04       	cpc	r15, r1
    fa6e:	31 f0       	breq	.+12     	; 0xfa7c <open+0x3a>
        fatfs_modes = FA_READ;
    else
        fatfs_modes = FA_WRITE;
    fa70:	02 e0       	ldi	r16, 0x02	; 2
    fa72:	10 e0       	ldi	r17, 0x00	; 0
    fa74:	05 c0       	rjmp	.+10     	; 0xfa80 <open+0x3e>
        return(-1);
    }
#endif

    if((flags & O_ACCMODE) == O_RDWR)
        fatfs_modes = FA_READ | FA_WRITE;
    fa76:	03 e0       	ldi	r16, 0x03	; 3
    fa78:	10 e0       	ldi	r17, 0x00	; 0
    fa7a:	02 c0       	rjmp	.+4      	; 0xfa80 <open+0x3e>
    else if((flags & O_ACCMODE) == O_RDONLY)
        fatfs_modes = FA_READ;
    fa7c:	01 e0       	ldi	r16, 0x01	; 1
    fa7e:	10 e0       	ldi	r17, 0x00	; 0
    else
        fatfs_modes = FA_WRITE;

    if(flags & O_CREAT)
    fa80:	c6 fe       	sbrs	r12, 6
    fa82:	05 c0       	rjmp	.+10     	; 0xfa8e <open+0x4c>
    {
        if(flags & O_TRUNC)
    fa84:	d1 fe       	sbrs	r13, 1
    fa86:	02 c0       	rjmp	.+4      	; 0xfa8c <open+0x4a>
            fatfs_modes |= FA_CREATE_ALWAYS;
    fa88:	08 60       	ori	r16, 0x08	; 8
    fa8a:	01 c0       	rjmp	.+2      	; 0xfa8e <open+0x4c>
        else
            fatfs_modes |= FA_OPEN_ALWAYS;
    fa8c:	00 61       	ori	r16, 0x10	; 16
    }

    fileno = new_file_descriptor();
    fa8e:	94 df       	rcall	.-216    	; 0xf9b8 <new_file_descriptor>
    fa90:	3c 01       	movw	r6, r24

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    fa92:	77 d9       	rcall	.-3346   	; 0xed82 <fileno_to_stream>
    fa94:	ec 01       	movw	r28, r24
    fa96:	c3 01       	movw	r24, r6
    if(stream == NULL)
    {
        free_file_descriptor(fileno);
    fa98:	20 97       	sbiw	r28, 0x00	; 0

    fileno = new_file_descriptor();

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    if(stream == NULL)
    fa9a:	09 f4       	brne	.+2      	; 0xfa9e <open+0x5c>
    fa9c:	48 c0       	rjmp	.+144    	; 0xfb2e <open+0xec>
        free_file_descriptor(fileno);
        return(-1);
    }

// fileno_to_fatfs checks for fileno out of bounds
    fh = fileno_to_fatfs(fileno);
    fa9e:	04 dd       	rcall	.-1528   	; 0xf4a8 <fileno_to_fatfs>
    faa0:	4c 01       	movw	r8, r24
    faa2:	00 97       	sbiw	r24, 0x00	; 0
    if(fh == NULL)
    faa4:	59 f4       	brne	.+22     	; 0xfabc <open+0x7a>
    {
        free_file_descriptor(fileno);
    faa6:	c3 01       	movw	r24, r6
    faa8:	19 df       	rcall	.-462    	; 0xf8dc <free_file_descriptor>
    faaa:	89 e0       	ldi	r24, 0x09	; 9
        errno = EBADF;
    faac:	90 e0       	ldi	r25, 0x00	; 0
    faae:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    fab2:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    fab6:	8f ef       	ldi	r24, 0xFF	; 255
        return(-1);
    fab8:	9f ef       	ldi	r25, 0xFF	; 255
    faba:	5d c0       	rjmp	.+186    	; 0xfb76 <open+0x134>
    fabc:	40 2f       	mov	r20, r16
    }
    res = f_open(fh, pathname, (BYTE) (fatfs_modes & 0xff));
    fabe:	b5 01       	movw	r22, r10
    fac0:	0e 94 93 59 	call	0xb326	; 0xb326 <f_open>
    fac4:	00 97       	sbiw	r24, 0x00	; 0
    if(res != FR_OK)
    fac6:	91 f0       	breq	.+36     	; 0xfaec <open+0xaa>
    fac8:	84 31       	cpi	r24, 0x14	; 20
    faca:	91 05       	cpc	r25, r1
    facc:	40 f4       	brcc	.+16     	; 0xfade <open+0x9c>
    face:	fc 01       	movw	r30, r24
    fad0:	ea 55       	subi	r30, 0x5A	; 90
    fad2:	f4 4f       	sbci	r31, 0xF4	; 244
    fad4:	80 81       	ld	r24, Z
    fad6:	08 2e       	mov	r0, r24
    fad8:	00 0c       	add	r0, r0
    fada:	99 0b       	sbc	r25, r25
    fadc:	02 c0       	rjmp	.+4      	; 0xfae2 <open+0xa0>
    fade:	83 e2       	ldi	r24, 0x23	; 35
    fae0:	90 e0       	ldi	r25, 0x00	; 0
    fae2:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    {
        errno = fatfs_to_errno(res);
    fae6:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    faea:	20 c0       	rjmp	.+64     	; 0xfb2c <open+0xea>
    faec:	d2 fe       	sbrs	r13, 2
        free_file_descriptor(fileno);
        return(-1);
    }
    if(flags & O_APPEND)
    faee:	21 c0       	rjmp	.+66     	; 0xfb32 <open+0xf0>
    faf0:	f4 01       	movw	r30, r8
    {
///  Seek to end of the file
        res = f_lseek(fh, f_size(fh));
    faf2:	42 85       	ldd	r20, Z+10	; 0x0a
    faf4:	53 85       	ldd	r21, Z+11	; 0x0b
    faf6:	64 85       	ldd	r22, Z+12	; 0x0c
    faf8:	75 85       	ldd	r23, Z+13	; 0x0d
    fafa:	c4 01       	movw	r24, r8
    fafc:	0e 94 57 60 	call	0xc0ae	; 0xc0ae <f_lseek>
    fb00:	00 97       	sbiw	r24, 0x00	; 0
        if (res != FR_OK)
    fb02:	b9 f0       	breq	.+46     	; 0xfb32 <open+0xf0>
    fb04:	84 31       	cpi	r24, 0x14	; 20
    fb06:	91 05       	cpc	r25, r1
    fb08:	40 f4       	brcc	.+16     	; 0xfb1a <open+0xd8>
    fb0a:	fc 01       	movw	r30, r24
    fb0c:	ea 55       	subi	r30, 0x5A	; 90
    fb0e:	f4 4f       	sbci	r31, 0xF4	; 244
    fb10:	80 81       	ld	r24, Z
    fb12:	08 2e       	mov	r0, r24
    fb14:	00 0c       	add	r0, r0
    fb16:	99 0b       	sbc	r25, r25
    fb18:	02 c0       	rjmp	.+4      	; 0xfb1e <open+0xdc>
    fb1a:	83 e2       	ldi	r24, 0x23	; 35
    fb1c:	90 e0       	ldi	r25, 0x00	; 0
    fb1e:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
        {
            errno = fatfs_to_errno(res);
    fb22:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    fb26:	c4 01       	movw	r24, r8
            f_close(fh);
    fb28:	0e 94 ad 5e 	call	0xbd5a	; 0xbd5a <f_close>
            free_file_descriptor(fileno);
    fb2c:	c3 01       	movw	r24, r6
    fb2e:	d6 de       	rcall	.-596    	; 0xf8dc <free_file_descriptor>
    fb30:	c2 cf       	rjmp	.-124    	; 0xfab6 <open+0x74>
    fb32:	f2 e0       	ldi	r31, 0x02	; 2
            return(-1);
        }
    }

    if((flags & O_ACCMODE) == O_RDWR)
    fb34:	ef 16       	cp	r14, r31
    fb36:	f1 04       	cpc	r15, r1
    fb38:	51 f4       	brne	.+20     	; 0xfb4e <open+0x10c>
    fb3a:	86 e3       	ldi	r24, 0x36	; 54
    {
// FIXME fdevopen should do this
        stream->put = fatfs_putc;
    fb3c:	95 e7       	ldi	r25, 0x75	; 117
    fb3e:	99 87       	std	Y+9, r25	; 0x09
    fb40:	88 87       	std	Y+8, r24	; 0x08
    fb42:	83 eb       	ldi	r24, 0xB3	; 179
        stream->get = fatfs_getc;
    fb44:	94 e7       	ldi	r25, 0x74	; 116
    fb46:	9b 87       	std	Y+11, r25	; 0x0b
    fb48:	8a 87       	std	Y+10, r24	; 0x0a
    fb4a:	83 e0       	ldi	r24, 0x03	; 3
        stream->flags = _FDEV_SETUP_RW;
    fb4c:	12 c0       	rjmp	.+36     	; 0xfb72 <open+0x130>
    fb4e:	e1 14       	cp	r14, r1
    }
    else if((flags & O_ACCMODE) == O_RDONLY)
    fb50:	f1 04       	cpc	r15, r1
    fb52:	41 f4       	brne	.+16     	; 0xfb64 <open+0x122>
    fb54:	19 86       	std	Y+9, r1	; 0x09
    {
// FIXME fdevopen should do this
        stream->put = NULL;
    fb56:	18 86       	std	Y+8, r1	; 0x08
    fb58:	83 eb       	ldi	r24, 0xB3	; 179
        stream->get = fatfs_getc;
    fb5a:	94 e7       	ldi	r25, 0x74	; 116
    fb5c:	9b 87       	std	Y+11, r25	; 0x0b
    fb5e:	8a 87       	std	Y+10, r24	; 0x0a
    fb60:	81 e0       	ldi	r24, 0x01	; 1
        stream->flags = _FDEV_SETUP_READ;
    fb62:	07 c0       	rjmp	.+14     	; 0xfb72 <open+0x130>
    fb64:	86 e3       	ldi	r24, 0x36	; 54
    }
    else
    {
// FIXME fdevopen should do this
        stream->put = fatfs_putc;
    fb66:	95 e7       	ldi	r25, 0x75	; 117
    fb68:	99 87       	std	Y+9, r25	; 0x09
    fb6a:	88 87       	std	Y+8, r24	; 0x08
    fb6c:	1b 86       	std	Y+11, r1	; 0x0b
        stream->get = NULL;
    fb6e:	1a 86       	std	Y+10, r1	; 0x0a
    fb70:	82 e0       	ldi	r24, 0x02	; 2
        stream->flags = _FDEV_SETUP_WRITE;
    fb72:	8b 83       	std	Y+3, r24	; 0x03
    fb74:	c3 01       	movw	r24, r6
    }

    return(fileno);
    fb76:	cd b7       	in	r28, 0x3d	; 61
}
    fb78:	de b7       	in	r29, 0x3e	; 62
    fb7a:	ee e0       	ldi	r30, 0x0E	; 14
    fb7c:	0c 94 db e6 	jmp	0x1cdb6	; 0x1cdb6 <__epilogue_restores__+0x8>

0000fb80 <posix_fopen_modes_to_open>:
    fb80:	cf 93       	push	r28
/// @return open mode flags.
/// @return -1 on error.
/// @warning read and write BOTH share the same stream buffer and buffer index pointers.
MEMSPACE
int posix_fopen_modes_to_open(const char *mode)
{
    fb82:	df 93       	push	r29
    fb84:	ec 01       	movw	r28, r24
    int flag = 0;

    if(modecmp(mode,"r") || modecmp(mode,"rb"))
    fb86:	62 e4       	ldi	r22, 0x42	; 66
    fb88:	73 e0       	ldi	r23, 0x03	; 3
    fb8a:	0e 94 86 31 	call	0x630c	; 0x630c <strcmp>
    fb8e:	00 97       	sbiw	r24, 0x00	; 0
    fb90:	09 f4       	brne	.+2      	; 0xfb94 <posix_fopen_modes_to_open+0x14>
    fb92:	5d c0       	rjmp	.+186    	; 0xfc4e <posix_fopen_modes_to_open+0xce>
    fb94:	6e ef       	ldi	r22, 0xFE	; 254
    fb96:	78 e0       	ldi	r23, 0x08	; 8
    fb98:	ce 01       	movw	r24, r28
    fb9a:	0e 94 86 31 	call	0x630c	; 0x630c <strcmp>
    fb9e:	00 97       	sbiw	r24, 0x00	; 0
    fba0:	09 f4       	brne	.+2      	; 0xfba4 <posix_fopen_modes_to_open+0x24>
    fba2:	55 c0       	rjmp	.+170    	; 0xfc4e <posix_fopen_modes_to_open+0xce>
    {
        flag = O_RDONLY;
        return(flag);
    }
    if(modecmp(mode,"r+") || modecmp(mode, "r+b" ) || modecmp(mode, "rb+" ))
    fba4:	61 e0       	ldi	r22, 0x01	; 1
    fba6:	79 e0       	ldi	r23, 0x09	; 9
    fba8:	ce 01       	movw	r24, r28
    fbaa:	0e 94 86 31 	call	0x630c	; 0x630c <strcmp>
    fbae:	89 2b       	or	r24, r25
    fbb0:	09 f4       	brne	.+2      	; 0xfbb4 <posix_fopen_modes_to_open+0x34>
    fbb2:	42 c0       	rjmp	.+132    	; 0xfc38 <posix_fopen_modes_to_open+0xb8>
    fbb4:	64 e0       	ldi	r22, 0x04	; 4
    fbb6:	79 e0       	ldi	r23, 0x09	; 9
    fbb8:	ce 01       	movw	r24, r28
    fbba:	0e 94 86 31 	call	0x630c	; 0x630c <strcmp>
    fbbe:	89 2b       	or	r24, r25
    fbc0:	d9 f1       	breq	.+118    	; 0xfc38 <posix_fopen_modes_to_open+0xb8>
    fbc2:	68 e0       	ldi	r22, 0x08	; 8
    fbc4:	79 e0       	ldi	r23, 0x09	; 9
    fbc6:	ce 01       	movw	r24, r28
    fbc8:	0e 94 86 31 	call	0x630c	; 0x630c <strcmp>
    fbcc:	89 2b       	or	r24, r25
    fbce:	a1 f1       	breq	.+104    	; 0xfc38 <posix_fopen_modes_to_open+0xb8>
    {
        flag = O_RDWR | O_TRUNC;
        return(flag);
    }
    if(modecmp(mode,"w") || modecmp(mode,"wb"))
    fbd0:	6d eb       	ldi	r22, 0xBD	; 189
    fbd2:	7a e0       	ldi	r23, 0x0A	; 10
    fbd4:	ce 01       	movw	r24, r28
    fbd6:	0e 94 86 31 	call	0x630c	; 0x630c <strcmp>
    fbda:	89 2b       	or	r24, r25
    fbdc:	81 f1       	breq	.+96     	; 0xfc3e <posix_fopen_modes_to_open+0xbe>
    fbde:	6c e0       	ldi	r22, 0x0C	; 12
    fbe0:	79 e0       	ldi	r23, 0x09	; 9
    fbe2:	ce 01       	movw	r24, r28
    fbe4:	0e 94 86 31 	call	0x630c	; 0x630c <strcmp>
    fbe8:	89 2b       	or	r24, r25
    fbea:	49 f1       	breq	.+82     	; 0xfc3e <posix_fopen_modes_to_open+0xbe>
    {
        flag = O_WRONLY | O_CREAT | O_TRUNC;
        return(flag);
    }
    if(modecmp(mode,"w+") || modecmp(mode, "w+b" ) || modecmp(mode, "wb+" ))
    fbec:	6f e0       	ldi	r22, 0x0F	; 15
    fbee:	79 e0       	ldi	r23, 0x09	; 9
    fbf0:	ce 01       	movw	r24, r28
    fbf2:	0e 94 86 31 	call	0x630c	; 0x630c <strcmp>
    fbf6:	89 2b       	or	r24, r25
    fbf8:	29 f1       	breq	.+74     	; 0xfc44 <posix_fopen_modes_to_open+0xc4>
    fbfa:	62 e1       	ldi	r22, 0x12	; 18
    fbfc:	79 e0       	ldi	r23, 0x09	; 9
    fbfe:	ce 01       	movw	r24, r28
    fc00:	0e 94 86 31 	call	0x630c	; 0x630c <strcmp>
    fc04:	89 2b       	or	r24, r25
    fc06:	f1 f0       	breq	.+60     	; 0xfc44 <posix_fopen_modes_to_open+0xc4>
    fc08:	66 e1       	ldi	r22, 0x16	; 22
    fc0a:	79 e0       	ldi	r23, 0x09	; 9
    fc0c:	ce 01       	movw	r24, r28
    fc0e:	0e 94 86 31 	call	0x630c	; 0x630c <strcmp>
    fc12:	89 2b       	or	r24, r25
    fc14:	b9 f0       	breq	.+46     	; 0xfc44 <posix_fopen_modes_to_open+0xc4>
    {
        flag = O_RDWR | O_CREAT | O_TRUNC;
        return(flag);
    }
    if(modecmp(mode,"a") || modecmp(mode,"ab"))
    fc16:	62 e2       	ldi	r22, 0x22	; 34
    fc18:	73 e1       	ldi	r23, 0x13	; 19
    fc1a:	ce 01       	movw	r24, r28
    fc1c:	0e 94 86 31 	call	0x630c	; 0x630c <strcmp>
    fc20:	89 2b       	or	r24, r25
    fc22:	99 f0       	breq	.+38     	; 0xfc4a <posix_fopen_modes_to_open+0xca>
    fc24:	6a e1       	ldi	r22, 0x1A	; 26
    fc26:	79 e0       	ldi	r23, 0x09	; 9
    fc28:	ce 01       	movw	r24, r28
    fc2a:	0e 94 86 31 	call	0x630c	; 0x630c <strcmp>
    fc2e:	89 2b       	or	r24, r25
    fc30:	61 f0       	breq	.+24     	; 0xfc4a <posix_fopen_modes_to_open+0xca>
        return(flag);
    }
    if(modecmp(mode,"a+") || modecmp(mode, "a+b" ) || modecmp(mode, "ab+" ))
    {
        flag = O_RDWR | O_CREAT | O_APPEND;
        return(-1);
    fc32:	8f ef       	ldi	r24, 0xFF	; 255
    fc34:	9f ef       	ldi	r25, 0xFF	; 255
    fc36:	0b c0       	rjmp	.+22     	; 0xfc4e <posix_fopen_modes_to_open+0xce>
        return(flag);
    }
    if(modecmp(mode,"r+") || modecmp(mode, "r+b" ) || modecmp(mode, "rb+" ))
    {
        flag = O_RDWR | O_TRUNC;
        return(flag);
    fc38:	82 e0       	ldi	r24, 0x02	; 2
    fc3a:	92 e0       	ldi	r25, 0x02	; 2
    fc3c:	08 c0       	rjmp	.+16     	; 0xfc4e <posix_fopen_modes_to_open+0xce>
    }
    if(modecmp(mode,"w") || modecmp(mode,"wb"))
    {
        flag = O_WRONLY | O_CREAT | O_TRUNC;
        return(flag);
    fc3e:	81 e4       	ldi	r24, 0x41	; 65
    fc40:	92 e0       	ldi	r25, 0x02	; 2
    fc42:	05 c0       	rjmp	.+10     	; 0xfc4e <posix_fopen_modes_to_open+0xce>
    }
    if(modecmp(mode,"w+") || modecmp(mode, "w+b" ) || modecmp(mode, "wb+" ))
    {
        flag = O_RDWR | O_CREAT | O_TRUNC;
        return(flag);
    fc44:	82 e4       	ldi	r24, 0x42	; 66
    fc46:	92 e0       	ldi	r25, 0x02	; 2
    fc48:	02 c0       	rjmp	.+4      	; 0xfc4e <posix_fopen_modes_to_open+0xce>
    }
    if(modecmp(mode,"a") || modecmp(mode,"ab"))
    {
        flag = O_WRONLY | O_CREAT | O_APPEND;
        return(flag);
    fc4a:	81 e4       	ldi	r24, 0x41	; 65
    fc4c:	94 e0       	ldi	r25, 0x04	; 4
    {
        flag = O_RDWR | O_CREAT | O_APPEND;
        return(-1);
    }
    return(-1);                                   // nvalid mode
}
    fc4e:	df 91       	pop	r29
    fc50:	cf 91       	pop	r28
    fc52:	08 95       	ret

0000fc54 <fopen>:
///
/// @return stream * on success.
/// @return NULL on error with errno set.
MEMSPACE
FILE *fopen(const char *path, const char *mode)
{
    fc54:	cf 93       	push	r28
    fc56:	df 93       	push	r29
    fc58:	ec 01       	movw	r28, r24
    fc5a:	cb 01       	movw	r24, r22
    int flags = posix_fopen_modes_to_open(mode);
    fc5c:	91 df       	rcall	.-222    	; 0xfb80 <posix_fopen_modes_to_open>
    int fileno = open(path, flags);
    fc5e:	bc 01       	movw	r22, r24
    fc60:	ce 01       	movw	r24, r28

// checks if fileno out of bounds
    return( fileno_to_stream(fileno) );
    fc62:	ef de       	rcall	.-546    	; 0xfa42 <open>
    fc64:	8e d8       	rcall	.-3812   	; 0xed82 <fileno_to_stream>
}
    fc66:	df 91       	pop	r29
    fc68:	cf 91       	pop	r28
    fc6a:	08 95       	ret

0000fc6c <fprintf>:
/// @param[in] ...: vararg list or arguments
/// @return size of printed result
MEMSPACE
int
fprintf(FILE *fp, const char *format, ...)
{
    fc6c:	a8 e0       	ldi	r26, 0x08	; 8
    fc6e:	b0 e0       	ldi	r27, 0x00	; 0
    fc70:	ec e3       	ldi	r30, 0x3C	; 60
    fc72:	fe e7       	ldi	r31, 0x7E	; 126
    fc74:	0c 94 cb e6 	jmp	0x1cd96	; 0x1cd96 <__prologue_saves__+0x20>
    printf_t fn;
    va_list va;

    fn.put = _fprintf_putc;
    fc78:	89 e2       	ldi	r24, 0x29	; 41
    fc7a:	96 e7       	ldi	r25, 0x76	; 118
    fc7c:	9a 83       	std	Y+2, r25	; 0x02
    fc7e:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    fc80:	18 86       	std	Y+8, r1	; 0x08
    fc82:	1f 82       	std	Y+7, r1	; 0x07
    fn.buffer = (void *) fp;
    fc84:	8d 85       	ldd	r24, Y+13	; 0x0d
    fc86:	9e 85       	ldd	r25, Y+14	; 0x0e
    fc88:	9c 83       	std	Y+4, r25	; 0x04
    fc8a:	8b 83       	std	Y+3, r24	; 0x03

    va_start(va, format);
    _printf_fn(&fn, format, va);
    fc8c:	4f 85       	ldd	r20, Y+15	; 0x0f
    fc8e:	58 89       	ldd	r21, Y+16	; 0x10
    fc90:	60 e8       	ldi	r22, 0x80	; 128
    fc92:	9e 01       	movw	r18, r28
    fc94:	2f 5e       	subi	r18, 0xEF	; 239
    fc96:	3f 4f       	sbci	r19, 0xFF	; 255
    fc98:	ce 01       	movw	r24, r28
    fc9a:	01 96       	adiw	r24, 0x01	; 1
    fc9c:	0e 94 46 42 	call	0x848c	; 0x848c <_printf_fn>
    va_end(va);

    return ((int)fn.sent);
}
    fca0:	8f 81       	ldd	r24, Y+7	; 0x07
    fca2:	98 85       	ldd	r25, Y+8	; 0x08
    fca4:	28 96       	adiw	r28, 0x08	; 8
    fca6:	e2 e0       	ldi	r30, 0x02	; 2
    fca8:	0c 94 e7 e6 	jmp	0x1cdce	; 0x1cdce <__epilogue_restores__+0x20>

0000fcac <posix_help>:
MEMSPACE
int setpage(int count)
{
    _pagesize = count;
    return(_pagesize);
}
    fcac:	cf 93       	push	r28
    fcae:	df 93       	push	r29
    fcb0:	00 d0       	rcall	.+0      	; 0xfcb2 <posix_help+0x6>
    fcb2:	1f 92       	push	r1
    fcb4:	ec 01       	movw	r28, r24
    fcb6:	84 e7       	ldi	r24, 0x74	; 116
    fcb8:	9e e0       	ldi	r25, 0x0E	; 14
    fcba:	a0 e0       	ldi	r26, 0x00	; 0
    fcbc:	ed b7       	in	r30, 0x3d	; 61
    fcbe:	fe b7       	in	r31, 0x3e	; 62
    fcc0:	81 83       	std	Z+1, r24	; 0x01
    fcc2:	92 83       	std	Z+2, r25	; 0x02
    fcc4:	a3 83       	std	Z+3, r26	; 0x03
    fcc6:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    fcca:	cd 2b       	or	r28, r29
    fccc:	51 f0       	breq	.+20     	; 0xfce2 <posix_help+0x36>
    fcce:	8e ea       	ldi	r24, 0xAE	; 174
    fcd0:	9d e0       	ldi	r25, 0x0D	; 13
    fcd2:	a0 e0       	ldi	r26, 0x00	; 0
    fcd4:	ed b7       	in	r30, 0x3d	; 61
    fcd6:	fe b7       	in	r31, 0x3e	; 62
    fcd8:	81 83       	std	Z+1, r24	; 0x01
    fcda:	92 83       	std	Z+2, r25	; 0x02
    fcdc:	a3 83       	std	Z+3, r26	; 0x03
    fcde:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    fce2:	cd b7       	in	r28, 0x3d	; 61
    fce4:	de b7       	in	r29, 0x3e	; 62
    fce6:	23 96       	adiw	r28, 0x03	; 3
    fce8:	e2 e0       	ldi	r30, 0x02	; 2
    fcea:	0c 94 e7 e6 	jmp	0x1cdce	; 0x1cdce <__epilogue_restores__+0x20>

0000fcee <copy>:
    fcee:	4f 92       	push	r4
    fcf0:	5f 92       	push	r5
    fcf2:	6f 92       	push	r6
    fcf4:	8f 92       	push	r8
    fcf6:	9f 92       	push	r9
    fcf8:	af 92       	push	r10
    fcfa:	bf 92       	push	r11
    fcfc:	cf 92       	push	r12
    fcfe:	df 92       	push	r13
    fd00:	ef 92       	push	r14
    fd02:	ff 92       	push	r15
    fd04:	0f 93       	push	r16
    fd06:	1f 93       	push	r17
    fd08:	cf 93       	push	r28
    fd0a:	df 93       	push	r29
    fd0c:	ad b7       	in	r26, 0x3d	; 61
    fd0e:	be b7       	in	r27, 0x3e	; 62
    fd10:	17 97       	sbiw	r26, 0x07	; 7
    fd12:	0f b6       	in	r0, 0x3f	; 63
    fd14:	f8 94       	cli
    fd16:	be bf       	out	0x3e, r27	; 62
    fd18:	0f be       	out	0x3f, r0	; 63
    fd1a:	ad bf       	out	0x3d, r26	; 61
    fd1c:	8c 01       	movw	r16, r24
    fd1e:	eb 01       	movw	r28, r22
    fd20:	ed b7       	in	r30, 0x3d	; 61
    fd22:	fe b7       	in	r31, 0x3e	; 62
    fd24:	95 83       	std	Z+5, r25	; 0x05
    fd26:	84 83       	std	Z+4, r24	; 0x04
    fd28:	8b e0       	ldi	r24, 0x0B	; 11
    fd2a:	9d e0       	ldi	r25, 0x0D	; 13
    fd2c:	a0 e0       	ldi	r26, 0x00	; 0
    fd2e:	81 83       	std	Z+1, r24	; 0x01
    fd30:	92 83       	std	Z+2, r25	; 0x02
    fd32:	a3 83       	std	Z+3, r26	; 0x03
    fd34:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    fd38:	6e ef       	ldi	r22, 0xFE	; 254
    fd3a:	78 e0       	ldi	r23, 0x08	; 8
    fd3c:	c8 01       	movw	r24, r16
    fd3e:	8a df       	rcall	.-236    	; 0xfc54 <fopen>
    fd40:	7c 01       	movw	r14, r24
    fd42:	ed b7       	in	r30, 0x3d	; 61
    fd44:	fe b7       	in	r31, 0x3e	; 62
    fd46:	89 2b       	or	r24, r25
    fd48:	59 f4       	brne	.+22     	; 0xfd60 <copy+0x72>
    fd4a:	15 83       	std	Z+5, r17	; 0x05
    fd4c:	04 83       	std	Z+4, r16	; 0x04
    fd4e:	8b ef       	ldi	r24, 0xFB	; 251
    fd50:	9c e0       	ldi	r25, 0x0C	; 12
    fd52:	a0 e0       	ldi	r26, 0x00	; 0
    fd54:	81 83       	std	Z+1, r24	; 0x01
    fd56:	92 83       	std	Z+2, r25	; 0x02
    fd58:	a3 83       	std	Z+3, r26	; 0x03
    fd5a:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    fd5e:	20 c0       	rjmp	.+64     	; 0xfda0 <copy+0xb2>
    fd60:	d5 83       	std	Z+5, r29	; 0x05
    fd62:	c4 83       	std	Z+4, r28	; 0x04
    fd64:	8e ee       	ldi	r24, 0xEE	; 238
    fd66:	9c e0       	ldi	r25, 0x0C	; 12
    fd68:	a0 e0       	ldi	r26, 0x00	; 0
    fd6a:	81 83       	std	Z+1, r24	; 0x01
    fd6c:	92 83       	std	Z+2, r25	; 0x02
    fd6e:	a3 83       	std	Z+3, r26	; 0x03
    fd70:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    fd74:	6c e0       	ldi	r22, 0x0C	; 12
    fd76:	79 e0       	ldi	r23, 0x09	; 9
    fd78:	ce 01       	movw	r24, r28
    fd7a:	6c df       	rcall	.-296    	; 0xfc54 <fopen>
    fd7c:	8c 01       	movw	r16, r24
    fd7e:	89 2b       	or	r24, r25
    fd80:	a1 f4       	brne	.+40     	; 0xfdaa <copy+0xbc>
    fd82:	ed b7       	in	r30, 0x3d	; 61
    fd84:	fe b7       	in	r31, 0x3e	; 62
    fd86:	d5 83       	std	Z+5, r29	; 0x05
    fd88:	c4 83       	std	Z+4, r28	; 0x04
    fd8a:	8e ed       	ldi	r24, 0xDE	; 222
    fd8c:	9c e0       	ldi	r25, 0x0C	; 12
    fd8e:	a0 e0       	ldi	r26, 0x00	; 0
    fd90:	81 83       	std	Z+1, r24	; 0x01
    fd92:	92 83       	std	Z+2, r25	; 0x02
    fd94:	a3 83       	std	Z+3, r26	; 0x03
    fd96:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    fd9a:	80 e0       	ldi	r24, 0x00	; 0
    fd9c:	90 e0       	ldi	r25, 0x00	; 0
    fd9e:	04 de       	rcall	.-1016   	; 0xf9a8 <fclose>
    fda0:	6f ef       	ldi	r22, 0xFF	; 255
    fda2:	7f ef       	ldi	r23, 0xFF	; 255
    fda4:	8f ef       	ldi	r24, 0xFF	; 255
    fda6:	9f ef       	ldi	r25, 0xFF	; 255
    fda8:	68 c0       	rjmp	.+208    	; 0xfe7a <copy+0x18c>
    fdaa:	61 e0       	ldi	r22, 0x01	; 1
    fdac:	70 e0       	ldi	r23, 0x00	; 0
    fdae:	80 e0       	ldi	r24, 0x00	; 0
    fdb0:	92 e0       	ldi	r25, 0x02	; 2
    fdb2:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <safecalloc>
    fdb6:	6c 01       	movw	r12, r24
    fdb8:	89 2b       	or	r24, r25
    fdba:	21 f4       	brne	.+8      	; 0xfdc4 <copy+0xd6>
    fdbc:	c7 01       	movw	r24, r14
    fdbe:	f4 dd       	rcall	.-1048   	; 0xf9a8 <fclose>
    fdc0:	c8 01       	movw	r24, r16
    fdc2:	ed cf       	rjmp	.-38     	; 0xfd9e <copy+0xb0>
    fdc4:	81 ed       	ldi	r24, 0xD1	; 209
    fdc6:	9c e0       	ldi	r25, 0x0C	; 12
    fdc8:	a0 e0       	ldi	r26, 0x00	; 0
    fdca:	ed b7       	in	r30, 0x3d	; 61
    fdcc:	fe b7       	in	r31, 0x3e	; 62
    fdce:	81 83       	std	Z+1, r24	; 0x01
    fdd0:	92 83       	std	Z+2, r25	; 0x02
    fdd2:	a3 83       	std	Z+3, r26	; 0x03
    fdd4:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    fdd8:	81 2c       	mov	r8, r1
    fdda:	91 2c       	mov	r9, r1
    fddc:	54 01       	movw	r10, r8
    fdde:	85 eb       	ldi	r24, 0xB5	; 181
    fde0:	9c e0       	ldi	r25, 0x0C	; 12
    fde2:	2c 01       	movw	r4, r24
    fde4:	61 2c       	mov	r6, r1
    fde6:	97 01       	movw	r18, r14
    fde8:	40 e0       	ldi	r20, 0x00	; 0
    fdea:	52 e0       	ldi	r21, 0x02	; 2
    fdec:	61 e0       	ldi	r22, 0x01	; 1
    fdee:	70 e0       	ldi	r23, 0x00	; 0
    fdf0:	c6 01       	movw	r24, r12
    fdf2:	86 dc       	rcall	.-1780   	; 0xf700 <fread>
    fdf4:	ec 01       	movw	r28, r24
    fdf6:	18 16       	cp	r1, r24
    fdf8:	19 06       	cpc	r1, r25
    fdfa:	44 f5       	brge	.+80     	; 0xfe4c <copy+0x15e>
    fdfc:	98 01       	movw	r18, r16
    fdfe:	ae 01       	movw	r20, r28
    fe00:	61 e0       	ldi	r22, 0x01	; 1
    fe02:	70 e0       	ldi	r23, 0x00	; 0
    fe04:	c6 01       	movw	r24, r12
    fe06:	4e dd       	rcall	.-1380   	; 0xf8a4 <fwrite>
    fe08:	8c 17       	cp	r24, r28
    fe0a:	9d 07       	cpc	r25, r29
    fe0c:	5c f4       	brge	.+22     	; 0xfe24 <copy+0x136>
    fe0e:	84 ec       	ldi	r24, 0xC4	; 196
    fe10:	9c e0       	ldi	r25, 0x0C	; 12
    fe12:	a0 e0       	ldi	r26, 0x00	; 0
    fe14:	ed b7       	in	r30, 0x3d	; 61
    fe16:	fe b7       	in	r31, 0x3e	; 62
    fe18:	81 83       	std	Z+1, r24	; 0x01
    fe1a:	92 83       	std	Z+2, r25	; 0x02
    fe1c:	a3 83       	std	Z+3, r26	; 0x03
    fe1e:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    fe22:	14 c0       	rjmp	.+40     	; 0xfe4c <copy+0x15e>
    fe24:	ce 01       	movw	r24, r28
    fe26:	dd 0f       	add	r29, r29
    fe28:	aa 0b       	sbc	r26, r26
    fe2a:	bb 0b       	sbc	r27, r27
    fe2c:	88 0e       	add	r8, r24
    fe2e:	99 1e       	adc	r9, r25
    fe30:	aa 1e       	adc	r10, r26
    fe32:	bb 1e       	adc	r11, r27
    fe34:	ed b7       	in	r30, 0x3d	; 61
    fe36:	fe b7       	in	r31, 0x3e	; 62
    fe38:	84 82       	std	Z+4, r8	; 0x04
    fe3a:	95 82       	std	Z+5, r9	; 0x05
    fe3c:	a6 82       	std	Z+6, r10	; 0x06
    fe3e:	b7 82       	std	Z+7, r11	; 0x07
    fe40:	41 82       	std	Z+1, r4	; 0x01
    fe42:	52 82       	std	Z+2, r5	; 0x02
    fe44:	63 82       	std	Z+3, r6	; 0x03
    fe46:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    fe4a:	cd cf       	rjmp	.-102    	; 0xfde6 <copy+0xf8>
    fe4c:	ed b7       	in	r30, 0x3d	; 61
    fe4e:	fe b7       	in	r31, 0x3e	; 62
    fe50:	84 82       	std	Z+4, r8	; 0x04
    fe52:	95 82       	std	Z+5, r9	; 0x05
    fe54:	a6 82       	std	Z+6, r10	; 0x06
    fe56:	b7 82       	std	Z+7, r11	; 0x07
    fe58:	82 ea       	ldi	r24, 0xA2	; 162
    fe5a:	9c e0       	ldi	r25, 0x0C	; 12
    fe5c:	a0 e0       	ldi	r26, 0x00	; 0
    fe5e:	81 83       	std	Z+1, r24	; 0x01
    fe60:	92 83       	std	Z+2, r25	; 0x02
    fe62:	a3 83       	std	Z+3, r26	; 0x03
    fe64:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    fe68:	c6 01       	movw	r24, r12
    fe6a:	0e 94 e3 27 	call	0x4fc6	; 0x4fc6 <safefree>
    fe6e:	c7 01       	movw	r24, r14
    fe70:	9b dd       	rcall	.-1226   	; 0xf9a8 <fclose>
    fe72:	c8 01       	movw	r24, r16
    fe74:	99 dd       	rcall	.-1230   	; 0xf9a8 <fclose>
    fe76:	b4 01       	movw	r22, r8
    fe78:	c5 01       	movw	r24, r10
    fe7a:	ad b7       	in	r26, 0x3d	; 61
    fe7c:	be b7       	in	r27, 0x3e	; 62
    fe7e:	17 96       	adiw	r26, 0x07	; 7
    fe80:	0f b6       	in	r0, 0x3f	; 63
    fe82:	f8 94       	cli
    fe84:	be bf       	out	0x3e, r27	; 62
    fe86:	0f be       	out	0x3f, r0	; 63
    fe88:	ad bf       	out	0x3d, r26	; 61
    fe8a:	df 91       	pop	r29
    fe8c:	cf 91       	pop	r28
    fe8e:	1f 91       	pop	r17
    fe90:	0f 91       	pop	r16
    fe92:	ff 90       	pop	r15
    fe94:	ef 90       	pop	r14
    fe96:	df 90       	pop	r13
    fe98:	cf 90       	pop	r12
    fe9a:	bf 90       	pop	r11
    fe9c:	af 90       	pop	r10
    fe9e:	9f 90       	pop	r9
    fea0:	8f 90       	pop	r8
    fea2:	6f 90       	pop	r6
    fea4:	5f 90       	pop	r5
    fea6:	4f 90       	pop	r4
    fea8:	08 95       	ret

0000feaa <testpage>:
/// @brief Used to page output of functions like cat, hexdump, etc
/// @param[in] *name: file to hexdump
/// @retrun -1 = quit, return count or 0 at new page
MEMSPACE
int testpage(int count)
{
    feaa:	cf 93       	push	r28
    feac:	df 93       	push	r29
    feae:	00 d0       	rcall	.+0      	; 0xfeb0 <testpage+0x6>
    feb0:	1f 92       	push	r1
    int c;
    if(count >= _pagesize)
    feb2:	20 91 80 01 	lds	r18, 0x0180	; 0x800180 <_pagesize>
    feb6:	30 91 81 01 	lds	r19, 0x0181	; 0x800181 <_pagesize+0x1>
    feba:	82 17       	cp	r24, r18
    febc:	93 07       	cpc	r25, r19
    febe:	3c f1       	brlt	.+78     	; 0xff0e <__DATA_REGION_LENGTH__+0xe>
    {
        printf("More..");
    fec0:	8b e9       	ldi	r24, 0x9B	; 155
    fec2:	9c e0       	ldi	r25, 0x0C	; 12
    fec4:	a0 e0       	ldi	r26, 0x00	; 0
    fec6:	ed b7       	in	r30, 0x3d	; 61
    fec8:	fe b7       	in	r31, 0x3e	; 62
    feca:	81 83       	std	Z+1, r24	; 0x01
    fecc:	92 83       	std	Z+2, r25	; 0x02
    fece:	a3 83       	std	Z+3, r26	; 0x03
    fed0:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
        {
            optimistic_yield(1000);
            wdt_reset();
        }
#endif
        c = getchar();
    fed4:	0e 94 36 76 	call	0xec6c	; 0xec6c <getchar>
    fed8:	ec 01       	movw	r28, r24
        printf("\r");
    feda:	89 e9       	ldi	r24, 0x99	; 153
    fedc:	9c e0       	ldi	r25, 0x0C	; 12
    fede:	a0 e0       	ldi	r26, 0x00	; 0
    fee0:	ed b7       	in	r30, 0x3d	; 61
    fee2:	fe b7       	in	r31, 0x3e	; 62
    fee4:	81 83       	std	Z+1, r24	; 0x01
    fee6:	92 83       	std	Z+2, r25	; 0x02
    fee8:	a3 83       	std	Z+3, r26	; 0x03
    feea:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
        if(c == 'q')
    feee:	c1 37       	cpi	r28, 0x71	; 113
    fef0:	d1 05       	cpc	r29, r1
    fef2:	41 f0       	breq	.+16     	; 0xff04 <__DATA_REGION_LENGTH__+0x4>
            return(-1);                           // quit
        if(c == '\n')
    fef4:	2a 97       	sbiw	r28, 0x0a	; 10
    fef6:	49 f4       	brne	.+18     	; 0xff0a <__DATA_REGION_LENGTH__+0xa>
            return(_pagesize-1);                  // single line
    fef8:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <_pagesize>
    fefc:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <_pagesize+0x1>
    ff00:	01 97       	sbiw	r24, 0x01	; 1
    ff02:	05 c0       	rjmp	.+10     	; 0xff0e <__DATA_REGION_LENGTH__+0xe>
        }
#endif
        c = getchar();
        printf("\r");
        if(c == 'q')
            return(-1);                           // quit
    ff04:	8f ef       	ldi	r24, 0xFF	; 255
    ff06:	9f ef       	ldi	r25, 0xFF	; 255
    ff08:	02 c0       	rjmp	.+4      	; 0xff0e <__DATA_REGION_LENGTH__+0xe>
        if(c == '\n')
            return(_pagesize-1);                  // single line
        return(0);                                // new page
    ff0a:	80 e0       	ldi	r24, 0x00	; 0
    ff0c:	90 e0       	ldi	r25, 0x00	; 0
    }
    return (count);
}
    ff0e:	cd b7       	in	r28, 0x3d	; 61
    ff10:	de b7       	in	r29, 0x3e	; 62
    ff12:	23 96       	adiw	r28, 0x03	; 3
    ff14:	e2 e0       	ldi	r30, 0x02	; 2
    ff16:	0c 94 e7 e6 	jmp	0x1cdce	; 0x1cdce <__epilogue_restores__+0x20>

0000ff1a <cat>:
/// @param[in] name: file name.
/// @param[in] option: --p page display
/// @return  number of characters in file or -1 on error
MEMSPACE
long cat(char *name, int dopage)
{
    ff1a:	a7 e0       	ldi	r26, 0x07	; 7
    ff1c:	b1 e0       	ldi	r27, 0x01	; 1
    ff1e:	e3 e9       	ldi	r30, 0x93	; 147
    ff20:	ff e7       	ldi	r31, 0x7F	; 127
    ff22:	0c 94 c1 e6 	jmp	0x1cd82	; 0x1cd82 <__prologue_saves__+0xc>
    ff26:	8c 01       	movw	r16, r24
    ff28:	4b 01       	movw	r8, r22
    FILE *fp;
    int count = 0;
    int size = 0;
    char line[256];

    fp = fopen(name,"rb");
    ff2a:	6e ef       	ldi	r22, 0xFE	; 254
    ff2c:	78 e0       	ldi	r23, 0x08	; 8
    ff2e:	92 de       	rcall	.-732    	; 0xfc54 <fopen>
    ff30:	7c 01       	movw	r14, r24
    if (!fp)
    ff32:	89 2b       	or	r24, r25
    ff34:	41 f0       	breq	.+16     	; 0xff46 <cat+0x2c>
    ff36:	c1 2c       	mov	r12, r1
    ff38:	d1 2c       	mov	r13, r1
    ff3a:	a1 2c       	mov	r10, r1
    ff3c:	b1 2c       	mov	r11, r1
    {
        printf("Can't open: %s\n", name);
        return(-1);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    ff3e:	8e 01       	movw	r16, r28
    ff40:	08 5f       	subi	r16, 0xF8	; 248
    ff42:	1f 4f       	sbci	r17, 0xFF	; 255
    ff44:	23 c0       	rjmp	.+70     	; 0xff8c <cat+0x72>
    char line[256];

    fp = fopen(name,"rb");
    if (!fp)
    {
        printf("Can't open: %s\n", name);
    ff46:	ed b7       	in	r30, 0x3d	; 61
    ff48:	fe b7       	in	r31, 0x3e	; 62
    ff4a:	15 83       	std	Z+5, r17	; 0x05
    ff4c:	04 83       	std	Z+4, r16	; 0x04
    ff4e:	84 e2       	ldi	r24, 0x24	; 36
    ff50:	9d e0       	ldi	r25, 0x0D	; 13
    ff52:	a0 e0       	ldi	r26, 0x00	; 0
    ff54:	81 83       	std	Z+1, r24	; 0x01
    ff56:	92 83       	std	Z+2, r25	; 0x02
    ff58:	a3 83       	std	Z+3, r26	; 0x03
    ff5a:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
        return(-1);
    ff5e:	cc 24       	eor	r12, r12
    ff60:	ca 94       	dec	r12
    ff62:	dc 2c       	mov	r13, r12
    ff64:	76 01       	movw	r14, r12
    ff66:	3f c0       	rjmp	.+126    	; 0xffe6 <cat+0xcc>
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    {
        trim_tail(line);
    ff68:	c8 01       	movw	r24, r16
    ff6a:	0e 94 0a 32 	call	0x6414	; 0x6414 <trim_tail>
        size += strlen(line);
    ff6e:	f8 01       	movw	r30, r16
    ff70:	01 90       	ld	r0, Z+
    ff72:	00 20       	and	r0, r0
    ff74:	e9 f7       	brne	.-6      	; 0xff70 <cat+0x56>
    ff76:	31 97       	sbiw	r30, 0x01	; 1
    ff78:	e0 1b       	sub	r30, r16
    ff7a:	f1 0b       	sbc	r31, r17
    ff7c:	ce 0e       	add	r12, r30
    ff7e:	df 1e       	adc	r13, r31
        puts(line);
    ff80:	c8 01       	movw	r24, r16
    ff82:	0e 94 8e 76 	call	0xed1c	; 0xed1c <puts>
        if(dopage)
    ff86:	81 14       	cp	r8, r1
    ff88:	91 04       	cpc	r9, r1
    ff8a:	49 f4       	brne	.+18     	; 0xff9e <cat+0x84>
    if (!fp)
    {
        printf("Can't open: %s\n", name);
        return(-1);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    ff8c:	a7 01       	movw	r20, r14
    ff8e:	6e ef       	ldi	r22, 0xFE	; 254
    ff90:	70 e0       	ldi	r23, 0x00	; 0
    ff92:	c8 01       	movw	r24, r16
    ff94:	0e 94 42 76 	call	0xec84	; 0xec84 <fgets>
    ff98:	89 2b       	or	r24, r25
    ff9a:	31 f7       	brne	.-52     	; 0xff68 <cat+0x4e>
    ff9c:	06 c0       	rjmp	.+12     	; 0xffaa <cat+0x90>
        trim_tail(line);
        size += strlen(line);
        puts(line);
        if(dopage)
        {
            count = testpage(++count);
    ff9e:	c5 01       	movw	r24, r10
    ffa0:	01 96       	adiw	r24, 0x01	; 1
    ffa2:	83 df       	rcall	.-250    	; 0xfeaa <testpage>
    ffa4:	5c 01       	movw	r10, r24
            if(count < 0)
    ffa6:	97 ff       	sbrs	r25, 7
    ffa8:	f1 cf       	rjmp	.-30     	; 0xff8c <cat+0x72>
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    printf("\n");
    ffaa:	82 e2       	ldi	r24, 0x22	; 34
    ffac:	9d e0       	ldi	r25, 0x0D	; 13
    ffae:	a0 e0       	ldi	r26, 0x00	; 0
    ffb0:	ed b7       	in	r30, 0x3d	; 61
    ffb2:	fe b7       	in	r31, 0x3e	; 62
    ffb4:	81 83       	std	Z+1, r24	; 0x01
    ffb6:	92 83       	std	Z+2, r25	; 0x02
    ffb8:	a3 83       	std	Z+3, r26	; 0x03
    ffba:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    fclose(fp);
    ffbe:	c7 01       	movw	r24, r14
    ffc0:	f3 dc       	rcall	.-1562   	; 0xf9a8 <fclose>
    printf("%ld bytes\n", (long)size);
    ffc2:	0d 2c       	mov	r0, r13
    ffc4:	00 0c       	add	r0, r0
    ffc6:	ee 08       	sbc	r14, r14
    ffc8:	ff 08       	sbc	r15, r15
    ffca:	ed b7       	in	r30, 0x3d	; 61
    ffcc:	fe b7       	in	r31, 0x3e	; 62
    ffce:	c4 82       	std	Z+4, r12	; 0x04
    ffd0:	d5 82       	std	Z+5, r13	; 0x05
    ffd2:	e6 82       	std	Z+6, r14	; 0x06
    ffd4:	f7 82       	std	Z+7, r15	; 0x07
    ffd6:	87 e1       	ldi	r24, 0x17	; 23
    ffd8:	9d e0       	ldi	r25, 0x0D	; 13
    ffda:	a0 e0       	ldi	r26, 0x00	; 0
    ffdc:	81 83       	std	Z+1, r24	; 0x01
    ffde:	92 83       	std	Z+2, r25	; 0x02
    ffe0:	a3 83       	std	Z+3, r26	; 0x03
    ffe2:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    return(size);
}
    ffe6:	c7 01       	movw	r24, r14
    ffe8:	b6 01       	movw	r22, r12
    ffea:	c9 5f       	subi	r28, 0xF9	; 249
    ffec:	de 4f       	sbci	r29, 0xFE	; 254
    ffee:	ec e0       	ldi	r30, 0x0C	; 12
    fff0:	0c 94 dd e6 	jmp	0x1cdba	; 0x1cdba <__epilogue_restores__+0xc>

0000fff4 <ls_info>:
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
    fff4:	4f 92       	push	r4
    fff6:	5f 92       	push	r5
    fff8:	6f 92       	push	r6
    fffa:	7f 92       	push	r7
    fffc:	af 92       	push	r10
    fffe:	bf 92       	push	r11
   10000:	cf 92       	push	r12
   10002:	df 92       	push	r13
   10004:	ef 92       	push	r14
   10006:	ff 92       	push	r15
   10008:	0f 93       	push	r16
   1000a:	1f 93       	push	r17
   1000c:	cf 93       	push	r28
   1000e:	df 93       	push	r29
   10010:	cd b7       	in	r28, 0x3d	; 61
   10012:	de b7       	in	r29, 0x3e	; 62
   10014:	c9 54       	subi	r28, 0x49	; 73
   10016:	d1 09       	sbc	r29, r1
   10018:	0f b6       	in	r0, 0x3f	; 63
   1001a:	f8 94       	cli
   1001c:	de bf       	out	0x3e, r29	; 62
   1001e:	0f be       	out	0x3f, r0	; 63
   10020:	cd bf       	out	0x3d, r28	; 61
   10022:	8c 01       	movw	r16, r24
   10024:	7b 01       	movw	r14, r22
    struct stat sp;
    uint16_t mask;
    char *cm = "rwx";
    char attr[12], *p;

    if(stat(name, &sp) == -1)
   10026:	be 01       	movw	r22, r28
   10028:	62 5f       	subi	r22, 0xF2	; 242
   1002a:	7f 4f       	sbci	r23, 0xFF	; 255
   1002c:	18 d9       	rcall	.-3536   	; 0xf25e <stat>
   1002e:	01 96       	adiw	r24, 0x01	; 1
   10030:	79 f4       	brne	.+30     	; 0x10050 <__EEPROM_REGION_LENGTH__+0x50>
    {
        printf("can not stat: %s\n", name);
   10032:	ed b7       	in	r30, 0x3d	; 61
   10034:	fe b7       	in	r31, 0x3e	; 62
   10036:	15 83       	std	Z+5, r17	; 0x05
   10038:	04 83       	std	Z+4, r16	; 0x04
   1003a:	87 e8       	ldi	r24, 0x87	; 135
   1003c:	9c e0       	ldi	r25, 0x0C	; 12
   1003e:	a0 e0       	ldi	r26, 0x00	; 0
   10040:	81 83       	std	Z+1, r24	; 0x01
   10042:	92 83       	std	Z+2, r25	; 0x02
   10044:	a3 83       	std	Z+3, r26	; 0x03
   10046:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
        return(0);
   1004a:	80 e0       	ldi	r24, 0x00	; 0
   1004c:	90 e0       	ldi	r25, 0x00	; 0
   1004e:	77 c0       	rjmp	.+238    	; 0x1013e <__EEPROM_REGION_LENGTH__+0x13e>
    }

    if(!verbose)
   10050:	ef 28       	or	r14, r15
   10052:	81 f4       	brne	.+32     	; 0x10074 <__EEPROM_REGION_LENGTH__+0x74>
    {
        printf("%s\n",basename(name));
   10054:	c8 01       	movw	r24, r16
   10056:	0e 94 fb 76 	call	0xedf6	; 0xedf6 <basename>
   1005a:	ed b7       	in	r30, 0x3d	; 61
   1005c:	fe b7       	in	r31, 0x3e	; 62
   1005e:	95 83       	std	Z+5, r25	; 0x05
   10060:	84 83       	std	Z+4, r24	; 0x04
   10062:	83 e8       	ldi	r24, 0x83	; 131
   10064:	9c e0       	ldi	r25, 0x0C	; 12
   10066:	a0 e0       	ldi	r26, 0x00	; 0
   10068:	81 83       	std	Z+1, r24	; 0x01
   1006a:	92 83       	std	Z+2, r25	; 0x02
   1006c:	a3 83       	std	Z+3, r26	; 0x03
   1006e:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   10072:	63 c0       	rjmp	.+198    	; 0x1013a <__EEPROM_REGION_LENGTH__+0x13a>
        return(1);
    }

    p = attr;
    if(S_ISDIR(sp.st_mode))
   10074:	4e 88       	ldd	r4, Y+22	; 0x16
   10076:	5f 88       	ldd	r5, Y+23	; 0x17
   10078:	68 8c       	ldd	r6, Y+24	; 0x18
   1007a:	79 8c       	ldd	r7, Y+25	; 0x19
   1007c:	d3 01       	movw	r26, r6
   1007e:	c2 01       	movw	r24, r4
   10080:	88 27       	eor	r24, r24
   10082:	90 7f       	andi	r25, 0xF0	; 240
   10084:	aa 27       	eor	r26, r26
   10086:	bb 27       	eor	r27, r27
   10088:	81 15       	cp	r24, r1
   1008a:	90 44       	sbci	r25, 0x40	; 64
   1008c:	a1 05       	cpc	r26, r1
   1008e:	b1 05       	cpc	r27, r1
   10090:	11 f4       	brne	.+4      	; 0x10096 <__EEPROM_REGION_LENGTH__+0x96>
        *p++ = 'd';
   10092:	84 e6       	ldi	r24, 0x64	; 100
   10094:	01 c0       	rjmp	.+2      	; 0x10098 <__EEPROM_REGION_LENGTH__+0x98>
    else
        *p++ = '-';
   10096:	8d e2       	ldi	r24, 0x2D	; 45
   10098:	8e af       	std	Y+62, r24	; 0x3e
   1009a:	fe 01       	movw	r30, r28
   1009c:	fe 96       	adiw	r30, 0x3e	; 62
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
   1009e:	e1 2c       	mov	r14, r1
   100a0:	ff 24       	eor	r15, r15
   100a2:	f3 94       	inc	r15
   100a4:	20 e0       	ldi	r18, 0x00	; 0
   100a6:	30 e0       	ldi	r19, 0x00	; 0
   100a8:	be 2e       	mov	r11, r30
   100aa:	af 2e       	mov	r10, r31
    {
// User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
   100ac:	4d e2       	ldi	r20, 0x2D	; 45
    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
// User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
   100ae:	53 e0       	ldi	r21, 0x03	; 3
   100b0:	c5 2e       	mov	r12, r21
   100b2:	d1 2c       	mov	r13, r1

    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
// User
        if( sp.st_mode & mask)
   100b4:	c7 01       	movw	r24, r14
   100b6:	a0 e0       	ldi	r26, 0x00	; 0
   100b8:	b0 e0       	ldi	r27, 0x00	; 0
   100ba:	84 21       	and	r24, r4
   100bc:	95 21       	and	r25, r5
   100be:	a6 21       	and	r26, r6
   100c0:	b7 21       	and	r27, r7
   100c2:	89 2b       	or	r24, r25
   100c4:	8a 2b       	or	r24, r26
   100c6:	8b 2b       	or	r24, r27
   100c8:	51 f0       	breq	.+20     	; 0x100de <__EEPROM_REGION_LENGTH__+0xde>
            *p++ = cm[ i % 3];
   100ca:	c9 01       	movw	r24, r18
   100cc:	b6 01       	movw	r22, r12
   100ce:	0e 94 3b e6 	call	0x1cc76	; 0x1cc76 <__divmodhi4>
   100d2:	dc 01       	movw	r26, r24
   100d4:	a6 54       	subi	r26, 0x46	; 70
   100d6:	b4 4f       	sbci	r27, 0xF4	; 244
   100d8:	8c 91       	ld	r24, X
   100da:	81 83       	std	Z+1, r24	; 0x01
   100dc:	01 c0       	rjmp	.+2      	; 0x100e0 <__EEPROM_REGION_LENGTH__+0xe0>
        else
            *p++ = '-';
   100de:	41 83       	std	Z+1, r20	; 0x01
        mask >>= 1;
   100e0:	f6 94       	lsr	r15
   100e2:	e7 94       	ror	r14
        *p++ = 'd';
    else
        *p++ = '-';

    mask = 4 << 6;
    for(i=0;i<9;++i)
   100e4:	2f 5f       	subi	r18, 0xFF	; 255
   100e6:	3f 4f       	sbci	r19, 0xFF	; 255
   100e8:	31 96       	adiw	r30, 0x01	; 1
   100ea:	29 30       	cpi	r18, 0x09	; 9
   100ec:	31 05       	cpc	r19, r1
   100ee:	11 f7       	brne	.-60     	; 0x100b4 <__EEPROM_REGION_LENGTH__+0xb4>
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
        mask >>= 1;
    }
    *p = 0;
   100f0:	29 96       	adiw	r28, 0x09	; 9
   100f2:	1f ae       	std	Y+63, r1	; 0x3f
   100f4:	29 97       	sbiw	r28, 0x09	; 9

    printf("%s none none %12ld %s %s\n",
   100f6:	4e a0       	ldd	r4, Y+38	; 0x26
   100f8:	5f a0       	ldd	r5, Y+39	; 0x27
   100fa:	68 a4       	ldd	r6, Y+40	; 0x28
   100fc:	79 a4       	ldd	r7, Y+41	; 0x29
   100fe:	6e a9       	ldd	r22, Y+54	; 0x36
   10100:	7f a9       	ldd	r23, Y+55	; 0x37
   10102:	88 ad       	ldd	r24, Y+56	; 0x38
   10104:	99 ad       	ldd	r25, Y+57	; 0x39
   10106:	0e 94 d6 76 	call	0xedac	; 0xedac <mctime>
   1010a:	7c 01       	movw	r14, r24
   1010c:	c8 01       	movw	r24, r16
   1010e:	0e 94 fb 76 	call	0xedf6	; 0xedf6 <basename>
   10112:	ed b7       	in	r30, 0x3d	; 61
   10114:	fe b7       	in	r31, 0x3e	; 62
   10116:	95 87       	std	Z+13, r25	; 0x0d
   10118:	84 87       	std	Z+12, r24	; 0x0c
   1011a:	f3 86       	std	Z+11, r15	; 0x0b
   1011c:	e2 86       	std	Z+10, r14	; 0x0a
   1011e:	46 82       	std	Z+6, r4	; 0x06
   10120:	57 82       	std	Z+7, r5	; 0x07
   10122:	60 86       	std	Z+8, r6	; 0x08
   10124:	71 86       	std	Z+9, r7	; 0x09
   10126:	b4 82       	std	Z+4, r11	; 0x04
   10128:	a5 82       	std	Z+5, r10	; 0x05
   1012a:	89 e6       	ldi	r24, 0x69	; 105
   1012c:	9c e0       	ldi	r25, 0x0C	; 12
   1012e:	a0 e0       	ldi	r26, 0x00	; 0
   10130:	81 83       	std	Z+1, r24	; 0x01
   10132:	92 83       	std	Z+2, r25	; 0x02
   10134:	a3 83       	std	Z+3, r26	; 0x03
   10136:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
        attr,
        (long) sp.st_size,
        mctime((time_t)sp.st_mtime),
        basename(name));
    return(1);
   1013a:	81 e0       	ldi	r24, 0x01	; 1
   1013c:	90 e0       	ldi	r25, 0x00	; 0
}
   1013e:	c7 5b       	subi	r28, 0xB7	; 183
   10140:	df 4f       	sbci	r29, 0xFF	; 255
   10142:	0f b6       	in	r0, 0x3f	; 63
   10144:	f8 94       	cli
   10146:	de bf       	out	0x3e, r29	; 62
   10148:	0f be       	out	0x3f, r0	; 63
   1014a:	cd bf       	out	0x3d, r28	; 61
   1014c:	df 91       	pop	r29
   1014e:	cf 91       	pop	r28
   10150:	1f 91       	pop	r17
   10152:	0f 91       	pop	r16
   10154:	ff 90       	pop	r15
   10156:	ef 90       	pop	r14
   10158:	df 90       	pop	r13
   1015a:	cf 90       	pop	r12
   1015c:	bf 90       	pop	r11
   1015e:	af 90       	pop	r10
   10160:	7f 90       	pop	r7
   10162:	6f 90       	pop	r6
   10164:	5f 90       	pop	r5
   10166:	4f 90       	pop	r4
   10168:	08 95       	ret

0001016a <ls>:
/// @param[in] path: file name or directory
/// @param[in] option: -l for detail
/// @return  number of files or -1 on error
MEMSPACE
int ls(char *name, int verbose)
{
   1016a:	2f 92       	push	r2
   1016c:	3f 92       	push	r3
   1016e:	4f 92       	push	r4
   10170:	5f 92       	push	r5
   10172:	6f 92       	push	r6
   10174:	8f 92       	push	r8
   10176:	9f 92       	push	r9
   10178:	af 92       	push	r10
   1017a:	bf 92       	push	r11
   1017c:	cf 92       	push	r12
   1017e:	df 92       	push	r13
   10180:	ef 92       	push	r14
   10182:	ff 92       	push	r15
   10184:	0f 93       	push	r16
   10186:	1f 93       	push	r17
   10188:	cf 93       	push	r28
   1018a:	df 93       	push	r29
   1018c:	cd b7       	in	r28, 0x3d	; 61
   1018e:	de b7       	in	r29, 0x3e	; 62
   10190:	c8 53       	subi	r28, 0x38	; 56
   10192:	d1 40       	sbci	r29, 0x01	; 1
   10194:	0f b6       	in	r0, 0x3f	; 63
   10196:	f8 94       	cli
   10198:	de bf       	out	0x3e, r29	; 62
   1019a:	0f be       	out	0x3f, r0	; 63
   1019c:	cd bf       	out	0x3d, r28	; 61
   1019e:	7c 01       	movw	r14, r24
   101a0:	4b 01       	movw	r8, r22
    int files = 0;
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
   101a2:	1e 82       	std	Y+6, r1	; 0x06
   101a4:	8e 01       	movw	r16, r28
   101a6:	0a 5f       	subi	r16, 0xFA	; 250
   101a8:	1f 4f       	sbci	r17, 0xFF	; 255
    if(!name || !*name || MATCH(name,".") )
   101aa:	00 97       	sbiw	r24, 0x00	; 0
   101ac:	51 f4       	brne	.+20     	; 0x101c2 <ls+0x58>
    {
        if( !getcwd(fullpath, sizeof(fullpath)-2) )
   101ae:	6f ef       	ldi	r22, 0xFF	; 255
   101b0:	70 e0       	ldi	r23, 0x00	; 0
   101b2:	c8 01       	movw	r24, r16
   101b4:	0e 94 51 77 	call	0xeea2	; 0xeea2 <getcwd>
   101b8:	89 2b       	or	r24, r25
   101ba:	91 f4       	brne	.+36     	; 0x101e0 <ls+0x76>
        {
            printf("ls: Can't get current directory\n");
   101bc:	88 e4       	ldi	r24, 0x48	; 72
   101be:	9c e0       	ldi	r25, 0x0C	; 12
   101c0:	6a c0       	rjmp	.+212    	; 0x10296 <ls+0x12c>
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
    if(!name || !*name || MATCH(name,".") )
   101c2:	fc 01       	movw	r30, r24
   101c4:	80 81       	ld	r24, Z
   101c6:	88 23       	and	r24, r24
   101c8:	91 f3       	breq	.-28     	; 0x101ae <ls+0x44>
   101ca:	61 ef       	ldi	r22, 0xF1	; 241
   101cc:	72 e1       	ldi	r23, 0x12	; 18
   101ce:	c7 01       	movw	r24, r14
   101d0:	0e 94 24 32 	call	0x6448	; 0x6448 <MATCH>
   101d4:	89 2b       	or	r24, r25
   101d6:	59 f7       	brne	.-42     	; 0x101ae <ls+0x44>

        }
    }
    else
    {
        strcpy(fullpath,name);
   101d8:	b7 01       	movw	r22, r14
   101da:	c8 01       	movw	r24, r16
   101dc:	0e 94 2c 31 	call	0x6258	; 0x6258 <strcpy>
    }
    len = strlen(fullpath);
   101e0:	f8 01       	movw	r30, r16
   101e2:	01 90       	ld	r0, Z+
   101e4:	00 20       	and	r0, r0
   101e6:	e9 f7       	brne	.-6      	; 0x101e2 <ls+0x78>
   101e8:	31 97       	sbiw	r30, 0x01	; 1
   101ea:	1f 01       	movw	r2, r30
   101ec:	20 1a       	sub	r2, r16
   101ee:	31 0a       	sbc	r3, r17


    if (stat(fullpath, &st))
   101f0:	be 01       	movw	r22, r28
   101f2:	69 5f       	subi	r22, 0xF9	; 249
   101f4:	7e 4f       	sbci	r23, 0xFE	; 254
   101f6:	c8 01       	movw	r24, r16
   101f8:	32 d8       	rcall	.-3996   	; 0xf25e <stat>
    {
        printf("ls: cannot stat [%s]\n", fullpath);
   101fa:	ed b7       	in	r30, 0x3d	; 61
   101fc:	fe b7       	in	r31, 0x3e	; 62
   101fe:	15 83       	std	Z+5, r17	; 0x05
   10200:	04 83       	std	Z+4, r16	; 0x04
        strcpy(fullpath,name);
    }
    len = strlen(fullpath);


    if (stat(fullpath, &st))
   10202:	89 2b       	or	r24, r25
   10204:	59 f0       	breq	.+22     	; 0x1021c <ls+0xb2>
    {
        printf("ls: cannot stat [%s]\n", fullpath);
   10206:	82 e3       	ldi	r24, 0x32	; 50
   10208:	9c e0       	ldi	r25, 0x0C	; 12
   1020a:	a0 e0       	ldi	r26, 0x00	; 0
   1020c:	81 83       	std	Z+1, r24	; 0x01
   1020e:	92 83       	std	Z+2, r25	; 0x02
   10210:	a3 83       	std	Z+3, r26	; 0x03
   10212:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
        return(-1);
   10216:	8f ef       	ldi	r24, 0xFF	; 255
   10218:	9f ef       	ldi	r25, 0xFF	; 255
   1021a:	96 c0       	rjmp	.+300    	; 0x10348 <ls+0x1de>
    }
    printf("Listing:[%s]\n",fullpath);
   1021c:	84 e2       	ldi	r24, 0x24	; 36
   1021e:	9c e0       	ldi	r25, 0x0C	; 12
   10220:	a0 e0       	ldi	r26, 0x00	; 0
   10222:	81 83       	std	Z+1, r24	; 0x01
   10224:	92 83       	std	Z+2, r25	; 0x02
   10226:	a3 83       	std	Z+3, r26	; 0x03
   10228:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>

    switch (st.st_mode & S_IFMT)
   1022c:	c1 5f       	subi	r28, 0xF1	; 241
   1022e:	de 4f       	sbci	r29, 0xFE	; 254
   10230:	88 81       	ld	r24, Y
   10232:	99 81       	ldd	r25, Y+1	; 0x01
   10234:	aa 81       	ldd	r26, Y+2	; 0x02
   10236:	bb 81       	ldd	r27, Y+3	; 0x03
   10238:	cf 50       	subi	r28, 0x0F	; 15
   1023a:	d1 40       	sbci	r29, 0x01	; 1
   1023c:	88 27       	eor	r24, r24
   1023e:	90 7f       	andi	r25, 0xF0	; 240
   10240:	aa 27       	eor	r26, r26
   10242:	bb 27       	eor	r27, r27
   10244:	81 15       	cp	r24, r1
   10246:	f0 e4       	ldi	r31, 0x40	; 64
   10248:	9f 07       	cpc	r25, r31
   1024a:	a1 05       	cpc	r26, r1
   1024c:	b1 05       	cpc	r27, r1
   1024e:	59 f0       	breq	.+22     	; 0x10266 <ls+0xfc>
   10250:	81 15       	cp	r24, r1
   10252:	90 48       	sbci	r25, 0x80	; 128
   10254:	a1 05       	cpc	r26, r1
   10256:	b1 05       	cpc	r27, r1
   10258:	09 f0       	breq	.+2      	; 0x1025c <ls+0xf2>
   1025a:	67 c0       	rjmp	.+206    	; 0x1032a <ls+0x1c0>
    {
        case S_IFREG:
            files = ls_info(fullpath,verbose);
   1025c:	b4 01       	movw	r22, r8
   1025e:	c8 01       	movw	r24, r16
   10260:	c9 de       	rcall	.-622    	; 0xfff4 <ls_info>
   10262:	7c 01       	movw	r14, r24
            break;
   10264:	64 c0       	rjmp	.+200    	; 0x1032e <ls+0x1c4>
        case S_IFDIR:
            dirp = opendir(fullpath);
   10266:	c8 01       	movw	r24, r16
   10268:	0e 94 ff 77 	call	0xeffe	; 0xeffe <opendir>
   1026c:	5c 01       	movw	r10, r24
            if(!dirp)
   1026e:	89 2b       	or	r24, r25
   10270:	81 f0       	breq	.+32     	; 0x10292 <ls+0x128>
    }
    else
    {
        strcpy(fullpath,name);
    }
    len = strlen(fullpath);
   10272:	e1 2c       	mov	r14, r1
   10274:	f1 2c       	mov	r15, r1
                    strcat(fullpath,"/");
                }
                strcat(fullpath,de->d_name);
                files +=ls_info(fullpath,verbose);
// restore path
                fullpath[len] = 0;
   10276:	c8 01       	movw	r24, r16
   10278:	82 0d       	add	r24, r2
   1027a:	93 1d       	adc	r25, r3
   1027c:	c9 5c       	subi	r28, 0xC9	; 201
   1027e:	de 4f       	sbci	r29, 0xFE	; 254
   10280:	99 83       	std	Y+1, r25	; 0x01
   10282:	88 83       	st	Y, r24
   10284:	c7 53       	subi	r28, 0x37	; 55
   10286:	d1 40       	sbci	r29, 0x01	; 1
                    break;
// FIXME neeed beetter string length tests here
                len2 = strlen(de->d_name);
                if(len + len2 >= MAX_NAME_LEN)
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
   10288:	81 ef       	ldi	r24, 0xF1	; 241
   1028a:	9b e0       	ldi	r25, 0x0B	; 11
   1028c:	2c 01       	movw	r4, r24
   1028e:	61 2c       	mov	r6, r1
   10290:	25 c0       	rjmp	.+74     	; 0x102dc <ls+0x172>
            break;
        case S_IFDIR:
            dirp = opendir(fullpath);
            if(!dirp)
            {
                printf("opendir failed\n");
   10292:	84 e1       	ldi	r24, 0x14	; 20
   10294:	9c e0       	ldi	r25, 0x0C	; 12
   10296:	a0 e0       	ldi	r26, 0x00	; 0
   10298:	ed b7       	in	r30, 0x3d	; 61
   1029a:	fe b7       	in	r31, 0x3e	; 62
   1029c:	81 83       	std	Z+1, r24	; 0x01
   1029e:	92 83       	std	Z+2, r25	; 0x02
   102a0:	a3 83       	std	Z+3, r26	; 0x03
   102a2:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   102a6:	b7 cf       	rjmp	.-146    	; 0x10216 <ls+0xac>
                return(-1);
            }
            while ( (de = readdir(dirp)) )
            {
                if(de->d_name[0] == 0)
   102a8:	f6 01       	movw	r30, r12
   102aa:	80 81       	ld	r24, Z
   102ac:	88 23       	and	r24, r24
   102ae:	e1 f0       	breq	.+56     	; 0x102e8 <ls+0x17e>
                    break;
// FIXME neeed beetter string length tests here
                len2 = strlen(de->d_name);
   102b0:	f6 01       	movw	r30, r12
   102b2:	01 90       	ld	r0, Z+
   102b4:	00 20       	and	r0, r0
   102b6:	e9 f7       	brne	.-6      	; 0x102b2 <ls+0x148>
   102b8:	31 97       	sbiw	r30, 0x01	; 1
   102ba:	ec 19       	sub	r30, r12
   102bc:	fd 09       	sbc	r31, r13
                if(len + len2 >= MAX_NAME_LEN)
   102be:	e2 0d       	add	r30, r2
   102c0:	f3 1d       	adc	r31, r3
   102c2:	ef 3f       	cpi	r30, 0xFF	; 255
   102c4:	f1 05       	cpc	r31, r1
   102c6:	a1 f0       	breq	.+40     	; 0x102f0 <ls+0x186>
   102c8:	9c f0       	brlt	.+38     	; 0x102f0 <ls+0x186>
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
   102ca:	ed b7       	in	r30, 0x3d	; 61
   102cc:	fe b7       	in	r31, 0x3e	; 62
   102ce:	d5 82       	std	Z+5, r13	; 0x05
   102d0:	c4 82       	std	Z+4, r12	; 0x04
   102d2:	41 82       	std	Z+1, r4	; 0x01
   102d4:	52 82       	std	Z+2, r5	; 0x02
   102d6:	63 82       	std	Z+3, r6	; 0x03
   102d8:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
            if(!dirp)
            {
                printf("opendir failed\n");
                return(-1);
            }
            while ( (de = readdir(dirp)) )
   102dc:	c5 01       	movw	r24, r10
   102de:	0e 94 1d 78 	call	0xf03a	; 0xf03a <readdir>
   102e2:	6c 01       	movw	r12, r24
   102e4:	89 2b       	or	r24, r25
   102e6:	01 f7       	brne	.-64     	; 0x102a8 <ls+0x13e>
#ifdef ESP8266
                optimistic_yield(1000);
                wdt_reset();
#endif
            }
            closedir(dirp);
   102e8:	c5 01       	movw	r24, r10
   102ea:	0e 94 e4 77 	call	0xefc8	; 0xefc8 <closedir>
            break;
   102ee:	1f c0       	rjmp	.+62     	; 0x1032e <ls+0x1c4>
                if(len + len2 >= MAX_NAME_LEN)
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
                    continue;
                }
                if(!MATCH(fullpath,"/") )
   102f0:	66 ea       	ldi	r22, 0xA6	; 166
   102f2:	78 e0       	ldi	r23, 0x08	; 8
   102f4:	c8 01       	movw	r24, r16
   102f6:	0e 94 24 32 	call	0x6448	; 0x6448 <MATCH>
   102fa:	89 2b       	or	r24, r25
   102fc:	29 f4       	brne	.+10     	; 0x10308 <ls+0x19e>
                {
                    strcat(fullpath,"/");
   102fe:	66 ea       	ldi	r22, 0xA6	; 166
   10300:	78 e0       	ldi	r23, 0x08	; 8
   10302:	c8 01       	movw	r24, r16
   10304:	0e 94 4d 31 	call	0x629a	; 0x629a <strcat>
                }
                strcat(fullpath,de->d_name);
   10308:	b6 01       	movw	r22, r12
   1030a:	c8 01       	movw	r24, r16
   1030c:	0e 94 4d 31 	call	0x629a	; 0x629a <strcat>
                files +=ls_info(fullpath,verbose);
   10310:	b4 01       	movw	r22, r8
   10312:	c8 01       	movw	r24, r16
   10314:	6f de       	rcall	.-802    	; 0xfff4 <ls_info>
   10316:	e8 0e       	add	r14, r24
   10318:	f9 1e       	adc	r15, r25
// restore path
                fullpath[len] = 0;
   1031a:	c9 5c       	subi	r28, 0xC9	; 201
   1031c:	de 4f       	sbci	r29, 0xFE	; 254
   1031e:	e8 81       	ld	r30, Y
   10320:	f9 81       	ldd	r31, Y+1	; 0x01
   10322:	c7 53       	subi	r28, 0x37	; 55
   10324:	d1 40       	sbci	r29, 0x01	; 1
   10326:	10 82       	st	Z, r1
   10328:	d9 cf       	rjmp	.-78     	; 0x102dc <ls+0x172>
MEMSPACE
int ls(char *name, int verbose)
{
    struct stat st;
    DIR *dirp;
    int files = 0;
   1032a:	e1 2c       	mov	r14, r1
   1032c:	f1 2c       	mov	r15, r1
#endif
            }
            closedir(dirp);
            break;
    }
    printf("Files: %d\n", (int)files);
   1032e:	ed b7       	in	r30, 0x3d	; 61
   10330:	fe b7       	in	r31, 0x3e	; 62
   10332:	f5 82       	std	Z+5, r15	; 0x05
   10334:	e4 82       	std	Z+4, r14	; 0x04
   10336:	86 ee       	ldi	r24, 0xE6	; 230
   10338:	9b e0       	ldi	r25, 0x0B	; 11
   1033a:	a0 e0       	ldi	r26, 0x00	; 0
   1033c:	81 83       	std	Z+1, r24	; 0x01
   1033e:	92 83       	std	Z+2, r25	; 0x02
   10340:	a3 83       	std	Z+3, r26	; 0x03
   10342:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    return(files);
   10346:	c7 01       	movw	r24, r14
}
   10348:	c8 5c       	subi	r28, 0xC8	; 200
   1034a:	de 4f       	sbci	r29, 0xFE	; 254
   1034c:	0f b6       	in	r0, 0x3f	; 63
   1034e:	f8 94       	cli
   10350:	de bf       	out	0x3e, r29	; 62
   10352:	0f be       	out	0x3f, r0	; 63
   10354:	cd bf       	out	0x3d, r28	; 61
   10356:	df 91       	pop	r29
   10358:	cf 91       	pop	r28
   1035a:	1f 91       	pop	r17
   1035c:	0f 91       	pop	r16
   1035e:	ff 90       	pop	r15
   10360:	ef 90       	pop	r14
   10362:	df 90       	pop	r13
   10364:	cf 90       	pop	r12
   10366:	bf 90       	pop	r11
   10368:	af 90       	pop	r10
   1036a:	9f 90       	pop	r9
   1036c:	8f 90       	pop	r8
   1036e:	6f 90       	pop	r6
   10370:	5f 90       	pop	r5
   10372:	4f 90       	pop	r4
   10374:	3f 90       	pop	r3
   10376:	2f 90       	pop	r2
   10378:	08 95       	ret

0001037a <posix_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int posix_tests(int argc,char *argv[])
{
   1037a:	a7 e0       	ldi	r26, 0x07	; 7
   1037c:	b1 e0       	ldi	r27, 0x01	; 1
   1037e:	e3 ec       	ldi	r30, 0xC3	; 195
   10380:	f1 e8       	ldi	r31, 0x81	; 129
   10382:	0c 94 bd e6 	jmp	0x1cd7a	; 0x1cd7a <__prologue_saves__+0x4>
    char *ptr;
    int ind = 0;

	if(argc < 1)
   10386:	18 16       	cp	r1, r24
   10388:	19 06       	cpc	r1, r25
   1038a:	1c f0       	brlt	.+6      	; 0x10392 <posix_tests+0x18>
		return(0);
   1038c:	80 e0       	ldi	r24, 0x00	; 0
   1038e:	90 e0       	ldi	r25, 0x00	; 0
   10390:	dd c1       	rjmp	.+954    	; 0x1074c <posix_tests+0x3d2>

    ptr = argv[ind++];
   10392:	fb 01       	movw	r30, r22
   10394:	c0 80       	ld	r12, Z
   10396:	d1 80       	ldd	r13, Z+1	; 0x01
	printf("argv[%d]=%s\n",(int)i, argv[i]);
}
#endif


    if(!ptr)
   10398:	c1 14       	cp	r12, r1
   1039a:	d1 04       	cpc	r13, r1
   1039c:	b9 f3       	breq	.-18     	; 0x1038c <posix_tests+0x12>
   1039e:	4b 01       	movw	r8, r22
   103a0:	3c 01       	movw	r6, r24
        return(0);	// nothing no match

    if( MATCH(ptr,"posix") )
   103a2:	6e eb       	ldi	r22, 0xBE	; 190
   103a4:	7b e0       	ldi	r23, 0x0B	; 11
   103a6:	c6 01       	movw	r24, r12
   103a8:	0e 94 24 32 	call	0x6448	; 0x6448 <MATCH>
   103ac:	89 2b       	or	r24, r25
   103ae:	a1 f0       	breq	.+40     	; 0x103d8 <posix_tests+0x5e>
    {
        ptr = argv[ind++];
   103b0:	f4 01       	movw	r30, r8
   103b2:	c2 80       	ldd	r12, Z+2	; 0x02
   103b4:	d3 80       	ldd	r13, Z+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
   103b6:	c1 14       	cp	r12, r1
   103b8:	d1 04       	cpc	r13, r1
   103ba:	21 f4       	brne	.+8      	; 0x103c4 <posix_tests+0x4a>
        {
            posix_help(1);
   103bc:	81 e0       	ldi	r24, 0x01	; 1
   103be:	90 e0       	ldi	r25, 0x00	; 0
   103c0:	75 dc       	rcall	.-1814   	; 0xfcac <posix_help>
   103c2:	45 c1       	rjmp	.+650    	; 0x1064e <posix_tests+0x2d4>
        return(0);	// nothing no match

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
   103c4:	6d e6       	ldi	r22, 0x6D	; 109
   103c6:	76 e1       	ldi	r23, 0x16	; 22
   103c8:	c6 01       	movw	r24, r12
   103ca:	0e 94 24 32 	call	0x6448	; 0x6448 <MATCH>
   103ce:	89 2b       	or	r24, r25
   103d0:	a9 f7       	brne	.-22     	; 0x103bc <posix_tests+0x42>
    if(!ptr)
        return(0);	// nothing no match

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
   103d2:	02 e0       	ldi	r16, 0x02	; 2
   103d4:	10 e0       	ldi	r17, 0x00	; 0
   103d6:	02 c0       	rjmp	.+4      	; 0x103dc <posix_tests+0x62>
    int ind = 0;

	if(argc < 1)
		return(0);

    ptr = argv[ind++];
   103d8:	01 e0       	ldi	r16, 0x01	; 1
   103da:	10 e0       	ldi	r17, 0x00	; 0
            posix_help(1);
            return(1);
        }
    }

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
   103dc:	78 01       	movw	r14, r16
   103de:	ff ef       	ldi	r31, 0xFF	; 255
   103e0:	ef 1a       	sub	r14, r31
   103e2:	ff 0a       	sbc	r15, r31
   103e4:	93 01       	movw	r18, r6
   103e6:	a7 01       	movw	r20, r14
   103e8:	64 ec       	ldi	r22, 0xC4	; 196
   103ea:	7b e0       	ldi	r23, 0x0B	; 11
   103ec:	c6 01       	movw	r24, r12
   103ee:	0e 94 4c 32 	call	0x6498	; 0x6498 <MATCHARGS>
   103f2:	89 2b       	or	r24, r25
   103f4:	99 f1       	breq	.+102    	; 0x1045c <posix_tests+0xe2>
   103f6:	78 01       	movw	r14, r16
   103f8:	ee 0c       	add	r14, r14
   103fa:	ff 1c       	adc	r15, r15
   103fc:	e8 0c       	add	r14, r8
   103fe:	f9 1c       	adc	r15, r9
   10400:	57 01       	movw	r10, r14
   10402:	47 01       	movw	r8, r14
   10404:	68 01       	movw	r12, r16
   10406:	41 2c       	mov	r4, r1
   10408:	51 2c       	mov	r5, r1
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   1040a:	c6 14       	cp	r12, r6
   1040c:	d7 04       	cpc	r13, r7
   1040e:	14 f5       	brge	.+68     	; 0x10454 <posix_tests+0xda>
        {
            if(MATCH(argv[i],"-p"))
   10410:	68 ec       	ldi	r22, 0xC8	; 200
   10412:	7b e0       	ldi	r23, 0x0B	; 11
   10414:	f4 01       	movw	r30, r8
   10416:	81 91       	ld	r24, Z+
   10418:	91 91       	ld	r25, Z+
   1041a:	4f 01       	movw	r8, r30
   1041c:	0e 94 24 32 	call	0x6448	; 0x6448 <MATCH>
   10420:	89 2b       	or	r24, r25
   10422:	19 f0       	breq	.+6      	; 0x1042a <posix_tests+0xb0>
                page = 1;
   10424:	44 24       	eor	r4, r4
   10426:	43 94       	inc	r4
   10428:	51 2c       	mov	r5, r1

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   1042a:	ff ef       	ldi	r31, 0xFF	; 255
   1042c:	cf 1a       	sub	r12, r31
   1042e:	df 0a       	sbc	r13, r31
   10430:	ec cf       	rjmp	.-40     	; 0x1040a <posix_tests+0x90>
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
        {
            if(!MATCH(argv[i],"-p"))
   10432:	68 ec       	ldi	r22, 0xC8	; 200
   10434:	7b e0       	ldi	r23, 0x0B	; 11
   10436:	f5 01       	movw	r30, r10
   10438:	81 91       	ld	r24, Z+
   1043a:	91 91       	ld	r25, Z+
   1043c:	5f 01       	movw	r10, r30
   1043e:	0e 94 24 32 	call	0x6448	; 0x6448 <MATCH>
   10442:	89 2b       	or	r24, r25
   10444:	29 f4       	brne	.+10     	; 0x10450 <posix_tests+0xd6>
			{
				// displays its own errors
                cat(argv[ind], page);
   10446:	b2 01       	movw	r22, r4
   10448:	f7 01       	movw	r30, r14
   1044a:	80 81       	ld	r24, Z
   1044c:	91 81       	ldd	r25, Z+1	; 0x01
   1044e:	65 dd       	rcall	.-1334   	; 0xff1a <cat>
        for(i=ind;i<argc;++i)
        {
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
   10450:	0f 5f       	subi	r16, 0xFF	; 255
   10452:	1f 4f       	sbci	r17, 0xFF	; 255
   10454:	06 15       	cp	r16, r6
   10456:	17 05       	cpc	r17, r7
   10458:	64 f3       	brlt	.-40     	; 0x10432 <posix_tests+0xb8>
   1045a:	f9 c0       	rjmp	.+498    	; 0x1064e <posix_tests+0x2d4>
		}
        return(1);
    }
#endif

    else if (MATCHARGS(ptr,"copy", (ind + 2), argc))
   1045c:	58 01       	movw	r10, r16
   1045e:	f2 e0       	ldi	r31, 0x02	; 2
   10460:	af 0e       	add	r10, r31
   10462:	b1 1c       	adc	r11, r1
   10464:	93 01       	movw	r18, r6
   10466:	a5 01       	movw	r20, r10
   10468:	6b ec       	ldi	r22, 0xCB	; 203
   1046a:	7b e0       	ldi	r23, 0x0B	; 11
   1046c:	c6 01       	movw	r24, r12
   1046e:	0e 94 4c 32 	call	0x6498	; 0x6498 <MATCHARGS>
   10472:	89 2b       	or	r24, r25
   10474:	69 f0       	breq	.+26     	; 0x10490 <posix_tests+0x116>
    {
		if( copy(argv[ind],argv[ind+1]) < 0)
   10476:	f8 01       	movw	r30, r16
   10478:	ee 0f       	add	r30, r30
   1047a:	ff 1f       	adc	r31, r31
   1047c:	e8 0d       	add	r30, r8
   1047e:	f9 1d       	adc	r31, r9
   10480:	62 81       	ldd	r22, Z+2	; 0x02
   10482:	73 81       	ldd	r23, Z+3	; 0x03
   10484:	80 81       	ld	r24, Z
   10486:	91 81       	ldd	r25, Z+1	; 0x01
   10488:	32 dc       	rcall	.-1948   	; 0xfcee <copy>
   1048a:	97 ff       	sbrs	r25, 7
   1048c:	e0 c0       	rjmp	.+448    	; 0x1064e <posix_tests+0x2d4>
   1048e:	5c c1       	rjmp	.+696    	; 0x10748 <posix_tests+0x3ce>
			return(-1);
        return(1);
    }

    else if (MATCHARGS(ptr,"cd", (ind + 1), argc))
   10490:	93 01       	movw	r18, r6
   10492:	a7 01       	movw	r20, r14
   10494:	60 ed       	ldi	r22, 0xD0	; 208
   10496:	7b e0       	ldi	r23, 0x0B	; 11
   10498:	c6 01       	movw	r24, r12
   1049a:	0e 94 4c 32 	call	0x6498	; 0x6498 <MATCHARGS>
   1049e:	89 2b       	or	r24, r25
   104a0:	b9 f0       	breq	.+46     	; 0x104d0 <posix_tests+0x156>
    {
        if ( chdir(argv[ind]) != 0)
   104a2:	78 01       	movw	r14, r16
   104a4:	ee 0c       	add	r14, r14
   104a6:	ff 1c       	adc	r15, r15
   104a8:	e8 0c       	add	r14, r8
   104aa:	f9 1c       	adc	r15, r9
   104ac:	f7 01       	movw	r30, r14
   104ae:	80 81       	ld	r24, Z
   104b0:	91 81       	ldd	r25, Z+1	; 0x01
   104b2:	0e 94 09 77 	call	0xee12	; 0xee12 <chdir>
   104b6:	89 2b       	or	r24, r25
   104b8:	09 f4       	brne	.+2      	; 0x104bc <posix_tests+0x142>
   104ba:	c9 c0       	rjmp	.+402    	; 0x1064e <posix_tests+0x2d4>
		{
            printf("chdir %s failed\n", argv[ind]);
   104bc:	f7 01       	movw	r30, r14
   104be:	80 81       	ld	r24, Z
   104c0:	91 81       	ldd	r25, Z+1	; 0x01
   104c2:	ed b7       	in	r30, 0x3d	; 61
   104c4:	fe b7       	in	r31, 0x3e	; 62
   104c6:	95 83       	std	Z+5, r25	; 0x05
   104c8:	84 83       	std	Z+4, r24	; 0x04
   104ca:	8d e9       	ldi	r24, 0x9D	; 157
   104cc:	9d e0       	ldi	r25, 0x0D	; 13
   104ce:	36 c1       	rjmp	.+620    	; 0x1073c <posix_tests+0x3c2>
			return(-1);
        return(1);
    }
#endif

    else if (MATCHI(ptr,"ls") )
   104d0:	68 ed       	ldi	r22, 0xD8	; 216
   104d2:	78 e0       	ldi	r23, 0x08	; 8
   104d4:	c6 01       	movw	r24, r12
   104d6:	0e 94 38 32 	call	0x6470	; 0x6470 <MATCHI>
   104da:	89 2b       	or	r24, r25
   104dc:	09 f4       	brne	.+2      	; 0x104e0 <posix_tests+0x166>
   104de:	40 c0       	rjmp	.+128    	; 0x10560 <posix_tests+0x1e6>
   104e0:	78 01       	movw	r14, r16
   104e2:	ee 0c       	add	r14, r14
   104e4:	ff 1c       	adc	r15, r15
   104e6:	e8 0c       	add	r14, r8
   104e8:	f9 1c       	adc	r15, r9
   104ea:	c1 2c       	mov	r12, r1
   104ec:	d1 2c       	mov	r13, r1
        int args = 0;
        for(i=ind;i<argc;++i)
        {
			if(!argv[i])
			{
				printf("ls: null argument # %d\n", i);
   104ee:	85 e8       	ldi	r24, 0x85	; 133
   104f0:	9d e0       	ldi	r25, 0x0D	; 13
   104f2:	4c 01       	movw	r8, r24
   104f4:	a1 2c       	mov	r10, r1

    else if (MATCHI(ptr,"ls") )
    {
        int i;
        int args = 0;
        for(i=ind;i<argc;++i)
   104f6:	06 15       	cp	r16, r6
   104f8:	17 05       	cpc	r17, r7
   104fa:	34 f5       	brge	.+76     	; 0x10548 <posix_tests+0x1ce>
        {
			if(!argv[i])
   104fc:	f7 01       	movw	r30, r14
   104fe:	80 81       	ld	r24, Z
   10500:	91 81       	ldd	r25, Z+1	; 0x01
   10502:	00 97       	sbiw	r24, 0x00	; 0
   10504:	51 f4       	brne	.+20     	; 0x1051a <posix_tests+0x1a0>
			{
				printf("ls: null argument # %d\n", i);
   10506:	ed b7       	in	r30, 0x3d	; 61
   10508:	fe b7       	in	r31, 0x3e	; 62
   1050a:	15 83       	std	Z+5, r17	; 0x05
   1050c:	04 83       	std	Z+4, r16	; 0x04
   1050e:	81 82       	std	Z+1, r8	; 0x01
   10510:	92 82       	std	Z+2, r9	; 0x02
   10512:	a3 82       	std	Z+3, r10	; 0x03
   10514:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
				continue;
   10518:	11 c0       	rjmp	.+34     	; 0x1053c <posix_tests+0x1c2>
			}
            if(MATCH(argv[i],"-l"))	// skip long format test - we always use long format
   1051a:	63 ed       	ldi	r22, 0xD3	; 211
   1051c:	7b e0       	ldi	r23, 0x0B	; 11
   1051e:	0e 94 24 32 	call	0x6448	; 0x6448 <MATCH>
   10522:	89 2b       	or	r24, r25
   10524:	59 f4       	brne	.+22     	; 0x1053c <posix_tests+0x1c2>
				continue;
			if( ls(argv[i],1) < 0)
   10526:	61 e0       	ldi	r22, 0x01	; 1
   10528:	70 e0       	ldi	r23, 0x00	; 0
   1052a:	f7 01       	movw	r30, r14
   1052c:	80 81       	ld	r24, Z
   1052e:	91 81       	ldd	r25, Z+1	; 0x01
   10530:	1c de       	rcall	.-968    	; 0x1016a <ls>
   10532:	97 fd       	sbrc	r25, 7
   10534:	09 c1       	rjmp	.+530    	; 0x10748 <posix_tests+0x3ce>
			{
				return(-1);
			};
            ++args;
   10536:	ff ef       	ldi	r31, 0xFF	; 255
   10538:	cf 1a       	sub	r12, r31
   1053a:	df 0a       	sbc	r13, r31

    else if (MATCHI(ptr,"ls") )
    {
        int i;
        int args = 0;
        for(i=ind;i<argc;++i)
   1053c:	0f 5f       	subi	r16, 0xFF	; 255
   1053e:	1f 4f       	sbci	r17, 0xFF	; 255
   10540:	82 e0       	ldi	r24, 0x02	; 2
   10542:	e8 0e       	add	r14, r24
   10544:	f1 1c       	adc	r15, r1
   10546:	d7 cf       	rjmp	.-82     	; 0x104f6 <posix_tests+0x17c>
			{
				return(-1);
			};
            ++args;
        }
        if(!args)
   10548:	c1 14       	cp	r12, r1
   1054a:	d1 04       	cpc	r13, r1
   1054c:	09 f0       	breq	.+2      	; 0x10550 <posix_tests+0x1d6>
   1054e:	7f c0       	rjmp	.+254    	; 0x1064e <posix_tests+0x2d4>
        {
            if( ls("",1) < 0)
   10550:	61 e0       	ldi	r22, 0x01	; 1
   10552:	70 e0       	ldi	r23, 0x00	; 0
   10554:	80 e2       	ldi	r24, 0x20	; 32
   10556:	9c e0       	ldi	r25, 0x0C	; 12
   10558:	08 de       	rcall	.-1008   	; 0x1016a <ls>
   1055a:	97 ff       	sbrs	r25, 7
   1055c:	78 c0       	rjmp	.+240    	; 0x1064e <posix_tests+0x2d4>
   1055e:	f4 c0       	rjmp	.+488    	; 0x10748 <posix_tests+0x3ce>
		}
        return(1);
    }
#endif

    else if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
   10560:	93 01       	movw	r18, r6
   10562:	a7 01       	movw	r20, r14
   10564:	66 ed       	ldi	r22, 0xD6	; 214
   10566:	7b e0       	ldi	r23, 0x0B	; 11
   10568:	c6 01       	movw	r24, r12
   1056a:	0e 94 4c 32 	call	0x6498	; 0x6498 <MATCHARGS>
   1056e:	89 2b       	or	r24, r25
   10570:	79 f1       	breq	.+94     	; 0x105d0 <posix_tests+0x256>
    {
        int mode = 0777;
        if((ind+2) <= argc)
   10572:	e6 14       	cp	r14, r6
   10574:	f7 04       	cpc	r15, r7
   10576:	7c f4       	brge	.+30     	; 0x10596 <posix_tests+0x21c>
        {
            mode = strtol(argv[ind+1],NULL,8);
   10578:	ee 0c       	add	r14, r14
   1057a:	ff 1c       	adc	r15, r15
   1057c:	f4 01       	movw	r30, r8
   1057e:	ee 0d       	add	r30, r14
   10580:	ff 1d       	adc	r31, r15
   10582:	48 e0       	ldi	r20, 0x08	; 8
   10584:	50 e0       	ldi	r21, 0x00	; 0
   10586:	60 e0       	ldi	r22, 0x00	; 0
   10588:	70 e0       	ldi	r23, 0x00	; 0
   1058a:	80 81       	ld	r24, Z
   1058c:	91 81       	ldd	r25, Z+1	; 0x01
   1058e:	0e 94 26 47 	call	0x8e4c	; 0x8e4c <strtol>
   10592:	ab 01       	movw	r20, r22
   10594:	02 c0       	rjmp	.+4      	; 0x1059a <posix_tests+0x220>
    }
#endif

    else if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
    {
        int mode = 0777;
   10596:	4f ef       	ldi	r20, 0xFF	; 255
   10598:	51 e0       	ldi	r21, 0x01	; 1
        if((ind+2) <= argc)
        {
            mode = strtol(argv[ind+1],NULL,8);
        }
        if ( mkdir(argv[ind],mode) != 0 )
   1059a:	78 01       	movw	r14, r16
   1059c:	ee 0c       	add	r14, r14
   1059e:	ff 1c       	adc	r15, r15
   105a0:	e8 0c       	add	r14, r8
   105a2:	f9 1c       	adc	r15, r9
   105a4:	05 2e       	mov	r0, r21
   105a6:	00 0c       	add	r0, r0
   105a8:	66 0b       	sbc	r22, r22
   105aa:	77 0b       	sbc	r23, r23
   105ac:	f7 01       	movw	r30, r14
   105ae:	80 81       	ld	r24, Z
   105b0:	91 81       	ldd	r25, Z+1	; 0x01
   105b2:	0e 94 76 77 	call	0xeeec	; 0xeeec <mkdir>
   105b6:	89 2b       	or	r24, r25
   105b8:	09 f4       	brne	.+2      	; 0x105bc <posix_tests+0x242>
   105ba:	49 c0       	rjmp	.+146    	; 0x1064e <posix_tests+0x2d4>
        {
            printf("mkdir %s failed\n", argv[ind]);
   105bc:	f7 01       	movw	r30, r14
   105be:	80 81       	ld	r24, Z
   105c0:	91 81       	ldd	r25, Z+1	; 0x01
   105c2:	ed b7       	in	r30, 0x3d	; 61
   105c4:	fe b7       	in	r31, 0x3e	; 62
   105c6:	95 83       	std	Z+5, r25	; 0x05
   105c8:	84 83       	std	Z+4, r24	; 0x04
   105ca:	84 e7       	ldi	r24, 0x74	; 116
   105cc:	9d e0       	ldi	r25, 0x0D	; 13
   105ce:	b6 c0       	rjmp	.+364    	; 0x1073c <posix_tests+0x3c2>
            return(-1);
        }
        return(1);
    }

    else if (MATCHARGS(ptr,"page", (ind + 1), argc))
   105d0:	93 01       	movw	r18, r6
   105d2:	a7 01       	movw	r20, r14
   105d4:	6c ed       	ldi	r22, 0xDC	; 220
   105d6:	7b e0       	ldi	r23, 0x0B	; 11
   105d8:	c6 01       	movw	r24, r12
   105da:	0e 94 4c 32 	call	0x6498	; 0x6498 <MATCHARGS>
   105de:	89 2b       	or	r24, r25
   105e0:	71 f0       	breq	.+28     	; 0x105fe <posix_tests+0x284>
    {
        setpage(atoi(argv[ind]));
   105e2:	00 0f       	add	r16, r16
   105e4:	11 1f       	adc	r17, r17
   105e6:	f4 01       	movw	r30, r8
   105e8:	e0 0f       	add	r30, r16
   105ea:	f1 1f       	adc	r31, r17
   105ec:	80 81       	ld	r24, Z
   105ee:	91 81       	ldd	r25, Z+1	; 0x01
   105f0:	0e 94 84 47 	call	0x8f08	; 0x8f08 <atoi>
/// @retrun void
static int _pagesize = 25;
MEMSPACE
int setpage(int count)
{
    _pagesize = count;
   105f4:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <_pagesize+0x1>
   105f8:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <_pagesize>
   105fc:	28 c0       	rjmp	.+80     	; 0x1064e <posix_tests+0x2d4>
    {
        setpage(atoi(argv[ind]));
        return(1);
    }

    else if (MATCHARGS(ptr,"pwd", (ind + 0), argc))
   105fe:	93 01       	movw	r18, r6
   10600:	a8 01       	movw	r20, r16
   10602:	61 ee       	ldi	r22, 0xE1	; 225
   10604:	7b e0       	ldi	r23, 0x0B	; 11
   10606:	c6 01       	movw	r24, r12
   10608:	0e 94 4c 32 	call	0x6498	; 0x6498 <MATCHARGS>
   1060c:	89 2b       	or	r24, r25
   1060e:	11 f1       	breq	.+68     	; 0x10654 <posix_tests+0x2da>
    {
        char path[256];
		char *ptr = getcwd(path, sizeof(path)-2);
   10610:	6e ef       	ldi	r22, 0xFE	; 254
   10612:	70 e0       	ldi	r23, 0x00	; 0
   10614:	ce 01       	movw	r24, r28
   10616:	08 96       	adiw	r24, 0x08	; 8
   10618:	0e 94 51 77 	call	0xeea2	; 0xeea2 <getcwd>
		if(ptr == NULL)
   1061c:	00 97       	sbiw	r24, 0x00	; 0
   1061e:	59 f4       	brne	.+22     	; 0x10636 <posix_tests+0x2bc>
		{
			printf("pwd FAILED\n");
   10620:	88 e6       	ldi	r24, 0x68	; 104
   10622:	9d e0       	ldi	r25, 0x0D	; 13
   10624:	a0 e0       	ldi	r26, 0x00	; 0
   10626:	ed b7       	in	r30, 0x3d	; 61
   10628:	fe b7       	in	r31, 0x3e	; 62
   1062a:	81 83       	std	Z+1, r24	; 0x01
   1062c:	92 83       	std	Z+2, r25	; 0x02
   1062e:	a3 83       	std	Z+3, r26	; 0x03
   10630:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   10634:	89 c0       	rjmp	.+274    	; 0x10748 <posix_tests+0x3ce>
			return(-1);
		}
        printf("%s\n", ptr);
   10636:	ed b7       	in	r30, 0x3d	; 61
   10638:	fe b7       	in	r31, 0x3e	; 62
   1063a:	95 83       	std	Z+5, r25	; 0x05
   1063c:	84 83       	std	Z+4, r24	; 0x04
   1063e:	84 e6       	ldi	r24, 0x64	; 100
   10640:	9d e0       	ldi	r25, 0x0D	; 13
   10642:	a0 e0       	ldi	r26, 0x00	; 0
   10644:	81 83       	std	Z+1, r24	; 0x01
   10646:	92 83       	std	Z+2, r25	; 0x02
   10648:	a3 83       	std	Z+3, r26	; 0x03
   1064a:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
        return(1);
   1064e:	81 e0       	ldi	r24, 0x01	; 1
   10650:	90 e0       	ldi	r25, 0x00	; 0
   10652:	7c c0       	rjmp	.+248    	; 0x1074c <posix_tests+0x3d2>
    }

    else if (MATCHARGS(ptr,"rename", (ind + 2), argc))
   10654:	93 01       	movw	r18, r6
   10656:	a5 01       	movw	r20, r10
   10658:	65 ee       	ldi	r22, 0xE5	; 229
   1065a:	7b e0       	ldi	r23, 0x0B	; 11
   1065c:	c6 01       	movw	r24, r12
   1065e:	0e 94 4c 32 	call	0x6498	; 0x6498 <MATCHARGS>
   10662:	89 2b       	or	r24, r25
   10664:	59 f1       	breq	.+86     	; 0x106bc <posix_tests+0x342>
    {
        if( rename(argv[ind],argv[ind+1]) != 0)
   10666:	00 0f       	add	r16, r16
   10668:	11 1f       	adc	r17, r17
   1066a:	64 01       	movw	r12, r8
   1066c:	c0 0e       	add	r12, r16
   1066e:	d1 1e       	adc	r13, r17
   10670:	0e 5f       	subi	r16, 0xFE	; 254
   10672:	1f 4f       	sbci	r17, 0xFF	; 255
   10674:	74 01       	movw	r14, r8
   10676:	e0 0e       	add	r14, r16
   10678:	f1 1e       	adc	r15, r17
   1067a:	f7 01       	movw	r30, r14
   1067c:	60 81       	ld	r22, Z
   1067e:	71 81       	ldd	r23, Z+1	; 0x01
   10680:	f6 01       	movw	r30, r12
   10682:	80 81       	ld	r24, Z
   10684:	91 81       	ldd	r25, Z+1	; 0x01
   10686:	0e 94 a4 77 	call	0xef48	; 0xef48 <rename>
   1068a:	89 2b       	or	r24, r25
   1068c:	01 f3       	breq	.-64     	; 0x1064e <posix_tests+0x2d4>
        {
            printf("rename %s to %s\n", argv[ind], argv[ind+1]);
   1068e:	f7 01       	movw	r30, r14
   10690:	80 81       	ld	r24, Z
   10692:	91 81       	ldd	r25, Z+1	; 0x01
   10694:	ed b7       	in	r30, 0x3d	; 61
   10696:	fe b7       	in	r31, 0x3e	; 62
   10698:	97 83       	std	Z+7, r25	; 0x07
   1069a:	86 83       	std	Z+6, r24	; 0x06
   1069c:	f6 01       	movw	r30, r12
   1069e:	80 81       	ld	r24, Z
   106a0:	91 81       	ldd	r25, Z+1	; 0x01
   106a2:	ed b7       	in	r30, 0x3d	; 61
   106a4:	fe b7       	in	r31, 0x3e	; 62
   106a6:	95 83       	std	Z+5, r25	; 0x05
   106a8:	84 83       	std	Z+4, r24	; 0x04
   106aa:	83 e5       	ldi	r24, 0x53	; 83
   106ac:	9d e0       	ldi	r25, 0x0D	; 13
   106ae:	a0 e0       	ldi	r26, 0x00	; 0
   106b0:	81 83       	std	Z+1, r24	; 0x01
   106b2:	92 83       	std	Z+2, r25	; 0x02
   106b4:	a3 83       	std	Z+3, r26	; 0x03
   106b6:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   106ba:	46 c0       	rjmp	.+140    	; 0x10748 <posix_tests+0x3ce>
            return(-1);
        }
        return(1);
    }

    else if (MATCHARGS(ptr,"rm", (ind + 1), argc))
   106bc:	93 01       	movw	r18, r6
   106be:	a7 01       	movw	r20, r14
   106c0:	6c ee       	ldi	r22, 0xEC	; 236
   106c2:	7b e0       	ldi	r23, 0x0B	; 11
   106c4:	c6 01       	movw	r24, r12
   106c6:	0e 94 4c 32 	call	0x6498	; 0x6498 <MATCHARGS>
   106ca:	89 2b       	or	r24, r25
   106cc:	b9 f0       	breq	.+46     	; 0x106fc <posix_tests+0x382>
    {
        if ( unlink(argv[ind]) != 0)
   106ce:	78 01       	movw	r14, r16
   106d0:	ee 0c       	add	r14, r14
   106d2:	ff 1c       	adc	r15, r15
   106d4:	e8 0c       	add	r14, r8
   106d6:	f9 1c       	adc	r15, r9
   106d8:	f7 01       	movw	r30, r14
   106da:	80 81       	ld	r24, Z
   106dc:	91 81       	ldd	r25, Z+1	; 0x01
   106de:	0e 94 c3 77 	call	0xef86	; 0xef86 <unlink>
   106e2:	89 2b       	or	r24, r25
   106e4:	09 f4       	brne	.+2      	; 0x106e8 <posix_tests+0x36e>
   106e6:	b3 cf       	rjmp	.-154    	; 0x1064e <posix_tests+0x2d4>
        {
            printf("rm %s failed\n", argv[ind]);
   106e8:	f7 01       	movw	r30, r14
   106ea:	80 81       	ld	r24, Z
   106ec:	91 81       	ldd	r25, Z+1	; 0x01
   106ee:	ed b7       	in	r30, 0x3d	; 61
   106f0:	fe b7       	in	r31, 0x3e	; 62
   106f2:	95 83       	std	Z+5, r25	; 0x05
   106f4:	84 83       	std	Z+4, r24	; 0x04
   106f6:	85 e4       	ldi	r24, 0x45	; 69
   106f8:	9d e0       	ldi	r25, 0x0D	; 13
   106fa:	20 c0       	rjmp	.+64     	; 0x1073c <posix_tests+0x3c2>
        dump_stat(&p);
        return(1);
    }
#endif

    else if (MATCHARGS(ptr,"rmdir", (ind + 1), argc))
   106fc:	93 01       	movw	r18, r6
   106fe:	a7 01       	movw	r20, r14
   10700:	6f ee       	ldi	r22, 0xEF	; 239
   10702:	7b e0       	ldi	r23, 0x0B	; 11
   10704:	c6 01       	movw	r24, r12
   10706:	0e 94 4c 32 	call	0x6498	; 0x6498 <MATCHARGS>
   1070a:	89 2b       	or	r24, r25
   1070c:	09 f4       	brne	.+2      	; 0x10710 <posix_tests+0x396>
   1070e:	3e ce       	rjmp	.-900    	; 0x1038c <posix_tests+0x12>
    {
        if ( rmdir(argv[ind]) != 0)
   10710:	78 01       	movw	r14, r16
   10712:	ee 0c       	add	r14, r14
   10714:	ff 1c       	adc	r15, r15
   10716:	e8 0c       	add	r14, r8
   10718:	f9 1c       	adc	r15, r9
   1071a:	f7 01       	movw	r30, r14
   1071c:	80 81       	ld	r24, Z
   1071e:	91 81       	ldd	r25, Z+1	; 0x01
   10720:	0e 94 e2 77 	call	0xefc4	; 0xefc4 <rmdir>
   10724:	89 2b       	or	r24, r25
   10726:	09 f4       	brne	.+2      	; 0x1072a <posix_tests+0x3b0>
   10728:	92 cf       	rjmp	.-220    	; 0x1064e <posix_tests+0x2d4>
        {
            printf("rmdir %s failed\n", argv[ind]);
   1072a:	f7 01       	movw	r30, r14
   1072c:	80 81       	ld	r24, Z
   1072e:	91 81       	ldd	r25, Z+1	; 0x01
   10730:	ed b7       	in	r30, 0x3d	; 61
   10732:	fe b7       	in	r31, 0x3e	; 62
   10734:	95 83       	std	Z+5, r25	; 0x05
   10736:	84 83       	std	Z+4, r24	; 0x04
   10738:	84 e3       	ldi	r24, 0x34	; 52
   1073a:	9d e0       	ldi	r25, 0x0D	; 13
   1073c:	a0 e0       	ldi	r26, 0x00	; 0
   1073e:	81 83       	std	Z+1, r24	; 0x01
   10740:	92 83       	std	Z+2, r25	; 0x02
   10742:	a3 83       	std	Z+3, r26	; 0x03
   10744:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
            return(-1);
   10748:	8f ef       	ldi	r24, 0xFF	; 255
   1074a:	9f ef       	ldi	r25, 0xFF	; 255
        return(1);
    }
#endif

    return(0);
}
   1074c:	c9 5f       	subi	r28, 0xF9	; 249
   1074e:	de 4f       	sbci	r29, 0xFE	; 254
   10750:	e0 e1       	ldi	r30, 0x10	; 16
   10752:	0c 94 d9 e6 	jmp	0x1cdb2	; 0x1cdb2 <__epilogue_restores__+0x4>

00010756 <gpib_timer_init>:
///
/// - Has some platform dependent code.
/// @return  void

void gpib_timer_init()
{
   10756:	00 d0       	rcall	.+0      	; 0x10758 <gpib_timer_init+0x2>
   10758:	1f 92       	push	r1
    if(set_timers(gpib_timer_task,1) == -1)       // Install Clock Task
   1075a:	61 e0       	ldi	r22, 0x01	; 1
   1075c:	70 e0       	ldi	r23, 0x00	; 0
   1075e:	87 e6       	ldi	r24, 0x67	; 103
   10760:	95 e8       	ldi	r25, 0x85	; 133
   10762:	0e 94 99 34 	call	0x6932	; 0x6932 <set_timers>
   10766:	01 96       	adiw	r24, 0x01	; 1
   10768:	51 f4       	brne	.+20     	; 0x1077e <gpib_timer_init+0x28>
        printf("GPIB Clock task init failed\n");
   1076a:	8a ed       	ldi	r24, 0xDA	; 218
   1076c:	9e e0       	ldi	r25, 0x0E	; 14
   1076e:	a0 e0       	ldi	r26, 0x00	; 0
   10770:	ed b7       	in	r30, 0x3d	; 61
   10772:	fe b7       	in	r31, 0x3e	; 62
   10774:	81 83       	std	Z+1, r24	; 0x01
   10776:	92 83       	std	Z+2, r25	; 0x02
   10778:	a3 83       	std	Z+3, r26	; 0x03
   1077a:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>

    gpib_timer_reset();
   1077e:	95 d1       	rcall	.+810    	; 0x10aaa <gpib_timer_reset>
}
   10780:	0f 90       	pop	r0
   10782:	0f 90       	pop	r0
   10784:	0f 90       	pop	r0
   10786:	08 95       	ret

00010788 <reverse_8bits>:
/// - GPIB D1 controls last device.
///
/// @param [in] mask: bit mask to reverse.
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
   10788:	28 2f       	mov	r18, r24
   1078a:	98 e0       	ldi	r25, 0x08	; 8
    int8_t i;
    uint8_t rmask = 0;
   1078c:	80 e0       	ldi	r24, 0x00	; 0
    for(i=0;i<8;++i)
    {
        rmask <<= 1;
   1078e:	88 0f       	add	r24, r24
        if(mask & 1)
   10790:	20 fd       	sbrc	r18, 0
            rmask |= 1;
   10792:	81 60       	ori	r24, 0x01	; 1
        mask >>= 1;
   10794:	26 95       	lsr	r18
   10796:	91 50       	subi	r25, 0x01	; 1
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
    int8_t i;
    uint8_t rmask = 0;
    for(i=0;i<8;++i)
   10798:	d1 f7       	brne	.-12     	; 0x1078e <reverse_8bits+0x6>
        if(mask & 1)
            rmask |= 1;
        mask >>= 1;
    }
    return(rmask & 0xff);
}
   1079a:	08 95       	ret

0001079c <ppr_set>:
void ppr_set(uint8_t mask)
{
///@brief optionally reverse bit order in PPR mask
/// Used only of PPR circuit board PPR bits are not reversed in hardware
#if PPR_REVERSE_BITS == 1
    _ppr_reg = reverse_8bits(mask);
   1079c:	f5 df       	rcall	.-22     	; 0x10788 <reverse_8bits>
   1079e:	80 93 5e 19 	sts	0x195E, r24	; 0x80195e <_ppr_reg>
#else
    _ppr_reg = mask;
#endif
    SPI0_TXRX_Byte(_ppr_reg);
   107a2:	0e 94 f3 2a 	call	0x55e6	; 0x55e6 <SPI0_TXRX_Byte>

    GPIB_IO_HI(PPE);
   107a6:	2a 9a       	sbi	0x05, 2	; 5
   107a8:	22 9a       	sbi	0x04, 2	; 4
    GPIB_IO_LOW(PPE);
   107aa:	2a 98       	cbi	0x05, 2	; 5
   107ac:	22 9a       	sbi	0x04, 2	; 4
   107ae:	08 95       	ret

000107b0 <ppr_reg>:
uint8_t ppr_reg()
{
///@brief optionally reverse bit order in PPR mask
/// Used only of PPR circuit board PPR bits are not reversed in hardware
#if PPR_REVERSE_BITS == 1
    return(reverse_8bits(_ppr_reg));
   107b0:	80 91 5e 19 	lds	r24, 0x195E	; 0x80195e <_ppr_reg>
   107b4:	e9 cf       	rjmp	.-46     	; 0x10788 <reverse_8bits>
#else
    return(_ppr_reg);
#endif
}
   107b6:	08 95       	ret

000107b8 <ppr_init>:
///
/// - Hides the register access implimentation from the upper level.
/// @return  void

void ppr_init()
{
   107b8:	00 d0       	rcall	.+0      	; 0x107ba <ppr_init+0x2>
   107ba:	1f 92       	push	r1
#if SDEBUG
    if(debuglevel & GPIB_PPR)
   107bc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   107c0:	81 ff       	sbrs	r24, 1
   107c2:	0a c0       	rjmp	.+20     	; 0x107d8 <ppr_init+0x20>
        printf("[PPR DISABLE ALL]\n");
   107c4:	87 ec       	ldi	r24, 0xC7	; 199
   107c6:	9e e0       	ldi	r25, 0x0E	; 14
   107c8:	a0 e0       	ldi	r26, 0x00	; 0
   107ca:	ed b7       	in	r30, 0x3d	; 61
   107cc:	fe b7       	in	r31, 0x3e	; 62
   107ce:	81 83       	std	Z+1, r24	; 0x01
   107d0:	92 83       	std	Z+2, r25	; 0x02
   107d2:	a3 83       	std	Z+3, r26	; 0x03
   107d4:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
#endif
    ppr_set(0);
   107d8:	80 e0       	ldi	r24, 0x00	; 0
   107da:	e0 df       	rcall	.-64     	; 0x1079c <ppr_set>
}
   107dc:	0f 90       	pop	r0
   107de:	0f 90       	pop	r0
   107e0:	0f 90       	pop	r0
   107e2:	08 95       	ret

000107e4 <ppr_bit_set>:
/// @return  void

void ppr_bit_set(uint8_t bit)
{
///FIXME _ppr_reg = 0;
    BIT_SET(_ppr_reg,bit);
   107e4:	21 e0       	ldi	r18, 0x01	; 1
   107e6:	30 e0       	ldi	r19, 0x00	; 0
   107e8:	01 c0       	rjmp	.+2      	; 0x107ec <ppr_bit_set+0x8>
   107ea:	22 0f       	add	r18, r18
   107ec:	8a 95       	dec	r24
   107ee:	ea f7       	brpl	.-6      	; 0x107ea <ppr_bit_set+0x6>
   107f0:	80 91 5e 19 	lds	r24, 0x195E	; 0x80195e <_ppr_reg>
   107f4:	82 2b       	or	r24, r18
   107f6:	80 93 5e 19 	sts	0x195E, r24	; 0x80195e <_ppr_reg>
    ppr_set(_ppr_reg);
   107fa:	d0 cf       	rjmp	.-96     	; 0x1079c <ppr_set>
   107fc:	08 95       	ret

000107fe <ppr_bit_clr>:
/// @return  void

void ppr_bit_clr(uint8_t bit)
{
///FIXME _ppr_reg = 0;
    BIT_CLR(_ppr_reg,bit);
   107fe:	21 e0       	ldi	r18, 0x01	; 1
   10800:	30 e0       	ldi	r19, 0x00	; 0
   10802:	01 c0       	rjmp	.+2      	; 0x10806 <ppr_bit_clr+0x8>
   10804:	22 0f       	add	r18, r18
   10806:	8a 95       	dec	r24
   10808:	ea f7       	brpl	.-6      	; 0x10804 <ppr_bit_clr+0x6>
   1080a:	20 95       	com	r18
   1080c:	80 91 5e 19 	lds	r24, 0x195E	; 0x80195e <_ppr_reg>
   10810:	82 23       	and	r24, r18
   10812:	80 93 5e 19 	sts	0x195E, r24	; 0x80195e <_ppr_reg>
    ppr_set(_ppr_reg);
   10816:	c2 cf       	rjmp	.-124    	; 0x1079c <ppr_set>
   10818:	08 95       	ret

0001081a <dbf_open>:
/// @see ff.h
///
/// @return  FRESULT f_open(fp,path, mode);

FRESULT dbf_open (FIL* fp, const TCHAR* path, BYTE mode)
{
   1081a:	0f 93       	push	r16
   1081c:	1f 93       	push	r17
   1081e:	cf 93       	push	r28
   10820:	df 93       	push	r29
   10822:	00 d0       	rcall	.+0      	; 0x10824 <dbf_open+0xa>
   10824:	00 d0       	rcall	.+0      	; 0x10826 <dbf_open+0xc>
   10826:	1f 92       	push	r1
   10828:	8b 01       	movw	r16, r22
    int rc;
    rc = f_open(fp,path, mode);
   1082a:	0e 94 93 59 	call	0xb326	; 0xb326 <f_open>
   1082e:	ec 01       	movw	r28, r24
    if(rc)
   10830:	89 2b       	or	r24, r25
   10832:	79 f0       	breq	.+30     	; 0x10852 <dbf_open+0x38>
    {
        printf("Open error:[%s] ", path);
   10834:	ed b7       	in	r30, 0x3d	; 61
   10836:	fe b7       	in	r31, 0x3e	; 62
   10838:	15 83       	std	Z+5, r17	; 0x05
   1083a:	04 83       	std	Z+4, r16	; 0x04
   1083c:	86 eb       	ldi	r24, 0xB6	; 182
   1083e:	9e e0       	ldi	r25, 0x0E	; 14
   10840:	a0 e0       	ldi	r26, 0x00	; 0
   10842:	81 83       	std	Z+1, r24	; 0x01
   10844:	92 83       	std	Z+2, r25	; 0x02
   10846:	a3 83       	std	Z+3, r26	; 0x03
   10848:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
        put_rc(rc);
   1084c:	ce 01       	movw	r24, r28
   1084e:	0e 94 5d 70 	call	0xe0ba	; 0xe0ba <put_rc>
        return (rc);
    }
    return(0);
}
   10852:	ce 01       	movw	r24, r28
   10854:	cd b7       	in	r28, 0x3d	; 61
   10856:	de b7       	in	r29, 0x3e	; 62
   10858:	25 96       	adiw	r28, 0x05	; 5
   1085a:	e4 e0       	ldi	r30, 0x04	; 4
   1085c:	0c 94 e5 e6 	jmp	0x1cdca	; 0x1cdca <__epilogue_restores__+0x1c>

00010860 <dbf_read>:
/// @see ff.h
///
/// @return  FRESULT f_read (FIL* fp, void* buff, UINT btr, UINT* br)

FRESULT dbf_read (FIL* fp, void* buff, UINT btr, UINT* br)
{
   10860:	cf 93       	push	r28
   10862:	df 93       	push	r29
   10864:	00 d0       	rcall	.+0      	; 0x10866 <dbf_read+0x6>
   10866:	1f 92       	push	r1
    int rc;
    rc = f_read(fp, buff, btr, br);
   10868:	0e 94 4b 5b 	call	0xb696	; 0xb696 <f_read>
   1086c:	ec 01       	movw	r28, r24
    if(rc)
   1086e:	89 2b       	or	r24, r25
   10870:	69 f0       	breq	.+26     	; 0x1088c <dbf_read+0x2c>
    {
        printf("Read error: ");
   10872:	89 ea       	ldi	r24, 0xA9	; 169
   10874:	9e e0       	ldi	r25, 0x0E	; 14
   10876:	a0 e0       	ldi	r26, 0x00	; 0
   10878:	ed b7       	in	r30, 0x3d	; 61
   1087a:	fe b7       	in	r31, 0x3e	; 62
   1087c:	81 83       	std	Z+1, r24	; 0x01
   1087e:	92 83       	std	Z+2, r25	; 0x02
   10880:	a3 83       	std	Z+3, r26	; 0x03
   10882:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
        put_rc(rc);
   10886:	ce 01       	movw	r24, r28
   10888:	0e 94 5d 70 	call	0xe0ba	; 0xe0ba <put_rc>
        return (rc);
    }
    return(0);
}
   1088c:	ce 01       	movw	r24, r28
   1088e:	cd b7       	in	r28, 0x3d	; 61
   10890:	de b7       	in	r29, 0x3e	; 62
   10892:	23 96       	adiw	r28, 0x03	; 3
   10894:	e2 e0       	ldi	r30, 0x02	; 2
   10896:	0c 94 e7 e6 	jmp	0x1cdce	; 0x1cdce <__epilogue_restores__+0x20>

0001089a <dbf_write>:
///
/// @see ff.h
/// @return  FRESULT f_write (FIL* fp, void* buff, UINT btw, UINT* bw)

FRESULT dbf_write (FIL* fp, const void* buff, UINT btw, UINT* bw)
{
   1089a:	cf 93       	push	r28
   1089c:	df 93       	push	r29
   1089e:	00 d0       	rcall	.+0      	; 0x108a0 <dbf_write+0x6>
   108a0:	1f 92       	push	r1
    int rc;
    rc = f_write(fp, buff, btw, bw);
   108a2:	0e 94 96 5c 	call	0xb92c	; 0xb92c <f_write>
   108a6:	ec 01       	movw	r28, r24
    if(rc)
   108a8:	89 2b       	or	r24, r25
   108aa:	69 f0       	breq	.+26     	; 0x108c6 <dbf_write+0x2c>
    {
        printf("Write error: ");
   108ac:	8b e9       	ldi	r24, 0x9B	; 155
   108ae:	9e e0       	ldi	r25, 0x0E	; 14
   108b0:	a0 e0       	ldi	r26, 0x00	; 0
   108b2:	ed b7       	in	r30, 0x3d	; 61
   108b4:	fe b7       	in	r31, 0x3e	; 62
   108b6:	81 83       	std	Z+1, r24	; 0x01
   108b8:	92 83       	std	Z+2, r25	; 0x02
   108ba:	a3 83       	std	Z+3, r26	; 0x03
   108bc:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
        put_rc(rc);
   108c0:	ce 01       	movw	r24, r28
   108c2:	0e 94 5d 70 	call	0xe0ba	; 0xe0ba <put_rc>
        return (rc);
    }
    return(0);
}
   108c6:	ce 01       	movw	r24, r28
   108c8:	cd b7       	in	r28, 0x3d	; 61
   108ca:	de b7       	in	r29, 0x3e	; 62
   108cc:	23 96       	adiw	r28, 0x03	; 3
   108ce:	e2 e0       	ldi	r30, 0x02	; 2
   108d0:	0c 94 e7 e6 	jmp	0x1cdce	; 0x1cdce <__epilogue_restores__+0x20>

000108d4 <dbf_lseek>:
///
/// @see ff.h.
/// @return  FRESULT

FRESULT dbf_lseek (FIL* fp, DWORD ofs)
{
   108d4:	cf 93       	push	r28
   108d6:	df 93       	push	r29
   108d8:	00 d0       	rcall	.+0      	; 0x108da <dbf_lseek+0x6>
   108da:	1f 92       	push	r1
    int rc;
    rc = f_lseek(fp, ofs);
   108dc:	0e 94 57 60 	call	0xc0ae	; 0xc0ae <f_lseek>
   108e0:	ec 01       	movw	r28, r24
    if(rc)
   108e2:	89 2b       	or	r24, r25
   108e4:	69 f0       	breq	.+26     	; 0x10900 <dbf_lseek+0x2c>
    {
        printf("Seek error: ");
   108e6:	8e e8       	ldi	r24, 0x8E	; 142
   108e8:	9e e0       	ldi	r25, 0x0E	; 14
   108ea:	a0 e0       	ldi	r26, 0x00	; 0
   108ec:	ed b7       	in	r30, 0x3d	; 61
   108ee:	fe b7       	in	r31, 0x3e	; 62
   108f0:	81 83       	std	Z+1, r24	; 0x01
   108f2:	92 83       	std	Z+2, r25	; 0x02
   108f4:	a3 83       	std	Z+3, r26	; 0x03
   108f6:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
        put_rc(rc);
   108fa:	ce 01       	movw	r24, r28
   108fc:	0e 94 5d 70 	call	0xe0ba	; 0xe0ba <put_rc>
        return (rc);
    }
    return(0);
}
   10900:	ce 01       	movw	r24, r28
   10902:	cd b7       	in	r28, 0x3d	; 61
   10904:	de b7       	in	r29, 0x3e	; 62
   10906:	23 96       	adiw	r28, 0x03	; 3
   10908:	e2 e0       	ldi	r30, 0x02	; 2
   1090a:	0c 94 e7 e6 	jmp	0x1cdce	; 0x1cdce <__epilogue_restores__+0x20>

0001090e <dbf_close>:
///
/// @see ff.h.
/// @return  FRESULT dbf_close (FIL* fp)

FRESULT dbf_close (FIL* fp)
{
   1090e:	cf 93       	push	r28
   10910:	df 93       	push	r29
   10912:	00 d0       	rcall	.+0      	; 0x10914 <dbf_close+0x6>
   10914:	1f 92       	push	r1
    int rc;
    rc = f_close(fp);
   10916:	0e 94 ad 5e 	call	0xbd5a	; 0xbd5a <f_close>
   1091a:	ec 01       	movw	r28, r24
    if(rc != FR_OK)
   1091c:	89 2b       	or	r24, r25
   1091e:	69 f0       	breq	.+26     	; 0x1093a <dbf_close+0x2c>
    {
        printf("Close error: ");
   10920:	80 e8       	ldi	r24, 0x80	; 128
   10922:	9e e0       	ldi	r25, 0x0E	; 14
   10924:	a0 e0       	ldi	r26, 0x00	; 0
   10926:	ed b7       	in	r30, 0x3d	; 61
   10928:	fe b7       	in	r31, 0x3e	; 62
   1092a:	81 83       	std	Z+1, r24	; 0x01
   1092c:	92 83       	std	Z+2, r25	; 0x02
   1092e:	a3 83       	std	Z+3, r26	; 0x03
   10930:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
        put_rc(rc);
   10934:	ce 01       	movw	r24, r28
   10936:	0e 94 5d 70 	call	0xe0ba	; 0xe0ba <put_rc>
        return (rc);
    }
    return(0);
}
   1093a:	ce 01       	movw	r24, r28
   1093c:	cd b7       	in	r28, 0x3d	; 61
   1093e:	de b7       	in	r29, 0x3e	; 62
   10940:	23 96       	adiw	r28, 0x03	; 3
   10942:	e2 e0       	ldi	r30, 0x02	; 2
   10944:	0c 94 e7 e6 	jmp	0x1cdce	; 0x1cdce <__epilogue_restores__+0x20>

00010948 <dbf_open_read>:
/// @return -1 on error.
/// @see: ff.h.
/// @return  FRESULT

int dbf_open_read(char *name, uint32_t pos, void *buff, int size, int *errors)
{
   10948:	a6 e2       	ldi	r26, 0x26	; 38
   1094a:	b2 e0       	ldi	r27, 0x02	; 2
   1094c:	ea ea       	ldi	r30, 0xAA	; 170
   1094e:	f4 e8       	ldi	r31, 0x84	; 132
   10950:	0c 94 c1 e6 	jmp	0x1cd82	; 0x1cd82 <__prologue_saves__+0xc>
   10954:	4a 01       	movw	r8, r20
   10956:	5b 01       	movw	r10, r22
   10958:	69 01       	movw	r12, r18
    int rc;
    FIL fp;
    int flags = 0;
    UINT bytes = 0;
   1095a:	cb 5d       	subi	r28, 0xDB	; 219
   1095c:	dd 4f       	sbci	r29, 0xFD	; 253
   1095e:	19 82       	std	Y+1, r1	; 0x01
   10960:	18 82       	st	Y, r1
   10962:	c5 52       	subi	r28, 0x25	; 37
   10964:	d2 40       	sbci	r29, 0x02	; 2

    rc = dbf_open(&fp, name, FA_OPEN_EXISTING | FA_READ | FA_WRITE);
   10966:	43 e0       	ldi	r20, 0x03	; 3
   10968:	bc 01       	movw	r22, r24
   1096a:	ce 01       	movw	r24, r28
   1096c:	01 96       	adiw	r24, 0x01	; 1
   1096e:	55 df       	rcall	.-342    	; 0x1081a <dbf_open>
    if( rc != FR_OK)
   10970:	89 2b       	or	r24, r25
   10972:	19 f0       	breq	.+6      	; 0x1097a <dbf_open_read+0x32>
    {
        flags |= ERR_DISK;
        flags |= ERR_READ;
        *errors = flags;
   10974:	81 e1       	ldi	r24, 0x11	; 17
   10976:	90 e0       	ldi	r25, 0x00	; 0
   10978:	2f c0       	rjmp	.+94     	; 0x109d8 <dbf_open_read+0x90>
        return( -1 );
    }

///  SEEK
    rc = dbf_lseek(&fp, pos);
   1097a:	b5 01       	movw	r22, r10
   1097c:	a4 01       	movw	r20, r8
   1097e:	ce 01       	movw	r24, r28
   10980:	01 96       	adiw	r24, 0x01	; 1
   10982:	a8 df       	rcall	.-176    	; 0x108d4 <dbf_lseek>
    if( rc != FR_OK)
   10984:	89 2b       	or	r24, r25
   10986:	59 f0       	breq	.+22     	; 0x1099e <dbf_open_read+0x56>
    {
        flags |= ERR_SEEK;
        flags |= ERR_READ;
        *errors = flags;
   10988:	85 e0       	ldi	r24, 0x05	; 5
   1098a:	90 e0       	ldi	r25, 0x00	; 0
   1098c:	f7 01       	movw	r30, r14
   1098e:	91 83       	std	Z+1, r25	; 0x01
   10990:	80 83       	st	Z, r24
        dbf_close(&fp);
   10992:	ce 01       	movw	r24, r28
   10994:	01 96       	adiw	r24, 0x01	; 1
   10996:	bb df       	rcall	.-138    	; 0x1090e <dbf_close>
        return( -1 );
   10998:	8f ef       	ldi	r24, 0xFF	; 255
   1099a:	9f ef       	ldi	r25, 0xFF	; 255
   1099c:	27 c0       	rjmp	.+78     	; 0x109ec <dbf_open_read+0xa4>
    }

    rc = dbf_read(&fp, buff,size,&bytes);
   1099e:	9e 01       	movw	r18, r28
   109a0:	2b 5d       	subi	r18, 0xDB	; 219
   109a2:	3d 4f       	sbci	r19, 0xFD	; 253
   109a4:	a8 01       	movw	r20, r16
   109a6:	b6 01       	movw	r22, r12
   109a8:	ce 01       	movw	r24, r28
   109aa:	01 96       	adiw	r24, 0x01	; 1
   109ac:	59 df       	rcall	.-334    	; 0x10860 <dbf_read>
    if( rc != FR_OK || (UINT) size != bytes)
   109ae:	89 2b       	or	r24, r25
   109b0:	49 f4       	brne	.+18     	; 0x109c4 <dbf_open_read+0x7c>
   109b2:	cb 5d       	subi	r28, 0xDB	; 219
   109b4:	dd 4f       	sbci	r29, 0xFD	; 253
   109b6:	88 81       	ld	r24, Y
   109b8:	99 81       	ldd	r25, Y+1	; 0x01
   109ba:	c5 52       	subi	r28, 0x25	; 37
   109bc:	d2 40       	sbci	r29, 0x02	; 2
   109be:	08 17       	cp	r16, r24
   109c0:	19 07       	cpc	r17, r25
   109c2:	19 f0       	breq	.+6      	; 0x109ca <dbf_open_read+0x82>
    {
        flags |= ERR_READ;
        *errors = flags;
   109c4:	81 e0       	ldi	r24, 0x01	; 1
   109c6:	90 e0       	ldi	r25, 0x00	; 0
        dbf_close(&fp);
        return( -1 );
    }
    rc = dbf_close(&fp);
   109c8:	e1 cf       	rjmp	.-62     	; 0x1098c <dbf_open_read+0x44>
   109ca:	ce 01       	movw	r24, r28
   109cc:	01 96       	adiw	r24, 0x01	; 1
   109ce:	9f df       	rcall	.-194    	; 0x1090e <dbf_close>
    if( rc != FR_OK)
   109d0:	89 2b       	or	r24, r25
   109d2:	31 f0       	breq	.+12     	; 0x109e0 <dbf_open_read+0x98>
    {
        flags |= ERR_DISK;
        *errors = flags;
   109d4:	80 e1       	ldi	r24, 0x10	; 16
   109d6:	90 e0       	ldi	r25, 0x00	; 0
   109d8:	f7 01       	movw	r30, r14
   109da:	91 83       	std	Z+1, r25	; 0x01
   109dc:	80 83       	st	Z, r24
   109de:	dc cf       	rjmp	.-72     	; 0x10998 <dbf_open_read+0x50>
#if 0
// test timeout - this works ok
	delayms(500); 
#endif

    return(bytes);
   109e0:	cb 5d       	subi	r28, 0xDB	; 219
   109e2:	dd 4f       	sbci	r29, 0xFD	; 253
   109e4:	88 81       	ld	r24, Y
   109e6:	99 81       	ldd	r25, Y+1	; 0x01
   109e8:	c5 52       	subi	r28, 0x25	; 37
   109ea:	d2 40       	sbci	r29, 0x02	; 2
}
   109ec:	ca 5d       	subi	r28, 0xDA	; 218
   109ee:	dd 4f       	sbci	r29, 0xFD	; 253
   109f0:	ec e0       	ldi	r30, 0x0C	; 12
   109f2:	0c 94 dd e6 	jmp	0x1cdba	; 0x1cdba <__epilogue_restores__+0xc>

000109f6 <dbf_open_write>:
/// @return  bytes actually written.
/// @return -1 on error.
/// @see: ff.h.
/// @return  FRESULT
int dbf_open_write(char *name, uint32_t pos, void *buff, int size, int *errors)
{
   109f6:	a6 e2       	ldi	r26, 0x26	; 38
   109f8:	b2 e0       	ldi	r27, 0x02	; 2
   109fa:	e1 e0       	ldi	r30, 0x01	; 1
   109fc:	f5 e8       	ldi	r31, 0x85	; 133
   109fe:	0c 94 c1 e6 	jmp	0x1cd82	; 0x1cd82 <__prologue_saves__+0xc>
   10a02:	4a 01       	movw	r8, r20
   10a04:	5b 01       	movw	r10, r22
   10a06:	69 01       	movw	r12, r18
    int rc;
    FIL fp;
    int flags = 0;
    UINT bytes = 0;
   10a08:	cb 5d       	subi	r28, 0xDB	; 219
   10a0a:	dd 4f       	sbci	r29, 0xFD	; 253
   10a0c:	19 82       	std	Y+1, r1	; 0x01
   10a0e:	18 82       	st	Y, r1
   10a10:	c5 52       	subi	r28, 0x25	; 37
   10a12:	d2 40       	sbci	r29, 0x02	; 2

    rc = dbf_open(&fp, name, FA_OPEN_EXISTING | FA_READ | FA_WRITE);
   10a14:	43 e0       	ldi	r20, 0x03	; 3
   10a16:	bc 01       	movw	r22, r24
   10a18:	ce 01       	movw	r24, r28
   10a1a:	01 96       	adiw	r24, 0x01	; 1
   10a1c:	fe de       	rcall	.-516    	; 0x1081a <dbf_open>
    if( rc != FR_OK)
   10a1e:	89 2b       	or	r24, r25
   10a20:	19 f0       	breq	.+6      	; 0x10a28 <dbf_open_write+0x32>
    {
        flags |= ERR_DISK;
        flags |= ERR_WRITE;
        *errors = flags;
   10a22:	82 e1       	ldi	r24, 0x12	; 18
   10a24:	90 e0       	ldi	r25, 0x00	; 0
   10a26:	2f c0       	rjmp	.+94     	; 0x10a86 <dbf_open_write+0x90>
        return( -1 );
    }

///  SEEK
    rc = dbf_lseek(&fp, pos);
   10a28:	b5 01       	movw	r22, r10
   10a2a:	a4 01       	movw	r20, r8
   10a2c:	ce 01       	movw	r24, r28
   10a2e:	01 96       	adiw	r24, 0x01	; 1
   10a30:	51 df       	rcall	.-350    	; 0x108d4 <dbf_lseek>
    if( rc != FR_OK)
   10a32:	89 2b       	or	r24, r25
   10a34:	59 f0       	breq	.+22     	; 0x10a4c <dbf_open_write+0x56>
    {
        flags |= ERR_SEEK;
        flags |= ERR_WRITE;
        *errors = flags;
   10a36:	86 e0       	ldi	r24, 0x06	; 6
   10a38:	90 e0       	ldi	r25, 0x00	; 0
   10a3a:	f7 01       	movw	r30, r14
   10a3c:	91 83       	std	Z+1, r25	; 0x01
   10a3e:	80 83       	st	Z, r24
        dbf_close(&fp);
   10a40:	ce 01       	movw	r24, r28
   10a42:	01 96       	adiw	r24, 0x01	; 1
   10a44:	64 df       	rcall	.-312    	; 0x1090e <dbf_close>
        return( -1 );
   10a46:	8f ef       	ldi	r24, 0xFF	; 255
   10a48:	9f ef       	ldi	r25, 0xFF	; 255
   10a4a:	27 c0       	rjmp	.+78     	; 0x10a9a <dbf_open_write+0xa4>
    }

    rc = dbf_write(&fp, buff,size,&bytes);
   10a4c:	9e 01       	movw	r18, r28
   10a4e:	2b 5d       	subi	r18, 0xDB	; 219
   10a50:	3d 4f       	sbci	r19, 0xFD	; 253
   10a52:	a8 01       	movw	r20, r16
   10a54:	b6 01       	movw	r22, r12
   10a56:	ce 01       	movw	r24, r28
   10a58:	01 96       	adiw	r24, 0x01	; 1
   10a5a:	1f df       	rcall	.-450    	; 0x1089a <dbf_write>
    if( rc != FR_OK || (UINT) size != bytes)
   10a5c:	89 2b       	or	r24, r25
   10a5e:	49 f4       	brne	.+18     	; 0x10a72 <dbf_open_write+0x7c>
   10a60:	cb 5d       	subi	r28, 0xDB	; 219
   10a62:	dd 4f       	sbci	r29, 0xFD	; 253
   10a64:	88 81       	ld	r24, Y
   10a66:	99 81       	ldd	r25, Y+1	; 0x01
   10a68:	c5 52       	subi	r28, 0x25	; 37
   10a6a:	d2 40       	sbci	r29, 0x02	; 2
   10a6c:	08 17       	cp	r16, r24
   10a6e:	19 07       	cpc	r17, r25
   10a70:	19 f0       	breq	.+6      	; 0x10a78 <dbf_open_write+0x82>
    {
        flags |= ERR_WRITE;
        *errors = flags;
   10a72:	82 e0       	ldi	r24, 0x02	; 2
   10a74:	90 e0       	ldi	r25, 0x00	; 0
        dbf_close(&fp);
        return( -1 );
    }
    rc = dbf_close(&fp);
   10a76:	e1 cf       	rjmp	.-62     	; 0x10a3a <dbf_open_write+0x44>
   10a78:	ce 01       	movw	r24, r28
   10a7a:	01 96       	adiw	r24, 0x01	; 1
   10a7c:	48 df       	rcall	.-368    	; 0x1090e <dbf_close>
    if( rc != FR_OK)
   10a7e:	89 2b       	or	r24, r25
   10a80:	31 f0       	breq	.+12     	; 0x10a8e <dbf_open_write+0x98>
    {
        flags |= ERR_DISK;
        *errors = flags;
   10a82:	80 e1       	ldi	r24, 0x10	; 16
   10a84:	90 e0       	ldi	r25, 0x00	; 0
   10a86:	f7 01       	movw	r30, r14
   10a88:	91 83       	std	Z+1, r25	; 0x01
   10a8a:	80 83       	st	Z, r24
   10a8c:	dc cf       	rjmp	.-72     	; 0x10a46 <dbf_open_write+0x50>
#if 0
// test timeout - this causes timeout
	delayms(200); 
#endif

    return(bytes);
   10a8e:	cb 5d       	subi	r28, 0xDB	; 219
   10a90:	dd 4f       	sbci	r29, 0xFD	; 253
   10a92:	88 81       	ld	r24, Y
   10a94:	99 81       	ldd	r25, Y+1	; 0x01
   10a96:	c5 52       	subi	r28, 0x25	; 37
   10a98:	d2 40       	sbci	r29, 0x02	; 2
}
   10a9a:	ca 5d       	subi	r28, 0xDA	; 218
   10a9c:	dd 4f       	sbci	r29, 0xFD	; 253
   10a9e:	ec e0       	ldi	r30, 0x0C	; 12
   10aa0:	0c 94 dd e6 	jmp	0x1cdba	; 0x1cdba <__epilogue_restores__+0xc>

00010aa4 <gpib_timer_elapsed_begin>:
            gpib_timer_elapsed_end("PP released");
#endif
        return(1);
    }
    return(0);
}
   10aa4:	0c 94 59 35 	jmp	0x6ab2	; 0x6ab2 <clock_elapsed_begin>
   10aa8:	08 95       	ret

00010aaa <gpib_timer_reset>:
   10aaa:	f8 94       	cli
   10aac:	ef ed       	ldi	r30, 0xDF	; 223
   10aae:	fc e1       	ldi	r31, 0x1C	; 28
   10ab0:	10 82       	st	Z, r1
   10ab2:	11 82       	std	Z+1, r1	; 0x01
   10ab4:	12 82       	std	Z+2, r1	; 0x02
   10ab6:	13 82       	std	Z+3, r1	; 0x03
   10ab8:	14 82       	std	Z+4, r1	; 0x04
   10aba:	15 82       	std	Z+5, r1	; 0x05
   10abc:	16 82       	std	Z+6, r1	; 0x06
   10abe:	17 82       	std	Z+7, r1	; 0x07
   10ac0:	81 e0       	ldi	r24, 0x01	; 1
   10ac2:	80 87       	std	Z+8, r24	; 0x08
   10ac4:	78 94       	sei
   10ac6:	08 95       	ret

00010ac8 <gpib_timer_elapsed_end>:
   10ac8:	0c 94 5f 35 	jmp	0x6abe	; 0x6abe <clock_elapsed_end>
   10acc:	08 95       	ret

00010ace <gpib_timer_task>:
   10ace:	f8 94       	cli
   10ad0:	80 91 e3 1c 	lds	r24, 0x1CE3	; 0x801ce3 <gpib_timer+0x4>
   10ad4:	90 91 e4 1c 	lds	r25, 0x1CE4	; 0x801ce4 <gpib_timer+0x5>
   10ad8:	a0 91 e5 1c 	lds	r26, 0x1CE5	; 0x801ce5 <gpib_timer+0x6>
   10adc:	b0 91 e6 1c 	lds	r27, 0x1CE6	; 0x801ce6 <gpib_timer+0x7>
   10ae0:	89 2b       	or	r24, r25
   10ae2:	8a 2b       	or	r24, r26
   10ae4:	8b 2b       	or	r24, r27
   10ae6:	a1 f0       	breq	.+40     	; 0x10b10 <gpib_timer_task+0x42>
   10ae8:	80 91 e3 1c 	lds	r24, 0x1CE3	; 0x801ce3 <gpib_timer+0x4>
   10aec:	90 91 e4 1c 	lds	r25, 0x1CE4	; 0x801ce4 <gpib_timer+0x5>
   10af0:	a0 91 e5 1c 	lds	r26, 0x1CE5	; 0x801ce5 <gpib_timer+0x6>
   10af4:	b0 91 e6 1c 	lds	r27, 0x1CE6	; 0x801ce6 <gpib_timer+0x7>
   10af8:	01 97       	sbiw	r24, 0x01	; 1
   10afa:	a1 09       	sbc	r26, r1
   10afc:	b1 09       	sbc	r27, r1
   10afe:	80 93 e3 1c 	sts	0x1CE3, r24	; 0x801ce3 <gpib_timer+0x4>
   10b02:	90 93 e4 1c 	sts	0x1CE4, r25	; 0x801ce4 <gpib_timer+0x5>
   10b06:	a0 93 e5 1c 	sts	0x1CE5, r26	; 0x801ce5 <gpib_timer+0x6>
   10b0a:	b0 93 e6 1c 	sts	0x1CE6, r27	; 0x801ce6 <gpib_timer+0x7>
   10b0e:	03 c0       	rjmp	.+6      	; 0x10b16 <gpib_timer_task+0x48>
   10b10:	81 e0       	ldi	r24, 0x01	; 1
   10b12:	80 93 e7 1c 	sts	0x1CE7, r24	; 0x801ce7 <gpib_timer+0x8>
   10b16:	78 94       	sei
   10b18:	08 95       	ret

00010b1a <gpib_timeout_set>:
   10b1a:	f8 94       	cli
   10b1c:	ef ed       	ldi	r30, 0xDF	; 223
   10b1e:	fc e1       	ldi	r31, 0x1C	; 28
   10b20:	64 83       	std	Z+4, r22	; 0x04
   10b22:	75 83       	std	Z+5, r23	; 0x05
   10b24:	86 83       	std	Z+6, r24	; 0x06
   10b26:	97 83       	std	Z+7, r25	; 0x07
   10b28:	10 86       	std	Z+8, r1	; 0x08
   10b2a:	78 94       	sei
   10b2c:	08 95       	ret

00010b2e <gpib_bus_init>:
   10b2e:	00 d0       	rcall	.+0      	; 0x10b30 <gpib_bus_init+0x2>
   10b30:	1f 92       	push	r1
   10b32:	8f b7       	in	r24, 0x3f	; 63
   10b34:	f8 94       	cli
   10b36:	10 92 5f 19 	sts	0x195F, r1	; 0x80195f <gpib_unread_f>
   10b3a:	11 b8       	out	0x01, r1	; 1
   10b3c:	9f ef       	ldi	r25, 0xFF	; 255
   10b3e:	92 b9       	out	0x02, r25	; 2
   10b40:	21 98       	cbi	0x04, 1	; 4
   10b42:	29 9a       	sbi	0x05, 1	; 5
   10b44:	52 98       	cbi	0x0a, 2	; 10
   10b46:	5a 9a       	sbi	0x0b, 2	; 11
   10b48:	53 98       	cbi	0x0a, 3	; 10
   10b4a:	5b 9a       	sbi	0x0b, 3	; 11
   10b4c:	56 98       	cbi	0x0a, 6	; 10
   10b4e:	5e 9a       	sbi	0x0b, 6	; 11
   10b50:	54 98       	cbi	0x0a, 4	; 10
   10b52:	5c 9a       	sbi	0x0b, 4	; 11
   10b54:	57 98       	cbi	0x0a, 7	; 10
   10b56:	5f 9a       	sbi	0x0b, 7	; 11
   10b58:	55 98       	cbi	0x0a, 5	; 10
   10b5a:	5d 9a       	sbi	0x0b, 5	; 11
   10b5c:	20 98       	cbi	0x04, 0	; 4
   10b5e:	28 9a       	sbi	0x05, 0	; 5
   10b60:	45 98       	cbi	0x08, 5	; 8
   10b62:	3d 9a       	sbi	0x07, 5	; 7
   10b64:	44 9a       	sbi	0x08, 4	; 8
   10b66:	3c 9a       	sbi	0x07, 4	; 7
   10b68:	43 98       	cbi	0x08, 3	; 8
   10b6a:	3b 9a       	sbi	0x07, 3	; 7
   10b6c:	42 98       	cbi	0x08, 2	; 8
   10b6e:	3a 9a       	sbi	0x07, 2	; 7
   10b70:	9d e0       	ldi	r25, 0x0D	; 13
   10b72:	9a 95       	dec	r25
   10b74:	f1 f7       	brne	.-4      	; 0x10b72 <gpib_bus_init+0x44>
   10b76:	00 00       	nop
   10b78:	8f bf       	out	0x3f, r24	; 63
   10b7a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10b7e:	82 ff       	sbrs	r24, 2
   10b80:	0a c0       	rjmp	.+20     	; 0x10b96 <gpib_bus_init+0x68>
   10b82:	88 e1       	ldi	r24, 0x18	; 24
   10b84:	92 e1       	ldi	r25, 0x12	; 18
   10b86:	a0 e0       	ldi	r26, 0x00	; 0
   10b88:	ed b7       	in	r30, 0x3d	; 61
   10b8a:	fe b7       	in	r31, 0x3e	; 62
   10b8c:	81 83       	std	Z+1, r24	; 0x01
   10b8e:	92 83       	std	Z+2, r25	; 0x02
   10b90:	a3 83       	std	Z+3, r26	; 0x03
   10b92:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   10b96:	0f 90       	pop	r0
   10b98:	0f 90       	pop	r0
   10b9a:	0f 90       	pop	r0
   10b9c:	08 95       	ret

00010b9e <gpib_rx_init>:
   10b9e:	9f b7       	in	r25, 0x3f	; 63
   10ba0:	f8 94       	cli
   10ba2:	11 b8       	out	0x01, r1	; 1
   10ba4:	2f ef       	ldi	r18, 0xFF	; 255
   10ba6:	22 b9       	out	0x02, r18	; 2
   10ba8:	21 98       	cbi	0x04, 1	; 4
   10baa:	29 9a       	sbi	0x05, 1	; 5
   10bac:	20 98       	cbi	0x04, 0	; 4
   10bae:	28 9a       	sbi	0x05, 0	; 5
   10bb0:	4e 9b       	sbis	0x09, 6	; 9
   10bb2:	09 c0       	rjmp	.+18     	; 0x10bc6 <gpib_rx_init+0x28>
   10bb4:	81 11       	cpse	r24, r1
   10bb6:	07 c0       	rjmp	.+14     	; 0x10bc6 <gpib_rx_init+0x28>
   10bb8:	52 98       	cbi	0x0a, 2	; 10
   10bba:	5a 9a       	sbi	0x0b, 2	; 11
   10bbc:	53 98       	cbi	0x0a, 3	; 10
   10bbe:	5b 9a       	sbi	0x0b, 3	; 11
   10bc0:	42 98       	cbi	0x08, 2	; 8
   10bc2:	3a 9a       	sbi	0x07, 2	; 7
   10bc4:	08 c0       	rjmp	.+16     	; 0x10bd6 <gpib_rx_init+0x38>
   10bc6:	42 98       	cbi	0x08, 2	; 8
   10bc8:	3a 9a       	sbi	0x07, 2	; 7
   10bca:	5b 98       	cbi	0x0b, 3	; 11
   10bcc:	53 9a       	sbi	0x0a, 3	; 10
   10bce:	5a 98       	cbi	0x0b, 2	; 11
   10bd0:	52 9a       	sbi	0x0a, 2	; 10
   10bd2:	88 23       	and	r24, r24
   10bd4:	89 f3       	breq	.-30     	; 0x10bb8 <gpib_rx_init+0x1a>
   10bd6:	9f bf       	out	0x3f, r25	; 63
   10bd8:	08 95       	ret

00010bda <gpib_tx_init>:
   10bda:	9f b7       	in	r25, 0x3f	; 63
   10bdc:	f8 94       	cli
   10bde:	11 b8       	out	0x01, r1	; 1
   10be0:	8f ef       	ldi	r24, 0xFF	; 255
   10be2:	82 b9       	out	0x02, r24	; 2
   10be4:	21 98       	cbi	0x04, 1	; 4
   10be6:	29 9a       	sbi	0x05, 1	; 5
   10be8:	52 98       	cbi	0x0a, 2	; 10
   10bea:	5a 9a       	sbi	0x0b, 2	; 11
   10bec:	53 98       	cbi	0x0a, 3	; 10
   10bee:	5b 9a       	sbi	0x0b, 3	; 11
   10bf0:	20 98       	cbi	0x04, 0	; 4
   10bf2:	28 9a       	sbi	0x05, 0	; 5
   10bf4:	42 9a       	sbi	0x08, 2	; 8
   10bf6:	3a 9a       	sbi	0x07, 2	; 7
   10bf8:	81 b9       	out	0x01, r24	; 1
   10bfa:	9f bf       	out	0x3f, r25	; 63
   10bfc:	08 95       	ret

00010bfe <gpib_state_init>:
   10bfe:	00 d0       	rcall	.+0      	; 0x10c00 <gpib_state_init+0x2>
   10c00:	1f 92       	push	r1
   10c02:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10c06:	82 ff       	sbrs	r24, 2
   10c08:	0a c0       	rjmp	.+20     	; 0x10c1e <gpib_state_init+0x20>
   10c0a:	85 e0       	ldi	r24, 0x05	; 5
   10c0c:	92 e1       	ldi	r25, 0x12	; 18
   10c0e:	a0 e0       	ldi	r26, 0x00	; 0
   10c10:	ed b7       	in	r30, 0x3d	; 61
   10c12:	fe b7       	in	r31, 0x3e	; 62
   10c14:	81 83       	std	Z+1, r24	; 0x01
   10c16:	92 83       	std	Z+2, r25	; 0x02
   10c18:	a3 83       	std	Z+3, r26	; 0x03
   10c1a:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   10c1e:	cc dd       	rcall	.-1128   	; 0x107b8 <ppr_init>
   10c20:	0e 94 a0 90 	call	0x12140	; 0x12140 <listen_cleanup>
   10c24:	0e 94 b6 91 	call	0x1236c	; 0x1236c <talk_cleanup>
   10c28:	10 92 eb 1e 	sts	0x1EEB, r1	; 0x801eeb <spoll>
   10c2c:	10 92 ee 1e 	sts	0x1EEE, r1	; 0x801eee <talking>
   10c30:	10 92 f1 1e 	sts	0x1EF1, r1	; 0x801ef1 <talking_last>
   10c34:	10 92 f0 1e 	sts	0x1EF0, r1	; 0x801ef0 <listening>
   10c38:	10 92 ea 1e 	sts	0x1EEA, r1	; 0x801eea <listening_last>
   10c3c:	10 92 e9 1c 	sts	0x1CE9, r1	; 0x801ce9 <lastcmd+0x1>
   10c40:	10 92 e8 1c 	sts	0x1CE8, r1	; 0x801ce8 <lastcmd>
   10c44:	10 92 ed 1e 	sts	0x1EED, r1	; 0x801eed <current+0x1>
   10c48:	10 92 ec 1e 	sts	0x1EEC, r1	; 0x801eec <current>
   10c4c:	10 92 ef 1e 	sts	0x1EEF, r1	; 0x801eef <secondary>
   10c50:	0f 90       	pop	r0
   10c52:	0f 90       	pop	r0
   10c54:	0f 90       	pop	r0
   10c56:	08 95       	ret

00010c58 <gpib_enable_PPR>:
   10c58:	cf 93       	push	r28
   10c5a:	df 93       	push	r29
   10c5c:	ad b7       	in	r26, 0x3d	; 61
   10c5e:	be b7       	in	r27, 0x3e	; 62
   10c60:	17 97       	sbiw	r26, 0x07	; 7
   10c62:	0f b6       	in	r0, 0x3f	; 63
   10c64:	f8 94       	cli
   10c66:	be bf       	out	0x3e, r27	; 62
   10c68:	0f be       	out	0x3f, r0	; 63
   10c6a:	ad bf       	out	0x3d, r26	; 61
   10c6c:	ec 01       	movw	r28, r24
   10c6e:	88 30       	cpi	r24, 0x08	; 8
   10c70:	91 05       	cpc	r25, r1
   10c72:	68 f0       	brcs	.+26     	; 0x10c8e <gpib_enable_PPR+0x36>
   10c74:	ed b7       	in	r30, 0x3d	; 61
   10c76:	fe b7       	in	r31, 0x3e	; 62
   10c78:	95 83       	std	Z+5, r25	; 0x05
   10c7a:	84 83       	std	Z+4, r24	; 0x04
   10c7c:	8f ed       	ldi	r24, 0xDF	; 223
   10c7e:	91 e1       	ldi	r25, 0x11	; 17
   10c80:	a0 e0       	ldi	r26, 0x00	; 0
   10c82:	81 83       	std	Z+1, r24	; 0x01
   10c84:	92 83       	std	Z+2, r25	; 0x02
   10c86:	a3 83       	std	Z+3, r26	; 0x03
   10c88:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   10c8c:	15 c0       	rjmp	.+42     	; 0x10cb8 <gpib_enable_PPR+0x60>
   10c8e:	aa dd       	rcall	.-1196   	; 0x107e4 <ppr_bit_set>
   10c90:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10c94:	81 ff       	sbrs	r24, 1
   10c96:	10 c0       	rjmp	.+32     	; 0x10cb8 <gpib_enable_PPR+0x60>
   10c98:	8b dd       	rcall	.-1258   	; 0x107b0 <ppr_reg>
   10c9a:	90 e0       	ldi	r25, 0x00	; 0
   10c9c:	ed b7       	in	r30, 0x3d	; 61
   10c9e:	fe b7       	in	r31, 0x3e	; 62
   10ca0:	97 83       	std	Z+7, r25	; 0x07
   10ca2:	86 83       	std	Z+6, r24	; 0x06
   10ca4:	d5 83       	std	Z+5, r29	; 0x05
   10ca6:	c4 83       	std	Z+4, r28	; 0x04
   10ca8:	84 ec       	ldi	r24, 0xC4	; 196
   10caa:	91 e1       	ldi	r25, 0x11	; 17
   10cac:	a0 e0       	ldi	r26, 0x00	; 0
   10cae:	81 83       	std	Z+1, r24	; 0x01
   10cb0:	92 83       	std	Z+2, r25	; 0x02
   10cb2:	a3 83       	std	Z+3, r26	; 0x03
   10cb4:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   10cb8:	cd b7       	in	r28, 0x3d	; 61
   10cba:	de b7       	in	r29, 0x3e	; 62
   10cbc:	27 96       	adiw	r28, 0x07	; 7
   10cbe:	e2 e0       	ldi	r30, 0x02	; 2
   10cc0:	0c 94 e7 e6 	jmp	0x1cdce	; 0x1cdce <__epilogue_restores__+0x20>

00010cc4 <gpib_disable_PPR>:
   10cc4:	cf 93       	push	r28
   10cc6:	df 93       	push	r29
   10cc8:	ad b7       	in	r26, 0x3d	; 61
   10cca:	be b7       	in	r27, 0x3e	; 62
   10ccc:	17 97       	sbiw	r26, 0x07	; 7
   10cce:	0f b6       	in	r0, 0x3f	; 63
   10cd0:	f8 94       	cli
   10cd2:	be bf       	out	0x3e, r27	; 62
   10cd4:	0f be       	out	0x3f, r0	; 63
   10cd6:	ad bf       	out	0x3d, r26	; 61
   10cd8:	ec 01       	movw	r28, r24
   10cda:	88 30       	cpi	r24, 0x08	; 8
   10cdc:	91 05       	cpc	r25, r1
   10cde:	68 f0       	brcs	.+26     	; 0x10cfa <gpib_disable_PPR+0x36>
   10ce0:	ed b7       	in	r30, 0x3d	; 61
   10ce2:	fe b7       	in	r31, 0x3e	; 62
   10ce4:	95 83       	std	Z+5, r25	; 0x05
   10ce6:	84 83       	std	Z+4, r24	; 0x04
   10ce8:	8d e9       	ldi	r24, 0x9D	; 157
   10cea:	91 e1       	ldi	r25, 0x11	; 17
   10cec:	a0 e0       	ldi	r26, 0x00	; 0
   10cee:	81 83       	std	Z+1, r24	; 0x01
   10cf0:	92 83       	std	Z+2, r25	; 0x02
   10cf2:	a3 83       	std	Z+3, r26	; 0x03
   10cf4:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   10cf8:	15 c0       	rjmp	.+42     	; 0x10d24 <gpib_disable_PPR+0x60>
   10cfa:	81 dd       	rcall	.-1278   	; 0x107fe <ppr_bit_clr>
   10cfc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10d00:	81 ff       	sbrs	r24, 1
   10d02:	10 c0       	rjmp	.+32     	; 0x10d24 <gpib_disable_PPR+0x60>
   10d04:	55 dd       	rcall	.-1366   	; 0x107b0 <ppr_reg>
   10d06:	90 e0       	ldi	r25, 0x00	; 0
   10d08:	ed b7       	in	r30, 0x3d	; 61
   10d0a:	fe b7       	in	r31, 0x3e	; 62
   10d0c:	97 83       	std	Z+7, r25	; 0x07
   10d0e:	86 83       	std	Z+6, r24	; 0x06
   10d10:	d5 83       	std	Z+5, r29	; 0x05
   10d12:	c4 83       	std	Z+4, r28	; 0x04
   10d14:	82 e8       	ldi	r24, 0x82	; 130
   10d16:	91 e1       	ldi	r25, 0x11	; 17
   10d18:	a0 e0       	ldi	r26, 0x00	; 0
   10d1a:	81 83       	std	Z+1, r24	; 0x01
   10d1c:	92 83       	std	Z+2, r25	; 0x02
   10d1e:	a3 83       	std	Z+3, r26	; 0x03
   10d20:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   10d24:	cd b7       	in	r28, 0x3d	; 61
   10d26:	de b7       	in	r29, 0x3e	; 62
   10d28:	27 96       	adiw	r28, 0x07	; 7
   10d2a:	e2 e0       	ldi	r30, 0x02	; 2
   10d2c:	0c 94 e7 e6 	jmp	0x1cdce	; 0x1cdce <__epilogue_restores__+0x20>

00010d30 <gpib_unread>:
///     - If ATN is LOW then we strip parity from the byte.
///   - Upper 8 bits: Status and Errors present.
///     - @see gpib.h _FLAGS defines for a full list.
/// @return ch
uint16_t gpib_unread(uint16_t ch)
{
   10d30:	cf 93       	push	r28
   10d32:	df 93       	push	r29
   10d34:	00 d0       	rcall	.+0      	; 0x10d36 <gpib_unread+0x6>
   10d36:	1f 92       	push	r1
   10d38:	ec 01       	movw	r28, r24
    if(!gpib_unread_f)
   10d3a:	80 91 5f 19 	lds	r24, 0x195F	; 0x80195f <gpib_unread_f>
   10d3e:	81 11       	cpse	r24, r1
   10d40:	08 c0       	rjmp	.+16     	; 0x10d52 <gpib_unread+0x22>
    {
        gpib_unread_data = ch;
   10d42:	d0 93 f3 1e 	sts	0x1EF3, r29	; 0x801ef3 <gpib_unread_data+0x1>
   10d46:	c0 93 f2 1e 	sts	0x1EF2, r28	; 0x801ef2 <gpib_unread_data>
        gpib_unread_f = 1;
   10d4a:	81 e0       	ldi	r24, 0x01	; 1
   10d4c:	80 93 5f 19 	sts	0x195F, r24	; 0x80195f <gpib_unread_f>
   10d50:	12 c0       	rjmp	.+36     	; 0x10d76 <gpib_unread+0x46>
    }
    else
    {
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10d52:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10d56:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10d5a:	85 70       	andi	r24, 0x05	; 5
   10d5c:	99 27       	eor	r25, r25
   10d5e:	89 2b       	or	r24, r25
   10d60:	51 f0       	breq	.+20     	; 0x10d76 <gpib_unread+0x46>
            printf("gpib_unread: error, can only be called once!\n");
   10d62:	84 e5       	ldi	r24, 0x54	; 84
   10d64:	91 e1       	ldi	r25, 0x11	; 17
   10d66:	a0 e0       	ldi	r26, 0x00	; 0
   10d68:	ed b7       	in	r30, 0x3d	; 61
   10d6a:	fe b7       	in	r31, 0x3e	; 62
   10d6c:	81 83       	std	Z+1, r24	; 0x01
   10d6e:	92 83       	std	Z+2, r25	; 0x02
   10d70:	a3 83       	std	Z+3, r26	; 0x03
   10d72:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    }
    return(ch);
}
   10d76:	ce 01       	movw	r24, r28
   10d78:	cd b7       	in	r28, 0x3d	; 61
   10d7a:	de b7       	in	r29, 0x3e	; 62
   10d7c:	23 96       	adiw	r28, 0x03	; 3
   10d7e:	e2 e0       	ldi	r30, 0x02	; 2
   10d80:	0c 94 e7 e6 	jmp	0x1cdce	; 0x1cdce <__epilogue_restores__+0x20>

00010d84 <gpib_bus_read>:

/// @brief Read GPIB data BUS only
/// @return  bus (lower 8 bits)
uint8_t gpib_bus_read()
{
    uint8_t bus = ~(GPIB_BUS_RD());
   10d84:	11 b8       	out	0x01, r1	; 1
   10d86:	80 b1       	in	r24, 0x00	; 0
   10d88:	80 95       	com	r24

///@brief if a command byte (ATN low) then strip partity
    if(!GPIB_PIN_TST(ATN))
   10d8a:	4e 9b       	sbis	0x09, 6	; 9
        bus &= 0x7f;
   10d8c:	8f 77       	andi	r24, 0x7F	; 127
    else
        bus &= 0xff;
    return(bus);
}
   10d8e:	08 95       	ret

00010d90 <gpib_control_pin_read>:
/// @return  control lines (upper 8 bits)
/// @see gpib_rx_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
    if(GPIB_PIN_TST(ATN) == 0 )
   10d90:	4e 99       	sbic	0x09, 6	; 9
   10d92:	03 c0       	rjmp	.+6      	; 0x10d9a <gpib_control_pin_read+0xa>
        control |= ATN_FLAG;
   10d94:	80 e0       	ldi	r24, 0x00	; 0
   10d96:	94 e0       	ldi	r25, 0x04	; 4
   10d98:	02 c0       	rjmp	.+4      	; 0x10d9e <gpib_control_pin_read+0xe>
///   FIXME We could add a test for read/write state ??
/// @return  control lines (upper 8 bits)
/// @see gpib_rx_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
   10d9a:	80 e0       	ldi	r24, 0x00	; 0
   10d9c:	90 e0       	ldi	r25, 0x00	; 0
    if(GPIB_PIN_TST(ATN) == 0 )
        control |= ATN_FLAG;
    if(GPIB_PIN_TST(EOI) == 0 )
   10d9e:	18 9b       	sbis	0x03, 0	; 3
        control |= EOI_FLAG;
   10da0:	91 60       	ori	r25, 0x01	; 1
    if(GPIB_PIN_TST(SRQ) == 0 )
   10da2:	4d 9b       	sbis	0x09, 5	; 9
        control |= SRQ_FLAG;
   10da4:	92 60       	ori	r25, 0x02	; 2
    if(GPIB_PIN_TST(REN) == 0 )
   10da6:	4f 9b       	sbis	0x09, 7	; 9
        control |= REN_FLAG;
   10da8:	98 60       	ori	r25, 0x08	; 8
    if(GPIB_PIN_TST(IFC) == 0 )
   10daa:	4c 9b       	sbis	0x09, 4	; 9
        control |= IFC_FLAG;
   10dac:	90 61       	ori	r25, 0x10	; 16
    return(control);
}
   10dae:	08 95       	ret

00010db0 <gpib_handshake_pin_read>:
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
/// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
   10db0:	19 99       	sbic	0x03, 1	; 3
   10db2:	03 c0       	rjmp	.+6      	; 0x10dba <gpib_handshake_pin_read+0xa>
        control |= DAV_FLAG;
   10db4:	80 e0       	ldi	r24, 0x00	; 0
   10db6:	90 e2       	ldi	r25, 0x20	; 32
   10db8:	02 c0       	rjmp	.+4      	; 0x10dbe <gpib_handshake_pin_read+0xe>
/// FIXME: V2 boards can only read pins enabled for read by the SN75162
///   FIXME We could add a test for read/write state ??
/// @return  handshake lines (upper 8 bits)
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
   10dba:	80 e0       	ldi	r24, 0x00	; 0
   10dbc:	90 e0       	ldi	r25, 0x00	; 0
///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
/// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
        control |= DAV_FLAG;
    if(GPIB_PIN_TST(NRFD) == 0 )
   10dbe:	4a 9b       	sbis	0x09, 2	; 9
        control |= NRFD_FLAG;
   10dc0:	90 64       	ori	r25, 0x40	; 64
    if(GPIB_PIN_TST(NDAC) == 0 )
   10dc2:	4b 9b       	sbis	0x09, 3	; 9
        control |= NDAC_FLAG;
   10dc4:	90 68       	ori	r25, 0x80	; 128
    return(control);
}
   10dc6:	08 95       	ret

00010dc8 <gpib_write_byte>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
uint16_t gpib_write_byte(uint16_t ch)
{
   10dc8:	2f 92       	push	r2
   10dca:	3f 92       	push	r3
   10dcc:	4f 92       	push	r4
   10dce:	6f 92       	push	r6
   10dd0:	7f 92       	push	r7
   10dd2:	8f 92       	push	r8
   10dd4:	af 92       	push	r10
   10dd6:	bf 92       	push	r11
   10dd8:	cf 92       	push	r12
   10dda:	df 92       	push	r13
   10ddc:	ef 92       	push	r14
   10dde:	1f 93       	push	r17
   10de0:	cf 93       	push	r28
   10de2:	df 93       	push	r29
   10de4:	cd b7       	in	r28, 0x3d	; 61
   10de6:	de b7       	in	r29, 0x3e	; 62
   10de8:	2a 97       	sbiw	r28, 0x0a	; 10
   10dea:	0f b6       	in	r0, 0x3f	; 63
   10dec:	f8 94       	cli
   10dee:	de bf       	out	0x3e, r29	; 62
   10df0:	0f be       	out	0x3f, r0	; 63
   10df2:	cd bf       	out	0x3d, r28	; 61
   10df4:	9a 87       	std	Y+10, r25	; 0x0a
   10df6:	89 87       	std	Y+9, r24	; 0x09
#if 0
	gpib_rx_init(0);	// NOT busy, NRFD and NDAC OC
#endif

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);
   10df8:	64 ef       	ldi	r22, 0xF4	; 244
   10dfa:	71 e0       	ldi	r23, 0x01	; 1
   10dfc:	80 e0       	ldi	r24, 0x00	; 0
   10dfe:	90 e0       	ldi	r25, 0x00	; 0
   10e00:	8c de       	rcall	.-744    	; 0x10b1a <gpib_timeout_set>
// Now Done in write_str
#if 0
	gpib_rx_init(0);	// NOT busy, NRFD and NDAC OC
#endif

    tx_state = GPIB_TX_START;
   10e02:	10 e0       	ldi	r17, 0x00	; 0
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<gpib_write_byte timeout waiting for NDAC==1>\n");
   10e04:	8f e4       	ldi	r24, 0x4F	; 79
   10e06:	90 e1       	ldi	r25, 0x10	; 16
   10e08:	6c 01       	movw	r12, r24
   10e0a:	e1 2c       	mov	r14, r1
                    tx_state = GPIB_TX_SET_DAV_LOW;
                }
                if (gpib_timeout_test())
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   10e0c:	8e e7       	ldi	r24, 0x7E	; 126
   10e0e:	90 e1       	ldi	r25, 0x10	; 16
   10e10:	3c 01       	movw	r6, r24
   10e12:	81 2c       	mov	r8, r1
					}
					else
					{
#ifdef SDEBUG
						if(debuglevel & GPIB_ERR)
							printf("gpib_write_byte: ATN = 0 while waiting for NRFD LOW state =%d\n",tx_state);
   10e14:	aa 24       	eor	r10, r10
   10e16:	a3 94       	inc	r10
   10e18:	b1 2c       	mov	r11, r1
   10e1a:	86 ef       	ldi	r24, 0xF6	; 246
   10e1c:	90 e1       	ldi	r25, 0x10	; 16
   10e1e:	1c 01       	movw	r2, r24
   10e20:	41 2c       	mov	r4, r1
					break;
                }
                if (gpib_timeout_test())
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   10e22:	8a eb       	ldi	r24, 0xBA	; 186
   10e24:	90 e1       	ldi	r25, 0x10	; 16
   10e26:	9c 01       	movw	r18, r24
   10e28:	40 e0       	ldi	r20, 0x00	; 0
   10e2a:	2e 83       	std	Y+6, r18	; 0x06
   10e2c:	3f 83       	std	Y+7, r19	; 0x07
   10e2e:	48 87       	std	Y+8, r20	; 0x08
	// Not called for writting
#if 0
        gpib_user_task();
#endif

		if(uart_keyhit(0))
   10e30:	80 e0       	ldi	r24, 0x00	; 0
   10e32:	0e 94 50 2a 	call	0x54a0	; 0x54a0 <uart_keyhit>
   10e36:	89 2b       	or	r24, r25
   10e38:	09 f0       	breq	.+2      	; 0x10e3c <gpib_write_byte+0x74>
   10e3a:	e7 c0       	rjmp	.+462    	; 0x1100a <gpib_write_byte+0x242>
        if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

// IFC is always in for a device
        if(GPIB_PIN_TST(IFC) == 0)
   10e3c:	4c 99       	sbic	0x09, 4	; 9
   10e3e:	19 c0       	rjmp	.+50     	; 0x10e72 <gpib_write_byte+0xaa>
        {
            ch |= IFC_FLAG;
   10e40:	89 85       	ldd	r24, Y+9	; 0x09
   10e42:	9a 85       	ldd	r25, Y+10	; 0x0a
   10e44:	90 61       	ori	r25, 0x10	; 16
   10e46:	9a 87       	std	Y+10, r25	; 0x0a
            gpib_bus_init();
   10e48:	89 87       	std	Y+9, r24	; 0x09
   10e4a:	71 de       	rcall	.-798    	; 0x10b2e <gpib_bus_init>
			if(debuglevel & GPIB_ERR)
   10e4c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10e50:	80 ff       	sbrs	r24, 0
   10e52:	db c0       	rjmp	.+438    	; 0x1100a <gpib_write_byte+0x242>
				printf("gpib_write_byte: IFC state=%d\n", tx_state);
   10e54:	81 2f       	mov	r24, r17
   10e56:	90 e0       	ldi	r25, 0x00	; 0
   10e58:	ed b7       	in	r30, 0x3d	; 61
   10e5a:	fe b7       	in	r31, 0x3e	; 62
   10e5c:	95 83       	std	Z+5, r25	; 0x05
   10e5e:	84 83       	std	Z+4, r24	; 0x04
   10e60:	85 e3       	ldi	r24, 0x35	; 53
   10e62:	91 e1       	ldi	r25, 0x11	; 17
   10e64:	a0 e0       	ldi	r26, 0x00	; 0
   10e66:	81 83       	std	Z+1, r24	; 0x01
   10e68:	92 83       	std	Z+2, r25	; 0x02
   10e6a:	a3 83       	std	Z+3, r26	; 0x03
   10e6c:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   10e70:	cc c0       	rjmp	.+408    	; 0x1100a <gpib_write_byte+0x242>
            break;
        }

        switch(tx_state)
   10e72:	81 2f       	mov	r24, r17
   10e74:	90 e0       	ldi	r25, 0x00	; 0
   10e76:	89 30       	cpi	r24, 0x09	; 9
   10e78:	91 05       	cpc	r25, r1
   10e7a:	08 f0       	brcs	.+2      	; 0x10e7e <gpib_write_byte+0xb6>
   10e7c:	be c0       	rjmp	.+380    	; 0x10ffa <gpib_write_byte+0x232>
   10e7e:	fc 01       	movw	r30, r24
   10e80:	e3 54       	subi	r30, 0x43	; 67
   10e82:	ff 4f       	sbci	r31, 0xFF	; 255
   10e84:	0c 94 8c e6 	jmp	0x1cd18	; 0x1cd18 <__tablejump2__>
        {
			// DAV == 1 the bus is ready
            case GPIB_TX_START:
				gpib_tx_init();
   10e88:	a8 de       	rcall	.-688    	; 0x10bda <gpib_tx_init>
				GPIB_PIN_FLOAT_UP(DAV);
   10e8a:	21 98       	cbi	0x04, 1	; 4
   10e8c:	29 9a       	sbi	0x05, 1	; 5
   10e8e:	fd e0       	ldi	r31, 0x0D	; 13
   10e90:	fa 95       	dec	r31
   10e92:	f1 f7       	brne	.-4      	; 0x10e90 <gpib_write_byte+0xc8>
   10e94:	00 00       	nop
   10e96:	06 c0       	rjmp	.+12     	; 0x10ea4 <gpib_write_byte+0xdc>
                tx_state = GPIB_TX_PUT_DATA;
                break;

// Wait for NRFD or NDAC LOW
            case GPIB_TX_WAIT_FOR_NRFD_OR_NDAC_LOW:
                if(GPIB_PIN_TST(NRFD) == 0 || GPIB_PIN_TST(NDAC) == 0)
   10e98:	4a 9b       	sbis	0x09, 2	; 9
   10e9a:	02 c0       	rjmp	.+4      	; 0x10ea0 <gpib_write_byte+0xd8>
   10e9c:	4b 99       	sbic	0x09, 3	; 9
   10e9e:	17 c0       	rjmp	.+46     	; 0x10ece <gpib_write_byte+0x106>
                {
					if(GPIB_PIN_TST(ATN) == 1)
   10ea0:	4e 9b       	sbis	0x09, 6	; 9
   10ea2:	07 c0       	rjmp	.+14     	; 0x10eb2 <gpib_write_byte+0xea>
					{
						gpib_timeout_set(HTIMEOUT);
   10ea4:	64 ef       	ldi	r22, 0xF4	; 244
   10ea6:	71 e0       	ldi	r23, 0x01	; 1
   10ea8:	80 e0       	ldi	r24, 0x00	; 0
   10eaa:	90 e0       	ldi	r25, 0x00	; 0
   10eac:	36 de       	rcall	.-916    	; 0x10b1a <gpib_timeout_set>
						tx_state = GPIB_TX_PUT_DATA;
   10eae:	12 e0       	ldi	r17, 0x02	; 2
   10eb0:	bf cf       	rjmp	.-130    	; 0x10e30 <gpib_write_byte+0x68>
					}
					else
					{
#ifdef SDEBUG
						if(debuglevel & GPIB_ERR)
   10eb2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10eb6:	80 ff       	sbrs	r24, 0
   10eb8:	bb cf       	rjmp	.-138    	; 0x10e30 <gpib_write_byte+0x68>
							printf("gpib_write_byte: ATN = 0 while waiting for NRFD LOW state =%d\n",tx_state);
   10eba:	ed b7       	in	r30, 0x3d	; 61
   10ebc:	fe b7       	in	r31, 0x3e	; 62
   10ebe:	b5 82       	std	Z+5, r11	; 0x05
   10ec0:	a4 82       	std	Z+4, r10	; 0x04
   10ec2:	21 82       	std	Z+1, r2	; 0x01
   10ec4:	32 82       	std	Z+2, r3	; 0x02
   10ec6:	43 82       	std	Z+3, r4	; 0x03
   10ec8:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   10ecc:	b1 cf       	rjmp	.-158    	; 0x10e30 <gpib_write_byte+0x68>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10ece:	80 91 e7 1c 	lds	r24, 0x1CE7	; 0x801ce7 <gpib_timer+0x8>
							printf("gpib_write_byte: ATN = 0 while waiting for NRFD LOW state =%d\n",tx_state);
#endif
					}
					break;
                }
                if (gpib_timeout_test())
   10ed2:	88 23       	and	r24, r24
   10ed4:	09 f4       	brne	.+2      	; 0x10ed8 <gpib_write_byte+0x110>
   10ed6:	ac cf       	rjmp	.-168    	; 0x10e30 <gpib_write_byte+0x68>
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10ed8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10edc:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10ee0:	85 70       	andi	r24, 0x05	; 5
   10ee2:	99 27       	eor	r25, r25
   10ee4:	89 2b       	or	r24, r25
   10ee6:	c1 f1       	breq	.+112    	; 0x10f58 <gpib_write_byte+0x190>
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   10ee8:	2e 81       	ldd	r18, Y+6	; 0x06
   10eea:	3f 81       	ldd	r19, Y+7	; 0x07
   10eec:	48 85       	ldd	r20, Y+8	; 0x08
   10eee:	ed b7       	in	r30, 0x3d	; 61
   10ef0:	fe b7       	in	r31, 0x3e	; 62
   10ef2:	21 83       	std	Z+1, r18	; 0x01
   10ef4:	32 83       	std	Z+2, r19	; 0x02
   10ef6:	43 83       	std	Z+3, r20	; 0x03
   10ef8:	2d c0       	rjmp	.+90     	; 0x10f54 <gpib_write_byte+0x18c>
                }
                break;

// Write Data
            case GPIB_TX_PUT_DATA:
                if(ch & EOI_FLAG)
   10efa:	89 85       	ldd	r24, Y+9	; 0x09
   10efc:	9a 85       	ldd	r25, Y+10	; 0x0a
   10efe:	90 ff       	sbrs	r25, 0
   10f00:	03 c0       	rjmp	.+6      	; 0x10f08 <gpib_write_byte+0x140>
                    GPIB_IO_LOW(EOI);
   10f02:	28 98       	cbi	0x05, 0	; 5
   10f04:	20 9a       	sbi	0x04, 0	; 4
   10f06:	02 c0       	rjmp	.+4      	; 0x10f0c <gpib_write_byte+0x144>
                else
                    GPIB_PIN_FLOAT_UP(EOI);
   10f08:	20 98       	cbi	0x04, 0	; 4
   10f0a:	28 9a       	sbi	0x05, 0	; 5
                GPIB_BUS_WR((ch & 0xff) ^ 0xff);  // Write Data inverted
   10f0c:	8f ef       	ldi	r24, 0xFF	; 255
   10f0e:	81 b9       	out	0x01, r24	; 1
   10f10:	89 85       	ldd	r24, Y+9	; 0x09
   10f12:	80 95       	com	r24
   10f14:	82 b9       	out	0x02, r24	; 2
   10f16:	9d e0       	ldi	r25, 0x0D	; 13
   10f18:	9a 95       	dec	r25
   10f1a:	f1 f7       	brne	.-4      	; 0x10f18 <gpib_write_byte+0x150>
   10f1c:	00 00       	nop
                GPIB_BUS_SETTLE();                // Let Data BUS settle

                gpib_timeout_set(HTIMEOUT);
   10f1e:	64 ef       	ldi	r22, 0xF4	; 244
   10f20:	71 e0       	ldi	r23, 0x01	; 1
   10f22:	80 e0       	ldi	r24, 0x00	; 0
   10f24:	90 e0       	ldi	r25, 0x00	; 0
   10f26:	f9 dd       	rcall	.-1038   	; 0x10b1a <gpib_timeout_set>
                tx_state = GPIB_TX_WAIT_FOR_NRFD_HI;
   10f28:	13 e0       	ldi	r17, 0x03	; 3
                break;
   10f2a:	82 cf       	rjmp	.-252    	; 0x10e30 <gpib_write_byte+0x68>
// Wait for BOTH NRFD HI and NDAC LOW
            case GPIB_TX_WAIT_FOR_NRFD_HI:
#if 0
                if(GPIB_PIN_TST(NRFD) == 1 && GPIB_PIN_TST(NDAC) == 0)
#else
                if(GPIB_PIN_TST(NRFD))
   10f2c:	4a 99       	sbic	0x09, 2	; 9
#endif
                {
                    tx_state = GPIB_TX_SET_DAV_LOW;
   10f2e:	14 e0       	ldi	r17, 0x04	; 4
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10f30:	80 91 e7 1c 	lds	r24, 0x1CE7	; 0x801ce7 <gpib_timer+0x8>
                if(GPIB_PIN_TST(NRFD))
#endif
                {
                    tx_state = GPIB_TX_SET_DAV_LOW;
                }
                if (gpib_timeout_test())
   10f34:	88 23       	and	r24, r24
   10f36:	09 f4       	brne	.+2      	; 0x10f3a <gpib_write_byte+0x172>
   10f38:	7b cf       	rjmp	.-266    	; 0x10e30 <gpib_write_byte+0x68>
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10f3a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10f3e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10f42:	85 70       	andi	r24, 0x05	; 5
   10f44:	99 27       	eor	r25, r25
   10f46:	89 2b       	or	r24, r25
   10f48:	39 f0       	breq	.+14     	; 0x10f58 <gpib_write_byte+0x190>
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   10f4a:	ed b7       	in	r30, 0x3d	; 61
   10f4c:	fe b7       	in	r31, 0x3e	; 62
   10f4e:	61 82       	std	Z+1, r6	; 0x01
   10f50:	72 82       	std	Z+2, r7	; 0x02
   10f52:	83 82       	std	Z+3, r8	; 0x03
   10f54:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
                    ch |= TIMEOUT_FLAG;
   10f58:	29 85       	ldd	r18, Y+9	; 0x09
   10f5a:	3a 85       	ldd	r19, Y+10	; 0x0a
   10f5c:	30 64       	ori	r19, 0x40	; 64
   10f5e:	3a 87       	std	Y+10, r19	; 0x0a
   10f60:	29 87       	std	Y+9, r18	; 0x09
   10f62:	51 c0       	rjmp	.+162    	; 0x11006 <gpib_write_byte+0x23e>
                    break;
                }
                break;

            case GPIB_TX_SET_DAV_LOW:
                GPIB_IO_LOW(DAV);
   10f64:	29 98       	cbi	0x05, 1	; 5
   10f66:	21 9a       	sbi	0x04, 1	; 4
   10f68:	3d e0       	ldi	r19, 0x0D	; 13
   10f6a:	3a 95       	dec	r19
   10f6c:	f1 f7       	brne	.-4      	; 0x10f6a <gpib_write_byte+0x1a2>
                GPIB_BUS_SETTLE();                
                gpib_timeout_set(HTIMEOUT);
   10f6e:	00 00       	nop
   10f70:	64 ef       	ldi	r22, 0xF4	; 244
   10f72:	71 e0       	ldi	r23, 0x01	; 1
   10f74:	80 e0       	ldi	r24, 0x00	; 0
   10f76:	90 e0       	ldi	r25, 0x00	; 0
   10f78:	d0 dd       	rcall	.-1120   	; 0x10b1a <gpib_timeout_set>
                tx_state = GPIB_TX_WAIT_FOR_NDAC_HI;
   10f7a:	15 e0       	ldi	r17, 0x05	; 5
                break;
   10f7c:	59 cf       	rjmp	.-334    	; 0x10e30 <gpib_write_byte+0x68>

///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
   10f7e:	4b 99       	sbic	0x09, 3	; 9
   10f80:	40 c0       	rjmp	.+128    	; 0x11002 <gpib_write_byte+0x23a>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10f82:	80 91 e7 1c 	lds	r24, 0x1CE7	; 0x801ce7 <gpib_timer+0x8>
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
                    break;
                }
                if (gpib_timeout_test())
   10f86:	88 23       	and	r24, r24
   10f88:	09 f4       	brne	.+2      	; 0x10f8c <gpib_write_byte+0x1c4>
   10f8a:	52 cf       	rjmp	.-348    	; 0x10e30 <gpib_write_byte+0x68>
                {
                    ch |= TIMEOUT_FLAG;
   10f8c:	89 85       	ldd	r24, Y+9	; 0x09
   10f8e:	9a 85       	ldd	r25, Y+10	; 0x0a
   10f90:	90 64       	ori	r25, 0x40	; 64
   10f92:	9a 87       	std	Y+10, r25	; 0x0a
   10f94:	89 87       	std	Y+9, r24	; 0x09
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10f96:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10f9a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10f9e:	85 70       	andi	r24, 0x05	; 5
   10fa0:	99 27       	eor	r25, r25
   10fa2:	89 2b       	or	r24, r25
   10fa4:	81 f1       	breq	.+96     	; 0x11006 <gpib_write_byte+0x23e>
                        printf("<gpib_write_byte timeout waiting for NDAC==1>\n");
   10fa6:	ed b7       	in	r30, 0x3d	; 61
   10fa8:	fe b7       	in	r31, 0x3e	; 62
   10faa:	c1 82       	std	Z+1, r12	; 0x01
   10fac:	d2 82       	std	Z+2, r13	; 0x02
   10fae:	e3 82       	std	Z+3, r14	; 0x03
   10fb0:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   10fb4:	28 c0       	rjmp	.+80     	; 0x11006 <gpib_write_byte+0x23e>
                }
                break;

///@release BUS
            case GPIB_TX_SET_DAV_HI:
                GPIB_PIN_FLOAT_UP(DAV);
   10fb6:	21 98       	cbi	0x04, 1	; 4
   10fb8:	29 9a       	sbi	0x05, 1	; 5
   10fba:	fd e0       	ldi	r31, 0x0D	; 13
   10fbc:	fa 95       	dec	r31
   10fbe:	f1 f7       	brne	.-4      	; 0x10fbc <gpib_write_byte+0x1f4>
                GPIB_BUS_SETTLE();
                tx_state = GPIB_TX_FINISH;
                gpib_timeout_set(HTIMEOUT);
   10fc0:	00 00       	nop
   10fc2:	64 ef       	ldi	r22, 0xF4	; 244
   10fc4:	71 e0       	ldi	r23, 0x01	; 1
   10fc6:	80 e0       	ldi	r24, 0x00	; 0
   10fc8:	90 e0       	ldi	r25, 0x00	; 0

///@release BUS
            case GPIB_TX_SET_DAV_HI:
                GPIB_PIN_FLOAT_UP(DAV);
                GPIB_BUS_SETTLE();
                tx_state = GPIB_TX_FINISH;
   10fca:	a7 dd       	rcall	.-1202   	; 0x10b1a <gpib_timeout_set>
                gpib_timeout_set(HTIMEOUT);
                break;
   10fcc:	17 e0       	ldi	r17, 0x07	; 7
                tx_state = GPIB_TX_DONE;
                break;

            case GPIB_TX_ERROR:
				// Free BUS, BUSY on error
                gpib_rx_init(1);
   10fce:	30 cf       	rjmp	.-416    	; 0x10e30 <gpib_write_byte+0x68>
   10fd0:	81 e0       	ldi	r24, 0x01	; 1
   10fd2:	e5 dd       	rcall	.-1078   	; 0x10b9e <gpib_rx_init>
                if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10fd4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10fd8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10fdc:	85 70       	andi	r24, 0x05	; 5
   10fde:	99 27       	eor	r25, r25
   10fe0:	89 2b       	or	r24, r25
   10fe2:	99 f0       	breq	.+38     	; 0x1100a <gpib_write_byte+0x242>
                    printf("<GPIB TX TIMEOUT>\n");
   10fe4:	8c e3       	ldi	r24, 0x3C	; 60
   10fe6:	90 e1       	ldi	r25, 0x10	; 16
   10fe8:	a0 e0       	ldi	r26, 0x00	; 0
   10fea:	ed b7       	in	r30, 0x3d	; 61
   10fec:	fe b7       	in	r31, 0x3e	; 62
   10fee:	81 83       	std	Z+1, r24	; 0x01
   10ff0:	92 83       	std	Z+2, r25	; 0x02
   10ff2:	a3 83       	std	Z+3, r26	; 0x03
   10ff4:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   10ff8:	08 c0       	rjmp	.+16     	; 0x1100a <gpib_write_byte+0x242>
	gpib_rx_init(0);	// NOT busy, NRFD and NDAC OC
#endif

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);
    while(tx_state != GPIB_TX_DONE )
   10ffa:	19 30       	cpi	r17, 0x09	; 9
   10ffc:	09 f0       	breq	.+2      	; 0x11000 <gpib_write_byte+0x238>
   10ffe:	18 cf       	rjmp	.-464    	; 0x10e30 <gpib_write_byte+0x68>
   11000:	04 c0       	rjmp	.+8      	; 0x1100a <gpib_write_byte+0x242>

///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
   11002:	16 e0       	ldi	r17, 0x06	; 6
   11004:	15 cf       	rjmp	.-470    	; 0x10e30 <gpib_write_byte+0x68>
                    break;
                }
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
   11006:	18 e0       	ldi	r17, 0x08	; 8
   11008:	13 cf       	rjmp	.-474    	; 0x10e30 <gpib_write_byte+0x68>
            case GPIB_TX_DONE:
                break;
        }
    }
    return(ch);
}
   1100a:	89 85       	ldd	r24, Y+9	; 0x09
   1100c:	9a 85       	ldd	r25, Y+10	; 0x0a
   1100e:	2a 96       	adiw	r28, 0x0a	; 10
   11010:	0f b6       	in	r0, 0x3f	; 63
   11012:	f8 94       	cli
   11014:	de bf       	out	0x3e, r29	; 62
   11016:	0f be       	out	0x3f, r0	; 63
   11018:	cd bf       	out	0x3d, r28	; 61
   1101a:	df 91       	pop	r29
   1101c:	cf 91       	pop	r28
   1101e:	1f 91       	pop	r17
   11020:	ef 90       	pop	r14
   11022:	df 90       	pop	r13
   11024:	cf 90       	pop	r12
   11026:	bf 90       	pop	r11
   11028:	af 90       	pop	r10
   1102a:	8f 90       	pop	r8
   1102c:	7f 90       	pop	r7
   1102e:	6f 90       	pop	r6
   11030:	4f 90       	pop	r4
   11032:	3f 90       	pop	r3
   11034:	2f 90       	pop	r2
   11036:	08 95       	ret

00011038 <gpib_decode_header>:
/// @see: gpib.h _FLAGS defines for a full list is control lines we track
/// @see: gpib_trace()
/// @return void
///@param[in] fo: FILE pointer or "stdout"
void gpib_decode_header( FILE *fo)
{
   11038:	cf 93       	push	r28
   1103a:	df 93       	push	r29
   1103c:	ec 01       	movw	r28, r24
    if(fo == NULL)
   1103e:	89 2b       	or	r24, r25
   11040:	21 f4       	brne	.+8      	; 0x1104a <gpib_decode_header+0x12>
        fo = stdout;
   11042:	c0 91 c1 1c 	lds	r28, 0x1CC1	; 0x801cc1 <__iob+0x2>
   11046:	d0 91 c2 1c 	lds	r29, 0x1CC2	; 0x801cc2 <__iob+0x3>

    fprintf(fo,"==============================\n");
   1104a:	be 01       	movw	r22, r28
   1104c:	81 e0       	ldi	r24, 0x01	; 1
   1104e:	9c e0       	ldi	r25, 0x0C	; 12
   11050:	0e 94 76 76 	call	0xecec	; 0xecec <fputs>
    fprintf(fo,"GPIB bus state\n");
   11054:	be 01       	movw	r22, r28
   11056:	81 e2       	ldi	r24, 0x21	; 33
   11058:	9c e0       	ldi	r25, 0x0C	; 12
   1105a:	0e 94 76 76 	call	0xecec	; 0xecec <fputs>
    fprintf(fo,"HH . AESRPITB gpib\n");
   1105e:	be 01       	movw	r22, r28
   11060:	81 e3       	ldi	r24, 0x31	; 49
   11062:	9c e0       	ldi	r25, 0x0C	; 12
   11064:	0e 94 76 76 	call	0xecec	; 0xecec <fputs>
    fprintf(fo,"HH = Hex value of Command or Data\n");
   11068:	be 01       	movw	r22, r28
   1106a:	85 e4       	ldi	r24, 0x45	; 69
   1106c:	9c e0       	ldi	r25, 0x0C	; 12
   1106e:	0e 94 76 76 	call	0xecec	; 0xecec <fputs>
    fprintf(fo,"   . = ASCII of XX only for 0x20 .. 0x7e\n");
   11072:	be 01       	movw	r22, r28
   11074:	88 e6       	ldi	r24, 0x68	; 104
   11076:	9c e0       	ldi	r25, 0x0C	; 12
   11078:	0e 94 76 76 	call	0xecec	; 0xecec <fputs>
    fprintf(fo,"     A = ATN\n");
   1107c:	be 01       	movw	r22, r28
   1107e:	82 e9       	ldi	r24, 0x92	; 146
   11080:	9c e0       	ldi	r25, 0x0C	; 12
   11082:	0e 94 76 76 	call	0xecec	; 0xecec <fputs>
    fprintf(fo,"      E = EOI\n");
   11086:	be 01       	movw	r22, r28
   11088:	80 ea       	ldi	r24, 0xA0	; 160
   1108a:	9c e0       	ldi	r25, 0x0C	; 12
   1108c:	0e 94 76 76 	call	0xecec	; 0xecec <fputs>
    fprintf(fo,"       S = SRQ\n");
   11090:	be 01       	movw	r22, r28
   11092:	8f ea       	ldi	r24, 0xAF	; 175
   11094:	9c e0       	ldi	r25, 0x0C	; 12
   11096:	0e 94 76 76 	call	0xecec	; 0xecec <fputs>
    fprintf(fo,"        R = REN\n");
   1109a:	be 01       	movw	r22, r28
   1109c:	8f eb       	ldi	r24, 0xBF	; 191
   1109e:	9c e0       	ldi	r25, 0x0C	; 12
   110a0:	0e 94 76 76 	call	0xecec	; 0xecec <fputs>
    fprintf(fo,"         I = IFC\n");
   110a4:	be 01       	movw	r22, r28
   110a6:	80 ed       	ldi	r24, 0xD0	; 208
   110a8:	9c e0       	ldi	r25, 0x0C	; 12
   110aa:	0e 94 76 76 	call	0xecec	; 0xecec <fputs>
    fprintf(fo,"          P = Parallel Poll seen\n");
   110ae:	be 01       	movw	r22, r28
   110b0:	82 ee       	ldi	r24, 0xE2	; 226
   110b2:	9c e0       	ldi	r25, 0x0C	; 12
   110b4:	0e 94 76 76 	call	0xecec	; 0xecec <fputs>
    fprintf(fo,"           T = TIMEOUT\n");
   110b8:	be 01       	movw	r22, r28
   110ba:	84 e0       	ldi	r24, 0x04	; 4
   110bc:	9d e0       	ldi	r25, 0x0D	; 13
   110be:	0e 94 76 76 	call	0xecec	; 0xecec <fputs>
    fprintf(fo,"            B = BUS_ERROR\n");
   110c2:	be 01       	movw	r22, r28
   110c4:	8c e1       	ldi	r24, 0x1C	; 28
   110c6:	9d e0       	ldi	r25, 0x0D	; 13
   110c8:	0e 94 76 76 	call	0xecec	; 0xecec <fputs>
    fprintf(fo,"              GPIB commands\n");
   110cc:	be 01       	movw	r22, r28
   110ce:	87 e3       	ldi	r24, 0x37	; 55
   110d0:	9d e0       	ldi	r25, 0x0D	; 13
   110d2:	0e 94 76 76 	call	0xecec	; 0xecec <fputs>
}
   110d6:	df 91       	pop	r29
   110d8:	cf 91       	pop	r28
   110da:	08 95       	ret

000110dc <gpib_trace_display>:
/// @return  void
/// Note the bits we can read depends on what hardware verions we have
/// V2 hardware can only read status bits based on GPIB control buffer direction
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
   110dc:	a9 e8       	ldi	r26, 0x89	; 137
   110de:	b0 e0       	ldi	r27, 0x00	; 0
   110e0:	e4 e7       	ldi	r30, 0x74	; 116
   110e2:	f8 e8       	ldi	r31, 0x88	; 136
   110e4:	0c 94 c1 e6 	jmp	0x1cd82	; 0x1cd82 <__prologue_saves__+0xc>
   110e8:	8c 01       	movw	r16, r24
   110ea:	5b 01       	movw	r10, r22
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
    extern FILE *gpib_log_fp;

    str[0] = 0;
   110ec:	1a 86       	std	Y+10, r1	; 0x0a
   110ee:	4c 01       	movw	r8, r24
   110f0:	88 24       	eor	r8, r8
   110f2:	44 e0       	ldi	r20, 0x04	; 4
   110f4:	94 22       	and	r9, r20
   110f6:	ce 01       	movw	r24, r28
   110f8:	0a 96       	adiw	r24, 0x0a	; 10
   110fa:	7c 01       	movw	r14, r24

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
   110fc:	62 30       	cpi	r22, 0x02	; 2
   110fe:	71 05       	cpc	r23, r1
   11100:	e8 f4       	brcc	.+58     	; 0x1113c <gpib_trace_display+0x60>
    {
        uint8_t printable = ' ';                  // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   11102:	81 14       	cp	r8, r1
   11104:	91 04       	cpc	r9, r1
   11106:	29 f4       	brne	.+10     	; 0x11112 <gpib_trace_display+0x36>
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
   11108:	80 2f       	mov	r24, r16

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                  // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   1110a:	90 ee       	ldi	r25, 0xE0	; 224
   1110c:	90 0f       	add	r25, r16
   1110e:	9f 35       	cpi	r25, 0x5F	; 95
   11110:	08 f0       	brcs	.+2      	; 0x11114 <gpib_trace_display+0x38>
    str[0] = 0;

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                  // Data
   11112:	80 e2       	ldi	r24, 0x20	; 32
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
            printable = bus;
        sprintf(str, "%02X %c ", (int)bus & 0xff, (int)printable);
   11114:	90 e0       	ldi	r25, 0x00	; 0
   11116:	ed b7       	in	r30, 0x3d	; 61
   11118:	fe b7       	in	r31, 0x3e	; 62
   1111a:	91 87       	std	Z+9, r25	; 0x09
   1111c:	80 87       	std	Z+8, r24	; 0x08
   1111e:	c8 01       	movw	r24, r16
   11120:	99 27       	eor	r25, r25
   11122:	97 83       	std	Z+7, r25	; 0x07
   11124:	86 83       	std	Z+6, r24	; 0x06
   11126:	85 e1       	ldi	r24, 0x15	; 21
   11128:	90 e1       	ldi	r25, 0x10	; 16
   1112a:	a0 e0       	ldi	r26, 0x00	; 0
   1112c:	83 83       	std	Z+3, r24	; 0x03
   1112e:	94 83       	std	Z+4, r25	; 0x04
   11130:	a5 83       	std	Z+5, r26	; 0x05
   11132:	f2 82       	std	Z+2, r15	; 0x02
   11134:	e1 82       	std	Z+1, r14	; 0x01
   11136:	0e 94 d7 46 	call	0x8dae	; 0x8dae <sprintf_P>
   1113a:	0c c0       	rjmp	.+24     	; 0x11154 <gpib_trace_display+0x78>
    }
    else
    {
        sprintf(str, "     ");
   1113c:	8f e0       	ldi	r24, 0x0F	; 15
   1113e:	90 e1       	ldi	r25, 0x10	; 16
   11140:	a0 e0       	ldi	r26, 0x00	; 0
   11142:	ed b7       	in	r30, 0x3d	; 61
   11144:	fe b7       	in	r31, 0x3e	; 62
   11146:	83 83       	std	Z+3, r24	; 0x03
   11148:	94 83       	std	Z+4, r25	; 0x04
   1114a:	a5 83       	std	Z+5, r26	; 0x05
   1114c:	f2 82       	std	Z+2, r15	; 0x02
   1114e:	e1 82       	std	Z+1, r14	; 0x01
   11150:	0e 94 d7 46 	call	0x8dae	; 0x8dae <sprintf_P>
    }

    tmp = str + strlen(str);
   11154:	f7 01       	movw	r30, r14
   11156:	01 90       	ld	r0, Z+
   11158:	00 20       	and	r0, r0
   1115a:	e9 f7       	brne	.-6      	; 0x11156 <gpib_trace_display+0x7a>
   1115c:	31 97       	sbiw	r30, 0x01	; 1
   1115e:	cf 01       	movw	r24, r30
   11160:	01 96       	adiw	r24, 0x01	; 1

    if(status & ATN_FLAG)
   11162:	81 14       	cp	r8, r1
   11164:	91 04       	cpc	r9, r1
   11166:	11 f0       	breq	.+4      	; 0x1116c <gpib_trace_display+0x90>
        *tmp++ = 'A';
   11168:	21 e4       	ldi	r18, 0x41	; 65
   1116a:	01 c0       	rjmp	.+2      	; 0x1116e <gpib_trace_display+0x92>
    else
        *tmp++ = '-';
   1116c:	2d e2       	ldi	r18, 0x2D	; 45
   1116e:	20 83       	st	Z, r18
   11170:	dc 01       	movw	r26, r24
   11172:	11 96       	adiw	r26, 0x01	; 1

    if(status & EOI_FLAG)
   11174:	10 ff       	sbrs	r17, 0
   11176:	02 c0       	rjmp	.+4      	; 0x1117c <gpib_trace_display+0xa0>
        *tmp++ = 'E';
   11178:	25 e4       	ldi	r18, 0x45	; 69
   1117a:	01 c0       	rjmp	.+2      	; 0x1117e <gpib_trace_display+0xa2>
    else
        *tmp++ = '-';
   1117c:	2d e2       	ldi	r18, 0x2D	; 45
   1117e:	fc 01       	movw	r30, r24
   11180:	20 83       	st	Z, r18
   11182:	fd 01       	movw	r30, r26
   11184:	31 96       	adiw	r30, 0x01	; 1

    if(status & SRQ_FLAG)
   11186:	11 ff       	sbrs	r17, 1
   11188:	02 c0       	rjmp	.+4      	; 0x1118e <gpib_trace_display+0xb2>
        *tmp++ = 'S';
   1118a:	83 e5       	ldi	r24, 0x53	; 83
   1118c:	01 c0       	rjmp	.+2      	; 0x11190 <gpib_trace_display+0xb4>
    else
        *tmp++ = '-';
   1118e:	8d e2       	ldi	r24, 0x2D	; 45
   11190:	8c 93       	st	X, r24
   11192:	df 01       	movw	r26, r30
   11194:	11 96       	adiw	r26, 0x01	; 1

    if(status & REN_FLAG)
   11196:	13 ff       	sbrs	r17, 3
   11198:	02 c0       	rjmp	.+4      	; 0x1119e <gpib_trace_display+0xc2>
        *tmp++ = 'R';
   1119a:	82 e5       	ldi	r24, 0x52	; 82
   1119c:	01 c0       	rjmp	.+2      	; 0x111a0 <gpib_trace_display+0xc4>
    else
        *tmp++ = '-';
   1119e:	8d e2       	ldi	r24, 0x2D	; 45
   111a0:	80 83       	st	Z, r24
   111a2:	fd 01       	movw	r30, r26
   111a4:	31 96       	adiw	r30, 0x01	; 1

    if(status & IFC_FLAG)
   111a6:	14 ff       	sbrs	r17, 4
   111a8:	02 c0       	rjmp	.+4      	; 0x111ae <gpib_trace_display+0xd2>
        *tmp++ = 'I';
   111aa:	89 e4       	ldi	r24, 0x49	; 73
   111ac:	01 c0       	rjmp	.+2      	; 0x111b0 <gpib_trace_display+0xd4>
    else
        *tmp++ = '-';
   111ae:	8d e2       	ldi	r24, 0x2D	; 45
   111b0:	8c 93       	st	X, r24

    if(trace_state == TRACE_DISABLE)
   111b2:	a1 14       	cp	r10, r1
   111b4:	b1 04       	cpc	r11, r1
   111b6:	d1 f4       	brne	.+52     	; 0x111ec <gpib_trace_display+0x110>
   111b8:	df 01       	movw	r26, r30
   111ba:	11 96       	adiw	r26, 0x01	; 1
    {
        if(status & PP_FLAG)
   111bc:	15 ff       	sbrs	r17, 5
   111be:	02 c0       	rjmp	.+4      	; 0x111c4 <gpib_trace_display+0xe8>
            *tmp++ = 'P';
   111c0:	80 e5       	ldi	r24, 0x50	; 80
   111c2:	01 c0       	rjmp	.+2      	; 0x111c6 <gpib_trace_display+0xea>
        else
            *tmp++ = '-';
   111c4:	8d e2       	ldi	r24, 0x2D	; 45
   111c6:	80 83       	st	Z, r24
   111c8:	fd 01       	movw	r30, r26
   111ca:	31 96       	adiw	r30, 0x01	; 1
        if(status & TIMEOUT_FLAG)
   111cc:	16 ff       	sbrs	r17, 6
   111ce:	02 c0       	rjmp	.+4      	; 0x111d4 <gpib_trace_display+0xf8>
            *tmp++ = 'T';
   111d0:	84 e5       	ldi	r24, 0x54	; 84
   111d2:	01 c0       	rjmp	.+2      	; 0x111d6 <gpib_trace_display+0xfa>
        else
            *tmp++ = '-';
   111d4:	8d e2       	ldi	r24, 0x2D	; 45
   111d6:	8c 93       	st	X, r24
   111d8:	cf 01       	movw	r24, r30
   111da:	01 96       	adiw	r24, 0x01	; 1
        if(status & BUS_ERROR_FLAG)
            *tmp++ = 'B';
   111dc:	6c 01       	movw	r12, r24
            *tmp++ = '-';
        if(status & TIMEOUT_FLAG)
            *tmp++ = 'T';
        else
            *tmp++ = '-';
        if(status & BUS_ERROR_FLAG)
   111de:	17 ff       	sbrs	r17, 7
   111e0:	02 c0       	rjmp	.+4      	; 0x111e6 <gpib_trace_display+0x10a>
            *tmp++ = 'B';
   111e2:	82 e4       	ldi	r24, 0x42	; 66
   111e4:	01 c0       	rjmp	.+2      	; 0x111e8 <gpib_trace_display+0x10c>
        else
            *tmp++ = '-';
   111e6:	8d e2       	ldi	r24, 0x2D	; 45
   111e8:	80 83       	st	Z, r24
   111ea:	08 c0       	rjmp	.+16     	; 0x111fc <gpib_trace_display+0x120>
    }
    else
    {
// not used when tracing
        *tmp++ = '-';
   111ec:	8d e2       	ldi	r24, 0x2D	; 45
   111ee:	80 83       	st	Z, r24
        *tmp++ = '-';
   111f0:	81 83       	std	Z+1, r24	; 0x01
        *tmp++ = '-';
   111f2:	6f 01       	movw	r12, r30
   111f4:	43 e0       	ldi	r20, 0x03	; 3
   111f6:	c4 0e       	add	r12, r20
   111f8:	d1 1c       	adc	r13, r1
   111fa:	82 83       	std	Z+2, r24	; 0x02
    }
    *tmp = 0;
   111fc:	f6 01       	movw	r30, r12
   111fe:	10 82       	st	Z, r1

    if(trace_state == TRACE_READ || trace_state == TRACE_BUS)
   11200:	f1 e0       	ldi	r31, 0x01	; 1
   11202:	af 1a       	sub	r10, r31
   11204:	b1 08       	sbc	r11, r1
   11206:	42 e0       	ldi	r20, 0x02	; 2
   11208:	a4 16       	cp	r10, r20
   1120a:	b1 04       	cpc	r11, r1
   1120c:	f0 f4       	brcc	.+60     	; 0x1124a <gpib_trace_display+0x16e>
    {
        if(status & DAV_FLAG)
   1120e:	15 ff       	sbrs	r17, 5
   11210:	03 c0       	rjmp	.+6      	; 0x11218 <gpib_trace_display+0x13c>
            strcat(str,"  DAV");
   11212:	64 e5       	ldi	r22, 0x54	; 84
   11214:	7d e0       	ldi	r23, 0x0D	; 13
   11216:	02 c0       	rjmp	.+4      	; 0x1121c <gpib_trace_display+0x140>
        else
            strcat(str,"     ");
   11218:	65 e6       	ldi	r22, 0x65	; 101
   1121a:	74 e0       	ldi	r23, 0x04	; 4
   1121c:	c7 01       	movw	r24, r14
   1121e:	0e 94 4d 31 	call	0x629a	; 0x629a <strcat>
        if(status & NRFD_FLAG)
   11222:	16 ff       	sbrs	r17, 6
   11224:	03 c0       	rjmp	.+6      	; 0x1122c <gpib_trace_display+0x150>
            strcat(str," NRFD");
   11226:	6a e5       	ldi	r22, 0x5A	; 90
   11228:	7d e0       	ldi	r23, 0x0D	; 13
   1122a:	02 c0       	rjmp	.+4      	; 0x11230 <gpib_trace_display+0x154>
        else
            strcat(str,"     ");
   1122c:	65 e6       	ldi	r22, 0x65	; 101
   1122e:	74 e0       	ldi	r23, 0x04	; 4
   11230:	c7 01       	movw	r24, r14
   11232:	0e 94 4d 31 	call	0x629a	; 0x629a <strcat>
        if(status & NDAC_FLAG)
   11236:	17 ff       	sbrs	r17, 7
   11238:	03 c0       	rjmp	.+6      	; 0x11240 <gpib_trace_display+0x164>
            strcat(str," NDAC");
   1123a:	60 e6       	ldi	r22, 0x60	; 96
   1123c:	7d e0       	ldi	r23, 0x0D	; 13
   1123e:	02 c0       	rjmp	.+4      	; 0x11244 <gpib_trace_display+0x168>
        else
            strcat(str,"     ");
   11240:	65 e6       	ldi	r22, 0x65	; 101
   11242:	74 e0       	ldi	r23, 0x04	; 4
   11244:	c7 01       	movw	r24, r14
   11246:	0e 94 4d 31 	call	0x629a	; 0x629a <strcat>
    }

    if( (status & ATN_FLAG) )
   1124a:	81 14       	cp	r8, r1
   1124c:	91 04       	cpc	r9, r1
   1124e:	09 f4       	brne	.+2      	; 0x11252 <gpib_trace_display+0x176>
   11250:	5a c0       	rjmp	.+180    	; 0x11306 <gpib_trace_display+0x22a>
    {
        int i;
        int cmd = status & CMD_MASK;
   11252:	c8 01       	movw	r24, r16
   11254:	8f 77       	andi	r24, 0x7F	; 127
   11256:	99 27       	eor	r25, r25
        if(cmd >= 0x020 && cmd <= 0x3e)
   11258:	9c 01       	movw	r18, r24
   1125a:	20 52       	subi	r18, 0x20	; 32
   1125c:	31 09       	sbc	r19, r1
   1125e:	2f 31       	cpi	r18, 0x1F	; 31
   11260:	31 05       	cpc	r19, r1
   11262:	48 f4       	brcc	.+18     	; 0x11276 <gpib_trace_display+0x19a>
            sprintf(tmp," MLA %02Xh", cmd & 0x1f);
   11264:	0f 71       	andi	r16, 0x1F	; 31
   11266:	11 27       	eor	r17, r17
   11268:	ed b7       	in	r30, 0x3d	; 61
   1126a:	fe b7       	in	r31, 0x3e	; 62
   1126c:	17 83       	std	Z+7, r17	; 0x07
   1126e:	06 83       	std	Z+6, r16	; 0x06
   11270:	84 e0       	ldi	r24, 0x04	; 4
   11272:	90 e1       	ldi	r25, 0x10	; 16
   11274:	0e c0       	rjmp	.+28     	; 0x11292 <gpib_trace_display+0x1b6>
        else if(cmd >= 0x040 && cmd <= 0x4e)
   11276:	9c 01       	movw	r18, r24
   11278:	20 54       	subi	r18, 0x40	; 64
   1127a:	31 09       	sbc	r19, r1
   1127c:	2f 30       	cpi	r18, 0x0F	; 15
   1127e:	31 05       	cpc	r19, r1
   11280:	88 f4       	brcc	.+34     	; 0x112a4 <gpib_trace_display+0x1c8>
            sprintf(tmp," MTA %02Xh", cmd & 0x1f);
   11282:	0f 71       	andi	r16, 0x1F	; 31
   11284:	11 27       	eor	r17, r17
   11286:	ed b7       	in	r30, 0x3d	; 61
   11288:	fe b7       	in	r31, 0x3e	; 62
   1128a:	17 83       	std	Z+7, r17	; 0x07
   1128c:	06 83       	std	Z+6, r16	; 0x06
   1128e:	89 ef       	ldi	r24, 0xF9	; 249
   11290:	9f e0       	ldi	r25, 0x0F	; 15
   11292:	a0 e0       	ldi	r26, 0x00	; 0
   11294:	83 83       	std	Z+3, r24	; 0x03
   11296:	94 83       	std	Z+4, r25	; 0x04
   11298:	a5 83       	std	Z+5, r26	; 0x05
   1129a:	d2 82       	std	Z+2, r13	; 0x02
   1129c:	c1 82       	std	Z+1, r12	; 0x01
   1129e:	0e 94 d7 46 	call	0x8dae	; 0x8dae <sprintf_P>
   112a2:	31 c0       	rjmp	.+98     	; 0x11306 <gpib_trace_display+0x22a>
        else if(cmd >= 0x060 && cmd <= 0x6f)
   112a4:	9c 01       	movw	r18, r24
   112a6:	20 56       	subi	r18, 0x60	; 96
   112a8:	31 09       	sbc	r19, r1
   112aa:	20 31       	cpi	r18, 0x10	; 16
   112ac:	31 05       	cpc	r19, r1
   112ae:	28 f0       	brcs	.+10     	; 0x112ba <gpib_trace_display+0x1de>
   112b0:	e2 e8       	ldi	r30, 0x82	; 130
   112b2:	f1 e0       	ldi	r31, 0x01	; 1
   112b4:	00 e0       	ldi	r16, 0x00	; 0
   112b6:	10 e0       	ldi	r17, 0x00	; 0
   112b8:	0b c0       	rjmp	.+22     	; 0x112d0 <gpib_trace_display+0x1f4>
            sprintf(tmp," MSA %02Xh", cmd & 0x1f);
   112ba:	0f 71       	andi	r16, 0x1F	; 31
   112bc:	11 27       	eor	r17, r17
   112be:	ed b7       	in	r30, 0x3d	; 61
   112c0:	fe b7       	in	r31, 0x3e	; 62
   112c2:	17 83       	std	Z+7, r17	; 0x07
   112c4:	06 83       	std	Z+6, r16	; 0x06
   112c6:	8e ee       	ldi	r24, 0xEE	; 238
   112c8:	9f e0       	ldi	r25, 0x0F	; 15
   112ca:	e3 cf       	rjmp	.-58     	; 0x11292 <gpib_trace_display+0x1b6>
        else
        {
            for(i=0;gpib_tokens[i].cmd != -1;++i)
   112cc:	0f 5f       	subi	r16, 0xFF	; 255
   112ce:	1f 4f       	sbci	r17, 0xFF	; 255
   112d0:	20 81       	ld	r18, Z
   112d2:	31 81       	ldd	r19, Z+1	; 0x01
   112d4:	2f 3f       	cpi	r18, 0xFF	; 255
   112d6:	4f ef       	ldi	r20, 0xFF	; 255
   112d8:	34 07       	cpc	r19, r20
   112da:	a9 f0       	breq	.+42     	; 0x11306 <gpib_trace_display+0x22a>
   112dc:	34 96       	adiw	r30, 0x04	; 4
            {
                if(cmd == gpib_tokens[i].cmd)
   112de:	82 17       	cp	r24, r18
   112e0:	93 07       	cpc	r25, r19
   112e2:	a1 f7       	brne	.-24     	; 0x112cc <gpib_trace_display+0x1f0>
                {
                    strcat(tmp," ");
   112e4:	69 e6       	ldi	r22, 0x69	; 105
   112e6:	74 e0       	ldi	r23, 0x04	; 4
   112e8:	c6 01       	movw	r24, r12
   112ea:	0e 94 4d 31 	call	0x629a	; 0x629a <strcat>
                    strcat(tmp,gpib_tokens[i].name);
   112ee:	f8 01       	movw	r30, r16
   112f0:	ee 0f       	add	r30, r30
   112f2:	ff 1f       	adc	r31, r31
   112f4:	ee 0f       	add	r30, r30
   112f6:	ff 1f       	adc	r31, r31
   112f8:	ee 57       	subi	r30, 0x7E	; 126
   112fa:	fe 4f       	sbci	r31, 0xFE	; 254
   112fc:	62 81       	ldd	r22, Z+2	; 0x02
   112fe:	73 81       	ldd	r23, Z+3	; 0x03
   11300:	c6 01       	movw	r24, r12
   11302:	0e 94 4d 31 	call	0x629a	; 0x629a <strcat>
                }
            }
        }
    }

    if(gpib_log_fp == NULL)
   11306:	20 91 60 19 	lds	r18, 0x1960	; 0x801960 <gpib_log_fp>
   1130a:	30 91 61 19 	lds	r19, 0x1961	; 0x801961 <gpib_log_fp+0x1>
   1130e:	80 91 c1 1c 	lds	r24, 0x1CC1	; 0x801cc1 <__iob+0x2>
   11312:	90 91 c2 1c 	lds	r25, 0x1CC2	; 0x801cc2 <__iob+0x3>
   11316:	23 2b       	or	r18, r19
   11318:	21 f4       	brne	.+8      	; 0x11322 <gpib_trace_display+0x246>
        gpib_log_fp = stdout;
   1131a:	90 93 61 19 	sts	0x1961, r25	; 0x801961 <gpib_log_fp+0x1>
   1131e:	80 93 60 19 	sts	0x1960, r24	; 0x801960 <gpib_log_fp>

// Echo to console unless file is the console
    if(gpib_log_fp != stdout)
   11322:	20 91 60 19 	lds	r18, 0x1960	; 0x801960 <gpib_log_fp>
   11326:	30 91 61 19 	lds	r19, 0x1961	; 0x801961 <gpib_log_fp+0x1>
   1132a:	82 17       	cp	r24, r18
   1132c:	93 07       	cpc	r25, r19
   1132e:	19 f0       	breq	.+6      	; 0x11336 <gpib_trace_display+0x25a>
        puts(str);
   11330:	c7 01       	movw	r24, r14
   11332:	0e 94 8e 76 	call	0xed1c	; 0xed1c <puts>

// Save to file
    fprintf(gpib_log_fp,"%s\n",str);
   11336:	ed b7       	in	r30, 0x3d	; 61
   11338:	fe b7       	in	r31, 0x3e	; 62
   1133a:	f6 82       	std	Z+6, r15	; 0x06
   1133c:	e5 82       	std	Z+5, r14	; 0x05
   1133e:	86 e6       	ldi	r24, 0x66	; 102
   11340:	9d e0       	ldi	r25, 0x0D	; 13
   11342:	94 83       	std	Z+4, r25	; 0x04
   11344:	83 83       	std	Z+3, r24	; 0x03
   11346:	80 91 60 19 	lds	r24, 0x1960	; 0x801960 <gpib_log_fp>
   1134a:	90 91 61 19 	lds	r25, 0x1961	; 0x801961 <gpib_log_fp+0x1>
   1134e:	92 83       	std	Z+2, r25	; 0x02
   11350:	81 83       	std	Z+1, r24	; 0x01
   11352:	0e 94 36 7e 	call	0xfc6c	; 0xfc6c <fprintf>
}
   11356:	c7 57       	subi	r28, 0x77	; 119
   11358:	df 4f       	sbci	r29, 0xFF	; 255
   1135a:	ec e0       	ldi	r30, 0x0C	; 12
   1135c:	0c 94 dd e6 	jmp	0x1cdba	; 0x1cdba <__epilogue_restores__+0xc>

00011360 <gpib_read_byte>:
///     - Error Flags:
///       - IFC_FLAG
///
/// @return (data bus, control and error status)
uint16_t gpib_read_byte(int trace)
{
   11360:	af 92       	push	r10
   11362:	bf 92       	push	r11
   11364:	cf 92       	push	r12
   11366:	df 92       	push	r13
   11368:	ef 92       	push	r14
   1136a:	ff 92       	push	r15
   1136c:	0f 93       	push	r16
   1136e:	1f 93       	push	r17
   11370:	cf 93       	push	r28
   11372:	00 d0       	rcall	.+0      	; 0x11374 <gpib_read_byte+0x14>
   11374:	00 d0       	rcall	.+0      	; 0x11376 <gpib_read_byte+0x16>
   11376:	1f 92       	push	r1

    ch = 0;
    control_last = 0;

	// Return unread - last read - data and control lines
    if(gpib_unread_f)
   11378:	20 91 5f 19 	lds	r18, 0x195F	; 0x80195f <gpib_unread_f>
   1137c:	22 23       	and	r18, r18
   1137e:	39 f0       	breq	.+14     	; 0x1138e <gpib_read_byte+0x2e>
    {
		// FYI any unread data has been traced
        gpib_unread_f = 0;
   11380:	10 92 5f 19 	sts	0x195F, r1	; 0x80195f <gpib_unread_f>
        return(gpib_unread_data);
   11384:	80 91 f2 1e 	lds	r24, 0x1EF2	; 0x801ef2 <gpib_unread_data>
   11388:	90 91 f3 1e 	lds	r25, 0x1EF3	; 0x801ef3 <gpib_unread_data+0x1>
   1138c:	e0 c0       	rjmp	.+448    	; 0x1154e <gpib_read_byte+0x1ee>
   1138e:	6c 01       	movw	r12, r24
	// We start and end gpib_read_byte() with NRFD and NDAC LOW 
	// When ATN goes LOW all devices must pull NRFD and NDAC lines LOW
	// within 200 nanoseconds to permit three-wire handshake 
	// ATN requirements are met because we are always reading in command mode
	// ATN = 0 = COmmand Mode
    gpib_rx_init(1);
   11390:	81 e0       	ldi	r24, 0x01	; 1
   11392:	05 dc       	rcall	.-2038   	; 0x10b9e <gpib_rx_init>
	// GPIB_IO_LOW(TE);			// BUS IN
	// BUS IN, DAV IN, NDAC OUT , NRFD OUT 
	// ATN IN, EOI IN, SRQ OUT OC

	///@brief V2 boards can NOT read ALL bits on the control bus at once
    if(trace)
   11394:	c1 14       	cp	r12, r1
   11396:	d1 04       	cpc	r13, r1
    {
        control_last = gpib_control_pin_read();
   11398:	51 f0       	breq	.+20     	; 0x113ae <gpib_read_byte+0x4e>
   1139a:	fa dc       	rcall	.-1548   	; 0x10d90 <gpib_control_pin_read>
        control_last |= gpib_handshake_pin_read();
   1139c:	7c 01       	movw	r14, r24
   1139e:	08 dd       	rcall	.-1520   	; 0x10db0 <gpib_handshake_pin_read>
   113a0:	e8 2a       	or	r14, r24
   113a2:	f9 2a       	or	r15, r25
        gpib_trace_display(control_last, TRACE_BUS);
   113a4:	62 e0       	ldi	r22, 0x02	; 2
   113a6:	70 e0       	ldi	r23, 0x00	; 0
   113a8:	c7 01       	movw	r24, r14
   113aa:	98 de       	rcall	.-720    	; 0x110dc <gpib_trace_display>
   113ac:	02 c0       	rjmp	.+4      	; 0x113b2 <gpib_read_byte+0x52>
    uint16_t bus, control, control_last;
    extern uint8_t gpib_unread_f;
    extern uint16_t gpib_unread_data;

    ch = 0;
    control_last = 0;
   113ae:	e1 2c       	mov	r14, r1
   113b0:	f1 2c       	mov	r15, r1
        control_last = gpib_control_pin_read();
        control_last |= gpib_handshake_pin_read();
        gpib_trace_display(control_last, TRACE_BUS);
    }

	gpib_timeout_set(HTIMEOUT);
   113b2:	64 ef       	ldi	r22, 0xF4	; 244
   113b4:	71 e0       	ldi	r23, 0x01	; 1
   113b6:	80 e0       	ldi	r24, 0x00	; 0
   113b8:	90 e0       	ldi	r25, 0x00	; 0
   113ba:	af db       	rcall	.-2210   	; 0x10b1a <gpib_timeout_set>
    rx_state = GPIB_RX_START;
   113bc:	c0 e0       	ldi	r28, 0x00	; 0
    uint16_t ch;
    uint16_t bus, control, control_last;
    extern uint8_t gpib_unread_f;
    extern uint16_t gpib_unread_data;

    ch = 0;
   113be:	00 e0       	ldi	r16, 0x00	; 0
   113c0:	10 e0       	ldi	r17, 0x00	; 0
    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
    {

        // User task that is called while waiting for commands
        gpib_user_task();
   113c2:	0e 94 27 e2 	call	0x1c44e	; 0x1c44e <gpib_user_task>

        if(uart_keyhit(0))
   113c6:	80 e0       	ldi	r24, 0x00	; 0
   113c8:	0e 94 50 2a 	call	0x54a0	; 0x54a0 <uart_keyhit>
   113cc:	89 2b       	or	r24, r25
   113ce:	09 f0       	breq	.+2      	; 0x113d2 <gpib_read_byte+0x72>
   113d0:	9c c0       	rjmp	.+312    	; 0x1150a <gpib_read_byte+0x1aa>
        if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

		// IFC is alwayon IN always in device mode
        if(GPIB_PIN_TST(IFC) == 0)
   113d2:	4c 99       	sbic	0x09, 4	; 9
   113d4:	15 c0       	rjmp	.+42     	; 0x11400 <gpib_read_byte+0xa0>
        {
            ch |= IFC_FLAG;
   113d6:	10 61       	ori	r17, 0x10	; 16
			if(debuglevel & GPIB_ERR)
   113d8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   113dc:	80 ff       	sbrs	r24, 0
   113de:	0e c0       	rjmp	.+28     	; 0x113fc <gpib_read_byte+0x9c>
				printf("gpib_read_byte: IFC state=%d\n", rx_state);
   113e0:	8c 2f       	mov	r24, r28
   113e2:	90 e0       	ldi	r25, 0x00	; 0
   113e4:	ed b7       	in	r30, 0x3d	; 61
   113e6:	fe b7       	in	r31, 0x3e	; 62
   113e8:	95 83       	std	Z+5, r25	; 0x05
   113ea:	84 83       	std	Z+4, r24	; 0x04
   113ec:	8e e1       	ldi	r24, 0x1E	; 30
   113ee:	90 e1       	ldi	r25, 0x10	; 16
   113f0:	a0 e0       	ldi	r26, 0x00	; 0
   113f2:	81 83       	std	Z+1, r24	; 0x01
   113f4:	92 83       	std	Z+2, r25	; 0x02
   113f6:	a3 83       	std	Z+3, r26	; 0x03
   113f8:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
            gpib_bus_init();
   113fc:	98 db       	rcall	.-2256   	; 0x10b2e <gpib_bus_init>
   113fe:	85 c0       	rjmp	.+266    	; 0x1150a <gpib_read_byte+0x1aa>
            break;
        }

        switch(rx_state)
   11400:	c2 30       	cpi	r28, 0x02	; 2
   11402:	31 f1       	breq	.+76     	; 0x11450 <gpib_read_byte+0xf0>
   11404:	28 f4       	brcc	.+10     	; 0x11410 <gpib_read_byte+0xb0>
   11406:	cc 23       	and	r28, r28
   11408:	69 f0       	breq	.+26     	; 0x11424 <gpib_read_byte+0xc4>
   1140a:	c1 30       	cpi	r28, 0x01	; 1
   1140c:	c9 f0       	breq	.+50     	; 0x11440 <gpib_read_byte+0xe0>
   1140e:	63 c0       	rjmp	.+198    	; 0x114d6 <gpib_read_byte+0x176>
   11410:	c5 30       	cpi	r28, 0x05	; 5
   11412:	09 f4       	brne	.+2      	; 0x11416 <gpib_read_byte+0xb6>
   11414:	54 c0       	rjmp	.+168    	; 0x114be <gpib_read_byte+0x15e>
   11416:	c7 30       	cpi	r28, 0x07	; 7
   11418:	09 f4       	brne	.+2      	; 0x1141c <gpib_read_byte+0xbc>
   1141a:	58 c0       	rjmp	.+176    	; 0x114cc <gpib_read_byte+0x16c>
   1141c:	c4 30       	cpi	r28, 0x04	; 4
   1141e:	09 f0       	breq	.+2      	; 0x11422 <gpib_read_byte+0xc2>
   11420:	5a c0       	rjmp	.+180    	; 0x114d6 <gpib_read_byte+0x176>
   11422:	3e c0       	rjmp	.+124    	; 0x114a0 <gpib_read_byte+0x140>
        {

			///@brief DAV must be high
            case GPIB_RX_START:
				//DEBUG
				if (GPIB_PIN_TST(DAV) == 1)
   11424:	19 9b       	sbis	0x03, 1	; 3
   11426:	43 c0       	rjmp	.+134    	; 0x114ae <gpib_read_byte+0x14e>
   11428:	fd e0       	ldi	r31, 0x0D	; 13
   1142a:	fa 95       	dec	r31
   1142c:	f1 f7       	brne	.-4      	; 0x1142a <gpib_read_byte+0xca>
   1142e:	00 00       	nop
				{
					GPIB_BUS_SETTLE();                // Let Data BUS settle
					GPIB_PIN_FLOAT_UP(NRFD);
   11430:	52 98       	cbi	0x0a, 2	; 10
   11432:	5a 9a       	sbi	0x0b, 2	; 11
   11434:	8d e0       	ldi	r24, 0x0D	; 13
   11436:	8a 95       	dec	r24
   11438:	f1 f7       	brne	.-4      	; 0x11436 <gpib_read_byte+0xd6>
   1143a:	00 00       	nop
					GPIB_BUS_SETTLE();                // Let Data BUS settle
					rx_state = GPIB_RX_WAIT_FOR_DAV_LOW;
   1143c:	c1 e0       	ldi	r28, 0x01	; 1
   1143e:	37 c0       	rjmp	.+110    	; 0x114ae <gpib_read_byte+0x14e>
                }
                break;

			// Wait for Data Avalable without timeout
            case GPIB_RX_WAIT_FOR_DAV_LOW:
                if ( GPIB_PIN_TST(DAV) == 0 )
   11440:	19 99       	sbic	0x03, 1	; 3
   11442:	80 c0       	rjmp	.+256    	; 0x11544 <gpib_read_byte+0x1e4>
   11444:	ed e0       	ldi	r30, 0x0D	; 13
   11446:	ea 95       	dec	r30
   11448:	f1 f7       	brne	.-4      	; 0x11446 <gpib_read_byte+0xe6>
   1144a:	00 00       	nop
				{
					GPIB_BUS_SETTLE();                
                    rx_state = GPIB_RX_DAV_IS_LOW;
   1144c:	c2 e0       	ldi	r28, 0x02	; 2
   1144e:	7a c0       	rjmp	.+244    	; 0x11544 <gpib_read_byte+0x1e4>
				}
                break;

			// Data is Avaliable
            case GPIB_RX_DAV_IS_LOW:
				GPIB_IO_LOW(NRFD); // BUSY
   11450:	5a 98       	cbi	0x0b, 2	; 11
   11452:	52 9a       	sbi	0x0a, 2	; 10
   11454:	fd e0       	ldi	r31, 0x0D	; 13
   11456:	fa 95       	dec	r31
				GPIB_BUS_SETTLE();                

				// Read DATA and Control lines
				// gpib_bus_read() strips parity if ATN is low command state

                bus = gpib_bus_read();
   11458:	f1 f7       	brne	.-4      	; 0x11456 <gpib_read_byte+0xf6>
   1145a:	00 00       	nop
   1145c:	93 dc       	rcall	.-1754   	; 0x10d84 <gpib_bus_read>
   1145e:	a8 2e       	mov	r10, r24
                ch |= bus;

				///@brief V2 boards can NOT read all control bits at once
				///@brief NRFD,NDAC and SRQ are cirrently outputs

                control_last = gpib_control_pin_read();
   11460:	b1 2c       	mov	r11, r1
   11462:	96 dc       	rcall	.-1748   	; 0x10d90 <gpib_control_pin_read>
   11464:	7c 01       	movw	r14, r24
   11466:	08 2b       	or	r16, r24
                ch |= control_last;
   11468:	19 2b       	or	r17, r25
   1146a:	0a 29       	or	r16, r10

				// In theory the control_last should not have changed
				// from the initial values. ONly the Data BUS
                if(trace)
   1146c:	1b 29       	or	r17, r11
   1146e:	c1 14       	cp	r12, r1
   11470:	d1 04       	cpc	r13, r1
                {
                    control_last |= gpib_handshake_pin_read();
   11472:	49 f0       	breq	.+18     	; 0x11486 <gpib_read_byte+0x126>
   11474:	9d dc       	rcall	.-1734   	; 0x10db0 <gpib_handshake_pin_read>
   11476:	e8 2a       	or	r14, r24
                    gpib_trace_display(bus | control_last, TRACE_READ);
   11478:	f9 2a       	or	r15, r25
   1147a:	61 e0       	ldi	r22, 0x01	; 1
   1147c:	70 e0       	ldi	r23, 0x00	; 0
   1147e:	c5 01       	movw	r24, r10
   11480:	8e 29       	or	r24, r14
   11482:	9f 29       	or	r25, r15
   11484:	2b de       	rcall	.-938    	; 0x110dc <gpib_trace_display>
                }

				// Release NDAC to say we read the byte
                GPIB_PIN_FLOAT_UP(NDAC);
   11486:	53 98       	cbi	0x0a, 3	; 10
   11488:	5b 9a       	sbi	0x0b, 3	; 11
   1148a:	8d e0       	ldi	r24, 0x0D	; 13
   1148c:	8a 95       	dec	r24
   1148e:	f1 f7       	brne	.-4      	; 0x1148c <gpib_read_byte+0x12c>
                GPIB_BUS_SETTLE();                // NDAC bus settle time
                gpib_timeout_set(HTIMEOUT);
   11490:	00 00       	nop
   11492:	64 ef       	ldi	r22, 0xF4	; 244
   11494:	71 e0       	ldi	r23, 0x01	; 1
   11496:	80 e0       	ldi	r24, 0x00	; 0
   11498:	90 e0       	ldi	r25, 0x00	; 0
   1149a:	3f db       	rcall	.-2434   	; 0x10b1a <gpib_timeout_set>
                rx_state = GPIB_RX_WAIT_FOR_DAV_HI;
   1149c:	c4 e0       	ldi	r28, 0x04	; 4
   1149e:	52 c0       	rjmp	.+164    	; 0x11544 <gpib_read_byte+0x1e4>
                break;

			///@brief Wait for DAV HI
            case GPIB_RX_WAIT_FOR_DAV_HI:
                if (GPIB_PIN_TST(DAV) == 1)
   114a0:	19 9b       	sbis	0x03, 1	; 3
   114a2:	05 c0       	rjmp	.+10     	; 0x114ae <gpib_read_byte+0x14e>
   114a4:	ed e0       	ldi	r30, 0x0D	; 13
   114a6:	ea 95       	dec	r30
   114a8:	f1 f7       	brne	.-4      	; 0x114a6 <gpib_read_byte+0x146>
   114aa:	00 00       	nop
                {
					GPIB_BUS_SETTLE();
                    rx_state = GPIB_RX_DAV_IS_HI;
   114ac:	c5 e0       	ldi	r28, 0x05	; 5
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   114ae:	80 91 e7 1c 	lds	r24, 0x1CE7	; 0x801ce7 <gpib_timer+0x8>
                if (GPIB_PIN_TST(DAV) == 1)
                {
					GPIB_BUS_SETTLE();
                    rx_state = GPIB_RX_DAV_IS_HI;
                }
                if (gpib_timeout_test())
   114b2:	88 23       	and	r24, r24
   114b4:	09 f4       	brne	.+2      	; 0x114b8 <gpib_read_byte+0x158>
   114b6:	46 c0       	rjmp	.+140    	; 0x11544 <gpib_read_byte+0x1e4>
                {
                    ch |= TIMEOUT_FLAG;
   114b8:	10 64       	ori	r17, 0x40	; 64
                    rx_state = GPIB_RX_ERROR;
   114ba:	c7 e0       	ldi	r28, 0x07	; 7
   114bc:	43 c0       	rjmp	.+134    	; 0x11544 <gpib_read_byte+0x1e4>
                }
                break;

			///@brief Ready for next byte
            case GPIB_RX_DAV_IS_HI:
				GPIB_IO_LOW(NDAC);
   114be:	5b 98       	cbi	0x0b, 3	; 11
   114c0:	53 9a       	sbi	0x0a, 3	; 10
   114c2:	fd e0       	ldi	r31, 0x0D	; 13
   114c4:	fa 95       	dec	r31
   114c6:	f1 f7       	brne	.-4      	; 0x114c4 <gpib_read_byte+0x164>
   114c8:	00 00       	nop
   114ca:	09 c0       	rjmp	.+18     	; 0x114de <gpib_read_byte+0x17e>
				// Now BOTH NDAC and NRFD are LOW
                rx_state = GPIB_RX_DONE;
                break;

            case GPIB_RX_ERROR:
				GPIB_IO_LOW(NRFD);
   114cc:	5a 98       	cbi	0x0b, 2	; 11
   114ce:	52 9a       	sbi	0x0a, 2	; 10
				GPIB_IO_LOW(NDAC);
   114d0:	5b 98       	cbi	0x0b, 3	; 11
   114d2:	53 9a       	sbi	0x0a, 3	; 10

            case GPIB_RX_DONE:
                break;
        }

        if(trace)
   114d4:	04 c0       	rjmp	.+8      	; 0x114de <gpib_read_byte+0x17e>
   114d6:	c1 14       	cp	r12, r1
   114d8:	d1 04       	cpc	r13, r1
   114da:	91 f0       	breq	.+36     	; 0x11500 <gpib_read_byte+0x1a0>
   114dc:	04 c0       	rjmp	.+8      	; 0x114e6 <gpib_read_byte+0x186>
   114de:	c1 14       	cp	r12, r1
   114e0:	d1 04       	cpc	r13, r1
   114e2:	99 f0       	breq	.+38     	; 0x1150a <gpib_read_byte+0x1aa>
        {
/// V2 boards can not read all control and handshake bits at once
/// FIXME We could add a test for read/write state ??
/// NRFD,NDAC SRQ are outputs durring write phase, but not at very start
            control = gpib_control_pin_read();
   114e4:	c8 e0       	ldi	r28, 0x08	; 8
   114e6:	54 dc       	rcall	.-1880   	; 0x10d90 <gpib_control_pin_read>
            control |= gpib_handshake_pin_read();
   114e8:	5c 01       	movw	r10, r24
   114ea:	62 dc       	rcall	.-1852   	; 0x10db0 <gpib_handshake_pin_read>
   114ec:	a8 2a       	or	r10, r24
   114ee:	b9 2a       	or	r11, r25
            if(control_last != control)
   114f0:	ae 14       	cp	r10, r14
   114f2:	bf 04       	cpc	r11, r15
   114f4:	31 f0       	breq	.+12     	; 0x11502 <gpib_read_byte+0x1a2>
            {
                gpib_trace_display(control, TRACE_BUS);
   114f6:	62 e0       	ldi	r22, 0x02	; 2
   114f8:	70 e0       	ldi	r23, 0x00	; 0
   114fa:	c5 01       	movw	r24, r10
   114fc:	ef dd       	rcall	.-1058   	; 0x110dc <gpib_trace_display>
   114fe:	01 c0       	rjmp	.+2      	; 0x11502 <gpib_read_byte+0x1a2>
   11500:	57 01       	movw	r10, r14

            case GPIB_RX_DONE:
                break;
        }

        if(trace)
   11502:	c8 30       	cpi	r28, 0x08	; 8
        gpib_trace_display(control_last, TRACE_BUS);
    }

	gpib_timeout_set(HTIMEOUT);
    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
   11504:	11 f0       	breq	.+4      	; 0x1150a <gpib_read_byte+0x1aa>
   11506:	75 01       	movw	r14, r10
   11508:	5c cf       	rjmp	.-328    	; 0x113c2 <gpib_read_byte+0x62>
   1150a:	80 91 ec 1e 	lds	r24, 0x1EEC	; 0x801eec <current>
///  - Remember that NDAC and NRFD are now both LOW!
///  - The spec says to KEEP BOTH LOW when NOT ready to read otherwise
///    we may miss a transfer and cause a controller timeout!
///  - GPIB TX state expects NRFD LOW on entry or it is an ERROR!

    lastcmd = current;
   1150e:	90 91 ed 1e 	lds	r25, 0x1EED	; 0x801eed <current+0x1>
   11512:	90 93 e9 1c 	sts	0x1CE9, r25	; 0x801ce9 <lastcmd+0x1>
   11516:	80 93 e8 1c 	sts	0x1CE8, r24	; 0x801ce8 <lastcmd>
   1151a:	c8 01       	movw	r24, r16

    if(ch & ERROR_MASK || (ch & ATN_FLAG) == 0)
   1151c:	88 27       	eor	r24, r24
   1151e:	90 7d       	andi	r25, 0xD0	; 208
   11520:	89 2b       	or	r24, r25
   11522:	11 f4       	brne	.+4      	; 0x11528 <gpib_read_byte+0x1c8>
   11524:	12 fd       	sbrc	r17, 2
   11526:	05 c0       	rjmp	.+10     	; 0x11532 <gpib_read_byte+0x1d2>
   11528:	10 92 ed 1e 	sts	0x1EED, r1	; 0x801eed <current+0x1>
        current = 0;
   1152c:	10 92 ec 1e 	sts	0x1EEC, r1	; 0x801eec <current>
   11530:	07 c0       	rjmp	.+14     	; 0x11540 <gpib_read_byte+0x1e0>
   11532:	c8 01       	movw	r24, r16
    else
        current = ch & CMD_MASK;
   11534:	8f 77       	andi	r24, 0x7F	; 127
   11536:	99 27       	eor	r25, r25
   11538:	90 93 ed 1e 	sts	0x1EED, r25	; 0x801eed <current+0x1>
   1153c:	80 93 ec 1e 	sts	0x1EEC, r24	; 0x801eec <current>
   11540:	c8 01       	movw	r24, r16
   11542:	05 c0       	rjmp	.+10     	; 0x1154e <gpib_read_byte+0x1ee>
   11544:	c1 14       	cp	r12, r1

            case GPIB_RX_DONE:
                break;
        }

        if(trace)
   11546:	d1 04       	cpc	r13, r1
   11548:	09 f4       	brne	.+2      	; 0x1154c <gpib_read_byte+0x1ec>
   1154a:	3b cf       	rjmp	.-394    	; 0x113c2 <gpib_read_byte+0x62>
   1154c:	cc cf       	rjmp	.-104    	; 0x114e6 <gpib_read_byte+0x186>
   1154e:	0f 90       	pop	r0
        current = 0;
    else
        current = ch & CMD_MASK;

    return (ch);
}
   11550:	0f 90       	pop	r0
   11552:	0f 90       	pop	r0
   11554:	0f 90       	pop	r0
   11556:	0f 90       	pop	r0
   11558:	cf 91       	pop	r28
   1155a:	1f 91       	pop	r17
   1155c:	0f 91       	pop	r16
   1155e:	ff 90       	pop	r15
   11560:	ef 90       	pop	r14
   11562:	df 90       	pop	r13
   11564:	cf 90       	pop	r12
   11566:	bf 90       	pop	r11
   11568:	af 90       	pop	r10
   1156a:	08 95       	ret

0001156c <gpib_decode>:
   1156c:	60 e0       	ldi	r22, 0x00	; 0
/// @see gpib_decode_str()
/// @return  void

void gpib_decode(uint16_t ch)
{
    gpib_trace_display(ch,0);
   1156e:	70 e0       	ldi	r23, 0x00	; 0
   11570:	b5 cd       	rjmp	.-1174   	; 0x110dc <gpib_trace_display>
   11572:	08 95       	ret

00011574 <gpib_read_str>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
int gpib_read_str(uint8_t *buf, int size, uint16_t *status)
{
   11574:	a7 e0       	ldi	r26, 0x07	; 7
   11576:	b0 e0       	ldi	r27, 0x00	; 0
   11578:	e0 ec       	ldi	r30, 0xC0	; 192
   1157a:	fa e8       	ldi	r31, 0x8A	; 138
   1157c:	0c 94 c3 e6 	jmp	0x1cd86	; 0x1cd86 <__prologue_saves__+0x10>
   11580:	5b 01       	movw	r10, r22
   11582:	6a 01       	movw	r12, r20
    uint16_t val;
    int ind = 0;

    *status &= STATUS_MASK;
   11584:	fa 01       	movw	r30, r20
   11586:	20 81       	ld	r18, Z
   11588:	31 81       	ldd	r19, Z+1	; 0x01
   1158a:	22 27       	eor	r18, r18
   1158c:	31 83       	std	Z+1, r19	; 0x01
   1158e:	20 83       	st	Z, r18

    if(!size)
   11590:	67 2b       	or	r22, r23
   11592:	21 f0       	breq	.+8      	; 0x1159c <gpib_read_str+0x28>
   11594:	7c 01       	movw	r14, r24
   11596:	00 e0       	ldi	r16, 0x00	; 0
   11598:	10 e0       	ldi	r17, 0x00	; 0
   1159a:	28 c0       	rjmp	.+80     	; 0x115ec <gpib_read_str+0x78>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   1159c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   115a0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   115a4:	81 72       	andi	r24, 0x21	; 33
   115a6:	91 70       	andi	r25, 0x01	; 1
   115a8:	89 2b       	or	r24, r25
   115aa:	09 f4       	brne	.+2      	; 0x115ae <gpib_read_str+0x3a>
   115ac:	7c c0       	rjmp	.+248    	; 0x116a6 <gpib_read_str+0x132>
            printf("gpib_read_str: size = 0\n");
   115ae:	85 ed       	ldi	r24, 0xD5	; 213
   115b0:	9f e0       	ldi	r25, 0x0F	; 15
   115b2:	a0 e0       	ldi	r26, 0x00	; 0
   115b4:	ed b7       	in	r30, 0x3d	; 61
   115b6:	fe b7       	in	r31, 0x3e	; 62
   115b8:	81 83       	std	Z+1, r24	; 0x01
   115ba:	92 83       	std	Z+2, r25	; 0x02
   115bc:	a3 83       	std	Z+3, r26	; 0x03
   115be:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   115c2:	71 c0       	rjmp	.+226    	; 0x116a6 <gpib_read_str+0x132>
        {
            *status |= (val & ERROR_MASK);
            break;
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
   115c4:	8c 27       	eor	r24, r28
   115c6:	9d 27       	eor	r25, r29
   115c8:	92 fd       	sbrc	r25, 2
   115ca:	2e c0       	rjmp	.+92     	; 0x11628 <gpib_read_str+0xb4>
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
            gpib_unread(val);
            break;
        }

        if(val & ATN_FLAG)
   115cc:	ce 01       	movw	r24, r28
   115ce:	88 27       	eor	r24, r24
   115d0:	94 70       	andi	r25, 0x04	; 4
            buf[ind] = (val & CMD_MASK);
   115d2:	2c 2f       	mov	r18, r28
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
            gpib_unread(val);
            break;
        }

        if(val & ATN_FLAG)
   115d4:	d2 fd       	sbrc	r29, 2
            buf[ind] = (val & CMD_MASK);
   115d6:	2f 77       	andi	r18, 0x7F	; 127
        else
            buf[ind] = (val & DATA_MASK);
   115d8:	f7 01       	movw	r30, r14
   115da:	20 83       	st	Z, r18
        ++ind;
   115dc:	0f 5f       	subi	r16, 0xFF	; 255
   115de:	1f 4f       	sbci	r17, 0xFF	; 255

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   115e0:	89 2b       	or	r24, r25
   115e2:	09 f4       	brne	.+2      	; 0x115e6 <gpib_read_str+0x72>
   115e4:	3c c0       	rjmp	.+120    	; 0x1165e <gpib_read_str+0xea>
   115e6:	ff ef       	ldi	r31, 0xFF	; 255
   115e8:	ef 1a       	sub	r14, r31
   115ea:	ff 0a       	sbc	r15, r31
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
            printf("gpib_read_str: size = 0\n");
    }

    while(ind < size)
   115ec:	0a 15       	cp	r16, r10
   115ee:	1b 05       	cpc	r17, r11
   115f0:	0c f0       	brlt	.+2      	; 0x115f4 <gpib_read_str+0x80>
   115f2:	3f c0       	rjmp	.+126    	; 0x11672 <gpib_read_str+0xfe>
    {
        val = gpib_read_byte(NO_TRACE);
   115f4:	80 e0       	ldi	r24, 0x00	; 0
   115f6:	90 e0       	ldi	r25, 0x00	; 0
   115f8:	b3 de       	rcall	.-666    	; 0x11360 <gpib_read_byte>
   115fa:	ec 01       	movw	r28, r24
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_BUS_DECODE)
   115fc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11600:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11604:	90 ff       	sbrs	r25, 0
   11606:	02 c0       	rjmp	.+4      	; 0x1160c <gpib_read_str+0x98>
            gpib_decode(val);
   11608:	ce 01       	movw	r24, r28
   1160a:	b0 df       	rcall	.-160    	; 0x1156c <gpib_decode>
#endif
        if(val & ERROR_MASK)
   1160c:	9e 01       	movw	r18, r28
   1160e:	22 27       	eor	r18, r18
   11610:	30 7d       	andi	r19, 0xD0	; 208
   11612:	f6 01       	movw	r30, r12
   11614:	80 81       	ld	r24, Z
   11616:	91 81       	ldd	r25, Z+1	; 0x01
   11618:	21 15       	cp	r18, r1
   1161a:	31 05       	cpc	r19, r1
   1161c:	99 f2       	breq	.-90     	; 0x115c4 <gpib_read_str+0x50>
        {
            *status |= (val & ERROR_MASK);
   1161e:	82 2b       	or	r24, r18
   11620:	93 2b       	or	r25, r19
   11622:	91 83       	std	Z+1, r25	; 0x01
   11624:	80 83       	st	Z, r24
            break;
   11626:	28 c0       	rjmp	.+80     	; 0x11678 <gpib_read_str+0x104>
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
        {
            if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   11628:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1162c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11630:	81 72       	andi	r24, 0x21	; 33
   11632:	91 70       	andi	r25, 0x01	; 1
   11634:	89 2b       	or	r24, r25
   11636:	81 f0       	breq	.+32     	; 0x11658 <gpib_read_str+0xe4>
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
   11638:	ce 01       	movw	r24, r28
   1163a:	99 27       	eor	r25, r25
   1163c:	ed b7       	in	r30, 0x3d	; 61
   1163e:	fe b7       	in	r31, 0x3e	; 62
   11640:	97 83       	std	Z+7, r25	; 0x07
   11642:	86 83       	std	Z+6, r24	; 0x06
   11644:	15 83       	std	Z+5, r17	; 0x05
   11646:	04 83       	std	Z+4, r16	; 0x04
   11648:	88 ea       	ldi	r24, 0xA8	; 168
   1164a:	9f e0       	ldi	r25, 0x0F	; 15
   1164c:	a0 e0       	ldi	r26, 0x00	; 0
   1164e:	81 83       	std	Z+1, r24	; 0x01
   11650:	92 83       	std	Z+2, r25	; 0x02
   11652:	a3 83       	std	Z+3, r26	; 0x03
   11654:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
            gpib_unread(val);
   11658:	ce 01       	movw	r24, r28
   1165a:	6a db       	rcall	.-2348   	; 0x10d30 <gpib_unread>
            break;
   1165c:	0d c0       	rjmp	.+26     	; 0x11678 <gpib_read_str+0x104>
            buf[ind] = (val & CMD_MASK);
        else
            buf[ind] = (val & DATA_MASK);
        ++ind;

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   1165e:	d0 ff       	sbrs	r29, 0
   11660:	c2 cf       	rjmp	.-124    	; 0x115e6 <gpib_read_str+0x72>
        {

            if(*status & EOI_FLAG)
   11662:	f6 01       	movw	r30, r12
   11664:	80 81       	ld	r24, Z
   11666:	91 81       	ldd	r25, Z+1	; 0x01
   11668:	90 fd       	sbrc	r25, 0
   1166a:	1f c0       	rjmp	.+62     	; 0x116aa <gpib_read_str+0x136>
                return(ind);
/// @todo TODO
///  decode this state - for now I just set the EOI_FLAG
            *status |= EOI_FLAG;
   1166c:	91 60       	ori	r25, 0x01	; 1
   1166e:	91 83       	std	Z+1, r25	; 0x01
   11670:	80 83       	st	Z, r24
            break;
        }
    }
    if ( ind != size ) 
   11672:	0a 15       	cp	r16, r10
   11674:	1b 05       	cpc	r17, r11
   11676:	c9 f0       	breq	.+50     	; 0x116aa <gpib_read_str+0x136>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   11678:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1167c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11680:	81 72       	andi	r24, 0x21	; 33
   11682:	99 27       	eor	r25, r25
   11684:	89 2b       	or	r24, r25
   11686:	89 f0       	breq	.+34     	; 0x116aa <gpib_read_str+0x136>
            printf("[gpib_read_str read(%d) expected(%d)]\n", ind , size);
   11688:	ed b7       	in	r30, 0x3d	; 61
   1168a:	fe b7       	in	r31, 0x3e	; 62
   1168c:	b7 82       	std	Z+7, r11	; 0x07
   1168e:	a6 82       	std	Z+6, r10	; 0x06
   11690:	15 83       	std	Z+5, r17	; 0x05
   11692:	04 83       	std	Z+4, r16	; 0x04
   11694:	81 e8       	ldi	r24, 0x81	; 129
   11696:	9f e0       	ldi	r25, 0x0F	; 15
   11698:	a0 e0       	ldi	r26, 0x00	; 0
   1169a:	81 83       	std	Z+1, r24	; 0x01
   1169c:	92 83       	std	Z+2, r25	; 0x02
   1169e:	a3 83       	std	Z+3, r26	; 0x03
   116a0:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   116a4:	02 c0       	rjmp	.+4      	; 0x116aa <gpib_read_str+0x136>
   116a6:	00 e0       	ldi	r16, 0x00	; 0
   116a8:	10 e0       	ldi	r17, 0x00	; 0
    }
    return(ind);
}
   116aa:	c8 01       	movw	r24, r16
   116ac:	cd b7       	in	r28, 0x3d	; 61
   116ae:	de b7       	in	r29, 0x3e	; 62
   116b0:	27 96       	adiw	r28, 0x07	; 7
   116b2:	ea e0       	ldi	r30, 0x0A	; 10
   116b4:	0c 94 df e6 	jmp	0x1cdbe	; 0x1cdbe <__epilogue_restores__+0x10>

000116b8 <gpib_write_str>:
///     - Error Flags:
///       - IFC_FLAG
/// @see: gpib_write_byte()
/// @see: gpib.h _FLAGS defines for a full list)
int gpib_write_str(uint8_t *buf, int size, uint16_t *status)
{
   116b8:	a7 e0       	ldi	r26, 0x07	; 7
   116ba:	b0 e0       	ldi	r27, 0x00	; 0
   116bc:	e2 e6       	ldi	r30, 0x62	; 98
   116be:	fb e8       	ldi	r31, 0x8B	; 139
   116c0:	0c 94 c3 e6 	jmp	0x1cd86	; 0x1cd86 <__prologue_saves__+0x10>
   116c4:	d8 2f       	mov	r29, r24
   116c6:	c9 2f       	mov	r28, r25
   116c8:	7b 01       	movw	r14, r22
   116ca:	8a 01       	movw	r16, r20
    uint16_t val, ch;
    int ind = 0;

    *status &= STATUS_MASK;
   116cc:	fa 01       	movw	r30, r20
   116ce:	80 81       	ld	r24, Z
   116d0:	91 81       	ldd	r25, Z+1	; 0x01
   116d2:	88 27       	eor	r24, r24
   116d4:	91 83       	std	Z+1, r25	; 0x01
   116d6:	80 83       	st	Z, r24

    if(!size)
   116d8:	67 2b       	or	r22, r23
   116da:	91 f4       	brne	.+36     	; 0x11700 <gpib_write_str+0x48>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   116dc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   116e0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   116e4:	81 72       	andi	r24, 0x21	; 33
   116e6:	91 70       	andi	r25, 0x01	; 1
   116e8:	89 2b       	or	r24, r25
   116ea:	51 f0       	breq	.+20     	; 0x11700 <gpib_write_str+0x48>
            printf("gpib_write_str: size = 0\n");
   116ec:	87 e6       	ldi	r24, 0x67	; 103
   116ee:	9f e0       	ldi	r25, 0x0F	; 15
   116f0:	a0 e0       	ldi	r26, 0x00	; 0
   116f2:	ed b7       	in	r30, 0x3d	; 61
   116f4:	fe b7       	in	r31, 0x3e	; 62
   116f6:	81 83       	std	Z+1, r24	; 0x01
   116f8:	92 83       	std	Z+2, r25	; 0x02
   116fa:	a3 83       	std	Z+3, r26	; 0x03
   116fc:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    }

	// Start with NRFD and NDAC = 1 - ie off the OC BUS
	gpib_rx_init(0);
   11700:	80 e0       	ldi	r24, 0x00	; 0
   11702:	4d da       	rcall	.-2918   	; 0x10b9e <gpib_rx_init>

// Wait until ATN is released!
#if 1
    if (GPIB_PIN_TST(ATN) == 0)
   11704:	4e 9b       	sbis	0x09, 6	; 9
   11706:	06 c0       	rjmp	.+12     	; 0x11714 <gpib_write_str+0x5c>
#endif

// Wait until DAV is released!
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
   11708:	64 ef       	ldi	r22, 0xF4	; 244
   1170a:	71 e0       	ldi	r23, 0x01	; 1
   1170c:	80 e0       	ldi	r24, 0x00	; 0
   1170e:	90 e0       	ldi	r25, 0x00	; 0
   11710:	04 da       	rcall	.-3064   	; 0x10b1a <gpib_timeout_set>
	while ( GPIB_PIN_TST(DAV) == 0)
   11712:	18 c0       	rjmp	.+48     	; 0x11744 <gpib_write_str+0x8c>
#endif
		// Wait for ATN free
		// Keep in mind that we have been addressed to talk already
		// So waiting is ok - they won't be expecting a reply until
		// They are ready
		gpib_timeout_set(HTIMEOUT);
   11714:	64 ef       	ldi	r22, 0xF4	; 244
   11716:	71 e0       	ldi	r23, 0x01	; 1
   11718:	80 e0       	ldi	r24, 0x00	; 0
   1171a:	90 e0       	ldi	r25, 0x00	; 0
   1171c:	fe d9       	rcall	.-3076   	; 0x10b1a <gpib_timeout_set>
		while(GPIB_PIN_TST(ATN) == 0)
   1171e:	4e 99       	sbic	0x09, 6	; 9
   11720:	f3 cf       	rjmp	.-26     	; 0x11708 <gpib_write_str+0x50>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11722:	80 91 e7 1c 	lds	r24, 0x1CE7	; 0x801ce7 <gpib_timer+0x8>
		// So waiting is ok - they won't be expecting a reply until
		// They are ready
		gpib_timeout_set(HTIMEOUT);
		while(GPIB_PIN_TST(ATN) == 0)
		{
			if(gpib_timeout_test())
   11726:	88 23       	and	r24, r24
			{
				gpib_rx_init(1);
   11728:	d1 f3       	breq	.-12     	; 0x1171e <gpib_write_str+0x66>
   1172a:	81 e0       	ldi	r24, 0x01	; 1
   1172c:	38 da       	rcall	.-2960   	; 0x10b9e <gpib_rx_init>
				if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   1172e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11732:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11736:	85 70       	andi	r24, 0x05	; 5
   11738:	99 27       	eor	r25, r25
   1173a:	89 2b       	or	r24, r25
   1173c:	d9 f0       	breq	.+54     	; 0x11774 <gpib_write_str+0xbc>
					printf("<gpib_write_str timeout waiting for ATN = 1>\n");
   1173e:	89 e3       	ldi	r24, 0x39	; 57
   11740:	9f e0       	ldi	r25, 0x0F	; 15
   11742:	10 c0       	rjmp	.+32     	; 0x11764 <gpib_write_str+0xac>

// Wait until DAV is released!
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
	while ( GPIB_PIN_TST(DAV) == 0)
   11744:	19 99       	sbic	0x03, 1	; 3
   11746:	1f c0       	rjmp	.+62     	; 0x11786 <gpib_write_str+0xce>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11748:	80 91 e7 1c 	lds	r24, 0x1CE7	; 0x801ce7 <gpib_timer+0x8>
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
	while ( GPIB_PIN_TST(DAV) == 0)
	{
		if(gpib_timeout_test())
   1174c:	88 23       	and	r24, r24
   1174e:	d1 f3       	breq	.-12     	; 0x11744 <gpib_write_str+0x8c>
		{
			if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   11750:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11754:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11758:	85 70       	andi	r24, 0x05	; 5
   1175a:	99 27       	eor	r25, r25
   1175c:	89 2b       	or	r24, r25
   1175e:	51 f0       	breq	.+20     	; 0x11774 <gpib_write_str+0xbc>
				printf("<BUS waiting for DAV==1>\n");
   11760:	8f e1       	ldi	r24, 0x1F	; 31
   11762:	9f e0       	ldi	r25, 0x0F	; 15
   11764:	a0 e0       	ldi	r26, 0x00	; 0
   11766:	ed b7       	in	r30, 0x3d	; 61
   11768:	fe b7       	in	r31, 0x3e	; 62
   1176a:	81 83       	std	Z+1, r24	; 0x01
   1176c:	92 83       	std	Z+2, r25	; 0x02
   1176e:	a3 83       	std	Z+3, r26	; 0x03
   11770:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
			*status |= (TIMEOUT_FLAG | BUS_ERROR_FLAG);
   11774:	f8 01       	movw	r30, r16
   11776:	80 81       	ld	r24, Z
   11778:	91 81       	ldd	r25, Z+1	; 0x01
   1177a:	90 6c       	ori	r25, 0xC0	; 192
   1177c:	91 83       	std	Z+1, r25	; 0x01
   1177e:	80 83       	st	Z, r24
			return(ind);
   11780:	c0 e0       	ldi	r28, 0x00	; 0
   11782:	d0 e0       	ldi	r29, 0x00	; 0
   11784:	45 c0       	rjmp	.+138    	; 0x11810 <gpib_write_str+0x158>
   11786:	cd 2e       	mov	r12, r29
   11788:	dc 2e       	mov	r13, r28

// Wait until DAV is released!
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
	while ( GPIB_PIN_TST(DAV) == 0)
   1178a:	c0 e0       	ldi	r28, 0x00	; 0
   1178c:	d0 e0       	ldi	r29, 0x00	; 0
			return(ind);
		}
	}
#endif

    while(ind < size)
   1178e:	ce 15       	cp	r28, r14
   11790:	df 05       	cpc	r29, r15
   11792:	1c f5       	brge	.+70     	; 0x117da <gpib_write_str+0x122>
    {
        ch = buf[ind++] & 0xff;                   // unsigned
   11794:	21 96       	adiw	r28, 0x01	; 1
   11796:	f6 01       	movw	r30, r12
   11798:	81 91       	ld	r24, Z+
   1179a:	6f 01       	movw	r12, r30
   1179c:	90 e0       	ldi	r25, 0x00	; 0

        if( (*status & EOI_FLAG) && (ind == size ) )
   1179e:	f8 01       	movw	r30, r16
   117a0:	20 81       	ld	r18, Z
   117a2:	31 81       	ldd	r19, Z+1	; 0x01
   117a4:	30 ff       	sbrs	r19, 0
   117a6:	04 c0       	rjmp	.+8      	; 0x117b0 <gpib_write_str+0xf8>
   117a8:	ec 16       	cp	r14, r28
   117aa:	fd 06       	cpc	r15, r29
            ch |= EOI_FLAG;
   117ac:	09 f4       	brne	.+2      	; 0x117b0 <gpib_write_str+0xf8>

/// @return Returns

        val = gpib_write_byte(ch);
   117ae:	91 60       	ori	r25, 0x01	; 1
   117b0:	0b db       	rcall	.-2538   	; 0x10dc8 <gpib_write_byte>
        *status |= (val & ERROR_MASK);
   117b2:	5c 01       	movw	r10, r24
   117b4:	aa 24       	eor	r10, r10
   117b6:	f0 ed       	ldi	r31, 0xD0	; 208
   117b8:	bf 22       	and	r11, r31
   117ba:	f8 01       	movw	r30, r16
   117bc:	20 81       	ld	r18, Z
   117be:	31 81       	ldd	r19, Z+1	; 0x01
   117c0:	2a 29       	or	r18, r10
   117c2:	3b 29       	or	r19, r11
   117c4:	31 83       	std	Z+1, r19	; 0x01
   117c6:	20 83       	st	Z, r18

#if SDEBUG
        if(debuglevel & GPIB_RW_STR_BUS_DECODE)
   117c8:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   117cc:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
            gpib_decode(val);
   117d0:	30 fd       	sbrc	r19, 0
#endif
        if(val & ERROR_MASK)
   117d2:	cc de       	rcall	.-616    	; 0x1156c <gpib_decode>
   117d4:	a1 14       	cp	r10, r1
   117d6:	b1 04       	cpc	r11, r1

    }                                             // while(ind < size)

// End by setting receive mode and set NRFD and NDAC busy until
// we get back to the main loop (this happens very quickly
	gpib_rx_init(1);	// BUSY
   117d8:	d1 f2       	breq	.-76     	; 0x1178e <gpib_write_str+0xd6>
   117da:	81 e0       	ldi	r24, 0x01	; 1
   117dc:	e0 d9       	rcall	.-3136   	; 0x10b9e <gpib_rx_init>

    if ( ind != size )
   117de:	ce 15       	cp	r28, r14
   117e0:	df 05       	cpc	r29, r15
   117e2:	b1 f0       	breq	.+44     	; 0x11810 <gpib_write_str+0x158>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   117e4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   117e8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   117ec:	81 72       	andi	r24, 0x21	; 33
   117ee:	91 70       	andi	r25, 0x01	; 1
   117f0:	89 2b       	or	r24, r25
   117f2:	71 f0       	breq	.+28     	; 0x11810 <gpib_write_str+0x158>
            printf("[gpib_write_str sent(%d) expected(%d)]\n", ind,size);
   117f4:	ed b7       	in	r30, 0x3d	; 61
   117f6:	fe b7       	in	r31, 0x3e	; 62
   117f8:	f7 82       	std	Z+7, r15	; 0x07
   117fa:	e6 82       	std	Z+6, r14	; 0x06
   117fc:	d5 83       	std	Z+5, r29	; 0x05
   117fe:	c4 83       	std	Z+4, r28	; 0x04
   11800:	87 ef       	ldi	r24, 0xF7	; 247
   11802:	9e e0       	ldi	r25, 0x0E	; 14
   11804:	a0 e0       	ldi	r26, 0x00	; 0
   11806:	81 83       	std	Z+1, r24	; 0x01
   11808:	92 83       	std	Z+2, r25	; 0x02
   1180a:	a3 83       	std	Z+3, r26	; 0x03
   1180c:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    }
    return(ind);
}
   11810:	ce 01       	movw	r24, r28
   11812:	cd b7       	in	r28, 0x3d	; 61
   11814:	de b7       	in	r29, 0x3e	; 62
   11816:	27 96       	adiw	r28, 0x07	; 7
   11818:	ea e0       	ldi	r30, 0x0A	; 10
   1181a:	0c 94 df e6 	jmp	0x1cdbe	; 0x1cdbe <__epilogue_restores__+0x10>

0001181e <gpib_file_init>:
{
    int index = find_device(PRINTER_TYPE, address, BASE_MSA);
    if(index == -1)
        return(0);
    return(set_active_device(index));
}
   1181e:	ad b7       	in	r26, 0x3d	; 61
   11820:	be b7       	in	r27, 0x3e	; 62
   11822:	17 97       	sbiw	r26, 0x07	; 7
   11824:	0f b6       	in	r0, 0x3f	; 63
   11826:	f8 94       	cli
   11828:	be bf       	out	0x3e, r27	; 62
   1182a:	0f be       	out	0x3f, r0	; 63
   1182c:	ad bf       	out	0x3d, r26	; 61
   1182e:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <debuglevel+0x1>
   11832:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <debuglevel>
   11836:	88 eb       	ldi	r24, 0xB8	; 184
   11838:	91 e0       	ldi	r25, 0x01	; 1
   1183a:	0e 94 52 9e 	call	0x13ca4	; 0x13ca4 <Read_Config>
   1183e:	18 16       	cp	r1, r24
   11840:	19 06       	cpc	r1, r25
   11842:	8c f4       	brge	.+34     	; 0x11866 <gpib_file_init+0x48>
   11844:	ed b7       	in	r30, 0x3d	; 61
   11846:	fe b7       	in	r31, 0x3e	; 62
   11848:	97 83       	std	Z+7, r25	; 0x07
   1184a:	86 83       	std	Z+6, r24	; 0x06
   1184c:	88 eb       	ldi	r24, 0xB8	; 184
   1184e:	91 e0       	ldi	r25, 0x01	; 1
   11850:	95 83       	std	Z+5, r25	; 0x05
   11852:	84 83       	std	Z+4, r24	; 0x04
   11854:	8b ec       	ldi	r24, 0xCB	; 203
   11856:	94 e1       	ldi	r25, 0x14	; 20
   11858:	a0 e0       	ldi	r26, 0x00	; 0
   1185a:	81 83       	std	Z+1, r24	; 0x01
   1185c:	92 83       	std	Z+2, r25	; 0x02
   1185e:	a3 83       	std	Z+3, r26	; 0x03
   11860:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   11864:	10 c0       	rjmp	.+32     	; 0x11886 <gpib_file_init+0x68>
   11866:	89 2b       	or	r24, r25
   11868:	71 f0       	breq	.+28     	; 0x11886 <gpib_file_init+0x68>
   1186a:	88 eb       	ldi	r24, 0xB8	; 184
   1186c:	91 e0       	ldi	r25, 0x01	; 1
   1186e:	ed b7       	in	r30, 0x3d	; 61
   11870:	fe b7       	in	r31, 0x3e	; 62
   11872:	95 83       	std	Z+5, r25	; 0x05
   11874:	84 83       	std	Z+4, r24	; 0x04
   11876:	8a eb       	ldi	r24, 0xBA	; 186
   11878:	94 e1       	ldi	r25, 0x14	; 20
   1187a:	a0 e0       	ldi	r26, 0x00	; 0
   1187c:	81 83       	std	Z+1, r24	; 0x01
   1187e:	92 83       	std	Z+2, r25	; 0x02
   11880:	a3 83       	std	Z+3, r26	; 0x03
   11882:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   11886:	0e 94 18 9a 	call	0x13430	; 0x13430 <set_Config_Defaults>
   1188a:	0e 94 db 6f 	call	0xdfb6	; 0xdfb6 <mmc_wp_status>
   1188e:	89 2b       	or	r24, r25
   11890:	51 f0       	breq	.+20     	; 0x118a6 <gpib_file_init+0x88>
   11892:	81 ea       	ldi	r24, 0xA1	; 161
   11894:	94 e1       	ldi	r25, 0x14	; 20
   11896:	a0 e0       	ldi	r26, 0x00	; 0
   11898:	ed b7       	in	r30, 0x3d	; 61
   1189a:	fe b7       	in	r31, 0x3e	; 62
   1189c:	81 83       	std	Z+1, r24	; 0x01
   1189e:	92 83       	std	Z+2, r25	; 0x02
   118a0:	a3 83       	std	Z+3, r26	; 0x03
   118a2:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   118a6:	ad b7       	in	r26, 0x3d	; 61
   118a8:	be b7       	in	r27, 0x3e	; 62
   118aa:	17 96       	adiw	r26, 0x07	; 7
   118ac:	0f b6       	in	r0, 0x3f	; 63
   118ae:	f8 94       	cli
   118b0:	be bf       	out	0x3e, r27	; 62
   118b2:	0f be       	out	0x3f, r0	; 63
   118b4:	ad bf       	out	0x3d, r26	; 61
   118b6:	08 95       	ret

000118b8 <SS80_is_MLA>:
   118b8:	40 e2       	ldi	r20, 0x20	; 32
   118ba:	50 e0       	ldi	r21, 0x00	; 0
   118bc:	bc 01       	movw	r22, r24
   118be:	83 e0       	ldi	r24, 0x03	; 3
   118c0:	90 e0       	ldi	r25, 0x00	; 0
   118c2:	0e 94 50 97 	call	0x12ea0	; 0x12ea0 <find_device>
   118c6:	8f 3f       	cpi	r24, 0xFF	; 255
   118c8:	31 f0       	breq	.+12     	; 0x118d6 <SS80_is_MLA+0x1e>
   118ca:	0e 94 79 97 	call	0x12ef2	; 0x12ef2 <set_active_device>
   118ce:	08 2e       	mov	r0, r24
   118d0:	00 0c       	add	r0, r0
   118d2:	99 0b       	sbc	r25, r25
   118d4:	08 95       	ret
   118d6:	80 e0       	ldi	r24, 0x00	; 0
   118d8:	90 e0       	ldi	r25, 0x00	; 0
   118da:	08 95       	ret

000118dc <SS80_is_MTA>:
   118dc:	40 e4       	ldi	r20, 0x40	; 64
   118de:	50 e0       	ldi	r21, 0x00	; 0
   118e0:	bc 01       	movw	r22, r24
   118e2:	83 e0       	ldi	r24, 0x03	; 3
   118e4:	90 e0       	ldi	r25, 0x00	; 0
   118e6:	0e 94 50 97 	call	0x12ea0	; 0x12ea0 <find_device>
   118ea:	8f 3f       	cpi	r24, 0xFF	; 255
   118ec:	31 f0       	breq	.+12     	; 0x118fa <SS80_is_MTA+0x1e>
   118ee:	0e 94 79 97 	call	0x12ef2	; 0x12ef2 <set_active_device>
   118f2:	08 2e       	mov	r0, r24
   118f4:	00 0c       	add	r0, r0
   118f6:	99 0b       	sbc	r25, r25
   118f8:	08 95       	ret
   118fa:	80 e0       	ldi	r24, 0x00	; 0
   118fc:	90 e0       	ldi	r25, 0x00	; 0
   118fe:	08 95       	ret

00011900 <SS80_is_MSA>:
   11900:	40 e6       	ldi	r20, 0x60	; 96
   11902:	50 e0       	ldi	r21, 0x00	; 0
   11904:	bc 01       	movw	r22, r24
   11906:	83 e0       	ldi	r24, 0x03	; 3
   11908:	90 e0       	ldi	r25, 0x00	; 0
   1190a:	0e 94 50 97 	call	0x12ea0	; 0x12ea0 <find_device>
   1190e:	8f 3f       	cpi	r24, 0xFF	; 255
   11910:	31 f0       	breq	.+12     	; 0x1191e <SS80_is_MSA+0x1e>
   11912:	0e 94 79 97 	call	0x12ef2	; 0x12ef2 <set_active_device>
   11916:	08 2e       	mov	r0, r24
   11918:	00 0c       	add	r0, r0
   1191a:	99 0b       	sbc	r25, r25
   1191c:	08 95       	ret
   1191e:	80 e0       	ldi	r24, 0x00	; 0
   11920:	90 e0       	ldi	r25, 0x00	; 0
   11922:	08 95       	ret

00011924 <AMIGO_is_MLA>:
   11924:	40 e2       	ldi	r20, 0x20	; 32
   11926:	50 e0       	ldi	r21, 0x00	; 0
   11928:	bc 01       	movw	r22, r24
   1192a:	81 e0       	ldi	r24, 0x01	; 1
   1192c:	90 e0       	ldi	r25, 0x00	; 0
   1192e:	0e 94 50 97 	call	0x12ea0	; 0x12ea0 <find_device>
   11932:	8f 3f       	cpi	r24, 0xFF	; 255
   11934:	31 f0       	breq	.+12     	; 0x11942 <AMIGO_is_MLA+0x1e>
   11936:	0e 94 79 97 	call	0x12ef2	; 0x12ef2 <set_active_device>
   1193a:	08 2e       	mov	r0, r24
   1193c:	00 0c       	add	r0, r0
   1193e:	99 0b       	sbc	r25, r25
   11940:	08 95       	ret
   11942:	80 e0       	ldi	r24, 0x00	; 0
   11944:	90 e0       	ldi	r25, 0x00	; 0
   11946:	08 95       	ret

00011948 <AMIGO_is_MTA>:
   11948:	40 e4       	ldi	r20, 0x40	; 64
   1194a:	50 e0       	ldi	r21, 0x00	; 0
   1194c:	bc 01       	movw	r22, r24
   1194e:	81 e0       	ldi	r24, 0x01	; 1
   11950:	90 e0       	ldi	r25, 0x00	; 0
   11952:	0e 94 50 97 	call	0x12ea0	; 0x12ea0 <find_device>
   11956:	8f 3f       	cpi	r24, 0xFF	; 255
   11958:	31 f0       	breq	.+12     	; 0x11966 <AMIGO_is_MTA+0x1e>
   1195a:	0e 94 79 97 	call	0x12ef2	; 0x12ef2 <set_active_device>
   1195e:	08 2e       	mov	r0, r24
   11960:	00 0c       	add	r0, r0
   11962:	99 0b       	sbc	r25, r25
   11964:	08 95       	ret
   11966:	80 e0       	ldi	r24, 0x00	; 0
   11968:	90 e0       	ldi	r25, 0x00	; 0
   1196a:	08 95       	ret

0001196c <AMIGO_is_MSA>:
   1196c:	40 e6       	ldi	r20, 0x60	; 96
   1196e:	50 e0       	ldi	r21, 0x00	; 0
   11970:	bc 01       	movw	r22, r24
   11972:	81 e0       	ldi	r24, 0x01	; 1
   11974:	90 e0       	ldi	r25, 0x00	; 0
   11976:	0e 94 50 97 	call	0x12ea0	; 0x12ea0 <find_device>
   1197a:	8f 3f       	cpi	r24, 0xFF	; 255
   1197c:	31 f0       	breq	.+12     	; 0x1198a <AMIGO_is_MSA+0x1e>
   1197e:	0e 94 79 97 	call	0x12ef2	; 0x12ef2 <set_active_device>
   11982:	08 2e       	mov	r0, r24
   11984:	00 0c       	add	r0, r0
   11986:	99 0b       	sbc	r25, r25
   11988:	08 95       	ret
   1198a:	80 e0       	ldi	r24, 0x00	; 0
   1198c:	90 e0       	ldi	r25, 0x00	; 0
   1198e:	08 95       	ret

00011990 <PRINTER_is_MLA>:
   11990:	40 e2       	ldi	r20, 0x20	; 32
   11992:	50 e0       	ldi	r21, 0x00	; 0
   11994:	bc 01       	movw	r22, r24
   11996:	84 e0       	ldi	r24, 0x04	; 4
   11998:	90 e0       	ldi	r25, 0x00	; 0
   1199a:	0e 94 50 97 	call	0x12ea0	; 0x12ea0 <find_device>
   1199e:	8f 3f       	cpi	r24, 0xFF	; 255
   119a0:	31 f0       	breq	.+12     	; 0x119ae <PRINTER_is_MLA+0x1e>
   119a2:	0e 94 79 97 	call	0x12ef2	; 0x12ef2 <set_active_device>
   119a6:	08 2e       	mov	r0, r24
   119a8:	00 0c       	add	r0, r0
   119aa:	99 0b       	sbc	r25, r25
   119ac:	08 95       	ret
   119ae:	80 e0       	ldi	r24, 0x00	; 0
   119b0:	90 e0       	ldi	r25, 0x00	; 0
   119b2:	08 95       	ret

000119b4 <PRINTER_is_MTA>:
   119b4:	40 e4       	ldi	r20, 0x40	; 64
   119b6:	50 e0       	ldi	r21, 0x00	; 0
   119b8:	bc 01       	movw	r22, r24
   119ba:	84 e0       	ldi	r24, 0x04	; 4
   119bc:	90 e0       	ldi	r25, 0x00	; 0
   119be:	0e 94 50 97 	call	0x12ea0	; 0x12ea0 <find_device>
   119c2:	8f 3f       	cpi	r24, 0xFF	; 255
   119c4:	31 f0       	breq	.+12     	; 0x119d2 <PRINTER_is_MTA+0x1e>
   119c6:	0e 94 79 97 	call	0x12ef2	; 0x12ef2 <set_active_device>
   119ca:	08 2e       	mov	r0, r24
   119cc:	00 0c       	add	r0, r0
   119ce:	99 0b       	sbc	r25, r25
   119d0:	08 95       	ret
   119d2:	80 e0       	ldi	r24, 0x00	; 0
   119d4:	90 e0       	ldi	r25, 0x00	; 0
   119d6:	08 95       	ret

000119d8 <gpib_init_devices>:
///
/// - Used at power up, Bus IFC or user aborts
/// @return  void
void gpib_init_devices(void)
{
    gpib_bus_init();                              // Not busy - we have to free all pins on the BUS
   119d8:	aa d8       	rcall	.-3756   	; 0x10b2e <gpib_bus_init>

// Init PPR talking and listening states
// Enable this 14 April 2020 - testing MIke Gore
    gpib_state_init();
   119da:	11 d9       	rcall	.-3550   	; 0x10bfe <gpib_state_init>
   119dc:	0e 94 cc ad 	call	0x15b98	; 0x15b98 <SS80_init>

    SS80_init();                                  // SS80 state init
   119e0:	0e 94 61 b3 	call	0x166c2	; 0x166c2 <amigo_init>

#ifdef AMIGO
    amigo_init();                                 // AMIGO state init
   119e4:	0c 94 8c be 	jmp	0x17d18	; 0x17d18 <printer_close>
#endif

    printer_close();                              // Close any open fprinter files
   119e8:	08 95       	ret

000119ea <gpib_trace_task>:
   119ea:	0f 93       	push	r16
/// @param name: File name to save log file to.
/// @return  void
///   Exit on Key Press

void gpib_trace_task( char *name , int detail)
{
   119ec:	1f 93       	push	r17
   119ee:	cf 93       	push	r28
   119f0:	df 93       	push	r29
   119f2:	00 d0       	rcall	.+0      	; 0x119f4 <gpib_trace_task+0xa>
   119f4:	00 d0       	rcall	.+0      	; 0x119f6 <gpib_trace_task+0xc>
   119f6:	1f 92       	push	r1
   119f8:	eb 01       	movw	r28, r22
    int ch;

    if(name && *name)
   119fa:	00 97       	sbiw	r24, 0x00	; 0
   119fc:	09 f4       	brne	.+2      	; 0x11a00 <gpib_trace_task+0x16>
   119fe:	44 c0       	rjmp	.+136    	; 0x11a88 <gpib_trace_task+0x9e>
   11a00:	fc 01       	movw	r30, r24
   11a02:	20 81       	ld	r18, Z
   11a04:	22 23       	and	r18, r18
   11a06:	09 f4       	brne	.+2      	; 0x11a0a <gpib_trace_task+0x20>
   11a08:	3f c0       	rjmp	.+126    	; 0x11a88 <gpib_trace_task+0x9e>
    {
        name = skipspaces(name);
   11a0a:	0e 94 1a 32 	call	0x6434	; 0x6434 <skipspaces>
   11a0e:	8c 01       	movw	r16, r24
        printf("Capturing GPIB BUS to:%s\n", name);
   11a10:	ed b7       	in	r30, 0x3d	; 61
   11a12:	fe b7       	in	r31, 0x3e	; 62
   11a14:	95 83       	std	Z+5, r25	; 0x05
   11a16:	84 83       	std	Z+4, r24	; 0x04
   11a18:	87 e8       	ldi	r24, 0x87	; 135
   11a1a:	94 e1       	ldi	r25, 0x14	; 20
   11a1c:	a0 e0       	ldi	r26, 0x00	; 0
   11a1e:	81 83       	std	Z+1, r24	; 0x01
   11a20:	92 83       	std	Z+2, r25	; 0x02
   11a22:	a3 83       	std	Z+3, r26	; 0x03
   11a24:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
        if(detail)
   11a28:	20 97       	sbiw	r28, 0x00	; 0
   11a2a:	51 f0       	breq	.+20     	; 0x11a40 <gpib_trace_task+0x56>
            printf("FULL GPIB BUS handshake logging requested\n");
   11a2c:	8c e5       	ldi	r24, 0x5C	; 92
   11a2e:	94 e1       	ldi	r25, 0x14	; 20
   11a30:	a0 e0       	ldi	r26, 0x00	; 0
   11a32:	ed b7       	in	r30, 0x3d	; 61
   11a34:	fe b7       	in	r31, 0x3e	; 62
   11a36:	81 83       	std	Z+1, r24	; 0x01
   11a38:	92 83       	std	Z+2, r25	; 0x02
   11a3a:	a3 83       	std	Z+3, r26	; 0x03
   11a3c:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
        printf("Press ANY key to exit\n");
   11a40:	85 e4       	ldi	r24, 0x45	; 69
   11a42:	94 e1       	ldi	r25, 0x14	; 20
   11a44:	a0 e0       	ldi	r26, 0x00	; 0
   11a46:	ed b7       	in	r30, 0x3d	; 61
   11a48:	fe b7       	in	r31, 0x3e	; 62
   11a4a:	81 83       	std	Z+1, r24	; 0x01
   11a4c:	92 83       	std	Z+2, r25	; 0x02
   11a4e:	a3 83       	std	Z+3, r26	; 0x03
   11a50:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>

        gpib_log_fp = fopen(name,"wb");
   11a54:	6c e0       	ldi	r22, 0x0C	; 12
   11a56:	79 e0       	ldi	r23, 0x09	; 9
   11a58:	c8 01       	movw	r24, r16
   11a5a:	0e 94 2a 7e 	call	0xfc54	; 0xfc54 <fopen>
   11a5e:	90 93 61 19 	sts	0x1961, r25	; 0x801961 <gpib_log_fp+0x1>
   11a62:	80 93 60 19 	sts	0x1960, r24	; 0x801960 <gpib_log_fp>
        if(gpib_log_fp == NULL)
   11a66:	89 2b       	or	r24, r25
   11a68:	b9 f4       	brne	.+46     	; 0x11a98 <gpib_trace_task+0xae>
        {
            perror("open failed");
   11a6a:	8a e9       	ldi	r24, 0x9A	; 154
   11a6c:	9d e0       	ldi	r25, 0x0D	; 13
   11a6e:	0e 94 5b 78 	call	0xf0b6	; 0xf0b6 <perror>
            printf("exiting...\n");
   11a72:	89 e3       	ldi	r24, 0x39	; 57
   11a74:	94 e1       	ldi	r25, 0x14	; 20
   11a76:	a0 e0       	ldi	r26, 0x00	; 0
   11a78:	ed b7       	in	r30, 0x3d	; 61
   11a7a:	fe b7       	in	r31, 0x3e	; 62
   11a7c:	81 83       	std	Z+1, r24	; 0x01
   11a7e:	92 83       	std	Z+2, r25	; 0x02
   11a80:	a3 83       	std	Z+3, r26	; 0x03
   11a82:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
            return;
   11a86:	3d c0       	rjmp	.+122    	; 0x11b02 <gpib_trace_task+0x118>
        }
    }
    else
    {
        gpib_log_fp = stdout;
   11a88:	80 91 c1 1c 	lds	r24, 0x1CC1	; 0x801cc1 <__iob+0x2>
   11a8c:	90 91 c2 1c 	lds	r25, 0x1CC2	; 0x801cc2 <__iob+0x3>
   11a90:	90 93 61 19 	sts	0x1961, r25	; 0x801961 <gpib_log_fp+0x1>
   11a94:	80 93 60 19 	sts	0x1960, r24	; 0x801960 <gpib_log_fp>
    }

    // gpib_state_init();                            // Init PPR talking and listening states
	// gpib_state_init is in gpib_init_devices()
    gpib_init_devices();
   11a98:	9f df       	rcall	.-194    	; 0x119d8 <gpib_init_devices>

    gpib_decode_header(gpib_log_fp);
   11a9a:	80 91 60 19 	lds	r24, 0x1960	; 0x801960 <gpib_log_fp>
   11a9e:	90 91 61 19 	lds	r25, 0x1961	; 0x801961 <gpib_log_fp+0x1>
   11aa2:	ca da       	rcall	.-2668   	; 0x11038 <gpib_decode_header>
    while(1)                                      // Main loop, forever
    {
        if(uart_keyhit(0))
   11aa4:	80 e0       	ldi	r24, 0x00	; 0
   11aa6:	0e 94 50 2a 	call	0x54a0	; 0x54a0 <uart_keyhit>
   11aaa:	89 2b       	or	r24, r25
            break;

        ch = gpib_read_byte(detail);
   11aac:	31 f4       	brne	.+12     	; 0x11aba <gpib_trace_task+0xd0>
   11aae:	ce 01       	movw	r24, r28
        if(!detail)
   11ab0:	57 dc       	rcall	.-1874   	; 0x11360 <gpib_read_byte>
   11ab2:	20 97       	sbiw	r28, 0x00	; 0
            gpib_decode(ch);
   11ab4:	b9 f7       	brne	.-18     	; 0x11aa4 <gpib_trace_task+0xba>
   11ab6:	5a dd       	rcall	.-1356   	; 0x1156c <gpib_decode>
   11ab8:	f5 cf       	rjmp	.-22     	; 0x11aa4 <gpib_trace_task+0xba>
    }

    printf("Done\n");
   11aba:	83 e3       	ldi	r24, 0x33	; 51
   11abc:	94 e1       	ldi	r25, 0x14	; 20
   11abe:	a0 e0       	ldi	r26, 0x00	; 0
   11ac0:	ed b7       	in	r30, 0x3d	; 61
   11ac2:	fe b7       	in	r31, 0x3e	; 62
   11ac4:	81 83       	std	Z+1, r24	; 0x01
   11ac6:	92 83       	std	Z+2, r25	; 0x02
   11ac8:	a3 83       	std	Z+3, r26	; 0x03
   11aca:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    if(gpib_log_fp)
   11ace:	80 91 60 19 	lds	r24, 0x1960	; 0x801960 <gpib_log_fp>
   11ad2:	90 91 61 19 	lds	r25, 0x1961	; 0x801961 <gpib_log_fp+0x1>
   11ad6:	00 97       	sbiw	r24, 0x00	; 0
   11ad8:	a1 f0       	breq	.+40     	; 0x11b02 <gpib_trace_task+0x118>
    {
        fclose(gpib_log_fp);
   11ada:	0e 94 d4 7c 	call	0xf9a8	; 0xf9a8 <fclose>
        printf("Capturing Closed\n");
   11ade:	81 e2       	ldi	r24, 0x21	; 33
   11ae0:	94 e1       	ldi	r25, 0x14	; 20
   11ae2:	a0 e0       	ldi	r26, 0x00	; 0
   11ae4:	ed b7       	in	r30, 0x3d	; 61
   11ae6:	fe b7       	in	r31, 0x3e	; 62
   11ae8:	81 83       	std	Z+1, r24	; 0x01
   11aea:	92 83       	std	Z+2, r25	; 0x02
   11aec:	a3 83       	std	Z+3, r26	; 0x03
   11aee:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
        gpib_log_fp = stdout;
   11af2:	80 91 c1 1c 	lds	r24, 0x1CC1	; 0x801cc1 <__iob+0x2>
   11af6:	90 91 c2 1c 	lds	r25, 0x1CC2	; 0x801cc2 <__iob+0x3>
   11afa:	90 93 61 19 	sts	0x1961, r25	; 0x801961 <gpib_log_fp+0x1>
   11afe:	80 93 60 19 	sts	0x1960, r24	; 0x801960 <gpib_log_fp>
    }
}
   11b02:	cd b7       	in	r28, 0x3d	; 61
   11b04:	de b7       	in	r29, 0x3e	; 62
   11b06:	25 96       	adiw	r28, 0x05	; 5
   11b08:	e4 e0       	ldi	r30, 0x04	; 4
   11b0a:	0c 94 e5 e6 	jmp	0x1cdca	; 0x1cdca <__epilogue_restores__+0x1c>

00011b0e <gpib_error_test>:
///
/// @return  val
/// @return ABORT flag on user keypress

uint16_t gpib_error_test(uint16_t val)
{
   11b0e:	ef 92       	push	r14
   11b10:	ff 92       	push	r15
   11b12:	0f 93       	push	r16
   11b14:	1f 93       	push	r17
   11b16:	cf 93       	push	r28
   11b18:	df 93       	push	r29
   11b1a:	00 d0       	rcall	.+0      	; 0x11b1c <gpib_error_test+0xe>
   11b1c:	1f 92       	push	r1
   11b1e:	7c 01       	movw	r14, r24

    if(val & ERROR_MASK || uart_keyhit(0) || mmc_ins_status() != 1 )
   11b20:	ec 01       	movw	r28, r24
   11b22:	cc 27       	eor	r28, r28
   11b24:	d0 7d       	andi	r29, 0xD0	; 208
   11b26:	20 97       	sbiw	r28, 0x00	; 0
   11b28:	61 f0       	breq	.+24     	; 0x11b42 <gpib_error_test+0x34>
    {
        val &= ERROR_MASK;

///@brief IFC is and important state so display it for most messages
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
   11b2a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11b2e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11b32:	8d 72       	andi	r24, 0x2D	; 45
   11b34:	99 27       	eor	r25, r25
   11b36:	87 01       	movw	r16, r14
   11b38:	00 27       	eor	r16, r16
   11b3a:	10 71       	andi	r17, 0x10	; 16
   11b3c:	89 2b       	or	r24, r25
   11b3e:	59 f4       	brne	.+22     	; 0x11b56 <gpib_error_test+0x48>
   11b40:	17 c0       	rjmp	.+46     	; 0x11b70 <gpib_error_test+0x62>
/// @return ABORT flag on user keypress

uint16_t gpib_error_test(uint16_t val)
{

    if(val & ERROR_MASK || uart_keyhit(0) || mmc_ins_status() != 1 )
   11b42:	80 e0       	ldi	r24, 0x00	; 0
   11b44:	0e 94 50 2a 	call	0x54a0	; 0x54a0 <uart_keyhit>
   11b48:	89 2b       	or	r24, r25
   11b4a:	79 f7       	brne	.-34     	; 0x11b2a <gpib_error_test+0x1c>
   11b4c:	0e 94 d9 6e 	call	0xddb2	; 0xddb2 <mmc_ins_status>
   11b50:	01 97       	sbiw	r24, 0x01	; 1
   11b52:	59 f7       	brne	.-42     	; 0x11b2a <gpib_error_test+0x1c>
   11b54:	62 c0       	rjmp	.+196    	; 0x11c1a <gpib_error_test+0x10c>

///@brief IFC is and important state so display it for most messages
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
        {
/// Bus Clear, reseat all states, etc
            if(val & IFC_FLAG)
   11b56:	01 15       	cp	r16, r1
   11b58:	11 05       	cpc	r17, r1
   11b5a:	51 f0       	breq	.+20     	; 0x11b70 <gpib_error_test+0x62>
                printf("<IFC>\n");
   11b5c:	8a e1       	ldi	r24, 0x1A	; 26
   11b5e:	94 e1       	ldi	r25, 0x14	; 20
   11b60:	a0 e0       	ldi	r26, 0x00	; 0
   11b62:	ed b7       	in	r30, 0x3d	; 61
   11b64:	fe b7       	in	r31, 0x3e	; 62
   11b66:	81 83       	std	Z+1, r24	; 0x01
   11b68:	92 83       	std	Z+2, r25	; 0x02
   11b6a:	a3 83       	std	Z+3, r26	; 0x03
   11b6c:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
        }

        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
   11b70:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11b74:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11b78:	8d 72       	andi	r24, 0x2D	; 45
   11b7a:	99 27       	eor	r25, r25
   11b7c:	89 2b       	or	r24, r25
   11b7e:	c1 f0       	breq	.+48     	; 0x11bb0 <gpib_error_test+0xa2>
        {
            if(val & TIMEOUT_FLAG)
   11b80:	f6 fe       	sbrs	r15, 6
   11b82:	0a c0       	rjmp	.+20     	; 0x11b98 <gpib_error_test+0x8a>
                printf("<TIMEOUT>\n");
   11b84:	8f e0       	ldi	r24, 0x0F	; 15
   11b86:	94 e1       	ldi	r25, 0x14	; 20
   11b88:	a0 e0       	ldi	r26, 0x00	; 0
   11b8a:	ed b7       	in	r30, 0x3d	; 61
   11b8c:	fe b7       	in	r31, 0x3e	; 62
   11b8e:	81 83       	std	Z+1, r24	; 0x01
   11b90:	92 83       	std	Z+2, r25	; 0x02
   11b92:	a3 83       	std	Z+3, r26	; 0x03
   11b94:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
            if(val & BUS_ERROR_FLAG)
   11b98:	d7 ff       	sbrs	r29, 7
   11b9a:	0a c0       	rjmp	.+20     	; 0x11bb0 <gpib_error_test+0xa2>
                printf("<BUS>\n");
   11b9c:	88 e0       	ldi	r24, 0x08	; 8
   11b9e:	94 e1       	ldi	r25, 0x14	; 20
   11ba0:	a0 e0       	ldi	r26, 0x00	; 0
   11ba2:	ed b7       	in	r30, 0x3d	; 61
   11ba4:	fe b7       	in	r31, 0x3e	; 62
   11ba6:	81 83       	std	Z+1, r24	; 0x01
   11ba8:	92 83       	std	Z+2, r25	; 0x02
   11baa:	a3 83       	std	Z+3, r26	; 0x03
   11bac:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
        }

        if(uart_keyhit(0))
   11bb0:	80 e0       	ldi	r24, 0x00	; 0
   11bb2:	0e 94 50 2a 	call	0x54a0	; 0x54a0 <uart_keyhit>
   11bb6:	89 2b       	or	r24, r25
   11bb8:	51 f0       	breq	.+20     	; 0x11bce <gpib_error_test+0xc0>
            printf("<INTERRUPT>\n");
   11bba:	8b ef       	ldi	r24, 0xFB	; 251
   11bbc:	93 e1       	ldi	r25, 0x13	; 19
   11bbe:	a0 e0       	ldi	r26, 0x00	; 0
   11bc0:	ed b7       	in	r30, 0x3d	; 61
   11bc2:	fe b7       	in	r31, 0x3e	; 62
   11bc4:	81 83       	std	Z+1, r24	; 0x01
   11bc6:	92 83       	std	Z+2, r25	; 0x02
   11bc8:	a3 83       	std	Z+3, r26	; 0x03
   11bca:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>

        if( mmc_ins_status() != 1 )
   11bce:	0e 94 d9 6e 	call	0xddb2	; 0xddb2 <mmc_ins_status>
   11bd2:	01 97       	sbiw	r24, 0x01	; 1
   11bd4:	51 f0       	breq	.+20     	; 0x11bea <gpib_error_test+0xdc>
            printf("<MEDIA MISSING>\n");
   11bd6:	8a ee       	ldi	r24, 0xEA	; 234
   11bd8:	93 e1       	ldi	r25, 0x13	; 19
   11bda:	a0 e0       	ldi	r26, 0x00	; 0
   11bdc:	ed b7       	in	r30, 0x3d	; 61
   11bde:	fe b7       	in	r31, 0x3e	; 62
   11be0:	81 83       	std	Z+1, r24	; 0x01
   11be2:	92 83       	std	Z+2, r25	; 0x02
   11be4:	a3 83       	std	Z+3, r26	; 0x03
   11be6:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>

        if(val & IFC_FLAG)
   11bea:	01 15       	cp	r16, r1
   11bec:	11 05       	cpc	r17, r1
   11bee:	09 f0       	breq	.+2      	; 0x11bf2 <gpib_error_test+0xe4>
        {
            gpib_init_devices();
   11bf0:	f3 de       	rcall	.-538    	; 0x119d8 <gpib_init_devices>
        }

        if(uart_keyhit(0))
   11bf2:	80 e0       	ldi	r24, 0x00	; 0
   11bf4:	0e 94 50 2a 	call	0x54a0	; 0x54a0 <uart_keyhit>
   11bf8:	89 2b       	or	r24, r25
        {
            gpib_init_devices();
   11bfa:	11 f0       	breq	.+4      	; 0x11c00 <gpib_error_test+0xf2>
   11bfc:	ed de       	rcall	.-550    	; 0x119d8 <gpib_init_devices>
   11bfe:	0b c0       	rjmp	.+22     	; 0x11c16 <gpib_error_test+0x108>
            return(ABORT_FLAG);
        }

/// @todo  do we want to always exit here ?
///  low level GPIB functions are still useful even without a DISK
        if( mmc_ins_status() != 1 )
   11c00:	0e 94 d9 6e 	call	0xddb2	; 0xddb2 <mmc_ins_status>
   11c04:	01 97       	sbiw	r24, 0x01	; 1
   11c06:	39 f4       	brne	.+14     	; 0x11c16 <gpib_error_test+0x108>
        {
            return(ABORT_FLAG);
        }

// Wait for IFC free
        if(val & IFC_FLAG )
   11c08:	01 15       	cp	r16, r1
   11c0a:	11 05       	cpc	r17, r1
   11c0c:	31 f0       	breq	.+12     	; 0x11c1a <gpib_error_test+0x10c>
        {
            while(GPIB_IO_RD(IFC) == 0)
   11c0e:	54 98       	cbi	0x0a, 4	; 10
   11c10:	4c 9b       	sbis	0x09, 4	; 9
   11c12:	fd cf       	rjmp	.-6      	; 0x11c0e <gpib_error_test+0x100>
   11c14:	02 c0       	rjmp	.+4      	; 0x11c1a <gpib_error_test+0x10c>

/// @todo  do we want to always exit here ?
///  low level GPIB functions are still useful even without a DISK
        if( mmc_ins_status() != 1 )
        {
            return(ABORT_FLAG);
   11c16:	c1 e0       	ldi	r28, 0x01	; 1
   11c18:	d0 e0       	ldi	r29, 0x00	; 0
                ;
        }
        return(val);
    }
    return(0);
}
   11c1a:	ce 01       	movw	r24, r28
   11c1c:	cd b7       	in	r28, 0x3d	; 61
   11c1e:	de b7       	in	r29, 0x3e	; 62
   11c20:	23 96       	adiw	r28, 0x03	; 3
   11c22:	e6 e0       	ldi	r30, 0x06	; 6
   11c24:	0c 94 e3 e6 	jmp	0x1cdc6	; 0x1cdc6 <__epilogue_restores__+0x18>

00011c28 <GPIB_COMMANDS>:
///
/// @return GPIB status from emulator command.
/// @return 0 if no emulator command processed.

uint16_t GPIB_COMMANDS(uint16_t val, uint8_t unread)
{
   11c28:	1f 93       	push	r17
   11c2a:	cf 93       	push	r28
   11c2c:	df 93       	push	r29
   11c2e:	ec 01       	movw	r28, r24
   11c30:	16 2f       	mov	r17, r22
    uint16_t status;

///@brief talking ?
    if(talking != UNT)
   11c32:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   11c36:	8f 35       	cpi	r24, 0x5F	; 95
   11c38:	91 f0       	breq	.+36     	; 0x11c5e <GPIB_COMMANDS+0x36>
    {

#ifdef AMIGO
        if ( AMIGO_is_MLA(listening) )
   11c3a:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   11c3e:	90 e0       	ldi	r25, 0x00	; 0
   11c40:	71 de       	rcall	.-798    	; 0x11924 <AMIGO_is_MLA>
   11c42:	89 2b       	or	r24, r25
   11c44:	c9 f4       	brne	.+50     	; 0x11c78 <GPIB_COMMANDS+0x50>
            secondary = 0;
            return(status);
        }
#endif                                    // ifdef AMIGO

        if ( SS80_is_MLA(listening) )
   11c46:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   11c4a:	90 e0       	ldi	r25, 0x00	; 0
   11c4c:	35 de       	rcall	.-918    	; 0x118b8 <SS80_is_MLA>
   11c4e:	89 2b       	or	r24, r25
   11c50:	11 f5       	brne	.+68     	; 0x11c96 <GPIB_COMMANDS+0x6e>
            status = SS80_COMMANDS(secondary);
            secondary = 0;
            return(status);
        }

        if ( PRINTER_is_MLA(listening) )
   11c52:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   11c56:	90 e0       	ldi	r25, 0x00	; 0
   11c58:	9b de       	rcall	.-714    	; 0x11990 <PRINTER_is_MLA>
   11c5a:	89 2b       	or	r24, r25
   11c5c:	59 f5       	brne	.+86     	; 0x11cb4 <GPIB_COMMANDS+0x8c>
            return(status);
        }
    }

///@brief listening ?
    if(listening != UNL)
   11c5e:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   11c62:	8f 33       	cpi	r24, 0x3F	; 63
   11c64:	19 f4       	brne	.+6      	; 0x11c6c <GPIB_COMMANDS+0x44>
            status = PRINTER_COMMANDS(secondary);
            secondary = 0;
            return(status);
        }
    }
    return(0);
   11c66:	80 e0       	ldi	r24, 0x00	; 0
   11c68:	90 e0       	ldi	r25, 0x00	; 0
   11c6a:	2e c0       	rjmp	.+92     	; 0x11cc8 <GPIB_COMMANDS+0xa0>

///@brief listening ?
    if(listening != UNL)
    {
#ifdef AMIGO
        if ( AMIGO_is_MTA(talking) )
   11c6c:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   11c70:	90 e0       	ldi	r25, 0x00	; 0
   11c72:	6a de       	rcall	.-812    	; 0x11948 <AMIGO_is_MTA>
   11c74:	89 2b       	or	r24, r25
   11c76:	49 f0       	breq	.+18     	; 0x11c8a <GPIB_COMMANDS+0x62>
        {
            if(unread)
   11c78:	11 23       	and	r17, r17
   11c7a:	11 f0       	breq	.+4      	; 0x11c80 <GPIB_COMMANDS+0x58>
                gpib_unread(val);
   11c7c:	ce 01       	movw	r24, r28
   11c7e:	58 d8       	rcall	.-3920   	; 0x10d30 <gpib_unread>
   11c80:	80 91 ef 1e 	lds	r24, 0x1EEF	; 0x801eef <secondary>
            status = AMIGO_COMMANDS(secondary);
   11c84:	0e 94 87 bd 	call	0x17b0e	; 0x17b0e <AMIGO_COMMANDS>
   11c88:	1d c0       	rjmp	.+58     	; 0x11cc4 <GPIB_COMMANDS+0x9c>
            secondary = 0;
            return(status);
        }
#endif

        if ( SS80_is_MTA(talking) )
   11c8a:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   11c8e:	90 e0       	ldi	r25, 0x00	; 0
   11c90:	25 de       	rcall	.-950    	; 0x118dc <SS80_is_MTA>
   11c92:	89 2b       	or	r24, r25
   11c94:	49 f0       	breq	.+18     	; 0x11ca8 <GPIB_COMMANDS+0x80>
        {
            if(unread)
   11c96:	11 23       	and	r17, r17
   11c98:	11 f0       	breq	.+4      	; 0x11c9e <GPIB_COMMANDS+0x76>
                gpib_unread(val);
   11c9a:	ce 01       	movw	r24, r28
   11c9c:	49 d8       	rcall	.-3950   	; 0x10d30 <gpib_unread>
   11c9e:	80 91 ef 1e 	lds	r24, 0x1EEF	; 0x801eef <secondary>
            status = SS80_COMMANDS(secondary);
   11ca2:	0e 94 ad b1 	call	0x1635a	; 0x1635a <SS80_COMMANDS>
   11ca6:	0e c0       	rjmp	.+28     	; 0x11cc4 <GPIB_COMMANDS+0x9c>
            secondary = 0;
            return(status);
        }

        if ( PRINTER_is_MTA(talking) )
   11ca8:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   11cac:	90 e0       	ldi	r25, 0x00	; 0
   11cae:	82 de       	rcall	.-764    	; 0x119b4 <PRINTER_is_MTA>
   11cb0:	89 2b       	or	r24, r25
   11cb2:	c9 f2       	breq	.-78     	; 0x11c66 <GPIB_COMMANDS+0x3e>
        {
            if(unread)
   11cb4:	11 23       	and	r17, r17
   11cb6:	11 f0       	breq	.+4      	; 0x11cbc <GPIB_COMMANDS+0x94>
                gpib_unread(val);
   11cb8:	ce 01       	movw	r24, r28
   11cba:	3a d8       	rcall	.-3980   	; 0x10d30 <gpib_unread>
   11cbc:	80 91 ef 1e 	lds	r24, 0x1EEF	; 0x801eef <secondary>
            status = PRINTER_COMMANDS(secondary);
   11cc0:	0e 94 00 c0 	call	0x18000	; 0x18000 <PRINTER_COMMANDS>
   11cc4:	10 92 ef 1e 	sts	0x1EEF, r1	; 0x801eef <secondary>
            secondary = 0;
   11cc8:	df 91       	pop	r29
            return(status);
        }
    }
    return(0);
}
   11cca:	cf 91       	pop	r28
   11ccc:	1f 91       	pop	r17
   11cce:	08 95       	ret

00011cd0 <Send_Identify>:
   11cd0:	cf 92       	push	r12
///
/// @return  0 on GPIB error returns error flags
/// @see gpib.h ERROR_MASK for a full list.

int Send_Identify(uint8_t ch, uint16_t ID)
{
   11cd2:	df 92       	push	r13
   11cd4:	ff 92       	push	r15
   11cd6:	0f 93       	push	r16
   11cd8:	1f 93       	push	r17
   11cda:	cf 93       	push	r28
   11cdc:	df 93       	push	r29
   11cde:	cd b7       	in	r28, 0x3d	; 61
   11ce0:	de b7       	in	r29, 0x3e	; 62
   11ce2:	2b 97       	sbiw	r28, 0x0b	; 11
   11ce4:	0f b6       	in	r0, 0x3f	; 63
   11ce6:	f8 94       	cli
   11ce8:	de bf       	out	0x3e, r29	; 62
   11cea:	0f be       	out	0x3f, r0	; 63
   11cec:	cd bf       	out	0x3d, r28	; 61
   11cee:	f8 2e       	mov	r15, r24
   11cf0:	6b 01       	movw	r12, r22
    uint16_t status = EOI_FLAG;
   11cf2:	80 e0       	ldi	r24, 0x00	; 0
   11cf4:	91 e0       	ldi	r25, 0x01	; 1
   11cf6:	9b 87       	std	Y+11, r25	; 0x0b
   11cf8:	8a 87       	std	Y+10, r24	; 0x0a
    uint8_t tmp[2];

    V2B_MSB(tmp,0,2,ID);
   11cfa:	8b 01       	movw	r16, r22
   11cfc:	20 e0       	ldi	r18, 0x00	; 0
   11cfe:	30 e0       	ldi	r19, 0x00	; 0
   11d00:	42 e0       	ldi	r20, 0x02	; 2
   11d02:	50 e0       	ldi	r21, 0x00	; 0
   11d04:	60 e0       	ldi	r22, 0x00	; 0
   11d06:	70 e0       	ldi	r23, 0x00	; 0
   11d08:	ce 01       	movw	r24, r28
   11d0a:	08 96       	adiw	r24, 0x08	; 8
   11d0c:	0e 94 3b c0 	call	0x18076	; 0x18076 <V2B_MSB>
    if(gpib_write_str(tmp,2, &status) != 2)
   11d10:	ae 01       	movw	r20, r28
   11d12:	46 5f       	subi	r20, 0xF6	; 246
   11d14:	5f 4f       	sbci	r21, 0xFF	; 255
   11d16:	62 e0       	ldi	r22, 0x02	; 2
   11d18:	70 e0       	ldi	r23, 0x00	; 0
   11d1a:	ce 01       	movw	r24, r28
   11d1c:	08 96       	adiw	r24, 0x08	; 8
   11d1e:	cc dc       	rcall	.-1640   	; 0x116b8 <gpib_write_str>
   11d20:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11d24:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11d28:	02 97       	sbiw	r24, 0x02	; 2
   11d2a:	79 f0       	breq	.+30     	; 0x11d4a <Send_Identify+0x7a>
    {
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11d2c:	25 72       	andi	r18, 0x25	; 37
   11d2e:	33 27       	eor	r19, r19
   11d30:	23 2b       	or	r18, r19
   11d32:	f9 f0       	breq	.+62     	; 0x11d72 <Send_Identify+0xa2>
            printf("[IDENT Unit:%02XH=%04XH FAILED]\n",
   11d34:	ed b7       	in	r30, 0x3d	; 61
   11d36:	fe b7       	in	r31, 0x3e	; 62
   11d38:	d7 82       	std	Z+7, r13	; 0x07
   11d3a:	c6 82       	std	Z+6, r12	; 0x06
   11d3c:	8f 2d       	mov	r24, r15
   11d3e:	90 e0       	ldi	r25, 0x00	; 0
   11d40:	95 83       	std	Z+5, r25	; 0x05
   11d42:	84 83       	std	Z+4, r24	; 0x04
   11d44:	89 ec       	ldi	r24, 0xC9	; 201
   11d46:	93 e1       	ldi	r25, 0x13	; 19
   11d48:	0e c0       	rjmp	.+28     	; 0x11d66 <Send_Identify+0x96>
                (int)ch,(int)ID);
        return(status & ERROR_MASK);
    }
#if SDEBUG
    if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11d4a:	24 72       	andi	r18, 0x24	; 36
   11d4c:	33 27       	eor	r19, r19
   11d4e:	23 2b       	or	r18, r19
   11d50:	81 f0       	breq	.+32     	; 0x11d72 <Send_Identify+0xa2>
        printf("[IDENT Unit:%02XH=%04XH]\n", (int)ch,(int)ID);
   11d52:	ed b7       	in	r30, 0x3d	; 61
   11d54:	fe b7       	in	r31, 0x3e	; 62
   11d56:	d7 82       	std	Z+7, r13	; 0x07
   11d58:	c6 82       	std	Z+6, r12	; 0x06
   11d5a:	8f 2d       	mov	r24, r15
   11d5c:	90 e0       	ldi	r25, 0x00	; 0
   11d5e:	95 83       	std	Z+5, r25	; 0x05
   11d60:	84 83       	std	Z+4, r24	; 0x04
   11d62:	8f ea       	ldi	r24, 0xAF	; 175
   11d64:	93 e1       	ldi	r25, 0x13	; 19
   11d66:	a0 e0       	ldi	r26, 0x00	; 0
   11d68:	81 83       	std	Z+1, r24	; 0x01
   11d6a:	92 83       	std	Z+2, r25	; 0x02
   11d6c:	a3 83       	std	Z+3, r26	; 0x03
   11d6e:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
#endif
    return (status & ERROR_MASK);
   11d72:	8a 85       	ldd	r24, Y+10	; 0x0a
   11d74:	9b 85       	ldd	r25, Y+11	; 0x0b
   11d76:	88 27       	eor	r24, r24
   11d78:	90 7d       	andi	r25, 0xD0	; 208
}
   11d7a:	2b 96       	adiw	r28, 0x0b	; 11
   11d7c:	0f b6       	in	r0, 0x3f	; 63
   11d7e:	f8 94       	cli
   11d80:	de bf       	out	0x3e, r29	; 62
   11d82:	0f be       	out	0x3f, r0	; 63
   11d84:	cd bf       	out	0x3d, r28	; 61
   11d86:	df 91       	pop	r29
   11d88:	cf 91       	pop	r28
   11d8a:	1f 91       	pop	r17
   11d8c:	0f 91       	pop	r16
   11d8e:	ff 90       	pop	r15
   11d90:	df 90       	pop	r13
   11d92:	cf 90       	pop	r12
   11d94:	08 95       	ret

00011d96 <GPIB>:
/// @return  0 on sucess
/// @return GPIB error flags on fail
/// @see gpib.h ERROR_MASK defines for a full list.

int GPIB(uint8_t ch)
{
   11d96:	00 d0       	rcall	.+0      	; 0x11d98 <GPIB+0x2>
   11d98:	00 d0       	rcall	.+0      	; 0x11d9a <GPIB+0x4>
   11d9a:	1f 92       	push	r1
   11d9c:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11da0:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
///@brief Parallel Poll Configure
///TODO
    if(ch == PPC)
   11da4:	85 30       	cpi	r24, 0x05	; 5
   11da6:	89 f4       	brne	.+34     	; 0x11dca <GPIB+0x34>
    {
        if(debuglevel & (GPIB_ERR + GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   11da8:	27 71       	andi	r18, 0x17	; 23
   11daa:	33 27       	eor	r19, r19
   11dac:	23 2b       	or	r18, r19
   11dae:	51 f0       	breq	.+20     	; 0x11dc4 <GPIB+0x2e>
            printf("[PPC unsupported TODO]\n");
   11db0:	87 e9       	ldi	r24, 0x97	; 151
   11db2:	93 e1       	ldi	r25, 0x13	; 19
   11db4:	a0 e0       	ldi	r26, 0x00	; 0
   11db6:	ed b7       	in	r30, 0x3d	; 61
   11db8:	fe b7       	in	r31, 0x3e	; 62
   11dba:	81 83       	std	Z+1, r24	; 0x01
   11dbc:	92 83       	std	Z+2, r25	; 0x02
   11dbe:	a3 83       	std	Z+3, r26	; 0x03
   11dc0:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
        spoll = 0;
   11dc4:	10 92 eb 1e 	sts	0x1EEB, r1	; 0x801eeb <spoll>
   11dc8:	a0 c0       	rjmp	.+320    	; 0x11f0a <GPIB+0x174>
        return 0;
    }
///@brief Parallel Poll Unconfigure
///TODO
    if(ch == PPU)
   11dca:	85 31       	cpi	r24, 0x15	; 21
   11dcc:	39 f4       	brne	.+14     	; 0x11ddc <GPIB+0x46>
    {
        if(debuglevel & (GPIB_ERR + GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   11dce:	27 71       	andi	r18, 0x17	; 23
   11dd0:	33 27       	eor	r19, r19
   11dd2:	23 2b       	or	r18, r19
   11dd4:	b9 f3       	breq	.-18     	; 0x11dc4 <GPIB+0x2e>
            printf("[PPU unsupported TODO]\n");
   11dd6:	8f e7       	ldi	r24, 0x7F	; 127
   11dd8:	93 e1       	ldi	r25, 0x13	; 19
   11dda:	ec cf       	rjmp	.-40     	; 0x11db4 <GPIB+0x1e>
    }

/// @todo FIXME
#if defined(SPOLL)
///@brief Serial Poll Enable
    if(ch == SPE)
   11ddc:	88 31       	cpi	r24, 0x18	; 24
   11dde:	d9 f4       	brne	.+54     	; 0x11e16 <GPIB+0x80>
    {
#if SDEBUG
        if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   11de0:	26 70       	andi	r18, 0x06	; 6
   11de2:	33 27       	eor	r19, r19
   11de4:	23 2b       	or	r18, r19
   11de6:	51 f0       	breq	.+20     	; 0x11dfc <GPIB+0x66>
            printf("[SPE]\n");
   11de8:	88 e7       	ldi	r24, 0x78	; 120
   11dea:	93 e1       	ldi	r25, 0x13	; 19
   11dec:	a0 e0       	ldi	r26, 0x00	; 0
   11dee:	ed b7       	in	r30, 0x3d	; 61
   11df0:	fe b7       	in	r31, 0x3e	; 62
   11df2:	81 83       	std	Z+1, r24	; 0x01
   11df4:	92 83       	std	Z+2, r25	; 0x02
   11df6:	a3 83       	std	Z+3, r26	; 0x03
   11df8:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
#endif
        spoll = 1;
   11dfc:	81 e0       	ldi	r24, 0x01	; 1
   11dfe:	80 93 eb 1e 	sts	0x1EEB, r24	; 0x801eeb <spoll>
        if(SS80_is_MTA(talking))
   11e02:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   11e06:	90 e0       	ldi	r25, 0x00	; 0
   11e08:	69 dd       	rcall	.-1326   	; 0x118dc <SS80_is_MTA>
   11e0a:	89 2b       	or	r24, r25
   11e0c:	09 f4       	brne	.+2      	; 0x11e10 <GPIB+0x7a>
   11e0e:	7d c0       	rjmp	.+250    	; 0x11f0a <GPIB+0x174>
        {
            return( SS80_Report() );
   11e10:	0e 94 60 ad 	call	0x15ac0	; 0x15ac0 <SS80_Report>
   11e14:	7c c0       	rjmp	.+248    	; 0x11f0e <GPIB+0x178>
        }
        return 0;
    }

///@brief Serial Poll Disable
    if(ch == SPD)
   11e16:	89 31       	cpi	r24, 0x19	; 25
   11e18:	39 f4       	brne	.+14     	; 0x11e28 <GPIB+0x92>
    {
#if SDEBUG
        if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   11e1a:	26 70       	andi	r18, 0x06	; 6
   11e1c:	33 27       	eor	r19, r19
   11e1e:	23 2b       	or	r18, r19
   11e20:	89 f2       	breq	.-94     	; 0x11dc4 <GPIB+0x2e>
            printf("[SPD]\n");
   11e22:	81 e7       	ldi	r24, 0x71	; 113
   11e24:	93 e1       	ldi	r25, 0x13	; 19
   11e26:	c6 cf       	rjmp	.-116    	; 0x11db4 <GPIB+0x1e>
        return 0;
    }
#endif                                        // #if defined(SPOLL)

///@brief Selected Device Clear
    if(ch == SDC )
   11e28:	84 30       	cpi	r24, 0x04	; 4
   11e2a:	09 f0       	breq	.+2      	; 0x11e2e <GPIB+0x98>
   11e2c:	48 c0       	rjmp	.+144    	; 0x11ebe <GPIB+0x128>
    {
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11e2e:	22 ff       	sbrs	r18, 2
   11e30:	0a c0       	rjmp	.+20     	; 0x11e46 <GPIB+0xb0>
            printf("[SDC]\n");
   11e32:	8a e6       	ldi	r24, 0x6A	; 106
   11e34:	93 e1       	ldi	r25, 0x13	; 19
   11e36:	a0 e0       	ldi	r26, 0x00	; 0
   11e38:	ed b7       	in	r30, 0x3d	; 61
   11e3a:	fe b7       	in	r31, 0x3e	; 62
   11e3c:	81 83       	std	Z+1, r24	; 0x01
   11e3e:	92 83       	std	Z+2, r25	; 0x02
   11e40:	a3 83       	std	Z+3, r26	; 0x03
   11e42:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
#endif
        if(SS80_is_MLA(listening))
   11e46:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   11e4a:	90 e0       	ldi	r25, 0x00	; 0
   11e4c:	35 dd       	rcall	.-1430   	; 0x118b8 <SS80_is_MLA>
   11e4e:	89 2b       	or	r24, r25
   11e50:	d9 f0       	breq	.+54     	; 0x11e88 <GPIB+0xf2>
        {
///  Note: Suposed to be unsupported in SS80 - pg 4-2
///  CS80 3-4
#if SDEBUG
            if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11e52:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11e56:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11e5a:	84 72       	andi	r24, 0x24	; 36
   11e5c:	99 27       	eor	r25, r25
   11e5e:	89 2b       	or	r24, r25
   11e60:	51 f0       	breq	.+20     	; 0x11e76 <GPIB+0xe0>
                printf("[SDC SS80]\n");
   11e62:	8e e5       	ldi	r24, 0x5E	; 94
   11e64:	93 e1       	ldi	r25, 0x13	; 19
   11e66:	a0 e0       	ldi	r26, 0x00	; 0
   11e68:	ed b7       	in	r30, 0x3d	; 61
   11e6a:	fe b7       	in	r31, 0x3e	; 62
   11e6c:	81 83       	std	Z+1, r24	; 0x01
   11e6e:	92 83       	std	Z+2, r25	; 0x02
   11e70:	a3 83       	std	Z+3, r26	; 0x03
   11e72:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
#endif
            return(SS80_Selected_Device_Clear(SS80s->unitNO) );
   11e76:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   11e7a:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   11e7e:	85 81       	ldd	r24, Z+5	; 0x05
   11e80:	90 e0       	ldi	r25, 0x00	; 0
   11e82:	0e 94 32 ae 	call	0x15c64	; 0x15c64 <SS80_Selected_Device_Clear>
   11e86:	43 c0       	rjmp	.+134    	; 0x11f0e <GPIB+0x178>
        }

#ifdef AMIGO
        if(AMIGO_is_MLA(listening))
   11e88:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   11e8c:	90 e0       	ldi	r25, 0x00	; 0
   11e8e:	4a dd       	rcall	.-1388   	; 0x11924 <AMIGO_is_MLA>
   11e90:	89 2b       	or	r24, r25
   11e92:	d9 f1       	breq	.+118    	; 0x11f0a <GPIB+0x174>
        {
///  Note: Suposed to be unsupported in SS80 - pg 4-2
#if SDEBUG
            if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11e94:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11e98:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11e9c:	84 72       	andi	r24, 0x24	; 36
   11e9e:	99 27       	eor	r25, r25
   11ea0:	89 2b       	or	r24, r25
   11ea2:	51 f0       	breq	.+20     	; 0x11eb8 <GPIB+0x122>
                printf("[SDC AMIGO]\n");
   11ea4:	81 e5       	ldi	r24, 0x51	; 81
   11ea6:	93 e1       	ldi	r25, 0x13	; 19
   11ea8:	a0 e0       	ldi	r26, 0x00	; 0
   11eaa:	ed b7       	in	r30, 0x3d	; 61
   11eac:	fe b7       	in	r31, 0x3e	; 62
   11eae:	81 83       	std	Z+1, r24	; 0x01
   11eb0:	92 83       	std	Z+2, r25	; 0x02
   11eb2:	a3 83       	std	Z+3, r26	; 0x03
   11eb4:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
#endif
            return( amigo_cmd_clear() );
   11eb8:	0e 94 6d b8 	call	0x170da	; 0x170da <amigo_cmd_clear>
   11ebc:	28 c0       	rjmp	.+80     	; 0x11f0e <GPIB+0x178>
/// @todo FIXME
        return( 0 );
    }

///@brief   (Universal) Device Clear
    if(ch == DCL )
   11ebe:	84 31       	cpi	r24, 0x14	; 20
   11ec0:	99 f4       	brne	.+38     	; 0x11ee8 <GPIB+0x152>
    {
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11ec2:	22 ff       	sbrs	r18, 2
   11ec4:	0a c0       	rjmp	.+20     	; 0x11eda <GPIB+0x144>
            printf("[DCL]\n");
   11ec6:	8a e4       	ldi	r24, 0x4A	; 74
   11ec8:	93 e1       	ldi	r25, 0x13	; 19
   11eca:	a0 e0       	ldi	r26, 0x00	; 0
   11ecc:	ed b7       	in	r30, 0x3d	; 61
   11ece:	fe b7       	in	r31, 0x3e	; 62
   11ed0:	81 83       	std	Z+1, r24	; 0x01
   11ed2:	92 83       	std	Z+2, r25	; 0x02
   11ed4:	a3 83       	std	Z+3, r26	; 0x03
   11ed6:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
#endif
        SS80_Universal_Device_Clear();
   11eda:	0e 94 24 ae 	call	0x15c48	; 0x15c48 <SS80_Universal_Device_Clear>

#ifdef AMIGO
        amigo_cmd_clear();
   11ede:	0e 94 6d b8 	call	0x170da	; 0x170da <amigo_cmd_clear>
#endif

/// @todo Fixme
        printer_close();
   11ee2:	0e 94 8c be 	call	0x17d18	; 0x17d18 <printer_close>
   11ee6:	11 c0       	rjmp	.+34     	; 0x11f0a <GPIB+0x174>
        return( 0 );
    }

    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   11ee8:	25 71       	andi	r18, 0x15	; 21
   11eea:	33 27       	eor	r19, r19
   11eec:	23 2b       	or	r18, r19
   11eee:	69 f0       	breq	.+26     	; 0x11f0a <GPIB+0x174>
        printf("[GPIB (%02XH) not defined TODO]\n", 0xff & ch);
   11ef0:	90 e0       	ldi	r25, 0x00	; 0
   11ef2:	ed b7       	in	r30, 0x3d	; 61
   11ef4:	fe b7       	in	r31, 0x3e	; 62
   11ef6:	95 83       	std	Z+5, r25	; 0x05
   11ef8:	84 83       	std	Z+4, r24	; 0x04
   11efa:	89 e2       	ldi	r24, 0x29	; 41
   11efc:	93 e1       	ldi	r25, 0x13	; 19
   11efe:	a0 e0       	ldi	r26, 0x00	; 0
   11f00:	81 83       	std	Z+1, r24	; 0x01
   11f02:	92 83       	std	Z+2, r25	; 0x02
   11f04:	a3 83       	std	Z+3, r26	; 0x03
   11f06:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    return(0);
   11f0a:	80 e0       	ldi	r24, 0x00	; 0
   11f0c:	90 e0       	ldi	r25, 0x00	; 0
}
   11f0e:	0f 90       	pop	r0
   11f10:	0f 90       	pop	r0
   11f12:	0f 90       	pop	r0
   11f14:	0f 90       	pop	r0
   11f16:	0f 90       	pop	r0
   11f18:	08 95       	ret

00011f1a <GPIB_TALK>:
/// @param[in] ch 8 bit talk command
///
/// @return  0

int GPIB_TALK(uint8_t ch)
{
   11f1a:	cf 93       	push	r28
   11f1c:	df 93       	push	r29
   11f1e:	00 d0       	rcall	.+0      	; 0x11f20 <GPIB_TALK+0x6>
   11f20:	00 d0       	rcall	.+0      	; 0x11f22 <GPIB_TALK+0x8>
   11f22:	1f 92       	push	r1

///  NOTE: we must track the "addressed state" of each device
///  so we can determine its state - ie: command vs Secondary states
///  save talking state
    talking_last = talking;
   11f24:	90 91 ee 1e 	lds	r25, 0x1EEE	; 0x801eee <talking>
   11f28:	90 93 f1 1e 	sts	0x1EF1, r25	; 0x801ef1 <talking_last>
    talking = ch;
   11f2c:	80 93 ee 1e 	sts	0x1EEE, r24	; 0x801eee <talking>

    talk_cleanup();

///@brief  Universal Untalk
    if(ch == UNT)
   11f30:	8f 35       	cpi	r24, 0x5F	; 95
   11f32:	79 f4       	brne	.+30     	; 0x11f52 <GPIB_TALK+0x38>
    {
//FIXME talking = 0 ????
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11f34:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11f38:	82 ff       	sbrs	r24, 2
   11f3a:	7f c0       	rjmp	.+254    	; 0x1203a <GPIB_TALK+0x120>
            printf("[UNT]\n");
   11f3c:	86 ed       	ldi	r24, 0xD6	; 214
   11f3e:	92 e1       	ldi	r25, 0x12	; 18
   11f40:	a0 e0       	ldi	r26, 0x00	; 0
   11f42:	ed b7       	in	r30, 0x3d	; 61
   11f44:	fe b7       	in	r31, 0x3e	; 62
   11f46:	81 83       	std	Z+1, r24	; 0x01
   11f48:	92 83       	std	Z+2, r25	; 0x02
   11f4a:	a3 83       	std	Z+3, r26	; 0x03
   11f4c:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   11f50:	74 c0       	rjmp	.+232    	; 0x1203a <GPIB_TALK+0x120>
#endif
        return(0);
    }

    if(SS80_is_MTA(ch))
   11f52:	c8 2f       	mov	r28, r24
   11f54:	d0 e0       	ldi	r29, 0x00	; 0
   11f56:	ce 01       	movw	r24, r28
   11f58:	c1 dc       	rcall	.-1662   	; 0x118dc <SS80_is_MTA>
   11f5a:	89 2b       	or	r24, r25
   11f5c:	e1 f0       	breq	.+56     	; 0x11f96 <GPIB_TALK+0x7c>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11f5e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11f62:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11f66:	84 72       	andi	r24, 0x24	; 36
   11f68:	99 27       	eor	r25, r25
   11f6a:	89 2b       	or	r24, r25
   11f6c:	61 f0       	breq	.+24     	; 0x11f86 <GPIB_TALK+0x6c>
            printf("[TA %02XH SS80]\n", 0xff & ch);
   11f6e:	ed b7       	in	r30, 0x3d	; 61
   11f70:	fe b7       	in	r31, 0x3e	; 62
   11f72:	d5 83       	std	Z+5, r29	; 0x05
   11f74:	c4 83       	std	Z+4, r28	; 0x04
   11f76:	85 ec       	ldi	r24, 0xC5	; 197
   11f78:	92 e1       	ldi	r25, 0x12	; 18
   11f7a:	a0 e0       	ldi	r26, 0x00	; 0
   11f7c:	81 83       	std	Z+1, r24	; 0x01
   11f7e:	92 83       	std	Z+2, r25	; 0x02
   11f80:	a3 83       	std	Z+3, r26	; 0x03
   11f82:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
#endif

        if (spoll)
   11f86:	80 91 eb 1e 	lds	r24, 0x1EEB	; 0x801eeb <spoll>
   11f8a:	88 23       	and	r24, r24
   11f8c:	09 f4       	brne	.+2      	; 0x11f90 <GPIB_TALK+0x76>
   11f8e:	55 c0       	rjmp	.+170    	; 0x1203a <GPIB_TALK+0x120>
        {
            SS80_Report();
   11f90:	0e 94 60 ad 	call	0x15ac0	; 0x15ac0 <SS80_Report>
   11f94:	52 c0       	rjmp	.+164    	; 0x1203a <GPIB_TALK+0x120>
        }
        return(0);
    }

#ifdef AMIGO
    if(AMIGO_is_MTA(ch))
   11f96:	ce 01       	movw	r24, r28
   11f98:	d7 dc       	rcall	.-1618   	; 0x11948 <AMIGO_is_MTA>
   11f9a:	89 2b       	or	r24, r25
   11f9c:	81 f0       	breq	.+32     	; 0x11fbe <GPIB_TALK+0xa4>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11f9e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11fa2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11fa6:	84 72       	andi	r24, 0x24	; 36
   11fa8:	99 27       	eor	r25, r25
   11faa:	89 2b       	or	r24, r25
   11fac:	09 f4       	brne	.+2      	; 0x11fb0 <GPIB_TALK+0x96>
   11fae:	45 c0       	rjmp	.+138    	; 0x1203a <GPIB_TALK+0x120>
            printf("[TA %02XH AMIGO]\n", 0xff & ch);
   11fb0:	ed b7       	in	r30, 0x3d	; 61
   11fb2:	fe b7       	in	r31, 0x3e	; 62
   11fb4:	d5 83       	std	Z+5, r29	; 0x05
   11fb6:	c4 83       	std	Z+4, r28	; 0x04
   11fb8:	83 eb       	ldi	r24, 0xB3	; 179
   11fba:	92 e1       	ldi	r25, 0x12	; 18
#endif
        return(0);
    }
#endif                                        // #ifdef AMIGO

    if(PRINTER_is_MTA(ch))
   11fbc:	38 c0       	rjmp	.+112    	; 0x1202e <GPIB_TALK+0x114>
   11fbe:	ce 01       	movw	r24, r28
   11fc0:	f9 dc       	rcall	.-1550   	; 0x119b4 <PRINTER_is_MTA>
   11fc2:	89 2b       	or	r24, r25
   11fc4:	79 f0       	breq	.+30     	; 0x11fe4 <GPIB_TALK+0xca>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11fc6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11fca:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11fce:	84 72       	andi	r24, 0x24	; 36
   11fd0:	99 27       	eor	r25, r25
   11fd2:	89 2b       	or	r24, r25
   11fd4:	91 f1       	breq	.+100    	; 0x1203a <GPIB_TALK+0x120>
            printf("[TA %02XH PRINTER]\n", 0xff & ch);
   11fd6:	ed b7       	in	r30, 0x3d	; 61
   11fd8:	fe b7       	in	r31, 0x3e	; 62
   11fda:	d5 83       	std	Z+5, r29	; 0x05
   11fdc:	c4 83       	std	Z+4, r28	; 0x04
   11fde:	8f e9       	ldi	r24, 0x9F	; 159
   11fe0:	92 e1       	ldi	r25, 0x12	; 18
   11fe2:	25 c0       	rjmp	.+74     	; 0x1202e <GPIB_TALK+0x114>
#endif
        return(0);
    }

    if(PRINTER_is_MLA(listening))
   11fe4:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   11fe8:	90 e0       	ldi	r25, 0x00	; 0
   11fea:	d2 dc       	rcall	.-1628   	; 0x11990 <PRINTER_is_MLA>
   11fec:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11ff0:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11ff4:	89 2b       	or	r24, r25
   11ff6:	99 f0       	breq	.+38     	; 0x1201e <GPIB_TALK+0x104>
    {
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11ff8:	24 72       	andi	r18, 0x24	; 36
   11ffa:	33 27       	eor	r19, r19
   11ffc:	23 2b       	or	r18, r19
   11ffe:	51 f0       	breq	.+20     	; 0x12014 <GPIB_TALK+0xfa>
            printf("[PRINTER OPEN]\n");
   12000:	8f e8       	ldi	r24, 0x8F	; 143
   12002:	92 e1       	ldi	r25, 0x12	; 18
   12004:	a0 e0       	ldi	r26, 0x00	; 0
   12006:	ed b7       	in	r30, 0x3d	; 61
   12008:	fe b7       	in	r31, 0x3e	; 62
   1200a:	81 83       	std	Z+1, r24	; 0x01
   1200c:	92 83       	std	Z+2, r25	; 0x02
   1200e:	a3 83       	std	Z+3, r26	; 0x03
   12010:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
        printer_open(NULL);
   12014:	80 e0       	ldi	r24, 0x00	; 0
   12016:	90 e0       	ldi	r25, 0x00	; 0
   12018:	0e 94 e4 be 	call	0x17dc8	; 0x17dc8 <printer_open>
   1201c:	0e c0       	rjmp	.+28     	; 0x1203a <GPIB_TALK+0x120>
        return(0);
    }

#if SDEBUG
    if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   1201e:	22 ff       	sbrs	r18, 2
   12020:	0c c0       	rjmp	.+24     	; 0x1203a <GPIB_TALK+0x120>
        printf("[TA %02XH]\n", 0xff & ch);
   12022:	ed b7       	in	r30, 0x3d	; 61
   12024:	fe b7       	in	r31, 0x3e	; 62
   12026:	d5 83       	std	Z+5, r29	; 0x05
   12028:	c4 83       	std	Z+4, r28	; 0x04
   1202a:	83 e8       	ldi	r24, 0x83	; 131
   1202c:	92 e1       	ldi	r25, 0x12	; 18
   1202e:	a0 e0       	ldi	r26, 0x00	; 0
   12030:	81 83       	std	Z+1, r24	; 0x01
   12032:	92 83       	std	Z+2, r25	; 0x02
   12034:	a3 83       	std	Z+3, r26	; 0x03
   12036:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
#endif
    return(0);
}                                                 // Talk Address primary address group
   1203a:	80 e0       	ldi	r24, 0x00	; 0
   1203c:	90 e0       	ldi	r25, 0x00	; 0
   1203e:	cd b7       	in	r28, 0x3d	; 61
   12040:	de b7       	in	r29, 0x3e	; 62
   12042:	25 96       	adiw	r28, 0x05	; 5
   12044:	e2 e0       	ldi	r30, 0x02	; 2
   12046:	0c 94 e7 e6 	jmp	0x1cdce	; 0x1cdce <__epilogue_restores__+0x20>

0001204a <GPIB_SECONDARY_ADDRESS>:
///
/// @param[in] ch 8 bit secondary address.
///
/// @return  0
int GPIB_SECONDARY_ADDRESS(uint8_t ch)
{
   1204a:	a9 e0       	ldi	r26, 0x09	; 9
   1204c:	b0 e0       	ldi	r27, 0x00	; 0
   1204e:	eb e2       	ldi	r30, 0x2B	; 43
   12050:	f0 e9       	ldi	r31, 0x90	; 144
   12052:	0c 94 ca e6 	jmp	0x1cd94	; 0x1cd94 <__prologue_saves__+0x1e>
   12056:	18 2f       	mov	r17, r24
///  note: any errors will reset lastcmd
///  Universal Talk mode
///  Treat this as a Secondary Address ?
///  SS80 Ident 4-31
///  If we have our secondary address then send IDENT
    if(SS80_is_MSA(ch) )
   12058:	c8 2f       	mov	r28, r24
   1205a:	d0 e0       	ldi	r29, 0x00	; 0
   1205c:	ce 01       	movw	r24, r28
   1205e:	50 dc       	rcall	.-1888   	; 0x11900 <SS80_is_MSA>
   12060:	89 2b       	or	r24, r25
   12062:	09 f1       	breq	.+66     	; 0x120a6 <GPIB_SECONDARY_ADDRESS+0x5c>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   12064:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12068:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1206c:	84 72       	andi	r24, 0x24	; 36
   1206e:	99 27       	eor	r25, r25
   12070:	89 2b       	or	r24, r25
   12072:	61 f0       	breq	.+24     	; 0x1208c <GPIB_SECONDARY_ADDRESS+0x42>
            printf("[SA %02XH SS80]\n", 0xff & ch);
   12074:	ed b7       	in	r30, 0x3d	; 61
   12076:	fe b7       	in	r31, 0x3e	; 62
   12078:	d5 83       	std	Z+5, r29	; 0x05
   1207a:	c4 83       	std	Z+4, r28	; 0x04
   1207c:	82 e7       	ldi	r24, 0x72	; 114
   1207e:	92 e1       	ldi	r25, 0x12	; 18
   12080:	a0 e0       	ldi	r26, 0x00	; 0
   12082:	81 83       	std	Z+1, r24	; 0x01
   12084:	92 83       	std	Z+2, r25	; 0x02
   12086:	a3 83       	std	Z+3, r26	; 0x03
   12088:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
#endif
///@brief ch = secondary address
        gpib_disable_PPR(SS80p->HEADER.PPR);
   1208c:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   12090:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   12094:	81 81       	ldd	r24, Z+1	; 0x01
   12096:	90 e0       	ldi	r25, 0x00	; 0
   12098:	0e 94 62 86 	call	0x10cc4	; 0x10cc4 <gpib_disable_PPR>
        return(Send_Identify( ch, SS80p->CONFIG.ID) );
   1209c:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   120a0:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   120a4:	25 c0       	rjmp	.+74     	; 0x120f0 <GPIB_SECONDARY_ADDRESS+0xa6>

    }

#ifdef AMIGO
    if(AMIGO_is_MSA(ch) )
   120a6:	ce 01       	movw	r24, r28
   120a8:	61 dc       	rcall	.-1854   	; 0x1196c <AMIGO_is_MSA>
   120aa:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   120ae:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   120b2:	89 2b       	or	r24, r25
   120b4:	11 f1       	breq	.+68     	; 0x120fa <GPIB_SECONDARY_ADDRESS+0xb0>
    {
/// @todo
///     Two identify bytes should be repeated until untalked
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   120b6:	c9 01       	movw	r24, r18
   120b8:	84 72       	andi	r24, 0x24	; 36
   120ba:	99 27       	eor	r25, r25
   120bc:	89 2b       	or	r24, r25
   120be:	61 f0       	breq	.+24     	; 0x120d8 <GPIB_SECONDARY_ADDRESS+0x8e>
            printf("[SA %02XH AMIGO]\n", 0xff & ch);
   120c0:	ed b7       	in	r30, 0x3d	; 61
   120c2:	fe b7       	in	r31, 0x3e	; 62
   120c4:	d5 83       	std	Z+5, r29	; 0x05
   120c6:	c4 83       	std	Z+4, r28	; 0x04
   120c8:	80 e6       	ldi	r24, 0x60	; 96
   120ca:	92 e1       	ldi	r25, 0x12	; 18
   120cc:	a0 e0       	ldi	r26, 0x00	; 0
   120ce:	81 83       	std	Z+1, r24	; 0x01
   120d0:	92 83       	std	Z+2, r25	; 0x02
   120d2:	a3 83       	std	Z+3, r26	; 0x03
   120d4:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
#endif
///@brief ch = secondary address
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   120d8:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   120dc:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   120e0:	81 81       	ldd	r24, Z+1	; 0x01
   120e2:	90 e0       	ldi	r25, 0x00	; 0
   120e4:	0e 94 62 86 	call	0x10cc4	; 0x10cc4 <gpib_disable_PPR>
        return( Send_Identify( ch, AMIGOp->CONFIG.ID) );
   120e8:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   120ec:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   120f0:	66 81       	ldd	r22, Z+6	; 0x06
   120f2:	77 81       	ldd	r23, Z+7	; 0x07
   120f4:	81 2f       	mov	r24, r17
   120f6:	ec dd       	rcall	.-1064   	; 0x11cd0 <Send_Identify>
   120f8:	1d c0       	rjmp	.+58     	; 0x12134 <GPIB_SECONDARY_ADDRESS+0xea>
    }
#endif                                        // #ifdef AMIGO

#if SDEBUG
    if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   120fa:	c9 01       	movw	r24, r18
   120fc:	84 72       	andi	r24, 0x24	; 36
   120fe:	99 27       	eor	r25, r25
   12100:	00 97       	sbiw	r24, 0x00	; 0
   12102:	c1 f0       	breq	.+48     	; 0x12134 <GPIB_SECONDARY_ADDRESS+0xea>
        printf("[SA %02XH, listen:%02XH, talk:%02XH]\n",
   12104:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   12108:	90 e0       	ldi	r25, 0x00	; 0
   1210a:	ed b7       	in	r30, 0x3d	; 61
   1210c:	fe b7       	in	r31, 0x3e	; 62
   1210e:	91 87       	std	Z+9, r25	; 0x09
   12110:	80 87       	std	Z+8, r24	; 0x08
   12112:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   12116:	90 e0       	ldi	r25, 0x00	; 0
   12118:	97 83       	std	Z+7, r25	; 0x07
   1211a:	86 83       	std	Z+6, r24	; 0x06
   1211c:	d5 83       	std	Z+5, r29	; 0x05
   1211e:	c4 83       	std	Z+4, r28	; 0x04
   12120:	8a e3       	ldi	r24, 0x3A	; 58
   12122:	92 e1       	ldi	r25, 0x12	; 18
   12124:	a0 e0       	ldi	r26, 0x00	; 0
   12126:	81 83       	std	Z+1, r24	; 0x01
   12128:	92 83       	std	Z+2, r25	; 0x02
   1212a:	a3 83       	std	Z+3, r26	; 0x03
   1212c:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
            0xff & ch, 0xff & listening, 0xff & talking);
#endif
    return(0);
   12130:	80 e0       	ldi	r24, 0x00	; 0
   12132:	90 e0       	ldi	r25, 0x00	; 0
}
   12134:	cd b7       	in	r28, 0x3d	; 61
   12136:	de b7       	in	r29, 0x3e	; 62
   12138:	29 96       	adiw	r28, 0x09	; 9
   1213a:	e3 e0       	ldi	r30, 0x03	; 3
   1213c:	0c 94 e6 e6 	jmp	0x1cdcc	; 0x1cdcc <__epilogue_restores__+0x1e>

00012140 <listen_cleanup>:
/// - Used to cleanup or close at the end of any listen address transition.
/// - Also called when GPIB bus reset or unlisten.
/// For now we just use this to close printer capture
/// @return  void
void listen_cleanup()
{
   12140:	00 d0       	rcall	.+0      	; 0x12142 <listen_cleanup+0x2>
   12142:	1f 92       	push	r1
    if(listening_last)
   12144:	60 91 ea 1e 	lds	r22, 0x1EEA	; 0x801eea <listening_last>
   12148:	66 23       	and	r22, r22
   1214a:	e1 f0       	breq	.+56     	; 0x12184 <listen_cleanup+0x44>
    {
        int index = find_device(PRINTER_TYPE, listening_last, BASE_MLA);
   1214c:	70 e0       	ldi	r23, 0x00	; 0
   1214e:	40 e2       	ldi	r20, 0x20	; 32
   12150:	50 e0       	ldi	r21, 0x00	; 0
   12152:	84 e0       	ldi	r24, 0x04	; 4
   12154:	90 e0       	ldi	r25, 0x00	; 0
   12156:	a4 d6       	rcall	.+3400   	; 0x12ea0 <find_device>
        if(index == -1)
   12158:	8f 3f       	cpi	r24, 0xFF	; 255
   1215a:	a1 f0       	breq	.+40     	; 0x12184 <listen_cleanup+0x44>
            return;

//We should not set the active device globally
//FIXME if we have to then printer close should temprarily do so
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   1215c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12160:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12164:	84 72       	andi	r24, 0x24	; 36
   12166:	99 27       	eor	r25, r25
   12168:	89 2b       	or	r24, r25
   1216a:	51 f0       	breq	.+20     	; 0x12180 <listen_cleanup+0x40>
            printf("[PRINTER close]\n");
   1216c:	89 e2       	ldi	r24, 0x29	; 41
   1216e:	92 e1       	ldi	r25, 0x12	; 18
   12170:	a0 e0       	ldi	r26, 0x00	; 0
   12172:	ed b7       	in	r30, 0x3d	; 61
   12174:	fe b7       	in	r31, 0x3e	; 62
   12176:	81 83       	std	Z+1, r24	; 0x01
   12178:	92 83       	std	Z+2, r25	; 0x02
   1217a:	a3 83       	std	Z+3, r26	; 0x03
   1217c:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
        printer_close();
   12180:	0e 94 8c be 	call	0x17d18	; 0x17d18 <printer_close>
    }
}
   12184:	0f 90       	pop	r0
   12186:	0f 90       	pop	r0
   12188:	0f 90       	pop	r0
   1218a:	08 95       	ret

0001218c <GPIB_LISTEN>:
/// @param[in] ch 8 bit listen command
///
/// @return  0

int GPIB_LISTEN(uint8_t ch)
{
   1218c:	cf 93       	push	r28
   1218e:	df 93       	push	r29
   12190:	00 d0       	rcall	.+0      	; 0x12192 <GPIB_LISTEN+0x6>
   12192:	00 d0       	rcall	.+0      	; 0x12194 <GPIB_LISTEN+0x8>
   12194:	1f 92       	push	r1
   12196:	c8 2f       	mov	r28, r24
    listening_last = listening;
   12198:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   1219c:	80 93 ea 1e 	sts	0x1EEA, r24	; 0x801eea <listening_last>
    listening = ch;
   121a0:	c0 93 f0 1e 	sts	0x1EF0, r28	; 0x801ef0 <listening>

    listen_cleanup();
   121a4:	cd df       	rcall	.-102    	; 0x12140 <listen_cleanup>

///  NOTE: we must track the "addressed state" of each device
///  so we can determine its state - ie: command vs Secondary states
///@brief  Universal Unlisten
    if(ch == UNL)
   121a6:	cf 33       	cpi	r28, 0x3F	; 63
   121a8:	19 f5       	brne	.+70     	; 0x121f0 <GPIB_LISTEN+0x64>
    {
        listening = 0;
   121aa:	10 92 f0 1e 	sts	0x1EF0, r1	; 0x801ef0 <listening>

#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   121ae:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   121b2:	82 ff       	sbrs	r24, 2
   121b4:	74 c0       	rjmp	.+232    	; 0x1229e <GPIB_LISTEN+0x112>
        {
            printf("[UNL]\n");
   121b6:	82 e2       	ldi	r24, 0x22	; 34
   121b8:	93 e1       	ldi	r25, 0x13	; 19
   121ba:	a0 e0       	ldi	r26, 0x00	; 0
   121bc:	ed b7       	in	r30, 0x3d	; 61
   121be:	fe b7       	in	r31, 0x3e	; 62
   121c0:	81 83       	std	Z+1, r24	; 0x01
   121c2:	92 83       	std	Z+2, r25	; 0x02
   121c4:	a3 83       	std	Z+3, r26	; 0x03
   121c6:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
///@brief add a line break if we both Untalk and Unlisten
            if(lastcmd == UNT)
   121ca:	80 91 e8 1c 	lds	r24, 0x1CE8	; 0x801ce8 <lastcmd>
   121ce:	90 91 e9 1c 	lds	r25, 0x1CE9	; 0x801ce9 <lastcmd+0x1>
   121d2:	8f 35       	cpi	r24, 0x5F	; 95
   121d4:	91 05       	cpc	r25, r1
   121d6:	09 f0       	breq	.+2      	; 0x121da <GPIB_LISTEN+0x4e>
   121d8:	62 c0       	rjmp	.+196    	; 0x1229e <GPIB_LISTEN+0x112>
                printf("\n");
   121da:	80 e2       	ldi	r24, 0x20	; 32
   121dc:	93 e1       	ldi	r25, 0x13	; 19
   121de:	a0 e0       	ldi	r26, 0x00	; 0
   121e0:	ed b7       	in	r30, 0x3d	; 61
   121e2:	fe b7       	in	r31, 0x3e	; 62
   121e4:	81 83       	std	Z+1, r24	; 0x01
   121e6:	92 83       	std	Z+2, r25	; 0x02
   121e8:	a3 83       	std	Z+3, r26	; 0x03
   121ea:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   121ee:	57 c0       	rjmp	.+174    	; 0x1229e <GPIB_LISTEN+0x112>
#endif
        return(0);
    }

#ifdef AMIGO
    if(AMIGO_is_MLA(ch))
   121f0:	d0 e0       	ldi	r29, 0x00	; 0
   121f2:	ce 01       	movw	r24, r28
   121f4:	97 db       	rcall	.-2258   	; 0x11924 <AMIGO_is_MLA>
   121f6:	89 2b       	or	r24, r25
   121f8:	81 f0       	breq	.+32     	; 0x1221a <GPIB_LISTEN+0x8e>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   121fa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   121fe:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12202:	84 72       	andi	r24, 0x24	; 36
   12204:	99 27       	eor	r25, r25
   12206:	89 2b       	or	r24, r25
   12208:	09 f4       	brne	.+2      	; 0x1220c <GPIB_LISTEN+0x80>
   1220a:	49 c0       	rjmp	.+146    	; 0x1229e <GPIB_LISTEN+0x112>
            printf("[LA %02XH AMIGO]\n", 0xff & ch);
   1220c:	ed b7       	in	r30, 0x3d	; 61
   1220e:	fe b7       	in	r31, 0x3e	; 62
   12210:	d5 83       	std	Z+5, r29	; 0x05
   12212:	c4 83       	std	Z+4, r28	; 0x04
   12214:	8e e0       	ldi	r24, 0x0E	; 14
   12216:	93 e1       	ldi	r25, 0x13	; 19
#endif
        return(0);
    }
#endif                                        // #ifdef AMIGO

    if(SS80_is_MLA(ch))
   12218:	3c c0       	rjmp	.+120    	; 0x12292 <GPIB_LISTEN+0x106>
   1221a:	ce 01       	movw	r24, r28
   1221c:	4d db       	rcall	.-2406   	; 0x118b8 <SS80_is_MLA>
   1221e:	89 2b       	or	r24, r25
   12220:	79 f0       	breq	.+30     	; 0x12240 <GPIB_LISTEN+0xb4>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   12222:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12226:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1222a:	84 72       	andi	r24, 0x24	; 36
   1222c:	99 27       	eor	r25, r25
   1222e:	89 2b       	or	r24, r25
   12230:	b1 f1       	breq	.+108    	; 0x1229e <GPIB_LISTEN+0x112>
            printf("[LA %02XH SS80]\n", 0xff & ch);
   12232:	ed b7       	in	r30, 0x3d	; 61
   12234:	fe b7       	in	r31, 0x3e	; 62
   12236:	d5 83       	std	Z+5, r29	; 0x05
   12238:	c4 83       	std	Z+4, r28	; 0x04
   1223a:	8d ef       	ldi	r24, 0xFD	; 253
   1223c:	92 e1       	ldi	r25, 0x12	; 18
#endif
        return(0);
    }

    if(PRINTER_is_MLA(ch))
   1223e:	29 c0       	rjmp	.+82     	; 0x12292 <GPIB_LISTEN+0x106>
   12240:	ce 01       	movw	r24, r28
   12242:	a6 db       	rcall	.-2228   	; 0x11990 <PRINTER_is_MLA>
   12244:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12248:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1224c:	89 2b       	or	r24, r25
   1224e:	c9 f0       	breq	.+50     	; 0x12282 <GPIB_LISTEN+0xf6>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   12250:	24 72       	andi	r18, 0x24	; 36
   12252:	33 27       	eor	r19, r19
   12254:	23 2b       	or	r18, r19
   12256:	61 f0       	breq	.+24     	; 0x12270 <GPIB_LISTEN+0xe4>
            printf("[LA %02XH PRINTER]\n", 0xff & ch);
   12258:	ed b7       	in	r30, 0x3d	; 61
   1225a:	fe b7       	in	r31, 0x3e	; 62
   1225c:	d5 83       	std	Z+5, r29	; 0x05
   1225e:	c4 83       	std	Z+4, r28	; 0x04
   12260:	89 ee       	ldi	r24, 0xE9	; 233
   12262:	92 e1       	ldi	r25, 0x12	; 18
   12264:	a0 e0       	ldi	r26, 0x00	; 0
   12266:	81 83       	std	Z+1, r24	; 0x01
   12268:	92 83       	std	Z+2, r25	; 0x02
   1226a:	a3 83       	std	Z+3, r26	; 0x03
   1226c:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
#endif
        if(talking != UNT)
   12270:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   12274:	8f 35       	cpi	r24, 0x5F	; 95
   12276:	99 f0       	breq	.+38     	; 0x1229e <GPIB_LISTEN+0x112>
        {
///@brief NULL creates a file named based on date and time
// FIXME use printer structure to permit multiple printers
            printer_open(NULL);
   12278:	80 e0       	ldi	r24, 0x00	; 0
   1227a:	90 e0       	ldi	r25, 0x00	; 0
   1227c:	0e 94 e4 be 	call	0x17dc8	; 0x17dc8 <printer_open>
   12280:	0e c0       	rjmp	.+28     	; 0x1229e <GPIB_LISTEN+0x112>
        }
        return(0);
    }
#if SDEBUG
    if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   12282:	22 ff       	sbrs	r18, 2
   12284:	0c c0       	rjmp	.+24     	; 0x1229e <GPIB_LISTEN+0x112>
        printf("[LA %02XH]\n", 0xff & ch);
   12286:	ed b7       	in	r30, 0x3d	; 61
   12288:	fe b7       	in	r31, 0x3e	; 62
   1228a:	d5 83       	std	Z+5, r29	; 0x05
   1228c:	c4 83       	std	Z+4, r28	; 0x04
   1228e:	8d ed       	ldi	r24, 0xDD	; 221
   12290:	92 e1       	ldi	r25, 0x12	; 18
   12292:	a0 e0       	ldi	r26, 0x00	; 0
   12294:	81 83       	std	Z+1, r24	; 0x01
   12296:	92 83       	std	Z+2, r25	; 0x02
   12298:	a3 83       	std	Z+3, r26	; 0x03
   1229a:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
#endif
    return(0);
}                                                 // Listen Primary Address group
   1229e:	80 e0       	ldi	r24, 0x00	; 0
   122a0:	90 e0       	ldi	r25, 0x00	; 0
   122a2:	cd b7       	in	r28, 0x3d	; 61
   122a4:	de b7       	in	r29, 0x3e	; 62
   122a6:	25 96       	adiw	r28, 0x05	; 5
   122a8:	e2 e0       	ldi	r30, 0x02	; 2
   122aa:	0c 94 e7 e6 	jmp	0x1cdce	; 0x1cdce <__epilogue_restores__+0x20>

000122ae <gpib_task>:
/// - Reads and processes GPIB control or data bytes
/// and calls emulator task.
/// @return  void

void gpib_task(void)
{
   122ae:	cf 93       	push	r28
   122b0:	df 93       	push	r29
    uint16_t val;
    uint8_t ch;
    uint16_t status;

    gpib_init_devices();                          // Init devices
   122b2:	92 db       	rcall	.-2268   	; 0x119d8 <gpib_init_devices>
	// gpib_state_init() is now done in gpib_init_devices
    // gpib_state_init();                            // Init PPR talking and listening states

    gpib_log_fp = NULL;
   122b4:	10 92 61 19 	sts	0x1961, r1	; 0x801961 <gpib_log_fp+0x1>
   122b8:	10 92 60 19 	sts	0x1960, r1	; 0x801960 <gpib_log_fp>

    while(1)
    {


        val = gpib_read_byte(NO_TRACE);
   122bc:	80 e0       	ldi	r24, 0x00	; 0
   122be:	90 e0       	ldi	r25, 0x00	; 0
   122c0:	4f d8       	rcall	.-3938   	; 0x11360 <gpib_read_byte>
   122c2:	ec 01       	movw	r28, r24

#if SDEBUG
        if(debuglevel & GPIB_TOP_LEVEL_BUS_DECODE)
   122c4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   122c8:	83 ff       	sbrs	r24, 3
            gpib_decode(val);
   122ca:	02 c0       	rjmp	.+4      	; 0x122d0 <gpib_task+0x22>
   122cc:	ce 01       	movw	r24, r28
   122ce:	4e d9       	rcall	.-3428   	; 0x1156c <gpib_decode>
#endif
        status = gpib_error_test(val);
   122d0:	ce 01       	movw	r24, r28
   122d2:	1d dc       	rcall	.-1990   	; 0x11b0e <gpib_error_test>
        if(status & ABORT_FLAG)
        {
            return;
        }
        else if(status & MEDIA_FLAG)
   122d4:	9c 01       	movw	r18, r24
   122d6:	23 70       	andi	r18, 0x03	; 3
   122d8:	33 27       	eor	r19, r19
   122da:	23 2b       	or	r18, r19
   122dc:	09 f0       	breq	.+2      	; 0x122e0 <gpib_task+0x32>
   122de:	43 c0       	rjmp	.+134    	; 0x12366 <gpib_task+0xb8>
        {
            return;
        }
        else if(status)
   122e0:	89 2b       	or	r24, r25
   122e2:	61 f7       	brne	.-40     	; 0x122bc <gpib_task+0xe>
        {
            continue;
        }
///@brief GPIB commands with ATN set (COMMANDS)
        if(val & ATN_FLAG)
   122e4:	d2 ff       	sbrs	r29, 2
   122e6:	26 c0       	rjmp	.+76     	; 0x12334 <gpib_task+0x86>
        {
            ch = val & CMD_MASK;
   122e8:	8c 2f       	mov	r24, r28
   122ea:	8f 77       	andi	r24, 0x7F	; 127
            if(ch <= 0x1f)
   122ec:	80 32       	cpi	r24, 0x20	; 32
            {
                GPIB(ch);
   122ee:	10 f4       	brcc	.+4      	; 0x122f4 <gpib_task+0x46>
   122f0:	52 dd       	rcall	.-1372   	; 0x11d96 <GPIB>
                continue;
   122f2:	e4 cf       	rjmp	.-56     	; 0x122bc <gpib_task+0xe>
            }
///@brief GPIB listen
            if(ch >= 0x20 && ch <= 0x3f)
   122f4:	90 ee       	ldi	r25, 0xE0	; 224
   122f6:	98 0f       	add	r25, r24
   122f8:	90 32       	cpi	r25, 0x20	; 32
            {
                GPIB_LISTEN(ch);
   122fa:	10 f4       	brcc	.+4      	; 0x12300 <gpib_task+0x52>
   122fc:	47 df       	rcall	.-370    	; 0x1218c <GPIB_LISTEN>
                continue;
   122fe:	de cf       	rjmp	.-68     	; 0x122bc <gpib_task+0xe>
            }
///@brief GPIB talk
            if(ch >= 0x40 && ch <= 0x5f)
   12300:	90 ec       	ldi	r25, 0xC0	; 192
   12302:	98 0f       	add	r25, r24
   12304:	90 32       	cpi	r25, 0x20	; 32
            {
                GPIB_TALK(ch);
   12306:	10 f4       	brcc	.+4      	; 0x1230c <gpib_task+0x5e>
   12308:	08 de       	rcall	.-1008   	; 0x11f1a <GPIB_TALK>
                continue;
   1230a:	d8 cf       	rjmp	.-80     	; 0x122bc <gpib_task+0xe>
            }

///@brief GPIB secondary
/// Note: We know ch >= 0x60 && ch <= 0x7f because of previous tests

            if( listening && lastcmd == UNT)
   1230c:	90 91 f0 1e 	lds	r25, 0x1EF0	; 0x801ef0 <listening>
   12310:	99 23       	and	r25, r25
   12312:	59 f0       	breq	.+22     	; 0x1232a <gpib_task+0x7c>
   12314:	20 91 e8 1c 	lds	r18, 0x1CE8	; 0x801ce8 <lastcmd>
   12318:	30 91 e9 1c 	lds	r19, 0x1CE9	; 0x801ce9 <lastcmd+0x1>
   1231c:	2f 35       	cpi	r18, 0x5F	; 95
   1231e:	31 05       	cpc	r19, r1
            {
                secondary = 0;
   12320:	21 f4       	brne	.+8      	; 0x1232a <gpib_task+0x7c>
   12322:	10 92 ef 1e 	sts	0x1EEF, r1	; 0x801eef <secondary>
                GPIB_SECONDARY_ADDRESS(ch);
   12326:	91 de       	rcall	.-734    	; 0x1204a <GPIB_SECONDARY_ADDRESS>
                continue;
   12328:	c9 cf       	rjmp	.-110    	; 0x122bc <gpib_task+0xe>
            }

///@brief We have to keep track of secondary address that may happen out of order with older AMIGO protocol
/// this method works for SS80 as well
            secondary = ch;
   1232a:	80 93 ef 1e 	sts	0x1EEF, r24	; 0x801eef <secondary>
///@brief GPIB_COMMANDS does most of the work
            status = GPIB_COMMANDS(secondary,0);
   1232e:	60 e0       	ldi	r22, 0x00	; 0
   12330:	90 e0       	ldi	r25, 0x00	; 0
        }                                         // GPIB ATN

///@brief GPIB commands without ATN set (DATA)
        else                                      // GPIB Data
        {
            if ( PRINTER_is_MLA(listening) )
   12332:	12 c0       	rjmp	.+36     	; 0x12358 <gpib_task+0xaa>
   12334:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   12338:	90 e0       	ldi	r25, 0x00	; 0
   1233a:	2a db       	rcall	.-2476   	; 0x11990 <PRINTER_is_MLA>
   1233c:	89 2b       	or	r24, r25
   1233e:	29 f0       	breq	.+10     	; 0x1234a <gpib_task+0x9c>
            {
                printer_buffer( 0xff & val );
   12340:	ce 01       	movw	r24, r28
   12342:	99 27       	eor	r25, r25
   12344:	0e 94 87 bf 	call	0x17f0e	; 0x17f0e <printer_buffer>
                continue;
   12348:	b9 cf       	rjmp	.-142    	; 0x122bc <gpib_task+0xe>
            }

            if(!secondary)
   1234a:	80 91 ef 1e 	lds	r24, 0x1EEF	; 0x801eef <secondary>
   1234e:	88 23       	and	r24, r24
                continue;

// ONLY secondar commands at this point
///@brief GPIB_COMMANDS does most of the work
            status = GPIB_COMMANDS(val,1);
   12350:	09 f4       	brne	.+2      	; 0x12354 <gpib_task+0xa6>
   12352:	b4 cf       	rjmp	.-152    	; 0x122bc <gpib_task+0xe>
   12354:	61 e0       	ldi	r22, 0x01	; 1
   12356:	ce 01       	movw	r24, r28
            status = gpib_error_test(status);
   12358:	67 dc       	rcall	.-1842   	; 0x11c28 <GPIB_COMMANDS>
   1235a:	d9 db       	rcall	.-2126   	; 0x11b0e <gpib_error_test>

            if(status & ( ABORT_FLAG | MEDIA_FLAG ))
   1235c:	83 70       	andi	r24, 0x03	; 3
   1235e:	99 27       	eor	r25, r25
   12360:	89 2b       	or	r24, r25
   12362:	09 f4       	brne	.+2      	; 0x12366 <gpib_task+0xb8>
   12364:	ab cf       	rjmp	.-170    	; 0x122bc <gpib_task+0xe>
            }
            continue;
        }
    }                                             // while(1)
    return;
}
   12366:	df 91       	pop	r29
   12368:	cf 91       	pop	r28
   1236a:	08 95       	ret

0001236c <talk_cleanup>:
/// - Not used in this emulator.
///
/// @return  void

void talk_cleanup()
{
   1236c:	08 95       	ret

0001236e <gpib_help>:
///  Help Menu for User invoked GPIB functions and tasks
///  See: int gpib_tests(char *str)
/// @return  void

void gpib_help(int full)
{
   1236e:	cf 93       	push	r28
   12370:	df 93       	push	r29
   12372:	00 d0       	rcall	.+0      	; 0x12374 <gpib_help+0x6>
   12374:	1f 92       	push	r1
   12376:	ec 01       	movw	r28, r24
    printf("gpib  help\n");
   12378:	83 ea       	ldi	r24, 0xA3	; 163
   1237a:	97 e1       	ldi	r25, 0x17	; 23
   1237c:	a0 e0       	ldi	r26, 0x00	; 0
   1237e:	ed b7       	in	r30, 0x3d	; 61
   12380:	fe b7       	in	r31, 0x3e	; 62
   12382:	81 83       	std	Z+1, r24	; 0x01
   12384:	92 83       	std	Z+2, r25	; 0x02
   12386:	a3 83       	std	Z+3, r26	; 0x03
   12388:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    if(full)
   1238c:	cd 2b       	or	r28, r29
   1238e:	51 f0       	breq	.+20     	; 0x123a4 <gpib_help+0x36>
    {
        printf("Note: gpib prefix is optional\n"
   12390:	8a ee       	ldi	r24, 0xEA	; 234
   12392:	94 e1       	ldi	r25, 0x14	; 20
   12394:	a0 e0       	ldi	r26, 0x00	; 0
   12396:	ed b7       	in	r30, 0x3d	; 61
   12398:	fe b7       	in	r31, 0x3e	; 62
   1239a:	81 83       	std	Z+1, r24	; 0x01
   1239c:	92 83       	std	Z+2, r25	; 0x02
   1239e:	a3 83       	std	Z+3, r26	; 0x03
   123a0:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
			"     Example: gpib mount PRINTER 5\n"
			"gpib umount address"
			"     Example: gpib umount 6\n"
            );
    }
}
   123a4:	cd b7       	in	r28, 0x3d	; 61
   123a6:	de b7       	in	r29, 0x3e	; 62
   123a8:	23 96       	adiw	r28, 0x03	; 3
   123aa:	e2 e0       	ldi	r30, 0x02	; 2
   123ac:	0c 94 e7 e6 	jmp	0x1cdce	; 0x1cdce <__epilogue_restores__+0x20>

000123b0 <gpib_tests>:

/// @brief GPIB user tests
///  User invoked GPIB functions and tasks
/// @return  1 matched token, 0 if not
int gpib_tests(int argc, char * argv[])
{
   123b0:	a5 e0       	ldi	r26, 0x05	; 5
   123b2:	b0 e0       	ldi	r27, 0x00	; 0
   123b4:	ee ed       	ldi	r30, 0xDE	; 222
   123b6:	f1 e9       	ldi	r31, 0x91	; 145
   123b8:	0c 94 c3 e6 	jmp	0x1cd86	; 0x1cd86 <__prologue_saves__+0x10>

    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   123bc:	fb 01       	movw	r30, r22
   123be:	e0 80       	ld	r14, Z
   123c0:	f1 80       	ldd	r15, Z+1	; 0x01

    if(!ptr)
   123c2:	e1 14       	cp	r14, r1
   123c4:	f1 04       	cpc	r15, r1
   123c6:	19 f4       	brne	.+6      	; 0x123ce <gpib_tests+0x1e>
        return(0);
   123c8:	80 e0       	ldi	r24, 0x00	; 0
   123ca:	90 e0       	ldi	r25, 0x00	; 0
   123cc:	ee c0       	rjmp	.+476    	; 0x125aa <gpib_tests+0x1fa>
   123ce:	6b 01       	movw	r12, r22
   123d0:	5c 01       	movw	r10, r24

    if( MATCH(ptr,"gpib") )
   123d2:	66 ea       	ldi	r22, 0xA6	; 166
   123d4:	7d e0       	ldi	r23, 0x0D	; 13
   123d6:	c7 01       	movw	r24, r14
   123d8:	0e 94 24 32 	call	0x6448	; 0x6448 <MATCH>
   123dc:	89 2b       	or	r24, r25
   123de:	a1 f0       	breq	.+40     	; 0x12408 <gpib_tests+0x58>
    {
        ptr = argv[ind++];
   123e0:	f6 01       	movw	r30, r12
   123e2:	e2 80       	ldd	r14, Z+2	; 0x02
   123e4:	f3 80       	ldd	r15, Z+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
   123e6:	e1 14       	cp	r14, r1
   123e8:	f1 04       	cpc	r15, r1
   123ea:	21 f4       	brne	.+8      	; 0x123f4 <gpib_tests+0x44>
        {
            gpib_help(1);
   123ec:	81 e0       	ldi	r24, 0x01	; 1
   123ee:	90 e0       	ldi	r25, 0x00	; 0
   123f0:	be df       	rcall	.-132    	; 0x1236e <gpib_help>
   123f2:	d9 c0       	rjmp	.+434    	; 0x125a6 <gpib_tests+0x1f6>
        return(0);

    if( MATCH(ptr,"gpib") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
   123f4:	6d e6       	ldi	r22, 0x6D	; 109
   123f6:	76 e1       	ldi	r23, 0x16	; 22
   123f8:	c7 01       	movw	r24, r14
   123fa:	0e 94 24 32 	call	0x6448	; 0x6448 <MATCH>
   123fe:	89 2b       	or	r24, r25
   12400:	a9 f7       	brne	.-22     	; 0x123ec <gpib_tests+0x3c>
    if(!ptr)
        return(0);

    if( MATCH(ptr,"gpib") )
    {
        ptr = argv[ind++];
   12402:	c2 e0       	ldi	r28, 0x02	; 2
   12404:	d0 e0       	ldi	r29, 0x00	; 0
   12406:	02 c0       	rjmp	.+4      	; 0x1240c <gpib_tests+0x5c>

    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   12408:	c1 e0       	ldi	r28, 0x01	; 1
   1240a:	d0 e0       	ldi	r29, 0x00	; 0
            gpib_help(1);
            return(1);
        }
    }

    if (MATCHI(ptr,"debug") )
   1240c:	6b ea       	ldi	r22, 0xAB	; 171
   1240e:	7d e0       	ldi	r23, 0x0D	; 13
   12410:	c7 01       	movw	r24, r14
   12412:	0e 94 38 32 	call	0x6470	; 0x6470 <MATCHI>
   12416:	89 2b       	or	r24, r25
   12418:	29 f1       	breq	.+74     	; 0x12464 <gpib_tests+0xb4>
    {
        ptr = argv[ind];
   1241a:	fe 01       	movw	r30, r28
   1241c:	ee 0f       	add	r30, r30
   1241e:	ff 1f       	adc	r31, r31
   12420:	ec 0d       	add	r30, r12
   12422:	fd 1d       	adc	r31, r13
        if(*ptr == '=')
   12424:	01 90       	ld	r0, Z+
   12426:	f0 81       	ld	r31, Z
   12428:	e0 2d       	mov	r30, r0
   1242a:	80 81       	ld	r24, Z
   1242c:	8d 33       	cpi	r24, 0x3D	; 61
   1242e:	09 f4       	brne	.+2      	; 0x12432 <gpib_tests+0x82>
            ++ind;
   12430:	21 96       	adiw	r28, 0x01	; 1
        debuglevel = get_value(argv[ind]);
   12432:	cc 0f       	add	r28, r28
   12434:	dd 1f       	adc	r29, r29
   12436:	cc 0d       	add	r28, r12
   12438:	dd 1d       	adc	r29, r13
   1243a:	88 81       	ld	r24, Y
   1243c:	99 81       	ldd	r25, Y+1	; 0x01
   1243e:	0e 94 2f 33 	call	0x665e	; 0x665e <get_value>
   12442:	70 93 b7 01 	sts	0x01B7, r23	; 0x8001b7 <debuglevel+0x1>
   12446:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <debuglevel>
        printf("debug=%04XH\n", debuglevel);
   1244a:	ed b7       	in	r30, 0x3d	; 61
   1244c:	fe b7       	in	r31, 0x3e	; 62
   1244e:	75 83       	std	Z+5, r23	; 0x05
   12450:	64 83       	std	Z+4, r22	; 0x04
   12452:	8d ed       	ldi	r24, 0xDD	; 221
   12454:	94 e1       	ldi	r25, 0x14	; 20
   12456:	a0 e0       	ldi	r26, 0x00	; 0
   12458:	81 83       	std	Z+1, r24	; 0x01
   1245a:	92 83       	std	Z+2, r25	; 0x02
   1245c:	a3 83       	std	Z+3, r26	; 0x03
   1245e:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   12462:	a1 c0       	rjmp	.+322    	; 0x125a6 <gpib_tests+0x1f6>
        return(1);
    }

    if (MATCHI(ptr,"mount") )
   12464:	62 eb       	ldi	r22, 0xB2	; 178
   12466:	7d e0       	ldi	r23, 0x0D	; 13
   12468:	c7 01       	movw	r24, r14
   1246a:	0e 94 38 32 	call	0x6470	; 0x6470 <MATCHI>
   1246e:	89 2b       	or	r24, r25
   12470:	49 f0       	breq	.+18     	; 0x12484 <gpib_tests+0xd4>
    {
		if(!mount(argc, argv))
   12472:	b6 01       	movw	r22, r12
   12474:	c5 01       	movw	r24, r10
   12476:	0e 94 76 a2 	call	0x144ec	; 0x144ec <mount>
   1247a:	81 11       	cpse	r24, r1
   1247c:	94 c0       	rjmp	.+296    	; 0x125a6 <gpib_tests+0x1f6>
			return(-1);
   1247e:	8f ef       	ldi	r24, 0xFF	; 255
   12480:	9f ef       	ldi	r25, 0xFF	; 255
   12482:	93 c0       	rjmp	.+294    	; 0x125aa <gpib_tests+0x1fa>
		return(1);
    }
    if (MATCHI(ptr,"umount") )
   12484:	61 eb       	ldi	r22, 0xB1	; 177
   12486:	7d e0       	ldi	r23, 0x0D	; 13
   12488:	c7 01       	movw	r24, r14
   1248a:	0e 94 38 32 	call	0x6470	; 0x6470 <MATCHI>
   1248e:	89 2b       	or	r24, r25
   12490:	29 f0       	breq	.+10     	; 0x1249c <gpib_tests+0xec>
    {
		if(!umount(argc, argv))
   12492:	b6 01       	movw	r22, r12
   12494:	c5 01       	movw	r24, r10
   12496:	0e 94 bc 9c 	call	0x13978	; 0x13978 <umount>
   1249a:	ef cf       	rjmp	.-34     	; 0x1247a <gpib_tests+0xca>
			return(-1);
		return(1);
	}

    if (MATCHI(ptr,"addresses") )
   1249c:	68 eb       	ldi	r22, 0xB8	; 184
   1249e:	7d e0       	ldi	r23, 0x0D	; 13
   124a0:	c7 01       	movw	r24, r14
   124a2:	0e 94 38 32 	call	0x6470	; 0x6470 <MATCHI>
   124a6:	89 2b       	or	r24, r25
   124a8:	c9 f0       	breq	.+50     	; 0x124dc <gpib_tests+0x12c>
    {
        ptr = argv[ind];
   124aa:	cc 0f       	add	r28, r28
   124ac:	dd 1f       	adc	r29, r29
   124ae:	cc 0d       	add	r28, r12
   124b0:	dd 1d       	adc	r29, r13
   124b2:	88 81       	ld	r24, Y
   124b4:	99 81       	ldd	r25, Y+1	; 0x01
        if(ptr && *ptr && MATCH(ptr,"-v"))
   124b6:	00 97       	sbiw	r24, 0x00	; 0
   124b8:	69 f0       	breq	.+26     	; 0x124d4 <gpib_tests+0x124>
   124ba:	fc 01       	movw	r30, r24
   124bc:	20 81       	ld	r18, Z
   124be:	22 23       	and	r18, r18
   124c0:	49 f0       	breq	.+18     	; 0x124d4 <gpib_tests+0x124>
   124c2:	62 ec       	ldi	r22, 0xC2	; 194
   124c4:	7d e0       	ldi	r23, 0x0D	; 13
   124c6:	0e 94 24 32 	call	0x6448	; 0x6448 <MATCH>
   124ca:	89 2b       	or	r24, r25
   124cc:	19 f0       	breq	.+6      	; 0x124d4 <gpib_tests+0x124>
            display_Addresses(1);
   124ce:	81 e0       	ldi	r24, 0x01	; 1
   124d0:	90 e0       	ldi	r25, 0x00	; 0
   124d2:	02 c0       	rjmp	.+4      	; 0x124d8 <gpib_tests+0x128>
        else
            display_Addresses(0);
   124d4:	80 e0       	ldi	r24, 0x00	; 0
   124d6:	90 e0       	ldi	r25, 0x00	; 0
   124d8:	47 d1       	rcall	.+654    	; 0x12768 <display_Addresses>
   124da:	65 c0       	rjmp	.+202    	; 0x125a6 <gpib_tests+0x1f6>
        return(1);
    }

    if (MATCHI(ptr,"config") )
   124dc:	65 ec       	ldi	r22, 0xC5	; 197
   124de:	7d e0       	ldi	r23, 0x0D	; 13
   124e0:	c7 01       	movw	r24, r14
   124e2:	0e 94 38 32 	call	0x6470	; 0x6470 <MATCHI>
   124e6:	89 2b       	or	r24, r25
   124e8:	c9 f0       	breq	.+50     	; 0x1251c <gpib_tests+0x16c>
    {
        ptr = argv[ind];
   124ea:	cc 0f       	add	r28, r28
   124ec:	dd 1f       	adc	r29, r29
   124ee:	cc 0d       	add	r28, r12
   124f0:	dd 1d       	adc	r29, r13
   124f2:	88 81       	ld	r24, Y
   124f4:	99 81       	ldd	r25, Y+1	; 0x01
        if(ptr && *ptr && MATCH(ptr,"-v"))
   124f6:	00 97       	sbiw	r24, 0x00	; 0
   124f8:	69 f0       	breq	.+26     	; 0x12514 <gpib_tests+0x164>
   124fa:	fc 01       	movw	r30, r24
   124fc:	20 81       	ld	r18, Z
   124fe:	22 23       	and	r18, r18
   12500:	49 f0       	breq	.+18     	; 0x12514 <gpib_tests+0x164>
   12502:	62 ec       	ldi	r22, 0xC2	; 194
   12504:	7d e0       	ldi	r23, 0x0D	; 13
   12506:	0e 94 24 32 	call	0x6448	; 0x6448 <MATCH>
   1250a:	89 2b       	or	r24, r25
   1250c:	19 f0       	breq	.+6      	; 0x12514 <gpib_tests+0x164>
            display_Config(1);
   1250e:	81 e0       	ldi	r24, 0x01	; 1
   12510:	90 e0       	ldi	r25, 0x00	; 0
   12512:	02 c0       	rjmp	.+4      	; 0x12518 <gpib_tests+0x168>
        else
            display_Config(0);
   12514:	80 e0       	ldi	r24, 0x00	; 0
   12516:	90 e0       	ldi	r25, 0x00	; 0
   12518:	fb d1       	rcall	.+1014   	; 0x12910 <display_Config>
   1251a:	45 c0       	rjmp	.+138    	; 0x125a6 <gpib_tests+0x1f6>
        return(1);
    }

    if (MATCHI(ptr,"elapsed_reset") )
   1251c:	6c ec       	ldi	r22, 0xCC	; 204
   1251e:	7d e0       	ldi	r23, 0x0D	; 13
   12520:	c7 01       	movw	r24, r14
   12522:	0e 94 38 32 	call	0x6470	; 0x6470 <MATCHI>
   12526:	89 2b       	or	r24, r25
   12528:	19 f0       	breq	.+6      	; 0x12530 <gpib_tests+0x180>
    {
        gpib_timer_elapsed_begin();
   1252a:	0e 94 52 85 	call	0x10aa4	; 0x10aa4 <gpib_timer_elapsed_begin>
   1252e:	3b c0       	rjmp	.+118    	; 0x125a6 <gpib_tests+0x1f6>
        return(1);
    }

    if (MATCHI(ptr,"elapsed") )
   12530:	6a ed       	ldi	r22, 0xDA	; 218
   12532:	7d e0       	ldi	r23, 0x0D	; 13
   12534:	c7 01       	movw	r24, r14
   12536:	0e 94 38 32 	call	0x6470	; 0x6470 <MATCHI>
   1253a:	89 2b       	or	r24, r25
   1253c:	29 f0       	breq	.+10     	; 0x12548 <gpib_tests+0x198>
    {
        gpib_timer_elapsed_end("gpib elapsed:");
   1253e:	82 ee       	ldi	r24, 0xE2	; 226
   12540:	9d e0       	ldi	r25, 0x0D	; 13
   12542:	0e 94 64 85 	call	0x10ac8	; 0x10ac8 <gpib_timer_elapsed_end>
   12546:	2f c0       	rjmp	.+94     	; 0x125a6 <gpib_tests+0x1f6>
        return(1);
    }

    if (MATCHI(ptr,"task") )
   12548:	60 ef       	ldi	r22, 0xF0	; 240
   1254a:	7d e0       	ldi	r23, 0x0D	; 13
   1254c:	c7 01       	movw	r24, r14
   1254e:	0e 94 38 32 	call	0x6470	; 0x6470 <MATCHI>
   12552:	89 2b       	or	r24, r25
    {
        gpib_task();
   12554:	11 f0       	breq	.+4      	; 0x1255a <gpib_tests+0x1aa>
   12556:	ab de       	rcall	.-682    	; 0x122ae <gpib_task>
   12558:	26 c0       	rjmp	.+76     	; 0x125a6 <gpib_tests+0x1f6>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
   1255a:	8e 01       	movw	r16, r28
   1255c:	0f 5f       	subi	r16, 0xFF	; 255
   1255e:	1f 4f       	sbci	r17, 0xFF	; 255
   12560:	95 01       	movw	r18, r10
   12562:	a8 01       	movw	r20, r16
   12564:	65 ef       	ldi	r22, 0xF5	; 245
   12566:	7d e0       	ldi	r23, 0x0D	; 13
   12568:	c7 01       	movw	r24, r14
   1256a:	0e 94 4c 32 	call	0x6498	; 0x6498 <MATCHARGS>
   1256e:	89 2b       	or	r24, r25
   12570:	09 f4       	brne	.+2      	; 0x12574 <gpib_tests+0x1c4>
   12572:	2a cf       	rjmp	.-428    	; 0x123c8 <gpib_tests+0x18>
    {
        int detail = 0;
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
   12574:	00 0f       	add	r16, r16
   12576:	11 1f       	adc	r17, r17
   12578:	e6 01       	movw	r28, r12
   1257a:	c0 0f       	add	r28, r16
   1257c:	d1 1f       	adc	r29, r17
   1257e:	88 81       	ld	r24, Y
   12580:	99 81       	ldd	r25, Y+1	; 0x01
   12582:	00 97       	sbiw	r24, 0x00	; 0
   12584:	51 f0       	breq	.+20     	; 0x1259a <gpib_tests+0x1ea>
   12586:	6b ef       	ldi	r22, 0xFB	; 251
   12588:	7d e0       	ldi	r23, 0x0D	; 13
   1258a:	0e 94 24 32 	call	0x6448	; 0x6448 <MATCH>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
    {
        int detail = 0;
   1258e:	61 e0       	ldi	r22, 0x01	; 1
   12590:	70 e0       	ldi	r23, 0x00	; 0
   12592:	89 2b       	or	r24, r25
   12594:	21 f4       	brne	.+8      	; 0x1259e <gpib_tests+0x1ee>
   12596:	60 e0       	ldi	r22, 0x00	; 0
   12598:	02 c0       	rjmp	.+4      	; 0x1259e <gpib_tests+0x1ee>
   1259a:	60 e0       	ldi	r22, 0x00	; 0
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
            detail = 1;
        gpib_trace_task(argv[ind], detail);
   1259c:	70 e0       	ldi	r23, 0x00	; 0
   1259e:	22 97       	sbiw	r28, 0x02	; 2
   125a0:	88 81       	ld	r24, Y
   125a2:	99 81       	ldd	r25, Y+1	; 0x01
   125a4:	22 da       	rcall	.-3004   	; 0x119ea <gpib_trace_task>
        return(1);
   125a6:	81 e0       	ldi	r24, 0x01	; 1
   125a8:	90 e0       	ldi	r25, 0x00	; 0

    }                                             // port write
#endif                                        // #ifdef GPIB_EXTENDED_TESTS

    return(0);
}
   125aa:	cd b7       	in	r28, 0x3d	; 61
   125ac:	de b7       	in	r29, 0x3e	; 62
   125ae:	25 96       	adiw	r28, 0x05	; 5
   125b0:	ea e0       	ldi	r30, 0x0A	; 10
   125b2:	0c 94 df e6 	jmp	0x1cdbe	; 0x1cdbe <__epilogue_restores__+0x10>

000125b6 <tok_index>:

	if(index_ppr(ppr) == -1)
		return(1);
	printf("WARNING PPR (%d) already in use\n", (int)ppr);
	return(0);
}
   125b6:	0f 93       	push	r16
   125b8:	1f 93       	push	r17
   125ba:	cf 93       	push	r28
   125bc:	8c 01       	movw	r16, r24
   125be:	c0 e0       	ldi	r28, 0x00	; 0
   125c0:	24 e0       	ldi	r18, 0x04	; 4
   125c2:	c2 02       	muls	r28, r18
   125c4:	f0 01       	movw	r30, r0
   125c6:	11 24       	eor	r1, r1
   125c8:	ec 53       	subi	r30, 0x3C	; 60
   125ca:	fe 4f       	sbci	r31, 0xFE	; 254
   125cc:	82 81       	ldd	r24, Z+2	; 0x02
   125ce:	93 81       	ldd	r25, Z+3	; 0x03
   125d0:	01 96       	adiw	r24, 0x01	; 1
   125d2:	49 f0       	breq	.+18     	; 0x125e6 <tok_index+0x30>
   125d4:	60 81       	ld	r22, Z
   125d6:	71 81       	ldd	r23, Z+1	; 0x01
   125d8:	c8 01       	movw	r24, r16
   125da:	0e 94 38 32 	call	0x6470	; 0x6470 <MATCHI>
   125de:	89 2b       	or	r24, r25
   125e0:	21 f4       	brne	.+8      	; 0x125ea <tok_index+0x34>
   125e2:	cf 5f       	subi	r28, 0xFF	; 255
   125e4:	ed cf       	rjmp	.-38     	; 0x125c0 <tok_index+0xa>
   125e6:	8f ef       	ldi	r24, 0xFF	; 255
   125e8:	01 c0       	rjmp	.+2      	; 0x125ec <tok_index+0x36>
   125ea:	8c 2f       	mov	r24, r28
   125ec:	cf 91       	pop	r28
   125ee:	1f 91       	pop	r17
   125f0:	0f 91       	pop	r16
   125f2:	08 95       	ret

000125f4 <tok_name>:
   125f4:	e4 ec       	ldi	r30, 0xC4	; 196
   125f6:	f1 e0       	ldi	r31, 0x01	; 1
   125f8:	20 e0       	ldi	r18, 0x00	; 0
   125fa:	30 e0       	ldi	r19, 0x00	; 0
   125fc:	90 e0       	ldi	r25, 0x00	; 0
   125fe:	42 81       	ldd	r20, Z+2	; 0x02
   12600:	53 81       	ldd	r21, Z+3	; 0x03
   12602:	4f 3f       	cpi	r20, 0xFF	; 255
   12604:	6f ef       	ldi	r22, 0xFF	; 255
   12606:	56 07       	cpc	r21, r22
   12608:	89 f0       	breq	.+34     	; 0x1262c <tok_name+0x38>
   1260a:	34 96       	adiw	r30, 0x04	; 4
   1260c:	48 17       	cp	r20, r24
   1260e:	59 07       	cpc	r21, r25
   12610:	51 f4       	brne	.+20     	; 0x12626 <tok_name+0x32>
   12612:	22 0f       	add	r18, r18
   12614:	33 1f       	adc	r19, r19
   12616:	22 0f       	add	r18, r18
   12618:	33 1f       	adc	r19, r19
   1261a:	f9 01       	movw	r30, r18
   1261c:	ec 53       	subi	r30, 0x3C	; 60
   1261e:	fe 4f       	sbci	r31, 0xFE	; 254
   12620:	80 81       	ld	r24, Z
   12622:	91 81       	ldd	r25, Z+1	; 0x01
   12624:	08 95       	ret
   12626:	2f 5f       	subi	r18, 0xFF	; 255
   12628:	3f 4f       	sbci	r19, 0xFF	; 255
   1262a:	e9 cf       	rjmp	.-46     	; 0x125fe <tok_name+0xa>
   1262c:	80 e2       	ldi	r24, 0x20	; 32
   1262e:	9c e0       	ldi	r25, 0x0C	; 12
   12630:	08 95       	ret

00012632 <print_tok_val>:
   12632:	cf 92       	push	r12
   12634:	df 92       	push	r13
   12636:	ef 92       	push	r14
   12638:	ff 92       	push	r15
   1263a:	0f 93       	push	r16
   1263c:	1f 93       	push	r17
   1263e:	cf 93       	push	r28
   12640:	ad b7       	in	r26, 0x3d	; 61
   12642:	be b7       	in	r27, 0x3e	; 62
   12644:	1d 97       	sbiw	r26, 0x0d	; 13
   12646:	0f b6       	in	r0, 0x3f	; 63
   12648:	f8 94       	cli
   1264a:	be bf       	out	0x3e, r27	; 62
   1264c:	0f be       	out	0x3f, r0	; 63
   1264e:	ad bf       	out	0x3d, r26	; 61
   12650:	c6 2f       	mov	r28, r22
   12652:	69 01       	movw	r12, r18
   12654:	7a 01       	movw	r14, r20
   12656:	ce df       	rcall	.-100    	; 0x125f4 <tok_name>
   12658:	8c 01       	movw	r16, r24
   1265a:	cc 23       	and	r28, r28
   1265c:	31 f0       	breq	.+12     	; 0x1266a <print_tok_val+0x38>
   1265e:	80 e2       	ldi	r24, 0x20	; 32
   12660:	90 e0       	ldi	r25, 0x00	; 0
   12662:	0e 94 3c 76 	call	0xec78	; 0xec78 <putchar>
   12666:	c1 50       	subi	r28, 0x01	; 1
   12668:	f8 cf       	rjmp	.-16     	; 0x1265a <print_tok_val+0x28>
   1266a:	ed b7       	in	r30, 0x3d	; 61
   1266c:	fe b7       	in	r31, 0x3e	; 62
   1266e:	c2 86       	std	Z+10, r12	; 0x0a
   12670:	d3 86       	std	Z+11, r13	; 0x0b
   12672:	e4 86       	std	Z+12, r14	; 0x0c
   12674:	f5 86       	std	Z+13, r15	; 0x0d
   12676:	c6 82       	std	Z+6, r12	; 0x06
   12678:	d7 82       	std	Z+7, r13	; 0x07
   1267a:	e0 86       	std	Z+8, r14	; 0x08
   1267c:	f1 86       	std	Z+9, r15	; 0x09
   1267e:	15 83       	std	Z+5, r17	; 0x05
   12680:	04 83       	std	Z+4, r16	; 0x04
   12682:	8b eb       	ldi	r24, 0xBB	; 187
   12684:	90 e2       	ldi	r25, 0x20	; 32
   12686:	a0 e0       	ldi	r26, 0x00	; 0
   12688:	81 83       	std	Z+1, r24	; 0x01
   1268a:	92 83       	std	Z+2, r25	; 0x02
   1268c:	a3 83       	std	Z+3, r26	; 0x03
   1268e:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   12692:	ad b7       	in	r26, 0x3d	; 61
   12694:	be b7       	in	r27, 0x3e	; 62
   12696:	1d 96       	adiw	r26, 0x0d	; 13
   12698:	0f b6       	in	r0, 0x3f	; 63
   1269a:	f8 94       	cli
   1269c:	be bf       	out	0x3e, r27	; 62
   1269e:	0f be       	out	0x3f, r0	; 63
   126a0:	ad bf       	out	0x3d, r26	; 61
   126a2:	cf 91       	pop	r28
   126a4:	1f 91       	pop	r17
   126a6:	0f 91       	pop	r16
   126a8:	ff 90       	pop	r15
   126aa:	ef 90       	pop	r14
   126ac:	df 90       	pop	r13
   126ae:	cf 90       	pop	r12
   126b0:	08 95       	ret

000126b2 <print_tok_str>:
   126b2:	ef 92       	push	r14
   126b4:	ff 92       	push	r15
   126b6:	0f 93       	push	r16
   126b8:	1f 93       	push	r17
   126ba:	cf 93       	push	r28
   126bc:	ad b7       	in	r26, 0x3d	; 61
   126be:	be b7       	in	r27, 0x3e	; 62
   126c0:	17 97       	sbiw	r26, 0x07	; 7
   126c2:	0f b6       	in	r0, 0x3f	; 63
   126c4:	f8 94       	cli
   126c6:	be bf       	out	0x3e, r27	; 62
   126c8:	0f be       	out	0x3f, r0	; 63
   126ca:	ad bf       	out	0x3d, r26	; 61
   126cc:	c6 2f       	mov	r28, r22
   126ce:	7a 01       	movw	r14, r20
   126d0:	91 df       	rcall	.-222    	; 0x125f4 <tok_name>
   126d2:	8c 01       	movw	r16, r24
   126d4:	cc 23       	and	r28, r28
   126d6:	31 f0       	breq	.+12     	; 0x126e4 <print_tok_str+0x32>
   126d8:	80 e2       	ldi	r24, 0x20	; 32
   126da:	90 e0       	ldi	r25, 0x00	; 0
   126dc:	0e 94 3c 76 	call	0xec78	; 0xec78 <putchar>
   126e0:	c1 50       	subi	r28, 0x01	; 1
   126e2:	f8 cf       	rjmp	.-16     	; 0x126d4 <print_tok_str+0x22>
   126e4:	ed b7       	in	r30, 0x3d	; 61
   126e6:	fe b7       	in	r31, 0x3e	; 62
   126e8:	f7 82       	std	Z+7, r15	; 0x07
   126ea:	e6 82       	std	Z+6, r14	; 0x06
   126ec:	15 83       	std	Z+5, r17	; 0x05
   126ee:	04 83       	std	Z+4, r16	; 0x04
   126f0:	8f ea       	ldi	r24, 0xAF	; 175
   126f2:	90 e2       	ldi	r25, 0x20	; 32
   126f4:	a0 e0       	ldi	r26, 0x00	; 0
   126f6:	81 83       	std	Z+1, r24	; 0x01
   126f8:	92 83       	std	Z+2, r25	; 0x02
   126fa:	a3 83       	std	Z+3, r26	; 0x03
   126fc:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   12700:	ad b7       	in	r26, 0x3d	; 61
   12702:	be b7       	in	r27, 0x3e	; 62
   12704:	17 96       	adiw	r26, 0x07	; 7
   12706:	0f b6       	in	r0, 0x3f	; 63
   12708:	f8 94       	cli
   1270a:	be bf       	out	0x3e, r27	; 62
   1270c:	0f be       	out	0x3f, r0	; 63
   1270e:	ad bf       	out	0x3d, r26	; 61
   12710:	cf 91       	pop	r28
   12712:	1f 91       	pop	r17
   12714:	0f 91       	pop	r16
   12716:	ff 90       	pop	r15
   12718:	ef 90       	pop	r14
   1271a:	08 95       	ret

0001271c <print_tok>:
   1271c:	0f 93       	push	r16
   1271e:	1f 93       	push	r17
   12720:	cf 93       	push	r28
   12722:	00 d0       	rcall	.+0      	; 0x12724 <print_tok+0x8>
   12724:	00 d0       	rcall	.+0      	; 0x12726 <print_tok+0xa>
   12726:	1f 92       	push	r1
   12728:	c6 2f       	mov	r28, r22
   1272a:	64 df       	rcall	.-312    	; 0x125f4 <tok_name>
   1272c:	8c 01       	movw	r16, r24
   1272e:	cc 23       	and	r28, r28
   12730:	31 f0       	breq	.+12     	; 0x1273e <print_tok+0x22>
   12732:	80 e2       	ldi	r24, 0x20	; 32
   12734:	90 e0       	ldi	r25, 0x00	; 0
   12736:	0e 94 3c 76 	call	0xec78	; 0xec78 <putchar>
   1273a:	c1 50       	subi	r28, 0x01	; 1
   1273c:	f8 cf       	rjmp	.-16     	; 0x1272e <print_tok+0x12>
   1273e:	ed b7       	in	r30, 0x3d	; 61
   12740:	fe b7       	in	r31, 0x3e	; 62
   12742:	15 83       	std	Z+5, r17	; 0x05
   12744:	04 83       	std	Z+4, r16	; 0x04
   12746:	8b ea       	ldi	r24, 0xAB	; 171
   12748:	90 e2       	ldi	r25, 0x20	; 32
   1274a:	a0 e0       	ldi	r26, 0x00	; 0
   1274c:	81 83       	std	Z+1, r24	; 0x01
   1274e:	92 83       	std	Z+2, r25	; 0x02
   12750:	a3 83       	std	Z+3, r26	; 0x03
   12752:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   12756:	0f 90       	pop	r0
   12758:	0f 90       	pop	r0
   1275a:	0f 90       	pop	r0
   1275c:	0f 90       	pop	r0
   1275e:	0f 90       	pop	r0
   12760:	cf 91       	pop	r28
   12762:	1f 91       	pop	r17
   12764:	0f 91       	pop	r16
   12766:	08 95       	ret

00012768 <display_Addresses>:
   12768:	2f 92       	push	r2
   1276a:	3f 92       	push	r3
   1276c:	4f 92       	push	r4
   1276e:	6f 92       	push	r6
   12770:	7f 92       	push	r7
   12772:	8f 92       	push	r8
   12774:	cf 92       	push	r12
   12776:	df 92       	push	r13
   12778:	ef 92       	push	r14
   1277a:	0f 93       	push	r16
   1277c:	1f 93       	push	r17
   1277e:	cf 93       	push	r28
   12780:	df 93       	push	r29
   12782:	cd b7       	in	r28, 0x3d	; 61
   12784:	de b7       	in	r29, 0x3e	; 62
   12786:	2a 97       	sbiw	r28, 0x0a	; 10
   12788:	0f b6       	in	r0, 0x3f	; 63
   1278a:	f8 94       	cli
   1278c:	de bf       	out	0x3e, r29	; 62
   1278e:	0f be       	out	0x3f, r0	; 63
   12790:	cd bf       	out	0x3d, r28	; 61
   12792:	85 e7       	ldi	r24, 0x75	; 117
   12794:	9d e1       	ldi	r25, 0x1D	; 29
   12796:	a0 e0       	ldi	r26, 0x00	; 0
   12798:	ed b7       	in	r30, 0x3d	; 61
   1279a:	fe b7       	in	r31, 0x3e	; 62
   1279c:	81 83       	std	Z+1, r24	; 0x01
   1279e:	92 83       	std	Z+2, r25	; 0x02
   127a0:	a3 83       	std	Z+3, r26	; 0x03
   127a2:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   127a6:	04 ef       	ldi	r16, 0xF4	; 244
   127a8:	1e e1       	ldi	r17, 0x1E	; 30
   127aa:	87 e5       	ldi	r24, 0x57	; 87
   127ac:	9d e1       	ldi	r25, 0x1D	; 29
   127ae:	6c 01       	movw	r12, r24
   127b0:	e1 2c       	mov	r14, r1
   127b2:	89 e5       	ldi	r24, 0x59	; 89
   127b4:	9d e1       	ldi	r25, 0x1D	; 29
   127b6:	3c 01       	movw	r6, r24
   127b8:	81 2c       	mov	r8, r1
   127ba:	82 e6       	ldi	r24, 0x62	; 98
   127bc:	9d e1       	ldi	r25, 0x1D	; 29
   127be:	1c 01       	movw	r2, r24
   127c0:	41 2c       	mov	r4, r1
   127c2:	8c e6       	ldi	r24, 0x6C	; 108
   127c4:	9d e1       	ldi	r25, 0x1D	; 29
   127c6:	9c 01       	movw	r18, r24
   127c8:	40 e0       	ldi	r20, 0x00	; 0
   127ca:	2e 83       	std	Y+6, r18	; 0x06
   127cc:	3f 83       	std	Y+7, r19	; 0x07
   127ce:	48 87       	std	Y+8, r20	; 0x08
   127d0:	f8 01       	movw	r30, r16
   127d2:	80 81       	ld	r24, Z
   127d4:	88 23       	and	r24, r24
   127d6:	09 f4       	brne	.+2      	; 0x127da <display_Addresses+0x72>
   127d8:	76 c0       	rjmp	.+236    	; 0x128c6 <display_Addresses+0x15e>
   127da:	83 30       	cpi	r24, 0x03	; 3
   127dc:	21 f0       	breq	.+8      	; 0x127e6 <display_Addresses+0x7e>
   127de:	81 30       	cpi	r24, 0x01	; 1
   127e0:	09 f0       	breq	.+2      	; 0x127e4 <display_Addresses+0x7c>
   127e2:	57 c0       	rjmp	.+174    	; 0x12892 <display_Addresses+0x12a>
   127e4:	1f c0       	rjmp	.+62     	; 0x12824 <display_Addresses+0xbc>
   127e6:	f8 01       	movw	r30, r16
   127e8:	87 81       	ldd	r24, Z+7	; 0x07
   127ea:	90 85       	ldd	r25, Z+8	; 0x08
   127ec:	90 93 69 19 	sts	0x1969, r25	; 0x801969 <SS80p+0x1>
   127f0:	80 93 68 19 	sts	0x1968, r24	; 0x801968 <SS80p>
   127f4:	fc 01       	movw	r30, r24
   127f6:	84 81       	ldd	r24, Z+4	; 0x04
   127f8:	95 81       	ldd	r25, Z+5	; 0x05
   127fa:	ed b7       	in	r30, 0x3d	; 61
   127fc:	fe b7       	in	r31, 0x3e	; 62
   127fe:	95 83       	std	Z+5, r25	; 0x05
   12800:	84 83       	std	Z+4, r24	; 0x04
   12802:	2e 81       	ldd	r18, Y+6	; 0x06
   12804:	3f 81       	ldd	r19, Y+7	; 0x07
   12806:	48 85       	ldd	r20, Y+8	; 0x08
   12808:	21 83       	std	Z+1, r18	; 0x01
   1280a:	32 83       	std	Z+2, r19	; 0x02
   1280c:	43 83       	std	Z+3, r20	; 0x03
   1280e:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   12812:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   12816:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   1281a:	42 81       	ldd	r20, Z+2	; 0x02
   1281c:	53 81       	ldd	r21, Z+3	; 0x03
   1281e:	64 e0       	ldi	r22, 0x04	; 4
   12820:	82 e1       	ldi	r24, 0x12	; 18
   12822:	47 df       	rcall	.-370    	; 0x126b2 <print_tok_str>
   12824:	f8 01       	movw	r30, r16
   12826:	80 81       	ld	r24, Z
   12828:	81 30       	cpi	r24, 0x01	; 1
   1282a:	d9 f4       	brne	.+54     	; 0x12862 <display_Addresses+0xfa>
   1282c:	87 81       	ldd	r24, Z+7	; 0x07
   1282e:	90 85       	ldd	r25, Z+8	; 0x08
   12830:	90 93 65 19 	sts	0x1965, r25	; 0x801965 <AMIGOp+0x1>
   12834:	80 93 64 19 	sts	0x1964, r24	; 0x801964 <AMIGOp>
   12838:	fc 01       	movw	r30, r24
   1283a:	84 81       	ldd	r24, Z+4	; 0x04
   1283c:	95 81       	ldd	r25, Z+5	; 0x05
   1283e:	ed b7       	in	r30, 0x3d	; 61
   12840:	fe b7       	in	r31, 0x3e	; 62
   12842:	95 83       	std	Z+5, r25	; 0x05
   12844:	84 83       	std	Z+4, r24	; 0x04
   12846:	21 82       	std	Z+1, r2	; 0x01
   12848:	32 82       	std	Z+2, r3	; 0x02
   1284a:	43 82       	std	Z+3, r4	; 0x03
   1284c:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   12850:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   12854:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   12858:	42 81       	ldd	r20, Z+2	; 0x02
   1285a:	53 81       	ldd	r21, Z+3	; 0x03
   1285c:	64 e0       	ldi	r22, 0x04	; 4
   1285e:	82 e1       	ldi	r24, 0x12	; 18
   12860:	28 df       	rcall	.-432    	; 0x126b2 <print_tok_str>
   12862:	f8 01       	movw	r30, r16
   12864:	21 81       	ldd	r18, Z+1	; 0x01
   12866:	30 e0       	ldi	r19, 0x00	; 0
   12868:	40 e0       	ldi	r20, 0x00	; 0
   1286a:	50 e0       	ldi	r21, 0x00	; 0
   1286c:	64 e0       	ldi	r22, 0x04	; 4
   1286e:	81 e0       	ldi	r24, 0x01	; 1
   12870:	e0 de       	rcall	.-576    	; 0x12632 <print_tok_val>
   12872:	f8 01       	movw	r30, r16
   12874:	22 81       	ldd	r18, Z+2	; 0x02
   12876:	30 e0       	ldi	r19, 0x00	; 0
   12878:	40 e0       	ldi	r20, 0x00	; 0
   1287a:	50 e0       	ldi	r21, 0x00	; 0
   1287c:	64 e0       	ldi	r22, 0x04	; 4
   1287e:	8f e1       	ldi	r24, 0x1F	; 31
   12880:	d8 de       	rcall	.-592    	; 0x12632 <print_tok_val>
   12882:	f8 01       	movw	r30, r16
   12884:	23 81       	ldd	r18, Z+3	; 0x03
   12886:	34 81       	ldd	r19, Z+4	; 0x04
   12888:	45 81       	ldd	r20, Z+5	; 0x05
   1288a:	56 81       	ldd	r21, Z+6	; 0x06
   1288c:	64 e0       	ldi	r22, 0x04	; 4
   1288e:	83 e0       	ldi	r24, 0x03	; 3
   12890:	d0 de       	rcall	.-608    	; 0x12632 <print_tok_val>
   12892:	f8 01       	movw	r30, r16
   12894:	80 81       	ld	r24, Z
   12896:	84 30       	cpi	r24, 0x04	; 4
   12898:	79 f4       	brne	.+30     	; 0x128b8 <display_Addresses+0x150>
   1289a:	ed b7       	in	r30, 0x3d	; 61
   1289c:	fe b7       	in	r31, 0x3e	; 62
   1289e:	61 82       	std	Z+1, r6	; 0x01
   128a0:	72 82       	std	Z+2, r7	; 0x02
   128a2:	83 82       	std	Z+3, r8	; 0x03
   128a4:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   128a8:	f8 01       	movw	r30, r16
   128aa:	21 81       	ldd	r18, Z+1	; 0x01
   128ac:	30 e0       	ldi	r19, 0x00	; 0
   128ae:	40 e0       	ldi	r20, 0x00	; 0
   128b0:	50 e0       	ldi	r21, 0x00	; 0
   128b2:	64 e0       	ldi	r22, 0x04	; 4
   128b4:	81 e0       	ldi	r24, 0x01	; 1
   128b6:	bd de       	rcall	.-646    	; 0x12632 <print_tok_val>
   128b8:	ed b7       	in	r30, 0x3d	; 61
   128ba:	fe b7       	in	r31, 0x3e	; 62
   128bc:	c1 82       	std	Z+1, r12	; 0x01
   128be:	d2 82       	std	Z+2, r13	; 0x02
   128c0:	e3 82       	std	Z+3, r14	; 0x03
   128c2:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   128c6:	05 5f       	subi	r16, 0xF5	; 245
   128c8:	1f 4f       	sbci	r17, 0xFF	; 255
   128ca:	ff e1       	ldi	r31, 0x1F	; 31
   128cc:	08 37       	cpi	r16, 0x78	; 120
   128ce:	1f 07       	cpc	r17, r31
   128d0:	09 f0       	breq	.+2      	; 0x128d4 <display_Addresses+0x16c>
   128d2:	7e cf       	rjmp	.-260    	; 0x127d0 <display_Addresses+0x68>
   128d4:	85 e5       	ldi	r24, 0x55	; 85
   128d6:	9d e1       	ldi	r25, 0x1D	; 29
   128d8:	a0 e0       	ldi	r26, 0x00	; 0
   128da:	ed b7       	in	r30, 0x3d	; 61
   128dc:	fe b7       	in	r31, 0x3e	; 62
   128de:	81 83       	std	Z+1, r24	; 0x01
   128e0:	92 83       	std	Z+2, r25	; 0x02
   128e2:	a3 83       	std	Z+3, r26	; 0x03
   128e4:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   128e8:	2a 96       	adiw	r28, 0x0a	; 10
   128ea:	0f b6       	in	r0, 0x3f	; 63
   128ec:	f8 94       	cli
   128ee:	de bf       	out	0x3e, r29	; 62
   128f0:	0f be       	out	0x3f, r0	; 63
   128f2:	cd bf       	out	0x3d, r28	; 61
   128f4:	df 91       	pop	r29
   128f6:	cf 91       	pop	r28
   128f8:	1f 91       	pop	r17
   128fa:	0f 91       	pop	r16
   128fc:	ef 90       	pop	r14
   128fe:	df 90       	pop	r13
   12900:	cf 90       	pop	r12
   12902:	8f 90       	pop	r8
   12904:	7f 90       	pop	r7
   12906:	6f 90       	pop	r6
   12908:	4f 90       	pop	r4
   1290a:	3f 90       	pop	r3
   1290c:	2f 90       	pop	r2
   1290e:	08 95       	ret

00012910 <display_Config>:
   12910:	2f 92       	push	r2
   12912:	3f 92       	push	r3
   12914:	4f 92       	push	r4
   12916:	6f 92       	push	r6
   12918:	7f 92       	push	r7
   1291a:	8f 92       	push	r8
   1291c:	af 92       	push	r10
   1291e:	bf 92       	push	r11
   12920:	cf 92       	push	r12
   12922:	df 92       	push	r13
   12924:	ef 92       	push	r14
   12926:	0f 93       	push	r16
   12928:	1f 93       	push	r17
   1292a:	cf 93       	push	r28
   1292c:	df 93       	push	r29
   1292e:	cd b7       	in	r28, 0x3d	; 61
   12930:	de b7       	in	r29, 0x3e	; 62
   12932:	62 97       	sbiw	r28, 0x12	; 18
   12934:	0f b6       	in	r0, 0x3f	; 63
   12936:	f8 94       	cli
   12938:	de bf       	out	0x3e, r29	; 62
   1293a:	0f be       	out	0x3f, r0	; 63
   1293c:	cd bf       	out	0x3d, r28	; 61
   1293e:	5c 01       	movw	r10, r24
   12940:	85 e3       	ldi	r24, 0x35	; 53
   12942:	9d e1       	ldi	r25, 0x1D	; 29
   12944:	a0 e0       	ldi	r26, 0x00	; 0
   12946:	ed b7       	in	r30, 0x3d	; 61
   12948:	fe b7       	in	r31, 0x3e	; 62
   1294a:	81 83       	std	Z+1, r24	; 0x01
   1294c:	92 83       	std	Z+2, r25	; 0x02
   1294e:	a3 83       	std	Z+3, r26	; 0x03
   12950:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   12954:	04 ef       	ldi	r16, 0xF4	; 244
   12956:	1e e1       	ldi	r17, 0x1E	; 30
   12958:	8a eb       	ldi	r24, 0xBA	; 186
   1295a:	9c e1       	ldi	r25, 0x1C	; 28
   1295c:	9c 01       	movw	r18, r24
   1295e:	40 e0       	ldi	r20, 0x00	; 0
   12960:	28 87       	std	Y+8, r18	; 0x08
   12962:	39 87       	std	Y+9, r19	; 0x09
   12964:	4a 87       	std	Y+10, r20	; 0x0a
   12966:	8f ee       	ldi	r24, 0xEF	; 239
   12968:	9c e1       	ldi	r25, 0x1C	; 28
   1296a:	6c 01       	movw	r12, r24
   1296c:	e1 2c       	mov	r14, r1
   1296e:	80 ed       	ldi	r24, 0xD0	; 208
   12970:	9c e1       	ldi	r25, 0x1C	; 28
   12972:	3c 01       	movw	r6, r24
   12974:	81 2c       	mov	r8, r1
   12976:	8c eb       	ldi	r24, 0xBC	; 188
   12978:	9c e1       	ldi	r25, 0x1C	; 28
   1297a:	1c 01       	movw	r2, r24
   1297c:	41 2c       	mov	r4, r1
   1297e:	8c e2       	ldi	r24, 0x2C	; 44
   12980:	9d e1       	ldi	r25, 0x1D	; 29
   12982:	9c 01       	movw	r18, r24
   12984:	40 e0       	ldi	r20, 0x00	; 0
   12986:	2b 87       	std	Y+11, r18	; 0x0b
   12988:	3c 87       	std	Y+12, r19	; 0x0c
   1298a:	4d 87       	std	Y+13, r20	; 0x0d
   1298c:	8d e0       	ldi	r24, 0x0D	; 13
   1298e:	9d e1       	ldi	r25, 0x1D	; 29
   12990:	9c 01       	movw	r18, r24
   12992:	40 e0       	ldi	r20, 0x00	; 0
   12994:	2e 87       	std	Y+14, r18	; 0x0e
   12996:	3f 87       	std	Y+15, r19	; 0x0f
   12998:	48 8b       	std	Y+16, r20	; 0x10
   1299a:	f8 01       	movw	r30, r16
   1299c:	80 81       	ld	r24, Z
   1299e:	88 23       	and	r24, r24
   129a0:	09 f4       	brne	.+2      	; 0x129a4 <display_Config+0x94>
   129a2:	16 c2       	rjmp	.+1068   	; 0x12dd0 <display_Config+0x4c0>
   129a4:	83 30       	cpi	r24, 0x03	; 3
   129a6:	09 f0       	breq	.+2      	; 0x129aa <display_Config+0x9a>
   129a8:	3f c1       	rjmp	.+638    	; 0x12c28 <display_Config+0x318>
   129aa:	27 81       	ldd	r18, Z+7	; 0x07
   129ac:	30 85       	ldd	r19, Z+8	; 0x08
   129ae:	3a 8b       	std	Y+18, r19	; 0x12
   129b0:	29 8b       	std	Y+17, r18	; 0x11
   129b2:	f9 01       	movw	r30, r18
   129b4:	84 81       	ldd	r24, Z+4	; 0x04
   129b6:	95 81       	ldd	r25, Z+5	; 0x05
   129b8:	ed b7       	in	r30, 0x3d	; 61
   129ba:	fe b7       	in	r31, 0x3e	; 62
   129bc:	95 83       	std	Z+5, r25	; 0x05
   129be:	84 83       	std	Z+4, r24	; 0x04
   129c0:	2b 85       	ldd	r18, Y+11	; 0x0b
   129c2:	3c 85       	ldd	r19, Y+12	; 0x0c
   129c4:	4d 85       	ldd	r20, Y+13	; 0x0d
   129c6:	21 83       	std	Z+1, r18	; 0x01
   129c8:	32 83       	std	Z+2, r19	; 0x02
   129ca:	43 83       	std	Z+3, r20	; 0x03
   129cc:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   129d0:	e9 89       	ldd	r30, Y+17	; 0x11
   129d2:	fa 89       	ldd	r31, Y+18	; 0x12
   129d4:	80 81       	ld	r24, Z
   129d6:	90 e0       	ldi	r25, 0x00	; 0
   129d8:	ed b7       	in	r30, 0x3d	; 61
   129da:	fe b7       	in	r31, 0x3e	; 62
   129dc:	95 83       	std	Z+5, r25	; 0x05
   129de:	84 83       	std	Z+4, r24	; 0x04
   129e0:	2e 85       	ldd	r18, Y+14	; 0x0e
   129e2:	3f 85       	ldd	r19, Y+15	; 0x0f
   129e4:	48 89       	ldd	r20, Y+16	; 0x10
   129e6:	21 83       	std	Z+1, r18	; 0x01
   129e8:	32 83       	std	Z+2, r19	; 0x02
   129ea:	43 83       	std	Z+3, r20	; 0x03
   129ec:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   129f0:	64 e0       	ldi	r22, 0x04	; 4
   129f2:	89 e0       	ldi	r24, 0x09	; 9
   129f4:	93 de       	rcall	.-730    	; 0x1271c <print_tok>
   129f6:	e9 89       	ldd	r30, Y+17	; 0x11
   129f8:	fa 89       	ldd	r31, Y+18	; 0x12
   129fa:	20 81       	ld	r18, Z
   129fc:	30 e0       	ldi	r19, 0x00	; 0
   129fe:	40 e0       	ldi	r20, 0x00	; 0
   12a00:	50 e0       	ldi	r21, 0x00	; 0
   12a02:	68 e0       	ldi	r22, 0x08	; 8
   12a04:	81 e0       	ldi	r24, 0x01	; 1
   12a06:	15 de       	rcall	.-982    	; 0x12632 <print_tok_val>
   12a08:	e9 89       	ldd	r30, Y+17	; 0x11
   12a0a:	fa 89       	ldd	r31, Y+18	; 0x12
   12a0c:	21 81       	ldd	r18, Z+1	; 0x01
   12a0e:	30 e0       	ldi	r19, 0x00	; 0
   12a10:	40 e0       	ldi	r20, 0x00	; 0
   12a12:	50 e0       	ldi	r21, 0x00	; 0
   12a14:	68 e0       	ldi	r22, 0x08	; 8
   12a16:	8f e1       	ldi	r24, 0x1F	; 31
   12a18:	0c de       	rcall	.-1000   	; 0x12632 <print_tok_val>
   12a1a:	e9 89       	ldd	r30, Y+17	; 0x11
   12a1c:	fa 89       	ldd	r31, Y+18	; 0x12
   12a1e:	42 81       	ldd	r20, Z+2	; 0x02
   12a20:	53 81       	ldd	r21, Z+3	; 0x03
   12a22:	68 e0       	ldi	r22, 0x08	; 8
   12a24:	82 e1       	ldi	r24, 0x12	; 18
   12a26:	45 de       	rcall	.-886    	; 0x126b2 <print_tok_str>
   12a28:	64 e0       	ldi	r22, 0x04	; 4
   12a2a:	81 e1       	ldi	r24, 0x11	; 17
   12a2c:	77 de       	rcall	.-786    	; 0x1271c <print_tok>
   12a2e:	64 e0       	ldi	r22, 0x04	; 4
   12a30:	85 e1       	ldi	r24, 0x15	; 21
   12a32:	74 de       	rcall	.-792    	; 0x1271c <print_tok>
   12a34:	e9 89       	ldd	r30, Y+17	; 0x11
   12a36:	fa 89       	ldd	r31, Y+18	; 0x12
   12a38:	26 81       	ldd	r18, Z+6	; 0x06
   12a3a:	37 81       	ldd	r19, Z+7	; 0x07
   12a3c:	40 e0       	ldi	r20, 0x00	; 0
   12a3e:	50 e0       	ldi	r21, 0x00	; 0
   12a40:	68 e0       	ldi	r22, 0x08	; 8
   12a42:	87 e1       	ldi	r24, 0x17	; 23
   12a44:	f6 dd       	rcall	.-1044   	; 0x12632 <print_tok_val>
   12a46:	64 e0       	ldi	r22, 0x04	; 4
   12a48:	81 e1       	ldi	r24, 0x11	; 17
   12a4a:	68 de       	rcall	.-816    	; 0x1271c <print_tok>
   12a4c:	a1 14       	cp	r10, r1
   12a4e:	b1 04       	cpc	r11, r1
   12a50:	09 f1       	breq	.+66     	; 0x12a94 <display_Config+0x184>
   12a52:	64 e0       	ldi	r22, 0x04	; 4
   12a54:	8b e0       	ldi	r24, 0x0B	; 11
   12a56:	62 de       	rcall	.-828    	; 0x1271c <print_tok>
   12a58:	e9 89       	ldd	r30, Y+17	; 0x11
   12a5a:	fa 89       	ldd	r31, Y+18	; 0x12
   12a5c:	20 85       	ldd	r18, Z+8	; 0x08
   12a5e:	31 85       	ldd	r19, Z+9	; 0x09
   12a60:	40 e0       	ldi	r20, 0x00	; 0
   12a62:	50 e0       	ldi	r21, 0x00	; 0
   12a64:	68 e0       	ldi	r22, 0x08	; 8
   12a66:	88 e2       	ldi	r24, 0x28	; 40
   12a68:	e4 dd       	rcall	.-1080   	; 0x12632 <print_tok_val>
   12a6a:	e9 89       	ldd	r30, Y+17	; 0x11
   12a6c:	fa 89       	ldd	r31, Y+18	; 0x12
   12a6e:	22 85       	ldd	r18, Z+10	; 0x0a
   12a70:	33 85       	ldd	r19, Z+11	; 0x0b
   12a72:	40 e0       	ldi	r20, 0x00	; 0
   12a74:	50 e0       	ldi	r21, 0x00	; 0
   12a76:	68 e0       	ldi	r22, 0x08	; 8
   12a78:	85 e2       	ldi	r24, 0x25	; 37
   12a7a:	db dd       	rcall	.-1098   	; 0x12632 <print_tok_val>
   12a7c:	e9 89       	ldd	r30, Y+17	; 0x11
   12a7e:	fa 89       	ldd	r31, Y+18	; 0x12
   12a80:	24 85       	ldd	r18, Z+12	; 0x0c
   12a82:	30 e0       	ldi	r19, 0x00	; 0
   12a84:	40 e0       	ldi	r20, 0x00	; 0
   12a86:	50 e0       	ldi	r21, 0x00	; 0
   12a88:	68 e0       	ldi	r22, 0x08	; 8
   12a8a:	86 e2       	ldi	r24, 0x26	; 38
   12a8c:	d2 dd       	rcall	.-1116   	; 0x12632 <print_tok_val>
   12a8e:	64 e0       	ldi	r22, 0x04	; 4
   12a90:	81 e1       	ldi	r24, 0x11	; 17
   12a92:	44 de       	rcall	.-888    	; 0x1271c <print_tok>
   12a94:	64 e0       	ldi	r22, 0x04	; 4
   12a96:	87 e2       	ldi	r24, 0x27	; 39
   12a98:	41 de       	rcall	.-894    	; 0x1271c <print_tok>
   12a9a:	a1 14       	cp	r10, r1
   12a9c:	b1 04       	cpc	r11, r1
   12a9e:	49 f0       	breq	.+18     	; 0x12ab2 <display_Config+0x1a2>
   12aa0:	e9 89       	ldd	r30, Y+17	; 0x11
   12aa2:	fa 89       	ldd	r31, Y+18	; 0x12
   12aa4:	25 85       	ldd	r18, Z+13	; 0x0d
   12aa6:	30 e0       	ldi	r19, 0x00	; 0
   12aa8:	40 e0       	ldi	r20, 0x00	; 0
   12aaa:	50 e0       	ldi	r21, 0x00	; 0
   12aac:	68 e0       	ldi	r22, 0x08	; 8
   12aae:	89 e2       	ldi	r24, 0x29	; 41
   12ab0:	c0 dd       	rcall	.-1152   	; 0x12632 <print_tok_val>
   12ab2:	e9 89       	ldd	r30, Y+17	; 0x11
   12ab4:	fa 89       	ldd	r31, Y+18	; 0x12
   12ab6:	26 85       	ldd	r18, Z+14	; 0x0e
   12ab8:	37 85       	ldd	r19, Z+15	; 0x0f
   12aba:	40 89       	ldd	r20, Z+16	; 0x10
   12abc:	51 89       	ldd	r21, Z+17	; 0x11
   12abe:	68 e0       	ldi	r22, 0x08	; 8
   12ac0:	8f e0       	ldi	r24, 0x0F	; 15
   12ac2:	b7 dd       	rcall	.-1170   	; 0x12632 <print_tok_val>
   12ac4:	a1 14       	cp	r10, r1
   12ac6:	b1 04       	cpc	r11, r1
   12ac8:	09 f4       	brne	.+2      	; 0x12acc <display_Config+0x1bc>
   12aca:	5a c0       	rjmp	.+180    	; 0x12b80 <display_Config+0x270>
   12acc:	e9 89       	ldd	r30, Y+17	; 0x11
   12ace:	fa 89       	ldd	r31, Y+18	; 0x12
   12ad0:	22 89       	ldd	r18, Z+18	; 0x12
   12ad2:	33 89       	ldd	r19, Z+19	; 0x13
   12ad4:	40 e0       	ldi	r20, 0x00	; 0
   12ad6:	50 e0       	ldi	r21, 0x00	; 0
   12ad8:	68 e0       	ldi	r22, 0x08	; 8
   12ada:	87 e0       	ldi	r24, 0x07	; 7
   12adc:	aa dd       	rcall	.-1196   	; 0x12632 <print_tok_val>
   12ade:	e9 89       	ldd	r30, Y+17	; 0x11
   12ae0:	fa 89       	ldd	r31, Y+18	; 0x12
   12ae2:	24 89       	ldd	r18, Z+20	; 0x14
   12ae4:	30 e0       	ldi	r19, 0x00	; 0
   12ae6:	40 e0       	ldi	r20, 0x00	; 0
   12ae8:	50 e0       	ldi	r21, 0x00	; 0
   12aea:	68 e0       	ldi	r22, 0x08	; 8
   12aec:	85 e0       	ldi	r24, 0x05	; 5
   12aee:	a1 dd       	rcall	.-1214   	; 0x12632 <print_tok_val>
   12af0:	e9 89       	ldd	r30, Y+17	; 0x11
   12af2:	fa 89       	ldd	r31, Y+18	; 0x12
   12af4:	25 89       	ldd	r18, Z+21	; 0x15
   12af6:	30 e0       	ldi	r19, 0x00	; 0
   12af8:	40 e0       	ldi	r20, 0x00	; 0
   12afa:	50 e0       	ldi	r21, 0x00	; 0
   12afc:	68 e0       	ldi	r22, 0x08	; 8
   12afe:	86 e0       	ldi	r24, 0x06	; 6
   12b00:	98 dd       	rcall	.-1232   	; 0x12632 <print_tok_val>
   12b02:	e9 89       	ldd	r30, Y+17	; 0x11
   12b04:	fa 89       	ldd	r31, Y+18	; 0x12
   12b06:	26 89       	ldd	r18, Z+22	; 0x16
   12b08:	37 89       	ldd	r19, Z+23	; 0x17
   12b0a:	40 e0       	ldi	r20, 0x00	; 0
   12b0c:	50 e0       	ldi	r21, 0x00	; 0
   12b0e:	68 e0       	ldi	r22, 0x08	; 8
   12b10:	84 e0       	ldi	r24, 0x04	; 4
   12b12:	8f dd       	rcall	.-1250   	; 0x12632 <print_tok_val>
   12b14:	e9 89       	ldd	r30, Y+17	; 0x11
   12b16:	fa 89       	ldd	r31, Y+18	; 0x12
   12b18:	20 8d       	ldd	r18, Z+24	; 0x18
   12b1a:	31 8d       	ldd	r19, Z+25	; 0x19
   12b1c:	40 e0       	ldi	r20, 0x00	; 0
   12b1e:	50 e0       	ldi	r21, 0x00	; 0
   12b20:	68 e0       	ldi	r22, 0x08	; 8
   12b22:	8a e0       	ldi	r24, 0x0A	; 10
   12b24:	86 dd       	rcall	.-1268   	; 0x12632 <print_tok_val>
   12b26:	e9 89       	ldd	r30, Y+17	; 0x11
   12b28:	fa 89       	ldd	r31, Y+18	; 0x12
   12b2a:	22 8d       	ldd	r18, Z+26	; 0x1a
   12b2c:	33 8d       	ldd	r19, Z+27	; 0x1b
   12b2e:	40 e0       	ldi	r20, 0x00	; 0
   12b30:	50 e0       	ldi	r21, 0x00	; 0
   12b32:	68 e0       	ldi	r22, 0x08	; 8
   12b34:	8e e1       	ldi	r24, 0x1E	; 30
   12b36:	7d dd       	rcall	.-1286   	; 0x12632 <print_tok_val>
   12b38:	e9 89       	ldd	r30, Y+17	; 0x11
   12b3a:	fa 89       	ldd	r31, Y+18	; 0x12
   12b3c:	24 8d       	ldd	r18, Z+28	; 0x1c
   12b3e:	35 8d       	ldd	r19, Z+29	; 0x1d
   12b40:	40 e0       	ldi	r20, 0x00	; 0
   12b42:	50 e0       	ldi	r21, 0x00	; 0
   12b44:	68 e0       	ldi	r22, 0x08	; 8
   12b46:	80 e0       	ldi	r24, 0x00	; 0
   12b48:	74 dd       	rcall	.-1304   	; 0x12632 <print_tok_val>
   12b4a:	e9 89       	ldd	r30, Y+17	; 0x11
   12b4c:	fa 89       	ldd	r31, Y+18	; 0x12
   12b4e:	26 8d       	ldd	r18, Z+30	; 0x1e
   12b50:	30 e0       	ldi	r19, 0x00	; 0
   12b52:	40 e0       	ldi	r20, 0x00	; 0
   12b54:	50 e0       	ldi	r21, 0x00	; 0
   12b56:	68 e0       	ldi	r22, 0x08	; 8
   12b58:	8c e1       	ldi	r24, 0x1C	; 28
   12b5a:	6b dd       	rcall	.-1322   	; 0x12632 <print_tok_val>
   12b5c:	e9 89       	ldd	r30, Y+17	; 0x11
   12b5e:	fa 89       	ldd	r31, Y+18	; 0x12
   12b60:	27 8d       	ldd	r18, Z+31	; 0x1f
   12b62:	30 e0       	ldi	r19, 0x00	; 0
   12b64:	40 e0       	ldi	r20, 0x00	; 0
   12b66:	50 e0       	ldi	r21, 0x00	; 0
   12b68:	68 e0       	ldi	r22, 0x08	; 8
   12b6a:	83 e1       	ldi	r24, 0x13	; 19
   12b6c:	62 dd       	rcall	.-1340   	; 0x12632 <print_tok_val>
   12b6e:	e9 89       	ldd	r30, Y+17	; 0x11
   12b70:	fa 89       	ldd	r31, Y+18	; 0x12
   12b72:	20 a1       	ldd	r18, Z+32	; 0x20
   12b74:	30 e0       	ldi	r19, 0x00	; 0
   12b76:	40 e0       	ldi	r20, 0x00	; 0
   12b78:	50 e0       	ldi	r21, 0x00	; 0
   12b7a:	68 e0       	ldi	r22, 0x08	; 8
   12b7c:	81 e2       	ldi	r24, 0x21	; 33
   12b7e:	59 dd       	rcall	.-1358   	; 0x12632 <print_tok_val>
   12b80:	64 e0       	ldi	r22, 0x04	; 4
   12b82:	81 e1       	ldi	r24, 0x11	; 17
   12b84:	cb dd       	rcall	.-1130   	; 0x1271c <print_tok>
   12b86:	a1 14       	cp	r10, r1
   12b88:	b1 04       	cpc	r11, r1
   12b8a:	99 f1       	breq	.+102    	; 0x12bf2 <display_Config+0x2e2>
   12b8c:	64 e0       	ldi	r22, 0x04	; 4
   12b8e:	8a e2       	ldi	r24, 0x2A	; 42
   12b90:	c5 dd       	rcall	.-1142   	; 0x1271c <print_tok>
   12b92:	e9 89       	ldd	r30, Y+17	; 0x11
   12b94:	fa 89       	ldd	r31, Y+18	; 0x12
   12b96:	21 a1       	ldd	r18, Z+33	; 0x21
   12b98:	32 a1       	ldd	r19, Z+34	; 0x22
   12b9a:	43 a1       	ldd	r20, Z+35	; 0x23
   12b9c:	54 a1       	ldd	r21, Z+36	; 0x24
   12b9e:	68 e0       	ldi	r22, 0x08	; 8
   12ba0:	8a e1       	ldi	r24, 0x1A	; 26
   12ba2:	47 dd       	rcall	.-1394   	; 0x12632 <print_tok_val>
   12ba4:	e9 89       	ldd	r30, Y+17	; 0x11
   12ba6:	fa 89       	ldd	r31, Y+18	; 0x12
   12ba8:	25 a1       	ldd	r18, Z+37	; 0x25
   12baa:	30 e0       	ldi	r19, 0x00	; 0
   12bac:	40 e0       	ldi	r20, 0x00	; 0
   12bae:	50 e0       	ldi	r21, 0x00	; 0
   12bb0:	68 e0       	ldi	r22, 0x08	; 8
   12bb2:	8b e1       	ldi	r24, 0x1B	; 27
   12bb4:	3e dd       	rcall	.-1412   	; 0x12632 <print_tok_val>
   12bb6:	e9 89       	ldd	r30, Y+17	; 0x11
   12bb8:	fa 89       	ldd	r31, Y+18	; 0x12
   12bba:	26 a1       	ldd	r18, Z+38	; 0x26
   12bbc:	37 a1       	ldd	r19, Z+39	; 0x27
   12bbe:	40 e0       	ldi	r20, 0x00	; 0
   12bc0:	50 e0       	ldi	r21, 0x00	; 0
   12bc2:	68 e0       	ldi	r22, 0x08	; 8
   12bc4:	8d e1       	ldi	r24, 0x1D	; 29
   12bc6:	35 dd       	rcall	.-1430   	; 0x12632 <print_tok_val>
   12bc8:	e9 89       	ldd	r30, Y+17	; 0x11
   12bca:	fa 89       	ldd	r31, Y+18	; 0x12
   12bcc:	20 a5       	ldd	r18, Z+40	; 0x28
   12bce:	31 a5       	ldd	r19, Z+41	; 0x29
   12bd0:	42 a5       	ldd	r20, Z+42	; 0x2a
   12bd2:	53 a5       	ldd	r21, Z+43	; 0x2b
   12bd4:	68 e0       	ldi	r22, 0x08	; 8
   12bd6:	89 e1       	ldi	r24, 0x19	; 25
   12bd8:	2c dd       	rcall	.-1448   	; 0x12632 <print_tok_val>
   12bda:	e9 89       	ldd	r30, Y+17	; 0x11
   12bdc:	fa 89       	ldd	r31, Y+18	; 0x12
   12bde:	24 a5       	ldd	r18, Z+44	; 0x2c
   12be0:	30 e0       	ldi	r19, 0x00	; 0
   12be2:	40 e0       	ldi	r20, 0x00	; 0
   12be4:	50 e0       	ldi	r21, 0x00	; 0
   12be6:	68 e0       	ldi	r22, 0x08	; 8
   12be8:	88 e1       	ldi	r24, 0x18	; 24
   12bea:	23 dd       	rcall	.-1466   	; 0x12632 <print_tok_val>
   12bec:	64 e0       	ldi	r22, 0x04	; 4
   12bee:	81 e1       	ldi	r24, 0x11	; 17
   12bf0:	95 dd       	rcall	.-1238   	; 0x1271c <print_tok>
   12bf2:	e9 89       	ldd	r30, Y+17	; 0x11
   12bf4:	fa 89       	ldd	r31, Y+18	; 0x12
   12bf6:	80 a5       	ldd	r24, Z+40	; 0x28
   12bf8:	91 a5       	ldd	r25, Z+41	; 0x29
   12bfa:	a2 a5       	ldd	r26, Z+42	; 0x2a
   12bfc:	b3 a5       	ldd	r27, Z+43	; 0x2b
   12bfe:	01 96       	adiw	r24, 0x01	; 1
   12c00:	a1 1d       	adc	r26, r1
   12c02:	b1 1d       	adc	r27, r1
   12c04:	ed b7       	in	r30, 0x3d	; 61
   12c06:	fe b7       	in	r31, 0x3e	; 62
   12c08:	84 83       	std	Z+4, r24	; 0x04
   12c0a:	95 83       	std	Z+5, r25	; 0x05
   12c0c:	a6 83       	std	Z+6, r26	; 0x06
   12c0e:	b7 83       	std	Z+7, r27	; 0x07
   12c10:	29 ef       	ldi	r18, 0xF9	; 249
   12c12:	3c e1       	ldi	r19, 0x1C	; 28
   12c14:	c9 01       	movw	r24, r18
   12c16:	a0 e0       	ldi	r26, 0x00	; 0
   12c18:	81 83       	std	Z+1, r24	; 0x01
   12c1a:	92 83       	std	Z+2, r25	; 0x02
   12c1c:	a3 83       	std	Z+3, r26	; 0x03
   12c1e:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   12c22:	60 e0       	ldi	r22, 0x00	; 0
   12c24:	81 e1       	ldi	r24, 0x11	; 17
   12c26:	7a dd       	rcall	.-1292   	; 0x1271c <print_tok>
   12c28:	f8 01       	movw	r30, r16
   12c2a:	80 81       	ld	r24, Z
   12c2c:	81 30       	cpi	r24, 0x01	; 1
   12c2e:	09 f0       	breq	.+2      	; 0x12c32 <display_Config+0x322>
   12c30:	a8 c0       	rjmp	.+336    	; 0x12d82 <display_Config+0x472>
   12c32:	27 81       	ldd	r18, Z+7	; 0x07
   12c34:	30 85       	ldd	r19, Z+8	; 0x08
   12c36:	3a 8b       	std	Y+18, r19	; 0x12
   12c38:	29 8b       	std	Y+17, r18	; 0x11
   12c3a:	f9 01       	movw	r30, r18
   12c3c:	84 81       	ldd	r24, Z+4	; 0x04
   12c3e:	95 81       	ldd	r25, Z+5	; 0x05
   12c40:	ed b7       	in	r30, 0x3d	; 61
   12c42:	fe b7       	in	r31, 0x3e	; 62
   12c44:	95 83       	std	Z+5, r25	; 0x05
   12c46:	84 83       	std	Z+4, r24	; 0x04
   12c48:	c1 82       	std	Z+1, r12	; 0x01
   12c4a:	d2 82       	std	Z+2, r13	; 0x02
   12c4c:	e3 82       	std	Z+3, r14	; 0x03
   12c4e:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   12c52:	e9 89       	ldd	r30, Y+17	; 0x11
   12c54:	fa 89       	ldd	r31, Y+18	; 0x12
   12c56:	80 81       	ld	r24, Z
   12c58:	90 e0       	ldi	r25, 0x00	; 0
   12c5a:	ed b7       	in	r30, 0x3d	; 61
   12c5c:	fe b7       	in	r31, 0x3e	; 62
   12c5e:	95 83       	std	Z+5, r25	; 0x05
   12c60:	84 83       	std	Z+4, r24	; 0x04
   12c62:	61 82       	std	Z+1, r6	; 0x01
   12c64:	72 82       	std	Z+2, r7	; 0x02
   12c66:	83 82       	std	Z+3, r8	; 0x03
   12c68:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   12c6c:	64 e0       	ldi	r22, 0x04	; 4
   12c6e:	85 e1       	ldi	r24, 0x15	; 21
   12c70:	55 dd       	rcall	.-1366   	; 0x1271c <print_tok>
   12c72:	e9 89       	ldd	r30, Y+17	; 0x11
   12c74:	fa 89       	ldd	r31, Y+18	; 0x12
   12c76:	20 81       	ld	r18, Z
   12c78:	30 e0       	ldi	r19, 0x00	; 0
   12c7a:	40 e0       	ldi	r20, 0x00	; 0
   12c7c:	50 e0       	ldi	r21, 0x00	; 0
   12c7e:	68 e0       	ldi	r22, 0x08	; 8
   12c80:	81 e0       	ldi	r24, 0x01	; 1
   12c82:	d7 dc       	rcall	.-1618   	; 0x12632 <print_tok_val>
   12c84:	e9 89       	ldd	r30, Y+17	; 0x11
   12c86:	fa 89       	ldd	r31, Y+18	; 0x12
   12c88:	21 81       	ldd	r18, Z+1	; 0x01
   12c8a:	30 e0       	ldi	r19, 0x00	; 0
   12c8c:	40 e0       	ldi	r20, 0x00	; 0
   12c8e:	50 e0       	ldi	r21, 0x00	; 0
   12c90:	68 e0       	ldi	r22, 0x08	; 8
   12c92:	8f e1       	ldi	r24, 0x1F	; 31
   12c94:	ce dc       	rcall	.-1636   	; 0x12632 <print_tok_val>
   12c96:	e9 89       	ldd	r30, Y+17	; 0x11
   12c98:	fa 89       	ldd	r31, Y+18	; 0x12
   12c9a:	42 81       	ldd	r20, Z+2	; 0x02
   12c9c:	53 81       	ldd	r21, Z+3	; 0x03
   12c9e:	68 e0       	ldi	r22, 0x08	; 8
   12ca0:	82 e1       	ldi	r24, 0x12	; 18
   12ca2:	07 dd       	rcall	.-1522   	; 0x126b2 <print_tok_str>
   12ca4:	64 e0       	ldi	r22, 0x04	; 4
   12ca6:	81 e1       	ldi	r24, 0x11	; 17
   12ca8:	39 dd       	rcall	.-1422   	; 0x1271c <print_tok>
   12caa:	64 e0       	ldi	r22, 0x04	; 4
   12cac:	89 e0       	ldi	r24, 0x09	; 9
   12cae:	36 dd       	rcall	.-1428   	; 0x1271c <print_tok>
   12cb0:	e9 89       	ldd	r30, Y+17	; 0x11
   12cb2:	fa 89       	ldd	r31, Y+18	; 0x12
   12cb4:	26 81       	ldd	r18, Z+6	; 0x06
   12cb6:	37 81       	ldd	r19, Z+7	; 0x07
   12cb8:	40 e0       	ldi	r20, 0x00	; 0
   12cba:	50 e0       	ldi	r21, 0x00	; 0
   12cbc:	68 e0       	ldi	r22, 0x08	; 8
   12cbe:	87 e1       	ldi	r24, 0x17	; 23
   12cc0:	b8 dc       	rcall	.-1680   	; 0x12632 <print_tok_val>
   12cc2:	64 e0       	ldi	r22, 0x04	; 4
   12cc4:	81 e1       	ldi	r24, 0x11	; 17
   12cc6:	2a dd       	rcall	.-1452   	; 0x1271c <print_tok>
   12cc8:	a1 14       	cp	r10, r1
   12cca:	b1 04       	cpc	r11, r1
   12ccc:	91 f1       	breq	.+100    	; 0x12d32 <display_Config+0x422>
   12cce:	64 e0       	ldi	r22, 0x04	; 4
   12cd0:	84 e1       	ldi	r24, 0x14	; 20
   12cd2:	24 dd       	rcall	.-1464   	; 0x1271c <print_tok>
   12cd4:	e9 89       	ldd	r30, Y+17	; 0x11
   12cd6:	fa 89       	ldd	r31, Y+18	; 0x12
   12cd8:	20 85       	ldd	r18, Z+8	; 0x08
   12cda:	31 85       	ldd	r19, Z+9	; 0x09
   12cdc:	03 2e       	mov	r0, r19
   12cde:	00 0c       	add	r0, r0
   12ce0:	44 0b       	sbc	r20, r20
   12ce2:	55 0b       	sbc	r21, r21
   12ce4:	68 e0       	ldi	r22, 0x08	; 8
   12ce6:	88 e0       	ldi	r24, 0x08	; 8
   12ce8:	a4 dc       	rcall	.-1720   	; 0x12632 <print_tok_val>
   12cea:	e9 89       	ldd	r30, Y+17	; 0x11
   12cec:	fa 89       	ldd	r31, Y+18	; 0x12
   12cee:	22 85       	ldd	r18, Z+10	; 0x0a
   12cf0:	33 85       	ldd	r19, Z+11	; 0x0b
   12cf2:	03 2e       	mov	r0, r19
   12cf4:	00 0c       	add	r0, r0
   12cf6:	44 0b       	sbc	r20, r20
   12cf8:	55 0b       	sbc	r21, r21
   12cfa:	68 e0       	ldi	r22, 0x08	; 8
   12cfc:	82 e2       	ldi	r24, 0x22	; 34
   12cfe:	99 dc       	rcall	.-1742   	; 0x12632 <print_tok_val>
   12d00:	e9 89       	ldd	r30, Y+17	; 0x11
   12d02:	fa 89       	ldd	r31, Y+18	; 0x12
   12d04:	24 85       	ldd	r18, Z+12	; 0x0c
   12d06:	35 85       	ldd	r19, Z+13	; 0x0d
   12d08:	03 2e       	mov	r0, r19
   12d0a:	00 0c       	add	r0, r0
   12d0c:	44 0b       	sbc	r20, r20
   12d0e:	55 0b       	sbc	r21, r21
   12d10:	68 e0       	ldi	r22, 0x08	; 8
   12d12:	86 e1       	ldi	r24, 0x16	; 22
   12d14:	8e dc       	rcall	.-1764   	; 0x12632 <print_tok_val>
   12d16:	e9 89       	ldd	r30, Y+17	; 0x11
   12d18:	fa 89       	ldd	r31, Y+18	; 0x12
   12d1a:	26 85       	ldd	r18, Z+14	; 0x0e
   12d1c:	37 85       	ldd	r19, Z+15	; 0x0f
   12d1e:	03 2e       	mov	r0, r19
   12d20:	00 0c       	add	r0, r0
   12d22:	44 0b       	sbc	r20, r20
   12d24:	55 0b       	sbc	r21, r21
   12d26:	68 e0       	ldi	r22, 0x08	; 8
   12d28:	8d e0       	ldi	r24, 0x0D	; 13
   12d2a:	83 dc       	rcall	.-1786   	; 0x12632 <print_tok_val>
   12d2c:	64 e0       	ldi	r22, 0x04	; 4
   12d2e:	81 e1       	ldi	r24, 0x11	; 17
   12d30:	f5 dc       	rcall	.-1558   	; 0x1271c <print_tok>
   12d32:	e9 89       	ldd	r30, Y+17	; 0x11
   12d34:	fa 89       	ldd	r31, Y+18	; 0x12
   12d36:	46 85       	ldd	r20, Z+14	; 0x0e
   12d38:	57 85       	ldd	r21, Z+15	; 0x0f
   12d3a:	22 85       	ldd	r18, Z+10	; 0x0a
   12d3c:	33 85       	ldd	r19, Z+11	; 0x0b
   12d3e:	42 9f       	mul	r20, r18
   12d40:	c0 01       	movw	r24, r0
   12d42:	43 9f       	mul	r20, r19
   12d44:	90 0d       	add	r25, r0
   12d46:	52 9f       	mul	r21, r18
   12d48:	90 0d       	add	r25, r0
   12d4a:	11 24       	eor	r1, r1
   12d4c:	44 85       	ldd	r20, Z+12	; 0x0c
   12d4e:	55 85       	ldd	r21, Z+13	; 0x0d
   12d50:	84 9f       	mul	r24, r20
   12d52:	90 01       	movw	r18, r0
   12d54:	85 9f       	mul	r24, r21
   12d56:	30 0d       	add	r19, r0
   12d58:	94 9f       	mul	r25, r20
   12d5a:	30 0d       	add	r19, r0
   12d5c:	11 24       	eor	r1, r1
   12d5e:	c9 01       	movw	r24, r18
   12d60:	33 0f       	add	r19, r19
   12d62:	aa 0b       	sbc	r26, r26
   12d64:	bb 0b       	sbc	r27, r27
   12d66:	ed b7       	in	r30, 0x3d	; 61
   12d68:	fe b7       	in	r31, 0x3e	; 62
   12d6a:	84 83       	std	Z+4, r24	; 0x04
   12d6c:	95 83       	std	Z+5, r25	; 0x05
   12d6e:	a6 83       	std	Z+6, r26	; 0x06
   12d70:	b7 83       	std	Z+7, r27	; 0x07
   12d72:	21 82       	std	Z+1, r2	; 0x01
   12d74:	32 82       	std	Z+2, r3	; 0x02
   12d76:	43 82       	std	Z+3, r4	; 0x03
   12d78:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   12d7c:	60 e0       	ldi	r22, 0x00	; 0
   12d7e:	81 e1       	ldi	r24, 0x11	; 17
   12d80:	cd dc       	rcall	.-1638   	; 0x1271c <print_tok>
   12d82:	f8 01       	movw	r30, r16
   12d84:	80 81       	ld	r24, Z
   12d86:	84 30       	cpi	r24, 0x04	; 4
   12d88:	c9 f4       	brne	.+50     	; 0x12dbc <display_Config+0x4ac>
   12d8a:	27 81       	ldd	r18, Z+7	; 0x07
   12d8c:	30 85       	ldd	r19, Z+8	; 0x08
   12d8e:	3a 8b       	std	Y+18, r19	; 0x12
   12d90:	29 8b       	std	Y+17, r18	; 0x11
   12d92:	60 e0       	ldi	r22, 0x00	; 0
   12d94:	80 e2       	ldi	r24, 0x20	; 32
   12d96:	c2 dc       	rcall	.-1660   	; 0x1271c <print_tok>
   12d98:	64 e0       	ldi	r22, 0x04	; 4
   12d9a:	89 e0       	ldi	r24, 0x09	; 9
   12d9c:	bf dc       	rcall	.-1666   	; 0x1271c <print_tok>
   12d9e:	e9 89       	ldd	r30, Y+17	; 0x11
   12da0:	fa 89       	ldd	r31, Y+18	; 0x12
   12da2:	20 81       	ld	r18, Z
   12da4:	30 e0       	ldi	r19, 0x00	; 0
   12da6:	40 e0       	ldi	r20, 0x00	; 0
   12da8:	50 e0       	ldi	r21, 0x00	; 0
   12daa:	68 e0       	ldi	r22, 0x08	; 8
   12dac:	81 e0       	ldi	r24, 0x01	; 1
   12dae:	41 dc       	rcall	.-1918   	; 0x12632 <print_tok_val>
   12db0:	64 e0       	ldi	r22, 0x04	; 4
   12db2:	81 e1       	ldi	r24, 0x11	; 17
   12db4:	b3 dc       	rcall	.-1690   	; 0x1271c <print_tok>
   12db6:	60 e0       	ldi	r22, 0x00	; 0
   12db8:	81 e1       	ldi	r24, 0x11	; 17
   12dba:	b0 dc       	rcall	.-1696   	; 0x1271c <print_tok>
   12dbc:	28 85       	ldd	r18, Y+8	; 0x08
   12dbe:	39 85       	ldd	r19, Y+9	; 0x09
   12dc0:	4a 85       	ldd	r20, Y+10	; 0x0a
   12dc2:	ed b7       	in	r30, 0x3d	; 61
   12dc4:	fe b7       	in	r31, 0x3e	; 62
   12dc6:	21 83       	std	Z+1, r18	; 0x01
   12dc8:	32 83       	std	Z+2, r19	; 0x02
   12dca:	43 83       	std	Z+3, r20	; 0x03
   12dcc:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   12dd0:	05 5f       	subi	r16, 0xF5	; 245
   12dd2:	1f 4f       	sbci	r17, 0xFF	; 255
   12dd4:	28 e7       	ldi	r18, 0x78	; 120
   12dd6:	3f e1       	ldi	r19, 0x1F	; 31
   12dd8:	20 17       	cp	r18, r16
   12dda:	31 07       	cpc	r19, r17
   12ddc:	09 f0       	breq	.+2      	; 0x12de0 <display_Config+0x4d0>
   12dde:	dd cd       	rjmp	.-1094   	; 0x1299a <display_Config+0x8a>
   12de0:	88 eb       	ldi	r24, 0xB8	; 184
   12de2:	9c e1       	ldi	r25, 0x1C	; 28
   12de4:	a0 e0       	ldi	r26, 0x00	; 0
   12de6:	ed b7       	in	r30, 0x3d	; 61
   12de8:	fe b7       	in	r31, 0x3e	; 62
   12dea:	81 83       	std	Z+1, r24	; 0x01
   12dec:	92 83       	std	Z+2, r25	; 0x02
   12dee:	a3 83       	std	Z+3, r26	; 0x03
   12df0:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   12df4:	62 96       	adiw	r28, 0x12	; 18
   12df6:	0f b6       	in	r0, 0x3f	; 63
   12df8:	f8 94       	cli
   12dfa:	de bf       	out	0x3e, r29	; 62
   12dfc:	0f be       	out	0x3f, r0	; 63
   12dfe:	cd bf       	out	0x3d, r28	; 61
   12e00:	df 91       	pop	r29
   12e02:	cf 91       	pop	r28
   12e04:	1f 91       	pop	r17
   12e06:	0f 91       	pop	r16
   12e08:	ef 90       	pop	r14
   12e0a:	df 90       	pop	r13
   12e0c:	cf 90       	pop	r12
   12e0e:	bf 90       	pop	r11
   12e10:	af 90       	pop	r10
   12e12:	8f 90       	pop	r8
   12e14:	7f 90       	pop	r7
   12e16:	6f 90       	pop	r6
   12e18:	4f 90       	pop	r4
   12e1a:	3f 90       	pop	r3
   12e1c:	2f 90       	pop	r2
   12e1e:	08 95       	ret

00012e20 <find_type>:
   12e20:	e4 ef       	ldi	r30, 0xF4	; 244
   12e22:	fe e1       	ldi	r31, 0x1E	; 30
   12e24:	20 e0       	ldi	r18, 0x00	; 0
   12e26:	30 e0       	ldi	r19, 0x00	; 0
   12e28:	40 81       	ld	r20, Z
   12e2a:	50 e0       	ldi	r21, 0x00	; 0
   12e2c:	48 17       	cp	r20, r24
   12e2e:	59 07       	cpc	r21, r25
   12e30:	11 f4       	brne	.+4      	; 0x12e36 <find_type+0x16>
   12e32:	82 2f       	mov	r24, r18
   12e34:	08 95       	ret
   12e36:	2f 5f       	subi	r18, 0xFF	; 255
   12e38:	3f 4f       	sbci	r19, 0xFF	; 255
   12e3a:	3b 96       	adiw	r30, 0x0b	; 11
   12e3c:	2c 30       	cpi	r18, 0x0C	; 12
   12e3e:	31 05       	cpc	r19, r1
   12e40:	99 f7       	brne	.-26     	; 0x12e28 <find_type+0x8>
   12e42:	8f ef       	ldi	r24, 0xFF	; 255
   12e44:	08 95       	ret

00012e46 <count_drive_types>:
   12e46:	e4 ef       	ldi	r30, 0xF4	; 244
   12e48:	fe e1       	ldi	r31, 0x1E	; 30
   12e4a:	20 e0       	ldi	r18, 0x00	; 0
   12e4c:	30 e0       	ldi	r19, 0x00	; 0
   12e4e:	90 81       	ld	r25, Z
   12e50:	98 13       	cpse	r25, r24
   12e52:	02 c0       	rjmp	.+4      	; 0x12e58 <count_drive_types+0x12>
   12e54:	2f 5f       	subi	r18, 0xFF	; 255
   12e56:	3f 4f       	sbci	r19, 0xFF	; 255
   12e58:	3b 96       	adiw	r30, 0x0b	; 11
   12e5a:	9f e1       	ldi	r25, 0x1F	; 31
   12e5c:	e8 37       	cpi	r30, 0x78	; 120
   12e5e:	f9 07       	cpc	r31, r25
   12e60:	b1 f7       	brne	.-20     	; 0x12e4e <count_drive_types+0x8>
   12e62:	82 2f       	mov	r24, r18
   12e64:	08 95       	ret

00012e66 <type_to_str>:
   12e66:	00 97       	sbiw	r24, 0x00	; 0
   12e68:	59 f0       	breq	.+22     	; 0x12e80 <type_to_str+0x1a>
   12e6a:	81 30       	cpi	r24, 0x01	; 1
   12e6c:	91 05       	cpc	r25, r1
   12e6e:	59 f0       	breq	.+22     	; 0x12e86 <type_to_str+0x20>
   12e70:	83 30       	cpi	r24, 0x03	; 3
   12e72:	91 05       	cpc	r25, r1
   12e74:	59 f0       	breq	.+22     	; 0x12e8c <type_to_str+0x26>
   12e76:	04 97       	sbiw	r24, 0x04	; 4
   12e78:	61 f0       	breq	.+24     	; 0x12e92 <type_to_str+0x2c>
   12e7a:	89 e2       	ldi	r24, 0x29	; 41
   12e7c:	9e e0       	ldi	r25, 0x0E	; 14
   12e7e:	08 95       	ret
   12e80:	8f ef       	ldi	r24, 0xFF	; 255
   12e82:	9d e0       	ldi	r25, 0x0D	; 13
   12e84:	08 95       	ret
   12e86:	87 e0       	ldi	r24, 0x07	; 7
   12e88:	9e e0       	ldi	r25, 0x0E	; 14
   12e8a:	08 95       	ret
   12e8c:	8f e1       	ldi	r24, 0x1F	; 31
   12e8e:	9e e0       	ldi	r25, 0x0E	; 14
   12e90:	08 95       	ret
   12e92:	82 e1       	ldi	r24, 0x12	; 18
   12e94:	9e e0       	ldi	r25, 0x0E	; 14
   12e96:	08 95       	ret

00012e98 <find_free>:
   12e98:	80 e0       	ldi	r24, 0x00	; 0
   12e9a:	90 e0       	ldi	r25, 0x00	; 0
   12e9c:	c1 cf       	rjmp	.-126    	; 0x12e20 <find_type>
   12e9e:	08 95       	ret

00012ea0 <find_device>:
   12ea0:	9b 01       	movw	r18, r22
   12ea2:	20 52       	subi	r18, 0x20	; 32
   12ea4:	31 09       	sbc	r19, r1
   12ea6:	2f 35       	cpi	r18, 0x5F	; 95
   12ea8:	31 05       	cpc	r19, r1
   12eaa:	08 f5       	brcc	.+66     	; 0x12eee <find_device+0x4e>
   12eac:	64 17       	cp	r22, r20
   12eae:	75 07       	cpc	r23, r21
   12eb0:	f4 f0       	brlt	.+60     	; 0x12eee <find_device+0x4e>
   12eb2:	9a 01       	movw	r18, r20
   12eb4:	22 5e       	subi	r18, 0xE2	; 226
   12eb6:	3f 4f       	sbci	r19, 0xFF	; 255
   12eb8:	26 17       	cp	r18, r22
   12eba:	37 07       	cpc	r19, r23
   12ebc:	c4 f0       	brlt	.+48     	; 0x12eee <find_device+0x4e>
   12ebe:	64 1b       	sub	r22, r20
   12ec0:	75 0b       	sbc	r23, r21
   12ec2:	e4 ef       	ldi	r30, 0xF4	; 244
   12ec4:	fe e1       	ldi	r31, 0x1E	; 30
   12ec6:	20 e0       	ldi	r18, 0x00	; 0
   12ec8:	30 e0       	ldi	r19, 0x00	; 0
   12eca:	40 81       	ld	r20, Z
   12ecc:	50 e0       	ldi	r21, 0x00	; 0
   12ece:	48 17       	cp	r20, r24
   12ed0:	59 07       	cpc	r21, r25
   12ed2:	39 f4       	brne	.+14     	; 0x12ee2 <find_device+0x42>
   12ed4:	41 81       	ldd	r20, Z+1	; 0x01
   12ed6:	50 e0       	ldi	r21, 0x00	; 0
   12ed8:	64 17       	cp	r22, r20
   12eda:	75 07       	cpc	r23, r21
   12edc:	11 f4       	brne	.+4      	; 0x12ee2 <find_device+0x42>
   12ede:	82 2f       	mov	r24, r18
   12ee0:	08 95       	ret
   12ee2:	2f 5f       	subi	r18, 0xFF	; 255
   12ee4:	3f 4f       	sbci	r19, 0xFF	; 255
   12ee6:	3b 96       	adiw	r30, 0x0b	; 11
   12ee8:	2c 30       	cpi	r18, 0x0C	; 12
   12eea:	31 05       	cpc	r19, r1
   12eec:	71 f7       	brne	.-36     	; 0x12eca <find_device+0x2a>
   12eee:	8f ef       	ldi	r24, 0xFF	; 255
   12ef0:	08 95       	ret

00012ef2 <set_active_device>:
   12ef2:	a9 e0       	ldi	r26, 0x09	; 9
   12ef4:	b0 e0       	ldi	r27, 0x00	; 0
   12ef6:	ef e7       	ldi	r30, 0x7F	; 127
   12ef8:	f7 e9       	ldi	r31, 0x97	; 151
   12efa:	0c 94 c9 e6 	jmp	0x1cd92	; 0x1cd92 <__prologue_saves__+0x1c>
   12efe:	8f 3f       	cpi	r24, 0xFF	; 255
   12f00:	09 f4       	brne	.+2      	; 0x12f04 <set_active_device+0x12>
   12f02:	b5 c0       	rjmp	.+362    	; 0x1306e <set_active_device+0x17c>
   12f04:	e8 2f       	mov	r30, r24
   12f06:	8c 30       	cpi	r24, 0x0C	; 12
   12f08:	a0 f0       	brcs	.+40     	; 0x12f32 <set_active_device+0x40>
   12f0a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12f0e:	80 ff       	sbrs	r24, 0
   12f10:	ae c0       	rjmp	.+348    	; 0x1306e <set_active_device+0x17c>
   12f12:	0e 2e       	mov	r0, r30
   12f14:	00 0c       	add	r0, r0
   12f16:	ff 0b       	sbc	r31, r31
   12f18:	cd b7       	in	r28, 0x3d	; 61
   12f1a:	de b7       	in	r29, 0x3e	; 62
   12f1c:	fd 83       	std	Y+5, r31	; 0x05
   12f1e:	ec 83       	std	Y+4, r30	; 0x04
   12f20:	83 e9       	ldi	r24, 0x93	; 147
   12f22:	9c e1       	ldi	r25, 0x1C	; 28
   12f24:	a0 e0       	ldi	r26, 0x00	; 0
   12f26:	89 83       	std	Y+1, r24	; 0x01
   12f28:	9a 83       	std	Y+2, r25	; 0x02
   12f2a:	ab 83       	std	Y+3, r26	; 0x03
   12f2c:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   12f30:	9e c0       	rjmp	.+316    	; 0x1306e <set_active_device+0x17c>
   12f32:	08 2f       	mov	r16, r24
   12f34:	88 0f       	add	r24, r24
   12f36:	11 0b       	sbc	r17, r17
   12f38:	8b e0       	ldi	r24, 0x0B	; 11
   12f3a:	e8 02       	muls	r30, r24
   12f3c:	f0 01       	movw	r30, r0
   12f3e:	11 24       	eor	r1, r1
   12f40:	ec 50       	subi	r30, 0x0C	; 12
   12f42:	f1 4e       	sbci	r31, 0xE1	; 225
   12f44:	81 81       	ldd	r24, Z+1	; 0x01
   12f46:	8f 31       	cpi	r24, 0x1F	; 31
   12f48:	a0 f0       	brcs	.+40     	; 0x12f72 <set_active_device+0x80>
   12f4a:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <debuglevel>
   12f4e:	90 ff       	sbrs	r25, 0
   12f50:	8e c0       	rjmp	.+284    	; 0x1306e <set_active_device+0x17c>
   12f52:	90 e0       	ldi	r25, 0x00	; 0
   12f54:	cd b7       	in	r28, 0x3d	; 61
   12f56:	de b7       	in	r29, 0x3e	; 62
   12f58:	9f 83       	std	Y+7, r25	; 0x07
   12f5a:	8e 83       	std	Y+6, r24	; 0x06
   12f5c:	1d 83       	std	Y+5, r17	; 0x05
   12f5e:	0c 83       	std	Y+4, r16	; 0x04
   12f60:	8a e5       	ldi	r24, 0x5A	; 90
   12f62:	9c e1       	ldi	r25, 0x1C	; 28
   12f64:	a0 e0       	ldi	r26, 0x00	; 0
   12f66:	89 83       	std	Y+1, r24	; 0x01
   12f68:	9a 83       	std	Y+2, r25	; 0x02
   12f6a:	ab 83       	std	Y+3, r26	; 0x03
   12f6c:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   12f70:	7e c0       	rjmp	.+252    	; 0x1306e <set_active_device+0x17c>
   12f72:	20 81       	ld	r18, Z
   12f74:	c2 2f       	mov	r28, r18
   12f76:	d0 e0       	ldi	r29, 0x00	; 0
   12f78:	87 81       	ldd	r24, Z+7	; 0x07
   12f7a:	90 85       	ldd	r25, Z+8	; 0x08
   12f7c:	00 97       	sbiw	r24, 0x00	; 0
   12f7e:	89 f4       	brne	.+34     	; 0x12fa2 <set_active_device+0xb0>
   12f80:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12f84:	80 ff       	sbrs	r24, 0
   12f86:	73 c0       	rjmp	.+230    	; 0x1306e <set_active_device+0x17c>
   12f88:	ce 01       	movw	r24, r28
   12f8a:	6d df       	rcall	.-294    	; 0x12e66 <type_to_str>
   12f8c:	ed b7       	in	r30, 0x3d	; 61
   12f8e:	fe b7       	in	r31, 0x3e	; 62
   12f90:	91 87       	std	Z+9, r25	; 0x09
   12f92:	80 87       	std	Z+8, r24	; 0x08
   12f94:	d7 83       	std	Z+7, r29	; 0x07
   12f96:	c6 83       	std	Z+6, r28	; 0x06
   12f98:	15 83       	std	Z+5, r17	; 0x05
   12f9a:	04 83       	std	Z+4, r16	; 0x04
   12f9c:	85 e2       	ldi	r24, 0x25	; 37
   12f9e:	9c e1       	ldi	r25, 0x1C	; 28
   12fa0:	5e c0       	rjmp	.+188    	; 0x1305e <set_active_device+0x16c>
   12fa2:	20 97       	sbiw	r28, 0x00	; 0
   12fa4:	91 f4       	brne	.+36     	; 0x12fca <set_active_device+0xd8>
   12fa6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12faa:	80 ff       	sbrs	r24, 0
   12fac:	60 c0       	rjmp	.+192    	; 0x1306e <set_active_device+0x17c>
   12fae:	80 e0       	ldi	r24, 0x00	; 0
   12fb0:	90 e0       	ldi	r25, 0x00	; 0
   12fb2:	59 df       	rcall	.-334    	; 0x12e66 <type_to_str>
   12fb4:	ed b7       	in	r30, 0x3d	; 61
   12fb6:	fe b7       	in	r31, 0x3e	; 62
   12fb8:	91 87       	std	Z+9, r25	; 0x09
   12fba:	80 87       	std	Z+8, r24	; 0x08
   12fbc:	17 82       	std	Z+7, r1	; 0x07
   12fbe:	16 82       	std	Z+6, r1	; 0x06
   12fc0:	15 83       	std	Z+5, r17	; 0x05
   12fc2:	04 83       	std	Z+4, r16	; 0x04
   12fc4:	80 ef       	ldi	r24, 0xF0	; 240
   12fc6:	9b e1       	ldi	r25, 0x1B	; 27
   12fc8:	4a c0       	rjmp	.+148    	; 0x1305e <set_active_device+0x16c>
   12fca:	c4 30       	cpi	r28, 0x04	; 4
   12fcc:	d1 05       	cpc	r29, r1
   12fce:	29 f4       	brne	.+10     	; 0x12fda <set_active_device+0xe8>
   12fd0:	90 93 6b 19 	sts	0x196B, r25	; 0x80196b <PRINTERp+0x1>
   12fd4:	80 93 6a 19 	sts	0x196A, r24	; 0x80196a <PRINTERp>
   12fd8:	30 c0       	rjmp	.+96     	; 0x1303a <set_active_device+0x148>
   12fda:	2d 7f       	andi	r18, 0xFD	; 253
   12fdc:	21 30       	cpi	r18, 0x01	; 1
   12fde:	79 f5       	brne	.+94     	; 0x1303e <set_active_device+0x14c>
   12fe0:	21 85       	ldd	r18, Z+9	; 0x09
   12fe2:	32 85       	ldd	r19, Z+10	; 0x0a
   12fe4:	21 15       	cp	r18, r1
   12fe6:	31 05       	cpc	r19, r1
   12fe8:	89 f4       	brne	.+34     	; 0x1300c <set_active_device+0x11a>
   12fea:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12fee:	80 ff       	sbrs	r24, 0
   12ff0:	3e c0       	rjmp	.+124    	; 0x1306e <set_active_device+0x17c>
   12ff2:	ce 01       	movw	r24, r28
   12ff4:	38 df       	rcall	.-400    	; 0x12e66 <type_to_str>
   12ff6:	ed b7       	in	r30, 0x3d	; 61
   12ff8:	fe b7       	in	r31, 0x3e	; 62
   12ffa:	91 87       	std	Z+9, r25	; 0x09
   12ffc:	80 87       	std	Z+8, r24	; 0x08
   12ffe:	d7 83       	std	Z+7, r29	; 0x07
   13000:	c6 83       	std	Z+6, r28	; 0x06
   13002:	15 83       	std	Z+5, r17	; 0x05
   13004:	04 83       	std	Z+4, r16	; 0x04
   13006:	88 eb       	ldi	r24, 0xB8	; 184
   13008:	9b e1       	ldi	r25, 0x1B	; 27
   1300a:	29 c0       	rjmp	.+82     	; 0x1305e <set_active_device+0x16c>
   1300c:	c1 30       	cpi	r28, 0x01	; 1
   1300e:	d1 05       	cpc	r29, r1
   13010:	49 f4       	brne	.+18     	; 0x13024 <set_active_device+0x132>
   13012:	90 93 65 19 	sts	0x1965, r25	; 0x801965 <AMIGOp+0x1>
   13016:	80 93 64 19 	sts	0x1964, r24	; 0x801964 <AMIGOp>
   1301a:	30 93 63 19 	sts	0x1963, r19	; 0x801963 <AMIGOs+0x1>
   1301e:	20 93 62 19 	sts	0x1962, r18	; 0x801962 <AMIGOs>
   13022:	0b c0       	rjmp	.+22     	; 0x1303a <set_active_device+0x148>
   13024:	c3 30       	cpi	r28, 0x03	; 3
   13026:	d1 05       	cpc	r29, r1
   13028:	51 f4       	brne	.+20     	; 0x1303e <set_active_device+0x14c>
   1302a:	90 93 69 19 	sts	0x1969, r25	; 0x801969 <SS80p+0x1>
   1302e:	80 93 68 19 	sts	0x1968, r24	; 0x801968 <SS80p>
   13032:	30 93 67 19 	sts	0x1967, r19	; 0x801967 <SS80s+0x1>
   13036:	20 93 66 19 	sts	0x1966, r18	; 0x801966 <SS80s>
   1303a:	81 e0       	ldi	r24, 0x01	; 1
   1303c:	19 c0       	rjmp	.+50     	; 0x13070 <set_active_device+0x17e>
   1303e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   13042:	80 ff       	sbrs	r24, 0
   13044:	14 c0       	rjmp	.+40     	; 0x1306e <set_active_device+0x17c>
   13046:	ce 01       	movw	r24, r28
   13048:	0e df       	rcall	.-484    	; 0x12e66 <type_to_str>
   1304a:	ed b7       	in	r30, 0x3d	; 61
   1304c:	fe b7       	in	r31, 0x3e	; 62
   1304e:	91 87       	std	Z+9, r25	; 0x09
   13050:	80 87       	std	Z+8, r24	; 0x08
   13052:	d7 83       	std	Z+7, r29	; 0x07
   13054:	c6 83       	std	Z+6, r28	; 0x06
   13056:	15 83       	std	Z+5, r17	; 0x05
   13058:	04 83       	std	Z+4, r16	; 0x04
   1305a:	8d e8       	ldi	r24, 0x8D	; 141
   1305c:	9b e1       	ldi	r25, 0x1B	; 27
   1305e:	a0 e0       	ldi	r26, 0x00	; 0
   13060:	cd b7       	in	r28, 0x3d	; 61
   13062:	de b7       	in	r29, 0x3e	; 62
   13064:	89 83       	std	Y+1, r24	; 0x01
   13066:	9a 83       	std	Y+2, r25	; 0x02
   13068:	ab 83       	std	Y+3, r26	; 0x03
   1306a:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   1306e:	80 e0       	ldi	r24, 0x00	; 0
   13070:	cd b7       	in	r28, 0x3d	; 61
   13072:	de b7       	in	r29, 0x3e	; 62
   13074:	29 96       	adiw	r28, 0x09	; 9
   13076:	e4 e0       	ldi	r30, 0x04	; 4
   13078:	0c 94 e5 e6 	jmp	0x1cdca	; 0x1cdca <__epilogue_restores__+0x1c>

0001307c <SS80_Set_Defaults>:
   1307c:	0f 93       	push	r16
   1307e:	1f 93       	push	r17
   13080:	cf 93       	push	r28
   13082:	df 93       	push	r29
   13084:	18 2f       	mov	r17, r24
   13086:	82 e0       	ldi	r24, 0x02	; 2
   13088:	90 e0       	ldi	r25, 0x00	; 0
   1308a:	ca de       	rcall	.-620    	; 0x12e20 <find_type>
   1308c:	87 fd       	sbrc	r24, 7
   1308e:	69 c0       	rjmp	.+210    	; 0x13162 <SS80_Set_Defaults+0xe6>
   13090:	2b e0       	ldi	r18, 0x0B	; 11
   13092:	12 03       	mulsu	r17, r18
   13094:	e0 01       	movw	r28, r0
   13096:	11 24       	eor	r1, r1
   13098:	cc 50       	subi	r28, 0x0C	; 12
   1309a:	d1 4e       	sbci	r29, 0xE1	; 225
   1309c:	0f 80       	ldd	r0, Y+7	; 0x07
   1309e:	d8 85       	ldd	r29, Y+8	; 0x08
   130a0:	c0 2d       	mov	r28, r0
   130a2:	38 2f       	mov	r19, r24
   130a4:	32 03       	mulsu	r19, r18
   130a6:	f0 01       	movw	r30, r0
   130a8:	11 24       	eor	r1, r1
   130aa:	ec 50       	subi	r30, 0x0C	; 12
   130ac:	f1 4e       	sbci	r31, 0xE1	; 225
   130ae:	07 81       	ldd	r16, Z+7	; 0x07
   130b0:	10 85       	ldd	r17, Z+8	; 0x08
   130b2:	f8 01       	movw	r30, r16
   130b4:	80 81       	ld	r24, Z
   130b6:	88 83       	st	Y, r24
   130b8:	81 81       	ldd	r24, Z+1	; 0x01
   130ba:	89 83       	std	Y+1, r24	; 0x01
   130bc:	82 81       	ldd	r24, Z+2	; 0x02
   130be:	93 81       	ldd	r25, Z+3	; 0x03
   130c0:	0e 94 da 31 	call	0x63b4	; 0x63b4 <stralloc>
   130c4:	9b 83       	std	Y+3, r25	; 0x03
   130c6:	8a 83       	std	Y+2, r24	; 0x02
   130c8:	f8 01       	movw	r30, r16
   130ca:	86 81       	ldd	r24, Z+6	; 0x06
   130cc:	97 81       	ldd	r25, Z+7	; 0x07
   130ce:	9f 83       	std	Y+7, r25	; 0x07
   130d0:	8e 83       	std	Y+6, r24	; 0x06
   130d2:	80 85       	ldd	r24, Z+8	; 0x08
   130d4:	91 85       	ldd	r25, Z+9	; 0x09
   130d6:	99 87       	std	Y+9, r25	; 0x09
   130d8:	88 87       	std	Y+8, r24	; 0x08
   130da:	82 85       	ldd	r24, Z+10	; 0x0a
   130dc:	93 85       	ldd	r25, Z+11	; 0x0b
   130de:	9b 87       	std	Y+11, r25	; 0x0b
   130e0:	8a 87       	std	Y+10, r24	; 0x0a
   130e2:	84 85       	ldd	r24, Z+12	; 0x0c
   130e4:	8c 87       	std	Y+12, r24	; 0x0c
   130e6:	85 85       	ldd	r24, Z+13	; 0x0d
   130e8:	8d 87       	std	Y+13, r24	; 0x0d
   130ea:	86 85       	ldd	r24, Z+14	; 0x0e
   130ec:	97 85       	ldd	r25, Z+15	; 0x0f
   130ee:	a0 89       	ldd	r26, Z+16	; 0x10
   130f0:	b1 89       	ldd	r27, Z+17	; 0x11
   130f2:	8e 87       	std	Y+14, r24	; 0x0e
   130f4:	9f 87       	std	Y+15, r25	; 0x0f
   130f6:	a8 8b       	std	Y+16, r26	; 0x10
   130f8:	b9 8b       	std	Y+17, r27	; 0x11
   130fa:	82 89       	ldd	r24, Z+18	; 0x12
   130fc:	93 89       	ldd	r25, Z+19	; 0x13
   130fe:	9b 8b       	std	Y+19, r25	; 0x13
   13100:	8a 8b       	std	Y+18, r24	; 0x12
   13102:	84 89       	ldd	r24, Z+20	; 0x14
   13104:	8c 8b       	std	Y+20, r24	; 0x14
   13106:	85 89       	ldd	r24, Z+21	; 0x15
   13108:	8d 8b       	std	Y+21, r24	; 0x15
   1310a:	86 89       	ldd	r24, Z+22	; 0x16
   1310c:	97 89       	ldd	r25, Z+23	; 0x17
   1310e:	9f 8b       	std	Y+23, r25	; 0x17
   13110:	8e 8b       	std	Y+22, r24	; 0x16
   13112:	80 8d       	ldd	r24, Z+24	; 0x18
   13114:	91 8d       	ldd	r25, Z+25	; 0x19
   13116:	99 8f       	std	Y+25, r25	; 0x19
   13118:	88 8f       	std	Y+24, r24	; 0x18
   1311a:	82 8d       	ldd	r24, Z+26	; 0x1a
   1311c:	93 8d       	ldd	r25, Z+27	; 0x1b
   1311e:	9b 8f       	std	Y+27, r25	; 0x1b
   13120:	8a 8f       	std	Y+26, r24	; 0x1a
   13122:	84 8d       	ldd	r24, Z+28	; 0x1c
   13124:	95 8d       	ldd	r25, Z+29	; 0x1d
   13126:	9d 8f       	std	Y+29, r25	; 0x1d
   13128:	8c 8f       	std	Y+28, r24	; 0x1c
   1312a:	86 8d       	ldd	r24, Z+30	; 0x1e
   1312c:	8e 8f       	std	Y+30, r24	; 0x1e
   1312e:	87 8d       	ldd	r24, Z+31	; 0x1f
   13130:	8f 8f       	std	Y+31, r24	; 0x1f
   13132:	81 a1       	ldd	r24, Z+33	; 0x21
   13134:	92 a1       	ldd	r25, Z+34	; 0x22
   13136:	a3 a1       	ldd	r26, Z+35	; 0x23
   13138:	b4 a1       	ldd	r27, Z+36	; 0x24
   1313a:	89 a3       	std	Y+33, r24	; 0x21
   1313c:	9a a3       	std	Y+34, r25	; 0x22
   1313e:	ab a3       	std	Y+35, r26	; 0x23
   13140:	bc a3       	std	Y+36, r27	; 0x24
   13142:	85 a1       	ldd	r24, Z+37	; 0x25
   13144:	8d a3       	std	Y+37, r24	; 0x25
   13146:	86 a1       	ldd	r24, Z+38	; 0x26
   13148:	97 a1       	ldd	r25, Z+39	; 0x27
   1314a:	9f a3       	std	Y+39, r25	; 0x27
   1314c:	8e a3       	std	Y+38, r24	; 0x26
   1314e:	80 a5       	ldd	r24, Z+40	; 0x28
   13150:	91 a5       	ldd	r25, Z+41	; 0x29
   13152:	a2 a5       	ldd	r26, Z+42	; 0x2a
   13154:	b3 a5       	ldd	r27, Z+43	; 0x2b
   13156:	88 a7       	std	Y+40, r24	; 0x28
   13158:	99 a7       	std	Y+41, r25	; 0x29
   1315a:	aa a7       	std	Y+42, r26	; 0x2a
   1315c:	bb a7       	std	Y+43, r27	; 0x2b
   1315e:	84 a5       	ldd	r24, Z+44	; 0x2c
   13160:	8c a7       	std	Y+44, r24	; 0x2c
   13162:	df 91       	pop	r29
   13164:	cf 91       	pop	r28
   13166:	1f 91       	pop	r17
   13168:	0f 91       	pop	r16
   1316a:	08 95       	ret

0001316c <free_device>:
   1316c:	0f 93       	push	r16
   1316e:	1f 93       	push	r17
   13170:	cf 93       	push	r28
   13172:	df 93       	push	r29
   13174:	8c 30       	cpi	r24, 0x0C	; 12
   13176:	08 f0       	brcs	.+2      	; 0x1317a <free_device+0xe>
   13178:	55 c0       	rjmp	.+170    	; 0x13224 <free_device+0xb8>
   1317a:	08 2f       	mov	r16, r24
   1317c:	08 2e       	mov	r0, r24
   1317e:	00 0c       	add	r0, r0
   13180:	11 0b       	sbc	r17, r17
   13182:	9b e0       	ldi	r25, 0x0B	; 11
   13184:	89 02       	muls	r24, r25
   13186:	f0 01       	movw	r30, r0
   13188:	11 24       	eor	r1, r1
   1318a:	ec 50       	subi	r30, 0x0C	; 12
   1318c:	f1 4e       	sbci	r31, 0xE1	; 225
   1318e:	80 81       	ld	r24, Z
   13190:	83 30       	cpi	r24, 0x03	; 3
   13192:	51 f4       	brne	.+20     	; 0x131a8 <free_device+0x3c>
   13194:	c7 81       	ldd	r28, Z+7	; 0x07
   13196:	d0 85       	ldd	r29, Z+8	; 0x08
   13198:	8a 81       	ldd	r24, Y+2	; 0x02
   1319a:	9b 81       	ldd	r25, Y+3	; 0x03
   1319c:	0e 94 e3 27 	call	0x4fc6	; 0x4fc6 <safefree>
   131a0:	8c 81       	ldd	r24, Y+4	; 0x04
   131a2:	9d 81       	ldd	r25, Y+5	; 0x05
   131a4:	0e 94 e3 27 	call	0x4fc6	; 0x4fc6 <safefree>
   131a8:	8b e0       	ldi	r24, 0x0B	; 11
   131aa:	80 9f       	mul	r24, r16
   131ac:	f0 01       	movw	r30, r0
   131ae:	81 9f       	mul	r24, r17
   131b0:	f0 0d       	add	r31, r0
   131b2:	11 24       	eor	r1, r1
   131b4:	ec 50       	subi	r30, 0x0C	; 12
   131b6:	f1 4e       	sbci	r31, 0xE1	; 225
   131b8:	80 81       	ld	r24, Z
   131ba:	81 30       	cpi	r24, 0x01	; 1
   131bc:	51 f4       	brne	.+20     	; 0x131d2 <free_device+0x66>
   131be:	c7 81       	ldd	r28, Z+7	; 0x07
   131c0:	d0 85       	ldd	r29, Z+8	; 0x08
   131c2:	8a 81       	ldd	r24, Y+2	; 0x02
   131c4:	9b 81       	ldd	r25, Y+3	; 0x03
   131c6:	0e 94 e3 27 	call	0x4fc6	; 0x4fc6 <safefree>
   131ca:	8c 81       	ldd	r24, Y+4	; 0x04
   131cc:	9d 81       	ldd	r25, Y+5	; 0x05
   131ce:	0e 94 e3 27 	call	0x4fc6	; 0x4fc6 <safefree>
   131d2:	8b e0       	ldi	r24, 0x0B	; 11
   131d4:	80 9f       	mul	r24, r16
   131d6:	f0 01       	movw	r30, r0
   131d8:	81 9f       	mul	r24, r17
   131da:	f0 0d       	add	r31, r0
   131dc:	11 24       	eor	r1, r1
   131de:	ec 50       	subi	r30, 0x0C	; 12
   131e0:	f1 4e       	sbci	r31, 0xE1	; 225
   131e2:	80 81       	ld	r24, Z
   131e4:	84 30       	cpi	r24, 0x04	; 4
   131e6:	11 f4       	brne	.+4      	; 0x131ec <free_device+0x80>
   131e8:	0e 94 8c be 	call	0x17d18	; 0x17d18 <printer_close>
   131ec:	8b e0       	ldi	r24, 0x0B	; 11
   131ee:	80 9f       	mul	r24, r16
   131f0:	e0 01       	movw	r28, r0
   131f2:	81 9f       	mul	r24, r17
   131f4:	d0 0d       	add	r29, r0
   131f6:	11 24       	eor	r1, r1
   131f8:	cc 50       	subi	r28, 0x0C	; 12
   131fa:	d1 4e       	sbci	r29, 0xE1	; 225
   131fc:	8f 81       	ldd	r24, Y+7	; 0x07
   131fe:	98 85       	ldd	r25, Y+8	; 0x08
   13200:	0e 94 e3 27 	call	0x4fc6	; 0x4fc6 <safefree>
   13204:	89 85       	ldd	r24, Y+9	; 0x09
   13206:	9a 85       	ldd	r25, Y+10	; 0x0a
   13208:	0e 94 e3 27 	call	0x4fc6	; 0x4fc6 <safefree>
   1320c:	18 82       	st	Y, r1
   1320e:	19 82       	std	Y+1, r1	; 0x01
   13210:	8f ef       	ldi	r24, 0xFF	; 255
   13212:	8a 83       	std	Y+2, r24	; 0x02
   13214:	1b 82       	std	Y+3, r1	; 0x03
   13216:	1c 82       	std	Y+4, r1	; 0x04
   13218:	1d 82       	std	Y+5, r1	; 0x05
   1321a:	1e 82       	std	Y+6, r1	; 0x06
   1321c:	18 86       	std	Y+8, r1	; 0x08
   1321e:	1f 82       	std	Y+7, r1	; 0x07
   13220:	1a 86       	std	Y+10, r1	; 0x0a
   13222:	19 86       	std	Y+9, r1	; 0x09
   13224:	df 91       	pop	r29
   13226:	cf 91       	pop	r28
   13228:	1f 91       	pop	r17
   1322a:	0f 91       	pop	r16
   1322c:	08 95       	ret

0001322e <alloc_device>:
   1322e:	0f 93       	push	r16
   13230:	1f 93       	push	r17
   13232:	cf 93       	push	r28
   13234:	ad b7       	in	r26, 0x3d	; 61
   13236:	be b7       	in	r27, 0x3e	; 62
   13238:	17 97       	sbiw	r26, 0x07	; 7
   1323a:	0f b6       	in	r0, 0x3f	; 63
   1323c:	f8 94       	cli
   1323e:	be bf       	out	0x3e, r27	; 62
   13240:	0f be       	out	0x3f, r0	; 63
   13242:	ad bf       	out	0x3d, r26	; 61
   13244:	8c 01       	movw	r16, r24
   13246:	28 de       	rcall	.-944    	; 0x12e98 <find_free>
   13248:	c8 2f       	mov	r28, r24
   1324a:	8f 3f       	cpi	r24, 0xFF	; 255
   1324c:	89 f4       	brne	.+34     	; 0x13270 <alloc_device+0x42>
   1324e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   13252:	80 ff       	sbrs	r24, 0
   13254:	98 c0       	rjmp	.+304    	; 0x13386 <alloc_device+0x158>
   13256:	ed b7       	in	r30, 0x3d	; 61
   13258:	fe b7       	in	r31, 0x3e	; 62
   1325a:	15 83       	std	Z+5, r17	; 0x05
   1325c:	04 83       	std	Z+4, r16	; 0x04
   1325e:	89 e6       	ldi	r24, 0x69	; 105
   13260:	9b e1       	ldi	r25, 0x1B	; 27
   13262:	a0 e0       	ldi	r26, 0x00	; 0
   13264:	81 83       	std	Z+1, r24	; 0x01
   13266:	92 83       	std	Z+2, r25	; 0x02
   13268:	a3 83       	std	Z+3, r26	; 0x03
   1326a:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   1326e:	8b c0       	rjmp	.+278    	; 0x13386 <alloc_device+0x158>
   13270:	02 30       	cpi	r16, 0x02	; 2
   13272:	11 05       	cpc	r17, r1
   13274:	c1 f1       	breq	.+112    	; 0x132e6 <alloc_device+0xb8>
   13276:	dc f4       	brge	.+54     	; 0x132ae <alloc_device+0x80>
   13278:	01 30       	cpi	r16, 0x01	; 1
   1327a:	11 05       	cpc	r17, r1
   1327c:	09 f0       	breq	.+2      	; 0x13280 <alloc_device+0x52>
   1327e:	6e c0       	rjmp	.+220    	; 0x1335c <alloc_device+0x12e>
   13280:	fb e0       	ldi	r31, 0x0B	; 11
   13282:	8f 02       	muls	r24, r31
   13284:	80 01       	movw	r16, r0
   13286:	11 24       	eor	r1, r1
   13288:	0c 50       	subi	r16, 0x0C	; 12
   1328a:	11 4e       	sbci	r17, 0xE1	; 225
   1328c:	81 e0       	ldi	r24, 0x01	; 1
   1328e:	f8 01       	movw	r30, r16
   13290:	80 83       	st	Z, r24
   13292:	61 e0       	ldi	r22, 0x01	; 1
   13294:	70 e0       	ldi	r23, 0x00	; 0
   13296:	87 e1       	ldi	r24, 0x17	; 23
   13298:	90 e0       	ldi	r25, 0x00	; 0
   1329a:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <safecalloc>
   1329e:	f8 01       	movw	r30, r16
   132a0:	90 87       	std	Z+8, r25	; 0x08
   132a2:	87 83       	std	Z+7, r24	; 0x07
   132a4:	61 e0       	ldi	r22, 0x01	; 1
   132a6:	70 e0       	ldi	r23, 0x00	; 0
   132a8:	88 e1       	ldi	r24, 0x18	; 24
   132aa:	90 e0       	ldi	r25, 0x00	; 0
   132ac:	51 c0       	rjmp	.+162    	; 0x13350 <alloc_device+0x122>
   132ae:	03 30       	cpi	r16, 0x03	; 3
   132b0:	11 05       	cpc	r17, r1
   132b2:	81 f1       	breq	.+96     	; 0x13314 <alloc_device+0xe6>
   132b4:	04 30       	cpi	r16, 0x04	; 4
   132b6:	11 05       	cpc	r17, r1
   132b8:	09 f0       	breq	.+2      	; 0x132bc <alloc_device+0x8e>
   132ba:	50 c0       	rjmp	.+160    	; 0x1335c <alloc_device+0x12e>
   132bc:	fb e0       	ldi	r31, 0x0B	; 11
   132be:	8f 02       	muls	r24, r31
   132c0:	80 01       	movw	r16, r0
   132c2:	11 24       	eor	r1, r1
   132c4:	0c 50       	subi	r16, 0x0C	; 12
   132c6:	11 4e       	sbci	r17, 0xE1	; 225
   132c8:	84 e0       	ldi	r24, 0x04	; 4
   132ca:	f8 01       	movw	r30, r16
   132cc:	80 83       	st	Z, r24
   132ce:	61 e0       	ldi	r22, 0x01	; 1
   132d0:	70 e0       	ldi	r23, 0x00	; 0
   132d2:	8d e0       	ldi	r24, 0x0D	; 13
   132d4:	90 e0       	ldi	r25, 0x00	; 0
   132d6:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <safecalloc>
   132da:	f8 01       	movw	r30, r16
   132dc:	90 87       	std	Z+8, r25	; 0x08
   132de:	87 83       	std	Z+7, r24	; 0x07
   132e0:	12 86       	std	Z+10, r1	; 0x0a
   132e2:	11 86       	std	Z+9, r1	; 0x09
   132e4:	50 c0       	rjmp	.+160    	; 0x13386 <alloc_device+0x158>
   132e6:	fb e0       	ldi	r31, 0x0B	; 11
   132e8:	8f 02       	muls	r24, r31
   132ea:	80 01       	movw	r16, r0
   132ec:	11 24       	eor	r1, r1
   132ee:	0c 50       	subi	r16, 0x0C	; 12
   132f0:	11 4e       	sbci	r17, 0xE1	; 225
   132f2:	82 e0       	ldi	r24, 0x02	; 2
   132f4:	f8 01       	movw	r30, r16
   132f6:	80 83       	st	Z, r24
   132f8:	61 e0       	ldi	r22, 0x01	; 1
   132fa:	70 e0       	ldi	r23, 0x00	; 0
   132fc:	84 e3       	ldi	r24, 0x34	; 52
   132fe:	90 e0       	ldi	r25, 0x00	; 0
   13300:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <safecalloc>
   13304:	f8 01       	movw	r30, r16
   13306:	90 87       	std	Z+8, r25	; 0x08
   13308:	87 83       	std	Z+7, r24	; 0x07
   1330a:	61 e0       	ldi	r22, 0x01	; 1
   1330c:	70 e0       	ldi	r23, 0x00	; 0
   1330e:	86 e1       	ldi	r24, 0x16	; 22
   13310:	90 e0       	ldi	r25, 0x00	; 0
   13312:	1e c0       	rjmp	.+60     	; 0x13350 <alloc_device+0x122>
   13314:	fb e0       	ldi	r31, 0x0B	; 11
   13316:	8f 02       	muls	r24, r31
   13318:	80 01       	movw	r16, r0
   1331a:	11 24       	eor	r1, r1
   1331c:	0c 50       	subi	r16, 0x0C	; 12
   1331e:	11 4e       	sbci	r17, 0xE1	; 225
   13320:	83 e0       	ldi	r24, 0x03	; 3
   13322:	f8 01       	movw	r30, r16
   13324:	80 83       	st	Z, r24
   13326:	61 e0       	ldi	r22, 0x01	; 1
   13328:	70 e0       	ldi	r23, 0x00	; 0
   1332a:	84 e3       	ldi	r24, 0x34	; 52
   1332c:	90 e0       	ldi	r25, 0x00	; 0
   1332e:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <safecalloc>
   13332:	f8 01       	movw	r30, r16
   13334:	90 87       	std	Z+8, r25	; 0x08
   13336:	87 83       	std	Z+7, r24	; 0x07
   13338:	61 e0       	ldi	r22, 0x01	; 1
   1333a:	70 e0       	ldi	r23, 0x00	; 0
   1333c:	86 e1       	ldi	r24, 0x16	; 22
   1333e:	90 e0       	ldi	r25, 0x00	; 0
   13340:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <safecalloc>
   13344:	f8 01       	movw	r30, r16
   13346:	92 87       	std	Z+10, r25	; 0x0a
   13348:	81 87       	std	Z+9, r24	; 0x09
   1334a:	8c 2f       	mov	r24, r28
   1334c:	97 de       	rcall	.-722    	; 0x1307c <SS80_Set_Defaults>
   1334e:	1b c0       	rjmp	.+54     	; 0x13386 <alloc_device+0x158>
   13350:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <safecalloc>
   13354:	f8 01       	movw	r30, r16
   13356:	92 87       	std	Z+10, r25	; 0x0a
   13358:	81 87       	std	Z+9, r24	; 0x09
   1335a:	15 c0       	rjmp	.+42     	; 0x13386 <alloc_device+0x158>
   1335c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   13360:	80 ff       	sbrs	r24, 0
   13362:	10 c0       	rjmp	.+32     	; 0x13384 <alloc_device+0x156>
   13364:	c8 01       	movw	r24, r16
   13366:	7f dd       	rcall	.-1282   	; 0x12e66 <type_to_str>
   13368:	ed b7       	in	r30, 0x3d	; 61
   1336a:	fe b7       	in	r31, 0x3e	; 62
   1336c:	97 83       	std	Z+7, r25	; 0x07
   1336e:	86 83       	std	Z+6, r24	; 0x06
   13370:	15 83       	std	Z+5, r17	; 0x05
   13372:	04 83       	std	Z+4, r16	; 0x04
   13374:	87 e4       	ldi	r24, 0x47	; 71
   13376:	9b e1       	ldi	r25, 0x1B	; 27
   13378:	a0 e0       	ldi	r26, 0x00	; 0
   1337a:	81 83       	std	Z+1, r24	; 0x01
   1337c:	92 83       	std	Z+2, r25	; 0x02
   1337e:	a3 83       	std	Z+3, r26	; 0x03
   13380:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   13384:	cf ef       	ldi	r28, 0xFF	; 255
   13386:	8c 2f       	mov	r24, r28
   13388:	ad b7       	in	r26, 0x3d	; 61
   1338a:	be b7       	in	r27, 0x3e	; 62
   1338c:	17 96       	adiw	r26, 0x07	; 7
   1338e:	0f b6       	in	r0, 0x3f	; 63
   13390:	f8 94       	cli
   13392:	be bf       	out	0x3e, r27	; 62
   13394:	0f be       	out	0x3f, r0	; 63
   13396:	ad bf       	out	0x3d, r26	; 61
   13398:	cf 91       	pop	r28
   1339a:	1f 91       	pop	r17
   1339c:	0f 91       	pop	r16
   1339e:	08 95       	ret

000133a0 <init_Devices>:
   133a0:	10 92 77 19 	sts	0x1977, r1	; 0x801977 <stack_ind+0x1>
   133a4:	10 92 76 19 	sts	0x1976, r1	; 0x801976 <stack_ind>
   133a8:	e4 ef       	ldi	r30, 0xF4	; 244
   133aa:	fe e1       	ldi	r31, 0x1E	; 30
   133ac:	8f ef       	ldi	r24, 0xFF	; 255
   133ae:	10 82       	st	Z, r1
   133b0:	11 82       	std	Z+1, r1	; 0x01
   133b2:	82 83       	std	Z+2, r24	; 0x02
   133b4:	13 82       	std	Z+3, r1	; 0x03
   133b6:	14 82       	std	Z+4, r1	; 0x04
   133b8:	15 82       	std	Z+5, r1	; 0x05
   133ba:	16 82       	std	Z+6, r1	; 0x06
   133bc:	10 86       	std	Z+8, r1	; 0x08
   133be:	17 82       	std	Z+7, r1	; 0x07
   133c0:	12 86       	std	Z+10, r1	; 0x0a
   133c2:	11 86       	std	Z+9, r1	; 0x09
   133c4:	3b 96       	adiw	r30, 0x0b	; 11
   133c6:	9f e1       	ldi	r25, 0x1F	; 31
   133c8:	e8 37       	cpi	r30, 0x78	; 120
   133ca:	f9 07       	cpc	r31, r25
   133cc:	81 f7       	brne	.-32     	; 0x133ae <init_Devices+0xe>
   133ce:	08 95       	ret

000133d0 <push_state>:
   133d0:	20 91 76 19 	lds	r18, 0x1976	; 0x801976 <stack_ind>
   133d4:	30 91 77 19 	lds	r19, 0x1977	; 0x801977 <stack_ind+0x1>
   133d8:	25 30       	cpi	r18, 0x05	; 5
   133da:	31 05       	cpc	r19, r1
   133dc:	7c f4       	brge	.+30     	; 0x133fc <push_state+0x2c>
   133de:	a9 01       	movw	r20, r18
   133e0:	4f 5f       	subi	r20, 0xFF	; 255
   133e2:	5f 4f       	sbci	r21, 0xFF	; 255
   133e4:	50 93 77 19 	sts	0x1977, r21	; 0x801977 <stack_ind+0x1>
   133e8:	40 93 76 19 	sts	0x1976, r20	; 0x801976 <stack_ind>
   133ec:	22 0f       	add	r18, r18
   133ee:	33 1f       	adc	r19, r19
   133f0:	f9 01       	movw	r30, r18
   133f2:	e4 59       	subi	r30, 0x94	; 148
   133f4:	f6 4e       	sbci	r31, 0xE6	; 230
   133f6:	80 83       	st	Z, r24
   133f8:	91 83       	std	Z+1, r25	; 0x01
   133fa:	08 95       	ret
   133fc:	80 e0       	ldi	r24, 0x00	; 0
   133fe:	90 e0       	ldi	r25, 0x00	; 0
   13400:	08 95       	ret

00013402 <pop_state>:
   13402:	80 91 76 19 	lds	r24, 0x1976	; 0x801976 <stack_ind>
   13406:	90 91 77 19 	lds	r25, 0x1977	; 0x801977 <stack_ind+0x1>
   1340a:	18 16       	cp	r1, r24
   1340c:	19 06       	cpc	r1, r25
   1340e:	6c f4       	brge	.+26     	; 0x1342a <pop_state+0x28>
   13410:	01 97       	sbiw	r24, 0x01	; 1
   13412:	90 93 77 19 	sts	0x1977, r25	; 0x801977 <stack_ind+0x1>
   13416:	80 93 76 19 	sts	0x1976, r24	; 0x801976 <stack_ind>
   1341a:	88 0f       	add	r24, r24
   1341c:	99 1f       	adc	r25, r25
   1341e:	fc 01       	movw	r30, r24
   13420:	e4 59       	subi	r30, 0x94	; 148
   13422:	f6 4e       	sbci	r31, 0xE6	; 230
   13424:	80 81       	ld	r24, Z
   13426:	91 81       	ldd	r25, Z+1	; 0x01
   13428:	08 95       	ret
   1342a:	80 e0       	ldi	r24, 0x00	; 0
   1342c:	90 e0       	ldi	r25, 0x00	; 0
   1342e:	08 95       	ret

00013430 <set_Config_Defaults>:
   13430:	08 95       	ret

00013432 <hpdir_set_device>:
   13432:	cf 93       	push	r28
   13434:	df 93       	push	r29
   13436:	00 d0       	rcall	.+0      	; 0x13438 <hpdir_set_device+0x6>
   13438:	1f 92       	push	r1
   1343a:	2b e0       	ldi	r18, 0x0B	; 11
   1343c:	82 02       	muls	r24, r18
   1343e:	c0 01       	movw	r24, r0
   13440:	11 24       	eor	r1, r1
   13442:	fc 01       	movw	r30, r24
   13444:	ec 50       	subi	r30, 0x0C	; 12
   13446:	f1 4e       	sbci	r31, 0xE1	; 225
   13448:	80 81       	ld	r24, Z
   1344a:	83 30       	cpi	r24, 0x03	; 3
   1344c:	a1 f5       	brne	.+104    	; 0x134b6 <hpdir_set_device+0x84>
   1344e:	c7 81       	ldd	r28, Z+7	; 0x07
   13450:	d0 85       	ldd	r29, Z+8	; 0x08
   13452:	80 91 f8 1f 	lds	r24, 0x1FF8	; 0x801ff8 <hpdir+0x80>
   13456:	90 91 f9 1f 	lds	r25, 0x1FF9	; 0x801ff9 <hpdir+0x81>
   1345a:	9f 83       	std	Y+7, r25	; 0x07
   1345c:	8e 83       	std	Y+6, r24	; 0x06
   1345e:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <hpdir+0x8c>
   13462:	90 91 05 20 	lds	r25, 0x2005	; 0x802005 <hpdir+0x8d>
   13466:	a0 91 06 20 	lds	r26, 0x2006	; 0x802006 <hpdir+0x8e>
   1346a:	b0 91 07 20 	lds	r27, 0x2007	; 0x802007 <hpdir+0x8f>
   1346e:	8e 87       	std	Y+14, r24	; 0x0e
   13470:	9f 87       	std	Y+15, r25	; 0x0f
   13472:	a8 8b       	std	Y+16, r26	; 0x10
   13474:	b9 8b       	std	Y+17, r27	; 0x11
   13476:	80 91 18 20 	lds	r24, 0x2018	; 0x802018 <hpdir+0xa0>
   1347a:	90 91 19 20 	lds	r25, 0x2019	; 0x802019 <hpdir+0xa1>
   1347e:	9b 8b       	std	Y+19, r25	; 0x13
   13480:	8a 8b       	std	Y+18, r24	; 0x12
   13482:	19 a2       	std	Y+33, r1	; 0x21
   13484:	1a a2       	std	Y+34, r1	; 0x22
   13486:	1b a2       	std	Y+35, r1	; 0x23
   13488:	1c a2       	std	Y+36, r1	; 0x24
   1348a:	1d a2       	std	Y+37, r1	; 0x25
   1348c:	1f a2       	std	Y+39, r1	; 0x27
   1348e:	1e a2       	std	Y+38, r1	; 0x26
   13490:	80 91 24 20 	lds	r24, 0x2024	; 0x802024 <hpdir+0xac>
   13494:	90 91 25 20 	lds	r25, 0x2025	; 0x802025 <hpdir+0xad>
   13498:	a0 91 26 20 	lds	r26, 0x2026	; 0x802026 <hpdir+0xae>
   1349c:	b0 91 27 20 	lds	r27, 0x2027	; 0x802027 <hpdir+0xaf>
   134a0:	ac 01       	movw	r20, r24
   134a2:	bd 01       	movw	r22, r26
   134a4:	41 50       	subi	r20, 0x01	; 1
   134a6:	51 09       	sbc	r21, r1
   134a8:	61 09       	sbc	r22, r1
   134aa:	71 09       	sbc	r23, r1
   134ac:	48 a7       	std	Y+40, r20	; 0x28
   134ae:	59 a7       	std	Y+41, r21	; 0x29
   134b0:	6a a7       	std	Y+42, r22	; 0x2a
   134b2:	7b a7       	std	Y+43, r23	; 0x2b
   134b4:	2a c0       	rjmp	.+84     	; 0x1350a <hpdir_set_device+0xd8>
   134b6:	81 30       	cpi	r24, 0x01	; 1
   134b8:	a1 f5       	brne	.+104    	; 0x13522 <hpdir_set_device+0xf0>
   134ba:	c7 81       	ldd	r28, Z+7	; 0x07
   134bc:	d0 85       	ldd	r29, Z+8	; 0x08
   134be:	80 91 f8 1f 	lds	r24, 0x1FF8	; 0x801ff8 <hpdir+0x80>
   134c2:	90 91 f9 1f 	lds	r25, 0x1FF9	; 0x801ff9 <hpdir+0x81>
   134c6:	9f 83       	std	Y+7, r25	; 0x07
   134c8:	8e 83       	std	Y+6, r24	; 0x06
   134ca:	80 91 18 20 	lds	r24, 0x2018	; 0x802018 <hpdir+0xa0>
   134ce:	90 91 19 20 	lds	r25, 0x2019	; 0x802019 <hpdir+0xa1>
   134d2:	99 87       	std	Y+9, r25	; 0x09
   134d4:	88 87       	std	Y+8, r24	; 0x08
   134d6:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <hpdir+0x9c>
   134da:	90 91 15 20 	lds	r25, 0x2015	; 0x802015 <hpdir+0x9d>
   134de:	9b 87       	std	Y+11, r25	; 0x0b
   134e0:	8a 87       	std	Y+10, r24	; 0x0a
   134e2:	80 91 10 20 	lds	r24, 0x2010	; 0x802010 <hpdir+0x98>
   134e6:	90 91 11 20 	lds	r25, 0x2011	; 0x802011 <hpdir+0x99>
   134ea:	9d 87       	std	Y+13, r25	; 0x0d
   134ec:	8c 87       	std	Y+12, r24	; 0x0c
   134ee:	80 91 0c 20 	lds	r24, 0x200C	; 0x80200c <hpdir+0x94>
   134f2:	90 91 0d 20 	lds	r25, 0x200D	; 0x80200d <hpdir+0x95>
   134f6:	9f 87       	std	Y+15, r25	; 0x0f
   134f8:	8e 87       	std	Y+14, r24	; 0x0e
   134fa:	80 91 24 20 	lds	r24, 0x2024	; 0x802024 <hpdir+0xac>
   134fe:	90 91 25 20 	lds	r25, 0x2025	; 0x802025 <hpdir+0xad>
   13502:	a0 91 26 20 	lds	r26, 0x2026	; 0x802026 <hpdir+0xae>
   13506:	b0 91 27 20 	lds	r27, 0x2027	; 0x802027 <hpdir+0xaf>
   1350a:	83 83       	std	Z+3, r24	; 0x03
   1350c:	94 83       	std	Z+4, r25	; 0x04
   1350e:	a5 83       	std	Z+5, r26	; 0x05
   13510:	b6 83       	std	Z+6, r27	; 0x06
   13512:	88 e7       	ldi	r24, 0x78	; 120
   13514:	9f e1       	ldi	r25, 0x1F	; 31
   13516:	0e 94 da 31 	call	0x63b4	; 0x63b4 <stralloc>
   1351a:	9d 83       	std	Y+5, r25	; 0x05
   1351c:	8c 83       	std	Y+4, r24	; 0x04
   1351e:	81 e0       	ldi	r24, 0x01	; 1
   13520:	0b c0       	rjmp	.+22     	; 0x13538 <hpdir_set_device+0x106>
   13522:	8f e1       	ldi	r24, 0x1F	; 31
   13524:	9b e1       	ldi	r25, 0x1B	; 27
   13526:	a0 e0       	ldi	r26, 0x00	; 0
   13528:	ed b7       	in	r30, 0x3d	; 61
   1352a:	fe b7       	in	r31, 0x3e	; 62
   1352c:	81 83       	std	Z+1, r24	; 0x01
   1352e:	92 83       	std	Z+2, r25	; 0x02
   13530:	a3 83       	std	Z+3, r26	; 0x03
   13532:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   13536:	80 e0       	ldi	r24, 0x00	; 0
   13538:	cd b7       	in	r28, 0x3d	; 61
   1353a:	de b7       	in	r29, 0x3e	; 62
   1353c:	23 96       	adiw	r28, 0x03	; 3
   1353e:	e2 e0       	ldi	r30, 0x02	; 2
   13540:	0c 94 e7 e6 	jmp	0x1cdce	; 0x1cdce <__epilogue_restores__+0x20>

00013544 <hpdir_set_parameters>:
   13544:	cf 93       	push	r28
   13546:	00 d0       	rcall	.+0      	; 0x13548 <hpdir_set_parameters+0x4>
   13548:	1f 92       	push	r1
   1354a:	c8 2f       	mov	r28, r24
   1354c:	cb 01       	movw	r24, r22
   1354e:	41 e0       	ldi	r20, 0x01	; 1
   13550:	50 e0       	ldi	r21, 0x00	; 0
   13552:	60 e0       	ldi	r22, 0x00	; 0
   13554:	70 e0       	ldi	r23, 0x00	; 0
   13556:	0e 94 e6 a3 	call	0x147cc	; 0x147cc <hpdir_find_drive>
   1355a:	89 2b       	or	r24, r25
   1355c:	19 f0       	breq	.+6      	; 0x13564 <hpdir_set_parameters+0x20>
   1355e:	8c 2f       	mov	r24, r28
   13560:	68 df       	rcall	.-304    	; 0x13432 <hpdir_set_device>
   13562:	0b c0       	rjmp	.+22     	; 0x1357a <hpdir_set_parameters+0x36>
   13564:	87 ef       	ldi	r24, 0xF7	; 247
   13566:	9a e1       	ldi	r25, 0x1A	; 26
   13568:	a0 e0       	ldi	r26, 0x00	; 0
   1356a:	ed b7       	in	r30, 0x3d	; 61
   1356c:	fe b7       	in	r31, 0x3e	; 62
   1356e:	81 83       	std	Z+1, r24	; 0x01
   13570:	92 83       	std	Z+2, r25	; 0x02
   13572:	a3 83       	std	Z+3, r26	; 0x03
   13574:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   13578:	80 e0       	ldi	r24, 0x00	; 0
   1357a:	0f 90       	pop	r0
   1357c:	0f 90       	pop	r0
   1357e:	0f 90       	pop	r0
   13580:	cf 91       	pop	r28
   13582:	08 95       	ret

00013584 <format_drives>:
   13584:	2f 92       	push	r2
   13586:	3f 92       	push	r3
   13588:	4f 92       	push	r4
   1358a:	5f 92       	push	r5
   1358c:	6f 92       	push	r6
   1358e:	7f 92       	push	r7
   13590:	8f 92       	push	r8
   13592:	af 92       	push	r10
   13594:	bf 92       	push	r11
   13596:	cf 92       	push	r12
   13598:	df 92       	push	r13
   1359a:	ef 92       	push	r14
   1359c:	ff 92       	push	r15
   1359e:	0f 93       	push	r16
   135a0:	1f 93       	push	r17
   135a2:	cf 93       	push	r28
   135a4:	df 93       	push	r29
   135a6:	cd b7       	in	r28, 0x3d	; 61
   135a8:	de b7       	in	r29, 0x3e	; 62
   135aa:	ce 56       	subi	r28, 0x6E	; 110
   135ac:	d1 09       	sbc	r29, r1
   135ae:	0f b6       	in	r0, 0x3f	; 63
   135b0:	f8 94       	cli
   135b2:	de bf       	out	0x3e, r29	; 62
   135b4:	0f be       	out	0x3f, r0	; 63
   135b6:	cd bf       	out	0x3d, r28	; 61
   135b8:	84 ef       	ldi	r24, 0xF4	; 244
   135ba:	c8 2e       	mov	r12, r24
   135bc:	8e e1       	ldi	r24, 0x1E	; 30
   135be:	d8 2e       	mov	r13, r24
   135c0:	a0 96       	adiw	r28, 0x20	; 32
   135c2:	1f ae       	std	Y+63, r1	; 0x3f
   135c4:	1e ae       	std	Y+62, r1	; 0x3e
   135c6:	a0 97       	sbiw	r28, 0x20	; 32
   135c8:	6e 96       	adiw	r28, 0x1e	; 30
   135ca:	1f ae       	std	Y+63, r1	; 0x3f
   135cc:	1e ae       	std	Y+62, r1	; 0x3e
   135ce:	6e 97       	sbiw	r28, 0x1e	; 30
   135d0:	6c 96       	adiw	r28, 0x1c	; 28
   135d2:	1f ae       	std	Y+63, r1	; 0x3f
   135d4:	1e ae       	std	Y+62, r1	; 0x3e
   135d6:	6c 97       	sbiw	r28, 0x1c	; 28
   135d8:	84 ed       	ldi	r24, 0xD4	; 212
   135da:	99 e1       	ldi	r25, 0x19	; 25
   135dc:	9c 01       	movw	r18, r24
   135de:	40 e0       	ldi	r20, 0x00	; 0
   135e0:	a3 96       	adiw	r28, 0x23	; 35
   135e2:	2d af       	std	Y+61, r18	; 0x3d
   135e4:	3e af       	std	Y+62, r19	; 0x3e
   135e6:	4f af       	std	Y+63, r20	; 0x3f
   135e8:	a3 97       	sbiw	r28, 0x23	; 35
   135ea:	8c ec       	ldi	r24, 0xCC	; 204
   135ec:	99 e1       	ldi	r25, 0x19	; 25
   135ee:	9c 01       	movw	r18, r24
   135f0:	40 e0       	ldi	r20, 0x00	; 0
   135f2:	a6 96       	adiw	r28, 0x26	; 38
   135f4:	2d af       	std	Y+61, r18	; 0x3d
   135f6:	3e af       	std	Y+62, r19	; 0x3e
   135f8:	4f af       	std	Y+63, r20	; 0x3f
   135fa:	a6 97       	sbiw	r28, 0x26	; 38
   135fc:	8e ee       	ldi	r24, 0xEE	; 238
   135fe:	99 e1       	ldi	r25, 0x19	; 25
   13600:	9c 01       	movw	r18, r24
   13602:	40 e0       	ldi	r20, 0x00	; 0
   13604:	a9 96       	adiw	r28, 0x29	; 41
   13606:	2d af       	std	Y+61, r18	; 0x3d
   13608:	3e af       	std	Y+62, r19	; 0x3e
   1360a:	4f af       	std	Y+63, r20	; 0x3f
   1360c:	a9 97       	sbiw	r28, 0x29	; 41
   1360e:	88 e1       	ldi	r24, 0x18	; 24
   13610:	9a e1       	ldi	r25, 0x1A	; 26
   13612:	9c 01       	movw	r18, r24
   13614:	40 e0       	ldi	r20, 0x00	; 0
   13616:	ac 96       	adiw	r28, 0x2c	; 44
   13618:	2d af       	std	Y+61, r18	; 0x3d
   1361a:	3e af       	std	Y+62, r19	; 0x3e
   1361c:	4f af       	std	Y+63, r20	; 0x3f
   1361e:	ac 97       	sbiw	r28, 0x2c	; 44
   13620:	80 e1       	ldi	r24, 0x10	; 16
   13622:	9a e1       	ldi	r25, 0x1A	; 26
   13624:	9c 01       	movw	r18, r24
   13626:	40 e0       	ldi	r20, 0x00	; 0
   13628:	af 96       	adiw	r28, 0x2f	; 47
   1362a:	2d af       	std	Y+61, r18	; 0x3d
   1362c:	3e af       	std	Y+62, r19	; 0x3e
   1362e:	4f af       	std	Y+63, r20	; 0x3f
   13630:	af 97       	sbiw	r28, 0x2f	; 47
   13632:	82 e3       	ldi	r24, 0x32	; 50
   13634:	9a e1       	ldi	r25, 0x1A	; 26
   13636:	3c 01       	movw	r6, r24
   13638:	81 2c       	mov	r8, r1
   1363a:	f6 01       	movw	r30, r12
   1363c:	80 81       	ld	r24, Z
   1363e:	88 23       	and	r24, r24
   13640:	09 f4       	brne	.+2      	; 0x13644 <format_drives+0xc0>
   13642:	f0 c0       	rjmp	.+480    	; 0x13824 <format_drives+0x2a0>
   13644:	83 30       	cpi	r24, 0x03	; 3
   13646:	09 f0       	breq	.+2      	; 0x1364a <format_drives+0xc6>
   13648:	71 c0       	rjmp	.+226    	; 0x1372c <format_drives+0x1a8>
   1364a:	a7 80       	ldd	r10, Z+7	; 0x07
   1364c:	b0 84       	ldd	r11, Z+8	; 0x08
   1364e:	be 01       	movw	r22, r28
   13650:	66 5f       	subi	r22, 0xF6	; 246
   13652:	7f 4f       	sbci	r23, 0xFF	; 255
   13654:	f5 01       	movw	r30, r10
   13656:	82 81       	ldd	r24, Z+2	; 0x02
   13658:	93 81       	ldd	r25, Z+3	; 0x03
   1365a:	0e 94 2f 79 	call	0xf25e	; 0xf25e <stat>
   1365e:	01 96       	adiw	r24, 0x01	; 1
   13660:	09 f0       	breq	.+2      	; 0x13664 <format_drives+0xe0>
   13662:	64 c0       	rjmp	.+200    	; 0x1372c <format_drives+0x1a8>
   13664:	f5 01       	movw	r30, r10
   13666:	82 89       	ldd	r24, Z+18	; 0x12
   13668:	93 89       	ldd	r25, Z+19	; 0x13
   1366a:	81 15       	cp	r24, r1
   1366c:	91 40       	sbci	r25, 0x01	; 1
   1366e:	31 f0       	breq	.+12     	; 0x1367c <format_drives+0xf8>
   13670:	ed b7       	in	r30, 0x3d	; 61
   13672:	fe b7       	in	r31, 0x3e	; 62
   13674:	61 82       	std	Z+1, r6	; 0x01
   13676:	72 82       	std	Z+2, r7	; 0x02
   13678:	83 82       	std	Z+3, r8	; 0x03
   1367a:	7a c0       	rjmp	.+244    	; 0x13770 <format_drives+0x1ec>
   1367c:	f6 01       	movw	r30, r12
   1367e:	23 80       	ldd	r2, Z+3	; 0x03
   13680:	34 80       	ldd	r3, Z+4	; 0x04
   13682:	45 80       	ldd	r4, Z+5	; 0x05
   13684:	56 80       	ldd	r5, Z+6	; 0x06
   13686:	ed b7       	in	r30, 0x3d	; 61
   13688:	fe b7       	in	r31, 0x3e	; 62
   1368a:	26 82       	std	Z+6, r2	; 0x06
   1368c:	37 82       	std	Z+7, r3	; 0x07
   1368e:	40 86       	std	Z+8, r4	; 0x08
   13690:	51 86       	std	Z+9, r5	; 0x09
   13692:	f5 01       	movw	r30, r10
   13694:	82 81       	ldd	r24, Z+2	; 0x02
   13696:	93 81       	ldd	r25, Z+3	; 0x03
   13698:	ed b7       	in	r30, 0x3d	; 61
   1369a:	fe b7       	in	r31, 0x3e	; 62
   1369c:	95 83       	std	Z+5, r25	; 0x05
   1369e:	84 83       	std	Z+4, r24	; 0x04
   136a0:	ac 96       	adiw	r28, 0x2c	; 44
   136a2:	2d ad       	ldd	r18, Y+61	; 0x3d
   136a4:	3e ad       	ldd	r19, Y+62	; 0x3e
   136a6:	4f ad       	ldd	r20, Y+63	; 0x3f
   136a8:	ac 97       	sbiw	r28, 0x2c	; 44
   136aa:	21 83       	std	Z+1, r18	; 0x01
   136ac:	32 83       	std	Z+2, r19	; 0x02
   136ae:	43 83       	std	Z+3, r20	; 0x03
   136b0:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   136b4:	6e 96       	adiw	r28, 0x1e	; 30
   136b6:	2e ad       	ldd	r18, Y+62	; 0x3e
   136b8:	3f ad       	ldd	r19, Y+63	; 0x3f
   136ba:	6e 97       	sbiw	r28, 0x1e	; 30
   136bc:	ed b7       	in	r30, 0x3d	; 61
   136be:	fe b7       	in	r31, 0x3e	; 62
   136c0:	37 83       	std	Z+7, r19	; 0x07
   136c2:	26 83       	std	Z+6, r18	; 0x06
   136c4:	af 96       	adiw	r28, 0x2f	; 47
   136c6:	8d ad       	ldd	r24, Y+61	; 0x3d
   136c8:	9e ad       	ldd	r25, Y+62	; 0x3e
   136ca:	af ad       	ldd	r26, Y+63	; 0x3f
   136cc:	af 97       	sbiw	r28, 0x2f	; 47
   136ce:	83 83       	std	Z+3, r24	; 0x03
   136d0:	94 83       	std	Z+4, r25	; 0x04
   136d2:	a5 83       	std	Z+5, r26	; 0x05
   136d4:	2a e3       	ldi	r18, 0x3A	; 58
   136d6:	30 e0       	ldi	r19, 0x00	; 0
   136d8:	2c 0f       	add	r18, r28
   136da:	3d 1f       	adc	r19, r29
   136dc:	32 83       	std	Z+2, r19	; 0x02
   136de:	21 83       	std	Z+1, r18	; 0x01
   136e0:	0e 94 d7 46 	call	0x8dae	; 0x8dae <sprintf_P>
   136e4:	f5 01       	movw	r30, r10
   136e6:	a2 80       	ldd	r10, Z+2	; 0x02
   136e8:	b3 80       	ldd	r11, Z+3	; 0x03
   136ea:	c2 01       	movw	r24, r4
   136ec:	b1 01       	movw	r22, r2
   136ee:	0e 94 c9 a3 	call	0x14792	; 0x14792 <lif_dir_count>
   136f2:	9b 01       	movw	r18, r22
   136f4:	ac 01       	movw	r20, r24
   136f6:	82 01       	movw	r16, r4
   136f8:	71 01       	movw	r14, r2
   136fa:	be 01       	movw	r22, r28
   136fc:	66 5c       	subi	r22, 0xC6	; 198
   136fe:	7f 4f       	sbci	r23, 0xFF	; 255
   13700:	c5 01       	movw	r24, r10
   13702:	0e 94 52 de 	call	0x1bca4	; 0x1bca4 <lif_create_image>
   13706:	6c 96       	adiw	r28, 0x1c	; 28
   13708:	2e ad       	ldd	r18, Y+62	; 0x3e
   1370a:	3f ad       	ldd	r19, Y+63	; 0x3f
   1370c:	6c 97       	sbiw	r28, 0x1c	; 28
   1370e:	2f 5f       	subi	r18, 0xFF	; 255
   13710:	3f 4f       	sbci	r19, 0xFF	; 255
   13712:	6c 96       	adiw	r28, 0x1c	; 28
   13714:	3f af       	std	Y+63, r19	; 0x3f
   13716:	2e af       	std	Y+62, r18	; 0x3e
   13718:	6c 97       	sbiw	r28, 0x1c	; 28
   1371a:	6e 96       	adiw	r28, 0x1e	; 30
   1371c:	8e ad       	ldd	r24, Y+62	; 0x3e
   1371e:	9f ad       	ldd	r25, Y+63	; 0x3f
   13720:	6e 97       	sbiw	r28, 0x1e	; 30
   13722:	01 96       	adiw	r24, 0x01	; 1
   13724:	6e 96       	adiw	r28, 0x1e	; 30
   13726:	9f af       	std	Y+63, r25	; 0x3f
   13728:	8e af       	std	Y+62, r24	; 0x3e
   1372a:	6e 97       	sbiw	r28, 0x1e	; 30
   1372c:	f6 01       	movw	r30, r12
   1372e:	80 81       	ld	r24, Z
   13730:	81 30       	cpi	r24, 0x01	; 1
   13732:	09 f0       	breq	.+2      	; 0x13736 <format_drives+0x1b2>
   13734:	77 c0       	rjmp	.+238    	; 0x13824 <format_drives+0x2a0>
   13736:	a7 80       	ldd	r10, Z+7	; 0x07
   13738:	b0 84       	ldd	r11, Z+8	; 0x08
   1373a:	be 01       	movw	r22, r28
   1373c:	66 5f       	subi	r22, 0xF6	; 246
   1373e:	7f 4f       	sbci	r23, 0xFF	; 255
   13740:	f5 01       	movw	r30, r10
   13742:	82 81       	ldd	r24, Z+2	; 0x02
   13744:	93 81       	ldd	r25, Z+3	; 0x03
   13746:	0e 94 2f 79 	call	0xf25e	; 0xf25e <stat>
   1374a:	01 96       	adiw	r24, 0x01	; 1
   1374c:	09 f0       	breq	.+2      	; 0x13750 <format_drives+0x1cc>
   1374e:	6a c0       	rjmp	.+212    	; 0x13824 <format_drives+0x2a0>
   13750:	f5 01       	movw	r30, r10
   13752:	80 85       	ldd	r24, Z+8	; 0x08
   13754:	91 85       	ldd	r25, Z+9	; 0x09
   13756:	81 15       	cp	r24, r1
   13758:	91 40       	sbci	r25, 0x01	; 1
   1375a:	69 f0       	breq	.+26     	; 0x13776 <format_drives+0x1f2>
   1375c:	a9 96       	adiw	r28, 0x29	; 41
   1375e:	2d ad       	ldd	r18, Y+61	; 0x3d
   13760:	3e ad       	ldd	r19, Y+62	; 0x3e
   13762:	4f ad       	ldd	r20, Y+63	; 0x3f
   13764:	a9 97       	sbiw	r28, 0x29	; 41
   13766:	ed b7       	in	r30, 0x3d	; 61
   13768:	fe b7       	in	r31, 0x3e	; 62
   1376a:	21 83       	std	Z+1, r18	; 0x01
   1376c:	32 83       	std	Z+2, r19	; 0x02
   1376e:	43 83       	std	Z+3, r20	; 0x03
   13770:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   13774:	57 c0       	rjmp	.+174    	; 0x13824 <format_drives+0x2a0>
   13776:	f6 01       	movw	r30, r12
   13778:	23 80       	ldd	r2, Z+3	; 0x03
   1377a:	34 80       	ldd	r3, Z+4	; 0x04
   1377c:	45 80       	ldd	r4, Z+5	; 0x05
   1377e:	56 80       	ldd	r5, Z+6	; 0x06
   13780:	ed b7       	in	r30, 0x3d	; 61
   13782:	fe b7       	in	r31, 0x3e	; 62
   13784:	26 82       	std	Z+6, r2	; 0x06
   13786:	37 82       	std	Z+7, r3	; 0x07
   13788:	40 86       	std	Z+8, r4	; 0x08
   1378a:	51 86       	std	Z+9, r5	; 0x09
   1378c:	f5 01       	movw	r30, r10
   1378e:	82 81       	ldd	r24, Z+2	; 0x02
   13790:	93 81       	ldd	r25, Z+3	; 0x03
   13792:	ed b7       	in	r30, 0x3d	; 61
   13794:	fe b7       	in	r31, 0x3e	; 62
   13796:	95 83       	std	Z+5, r25	; 0x05
   13798:	84 83       	std	Z+4, r24	; 0x04
   1379a:	a3 96       	adiw	r28, 0x23	; 35
   1379c:	2d ad       	ldd	r18, Y+61	; 0x3d
   1379e:	3e ad       	ldd	r19, Y+62	; 0x3e
   137a0:	4f ad       	ldd	r20, Y+63	; 0x3f
   137a2:	a3 97       	sbiw	r28, 0x23	; 35
   137a4:	21 83       	std	Z+1, r18	; 0x01
   137a6:	32 83       	std	Z+2, r19	; 0x02
   137a8:	43 83       	std	Z+3, r20	; 0x03
   137aa:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   137ae:	a0 96       	adiw	r28, 0x20	; 32
   137b0:	2e ad       	ldd	r18, Y+62	; 0x3e
   137b2:	3f ad       	ldd	r19, Y+63	; 0x3f
   137b4:	a0 97       	sbiw	r28, 0x20	; 32
   137b6:	ed b7       	in	r30, 0x3d	; 61
   137b8:	fe b7       	in	r31, 0x3e	; 62
   137ba:	37 83       	std	Z+7, r19	; 0x07
   137bc:	26 83       	std	Z+6, r18	; 0x06
   137be:	a6 96       	adiw	r28, 0x26	; 38
   137c0:	8d ad       	ldd	r24, Y+61	; 0x3d
   137c2:	9e ad       	ldd	r25, Y+62	; 0x3e
   137c4:	af ad       	ldd	r26, Y+63	; 0x3f
   137c6:	a6 97       	sbiw	r28, 0x26	; 38
   137c8:	83 83       	std	Z+3, r24	; 0x03
   137ca:	94 83       	std	Z+4, r25	; 0x04
   137cc:	a5 83       	std	Z+5, r26	; 0x05
   137ce:	2a e3       	ldi	r18, 0x3A	; 58
   137d0:	30 e0       	ldi	r19, 0x00	; 0
   137d2:	2c 0f       	add	r18, r28
   137d4:	3d 1f       	adc	r19, r29
   137d6:	32 83       	std	Z+2, r19	; 0x02
   137d8:	21 83       	std	Z+1, r18	; 0x01
   137da:	0e 94 d7 46 	call	0x8dae	; 0x8dae <sprintf_P>
   137de:	f5 01       	movw	r30, r10
   137e0:	a2 80       	ldd	r10, Z+2	; 0x02
   137e2:	b3 80       	ldd	r11, Z+3	; 0x03
   137e4:	c2 01       	movw	r24, r4
   137e6:	b1 01       	movw	r22, r2
   137e8:	d4 d7       	rcall	.+4008   	; 0x14792 <lif_dir_count>
   137ea:	9b 01       	movw	r18, r22
   137ec:	ac 01       	movw	r20, r24
   137ee:	82 01       	movw	r16, r4
   137f0:	71 01       	movw	r14, r2
   137f2:	be 01       	movw	r22, r28
   137f4:	66 5c       	subi	r22, 0xC6	; 198
   137f6:	7f 4f       	sbci	r23, 0xFF	; 255
   137f8:	c5 01       	movw	r24, r10
   137fa:	0e 94 52 de 	call	0x1bca4	; 0x1bca4 <lif_create_image>
   137fe:	6c 96       	adiw	r28, 0x1c	; 28
   13800:	2e ad       	ldd	r18, Y+62	; 0x3e
   13802:	3f ad       	ldd	r19, Y+63	; 0x3f
   13804:	6c 97       	sbiw	r28, 0x1c	; 28
   13806:	2f 5f       	subi	r18, 0xFF	; 255
   13808:	3f 4f       	sbci	r19, 0xFF	; 255
   1380a:	6c 96       	adiw	r28, 0x1c	; 28
   1380c:	3f af       	std	Y+63, r19	; 0x3f
   1380e:	2e af       	std	Y+62, r18	; 0x3e
   13810:	6c 97       	sbiw	r28, 0x1c	; 28
   13812:	a0 96       	adiw	r28, 0x20	; 32
   13814:	8e ad       	ldd	r24, Y+62	; 0x3e
   13816:	9f ad       	ldd	r25, Y+63	; 0x3f
   13818:	a0 97       	sbiw	r28, 0x20	; 32
   1381a:	01 96       	adiw	r24, 0x01	; 1
   1381c:	a0 96       	adiw	r28, 0x20	; 32
   1381e:	9f af       	std	Y+63, r25	; 0x3f
   13820:	8e af       	std	Y+62, r24	; 0x3e
   13822:	a0 97       	sbiw	r28, 0x20	; 32
   13824:	9b e0       	ldi	r25, 0x0B	; 11
   13826:	c9 0e       	add	r12, r25
   13828:	d1 1c       	adc	r13, r1
   1382a:	a8 e7       	ldi	r26, 0x78	; 120
   1382c:	ca 16       	cp	r12, r26
   1382e:	af e1       	ldi	r26, 0x1F	; 31
   13830:	da 06       	cpc	r13, r26
   13832:	09 f0       	breq	.+2      	; 0x13836 <format_drives+0x2b2>
   13834:	02 cf       	rjmp	.-508    	; 0x1363a <format_drives+0xb6>
   13836:	6c 96       	adiw	r28, 0x1c	; 28
   13838:	ee ad       	ldd	r30, Y+62	; 0x3e
   1383a:	ff ad       	ldd	r31, Y+63	; 0x3f
   1383c:	6c 97       	sbiw	r28, 0x1c	; 28
   1383e:	ef 2b       	or	r30, r31
   13840:	11 f0       	breq	.+4      	; 0x13846 <format_drives+0x2c2>
   13842:	0e 94 fa 31 	call	0x63f4	; 0x63f4 <sep>
   13846:	c2 59       	subi	r28, 0x92	; 146
   13848:	df 4f       	sbci	r29, 0xFF	; 255
   1384a:	0f b6       	in	r0, 0x3f	; 63
   1384c:	f8 94       	cli
   1384e:	de bf       	out	0x3e, r29	; 62
   13850:	0f be       	out	0x3f, r0	; 63
   13852:	cd bf       	out	0x3d, r28	; 61
   13854:	df 91       	pop	r29
   13856:	cf 91       	pop	r28
   13858:	1f 91       	pop	r17
   1385a:	0f 91       	pop	r16
   1385c:	ff 90       	pop	r15
   1385e:	ef 90       	pop	r14
   13860:	df 90       	pop	r13
   13862:	cf 90       	pop	r12
   13864:	bf 90       	pop	r11
   13866:	af 90       	pop	r10
   13868:	8f 90       	pop	r8
   1386a:	7f 90       	pop	r7
   1386c:	6f 90       	pop	r6
   1386e:	5f 90       	pop	r5
   13870:	4f 90       	pop	r4
   13872:	3f 90       	pop	r3
   13874:	2f 90       	pop	r2
   13876:	08 95       	ret

00013878 <mount_usage>:
   13878:	00 d0       	rcall	.+0      	; 0x1387a <mount_usage+0x2>
   1387a:	1f 92       	push	r1
   1387c:	83 ec       	ldi	r24, 0xC3	; 195
   1387e:	99 e1       	ldi	r25, 0x19	; 25
   13880:	a0 e0       	ldi	r26, 0x00	; 0
   13882:	ed b7       	in	r30, 0x3d	; 61
   13884:	fe b7       	in	r31, 0x3e	; 62
   13886:	81 83       	std	Z+1, r24	; 0x01
   13888:	92 83       	std	Z+2, r25	; 0x02
   1388a:	a3 83       	std	Z+3, r26	; 0x03
   1388c:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   13890:	82 eb       	ldi	r24, 0xB2	; 178
   13892:	99 e1       	ldi	r25, 0x19	; 25
   13894:	a0 e0       	ldi	r26, 0x00	; 0
   13896:	ed b7       	in	r30, 0x3d	; 61
   13898:	fe b7       	in	r31, 0x3e	; 62
   1389a:	81 83       	std	Z+1, r24	; 0x01
   1389c:	92 83       	std	Z+2, r25	; 0x02
   1389e:	a3 83       	std	Z+3, r26	; 0x03
   138a0:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   138a4:	8d e8       	ldi	r24, 0x8D	; 141
   138a6:	99 e1       	ldi	r25, 0x19	; 25
   138a8:	a0 e0       	ldi	r26, 0x00	; 0
   138aa:	ed b7       	in	r30, 0x3d	; 61
   138ac:	fe b7       	in	r31, 0x3e	; 62
   138ae:	81 83       	std	Z+1, r24	; 0x01
   138b0:	92 83       	std	Z+2, r25	; 0x02
   138b2:	a3 83       	std	Z+3, r26	; 0x03
   138b4:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   138b8:	8a e6       	ldi	r24, 0x6A	; 106
   138ba:	99 e1       	ldi	r25, 0x19	; 25
   138bc:	a0 e0       	ldi	r26, 0x00	; 0
   138be:	ed b7       	in	r30, 0x3d	; 61
   138c0:	fe b7       	in	r31, 0x3e	; 62
   138c2:	81 83       	std	Z+1, r24	; 0x01
   138c4:	92 83       	std	Z+2, r25	; 0x02
   138c6:	a3 83       	std	Z+3, r26	; 0x03
   138c8:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   138cc:	88 e6       	ldi	r24, 0x68	; 104
   138ce:	99 e1       	ldi	r25, 0x19	; 25
   138d0:	a0 e0       	ldi	r26, 0x00	; 0
   138d2:	ed b7       	in	r30, 0x3d	; 61
   138d4:	fe b7       	in	r31, 0x3e	; 62
   138d6:	81 83       	std	Z+1, r24	; 0x01
   138d8:	92 83       	std	Z+2, r25	; 0x02
   138da:	a3 83       	std	Z+3, r26	; 0x03
   138dc:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   138e0:	86 e5       	ldi	r24, 0x56	; 86
   138e2:	99 e1       	ldi	r25, 0x19	; 25
   138e4:	a0 e0       	ldi	r26, 0x00	; 0
   138e6:	ed b7       	in	r30, 0x3d	; 61
   138e8:	fe b7       	in	r31, 0x3e	; 62
   138ea:	81 83       	std	Z+1, r24	; 0x01
   138ec:	92 83       	std	Z+2, r25	; 0x02
   138ee:	a3 83       	std	Z+3, r26	; 0x03
   138f0:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   138f4:	81 e4       	ldi	r24, 0x41	; 65
   138f6:	99 e1       	ldi	r25, 0x19	; 25
   138f8:	a0 e0       	ldi	r26, 0x00	; 0
   138fa:	ed b7       	in	r30, 0x3d	; 61
   138fc:	fe b7       	in	r31, 0x3e	; 62
   138fe:	81 83       	std	Z+1, r24	; 0x01
   13900:	92 83       	std	Z+2, r25	; 0x02
   13902:	a3 83       	std	Z+3, r26	; 0x03
   13904:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   13908:	8f e3       	ldi	r24, 0x3F	; 63
   1390a:	99 e1       	ldi	r25, 0x19	; 25
   1390c:	a0 e0       	ldi	r26, 0x00	; 0
   1390e:	ed b7       	in	r30, 0x3d	; 61
   13910:	fe b7       	in	r31, 0x3e	; 62
   13912:	81 83       	std	Z+1, r24	; 0x01
   13914:	92 83       	std	Z+2, r25	; 0x02
   13916:	a3 83       	std	Z+3, r26	; 0x03
   13918:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   1391c:	84 e2       	ldi	r24, 0x24	; 36
   1391e:	99 e1       	ldi	r25, 0x19	; 25
   13920:	a0 e0       	ldi	r26, 0x00	; 0
   13922:	ed b7       	in	r30, 0x3d	; 61
   13924:	fe b7       	in	r31, 0x3e	; 62
   13926:	81 83       	std	Z+1, r24	; 0x01
   13928:	92 83       	std	Z+2, r25	; 0x02
   1392a:	a3 83       	std	Z+3, r26	; 0x03
   1392c:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   13930:	89 e1       	ldi	r24, 0x19	; 25
   13932:	99 e1       	ldi	r25, 0x19	; 25
   13934:	a0 e0       	ldi	r26, 0x00	; 0
   13936:	ed b7       	in	r30, 0x3d	; 61
   13938:	fe b7       	in	r31, 0x3e	; 62
   1393a:	81 83       	std	Z+1, r24	; 0x01
   1393c:	92 83       	std	Z+2, r25	; 0x02
   1393e:	a3 83       	std	Z+3, r26	; 0x03
   13940:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   13944:	0f 90       	pop	r0
   13946:	0f 90       	pop	r0
   13948:	0f 90       	pop	r0
   1394a:	08 95       	ret

0001394c <index_address>:
   1394c:	e4 ef       	ldi	r30, 0xF4	; 244
   1394e:	fe e1       	ldi	r31, 0x1E	; 30
   13950:	90 e0       	ldi	r25, 0x00	; 0
   13952:	28 2f       	mov	r18, r24
   13954:	88 0f       	add	r24, r24
   13956:	33 0b       	sbc	r19, r19
   13958:	80 81       	ld	r24, Z
   1395a:	88 23       	and	r24, r24
   1395c:	29 f0       	breq	.+10     	; 0x13968 <index_address+0x1c>
   1395e:	41 81       	ldd	r20, Z+1	; 0x01
   13960:	50 e0       	ldi	r21, 0x00	; 0
   13962:	42 17       	cp	r20, r18
   13964:	53 07       	cpc	r21, r19
   13966:	31 f0       	breq	.+12     	; 0x13974 <index_address+0x28>
   13968:	9f 5f       	subi	r25, 0xFF	; 255
   1396a:	3b 96       	adiw	r30, 0x0b	; 11
   1396c:	9c 30       	cpi	r25, 0x0C	; 12
   1396e:	a1 f7       	brne	.-24     	; 0x13958 <index_address+0xc>
   13970:	8f ef       	ldi	r24, 0xFF	; 255
   13972:	08 95       	ret
   13974:	89 2f       	mov	r24, r25
   13976:	08 95       	ret

00013978 <umount>:

/// ===============================================
/// @brief umount disks - testing
/// @return Devices[] index on success, -1 on error
int8_t umount(int argc, char *argv[])
{
   13978:	cf 93       	push	r28
   1397a:	df 93       	push	r29
   1397c:	00 d0       	rcall	.+0      	; 0x1397e <umount+0x6>
   1397e:	00 d0       	rcall	.+0      	; 0x13980 <umount+0x8>
   13980:	1f 92       	push	r1
   13982:	eb 01       	movw	r28, r22

	int8_t address;
	int8_t index;

	if(argc != 2)
   13984:	02 97       	sbiw	r24, 0x02	; 2
   13986:	f1 f0       	breq	.+60     	; 0x139c4 <umount+0x4c>
	{
		printf("Usage:\n");
   13988:	81 e1       	ldi	r24, 0x11	; 17
   1398a:	99 e1       	ldi	r25, 0x19	; 25
   1398c:	a0 e0       	ldi	r26, 0x00	; 0
   1398e:	ed b7       	in	r30, 0x3d	; 61
   13990:	fe b7       	in	r31, 0x3e	; 62
   13992:	81 83       	std	Z+1, r24	; 0x01
   13994:	92 83       	std	Z+2, r25	; 0x02
   13996:	a3 83       	std	Z+3, r26	; 0x03
   13998:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
		printf("  umount address\n");
   1399c:	8f ef       	ldi	r24, 0xFF	; 255
   1399e:	98 e1       	ldi	r25, 0x18	; 24
   139a0:	a0 e0       	ldi	r26, 0x00	; 0
   139a2:	ed b7       	in	r30, 0x3d	; 61
   139a4:	fe b7       	in	r31, 0x3e	; 62
   139a6:	81 83       	std	Z+1, r24	; 0x01
   139a8:	92 83       	std	Z+2, r25	; 0x02
   139aa:	a3 83       	std	Z+3, r26	; 0x03
   139ac:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
		printf("  - address is the device address\n");
   139b0:	8c ed       	ldi	r24, 0xDC	; 220
   139b2:	98 e1       	ldi	r25, 0x18	; 24
   139b4:	a0 e0       	ldi	r26, 0x00	; 0
   139b6:	ed b7       	in	r30, 0x3d	; 61
   139b8:	fe b7       	in	r31, 0x3e	; 62
   139ba:	81 83       	std	Z+1, r24	; 0x01
   139bc:	92 83       	std	Z+2, r25	; 0x02
   139be:	a3 83       	std	Z+3, r26	; 0x03
   139c0:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
	}
	address = atoi(argv[1]);
   139c4:	8a 81       	ldd	r24, Y+2	; 0x02
   139c6:	9b 81       	ldd	r25, Y+3	; 0x03
   139c8:	0e 94 84 47 	call	0x8f08	; 0x8f08 <atoi>
   139cc:	d8 2f       	mov	r29, r24
	index = index_address(address);
   139ce:	be df       	rcall	.-132    	; 0x1394c <index_address>
   139d0:	c8 2f       	mov	r28, r24
	if(index == -1)
   139d2:	8f 3f       	cpi	r24, 0xFF	; 255
   139d4:	89 f4       	brne	.+34     	; 0x139f8 <umount+0x80>
	{
		printf("umount address:[%d] NOT found\n", address);
   139d6:	8d 2f       	mov	r24, r29
   139d8:	dd 0f       	add	r29, r29
   139da:	99 0b       	sbc	r25, r25
   139dc:	ed b7       	in	r30, 0x3d	; 61
   139de:	fe b7       	in	r31, 0x3e	; 62
   139e0:	95 83       	std	Z+5, r25	; 0x05
   139e2:	84 83       	std	Z+4, r24	; 0x04
   139e4:	8d eb       	ldi	r24, 0xBD	; 189
   139e6:	98 e1       	ldi	r25, 0x18	; 24
   139e8:	a0 e0       	ldi	r26, 0x00	; 0
   139ea:	81 83       	std	Z+1, r24	; 0x01
   139ec:	92 83       	std	Z+2, r25	; 0x02
   139ee:	a3 83       	std	Z+3, r26	; 0x03
   139f0:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
		return(-1);
   139f4:	8f ef       	ldi	r24, 0xFF	; 255
	}
	free_device(index);
   139f6:	02 c0       	rjmp	.+4      	; 0x139fc <umount+0x84>
   139f8:	b9 db       	rcall	.-2190   	; 0x1316c <free_device>
	return(index);
   139fa:	8c 2f       	mov	r24, r28
}
   139fc:	cd b7       	in	r28, 0x3d	; 61
   139fe:	de b7       	in	r29, 0x3e	; 62
   13a00:	25 96       	adiw	r28, 0x05	; 5
   13a02:	e2 e0       	ldi	r30, 0x02	; 2
   13a04:	0c 94 e7 e6 	jmp	0x1cdce	; 0x1cdce <__epilogue_restores__+0x20>

00013a08 <display_mount>:
	return(1);
}


void display_mount(int8_t index )
{
   13a08:	a9 e0       	ldi	r26, 0x09	; 9
   13a0a:	b0 e0       	ldi	r27, 0x00	; 0
   13a0c:	ea e0       	ldi	r30, 0x0A	; 10
   13a0e:	fd e9       	ldi	r31, 0x9D	; 157
   13a10:	0c 94 c9 e6 	jmp	0x1cd92	; 0x1cd92 <__prologue_saves__+0x1c>
#ifdef AMIGO
///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

	if(Devices[index].TYPE == NO_TYPE)
   13a14:	08 2f       	mov	r16, r24
   13a16:	08 2e       	mov	r0, r24
   13a18:	00 0c       	add	r0, r0
   13a1a:	11 0b       	sbc	r17, r17
   13a1c:	9b e0       	ldi	r25, 0x0B	; 11
   13a1e:	89 02       	muls	r24, r25
   13a20:	f0 01       	movw	r30, r0
   13a22:	11 24       	eor	r1, r1
   13a24:	ec 50       	subi	r30, 0x0C	; 12
   13a26:	f1 4e       	sbci	r31, 0xE1	; 225
   13a28:	80 81       	ld	r24, Z
   13a2a:	88 23       	and	r24, r24
   13a2c:	09 f4       	brne	.+2      	; 0x13a30 <display_mount+0x28>
   13a2e:	5f c0       	rjmp	.+190    	; 0x13aee <display_mount+0xe6>
		return;

	if(Devices[index].TYPE == SS80_TYPE)
   13a30:	83 30       	cpi	r24, 0x03	; 3
   13a32:	c9 f4       	brne	.+50     	; 0x13a66 <display_mount+0x5e>
	{
		SS80p= (SS80DiskType *)Devices[index].dev;
   13a34:	07 80       	ldd	r0, Z+7	; 0x07
   13a36:	f0 85       	ldd	r31, Z+8	; 0x08
   13a38:	e0 2d       	mov	r30, r0

		printf("SS80    %-8s %2d %s\n", SS80p->HEADER.model, (int) SS80p->HEADER.ADDRESS, SS80p->HEADER.NAME);
   13a3a:	82 81       	ldd	r24, Z+2	; 0x02
   13a3c:	93 81       	ldd	r25, Z+3	; 0x03
   13a3e:	cd b7       	in	r28, 0x3d	; 61
   13a40:	de b7       	in	r29, 0x3e	; 62
   13a42:	99 87       	std	Y+9, r25	; 0x09
   13a44:	88 87       	std	Y+8, r24	; 0x08
   13a46:	80 81       	ld	r24, Z
   13a48:	90 e0       	ldi	r25, 0x00	; 0
   13a4a:	9f 83       	std	Y+7, r25	; 0x07
   13a4c:	8e 83       	std	Y+6, r24	; 0x06
   13a4e:	84 81       	ldd	r24, Z+4	; 0x04
   13a50:	95 81       	ldd	r25, Z+5	; 0x05
   13a52:	9d 83       	std	Y+5, r25	; 0x05
   13a54:	8c 83       	std	Y+4, r24	; 0x04
   13a56:	88 ee       	ldi	r24, 0xE8	; 232
   13a58:	97 e1       	ldi	r25, 0x17	; 23
   13a5a:	a0 e0       	ldi	r26, 0x00	; 0
   13a5c:	89 83       	std	Y+1, r24	; 0x01
   13a5e:	9a 83       	std	Y+2, r25	; 0x02
   13a60:	ab 83       	std	Y+3, r26	; 0x03
   13a62:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
	}

#ifdef AMIGO
	if(Devices[index].TYPE == AMIGO_TYPE )
   13a66:	8b e0       	ldi	r24, 0x0B	; 11
   13a68:	80 9f       	mul	r24, r16
   13a6a:	f0 01       	movw	r30, r0
   13a6c:	81 9f       	mul	r24, r17
   13a6e:	f0 0d       	add	r31, r0
   13a70:	11 24       	eor	r1, r1
   13a72:	ec 50       	subi	r30, 0x0C	; 12
   13a74:	f1 4e       	sbci	r31, 0xE1	; 225
   13a76:	80 81       	ld	r24, Z
   13a78:	81 30       	cpi	r24, 0x01	; 1
   13a7a:	c9 f4       	brne	.+50     	; 0x13aae <display_mount+0xa6>
	{
		AMIGOp = (AMIGODiskType *)Devices[index].dev;
   13a7c:	07 80       	ldd	r0, Z+7	; 0x07
   13a7e:	f0 85       	ldd	r31, Z+8	; 0x08
   13a80:	e0 2d       	mov	r30, r0
		printf("AMIGO   %-8s %2d %s\n", AMIGOp->HEADER.model, (int) AMIGOp->HEADER.ADDRESS, AMIGOp->HEADER.NAME);
   13a82:	82 81       	ldd	r24, Z+2	; 0x02
   13a84:	93 81       	ldd	r25, Z+3	; 0x03
   13a86:	cd b7       	in	r28, 0x3d	; 61
   13a88:	de b7       	in	r29, 0x3e	; 62
   13a8a:	99 87       	std	Y+9, r25	; 0x09
   13a8c:	88 87       	std	Y+8, r24	; 0x08
   13a8e:	80 81       	ld	r24, Z
   13a90:	90 e0       	ldi	r25, 0x00	; 0
   13a92:	9f 83       	std	Y+7, r25	; 0x07
   13a94:	8e 83       	std	Y+6, r24	; 0x06
   13a96:	84 81       	ldd	r24, Z+4	; 0x04
   13a98:	95 81       	ldd	r25, Z+5	; 0x05
   13a9a:	9d 83       	std	Y+5, r25	; 0x05
   13a9c:	8c 83       	std	Y+4, r24	; 0x04
   13a9e:	83 ed       	ldi	r24, 0xD3	; 211
   13aa0:	97 e1       	ldi	r25, 0x17	; 23
   13aa2:	a0 e0       	ldi	r26, 0x00	; 0
   13aa4:	89 83       	std	Y+1, r24	; 0x01
   13aa6:	9a 83       	std	Y+2, r25	; 0x02
   13aa8:	ab 83       	std	Y+3, r26	; 0x03
   13aaa:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
	}
#endif                                    // #ifdef AMIGO

	if(Devices[index].TYPE == PRINTER_TYPE )
   13aae:	8b e0       	ldi	r24, 0x0B	; 11
   13ab0:	80 9f       	mul	r24, r16
   13ab2:	f0 01       	movw	r30, r0
   13ab4:	81 9f       	mul	r24, r17
   13ab6:	f0 0d       	add	r31, r0
   13ab8:	11 24       	eor	r1, r1
   13aba:	ec 50       	subi	r30, 0x0C	; 12
   13abc:	f1 4e       	sbci	r31, 0xE1	; 225
   13abe:	80 81       	ld	r24, Z
   13ac0:	84 30       	cpi	r24, 0x04	; 4
   13ac2:	a9 f4       	brne	.+42     	; 0x13aee <display_mount+0xe6>
	{
            PRINTERp= (PRINTERDeviceType *)Devices[index].dev;
            printf("PRINTER %-8s %2d\n", " ", (int) PRINTERp->HEADER.ADDRESS);
   13ac4:	07 80       	ldd	r0, Z+7	; 0x07
   13ac6:	f0 85       	ldd	r31, Z+8	; 0x08
   13ac8:	e0 2d       	mov	r30, r0
   13aca:	80 81       	ld	r24, Z
   13acc:	90 e0       	ldi	r25, 0x00	; 0
   13ace:	cd b7       	in	r28, 0x3d	; 61
   13ad0:	de b7       	in	r29, 0x3e	; 62
   13ad2:	9f 83       	std	Y+7, r25	; 0x07
   13ad4:	8e 83       	std	Y+6, r24	; 0x06
   13ad6:	89 e6       	ldi	r24, 0x69	; 105
   13ad8:	94 e0       	ldi	r25, 0x04	; 4
   13ada:	9d 83       	std	Y+5, r25	; 0x05
   13adc:	8c 83       	std	Y+4, r24	; 0x04
   13ade:	81 ec       	ldi	r24, 0xC1	; 193
   13ae0:	97 e1       	ldi	r25, 0x17	; 23
   13ae2:	a0 e0       	ldi	r26, 0x00	; 0
   13ae4:	89 83       	std	Y+1, r24	; 0x01
   13ae6:	9a 83       	std	Y+2, r25	; 0x02
   13ae8:	ab 83       	std	Y+3, r26	; 0x03
   13aea:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
	}
}
   13aee:	cd b7       	in	r28, 0x3d	; 61
   13af0:	de b7       	in	r29, 0x3e	; 62
   13af2:	29 96       	adiw	r28, 0x09	; 9
   13af4:	e4 e0       	ldi	r30, 0x04	; 4
   13af6:	0c 94 e5 e6 	jmp	0x1cdca	; 0x1cdca <__epilogue_restores__+0x1c>

00013afa <verify_device>:

/// ===============================================
/// @brief Verify a device and delete it is there are any errors
/// @return  1 = OK 0 = ERROR
int8_t verify_device(int8_t index)
{
   13afa:	a5 e0       	ldi	r26, 0x05	; 5
   13afc:	b0 e0       	ldi	r27, 0x00	; 0
   13afe:	e3 e8       	ldi	r30, 0x83	; 131
   13b00:	fd e9       	ldi	r31, 0x9D	; 157
   13b02:	0c 94 c6 e6 	jmp	0x1cd8c	; 0x1cd8c <__prologue_saves__+0x16>
#ifdef AMIGO
///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    if(Devices[index].TYPE == NO_TYPE)
   13b06:	e8 2e       	mov	r14, r24
   13b08:	08 2e       	mov	r0, r24
   13b0a:	00 0c       	add	r0, r0
   13b0c:	ff 08       	sbc	r15, r15
   13b0e:	9b e0       	ldi	r25, 0x0B	; 11
   13b10:	89 02       	muls	r24, r25
   13b12:	f0 01       	movw	r30, r0
   13b14:	11 24       	eor	r1, r1
   13b16:	ec 50       	subi	r30, 0x0C	; 12
   13b18:	f1 4e       	sbci	r31, 0xE1	; 225
   13b1a:	10 81       	ld	r17, Z
   13b1c:	11 23       	and	r17, r17
   13b1e:	09 f1       	breq	.+66     	; 0x13b62 <verify_device+0x68>
   13b20:	d8 2e       	mov	r13, r24
        return(ret);

	address = Devices[index].ADDRESS;
   13b22:	81 81       	ldd	r24, Z+1	; 0x01
    type = Devices[index].TYPE;
	ppr = Devices[index].PPR;
   13b24:	02 81       	ldd	r16, Z+2	; 0x02

	if(address < 0 || address > 31)
   13b26:	80 32       	cpi	r24, 0x20	; 32
   13b28:	78 f0       	brcs	.+30     	; 0x13b48 <verify_device+0x4e>
	{
		printf("Address (%d) out of range\n", (int) address);
   13b2a:	90 e0       	ldi	r25, 0x00	; 0
   13b2c:	ed b7       	in	r30, 0x3d	; 61
   13b2e:	fe b7       	in	r31, 0x3e	; 62
   13b30:	95 83       	std	Z+5, r25	; 0x05
   13b32:	84 83       	std	Z+4, r24	; 0x04
   13b34:	8c ed       	ldi	r24, 0xDC	; 220
   13b36:	9a e1       	ldi	r25, 0x1A	; 26
   13b38:	a0 e0       	ldi	r26, 0x00	; 0
   13b3a:	81 83       	std	Z+1, r24	; 0x01
   13b3c:	92 83       	std	Z+2, r25	; 0x02
   13b3e:	a3 83       	std	Z+3, r26	; 0x03
   13b40:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
		ret = 0;
   13b44:	80 e0       	ldi	r24, 0x00	; 0
   13b46:	01 c0       	rjmp	.+2      	; 0x13b4a <verify_device+0x50>
int8_t verify_device(int8_t index)
{
    long sectors;
	int8_t type;
	int address,ppr;
	int8_t ret = 1;	
   13b48:	81 e0       	ldi	r24, 0x01	; 1
	}
	addr_bits |= addr_mask;

	
	// Printers do not use PPR
	if(type == PRINTER_TYPE)
   13b4a:	14 30       	cpi	r17, 0x04	; 4
   13b4c:	61 f4       	brne	.+24     	; 0x13b66 <verify_device+0x6c>
	{
		Devices[index].PPR = 0xff;
   13b4e:	8b e0       	ldi	r24, 0x0B	; 11
   13b50:	8e 9d       	mul	r24, r14
   13b52:	f0 01       	movw	r30, r0
   13b54:	8f 9d       	mul	r24, r15
   13b56:	f0 0d       	add	r31, r0
   13b58:	11 24       	eor	r1, r1
   13b5a:	ec 50       	subi	r30, 0x0C	; 12
   13b5c:	f1 4e       	sbci	r31, 0xE1	; 225
   13b5e:	8f ef       	ldi	r24, 0xFF	; 255
   13b60:	82 83       	std	Z+2, r24	; 0x02
		return(1);
   13b62:	81 e0       	ldi	r24, 0x01	; 1
   13b64:	90 c0       	rjmp	.+288    	; 0x13c86 <verify_device+0x18c>
	}
	if(type == SS80_TYPE || AMIGO_TYPE)
	{
		if(ppr < 0 || ppr > 7)
   13b66:	08 30       	cpi	r16, 0x08	; 8
   13b68:	08 f0       	brcs	.+2      	; 0x13b6c <verify_device+0x72>
		{
			ret = 0;
   13b6a:	80 e0       	ldi	r24, 0x00	; 0
			printf("PPR (%d) duplicated\n", (int) ppr);
			ret = 0;
		}
		ppr_bits |= ppr_mask;
	}
    if(type == SS80_TYPE)
   13b6c:	13 30       	cpi	r17, 0x03	; 3
   13b6e:	79 f5       	brne	.+94     	; 0x13bce <verify_device+0xd4>
    {
        SS80p= (SS80DiskType *)Devices[index].dev;
   13b70:	9b e0       	ldi	r25, 0x0B	; 11
   13b72:	9e 9d       	mul	r25, r14
   13b74:	f0 01       	movw	r30, r0
   13b76:	9f 9d       	mul	r25, r15
   13b78:	f0 0d       	add	r31, r0
   13b7a:	11 24       	eor	r1, r1
   13b7c:	ec 50       	subi	r30, 0x0C	; 12
   13b7e:	f1 4e       	sbci	r31, 0xE1	; 225
   13b80:	c7 81       	ldd	r28, Z+7	; 0x07
   13b82:	d0 85       	ldd	r29, Z+8	; 0x08
        if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
   13b84:	2a 89       	ldd	r18, Y+18	; 0x12
   13b86:	3b 89       	ldd	r19, Y+19	; 0x13
   13b88:	21 15       	cp	r18, r1
   13b8a:	31 40       	sbci	r19, 0x01	; 1
   13b8c:	79 f0       	breq	.+30     	; 0x13bac <verify_device+0xb2>
        {
// SS80p->UNIT.BYTES_PER_BLOCK = 256;
            printf("Warning: %s BYTES_PER_BLOCK != 256, Adjusting to 256\n", SS80p->HEADER.model);
   13b8e:	8c 81       	ldd	r24, Y+4	; 0x04
   13b90:	9d 81       	ldd	r25, Y+5	; 0x05
   13b92:	ed b7       	in	r30, 0x3d	; 61
   13b94:	fe b7       	in	r31, 0x3e	; 62
   13b96:	95 83       	std	Z+5, r25	; 0x05
   13b98:	84 83       	std	Z+4, r24	; 0x04
   13b9a:	86 ea       	ldi	r24, 0xA6	; 166
   13b9c:	9a e1       	ldi	r25, 0x1A	; 26
   13b9e:	a0 e0       	ldi	r26, 0x00	; 0
   13ba0:	81 83       	std	Z+1, r24	; 0x01
   13ba2:	92 83       	std	Z+2, r25	; 0x02
   13ba4:	a3 83       	std	Z+3, r26	; 0x03
   13ba6:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
			ret = 0;
   13baa:	80 e0       	ldi	r24, 0x00	; 0
        }
        sectors = SS80p->VOLUME.MAX_BLOCK_NUMBER+1;
        Devices[index].BLOCKS = sectors;
   13bac:	9b e0       	ldi	r25, 0x0B	; 11
   13bae:	9e 9d       	mul	r25, r14
   13bb0:	f0 01       	movw	r30, r0
   13bb2:	9f 9d       	mul	r25, r15
   13bb4:	f0 0d       	add	r31, r0
   13bb6:	11 24       	eor	r1, r1
   13bb8:	ec 50       	subi	r30, 0x0C	; 12
   13bba:	f1 4e       	sbci	r31, 0xE1	; 225
   13bbc:	48 a5       	ldd	r20, Y+40	; 0x28
   13bbe:	59 a5       	ldd	r21, Y+41	; 0x29
   13bc0:	6a a5       	ldd	r22, Y+42	; 0x2a
   13bc2:	7b a5       	ldd	r23, Y+43	; 0x2b
   13bc4:	4f 5f       	subi	r20, 0xFF	; 255
   13bc6:	5f 4f       	sbci	r21, 0xFF	; 255
   13bc8:	6f 4f       	sbci	r22, 0xFF	; 255
   13bca:	7f 4f       	sbci	r23, 0xFF	; 255
   13bcc:	47 c0       	rjmp	.+142    	; 0x13c5c <verify_device+0x162>
    }                                         // SS80_TYPE

#ifdef AMIGO
    if(type == AMIGO_TYPE )
   13bce:	11 30       	cpi	r17, 0x01	; 1
   13bd0:	09 f0       	breq	.+2      	; 0x13bd4 <verify_device+0xda>
   13bd2:	48 c0       	rjmp	.+144    	; 0x13c64 <verify_device+0x16a>
    {
        AMIGOp = (AMIGODiskType *)Devices[index].dev;
   13bd4:	9b e0       	ldi	r25, 0x0B	; 11
   13bd6:	9e 9d       	mul	r25, r14
   13bd8:	f0 01       	movw	r30, r0
   13bda:	9f 9d       	mul	r25, r15
   13bdc:	f0 0d       	add	r31, r0
   13bde:	11 24       	eor	r1, r1
   13be0:	ec 50       	subi	r30, 0x0C	; 12
   13be2:	f1 4e       	sbci	r31, 0xE1	; 225
   13be4:	c7 81       	ldd	r28, Z+7	; 0x07
   13be6:	d0 85       	ldd	r29, Z+8	; 0x08
        if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
   13be8:	28 85       	ldd	r18, Y+8	; 0x08
   13bea:	39 85       	ldd	r19, Y+9	; 0x09
   13bec:	21 15       	cp	r18, r1
   13bee:	31 40       	sbci	r19, 0x01	; 1
   13bf0:	a9 f0       	breq	.+42     	; 0x13c1c <verify_device+0x122>
        {
            AMIGOp->GEOMETRY.BYTES_PER_SECTOR = 256;
   13bf2:	80 e0       	ldi	r24, 0x00	; 0
   13bf4:	91 e0       	ldi	r25, 0x01	; 1
   13bf6:	99 87       	std	Y+9, r25	; 0x09
   13bf8:	88 87       	std	Y+8, r24	; 0x08
            printf("Warning: %s BYTES_PER_SECTOR != 256, Adjusting to 256\n", SS80p->HEADER.model);
   13bfa:	80 91 04 00 	lds	r24, 0x0004	; 0x800004 <__TEXT_REGION_LENGTH__+0x7e0004>
   13bfe:	90 91 05 00 	lds	r25, 0x0005	; 0x800005 <__TEXT_REGION_LENGTH__+0x7e0005>
   13c02:	ed b7       	in	r30, 0x3d	; 61
   13c04:	fe b7       	in	r31, 0x3e	; 62
   13c06:	95 83       	std	Z+5, r25	; 0x05
   13c08:	84 83       	std	Z+4, r24	; 0x04
   13c0a:	8f e6       	ldi	r24, 0x6F	; 111
   13c0c:	9a e1       	ldi	r25, 0x1A	; 26
   13c0e:	a0 e0       	ldi	r26, 0x00	; 0
   13c10:	81 83       	std	Z+1, r24	; 0x01
   13c12:	92 83       	std	Z+2, r25	; 0x02
   13c14:	a3 83       	std	Z+3, r26	; 0x03
   13c16:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
			ret = 0;
   13c1a:	80 e0       	ldi	r24, 0x00	; 0
        }
        sectors = AMIGOp->GEOMETRY.SECTORS_PER_TRACK
            * AMIGOp->GEOMETRY.HEADS
            * AMIGOp->GEOMETRY.CYLINDERS;
        Devices[index].BLOCKS = sectors;
   13c1c:	9b e0       	ldi	r25, 0x0B	; 11
   13c1e:	9e 9d       	mul	r25, r14
   13c20:	f0 01       	movw	r30, r0
   13c22:	9f 9d       	mul	r25, r15
   13c24:	f0 0d       	add	r31, r0
   13c26:	11 24       	eor	r1, r1
   13c28:	ec 50       	subi	r30, 0x0C	; 12
   13c2a:	f1 4e       	sbci	r31, 0xE1	; 225
   13c2c:	4a 85       	ldd	r20, Y+10	; 0x0a
   13c2e:	5b 85       	ldd	r21, Y+11	; 0x0b
   13c30:	2c 85       	ldd	r18, Y+12	; 0x0c
   13c32:	3d 85       	ldd	r19, Y+13	; 0x0d
   13c34:	42 9f       	mul	r20, r18
   13c36:	b0 01       	movw	r22, r0
   13c38:	43 9f       	mul	r20, r19
   13c3a:	70 0d       	add	r23, r0
   13c3c:	52 9f       	mul	r21, r18
   13c3e:	70 0d       	add	r23, r0
   13c40:	11 24       	eor	r1, r1
   13c42:	2e 85       	ldd	r18, Y+14	; 0x0e
   13c44:	3f 85       	ldd	r19, Y+15	; 0x0f
   13c46:	62 9f       	mul	r22, r18
   13c48:	a0 01       	movw	r20, r0
   13c4a:	63 9f       	mul	r22, r19
   13c4c:	50 0d       	add	r21, r0
   13c4e:	72 9f       	mul	r23, r18
   13c50:	50 0d       	add	r21, r0
   13c52:	11 24       	eor	r1, r1
   13c54:	05 2e       	mov	r0, r21
   13c56:	00 0c       	add	r0, r0
   13c58:	66 0b       	sbc	r22, r22
   13c5a:	77 0b       	sbc	r23, r23
   13c5c:	43 83       	std	Z+3, r20	; 0x03
   13c5e:	54 83       	std	Z+4, r21	; 0x04
   13c60:	65 83       	std	Z+5, r22	; 0x05
   13c62:	76 83       	std	Z+6, r23	; 0x06
    }
#endif                                    // #ifdef AMIGO
	if(!ret)
   13c64:	81 11       	cpse	r24, r1
   13c66:	7d cf       	rjmp	.-262    	; 0x13b62 <verify_device+0x68>
	{
		printf("Device errors - removing: ");
   13c68:	84 e5       	ldi	r24, 0x54	; 84
   13c6a:	9a e1       	ldi	r25, 0x1A	; 26
   13c6c:	a0 e0       	ldi	r26, 0x00	; 0
   13c6e:	ed b7       	in	r30, 0x3d	; 61
   13c70:	fe b7       	in	r31, 0x3e	; 62
   13c72:	81 83       	std	Z+1, r24	; 0x01
   13c74:	92 83       	std	Z+2, r25	; 0x02
   13c76:	a3 83       	std	Z+3, r26	; 0x03
   13c78:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
		display_mount(index);	
   13c7c:	8d 2d       	mov	r24, r13
   13c7e:	c4 de       	rcall	.-632    	; 0x13a08 <display_mount>
		free_device(index);
   13c80:	8d 2d       	mov	r24, r13
   13c82:	74 da       	rcall	.-2840   	; 0x1316c <free_device>
   13c84:	80 e0       	ldi	r24, 0x00	; 0
	}
	return(ret);
}
   13c86:	cd b7       	in	r28, 0x3d	; 61
   13c88:	de b7       	in	r29, 0x3e	; 62
   13c8a:	25 96       	adiw	r28, 0x05	; 5
   13c8c:	e7 e0       	ldi	r30, 0x07	; 7
   13c8e:	0c 94 e2 e6 	jmp	0x1cdc4	; 0x1cdc4 <__epilogue_restores__+0x16>

00013c92 <verify_devices>:

/// ===============================================
/// @brief Post process and Verify all devices
/// @return  1 = OK 0 = ERROR
void verify_devices()
{
   13c92:	cf 93       	push	r28
	int8_t i;
	for(i=0;i<MAX_DEVICES;++i)
   13c94:	c0 e0       	ldi	r28, 0x00	; 0
		verify_device(i);
   13c96:	8c 2f       	mov	r24, r28
   13c98:	30 df       	rcall	.-416    	; 0x13afa <verify_device>
   13c9a:	cf 5f       	subi	r28, 0xFF	; 255
/// @brief Post process and Verify all devices
/// @return  1 = OK 0 = ERROR
void verify_devices()
{
	int8_t i;
	for(i=0;i<MAX_DEVICES;++i)
   13c9c:	cc 30       	cpi	r28, 0x0C	; 12
   13c9e:	d9 f7       	brne	.-10     	; 0x13c96 <verify_devices+0x4>
		verify_device(i);
}
   13ca0:	cf 91       	pop	r28
   13ca2:	08 95       	ret

00013ca4 <Read_Config>:
/// Set all drive parameters and debuglevel
///
/// @param name: config file name to process
/// @return  number of parse errors
int Read_Config(char *name)
{
   13ca4:	ae e1       	ldi	r26, 0x1E	; 30
   13ca6:	b1 e0       	ldi	r27, 0x01	; 1
   13ca8:	e8 e5       	ldi	r30, 0x58	; 88
   13caa:	fe e9       	ldi	r31, 0x9E	; 158
   13cac:	0c 94 bb e6 	jmp	0x1cd76	; 0x1cd76 <__prologue_saves__>
   13cb0:	8c 01       	movw	r16, r24
	int8_t address;

    char str[128];
    char token[128];

    init_Devices();
   13cb2:	76 db       	rcall	.-2324   	; 0x133a0 <init_Devices>

    printf("Reading: %s\n", name);
   13cb4:	ed b7       	in	r30, 0x3d	; 61
   13cb6:	fe b7       	in	r31, 0x3e	; 62
   13cb8:	15 83       	std	Z+5, r17	; 0x05
   13cba:	04 83       	std	Z+4, r16	; 0x04
   13cbc:	8e e9       	ldi	r24, 0x9E	; 158
   13cbe:	90 e2       	ldi	r25, 0x20	; 32
   13cc0:	a0 e0       	ldi	r26, 0x00	; 0
   13cc2:	81 83       	std	Z+1, r24	; 0x01
   13cc4:	92 83       	std	Z+2, r25	; 0x02
   13cc6:	a3 83       	std	Z+3, r26	; 0x03
   13cc8:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    cfg = fopen(name, "rb");
   13ccc:	6e ef       	ldi	r22, 0xFE	; 254
   13cce:	78 e0       	ldi	r23, 0x08	; 8
   13cd0:	c8 01       	movw	r24, r16
   13cd2:	0e 94 2a 7e 	call	0xfc54	; 0xfc54 <fopen>
   13cd6:	c5 5f       	subi	r28, 0xF5	; 245
   13cd8:	de 4f       	sbci	r29, 0xFE	; 254
   13cda:	99 83       	std	Y+1, r25	; 0x01
   13cdc:	88 83       	st	Y, r24
   13cde:	cb 50       	subi	r28, 0x0B	; 11
   13ce0:	d1 40       	sbci	r29, 0x01	; 1
    if(cfg == NULL)
   13ce2:	89 2b       	or	r24, r25
   13ce4:	09 f4       	brne	.+2      	; 0x13ce8 <Read_Config+0x44>
   13ce6:	58 c0       	rjmp	.+176    	; 0x13d98 <Read_Config+0xf4>
   13ce8:	21 2c       	mov	r2, r1
   13cea:	31 2c       	mov	r3, r1
   13cec:	c8 5f       	subi	r28, 0xF8	; 248
   13cee:	de 4f       	sbci	r29, 0xFE	; 254
   13cf0:	18 82       	st	Y, r1
   13cf2:	c8 50       	subi	r28, 0x08	; 8
   13cf4:	d1 40       	sbci	r29, 0x01	; 1
   13cf6:	41 2c       	mov	r4, r1
   13cf8:	51 2c       	mov	r5, r1
   13cfa:	e1 2c       	mov	r14, r1
   13cfc:	f1 2c       	mov	r15, r1
   13cfe:	c7 5f       	subi	r28, 0xF7	; 247
   13d00:	de 4f       	sbci	r29, 0xFE	; 254
   13d02:	19 82       	std	Y+1, r1	; 0x01
   13d04:	18 82       	st	Y, r1
   13d06:	c9 50       	subi	r28, 0x09	; 9
   13d08:	d1 40       	sbci	r29, 0x01	; 1
   13d0a:	c1 2c       	mov	r12, r1
   13d0c:	d1 2c       	mov	r13, r1
   13d0e:	61 2c       	mov	r6, r1
   13d10:	71 2c       	mov	r7, r1
                        break;
                }
                break;
#endif                                // #ifdef AMIGO
            default:
                printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   13d12:	8d ee       	ldi	r24, 0xED	; 237
   13d14:	9d e1       	ldi	r25, 0x1D	; 29
   13d16:	9c 01       	movw	r18, r24
   13d18:	40 e0       	ldi	r20, 0x00	; 0
   13d1a:	c3 5f       	subi	r28, 0xF3	; 243
   13d1c:	de 4f       	sbci	r29, 0xFE	; 254
   13d1e:	28 83       	st	Y, r18
   13d20:	39 83       	std	Y+1, r19	; 0x01
   13d22:	4a 83       	std	Y+2, r20	; 0x02
   13d24:	cd 50       	subi	r28, 0x0D	; 13
   13d26:	d1 40       	sbci	r29, 0x01	; 1
                        break;
                    case TOK_CYLINDERS:
                        AMIGOp->GEOMETRY.CYLINDERS = val.w;
                        break;
                    default:
                        printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   13d28:	8f e0       	ldi	r24, 0x0F	; 15
   13d2a:	9e e1       	ldi	r25, 0x1E	; 30
   13d2c:	9c 01       	movw	r18, r24
   13d2e:	40 e0       	ldi	r20, 0x00	; 0
   13d30:	c0 5f       	subi	r28, 0xF0	; 240
   13d32:	de 4f       	sbci	r29, 0xFE	; 254
   13d34:	28 83       	st	Y, r18
   13d36:	39 83       	std	Y+1, r19	; 0x01
   13d38:	4a 83       	std	Y+2, r20	; 0x02
   13d3a:	c0 51       	subi	r28, 0x10	; 16
   13d3c:	d1 40       	sbci	r29, 0x01	; 1
                {
                    AMIGOp->CONFIG.ID = val.w;
                }
                else
                {
                    printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   13d3e:	8f e3       	ldi	r24, 0x3F	; 63
   13d40:	9e e1       	ldi	r25, 0x1E	; 30
   13d42:	9c 01       	movw	r18, r24
   13d44:	40 e0       	ldi	r20, 0x00	; 0
   13d46:	cd 5e       	subi	r28, 0xED	; 237
   13d48:	de 4f       	sbci	r29, 0xFE	; 254
   13d4a:	28 83       	st	Y, r18
   13d4c:	39 83       	std	Y+1, r19	; 0x01
   13d4e:	4a 83       	std	Y+2, r20	; 0x02
   13d50:	c3 51       	subi	r28, 0x13	; 19
   13d52:	d1 40       	sbci	r29, 0x01	; 1
                        break;
                    case TOK_FILE:
                        AMIGOp->HEADER.NAME = stralloc(token);
                        break;
                    default:
                        printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   13d54:	8e e6       	ldi	r24, 0x6E	; 110
   13d56:	9e e1       	ldi	r25, 0x1E	; 30
   13d58:	9c 01       	movw	r18, r24
   13d5a:	40 e0       	ldi	r20, 0x00	; 0
   13d5c:	ca 5e       	subi	r28, 0xEA	; 234
   13d5e:	de 4f       	sbci	r29, 0xFE	; 254
   13d60:	28 83       	st	Y, r18
   13d62:	39 83       	std	Y+1, r19	; 0x01
   13d64:	4a 83       	std	Y+2, r20	; 0x02
   13d66:	c6 51       	subi	r28, 0x16	; 22
   13d68:	d1 40       	sbci	r29, 0x01	; 1
                    case TOK_GEOMETRY:
                        push_state(state);
                        state = AMIGO_GEOMETRY;
                        break;
                    default:
                        printf("Unexpected AMIGO START token: %s, at line:%d\n", ptr,lines);
   13d6a:	8e e9       	ldi	r24, 0x9E	; 158
   13d6c:	9e e1       	ldi	r25, 0x1E	; 30
   13d6e:	9c 01       	movw	r18, r24
   13d70:	40 e0       	ldi	r20, 0x00	; 0
   13d72:	c7 5e       	subi	r28, 0xE7	; 231
   13d74:	de 4f       	sbci	r29, 0xFE	; 254
   13d76:	28 83       	st	Y, r18
   13d78:	39 83       	std	Y+1, r19	; 0x01
   13d7a:	4a 83       	std	Y+2, r20	; 0x02
   13d7c:	c9 51       	subi	r28, 0x19	; 25
   13d7e:	d1 40       	sbci	r29, 0x01	; 1
                        break;
                    case TOK_INTERLEAVE:
                        SS80p->VOLUME.INTERLEAVE = val.b;
                        break;
                    default:
                        printf("Unexpected SS80 VOLUME token: %s, at line:%d\n", ptr,lines);
   13d80:	8c ec       	ldi	r24, 0xCC	; 204
   13d82:	9e e1       	ldi	r25, 0x1E	; 30
   13d84:	9c 01       	movw	r18, r24
   13d86:	40 e0       	ldi	r20, 0x00	; 0
   13d88:	c4 5e       	subi	r28, 0xE4	; 228
   13d8a:	de 4f       	sbci	r29, 0xFE	; 254
   13d8c:	28 83       	st	Y, r18
   13d8e:	39 83       	std	Y+1, r19	; 0x01
   13d90:	4a 83       	std	Y+2, r20	; 0x02
   13d92:	cc 51       	subi	r28, 0x1C	; 28
   13d94:	d1 40       	sbci	r29, 0x01	; 1
   13d96:	26 c0       	rjmp	.+76     	; 0x13de4 <Read_Config+0x140>
    cfg = fopen(name, "rb");
    if(cfg == NULL)
    {
        ++errors;
//FIXME
        perror("Read_Config - open");
   13d98:	81 e5       	ldi	r24, 0x51	; 81
   13d9a:	9e e0       	ldi	r25, 0x0E	; 14
   13d9c:	0e 94 5b 78 	call	0xf0b6	; 0xf0b6 <perror>
        printf("Read_Config: open(%s) failed\n", name);
   13da0:	ed b7       	in	r30, 0x3d	; 61
   13da2:	fe b7       	in	r31, 0x3e	; 62
   13da4:	15 83       	std	Z+5, r17	; 0x05
   13da6:	04 83       	std	Z+4, r16	; 0x04
   13da8:	80 e8       	ldi	r24, 0x80	; 128
   13daa:	90 e2       	ldi	r25, 0x20	; 32
   13dac:	a0 e0       	ldi	r26, 0x00	; 0
   13dae:	81 83       	std	Z+1, r24	; 0x01
   13db0:	92 83       	std	Z+2, r25	; 0x02
   13db2:	a3 83       	std	Z+3, r26	; 0x03
   13db4:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
        set_Config_Defaults();
        return(errors);
   13db8:	81 e0       	ldi	r24, 0x01	; 1
   13dba:	90 e0       	ldi	r25, 0x00	; 0
   13dbc:	70 c3       	rjmp	.+1760   	; 0x1449e <Read_Config+0x7fa>
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
        ++lines;
   13dbe:	ff ef       	ldi	r31, 0xFF	; 255
   13dc0:	2f 1a       	sub	r2, r31
   13dc2:	3f 0a       	sbc	r3, r31

        ptr = get_token(str, token, sizeof(token)-2);
   13dc4:	4e e7       	ldi	r20, 0x7E	; 126
   13dc6:	50 e0       	ldi	r21, 0x00	; 0
   13dc8:	9e 01       	movw	r18, r28
   13dca:	28 5f       	subi	r18, 0xF8	; 248
   13dcc:	3f 4f       	sbci	r19, 0xFF	; 255
   13dce:	49 01       	movw	r8, r18
   13dd0:	b9 01       	movw	r22, r18
   13dd2:	ce 01       	movw	r24, r28
   13dd4:	88 57       	subi	r24, 0x78	; 120
   13dd6:	9f 4f       	sbci	r25, 0xFF	; 255
   13dd8:	0e 94 ec 32 	call	0x65d8	; 0x65d8 <get_token>
   13ddc:	5c 01       	movw	r10, r24

// Skip comments
        if(token[0] == 0 || token[0]  == '#')
   13dde:	88 85       	ldd	r24, Y+8	; 0x08
   13de0:	81 11       	cpse	r24, r1
   13de2:	10 c0       	rjmp	.+32     	; 0x13e04 <Read_Config+0x160>
        printf("Read_Config: open(%s) failed\n", name);
        set_Config_Defaults();
        return(errors);
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   13de4:	c5 5f       	subi	r28, 0xF5	; 245
   13de6:	de 4f       	sbci	r29, 0xFE	; 254
   13de8:	48 81       	ld	r20, Y
   13dea:	59 81       	ldd	r21, Y+1	; 0x01
   13dec:	cb 50       	subi	r28, 0x0B	; 11
   13dee:	d1 40       	sbci	r29, 0x01	; 1
   13df0:	6e e7       	ldi	r22, 0x7E	; 126
   13df2:	70 e0       	ldi	r23, 0x00	; 0
   13df4:	ce 01       	movw	r24, r28
   13df6:	88 57       	subi	r24, 0x78	; 120
   13df8:	9f 4f       	sbci	r25, 0xFF	; 255
   13dfa:	0e 94 42 76 	call	0xec84	; 0xec84 <fgets>
   13dfe:	89 2b       	or	r24, r25
   13e00:	f1 f6       	brne	.-68     	; 0x13dbe <Read_Config+0x11a>
   13e02:	0d c3       	rjmp	.+1562   	; 0x1441e <Read_Config+0x77a>
        ++lines;

        ptr = get_token(str, token, sizeof(token)-2);

// Skip comments
        if(token[0] == 0 || token[0]  == '#')
   13e04:	83 32       	cpi	r24, 0x23	; 35
   13e06:	71 f3       	breq	.-36     	; 0x13de4 <Read_Config+0x140>
            continue;

        val.l = 0;
        tok = TOK_INVALID;

        if( ( ind = tok_index(token) )  == -1)
   13e08:	c4 01       	movw	r24, r8
   13e0a:	0e 94 db 92 	call	0x125b6	; 0x125b6 <tok_index>
   13e0e:	8f 3f       	cpi	r24, 0xFF	; 255
   13e10:	49 f4       	brne	.+18     	; 0x13e24 <Read_Config+0x180>
        {
            printf("Unexpected token: %s, at line:%d\n", token,lines);
   13e12:	ed b7       	in	r30, 0x3d	; 61
   13e14:	fe b7       	in	r31, 0x3e	; 62
   13e16:	37 82       	std	Z+7, r3	; 0x07
   13e18:	26 82       	std	Z+6, r2	; 0x06
   13e1a:	95 82       	std	Z+5, r9	; 0x05
   13e1c:	84 82       	std	Z+4, r8	; 0x04
   13e1e:	8e e5       	ldi	r24, 0x5E	; 94
   13e20:	90 e2       	ldi	r25, 0x20	; 32
   13e22:	c4 c0       	rjmp	.+392    	; 0x13fac <Read_Config+0x308>
            ++errors;
            continue;
        }
        tok = tokens[ind].tok;
   13e24:	24 e0       	ldi	r18, 0x04	; 4
   13e26:	82 02       	muls	r24, r18
   13e28:	f0 01       	movw	r30, r0
   13e2a:	11 24       	eor	r1, r1
   13e2c:	ec 53       	subi	r30, 0x3C	; 60
   13e2e:	fe 4f       	sbci	r31, 0xFE	; 254
   13e30:	02 81       	ldd	r16, Z+2	; 0x02
   13e32:	13 81       	ldd	r17, Z+3	; 0x03

// get optional argument
        ptr = get_token(ptr, token, sizeof(token)-2);
   13e34:	4e e7       	ldi	r20, 0x7E	; 126
   13e36:	50 e0       	ldi	r21, 0x00	; 0
   13e38:	b4 01       	movw	r22, r8
   13e3a:	c5 01       	movw	r24, r10
   13e3c:	0e 94 ec 32 	call	0x65d8	; 0x65d8 <get_token>
   13e40:	5c 01       	movw	r10, r24
        if(MATCH(token,"="))
   13e42:	64 e6       	ldi	r22, 0x64	; 100
   13e44:	7e e0       	ldi	r23, 0x0E	; 14
   13e46:	c4 01       	movw	r24, r8
   13e48:	0e 94 24 32 	call	0x6448	; 0x6448 <MATCH>
   13e4c:	89 2b       	or	r24, r25
   13e4e:	39 f0       	breq	.+14     	; 0x13e5e <Read_Config+0x1ba>
            ptr = get_token(ptr, token, sizeof(token)-2);
   13e50:	4e e7       	ldi	r20, 0x7E	; 126
   13e52:	50 e0       	ldi	r21, 0x00	; 0
   13e54:	b4 01       	movw	r22, r8
   13e56:	c5 01       	movw	r24, r10
   13e58:	0e 94 ec 32 	call	0x65d8	; 0x65d8 <get_token>
   13e5c:	5c 01       	movw	r10, r24
        val.l = get_value(token);
   13e5e:	c4 01       	movw	r24, r8
   13e60:	0e 94 2f 33 	call	0x665e	; 0x665e <get_value>
        val.w = (uint16_t) 0xFFFF & val.l;
        val.b = (uint8_t) 0xFF & val.l;

//FIXME check for state and last state
        if(tok == TOK_END )
   13e64:	01 31       	cpi	r16, 0x11	; 17
   13e66:	11 05       	cpc	r17, r1
        {
            state = pop_state();
   13e68:	19 f4       	brne	.+6      	; 0x13e70 <Read_Config+0x1cc>
   13e6a:	cb da       	rcall	.-2666   	; 0x13402 <pop_state>
   13e6c:	3c 01       	movw	r6, r24
            continue;
   13e6e:	ba cf       	rjmp	.-140    	; 0x13de4 <Read_Config+0x140>
        }

        switch(state)
   13e70:	30 e1       	ldi	r19, 0x10	; 16
   13e72:	63 16       	cp	r6, r19
   13e74:	71 04       	cpc	r7, r1
   13e76:	08 f0       	brcs	.+2      	; 0x13e7a <Read_Config+0x1d6>
   13e78:	bc c2       	rjmp	.+1400   	; 0x143f2 <Read_Config+0x74e>
   13e7a:	f3 01       	movw	r30, r6
   13e7c:	ea 53       	subi	r30, 0x3A	; 58
   13e7e:	ff 4f       	sbci	r31, 0xFF	; 255
   13e80:	0c 94 8c e6 	jmp	0x1cd18	; 0x1cd18 <__tablejump2__>
        {
            case START_STATE:
                switch(tok)
   13e84:	0e 30       	cpi	r16, 0x0E	; 14
   13e86:	11 05       	cpc	r17, r1
   13e88:	09 f4       	brne	.+2      	; 0x13e8c <Read_Config+0x1e8>
   13e8a:	83 c0       	rjmp	.+262    	; 0x13f92 <Read_Config+0x2ee>
   13e8c:	44 f4       	brge	.+16     	; 0x13e9e <Read_Config+0x1fa>
   13e8e:	02 30       	cpi	r16, 0x02	; 2
   13e90:	11 05       	cpc	r17, r1
   13e92:	09 f4       	brne	.+2      	; 0x13e96 <Read_Config+0x1f2>
   13e94:	42 c0       	rjmp	.+132    	; 0x13f1a <Read_Config+0x276>
   13e96:	0c 30       	cpi	r16, 0x0C	; 12
   13e98:	11 05       	cpc	r17, r1
   13e9a:	19 f1       	breq	.+70     	; 0x13ee2 <Read_Config+0x23e>
   13e9c:	7f c0       	rjmp	.+254    	; 0x13f9c <Read_Config+0x2f8>
   13e9e:	03 32       	cpi	r16, 0x23	; 35
   13ea0:	11 05       	cpc	r17, r1
   13ea2:	f9 f0       	breq	.+62     	; 0x13ee2 <Read_Config+0x23e>
   13ea4:	04 32       	cpi	r16, 0x24	; 36
   13ea6:	11 05       	cpc	r17, r1
   13ea8:	29 f0       	breq	.+10     	; 0x13eb4 <Read_Config+0x210>
   13eaa:	00 32       	cpi	r16, 0x20	; 32
   13eac:	11 05       	cpc	r17, r1
   13eae:	09 f0       	breq	.+2      	; 0x13eb2 <Read_Config+0x20e>
   13eb0:	75 c0       	rjmp	.+234    	; 0x13f9c <Read_Config+0x2f8>
   13eb2:	4f c0       	rjmp	.+158    	; 0x13f52 <Read_Config+0x2ae>
                {
                    case TOK_SS80_DEFAULT:
                        push_state(state);
   13eb4:	80 e0       	ldi	r24, 0x00	; 0
   13eb6:	90 e0       	ldi	r25, 0x00	; 0
   13eb8:	8b da       	rcall	.-2794   	; 0x133d0 <push_state>
                        state = SS80_STATE;
                        index = alloc_device(SS80_DEFAULT_TYPE);
   13eba:	82 e0       	ldi	r24, 0x02	; 2
   13ebc:	90 e0       	ldi	r25, 0x00	; 0
   13ebe:	b7 d9       	rcall	.-3218   	; 0x1322e <alloc_device>
   13ec0:	c8 5f       	subi	r28, 0xF8	; 248
   13ec2:	de 4f       	sbci	r29, 0xFE	; 254
   13ec4:	88 83       	st	Y, r24
   13ec6:	c8 50       	subi	r28, 0x08	; 8
   13ec8:	d1 40       	sbci	r29, 0x01	; 1
   13eca:	8f 3f       	cpi	r24, 0xFF	; 255
                        if(index == -1)
   13ecc:	09 f4       	brne	.+2      	; 0x13ed0 <Read_Config+0x22c>
   13ece:	8a cf       	rjmp	.-236    	; 0x13de4 <Read_Config+0x140>
   13ed0:	4b e0       	ldi	r20, 0x0B	; 11
                            state = START_STATE;
                        else
                            SS80p = (SS80DiskType *) Devices[index].dev;
   13ed2:	84 02       	muls	r24, r20
   13ed4:	f0 01       	movw	r30, r0
   13ed6:	11 24       	eor	r1, r1
   13ed8:	ec 50       	subi	r30, 0x0C	; 12
   13eda:	f1 4e       	sbci	r31, 0xE1	; 225
   13edc:	e7 80       	ldd	r14, Z+7	; 0x07
   13ede:	f0 84       	ldd	r15, Z+8	; 0x08
   13ee0:	18 c0       	rjmp	.+48     	; 0x13f12 <Read_Config+0x26e>
                        break;
                    case TOK_SS80:
                    case TOK_CS80:
                        push_state(state);
   13ee2:	80 e0       	ldi	r24, 0x00	; 0
   13ee4:	90 e0       	ldi	r25, 0x00	; 0
   13ee6:	74 da       	rcall	.-2840   	; 0x133d0 <push_state>
                        state = SS80_STATE;
                        index = alloc_device(SS80_TYPE);
   13ee8:	83 e0       	ldi	r24, 0x03	; 3
   13eea:	90 e0       	ldi	r25, 0x00	; 0
   13eec:	a0 d9       	rcall	.-3264   	; 0x1322e <alloc_device>
   13eee:	c8 5f       	subi	r28, 0xF8	; 248
   13ef0:	de 4f       	sbci	r29, 0xFE	; 254
   13ef2:	88 83       	st	Y, r24
   13ef4:	c8 50       	subi	r28, 0x08	; 8
   13ef6:	d1 40       	sbci	r29, 0x01	; 1
   13ef8:	8f 3f       	cpi	r24, 0xFF	; 255
                        if(index == -1)
   13efa:	09 f4       	brne	.+2      	; 0x13efe <Read_Config+0x25a>
   13efc:	73 cf       	rjmp	.-282    	; 0x13de4 <Read_Config+0x140>
   13efe:	9b e0       	ldi	r25, 0x0B	; 11
                        {
                            state = START_STATE;
                        }
                        else
                        {
                            SS80p = (SS80DiskType *) Devices[index].dev;
   13f00:	89 02       	muls	r24, r25
   13f02:	f0 01       	movw	r30, r0
   13f04:	11 24       	eor	r1, r1
   13f06:	ec 50       	subi	r30, 0x0C	; 12
   13f08:	f1 4e       	sbci	r31, 0xE1	; 225
   13f0a:	e7 80       	ldd	r14, Z+7	; 0x07
   13f0c:	f0 84       	ldd	r15, Z+8	; 0x08
                            hpdir_set_parameters(index,token); // also SS80p->HEADER.model
   13f0e:	b4 01       	movw	r22, r8
   13f10:	19 db       	rcall	.-2510   	; 0x13544 <hpdir_set_parameters>
                            SS80p = (SS80DiskType *) Devices[index].dev;
                        break;
                    case TOK_SS80:
                    case TOK_CS80:
                        push_state(state);
                        state = SS80_STATE;
   13f12:	66 24       	eor	r6, r6
   13f14:	63 94       	inc	r6
   13f16:	71 2c       	mov	r7, r1
                            hpdir_set_parameters(index,token); // also SS80p->HEADER.model
                        }
                        break;
#ifdef AMIGO
                    case TOK_AMIGO:
                        push_state(state);
   13f18:	65 cf       	rjmp	.-310    	; 0x13de4 <Read_Config+0x140>
   13f1a:	80 e0       	ldi	r24, 0x00	; 0
   13f1c:	90 e0       	ldi	r25, 0x00	; 0
   13f1e:	58 da       	rcall	.-2896   	; 0x133d0 <push_state>
                        state = AMIGO_STATE;
                        index = alloc_device(AMIGO_TYPE);
   13f20:	81 e0       	ldi	r24, 0x01	; 1
   13f22:	90 e0       	ldi	r25, 0x00	; 0
   13f24:	84 d9       	rcall	.-3320   	; 0x1322e <alloc_device>
   13f26:	c8 5f       	subi	r28, 0xF8	; 248
   13f28:	de 4f       	sbci	r29, 0xFE	; 254
   13f2a:	88 83       	st	Y, r24
   13f2c:	c8 50       	subi	r28, 0x08	; 8
   13f2e:	d1 40       	sbci	r29, 0x01	; 1
   13f30:	8f 3f       	cpi	r24, 0xFF	; 255
                        if(index == -1)
   13f32:	09 f4       	brne	.+2      	; 0x13f36 <Read_Config+0x292>
   13f34:	57 cf       	rjmp	.-338    	; 0x13de4 <Read_Config+0x140>
   13f36:	ab e0       	ldi	r26, 0x0B	; 11
                        {
                            state = START_STATE;
                        }
                        else
                        {
                            AMIGOp = (AMIGODiskType *) Devices[index].dev;
   13f38:	8a 02       	muls	r24, r26
   13f3a:	f0 01       	movw	r30, r0
   13f3c:	11 24       	eor	r1, r1
   13f3e:	ec 50       	subi	r30, 0x0C	; 12
   13f40:	f1 4e       	sbci	r31, 0xE1	; 225
   13f42:	47 80       	ldd	r4, Z+7	; 0x07
   13f44:	50 84       	ldd	r5, Z+8	; 0x08
                            hpdir_set_parameters(index,token); // also sets AMIGOp->HEADER.model
   13f46:	b4 01       	movw	r22, r8
   13f48:	fd da       	rcall	.-2566   	; 0x13544 <hpdir_set_parameters>
                        }
                        break;
#ifdef AMIGO
                    case TOK_AMIGO:
                        push_state(state);
                        state = AMIGO_STATE;
   13f4a:	aa e0       	ldi	r26, 0x0A	; 10
   13f4c:	6a 2e       	mov	r6, r26
   13f4e:	71 2c       	mov	r7, r1
   13f50:	49 cf       	rjmp	.-366    	; 0x13de4 <Read_Config+0x140>
                            hpdir_set_parameters(index,token); // also sets AMIGOp->HEADER.model
                        }
                        break;
#endif
                    case TOK_PRINTER:
                        push_state(state);
   13f52:	80 e0       	ldi	r24, 0x00	; 0
   13f54:	90 e0       	ldi	r25, 0x00	; 0
   13f56:	3c da       	rcall	.-2952   	; 0x133d0 <push_state>
   13f58:	84 e0       	ldi	r24, 0x04	; 4
                        state = PRINTER_STATE;
                        index = alloc_device(PRINTER_TYPE);
   13f5a:	90 e0       	ldi	r25, 0x00	; 0
   13f5c:	68 d9       	rcall	.-3376   	; 0x1322e <alloc_device>
   13f5e:	c8 5f       	subi	r28, 0xF8	; 248
   13f60:	de 4f       	sbci	r29, 0xFE	; 254
   13f62:	88 83       	st	Y, r24
   13f64:	c8 50       	subi	r28, 0x08	; 8
   13f66:	d1 40       	sbci	r29, 0x01	; 1
   13f68:	8f 3f       	cpi	r24, 0xFF	; 255
   13f6a:	09 f4       	brne	.+2      	; 0x13f6e <Read_Config+0x2ca>
                        if(index == -1)
   13f6c:	3b cf       	rjmp	.-394    	; 0x13de4 <Read_Config+0x140>
   13f6e:	bb e0       	ldi	r27, 0x0B	; 11
   13f70:	8b 02       	muls	r24, r27
                            state = START_STATE;
                        else
                            PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
   13f72:	f0 01       	movw	r30, r0
   13f74:	11 24       	eor	r1, r1
   13f76:	ec 50       	subi	r30, 0x0C	; 12
   13f78:	f1 4e       	sbci	r31, 0xE1	; 225
   13f7a:	27 81       	ldd	r18, Z+7	; 0x07
   13f7c:	30 85       	ldd	r19, Z+8	; 0x08
   13f7e:	c7 5f       	subi	r28, 0xF7	; 247
   13f80:	de 4f       	sbci	r29, 0xFE	; 254
   13f82:	39 83       	std	Y+1, r19	; 0x01
   13f84:	28 83       	st	Y, r18
   13f86:	c9 50       	subi	r28, 0x09	; 9
   13f88:	d1 40       	sbci	r29, 0x01	; 1
   13f8a:	fe e0       	ldi	r31, 0x0E	; 14
   13f8c:	6f 2e       	mov	r6, r31
                        }
                        break;
#endif
                    case TOK_PRINTER:
                        push_state(state);
                        state = PRINTER_STATE;
   13f8e:	71 2c       	mov	r7, r1
   13f90:	29 cf       	rjmp	.-430    	; 0x13de4 <Read_Config+0x140>
   13f92:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <debuglevel>
                            state = START_STATE;
                        else
                            PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
                        break;
                    case TOK_DEBUG:
                        debuglevel = val.w;
   13f96:	70 93 b7 01 	sts	0x01B7, r23	; 0x8001b7 <debuglevel+0x1>
   13f9a:	24 cf       	rjmp	.-440    	; 0x13de4 <Read_Config+0x140>
   13f9c:	ed b7       	in	r30, 0x3d	; 61
                        break;
   13f9e:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected token: %s, at line:%d\n", ptr,lines);
   13fa0:	37 82       	std	Z+7, r3	; 0x07
   13fa2:	26 82       	std	Z+6, r2	; 0x06
   13fa4:	b5 82       	std	Z+5, r11	; 0x05
   13fa6:	a4 82       	std	Z+4, r10	; 0x04
   13fa8:	8c e3       	ldi	r24, 0x3C	; 60
   13faa:	90 e2       	ldi	r25, 0x20	; 32
   13fac:	a0 e0       	ldi	r26, 0x00	; 0
   13fae:	81 83       	std	Z+1, r24	; 0x01
   13fb0:	92 83       	std	Z+2, r25	; 0x02
   13fb2:	a3 83       	std	Z+3, r26	; 0x03
   13fb4:	2e c2       	rjmp	.+1116   	; 0x14412 <Read_Config+0x76e>
   13fb6:	09 30       	cpi	r16, 0x09	; 9
                        break;
                }
                break;

            case PRINTER_STATE:
                if(tok == TOK_CONFIG)
   13fb8:	11 05       	cpc	r17, r1
   13fba:	39 f4       	brne	.+14     	; 0x13fca <Read_Config+0x326>
   13fbc:	8e e0       	ldi	r24, 0x0E	; 14
                {
                    push_state(state);
   13fbe:	90 e0       	ldi	r25, 0x00	; 0
   13fc0:	07 da       	rcall	.-3058   	; 0x133d0 <push_state>
   13fc2:	ef e0       	ldi	r30, 0x0F	; 15
   13fc4:	6e 2e       	mov	r6, r30
                    state = PRINTER_CONFIG;
   13fc6:	71 2c       	mov	r7, r1
   13fc8:	0d cf       	rjmp	.-486    	; 0x13de4 <Read_Config+0x140>
   13fca:	ed b7       	in	r30, 0x3d	; 61
                {
                    printf("Unexpected PRINTER token: %s, at line:%d\n", ptr,lines);
                    ++errors;
                    break;
                }
                break;
   13fcc:	fe b7       	in	r31, 0x3e	; 62
                    push_state(state);
                    state = PRINTER_CONFIG;
                }
                else
                {
                    printf("Unexpected PRINTER token: %s, at line:%d\n", ptr,lines);
   13fce:	37 82       	std	Z+7, r3	; 0x07
   13fd0:	26 82       	std	Z+6, r2	; 0x06
   13fd2:	b5 82       	std	Z+5, r11	; 0x05
   13fd4:	a4 82       	std	Z+4, r10	; 0x04
   13fd6:	82 e1       	ldi	r24, 0x12	; 18
   13fd8:	90 e2       	ldi	r25, 0x20	; 32
   13fda:	e8 cf       	rjmp	.-48     	; 0x13fac <Read_Config+0x308>
   13fdc:	01 30       	cpi	r16, 0x01	; 1
   13fde:	11 05       	cpc	r17, r1
                    break;
                }
                break;

            case PRINTER_CONFIG:
                if(tok == TOK_ADDRESS)
   13fe0:	c1 f4       	brne	.+48     	; 0x14012 <Read_Config+0x36e>
   13fe2:	c8 5f       	subi	r28, 0xF8	; 248
   13fe4:	de 4f       	sbci	r29, 0xFE	; 254
                {
					address = val.b;
                    Devices[index].ADDRESS = address;
   13fe6:	28 81       	ld	r18, Y
   13fe8:	c8 50       	subi	r28, 0x08	; 8
   13fea:	d1 40       	sbci	r29, 0x01	; 1
   13fec:	3b e0       	ldi	r19, 0x0B	; 11
   13fee:	23 02       	muls	r18, r19
   13ff0:	f0 01       	movw	r30, r0
   13ff2:	11 24       	eor	r1, r1
   13ff4:	ec 50       	subi	r30, 0x0C	; 12
   13ff6:	f1 4e       	sbci	r31, 0xE1	; 225
   13ff8:	61 83       	std	Z+1, r22	; 0x01
   13ffa:	c7 5f       	subi	r28, 0xF7	; 247
   13ffc:	de 4f       	sbci	r29, 0xFE	; 254
                    PRINTERp->HEADER.ADDRESS  = address;
   13ffe:	a8 81       	ld	r26, Y
   14000:	b9 81       	ldd	r27, Y+1	; 0x01
   14002:	c9 50       	subi	r28, 0x09	; 9
   14004:	d1 40       	sbci	r29, 0x01	; 1
   14006:	6c 93       	st	X, r22
   14008:	8f ef       	ldi	r24, 0xFF	; 255
   1400a:	82 83       	std	Z+2, r24	; 0x02
// NO PPR
                    Devices[index].PPR = 0xff;
   1400c:	fd 01       	movw	r30, r26
   1400e:	81 83       	std	Z+1, r24	; 0x01
                    PRINTERp->HEADER.PPR = 0xff;
   14010:	e9 ce       	rjmp	.-558    	; 0x13de4 <Read_Config+0x140>
   14012:	ed b7       	in	r30, 0x3d	; 61
   14014:	fe b7       	in	r31, 0x3e	; 62
                }
                else
                {
                    printf("Unexpected PRINTER CONFIG token: %s, at line:%d\n", ptr,lines);
   14016:	37 82       	std	Z+7, r3	; 0x07
   14018:	26 82       	std	Z+6, r2	; 0x06
   1401a:	b5 82       	std	Z+5, r11	; 0x05
   1401c:	a4 82       	std	Z+4, r10	; 0x04
   1401e:	81 ee       	ldi	r24, 0xE1	; 225
   14020:	9f e1       	ldi	r25, 0x1F	; 31
   14022:	c4 cf       	rjmp	.-120    	; 0x13fac <Read_Config+0x308>
   14024:	05 31       	cpi	r16, 0x15	; 21
                    ++errors;
                }
                break;

            case SS80_STATE:
                switch(tok)
   14026:	11 05       	cpc	r17, r1
   14028:	d9 f0       	breq	.+54     	; 0x14060 <Read_Config+0x3bc>
   1402a:	6c f4       	brge	.+26     	; 0x14046 <Read_Config+0x3a2>
   1402c:	09 30       	cpi	r16, 0x09	; 9
   1402e:	11 05       	cpc	r17, r1
   14030:	f1 f0       	breq	.+60     	; 0x1406e <Read_Config+0x3ca>
   14032:	0b 30       	cpi	r16, 0x0B	; 11
   14034:	11 05       	cpc	r17, r1
   14036:	49 f5       	brne	.+82     	; 0x1408a <Read_Config+0x3e6>
   14038:	81 e0       	ldi	r24, 0x01	; 1
                    case TOK_CONFIG:
                        push_state(state);
                        state = SS80_CONFIG;
                        break;
                    case TOK_CONTROLLER:
                        push_state(state);
   1403a:	90 e0       	ldi	r25, 0x00	; 0
   1403c:	c9 d9       	rcall	.-3182   	; 0x133d0 <push_state>
   1403e:	54 e0       	ldi	r21, 0x04	; 4
                        state = SS80_CONTROLLER;
   14040:	65 2e       	mov	r6, r21
   14042:	71 2c       	mov	r7, r1
   14044:	cf ce       	rjmp	.-610    	; 0x13de4 <Read_Config+0x140>
                        break;
   14046:	07 32       	cpi	r16, 0x27	; 39
                    ++errors;
                }
                break;

            case SS80_STATE:
                switch(tok)
   14048:	11 05       	cpc	r17, r1
   1404a:	c1 f0       	breq	.+48     	; 0x1407c <Read_Config+0x3d8>
   1404c:	0a 32       	cpi	r16, 0x2A	; 42
   1404e:	11 05       	cpc	r17, r1
   14050:	e1 f4       	brne	.+56     	; 0x1408a <Read_Config+0x3e6>
                    case TOK_UNIT:
                        push_state(state);
                        state = SS80_UNIT;
                        break;
                    case TOK_VOLUME:
                        push_state(state);
   14052:	81 e0       	ldi	r24, 0x01	; 1
   14054:	90 e0       	ldi	r25, 0x00	; 0
   14056:	bc d9       	rcall	.-3208   	; 0x133d0 <push_state>
                        state = SS80_VOLUME;
   14058:	36 e0       	ldi	r19, 0x06	; 6
   1405a:	63 2e       	mov	r6, r19
   1405c:	71 2c       	mov	r7, r1
                        break;
   1405e:	c2 ce       	rjmp	.-636    	; 0x13de4 <Read_Config+0x140>

            case SS80_STATE:
                switch(tok)
                {
                    case TOK_HEADER:
                        push_state(state);
   14060:	81 e0       	ldi	r24, 0x01	; 1
   14062:	90 e0       	ldi	r25, 0x00	; 0
   14064:	b5 d9       	rcall	.-3222   	; 0x133d0 <push_state>
                        state = SS80_HEADER;
   14066:	72 e0       	ldi	r23, 0x02	; 2
   14068:	67 2e       	mov	r6, r23
   1406a:	71 2c       	mov	r7, r1
                        break;
   1406c:	bb ce       	rjmp	.-650    	; 0x13de4 <Read_Config+0x140>
                    case TOK_CONFIG:
                        push_state(state);
   1406e:	81 e0       	ldi	r24, 0x01	; 1
   14070:	90 e0       	ldi	r25, 0x00	; 0
   14072:	ae d9       	rcall	.-3236   	; 0x133d0 <push_state>
   14074:	63 e0       	ldi	r22, 0x03	; 3
                        state = SS80_CONFIG;
   14076:	66 2e       	mov	r6, r22
   14078:	71 2c       	mov	r7, r1
   1407a:	b4 ce       	rjmp	.-664    	; 0x13de4 <Read_Config+0x140>
                        break;
   1407c:	81 e0       	ldi	r24, 0x01	; 1
                    case TOK_CONTROLLER:
                        push_state(state);
                        state = SS80_CONTROLLER;
                        break;
                    case TOK_UNIT:
                        push_state(state);
   1407e:	90 e0       	ldi	r25, 0x00	; 0
   14080:	a7 d9       	rcall	.-3250   	; 0x133d0 <push_state>
   14082:	45 e0       	ldi	r20, 0x05	; 5
   14084:	64 2e       	mov	r6, r20
                        state = SS80_UNIT;
   14086:	71 2c       	mov	r7, r1
   14088:	ad ce       	rjmp	.-678    	; 0x13de4 <Read_Config+0x140>
   1408a:	ed b7       	in	r30, 0x3d	; 61
                        break;
   1408c:	fe b7       	in	r31, 0x3e	; 62
                    case TOK_VOLUME:
                        push_state(state);
                        state = SS80_VOLUME;
                        break;
                    default:
                        printf("Unexpected SS80 START token: %s, at line:%d\n", ptr,lines);
   1408e:	37 82       	std	Z+7, r3	; 0x07
   14090:	26 82       	std	Z+6, r2	; 0x06
   14092:	b5 82       	std	Z+5, r11	; 0x05
   14094:	a4 82       	std	Z+4, r10	; 0x04
   14096:	84 eb       	ldi	r24, 0xB4	; 180
   14098:	9f e1       	ldi	r25, 0x1F	; 31
   1409a:	88 cf       	rjmp	.-240    	; 0x13fac <Read_Config+0x308>
   1409c:	02 31       	cpi	r16, 0x12	; 18
   1409e:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_HEADER:
                switch(tok)
   140a0:	11 f1       	breq	.+68     	; 0x140e6 <Read_Config+0x442>
   140a2:	0f 31       	cpi	r16, 0x1F	; 31
   140a4:	11 05       	cpc	r17, r1
   140a6:	89 f0       	breq	.+34     	; 0x140ca <Read_Config+0x426>
   140a8:	01 30       	cpi	r16, 0x01	; 1
   140aa:	11 05       	cpc	r17, r1
   140ac:	09 f5       	brne	.+66     	; 0x140f0 <Read_Config+0x44c>
   140ae:	c8 5f       	subi	r28, 0xF8	; 248
   140b0:	de 4f       	sbci	r29, 0xFE	; 254
                {
                    case TOK_ADDRESS:
						address = val.b;
                        Devices[index].ADDRESS = address;
   140b2:	28 81       	ld	r18, Y
   140b4:	c8 50       	subi	r28, 0x08	; 8
   140b6:	d1 40       	sbci	r29, 0x01	; 1
   140b8:	3b e0       	ldi	r19, 0x0B	; 11
   140ba:	23 02       	muls	r18, r19
   140bc:	f0 01       	movw	r30, r0
   140be:	11 24       	eor	r1, r1
   140c0:	ec 50       	subi	r30, 0x0C	; 12
   140c2:	f1 4e       	sbci	r31, 0xE1	; 225
   140c4:	61 83       	std	Z+1, r22	; 0x01
   140c6:	d7 01       	movw	r26, r14
   140c8:	33 c1       	rjmp	.+614    	; 0x14330 <Read_Config+0x68c>
                        SS80p->HEADER.ADDRESS  = address;
   140ca:	c8 5f       	subi	r28, 0xF8	; 248
   140cc:	de 4f       	sbci	r29, 0xFE	; 254
                        break;
                    case TOK_PPR:
						ppr = val.b;
                        Devices[index].PPR = ppr;
   140ce:	b8 81       	ld	r27, Y
   140d0:	c8 50       	subi	r28, 0x08	; 8
   140d2:	d1 40       	sbci	r29, 0x01	; 1
   140d4:	2b e0       	ldi	r18, 0x0B	; 11
   140d6:	b2 02       	muls	r27, r18
   140d8:	f0 01       	movw	r30, r0
   140da:	11 24       	eor	r1, r1
   140dc:	ec 50       	subi	r30, 0x0C	; 12
   140de:	f1 4e       	sbci	r31, 0xE1	; 225
   140e0:	62 83       	std	Z+2, r22	; 0x02
   140e2:	f7 01       	movw	r30, r14
   140e4:	27 c1       	rjmp	.+590    	; 0x14334 <Read_Config+0x690>
                        SS80p->HEADER.PPR = ppr;
   140e6:	c4 01       	movw	r24, r8
   140e8:	0e 94 da 31 	call	0x63b4	; 0x63b4 <stralloc>
                        break;
                    case TOK_FILE:
                        SS80p->HEADER.NAME = stralloc(token);
   140ec:	f7 01       	movw	r30, r14
   140ee:	28 c1       	rjmp	.+592    	; 0x14340 <Read_Config+0x69c>
   140f0:	ed b7       	in	r30, 0x3d	; 61
   140f2:	fe b7       	in	r31, 0x3e	; 62
                        break;
                    default:
                        printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   140f4:	37 82       	std	Z+7, r3	; 0x07
   140f6:	26 82       	std	Z+6, r2	; 0x06
   140f8:	b5 82       	std	Z+5, r11	; 0x05
   140fa:	a4 82       	std	Z+4, r10	; 0x04
   140fc:	86 e8       	ldi	r24, 0x86	; 134
   140fe:	9f e1       	ldi	r25, 0x1F	; 31
   14100:	55 cf       	rjmp	.-342    	; 0x13fac <Read_Config+0x308>
   14102:	07 31       	cpi	r16, 0x17	; 23
   14104:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_CONFIG:
                if(tok == TOK_ID )
   14106:	21 f4       	brne	.+8      	; 0x14110 <Read_Config+0x46c>
   14108:	96 2f       	mov	r25, r22
   1410a:	87 2f       	mov	r24, r23
                {
                    SS80p->CONFIG.ID = val.w;
   1410c:	f7 01       	movw	r30, r14
   1410e:	2f c1       	rjmp	.+606    	; 0x1436e <Read_Config+0x6ca>
   14110:	ed b7       	in	r30, 0x3d	; 61
   14112:	fe b7       	in	r31, 0x3e	; 62
                }
                else
                {
                    printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   14114:	37 82       	std	Z+7, r3	; 0x07
   14116:	26 82       	std	Z+6, r2	; 0x06
   14118:	b5 82       	std	Z+5, r11	; 0x05
   1411a:	a4 82       	std	Z+4, r10	; 0x04
   1411c:	88 e5       	ldi	r24, 0x58	; 88
   1411e:	9f e1       	ldi	r25, 0x1F	; 31
   14120:	45 cf       	rjmp	.-374    	; 0x13fac <Read_Config+0x308>
   14122:	06 32       	cpi	r16, 0x26	; 38
   14124:	11 05       	cpc	r17, r1
                    ++errors;
                }
                break;

            case SS80_CONTROLLER:
                switch(tok)
   14126:	71 f0       	breq	.+28     	; 0x14144 <Read_Config+0x4a0>
   14128:	08 32       	cpi	r16, 0x28	; 40
   1412a:	11 05       	cpc	r17, r1
   1412c:	39 f0       	breq	.+14     	; 0x1413c <Read_Config+0x498>
   1412e:	05 32       	cpi	r16, 0x25	; 37
   14130:	11 05       	cpc	r17, r1
   14132:	59 f4       	brne	.+22     	; 0x1414a <Read_Config+0x4a6>
   14134:	96 2f       	mov	r25, r22
   14136:	87 2f       	mov	r24, r23
                {
                    case TOK_UNITS_INSTALLED:
                        SS80p->CONTROLLER.UNITS_INSTALLED = val.w;
                        break;
                    case TOK_TRANSFER_RATE:
                        SS80p->CONTROLLER.TRANSFER_RATE = val.w;
   14138:	f7 01       	movw	r30, r14
   1413a:	42 c1       	rjmp	.+644    	; 0x143c0 <Read_Config+0x71c>
   1413c:	96 2f       	mov	r25, r22
   1413e:	87 2f       	mov	r24, r23

            case SS80_CONTROLLER:
                switch(tok)
                {
                    case TOK_UNITS_INSTALLED:
                        SS80p->CONTROLLER.UNITS_INSTALLED = val.w;
   14140:	f7 01       	movw	r30, r14
   14142:	3b c1       	rjmp	.+630    	; 0x143ba <Read_Config+0x716>
   14144:	f7 01       	movw	r30, r14
   14146:	64 87       	std	Z+12, r22	; 0x0c
                        break;
                    case TOK_TRANSFER_RATE:
                        SS80p->CONTROLLER.TRANSFER_RATE = val.w;
                        break;
                    case TOK_TYPE:
                        SS80p->CONTROLLER.TYPE = val.b;
   14148:	4d ce       	rjmp	.-870    	; 0x13de4 <Read_Config+0x140>
   1414a:	ed b7       	in	r30, 0x3d	; 61
                        break;
   1414c:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected SS80 CONTROLLER token: %s, at line:%d\n", ptr,lines);
   1414e:	37 82       	std	Z+7, r3	; 0x07
   14150:	26 82       	std	Z+6, r2	; 0x06
   14152:	b5 82       	std	Z+5, r11	; 0x05
   14154:	a4 82       	std	Z+4, r10	; 0x04
   14156:	86 e2       	ldi	r24, 0x26	; 38
   14158:	9f e1       	ldi	r25, 0x1F	; 31
   1415a:	28 cf       	rjmp	.-432    	; 0x13fac <Read_Config+0x308>
   1415c:	0a 30       	cpi	r16, 0x0A	; 10
   1415e:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   14160:	09 f4       	brne	.+2      	; 0x14164 <Read_Config+0x4c0>
   14162:	45 c0       	rjmp	.+138    	; 0x141ee <Read_Config+0x54a>
   14164:	d4 f4       	brge	.+52     	; 0x1419a <Read_Config+0x4f6>
   14166:	05 30       	cpi	r16, 0x05	; 5
   14168:	11 05       	cpc	r17, r1
   1416a:	d1 f1       	breq	.+116    	; 0x141e0 <Read_Config+0x53c>
   1416c:	64 f4       	brge	.+24     	; 0x14186 <Read_Config+0x4e2>
   1416e:	01 15       	cp	r16, r1
   14170:	11 05       	cpc	r17, r1
   14172:	09 f4       	brne	.+2      	; 0x14176 <Read_Config+0x4d2>
   14174:	40 c0       	rjmp	.+128    	; 0x141f6 <Read_Config+0x552>
   14176:	04 30       	cpi	r16, 0x04	; 4
   14178:	11 05       	cpc	r17, r1
   1417a:	09 f0       	breq	.+2      	; 0x1417e <Read_Config+0x4da>
   1417c:	46 c0       	rjmp	.+140    	; 0x1420a <Read_Config+0x566>
   1417e:	f7 01       	movw	r30, r14
   14180:	66 8b       	std	Z+22, r22	; 0x16
                        break;
                    case TOK_BURST_SIZE:
                        SS80p->UNIT.BURST_SIZE = val.b;
                        break;
                    case TOK_BLOCK_TIME:
                        SS80p->UNIT.BLOCK_TIME = val.w;
   14182:	77 8b       	std	Z+23, r23	; 0x17
   14184:	2f ce       	rjmp	.-930    	; 0x13de4 <Read_Config+0x140>
   14186:	06 30       	cpi	r16, 0x06	; 6
                        break;
   14188:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   1418a:	71 f1       	breq	.+92     	; 0x141e8 <Read_Config+0x544>
   1418c:	07 30       	cpi	r16, 0x07	; 7
   1418e:	11 05       	cpc	r17, r1
   14190:	e1 f5       	brne	.+120    	; 0x1420a <Read_Config+0x566>
   14192:	f7 01       	movw	r30, r14
   14194:	62 8b       	std	Z+18, r22	; 0x12
                        break;
                    case TOK_DEVICE_NUMBER:
                        SS80p->UNIT.DEVICE_NUMBER = val.l;
                        break;
                    case TOK_BYTES_PER_BLOCK:
                        SS80p->UNIT.BYTES_PER_BLOCK = val.w;
   14196:	73 8b       	std	Z+19, r23	; 0x13
   14198:	25 ce       	rjmp	.-950    	; 0x13de4 <Read_Config+0x140>
   1419a:	0c 31       	cpi	r16, 0x1C	; 28
                        break;
   1419c:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   1419e:	79 f1       	breq	.+94     	; 0x141fe <Read_Config+0x55a>
   141a0:	4c f4       	brge	.+18     	; 0x141b4 <Read_Config+0x510>
   141a2:	0f 30       	cpi	r16, 0x0F	; 15
   141a4:	11 05       	cpc	r17, r1
   141a6:	b1 f0       	breq	.+44     	; 0x141d4 <Read_Config+0x530>
   141a8:	03 31       	cpi	r16, 0x13	; 19
   141aa:	11 05       	cpc	r17, r1
   141ac:	71 f5       	brne	.+92     	; 0x1420a <Read_Config+0x566>
   141ae:	f7 01       	movw	r30, r14
   141b0:	67 8f       	std	Z+31, r22	; 0x1f
                        break;
                    case TOK_MAXIMUM_INTERLEAVE:
                        SS80p->UNIT.MAXIMUM_INTERLEAVE = val.b;
                        break;
                    case TOK_FIXED_VOLUMES:
                        SS80p->UNIT.FIXED_VOLUMES = val.b;
   141b2:	18 ce       	rjmp	.-976    	; 0x13de4 <Read_Config+0x140>
   141b4:	01 32       	cpi	r16, 0x21	; 33
                        break;
   141b6:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   141b8:	29 f1       	breq	.+74     	; 0x14204 <Read_Config+0x560>
   141ba:	09 32       	cpi	r16, 0x29	; 41
   141bc:	11 05       	cpc	r17, r1
   141be:	39 f0       	breq	.+14     	; 0x141ce <Read_Config+0x52a>
   141c0:	0e 31       	cpi	r16, 0x1E	; 30
   141c2:	11 05       	cpc	r17, r1
   141c4:	11 f5       	brne	.+68     	; 0x1420a <Read_Config+0x566>
   141c6:	f7 01       	movw	r30, r14
   141c8:	62 8f       	std	Z+26, r22	; 0x1a
                        break;
                    case TOK_CONTINUOUS_TRANSFER_RATE:
                        SS80p->UNIT.CONTINUOUS_TRANSFER_RATE = val.w;
                        break;
                    case TOK_OPTIMAL_RETRY_TIME:
                        SS80p->UNIT.OPTIMAL_RETRY_TIME = val.w;
   141ca:	73 8f       	std	Z+27, r23	; 0x1b
   141cc:	0b ce       	rjmp	.-1002   	; 0x13de4 <Read_Config+0x140>
   141ce:	f7 01       	movw	r30, r14
                        break;
   141d0:	65 87       	std	Z+13, r22	; 0x0d

            case SS80_UNIT:
                switch(tok)
                {
                    case TOK_UNIT_TYPE:
                        SS80p->UNIT.UNIT_TYPE = val.b;
   141d2:	08 ce       	rjmp	.-1008   	; 0x13de4 <Read_Config+0x140>
   141d4:	f7 01       	movw	r30, r14
                        break;
   141d6:	66 87       	std	Z+14, r22	; 0x0e
                    case TOK_DEVICE_NUMBER:
                        SS80p->UNIT.DEVICE_NUMBER = val.l;
   141d8:	77 87       	std	Z+15, r23	; 0x0f
   141da:	80 8b       	std	Z+16, r24	; 0x10
   141dc:	91 8b       	std	Z+17, r25	; 0x11
   141de:	02 ce       	rjmp	.-1020   	; 0x13de4 <Read_Config+0x140>
   141e0:	61 70       	andi	r22, 0x01	; 1
                        break;
   141e2:	f7 01       	movw	r30, r14
                    case TOK_BYTES_PER_BLOCK:
                        SS80p->UNIT.BYTES_PER_BLOCK = val.w;
                        break;
                    case TOK_BUFFERED_BLOCKS:
                        SS80p->UNIT.BUFFERED_BLOCKS = 1 & val.b;
   141e4:	64 8b       	std	Z+20, r22	; 0x14
   141e6:	fe cd       	rjmp	.-1028   	; 0x13de4 <Read_Config+0x140>
   141e8:	f7 01       	movw	r30, r14
                        break;
   141ea:	65 8b       	std	Z+21, r22	; 0x15
                    case TOK_BURST_SIZE:
                        SS80p->UNIT.BURST_SIZE = val.b;
   141ec:	fb cd       	rjmp	.-1034   	; 0x13de4 <Read_Config+0x140>
   141ee:	f7 01       	movw	r30, r14
                        break;
   141f0:	60 8f       	std	Z+24, r22	; 0x18
                    case TOK_BLOCK_TIME:
                        SS80p->UNIT.BLOCK_TIME = val.w;
                        break;
                    case TOK_CONTINUOUS_TRANSFER_RATE:
                        SS80p->UNIT.CONTINUOUS_TRANSFER_RATE = val.w;
   141f2:	71 8f       	std	Z+25, r23	; 0x19
   141f4:	f7 cd       	rjmp	.-1042   	; 0x13de4 <Read_Config+0x140>
   141f6:	f7 01       	movw	r30, r14
                        break;
   141f8:	64 8f       	std	Z+28, r22	; 0x1c
                    case TOK_OPTIMAL_RETRY_TIME:
                        SS80p->UNIT.OPTIMAL_RETRY_TIME = val.w;
                        break;
                    case TOK_ACCESS_TIME:
                        SS80p->UNIT.ACCESS_TIME = val.w;
   141fa:	75 8f       	std	Z+29, r23	; 0x1d
   141fc:	f3 cd       	rjmp	.-1050   	; 0x13de4 <Read_Config+0x140>
   141fe:	f7 01       	movw	r30, r14
                        break;
   14200:	66 8f       	std	Z+30, r22	; 0x1e
                    case TOK_MAXIMUM_INTERLEAVE:
                        SS80p->UNIT.MAXIMUM_INTERLEAVE = val.b;
   14202:	f0 cd       	rjmp	.-1056   	; 0x13de4 <Read_Config+0x140>
   14204:	f7 01       	movw	r30, r14
                        break;
   14206:	60 a3       	std	Z+32, r22	; 0x20
                    case TOK_FIXED_VOLUMES:
                        SS80p->UNIT.FIXED_VOLUMES = val.b;
                        break;
                    case TOK_REMOVABLE_VOLUMES:
                        SS80p->UNIT.REMOVABLE_VOLUMES = val.b;
   14208:	ed cd       	rjmp	.-1062   	; 0x13de4 <Read_Config+0x140>
   1420a:	ed b7       	in	r30, 0x3d	; 61
                        break;
   1420c:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected SS80 UNIT token: %s, at line:%d\n", ptr,lines);
   1420e:	37 82       	std	Z+7, r3	; 0x07
   14210:	26 82       	std	Z+6, r2	; 0x06
   14212:	b5 82       	std	Z+5, r11	; 0x05
   14214:	a4 82       	std	Z+4, r10	; 0x04
   14216:	8a ef       	ldi	r24, 0xFA	; 250
   14218:	9e e1       	ldi	r25, 0x1E	; 30
   1421a:	c8 ce       	rjmp	.-624    	; 0x13fac <Read_Config+0x308>
   1421c:	0a 31       	cpi	r16, 0x1A	; 26
   1421e:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_VOLUME:
                switch(tok)
   14220:	b9 f0       	breq	.+46     	; 0x14250 <Read_Config+0x5ac>
   14222:	64 f4       	brge	.+24     	; 0x1423c <Read_Config+0x598>
   14224:	08 31       	cpi	r16, 0x18	; 24
   14226:	11 05       	cpc	r17, r1
   14228:	e1 f0       	breq	.+56     	; 0x14262 <Read_Config+0x5be>
   1422a:	09 31       	cpi	r16, 0x19	; 25
   1422c:	11 05       	cpc	r17, r1
   1422e:	e1 f4       	brne	.+56     	; 0x14268 <Read_Config+0x5c4>
   14230:	f7 01       	movw	r30, r14
   14232:	60 a7       	std	Z+40, r22	; 0x28
                        break;
                    case TOK_MAX_SECTOR:
                        SS80p->VOLUME.MAX_SECTOR = val.w;
                        break;
                    case TOK_MAX_BLOCK_NUMBER:
                        SS80p->VOLUME.MAX_BLOCK_NUMBER = val.l;
   14234:	71 a7       	std	Z+41, r23	; 0x29
   14236:	82 a7       	std	Z+42, r24	; 0x2a
   14238:	93 a7       	std	Z+43, r25	; 0x2b
   1423a:	d4 cd       	rjmp	.-1112   	; 0x13de4 <Read_Config+0x140>
   1423c:	0b 31       	cpi	r16, 0x1B	; 27
                        break;
   1423e:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_VOLUME:
                switch(tok)
   14240:	69 f0       	breq	.+26     	; 0x1425c <Read_Config+0x5b8>
   14242:	0d 31       	cpi	r16, 0x1D	; 29
   14244:	11 05       	cpc	r17, r1
   14246:	81 f4       	brne	.+32     	; 0x14268 <Read_Config+0x5c4>
   14248:	f7 01       	movw	r30, r14
   1424a:	66 a3       	std	Z+38, r22	; 0x26
                        break;
                    case TOK_MAX_HEAD:
                        SS80p->VOLUME.MAX_HEAD = val.b;
                        break;
                    case TOK_MAX_SECTOR:
                        SS80p->VOLUME.MAX_SECTOR = val.w;
   1424c:	77 a3       	std	Z+39, r23	; 0x27
   1424e:	ca cd       	rjmp	.-1132   	; 0x13de4 <Read_Config+0x140>
   14250:	f7 01       	movw	r30, r14
                        break;
   14252:	61 a3       	std	Z+33, r22	; 0x21

            case SS80_VOLUME:
                switch(tok)
                {
                    case TOK_MAX_CYLINDER:
                        SS80p->VOLUME.MAX_CYLINDER = val.l;
   14254:	72 a3       	std	Z+34, r23	; 0x22
   14256:	83 a3       	std	Z+35, r24	; 0x23
   14258:	94 a3       	std	Z+36, r25	; 0x24
   1425a:	c4 cd       	rjmp	.-1144   	; 0x13de4 <Read_Config+0x140>
   1425c:	f7 01       	movw	r30, r14
                        break;
   1425e:	65 a3       	std	Z+37, r22	; 0x25
                    case TOK_MAX_HEAD:
                        SS80p->VOLUME.MAX_HEAD = val.b;
   14260:	c1 cd       	rjmp	.-1150   	; 0x13de4 <Read_Config+0x140>
   14262:	f7 01       	movw	r30, r14
                        break;
   14264:	64 a7       	std	Z+44, r22	; 0x2c
                        break;
                    case TOK_MAX_BLOCK_NUMBER:
                        SS80p->VOLUME.MAX_BLOCK_NUMBER = val.l;
                        break;
                    case TOK_INTERLEAVE:
                        SS80p->VOLUME.INTERLEAVE = val.b;
   14266:	be cd       	rjmp	.-1156   	; 0x13de4 <Read_Config+0x140>
   14268:	ed b7       	in	r30, 0x3d	; 61
                        break;
   1426a:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected SS80 VOLUME token: %s, at line:%d\n", ptr,lines);
   1426c:	37 82       	std	Z+7, r3	; 0x07
   1426e:	26 82       	std	Z+6, r2	; 0x06
   14270:	b5 82       	std	Z+5, r11	; 0x05
   14272:	a4 82       	std	Z+4, r10	; 0x04
   14274:	c4 5e       	subi	r28, 0xE4	; 228
   14276:	de 4f       	sbci	r29, 0xFE	; 254
   14278:	28 81       	ld	r18, Y
   1427a:	39 81       	ldd	r19, Y+1	; 0x01
   1427c:	4a 81       	ldd	r20, Y+2	; 0x02
   1427e:	cc 51       	subi	r28, 0x1C	; 28
   14280:	d1 40       	sbci	r29, 0x01	; 1
   14282:	c4 c0       	rjmp	.+392    	; 0x1440c <Read_Config+0x768>
   14284:	04 31       	cpi	r16, 0x14	; 20
                }
                break;

#ifdef AMIGO
            case AMIGO_STATE:
                switch(tok)
   14286:	11 05       	cpc	r17, r1
   14288:	a1 f0       	breq	.+40     	; 0x142b2 <Read_Config+0x60e>
   1428a:	05 31       	cpi	r16, 0x15	; 21
   1428c:	11 05       	cpc	r17, r1
   1428e:	51 f0       	breq	.+20     	; 0x142a4 <Read_Config+0x600>
   14290:	09 30       	cpi	r16, 0x09	; 9
   14292:	11 05       	cpc	r17, r1
                    case TOK_HEADER:
                        push_state(state);
                        state = AMIGO_HEADER;
                        break;
                    case TOK_CONFIG:
                        push_state(state);
   14294:	a9 f4       	brne	.+42     	; 0x142c0 <Read_Config+0x61c>
   14296:	8a e0       	ldi	r24, 0x0A	; 10
   14298:	90 e0       	ldi	r25, 0x00	; 0
   1429a:	9a d8       	rcall	.-3788   	; 0x133d0 <push_state>
                        state = AMIGO_CONFIG;
   1429c:	9c e0       	ldi	r25, 0x0C	; 12
   1429e:	69 2e       	mov	r6, r25
   142a0:	71 2c       	mov	r7, r1
                        break;
   142a2:	a0 cd       	rjmp	.-1216   	; 0x13de4 <Read_Config+0x140>
#ifdef AMIGO
            case AMIGO_STATE:
                switch(tok)
                {
                    case TOK_HEADER:
                        push_state(state);
   142a4:	8a e0       	ldi	r24, 0x0A	; 10
   142a6:	90 e0       	ldi	r25, 0x00	; 0
   142a8:	93 d8       	rcall	.-3802   	; 0x133d0 <push_state>
   142aa:	2b e0       	ldi	r18, 0x0B	; 11
                        state = AMIGO_HEADER;
   142ac:	62 2e       	mov	r6, r18
   142ae:	71 2c       	mov	r7, r1
   142b0:	99 cd       	rjmp	.-1230   	; 0x13de4 <Read_Config+0x140>
                        break;
   142b2:	8a e0       	ldi	r24, 0x0A	; 10
                    case TOK_CONFIG:
                        push_state(state);
                        state = AMIGO_CONFIG;
                        break;
                    case TOK_GEOMETRY:
                        push_state(state);
   142b4:	90 e0       	ldi	r25, 0x00	; 0
   142b6:	8c d8       	rcall	.-3816   	; 0x133d0 <push_state>
   142b8:	8d e0       	ldi	r24, 0x0D	; 13
   142ba:	68 2e       	mov	r6, r24
                        state = AMIGO_GEOMETRY;
   142bc:	71 2c       	mov	r7, r1
   142be:	92 cd       	rjmp	.-1244   	; 0x13de4 <Read_Config+0x140>
   142c0:	ed b7       	in	r30, 0x3d	; 61
                        break;
   142c2:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected AMIGO START token: %s, at line:%d\n", ptr,lines);
   142c4:	37 82       	std	Z+7, r3	; 0x07
   142c6:	26 82       	std	Z+6, r2	; 0x06
   142c8:	b5 82       	std	Z+5, r11	; 0x05
   142ca:	a4 82       	std	Z+4, r10	; 0x04
   142cc:	c7 5e       	subi	r28, 0xE7	; 231
   142ce:	de 4f       	sbci	r29, 0xFE	; 254
   142d0:	28 81       	ld	r18, Y
   142d2:	39 81       	ldd	r19, Y+1	; 0x01
   142d4:	4a 81       	ldd	r20, Y+2	; 0x02
   142d6:	c9 51       	subi	r28, 0x19	; 25
   142d8:	d1 40       	sbci	r29, 0x01	; 1
   142da:	98 c0       	rjmp	.+304    	; 0x1440c <Read_Config+0x768>
   142dc:	00 31       	cpi	r16, 0x10	; 16
   142de:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case AMIGO_HEADER:
                switch(tok)
   142e0:	09 f4       	brne	.+2      	; 0x142e4 <Read_Config+0x640>
   142e2:	80 cd       	rjmp	.-1280   	; 0x13de4 <Read_Config+0x140>
   142e4:	8c f4       	brge	.+34     	; 0x14308 <Read_Config+0x664>
   142e6:	01 30       	cpi	r16, 0x01	; 1
   142e8:	11 05       	cpc	r17, r1
   142ea:	69 f5       	brne	.+90     	; 0x14346 <Read_Config+0x6a2>
   142ec:	c8 5f       	subi	r28, 0xF8	; 248
   142ee:	de 4f       	sbci	r29, 0xFE	; 254
                {
                    case TOK_DRIVE:
                        break;
                    case TOK_ADDRESS:
						address =  val.b;
                        Devices[index].ADDRESS = address;
   142f0:	28 81       	ld	r18, Y
   142f2:	c8 50       	subi	r28, 0x08	; 8
   142f4:	d1 40       	sbci	r29, 0x01	; 1
   142f6:	3b e0       	ldi	r19, 0x0B	; 11
   142f8:	23 02       	muls	r18, r19
   142fa:	f0 01       	movw	r30, r0
   142fc:	11 24       	eor	r1, r1
   142fe:	ec 50       	subi	r30, 0x0C	; 12
   14300:	f1 4e       	sbci	r31, 0xE1	; 225
   14302:	61 83       	std	Z+1, r22	; 0x01
   14304:	d2 01       	movw	r26, r4
   14306:	14 c0       	rjmp	.+40     	; 0x14330 <Read_Config+0x68c>
                        AMIGOp->HEADER.ADDRESS = address;
   14308:	02 31       	cpi	r16, 0x12	; 18
   1430a:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case AMIGO_HEADER:
                switch(tok)
   1430c:	a9 f0       	breq	.+42     	; 0x14338 <Read_Config+0x694>
   1430e:	0f 31       	cpi	r16, 0x1F	; 31
   14310:	11 05       	cpc	r17, r1
   14312:	c9 f4       	brne	.+50     	; 0x14346 <Read_Config+0x6a2>
   14314:	c8 5f       	subi	r28, 0xF8	; 248
   14316:	de 4f       	sbci	r29, 0xFE	; 254
                        Devices[index].ADDRESS = address;
                        AMIGOp->HEADER.ADDRESS = address;
                        break;
                    case TOK_PPR:
						ppr = val.b;
                        Devices[index].PPR = ppr;
   14318:	b8 81       	ld	r27, Y
   1431a:	c8 50       	subi	r28, 0x08	; 8
   1431c:	d1 40       	sbci	r29, 0x01	; 1
   1431e:	2b e0       	ldi	r18, 0x0B	; 11
   14320:	b2 02       	muls	r27, r18
   14322:	f0 01       	movw	r30, r0
   14324:	11 24       	eor	r1, r1
   14326:	ec 50       	subi	r30, 0x0C	; 12
   14328:	f1 4e       	sbci	r31, 0xE1	; 225
   1432a:	62 83       	std	Z+2, r22	; 0x02
   1432c:	f2 01       	movw	r30, r4
   1432e:	02 c0       	rjmp	.+4      	; 0x14334 <Read_Config+0x690>
                        AMIGOp->HEADER.PPR = ppr;
   14330:	6c 93       	st	X, r22
   14332:	58 cd       	rjmp	.-1360   	; 0x13de4 <Read_Config+0x140>
                    case TOK_DRIVE:
                        break;
                    case TOK_ADDRESS:
						address =  val.b;
                        Devices[index].ADDRESS = address;
                        AMIGOp->HEADER.ADDRESS = address;
   14334:	61 83       	std	Z+1, r22	; 0x01
                        break;
   14336:	56 cd       	rjmp	.-1364   	; 0x13de4 <Read_Config+0x140>
                    case TOK_PPR:
						ppr = val.b;
                        Devices[index].PPR = ppr;
                        AMIGOp->HEADER.PPR = ppr;
   14338:	c4 01       	movw	r24, r8
                        break;
   1433a:	0e 94 da 31 	call	0x63b4	; 0x63b4 <stralloc>
                    case TOK_FILE:
                        AMIGOp->HEADER.NAME = stralloc(token);
   1433e:	f2 01       	movw	r30, r4
   14340:	93 83       	std	Z+3, r25	; 0x03
   14342:	82 83       	std	Z+2, r24	; 0x02
   14344:	4f cd       	rjmp	.-1378   	; 0x13de4 <Read_Config+0x140>
   14346:	ed b7       	in	r30, 0x3d	; 61
                        break;
   14348:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   1434a:	37 82       	std	Z+7, r3	; 0x07
   1434c:	26 82       	std	Z+6, r2	; 0x06
   1434e:	b5 82       	std	Z+5, r11	; 0x05
   14350:	a4 82       	std	Z+4, r10	; 0x04
   14352:	ca 5e       	subi	r28, 0xEA	; 234
   14354:	de 4f       	sbci	r29, 0xFE	; 254
   14356:	28 81       	ld	r18, Y
   14358:	39 81       	ldd	r19, Y+1	; 0x01
   1435a:	4a 81       	ldd	r20, Y+2	; 0x02
   1435c:	c6 51       	subi	r28, 0x16	; 22
   1435e:	d1 40       	sbci	r29, 0x01	; 1
   14360:	55 c0       	rjmp	.+170    	; 0x1440c <Read_Config+0x768>
   14362:	07 31       	cpi	r16, 0x17	; 23
   14364:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case AMIGO_CONFIG:
                if(tok == TOK_ID )
   14366:	31 f4       	brne	.+12     	; 0x14374 <Read_Config+0x6d0>
   14368:	96 2f       	mov	r25, r22
   1436a:	87 2f       	mov	r24, r23
                {
                    AMIGOp->CONFIG.ID = val.w;
   1436c:	f2 01       	movw	r30, r4
   1436e:	96 83       	std	Z+6, r25	; 0x06
   14370:	87 83       	std	Z+7, r24	; 0x07
   14372:	38 cd       	rjmp	.-1424   	; 0x13de4 <Read_Config+0x140>
   14374:	ed b7       	in	r30, 0x3d	; 61
   14376:	fe b7       	in	r31, 0x3e	; 62
                }
                else
                {
                    printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   14378:	37 82       	std	Z+7, r3	; 0x07
   1437a:	26 82       	std	Z+6, r2	; 0x06
   1437c:	b5 82       	std	Z+5, r11	; 0x05
   1437e:	a4 82       	std	Z+4, r10	; 0x04
   14380:	cd 5e       	subi	r28, 0xED	; 237
   14382:	de 4f       	sbci	r29, 0xFE	; 254
   14384:	28 81       	ld	r18, Y
   14386:	39 81       	ldd	r19, Y+1	; 0x01
   14388:	4a 81       	ldd	r20, Y+2	; 0x02
   1438a:	c3 51       	subi	r28, 0x13	; 19
   1438c:	d1 40       	sbci	r29, 0x01	; 1
   1438e:	3e c0       	rjmp	.+124    	; 0x1440c <Read_Config+0x768>
   14390:	0d 30       	cpi	r16, 0x0D	; 13
   14392:	11 05       	cpc	r17, r1
                    ++errors;
                }
                break;

            case AMIGO_GEOMETRY:
                switch(tok)
   14394:	e1 f0       	breq	.+56     	; 0x143ce <Read_Config+0x72a>
   14396:	3c f4       	brge	.+14     	; 0x143a6 <Read_Config+0x702>
   14398:	08 30       	cpi	r16, 0x08	; 8
   1439a:	11 05       	cpc	r17, r1
   1439c:	e1 f4       	brne	.+56     	; 0x143d6 <Read_Config+0x732>
   1439e:	96 2f       	mov	r25, r22
   143a0:	87 2f       	mov	r24, r23
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
   143a2:	f2 01       	movw	r30, r4
   143a4:	0a c0       	rjmp	.+20     	; 0x143ba <Read_Config+0x716>
   143a6:	06 31       	cpi	r16, 0x16	; 22
   143a8:	11 05       	cpc	r17, r1
                    ++errors;
                }
                break;

            case AMIGO_GEOMETRY:
                switch(tok)
   143aa:	69 f0       	breq	.+26     	; 0x143c6 <Read_Config+0x722>
   143ac:	02 32       	cpi	r16, 0x22	; 34
   143ae:	11 05       	cpc	r17, r1
   143b0:	91 f4       	brne	.+36     	; 0x143d6 <Read_Config+0x732>
   143b2:	96 2f       	mov	r25, r22
   143b4:	87 2f       	mov	r24, r23
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
                        break;
                    case TOK_SECTORS_PER_TRACK:
                        AMIGOp->GEOMETRY.SECTORS_PER_TRACK = val.w;
   143b6:	f2 01       	movw	r30, r4
   143b8:	03 c0       	rjmp	.+6      	; 0x143c0 <Read_Config+0x71c>
   143ba:	90 87       	std	Z+8, r25	; 0x08
   143bc:	81 87       	std	Z+9, r24	; 0x09

            case AMIGO_GEOMETRY:
                switch(tok)
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
   143be:	12 cd       	rjmp	.-1500   	; 0x13de4 <Read_Config+0x140>
   143c0:	92 87       	std	Z+10, r25	; 0x0a
                        break;
   143c2:	83 87       	std	Z+11, r24	; 0x0b
                    case TOK_SECTORS_PER_TRACK:
                        AMIGOp->GEOMETRY.SECTORS_PER_TRACK = val.w;
   143c4:	0f cd       	rjmp	.-1506   	; 0x13de4 <Read_Config+0x140>
   143c6:	f2 01       	movw	r30, r4
                        break;
   143c8:	64 87       	std	Z+12, r22	; 0x0c
                    case TOK_HEADS:
                        AMIGOp->GEOMETRY.HEADS = val.w;
   143ca:	75 87       	std	Z+13, r23	; 0x0d
   143cc:	0b cd       	rjmp	.-1514   	; 0x13de4 <Read_Config+0x140>
   143ce:	f2 01       	movw	r30, r4
                        break;
   143d0:	66 87       	std	Z+14, r22	; 0x0e
                    case TOK_CYLINDERS:
                        AMIGOp->GEOMETRY.CYLINDERS = val.w;
   143d2:	77 87       	std	Z+15, r23	; 0x0f
   143d4:	07 cd       	rjmp	.-1522   	; 0x13de4 <Read_Config+0x140>
   143d6:	ed b7       	in	r30, 0x3d	; 61
                        break;
   143d8:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   143da:	37 82       	std	Z+7, r3	; 0x07
   143dc:	26 82       	std	Z+6, r2	; 0x06
   143de:	b5 82       	std	Z+5, r11	; 0x05
   143e0:	a4 82       	std	Z+4, r10	; 0x04
   143e2:	c0 5f       	subi	r28, 0xF0	; 240
   143e4:	de 4f       	sbci	r29, 0xFE	; 254
   143e6:	28 81       	ld	r18, Y
   143e8:	39 81       	ldd	r19, Y+1	; 0x01
   143ea:	4a 81       	ldd	r20, Y+2	; 0x02
   143ec:	c0 51       	subi	r28, 0x10	; 16
   143ee:	d1 40       	sbci	r29, 0x01	; 1
   143f0:	0d c0       	rjmp	.+26     	; 0x1440c <Read_Config+0x768>
   143f2:	ed b7       	in	r30, 0x3d	; 61
   143f4:	fe b7       	in	r31, 0x3e	; 62
                        break;
                }
                break;
#endif                                // #ifdef AMIGO
            default:
                printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   143f6:	37 82       	std	Z+7, r3	; 0x07
   143f8:	26 82       	std	Z+6, r2	; 0x06
   143fa:	b5 82       	std	Z+5, r11	; 0x05
   143fc:	a4 82       	std	Z+4, r10	; 0x04
   143fe:	c3 5f       	subi	r28, 0xF3	; 243
   14400:	de 4f       	sbci	r29, 0xFE	; 254
   14402:	28 81       	ld	r18, Y
   14404:	39 81       	ldd	r19, Y+1	; 0x01
   14406:	4a 81       	ldd	r20, Y+2	; 0x02
   14408:	cd 50       	subi	r28, 0x0D	; 13
   1440a:	d1 40       	sbci	r29, 0x01	; 1
   1440c:	21 83       	std	Z+1, r18	; 0x01
   1440e:	32 83       	std	Z+2, r19	; 0x02
   14410:	43 83       	std	Z+3, r20	; 0x03
   14412:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   14416:	ff ef       	ldi	r31, 0xFF	; 255
   14418:	cf 1a       	sub	r12, r31
                ++errors;
   1441a:	df 0a       	sbc	r13, r31
   1441c:	e3 cc       	rjmp	.-1594   	; 0x13de4 <Read_Config+0x140>
   1441e:	61 14       	cp	r6, r1
                break;
   14420:	71 04       	cpc	r7, r1

        }                                         // switch
    }                                             //while
    if(state != START_STATE)
   14422:	79 f0       	breq	.+30     	; 0x14442 <Read_Config+0x79e>
   14424:	ed b7       	in	r30, 0x3d	; 61
   14426:	fe b7       	in	r31, 0x3e	; 62
    {
        printf("Missing END statement at line:%d\n", lines);
   14428:	35 82       	std	Z+5, r3	; 0x05
   1442a:	24 82       	std	Z+4, r2	; 0x04
   1442c:	8b ec       	ldi	r24, 0xCB	; 203
   1442e:	9d e1       	ldi	r25, 0x1D	; 29
   14430:	a0 e0       	ldi	r26, 0x00	; 0
   14432:	81 83       	std	Z+1, r24	; 0x01
   14434:	92 83       	std	Z+2, r25	; 0x02
   14436:	a3 83       	std	Z+3, r26	; 0x03
   14438:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   1443c:	ff ef       	ldi	r31, 0xFF	; 255
   1443e:	cf 1a       	sub	r12, r31
        ++errors;
   14440:	df 0a       	sbc	r13, r31
   14442:	ed b7       	in	r30, 0x3d	; 61
   14444:	fe b7       	in	r31, 0x3e	; 62
    }
    printf("Read_Config: read(%d) lines\n", lines);
   14446:	35 82       	std	Z+5, r3	; 0x05
   14448:	24 82       	std	Z+4, r2	; 0x04
   1444a:	8e ea       	ldi	r24, 0xAE	; 174
   1444c:	9d e1       	ldi	r25, 0x1D	; 29
   1444e:	a0 e0       	ldi	r26, 0x00	; 0
   14450:	81 83       	std	Z+1, r24	; 0x01
   14452:	92 83       	std	Z+2, r25	; 0x02
   14454:	a3 83       	std	Z+3, r26	; 0x03
   14456:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   1445a:	c1 14       	cp	r12, r1
   1445c:	d1 04       	cpc	r13, r1
    if(errors)
   1445e:	61 f0       	breq	.+24     	; 0x14478 <Read_Config+0x7d4>
   14460:	ed b7       	in	r30, 0x3d	; 61
   14462:	fe b7       	in	r31, 0x3e	; 62
        printf("Read_Config: ****** errors(%d) ******\n", errors);
   14464:	d5 82       	std	Z+5, r13	; 0x05
   14466:	c4 82       	std	Z+4, r12	; 0x04
   14468:	87 e8       	ldi	r24, 0x87	; 135
   1446a:	9d e1       	ldi	r25, 0x1D	; 29
   1446c:	a0 e0       	ldi	r26, 0x00	; 0
   1446e:	81 83       	std	Z+1, r24	; 0x01
   14470:	92 83       	std	Z+2, r25	; 0x02
   14472:	a3 83       	std	Z+3, r26	; 0x03
   14474:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   14478:	c5 5f       	subi	r28, 0xF5	; 245
   1447a:	de 4f       	sbci	r29, 0xFE	; 254

    if(fclose(cfg) == EOF)
   1447c:	88 81       	ld	r24, Y
   1447e:	99 81       	ldd	r25, Y+1	; 0x01
   14480:	cb 50       	subi	r28, 0x0B	; 11
   14482:	d1 40       	sbci	r29, 0x01	; 1
   14484:	0e 94 d4 7c 	call	0xf9a8	; 0xf9a8 <fclose>
   14488:	01 96       	adiw	r24, 0x01	; 1
   1448a:	39 f4       	brne	.+14     	; 0x1449a <Read_Config+0x7f6>
   1448c:	86 e6       	ldi	r24, 0x66	; 102
   1448e:	9e e0       	ldi	r25, 0x0E	; 14
    {
        perror("Read_Config - close error");
   14490:	0e 94 5b 78 	call	0xf0b6	; 0xf0b6 <perror>
   14494:	2f ef       	ldi	r18, 0xFF	; 255
        ++errors;
   14496:	c2 1a       	sub	r12, r18
   14498:	d2 0a       	sbc	r13, r18
   1449a:	fb db       	rcall	.-2058   	; 0x13c92 <verify_devices>
    }

// Post process and fixup any devices
    verify_devices();
   1449c:	c6 01       	movw	r24, r12
   1449e:	c2 5e       	subi	r28, 0xE2	; 226

    return(errors);
   144a0:	de 4f       	sbci	r29, 0xFE	; 254
}
   144a2:	e2 e1       	ldi	r30, 0x12	; 18
   144a4:	0c 94 d7 e6 	jmp	0x1cdae	; 0x1cdae <__epilogue_restores__>

000144a8 <display_mounts>:
   144a8:	cf 93       	push	r28
   144aa:	00 d0       	rcall	.+0      	; 0x144ac <display_mounts+0x4>
            printf("PRINTER %-8s %2d\n", " ", (int) PRINTERp->HEADER.ADDRESS);
	}
}

void display_mounts()
{
   144ac:	1f 92       	push	r1
	int8_t i;
	printf("Mounted drives\n");
   144ae:	81 eb       	ldi	r24, 0xB1	; 177
   144b0:	97 e1       	ldi	r25, 0x17	; 23
   144b2:	a0 e0       	ldi	r26, 0x00	; 0
   144b4:	ed b7       	in	r30, 0x3d	; 61
   144b6:	fe b7       	in	r31, 0x3e	; 62
   144b8:	81 83       	std	Z+1, r24	; 0x01
   144ba:	92 83       	std	Z+2, r25	; 0x02
   144bc:	a3 83       	std	Z+3, r26	; 0x03
   144be:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
	for(i=0;i<MAX_DEVICES;++i)
   144c2:	c0 e0       	ldi	r28, 0x00	; 0
		display_mount(i);
   144c4:	8c 2f       	mov	r24, r28
   144c6:	a0 da       	rcall	.-2752   	; 0x13a08 <display_mount>
   144c8:	cf 5f       	subi	r28, 0xFF	; 255

void display_mounts()
{
	int8_t i;
	printf("Mounted drives\n");
	for(i=0;i<MAX_DEVICES;++i)
   144ca:	cc 30       	cpi	r28, 0x0C	; 12
   144cc:	d9 f7       	brne	.-10     	; 0x144c4 <display_mounts+0x1c>
		display_mount(i);
    printf("\n");
   144ce:	8f ea       	ldi	r24, 0xAF	; 175
   144d0:	97 e1       	ldi	r25, 0x17	; 23
   144d2:	a0 e0       	ldi	r26, 0x00	; 0
   144d4:	ed b7       	in	r30, 0x3d	; 61
   144d6:	fe b7       	in	r31, 0x3e	; 62
   144d8:	81 83       	std	Z+1, r24	; 0x01
   144da:	92 83       	std	Z+2, r25	; 0x02
   144dc:	a3 83       	std	Z+3, r26	; 0x03
   144de:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
}
   144e2:	0f 90       	pop	r0
   144e4:	0f 90       	pop	r0
   144e6:	0f 90       	pop	r0
   144e8:	cf 91       	pop	r28
   144ea:	08 95       	ret

000144ec <mount>:

/// ===============================================
/// @brief mount disks - testing
/// @return Devices[] index on success, -1 on error
int8_t mount(int argc, char *argv[])
{
   144ec:	a5 e0       	ldi	r26, 0x05	; 5
   144ee:	b0 e0       	ldi	r27, 0x00	; 0
   144f0:	ec e7       	ldi	r30, 0x7C	; 124
   144f2:	f2 ea       	ldi	r31, 0xA2	; 162
   144f4:	0c 94 c5 e6 	jmp	0x1cd8a	; 0x1cd8a <__prologue_saves__+0x14>
   144f8:	eb 01       	movw	r28, r22
	{
		printf("argv[%d] = %s\n", (int) i, argv[i]);

	}
#endif
	if(argc == 1)
   144fa:	81 30       	cpi	r24, 0x01	; 1
   144fc:	91 05       	cpc	r25, r1
   144fe:	11 f4       	brne	.+4      	; 0x14504 <mount+0x18>
	{
		display_mounts();
   14500:	d3 df       	rcall	.-90     	; 0x144a8 <display_mounts>
   14502:	c2 c0       	rjmp	.+388    	; 0x14688 <mount+0x19c>
		return(1);
	}
	else if(argc == 3)
   14504:	83 30       	cpi	r24, 0x03	; 3
   14506:	91 05       	cpc	r25, r1
   14508:	61 f5       	brne	.+88     	; 0x14562 <mount+0x76>
	{
			if(MATCHI(argv[1], "PRINTER"))
   1450a:	60 e8       	ldi	r22, 0x80	; 128
   1450c:	7e e0       	ldi	r23, 0x0E	; 14
   1450e:	8a 81       	ldd	r24, Y+2	; 0x02
   14510:	9b 81       	ldd	r25, Y+3	; 0x03
   14512:	0e 94 38 32 	call	0x6470	; 0x6470 <MATCHI>
   14516:	89 2b       	or	r24, r25
   14518:	09 f4       	brne	.+2      	; 0x1451c <mount+0x30>
   1451a:	b6 c0       	rjmp	.+364    	; 0x14688 <mount+0x19c>
			{
				// FIXME - do we want to have separtate address and ppr ?
				int8_t address = atoi(argv[2]) & 0xff;
   1451c:	8c 81       	ldd	r24, Y+4	; 0x04
   1451e:	9d 81       	ldd	r25, Y+5	; 0x05
   14520:	0e 94 84 47 	call	0x8f08	; 0x8f08 <atoi>
   14524:	c8 2f       	mov	r28, r24
				index = alloc_device(PRINTER_TYPE);
   14526:	84 e0       	ldi	r24, 0x04	; 4
   14528:	90 e0       	ldi	r25, 0x00	; 0
   1452a:	0e 94 17 99 	call	0x1322e	; 0x1322e <alloc_device>
				if(index < 0)
   1452e:	87 ff       	sbrs	r24, 7
   14530:	0b c0       	rjmp	.+22     	; 0x14548 <mount+0x5c>
				{
					printf("Could not allocate PRINTER structure\n");
   14532:	87 e9       	ldi	r24, 0x97	; 151
   14534:	98 e1       	ldi	r25, 0x18	; 24
   14536:	a0 e0       	ldi	r26, 0x00	; 0
   14538:	ed b7       	in	r30, 0x3d	; 61
   1453a:	fe b7       	in	r31, 0x3e	; 62
   1453c:	81 83       	std	Z+1, r24	; 0x01
   1453e:	92 83       	std	Z+2, r25	; 0x02
   14540:	a3 83       	std	Z+3, r26	; 0x03
   14542:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   14546:	9e c0       	rjmp	.+316    	; 0x14684 <mount+0x198>
					return(0);
				}
				PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
   14548:	9b e0       	ldi	r25, 0x0B	; 11
   1454a:	89 02       	muls	r24, r25
   1454c:	f0 01       	movw	r30, r0
   1454e:	11 24       	eor	r1, r1
   14550:	ec 50       	subi	r30, 0x0C	; 12
   14552:	f1 4e       	sbci	r31, 0xE1	; 225
				PRINTERp->HEADER.ADDRESS  = address;
   14554:	a7 81       	ldd	r26, Z+7	; 0x07
   14556:	b0 85       	ldd	r27, Z+8	; 0x08
   14558:	cc 93       	st	X, r28
				Devices[index].ADDRESS = address;
   1455a:	c1 83       	std	Z+1, r28	; 0x01
				Devices[index].PPR = 0xff;
   1455c:	9f ef       	ldi	r25, 0xFF	; 255
   1455e:	92 83       	std	Z+2, r25	; 0x02
   14560:	80 c0       	rjmp	.+256    	; 0x14662 <mount+0x176>
				return( verify_device(index) );
			}
	}
	else if(argc == 4)
   14562:	04 97       	sbiw	r24, 0x04	; 4
   14564:	09 f0       	breq	.+2      	; 0x14568 <mount+0x7c>
   14566:	8d c0       	rjmp	.+282    	; 0x14682 <mount+0x196>
		/*
		argv[1] = 9121
		argv[2] = 2
		argv[3] = amigo2.lif
		*/
		if(!hpdir_find_drive(argv[1],0,0) )
   14568:	40 e0       	ldi	r20, 0x00	; 0
   1456a:	50 e0       	ldi	r21, 0x00	; 0
   1456c:	60 e0       	ldi	r22, 0x00	; 0
   1456e:	70 e0       	ldi	r23, 0x00	; 0
   14570:	8a 81       	ldd	r24, Y+2	; 0x02
   14572:	9b 81       	ldd	r25, Y+3	; 0x03
   14574:	2b d1       	rcall	.+598    	; 0x147cc <hpdir_find_drive>
   14576:	89 2b       	or	r24, r25
   14578:	59 f4       	brne	.+22     	; 0x14590 <mount+0xa4>
		{
			printf("WARNING: model NOT found in hpdir.ini!\n");
   1457a:	8f e6       	ldi	r24, 0x6F	; 111
   1457c:	98 e1       	ldi	r25, 0x18	; 24
   1457e:	a0 e0       	ldi	r26, 0x00	; 0
   14580:	ed b7       	in	r30, 0x3d	; 61
   14582:	fe b7       	in	r31, 0x3e	; 62
   14584:	81 83       	std	Z+1, r24	; 0x01
   14586:	92 83       	std	Z+2, r25	; 0x02
   14588:	a3 83       	std	Z+3, r26	; 0x03
   1458a:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   1458e:	37 c0       	rjmp	.+110    	; 0x145fe <mount+0x112>
			return(-1);
		}
		if(MATCHI(hpdir.TYPE, "SS80") || MATCHI(hpdir.TYPE,"CS80") )
   14590:	68 e8       	ldi	r22, 0x88	; 136
   14592:	7e e0       	ldi	r23, 0x0E	; 14
   14594:	88 ed       	ldi	r24, 0xD8	; 216
   14596:	9f e1       	ldi	r25, 0x1F	; 31
   14598:	0e 94 38 32 	call	0x6470	; 0x6470 <MATCHI>
   1459c:	89 2b       	or	r24, r25
   1459e:	a9 f0       	breq	.+42     	; 0x145ca <mount+0xde>
		{
			// FIXME - do we want to have separtate address and ppr ?
			int8_t address = atoi(argv[2]) & 0xff;
   145a0:	8c 81       	ldd	r24, Y+4	; 0x04
   145a2:	9d 81       	ldd	r25, Y+5	; 0x05
   145a4:	0e 94 84 47 	call	0x8f08	; 0x8f08 <atoi>
   145a8:	e8 2e       	mov	r14, r24
			int8_t ppr = address;
			index = alloc_device(SS80_TYPE);
   145aa:	83 e0       	ldi	r24, 0x03	; 3
   145ac:	90 e0       	ldi	r25, 0x00	; 0
   145ae:	0e 94 17 99 	call	0x1322e	; 0x1322e <alloc_device>
   145b2:	f8 2e       	mov	r15, r24
			if(index < 0)
   145b4:	87 ff       	sbrs	r24, 7
   145b6:	12 c0       	rjmp	.+36     	; 0x145dc <mount+0xf0>
			{
				printf("Could not allocate SS80 structure for %s\n",argv[2]);
   145b8:	8c 81       	ldd	r24, Y+4	; 0x04
   145ba:	9d 81       	ldd	r25, Y+5	; 0x05
   145bc:	ed b7       	in	r30, 0x3d	; 61
   145be:	fe b7       	in	r31, 0x3e	; 62
   145c0:	95 83       	std	Z+5, r25	; 0x05
   145c2:	84 83       	std	Z+4, r24	; 0x04
   145c4:	85 e4       	ldi	r24, 0x45	; 69
   145c6:	98 e1       	ldi	r25, 0x18	; 24
   145c8:	38 c0       	rjmp	.+112    	; 0x1463a <mount+0x14e>
		if(!hpdir_find_drive(argv[1],0,0) )
		{
			printf("WARNING: model NOT found in hpdir.ini!\n");
			return(-1);
		}
		if(MATCHI(hpdir.TYPE, "SS80") || MATCHI(hpdir.TYPE,"CS80") )
   145ca:	6d e8       	ldi	r22, 0x8D	; 141
   145cc:	7e e0       	ldi	r23, 0x0E	; 14
   145ce:	88 ed       	ldi	r24, 0xD8	; 216
   145d0:	9f e1       	ldi	r25, 0x1F	; 31
   145d2:	0e 94 38 32 	call	0x6470	; 0x6470 <MATCHI>
   145d6:	89 2b       	or	r24, r25
   145d8:	19 f7       	brne	.-58     	; 0x145a0 <mount+0xb4>
   145da:	13 c0       	rjmp	.+38     	; 0x14602 <mount+0x116>
			if(index < 0)
			{
				printf("Could not allocate SS80 structure for %s\n",argv[2]);
				return(0);
			}
			SS80p = (SS80DiskType *) Devices[index].dev;
   145dc:	ff 2d       	mov	r31, r15
   145de:	8b e0       	ldi	r24, 0x0B	; 11
   145e0:	f8 02       	muls	r31, r24
   145e2:	80 01       	movw	r16, r0
   145e4:	11 24       	eor	r1, r1
   145e6:	0c 50       	subi	r16, 0x0C	; 12
   145e8:	11 4e       	sbci	r17, 0xE1	; 225
   145ea:	f8 01       	movw	r30, r16
   145ec:	c7 80       	ldd	r12, Z+7	; 0x07
   145ee:	d0 84       	ldd	r13, Z+8	; 0x08
			if( !hpdir_set_parameters(index, argv[1] ) )
   145f0:	6a 81       	ldd	r22, Y+2	; 0x02
   145f2:	7b 81       	ldd	r23, Y+3	; 0x03
   145f4:	8f 2d       	mov	r24, r15
   145f6:	0e 94 a2 9a 	call	0x13544	; 0x13544 <hpdir_set_parameters>
   145fa:	81 11       	cpse	r24, r1
   145fc:	25 c0       	rjmp	.+74     	; 0x14648 <mount+0x15c>
				return(-1);
   145fe:	8f ef       	ldi	r24, 0xFF	; 255
   14600:	44 c0       	rjmp	.+136    	; 0x1468a <mount+0x19e>
			Devices[index].ADDRESS = address;
			Devices[index].PPR = ppr;
			return( verify_device(index) );
		}
#ifdef AMIGO
		else if(MATCHI(argv[1], "AMIGO"))
   14602:	62 e9       	ldi	r22, 0x92	; 146
   14604:	7e e0       	ldi	r23, 0x0E	; 14
   14606:	8a 81       	ldd	r24, Y+2	; 0x02
   14608:	9b 81       	ldd	r25, Y+3	; 0x03
   1460a:	0e 94 38 32 	call	0x6470	; 0x6470 <MATCHI>
   1460e:	89 2b       	or	r24, r25
   14610:	51 f1       	breq	.+84     	; 0x14666 <mount+0x17a>
		{
			// FIXME - do we want to have separtate address and ppr ?
			int8_t address = atoi(argv[2]) & 0xff;
   14612:	8c 81       	ldd	r24, Y+4	; 0x04
   14614:	9d 81       	ldd	r25, Y+5	; 0x05
   14616:	0e 94 84 47 	call	0x8f08	; 0x8f08 <atoi>
   1461a:	e8 2e       	mov	r14, r24
			int8_t ppr = address;
			index = alloc_device(AMIGO_TYPE);
   1461c:	81 e0       	ldi	r24, 0x01	; 1
   1461e:	90 e0       	ldi	r25, 0x00	; 0
   14620:	0e 94 17 99 	call	0x1322e	; 0x1322e <alloc_device>
   14624:	f8 2e       	mov	r15, r24
			if(index < 0)
   14626:	87 ff       	sbrs	r24, 7
   14628:	d9 cf       	rjmp	.-78     	; 0x145dc <mount+0xf0>
			{
				printf("Could not allocate AMIGO structure for %s\n",argv[2]);
   1462a:	8c 81       	ldd	r24, Y+4	; 0x04
   1462c:	9d 81       	ldd	r25, Y+5	; 0x05
   1462e:	ed b7       	in	r30, 0x3d	; 61
   14630:	fe b7       	in	r31, 0x3e	; 62
   14632:	95 83       	std	Z+5, r25	; 0x05
   14634:	84 83       	std	Z+4, r24	; 0x04
   14636:	8a e1       	ldi	r24, 0x1A	; 26
   14638:	98 e1       	ldi	r25, 0x18	; 24
   1463a:	a0 e0       	ldi	r26, 0x00	; 0
   1463c:	81 83       	std	Z+1, r24	; 0x01
   1463e:	92 83       	std	Z+2, r25	; 0x02
   14640:	a3 83       	std	Z+3, r26	; 0x03
   14642:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   14646:	1e c0       	rjmp	.+60     	; 0x14684 <mount+0x198>
				return(0);
			}
			AMIGOp = (AMIGODiskType *) Devices[index].dev;
			if( !hpdir_set_parameters(index, argv[1] ) )
				return(-1);
			AMIGOp->HEADER.NAME = stralloc(argv[3]);
   14648:	8e 81       	ldd	r24, Y+6	; 0x06
   1464a:	9f 81       	ldd	r25, Y+7	; 0x07
   1464c:	0e 94 da 31 	call	0x63b4	; 0x63b4 <stralloc>
   14650:	f6 01       	movw	r30, r12
   14652:	93 83       	std	Z+3, r25	; 0x03
   14654:	82 83       	std	Z+2, r24	; 0x02
			AMIGOp->HEADER.ADDRESS  = address;
   14656:	e0 82       	st	Z, r14
			AMIGOp->HEADER.PPR = ppr;
   14658:	e1 82       	std	Z+1, r14	; 0x01
			Devices[index].ADDRESS = address;
   1465a:	f8 01       	movw	r30, r16
   1465c:	e1 82       	std	Z+1, r14	; 0x01
			Devices[index].PPR = ppr;
			return( verify_device(index) );
   1465e:	e2 82       	std	Z+2, r14	; 0x02
   14660:	8f 2d       	mov	r24, r15
   14662:	4b da       	rcall	.-2922   	; 0x13afa <verify_device>
   14664:	12 c0       	rjmp	.+36     	; 0x1468a <mount+0x19e>
		}
#endif
		else
		{
			printf("Expected AMIGO or SS80 [%s]\n",argv[1]);
   14666:	8a 81       	ldd	r24, Y+2	; 0x02
   14668:	9b 81       	ldd	r25, Y+3	; 0x03
   1466a:	ed b7       	in	r30, 0x3d	; 61
   1466c:	fe b7       	in	r31, 0x3e	; 62
   1466e:	95 83       	std	Z+5, r25	; 0x05
   14670:	84 83       	std	Z+4, r24	; 0x04
   14672:	8d ef       	ldi	r24, 0xFD	; 253
   14674:	97 e1       	ldi	r25, 0x17	; 23
   14676:	a0 e0       	ldi	r26, 0x00	; 0
   14678:	81 83       	std	Z+1, r24	; 0x01
   1467a:	92 83       	std	Z+2, r25	; 0x02
   1467c:	a3 83       	std	Z+3, r26	; 0x03
   1467e:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
			return(0);
		}
	}
	else 
	{
		mount_usage();
   14682:	fa d8       	rcall	.-3596   	; 0x13878 <mount_usage>
		return(0);
   14684:	80 e0       	ldi	r24, 0x00	; 0
   14686:	01 c0       	rjmp	.+2      	; 0x1468a <mount+0x19e>
	}
	return(1);
   14688:	81 e0       	ldi	r24, 0x01	; 1
}
   1468a:	cd b7       	in	r28, 0x3d	; 61
   1468c:	de b7       	in	r29, 0x3e	; 62
   1468e:	25 96       	adiw	r28, 0x05	; 5
   14690:	e8 e0       	ldi	r30, 0x08	; 8
   14692:	0c 94 e1 e6 	jmp	0x1cdc2	; 0x1cdc2 <__epilogue_restores__+0x14>

00014696 <hpdir_init>:
/// disk parameters from a single hpdir disk entry
///
///@return void
void hpdir_init()
{
    memset(hpdir.model,0,sizeof(hpdir.model) -1); // 1
   14696:	8f e1       	ldi	r24, 0x1F	; 31
   14698:	e8 e7       	ldi	r30, 0x78	; 120
   1469a:	ff e1       	ldi	r31, 0x1F	; 31
   1469c:	df 01       	movw	r26, r30
   1469e:	98 2f       	mov	r25, r24
   146a0:	1d 92       	st	X+, r1
   146a2:	9a 95       	dec	r25
   146a4:	e9 f7       	brne	.-6      	; 0x146a0 <hpdir_init+0xa>
// 2
    memset(hpdir.comment,0,sizeof(hpdir.comment) -1);
   146a6:	9f e3       	ldi	r25, 0x3F	; 63
   146a8:	e8 e9       	ldi	r30, 0x98	; 152
   146aa:	ff e1       	ldi	r31, 0x1F	; 31
   146ac:	df 01       	movw	r26, r30
   146ae:	1d 92       	st	X+, r1
   146b0:	9a 95       	dec	r25
   146b2:	e9 f7       	brne	.-6      	; 0x146ae <hpdir_init+0x18>
    memset(hpdir.TYPE,0,sizeof(hpdir.TYPE) -1);   // 3
   146b4:	e8 ed       	ldi	r30, 0xD8	; 216
   146b6:	ff e1       	ldi	r31, 0x1F	; 31
   146b8:	df 01       	movw	r26, r30
   146ba:	1d 92       	st	X+, r1
   146bc:	8a 95       	dec	r24
   146be:	e9 f7       	brne	.-6      	; 0x146ba <hpdir_init+0x24>
    hpdir.ID = 0;                                 // 4
   146c0:	10 92 f8 1f 	sts	0x1FF8, r1	; 0x801ff8 <hpdir+0x80>
   146c4:	10 92 f9 1f 	sts	0x1FF9, r1	; 0x801ff9 <hpdir+0x81>
   146c8:	10 92 fa 1f 	sts	0x1FFA, r1	; 0x801ffa <hpdir+0x82>
   146cc:	10 92 fb 1f 	sts	0x1FFB, r1	; 0x801ffb <hpdir+0x83>
    hpdir.mask_stat2 = 0;                         // 5
   146d0:	10 92 fc 1f 	sts	0x1FFC, r1	; 0x801ffc <hpdir+0x84>
   146d4:	10 92 fd 1f 	sts	0x1FFD, r1	; 0x801ffd <hpdir+0x85>
   146d8:	10 92 fe 1f 	sts	0x1FFE, r1	; 0x801ffe <hpdir+0x86>
   146dc:	10 92 ff 1f 	sts	0x1FFF, r1	; 0x801fff <hpdir+0x87>
    hpdir.id_stat2 = 0;                           // 6
   146e0:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <hpdir+0x88>
   146e4:	10 92 01 20 	sts	0x2001, r1	; 0x802001 <hpdir+0x89>
   146e8:	10 92 02 20 	sts	0x2002, r1	; 0x802002 <hpdir+0x8a>
   146ec:	10 92 03 20 	sts	0x2003, r1	; 0x802003 <hpdir+0x8b>
    hpdir.DEVICE_NUMBER = 0;                      // 7
   146f0:	10 92 04 20 	sts	0x2004, r1	; 0x802004 <hpdir+0x8c>
   146f4:	10 92 05 20 	sts	0x2005, r1	; 0x802005 <hpdir+0x8d>
   146f8:	10 92 06 20 	sts	0x2006, r1	; 0x802006 <hpdir+0x8e>
   146fc:	10 92 07 20 	sts	0x2007, r1	; 0x802007 <hpdir+0x8f>
    hpdir.UNITS_INSTALLED = 0x8001;               // 8
   14700:	81 e0       	ldi	r24, 0x01	; 1
   14702:	90 e8       	ldi	r25, 0x80	; 128
   14704:	a0 e0       	ldi	r26, 0x00	; 0
   14706:	b0 e0       	ldi	r27, 0x00	; 0
   14708:	80 93 08 20 	sts	0x2008, r24	; 0x802008 <hpdir+0x90>
   1470c:	90 93 09 20 	sts	0x2009, r25	; 0x802009 <hpdir+0x91>
   14710:	a0 93 0a 20 	sts	0x200A, r26	; 0x80200a <hpdir+0x92>
   14714:	b0 93 0b 20 	sts	0x200B, r27	; 0x80200b <hpdir+0x93>
    hpdir.CYLINDERS = 0;                          // 9
   14718:	10 92 0c 20 	sts	0x200C, r1	; 0x80200c <hpdir+0x94>
   1471c:	10 92 0d 20 	sts	0x200D, r1	; 0x80200d <hpdir+0x95>
   14720:	10 92 0e 20 	sts	0x200E, r1	; 0x80200e <hpdir+0x96>
   14724:	10 92 0f 20 	sts	0x200F, r1	; 0x80200f <hpdir+0x97>
    hpdir.HEADS= 0;                               // 10
   14728:	10 92 10 20 	sts	0x2010, r1	; 0x802010 <hpdir+0x98>
   1472c:	10 92 11 20 	sts	0x2011, r1	; 0x802011 <hpdir+0x99>
   14730:	10 92 12 20 	sts	0x2012, r1	; 0x802012 <hpdir+0x9a>
   14734:	10 92 13 20 	sts	0x2013, r1	; 0x802013 <hpdir+0x9b>
    hpdir.SECTORS= 0;                             // 11
   14738:	10 92 14 20 	sts	0x2014, r1	; 0x802014 <hpdir+0x9c>
   1473c:	10 92 15 20 	sts	0x2015, r1	; 0x802015 <hpdir+0x9d>
   14740:	10 92 16 20 	sts	0x2016, r1	; 0x802016 <hpdir+0x9e>
   14744:	10 92 17 20 	sts	0x2017, r1	; 0x802017 <hpdir+0x9f>
    hpdir.BYTES_PER_SECTOR = 0;                   // 12
   14748:	10 92 18 20 	sts	0x2018, r1	; 0x802018 <hpdir+0xa0>
   1474c:	10 92 19 20 	sts	0x2019, r1	; 0x802019 <hpdir+0xa1>
   14750:	10 92 1a 20 	sts	0x201A, r1	; 0x80201a <hpdir+0xa2>
   14754:	10 92 1b 20 	sts	0x201B, r1	; 0x80201b <hpdir+0xa3>
    hpdir.INTERLEAVE = 0;                         // 13
   14758:	10 92 1c 20 	sts	0x201C, r1	; 0x80201c <hpdir+0xa4>
   1475c:	10 92 1d 20 	sts	0x201D, r1	; 0x80201d <hpdir+0xa5>
   14760:	10 92 1e 20 	sts	0x201E, r1	; 0x80201e <hpdir+0xa6>
   14764:	10 92 1f 20 	sts	0x201F, r1	; 0x80201f <hpdir+0xa7>
    hpdir.FIXED = 1;                              // 14 ALWAYS 1
   14768:	81 e0       	ldi	r24, 0x01	; 1
   1476a:	90 e0       	ldi	r25, 0x00	; 0
   1476c:	a0 e0       	ldi	r26, 0x00	; 0
   1476e:	b0 e0       	ldi	r27, 0x00	; 0
   14770:	80 93 20 20 	sts	0x2020, r24	; 0x802020 <hpdir+0xa8>
   14774:	90 93 21 20 	sts	0x2021, r25	; 0x802021 <hpdir+0xa9>
   14778:	a0 93 22 20 	sts	0x2022, r26	; 0x802022 <hpdir+0xaa>
   1477c:	b0 93 23 20 	sts	0x2023, r27	; 0x802023 <hpdir+0xab>

// Computed values
    hpdir.BLOCKS = 0;
   14780:	10 92 24 20 	sts	0x2024, r1	; 0x802024 <hpdir+0xac>
   14784:	10 92 25 20 	sts	0x2025, r1	; 0x802025 <hpdir+0xad>
   14788:	10 92 26 20 	sts	0x2026, r1	; 0x802026 <hpdir+0xae>
   1478c:	10 92 27 20 	sts	0x2027, r1	; 0x802027 <hpdir+0xaf>
   14790:	08 95       	ret

00014792 <lif_dir_count>:
///@param[in] blocks: size of LIF image in total
///
///@return Size of LIF directory in blocks
long lif_dir_count(long blocks)
{
    int scale = 0;
   14792:	20 e0       	ldi	r18, 0x00	; 0
   14794:	30 e0       	ldi	r19, 0x00	; 0
    long num = 1;
    while(blocks)
   14796:	61 15       	cp	r22, r1
   14798:	71 05       	cpc	r23, r1
   1479a:	81 05       	cpc	r24, r1
   1479c:	91 05       	cpc	r25, r1
   1479e:	39 f0       	breq	.+14     	; 0x147ae <lif_dir_count+0x1c>
    {
        scale++;
   147a0:	2f 5f       	subi	r18, 0xFF	; 255
   147a2:	3f 4f       	sbci	r19, 0xFF	; 255
        blocks >>= 1;
   147a4:	95 95       	asr	r25
   147a6:	87 95       	ror	r24
   147a8:	77 95       	ror	r23
   147aa:	67 95       	ror	r22
   147ac:	f4 cf       	rjmp	.-24     	; 0x14796 <lif_dir_count+0x4>
    }
    scale>>=1;
   147ae:	35 95       	asr	r19
   147b0:	27 95       	ror	r18
///
///@return Size of LIF directory in blocks
long lif_dir_count(long blocks)
{
    int scale = 0;
    long num = 1;
   147b2:	61 e0       	ldi	r22, 0x01	; 1
   147b4:	70 e0       	ldi	r23, 0x00	; 0
   147b6:	80 e0       	ldi	r24, 0x00	; 0
   147b8:	90 e0       	ldi	r25, 0x00	; 0
    {
        scale++;
        blocks >>= 1;
    }
    scale>>=1;
    while(scale--)
   147ba:	21 50       	subi	r18, 0x01	; 1
   147bc:	31 09       	sbc	r19, r1
   147be:	28 f0       	brcs	.+10     	; 0x147ca <lif_dir_count+0x38>
        num <<=1;
   147c0:	66 0f       	add	r22, r22
   147c2:	77 1f       	adc	r23, r23
   147c4:	88 1f       	adc	r24, r24
   147c6:	99 1f       	adc	r25, r25
   147c8:	f8 cf       	rjmp	.-16     	; 0x147ba <lif_dir_count+0x28>
    return(num);
}
   147ca:	08 95       	ret

000147cc <hpdir_find_drive>:
///
///@param[in] model: model string
///
///@return 1 on sucess or 0 on fail
int hpdir_find_drive(char *model, int list, int verbose)
{
   147cc:	2f 92       	push	r2
   147ce:	3f 92       	push	r3
   147d0:	4f 92       	push	r4
   147d2:	5f 92       	push	r5
   147d4:	6f 92       	push	r6
   147d6:	8f 92       	push	r8
   147d8:	9f 92       	push	r9
   147da:	af 92       	push	r10
   147dc:	bf 92       	push	r11
   147de:	cf 92       	push	r12
   147e0:	df 92       	push	r13
   147e2:	ef 92       	push	r14
   147e4:	ff 92       	push	r15
   147e6:	0f 93       	push	r16
   147e8:	1f 93       	push	r17
   147ea:	cf 93       	push	r28
   147ec:	df 93       	push	r29
   147ee:	cd b7       	in	r28, 0x3d	; 61
   147f0:	de b7       	in	r29, 0x3e	; 62
   147f2:	c9 58       	subi	r28, 0x89	; 137
   147f4:	d1 40       	sbci	r29, 0x01	; 1
   147f6:	0f b6       	in	r0, 0x3f	; 63
   147f8:	f8 94       	cli
   147fa:	de bf       	out	0x3e, r29	; 62
   147fc:	0f be       	out	0x3f, r0	; 63
   147fe:	cd bf       	out	0x3d, r28	; 61
   14800:	6c 01       	movw	r12, r24
   14802:	c8 57       	subi	r28, 0x78	; 120
   14804:	de 4f       	sbci	r29, 0xFE	; 254
   14806:	79 83       	std	Y+1, r23	; 0x01
   14808:	68 83       	st	Y, r22
   1480a:	c8 58       	subi	r28, 0x88	; 136
   1480c:	d1 40       	sbci	r29, 0x01	; 1
   1480e:	5a 01       	movw	r10, r20
    FILE *cfg;
    char *ptr;
    char str[256];
    char token[128];

    hpdir_init();
   14810:	42 df       	rcall	.-380    	; 0x14696 <hpdir_init>

    cfg = fopen("hpdir.ini","rb");
   14812:	6e ef       	ldi	r22, 0xFE	; 254
   14814:	78 e0       	ldi	r23, 0x08	; 8
   14816:	87 e5       	ldi	r24, 0x57	; 87
   14818:	90 e1       	ldi	r25, 0x10	; 16
   1481a:	0e 94 2a 7e 	call	0xfc54	; 0xfc54 <fopen>
   1481e:	7c 01       	movw	r14, r24

#ifndef LIF_STAND_ALONE
    if(cfg == NULL)
   14820:	89 2b       	or	r24, r25
   14822:	49 f4       	brne	.+18     	; 0x14836 <hpdir_find_drive+0x6a>
        cfg = fopen("/hpdir.ini","rb");
   14824:	6e ef       	ldi	r22, 0xFE	; 254
   14826:	78 e0       	ldi	r23, 0x08	; 8
   14828:	86 e5       	ldi	r24, 0x56	; 86
   1482a:	90 e1       	ldi	r25, 0x10	; 16
   1482c:	0e 94 2a 7e 	call	0xfc54	; 0xfc54 <fopen>
   14830:	7c 01       	movw	r14, r24
        strcat  (name, "/hpdir.ini");
        cfg = fopen(name, "rb");
    }
#endif

    if(cfg == NULL)
   14832:	89 2b       	or	r24, r25
   14834:	51 f0       	breq	.+20     	; 0x1484a <hpdir_find_drive+0x7e>
// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);

        if(MATCHI(token,"[driveinfo]"))
        {
            driveinfo = 1;
   14836:	21 2c       	mov	r2, r1
   14838:	31 2c       	mov	r3, r1

        if(*ptr == '[' && driveinfo == 1 )
            break;

// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);
   1483a:	8e 01       	movw	r16, r28
   1483c:	08 5f       	subi	r16, 0xF8	; 248
   1483e:	1e 4f       	sbci	r17, 0xFE	; 254
        if( driveinfo != 1)
            continue;

        if(list)
        {
            printf("%s %s\n", token, ptr);
   14840:	80 e1       	ldi	r24, 0x10	; 16
   14842:	91 e2       	ldi	r25, 0x21	; 33
   14844:	2c 01       	movw	r4, r24
   14846:	61 2c       	mov	r6, r1
   14848:	1e c0       	rjmp	.+60     	; 0x14886 <hpdir_find_drive+0xba>
    }
#endif

    if(cfg == NULL)
    {
        if(verbose)
   1484a:	ab 28       	or	r10, r11
   1484c:	09 f4       	brne	.+2      	; 0x14850 <hpdir_find_drive+0x84>
   1484e:	79 c1       	rjmp	.+754    	; 0x14b42 <hpdir_find_drive+0x376>
            printf("Error: hpdir.ini not found!\n");
   14850:	87 e1       	ldi	r24, 0x17	; 23
   14852:	91 e2       	ldi	r25, 0x21	; 33
   14854:	a0 e0       	ldi	r26, 0x00	; 0
   14856:	ed b7       	in	r30, 0x3d	; 61
   14858:	fe b7       	in	r31, 0x3e	; 62
   1485a:	81 83       	std	Z+1, r24	; 0x01
   1485c:	92 83       	std	Z+2, r25	; 0x02
   1485e:	a3 83       	std	Z+3, r26	; 0x03
   14860:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   14864:	6e c1       	rjmp	.+732    	; 0x14b42 <hpdir_find_drive+0x376>
    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
        errors = 0;
        ptr = str;

        trim_tail(ptr);
   14866:	ce 01       	movw	r24, r28
   14868:	08 96       	adiw	r24, 0x08	; 8
   1486a:	0e 94 0a 32 	call	0x6414	; 0x6414 <trim_tail>
        ptr = skipspaces(ptr);
   1486e:	ce 01       	movw	r24, r28
   14870:	08 96       	adiw	r24, 0x08	; 8
   14872:	0e 94 1a 32 	call	0x6434	; 0x6434 <skipspaces>

        len = strlen(ptr);
   14876:	fc 01       	movw	r30, r24
   14878:	01 90       	ld	r0, Z+
   1487a:	00 20       	and	r0, r0
   1487c:	e9 f7       	brne	.-6      	; 0x14878 <hpdir_find_drive+0xac>
   1487e:	31 97       	sbiw	r30, 0x01	; 1
        if(!len)
   14880:	8e 17       	cp	r24, r30
   14882:	9f 07       	cpc	r25, r31
   14884:	51 f4       	brne	.+20     	; 0x1489a <hpdir_find_drive+0xce>
        return(0);
    }

// printf("Searching /hpdir.ini for model:%s\n", model);

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   14886:	a7 01       	movw	r20, r14
   14888:	6e ef       	ldi	r22, 0xFE	; 254
   1488a:	70 e0       	ldi	r23, 0x00	; 0
   1488c:	ce 01       	movw	r24, r28
   1488e:	08 96       	adiw	r24, 0x08	; 8
   14890:	0e 94 42 76 	call	0xec84	; 0xec84 <fgets>
   14894:	89 2b       	or	r24, r25
   14896:	39 f7       	brne	.-50     	; 0x14866 <hpdir_find_drive+0x9a>
   14898:	0c c0       	rjmp	.+24     	; 0x148b2 <hpdir_find_drive+0xe6>
        len = strlen(ptr);
        if(!len)
            continue;

// Skip comments
        if(*ptr == ';' || *ptr == '#' )
   1489a:	fc 01       	movw	r30, r24
   1489c:	20 81       	ld	r18, Z
   1489e:	2b 33       	cpi	r18, 0x3B	; 59
   148a0:	91 f3       	breq	.-28     	; 0x14886 <hpdir_find_drive+0xba>
   148a2:	23 32       	cpi	r18, 0x23	; 35
   148a4:	81 f3       	breq	.-32     	; 0x14886 <hpdir_find_drive+0xba>
            continue;

        if(*ptr == '[' && driveinfo == 1 )
   148a6:	2b 35       	cpi	r18, 0x5B	; 91
   148a8:	39 f4       	brne	.+14     	; 0x148b8 <hpdir_find_drive+0xec>
   148aa:	f1 e0       	ldi	r31, 0x01	; 1
   148ac:	2f 16       	cp	r2, r31
   148ae:	31 04       	cpc	r3, r1
   148b0:	19 f4       	brne	.+6      	; 0x148b8 <hpdir_find_drive+0xec>
int hpdir_find_drive(char *model, int list, int verbose)
{
    int len;
    int errors = 0;
    int driveinfo=0;
    int found = 0;
   148b2:	00 e0       	ldi	r16, 0x00	; 0
   148b4:	10 e0       	ldi	r17, 0x00	; 0
   148b6:	32 c1       	rjmp	.+612    	; 0x14b1c <hpdir_find_drive+0x350>

        if(*ptr == '[' && driveinfo == 1 )
            break;

// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);
   148b8:	4e e7       	ldi	r20, 0x7E	; 126
   148ba:	50 e0       	ldi	r21, 0x00	; 0
   148bc:	b8 01       	movw	r22, r16
   148be:	0e 94 ec 32 	call	0x65d8	; 0x65d8 <get_token>
   148c2:	4c 01       	movw	r8, r24

        if(MATCHI(token,"[driveinfo]"))
   148c4:	61 e6       	ldi	r22, 0x61	; 97
   148c6:	70 e1       	ldi	r23, 0x10	; 16
   148c8:	c8 01       	movw	r24, r16
   148ca:	0e 94 38 32 	call	0x6470	; 0x6470 <MATCHI>
   148ce:	89 2b       	or	r24, r25
   148d0:	21 f0       	breq	.+8      	; 0x148da <hpdir_find_drive+0x10e>
        {
            driveinfo = 1;
   148d2:	22 24       	eor	r2, r2
   148d4:	23 94       	inc	r2
   148d6:	31 2c       	mov	r3, r1
   148d8:	d6 cf       	rjmp	.-84     	; 0x14886 <hpdir_find_drive+0xba>
            continue;
        }

        if( driveinfo != 1)
   148da:	21 e0       	ldi	r18, 0x01	; 1
   148dc:	22 16       	cp	r2, r18
   148de:	31 04       	cpc	r3, r1
   148e0:	91 f6       	brne	.-92     	; 0x14886 <hpdir_find_drive+0xba>
            continue;

        if(list)
   148e2:	c8 57       	subi	r28, 0x78	; 120
   148e4:	de 4f       	sbci	r29, 0xFE	; 254
   148e6:	88 81       	ld	r24, Y
   148e8:	99 81       	ldd	r25, Y+1	; 0x01
   148ea:	c8 58       	subi	r28, 0x88	; 136
   148ec:	d1 40       	sbci	r29, 0x01	; 1
   148ee:	89 2b       	or	r24, r25
   148f0:	61 f0       	breq	.+24     	; 0x1490a <hpdir_find_drive+0x13e>
        {
            printf("%s %s\n", token, ptr);
   148f2:	ed b7       	in	r30, 0x3d	; 61
   148f4:	fe b7       	in	r31, 0x3e	; 62
   148f6:	97 82       	std	Z+7, r9	; 0x07
   148f8:	86 82       	std	Z+6, r8	; 0x06
   148fa:	15 83       	std	Z+5, r17	; 0x05
   148fc:	04 83       	std	Z+4, r16	; 0x04
   148fe:	41 82       	std	Z+1, r4	; 0x01
   14900:	52 82       	std	Z+2, r5	; 0x02
   14902:	63 82       	std	Z+3, r6	; 0x03
   14904:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
            continue;
   14908:	be cf       	rjmp	.-132    	; 0x14886 <hpdir_find_drive+0xba>
        }

        if ( ! MATCHI(model,token) )
   1490a:	b8 01       	movw	r22, r16
   1490c:	c6 01       	movw	r24, r12
   1490e:	0e 94 38 32 	call	0x6470	; 0x6470 <MATCHI>
   14912:	89 2b       	or	r24, r25
            continue;

        hpdir_init();
   14914:	f1 f2       	breq	.-68     	; 0x148d2 <hpdir_find_drive+0x106>
   14916:	bf de       	rcall	.-642    	; 0x14696 <hpdir_init>

        if(verbose)
   14918:	a1 14       	cp	r10, r1
   1491a:	b1 04       	cpc	r11, r1
   1491c:	61 f0       	breq	.+24     	; 0x14936 <hpdir_find_drive+0x16a>
            printf("Model: %s found in hpdir.ini\n", model);
   1491e:	ed b7       	in	r30, 0x3d	; 61
   14920:	fe b7       	in	r31, 0x3e	; 62
   14922:	d5 82       	std	Z+5, r13	; 0x05
   14924:	c4 82       	std	Z+4, r12	; 0x04
   14926:	82 ef       	ldi	r24, 0xF2	; 242
   14928:	90 e2       	ldi	r25, 0x20	; 32
   1492a:	a0 e0       	ldi	r26, 0x00	; 0
   1492c:	81 83       	std	Z+1, r24	; 0x01
   1492e:	92 83       	std	Z+2, r25	; 0x02
   14930:	a3 83       	std	Z+3, r26	; 0x03
   14932:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>

// 1 Model
        strncpy(hpdir.model,token,sizeof(hpdir.model)-2);
   14936:	4e e1       	ldi	r20, 0x1E	; 30
   14938:	50 e0       	ldi	r21, 0x00	; 0
   1493a:	b8 01       	movw	r22, r16
   1493c:	88 e7       	ldi	r24, 0x78	; 120
   1493e:	9f e1       	ldi	r25, 0x1F	; 31
   14940:	0e 94 37 31 	call	0x626e	; 0x626e <strncpy>

// =
        ptr = get_token(ptr, token,     sizeof(token)-2);
   14944:	4e e7       	ldi	r20, 0x7E	; 126
   14946:	50 e0       	ldi	r21, 0x00	; 0
   14948:	b8 01       	movw	r22, r16
   1494a:	c4 01       	movw	r24, r8
   1494c:	0e 94 ec 32 	call	0x65d8	; 0x65d8 <get_token>

// 2 Comment
        ptr = get_token(ptr, hpdir.comment, sizeof(hpdir.comment)-2);
   14950:	4e e3       	ldi	r20, 0x3E	; 62
   14952:	50 e0       	ldi	r21, 0x00	; 0
   14954:	68 e9       	ldi	r22, 0x98	; 152
   14956:	7f e1       	ldi	r23, 0x1F	; 31
   14958:	0e 94 ec 32 	call	0x65d8	; 0x65d8 <get_token>

// 3 AMIGO/SS80/CS80
        ptr = get_token(ptr, hpdir.TYPE,  sizeof(hpdir.TYPE)-2);
   1495c:	4e e1       	ldi	r20, 0x1E	; 30
   1495e:	50 e0       	ldi	r21, 0x00	; 0
   14960:	68 ed       	ldi	r22, 0xD8	; 216
   14962:	7f e1       	ldi	r23, 0x1F	; 31
   14964:	0e 94 ec 32 	call	0x65d8	; 0x65d8 <get_token>

// 4 Identify ID
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14968:	4e e7       	ldi	r20, 0x7E	; 126
   1496a:	50 e0       	ldi	r21, 0x00	; 0
   1496c:	b8 01       	movw	r22, r16
   1496e:	0e 94 ec 32 	call	0x65d8	; 0x65d8 <get_token>
   14972:	4c 01       	movw	r8, r24
        hpdir.ID = get_value(token);
   14974:	c8 01       	movw	r24, r16
   14976:	0e 94 2f 33 	call	0x665e	; 0x665e <get_value>
   1497a:	60 93 f8 1f 	sts	0x1FF8, r22	; 0x801ff8 <hpdir+0x80>
   1497e:	70 93 f9 1f 	sts	0x1FF9, r23	; 0x801ff9 <hpdir+0x81>
   14982:	80 93 fa 1f 	sts	0x1FFA, r24	; 0x801ffa <hpdir+0x82>
   14986:	90 93 fb 1f 	sts	0x1FFB, r25	; 0x801ffb <hpdir+0x83>

// 5 MASK STAT 2
        ptr = get_token(ptr, token,         sizeof(token)-2);
   1498a:	4e e7       	ldi	r20, 0x7E	; 126
   1498c:	50 e0       	ldi	r21, 0x00	; 0
   1498e:	b8 01       	movw	r22, r16
   14990:	c4 01       	movw	r24, r8
   14992:	0e 94 ec 32 	call	0x65d8	; 0x65d8 <get_token>
   14996:	4c 01       	movw	r8, r24
        hpdir.mask_stat2 = get_value(token);
   14998:	c8 01       	movw	r24, r16
   1499a:	0e 94 2f 33 	call	0x665e	; 0x665e <get_value>
   1499e:	60 93 fc 1f 	sts	0x1FFC, r22	; 0x801ffc <hpdir+0x84>
   149a2:	70 93 fd 1f 	sts	0x1FFD, r23	; 0x801ffd <hpdir+0x85>
   149a6:	80 93 fe 1f 	sts	0x1FFE, r24	; 0x801ffe <hpdir+0x86>
   149aa:	90 93 ff 1f 	sts	0x1FFF, r25	; 0x801fff <hpdir+0x87>

// 6 STAT2
        ptr = get_token(ptr, token,         sizeof(token)-2);
   149ae:	4e e7       	ldi	r20, 0x7E	; 126
   149b0:	50 e0       	ldi	r21, 0x00	; 0
   149b2:	b8 01       	movw	r22, r16
   149b4:	c4 01       	movw	r24, r8
   149b6:	0e 94 ec 32 	call	0x65d8	; 0x65d8 <get_token>
   149ba:	4c 01       	movw	r8, r24
        hpdir.id_stat2 = get_value(token);
   149bc:	c8 01       	movw	r24, r16
   149be:	0e 94 2f 33 	call	0x665e	; 0x665e <get_value>
   149c2:	60 93 00 20 	sts	0x2000, r22	; 0x802000 <hpdir+0x88>
   149c6:	70 93 01 20 	sts	0x2001, r23	; 0x802001 <hpdir+0x89>
   149ca:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <hpdir+0x8a>
   149ce:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <hpdir+0x8b>

// 7 BCD include model number
        ptr = get_token(ptr, token,         sizeof(token)-2);
   149d2:	4e e7       	ldi	r20, 0x7E	; 126
   149d4:	50 e0       	ldi	r21, 0x00	; 0
   149d6:	b8 01       	movw	r22, r16
   149d8:	c4 01       	movw	r24, r8
   149da:	0e 94 ec 32 	call	0x65d8	; 0x65d8 <get_token>
   149de:	4c 01       	movw	r8, r24
        hpdir.DEVICE_NUMBER = get_value(token);
   149e0:	c8 01       	movw	r24, r16
   149e2:	0e 94 2f 33 	call	0x665e	; 0x665e <get_value>
   149e6:	60 93 04 20 	sts	0x2004, r22	; 0x802004 <hpdir+0x8c>
   149ea:	70 93 05 20 	sts	0x2005, r23	; 0x802005 <hpdir+0x8d>
   149ee:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <hpdir+0x8e>
   149f2:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <hpdir+0x8f>

// 8 Units installed
        ptr = get_token(ptr, token,         sizeof(token)-2);
   149f6:	4e e7       	ldi	r20, 0x7E	; 126
   149f8:	50 e0       	ldi	r21, 0x00	; 0
   149fa:	b8 01       	movw	r22, r16
   149fc:	c4 01       	movw	r24, r8
   149fe:	0e 94 ec 32 	call	0x65d8	; 0x65d8 <get_token>
   14a02:	4c 01       	movw	r8, r24
        hpdir.UNITS_INSTALLED = get_value(token);
   14a04:	c8 01       	movw	r24, r16
   14a06:	0e 94 2f 33 	call	0x665e	; 0x665e <get_value>
   14a0a:	60 93 08 20 	sts	0x2008, r22	; 0x802008 <hpdir+0x90>
   14a0e:	70 93 09 20 	sts	0x2009, r23	; 0x802009 <hpdir+0x91>
   14a12:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <hpdir+0x92>
   14a16:	90 93 0b 20 	sts	0x200B, r25	; 0x80200b <hpdir+0x93>

// 9 Cylinders
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14a1a:	4e e7       	ldi	r20, 0x7E	; 126
   14a1c:	50 e0       	ldi	r21, 0x00	; 0
   14a1e:	b8 01       	movw	r22, r16
   14a20:	c4 01       	movw	r24, r8
   14a22:	0e 94 ec 32 	call	0x65d8	; 0x65d8 <get_token>
   14a26:	4c 01       	movw	r8, r24
        hpdir.CYLINDERS = get_value(token);
   14a28:	c8 01       	movw	r24, r16
   14a2a:	0e 94 2f 33 	call	0x665e	; 0x665e <get_value>
   14a2e:	60 93 0c 20 	sts	0x200C, r22	; 0x80200c <hpdir+0x94>
   14a32:	70 93 0d 20 	sts	0x200D, r23	; 0x80200d <hpdir+0x95>
   14a36:	80 93 0e 20 	sts	0x200E, r24	; 0x80200e <hpdir+0x96>
   14a3a:	90 93 0f 20 	sts	0x200F, r25	; 0x80200f <hpdir+0x97>

// 10 Heads
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14a3e:	4e e7       	ldi	r20, 0x7E	; 126
   14a40:	50 e0       	ldi	r21, 0x00	; 0
   14a42:	b8 01       	movw	r22, r16
   14a44:	c4 01       	movw	r24, r8
   14a46:	0e 94 ec 32 	call	0x65d8	; 0x65d8 <get_token>
   14a4a:	4c 01       	movw	r8, r24
        hpdir.HEADS = get_value(token);
   14a4c:	c8 01       	movw	r24, r16
   14a4e:	0e 94 2f 33 	call	0x665e	; 0x665e <get_value>
   14a52:	60 93 10 20 	sts	0x2010, r22	; 0x802010 <hpdir+0x98>
   14a56:	70 93 11 20 	sts	0x2011, r23	; 0x802011 <hpdir+0x99>
   14a5a:	80 93 12 20 	sts	0x2012, r24	; 0x802012 <hpdir+0x9a>
   14a5e:	90 93 13 20 	sts	0x2013, r25	; 0x802013 <hpdir+0x9b>

// 11 Sectors
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14a62:	4e e7       	ldi	r20, 0x7E	; 126
   14a64:	50 e0       	ldi	r21, 0x00	; 0
   14a66:	b8 01       	movw	r22, r16
   14a68:	c4 01       	movw	r24, r8
   14a6a:	0e 94 ec 32 	call	0x65d8	; 0x65d8 <get_token>
   14a6e:	4c 01       	movw	r8, r24
        hpdir.SECTORS = get_value(token);
   14a70:	c8 01       	movw	r24, r16
   14a72:	0e 94 2f 33 	call	0x665e	; 0x665e <get_value>
   14a76:	60 93 14 20 	sts	0x2014, r22	; 0x802014 <hpdir+0x9c>
   14a7a:	70 93 15 20 	sts	0x2015, r23	; 0x802015 <hpdir+0x9d>
   14a7e:	80 93 16 20 	sts	0x2016, r24	; 0x802016 <hpdir+0x9e>
   14a82:	90 93 17 20 	sts	0x2017, r25	; 0x802017 <hpdir+0x9f>

// 12 Bytes Per Block/Sector
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14a86:	4e e7       	ldi	r20, 0x7E	; 126
   14a88:	50 e0       	ldi	r21, 0x00	; 0
   14a8a:	b8 01       	movw	r22, r16
   14a8c:	c4 01       	movw	r24, r8
   14a8e:	0e 94 ec 32 	call	0x65d8	; 0x65d8 <get_token>
   14a92:	4c 01       	movw	r8, r24
        hpdir.BYTES_PER_SECTOR = get_value(token);
   14a94:	c8 01       	movw	r24, r16
   14a96:	0e 94 2f 33 	call	0x665e	; 0x665e <get_value>
   14a9a:	60 93 18 20 	sts	0x2018, r22	; 0x802018 <hpdir+0xa0>
   14a9e:	70 93 19 20 	sts	0x2019, r23	; 0x802019 <hpdir+0xa1>
   14aa2:	80 93 1a 20 	sts	0x201A, r24	; 0x80201a <hpdir+0xa2>
   14aa6:	90 93 1b 20 	sts	0x201B, r25	; 0x80201b <hpdir+0xa3>

// 13 Interleave
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14aaa:	4e e7       	ldi	r20, 0x7E	; 126
   14aac:	50 e0       	ldi	r21, 0x00	; 0
   14aae:	b8 01       	movw	r22, r16
   14ab0:	c4 01       	movw	r24, r8
   14ab2:	0e 94 ec 32 	call	0x65d8	; 0x65d8 <get_token>
        hpdir.INTERLEAVE = get_value(token);
   14ab6:	c8 01       	movw	r24, r16
   14ab8:	0e 94 2f 33 	call	0x665e	; 0x665e <get_value>
   14abc:	60 93 1c 20 	sts	0x201C, r22	; 0x80201c <hpdir+0xa4>
   14ac0:	70 93 1d 20 	sts	0x201D, r23	; 0x80201d <hpdir+0xa5>
   14ac4:	80 93 1e 20 	sts	0x201E, r24	; 0x80201e <hpdir+0xa6>
   14ac8:	90 93 1f 20 	sts	0x201F, r25	; 0x80201f <hpdir+0xa7>

// Computed values
        hpdir.BLOCKS = ( hpdir.CYLINDERS * hpdir.HEADS * hpdir.SECTORS );
   14acc:	20 91 0c 20 	lds	r18, 0x200C	; 0x80200c <hpdir+0x94>
   14ad0:	30 91 0d 20 	lds	r19, 0x200D	; 0x80200d <hpdir+0x95>
   14ad4:	40 91 0e 20 	lds	r20, 0x200E	; 0x80200e <hpdir+0x96>
   14ad8:	50 91 0f 20 	lds	r21, 0x200F	; 0x80200f <hpdir+0x97>
   14adc:	60 91 10 20 	lds	r22, 0x2010	; 0x802010 <hpdir+0x98>
   14ae0:	70 91 11 20 	lds	r23, 0x2011	; 0x802011 <hpdir+0x99>
   14ae4:	80 91 12 20 	lds	r24, 0x2012	; 0x802012 <hpdir+0x9a>
   14ae8:	90 91 13 20 	lds	r25, 0x2013	; 0x802013 <hpdir+0x9b>
   14aec:	0e 94 0c e6 	call	0x1cc18	; 0x1cc18 <__mulsi3>
   14af0:	9b 01       	movw	r18, r22
   14af2:	ac 01       	movw	r20, r24
   14af4:	60 91 14 20 	lds	r22, 0x2014	; 0x802014 <hpdir+0x9c>
   14af8:	70 91 15 20 	lds	r23, 0x2015	; 0x802015 <hpdir+0x9d>
   14afc:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <hpdir+0x9e>
   14b00:	90 91 17 20 	lds	r25, 0x2017	; 0x802017 <hpdir+0x9f>
   14b04:	0e 94 0c e6 	call	0x1cc18	; 0x1cc18 <__mulsi3>
   14b08:	60 93 24 20 	sts	0x2024, r22	; 0x802024 <hpdir+0xac>
   14b0c:	70 93 25 20 	sts	0x2025, r23	; 0x802025 <hpdir+0xad>
   14b10:	80 93 26 20 	sts	0x2026, r24	; 0x802026 <hpdir+0xae>
   14b14:	90 93 27 20 	sts	0x2027, r25	; 0x802027 <hpdir+0xaf>
        {
            if(verbose)
                printf("Error /hpdir.ini parsing\n");
            break;
        }
        found = 1;
   14b18:	01 e0       	ldi	r16, 0x01	; 1
   14b1a:	10 e0       	ldi	r17, 0x00	; 0
        break;

    }                                             // while
    fclose(cfg);
   14b1c:	c7 01       	movw	r24, r14
   14b1e:	0e 94 d4 7c 	call	0xf9a8	; 0xf9a8 <fclose>
	if(verbose && !found)
   14b22:	ab 28       	or	r10, r11
   14b24:	81 f0       	breq	.+32     	; 0x14b46 <hpdir_find_drive+0x37a>
   14b26:	01 2b       	or	r16, r17
   14b28:	81 f4       	brne	.+32     	; 0x14b4a <hpdir_find_drive+0x37e>
		printf("Model: %s NOT found in hpdir.ini\n", model);
   14b2a:	ed b7       	in	r30, 0x3d	; 61
   14b2c:	fe b7       	in	r31, 0x3e	; 62
   14b2e:	d5 82       	std	Z+5, r13	; 0x05
   14b30:	c4 82       	std	Z+4, r12	; 0x04
   14b32:	80 ed       	ldi	r24, 0xD0	; 208
   14b34:	90 e2       	ldi	r25, 0x20	; 32
   14b36:	a0 e0       	ldi	r26, 0x00	; 0
   14b38:	81 83       	std	Z+1, r24	; 0x01
   14b3a:	92 83       	std	Z+2, r25	; 0x02
   14b3c:	a3 83       	std	Z+3, r26	; 0x03
   14b3e:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>

    if(cfg == NULL)
    {
        if(verbose)
            printf("Error: hpdir.ini not found!\n");
        return(0);
   14b42:	80 e0       	ldi	r24, 0x00	; 0
   14b44:	03 c0       	rjmp	.+6      	; 0x14b4c <hpdir_find_drive+0x380>
   14b46:	c8 01       	movw	r24, r16
   14b48:	02 c0       	rjmp	.+4      	; 0x14b4e <hpdir_find_drive+0x382>
   14b4a:	81 e0       	ldi	r24, 0x01	; 1
   14b4c:	90 e0       	ldi	r25, 0x00	; 0
    }                                             // while
    fclose(cfg);
	if(verbose && !found)
		printf("Model: %s NOT found in hpdir.ini\n", model);
    return(found);
}
   14b4e:	c7 57       	subi	r28, 0x77	; 119
   14b50:	de 4f       	sbci	r29, 0xFE	; 254
   14b52:	0f b6       	in	r0, 0x3f	; 63
   14b54:	f8 94       	cli
   14b56:	de bf       	out	0x3e, r29	; 62
   14b58:	0f be       	out	0x3f, r0	; 63
   14b5a:	cd bf       	out	0x3d, r28	; 61
   14b5c:	df 91       	pop	r29
   14b5e:	cf 91       	pop	r28
   14b60:	1f 91       	pop	r17
   14b62:	0f 91       	pop	r16
   14b64:	ff 90       	pop	r15
   14b66:	ef 90       	pop	r14
   14b68:	df 90       	pop	r13
   14b6a:	cf 90       	pop	r12
   14b6c:	bf 90       	pop	r11
   14b6e:	af 90       	pop	r10
   14b70:	9f 90       	pop	r9
   14b72:	8f 90       	pop	r8
   14b74:	6f 90       	pop	r6
   14b76:	5f 90       	pop	r5
   14b78:	4f 90       	pop	r4
   14b7a:	3f 90       	pop	r3
   14b7c:	2f 90       	pop	r2
   14b7e:	08 95       	ret

00014b80 <SS80ControllerPack>:
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
        printf("[SS80 Increment to (%lXH)]\n",
            (long) SS80_Blocks_to_Bytes(SS80s->AddressBlocks));
#endif
    return(0);
}
   14b80:	0f 93       	push	r16
   14b82:	1f 93       	push	r17
   14b84:	25 e0       	ldi	r18, 0x05	; 5
   14b86:	30 e0       	ldi	r19, 0x00	; 0
   14b88:	fc 01       	movw	r30, r24
   14b8a:	31 83       	std	Z+1, r19	; 0x01
   14b8c:	20 83       	st	Z, r18
   14b8e:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14b92:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14b96:	00 85       	ldd	r16, Z+8	; 0x08
   14b98:	11 85       	ldd	r17, Z+9	; 0x09
   14b9a:	20 e0       	ldi	r18, 0x00	; 0
   14b9c:	30 e0       	ldi	r19, 0x00	; 0
   14b9e:	42 e0       	ldi	r20, 0x02	; 2
   14ba0:	50 e0       	ldi	r21, 0x00	; 0
   14ba2:	60 e0       	ldi	r22, 0x00	; 0
   14ba4:	70 e0       	ldi	r23, 0x00	; 0
   14ba6:	88 e9       	ldi	r24, 0x98	; 152
   14ba8:	99 e1       	ldi	r25, 0x19	; 25
   14baa:	0e 94 3b c0 	call	0x18076	; 0x18076 <V2B_MSB>
   14bae:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14bb2:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14bb6:	02 85       	ldd	r16, Z+10	; 0x0a
   14bb8:	13 85       	ldd	r17, Z+11	; 0x0b
   14bba:	20 e0       	ldi	r18, 0x00	; 0
   14bbc:	30 e0       	ldi	r19, 0x00	; 0
   14bbe:	42 e0       	ldi	r20, 0x02	; 2
   14bc0:	50 e0       	ldi	r21, 0x00	; 0
   14bc2:	61 e0       	ldi	r22, 0x01	; 1
   14bc4:	70 e0       	ldi	r23, 0x00	; 0
   14bc6:	88 e9       	ldi	r24, 0x98	; 152
   14bc8:	99 e1       	ldi	r25, 0x19	; 25
   14bca:	0e 94 3b c0 	call	0x18076	; 0x18076 <V2B_MSB>
   14bce:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14bd2:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14bd6:	04 85       	ldd	r16, Z+12	; 0x0c
   14bd8:	10 e0       	ldi	r17, 0x00	; 0
   14bda:	20 e0       	ldi	r18, 0x00	; 0
   14bdc:	30 e0       	ldi	r19, 0x00	; 0
   14bde:	41 e0       	ldi	r20, 0x01	; 1
   14be0:	50 e0       	ldi	r21, 0x00	; 0
   14be2:	64 e0       	ldi	r22, 0x04	; 4
   14be4:	70 e0       	ldi	r23, 0x00	; 0
   14be6:	88 e9       	ldi	r24, 0x98	; 152
   14be8:	99 e1       	ldi	r25, 0x19	; 25
   14bea:	0e 94 3b c0 	call	0x18076	; 0x18076 <V2B_MSB>
   14bee:	88 e9       	ldi	r24, 0x98	; 152
   14bf0:	99 e1       	ldi	r25, 0x19	; 25
   14bf2:	1f 91       	pop	r17
   14bf4:	0f 91       	pop	r16
   14bf6:	08 95       	ret

00014bf8 <SS80UnitPack>:
   14bf8:	0f 93       	push	r16
   14bfa:	1f 93       	push	r17
   14bfc:	23 e1       	ldi	r18, 0x13	; 19
   14bfe:	30 e0       	ldi	r19, 0x00	; 0
   14c00:	fc 01       	movw	r30, r24
   14c02:	31 83       	std	Z+1, r19	; 0x01
   14c04:	20 83       	st	Z, r18
   14c06:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14c0a:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14c0e:	05 85       	ldd	r16, Z+13	; 0x0d
   14c10:	10 e0       	ldi	r17, 0x00	; 0
   14c12:	20 e0       	ldi	r18, 0x00	; 0
   14c14:	30 e0       	ldi	r19, 0x00	; 0
   14c16:	41 e0       	ldi	r20, 0x01	; 1
   14c18:	50 e0       	ldi	r21, 0x00	; 0
   14c1a:	60 e0       	ldi	r22, 0x00	; 0
   14c1c:	70 e0       	ldi	r23, 0x00	; 0
   14c1e:	85 e8       	ldi	r24, 0x85	; 133
   14c20:	99 e1       	ldi	r25, 0x19	; 25
   14c22:	0e 94 3b c0 	call	0x18076	; 0x18076 <V2B_MSB>
   14c26:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14c2a:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14c2e:	06 85       	ldd	r16, Z+14	; 0x0e
   14c30:	17 85       	ldd	r17, Z+15	; 0x0f
   14c32:	20 89       	ldd	r18, Z+16	; 0x10
   14c34:	31 89       	ldd	r19, Z+17	; 0x11
   14c36:	43 e0       	ldi	r20, 0x03	; 3
   14c38:	50 e0       	ldi	r21, 0x00	; 0
   14c3a:	61 e0       	ldi	r22, 0x01	; 1
   14c3c:	70 e0       	ldi	r23, 0x00	; 0
   14c3e:	85 e8       	ldi	r24, 0x85	; 133
   14c40:	99 e1       	ldi	r25, 0x19	; 25
   14c42:	0e 94 3b c0 	call	0x18076	; 0x18076 <V2B_MSB>
   14c46:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14c4a:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14c4e:	02 89       	ldd	r16, Z+18	; 0x12
   14c50:	13 89       	ldd	r17, Z+19	; 0x13
   14c52:	20 e0       	ldi	r18, 0x00	; 0
   14c54:	30 e0       	ldi	r19, 0x00	; 0
   14c56:	42 e0       	ldi	r20, 0x02	; 2
   14c58:	50 e0       	ldi	r21, 0x00	; 0
   14c5a:	64 e0       	ldi	r22, 0x04	; 4
   14c5c:	70 e0       	ldi	r23, 0x00	; 0
   14c5e:	85 e8       	ldi	r24, 0x85	; 133
   14c60:	99 e1       	ldi	r25, 0x19	; 25
   14c62:	0e 94 3b c0 	call	0x18076	; 0x18076 <V2B_MSB>
   14c66:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14c6a:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14c6e:	04 89       	ldd	r16, Z+20	; 0x14
   14c70:	10 e0       	ldi	r17, 0x00	; 0
   14c72:	20 e0       	ldi	r18, 0x00	; 0
   14c74:	30 e0       	ldi	r19, 0x00	; 0
   14c76:	41 e0       	ldi	r20, 0x01	; 1
   14c78:	50 e0       	ldi	r21, 0x00	; 0
   14c7a:	66 e0       	ldi	r22, 0x06	; 6
   14c7c:	70 e0       	ldi	r23, 0x00	; 0
   14c7e:	85 e8       	ldi	r24, 0x85	; 133
   14c80:	99 e1       	ldi	r25, 0x19	; 25
   14c82:	0e 94 3b c0 	call	0x18076	; 0x18076 <V2B_MSB>
   14c86:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14c8a:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14c8e:	05 89       	ldd	r16, Z+21	; 0x15
   14c90:	10 e0       	ldi	r17, 0x00	; 0
   14c92:	20 e0       	ldi	r18, 0x00	; 0
   14c94:	30 e0       	ldi	r19, 0x00	; 0
   14c96:	41 e0       	ldi	r20, 0x01	; 1
   14c98:	50 e0       	ldi	r21, 0x00	; 0
   14c9a:	67 e0       	ldi	r22, 0x07	; 7
   14c9c:	70 e0       	ldi	r23, 0x00	; 0
   14c9e:	85 e8       	ldi	r24, 0x85	; 133
   14ca0:	99 e1       	ldi	r25, 0x19	; 25
   14ca2:	0e 94 3b c0 	call	0x18076	; 0x18076 <V2B_MSB>
   14ca6:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14caa:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14cae:	06 89       	ldd	r16, Z+22	; 0x16
   14cb0:	17 89       	ldd	r17, Z+23	; 0x17
   14cb2:	20 e0       	ldi	r18, 0x00	; 0
   14cb4:	30 e0       	ldi	r19, 0x00	; 0
   14cb6:	42 e0       	ldi	r20, 0x02	; 2
   14cb8:	50 e0       	ldi	r21, 0x00	; 0
   14cba:	68 e0       	ldi	r22, 0x08	; 8
   14cbc:	70 e0       	ldi	r23, 0x00	; 0
   14cbe:	85 e8       	ldi	r24, 0x85	; 133
   14cc0:	99 e1       	ldi	r25, 0x19	; 25
   14cc2:	0e 94 3b c0 	call	0x18076	; 0x18076 <V2B_MSB>
   14cc6:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14cca:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14cce:	00 8d       	ldd	r16, Z+24	; 0x18
   14cd0:	11 8d       	ldd	r17, Z+25	; 0x19
   14cd2:	20 e0       	ldi	r18, 0x00	; 0
   14cd4:	30 e0       	ldi	r19, 0x00	; 0
   14cd6:	42 e0       	ldi	r20, 0x02	; 2
   14cd8:	50 e0       	ldi	r21, 0x00	; 0
   14cda:	6a e0       	ldi	r22, 0x0A	; 10
   14cdc:	70 e0       	ldi	r23, 0x00	; 0
   14cde:	85 e8       	ldi	r24, 0x85	; 133
   14ce0:	99 e1       	ldi	r25, 0x19	; 25
   14ce2:	0e 94 3b c0 	call	0x18076	; 0x18076 <V2B_MSB>
   14ce6:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14cea:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14cee:	02 8d       	ldd	r16, Z+26	; 0x1a
   14cf0:	13 8d       	ldd	r17, Z+27	; 0x1b
   14cf2:	20 e0       	ldi	r18, 0x00	; 0
   14cf4:	30 e0       	ldi	r19, 0x00	; 0
   14cf6:	42 e0       	ldi	r20, 0x02	; 2
   14cf8:	50 e0       	ldi	r21, 0x00	; 0
   14cfa:	6c e0       	ldi	r22, 0x0C	; 12
   14cfc:	70 e0       	ldi	r23, 0x00	; 0
   14cfe:	85 e8       	ldi	r24, 0x85	; 133
   14d00:	99 e1       	ldi	r25, 0x19	; 25
   14d02:	0e 94 3b c0 	call	0x18076	; 0x18076 <V2B_MSB>
   14d06:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14d0a:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14d0e:	04 8d       	ldd	r16, Z+28	; 0x1c
   14d10:	15 8d       	ldd	r17, Z+29	; 0x1d
   14d12:	20 e0       	ldi	r18, 0x00	; 0
   14d14:	30 e0       	ldi	r19, 0x00	; 0
   14d16:	42 e0       	ldi	r20, 0x02	; 2
   14d18:	50 e0       	ldi	r21, 0x00	; 0
   14d1a:	6e e0       	ldi	r22, 0x0E	; 14
   14d1c:	70 e0       	ldi	r23, 0x00	; 0
   14d1e:	85 e8       	ldi	r24, 0x85	; 133
   14d20:	99 e1       	ldi	r25, 0x19	; 25
   14d22:	0e 94 3b c0 	call	0x18076	; 0x18076 <V2B_MSB>
   14d26:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14d2a:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14d2e:	06 8d       	ldd	r16, Z+30	; 0x1e
   14d30:	10 e0       	ldi	r17, 0x00	; 0
   14d32:	20 e0       	ldi	r18, 0x00	; 0
   14d34:	30 e0       	ldi	r19, 0x00	; 0
   14d36:	41 e0       	ldi	r20, 0x01	; 1
   14d38:	50 e0       	ldi	r21, 0x00	; 0
   14d3a:	60 e1       	ldi	r22, 0x10	; 16
   14d3c:	70 e0       	ldi	r23, 0x00	; 0
   14d3e:	85 e8       	ldi	r24, 0x85	; 133
   14d40:	99 e1       	ldi	r25, 0x19	; 25
   14d42:	0e 94 3b c0 	call	0x18076	; 0x18076 <V2B_MSB>
   14d46:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14d4a:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14d4e:	07 8d       	ldd	r16, Z+31	; 0x1f
   14d50:	10 e0       	ldi	r17, 0x00	; 0
   14d52:	20 e0       	ldi	r18, 0x00	; 0
   14d54:	30 e0       	ldi	r19, 0x00	; 0
   14d56:	41 e0       	ldi	r20, 0x01	; 1
   14d58:	50 e0       	ldi	r21, 0x00	; 0
   14d5a:	61 e1       	ldi	r22, 0x11	; 17
   14d5c:	70 e0       	ldi	r23, 0x00	; 0
   14d5e:	85 e8       	ldi	r24, 0x85	; 133
   14d60:	99 e1       	ldi	r25, 0x19	; 25
   14d62:	0e 94 3b c0 	call	0x18076	; 0x18076 <V2B_MSB>
   14d66:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14d6a:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14d6e:	00 a1       	ldd	r16, Z+32	; 0x20
   14d70:	10 e0       	ldi	r17, 0x00	; 0
   14d72:	20 e0       	ldi	r18, 0x00	; 0
   14d74:	30 e0       	ldi	r19, 0x00	; 0
   14d76:	41 e0       	ldi	r20, 0x01	; 1
   14d78:	50 e0       	ldi	r21, 0x00	; 0
   14d7a:	62 e1       	ldi	r22, 0x12	; 18
   14d7c:	70 e0       	ldi	r23, 0x00	; 0
   14d7e:	85 e8       	ldi	r24, 0x85	; 133
   14d80:	99 e1       	ldi	r25, 0x19	; 25
   14d82:	0e 94 3b c0 	call	0x18076	; 0x18076 <V2B_MSB>
   14d86:	85 e8       	ldi	r24, 0x85	; 133
   14d88:	99 e1       	ldi	r25, 0x19	; 25
   14d8a:	1f 91       	pop	r17
   14d8c:	0f 91       	pop	r16
   14d8e:	08 95       	ret

00014d90 <SS80VolumePack>:
   14d90:	0f 93       	push	r16
   14d92:	1f 93       	push	r17
   14d94:	2d e0       	ldi	r18, 0x0D	; 13
   14d96:	30 e0       	ldi	r19, 0x00	; 0
   14d98:	fc 01       	movw	r30, r24
   14d9a:	31 83       	std	Z+1, r19	; 0x01
   14d9c:	20 83       	st	Z, r18
   14d9e:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14da2:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14da6:	01 a1       	ldd	r16, Z+33	; 0x21
   14da8:	12 a1       	ldd	r17, Z+34	; 0x22
   14daa:	23 a1       	ldd	r18, Z+35	; 0x23
   14dac:	34 a1       	ldd	r19, Z+36	; 0x24
   14dae:	43 e0       	ldi	r20, 0x03	; 3
   14db0:	50 e0       	ldi	r21, 0x00	; 0
   14db2:	60 e0       	ldi	r22, 0x00	; 0
   14db4:	70 e0       	ldi	r23, 0x00	; 0
   14db6:	88 e7       	ldi	r24, 0x78	; 120
   14db8:	99 e1       	ldi	r25, 0x19	; 25
   14dba:	0e 94 3b c0 	call	0x18076	; 0x18076 <V2B_MSB>
   14dbe:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14dc2:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14dc6:	05 a1       	ldd	r16, Z+37	; 0x25
   14dc8:	10 e0       	ldi	r17, 0x00	; 0
   14dca:	20 e0       	ldi	r18, 0x00	; 0
   14dcc:	30 e0       	ldi	r19, 0x00	; 0
   14dce:	41 e0       	ldi	r20, 0x01	; 1
   14dd0:	50 e0       	ldi	r21, 0x00	; 0
   14dd2:	63 e0       	ldi	r22, 0x03	; 3
   14dd4:	70 e0       	ldi	r23, 0x00	; 0
   14dd6:	88 e7       	ldi	r24, 0x78	; 120
   14dd8:	99 e1       	ldi	r25, 0x19	; 25
   14dda:	0e 94 3b c0 	call	0x18076	; 0x18076 <V2B_MSB>
   14dde:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14de2:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14de6:	06 a1       	ldd	r16, Z+38	; 0x26
   14de8:	17 a1       	ldd	r17, Z+39	; 0x27
   14dea:	20 e0       	ldi	r18, 0x00	; 0
   14dec:	30 e0       	ldi	r19, 0x00	; 0
   14dee:	42 e0       	ldi	r20, 0x02	; 2
   14df0:	50 e0       	ldi	r21, 0x00	; 0
   14df2:	64 e0       	ldi	r22, 0x04	; 4
   14df4:	70 e0       	ldi	r23, 0x00	; 0
   14df6:	88 e7       	ldi	r24, 0x78	; 120
   14df8:	99 e1       	ldi	r25, 0x19	; 25
   14dfa:	0e 94 3b c0 	call	0x18076	; 0x18076 <V2B_MSB>
   14dfe:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14e02:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14e06:	00 a5       	ldd	r16, Z+40	; 0x28
   14e08:	11 a5       	ldd	r17, Z+41	; 0x29
   14e0a:	22 a5       	ldd	r18, Z+42	; 0x2a
   14e0c:	33 a5       	ldd	r19, Z+43	; 0x2b
   14e0e:	46 e0       	ldi	r20, 0x06	; 6
   14e10:	50 e0       	ldi	r21, 0x00	; 0
   14e12:	66 e0       	ldi	r22, 0x06	; 6
   14e14:	70 e0       	ldi	r23, 0x00	; 0
   14e16:	88 e7       	ldi	r24, 0x78	; 120
   14e18:	99 e1       	ldi	r25, 0x19	; 25
   14e1a:	0e 94 3b c0 	call	0x18076	; 0x18076 <V2B_MSB>
   14e1e:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14e22:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14e26:	04 a5       	ldd	r16, Z+44	; 0x2c
   14e28:	10 e0       	ldi	r17, 0x00	; 0
   14e2a:	20 e0       	ldi	r18, 0x00	; 0
   14e2c:	30 e0       	ldi	r19, 0x00	; 0
   14e2e:	41 e0       	ldi	r20, 0x01	; 1
   14e30:	50 e0       	ldi	r21, 0x00	; 0
   14e32:	6c e0       	ldi	r22, 0x0C	; 12
   14e34:	70 e0       	ldi	r23, 0x00	; 0
   14e36:	88 e7       	ldi	r24, 0x78	; 120
   14e38:	99 e1       	ldi	r25, 0x19	; 25
   14e3a:	0e 94 3b c0 	call	0x18076	; 0x18076 <V2B_MSB>
   14e3e:	88 e7       	ldi	r24, 0x78	; 120
   14e40:	99 e1       	ldi	r25, 0x19	; 25
   14e42:	1f 91       	pop	r17
   14e44:	0f 91       	pop	r16
   14e46:	08 95       	ret

00014e48 <SS80_test_extended_status>:
   14e48:	9b 01       	movw	r18, r22
   14e4a:	43 e0       	ldi	r20, 0x03	; 3
   14e4c:	35 95       	asr	r19
   14e4e:	27 95       	ror	r18
   14e50:	4a 95       	dec	r20
   14e52:	e1 f7       	brne	.-8      	; 0x14e4c <SS80_test_extended_status+0x4>
   14e54:	82 0f       	add	r24, r18
   14e56:	93 1f       	adc	r25, r19
   14e58:	67 70       	andi	r22, 0x07	; 7
   14e5a:	77 27       	eor	r23, r23
   14e5c:	20 e8       	ldi	r18, 0x80	; 128
   14e5e:	30 e0       	ldi	r19, 0x00	; 0
   14e60:	02 c0       	rjmp	.+4      	; 0x14e66 <SS80_test_extended_status+0x1e>
   14e62:	35 95       	asr	r19
   14e64:	27 95       	ror	r18
   14e66:	6a 95       	dec	r22
   14e68:	e2 f7       	brpl	.-8      	; 0x14e62 <SS80_test_extended_status+0x1a>
   14e6a:	fc 01       	movw	r30, r24
   14e6c:	80 81       	ld	r24, Z
   14e6e:	28 23       	and	r18, r24
   14e70:	81 e0       	ldi	r24, 0x01	; 1
   14e72:	90 e0       	ldi	r25, 0x00	; 0
   14e74:	11 f4       	brne	.+4      	; 0x14e7a <SS80_test_extended_status+0x32>
   14e76:	80 e0       	ldi	r24, 0x00	; 0
   14e78:	90 e0       	ldi	r25, 0x00	; 0
   14e7a:	08 95       	ret

00014e7c <SS80_display_extended_status>:
   14e7c:	6f 92       	push	r6
   14e7e:	7f 92       	push	r7
   14e80:	8f 92       	push	r8
   14e82:	ef 92       	push	r14
   14e84:	ff 92       	push	r15
   14e86:	0f 93       	push	r16
   14e88:	1f 93       	push	r17
   14e8a:	cf 93       	push	r28
   14e8c:	df 93       	push	r29
   14e8e:	ad b7       	in	r26, 0x3d	; 61
   14e90:	be b7       	in	r27, 0x3e	; 62
   14e92:	17 97       	sbiw	r26, 0x07	; 7
   14e94:	0f b6       	in	r0, 0x3f	; 63
   14e96:	f8 94       	cli
   14e98:	be bf       	out	0x3e, r27	; 62
   14e9a:	0f be       	out	0x3f, r0	; 63
   14e9c:	ad bf       	out	0x3d, r26	; 61
   14e9e:	fc 01       	movw	r30, r24
   14ea0:	ac 01       	movw	r20, r24
   14ea2:	48 5f       	subi	r20, 0xF8	; 248
   14ea4:	5f 4f       	sbci	r21, 0xFF	; 255
   14ea6:	20 e0       	ldi	r18, 0x00	; 0
   14ea8:	30 e0       	ldi	r19, 0x00	; 0
   14eaa:	a1 91       	ld	r26, Z+
   14eac:	aa 23       	and	r26, r26
   14eae:	11 f0       	breq	.+4      	; 0x14eb4 <SS80_display_extended_status+0x38>
   14eb0:	21 e0       	ldi	r18, 0x01	; 1
   14eb2:	30 e0       	ldi	r19, 0x00	; 0
   14eb4:	e4 17       	cp	r30, r20
   14eb6:	f5 07       	cpc	r31, r21
   14eb8:	c1 f7       	brne	.-16     	; 0x14eaa <SS80_display_extended_status+0x2e>
   14eba:	23 2b       	or	r18, r19
   14ebc:	81 f1       	breq	.+96     	; 0x14f1e <SS80_display_extended_status+0xa2>
   14ebe:	ec 01       	movw	r28, r24
   14ec0:	ed b7       	in	r30, 0x3d	; 61
   14ec2:	fe b7       	in	r31, 0x3e	; 62
   14ec4:	75 83       	std	Z+5, r23	; 0x05
   14ec6:	64 83       	std	Z+4, r22	; 0x04
   14ec8:	80 e7       	ldi	r24, 0x70	; 112
   14eca:	97 e2       	ldi	r25, 0x27	; 39
   14ecc:	a0 e0       	ldi	r26, 0x00	; 0
   14ece:	81 83       	std	Z+1, r24	; 0x01
   14ed0:	92 83       	std	Z+2, r25	; 0x02
   14ed2:	a3 83       	std	Z+3, r26	; 0x03
   14ed4:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   14ed8:	0c e7       	ldi	r16, 0x7C	; 124
   14eda:	12 e0       	ldi	r17, 0x02	; 2
   14edc:	85 e6       	ldi	r24, 0x65	; 101
   14ede:	97 e2       	ldi	r25, 0x27	; 39
   14ee0:	3c 01       	movw	r6, r24
   14ee2:	81 2c       	mov	r8, r1
   14ee4:	f8 01       	movw	r30, r16
   14ee6:	e0 80       	ld	r14, Z
   14ee8:	f1 80       	ldd	r15, Z+1	; 0x01
   14eea:	ff ef       	ldi	r31, 0xFF	; 255
   14eec:	ef 16       	cp	r14, r31
   14eee:	ff 06       	cpc	r15, r31
   14ef0:	b1 f0       	breq	.+44     	; 0x14f1e <SS80_display_extended_status+0xa2>
   14ef2:	b7 01       	movw	r22, r14
   14ef4:	ce 01       	movw	r24, r28
   14ef6:	a8 df       	rcall	.-176    	; 0x14e48 <SS80_test_extended_status>
   14ef8:	89 2b       	or	r24, r25
   14efa:	71 f0       	breq	.+28     	; 0x14f18 <SS80_display_extended_status+0x9c>
   14efc:	f8 01       	movw	r30, r16
   14efe:	82 81       	ldd	r24, Z+2	; 0x02
   14f00:	93 81       	ldd	r25, Z+3	; 0x03
   14f02:	ed b7       	in	r30, 0x3d	; 61
   14f04:	fe b7       	in	r31, 0x3e	; 62
   14f06:	97 83       	std	Z+7, r25	; 0x07
   14f08:	86 83       	std	Z+6, r24	; 0x06
   14f0a:	f5 82       	std	Z+5, r15	; 0x05
   14f0c:	e4 82       	std	Z+4, r14	; 0x04
   14f0e:	61 82       	std	Z+1, r6	; 0x01
   14f10:	72 82       	std	Z+2, r7	; 0x02
   14f12:	83 82       	std	Z+3, r8	; 0x03
   14f14:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   14f18:	0c 5f       	subi	r16, 0xFC	; 252
   14f1a:	1f 4f       	sbci	r17, 0xFF	; 255
   14f1c:	e3 cf       	rjmp	.-58     	; 0x14ee4 <SS80_display_extended_status+0x68>
   14f1e:	ad b7       	in	r26, 0x3d	; 61
   14f20:	be b7       	in	r27, 0x3e	; 62
   14f22:	17 96       	adiw	r26, 0x07	; 7
   14f24:	0f b6       	in	r0, 0x3f	; 63
   14f26:	f8 94       	cli
   14f28:	be bf       	out	0x3e, r27	; 62
   14f2a:	0f be       	out	0x3f, r0	; 63
   14f2c:	ad bf       	out	0x3d, r26	; 61
   14f2e:	df 91       	pop	r29
   14f30:	cf 91       	pop	r28
   14f32:	1f 91       	pop	r17
   14f34:	0f 91       	pop	r16
   14f36:	ff 90       	pop	r15
   14f38:	ef 90       	pop	r14
   14f3a:	8f 90       	pop	r8
   14f3c:	7f 90       	pop	r7
   14f3e:	6f 90       	pop	r6
   14f40:	08 95       	ret

00014f42 <SS80_send_status>:
   14f42:	a9 e1       	ldi	r26, 0x19	; 25
   14f44:	b0 e0       	ldi	r27, 0x00	; 0
   14f46:	e7 ea       	ldi	r30, 0xA7	; 167
   14f48:	f7 ea       	ldi	r31, 0xA7	; 167
   14f4a:	0c 94 c7 e6 	jmp	0x1cd8e	; 0x1cd8e <__prologue_saves__+0x18>
   14f4e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14f52:	85 ff       	sbrs	r24, 5
   14f54:	0a c0       	rjmp	.+20     	; 0x14f6a <SS80_send_status+0x28>
   14f56:	81 e5       	ldi	r24, 0x51	; 81
   14f58:	97 e2       	ldi	r25, 0x27	; 39
   14f5a:	a0 e0       	ldi	r26, 0x00	; 0
   14f5c:	ed b7       	in	r30, 0x3d	; 61
   14f5e:	fe b7       	in	r31, 0x3e	; 62
   14f60:	81 83       	std	Z+1, r24	; 0x01
   14f62:	92 83       	std	Z+2, r25	; 0x02
   14f64:	a3 83       	std	Z+3, r26	; 0x03
   14f66:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   14f6a:	ce 01       	movw	r24, r28
   14f6c:	04 96       	adiw	r24, 0x04	; 4
   14f6e:	7c 01       	movw	r14, r24
   14f70:	84 e1       	ldi	r24, 0x14	; 20
   14f72:	f7 01       	movw	r30, r14
   14f74:	11 92       	st	Z+, r1
   14f76:	8a 95       	dec	r24
   14f78:	e9 f7       	brne	.-6      	; 0x14f74 <SS80_send_status+0x32>
   14f7a:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   14f7e:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   14f82:	86 81       	ldd	r24, Z+6	; 0x06
   14f84:	20 e1       	ldi	r18, 0x10	; 16
   14f86:	82 9f       	mul	r24, r18
   14f88:	c0 01       	movw	r24, r0
   14f8a:	11 24       	eor	r1, r1
   14f8c:	95 81       	ldd	r25, Z+5	; 0x05
   14f8e:	9f 70       	andi	r25, 0x0F	; 15
   14f90:	89 2b       	or	r24, r25
   14f92:	8c 83       	std	Y+4, r24	; 0x04
   14f94:	8f ef       	ldi	r24, 0xFF	; 255
   14f96:	8d 83       	std	Y+5, r24	; 0x05
   14f98:	83 81       	ldd	r24, Z+3	; 0x03
   14f9a:	86 ff       	sbrs	r24, 6
   14f9c:	02 c0       	rjmp	.+4      	; 0x14fa2 <SS80_send_status+0x60>
   14f9e:	92 e0       	ldi	r25, 0x02	; 2
   14fa0:	9e 83       	std	Y+6, r25	; 0x06
   14fa2:	82 ff       	sbrs	r24, 2
   14fa4:	03 c0       	rjmp	.+6      	; 0x14fac <SS80_send_status+0x6a>
   14fa6:	9e 81       	ldd	r25, Y+6	; 0x06
   14fa8:	91 60       	ori	r25, 0x01	; 1
   14faa:	9e 83       	std	Y+6, r25	; 0x06
   14fac:	80 ff       	sbrs	r24, 0
   14fae:	02 c0       	rjmp	.+4      	; 0x14fb4 <SS80_send_status+0x72>
   14fb0:	82 e0       	ldi	r24, 0x02	; 2
   14fb2:	88 87       	std	Y+8, r24	; 0x08
   14fb4:	83 81       	ldd	r24, Z+3	; 0x03
   14fb6:	81 ff       	sbrs	r24, 1
   14fb8:	03 c0       	rjmp	.+6      	; 0x14fc0 <SS80_send_status+0x7e>
   14fba:	88 85       	ldd	r24, Y+8	; 0x08
   14fbc:	82 60       	ori	r24, 0x02	; 2
   14fbe:	88 87       	std	Y+8, r24	; 0x08
   14fc0:	83 81       	ldd	r24, Z+3	; 0x03
   14fc2:	83 ff       	sbrs	r24, 3
   14fc4:	02 c0       	rjmp	.+4      	; 0x14fca <SS80_send_status+0x88>
   14fc6:	88 e0       	ldi	r24, 0x08	; 8
   14fc8:	8a 87       	std	Y+10, r24	; 0x0a
   14fca:	83 81       	ldd	r24, Z+3	; 0x03
   14fcc:	94 81       	ldd	r25, Z+4	; 0x04
   14fce:	89 2b       	or	r24, r25
   14fd0:	59 f4       	brne	.+22     	; 0x14fe8 <SS80_send_status+0xa6>
   14fd2:	07 81       	ldd	r16, Z+7	; 0x07
   14fd4:	10 85       	ldd	r17, Z+8	; 0x08
   14fd6:	21 85       	ldd	r18, Z+9	; 0x09
   14fd8:	32 85       	ldd	r19, Z+10	; 0x0a
   14fda:	46 e0       	ldi	r20, 0x06	; 6
   14fdc:	50 e0       	ldi	r21, 0x00	; 0
   14fde:	6a e0       	ldi	r22, 0x0A	; 10
   14fe0:	70 e0       	ldi	r23, 0x00	; 0
   14fe2:	c7 01       	movw	r24, r14
   14fe4:	0e 94 3b c0 	call	0x18076	; 0x18076 <V2B_MSB>
   14fe8:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   14fec:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   14ff0:	83 81       	ldd	r24, Z+3	; 0x03
   14ff2:	94 81       	ldd	r25, Z+4	; 0x04
   14ff4:	89 2b       	or	r24, r25
   14ff6:	11 f0       	breq	.+4      	; 0x14ffc <SS80_send_status+0xba>
   14ff8:	81 e0       	ldi	r24, 0x01	; 1
   14ffa:	82 83       	std	Z+2, r24	; 0x02
   14ffc:	80 e0       	ldi	r24, 0x00	; 0
   14ffe:	91 e0       	ldi	r25, 0x01	; 1
   15000:	99 8f       	std	Y+25, r25	; 0x19
   15002:	88 8f       	std	Y+24, r24	; 0x18
   15004:	ae 01       	movw	r20, r28
   15006:	48 5e       	subi	r20, 0xE8	; 232
   15008:	5f 4f       	sbci	r21, 0xFF	; 255
   1500a:	64 e1       	ldi	r22, 0x14	; 20
   1500c:	70 e0       	ldi	r23, 0x00	; 0
   1500e:	c7 01       	movw	r24, r14
   15010:	0e 94 5c 8b 	call	0x116b8	; 0x116b8 <gpib_write_str>
   15014:	44 97       	sbiw	r24, 0x14	; 20
   15016:	71 f0       	breq	.+28     	; 0x15034 <SS80_send_status+0xf2>
   15018:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1501c:	80 ff       	sbrs	r24, 0
   1501e:	0a c0       	rjmp	.+20     	; 0x15034 <SS80_send_status+0xf2>
   15020:	86 e3       	ldi	r24, 0x36	; 54
   15022:	97 e2       	ldi	r25, 0x27	; 39
   15024:	a0 e0       	ldi	r26, 0x00	; 0
   15026:	ed b7       	in	r30, 0x3d	; 61
   15028:	fe b7       	in	r31, 0x3e	; 62
   1502a:	81 83       	std	Z+1, r24	; 0x01
   1502c:	92 83       	std	Z+2, r25	; 0x02
   1502e:	a3 83       	std	Z+3, r26	; 0x03
   15030:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   15034:	88 8d       	ldd	r24, Y+24	; 0x18
   15036:	99 8d       	ldd	r25, Y+25	; 0x19
   15038:	88 27       	eor	r24, r24
   1503a:	90 7d       	andi	r25, 0xD0	; 208
   1503c:	69 96       	adiw	r28, 0x19	; 25
   1503e:	e6 e0       	ldi	r30, 0x06	; 6
   15040:	0c 94 e3 e6 	jmp	0x1cdc6	; 0x1cdc6 <__epilogue_restores__+0x18>

00015044 <SS80_describe>:
   15044:	a7 e0       	ldi	r26, 0x07	; 7
   15046:	b0 e0       	ldi	r27, 0x00	; 0
   15048:	e8 e2       	ldi	r30, 0x28	; 40
   1504a:	f8 ea       	ldi	r31, 0xA8	; 168
   1504c:	0c 94 cb e6 	jmp	0x1cd96	; 0x1cd96 <__prologue_saves__+0x20>
   15050:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15054:	85 ff       	sbrs	r24, 5
   15056:	0a c0       	rjmp	.+20     	; 0x1506c <SS80_describe+0x28>
   15058:	85 e2       	ldi	r24, 0x25	; 37
   1505a:	97 e2       	ldi	r25, 0x27	; 39
   1505c:	a0 e0       	ldi	r26, 0x00	; 0
   1505e:	ed b7       	in	r30, 0x3d	; 61
   15060:	fe b7       	in	r31, 0x3e	; 62
   15062:	81 83       	std	Z+1, r24	; 0x01
   15064:	92 83       	std	Z+2, r25	; 0x02
   15066:	a3 83       	std	Z+3, r26	; 0x03
   15068:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   1506c:	1f 82       	std	Y+7, r1	; 0x07
   1506e:	1e 82       	std	Y+6, r1	; 0x06
   15070:	ce 01       	movw	r24, r28
   15072:	04 96       	adiw	r24, 0x04	; 4
   15074:	85 dd       	rcall	.-1270   	; 0x14b80 <SS80ControllerPack>
   15076:	6c 81       	ldd	r22, Y+4	; 0x04
   15078:	7d 81       	ldd	r23, Y+5	; 0x05
   1507a:	ae 01       	movw	r20, r28
   1507c:	4a 5f       	subi	r20, 0xFA	; 250
   1507e:	5f 4f       	sbci	r21, 0xFF	; 255
   15080:	0e 94 5c 8b 	call	0x116b8	; 0x116b8 <gpib_write_str>
   15084:	2c 81       	ldd	r18, Y+4	; 0x04
   15086:	3d 81       	ldd	r19, Y+5	; 0x05
   15088:	82 17       	cp	r24, r18
   1508a:	93 07       	cpc	r25, r19
   1508c:	39 f0       	breq	.+14     	; 0x1509c <SS80_describe+0x58>
   1508e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15092:	80 ff       	sbrs	r24, 0
   15094:	3c c0       	rjmp	.+120    	; 0x1510e <SS80_describe+0xca>
   15096:	82 e0       	ldi	r24, 0x02	; 2
   15098:	97 e2       	ldi	r25, 0x27	; 39
   1509a:	31 c0       	rjmp	.+98     	; 0x150fe <SS80_describe+0xba>
   1509c:	1f 82       	std	Y+7, r1	; 0x07
   1509e:	1e 82       	std	Y+6, r1	; 0x06
   150a0:	ce 01       	movw	r24, r28
   150a2:	04 96       	adiw	r24, 0x04	; 4
   150a4:	a9 dd       	rcall	.-1198   	; 0x14bf8 <SS80UnitPack>
   150a6:	6c 81       	ldd	r22, Y+4	; 0x04
   150a8:	7d 81       	ldd	r23, Y+5	; 0x05
   150aa:	ae 01       	movw	r20, r28
   150ac:	4a 5f       	subi	r20, 0xFA	; 250
   150ae:	5f 4f       	sbci	r21, 0xFF	; 255
   150b0:	0e 94 5c 8b 	call	0x116b8	; 0x116b8 <gpib_write_str>
   150b4:	2c 81       	ldd	r18, Y+4	; 0x04
   150b6:	3d 81       	ldd	r19, Y+5	; 0x05
   150b8:	82 17       	cp	r24, r18
   150ba:	93 07       	cpc	r25, r19
   150bc:	39 f0       	breq	.+14     	; 0x150cc <SS80_describe+0x88>
   150be:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   150c2:	80 ff       	sbrs	r24, 0
   150c4:	24 c0       	rjmp	.+72     	; 0x1510e <SS80_describe+0xca>
   150c6:	85 ee       	ldi	r24, 0xE5	; 229
   150c8:	96 e2       	ldi	r25, 0x26	; 38
   150ca:	19 c0       	rjmp	.+50     	; 0x150fe <SS80_describe+0xba>
   150cc:	80 e0       	ldi	r24, 0x00	; 0
   150ce:	91 e0       	ldi	r25, 0x01	; 1
   150d0:	9f 83       	std	Y+7, r25	; 0x07
   150d2:	8e 83       	std	Y+6, r24	; 0x06
   150d4:	ce 01       	movw	r24, r28
   150d6:	04 96       	adiw	r24, 0x04	; 4
   150d8:	5b de       	rcall	.-842    	; 0x14d90 <SS80VolumePack>
   150da:	6c 81       	ldd	r22, Y+4	; 0x04
   150dc:	7d 81       	ldd	r23, Y+5	; 0x05
   150de:	ae 01       	movw	r20, r28
   150e0:	4a 5f       	subi	r20, 0xFA	; 250
   150e2:	5f 4f       	sbci	r21, 0xFF	; 255
   150e4:	0e 94 5c 8b 	call	0x116b8	; 0x116b8 <gpib_write_str>
   150e8:	2c 81       	ldd	r18, Y+4	; 0x04
   150ea:	3d 81       	ldd	r19, Y+5	; 0x05
   150ec:	82 17       	cp	r24, r18
   150ee:	93 07       	cpc	r25, r19
   150f0:	99 f0       	breq	.+38     	; 0x15118 <SS80_describe+0xd4>
   150f2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   150f6:	80 ff       	sbrs	r24, 0
   150f8:	0a c0       	rjmp	.+20     	; 0x1510e <SS80_describe+0xca>
   150fa:	86 ec       	ldi	r24, 0xC6	; 198
   150fc:	96 e2       	ldi	r25, 0x26	; 38
   150fe:	a0 e0       	ldi	r26, 0x00	; 0
   15100:	ed b7       	in	r30, 0x3d	; 61
   15102:	fe b7       	in	r31, 0x3e	; 62
   15104:	81 83       	std	Z+1, r24	; 0x01
   15106:	92 83       	std	Z+2, r25	; 0x02
   15108:	a3 83       	std	Z+3, r26	; 0x03
   1510a:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   1510e:	8e 81       	ldd	r24, Y+6	; 0x06
   15110:	9f 81       	ldd	r25, Y+7	; 0x07
   15112:	88 27       	eor	r24, r24
   15114:	90 7d       	andi	r25, 0xD0	; 208
   15116:	02 c0       	rjmp	.+4      	; 0x1511c <SS80_describe+0xd8>
   15118:	80 e0       	ldi	r24, 0x00	; 0
   1511a:	90 e0       	ldi	r25, 0x00	; 0
   1511c:	27 96       	adiw	r28, 0x07	; 7
   1511e:	e2 e0       	ldi	r30, 0x02	; 2
   15120:	0c 94 e7 e6 	jmp	0x1cdce	; 0x1cdce <__epilogue_restores__+0x20>

00015124 <SS80_Check_Unit>:
   15124:	00 d0       	rcall	.+0      	; 0x15126 <SS80_Check_Unit+0x2>
   15126:	00 d0       	rcall	.+0      	; 0x15128 <SS80_Check_Unit+0x4>
   15128:	1f 92       	push	r1
   1512a:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   1512e:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15132:	88 23       	and	r24, r24
   15134:	c9 f0       	breq	.+50     	; 0x15168 <SS80_Check_Unit+0x44>
   15136:	8f 30       	cpi	r24, 0x0F	; 15
   15138:	b9 f0       	breq	.+46     	; 0x15168 <SS80_Check_Unit+0x44>
   1513a:	23 81       	ldd	r18, Z+3	; 0x03
   1513c:	34 81       	ldd	r19, Z+4	; 0x04
   1513e:	20 64       	ori	r18, 0x40	; 64
   15140:	34 83       	std	Z+4, r19	; 0x04
   15142:	23 83       	std	Z+3, r18	; 0x03
   15144:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <debuglevel>
   15148:	90 ff       	sbrs	r25, 0
   1514a:	0f c0       	rjmp	.+30     	; 0x1516a <SS80_Check_Unit+0x46>
   1514c:	90 e0       	ldi	r25, 0x00	; 0
   1514e:	ed b7       	in	r30, 0x3d	; 61
   15150:	fe b7       	in	r31, 0x3e	; 62
   15152:	95 83       	std	Z+5, r25	; 0x05
   15154:	84 83       	std	Z+4, r24	; 0x04
   15156:	8e ea       	ldi	r24, 0xAE	; 174
   15158:	96 e2       	ldi	r25, 0x26	; 38
   1515a:	a0 e0       	ldi	r26, 0x00	; 0
   1515c:	81 83       	std	Z+1, r24	; 0x01
   1515e:	92 83       	std	Z+2, r25	; 0x02
   15160:	a3 83       	std	Z+3, r26	; 0x03
   15162:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   15166:	01 c0       	rjmp	.+2      	; 0x1516a <SS80_Check_Unit+0x46>
   15168:	85 83       	std	Z+5, r24	; 0x05
   1516a:	0f 90       	pop	r0
   1516c:	0f 90       	pop	r0
   1516e:	0f 90       	pop	r0
   15170:	0f 90       	pop	r0
   15172:	0f 90       	pop	r0
   15174:	08 95       	ret

00015176 <SS80_Check_Volume>:
   15176:	00 d0       	rcall	.+0      	; 0x15178 <SS80_Check_Volume+0x2>
   15178:	00 d0       	rcall	.+0      	; 0x1517a <SS80_Check_Volume+0x4>
   1517a:	1f 92       	push	r1
   1517c:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15180:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15184:	88 23       	and	r24, r24
   15186:	b9 f0       	breq	.+46     	; 0x151b6 <SS80_Check_Volume+0x40>
   15188:	23 81       	ldd	r18, Z+3	; 0x03
   1518a:	34 81       	ldd	r19, Z+4	; 0x04
   1518c:	20 64       	ori	r18, 0x40	; 64
   1518e:	34 83       	std	Z+4, r19	; 0x04
   15190:	23 83       	std	Z+3, r18	; 0x03
   15192:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <debuglevel>
   15196:	90 ff       	sbrs	r25, 0
   15198:	0f c0       	rjmp	.+30     	; 0x151b8 <SS80_Check_Volume+0x42>
   1519a:	90 e0       	ldi	r25, 0x00	; 0
   1519c:	ed b7       	in	r30, 0x3d	; 61
   1519e:	fe b7       	in	r31, 0x3e	; 62
   151a0:	95 83       	std	Z+5, r25	; 0x05
   151a2:	84 83       	std	Z+4, r24	; 0x04
   151a4:	84 e9       	ldi	r24, 0x94	; 148
   151a6:	96 e2       	ldi	r25, 0x26	; 38
   151a8:	a0 e0       	ldi	r26, 0x00	; 0
   151aa:	81 83       	std	Z+1, r24	; 0x01
   151ac:	92 83       	std	Z+2, r25	; 0x02
   151ae:	a3 83       	std	Z+3, r26	; 0x03
   151b0:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   151b4:	01 c0       	rjmp	.+2      	; 0x151b8 <SS80_Check_Volume+0x42>
   151b6:	16 82       	std	Z+6, r1	; 0x06
   151b8:	0f 90       	pop	r0
   151ba:	0f 90       	pop	r0
   151bc:	0f 90       	pop	r0
   151be:	0f 90       	pop	r0
   151c0:	0f 90       	pop	r0
   151c2:	08 95       	ret

000151c4 <SS80_Command_State>:
   151c4:	2f 92       	push	r2
   151c6:	3f 92       	push	r3
   151c8:	4f 92       	push	r4
   151ca:	6f 92       	push	r6
   151cc:	7f 92       	push	r7
   151ce:	8f 92       	push	r8
   151d0:	af 92       	push	r10
   151d2:	bf 92       	push	r11
   151d4:	cf 92       	push	r12
   151d6:	ef 92       	push	r14
   151d8:	ff 92       	push	r15
   151da:	0f 93       	push	r16
   151dc:	1f 93       	push	r17
   151de:	cf 93       	push	r28
   151e0:	df 93       	push	r29
   151e2:	cd b7       	in	r28, 0x3d	; 61
   151e4:	de b7       	in	r29, 0x3e	; 62
   151e6:	66 97       	sbiw	r28, 0x16	; 22
   151e8:	0f b6       	in	r0, 0x3f	; 63
   151ea:	f8 94       	cli
   151ec:	de bf       	out	0x3e, r29	; 62
   151ee:	0f be       	out	0x3f, r0	; 63
   151f0:	cd bf       	out	0x3d, r28	; 61
   151f2:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   151f6:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   151fa:	81 81       	ldd	r24, Z+1	; 0x01
   151fc:	90 e0       	ldi	r25, 0x00	; 0
   151fe:	0e 94 62 86 	call	0x10cc4	; 0x10cc4 <gpib_disable_PPR>
   15202:	80 e0       	ldi	r24, 0x00	; 0
   15204:	91 e0       	ldi	r25, 0x01	; 1
   15206:	99 87       	std	Y+9, r25	; 0x09
   15208:	88 87       	std	Y+8, r24	; 0x08
   1520a:	ae 01       	movw	r20, r28
   1520c:	48 5f       	subi	r20, 0xF8	; 248
   1520e:	5f 4f       	sbci	r21, 0xFF	; 255
   15210:	60 e0       	ldi	r22, 0x00	; 0
   15212:	72 e0       	ldi	r23, 0x02	; 2
   15214:	8a ee       	ldi	r24, 0xEA	; 234
   15216:	9c e1       	ldi	r25, 0x1C	; 28
   15218:	0e 94 ba 8a 	call	0x11574	; 0x11574 <gpib_read_str>
   1521c:	9b 87       	std	Y+11, r25	; 0x0b
   1521e:	8a 87       	std	Y+10, r24	; 0x0a
   15220:	88 85       	ldd	r24, Y+8	; 0x08
   15222:	99 85       	ldd	r25, Y+9	; 0x09
   15224:	9c 01       	movw	r18, r24
   15226:	22 27       	eor	r18, r18
   15228:	30 7d       	andi	r19, 0xD0	; 208
   1522a:	23 2b       	or	r18, r19
   1522c:	79 f0       	breq	.+30     	; 0x1524c <SS80_Command_State+0x88>
   1522e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15232:	80 ff       	sbrs	r24, 0
   15234:	21 c2       	rjmp	.+1090   	; 0x15678 <SS80_Command_State+0x4b4>
   15236:	8e e6       	ldi	r24, 0x6E	; 110
   15238:	96 e2       	ldi	r25, 0x26	; 38
   1523a:	a0 e0       	ldi	r26, 0x00	; 0
   1523c:	ed b7       	in	r30, 0x3d	; 61
   1523e:	fe b7       	in	r31, 0x3e	; 62
   15240:	81 83       	std	Z+1, r24	; 0x01
   15242:	92 83       	std	Z+2, r25	; 0x02
   15244:	a3 83       	std	Z+3, r26	; 0x03
   15246:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   1524a:	16 c2       	rjmp	.+1068   	; 0x15678 <SS80_Command_State+0x4b4>
   1524c:	2a 85       	ldd	r18, Y+10	; 0x0a
   1524e:	3b 85       	ldd	r19, Y+11	; 0x0b
   15250:	23 2b       	or	r18, r19
   15252:	09 f4       	brne	.+2      	; 0x15256 <SS80_Command_State+0x92>
   15254:	16 c2       	rjmp	.+1068   	; 0x15682 <SS80_Command_State+0x4be>
   15256:	90 fd       	sbrc	r25, 0
   15258:	0e c0       	rjmp	.+28     	; 0x15276 <SS80_Command_State+0xb2>
   1525a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1525e:	80 ff       	sbrs	r24, 0
   15260:	0a c0       	rjmp	.+20     	; 0x15276 <SS80_Command_State+0xb2>
   15262:	85 e5       	ldi	r24, 0x55	; 85
   15264:	96 e2       	ldi	r25, 0x26	; 38
   15266:	a0 e0       	ldi	r26, 0x00	; 0
   15268:	ed b7       	in	r30, 0x3d	; 61
   1526a:	fe b7       	in	r31, 0x3e	; 62
   1526c:	81 83       	std	Z+1, r24	; 0x01
   1526e:	92 83       	std	Z+2, r25	; 0x02
   15270:	a3 83       	std	Z+3, r26	; 0x03
   15272:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   15276:	e1 2c       	mov	r14, r1
   15278:	f1 2c       	mov	r15, r1
   1527a:	89 e5       	ldi	r24, 0x59	; 89
   1527c:	95 e2       	ldi	r25, 0x25	; 37
   1527e:	9c 01       	movw	r18, r24
   15280:	40 e0       	ldi	r20, 0x00	; 0
   15282:	2e 87       	std	Y+14, r18	; 0x0e
   15284:	3f 87       	std	Y+15, r19	; 0x0f
   15286:	48 8b       	std	Y+16, r20	; 0x10
   15288:	8e e7       	ldi	r24, 0x7E	; 126
   1528a:	95 e2       	ldi	r25, 0x25	; 37
   1528c:	9c 01       	movw	r18, r24
   1528e:	40 e0       	ldi	r20, 0x00	; 0
   15290:	29 8b       	std	Y+17, r18	; 0x11
   15292:	3a 8b       	std	Y+18, r19	; 0x12
   15294:	4b 8b       	std	Y+19, r20	; 0x13
   15296:	88 e9       	ldi	r24, 0x98	; 152
   15298:	95 e2       	ldi	r25, 0x25	; 37
   1529a:	9c 01       	movw	r18, r24
   1529c:	40 e0       	ldi	r20, 0x00	; 0
   1529e:	2c 8b       	std	Y+20, r18	; 0x14
   152a0:	3d 8b       	std	Y+21, r19	; 0x15
   152a2:	4e 8b       	std	Y+22, r20	; 0x16
   152a4:	8e ea       	ldi	r24, 0xAE	; 174
   152a6:	95 e2       	ldi	r25, 0x25	; 37
   152a8:	3c 01       	movw	r6, r24
   152aa:	81 2c       	mov	r8, r1
   152ac:	8c eb       	ldi	r24, 0xBC	; 188
   152ae:	95 e2       	ldi	r25, 0x25	; 37
   152b0:	5c 01       	movw	r10, r24
   152b2:	c1 2c       	mov	r12, r1
   152b4:	88 ed       	ldi	r24, 0xD8	; 216
   152b6:	95 e2       	ldi	r25, 0x25	; 37
   152b8:	1c 01       	movw	r2, r24
   152ba:	41 2c       	mov	r4, r1
   152bc:	2a 85       	ldd	r18, Y+10	; 0x0a
   152be:	3b 85       	ldd	r19, Y+11	; 0x0b
   152c0:	87 01       	movw	r16, r14
   152c2:	e2 16       	cp	r14, r18
   152c4:	f3 06       	cpc	r15, r19
   152c6:	0c f0       	brlt	.+2      	; 0x152ca <SS80_Command_State+0x106>
   152c8:	b6 c1       	rjmp	.+876    	; 0x15636 <SS80_Command_State+0x472>
   152ca:	0f 5f       	subi	r16, 0xFF	; 255
   152cc:	1f 4f       	sbci	r17, 0xFF	; 255
   152ce:	f7 01       	movw	r30, r14
   152d0:	e6 51       	subi	r30, 0x16	; 22
   152d2:	f3 4e       	sbci	r31, 0xE3	; 227
   152d4:	80 81       	ld	r24, Z
   152d6:	28 2f       	mov	r18, r24
   152d8:	30 e0       	ldi	r19, 0x00	; 0
   152da:	a9 01       	movw	r20, r18
   152dc:	40 52       	subi	r20, 0x20	; 32
   152de:	51 09       	sbc	r21, r1
   152e0:	40 31       	cpi	r20, 0x10	; 16
   152e2:	51 05       	cpc	r21, r1
   152e4:	98 f4       	brcc	.+38     	; 0x1530c <SS80_Command_State+0x148>
   152e6:	80 52       	subi	r24, 0x20	; 32
   152e8:	1d df       	rcall	.-454    	; 0x15124 <SS80_Check_Unit>
   152ea:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   152ee:	85 ff       	sbrs	r24, 5
   152f0:	a0 c1       	rjmp	.+832    	; 0x15632 <SS80_Command_State+0x46e>
   152f2:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   152f6:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   152fa:	85 81       	ldd	r24, Z+5	; 0x05
   152fc:	90 e0       	ldi	r25, 0x00	; 0
   152fe:	ed b7       	in	r30, 0x3d	; 61
   15300:	fe b7       	in	r31, 0x3e	; 62
   15302:	95 83       	std	Z+5, r25	; 0x05
   15304:	84 83       	std	Z+4, r24	; 0x04
   15306:	8f e3       	ldi	r24, 0x3F	; 63
   15308:	96 e2       	ldi	r25, 0x26	; 38
   1530a:	19 c0       	rjmp	.+50     	; 0x1533e <SS80_Command_State+0x17a>
   1530c:	a9 01       	movw	r20, r18
   1530e:	40 54       	subi	r20, 0x40	; 64
   15310:	51 09       	sbc	r21, r1
   15312:	40 31       	cpi	r20, 0x10	; 16
   15314:	51 05       	cpc	r21, r1
   15316:	d0 f4       	brcc	.+52     	; 0x1534c <SS80_Command_State+0x188>
   15318:	80 54       	subi	r24, 0x40	; 64
   1531a:	2d df       	rcall	.-422    	; 0x15176 <SS80_Check_Volume>
   1531c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15320:	85 ff       	sbrs	r24, 5
   15322:	87 c1       	rjmp	.+782    	; 0x15632 <SS80_Command_State+0x46e>
   15324:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15328:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   1532c:	86 81       	ldd	r24, Z+6	; 0x06
   1532e:	90 e0       	ldi	r25, 0x00	; 0
   15330:	ed b7       	in	r30, 0x3d	; 61
   15332:	fe b7       	in	r31, 0x3e	; 62
   15334:	95 83       	std	Z+5, r25	; 0x05
   15336:	84 83       	std	Z+4, r24	; 0x04
   15338:	26 e2       	ldi	r18, 0x26	; 38
   1533a:	36 e2       	ldi	r19, 0x26	; 38
   1533c:	c9 01       	movw	r24, r18
   1533e:	a0 e0       	ldi	r26, 0x00	; 0
   15340:	81 83       	std	Z+1, r24	; 0x01
   15342:	92 83       	std	Z+2, r25	; 0x02
   15344:	a3 83       	std	Z+3, r26	; 0x03
   15346:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   1534a:	73 c1       	rjmp	.+742    	; 0x15632 <SS80_Command_State+0x46e>
   1534c:	21 15       	cp	r18, r1
   1534e:	31 05       	cpc	r19, r1
   15350:	79 f4       	brne	.+30     	; 0x15370 <SS80_Command_State+0x1ac>
   15352:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15356:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   1535a:	81 e0       	ldi	r24, 0x01	; 1
   1535c:	90 e0       	ldi	r25, 0x00	; 0
   1535e:	91 83       	std	Z+1, r25	; 0x01
   15360:	80 83       	st	Z, r24
   15362:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15366:	85 ff       	sbrs	r24, 5
   15368:	66 c1       	rjmp	.+716    	; 0x15636 <SS80_Command_State+0x472>
   1536a:	8e e0       	ldi	r24, 0x0E	; 14
   1536c:	96 e2       	ldi	r25, 0x26	; 38
   1536e:	0f c0       	rjmp	.+30     	; 0x1538e <SS80_Command_State+0x1ca>
   15370:	22 30       	cpi	r18, 0x02	; 2
   15372:	31 05       	cpc	r19, r1
   15374:	a9 f4       	brne	.+42     	; 0x153a0 <SS80_Command_State+0x1dc>
   15376:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   1537a:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   1537e:	31 83       	std	Z+1, r19	; 0x01
   15380:	20 83       	st	Z, r18
   15382:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15386:	85 ff       	sbrs	r24, 5
   15388:	56 c1       	rjmp	.+684    	; 0x15636 <SS80_Command_State+0x472>
   1538a:	85 ef       	ldi	r24, 0xF5	; 245
   1538c:	95 e2       	ldi	r25, 0x25	; 37
   1538e:	a0 e0       	ldi	r26, 0x00	; 0
   15390:	ed b7       	in	r30, 0x3d	; 61
   15392:	fe b7       	in	r31, 0x3e	; 62
   15394:	81 83       	std	Z+1, r24	; 0x01
   15396:	92 83       	std	Z+2, r25	; 0x02
   15398:	a3 83       	std	Z+3, r26	; 0x03
   1539a:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   1539e:	4b c1       	rjmp	.+662    	; 0x15636 <SS80_Command_State+0x472>
   153a0:	20 31       	cpi	r18, 0x10	; 16
   153a2:	31 05       	cpc	r19, r1
   153a4:	b1 f5       	brne	.+108    	; 0x15412 <SS80_Command_State+0x24e>
   153a6:	20 91 66 19 	lds	r18, 0x1966	; 0x801966 <SS80s>
   153aa:	30 91 67 19 	lds	r19, 0x1967	; 0x801967 <SS80s+0x1>
   153ae:	3d 87       	std	Y+13, r19	; 0x0d
   153b0:	2c 87       	std	Y+12, r18	; 0x0c
   153b2:	46 e0       	ldi	r20, 0x06	; 6
   153b4:	50 e0       	ldi	r21, 0x00	; 0
   153b6:	b8 01       	movw	r22, r16
   153b8:	8a ee       	ldi	r24, 0xEA	; 234
   153ba:	9c e1       	ldi	r25, 0x1C	; 28
   153bc:	0e 94 64 c0 	call	0x180c8	; 0x180c8 <B2V_MSB>
   153c0:	ec 85       	ldd	r30, Y+12	; 0x0c
   153c2:	fd 85       	ldd	r31, Y+13	; 0x0d
   153c4:	67 83       	std	Z+7, r22	; 0x07
   153c6:	70 87       	std	Z+8, r23	; 0x08
   153c8:	81 87       	std	Z+9, r24	; 0x09
   153ca:	92 87       	std	Z+10, r25	; 0x0a
   153cc:	87 01       	movw	r16, r14
   153ce:	09 5f       	subi	r16, 0xF9	; 249
   153d0:	1f 4f       	sbci	r17, 0xFF	; 255
   153d2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   153d6:	85 ff       	sbrs	r24, 5
   153d8:	2c c1       	rjmp	.+600    	; 0x15632 <SS80_Command_State+0x46e>
   153da:	20 91 66 19 	lds	r18, 0x1966	; 0x801966 <SS80s>
   153de:	30 91 67 19 	lds	r19, 0x1967	; 0x801967 <SS80s+0x1>
   153e2:	80 91 68 19 	lds	r24, 0x1968	; 0x801968 <SS80p>
   153e6:	90 91 69 19 	lds	r25, 0x1969	; 0x801969 <SS80p+0x1>
   153ea:	fc 01       	movw	r30, r24
   153ec:	a2 89       	ldd	r26, Z+18	; 0x12
   153ee:	b3 89       	ldd	r27, Z+19	; 0x13
   153f0:	f9 01       	movw	r30, r18
   153f2:	27 81       	ldd	r18, Z+7	; 0x07
   153f4:	30 85       	ldd	r19, Z+8	; 0x08
   153f6:	41 85       	ldd	r20, Z+9	; 0x09
   153f8:	52 85       	ldd	r21, Z+10	; 0x0a
   153fa:	0e 94 9b e6 	call	0x1cd36	; 0x1cd36 <__muluhisi3>
   153fe:	ed b7       	in	r30, 0x3d	; 61
   15400:	fe b7       	in	r31, 0x3e	; 62
   15402:	64 83       	std	Z+4, r22	; 0x04
   15404:	75 83       	std	Z+5, r23	; 0x05
   15406:	86 83       	std	Z+6, r24	; 0x06
   15408:	97 83       	std	Z+7, r25	; 0x07
   1540a:	21 82       	std	Z+1, r2	; 0x01
   1540c:	32 82       	std	Z+2, r3	; 0x02
   1540e:	43 82       	std	Z+3, r4	; 0x03
   15410:	2e c0       	rjmp	.+92     	; 0x1546e <SS80_Command_State+0x2aa>
   15412:	28 31       	cpi	r18, 0x18	; 24
   15414:	31 05       	cpc	r19, r1
   15416:	71 f5       	brne	.+92     	; 0x15474 <SS80_Command_State+0x2b0>
   15418:	20 91 66 19 	lds	r18, 0x1966	; 0x801966 <SS80s>
   1541c:	30 91 67 19 	lds	r19, 0x1967	; 0x801967 <SS80s+0x1>
   15420:	3d 87       	std	Y+13, r19	; 0x0d
   15422:	2c 87       	std	Y+12, r18	; 0x0c
   15424:	44 e0       	ldi	r20, 0x04	; 4
   15426:	50 e0       	ldi	r21, 0x00	; 0
   15428:	b8 01       	movw	r22, r16
   1542a:	8a ee       	ldi	r24, 0xEA	; 234
   1542c:	9c e1       	ldi	r25, 0x1C	; 28
   1542e:	0e 94 64 c0 	call	0x180c8	; 0x180c8 <B2V_MSB>
   15432:	ec 85       	ldd	r30, Y+12	; 0x0c
   15434:	fd 85       	ldd	r31, Y+13	; 0x0d
   15436:	63 87       	std	Z+11, r22	; 0x0b
   15438:	74 87       	std	Z+12, r23	; 0x0c
   1543a:	85 87       	std	Z+13, r24	; 0x0d
   1543c:	96 87       	std	Z+14, r25	; 0x0e
   1543e:	87 01       	movw	r16, r14
   15440:	0b 5f       	subi	r16, 0xFB	; 251
   15442:	1f 4f       	sbci	r17, 0xFF	; 255
   15444:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15448:	85 ff       	sbrs	r24, 5
   1544a:	f3 c0       	rjmp	.+486    	; 0x15632 <SS80_Command_State+0x46e>
   1544c:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15450:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15454:	83 85       	ldd	r24, Z+11	; 0x0b
   15456:	94 85       	ldd	r25, Z+12	; 0x0c
   15458:	a5 85       	ldd	r26, Z+13	; 0x0d
   1545a:	b6 85       	ldd	r27, Z+14	; 0x0e
   1545c:	ed b7       	in	r30, 0x3d	; 61
   1545e:	fe b7       	in	r31, 0x3e	; 62
   15460:	84 83       	std	Z+4, r24	; 0x04
   15462:	95 83       	std	Z+5, r25	; 0x05
   15464:	a6 83       	std	Z+6, r26	; 0x06
   15466:	b7 83       	std	Z+7, r27	; 0x07
   15468:	a1 82       	std	Z+1, r10	; 0x01
   1546a:	b2 82       	std	Z+2, r11	; 0x02
   1546c:	c3 82       	std	Z+3, r12	; 0x03
   1546e:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   15472:	df c0       	rjmp	.+446    	; 0x15632 <SS80_Command_State+0x46e>
   15474:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15478:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1547c:	24 33       	cpi	r18, 0x34	; 52
   1547e:	31 05       	cpc	r19, r1
   15480:	41 f4       	brne	.+16     	; 0x15492 <SS80_Command_State+0x2ce>
   15482:	85 ff       	sbrs	r24, 5
   15484:	d6 c0       	rjmp	.+428    	; 0x15632 <SS80_Command_State+0x46e>
   15486:	ed b7       	in	r30, 0x3d	; 61
   15488:	fe b7       	in	r31, 0x3e	; 62
   1548a:	61 82       	std	Z+1, r6	; 0x01
   1548c:	72 82       	std	Z+2, r7	; 0x02
   1548e:	83 82       	std	Z+3, r8	; 0x03
   15490:	2b c0       	rjmp	.+86     	; 0x154e8 <SS80_Command_State+0x324>
   15492:	29 33       	cpi	r18, 0x39	; 57
   15494:	31 05       	cpc	r19, r1
   15496:	49 f4       	brne	.+18     	; 0x154aa <SS80_Command_State+0x2e6>
   15498:	87 01       	movw	r16, r14
   1549a:	0d 5f       	subi	r16, 0xFD	; 253
   1549c:	1f 4f       	sbci	r17, 0xFF	; 255
   1549e:	85 ff       	sbrs	r24, 5
   154a0:	c8 c0       	rjmp	.+400    	; 0x15632 <SS80_Command_State+0x46e>
   154a2:	2c 89       	ldd	r18, Y+20	; 0x14
   154a4:	3d 89       	ldd	r19, Y+21	; 0x15
   154a6:	4e 89       	ldd	r20, Y+22	; 0x16
   154a8:	1a c0       	rjmp	.+52     	; 0x154de <SS80_Command_State+0x31a>
   154aa:	2b 33       	cpi	r18, 0x3B	; 59
   154ac:	31 05       	cpc	r19, r1
   154ae:	49 f4       	brne	.+18     	; 0x154c2 <SS80_Command_State+0x2fe>
   154b0:	87 01       	movw	r16, r14
   154b2:	0e 5f       	subi	r16, 0xFE	; 254
   154b4:	1f 4f       	sbci	r17, 0xFF	; 255
   154b6:	85 ff       	sbrs	r24, 5
   154b8:	bc c0       	rjmp	.+376    	; 0x15632 <SS80_Command_State+0x46e>
   154ba:	29 89       	ldd	r18, Y+17	; 0x11
   154bc:	3a 89       	ldd	r19, Y+18	; 0x12
   154be:	4b 89       	ldd	r20, Y+19	; 0x13
   154c0:	0e c0       	rjmp	.+28     	; 0x154de <SS80_Command_State+0x31a>
   154c2:	28 34       	cpi	r18, 0x48	; 72
   154c4:	31 05       	cpc	r19, r1
   154c6:	99 f4       	brne	.+38     	; 0x154ee <SS80_Command_State+0x32a>
   154c8:	87 01       	movw	r16, r14
   154ca:	0e 5f       	subi	r16, 0xFE	; 254
   154cc:	1f 4f       	sbci	r17, 0xFF	; 255
   154ce:	80 73       	andi	r24, 0x30	; 48
   154d0:	99 27       	eor	r25, r25
   154d2:	89 2b       	or	r24, r25
   154d4:	09 f4       	brne	.+2      	; 0x154d8 <SS80_Command_State+0x314>
   154d6:	ad c0       	rjmp	.+346    	; 0x15632 <SS80_Command_State+0x46e>
   154d8:	2e 85       	ldd	r18, Y+14	; 0x0e
   154da:	3f 85       	ldd	r19, Y+15	; 0x0f
   154dc:	48 89       	ldd	r20, Y+16	; 0x10
   154de:	ed b7       	in	r30, 0x3d	; 61
   154e0:	fe b7       	in	r31, 0x3e	; 62
   154e2:	21 83       	std	Z+1, r18	; 0x01
   154e4:	32 83       	std	Z+2, r19	; 0x02
   154e6:	43 83       	std	Z+3, r20	; 0x03
   154e8:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   154ec:	a2 c0       	rjmp	.+324    	; 0x15632 <SS80_Command_State+0x46e>
   154ee:	24 30       	cpi	r18, 0x04	; 4
   154f0:	31 05       	cpc	r19, r1
   154f2:	41 f4       	brne	.+16     	; 0x15504 <SS80_Command_State+0x340>
   154f4:	80 73       	andi	r24, 0x30	; 48
   154f6:	99 27       	eor	r25, r25
   154f8:	89 2b       	or	r24, r25
   154fa:	09 f4       	brne	.+2      	; 0x154fe <SS80_Command_State+0x33a>
   154fc:	9c c0       	rjmp	.+312    	; 0x15636 <SS80_Command_State+0x472>
   154fe:	88 e3       	ldi	r24, 0x38	; 56
   15500:	95 e2       	ldi	r25, 0x25	; 37
   15502:	45 cf       	rjmp	.-374    	; 0x1538e <SS80_Command_State+0x1ca>
   15504:	2e 30       	cpi	r18, 0x0E	; 14
   15506:	31 05       	cpc	r19, r1
   15508:	29 f4       	brne	.+10     	; 0x15514 <SS80_Command_State+0x350>
   1550a:	85 ff       	sbrs	r24, 5
   1550c:	94 c0       	rjmp	.+296    	; 0x15636 <SS80_Command_State+0x472>
   1550e:	82 e2       	ldi	r24, 0x22	; 34
   15510:	95 e2       	ldi	r25, 0x25	; 37
   15512:	3d cf       	rjmp	.-390    	; 0x1538e <SS80_Command_State+0x1ca>
   15514:	2f 30       	cpi	r18, 0x0F	; 15
   15516:	31 05       	cpc	r19, r1
   15518:	29 f4       	brne	.+10     	; 0x15524 <SS80_Command_State+0x360>
   1551a:	85 ff       	sbrs	r24, 5
   1551c:	8c c0       	rjmp	.+280    	; 0x15636 <SS80_Command_State+0x472>
   1551e:	85 e0       	ldi	r24, 0x05	; 5
   15520:	95 e2       	ldi	r25, 0x25	; 37
   15522:	35 cf       	rjmp	.-406    	; 0x1538e <SS80_Command_State+0x1ca>
   15524:	21 33       	cpi	r18, 0x31	; 49
   15526:	31 05       	cpc	r19, r1
   15528:	59 f4       	brne	.+22     	; 0x15540 <SS80_Command_State+0x37c>
   1552a:	87 01       	movw	r16, r14
   1552c:	0d 5f       	subi	r16, 0xFD	; 253
   1552e:	1f 4f       	sbci	r17, 0xFF	; 255
   15530:	80 73       	andi	r24, 0x30	; 48
   15532:	99 27       	eor	r25, r25
   15534:	89 2b       	or	r24, r25
   15536:	09 f4       	brne	.+2      	; 0x1553a <SS80_Command_State+0x376>
   15538:	7e c0       	rjmp	.+252    	; 0x15636 <SS80_Command_State+0x472>
   1553a:	89 ee       	ldi	r24, 0xE9	; 233
   1553c:	94 e2       	ldi	r25, 0x24	; 36
   1553e:	27 cf       	rjmp	.-434    	; 0x1538e <SS80_Command_State+0x1ca>
   15540:	25 33       	cpi	r18, 0x35	; 53
   15542:	31 05       	cpc	r19, r1
   15544:	69 f4       	brne	.+26     	; 0x15560 <SS80_Command_State+0x39c>
   15546:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   1554a:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   1554e:	24 e0       	ldi	r18, 0x04	; 4
   15550:	30 e0       	ldi	r19, 0x00	; 0
   15552:	31 83       	std	Z+1, r19	; 0x01
   15554:	20 83       	st	Z, r18
   15556:	85 ff       	sbrs	r24, 5
   15558:	6e c0       	rjmp	.+220    	; 0x15636 <SS80_Command_State+0x472>
   1555a:	88 ed       	ldi	r24, 0xD8	; 216
   1555c:	94 e2       	ldi	r25, 0x24	; 36
   1555e:	17 cf       	rjmp	.-466    	; 0x1538e <SS80_Command_State+0x1ca>
   15560:	27 33       	cpi	r18, 0x37	; 55
   15562:	31 05       	cpc	r19, r1
   15564:	59 f4       	brne	.+22     	; 0x1557c <SS80_Command_State+0x3b8>
   15566:	87 01       	movw	r16, r14
   15568:	0d 5f       	subi	r16, 0xFD	; 253
   1556a:	1f 4f       	sbci	r17, 0xFF	; 255
   1556c:	80 73       	andi	r24, 0x30	; 48
   1556e:	99 27       	eor	r25, r25
   15570:	89 2b       	or	r24, r25
   15572:	09 f4       	brne	.+2      	; 0x15576 <SS80_Command_State+0x3b2>
   15574:	60 c0       	rjmp	.+192    	; 0x15636 <SS80_Command_State+0x472>
   15576:	8a eb       	ldi	r24, 0xBA	; 186
   15578:	94 e2       	ldi	r25, 0x24	; 36
   1557a:	09 cf       	rjmp	.-494    	; 0x1538e <SS80_Command_State+0x1ca>
   1557c:	2e 33       	cpi	r18, 0x3E	; 62
   1557e:	31 05       	cpc	r19, r1
   15580:	c1 f4       	brne	.+48     	; 0x155b2 <SS80_Command_State+0x3ee>
   15582:	80 73       	andi	r24, 0x30	; 48
   15584:	99 27       	eor	r25, r25
   15586:	89 2b       	or	r24, r25
   15588:	81 f0       	breq	.+32     	; 0x155aa <SS80_Command_State+0x3e6>
   1558a:	8b e9       	ldi	r24, 0x9B	; 155
   1558c:	94 e2       	ldi	r25, 0x24	; 36
   1558e:	a0 e0       	ldi	r26, 0x00	; 0
   15590:	ed b7       	in	r30, 0x3d	; 61
   15592:	fe b7       	in	r31, 0x3e	; 62
   15594:	81 83       	std	Z+1, r24	; 0x01
   15596:	92 83       	std	Z+2, r25	; 0x02
   15598:	a3 83       	std	Z+3, r26	; 0x03
   1559a:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   1559e:	6d e6       	ldi	r22, 0x6D	; 109
   155a0:	70 e1       	ldi	r23, 0x10	; 16
   155a2:	c8 01       	movw	r24, r16
   155a4:	86 51       	subi	r24, 0x16	; 22
   155a6:	93 4e       	sbci	r25, 0xE3	; 227
   155a8:	69 dc       	rcall	.-1838   	; 0x14e7c <SS80_display_extended_status>
   155aa:	87 01       	movw	r16, r14
   155ac:	07 5f       	subi	r16, 0xF7	; 247
   155ae:	1f 4f       	sbci	r17, 0xFF	; 255
   155b0:	42 c0       	rjmp	.+132    	; 0x15636 <SS80_Command_State+0x472>
   155b2:	2c 34       	cpi	r18, 0x4C	; 76
   155b4:	31 05       	cpc	r19, r1
   155b6:	39 f4       	brne	.+14     	; 0x155c6 <SS80_Command_State+0x402>
   155b8:	80 73       	andi	r24, 0x30	; 48
   155ba:	99 27       	eor	r25, r25
   155bc:	89 2b       	or	r24, r25
   155be:	d9 f1       	breq	.+118    	; 0x15636 <SS80_Command_State+0x472>
   155c0:	80 e8       	ldi	r24, 0x80	; 128
   155c2:	94 e2       	ldi	r25, 0x24	; 36
   155c4:	e4 ce       	rjmp	.-568    	; 0x1538e <SS80_Command_State+0x1ca>
   155c6:	2d 34       	cpi	r18, 0x4D	; 77
   155c8:	31 05       	cpc	r19, r1
   155ca:	39 f4       	brne	.+14     	; 0x155da <SS80_Command_State+0x416>
   155cc:	80 73       	andi	r24, 0x30	; 48
   155ce:	99 27       	eor	r25, r25
   155d0:	89 2b       	or	r24, r25
   155d2:	89 f1       	breq	.+98     	; 0x15636 <SS80_Command_State+0x472>
   155d4:	87 e6       	ldi	r24, 0x67	; 103
   155d6:	94 e2       	ldi	r25, 0x24	; 36
   155d8:	da ce       	rjmp	.-588    	; 0x1538e <SS80_Command_State+0x1ca>
   155da:	2d 30       	cpi	r18, 0x0D	; 13
   155dc:	31 05       	cpc	r19, r1
   155de:	69 f4       	brne	.+26     	; 0x155fa <SS80_Command_State+0x436>
   155e0:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   155e4:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   155e8:	23 e0       	ldi	r18, 0x03	; 3
   155ea:	30 e0       	ldi	r19, 0x00	; 0
   155ec:	31 83       	std	Z+1, r19	; 0x01
   155ee:	20 83       	st	Z, r18
   155f0:	85 ff       	sbrs	r24, 5
   155f2:	21 c0       	rjmp	.+66     	; 0x15636 <SS80_Command_State+0x472>
   155f4:	80 e5       	ldi	r24, 0x50	; 80
   155f6:	94 e2       	ldi	r25, 0x24	; 36
   155f8:	ca ce       	rjmp	.-620    	; 0x1538e <SS80_Command_State+0x1ca>
   155fa:	23 33       	cpi	r18, 0x33	; 51
   155fc:	31 05       	cpc	r19, r1
   155fe:	51 f4       	brne	.+20     	; 0x15614 <SS80_Command_State+0x450>
   15600:	87 01       	movw	r16, r14
   15602:	0c 5f       	subi	r16, 0xFC	; 252
   15604:	1f 4f       	sbci	r17, 0xFF	; 255
   15606:	80 73       	andi	r24, 0x30	; 48
   15608:	99 27       	eor	r25, r25
   1560a:	89 2b       	or	r24, r25
   1560c:	a1 f0       	breq	.+40     	; 0x15636 <SS80_Command_State+0x472>
   1560e:	8d e2       	ldi	r24, 0x2D	; 45
   15610:	94 e2       	ldi	r25, 0x24	; 36
   15612:	bd ce       	rjmp	.-646    	; 0x1538e <SS80_Command_State+0x1ca>
   15614:	80 ff       	sbrs	r24, 0
   15616:	28 c0       	rjmp	.+80     	; 0x15668 <SS80_Command_State+0x4a4>
   15618:	ed b7       	in	r30, 0x3d	; 61
   1561a:	fe b7       	in	r31, 0x3e	; 62
   1561c:	35 83       	std	Z+5, r19	; 0x05
   1561e:	24 83       	std	Z+4, r18	; 0x04
   15620:	8d e0       	ldi	r24, 0x0D	; 13
   15622:	94 e2       	ldi	r25, 0x24	; 36
   15624:	a0 e0       	ldi	r26, 0x00	; 0
   15626:	81 83       	std	Z+1, r24	; 0x01
   15628:	92 83       	std	Z+2, r25	; 0x02
   1562a:	a3 83       	std	Z+3, r26	; 0x03
   1562c:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   15630:	02 c0       	rjmp	.+4      	; 0x15636 <SS80_Command_State+0x472>
   15632:	78 01       	movw	r14, r16
   15634:	43 ce       	rjmp	.-890    	; 0x152bc <SS80_Command_State+0xf8>
   15636:	8a 85       	ldd	r24, Y+10	; 0x0a
   15638:	9b 85       	ldd	r25, Y+11	; 0x0b
   1563a:	08 17       	cp	r16, r24
   1563c:	19 07       	cpc	r17, r25
   1563e:	a1 f0       	breq	.+40     	; 0x15668 <SS80_Command_State+0x4a4>
   15640:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15644:	80 ff       	sbrs	r24, 0
   15646:	10 c0       	rjmp	.+32     	; 0x15668 <SS80_Command_State+0x4a4>
   15648:	2a 85       	ldd	r18, Y+10	; 0x0a
   1564a:	3b 85       	ldd	r19, Y+11	; 0x0b
   1564c:	ed b7       	in	r30, 0x3d	; 61
   1564e:	fe b7       	in	r31, 0x3e	; 62
   15650:	37 83       	std	Z+7, r19	; 0x07
   15652:	26 83       	std	Z+6, r18	; 0x06
   15654:	15 83       	std	Z+5, r17	; 0x05
   15656:	04 83       	std	Z+4, r16	; 0x04
   15658:	85 ed       	ldi	r24, 0xD5	; 213
   1565a:	93 e2       	ldi	r25, 0x23	; 35
   1565c:	a0 e0       	ldi	r26, 0x00	; 0
   1565e:	81 83       	std	Z+1, r24	; 0x01
   15660:	92 83       	std	Z+2, r25	; 0x02
   15662:	a3 83       	std	Z+3, r26	; 0x03
   15664:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   15668:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   1566c:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   15670:	81 81       	ldd	r24, Z+1	; 0x01
   15672:	90 e0       	ldi	r25, 0x00	; 0
   15674:	0e 94 2c 86 	call	0x10c58	; 0x10c58 <gpib_enable_PPR>
   15678:	88 85       	ldd	r24, Y+8	; 0x08
   1567a:	99 85       	ldd	r25, Y+9	; 0x09
   1567c:	88 27       	eor	r24, r24
   1567e:	90 7d       	andi	r25, 0xD0	; 208
   15680:	02 c0       	rjmp	.+4      	; 0x15686 <SS80_Command_State+0x4c2>
   15682:	80 e0       	ldi	r24, 0x00	; 0
   15684:	90 e0       	ldi	r25, 0x00	; 0
   15686:	66 96       	adiw	r28, 0x16	; 22
   15688:	0f b6       	in	r0, 0x3f	; 63
   1568a:	f8 94       	cli
   1568c:	de bf       	out	0x3e, r29	; 62
   1568e:	0f be       	out	0x3f, r0	; 63
   15690:	cd bf       	out	0x3d, r28	; 61
   15692:	df 91       	pop	r29
   15694:	cf 91       	pop	r28
   15696:	1f 91       	pop	r17
   15698:	0f 91       	pop	r16
   1569a:	ff 90       	pop	r15
   1569c:	ef 90       	pop	r14
   1569e:	cf 90       	pop	r12
   156a0:	bf 90       	pop	r11
   156a2:	af 90       	pop	r10
   156a4:	8f 90       	pop	r8
   156a6:	7f 90       	pop	r7
   156a8:	6f 90       	pop	r6
   156aa:	4f 90       	pop	r4
   156ac:	3f 90       	pop	r3
   156ae:	2f 90       	pop	r2
   156b0:	08 95       	ret

000156b2 <SS80_cmd_seek>:
   156b2:	a7 e0       	ldi	r26, 0x07	; 7
   156b4:	b0 e0       	ldi	r27, 0x00	; 0
   156b6:	ef e5       	ldi	r30, 0x5F	; 95
   156b8:	fb ea       	ldi	r31, 0xAB	; 171
   156ba:	0c 94 bd e6 	jmp	0x1cd7a	; 0x1cd7a <__prologue_saves__+0x4>
   156be:	c0 91 66 19 	lds	r28, 0x1966	; 0x801966 <SS80s>
   156c2:	d0 91 67 19 	lds	r29, 0x1967	; 0x801967 <SS80s+0x1>
   156c6:	8f 80       	ldd	r8, Y+7	; 0x07
   156c8:	98 84       	ldd	r9, Y+8	; 0x08
   156ca:	a9 84       	ldd	r10, Y+9	; 0x09
   156cc:	ba 84       	ldd	r11, Y+10	; 0x0a
   156ce:	00 91 68 19 	lds	r16, 0x1968	; 0x801968 <SS80p>
   156d2:	10 91 69 19 	lds	r17, 0x1969	; 0x801969 <SS80p+0x1>
   156d6:	f8 01       	movw	r30, r16
   156d8:	c2 88       	ldd	r12, Z+18	; 0x12
   156da:	d3 88       	ldd	r13, Z+19	; 0x13
   156dc:	e1 2c       	mov	r14, r1
   156de:	f1 2c       	mov	r15, r1
   156e0:	6b 85       	ldd	r22, Y+11	; 0x0b
   156e2:	7c 85       	ldd	r23, Y+12	; 0x0c
   156e4:	8d 85       	ldd	r24, Y+13	; 0x0d
   156e6:	9e 85       	ldd	r25, Y+14	; 0x0e
   156e8:	a7 01       	movw	r20, r14
   156ea:	96 01       	movw	r18, r12
   156ec:	0e 94 4e e6 	call	0x1cc9c	; 0x1cc9c <__udivmodsi4>
   156f0:	da 01       	movw	r26, r20
   156f2:	c9 01       	movw	r24, r18
   156f4:	88 0d       	add	r24, r8
   156f6:	99 1d       	adc	r25, r9
   156f8:	aa 1d       	adc	r26, r10
   156fa:	bb 1d       	adc	r27, r11
   156fc:	f8 01       	movw	r30, r16
   156fe:	40 a4       	ldd	r4, Z+40	; 0x28
   15700:	51 a4       	ldd	r5, Z+41	; 0x29
   15702:	62 a4       	ldd	r6, Z+42	; 0x2a
   15704:	73 a4       	ldd	r7, Z+43	; 0x2b
   15706:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   1570a:	50 91 b7 01 	lds	r21, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1570e:	48 16       	cp	r4, r24
   15710:	59 06       	cpc	r5, r25
   15712:	6a 06       	cpc	r6, r26
   15714:	7b 06       	cpc	r7, r27
   15716:	f0 f4       	brcc	.+60     	; 0x15754 <SS80_cmd_seek+0xa2>
   15718:	81 e0       	ldi	r24, 0x01	; 1
   1571a:	8a 83       	std	Y+2, r24	; 0x02
   1571c:	8b 81       	ldd	r24, Y+3	; 0x03
   1571e:	9c 81       	ldd	r25, Y+4	; 0x04
   15720:	84 60       	ori	r24, 0x04	; 4
   15722:	9c 83       	std	Y+4, r25	; 0x04
   15724:	8b 83       	std	Y+3, r24	; 0x03
   15726:	40 ff       	sbrs	r20, 0
   15728:	31 c0       	rjmp	.+98     	; 0x1578c <SS80_cmd_seek+0xda>
   1572a:	a2 89       	ldd	r26, Z+18	; 0x12
   1572c:	b3 89       	ldd	r27, Z+19	; 0x13
   1572e:	a5 01       	movw	r20, r10
   15730:	94 01       	movw	r18, r8
   15732:	0e 94 9b e6 	call	0x1cd36	; 0x1cd36 <__muluhisi3>
   15736:	ed b7       	in	r30, 0x3d	; 61
   15738:	fe b7       	in	r31, 0x3e	; 62
   1573a:	64 83       	std	Z+4, r22	; 0x04
   1573c:	75 83       	std	Z+5, r23	; 0x05
   1573e:	86 83       	std	Z+6, r24	; 0x06
   15740:	97 83       	std	Z+7, r25	; 0x07
   15742:	82 e9       	ldi	r24, 0x92	; 146
   15744:	92 e2       	ldi	r25, 0x22	; 34
   15746:	a0 e0       	ldi	r26, 0x00	; 0
   15748:	81 83       	std	Z+1, r24	; 0x01
   1574a:	92 83       	std	Z+2, r25	; 0x02
   1574c:	a3 83       	std	Z+3, r26	; 0x03
   1574e:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   15752:	1c c0       	rjmp	.+56     	; 0x1578c <SS80_cmd_seek+0xda>
   15754:	ca 01       	movw	r24, r20
   15756:	80 72       	andi	r24, 0x20	; 32
   15758:	99 27       	eor	r25, r25
   1575a:	45 ff       	sbrs	r20, 5
   1575c:	19 c0       	rjmp	.+50     	; 0x15790 <SS80_cmd_seek+0xde>
   1575e:	a5 01       	movw	r20, r10
   15760:	94 01       	movw	r18, r8
   15762:	c7 01       	movw	r24, r14
   15764:	b6 01       	movw	r22, r12
   15766:	0e 94 0c e6 	call	0x1cc18	; 0x1cc18 <__mulsi3>
   1576a:	ed b7       	in	r30, 0x3d	; 61
   1576c:	fe b7       	in	r31, 0x3e	; 62
   1576e:	64 83       	std	Z+4, r22	; 0x04
   15770:	75 83       	std	Z+5, r23	; 0x05
   15772:	86 83       	std	Z+6, r24	; 0x06
   15774:	97 83       	std	Z+7, r25	; 0x07
   15776:	8e e7       	ldi	r24, 0x7E	; 126
   15778:	92 e2       	ldi	r25, 0x22	; 34
   1577a:	a0 e0       	ldi	r26, 0x00	; 0
   1577c:	81 83       	std	Z+1, r24	; 0x01
   1577e:	92 83       	std	Z+2, r25	; 0x02
   15780:	a3 83       	std	Z+3, r26	; 0x03
   15782:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   15786:	80 e0       	ldi	r24, 0x00	; 0
   15788:	90 e0       	ldi	r25, 0x00	; 0
   1578a:	02 c0       	rjmp	.+4      	; 0x15790 <SS80_cmd_seek+0xde>
   1578c:	81 e0       	ldi	r24, 0x01	; 1
   1578e:	90 e0       	ldi	r25, 0x00	; 0
   15790:	cd b7       	in	r28, 0x3d	; 61
   15792:	de b7       	in	r29, 0x3e	; 62
   15794:	27 96       	adiw	r28, 0x07	; 7
   15796:	e0 e1       	ldi	r30, 0x10	; 16
   15798:	0c 94 d9 e6 	jmp	0x1cdb2	; 0x1cdb2 <__epilogue_restores__+0x4>

0001579c <SS80_locate_and_write>:
   1579c:	a3 e1       	ldi	r26, 0x13	; 19
   1579e:	b0 e0       	ldi	r27, 0x00	; 0
   157a0:	e4 ed       	ldi	r30, 0xD4	; 212
   157a2:	fb ea       	ldi	r31, 0xAB	; 171
   157a4:	0c 94 bb e6 	jmp	0x1cd76	; 0x1cd76 <__prologue_saves__>
   157a8:	00 91 66 19 	lds	r16, 0x1966	; 0x801966 <SS80s>
   157ac:	10 91 67 19 	lds	r17, 0x1967	; 0x801967 <SS80s+0x1>
   157b0:	80 91 68 19 	lds	r24, 0x1968	; 0x801968 <SS80p>
   157b4:	90 91 69 19 	lds	r25, 0x1969	; 0x801969 <SS80p+0x1>
   157b8:	fc 01       	movw	r30, r24
   157ba:	a2 89       	ldd	r26, Z+18	; 0x12
   157bc:	b3 89       	ldd	r27, Z+19	; 0x13
   157be:	f8 01       	movw	r30, r16
   157c0:	27 81       	ldd	r18, Z+7	; 0x07
   157c2:	30 85       	ldd	r19, Z+8	; 0x08
   157c4:	41 85       	ldd	r20, Z+9	; 0x09
   157c6:	52 85       	ldd	r21, Z+10	; 0x0a
   157c8:	0e 94 9b e6 	call	0x1cd36	; 0x1cd36 <__muluhisi3>
   157cc:	4b 01       	movw	r8, r22
   157ce:	5c 01       	movw	r10, r24
   157d0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   157d4:	85 ff       	sbrs	r24, 5
   157d6:	16 c0       	rjmp	.+44     	; 0x15804 <SS80_locate_and_write+0x68>
   157d8:	83 85       	ldd	r24, Z+11	; 0x0b
   157da:	94 85       	ldd	r25, Z+12	; 0x0c
   157dc:	a5 85       	ldd	r26, Z+13	; 0x0d
   157de:	b6 85       	ldd	r27, Z+14	; 0x0e
   157e0:	ed b7       	in	r30, 0x3d	; 61
   157e2:	fe b7       	in	r31, 0x3e	; 62
   157e4:	80 87       	std	Z+8, r24	; 0x08
   157e6:	91 87       	std	Z+9, r25	; 0x09
   157e8:	a2 87       	std	Z+10, r26	; 0x0a
   157ea:	b3 87       	std	Z+11, r27	; 0x0b
   157ec:	84 82       	std	Z+4, r8	; 0x04
   157ee:	95 82       	std	Z+5, r9	; 0x05
   157f0:	a6 82       	std	Z+6, r10	; 0x06
   157f2:	b7 82       	std	Z+7, r11	; 0x07
   157f4:	85 e1       	ldi	r24, 0x15	; 21
   157f6:	98 e2       	ldi	r25, 0x28	; 40
   157f8:	a0 e0       	ldi	r26, 0x00	; 0
   157fa:	81 83       	std	Z+1, r24	; 0x01
   157fc:	92 83       	std	Z+2, r25	; 0x02
   157fe:	a3 83       	std	Z+3, r26	; 0x03
   15800:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   15804:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15808:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   1580c:	12 82       	std	Z+2, r1	; 0x02
   1580e:	54 98       	cbi	0x0a, 4	; 10
   15810:	4c 99       	sbic	0x09, 4	; 9
   15812:	03 c0       	rjmp	.+6      	; 0x1581a <SS80_locate_and_write+0x7e>
   15814:	80 e0       	ldi	r24, 0x00	; 0
   15816:	90 e1       	ldi	r25, 0x10	; 16
   15818:	4f c1       	rjmp	.+670    	; 0x15ab8 <SS80_locate_and_write+0x31c>
   1581a:	4b df       	rcall	.-362    	; 0x156b2 <SS80_cmd_seek>
   1581c:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15820:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15824:	89 2b       	or	r24, r25
   15826:	41 f0       	breq	.+16     	; 0x15838 <SS80_locate_and_write+0x9c>
   15828:	83 81       	ldd	r24, Z+3	; 0x03
   1582a:	94 81       	ldd	r25, Z+4	; 0x04
   1582c:	82 60       	ori	r24, 0x02	; 2
   1582e:	94 83       	std	Z+4, r25	; 0x04
   15830:	83 83       	std	Z+3, r24	; 0x03
   15832:	01 e0       	ldi	r16, 0x01	; 1
   15834:	10 e0       	ldi	r17, 0x00	; 0
   15836:	02 c0       	rjmp	.+4      	; 0x1583c <SS80_locate_and_write+0xa0>
   15838:	00 e0       	ldi	r16, 0x00	; 0
   1583a:	10 e0       	ldi	r17, 0x00	; 0
   1583c:	23 84       	ldd	r2, Z+11	; 0x0b
   1583e:	34 84       	ldd	r3, Z+12	; 0x0c
   15840:	1d 86       	std	Y+13, r1	; 0x0d
   15842:	1c 86       	std	Y+12, r1	; 0x0c
   15844:	41 2c       	mov	r4, r1
   15846:	51 2c       	mov	r5, r1
   15848:	32 01       	movw	r6, r4
   1584a:	88 ec       	ldi	r24, 0xC8	; 200
   1584c:	97 e2       	ldi	r25, 0x27	; 39
   1584e:	9c 01       	movw	r18, r24
   15850:	40 e0       	ldi	r20, 0x00	; 0
   15852:	2e 87       	std	Y+14, r18	; 0x0e
   15854:	3f 87       	std	Y+15, r19	; 0x0f
   15856:	48 8b       	std	Y+16, r20	; 0x10
   15858:	8e ee       	ldi	r24, 0xEE	; 238
   1585a:	97 e2       	ldi	r25, 0x27	; 39
   1585c:	9c 01       	movw	r18, r24
   1585e:	40 e0       	ldi	r20, 0x00	; 0
   15860:	29 8b       	std	Y+17, r18	; 0x11
   15862:	3a 8b       	std	Y+18, r19	; 0x12
   15864:	4b 8b       	std	Y+19, r20	; 0x13
   15866:	12 14       	cp	r1, r2
   15868:	13 04       	cpc	r1, r3
   1586a:	0c f0       	brlt	.+2      	; 0x1586e <SS80_locate_and_write+0xd2>
   1586c:	f5 c0       	rjmp	.+490    	; 0x15a58 <SS80_locate_and_write+0x2bc>
   1586e:	54 98       	cbi	0x0a, 4	; 10
   15870:	4c 9b       	sbis	0x09, 4	; 9
   15872:	d0 cf       	rjmp	.-96     	; 0x15814 <SS80_locate_and_write+0x78>
   15874:	71 01       	movw	r14, r2
   15876:	31 e0       	ldi	r19, 0x01	; 1
   15878:	23 16       	cp	r2, r19
   1587a:	33 06       	cpc	r3, r19
   1587c:	1c f0       	brlt	.+6      	; 0x15884 <SS80_locate_and_write+0xe8>
   1587e:	e1 2c       	mov	r14, r1
   15880:	ff 24       	eor	r15, r15
   15882:	f3 94       	inc	r15
   15884:	ea ee       	ldi	r30, 0xEA	; 234
   15886:	fc e1       	ldi	r31, 0x1C	; 28
   15888:	20 e0       	ldi	r18, 0x00	; 0
   1588a:	32 e0       	ldi	r19, 0x02	; 2
   1588c:	11 92       	st	Z+, r1
   1588e:	21 50       	subi	r18, 0x01	; 1
   15890:	30 40       	sbci	r19, 0x00	; 0
   15892:	e1 f7       	brne	.-8      	; 0x1588c <SS80_locate_and_write+0xf0>
   15894:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15898:	87 fd       	sbrc	r24, 7
   1589a:	0e 94 52 85 	call	0x10aa4	; 0x10aa4 <gpib_timer_elapsed_begin>
   1589e:	ae 01       	movw	r20, r28
   158a0:	44 5f       	subi	r20, 0xF4	; 244
   158a2:	5f 4f       	sbci	r21, 0xFF	; 255
   158a4:	b7 01       	movw	r22, r14
   158a6:	8a ee       	ldi	r24, 0xEA	; 234
   158a8:	9c e1       	ldi	r25, 0x1C	; 28
   158aa:	0e 94 ba 8a 	call	0x11574	; 0x11574 <gpib_read_str>
   158ae:	6c 01       	movw	r12, r24
   158b0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   158b4:	87 ff       	sbrs	r24, 7
   158b6:	04 c0       	rjmp	.+8      	; 0x158c0 <SS80_locate_and_write+0x124>
   158b8:	89 e8       	ldi	r24, 0x89	; 137
   158ba:	90 e1       	ldi	r25, 0x10	; 16
   158bc:	0e 94 64 85 	call	0x10ac8	; 0x10ac8 <gpib_timer_elapsed_end>
   158c0:	ce 14       	cp	r12, r14
   158c2:	df 04       	cpc	r13, r15
   158c4:	39 f1       	breq	.+78     	; 0x15914 <SS80_locate_and_write+0x178>
   158c6:	8c 85       	ldd	r24, Y+12	; 0x0c
   158c8:	9d 85       	ldd	r25, Y+13	; 0x0d
   158ca:	9c 01       	movw	r18, r24
   158cc:	22 27       	eor	r18, r18
   158ce:	30 7d       	andi	r19, 0xD0	; 208
   158d0:	23 2b       	or	r18, r19
   158d2:	d1 f0       	breq	.+52     	; 0x15908 <SS80_locate_and_write+0x16c>
   158d4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   158d8:	80 ff       	sbrs	r24, 0
   158da:	0a c0       	rjmp	.+20     	; 0x158f0 <SS80_locate_and_write+0x154>
   158dc:	82 e0       	ldi	r24, 0x02	; 2
   158de:	98 e2       	ldi	r25, 0x28	; 40
   158e0:	a0 e0       	ldi	r26, 0x00	; 0
   158e2:	ed b7       	in	r30, 0x3d	; 61
   158e4:	fe b7       	in	r31, 0x3e	; 62
   158e6:	81 83       	std	Z+1, r24	; 0x01
   158e8:	92 83       	std	Z+2, r25	; 0x02
   158ea:	a3 83       	std	Z+3, r26	; 0x03
   158ec:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   158f0:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   158f4:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   158f8:	83 81       	ldd	r24, Z+3	; 0x03
   158fa:	94 81       	ldd	r25, Z+4	; 0x04
   158fc:	82 60       	ori	r24, 0x02	; 2
   158fe:	94 83       	std	Z+4, r25	; 0x04
   15900:	83 83       	std	Z+3, r24	; 0x03
   15902:	81 e0       	ldi	r24, 0x01	; 1
   15904:	82 83       	std	Z+2, r24	; 0x02
   15906:	99 c0       	rjmp	.+306    	; 0x15a3a <SS80_locate_and_write+0x29e>
   15908:	c1 14       	cp	r12, r1
   1590a:	d1 04       	cpc	r13, r1
   1590c:	09 f0       	breq	.+2      	; 0x15910 <SS80_locate_and_write+0x174>
   1590e:	d0 c0       	rjmp	.+416    	; 0x15ab0 <SS80_locate_and_write+0x314>
   15910:	90 fd       	sbrc	r25, 0
   15912:	93 c0       	rjmp	.+294    	; 0x15a3a <SS80_locate_and_write+0x29e>
   15914:	01 15       	cp	r16, r1
   15916:	11 05       	cpc	r17, r1
   15918:	09 f0       	breq	.+2      	; 0x1591c <SS80_locate_and_write+0x180>
   1591a:	84 c0       	rjmp	.+264    	; 0x15a24 <SS80_locate_and_write+0x288>
   1591c:	c1 14       	cp	r12, r1
   1591e:	d1 04       	cpc	r13, r1
   15920:	09 f4       	brne	.+2      	; 0x15924 <SS80_locate_and_write+0x188>
   15922:	82 c0       	rjmp	.+260    	; 0x15a28 <SS80_locate_and_write+0x28c>
   15924:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15928:	86 fd       	sbrc	r24, 6
   1592a:	0e 94 52 85 	call	0x10aa4	; 0x10aa4 <gpib_timer_elapsed_begin>
   1592e:	e0 90 66 19 	lds	r14, 0x1966	; 0x801966 <SS80s>
   15932:	f0 90 67 19 	lds	r15, 0x1967	; 0x801967 <SS80s+0x1>
   15936:	f3 e0       	ldi	r31, 0x03	; 3
   15938:	ef 0e       	add	r14, r31
   1593a:	f1 1c       	adc	r15, r1
   1593c:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   15940:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   15944:	86 01       	movw	r16, r12
   15946:	2a ee       	ldi	r18, 0xEA	; 234
   15948:	3c e1       	ldi	r19, 0x1C	; 28
   1594a:	b5 01       	movw	r22, r10
   1594c:	a4 01       	movw	r20, r8
   1594e:	82 81       	ldd	r24, Z+2	; 0x02
   15950:	93 81       	ldd	r25, Z+3	; 0x03
   15952:	0e 94 fb 84 	call	0x109f6	; 0x109f6 <dbf_open_write>
   15956:	7c 01       	movw	r14, r24
   15958:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1595c:	86 ff       	sbrs	r24, 6
   1595e:	04 c0       	rjmp	.+8      	; 0x15968 <SS80_locate_and_write+0x1cc>
   15960:	84 e9       	ldi	r24, 0x94	; 148
   15962:	90 e1       	ldi	r25, 0x10	; 16
   15964:	0e 94 64 85 	call	0x10ac8	; 0x10ac8 <gpib_timer_elapsed_end>
   15968:	ce 14       	cp	r12, r14
   1596a:	df 04       	cpc	r13, r15
   1596c:	39 f1       	breq	.+78     	; 0x159bc <SS80_locate_and_write+0x220>
   1596e:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15972:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15976:	83 81       	ldd	r24, Z+3	; 0x03
   15978:	94 81       	ldd	r25, Z+4	; 0x04
   1597a:	82 60       	ori	r24, 0x02	; 2
   1597c:	94 83       	std	Z+4, r25	; 0x04
   1597e:	83 83       	std	Z+3, r24	; 0x03
   15980:	0e 94 db 6f 	call	0xdfb6	; 0xdfb6 <mmc_wp_status>
   15984:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15988:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   1598c:	89 2b       	or	r24, r25
   1598e:	29 f0       	breq	.+10     	; 0x1599a <SS80_locate_and_write+0x1fe>
   15990:	83 81       	ldd	r24, Z+3	; 0x03
   15992:	94 81       	ldd	r25, Z+4	; 0x04
   15994:	88 60       	ori	r24, 0x08	; 8
   15996:	94 83       	std	Z+4, r25	; 0x04
   15998:	83 83       	std	Z+3, r24	; 0x03
   1599a:	21 e0       	ldi	r18, 0x01	; 1
   1599c:	22 83       	std	Z+2, r18	; 0x02
   1599e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   159a2:	80 ff       	sbrs	r24, 0
   159a4:	27 c0       	rjmp	.+78     	; 0x159f4 <SS80_locate_and_write+0x258>
   159a6:	89 89       	ldd	r24, Y+17	; 0x11
   159a8:	9a 89       	ldd	r25, Y+18	; 0x12
   159aa:	ab 89       	ldd	r26, Y+19	; 0x13
   159ac:	ed b7       	in	r30, 0x3d	; 61
   159ae:	fe b7       	in	r31, 0x3e	; 62
   159b0:	81 83       	std	Z+1, r24	; 0x01
   159b2:	92 83       	std	Z+2, r25	; 0x02
   159b4:	a3 83       	std	Z+3, r26	; 0x03
   159b6:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   159ba:	1c c0       	rjmp	.+56     	; 0x159f4 <SS80_locate_and_write+0x258>
   159bc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   159c0:	85 ff       	sbrs	r24, 5
   159c2:	0c c0       	rjmp	.+24     	; 0x159dc <SS80_locate_and_write+0x240>
   159c4:	ed b7       	in	r30, 0x3d	; 61
   159c6:	fe b7       	in	r31, 0x3e	; 62
   159c8:	d5 82       	std	Z+5, r13	; 0x05
   159ca:	c4 82       	std	Z+4, r12	; 0x04
   159cc:	2e 85       	ldd	r18, Y+14	; 0x0e
   159ce:	3f 85       	ldd	r19, Y+15	; 0x0f
   159d0:	48 89       	ldd	r20, Y+16	; 0x10
   159d2:	21 83       	std	Z+1, r18	; 0x01
   159d4:	32 83       	std	Z+2, r19	; 0x02
   159d6:	43 83       	std	Z+3, r20	; 0x03
   159d8:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   159dc:	c6 01       	movw	r24, r12
   159de:	0d 2c       	mov	r0, r13
   159e0:	00 0c       	add	r0, r0
   159e2:	aa 0b       	sbc	r26, r26
   159e4:	bb 0b       	sbc	r27, r27
   159e6:	88 0e       	add	r8, r24
   159e8:	99 1e       	adc	r9, r25
   159ea:	aa 1e       	adc	r10, r26
   159ec:	bb 1e       	adc	r11, r27
   159ee:	00 e0       	ldi	r16, 0x00	; 0
   159f0:	10 e0       	ldi	r17, 0x00	; 0
   159f2:	05 c0       	rjmp	.+10     	; 0x159fe <SS80_locate_and_write+0x262>
   159f4:	ec 14       	cp	r14, r12
   159f6:	fd 04       	cpc	r15, r13
   159f8:	64 f0       	brlt	.+24     	; 0x15a12 <SS80_locate_and_write+0x276>
   159fa:	01 e0       	ldi	r16, 0x01	; 1
   159fc:	10 e0       	ldi	r17, 0x00	; 0
   159fe:	c7 01       	movw	r24, r14
   15a00:	0f 2c       	mov	r0, r15
   15a02:	00 0c       	add	r0, r0
   15a04:	aa 0b       	sbc	r26, r26
   15a06:	bb 0b       	sbc	r27, r27
   15a08:	48 0e       	add	r4, r24
   15a0a:	59 1e       	adc	r5, r25
   15a0c:	6a 1e       	adc	r6, r26
   15a0e:	7b 1e       	adc	r7, r27
   15a10:	0b c0       	rjmp	.+22     	; 0x15a28 <SS80_locate_and_write+0x28c>
   15a12:	c6 01       	movw	r24, r12
   15a14:	0d 2c       	mov	r0, r13
   15a16:	00 0c       	add	r0, r0
   15a18:	aa 0b       	sbc	r26, r26
   15a1a:	bb 0b       	sbc	r27, r27
   15a1c:	48 0e       	add	r4, r24
   15a1e:	59 1e       	adc	r5, r25
   15a20:	6a 1e       	adc	r6, r26
   15a22:	7b 1e       	adc	r7, r27
   15a24:	01 e0       	ldi	r16, 0x01	; 1
   15a26:	10 e0       	ldi	r17, 0x00	; 0
   15a28:	2c 18       	sub	r2, r12
   15a2a:	3d 08       	sbc	r3, r13
   15a2c:	8c 85       	ldd	r24, Y+12	; 0x0c
   15a2e:	9d 85       	ldd	r25, Y+13	; 0x0d
   15a30:	90 ff       	sbrs	r25, 0
   15a32:	19 cf       	rjmp	.-462    	; 0x15866 <SS80_locate_and_write+0xca>
   15a34:	12 14       	cp	r1, r2
   15a36:	13 04       	cpc	r1, r3
   15a38:	7c f4       	brge	.+30     	; 0x15a58 <SS80_locate_and_write+0x2bc>
   15a3a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15a3e:	80 ff       	sbrs	r24, 0
   15a40:	1d c0       	rjmp	.+58     	; 0x15a7c <SS80_locate_and_write+0x2e0>
   15a42:	80 ea       	ldi	r24, 0xA0	; 160
   15a44:	97 e2       	ldi	r25, 0x27	; 39
   15a46:	a0 e0       	ldi	r26, 0x00	; 0
   15a48:	ed b7       	in	r30, 0x3d	; 61
   15a4a:	fe b7       	in	r31, 0x3e	; 62
   15a4c:	81 83       	std	Z+1, r24	; 0x01
   15a4e:	92 83       	std	Z+2, r25	; 0x02
   15a50:	a3 83       	std	Z+3, r26	; 0x03
   15a52:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   15a56:	12 c0       	rjmp	.+36     	; 0x15a7c <SS80_locate_and_write+0x2e0>
   15a58:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15a5c:	85 ff       	sbrs	r24, 5
   15a5e:	0e c0       	rjmp	.+28     	; 0x15a7c <SS80_locate_and_write+0x2e0>
   15a60:	ed b7       	in	r30, 0x3d	; 61
   15a62:	fe b7       	in	r31, 0x3e	; 62
   15a64:	44 82       	std	Z+4, r4	; 0x04
   15a66:	55 82       	std	Z+5, r5	; 0x05
   15a68:	66 82       	std	Z+6, r6	; 0x06
   15a6a:	77 82       	std	Z+7, r7	; 0x07
   15a6c:	85 e7       	ldi	r24, 0x75	; 117
   15a6e:	97 e2       	ldi	r25, 0x27	; 39
   15a70:	a0 e0       	ldi	r26, 0x00	; 0
   15a72:	81 83       	std	Z+1, r24	; 0x01
   15a74:	92 83       	std	Z+2, r25	; 0x02
   15a76:	a3 83       	std	Z+3, r26	; 0x03
   15a78:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   15a7c:	00 91 66 19 	lds	r16, 0x1966	; 0x801966 <SS80s>
   15a80:	10 91 67 19 	lds	r17, 0x1967	; 0x801967 <SS80s+0x1>
   15a84:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   15a88:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   15a8c:	22 89       	ldd	r18, Z+18	; 0x12
   15a8e:	33 89       	ldd	r19, Z+19	; 0x13
   15a90:	40 e0       	ldi	r20, 0x00	; 0
   15a92:	50 e0       	ldi	r21, 0x00	; 0
   15a94:	c5 01       	movw	r24, r10
   15a96:	b4 01       	movw	r22, r8
   15a98:	0e 94 4e e6 	call	0x1cc9c	; 0x1cc9c <__udivmodsi4>
   15a9c:	f8 01       	movw	r30, r16
   15a9e:	27 83       	std	Z+7, r18	; 0x07
   15aa0:	30 87       	std	Z+8, r19	; 0x08
   15aa2:	41 87       	std	Z+9, r20	; 0x09
   15aa4:	52 87       	std	Z+10, r21	; 0x0a
   15aa6:	8c 85       	ldd	r24, Y+12	; 0x0c
   15aa8:	9d 85       	ldd	r25, Y+13	; 0x0d
   15aaa:	88 27       	eor	r24, r24
   15aac:	90 7d       	andi	r25, 0xD0	; 208
   15aae:	04 c0       	rjmp	.+8      	; 0x15ab8 <SS80_locate_and_write+0x31c>
   15ab0:	01 2b       	or	r16, r17
   15ab2:	09 f4       	brne	.+2      	; 0x15ab6 <SS80_locate_and_write+0x31a>
   15ab4:	37 cf       	rjmp	.-402    	; 0x15924 <SS80_locate_and_write+0x188>
   15ab6:	b6 cf       	rjmp	.-148    	; 0x15a24 <SS80_locate_and_write+0x288>
   15ab8:	63 96       	adiw	r28, 0x13	; 19
   15aba:	e2 e1       	ldi	r30, 0x12	; 18
   15abc:	0c 94 d7 e6 	jmp	0x1cdae	; 0x1cdae <__epilogue_restores__>

00015ac0 <SS80_Report>:
   15ac0:	a8 e0       	ldi	r26, 0x08	; 8
   15ac2:	b0 e0       	ldi	r27, 0x00	; 0
   15ac4:	e6 e6       	ldi	r30, 0x66	; 102
   15ac6:	fd ea       	ldi	r31, 0xAD	; 173
   15ac8:	0c 94 cb e6 	jmp	0x1cd96	; 0x1cd96 <__prologue_saves__+0x20>
   15acc:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15ad0:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15ad4:	82 81       	ldd	r24, Z+2	; 0x02
   15ad6:	88 87       	std	Y+8, r24	; 0x08
   15ad8:	80 e0       	ldi	r24, 0x00	; 0
   15ada:	91 e0       	ldi	r25, 0x01	; 1
   15adc:	9f 83       	std	Y+7, r25	; 0x07
   15ade:	8e 83       	std	Y+6, r24	; 0x06
   15ae0:	ae 01       	movw	r20, r28
   15ae2:	4a 5f       	subi	r20, 0xFA	; 250
   15ae4:	5f 4f       	sbci	r21, 0xFF	; 255
   15ae6:	61 e0       	ldi	r22, 0x01	; 1
   15ae8:	70 e0       	ldi	r23, 0x00	; 0
   15aea:	ce 01       	movw	r24, r28
   15aec:	08 96       	adiw	r24, 0x08	; 8
   15aee:	0e 94 5c 8b 	call	0x116b8	; 0x116b8 <gpib_write_str>
   15af2:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   15af6:	01 97       	sbiw	r24, 0x01	; 1
   15af8:	89 f0       	breq	.+34     	; 0x15b1c <SS80_Report+0x5c>
   15afa:	20 ff       	sbrs	r18, 0
   15afc:	0a c0       	rjmp	.+20     	; 0x15b12 <SS80_Report+0x52>
   15afe:	84 e6       	ldi	r24, 0x64	; 100
   15b00:	92 e2       	ldi	r25, 0x22	; 34
   15b02:	a0 e0       	ldi	r26, 0x00	; 0
   15b04:	ed b7       	in	r30, 0x3d	; 61
   15b06:	fe b7       	in	r31, 0x3e	; 62
   15b08:	81 83       	std	Z+1, r24	; 0x01
   15b0a:	92 83       	std	Z+2, r25	; 0x02
   15b0c:	a3 83       	std	Z+3, r26	; 0x03
   15b0e:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   15b12:	8e 81       	ldd	r24, Y+6	; 0x06
   15b14:	9f 81       	ldd	r25, Y+7	; 0x07
   15b16:	88 27       	eor	r24, r24
   15b18:	90 7d       	andi	r25, 0xD0	; 208
   15b1a:	1b c0       	rjmp	.+54     	; 0x15b52 <SS80_Report+0x92>
   15b1c:	25 ff       	sbrs	r18, 5
   15b1e:	12 c0       	rjmp	.+36     	; 0x15b44 <SS80_Report+0x84>
   15b20:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15b24:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15b28:	82 81       	ldd	r24, Z+2	; 0x02
   15b2a:	90 e0       	ldi	r25, 0x00	; 0
   15b2c:	ed b7       	in	r30, 0x3d	; 61
   15b2e:	fe b7       	in	r31, 0x3e	; 62
   15b30:	95 83       	std	Z+5, r25	; 0x05
   15b32:	84 83       	std	Z+4, r24	; 0x04
   15b34:	81 e5       	ldi	r24, 0x51	; 81
   15b36:	92 e2       	ldi	r25, 0x22	; 34
   15b38:	a0 e0       	ldi	r26, 0x00	; 0
   15b3a:	81 83       	std	Z+1, r24	; 0x01
   15b3c:	92 83       	std	Z+2, r25	; 0x02
   15b3e:	a3 83       	std	Z+3, r26	; 0x03
   15b40:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   15b44:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15b48:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15b4c:	12 82       	std	Z+2, r1	; 0x02
   15b4e:	80 e0       	ldi	r24, 0x00	; 0
   15b50:	90 e0       	ldi	r25, 0x00	; 0
   15b52:	28 96       	adiw	r28, 0x08	; 8
   15b54:	e2 e0       	ldi	r30, 0x02	; 2
   15b56:	0c 94 e7 e6 	jmp	0x1cdce	; 0x1cdce <__epilogue_restores__+0x20>

00015b5a <Clear_Common>:
   15b5a:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15b5e:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15b62:	25 81       	ldd	r18, Z+5	; 0x05
   15b64:	30 e0       	ldi	r19, 0x00	; 0
   15b66:	28 17       	cp	r18, r24
   15b68:	39 07       	cpc	r19, r25
   15b6a:	19 f0       	breq	.+6      	; 0x15b72 <Clear_Common+0x18>
   15b6c:	0f 97       	sbiw	r24, 0x0f	; 15
   15b6e:	99 f4       	brne	.+38     	; 0x15b96 <Clear_Common+0x3c>
   15b70:	03 c0       	rjmp	.+6      	; 0x15b78 <Clear_Common+0x1e>
   15b72:	2f 30       	cpi	r18, 0x0F	; 15
   15b74:	31 05       	cpc	r19, r1
   15b76:	09 f4       	brne	.+2      	; 0x15b7a <Clear_Common+0x20>
   15b78:	15 82       	std	Z+5, r1	; 0x05
   15b7a:	16 82       	std	Z+6, r1	; 0x06
   15b7c:	17 82       	std	Z+7, r1	; 0x07
   15b7e:	10 86       	std	Z+8, r1	; 0x08
   15b80:	11 86       	std	Z+9, r1	; 0x09
   15b82:	12 86       	std	Z+10, r1	; 0x0a
   15b84:	13 86       	std	Z+11, r1	; 0x0b
   15b86:	14 86       	std	Z+12, r1	; 0x0c
   15b88:	15 86       	std	Z+13, r1	; 0x0d
   15b8a:	16 86       	std	Z+14, r1	; 0x0e
   15b8c:	11 82       	std	Z+1, r1	; 0x01
   15b8e:	10 82       	st	Z, r1
   15b90:	14 82       	std	Z+4, r1	; 0x04
   15b92:	13 82       	std	Z+3, r1	; 0x03
   15b94:	12 82       	std	Z+2, r1	; 0x02
   15b96:	08 95       	ret

00015b98 <SS80_init>:
   15b98:	cf 92       	push	r12
   15b9a:	df 92       	push	r13
   15b9c:	ef 92       	push	r14
   15b9e:	0f 93       	push	r16
   15ba0:	1f 93       	push	r17
   15ba2:	cf 93       	push	r28
   15ba4:	df 93       	push	r29
   15ba6:	00 d0       	rcall	.+0      	; 0x15ba8 <SS80_init+0x10>
   15ba8:	00 d0       	rcall	.+0      	; 0x15baa <SS80_init+0x12>
   15baa:	1f 92       	push	r1
   15bac:	0d e6       	ldi	r16, 0x6D	; 109
   15bae:	1f e1       	ldi	r17, 0x1F	; 31
   15bb0:	cb e0       	ldi	r28, 0x0B	; 11
   15bb2:	d2 e0       	ldi	r29, 0x02	; 2
   15bb4:	8e e1       	ldi	r24, 0x1E	; 30
   15bb6:	99 e2       	ldi	r25, 0x29	; 41
   15bb8:	6c 01       	movw	r12, r24
   15bba:	e1 2c       	mov	r14, r1
   15bbc:	f8 01       	movw	r30, r16
   15bbe:	80 81       	ld	r24, Z
   15bc0:	83 30       	cpi	r24, 0x03	; 3
   15bc2:	29 f5       	brne	.+74     	; 0x15c0e <SS80_init+0x76>
   15bc4:	8c 2f       	mov	r24, r28
   15bc6:	0e 94 79 97 	call	0x12ef2	; 0x12ef2 <set_active_device>
   15bca:	88 23       	and	r24, r24
   15bcc:	01 f1       	breq	.+64     	; 0x15c0e <SS80_init+0x76>
   15bce:	8f e0       	ldi	r24, 0x0F	; 15
   15bd0:	90 e0       	ldi	r25, 0x00	; 0
   15bd2:	c3 df       	rcall	.-122    	; 0x15b5a <Clear_Common>
   15bd4:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15bd8:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15bdc:	d2 83       	std	Z+2, r29	; 0x02
   15bde:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15be2:	85 ff       	sbrs	r24, 5
   15be4:	0c c0       	rjmp	.+24     	; 0x15bfe <SS80_init+0x66>
   15be6:	f8 01       	movw	r30, r16
   15be8:	81 81       	ldd	r24, Z+1	; 0x01
   15bea:	90 e0       	ldi	r25, 0x00	; 0
   15bec:	ed b7       	in	r30, 0x3d	; 61
   15bee:	fe b7       	in	r31, 0x3e	; 62
   15bf0:	95 83       	std	Z+5, r25	; 0x05
   15bf2:	84 83       	std	Z+4, r24	; 0x04
   15bf4:	c1 82       	std	Z+1, r12	; 0x01
   15bf6:	d2 82       	std	Z+2, r13	; 0x02
   15bf8:	e3 82       	std	Z+3, r14	; 0x03
   15bfa:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   15bfe:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   15c02:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   15c06:	81 81       	ldd	r24, Z+1	; 0x01
   15c08:	90 e0       	ldi	r25, 0x00	; 0
   15c0a:	0e 94 62 86 	call	0x10cc4	; 0x10cc4 <gpib_disable_PPR>
   15c0e:	0b 50       	subi	r16, 0x0B	; 11
   15c10:	11 09       	sbc	r17, r1
   15c12:	c1 50       	subi	r28, 0x01	; 1
   15c14:	98 f6       	brcc	.-90     	; 0x15bbc <SS80_init+0x24>
   15c16:	0f 90       	pop	r0
   15c18:	0f 90       	pop	r0
   15c1a:	0f 90       	pop	r0
   15c1c:	0f 90       	pop	r0
   15c1e:	0f 90       	pop	r0
   15c20:	df 91       	pop	r29
   15c22:	cf 91       	pop	r28
   15c24:	1f 91       	pop	r17
   15c26:	0f 91       	pop	r16
   15c28:	ef 90       	pop	r14
   15c2a:	df 90       	pop	r13
   15c2c:	cf 90       	pop	r12
   15c2e:	08 95       	ret

00015c30 <SS80_Channel_Independent_Clear>:
   15c30:	94 df       	rcall	.-216    	; 0x15b5a <Clear_Common>
   15c32:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   15c36:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   15c3a:	81 81       	ldd	r24, Z+1	; 0x01
   15c3c:	90 e0       	ldi	r25, 0x00	; 0
   15c3e:	0e 94 2c 86 	call	0x10c58	; 0x10c58 <gpib_enable_PPR>
   15c42:	80 e0       	ldi	r24, 0x00	; 0
   15c44:	90 e0       	ldi	r25, 0x00	; 0
   15c46:	08 95       	ret

00015c48 <SS80_Universal_Device_Clear>:
   15c48:	8f e0       	ldi	r24, 0x0F	; 15
   15c4a:	90 e0       	ldi	r25, 0x00	; 0
   15c4c:	86 df       	rcall	.-244    	; 0x15b5a <Clear_Common>
   15c4e:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   15c52:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   15c56:	81 81       	ldd	r24, Z+1	; 0x01
   15c58:	90 e0       	ldi	r25, 0x00	; 0
   15c5a:	0e 94 2c 86 	call	0x10c58	; 0x10c58 <gpib_enable_PPR>
   15c5e:	80 e0       	ldi	r24, 0x00	; 0
   15c60:	90 e0       	ldi	r25, 0x00	; 0
   15c62:	08 95       	ret

00015c64 <SS80_Selected_Device_Clear>:
   15c64:	cf 93       	push	r28
   15c66:	df 93       	push	r29
   15c68:	00 d0       	rcall	.+0      	; 0x15c6a <SS80_Selected_Device_Clear+0x6>
   15c6a:	1f 92       	push	r1
   15c6c:	ec 01       	movw	r28, r24
   15c6e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15c72:	85 ff       	sbrs	r24, 5
   15c74:	0a c0       	rjmp	.+20     	; 0x15c8a <SS80_Selected_Device_Clear+0x26>
   15c76:	85 e4       	ldi	r24, 0x45	; 69
   15c78:	92 e2       	ldi	r25, 0x22	; 34
   15c7a:	a0 e0       	ldi	r26, 0x00	; 0
   15c7c:	ed b7       	in	r30, 0x3d	; 61
   15c7e:	fe b7       	in	r31, 0x3e	; 62
   15c80:	81 83       	std	Z+1, r24	; 0x01
   15c82:	92 83       	std	Z+2, r25	; 0x02
   15c84:	a3 83       	std	Z+3, r26	; 0x03
   15c86:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   15c8a:	ce 01       	movw	r24, r28
   15c8c:	66 df       	rcall	.-308    	; 0x15b5a <Clear_Common>
   15c8e:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   15c92:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   15c96:	81 81       	ldd	r24, Z+1	; 0x01
   15c98:	90 e0       	ldi	r25, 0x00	; 0
   15c9a:	0e 94 2c 86 	call	0x10c58	; 0x10c58 <gpib_enable_PPR>
   15c9e:	80 e0       	ldi	r24, 0x00	; 0
   15ca0:	90 e0       	ldi	r25, 0x00	; 0
   15ca2:	cd b7       	in	r28, 0x3d	; 61
   15ca4:	de b7       	in	r29, 0x3e	; 62
   15ca6:	23 96       	adiw	r28, 0x03	; 3
   15ca8:	e2 e0       	ldi	r30, 0x02	; 2
   15caa:	0c 94 e7 e6 	jmp	0x1cdce	; 0x1cdce <__epilogue_restores__+0x20>

00015cae <SS80_Amigo_Clear>:
   15cae:	a6 e0       	ldi	r26, 0x06	; 6
   15cb0:	b0 e0       	ldi	r27, 0x00	; 0
   15cb2:	ed e5       	ldi	r30, 0x5D	; 93
   15cb4:	fe ea       	ldi	r31, 0xAE	; 174
   15cb6:	0c 94 cb e6 	jmp	0x1cd96	; 0x1cd96 <__prologue_saves__+0x20>
   15cba:	1d 82       	std	Y+5, r1	; 0x05
   15cbc:	1c 82       	std	Y+4, r1	; 0x04
   15cbe:	ae 01       	movw	r20, r28
   15cc0:	4c 5f       	subi	r20, 0xFC	; 252
   15cc2:	5f 4f       	sbci	r21, 0xFF	; 255
   15cc4:	61 e0       	ldi	r22, 0x01	; 1
   15cc6:	70 e0       	ldi	r23, 0x00	; 0
   15cc8:	ce 01       	movw	r24, r28
   15cca:	06 96       	adiw	r24, 0x06	; 6
   15ccc:	0e 94 ba 8a 	call	0x11574	; 0x11574 <gpib_read_str>
   15cd0:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   15cd4:	01 97       	sbiw	r24, 0x01	; 1
   15cd6:	89 f0       	breq	.+34     	; 0x15cfa <SS80_Amigo_Clear+0x4c>
   15cd8:	20 ff       	sbrs	r18, 0
   15cda:	0a c0       	rjmp	.+20     	; 0x15cf0 <SS80_Amigo_Clear+0x42>
   15cdc:	82 e3       	ldi	r24, 0x32	; 50
   15cde:	92 e2       	ldi	r25, 0x22	; 34
   15ce0:	a0 e0       	ldi	r26, 0x00	; 0
   15ce2:	ed b7       	in	r30, 0x3d	; 61
   15ce4:	fe b7       	in	r31, 0x3e	; 62
   15ce6:	81 83       	std	Z+1, r24	; 0x01
   15ce8:	92 83       	std	Z+2, r25	; 0x02
   15cea:	a3 83       	std	Z+3, r26	; 0x03
   15cec:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   15cf0:	8c 81       	ldd	r24, Y+4	; 0x04
   15cf2:	9d 81       	ldd	r25, Y+5	; 0x05
   15cf4:	88 27       	eor	r24, r24
   15cf6:	90 7d       	andi	r25, 0xD0	; 208
   15cf8:	19 c0       	rjmp	.+50     	; 0x15d2c <SS80_Amigo_Clear+0x7e>
   15cfa:	25 ff       	sbrs	r18, 5
   15cfc:	0a c0       	rjmp	.+20     	; 0x15d12 <SS80_Amigo_Clear+0x64>
   15cfe:	83 e2       	ldi	r24, 0x23	; 35
   15d00:	92 e2       	ldi	r25, 0x22	; 34
   15d02:	a0 e0       	ldi	r26, 0x00	; 0
   15d04:	ed b7       	in	r30, 0x3d	; 61
   15d06:	fe b7       	in	r31, 0x3e	; 62
   15d08:	81 83       	std	Z+1, r24	; 0x01
   15d0a:	92 83       	std	Z+2, r25	; 0x02
   15d0c:	a3 83       	std	Z+3, r26	; 0x03
   15d0e:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   15d12:	8f e0       	ldi	r24, 0x0F	; 15
   15d14:	90 e0       	ldi	r25, 0x00	; 0
   15d16:	21 df       	rcall	.-446    	; 0x15b5a <Clear_Common>
   15d18:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   15d1c:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   15d20:	81 81       	ldd	r24, Z+1	; 0x01
   15d22:	90 e0       	ldi	r25, 0x00	; 0
   15d24:	0e 94 2c 86 	call	0x10c58	; 0x10c58 <gpib_enable_PPR>
   15d28:	80 e0       	ldi	r24, 0x00	; 0
   15d2a:	90 e0       	ldi	r25, 0x00	; 0
   15d2c:	26 96       	adiw	r28, 0x06	; 6
   15d2e:	e2 e0       	ldi	r30, 0x02	; 2
   15d30:	0c 94 e7 e6 	jmp	0x1cdce	; 0x1cdce <__epilogue_restores__+0x20>

00015d34 <SS80_Cancel>:
   15d34:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15d38:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15d3c:	11 82       	std	Z+1, r1	; 0x01
   15d3e:	10 82       	st	Z, r1
   15d40:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   15d44:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   15d48:	81 81       	ldd	r24, Z+1	; 0x01
   15d4a:	90 e0       	ldi	r25, 0x00	; 0
   15d4c:	0e 94 2c 86 	call	0x10c58	; 0x10c58 <gpib_enable_PPR>
   15d50:	80 e0       	ldi	r24, 0x00	; 0
   15d52:	90 e0       	ldi	r25, 0x00	; 0
   15d54:	08 95       	ret

00015d56 <SS80_Transparent_State>:
   15d56:	a9 e0       	ldi	r26, 0x09	; 9
   15d58:	b0 e0       	ldi	r27, 0x00	; 0
   15d5a:	e1 eb       	ldi	r30, 0xB1	; 177
   15d5c:	fe ea       	ldi	r31, 0xAE	; 174
   15d5e:	0c 94 c3 e6 	jmp	0x1cd86	; 0x1cd86 <__prologue_saves__+0x10>
   15d62:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   15d66:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   15d6a:	81 81       	ldd	r24, Z+1	; 0x01
   15d6c:	90 e0       	ldi	r25, 0x00	; 0
   15d6e:	0e 94 62 86 	call	0x10cc4	; 0x10cc4 <gpib_disable_PPR>
   15d72:	80 e0       	ldi	r24, 0x00	; 0
   15d74:	91 e0       	ldi	r25, 0x01	; 1
   15d76:	99 87       	std	Y+9, r25	; 0x09
   15d78:	88 87       	std	Y+8, r24	; 0x08
   15d7a:	ae 01       	movw	r20, r28
   15d7c:	48 5f       	subi	r20, 0xF8	; 248
   15d7e:	5f 4f       	sbci	r21, 0xFF	; 255
   15d80:	60 e0       	ldi	r22, 0x00	; 0
   15d82:	72 e0       	ldi	r23, 0x02	; 2
   15d84:	8a ee       	ldi	r24, 0xEA	; 234
   15d86:	9c e1       	ldi	r25, 0x1C	; 28
   15d88:	0e 94 ba 8a 	call	0x11574	; 0x11574 <gpib_read_str>
   15d8c:	7c 01       	movw	r14, r24
   15d8e:	88 85       	ldd	r24, Y+8	; 0x08
   15d90:	99 85       	ldd	r25, Y+9	; 0x09
   15d92:	9c 01       	movw	r18, r24
   15d94:	22 27       	eor	r18, r18
   15d96:	30 7d       	andi	r19, 0xD0	; 208
   15d98:	23 2b       	or	r18, r19
   15d9a:	79 f0       	breq	.+30     	; 0x15dba <SS80_Transparent_State+0x64>
   15d9c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15da0:	80 ff       	sbrs	r24, 0
   15da2:	da c0       	rjmp	.+436    	; 0x15f58 <SS80_Transparent_State+0x202>
   15da4:	82 ec       	ldi	r24, 0xC2	; 194
   15da6:	93 e2       	ldi	r25, 0x23	; 35
   15da8:	a0 e0       	ldi	r26, 0x00	; 0
   15daa:	ed b7       	in	r30, 0x3d	; 61
   15dac:	fe b7       	in	r31, 0x3e	; 62
   15dae:	81 83       	std	Z+1, r24	; 0x01
   15db0:	92 83       	std	Z+2, r25	; 0x02
   15db2:	a3 83       	std	Z+3, r26	; 0x03
   15db4:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   15db8:	cf c0       	rjmp	.+414    	; 0x15f58 <SS80_Transparent_State+0x202>
   15dba:	e1 14       	cp	r14, r1
   15dbc:	f1 04       	cpc	r15, r1
   15dbe:	09 f4       	brne	.+2      	; 0x15dc2 <SS80_Transparent_State+0x6c>
   15dc0:	d0 c0       	rjmp	.+416    	; 0x15f62 <SS80_Transparent_State+0x20c>
   15dc2:	90 fd       	sbrc	r25, 0
   15dc4:	0e c0       	rjmp	.+28     	; 0x15de2 <SS80_Transparent_State+0x8c>
   15dc6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15dca:	80 ff       	sbrs	r24, 0
   15dcc:	0a c0       	rjmp	.+20     	; 0x15de2 <SS80_Transparent_State+0x8c>
   15dce:	89 ea       	ldi	r24, 0xA9	; 169
   15dd0:	93 e2       	ldi	r25, 0x23	; 35
   15dd2:	a0 e0       	ldi	r26, 0x00	; 0
   15dd4:	ed b7       	in	r30, 0x3d	; 61
   15dd6:	fe b7       	in	r31, 0x3e	; 62
   15dd8:	81 83       	std	Z+1, r24	; 0x01
   15dda:	92 83       	std	Z+2, r25	; 0x02
   15ddc:	a3 83       	std	Z+3, r26	; 0x03
   15dde:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   15de2:	8a ee       	ldi	r24, 0xEA	; 234
   15de4:	a8 2e       	mov	r10, r24
   15de6:	8c e1       	ldi	r24, 0x1C	; 28
   15de8:	b8 2e       	mov	r11, r24
   15dea:	00 e0       	ldi	r16, 0x00	; 0
   15dec:	10 e0       	ldi	r17, 0x00	; 0
   15dee:	0e 15       	cp	r16, r14
   15df0:	1f 05       	cpc	r17, r15
   15df2:	0c f0       	brlt	.+2      	; 0x15df6 <SS80_Transparent_State+0xa0>
   15df4:	9c c0       	rjmp	.+312    	; 0x15f2e <SS80_Transparent_State+0x1d8>
   15df6:	68 01       	movw	r12, r16
   15df8:	ff ef       	ldi	r31, 0xFF	; 255
   15dfa:	cf 1a       	sub	r12, r31
   15dfc:	df 0a       	sbc	r13, r31
   15dfe:	f5 01       	movw	r30, r10
   15e00:	81 91       	ld	r24, Z+
   15e02:	5f 01       	movw	r10, r30
   15e04:	28 2f       	mov	r18, r24
   15e06:	30 e0       	ldi	r19, 0x00	; 0
   15e08:	a9 01       	movw	r20, r18
   15e0a:	40 52       	subi	r20, 0x20	; 32
   15e0c:	51 09       	sbc	r21, r1
   15e0e:	40 31       	cpi	r20, 0x10	; 16
   15e10:	51 05       	cpc	r21, r1
   15e12:	20 f4       	brcc	.+8      	; 0x15e1c <SS80_Transparent_State+0xc6>
   15e14:	80 52       	subi	r24, 0x20	; 32
   15e16:	86 d9       	rcall	.-3316   	; 0x15124 <SS80_Check_Unit>
   15e18:	86 01       	movw	r16, r12
   15e1a:	e9 cf       	rjmp	.-46     	; 0x15dee <SS80_Transparent_State+0x98>
   15e1c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15e20:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   15e24:	21 30       	cpi	r18, 0x01	; 1
   15e26:	31 05       	cpc	r19, r1
   15e28:	c9 f4       	brne	.+50     	; 0x15e5c <SS80_Transparent_State+0x106>
   15e2a:	0e 5f       	subi	r16, 0xFE	; 254
   15e2c:	1f 4f       	sbci	r17, 0xFF	; 255
   15e2e:	80 73       	andi	r24, 0x30	; 48
   15e30:	99 27       	eor	r25, r25
   15e32:	89 2b       	or	r24, r25
   15e34:	51 f0       	breq	.+20     	; 0x15e4a <SS80_Transparent_State+0xf4>
   15e36:	84 e8       	ldi	r24, 0x84	; 132
   15e38:	93 e2       	ldi	r25, 0x23	; 35
   15e3a:	a0 e0       	ldi	r26, 0x00	; 0
   15e3c:	ed b7       	in	r30, 0x3d	; 61
   15e3e:	fe b7       	in	r31, 0x3e	; 62
   15e40:	81 83       	std	Z+1, r24	; 0x01
   15e42:	92 83       	std	Z+2, r25	; 0x02
   15e44:	a3 83       	std	Z+3, r26	; 0x03
   15e46:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   15e4a:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   15e4e:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   15e52:	81 81       	ldd	r24, Z+1	; 0x01
   15e54:	90 e0       	ldi	r25, 0x00	; 0
   15e56:	0e 94 2c 86 	call	0x10c58	; 0x10c58 <gpib_enable_PPR>
   15e5a:	69 c0       	rjmp	.+210    	; 0x15f2e <SS80_Transparent_State+0x1d8>
   15e5c:	22 30       	cpi	r18, 0x02	; 2
   15e5e:	31 05       	cpc	r19, r1
   15e60:	51 f4       	brne	.+20     	; 0x15e76 <SS80_Transparent_State+0x120>
   15e62:	0b 5f       	subi	r16, 0xFB	; 251
   15e64:	1f 4f       	sbci	r17, 0xFF	; 255
   15e66:	80 73       	andi	r24, 0x30	; 48
   15e68:	99 27       	eor	r25, r25
   15e6a:	89 2b       	or	r24, r25
   15e6c:	09 f4       	brne	.+2      	; 0x15e70 <SS80_Transparent_State+0x11a>
   15e6e:	5f c0       	rjmp	.+190    	; 0x15f2e <SS80_Transparent_State+0x1d8>
   15e70:	87 e6       	ldi	r24, 0x67	; 103
   15e72:	93 e2       	ldi	r25, 0x23	; 35
   15e74:	0c c0       	rjmp	.+24     	; 0x15e8e <SS80_Transparent_State+0x138>
   15e76:	23 30       	cpi	r18, 0x03	; 3
   15e78:	31 05       	cpc	r19, r1
   15e7a:	91 f4       	brne	.+36     	; 0x15ea0 <SS80_Transparent_State+0x14a>
   15e7c:	0b 5f       	subi	r16, 0xFB	; 251
   15e7e:	1f 4f       	sbci	r17, 0xFF	; 255
   15e80:	80 73       	andi	r24, 0x30	; 48
   15e82:	99 27       	eor	r25, r25
   15e84:	89 2b       	or	r24, r25
   15e86:	09 f4       	brne	.+2      	; 0x15e8a <SS80_Transparent_State+0x134>
   15e88:	52 c0       	rjmp	.+164    	; 0x15f2e <SS80_Transparent_State+0x1d8>
   15e8a:	89 e4       	ldi	r24, 0x49	; 73
   15e8c:	93 e2       	ldi	r25, 0x23	; 35
   15e8e:	a0 e0       	ldi	r26, 0x00	; 0
   15e90:	ed b7       	in	r30, 0x3d	; 61
   15e92:	fe b7       	in	r31, 0x3e	; 62
   15e94:	81 83       	std	Z+1, r24	; 0x01
   15e96:	92 83       	std	Z+2, r25	; 0x02
   15e98:	a3 83       	std	Z+3, r26	; 0x03
   15e9a:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   15e9e:	47 c0       	rjmp	.+142    	; 0x15f2e <SS80_Transparent_State+0x1d8>
   15ea0:	28 30       	cpi	r18, 0x08	; 8
   15ea2:	31 05       	cpc	r19, r1
   15ea4:	e1 f4       	brne	.+56     	; 0x15ede <SS80_Transparent_State+0x188>
   15ea6:	85 ff       	sbrs	r24, 5
   15ea8:	12 c0       	rjmp	.+36     	; 0x15ece <SS80_Transparent_State+0x178>
   15eaa:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15eae:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15eb2:	85 81       	ldd	r24, Z+5	; 0x05
   15eb4:	90 e0       	ldi	r25, 0x00	; 0
   15eb6:	ed b7       	in	r30, 0x3d	; 61
   15eb8:	fe b7       	in	r31, 0x3e	; 62
   15eba:	95 83       	std	Z+5, r25	; 0x05
   15ebc:	84 83       	std	Z+4, r24	; 0x04
   15ebe:	82 e2       	ldi	r24, 0x22	; 34
   15ec0:	93 e2       	ldi	r25, 0x23	; 35
   15ec2:	a0 e0       	ldi	r26, 0x00	; 0
   15ec4:	81 83       	std	Z+1, r24	; 0x01
   15ec6:	92 83       	std	Z+2, r25	; 0x02
   15ec8:	a3 83       	std	Z+3, r26	; 0x03
   15eca:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   15ece:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15ed2:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15ed6:	85 81       	ldd	r24, Z+5	; 0x05
   15ed8:	90 e0       	ldi	r25, 0x00	; 0
   15eda:	aa de       	rcall	.-684    	; 0x15c30 <SS80_Channel_Independent_Clear>
   15edc:	44 c0       	rjmp	.+136    	; 0x15f66 <SS80_Transparent_State+0x210>
   15ede:	29 30       	cpi	r18, 0x09	; 9
   15ee0:	31 05       	cpc	r19, r1
   15ee2:	b1 f4       	brne	.+44     	; 0x15f10 <SS80_Transparent_State+0x1ba>
   15ee4:	85 ff       	sbrs	r24, 5
   15ee6:	12 c0       	rjmp	.+36     	; 0x15f0c <SS80_Transparent_State+0x1b6>
   15ee8:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15eec:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15ef0:	85 81       	ldd	r24, Z+5	; 0x05
   15ef2:	90 e0       	ldi	r25, 0x00	; 0
   15ef4:	ed b7       	in	r30, 0x3d	; 61
   15ef6:	fe b7       	in	r31, 0x3e	; 62
   15ef8:	95 83       	std	Z+5, r25	; 0x05
   15efa:	84 83       	std	Z+4, r24	; 0x04
   15efc:	8e e0       	ldi	r24, 0x0E	; 14
   15efe:	93 e2       	ldi	r25, 0x23	; 35
   15f00:	a0 e0       	ldi	r26, 0x00	; 0
   15f02:	81 83       	std	Z+1, r24	; 0x01
   15f04:	92 83       	std	Z+2, r25	; 0x02
   15f06:	a3 83       	std	Z+3, r26	; 0x03
   15f08:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   15f0c:	13 df       	rcall	.-474    	; 0x15d34 <SS80_Cancel>
   15f0e:	2b c0       	rjmp	.+86     	; 0x15f66 <SS80_Transparent_State+0x210>
   15f10:	80 ff       	sbrs	r24, 0
   15f12:	22 c0       	rjmp	.+68     	; 0x15f58 <SS80_Transparent_State+0x202>
   15f14:	ed b7       	in	r30, 0x3d	; 61
   15f16:	fe b7       	in	r31, 0x3e	; 62
   15f18:	35 83       	std	Z+5, r19	; 0x05
   15f1a:	24 83       	std	Z+4, r18	; 0x04
   15f1c:	8e ee       	ldi	r24, 0xEE	; 238
   15f1e:	92 e2       	ldi	r25, 0x22	; 34
   15f20:	a0 e0       	ldi	r26, 0x00	; 0
   15f22:	81 83       	std	Z+1, r24	; 0x01
   15f24:	92 83       	std	Z+2, r25	; 0x02
   15f26:	a3 83       	std	Z+3, r26	; 0x03
   15f28:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   15f2c:	86 01       	movw	r16, r12
   15f2e:	0e 15       	cp	r16, r14
   15f30:	1f 05       	cpc	r17, r15
   15f32:	91 f0       	breq	.+36     	; 0x15f58 <SS80_Transparent_State+0x202>
   15f34:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15f38:	80 ff       	sbrs	r24, 0
   15f3a:	0e c0       	rjmp	.+28     	; 0x15f58 <SS80_Transparent_State+0x202>
   15f3c:	ed b7       	in	r30, 0x3d	; 61
   15f3e:	fe b7       	in	r31, 0x3e	; 62
   15f40:	f7 82       	std	Z+7, r15	; 0x07
   15f42:	e6 82       	std	Z+6, r14	; 0x06
   15f44:	15 83       	std	Z+5, r17	; 0x05
   15f46:	04 83       	std	Z+4, r16	; 0x04
   15f48:	82 eb       	ldi	r24, 0xB2	; 178
   15f4a:	92 e2       	ldi	r25, 0x22	; 34
   15f4c:	a0 e0       	ldi	r26, 0x00	; 0
   15f4e:	81 83       	std	Z+1, r24	; 0x01
   15f50:	92 83       	std	Z+2, r25	; 0x02
   15f52:	a3 83       	std	Z+3, r26	; 0x03
   15f54:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   15f58:	88 85       	ldd	r24, Y+8	; 0x08
   15f5a:	99 85       	ldd	r25, Y+9	; 0x09
   15f5c:	88 27       	eor	r24, r24
   15f5e:	90 7d       	andi	r25, 0xD0	; 208
   15f60:	02 c0       	rjmp	.+4      	; 0x15f66 <SS80_Transparent_State+0x210>
   15f62:	80 e0       	ldi	r24, 0x00	; 0
   15f64:	90 e0       	ldi	r25, 0x00	; 0
   15f66:	29 96       	adiw	r28, 0x09	; 9
   15f68:	ea e0       	ldi	r30, 0x0A	; 10
   15f6a:	0c 94 df e6 	jmp	0x1cdbe	; 0x1cdbe <__epilogue_restores__+0x10>

00015f6e <SS80_error_return>:
/// @return  0 on send
/// @return GPIB flags on send error
/// @see gpib.h _FLAGS defines for a full list.

int SS80_error_return( void )
{
   15f6e:	a6 e0       	ldi	r26, 0x06	; 6
   15f70:	b0 e0       	ldi	r27, 0x00	; 0
   15f72:	ed eb       	ldi	r30, 0xBD	; 189
   15f74:	ff ea       	ldi	r31, 0xAF	; 175
   15f76:	0c 94 cb e6 	jmp	0x1cd96	; 0x1cd96 <__prologue_saves__+0x20>
    uint8_t tmp[1];
    uint16_t status = EOI_FLAG;
   15f7a:	80 e0       	ldi	r24, 0x00	; 0
   15f7c:	91 e0       	ldi	r25, 0x01	; 1
   15f7e:	9d 83       	std	Y+5, r25	; 0x05
   15f80:	8c 83       	std	Y+4, r24	; 0x04

    SS80s->qstat = 1;
   15f82:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15f86:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15f8a:	81 e0       	ldi	r24, 0x01	; 1
   15f8c:	82 83       	std	Z+2, r24	; 0x02
    tmp[0] = SS80s->qstat;
   15f8e:	8e 83       	std	Y+6, r24	; 0x06

    status = EOI_FLAG;
    if( gpib_write_str(tmp,sizeof(tmp), &status) != sizeof(tmp))
   15f90:	ae 01       	movw	r20, r28
   15f92:	4c 5f       	subi	r20, 0xFC	; 252
   15f94:	5f 4f       	sbci	r21, 0xFF	; 255
   15f96:	61 e0       	ldi	r22, 0x01	; 1
   15f98:	70 e0       	ldi	r23, 0x00	; 0
   15f9a:	ce 01       	movw	r24, r28
   15f9c:	06 96       	adiw	r24, 0x06	; 6
   15f9e:	0e 94 5c 8b 	call	0x116b8	; 0x116b8 <gpib_write_str>
   15fa2:	01 97       	sbiw	r24, 0x01	; 1
   15fa4:	99 f0       	breq	.+38     	; 0x15fcc <SS80_error_return+0x5e>
    {
        if(debuglevel & GPIB_ERR)
   15fa6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15faa:	80 ff       	sbrs	r24, 0
   15fac:	0a c0       	rjmp	.+20     	; 0x15fc2 <SS80_error_return+0x54>
            printf("[GPIB Error Return - Write ERROR]\n");
   15fae:	80 e0       	ldi	r24, 0x00	; 0
   15fb0:	92 e2       	ldi	r25, 0x22	; 34
   15fb2:	a0 e0       	ldi	r26, 0x00	; 0
   15fb4:	ed b7       	in	r30, 0x3d	; 61
   15fb6:	fe b7       	in	r31, 0x3e	; 62
   15fb8:	81 83       	std	Z+1, r24	; 0x01
   15fba:	92 83       	std	Z+2, r25	; 0x02
   15fbc:	a3 83       	std	Z+3, r26	; 0x03
   15fbe:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
        return(status & ERROR_MASK);
   15fc2:	8c 81       	ldd	r24, Y+4	; 0x04
   15fc4:	9d 81       	ldd	r25, Y+5	; 0x05
   15fc6:	88 27       	eor	r24, r24
   15fc8:	90 7d       	andi	r25, 0xD0	; 208
   15fca:	07 c0       	rjmp	.+14     	; 0x15fda <SS80_error_return+0x6c>
    }
    SS80s->qstat = 0;
   15fcc:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15fd0:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15fd4:	12 82       	std	Z+2, r1	; 0x02
    return(0);
   15fd6:	80 e0       	ldi	r24, 0x00	; 0
   15fd8:	90 e0       	ldi	r25, 0x00	; 0
}
   15fda:	26 96       	adiw	r28, 0x06	; 6
   15fdc:	e2 e0       	ldi	r30, 0x02	; 2
   15fde:	0c 94 e7 e6 	jmp	0x1cdce	; 0x1cdce <__epilogue_restores__+0x20>

00015fe2 <SS80_locate_and_read>:
///  - Currenly we will only process 2 ** 31 bytes Max in one transfer.
///  - If an seek or I/O error happens then we MUST continue to
/// read and discard the GPIB data until we get an EOI or GPIB error...

int SS80_locate_and_read( void )
{
   15fe2:	a7 e1       	ldi	r26, 0x17	; 23
   15fe4:	b0 e0       	ldi	r27, 0x00	; 0
   15fe6:	e7 ef       	ldi	r30, 0xF7	; 247
   15fe8:	ff ea       	ldi	r31, 0xAF	; 175
   15fea:	0c 94 bc e6 	jmp	0x1cd78	; 0x1cd78 <__prologue_saves__+0x2>
    DWORD total_bytes;
    DWORD count;
    int chunk;
    int len;
    uint16_t status;
    uint32_t Address = SS80_Blocks_to_Bytes(SS80s->AddressBlocks);
   15fee:	60 91 66 19 	lds	r22, 0x1966	; 0x801966 <SS80s>
   15ff2:	70 91 67 19 	lds	r23, 0x1967	; 0x801967 <SS80s+0x1>
   15ff6:	fb 01       	movw	r30, r22
   15ff8:	27 81       	ldd	r18, Z+7	; 0x07
   15ffa:	30 85       	ldd	r19, Z+8	; 0x08
   15ffc:	41 85       	ldd	r20, Z+9	; 0x09
   15ffe:	52 85       	ldd	r21, Z+10	; 0x0a

/// @brief  SS80 Return current address in bytes
/// @return Byte Address
uint32_t SS80_Blocks_to_Bytes(uint32_t block)
{
    return(block * SS80p->UNIT.BYTES_PER_BLOCK);
   16000:	80 91 68 19 	lds	r24, 0x1968	; 0x801968 <SS80p>
   16004:	90 91 69 19 	lds	r25, 0x1969	; 0x801969 <SS80p+0x1>
   16008:	fc 01       	movw	r30, r24
   1600a:	a2 89       	ldd	r26, Z+18	; 0x12
   1600c:	b3 89       	ldd	r27, Z+19	; 0x13
    int chunk;
    int len;
    uint16_t status;
    uint32_t Address = SS80_Blocks_to_Bytes(SS80s->AddressBlocks);

    SS80s->qstat = 0;
   1600e:	fb 01       	movw	r30, r22
   16010:	12 82       	std	Z+2, r1	; 0x02

    status = 0;
   16012:	1d 86       	std	Y+13, r1	; 0x0d
   16014:	1c 86       	std	Y+12, r1	; 0x0c

    if( GPIB_IO_RD(IFC) == 0)
   16016:	54 98       	cbi	0x0a, 4	; 10
   16018:	4c 99       	sbic	0x09, 4	; 9
   1601a:	03 c0       	rjmp	.+6      	; 0x16022 <SS80_locate_and_read+0x40>
        return(IFC_FLAG);
   1601c:	80 e0       	ldi	r24, 0x00	; 0
   1601e:	90 e1       	ldi	r25, 0x10	; 16
   16020:	3e c1       	rjmp	.+636    	; 0x1629e <SS80_locate_and_read+0x2bc>

/// @brief  SS80 Return current address in bytes
/// @return Byte Address
uint32_t SS80_Blocks_to_Bytes(uint32_t block)
{
    return(block * SS80p->UNIT.BYTES_PER_BLOCK);
   16022:	0e 94 9b e6 	call	0x1cd36	; 0x1cd36 <__muluhisi3>
   16026:	4b 01       	movw	r8, r22
   16028:	5c 01       	movw	r10, r24
/// @todo FIXME
///  SS80 4-39
///  For now we will assume the controller will never do this

#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1602a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1602e:	85 ff       	sbrs	r24, 5
   16030:	1a c0       	rjmp	.+52     	; 0x16066 <SS80_locate_and_read+0x84>
        printf("[SS80 Locate and Read at %08lXH(%lXH)]\n",
   16032:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   16036:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   1603a:	83 85       	ldd	r24, Z+11	; 0x0b
   1603c:	94 85       	ldd	r25, Z+12	; 0x0c
   1603e:	a5 85       	ldd	r26, Z+13	; 0x0d
   16040:	b6 85       	ldd	r27, Z+14	; 0x0e
   16042:	ed b7       	in	r30, 0x3d	; 61
   16044:	fe b7       	in	r31, 0x3e	; 62
   16046:	80 87       	std	Z+8, r24	; 0x08
   16048:	91 87       	std	Z+9, r25	; 0x09
   1604a:	a2 87       	std	Z+10, r26	; 0x0a
   1604c:	b3 87       	std	Z+11, r27	; 0x0b
   1604e:	84 82       	std	Z+4, r8	; 0x04
   16050:	95 82       	std	Z+5, r9	; 0x05
   16052:	a6 82       	std	Z+6, r10	; 0x06
   16054:	b7 82       	std	Z+7, r11	; 0x07
   16056:	8a ed       	ldi	r24, 0xDA	; 218
   16058:	98 e2       	ldi	r25, 0x28	; 40
   1605a:	a0 e0       	ldi	r26, 0x00	; 0
   1605c:	81 83       	std	Z+1, r24	; 0x01
   1605e:	92 83       	std	Z+2, r25	; 0x02
   16060:	a3 83       	std	Z+3, r26	; 0x03
   16062:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
            (long) Address, (long) SS80s->Length);
#endif

    if( SS80_cmd_seek() )
   16066:	25 db       	rcall	.-2486   	; 0x156b2 <SS80_cmd_seek>
   16068:	89 2b       	or	r24, r25
   1606a:	09 f0       	breq	.+2      	; 0x1606e <SS80_locate_and_read+0x8c>
   1606c:	ae c0       	rjmp	.+348    	; 0x161ca <SS80_locate_and_read+0x1e8>
    {
        return(SS80_error_return());
    }

    count = SS80s->Length;
   1606e:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   16072:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   16076:	43 84       	ldd	r4, Z+11	; 0x0b
   16078:	54 84       	ldd	r5, Z+12	; 0x0c
   1607a:	65 84       	ldd	r6, Z+13	; 0x0d
   1607c:	76 84       	ldd	r7, Z+14	; 0x0e
    total_bytes = 0;
   1607e:	1e 86       	std	Y+14, r1	; 0x0e
   16080:	1f 86       	std	Y+15, r1	; 0x0f
   16082:	18 8a       	std	Y+16, r1	; 0x10
   16084:	19 8a       	std	Y+17, r1	; 0x11

#if SDEBUG
        if(debuglevel & GPIB_DISK_IO_TIMING)
            gpib_timer_elapsed_end("disk READ ");
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
            printf("[SS80 Disk Read %02XH bytes]\n", len);
   16086:	8c eb       	ldi	r24, 0xBC	; 188
   16088:	98 e2       	ldi	r25, 0x28	; 40
   1608a:	9c 01       	movw	r18, r24
   1608c:	40 e0       	ldi	r20, 0x00	; 0
   1608e:	2a 8b       	std	Y+18, r18	; 0x12
   16090:	3b 8b       	std	Y+19, r19	; 0x13
   16092:	4c 8b       	std	Y+20, r20	; 0x14
        if(debuglevel & GPIB_RW_STR_TIMING)
            gpib_timer_elapsed_end("GPIB write");
#endif
        if( len != chunk)
        {
            SS80s->qstat = 1;
   16094:	33 24       	eor	r3, r3
   16096:	33 94       	inc	r3
            if(debuglevel & GPIB_ERR)
                printf("[SS80 GPIB Write Error]\n");
   16098:	8b e8       	ldi	r24, 0x8B	; 139
   1609a:	98 e2       	ldi	r25, 0x28	; 40
   1609c:	9c 01       	movw	r18, r24
   1609e:	40 e0       	ldi	r20, 0x00	; 0
   160a0:	2d 8b       	std	Y+21, r18	; 0x15
   160a2:	3e 8b       	std	Y+22, r19	; 0x16
   160a4:	4f 8b       	std	Y+23, r20	; 0x17
        return(SS80_error_return());
    }

    count = SS80s->Length;
    total_bytes = 0;
    while(count > 0 )
   160a6:	34 c0       	rjmp	.+104    	; 0x16110 <SS80_locate_and_read+0x12e>
                printf("[SS80 Disk Read Error]\n");
            return( SS80_error_return() );
        }

#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   160a8:	87 fd       	sbrc	r24, 7
            gpib_timer_elapsed_begin();
   160aa:	0e 94 52 85 	call	0x10aa4	; 0x10aa4 <gpib_timer_elapsed_begin>
#endif
        len = gpib_write_str(gpib_iobuff, chunk, &status);
   160ae:	ae 01       	movw	r20, r28
   160b0:	44 5f       	subi	r20, 0xF4	; 244
   160b2:	5f 4f       	sbci	r21, 0xFF	; 255
   160b4:	b6 01       	movw	r22, r12
   160b6:	8a ee       	ldi	r24, 0xEA	; 234
   160b8:	9c e1       	ldi	r25, 0x1C	; 28
   160ba:	0e 94 5c 8b 	call	0x116b8	; 0x116b8 <gpib_write_str>
   160be:	8c 01       	movw	r16, r24
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   160c0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   160c4:	87 ff       	sbrs	r24, 7
   160c6:	04 c0       	rjmp	.+8      	; 0x160d0 <SS80_locate_and_read+0xee>
            gpib_timer_elapsed_end("GPIB write");
   160c8:	8a ea       	ldi	r24, 0xAA	; 170
   160ca:	90 e1       	ldi	r25, 0x10	; 16
   160cc:	0e 94 64 85 	call	0x10ac8	; 0x10ac8 <gpib_timer_elapsed_end>
#endif
        if( len != chunk)
   160d0:	c0 16       	cp	r12, r16
   160d2:	d1 06       	cpc	r13, r17
   160d4:	09 f0       	breq	.+2      	; 0x160d8 <SS80_locate_and_read+0xf6>
   160d6:	82 c0       	rjmp	.+260    	; 0x161dc <SS80_locate_and_read+0x1fa>
                SS80s->Errors |= ERR_GPIB;
                break;
            }
        }

        Address += chunk;
   160d8:	0d 2c       	mov	r0, r13
   160da:	00 0c       	add	r0, r0
   160dc:	ee 08       	sbc	r14, r14
   160de:	ff 08       	sbc	r15, r15
   160e0:	8c 0c       	add	r8, r12
   160e2:	9d 1c       	adc	r9, r13
   160e4:	ae 1c       	adc	r10, r14
   160e6:	bf 1c       	adc	r11, r15
        total_bytes = total_bytes + len;
   160e8:	01 2e       	mov	r0, r17
   160ea:	00 0c       	add	r0, r0
   160ec:	22 0b       	sbc	r18, r18
   160ee:	33 0b       	sbc	r19, r19
   160f0:	8e 85       	ldd	r24, Y+14	; 0x0e
   160f2:	9f 85       	ldd	r25, Y+15	; 0x0f
   160f4:	a8 89       	ldd	r26, Y+16	; 0x10
   160f6:	b9 89       	ldd	r27, Y+17	; 0x11
   160f8:	80 0f       	add	r24, r16
   160fa:	91 1f       	adc	r25, r17
   160fc:	a2 1f       	adc	r26, r18
   160fe:	b3 1f       	adc	r27, r19
   16100:	8e 87       	std	Y+14, r24	; 0x0e
   16102:	9f 87       	std	Y+15, r25	; 0x0f
   16104:	a8 8b       	std	Y+16, r26	; 0x10
   16106:	b9 8b       	std	Y+17, r27	; 0x11
        count -= len;
   16108:	40 1a       	sub	r4, r16
   1610a:	51 0a       	sbc	r5, r17
   1610c:	62 0a       	sbc	r6, r18
   1610e:	73 0a       	sbc	r7, r19
        return(SS80_error_return());
    }

    count = SS80s->Length;
    total_bytes = 0;
    while(count > 0 )
   16110:	41 14       	cp	r4, r1
   16112:	51 04       	cpc	r5, r1
   16114:	61 04       	cpc	r6, r1
   16116:	71 04       	cpc	r7, r1
   16118:	09 f4       	brne	.+2      	; 0x1611c <SS80_locate_and_read+0x13a>
   1611a:	92 c0       	rjmp	.+292    	; 0x16240 <SS80_locate_and_read+0x25e>
    {
        if( GPIB_IO_RD(IFC) == 0)
   1611c:	54 98       	cbi	0x0a, 4	; 10
   1611e:	4c 9b       	sbis	0x09, 4	; 9
   16120:	7d cf       	rjmp	.-262    	; 0x1601c <SS80_locate_and_read+0x3a>
        {
            return(IFC_FLAG);
        }

        if(count > 256)
   16122:	31 e0       	ldi	r19, 0x01	; 1
   16124:	43 16       	cp	r4, r19
   16126:	53 06       	cpc	r5, r19
   16128:	61 04       	cpc	r6, r1
   1612a:	71 04       	cpc	r7, r1
   1612c:	08 f4       	brcc	.+2      	; 0x16130 <SS80_locate_and_read+0x14e>
   1612e:	4f c0       	rjmp	.+158    	; 0x161ce <SS80_locate_and_read+0x1ec>
        {
            chunk = 256;
            status = 0;                           // GPIB status
   16130:	1d 86       	std	Y+13, r1	; 0x0d
   16132:	1c 86       	std	Y+12, r1	; 0x0c
            return(IFC_FLAG);
        }

        if(count > 256)
        {
            chunk = 256;
   16134:	c1 2c       	mov	r12, r1
   16136:	dd 24       	eor	r13, r13
   16138:	d3 94       	inc	r13
            chunk = count;
            status |= EOI_FLAG;                   // GPIB EOI on final charater
        }

#if SDEBUG
        if(debuglevel & GPIB_DISK_IO_TIMING)
   1613a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1613e:	86 fd       	sbrc	r24, 6
            gpib_timer_elapsed_begin();
   16140:	0e 94 52 85 	call	0x10aa4	; 0x10aa4 <gpib_timer_elapsed_begin>
#endif

// FIXME len != chunk
        len = dbf_open_read(SS80p->HEADER.NAME, Address, gpib_iobuff, chunk, &SS80s->Errors);
   16144:	e0 90 66 19 	lds	r14, 0x1966	; 0x801966 <SS80s>
   16148:	f0 90 67 19 	lds	r15, 0x1967	; 0x801967 <SS80s+0x1>
   1614c:	43 e0       	ldi	r20, 0x03	; 3
   1614e:	e4 0e       	add	r14, r20
   16150:	f1 1c       	adc	r15, r1
   16152:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   16156:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   1615a:	86 01       	movw	r16, r12
   1615c:	2a ee       	ldi	r18, 0xEA	; 234
   1615e:	3c e1       	ldi	r19, 0x1C	; 28
   16160:	b5 01       	movw	r22, r10
   16162:	a4 01       	movw	r20, r8
   16164:	82 81       	ldd	r24, Z+2	; 0x02
   16166:	93 81       	ldd	r25, Z+3	; 0x03
   16168:	0e 94 a4 84 	call	0x10948	; 0x10948 <dbf_open_read>
   1616c:	8c 01       	movw	r16, r24

#if SDEBUG
        if(debuglevel & GPIB_DISK_IO_TIMING)
   1616e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16172:	86 ff       	sbrs	r24, 6
   16174:	04 c0       	rjmp	.+8      	; 0x1617e <SS80_locate_and_read+0x19c>
            gpib_timer_elapsed_end("disk READ ");
   16176:	8f e9       	ldi	r24, 0x9F	; 159
   16178:	90 e1       	ldi	r25, 0x10	; 16
   1617a:	0e 94 64 85 	call	0x10ac8	; 0x10ac8 <gpib_timer_elapsed_end>
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1617e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16182:	85 ff       	sbrs	r24, 5
   16184:	0c c0       	rjmp	.+24     	; 0x1619e <SS80_locate_and_read+0x1bc>
            printf("[SS80 Disk Read %02XH bytes]\n", len);
   16186:	ed b7       	in	r30, 0x3d	; 61
   16188:	fe b7       	in	r31, 0x3e	; 62
   1618a:	15 83       	std	Z+5, r17	; 0x05
   1618c:	04 83       	std	Z+4, r16	; 0x04
   1618e:	2a 89       	ldd	r18, Y+18	; 0x12
   16190:	3b 89       	ldd	r19, Y+19	; 0x13
   16192:	4c 89       	ldd	r20, Y+20	; 0x14
   16194:	21 83       	std	Z+1, r18	; 0x01
   16196:	32 83       	std	Z+2, r19	; 0x02
   16198:	43 83       	std	Z+3, r20	; 0x03
   1619a:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   1619e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
#endif
        if(len < 0)
   161a2:	17 ff       	sbrs	r17, 7
   161a4:	81 cf       	rjmp	.-254    	; 0x160a8 <SS80_locate_and_read+0xc6>
        {
            SS80s->qstat = 1;
   161a6:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   161aa:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   161ae:	91 e0       	ldi	r25, 0x01	; 1
   161b0:	92 83       	std	Z+2, r25	; 0x02
/// @return Return
            if(debuglevel & GPIB_ERR)
   161b2:	80 ff       	sbrs	r24, 0
   161b4:	0a c0       	rjmp	.+20     	; 0x161ca <SS80_locate_and_read+0x1e8>
                printf("[SS80 Disk Read Error]\n");
   161b6:	84 ea       	ldi	r24, 0xA4	; 164
   161b8:	98 e2       	ldi	r25, 0x28	; 40
   161ba:	a0 e0       	ldi	r26, 0x00	; 0
   161bc:	ed b7       	in	r30, 0x3d	; 61
   161be:	fe b7       	in	r31, 0x3e	; 62
   161c0:	81 83       	std	Z+1, r24	; 0x01
   161c2:	92 83       	std	Z+2, r25	; 0x02
   161c4:	a3 83       	std	Z+3, r26	; 0x03
   161c6:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
            return( SS80_error_return() );
   161ca:	d1 de       	rcall	.-606    	; 0x15f6e <SS80_error_return>
   161cc:	68 c0       	rjmp	.+208    	; 0x1629e <SS80_locate_and_read+0x2bc>
            chunk = 256;
            status = 0;                           // GPIB status
        }
        else
        {
            chunk = count;
   161ce:	62 01       	movw	r12, r4
            status |= EOI_FLAG;                   // GPIB EOI on final charater
   161d0:	8c 85       	ldd	r24, Y+12	; 0x0c
   161d2:	9d 85       	ldd	r25, Y+13	; 0x0d
   161d4:	91 60       	ori	r25, 0x01	; 1
   161d6:	9d 87       	std	Y+13, r25	; 0x0d
   161d8:	8c 87       	std	Y+12, r24	; 0x0c
   161da:	af cf       	rjmp	.-162    	; 0x1613a <SS80_locate_and_read+0x158>
        if(debuglevel & GPIB_RW_STR_TIMING)
            gpib_timer_elapsed_end("GPIB write");
#endif
        if( len != chunk)
        {
            SS80s->qstat = 1;
   161dc:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   161e0:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   161e4:	32 82       	std	Z+2, r3	; 0x02
            if(debuglevel & GPIB_ERR)
   161e6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   161ea:	80 ff       	sbrs	r24, 0
   161ec:	0a c0       	rjmp	.+20     	; 0x16202 <SS80_locate_and_read+0x220>
                printf("[SS80 GPIB Write Error]\n");
   161ee:	2d 89       	ldd	r18, Y+21	; 0x15
   161f0:	3e 89       	ldd	r19, Y+22	; 0x16
   161f2:	4f 89       	ldd	r20, Y+23	; 0x17
   161f4:	ed b7       	in	r30, 0x3d	; 61
   161f6:	fe b7       	in	r31, 0x3e	; 62
   161f8:	21 83       	std	Z+1, r18	; 0x01
   161fa:	32 83       	std	Z+2, r19	; 0x02
   161fc:	43 83       	std	Z+3, r20	; 0x03
   161fe:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
            if(status & ERROR_MASK)
   16202:	8c 85       	ldd	r24, Y+12	; 0x0c
   16204:	9d 85       	ldd	r25, Y+13	; 0x0d
   16206:	88 27       	eor	r24, r24
   16208:	90 7d       	andi	r25, 0xD0	; 208
   1620a:	89 2b       	or	r24, r25
   1620c:	09 f4       	brne	.+2      	; 0x16210 <SS80_locate_and_read+0x22e>
   1620e:	64 cf       	rjmp	.-312    	; 0x160d8 <SS80_locate_and_read+0xf6>
            {
                SS80s->Errors |= ERR_GPIB;
   16210:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   16214:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   16218:	83 81       	ldd	r24, Z+3	; 0x03
   1621a:	94 81       	ldd	r25, Z+4	; 0x04
   1621c:	80 62       	ori	r24, 0x20	; 32
   1621e:	94 83       	std	Z+4, r25	; 0x04
   16220:	83 83       	std	Z+3, r24	; 0x03
        count -= len;
    }
///  Note: this should not happen unless we exit on errors above
    if(count > 0)
    {
        if(debuglevel & GPIB_ERR)
   16222:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16226:	80 ff       	sbrs	r24, 0
   16228:	21 c0       	rjmp	.+66     	; 0x1626c <SS80_locate_and_read+0x28a>
            printf("[SS80 Buffered Read DID NOT FINISH]\n");
   1622a:	86 e6       	ldi	r24, 0x66	; 102
   1622c:	98 e2       	ldi	r25, 0x28	; 40
   1622e:	a0 e0       	ldi	r26, 0x00	; 0
   16230:	ed b7       	in	r30, 0x3d	; 61
   16232:	fe b7       	in	r31, 0x3e	; 62
   16234:	81 83       	std	Z+1, r24	; 0x01
   16236:	92 83       	std	Z+2, r25	; 0x02
   16238:	a3 83       	std	Z+3, r26	; 0x03
   1623a:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   1623e:	16 c0       	rjmp	.+44     	; 0x1626c <SS80_locate_and_read+0x28a>
    }
    else
    {
#if SDEBUG
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16240:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16244:	85 ff       	sbrs	r24, 5
   16246:	12 c0       	rjmp	.+36     	; 0x1626c <SS80_locate_and_read+0x28a>
            printf("[SS80 Buffered Read Total(%lXH) bytes]\n", (long) total_bytes);
   16248:	8e 85       	ldd	r24, Y+14	; 0x0e
   1624a:	9f 85       	ldd	r25, Y+15	; 0x0f
   1624c:	a8 89       	ldd	r26, Y+16	; 0x10
   1624e:	b9 89       	ldd	r27, Y+17	; 0x11
   16250:	ed b7       	in	r30, 0x3d	; 61
   16252:	fe b7       	in	r31, 0x3e	; 62
   16254:	84 83       	std	Z+4, r24	; 0x04
   16256:	95 83       	std	Z+5, r25	; 0x05
   16258:	a6 83       	std	Z+6, r26	; 0x06
   1625a:	b7 83       	std	Z+7, r27	; 0x07
   1625c:	8e e3       	ldi	r24, 0x3E	; 62
   1625e:	98 e2       	ldi	r25, 0x28	; 40
   16260:	a0 e0       	ldi	r26, 0x00	; 0
   16262:	81 83       	std	Z+1, r24	; 0x01
   16264:	92 83       	std	Z+2, r25	; 0x02
   16266:	a3 83       	std	Z+3, r26	; 0x03
   16268:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
#endif
    }

    SS80s->AddressBlocks = SS80_Bytes_to_Blocks(Address);
   1626c:	00 91 66 19 	lds	r16, 0x1966	; 0x801966 <SS80s>
   16270:	10 91 67 19 	lds	r17, 0x1967	; 0x801967 <SS80s+0x1>

/// @brief  SS80 Return current block addresss from bytes
/// @return Block Address
uint32_t SS80_Bytes_to_Blocks(uint32_t bytes)
{
    return(bytes / SS80p->UNIT.BYTES_PER_BLOCK);
   16274:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   16278:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
            printf("[SS80 Buffered Read Total(%lXH) bytes]\n", (long) total_bytes);
#endif
    }

    SS80s->AddressBlocks = SS80_Bytes_to_Blocks(Address);
   1627c:	22 89       	ldd	r18, Z+18	; 0x12
   1627e:	33 89       	ldd	r19, Z+19	; 0x13
   16280:	40 e0       	ldi	r20, 0x00	; 0
   16282:	50 e0       	ldi	r21, 0x00	; 0
   16284:	c5 01       	movw	r24, r10
   16286:	b4 01       	movw	r22, r8
   16288:	0e 94 4e e6 	call	0x1cc9c	; 0x1cc9c <__udivmodsi4>
   1628c:	f8 01       	movw	r30, r16
   1628e:	27 83       	std	Z+7, r18	; 0x07
   16290:	30 87       	std	Z+8, r19	; 0x08
   16292:	41 87       	std	Z+9, r20	; 0x09
   16294:	52 87       	std	Z+10, r21	; 0x0a
    return (status & ERROR_MASK);
   16296:	8c 85       	ldd	r24, Y+12	; 0x0c
   16298:	9d 85       	ldd	r25, Y+13	; 0x0d
   1629a:	88 27       	eor	r24, r24
   1629c:	90 7d       	andi	r25, 0xD0	; 208
}
   1629e:	67 96       	adiw	r28, 0x17	; 23
   162a0:	e1 e1       	ldi	r30, 0x11	; 17
   162a2:	0c 94 d8 e6 	jmp	0x1cdb0	; 0x1cdb0 <__epilogue_restores__+0x2>

000162a6 <SS80_Execute_State>:
/// - State: EXEC STATE COMMAND
/// @return 0 on sucess
/// @return GPIB error flags on fail
/// @see gpib.h ERROR_MASK defines for a full list of error flags.
int SS80_Execute_State(void)
{
   162a6:	cf 93       	push	r28
   162a8:	df 93       	push	r29
   162aa:	00 d0       	rcall	.+0      	; 0x162ac <SS80_Execute_State+0x6>
   162ac:	00 d0       	rcall	.+0      	; 0x162ae <SS80_Execute_State+0x8>
   162ae:	1f 92       	push	r1
    int ret = 0;

    gpib_disable_PPR(SS80p->HEADER.PPR);
   162b0:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   162b4:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   162b8:	81 81       	ldd	r24, Z+1	; 0x01
   162ba:	90 e0       	ldi	r25, 0x00	; 0
   162bc:	0e 94 62 86 	call	0x10cc4	; 0x10cc4 <gpib_disable_PPR>
    switch(SS80s->estate)
   162c0:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   162c4:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   162c8:	80 81       	ld	r24, Z
   162ca:	91 81       	ldd	r25, Z+1	; 0x01
   162cc:	82 30       	cpi	r24, 0x02	; 2
   162ce:	91 05       	cpc	r25, r1
   162d0:	89 f0       	breq	.+34     	; 0x162f4 <SS80_Execute_State+0x4e>
   162d2:	3c f4       	brge	.+14     	; 0x162e2 <SS80_Execute_State+0x3c>
   162d4:	00 97       	sbiw	r24, 0x00	; 0
   162d6:	81 f1       	breq	.+96     	; 0x16338 <SS80_Execute_State+0x92>
   162d8:	81 30       	cpi	r24, 0x01	; 1
   162da:	91 05       	cpc	r25, r1
   162dc:	b9 f4       	brne	.+46     	; 0x1630c <SS80_Execute_State+0x66>
    {
        case EXEC_IDLE:
            break;
        case EXEC_LOCATE_AND_READ:
            ret = SS80_locate_and_read();
   162de:	81 de       	rcall	.-766    	; 0x15fe2 <SS80_locate_and_read>
   162e0:	0d c0       	rjmp	.+26     	; 0x162fc <SS80_Execute_State+0x56>
int SS80_Execute_State(void)
{
    int ret = 0;

    gpib_disable_PPR(SS80p->HEADER.PPR);
    switch(SS80s->estate)
   162e2:	83 30       	cpi	r24, 0x03	; 3
   162e4:	91 05       	cpc	r25, r1
   162e6:	41 f0       	breq	.+16     	; 0x162f8 <SS80_Execute_State+0x52>
   162e8:	84 30       	cpi	r24, 0x04	; 4
   162ea:	91 05       	cpc	r25, r1
   162ec:	79 f4       	brne	.+30     	; 0x1630c <SS80_Execute_State+0x66>
        case EXEC_SEND_STATUS:
            ret = SS80_send_status();
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_DESCRIBE:
            ret = SS80_describe();
   162ee:	0e 94 22 a8 	call	0x15044	; 0x15044 <SS80_describe>
        case EXEC_LOCATE_AND_READ:
            ret = SS80_locate_and_read();
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_LOCATE_AND_WRITE:
            ret = SS80_locate_and_write();
   162f2:	04 c0       	rjmp	.+8      	; 0x162fc <SS80_Execute_State+0x56>
   162f4:	53 da       	rcall	.-2906   	; 0x1579c <SS80_locate_and_write>
   162f6:	02 c0       	rjmp	.+4      	; 0x162fc <SS80_Execute_State+0x56>
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_SEND_STATUS:
            ret = SS80_send_status();
   162f8:	0e 94 a1 a7 	call	0x14f42	; 0x14f42 <SS80_send_status>
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_DESCRIBE:
            ret = SS80_describe();
   162fc:	ec 01       	movw	r28, r24
            SS80s->estate = EXEC_IDLE;
   162fe:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   16302:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   16306:	11 82       	std	Z+1, r1	; 0x01
   16308:	10 82       	st	Z, r1
            break;
   1630a:	18 c0       	rjmp	.+48     	; 0x1633c <SS80_Execute_State+0x96>
        default:
            if(debuglevel & GPIB_ERR)
   1630c:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   16310:	20 ff       	sbrs	r18, 0
   16312:	0c c0       	rjmp	.+24     	; 0x1632c <SS80_Execute_State+0x86>
                printf("[SS80 EXEC state:%d error]\n", SS80s->estate);
   16314:	ed b7       	in	r30, 0x3d	; 61
   16316:	fe b7       	in	r31, 0x3e	; 62
   16318:	95 83       	std	Z+5, r25	; 0x05
   1631a:	84 83       	std	Z+4, r24	; 0x04
   1631c:	82 e0       	ldi	r24, 0x02	; 2
   1631e:	99 e2       	ldi	r25, 0x29	; 41
   16320:	a0 e0       	ldi	r26, 0x00	; 0
   16322:	81 83       	std	Z+1, r24	; 0x01
   16324:	92 83       	std	Z+2, r25	; 0x02
   16326:	a3 83       	std	Z+3, r26	; 0x03
   16328:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
            SS80s->estate = EXEC_IDLE;
   1632c:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   16330:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   16334:	11 82       	std	Z+1, r1	; 0x01
   16336:	10 82       	st	Z, r1
/// @return 0 on sucess
/// @return GPIB error flags on fail
/// @see gpib.h ERROR_MASK defines for a full list of error flags.
int SS80_Execute_State(void)
{
    int ret = 0;
   16338:	c0 e0       	ldi	r28, 0x00	; 0
   1633a:	d0 e0       	ldi	r29, 0x00	; 0
            if(debuglevel & GPIB_ERR)
                printf("[SS80 EXEC state:%d error]\n", SS80s->estate);
            SS80s->estate = EXEC_IDLE;
            break;
    }
    gpib_enable_PPR(SS80p->HEADER.PPR);
   1633c:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   16340:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   16344:	81 81       	ldd	r24, Z+1	; 0x01
   16346:	90 e0       	ldi	r25, 0x00	; 0
   16348:	0e 94 2c 86 	call	0x10c58	; 0x10c58 <gpib_enable_PPR>
    return(ret);
}
   1634c:	ce 01       	movw	r24, r28
   1634e:	cd b7       	in	r28, 0x3d	; 61
   16350:	de b7       	in	r29, 0x3e	; 62
   16352:	25 96       	adiw	r28, 0x05	; 5
   16354:	e2 e0       	ldi	r30, 0x02	; 2
   16356:	0c 94 e7 e6 	jmp	0x1cdce	; 0x1cdce <__epilogue_restores__+0x20>

0001635a <SS80_COMMANDS>:
/// @param[in] ch command.
/// @return  0 on send
/// @see GPIB error status
/// @see gpib.h _FLAGS defines for a full list.
int SS80_COMMANDS(uint8_t ch)
{
   1635a:	a9 e0       	ldi	r26, 0x09	; 9
   1635c:	b0 e0       	ldi	r27, 0x00	; 0
   1635e:	e3 eb       	ldi	r30, 0xB3	; 179
   16360:	f1 eb       	ldi	r31, 0xB1	; 177
   16362:	0c 94 ca e6 	jmp	0x1cd94	; 0x1cd94 <__prologue_saves__+0x1e>
   16366:	18 2f       	mov	r17, r24
    if(SS80_is_MTA(talking) || SS80_is_MLA(listening))
   16368:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   1636c:	90 e0       	ldi	r25, 0x00	; 0
   1636e:	0e 94 6e 8c 	call	0x118dc	; 0x118dc <SS80_is_MTA>
   16372:	89 2b       	or	r24, r25
   16374:	19 f0       	breq	.+6      	; 0x1637c <SS80_COMMANDS+0x22>
    {
        if(ch == 0x65 )
   16376:	15 36       	cpi	r17, 0x65	; 101
   16378:	19 f5       	brne	.+70     	; 0x163c0 <SS80_COMMANDS+0x66>
   1637a:	09 c0       	rjmp	.+18     	; 0x1638e <SS80_COMMANDS+0x34>
/// @return  0 on send
/// @see GPIB error status
/// @see gpib.h _FLAGS defines for a full list.
int SS80_COMMANDS(uint8_t ch)
{
    if(SS80_is_MTA(talking) || SS80_is_MLA(listening))
   1637c:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   16380:	90 e0       	ldi	r25, 0x00	; 0
   16382:	0e 94 5c 8c 	call	0x118b8	; 0x118b8 <SS80_is_MLA>
   16386:	ec 01       	movw	r28, r24
   16388:	89 2b       	or	r24, r25
   1638a:	a9 f7       	brne	.-22     	; 0x16376 <SS80_COMMANDS+0x1c>
   1638c:	ad c0       	rjmp	.+346    	; 0x164e8 <SS80_COMMANDS+0x18e>
    {
        if(ch == 0x65 )
        {
            if(SS80_is_MLA(listening))
   1638e:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   16392:	90 e0       	ldi	r25, 0x00	; 0
   16394:	0e 94 5c 8c 	call	0x118b8	; 0x118b8 <SS80_is_MLA>
   16398:	89 2b       	or	r24, r25
   1639a:	09 f4       	brne	.+2      	; 0x1639e <SS80_COMMANDS+0x44>
   1639c:	a2 c0       	rjmp	.+324    	; 0x164e2 <SS80_COMMANDS+0x188>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1639e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   163a2:	85 ff       	sbrs	r24, 5
   163a4:	0a c0       	rjmp	.+20     	; 0x163ba <SS80_COMMANDS+0x60>
                    printf("[SS80 Command State]\n");
   163a6:	8a ee       	ldi	r24, 0xEA	; 234
   163a8:	91 e2       	ldi	r25, 0x21	; 33
   163aa:	a0 e0       	ldi	r26, 0x00	; 0
   163ac:	ed b7       	in	r30, 0x3d	; 61
   163ae:	fe b7       	in	r31, 0x3e	; 62
   163b0:	81 83       	std	Z+1, r24	; 0x01
   163b2:	92 83       	std	Z+2, r25	; 0x02
   163b4:	a3 83       	std	Z+3, r26	; 0x03
   163b6:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
#endif
                return ( SS80_Command_State() );
   163ba:	0e 94 e2 a8 	call	0x151c4	; 0x151c4 <SS80_Command_State>
   163be:	73 c0       	rjmp	.+230    	; 0x164a6 <SS80_COMMANDS+0x14c>
            }
            return(0);
        }

        if(ch == 0x6e )
   163c0:	1e 36       	cpi	r17, 0x6E	; 110
   163c2:	01 f5       	brne	.+64     	; 0x16404 <SS80_COMMANDS+0xaa>
        {
            if(SS80_is_MLA(listening)  || SS80_is_MTA(talking))
   163c4:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   163c8:	90 e0       	ldi	r25, 0x00	; 0
   163ca:	0e 94 5c 8c 	call	0x118b8	; 0x118b8 <SS80_is_MLA>
   163ce:	89 2b       	or	r24, r25
   163d0:	79 f0       	breq	.+30     	; 0x163f0 <SS80_COMMANDS+0x96>
            {
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   163d2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   163d6:	85 ff       	sbrs	r24, 5
   163d8:	13 c0       	rjmp	.+38     	; 0x16400 <SS80_COMMANDS+0xa6>
                    printf("[SS00 Execute State]\n");
   163da:	84 ed       	ldi	r24, 0xD4	; 212
   163dc:	91 e2       	ldi	r25, 0x21	; 33
   163de:	a0 e0       	ldi	r26, 0x00	; 0
   163e0:	ed b7       	in	r30, 0x3d	; 61
   163e2:	fe b7       	in	r31, 0x3e	; 62
   163e4:	81 83       	std	Z+1, r24	; 0x01
   163e6:	92 83       	std	Z+2, r25	; 0x02
   163e8:	a3 83       	std	Z+3, r26	; 0x03
   163ea:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   163ee:	08 c0       	rjmp	.+16     	; 0x16400 <SS80_COMMANDS+0xa6>
            return(0);
        }

        if(ch == 0x6e )
        {
            if(SS80_is_MLA(listening)  || SS80_is_MTA(talking))
   163f0:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   163f4:	90 e0       	ldi	r25, 0x00	; 0
   163f6:	0e 94 6e 8c 	call	0x118dc	; 0x118dc <SS80_is_MTA>
   163fa:	89 2b       	or	r24, r25
   163fc:	51 f7       	brne	.-44     	; 0x163d2 <SS80_COMMANDS+0x78>
   163fe:	71 c0       	rjmp	.+226    	; 0x164e2 <SS80_COMMANDS+0x188>
            {
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
                    printf("[SS00 Execute State]\n");
                return ( SS80_Execute_State() );
   16400:	52 df       	rcall	.-348    	; 0x162a6 <SS80_Execute_State>
   16402:	51 c0       	rjmp	.+162    	; 0x164a6 <SS80_COMMANDS+0x14c>

            }
            return(0);
        }

        if(ch == 0x70 )
   16404:	10 37       	cpi	r17, 0x70	; 112
   16406:	b9 f5       	brne	.+110    	; 0x16476 <SS80_COMMANDS+0x11c>
        {
            if(SS80_is_MTA(talking) )
   16408:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   1640c:	90 e0       	ldi	r25, 0x00	; 0
   1640e:	0e 94 6e 8c 	call	0x118dc	; 0x118dc <SS80_is_MTA>
   16412:	89 2b       	or	r24, r25
   16414:	81 f0       	breq	.+32     	; 0x16436 <SS80_COMMANDS+0xdc>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16416:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1641a:	85 ff       	sbrs	r24, 5
   1641c:	0a c0       	rjmp	.+20     	; 0x16432 <SS80_COMMANDS+0xd8>
                    printf("[SS80 Report State]\n");
   1641e:	8f eb       	ldi	r24, 0xBF	; 191
   16420:	91 e2       	ldi	r25, 0x21	; 33
   16422:	a0 e0       	ldi	r26, 0x00	; 0
   16424:	ed b7       	in	r30, 0x3d	; 61
   16426:	fe b7       	in	r31, 0x3e	; 62
   16428:	81 83       	std	Z+1, r24	; 0x01
   1642a:	92 83       	std	Z+2, r25	; 0x02
   1642c:	a3 83       	std	Z+3, r26	; 0x03
   1642e:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
#endif
                return( SS80_Report() );
   16432:	46 db       	rcall	.-2420   	; 0x15ac0 <SS80_Report>
   16434:	38 c0       	rjmp	.+112    	; 0x164a6 <SS80_COMMANDS+0x14c>
            }

            if(SS80_is_MLA(listening))
   16436:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   1643a:	90 e0       	ldi	r25, 0x00	; 0
   1643c:	0e 94 5c 8c 	call	0x118b8	; 0x118b8 <SS80_is_MLA>
   16440:	89 2b       	or	r24, r25
   16442:	09 f4       	brne	.+2      	; 0x16446 <SS80_COMMANDS+0xec>
   16444:	4e c0       	rjmp	.+156    	; 0x164e2 <SS80_COMMANDS+0x188>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16446:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1644a:	85 ff       	sbrs	r24, 5
   1644c:	0a c0       	rjmp	.+20     	; 0x16462 <SS80_COMMANDS+0x108>
                    printf("[Amigo Clear]\n");
   1644e:	80 eb       	ldi	r24, 0xB0	; 176
   16450:	91 e2       	ldi	r25, 0x21	; 33
   16452:	a0 e0       	ldi	r26, 0x00	; 0
   16454:	ed b7       	in	r30, 0x3d	; 61
   16456:	fe b7       	in	r31, 0x3e	; 62
   16458:	81 83       	std	Z+1, r24	; 0x01
   1645a:	92 83       	std	Z+2, r25	; 0x02
   1645c:	a3 83       	std	Z+3, r26	; 0x03
   1645e:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
#endif
                gpib_disable_PPR(SS80p->HEADER.PPR);
   16462:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   16466:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   1646a:	81 81       	ldd	r24, Z+1	; 0x01
   1646c:	90 e0       	ldi	r25, 0x00	; 0
   1646e:	0e 94 62 86 	call	0x10cc4	; 0x10cc4 <gpib_disable_PPR>
                return( SS80_Amigo_Clear() );
   16472:	1d dc       	rcall	.-1990   	; 0x15cae <SS80_Amigo_Clear>
   16474:	18 c0       	rjmp	.+48     	; 0x164a6 <SS80_COMMANDS+0x14c>
            }
            return (0);
        }
        if(ch == 0x72 )
   16476:	12 37       	cpi	r17, 0x72	; 114
   16478:	c1 f4       	brne	.+48     	; 0x164aa <SS80_COMMANDS+0x150>
        {
            if(SS80_is_MLA(listening) )
   1647a:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   1647e:	90 e0       	ldi	r25, 0x00	; 0
   16480:	0e 94 5c 8c 	call	0x118b8	; 0x118b8 <SS80_is_MLA>
   16484:	89 2b       	or	r24, r25
   16486:	89 f0       	breq	.+34     	; 0x164aa <SS80_COMMANDS+0x150>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16488:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1648c:	85 ff       	sbrs	r24, 5
   1648e:	0a c0       	rjmp	.+20     	; 0x164a4 <SS80_COMMANDS+0x14a>
                    printf("[SS80 Transparent]\n");
   16490:	8c e9       	ldi	r24, 0x9C	; 156
   16492:	91 e2       	ldi	r25, 0x21	; 33
   16494:	a0 e0       	ldi	r26, 0x00	; 0
   16496:	ed b7       	in	r30, 0x3d	; 61
   16498:	fe b7       	in	r31, 0x3e	; 62
   1649a:	81 83       	std	Z+1, r24	; 0x01
   1649c:	92 83       	std	Z+2, r25	; 0x02
   1649e:	a3 83       	std	Z+3, r26	; 0x03
   164a0:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
#endif
                return( SS80_Transparent_State() );
   164a4:	58 dc       	rcall	.-1872   	; 0x15d56 <SS80_Transparent_State>
   164a6:	ec 01       	movw	r28, r24
   164a8:	3b c0       	rjmp	.+118    	; 0x16520 <SS80_COMMANDS+0x1c6>
            }
        }
        if(debuglevel & GPIB_ERR)
   164aa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   164ae:	80 ff       	sbrs	r24, 0
   164b0:	18 c0       	rjmp	.+48     	; 0x164e2 <SS80_COMMANDS+0x188>
            printf("[SS80 SC Unknown: %02XH, listen:%02XH, talk:%02XH]\n",
   164b2:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   164b6:	90 e0       	ldi	r25, 0x00	; 0
   164b8:	ed b7       	in	r30, 0x3d	; 61
   164ba:	fe b7       	in	r31, 0x3e	; 62
   164bc:	91 87       	std	Z+9, r25	; 0x09
   164be:	80 87       	std	Z+8, r24	; 0x08
   164c0:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   164c4:	90 e0       	ldi	r25, 0x00	; 0
   164c6:	97 83       	std	Z+7, r25	; 0x07
   164c8:	86 83       	std	Z+6, r24	; 0x06
   164ca:	81 2f       	mov	r24, r17
   164cc:	90 e0       	ldi	r25, 0x00	; 0
   164ce:	95 83       	std	Z+5, r25	; 0x05
   164d0:	84 83       	std	Z+4, r24	; 0x04
   164d2:	88 e6       	ldi	r24, 0x68	; 104
   164d4:	91 e2       	ldi	r25, 0x21	; 33
   164d6:	a0 e0       	ldi	r26, 0x00	; 0
   164d8:	81 83       	std	Z+1, r24	; 0x01
   164da:	92 83       	std	Z+2, r25	; 0x02
   164dc:	a3 83       	std	Z+3, r26	; 0x03
   164de:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
                0xff & ch, 0xff & listening, 0xff & talking);
        return(0);
   164e2:	c0 e0       	ldi	r28, 0x00	; 0
   164e4:	d0 e0       	ldi	r29, 0x00	; 0
   164e6:	1c c0       	rjmp	.+56     	; 0x16520 <SS80_COMMANDS+0x1c6>
    }

    if(debuglevel & GPIB_ERR)
   164e8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   164ec:	80 ff       	sbrs	r24, 0
   164ee:	f9 cf       	rjmp	.-14     	; 0x164e2 <SS80_COMMANDS+0x188>
        printf("[SS80 Unknown SC: %02XH, listen:%02XH, talk:%02XH]\n",
   164f0:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   164f4:	90 e0       	ldi	r25, 0x00	; 0
   164f6:	ed b7       	in	r30, 0x3d	; 61
   164f8:	fe b7       	in	r31, 0x3e	; 62
   164fa:	91 87       	std	Z+9, r25	; 0x09
   164fc:	80 87       	std	Z+8, r24	; 0x08
   164fe:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   16502:	90 e0       	ldi	r25, 0x00	; 0
   16504:	97 83       	std	Z+7, r25	; 0x07
   16506:	86 83       	std	Z+6, r24	; 0x06
   16508:	81 2f       	mov	r24, r17
   1650a:	90 e0       	ldi	r25, 0x00	; 0
   1650c:	95 83       	std	Z+5, r25	; 0x05
   1650e:	84 83       	std	Z+4, r24	; 0x04
   16510:	84 e3       	ldi	r24, 0x34	; 52
   16512:	91 e2       	ldi	r25, 0x21	; 33
   16514:	a0 e0       	ldi	r26, 0x00	; 0
   16516:	81 83       	std	Z+1, r24	; 0x01
   16518:	92 83       	std	Z+2, r25	; 0x02
   1651a:	a3 83       	std	Z+3, r26	; 0x03
   1651c:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
            0xff & ch, 0xff & listening, 0xff & talking);
    return(0);
}
   16520:	ce 01       	movw	r24, r28
   16522:	cd b7       	in	r28, 0x3d	; 61
   16524:	de b7       	in	r29, 0x3e	; 62
   16526:	29 96       	adiw	r28, 0x09	; 9
   16528:	e3 e0       	ldi	r30, 0x03	; 3
   1652a:	0c 94 e6 e6 	jmp	0x1cdcc	; 0x1cdcc <__epilogue_restores__+0x1e>

0001652e <amigo_overflow_check>:
    }
/// @todo FIXME
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
    AMIGOs->dsj = 0;
    return(status & ERROR_MASK);
}
   1652e:	cf 92       	push	r12
   16530:	df 92       	push	r13
   16532:	ef 92       	push	r14
   16534:	0f 93       	push	r16
   16536:	1f 93       	push	r17
   16538:	cf 93       	push	r28
   1653a:	df 93       	push	r29
   1653c:	00 d0       	rcall	.+0      	; 0x1653e <amigo_overflow_check+0x10>
   1653e:	00 d0       	rcall	.+0      	; 0x16540 <amigo_overflow_check+0x12>
   16540:	1f 92       	push	r1
   16542:	ec 01       	movw	r28, r24
   16544:	8b 01       	movw	r16, r22
   16546:	80 e0       	ldi	r24, 0x00	; 0
   16548:	90 e0       	ldi	r25, 0x00	; 0
   1654a:	2c ee       	ldi	r18, 0xEC	; 236
   1654c:	30 e3       	ldi	r19, 0x30	; 48
   1654e:	69 01       	movw	r12, r18
   16550:	e1 2c       	mov	r14, r1
   16552:	2d 81       	ldd	r18, Y+5	; 0x05
   16554:	30 e0       	ldi	r19, 0x00	; 0
   16556:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   1655a:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   1655e:	42 85       	ldd	r20, Z+10	; 0x0a
   16560:	53 85       	ldd	r21, Z+11	; 0x0b
   16562:	24 17       	cp	r18, r20
   16564:	35 07       	cpc	r19, r21
   16566:	64 f1       	brlt	.+88     	; 0x165c0 <amigo_overflow_check+0x92>
   16568:	1d 82       	std	Y+5, r1	; 0x05
   1656a:	2c 81       	ldd	r18, Y+4	; 0x04
   1656c:	2f 5f       	subi	r18, 0xFF	; 255
   1656e:	2c 83       	std	Y+4, r18	; 0x04
   16570:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16574:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16578:	2c 81       	ldd	r18, Y+4	; 0x04
   1657a:	30 e0       	ldi	r19, 0x00	; 0
   1657c:	44 85       	ldd	r20, Z+12	; 0x0c
   1657e:	55 85       	ldd	r21, Z+13	; 0x0d
   16580:	24 17       	cp	r18, r20
   16582:	35 07       	cpc	r19, r21
   16584:	34 f3       	brlt	.-52     	; 0x16552 <amigo_overflow_check+0x24>
   16586:	1c 82       	std	Y+4, r1	; 0x04
   16588:	2b 81       	ldd	r18, Y+3	; 0x03
   1658a:	2f 5f       	subi	r18, 0xFF	; 255
   1658c:	2b 83       	std	Y+3, r18	; 0x03
   1658e:	30 e0       	ldi	r19, 0x00	; 0
   16590:	46 85       	ldd	r20, Z+14	; 0x0e
   16592:	57 85       	ldd	r21, Z+15	; 0x0f
   16594:	24 17       	cp	r18, r20
   16596:	35 07       	cpc	r19, r21
   16598:	5c f3       	brlt	.-42     	; 0x16570 <amigo_overflow_check+0x42>
   1659a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1659e:	80 ff       	sbrs	r24, 0
   165a0:	0c c0       	rjmp	.+24     	; 0x165ba <amigo_overflow_check+0x8c>
   165a2:	01 15       	cp	r16, r1
   165a4:	11 05       	cpc	r17, r1
   165a6:	49 f0       	breq	.+18     	; 0x165ba <amigo_overflow_check+0x8c>
   165a8:	ed b7       	in	r30, 0x3d	; 61
   165aa:	fe b7       	in	r31, 0x3e	; 62
   165ac:	15 83       	std	Z+5, r17	; 0x05
   165ae:	04 83       	std	Z+4, r16	; 0x04
   165b0:	c1 82       	std	Z+1, r12	; 0x01
   165b2:	d2 82       	std	Z+2, r13	; 0x02
   165b4:	e3 82       	std	Z+3, r14	; 0x03
   165b6:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   165ba:	81 e0       	ldi	r24, 0x01	; 1
   165bc:	90 e0       	ldi	r25, 0x00	; 0
   165be:	d8 cf       	rjmp	.-80     	; 0x16570 <amigo_overflow_check+0x42>
   165c0:	0f 90       	pop	r0
   165c2:	0f 90       	pop	r0
   165c4:	0f 90       	pop	r0
   165c6:	0f 90       	pop	r0
   165c8:	0f 90       	pop	r0
   165ca:	df 91       	pop	r29
   165cc:	cf 91       	pop	r28
   165ce:	1f 91       	pop	r17
   165d0:	0f 91       	pop	r16
   165d2:	ef 90       	pop	r14
   165d4:	df 90       	pop	r13
   165d6:	cf 90       	pop	r12
   165d8:	08 95       	ret

000165da <amigo_chs_to_logical>:
   165da:	a1 e1       	ldi	r26, 0x11	; 17
   165dc:	b0 e0       	ldi	r27, 0x00	; 0
   165de:	e3 ef       	ldi	r30, 0xF3	; 243
   165e0:	f2 eb       	ldi	r31, 0xB2	; 178
   165e2:	0c 94 bf e6 	jmp	0x1cd7e	; 0x1cd7e <__prologue_saves__+0x8>
   165e6:	8b 01       	movw	r16, r22
   165e8:	60 91 64 19 	lds	r22, 0x1964	; 0x801964 <AMIGOp>
   165ec:	70 91 65 19 	lds	r23, 0x1965	; 0x801965 <AMIGOp+0x1>
   165f0:	fb 01       	movw	r30, r22
   165f2:	42 85       	ldd	r20, Z+10	; 0x0a
   165f4:	53 85       	ldd	r21, Z+11	; 0x0b
   165f6:	fc 01       	movw	r30, r24
   165f8:	c4 81       	ldd	r28, Z+4	; 0x04
   165fa:	d0 e0       	ldi	r29, 0x00	; 0
   165fc:	4c 9f       	mul	r20, r28
   165fe:	90 01       	movw	r18, r0
   16600:	4d 9f       	mul	r20, r29
   16602:	30 0d       	add	r19, r0
   16604:	5c 9f       	mul	r21, r28
   16606:	30 0d       	add	r19, r0
   16608:	11 24       	eor	r1, r1
   1660a:	49 01       	movw	r8, r18
   1660c:	33 0f       	add	r19, r19
   1660e:	aa 08       	sbc	r10, r10
   16610:	bb 08       	sbc	r11, r11
   16612:	63 80       	ldd	r6, Z+3	; 0x03
   16614:	71 2c       	mov	r7, r1
   16616:	fb 01       	movw	r30, r22
   16618:	e4 84       	ldd	r14, Z+12	; 0x0c
   1661a:	f5 84       	ldd	r15, Z+13	; 0x0d
   1661c:	4e 9d       	mul	r20, r14
   1661e:	d0 01       	movw	r26, r0
   16620:	4f 9d       	mul	r20, r15
   16622:	b0 0d       	add	r27, r0
   16624:	5e 9d       	mul	r21, r14
   16626:	b0 0d       	add	r27, r0
   16628:	11 24       	eor	r1, r1
   1662a:	a6 9d       	mul	r26, r6
   1662c:	90 01       	movw	r18, r0
   1662e:	a7 9d       	mul	r26, r7
   16630:	30 0d       	add	r19, r0
   16632:	b6 9d       	mul	r27, r6
   16634:	30 0d       	add	r19, r0
   16636:	11 24       	eor	r1, r1
   16638:	69 01       	movw	r12, r18
   1663a:	33 0f       	add	r19, r19
   1663c:	ee 08       	sbc	r14, r14
   1663e:	ff 08       	sbc	r15, r15
   16640:	8c 0c       	add	r8, r12
   16642:	9d 1c       	adc	r9, r13
   16644:	ae 1c       	adc	r10, r14
   16646:	bf 1c       	adc	r11, r15
   16648:	fc 01       	movw	r30, r24
   1664a:	f5 80       	ldd	r15, Z+5	; 0x05
   1664c:	a5 01       	movw	r20, r10
   1664e:	94 01       	movw	r18, r8
   16650:	2f 0d       	add	r18, r15
   16652:	31 1d       	adc	r19, r1
   16654:	41 1d       	adc	r20, r1
   16656:	51 1d       	adc	r21, r1
   16658:	fb 01       	movw	r30, r22
   1665a:	a0 85       	ldd	r26, Z+8	; 0x08
   1665c:	b1 85       	ldd	r27, Z+9	; 0x09
   1665e:	0e 94 a5 e6 	call	0x1cd4a	; 0x1cd4a <__mulshisi3>
   16662:	4b 01       	movw	r8, r22
   16664:	5c 01       	movw	r10, r24
   16666:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1666a:	85 ff       	sbrs	r24, 5
   1666c:	22 c0       	rjmp	.+68     	; 0x166b2 <amigo_chs_to_logical+0xd8>
   1666e:	8f 2d       	mov	r24, r15
   16670:	90 e0       	ldi	r25, 0x00	; 0
   16672:	ed b7       	in	r30, 0x3d	; 61
   16674:	fe b7       	in	r31, 0x3e	; 62
   16676:	91 8b       	std	Z+17, r25	; 0x11
   16678:	80 8b       	std	Z+16, r24	; 0x10
   1667a:	d7 87       	std	Z+15, r29	; 0x0f
   1667c:	c6 87       	std	Z+14, r28	; 0x0e
   1667e:	75 86       	std	Z+13, r7	; 0x0d
   16680:	64 86       	std	Z+12, r6	; 0x0c
   16682:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16686:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   1668a:	81 81       	ldd	r24, Z+1	; 0x01
   1668c:	90 e0       	ldi	r25, 0x00	; 0
   1668e:	ed b7       	in	r30, 0x3d	; 61
   16690:	fe b7       	in	r31, 0x3e	; 62
   16692:	93 87       	std	Z+11, r25	; 0x0b
   16694:	82 87       	std	Z+10, r24	; 0x0a
   16696:	86 82       	std	Z+6, r8	; 0x06
   16698:	97 82       	std	Z+7, r9	; 0x07
   1669a:	a0 86       	std	Z+8, r10	; 0x08
   1669c:	b1 86       	std	Z+9, r11	; 0x09
   1669e:	15 83       	std	Z+5, r17	; 0x05
   166a0:	04 83       	std	Z+4, r16	; 0x04
   166a2:	89 e9       	ldi	r24, 0x99	; 153
   166a4:	90 e3       	ldi	r25, 0x30	; 48
   166a6:	a0 e0       	ldi	r26, 0x00	; 0
   166a8:	81 83       	std	Z+1, r24	; 0x01
   166aa:	92 83       	std	Z+2, r25	; 0x02
   166ac:	a3 83       	std	Z+3, r26	; 0x03
   166ae:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   166b2:	c5 01       	movw	r24, r10
   166b4:	b4 01       	movw	r22, r8
   166b6:	cd b7       	in	r28, 0x3d	; 61
   166b8:	de b7       	in	r29, 0x3e	; 62
   166ba:	61 96       	adiw	r28, 0x11	; 17
   166bc:	ee e0       	ldi	r30, 0x0E	; 14
   166be:	0c 94 db e6 	jmp	0x1cdb6	; 0x1cdb6 <__epilogue_restores__+0x8>

000166c2 <amigo_init>:
   166c2:	ff 92       	push	r15
   166c4:	0f 93       	push	r16
   166c6:	1f 93       	push	r17
   166c8:	cf 93       	push	r28
   166ca:	df 93       	push	r29
   166cc:	0d e6       	ldi	r16, 0x6D	; 109
   166ce:	1f e1       	ldi	r17, 0x1F	; 31
   166d0:	cb e0       	ldi	r28, 0x0B	; 11
   166d2:	d4 e0       	ldi	r29, 0x04	; 4
   166d4:	82 e0       	ldi	r24, 0x02	; 2
   166d6:	f8 2e       	mov	r15, r24
   166d8:	d8 01       	movw	r26, r16
   166da:	8c 91       	ld	r24, X
   166dc:	81 30       	cpi	r24, 0x01	; 1
   166de:	31 f5       	brne	.+76     	; 0x1672c <amigo_init+0x6a>
   166e0:	8c 2f       	mov	r24, r28
   166e2:	0e 94 79 97 	call	0x12ef2	; 0x12ef2 <set_active_device>
   166e6:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   166ea:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   166ee:	10 82       	st	Z, r1
   166f0:	9f 01       	movw	r18, r30
   166f2:	27 5f       	subi	r18, 0xF7	; 247
   166f4:	3f 4f       	sbci	r19, 0xFF	; 255
   166f6:	d9 01       	movw	r26, r18
   166f8:	8d 2f       	mov	r24, r29
   166fa:	1d 92       	st	X+, r1
   166fc:	8a 95       	dec	r24
   166fe:	e9 f7       	brne	.-6      	; 0x166fa <amigo_init+0x38>
   16700:	2c 5f       	subi	r18, 0xFC	; 252
   16702:	3f 4f       	sbci	r19, 0xFF	; 255
   16704:	d9 01       	movw	r26, r18
   16706:	8d 2f       	mov	r24, r29
   16708:	1d 92       	st	X+, r1
   1670a:	8a 95       	dec	r24
   1670c:	e9 f7       	brne	.-6      	; 0x16708 <amigo_init+0x46>
   1670e:	11 82       	std	Z+1, r1	; 0x01
   16710:	15 82       	std	Z+5, r1	; 0x05
   16712:	14 82       	std	Z+4, r1	; 0x04
   16714:	13 82       	std	Z+3, r1	; 0x03
   16716:	f6 82       	std	Z+6, r15	; 0x06
   16718:	10 86       	std	Z+8, r1	; 0x08
   1671a:	17 82       	std	Z+7, r1	; 0x07
   1671c:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16720:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16724:	81 81       	ldd	r24, Z+1	; 0x01
   16726:	90 e0       	ldi	r25, 0x00	; 0
   16728:	0e 94 62 86 	call	0x10cc4	; 0x10cc4 <gpib_disable_PPR>
   1672c:	0b 50       	subi	r16, 0x0B	; 11
   1672e:	11 09       	sbc	r17, r1
   16730:	c1 50       	subi	r28, 0x01	; 1
   16732:	90 f6       	brcc	.-92     	; 0x166d8 <amigo_init+0x16>
   16734:	cd b7       	in	r28, 0x3d	; 61
   16736:	de b7       	in	r29, 0x3e	; 62
   16738:	e5 e0       	ldi	r30, 0x05	; 5
   1673a:	0c 94 e4 e6 	jmp	0x1cdc8	; 0x1cdc8 <__epilogue_restores__+0x1a>

0001673e <amigo_request_logical_address>:
   1673e:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16742:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16746:	15 86       	std	Z+13, r1	; 0x0d
   16748:	83 81       	ldd	r24, Z+3	; 0x03
   1674a:	86 87       	std	Z+14, r24	; 0x0e
   1674c:	84 81       	ldd	r24, Z+4	; 0x04
   1674e:	87 87       	std	Z+15, r24	; 0x0f
   16750:	85 81       	ldd	r24, Z+5	; 0x05
   16752:	80 8b       	std	Z+16, r24	; 0x10
   16754:	80 e0       	ldi	r24, 0x00	; 0
   16756:	90 e0       	ldi	r25, 0x00	; 0
   16758:	08 95       	ret

0001675a <amigo_request_status>:
   1675a:	00 d0       	rcall	.+0      	; 0x1675c <amigo_request_status+0x2>
   1675c:	1f 92       	push	r1
   1675e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16762:	85 ff       	sbrs	r24, 5
   16764:	0a c0       	rjmp	.+20     	; 0x1677a <amigo_request_status+0x20>
   16766:	8c e6       	ldi	r24, 0x6C	; 108
   16768:	91 e3       	ldi	r25, 0x31	; 49
   1676a:	a0 e0       	ldi	r26, 0x00	; 0
   1676c:	ed b7       	in	r30, 0x3d	; 61
   1676e:	fe b7       	in	r31, 0x3e	; 62
   16770:	81 83       	std	Z+1, r24	; 0x01
   16772:	92 83       	std	Z+2, r25	; 0x02
   16774:	a3 83       	std	Z+3, r26	; 0x03
   16776:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   1677a:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   1677e:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16782:	11 86       	std	Z+9, r1	; 0x09
   16784:	81 81       	ldd	r24, Z+1	; 0x01
   16786:	82 87       	std	Z+10, r24	; 0x0a
   16788:	8d e0       	ldi	r24, 0x0D	; 13
   1678a:	83 87       	std	Z+11, r24	; 0x0b
   1678c:	14 86       	std	Z+12, r1	; 0x0c
   1678e:	0e 94 db 6f 	call	0xdfb6	; 0xdfb6 <mmc_wp_status>
   16792:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16796:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   1679a:	89 2b       	or	r24, r25
   1679c:	19 f0       	breq	.+6      	; 0x167a4 <amigo_request_status+0x4a>
   1679e:	84 85       	ldd	r24, Z+12	; 0x0c
   167a0:	80 66       	ori	r24, 0x60	; 96
   167a2:	84 87       	std	Z+12, r24	; 0x0c
   167a4:	86 81       	ldd	r24, Z+6	; 0x06
   167a6:	82 30       	cpi	r24, 0x02	; 2
   167a8:	31 f4       	brne	.+12     	; 0x167b6 <amigo_request_status+0x5c>
   167aa:	83 e1       	ldi	r24, 0x13	; 19
   167ac:	81 87       	std	Z+9, r24	; 0x09
   167ae:	84 85       	ldd	r24, Z+12	; 0x0c
   167b0:	88 60       	ori	r24, 0x08	; 8
   167b2:	84 87       	std	Z+12, r24	; 0x0c
   167b4:	21 c0       	rjmp	.+66     	; 0x167f8 <amigo_request_status+0x9e>
   167b6:	27 81       	ldd	r18, Z+7	; 0x07
   167b8:	30 85       	ldd	r19, Z+8	; 0x08
   167ba:	21 15       	cp	r18, r1
   167bc:	31 05       	cpc	r19, r1
   167be:	11 f4       	brne	.+4      	; 0x167c4 <amigo_request_status+0x6a>
   167c0:	81 30       	cpi	r24, 0x01	; 1
   167c2:	d1 f4       	brne	.+52     	; 0x167f8 <amigo_request_status+0x9e>
   167c4:	26 fd       	sbrc	r18, 6
   167c6:	0c c0       	rjmp	.+24     	; 0x167e0 <amigo_request_status+0x86>
   167c8:	25 ff       	sbrs	r18, 5
   167ca:	03 c0       	rjmp	.+6      	; 0x167d2 <amigo_request_status+0x78>
   167cc:	8a e0       	ldi	r24, 0x0A	; 10
   167ce:	81 87       	std	Z+9, r24	; 0x09
   167d0:	0d c0       	rjmp	.+26     	; 0x167ec <amigo_request_status+0x92>
   167d2:	84 85       	ldd	r24, Z+12	; 0x0c
   167d4:	24 ff       	sbrs	r18, 4
   167d6:	02 c0       	rjmp	.+4      	; 0x167dc <amigo_request_status+0x82>
   167d8:	83 60       	ori	r24, 0x03	; 3
   167da:	07 c0       	rjmp	.+14     	; 0x167ea <amigo_request_status+0x90>
   167dc:	21 ff       	sbrs	r18, 1
   167de:	02 c0       	rjmp	.+4      	; 0x167e4 <amigo_request_status+0x8a>
   167e0:	83 e1       	ldi	r24, 0x13	; 19
   167e2:	f5 cf       	rjmp	.-22     	; 0x167ce <amigo_request_status+0x74>
   167e4:	22 ff       	sbrs	r18, 2
   167e6:	02 c0       	rjmp	.+4      	; 0x167ec <amigo_request_status+0x92>
   167e8:	84 60       	ori	r24, 0x04	; 4
   167ea:	84 87       	std	Z+12, r24	; 0x0c
   167ec:	84 85       	ldd	r24, Z+12	; 0x0c
   167ee:	80 61       	ori	r24, 0x10	; 16
   167f0:	84 87       	std	Z+12, r24	; 0x0c
   167f2:	83 85       	ldd	r24, Z+11	; 0x0b
   167f4:	80 68       	ori	r24, 0x80	; 128
   167f6:	83 87       	std	Z+11, r24	; 0x0b
   167f8:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   167fc:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16800:	81 81       	ldd	r24, Z+1	; 0x01
   16802:	90 e0       	ldi	r25, 0x00	; 0
   16804:	0e 94 2c 86 	call	0x10c58	; 0x10c58 <gpib_enable_PPR>
   16808:	80 e0       	ldi	r24, 0x00	; 0
   1680a:	90 e0       	ldi	r25, 0x00	; 0
   1680c:	0f 90       	pop	r0
   1680e:	0f 90       	pop	r0
   16810:	0f 90       	pop	r0
   16812:	08 95       	ret

00016814 <amigo_send_logical_address>:
   16814:	a5 e0       	ldi	r26, 0x05	; 5
   16816:	b0 e0       	ldi	r27, 0x00	; 0
   16818:	e0 e1       	ldi	r30, 0x10	; 16
   1681a:	f4 eb       	ldi	r31, 0xB4	; 180
   1681c:	0c 94 cb e6 	jmp	0x1cd96	; 0x1cd96 <__prologue_saves__+0x20>
   16820:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16824:	85 ff       	sbrs	r24, 5
   16826:	0a c0       	rjmp	.+20     	; 0x1683c <amigo_send_logical_address+0x28>
   16828:	8e e4       	ldi	r24, 0x4E	; 78
   1682a:	91 e3       	ldi	r25, 0x31	; 49
   1682c:	a0 e0       	ldi	r26, 0x00	; 0
   1682e:	ed b7       	in	r30, 0x3d	; 61
   16830:	fe b7       	in	r31, 0x3e	; 62
   16832:	81 83       	std	Z+1, r24	; 0x01
   16834:	92 83       	std	Z+2, r25	; 0x02
   16836:	a3 83       	std	Z+3, r26	; 0x03
   16838:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   1683c:	80 e0       	ldi	r24, 0x00	; 0
   1683e:	91 e0       	ldi	r25, 0x01	; 1
   16840:	9d 83       	std	Y+5, r25	; 0x05
   16842:	8c 83       	std	Y+4, r24	; 0x04
   16844:	80 91 62 19 	lds	r24, 0x1962	; 0x801962 <AMIGOs>
   16848:	90 91 63 19 	lds	r25, 0x1963	; 0x801963 <AMIGOs+0x1>
   1684c:	ae 01       	movw	r20, r28
   1684e:	4c 5f       	subi	r20, 0xFC	; 252
   16850:	5f 4f       	sbci	r21, 0xFF	; 255
   16852:	64 e0       	ldi	r22, 0x04	; 4
   16854:	70 e0       	ldi	r23, 0x00	; 0
   16856:	0d 96       	adiw	r24, 0x0d	; 13
   16858:	0e 94 5c 8b 	call	0x116b8	; 0x116b8 <gpib_write_str>
   1685c:	2c 81       	ldd	r18, Y+4	; 0x04
   1685e:	3d 81       	ldd	r19, Y+5	; 0x05
   16860:	22 27       	eor	r18, r18
   16862:	30 7d       	andi	r19, 0xD0	; 208
   16864:	23 2b       	or	r18, r19
   16866:	11 f4       	brne	.+4      	; 0x1686c <amigo_send_logical_address+0x58>
   16868:	04 97       	sbiw	r24, 0x04	; 4
   1686a:	c9 f0       	breq	.+50     	; 0x1689e <amigo_send_logical_address+0x8a>
   1686c:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16870:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16874:	87 81       	ldd	r24, Z+7	; 0x07
   16876:	90 85       	ldd	r25, Z+8	; 0x08
   16878:	80 62       	ori	r24, 0x20	; 32
   1687a:	90 87       	std	Z+8, r25	; 0x08
   1687c:	87 83       	std	Z+7, r24	; 0x07
   1687e:	81 e0       	ldi	r24, 0x01	; 1
   16880:	86 83       	std	Z+6, r24	; 0x06
   16882:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16886:	80 ff       	sbrs	r24, 0
   16888:	0a c0       	rjmp	.+20     	; 0x1689e <amigo_send_logical_address+0x8a>
   1688a:	84 e3       	ldi	r24, 0x34	; 52
   1688c:	91 e3       	ldi	r25, 0x31	; 49
   1688e:	a0 e0       	ldi	r26, 0x00	; 0
   16890:	ed b7       	in	r30, 0x3d	; 61
   16892:	fe b7       	in	r31, 0x3e	; 62
   16894:	81 83       	std	Z+1, r24	; 0x01
   16896:	92 83       	std	Z+2, r25	; 0x02
   16898:	a3 83       	std	Z+3, r26	; 0x03
   1689a:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   1689e:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   168a2:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   168a6:	81 81       	ldd	r24, Z+1	; 0x01
   168a8:	90 e0       	ldi	r25, 0x00	; 0
   168aa:	0e 94 2c 86 	call	0x10c58	; 0x10c58 <gpib_enable_PPR>
   168ae:	8c 81       	ldd	r24, Y+4	; 0x04
   168b0:	9d 81       	ldd	r25, Y+5	; 0x05
   168b2:	88 27       	eor	r24, r24
   168b4:	90 7d       	andi	r25, 0xD0	; 208
   168b6:	25 96       	adiw	r28, 0x05	; 5
   168b8:	e2 e0       	ldi	r30, 0x02	; 2
   168ba:	0c 94 e7 e6 	jmp	0x1cdce	; 0x1cdce <__epilogue_restores__+0x20>

000168be <amigo_send_status>:
   168be:	a5 e0       	ldi	r26, 0x05	; 5
   168c0:	b0 e0       	ldi	r27, 0x00	; 0
   168c2:	e5 e6       	ldi	r30, 0x65	; 101
   168c4:	f4 eb       	ldi	r31, 0xB4	; 180
   168c6:	0c 94 cb e6 	jmp	0x1cd96	; 0x1cd96 <__prologue_saves__+0x20>
   168ca:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   168ce:	85 ff       	sbrs	r24, 5
   168d0:	0a c0       	rjmp	.+20     	; 0x168e6 <amigo_send_status+0x28>
   168d2:	8f e1       	ldi	r24, 0x1F	; 31
   168d4:	91 e3       	ldi	r25, 0x31	; 49
   168d6:	a0 e0       	ldi	r26, 0x00	; 0
   168d8:	ed b7       	in	r30, 0x3d	; 61
   168da:	fe b7       	in	r31, 0x3e	; 62
   168dc:	81 83       	std	Z+1, r24	; 0x01
   168de:	92 83       	std	Z+2, r25	; 0x02
   168e0:	a3 83       	std	Z+3, r26	; 0x03
   168e2:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   168e6:	80 e0       	ldi	r24, 0x00	; 0
   168e8:	91 e0       	ldi	r25, 0x01	; 1
   168ea:	9d 83       	std	Y+5, r25	; 0x05
   168ec:	8c 83       	std	Y+4, r24	; 0x04
   168ee:	80 91 62 19 	lds	r24, 0x1962	; 0x801962 <AMIGOs>
   168f2:	90 91 63 19 	lds	r25, 0x1963	; 0x801963 <AMIGOs+0x1>
   168f6:	ae 01       	movw	r20, r28
   168f8:	4c 5f       	subi	r20, 0xFC	; 252
   168fa:	5f 4f       	sbci	r21, 0xFF	; 255
   168fc:	64 e0       	ldi	r22, 0x04	; 4
   168fe:	70 e0       	ldi	r23, 0x00	; 0
   16900:	09 96       	adiw	r24, 0x09	; 9
   16902:	0e 94 5c 8b 	call	0x116b8	; 0x116b8 <gpib_write_str>
   16906:	2c 81       	ldd	r18, Y+4	; 0x04
   16908:	3d 81       	ldd	r19, Y+5	; 0x05
   1690a:	22 27       	eor	r18, r18
   1690c:	30 7d       	andi	r19, 0xD0	; 208
   1690e:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16912:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16916:	23 2b       	or	r18, r19
   16918:	11 f4       	brne	.+4      	; 0x1691e <amigo_send_status+0x60>
   1691a:	04 97       	sbiw	r24, 0x04	; 4
   1691c:	b1 f0       	breq	.+44     	; 0x1694a <amigo_send_status+0x8c>
   1691e:	87 81       	ldd	r24, Z+7	; 0x07
   16920:	90 85       	ldd	r25, Z+8	; 0x08
   16922:	80 62       	ori	r24, 0x20	; 32
   16924:	90 87       	std	Z+8, r25	; 0x08
   16926:	87 83       	std	Z+7, r24	; 0x07
   16928:	81 e0       	ldi	r24, 0x01	; 1
   1692a:	86 83       	std	Z+6, r24	; 0x06
   1692c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16930:	80 ff       	sbrs	r24, 0
   16932:	0e c0       	rjmp	.+28     	; 0x16950 <amigo_send_status+0x92>
   16934:	85 e0       	ldi	r24, 0x05	; 5
   16936:	91 e3       	ldi	r25, 0x31	; 49
   16938:	a0 e0       	ldi	r26, 0x00	; 0
   1693a:	ed b7       	in	r30, 0x3d	; 61
   1693c:	fe b7       	in	r31, 0x3e	; 62
   1693e:	81 83       	std	Z+1, r24	; 0x01
   16940:	92 83       	std	Z+2, r25	; 0x02
   16942:	a3 83       	std	Z+3, r26	; 0x03
   16944:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   16948:	03 c0       	rjmp	.+6      	; 0x16950 <amigo_send_status+0x92>
   1694a:	10 86       	std	Z+8, r1	; 0x08
   1694c:	17 82       	std	Z+7, r1	; 0x07
   1694e:	16 82       	std	Z+6, r1	; 0x06
   16950:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16954:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16958:	81 81       	ldd	r24, Z+1	; 0x01
   1695a:	90 e0       	ldi	r25, 0x00	; 0
   1695c:	0e 94 2c 86 	call	0x10c58	; 0x10c58 <gpib_enable_PPR>
   16960:	8c 81       	ldd	r24, Y+4	; 0x04
   16962:	9d 81       	ldd	r25, Y+5	; 0x05
   16964:	88 27       	eor	r24, r24
   16966:	90 7d       	andi	r25, 0xD0	; 208
   16968:	25 96       	adiw	r28, 0x05	; 5
   1696a:	e2 e0       	ldi	r30, 0x02	; 2
   1696c:	0c 94 e7 e6 	jmp	0x1cdce	; 0x1cdce <__epilogue_restores__+0x20>

00016970 <amigo_increment>:
   16970:	a1 e1       	ldi	r26, 0x11	; 17
   16972:	b0 e0       	ldi	r27, 0x00	; 0
   16974:	ee eb       	ldi	r30, 0xBE	; 190
   16976:	f4 eb       	ldi	r31, 0xB4	; 180
   16978:	0c 94 cb e6 	jmp	0x1cd96	; 0x1cd96 <__prologue_saves__+0x20>
   1697c:	bc 01       	movw	r22, r24
   1697e:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16982:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16986:	91 e1       	ldi	r25, 0x11	; 17
   16988:	de 01       	movw	r26, r28
   1698a:	11 96       	adiw	r26, 0x01	; 1
   1698c:	01 90       	ld	r0, Z+
   1698e:	0d 92       	st	X+, r0
   16990:	9a 95       	dec	r25
   16992:	e1 f7       	brne	.-8      	; 0x1698c <amigo_increment+0x1c>
   16994:	9e 81       	ldd	r25, Y+6	; 0x06
   16996:	9f 5f       	subi	r25, 0xFF	; 255
   16998:	9e 83       	std	Y+6, r25	; 0x06
   1699a:	ce 01       	movw	r24, r28
   1699c:	01 96       	adiw	r24, 0x01	; 1
   1699e:	c7 dd       	rcall	.-1138   	; 0x1652e <amigo_overflow_check>
   169a0:	00 97       	sbiw	r24, 0x00	; 0
   169a2:	59 f4       	brne	.+22     	; 0x169ba <amigo_increment+0x4a>
   169a4:	a0 91 62 19 	lds	r26, 0x1962	; 0x801962 <AMIGOs>
   169a8:	b0 91 63 19 	lds	r27, 0x1963	; 0x801963 <AMIGOs+0x1>
   169ac:	21 e1       	ldi	r18, 0x11	; 17
   169ae:	fe 01       	movw	r30, r28
   169b0:	31 96       	adiw	r30, 0x01	; 1
   169b2:	01 90       	ld	r0, Z+
   169b4:	0d 92       	st	X+, r0
   169b6:	2a 95       	dec	r18
   169b8:	e1 f7       	brne	.-8      	; 0x169b2 <amigo_increment+0x42>
   169ba:	61 96       	adiw	r28, 0x11	; 17
   169bc:	e2 e0       	ldi	r30, 0x02	; 2
   169be:	0c 94 e7 e6 	jmp	0x1cdce	; 0x1cdce <__epilogue_restores__+0x20>

000169c2 <amigo_seek>:
   169c2:	0f 93       	push	r16
   169c4:	1f 93       	push	r17
   169c6:	cf 93       	push	r28
   169c8:	df 93       	push	r29
   169ca:	ec 01       	movw	r28, r24
   169cc:	66 e8       	ldi	r22, 0x86	; 134
   169ce:	75 e1       	ldi	r23, 0x15	; 21
   169d0:	ae dd       	rcall	.-1188   	; 0x1652e <amigo_overflow_check>
   169d2:	8c 01       	movw	r16, r24
   169d4:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   169d8:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   169dc:	89 2b       	or	r24, r25
   169de:	41 f0       	breq	.+16     	; 0x169f0 <amigo_seek+0x2e>
   169e0:	81 e0       	ldi	r24, 0x01	; 1
   169e2:	86 83       	std	Z+6, r24	; 0x06
   169e4:	87 81       	ldd	r24, Z+7	; 0x07
   169e6:	90 85       	ldd	r25, Z+8	; 0x08
   169e8:	84 60       	ori	r24, 0x04	; 4
   169ea:	90 87       	std	Z+8, r25	; 0x08
   169ec:	87 83       	std	Z+7, r24	; 0x07
   169ee:	06 c0       	rjmp	.+12     	; 0x169fc <amigo_seek+0x3a>
   169f0:	8d 81       	ldd	r24, Y+5	; 0x05
   169f2:	85 83       	std	Z+5, r24	; 0x05
   169f4:	8c 81       	ldd	r24, Y+4	; 0x04
   169f6:	84 83       	std	Z+4, r24	; 0x04
   169f8:	8b 81       	ldd	r24, Y+3	; 0x03
   169fa:	83 83       	std	Z+3, r24	; 0x03
   169fc:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16a00:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16a04:	81 81       	ldd	r24, Z+1	; 0x01
   16a06:	90 e0       	ldi	r25, 0x00	; 0
   16a08:	0e 94 2c 86 	call	0x10c58	; 0x10c58 <gpib_enable_PPR>
   16a0c:	c8 01       	movw	r24, r16
   16a0e:	df 91       	pop	r29
   16a10:	cf 91       	pop	r28
   16a12:	1f 91       	pop	r17
   16a14:	0f 91       	pop	r16
   16a16:	08 95       	ret

00016a18 <amigo_verify>:
   16a18:	8f 92       	push	r8
   16a1a:	9f 92       	push	r9
   16a1c:	af 92       	push	r10
   16a1e:	bf 92       	push	r11
   16a20:	ef 92       	push	r14
   16a22:	ff 92       	push	r15
   16a24:	0f 93       	push	r16
   16a26:	1f 93       	push	r17
   16a28:	cf 93       	push	r28
   16a2a:	df 93       	push	r29
   16a2c:	ad b7       	in	r26, 0x3d	; 61
   16a2e:	be b7       	in	r27, 0x3e	; 62
   16a30:	19 97       	sbiw	r26, 0x09	; 9
   16a32:	0f b6       	in	r0, 0x3f	; 63
   16a34:	f8 94       	cli
   16a36:	be bf       	out	0x3e, r27	; 62
   16a38:	0f be       	out	0x3f, r0	; 63
   16a3a:	ad bf       	out	0x3d, r26	; 61
   16a3c:	7c 01       	movw	r14, r24
   16a3e:	6b e8       	ldi	r22, 0x8B	; 139
   16a40:	75 e1       	ldi	r23, 0x15	; 21
   16a42:	80 91 62 19 	lds	r24, 0x1962	; 0x801962 <AMIGOs>
   16a46:	90 91 63 19 	lds	r25, 0x1963	; 0x801963 <AMIGOs+0x1>
   16a4a:	c7 dd       	rcall	.-1138   	; 0x165da <amigo_chs_to_logical>
   16a4c:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   16a50:	25 ff       	sbrs	r18, 5
   16a52:	10 c0       	rjmp	.+32     	; 0x16a74 <amigo_verify+0x5c>
   16a54:	ed b7       	in	r30, 0x3d	; 61
   16a56:	fe b7       	in	r31, 0x3e	; 62
   16a58:	e0 86       	std	Z+8, r14	; 0x08
   16a5a:	f1 86       	std	Z+9, r15	; 0x09
   16a5c:	64 83       	std	Z+4, r22	; 0x04
   16a5e:	75 83       	std	Z+5, r23	; 0x05
   16a60:	86 83       	std	Z+6, r24	; 0x06
   16a62:	97 83       	std	Z+7, r25	; 0x07
   16a64:	84 ec       	ldi	r24, 0xC4	; 196
   16a66:	90 e3       	ldi	r25, 0x30	; 48
   16a68:	a0 e0       	ldi	r26, 0x00	; 0
   16a6a:	81 83       	std	Z+1, r24	; 0x01
   16a6c:	92 83       	std	Z+2, r25	; 0x02
   16a6e:	a3 83       	std	Z+3, r26	; 0x03
   16a70:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   16a74:	e7 01       	movw	r28, r14
   16a76:	20 97       	sbiw	r28, 0x00	; 0
   16a78:	09 f4       	brne	.+2      	; 0x16a7c <amigo_verify+0x64>
   16a7a:	4b c0       	rjmp	.+150    	; 0x16b12 <amigo_verify+0xfa>
   16a7c:	68 e9       	ldi	r22, 0x98	; 152
   16a7e:	75 e1       	ldi	r23, 0x15	; 21
   16a80:	80 91 62 19 	lds	r24, 0x1962	; 0x801962 <AMIGOs>
   16a84:	90 91 63 19 	lds	r25, 0x1963	; 0x801963 <AMIGOs+0x1>
   16a88:	a8 dd       	rcall	.-1200   	; 0x165da <amigo_chs_to_logical>
   16a8a:	4b 01       	movw	r8, r22
   16a8c:	5c 01       	movw	r10, r24
   16a8e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16a92:	86 fd       	sbrc	r24, 6
   16a94:	0e 94 52 85 	call	0x10aa4	; 0x10aa4 <gpib_timer_elapsed_begin>
   16a98:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16a9c:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16aa0:	e0 90 62 19 	lds	r14, 0x1962	; 0x801962 <AMIGOs>
   16aa4:	f0 90 63 19 	lds	r15, 0x1963	; 0x801963 <AMIGOs+0x1>
   16aa8:	87 e0       	ldi	r24, 0x07	; 7
   16aaa:	e8 0e       	add	r14, r24
   16aac:	f1 1c       	adc	r15, r1
   16aae:	00 85       	ldd	r16, Z+8	; 0x08
   16ab0:	11 85       	ldd	r17, Z+9	; 0x09
   16ab2:	2a ee       	ldi	r18, 0xEA	; 234
   16ab4:	3c e1       	ldi	r19, 0x1C	; 28
   16ab6:	b5 01       	movw	r22, r10
   16ab8:	a4 01       	movw	r20, r8
   16aba:	82 81       	ldd	r24, Z+2	; 0x02
   16abc:	93 81       	ldd	r25, Z+3	; 0x03
   16abe:	0e 94 a4 84 	call	0x10948	; 0x10948 <dbf_open_read>
   16ac2:	7c 01       	movw	r14, r24
   16ac4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16ac8:	86 ff       	sbrs	r24, 6
   16aca:	04 c0       	rjmp	.+8      	; 0x16ad4 <amigo_verify+0xbc>
   16acc:	8f e9       	ldi	r24, 0x9F	; 159
   16ace:	90 e1       	ldi	r25, 0x10	; 16
   16ad0:	0e 94 64 85 	call	0x10ac8	; 0x10ac8 <gpib_timer_elapsed_end>
   16ad4:	20 91 62 19 	lds	r18, 0x1962	; 0x801962 <AMIGOs>
   16ad8:	30 91 63 19 	lds	r19, 0x1963	; 0x801963 <AMIGOs+0x1>
   16adc:	f9 01       	movw	r30, r18
   16ade:	87 81       	ldd	r24, Z+7	; 0x07
   16ae0:	90 85       	ldd	r25, Z+8	; 0x08
   16ae2:	89 2b       	or	r24, r25
   16ae4:	21 f0       	breq	.+8      	; 0x16aee <amigo_verify+0xd6>
   16ae6:	81 e0       	ldi	r24, 0x01	; 1
   16ae8:	f9 01       	movw	r30, r18
   16aea:	86 83       	std	Z+6, r24	; 0x06
   16aec:	15 c0       	rjmp	.+42     	; 0x16b18 <amigo_verify+0x100>
   16aee:	80 91 64 19 	lds	r24, 0x1964	; 0x801964 <AMIGOp>
   16af2:	90 91 65 19 	lds	r25, 0x1965	; 0x801965 <AMIGOp+0x1>
   16af6:	fc 01       	movw	r30, r24
   16af8:	80 85       	ldd	r24, Z+8	; 0x08
   16afa:	91 85       	ldd	r25, Z+9	; 0x09
   16afc:	e8 16       	cp	r14, r24
   16afe:	f9 06       	cpc	r15, r25
   16b00:	91 f7       	brne	.-28     	; 0x16ae6 <amigo_verify+0xce>
   16b02:	80 ea       	ldi	r24, 0xA0	; 160
   16b04:	95 e1       	ldi	r25, 0x15	; 21
   16b06:	34 df       	rcall	.-408    	; 0x16970 <amigo_increment>
   16b08:	21 97       	sbiw	r28, 0x01	; 1
   16b0a:	89 2b       	or	r24, r25
   16b0c:	09 f4       	brne	.+2      	; 0x16b10 <amigo_verify+0xf8>
   16b0e:	b3 cf       	rjmp	.-154    	; 0x16a76 <amigo_verify+0x5e>
   16b10:	03 c0       	rjmp	.+6      	; 0x16b18 <amigo_verify+0x100>
   16b12:	c0 e0       	ldi	r28, 0x00	; 0
   16b14:	d0 e0       	ldi	r29, 0x00	; 0
   16b16:	02 c0       	rjmp	.+4      	; 0x16b1c <amigo_verify+0x104>
   16b18:	c1 e0       	ldi	r28, 0x01	; 1
   16b1a:	d0 e0       	ldi	r29, 0x00	; 0
   16b1c:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16b20:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16b24:	81 81       	ldd	r24, Z+1	; 0x01
   16b26:	90 e0       	ldi	r25, 0x00	; 0
   16b28:	0e 94 2c 86 	call	0x10c58	; 0x10c58 <gpib_enable_PPR>
   16b2c:	ce 01       	movw	r24, r28
   16b2e:	ad b7       	in	r26, 0x3d	; 61
   16b30:	be b7       	in	r27, 0x3e	; 62
   16b32:	19 96       	adiw	r26, 0x09	; 9
   16b34:	0f b6       	in	r0, 0x3f	; 63
   16b36:	f8 94       	cli
   16b38:	be bf       	out	0x3e, r27	; 62
   16b3a:	0f be       	out	0x3f, r0	; 63
   16b3c:	ad bf       	out	0x3d, r26	; 61
   16b3e:	df 91       	pop	r29
   16b40:	cf 91       	pop	r28
   16b42:	1f 91       	pop	r17
   16b44:	0f 91       	pop	r16
   16b46:	ff 90       	pop	r15
   16b48:	ef 90       	pop	r14
   16b4a:	bf 90       	pop	r11
   16b4c:	af 90       	pop	r10
   16b4e:	9f 90       	pop	r9
   16b50:	8f 90       	pop	r8
   16b52:	08 95       	ret

00016b54 <amigo_format>:
   16b54:	ef 92       	push	r14
   16b56:	ff 92       	push	r15
   16b58:	0f 93       	push	r16
   16b5a:	1f 93       	push	r17
   16b5c:	cf 93       	push	r28
   16b5e:	df 93       	push	r29
   16b60:	00 d0       	rcall	.+0      	; 0x16b62 <amigo_format+0xe>
   16b62:	1f 92       	push	r1
   16b64:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16b68:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16b6c:	15 82       	std	Z+5, r1	; 0x05
   16b6e:	14 82       	std	Z+4, r1	; 0x04
   16b70:	13 82       	std	Z+3, r1	; 0x03
   16b72:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16b76:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16b7a:	40 85       	ldd	r20, Z+8	; 0x08
   16b7c:	51 85       	ldd	r21, Z+9	; 0x09
   16b7e:	68 2f       	mov	r22, r24
   16b80:	70 e0       	ldi	r23, 0x00	; 0
   16b82:	8a ee       	ldi	r24, 0xEA	; 234
   16b84:	9c e1       	ldi	r25, 0x1C	; 28
   16b86:	0e 94 b3 ea 	call	0x1d566	; 0x1d566 <memset>
   16b8a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16b8e:	85 ff       	sbrs	r24, 5
   16b90:	0a c0       	rjmp	.+20     	; 0x16ba6 <amigo_format+0x52>
   16b92:	89 e8       	ldi	r24, 0x89	; 137
   16b94:	90 e3       	ldi	r25, 0x30	; 48
   16b96:	a0 e0       	ldi	r26, 0x00	; 0
   16b98:	ed b7       	in	r30, 0x3d	; 61
   16b9a:	fe b7       	in	r31, 0x3e	; 62
   16b9c:	81 83       	std	Z+1, r24	; 0x01
   16b9e:	92 83       	std	Z+2, r25	; 0x02
   16ba0:	a3 83       	std	Z+3, r26	; 0x03
   16ba2:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   16ba6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16baa:	86 fd       	sbrc	r24, 6
   16bac:	0e 94 52 85 	call	0x10aa4	; 0x10aa4 <gpib_timer_elapsed_begin>
   16bb0:	67 ea       	ldi	r22, 0xA7	; 167
   16bb2:	75 e1       	ldi	r23, 0x15	; 21
   16bb4:	80 91 62 19 	lds	r24, 0x1962	; 0x801962 <AMIGOs>
   16bb8:	90 91 63 19 	lds	r25, 0x1963	; 0x801963 <AMIGOs+0x1>
   16bbc:	0e dd       	rcall	.-1508   	; 0x165da <amigo_chs_to_logical>
   16bbe:	ab 01       	movw	r20, r22
   16bc0:	bc 01       	movw	r22, r24
   16bc2:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16bc6:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16bca:	e0 90 62 19 	lds	r14, 0x1962	; 0x801962 <AMIGOs>
   16bce:	f0 90 63 19 	lds	r15, 0x1963	; 0x801963 <AMIGOs+0x1>
   16bd2:	87 e0       	ldi	r24, 0x07	; 7
   16bd4:	e8 0e       	add	r14, r24
   16bd6:	f1 1c       	adc	r15, r1
   16bd8:	00 85       	ldd	r16, Z+8	; 0x08
   16bda:	11 85       	ldd	r17, Z+9	; 0x09
   16bdc:	2a ee       	ldi	r18, 0xEA	; 234
   16bde:	3c e1       	ldi	r19, 0x1C	; 28
   16be0:	82 81       	ldd	r24, Z+2	; 0x02
   16be2:	93 81       	ldd	r25, Z+3	; 0x03
   16be4:	0e 94 fb 84 	call	0x109f6	; 0x109f6 <dbf_open_write>
   16be8:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16bec:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16bf0:	27 81       	ldd	r18, Z+7	; 0x07
   16bf2:	30 85       	ldd	r19, Z+8	; 0x08
   16bf4:	21 15       	cp	r18, r1
   16bf6:	31 05       	cpc	r19, r1
   16bf8:	49 f4       	brne	.+18     	; 0x16c0c <amigo_format+0xb8>
   16bfa:	c0 91 64 19 	lds	r28, 0x1964	; 0x801964 <AMIGOp>
   16bfe:	d0 91 65 19 	lds	r29, 0x1965	; 0x801965 <AMIGOp+0x1>
   16c02:	48 85       	ldd	r20, Y+8	; 0x08
   16c04:	59 85       	ldd	r21, Y+9	; 0x09
   16c06:	84 17       	cp	r24, r20
   16c08:	95 07       	cpc	r25, r21
   16c0a:	41 f0       	breq	.+16     	; 0x16c1c <amigo_format+0xc8>
   16c0c:	22 60       	ori	r18, 0x02	; 2
   16c0e:	30 87       	std	Z+8, r19	; 0x08
   16c10:	27 83       	std	Z+7, r18	; 0x07
   16c12:	81 e0       	ldi	r24, 0x01	; 1
   16c14:	86 83       	std	Z+6, r24	; 0x06
   16c16:	c1 e0       	ldi	r28, 0x01	; 1
   16c18:	d0 e0       	ldi	r29, 0x00	; 0
   16c1a:	0f c0       	rjmp	.+30     	; 0x16c3a <amigo_format+0xe6>
   16c1c:	80 e0       	ldi	r24, 0x00	; 0
   16c1e:	90 e0       	ldi	r25, 0x00	; 0
   16c20:	a7 de       	rcall	.-690    	; 0x16970 <amigo_increment>
   16c22:	89 2b       	or	r24, r25
   16c24:	29 f2       	breq	.-118    	; 0x16bb0 <amigo_format+0x5c>
   16c26:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16c2a:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16c2e:	15 82       	std	Z+5, r1	; 0x05
   16c30:	14 82       	std	Z+4, r1	; 0x04
   16c32:	13 82       	std	Z+3, r1	; 0x03
   16c34:	16 82       	std	Z+6, r1	; 0x06
   16c36:	c0 e0       	ldi	r28, 0x00	; 0
   16c38:	d0 e0       	ldi	r29, 0x00	; 0
   16c3a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16c3e:	86 ff       	sbrs	r24, 6
   16c40:	04 c0       	rjmp	.+8      	; 0x16c4a <amigo_format+0xf6>
   16c42:	87 ea       	ldi	r24, 0xA7	; 167
   16c44:	95 e1       	ldi	r25, 0x15	; 21
   16c46:	0e 94 64 85 	call	0x10ac8	; 0x10ac8 <gpib_timer_elapsed_end>
   16c4a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16c4e:	85 ff       	sbrs	r24, 5
   16c50:	0a c0       	rjmp	.+20     	; 0x16c66 <amigo_format+0x112>
   16c52:	84 e7       	ldi	r24, 0x74	; 116
   16c54:	90 e3       	ldi	r25, 0x30	; 48
   16c56:	a0 e0       	ldi	r26, 0x00	; 0
   16c58:	ed b7       	in	r30, 0x3d	; 61
   16c5a:	fe b7       	in	r31, 0x3e	; 62
   16c5c:	81 83       	std	Z+1, r24	; 0x01
   16c5e:	92 83       	std	Z+2, r25	; 0x02
   16c60:	a3 83       	std	Z+3, r26	; 0x03
   16c62:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   16c66:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16c6a:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16c6e:	81 81       	ldd	r24, Z+1	; 0x01
   16c70:	90 e0       	ldi	r25, 0x00	; 0
   16c72:	0e 94 2c 86 	call	0x10c58	; 0x10c58 <gpib_enable_PPR>
   16c76:	ce 01       	movw	r24, r28
   16c78:	cd b7       	in	r28, 0x3d	; 61
   16c7a:	de b7       	in	r29, 0x3e	; 62
   16c7c:	23 96       	adiw	r28, 0x03	; 3
   16c7e:	e6 e0       	ldi	r30, 0x06	; 6
   16c80:	0c 94 e3 e6 	jmp	0x1cdc6	; 0x1cdc6 <__epilogue_restores__+0x18>

00016c84 <amigo_buffered_read_command>:
   16c84:	8f 92       	push	r8
   16c86:	9f 92       	push	r9
   16c88:	af 92       	push	r10
   16c8a:	bf 92       	push	r11
   16c8c:	ef 92       	push	r14
   16c8e:	ff 92       	push	r15
   16c90:	0f 93       	push	r16
   16c92:	1f 93       	push	r17
   16c94:	cf 93       	push	r28
   16c96:	df 93       	push	r29
   16c98:	00 d0       	rcall	.+0      	; 0x16c9a <amigo_buffered_read_command+0x16>
   16c9a:	00 d0       	rcall	.+0      	; 0x16c9c <amigo_buffered_read_command+0x18>
   16c9c:	1f 92       	push	r1
   16c9e:	6e ea       	ldi	r22, 0xAE	; 174
   16ca0:	75 e1       	ldi	r23, 0x15	; 21
   16ca2:	80 91 62 19 	lds	r24, 0x1962	; 0x801962 <AMIGOs>
   16ca6:	90 91 63 19 	lds	r25, 0x1963	; 0x801963 <AMIGOs+0x1>
   16caa:	97 dc       	rcall	.-1746   	; 0x165da <amigo_chs_to_logical>
   16cac:	4b 01       	movw	r8, r22
   16cae:	5c 01       	movw	r10, r24
   16cb0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16cb4:	85 ff       	sbrs	r24, 5
   16cb6:	12 c0       	rjmp	.+36     	; 0x16cdc <amigo_buffered_read_command+0x58>
   16cb8:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16cbc:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16cc0:	80 81       	ld	r24, Z
   16cc2:	90 e0       	ldi	r25, 0x00	; 0
   16cc4:	ed b7       	in	r30, 0x3d	; 61
   16cc6:	fe b7       	in	r31, 0x3e	; 62
   16cc8:	95 83       	std	Z+5, r25	; 0x05
   16cca:	84 83       	std	Z+4, r24	; 0x04
   16ccc:	82 e6       	ldi	r24, 0x62	; 98
   16cce:	90 e3       	ldi	r25, 0x30	; 48
   16cd0:	a0 e0       	ldi	r26, 0x00	; 0
   16cd2:	81 83       	std	Z+1, r24	; 0x01
   16cd4:	92 83       	std	Z+2, r25	; 0x02
   16cd6:	a3 83       	std	Z+3, r26	; 0x03
   16cd8:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   16cdc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16ce0:	86 fd       	sbrc	r24, 6
   16ce2:	0e 94 52 85 	call	0x10aa4	; 0x10aa4 <gpib_timer_elapsed_begin>
   16ce6:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16cea:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16cee:	e0 90 62 19 	lds	r14, 0x1962	; 0x801962 <AMIGOs>
   16cf2:	f0 90 63 19 	lds	r15, 0x1963	; 0x801963 <AMIGOs+0x1>
   16cf6:	87 e0       	ldi	r24, 0x07	; 7
   16cf8:	e8 0e       	add	r14, r24
   16cfa:	f1 1c       	adc	r15, r1
   16cfc:	00 85       	ldd	r16, Z+8	; 0x08
   16cfe:	11 85       	ldd	r17, Z+9	; 0x09
   16d00:	2a ee       	ldi	r18, 0xEA	; 234
   16d02:	3c e1       	ldi	r19, 0x1C	; 28
   16d04:	b5 01       	movw	r22, r10
   16d06:	a4 01       	movw	r20, r8
   16d08:	82 81       	ldd	r24, Z+2	; 0x02
   16d0a:	93 81       	ldd	r25, Z+3	; 0x03
   16d0c:	0e 94 a4 84 	call	0x10948	; 0x10948 <dbf_open_read>
   16d10:	7c 01       	movw	r14, r24
   16d12:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16d16:	86 ff       	sbrs	r24, 6
   16d18:	04 c0       	rjmp	.+8      	; 0x16d22 <amigo_buffered_read_command+0x9e>
   16d1a:	8f e9       	ldi	r24, 0x9F	; 159
   16d1c:	90 e1       	ldi	r25, 0x10	; 16
   16d1e:	0e 94 64 85 	call	0x10ac8	; 0x10ac8 <gpib_timer_elapsed_end>
   16d22:	c0 91 62 19 	lds	r28, 0x1962	; 0x801962 <AMIGOs>
   16d26:	d0 91 63 19 	lds	r29, 0x1963	; 0x801963 <AMIGOs+0x1>
   16d2a:	8f 81       	ldd	r24, Y+7	; 0x07
   16d2c:	98 85       	ldd	r25, Y+8	; 0x08
   16d2e:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16d32:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16d36:	89 2b       	or	r24, r25
   16d38:	29 f4       	brne	.+10     	; 0x16d44 <amigo_buffered_read_command+0xc0>
   16d3a:	80 85       	ldd	r24, Z+8	; 0x08
   16d3c:	91 85       	ldd	r25, Z+9	; 0x09
   16d3e:	e8 16       	cp	r14, r24
   16d40:	f9 06       	cpc	r15, r25
   16d42:	19 f0       	breq	.+6      	; 0x16d4a <amigo_buffered_read_command+0xc6>
   16d44:	81 e0       	ldi	r24, 0x01	; 1
   16d46:	8e 83       	std	Y+6, r24	; 0x06
   16d48:	14 c0       	rjmp	.+40     	; 0x16d72 <amigo_buffered_read_command+0xee>
   16d4a:	8e ea       	ldi	r24, 0xAE	; 174
   16d4c:	95 e1       	ldi	r25, 0x15	; 21
   16d4e:	10 de       	rcall	.-992    	; 0x16970 <amigo_increment>
   16d50:	89 2b       	or	r24, r25
   16d52:	59 f0       	breq	.+22     	; 0x16d6a <amigo_buffered_read_command+0xe6>
   16d54:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16d58:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16d5c:	81 e0       	ldi	r24, 0x01	; 1
   16d5e:	86 83       	std	Z+6, r24	; 0x06
   16d60:	87 81       	ldd	r24, Z+7	; 0x07
   16d62:	90 85       	ldd	r25, Z+8	; 0x08
   16d64:	84 60       	ori	r24, 0x04	; 4
   16d66:	90 87       	std	Z+8, r25	; 0x08
   16d68:	87 83       	std	Z+7, r24	; 0x07
   16d6a:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16d6e:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16d72:	81 81       	ldd	r24, Z+1	; 0x01
   16d74:	90 e0       	ldi	r25, 0x00	; 0
   16d76:	0e 94 2c 86 	call	0x10c58	; 0x10c58 <gpib_enable_PPR>
   16d7a:	80 e0       	ldi	r24, 0x00	; 0
   16d7c:	90 e0       	ldi	r25, 0x00	; 0
   16d7e:	0f 90       	pop	r0
   16d80:	0f 90       	pop	r0
   16d82:	0f 90       	pop	r0
   16d84:	0f 90       	pop	r0
   16d86:	0f 90       	pop	r0
   16d88:	df 91       	pop	r29
   16d8a:	cf 91       	pop	r28
   16d8c:	1f 91       	pop	r17
   16d8e:	0f 91       	pop	r16
   16d90:	ff 90       	pop	r15
   16d92:	ef 90       	pop	r14
   16d94:	bf 90       	pop	r11
   16d96:	af 90       	pop	r10
   16d98:	9f 90       	pop	r9
   16d9a:	8f 90       	pop	r8
   16d9c:	08 95       	ret

00016d9e <amigo_buffered_read_execute>:
   16d9e:	a5 e0       	ldi	r26, 0x05	; 5
   16da0:	b0 e0       	ldi	r27, 0x00	; 0
   16da2:	e5 ed       	ldi	r30, 0xD5	; 213
   16da4:	f6 eb       	ldi	r31, 0xB6	; 182
   16da6:	0c 94 c9 e6 	jmp	0x1cd92	; 0x1cd92 <__prologue_saves__+0x1c>
   16daa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16dae:	87 fd       	sbrc	r24, 7
   16db0:	0e 94 52 85 	call	0x10aa4	; 0x10aa4 <gpib_timer_elapsed_begin>
   16db4:	80 e0       	ldi	r24, 0x00	; 0
   16db6:	91 e0       	ldi	r25, 0x01	; 1
   16db8:	9d 83       	std	Y+5, r25	; 0x05
   16dba:	8c 83       	std	Y+4, r24	; 0x04
   16dbc:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16dc0:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16dc4:	60 85       	ldd	r22, Z+8	; 0x08
   16dc6:	71 85       	ldd	r23, Z+9	; 0x09
   16dc8:	ae 01       	movw	r20, r28
   16dca:	4c 5f       	subi	r20, 0xFC	; 252
   16dcc:	5f 4f       	sbci	r21, 0xFF	; 255
   16dce:	8a ee       	ldi	r24, 0xEA	; 234
   16dd0:	9c e1       	ldi	r25, 0x1C	; 28
   16dd2:	0e 94 5c 8b 	call	0x116b8	; 0x116b8 <gpib_write_str>
   16dd6:	8c 01       	movw	r16, r24
   16dd8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16ddc:	87 ff       	sbrs	r24, 7
   16dde:	04 c0       	rjmp	.+8      	; 0x16de8 <amigo_buffered_read_execute+0x4a>
   16de0:	8a ea       	ldi	r24, 0xAA	; 170
   16de2:	90 e1       	ldi	r25, 0x10	; 16
   16de4:	0e 94 64 85 	call	0x10ac8	; 0x10ac8 <gpib_timer_elapsed_end>
   16de8:	8c 81       	ldd	r24, Y+4	; 0x04
   16dea:	9d 81       	ldd	r25, Y+5	; 0x05
   16dec:	88 27       	eor	r24, r24
   16dee:	90 7d       	andi	r25, 0xD0	; 208
   16df0:	89 2b       	or	r24, r25
   16df2:	49 f4       	brne	.+18     	; 0x16e06 <amigo_buffered_read_execute+0x68>
   16df4:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16df8:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16dfc:	80 85       	ldd	r24, Z+8	; 0x08
   16dfe:	91 85       	ldd	r25, Z+9	; 0x09
   16e00:	08 17       	cp	r16, r24
   16e02:	19 07       	cpc	r17, r25
   16e04:	c9 f0       	breq	.+50     	; 0x16e38 <amigo_buffered_read_execute+0x9a>
   16e06:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16e0a:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16e0e:	81 e0       	ldi	r24, 0x01	; 1
   16e10:	86 83       	std	Z+6, r24	; 0x06
   16e12:	87 81       	ldd	r24, Z+7	; 0x07
   16e14:	90 85       	ldd	r25, Z+8	; 0x08
   16e16:	80 62       	ori	r24, 0x20	; 32
   16e18:	90 87       	std	Z+8, r25	; 0x08
   16e1a:	87 83       	std	Z+7, r24	; 0x07
   16e1c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16e20:	80 ff       	sbrs	r24, 0
   16e22:	0a c0       	rjmp	.+20     	; 0x16e38 <amigo_buffered_read_execute+0x9a>
   16e24:	88 e4       	ldi	r24, 0x48	; 72
   16e26:	90 e3       	ldi	r25, 0x30	; 48
   16e28:	a0 e0       	ldi	r26, 0x00	; 0
   16e2a:	ed b7       	in	r30, 0x3d	; 61
   16e2c:	fe b7       	in	r31, 0x3e	; 62
   16e2e:	81 83       	std	Z+1, r24	; 0x01
   16e30:	92 83       	std	Z+2, r25	; 0x02
   16e32:	a3 83       	std	Z+3, r26	; 0x03
   16e34:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   16e38:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16e3c:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16e40:	81 81       	ldd	r24, Z+1	; 0x01
   16e42:	90 e0       	ldi	r25, 0x00	; 0
   16e44:	0e 94 2c 86 	call	0x10c58	; 0x10c58 <gpib_enable_PPR>
   16e48:	8c 81       	ldd	r24, Y+4	; 0x04
   16e4a:	9d 81       	ldd	r25, Y+5	; 0x05
   16e4c:	25 96       	adiw	r28, 0x05	; 5
   16e4e:	e4 e0       	ldi	r30, 0x04	; 4
   16e50:	0c 94 e5 e6 	jmp	0x1cdca	; 0x1cdca <__epilogue_restores__+0x1c>

00016e54 <amigo_buffered_write>:
   16e54:	8f 92       	push	r8
   16e56:	9f 92       	push	r9
   16e58:	af 92       	push	r10
   16e5a:	bf 92       	push	r11
   16e5c:	ef 92       	push	r14
   16e5e:	ff 92       	push	r15
   16e60:	0f 93       	push	r16
   16e62:	1f 93       	push	r17
   16e64:	cf 93       	push	r28
   16e66:	df 93       	push	r29
   16e68:	cd b7       	in	r28, 0x3d	; 61
   16e6a:	de b7       	in	r29, 0x3e	; 62
   16e6c:	27 97       	sbiw	r28, 0x07	; 7
   16e6e:	0f b6       	in	r0, 0x3f	; 63
   16e70:	f8 94       	cli
   16e72:	de bf       	out	0x3e, r29	; 62
   16e74:	0f be       	out	0x3f, r0	; 63
   16e76:	cd bf       	out	0x3d, r28	; 61
   16e78:	6c eb       	ldi	r22, 0xBC	; 188
   16e7a:	75 e1       	ldi	r23, 0x15	; 21
   16e7c:	80 91 62 19 	lds	r24, 0x1962	; 0x801962 <AMIGOs>
   16e80:	90 91 63 19 	lds	r25, 0x1963	; 0x801963 <AMIGOs+0x1>
   16e84:	aa db       	rcall	.-2220   	; 0x165da <amigo_chs_to_logical>
   16e86:	4b 01       	movw	r8, r22
   16e88:	5c 01       	movw	r10, r24
   16e8a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16e8e:	87 fd       	sbrc	r24, 7
   16e90:	0e 94 52 85 	call	0x10aa4	; 0x10aa4 <gpib_timer_elapsed_begin>
   16e94:	1f 82       	std	Y+7, r1	; 0x07
   16e96:	1e 82       	std	Y+6, r1	; 0x06
   16e98:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16e9c:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16ea0:	60 85       	ldd	r22, Z+8	; 0x08
   16ea2:	71 85       	ldd	r23, Z+9	; 0x09
   16ea4:	ae 01       	movw	r20, r28
   16ea6:	4a 5f       	subi	r20, 0xFA	; 250
   16ea8:	5f 4f       	sbci	r21, 0xFF	; 255
   16eaa:	8a ee       	ldi	r24, 0xEA	; 234
   16eac:	9c e1       	ldi	r25, 0x1C	; 28
   16eae:	0e 94 ba 8a 	call	0x11574	; 0x11574 <gpib_read_str>
   16eb2:	7c 01       	movw	r14, r24
   16eb4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16eb8:	85 ff       	sbrs	r24, 5
   16eba:	12 c0       	rjmp	.+36     	; 0x16ee0 <amigo_buffered_write+0x8c>
   16ebc:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16ec0:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16ec4:	80 81       	ld	r24, Z
   16ec6:	90 e0       	ldi	r25, 0x00	; 0
   16ec8:	ed b7       	in	r30, 0x3d	; 61
   16eca:	fe b7       	in	r31, 0x3e	; 62
   16ecc:	95 83       	std	Z+5, r25	; 0x05
   16ece:	84 83       	std	Z+4, r24	; 0x04
   16ed0:	86 e3       	ldi	r24, 0x36	; 54
   16ed2:	90 e3       	ldi	r25, 0x30	; 48
   16ed4:	a0 e0       	ldi	r26, 0x00	; 0
   16ed6:	81 83       	std	Z+1, r24	; 0x01
   16ed8:	92 83       	std	Z+2, r25	; 0x02
   16eda:	a3 83       	std	Z+3, r26	; 0x03
   16edc:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   16ee0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16ee4:	87 ff       	sbrs	r24, 7
   16ee6:	04 c0       	rjmp	.+8      	; 0x16ef0 <amigo_buffered_write+0x9c>
   16ee8:	8b ec       	ldi	r24, 0xCB	; 203
   16eea:	95 e1       	ldi	r25, 0x15	; 21
   16eec:	0e 94 64 85 	call	0x10ac8	; 0x10ac8 <gpib_timer_elapsed_end>
   16ef0:	8e 81       	ldd	r24, Y+6	; 0x06
   16ef2:	9f 81       	ldd	r25, Y+7	; 0x07
   16ef4:	88 27       	eor	r24, r24
   16ef6:	90 7d       	andi	r25, 0xD0	; 208
   16ef8:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   16efc:	89 2b       	or	r24, r25
   16efe:	49 f4       	brne	.+18     	; 0x16f12 <amigo_buffered_write+0xbe>
   16f00:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16f04:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16f08:	80 85       	ldd	r24, Z+8	; 0x08
   16f0a:	91 85       	ldd	r25, Z+9	; 0x09
   16f0c:	e8 16       	cp	r14, r24
   16f0e:	f9 06       	cpc	r15, r25
   16f10:	c1 f0       	breq	.+48     	; 0x16f42 <amigo_buffered_write+0xee>
   16f12:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16f16:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16f1a:	81 e0       	ldi	r24, 0x01	; 1
   16f1c:	86 83       	std	Z+6, r24	; 0x06
   16f1e:	87 81       	ldd	r24, Z+7	; 0x07
   16f20:	90 85       	ldd	r25, Z+8	; 0x08
   16f22:	80 62       	ori	r24, 0x20	; 32
   16f24:	90 87       	std	Z+8, r25	; 0x08
   16f26:	87 83       	std	Z+7, r24	; 0x07
   16f28:	20 ff       	sbrs	r18, 0
   16f2a:	5e c0       	rjmp	.+188    	; 0x16fe8 <amigo_buffered_write+0x194>
   16f2c:	87 e1       	ldi	r24, 0x17	; 23
   16f2e:	90 e3       	ldi	r25, 0x30	; 48
   16f30:	a0 e0       	ldi	r26, 0x00	; 0
   16f32:	ed b7       	in	r30, 0x3d	; 61
   16f34:	fe b7       	in	r31, 0x3e	; 62
   16f36:	81 83       	std	Z+1, r24	; 0x01
   16f38:	92 83       	std	Z+2, r25	; 0x02
   16f3a:	a3 83       	std	Z+3, r26	; 0x03
   16f3c:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   16f40:	53 c0       	rjmp	.+166    	; 0x16fe8 <amigo_buffered_write+0x194>
   16f42:	26 fd       	sbrc	r18, 6
   16f44:	0e 94 52 85 	call	0x10aa4	; 0x10aa4 <gpib_timer_elapsed_begin>
   16f48:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16f4c:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16f50:	e0 90 62 19 	lds	r14, 0x1962	; 0x801962 <AMIGOs>
   16f54:	f0 90 63 19 	lds	r15, 0x1963	; 0x801963 <AMIGOs+0x1>
   16f58:	87 e0       	ldi	r24, 0x07	; 7
   16f5a:	e8 0e       	add	r14, r24
   16f5c:	f1 1c       	adc	r15, r1
   16f5e:	00 85       	ldd	r16, Z+8	; 0x08
   16f60:	11 85       	ldd	r17, Z+9	; 0x09
   16f62:	2a ee       	ldi	r18, 0xEA	; 234
   16f64:	3c e1       	ldi	r19, 0x1C	; 28
   16f66:	b5 01       	movw	r22, r10
   16f68:	a4 01       	movw	r20, r8
   16f6a:	82 81       	ldd	r24, Z+2	; 0x02
   16f6c:	93 81       	ldd	r25, Z+3	; 0x03
   16f6e:	0e 94 fb 84 	call	0x109f6	; 0x109f6 <dbf_open_write>
   16f72:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16f76:	86 ff       	sbrs	r24, 6
   16f78:	04 c0       	rjmp	.+8      	; 0x16f82 <amigo_buffered_write+0x12e>
   16f7a:	84 e9       	ldi	r24, 0x94	; 148
   16f7c:	90 e1       	ldi	r25, 0x10	; 16
   16f7e:	0e 94 64 85 	call	0x10ac8	; 0x10ac8 <gpib_timer_elapsed_end>
   16f82:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16f86:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16f8a:	87 81       	ldd	r24, Z+7	; 0x07
   16f8c:	90 85       	ldd	r25, Z+8	; 0x08
   16f8e:	89 2b       	or	r24, r25
   16f90:	d9 f0       	breq	.+54     	; 0x16fc8 <amigo_buffered_write+0x174>
   16f92:	81 e0       	ldi	r24, 0x01	; 1
   16f94:	86 83       	std	Z+6, r24	; 0x06
   16f96:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16f9a:	80 ff       	sbrs	r24, 0
   16f9c:	0a c0       	rjmp	.+20     	; 0x16fb2 <amigo_buffered_write+0x15e>
   16f9e:	87 ef       	ldi	r24, 0xF7	; 247
   16fa0:	9f e2       	ldi	r25, 0x2F	; 47
   16fa2:	a0 e0       	ldi	r26, 0x00	; 0
   16fa4:	ed b7       	in	r30, 0x3d	; 61
   16fa6:	fe b7       	in	r31, 0x3e	; 62
   16fa8:	81 83       	std	Z+1, r24	; 0x01
   16faa:	92 83       	std	Z+2, r25	; 0x02
   16fac:	a3 83       	std	Z+3, r26	; 0x03
   16fae:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   16fb2:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16fb6:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16fba:	81 81       	ldd	r24, Z+1	; 0x01
   16fbc:	90 e0       	ldi	r25, 0x00	; 0
   16fbe:	0e 94 2c 86 	call	0x10c58	; 0x10c58 <gpib_enable_PPR>
   16fc2:	80 e0       	ldi	r24, 0x00	; 0
   16fc4:	90 e0       	ldi	r25, 0x00	; 0
   16fc6:	1c c0       	rjmp	.+56     	; 0x17000 <amigo_buffered_write+0x1ac>
   16fc8:	8c eb       	ldi	r24, 0xBC	; 188
   16fca:	95 e1       	ldi	r25, 0x15	; 21
   16fcc:	d1 dc       	rcall	.-1630   	; 0x16970 <amigo_increment>
   16fce:	89 2b       	or	r24, r25
   16fd0:	59 f0       	breq	.+22     	; 0x16fe8 <amigo_buffered_write+0x194>
   16fd2:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16fd6:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16fda:	81 e0       	ldi	r24, 0x01	; 1
   16fdc:	86 83       	std	Z+6, r24	; 0x06
   16fde:	87 81       	ldd	r24, Z+7	; 0x07
   16fe0:	90 85       	ldd	r25, Z+8	; 0x08
   16fe2:	84 60       	ori	r24, 0x04	; 4
   16fe4:	90 87       	std	Z+8, r25	; 0x08
   16fe6:	87 83       	std	Z+7, r24	; 0x07
   16fe8:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16fec:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16ff0:	81 81       	ldd	r24, Z+1	; 0x01
   16ff2:	90 e0       	ldi	r25, 0x00	; 0
   16ff4:	0e 94 2c 86 	call	0x10c58	; 0x10c58 <gpib_enable_PPR>
   16ff8:	8e 81       	ldd	r24, Y+6	; 0x06
   16ffa:	9f 81       	ldd	r25, Y+7	; 0x07
   16ffc:	88 27       	eor	r24, r24
   16ffe:	90 7d       	andi	r25, 0xD0	; 208
   17000:	27 96       	adiw	r28, 0x07	; 7
   17002:	0f b6       	in	r0, 0x3f	; 63
   17004:	f8 94       	cli
   17006:	de bf       	out	0x3e, r29	; 62
   17008:	0f be       	out	0x3f, r0	; 63
   1700a:	cd bf       	out	0x3d, r28	; 61
   1700c:	df 91       	pop	r29
   1700e:	cf 91       	pop	r28
   17010:	1f 91       	pop	r17
   17012:	0f 91       	pop	r16
   17014:	ff 90       	pop	r15
   17016:	ef 90       	pop	r14
   17018:	bf 90       	pop	r11
   1701a:	af 90       	pop	r10
   1701c:	9f 90       	pop	r9
   1701e:	8f 90       	pop	r8
   17020:	08 95       	ret

00017022 <amigo_cmd_dsj>:
   17022:	a8 e0       	ldi	r26, 0x08	; 8
   17024:	b0 e0       	ldi	r27, 0x00	; 0
   17026:	e7 e1       	ldi	r30, 0x17	; 23
   17028:	f8 eb       	ldi	r31, 0xB8	; 184
   1702a:	0c 94 cb e6 	jmp	0x1cd96	; 0x1cd96 <__prologue_saves__+0x20>
   1702e:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   17032:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   17036:	86 81       	ldd	r24, Z+6	; 0x06
   17038:	88 87       	std	Y+8, r24	; 0x08
   1703a:	80 e0       	ldi	r24, 0x00	; 0
   1703c:	91 e0       	ldi	r25, 0x01	; 1
   1703e:	9f 83       	std	Y+7, r25	; 0x07
   17040:	8e 83       	std	Y+6, r24	; 0x06
   17042:	ae 01       	movw	r20, r28
   17044:	4a 5f       	subi	r20, 0xFA	; 250
   17046:	5f 4f       	sbci	r21, 0xFF	; 255
   17048:	61 e0       	ldi	r22, 0x01	; 1
   1704a:	70 e0       	ldi	r23, 0x00	; 0
   1704c:	ce 01       	movw	r24, r28
   1704e:	08 96       	adiw	r24, 0x08	; 8
   17050:	0e 94 5c 8b 	call	0x116b8	; 0x116b8 <gpib_write_str>
   17054:	2e 81       	ldd	r18, Y+6	; 0x06
   17056:	3f 81       	ldd	r19, Y+7	; 0x07
   17058:	22 27       	eor	r18, r18
   1705a:	30 7d       	andi	r19, 0xD0	; 208
   1705c:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   17060:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   17064:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   17068:	23 2b       	or	r18, r19
   1706a:	11 f4       	brne	.+4      	; 0x17070 <amigo_cmd_dsj+0x4e>
   1706c:	01 97       	sbiw	r24, 0x01	; 1
   1706e:	c1 f0       	breq	.+48     	; 0x170a0 <amigo_cmd_dsj+0x7e>
   17070:	81 e0       	ldi	r24, 0x01	; 1
   17072:	86 83       	std	Z+6, r24	; 0x06
   17074:	87 81       	ldd	r24, Z+7	; 0x07
   17076:	90 85       	ldd	r25, Z+8	; 0x08
   17078:	80 62       	ori	r24, 0x20	; 32
   1707a:	90 87       	std	Z+8, r25	; 0x08
   1707c:	87 83       	std	Z+7, r24	; 0x07
   1707e:	40 ff       	sbrs	r20, 0
   17080:	0a c0       	rjmp	.+20     	; 0x17096 <amigo_cmd_dsj+0x74>
   17082:	8d ed       	ldi	r24, 0xDD	; 221
   17084:	9f e2       	ldi	r25, 0x2F	; 47
   17086:	a0 e0       	ldi	r26, 0x00	; 0
   17088:	ed b7       	in	r30, 0x3d	; 61
   1708a:	fe b7       	in	r31, 0x3e	; 62
   1708c:	81 83       	std	Z+1, r24	; 0x01
   1708e:	92 83       	std	Z+2, r25	; 0x02
   17090:	a3 83       	std	Z+3, r26	; 0x03
   17092:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   17096:	8e 81       	ldd	r24, Y+6	; 0x06
   17098:	9f 81       	ldd	r25, Y+7	; 0x07
   1709a:	88 27       	eor	r24, r24
   1709c:	90 7d       	andi	r25, 0xD0	; 208
   1709e:	19 c0       	rjmp	.+50     	; 0x170d2 <amigo_cmd_dsj+0xb0>
   170a0:	45 ff       	sbrs	r20, 5
   170a2:	0e c0       	rjmp	.+28     	; 0x170c0 <amigo_cmd_dsj+0x9e>
   170a4:	86 81       	ldd	r24, Z+6	; 0x06
   170a6:	90 e0       	ldi	r25, 0x00	; 0
   170a8:	ed b7       	in	r30, 0x3d	; 61
   170aa:	fe b7       	in	r31, 0x3e	; 62
   170ac:	95 83       	std	Z+5, r25	; 0x05
   170ae:	84 83       	std	Z+4, r24	; 0x04
   170b0:	80 ed       	ldi	r24, 0xD0	; 208
   170b2:	9f e2       	ldi	r25, 0x2F	; 47
   170b4:	a0 e0       	ldi	r26, 0x00	; 0
   170b6:	81 83       	std	Z+1, r24	; 0x01
   170b8:	92 83       	std	Z+2, r25	; 0x02
   170ba:	a3 83       	std	Z+3, r26	; 0x03
   170bc:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   170c0:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   170c4:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   170c8:	16 82       	std	Z+6, r1	; 0x06
   170ca:	10 86       	std	Z+8, r1	; 0x08
   170cc:	17 82       	std	Z+7, r1	; 0x07
   170ce:	80 e0       	ldi	r24, 0x00	; 0
   170d0:	90 e0       	ldi	r25, 0x00	; 0
   170d2:	28 96       	adiw	r28, 0x08	; 8
   170d4:	e2 e0       	ldi	r30, 0x02	; 2
   170d6:	0c 94 e7 e6 	jmp	0x1cdce	; 0x1cdce <__epilogue_restores__+0x20>

000170da <amigo_cmd_clear>:
/// - Reference: A23.
/// - Select sector 0.
/// @return  0

int amigo_cmd_clear()
{
   170da:	00 d0       	rcall	.+0      	; 0x170dc <amigo_cmd_clear+0x2>
   170dc:	1f 92       	push	r1
#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   170de:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   170e2:	85 ff       	sbrs	r24, 5
   170e4:	0a c0       	rjmp	.+20     	; 0x170fa <amigo_cmd_clear+0x20>
        printf("[AMIGO Clear]\n");
   170e6:	81 ec       	ldi	r24, 0xC1	; 193
   170e8:	9f e2       	ldi	r25, 0x2F	; 47
   170ea:	a0 e0       	ldi	r26, 0x00	; 0
   170ec:	ed b7       	in	r30, 0x3d	; 61
   170ee:	fe b7       	in	r31, 0x3e	; 62
   170f0:	81 83       	std	Z+1, r24	; 0x01
   170f2:	92 83       	std	Z+2, r25	; 0x02
   170f4:	a3 83       	std	Z+3, r26	; 0x03
   170f6:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
#endif
    AMIGOs->sector = 0;
   170fa:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   170fe:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   17102:	15 82       	std	Z+5, r1	; 0x05
    AMIGOs->head = 0;
   17104:	14 82       	std	Z+4, r1	; 0x04
    AMIGOs->cyl = 0;
   17106:	13 82       	std	Z+3, r1	; 0x03
/// @todo FIXME
///
///  Clear the DSJ byte that might be 2 after powerup
///
    AMIGOs->dsj = 0;
   17108:	16 82       	std	Z+6, r1	; 0x06
    AMIGOs->Errors =0;
   1710a:	10 86       	std	Z+8, r1	; 0x08
   1710c:	17 82       	std	Z+7, r1	; 0x07

    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   1710e:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   17112:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   17116:	81 81       	ldd	r24, Z+1	; 0x01
   17118:	90 e0       	ldi	r25, 0x00	; 0
   1711a:	0e 94 2c 86 	call	0x10c58	; 0x10c58 <gpib_enable_PPR>
    return(0);
}
   1711e:	80 e0       	ldi	r24, 0x00	; 0
   17120:	90 e0       	ldi	r25, 0x00	; 0
   17122:	0f 90       	pop	r0
   17124:	0f 90       	pop	r0
   17126:	0f 90       	pop	r0
   17128:	08 95       	ret

0001712a <amigo_todo_op>:
/// @param[in] opcode: GPIB data byte OP Code
/// @param[in] len: Length of GOIB data returned
/// @return  0

int amigo_todo_op(uint8_t secondary, uint8_t opcode, int len)
{
   1712a:	af e0       	ldi	r26, 0x0F	; 15
   1712c:	b0 e0       	ldi	r27, 0x00	; 0
   1712e:	eb e9       	ldi	r30, 0x9B	; 155
   17130:	f8 eb       	ldi	r31, 0xB8	; 184
   17132:	0c 94 c7 e6 	jmp	0x1cd8e	; 0x1cd8e <__prologue_saves__+0x18>
   17136:	c8 2f       	mov	r28, r24
   17138:	e6 2e       	mov	r14, r22
   1713a:	8a 01       	movw	r16, r20
    if(AMIGO_is_MLA(listening))
   1713c:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17140:	90 e0       	ldi	r25, 0x00	; 0
   17142:	0e 94 92 8c 	call	0x11924	; 0x11924 <AMIGO_is_MLA>
   17146:	20 91 ee 1e 	lds	r18, 0x1EEE	; 0x801eee <talking>
   1714a:	f1 2c       	mov	r15, r1
   1714c:	d0 e0       	ldi	r29, 0x00	; 0
   1714e:	89 2b       	or	r24, r25
   17150:	f1 f0       	breq	.+60     	; 0x1718e <amigo_todo_op+0x64>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   17152:	82 2f       	mov	r24, r18
   17154:	90 e0       	ldi	r25, 0x00	; 0
   17156:	ed b7       	in	r30, 0x3d	; 61
   17158:	fe b7       	in	r31, 0x3e	; 62
   1715a:	97 87       	std	Z+15, r25	; 0x0f
   1715c:	86 87       	std	Z+14, r24	; 0x0e
   1715e:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17162:	90 e0       	ldi	r25, 0x00	; 0
   17164:	95 87       	std	Z+13, r25	; 0x0d
   17166:	84 87       	std	Z+12, r24	; 0x0c
   17168:	13 87       	std	Z+11, r17	; 0x0b
   1716a:	02 87       	std	Z+10, r16	; 0x0a
   1716c:	f1 86       	std	Z+9, r15	; 0x09
   1716e:	e0 86       	std	Z+8, r14	; 0x08
   17170:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   17174:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   17178:	80 81       	ld	r24, Z
   1717a:	90 e0       	ldi	r25, 0x00	; 0
   1717c:	ed b7       	in	r30, 0x3d	; 61
   1717e:	fe b7       	in	r31, 0x3e	; 62
   17180:	97 83       	std	Z+7, r25	; 0x07
   17182:	86 83       	std	Z+6, r24	; 0x06
   17184:	d5 83       	std	Z+5, r29	; 0x05
   17186:	c4 83       	std	Z+4, r28	; 0x04
   17188:	8a e5       	ldi	r24, 0x5A	; 90
   1718a:	9f e2       	ldi	r25, 0x2F	; 47
   1718c:	51 c0       	rjmp	.+162    	; 0x17230 <amigo_todo_op+0x106>
            secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(AMIGO_is_MTA(talking))
   1718e:	82 2f       	mov	r24, r18
   17190:	90 e0       	ldi	r25, 0x00	; 0
   17192:	0e 94 a4 8c 	call	0x11948	; 0x11948 <AMIGO_is_MTA>
   17196:	20 91 f0 1e 	lds	r18, 0x1EF0	; 0x801ef0 <listening>
   1719a:	30 91 ee 1e 	lds	r19, 0x1EEE	; 0x801eee <talking>
   1719e:	a0 91 62 19 	lds	r26, 0x1962	; 0x801962 <AMIGOs>
   171a2:	b0 91 63 19 	lds	r27, 0x1963	; 0x801963 <AMIGOs+0x1>
   171a6:	89 2b       	or	r24, r25
   171a8:	b1 f0       	breq	.+44     	; 0x171d6 <amigo_todo_op+0xac>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   171aa:	83 2f       	mov	r24, r19
   171ac:	90 e0       	ldi	r25, 0x00	; 0
   171ae:	ed b7       	in	r30, 0x3d	; 61
   171b0:	fe b7       	in	r31, 0x3e	; 62
   171b2:	97 87       	std	Z+15, r25	; 0x0f
   171b4:	86 87       	std	Z+14, r24	; 0x0e
   171b6:	30 e0       	ldi	r19, 0x00	; 0
   171b8:	35 87       	std	Z+13, r19	; 0x0d
   171ba:	24 87       	std	Z+12, r18	; 0x0c
   171bc:	13 87       	std	Z+11, r17	; 0x0b
   171be:	02 87       	std	Z+10, r16	; 0x0a
   171c0:	f1 86       	std	Z+9, r15	; 0x09
   171c2:	e0 86       	std	Z+8, r14	; 0x08
   171c4:	8c 91       	ld	r24, X
   171c6:	90 e0       	ldi	r25, 0x00	; 0
   171c8:	97 83       	std	Z+7, r25	; 0x07
   171ca:	86 83       	std	Z+6, r24	; 0x06
   171cc:	d5 83       	std	Z+5, r29	; 0x05
   171ce:	c4 83       	std	Z+4, r28	; 0x04
   171d0:	83 ef       	ldi	r24, 0xF3	; 243
   171d2:	9e e2       	ldi	r25, 0x2E	; 46
   171d4:	2d c0       	rjmp	.+90     	; 0x17230 <amigo_todo_op+0x106>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(talking == UNT)
   171d6:	3f 35       	cpi	r19, 0x5F	; 95
   171d8:	b1 f4       	brne	.+44     	; 0x17206 <amigo_todo_op+0xdc>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   171da:	8f e5       	ldi	r24, 0x5F	; 95
   171dc:	90 e0       	ldi	r25, 0x00	; 0
   171de:	ed b7       	in	r30, 0x3d	; 61
   171e0:	fe b7       	in	r31, 0x3e	; 62
   171e2:	97 87       	std	Z+15, r25	; 0x0f
   171e4:	86 87       	std	Z+14, r24	; 0x0e
   171e6:	30 e0       	ldi	r19, 0x00	; 0
   171e8:	35 87       	std	Z+13, r19	; 0x0d
   171ea:	24 87       	std	Z+12, r18	; 0x0c
   171ec:	13 87       	std	Z+11, r17	; 0x0b
   171ee:	02 87       	std	Z+10, r16	; 0x0a
   171f0:	f1 86       	std	Z+9, r15	; 0x09
   171f2:	e0 86       	std	Z+8, r14	; 0x08
   171f4:	8c 91       	ld	r24, X
   171f6:	90 e0       	ldi	r25, 0x00	; 0
   171f8:	97 83       	std	Z+7, r25	; 0x07
   171fa:	86 83       	std	Z+6, r24	; 0x06
   171fc:	d5 83       	std	Z+5, r29	; 0x05
   171fe:	c4 83       	std	Z+4, r28	; 0x04
   17200:	8c e8       	ldi	r24, 0x8C	; 140
   17202:	9e e2       	ldi	r25, 0x2E	; 46
   17204:	15 c0       	rjmp	.+42     	; 0x17230 <amigo_todo_op+0x106>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else
        printf("[U Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   17206:	83 2f       	mov	r24, r19
   17208:	90 e0       	ldi	r25, 0x00	; 0
   1720a:	ed b7       	in	r30, 0x3d	; 61
   1720c:	fe b7       	in	r31, 0x3e	; 62
   1720e:	97 87       	std	Z+15, r25	; 0x0f
   17210:	86 87       	std	Z+14, r24	; 0x0e
   17212:	30 e0       	ldi	r19, 0x00	; 0
   17214:	35 87       	std	Z+13, r19	; 0x0d
   17216:	24 87       	std	Z+12, r18	; 0x0c
   17218:	13 87       	std	Z+11, r17	; 0x0b
   1721a:	02 87       	std	Z+10, r16	; 0x0a
   1721c:	f1 86       	std	Z+9, r15	; 0x09
   1721e:	e0 86       	std	Z+8, r14	; 0x08
   17220:	8c 91       	ld	r24, X
   17222:	90 e0       	ldi	r25, 0x00	; 0
   17224:	97 83       	std	Z+7, r25	; 0x07
   17226:	86 83       	std	Z+6, r24	; 0x06
   17228:	d5 83       	std	Z+5, r29	; 0x05
   1722a:	c4 83       	std	Z+4, r28	; 0x04
   1722c:	87 e2       	ldi	r24, 0x27	; 39
   1722e:	9e e2       	ldi	r25, 0x2E	; 46
   17230:	a0 e0       	ldi	r26, 0x00	; 0
   17232:	81 83       	std	Z+1, r24	; 0x01
   17234:	92 83       	std	Z+2, r25	; 0x02
   17236:	a3 83       	std	Z+3, r26	; 0x03
   17238:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
            secondary, AMIGOs->state, opcode, len, listening, talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   1723c:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   17240:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   17244:	81 81       	ldd	r24, Z+1	; 0x01
   17246:	90 e0       	ldi	r25, 0x00	; 0
   17248:	0e 94 2c 86 	call	0x10c58	; 0x10c58 <gpib_enable_PPR>
    return(0);
}
   1724c:	80 e0       	ldi	r24, 0x00	; 0
   1724e:	90 e0       	ldi	r25, 0x00	; 0
   17250:	cd b7       	in	r28, 0x3d	; 61
   17252:	de b7       	in	r29, 0x3e	; 62
   17254:	2f 96       	adiw	r28, 0x0f	; 15
   17256:	e6 e0       	ldi	r30, 0x06	; 6
   17258:	0c 94 e3 e6 	jmp	0x1cdc6	; 0x1cdc6 <__epilogue_restores__+0x18>

0001725c <amigo_todo>:
/// @param[in] secondary: GPIB seconday command
///
/// @return  0

int amigo_todo(uint8_t secondary)
{
   1725c:	ab e0       	ldi	r26, 0x0B	; 11
   1725e:	b0 e0       	ldi	r27, 0x00	; 0
   17260:	e4 e3       	ldi	r30, 0x34	; 52
   17262:	f9 eb       	ldi	r31, 0xB9	; 185
   17264:	0c 94 cb e6 	jmp	0x1cd96	; 0x1cd96 <__prologue_saves__+0x20>
   17268:	c8 2f       	mov	r28, r24
    if(AMIGO_is_MLA(listening))
   1726a:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   1726e:	90 e0       	ldi	r25, 0x00	; 0
   17270:	0e 94 92 8c 	call	0x11924	; 0x11924 <AMIGO_is_MLA>
   17274:	20 91 ee 1e 	lds	r18, 0x1EEE	; 0x801eee <talking>
   17278:	d0 e0       	ldi	r29, 0x00	; 0
   1727a:	89 2b       	or	r24, r25
   1727c:	d1 f0       	breq	.+52     	; 0x172b2 <amigo_todo+0x56>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   1727e:	82 2f       	mov	r24, r18
   17280:	90 e0       	ldi	r25, 0x00	; 0
   17282:	ed b7       	in	r30, 0x3d	; 61
   17284:	fe b7       	in	r31, 0x3e	; 62
   17286:	93 87       	std	Z+11, r25	; 0x0b
   17288:	82 87       	std	Z+10, r24	; 0x0a
   1728a:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   1728e:	90 e0       	ldi	r25, 0x00	; 0
   17290:	91 87       	std	Z+9, r25	; 0x09
   17292:	80 87       	std	Z+8, r24	; 0x08
   17294:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   17298:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   1729c:	80 81       	ld	r24, Z
   1729e:	90 e0       	ldi	r25, 0x00	; 0
   172a0:	ed b7       	in	r30, 0x3d	; 61
   172a2:	fe b7       	in	r31, 0x3e	; 62
   172a4:	97 83       	std	Z+7, r25	; 0x07
   172a6:	86 83       	std	Z+6, r24	; 0x06
   172a8:	d5 83       	std	Z+5, r29	; 0x05
   172aa:	c4 83       	std	Z+4, r28	; 0x04
   172ac:	87 ed       	ldi	r24, 0xD7	; 215
   172ae:	9d e2       	ldi	r25, 0x2D	; 45
   172b0:	43 c0       	rjmp	.+134    	; 0x17338 <amigo_todo+0xdc>
            secondary,AMIGOs->state,listening,talking);
    else if(AMIGO_is_MTA(talking))
   172b2:	82 2f       	mov	r24, r18
   172b4:	90 e0       	ldi	r25, 0x00	; 0
   172b6:	0e 94 a4 8c 	call	0x11948	; 0x11948 <AMIGO_is_MTA>
   172ba:	20 91 f0 1e 	lds	r18, 0x1EF0	; 0x801ef0 <listening>
   172be:	40 91 ee 1e 	lds	r20, 0x1EEE	; 0x801eee <talking>
   172c2:	a0 91 62 19 	lds	r26, 0x1962	; 0x801962 <AMIGOs>
   172c6:	b0 91 63 19 	lds	r27, 0x1963	; 0x801963 <AMIGOs+0x1>
   172ca:	89 2b       	or	r24, r25
   172cc:	89 f0       	breq	.+34     	; 0x172f0 <amigo_todo+0x94>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   172ce:	50 e0       	ldi	r21, 0x00	; 0
   172d0:	ed b7       	in	r30, 0x3d	; 61
   172d2:	fe b7       	in	r31, 0x3e	; 62
   172d4:	53 87       	std	Z+11, r21	; 0x0b
   172d6:	42 87       	std	Z+10, r20	; 0x0a
   172d8:	30 e0       	ldi	r19, 0x00	; 0
   172da:	31 87       	std	Z+9, r19	; 0x09
   172dc:	20 87       	std	Z+8, r18	; 0x08
   172de:	8c 91       	ld	r24, X
   172e0:	90 e0       	ldi	r25, 0x00	; 0
   172e2:	97 83       	std	Z+7, r25	; 0x07
   172e4:	86 83       	std	Z+6, r24	; 0x06
   172e6:	d5 83       	std	Z+5, r29	; 0x05
   172e8:	c4 83       	std	Z+4, r28	; 0x04
   172ea:	87 e8       	ldi	r24, 0x87	; 135
   172ec:	9d e2       	ldi	r25, 0x2D	; 45
   172ee:	24 c0       	rjmp	.+72     	; 0x17338 <amigo_todo+0xdc>
                secondary,AMIGOs->state,listening,talking);
    else if(talking == UNT)
   172f0:	4f 35       	cpi	r20, 0x5F	; 95
   172f2:	91 f4       	brne	.+36     	; 0x17318 <amigo_todo+0xbc>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   172f4:	8f e5       	ldi	r24, 0x5F	; 95
   172f6:	90 e0       	ldi	r25, 0x00	; 0
   172f8:	ed b7       	in	r30, 0x3d	; 61
   172fa:	fe b7       	in	r31, 0x3e	; 62
   172fc:	93 87       	std	Z+11, r25	; 0x0b
   172fe:	82 87       	std	Z+10, r24	; 0x0a
   17300:	30 e0       	ldi	r19, 0x00	; 0
   17302:	31 87       	std	Z+9, r19	; 0x09
   17304:	20 87       	std	Z+8, r18	; 0x08
   17306:	8c 91       	ld	r24, X
   17308:	90 e0       	ldi	r25, 0x00	; 0
   1730a:	97 83       	std	Z+7, r25	; 0x07
   1730c:	86 83       	std	Z+6, r24	; 0x06
   1730e:	d5 83       	std	Z+5, r29	; 0x05
   17310:	c4 83       	std	Z+4, r28	; 0x04
   17312:	87 e3       	ldi	r24, 0x37	; 55
   17314:	9d e2       	ldi	r25, 0x2D	; 45
   17316:	10 c0       	rjmp	.+32     	; 0x17338 <amigo_todo+0xdc>
                secondary,AMIGOs->state,listening,talking);
    else
        printf("[E   Amigo ERROR secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   17318:	50 e0       	ldi	r21, 0x00	; 0
   1731a:	ed b7       	in	r30, 0x3d	; 61
   1731c:	fe b7       	in	r31, 0x3e	; 62
   1731e:	53 87       	std	Z+11, r21	; 0x0b
   17320:	42 87       	std	Z+10, r20	; 0x0a
   17322:	30 e0       	ldi	r19, 0x00	; 0
   17324:	31 87       	std	Z+9, r19	; 0x09
   17326:	20 87       	std	Z+8, r18	; 0x08
   17328:	8c 91       	ld	r24, X
   1732a:	90 e0       	ldi	r25, 0x00	; 0
   1732c:	97 83       	std	Z+7, r25	; 0x07
   1732e:	86 83       	std	Z+6, r24	; 0x06
   17330:	d5 83       	std	Z+5, r29	; 0x05
   17332:	c4 83       	std	Z+4, r28	; 0x04
   17334:	86 ee       	ldi	r24, 0xE6	; 230
   17336:	9c e2       	ldi	r25, 0x2C	; 44
   17338:	a0 e0       	ldi	r26, 0x00	; 0
   1733a:	81 83       	std	Z+1, r24	; 0x01
   1733c:	92 83       	std	Z+2, r25	; 0x02
   1733e:	a3 83       	std	Z+3, r26	; 0x03
   17340:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
            secondary,AMIGOs->state,listening,talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   17344:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   17348:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   1734c:	81 81       	ldd	r24, Z+1	; 0x01
   1734e:	90 e0       	ldi	r25, 0x00	; 0
   17350:	0e 94 2c 86 	call	0x10c58	; 0x10c58 <gpib_enable_PPR>
    return(0);
}
   17354:	80 e0       	ldi	r24, 0x00	; 0
   17356:	90 e0       	ldi	r25, 0x00	; 0
   17358:	cd b7       	in	r28, 0x3d	; 61
   1735a:	de b7       	in	r29, 0x3e	; 62
   1735c:	2b 96       	adiw	r28, 0x0b	; 11
   1735e:	e2 e0       	ldi	r30, 0x02	; 2
   17360:	0c 94 e7 e6 	jmp	0x1cdce	; 0x1cdce <__epilogue_restores__+0x20>

00017364 <amigo_check_unit>:
/// @brief  Amigo Check Valid unit
/// @param[in] unit: unit to set
/// @return void
void amigo_check_unit(uint8_t unit)
{
    if(unit != 15)
   17364:	8f 30       	cpi	r24, 0x0F	; 15
   17366:	29 f0       	breq	.+10     	; 0x17372 <amigo_check_unit+0xe>
        AMIGOs->unitNO = unit;
   17368:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   1736c:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   17370:	81 83       	std	Z+1, r24	; 0x01
    if(AMIGOs->unitNO != 0)
   17372:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   17376:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   1737a:	81 81       	ldd	r24, Z+1	; 0x01
   1737c:	88 23       	and	r24, r24
   1737e:	29 f0       	breq	.+10     	; 0x1738a <amigo_check_unit+0x26>
        AMIGOs->Errors |= ERR_UNIT;
   17380:	87 81       	ldd	r24, Z+7	; 0x07
   17382:	90 85       	ldd	r25, Z+8	; 0x08
   17384:	80 64       	ori	r24, 0x40	; 64
   17386:	90 87       	std	Z+8, r25	; 0x08
   17388:	87 83       	std	Z+7, r24	; 0x07
   1738a:	08 95       	ret

0001738c <Amigo_Command>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)

int Amigo_Command( int secondary )
{
   1738c:	ac e1       	ldi	r26, 0x1C	; 28
   1738e:	b0 e0       	ldi	r27, 0x00	; 0
   17390:	ec ec       	ldi	r30, 0xCC	; 204
   17392:	f9 eb       	ldi	r31, 0xB9	; 185
   17394:	0c 94 c7 e6 	jmp	0x1cd8e	; 0x1cd8e <__prologue_saves__+0x18>
   17398:	7c 01       	movw	r14, r24
    uint8_t *ptr;
    uint16_t status;                              // Current status
    UINT len;                                     // Size of Data/Op Codes/Parameters read in bytes

#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1739a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1739e:	85 ff       	sbrs	r24, 5
   173a0:	16 c0       	rjmp	.+44     	; 0x173ce <Amigo_Command+0x42>
        printf("[AMIGO Command(%02XH): listen:%02XH, talk:%02XH]\n",
   173a2:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   173a6:	90 e0       	ldi	r25, 0x00	; 0
   173a8:	ed b7       	in	r30, 0x3d	; 61
   173aa:	fe b7       	in	r31, 0x3e	; 62
   173ac:	91 87       	std	Z+9, r25	; 0x09
   173ae:	80 87       	std	Z+8, r24	; 0x08
   173b0:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   173b4:	90 e0       	ldi	r25, 0x00	; 0
   173b6:	97 83       	std	Z+7, r25	; 0x07
   173b8:	86 83       	std	Z+6, r24	; 0x06
   173ba:	f5 82       	std	Z+5, r15	; 0x05
   173bc:	e4 82       	std	Z+4, r14	; 0x04
   173be:	84 eb       	ldi	r24, 0xB4	; 180
   173c0:	9c e2       	ldi	r25, 0x2C	; 44
   173c2:	a0 e0       	ldi	r26, 0x00	; 0
   173c4:	81 83       	std	Z+1, r24	; 0x01
   173c6:	92 83       	std	Z+2, r25	; 0x02
   173c8:	a3 83       	std	Z+3, r26	; 0x03
   173ca:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
            secondary, listening, talking);
#endif

///  Reference: A14
    if (secondary == 0x7e && AMIGO_is_MTA(talking))
   173ce:	fe e7       	ldi	r31, 0x7E	; 126
   173d0:	ef 16       	cp	r14, r31
   173d2:	f1 04       	cpc	r15, r1
   173d4:	f1 f5       	brne	.+124    	; 0x17452 <Amigo_Command+0xc6>
   173d6:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   173da:	90 e0       	ldi	r25, 0x00	; 0
   173dc:	0e 94 a4 8c 	call	0x11948	; 0x11948 <AMIGO_is_MTA>
   173e0:	89 2b       	or	r24, r25
   173e2:	09 f4       	brne	.+2      	; 0x173e6 <Amigo_Command+0x5a>
   173e4:	86 c0       	rjmp	.+268    	; 0x174f2 <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   173e6:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   173ea:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   173ee:	81 81       	ldd	r24, Z+1	; 0x01
   173f0:	90 e0       	ldi	r25, 0x00	; 0
   173f2:	0e 94 62 86 	call	0x10cc4	; 0x10cc4 <gpib_disable_PPR>
        status = EOI_FLAG;
   173f6:	80 e0       	ldi	r24, 0x00	; 0
   173f8:	91 e0       	ldi	r25, 0x01	; 1
   173fa:	9c 8f       	std	Y+28, r25	; 0x1c
   173fc:	8b 8f       	std	Y+27, r24	; 0x1b
        len = gpib_write_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   173fe:	ae 01       	movw	r20, r28
   17400:	45 5e       	subi	r20, 0xE5	; 229
   17402:	5f 4f       	sbci	r21, 0xFF	; 255
   17404:	60 e0       	ldi	r22, 0x00	; 0
   17406:	72 e0       	ldi	r23, 0x02	; 2
   17408:	8a ee       	ldi	r24, 0xEA	; 234
   1740a:	9c e1       	ldi	r25, 0x1C	; 28
   1740c:	0e 94 5c 8b 	call	0x116b8	; 0x116b8 <gpib_write_str>
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   17410:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   17414:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   17418:	81 81       	ldd	r24, Z+1	; 0x01
   1741a:	90 e0       	ldi	r25, 0x00	; 0
   1741c:	0e 94 2c 86 	call	0x10c58	; 0x10c58 <gpib_enable_PPR>
        if(status & ERROR_MASK)
   17420:	8b 8d       	ldd	r24, Y+27	; 0x1b
   17422:	9c 8d       	ldd	r25, Y+28	; 0x1c
   17424:	88 27       	eor	r24, r24
   17426:	90 7d       	andi	r25, 0xD0	; 208
   17428:	89 2b       	or	r24, r25
   1742a:	09 f4       	brne	.+2      	; 0x1742e <Amigo_Command+0xa2>
   1742c:	89 c2       	rjmp	.+1298   	; 0x17940 <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   1742e:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   17432:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   17436:	81 e0       	ldi	r24, 0x01	; 1
   17438:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   1743a:	87 81       	ldd	r24, Z+7	; 0x07
   1743c:	90 85       	ldd	r25, Z+8	; 0x08
   1743e:	80 62       	ori	r24, 0x20	; 32
   17440:	90 87       	std	Z+8, r25	; 0x08
   17442:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & GPIB_ERR)
   17444:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17448:	80 ff       	sbrs	r24, 0
   1744a:	7a c2       	rjmp	.+1268   	; 0x17940 <Amigo_Command+0x5b4>
                printf("[AMIGO_Command:GPIB write error]\n");
   1744c:	82 e9       	ldi	r24, 0x92	; 146
   1744e:	9c e2       	ldi	r25, 0x2C	; 44
   17450:	8e c0       	rjmp	.+284    	; 0x1756e <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

///  Reference: A25
    if (secondary == 0x7f && AMIGO_is_MLA(listening))
   17452:	ff e7       	ldi	r31, 0x7F	; 127
   17454:	ef 16       	cp	r14, r31
   17456:	f1 04       	cpc	r15, r1
   17458:	09 f0       	breq	.+2      	; 0x1745c <Amigo_Command+0xd0>
   1745a:	4b c0       	rjmp	.+150    	; 0x174f2 <Amigo_Command+0x166>
   1745c:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17460:	90 e0       	ldi	r25, 0x00	; 0
   17462:	0e 94 92 8c 	call	0x11924	; 0x11924 <AMIGO_is_MLA>
   17466:	89 2b       	or	r24, r25
   17468:	09 f4       	brne	.+2      	; 0x1746c <Amigo_Command+0xe0>
   1746a:	43 c0       	rjmp	.+134    	; 0x174f2 <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   1746c:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   17470:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   17474:	81 81       	ldd	r24, Z+1	; 0x01
   17476:	90 e0       	ldi	r25, 0x00	; 0
   17478:	0e 94 62 86 	call	0x10cc4	; 0x10cc4 <gpib_disable_PPR>
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   1747c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17480:	87 fd       	sbrc	r24, 7
            gpib_timer_elapsed_begin();
   17482:	0e 94 52 85 	call	0x10aa4	; 0x10aa4 <gpib_timer_elapsed_begin>
#endif
        status = EOI_FLAG;
   17486:	80 e0       	ldi	r24, 0x00	; 0
   17488:	91 e0       	ldi	r25, 0x01	; 1
   1748a:	9c 8f       	std	Y+28, r25	; 0x1c
   1748c:	8b 8f       	std	Y+27, r24	; 0x1b
        len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   1748e:	ae 01       	movw	r20, r28
   17490:	45 5e       	subi	r20, 0xE5	; 229
   17492:	5f 4f       	sbci	r21, 0xFF	; 255
   17494:	60 e0       	ldi	r22, 0x00	; 0
   17496:	72 e0       	ldi	r23, 0x02	; 2
   17498:	8a ee       	ldi	r24, 0xEA	; 234
   1749a:	9c e1       	ldi	r25, 0x1C	; 28
   1749c:	0e 94 ba 8a 	call	0x11574	; 0x11574 <gpib_read_str>
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   174a0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   174a4:	87 ff       	sbrs	r24, 7
   174a6:	04 c0       	rjmp	.+8      	; 0x174b0 <Amigo_Command+0x124>
            gpib_timer_elapsed_end("GPIB read");
   174a8:	8b ec       	ldi	r24, 0xCB	; 203
   174aa:	95 e1       	ldi	r25, 0x15	; 21
   174ac:	0e 94 64 85 	call	0x10ac8	; 0x10ac8 <gpib_timer_elapsed_end>
#endif
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   174b0:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   174b4:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   174b8:	81 81       	ldd	r24, Z+1	; 0x01
   174ba:	90 e0       	ldi	r25, 0x00	; 0
   174bc:	0e 94 2c 86 	call	0x10c58	; 0x10c58 <gpib_enable_PPR>
        if(status & ERROR_MASK)
   174c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
   174c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
   174c4:	88 27       	eor	r24, r24
   174c6:	90 7d       	andi	r25, 0xD0	; 208
   174c8:	89 2b       	or	r24, r25
   174ca:	09 f4       	brne	.+2      	; 0x174ce <Amigo_Command+0x142>
   174cc:	39 c2       	rjmp	.+1138   	; 0x17940 <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   174ce:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   174d2:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   174d6:	81 e0       	ldi	r24, 0x01	; 1
   174d8:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   174da:	87 81       	ldd	r24, Z+7	; 0x07
   174dc:	90 85       	ldd	r25, Z+8	; 0x08
   174de:	80 62       	ori	r24, 0x20	; 32
   174e0:	90 87       	std	Z+8, r25	; 0x08
   174e2:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & GPIB_ERR)
   174e4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   174e8:	80 ff       	sbrs	r24, 0
   174ea:	2a c2       	rjmp	.+1108   	; 0x17940 <Amigo_Command+0x5b4>
                printf("[AMIGO Command:GPIB read error]\n");
   174ec:	81 e7       	ldi	r24, 0x71	; 113
   174ee:	9c e2       	ldi	r25, 0x2C	; 44
   174f0:	3e c0       	rjmp	.+124    	; 0x1756e <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   174f2:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   174f6:	90 e0       	ldi	r25, 0x00	; 0
   174f8:	0e 94 92 8c 	call	0x11924	; 0x11924 <AMIGO_is_MLA>
   174fc:	89 2b       	or	r24, r25
   174fe:	19 f4       	brne	.+6      	; 0x17506 <Amigo_Command+0x17a>
        return(0);
   17500:	80 e0       	ldi	r24, 0x00	; 0
   17502:	90 e0       	ldi	r25, 0x00	; 0
   17504:	25 c2       	rjmp	.+1098   	; 0x17950 <Amigo_Command+0x5c4>
                printf("[AMIGO Command:GPIB read error]\n");
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   17506:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   1750a:	90 e0       	ldi	r25, 0x00	; 0
   1750c:	0e 94 a4 8c 	call	0x11948	; 0x11948 <AMIGO_is_MTA>
   17510:	89 2b       	or	r24, r25
   17512:	b1 f7       	brne	.-20     	; 0x17500 <Amigo_Command+0x174>
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17514:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   17518:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   1751c:	81 81       	ldd	r24, Z+1	; 0x01
   1751e:	90 e0       	ldi	r25, 0x00	; 0
   17520:	0e 94 62 86 	call	0x10cc4	; 0x10cc4 <gpib_disable_PPR>

///  Note: the function will "unread" any commands and return
///  All Data MUST have EOI

    status = EOI_FLAG;
   17524:	80 e0       	ldi	r24, 0x00	; 0
   17526:	91 e0       	ldi	r25, 0x01	; 1
   17528:	9c 8f       	std	Y+28, r25	; 0x1c
   1752a:	8b 8f       	std	Y+27, r24	; 0x1b
    len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   1752c:	ae 01       	movw	r20, r28
   1752e:	45 5e       	subi	r20, 0xE5	; 229
   17530:	5f 4f       	sbci	r21, 0xFF	; 255
   17532:	60 e0       	ldi	r22, 0x00	; 0
   17534:	72 e0       	ldi	r23, 0x02	; 2
   17536:	8a ee       	ldi	r24, 0xEA	; 234
   17538:	9c e1       	ldi	r25, 0x1C	; 28
   1753a:	0e 94 ba 8a 	call	0x11574	; 0x11574 <gpib_read_str>
   1753e:	8c 01       	movw	r16, r24
    if(status & ERROR_MASK)
   17540:	8b 8d       	ldd	r24, Y+27	; 0x1b
   17542:	9c 8d       	ldd	r25, Y+28	; 0x1c
   17544:	88 27       	eor	r24, r24
   17546:	90 7d       	andi	r25, 0xD0	; 208
   17548:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1754c:	89 2b       	or	r24, r25
   1754e:	c1 f0       	breq	.+48     	; 0x17580 <Amigo_Command+0x1f4>
    {
        AMIGOs->dsj = 1;
   17550:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   17554:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   17558:	81 e0       	ldi	r24, 0x01	; 1
   1755a:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   1755c:	87 81       	ldd	r24, Z+7	; 0x07
   1755e:	90 85       	ldd	r25, Z+8	; 0x08
   17560:	80 62       	ori	r24, 0x20	; 32
   17562:	90 87       	std	Z+8, r25	; 0x08
   17564:	87 83       	std	Z+7, r24	; 0x07
        if(debuglevel & GPIB_ERR)
   17566:	20 ff       	sbrs	r18, 0
   17568:	eb c1       	rjmp	.+982    	; 0x17940 <Amigo_Command+0x5b4>
            printf("[AMIGO Command:GPIB read error]\n");
   1756a:	80 e5       	ldi	r24, 0x50	; 80
   1756c:	9c e2       	ldi	r25, 0x2C	; 44
   1756e:	a0 e0       	ldi	r26, 0x00	; 0
   17570:	ed b7       	in	r30, 0x3d	; 61
   17572:	fe b7       	in	r31, 0x3e	; 62
   17574:	81 83       	std	Z+1, r24	; 0x01
   17576:	92 83       	std	Z+2, r25	; 0x02
   17578:	a3 83       	std	Z+3, r26	; 0x03
   1757a:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   1757e:	e0 c1       	rjmp	.+960    	; 0x17940 <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }
#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17580:	25 ff       	sbrs	r18, 5
   17582:	0e c0       	rjmp	.+28     	; 0x175a0 <Amigo_Command+0x214>
        printf("[AMIGO Command(%02XH): GPIB read bytes:%02XH]\n",
   17584:	ed b7       	in	r30, 0x3d	; 61
   17586:	fe b7       	in	r31, 0x3e	; 62
   17588:	17 83       	std	Z+7, r17	; 0x07
   1758a:	06 83       	std	Z+6, r16	; 0x06
   1758c:	f5 82       	std	Z+5, r15	; 0x05
   1758e:	e4 82       	std	Z+4, r14	; 0x04
   17590:	81 e2       	ldi	r24, 0x21	; 33
   17592:	9c e2       	ldi	r25, 0x2C	; 44
   17594:	a0 e0       	ldi	r26, 0x00	; 0
   17596:	81 83       	std	Z+1, r24	; 0x01
   17598:	92 83       	std	Z+2, r25	; 0x02
   1759a:	a3 83       	std	Z+3, r26	; 0x03
   1759c:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
            secondary, len);
#endif
    if(!len)
   175a0:	01 15       	cp	r16, r1
   175a2:	11 05       	cpc	r17, r1
   175a4:	61 f4       	brne	.+24     	; 0x175be <Amigo_Command+0x232>
    {
        AMIGOs->dsj = 1;
   175a6:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   175aa:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   175ae:	81 e0       	ldi	r24, 0x01	; 1
   175b0:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   175b2:	87 81       	ldd	r24, Z+7	; 0x07
   175b4:	90 85       	ldd	r25, Z+8	; 0x08
   175b6:	80 62       	ori	r24, 0x20	; 32
   175b8:	90 87       	std	Z+8, r25	; 0x08
   175ba:	87 83       	std	Z+7, r24	; 0x07
   175bc:	c1 c1       	rjmp	.+898    	; 0x17940 <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }

    ptr = gpib_iobuff;
    op = *ptr++;
   175be:	60 91 ea 1c 	lds	r22, 0x1CEA	; 0x801cea <gpib_iobuff>

    if (secondary == 0x68)
   175c2:	f8 e6       	ldi	r31, 0x68	; 104
   175c4:	ef 16       	cp	r14, r31
   175c6:	f1 04       	cpc	r15, r1
   175c8:	09 f0       	breq	.+2      	; 0x175cc <Amigo_Command+0x240>
   175ca:	28 c1       	rjmp	.+592    	; 0x1781c <Amigo_Command+0x490>
    {
        if(op == 0x00 && len == 2)
   175cc:	61 11       	cpse	r22, r1
   175ce:	2e c0       	rjmp	.+92     	; 0x1762c <Amigo_Command+0x2a0>
   175d0:	02 30       	cpi	r16, 0x02	; 2
   175d2:	11 05       	cpc	r17, r1
   175d4:	09 f0       	breq	.+2      	; 0x175d8 <Amigo_Command+0x24c>
   175d6:	b9 c1       	rjmp	.+882    	; 0x1794a <Amigo_Command+0x5be>
        {
///  Reference: A40

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   175d8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   175dc:	85 ff       	sbrs	r24, 5
   175de:	0a c0       	rjmp	.+20     	; 0x175f4 <Amigo_Command+0x268>
                printf("[AMIGO Cold Load Read Command]\n");
   175e0:	81 e0       	ldi	r24, 0x01	; 1
   175e2:	9c e2       	ldi	r25, 0x2C	; 44
   175e4:	a0 e0       	ldi	r26, 0x00	; 0
   175e6:	ed b7       	in	r30, 0x3d	; 61
   175e8:	fe b7       	in	r31, 0x3e	; 62
   175ea:	81 83       	std	Z+1, r24	; 0x01
   175ec:	92 83       	std	Z+2, r25	; 0x02
   175ee:	a3 83       	std	Z+3, r26	; 0x03
   175f0:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
#endif
///TODO we do NOT support multiple units yet
            AMIGOs->unitNO = 0;
   175f4:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   175f8:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   175fc:	11 82       	std	Z+1, r1	; 0x01
            AMIGOs->dsj = 0;
   175fe:	16 82       	std	Z+6, r1	; 0x06
            AMIGOs->Errors = 0;
   17600:	10 86       	std	Z+8, r1	; 0x08
   17602:	17 82       	std	Z+7, r1	; 0x07
/// Fill in temparary address
            tmp.cyl = 0;
   17604:	1d 86       	std	Y+13, r1	; 0x0d
            tmp.head = ( (0xff & *ptr) >> 6) & 0x03;
   17606:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
   1760a:	98 2f       	mov	r25, r24
   1760c:	92 95       	swap	r25
   1760e:	96 95       	lsr	r25
   17610:	96 95       	lsr	r25
   17612:	93 70       	andi	r25, 0x03	; 3
   17614:	9e 87       	std	Y+14, r25	; 0x0e
            tmp.sector = 0x3f & *ptr;
   17616:	8f 73       	andi	r24, 0x3F	; 63
   17618:	8f 87       	std	Y+15, r24	; 0x0f
            ++ptr;
//update to real address on sucess
            amigo_seek((AMIGOStateType *) &tmp);
   1761a:	ce 01       	movw	r24, r28
   1761c:	0a 96       	adiw	r24, 0x0a	; 10
   1761e:	d1 d9       	rcall	.-3166   	; 0x169c2 <amigo_seek>
            AMIGOs->state = AMIGO_COLD_LOAD_READ;
   17620:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   17624:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   17628:	85 e0       	ldi	r24, 0x05	; 5
   1762a:	19 c1       	rjmp	.+562    	; 0x1785e <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 5)
   1762c:	62 30       	cpi	r22, 0x02	; 2
   1762e:	09 f0       	breq	.+2      	; 0x17632 <Amigo_Command+0x2a6>
   17630:	3f c0       	rjmp	.+126    	; 0x176b0 <Amigo_Command+0x324>
   17632:	05 30       	cpi	r16, 0x05	; 5
   17634:	11 05       	cpc	r17, r1
   17636:	d1 f4       	brne	.+52     	; 0x1766c <Amigo_Command+0x2e0>
/// @brief
///  Seek 1 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17638:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1763c:	85 ff       	sbrs	r24, 5
   1763e:	0a c0       	rjmp	.+20     	; 0x17654 <Amigo_Command+0x2c8>
                printf("[AMIGO Seek len=5]\n");
   17640:	8d ee       	ldi	r24, 0xED	; 237
   17642:	9b e2       	ldi	r25, 0x2B	; 43
   17644:	a0 e0       	ldi	r26, 0x00	; 0
   17646:	ed b7       	in	r30, 0x3d	; 61
   17648:	fe b7       	in	r31, 0x3e	; 62
   1764a:	81 83       	std	Z+1, r24	; 0x01
   1764c:	92 83       	std	Z+2, r25	; 0x02
   1764e:	a3 83       	std	Z+3, r26	; 0x03
   17650:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17654:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
   17658:	85 de       	rcall	.-758    	; 0x17364 <amigo_check_unit>

/// Fill in temparary address
            tmp.cyl = 0xff & *ptr++;
   1765a:	80 91 ec 1c 	lds	r24, 0x1CEC	; 0x801cec <gpib_iobuff+0x2>
   1765e:	8d 87       	std	Y+13, r24	; 0x0d
            tmp.head = 0xff & *ptr++;
   17660:	80 91 ed 1c 	lds	r24, 0x1CED	; 0x801ced <gpib_iobuff+0x3>
   17664:	8e 87       	std	Y+14, r24	; 0x0e
            tmp.sector = 0xff & *ptr++;
   17666:	80 91 ee 1c 	lds	r24, 0x1CEE	; 0x801cee <gpib_iobuff+0x4>
   1766a:	1d c0       	rjmp	.+58     	; 0x176a6 <Amigo_Command+0x31a>
//update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 6)
   1766c:	06 30       	cpi	r16, 0x06	; 6
   1766e:	11 05       	cpc	r17, r1
   17670:	09 f0       	breq	.+2      	; 0x17674 <Amigo_Command+0x2e8>
   17672:	6b c1       	rjmp	.+726    	; 0x1794a <Amigo_Command+0x5be>
/// @brief
///  Seek 2 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17674:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17678:	85 ff       	sbrs	r24, 5
   1767a:	0a c0       	rjmp	.+20     	; 0x17690 <Amigo_Command+0x304>
                printf("[AMIGO Seek len=6]\n");
   1767c:	89 ed       	ldi	r24, 0xD9	; 217
   1767e:	9b e2       	ldi	r25, 0x2B	; 43
   17680:	a0 e0       	ldi	r26, 0x00	; 0
   17682:	ed b7       	in	r30, 0x3d	; 61
   17684:	fe b7       	in	r31, 0x3e	; 62
   17686:	81 83       	std	Z+1, r24	; 0x01
   17688:	92 83       	std	Z+2, r25	; 0x02
   1768a:	a3 83       	std	Z+3, r26	; 0x03
   1768c:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17690:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
   17694:	67 de       	rcall	.-818    	; 0x17364 <amigo_check_unit>
/// Fill in temparary address
            tmp.cyl = (0xff & *ptr++) << 8;       // MSB
            tmp.cyl |= (0xff & *ptr++);           // LSB
   17696:	80 91 ed 1c 	lds	r24, 0x1CED	; 0x801ced <gpib_iobuff+0x3>
   1769a:	8d 87       	std	Y+13, r24	; 0x0d
            tmp.head = 0xff & *ptr++;
   1769c:	80 91 ee 1c 	lds	r24, 0x1CEE	; 0x801cee <gpib_iobuff+0x4>
   176a0:	8e 87       	std	Y+14, r24	; 0x0e
            tmp.sector = 0xff & *ptr++;
   176a2:	80 91 ef 1c 	lds	r24, 0x1CEF	; 0x801cef <gpib_iobuff+0x5>
//update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
   176a6:	8f 87       	std	Y+15, r24	; 0x0f
   176a8:	ce 01       	movw	r24, r28
   176aa:	0a 96       	adiw	r24, 0x0a	; 10
   176ac:	8a d9       	rcall	.-3308   	; 0x169c2 <amigo_seek>
   176ae:	d8 c0       	rjmp	.+432    	; 0x17860 <Amigo_Command+0x4d4>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x03 && len == 2)
   176b0:	63 30       	cpi	r22, 0x03	; 3
   176b2:	e9 f4       	brne	.+58     	; 0x176ee <Amigo_Command+0x362>
   176b4:	02 30       	cpi	r16, 0x02	; 2
   176b6:	11 05       	cpc	r17, r1
   176b8:	09 f0       	breq	.+2      	; 0x176bc <Amigo_Command+0x330>
   176ba:	47 c1       	rjmp	.+654    	; 0x1794a <Amigo_Command+0x5be>
        {
///  Reference: A15
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   176bc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   176c0:	85 ff       	sbrs	r24, 5
   176c2:	0a c0       	rjmp	.+20     	; 0x176d8 <Amigo_Command+0x34c>
                printf("[AMIGO Request Status Buffered Command]\n");
   176c4:	80 eb       	ldi	r24, 0xB0	; 176
   176c6:	9b e2       	ldi	r25, 0x2B	; 43
   176c8:	a0 e0       	ldi	r26, 0x00	; 0
   176ca:	ed b7       	in	r30, 0x3d	; 61
   176cc:	fe b7       	in	r31, 0x3e	; 62
   176ce:	81 83       	std	Z+1, r24	; 0x01
   176d0:	92 83       	std	Z+2, r25	; 0x02
   176d2:	a3 83       	std	Z+3, r26	; 0x03
   176d4:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   176d8:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
            amigo_request_status();
   176dc:	43 de       	rcall	.-890    	; 0x17364 <amigo_check_unit>
   176de:	3d d8       	rcall	.-3974   	; 0x1675a <amigo_request_status>
            AMIGOs->state = AMIGO_REQUEST_STATUS_BUFFERED;
   176e0:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   176e4:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   176e8:	83 e0       	ldi	r24, 0x03	; 3
   176ea:	80 83       	st	Z, r24
   176ec:	29 c1       	rjmp	.+594    	; 0x17940 <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
        else if(op == 0x05 && len == 2)
   176ee:	65 30       	cpi	r22, 0x05	; 5
   176f0:	d9 f4       	brne	.+54     	; 0x17728 <Amigo_Command+0x39c>
   176f2:	02 30       	cpi	r16, 0x02	; 2
   176f4:	11 05       	cpc	r17, r1
   176f6:	09 f0       	breq	.+2      	; 0x176fa <Amigo_Command+0x36e>
   176f8:	28 c1       	rjmp	.+592    	; 0x1794a <Amigo_Command+0x5be>
        {
///  Reference: A35
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   176fa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   176fe:	85 ff       	sbrs	r24, 5
   17700:	0a c0       	rjmp	.+20     	; 0x17716 <Amigo_Command+0x38a>
                printf("[AMIGO Read Unbuffered Command]\n");
   17702:	8f e8       	ldi	r24, 0x8F	; 143
   17704:	9b e2       	ldi	r25, 0x2B	; 43
   17706:	a0 e0       	ldi	r26, 0x00	; 0
   17708:	ed b7       	in	r30, 0x3d	; 61
   1770a:	fe b7       	in	r31, 0x3e	; 62
   1770c:	81 83       	std	Z+1, r24	; 0x01
   1770e:	92 83       	std	Z+2, r25	; 0x02
   17710:	a3 83       	std	Z+3, r26	; 0x03
   17712:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17716:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
   1771a:	24 de       	rcall	.-952    	; 0x17364 <amigo_check_unit>
            AMIGOs->state = AMIGO_READ_UNBUFFERED;
   1771c:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   17720:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   17724:	86 e0       	ldi	r24, 0x06	; 6
   17726:	e7 c0       	rjmp	.+462    	; 0x178f6 <Amigo_Command+0x56a>
            return(status & ERROR_MASK);
#else
			return( amigo_buffered_read_command() );
#endif
        }
        else if(op == 0x07 && len == 4)
   17728:	67 30       	cpi	r22, 0x07	; 7
   1772a:	f9 f4       	brne	.+62     	; 0x1776a <Amigo_Command+0x3de>
   1772c:	04 30       	cpi	r16, 0x04	; 4
   1772e:	11 05       	cpc	r17, r1
   17730:	09 f0       	breq	.+2      	; 0x17734 <Amigo_Command+0x3a8>
   17732:	0b c1       	rjmp	.+534    	; 0x1794a <Amigo_Command+0x5be>
        {
            uint16_t sectors;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17734:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17738:	85 ff       	sbrs	r24, 5
   1773a:	0a c0       	rjmp	.+20     	; 0x17750 <Amigo_Command+0x3c4>
                printf("[AMIGO Verify]\n");
   1773c:	8f e7       	ldi	r24, 0x7F	; 127
   1773e:	9b e2       	ldi	r25, 0x2B	; 43
   17740:	a0 e0       	ldi	r26, 0x00	; 0
   17742:	ed b7       	in	r30, 0x3d	; 61
   17744:	fe b7       	in	r31, 0x3e	; 62
   17746:	81 83       	std	Z+1, r24	; 0x01
   17748:	92 83       	std	Z+2, r25	; 0x02
   1774a:	a3 83       	std	Z+3, r26	; 0x03
   1774c:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17750:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
   17754:	07 de       	rcall	.-1010   	; 0x17364 <amigo_check_unit>
            sectors = (0xff & *ptr++) << 8;
   17756:	80 91 ec 1c 	lds	r24, 0x1CEC	; 0x801cec <gpib_iobuff+0x2>
   1775a:	90 e0       	ldi	r25, 0x00	; 0
   1775c:	98 2f       	mov	r25, r24
            sectors |= (0xff & *ptr++);
            return ( amigo_verify( sectors) );
   1775e:	88 27       	eor	r24, r24
   17760:	20 91 ed 1c 	lds	r18, 0x1CED	; 0x801ced <gpib_iobuff+0x3>
   17764:	82 2b       	or	r24, r18
   17766:	58 d9       	rcall	.-3408   	; 0x16a18 <amigo_verify>
   17768:	f3 c0       	rjmp	.+486    	; 0x17950 <Amigo_Command+0x5c4>
        }
        else if(op == 0x08 && len == 2)
   1776a:	68 30       	cpi	r22, 0x08	; 8
   1776c:	d9 f4       	brne	.+54     	; 0x177a4 <Amigo_Command+0x418>
   1776e:	02 30       	cpi	r16, 0x02	; 2
   17770:	11 05       	cpc	r17, r1
   17772:	09 f0       	breq	.+2      	; 0x17776 <Amigo_Command+0x3ea>
   17774:	ea c0       	rjmp	.+468    	; 0x1794a <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17776:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1777a:	85 ff       	sbrs	r24, 5
   1777c:	0a c0       	rjmp	.+20     	; 0x17792 <Amigo_Command+0x406>
                printf("[AMIGO Write Unbuffered Command]\n");
   1777e:	8d e5       	ldi	r24, 0x5D	; 93
   17780:	9b e2       	ldi	r25, 0x2B	; 43
   17782:	a0 e0       	ldi	r26, 0x00	; 0
   17784:	ed b7       	in	r30, 0x3d	; 61
   17786:	fe b7       	in	r31, 0x3e	; 62
   17788:	81 83       	std	Z+1, r24	; 0x01
   1778a:	92 83       	std	Z+2, r25	; 0x02
   1778c:	a3 83       	std	Z+3, r26	; 0x03
   1778e:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17792:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
   17796:	e6 dd       	rcall	.-1076   	; 0x17364 <amigo_check_unit>
            AMIGOs->state = AMIGO_WRITE_UNBUFFERED;
   17798:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   1779c:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   177a0:	88 e0       	ldi	r24, 0x08	; 8
   177a2:	5d c0       	rjmp	.+186    	; 0x1785e <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if((op == 0x0B || op == 0x2b) && len == 2)
   177a4:	86 2f       	mov	r24, r22
   177a6:	8f 7d       	andi	r24, 0xDF	; 223
   177a8:	8b 30       	cpi	r24, 0x0B	; 11
   177aa:	d9 f4       	brne	.+54     	; 0x177e2 <Amigo_Command+0x456>
   177ac:	02 30       	cpi	r16, 0x02	; 2
   177ae:	11 05       	cpc	r17, r1
   177b0:	09 f0       	breq	.+2      	; 0x177b4 <Amigo_Command+0x428>
   177b2:	cb c0       	rjmp	.+406    	; 0x1794a <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   177b4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   177b8:	85 ff       	sbrs	r24, 5
   177ba:	0a c0       	rjmp	.+20     	; 0x177d0 <Amigo_Command+0x444>
                printf("[AMIGO Initialize Command]\n");
   177bc:	81 e4       	ldi	r24, 0x41	; 65
   177be:	9b e2       	ldi	r25, 0x2B	; 43
   177c0:	a0 e0       	ldi	r26, 0x00	; 0
   177c2:	ed b7       	in	r30, 0x3d	; 61
   177c4:	fe b7       	in	r31, 0x3e	; 62
   177c6:	81 83       	std	Z+1, r24	; 0x01
   177c8:	92 83       	std	Z+2, r25	; 0x02
   177ca:	a3 83       	std	Z+3, r26	; 0x03
   177cc:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   177d0:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
   177d4:	c7 dd       	rcall	.-1138   	; 0x17364 <amigo_check_unit>
            AMIGOs->state = AMIGO_INITIALIZE;
   177d6:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   177da:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   177de:	8a e0       	ldi	r24, 0x0A	; 10
   177e0:	3e c0       	rjmp	.+124    	; 0x1785e <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x14 && len == 2)
   177e2:	64 31       	cpi	r22, 0x14	; 20
   177e4:	09 f0       	breq	.+2      	; 0x177e8 <Amigo_Command+0x45c>
   177e6:	b1 c0       	rjmp	.+354    	; 0x1794a <Amigo_Command+0x5be>
   177e8:	02 30       	cpi	r16, 0x02	; 2
   177ea:	11 05       	cpc	r17, r1
   177ec:	09 f0       	breq	.+2      	; 0x177f0 <Amigo_Command+0x464>
   177ee:	ad c0       	rjmp	.+346    	; 0x1794a <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   177f0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   177f4:	85 ff       	sbrs	r24, 5
   177f6:	0a c0       	rjmp	.+20     	; 0x1780c <Amigo_Command+0x480>
                printf("[AMIGO Request Logical Address Command]\n");
   177f8:	88 e1       	ldi	r24, 0x18	; 24
   177fa:	9b e2       	ldi	r25, 0x2B	; 43
   177fc:	a0 e0       	ldi	r26, 0x00	; 0
   177fe:	ed b7       	in	r30, 0x3d	; 61
   17800:	fe b7       	in	r31, 0x3e	; 62
   17802:	81 83       	std	Z+1, r24	; 0x01
   17804:	92 83       	std	Z+2, r25	; 0x02
   17806:	a3 83       	std	Z+3, r26	; 0x03
   17808:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
#endif
            amigo_request_logical_address();
   1780c:	0e 94 9f b3 	call	0x1673e	; 0x1673e <amigo_request_logical_address>
            AMIGOs->state = AMIGO_REQUEST_LOGICAL_ADDRESS;
   17810:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   17814:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   17818:	84 e0       	ldi	r24, 0x04	; 4
   1781a:	21 c0       	rjmp	.+66     	; 0x1785e <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x69)
   1781c:	f9 e6       	ldi	r31, 0x69	; 105
   1781e:	ef 16       	cp	r14, r31
   17820:	f1 04       	cpc	r15, r1
   17822:	39 f5       	brne	.+78     	; 0x17872 <Amigo_Command+0x4e6>
    {
        if(op == 0x08 && len == 2)
   17824:	68 30       	cpi	r22, 0x08	; 8
   17826:	09 f0       	breq	.+2      	; 0x1782a <Amigo_Command+0x49e>
   17828:	90 c0       	rjmp	.+288    	; 0x1794a <Amigo_Command+0x5be>
   1782a:	02 30       	cpi	r16, 0x02	; 2
   1782c:	11 05       	cpc	r17, r1
   1782e:	09 f0       	breq	.+2      	; 0x17832 <Amigo_Command+0x4a6>
   17830:	8c c0       	rjmp	.+280    	; 0x1794a <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17832:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17836:	85 ff       	sbrs	r24, 5
   17838:	0a c0       	rjmp	.+20     	; 0x1784e <Amigo_Command+0x4c2>
                printf("[AMIGO Write Buffered Command]\n");
   1783a:	88 ef       	ldi	r24, 0xF8	; 248
   1783c:	9a e2       	ldi	r25, 0x2A	; 42
   1783e:	a0 e0       	ldi	r26, 0x00	; 0
   17840:	ed b7       	in	r30, 0x3d	; 61
   17842:	fe b7       	in	r31, 0x3e	; 62
   17844:	81 83       	std	Z+1, r24	; 0x01
   17846:	92 83       	std	Z+2, r25	; 0x02
   17848:	a3 83       	std	Z+3, r26	; 0x03
   1784a:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1784e:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
   17852:	88 dd       	rcall	.-1264   	; 0x17364 <amigo_check_unit>
            AMIGOs->state = AMIGO_WRITE_BUFFERED;
   17854:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   17858:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   1785c:	89 e0       	ldi	r24, 0x09	; 9
   1785e:	80 83       	st	Z, r24
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
   17860:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   17864:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   17868:	81 81       	ldd	r24, Z+1	; 0x01
   1786a:	90 e0       	ldi	r25, 0x00	; 0
   1786c:	0e 94 2c 86 	call	0x10c58	; 0x10c58 <gpib_enable_PPR>
   17870:	67 c0       	rjmp	.+206    	; 0x17940 <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x6A)
   17872:	fa e6       	ldi	r31, 0x6A	; 106
   17874:	ef 16       	cp	r14, r31
   17876:	f1 04       	cpc	r15, r1
   17878:	09 f0       	breq	.+2      	; 0x1787c <Amigo_Command+0x4f0>
   1787a:	40 c0       	rjmp	.+128    	; 0x178fc <Amigo_Command+0x570>
    {
        if(op == 0x08 && len == 2)
   1787c:	68 30       	cpi	r22, 0x08	; 8
   1787e:	f1 f4       	brne	.+60     	; 0x178bc <Amigo_Command+0x530>
   17880:	02 30       	cpi	r16, 0x02	; 2
   17882:	11 05       	cpc	r17, r1
   17884:	09 f0       	breq	.+2      	; 0x17888 <Amigo_Command+0x4fc>
   17886:	61 c0       	rjmp	.+194    	; 0x1794a <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17888:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1788c:	85 ff       	sbrs	r24, 5
   1788e:	0a c0       	rjmp	.+20     	; 0x178a4 <Amigo_Command+0x518>
                printf("[AMIGO Request Status Unbuffered Command]\n");
   17890:	8d ec       	ldi	r24, 0xCD	; 205
   17892:	9a e2       	ldi	r25, 0x2A	; 42
   17894:	a0 e0       	ldi	r26, 0x00	; 0
   17896:	ed b7       	in	r30, 0x3d	; 61
   17898:	fe b7       	in	r31, 0x3e	; 62
   1789a:	81 83       	std	Z+1, r24	; 0x01
   1789c:	92 83       	std	Z+2, r25	; 0x02
   1789e:	a3 83       	std	Z+3, r26	; 0x03
   178a0:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   178a4:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
   178a8:	5d dd       	rcall	.-1350   	; 0x17364 <amigo_check_unit>
            AMIGOs->state = AMIGO_REQUEST_STATUS_UNBUFFERED;
   178aa:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   178ae:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   178b2:	82 e0       	ldi	r24, 0x02	; 2
   178b4:	80 83       	st	Z, r24
            amigo_request_status();
   178b6:	0e 94 ad b3 	call	0x1675a	; 0x1675a <amigo_request_status>
   178ba:	42 c0       	rjmp	.+132    	; 0x17940 <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
        if(op == 0x05 && len == 2)
   178bc:	65 30       	cpi	r22, 0x05	; 5
   178be:	09 f0       	breq	.+2      	; 0x178c2 <Amigo_Command+0x536>
   178c0:	44 c0       	rjmp	.+136    	; 0x1794a <Amigo_Command+0x5be>
   178c2:	02 30       	cpi	r16, 0x02	; 2
   178c4:	11 05       	cpc	r17, r1
   178c6:	09 f0       	breq	.+2      	; 0x178ca <Amigo_Command+0x53e>
   178c8:	40 c0       	rjmp	.+128    	; 0x1794a <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   178ca:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   178ce:	85 ff       	sbrs	r24, 5
   178d0:	0a c0       	rjmp	.+20     	; 0x178e6 <Amigo_Command+0x55a>
                printf("[AMIGO Read Buffered Command]\n");
   178d2:	8e ea       	ldi	r24, 0xAE	; 174
   178d4:	9a e2       	ldi	r25, 0x2A	; 42
   178d6:	a0 e0       	ldi	r26, 0x00	; 0
   178d8:	ed b7       	in	r30, 0x3d	; 61
   178da:	fe b7       	in	r31, 0x3e	; 62
   178dc:	81 83       	std	Z+1, r24	; 0x01
   178de:	92 83       	std	Z+2, r25	; 0x02
   178e0:	a3 83       	std	Z+3, r26	; 0x03
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   178e2:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   178e6:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_READ_BUFFERED;
   178ea:	3c dd       	rcall	.-1416   	; 0x17364 <amigo_check_unit>
   178ec:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   178f0:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   178f4:	87 e0       	ldi	r24, 0x07	; 7

#if 0
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
#else
			return( amigo_buffered_read_command() );
   178f6:	80 83       	st	Z, r24
   178f8:	c5 d9       	rcall	.-3190   	; 0x16c84 <amigo_buffered_read_command>
   178fa:	2a c0       	rjmp	.+84     	; 0x17950 <Amigo_Command+0x5c4>
#endif
        }
    }
    else if (secondary == 0x6C)
   178fc:	fc e6       	ldi	r31, 0x6C	; 108
   178fe:	ef 16       	cp	r14, r31
   17900:	f1 04       	cpc	r15, r1
   17902:	d1 f4       	brne	.+52     	; 0x17938 <Amigo_Command+0x5ac>
    {
        if(op == 0x18 && len == 5)
   17904:	68 31       	cpi	r22, 0x18	; 24
   17906:	09 f5       	brne	.+66     	; 0x1794a <Amigo_Command+0x5be>
   17908:	05 30       	cpi	r16, 0x05	; 5
   1790a:	11 05       	cpc	r17, r1
   1790c:	f1 f4       	brne	.+60     	; 0x1794a <Amigo_Command+0x5be>
        {
///  Reference: A48 ..  A50

            uint8_t db;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1790e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17912:	85 ff       	sbrs	r24, 5
   17914:	0a c0       	rjmp	.+20     	; 0x1792a <Amigo_Command+0x59e>
                printf("[AMIGO Format]\n");
   17916:	8e e9       	ldi	r24, 0x9E	; 158
   17918:	9a e2       	ldi	r25, 0x2A	; 42
   1791a:	a0 e0       	ldi	r26, 0x00	; 0
   1791c:	ed b7       	in	r30, 0x3d	; 61
   1791e:	fe b7       	in	r31, 0x3e	; 62
   17920:	81 83       	std	Z+1, r24	; 0x01
   17922:	92 83       	std	Z+2, r25	; 0x02
   17924:	a3 83       	std	Z+3, r26	; 0x03
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17926:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   1792a:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
            ++ptr;                                // override not used
            ++ptr;                                // interleave not used
            db = 0xff & *ptr++;
            amigo_format(db);
   1792e:	1a dd       	rcall	.-1484   	; 0x17364 <amigo_check_unit>
   17930:	80 91 ee 1c 	lds	r24, 0x1CEE	; 0x801cee <gpib_iobuff+0x4>
   17934:	0f d9       	rcall	.-3554   	; 0x16b54 <amigo_format>
   17936:	04 c0       	rjmp	.+8      	; 0x17940 <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x70)                   // HP-300 Clear
   17938:	f0 e7       	ldi	r31, 0x70	; 112
   1793a:	ef 16       	cp	r14, r31
   1793c:	f1 04       	cpc	r15, r1
    {
///  Reference: A23
        ++ptr;                                    // Dummy byte
        return(status & ERROR_MASK);
   1793e:	29 f4       	brne	.+10     	; 0x1794a <Amigo_Command+0x5be>
   17940:	8b 8d       	ldd	r24, Y+27	; 0x1b
   17942:	9c 8d       	ldd	r25, Y+28	; 0x1c
   17944:	88 27       	eor	r24, r24
   17946:	90 7d       	andi	r25, 0xD0	; 208
    }
    return ( amigo_todo_op(secondary, op, len) );
   17948:	03 c0       	rjmp	.+6      	; 0x17950 <Amigo_Command+0x5c4>
   1794a:	a8 01       	movw	r20, r16
   1794c:	8e 2d       	mov	r24, r14
   1794e:	ed db       	rcall	.-2086   	; 0x1712a <amigo_todo_op>
}
   17950:	6c 96       	adiw	r28, 0x1c	; 28
   17952:	e6 e0       	ldi	r30, 0x06	; 6
   17954:	0c 94 e3 e6 	jmp	0x1cdc6	; 0x1cdc6 <__epilogue_restores__+0x18>

00017958 <Amigo_Execute>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)

int Amigo_Execute( int secondary )
{
   17958:	a9 e0       	ldi	r26, 0x09	; 9
   1795a:	b0 e0       	ldi	r27, 0x00	; 0
   1795c:	e2 eb       	ldi	r30, 0xB2	; 178
   1795e:	fc eb       	ldi	r31, 0xBC	; 188
   17960:	0c 94 cb e6 	jmp	0x1cd96	; 0x1cd96 <__prologue_saves__+0x20>
   17964:	ec 01       	movw	r28, r24
#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17966:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1796a:	85 ff       	sbrs	r24, 5
   1796c:	16 c0       	rjmp	.+44     	; 0x1799a <Amigo_Execute+0x42>
        printf("[AMIGO Execute(%02XH): listen:%02XH, talk:%02XH]\n",
   1796e:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   17972:	90 e0       	ldi	r25, 0x00	; 0
   17974:	ed b7       	in	r30, 0x3d	; 61
   17976:	fe b7       	in	r31, 0x3e	; 62
   17978:	91 87       	std	Z+9, r25	; 0x09
   1797a:	80 87       	std	Z+8, r24	; 0x08
   1797c:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17980:	90 e0       	ldi	r25, 0x00	; 0
   17982:	97 83       	std	Z+7, r25	; 0x07
   17984:	86 83       	std	Z+6, r24	; 0x06
   17986:	d5 83       	std	Z+5, r29	; 0x05
   17988:	c4 83       	std	Z+4, r28	; 0x04
   1798a:	8c e6       	ldi	r24, 0x6C	; 108
   1798c:	9a e2       	ldi	r25, 0x2A	; 42
   1798e:	a0 e0       	ldi	r26, 0x00	; 0
   17990:	81 83       	std	Z+1, r24	; 0x01
   17992:	92 83       	std	Z+2, r25	; 0x02
   17994:	a3 83       	std	Z+3, r26	; 0x03
   17996:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
            secondary, listening, talking);
#endif

    if(talking == UNT)
   1799a:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   1799e:	8f 35       	cpi	r24, 0x5F	; 95
   179a0:	09 f4       	brne	.+2      	; 0x179a4 <Amigo_Execute+0x4c>
   179a2:	ad c0       	rjmp	.+346    	; 0x17afe <Amigo_Execute+0x1a6>
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   179a4:	90 e0       	ldi	r25, 0x00	; 0
   179a6:	0e 94 a4 8c 	call	0x11948	; 0x11948 <AMIGO_is_MTA>
   179aa:	89 2b       	or	r24, r25
   179ac:	39 f0       	breq	.+14     	; 0x179bc <Amigo_Execute+0x64>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
   179ae:	ce 01       	movw	r24, r28
   179b0:	87 7f       	andi	r24, 0xF7	; 247
   179b2:	80 36       	cpi	r24, 0x60	; 96
   179b4:	91 05       	cpc	r25, r1
   179b6:	09 f0       	breq	.+2      	; 0x179ba <Amigo_Execute+0x62>
   179b8:	a2 c0       	rjmp	.+324    	; 0x17afe <Amigo_Execute+0x1a6>
   179ba:	08 c0       	rjmp	.+16     	; 0x179cc <Amigo_Execute+0x74>
#endif

    if(talking == UNT)
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   179bc:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   179c0:	90 e0       	ldi	r25, 0x00	; 0
   179c2:	0e 94 92 8c 	call	0x11924	; 0x11924 <AMIGO_is_MLA>
   179c6:	89 2b       	or	r24, r25
   179c8:	91 f7       	brne	.-28     	; 0x179ae <Amigo_Execute+0x56>
   179ca:	99 c0       	rjmp	.+306    	; 0x17afe <Amigo_Execute+0x1a6>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   179cc:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   179d0:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   179d4:	81 81       	ldd	r24, Z+1	; 0x01
   179d6:	90 e0       	ldi	r25, 0x00	; 0
   179d8:	0e 94 62 86 	call	0x10cc4	; 0x10cc4 <gpib_disable_PPR>

    if(secondary == 0x60)
   179dc:	c0 36       	cpi	r28, 0x60	; 96
   179de:	d1 05       	cpc	r29, r1
   179e0:	09 f0       	breq	.+2      	; 0x179e4 <Amigo_Execute+0x8c>
   179e2:	4e c0       	rjmp	.+156    	; 0x17a80 <Amigo_Execute+0x128>
    {
        switch(AMIGOs->state)
   179e4:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   179e8:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   179ec:	e0 81       	ld	r30, Z
   179ee:	8e 2f       	mov	r24, r30
   179f0:	90 e0       	ldi	r25, 0x00	; 0
   179f2:	8b 30       	cpi	r24, 0x0B	; 11
   179f4:	91 05       	cpc	r25, r1
   179f6:	08 f0       	brcs	.+2      	; 0x179fa <Amigo_Execute+0xa2>
   179f8:	41 c0       	rjmp	.+130    	; 0x17a7c <Amigo_Execute+0x124>
   179fa:	fc 01       	movw	r30, r24
   179fc:	ea 52       	subi	r30, 0x2A	; 42
   179fe:	ff 4f       	sbci	r31, 0xFF	; 255
   17a00:	0c 94 8c e6 	jmp	0x1cd18	; 0x1cd18 <__tablejump2__>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_COLD_LOAD_READ:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17a04:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17a08:	85 ff       	sbrs	r24, 5
   17a0a:	18 c0       	rjmp	.+48     	; 0x17a3c <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Cold Load Read]\n");
   17a0c:	8c e4       	ldi	r24, 0x4C	; 76
   17a0e:	9a e2       	ldi	r25, 0x2A	; 42
   17a10:	0d c0       	rjmp	.+26     	; 0x17a2c <Amigo_Execute+0xd4>
#endif
                return ( amigo_buffered_read_execute() );
            case AMIGO_READ_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17a12:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17a16:	85 ff       	sbrs	r24, 5
   17a18:	11 c0       	rjmp	.+34     	; 0x17a3c <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Read Unbuffered]\n");
   17a1a:	8b e2       	ldi	r24, 0x2B	; 43
   17a1c:	9a e2       	ldi	r25, 0x2A	; 42
   17a1e:	06 c0       	rjmp	.+12     	; 0x17a2c <Amigo_Execute+0xd4>
#endif
                return ( amigo_buffered_read_execute() );
            case AMIGO_READ_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17a20:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17a24:	85 ff       	sbrs	r24, 5
   17a26:	0a c0       	rjmp	.+20     	; 0x17a3c <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Read Buffered]\n");
   17a28:	8c e0       	ldi	r24, 0x0C	; 12
   17a2a:	9a e2       	ldi	r25, 0x2A	; 42
   17a2c:	a0 e0       	ldi	r26, 0x00	; 0
   17a2e:	ed b7       	in	r30, 0x3d	; 61
   17a30:	fe b7       	in	r31, 0x3e	; 62
   17a32:	81 83       	std	Z+1, r24	; 0x01
   17a34:	92 83       	std	Z+2, r25	; 0x02
   17a36:	a3 83       	std	Z+3, r26	; 0x03
   17a38:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
#endif
                return ( amigo_buffered_read_execute() );
   17a3c:	b0 d9       	rcall	.-3232   	; 0x16d9e <amigo_buffered_read_execute>
   17a3e:	61 c0       	rjmp	.+194    	; 0x17b02 <Amigo_Execute+0x1aa>
            case AMIGO_WRITE_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17a40:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17a44:	85 ff       	sbrs	r24, 5
   17a46:	18 c0       	rjmp	.+48     	; 0x17a78 <Amigo_Execute+0x120>
                    printf("[AMIGO Execute Write Unbuffered]\n");
   17a48:	8a ee       	ldi	r24, 0xEA	; 234
   17a4a:	99 e2       	ldi	r25, 0x29	; 41
   17a4c:	0d c0       	rjmp	.+26     	; 0x17a68 <Amigo_Execute+0x110>
#endif
                return ( amigo_buffered_write() );
            case AMIGO_INITIALIZE:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17a4e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17a52:	85 ff       	sbrs	r24, 5
   17a54:	11 c0       	rjmp	.+34     	; 0x17a78 <Amigo_Execute+0x120>
                    printf("[AMIGO Execute Initialize]\n");
   17a56:	8e ec       	ldi	r24, 0xCE	; 206
   17a58:	99 e2       	ldi	r25, 0x29	; 41
   17a5a:	06 c0       	rjmp	.+12     	; 0x17a68 <Amigo_Execute+0x110>
#endif
                return ( amigo_buffered_write() );
            case AMIGO_WRITE_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17a5c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17a60:	85 ff       	sbrs	r24, 5
   17a62:	0a c0       	rjmp	.+20     	; 0x17a78 <Amigo_Execute+0x120>
                    printf("[AMIGO Execute Write Buffered]\n");
   17a64:	8e ea       	ldi	r24, 0xAE	; 174
   17a66:	99 e2       	ldi	r25, 0x29	; 41
   17a68:	a0 e0       	ldi	r26, 0x00	; 0
   17a6a:	ed b7       	in	r30, 0x3d	; 61
   17a6c:	fe b7       	in	r31, 0x3e	; 62
   17a6e:	81 83       	std	Z+1, r24	; 0x01
   17a70:	92 83       	std	Z+2, r25	; 0x02
   17a72:	a3 83       	std	Z+3, r26	; 0x03
   17a74:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
#endif
                return ( amigo_buffered_write() );
   17a78:	ed d9       	rcall	.-3110   	; 0x16e54 <amigo_buffered_write>
   17a7a:	43 c0       	rjmp	.+134    	; 0x17b02 <Amigo_Execute+0x1aa>
            default:
                return ( amigo_todo(secondary) );
   17a7c:	80 e6       	ldi	r24, 0x60	; 96
   17a7e:	3d c0       	rjmp	.+122    	; 0x17afa <Amigo_Execute+0x1a2>
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    if(secondary == 0x68)
   17a80:	c8 36       	cpi	r28, 0x68	; 104
   17a82:	d1 05       	cpc	r29, r1
   17a84:	e1 f5       	brne	.+120    	; 0x17afe <Amigo_Execute+0x1a6>
    {
        switch(AMIGOs->state)
   17a86:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   17a8a:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   17a8e:	80 81       	ld	r24, Z
   17a90:	82 30       	cpi	r24, 0x02	; 2
   17a92:	81 f0       	breq	.+32     	; 0x17ab4 <Amigo_Execute+0x15c>
   17a94:	18 f4       	brcc	.+6      	; 0x17a9c <Amigo_Execute+0x144>
   17a96:	88 23       	and	r24, r24
   17a98:	91 f1       	breq	.+100    	; 0x17afe <Amigo_Execute+0x1a6>
   17a9a:	2e c0       	rjmp	.+92     	; 0x17af8 <Amigo_Execute+0x1a0>
   17a9c:	83 30       	cpi	r24, 0x03	; 3
   17a9e:	19 f0       	breq	.+6      	; 0x17aa6 <Amigo_Execute+0x14e>
   17aa0:	84 30       	cpi	r24, 0x04	; 4
   17aa2:	c9 f0       	breq	.+50     	; 0x17ad6 <Amigo_Execute+0x17e>
   17aa4:	29 c0       	rjmp	.+82     	; 0x17af8 <Amigo_Execute+0x1a0>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_REQUEST_STATUS_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17aa6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17aaa:	85 ff       	sbrs	r24, 5
   17aac:	11 c0       	rjmp	.+34     	; 0x17ad0 <Amigo_Execute+0x178>
                    printf("[AMIGO Execute Request Status Buffered]\n");
   17aae:	85 e8       	ldi	r24, 0x85	; 133
   17ab0:	99 e2       	ldi	r25, 0x29	; 41
   17ab2:	06 c0       	rjmp	.+12     	; 0x17ac0 <Amigo_Execute+0x168>
#endif
                return ( amigo_send_status() );
            case AMIGO_REQUEST_STATUS_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17ab4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17ab8:	85 ff       	sbrs	r24, 5
   17aba:	0a c0       	rjmp	.+20     	; 0x17ad0 <Amigo_Execute+0x178>
                    printf("[AMIGO Exicute Request Status Unbuffered]\n");
   17abc:	8a e5       	ldi	r24, 0x5A	; 90
   17abe:	99 e2       	ldi	r25, 0x29	; 41
   17ac0:	a0 e0       	ldi	r26, 0x00	; 0
   17ac2:	ed b7       	in	r30, 0x3d	; 61
   17ac4:	fe b7       	in	r31, 0x3e	; 62
   17ac6:	81 83       	std	Z+1, r24	; 0x01
   17ac8:	92 83       	std	Z+2, r25	; 0x02
   17aca:	a3 83       	std	Z+3, r26	; 0x03
   17acc:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
#endif
                return ( amigo_send_status() );
   17ad0:	0e 94 5f b4 	call	0x168be	; 0x168be <amigo_send_status>
   17ad4:	16 c0       	rjmp	.+44     	; 0x17b02 <Amigo_Execute+0x1aa>
            case AMIGO_REQUEST_LOGICAL_ADDRESS:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17ad6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17ada:	85 ff       	sbrs	r24, 5
   17adc:	0a c0       	rjmp	.+20     	; 0x17af2 <Amigo_Execute+0x19a>
                    printf("[AMIGO Execute Request Logical Address]\n");
   17ade:	81 e3       	ldi	r24, 0x31	; 49
   17ae0:	99 e2       	ldi	r25, 0x29	; 41
   17ae2:	a0 e0       	ldi	r26, 0x00	; 0
   17ae4:	ed b7       	in	r30, 0x3d	; 61
   17ae6:	fe b7       	in	r31, 0x3e	; 62
   17ae8:	81 83       	std	Z+1, r24	; 0x01
   17aea:	92 83       	std	Z+2, r25	; 0x02
   17aec:	a3 83       	std	Z+3, r26	; 0x03
   17aee:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
#endif
                return ( amigo_send_logical_address() );
   17af2:	0e 94 0a b4 	call	0x16814	; 0x16814 <amigo_send_logical_address>
   17af6:	05 c0       	rjmp	.+10     	; 0x17b02 <Amigo_Execute+0x1aa>
            default:
                return ( amigo_todo(secondary) );
   17af8:	88 e6       	ldi	r24, 0x68	; 104
   17afa:	b0 db       	rcall	.-2208   	; 0x1725c <amigo_todo>
   17afc:	02 c0       	rjmp	.+4      	; 0x17b02 <Amigo_Execute+0x1aa>
    if(secondary == 0x68)
    {
        switch(AMIGOs->state)
        {
            case AMIGO_IDLE:
                return(0);
   17afe:	80 e0       	ldi	r24, 0x00	; 0
   17b00:	90 e0       	ldi	r25, 0x00	; 0
                return ( amigo_todo(secondary) );
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    return(0);
}
   17b02:	cd b7       	in	r28, 0x3d	; 61
   17b04:	de b7       	in	r29, 0x3e	; 62
   17b06:	29 96       	adiw	r28, 0x09	; 9
   17b08:	e2 e0       	ldi	r30, 0x02	; 2
   17b0a:	0c 94 e7 e6 	jmp	0x1cdce	; 0x1cdce <__epilogue_restores__+0x20>

00017b0e <AMIGO_COMMANDS>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{
   17b0e:	cf 93       	push	r28
   17b10:	df 93       	push	r29
   17b12:	c8 2f       	mov	r28, r24

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   17b14:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   17b18:	90 e0       	ldi	r25, 0x00	; 0
   17b1a:	0e 94 a4 8c 	call	0x11948	; 0x11948 <AMIGO_is_MTA>
   17b1e:	89 2b       	or	r24, r25
   17b20:	51 f0       	breq	.+20     	; 0x17b36 <AMIGO_COMMANDS+0x28>
    {

        if(talking == UNT && AMIGO_is_MLA(listening))
   17b22:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   17b26:	8f 35       	cpi	r24, 0x5F	; 95
   17b28:	71 f4       	brne	.+28     	; 0x17b46 <AMIGO_COMMANDS+0x38>
   17b2a:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17b2e:	90 e0       	ldi	r25, 0x00	; 0
   17b30:	0e 94 92 8c 	call	0x11924	; 0x11924 <AMIGO_is_MLA>
   17b34:	08 c0       	rjmp	.+16     	; 0x17b46 <AMIGO_COMMANDS+0x38>
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   17b36:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17b3a:	90 e0       	ldi	r25, 0x00	; 0
   17b3c:	0e 94 92 8c 	call	0x11924	; 0x11924 <AMIGO_is_MLA>
   17b40:	89 2b       	or	r24, r25
   17b42:	79 f7       	brne	.-34     	; 0x17b22 <AMIGO_COMMANDS+0x14>
   17b44:	76 c0       	rjmp	.+236    	; 0x17c32 <AMIGO_COMMANDS+0x124>

        if(talking == UNT && AMIGO_is_MLA(listening))
        {
// printf("AMIGO COMMANDS %02XH NO TALK ADDRESS!\n", ch);
        }
        if(listening == 0 && AMIGO_is_MTA(talking))
   17b46:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17b4a:	81 11       	cpse	r24, r1
   17b4c:	05 c0       	rjmp	.+10     	; 0x17b58 <AMIGO_COMMANDS+0x4a>
   17b4e:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   17b52:	90 e0       	ldi	r25, 0x00	; 0
   17b54:	0e 94 a4 8c 	call	0x11948	; 0x11948 <AMIGO_is_MTA>
        {
// printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   17b58:	c0 36       	cpi	r28, 0x60	; 96
   17b5a:	99 f4       	brne	.+38     	; 0x17b82 <AMIGO_COMMANDS+0x74>
   17b5c:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   17b60:	90 e0       	ldi	r25, 0x00	; 0
   17b62:	0e 94 a4 8c 	call	0x11948	; 0x11948 <AMIGO_is_MTA>
   17b66:	89 2b       	or	r24, r25
   17b68:	19 f0       	breq	.+6      	; 0x17b70 <AMIGO_COMMANDS+0x62>
        {
            return (Amigo_Execute(ch) );
   17b6a:	80 e6       	ldi	r24, 0x60	; 96
   17b6c:	90 e0       	ldi	r25, 0x00	; 0
   17b6e:	14 c0       	rjmp	.+40     	; 0x17b98 <AMIGO_COMMANDS+0x8a>
        if(listening == 0 && AMIGO_is_MTA(talking))
        {
// printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   17b70:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17b74:	90 e0       	ldi	r25, 0x00	; 0
   17b76:	0e 94 92 8c 	call	0x11924	; 0x11924 <AMIGO_is_MLA>
   17b7a:	89 2b       	or	r24, r25
   17b7c:	09 f4       	brne	.+2      	; 0x17b80 <AMIGO_COMMANDS+0x72>
   17b7e:	59 c0       	rjmp	.+178    	; 0x17c32 <AMIGO_COMMANDS+0x124>
   17b80:	f4 cf       	rjmp	.-24     	; 0x17b6a <AMIGO_COMMANDS+0x5c>
        {
            return (Amigo_Execute(ch) );
        }

        if(ch == 0x68 && AMIGO_is_MTA(talking) )
   17b82:	c8 36       	cpi	r28, 0x68	; 104
   17b84:	c1 f4       	brne	.+48     	; 0x17bb6 <AMIGO_COMMANDS+0xa8>
   17b86:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   17b8a:	90 e0       	ldi	r25, 0x00	; 0
   17b8c:	0e 94 a4 8c 	call	0x11948	; 0x11948 <AMIGO_is_MTA>
   17b90:	89 2b       	or	r24, r25
   17b92:	21 f0       	breq	.+8      	; 0x17b9c <AMIGO_COMMANDS+0x8e>
        {
            return (Amigo_Execute(ch) );
   17b94:	88 e6       	ldi	r24, 0x68	; 104
   17b96:	90 e0       	ldi	r25, 0x00	; 0
   17b98:	df de       	rcall	.-578    	; 0x17958 <Amigo_Execute>
   17b9a:	0b c0       	rjmp	.+22     	; 0x17bb2 <AMIGO_COMMANDS+0xa4>
        }

        if(ch == 0x68 && AMIGO_is_MLA(listening) )// Single byte command
   17b9c:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17ba0:	90 e0       	ldi	r25, 0x00	; 0
   17ba2:	0e 94 92 8c 	call	0x11924	; 0x11924 <AMIGO_is_MLA>
   17ba6:	89 2b       	or	r24, r25
   17ba8:	09 f4       	brne	.+2      	; 0x17bac <AMIGO_COMMANDS+0x9e>
   17baa:	43 c0       	rjmp	.+134    	; 0x17c32 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17bac:	88 e6       	ldi	r24, 0x68	; 104
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) )// Single byte command
        {
            return (Amigo_Command(ch) );
   17bae:	90 e0       	ldi	r25, 0x00	; 0
   17bb0:	ed db       	rcall	.-2086   	; 0x1738c <Amigo_Command>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
            return( amigo_cmd_dsj() );
   17bb2:	ec 01       	movw	r28, r24
   17bb4:	40 c0       	rjmp	.+128    	; 0x17c36 <AMIGO_COMMANDS+0x128>

        if(ch == 0x68 && AMIGO_is_MLA(listening) )// Single byte command
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x69 && AMIGO_is_MLA(listening) )// Single byte command
   17bb6:	c9 36       	cpi	r28, 0x69	; 105
   17bb8:	51 f4       	brne	.+20     	; 0x17bce <AMIGO_COMMANDS+0xc0>
   17bba:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17bbe:	90 e0       	ldi	r25, 0x00	; 0
   17bc0:	0e 94 92 8c 	call	0x11924	; 0x11924 <AMIGO_is_MLA>
   17bc4:	89 2b       	or	r24, r25
   17bc6:	a9 f1       	breq	.+106    	; 0x17c32 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17bc8:	89 e6       	ldi	r24, 0x69	; 105
   17bca:	90 e0       	ldi	r25, 0x00	; 0
   17bcc:	f1 cf       	rjmp	.-30     	; 0x17bb0 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6a && AMIGO_is_MLA(listening) )// Single byte command
   17bce:	ca 36       	cpi	r28, 0x6A	; 106
   17bd0:	51 f4       	brne	.+20     	; 0x17be6 <AMIGO_COMMANDS+0xd8>
   17bd2:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17bd6:	90 e0       	ldi	r25, 0x00	; 0
   17bd8:	0e 94 92 8c 	call	0x11924	; 0x11924 <AMIGO_is_MLA>
   17bdc:	89 2b       	or	r24, r25
   17bde:	49 f1       	breq	.+82     	; 0x17c32 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17be0:	8a e6       	ldi	r24, 0x6A	; 106
   17be2:	90 e0       	ldi	r25, 0x00	; 0
   17be4:	e5 cf       	rjmp	.-54     	; 0x17bb0 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) )// Single byte command
   17be6:	cc 36       	cpi	r28, 0x6C	; 108
   17be8:	51 f4       	brne	.+20     	; 0x17bfe <AMIGO_COMMANDS+0xf0>
   17bea:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17bee:	90 e0       	ldi	r25, 0x00	; 0
   17bf0:	0e 94 92 8c 	call	0x11924	; 0x11924 <AMIGO_is_MLA>
   17bf4:	89 2b       	or	r24, r25
   17bf6:	e9 f0       	breq	.+58     	; 0x17c32 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17bf8:	8c e6       	ldi	r24, 0x6C	; 108
   17bfa:	90 e0       	ldi	r25, 0x00	; 0
   17bfc:	d9 cf       	rjmp	.-78     	; 0x17bb0 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
   17bfe:	c0 37       	cpi	r28, 0x70	; 112
   17c00:	c1 f4       	brne	.+48     	; 0x17c32 <AMIGO_COMMANDS+0x124>
   17c02:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   17c06:	90 e0       	ldi	r25, 0x00	; 0
   17c08:	0e 94 a4 8c 	call	0x11948	; 0x11948 <AMIGO_is_MTA>
   17c0c:	ec 01       	movw	r28, r24
   17c0e:	89 2b       	or	r24, r25
   17c10:	51 f0       	breq	.+20     	; 0x17c26 <AMIGO_COMMANDS+0x118>
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17c12:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   17c16:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   17c1a:	81 81       	ldd	r24, Z+1	; 0x01
   17c1c:	90 e0       	ldi	r25, 0x00	; 0
   17c1e:	0e 94 62 86 	call	0x10cc4	; 0x10cc4 <gpib_disable_PPR>
            return( amigo_cmd_dsj() );
   17c22:	ff d9       	rcall	.-3074   	; 0x17022 <amigo_cmd_dsj>
   17c24:	c6 cf       	rjmp	.-116    	; 0x17bb2 <AMIGO_COMMANDS+0xa4>
        }
        if(ch == 0x7e && ch == 0x7f)
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x70 && AMIGO_is_MLA(listening))
   17c26:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17c2a:	90 e0       	ldi	r25, 0x00	; 0
   17c2c:	0e 94 92 8c 	call	0x11924	; 0x11924 <AMIGO_is_MLA>
   17c30:	02 c0       	rjmp	.+4      	; 0x17c36 <AMIGO_COMMANDS+0x128>
        {
// NOP
        }
    }
    return(0);
   17c32:	c0 e0       	ldi	r28, 0x00	; 0
   17c34:	d0 e0       	ldi	r29, 0x00	; 0
}
   17c36:	ce 01       	movw	r24, r28
   17c38:	df 91       	pop	r29
   17c3a:	cf 91       	pop	r28
   17c3c:	08 95       	ret

00017c3e <printer_init>:
/// - Only called once after power on by main().
/// @return  void

void printer_init()
{
    plot.error = 0;
   17c3e:	ed e9       	ldi	r30, 0x9D	; 157
   17c40:	f9 e1       	ldi	r31, 0x19	; 25
   17c42:	10 86       	std	Z+8, r1	; 0x08
    plot.count = 0;
   17c44:	10 82       	st	Z, r1
   17c46:	11 82       	std	Z+1, r1	; 0x01
   17c48:	12 82       	std	Z+2, r1	; 0x02
   17c4a:	13 82       	std	Z+3, r1	; 0x03
    plot.ind = 0;
   17c4c:	15 82       	std	Z+5, r1	; 0x05
   17c4e:	14 82       	std	Z+4, r1	; 0x04
    plot.fp = NULL;
   17c50:	12 86       	std	Z+10, r1	; 0x0a
   17c52:	11 86       	std	Z+9, r1	; 0x09
    plot.buf = NULL;
   17c54:	14 86       	std	Z+12, r1	; 0x0c
   17c56:	13 86       	std	Z+11, r1	; 0x0b
   17c58:	08 95       	ret

00017c5a <receive_plot_flush>:
/// @see posix.h
/// @see printer_buffer()
/// @return  file handle

int receive_plot_flush()
{
   17c5a:	cf 93       	push	r28
   17c5c:	df 93       	push	r29
   17c5e:	ad b7       	in	r26, 0x3d	; 61
   17c60:	be b7       	in	r27, 0x3e	; 62
   17c62:	17 97       	sbiw	r26, 0x07	; 7
   17c64:	0f b6       	in	r0, 0x3f	; 63
   17c66:	f8 94       	cli
   17c68:	be bf       	out	0x3e, r27	; 62
   17c6a:	0f be       	out	0x3f, r0	; 63
   17c6c:	ad bf       	out	0x3d, r26	; 61
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
   17c6e:	20 91 a6 19 	lds	r18, 0x19A6	; 0x8019a6 <plot+0x9>
   17c72:	30 91 a7 19 	lds	r19, 0x19A7	; 0x8019a7 <plot+0xa>
   17c76:	21 15       	cp	r18, r1
   17c78:	31 05       	cpc	r19, r1
   17c7a:	09 f4       	brne	.+2      	; 0x17c7e <receive_plot_flush+0x24>
   17c7c:	45 c0       	rjmp	.+138    	; 0x17d08 <receive_plot_flush+0xae>
   17c7e:	80 91 a1 19 	lds	r24, 0x19A1	; 0x8019a1 <plot+0x4>
   17c82:	90 91 a2 19 	lds	r25, 0x19A2	; 0x8019a2 <plot+0x5>
   17c86:	00 97       	sbiw	r24, 0x00	; 0
   17c88:	09 f4       	brne	.+2      	; 0x17c8c <receive_plot_flush+0x32>
   17c8a:	40 c0       	rjmp	.+128    	; 0x17d0c <receive_plot_flush+0xb2>
        return(0);

    ret  = fwrite(plot.buf, 1, plot.ind , plot.fp);
   17c8c:	ac 01       	movw	r20, r24
   17c8e:	61 e0       	ldi	r22, 0x01	; 1
   17c90:	70 e0       	ldi	r23, 0x00	; 0
   17c92:	80 91 a8 19 	lds	r24, 0x19A8	; 0x8019a8 <plot+0xb>
   17c96:	90 91 a9 19 	lds	r25, 0x19A9	; 0x8019a9 <plot+0xc>
   17c9a:	0e 94 52 7c 	call	0xf8a4	; 0xf8a4 <fwrite>
   17c9e:	ec 01       	movw	r28, r24
    if(ret != plot.ind)
   17ca0:	80 91 a1 19 	lds	r24, 0x19A1	; 0x8019a1 <plot+0x4>
   17ca4:	90 91 a2 19 	lds	r25, 0x19A2	; 0x8019a2 <plot+0x5>
   17ca8:	c8 17       	cp	r28, r24
   17caa:	d9 07       	cpc	r29, r25
   17cac:	09 f1       	breq	.+66     	; 0x17cf0 <receive_plot_flush+0x96>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   17cae:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17cb2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17cb6:	81 72       	andi	r24, 0x21	; 33
   17cb8:	99 27       	eor	r25, r25
   17cba:	89 2b       	or	r24, r25
   17cbc:	b1 f0       	breq	.+44     	; 0x17cea <receive_plot_flush+0x90>
        {
            perror("receive_plot_flush");
   17cbe:	85 ed       	ldi	r24, 0xD5	; 213
   17cc0:	95 e1       	ldi	r25, 0x15	; 21
   17cc2:	0e 94 5b 78 	call	0xf0b6	; 0xf0b6 <perror>
            printf("write failed: wanted %d, got:%d\n", plot.ind, ret);
   17cc6:	ed b7       	in	r30, 0x3d	; 61
   17cc8:	fe b7       	in	r31, 0x3e	; 62
   17cca:	d7 83       	std	Z+7, r29	; 0x07
   17ccc:	c6 83       	std	Z+6, r28	; 0x06
   17cce:	80 91 a1 19 	lds	r24, 0x19A1	; 0x8019a1 <plot+0x4>
   17cd2:	90 91 a2 19 	lds	r25, 0x19A2	; 0x8019a2 <plot+0x5>
   17cd6:	95 83       	std	Z+5, r25	; 0x05
   17cd8:	84 83       	std	Z+4, r24	; 0x04
   17cda:	81 ec       	ldi	r24, 0xC1	; 193
   17cdc:	91 e3       	ldi	r25, 0x31	; 49
   17cde:	a0 e0       	ldi	r26, 0x00	; 0
   17ce0:	81 83       	std	Z+1, r24	; 0x01
   17ce2:	92 83       	std	Z+2, r25	; 0x02
   17ce4:	a3 83       	std	Z+3, r26	; 0x03
   17ce6:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
        }
        return(-1);
   17cea:	8f ef       	ldi	r24, 0xFF	; 255
   17cec:	9f ef       	ldi	r25, 0xFF	; 255
   17cee:	0e c0       	rjmp	.+28     	; 0x17d0c <receive_plot_flush+0xb2>
    }

    fno = fileno( plot.fp );
   17cf0:	80 91 a6 19 	lds	r24, 0x19A6	; 0x8019a6 <plot+0x9>
   17cf4:	90 91 a7 19 	lds	r25, 0x19A7	; 0x8019a7 <plot+0xa>
   17cf8:	0e 94 a5 76 	call	0xed4a	; 0xed4a <fileno>
    if(fno < 0)
   17cfc:	97 fd       	sbrc	r25, 7
   17cfe:	f5 cf       	rjmp	.-22     	; 0x17cea <receive_plot_flush+0x90>
        return(-1);
///@brief sync filesystem after every write
    syncfs( fno );
   17d00:	0e 94 9c 7b 	call	0xf738	; 0xf738 <syncfs>
    return (ret);
   17d04:	ce 01       	movw	r24, r28
   17d06:	02 c0       	rjmp	.+4      	; 0x17d0c <receive_plot_flush+0xb2>
{
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
        return(0);
   17d08:	80 e0       	ldi	r24, 0x00	; 0
   17d0a:	90 e0       	ldi	r25, 0x00	; 0
    if(fno < 0)
        return(-1);
///@brief sync filesystem after every write
    syncfs( fno );
    return (ret);
}
   17d0c:	cd b7       	in	r28, 0x3d	; 61
   17d0e:	de b7       	in	r29, 0x3e	; 62
   17d10:	27 96       	adiw	r28, 0x07	; 7
   17d12:	e2 e0       	ldi	r30, 0x02	; 2
   17d14:	0c 94 e7 e6 	jmp	0x1cdce	; 0x1cdce <__epilogue_restores__+0x20>

00017d18 <printer_close>:
/// @see posix.h
/// @return  void
/// FYI: for the HP54645D plots end with: pd;pu;pu;sp0;
/// This gets called
void printer_close()
{
   17d18:	ad b7       	in	r26, 0x3d	; 61
   17d1a:	be b7       	in	r27, 0x3e	; 62
   17d1c:	17 97       	sbiw	r26, 0x07	; 7
   17d1e:	0f b6       	in	r0, 0x3f	; 63
   17d20:	f8 94       	cli
   17d22:	be bf       	out	0x3e, r27	; 62
   17d24:	0f be       	out	0x3f, r0	; 63
   17d26:	ad bf       	out	0x3d, r26	; 61
    if( receive_plot_flush() < 0 )
   17d28:	98 df       	rcall	.-208    	; 0x17c5a <receive_plot_flush>
   17d2a:	97 ff       	sbrs	r25, 7
   17d2c:	03 c0       	rjmp	.+6      	; 0x17d34 <printer_close+0x1c>
        plot.error = 1;
   17d2e:	81 e0       	ldi	r24, 0x01	; 1
   17d30:	80 93 a5 19 	sts	0x19A5, r24	; 0x8019a5 <plot+0x8>

    if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   17d34:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17d38:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17d3c:	81 72       	andi	r24, 0x21	; 33
   17d3e:	99 27       	eor	r25, r25
   17d40:	89 2b       	or	r24, r25
   17d42:	71 f0       	breq	.+28     	; 0x17d60 <printer_close+0x48>
    {
        if(plot.error)
   17d44:	80 91 a5 19 	lds	r24, 0x19A5	; 0x8019a5 <plot+0x8>
   17d48:	88 23       	and	r24, r24
   17d4a:	51 f0       	breq	.+20     	; 0x17d60 <printer_close+0x48>
            printf("ERROR durring write\n");
   17d4c:	80 ef       	ldi	r24, 0xF0	; 240
   17d4e:	91 e3       	ldi	r25, 0x31	; 49
   17d50:	a0 e0       	ldi	r26, 0x00	; 0
   17d52:	ed b7       	in	r30, 0x3d	; 61
   17d54:	fe b7       	in	r31, 0x3e	; 62
   17d56:	81 83       	std	Z+1, r24	; 0x01
   17d58:	92 83       	std	Z+2, r25	; 0x02
   17d5a:	a3 83       	std	Z+3, r26	; 0x03
   17d5c:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    }

    if(plot.fp)
   17d60:	80 91 a6 19 	lds	r24, 0x19A6	; 0x8019a6 <plot+0x9>
   17d64:	90 91 a7 19 	lds	r25, 0x19A7	; 0x8019a7 <plot+0xa>
   17d68:	00 97       	sbiw	r24, 0x00	; 0
   17d6a:	e1 f0       	breq	.+56     	; 0x17da4 <printer_close+0x8c>
    {
        fclose(plot.fp);
   17d6c:	0e 94 d4 7c 	call	0xf9a8	; 0xf9a8 <fclose>
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17d70:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17d74:	85 ff       	sbrs	r24, 5
   17d76:	16 c0       	rjmp	.+44     	; 0x17da4 <printer_close+0x8c>
            printf("\nDONE: %08ld\n",plot.count);
   17d78:	80 91 9d 19 	lds	r24, 0x199D	; 0x80199d <plot>
   17d7c:	90 91 9e 19 	lds	r25, 0x199E	; 0x80199e <plot+0x1>
   17d80:	a0 91 9f 19 	lds	r26, 0x199F	; 0x80199f <plot+0x2>
   17d84:	b0 91 a0 19 	lds	r27, 0x19A0	; 0x8019a0 <plot+0x3>
   17d88:	ed b7       	in	r30, 0x3d	; 61
   17d8a:	fe b7       	in	r31, 0x3e	; 62
   17d8c:	84 83       	std	Z+4, r24	; 0x04
   17d8e:	95 83       	std	Z+5, r25	; 0x05
   17d90:	a6 83       	std	Z+6, r26	; 0x06
   17d92:	b7 83       	std	Z+7, r27	; 0x07
   17d94:	82 ee       	ldi	r24, 0xE2	; 226
   17d96:	91 e3       	ldi	r25, 0x31	; 49
   17d98:	a0 e0       	ldi	r26, 0x00	; 0
   17d9a:	81 83       	std	Z+1, r24	; 0x01
   17d9c:	92 83       	std	Z+2, r25	; 0x02
   17d9e:	a3 83       	std	Z+3, r26	; 0x03
   17da0:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    }

    if(plot.buf)
   17da4:	80 91 a8 19 	lds	r24, 0x19A8	; 0x8019a8 <plot+0xb>
   17da8:	90 91 a9 19 	lds	r25, 0x19A9	; 0x8019a9 <plot+0xc>
   17dac:	00 97       	sbiw	r24, 0x00	; 0
   17dae:	11 f0       	breq	.+4      	; 0x17db4 <printer_close+0x9c>
        safefree(plot.buf);
   17db0:	0e 94 e3 27 	call	0x4fc6	; 0x4fc6 <safefree>
    printer_init();
   17db4:	44 df       	rcall	.-376    	; 0x17c3e <printer_init>
}
   17db6:	ad b7       	in	r26, 0x3d	; 61
   17db8:	be b7       	in	r27, 0x3e	; 62
   17dba:	17 96       	adiw	r26, 0x07	; 7
   17dbc:	0f b6       	in	r0, 0x3f	; 63
   17dbe:	f8 94       	cli
   17dc0:	be bf       	out	0x3e, r27	; 62
   17dc2:	0f be       	out	0x3f, r0	; 63
   17dc4:	ad bf       	out	0x3d, r26	; 61
   17dc6:	08 95       	ret

00017dc8 <printer_open>:
/// @see posix.c
/// @see posix.h
/// @return  void

void printer_open(char *name)
{
   17dc8:	ad e5       	ldi	r26, 0x5D	; 93
   17dca:	b0 e0       	ldi	r27, 0x00	; 0
   17dcc:	ea ee       	ldi	r30, 0xEA	; 234
   17dce:	fe eb       	ldi	r31, 0xBE	; 190
   17dd0:	0c 94 c7 e6 	jmp	0x1cd8e	; 0x1cd8e <__prologue_saves__+0x18>
   17dd4:	8c 01       	movw	r16, r24

    char *ptr;

    if(!name)
   17dd6:	89 2b       	or	r24, r25
   17dd8:	09 f0       	breq	.+2      	; 0x17ddc <printer_open+0x14>
   17dda:	4f c0       	rjmp	.+158    	; 0x17e7a <printer_open+0xb2>
        time_t seconds;
        tm_t *tc;
        ts_t ts;
        char fname[64];

        clock_gettime(0, (ts_t *) &ts);
   17ddc:	be 01       	movw	r22, r28
   17dde:	6e 5a       	subi	r22, 0xAE	; 174
   17de0:	7f 4f       	sbci	r23, 0xFF	; 255
   17de2:	80 e0       	ldi	r24, 0x00	; 0
   17de4:	90 e0       	ldi	r25, 0x00	; 0
   17de6:	0e 94 a9 33 	call	0x6752	; 0x6752 <clock_gettime>
        seconds = ts.tv_sec;
   17dea:	66 96       	adiw	r28, 0x16	; 22
   17dec:	8c ad       	ldd	r24, Y+60	; 0x3c
   17dee:	9d ad       	ldd	r25, Y+61	; 0x3d
   17df0:	ae ad       	ldd	r26, Y+62	; 0x3e
   17df2:	bf ad       	ldd	r27, Y+63	; 0x3f
   17df4:	66 97       	sbiw	r28, 0x16	; 22
   17df6:	6e 96       	adiw	r28, 0x1e	; 30
   17df8:	8c af       	std	Y+60, r24	; 0x3c
   17dfa:	9d af       	std	Y+61, r25	; 0x3d
   17dfc:	ae af       	std	Y+62, r26	; 0x3e
   17dfe:	bf af       	std	Y+63, r27	; 0x3f
   17e00:	6e 97       	sbiw	r28, 0x1e	; 30
        tc = gmtime(&seconds);
   17e02:	ce 01       	movw	r24, r28
   17e04:	86 5a       	subi	r24, 0xA6	; 166
   17e06:	9f 4f       	sbci	r25, 0xFF	; 255
   17e08:	0e 94 93 37 	call	0x6f26	; 0x6f26 <gmtime>
   17e0c:	8c 01       	movw	r16, r24
        sprintf(fname,"/plot-%02d%s%04d-%02d%02d%02d.plt",
   17e0e:	fc 01       	movw	r30, r24
   17e10:	e6 80       	ldd	r14, Z+6	; 0x06
   17e12:	f7 80       	ldd	r15, Z+7	; 0x07
   17e14:	80 85       	ldd	r24, Z+8	; 0x08
   17e16:	91 85       	ldd	r25, Z+9	; 0x09
   17e18:	0e 94 6f 36 	call	0x6cde	; 0x6cde <tm_mon_to_ascii>
   17e1c:	f8 01       	movw	r30, r16
   17e1e:	20 81       	ld	r18, Z
   17e20:	31 81       	ldd	r19, Z+1	; 0x01
   17e22:	ed b7       	in	r30, 0x3d	; 61
   17e24:	fe b7       	in	r31, 0x3e	; 62
   17e26:	31 8b       	std	Z+17, r19	; 0x11
   17e28:	20 8b       	std	Z+16, r18	; 0x10
   17e2a:	f8 01       	movw	r30, r16
   17e2c:	22 81       	ldd	r18, Z+2	; 0x02
   17e2e:	33 81       	ldd	r19, Z+3	; 0x03
   17e30:	ed b7       	in	r30, 0x3d	; 61
   17e32:	fe b7       	in	r31, 0x3e	; 62
   17e34:	37 87       	std	Z+15, r19	; 0x0f
   17e36:	26 87       	std	Z+14, r18	; 0x0e
   17e38:	f8 01       	movw	r30, r16
   17e3a:	24 81       	ldd	r18, Z+4	; 0x04
   17e3c:	35 81       	ldd	r19, Z+5	; 0x05
   17e3e:	ed b7       	in	r30, 0x3d	; 61
   17e40:	fe b7       	in	r31, 0x3e	; 62
   17e42:	35 87       	std	Z+13, r19	; 0x0d
   17e44:	24 87       	std	Z+12, r18	; 0x0c
   17e46:	f8 01       	movw	r30, r16
   17e48:	22 85       	ldd	r18, Z+10	; 0x0a
   17e4a:	33 85       	ldd	r19, Z+11	; 0x0b
   17e4c:	24 59       	subi	r18, 0x94	; 148
   17e4e:	38 4f       	sbci	r19, 0xF8	; 248
   17e50:	ed b7       	in	r30, 0x3d	; 61
   17e52:	fe b7       	in	r31, 0x3e	; 62
   17e54:	33 87       	std	Z+11, r19	; 0x0b
   17e56:	22 87       	std	Z+10, r18	; 0x0a
   17e58:	91 87       	std	Z+9, r25	; 0x09
   17e5a:	80 87       	std	Z+8, r24	; 0x08
   17e5c:	f7 82       	std	Z+7, r15	; 0x07
   17e5e:	e6 82       	std	Z+6, r14	; 0x06
   17e60:	87 e2       	ldi	r24, 0x27	; 39
   17e62:	92 e3       	ldi	r25, 0x32	; 50
   17e64:	a0 e0       	ldi	r26, 0x00	; 0
   17e66:	83 83       	std	Z+3, r24	; 0x03
   17e68:	94 83       	std	Z+4, r25	; 0x04
   17e6a:	a5 83       	std	Z+5, r26	; 0x05
   17e6c:	8e 01       	movw	r16, r28
   17e6e:	0e 5e       	subi	r16, 0xEE	; 238
   17e70:	1f 4f       	sbci	r17, 0xFF	; 255
   17e72:	12 83       	std	Z+2, r17	; 0x02
   17e74:	01 83       	std	Z+1, r16	; 0x01
   17e76:	0e 94 d7 46 	call	0x8dae	; 0x8dae <sprintf_P>
    else
    {
        ptr = name;
    }

    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17e7a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17e7e:	85 ff       	sbrs	r24, 5
   17e80:	0c c0       	rjmp	.+24     	; 0x17e9a <printer_open+0xd2>
        printf("Capturing plot to:%s\n", ptr);
   17e82:	ed b7       	in	r30, 0x3d	; 61
   17e84:	fe b7       	in	r31, 0x3e	; 62
   17e86:	15 83       	std	Z+5, r17	; 0x05
   17e88:	04 83       	std	Z+4, r16	; 0x04
   17e8a:	81 e1       	ldi	r24, 0x11	; 17
   17e8c:	92 e3       	ldi	r25, 0x32	; 50
   17e8e:	a0 e0       	ldi	r26, 0x00	; 0
   17e90:	81 83       	std	Z+1, r24	; 0x01
   17e92:	92 83       	std	Z+2, r25	; 0x02
   17e94:	a3 83       	std	Z+3, r26	; 0x03
   17e96:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>

    plot.fp = fopen(ptr,"wb");
   17e9a:	6c e0       	ldi	r22, 0x0C	; 12
   17e9c:	79 e0       	ldi	r23, 0x09	; 9
   17e9e:	c8 01       	movw	r24, r16
   17ea0:	0e 94 2a 7e 	call	0xfc54	; 0xfc54 <fopen>
   17ea4:	90 93 a7 19 	sts	0x19A7, r25	; 0x8019a7 <plot+0xa>
   17ea8:	80 93 a6 19 	sts	0x19A6, r24	; 0x8019a6 <plot+0x9>
    if(plot.fp == NULL)
   17eac:	89 2b       	or	r24, r25
   17eae:	b9 f4       	brne	.+46     	; 0x17ede <printer_open+0x116>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   17eb0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17eb4:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17eb8:	81 72       	andi	r24, 0x21	; 33
   17eba:	99 27       	eor	r25, r25
   17ebc:	89 2b       	or	r24, r25
   17ebe:	11 f1       	breq	.+68     	; 0x17f04 <printer_open+0x13c>
        {
            perror("open failed");
   17ec0:	8a e9       	ldi	r24, 0x9A	; 154
   17ec2:	9d e0       	ldi	r25, 0x0D	; 13
   17ec4:	0e 94 5b 78 	call	0xf0b6	; 0xf0b6 <perror>
            printf("exiting...\n");
   17ec8:	85 e0       	ldi	r24, 0x05	; 5
   17eca:	92 e3       	ldi	r25, 0x32	; 50
   17ecc:	a0 e0       	ldi	r26, 0x00	; 0
   17ece:	ed b7       	in	r30, 0x3d	; 61
   17ed0:	fe b7       	in	r31, 0x3e	; 62
   17ed2:	81 83       	std	Z+1, r24	; 0x01
   17ed4:	92 83       	std	Z+2, r25	; 0x02
   17ed6:	a3 83       	std	Z+3, r26	; 0x03
   17ed8:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   17edc:	13 c0       	rjmp	.+38     	; 0x17f04 <printer_open+0x13c>
        }
        return;
    }

    plot.buf = calloc(512+1,1);
   17ede:	61 e0       	ldi	r22, 0x01	; 1
   17ee0:	70 e0       	ldi	r23, 0x00	; 0
   17ee2:	81 e0       	ldi	r24, 0x01	; 1
   17ee4:	92 e0       	ldi	r25, 0x02	; 2
   17ee6:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <safecalloc>
   17eea:	90 93 a9 19 	sts	0x19A9, r25	; 0x8019a9 <plot+0xc>
   17eee:	80 93 a8 19 	sts	0x19A8, r24	; 0x8019a8 <plot+0xb>
    if(plot.buf == NULL)
   17ef2:	89 2b       	or	r24, r25
   17ef4:	09 f4       	brne	.+2      	; 0x17ef8 <printer_open+0x130>
        printer_close();
   17ef6:	10 df       	rcall	.-480    	; 0x17d18 <printer_close>
    plot.size = 512;
   17ef8:	80 e0       	ldi	r24, 0x00	; 0
   17efa:	92 e0       	ldi	r25, 0x02	; 2
   17efc:	90 93 a4 19 	sts	0x19A4, r25	; 0x8019a4 <plot+0x7>
   17f00:	80 93 a3 19 	sts	0x19A3, r24	; 0x8019a3 <plot+0x6>
}
   17f04:	c3 5a       	subi	r28, 0xA3	; 163
   17f06:	df 4f       	sbci	r29, 0xFF	; 255
   17f08:	e6 e0       	ldi	r30, 0x06	; 6
   17f0a:	0c 94 e3 e6 	jmp	0x1cdc6	; 0x1cdc6 <__epilogue_restores__+0x18>

00017f0e <printer_buffer>:
///
/// @see posix.c
/// @see posix.h
/// @return  void
void printer_buffer( uint16_t val )
{
   17f0e:	cf 93       	push	r28
   17f10:	df 93       	push	r29
   17f12:	ad b7       	in	r26, 0x3d	; 61
   17f14:	be b7       	in	r27, 0x3e	; 62
   17f16:	17 97       	sbiw	r26, 0x07	; 7
   17f18:	0f b6       	in	r0, 0x3f	; 63
   17f1a:	f8 94       	cli
   17f1c:	be bf       	out	0x3e, r27	; 62
   17f1e:	0f be       	out	0x3f, r0	; 63
   17f20:	ad bf       	out	0x3d, r26	; 61
   17f22:	ec 01       	movw	r28, r24

    uint16_t ch;

    if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   17f24:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17f28:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17f2c:	81 72       	andi	r24, 0x21	; 33
   17f2e:	99 27       	eor	r25, r25
   17f30:	89 2b       	or	r24, r25
   17f32:	c1 f0       	breq	.+48     	; 0x17f64 <printer_buffer+0x56>
    {
        if( ( plot.count & 255L ) == 0)
   17f34:	80 91 9d 19 	lds	r24, 0x199D	; 0x80199d <plot>
   17f38:	30 91 9e 19 	lds	r19, 0x199E	; 0x80199e <plot+0x1>
   17f3c:	20 91 9f 19 	lds	r18, 0x199F	; 0x80199f <plot+0x2>
   17f40:	90 91 a0 19 	lds	r25, 0x19A0	; 0x8019a0 <plot+0x3>
   17f44:	81 11       	cpse	r24, r1
   17f46:	0e c0       	rjmp	.+28     	; 0x17f64 <printer_buffer+0x56>
            printf("%08ld\r",plot.count);
   17f48:	ed b7       	in	r30, 0x3d	; 61
   17f4a:	fe b7       	in	r31, 0x3e	; 62
   17f4c:	84 83       	std	Z+4, r24	; 0x04
   17f4e:	35 83       	std	Z+5, r19	; 0x05
   17f50:	26 83       	std	Z+6, r18	; 0x06
   17f52:	97 83       	std	Z+7, r25	; 0x07
   17f54:	8a eb       	ldi	r24, 0xBA	; 186
   17f56:	91 e3       	ldi	r25, 0x31	; 49
   17f58:	a0 e0       	ldi	r26, 0x00	; 0
   17f5a:	81 83       	std	Z+1, r24	; 0x01
   17f5c:	92 83       	std	Z+2, r25	; 0x02
   17f5e:	a3 83       	std	Z+3, r26	; 0x03
   17f60:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    }

    ch = val & 0xff;
    if(val & (0xff00 & ~REN_FLAG))
   17f64:	ce 01       	movw	r24, r28
   17f66:	88 27       	eor	r24, r24
   17f68:	97 7f       	andi	r25, 0xF7	; 247
   17f6a:	89 2b       	or	r24, r25
   17f6c:	41 f0       	breq	.+16     	; 0x17f7e <printer_buffer+0x70>
    {
        if( receive_plot_flush() )
   17f6e:	75 de       	rcall	.-790    	; 0x17c5a <receive_plot_flush>
   17f70:	89 2b       	or	r24, r25
   17f72:	09 f4       	brne	.+2      	; 0x17f76 <printer_buffer+0x68>
   17f74:	3f c0       	rjmp	.+126    	; 0x17ff4 <printer_buffer+0xe6>
            plot.error = 1;
   17f76:	81 e0       	ldi	r24, 0x01	; 1
   17f78:	80 93 a5 19 	sts	0x19A5, r24	; 0x8019a5 <plot+0x8>
   17f7c:	3b c0       	rjmp	.+118    	; 0x17ff4 <printer_buffer+0xe6>
//plot.count += strlen(ptr);
    }
    else
    {
        ch  = val & 0xff;
        plot.buf[plot.ind++] = ch;
   17f7e:	20 91 a8 19 	lds	r18, 0x19A8	; 0x8019a8 <plot+0xb>
   17f82:	30 91 a9 19 	lds	r19, 0x19A9	; 0x8019a9 <plot+0xc>
   17f86:	80 91 a1 19 	lds	r24, 0x19A1	; 0x8019a1 <plot+0x4>
   17f8a:	90 91 a2 19 	lds	r25, 0x19A2	; 0x8019a2 <plot+0x5>
   17f8e:	ac 01       	movw	r20, r24
   17f90:	4f 5f       	subi	r20, 0xFF	; 255
   17f92:	5f 4f       	sbci	r21, 0xFF	; 255
   17f94:	50 93 a2 19 	sts	0x19A2, r21	; 0x8019a2 <plot+0x5>
   17f98:	40 93 a1 19 	sts	0x19A1, r20	; 0x8019a1 <plot+0x4>
   17f9c:	f9 01       	movw	r30, r18
   17f9e:	e8 0f       	add	r30, r24
   17fa0:	f9 1f       	adc	r31, r25
   17fa2:	c0 83       	st	Z, r28
        plot.count++;
   17fa4:	80 91 9d 19 	lds	r24, 0x199D	; 0x80199d <plot>
   17fa8:	90 91 9e 19 	lds	r25, 0x199E	; 0x80199e <plot+0x1>
   17fac:	a0 91 9f 19 	lds	r26, 0x199F	; 0x80199f <plot+0x2>
   17fb0:	b0 91 a0 19 	lds	r27, 0x19A0	; 0x8019a0 <plot+0x3>
   17fb4:	01 96       	adiw	r24, 0x01	; 1
   17fb6:	a1 1d       	adc	r26, r1
   17fb8:	b1 1d       	adc	r27, r1
   17fba:	80 93 9d 19 	sts	0x199D, r24	; 0x80199d <plot>
   17fbe:	90 93 9e 19 	sts	0x199E, r25	; 0x80199e <plot+0x1>
   17fc2:	a0 93 9f 19 	sts	0x199F, r26	; 0x80199f <plot+0x2>
   17fc6:	b0 93 a0 19 	sts	0x19A0, r27	; 0x8019a0 <plot+0x3>

        if(plot.ind >= plot.size)
   17fca:	20 91 a1 19 	lds	r18, 0x19A1	; 0x8019a1 <plot+0x4>
   17fce:	30 91 a2 19 	lds	r19, 0x19A2	; 0x8019a2 <plot+0x5>
   17fd2:	80 91 a3 19 	lds	r24, 0x19A3	; 0x8019a3 <plot+0x6>
   17fd6:	90 91 a4 19 	lds	r25, 0x19A4	; 0x8019a4 <plot+0x7>
   17fda:	28 17       	cp	r18, r24
   17fdc:	39 07       	cpc	r19, r25
        {
            if( receive_plot_flush() < 0 )
   17fde:	54 f0       	brlt	.+20     	; 0x17ff4 <printer_buffer+0xe6>
   17fe0:	3c de       	rcall	.-904    	; 0x17c5a <receive_plot_flush>
   17fe2:	97 ff       	sbrs	r25, 7
   17fe4:	03 c0       	rjmp	.+6      	; 0x17fec <printer_buffer+0xde>
                plot.error = 1;
   17fe6:	81 e0       	ldi	r24, 0x01	; 1
   17fe8:	80 93 a5 19 	sts	0x19A5, r24	; 0x8019a5 <plot+0x8>
            plot.ind  = 0;
   17fec:	10 92 a2 19 	sts	0x19A2, r1	; 0x8019a2 <plot+0x5>
   17ff0:	10 92 a1 19 	sts	0x19A1, r1	; 0x8019a1 <plot+0x4>
        }
    }
}
   17ff4:	cd b7       	in	r28, 0x3d	; 61
   17ff6:	de b7       	in	r29, 0x3e	; 62
   17ff8:	27 96       	adiw	r28, 0x07	; 7
   17ffa:	e2 e0       	ldi	r30, 0x02	; 2
   17ffc:	0c 94 e7 e6 	jmp	0x1cdce	; 0x1cdce <__epilogue_restores__+0x20>

00018000 <PRINTER_COMMANDS>:
///
/// @todo  Fully emulated plotter response.
/// @return  0

int PRINTER_COMMANDS(uint8_t ch)
{
   18000:	cf 93       	push	r28
   18002:	00 d0       	rcall	.+0      	; 0x18004 <PRINTER_COMMANDS+0x4>
   18004:	00 d0       	rcall	.+0      	; 0x18006 <PRINTER_COMMANDS+0x6>
   18006:	1f 92       	push	r1
   18008:	c8 2f       	mov	r28, r24

// We could, for example, use secondaries to set file names, etc
// We don not use them yet
    if(PRINTER_is_MLA(listening))
   1800a:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   1800e:	90 e0       	ldi	r25, 0x00	; 0
   18010:	0e 94 c8 8c 	call	0x11990	; 0x11990 <PRINTER_is_MLA>
   18014:	89 2b       	or	r24, r25
   18016:	69 f0       	breq	.+26     	; 0x18032 <PRINTER_COMMANDS+0x32>
    {
#if SDEBUG
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   18018:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1801c:	85 ff       	sbrs	r24, 5
   1801e:	22 c0       	rjmp	.+68     	; 0x18064 <PRINTER_COMMANDS+0x64>
            printf("[SC PRINTER Listen: %02XH]\n",  0xff & ch );
   18020:	8c 2f       	mov	r24, r28
   18022:	90 e0       	ldi	r25, 0x00	; 0
   18024:	ed b7       	in	r30, 0x3d	; 61
   18026:	fe b7       	in	r31, 0x3e	; 62
   18028:	95 83       	std	Z+5, r25	; 0x05
   1802a:	84 83       	std	Z+4, r24	; 0x04
   1802c:	8e e9       	ldi	r24, 0x9E	; 158
   1802e:	91 e3       	ldi	r25, 0x31	; 49
   18030:	13 c0       	rjmp	.+38     	; 0x18058 <PRINTER_COMMANDS+0x58>
#endif
        return(0);
    }

    if(PRINTER_is_MTA(talking))
   18032:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   18036:	90 e0       	ldi	r25, 0x00	; 0
   18038:	0e 94 da 8c 	call	0x119b4	; 0x119b4 <PRINTER_is_MTA>
   1803c:	89 2b       	or	r24, r25
   1803e:	91 f0       	breq	.+36     	; 0x18064 <PRINTER_COMMANDS+0x64>
    {
#if SDEBUG
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   18040:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18044:	85 ff       	sbrs	r24, 5
   18046:	0e c0       	rjmp	.+28     	; 0x18064 <PRINTER_COMMANDS+0x64>
            printf("[SC PRINTER Talk: %02XH]\n",  0xff & ch );
   18048:	8c 2f       	mov	r24, r28
   1804a:	90 e0       	ldi	r25, 0x00	; 0
   1804c:	ed b7       	in	r30, 0x3d	; 61
   1804e:	fe b7       	in	r31, 0x3e	; 62
   18050:	95 83       	std	Z+5, r25	; 0x05
   18052:	84 83       	std	Z+4, r24	; 0x04
   18054:	84 e8       	ldi	r24, 0x84	; 132
   18056:	91 e3       	ldi	r25, 0x31	; 49
   18058:	a0 e0       	ldi	r26, 0x00	; 0
   1805a:	81 83       	std	Z+1, r24	; 0x01
   1805c:	92 83       	std	Z+2, r25	; 0x02
   1805e:	a3 83       	std	Z+3, r26	; 0x03
   18060:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
#endif
        return(0);
    }
    return(0);
}
   18064:	80 e0       	ldi	r24, 0x00	; 0
   18066:	90 e0       	ldi	r25, 0x00	; 0
   18068:	0f 90       	pop	r0
   1806a:	0f 90       	pop	r0
   1806c:	0f 90       	pop	r0
   1806e:	0f 90       	pop	r0
   18070:	0f 90       	pop	r0
   18072:	cf 91       	pop	r28
   18074:	08 95       	ret

00018076 <V2B_MSB>:
///@param index: offset into byte array
///@param size: number of bytes to process
///@param val: Value to convert
///@return void
void V2B_MSB(uint8_t *B, int index, int size, uint32_t val)
{
   18076:	0f 93       	push	r16
   18078:	1f 93       	push	r17
   1807a:	da 01       	movw	r26, r20
   1807c:	11 97       	sbiw	r26, 0x01	; 1
    int i;
    for(i=size-1;i>=0;--i)
   1807e:	b7 fd       	sbrc	r27, 7
   18080:	0b c0       	rjmp	.+22     	; 0x18098 <V2B_MSB+0x22>
    {
        B[index+i] = val & 0xff;
   18082:	fd 01       	movw	r30, r26
   18084:	e6 0f       	add	r30, r22
   18086:	f7 1f       	adc	r31, r23
   18088:	e8 0f       	add	r30, r24
   1808a:	f9 1f       	adc	r31, r25
   1808c:	00 83       	st	Z, r16
        val >>= 8;
   1808e:	01 2f       	mov	r16, r17
   18090:	12 2f       	mov	r17, r18
   18092:	23 2f       	mov	r18, r19
   18094:	33 27       	eor	r19, r19
   18096:	f2 cf       	rjmp	.-28     	; 0x1807c <V2B_MSB+0x6>
    }
}
   18098:	1f 91       	pop	r17
   1809a:	0f 91       	pop	r16
   1809c:	08 95       	ret

0001809e <V2B_LSB>:
///@param index: offset into byte array
///@param size: number of bytes to process
///@param val: Value to convert
///@return void
void V2B_LSB(uint8_t *B, int index, int size, uint32_t val)
{
   1809e:	0f 93       	push	r16
   180a0:	1f 93       	push	r17
   180a2:	fc 01       	movw	r30, r24
   180a4:	e6 0f       	add	r30, r22
   180a6:	f7 1f       	adc	r31, r23
   180a8:	bf 01       	movw	r22, r30
    int i;
    for(i=0;i<size;++i)
   180aa:	cf 01       	movw	r24, r30
   180ac:	86 1b       	sub	r24, r22
   180ae:	97 0b       	sbc	r25, r23
   180b0:	84 17       	cp	r24, r20
   180b2:	95 07       	cpc	r25, r21
   180b4:	34 f4       	brge	.+12     	; 0x180c2 <V2B_LSB+0x24>
    {
        B[index+i] = val & 0xff;
   180b6:	01 93       	st	Z+, r16
        val >>= 8;
   180b8:	01 2f       	mov	r16, r17
   180ba:	12 2f       	mov	r17, r18
   180bc:	23 2f       	mov	r18, r19
   180be:	33 27       	eor	r19, r19
   180c0:	f4 cf       	rjmp	.-24     	; 0x180aa <V2B_LSB+0xc>
    }
}
   180c2:	1f 91       	pop	r17
   180c4:	0f 91       	pop	r16
   180c6:	08 95       	ret

000180c8 <B2V_MSB>:
///@param B: byte array
///@param index: offset into byte array
///@param size: number of bytes to process
///@return value
uint32_t B2V_MSB(uint8_t *B, int index, int size)
{
   180c8:	cf 92       	push	r12
   180ca:	df 92       	push	r13
   180cc:	ef 92       	push	r14
   180ce:	ff 92       	push	r15
   180d0:	fc 01       	movw	r30, r24
   180d2:	e6 0f       	add	r30, r22
   180d4:	f7 1f       	adc	r31, r23
    int i;
    uint32_t val = 0;
   180d6:	60 e0       	ldi	r22, 0x00	; 0
   180d8:	70 e0       	ldi	r23, 0x00	; 0
   180da:	cb 01       	movw	r24, r22
   180dc:	df 01       	movw	r26, r30

    for(i=0;i<size;++i)
   180de:	9f 01       	movw	r18, r30
   180e0:	2a 1b       	sub	r18, r26
   180e2:	3b 0b       	sbc	r19, r27
   180e4:	24 17       	cp	r18, r20
   180e6:	35 07       	cpc	r19, r21
   180e8:	4c f4       	brge	.+18     	; 0x180fc <B2V_MSB+0x34>
    {
        val <<= 8;
   180ea:	cc 24       	eor	r12, r12
   180ec:	d6 2e       	mov	r13, r22
   180ee:	e7 2e       	mov	r14, r23
   180f0:	f8 2e       	mov	r15, r24
        val |= (uint8_t) (B[i+index] & 0xff);
   180f2:	21 91       	ld	r18, Z+
   180f4:	c7 01       	movw	r24, r14
   180f6:	b6 01       	movw	r22, r12
   180f8:	62 2b       	or	r22, r18
   180fa:	f1 cf       	rjmp	.-30     	; 0x180de <B2V_MSB+0x16>
    }
    return(val);
}
   180fc:	ff 90       	pop	r15
   180fe:	ef 90       	pop	r14
   18100:	df 90       	pop	r13
   18102:	cf 90       	pop	r12
   18104:	08 95       	ret

00018106 <B2V_LSB>:
///@param B: byte array
///@param index: offset into byte array
///@param size: number of bytes to process
///@return value
uint32_t B2V_LSB(uint8_t *B, int index, int size)
{
   18106:	cf 92       	push	r12
   18108:	df 92       	push	r13
   1810a:	ef 92       	push	r14
   1810c:	ff 92       	push	r15
   1810e:	9c 01       	movw	r18, r24
   18110:	db 01       	movw	r26, r22
    int i;
    uint32_t val = 0;
   18112:	60 e0       	ldi	r22, 0x00	; 0
   18114:	70 e0       	ldi	r23, 0x00	; 0
   18116:	cb 01       	movw	r24, r22
   18118:	41 50       	subi	r20, 0x01	; 1
   1811a:	51 09       	sbc	r21, r1

    for(i=size-1;i>=0;--i)
   1811c:	57 fd       	sbrc	r21, 7
   1811e:	0e c0       	rjmp	.+28     	; 0x1813c <B2V_LSB+0x36>
    {
        val <<= 8;
   18120:	cc 24       	eor	r12, r12
   18122:	d6 2e       	mov	r13, r22
   18124:	e7 2e       	mov	r14, r23
   18126:	f8 2e       	mov	r15, r24
        val |= (uint8_t) (B[i+index] & 0xff);
   18128:	fa 01       	movw	r30, r20
   1812a:	ea 0f       	add	r30, r26
   1812c:	fb 1f       	adc	r31, r27
   1812e:	e2 0f       	add	r30, r18
   18130:	f3 1f       	adc	r31, r19
   18132:	e0 81       	ld	r30, Z
   18134:	c7 01       	movw	r24, r14
   18136:	b6 01       	movw	r22, r12
   18138:	6e 2b       	or	r22, r30
   1813a:	ee cf       	rjmp	.-36     	; 0x18118 <B2V_LSB+0x12>
    }
    return(val);
}
   1813c:	ff 90       	pop	r15
   1813e:	ef 90       	pop	r14
   18140:	df 90       	pop	r13
   18142:	cf 90       	pop	r12
   18144:	08 95       	ret

00018146 <lif_help>:
            return( (lifdir_t *) &LIF->DIR );

// Skip purged records
    }
    return( NULL );
}
   18146:	cf 93       	push	r28
   18148:	df 93       	push	r29
   1814a:	00 d0       	rcall	.+0      	; 0x1814c <lif_help+0x6>
   1814c:	1f 92       	push	r1
   1814e:	ec 01       	movw	r28, r24
   18150:	8f e7       	ldi	r24, 0x7F	; 127
   18152:	96 e4       	ldi	r25, 0x46	; 70
   18154:	a0 e0       	ldi	r26, 0x00	; 0
   18156:	ed b7       	in	r30, 0x3d	; 61
   18158:	fe b7       	in	r31, 0x3e	; 62
   1815a:	81 83       	std	Z+1, r24	; 0x01
   1815c:	92 83       	std	Z+2, r25	; 0x02
   1815e:	a3 83       	std	Z+3, r26	; 0x03
   18160:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   18164:	cd 2b       	or	r28, r29
   18166:	51 f0       	breq	.+20     	; 0x1817c <lif_help+0x36>
   18168:	8b eb       	ldi	r24, 0xBB	; 187
   1816a:	94 e4       	ldi	r25, 0x44	; 68
   1816c:	a0 e0       	ldi	r26, 0x00	; 0
   1816e:	ed b7       	in	r30, 0x3d	; 61
   18170:	fe b7       	in	r31, 0x3e	; 62
   18172:	81 83       	std	Z+1, r24	; 0x01
   18174:	92 83       	std	Z+2, r25	; 0x02
   18176:	a3 83       	std	Z+3, r26	; 0x03
   18178:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   1817c:	cd b7       	in	r28, 0x3d	; 61
   1817e:	de b7       	in	r29, 0x3e	; 62
   18180:	23 96       	adiw	r28, 0x03	; 3
   18182:	e2 e0       	ldi	r30, 0x02	; 2
   18184:	0c 94 e7 e6 	jmp	0x1cdce	; 0x1cdce <__epilogue_restores__+0x20>

00018188 <lif_calloc>:
   18188:	cf 92       	push	r12
   1818a:	df 92       	push	r13
   1818c:	ef 92       	push	r14
   1818e:	ff 92       	push	r15
   18190:	cf 93       	push	r28
   18192:	df 93       	push	r29
   18194:	ad b7       	in	r26, 0x3d	; 61
   18196:	be b7       	in	r27, 0x3e	; 62
   18198:	17 97       	sbiw	r26, 0x07	; 7
   1819a:	0f b6       	in	r0, 0x3f	; 63
   1819c:	f8 94       	cli
   1819e:	be bf       	out	0x3e, r27	; 62
   181a0:	0f be       	out	0x3f, r0	; 63
   181a2:	ad bf       	out	0x3d, r26	; 61
   181a4:	6b 01       	movw	r12, r22
   181a6:	7c 01       	movw	r14, r24
   181a8:	61 e0       	ldi	r22, 0x01	; 1
   181aa:	70 e0       	ldi	r23, 0x00	; 0
   181ac:	c6 01       	movw	r24, r12
   181ae:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <safecalloc>
   181b2:	ec 01       	movw	r28, r24
   181b4:	89 2b       	or	r24, r25
   181b6:	71 f4       	brne	.+28     	; 0x181d4 <lif_calloc+0x4c>
   181b8:	ed b7       	in	r30, 0x3d	; 61
   181ba:	fe b7       	in	r31, 0x3e	; 62
   181bc:	c4 82       	std	Z+4, r12	; 0x04
   181be:	d5 82       	std	Z+5, r13	; 0x05
   181c0:	e6 82       	std	Z+6, r14	; 0x06
   181c2:	f7 82       	std	Z+7, r15	; 0x07
   181c4:	84 e5       	ldi	r24, 0x54	; 84
   181c6:	94 e4       	ldi	r25, 0x44	; 68
   181c8:	a0 e0       	ldi	r26, 0x00	; 0
   181ca:	81 83       	std	Z+1, r24	; 0x01
   181cc:	92 83       	std	Z+2, r25	; 0x02
   181ce:	a3 83       	std	Z+3, r26	; 0x03
   181d0:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   181d4:	ce 01       	movw	r24, r28
   181d6:	ad b7       	in	r26, 0x3d	; 61
   181d8:	be b7       	in	r27, 0x3e	; 62
   181da:	17 96       	adiw	r26, 0x07	; 7
   181dc:	0f b6       	in	r0, 0x3f	; 63
   181de:	f8 94       	cli
   181e0:	be bf       	out	0x3e, r27	; 62
   181e2:	0f be       	out	0x3f, r0	; 63
   181e4:	ad bf       	out	0x3d, r26	; 61
   181e6:	df 91       	pop	r29
   181e8:	cf 91       	pop	r28
   181ea:	ff 90       	pop	r15
   181ec:	ef 90       	pop	r14
   181ee:	df 90       	pop	r13
   181f0:	cf 90       	pop	r12
   181f2:	08 95       	ret

000181f4 <lif_free>:
   181f4:	00 d0       	rcall	.+0      	; 0x181f6 <lif_free+0x2>
   181f6:	1f 92       	push	r1
   181f8:	00 97       	sbiw	r24, 0x00	; 0
   181fa:	59 f4       	brne	.+22     	; 0x18212 <lif_free+0x1e>
   181fc:	8c e3       	ldi	r24, 0x3C	; 60
   181fe:	94 e4       	ldi	r25, 0x44	; 68
   18200:	a0 e0       	ldi	r26, 0x00	; 0
   18202:	ed b7       	in	r30, 0x3d	; 61
   18204:	fe b7       	in	r31, 0x3e	; 62
   18206:	81 83       	std	Z+1, r24	; 0x01
   18208:	92 83       	std	Z+2, r25	; 0x02
   1820a:	a3 83       	std	Z+3, r26	; 0x03
   1820c:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   18210:	02 c0       	rjmp	.+4      	; 0x18216 <lif_free+0x22>
   18212:	0e 94 e3 27 	call	0x4fc6	; 0x4fc6 <safefree>
   18216:	0f 90       	pop	r0
   18218:	0f 90       	pop	r0
   1821a:	0f 90       	pop	r0
   1821c:	08 95       	ret

0001821e <lif_stralloc>:
   1821e:	0f 93       	push	r16
   18220:	1f 93       	push	r17
   18222:	cf 93       	push	r28
   18224:	df 93       	push	r29
   18226:	ec 01       	movw	r28, r24
   18228:	fc 01       	movw	r30, r24
   1822a:	01 90       	ld	r0, Z+
   1822c:	00 20       	and	r0, r0
   1822e:	e9 f7       	brne	.-6      	; 0x1822a <lif_stralloc+0xc>
   18230:	bf 01       	movw	r22, r30
   18232:	68 1b       	sub	r22, r24
   18234:	79 0b       	sbc	r23, r25
   18236:	6d 5f       	subi	r22, 0xFD	; 253
   18238:	7f 4f       	sbci	r23, 0xFF	; 255
   1823a:	07 2e       	mov	r0, r23
   1823c:	00 0c       	add	r0, r0
   1823e:	88 0b       	sbc	r24, r24
   18240:	99 0b       	sbc	r25, r25
   18242:	a2 df       	rcall	.-188    	; 0x18188 <lif_calloc>
   18244:	8c 01       	movw	r16, r24
   18246:	00 97       	sbiw	r24, 0x00	; 0
   18248:	19 f0       	breq	.+6      	; 0x18250 <lif_stralloc+0x32>
   1824a:	be 01       	movw	r22, r28
   1824c:	0e 94 2c 31 	call	0x6258	; 0x6258 <strcpy>
   18250:	c8 01       	movw	r24, r16
   18252:	df 91       	pop	r29
   18254:	cf 91       	pop	r28
   18256:	1f 91       	pop	r17
   18258:	0f 91       	pop	r16
   1825a:	08 95       	ret

0001825c <lif_open>:
   1825c:	ef 92       	push	r14
   1825e:	ff 92       	push	r15
   18260:	0f 93       	push	r16
   18262:	1f 93       	push	r17
   18264:	cf 93       	push	r28
   18266:	df 93       	push	r29
   18268:	ad b7       	in	r26, 0x3d	; 61
   1826a:	be b7       	in	r27, 0x3e	; 62
   1826c:	17 97       	sbiw	r26, 0x07	; 7
   1826e:	0f b6       	in	r0, 0x3f	; 63
   18270:	f8 94       	cli
   18272:	be bf       	out	0x3e, r27	; 62
   18274:	0f be       	out	0x3f, r0	; 63
   18276:	ad bf       	out	0x3d, r26	; 61
   18278:	8c 01       	movw	r16, r24
   1827a:	7b 01       	movw	r14, r22
   1827c:	0e 94 2a 7e 	call	0xfc54	; 0xfc54 <fopen>
   18280:	ec 01       	movw	r28, r24
   18282:	89 2b       	or	r24, r25
   18284:	71 f4       	brne	.+28     	; 0x182a2 <lif_open+0x46>
   18286:	ed b7       	in	r30, 0x3d	; 61
   18288:	fe b7       	in	r31, 0x3e	; 62
   1828a:	f7 82       	std	Z+7, r15	; 0x07
   1828c:	e6 82       	std	Z+6, r14	; 0x06
   1828e:	15 83       	std	Z+5, r17	; 0x05
   18290:	04 83       	std	Z+4, r16	; 0x04
   18292:	87 e1       	ldi	r24, 0x17	; 23
   18294:	94 e4       	ldi	r25, 0x44	; 68
   18296:	a0 e0       	ldi	r26, 0x00	; 0
   18298:	81 83       	std	Z+1, r24	; 0x01
   1829a:	92 83       	std	Z+2, r25	; 0x02
   1829c:	a3 83       	std	Z+3, r26	; 0x03
   1829e:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   182a2:	ce 01       	movw	r24, r28
   182a4:	cd b7       	in	r28, 0x3d	; 61
   182a6:	de b7       	in	r29, 0x3e	; 62
   182a8:	27 96       	adiw	r28, 0x07	; 7
   182aa:	e6 e0       	ldi	r30, 0x06	; 6
   182ac:	0c 94 e3 e6 	jmp	0x1cdc6	; 0x1cdc6 <__epilogue_restores__+0x18>

000182b0 <lif_stat>:
   182b0:	0f 93       	push	r16
   182b2:	1f 93       	push	r17
   182b4:	cf 93       	push	r28
   182b6:	df 93       	push	r29
   182b8:	00 d0       	rcall	.+0      	; 0x182ba <lif_stat+0xa>
   182ba:	00 d0       	rcall	.+0      	; 0x182bc <lif_stat+0xc>
   182bc:	1f 92       	push	r1
   182be:	8c 01       	movw	r16, r24
   182c0:	d6 2f       	mov	r29, r22
   182c2:	c7 2f       	mov	r28, r23
   182c4:	0e 94 2f 79 	call	0xf25e	; 0xf25e <stat>
   182c8:	97 ff       	sbrs	r25, 7
   182ca:	0f c0       	rjmp	.+30     	; 0x182ea <lif_stat+0x3a>
   182cc:	ed b7       	in	r30, 0x3d	; 61
   182ce:	fe b7       	in	r31, 0x3e	; 62
   182d0:	15 83       	std	Z+5, r17	; 0x05
   182d2:	04 83       	std	Z+4, r16	; 0x04
   182d4:	8e ef       	ldi	r24, 0xFE	; 254
   182d6:	93 e4       	ldi	r25, 0x43	; 67
   182d8:	a0 e0       	ldi	r26, 0x00	; 0
   182da:	81 83       	std	Z+1, r24	; 0x01
   182dc:	92 83       	std	Z+2, r25	; 0x02
   182de:	a3 83       	std	Z+3, r26	; 0x03
   182e0:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   182e4:	80 e0       	ldi	r24, 0x00	; 0
   182e6:	90 e0       	ldi	r25, 0x00	; 0
   182e8:	02 c0       	rjmp	.+4      	; 0x182ee <lif_stat+0x3e>
   182ea:	8d 2f       	mov	r24, r29
   182ec:	9c 2f       	mov	r25, r28
   182ee:	cd b7       	in	r28, 0x3d	; 61
   182f0:	de b7       	in	r29, 0x3e	; 62
   182f2:	25 96       	adiw	r28, 0x05	; 5
   182f4:	e4 e0       	ldi	r30, 0x04	; 4
   182f6:	0c 94 e5 e6 	jmp	0x1cdca	; 0x1cdca <__epilogue_restores__+0x1c>

000182fa <lif_seek_msg>:
   182fa:	a9 e0       	ldi	r26, 0x09	; 9
   182fc:	b0 e0       	ldi	r27, 0x00	; 0
   182fe:	e3 e8       	ldi	r30, 0x83	; 131
   18300:	f1 ec       	ldi	r31, 0xC1	; 193
   18302:	0c 94 c5 e6 	jmp	0x1cd8a	; 0x1cd8a <__prologue_saves__+0x14>
   18306:	ec 01       	movw	r28, r24
   18308:	6a 01       	movw	r12, r20
   1830a:	7b 01       	movw	r14, r22
   1830c:	89 01       	movw	r16, r18
   1830e:	0e 94 69 7a 	call	0xf4d2	; 0xf4d2 <ftell>
   18312:	6c 15       	cp	r22, r12
   18314:	7d 05       	cpc	r23, r13
   18316:	8e 05       	cpc	r24, r14
   18318:	9f 05       	cpc	r25, r15
   1831a:	19 f4       	brne	.+6      	; 0x18322 <lif_seek_msg+0x28>
   1831c:	81 e0       	ldi	r24, 0x01	; 1
   1831e:	90 e0       	ldi	r25, 0x00	; 0
   18320:	1b c0       	rjmp	.+54     	; 0x18358 <lif_seek_msg+0x5e>
   18322:	20 e0       	ldi	r18, 0x00	; 0
   18324:	30 e0       	ldi	r19, 0x00	; 0
   18326:	b7 01       	movw	r22, r14
   18328:	a6 01       	movw	r20, r12
   1832a:	ce 01       	movw	r24, r28
   1832c:	0e 94 ec 7a 	call	0xf5d8	; 0xf5d8 <fseek>
   18330:	97 ff       	sbrs	r25, 7
   18332:	f4 cf       	rjmp	.-24     	; 0x1831c <lif_seek_msg+0x22>
   18334:	ed b7       	in	r30, 0x3d	; 61
   18336:	fe b7       	in	r31, 0x3e	; 62
   18338:	c6 82       	std	Z+6, r12	; 0x06
   1833a:	d7 82       	std	Z+7, r13	; 0x07
   1833c:	e0 86       	std	Z+8, r14	; 0x08
   1833e:	f1 86       	std	Z+9, r15	; 0x09
   18340:	15 83       	std	Z+5, r17	; 0x05
   18342:	04 83       	std	Z+4, r16	; 0x04
   18344:	8d ed       	ldi	r24, 0xDD	; 221
   18346:	93 e4       	ldi	r25, 0x43	; 67
   18348:	a0 e0       	ldi	r26, 0x00	; 0
   1834a:	81 83       	std	Z+1, r24	; 0x01
   1834c:	92 83       	std	Z+2, r25	; 0x02
   1834e:	a3 83       	std	Z+3, r26	; 0x03
   18350:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   18354:	80 e0       	ldi	r24, 0x00	; 0
   18356:	90 e0       	ldi	r25, 0x00	; 0
   18358:	cd b7       	in	r28, 0x3d	; 61
   1835a:	de b7       	in	r29, 0x3e	; 62
   1835c:	29 96       	adiw	r28, 0x09	; 9
   1835e:	e8 e0       	ldi	r30, 0x08	; 8
   18360:	0c 94 e1 e6 	jmp	0x1cdc2	; 0x1cdc2 <__epilogue_restores__+0x14>

00018364 <lif_read>:
   18364:	af e0       	ldi	r26, 0x0F	; 15
   18366:	b0 e0       	ldi	r27, 0x00	; 0
   18368:	e8 eb       	ldi	r30, 0xB8	; 184
   1836a:	f1 ec       	ldi	r31, 0xC1	; 193
   1836c:	0c 94 c1 e6 	jmp	0x1cd82	; 0x1cd82 <__prologue_saves__+0xc>
   18370:	ec 01       	movw	r28, r24
   18372:	7b 01       	movw	r14, r22
   18374:	49 01       	movw	r8, r18
   18376:	5a 01       	movw	r10, r20
   18378:	28 81       	ld	r18, Y
   1837a:	39 81       	ldd	r19, Y+1	; 0x01
   1837c:	b5 01       	movw	r22, r10
   1837e:	a4 01       	movw	r20, r8
   18380:	8a 81       	ldd	r24, Y+2	; 0x02
   18382:	9b 81       	ldd	r25, Y+3	; 0x03
   18384:	ba df       	rcall	.-140    	; 0x182fa <lif_seek_msg>
   18386:	89 2b       	or	r24, r25
   18388:	a1 f1       	breq	.+104    	; 0x183f2 <lif_read+0x8e>
   1838a:	2a 81       	ldd	r18, Y+2	; 0x02
   1838c:	3b 81       	ldd	r19, Y+3	; 0x03
   1838e:	a8 01       	movw	r20, r16
   18390:	61 e0       	ldi	r22, 0x01	; 1
   18392:	70 e0       	ldi	r23, 0x00	; 0
   18394:	c7 01       	movw	r24, r14
   18396:	0e 94 80 7b 	call	0xf700	; 0xf700 <fread>
   1839a:	6c 01       	movw	r12, r24
   1839c:	e1 2c       	mov	r14, r1
   1839e:	f1 2c       	mov	r15, r1
   183a0:	b8 01       	movw	r22, r16
   183a2:	01 2e       	mov	r0, r17
   183a4:	00 0c       	add	r0, r0
   183a6:	88 0b       	sbc	r24, r24
   183a8:	99 0b       	sbc	r25, r25
   183aa:	c6 16       	cp	r12, r22
   183ac:	d7 06       	cpc	r13, r23
   183ae:	e8 06       	cpc	r14, r24
   183b0:	f9 06       	cpc	r15, r25
   183b2:	29 f1       	breq	.+74     	; 0x183fe <lif_read+0x9a>
   183b4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   183b8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   183bc:	92 ff       	sbrs	r25, 2
   183be:	1d c0       	rjmp	.+58     	; 0x183fa <lif_read+0x96>
   183c0:	ed b7       	in	r30, 0x3d	; 61
   183c2:	fe b7       	in	r31, 0x3e	; 62
   183c4:	17 87       	std	Z+15, r17	; 0x0f
   183c6:	06 87       	std	Z+14, r16	; 0x0e
   183c8:	c2 86       	std	Z+10, r12	; 0x0a
   183ca:	d3 86       	std	Z+11, r13	; 0x0b
   183cc:	e4 86       	std	Z+12, r14	; 0x0c
   183ce:	f5 86       	std	Z+13, r15	; 0x0d
   183d0:	86 82       	std	Z+6, r8	; 0x06
   183d2:	97 82       	std	Z+7, r9	; 0x07
   183d4:	a0 86       	std	Z+8, r10	; 0x08
   183d6:	b1 86       	std	Z+9, r11	; 0x09
   183d8:	88 81       	ld	r24, Y
   183da:	99 81       	ldd	r25, Y+1	; 0x01
   183dc:	95 83       	std	Z+5, r25	; 0x05
   183de:	84 83       	std	Z+4, r24	; 0x04
   183e0:	81 ea       	ldi	r24, 0xA1	; 161
   183e2:	93 e4       	ldi	r25, 0x43	; 67
   183e4:	a0 e0       	ldi	r26, 0x00	; 0
   183e6:	81 83       	std	Z+1, r24	; 0x01
   183e8:	92 83       	std	Z+2, r25	; 0x02
   183ea:	a3 83       	std	Z+3, r26	; 0x03
   183ec:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   183f0:	04 c0       	rjmp	.+8      	; 0x183fa <lif_read+0x96>
   183f2:	60 e0       	ldi	r22, 0x00	; 0
   183f4:	70 e0       	ldi	r23, 0x00	; 0
   183f6:	cb 01       	movw	r24, r22
   183f8:	02 c0       	rjmp	.+4      	; 0x183fe <lif_read+0x9a>
   183fa:	c7 01       	movw	r24, r14
   183fc:	b6 01       	movw	r22, r12
   183fe:	cd b7       	in	r28, 0x3d	; 61
   18400:	de b7       	in	r29, 0x3e	; 62
   18402:	2f 96       	adiw	r28, 0x0f	; 15
   18404:	ec e0       	ldi	r30, 0x0C	; 12
   18406:	0c 94 dd e6 	jmp	0x1cdba	; 0x1cdba <__epilogue_restores__+0xc>

0001840a <lif_write>:
   1840a:	8f 92       	push	r8
   1840c:	9f 92       	push	r9
   1840e:	af 92       	push	r10
   18410:	bf 92       	push	r11
   18412:	ef 92       	push	r14
   18414:	ff 92       	push	r15
   18416:	0f 93       	push	r16
   18418:	1f 93       	push	r17
   1841a:	cf 93       	push	r28
   1841c:	df 93       	push	r29
   1841e:	ad b7       	in	r26, 0x3d	; 61
   18420:	be b7       	in	r27, 0x3e	; 62
   18422:	1d 97       	sbiw	r26, 0x0d	; 13
   18424:	0f b6       	in	r0, 0x3f	; 63
   18426:	f8 94       	cli
   18428:	be bf       	out	0x3e, r27	; 62
   1842a:	0f be       	out	0x3f, r0	; 63
   1842c:	ad bf       	out	0x3d, r26	; 61
   1842e:	7c 01       	movw	r14, r24
   18430:	eb 01       	movw	r28, r22
   18432:	49 01       	movw	r8, r18
   18434:	5a 01       	movw	r10, r20
   18436:	fc 01       	movw	r30, r24
   18438:	20 81       	ld	r18, Z
   1843a:	31 81       	ldd	r19, Z+1	; 0x01
   1843c:	b5 01       	movw	r22, r10
   1843e:	a4 01       	movw	r20, r8
   18440:	82 81       	ldd	r24, Z+2	; 0x02
   18442:	93 81       	ldd	r25, Z+3	; 0x03
   18444:	5a df       	rcall	.-332    	; 0x182fa <lif_seek_msg>
   18446:	00 97       	sbiw	r24, 0x00	; 0
   18448:	81 f1       	breq	.+96     	; 0x184aa <lif_write+0xa0>
   1844a:	f7 01       	movw	r30, r14
   1844c:	22 81       	ldd	r18, Z+2	; 0x02
   1844e:	33 81       	ldd	r19, Z+3	; 0x03
   18450:	a8 01       	movw	r20, r16
   18452:	61 e0       	ldi	r22, 0x01	; 1
   18454:	70 e0       	ldi	r23, 0x00	; 0
   18456:	ce 01       	movw	r24, r28
   18458:	0e 94 52 7c 	call	0xf8a4	; 0xf8a4 <fwrite>
   1845c:	ec 01       	movw	r28, r24
   1845e:	08 17       	cp	r16, r24
   18460:	19 07       	cpc	r17, r25
   18462:	01 f1       	breq	.+64     	; 0x184a4 <lif_write+0x9a>
   18464:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18468:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1846c:	92 ff       	sbrs	r25, 2
   1846e:	1c c0       	rjmp	.+56     	; 0x184a8 <lif_write+0x9e>
   18470:	ed b7       	in	r30, 0x3d	; 61
   18472:	fe b7       	in	r31, 0x3e	; 62
   18474:	15 87       	std	Z+13, r17	; 0x0d
   18476:	04 87       	std	Z+12, r16	; 0x0c
   18478:	d3 87       	std	Z+11, r29	; 0x0b
   1847a:	c2 87       	std	Z+10, r28	; 0x0a
   1847c:	86 82       	std	Z+6, r8	; 0x06
   1847e:	97 82       	std	Z+7, r9	; 0x07
   18480:	a0 86       	std	Z+8, r10	; 0x08
   18482:	b1 86       	std	Z+9, r11	; 0x09
   18484:	f7 01       	movw	r30, r14
   18486:	80 81       	ld	r24, Z
   18488:	91 81       	ldd	r25, Z+1	; 0x01
   1848a:	ed b7       	in	r30, 0x3d	; 61
   1848c:	fe b7       	in	r31, 0x3e	; 62
   1848e:	95 83       	std	Z+5, r25	; 0x05
   18490:	84 83       	std	Z+4, r24	; 0x04
   18492:	84 e6       	ldi	r24, 0x64	; 100
   18494:	93 e4       	ldi	r25, 0x43	; 67
   18496:	a0 e0       	ldi	r26, 0x00	; 0
   18498:	81 83       	std	Z+1, r24	; 0x01
   1849a:	92 83       	std	Z+2, r25	; 0x02
   1849c:	a3 83       	std	Z+3, r26	; 0x03
   1849e:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   184a2:	02 c0       	rjmp	.+4      	; 0x184a8 <lif_write+0x9e>
   184a4:	c8 01       	movw	r24, r16
   184a6:	01 c0       	rjmp	.+2      	; 0x184aa <lif_write+0xa0>
   184a8:	ce 01       	movw	r24, r28
   184aa:	ad b7       	in	r26, 0x3d	; 61
   184ac:	be b7       	in	r27, 0x3e	; 62
   184ae:	1d 96       	adiw	r26, 0x0d	; 13
   184b0:	0f b6       	in	r0, 0x3f	; 63
   184b2:	f8 94       	cli
   184b4:	be bf       	out	0x3e, r27	; 62
   184b6:	0f be       	out	0x3f, r0	; 63
   184b8:	ad bf       	out	0x3d, r26	; 61
   184ba:	df 91       	pop	r29
   184bc:	cf 91       	pop	r28
   184be:	1f 91       	pop	r17
   184c0:	0f 91       	pop	r16
   184c2:	ff 90       	pop	r15
   184c4:	ef 90       	pop	r14
   184c6:	bf 90       	pop	r11
   184c8:	af 90       	pop	r10
   184ca:	9f 90       	pop	r9
   184cc:	8f 90       	pop	r8
   184ce:	08 95       	ret

000184d0 <lif_chars>:
   184d0:	80 32       	cpi	r24, 0x20	; 32
   184d2:	91 05       	cpc	r25, r1
   184d4:	e1 f0       	breq	.+56     	; 0x1850e <lif_chars+0x3e>
   184d6:	9c 01       	movw	r18, r24
   184d8:	21 56       	subi	r18, 0x61	; 97
   184da:	31 09       	sbc	r19, r1
   184dc:	2a 31       	cpi	r18, 0x1A	; 26
   184de:	31 05       	cpc	r19, r1
   184e0:	10 f4       	brcc	.+4      	; 0x184e6 <lif_chars+0x16>
   184e2:	80 97       	sbiw	r24, 0x20	; 32
   184e4:	08 95       	ret
   184e6:	9c 01       	movw	r18, r24
   184e8:	21 54       	subi	r18, 0x41	; 65
   184ea:	31 09       	sbc	r19, r1
   184ec:	2a 31       	cpi	r18, 0x1A	; 26
   184ee:	31 05       	cpc	r19, r1
   184f0:	c8 f0       	brcs	.+50     	; 0x18524 <lif_chars+0x54>
   184f2:	16 16       	cp	r1, r22
   184f4:	17 06       	cpc	r1, r23
   184f6:	74 f4       	brge	.+28     	; 0x18514 <lif_chars+0x44>
   184f8:	2f 5e       	subi	r18, 0xEF	; 239
   184fa:	3f 4f       	sbci	r19, 0xFF	; 255
   184fc:	2a 30       	cpi	r18, 0x0A	; 10
   184fe:	31 05       	cpc	r19, r1
   18500:	88 f0       	brcs	.+34     	; 0x18524 <lif_chars+0x54>
   18502:	8f 35       	cpi	r24, 0x5F	; 95
   18504:	91 05       	cpc	r25, r1
   18506:	49 f0       	breq	.+18     	; 0x1851a <lif_chars+0x4a>
   18508:	8d 97       	sbiw	r24, 0x2d	; 45
   1850a:	21 f4       	brne	.+8      	; 0x18514 <lif_chars+0x44>
   1850c:	09 c0       	rjmp	.+18     	; 0x18520 <lif_chars+0x50>
   1850e:	80 e2       	ldi	r24, 0x20	; 32
   18510:	90 e0       	ldi	r25, 0x00	; 0
   18512:	08 95       	ret
   18514:	80 e0       	ldi	r24, 0x00	; 0
   18516:	90 e0       	ldi	r25, 0x00	; 0
   18518:	08 95       	ret
   1851a:	8f e5       	ldi	r24, 0x5F	; 95
   1851c:	90 e0       	ldi	r25, 0x00	; 0
   1851e:	08 95       	ret
   18520:	8d e2       	ldi	r24, 0x2D	; 45
   18522:	90 e0       	ldi	r25, 0x00	; 0
   18524:	08 95       	ret

00018526 <lif_B2S>:
   18526:	a0 e0       	ldi	r26, 0x00	; 0
   18528:	b0 e0       	ldi	r27, 0x00	; 0
   1852a:	e9 e9       	ldi	r30, 0x99	; 153
   1852c:	f2 ec       	ldi	r31, 0xC2	; 194
   1852e:	0c 94 c1 e6 	jmp	0x1cd82	; 0x1cd82 <__prologue_saves__+0xc>
   18532:	5c 01       	movw	r10, r24
   18534:	6b 01       	movw	r12, r22
   18536:	ea 01       	movw	r28, r20
   18538:	4c 01       	movw	r8, r24
   1853a:	ee 24       	eor	r14, r14
   1853c:	e3 94       	inc	r14
   1853e:	f1 2c       	mov	r15, r1
   18540:	00 e0       	ldi	r16, 0x00	; 0
   18542:	10 e0       	ldi	r17, 0x00	; 0
   18544:	0c 17       	cp	r16, r28
   18546:	1d 07       	cpc	r17, r29
   18548:	6c f4       	brge	.+26     	; 0x18564 <lif_B2S+0x3e>
   1854a:	f4 01       	movw	r30, r8
   1854c:	81 91       	ld	r24, Z+
   1854e:	4f 01       	movw	r8, r30
   18550:	b8 01       	movw	r22, r16
   18552:	90 e0       	ldi	r25, 0x00	; 0
   18554:	bd df       	rcall	.-134    	; 0x184d0 <lif_chars>
   18556:	89 2b       	or	r24, r25
   18558:	11 f4       	brne	.+4      	; 0x1855e <lif_B2S+0x38>
   1855a:	e1 2c       	mov	r14, r1
   1855c:	f1 2c       	mov	r15, r1
   1855e:	0f 5f       	subi	r16, 0xFF	; 255
   18560:	1f 4f       	sbci	r17, 0xFF	; 255
   18562:	f0 cf       	rjmp	.-32     	; 0x18544 <lif_B2S+0x1e>
   18564:	d6 01       	movw	r26, r12
   18566:	f5 01       	movw	r30, r10
   18568:	cf 01       	movw	r24, r30
   1856a:	8a 19       	sub	r24, r10
   1856c:	9b 09       	sbc	r25, r11
   1856e:	8c 17       	cp	r24, r28
   18570:	9d 07       	cpc	r25, r29
   18572:	1c f4       	brge	.+6      	; 0x1857a <lif_B2S+0x54>
   18574:	81 91       	ld	r24, Z+
   18576:	8d 93       	st	X+, r24
   18578:	f7 cf       	rjmp	.-18     	; 0x18568 <lif_B2S+0x42>
   1857a:	d7 ff       	sbrs	r29, 7
   1857c:	02 c0       	rjmp	.+4      	; 0x18582 <lif_B2S+0x5c>
   1857e:	c0 e0       	ldi	r28, 0x00	; 0
   18580:	d0 e0       	ldi	r29, 0x00	; 0
   18582:	cc 0d       	add	r28, r12
   18584:	dd 1d       	adc	r29, r13
   18586:	18 82       	st	Y, r1
   18588:	c6 01       	movw	r24, r12
   1858a:	0e 94 0a 32 	call	0x6414	; 0x6414 <trim_tail>
   1858e:	c7 01       	movw	r24, r14
   18590:	cd b7       	in	r28, 0x3d	; 61
   18592:	de b7       	in	r29, 0x3e	; 62
   18594:	ec e0       	ldi	r30, 0x0C	; 12
   18596:	0c 94 dd e6 	jmp	0x1cdba	; 0x1cdba <__epilogue_restores__+0xc>

0001859a <lif_checkname>:
   1859a:	ef 92       	push	r14
   1859c:	ff 92       	push	r15
   1859e:	0f 93       	push	r16
   185a0:	1f 93       	push	r17
   185a2:	cf 93       	push	r28
   185a4:	df 93       	push	r29
   185a6:	7c 01       	movw	r14, r24
   185a8:	ec 01       	movw	r28, r24
   185aa:	01 e0       	ldi	r16, 0x01	; 1
   185ac:	10 e0       	ldi	r17, 0x00	; 0
   185ae:	be 01       	movw	r22, r28
   185b0:	6e 19       	sub	r22, r14
   185b2:	7f 09       	sbc	r23, r15
   185b4:	89 91       	ld	r24, Y+
   185b6:	88 23       	and	r24, r24
   185b8:	39 f0       	breq	.+14     	; 0x185c8 <lif_checkname+0x2e>
   185ba:	90 e0       	ldi	r25, 0x00	; 0
   185bc:	89 df       	rcall	.-238    	; 0x184d0 <lif_chars>
   185be:	89 2b       	or	r24, r25
   185c0:	b1 f7       	brne	.-20     	; 0x185ae <lif_checkname+0x14>
   185c2:	00 e0       	ldi	r16, 0x00	; 0
   185c4:	10 e0       	ldi	r17, 0x00	; 0
   185c6:	f3 cf       	rjmp	.-26     	; 0x185ae <lif_checkname+0x14>
   185c8:	c8 01       	movw	r24, r16
   185ca:	cd b7       	in	r28, 0x3d	; 61
   185cc:	de b7       	in	r29, 0x3e	; 62
   185ce:	e6 e0       	ldi	r30, 0x06	; 6
   185d0:	0c 94 e3 e6 	jmp	0x1cdc6	; 0x1cdc6 <__epilogue_restores__+0x18>

000185d4 <lif_S2B>:
   185d4:	fb 01       	movw	r30, r22
   185d6:	dc 01       	movw	r26, r24
   185d8:	20 e0       	ldi	r18, 0x00	; 0
   185da:	30 e0       	ldi	r19, 0x00	; 0
   185dc:	61 91       	ld	r22, Z+
   185de:	61 11       	cpse	r22, r1
   185e0:	05 c0       	rjmp	.+10     	; 0x185ec <lif_S2B+0x18>
   185e2:	fc 01       	movw	r30, r24
   185e4:	e2 0f       	add	r30, r18
   185e6:	f3 1f       	adc	r31, r19
   185e8:	60 e2       	ldi	r22, 0x20	; 32
   185ea:	08 c0       	rjmp	.+16     	; 0x185fc <lif_S2B+0x28>
   185ec:	24 17       	cp	r18, r20
   185ee:	35 07       	cpc	r19, r21
   185f0:	24 f4       	brge	.+8      	; 0x185fa <lif_S2B+0x26>
   185f2:	6d 93       	st	X+, r22
   185f4:	2f 5f       	subi	r18, 0xFF	; 255
   185f6:	3f 4f       	sbci	r19, 0xFF	; 255
   185f8:	f1 cf       	rjmp	.-30     	; 0x185dc <lif_S2B+0x8>
   185fa:	08 95       	ret
   185fc:	9f 01       	movw	r18, r30
   185fe:	28 1b       	sub	r18, r24
   18600:	39 0b       	sbc	r19, r25
   18602:	24 17       	cp	r18, r20
   18604:	35 07       	cpc	r19, r21
   18606:	14 f4       	brge	.+4      	; 0x1860c <lif_S2B+0x38>
   18608:	61 93       	st	Z+, r22
   1860a:	f8 cf       	rjmp	.-16     	; 0x185fc <lif_S2B+0x28>
   1860c:	08 95       	ret

0001860e <lif_fixname>:
   1860e:	a0 e0       	ldi	r26, 0x00	; 0
   18610:	b0 e0       	ldi	r27, 0x00	; 0
   18612:	ed e0       	ldi	r30, 0x0D	; 13
   18614:	f3 ec       	ldi	r31, 0xC3	; 195
   18616:	0c 94 c4 e6 	jmp	0x1cd88	; 0x1cd88 <__prologue_saves__+0x12>
   1861a:	8c 01       	movw	r16, r24
   1861c:	cb 01       	movw	r24, r22
   1861e:	7a 01       	movw	r14, r20
   18620:	0e 94 fb 76 	call	0xedf6	; 0xedf6 <basename>
   18624:	6c 01       	movw	r12, r24
   18626:	e8 01       	movw	r28, r16
   18628:	80 e2       	ldi	r24, 0x20	; 32
   1862a:	b8 2e       	mov	r11, r24
   1862c:	be 01       	movw	r22, r28
   1862e:	60 1b       	sub	r22, r16
   18630:	71 0b       	sbc	r23, r17
   18632:	f6 01       	movw	r30, r12
   18634:	81 91       	ld	r24, Z+
   18636:	6f 01       	movw	r12, r30
   18638:	81 11       	cpse	r24, r1
   1863a:	02 c0       	rjmp	.+4      	; 0x18640 <lif_fixname+0x32>
   1863c:	20 e2       	ldi	r18, 0x20	; 32
   1863e:	0e c0       	rjmp	.+28     	; 0x1865c <lif_fixname+0x4e>
   18640:	1e 14       	cp	r1, r14
   18642:	1f 04       	cpc	r1, r15
   18644:	dc f7       	brge	.-10     	; 0x1863c <lif_fixname+0x2e>
   18646:	8e 32       	cpi	r24, 0x2E	; 46
   18648:	c9 f3       	breq	.-14     	; 0x1863c <lif_fixname+0x2e>
   1864a:	90 e0       	ldi	r25, 0x00	; 0
   1864c:	41 df       	rcall	.-382    	; 0x184d0 <lif_chars>
   1864e:	88 23       	and	r24, r24
   18650:	11 f0       	breq	.+4      	; 0x18656 <lif_fixname+0x48>
   18652:	88 83       	st	Y, r24
   18654:	01 c0       	rjmp	.+2      	; 0x18658 <lif_fixname+0x4a>
   18656:	b8 82       	st	Y, r11
   18658:	21 96       	adiw	r28, 0x01	; 1
   1865a:	e8 cf       	rjmp	.-48     	; 0x1862c <lif_fixname+0x1e>
   1865c:	ce 01       	movw	r24, r28
   1865e:	80 1b       	sub	r24, r16
   18660:	91 0b       	sbc	r25, r17
   18662:	8e 15       	cp	r24, r14
   18664:	9f 05       	cpc	r25, r15
   18666:	14 f4       	brge	.+4      	; 0x1866c <lif_fixname+0x5e>
   18668:	29 93       	st	Y+, r18
   1866a:	f8 cf       	rjmp	.-16     	; 0x1865c <lif_fixname+0x4e>
   1866c:	18 82       	st	Y, r1
   1866e:	f8 01       	movw	r30, r16
   18670:	01 90       	ld	r0, Z+
   18672:	00 20       	and	r0, r0
   18674:	e9 f7       	brne	.-6      	; 0x18670 <lif_fixname+0x62>
   18676:	cf 01       	movw	r24, r30
   18678:	01 97       	sbiw	r24, 0x01	; 1
   1867a:	80 1b       	sub	r24, r16
   1867c:	91 0b       	sbc	r25, r17
   1867e:	cd b7       	in	r28, 0x3d	; 61
   18680:	de b7       	in	r29, 0x3e	; 62
   18682:	e9 e0       	ldi	r30, 0x09	; 9
   18684:	0c 94 e0 e6 	jmp	0x1cdc0	; 0x1cdc0 <__epilogue_restores__+0x12>

00018688 <lif_vol2str>:
   18688:	ef 92       	push	r14
   1868a:	ff 92       	push	r15
   1868c:	0f 93       	push	r16
   1868e:	1f 93       	push	r17
   18690:	cf 93       	push	r28
   18692:	df 93       	push	r29
   18694:	7c 01       	movw	r14, r24
   18696:	eb 01       	movw	r28, r22
   18698:	fc 01       	movw	r30, r24
   1869a:	04 a1       	ldd	r16, Z+36	; 0x24
   1869c:	15 a1       	ldd	r17, Z+37	; 0x25
   1869e:	20 e0       	ldi	r18, 0x00	; 0
   186a0:	30 e0       	ldi	r19, 0x00	; 0
   186a2:	42 e0       	ldi	r20, 0x02	; 2
   186a4:	50 e0       	ldi	r21, 0x00	; 0
   186a6:	60 e0       	ldi	r22, 0x00	; 0
   186a8:	70 e0       	ldi	r23, 0x00	; 0
   186aa:	ce 01       	movw	r24, r28
   186ac:	e4 dc       	rcall	.-1592   	; 0x18076 <V2B_MSB>
   186ae:	b7 01       	movw	r22, r14
   186b0:	6a 5d       	subi	r22, 0xDA	; 218
   186b2:	7f 4f       	sbci	r23, 0xFF	; 255
   186b4:	46 e0       	ldi	r20, 0x06	; 6
   186b6:	50 e0       	ldi	r21, 0x00	; 0
   186b8:	ce 01       	movw	r24, r28
   186ba:	02 96       	adiw	r24, 0x02	; 2
   186bc:	8b df       	rcall	.-234    	; 0x185d4 <lif_S2B>
   186be:	f7 01       	movw	r30, r14
   186c0:	05 a5       	ldd	r16, Z+45	; 0x2d
   186c2:	16 a5       	ldd	r17, Z+46	; 0x2e
   186c4:	27 a5       	ldd	r18, Z+47	; 0x2f
   186c6:	30 a9       	ldd	r19, Z+48	; 0x30
   186c8:	44 e0       	ldi	r20, 0x04	; 4
   186ca:	50 e0       	ldi	r21, 0x00	; 0
   186cc:	68 e0       	ldi	r22, 0x08	; 8
   186ce:	70 e0       	ldi	r23, 0x00	; 0
   186d0:	ce 01       	movw	r24, r28
   186d2:	d1 dc       	rcall	.-1630   	; 0x18076 <V2B_MSB>
   186d4:	f7 01       	movw	r30, r14
   186d6:	01 a9       	ldd	r16, Z+49	; 0x31
   186d8:	12 a9       	ldd	r17, Z+50	; 0x32
   186da:	20 e0       	ldi	r18, 0x00	; 0
   186dc:	30 e0       	ldi	r19, 0x00	; 0
   186de:	42 e0       	ldi	r20, 0x02	; 2
   186e0:	50 e0       	ldi	r21, 0x00	; 0
   186e2:	6c e0       	ldi	r22, 0x0C	; 12
   186e4:	70 e0       	ldi	r23, 0x00	; 0
   186e6:	ce 01       	movw	r24, r28
   186e8:	c6 dc       	rcall	.-1652   	; 0x18076 <V2B_MSB>
   186ea:	00 e0       	ldi	r16, 0x00	; 0
   186ec:	10 e0       	ldi	r17, 0x00	; 0
   186ee:	98 01       	movw	r18, r16
   186f0:	42 e0       	ldi	r20, 0x02	; 2
   186f2:	50 e0       	ldi	r21, 0x00	; 0
   186f4:	6e e0       	ldi	r22, 0x0E	; 14
   186f6:	70 e0       	ldi	r23, 0x00	; 0
   186f8:	ce 01       	movw	r24, r28
   186fa:	bd dc       	rcall	.-1670   	; 0x18076 <V2B_MSB>
   186fc:	f7 01       	movw	r30, r14
   186fe:	05 a9       	ldd	r16, Z+53	; 0x35
   18700:	16 a9       	ldd	r17, Z+54	; 0x36
   18702:	27 a9       	ldd	r18, Z+55	; 0x37
   18704:	30 ad       	ldd	r19, Z+56	; 0x38
   18706:	44 e0       	ldi	r20, 0x04	; 4
   18708:	50 e0       	ldi	r21, 0x00	; 0
   1870a:	60 e1       	ldi	r22, 0x10	; 16
   1870c:	70 e0       	ldi	r23, 0x00	; 0
   1870e:	ce 01       	movw	r24, r28
   18710:	b2 dc       	rcall	.-1692   	; 0x18076 <V2B_MSB>
   18712:	f7 01       	movw	r30, r14
   18714:	01 ad       	ldd	r16, Z+57	; 0x39
   18716:	12 ad       	ldd	r17, Z+58	; 0x3a
   18718:	20 e0       	ldi	r18, 0x00	; 0
   1871a:	30 e0       	ldi	r19, 0x00	; 0
   1871c:	42 e0       	ldi	r20, 0x02	; 2
   1871e:	50 e0       	ldi	r21, 0x00	; 0
   18720:	64 e1       	ldi	r22, 0x14	; 20
   18722:	70 e0       	ldi	r23, 0x00	; 0
   18724:	ce 01       	movw	r24, r28
   18726:	a7 dc       	rcall	.-1714   	; 0x18076 <V2B_MSB>
   18728:	00 e0       	ldi	r16, 0x00	; 0
   1872a:	10 e0       	ldi	r17, 0x00	; 0
   1872c:	98 01       	movw	r18, r16
   1872e:	42 e0       	ldi	r20, 0x02	; 2
   18730:	50 e0       	ldi	r21, 0x00	; 0
   18732:	66 e1       	ldi	r22, 0x16	; 22
   18734:	70 e0       	ldi	r23, 0x00	; 0
   18736:	ce 01       	movw	r24, r28
   18738:	9e dc       	rcall	.-1732   	; 0x18076 <V2B_MSB>
   1873a:	f7 01       	movw	r30, r14
   1873c:	fd 96       	adiw	r30, 0x3d	; 61
   1873e:	00 81       	ld	r16, Z
   18740:	11 81       	ldd	r17, Z+1	; 0x01
   18742:	22 81       	ldd	r18, Z+2	; 0x02
   18744:	33 81       	ldd	r19, Z+3	; 0x03
   18746:	44 e0       	ldi	r20, 0x04	; 4
   18748:	50 e0       	ldi	r21, 0x00	; 0
   1874a:	68 e1       	ldi	r22, 0x18	; 24
   1874c:	70 e0       	ldi	r23, 0x00	; 0
   1874e:	ce 01       	movw	r24, r28
   18750:	92 dc       	rcall	.-1756   	; 0x18076 <V2B_MSB>
   18752:	f7 01       	movw	r30, r14
   18754:	ef 5b       	subi	r30, 0xBF	; 191
   18756:	ff 4f       	sbci	r31, 0xFF	; 255
   18758:	00 81       	ld	r16, Z
   1875a:	11 81       	ldd	r17, Z+1	; 0x01
   1875c:	22 81       	ldd	r18, Z+2	; 0x02
   1875e:	33 81       	ldd	r19, Z+3	; 0x03
   18760:	44 e0       	ldi	r20, 0x04	; 4
   18762:	50 e0       	ldi	r21, 0x00	; 0
   18764:	6c e1       	ldi	r22, 0x1C	; 28
   18766:	70 e0       	ldi	r23, 0x00	; 0
   18768:	ce 01       	movw	r24, r28
   1876a:	85 dc       	rcall	.-1782   	; 0x18076 <V2B_MSB>
   1876c:	f7 01       	movw	r30, r14
   1876e:	eb 5b       	subi	r30, 0xBB	; 187
   18770:	ff 4f       	sbci	r31, 0xFF	; 255
   18772:	00 81       	ld	r16, Z
   18774:	11 81       	ldd	r17, Z+1	; 0x01
   18776:	22 81       	ldd	r18, Z+2	; 0x02
   18778:	33 81       	ldd	r19, Z+3	; 0x03
   1877a:	44 e0       	ldi	r20, 0x04	; 4
   1877c:	50 e0       	ldi	r21, 0x00	; 0
   1877e:	60 e2       	ldi	r22, 0x20	; 32
   18780:	70 e0       	ldi	r23, 0x00	; 0
   18782:	ce 01       	movw	r24, r28
   18784:	78 dc       	rcall	.-1808   	; 0x18076 <V2B_MSB>
   18786:	de 01       	movw	r26, r28
   18788:	94 96       	adiw	r26, 0x24	; 36
   1878a:	f7 01       	movw	r30, r14
   1878c:	e7 5b       	subi	r30, 0xB7	; 183
   1878e:	ff 4f       	sbci	r31, 0xFF	; 255
   18790:	86 e0       	ldi	r24, 0x06	; 6
   18792:	01 90       	ld	r0, Z+
   18794:	0d 92       	st	X+, r0
   18796:	8a 95       	dec	r24
   18798:	e1 f7       	brne	.-8      	; 0x18792 <lif_vol2str+0x10a>
   1879a:	cd b7       	in	r28, 0x3d	; 61
   1879c:	de b7       	in	r29, 0x3e	; 62
   1879e:	e6 e0       	ldi	r30, 0x06	; 6
   187a0:	0c 94 e3 e6 	jmp	0x1cdc6	; 0x1cdc6 <__epilogue_restores__+0x18>

000187a4 <lif_str2vol>:
   187a4:	0f 93       	push	r16
   187a6:	1f 93       	push	r17
   187a8:	cf 93       	push	r28
   187aa:	df 93       	push	r29
   187ac:	8c 01       	movw	r16, r24
   187ae:	eb 01       	movw	r28, r22
   187b0:	42 e0       	ldi	r20, 0x02	; 2
   187b2:	50 e0       	ldi	r21, 0x00	; 0
   187b4:	60 e0       	ldi	r22, 0x00	; 0
   187b6:	70 e0       	ldi	r23, 0x00	; 0
   187b8:	87 dc       	rcall	.-1778   	; 0x180c8 <B2V_MSB>
   187ba:	7d a3       	std	Y+37, r23	; 0x25
   187bc:	6c a3       	std	Y+36, r22	; 0x24
   187be:	be 01       	movw	r22, r28
   187c0:	6a 5d       	subi	r22, 0xDA	; 218
   187c2:	7f 4f       	sbci	r23, 0xFF	; 255
   187c4:	46 e0       	ldi	r20, 0x06	; 6
   187c6:	50 e0       	ldi	r21, 0x00	; 0
   187c8:	c8 01       	movw	r24, r16
   187ca:	02 96       	adiw	r24, 0x02	; 2
   187cc:	ac de       	rcall	.-680    	; 0x18526 <lif_B2S>
   187ce:	44 e0       	ldi	r20, 0x04	; 4
   187d0:	50 e0       	ldi	r21, 0x00	; 0
   187d2:	68 e0       	ldi	r22, 0x08	; 8
   187d4:	70 e0       	ldi	r23, 0x00	; 0
   187d6:	c8 01       	movw	r24, r16
   187d8:	77 dc       	rcall	.-1810   	; 0x180c8 <B2V_MSB>
   187da:	6d a7       	std	Y+45, r22	; 0x2d
   187dc:	7e a7       	std	Y+46, r23	; 0x2e
   187de:	8f a7       	std	Y+47, r24	; 0x2f
   187e0:	98 ab       	std	Y+48, r25	; 0x30
   187e2:	42 e0       	ldi	r20, 0x02	; 2
   187e4:	50 e0       	ldi	r21, 0x00	; 0
   187e6:	6c e0       	ldi	r22, 0x0C	; 12
   187e8:	70 e0       	ldi	r23, 0x00	; 0
   187ea:	c8 01       	movw	r24, r16
   187ec:	6d dc       	rcall	.-1830   	; 0x180c8 <B2V_MSB>
   187ee:	7a ab       	std	Y+50, r23	; 0x32
   187f0:	69 ab       	std	Y+49, r22	; 0x31
   187f2:	42 e0       	ldi	r20, 0x02	; 2
   187f4:	50 e0       	ldi	r21, 0x00	; 0
   187f6:	6e e0       	ldi	r22, 0x0E	; 14
   187f8:	70 e0       	ldi	r23, 0x00	; 0
   187fa:	c8 01       	movw	r24, r16
   187fc:	65 dc       	rcall	.-1846   	; 0x180c8 <B2V_MSB>
   187fe:	7c ab       	std	Y+52, r23	; 0x34
   18800:	6b ab       	std	Y+51, r22	; 0x33
   18802:	44 e0       	ldi	r20, 0x04	; 4
   18804:	50 e0       	ldi	r21, 0x00	; 0
   18806:	60 e1       	ldi	r22, 0x10	; 16
   18808:	70 e0       	ldi	r23, 0x00	; 0
   1880a:	c8 01       	movw	r24, r16
   1880c:	5d dc       	rcall	.-1862   	; 0x180c8 <B2V_MSB>
   1880e:	6d ab       	std	Y+53, r22	; 0x35
   18810:	7e ab       	std	Y+54, r23	; 0x36
   18812:	8f ab       	std	Y+55, r24	; 0x37
   18814:	98 af       	std	Y+56, r25	; 0x38
   18816:	42 e0       	ldi	r20, 0x02	; 2
   18818:	50 e0       	ldi	r21, 0x00	; 0
   1881a:	64 e1       	ldi	r22, 0x14	; 20
   1881c:	70 e0       	ldi	r23, 0x00	; 0
   1881e:	c8 01       	movw	r24, r16
   18820:	53 dc       	rcall	.-1882   	; 0x180c8 <B2V_MSB>
   18822:	7a af       	std	Y+58, r23	; 0x3a
   18824:	69 af       	std	Y+57, r22	; 0x39
   18826:	42 e0       	ldi	r20, 0x02	; 2
   18828:	50 e0       	ldi	r21, 0x00	; 0
   1882a:	66 e1       	ldi	r22, 0x16	; 22
   1882c:	70 e0       	ldi	r23, 0x00	; 0
   1882e:	c8 01       	movw	r24, r16
   18830:	4b dc       	rcall	.-1898   	; 0x180c8 <B2V_MSB>
   18832:	7c af       	std	Y+60, r23	; 0x3c
   18834:	6b af       	std	Y+59, r22	; 0x3b
   18836:	44 e0       	ldi	r20, 0x04	; 4
   18838:	50 e0       	ldi	r21, 0x00	; 0
   1883a:	68 e1       	ldi	r22, 0x18	; 24
   1883c:	70 e0       	ldi	r23, 0x00	; 0
   1883e:	c8 01       	movw	r24, r16
   18840:	43 dc       	rcall	.-1914   	; 0x180c8 <B2V_MSB>
   18842:	fe 01       	movw	r30, r28
   18844:	fd 96       	adiw	r30, 0x3d	; 61
   18846:	60 83       	st	Z, r22
   18848:	71 83       	std	Z+1, r23	; 0x01
   1884a:	82 83       	std	Z+2, r24	; 0x02
   1884c:	93 83       	std	Z+3, r25	; 0x03
   1884e:	44 e0       	ldi	r20, 0x04	; 4
   18850:	50 e0       	ldi	r21, 0x00	; 0
   18852:	6c e1       	ldi	r22, 0x1C	; 28
   18854:	70 e0       	ldi	r23, 0x00	; 0
   18856:	c8 01       	movw	r24, r16
   18858:	37 dc       	rcall	.-1938   	; 0x180c8 <B2V_MSB>
   1885a:	fe 01       	movw	r30, r28
   1885c:	ef 5b       	subi	r30, 0xBF	; 191
   1885e:	ff 4f       	sbci	r31, 0xFF	; 255
   18860:	60 83       	st	Z, r22
   18862:	71 83       	std	Z+1, r23	; 0x01
   18864:	82 83       	std	Z+2, r24	; 0x02
   18866:	93 83       	std	Z+3, r25	; 0x03
   18868:	44 e0       	ldi	r20, 0x04	; 4
   1886a:	50 e0       	ldi	r21, 0x00	; 0
   1886c:	60 e2       	ldi	r22, 0x20	; 32
   1886e:	70 e0       	ldi	r23, 0x00	; 0
   18870:	c8 01       	movw	r24, r16
   18872:	2a dc       	rcall	.-1964   	; 0x180c8 <B2V_MSB>
   18874:	fe 01       	movw	r30, r28
   18876:	eb 5b       	subi	r30, 0xBB	; 187
   18878:	ff 4f       	sbci	r31, 0xFF	; 255
   1887a:	60 83       	st	Z, r22
   1887c:	71 83       	std	Z+1, r23	; 0x01
   1887e:	82 83       	std	Z+2, r24	; 0x02
   18880:	93 83       	std	Z+3, r25	; 0x03
   18882:	de 01       	movw	r26, r28
   18884:	a7 5b       	subi	r26, 0xB7	; 183
   18886:	bf 4f       	sbci	r27, 0xFF	; 255
   18888:	f8 01       	movw	r30, r16
   1888a:	b4 96       	adiw	r30, 0x24	; 36
   1888c:	86 e0       	ldi	r24, 0x06	; 6
   1888e:	01 90       	ld	r0, Z+
   18890:	0d 92       	st	X+, r0
   18892:	8a 95       	dec	r24
   18894:	e1 f7       	brne	.-8      	; 0x1888e <lif_str2vol+0xea>
   18896:	df 91       	pop	r29
   18898:	cf 91       	pop	r28
   1889a:	1f 91       	pop	r17
   1889c:	0f 91       	pop	r16
   1889e:	08 95       	ret

000188a0 <lif_dir2str>:
   188a0:	ef 92       	push	r14
   188a2:	ff 92       	push	r15
   188a4:	0f 93       	push	r16
   188a6:	1f 93       	push	r17
   188a8:	cf 93       	push	r28
   188aa:	df 93       	push	r29
   188ac:	ec 01       	movw	r28, r24
   188ae:	7b 01       	movw	r14, r22
   188b0:	bc 01       	movw	r22, r24
   188b2:	61 5b       	subi	r22, 0xB1	; 177
   188b4:	7f 4f       	sbci	r23, 0xFF	; 255
   188b6:	4a e0       	ldi	r20, 0x0A	; 10
   188b8:	50 e0       	ldi	r21, 0x00	; 0
   188ba:	c7 01       	movw	r24, r14
   188bc:	8b de       	rcall	.-746    	; 0x185d4 <lif_S2B>
   188be:	fe 01       	movw	r30, r28
   188c0:	e6 5a       	subi	r30, 0xA6	; 166
   188c2:	ff 4f       	sbci	r31, 0xFF	; 255
   188c4:	00 81       	ld	r16, Z
   188c6:	11 81       	ldd	r17, Z+1	; 0x01
   188c8:	20 e0       	ldi	r18, 0x00	; 0
   188ca:	30 e0       	ldi	r19, 0x00	; 0
   188cc:	42 e0       	ldi	r20, 0x02	; 2
   188ce:	50 e0       	ldi	r21, 0x00	; 0
   188d0:	6a e0       	ldi	r22, 0x0A	; 10
   188d2:	70 e0       	ldi	r23, 0x00	; 0
   188d4:	c7 01       	movw	r24, r14
   188d6:	cf db       	rcall	.-2146   	; 0x18076 <V2B_MSB>
   188d8:	fe 01       	movw	r30, r28
   188da:	e4 5a       	subi	r30, 0xA4	; 164
   188dc:	ff 4f       	sbci	r31, 0xFF	; 255
   188de:	00 81       	ld	r16, Z
   188e0:	11 81       	ldd	r17, Z+1	; 0x01
   188e2:	22 81       	ldd	r18, Z+2	; 0x02
   188e4:	33 81       	ldd	r19, Z+3	; 0x03
   188e6:	44 e0       	ldi	r20, 0x04	; 4
   188e8:	50 e0       	ldi	r21, 0x00	; 0
   188ea:	6c e0       	ldi	r22, 0x0C	; 12
   188ec:	70 e0       	ldi	r23, 0x00	; 0
   188ee:	c7 01       	movw	r24, r14
   188f0:	c2 db       	rcall	.-2172   	; 0x18076 <V2B_MSB>
   188f2:	fe 01       	movw	r30, r28
   188f4:	e0 5a       	subi	r30, 0xA0	; 160
   188f6:	ff 4f       	sbci	r31, 0xFF	; 255
   188f8:	00 81       	ld	r16, Z
   188fa:	11 81       	ldd	r17, Z+1	; 0x01
   188fc:	22 81       	ldd	r18, Z+2	; 0x02
   188fe:	33 81       	ldd	r19, Z+3	; 0x03
   18900:	44 e0       	ldi	r20, 0x04	; 4
   18902:	50 e0       	ldi	r21, 0x00	; 0
   18904:	60 e1       	ldi	r22, 0x10	; 16
   18906:	70 e0       	ldi	r23, 0x00	; 0
   18908:	c7 01       	movw	r24, r14
   1890a:	b5 db       	rcall	.-2198   	; 0x18076 <V2B_MSB>
   1890c:	d7 01       	movw	r26, r14
   1890e:	54 96       	adiw	r26, 0x14	; 20
   18910:	fe 01       	movw	r30, r28
   18912:	ec 59       	subi	r30, 0x9C	; 156
   18914:	ff 4f       	sbci	r31, 0xFF	; 255
   18916:	86 e0       	ldi	r24, 0x06	; 6
   18918:	01 90       	ld	r0, Z+
   1891a:	0d 92       	st	X+, r0
   1891c:	8a 95       	dec	r24
   1891e:	e1 f7       	brne	.-8      	; 0x18918 <lif_dir2str+0x78>
   18920:	fe 01       	movw	r30, r28
   18922:	e6 59       	subi	r30, 0x96	; 150
   18924:	ff 4f       	sbci	r31, 0xFF	; 255
   18926:	00 81       	ld	r16, Z
   18928:	11 81       	ldd	r17, Z+1	; 0x01
   1892a:	20 e0       	ldi	r18, 0x00	; 0
   1892c:	30 e0       	ldi	r19, 0x00	; 0
   1892e:	42 e0       	ldi	r20, 0x02	; 2
   18930:	50 e0       	ldi	r21, 0x00	; 0
   18932:	6a e1       	ldi	r22, 0x1A	; 26
   18934:	70 e0       	ldi	r23, 0x00	; 0
   18936:	c7 01       	movw	r24, r14
   18938:	9e db       	rcall	.-2244   	; 0x18076 <V2B_MSB>
   1893a:	fe 01       	movw	r30, r28
   1893c:	e4 59       	subi	r30, 0x94	; 148
   1893e:	ff 4f       	sbci	r31, 0xFF	; 255
   18940:	00 81       	ld	r16, Z
   18942:	11 81       	ldd	r17, Z+1	; 0x01
   18944:	20 e0       	ldi	r18, 0x00	; 0
   18946:	30 e0       	ldi	r19, 0x00	; 0
   18948:	42 e0       	ldi	r20, 0x02	; 2
   1894a:	50 e0       	ldi	r21, 0x00	; 0
   1894c:	6c e1       	ldi	r22, 0x1C	; 28
   1894e:	70 e0       	ldi	r23, 0x00	; 0
   18950:	c7 01       	movw	r24, r14
   18952:	a5 db       	rcall	.-2230   	; 0x1809e <V2B_LSB>
   18954:	c2 59       	subi	r28, 0x92	; 146
   18956:	df 4f       	sbci	r29, 0xFF	; 255
   18958:	08 81       	ld	r16, Y
   1895a:	19 81       	ldd	r17, Y+1	; 0x01
   1895c:	20 e0       	ldi	r18, 0x00	; 0
   1895e:	30 e0       	ldi	r19, 0x00	; 0
   18960:	42 e0       	ldi	r20, 0x02	; 2
   18962:	50 e0       	ldi	r21, 0x00	; 0
   18964:	6e e1       	ldi	r22, 0x1E	; 30
   18966:	70 e0       	ldi	r23, 0x00	; 0
   18968:	c7 01       	movw	r24, r14
   1896a:	99 db       	rcall	.-2254   	; 0x1809e <V2B_LSB>
   1896c:	cd b7       	in	r28, 0x3d	; 61
   1896e:	de b7       	in	r29, 0x3e	; 62
   18970:	e6 e0       	ldi	r30, 0x06	; 6
   18972:	0c 94 e3 e6 	jmp	0x1cdc6	; 0x1cdc6 <__epilogue_restores__+0x18>

00018976 <lif_str2dir>:
   18976:	0f 93       	push	r16
   18978:	1f 93       	push	r17
   1897a:	cf 93       	push	r28
   1897c:	df 93       	push	r29
   1897e:	8c 01       	movw	r16, r24
   18980:	eb 01       	movw	r28, r22
   18982:	61 5b       	subi	r22, 0xB1	; 177
   18984:	7f 4f       	sbci	r23, 0xFF	; 255
   18986:	4a e0       	ldi	r20, 0x0A	; 10
   18988:	50 e0       	ldi	r21, 0x00	; 0
   1898a:	cd dd       	rcall	.-1126   	; 0x18526 <lif_B2S>
   1898c:	42 e0       	ldi	r20, 0x02	; 2
   1898e:	50 e0       	ldi	r21, 0x00	; 0
   18990:	6a e0       	ldi	r22, 0x0A	; 10
   18992:	70 e0       	ldi	r23, 0x00	; 0
   18994:	c8 01       	movw	r24, r16
   18996:	98 db       	rcall	.-2256   	; 0x180c8 <B2V_MSB>
   18998:	fe 01       	movw	r30, r28
   1899a:	e6 5a       	subi	r30, 0xA6	; 166
   1899c:	ff 4f       	sbci	r31, 0xFF	; 255
   1899e:	71 83       	std	Z+1, r23	; 0x01
   189a0:	60 83       	st	Z, r22
   189a2:	44 e0       	ldi	r20, 0x04	; 4
   189a4:	50 e0       	ldi	r21, 0x00	; 0
   189a6:	6c e0       	ldi	r22, 0x0C	; 12
   189a8:	70 e0       	ldi	r23, 0x00	; 0
   189aa:	c8 01       	movw	r24, r16
   189ac:	8d db       	rcall	.-2278   	; 0x180c8 <B2V_MSB>
   189ae:	fe 01       	movw	r30, r28
   189b0:	e4 5a       	subi	r30, 0xA4	; 164
   189b2:	ff 4f       	sbci	r31, 0xFF	; 255
   189b4:	60 83       	st	Z, r22
   189b6:	71 83       	std	Z+1, r23	; 0x01
   189b8:	82 83       	std	Z+2, r24	; 0x02
   189ba:	93 83       	std	Z+3, r25	; 0x03
   189bc:	44 e0       	ldi	r20, 0x04	; 4
   189be:	50 e0       	ldi	r21, 0x00	; 0
   189c0:	60 e1       	ldi	r22, 0x10	; 16
   189c2:	70 e0       	ldi	r23, 0x00	; 0
   189c4:	c8 01       	movw	r24, r16
   189c6:	80 db       	rcall	.-2304   	; 0x180c8 <B2V_MSB>
   189c8:	fe 01       	movw	r30, r28
   189ca:	e0 5a       	subi	r30, 0xA0	; 160
   189cc:	ff 4f       	sbci	r31, 0xFF	; 255
   189ce:	60 83       	st	Z, r22
   189d0:	71 83       	std	Z+1, r23	; 0x01
   189d2:	82 83       	std	Z+2, r24	; 0x02
   189d4:	93 83       	std	Z+3, r25	; 0x03
   189d6:	de 01       	movw	r26, r28
   189d8:	ac 59       	subi	r26, 0x9C	; 156
   189da:	bf 4f       	sbci	r27, 0xFF	; 255
   189dc:	f8 01       	movw	r30, r16
   189de:	74 96       	adiw	r30, 0x14	; 20
   189e0:	86 e0       	ldi	r24, 0x06	; 6
   189e2:	01 90       	ld	r0, Z+
   189e4:	0d 92       	st	X+, r0
   189e6:	8a 95       	dec	r24
   189e8:	e1 f7       	brne	.-8      	; 0x189e2 <lif_str2dir+0x6c>
   189ea:	42 e0       	ldi	r20, 0x02	; 2
   189ec:	50 e0       	ldi	r21, 0x00	; 0
   189ee:	6a e1       	ldi	r22, 0x1A	; 26
   189f0:	70 e0       	ldi	r23, 0x00	; 0
   189f2:	c8 01       	movw	r24, r16
   189f4:	69 db       	rcall	.-2350   	; 0x180c8 <B2V_MSB>
   189f6:	fe 01       	movw	r30, r28
   189f8:	e6 59       	subi	r30, 0x96	; 150
   189fa:	ff 4f       	sbci	r31, 0xFF	; 255
   189fc:	71 83       	std	Z+1, r23	; 0x01
   189fe:	60 83       	st	Z, r22
   18a00:	42 e0       	ldi	r20, 0x02	; 2
   18a02:	50 e0       	ldi	r21, 0x00	; 0
   18a04:	6c e1       	ldi	r22, 0x1C	; 28
   18a06:	70 e0       	ldi	r23, 0x00	; 0
   18a08:	c8 01       	movw	r24, r16
   18a0a:	7d db       	rcall	.-2310   	; 0x18106 <B2V_LSB>
   18a0c:	fe 01       	movw	r30, r28
   18a0e:	e4 59       	subi	r30, 0x94	; 148
   18a10:	ff 4f       	sbci	r31, 0xFF	; 255
   18a12:	71 83       	std	Z+1, r23	; 0x01
   18a14:	60 83       	st	Z, r22
   18a16:	42 e0       	ldi	r20, 0x02	; 2
   18a18:	50 e0       	ldi	r21, 0x00	; 0
   18a1a:	6e e1       	ldi	r22, 0x1E	; 30
   18a1c:	70 e0       	ldi	r23, 0x00	; 0
   18a1e:	c8 01       	movw	r24, r16
   18a20:	72 db       	rcall	.-2332   	; 0x18106 <B2V_LSB>
   18a22:	c2 59       	subi	r28, 0x92	; 146
   18a24:	df 4f       	sbci	r29, 0xFF	; 255
   18a26:	79 83       	std	Y+1, r23	; 0x01
   18a28:	68 83       	st	Y, r22
   18a2a:	df 91       	pop	r29
   18a2c:	cf 91       	pop	r28
   18a2e:	1f 91       	pop	r17
   18a30:	0f 91       	pop	r16
   18a32:	08 95       	ret

00018a34 <lif_BIN2BCD>:
   18a34:	6a e0       	ldi	r22, 0x0A	; 10
   18a36:	0e 94 1b e6 	call	0x1cc36	; 0x1cc36 <__udivmodqi4>
   18a3a:	82 95       	swap	r24
   18a3c:	80 7f       	andi	r24, 0xF0	; 240
   18a3e:	89 2b       	or	r24, r25
   18a40:	08 95       	ret

00018a42 <lif_BCD2BIN>:
   18a42:	28 2f       	mov	r18, r24
   18a44:	22 95       	swap	r18
   18a46:	2f 70       	andi	r18, 0x0F	; 15
   18a48:	8f 70       	andi	r24, 0x0F	; 15
   18a4a:	90 e0       	ldi	r25, 0x00	; 0
   18a4c:	3a e0       	ldi	r19, 0x0A	; 10
   18a4e:	23 9f       	mul	r18, r19
   18a50:	80 0d       	add	r24, r0
   18a52:	91 1d       	adc	r25, r1
   18a54:	11 24       	eor	r1, r1
   18a56:	08 95       	ret

00018a58 <lif_time2lifbcd>:
   18a58:	aa e1       	ldi	r26, 0x1A	; 26
   18a5a:	b0 e0       	ldi	r27, 0x00	; 0
   18a5c:	e2 e3       	ldi	r30, 0x32	; 50
   18a5e:	f5 ec       	ldi	r31, 0xC5	; 197
   18a60:	0c 94 c9 e6 	jmp	0x1cd92	; 0x1cd92 <__prologue_saves__+0x1c>
   18a64:	8b 01       	movw	r16, r22
   18a66:	9c 01       	movw	r18, r24
   18a68:	6f 8b       	std	Y+23, r22	; 0x17
   18a6a:	78 8f       	std	Y+24, r23	; 0x18
   18a6c:	89 8f       	std	Y+25, r24	; 0x19
   18a6e:	9a 8f       	std	Y+26, r25	; 0x1a
   18a70:	67 2b       	or	r22, r23
   18a72:	68 2b       	or	r22, r24
   18a74:	69 2b       	or	r22, r25
   18a76:	41 f4       	brne	.+16     	; 0x18a88 <lif_time2lifbcd+0x30>
   18a78:	fa 01       	movw	r30, r20
   18a7a:	ca 01       	movw	r24, r20
   18a7c:	06 96       	adiw	r24, 0x06	; 6
   18a7e:	11 92       	st	Z+, r1
   18a80:	e8 17       	cp	r30, r24
   18a82:	f9 07       	cpc	r31, r25
   18a84:	e1 f7       	brne	.-8      	; 0x18a7e <lif_time2lifbcd+0x26>
   18a86:	26 c0       	rjmp	.+76     	; 0x18ad4 <lif_time2lifbcd+0x7c>
   18a88:	8a 01       	movw	r16, r20
   18a8a:	be 01       	movw	r22, r28
   18a8c:	6f 5f       	subi	r22, 0xFF	; 255
   18a8e:	7f 4f       	sbci	r23, 0xFF	; 255
   18a90:	ce 01       	movw	r24, r28
   18a92:	47 96       	adiw	r24, 0x17	; 23
   18a94:	0e 94 7e 37 	call	0x6efc	; 0x6efc <gmtime_r>
   18a98:	8b 85       	ldd	r24, Y+11	; 0x0b
   18a9a:	9c 85       	ldd	r25, Y+12	; 0x0c
   18a9c:	64 e6       	ldi	r22, 0x64	; 100
   18a9e:	70 e0       	ldi	r23, 0x00	; 0
   18aa0:	0e 94 3b e6 	call	0x1cc76	; 0x1cc76 <__divmodhi4>
   18aa4:	c7 df       	rcall	.-114    	; 0x18a34 <lif_BIN2BCD>
   18aa6:	f8 01       	movw	r30, r16
   18aa8:	80 83       	st	Z, r24
   18aaa:	89 85       	ldd	r24, Y+9	; 0x09
   18aac:	8f 5f       	subi	r24, 0xFF	; 255
   18aae:	c2 df       	rcall	.-124    	; 0x18a34 <lif_BIN2BCD>
   18ab0:	f8 01       	movw	r30, r16
   18ab2:	81 83       	std	Z+1, r24	; 0x01
   18ab4:	8f 81       	ldd	r24, Y+7	; 0x07
   18ab6:	be df       	rcall	.-132    	; 0x18a34 <lif_BIN2BCD>
   18ab8:	f8 01       	movw	r30, r16
   18aba:	82 83       	std	Z+2, r24	; 0x02
   18abc:	8d 81       	ldd	r24, Y+5	; 0x05
   18abe:	ba df       	rcall	.-140    	; 0x18a34 <lif_BIN2BCD>
   18ac0:	f8 01       	movw	r30, r16
   18ac2:	83 83       	std	Z+3, r24	; 0x03
   18ac4:	8b 81       	ldd	r24, Y+3	; 0x03
   18ac6:	b6 df       	rcall	.-148    	; 0x18a34 <lif_BIN2BCD>
   18ac8:	f8 01       	movw	r30, r16
   18aca:	84 83       	std	Z+4, r24	; 0x04
   18acc:	89 81       	ldd	r24, Y+1	; 0x01
   18ace:	b2 df       	rcall	.-156    	; 0x18a34 <lif_BIN2BCD>
   18ad0:	f8 01       	movw	r30, r16
   18ad2:	85 83       	std	Z+5, r24	; 0x05
   18ad4:	6a 96       	adiw	r28, 0x1a	; 26
   18ad6:	e4 e0       	ldi	r30, 0x04	; 4
   18ad8:	0c 94 e5 e6 	jmp	0x1cdca	; 0x1cdca <__epilogue_restores__+0x1c>

00018adc <lif_lifbcd2time>:
   18adc:	a6 e1       	ldi	r26, 0x16	; 22
   18ade:	b0 e0       	ldi	r27, 0x00	; 0
   18ae0:	e4 e7       	ldi	r30, 0x74	; 116
   18ae2:	f5 ec       	ldi	r31, 0xC5	; 197
   18ae4:	0c 94 c3 e6 	jmp	0x1cd86	; 0x1cd86 <__prologue_saves__+0x10>
   18ae8:	8c 01       	movw	r16, r24
   18aea:	7c 01       	movw	r14, r24
   18aec:	5c 01       	movw	r10, r24
   18aee:	26 e0       	ldi	r18, 0x06	; 6
   18af0:	a2 0e       	add	r10, r18
   18af2:	b1 1c       	adc	r11, r1
   18af4:	cc 24       	eor	r12, r12
   18af6:	c3 94       	inc	r12
   18af8:	d1 2c       	mov	r13, r1
   18afa:	f7 01       	movw	r30, r14
   18afc:	81 91       	ld	r24, Z+
   18afe:	7f 01       	movw	r14, r30
   18b00:	a0 df       	rcall	.-192    	; 0x18a42 <lif_BCD2BIN>
   18b02:	89 2b       	or	r24, r25
   18b04:	11 f0       	breq	.+4      	; 0x18b0a <lif_lifbcd2time+0x2e>
   18b06:	c1 2c       	mov	r12, r1
   18b08:	d1 2c       	mov	r13, r1
   18b0a:	ea 14       	cp	r14, r10
   18b0c:	fb 04       	cpc	r15, r11
   18b0e:	a9 f7       	brne	.-22     	; 0x18afa <lif_lifbcd2time+0x1e>
   18b10:	c1 14       	cp	r12, r1
   18b12:	d1 04       	cpc	r13, r1
   18b14:	61 f5       	brne	.+88     	; 0x18b6e <lif_lifbcd2time+0x92>
   18b16:	f8 01       	movw	r30, r16
   18b18:	80 81       	ld	r24, Z
   18b1a:	93 df       	rcall	.-218    	; 0x18a42 <lif_BCD2BIN>
   18b1c:	7c 01       	movw	r14, r24
   18b1e:	f8 01       	movw	r30, r16
   18b20:	81 81       	ldd	r24, Z+1	; 0x01
   18b22:	8f df       	rcall	.-226    	; 0x18a42 <lif_BCD2BIN>
   18b24:	01 97       	sbiw	r24, 0x01	; 1
   18b26:	f6 e4       	ldi	r31, 0x46	; 70
   18b28:	ef 16       	cp	r14, r31
   18b2a:	f1 04       	cpc	r15, r1
   18b2c:	1c f4       	brge	.+6      	; 0x18b34 <lif_lifbcd2time+0x58>
   18b2e:	24 e6       	ldi	r18, 0x64	; 100
   18b30:	e2 0e       	add	r14, r18
   18b32:	f1 1c       	adc	r15, r1
   18b34:	fc 86       	std	Y+12, r15	; 0x0c
   18b36:	eb 86       	std	Y+11, r14	; 0x0b
   18b38:	9a 87       	std	Y+10, r25	; 0x0a
   18b3a:	89 87       	std	Y+9, r24	; 0x09
   18b3c:	f8 01       	movw	r30, r16
   18b3e:	82 81       	ldd	r24, Z+2	; 0x02
   18b40:	80 df       	rcall	.-256    	; 0x18a42 <lif_BCD2BIN>
   18b42:	98 87       	std	Y+8, r25	; 0x08
   18b44:	8f 83       	std	Y+7, r24	; 0x07
   18b46:	f8 01       	movw	r30, r16
   18b48:	83 81       	ldd	r24, Z+3	; 0x03
   18b4a:	7b df       	rcall	.-266    	; 0x18a42 <lif_BCD2BIN>
   18b4c:	9e 83       	std	Y+6, r25	; 0x06
   18b4e:	8d 83       	std	Y+5, r24	; 0x05
   18b50:	f8 01       	movw	r30, r16
   18b52:	84 81       	ldd	r24, Z+4	; 0x04
   18b54:	76 df       	rcall	.-276    	; 0x18a42 <lif_BCD2BIN>
   18b56:	9c 83       	std	Y+4, r25	; 0x04
   18b58:	8b 83       	std	Y+3, r24	; 0x03
   18b5a:	f8 01       	movw	r30, r16
   18b5c:	85 81       	ldd	r24, Z+5	; 0x05
   18b5e:	71 df       	rcall	.-286    	; 0x18a42 <lif_BCD2BIN>
   18b60:	9a 83       	std	Y+2, r25	; 0x02
   18b62:	89 83       	std	Y+1, r24	; 0x01
   18b64:	ce 01       	movw	r24, r28
   18b66:	01 96       	adiw	r24, 0x01	; 1
   18b68:	0e 94 52 3a 	call	0x74a4	; 0x74a4 <timegm>
   18b6c:	03 c0       	rjmp	.+6      	; 0x18b74 <lif_lifbcd2time+0x98>
   18b6e:	60 e0       	ldi	r22, 0x00	; 0
   18b70:	70 e0       	ldi	r23, 0x00	; 0
   18b72:	cb 01       	movw	r24, r22
   18b74:	66 96       	adiw	r28, 0x16	; 22
   18b76:	ea e0       	ldi	r30, 0x0A	; 10
   18b78:	0c 94 df e6 	jmp	0x1cdbe	; 0x1cdbe <__epilogue_restores__+0x10>

00018b7c <lif_ctime_gmt>:
   18b7c:	a6 e1       	ldi	r26, 0x16	; 22
   18b7e:	b0 e0       	ldi	r27, 0x00	; 0
   18b80:	e4 ec       	ldi	r30, 0xC4	; 196
   18b82:	f5 ec       	ldi	r31, 0xC5	; 197
   18b84:	0c 94 c9 e6 	jmp	0x1cd92	; 0x1cd92 <__prologue_saves__+0x1c>
   18b88:	20 e2       	ldi	r18, 0x20	; 32
   18b8a:	ea ec       	ldi	r30, 0xCA	; 202
   18b8c:	f9 e1       	ldi	r31, 0x19	; 25
   18b8e:	df 01       	movw	r26, r30
   18b90:	1d 92       	st	X+, r1
   18b92:	2a 95       	dec	r18
   18b94:	e9 f7       	brne	.-6      	; 0x18b90 <lif_ctime_gmt+0x14>
   18b96:	be 01       	movw	r22, r28
   18b98:	6f 5f       	subi	r22, 0xFF	; 255
   18b9a:	7f 4f       	sbci	r23, 0xFF	; 255
   18b9c:	0e 94 7e 37 	call	0x6efc	; 0x6efc <gmtime_r>
   18ba0:	6a ec       	ldi	r22, 0xCA	; 202
   18ba2:	79 e1       	ldi	r23, 0x19	; 25
   18ba4:	0e 94 ae 3c 	call	0x795c	; 0x795c <asctime_r>
   18ba8:	8c 01       	movw	r16, r24
   18baa:	0e 94 0a 32 	call	0x6414	; 0x6414 <trim_tail>
   18bae:	c8 01       	movw	r24, r16
   18bb0:	66 96       	adiw	r28, 0x16	; 22
   18bb2:	e4 e0       	ldi	r30, 0x04	; 4
   18bb4:	0c 94 e5 e6 	jmp	0x1cdca	; 0x1cdca <__epilogue_restores__+0x1c>

00018bb8 <lif_lifbcd2timestr>:
   18bb8:	a4 e0       	ldi	r26, 0x04	; 4
   18bba:	b0 e0       	ldi	r27, 0x00	; 0
   18bbc:	e2 ee       	ldi	r30, 0xE2	; 226
   18bbe:	f5 ec       	ldi	r31, 0xC5	; 197
   18bc0:	0c 94 cb e6 	jmp	0x1cd96	; 0x1cd96 <__prologue_saves__+0x20>
   18bc4:	20 e2       	ldi	r18, 0x20	; 32
   18bc6:	ea ea       	ldi	r30, 0xAA	; 170
   18bc8:	f9 e1       	ldi	r31, 0x19	; 25
   18bca:	df 01       	movw	r26, r30
   18bcc:	1d 92       	st	X+, r1
   18bce:	2a 95       	dec	r18
   18bd0:	e9 f7       	brne	.-6      	; 0x18bcc <lif_lifbcd2timestr+0x14>
   18bd2:	84 df       	rcall	.-248    	; 0x18adc <lif_lifbcd2time>
   18bd4:	69 83       	std	Y+1, r22	; 0x01
   18bd6:	7a 83       	std	Y+2, r23	; 0x02
   18bd8:	8b 83       	std	Y+3, r24	; 0x03
   18bda:	9c 83       	std	Y+4, r25	; 0x04
   18bdc:	67 2b       	or	r22, r23
   18bde:	68 2b       	or	r22, r24
   18be0:	69 2b       	or	r22, r25
   18be2:	29 f0       	breq	.+10     	; 0x18bee <lif_lifbcd2timestr+0x36>
   18be4:	ce 01       	movw	r24, r28
   18be6:	01 96       	adiw	r24, 0x01	; 1
   18be8:	c9 df       	rcall	.-110    	; 0x18b7c <lif_ctime_gmt>
   18bea:	bc 01       	movw	r22, r24
   18bec:	02 c0       	rjmp	.+4      	; 0x18bf2 <lif_lifbcd2timestr+0x3a>
   18bee:	68 ee       	ldi	r22, 0xE8	; 232
   18bf0:	75 e1       	ldi	r23, 0x15	; 21
   18bf2:	8a ea       	ldi	r24, 0xAA	; 170
   18bf4:	99 e1       	ldi	r25, 0x19	; 25
   18bf6:	0e 94 2c 31 	call	0x6258	; 0x6258 <strcpy>
   18bfa:	8a ea       	ldi	r24, 0xAA	; 170
   18bfc:	99 e1       	ldi	r25, 0x19	; 25
   18bfe:	24 96       	adiw	r28, 0x04	; 4
   18c00:	e2 e0       	ldi	r30, 0x02	; 2
   18c02:	0c 94 e7 e6 	jmp	0x1cdce	; 0x1cdce <__epilogue_restores__+0x20>

00018c06 <lif_image_clear>:
   18c06:	20 e7       	ldi	r18, 0x70	; 112
   18c08:	fc 01       	movw	r30, r24
   18c0a:	11 92       	st	Z+, r1
   18c0c:	2a 95       	dec	r18
   18c0e:	e9 f7       	brne	.-6      	; 0x18c0a <lif_image_clear+0x4>
   18c10:	08 95       	ret

00018c12 <lif_dir_clear>:
   18c12:	81 5b       	subi	r24, 0xB1	; 177
   18c14:	9f 4f       	sbci	r25, 0xFF	; 255
   18c16:	21 e2       	ldi	r18, 0x21	; 33
   18c18:	fc 01       	movw	r30, r24
   18c1a:	11 92       	st	Z+, r1
   18c1c:	2a 95       	dec	r18
   18c1e:	e9 f7       	brne	.-6      	; 0x18c1a <lif_dir_clear+0x8>
   18c20:	08 95       	ret

00018c22 <lif_vol_clear>:
   18c22:	84 96       	adiw	r24, 0x24	; 36
   18c24:	2b e2       	ldi	r18, 0x2B	; 43
   18c26:	fc 01       	movw	r30, r24
   18c28:	11 92       	st	Z+, r1
   18c2a:	2a 95       	dec	r18
   18c2c:	e9 f7       	brne	.-6      	; 0x18c28 <lif_vol_clear+0x6>
   18c2e:	08 95       	ret

00018c30 <lif_dump_vol>:
   18c30:	cf 93       	push	r28
   18c32:	df 93       	push	r29
   18c34:	ad b7       	in	r26, 0x3d	; 61
   18c36:	be b7       	in	r27, 0x3e	; 62
   18c38:	17 97       	sbiw	r26, 0x07	; 7
   18c3a:	0f b6       	in	r0, 0x3f	; 63
   18c3c:	f8 94       	cli
   18c3e:	be bf       	out	0x3e, r27	; 62
   18c40:	0f be       	out	0x3f, r0	; 63
   18c42:	ad bf       	out	0x3d, r26	; 61
   18c44:	ec 01       	movw	r28, r24
   18c46:	ed b7       	in	r30, 0x3d	; 61
   18c48:	fe b7       	in	r31, 0x3e	; 62
   18c4a:	75 83       	std	Z+5, r23	; 0x05
   18c4c:	64 83       	std	Z+4, r22	; 0x04
   18c4e:	8f e5       	ldi	r24, 0x5F	; 95
   18c50:	93 e4       	ldi	r25, 0x43	; 67
   18c52:	a0 e0       	ldi	r26, 0x00	; 0
   18c54:	81 83       	std	Z+1, r24	; 0x01
   18c56:	92 83       	std	Z+2, r25	; 0x02
   18c58:	a3 83       	std	Z+3, r26	; 0x03
   18c5a:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   18c5e:	88 81       	ld	r24, Y
   18c60:	99 81       	ldd	r25, Y+1	; 0x01
   18c62:	ed b7       	in	r30, 0x3d	; 61
   18c64:	fe b7       	in	r31, 0x3e	; 62
   18c66:	95 83       	std	Z+5, r25	; 0x05
   18c68:	84 83       	std	Z+4, r24	; 0x04
   18c6a:	85 e4       	ldi	r24, 0x45	; 69
   18c6c:	93 e4       	ldi	r25, 0x43	; 67
   18c6e:	a0 e0       	ldi	r26, 0x00	; 0
   18c70:	81 83       	std	Z+1, r24	; 0x01
   18c72:	92 83       	std	Z+2, r25	; 0x02
   18c74:	a3 83       	std	Z+3, r26	; 0x03
   18c76:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   18c7a:	8c 81       	ldd	r24, Y+4	; 0x04
   18c7c:	9d 81       	ldd	r25, Y+5	; 0x05
   18c7e:	ae 81       	ldd	r26, Y+6	; 0x06
   18c80:	bf 81       	ldd	r27, Y+7	; 0x07
   18c82:	ed b7       	in	r30, 0x3d	; 61
   18c84:	fe b7       	in	r31, 0x3e	; 62
   18c86:	84 83       	std	Z+4, r24	; 0x04
   18c88:	95 83       	std	Z+5, r25	; 0x05
   18c8a:	a6 83       	std	Z+6, r26	; 0x06
   18c8c:	b7 83       	std	Z+7, r27	; 0x07
   18c8e:	88 e2       	ldi	r24, 0x28	; 40
   18c90:	93 e4       	ldi	r25, 0x43	; 67
   18c92:	a0 e0       	ldi	r26, 0x00	; 0
   18c94:	81 83       	std	Z+1, r24	; 0x01
   18c96:	92 83       	std	Z+2, r25	; 0x02
   18c98:	a3 83       	std	Z+3, r26	; 0x03
   18c9a:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   18c9e:	88 85       	ldd	r24, Y+8	; 0x08
   18ca0:	99 85       	ldd	r25, Y+9	; 0x09
   18ca2:	aa 85       	ldd	r26, Y+10	; 0x0a
   18ca4:	bb 85       	ldd	r27, Y+11	; 0x0b
   18ca6:	ed b7       	in	r30, 0x3d	; 61
   18ca8:	fe b7       	in	r31, 0x3e	; 62
   18caa:	84 83       	std	Z+4, r24	; 0x04
   18cac:	95 83       	std	Z+5, r25	; 0x05
   18cae:	a6 83       	std	Z+6, r26	; 0x06
   18cb0:	b7 83       	std	Z+7, r27	; 0x07
   18cb2:	8b e0       	ldi	r24, 0x0B	; 11
   18cb4:	93 e4       	ldi	r25, 0x43	; 67
   18cb6:	a0 e0       	ldi	r26, 0x00	; 0
   18cb8:	81 83       	std	Z+1, r24	; 0x01
   18cba:	92 83       	std	Z+2, r25	; 0x02
   18cbc:	a3 83       	std	Z+3, r26	; 0x03
   18cbe:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   18cc2:	8c 85       	ldd	r24, Y+12	; 0x0c
   18cc4:	9d 85       	ldd	r25, Y+13	; 0x0d
   18cc6:	ae 85       	ldd	r26, Y+14	; 0x0e
   18cc8:	bf 85       	ldd	r27, Y+15	; 0x0f
   18cca:	ed b7       	in	r30, 0x3d	; 61
   18ccc:	fe b7       	in	r31, 0x3e	; 62
   18cce:	84 83       	std	Z+4, r24	; 0x04
   18cd0:	95 83       	std	Z+5, r25	; 0x05
   18cd2:	a6 83       	std	Z+6, r26	; 0x06
   18cd4:	b7 83       	std	Z+7, r27	; 0x07
   18cd6:	8e ee       	ldi	r24, 0xEE	; 238
   18cd8:	92 e4       	ldi	r25, 0x42	; 66
   18cda:	a0 e0       	ldi	r26, 0x00	; 0
   18cdc:	81 83       	std	Z+1, r24	; 0x01
   18cde:	92 83       	std	Z+2, r25	; 0x02
   18ce0:	a3 83       	std	Z+3, r26	; 0x03
   18ce2:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   18ce6:	88 89       	ldd	r24, Y+16	; 0x10
   18ce8:	99 89       	ldd	r25, Y+17	; 0x11
   18cea:	aa 89       	ldd	r26, Y+18	; 0x12
   18cec:	bb 89       	ldd	r27, Y+19	; 0x13
   18cee:	ed b7       	in	r30, 0x3d	; 61
   18cf0:	fe b7       	in	r31, 0x3e	; 62
   18cf2:	84 83       	std	Z+4, r24	; 0x04
   18cf4:	95 83       	std	Z+5, r25	; 0x05
   18cf6:	a6 83       	std	Z+6, r26	; 0x06
   18cf8:	b7 83       	std	Z+7, r27	; 0x07
   18cfa:	81 ed       	ldi	r24, 0xD1	; 209
   18cfc:	92 e4       	ldi	r25, 0x42	; 66
   18cfe:	a0 e0       	ldi	r26, 0x00	; 0
   18d00:	81 83       	std	Z+1, r24	; 0x01
   18d02:	92 83       	std	Z+2, r25	; 0x02
   18d04:	a3 83       	std	Z+3, r26	; 0x03
   18d06:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   18d0a:	8c 89       	ldd	r24, Y+20	; 0x14
   18d0c:	9d 89       	ldd	r25, Y+21	; 0x15
   18d0e:	ae 89       	ldd	r26, Y+22	; 0x16
   18d10:	bf 89       	ldd	r27, Y+23	; 0x17
   18d12:	ed b7       	in	r30, 0x3d	; 61
   18d14:	fe b7       	in	r31, 0x3e	; 62
   18d16:	84 83       	std	Z+4, r24	; 0x04
   18d18:	95 83       	std	Z+5, r25	; 0x05
   18d1a:	a6 83       	std	Z+6, r26	; 0x06
   18d1c:	b7 83       	std	Z+7, r27	; 0x07
   18d1e:	84 eb       	ldi	r24, 0xB4	; 180
   18d20:	92 e4       	ldi	r25, 0x42	; 66
   18d22:	a0 e0       	ldi	r26, 0x00	; 0
   18d24:	81 83       	std	Z+1, r24	; 0x01
   18d26:	92 83       	std	Z+2, r25	; 0x02
   18d28:	a3 83       	std	Z+3, r26	; 0x03
   18d2a:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   18d2e:	88 8d       	ldd	r24, Y+24	; 0x18
   18d30:	99 8d       	ldd	r25, Y+25	; 0x19
   18d32:	aa 8d       	ldd	r26, Y+26	; 0x1a
   18d34:	bb 8d       	ldd	r27, Y+27	; 0x1b
   18d36:	ed b7       	in	r30, 0x3d	; 61
   18d38:	fe b7       	in	r31, 0x3e	; 62
   18d3a:	84 83       	std	Z+4, r24	; 0x04
   18d3c:	95 83       	std	Z+5, r25	; 0x05
   18d3e:	a6 83       	std	Z+6, r26	; 0x06
   18d40:	b7 83       	std	Z+7, r27	; 0x07
   18d42:	87 e9       	ldi	r24, 0x97	; 151
   18d44:	92 e4       	ldi	r25, 0x42	; 66
   18d46:	a0 e0       	ldi	r26, 0x00	; 0
   18d48:	81 83       	std	Z+1, r24	; 0x01
   18d4a:	92 83       	std	Z+2, r25	; 0x02
   18d4c:	a3 83       	std	Z+3, r26	; 0x03
   18d4e:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   18d52:	8c 8d       	ldd	r24, Y+28	; 0x1c
   18d54:	9d 8d       	ldd	r25, Y+29	; 0x1d
   18d56:	09 2e       	mov	r0, r25
   18d58:	00 0c       	add	r0, r0
   18d5a:	aa 0b       	sbc	r26, r26
   18d5c:	bb 0b       	sbc	r27, r27
   18d5e:	ed b7       	in	r30, 0x3d	; 61
   18d60:	fe b7       	in	r31, 0x3e	; 62
   18d62:	84 83       	std	Z+4, r24	; 0x04
   18d64:	95 83       	std	Z+5, r25	; 0x05
   18d66:	a6 83       	std	Z+6, r26	; 0x06
   18d68:	b7 83       	std	Z+7, r27	; 0x07
   18d6a:	8a e7       	ldi	r24, 0x7A	; 122
   18d6c:	92 e4       	ldi	r25, 0x42	; 66
   18d6e:	a0 e0       	ldi	r26, 0x00	; 0
   18d70:	81 83       	std	Z+1, r24	; 0x01
   18d72:	92 83       	std	Z+2, r25	; 0x02
   18d74:	a3 83       	std	Z+3, r26	; 0x03
   18d76:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   18d7a:	8e 8d       	ldd	r24, Y+30	; 0x1e
   18d7c:	9f 8d       	ldd	r25, Y+31	; 0x1f
   18d7e:	09 2e       	mov	r0, r25
   18d80:	00 0c       	add	r0, r0
   18d82:	aa 0b       	sbc	r26, r26
   18d84:	bb 0b       	sbc	r27, r27
   18d86:	ed b7       	in	r30, 0x3d	; 61
   18d88:	fe b7       	in	r31, 0x3e	; 62
   18d8a:	84 83       	std	Z+4, r24	; 0x04
   18d8c:	95 83       	std	Z+5, r25	; 0x05
   18d8e:	a6 83       	std	Z+6, r26	; 0x06
   18d90:	b7 83       	std	Z+7, r27	; 0x07
   18d92:	8d e5       	ldi	r24, 0x5D	; 93
   18d94:	92 e4       	ldi	r25, 0x42	; 66
   18d96:	a0 e0       	ldi	r26, 0x00	; 0
   18d98:	81 83       	std	Z+1, r24	; 0x01
   18d9a:	92 83       	std	Z+2, r25	; 0x02
   18d9c:	a3 83       	std	Z+3, r26	; 0x03
   18d9e:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   18da2:	ce 01       	movw	r24, r28
   18da4:	86 96       	adiw	r24, 0x26	; 38
   18da6:	ed b7       	in	r30, 0x3d	; 61
   18da8:	fe b7       	in	r31, 0x3e	; 62
   18daa:	95 83       	std	Z+5, r25	; 0x05
   18dac:	84 83       	std	Z+4, r24	; 0x04
   18dae:	83 e4       	ldi	r24, 0x43	; 67
   18db0:	92 e4       	ldi	r25, 0x42	; 66
   18db2:	a0 e0       	ldi	r26, 0x00	; 0
   18db4:	81 83       	std	Z+1, r24	; 0x01
   18db6:	92 83       	std	Z+2, r25	; 0x02
   18db8:	a3 83       	std	Z+3, r26	; 0x03
   18dba:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   18dbe:	8c a1       	ldd	r24, Y+36	; 0x24
   18dc0:	9d a1       	ldd	r25, Y+37	; 0x25
   18dc2:	ed b7       	in	r30, 0x3d	; 61
   18dc4:	fe b7       	in	r31, 0x3e	; 62
   18dc6:	95 83       	std	Z+5, r25	; 0x05
   18dc8:	84 83       	std	Z+4, r24	; 0x04
   18dca:	87 e2       	ldi	r24, 0x27	; 39
   18dcc:	92 e4       	ldi	r25, 0x42	; 66
   18dce:	a0 e0       	ldi	r26, 0x00	; 0
   18dd0:	81 83       	std	Z+1, r24	; 0x01
   18dd2:	92 83       	std	Z+2, r25	; 0x02
   18dd4:	a3 83       	std	Z+3, r26	; 0x03
   18dd6:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   18dda:	8d a5       	ldd	r24, Y+45	; 0x2d
   18ddc:	9e a5       	ldd	r25, Y+46	; 0x2e
   18dde:	af a5       	ldd	r26, Y+47	; 0x2f
   18de0:	b8 a9       	ldd	r27, Y+48	; 0x30
   18de2:	ed b7       	in	r30, 0x3d	; 61
   18de4:	fe b7       	in	r31, 0x3e	; 62
   18de6:	84 83       	std	Z+4, r24	; 0x04
   18de8:	95 83       	std	Z+5, r25	; 0x05
   18dea:	a6 83       	std	Z+6, r26	; 0x06
   18dec:	b7 83       	std	Z+7, r27	; 0x07
   18dee:	8a e0       	ldi	r24, 0x0A	; 10
   18df0:	92 e4       	ldi	r25, 0x42	; 66
   18df2:	a0 e0       	ldi	r26, 0x00	; 0
   18df4:	81 83       	std	Z+1, r24	; 0x01
   18df6:	92 83       	std	Z+2, r25	; 0x02
   18df8:	a3 83       	std	Z+3, r26	; 0x03
   18dfa:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   18dfe:	8d a9       	ldd	r24, Y+53	; 0x35
   18e00:	9e a9       	ldd	r25, Y+54	; 0x36
   18e02:	af a9       	ldd	r26, Y+55	; 0x37
   18e04:	b8 ad       	ldd	r27, Y+56	; 0x38
   18e06:	ed b7       	in	r30, 0x3d	; 61
   18e08:	fe b7       	in	r31, 0x3e	; 62
   18e0a:	84 83       	std	Z+4, r24	; 0x04
   18e0c:	95 83       	std	Z+5, r25	; 0x05
   18e0e:	a6 83       	std	Z+6, r26	; 0x06
   18e10:	b7 83       	std	Z+7, r27	; 0x07
   18e12:	8d ee       	ldi	r24, 0xED	; 237
   18e14:	91 e4       	ldi	r25, 0x41	; 65
   18e16:	a0 e0       	ldi	r26, 0x00	; 0
   18e18:	81 83       	std	Z+1, r24	; 0x01
   18e1a:	92 83       	std	Z+2, r25	; 0x02
   18e1c:	a3 83       	std	Z+3, r26	; 0x03
   18e1e:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   18e22:	89 a9       	ldd	r24, Y+49	; 0x31
   18e24:	9a a9       	ldd	r25, Y+50	; 0x32
   18e26:	ed b7       	in	r30, 0x3d	; 61
   18e28:	fe b7       	in	r31, 0x3e	; 62
   18e2a:	95 83       	std	Z+5, r25	; 0x05
   18e2c:	84 83       	std	Z+4, r24	; 0x04
   18e2e:	81 ed       	ldi	r24, 0xD1	; 209
   18e30:	91 e4       	ldi	r25, 0x41	; 65
   18e32:	a0 e0       	ldi	r26, 0x00	; 0
   18e34:	81 83       	std	Z+1, r24	; 0x01
   18e36:	92 83       	std	Z+2, r25	; 0x02
   18e38:	a3 83       	std	Z+3, r26	; 0x03
   18e3a:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   18e3e:	89 ad       	ldd	r24, Y+57	; 0x39
   18e40:	9a ad       	ldd	r25, Y+58	; 0x3a
   18e42:	ed b7       	in	r30, 0x3d	; 61
   18e44:	fe b7       	in	r31, 0x3e	; 62
   18e46:	95 83       	std	Z+5, r25	; 0x05
   18e48:	84 83       	std	Z+4, r24	; 0x04
   18e4a:	85 eb       	ldi	r24, 0xB5	; 181
   18e4c:	91 e4       	ldi	r25, 0x41	; 65
   18e4e:	a0 e0       	ldi	r26, 0x00	; 0
   18e50:	81 83       	std	Z+1, r24	; 0x01
   18e52:	92 83       	std	Z+2, r25	; 0x02
   18e54:	a3 83       	std	Z+3, r26	; 0x03
   18e56:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   18e5a:	ce 01       	movw	r24, r28
   18e5c:	87 5b       	subi	r24, 0xB7	; 183
   18e5e:	9f 4f       	sbci	r25, 0xFF	; 255
   18e60:	ab de       	rcall	.-682    	; 0x18bb8 <lif_lifbcd2timestr>
   18e62:	ed b7       	in	r30, 0x3d	; 61
   18e64:	fe b7       	in	r31, 0x3e	; 62
   18e66:	95 83       	std	Z+5, r25	; 0x05
   18e68:	84 83       	std	Z+4, r24	; 0x04
   18e6a:	8b e9       	ldi	r24, 0x9B	; 155
   18e6c:	91 e4       	ldi	r25, 0x41	; 65
   18e6e:	a0 e0       	ldi	r26, 0x00	; 0
   18e70:	81 83       	std	Z+1, r24	; 0x01
   18e72:	92 83       	std	Z+2, r25	; 0x02
   18e74:	a3 83       	std	Z+3, r26	; 0x03
   18e76:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   18e7a:	ce 01       	movw	r24, r28
   18e7c:	81 5b       	subi	r24, 0xB1	; 177
   18e7e:	9f 4f       	sbci	r25, 0xFF	; 255
   18e80:	ed b7       	in	r30, 0x3d	; 61
   18e82:	fe b7       	in	r31, 0x3e	; 62
   18e84:	95 83       	std	Z+5, r25	; 0x05
   18e86:	84 83       	std	Z+4, r24	; 0x04
   18e88:	81 e8       	ldi	r24, 0x81	; 129
   18e8a:	91 e4       	ldi	r25, 0x41	; 65
   18e8c:	a0 e0       	ldi	r26, 0x00	; 0
   18e8e:	81 83       	std	Z+1, r24	; 0x01
   18e90:	92 83       	std	Z+2, r25	; 0x02
   18e92:	a3 83       	std	Z+3, r26	; 0x03
   18e94:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   18e98:	fe 01       	movw	r30, r28
   18e9a:	e6 5a       	subi	r30, 0xA6	; 166
   18e9c:	ff 4f       	sbci	r31, 0xFF	; 255
   18e9e:	80 81       	ld	r24, Z
   18ea0:	91 81       	ldd	r25, Z+1	; 0x01
   18ea2:	ed b7       	in	r30, 0x3d	; 61
   18ea4:	fe b7       	in	r31, 0x3e	; 62
   18ea6:	95 83       	std	Z+5, r25	; 0x05
   18ea8:	84 83       	std	Z+4, r24	; 0x04
   18eaa:	85 e6       	ldi	r24, 0x65	; 101
   18eac:	91 e4       	ldi	r25, 0x41	; 65
   18eae:	a0 e0       	ldi	r26, 0x00	; 0
   18eb0:	81 83       	std	Z+1, r24	; 0x01
   18eb2:	92 83       	std	Z+2, r25	; 0x02
   18eb4:	a3 83       	std	Z+3, r26	; 0x03
   18eb6:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   18eba:	fe 01       	movw	r30, r28
   18ebc:	e6 59       	subi	r30, 0x96	; 150
   18ebe:	ff 4f       	sbci	r31, 0xFF	; 255
   18ec0:	80 81       	ld	r24, Z
   18ec2:	91 81       	ldd	r25, Z+1	; 0x01
   18ec4:	ed b7       	in	r30, 0x3d	; 61
   18ec6:	fe b7       	in	r31, 0x3e	; 62
   18ec8:	95 83       	std	Z+5, r25	; 0x05
   18eca:	84 83       	std	Z+4, r24	; 0x04
   18ecc:	89 e4       	ldi	r24, 0x49	; 73
   18ece:	91 e4       	ldi	r25, 0x41	; 65
   18ed0:	a0 e0       	ldi	r26, 0x00	; 0
   18ed2:	81 83       	std	Z+1, r24	; 0x01
   18ed4:	92 83       	std	Z+2, r25	; 0x02
   18ed6:	a3 83       	std	Z+3, r26	; 0x03
   18ed8:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   18edc:	fe 01       	movw	r30, r28
   18ede:	e4 5a       	subi	r30, 0xA4	; 164
   18ee0:	ff 4f       	sbci	r31, 0xFF	; 255
   18ee2:	80 81       	ld	r24, Z
   18ee4:	91 81       	ldd	r25, Z+1	; 0x01
   18ee6:	a2 81       	ldd	r26, Z+2	; 0x02
   18ee8:	b3 81       	ldd	r27, Z+3	; 0x03
   18eea:	ed b7       	in	r30, 0x3d	; 61
   18eec:	fe b7       	in	r31, 0x3e	; 62
   18eee:	84 83       	std	Z+4, r24	; 0x04
   18ef0:	95 83       	std	Z+5, r25	; 0x05
   18ef2:	a6 83       	std	Z+6, r26	; 0x06
   18ef4:	b7 83       	std	Z+7, r27	; 0x07
   18ef6:	8c e2       	ldi	r24, 0x2C	; 44
   18ef8:	91 e4       	ldi	r25, 0x41	; 65
   18efa:	a0 e0       	ldi	r26, 0x00	; 0
   18efc:	81 83       	std	Z+1, r24	; 0x01
   18efe:	92 83       	std	Z+2, r25	; 0x02
   18f00:	a3 83       	std	Z+3, r26	; 0x03
   18f02:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   18f06:	fe 01       	movw	r30, r28
   18f08:	e0 5a       	subi	r30, 0xA0	; 160
   18f0a:	ff 4f       	sbci	r31, 0xFF	; 255
   18f0c:	80 81       	ld	r24, Z
   18f0e:	91 81       	ldd	r25, Z+1	; 0x01
   18f10:	a2 81       	ldd	r26, Z+2	; 0x02
   18f12:	b3 81       	ldd	r27, Z+3	; 0x03
   18f14:	ed b7       	in	r30, 0x3d	; 61
   18f16:	fe b7       	in	r31, 0x3e	; 62
   18f18:	84 83       	std	Z+4, r24	; 0x04
   18f1a:	95 83       	std	Z+5, r25	; 0x05
   18f1c:	a6 83       	std	Z+6, r26	; 0x06
   18f1e:	b7 83       	std	Z+7, r27	; 0x07
   18f20:	8f e0       	ldi	r24, 0x0F	; 15
   18f22:	91 e4       	ldi	r25, 0x41	; 65
   18f24:	a0 e0       	ldi	r26, 0x00	; 0
   18f26:	81 83       	std	Z+1, r24	; 0x01
   18f28:	92 83       	std	Z+2, r25	; 0x02
   18f2a:	a3 83       	std	Z+3, r26	; 0x03
   18f2c:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   18f30:	fe 01       	movw	r30, r28
   18f32:	e4 59       	subi	r30, 0x94	; 148
   18f34:	ff 4f       	sbci	r31, 0xFF	; 255
   18f36:	80 81       	ld	r24, Z
   18f38:	91 81       	ldd	r25, Z+1	; 0x01
   18f3a:	a0 e0       	ldi	r26, 0x00	; 0
   18f3c:	b0 e0       	ldi	r27, 0x00	; 0
   18f3e:	ed b7       	in	r30, 0x3d	; 61
   18f40:	fe b7       	in	r31, 0x3e	; 62
   18f42:	84 83       	std	Z+4, r24	; 0x04
   18f44:	95 83       	std	Z+5, r25	; 0x05
   18f46:	a6 83       	std	Z+6, r26	; 0x06
   18f48:	b7 83       	std	Z+7, r27	; 0x07
   18f4a:	82 ef       	ldi	r24, 0xF2	; 242
   18f4c:	90 e4       	ldi	r25, 0x40	; 64
   18f4e:	a0 e0       	ldi	r26, 0x00	; 0
   18f50:	81 83       	std	Z+1, r24	; 0x01
   18f52:	92 83       	std	Z+2, r25	; 0x02
   18f54:	a3 83       	std	Z+3, r26	; 0x03
   18f56:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   18f5a:	fe 01       	movw	r30, r28
   18f5c:	e2 59       	subi	r30, 0x92	; 146
   18f5e:	ff 4f       	sbci	r31, 0xFF	; 255
   18f60:	80 81       	ld	r24, Z
   18f62:	91 81       	ldd	r25, Z+1	; 0x01
   18f64:	ed b7       	in	r30, 0x3d	; 61
   18f66:	fe b7       	in	r31, 0x3e	; 62
   18f68:	95 83       	std	Z+5, r25	; 0x05
   18f6a:	84 83       	std	Z+4, r24	; 0x04
   18f6c:	86 ed       	ldi	r24, 0xD6	; 214
   18f6e:	90 e4       	ldi	r25, 0x40	; 64
   18f70:	a0 e0       	ldi	r26, 0x00	; 0
   18f72:	81 83       	std	Z+1, r24	; 0x01
   18f74:	92 83       	std	Z+2, r25	; 0x02
   18f76:	a3 83       	std	Z+3, r26	; 0x03
   18f78:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   18f7c:	ce 01       	movw	r24, r28
   18f7e:	8c 59       	subi	r24, 0x9C	; 156
   18f80:	9f 4f       	sbci	r25, 0xFF	; 255
   18f82:	1a de       	rcall	.-972    	; 0x18bb8 <lif_lifbcd2timestr>
   18f84:	ed b7       	in	r30, 0x3d	; 61
   18f86:	fe b7       	in	r31, 0x3e	; 62
   18f88:	95 83       	std	Z+5, r25	; 0x05
   18f8a:	84 83       	std	Z+4, r24	; 0x04
   18f8c:	8c eb       	ldi	r24, 0xBC	; 188
   18f8e:	90 e4       	ldi	r25, 0x40	; 64
   18f90:	a0 e0       	ldi	r26, 0x00	; 0
   18f92:	81 83       	std	Z+1, r24	; 0x01
   18f94:	92 83       	std	Z+2, r25	; 0x02
   18f96:	a3 83       	std	Z+3, r26	; 0x03
   18f98:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   18f9c:	8a eb       	ldi	r24, 0xBA	; 186
   18f9e:	90 e4       	ldi	r25, 0x40	; 64
   18fa0:	a0 e0       	ldi	r26, 0x00	; 0
   18fa2:	ed b7       	in	r30, 0x3d	; 61
   18fa4:	fe b7       	in	r31, 0x3e	; 62
   18fa6:	81 83       	std	Z+1, r24	; 0x01
   18fa8:	92 83       	std	Z+2, r25	; 0x02
   18faa:	a3 83       	std	Z+3, r26	; 0x03
   18fac:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   18fb0:	cd b7       	in	r28, 0x3d	; 61
   18fb2:	de b7       	in	r29, 0x3e	; 62
   18fb4:	27 96       	adiw	r28, 0x07	; 7
   18fb6:	e2 e0       	ldi	r30, 0x02	; 2
   18fb8:	0c 94 e7 e6 	jmp	0x1cdce	; 0x1cdce <__epilogue_restores__+0x20>

00018fbc <lif_check_volume>:
   18fbc:	0f 93       	push	r16
   18fbe:	1f 93       	push	r17
   18fc0:	cf 93       	push	r28
   18fc2:	df 93       	push	r29
   18fc4:	ad b7       	in	r26, 0x3d	; 61
   18fc6:	be b7       	in	r27, 0x3e	; 62
   18fc8:	17 97       	sbiw	r26, 0x07	; 7
   18fca:	0f b6       	in	r0, 0x3f	; 63
   18fcc:	f8 94       	cli
   18fce:	be bf       	out	0x3e, r27	; 62
   18fd0:	0f be       	out	0x3f, r0	; 63
   18fd2:	ad bf       	out	0x3d, r26	; 61
   18fd4:	ec 01       	movw	r28, r24
   18fd6:	86 96       	adiw	r24, 0x26	; 38
   18fd8:	e0 da       	rcall	.-2624   	; 0x1859a <lif_checkname>
   18fda:	89 2b       	or	r24, r25
   18fdc:	89 f4       	brne	.+34     	; 0x19000 <lif_check_volume+0x44>
   18fde:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18fe2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18fe6:	92 ff       	sbrs	r25, 2
   18fe8:	0e c0       	rjmp	.+28     	; 0x19006 <lif_check_volume+0x4a>
   18fea:	8b e9       	ldi	r24, 0x9B	; 155
   18fec:	90 e4       	ldi	r25, 0x40	; 64
   18fee:	a0 e0       	ldi	r26, 0x00	; 0
   18ff0:	ed b7       	in	r30, 0x3d	; 61
   18ff2:	fe b7       	in	r31, 0x3e	; 62
   18ff4:	81 83       	std	Z+1, r24	; 0x01
   18ff6:	92 83       	std	Z+2, r25	; 0x02
   18ff8:	a3 83       	std	Z+3, r26	; 0x03
   18ffa:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   18ffe:	03 c0       	rjmp	.+6      	; 0x19006 <lif_check_volume+0x4a>
   19000:	81 e0       	ldi	r24, 0x01	; 1
   19002:	90 e0       	ldi	r25, 0x00	; 0
   19004:	02 c0       	rjmp	.+4      	; 0x1900a <lif_check_volume+0x4e>
   19006:	80 e0       	ldi	r24, 0x00	; 0
   19008:	90 e0       	ldi	r25, 0x00	; 0
   1900a:	29 a9       	ldd	r18, Y+49	; 0x31
   1900c:	3a a9       	ldd	r19, Y+50	; 0x32
   1900e:	21 15       	cp	r18, r1
   19010:	f0 e1       	ldi	r31, 0x10	; 16
   19012:	3f 07       	cpc	r19, r31
   19014:	a1 f0       	breq	.+40     	; 0x1903e <lif_check_volume+0x82>
   19016:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1901a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1901e:	92 ff       	sbrs	r25, 2
   19020:	0c c0       	rjmp	.+24     	; 0x1903a <lif_check_volume+0x7e>
   19022:	ed b7       	in	r30, 0x3d	; 61
   19024:	fe b7       	in	r31, 0x3e	; 62
   19026:	35 83       	std	Z+5, r19	; 0x05
   19028:	24 83       	std	Z+4, r18	; 0x04
   1902a:	82 e6       	ldi	r24, 0x62	; 98
   1902c:	90 e4       	ldi	r25, 0x40	; 64
   1902e:	a0 e0       	ldi	r26, 0x00	; 0
   19030:	81 83       	std	Z+1, r24	; 0x01
   19032:	92 83       	std	Z+2, r25	; 0x02
   19034:	a3 83       	std	Z+3, r26	; 0x03
   19036:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   1903a:	80 e0       	ldi	r24, 0x00	; 0
   1903c:	90 e0       	ldi	r25, 0x00	; 0
   1903e:	29 ad       	ldd	r18, Y+57	; 0x39
   19040:	3a ad       	ldd	r19, Y+58	; 0x3a
   19042:	22 30       	cpi	r18, 0x02	; 2
   19044:	31 05       	cpc	r19, r1
   19046:	a0 f0       	brcs	.+40     	; 0x19070 <lif_check_volume+0xb4>
   19048:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1904c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19050:	92 ff       	sbrs	r25, 2
   19052:	0c c0       	rjmp	.+24     	; 0x1906c <lif_check_volume+0xb0>
   19054:	ed b7       	in	r30, 0x3d	; 61
   19056:	fe b7       	in	r31, 0x3e	; 62
   19058:	35 83       	std	Z+5, r19	; 0x05
   1905a:	24 83       	std	Z+4, r18	; 0x04
   1905c:	8a e4       	ldi	r24, 0x4A	; 74
   1905e:	90 e4       	ldi	r25, 0x40	; 64
   19060:	a0 e0       	ldi	r26, 0x00	; 0
   19062:	81 83       	std	Z+1, r24	; 0x01
   19064:	92 83       	std	Z+2, r25	; 0x02
   19066:	a3 83       	std	Z+3, r26	; 0x03
   19068:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   1906c:	80 e0       	ldi	r24, 0x00	; 0
   1906e:	90 e0       	ldi	r25, 0x00	; 0
   19070:	2b a9       	ldd	r18, Y+51	; 0x33
   19072:	3c a9       	ldd	r19, Y+52	; 0x34
   19074:	23 2b       	or	r18, r19
   19076:	91 f0       	breq	.+36     	; 0x1909c <lif_check_volume+0xe0>
   19078:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1907c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19080:	92 ff       	sbrs	r25, 2
   19082:	0a c0       	rjmp	.+20     	; 0x19098 <lif_check_volume+0xdc>
   19084:	81 e1       	ldi	r24, 0x11	; 17
   19086:	90 e4       	ldi	r25, 0x40	; 64
   19088:	a0 e0       	ldi	r26, 0x00	; 0
   1908a:	ed b7       	in	r30, 0x3d	; 61
   1908c:	fe b7       	in	r31, 0x3e	; 62
   1908e:	81 83       	std	Z+1, r24	; 0x01
   19090:	92 83       	std	Z+2, r25	; 0x02
   19092:	a3 83       	std	Z+3, r26	; 0x03
   19094:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   19098:	80 e0       	ldi	r24, 0x00	; 0
   1909a:	90 e0       	ldi	r25, 0x00	; 0
   1909c:	2b ad       	ldd	r18, Y+59	; 0x3b
   1909e:	3c ad       	ldd	r19, Y+60	; 0x3c
   190a0:	23 2b       	or	r18, r19
   190a2:	91 f0       	breq	.+36     	; 0x190c8 <lif_check_volume+0x10c>
   190a4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   190a8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   190ac:	92 ff       	sbrs	r25, 2
   190ae:	0a c0       	rjmp	.+20     	; 0x190c4 <lif_check_volume+0x108>
   190b0:	88 ed       	ldi	r24, 0xD8	; 216
   190b2:	9f e3       	ldi	r25, 0x3F	; 63
   190b4:	a0 e0       	ldi	r26, 0x00	; 0
   190b6:	ed b7       	in	r30, 0x3d	; 61
   190b8:	fe b7       	in	r31, 0x3e	; 62
   190ba:	81 83       	std	Z+1, r24	; 0x01
   190bc:	92 83       	std	Z+2, r25	; 0x02
   190be:	a3 83       	std	Z+3, r26	; 0x03
   190c0:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   190c4:	80 e0       	ldi	r24, 0x00	; 0
   190c6:	90 e0       	ldi	r25, 0x00	; 0
   190c8:	4d a5       	ldd	r20, Y+45	; 0x2d
   190ca:	5e a5       	ldd	r21, Y+46	; 0x2e
   190cc:	6f a5       	ldd	r22, Y+47	; 0x2f
   190ce:	78 a9       	ldd	r23, Y+48	; 0x30
   190d0:	45 2b       	or	r20, r21
   190d2:	46 2b       	or	r20, r22
   190d4:	47 2b       	or	r20, r23
   190d6:	b1 f4       	brne	.+44     	; 0x19104 <lif_check_volume+0x148>
   190d8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   190dc:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   190e0:	92 ff       	sbrs	r25, 2
   190e2:	0e c0       	rjmp	.+28     	; 0x19100 <lif_check_volume+0x144>
   190e4:	ed b7       	in	r30, 0x3d	; 61
   190e6:	fe b7       	in	r31, 0x3e	; 62
   190e8:	14 82       	std	Z+4, r1	; 0x04
   190ea:	15 82       	std	Z+5, r1	; 0x05
   190ec:	16 82       	std	Z+6, r1	; 0x06
   190ee:	17 82       	std	Z+7, r1	; 0x07
   190f0:	83 eb       	ldi	r24, 0xB3	; 179
   190f2:	9f e3       	ldi	r25, 0x3F	; 63
   190f4:	a0 e0       	ldi	r26, 0x00	; 0
   190f6:	81 83       	std	Z+1, r24	; 0x01
   190f8:	92 83       	std	Z+2, r25	; 0x02
   190fa:	a3 83       	std	Z+3, r26	; 0x03
   190fc:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   19100:	80 e0       	ldi	r24, 0x00	; 0
   19102:	90 e0       	ldi	r25, 0x00	; 0
   19104:	4d a9       	ldd	r20, Y+53	; 0x35
   19106:	5e a9       	ldd	r21, Y+54	; 0x36
   19108:	6f a9       	ldd	r22, Y+55	; 0x37
   1910a:	78 ad       	ldd	r23, Y+56	; 0x38
   1910c:	45 2b       	or	r20, r21
   1910e:	46 2b       	or	r20, r22
   19110:	47 2b       	or	r20, r23
   19112:	91 f4       	brne	.+36     	; 0x19138 <lif_check_volume+0x17c>
   19114:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19118:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1911c:	92 ff       	sbrs	r25, 2
   1911e:	0a c0       	rjmp	.+20     	; 0x19134 <lif_check_volume+0x178>
   19120:	84 e8       	ldi	r24, 0x84	; 132
   19122:	9f e3       	ldi	r25, 0x3F	; 63
   19124:	a0 e0       	ldi	r26, 0x00	; 0
   19126:	ed b7       	in	r30, 0x3d	; 61
   19128:	fe b7       	in	r31, 0x3e	; 62
   1912a:	81 83       	std	Z+1, r24	; 0x01
   1912c:	92 83       	std	Z+2, r25	; 0x02
   1912e:	a3 83       	std	Z+3, r26	; 0x03
   19130:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   19134:	80 e0       	ldi	r24, 0x00	; 0
   19136:	90 e0       	ldi	r25, 0x00	; 0
   19138:	0d a5       	ldd	r16, Y+45	; 0x2d
   1913a:	1e a5       	ldd	r17, Y+46	; 0x2e
   1913c:	2f a5       	ldd	r18, Y+47	; 0x2f
   1913e:	38 a9       	ldd	r19, Y+48	; 0x30
   19140:	4d a9       	ldd	r20, Y+53	; 0x35
   19142:	5e a9       	ldd	r21, Y+54	; 0x36
   19144:	6f a9       	ldd	r22, Y+55	; 0x37
   19146:	78 ad       	ldd	r23, Y+56	; 0x38
   19148:	40 0f       	add	r20, r16
   1914a:	51 1f       	adc	r21, r17
   1914c:	62 1f       	adc	r22, r18
   1914e:	73 1f       	adc	r23, r19
   19150:	0c 81       	ldd	r16, Y+4	; 0x04
   19152:	1d 81       	ldd	r17, Y+5	; 0x05
   19154:	2e 81       	ldd	r18, Y+6	; 0x06
   19156:	3f 81       	ldd	r19, Y+7	; 0x07
   19158:	04 17       	cp	r16, r20
   1915a:	15 07       	cpc	r17, r21
   1915c:	26 07       	cpc	r18, r22
   1915e:	37 07       	cpc	r19, r23
   19160:	90 f4       	brcc	.+36     	; 0x19186 <lif_check_volume+0x1ca>
   19162:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19166:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1916a:	92 ff       	sbrs	r25, 2
   1916c:	0a c0       	rjmp	.+20     	; 0x19182 <lif_check_volume+0x1c6>
   1916e:	88 e5       	ldi	r24, 0x58	; 88
   19170:	9f e3       	ldi	r25, 0x3F	; 63
   19172:	a0 e0       	ldi	r26, 0x00	; 0
   19174:	ed b7       	in	r30, 0x3d	; 61
   19176:	fe b7       	in	r31, 0x3e	; 62
   19178:	81 83       	std	Z+1, r24	; 0x01
   1917a:	92 83       	std	Z+2, r25	; 0x02
   1917c:	a3 83       	std	Z+3, r26	; 0x03
   1917e:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   19182:	80 e0       	ldi	r24, 0x00	; 0
   19184:	90 e0       	ldi	r25, 0x00	; 0
   19186:	cd b7       	in	r28, 0x3d	; 61
   19188:	de b7       	in	r29, 0x3e	; 62
   1918a:	27 96       	adiw	r28, 0x07	; 7
   1918c:	e4 e0       	ldi	r30, 0x04	; 4
   1918e:	0c 94 e5 e6 	jmp	0x1cdca	; 0x1cdca <__epilogue_restores__+0x1c>

00019192 <lif_check_dir>:
   19192:	a5 e1       	ldi	r26, 0x15	; 21
   19194:	b0 e0       	ldi	r27, 0x00	; 0
   19196:	ef ec       	ldi	r30, 0xCF	; 207
   19198:	f8 ec       	ldi	r31, 0xC8	; 200
   1919a:	0c 94 bb e6 	jmp	0x1cd76	; 0x1cd76 <__prologue_saves__>
   1919e:	6c 01       	movw	r12, r24
   191a0:	2a e5       	ldi	r18, 0x5A	; 90
   191a2:	c2 0e       	add	r12, r18
   191a4:	d1 1c       	adc	r13, r1
   191a6:	f6 01       	movw	r30, r12
   191a8:	20 81       	ld	r18, Z
   191aa:	31 81       	ldd	r19, Z+1	; 0x01
   191ac:	21 50       	subi	r18, 0x01	; 1
   191ae:	31 09       	sbc	r19, r1
   191b0:	2e 3f       	cpi	r18, 0xFE	; 254
   191b2:	3f 4f       	sbci	r19, 0xFF	; 255
   191b4:	08 f0       	brcs	.+2      	; 0x191b8 <lif_check_dir+0x26>
   191b6:	9a c1       	rjmp	.+820    	; 0x194ec <lif_check_dir+0x35a>
   191b8:	9d 8b       	std	Y+21, r25	; 0x15
   191ba:	8c 8b       	std	Y+20, r24	; 0x14
   191bc:	7c 01       	movw	r14, r24
   191be:	2f e4       	ldi	r18, 0x4F	; 79
   191c0:	e2 0e       	add	r14, r18
   191c2:	f1 1c       	adc	r15, r1
   191c4:	c7 01       	movw	r24, r14
   191c6:	e9 d9       	rcall	.-3118   	; 0x1859a <lif_checkname>
   191c8:	89 2b       	or	r24, r25
   191ca:	99 f4       	brne	.+38     	; 0x191f2 <lif_check_dir+0x60>
   191cc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   191d0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   191d4:	92 ff       	sbrs	r25, 2
   191d6:	0f c0       	rjmp	.+30     	; 0x191f6 <lif_check_dir+0x64>
   191d8:	ed b7       	in	r30, 0x3d	; 61
   191da:	fe b7       	in	r31, 0x3e	; 62
   191dc:	f5 82       	std	Z+5, r15	; 0x05
   191de:	e4 82       	std	Z+4, r14	; 0x04
   191e0:	87 e3       	ldi	r24, 0x37	; 55
   191e2:	9f e3       	ldi	r25, 0x3F	; 63
   191e4:	a0 e0       	ldi	r26, 0x00	; 0
   191e6:	81 83       	std	Z+1, r24	; 0x01
   191e8:	92 83       	std	Z+2, r25	; 0x02
   191ea:	a3 83       	std	Z+3, r26	; 0x03
   191ec:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   191f0:	02 c0       	rjmp	.+4      	; 0x191f6 <lif_check_dir+0x64>
   191f2:	01 e0       	ldi	r16, 0x01	; 1
   191f4:	01 c0       	rjmp	.+2      	; 0x191f8 <lif_check_dir+0x66>
   191f6:	00 e0       	ldi	r16, 0x00	; 0
   191f8:	10 e0       	ldi	r17, 0x00	; 0
   191fa:	ec 89       	ldd	r30, Y+20	; 0x14
   191fc:	fd 89       	ldd	r31, Y+21	; 0x15
   191fe:	84 85       	ldd	r24, Z+12	; 0x0c
   19200:	95 85       	ldd	r25, Z+13	; 0x0d
   19202:	a6 85       	ldd	r26, Z+14	; 0x0e
   19204:	b7 85       	ldd	r27, Z+15	; 0x0f
   19206:	00 97       	sbiw	r24, 0x00	; 0
   19208:	a1 05       	cpc	r26, r1
   1920a:	b1 05       	cpc	r27, r1
   1920c:	39 f1       	breq	.+78     	; 0x1925c <lif_check_dir+0xca>
   1920e:	e4 5a       	subi	r30, 0xA4	; 164
   19210:	ff 4f       	sbci	r31, 0xFF	; 255
   19212:	40 81       	ld	r20, Z
   19214:	51 81       	ldd	r21, Z+1	; 0x01
   19216:	62 81       	ldd	r22, Z+2	; 0x02
   19218:	73 81       	ldd	r23, Z+3	; 0x03
   1921a:	48 17       	cp	r20, r24
   1921c:	59 07       	cpc	r21, r25
   1921e:	6a 07       	cpc	r22, r26
   19220:	7b 07       	cpc	r23, r27
   19222:	e0 f4       	brcc	.+56     	; 0x1925c <lif_check_dir+0xca>
   19224:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   19228:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1922c:	32 ff       	sbrs	r19, 2
   1922e:	14 c0       	rjmp	.+40     	; 0x19258 <lif_check_dir+0xc6>
   19230:	ed b7       	in	r30, 0x3d	; 61
   19232:	fe b7       	in	r31, 0x3e	; 62
   19234:	82 87       	std	Z+10, r24	; 0x0a
   19236:	93 87       	std	Z+11, r25	; 0x0b
   19238:	a4 87       	std	Z+12, r26	; 0x0c
   1923a:	b5 87       	std	Z+13, r27	; 0x0d
   1923c:	46 83       	std	Z+6, r20	; 0x06
   1923e:	57 83       	std	Z+7, r21	; 0x07
   19240:	60 87       	std	Z+8, r22	; 0x08
   19242:	71 87       	std	Z+9, r23	; 0x09
   19244:	f5 82       	std	Z+5, r15	; 0x05
   19246:	e4 82       	std	Z+4, r14	; 0x04
   19248:	83 ef       	ldi	r24, 0xF3	; 243
   1924a:	9e e3       	ldi	r25, 0x3E	; 62
   1924c:	a0 e0       	ldi	r26, 0x00	; 0
   1924e:	81 83       	std	Z+1, r24	; 0x01
   19250:	92 83       	std	Z+2, r25	; 0x02
   19252:	a3 83       	std	Z+3, r26	; 0x03
   19254:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   19258:	00 e0       	ldi	r16, 0x00	; 0
   1925a:	10 e0       	ldi	r17, 0x00	; 0
   1925c:	ec 89       	ldd	r30, Y+20	; 0x14
   1925e:	fd 89       	ldd	r31, Y+21	; 0x15
   19260:	44 81       	ldd	r20, Z+4	; 0x04
   19262:	55 81       	ldd	r21, Z+5	; 0x05
   19264:	66 81       	ldd	r22, Z+6	; 0x06
   19266:	77 81       	ldd	r23, Z+7	; 0x07
   19268:	41 15       	cp	r20, r1
   1926a:	51 05       	cpc	r21, r1
   1926c:	61 05       	cpc	r22, r1
   1926e:	71 05       	cpc	r23, r1
   19270:	99 f1       	breq	.+102    	; 0x192d8 <lif_check_dir+0x146>
   19272:	e4 5a       	subi	r30, 0xA4	; 164
   19274:	ff 4f       	sbci	r31, 0xFF	; 255
   19276:	80 80       	ld	r8, Z
   19278:	91 80       	ldd	r9, Z+1	; 0x01
   1927a:	a2 80       	ldd	r10, Z+2	; 0x02
   1927c:	b3 80       	ldd	r11, Z+3	; 0x03
   1927e:	ec 89       	ldd	r30, Y+20	; 0x14
   19280:	fd 89       	ldd	r31, Y+21	; 0x15
   19282:	e0 5a       	subi	r30, 0xA0	; 160
   19284:	ff 4f       	sbci	r31, 0xFF	; 255
   19286:	80 81       	ld	r24, Z
   19288:	91 81       	ldd	r25, Z+1	; 0x01
   1928a:	a2 81       	ldd	r26, Z+2	; 0x02
   1928c:	b3 81       	ldd	r27, Z+3	; 0x03
   1928e:	88 0d       	add	r24, r8
   19290:	99 1d       	adc	r25, r9
   19292:	aa 1d       	adc	r26, r10
   19294:	bb 1d       	adc	r27, r11
   19296:	48 17       	cp	r20, r24
   19298:	59 07       	cpc	r21, r25
   1929a:	6a 07       	cpc	r22, r26
   1929c:	7b 07       	cpc	r23, r27
   1929e:	e0 f4       	brcc	.+56     	; 0x192d8 <lif_check_dir+0x146>
   192a0:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   192a4:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   192a8:	32 ff       	sbrs	r19, 2
   192aa:	14 c0       	rjmp	.+40     	; 0x192d4 <lif_check_dir+0x142>
   192ac:	ed b7       	in	r30, 0x3d	; 61
   192ae:	fe b7       	in	r31, 0x3e	; 62
   192b0:	42 87       	std	Z+10, r20	; 0x0a
   192b2:	53 87       	std	Z+11, r21	; 0x0b
   192b4:	64 87       	std	Z+12, r22	; 0x0c
   192b6:	75 87       	std	Z+13, r23	; 0x0d
   192b8:	86 83       	std	Z+6, r24	; 0x06
   192ba:	97 83       	std	Z+7, r25	; 0x07
   192bc:	a0 87       	std	Z+8, r26	; 0x08
   192be:	b1 87       	std	Z+9, r27	; 0x09
   192c0:	f5 82       	std	Z+5, r15	; 0x05
   192c2:	e4 82       	std	Z+4, r14	; 0x04
   192c4:	82 eb       	ldi	r24, 0xB2	; 178
   192c6:	9e e3       	ldi	r25, 0x3E	; 62
   192c8:	a0 e0       	ldi	r26, 0x00	; 0
   192ca:	81 83       	std	Z+1, r24	; 0x01
   192cc:	92 83       	std	Z+2, r25	; 0x02
   192ce:	a3 83       	std	Z+3, r26	; 0x03
   192d0:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   192d4:	00 e0       	ldi	r16, 0x00	; 0
   192d6:	10 e0       	ldi	r17, 0x00	; 0
   192d8:	ec 89       	ldd	r30, Y+20	; 0x14
   192da:	fd 89       	ldd	r31, Y+21	; 0x15
   192dc:	e6 59       	subi	r30, 0x96	; 150
   192de:	ff 4f       	sbci	r31, 0xFF	; 255
   192e0:	80 81       	ld	r24, Z
   192e2:	91 81       	ldd	r25, Z+1	; 0x01
   192e4:	81 30       	cpi	r24, 0x01	; 1
   192e6:	f0 e8       	ldi	r31, 0x80	; 128
   192e8:	9f 07       	cpc	r25, r31
   192ea:	b1 f0       	breq	.+44     	; 0x19318 <lif_check_dir+0x186>
   192ec:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   192f0:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   192f4:	32 ff       	sbrs	r19, 2
   192f6:	0e c0       	rjmp	.+28     	; 0x19314 <lif_check_dir+0x182>
   192f8:	ed b7       	in	r30, 0x3d	; 61
   192fa:	fe b7       	in	r31, 0x3e	; 62
   192fc:	97 83       	std	Z+7, r25	; 0x07
   192fe:	86 83       	std	Z+6, r24	; 0x06
   19300:	f5 82       	std	Z+5, r15	; 0x05
   19302:	e4 82       	std	Z+4, r14	; 0x04
   19304:	84 e8       	ldi	r24, 0x84	; 132
   19306:	9e e3       	ldi	r25, 0x3E	; 62
   19308:	a0 e0       	ldi	r26, 0x00	; 0
   1930a:	81 83       	std	Z+1, r24	; 0x01
   1930c:	92 83       	std	Z+2, r25	; 0x02
   1930e:	a3 83       	std	Z+3, r26	; 0x03
   19310:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   19314:	00 e0       	ldi	r16, 0x00	; 0
   19316:	10 e0       	ldi	r17, 0x00	; 0
   19318:	f6 01       	movw	r30, r12
   1931a:	80 81       	ld	r24, Z
   1931c:	91 81       	ldd	r25, Z+1	; 0x01
   1931e:	8c 7f       	andi	r24, 0xFC	; 252
   19320:	80 31       	cpi	r24, 0x10	; 16
   19322:	90 4e       	sbci	r25, 0xE0	; 224
   19324:	09 f0       	breq	.+2      	; 0x19328 <lif_check_dir+0x196>
   19326:	b3 c0       	rjmp	.+358    	; 0x1948e <lif_check_dir+0x2fc>
   19328:	cc 88       	ldd	r12, Y+20	; 0x14
   1932a:	dd 88       	ldd	r13, Y+21	; 0x15
   1932c:	2c e6       	ldi	r18, 0x6C	; 108
   1932e:	c2 0e       	add	r12, r18
   19330:	d1 1c       	adc	r13, r1
   19332:	f6 01       	movw	r30, r12
   19334:	80 81       	ld	r24, Z
   19336:	91 81       	ldd	r25, Z+1	; 0x01
   19338:	00 97       	sbiw	r24, 0x00	; 0
   1933a:	09 f4       	brne	.+2      	; 0x1933e <lif_check_dir+0x1ac>
   1933c:	a8 c0       	rjmp	.+336    	; 0x1948e <lif_check_dir+0x2fc>
   1933e:	4c 01       	movw	r8, r24
   19340:	a1 2c       	mov	r10, r1
   19342:	b1 2c       	mov	r11, r1
   19344:	77 27       	eor	r23, r23
   19346:	6b 2d       	mov	r22, r11
   19348:	5a 2d       	mov	r21, r10
   1934a:	49 2d       	mov	r20, r9
   1934c:	9c 01       	movw	r18, r24
   1934e:	33 27       	eor	r19, r19
   19350:	3b 8b       	std	Y+19, r19	; 0x13
   19352:	2a 8b       	std	Y+18, r18	; 0x12
   19354:	db 01       	movw	r26, r22
   19356:	ca 01       	movw	r24, r20
   19358:	23 2b       	or	r18, r19
   1935a:	19 f0       	breq	.+6      	; 0x19362 <lif_check_dir+0x1d0>
   1935c:	01 96       	adiw	r24, 0x01	; 1
   1935e:	a1 1d       	adc	r26, r1
   19360:	b1 1d       	adc	r27, r1
   19362:	2c 88       	ldd	r2, Y+20	; 0x14
   19364:	3d 88       	ldd	r3, Y+21	; 0x15
   19366:	30 e6       	ldi	r19, 0x60	; 96
   19368:	23 0e       	add	r2, r19
   1936a:	31 1c       	adc	r3, r1
   1936c:	f1 01       	movw	r30, r2
   1936e:	40 80       	ld	r4, Z
   19370:	51 80       	ldd	r5, Z+1	; 0x01
   19372:	62 80       	ldd	r6, Z+2	; 0x02
   19374:	73 80       	ldd	r7, Z+3	; 0x03
   19376:	48 16       	cp	r4, r24
   19378:	59 06       	cpc	r5, r25
   1937a:	6a 06       	cpc	r6, r26
   1937c:	7b 06       	cpc	r7, r27
   1937e:	40 f5       	brcc	.+80     	; 0x193d0 <lif_check_dir+0x23e>
   19380:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   19384:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19388:	32 ff       	sbrs	r19, 2
   1938a:	20 c0       	rjmp	.+64     	; 0x193cc <lif_check_dir+0x23a>
   1938c:	2a 89       	ldd	r18, Y+18	; 0x12
   1938e:	3b 89       	ldd	r19, Y+19	; 0x13
   19390:	23 2b       	or	r18, r19
   19392:	21 f0       	breq	.+8      	; 0x1939c <lif_check_dir+0x20a>
   19394:	4f 5f       	subi	r20, 0xFF	; 255
   19396:	5f 4f       	sbci	r21, 0xFF	; 255
   19398:	6f 4f       	sbci	r22, 0xFF	; 255
   1939a:	7f 4f       	sbci	r23, 0xFF	; 255
   1939c:	ed b7       	in	r30, 0x3d	; 61
   1939e:	fe b7       	in	r31, 0x3e	; 62
   193a0:	46 86       	std	Z+14, r4	; 0x0e
   193a2:	57 86       	std	Z+15, r5	; 0x0f
   193a4:	60 8a       	std	Z+16, r6	; 0x10
   193a6:	71 8a       	std	Z+17, r7	; 0x11
   193a8:	42 87       	std	Z+10, r20	; 0x0a
   193aa:	53 87       	std	Z+11, r21	; 0x0b
   193ac:	64 87       	std	Z+12, r22	; 0x0c
   193ae:	75 87       	std	Z+13, r23	; 0x0d
   193b0:	86 82       	std	Z+6, r8	; 0x06
   193b2:	97 82       	std	Z+7, r9	; 0x07
   193b4:	a0 86       	std	Z+8, r10	; 0x08
   193b6:	b1 86       	std	Z+9, r11	; 0x09
   193b8:	f5 82       	std	Z+5, r15	; 0x05
   193ba:	e4 82       	std	Z+4, r14	; 0x04
   193bc:	89 e3       	ldi	r24, 0x39	; 57
   193be:	9e e3       	ldi	r25, 0x3E	; 62
   193c0:	a0 e0       	ldi	r26, 0x00	; 0
   193c2:	81 83       	std	Z+1, r24	; 0x01
   193c4:	92 83       	std	Z+2, r25	; 0x02
   193c6:	a3 83       	std	Z+3, r26	; 0x03
   193c8:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   193cc:	00 e0       	ldi	r16, 0x00	; 0
   193ce:	10 e0       	ldi	r17, 0x00	; 0
   193d0:	f6 01       	movw	r30, r12
   193d2:	20 81       	ld	r18, Z
   193d4:	31 81       	ldd	r19, Z+1	; 0x01
   193d6:	a9 01       	movw	r20, r18
   193d8:	60 e0       	ldi	r22, 0x00	; 0
   193da:	70 e0       	ldi	r23, 0x00	; 0
   193dc:	bb 27       	eor	r27, r27
   193de:	a7 2f       	mov	r26, r23
   193e0:	96 2f       	mov	r25, r22
   193e2:	85 2f       	mov	r24, r21
   193e4:	f9 01       	movw	r30, r18
   193e6:	ff 27       	eor	r31, r31
   193e8:	fb 8b       	std	Y+19, r31	; 0x13
   193ea:	ea 8b       	std	Y+18, r30	; 0x12
   193ec:	2c 01       	movw	r4, r24
   193ee:	3d 01       	movw	r6, r26
   193f0:	ef 2b       	or	r30, r31
   193f2:	29 f0       	breq	.+10     	; 0x193fe <lif_check_dir+0x26c>
   193f4:	ff ef       	ldi	r31, 0xFF	; 255
   193f6:	4f 1a       	sub	r4, r31
   193f8:	5f 0a       	sbc	r5, r31
   193fa:	6f 0a       	sbc	r6, r31
   193fc:	7f 0a       	sbc	r7, r31
   193fe:	f1 01       	movw	r30, r2
   19400:	80 80       	ld	r8, Z
   19402:	91 80       	ldd	r9, Z+1	; 0x01
   19404:	a2 80       	ldd	r10, Z+2	; 0x02
   19406:	b3 80       	ldd	r11, Z+3	; 0x03
   19408:	48 14       	cp	r4, r8
   1940a:	59 04       	cpc	r5, r9
   1940c:	6a 04       	cpc	r6, r10
   1940e:	7b 04       	cpc	r7, r11
   19410:	28 f5       	brcc	.+74     	; 0x1945c <lif_check_dir+0x2ca>
   19412:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   19416:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1941a:	32 ff       	sbrs	r19, 2
   1941c:	1f c0       	rjmp	.+62     	; 0x1945c <lif_check_dir+0x2ca>
   1941e:	2a 89       	ldd	r18, Y+18	; 0x12
   19420:	3b 89       	ldd	r19, Y+19	; 0x13
   19422:	23 2b       	or	r18, r19
   19424:	19 f0       	breq	.+6      	; 0x1942c <lif_check_dir+0x29a>
   19426:	01 96       	adiw	r24, 0x01	; 1
   19428:	a1 1d       	adc	r26, r1
   1942a:	b1 1d       	adc	r27, r1
   1942c:	ed b7       	in	r30, 0x3d	; 61
   1942e:	fe b7       	in	r31, 0x3e	; 62
   19430:	86 86       	std	Z+14, r8	; 0x0e
   19432:	97 86       	std	Z+15, r9	; 0x0f
   19434:	a0 8a       	std	Z+16, r10	; 0x10
   19436:	b1 8a       	std	Z+17, r11	; 0x11
   19438:	82 87       	std	Z+10, r24	; 0x0a
   1943a:	93 87       	std	Z+11, r25	; 0x0b
   1943c:	a4 87       	std	Z+12, r26	; 0x0c
   1943e:	b5 87       	std	Z+13, r27	; 0x0d
   19440:	46 83       	std	Z+6, r20	; 0x06
   19442:	57 83       	std	Z+7, r21	; 0x07
   19444:	60 87       	std	Z+8, r22	; 0x08
   19446:	71 87       	std	Z+9, r23	; 0x09
   19448:	f5 82       	std	Z+5, r15	; 0x05
   1944a:	e4 82       	std	Z+4, r14	; 0x04
   1944c:	8e ee       	ldi	r24, 0xEE	; 238
   1944e:	9d e3       	ldi	r25, 0x3D	; 61
   19450:	a0 e0       	ldi	r26, 0x00	; 0
   19452:	81 83       	std	Z+1, r24	; 0x01
   19454:	92 83       	std	Z+2, r25	; 0x02
   19456:	a3 83       	std	Z+3, r26	; 0x03
   19458:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   1945c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19460:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19464:	92 ff       	sbrs	r25, 2
   19466:	13 c0       	rjmp	.+38     	; 0x1948e <lif_check_dir+0x2fc>
   19468:	f6 01       	movw	r30, r12
   1946a:	80 81       	ld	r24, Z
   1946c:	91 81       	ldd	r25, Z+1	; 0x01
   1946e:	89 2b       	or	r24, r25
   19470:	71 f4       	brne	.+28     	; 0x1948e <lif_check_dir+0x2fc>
   19472:	ed b7       	in	r30, 0x3d	; 61
   19474:	fe b7       	in	r31, 0x3e	; 62
   19476:	f5 82       	std	Z+5, r15	; 0x05
   19478:	e4 82       	std	Z+4, r14	; 0x04
   1947a:	83 ec       	ldi	r24, 0xC3	; 195
   1947c:	9d e3       	ldi	r25, 0x3D	; 61
   1947e:	a0 e0       	ldi	r26, 0x00	; 0
   19480:	81 83       	std	Z+1, r24	; 0x01
   19482:	92 83       	std	Z+2, r25	; 0x02
   19484:	a3 83       	std	Z+3, r26	; 0x03
   19486:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   1948a:	00 e0       	ldi	r16, 0x00	; 0
   1948c:	10 e0       	ldi	r17, 0x00	; 0
   1948e:	ec 89       	ldd	r30, Y+20	; 0x14
   19490:	fd 89       	ldd	r31, Y+21	; 0x15
   19492:	e2 59       	subi	r30, 0x92	; 146
   19494:	ff 4f       	sbci	r31, 0xFF	; 255
   19496:	20 81       	ld	r18, Z
   19498:	31 81       	ldd	r19, Z+1	; 0x01
   1949a:	21 15       	cp	r18, r1
   1949c:	f1 e0       	ldi	r31, 0x01	; 1
   1949e:	3f 07       	cpc	r19, r31
   194a0:	41 f1       	breq	.+80     	; 0x194f2 <lif_check_dir+0x360>
   194a2:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   194a6:	50 91 b7 01 	lds	r21, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   194aa:	ca 01       	movw	r24, r20
   194ac:	88 27       	eor	r24, r24
   194ae:	94 70       	andi	r25, 0x04	; 4
   194b0:	52 ff       	sbrs	r21, 2
   194b2:	20 c0       	rjmp	.+64     	; 0x194f4 <lif_check_dir+0x362>
   194b4:	c9 01       	movw	r24, r18
   194b6:	a0 e0       	ldi	r26, 0x00	; 0
   194b8:	b0 e0       	ldi	r27, 0x00	; 0
   194ba:	ed b7       	in	r30, 0x3d	; 61
   194bc:	fe b7       	in	r31, 0x3e	; 62
   194be:	86 83       	std	Z+6, r24	; 0x06
   194c0:	97 83       	std	Z+7, r25	; 0x07
   194c2:	a0 87       	std	Z+8, r26	; 0x08
   194c4:	b1 87       	std	Z+9, r27	; 0x09
   194c6:	ec 89       	ldd	r30, Y+20	; 0x14
   194c8:	fd 89       	ldd	r31, Y+21	; 0x15
   194ca:	80 81       	ld	r24, Z
   194cc:	91 81       	ldd	r25, Z+1	; 0x01
   194ce:	ed b7       	in	r30, 0x3d	; 61
   194d0:	fe b7       	in	r31, 0x3e	; 62
   194d2:	95 83       	std	Z+5, r25	; 0x05
   194d4:	84 83       	std	Z+4, r24	; 0x04
   194d6:	87 e9       	ldi	r24, 0x97	; 151
   194d8:	9d e3       	ldi	r25, 0x3D	; 61
   194da:	a0 e0       	ldi	r26, 0x00	; 0
   194dc:	81 83       	std	Z+1, r24	; 0x01
   194de:	92 83       	std	Z+2, r25	; 0x02
   194e0:	a3 83       	std	Z+3, r26	; 0x03
   194e2:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   194e6:	80 e0       	ldi	r24, 0x00	; 0
   194e8:	90 e0       	ldi	r25, 0x00	; 0
   194ea:	04 c0       	rjmp	.+8      	; 0x194f4 <lif_check_dir+0x362>
   194ec:	81 e0       	ldi	r24, 0x01	; 1
   194ee:	90 e0       	ldi	r25, 0x00	; 0
   194f0:	01 c0       	rjmp	.+2      	; 0x194f4 <lif_check_dir+0x362>
   194f2:	c8 01       	movw	r24, r16
   194f4:	65 96       	adiw	r28, 0x15	; 21
   194f6:	e2 e1       	ldi	r30, 0x12	; 18
   194f8:	0c 94 d7 e6 	jmp	0x1cdae	; 0x1cdae <__epilogue_restores__>

000194fc <lif_close_volume>:
   194fc:	cf 93       	push	r28
   194fe:	df 93       	push	r29
   19500:	00 97       	sbiw	r24, 0x00	; 0
   19502:	f9 f0       	breq	.+62     	; 0x19542 <lif_close_volume+0x46>
   19504:	ec 01       	movw	r28, r24
   19506:	8a 81       	ldd	r24, Y+2	; 0x02
   19508:	9b 81       	ldd	r25, Y+3	; 0x03
   1950a:	00 97       	sbiw	r24, 0x00	; 0
   1950c:	79 f0       	breq	.+30     	; 0x1952c <lif_close_volume+0x30>
   1950e:	22 e0       	ldi	r18, 0x02	; 2
   19510:	30 e0       	ldi	r19, 0x00	; 0
   19512:	40 e0       	ldi	r20, 0x00	; 0
   19514:	50 e0       	ldi	r21, 0x00	; 0
   19516:	ba 01       	movw	r22, r20
   19518:	0e 94 ec 7a 	call	0xf5d8	; 0xf5d8 <fseek>
   1951c:	8a 81       	ldd	r24, Y+2	; 0x02
   1951e:	9b 81       	ldd	r25, Y+3	; 0x03
   19520:	0e 94 d4 7c 	call	0xf9a8	; 0xf9a8 <fclose>
   19524:	1b 82       	std	Y+3, r1	; 0x03
   19526:	1a 82       	std	Y+2, r1	; 0x02
   19528:	0e 94 cf 7b 	call	0xf79e	; 0xf79e <sync>
   1952c:	88 81       	ld	r24, Y
   1952e:	99 81       	ldd	r25, Y+1	; 0x01
   19530:	00 97       	sbiw	r24, 0x00	; 0
   19532:	11 f0       	breq	.+4      	; 0x19538 <lif_close_volume+0x3c>
   19534:	0e 94 fa c0 	call	0x181f4	; 0x181f4 <lif_free>
   19538:	ce 01       	movw	r24, r28
   1953a:	73 db       	rcall	.-2330   	; 0x18c22 <lif_vol_clear>
   1953c:	ce 01       	movw	r24, r28
   1953e:	0e 94 fa c0 	call	0x181f4	; 0x181f4 <lif_free>
   19542:	df 91       	pop	r29
   19544:	cf 91       	pop	r28
   19546:	08 95       	ret

00019548 <lif_checkdirindex>:
   19548:	cf 92       	push	r12
   1954a:	df 92       	push	r13
   1954c:	ef 92       	push	r14
   1954e:	ff 92       	push	r15
   19550:	cf 93       	push	r28
   19552:	df 93       	push	r29
   19554:	ad b7       	in	r26, 0x3d	; 61
   19556:	be b7       	in	r27, 0x3e	; 62
   19558:	17 97       	sbiw	r26, 0x07	; 7
   1955a:	0f b6       	in	r0, 0x3f	; 63
   1955c:	f8 94       	cli
   1955e:	be bf       	out	0x3e, r27	; 62
   19560:	0f be       	out	0x3f, r0	; 63
   19562:	ad bf       	out	0x3d, r26	; 61
   19564:	9b 01       	movw	r18, r22
   19566:	77 fd       	sbrc	r23, 7
   19568:	25 c0       	rjmp	.+74     	; 0x195b4 <lif_checkdirindex+0x6c>
   1956a:	ab 01       	movw	r20, r22
   1956c:	77 0f       	add	r23, r23
   1956e:	66 0b       	sbc	r22, r22
   19570:	77 0b       	sbc	r23, r23
   19572:	e5 e0       	ldi	r30, 0x05	; 5
   19574:	44 0f       	add	r20, r20
   19576:	55 1f       	adc	r21, r21
   19578:	66 1f       	adc	r22, r22
   1957a:	77 1f       	adc	r23, r23
   1957c:	ea 95       	dec	r30
   1957e:	d1 f7       	brne	.-12     	; 0x19574 <lif_checkdirindex+0x2c>
   19580:	c5 2e       	mov	r12, r21
   19582:	d6 2e       	mov	r13, r22
   19584:	e7 2e       	mov	r14, r23
   19586:	ff 24       	eor	r15, r15
   19588:	55 27       	eor	r21, r21
   1958a:	66 27       	eor	r22, r22
   1958c:	77 27       	eor	r23, r23
   1958e:	45 2b       	or	r20, r21
   19590:	46 2b       	or	r20, r22
   19592:	47 2b       	or	r20, r23
   19594:	29 f0       	breq	.+10     	; 0x195a0 <lif_checkdirindex+0x58>
   19596:	4f ef       	ldi	r20, 0xFF	; 255
   19598:	c4 1a       	sub	r12, r20
   1959a:	d4 0a       	sbc	r13, r20
   1959c:	e4 0a       	sbc	r14, r20
   1959e:	f4 0a       	sbc	r15, r20
   195a0:	fc 01       	movw	r30, r24
   195a2:	45 a9       	ldd	r20, Z+53	; 0x35
   195a4:	56 a9       	ldd	r21, Z+54	; 0x36
   195a6:	67 a9       	ldd	r22, Z+55	; 0x37
   195a8:	70 ad       	ldd	r23, Z+56	; 0x38
   195aa:	4c 15       	cp	r20, r12
   195ac:	5d 05       	cpc	r21, r13
   195ae:	6e 05       	cpc	r22, r14
   195b0:	7f 05       	cpc	r23, r15
   195b2:	08 f5       	brcc	.+66     	; 0x195f6 <lif_checkdirindex+0xae>
   195b4:	ec 01       	movw	r28, r24
   195b6:	ed b7       	in	r30, 0x3d	; 61
   195b8:	fe b7       	in	r31, 0x3e	; 62
   195ba:	37 83       	std	Z+7, r19	; 0x07
   195bc:	26 83       	std	Z+6, r18	; 0x06
   195be:	88 81       	ld	r24, Y
   195c0:	99 81       	ldd	r25, Y+1	; 0x01
   195c2:	95 83       	std	Z+5, r25	; 0x05
   195c4:	84 83       	std	Z+4, r24	; 0x04
   195c6:	84 ed       	ldi	r24, 0xD4	; 212
   195c8:	9c e3       	ldi	r25, 0x3C	; 60
   195ca:	a0 e0       	ldi	r26, 0x00	; 0
   195cc:	81 83       	std	Z+1, r24	; 0x01
   195ce:	92 83       	std	Z+2, r25	; 0x02
   195d0:	a3 83       	std	Z+3, r26	; 0x03
   195d2:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   195d6:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   195da:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   195de:	c9 01       	movw	r24, r18
   195e0:	88 27       	eor	r24, r24
   195e2:	94 70       	andi	r25, 0x04	; 4
   195e4:	32 ff       	sbrs	r19, 2
   195e6:	09 c0       	rjmp	.+18     	; 0x195fa <lif_checkdirindex+0xb2>
   195e8:	60 ef       	ldi	r22, 0xF0	; 240
   195ea:	75 e1       	ldi	r23, 0x15	; 21
   195ec:	ce 01       	movw	r24, r28
   195ee:	20 db       	rcall	.-2496   	; 0x18c30 <lif_dump_vol>
   195f0:	80 e0       	ldi	r24, 0x00	; 0
   195f2:	90 e0       	ldi	r25, 0x00	; 0
   195f4:	02 c0       	rjmp	.+4      	; 0x195fa <lif_checkdirindex+0xb2>
   195f6:	81 e0       	ldi	r24, 0x01	; 1
   195f8:	90 e0       	ldi	r25, 0x00	; 0
   195fa:	ad b7       	in	r26, 0x3d	; 61
   195fc:	be b7       	in	r27, 0x3e	; 62
   195fe:	17 96       	adiw	r26, 0x07	; 7
   19600:	0f b6       	in	r0, 0x3f	; 63
   19602:	f8 94       	cli
   19604:	be bf       	out	0x3e, r27	; 62
   19606:	0f be       	out	0x3f, r0	; 63
   19608:	ad bf       	out	0x3d, r26	; 61
   1960a:	df 91       	pop	r29
   1960c:	cf 91       	pop	r28
   1960e:	ff 90       	pop	r15
   19610:	ef 90       	pop	r14
   19612:	df 90       	pop	r13
   19614:	cf 90       	pop	r12
   19616:	08 95       	ret

00019618 <lif_readdirindex>:
   19618:	a5 e2       	ldi	r26, 0x25	; 37
   1961a:	b0 e0       	ldi	r27, 0x00	; 0
   1961c:	e2 e1       	ldi	r30, 0x12	; 18
   1961e:	fb ec       	ldi	r31, 0xCB	; 203
   19620:	0c 94 c5 e6 	jmp	0x1cd8a	; 0x1cd8a <__prologue_saves__+0x14>
   19624:	7c 01       	movw	r14, r24
   19626:	6b 01       	movw	r12, r22
   19628:	8f df       	rcall	.-226    	; 0x19548 <lif_checkdirindex>
   1962a:	89 2b       	or	r24, r25
   1962c:	19 f4       	brne	.+6      	; 0x19634 <lif_readdirindex+0x1c>
   1962e:	00 e0       	ldi	r16, 0x00	; 0
   19630:	10 e0       	ldi	r17, 0x00	; 0
   19632:	54 c0       	rjmp	.+168    	; 0x196dc <lif_readdirindex+0xc4>
   19634:	f7 01       	movw	r30, r14
   19636:	85 a5       	ldd	r24, Z+45	; 0x2d
   19638:	96 a5       	ldd	r25, Z+46	; 0x2e
   1963a:	a7 a5       	ldd	r26, Z+47	; 0x2f
   1963c:	b0 a9       	ldd	r27, Z+48	; 0x30
   1963e:	44 27       	eor	r20, r20
   19640:	58 2f       	mov	r21, r24
   19642:	69 2f       	mov	r22, r25
   19644:	7a 2f       	mov	r23, r26
   19646:	c6 01       	movw	r24, r12
   19648:	0d 2c       	mov	r0, r13
   1964a:	00 0c       	add	r0, r0
   1964c:	aa 0b       	sbc	r26, r26
   1964e:	bb 0b       	sbc	r27, r27
   19650:	35 e0       	ldi	r19, 0x05	; 5
   19652:	88 0f       	add	r24, r24
   19654:	99 1f       	adc	r25, r25
   19656:	aa 1f       	adc	r26, r26
   19658:	bb 1f       	adc	r27, r27
   1965a:	3a 95       	dec	r19
   1965c:	d1 f7       	brne	.-12     	; 0x19652 <lif_readdirindex+0x3a>
   1965e:	9a 01       	movw	r18, r20
   19660:	ab 01       	movw	r20, r22
   19662:	28 0f       	add	r18, r24
   19664:	39 1f       	adc	r19, r25
   19666:	4a 1f       	adc	r20, r26
   19668:	5b 1f       	adc	r21, r27
   1966a:	00 e2       	ldi	r16, 0x20	; 32
   1966c:	10 e0       	ldi	r17, 0x00	; 0
   1966e:	be 01       	movw	r22, r28
   19670:	6a 5f       	subi	r22, 0xFA	; 250
   19672:	7f 4f       	sbci	r23, 0xFF	; 255
   19674:	c7 01       	movw	r24, r14
   19676:	0e 94 b2 c1 	call	0x18364	; 0x18364 <lif_read>
   1967a:	60 32       	cpi	r22, 0x20	; 32
   1967c:	71 05       	cpc	r23, r1
   1967e:	81 05       	cpc	r24, r1
   19680:	91 05       	cpc	r25, r1
   19682:	a8 f2       	brcs	.-86     	; 0x1962e <lif_readdirindex+0x16>
   19684:	b7 01       	movw	r22, r14
   19686:	ce 01       	movw	r24, r28
   19688:	06 96       	adiw	r24, 0x06	; 6
   1968a:	75 d9       	rcall	.-3350   	; 0x18976 <lif_str2dir>
   1968c:	f7 01       	movw	r30, r14
   1968e:	e6 5a       	subi	r30, 0xA6	; 166
   19690:	ff 4f       	sbci	r31, 0xFF	; 255
   19692:	80 81       	ld	r24, Z
   19694:	91 81       	ldd	r25, Z+1	; 0x01
   19696:	01 96       	adiw	r24, 0x01	; 1
   19698:	19 f4       	brne	.+6      	; 0x196a0 <lif_readdirindex+0x88>
   1969a:	f7 01       	movw	r30, r14
   1969c:	d3 a2       	std	Z+35, r13	; 0x23
   1969e:	c2 a2       	std	Z+34, r12	; 0x22
   196a0:	c7 01       	movw	r24, r14
   196a2:	77 dd       	rcall	.-1298   	; 0x19192 <lif_check_dir>
   196a4:	8c 01       	movw	r16, r24
   196a6:	89 2b       	or	r24, r25
   196a8:	b9 f4       	brne	.+46     	; 0x196d8 <lif_readdirindex+0xc0>
   196aa:	ed b7       	in	r30, 0x3d	; 61
   196ac:	fe b7       	in	r31, 0x3e	; 62
   196ae:	d5 82       	std	Z+5, r13	; 0x05
   196b0:	c4 82       	std	Z+4, r12	; 0x04
   196b2:	84 eb       	ldi	r24, 0xB4	; 180
   196b4:	9c e3       	ldi	r25, 0x3C	; 60
   196b6:	a0 e0       	ldi	r26, 0x00	; 0
   196b8:	81 83       	std	Z+1, r24	; 0x01
   196ba:	92 83       	std	Z+2, r25	; 0x02
   196bc:	a3 83       	std	Z+3, r26	; 0x03
   196be:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   196c2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   196c6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   196ca:	92 ff       	sbrs	r25, 2
   196cc:	b0 cf       	rjmp	.-160    	; 0x1962e <lif_readdirindex+0x16>
   196ce:	61 e0       	ldi	r22, 0x01	; 1
   196d0:	76 e1       	ldi	r23, 0x16	; 22
   196d2:	c7 01       	movw	r24, r14
   196d4:	ad da       	rcall	.-2726   	; 0x18c30 <lif_dump_vol>
   196d6:	02 c0       	rjmp	.+4      	; 0x196dc <lif_readdirindex+0xc4>
   196d8:	01 e0       	ldi	r16, 0x01	; 1
   196da:	10 e0       	ldi	r17, 0x00	; 0
   196dc:	c8 01       	movw	r24, r16
   196de:	a5 96       	adiw	r28, 0x25	; 37
   196e0:	e8 e0       	ldi	r30, 0x08	; 8
   196e2:	0c 94 e1 e6 	jmp	0x1cdc2	; 0x1cdc2 <__epilogue_restores__+0x14>

000196e6 <lif_writedirindex>:
   196e6:	a0 e2       	ldi	r26, 0x20	; 32
   196e8:	b0 e0       	ldi	r27, 0x00	; 0
   196ea:	e9 e7       	ldi	r30, 0x79	; 121
   196ec:	fb ec       	ldi	r31, 0xCB	; 203
   196ee:	0c 94 c3 e6 	jmp	0x1cd86	; 0x1cd86 <__prologue_saves__+0x10>
   196f2:	5c 01       	movw	r10, r24
   196f4:	6b 01       	movw	r12, r22
   196f6:	4d dd       	rcall	.-1382   	; 0x19192 <lif_check_dir>
   196f8:	7c 01       	movw	r14, r24
   196fa:	89 2b       	or	r24, r25
   196fc:	71 f4       	brne	.+28     	; 0x1971a <lif_writedirindex+0x34>
   196fe:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19702:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19706:	92 fd       	sbrc	r25, 2
   19708:	03 c0       	rjmp	.+6      	; 0x19710 <lif_writedirindex+0x2a>
   1970a:	e1 2c       	mov	r14, r1
   1970c:	f1 2c       	mov	r15, r1
   1970e:	42 c0       	rjmp	.+132    	; 0x19794 <lif_writedirindex+0xae>
   19710:	62 e1       	ldi	r22, 0x12	; 18
   19712:	76 e1       	ldi	r23, 0x16	; 22
   19714:	c5 01       	movw	r24, r10
   19716:	8c da       	rcall	.-2792   	; 0x18c30 <lif_dump_vol>
   19718:	3d c0       	rjmp	.+122    	; 0x19794 <lif_writedirindex+0xae>
   1971a:	b6 01       	movw	r22, r12
   1971c:	c5 01       	movw	r24, r10
   1971e:	14 df       	rcall	.-472    	; 0x19548 <lif_checkdirindex>
   19720:	89 2b       	or	r24, r25
   19722:	99 f3       	breq	.-26     	; 0x1970a <lif_writedirindex+0x24>
   19724:	f5 01       	movw	r30, r10
   19726:	e6 5a       	subi	r30, 0xA6	; 166
   19728:	ff 4f       	sbci	r31, 0xFF	; 255
   1972a:	80 81       	ld	r24, Z
   1972c:	91 81       	ldd	r25, Z+1	; 0x01
   1972e:	01 96       	adiw	r24, 0x01	; 1
   19730:	19 f4       	brne	.+6      	; 0x19738 <lif_writedirindex+0x52>
   19732:	f5 01       	movw	r30, r10
   19734:	d3 a2       	std	Z+35, r13	; 0x23
   19736:	c2 a2       	std	Z+34, r12	; 0x22
   19738:	f5 01       	movw	r30, r10
   1973a:	85 a5       	ldd	r24, Z+45	; 0x2d
   1973c:	96 a5       	ldd	r25, Z+46	; 0x2e
   1973e:	a7 a5       	ldd	r26, Z+47	; 0x2f
   19740:	b0 a9       	ldd	r27, Z+48	; 0x30
   19742:	ba 2f       	mov	r27, r26
   19744:	a9 2f       	mov	r26, r25
   19746:	98 2f       	mov	r25, r24
   19748:	88 27       	eor	r24, r24
   1974a:	0d 2c       	mov	r0, r13
   1974c:	00 0c       	add	r0, r0
   1974e:	ee 08       	sbc	r14, r14
   19750:	ff 08       	sbc	r15, r15
   19752:	35 e0       	ldi	r19, 0x05	; 5
   19754:	cc 0c       	add	r12, r12
   19756:	dd 1c       	adc	r13, r13
   19758:	ee 1c       	adc	r14, r14
   1975a:	ff 1c       	adc	r15, r15
   1975c:	3a 95       	dec	r19
   1975e:	d1 f7       	brne	.-12     	; 0x19754 <lif_writedirindex+0x6e>
   19760:	c8 0e       	add	r12, r24
   19762:	d9 1e       	adc	r13, r25
   19764:	ea 1e       	adc	r14, r26
   19766:	fb 1e       	adc	r15, r27
   19768:	be 01       	movw	r22, r28
   1976a:	6f 5f       	subi	r22, 0xFF	; 255
   1976c:	7f 4f       	sbci	r23, 0xFF	; 255
   1976e:	c5 01       	movw	r24, r10
   19770:	97 d8       	rcall	.-3794   	; 0x188a0 <lif_dir2str>
   19772:	00 e2       	ldi	r16, 0x20	; 32
   19774:	10 e0       	ldi	r17, 0x00	; 0
   19776:	a7 01       	movw	r20, r14
   19778:	96 01       	movw	r18, r12
   1977a:	be 01       	movw	r22, r28
   1977c:	6f 5f       	subi	r22, 0xFF	; 255
   1977e:	7f 4f       	sbci	r23, 0xFF	; 255
   19780:	c5 01       	movw	r24, r10
   19782:	0e 94 05 c2 	call	0x1840a	; 0x1840a <lif_write>
   19786:	31 e0       	ldi	r19, 0x01	; 1
   19788:	20 e0       	ldi	r18, 0x00	; 0
   1978a:	80 97       	sbiw	r24, 0x20	; 32
   1978c:	0c f4       	brge	.+2      	; 0x19790 <lif_writedirindex+0xaa>
   1978e:	30 e0       	ldi	r19, 0x00	; 0
   19790:	e3 2e       	mov	r14, r19
   19792:	f2 2e       	mov	r15, r18
   19794:	c7 01       	movw	r24, r14
   19796:	a0 96       	adiw	r28, 0x20	; 32
   19798:	ea e0       	ldi	r30, 0x0A	; 10
   1979a:	0c 94 df e6 	jmp	0x1cdbe	; 0x1cdbe <__epilogue_restores__+0x10>

0001979e <lif_writedirEOF>:
   1979e:	0f 93       	push	r16
   197a0:	1f 93       	push	r17
   197a2:	cf 93       	push	r28
   197a4:	df 93       	push	r29
   197a6:	ec 01       	movw	r28, r24
   197a8:	8b 01       	movw	r16, r22
   197aa:	33 da       	rcall	.-2970   	; 0x18c12 <lif_dir_clear>
   197ac:	fe 01       	movw	r30, r28
   197ae:	e6 5a       	subi	r30, 0xA6	; 166
   197b0:	ff 4f       	sbci	r31, 0xFF	; 255
   197b2:	8f ef       	ldi	r24, 0xFF	; 255
   197b4:	9f ef       	ldi	r25, 0xFF	; 255
   197b6:	91 83       	std	Z+1, r25	; 0x01
   197b8:	80 83       	st	Z, r24
   197ba:	1b a3       	std	Y+35, r17	; 0x23
   197bc:	0a a3       	std	Y+34, r16	; 0x22
   197be:	b8 01       	movw	r22, r16
   197c0:	ce 01       	movw	r24, r28
   197c2:	91 df       	rcall	.-222    	; 0x196e6 <lif_writedirindex>
   197c4:	df 91       	pop	r29
   197c6:	cf 91       	pop	r28
   197c8:	1f 91       	pop	r17
   197ca:	0f 91       	pop	r16
   197cc:	08 95       	ret

000197ce <lif_updatefree>:
/// @brief Update free space
/// @parameter[in] *LIF: LIF structure
/// @return: LIF or NULL on error
MEMSPACE
lif_t *lif_updatefree(lif_t *LIF)
{
   197ce:	2f 92       	push	r2
   197d0:	3f 92       	push	r3
   197d2:	4f 92       	push	r4
   197d4:	5f 92       	push	r5
   197d6:	6f 92       	push	r6
   197d8:	7f 92       	push	r7
   197da:	8f 92       	push	r8
   197dc:	af 92       	push	r10
   197de:	bf 92       	push	r11
   197e0:	cf 92       	push	r12
   197e2:	df 92       	push	r13
   197e4:	ef 92       	push	r14
   197e6:	ff 92       	push	r15
   197e8:	0f 93       	push	r16
   197ea:	1f 93       	push	r17
   197ec:	cf 93       	push	r28
   197ee:	df 93       	push	r29
   197f0:	cd b7       	in	r28, 0x3d	; 61
   197f2:	de b7       	in	r29, 0x3e	; 62
   197f4:	2f 97       	sbiw	r28, 0x0f	; 15
   197f6:	0f b6       	in	r0, 0x3f	; 63
   197f8:	f8 94       	cli
   197fa:	de bf       	out	0x3e, r29	; 62
   197fc:	0f be       	out	0x3f, r0	; 63
   197fe:	cd bf       	out	0x3d, r28	; 61
   19800:	9f 87       	std	Y+15, r25	; 0x0f
   19802:	8e 87       	std	Y+14, r24	; 0x0e
    int index = 0;
    int purgeindex = -1;

// Start of free space
    uint32_t start = LIF->filestart;
   19804:	fc 01       	movw	r30, r24
   19806:	24 84       	ldd	r2, Z+12	; 0x0c
   19808:	35 84       	ldd	r3, Z+13	; 0x0d
   1980a:	46 84       	ldd	r4, Z+14	; 0x0e
   1980c:	57 84       	ldd	r5, Z+15	; 0x0f
// Free sectors
    LIF->freesectors = LIF->filesectors;
   1980e:	80 89       	ldd	r24, Z+16	; 0x10
   19810:	91 89       	ldd	r25, Z+17	; 0x11
   19812:	a2 89       	ldd	r26, Z+18	; 0x12
   19814:	b3 89       	ldd	r27, Z+19	; 0x13
   19816:	80 8f       	std	Z+24, r24	; 0x18
   19818:	91 8f       	std	Z+25, r25	; 0x19
   1981a:	a2 8f       	std	Z+26, r26	; 0x1a
   1981c:	b3 8f       	std	Z+27, r27	; 0x1b
// Used sectors
    LIF->usedsectors = 0;
   1981e:	14 8a       	std	Z+20, r1	; 0x14
   19820:	15 8a       	std	Z+21, r1	; 0x15
   19822:	16 8a       	std	Z+22, r1	; 0x16
   19824:	17 8a       	std	Z+23, r1	; 0x17
// Purged files
    LIF->purged= 0;
   19826:	17 8e       	std	Z+31, r1	; 0x1f
   19828:	16 8e       	std	Z+30, r1	; 0x1e
// Files
    LIF->files = 0;
   1982a:	15 8e       	std	Z+29, r1	; 0x1d
   1982c:	14 8e       	std	Z+28, r1	; 0x1c
// Director pointer
    LIF->dirindex = 0;
   1982e:	11 a2       	std	Z+33, r1	; 0x21
   19830:	10 a2       	std	Z+32, r1	; 0x20
// Directory EOF record
    LIF->EOFindex = 0;
   19832:	13 a2       	std	Z+35, r1	; 0x23
   19834:	12 a2       	std	Z+34, r1	; 0x22
   19836:	cc 24       	eor	r12, r12
   19838:	c3 94       	inc	r12
   1983a:	d1 2c       	mov	r13, r1
/// @return: LIF or NULL on error
MEMSPACE
lif_t *lif_updatefree(lif_t *LIF)
{
    int index = 0;
    int purgeindex = -1;
   1983c:	0f ef       	ldi	r16, 0xFF	; 255
   1983e:	1f ef       	ldi	r17, 0xFF	; 255
        if( !lif_readdirindex(LIF,index) )
        {
            return(NULL);
        }

        if(LIF->DIR.FileType == 0xffff)
   19840:	e6 5a       	subi	r30, 0xA6	; 166
   19842:	ff 4f       	sbci	r31, 0xFF	; 255
   19844:	f9 87       	std	Y+9, r31	; 0x09
   19846:	e8 87       	std	Y+8, r30	; 0x08
            LIF->purged++;
            ++index;
            continue;
        }
        purgeindex = -1;
        if(start > LIF->DIR.FileStartSector)
   19848:	ae 84       	ldd	r10, Y+14	; 0x0e
   1984a:	bf 84       	ldd	r11, Y+15	; 0x0f
   1984c:	fc e5       	ldi	r31, 0x5C	; 92
   1984e:	af 0e       	add	r10, r31
   19850:	b1 1c       	adc	r11, r1
        {
            if(debuglevel & LIF_DEBUG)
                printf("lif_update_free:[%s] error previous record file area overlaps this one:[%s]\n", LIF->name, LIF->DIR.filename);

        }
        LIF->usedsectors += LIF->DIR.FileSectors;
   19852:	8e 85       	ldd	r24, Y+14	; 0x0e
   19854:	9f 85       	ldd	r25, Y+15	; 0x0f
   19856:	80 5a       	subi	r24, 0xA0	; 160
   19858:	9f 4f       	sbci	r25, 0xFF	; 255
   1985a:	9b 87       	std	Y+11, r25	; 0x0b
   1985c:	8a 87       	std	Y+10, r24	; 0x0a
        }
        purgeindex = -1;
        if(start > LIF->DIR.FileStartSector)
        {
            if(debuglevel & LIF_DEBUG)
                printf("lif_update_free:[%s] error previous record file area overlaps this one:[%s]\n", LIF->name, LIF->DIR.filename);
   1985e:	ee 85       	ldd	r30, Y+14	; 0x0e
   19860:	ff 85       	ldd	r31, Y+15	; 0x0f
   19862:	e1 5b       	subi	r30, 0xB1	; 177
   19864:	ff 4f       	sbci	r31, 0xFF	; 255
   19866:	fd 87       	std	Y+13, r31	; 0x0d
   19868:	ec 87       	std	Y+12, r30	; 0x0c
   1986a:	87 e6       	ldi	r24, 0x67	; 103
   1986c:	9c e3       	ldi	r25, 0x3C	; 60
   1986e:	3c 01       	movw	r6, r24
   19870:	81 2c       	mov	r8, r1
   19872:	76 01       	movw	r14, r12
   19874:	21 e0       	ldi	r18, 0x01	; 1
   19876:	e2 1a       	sub	r14, r18
   19878:	f1 08       	sbc	r15, r1
    LIF->EOFindex = 0;

/// Update free
    while(1)
    {
        if( !lif_readdirindex(LIF,index) )
   1987a:	b7 01       	movw	r22, r14
   1987c:	8e 85       	ldd	r24, Y+14	; 0x0e
   1987e:	9f 85       	ldd	r25, Y+15	; 0x0f
   19880:	cb de       	rcall	.-618    	; 0x19618 <lif_readdirindex>
   19882:	89 2b       	or	r24, r25
   19884:	19 f4       	brne	.+6      	; 0x1988c <lif_updatefree+0xbe>
        {
            return(NULL);
   19886:	80 e0       	ldi	r24, 0x00	; 0
   19888:	90 e0       	ldi	r25, 0x00	; 0
   1988a:	93 c0       	rjmp	.+294    	; 0x199b2 <lif_updatefree+0x1e4>
        }

        if(LIF->DIR.FileType == 0xffff)
   1988c:	e8 85       	ldd	r30, Y+8	; 0x08
   1988e:	f9 85       	ldd	r31, Y+9	; 0x09
   19890:	80 81       	ld	r24, Z
   19892:	91 81       	ldd	r25, Z+1	; 0x01
   19894:	8f 3f       	cpi	r24, 0xFF	; 255
   19896:	ff ef       	ldi	r31, 0xFF	; 255
   19898:	9f 07       	cpc	r25, r31
   1989a:	c1 f4       	brne	.+48     	; 0x198cc <lif_updatefree+0xfe>
        {
            LIF->EOFindex = index;
            if(purgeindex != -1)
            {
                LIF->EOFindex = purgeindex;
   1989c:	ee 85       	ldd	r30, Y+14	; 0x0e
   1989e:	ff 85       	ldd	r31, Y+15	; 0x0f
        }

        if(LIF->DIR.FileType == 0xffff)
        {
            LIF->EOFindex = index;
            if(purgeindex != -1)
   198a0:	0f 3f       	cpi	r16, 0xFF	; 255
   198a2:	2f ef       	ldi	r18, 0xFF	; 255
   198a4:	12 07       	cpc	r17, r18
   198a6:	09 f4       	brne	.+2      	; 0x198aa <lif_updatefree+0xdc>
   198a8:	7a c0       	rjmp	.+244    	; 0x1999e <lif_updatefree+0x1d0>
            {
                LIF->EOFindex = purgeindex;
   198aa:	13 a3       	std	Z+35, r17	; 0x23
   198ac:	02 a3       	std	Z+34, r16	; 0x22

// Adjust purged file count
                LIF->purged -= (index - purgeindex);
   198ae:	e0 1a       	sub	r14, r16
   198b0:	f1 0a       	sbc	r15, r17
   198b2:	86 8d       	ldd	r24, Z+30	; 0x1e
   198b4:	97 8d       	ldd	r25, Z+31	; 0x1f
   198b6:	8e 19       	sub	r24, r14
   198b8:	9f 09       	sbc	r25, r15
   198ba:	97 8f       	std	Z+31, r25	; 0x1f
   198bc:	86 8f       	std	Z+30, r24	; 0x1e
// update EOF
                if(!lif_writedirEOF(LIF,purgeindex))
   198be:	b8 01       	movw	r22, r16
   198c0:	cf 01       	movw	r24, r30
   198c2:	6d df       	rcall	.-294    	; 0x1979e <lif_writedirEOF>
   198c4:	89 2b       	or	r24, r25
   198c6:	09 f0       	breq	.+2      	; 0x198ca <lif_updatefree+0xfc>
   198c8:	6c c0       	rjmp	.+216    	; 0x199a2 <lif_updatefree+0x1d4>
   198ca:	dd cf       	rjmp	.-70     	; 0x19886 <lif_updatefree+0xb8>
                    return(NULL);
                }
            }
            break;
        }
        if(LIF->DIR.FileType == 0)
   198cc:	89 2b       	or	r24, r25
   198ce:	81 f4       	brne	.+32     	; 0x198f0 <lif_updatefree+0x122>
        {
            if(purgeindex == -1)
   198d0:	0f 3f       	cpi	r16, 0xFF	; 255
   198d2:	ff ef       	ldi	r31, 0xFF	; 255
   198d4:	1f 07       	cpc	r17, r31
   198d6:	09 f4       	brne	.+2      	; 0x198da <lif_updatefree+0x10c>
   198d8:	87 01       	movw	r16, r14
                purgeindex = index;
            LIF->purged++;
   198da:	ee 85       	ldd	r30, Y+14	; 0x0e
   198dc:	ff 85       	ldd	r31, Y+15	; 0x0f
   198de:	86 8d       	ldd	r24, Z+30	; 0x1e
   198e0:	97 8d       	ldd	r25, Z+31	; 0x1f
   198e2:	01 96       	adiw	r24, 0x01	; 1
   198e4:	97 8f       	std	Z+31, r25	; 0x1f
   198e6:	86 8f       	std	Z+30, r24	; 0x1e
   198e8:	ff ef       	ldi	r31, 0xFF	; 255
   198ea:	cf 1a       	sub	r12, r31
   198ec:	df 0a       	sbc	r13, r31
   198ee:	c1 cf       	rjmp	.-126    	; 0x19872 <lif_updatefree+0xa4>
            ++index;
            continue;
        }
        purgeindex = -1;
        if(start > LIF->DIR.FileStartSector)
   198f0:	f5 01       	movw	r30, r10
   198f2:	80 81       	ld	r24, Z
   198f4:	91 81       	ldd	r25, Z+1	; 0x01
   198f6:	a2 81       	ldd	r26, Z+2	; 0x02
   198f8:	b3 81       	ldd	r27, Z+3	; 0x03
   198fa:	82 15       	cp	r24, r2
   198fc:	93 05       	cpc	r25, r3
   198fe:	a4 05       	cpc	r26, r4
   19900:	b5 05       	cpc	r27, r5
   19902:	c8 f4       	brcc	.+50     	; 0x19936 <lif_updatefree+0x168>
        {
            if(debuglevel & LIF_DEBUG)
   19904:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19908:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1990c:	92 ff       	sbrs	r25, 2
   1990e:	13 c0       	rjmp	.+38     	; 0x19936 <lif_updatefree+0x168>
                printf("lif_update_free:[%s] error previous record file area overlaps this one:[%s]\n", LIF->name, LIF->DIR.filename);
   19910:	8c 85       	ldd	r24, Y+12	; 0x0c
   19912:	9d 85       	ldd	r25, Y+13	; 0x0d
   19914:	ed b7       	in	r30, 0x3d	; 61
   19916:	fe b7       	in	r31, 0x3e	; 62
   19918:	97 83       	std	Z+7, r25	; 0x07
   1991a:	86 83       	std	Z+6, r24	; 0x06
   1991c:	ee 85       	ldd	r30, Y+14	; 0x0e
   1991e:	ff 85       	ldd	r31, Y+15	; 0x0f
   19920:	80 81       	ld	r24, Z
   19922:	91 81       	ldd	r25, Z+1	; 0x01
   19924:	ed b7       	in	r30, 0x3d	; 61
   19926:	fe b7       	in	r31, 0x3e	; 62
   19928:	95 83       	std	Z+5, r25	; 0x05
   1992a:	84 83       	std	Z+4, r24	; 0x04
   1992c:	61 82       	std	Z+1, r6	; 0x01
   1992e:	72 82       	std	Z+2, r7	; 0x02
   19930:	83 82       	std	Z+3, r8	; 0x03
   19932:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>

        }
        LIF->usedsectors += LIF->DIR.FileSectors;
   19936:	ea 85       	ldd	r30, Y+10	; 0x0a
   19938:	fb 85       	ldd	r31, Y+11	; 0x0b
   1993a:	80 81       	ld	r24, Z
   1993c:	91 81       	ldd	r25, Z+1	; 0x01
   1993e:	a2 81       	ldd	r26, Z+2	; 0x02
   19940:	b3 81       	ldd	r27, Z+3	; 0x03
   19942:	ee 85       	ldd	r30, Y+14	; 0x0e
   19944:	ff 85       	ldd	r31, Y+15	; 0x0f
   19946:	44 89       	ldd	r20, Z+20	; 0x14
   19948:	55 89       	ldd	r21, Z+21	; 0x15
   1994a:	66 89       	ldd	r22, Z+22	; 0x16
   1994c:	77 89       	ldd	r23, Z+23	; 0x17
   1994e:	48 0f       	add	r20, r24
   19950:	59 1f       	adc	r21, r25
   19952:	6a 1f       	adc	r22, r26
   19954:	7b 1f       	adc	r23, r27
   19956:	44 8b       	std	Z+20, r20	; 0x14
   19958:	55 8b       	std	Z+21, r21	; 0x15
   1995a:	66 8b       	std	Z+22, r22	; 0x16
   1995c:	77 8b       	std	Z+23, r23	; 0x17
        LIF->freesectors -= LIF->DIR.FileSectors;
   1995e:	40 8d       	ldd	r20, Z+24	; 0x18
   19960:	51 8d       	ldd	r21, Z+25	; 0x19
   19962:	62 8d       	ldd	r22, Z+26	; 0x1a
   19964:	73 8d       	ldd	r23, Z+27	; 0x1b
   19966:	48 1b       	sub	r20, r24
   19968:	59 0b       	sbc	r21, r25
   1996a:	6a 0b       	sbc	r22, r26
   1996c:	7b 0b       	sbc	r23, r27
   1996e:	40 8f       	std	Z+24, r20	; 0x18
   19970:	51 8f       	std	Z+25, r21	; 0x19
   19972:	62 8f       	std	Z+26, r22	; 0x1a
   19974:	73 8f       	std	Z+27, r23	; 0x1b
        LIF->files++;
   19976:	24 8d       	ldd	r18, Z+28	; 0x1c
   19978:	35 8d       	ldd	r19, Z+29	; 0x1d
   1997a:	2f 5f       	subi	r18, 0xFF	; 255
   1997c:	3f 4f       	sbci	r19, 0xFF	; 255
   1997e:	35 8f       	std	Z+29, r19	; 0x1d
   19980:	24 8f       	std	Z+28, r18	; 0x1c
        ++index;
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   19982:	f5 01       	movw	r30, r10
   19984:	40 81       	ld	r20, Z
   19986:	51 81       	ldd	r21, Z+1	; 0x01
   19988:	62 81       	ldd	r22, Z+2	; 0x02
   1998a:	73 81       	ldd	r23, Z+3	; 0x03
   1998c:	1c 01       	movw	r2, r24
   1998e:	2d 01       	movw	r4, r26
   19990:	24 0e       	add	r2, r20
   19992:	35 1e       	adc	r3, r21
   19994:	46 1e       	adc	r4, r22
   19996:	57 1e       	adc	r5, r23
                purgeindex = index;
            LIF->purged++;
            ++index;
            continue;
        }
        purgeindex = -1;
   19998:	0f ef       	ldi	r16, 0xFF	; 255
   1999a:	1f ef       	ldi	r17, 0xFF	; 255
   1999c:	a5 cf       	rjmp	.-182    	; 0x198e8 <lif_updatefree+0x11a>
            return(NULL);
        }

        if(LIF->DIR.FileType == 0xffff)
        {
            LIF->EOFindex = index;
   1999e:	f3 a2       	std	Z+35, r15	; 0x23
   199a0:	e2 a2       	std	Z+34, r14	; 0x22
/// @return void
MEMSPACE
void lif_rewinddir(lif_t *LIF)
{
// Directory index
    LIF->dirindex = -1;
   199a2:	8f ef       	ldi	r24, 0xFF	; 255
   199a4:	9f ef       	ldi	r25, 0xFF	; 255
   199a6:	ee 85       	ldd	r30, Y+14	; 0x0e
   199a8:	ff 85       	ldd	r31, Y+15	; 0x0f
   199aa:	91 a3       	std	Z+33, r25	; 0x21
   199ac:	80 a3       	std	Z+32, r24	; 0x20
        ++index;
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
    }
// rewind
    lif_rewinddir(LIF);
    return(LIF);
   199ae:	8e 85       	ldd	r24, Y+14	; 0x0e
   199b0:	9f 85       	ldd	r25, Y+15	; 0x0f
}
   199b2:	2f 96       	adiw	r28, 0x0f	; 15
   199b4:	0f b6       	in	r0, 0x3f	; 63
   199b6:	f8 94       	cli
   199b8:	de bf       	out	0x3e, r29	; 62
   199ba:	0f be       	out	0x3f, r0	; 63
   199bc:	cd bf       	out	0x3d, r28	; 61
   199be:	df 91       	pop	r29
   199c0:	cf 91       	pop	r28
   199c2:	1f 91       	pop	r17
   199c4:	0f 91       	pop	r16
   199c6:	ff 90       	pop	r15
   199c8:	ef 90       	pop	r14
   199ca:	df 90       	pop	r13
   199cc:	cf 90       	pop	r12
   199ce:	bf 90       	pop	r11
   199d0:	af 90       	pop	r10
   199d2:	8f 90       	pop	r8
   199d4:	7f 90       	pop	r7
   199d6:	6f 90       	pop	r6
   199d8:	5f 90       	pop	r5
   199da:	4f 90       	pop	r4
   199dc:	3f 90       	pop	r3
   199de:	2f 90       	pop	r2
   199e0:	08 95       	ret

000199e2 <lif_create_volume>:
/// @param[in] dirstart:   Directory start sector
/// @param[in] dirsectors: Directory sectors
/// @return pointer to LIF structure
MEMSPACE
lif_t *lif_create_volume(char *imagename, char *liflabel, long dirstart, long dirsectors, long filesectors)
{
   199e2:	a9 e2       	ldi	r26, 0x29	; 41
   199e4:	b1 e0       	ldi	r27, 0x01	; 1
   199e6:	e7 ef       	ldi	r30, 0xF7	; 247
   199e8:	fc ec       	ldi	r31, 0xCC	; 204
   199ea:	0c 94 bb e6 	jmp	0x1cd76	; 0x1cd76 <__prologue_saves__>
   199ee:	4c 01       	movw	r8, r24
   199f0:	3b 01       	movw	r6, r22
   199f2:	19 01       	movw	r2, r18
   199f4:	2a 01       	movw	r4, r20
   199f6:	ca 5d       	subi	r28, 0xDA	; 218
   199f8:	de 4f       	sbci	r29, 0xFE	; 254
   199fa:	e8 82       	st	Y, r14
   199fc:	f9 82       	std	Y+1, r15	; 0x01
   199fe:	0a 83       	std	Y+2, r16	; 0x02
   19a00:	1b 83       	std	Y+3, r17	; 0x03
   19a02:	c6 52       	subi	r28, 0x26	; 38
   19a04:	d1 40       	sbci	r29, 0x01	; 1
   19a06:	c2 5e       	subi	r28, 0xE2	; 226
   19a08:	de 4f       	sbci	r29, 0xFE	; 254
   19a0a:	a8 82       	st	Y, r10
   19a0c:	b9 82       	std	Y+1, r11	; 0x01
   19a0e:	ca 82       	std	Y+2, r12	; 0x02
   19a10:	db 82       	std	Y+3, r13	; 0x03
   19a12:	ce 51       	subi	r28, 0x1E	; 30
   19a14:	d1 40       	sbci	r29, 0x01	; 1
    long i;
    long offset;
    long count;
    uint8_t buffer[LIF_SECTOR_SIZE];

    time_t t = time(NULL);
   19a16:	80 e0       	ldi	r24, 0x00	; 0
   19a18:	90 e0       	ldi	r25, 0x00	; 0
   19a1a:	0e 94 ed 37 	call	0x6fda	; 0x6fda <time>
   19a1e:	5b 01       	movw	r10, r22
   19a20:	6c 01       	movw	r12, r24

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
   19a22:	64 e7       	ldi	r22, 0x74	; 116
   19a24:	70 e0       	ldi	r23, 0x00	; 0
   19a26:	80 e0       	ldi	r24, 0x00	; 0
   19a28:	90 e0       	ldi	r25, 0x00	; 0
   19a2a:	0e 94 c4 c0 	call	0x18188	; 0x18188 <lif_calloc>
   19a2e:	7c 01       	movw	r14, r24
    if(LIF == NULL)
   19a30:	89 2b       	or	r24, r25
   19a32:	09 f4       	brne	.+2      	; 0x19a36 <lif_create_volume+0x54>
   19a34:	b6 c2       	rjmp	.+1388   	; 0x19fa2 <lif_create_volume+0x5c0>
        return(NULL);

    printf("Creating:%s, Label:[%s], Directory Start %ld, Directory Size: %ld, File Sectors:%ld\n",
   19a36:	c2 5e       	subi	r28, 0xE2	; 226
   19a38:	de 4f       	sbci	r29, 0xFE	; 254
   19a3a:	28 81       	ld	r18, Y
   19a3c:	39 81       	ldd	r19, Y+1	; 0x01
   19a3e:	4a 81       	ldd	r20, Y+2	; 0x02
   19a40:	5b 81       	ldd	r21, Y+3	; 0x03
   19a42:	ce 51       	subi	r28, 0x1E	; 30
   19a44:	d1 40       	sbci	r29, 0x01	; 1
   19a46:	ed b7       	in	r30, 0x3d	; 61
   19a48:	fe b7       	in	r31, 0x3e	; 62
   19a4a:	20 8b       	std	Z+16, r18	; 0x10
   19a4c:	31 8b       	std	Z+17, r19	; 0x11
   19a4e:	42 8b       	std	Z+18, r20	; 0x12
   19a50:	53 8b       	std	Z+19, r21	; 0x13
   19a52:	ca 5d       	subi	r28, 0xDA	; 218
   19a54:	de 4f       	sbci	r29, 0xFE	; 254
   19a56:	28 81       	ld	r18, Y
   19a58:	39 81       	ldd	r19, Y+1	; 0x01
   19a5a:	4a 81       	ldd	r20, Y+2	; 0x02
   19a5c:	5b 81       	ldd	r21, Y+3	; 0x03
   19a5e:	c6 52       	subi	r28, 0x26	; 38
   19a60:	d1 40       	sbci	r29, 0x01	; 1
   19a62:	24 87       	std	Z+12, r18	; 0x0c
   19a64:	35 87       	std	Z+13, r19	; 0x0d
   19a66:	46 87       	std	Z+14, r20	; 0x0e
   19a68:	57 87       	std	Z+15, r21	; 0x0f
   19a6a:	20 86       	std	Z+8, r2	; 0x08
   19a6c:	31 86       	std	Z+9, r3	; 0x09
   19a6e:	42 86       	std	Z+10, r4	; 0x0a
   19a70:	53 86       	std	Z+11, r5	; 0x0b
   19a72:	77 82       	std	Z+7, r7	; 0x07
   19a74:	66 82       	std	Z+6, r6	; 0x06
   19a76:	95 82       	std	Z+5, r9	; 0x05
   19a78:	84 82       	std	Z+4, r8	; 0x04
   19a7a:	82 e4       	ldi	r24, 0x42	; 66
   19a7c:	9d e3       	ldi	r25, 0x3D	; 61
   19a7e:	a0 e0       	ldi	r26, 0x00	; 0
   19a80:	81 83       	std	Z+1, r24	; 0x01
   19a82:	92 83       	std	Z+2, r25	; 0x02
   19a84:	a3 83       	std	Z+3, r26	; 0x03
   19a86:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
        imagename, liflabel, dirstart, dirsectors, filesectors );

    if(debuglevel & LIF_DEBUG)
   19a8a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19a8e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19a92:	92 ff       	sbrs	r25, 2
   19a94:	04 c0       	rjmp	.+8      	; 0x19a9e <lif_create_volume+0xbc>
        lif_dump_vol(LIF,"lif_create_volume");
   19a96:	64 e2       	ldi	r22, 0x24	; 36
   19a98:	76 e1       	ldi	r23, 0x16	; 22
   19a9a:	c7 01       	movw	r24, r14
   19a9c:	c9 d8       	rcall	.-3694   	; 0x18c30 <lif_dump_vol>

    lif_image_clear(LIF);
   19a9e:	c7 01       	movw	r24, r14
   19aa0:	b2 d8       	rcall	.-3740   	; 0x18c06 <lif_image_clear>

// Initialize volume header
    LIF->VOL.LIFid = 0x8000;
   19aa2:	80 e0       	ldi	r24, 0x00	; 0
   19aa4:	90 e8       	ldi	r25, 0x80	; 128
   19aa6:	f7 01       	movw	r30, r14
   19aa8:	95 a3       	std	Z+37, r25	; 0x25
   19aaa:	84 a3       	std	Z+36, r24	; 0x24
    lif_fixname(LIF->VOL.Label, liflabel, 6);
   19aac:	46 e0       	ldi	r20, 0x06	; 6
   19aae:	50 e0       	ldi	r21, 0x00	; 0
   19ab0:	b3 01       	movw	r22, r6
   19ab2:	c7 01       	movw	r24, r14
   19ab4:	86 96       	adiw	r24, 0x26	; 38
   19ab6:	0e 94 07 c3 	call	0x1860e	; 0x1860e <lif_fixname>
    LIF->VOL.DirStartSector = dirstart;
   19aba:	f7 01       	movw	r30, r14
   19abc:	25 a6       	std	Z+45, r2	; 0x2d
   19abe:	36 a6       	std	Z+46, r3	; 0x2e
   19ac0:	47 a6       	std	Z+47, r4	; 0x2f
   19ac2:	50 aa       	std	Z+48, r5	; 0x30
    LIF->VOL.DirSectors = dirsectors;
   19ac4:	ca 5d       	subi	r28, 0xDA	; 218
   19ac6:	de 4f       	sbci	r29, 0xFE	; 254
   19ac8:	28 81       	ld	r18, Y
   19aca:	39 81       	ldd	r19, Y+1	; 0x01
   19acc:	4a 81       	ldd	r20, Y+2	; 0x02
   19ace:	5b 81       	ldd	r21, Y+3	; 0x03
   19ad0:	c6 52       	subi	r28, 0x26	; 38
   19ad2:	d1 40       	sbci	r29, 0x01	; 1
   19ad4:	25 ab       	std	Z+53, r18	; 0x35
   19ad6:	36 ab       	std	Z+54, r19	; 0x36
   19ad8:	47 ab       	std	Z+55, r20	; 0x37
   19ada:	50 af       	std	Z+56, r21	; 0x38
    LIF->VOL.System3000LIFid = 0x1000;
   19adc:	80 e0       	ldi	r24, 0x00	; 0
   19ade:	90 e1       	ldi	r25, 0x10	; 16
   19ae0:	92 ab       	std	Z+50, r25	; 0x32
   19ae2:	81 ab       	std	Z+49, r24	; 0x31
    LIF->VOL.tracks_per_side = 0;
   19ae4:	fd 96       	adiw	r30, 0x3d	; 61
   19ae6:	10 82       	st	Z, r1
   19ae8:	11 82       	std	Z+1, r1	; 0x01
   19aea:	12 82       	std	Z+2, r1	; 0x02
   19aec:	13 82       	std	Z+3, r1	; 0x03
    LIF->VOL.sides = 0;
   19aee:	34 96       	adiw	r30, 0x04	; 4
   19af0:	10 82       	st	Z, r1
   19af2:	11 82       	std	Z+1, r1	; 0x01
   19af4:	12 82       	std	Z+2, r1	; 0x02
   19af6:	13 82       	std	Z+3, r1	; 0x03
    LIF->VOL.sectors_per_track = 0;
   19af8:	34 96       	adiw	r30, 0x04	; 4
   19afa:	10 82       	st	Z, r1
   19afc:	11 82       	std	Z+1, r1	; 0x01
   19afe:	12 82       	std	Z+2, r1	; 0x02
   19b00:	13 82       	std	Z+3, r1	; 0x03
///@brief 0 causes time to return the current date

    lif_time2lifbcd(t, LIF->VOL.date);
   19b02:	a7 01       	movw	r20, r14
   19b04:	47 5b       	subi	r20, 0xB7	; 183
   19b06:	5f 4f       	sbci	r21, 0xFF	; 255
   19b08:	c6 01       	movw	r24, r12
   19b0a:	b5 01       	movw	r22, r10
   19b0c:	0e 94 2c c5 	call	0x18a58	; 0x18a58 <lif_time2lifbcd>

// update LIF headers
    LIF->name = lif_stralloc(imagename);
   19b10:	c4 01       	movw	r24, r8
   19b12:	0e 94 0f c1 	call	0x1821e	; 0x1821e <lif_stralloc>
   19b16:	d7 01       	movw	r26, r14
   19b18:	8d 93       	st	X+, r24
   19b1a:	9c 93       	st	X, r25
    if(LIF->name == NULL)
   19b1c:	89 2b       	or	r24, r25
   19b1e:	09 f4       	brne	.+2      	; 0x19b22 <lif_create_volume+0x140>
   19b20:	35 c2       	rjmp	.+1130   	; 0x19f8c <lif_create_volume+0x5aa>
        lif_close_volume(LIF);
        return(NULL);
    }

// Initilize all LIF headers
    LIF->filesectors = filesectors;
   19b22:	c2 5e       	subi	r28, 0xE2	; 226
   19b24:	de 4f       	sbci	r29, 0xFE	; 254
   19b26:	28 81       	ld	r18, Y
   19b28:	39 81       	ldd	r19, Y+1	; 0x01
   19b2a:	4a 81       	ldd	r20, Y+2	; 0x02
   19b2c:	5b 81       	ldd	r21, Y+3	; 0x03
   19b2e:	ce 51       	subi	r28, 0x1E	; 30
   19b30:	d1 40       	sbci	r29, 0x01	; 1
   19b32:	f7 01       	movw	r30, r14
   19b34:	20 8b       	std	Z+16, r18	; 0x10
   19b36:	31 8b       	std	Z+17, r19	; 0x11
   19b38:	42 8b       	std	Z+18, r20	; 0x12
   19b3a:	53 8b       	std	Z+19, r21	; 0x13
    LIF->filestart = dirstart + dirsectors;
   19b3c:	ca 5d       	subi	r28, 0xDA	; 218
   19b3e:	de 4f       	sbci	r29, 0xFE	; 254
   19b40:	88 81       	ld	r24, Y
   19b42:	99 81       	ldd	r25, Y+1	; 0x01
   19b44:	aa 81       	ldd	r26, Y+2	; 0x02
   19b46:	bb 81       	ldd	r27, Y+3	; 0x03
   19b48:	c6 52       	subi	r28, 0x26	; 38
   19b4a:	d1 40       	sbci	r29, 0x01	; 1
   19b4c:	82 0d       	add	r24, r2
   19b4e:	93 1d       	adc	r25, r3
   19b50:	a4 1d       	adc	r26, r4
   19b52:	b5 1d       	adc	r27, r5
   19b54:	84 87       	std	Z+12, r24	; 0x0c
   19b56:	95 87       	std	Z+13, r25	; 0x0d
   19b58:	a6 87       	std	Z+14, r26	; 0x0e
   19b5a:	b7 87       	std	Z+15, r27	; 0x0f
    LIF->sectors = (LIF->filestart+LIF->filesectors);
   19b5c:	82 0f       	add	r24, r18
   19b5e:	93 1f       	adc	r25, r19
   19b60:	a4 1f       	adc	r26, r20
   19b62:	b5 1f       	adc	r27, r21
   19b64:	84 83       	std	Z+4, r24	; 0x04
   19b66:	95 83       	std	Z+5, r25	; 0x05
   19b68:	a6 83       	std	Z+6, r26	; 0x06
   19b6a:	b7 83       	std	Z+7, r27	; 0x07
    LIF->imagebytes = LIF->sectors * (long)LIF_SECTOR_SIZE;
   19b6c:	ba 2f       	mov	r27, r26
   19b6e:	a9 2f       	mov	r26, r25
   19b70:	98 2f       	mov	r25, r24
   19b72:	88 27       	eor	r24, r24
   19b74:	80 87       	std	Z+8, r24	; 0x08
   19b76:	91 87       	std	Z+9, r25	; 0x09
   19b78:	a2 87       	std	Z+10, r26	; 0x0a
   19b7a:	b3 87       	std	Z+11, r27	; 0x0b
    LIF->freesectors = LIF->filesectors;
   19b7c:	20 8f       	std	Z+24, r18	; 0x18
   19b7e:	31 8f       	std	Z+25, r19	; 0x19
   19b80:	42 8f       	std	Z+26, r20	; 0x1a
   19b82:	53 8f       	std	Z+27, r21	; 0x1b
    LIF->usedsectors = 0;
   19b84:	14 8a       	std	Z+20, r1	; 0x14
   19b86:	15 8a       	std	Z+21, r1	; 0x15
   19b88:	16 8a       	std	Z+22, r1	; 0x16
   19b8a:	17 8a       	std	Z+23, r1	; 0x17
    LIF->files = 0;
   19b8c:	15 8e       	std	Z+29, r1	; 0x1d
   19b8e:	14 8e       	std	Z+28, r1	; 0x1c
    LIF->purged = 0;
   19b90:	17 8e       	std	Z+31, r1	; 0x1f
   19b92:	16 8e       	std	Z+30, r1	; 0x1e
    LIF->dirindex = 0;
   19b94:	11 a2       	std	Z+33, r1	; 0x21
   19b96:	10 a2       	std	Z+32, r1	; 0x20
    LIF->EOFindex = 0;
   19b98:	13 a2       	std	Z+35, r1	; 0x23
   19b9a:	12 a2       	std	Z+34, r1	; 0x22

    memset(buffer,0,LIF_SECTOR_SIZE);
   19b9c:	61 2c       	mov	r6, r1
   19b9e:	77 24       	eor	r7, r7
   19ba0:	73 94       	inc	r7
   19ba2:	9e 01       	movw	r18, r28
   19ba4:	2c 5e       	subi	r18, 0xEC	; 236
   19ba6:	3f 4f       	sbci	r19, 0xFF	; 255
   19ba8:	49 01       	movw	r8, r18
   19baa:	d9 01       	movw	r26, r18
   19bac:	f3 01       	movw	r30, r6
   19bae:	1d 92       	st	X+, r1
   19bb0:	31 97       	sbiw	r30, 0x01	; 1
   19bb2:	e9 f7       	brne	.-6      	; 0x19bae <lif_create_volume+0x1cc>

    lif_vol2str(LIF,buffer);
   19bb4:	b9 01       	movw	r22, r18
   19bb6:	c7 01       	movw	r24, r14
   19bb8:	0e 94 44 c3 	call	0x18688	; 0x18688 <lif_vol2str>

// Write Volume header
    LIF->fp = lif_open(LIF->name,"wb+");
   19bbc:	66 e1       	ldi	r22, 0x16	; 22
   19bbe:	79 e0       	ldi	r23, 0x09	; 9
   19bc0:	d7 01       	movw	r26, r14
   19bc2:	8d 91       	ld	r24, X+
   19bc4:	9c 91       	ld	r25, X
   19bc6:	0e 94 2e c1 	call	0x1825c	; 0x1825c <lif_open>
   19bca:	f7 01       	movw	r30, r14
   19bcc:	93 83       	std	Z+3, r25	; 0x03
   19bce:	82 83       	std	Z+2, r24	; 0x02
    if(LIF->fp == NULL)
   19bd0:	89 2b       	or	r24, r25
   19bd2:	09 f4       	brne	.+2      	; 0x19bd6 <lif_create_volume+0x1f4>
   19bd4:	db c1       	rjmp	.+950    	; 0x19f8c <lif_create_volume+0x5aa>
    }

    offset = 0;
    count = 0;

    size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19bd6:	00 e0       	ldi	r16, 0x00	; 0
   19bd8:	11 e0       	ldi	r17, 0x01	; 1
   19bda:	20 e0       	ldi	r18, 0x00	; 0
   19bdc:	30 e0       	ldi	r19, 0x00	; 0
   19bde:	a9 01       	movw	r20, r18
   19be0:	b4 01       	movw	r22, r8
   19be2:	c7 01       	movw	r24, r14
   19be4:	0e 94 05 c2 	call	0x1840a	; 0x1840a <lif_write>
   19be8:	9c 01       	movw	r18, r24
   19bea:	99 0f       	add	r25, r25
   19bec:	44 0b       	sbc	r20, r20
   19bee:	55 0b       	sbc	r21, r21
   19bf0:	ca 5e       	subi	r28, 0xEA	; 234
   19bf2:	de 4f       	sbci	r29, 0xFE	; 254
   19bf4:	28 83       	st	Y, r18
   19bf6:	39 83       	std	Y+1, r19	; 0x01
   19bf8:	4a 83       	std	Y+2, r20	; 0x02
   19bfa:	5b 83       	std	Y+3, r21	; 0x03
   19bfc:	c6 51       	subi	r28, 0x16	; 22
   19bfe:	d1 40       	sbci	r29, 0x01	; 1

    if(size < LIF_SECTOR_SIZE)
   19c00:	2f 3f       	cpi	r18, 0xFF	; 255
   19c02:	31 05       	cpc	r19, r1
   19c04:	41 05       	cpc	r20, r1
   19c06:	51 05       	cpc	r21, r1
   19c08:	09 f0       	breq	.+2      	; 0x19c0c <lif_create_volume+0x22a>
   19c0a:	0c f4       	brge	.+2      	; 0x19c0e <lif_create_volume+0x22c>
   19c0c:	bf c1       	rjmp	.+894    	; 0x19f8c <lif_create_volume+0x5aa>
        return(NULL);
    }
    offset += size;
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);
   19c0e:	d4 01       	movw	r26, r8
   19c10:	f3 01       	movw	r30, r6
   19c12:	1d 92       	st	X+, r1
   19c14:	31 97       	sbiw	r30, 0x01	; 1
   19c16:	e9 f7       	brne	.-6      	; 0x19c12 <lif_create_volume+0x230>

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   19c18:	21 e0       	ldi	r18, 0x01	; 1
   19c1a:	30 e0       	ldi	r19, 0x00	; 0
   19c1c:	40 e0       	ldi	r20, 0x00	; 0
   19c1e:	50 e0       	ldi	r21, 0x00	; 0
   19c20:	c6 5e       	subi	r28, 0xE6	; 230
   19c22:	de 4f       	sbci	r29, 0xFE	; 254
   19c24:	28 83       	st	Y, r18
   19c26:	39 83       	std	Y+1, r19	; 0x01
   19c28:	4a 83       	std	Y+2, r20	; 0x02
   19c2a:	5b 83       	std	Y+3, r21	; 0x03
   19c2c:	ca 51       	subi	r28, 0x1A	; 26
   19c2e:	d1 40       	sbci	r29, 0x01	; 1
   19c30:	64 01       	movw	r12, r8
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        printf("\tWrote: %ld\r", count);
   19c32:	85 e3       	ldi	r24, 0x35	; 53
   19c34:	9d e3       	ldi	r25, 0x3D	; 61
   19c36:	3c 01       	movw	r6, r24
   19c38:	81 2c       	mov	r8, r1
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   19c3a:	c6 5e       	subi	r28, 0xE6	; 230
   19c3c:	de 4f       	sbci	r29, 0xFE	; 254
   19c3e:	88 81       	ld	r24, Y
   19c40:	99 81       	ldd	r25, Y+1	; 0x01
   19c42:	aa 81       	ldd	r26, Y+2	; 0x02
   19c44:	bb 81       	ldd	r27, Y+3	; 0x03
   19c46:	ca 51       	subi	r28, 0x1A	; 26
   19c48:	d1 40       	sbci	r29, 0x01	; 1
   19c4a:	82 15       	cp	r24, r2
   19c4c:	93 05       	cpc	r25, r3
   19c4e:	a4 05       	cpc	r26, r4
   19c50:	b5 05       	cpc	r27, r5
   19c52:	0c f0       	brlt	.+2      	; 0x19c56 <lif_create_volume+0x274>
   19c54:	55 c0       	rjmp	.+170    	; 0x19d00 <lif_create_volume+0x31e>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19c56:	00 e0       	ldi	r16, 0x00	; 0
   19c58:	11 e0       	ldi	r17, 0x01	; 1
   19c5a:	ca 5e       	subi	r28, 0xEA	; 234
   19c5c:	de 4f       	sbci	r29, 0xFE	; 254
   19c5e:	28 81       	ld	r18, Y
   19c60:	39 81       	ldd	r19, Y+1	; 0x01
   19c62:	4a 81       	ldd	r20, Y+2	; 0x02
   19c64:	5b 81       	ldd	r21, Y+3	; 0x03
   19c66:	c6 51       	subi	r28, 0x16	; 22
   19c68:	d1 40       	sbci	r29, 0x01	; 1
   19c6a:	b6 01       	movw	r22, r12
   19c6c:	c7 01       	movw	r24, r14
   19c6e:	0e 94 05 c2 	call	0x1840a	; 0x1840a <lif_write>
   19c72:	09 2e       	mov	r0, r25
   19c74:	00 0c       	add	r0, r0
   19c76:	aa 0b       	sbc	r26, r26
   19c78:	bb 0b       	sbc	r27, r27
        if(size < LIF_SECTOR_SIZE)
   19c7a:	8f 3f       	cpi	r24, 0xFF	; 255
   19c7c:	91 05       	cpc	r25, r1
   19c7e:	a1 05       	cpc	r26, r1
   19c80:	b1 05       	cpc	r27, r1
   19c82:	09 f0       	breq	.+2      	; 0x19c86 <lif_create_volume+0x2a4>
   19c84:	0c f4       	brge	.+2      	; 0x19c88 <lif_create_volume+0x2a6>
   19c86:	82 c1       	rjmp	.+772    	; 0x19f8c <lif_create_volume+0x5aa>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   19c88:	ca 5e       	subi	r28, 0xEA	; 234
   19c8a:	de 4f       	sbci	r29, 0xFE	; 254
   19c8c:	28 81       	ld	r18, Y
   19c8e:	39 81       	ldd	r19, Y+1	; 0x01
   19c90:	4a 81       	ldd	r20, Y+2	; 0x02
   19c92:	5b 81       	ldd	r21, Y+3	; 0x03
   19c94:	c6 51       	subi	r28, 0x16	; 22
   19c96:	d1 40       	sbci	r29, 0x01	; 1
   19c98:	28 0f       	add	r18, r24
   19c9a:	39 1f       	adc	r19, r25
   19c9c:	4a 1f       	adc	r20, r26
   19c9e:	5b 1f       	adc	r21, r27
   19ca0:	ca 5e       	subi	r28, 0xEA	; 234
   19ca2:	de 4f       	sbci	r29, 0xFE	; 254
   19ca4:	28 83       	st	Y, r18
   19ca6:	39 83       	std	Y+1, r19	; 0x01
   19ca8:	4a 83       	std	Y+2, r20	; 0x02
   19caa:	5b 83       	std	Y+3, r21	; 0x03
   19cac:	c6 51       	subi	r28, 0x16	; 22
   19cae:	d1 40       	sbci	r29, 0x01	; 1
        printf("\tWrote: %ld\r", count);
   19cb0:	c6 5e       	subi	r28, 0xE6	; 230
   19cb2:	de 4f       	sbci	r29, 0xFE	; 254
   19cb4:	88 81       	ld	r24, Y
   19cb6:	99 81       	ldd	r25, Y+1	; 0x01
   19cb8:	aa 81       	ldd	r26, Y+2	; 0x02
   19cba:	bb 81       	ldd	r27, Y+3	; 0x03
   19cbc:	ca 51       	subi	r28, 0x1A	; 26
   19cbe:	d1 40       	sbci	r29, 0x01	; 1
   19cc0:	ed b7       	in	r30, 0x3d	; 61
   19cc2:	fe b7       	in	r31, 0x3e	; 62
   19cc4:	84 83       	std	Z+4, r24	; 0x04
   19cc6:	95 83       	std	Z+5, r25	; 0x05
   19cc8:	a6 83       	std	Z+6, r26	; 0x06
   19cca:	b7 83       	std	Z+7, r27	; 0x07
   19ccc:	61 82       	std	Z+1, r6	; 0x01
   19cce:	72 82       	std	Z+2, r7	; 0x02
   19cd0:	83 82       	std	Z+3, r8	; 0x03
   19cd2:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   19cd6:	c6 5e       	subi	r28, 0xE6	; 230
   19cd8:	de 4f       	sbci	r29, 0xFE	; 254
   19cda:	28 81       	ld	r18, Y
   19cdc:	39 81       	ldd	r19, Y+1	; 0x01
   19cde:	4a 81       	ldd	r20, Y+2	; 0x02
   19ce0:	5b 81       	ldd	r21, Y+3	; 0x03
   19ce2:	ca 51       	subi	r28, 0x1A	; 26
   19ce4:	d1 40       	sbci	r29, 0x01	; 1
   19ce6:	2f 5f       	subi	r18, 0xFF	; 255
   19ce8:	3f 4f       	sbci	r19, 0xFF	; 255
   19cea:	4f 4f       	sbci	r20, 0xFF	; 255
   19cec:	5f 4f       	sbci	r21, 0xFF	; 255
   19cee:	c6 5e       	subi	r28, 0xE6	; 230
   19cf0:	de 4f       	sbci	r29, 0xFE	; 254
   19cf2:	28 83       	st	Y, r18
   19cf4:	39 83       	std	Y+1, r19	; 0x01
   19cf6:	4a 83       	std	Y+2, r20	; 0x02
   19cf8:	5b 83       	std	Y+3, r21	; 0x03
   19cfa:	ca 51       	subi	r28, 0x1A	; 26
   19cfc:	d1 40       	sbci	r29, 0x01	; 1
   19cfe:	9d cf       	rjmp	.-198    	; 0x19c3a <lif_create_volume+0x258>
        printf("\tWrote: %ld\r", count);
        ++count;
    }

// Write Directory sectors
    lif_dir_clear(LIF);
   19d00:	c7 01       	movw	r24, r14
   19d02:	0e 94 09 c6 	call	0x18c12	; 0x18c12 <lif_dir_clear>
    LIF->DIR.FileType = 0xffff;
   19d06:	8f ef       	ldi	r24, 0xFF	; 255
   19d08:	9f ef       	ldi	r25, 0xFF	; 255
   19d0a:	f7 01       	movw	r30, r14
   19d0c:	e6 5a       	subi	r30, 0xA6	; 166
   19d0e:	ff 4f       	sbci	r31, 0xFF	; 255
   19d10:	91 83       	std	Z+1, r25	; 0x01
   19d12:	80 83       	st	Z, r24
   19d14:	46 01       	movw	r8, r12
   19d16:	6e 01       	movw	r12, r28
   19d18:	9c ee       	ldi	r25, 0xEC	; 236
   19d1a:	c9 1a       	sub	r12, r25
   19d1c:	9e ef       	ldi	r25, 0xFE	; 254
   19d1e:	d9 0a       	sbc	r13, r25

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);
   19d20:	b4 01       	movw	r22, r8
   19d22:	c7 01       	movw	r24, r14
   19d24:	0e 94 50 c4 	call	0x188a0	; 0x188a0 <lif_dir2str>
   19d28:	a0 e2       	ldi	r26, 0x20	; 32
   19d2a:	8a 0e       	add	r8, r26
   19d2c:	91 1c       	adc	r9, r1

// Write Directory sectors
    lif_dir_clear(LIF);
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
   19d2e:	c8 14       	cp	r12, r8
   19d30:	d9 04       	cpc	r13, r9
   19d32:	b1 f7       	brne	.-20     	; 0x19d20 <lif_create_volume+0x33e>
   19d34:	a1 2c       	mov	r10, r1
   19d36:	b1 2c       	mov	r11, r1
   19d38:	65 01       	movw	r12, r10
   19d3a:	fe 01       	movw	r30, r28
   19d3c:	74 96       	adiw	r30, 0x14	; 20
   19d3e:	cc 5e       	subi	r28, 0xEC	; 236
   19d40:	de 4f       	sbci	r29, 0xFE	; 254
   19d42:	f9 83       	std	Y+1, r31	; 0x01
   19d44:	e8 83       	st	Y, r30
   19d46:	c4 51       	subi	r28, 0x14	; 20
   19d48:	d1 40       	sbci	r29, 0x01	; 1
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
   19d4a:	84 e6       	ldi	r24, 0x64	; 100
   19d4c:	28 2e       	mov	r2, r24
   19d4e:	31 2c       	mov	r3, r1
   19d50:	41 2c       	mov	r4, r1
   19d52:	51 2c       	mov	r5, r1
            printf("\tWrote: %ld\r", count);
   19d54:	88 e2       	ldi	r24, 0x28	; 40
   19d56:	9d e3       	ldi	r25, 0x3D	; 61
   19d58:	3c 01       	movw	r6, r24
   19d5a:	81 2c       	mov	r8, r1
   19d5c:	c6 5e       	subi	r28, 0xE6	; 230
   19d5e:	de 4f       	sbci	r29, 0xFE	; 254
   19d60:	28 81       	ld	r18, Y
   19d62:	39 81       	ldd	r19, Y+1	; 0x01
   19d64:	4a 81       	ldd	r20, Y+2	; 0x02
   19d66:	5b 81       	ldd	r21, Y+3	; 0x03
   19d68:	ca 51       	subi	r28, 0x1A	; 26
   19d6a:	d1 40       	sbci	r29, 0x01	; 1
   19d6c:	2a 0d       	add	r18, r10
   19d6e:	3b 1d       	adc	r19, r11
   19d70:	4c 1d       	adc	r20, r12
   19d72:	5d 1d       	adc	r21, r13
   19d74:	ce 5d       	subi	r28, 0xDE	; 222
   19d76:	de 4f       	sbci	r29, 0xFE	; 254
   19d78:	28 83       	st	Y, r18
   19d7a:	39 83       	std	Y+1, r19	; 0x01
   19d7c:	4a 83       	std	Y+2, r20	; 0x02
   19d7e:	5b 83       	std	Y+3, r21	; 0x03
   19d80:	c2 52       	subi	r28, 0x22	; 34
   19d82:	d1 40       	sbci	r29, 0x01	; 1
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   19d84:	ca 5d       	subi	r28, 0xDA	; 218
   19d86:	de 4f       	sbci	r29, 0xFE	; 254
   19d88:	88 81       	ld	r24, Y
   19d8a:	99 81       	ldd	r25, Y+1	; 0x01
   19d8c:	aa 81       	ldd	r26, Y+2	; 0x02
   19d8e:	bb 81       	ldd	r27, Y+3	; 0x03
   19d90:	c6 52       	subi	r28, 0x26	; 38
   19d92:	d1 40       	sbci	r29, 0x01	; 1
   19d94:	a8 16       	cp	r10, r24
   19d96:	b9 06       	cpc	r11, r25
   19d98:	ca 06       	cpc	r12, r26
   19d9a:	db 06       	cpc	r13, r27
   19d9c:	0c f0       	brlt	.+2      	; 0x19da0 <lif_create_volume+0x3be>
   19d9e:	58 c0       	rjmp	.+176    	; 0x19e50 <lif_create_volume+0x46e>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19da0:	00 e0       	ldi	r16, 0x00	; 0
   19da2:	11 e0       	ldi	r17, 0x01	; 1
   19da4:	ca 5e       	subi	r28, 0xEA	; 234
   19da6:	de 4f       	sbci	r29, 0xFE	; 254
   19da8:	28 81       	ld	r18, Y
   19daa:	39 81       	ldd	r19, Y+1	; 0x01
   19dac:	4a 81       	ldd	r20, Y+2	; 0x02
   19dae:	5b 81       	ldd	r21, Y+3	; 0x03
   19db0:	c6 51       	subi	r28, 0x16	; 22
   19db2:	d1 40       	sbci	r29, 0x01	; 1
   19db4:	be 01       	movw	r22, r28
   19db6:	6c 5e       	subi	r22, 0xEC	; 236
   19db8:	7f 4f       	sbci	r23, 0xFF	; 255
   19dba:	c7 01       	movw	r24, r14
   19dbc:	0e 94 05 c2 	call	0x1840a	; 0x1840a <lif_write>
   19dc0:	09 2e       	mov	r0, r25
   19dc2:	00 0c       	add	r0, r0
   19dc4:	aa 0b       	sbc	r26, r26
   19dc6:	bb 0b       	sbc	r27, r27
        if(size < LIF_SECTOR_SIZE)
   19dc8:	8f 3f       	cpi	r24, 0xFF	; 255
   19dca:	91 05       	cpc	r25, r1
   19dcc:	a1 05       	cpc	r26, r1
   19dce:	b1 05       	cpc	r27, r1
   19dd0:	09 f0       	breq	.+2      	; 0x19dd4 <lif_create_volume+0x3f2>
   19dd2:	0c f4       	brge	.+2      	; 0x19dd6 <lif_create_volume+0x3f4>
   19dd4:	db c0       	rjmp	.+438    	; 0x19f8c <lif_create_volume+0x5aa>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   19dd6:	ca 5e       	subi	r28, 0xEA	; 234
   19dd8:	de 4f       	sbci	r29, 0xFE	; 254
   19dda:	28 81       	ld	r18, Y
   19ddc:	39 81       	ldd	r19, Y+1	; 0x01
   19dde:	4a 81       	ldd	r20, Y+2	; 0x02
   19de0:	5b 81       	ldd	r21, Y+3	; 0x03
   19de2:	c6 51       	subi	r28, 0x16	; 22
   19de4:	d1 40       	sbci	r29, 0x01	; 1
   19de6:	28 0f       	add	r18, r24
   19de8:	39 1f       	adc	r19, r25
   19dea:	4a 1f       	adc	r20, r26
   19dec:	5b 1f       	adc	r21, r27
   19dee:	ca 5e       	subi	r28, 0xEA	; 234
   19df0:	de 4f       	sbci	r29, 0xFE	; 254
   19df2:	28 83       	st	Y, r18
   19df4:	39 83       	std	Y+1, r19	; 0x01
   19df6:	4a 83       	std	Y+2, r20	; 0x02
   19df8:	5b 83       	std	Y+3, r21	; 0x03
   19dfa:	c6 51       	subi	r28, 0x16	; 22
   19dfc:	d1 40       	sbci	r29, 0x01	; 1
        if((count % 100) == 0)
   19dfe:	ce 5d       	subi	r28, 0xDE	; 222
   19e00:	de 4f       	sbci	r29, 0xFE	; 254
   19e02:	68 81       	ld	r22, Y
   19e04:	79 81       	ldd	r23, Y+1	; 0x01
   19e06:	8a 81       	ldd	r24, Y+2	; 0x02
   19e08:	9b 81       	ldd	r25, Y+3	; 0x03
   19e0a:	c2 52       	subi	r28, 0x22	; 34
   19e0c:	d1 40       	sbci	r29, 0x01	; 1
   19e0e:	a2 01       	movw	r20, r4
   19e10:	91 01       	movw	r18, r2
   19e12:	0e 94 70 e6 	call	0x1cce0	; 0x1cce0 <__divmodsi4>
   19e16:	67 2b       	or	r22, r23
   19e18:	68 2b       	or	r22, r24
   19e1a:	69 2b       	or	r22, r25
   19e1c:	99 f4       	brne	.+38     	; 0x19e44 <lif_create_volume+0x462>
            printf("\tWrote: %ld\r", count);
   19e1e:	ce 5d       	subi	r28, 0xDE	; 222
   19e20:	de 4f       	sbci	r29, 0xFE	; 254
   19e22:	88 81       	ld	r24, Y
   19e24:	99 81       	ldd	r25, Y+1	; 0x01
   19e26:	aa 81       	ldd	r26, Y+2	; 0x02
   19e28:	bb 81       	ldd	r27, Y+3	; 0x03
   19e2a:	c2 52       	subi	r28, 0x22	; 34
   19e2c:	d1 40       	sbci	r29, 0x01	; 1
   19e2e:	ed b7       	in	r30, 0x3d	; 61
   19e30:	fe b7       	in	r31, 0x3e	; 62
   19e32:	84 83       	std	Z+4, r24	; 0x04
   19e34:	95 83       	std	Z+5, r25	; 0x05
   19e36:	a6 83       	std	Z+6, r26	; 0x06
   19e38:	b7 83       	std	Z+7, r27	; 0x07
   19e3a:	61 82       	std	Z+1, r6	; 0x01
   19e3c:	72 82       	std	Z+2, r7	; 0x02
   19e3e:	83 82       	std	Z+3, r8	; 0x03
   19e40:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   19e44:	ff ef       	ldi	r31, 0xFF	; 255
   19e46:	af 1a       	sub	r10, r31
   19e48:	bf 0a       	sbc	r11, r31
   19e4a:	cf 0a       	sbc	r12, r31
   19e4c:	df 0a       	sbc	r13, r31
   19e4e:	86 cf       	rjmp	.-244    	; 0x19d5c <lif_create_volume+0x37a>
            printf("\tWrote: %ld\r", count);
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
   19e50:	80 e0       	ldi	r24, 0x00	; 0
   19e52:	91 e0       	ldi	r25, 0x01	; 1
   19e54:	cc 5e       	subi	r28, 0xEC	; 236
   19e56:	de 4f       	sbci	r29, 0xFE	; 254
   19e58:	a8 81       	ld	r26, Y
   19e5a:	b9 81       	ldd	r27, Y+1	; 0x01
   19e5c:	c4 51       	subi	r28, 0x14	; 20
   19e5e:	d1 40       	sbci	r29, 0x01	; 1
   19e60:	fc 01       	movw	r30, r24
   19e62:	1d 92       	st	X+, r1
   19e64:	31 97       	sbiw	r30, 0x01	; 1
   19e66:	e9 f7       	brne	.-6      	; 0x19e62 <lif_create_volume+0x480>
    for(i=0;i<filesectors;++i)
   19e68:	81 2c       	mov	r8, r1
   19e6a:	91 2c       	mov	r9, r1
   19e6c:	54 01       	movw	r10, r8
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
            printf("\tWrote: %ld\r", count);
   19e6e:	8b e1       	ldi	r24, 0x1B	; 27
   19e70:	9d e3       	ldi	r25, 0x3D	; 61
   19e72:	9c 01       	movw	r18, r24
   19e74:	40 e0       	ldi	r20, 0x00	; 0
   19e76:	c6 5e       	subi	r28, 0xE6	; 230
   19e78:	de 4f       	sbci	r29, 0xFE	; 254
   19e7a:	28 83       	st	Y, r18
   19e7c:	39 83       	std	Y+1, r19	; 0x01
   19e7e:	4a 83       	std	Y+2, r20	; 0x02
   19e80:	ca 51       	subi	r28, 0x1A	; 26
   19e82:	d1 40       	sbci	r29, 0x01	; 1
   19e84:	ce 5d       	subi	r28, 0xDE	; 222
   19e86:	de 4f       	sbci	r29, 0xFE	; 254
   19e88:	48 80       	ld	r4, Y
   19e8a:	59 80       	ldd	r5, Y+1	; 0x01
   19e8c:	6a 80       	ldd	r6, Y+2	; 0x02
   19e8e:	7b 80       	ldd	r7, Y+3	; 0x03
   19e90:	c2 52       	subi	r28, 0x22	; 34
   19e92:	d1 40       	sbci	r29, 0x01	; 1
   19e94:	48 0c       	add	r4, r8
   19e96:	59 1c       	adc	r5, r9
   19e98:	6a 1c       	adc	r6, r10
   19e9a:	7b 1c       	adc	r7, r11
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   19e9c:	c2 5e       	subi	r28, 0xE2	; 226
   19e9e:	de 4f       	sbci	r29, 0xFE	; 254
   19ea0:	28 81       	ld	r18, Y
   19ea2:	39 81       	ldd	r19, Y+1	; 0x01
   19ea4:	4a 81       	ldd	r20, Y+2	; 0x02
   19ea6:	5b 81       	ldd	r21, Y+3	; 0x03
   19ea8:	ce 51       	subi	r28, 0x1E	; 30
   19eaa:	d1 40       	sbci	r29, 0x01	; 1
   19eac:	82 16       	cp	r8, r18
   19eae:	93 06       	cpc	r9, r19
   19eb0:	a4 06       	cpc	r10, r20
   19eb2:	b5 06       	cpc	r11, r21
   19eb4:	0c f0       	brlt	.+2      	; 0x19eb8 <lif_create_volume+0x4d6>
   19eb6:	53 c0       	rjmp	.+166    	; 0x19f5e <lif_create_volume+0x57c>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19eb8:	00 e0       	ldi	r16, 0x00	; 0
   19eba:	11 e0       	ldi	r17, 0x01	; 1
   19ebc:	ca 5e       	subi	r28, 0xEA	; 234
   19ebe:	de 4f       	sbci	r29, 0xFE	; 254
   19ec0:	28 81       	ld	r18, Y
   19ec2:	39 81       	ldd	r19, Y+1	; 0x01
   19ec4:	4a 81       	ldd	r20, Y+2	; 0x02
   19ec6:	5b 81       	ldd	r21, Y+3	; 0x03
   19ec8:	c6 51       	subi	r28, 0x16	; 22
   19eca:	d1 40       	sbci	r29, 0x01	; 1
   19ecc:	be 01       	movw	r22, r28
   19ece:	6c 5e       	subi	r22, 0xEC	; 236
   19ed0:	7f 4f       	sbci	r23, 0xFF	; 255
   19ed2:	c7 01       	movw	r24, r14
   19ed4:	0e 94 05 c2 	call	0x1840a	; 0x1840a <lif_write>
   19ed8:	09 2e       	mov	r0, r25
   19eda:	00 0c       	add	r0, r0
   19edc:	aa 0b       	sbc	r26, r26
   19ede:	bb 0b       	sbc	r27, r27
        if(size < LIF_SECTOR_SIZE)
   19ee0:	8f 3f       	cpi	r24, 0xFF	; 255
   19ee2:	91 05       	cpc	r25, r1
   19ee4:	a1 05       	cpc	r26, r1
   19ee6:	b1 05       	cpc	r27, r1
   19ee8:	09 f0       	breq	.+2      	; 0x19eec <lif_create_volume+0x50a>
   19eea:	0c f4       	brge	.+2      	; 0x19eee <lif_create_volume+0x50c>
   19eec:	4f c0       	rjmp	.+158    	; 0x19f8c <lif_create_volume+0x5aa>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   19eee:	ca 5e       	subi	r28, 0xEA	; 234
   19ef0:	de 4f       	sbci	r29, 0xFE	; 254
   19ef2:	28 81       	ld	r18, Y
   19ef4:	39 81       	ldd	r19, Y+1	; 0x01
   19ef6:	4a 81       	ldd	r20, Y+2	; 0x02
   19ef8:	5b 81       	ldd	r21, Y+3	; 0x03
   19efa:	c6 51       	subi	r28, 0x16	; 22
   19efc:	d1 40       	sbci	r29, 0x01	; 1
   19efe:	28 0f       	add	r18, r24
   19f00:	39 1f       	adc	r19, r25
   19f02:	4a 1f       	adc	r20, r26
   19f04:	5b 1f       	adc	r21, r27
   19f06:	ca 5e       	subi	r28, 0xEA	; 234
   19f08:	de 4f       	sbci	r29, 0xFE	; 254
   19f0a:	28 83       	st	Y, r18
   19f0c:	39 83       	std	Y+1, r19	; 0x01
   19f0e:	4a 83       	std	Y+2, r20	; 0x02
   19f10:	5b 83       	std	Y+3, r21	; 0x03
   19f12:	c6 51       	subi	r28, 0x16	; 22
   19f14:	d1 40       	sbci	r29, 0x01	; 1
        if((count % 100) == 0)
   19f16:	c3 01       	movw	r24, r6
   19f18:	b2 01       	movw	r22, r4
   19f1a:	24 e6       	ldi	r18, 0x64	; 100
   19f1c:	30 e0       	ldi	r19, 0x00	; 0
   19f1e:	40 e0       	ldi	r20, 0x00	; 0
   19f20:	50 e0       	ldi	r21, 0x00	; 0
   19f22:	0e 94 70 e6 	call	0x1cce0	; 0x1cce0 <__divmodsi4>
   19f26:	67 2b       	or	r22, r23
   19f28:	68 2b       	or	r22, r24
   19f2a:	69 2b       	or	r22, r25
   19f2c:	91 f4       	brne	.+36     	; 0x19f52 <lif_create_volume+0x570>
            printf("\tWrote: %ld\r", count);
   19f2e:	ed b7       	in	r30, 0x3d	; 61
   19f30:	fe b7       	in	r31, 0x3e	; 62
   19f32:	44 82       	std	Z+4, r4	; 0x04
   19f34:	55 82       	std	Z+5, r5	; 0x05
   19f36:	66 82       	std	Z+6, r6	; 0x06
   19f38:	77 82       	std	Z+7, r7	; 0x07
   19f3a:	c6 5e       	subi	r28, 0xE6	; 230
   19f3c:	de 4f       	sbci	r29, 0xFE	; 254
   19f3e:	28 81       	ld	r18, Y
   19f40:	39 81       	ldd	r19, Y+1	; 0x01
   19f42:	4a 81       	ldd	r20, Y+2	; 0x02
   19f44:	ca 51       	subi	r28, 0x1A	; 26
   19f46:	d1 40       	sbci	r29, 0x01	; 1
   19f48:	21 83       	std	Z+1, r18	; 0x01
   19f4a:	32 83       	std	Z+2, r19	; 0x02
   19f4c:	43 83       	std	Z+3, r20	; 0x03
   19f4e:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   19f52:	ff ef       	ldi	r31, 0xFF	; 255
   19f54:	8f 1a       	sub	r8, r31
   19f56:	9f 0a       	sbc	r9, r31
   19f58:	af 0a       	sbc	r10, r31
   19f5a:	bf 0a       	sbc	r11, r31
   19f5c:	93 cf       	rjmp	.-218    	; 0x19e84 <lif_create_volume+0x4a2>
        offset += size;
        if((count % 100) == 0)
            printf("\tWrote: %ld\r", count);
        ++count;
    }
    printf("\tWrote: %ld\n", count);
   19f5e:	ed b7       	in	r30, 0x3d	; 61
   19f60:	fe b7       	in	r31, 0x3e	; 62
   19f62:	44 82       	std	Z+4, r4	; 0x04
   19f64:	55 82       	std	Z+5, r5	; 0x05
   19f66:	66 82       	std	Z+6, r6	; 0x06
   19f68:	77 82       	std	Z+7, r7	; 0x07
   19f6a:	8e e0       	ldi	r24, 0x0E	; 14
   19f6c:	9d e3       	ldi	r25, 0x3D	; 61
   19f6e:	a0 e0       	ldi	r26, 0x00	; 0
   19f70:	81 83       	std	Z+1, r24	; 0x01
   19f72:	92 83       	std	Z+2, r25	; 0x02
   19f74:	a3 83       	std	Z+3, r26	; 0x03
   19f76:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
/// @return void
MEMSPACE
void lif_rewinddir(lif_t *LIF)
{
// Directory index
    LIF->dirindex = -1;
   19f7a:	8f ef       	ldi	r24, 0xFF	; 255
   19f7c:	9f ef       	ldi	r25, 0xFF	; 255
   19f7e:	f7 01       	movw	r30, r14
   19f80:	91 a3       	std	Z+33, r25	; 0x21
    printf("\tWrote: %ld\n", count);

    lif_rewinddir(LIF);

// As a sanity check verify basic values
    if( !lif_check_volume(LIF) )
   19f82:	80 a3       	std	Z+32, r24	; 0x20
   19f84:	c7 01       	movw	r24, r14
   19f86:	1a d8       	rcall	.-4044   	; 0x18fbc <lif_check_volume>
   19f88:	89 2b       	or	r24, r25
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   19f8a:	19 f4       	brne	.+6      	; 0x19f92 <lif_create_volume+0x5b0>
   19f8c:	c7 01       	movw	r24, r14
   19f8e:	b6 da       	rcall	.-2708   	; 0x194fc <lif_close_volume>
   19f90:	08 c0       	rjmp	.+16     	; 0x19fa2 <lif_create_volume+0x5c0>
        lif_closedir(LIF);
        return(NULL);
    }

// Scan directory and verify values
    if( !lif_updatefree(LIF))
   19f92:	c7 01       	movw	r24, r14
   19f94:	1c dc       	rcall	.-1992   	; 0x197ce <lif_updatefree>
   19f96:	6c 01       	movw	r12, r24
   19f98:	89 2b       	or	r24, r25
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   19f9a:	31 f4       	brne	.+12     	; 0x19fa8 <lif_create_volume+0x5c6>
   19f9c:	c7 01       	movw	r24, r14
   19f9e:	ae da       	rcall	.-2724   	; 0x194fc <lif_close_volume>

// Scan directory and verify values
    if( !lif_updatefree(LIF))
    {
        lif_closedir(LIF);
        return(NULL);
   19fa0:	04 c0       	rjmp	.+8      	; 0x19faa <lif_create_volume+0x5c8>

    time_t t = time(NULL);

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
    if(LIF == NULL)
        return(NULL);
   19fa2:	c1 2c       	mov	r12, r1
   19fa4:	d1 2c       	mov	r13, r1
   19fa6:	01 c0       	rjmp	.+2      	; 0x19faa <lif_create_volume+0x5c8>
   19fa8:	67 01       	movw	r12, r14
        lif_closedir(LIF);
        return(NULL);
    }

    return(LIF);
}
   19faa:	c6 01       	movw	r24, r12
   19fac:	c7 5d       	subi	r28, 0xD7	; 215
   19fae:	de 4f       	sbci	r29, 0xFE	; 254
   19fb0:	e2 e1       	ldi	r30, 0x12	; 18
   19fb2:	0c 94 d7 e6 	jmp	0x1cdae	; 0x1cdae <__epilogue_restores__>

00019fb6 <lif_newdir>:
/// @param[in] *LIF: LIF pointer
/// @param[in] sectors: try to find specified free space
/// @return index or free record or -1 on error
MEMSPACE
int lif_newdir(lif_t *LIF, long sectors)
{
   19fb6:	ad e1       	ldi	r26, 0x1D	; 29
   19fb8:	b0 e0       	ldi	r27, 0x00	; 0
   19fba:	e1 ee       	ldi	r30, 0xE1	; 225
   19fbc:	ff ec       	ldi	r31, 0xCF	; 207
   19fbe:	0c 94 bb e6 	jmp	0x1cd76	; 0x1cd76 <__prologue_saves__>
   19fc2:	9d 8f       	std	Y+29, r25	; 0x1d
   19fc4:	8c 8f       	std	Y+28, r24	; 0x1c
   19fc6:	4a 01       	movw	r8, r20
   19fc8:	5b 01       	movw	r10, r22

// Directory index
    index = 0;

// Start of free space
    start = LIF->filestart;
   19fca:	fc 01       	movw	r30, r24
   19fcc:	c4 84       	ldd	r12, Z+12	; 0x0c
   19fce:	d5 84       	ldd	r13, Z+13	; 0x0d
   19fd0:	e6 84       	ldd	r14, Z+14	; 0x0e
   19fd2:	f7 84       	ldd	r15, Z+15	; 0x0f

// Update all file information
    if(lif_updatefree(LIF) == NULL)
   19fd4:	fc db       	rcall	.-2056   	; 0x197ce <lif_updatefree>
   19fd6:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19fd8:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19fda:	40 8d       	ldd	r20, Z+24	; 0x18
   19fdc:	51 8d       	ldd	r21, Z+25	; 0x19
   19fde:	62 8d       	ldd	r22, Z+26	; 0x1a
   19fe0:	73 8d       	ldd	r23, Z+27	; 0x1b
   19fe2:	89 2b       	or	r24, r25
   19fe4:	99 f4       	brne	.+38     	; 0x1a00c <lif_newdir+0x56>
    {
        printf("lif_newdir: not enough free space:[%ld] for size:[%ld]\n", (long)LIF->freesectors, (long) sectors);
   19fe6:	ed b7       	in	r30, 0x3d	; 61
   19fe8:	fe b7       	in	r31, 0x3e	; 62
   19fea:	80 86       	std	Z+8, r8	; 0x08
   19fec:	91 86       	std	Z+9, r9	; 0x09
   19fee:	a2 86       	std	Z+10, r10	; 0x0a
   19ff0:	b3 86       	std	Z+11, r11	; 0x0b
   19ff2:	44 83       	std	Z+4, r20	; 0x04
   19ff4:	55 83       	std	Z+5, r21	; 0x05
   19ff6:	66 83       	std	Z+6, r22	; 0x06
   19ff8:	77 83       	std	Z+7, r23	; 0x07
   19ffa:	8f e2       	ldi	r24, 0x2F	; 47
   19ffc:	9c e3       	ldi	r25, 0x3C	; 60
   19ffe:	a0 e0       	ldi	r26, 0x00	; 0
   1a000:	81 83       	std	Z+1, r24	; 0x01
   1a002:	92 83       	std	Z+2, r25	; 0x02
   1a004:	a3 83       	std	Z+3, r26	; 0x03
   1a006:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   1a00a:	2f c1       	rjmp	.+606    	; 0x1a26a <lif_newdir+0x2b4>
        return(-1);
    }

// Not enough room ?
    if(sectors > (long)LIF->freesectors)
   1a00c:	48 15       	cp	r20, r8
   1a00e:	59 05       	cpc	r21, r9
   1a010:	6a 05       	cpc	r22, r10
   1a012:	7b 05       	cpc	r23, r11
   1a014:	c4 f0       	brlt	.+48     	; 0x1a046 <lif_newdir+0x90>
   1a016:	44 24       	eor	r4, r4
   1a018:	43 94       	inc	r4
   1a01a:	51 2c       	mov	r5, r1
   1a01c:	61 2c       	mov	r6, r1
   1a01e:	71 2c       	mov	r7, r1
#endif
            break;
        }

// We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   1a020:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a022:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1a024:	86 5a       	subi	r24, 0xA6	; 166
   1a026:	9f 4f       	sbci	r25, 0xFF	; 255
   1a028:	9d 8b       	std	Y+21, r25	; 0x15
   1a02a:	8c 8b       	std	Y+20, r24	; 0x14
   1a02c:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a02e:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a030:	e4 5a       	subi	r30, 0xA4	; 164
   1a032:	ff 4f       	sbci	r31, 0xFF	; 255
   1a034:	fb 8b       	std	Y+19, r31	; 0x13
   1a036:	ea 8b       	std	Y+18, r30	; 0x12
                freestate = 0;                    // Try again
        }

// Computed start of next record
// Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   1a038:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a03a:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1a03c:	80 5a       	subi	r24, 0xA0	; 160
   1a03e:	9f 4f       	sbci	r25, 0xFF	; 255
   1a040:	9f 8b       	std	Y+23, r25	; 0x17
   1a042:	8e 8b       	std	Y+22, r24	; 0x16
   1a044:	21 c0       	rjmp	.+66     	; 0x1a088 <lif_newdir+0xd2>
    }

// Not enough room ?
    if(sectors > (long)LIF->freesectors)
    {
        printf("lif_newdir: not enough free space:[%ld]\n", (long)LIF->freesectors);
   1a046:	ed b7       	in	r30, 0x3d	; 61
   1a048:	fe b7       	in	r31, 0x3e	; 62
   1a04a:	44 83       	std	Z+4, r20	; 0x04
   1a04c:	55 83       	std	Z+5, r21	; 0x05
   1a04e:	66 83       	std	Z+6, r22	; 0x06
   1a050:	77 83       	std	Z+7, r23	; 0x07
   1a052:	86 e0       	ldi	r24, 0x06	; 6
   1a054:	9c e3       	ldi	r25, 0x3C	; 60
   1a056:	a0 e0       	ldi	r26, 0x00	; 0
   1a058:	81 83       	std	Z+1, r24	; 0x01
   1a05a:	92 83       	std	Z+2, r25	; 0x02
   1a05c:	a3 83       	std	Z+3, r26	; 0x03
   1a05e:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   1a062:	03 c1       	rjmp	.+518    	; 0x1a26a <lif_newdir+0x2b4>
#endif
            break;
        }

// We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   1a064:	ec 89       	ldd	r30, Y+20	; 0x14
   1a066:	fd 89       	ldd	r31, Y+21	; 0x15
   1a068:	80 81       	ld	r24, Z
   1a06a:	91 81       	ldd	r25, Z+1	; 0x01
   1a06c:	8f 3f       	cpi	r24, 0xFF	; 255
   1a06e:	ff ef       	ldi	r31, 0xFF	; 255
   1a070:	9f 07       	cpc	r25, r31
   1a072:	a1 f0       	breq	.+40     	; 0x1a09c <lif_newdir+0xe6>
            }
            return(index);
        }

// PURGED records
        if(LIF->DIR.FileType == 0)
   1a074:	89 2b       	or	r24, r25
   1a076:	09 f0       	breq	.+2      	; 0x1a07a <lif_newdir+0xc4>
   1a078:	ce c0       	rjmp	.+412    	; 0x1a216 <lif_newdir+0x260>
        {
            if(freestate == 0)
   1a07a:	61 14       	cp	r6, r1
   1a07c:	71 04       	cpc	r7, r1
   1a07e:	09 f4       	brne	.+2      	; 0x1a082 <lif_newdir+0xcc>
   1a080:	c1 c0       	rjmp	.+386    	; 0x1a204 <lif_newdir+0x24e>
   1a082:	ff ef       	ldi	r31, 0xFF	; 255
   1a084:	4f 1a       	sub	r4, r31
   1a086:	5f 0a       	sbc	r5, r31
   1a088:	82 01       	movw	r16, r4
   1a08a:	01 50       	subi	r16, 0x01	; 1
   1a08c:	11 09       	sbc	r17, r1

// Update free space and EOF pointers
    while(1)
    {
// Write new EOF after current one
        if( !lif_readdirindex(LIF,index) )
   1a08e:	b8 01       	movw	r22, r16
   1a090:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a092:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1a094:	c1 da       	rcall	.-2686   	; 0x19618 <lif_readdirindex>
   1a096:	89 2b       	or	r24, r25
   1a098:	29 f7       	brne	.-54     	; 0x1a064 <lif_newdir+0xae>
   1a09a:	e7 c0       	rjmp	.+462    	; 0x1a26a <lif_newdir+0x2b4>
        if(LIF->DIR.FileType == 0xffff)
        {

// Was enough free space found in purged area ?
// Do NOT need to update EOF!
            if(freestate == 2)
   1a09c:	22 e0       	ldi	r18, 0x02	; 2
   1a09e:	62 16       	cp	r6, r18
   1a0a0:	71 04       	cpc	r7, r1
   1a0a2:	09 f0       	breq	.+2      	; 0x1a0a6 <lif_newdir+0xf0>
   1a0a4:	46 c0       	rjmp	.+140    	; 0x1a132 <lif_newdir+0x17c>
            {
// Update free pace for new file
                lif_dir_clear(LIF);
   1a0a6:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a0a8:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1a0aa:	0e 94 09 c6 	call	0x18c12	; 0x18c12 <lif_dir_clear>
                LIF->DIR.FileStartSector = freestart;
   1a0ae:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a0b0:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a0b2:	e4 5a       	subi	r30, 0xA4	; 164
   1a0b4:	ff 4f       	sbci	r31, 0xFF	; 255
   1a0b6:	88 8d       	ldd	r24, Y+24	; 0x18
   1a0b8:	80 83       	st	Z, r24
   1a0ba:	99 8d       	ldd	r25, Y+25	; 0x19
   1a0bc:	91 83       	std	Z+1, r25	; 0x01
   1a0be:	2a 8d       	ldd	r18, Y+26	; 0x1a
   1a0c0:	22 83       	std	Z+2, r18	; 0x02
   1a0c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
   1a0c4:	83 83       	std	Z+3, r24	; 0x03
                LIF->DIR.FileSectors = sectors;
   1a0c6:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a0c8:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a0ca:	e0 5a       	subi	r30, 0xA0	; 160
   1a0cc:	ff 4f       	sbci	r31, 0xFF	; 255
   1a0ce:	80 82       	st	Z, r8
   1a0d0:	91 82       	std	Z+1, r9	; 0x01
   1a0d2:	a2 82       	std	Z+2, r10	; 0x02
   1a0d4:	b3 82       	std	Z+3, r11	; 0x03
                LIF->usedsectors += sectors;
   1a0d6:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a0d8:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a0da:	84 89       	ldd	r24, Z+20	; 0x14
   1a0dc:	95 89       	ldd	r25, Z+21	; 0x15
   1a0de:	a6 89       	ldd	r26, Z+22	; 0x16
   1a0e0:	b7 89       	ldd	r27, Z+23	; 0x17
   1a0e2:	88 0d       	add	r24, r8
   1a0e4:	99 1d       	adc	r25, r9
   1a0e6:	aa 1d       	adc	r26, r10
   1a0e8:	bb 1d       	adc	r27, r11
   1a0ea:	84 8b       	std	Z+20, r24	; 0x14
   1a0ec:	95 8b       	std	Z+21, r25	; 0x15
   1a0ee:	a6 8b       	std	Z+22, r26	; 0x16
   1a0f0:	b7 8b       	std	Z+23, r27	; 0x17
                LIF->freesectors -= sectors;
   1a0f2:	80 8d       	ldd	r24, Z+24	; 0x18
   1a0f4:	91 8d       	ldd	r25, Z+25	; 0x19
   1a0f6:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a0f8:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a0fa:	88 19       	sub	r24, r8
   1a0fc:	99 09       	sbc	r25, r9
   1a0fe:	aa 09       	sbc	r26, r10
   1a100:	bb 09       	sbc	r27, r11
   1a102:	80 8f       	std	Z+24, r24	; 0x18
   1a104:	91 8f       	std	Z+25, r25	; 0x19
   1a106:	a2 8f       	std	Z+26, r26	; 0x1a
   1a108:	b3 8f       	std	Z+27, r27	; 0x1b
                LIF->files++;
   1a10a:	84 8d       	ldd	r24, Z+28	; 0x1c
   1a10c:	95 8d       	ldd	r25, Z+29	; 0x1d
   1a10e:	01 96       	adiw	r24, 0x01	; 1
   1a110:	95 8f       	std	Z+29, r25	; 0x1d
   1a112:	84 8f       	std	Z+28, r24	; 0x1c
                LIF->purged--;
   1a114:	86 8d       	ldd	r24, Z+30	; 0x1e
   1a116:	97 8d       	ldd	r25, Z+31	; 0x1f
   1a118:	01 97       	sbiw	r24, 0x01	; 1
   1a11a:	97 8f       	std	Z+31, r25	; 0x1f
   1a11c:	86 8f       	std	Z+30, r24	; 0x1e
                LIF->dirindex = freeindex;
   1a11e:	20 a2       	std	Z+32, r2	; 0x20
   1a120:	31 a2       	std	Z+33, r3	; 0x21
// Write new record (FileType is still EOF until data is updated by user)
                if( !lif_writedirindex(LIF,freeindex))
   1a122:	b1 01       	movw	r22, r2
   1a124:	cf 01       	movw	r24, r30
   1a126:	df da       	rcall	.-2626   	; 0x196e6 <lif_writedirindex>
   1a128:	89 2b       	or	r24, r25
   1a12a:	09 f4       	brne	.+2      	; 0x1a12e <lif_newdir+0x178>
   1a12c:	9e c0       	rjmp	.+316    	; 0x1a26a <lif_newdir+0x2b4>
   1a12e:	c1 01       	movw	r24, r2
   1a130:	9e c0       	rjmp	.+316    	; 0x1a26e <lif_newdir+0x2b8>
                    break;
                }
                return(freeindex);
            }

            if(debuglevel & LIF_DEBUG)
   1a132:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a136:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a13a:	92 ff       	sbrs	r25, 2
   1a13c:	1e c0       	rjmp	.+60     	; 0x1a17a <lif_newdir+0x1c4>
                printf("lif_newdir: index:[%d] adding at:[%ld]to purged space:[%ld] sectors, free:[%ld]\n",
   1a13e:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a140:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a142:	80 8d       	ldd	r24, Z+24	; 0x18
   1a144:	91 8d       	ldd	r25, Z+25	; 0x19
   1a146:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a148:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a14a:	ed b7       	in	r30, 0x3d	; 61
   1a14c:	fe b7       	in	r31, 0x3e	; 62
   1a14e:	86 87       	std	Z+14, r24	; 0x0e
   1a150:	97 87       	std	Z+15, r25	; 0x0f
   1a152:	a0 8b       	std	Z+16, r26	; 0x10
   1a154:	b1 8b       	std	Z+17, r27	; 0x11
   1a156:	82 86       	std	Z+10, r8	; 0x0a
   1a158:	93 86       	std	Z+11, r9	; 0x0b
   1a15a:	a4 86       	std	Z+12, r10	; 0x0c
   1a15c:	b5 86       	std	Z+13, r11	; 0x0d
   1a15e:	c6 82       	std	Z+6, r12	; 0x06
   1a160:	d7 82       	std	Z+7, r13	; 0x07
   1a162:	e0 86       	std	Z+8, r14	; 0x08
   1a164:	f1 86       	std	Z+9, r15	; 0x09
   1a166:	15 83       	std	Z+5, r17	; 0x05
   1a168:	04 83       	std	Z+4, r16	; 0x04
   1a16a:	85 eb       	ldi	r24, 0xB5	; 181
   1a16c:	9b e3       	ldi	r25, 0x3B	; 59
   1a16e:	a0 e0       	ldi	r26, 0x00	; 0
   1a170:	81 83       	std	Z+1, r24	; 0x01
   1a172:	92 83       	std	Z+2, r25	; 0x02
   1a174:	a3 83       	std	Z+3, r26	; 0x03
   1a176:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
                    (int) index,(long)start,(long) sectors, (long)LIF->freesectors);

// Write new EOF after current one
            if( !lif_writedirEOF(LIF,index+1) )
   1a17a:	b8 01       	movw	r22, r16
   1a17c:	6f 5f       	subi	r22, 0xFF	; 255
   1a17e:	7f 4f       	sbci	r23, 0xFF	; 255
   1a180:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a182:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1a184:	0c db       	rcall	.-2536   	; 0x1979e <lif_writedirEOF>
   1a186:	89 2b       	or	r24, r25
   1a188:	09 f4       	brne	.+2      	; 0x1a18c <lif_newdir+0x1d6>
   1a18a:	6f c0       	rjmp	.+222    	; 0x1a26a <lif_newdir+0x2b4>
            {
                break;
            }

            lif_dir_clear(LIF);
   1a18c:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a18e:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1a190:	0e 94 09 c6 	call	0x18c12	; 0x18c12 <lif_dir_clear>
            LIF->DIR.FileStartSector = start;
   1a194:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a196:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a198:	e4 5a       	subi	r30, 0xA4	; 164
   1a19a:	ff 4f       	sbci	r31, 0xFF	; 255
   1a19c:	c0 82       	st	Z, r12
   1a19e:	d1 82       	std	Z+1, r13	; 0x01
   1a1a0:	e2 82       	std	Z+2, r14	; 0x02
   1a1a2:	f3 82       	std	Z+3, r15	; 0x03
            LIF->DIR.FileSectors = sectors;
   1a1a4:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a1a6:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a1a8:	e0 5a       	subi	r30, 0xA0	; 160
   1a1aa:	ff 4f       	sbci	r31, 0xFF	; 255
   1a1ac:	80 82       	st	Z, r8
   1a1ae:	91 82       	std	Z+1, r9	; 0x01
   1a1b0:	a2 82       	std	Z+2, r10	; 0x02
   1a1b2:	b3 82       	std	Z+3, r11	; 0x03
            LIF->usedsectors += sectors;
   1a1b4:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a1b6:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a1b8:	84 89       	ldd	r24, Z+20	; 0x14
   1a1ba:	95 89       	ldd	r25, Z+21	; 0x15
   1a1bc:	a6 89       	ldd	r26, Z+22	; 0x16
   1a1be:	b7 89       	ldd	r27, Z+23	; 0x17
   1a1c0:	88 0d       	add	r24, r8
   1a1c2:	99 1d       	adc	r25, r9
   1a1c4:	aa 1d       	adc	r26, r10
   1a1c6:	bb 1d       	adc	r27, r11
   1a1c8:	84 8b       	std	Z+20, r24	; 0x14
   1a1ca:	95 8b       	std	Z+21, r25	; 0x15
   1a1cc:	a6 8b       	std	Z+22, r26	; 0x16
   1a1ce:	b7 8b       	std	Z+23, r27	; 0x17
            LIF->freesectors -= sectors;
   1a1d0:	80 8d       	ldd	r24, Z+24	; 0x18
   1a1d2:	91 8d       	ldd	r25, Z+25	; 0x19
   1a1d4:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a1d6:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a1d8:	88 19       	sub	r24, r8
   1a1da:	99 09       	sbc	r25, r9
   1a1dc:	aa 09       	sbc	r26, r10
   1a1de:	bb 09       	sbc	r27, r11
   1a1e0:	80 8f       	std	Z+24, r24	; 0x18
   1a1e2:	91 8f       	std	Z+25, r25	; 0x19
   1a1e4:	a2 8f       	std	Z+26, r26	; 0x1a
   1a1e6:	b3 8f       	std	Z+27, r27	; 0x1b
            LIF->files++;
   1a1e8:	84 8d       	ldd	r24, Z+28	; 0x1c
   1a1ea:	95 8d       	ldd	r25, Z+29	; 0x1d
   1a1ec:	01 96       	adiw	r24, 0x01	; 1
   1a1ee:	95 8f       	std	Z+29, r25	; 0x1d
   1a1f0:	84 8f       	std	Z+28, r24	; 0x1c
            LIF->dirindex = index;
   1a1f2:	11 a3       	std	Z+33, r17	; 0x21
// Write new record (FileType is still EOF until data is updated by user )
            if( !lif_writedirindex(LIF,index))
   1a1f4:	00 a3       	std	Z+32, r16	; 0x20
   1a1f6:	b8 01       	movw	r22, r16
   1a1f8:	cf 01       	movw	r24, r30
   1a1fa:	75 da       	rcall	.-2838   	; 0x196e6 <lif_writedirindex>
   1a1fc:	89 2b       	or	r24, r25
   1a1fe:	a9 f1       	breq	.+106    	; 0x1a26a <lif_newdir+0x2b4>
   1a200:	c8 01       	movw	r24, r16
   1a202:	35 c0       	rjmp	.+106    	; 0x1a26e <lif_newdir+0x2b8>
        }

// PURGED records
        if(LIF->DIR.FileType == 0)
        {
            if(freestate == 0)
   1a204:	c8 8e       	std	Y+24, r12	; 0x18
   1a206:	d9 8e       	std	Y+25, r13	; 0x19
   1a208:	ea 8e       	std	Y+26, r14	; 0x1a
   1a20a:	fb 8e       	std	Y+27, r15	; 0x1b
   1a20c:	18 01       	movw	r2, r16
            {
                freeindex = index;
                freestart = start;
                freestate = 1;
   1a20e:	66 24       	eor	r6, r6
   1a210:	63 94       	inc	r6
   1a212:	71 2c       	mov	r7, r1
            }
            ++index;
            continue;
   1a214:	36 cf       	rjmp	.-404    	; 0x1a082 <lif_newdir+0xcc>
        }

// VALID record
        if(freestate == 1)
   1a216:	f1 e0       	ldi	r31, 0x01	; 1
   1a218:	6f 16       	cp	r6, r31
   1a21a:	71 04       	cpc	r7, r1
   1a21c:	a9 f4       	brne	.+42     	; 0x1a248 <lif_newdir+0x292>
        {
            long freesectors;
// Compute sectors of purged space between valid records
// Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
   1a21e:	ea 89       	ldd	r30, Y+18	; 0x12
   1a220:	fb 89       	ldd	r31, Y+19	; 0x13
   1a222:	80 81       	ld	r24, Z
   1a224:	91 81       	ldd	r25, Z+1	; 0x01
   1a226:	a2 81       	ldd	r26, Z+2	; 0x02
   1a228:	b3 81       	ldd	r27, Z+3	; 0x03
   1a22a:	8c 19       	sub	r24, r12
   1a22c:	9d 09       	sbc	r25, r13
   1a22e:	ae 09       	sbc	r26, r14
   1a230:	bf 09       	sbc	r27, r15
   1a232:	88 15       	cp	r24, r8
   1a234:	99 05       	cpc	r25, r9
   1a236:	aa 05       	cpc	r26, r10
   1a238:	bb 05       	cpc	r27, r11
   1a23a:	1c f4       	brge	.+6      	; 0x1a242 <lif_newdir+0x28c>
                freestate = 2;                    // Found free space in purged record
            else
                freestate = 0;                    // Try again
   1a23c:	61 2c       	mov	r6, r1
   1a23e:	71 2c       	mov	r7, r1
   1a240:	03 c0       	rjmp	.+6      	; 0x1a248 <lif_newdir+0x292>
            long freesectors;
// Compute sectors of purged space between valid records
// Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
                freestate = 2;                    // Found free space in purged record
   1a242:	82 e0       	ldi	r24, 0x02	; 2
   1a244:	68 2e       	mov	r6, r24
   1a246:	71 2c       	mov	r7, r1
                freestate = 0;                    // Try again
        }

// Computed start of next record
// Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   1a248:	ea 89       	ldd	r30, Y+18	; 0x12
   1a24a:	fb 89       	ldd	r31, Y+19	; 0x13
   1a24c:	c0 80       	ld	r12, Z
   1a24e:	d1 80       	ldd	r13, Z+1	; 0x01
   1a250:	e2 80       	ldd	r14, Z+2	; 0x02
   1a252:	f3 80       	ldd	r15, Z+3	; 0x03
   1a254:	ee 89       	ldd	r30, Y+22	; 0x16
   1a256:	ff 89       	ldd	r31, Y+23	; 0x17
   1a258:	80 81       	ld	r24, Z
   1a25a:	91 81       	ldd	r25, Z+1	; 0x01
   1a25c:	a2 81       	ldd	r26, Z+2	; 0x02
   1a25e:	b3 81       	ldd	r27, Z+3	; 0x03
   1a260:	c8 0e       	add	r12, r24
   1a262:	d9 1e       	adc	r13, r25
   1a264:	ea 1e       	adc	r14, r26
   1a266:	fb 1e       	adc	r15, r27
   1a268:	0c cf       	rjmp	.-488    	; 0x1a082 <lif_newdir+0xcc>
        ++index;
    }
// ERROR
    return(-1);
   1a26a:	8f ef       	ldi	r24, 0xFF	; 255
   1a26c:	9f ef       	ldi	r25, 0xFF	; 255
}
   1a26e:	6d 96       	adiw	r28, 0x1d	; 29
   1a270:	e2 e1       	ldi	r30, 0x12	; 18
   1a272:	0c 94 d7 e6 	jmp	0x1cdae	; 0x1cdae <__epilogue_restores__>

0001a276 <lif_open_volume>:
/// @param[in] *name: file name of LIF image
/// @param[in] *mode: "rb" = read, "rb+" = read/write
/// @return LIF pointer on sucesses or NULL on error
MEMSPACE
lif_t *lif_open_volume(char *name, char *mode)
{
   1a276:	a9 e3       	ldi	r26, 0x39	; 57
   1a278:	b1 e0       	ldi	r27, 0x01	; 1
   1a27a:	e1 e4       	ldi	r30, 0x41	; 65
   1a27c:	f1 ed       	ldi	r31, 0xD1	; 209
   1a27e:	0c 94 c1 e6 	jmp	0x1cd82	; 0x1cd82 <__prologue_saves__+0xc>
   1a282:	6c 01       	movw	r12, r24
   1a284:	8b 01       	movw	r16, r22
    lif_t *LIF;
    stat_t sb, *sp;
    uint8_t buffer[LIF_SECTOR_SIZE];

    sp = lif_stat(name, (stat_t *)&sb);
   1a286:	be 01       	movw	r22, r28
   1a288:	66 5f       	subi	r22, 0xF6	; 246
   1a28a:	7e 4f       	sbci	r23, 0xFE	; 254
   1a28c:	0e 94 58 c1 	call	0x182b0	; 0x182b0 <lif_stat>
   1a290:	5c 01       	movw	r10, r24
    if(sp == NULL)
   1a292:	00 97       	sbiw	r24, 0x00	; 0
   1a294:	09 f1       	breq	.+66     	; 0x1a2d8 <lif_open_volume+0x62>
        return(NULL);

// To read LIF volume we must have at minimum two sectors
// volume header a directory entry
    if(sp->st_size < (long)LIF_SECTOR_SIZE*2)
   1a296:	fc 01       	movw	r30, r24
   1a298:	80 8d       	ldd	r24, Z+24	; 0x18
   1a29a:	91 8d       	ldd	r25, Z+25	; 0x19
   1a29c:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a29e:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a2a0:	81 15       	cp	r24, r1
   1a2a2:	f2 e0       	ldi	r31, 0x02	; 2
   1a2a4:	9f 07       	cpc	r25, r31
   1a2a6:	a1 05       	cpc	r26, r1
   1a2a8:	b1 05       	cpc	r27, r1
   1a2aa:	c8 f4       	brcc	.+50     	; 0x1a2de <lif_open_volume+0x68>
    {
        if(debuglevel & LIF_DEBUG)
   1a2ac:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1a2b0:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a2b4:	32 ff       	sbrs	r19, 2
   1a2b6:	10 c0       	rjmp	.+32     	; 0x1a2d8 <lif_open_volume+0x62>
            printf("lif_open_volume:[%s] error volume header area too small:[%ld]\n", name, (long)sp->st_size);
   1a2b8:	ed b7       	in	r30, 0x3d	; 61
   1a2ba:	fe b7       	in	r31, 0x3e	; 62
   1a2bc:	86 83       	std	Z+6, r24	; 0x06
   1a2be:	97 83       	std	Z+7, r25	; 0x07
   1a2c0:	a0 87       	std	Z+8, r26	; 0x08
   1a2c2:	b1 87       	std	Z+9, r27	; 0x09
   1a2c4:	d5 82       	std	Z+5, r13	; 0x05
   1a2c6:	c4 82       	std	Z+4, r12	; 0x04
   1a2c8:	86 e7       	ldi	r24, 0x76	; 118
   1a2ca:	9b e3       	ldi	r25, 0x3B	; 59
   1a2cc:	a0 e0       	ldi	r26, 0x00	; 0
   1a2ce:	81 83       	std	Z+1, r24	; 0x01
   1a2d0:	92 83       	std	Z+2, r25	; 0x02
   1a2d2:	a3 83       	std	Z+3, r26	; 0x03
   1a2d4:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
        return(NULL);
   1a2d8:	00 e0       	ldi	r16, 0x00	; 0
   1a2da:	10 e0       	ldi	r17, 0x00	; 0
   1a2dc:	c6 c0       	rjmp	.+396    	; 0x1a46a <lif_open_volume+0x1f4>
    }

// Allocate LIF structure
    LIF = lif_calloc(sizeof(lif_t)+4);
   1a2de:	64 e7       	ldi	r22, 0x74	; 116
   1a2e0:	70 e0       	ldi	r23, 0x00	; 0
   1a2e2:	80 e0       	ldi	r24, 0x00	; 0
   1a2e4:	90 e0       	ldi	r25, 0x00	; 0
   1a2e6:	0e 94 c4 c0 	call	0x18188	; 0x18188 <lif_calloc>
   1a2ea:	7c 01       	movw	r14, r24
    if(!LIF)
   1a2ec:	89 2b       	or	r24, r25
   1a2ee:	a1 f3       	breq	.-24     	; 0x1a2d8 <lif_open_volume+0x62>
        return(NULL);

    LIF->name = lif_stralloc(name);
   1a2f0:	c6 01       	movw	r24, r12
   1a2f2:	0e 94 0f c1 	call	0x1821e	; 0x1821e <lif_stralloc>
   1a2f6:	f7 01       	movw	r30, r14
   1a2f8:	91 83       	std	Z+1, r25	; 0x01
   1a2fa:	80 83       	st	Z, r24
    if(!LIF->name)
   1a2fc:	00 97       	sbiw	r24, 0x00	; 0
   1a2fe:	09 f4       	brne	.+2      	; 0x1a302 <lif_open_volume+0x8c>
   1a300:	5e c0       	rjmp	.+188    	; 0x1a3be <lif_open_volume+0x148>
    {
        lif_closedir(LIF);
        return(NULL);
    }

    LIF->imagebytes = sp->st_size;
   1a302:	f5 01       	movw	r30, r10
   1a304:	80 8c       	ldd	r8, Z+24	; 0x18
   1a306:	91 8c       	ldd	r9, Z+25	; 0x19
   1a308:	a2 8c       	ldd	r10, Z+26	; 0x1a
   1a30a:	b3 8c       	ldd	r11, Z+27	; 0x1b
   1a30c:	f7 01       	movw	r30, r14
   1a30e:	80 86       	std	Z+8, r8	; 0x08
   1a310:	91 86       	std	Z+9, r9	; 0x09
   1a312:	a2 86       	std	Z+10, r10	; 0x0a
   1a314:	b3 86       	std	Z+11, r11	; 0x0b
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a316:	77 27       	eor	r23, r23
   1a318:	6b 2d       	mov	r22, r11
   1a31a:	5a 2d       	mov	r21, r10
   1a31c:	49 2d       	mov	r20, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a31e:	88 20       	and	r8, r8
   1a320:	21 f0       	breq	.+8      	; 0x1a32a <lif_open_volume+0xb4>
        ++sectors;
   1a322:	4f 5f       	subi	r20, 0xFF	; 255
   1a324:	5f 4f       	sbci	r21, 0xFF	; 255
   1a326:	6f 4f       	sbci	r22, 0xFF	; 255
   1a328:	7f 4f       	sbci	r23, 0xFF	; 255
        lif_closedir(LIF);
        return(NULL);
    }

    LIF->imagebytes = sp->st_size;
    LIF->sectors = lif_bytes2sectors(sp->st_size);
   1a32a:	f7 01       	movw	r30, r14
   1a32c:	44 83       	std	Z+4, r20	; 0x04
   1a32e:	55 83       	std	Z+5, r21	; 0x05
   1a330:	66 83       	std	Z+6, r22	; 0x06
   1a332:	77 83       	std	Z+7, r23	; 0x07

    LIF->fp = lif_open(LIF->name,mode);
   1a334:	b8 01       	movw	r22, r16
   1a336:	0e 94 2e c1 	call	0x1825c	; 0x1825c <lif_open>
   1a33a:	f7 01       	movw	r30, r14
   1a33c:	93 83       	std	Z+3, r25	; 0x03
   1a33e:	82 83       	std	Z+2, r24	; 0x02
    if(!LIF->fp)
   1a340:	89 2b       	or	r24, r25
   1a342:	e9 f1       	breq	.+122    	; 0x1a3be <lif_open_volume+0x148>
        lif_closedir(LIF);
        return(NULL);
    }

// Volume header must be it least one sector
    if( lif_read(LIF, buffer, 0, LIF_SECTOR_SIZE) < LIF_SECTOR_SIZE)
   1a344:	00 e0       	ldi	r16, 0x00	; 0
   1a346:	11 e0       	ldi	r17, 0x01	; 1
   1a348:	20 e0       	ldi	r18, 0x00	; 0
   1a34a:	30 e0       	ldi	r19, 0x00	; 0
   1a34c:	a9 01       	movw	r20, r18
   1a34e:	be 01       	movw	r22, r28
   1a350:	66 5f       	subi	r22, 0xF6	; 246
   1a352:	7f 4f       	sbci	r23, 0xFF	; 255
   1a354:	c7 01       	movw	r24, r14
   1a356:	0e 94 b2 c1 	call	0x18364	; 0x18364 <lif_read>
   1a35a:	6f 3f       	cpi	r22, 0xFF	; 255
   1a35c:	71 05       	cpc	r23, r1
   1a35e:	81 05       	cpc	r24, r1
   1a360:	91 05       	cpc	r25, r1
   1a362:	09 f0       	breq	.+2      	; 0x1a366 <lif_open_volume+0xf0>
   1a364:	6c f4       	brge	.+26     	; 0x1a380 <lif_open_volume+0x10a>
    {
        if(debuglevel & LIF_DEBUG)
   1a366:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a36a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a36e:	92 ff       	sbrs	r25, 2
   1a370:	26 c0       	rjmp	.+76     	; 0x1a3be <lif_open_volume+0x148>
            printf("lif_open_volume:[%s] error read volume header failed\n", name);
   1a372:	ed b7       	in	r30, 0x3d	; 61
   1a374:	fe b7       	in	r31, 0x3e	; 62
   1a376:	d5 82       	std	Z+5, r13	; 0x05
   1a378:	c4 82       	std	Z+4, r12	; 0x04
   1a37a:	80 e4       	ldi	r24, 0x40	; 64
   1a37c:	9b e3       	ldi	r25, 0x3B	; 59
   1a37e:	19 c0       	rjmp	.+50     	; 0x1a3b2 <lif_open_volume+0x13c>
        lif_closedir(LIF);
        return(NULL);
    }

// Unpack Volumes has the Directory start sector
    lif_str2vol(buffer, LIF);
   1a380:	b7 01       	movw	r22, r14
   1a382:	ce 01       	movw	r24, r28
   1a384:	0a 96       	adiw	r24, 0x0a	; 10
   1a386:	0e 94 d2 c3 	call	0x187a4	; 0x187a4 <lif_str2vol>

// Validate basic Volume headers
    if( !lif_check_volume(LIF) )
   1a38a:	c7 01       	movw	r24, r14
   1a38c:	0e 94 de c7 	call	0x18fbc	; 0x18fbc <lif_check_volume>
   1a390:	89 2b       	or	r24, r25
   1a392:	c1 f4       	brne	.+48     	; 0x1a3c4 <lif_open_volume+0x14e>
    {
        if(debuglevel & LIF_DEBUG)
   1a394:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a398:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a39c:	92 ff       	sbrs	r25, 2
   1a39e:	0f c0       	rjmp	.+30     	; 0x1a3be <lif_open_volume+0x148>
            printf("lif_open_volume:[%s] error volume validate failed\n", LIF->name);
   1a3a0:	f7 01       	movw	r30, r14
   1a3a2:	80 81       	ld	r24, Z
   1a3a4:	91 81       	ldd	r25, Z+1	; 0x01
   1a3a6:	ed b7       	in	r30, 0x3d	; 61
   1a3a8:	fe b7       	in	r31, 0x3e	; 62
   1a3aa:	95 83       	std	Z+5, r25	; 0x05
   1a3ac:	84 83       	std	Z+4, r24	; 0x04
   1a3ae:	8d e0       	ldi	r24, 0x0D	; 13
   1a3b0:	9b e3       	ldi	r25, 0x3B	; 59
   1a3b2:	a0 e0       	ldi	r26, 0x00	; 0
   1a3b4:	81 83       	std	Z+1, r24	; 0x01
   1a3b6:	92 83       	std	Z+2, r25	; 0x02
   1a3b8:	a3 83       	std	Z+3, r26	; 0x03
   1a3ba:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a3be:	c7 01       	movw	r24, r14
   1a3c0:	9d d8       	rcall	.-3782   	; 0x194fc <lif_close_volume>
   1a3c2:	8a cf       	rjmp	.-236    	; 0x1a2d8 <lif_open_volume+0x62>
        lif_closedir(LIF);
        return(NULL);
    }

// Initialize remaining LIF headers
    LIF->filestart = LIF->VOL.DirStartSector + LIF->VOL.DirSectors;
   1a3c4:	f7 01       	movw	r30, r14
   1a3c6:	45 a5       	ldd	r20, Z+45	; 0x2d
   1a3c8:	56 a5       	ldd	r21, Z+46	; 0x2e
   1a3ca:	67 a5       	ldd	r22, Z+47	; 0x2f
   1a3cc:	70 a9       	ldd	r23, Z+48	; 0x30
   1a3ce:	85 a9       	ldd	r24, Z+53	; 0x35
   1a3d0:	96 a9       	ldd	r25, Z+54	; 0x36
   1a3d2:	a7 a9       	ldd	r26, Z+55	; 0x37
   1a3d4:	b0 ad       	ldd	r27, Z+56	; 0x38
   1a3d6:	48 0f       	add	r20, r24
   1a3d8:	59 1f       	adc	r21, r25
   1a3da:	6a 1f       	adc	r22, r26
   1a3dc:	7b 1f       	adc	r23, r27
   1a3de:	44 87       	std	Z+12, r20	; 0x0c
   1a3e0:	55 87       	std	Z+13, r21	; 0x0d
   1a3e2:	66 87       	std	Z+14, r22	; 0x0e
   1a3e4:	77 87       	std	Z+15, r23	; 0x0f
    LIF->filesectors = LIF->sectors - LIF->filestart;
   1a3e6:	84 81       	ldd	r24, Z+4	; 0x04
   1a3e8:	95 81       	ldd	r25, Z+5	; 0x05
   1a3ea:	a6 81       	ldd	r26, Z+6	; 0x06
   1a3ec:	b7 81       	ldd	r27, Z+7	; 0x07
   1a3ee:	84 1b       	sub	r24, r20
   1a3f0:	95 0b       	sbc	r25, r21
   1a3f2:	a6 0b       	sbc	r26, r22
   1a3f4:	b7 0b       	sbc	r27, r23
   1a3f6:	80 8b       	std	Z+16, r24	; 0x10
   1a3f8:	91 8b       	std	Z+17, r25	; 0x11
   1a3fa:	a2 8b       	std	Z+18, r26	; 0x12
   1a3fc:	b3 8b       	std	Z+19, r27	; 0x13
    LIF->freesectors = LIF->filesectors;
   1a3fe:	80 8f       	std	Z+24, r24	; 0x18
   1a400:	91 8f       	std	Z+25, r25	; 0x19
   1a402:	a2 8f       	std	Z+26, r26	; 0x1a
   1a404:	b3 8f       	std	Z+27, r27	; 0x1b
    LIF->usedsectors = 0;
   1a406:	14 8a       	std	Z+20, r1	; 0x14
   1a408:	15 8a       	std	Z+21, r1	; 0x15
   1a40a:	16 8a       	std	Z+22, r1	; 0x16
   1a40c:	17 8a       	std	Z+23, r1	; 0x17
    LIF->purged = 0;
   1a40e:	17 8e       	std	Z+31, r1	; 0x1f
   1a410:	16 8e       	std	Z+30, r1	; 0x1e
    LIF->files = 0;
   1a412:	15 8e       	std	Z+29, r1	; 0x1d
   1a414:	14 8e       	std	Z+28, r1	; 0x1c
    LIF->dirindex = 0;
   1a416:	11 a2       	std	Z+33, r1	; 0x21
   1a418:	10 a2       	std	Z+32, r1	; 0x20
    LIF->EOFindex = 0;
   1a41a:	13 a2       	std	Z+35, r1	; 0x23
   1a41c:	12 a2       	std	Z+34, r1	; 0x22

    if( lif_updatefree(LIF) == NULL)
   1a41e:	c7 01       	movw	r24, r14
   1a420:	d6 d9       	rcall	.-3156   	; 0x197ce <lif_updatefree>
   1a422:	8c 01       	movw	r16, r24
   1a424:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a428:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a42c:	01 15       	cp	r16, r1
   1a42e:	11 05       	cpc	r17, r1
   1a430:	a1 f4       	brne	.+40     	; 0x1a45a <lif_open_volume+0x1e4>
    {
        if(debuglevel & LIF_DEBUG)
   1a432:	92 ff       	sbrs	r25, 2
   1a434:	0f c0       	rjmp	.+30     	; 0x1a454 <lif_open_volume+0x1de>
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
   1a436:	f7 01       	movw	r30, r14
   1a438:	80 81       	ld	r24, Z
   1a43a:	91 81       	ldd	r25, Z+1	; 0x01
   1a43c:	ed b7       	in	r30, 0x3d	; 61
   1a43e:	fe b7       	in	r31, 0x3e	; 62
   1a440:	95 83       	std	Z+5, r25	; 0x05
   1a442:	84 83       	std	Z+4, r24	; 0x04
   1a444:	8a ed       	ldi	r24, 0xDA	; 218
   1a446:	9a e3       	ldi	r25, 0x3A	; 58
   1a448:	a0 e0       	ldi	r26, 0x00	; 0
   1a44a:	81 83       	std	Z+1, r24	; 0x01
   1a44c:	92 83       	std	Z+2, r25	; 0x02
   1a44e:	a3 83       	std	Z+3, r26	; 0x03
   1a450:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a454:	c7 01       	movw	r24, r14
   1a456:	52 d8       	rcall	.-3932   	; 0x194fc <lif_close_volume>
    if( lif_updatefree(LIF) == NULL)
    {
        if(debuglevel & LIF_DEBUG)
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
        lif_closedir(LIF);
        return(NULL);
   1a458:	08 c0       	rjmp	.+16     	; 0x1a46a <lif_open_volume+0x1f4>
    }

    if(debuglevel &LIF_DEBUG)
   1a45a:	92 ff       	sbrs	r25, 2
   1a45c:	05 c0       	rjmp	.+10     	; 0x1a468 <lif_open_volume+0x1f2>
        lif_dump_vol(LIF, "Volume Listing");
   1a45e:	66 e3       	ldi	r22, 0x36	; 54
   1a460:	76 e1       	ldi	r23, 0x16	; 22
   1a462:	c7 01       	movw	r24, r14
   1a464:	0e 94 18 c6 	call	0x18c30	; 0x18c30 <lif_dump_vol>
   1a468:	87 01       	movw	r16, r14
    return( LIF );
}
   1a46a:	c8 01       	movw	r24, r16
   1a46c:	c7 5c       	subi	r28, 0xC7	; 199
   1a46e:	de 4f       	sbci	r29, 0xFE	; 254
   1a470:	ec e0       	ldi	r30, 0x0C	; 12
   1a472:	0c 94 dd e6 	jmp	0x1cdba	; 0x1cdba <__epilogue_restores__+0xc>

0001a476 <lif_dir>:
/// @brief Display a LIF image file directory
/// @param[in] lifimagename: LIF disk image name
/// @return -1 on error or number of files found
MEMSPACE
void lif_dir(char *lifimagename)
{
   1a476:	2f 92       	push	r2
   1a478:	3f 92       	push	r3
   1a47a:	4f 92       	push	r4
   1a47c:	5f 92       	push	r5
   1a47e:	6f 92       	push	r6
   1a480:	8f 92       	push	r8
   1a482:	9f 92       	push	r9
   1a484:	af 92       	push	r10
   1a486:	bf 92       	push	r11
   1a488:	cf 92       	push	r12
   1a48a:	df 92       	push	r13
   1a48c:	ef 92       	push	r14
   1a48e:	0f 93       	push	r16
   1a490:	1f 93       	push	r17
   1a492:	cf 93       	push	r28
   1a494:	df 93       	push	r29
   1a496:	cd b7       	in	r28, 0x3d	; 61
   1a498:	de b7       	in	r29, 0x3e	; 62
   1a49a:	af 97       	sbiw	r28, 0x2f	; 47
   1a49c:	0f b6       	in	r0, 0x3f	; 63
   1a49e:	f8 94       	cli
   1a4a0:	de bf       	out	0x3e, r29	; 62
   1a4a2:	0f be       	out	0x3f, r0	; 63
   1a4a4:	cd bf       	out	0x3d, r28	; 61
    int index = 0;
    char *vol;

    int warn = ' ';

    LIF = lif_open_volume(lifimagename,"rb+");
   1a4a6:	68 e0       	ldi	r22, 0x08	; 8
   1a4a8:	79 e0       	ldi	r23, 0x09	; 9
   1a4aa:	e5 de       	rcall	.-566    	; 0x1a276 <lif_open_volume>
   1a4ac:	9f a7       	std	Y+47, r25	; 0x2f
   1a4ae:	8e a7       	std	Y+46, r24	; 0x2e
    if(LIF == NULL)
   1a4b0:	00 97       	sbiw	r24, 0x00	; 0
   1a4b2:	09 f4       	brne	.+2      	; 0x1a4b6 <lif_dir+0x40>
   1a4b4:	9e c1       	rjmp	.+828    	; 0x1a7f2 <lif_dir+0x37c>
        return;

    vol = (char *)LIF->VOL.Label;
    if(!vol[0])
   1a4b6:	fc 01       	movw	r30, r24
   1a4b8:	86 a1       	ldd	r24, Z+38	; 0x26
   1a4ba:	88 23       	and	r24, r24
   1a4bc:	21 f0       	breq	.+8      	; 0x1a4c6 <lif_dir+0x50>

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return;

    vol = (char *)LIF->VOL.Label;
   1a4be:	8f 01       	movw	r16, r30
   1a4c0:	0a 5d       	subi	r16, 0xDA	; 218
   1a4c2:	1f 4f       	sbci	r17, 0xFF	; 255
   1a4c4:	02 c0       	rjmp	.+4      	; 0x1a4ca <lif_dir+0x54>
    if(!vol[0])
        vol = "<EMPTY>";
   1a4c6:	08 ee       	ldi	r16, 0xE8	; 232
   1a4c8:	15 e1       	ldi	r17, 0x15	; 21

    printf("Volume:[%s] Date:[%s]\n", vol, lif_lifbcd2timestr(LIF->VOL.date));
   1a4ca:	8e a5       	ldd	r24, Y+46	; 0x2e
   1a4cc:	9f a5       	ldd	r25, Y+47	; 0x2f
   1a4ce:	87 5b       	subi	r24, 0xB7	; 183
   1a4d0:	9f 4f       	sbci	r25, 0xFF	; 255
   1a4d2:	0e 94 dc c5 	call	0x18bb8	; 0x18bb8 <lif_lifbcd2timestr>
   1a4d6:	ed b7       	in	r30, 0x3d	; 61
   1a4d8:	fe b7       	in	r31, 0x3e	; 62
   1a4da:	97 83       	std	Z+7, r25	; 0x07
   1a4dc:	86 83       	std	Z+6, r24	; 0x06
   1a4de:	15 83       	std	Z+5, r17	; 0x05
   1a4e0:	04 83       	std	Z+4, r16	; 0x04
   1a4e2:	83 ec       	ldi	r24, 0xC3	; 195
   1a4e4:	9a e3       	ldi	r25, 0x3A	; 58
   1a4e6:	a0 e0       	ldi	r26, 0x00	; 0
   1a4e8:	81 83       	std	Z+1, r24	; 0x01
   1a4ea:	92 83       	std	Z+2, r25	; 0x02
   1a4ec:	a3 83       	std	Z+3, r26	; 0x03
   1a4ee:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>

    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
   1a4f2:	83 e8       	ldi	r24, 0x83	; 131
   1a4f4:	9a e3       	ldi	r25, 0x3A	; 58
   1a4f6:	a0 e0       	ldi	r26, 0x00	; 0
   1a4f8:	ed b7       	in	r30, 0x3d	; 61
   1a4fa:	fe b7       	in	r31, 0x3e	; 62
   1a4fc:	81 83       	std	Z+1, r24	; 0x01
   1a4fe:	92 83       	std	Z+2, r25	; 0x02
   1a500:	a3 83       	std	Z+3, r26	; 0x03
   1a502:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    long bytes;
    lif_t *LIF;
    int index = 0;
    char *vol;

    int warn = ' ';
   1a506:	00 e2       	ldi	r16, 0x20	; 32
   1a508:	10 e0       	ldi	r17, 0x00	; 0
   1a50a:	1f 8b       	std	Y+23, r17	; 0x17
   1a50c:	0e 8b       	std	Y+22, r16	; 0x16
MEMSPACE
void lif_dir(char *lifimagename)
{
    long bytes;
    lif_t *LIF;
    int index = 0;
   1a50e:	21 2c       	mov	r2, r1
   1a510:	31 2c       	mov	r3, r1
    {

        if(!lif_readdirindex(LIF,index))
            break;

        if(LIF->DIR.FileType == 0xffff)
   1a512:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a514:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a516:	06 5a       	subi	r16, 0xA6	; 166
   1a518:	1f 4f       	sbci	r17, 0xFF	; 255
   1a51a:	1d 8f       	std	Y+29, r17	; 0x1d
   1a51c:	0c 8f       	std	Y+28, r16	; 0x1c
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   1a51e:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a520:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a522:	00 5a       	subi	r16, 0xA0	; 160
   1a524:	1f 4f       	sbci	r17, 0xFF	; 255
   1a526:	1d a3       	std	Y+37, r17	; 0x25
   1a528:	0c a3       	std	Y+36, r16	; 0x24

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1a52a:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a52c:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a52e:	04 59       	subi	r16, 0x94	; 148
   1a530:	1f 4f       	sbci	r17, 0xFF	; 255
   1a532:	1f a3       	std	Y+39, r17	; 0x27
   1a534:	0e a3       	std	Y+38, r16	; 0x26
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   1a536:	87 e3       	ldi	r24, 0x37	; 55
   1a538:	9a e3       	ldi	r25, 0x3A	; 58
   1a53a:	6c 01       	movw	r12, r24
   1a53c:	e1 2c       	mov	r14, r1
   1a53e:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a540:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a542:	01 5b       	subi	r16, 0xB1	; 177
   1a544:	1f 4f       	sbci	r17, 0xFF	; 255
   1a546:	1f 8f       	std	Y+31, r17	; 0x1f
   1a548:	0e 8f       	std	Y+30, r16	; 0x1e
                }
            }
        }

// name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n",
   1a54a:	87 e0       	ldi	r24, 0x07	; 7
   1a54c:	9a e3       	ldi	r25, 0x3A	; 58
   1a54e:	2c 01       	movw	r4, r24
   1a550:	61 2c       	mov	r6, r1
   1a552:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a554:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a556:	04 5a       	subi	r16, 0xA4	; 164
   1a558:	1f 4f       	sbci	r17, 0xFF	; 255
   1a55a:	19 a7       	std	Y+41, r17	; 0x29
   1a55c:	08 a7       	std	Y+40, r16	; 0x28
   1a55e:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a560:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a562:	02 59       	subi	r16, 0x92	; 146
   1a564:	1f 4f       	sbci	r17, 0xFF	; 255
   1a566:	1b a7       	std	Y+43, r17	; 0x2b
   1a568:	0a a7       	std	Y+42, r16	; 0x2a
   1a56a:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a56c:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a56e:	0c 59       	subi	r16, 0x9C	; 156
   1a570:	1f 4f       	sbci	r17, 0xFF	; 255
   1a572:	1d a7       	std	Y+45, r17	; 0x2d
   1a574:	0c a7       	std	Y+44, r16	; 0x2c

    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
    while(1)
    {

        if(!lif_readdirindex(LIF,index))
   1a576:	b1 01       	movw	r22, r2
   1a578:	8e a5       	ldd	r24, Y+46	; 0x2e
   1a57a:	9f a5       	ldd	r25, Y+47	; 0x2f
   1a57c:	4d d8       	rcall	.-3942   	; 0x19618 <lif_readdirindex>
   1a57e:	89 2b       	or	r24, r25
   1a580:	09 f4       	brne	.+2      	; 0x1a584 <lif_dir+0x10e>
   1a582:	ad c0       	rjmp	.+346    	; 0x1a6de <lif_dir+0x268>
            break;

        if(LIF->DIR.FileType == 0xffff)
   1a584:	ac 8d       	ldd	r26, Y+28	; 0x1c
   1a586:	bd 8d       	ldd	r27, Y+29	; 0x1d
   1a588:	8d 91       	ld	r24, X+
   1a58a:	9c 91       	ld	r25, X
   1a58c:	8f 3f       	cpi	r24, 0xFF	; 255
   1a58e:	bf ef       	ldi	r27, 0xFF	; 255
   1a590:	9b 07       	cpc	r25, r27
   1a592:	09 f4       	brne	.+2      	; 0x1a596 <lif_dir+0x120>
   1a594:	a4 c0       	rjmp	.+328    	; 0x1a6de <lif_dir+0x268>
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   1a596:	ec a1       	ldd	r30, Y+36	; 0x24
   1a598:	fd a1       	ldd	r31, Y+37	; 0x25
   1a59a:	40 81       	ld	r20, Z
   1a59c:	51 81       	ldd	r21, Z+1	; 0x01
   1a59e:	62 81       	ldd	r22, Z+2	; 0x02
   1a5a0:	73 81       	ldd	r23, Z+3	; 0x03
   1a5a2:	00 27       	eor	r16, r16
   1a5a4:	14 2f       	mov	r17, r20
   1a5a6:	25 2f       	mov	r18, r21
   1a5a8:	36 2f       	mov	r19, r22
   1a5aa:	08 8f       	std	Y+24, r16	; 0x18
   1a5ac:	19 8f       	std	Y+25, r17	; 0x19
   1a5ae:	2a 8f       	std	Y+26, r18	; 0x1a
   1a5b0:	3b 8f       	std	Y+27, r19	; 0x1b

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
   1a5b2:	8c 7f       	andi	r24, 0xFC	; 252
   1a5b4:	80 31       	cpi	r24, 0x10	; 16
   1a5b6:	90 4e       	sbci	r25, 0xE0	; 224
   1a5b8:	09 f0       	breq	.+2      	; 0x1a5bc <lif_dir+0x146>
   1a5ba:	4b c0       	rjmp	.+150    	; 0x1a652 <lif_dir+0x1dc>
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1a5bc:	ae a1       	ldd	r26, Y+38	; 0x26
   1a5be:	bf a1       	ldd	r27, Y+39	; 0x27
   1a5c0:	8d 91       	ld	r24, X+
   1a5c2:	9c 91       	ld	r25, X
   1a5c4:	00 97       	sbiw	r24, 0x00	; 0
   1a5c6:	b9 f0       	breq	.+46     	; 0x1a5f6 <lif_dir+0x180>
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a5c8:	4c 01       	movw	r8, r24
   1a5ca:	a1 2c       	mov	r10, r1
   1a5cc:	b1 2c       	mov	r11, r1
   1a5ce:	33 27       	eor	r19, r19
   1a5d0:	2b 2d       	mov	r18, r11
   1a5d2:	1a 2d       	mov	r17, r10
   1a5d4:	09 2d       	mov	r16, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a5d6:	88 23       	and	r24, r24
   1a5d8:	21 f0       	breq	.+8      	; 0x1a5e2 <lif_dir+0x16c>
        ++sectors;
   1a5da:	0f 5f       	subi	r16, 0xFF	; 255
   1a5dc:	1f 4f       	sbci	r17, 0xFF	; 255
   1a5de:	2f 4f       	sbci	r18, 0xFF	; 255
   1a5e0:	3f 4f       	sbci	r19, 0xFF	; 255

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1a5e2:	40 17       	cp	r20, r16
   1a5e4:	51 07       	cpc	r21, r17
   1a5e6:	62 07       	cpc	r22, r18
   1a5e8:	73 07       	cpc	r23, r19
   1a5ea:	29 f4       	brne	.+10     	; 0x1a5f6 <lif_dir+0x180>
            {
                bytes = LIF->DIR.FileBytes;
   1a5ec:	88 8e       	std	Y+24, r8	; 0x18
   1a5ee:	99 8e       	std	Y+25, r9	; 0x19
   1a5f0:	aa 8e       	std	Y+26, r10	; 0x1a
   1a5f2:	bb 8e       	std	Y+27, r11	; 0x1b
   1a5f4:	2e c0       	rjmp	.+92     	; 0x1a652 <lif_dir+0x1dc>
            }
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
   1a5f6:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1a5fa:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a5fe:	32 ff       	sbrs	r19, 2
   1a600:	24 c0       	rjmp	.+72     	; 0x1a64a <lif_dir+0x1d4>
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   1a602:	4c 01       	movw	r8, r24
   1a604:	a1 2c       	mov	r10, r1
   1a606:	b1 2c       	mov	r11, r1
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a608:	33 27       	eor	r19, r19
   1a60a:	2b 2d       	mov	r18, r11
   1a60c:	1a 2d       	mov	r17, r10
   1a60e:	09 2d       	mov	r16, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a610:	88 23       	and	r24, r24
   1a612:	21 f0       	breq	.+8      	; 0x1a61c <lif_dir+0x1a6>
        ++sectors;
   1a614:	0f 5f       	subi	r16, 0xFF	; 255
   1a616:	1f 4f       	sbci	r17, 0xFF	; 255
   1a618:	2f 4f       	sbci	r18, 0xFF	; 255
   1a61a:	3f 4f       	sbci	r19, 0xFF	; 255
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   1a61c:	ed b7       	in	r30, 0x3d	; 61
   1a61e:	fe b7       	in	r31, 0x3e	; 62
   1a620:	46 87       	std	Z+14, r20	; 0x0e
   1a622:	57 87       	std	Z+15, r21	; 0x0f
   1a624:	60 8b       	std	Z+16, r22	; 0x10
   1a626:	71 8b       	std	Z+17, r23	; 0x11
   1a628:	02 87       	std	Z+10, r16	; 0x0a
   1a62a:	13 87       	std	Z+11, r17	; 0x0b
   1a62c:	24 87       	std	Z+12, r18	; 0x0c
   1a62e:	35 87       	std	Z+13, r19	; 0x0d
   1a630:	86 82       	std	Z+6, r8	; 0x06
   1a632:	97 82       	std	Z+7, r9	; 0x07
   1a634:	a0 86       	std	Z+8, r10	; 0x08
   1a636:	b1 86       	std	Z+9, r11	; 0x09
   1a638:	0e 8d       	ldd	r16, Y+30	; 0x1e
   1a63a:	1f 8d       	ldd	r17, Y+31	; 0x1f
   1a63c:	15 83       	std	Z+5, r17	; 0x05
   1a63e:	04 83       	std	Z+4, r16	; 0x04
   1a640:	c1 82       	std	Z+1, r12	; 0x01
   1a642:	d2 82       	std	Z+2, r13	; 0x02
   1a644:	e3 82       	std	Z+3, r14	; 0x03
   1a646:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
            {
                bytes = LIF->DIR.FileBytes;
            }
            else
            {
                warn = '!';
   1a64a:	01 e2       	ldi	r16, 0x21	; 33
   1a64c:	10 e0       	ldi	r17, 0x00	; 0
   1a64e:	1f 8b       	std	Y+23, r17	; 0x17
   1a650:	0e 8b       	std	Y+22, r16	; 0x16
                }
            }
        }

// name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n",
   1a652:	ac 8d       	ldd	r26, Y+28	; 0x1c
   1a654:	bd 8d       	ldd	r27, Y+29	; 0x1d
   1a656:	8d 90       	ld	r8, X+
   1a658:	9c 90       	ld	r9, X
   1a65a:	81 14       	cp	r8, r1
   1a65c:	91 04       	cpc	r9, r1
   1a65e:	19 f0       	breq	.+6      	; 0x1a666 <lif_dir+0x1f0>
   1a660:	0e 8d       	ldd	r16, Y+30	; 0x1e
   1a662:	1f 8d       	ldd	r17, Y+31	; 0x1f
   1a664:	02 c0       	rjmp	.+4      	; 0x1a66a <lif_dir+0x1f4>
   1a666:	05 e4       	ldi	r16, 0x45	; 69
   1a668:	16 e1       	ldi	r17, 0x16	; 22
   1a66a:	a8 a5       	ldd	r26, Y+40	; 0x28
   1a66c:	b9 a5       	ldd	r27, Y+41	; 0x29
   1a66e:	8d 91       	ld	r24, X+
   1a670:	9d 91       	ld	r25, X+
   1a672:	0d 90       	ld	r0, X+
   1a674:	bc 91       	ld	r27, X
   1a676:	a0 2d       	mov	r26, r0
   1a678:	88 a3       	std	Y+32, r24	; 0x20
   1a67a:	99 a3       	std	Y+33, r25	; 0x21
   1a67c:	aa a3       	std	Y+34, r26	; 0x22
   1a67e:	bb a3       	std	Y+35, r27	; 0x23
   1a680:	ea a5       	ldd	r30, Y+42	; 0x2a
   1a682:	fb a5       	ldd	r31, Y+43	; 0x2b
   1a684:	a0 80       	ld	r10, Z
   1a686:	b1 80       	ldd	r11, Z+1	; 0x01
   1a688:	8c a5       	ldd	r24, Y+44	; 0x2c
   1a68a:	9d a5       	ldd	r25, Y+45	; 0x2d
   1a68c:	0e 94 dc c5 	call	0x18bb8	; 0x18bb8 <lif_lifbcd2timestr>
   1a690:	ed b7       	in	r30, 0x3d	; 61
   1a692:	fe b7       	in	r31, 0x3e	; 62
   1a694:	95 8b       	std	Z+21, r25	; 0x15
   1a696:	84 8b       	std	Z+20, r24	; 0x14
   1a698:	b3 8a       	std	Z+19, r11	; 0x13
   1a69a:	a2 8a       	std	Z+18, r10	; 0x12
   1a69c:	2e 89       	ldd	r18, Y+22	; 0x16
   1a69e:	3f 89       	ldd	r19, Y+23	; 0x17
   1a6a0:	31 8b       	std	Z+17, r19	; 0x11
   1a6a2:	20 8b       	std	Z+16, r18	; 0x10
   1a6a4:	88 8d       	ldd	r24, Y+24	; 0x18
   1a6a6:	99 8d       	ldd	r25, Y+25	; 0x19
   1a6a8:	aa 8d       	ldd	r26, Y+26	; 0x1a
   1a6aa:	bb 8d       	ldd	r27, Y+27	; 0x1b
   1a6ac:	84 87       	std	Z+12, r24	; 0x0c
   1a6ae:	95 87       	std	Z+13, r25	; 0x0d
   1a6b0:	a6 87       	std	Z+14, r26	; 0x0e
   1a6b2:	b7 87       	std	Z+15, r27	; 0x0f
   1a6b4:	88 a1       	ldd	r24, Y+32	; 0x20
   1a6b6:	99 a1       	ldd	r25, Y+33	; 0x21
   1a6b8:	aa a1       	ldd	r26, Y+34	; 0x22
   1a6ba:	bb a1       	ldd	r27, Y+35	; 0x23
   1a6bc:	80 87       	std	Z+8, r24	; 0x08
   1a6be:	91 87       	std	Z+9, r25	; 0x09
   1a6c0:	a2 87       	std	Z+10, r26	; 0x0a
   1a6c2:	b3 87       	std	Z+11, r27	; 0x0b
   1a6c4:	97 82       	std	Z+7, r9	; 0x07
   1a6c6:	86 82       	std	Z+6, r8	; 0x06
   1a6c8:	15 83       	std	Z+5, r17	; 0x05
   1a6ca:	04 83       	std	Z+4, r16	; 0x04
   1a6cc:	41 82       	std	Z+1, r4	; 0x01
   1a6ce:	52 82       	std	Z+2, r5	; 0x02
   1a6d0:	63 82       	std	Z+3, r6	; 0x03
   1a6d2:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
            (long)bytes,
            warn,
            (int)LIF->DIR.SectorSize,
            lif_lifbcd2timestr(LIF->DIR.date));

        ++index;
   1a6d6:	ff ef       	ldi	r31, 0xFF	; 255
   1a6d8:	2f 1a       	sub	r2, r31
   1a6da:	3f 0a       	sbc	r3, r31
    }
   1a6dc:	4c cf       	rjmp	.-360    	; 0x1a576 <lif_dir+0x100>

    printf("\n");
   1a6de:	85 e0       	ldi	r24, 0x05	; 5
   1a6e0:	9a e3       	ldi	r25, 0x3A	; 58
   1a6e2:	a0 e0       	ldi	r26, 0x00	; 0
   1a6e4:	ed b7       	in	r30, 0x3d	; 61
   1a6e6:	fe b7       	in	r31, 0x3e	; 62
   1a6e8:	81 83       	std	Z+1, r24	; 0x01
   1a6ea:	92 83       	std	Z+2, r25	; 0x02
   1a6ec:	a3 83       	std	Z+3, r26	; 0x03
   1a6ee:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    printf("%8ld Files\n", (long)LIF->files);
   1a6f2:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a6f4:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a6f6:	84 8d       	ldd	r24, Z+28	; 0x1c
   1a6f8:	95 8d       	ldd	r25, Z+29	; 0x1d
   1a6fa:	09 2e       	mov	r0, r25
   1a6fc:	00 0c       	add	r0, r0
   1a6fe:	aa 0b       	sbc	r26, r26
   1a700:	bb 0b       	sbc	r27, r27
   1a702:	ed b7       	in	r30, 0x3d	; 61
   1a704:	fe b7       	in	r31, 0x3e	; 62
   1a706:	84 83       	std	Z+4, r24	; 0x04
   1a708:	95 83       	std	Z+5, r25	; 0x05
   1a70a:	a6 83       	std	Z+6, r26	; 0x06
   1a70c:	b7 83       	std	Z+7, r27	; 0x07
   1a70e:	89 ef       	ldi	r24, 0xF9	; 249
   1a710:	99 e3       	ldi	r25, 0x39	; 57
   1a712:	a0 e0       	ldi	r26, 0x00	; 0
   1a714:	81 83       	std	Z+1, r24	; 0x01
   1a716:	92 83       	std	Z+2, r25	; 0x02
   1a718:	a3 83       	std	Z+3, r26	; 0x03
   1a71a:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    printf("%8ld Purged\n", (long)LIF->purged);
   1a71e:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a720:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a722:	86 8d       	ldd	r24, Z+30	; 0x1e
   1a724:	97 8d       	ldd	r25, Z+31	; 0x1f
   1a726:	09 2e       	mov	r0, r25
   1a728:	00 0c       	add	r0, r0
   1a72a:	aa 0b       	sbc	r26, r26
   1a72c:	bb 0b       	sbc	r27, r27
   1a72e:	ed b7       	in	r30, 0x3d	; 61
   1a730:	fe b7       	in	r31, 0x3e	; 62
   1a732:	84 83       	std	Z+4, r24	; 0x04
   1a734:	95 83       	std	Z+5, r25	; 0x05
   1a736:	a6 83       	std	Z+6, r26	; 0x06
   1a738:	b7 83       	std	Z+7, r27	; 0x07
   1a73a:	8c ee       	ldi	r24, 0xEC	; 236
   1a73c:	99 e3       	ldi	r25, 0x39	; 57
   1a73e:	a0 e0       	ldi	r26, 0x00	; 0
   1a740:	81 83       	std	Z+1, r24	; 0x01
   1a742:	92 83       	std	Z+2, r25	; 0x02
   1a744:	a3 83       	std	Z+3, r26	; 0x03
   1a746:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    printf("%8ld Dir  start\n",   (long)LIF->VOL.DirStartSector);
   1a74a:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a74c:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a74e:	85 a5       	ldd	r24, Z+45	; 0x2d
   1a750:	96 a5       	ldd	r25, Z+46	; 0x2e
   1a752:	a7 a5       	ldd	r26, Z+47	; 0x2f
   1a754:	b0 a9       	ldd	r27, Z+48	; 0x30
   1a756:	ed b7       	in	r30, 0x3d	; 61
   1a758:	fe b7       	in	r31, 0x3e	; 62
   1a75a:	84 83       	std	Z+4, r24	; 0x04
   1a75c:	95 83       	std	Z+5, r25	; 0x05
   1a75e:	a6 83       	std	Z+6, r26	; 0x06
   1a760:	b7 83       	std	Z+7, r27	; 0x07
   1a762:	8b ed       	ldi	r24, 0xDB	; 219
   1a764:	99 e3       	ldi	r25, 0x39	; 57
   1a766:	a0 e0       	ldi	r26, 0x00	; 0
   1a768:	81 83       	std	Z+1, r24	; 0x01
   1a76a:	92 83       	std	Z+2, r25	; 0x02
   1a76c:	a3 83       	std	Z+3, r26	; 0x03
   1a76e:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    printf("%8ld Dir  sectors\n", (long)LIF->VOL.DirSectors);
   1a772:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a774:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a776:	85 a9       	ldd	r24, Z+53	; 0x35
   1a778:	96 a9       	ldd	r25, Z+54	; 0x36
   1a77a:	a7 a9       	ldd	r26, Z+55	; 0x37
   1a77c:	b0 ad       	ldd	r27, Z+56	; 0x38
   1a77e:	ed b7       	in	r30, 0x3d	; 61
   1a780:	fe b7       	in	r31, 0x3e	; 62
   1a782:	84 83       	std	Z+4, r24	; 0x04
   1a784:	95 83       	std	Z+5, r25	; 0x05
   1a786:	a6 83       	std	Z+6, r26	; 0x06
   1a788:	b7 83       	std	Z+7, r27	; 0x07
   1a78a:	88 ec       	ldi	r24, 0xC8	; 200
   1a78c:	99 e3       	ldi	r25, 0x39	; 57
   1a78e:	a0 e0       	ldi	r26, 0x00	; 0
   1a790:	81 83       	std	Z+1, r24	; 0x01
   1a792:	92 83       	std	Z+2, r25	; 0x02
   1a794:	a3 83       	std	Z+3, r26	; 0x03
   1a796:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
   1a79a:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a79c:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a79e:	84 89       	ldd	r24, Z+20	; 0x14
   1a7a0:	95 89       	ldd	r25, Z+21	; 0x15
   1a7a2:	a6 89       	ldd	r26, Z+22	; 0x16
   1a7a4:	b7 89       	ldd	r27, Z+23	; 0x17
   1a7a6:	ed b7       	in	r30, 0x3d	; 61
   1a7a8:	fe b7       	in	r31, 0x3e	; 62
   1a7aa:	84 83       	std	Z+4, r24	; 0x04
   1a7ac:	95 83       	std	Z+5, r25	; 0x05
   1a7ae:	a6 83       	std	Z+6, r26	; 0x06
   1a7b0:	b7 83       	std	Z+7, r27	; 0x07
   1a7b2:	85 eb       	ldi	r24, 0xB5	; 181
   1a7b4:	99 e3       	ldi	r25, 0x39	; 57
   1a7b6:	a0 e0       	ldi	r26, 0x00	; 0
   1a7b8:	81 83       	std	Z+1, r24	; 0x01
   1a7ba:	92 83       	std	Z+2, r25	; 0x02
   1a7bc:	a3 83       	std	Z+3, r26	; 0x03
   1a7be:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    printf("%8ld Free sectors\n", (long)LIF->freesectors);
   1a7c2:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a7c4:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a7c6:	80 8d       	ldd	r24, Z+24	; 0x18
   1a7c8:	91 8d       	ldd	r25, Z+25	; 0x19
   1a7ca:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a7cc:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a7ce:	ed b7       	in	r30, 0x3d	; 61
   1a7d0:	fe b7       	in	r31, 0x3e	; 62
   1a7d2:	84 83       	std	Z+4, r24	; 0x04
   1a7d4:	95 83       	std	Z+5, r25	; 0x05
   1a7d6:	a6 83       	std	Z+6, r26	; 0x06
   1a7d8:	b7 83       	std	Z+7, r27	; 0x07
   1a7da:	82 ea       	ldi	r24, 0xA2	; 162
   1a7dc:	99 e3       	ldi	r25, 0x39	; 57
   1a7de:	a0 e0       	ldi	r26, 0x00	; 0
   1a7e0:	81 83       	std	Z+1, r24	; 0x01
   1a7e2:	92 83       	std	Z+2, r25	; 0x02
   1a7e4:	a3 83       	std	Z+3, r26	; 0x03
   1a7e6:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a7ea:	8e a5       	ldd	r24, Y+46	; 0x2e
   1a7ec:	9f a5       	ldd	r25, Y+47	; 0x2f
   1a7ee:	0e 94 7e ca 	call	0x194fc	; 0x194fc <lif_close_volume>
    printf("%8ld Dir  sectors\n", (long)LIF->VOL.DirSectors);
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
    printf("%8ld Free sectors\n", (long)LIF->freesectors);

    lif_closedir(LIF);
}
   1a7f2:	af 96       	adiw	r28, 0x2f	; 47
   1a7f4:	0f b6       	in	r0, 0x3f	; 63
   1a7f6:	f8 94       	cli
   1a7f8:	de bf       	out	0x3e, r29	; 62
   1a7fa:	0f be       	out	0x3f, r0	; 63
   1a7fc:	cd bf       	out	0x3d, r28	; 61
   1a7fe:	df 91       	pop	r29
   1a800:	cf 91       	pop	r28
   1a802:	1f 91       	pop	r17
   1a804:	0f 91       	pop	r16
   1a806:	ef 90       	pop	r14
   1a808:	df 90       	pop	r13
   1a80a:	cf 90       	pop	r12
   1a80c:	bf 90       	pop	r11
   1a80e:	af 90       	pop	r10
   1a810:	9f 90       	pop	r9
   1a812:	8f 90       	pop	r8
   1a814:	6f 90       	pop	r6
   1a816:	5f 90       	pop	r5
   1a818:	4f 90       	pop	r4
   1a81a:	3f 90       	pop	r3
   1a81c:	2f 90       	pop	r2
   1a81e:	08 95       	ret

0001a820 <lif_find_file>:
/// @param[in] *LIF: directory pointer
/// @param[in] liflabel: File name in LIF image
/// @return Directory index of record
MEMSPACE
int lif_find_file(lif_t *LIF, char *liflabel)
{
   1a820:	a5 e0       	ldi	r26, 0x05	; 5
   1a822:	b0 e0       	ldi	r27, 0x00	; 0
   1a824:	e6 e1       	ldi	r30, 0x16	; 22
   1a826:	f4 ed       	ldi	r31, 0xD4	; 212
   1a828:	0c 94 c3 e6 	jmp	0x1cd86	; 0x1cd86 <__prologue_saves__+0x10>
   1a82c:	7c 01       	movw	r14, r24
   1a82e:	eb 01       	movw	r28, r22
    int index;

    if( !lif_checkname(liflabel) )
   1a830:	cb 01       	movw	r24, r22
   1a832:	0e 94 cd c2 	call	0x1859a	; 0x1859a <lif_checkname>
   1a836:	89 2b       	or	r24, r25
   1a838:	69 f4       	brne	.+26     	; 0x1a854 <lif_find_file+0x34>
    {
        if(debuglevel & LIF_DEBUG)
   1a83a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a83e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a842:	92 ff       	sbrs	r25, 2
   1a844:	48 c0       	rjmp	.+144    	; 0x1a8d6 <lif_find_file+0xb6>
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
   1a846:	ed b7       	in	r30, 0x3d	; 61
   1a848:	fe b7       	in	r31, 0x3e	; 62
   1a84a:	d5 83       	std	Z+5, r29	; 0x05
   1a84c:	c4 83       	std	Z+4, r28	; 0x04
   1a84e:	8b e7       	ldi	r24, 0x7B	; 123
   1a850:	99 e3       	ldi	r25, 0x39	; 57
   1a852:	15 c0       	rjmp	.+42     	; 0x1a87e <lif_find_file+0x5e>
        return(-1);
    }
    if(strlen(liflabel) > 10)
   1a854:	fe 01       	movw	r30, r28
   1a856:	01 90       	ld	r0, Z+
   1a858:	00 20       	and	r0, r0
   1a85a:	e9 f7       	brne	.-6      	; 0x1a856 <lif_find_file+0x36>
   1a85c:	31 97       	sbiw	r30, 0x01	; 1
   1a85e:	ec 1b       	sub	r30, r28
   1a860:	fd 0b       	sbc	r31, r29
   1a862:	3b 97       	sbiw	r30, 0x0b	; 11
   1a864:	98 f0       	brcs	.+38     	; 0x1a88c <lif_find_file+0x6c>
    {
        if(debuglevel & LIF_DEBUG)
   1a866:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a86a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a86e:	92 ff       	sbrs	r25, 2
   1a870:	32 c0       	rjmp	.+100    	; 0x1a8d6 <lif_find_file+0xb6>
            printf("lif_find_file:[%s] liflabel too big\n", liflabel);
   1a872:	ed b7       	in	r30, 0x3d	; 61
   1a874:	fe b7       	in	r31, 0x3e	; 62
   1a876:	d5 83       	std	Z+5, r29	; 0x05
   1a878:	c4 83       	std	Z+4, r28	; 0x04
   1a87a:	86 e5       	ldi	r24, 0x56	; 86
   1a87c:	99 e3       	ldi	r25, 0x39	; 57
   1a87e:	a0 e0       	ldi	r26, 0x00	; 0
   1a880:	81 83       	std	Z+1, r24	; 0x01
   1a882:	92 83       	std	Z+2, r25	; 0x02
   1a884:	a3 83       	std	Z+3, r26	; 0x03
   1a886:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   1a88a:	25 c0       	rjmp	.+74     	; 0x1a8d6 <lif_find_file+0xb6>
        return(-1);
    }

    if(LIF == NULL)
   1a88c:	e1 14       	cp	r14, r1
   1a88e:	f1 04       	cpc	r15, r1
   1a890:	11 f1       	breq	.+68     	; 0x1a8d6 <lif_find_file+0xb6>
   1a892:	00 e0       	ldi	r16, 0x00	; 0
   1a894:	10 e0       	ldi	r17, 0x00	; 0
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1a896:	67 01       	movw	r12, r14
   1a898:	fa e5       	ldi	r31, 0x5A	; 90
   1a89a:	cf 0e       	add	r12, r31
   1a89c:	d1 1c       	adc	r13, r1
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a89e:	57 01       	movw	r10, r14
   1a8a0:	2f e4       	ldi	r18, 0x4F	; 79
   1a8a2:	a2 0e       	add	r10, r18
   1a8a4:	b1 1c       	adc	r11, r1
        return(-1);

    index = 0;
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
   1a8a6:	b8 01       	movw	r22, r16
   1a8a8:	c7 01       	movw	r24, r14
   1a8aa:	0e 94 0c cb 	call	0x19618	; 0x19618 <lif_readdirindex>
   1a8ae:	89 2b       	or	r24, r25
   1a8b0:	91 f0       	breq	.+36     	; 0x1a8d6 <lif_find_file+0xb6>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1a8b2:	f6 01       	movw	r30, r12
   1a8b4:	80 81       	ld	r24, Z
   1a8b6:	91 81       	ldd	r25, Z+1	; 0x01
   1a8b8:	8f 3f       	cpi	r24, 0xFF	; 255
   1a8ba:	ff ef       	ldi	r31, 0xFF	; 255
   1a8bc:	9f 07       	cpc	r25, r31
   1a8be:	59 f0       	breq	.+22     	; 0x1a8d6 <lif_find_file+0xb6>
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a8c0:	89 2b       	or	r24, r25
   1a8c2:	31 f0       	breq	.+12     	; 0x1a8d0 <lif_find_file+0xb0>
   1a8c4:	be 01       	movw	r22, r28
   1a8c6:	c5 01       	movw	r24, r10
   1a8c8:	0e 94 93 31 	call	0x6326	; 0x6326 <strcasecmp>
   1a8cc:	89 2b       	or	r24, r25
   1a8ce:	31 f0       	breq	.+12     	; 0x1a8dc <lif_find_file+0xbc>
            break;
        ++index;
   1a8d0:	0f 5f       	subi	r16, 0xFF	; 255
   1a8d2:	1f 4f       	sbci	r17, 0xFF	; 255
   1a8d4:	e8 cf       	rjmp	.-48     	; 0x1a8a6 <lif_find_file+0x86>

    if( !lif_checkname(liflabel) )
    {
        if(debuglevel & LIF_DEBUG)
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
        return(-1);
   1a8d6:	8f ef       	ldi	r24, 0xFF	; 255
   1a8d8:	9f ef       	ldi	r25, 0xFF	; 255
   1a8da:	01 c0       	rjmp	.+2      	; 0x1a8de <lif_find_file+0xbe>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a8dc:	c8 01       	movw	r24, r16
            break;
        ++index;
    }
    return(index);
}
   1a8de:	cd b7       	in	r28, 0x3d	; 61
   1a8e0:	de b7       	in	r29, 0x3e	; 62
   1a8e2:	25 96       	adiw	r28, 0x05	; 5
   1a8e4:	ea e0       	ldi	r30, 0x0A	; 10
   1a8e6:	0c 94 df e6 	jmp	0x1cdbe	; 0x1cdbe <__epilogue_restores__+0x10>

0001a8ea <lif_e010_pad_sector>:
/// @param[in] offset: sector offset
/// @param[in] wbuf: E010 PAD data
/// @return size of E010 PAD data
MEMSPACE
int lif_e010_pad_sector(long offset, uint8_t *wbuf)
{
   1a8ea:	a5 e0       	ldi	r26, 0x05	; 5
   1a8ec:	b0 e0       	ldi	r27, 0x00	; 0
   1a8ee:	eb e7       	ldi	r30, 0x7B	; 123
   1a8f0:	f4 ed       	ldi	r31, 0xD4	; 212
   1a8f2:	0c 94 c5 e6 	jmp	0x1cd8a	; 0x1cd8a <__prologue_saves__+0x14>
   1a8f6:	6b 01       	movw	r12, r22
   1a8f8:	7c 01       	movw	r14, r24
   1a8fa:	8a 01       	movw	r16, r20
    int ind;
    int pos,rem;

// Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
   1a8fc:	20 e0       	ldi	r18, 0x00	; 0
   1a8fe:	31 e0       	ldi	r19, 0x01	; 1
   1a900:	40 e0       	ldi	r20, 0x00	; 0
   1a902:	50 e0       	ldi	r21, 0x00	; 0
   1a904:	0e 94 70 e6 	call	0x1cce0	; 0x1cce0 <__divmodsi4>
    if(!pos)
   1a908:	61 15       	cp	r22, r1
   1a90a:	71 05       	cpc	r23, r1
   1a90c:	e1 f1       	breq	.+120    	; 0x1a986 <lif_e010_pad_sector+0x9c>
        return(0);

// Number of bytes free in this sector
    rem = (long)LIF_SECTOR_SIZE - (long)pos;
   1a90e:	c0 e0       	ldi	r28, 0x00	; 0
   1a910:	d1 e0       	ldi	r29, 0x01	; 1
   1a912:	c6 1b       	sub	r28, r22
   1a914:	d7 0b       	sbc	r29, r23

// Bytes written to wbuf
    ind = 0;
// PAD
    wbuf[ind++] = 0xEF;
   1a916:	f8 01       	movw	r30, r16
   1a918:	8f ee       	ldi	r24, 0xEF	; 239
   1a91a:	81 93       	st	Z+, r24
    while(ind<rem)
        wbuf[ind++] = 0xff;
   1a91c:	2f ef       	ldi	r18, 0xFF	; 255

// Bytes written to wbuf
    ind = 0;
// PAD
    wbuf[ind++] = 0xEF;
    while(ind<rem)
   1a91e:	cf 01       	movw	r24, r30
   1a920:	80 1b       	sub	r24, r16
   1a922:	91 0b       	sbc	r25, r17
   1a924:	8c 17       	cp	r24, r28
   1a926:	9d 07       	cpc	r25, r29
   1a928:	14 f4       	brge	.+4      	; 0x1a92e <lif_e010_pad_sector+0x44>
        wbuf[ind++] = 0xff;
   1a92a:	21 93       	st	Z+, r18
   1a92c:	f8 cf       	rjmp	.-16     	; 0x1a91e <lif_e010_pad_sector+0x34>
   1a92e:	1c 16       	cp	r1, r28
   1a930:	1d 06       	cpc	r1, r29
   1a932:	14 f0       	brlt	.+4      	; 0x1a938 <lif_e010_pad_sector+0x4e>
   1a934:	c1 e0       	ldi	r28, 0x01	; 1
   1a936:	d0 e0       	ldi	r29, 0x00	; 0

    pos = (offset + (long) ind)  % (long) LIF_SECTOR_SIZE;
   1a938:	ce 01       	movw	r24, r28
   1a93a:	0d 2e       	mov	r0, r29
   1a93c:	00 0c       	add	r0, r0
   1a93e:	aa 0b       	sbc	r26, r26
   1a940:	bb 0b       	sbc	r27, r27
   1a942:	bc 01       	movw	r22, r24
   1a944:	cd 01       	movw	r24, r26
   1a946:	6c 0d       	add	r22, r12
   1a948:	7d 1d       	adc	r23, r13
   1a94a:	8e 1d       	adc	r24, r14
   1a94c:	9f 1d       	adc	r25, r15
   1a94e:	20 e0       	ldi	r18, 0x00	; 0
   1a950:	31 e0       	ldi	r19, 0x01	; 1
   1a952:	40 e0       	ldi	r20, 0x00	; 0
   1a954:	50 e0       	ldi	r21, 0x00	; 0
   1a956:	0e 94 70 e6 	call	0x1cce0	; 0x1cce0 <__divmodsi4>
// NEW SECTOR
// Debugging make sure we are at sector boundry
    if(pos)
   1a95a:	61 15       	cp	r22, r1
   1a95c:	71 05       	cpc	r23, r1
   1a95e:	b1 f0       	breq	.+44     	; 0x1a98c <lif_e010_pad_sector+0xa2>
    {
        if(debuglevel & LIF_DEBUG)
   1a960:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1a964:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a968:	32 ff       	sbrs	r19, 2
   1a96a:	12 c0       	rjmp	.+36     	; 0x1a990 <lif_e010_pad_sector+0xa6>
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
   1a96c:	ed b7       	in	r30, 0x3d	; 61
   1a96e:	fe b7       	in	r31, 0x3e	; 62
   1a970:	75 83       	std	Z+5, r23	; 0x05
   1a972:	64 83       	std	Z+4, r22	; 0x04
   1a974:	8d e1       	ldi	r24, 0x1D	; 29
   1a976:	99 e3       	ldi	r25, 0x39	; 57
   1a978:	a0 e0       	ldi	r26, 0x00	; 0
   1a97a:	81 83       	std	Z+1, r24	; 0x01
   1a97c:	92 83       	std	Z+2, r25	; 0x02
   1a97e:	a3 83       	std	Z+3, r26	; 0x03
   1a980:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   1a984:	05 c0       	rjmp	.+10     	; 0x1a990 <lif_e010_pad_sector+0xa6>
    int pos,rem;

// Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
    if(!pos)
        return(0);
   1a986:	80 e0       	ldi	r24, 0x00	; 0
   1a988:	90 e0       	ldi	r25, 0x00	; 0
   1a98a:	04 c0       	rjmp	.+8      	; 0x1a994 <lif_e010_pad_sector+0xaa>
   1a98c:	ce 01       	movw	r24, r28
   1a98e:	02 c0       	rjmp	.+4      	; 0x1a994 <lif_e010_pad_sector+0xaa>
// Debugging make sure we are at sector boundry
    if(pos)
    {
        if(debuglevel & LIF_DEBUG)
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
        return(-1);
   1a990:	8f ef       	ldi	r24, 0xFF	; 255
   1a992:	9f ef       	ldi	r25, 0xFF	; 255
    }
    return(ind);
}
   1a994:	cd b7       	in	r28, 0x3d	; 61
   1a996:	de b7       	in	r29, 0x3e	; 62
   1a998:	25 96       	adiw	r28, 0x05	; 5
   1a99a:	e8 e0       	ldi	r30, 0x08	; 8
   1a99c:	0c 94 e1 e6 	jmp	0x1cdc2	; 0x1cdc2 <__epilogue_restores__+0x14>

0001a9a0 <lif_ascii_string_to_e010>:
/// @param[in] offset: E010 data sector offset, only used in formatting wbuf with headers
/// @param[in] wbuf: E010 data result
/// @return size of E010 data
MEMSPACE
int lif_ascii_string_to_e010(char *str, long offset, uint8_t *wbuf)
{
   1a9a0:	a5 e0       	ldi	r26, 0x05	; 5
   1a9a2:	b0 e0       	ldi	r27, 0x00	; 0
   1a9a4:	e6 ed       	ldi	r30, 0xD6	; 214
   1a9a6:	f4 ed       	ldi	r31, 0xD4	; 212
   1a9a8:	0c 94 bb e6 	jmp	0x1cd76	; 0x1cd76 <__prologue_saves__>
   1a9ac:	ec 01       	movw	r28, r24
   1a9ae:	4a 01       	movw	r8, r20
   1a9b0:	5b 01       	movw	r10, r22
   1a9b2:	79 01       	movw	r14, r18
    int ind;
    int len;
    int pos,rem;

// String size
    len = strlen(str);
   1a9b4:	fc 01       	movw	r30, r24
   1a9b6:	01 90       	ld	r0, Z+
   1a9b8:	00 20       	and	r0, r0
   1a9ba:	e9 f7       	brne	.-6      	; 0x1a9b6 <lif_ascii_string_to_e010+0x16>
   1a9bc:	31 97       	sbiw	r30, 0x01	; 1
   1a9be:	6f 01       	movw	r12, r30
   1a9c0:	c8 1a       	sub	r12, r24
   1a9c2:	d9 0a       	sbc	r13, r25
    ind = 0;

// Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1a9c4:	41 2c       	mov	r4, r1
   1a9c6:	51 2c       	mov	r5, r1
   1a9c8:	32 01       	movw	r6, r4
   1a9ca:	53 94       	inc	r5
   1a9cc:	cb 01       	movw	r24, r22
   1a9ce:	ba 01       	movw	r22, r20
   1a9d0:	a3 01       	movw	r20, r6
   1a9d2:	92 01       	movw	r18, r4
   1a9d4:	0e 94 70 e6 	call	0x1cce0	; 0x1cce0 <__divmodsi4>
   1a9d8:	21 2c       	mov	r2, r1
   1a9da:	33 24       	eor	r3, r3
   1a9dc:	33 94       	inc	r3
   1a9de:	c1 01       	movw	r24, r2
   1a9e0:	86 1b       	sub	r24, r22
   1a9e2:	97 0b       	sbc	r25, r23

/// We ALWAYS pad a sector if:
///   There is no room for a 0xdf single header
///   - OR -
///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
   1a9e4:	86 30       	cpi	r24, 0x06	; 6
   1a9e6:	91 05       	cpc	r25, r1
   1a9e8:	20 f0       	brcs	.+8      	; 0x1a9f2 <lif_ascii_string_to_e010+0x52>
    ind = 0;

// Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1a9ea:	1c 01       	movw	r2, r24

// String size
    len = strlen(str);

// Output buffer index
    ind = 0;
   1a9ec:	00 e0       	ldi	r16, 0x00	; 0
   1a9ee:	10 e0       	ldi	r17, 0x00	; 0
   1a9f0:	17 c0       	rjmp	.+46     	; 0x1aa20 <lif_ascii_string_to_e010+0x80>
///   There is no room for a 0xdf single header
///   - OR -
///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
    {
        ind = lif_e010_pad_sector(offset, wbuf);
   1a9f2:	a7 01       	movw	r20, r14
   1a9f4:	c5 01       	movw	r24, r10
   1a9f6:	b4 01       	movw	r22, r8
   1a9f8:	78 df       	rcall	.-272    	; 0x1a8ea <lif_e010_pad_sector>
   1a9fa:	8c 01       	movw	r16, r24
        if(ind < 0)
   1a9fc:	97 fd       	sbrc	r25, 7
   1a9fe:	83 c0       	rjmp	.+262    	; 0x1ab06 <lif_ascii_string_to_e010+0x166>
            return(ind);

// Compute the current offset in this sector
        pos = ((offset + ind) % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
        rem = (long) LIF_SECTOR_SIZE - pos;
   1aa00:	09 2e       	mov	r0, r25
   1aa02:	00 0c       	add	r0, r0
   1aa04:	aa 0b       	sbc	r26, r26
   1aa06:	bb 0b       	sbc	r27, r27
   1aa08:	bc 01       	movw	r22, r24
   1aa0a:	cd 01       	movw	r24, r26
   1aa0c:	68 0d       	add	r22, r8
   1aa0e:	79 1d       	adc	r23, r9
   1aa10:	8a 1d       	adc	r24, r10
   1aa12:	9b 1d       	adc	r25, r11
   1aa14:	a3 01       	movw	r20, r6
   1aa16:	92 01       	movw	r18, r4
   1aa18:	0e 94 70 e6 	call	0x1cce0	; 0x1cce0 <__divmodsi4>
   1aa1c:	26 1a       	sub	r2, r22
   1aa1e:	37 0a       	sbc	r3, r23
   1aa20:	f7 01       	movw	r30, r14
   1aa22:	e0 0f       	add	r30, r16
   1aa24:	f1 1f       	adc	r31, r17
   1aa26:	0d 5f       	subi	r16, 0xFD	; 253
   1aa28:	1f 4f       	sbci	r17, 0xFF	; 255
    }

// Note: IMPORTANT we have >= 6 bytes!!!

// Do not have to split, there is enough room
    if(rem >= (3 + len))
   1aa2a:	c6 01       	movw	r24, r12
   1aa2c:	02 96       	adiw	r24, 0x02	; 2
   1aa2e:	82 15       	cp	r24, r2
   1aa30:	93 05       	cpc	r25, r3
   1aa32:	84 f4       	brge	.+32     	; 0x1aa54 <lif_ascii_string_to_e010+0xb4>
    {

// Write string in new sector
// The full string + header will fit
        wbuf[ind++] = 0xDF;
   1aa34:	8f ed       	ldi	r24, 0xDF	; 223
   1aa36:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1aa38:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >> 8) & 0xff;
   1aa3a:	d2 82       	std	Z+2, r13	; 0x02
   1aa3c:	f7 01       	movw	r30, r14
   1aa3e:	e0 0f       	add	r30, r16
   1aa40:	f1 1f       	adc	r31, r17
   1aa42:	cf 01       	movw	r24, r30
   1aa44:	8e 19       	sub	r24, r14
   1aa46:	9f 09       	sbc	r25, r15
// Write string
        while(*str)
   1aa48:	29 91       	ld	r18, Y+
   1aa4a:	22 23       	and	r18, r18
   1aa4c:	09 f4       	brne	.+2      	; 0x1aa50 <lif_ascii_string_to_e010+0xb0>
   1aa4e:	5b c0       	rjmp	.+182    	; 0x1ab06 <lif_ascii_string_to_e010+0x166>
            wbuf[ind++] = *str++;
   1aa50:	21 93       	st	Z+, r18
   1aa52:	f7 cf       	rjmp	.-18     	; 0x1aa42 <lif_ascii_string_to_e010+0xa2>

// CURRENT SECTOR
// String spans a sector , so split the string

// 1st Split string header
        wbuf[ind++] = 0xCF;
   1aa54:	8f ec       	ldi	r24, 0xCF	; 207
   1aa56:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1aa58:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >>8) & 0xff;
   1aa5a:	d2 82       	std	Z+2, r13	; 0x02
   1aa5c:	d7 01       	movw	r26, r14
   1aa5e:	a0 0f       	add	r26, r16
   1aa60:	b1 1f       	adc	r27, r17
// Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1aa62:	fe 01       	movw	r30, r28
   1aa64:	81 91       	ld	r24, Z+
   1aa66:	81 11       	cpse	r24, r1
   1aa68:	0e c0       	rjmp	.+28     	; 0x1aa86 <lif_ascii_string_to_e010+0xe6>
            wbuf[ind++] = *str++;

// NEW SECTOR
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
   1aa6a:	c8 01       	movw	r24, r16
   1aa6c:	01 2e       	mov	r0, r17
   1aa6e:	00 0c       	add	r0, r0
   1aa70:	aa 0b       	sbc	r26, r26
   1aa72:	bb 0b       	sbc	r27, r27
   1aa74:	bc 01       	movw	r22, r24
   1aa76:	cd 01       	movw	r24, r26
   1aa78:	68 0d       	add	r22, r8
   1aa7a:	79 1d       	adc	r23, r9
   1aa7c:	8a 1d       	adc	r24, r10
   1aa7e:	9b 1d       	adc	r25, r11
   1aa80:	61 11       	cpse	r22, r1
   1aa82:	09 c0       	rjmp	.+18     	; 0x1aa96 <lif_ascii_string_to_e010+0xf6>
   1aa84:	21 c0       	rjmp	.+66     	; 0x1aac8 <lif_ascii_string_to_e010+0x128>
// 1st Split string header
        wbuf[ind++] = 0xCF;
        wbuf[ind++] = len & 0xff;
        wbuf[ind++] = (len >>8) & 0xff;
// Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1aa86:	02 15       	cp	r16, r2
   1aa88:	13 05       	cpc	r17, r3
   1aa8a:	7c f7       	brge	.-34     	; 0x1aa6a <lif_ascii_string_to_e010+0xca>
            wbuf[ind++] = *str++;
   1aa8c:	0f 5f       	subi	r16, 0xFF	; 255
   1aa8e:	1f 4f       	sbci	r17, 0xFF	; 255
   1aa90:	8d 93       	st	X+, r24
   1aa92:	ef 01       	movw	r28, r30
   1aa94:	e6 cf       	rjmp	.-52     	; 0x1aa62 <lif_ascii_string_to_e010+0xc2>

// NEW SECTOR
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & LIF_DEBUG)
   1aa96:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1aa9a:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1aa9e:	32 ff       	sbrs	r19, 2
   1aaa0:	30 c0       	rjmp	.+96     	; 0x1ab02 <lif_ascii_string_to_e010+0x162>
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
   1aaa2:	20 e0       	ldi	r18, 0x00	; 0
   1aaa4:	31 e0       	ldi	r19, 0x01	; 1
   1aaa6:	40 e0       	ldi	r20, 0x00	; 0
   1aaa8:	50 e0       	ldi	r21, 0x00	; 0
   1aaaa:	0e 94 70 e6 	call	0x1cce0	; 0x1cce0 <__divmodsi4>
   1aaae:	ed b7       	in	r30, 0x3d	; 61
   1aab0:	fe b7       	in	r31, 0x3e	; 62
   1aab2:	75 83       	std	Z+5, r23	; 0x05
   1aab4:	64 83       	std	Z+4, r22	; 0x04
   1aab6:	89 ef       	ldi	r24, 0xF9	; 249
   1aab8:	98 e3       	ldi	r25, 0x38	; 56
   1aaba:	a0 e0       	ldi	r26, 0x00	; 0
   1aabc:	81 83       	std	Z+1, r24	; 0x01
   1aabe:	92 83       	std	Z+2, r25	; 0x02
   1aac0:	a3 83       	std	Z+3, r26	; 0x03
   1aac2:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   1aac6:	1d c0       	rjmp	.+58     	; 0x1ab02 <lif_ascii_string_to_e010+0x162>
            return(-1);
        }

// Update remining string length
        len = strlen(str);
   1aac8:	fe 01       	movw	r30, r28
   1aaca:	01 90       	ld	r0, Z+
   1aacc:	00 20       	and	r0, r0
   1aace:	e9 f7       	brne	.-6      	; 0x1aaca <lif_ascii_string_to_e010+0x12a>
   1aad0:	31 97       	sbiw	r30, 0x01	; 1
   1aad2:	9f 01       	movw	r18, r30
   1aad4:	2c 1b       	sub	r18, r28
   1aad6:	3d 0b       	sbc	r19, r29
// 2nd Split string header
        wbuf[ind++] = 0x6F;
   1aad8:	d7 01       	movw	r26, r14
   1aada:	a0 0f       	add	r26, r16
   1aadc:	b1 1f       	adc	r27, r17
   1aade:	8f e6       	ldi	r24, 0x6F	; 111
   1aae0:	8c 93       	st	X, r24
        wbuf[ind++] = (len & 0xff);
   1aae2:	fd 01       	movw	r30, r26
   1aae4:	21 83       	std	Z+1, r18	; 0x01
        wbuf[ind++] = (len>>8) & 0xff;
   1aae6:	32 83       	std	Z+2, r19	; 0x02
   1aae8:	0d 5f       	subi	r16, 0xFD	; 253
   1aaea:	1f 4f       	sbci	r17, 0xFF	; 255
   1aaec:	f7 01       	movw	r30, r14
   1aaee:	e0 0f       	add	r30, r16
   1aaf0:	f1 1f       	adc	r31, r17
   1aaf2:	cf 01       	movw	r24, r30
   1aaf4:	8e 19       	sub	r24, r14
   1aaf6:	9f 09       	sbc	r25, r15
// Write string
        while(*str)
   1aaf8:	29 91       	ld	r18, Y+
   1aafa:	22 23       	and	r18, r18
   1aafc:	21 f0       	breq	.+8      	; 0x1ab06 <lif_ascii_string_to_e010+0x166>
            wbuf[ind++] = *str++;
   1aafe:	21 93       	st	Z+, r18
   1ab00:	f8 cf       	rjmp	.-16     	; 0x1aaf2 <lif_ascii_string_to_e010+0x152>
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & LIF_DEBUG)
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
            return(-1);
   1ab02:	8f ef       	ldi	r24, 0xFF	; 255
   1ab04:	9f ef       	ldi	r25, 0xFF	; 255
        while(*str)
            wbuf[ind++] = *str++;
    }

    return(ind);
}
   1ab06:	cd b7       	in	r28, 0x3d	; 61
   1ab08:	de b7       	in	r29, 0x3e	; 62
   1ab0a:	25 96       	adiw	r28, 0x05	; 5
   1ab0c:	e2 e1       	ldi	r30, 0x12	; 18
   1ab0e:	0c 94 d7 e6 	jmp	0x1cdae	; 0x1cdae <__epilogue_restores__>

0001ab12 <lif_add_ascii_file_as_e010_wrapper>:
/// @param[in] userfile: User ASCII file source
/// @param[in] *LIF: Where to write file if set (not NULL)
/// @return size of formatted result
MEMSPACE
long lif_add_ascii_file_as_e010_wrapper(lif_t *LIF, uint32_t offset, char *username)
{
   1ab12:	ad e0       	ldi	r26, 0x0D	; 13
   1ab14:	b3 e0       	ldi	r27, 0x03	; 3
   1ab16:	ef e8       	ldi	r30, 0x8F	; 143
   1ab18:	f5 ed       	ldi	r31, 0xD5	; 213
   1ab1a:	0c 94 bb e6 	jmp	0x1cd76	; 0x1cd76 <__prologue_saves__>
   1ab1e:	5c 01       	movw	r10, r24
   1ab20:	2a 01       	movw	r4, r20
   1ab22:	3b 01       	movw	r6, r22
   1ab24:	c9 01       	movw	r24, r18
// strings are limited to less then this
    char str[LIF_SECTOR_SIZE+1];
// output buffer must be larger then a single sectors because of either headers or padding
    uint8_t obuf[LIF_SECTOR_SIZE*2];

    fi = lif_open(username, "rb");
   1ab26:	6e ef       	ldi	r22, 0xFE	; 254
   1ab28:	78 e0       	ldi	r23, 0x08	; 8
   1ab2a:	0e 94 2e c1 	call	0x1825c	; 0x1825c <lif_open>
   1ab2e:	c7 5f       	subi	r28, 0xF7	; 247
   1ab30:	dc 4f       	sbci	r29, 0xFC	; 252
   1ab32:	99 83       	std	Y+1, r25	; 0x01
   1ab34:	88 83       	st	Y, r24
   1ab36:	c9 50       	subi	r28, 0x09	; 9
   1ab38:	d3 40       	sbci	r29, 0x03	; 3
    if(fi == NULL)
   1ab3a:	89 2b       	or	r24, r25
   1ab3c:	09 f4       	brne	.+2      	; 0x1ab40 <lif_add_ascii_file_as_e010_wrapper+0x2e>
   1ab3e:	63 c0       	rjmp	.+198    	; 0x1ac06 <lif_add_ascii_file_as_e010_wrapper+0xf4>
   1ab40:	81 2c       	mov	r8, r1
   1ab42:	91 2c       	mov	r9, r1
   1ab44:	c1 2c       	mov	r12, r1
   1ab46:	d1 2c       	mov	r13, r1
   1ab48:	76 01       	movw	r14, r12

        if(count > 256)
        {
            count = 0;
            if(LIF)
                printf("\tWrote: %8ld\r", (long)bytes);
   1ab4a:	8b ee       	ldi	r24, 0xEB	; 235
   1ab4c:	98 e3       	ldi	r25, 0x38	; 56
   1ab4e:	9c 01       	movw	r18, r24
   1ab50:	40 e0       	ldi	r20, 0x00	; 0
   1ab52:	c5 5f       	subi	r28, 0xF5	; 245
   1ab54:	dc 4f       	sbci	r29, 0xFC	; 252
   1ab56:	28 83       	st	Y, r18
   1ab58:	39 83       	std	Y+1, r19	; 0x01
   1ab5a:	4a 83       	std	Y+2, r20	; 0x02
   1ab5c:	cb 50       	subi	r28, 0x0B	; 11
   1ab5e:	d3 40       	sbci	r29, 0x03	; 3
   1ab60:	14 c0       	rjmp	.+40     	; 0x1ab8a <lif_add_ascii_file_as_e010_wrapper+0x78>
                fclose(fi);
                return(-1);
            }
        }

        offset += size;
   1ab62:	c1 01       	movw	r24, r2
   1ab64:	03 2c       	mov	r0, r3
   1ab66:	00 0c       	add	r0, r0
   1ab68:	aa 0b       	sbc	r26, r26
   1ab6a:	bb 0b       	sbc	r27, r27
   1ab6c:	48 0e       	add	r4, r24
   1ab6e:	59 1e       	adc	r5, r25
   1ab70:	6a 1e       	adc	r6, r26
   1ab72:	7b 1e       	adc	r7, r27
        bytes += size;
   1ab74:	c8 0e       	add	r12, r24
   1ab76:	d9 1e       	adc	r13, r25
   1ab78:	ea 1e       	adc	r14, r26
   1ab7a:	fb 1e       	adc	r15, r27
        count += size;
   1ab7c:	82 0c       	add	r8, r2
   1ab7e:	93 1c       	adc	r9, r3

        if(count > 256)
   1ab80:	31 e0       	ldi	r19, 0x01	; 1
   1ab82:	83 16       	cp	r8, r19
   1ab84:	93 06       	cpc	r9, r19
   1ab86:	0c f0       	brlt	.+2      	; 0x1ab8a <lif_add_ascii_file_as_e010_wrapper+0x78>
   1ab88:	43 c0       	rjmp	.+134    	; 0x1ac10 <lif_add_ascii_file_as_e010_wrapper+0xfe>
    bytes = 0;
    count = 0;

// Read user file and write LIF records
// reserve 3 + LIF header bytes + 1 (EOS)
    while( fgets((char *)str,(int)sizeof(str) - 4, fi) != NULL )
   1ab8a:	c7 5f       	subi	r28, 0xF7	; 247
   1ab8c:	dc 4f       	sbci	r29, 0xFC	; 252
   1ab8e:	48 81       	ld	r20, Y
   1ab90:	59 81       	ldd	r21, Y+1	; 0x01
   1ab92:	c9 50       	subi	r28, 0x09	; 9
   1ab94:	d3 40       	sbci	r29, 0x03	; 3
   1ab96:	6d ef       	ldi	r22, 0xFD	; 253
   1ab98:	70 e0       	ldi	r23, 0x00	; 0
   1ab9a:	ce 01       	movw	r24, r28
   1ab9c:	88 5f       	subi	r24, 0xF8	; 248
   1ab9e:	9d 4f       	sbci	r25, 0xFD	; 253
   1aba0:	0e 94 42 76 	call	0xec84	; 0xec84 <fgets>
   1aba4:	89 2b       	or	r24, r25
   1aba6:	09 f4       	brne	.+2      	; 0x1abaa <lif_add_ascii_file_as_e010_wrapper+0x98>
   1aba8:	4b c0       	rjmp	.+150    	; 0x1ac40 <lif_add_ascii_file_as_e010_wrapper+0x12e>
    {
        trim_tail((char *)str);
   1abaa:	ce 01       	movw	r24, r28
   1abac:	88 5f       	subi	r24, 0xF8	; 248
   1abae:	9d 4f       	sbci	r25, 0xFD	; 253
   1abb0:	0e 94 0a 32 	call	0x6414	; 0x6414 <trim_tail>

        strcat((char *)str,"\r");                 // HP85 lines end with "\r"
   1abb4:	6e e4       	ldi	r22, 0x4E	; 78
   1abb6:	76 e1       	ldi	r23, 0x16	; 22
   1abb8:	ce 01       	movw	r24, r28
   1abba:	88 5f       	subi	r24, 0xF8	; 248
   1abbc:	9d 4f       	sbci	r25, 0xFD	; 253
   1abbe:	0e 94 4d 31 	call	0x629a	; 0x629a <strcat>

        size = lif_ascii_string_to_e010(str, offset, obuf);
   1abc2:	9e 01       	movw	r18, r28
   1abc4:	28 5f       	subi	r18, 0xF8	; 248
   1abc6:	3f 4f       	sbci	r19, 0xFF	; 255
   1abc8:	b3 01       	movw	r22, r6
   1abca:	a2 01       	movw	r20, r4
   1abcc:	ce 01       	movw	r24, r28
   1abce:	88 5f       	subi	r24, 0xF8	; 248
   1abd0:	9d 4f       	sbci	r25, 0xFD	; 253
   1abd2:	e6 de       	rcall	.-564    	; 0x1a9a0 <lif_ascii_string_to_e010>
   1abd4:	1c 01       	movw	r2, r24
// Write string
// Now Write string
        if(LIF)
   1abd6:	a1 14       	cp	r10, r1
   1abd8:	b1 04       	cpc	r11, r1
   1abda:	19 f2       	breq	.-122    	; 0x1ab62 <lif_add_ascii_file_as_e010_wrapper+0x50>
        {
            len = lif_write(LIF, obuf, offset, size);
   1abdc:	8c 01       	movw	r16, r24
   1abde:	a3 01       	movw	r20, r6
   1abe0:	92 01       	movw	r18, r4
   1abe2:	be 01       	movw	r22, r28
   1abe4:	68 5f       	subi	r22, 0xF8	; 248
   1abe6:	7f 4f       	sbci	r23, 0xFF	; 255
   1abe8:	c5 01       	movw	r24, r10
   1abea:	0e 94 05 c2 	call	0x1840a	; 0x1840a <lif_write>
            if(len < size)
   1abee:	82 15       	cp	r24, r2
   1abf0:	93 05       	cpc	r25, r3
   1abf2:	0c f0       	brlt	.+2      	; 0x1abf6 <lif_add_ascii_file_as_e010_wrapper+0xe4>
   1abf4:	b6 cf       	rjmp	.-148    	; 0x1ab62 <lif_add_ascii_file_as_e010_wrapper+0x50>
            {
                fclose(fi);
   1abf6:	c7 5f       	subi	r28, 0xF7	; 247
   1abf8:	dc 4f       	sbci	r29, 0xFC	; 252
   1abfa:	88 81       	ld	r24, Y
   1abfc:	99 81       	ldd	r25, Y+1	; 0x01
   1abfe:	c9 50       	subi	r28, 0x09	; 9
   1ac00:	d3 40       	sbci	r29, 0x03	; 3
   1ac02:	0e 94 d4 7c 	call	0xf9a8	; 0xf9a8 <fclose>
                return(-1);
   1ac06:	6f ef       	ldi	r22, 0xFF	; 255
   1ac08:	7f ef       	ldi	r23, 0xFF	; 255
   1ac0a:	8f ef       	ldi	r24, 0xFF	; 255
   1ac0c:	9f ef       	ldi	r25, 0xFF	; 255
   1ac0e:	84 c0       	rjmp	.+264    	; 0x1ad18 <lif_add_ascii_file_as_e010_wrapper+0x206>
        count += size;

        if(count > 256)
        {
            count = 0;
            if(LIF)
   1ac10:	a1 14       	cp	r10, r1
   1ac12:	b1 04       	cpc	r11, r1
   1ac14:	91 f0       	breq	.+36     	; 0x1ac3a <lif_add_ascii_file_as_e010_wrapper+0x128>
                printf("\tWrote: %8ld\r", (long)bytes);
   1ac16:	ed b7       	in	r30, 0x3d	; 61
   1ac18:	fe b7       	in	r31, 0x3e	; 62
   1ac1a:	c4 82       	std	Z+4, r12	; 0x04
   1ac1c:	d5 82       	std	Z+5, r13	; 0x05
   1ac1e:	e6 82       	std	Z+6, r14	; 0x06
   1ac20:	f7 82       	std	Z+7, r15	; 0x07
   1ac22:	c5 5f       	subi	r28, 0xF5	; 245
   1ac24:	dc 4f       	sbci	r29, 0xFC	; 252
   1ac26:	28 81       	ld	r18, Y
   1ac28:	39 81       	ldd	r19, Y+1	; 0x01
   1ac2a:	4a 81       	ldd	r20, Y+2	; 0x02
   1ac2c:	cb 50       	subi	r28, 0x0B	; 11
   1ac2e:	d3 40       	sbci	r29, 0x03	; 3
   1ac30:	21 83       	std	Z+1, r18	; 0x01
   1ac32:	32 83       	std	Z+2, r19	; 0x02
   1ac34:	43 83       	std	Z+3, r20	; 0x03
   1ac36:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
        bytes += size;
        count += size;

        if(count > 256)
        {
            count = 0;
   1ac3a:	81 2c       	mov	r8, r1
   1ac3c:	91 2c       	mov	r9, r1
   1ac3e:	a5 cf       	rjmp	.-182    	; 0x1ab8a <lif_add_ascii_file_as_e010_wrapper+0x78>
            if(LIF)
                printf("\tWrote: %8ld\r", (long)bytes);
        }
    }

    fclose(fi);
   1ac40:	c7 5f       	subi	r28, 0xF7	; 247
   1ac42:	dc 4f       	sbci	r29, 0xFC	; 252
   1ac44:	88 81       	ld	r24, Y
   1ac46:	99 81       	ldd	r25, Y+1	; 0x01
   1ac48:	c9 50       	subi	r28, 0x09	; 9
   1ac4a:	d3 40       	sbci	r29, 0x03	; 3
   1ac4c:	0e 94 d4 7c 	call	0xf9a8	; 0xf9a8 <fclose>

// Write EOF
    str[0] = 0;
   1ac50:	c8 5f       	subi	r28, 0xF8	; 248
   1ac52:	dd 4f       	sbci	r29, 0xFD	; 253
   1ac54:	18 82       	st	Y, r1
   1ac56:	c8 50       	subi	r28, 0x08	; 8
   1ac58:	d2 40       	sbci	r29, 0x02	; 2
// We only want to return the count of bytes in the file NOT the padding at the end
// Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);
   1ac5a:	9e 01       	movw	r18, r28
   1ac5c:	28 5f       	subi	r18, 0xF8	; 248
   1ac5e:	3f 4f       	sbci	r19, 0xFF	; 255
   1ac60:	b3 01       	movw	r22, r6
   1ac62:	a2 01       	movw	r20, r4
   1ac64:	ce 01       	movw	r24, r28
   1ac66:	88 5f       	subi	r24, 0xF8	; 248
   1ac68:	9d 4f       	sbci	r25, 0xFD	; 253
   1ac6a:	9a de       	rcall	.-716    	; 0x1a9a0 <lif_ascii_string_to_e010>
   1ac6c:	4c 01       	movw	r8, r24

    if(LIF)
   1ac6e:	a1 14       	cp	r10, r1
   1ac70:	b1 04       	cpc	r11, r1
   1ac72:	d1 f4       	brne	.+52     	; 0x1aca8 <lif_add_ascii_file_as_e010_wrapper+0x196>
            return(-1);

    }

    offset += size;
    bytes += size;
   1ac74:	c4 01       	movw	r24, r8
   1ac76:	09 2c       	mov	r0, r9
   1ac78:	00 0c       	add	r0, r0
   1ac7a:	aa 0b       	sbc	r26, r26
   1ac7c:	bb 0b       	sbc	r27, r27
   1ac7e:	c8 0e       	add	r12, r24
   1ac80:	d9 1e       	adc	r13, r25
   1ac82:	ea 1e       	adc	r14, r26
   1ac84:	fb 1e       	adc	r15, r27

// PAD
    size = lif_e010_pad_sector(offset, obuf);
   1ac86:	12 01       	movw	r2, r4
   1ac88:	23 01       	movw	r4, r6
   1ac8a:	28 0e       	add	r2, r24
   1ac8c:	39 1e       	adc	r3, r25
   1ac8e:	4a 1e       	adc	r4, r26
   1ac90:	5b 1e       	adc	r5, r27
   1ac92:	ae 01       	movw	r20, r28
   1ac94:	48 5f       	subi	r20, 0xF8	; 248
   1ac96:	5f 4f       	sbci	r21, 0xFF	; 255
   1ac98:	c2 01       	movw	r24, r4
   1ac9a:	b1 01       	movw	r22, r2
   1ac9c:	26 de       	rcall	.-948    	; 0x1a8ea <lif_e010_pad_sector>
   1ac9e:	3c 01       	movw	r6, r24
    if(LIF)
   1aca0:	a1 14       	cp	r10, r1
   1aca2:	b1 04       	cpc	r11, r1
   1aca4:	e1 f4       	brne	.+56     	; 0x1acde <lif_add_ascii_file_as_e010_wrapper+0x1cc>
   1aca6:	36 c0       	rjmp	.+108    	; 0x1ad14 <lif_add_ascii_file_as_e010_wrapper+0x202>
// Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);

    if(LIF)
    {
        printf("\tWrote: %8ld\r", (long)bytes);
   1aca8:	ed b7       	in	r30, 0x3d	; 61
   1acaa:	fe b7       	in	r31, 0x3e	; 62
   1acac:	c4 82       	std	Z+4, r12	; 0x04
   1acae:	d5 82       	std	Z+5, r13	; 0x05
   1acb0:	e6 82       	std	Z+6, r14	; 0x06
   1acb2:	f7 82       	std	Z+7, r15	; 0x07
   1acb4:	8d ed       	ldi	r24, 0xDD	; 221
   1acb6:	98 e3       	ldi	r25, 0x38	; 56
   1acb8:	a0 e0       	ldi	r26, 0x00	; 0
   1acba:	81 83       	std	Z+1, r24	; 0x01
   1acbc:	92 83       	std	Z+2, r25	; 0x02
   1acbe:	a3 83       	std	Z+3, r26	; 0x03
   1acc0:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
        len = lif_write(LIF, obuf, offset, size);
   1acc4:	84 01       	movw	r16, r8
   1acc6:	a3 01       	movw	r20, r6
   1acc8:	92 01       	movw	r18, r4
   1acca:	be 01       	movw	r22, r28
   1accc:	68 5f       	subi	r22, 0xF8	; 248
   1acce:	7f 4f       	sbci	r23, 0xFF	; 255
   1acd0:	c5 01       	movw	r24, r10
   1acd2:	0e 94 05 c2 	call	0x1840a	; 0x1840a <lif_write>
        if(len < size)
   1acd6:	88 15       	cp	r24, r8
   1acd8:	99 05       	cpc	r25, r9
   1acda:	64 f6       	brge	.-104    	; 0x1ac74 <lif_add_ascii_file_as_e010_wrapper+0x162>
   1acdc:	94 cf       	rjmp	.-216    	; 0x1ac06 <lif_add_ascii_file_as_e010_wrapper+0xf4>

// PAD
    size = lif_e010_pad_sector(offset, obuf);
    if(LIF)
    {
        len = lif_write(LIF, obuf, offset, size);
   1acde:	8c 01       	movw	r16, r24
   1ace0:	a2 01       	movw	r20, r4
   1ace2:	91 01       	movw	r18, r2
   1ace4:	be 01       	movw	r22, r28
   1ace6:	68 5f       	subi	r22, 0xF8	; 248
   1ace8:	7f 4f       	sbci	r23, 0xFF	; 255
   1acea:	c5 01       	movw	r24, r10
   1acec:	0e 94 05 c2 	call	0x1840a	; 0x1840a <lif_write>
        if(len < size)
   1acf0:	86 15       	cp	r24, r6
   1acf2:	97 05       	cpc	r25, r7
   1acf4:	0c f4       	brge	.+2      	; 0x1acf8 <lif_add_ascii_file_as_e010_wrapper+0x1e6>
   1acf6:	87 cf       	rjmp	.-242    	; 0x1ac06 <lif_add_ascii_file_as_e010_wrapper+0xf4>
            return(-1);
    }

    if(LIF)
        printf("\tWrote: %8ld\r",(long)bytes);
   1acf8:	ed b7       	in	r30, 0x3d	; 61
   1acfa:	fe b7       	in	r31, 0x3e	; 62
   1acfc:	c4 82       	std	Z+4, r12	; 0x04
   1acfe:	d5 82       	std	Z+5, r13	; 0x05
   1ad00:	e6 82       	std	Z+6, r14	; 0x06
   1ad02:	f7 82       	std	Z+7, r15	; 0x07
   1ad04:	8f ec       	ldi	r24, 0xCF	; 207
   1ad06:	98 e3       	ldi	r25, 0x38	; 56
   1ad08:	a0 e0       	ldi	r26, 0x00	; 0
   1ad0a:	81 83       	std	Z+1, r24	; 0x01
   1ad0c:	92 83       	std	Z+2, r25	; 0x02
   1ad0e:	a3 83       	std	Z+3, r26	; 0x03
   1ad10:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>

    return(bytes);
   1ad14:	b6 01       	movw	r22, r12
   1ad16:	c7 01       	movw	r24, r14
}
   1ad18:	c3 5f       	subi	r28, 0xF3	; 243
   1ad1a:	dc 4f       	sbci	r29, 0xFC	; 252
   1ad1c:	e2 e1       	ldi	r30, 0x12	; 18
   1ad1e:	0c 94 d7 e6 	jmp	0x1cdae	; 0x1cdae <__epilogue_restores__>

0001ad22 <lif_add_ascii_file_as_e010>:
/// @param[in] lifname: LIF file name
/// @param[in] userfile: userfile name
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_ascii_file_as_e010(char *lifimagename, char *lifname, char *userfile)
{
   1ad22:	ab e3       	ldi	r26, 0x3B	; 59
   1ad24:	b0 e0       	ldi	r27, 0x00	; 0
   1ad26:	e7 e9       	ldi	r30, 0x97	; 151
   1ad28:	f6 ed       	ldi	r31, 0xD6	; 214
   1ad2a:	0c 94 bb e6 	jmp	0x1cd76	; 0x1cd76 <__prologue_saves__>
   1ad2e:	6c 01       	movw	r12, r24
   1ad30:	1b 01       	movw	r2, r22
   1ad32:	7a 01       	movw	r14, r20
    long offset;
    int index;
    lif_t *LIF;
    stat_t st, *sp;

    if(!*lifimagename)
   1ad34:	fc 01       	movw	r30, r24
   1ad36:	80 81       	ld	r24, Z
   1ad38:	81 11       	cpse	r24, r1
   1ad3a:	03 c0       	rjmp	.+6      	; 0x1ad42 <lif_add_ascii_file_as_e010+0x20>
    {
        printf("lif_add_ascii_file_as_e010: lifimagename is empty\n");
   1ad3c:	8c e9       	ldi	r24, 0x9C	; 156
   1ad3e:	98 e3       	ldi	r25, 0x38	; 56
   1ad40:	1a c0       	rjmp	.+52     	; 0x1ad76 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*lifname)
   1ad42:	fb 01       	movw	r30, r22
   1ad44:	80 81       	ld	r24, Z
   1ad46:	81 11       	cpse	r24, r1
   1ad48:	03 c0       	rjmp	.+6      	; 0x1ad50 <lif_add_ascii_file_as_e010+0x2e>
    {
        printf("lif_add_ascii_file_as_e010: lifname is empty\n");
   1ad4a:	8e e6       	ldi	r24, 0x6E	; 110
   1ad4c:	98 e3       	ldi	r25, 0x38	; 56
   1ad4e:	13 c0       	rjmp	.+38     	; 0x1ad76 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*userfile)
   1ad50:	fa 01       	movw	r30, r20
   1ad52:	80 81       	ld	r24, Z
   1ad54:	81 11       	cpse	r24, r1
   1ad56:	03 c0       	rjmp	.+6      	; 0x1ad5e <lif_add_ascii_file_as_e010+0x3c>
    {
        printf("lif_add_ascii_file_as_e010: userfile is empty\n");
   1ad58:	8f e3       	ldi	r24, 0x3F	; 63
   1ad5a:	98 e3       	ldi	r25, 0x38	; 56
   1ad5c:	0c c0       	rjmp	.+24     	; 0x1ad76 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }

//Get size and date info
    sp = lif_stat(userfile, (stat_t *)&st);
   1ad5e:	be 01       	movw	r22, r28
   1ad60:	66 5f       	subi	r22, 0xF6	; 246
   1ad62:	7f 4f       	sbci	r23, 0xFF	; 255
   1ad64:	ca 01       	movw	r24, r20
   1ad66:	0e 94 58 c1 	call	0x182b0	; 0x182b0 <lif_stat>
   1ad6a:	9b af       	std	Y+59, r25	; 0x3b
   1ad6c:	8a af       	std	Y+58, r24	; 0x3a
    if(!sp)
   1ad6e:	89 2b       	or	r24, r25
   1ad70:	59 f4       	brne	.+22     	; 0x1ad88 <lif_add_ascii_file_as_e010+0x66>
    {
        printf("lif_add_ascii_file_as_e010: userfile not found\n");
   1ad72:	8f e0       	ldi	r24, 0x0F	; 15
   1ad74:	98 e3       	ldi	r25, 0x38	; 56
   1ad76:	a0 e0       	ldi	r26, 0x00	; 0
   1ad78:	ed b7       	in	r30, 0x3d	; 61
   1ad7a:	fe b7       	in	r31, 0x3e	; 62
   1ad7c:	81 83       	std	Z+1, r24	; 0x01
   1ad7e:	92 83       	std	Z+2, r25	; 0x02
   1ad80:	a3 83       	std	Z+3, r26	; 0x03
   1ad82:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   1ad86:	01 c1       	rjmp	.+514    	; 0x1af8a <lif_add_ascii_file_as_e010+0x268>
        return(-1);
    }

    if(debuglevel & LIF_DEBUG)
   1ad88:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1ad8c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1ad90:	92 ff       	sbrs	r25, 2
   1ad92:	10 c0       	rjmp	.+32     	; 0x1adb4 <lif_add_ascii_file_as_e010+0x92>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n",
   1ad94:	ed b7       	in	r30, 0x3d	; 61
   1ad96:	fe b7       	in	r31, 0x3e	; 62
   1ad98:	f1 86       	std	Z+9, r15	; 0x09
   1ad9a:	e0 86       	std	Z+8, r14	; 0x08
   1ad9c:	37 82       	std	Z+7, r3	; 0x07
   1ad9e:	26 82       	std	Z+6, r2	; 0x06
   1ada0:	d5 82       	std	Z+5, r13	; 0x05
   1ada2:	c4 82       	std	Z+4, r12	; 0x04
   1ada4:	80 ee       	ldi	r24, 0xE0	; 224
   1ada6:	97 e3       	ldi	r25, 0x37	; 55
   1ada8:	a0 e0       	ldi	r26, 0x00	; 0
   1adaa:	81 83       	std	Z+1, r24	; 0x01
   1adac:	92 83       	std	Z+2, r25	; 0x02
   1adae:	a3 83       	std	Z+3, r26	; 0x03
   1adb0:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
            lifimagename, lifname, userfile);

// Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
   1adb4:	97 01       	movw	r18, r14
   1adb6:	40 e0       	ldi	r20, 0x00	; 0
   1adb8:	50 e0       	ldi	r21, 0x00	; 0
   1adba:	ba 01       	movw	r22, r20
   1adbc:	80 e0       	ldi	r24, 0x00	; 0
   1adbe:	90 e0       	ldi	r25, 0x00	; 0
   1adc0:	a8 de       	rcall	.-688    	; 0x1ab12 <lif_add_ascii_file_as_e010_wrapper>
   1adc2:	4b 01       	movw	r8, r22
   1adc4:	5c 01       	movw	r10, r24
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1adc6:	47 2e       	mov	r4, r23
   1adc8:	58 2e       	mov	r5, r24
   1adca:	69 2e       	mov	r6, r25
   1adcc:	77 24       	eor	r7, r7
    if(bytes % (long)LIF_SECTOR_SIZE)
   1adce:	66 23       	and	r22, r22
   1add0:	29 f0       	breq	.+10     	; 0x1addc <lif_add_ascii_file_as_e010+0xba>
        ++sectors;
   1add2:	ff ef       	ldi	r31, 0xFF	; 255
   1add4:	4f 1a       	sub	r4, r31
   1add6:	5f 0a       	sbc	r5, r31
   1add8:	6f 0a       	sbc	r6, r31
   1adda:	7f 0a       	sbc	r7, r31

// Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
   1addc:	61 e0       	ldi	r22, 0x01	; 1
   1adde:	79 e0       	ldi	r23, 0x09	; 9
   1ade0:	c6 01       	movw	r24, r12
   1ade2:	49 da       	rcall	.-2926   	; 0x1a276 <lif_open_volume>
   1ade4:	8c 01       	movw	r16, r24
    if(LIF == NULL)
   1ade6:	00 97       	sbiw	r24, 0x00	; 0
   1ade8:	09 f4       	brne	.+2      	; 0x1adec <lif_add_ascii_file_as_e010+0xca>
   1adea:	cf c0       	rjmp	.+414    	; 0x1af8a <lif_add_ascii_file_as_e010+0x268>
        return(-1);

// Now find free record
    index = lif_newdir(LIF, sectors);
   1adec:	b3 01       	movw	r22, r6
   1adee:	a2 01       	movw	r20, r4
   1adf0:	e2 d8       	rcall	.-3644   	; 0x19fb6 <lif_newdir>
   1adf2:	3c 01       	movw	r6, r24
    if(index == -1)
   1adf4:	8f ef       	ldi	r24, 0xFF	; 255
   1adf6:	68 16       	cp	r6, r24
   1adf8:	78 06       	cpc	r7, r24
   1adfa:	79 f4       	brne	.+30     	; 0x1ae1a <lif_add_ascii_file_as_e010+0xf8>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n",
   1adfc:	ed b7       	in	r30, 0x3d	; 61
   1adfe:	fe b7       	in	r31, 0x3e	; 62
   1ae00:	f7 82       	std	Z+7, r15	; 0x07
   1ae02:	e6 82       	std	Z+6, r14	; 0x06
   1ae04:	d5 82       	std	Z+5, r13	; 0x05
   1ae06:	c4 82       	std	Z+4, r12	; 0x04
   1ae08:	80 eb       	ldi	r24, 0xB0	; 176
   1ae0a:	97 e3       	ldi	r25, 0x37	; 55
   1ae0c:	a0 e0       	ldi	r26, 0x00	; 0
   1ae0e:	81 83       	std	Z+1, r24	; 0x01
   1ae10:	92 83       	std	Z+2, r25	; 0x02
   1ae12:	a3 83       	std	Z+3, r26	; 0x03
   1ae14:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   1ae18:	a0 c0       	rjmp	.+320    	; 0x1af5a <lif_add_ascii_file_as_e010+0x238>
        lif_closedir(LIF);
        return(-1);
    }

// Initialize the free directory entry
    lif_fixname(LIF->DIR.filename, lifname,10);
   1ae1a:	68 01       	movw	r12, r16
   1ae1c:	ff e4       	ldi	r31, 0x4F	; 79
   1ae1e:	cf 0e       	add	r12, r31
   1ae20:	d1 1c       	adc	r13, r1
   1ae22:	4a e0       	ldi	r20, 0x0A	; 10
   1ae24:	50 e0       	ldi	r21, 0x00	; 0
   1ae26:	b1 01       	movw	r22, r2
   1ae28:	c6 01       	movw	r24, r12
   1ae2a:	0e 94 07 c3 	call	0x1860e	; 0x1860e <lif_fixname>
    LIF->DIR.FileType = 0xe010;                   // 10
   1ae2e:	80 e1       	ldi	r24, 0x10	; 16
   1ae30:	90 ee       	ldi	r25, 0xE0	; 224
   1ae32:	f8 01       	movw	r30, r16
   1ae34:	e6 5a       	subi	r30, 0xA6	; 166
   1ae36:	ff 4f       	sbci	r31, 0xFF	; 255
   1ae38:	91 83       	std	Z+1, r25	; 0x01
   1ae3a:	80 83       	st	Z, r24
    lif_time2lifbcd(sp->st_mtime, LIF->DIR.date);
   1ae3c:	ea ad       	ldd	r30, Y+58	; 0x3a
   1ae3e:	fb ad       	ldd	r31, Y+59	; 0x3b
   1ae40:	60 a5       	ldd	r22, Z+40	; 0x28
   1ae42:	71 a5       	ldd	r23, Z+41	; 0x29
   1ae44:	82 a5       	ldd	r24, Z+42	; 0x2a
   1ae46:	93 a5       	ldd	r25, Z+43	; 0x2b
   1ae48:	a8 01       	movw	r20, r16
   1ae4a:	4c 59       	subi	r20, 0x9C	; 156
   1ae4c:	5f 4f       	sbci	r21, 0xFF	; 255
   1ae4e:	0e 94 2c c5 	call	0x18a58	; 0x18a58 <lif_time2lifbcd>

    LIF->DIR.VolNumber = 0x8001;                  // 26
   1ae52:	81 e0       	ldi	r24, 0x01	; 1
   1ae54:	90 e8       	ldi	r25, 0x80	; 128
   1ae56:	f8 01       	movw	r30, r16
   1ae58:	e6 59       	subi	r30, 0x96	; 150
   1ae5a:	ff 4f       	sbci	r31, 0xFF	; 255
   1ae5c:	91 83       	std	Z+1, r25	; 0x01
   1ae5e:	80 83       	st	Z, r24
    LIF->DIR.FileBytes = bytes;                   // 28
   1ae60:	32 96       	adiw	r30, 0x02	; 2
   1ae62:	91 82       	std	Z+1, r9	; 0x01
   1ae64:	80 82       	st	Z, r8
    LIF->DIR.SectorSize  = 0x100;                 // 30
   1ae66:	80 e0       	ldi	r24, 0x00	; 0
   1ae68:	91 e0       	ldi	r25, 0x01	; 1
   1ae6a:	32 96       	adiw	r30, 0x02	; 2
   1ae6c:	91 83       	std	Z+1, r25	; 0x01
   1ae6e:	80 83       	st	Z, r24
    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1ae70:	58 01       	movw	r10, r16
   1ae72:	fc e5       	ldi	r31, 0x5C	; 92
   1ae74:	af 0e       	add	r10, r31
   1ae76:	b1 1c       	adc	r11, r1
   1ae78:	f5 01       	movw	r30, r10
   1ae7a:	80 81       	ld	r24, Z
   1ae7c:	91 81       	ldd	r25, Z+1	; 0x01
   1ae7e:	a2 81       	ldd	r26, Z+2	; 0x02
   1ae80:	b3 81       	ldd	r27, Z+3	; 0x03
   1ae82:	22 24       	eor	r2, r2
   1ae84:	38 2e       	mov	r3, r24
   1ae86:	49 2e       	mov	r4, r25
   1ae88:	5a 2e       	mov	r5, r26

    if(debuglevel & LIF_DEBUG)
   1ae8a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1ae8e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1ae92:	92 ff       	sbrs	r25, 2
   1ae94:	05 c0       	rjmp	.+10     	; 0x1aea0 <lif_add_ascii_file_as_e010+0x17e>
        lif_dump_vol(LIF,"lif_after lif_newdir");
   1ae96:	60 e5       	ldi	r22, 0x50	; 80
   1ae98:	76 e1       	ldi	r23, 0x16	; 22
   1ae9a:	c8 01       	movw	r24, r16
   1ae9c:	0e 94 18 c6 	call	0x18c30	; 0x18c30 <lif_dump_vol>

// Write converted file into free space first
    bytes = lif_add_ascii_file_as_e010_wrapper(LIF,offset,userfile);
   1aea0:	97 01       	movw	r18, r14
   1aea2:	b2 01       	movw	r22, r4
   1aea4:	a1 01       	movw	r20, r2
   1aea6:	c8 01       	movw	r24, r16
   1aea8:	34 de       	rcall	.-920    	; 0x1ab12 <lif_add_ascii_file_as_e010_wrapper>
   1aeaa:	4b 01       	movw	r8, r22
   1aeac:	7c 01       	movw	r14, r24

    if(debuglevel & LIF_DEBUG)
   1aeae:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1aeb2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1aeb6:	92 ff       	sbrs	r25, 2
   1aeb8:	4a c0       	rjmp	.+148    	; 0x1af4e <lif_add_ascii_file_as_e010+0x22c>
    {
        printf("New Directory Information AFTER write\n");
   1aeba:	89 e8       	ldi	r24, 0x89	; 137
   1aebc:	97 e3       	ldi	r25, 0x37	; 55
   1aebe:	a0 e0       	ldi	r26, 0x00	; 0
   1aec0:	ed b7       	in	r30, 0x3d	; 61
   1aec2:	fe b7       	in	r31, 0x3e	; 62
   1aec4:	81 83       	std	Z+1, r24	; 0x01
   1aec6:	92 83       	std	Z+2, r25	; 0x02
   1aec8:	a3 83       	std	Z+3, r26	; 0x03
   1aeca:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
        printf("Name:              %s\n", LIF->DIR.filename);
   1aece:	ed b7       	in	r30, 0x3d	; 61
   1aed0:	fe b7       	in	r31, 0x3e	; 62
   1aed2:	d5 82       	std	Z+5, r13	; 0x05
   1aed4:	c4 82       	std	Z+4, r12	; 0x04
   1aed6:	82 e7       	ldi	r24, 0x72	; 114
   1aed8:	97 e3       	ldi	r25, 0x37	; 55
   1aeda:	a0 e0       	ldi	r26, 0x00	; 0
   1aedc:	81 83       	std	Z+1, r24	; 0x01
   1aede:	92 83       	std	Z+2, r25	; 0x02
   1aee0:	a3 83       	std	Z+3, r26	; 0x03
   1aee2:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
        printf("Index:            %4d\n", (int)index);
   1aee6:	ed b7       	in	r30, 0x3d	; 61
   1aee8:	fe b7       	in	r31, 0x3e	; 62
   1aeea:	75 82       	std	Z+5, r7	; 0x05
   1aeec:	64 82       	std	Z+4, r6	; 0x04
   1aeee:	8b e5       	ldi	r24, 0x5B	; 91
   1aef0:	97 e3       	ldi	r25, 0x37	; 55
   1aef2:	a0 e0       	ldi	r26, 0x00	; 0
   1aef4:	81 83       	std	Z+1, r24	; 0x01
   1aef6:	92 83       	std	Z+2, r25	; 0x02
   1aef8:	a3 83       	std	Z+3, r26	; 0x03
   1aefa:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
        printf("First Sector:     %4lxH\n", (long) LIF->DIR.FileStartSector);
   1aefe:	f5 01       	movw	r30, r10
   1af00:	80 81       	ld	r24, Z
   1af02:	91 81       	ldd	r25, Z+1	; 0x01
   1af04:	a2 81       	ldd	r26, Z+2	; 0x02
   1af06:	b3 81       	ldd	r27, Z+3	; 0x03
   1af08:	ed b7       	in	r30, 0x3d	; 61
   1af0a:	fe b7       	in	r31, 0x3e	; 62
   1af0c:	84 83       	std	Z+4, r24	; 0x04
   1af0e:	95 83       	std	Z+5, r25	; 0x05
   1af10:	a6 83       	std	Z+6, r26	; 0x06
   1af12:	b7 83       	std	Z+7, r27	; 0x07
   1af14:	82 e4       	ldi	r24, 0x42	; 66
   1af16:	97 e3       	ldi	r25, 0x37	; 55
   1af18:	a0 e0       	ldi	r26, 0x00	; 0
   1af1a:	81 83       	std	Z+1, r24	; 0x01
   1af1c:	92 83       	std	Z+2, r25	; 0x02
   1af1e:	a3 83       	std	Z+3, r26	; 0x03
   1af20:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
        printf("File Sectors:     %4lxH\n", (long)LIF->DIR.FileSectors);
   1af24:	f8 01       	movw	r30, r16
   1af26:	e0 5a       	subi	r30, 0xA0	; 160
   1af28:	ff 4f       	sbci	r31, 0xFF	; 255
   1af2a:	80 81       	ld	r24, Z
   1af2c:	91 81       	ldd	r25, Z+1	; 0x01
   1af2e:	a2 81       	ldd	r26, Z+2	; 0x02
   1af30:	b3 81       	ldd	r27, Z+3	; 0x03
   1af32:	ed b7       	in	r30, 0x3d	; 61
   1af34:	fe b7       	in	r31, 0x3e	; 62
   1af36:	84 83       	std	Z+4, r24	; 0x04
   1af38:	95 83       	std	Z+5, r25	; 0x05
   1af3a:	a6 83       	std	Z+6, r26	; 0x06
   1af3c:	b7 83       	std	Z+7, r27	; 0x07
   1af3e:	89 e2       	ldi	r24, 0x29	; 41
   1af40:	97 e3       	ldi	r25, 0x37	; 55
   1af42:	a0 e0       	ldi	r26, 0x00	; 0
   1af44:	81 83       	std	Z+1, r24	; 0x01
   1af46:	92 83       	std	Z+2, r25	; 0x02
   1af48:	a3 83       	std	Z+3, r26	; 0x03
   1af4a:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    }

// Write directory record
// Note: lif_newdir alrwady did the new EOF
    if( !lif_writedirindex(LIF,index))
   1af4e:	b3 01       	movw	r22, r6
   1af50:	c8 01       	movw	r24, r16
   1af52:	0e 94 73 cb 	call	0x196e6	; 0x196e6 <lif_writedirindex>
   1af56:	89 2b       	or	r24, r25
   1af58:	21 f4       	brne	.+8      	; 0x1af62 <lif_add_ascii_file_as_e010+0x240>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1af5a:	c8 01       	movw	r24, r16
   1af5c:	0e 94 7e ca 	call	0x194fc	; 0x194fc <lif_close_volume>
   1af60:	14 c0       	rjmp	.+40     	; 0x1af8a <lif_add_ascii_file_as_e010+0x268>
   1af62:	c8 01       	movw	r24, r16
   1af64:	0e 94 7e ca 	call	0x194fc	; 0x194fc <lif_close_volume>
        return(-1);
    }

    lif_closedir(LIF);

    printf("\tWrote: %8ld\n", bytes);
   1af68:	ed b7       	in	r30, 0x3d	; 61
   1af6a:	fe b7       	in	r31, 0x3e	; 62
   1af6c:	84 82       	std	Z+4, r8	; 0x04
   1af6e:	95 82       	std	Z+5, r9	; 0x05
   1af70:	e6 82       	std	Z+6, r14	; 0x06
   1af72:	f7 82       	std	Z+7, r15	; 0x07
   1af74:	8b e1       	ldi	r24, 0x1B	; 27
   1af76:	97 e3       	ldi	r25, 0x37	; 55
   1af78:	a0 e0       	ldi	r26, 0x00	; 0
   1af7a:	81 83       	std	Z+1, r24	; 0x01
   1af7c:	92 83       	std	Z+2, r25	; 0x02
   1af7e:	a3 83       	std	Z+3, r26	; 0x03
   1af80:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>

// Return file size
    return(bytes);
   1af84:	b4 01       	movw	r22, r8
   1af86:	c7 01       	movw	r24, r14
   1af88:	04 c0       	rjmp	.+8      	; 0x1af92 <lif_add_ascii_file_as_e010+0x270>
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
    if(LIF == NULL)
        return(-1);
   1af8a:	6f ef       	ldi	r22, 0xFF	; 255
   1af8c:	7f ef       	ldi	r23, 0xFF	; 255
   1af8e:	8f ef       	ldi	r24, 0xFF	; 255
   1af90:	9f ef       	ldi	r25, 0xFF	; 255

    printf("\tWrote: %8ld\n", bytes);

// Return file size
    return(bytes);
}
   1af92:	eb 96       	adiw	r28, 0x3b	; 59
   1af94:	e2 e1       	ldi	r30, 0x12	; 18
   1af96:	0c 94 d7 e6 	jmp	0x1cdae	; 0x1cdae <__epilogue_restores__>

0001af9a <lif_extract_e010_as_ascii>:
/// @param[in] lifname:  name of file in LIF image
/// @param[in] username: name to call the extracted image
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_e010_as_ascii(char *lifimagename, char *lifname, char *username)
{
   1af9a:	a7 e3       	ldi	r26, 0x37	; 55
   1af9c:	b2 e0       	ldi	r27, 0x02	; 2
   1af9e:	e3 ed       	ldi	r30, 0xD3	; 211
   1afa0:	f7 ed       	ldi	r31, 0xD7	; 215
   1afa2:	0c 94 bb e6 	jmp	0x1cd76	; 0x1cd76 <__prologue_saves__>
   1afa6:	7c 01       	movw	r14, r24
   1afa8:	8b 01       	movw	r16, r22
   1afaa:	ca 5d       	subi	r28, 0xDA	; 218
   1afac:	dd 4f       	sbci	r29, 0xFD	; 253
   1afae:	59 83       	std	Y+1, r21	; 0x01
   1afb0:	48 83       	st	Y, r20
   1afb2:	c6 52       	subi	r28, 0x26	; 38
   1afb4:	d2 40       	sbci	r29, 0x02	; 2
// read buffer
    uint8_t buf[LIF_SECTOR_SIZE+4];
// Write buffer, FYI: will ALWAYS be smaller then the read data buffer
    uint8_t wbuf[LIF_SECTOR_SIZE+4];

    LIF = lif_open_volume(lifimagename,"r");
   1afb6:	62 e4       	ldi	r22, 0x42	; 66
   1afb8:	73 e0       	ldi	r23, 0x03	; 3
   1afba:	5d d9       	rcall	.-3398   	; 0x1a276 <lif_open_volume>
   1afbc:	6c 01       	movw	r12, r24
    if(LIF == NULL)
   1afbe:	00 97       	sbiw	r24, 0x00	; 0
   1afc0:	69 f4       	brne	.+26     	; 0x1afdc <lif_extract_e010_as_ascii+0x42>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1afc2:	ed b7       	in	r30, 0x3d	; 61
   1afc4:	fe b7       	in	r31, 0x3e	; 62
   1afc6:	f5 82       	std	Z+5, r15	; 0x05
   1afc8:	e4 82       	std	Z+4, r14	; 0x04
   1afca:	83 e0       	ldi	r24, 0x03	; 3
   1afcc:	97 e3       	ldi	r25, 0x37	; 55
   1afce:	a0 e0       	ldi	r26, 0x00	; 0
   1afd0:	81 83       	std	Z+1, r24	; 0x01
   1afd2:	92 83       	std	Z+2, r25	; 0x02
   1afd4:	a3 83       	std	Z+3, r26	; 0x03
   1afd6:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   1afda:	13 c0       	rjmp	.+38     	; 0x1b002 <lif_extract_e010_as_ascii+0x68>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1afdc:	b8 01       	movw	r22, r16
   1afde:	20 dc       	rcall	.-1984   	; 0x1a820 <lif_find_file>
    if(index == -1)
   1afe0:	01 96       	adiw	r24, 0x01	; 1
   1afe2:	91 f4       	brne	.+36     	; 0x1b008 <lif_extract_e010_as_ascii+0x6e>
    {
        printf("LIF File not found:%s\n", lifname);
   1afe4:	ed b7       	in	r30, 0x3d	; 61
   1afe6:	fe b7       	in	r31, 0x3e	; 62
   1afe8:	15 83       	std	Z+5, r17	; 0x05
   1afea:	04 83       	std	Z+4, r16	; 0x04
   1afec:	8c ee       	ldi	r24, 0xEC	; 236
   1afee:	96 e3       	ldi	r25, 0x36	; 54
   1aff0:	a0 e0       	ldi	r26, 0x00	; 0
   1aff2:	81 83       	std	Z+1, r24	; 0x01
   1aff4:	92 83       	std	Z+2, r25	; 0x02
   1aff6:	a3 83       	std	Z+3, r26	; 0x03
   1aff8:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1affc:	c6 01       	movw	r24, r12
   1affe:	0e 94 7e ca 	call	0x194fc	; 0x194fc <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("LIF File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1b002:	80 e0       	ldi	r24, 0x00	; 0
   1b004:	90 e0       	ldi	r25, 0x00	; 0
   1b006:	73 c2       	rjmp	.+1254   	; 0x1b4ee <lif_extract_e010_as_ascii+0x554>
    }

    if((LIF->DIR.FileType & 0xFFFC) != 0xE010)
   1b008:	f6 01       	movw	r30, r12
   1b00a:	e6 5a       	subi	r30, 0xA6	; 166
   1b00c:	ff 4f       	sbci	r31, 0xFF	; 255
   1b00e:	80 81       	ld	r24, Z
   1b010:	91 81       	ldd	r25, Z+1	; 0x01
   1b012:	9c 01       	movw	r18, r24
   1b014:	2c 7f       	andi	r18, 0xFC	; 252
   1b016:	20 31       	cpi	r18, 0x10	; 16
   1b018:	30 4e       	sbci	r19, 0xE0	; 224
   1b01a:	a9 f0       	breq	.+42     	; 0x1b046 <lif_extract_e010_as_ascii+0xac>
    {
        printf("File %s has wrong type:[%04XH] expected 0xE010..0xE013\n", username, (int) LIF->DIR.FileType);
   1b01c:	ed b7       	in	r30, 0x3d	; 61
   1b01e:	fe b7       	in	r31, 0x3e	; 62
   1b020:	97 83       	std	Z+7, r25	; 0x07
   1b022:	86 83       	std	Z+6, r24	; 0x06
   1b024:	ca 5d       	subi	r28, 0xDA	; 218
   1b026:	dd 4f       	sbci	r29, 0xFD	; 253
   1b028:	28 81       	ld	r18, Y
   1b02a:	39 81       	ldd	r19, Y+1	; 0x01
   1b02c:	c6 52       	subi	r28, 0x26	; 38
   1b02e:	d2 40       	sbci	r29, 0x02	; 2
   1b030:	35 83       	std	Z+5, r19	; 0x05
   1b032:	24 83       	std	Z+4, r18	; 0x04
   1b034:	84 eb       	ldi	r24, 0xB4	; 180
   1b036:	96 e3       	ldi	r25, 0x36	; 54
   1b038:	a0 e0       	ldi	r26, 0x00	; 0
   1b03a:	81 83       	std	Z+1, r24	; 0x01
   1b03c:	92 83       	std	Z+2, r25	; 0x02
   1b03e:	a3 83       	std	Z+3, r26	; 0x03
   1b040:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   1b044:	db cf       	rjmp	.-74     	; 0x1affc <lif_extract_e010_as_ascii+0x62>
        lif_closedir(LIF);
        return(0);
    }

    start = LIF->DIR.FileStartSector;
   1b046:	f6 01       	movw	r30, r12
   1b048:	e4 5a       	subi	r30, 0xA4	; 164
   1b04a:	ff 4f       	sbci	r31, 0xFF	; 255
   1b04c:	80 80       	ld	r8, Z
   1b04e:	91 80       	ldd	r9, Z+1	; 0x01
   1b050:	a2 80       	ldd	r10, Z+2	; 0x02
   1b052:	b3 80       	ldd	r11, Z+3	; 0x03
    end = start + LIF->DIR.FileSectors;
   1b054:	34 96       	adiw	r30, 0x04	; 4
   1b056:	80 81       	ld	r24, Z
   1b058:	91 81       	ldd	r25, Z+1	; 0x01
   1b05a:	a2 81       	ldd	r26, Z+2	; 0x02
   1b05c:	b3 81       	ldd	r27, Z+3	; 0x03
   1b05e:	a5 01       	movw	r20, r10
   1b060:	94 01       	movw	r18, r8
   1b062:	28 0f       	add	r18, r24
   1b064:	39 1f       	adc	r19, r25
   1b066:	4a 1f       	adc	r20, r26
   1b068:	5b 1f       	adc	r21, r27
   1b06a:	c4 5d       	subi	r28, 0xD4	; 212
   1b06c:	dd 4f       	sbci	r29, 0xFD	; 253
   1b06e:	28 83       	st	Y, r18
   1b070:	39 83       	std	Y+1, r19	; 0x01
   1b072:	4a 83       	std	Y+2, r20	; 0x02
   1b074:	5b 83       	std	Y+3, r21	; 0x03
   1b076:	cc 52       	subi	r28, 0x2C	; 44
   1b078:	d2 40       	sbci	r29, 0x02	; 2

    t = lif_lifbcd2time(LIF->DIR.date);
   1b07a:	c6 01       	movw	r24, r12
   1b07c:	8c 59       	subi	r24, 0x9C	; 156
   1b07e:	9f 4f       	sbci	r25, 0xFF	; 255
   1b080:	0e 94 6e c5 	call	0x18adc	; 0x18adc <lif_lifbcd2time>
   1b084:	c8 5d       	subi	r28, 0xD8	; 216
   1b086:	dd 4f       	sbci	r29, 0xFD	; 253
   1b088:	68 83       	st	Y, r22
   1b08a:	79 83       	std	Y+1, r23	; 0x01
   1b08c:	8a 83       	std	Y+2, r24	; 0x02
   1b08e:	9b 83       	std	Y+3, r25	; 0x03
   1b090:	c8 52       	subi	r28, 0x28	; 40
   1b092:	d2 40       	sbci	r29, 0x02	; 2

    offset = start * (long) LIF_SECTOR_SIZE;
   1b094:	ba 2d       	mov	r27, r10
   1b096:	a9 2d       	mov	r26, r9
   1b098:	98 2d       	mov	r25, r8
   1b09a:	88 27       	eor	r24, r24
   1b09c:	c2 5e       	subi	r28, 0xE2	; 226
   1b09e:	dd 4f       	sbci	r29, 0xFD	; 253
   1b0a0:	88 83       	st	Y, r24
   1b0a2:	99 83       	std	Y+1, r25	; 0x01
   1b0a4:	aa 83       	std	Y+2, r26	; 0x02
   1b0a6:	bb 83       	std	Y+3, r27	; 0x03
   1b0a8:	ce 51       	subi	r28, 0x1E	; 30
   1b0aa:	d2 40       	sbci	r29, 0x02	; 2

    fo = lif_open(username,"wb");
   1b0ac:	6c e0       	ldi	r22, 0x0C	; 12
   1b0ae:	79 e0       	ldi	r23, 0x09	; 9
   1b0b0:	ca 5d       	subi	r28, 0xDA	; 218
   1b0b2:	dd 4f       	sbci	r29, 0xFD	; 253
   1b0b4:	88 81       	ld	r24, Y
   1b0b6:	99 81       	ldd	r25, Y+1	; 0x01
   1b0b8:	c6 52       	subi	r28, 0x26	; 38
   1b0ba:	d2 40       	sbci	r29, 0x02	; 2
   1b0bc:	0e 94 2e c1 	call	0x1825c	; 0x1825c <lif_open>
   1b0c0:	cc 5d       	subi	r28, 0xDC	; 220
   1b0c2:	dd 4f       	sbci	r29, 0xFD	; 253
   1b0c4:	99 83       	std	Y+1, r25	; 0x01
   1b0c6:	88 83       	st	Y, r24
   1b0c8:	c4 52       	subi	r28, 0x24	; 36
   1b0ca:	d2 40       	sbci	r29, 0x02	; 2
    if(fo == NULL)
   1b0cc:	89 2b       	or	r24, r25
   1b0ce:	09 f4       	brne	.+2      	; 0x1b0d2 <lif_extract_e010_as_ascii+0x138>
   1b0d0:	95 cf       	rjmp	.-214    	; 0x1affc <lif_extract_e010_as_ascii+0x62>
    {
        lif_closedir(LIF);
        return(0);
    }

    printf("Extracting: %s\n", username);
   1b0d2:	ca 5d       	subi	r28, 0xDA	; 218
   1b0d4:	dd 4f       	sbci	r29, 0xFD	; 253
   1b0d6:	28 81       	ld	r18, Y
   1b0d8:	39 81       	ldd	r19, Y+1	; 0x01
   1b0da:	c6 52       	subi	r28, 0x26	; 38
   1b0dc:	d2 40       	sbci	r29, 0x02	; 2
   1b0de:	ed b7       	in	r30, 0x3d	; 61
   1b0e0:	fe b7       	in	r31, 0x3e	; 62
   1b0e2:	35 83       	std	Z+5, r19	; 0x05
   1b0e4:	24 83       	std	Z+4, r18	; 0x04
   1b0e6:	84 ea       	ldi	r24, 0xA4	; 164
   1b0e8:	96 e3       	ldi	r25, 0x36	; 54
   1b0ea:	a0 e0       	ldi	r26, 0x00	; 0
   1b0ec:	81 83       	std	Z+1, r24	; 0x01
   1b0ee:	92 83       	std	Z+2, r25	; 0x02
   1b0f0:	a3 83       	std	Z+3, r26	; 0x03
   1b0f2:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>

    bytes = 0;
    wind = 0;
   1b0f6:	21 2c       	mov	r2, r1
   1b0f8:	31 2c       	mov	r3, r1
    uint32_t start, end;                          // sectors
    long offset, bytes;                           // bytes
    int index;
    int i, len,size;
    int status = 1;
    int done = 0;
   1b0fa:	ce 5d       	subi	r28, 0xDE	; 222
   1b0fc:	dd 4f       	sbci	r29, 0xFD	; 253
   1b0fe:	19 82       	std	Y+1, r1	; 0x01
   1b100:	18 82       	st	Y, r1
   1b102:	c2 52       	subi	r28, 0x22	; 34
   1b104:	d2 40       	sbci	r29, 0x02	; 2
    lif_t *LIF;
    uint32_t start, end;                          // sectors
    long offset, bytes;                           // bytes
    int index;
    int i, len,size;
    int status = 1;
   1b106:	ee 24       	eor	r14, r14
   1b108:	e3 94       	inc	r14
   1b10a:	f1 2c       	mov	r15, r1
        return(0);
    }

    printf("Extracting: %s\n", username);

    bytes = 0;
   1b10c:	41 2c       	mov	r4, r1
   1b10e:	51 2c       	mov	r5, r1
   1b110:	32 01       	movw	r6, r4
                        status = 0;
                        done = 1;
                        break;
                    }
                    bytes += size;
                    printf("\tWrote: %8ld\r", bytes);
   1b112:	83 ee       	ldi	r24, 0xE3	; 227
   1b114:	95 e3       	ldi	r25, 0x35	; 53
   1b116:	9c 01       	movw	r18, r24
   1b118:	40 e0       	ldi	r20, 0x00	; 0
   1b11a:	ce 5c       	subi	r28, 0xCE	; 206
   1b11c:	dd 4f       	sbci	r29, 0xFD	; 253
   1b11e:	28 83       	st	Y, r18
   1b120:	39 83       	std	Y+1, r19	; 0x01
   1b122:	4a 83       	std	Y+2, r20	; 0x02
   1b124:	c2 53       	subi	r28, 0x32	; 50
   1b126:	d2 40       	sbci	r29, 0x02	; 2
                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1b128:	81 ef       	ldi	r24, 0xF1	; 241
   1b12a:	95 e3       	ldi	r25, 0x35	; 53
   1b12c:	9c 01       	movw	r18, r24
   1b12e:	40 e0       	ldi	r20, 0x00	; 0
   1b130:	cb 5c       	subi	r28, 0xCB	; 203
   1b132:	dd 4f       	sbci	r29, 0xFD	; 253
   1b134:	28 83       	st	Y, r18
   1b136:	39 83       	std	Y+1, r19	; 0x01
   1b138:	4a 83       	std	Y+2, r20	; 0x02
   1b13a:	c5 53       	subi	r28, 0x35	; 53
   1b13c:	d2 40       	sbci	r29, 0x02	; 2

    bytes = 0;
    wind = 0;
    ind = 0;

    while(lif_bytes2sectors(offset) <= end)
   1b13e:	c2 5e       	subi	r28, 0xE2	; 226
   1b140:	dd 4f       	sbci	r29, 0xFD	; 253
   1b142:	28 81       	ld	r18, Y
   1b144:	39 81       	ldd	r19, Y+1	; 0x01
   1b146:	4a 81       	ldd	r20, Y+2	; 0x02
   1b148:	5b 81       	ldd	r21, Y+3	; 0x03
   1b14a:	ce 51       	subi	r28, 0x1E	; 30
   1b14c:	d2 40       	sbci	r29, 0x02	; 2
   1b14e:	bb 27       	eor	r27, r27
   1b150:	a5 2f       	mov	r26, r21
   1b152:	94 2f       	mov	r25, r20
   1b154:	83 2f       	mov	r24, r19
   1b156:	c4 5d       	subi	r28, 0xD4	; 212
   1b158:	dd 4f       	sbci	r29, 0xFD	; 253
   1b15a:	28 81       	ld	r18, Y
   1b15c:	39 81       	ldd	r19, Y+1	; 0x01
   1b15e:	4a 81       	ldd	r20, Y+2	; 0x02
   1b160:	5b 81       	ldd	r21, Y+3	; 0x03
   1b162:	cc 52       	subi	r28, 0x2C	; 44
   1b164:	d2 40       	sbci	r29, 0x02	; 2
   1b166:	28 17       	cp	r18, r24
   1b168:	39 07       	cpc	r19, r25
   1b16a:	4a 07       	cpc	r20, r26
   1b16c:	5b 07       	cpc	r21, r27
   1b16e:	08 f4       	brcc	.+2      	; 0x1b172 <lif_extract_e010_as_ascii+0x1d8>
   1b170:	51 c1       	rjmp	.+674    	; 0x1b414 <lif_extract_e010_as_ascii+0x47a>
    {
// LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
   1b172:	00 e0       	ldi	r16, 0x00	; 0
   1b174:	11 e0       	ldi	r17, 0x01	; 1
   1b176:	c2 5e       	subi	r28, 0xE2	; 226
   1b178:	dd 4f       	sbci	r29, 0xFD	; 253
   1b17a:	28 81       	ld	r18, Y
   1b17c:	39 81       	ldd	r19, Y+1	; 0x01
   1b17e:	4a 81       	ldd	r20, Y+2	; 0x02
   1b180:	5b 81       	ldd	r21, Y+3	; 0x03
   1b182:	ce 51       	subi	r28, 0x1E	; 30
   1b184:	d2 40       	sbci	r29, 0x02	; 2
   1b186:	be 01       	movw	r22, r28
   1b188:	60 5f       	subi	r22, 0xF0	; 240
   1b18a:	7e 4f       	sbci	r23, 0xFE	; 254
   1b18c:	c6 01       	movw	r24, r12
   1b18e:	0e 94 b2 c1 	call	0x18364	; 0x18364 <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1b192:	6f 3f       	cpi	r22, 0xFF	; 255
   1b194:	71 05       	cpc	r23, r1
   1b196:	09 f0       	breq	.+2      	; 0x1b19a <lif_extract_e010_as_ascii+0x200>
   1b198:	0c f4       	brge	.+2      	; 0x1b19c <lif_extract_e010_as_ascii+0x202>
   1b19a:	3a c1       	rjmp	.+628    	; 0x1b410 <lif_extract_e010_as_ascii+0x476>
   1b19c:	00 e0       	ldi	r16, 0x00	; 0
   1b19e:	10 e0       	ldi	r17, 0x00	; 0
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1b1a0:	ce 5d       	subi	r28, 0xDE	; 222
   1b1a2:	dd 4f       	sbci	r29, 0xFD	; 253
   1b1a4:	88 81       	ld	r24, Y
   1b1a6:	99 81       	ldd	r25, Y+1	; 0x01
   1b1a8:	c2 52       	subi	r28, 0x22	; 34
   1b1aa:	d2 40       	sbci	r29, 0x02	; 2
   1b1ac:	89 2b       	or	r24, r25
   1b1ae:	09 f0       	breq	.+2      	; 0x1b1b2 <lif_extract_e010_as_ascii+0x218>
   1b1b0:	1b c1       	rjmp	.+566    	; 0x1b3e8 <lif_extract_e010_as_ascii+0x44e>
        {
            if(buf[ind] == 0xDF || buf[ind] == 0xCF || buf[ind] == 0x6F)
   1b1b2:	e0 e1       	ldi	r30, 0x10	; 16
   1b1b4:	f1 e0       	ldi	r31, 0x01	; 1
   1b1b6:	ec 0f       	add	r30, r28
   1b1b8:	fd 1f       	adc	r31, r29
   1b1ba:	e0 0f       	add	r30, r16
   1b1bc:	f1 1f       	adc	r31, r17
   1b1be:	80 81       	ld	r24, Z
   1b1c0:	98 2f       	mov	r25, r24
   1b1c2:	9f 7e       	andi	r25, 0xEF	; 239
   1b1c4:	9f 3c       	cpi	r25, 0xCF	; 207
   1b1c6:	11 f0       	breq	.+4      	; 0x1b1cc <lif_extract_e010_as_ascii+0x232>
   1b1c8:	8f 36       	cpi	r24, 0x6F	; 111
   1b1ca:	c9 f5       	brne	.+114    	; 0x1b23e <lif_extract_e010_as_ascii+0x2a4>
            {
                ++ind;
                len = buf[ind++] & 0xff;
   1b1cc:	e0 e1       	ldi	r30, 0x10	; 16
   1b1ce:	f1 e0       	ldi	r31, 0x01	; 1
   1b1d0:	ec 0f       	add	r30, r28
   1b1d2:	fd 1f       	adc	r31, r29
   1b1d4:	e0 0f       	add	r30, r16
   1b1d6:	f1 1f       	adc	r31, r17
   1b1d8:	a1 80       	ldd	r10, Z+1	; 0x01
                len |= ((buf[ind++] & 0xff) <<8);
   1b1da:	f8 01       	movw	r30, r16
   1b1dc:	32 96       	adiw	r30, 0x02	; 2
   1b1de:	40 e1       	ldi	r20, 0x10	; 16
   1b1e0:	51 e0       	ldi	r21, 0x01	; 1
   1b1e2:	4c 0f       	add	r20, r28
   1b1e4:	5d 1f       	adc	r21, r29
   1b1e6:	e4 0f       	add	r30, r20
   1b1e8:	f5 1f       	adc	r31, r21
   1b1ea:	0d 5f       	subi	r16, 0xFD	; 253
   1b1ec:	1f 4f       	sbci	r17, 0xFF	; 255
   1b1ee:	80 81       	ld	r24, Z
   1b1f0:	b1 2c       	mov	r11, r1
   1b1f2:	b8 2a       	or	r11, r24
// EOF ?
                if(len == 0)
   1b1f4:	a1 14       	cp	r10, r1
   1b1f6:	b1 04       	cpc	r11, r1
   1b1f8:	09 f4       	brne	.+2      	; 0x1b1fc <lif_extract_e010_as_ascii+0x262>
   1b1fa:	ee c0       	rjmp	.+476    	; 0x1b3d8 <lif_extract_e010_as_ascii+0x43e>
                {
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
   1b1fc:	5f ef       	ldi	r21, 0xFF	; 255
   1b1fe:	a5 16       	cp	r10, r21
   1b200:	b1 04       	cpc	r11, r1
   1b202:	09 f0       	breq	.+2      	; 0x1b206 <lif_extract_e010_as_ascii+0x26c>
   1b204:	7c f4       	brge	.+30     	; 0x1b224 <lif_extract_e010_as_ascii+0x28a>
   1b206:	c4 5e       	subi	r28, 0xE4	; 228
   1b208:	dd 4f       	sbci	r29, 0xFD	; 253
   1b20a:	19 82       	std	Y+1, r1	; 0x01
   1b20c:	18 82       	st	Y, r1
   1b20e:	cc 51       	subi	r28, 0x1C	; 28
   1b210:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
   1b212:	c5 01       	movw	r24, r10
   1b214:	01 97       	sbiw	r24, 0x01	; 1
   1b216:	c0 5d       	subi	r28, 0xD0	; 208
   1b218:	dd 4f       	sbci	r29, 0xFD	; 253
   1b21a:	99 83       	std	Y+1, r25	; 0x01
   1b21c:	88 83       	st	Y, r24
   1b21e:	c0 53       	subi	r28, 0x30	; 48
   1b220:	d2 40       	sbci	r29, 0x02	; 2
   1b222:	68 c0       	rjmp	.+208    	; 0x1b2f4 <lif_extract_e010_as_ascii+0x35a>
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
                {
                    printf("lif_extract_e010_as_ascii: string too big size = %d\n", (int)len);
   1b224:	ed b7       	in	r30, 0x3d	; 61
   1b226:	fe b7       	in	r31, 0x3e	; 62
   1b228:	b5 82       	std	Z+5, r11	; 0x05
   1b22a:	a4 82       	std	Z+4, r10	; 0x04
   1b22c:	8f e6       	ldi	r24, 0x6F	; 111
   1b22e:	96 e3       	ldi	r25, 0x36	; 54
   1b230:	a0 e0       	ldi	r26, 0x00	; 0
   1b232:	81 83       	std	Z+1, r24	; 0x01
   1b234:	92 83       	std	Z+2, r25	; 0x02
   1b236:	a3 83       	std	Z+3, r26	; 0x03
   1b238:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   1b23c:	1e c0       	rjmp	.+60     	; 0x1b27a <lif_extract_e010_as_ascii+0x2e0>
                    status = 0;
                    done = 1;
                    break;
                }
            }
            else if(buf[ind] == 0xEF)
   1b23e:	8f 3e       	cpi	r24, 0xEF	; 239
   1b240:	09 f4       	brne	.+2      	; 0x1b244 <lif_extract_e010_as_ascii+0x2aa>
   1b242:	d2 c0       	rjmp	.+420    	; 0x1b3e8 <lif_extract_e010_as_ascii+0x44e>
                ind = 0;
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
   1b244:	ed b7       	in	r30, 0x3d	; 61
   1b246:	fe b7       	in	r31, 0x3e	; 62
   1b248:	13 87       	std	Z+11, r17	; 0x0b
   1b24a:	02 87       	std	Z+10, r16	; 0x0a
   1b24c:	c2 5e       	subi	r28, 0xE2	; 226
   1b24e:	dd 4f       	sbci	r29, 0xFD	; 253
   1b250:	28 81       	ld	r18, Y
   1b252:	39 81       	ldd	r19, Y+1	; 0x01
   1b254:	4a 81       	ldd	r20, Y+2	; 0x02
   1b256:	5b 81       	ldd	r21, Y+3	; 0x03
   1b258:	ce 51       	subi	r28, 0x1E	; 30
   1b25a:	d2 40       	sbci	r29, 0x02	; 2
   1b25c:	26 83       	std	Z+6, r18	; 0x06
   1b25e:	37 83       	std	Z+7, r19	; 0x07
   1b260:	40 87       	std	Z+8, r20	; 0x08
   1b262:	51 87       	std	Z+9, r21	; 0x09
   1b264:	90 e0       	ldi	r25, 0x00	; 0
   1b266:	95 83       	std	Z+5, r25	; 0x05
   1b268:	84 83       	std	Z+4, r24	; 0x04
   1b26a:	89 e1       	ldi	r24, 0x19	; 25
   1b26c:	96 e3       	ldi	r25, 0x36	; 54
   1b26e:	a0 e0       	ldi	r26, 0x00	; 0
   1b270:	81 83       	std	Z+1, r24	; 0x01
   1b272:	92 83       	std	Z+2, r25	; 0x02
   1b274:	a3 83       	std	Z+3, r26	; 0x03
   1b276:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
                status = 0;
                done = 1;
   1b27a:	21 e0       	ldi	r18, 0x01	; 1
   1b27c:	30 e0       	ldi	r19, 0x00	; 0
   1b27e:	ce 5d       	subi	r28, 0xDE	; 222
   1b280:	dd 4f       	sbci	r29, 0xFD	; 253
   1b282:	39 83       	std	Y+1, r19	; 0x01
   1b284:	28 83       	st	Y, r18
   1b286:	c2 52       	subi	r28, 0x22	; 34
   1b288:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
                status = 0;
   1b28a:	e1 2c       	mov	r14, r1
   1b28c:	f1 2c       	mov	r15, r1
                done = 1;
                break;
   1b28e:	ac c0       	rjmp	.+344    	; 0x1b3e8 <lif_extract_e010_as_ascii+0x44e>
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1b290:	0f 3f       	cpi	r16, 0xFF	; 255
   1b292:	11 05       	cpc	r17, r1
   1b294:	11 f0       	breq	.+4      	; 0x1b29a <lif_extract_e010_as_ascii+0x300>
   1b296:	0c f0       	brlt	.+2      	; 0x1b29a <lif_extract_e010_as_ascii+0x300>
   1b298:	a7 c0       	rjmp	.+334    	; 0x1b3e8 <lif_extract_e010_as_ascii+0x44e>
            {
                if(buf[ind] == '\r' && i == len-1)
   1b29a:	e0 e1       	ldi	r30, 0x10	; 16
   1b29c:	f1 e0       	ldi	r31, 0x01	; 1
   1b29e:	ec 0f       	add	r30, r28
   1b2a0:	fd 1f       	adc	r31, r29
   1b2a2:	e0 0f       	add	r30, r16
   1b2a4:	f1 1f       	adc	r31, r17
   1b2a6:	20 81       	ld	r18, Z
   1b2a8:	a1 01       	movw	r20, r2
   1b2aa:	4f 5f       	subi	r20, 0xFF	; 255
   1b2ac:	5f 4f       	sbci	r21, 0xFF	; 255
   1b2ae:	4a 01       	movw	r8, r20
   1b2b0:	2d 30       	cpi	r18, 0x0D	; 13
   1b2b2:	51 f1       	breq	.+84     	; 0x1b308 <lif_extract_e010_as_ascii+0x36e>
                    ++ind;
                    break;
                }
                else
                {
                    wbuf[wind++] = buf[ind++];
   1b2b4:	98 2d       	mov	r25, r8
   1b2b6:	89 2d       	mov	r24, r9
   1b2b8:	0f 5f       	subi	r16, 0xFF	; 255
   1b2ba:	1f 4f       	sbci	r17, 0xFF	; 255
   1b2bc:	ec e0       	ldi	r30, 0x0C	; 12
   1b2be:	f0 e0       	ldi	r31, 0x00	; 0
   1b2c0:	ec 0f       	add	r30, r28
   1b2c2:	fd 1f       	adc	r31, r29
   1b2c4:	e2 0d       	add	r30, r2
   1b2c6:	f3 1d       	adc	r31, r3
   1b2c8:	20 83       	st	Z, r18
                }

                if(wind >= LIF_SECTOR_SIZE)
   1b2ca:	ef ef       	ldi	r30, 0xFF	; 255
   1b2cc:	8e 16       	cp	r8, r30
   1b2ce:	91 04       	cpc	r9, r1
   1b2d0:	09 f0       	breq	.+2      	; 0x1b2d4 <lif_extract_e010_as_ascii+0x33a>
   1b2d2:	ac f5       	brge	.+106    	; 0x1b33e <lif_extract_e010_as_ascii+0x3a4>
                status = 0;
                done = 1;
                break;
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1b2d4:	c4 5e       	subi	r28, 0xE4	; 228
   1b2d6:	dd 4f       	sbci	r29, 0xFD	; 253
   1b2d8:	28 81       	ld	r18, Y
   1b2da:	39 81       	ldd	r19, Y+1	; 0x01
   1b2dc:	cc 51       	subi	r28, 0x1C	; 28
   1b2de:	d2 40       	sbci	r29, 0x02	; 2
   1b2e0:	2f 5f       	subi	r18, 0xFF	; 255
   1b2e2:	3f 4f       	sbci	r19, 0xFF	; 255
   1b2e4:	c4 5e       	subi	r28, 0xE4	; 228
   1b2e6:	dd 4f       	sbci	r29, 0xFD	; 253
   1b2e8:	39 83       	std	Y+1, r19	; 0x01
   1b2ea:	28 83       	st	Y, r18
   1b2ec:	cc 51       	subi	r28, 0x1C	; 28
   1b2ee:	d2 40       	sbci	r29, 0x02	; 2
   1b2f0:	29 2e       	mov	r2, r25
   1b2f2:	38 2e       	mov	r3, r24
   1b2f4:	c4 5e       	subi	r28, 0xE4	; 228
   1b2f6:	dd 4f       	sbci	r29, 0xFD	; 253
   1b2f8:	48 81       	ld	r20, Y
   1b2fa:	59 81       	ldd	r21, Y+1	; 0x01
   1b2fc:	cc 51       	subi	r28, 0x1C	; 28
   1b2fe:	d2 40       	sbci	r29, 0x02	; 2
   1b300:	4a 15       	cp	r20, r10
   1b302:	5b 05       	cpc	r21, r11
   1b304:	2c f2       	brlt	.-118    	; 0x1b290 <lif_extract_e010_as_ascii+0x2f6>
   1b306:	62 c0       	rjmp	.+196    	; 0x1b3cc <lif_extract_e010_as_ascii+0x432>
            {
                if(buf[ind] == '\r' && i == len-1)
   1b308:	c4 5e       	subi	r28, 0xE4	; 228
   1b30a:	dd 4f       	sbci	r29, 0xFD	; 253
   1b30c:	88 81       	ld	r24, Y
   1b30e:	99 81       	ldd	r25, Y+1	; 0x01
   1b310:	cc 51       	subi	r28, 0x1C	; 28
   1b312:	d2 40       	sbci	r29, 0x02	; 2
   1b314:	c0 5d       	subi	r28, 0xD0	; 208
   1b316:	dd 4f       	sbci	r29, 0xFD	; 253
   1b318:	a8 81       	ld	r26, Y
   1b31a:	b9 81       	ldd	r27, Y+1	; 0x01
   1b31c:	c0 53       	subi	r28, 0x30	; 48
   1b31e:	d2 40       	sbci	r29, 0x02	; 2
   1b320:	8a 17       	cp	r24, r26
   1b322:	9b 07       	cpc	r25, r27
   1b324:	39 f6       	brne	.-114    	; 0x1b2b4 <lif_extract_e010_as_ascii+0x31a>
                {
                    wbuf[wind++] = '\n';
   1b326:	ec e0       	ldi	r30, 0x0C	; 12
   1b328:	f0 e0       	ldi	r31, 0x00	; 0
   1b32a:	ec 0f       	add	r30, r28
   1b32c:	fd 1f       	adc	r31, r29
   1b32e:	e2 0d       	add	r30, r2
   1b330:	f3 1d       	adc	r31, r3
   1b332:	ba e0       	ldi	r27, 0x0A	; 10
   1b334:	b0 83       	st	Z, r27
                    ++ind;
   1b336:	0f 5f       	subi	r16, 0xFF	; 255
   1b338:	1f 4f       	sbci	r17, 0xFF	; 255
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
                {
                    wbuf[wind++] = '\n';
   1b33a:	1a 01       	movw	r2, r20
                    ++ind;
                    break;
   1b33c:	47 c0       	rjmp	.+142    	; 0x1b3cc <lif_extract_e010_as_ascii+0x432>
                    wbuf[wind++] = buf[ind++];
                }

                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
   1b33e:	cc 5d       	subi	r28, 0xDC	; 220
   1b340:	dd 4f       	sbci	r29, 0xFD	; 253
   1b342:	28 81       	ld	r18, Y
   1b344:	39 81       	ldd	r19, Y+1	; 0x01
   1b346:	c4 52       	subi	r28, 0x24	; 36
   1b348:	d2 40       	sbci	r29, 0x02	; 2
   1b34a:	a4 01       	movw	r20, r8
   1b34c:	61 e0       	ldi	r22, 0x01	; 1
   1b34e:	70 e0       	ldi	r23, 0x00	; 0
   1b350:	ce 01       	movw	r24, r28
   1b352:	0c 96       	adiw	r24, 0x0c	; 12
   1b354:	0e 94 52 7c 	call	0xf8a4	; 0xf8a4 <fwrite>
                    if(size < wind)
   1b358:	88 15       	cp	r24, r8
   1b35a:	99 05       	cpc	r25, r9
   1b35c:	d4 f4       	brge	.+52     	; 0x1b392 <lif_extract_e010_as_ascii+0x3f8>
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1b35e:	cb 5c       	subi	r28, 0xCB	; 203
   1b360:	dd 4f       	sbci	r29, 0xFD	; 253
   1b362:	28 81       	ld	r18, Y
   1b364:	39 81       	ldd	r19, Y+1	; 0x01
   1b366:	4a 81       	ldd	r20, Y+2	; 0x02
   1b368:	c5 53       	subi	r28, 0x35	; 53
   1b36a:	d2 40       	sbci	r29, 0x02	; 2
   1b36c:	ed b7       	in	r30, 0x3d	; 61
   1b36e:	fe b7       	in	r31, 0x3e	; 62
   1b370:	21 83       	std	Z+1, r18	; 0x01
   1b372:	32 83       	std	Z+2, r19	; 0x02
   1b374:	43 83       	std	Z+3, r20	; 0x03
   1b376:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
                    ++ind;
                    break;
                }
                else
                {
                    wbuf[wind++] = buf[ind++];
   1b37a:	14 01       	movw	r2, r8
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
                        done = 1;
   1b37c:	21 e0       	ldi	r18, 0x01	; 1
   1b37e:	30 e0       	ldi	r19, 0x00	; 0
   1b380:	ce 5d       	subi	r28, 0xDE	; 222
   1b382:	dd 4f       	sbci	r29, 0xFD	; 253
   1b384:	39 83       	std	Y+1, r19	; 0x01
   1b386:	28 83       	st	Y, r18
   1b388:	c2 52       	subi	r28, 0x22	; 34
   1b38a:	d2 40       	sbci	r29, 0x02	; 2
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
   1b38c:	e1 2c       	mov	r14, r1
   1b38e:	f1 2c       	mov	r15, r1
                        done = 1;
                        break;
   1b390:	1d c0       	rjmp	.+58     	; 0x1b3cc <lif_extract_e010_as_ascii+0x432>
                    }
                    bytes += size;
   1b392:	09 2e       	mov	r0, r25
   1b394:	00 0c       	add	r0, r0
   1b396:	aa 0b       	sbc	r26, r26
   1b398:	bb 0b       	sbc	r27, r27
   1b39a:	48 0e       	add	r4, r24
   1b39c:	59 1e       	adc	r5, r25
   1b39e:	6a 1e       	adc	r6, r26
   1b3a0:	7b 1e       	adc	r7, r27
                    printf("\tWrote: %8ld\r", bytes);
   1b3a2:	ed b7       	in	r30, 0x3d	; 61
   1b3a4:	fe b7       	in	r31, 0x3e	; 62
   1b3a6:	44 82       	std	Z+4, r4	; 0x04
   1b3a8:	55 82       	std	Z+5, r5	; 0x05
   1b3aa:	66 82       	std	Z+6, r6	; 0x06
   1b3ac:	77 82       	std	Z+7, r7	; 0x07
   1b3ae:	ce 5c       	subi	r28, 0xCE	; 206
   1b3b0:	dd 4f       	sbci	r29, 0xFD	; 253
   1b3b2:	28 81       	ld	r18, Y
   1b3b4:	39 81       	ldd	r19, Y+1	; 0x01
   1b3b6:	4a 81       	ldd	r20, Y+2	; 0x02
   1b3b8:	c2 53       	subi	r28, 0x32	; 50
   1b3ba:	d2 40       	sbci	r29, 0x02	; 2
   1b3bc:	21 83       	std	Z+1, r18	; 0x01
   1b3be:	32 83       	std	Z+2, r19	; 0x02
   1b3c0:	43 83       	std	Z+3, r20	; 0x03
   1b3c2:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
                    wind = 0;
   1b3c6:	90 e0       	ldi	r25, 0x00	; 0
   1b3c8:	80 e0       	ldi	r24, 0x00	; 0
   1b3ca:	84 cf       	rjmp	.-248    	; 0x1b2d4 <lif_extract_e010_as_ascii+0x33a>
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1b3cc:	0f 3f       	cpi	r16, 0xFF	; 255
   1b3ce:	11 05       	cpc	r17, r1
   1b3d0:	09 f0       	breq	.+2      	; 0x1b3d4 <lif_extract_e010_as_ascii+0x43a>
   1b3d2:	0c f4       	brge	.+2      	; 0x1b3d6 <lif_extract_e010_as_ascii+0x43c>
   1b3d4:	e5 ce       	rjmp	.-566    	; 0x1b1a0 <lif_extract_e010_as_ascii+0x206>
   1b3d6:	08 c0       	rjmp	.+16     	; 0x1b3e8 <lif_extract_e010_as_ascii+0x44e>
                len = buf[ind++] & 0xff;
                len |= ((buf[ind++] & 0xff) <<8);
// EOF ?
                if(len == 0)
                {
                    done = 1;
   1b3d8:	a1 e0       	ldi	r26, 0x01	; 1
   1b3da:	b0 e0       	ldi	r27, 0x00	; 0
   1b3dc:	ce 5d       	subi	r28, 0xDE	; 222
   1b3de:	dd 4f       	sbci	r29, 0xFD	; 253
   1b3e0:	b9 83       	std	Y+1, r27	; 0x01
   1b3e2:	a8 83       	st	Y, r26
   1b3e4:	c2 52       	subi	r28, 0x22	; 34
   1b3e6:	d2 40       	sbci	r29, 0x02	; 2

            }                                     // for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)

        }                                         // while(ind < LIF_SECTOR_SIZE && status)

        offset += (long) LIF_SECTOR_SIZE;
   1b3e8:	c2 5e       	subi	r28, 0xE2	; 226
   1b3ea:	dd 4f       	sbci	r29, 0xFD	; 253
   1b3ec:	28 81       	ld	r18, Y
   1b3ee:	39 81       	ldd	r19, Y+1	; 0x01
   1b3f0:	4a 81       	ldd	r20, Y+2	; 0x02
   1b3f2:	5b 81       	ldd	r21, Y+3	; 0x03
   1b3f4:	ce 51       	subi	r28, 0x1E	; 30
   1b3f6:	d2 40       	sbci	r29, 0x02	; 2
   1b3f8:	3f 5f       	subi	r19, 0xFF	; 255
   1b3fa:	4f 4f       	sbci	r20, 0xFF	; 255
   1b3fc:	5f 4f       	sbci	r21, 0xFF	; 255
   1b3fe:	c2 5e       	subi	r28, 0xE2	; 226
   1b400:	dd 4f       	sbci	r29, 0xFD	; 253
   1b402:	28 83       	st	Y, r18
   1b404:	39 83       	std	Y+1, r19	; 0x01
   1b406:	4a 83       	std	Y+2, r20	; 0x02
   1b408:	5b 83       	std	Y+3, r21	; 0x03
   1b40a:	ce 51       	subi	r28, 0x1E	; 30
   1b40c:	d2 40       	sbci	r29, 0x02	; 2
   1b40e:	97 ce       	rjmp	.-722    	; 0x1b13e <lif_extract_e010_as_ascii+0x1a4>
    {
// LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
        if(size < LIF_SECTOR_SIZE)
        {
            status = 0;
   1b410:	e1 2c       	mov	r14, r1
   1b412:	f1 2c       	mov	r15, r1
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b414:	c6 01       	movw	r24, r12
   1b416:	0e 94 7e ca 	call	0x194fc	; 0x194fc <lif_close_volume>

    }                                             // while(offset <= end)

    lif_closedir(LIF);
// Flush any remaining bytes
    if(wind)
   1b41a:	21 14       	cp	r2, r1
   1b41c:	31 04       	cpc	r3, r1
   1b41e:	31 f1       	breq	.+76     	; 0x1b46c <lif_extract_e010_as_ascii+0x4d2>
    {
        size = fwrite(wbuf,1,wind,fo);
   1b420:	cc 5d       	subi	r28, 0xDC	; 220
   1b422:	dd 4f       	sbci	r29, 0xFD	; 253
   1b424:	28 81       	ld	r18, Y
   1b426:	39 81       	ldd	r19, Y+1	; 0x01
   1b428:	c4 52       	subi	r28, 0x24	; 36
   1b42a:	d2 40       	sbci	r29, 0x02	; 2
   1b42c:	a1 01       	movw	r20, r2
   1b42e:	61 e0       	ldi	r22, 0x01	; 1
   1b430:	70 e0       	ldi	r23, 0x00	; 0
   1b432:	ce 01       	movw	r24, r28
   1b434:	0c 96       	adiw	r24, 0x0c	; 12
   1b436:	0e 94 52 7c 	call	0xf8a4	; 0xf8a4 <fwrite>
   1b43a:	8c 01       	movw	r16, r24
        if(size < wind)
   1b43c:	82 15       	cp	r24, r2
   1b43e:	93 05       	cpc	r25, r3
   1b440:	64 f4       	brge	.+24     	; 0x1b45a <lif_extract_e010_as_ascii+0x4c0>
        {
            printf("lif_extract_e010_as_ascii: write error\n");
   1b442:	8b eb       	ldi	r24, 0xBB	; 187
   1b444:	95 e3       	ldi	r25, 0x35	; 53
   1b446:	a0 e0       	ldi	r26, 0x00	; 0
   1b448:	ed b7       	in	r30, 0x3d	; 61
   1b44a:	fe b7       	in	r31, 0x3e	; 62
   1b44c:	81 83       	std	Z+1, r24	; 0x01
   1b44e:	92 83       	std	Z+2, r25	; 0x02
   1b450:	a3 83       	std	Z+3, r26	; 0x03
   1b452:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
            status = 0;
   1b456:	e1 2c       	mov	r14, r1
   1b458:	f1 2c       	mov	r15, r1
        }
        bytes += size;
   1b45a:	c8 01       	movw	r24, r16
   1b45c:	01 2e       	mov	r0, r17
   1b45e:	00 0c       	add	r0, r0
   1b460:	aa 0b       	sbc	r26, r26
   1b462:	bb 0b       	sbc	r27, r27
   1b464:	48 0e       	add	r4, r24
   1b466:	59 1e       	adc	r5, r25
   1b468:	6a 1e       	adc	r6, r26
   1b46a:	7b 1e       	adc	r7, r27
    }
    fclose(fo);
   1b46c:	cc 5d       	subi	r28, 0xDC	; 220
   1b46e:	dd 4f       	sbci	r29, 0xFD	; 253
   1b470:	88 81       	ld	r24, Y
   1b472:	99 81       	ldd	r25, Y+1	; 0x01
   1b474:	c4 52       	subi	r28, 0x24	; 36
   1b476:	d2 40       	sbci	r29, 0x02	; 2
   1b478:	0e 94 d4 7c 	call	0xf9a8	; 0xf9a8 <fclose>
    if(t)
   1b47c:	c8 5d       	subi	r28, 0xD8	; 216
   1b47e:	dd 4f       	sbci	r29, 0xFD	; 253
   1b480:	28 81       	ld	r18, Y
   1b482:	39 81       	ldd	r19, Y+1	; 0x01
   1b484:	4a 81       	ldd	r20, Y+2	; 0x02
   1b486:	5b 81       	ldd	r21, Y+3	; 0x03
   1b488:	c8 52       	subi	r28, 0x28	; 40
   1b48a:	d2 40       	sbci	r29, 0x02	; 2
   1b48c:	21 15       	cp	r18, r1
   1b48e:	31 05       	cpc	r19, r1
   1b490:	41 05       	cpc	r20, r1
   1b492:	51 05       	cpc	r21, r1
   1b494:	d9 f0       	breq	.+54     	; 0x1b4cc <lif_extract_e010_as_ascii+0x532>
    {
        struct utimbuf times;
        times.modtime = t;
   1b496:	c8 5e       	subi	r28, 0xE8	; 232
   1b498:	dd 4f       	sbci	r29, 0xFD	; 253
   1b49a:	28 83       	st	Y, r18
   1b49c:	39 83       	std	Y+1, r19	; 0x01
   1b49e:	4a 83       	std	Y+2, r20	; 0x02
   1b4a0:	5b 83       	std	Y+3, r21	; 0x03
   1b4a2:	c8 51       	subi	r28, 0x18	; 24
   1b4a4:	d2 40       	sbci	r29, 0x02	; 2
        times.actime = t;
   1b4a6:	cc 5e       	subi	r28, 0xEC	; 236
   1b4a8:	dd 4f       	sbci	r29, 0xFD	; 253
   1b4aa:	28 83       	st	Y, r18
   1b4ac:	39 83       	std	Y+1, r19	; 0x01
   1b4ae:	4a 83       	std	Y+2, r20	; 0x02
   1b4b0:	5b 83       	std	Y+3, r21	; 0x03
   1b4b2:	c4 51       	subi	r28, 0x14	; 20
   1b4b4:	d2 40       	sbci	r29, 0x02	; 2
        utime(username, (struct utimbuf *) &times);
   1b4b6:	be 01       	movw	r22, r28
   1b4b8:	6c 5e       	subi	r22, 0xEC	; 236
   1b4ba:	7d 4f       	sbci	r23, 0xFD	; 253
   1b4bc:	ca 5d       	subi	r28, 0xDA	; 218
   1b4be:	dd 4f       	sbci	r29, 0xFD	; 253
   1b4c0:	88 81       	ld	r24, Y
   1b4c2:	99 81       	ldd	r25, Y+1	; 0x01
   1b4c4:	c6 52       	subi	r28, 0x26	; 38
   1b4c6:	d2 40       	sbci	r29, 0x02	; 2
   1b4c8:	0e 94 11 7a 	call	0xf422	; 0xf422 <utime>
    }
    sync();
   1b4cc:	0e 94 cf 7b 	call	0xf79e	; 0xf79e <sync>
    printf("\tWrote: %8ld\n", bytes);
   1b4d0:	ed b7       	in	r30, 0x3d	; 61
   1b4d2:	fe b7       	in	r31, 0x3e	; 62
   1b4d4:	44 82       	std	Z+4, r4	; 0x04
   1b4d6:	55 82       	std	Z+5, r5	; 0x05
   1b4d8:	66 82       	std	Z+6, r6	; 0x06
   1b4da:	77 82       	std	Z+7, r7	; 0x07
   1b4dc:	8d ea       	ldi	r24, 0xAD	; 173
   1b4de:	95 e3       	ldi	r25, 0x35	; 53
   1b4e0:	a0 e0       	ldi	r26, 0x00	; 0
   1b4e2:	81 83       	std	Z+1, r24	; 0x01
   1b4e4:	92 83       	std	Z+2, r25	; 0x02
   1b4e6:	a3 83       	std	Z+3, r26	; 0x03
   1b4e8:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    return(status);
   1b4ec:	c7 01       	movw	r24, r14
}
   1b4ee:	c9 5c       	subi	r28, 0xC9	; 201
   1b4f0:	dd 4f       	sbci	r29, 0xFD	; 253
   1b4f2:	e2 e1       	ldi	r30, 0x12	; 18
   1b4f4:	0c 94 d7 e6 	jmp	0x1cdae	; 0x1cdae <__epilogue_restores__>

0001b4f8 <lif_extract_lif_as_lif>:
/// @param[in] lifname:  name of file in LIF image we want to extract
/// @param[in] username: new LIF file to create
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_lif_as_lif(char *lifimagename, char *lifname, char *username)
{
   1b4f8:	a4 e1       	ldi	r26, 0x14	; 20
   1b4fa:	b1 e0       	ldi	r27, 0x01	; 1
   1b4fc:	e2 e8       	ldi	r30, 0x82	; 130
   1b4fe:	fa ed       	ldi	r31, 0xDA	; 218
   1b500:	0c 94 bb e6 	jmp	0x1cd76	; 0x1cd76 <__prologue_saves__>
   1b504:	7c 01       	movw	r14, r24
   1b506:	8b 01       	movw	r16, r22
   1b508:	3a 01       	movw	r6, r20
    int i, size;
    int sectors;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    LIF = lif_open_volume(lifimagename,"r");
   1b50a:	62 e4       	ldi	r22, 0x42	; 66
   1b50c:	73 e0       	ldi	r23, 0x03	; 3
   1b50e:	0e 94 3b d1 	call	0x1a276	; 0x1a276 <lif_open_volume>
   1b512:	4c 01       	movw	r8, r24
    if(LIF == NULL)
   1b514:	00 97       	sbiw	r24, 0x00	; 0
   1b516:	69 f4       	brne	.+26     	; 0x1b532 <lif_extract_lif_as_lif+0x3a>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1b518:	ed b7       	in	r30, 0x3d	; 61
   1b51a:	fe b7       	in	r31, 0x3e	; 62
   1b51c:	f5 82       	std	Z+5, r15	; 0x05
   1b51e:	e4 82       	std	Z+4, r14	; 0x04
   1b520:	85 e9       	ldi	r24, 0x95	; 149
   1b522:	95 e3       	ldi	r25, 0x35	; 53
   1b524:	a0 e0       	ldi	r26, 0x00	; 0
   1b526:	81 83       	std	Z+1, r24	; 0x01
   1b528:	92 83       	std	Z+2, r25	; 0x02
   1b52a:	a3 83       	std	Z+3, r26	; 0x03
   1b52c:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   1b530:	13 c0       	rjmp	.+38     	; 0x1b558 <lif_extract_lif_as_lif+0x60>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1b532:	b8 01       	movw	r22, r16
   1b534:	75 d9       	rcall	.-3350   	; 0x1a820 <lif_find_file>
    if(index == -1)
   1b536:	01 96       	adiw	r24, 0x01	; 1
   1b538:	91 f4       	brne	.+36     	; 0x1b55e <lif_extract_lif_as_lif+0x66>
    {
        printf("File not found:%s\n", lifname);
   1b53a:	ed b7       	in	r30, 0x3d	; 61
   1b53c:	fe b7       	in	r31, 0x3e	; 62
   1b53e:	15 83       	std	Z+5, r17	; 0x05
   1b540:	04 83       	std	Z+4, r16	; 0x04
   1b542:	82 e8       	ldi	r24, 0x82	; 130
   1b544:	95 e3       	ldi	r25, 0x35	; 53
   1b546:	a0 e0       	ldi	r26, 0x00	; 0
   1b548:	81 83       	std	Z+1, r24	; 0x01
   1b54a:	92 83       	std	Z+2, r25	; 0x02
   1b54c:	a3 83       	std	Z+3, r26	; 0x03
   1b54e:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b552:	c4 01       	movw	r24, r8
   1b554:	0e 94 7e ca 	call	0x194fc	; 0x194fc <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1b558:	00 e0       	ldi	r16, 0x00	; 0
   1b55a:	10 e0       	ldi	r17, 0x00	; 0
   1b55c:	ff c0       	rjmp	.+510    	; 0x1b75c <lif_extract_lif_as_lif+0x264>
    }

    sectors = LIF->DIR.FileSectors;
   1b55e:	94 01       	movw	r18, r8
   1b560:	20 5a       	subi	r18, 0xA0	; 160
   1b562:	3f 4f       	sbci	r19, 0xFF	; 255
   1b564:	c0 5f       	subi	r28, 0xF0	; 240
   1b566:	de 4f       	sbci	r29, 0xFE	; 254
   1b568:	39 83       	std	Y+1, r19	; 0x01
   1b56a:	28 83       	st	Y, r18
   1b56c:	c0 51       	subi	r28, 0x10	; 16
   1b56e:	d1 40       	sbci	r29, 0x01	; 1

//Initialize the user file lif_t structure
    ULIF = lif_create_volume(username, "HFSLIF",1,1,sectors);
   1b570:	f9 01       	movw	r30, r18
   1b572:	a0 80       	ld	r10, Z
   1b574:	b1 80       	ldd	r11, Z+1	; 0x01
   1b576:	0b 2c       	mov	r0, r11
   1b578:	00 0c       	add	r0, r0
   1b57a:	cc 08       	sbc	r12, r12
   1b57c:	dd 08       	sbc	r13, r13
   1b57e:	e1 2c       	mov	r14, r1
   1b580:	f1 2c       	mov	r15, r1
   1b582:	87 01       	movw	r16, r14
   1b584:	e3 94       	inc	r14
   1b586:	21 e0       	ldi	r18, 0x01	; 1
   1b588:	30 e0       	ldi	r19, 0x00	; 0
   1b58a:	40 e0       	ldi	r20, 0x00	; 0
   1b58c:	50 e0       	ldi	r21, 0x00	; 0
   1b58e:	65 e6       	ldi	r22, 0x65	; 101
   1b590:	76 e1       	ldi	r23, 0x16	; 22
   1b592:	c3 01       	movw	r24, r6
   1b594:	0e 94 f1 cc 	call	0x199e2	; 0x199e2 <lif_create_volume>
   1b598:	7c 01       	movw	r14, r24
    if(ULIF == NULL)
   1b59a:	89 2b       	or	r24, r25
   1b59c:	d1 f2       	breq	.-76     	; 0x1b552 <lif_extract_lif_as_lif+0x5a>
    }

// Only the start sector changes

// Copy directory record
    ULIF->DIR = LIF->DIR;
   1b59e:	81 e2       	ldi	r24, 0x21	; 33
   1b5a0:	f4 01       	movw	r30, r8
   1b5a2:	e1 5b       	subi	r30, 0xB1	; 177
   1b5a4:	ff 4f       	sbci	r31, 0xFF	; 255
   1b5a6:	d7 01       	movw	r26, r14
   1b5a8:	a1 5b       	subi	r26, 0xB1	; 177
   1b5aa:	bf 4f       	sbci	r27, 0xFF	; 255
   1b5ac:	01 90       	ld	r0, Z+
   1b5ae:	0d 92       	st	X+, r0
   1b5b0:	8a 95       	dec	r24
   1b5b2:	e1 f7       	brne	.-8      	; 0x1b5ac <lif_extract_lif_as_lif+0xb4>

    ULIF->DIR.FileStartSector = 2;
   1b5b4:	82 e0       	ldi	r24, 0x02	; 2
   1b5b6:	90 e0       	ldi	r25, 0x00	; 0
   1b5b8:	a0 e0       	ldi	r26, 0x00	; 0
   1b5ba:	b0 e0       	ldi	r27, 0x00	; 0
   1b5bc:	f7 01       	movw	r30, r14
   1b5be:	e4 5a       	subi	r30, 0xA4	; 164
   1b5c0:	ff 4f       	sbci	r31, 0xFF	; 255
   1b5c2:	80 83       	st	Z, r24
   1b5c4:	91 83       	std	Z+1, r25	; 0x01
   1b5c6:	a2 83       	std	Z+2, r26	; 0x02
   1b5c8:	b3 83       	std	Z+3, r27	; 0x03
    ULIF->filesectors = LIF->DIR.FileSectors;
   1b5ca:	c0 5f       	subi	r28, 0xF0	; 240
   1b5cc:	de 4f       	sbci	r29, 0xFE	; 254
   1b5ce:	e8 81       	ld	r30, Y
   1b5d0:	f9 81       	ldd	r31, Y+1	; 0x01
   1b5d2:	c0 51       	subi	r28, 0x10	; 16
   1b5d4:	d1 40       	sbci	r29, 0x01	; 1
   1b5d6:	80 81       	ld	r24, Z
   1b5d8:	91 81       	ldd	r25, Z+1	; 0x01
   1b5da:	a2 81       	ldd	r26, Z+2	; 0x02
   1b5dc:	b3 81       	ldd	r27, Z+3	; 0x03
   1b5de:	f7 01       	movw	r30, r14
   1b5e0:	80 8b       	std	Z+16, r24	; 0x10
   1b5e2:	91 8b       	std	Z+17, r25	; 0x11
   1b5e4:	a2 8b       	std	Z+18, r26	; 0x12
   1b5e6:	b3 8b       	std	Z+19, r27	; 0x13

    if( !lif_writedirindex(ULIF,0))
   1b5e8:	60 e0       	ldi	r22, 0x00	; 0
   1b5ea:	70 e0       	ldi	r23, 0x00	; 0
   1b5ec:	c7 01       	movw	r24, r14
   1b5ee:	0e 94 73 cb 	call	0x196e6	; 0x196e6 <lif_writedirindex>
   1b5f2:	8c 01       	movw	r16, r24
   1b5f4:	89 2b       	or	r24, r25
   1b5f6:	41 f0       	breq	.+16     	; 0x1b608 <lif_extract_lif_as_lif+0x110>
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
    }
    if( !lif_writedirEOF(ULIF,1) )
   1b5f8:	61 e0       	ldi	r22, 0x01	; 1
   1b5fa:	70 e0       	ldi	r23, 0x00	; 0
   1b5fc:	c7 01       	movw	r24, r14
   1b5fe:	0e 94 cf cb 	call	0x1979e	; 0x1979e <lif_writedirEOF>
   1b602:	8c 01       	movw	r16, r24
   1b604:	89 2b       	or	r24, r25
   1b606:	39 f4       	brne	.+14     	; 0x1b616 <lif_extract_lif_as_lif+0x11e>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b608:	c4 01       	movw	r24, r8
   1b60a:	0e 94 7e ca 	call	0x194fc	; 0x194fc <lif_close_volume>
   1b60e:	c7 01       	movw	r24, r14
   1b610:	0e 94 7e ca 	call	0x194fc	; 0x194fc <lif_close_volume>
    }
    if( !lif_writedirEOF(ULIF,1) )
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
   1b614:	a3 c0       	rjmp	.+326    	; 0x1b75c <lif_extract_lif_as_lif+0x264>
    }

    uoffset =  ULIF->filestart * (long) LIF_SECTOR_SIZE;
   1b616:	f7 01       	movw	r30, r14
   1b618:	44 84       	ldd	r4, Z+12	; 0x0c
   1b61a:	55 84       	ldd	r5, Z+13	; 0x0d
   1b61c:	66 84       	ldd	r6, Z+14	; 0x0e
   1b61e:	77 84       	ldd	r7, Z+15	; 0x0f
   1b620:	76 2c       	mov	r7, r6
   1b622:	65 2c       	mov	r6, r5
   1b624:	54 2c       	mov	r5, r4
   1b626:	44 24       	eor	r4, r4

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b628:	f4 01       	movw	r30, r8
   1b62a:	e4 5a       	subi	r30, 0xA4	; 164
   1b62c:	ff 4f       	sbci	r31, 0xFF	; 255
   1b62e:	80 81       	ld	r24, Z
   1b630:	91 81       	ldd	r25, Z+1	; 0x01
   1b632:	a2 81       	ldd	r26, Z+2	; 0x02
   1b634:	b3 81       	ldd	r27, Z+3	; 0x03
   1b636:	22 27       	eor	r18, r18
   1b638:	38 2f       	mov	r19, r24
   1b63a:	49 2f       	mov	r20, r25
   1b63c:	5a 2f       	mov	r21, r26
   1b63e:	c4 5f       	subi	r28, 0xF4	; 244
   1b640:	de 4f       	sbci	r29, 0xFE	; 254
   1b642:	28 83       	st	Y, r18
   1b644:	39 83       	std	Y+1, r19	; 0x01
   1b646:	4a 83       	std	Y+2, r20	; 0x02
   1b648:	5b 83       	std	Y+3, r21	; 0x03
   1b64a:	cc 50       	subi	r28, 0x0C	; 12
   1b64c:	d1 40       	sbci	r29, 0x01	; 1

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b64e:	21 2c       	mov	r2, r1
   1b650:	31 2c       	mov	r3, r1
            return(0);
        }
        bytes += size;
        offset += size;
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
   1b652:	84 e7       	ldi	r24, 0x74	; 116
   1b654:	95 e3       	ldi	r25, 0x35	; 53
   1b656:	9c 01       	movw	r18, r24
   1b658:	40 e0       	ldi	r20, 0x00	; 0
   1b65a:	ce 5e       	subi	r28, 0xEE	; 238
   1b65c:	de 4f       	sbci	r29, 0xFE	; 254
   1b65e:	28 83       	st	Y, r18
   1b660:	39 83       	std	Y+1, r19	; 0x01
   1b662:	4a 83       	std	Y+2, r20	; 0x02
   1b664:	c2 51       	subi	r28, 0x12	; 18
   1b666:	d1 40       	sbci	r29, 0x01	; 1

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b668:	c0 5f       	subi	r28, 0xF0	; 240
   1b66a:	de 4f       	sbci	r29, 0xFE	; 254
   1b66c:	e8 81       	ld	r30, Y
   1b66e:	f9 81       	ldd	r31, Y+1	; 0x01
   1b670:	c0 51       	subi	r28, 0x10	; 16
   1b672:	d1 40       	sbci	r29, 0x01	; 1
   1b674:	80 81       	ld	r24, Z
   1b676:	91 81       	ldd	r25, Z+1	; 0x01
   1b678:	28 16       	cp	r2, r24
   1b67a:	39 06       	cpc	r3, r25
   1b67c:	0c f0       	brlt	.+2      	; 0x1b680 <lif_extract_lif_as_lif+0x188>
   1b67e:	58 c0       	rjmp	.+176    	; 0x1b730 <lif_extract_lif_as_lif+0x238>
    {
        size = lif_read(LIF, buf, offset,LIF_SECTOR_SIZE);
   1b680:	00 e0       	ldi	r16, 0x00	; 0
   1b682:	11 e0       	ldi	r17, 0x01	; 1
   1b684:	c4 5f       	subi	r28, 0xF4	; 244
   1b686:	de 4f       	sbci	r29, 0xFE	; 254
   1b688:	28 81       	ld	r18, Y
   1b68a:	39 81       	ldd	r19, Y+1	; 0x01
   1b68c:	4a 81       	ldd	r20, Y+2	; 0x02
   1b68e:	5b 81       	ldd	r21, Y+3	; 0x03
   1b690:	cc 50       	subi	r28, 0x0C	; 12
   1b692:	d1 40       	sbci	r29, 0x01	; 1
   1b694:	be 01       	movw	r22, r28
   1b696:	68 5f       	subi	r22, 0xF8	; 248
   1b698:	7f 4f       	sbci	r23, 0xFF	; 255
   1b69a:	c4 01       	movw	r24, r8
   1b69c:	0e 94 b2 c1 	call	0x18364	; 0x18364 <lif_read>
   1b6a0:	5b 01       	movw	r10, r22
   1b6a2:	6c 01       	movw	r12, r24
        if(size < LIF_SECTOR_SIZE)
   1b6a4:	6f 3f       	cpi	r22, 0xFF	; 255
   1b6a6:	71 05       	cpc	r23, r1
   1b6a8:	09 f0       	breq	.+2      	; 0x1b6ac <lif_extract_lif_as_lif+0x1b4>
   1b6aa:	2c f4       	brge	.+10     	; 0x1b6b6 <lif_extract_lif_as_lif+0x1be>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b6ac:	c4 01       	movw	r24, r8
   1b6ae:	0e 94 7e ca 	call	0x194fc	; 0x194fc <lif_close_volume>
   1b6b2:	c7 01       	movw	r24, r14
   1b6b4:	4f cf       	rjmp	.-354    	; 0x1b554 <lif_extract_lif_as_lif+0x5c>
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }

        lif_write(ULIF,buf,uoffset,LIF_SECTOR_SIZE);
   1b6b6:	00 e0       	ldi	r16, 0x00	; 0
   1b6b8:	11 e0       	ldi	r17, 0x01	; 1
   1b6ba:	a3 01       	movw	r20, r6
   1b6bc:	92 01       	movw	r18, r4
   1b6be:	be 01       	movw	r22, r28
   1b6c0:	68 5f       	subi	r22, 0xF8	; 248
   1b6c2:	7f 4f       	sbci	r23, 0xFF	; 255
   1b6c4:	c7 01       	movw	r24, r14
   1b6c6:	0e 94 05 c2 	call	0x1840a	; 0x1840a <lif_write>
        {
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }
        bytes += size;
   1b6ca:	c5 01       	movw	r24, r10
   1b6cc:	0b 2c       	mov	r0, r11
   1b6ce:	00 0c       	add	r0, r0
   1b6d0:	aa 0b       	sbc	r26, r26
   1b6d2:	bb 0b       	sbc	r27, r27
   1b6d4:	48 0e       	add	r4, r24
   1b6d6:	59 1e       	adc	r5, r25
   1b6d8:	6a 1e       	adc	r6, r26
   1b6da:	7b 1e       	adc	r7, r27
        offset += size;
   1b6dc:	c4 5f       	subi	r28, 0xF4	; 244
   1b6de:	de 4f       	sbci	r29, 0xFE	; 254
   1b6e0:	28 81       	ld	r18, Y
   1b6e2:	39 81       	ldd	r19, Y+1	; 0x01
   1b6e4:	4a 81       	ldd	r20, Y+2	; 0x02
   1b6e6:	5b 81       	ldd	r21, Y+3	; 0x03
   1b6e8:	cc 50       	subi	r28, 0x0C	; 12
   1b6ea:	d1 40       	sbci	r29, 0x01	; 1
   1b6ec:	28 0f       	add	r18, r24
   1b6ee:	39 1f       	adc	r19, r25
   1b6f0:	4a 1f       	adc	r20, r26
   1b6f2:	5b 1f       	adc	r21, r27
   1b6f4:	c4 5f       	subi	r28, 0xF4	; 244
   1b6f6:	de 4f       	sbci	r29, 0xFE	; 254
   1b6f8:	28 83       	st	Y, r18
   1b6fa:	39 83       	std	Y+1, r19	; 0x01
   1b6fc:	4a 83       	std	Y+2, r20	; 0x02
   1b6fe:	5b 83       	std	Y+3, r21	; 0x03
   1b700:	cc 50       	subi	r28, 0x0C	; 12
   1b702:	d1 40       	sbci	r29, 0x01	; 1
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
   1b704:	ed b7       	in	r30, 0x3d	; 61
   1b706:	fe b7       	in	r31, 0x3e	; 62
   1b708:	44 82       	std	Z+4, r4	; 0x04
   1b70a:	55 82       	std	Z+5, r5	; 0x05
   1b70c:	66 82       	std	Z+6, r6	; 0x06
   1b70e:	77 82       	std	Z+7, r7	; 0x07
   1b710:	ce 5e       	subi	r28, 0xEE	; 238
   1b712:	de 4f       	sbci	r29, 0xFE	; 254
   1b714:	28 81       	ld	r18, Y
   1b716:	39 81       	ldd	r19, Y+1	; 0x01
   1b718:	4a 81       	ldd	r20, Y+2	; 0x02
   1b71a:	c2 51       	subi	r28, 0x12	; 18
   1b71c:	d1 40       	sbci	r29, 0x01	; 1
   1b71e:	21 83       	std	Z+1, r18	; 0x01
   1b720:	32 83       	std	Z+2, r19	; 0x02
   1b722:	43 83       	std	Z+3, r20	; 0x03
   1b724:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b728:	ff ef       	ldi	r31, 0xFF	; 255
   1b72a:	2f 1a       	sub	r2, r31
   1b72c:	3f 0a       	sbc	r3, r31
   1b72e:	9c cf       	rjmp	.-200    	; 0x1b668 <lif_extract_lif_as_lif+0x170>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b730:	c4 01       	movw	r24, r8
   1b732:	0e 94 7e ca 	call	0x194fc	; 0x194fc <lif_close_volume>
   1b736:	c7 01       	movw	r24, r14
   1b738:	0e 94 7e ca 	call	0x194fc	; 0x194fc <lif_close_volume>
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
    }
    lif_closedir(LIF);
    lif_closedir(ULIF);
    printf("\tWrote: %8ld\n", bytes);
   1b73c:	ed b7       	in	r30, 0x3d	; 61
   1b73e:	fe b7       	in	r31, 0x3e	; 62
   1b740:	44 82       	std	Z+4, r4	; 0x04
   1b742:	55 82       	std	Z+5, r5	; 0x05
   1b744:	66 82       	std	Z+6, r6	; 0x06
   1b746:	77 82       	std	Z+7, r7	; 0x07
   1b748:	86 e6       	ldi	r24, 0x66	; 102
   1b74a:	95 e3       	ldi	r25, 0x35	; 53
   1b74c:	a0 e0       	ldi	r26, 0x00	; 0
   1b74e:	81 83       	std	Z+1, r24	; 0x01
   1b750:	92 83       	std	Z+2, r25	; 0x02
   1b752:	a3 83       	std	Z+3, r26	; 0x03
   1b754:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    return(1);
   1b758:	01 e0       	ldi	r16, 0x01	; 1
   1b75a:	10 e0       	ldi	r17, 0x00	; 0
}
   1b75c:	c8 01       	movw	r24, r16
   1b75e:	cc 5e       	subi	r28, 0xEC	; 236
   1b760:	de 4f       	sbci	r29, 0xFE	; 254
   1b762:	e2 e1       	ldi	r30, 0x12	; 18
   1b764:	0c 94 d7 e6 	jmp	0x1cdae	; 0x1cdae <__epilogue_restores__>

0001b768 <lif_add_lif_file>:
/// @param[in] lifname: LIF file name to copy file to
/// @param[in] userfile: LIF mage name copy file from
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_lif_file(char *lifimagename, char *lifname, char *userfile)
{
   1b768:	2f 92       	push	r2
   1b76a:	3f 92       	push	r3
   1b76c:	4f 92       	push	r4
   1b76e:	5f 92       	push	r5
   1b770:	6f 92       	push	r6
   1b772:	8f 92       	push	r8
   1b774:	9f 92       	push	r9
   1b776:	af 92       	push	r10
   1b778:	bf 92       	push	r11
   1b77a:	cf 92       	push	r12
   1b77c:	df 92       	push	r13
   1b77e:	ef 92       	push	r14
   1b780:	ff 92       	push	r15
   1b782:	0f 93       	push	r16
   1b784:	1f 93       	push	r17
   1b786:	cf 93       	push	r28
   1b788:	df 93       	push	r29
   1b78a:	cd b7       	in	r28, 0x3d	; 61
   1b78c:	de b7       	in	r29, 0x3e	; 62
   1b78e:	cd 51       	subi	r28, 0x1D	; 29
   1b790:	d1 40       	sbci	r29, 0x01	; 1
   1b792:	0f b6       	in	r0, 0x3f	; 63
   1b794:	f8 94       	cli
   1b796:	de bf       	out	0x3e, r29	; 62
   1b798:	0f be       	out	0x3f, r0	; 63
   1b79a:	cd bf       	out	0x3d, r28	; 61
   1b79c:	5c 01       	movw	r10, r24
   1b79e:	7b 01       	movw	r14, r22
   1b7a0:	4a 01       	movw	r8, r20
    long offset, uoffset, start, bytes;
    int i, size;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    if(!*lifimagename)
   1b7a2:	dc 01       	movw	r26, r24
   1b7a4:	8c 91       	ld	r24, X
   1b7a6:	81 11       	cpse	r24, r1
   1b7a8:	03 c0       	rjmp	.+6      	; 0x1b7b0 <lif_add_lif_file+0x48>
    {
        printf("lif_add: lifimagename is empty\n");
   1b7aa:	86 e4       	ldi	r24, 0x46	; 70
   1b7ac:	95 e3       	ldi	r25, 0x35	; 53
   1b7ae:	06 c0       	rjmp	.+12     	; 0x1b7bc <lif_add_lif_file+0x54>
        return(-1);
    }
    if(!*lifname)
   1b7b0:	db 01       	movw	r26, r22
   1b7b2:	8c 91       	ld	r24, X
   1b7b4:	81 11       	cpse	r24, r1
   1b7b6:	0b c0       	rjmp	.+22     	; 0x1b7ce <lif_add_lif_file+0x66>
    {
        printf("lif_add: lifname is empty\n");
   1b7b8:	8b e2       	ldi	r24, 0x2B	; 43
   1b7ba:	95 e3       	ldi	r25, 0x35	; 53
   1b7bc:	a0 e0       	ldi	r26, 0x00	; 0
   1b7be:	ed b7       	in	r30, 0x3d	; 61
   1b7c0:	fe b7       	in	r31, 0x3e	; 62
   1b7c2:	81 83       	std	Z+1, r24	; 0x01
   1b7c4:	92 83       	std	Z+2, r25	; 0x02
   1b7c6:	a3 83       	std	Z+3, r26	; 0x03
   1b7c8:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   1b7cc:	25 c1       	rjmp	.+586    	; 0x1ba18 <lif_add_lif_file+0x2b0>
        return(-1);
    }
    if(!*userfile)
   1b7ce:	da 01       	movw	r26, r20
   1b7d0:	8c 91       	ld	r24, X
   1b7d2:	81 11       	cpse	r24, r1
   1b7d4:	03 c0       	rjmp	.+6      	; 0x1b7dc <lif_add_lif_file+0x74>
    {
        printf("lif_add: userfile is empty\n");
   1b7d6:	8f e0       	ldi	r24, 0x0F	; 15
   1b7d8:	95 e3       	ldi	r25, 0x35	; 53
   1b7da:	f0 cf       	rjmp	.-32     	; 0x1b7bc <lif_add_lif_file+0x54>
        return(-1);
    }

    if(debuglevel & LIF_DEBUG)
   1b7dc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1b7e0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1b7e4:	92 ff       	sbrs	r25, 2
   1b7e6:	10 c0       	rjmp	.+32     	; 0x1b808 <lif_add_lif_file+0xa0>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n",
   1b7e8:	ed b7       	in	r30, 0x3d	; 61
   1b7ea:	fe b7       	in	r31, 0x3e	; 62
   1b7ec:	51 87       	std	Z+9, r21	; 0x09
   1b7ee:	40 87       	std	Z+8, r20	; 0x08
   1b7f0:	77 83       	std	Z+7, r23	; 0x07
   1b7f2:	66 83       	std	Z+6, r22	; 0x06
   1b7f4:	b5 82       	std	Z+5, r11	; 0x05
   1b7f6:	a4 82       	std	Z+4, r10	; 0x04
   1b7f8:	80 ee       	ldi	r24, 0xE0	; 224
   1b7fa:	94 e3       	ldi	r25, 0x34	; 52
   1b7fc:	a0 e0       	ldi	r26, 0x00	; 0
   1b7fe:	81 83       	std	Z+1, r24	; 0x01
   1b800:	92 83       	std	Z+2, r25	; 0x02
   1b802:	a3 83       	std	Z+3, r26	; 0x03
   1b804:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
            lifimagename, lifname, userfile);

// open  userfile as LIF image
    ULIF = lif_open_volume(userfile,"rb+");
   1b808:	68 e0       	ldi	r22, 0x08	; 8
   1b80a:	79 e0       	ldi	r23, 0x09	; 9
   1b80c:	c4 01       	movw	r24, r8
   1b80e:	0e 94 3b d1 	call	0x1a276	; 0x1a276 <lif_open_volume>
   1b812:	6c 01       	movw	r12, r24
    if(ULIF == NULL)
   1b814:	00 97       	sbiw	r24, 0x00	; 0
   1b816:	09 f4       	brne	.+2      	; 0x1b81a <lif_add_lif_file+0xb2>
   1b818:	ff c0       	rjmp	.+510    	; 0x1ba18 <lif_add_lif_file+0x2b0>
        return(-1);

// find lif file in user image
    index = lif_find_file(ULIF, lifname);
   1b81a:	b7 01       	movw	r22, r14
   1b81c:	01 d8       	rcall	.-4094   	; 0x1a820 <lif_find_file>
    if(index == -1)
   1b81e:	01 96       	adiw	r24, 0x01	; 1
   1b820:	a1 f4       	brne	.+40     	; 0x1b84a <lif_add_lif_file+0xe2>
    {
        printf("File not found:%s\n", lifname);
   1b822:	ed b7       	in	r30, 0x3d	; 61
   1b824:	fe b7       	in	r31, 0x3e	; 62
   1b826:	f5 82       	std	Z+5, r15	; 0x05
   1b828:	e4 82       	std	Z+4, r14	; 0x04
   1b82a:	8d ec       	ldi	r24, 0xCD	; 205
   1b82c:	94 e3       	ldi	r25, 0x34	; 52
   1b82e:	a0 e0       	ldi	r26, 0x00	; 0
   1b830:	81 83       	std	Z+1, r24	; 0x01
   1b832:	92 83       	std	Z+2, r25	; 0x02
   1b834:	a3 83       	std	Z+3, r26	; 0x03
   1b836:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b83a:	c6 01       	movw	r24, r12
   1b83c:	0e 94 7e ca 	call	0x194fc	; 0x194fc <lif_close_volume>
    index = lif_find_file(ULIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(ULIF);
        return(0);
   1b840:	60 e0       	ldi	r22, 0x00	; 0
   1b842:	70 e0       	ldi	r23, 0x00	; 0
   1b844:	80 e0       	ldi	r24, 0x00	; 0
   1b846:	90 e0       	ldi	r25, 0x00	; 0
   1b848:	ff c0       	rjmp	.+510    	; 0x1ba48 <lif_add_lif_file+0x2e0>
    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1b84a:	68 e0       	ldi	r22, 0x08	; 8
   1b84c:	79 e0       	ldi	r23, 0x09	; 9
   1b84e:	c5 01       	movw	r24, r10
   1b850:	0e 94 3b d1 	call	0x1a276	; 0x1a276 <lif_open_volume>
   1b854:	7c 01       	movw	r14, r24
    if(LIF == NULL)
   1b856:	00 97       	sbiw	r24, 0x00	; 0
   1b858:	09 f4       	brne	.+2      	; 0x1b85c <lif_add_lif_file+0xf4>
   1b85a:	de c0       	rjmp	.+444    	; 0x1ba18 <lif_add_lif_file+0x2b0>
        return(-1);

// Now find a new free record that is big enough
    index = lif_newdir(LIF, ULIF->DIR.FileSectors);
   1b85c:	f6 01       	movw	r30, r12
   1b85e:	e0 5a       	subi	r30, 0xA0	; 160
   1b860:	ff 4f       	sbci	r31, 0xFF	; 255
   1b862:	40 81       	ld	r20, Z
   1b864:	51 81       	ldd	r21, Z+1	; 0x01
   1b866:	62 81       	ldd	r22, Z+2	; 0x02
   1b868:	73 81       	ldd	r23, Z+3	; 0x03
   1b86a:	0e 94 db cf 	call	0x19fb6	; 0x19fb6 <lif_newdir>
   1b86e:	ca 5e       	subi	r28, 0xEA	; 234
   1b870:	de 4f       	sbci	r29, 0xFE	; 254
   1b872:	99 83       	std	Y+1, r25	; 0x01
   1b874:	88 83       	st	Y, r24
   1b876:	c6 51       	subi	r28, 0x16	; 22
   1b878:	d1 40       	sbci	r29, 0x01	; 1
    if(index == -1)
   1b87a:	01 96       	adiw	r24, 0x01	; 1
   1b87c:	79 f4       	brne	.+30     	; 0x1b89c <lif_add_lif_file+0x134>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n",
   1b87e:	ed b7       	in	r30, 0x3d	; 61
   1b880:	fe b7       	in	r31, 0x3e	; 62
   1b882:	97 82       	std	Z+7, r9	; 0x07
   1b884:	86 82       	std	Z+6, r8	; 0x06
   1b886:	b5 82       	std	Z+5, r11	; 0x05
   1b888:	a4 82       	std	Z+4, r10	; 0x04
   1b88a:	8d e9       	ldi	r24, 0x9D	; 157
   1b88c:	94 e3       	ldi	r25, 0x34	; 52
   1b88e:	a0 e0       	ldi	r26, 0x00	; 0
   1b890:	81 83       	std	Z+1, r24	; 0x01
   1b892:	92 83       	std	Z+2, r25	; 0x02
   1b894:	a3 83       	std	Z+3, r26	; 0x03
   1b896:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   1b89a:	a8 c0       	rjmp	.+336    	; 0x1b9ec <lif_add_lif_file+0x284>
        lif_closedir(ULIF);
        return(-1);
    }

// Save start sector
    start = LIF->DIR.FileStartSector;
   1b89c:	c7 01       	movw	r24, r14
   1b89e:	84 5a       	subi	r24, 0xA4	; 164
   1b8a0:	9f 4f       	sbci	r25, 0xFF	; 255
   1b8a2:	dc 01       	movw	r26, r24
   1b8a4:	4d 91       	ld	r20, X+
   1b8a6:	5d 91       	ld	r21, X+
   1b8a8:	6d 91       	ld	r22, X+
   1b8aa:	7c 91       	ld	r23, X
   1b8ac:	13 97       	sbiw	r26, 0x03	; 3

// Copy user image directory record to master image directory record
    LIF->DIR = ULIF->DIR;
   1b8ae:	21 e2       	ldi	r18, 0x21	; 33
   1b8b0:	f6 01       	movw	r30, r12
   1b8b2:	e1 5b       	subi	r30, 0xB1	; 177
   1b8b4:	ff 4f       	sbci	r31, 0xFF	; 255
   1b8b6:	1d 97       	sbiw	r26, 0x0d	; 13
   1b8b8:	01 90       	ld	r0, Z+
   1b8ba:	0d 92       	st	X+, r0
   1b8bc:	2a 95       	dec	r18
   1b8be:	e1 f7       	brne	.-8      	; 0x1b8b8 <lif_add_lif_file+0x150>

// Restore FileStartSector
    LIF->DIR.FileStartSector = start;
   1b8c0:	fc 01       	movw	r30, r24
   1b8c2:	40 83       	st	Z, r20
   1b8c4:	51 83       	std	Z+1, r21	; 0x01
   1b8c6:	62 83       	std	Z+2, r22	; 0x02
   1b8c8:	73 83       	std	Z+3, r23	; 0x03

// Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b8ca:	b6 2f       	mov	r27, r22
   1b8cc:	a5 2f       	mov	r26, r21
   1b8ce:	94 2f       	mov	r25, r20
   1b8d0:	88 27       	eor	r24, r24
   1b8d2:	c2 5f       	subi	r28, 0xF2	; 242
   1b8d4:	de 4f       	sbci	r29, 0xFE	; 254
   1b8d6:	88 83       	st	Y, r24
   1b8d8:	99 83       	std	Y+1, r25	; 0x01
   1b8da:	aa 83       	std	Y+2, r26	; 0x02
   1b8dc:	bb 83       	std	Y+3, r27	; 0x03
   1b8de:	ce 50       	subi	r28, 0x0E	; 14
   1b8e0:	d1 40       	sbci	r29, 0x01	; 1
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b8e2:	f6 01       	movw	r30, r12
   1b8e4:	e4 5a       	subi	r30, 0xA4	; 164
   1b8e6:	ff 4f       	sbci	r31, 0xFF	; 255
   1b8e8:	80 81       	ld	r24, Z
   1b8ea:	91 81       	ldd	r25, Z+1	; 0x01
   1b8ec:	a2 81       	ldd	r26, Z+2	; 0x02
   1b8ee:	b3 81       	ldd	r27, Z+3	; 0x03
   1b8f0:	22 27       	eor	r18, r18
   1b8f2:	38 2f       	mov	r19, r24
   1b8f4:	49 2f       	mov	r20, r25
   1b8f6:	5a 2f       	mov	r21, r26
   1b8f8:	ce 5e       	subi	r28, 0xEE	; 238
   1b8fa:	de 4f       	sbci	r29, 0xFE	; 254
   1b8fc:	28 83       	st	Y, r18
   1b8fe:	39 83       	std	Y+1, r19	; 0x01
   1b900:	4a 83       	std	Y+2, r20	; 0x02
   1b902:	5b 83       	std	Y+3, r21	; 0x03
   1b904:	c2 51       	subi	r28, 0x12	; 18
   1b906:	d1 40       	sbci	r29, 0x01	; 1
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b908:	21 2c       	mov	r2, r1
   1b90a:	31 2c       	mov	r3, r1

// Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
   1b90c:	81 2c       	mov	r8, r1
   1b90e:	91 2c       	mov	r9, r1
   1b910:	54 01       	movw	r10, r8
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b912:	a7 01       	movw	r20, r14
   1b914:	40 5a       	subi	r20, 0xA0	; 160
   1b916:	5f 4f       	sbci	r21, 0xFF	; 255
   1b918:	c4 5e       	subi	r28, 0xE4	; 228
   1b91a:	de 4f       	sbci	r29, 0xFE	; 254
   1b91c:	59 83       	std	Y+1, r21	; 0x01
   1b91e:	48 83       	st	Y, r20
   1b920:	cc 51       	subi	r28, 0x1C	; 28
   1b922:	d1 40       	sbci	r29, 0x01	; 1
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
        printf("\tWrote: %8ld\r", bytes);
   1b924:	8f e8       	ldi	r24, 0x8F	; 143
   1b926:	94 e3       	ldi	r25, 0x34	; 52
   1b928:	2c 01       	movw	r4, r24
   1b92a:	61 2c       	mov	r6, r1
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b92c:	27 c0       	rjmp	.+78     	; 0x1b97c <lif_add_lif_file+0x214>
            lif_closedir(ULIF);
            return(-1);
        }

// Write
        size = lif_write(LIF, buf, offset, LIF_SECTOR_SIZE);
   1b92e:	00 e0       	ldi	r16, 0x00	; 0
   1b930:	11 e0       	ldi	r17, 0x01	; 1
   1b932:	c8 5e       	subi	r28, 0xE8	; 232
   1b934:	de 4f       	sbci	r29, 0xFE	; 254
   1b936:	28 81       	ld	r18, Y
   1b938:	39 81       	ldd	r19, Y+1	; 0x01
   1b93a:	4a 81       	ldd	r20, Y+2	; 0x02
   1b93c:	5b 81       	ldd	r21, Y+3	; 0x03
   1b93e:	c8 51       	subi	r28, 0x18	; 24
   1b940:	d1 40       	sbci	r29, 0x01	; 1
   1b942:	be 01       	movw	r22, r28
   1b944:	66 5f       	subi	r22, 0xF6	; 246
   1b946:	7f 4f       	sbci	r23, 0xFF	; 255
   1b948:	c7 01       	movw	r24, r14
   1b94a:	0e 94 05 c2 	call	0x1840a	; 0x1840a <lif_write>
        if(size < LIF_SECTOR_SIZE)
   1b94e:	8f 3f       	cpi	r24, 0xFF	; 255
   1b950:	91 05       	cpc	r25, r1
   1b952:	09 f0       	breq	.+2      	; 0x1b956 <lif_add_lif_file+0x1ee>
   1b954:	0c f4       	brge	.+2      	; 0x1b958 <lif_add_lif_file+0x1f0>
   1b956:	4a c0       	rjmp	.+148    	; 0x1b9ec <lif_add_lif_file+0x284>
            lif_closedir(ULIF);
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
   1b958:	5f ef       	ldi	r21, 0xFF	; 255
   1b95a:	95 1a       	sub	r9, r21
   1b95c:	a5 0a       	sbc	r10, r21
   1b95e:	b5 0a       	sbc	r11, r21
        printf("\tWrote: %8ld\r", bytes);
   1b960:	ed b7       	in	r30, 0x3d	; 61
   1b962:	fe b7       	in	r31, 0x3e	; 62
   1b964:	84 82       	std	Z+4, r8	; 0x04
   1b966:	95 82       	std	Z+5, r9	; 0x05
   1b968:	a6 82       	std	Z+6, r10	; 0x06
   1b96a:	b7 82       	std	Z+7, r11	; 0x07
   1b96c:	41 82       	std	Z+1, r4	; 0x01
   1b96e:	52 82       	std	Z+2, r5	; 0x02
   1b970:	63 82       	std	Z+3, r6	; 0x03
   1b972:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b976:	ff ef       	ldi	r31, 0xFF	; 255
   1b978:	2f 1a       	sub	r2, r31
   1b97a:	3f 0a       	sbc	r3, r31
   1b97c:	ce 5e       	subi	r28, 0xEE	; 238
   1b97e:	de 4f       	sbci	r29, 0xFE	; 254
   1b980:	28 81       	ld	r18, Y
   1b982:	39 81       	ldd	r19, Y+1	; 0x01
   1b984:	4a 81       	ldd	r20, Y+2	; 0x02
   1b986:	5b 81       	ldd	r21, Y+3	; 0x03
   1b988:	c2 51       	subi	r28, 0x12	; 18
   1b98a:	d1 40       	sbci	r29, 0x01	; 1
   1b98c:	28 0d       	add	r18, r8
   1b98e:	39 1d       	adc	r19, r9
   1b990:	4a 1d       	adc	r20, r10
   1b992:	5b 1d       	adc	r21, r11
   1b994:	c2 5f       	subi	r28, 0xF2	; 242
   1b996:	de 4f       	sbci	r29, 0xFE	; 254
   1b998:	88 81       	ld	r24, Y
   1b99a:	99 81       	ldd	r25, Y+1	; 0x01
   1b99c:	aa 81       	ldd	r26, Y+2	; 0x02
   1b99e:	bb 81       	ldd	r27, Y+3	; 0x03
   1b9a0:	ce 50       	subi	r28, 0x0E	; 14
   1b9a2:	d1 40       	sbci	r29, 0x01	; 1
   1b9a4:	88 0d       	add	r24, r8
   1b9a6:	99 1d       	adc	r25, r9
   1b9a8:	aa 1d       	adc	r26, r10
   1b9aa:	bb 1d       	adc	r27, r11
   1b9ac:	c8 5e       	subi	r28, 0xE8	; 232
   1b9ae:	de 4f       	sbci	r29, 0xFE	; 254
   1b9b0:	88 83       	st	Y, r24
   1b9b2:	99 83       	std	Y+1, r25	; 0x01
   1b9b4:	aa 83       	std	Y+2, r26	; 0x02
   1b9b6:	bb 83       	std	Y+3, r27	; 0x03
   1b9b8:	c8 51       	subi	r28, 0x18	; 24
   1b9ba:	d1 40       	sbci	r29, 0x01	; 1
   1b9bc:	c4 5e       	subi	r28, 0xE4	; 228
   1b9be:	de 4f       	sbci	r29, 0xFE	; 254
   1b9c0:	a8 81       	ld	r26, Y
   1b9c2:	b9 81       	ldd	r27, Y+1	; 0x01
   1b9c4:	cc 51       	subi	r28, 0x1C	; 28
   1b9c6:	d1 40       	sbci	r29, 0x01	; 1
   1b9c8:	8d 91       	ld	r24, X+
   1b9ca:	9c 91       	ld	r25, X
   1b9cc:	28 16       	cp	r2, r24
   1b9ce:	39 06       	cpc	r3, r25
   1b9d0:	94 f4       	brge	.+36     	; 0x1b9f6 <lif_add_lif_file+0x28e>
    {
// Read
        size = lif_read(ULIF, buf, uoffset, LIF_SECTOR_SIZE);
   1b9d2:	00 e0       	ldi	r16, 0x00	; 0
   1b9d4:	11 e0       	ldi	r17, 0x01	; 1
   1b9d6:	be 01       	movw	r22, r28
   1b9d8:	66 5f       	subi	r22, 0xF6	; 246
   1b9da:	7f 4f       	sbci	r23, 0xFF	; 255
   1b9dc:	c6 01       	movw	r24, r12
   1b9de:	0e 94 b2 c1 	call	0x18364	; 0x18364 <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1b9e2:	6f 3f       	cpi	r22, 0xFF	; 255
   1b9e4:	71 05       	cpc	r23, r1
   1b9e6:	11 f0       	breq	.+4      	; 0x1b9ec <lif_add_lif_file+0x284>
   1b9e8:	0c f0       	brlt	.+2      	; 0x1b9ec <lif_add_lif_file+0x284>
   1b9ea:	a1 cf       	rjmp	.-190    	; 0x1b92e <lif_add_lif_file+0x1c6>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b9ec:	c7 01       	movw	r24, r14
   1b9ee:	0e 94 7e ca 	call	0x194fc	; 0x194fc <lif_close_volume>
   1b9f2:	c6 01       	movw	r24, r12
   1b9f4:	0f c0       	rjmp	.+30     	; 0x1ba14 <lif_add_lif_file+0x2ac>
   1b9f6:	c6 01       	movw	r24, r12
   1b9f8:	0e 94 7e ca 	call	0x194fc	; 0x194fc <lif_close_volume>
        printf("\tWrote: %8ld\r", bytes);
    }
    lif_closedir(ULIF);

// Write directory record
    if( !lif_writedirindex(LIF,index))
   1b9fc:	ca 5e       	subi	r28, 0xEA	; 234
   1b9fe:	de 4f       	sbci	r29, 0xFE	; 254
   1ba00:	68 81       	ld	r22, Y
   1ba02:	79 81       	ldd	r23, Y+1	; 0x01
   1ba04:	c6 51       	subi	r28, 0x16	; 22
   1ba06:	d1 40       	sbci	r29, 0x01	; 1
   1ba08:	c7 01       	movw	r24, r14
   1ba0a:	0e 94 73 cb 	call	0x196e6	; 0x196e6 <lif_writedirindex>
   1ba0e:	89 2b       	or	r24, r25
   1ba10:	41 f4       	brne	.+16     	; 0x1ba22 <lif_add_lif_file+0x2ba>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ba12:	c7 01       	movw	r24, r14
   1ba14:	0e 94 7e ca 	call	0x194fc	; 0x194fc <lif_close_volume>

// Write directory record
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
   1ba18:	6f ef       	ldi	r22, 0xFF	; 255
   1ba1a:	7f ef       	ldi	r23, 0xFF	; 255
   1ba1c:	8f ef       	ldi	r24, 0xFF	; 255
   1ba1e:	9f ef       	ldi	r25, 0xFF	; 255
   1ba20:	13 c0       	rjmp	.+38     	; 0x1ba48 <lif_add_lif_file+0x2e0>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ba22:	c7 01       	movw	r24, r14
   1ba24:	0e 94 7e ca 	call	0x194fc	; 0x194fc <lif_close_volume>
    {
        lif_closedir(LIF);
        return(-1);
    }
    lif_closedir(LIF);
    printf("\tWrote: %8ld\n", bytes);
   1ba28:	ed b7       	in	r30, 0x3d	; 61
   1ba2a:	fe b7       	in	r31, 0x3e	; 62
   1ba2c:	84 82       	std	Z+4, r8	; 0x04
   1ba2e:	95 82       	std	Z+5, r9	; 0x05
   1ba30:	a6 82       	std	Z+6, r10	; 0x06
   1ba32:	b7 82       	std	Z+7, r11	; 0x07
   1ba34:	81 e8       	ldi	r24, 0x81	; 129
   1ba36:	94 e3       	ldi	r25, 0x34	; 52
   1ba38:	a0 e0       	ldi	r26, 0x00	; 0
   1ba3a:	81 83       	std	Z+1, r24	; 0x01
   1ba3c:	92 83       	std	Z+2, r25	; 0x02
   1ba3e:	a3 83       	std	Z+3, r26	; 0x03
   1ba40:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    return(bytes);
   1ba44:	b4 01       	movw	r22, r8
   1ba46:	c5 01       	movw	r24, r10
}
   1ba48:	c3 5e       	subi	r28, 0xE3	; 227
   1ba4a:	de 4f       	sbci	r29, 0xFE	; 254
   1ba4c:	0f b6       	in	r0, 0x3f	; 63
   1ba4e:	f8 94       	cli
   1ba50:	de bf       	out	0x3e, r29	; 62
   1ba52:	0f be       	out	0x3f, r0	; 63
   1ba54:	cd bf       	out	0x3d, r28	; 61
   1ba56:	df 91       	pop	r29
   1ba58:	cf 91       	pop	r28
   1ba5a:	1f 91       	pop	r17
   1ba5c:	0f 91       	pop	r16
   1ba5e:	ff 90       	pop	r15
   1ba60:	ef 90       	pop	r14
   1ba62:	df 90       	pop	r13
   1ba64:	cf 90       	pop	r12
   1ba66:	bf 90       	pop	r11
   1ba68:	af 90       	pop	r10
   1ba6a:	9f 90       	pop	r9
   1ba6c:	8f 90       	pop	r8
   1ba6e:	6f 90       	pop	r6
   1ba70:	5f 90       	pop	r5
   1ba72:	4f 90       	pop	r4
   1ba74:	3f 90       	pop	r3
   1ba76:	2f 90       	pop	r2
   1ba78:	08 95       	ret

0001ba7a <lif_del_file>:
/// @param[in] lifimagename: LIF image name
/// @param[in] lifname: LIF file name
/// @return 1 if deleted, 0 if not found, -1 error
MEMSPACE
int lif_del_file(char *lifimagename, char *lifname)
{
   1ba7a:	ef 92       	push	r14
   1ba7c:	ff 92       	push	r15
   1ba7e:	0f 93       	push	r16
   1ba80:	1f 93       	push	r17
   1ba82:	cf 93       	push	r28
   1ba84:	df 93       	push	r29
   1ba86:	ad b7       	in	r26, 0x3d	; 61
   1ba88:	be b7       	in	r27, 0x3e	; 62
   1ba8a:	17 97       	sbiw	r26, 0x07	; 7
   1ba8c:	0f b6       	in	r0, 0x3f	; 63
   1ba8e:	f8 94       	cli
   1ba90:	be bf       	out	0x3e, r27	; 62
   1ba92:	0f be       	out	0x3f, r0	; 63
   1ba94:	ad bf       	out	0x3d, r26	; 61
   1ba96:	7c 01       	movw	r14, r24
   1ba98:	8b 01       	movw	r16, r22
    lif_t *LIF;
    int index;

    if(!*lifimagename)
   1ba9a:	fc 01       	movw	r30, r24
   1ba9c:	80 81       	ld	r24, Z
   1ba9e:	81 11       	cpse	r24, r1
   1baa0:	03 c0       	rjmp	.+6      	; 0x1baa8 <lif_del_file+0x2e>
    {
        printf("lif_del_file: lifimagename is empty\n");
   1baa2:	8c e5       	ldi	r24, 0x5C	; 92
   1baa4:	94 e3       	ldi	r25, 0x34	; 52
   1baa6:	06 c0       	rjmp	.+12     	; 0x1bab4 <lif_del_file+0x3a>
        return(-1);
    }
    if(!*lifname)
   1baa8:	fb 01       	movw	r30, r22
   1baaa:	80 81       	ld	r24, Z
   1baac:	81 11       	cpse	r24, r1
   1baae:	0b c0       	rjmp	.+22     	; 0x1bac6 <lif_del_file+0x4c>
    {
        printf("lif_del_file: lifname is empty\n");
   1bab0:	8c e3       	ldi	r24, 0x3C	; 60
   1bab2:	94 e3       	ldi	r25, 0x34	; 52
   1bab4:	a0 e0       	ldi	r26, 0x00	; 0
   1bab6:	ed b7       	in	r30, 0x3d	; 61
   1bab8:	fe b7       	in	r31, 0x3e	; 62
   1baba:	81 83       	std	Z+1, r24	; 0x01
   1babc:	92 83       	std	Z+2, r25	; 0x02
   1babe:	a3 83       	std	Z+3, r26	; 0x03
   1bac0:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   1bac4:	68 c0       	rjmp	.+208    	; 0x1bb96 <lif_del_file+0x11c>
        return(-1);
    }
    if(debuglevel & LIF_DEBUG)
   1bac6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1baca:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1bace:	92 ff       	sbrs	r25, 2
   1bad0:	0e c0       	rjmp	.+28     	; 0x1baee <lif_del_file+0x74>
        printf("LIF image:[%s], LIF name:[%s]\n",
   1bad2:	ed b7       	in	r30, 0x3d	; 61
   1bad4:	fe b7       	in	r31, 0x3e	; 62
   1bad6:	77 83       	std	Z+7, r23	; 0x07
   1bad8:	66 83       	std	Z+6, r22	; 0x06
   1bada:	f5 82       	std	Z+5, r15	; 0x05
   1badc:	e4 82       	std	Z+4, r14	; 0x04
   1bade:	8d e1       	ldi	r24, 0x1D	; 29
   1bae0:	94 e3       	ldi	r25, 0x34	; 52
   1bae2:	a0 e0       	ldi	r26, 0x00	; 0
   1bae4:	81 83       	std	Z+1, r24	; 0x01
   1bae6:	92 83       	std	Z+2, r25	; 0x02
   1bae8:	a3 83       	std	Z+3, r26	; 0x03
   1baea:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
            lifimagename, lifname);

    LIF = lif_open_volume(lifimagename,"rb+");
   1baee:	68 e0       	ldi	r22, 0x08	; 8
   1baf0:	79 e0       	ldi	r23, 0x09	; 9
   1baf2:	c7 01       	movw	r24, r14
   1baf4:	0e 94 3b d1 	call	0x1a276	; 0x1a276 <lif_open_volume>
   1baf8:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1bafa:	00 97       	sbiw	r24, 0x00	; 0
   1bafc:	09 f4       	brne	.+2      	; 0x1bb00 <lif_del_file+0x86>
   1bafe:	4b c0       	rjmp	.+150    	; 0x1bb96 <lif_del_file+0x11c>
        return(-1);

// Now find file record
    index = lif_find_file(LIF, lifname);
   1bb00:	b8 01       	movw	r22, r16
   1bb02:	0e 94 10 d4 	call	0x1a820	; 0x1a820 <lif_find_file>
    if(index == -1)
   1bb06:	8f 3f       	cpi	r24, 0xFF	; 255
   1bb08:	ff ef       	ldi	r31, 0xFF	; 255
   1bb0a:	9f 07       	cpc	r25, r31
   1bb0c:	a1 f4       	brne	.+40     	; 0x1bb36 <lif_del_file+0xbc>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bb0e:	ce 01       	movw	r24, r28
   1bb10:	0e 94 7e ca 	call	0x194fc	; 0x194fc <lif_close_volume>
// Now find file record
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        lif_closedir(LIF);
        printf("LIF image:[%s] lif name:[%s] not found\n", lifimagename, lifname);
   1bb14:	ed b7       	in	r30, 0x3d	; 61
   1bb16:	fe b7       	in	r31, 0x3e	; 62
   1bb18:	17 83       	std	Z+7, r17	; 0x07
   1bb1a:	06 83       	std	Z+6, r16	; 0x06
   1bb1c:	f5 82       	std	Z+5, r15	; 0x05
   1bb1e:	e4 82       	std	Z+4, r14	; 0x04
   1bb20:	85 ef       	ldi	r24, 0xF5	; 245
   1bb22:	93 e3       	ldi	r25, 0x33	; 51
   1bb24:	a0 e0       	ldi	r26, 0x00	; 0
   1bb26:	81 83       	std	Z+1, r24	; 0x01
   1bb28:	92 83       	std	Z+2, r25	; 0x02
   1bb2a:	a3 83       	std	Z+3, r26	; 0x03
   1bb2c:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
        return(0);
   1bb30:	80 e0       	ldi	r24, 0x00	; 0
   1bb32:	90 e0       	ldi	r25, 0x00	; 0
   1bb34:	32 c0       	rjmp	.+100    	; 0x1bb9a <lif_del_file+0x120>
    }

// IF the next record is EOF then update EOF
    if(index >= LIF->EOFindex-1)
   1bb36:	2a a1       	ldd	r18, Y+34	; 0x22
   1bb38:	3b a1       	ldd	r19, Y+35	; 0x23
   1bb3a:	21 50       	subi	r18, 0x01	; 1
   1bb3c:	31 09       	sbc	r19, r1
   1bb3e:	fe 01       	movw	r30, r28
   1bb40:	e6 5a       	subi	r30, 0xA6	; 166
   1bb42:	ff 4f       	sbci	r31, 0xFF	; 255
   1bb44:	82 17       	cp	r24, r18
   1bb46:	93 07       	cpc	r25, r19
   1bb48:	2c f0       	brlt	.+10     	; 0x1bb54 <lif_del_file+0xda>
        LIF->DIR.FileType = 0xffff;
   1bb4a:	2f ef       	ldi	r18, 0xFF	; 255
   1bb4c:	3f ef       	ldi	r19, 0xFF	; 255
   1bb4e:	31 83       	std	Z+1, r19	; 0x01
   1bb50:	20 83       	st	Z, r18
   1bb52:	02 c0       	rjmp	.+4      	; 0x1bb58 <lif_del_file+0xde>
    else
        LIF->DIR.FileType = 0;
   1bb54:	11 82       	std	Z+1, r1	; 0x01
   1bb56:	10 82       	st	Z, r1

// re-Write directory record
    if( !lif_writedirindex(LIF,index) )
   1bb58:	bc 01       	movw	r22, r24
   1bb5a:	ce 01       	movw	r24, r28
   1bb5c:	0e 94 73 cb 	call	0x196e6	; 0x196e6 <lif_writedirindex>
   1bb60:	89 2b       	or	r24, r25
   1bb62:	21 f4       	brne	.+8      	; 0x1bb6c <lif_del_file+0xf2>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bb64:	ce 01       	movw	r24, r28
   1bb66:	0e 94 7e ca 	call	0x194fc	; 0x194fc <lif_close_volume>
   1bb6a:	15 c0       	rjmp	.+42     	; 0x1bb96 <lif_del_file+0x11c>
    {
        lif_closedir(LIF);
        return(-1);
    }

    lif_updatefree(LIF);
   1bb6c:	ce 01       	movw	r24, r28
   1bb6e:	0e 94 e7 cb 	call	0x197ce	; 0x197ce <lif_updatefree>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bb72:	ce 01       	movw	r24, r28
   1bb74:	0e 94 7e ca 	call	0x194fc	; 0x194fc <lif_close_volume>
    }

    lif_updatefree(LIF);

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);
   1bb78:	ed b7       	in	r30, 0x3d	; 61
   1bb7a:	fe b7       	in	r31, 0x3e	; 62
   1bb7c:	15 83       	std	Z+5, r17	; 0x05
   1bb7e:	04 83       	std	Z+4, r16	; 0x04
   1bb80:	86 ee       	ldi	r24, 0xE6	; 230
   1bb82:	93 e3       	ldi	r25, 0x33	; 51
   1bb84:	a0 e0       	ldi	r26, 0x00	; 0
   1bb86:	81 83       	std	Z+1, r24	; 0x01
   1bb88:	92 83       	std	Z+2, r25	; 0x02
   1bb8a:	a3 83       	std	Z+3, r26	; 0x03
   1bb8c:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>

    return(1);
   1bb90:	81 e0       	ldi	r24, 0x01	; 1
   1bb92:	90 e0       	ldi	r25, 0x00	; 0
   1bb94:	02 c0       	rjmp	.+4      	; 0x1bb9a <lif_del_file+0x120>
        printf("LIF image:[%s], LIF name:[%s]\n",
            lifimagename, lifname);

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1);
   1bb96:	8f ef       	ldi	r24, 0xFF	; 255
   1bb98:	9f ef       	ldi	r25, 0xFF	; 255

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);

    return(1);
}
   1bb9a:	cd b7       	in	r28, 0x3d	; 61
   1bb9c:	de b7       	in	r29, 0x3e	; 62
   1bb9e:	27 96       	adiw	r28, 0x07	; 7
   1bba0:	e6 e0       	ldi	r30, 0x06	; 6
   1bba2:	0c 94 e3 e6 	jmp	0x1cdc6	; 0x1cdc6 <__epilogue_restores__+0x18>

0001bba6 <lif_rename_file>:
/// @param[in] oldlifname: old LIF file name
/// @param[in] newlifname: new LIF file name
/// @return 1 if renamed, 0 if not found, -1 error
MEMSPACE
int lif_rename_file(char *lifimagename, char *oldlifname, char *newlifname)
{
   1bba6:	a7 e0       	ldi	r26, 0x07	; 7
   1bba8:	b0 e0       	ldi	r27, 0x00	; 0
   1bbaa:	e9 ed       	ldi	r30, 0xD9	; 217
   1bbac:	fd ed       	ldi	r31, 0xDD	; 221
   1bbae:	0c 94 c3 e6 	jmp	0x1cd86	; 0x1cd86 <__prologue_saves__+0x10>
   1bbb2:	6c 01       	movw	r12, r24
   1bbb4:	8b 01       	movw	r16, r22
   1bbb6:	7a 01       	movw	r14, r20
    int index;
    lif_t *LIF;

    if(!*lifimagename)
   1bbb8:	fc 01       	movw	r30, r24
   1bbba:	80 81       	ld	r24, Z
   1bbbc:	81 11       	cpse	r24, r1
   1bbbe:	03 c0       	rjmp	.+6      	; 0x1bbc6 <lif_rename_file+0x20>
    {
        printf("lif_rename_file: lifimagename is empty\n");
   1bbc0:	8e eb       	ldi	r24, 0xBE	; 190
   1bbc2:	93 e3       	ldi	r25, 0x33	; 51
   1bbc4:	06 c0       	rjmp	.+12     	; 0x1bbd2 <lif_rename_file+0x2c>
        return(-1);
    }
    if(!*oldlifname)
   1bbc6:	fb 01       	movw	r30, r22
   1bbc8:	80 81       	ld	r24, Z
   1bbca:	81 11       	cpse	r24, r1
   1bbcc:	0b c0       	rjmp	.+22     	; 0x1bbe4 <lif_rename_file+0x3e>
    {
        printf("lif_rename_file: old lifname is empty\n");
   1bbce:	87 e9       	ldi	r24, 0x97	; 151
   1bbd0:	93 e3       	ldi	r25, 0x33	; 51
   1bbd2:	a0 e0       	ldi	r26, 0x00	; 0
   1bbd4:	ed b7       	in	r30, 0x3d	; 61
   1bbd6:	fe b7       	in	r31, 0x3e	; 62
   1bbd8:	81 83       	std	Z+1, r24	; 0x01
   1bbda:	92 83       	std	Z+2, r25	; 0x02
   1bbdc:	a3 83       	std	Z+3, r26	; 0x03
   1bbde:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   1bbe2:	58 c0       	rjmp	.+176    	; 0x1bc94 <lif_rename_file+0xee>
        return(-1);
    }
    if(!*newlifname)
   1bbe4:	fa 01       	movw	r30, r20
   1bbe6:	80 81       	ld	r24, Z
   1bbe8:	81 11       	cpse	r24, r1
   1bbea:	03 c0       	rjmp	.+6      	; 0x1bbf2 <lif_rename_file+0x4c>
    {
        printf("lif_rename_file: new lifname is empty\n");
   1bbec:	80 e7       	ldi	r24, 0x70	; 112
   1bbee:	93 e3       	ldi	r25, 0x33	; 51
   1bbf0:	f0 cf       	rjmp	.-32     	; 0x1bbd2 <lif_rename_file+0x2c>
        return(-1);
    }

    if(!lif_checkname(newlifname))
   1bbf2:	ca 01       	movw	r24, r20
   1bbf4:	0e 94 cd c2 	call	0x1859a	; 0x1859a <lif_checkname>
   1bbf8:	89 2b       	or	r24, r25
   1bbfa:	19 f4       	brne	.+6      	; 0x1bc02 <lif_rename_file+0x5c>
    {
        printf("lif_rename_file: new lifname contains bad characters\n");
   1bbfc:	8a e3       	ldi	r24, 0x3A	; 58
   1bbfe:	93 e3       	ldi	r25, 0x33	; 51
   1bc00:	e8 cf       	rjmp	.-48     	; 0x1bbd2 <lif_rename_file+0x2c>
        return(-1);

    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1bc02:	68 e0       	ldi	r22, 0x08	; 8
   1bc04:	79 e0       	ldi	r23, 0x09	; 9
   1bc06:	c6 01       	movw	r24, r12
   1bc08:	0e 94 3b d1 	call	0x1a276	; 0x1a276 <lif_open_volume>
   1bc0c:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1bc0e:	00 97       	sbiw	r24, 0x00	; 0
   1bc10:	09 f4       	brne	.+2      	; 0x1bc14 <lif_rename_file+0x6e>
   1bc12:	40 c0       	rjmp	.+128    	; 0x1bc94 <lif_rename_file+0xee>
        return(-1);

// Now find file record
    index = lif_find_file(LIF, oldlifname);
   1bc14:	b8 01       	movw	r22, r16
   1bc16:	0e 94 10 d4 	call	0x1a820	; 0x1a820 <lif_find_file>
   1bc1a:	5c 01       	movw	r10, r24
    if(index == -1)
   1bc1c:	01 96       	adiw	r24, 0x01	; 1
   1bc1e:	a1 f4       	brne	.+40     	; 0x1bc48 <lif_rename_file+0xa2>
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
   1bc20:	ed b7       	in	r30, 0x3d	; 61
   1bc22:	fe b7       	in	r31, 0x3e	; 62
   1bc24:	17 83       	std	Z+7, r17	; 0x07
   1bc26:	06 83       	std	Z+6, r16	; 0x06
   1bc28:	d5 82       	std	Z+5, r13	; 0x05
   1bc2a:	c4 82       	std	Z+4, r12	; 0x04
   1bc2c:	81 e1       	ldi	r24, 0x11	; 17
   1bc2e:	93 e3       	ldi	r25, 0x33	; 51
   1bc30:	a0 e0       	ldi	r26, 0x00	; 0
   1bc32:	81 83       	std	Z+1, r24	; 0x01
   1bc34:	92 83       	std	Z+2, r25	; 0x02
   1bc36:	a3 83       	std	Z+3, r26	; 0x03
   1bc38:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bc3c:	ce 01       	movw	r24, r28
   1bc3e:	0e 94 7e ca 	call	0x194fc	; 0x194fc <lif_close_volume>
    index = lif_find_file(LIF, oldlifname);
    if(index == -1)
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
        lif_closedir(LIF);
        return(0);
   1bc42:	80 e0       	ldi	r24, 0x00	; 0
   1bc44:	90 e0       	ldi	r25, 0x00	; 0
   1bc46:	28 c0       	rjmp	.+80     	; 0x1bc98 <lif_rename_file+0xf2>
    }
    lif_fixname(LIF->DIR.filename, newlifname, 10);
   1bc48:	4a e0       	ldi	r20, 0x0A	; 10
   1bc4a:	50 e0       	ldi	r21, 0x00	; 0
   1bc4c:	b7 01       	movw	r22, r14
   1bc4e:	ce 01       	movw	r24, r28
   1bc50:	81 5b       	subi	r24, 0xB1	; 177
   1bc52:	9f 4f       	sbci	r25, 0xFF	; 255
   1bc54:	0e 94 07 c3 	call	0x1860e	; 0x1860e <lif_fixname>

// re-Write directory record
    if( !lif_writedirindex(LIF,index))
   1bc58:	b5 01       	movw	r22, r10
   1bc5a:	ce 01       	movw	r24, r28
   1bc5c:	0e 94 73 cb 	call	0x196e6	; 0x196e6 <lif_writedirindex>
   1bc60:	89 2b       	or	r24, r25
   1bc62:	21 f4       	brne	.+8      	; 0x1bc6c <lif_rename_file+0xc6>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bc64:	ce 01       	movw	r24, r28
   1bc66:	0e 94 7e ca 	call	0x194fc	; 0x194fc <lif_close_volume>
   1bc6a:	14 c0       	rjmp	.+40     	; 0x1bc94 <lif_rename_file+0xee>
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);
   1bc6c:	ed b7       	in	r30, 0x3d	; 61
   1bc6e:	fe b7       	in	r31, 0x3e	; 62
   1bc70:	f7 82       	std	Z+7, r15	; 0x07
   1bc72:	e6 82       	std	Z+6, r14	; 0x06
   1bc74:	15 83       	std	Z+5, r17	; 0x05
   1bc76:	04 83       	std	Z+4, r16	; 0x04
   1bc78:	8a ef       	ldi	r24, 0xFA	; 250
   1bc7a:	92 e3       	ldi	r25, 0x32	; 50
   1bc7c:	a0 e0       	ldi	r26, 0x00	; 0
   1bc7e:	81 83       	std	Z+1, r24	; 0x01
   1bc80:	92 83       	std	Z+2, r25	; 0x02
   1bc82:	a3 83       	std	Z+3, r26	; 0x03
   1bc84:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bc88:	ce 01       	movw	r24, r28
   1bc8a:	0e 94 7e ca 	call	0x194fc	; 0x194fc <lif_close_volume>
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
   1bc8e:	81 e0       	ldi	r24, 0x01	; 1
   1bc90:	90 e0       	ldi	r25, 0x00	; 0
   1bc92:	02 c0       	rjmp	.+4      	; 0x1bc98 <lif_rename_file+0xf2>

    }

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1);
   1bc94:	8f ef       	ldi	r24, 0xFF	; 255
   1bc96:	9f ef       	ldi	r25, 0xFF	; 255
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
}
   1bc98:	cd b7       	in	r28, 0x3d	; 61
   1bc9a:	de b7       	in	r29, 0x3e	; 62
   1bc9c:	27 96       	adiw	r28, 0x07	; 7
   1bc9e:	ea e0       	ldi	r30, 0x0A	; 10
   1bca0:	0c 94 df e6 	jmp	0x1cdbe	; 0x1cdbe <__epilogue_restores__+0x10>

0001bca4 <lif_create_image>:
/// @param[in] dirsectors: Number of LIF directory sectors
/// @param[in] sectors: total disk image size in sectors
///@return bytes writting to disk image
MEMSPACE
long lif_create_image(char *lifimagename, char *liflabel, uint32_t dirsectors, uint32_t sectors)
{
   1bca4:	4f 92       	push	r4
   1bca6:	5f 92       	push	r5
   1bca8:	6f 92       	push	r6
   1bcaa:	7f 92       	push	r7
   1bcac:	af 92       	push	r10
   1bcae:	bf 92       	push	r11
   1bcb0:	cf 92       	push	r12
   1bcb2:	df 92       	push	r13
   1bcb4:	ef 92       	push	r14
   1bcb6:	ff 92       	push	r15
   1bcb8:	0f 93       	push	r16
   1bcba:	1f 93       	push	r17
   1bcbc:	cf 93       	push	r28
   1bcbe:	df 93       	push	r29
   1bcc0:	ad b7       	in	r26, 0x3d	; 61
   1bcc2:	be b7       	in	r27, 0x3e	; 62
   1bcc4:	17 97       	sbiw	r26, 0x07	; 7
   1bcc6:	0f b6       	in	r0, 0x3f	; 63
   1bcc8:	f8 94       	cli
   1bcca:	be bf       	out	0x3e, r27	; 62
   1bccc:	0f be       	out	0x3f, r0	; 63
   1bcce:	ad bf       	out	0x3d, r26	; 61
   1bcd0:	27 01       	movw	r4, r14
   1bcd2:	38 01       	movw	r6, r16
    uint32_t dirstart,filestart,filesectors,end;
    lif_t *LIF;

    if(!*lifimagename)
   1bcd4:	dc 01       	movw	r26, r24
   1bcd6:	ec 91       	ld	r30, X
   1bcd8:	e1 11       	cpse	r30, r1
   1bcda:	03 c0       	rjmp	.+6      	; 0x1bce2 <lif_create_image+0x3e>
    {
        printf("lif_create_image: lifimagename is empty\n");
   1bcdc:	81 ed       	ldi	r24, 0xD1	; 209
   1bcde:	92 e3       	ldi	r25, 0x32	; 50
   1bce0:	16 c0       	rjmp	.+44     	; 0x1bd0e <lif_create_image+0x6a>
        return(-1);
    }
    if(!*liflabel)
   1bce2:	db 01       	movw	r26, r22
   1bce4:	ec 91       	ld	r30, X
   1bce6:	e1 11       	cpse	r30, r1
   1bce8:	03 c0       	rjmp	.+6      	; 0x1bcf0 <lif_create_image+0x4c>
    {
        printf("lif_create_image: liflabel is empty\n");
   1bcea:	8c ea       	ldi	r24, 0xAC	; 172
   1bcec:	92 e3       	ldi	r25, 0x32	; 50
   1bcee:	0f c0       	rjmp	.+30     	; 0x1bd0e <lif_create_image+0x6a>
        return(-1);
    }
    if(!dirsectors)
   1bcf0:	21 15       	cp	r18, r1
   1bcf2:	31 05       	cpc	r19, r1
   1bcf4:	41 05       	cpc	r20, r1
   1bcf6:	51 05       	cpc	r21, r1
   1bcf8:	19 f4       	brne	.+6      	; 0x1bd00 <lif_create_image+0x5c>
    {
        printf("lif_create_image: dirsectors is 0\n");
   1bcfa:	89 e8       	ldi	r24, 0x89	; 137
   1bcfc:	92 e3       	ldi	r25, 0x32	; 50
   1bcfe:	07 c0       	rjmp	.+14     	; 0x1bd0e <lif_create_image+0x6a>
        return(-1);
    }
    if(!sectors)
   1bd00:	e1 14       	cp	r14, r1
   1bd02:	f1 04       	cpc	r15, r1
   1bd04:	01 05       	cpc	r16, r1
   1bd06:	11 05       	cpc	r17, r1
   1bd08:	59 f4       	brne	.+22     	; 0x1bd20 <lif_create_image+0x7c>
    {
        printf("lif_create_image: sectors is 0\n");
   1bd0a:	89 e6       	ldi	r24, 0x69	; 105
   1bd0c:	92 e3       	ldi	r25, 0x32	; 50
   1bd0e:	a0 e0       	ldi	r26, 0x00	; 0
   1bd10:	ed b7       	in	r30, 0x3d	; 61
   1bd12:	fe b7       	in	r31, 0x3e	; 62
   1bd14:	81 83       	std	Z+1, r24	; 0x01
   1bd16:	92 83       	std	Z+2, r25	; 0x02
   1bd18:	a3 83       	std	Z+3, r26	; 0x03
   1bd1a:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   1bd1e:	2b c0       	rjmp	.+86     	; 0x1bd76 <lif_create_image+0xd2>
    dirstart = 2;
    filestart = dirstart + dirsectors;
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
   1bd20:	67 01       	movw	r12, r14
   1bd22:	78 01       	movw	r14, r16
   1bd24:	f2 e0       	ldi	r31, 0x02	; 2
   1bd26:	cf 1a       	sub	r12, r31
   1bd28:	d1 08       	sbc	r13, r1
   1bd2a:	e1 08       	sbc	r14, r1
   1bd2c:	f1 08       	sbc	r15, r1
   1bd2e:	56 01       	movw	r10, r12
   1bd30:	67 01       	movw	r12, r14
   1bd32:	a2 1a       	sub	r10, r18
   1bd34:	b3 0a       	sbc	r11, r19
   1bd36:	c4 0a       	sbc	r12, r20
   1bd38:	d5 0a       	sbc	r13, r21
   1bd3a:	79 01       	movw	r14, r18
   1bd3c:	8a 01       	movw	r16, r20
   1bd3e:	22 e0       	ldi	r18, 0x02	; 2
   1bd40:	30 e0       	ldi	r19, 0x00	; 0
   1bd42:	40 e0       	ldi	r20, 0x00	; 0
   1bd44:	50 e0       	ldi	r21, 0x00	; 0
   1bd46:	0e 94 f1 cc 	call	0x199e2	; 0x199e2 <lif_create_volume>
    if(LIF == NULL)
   1bd4a:	00 97       	sbiw	r24, 0x00	; 0
   1bd4c:	a1 f0       	breq	.+40     	; 0x1bd76 <lif_create_image+0xd2>
        return(-1);
    lif_close_volume(LIF);
   1bd4e:	0e 94 7e ca 	call	0x194fc	; 0x194fc <lif_close_volume>

    printf("\tFormatting: wrote %ld sectors\n", (long)end);
   1bd52:	82 01       	movw	r16, r4
   1bd54:	d6 2d       	mov	r29, r6
   1bd56:	c7 2d       	mov	r28, r7
   1bd58:	ed b7       	in	r30, 0x3d	; 61
   1bd5a:	fe b7       	in	r31, 0x3e	; 62
   1bd5c:	44 82       	std	Z+4, r4	; 0x04
   1bd5e:	15 83       	std	Z+5, r17	; 0x05
   1bd60:	66 82       	std	Z+6, r6	; 0x06
   1bd62:	77 82       	std	Z+7, r7	; 0x07
   1bd64:	89 e4       	ldi	r24, 0x49	; 73
   1bd66:	92 e3       	ldi	r25, 0x32	; 50
   1bd68:	a0 e0       	ldi	r26, 0x00	; 0
   1bd6a:	81 83       	std	Z+1, r24	; 0x01
   1bd6c:	92 83       	std	Z+2, r25	; 0x02
   1bd6e:	a3 83       	std	Z+3, r26	; 0x03
   1bd70:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    return(end);
   1bd74:	04 c0       	rjmp	.+8      	; 0x1bd7e <lif_create_image+0xda>
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
    if(LIF == NULL)
        return(-1);
   1bd76:	0f ef       	ldi	r16, 0xFF	; 255
   1bd78:	1f ef       	ldi	r17, 0xFF	; 255
   1bd7a:	df ef       	ldi	r29, 0xFF	; 255
   1bd7c:	cf ef       	ldi	r28, 0xFF	; 255
    lif_close_volume(LIF);

    printf("\tFormatting: wrote %ld sectors\n", (long)end);
    return(end);
}
   1bd7e:	b8 01       	movw	r22, r16
   1bd80:	8d 2f       	mov	r24, r29
   1bd82:	9c 2f       	mov	r25, r28
   1bd84:	ad b7       	in	r26, 0x3d	; 61
   1bd86:	be b7       	in	r27, 0x3e	; 62
   1bd88:	17 96       	adiw	r26, 0x07	; 7
   1bd8a:	0f b6       	in	r0, 0x3f	; 63
   1bd8c:	f8 94       	cli
   1bd8e:	be bf       	out	0x3e, r27	; 62
   1bd90:	0f be       	out	0x3f, r0	; 63
   1bd92:	ad bf       	out	0x3d, r26	; 61
   1bd94:	df 91       	pop	r29
   1bd96:	cf 91       	pop	r28
   1bd98:	1f 91       	pop	r17
   1bd9a:	0f 91       	pop	r16
   1bd9c:	ff 90       	pop	r15
   1bd9e:	ef 90       	pop	r14
   1bda0:	df 90       	pop	r13
   1bda2:	cf 90       	pop	r12
   1bda4:	bf 90       	pop	r11
   1bda6:	af 90       	pop	r10
   1bda8:	7f 90       	pop	r7
   1bdaa:	6f 90       	pop	r6
   1bdac:	5f 90       	pop	r5
   1bdae:	4f 90       	pop	r4
   1bdb0:	08 95       	ret

0001bdb2 <lif_tests>:

/// @brief LIF user tests
/// @return  1 matched token, 0 if not
MEMSPACE
int lif_tests(int argc, char *argv[])
{
   1bdb2:	a5 e0       	ldi	r26, 0x05	; 5
   1bdb4:	b0 e0       	ldi	r27, 0x00	; 0
   1bdb6:	ee ed       	ldi	r30, 0xDE	; 222
   1bdb8:	fe ed       	ldi	r31, 0xDE	; 222
   1bdba:	e3 c7       	rjmp	.+4038   	; 0x1cd82 <__prologue_saves__+0xc>
        printf("%d:%s\n", i, argv[i]);
    printf("\n");
#endif

// Nothing to do ?
    if(argc < 2)
   1bdbc:	82 30       	cpi	r24, 0x02	; 2
   1bdbe:	91 05       	cpc	r25, r1
   1bdc0:	1c f4       	brge	.+6      	; 0x1bdc8 <lif_tests+0x16>
        return (0);
   1bdc2:	80 e0       	ldi	r24, 0x00	; 0
   1bdc4:	90 e0       	ldi	r25, 0x00	; 0
   1bdc6:	8f c1       	rjmp	.+798    	; 0x1c0e6 <lif_tests+0x334>

// Argument 1
    ind = 1;
    ptr = argv[ind++];
   1bdc8:	fb 01       	movw	r30, r22
   1bdca:	e2 80       	ldd	r14, Z+2	; 0x02
   1bdcc:	f3 80       	ldd	r15, Z+3	; 0x03

// Argument 1 missing ?
//        Nothing to do
// argc should really get this
    if(!ptr || !*ptr)
   1bdce:	e1 14       	cp	r14, r1
   1bdd0:	f1 04       	cpc	r15, r1
   1bdd2:	09 f4       	brne	.+2      	; 0x1bdd6 <lif_tests+0x24>
   1bdd4:	86 c1       	rjmp	.+780    	; 0x1c0e2 <lif_tests+0x330>
   1bdd6:	f7 01       	movw	r30, r14
   1bdd8:	20 81       	ld	r18, Z
   1bdda:	22 23       	and	r18, r18
   1bddc:	09 f4       	brne	.+2      	; 0x1bde0 <lif_tests+0x2e>
   1bdde:	81 c1       	rjmp	.+770    	; 0x1c0e2 <lif_tests+0x330>
   1bde0:	8b 01       	movw	r16, r22
   1bde2:	6c 01       	movw	r12, r24
        return(1);


	if(MATCHI_LEN(argv[0],"lif"))
   1bde4:	63 eb       	ldi	r22, 0xB3	; 179
   1bde6:	76 e1       	ldi	r23, 0x16	; 22
   1bde8:	f8 01       	movw	r30, r16
   1bdea:	80 81       	ld	r24, Z
   1bdec:	91 81       	ldd	r25, Z+1	; 0x01
   1bdee:	0e 94 76 32 	call	0x64ec	; 0x64ec <MATCHI_LEN>
   1bdf2:	89 2b       	or	r24, r25
   1bdf4:	d1 f0       	breq	.+52     	; 0x1be2a <lif_tests+0x78>
	{
		if(MATCHI(ptr,"help") || MATCHI(ptr,"-help") || MATCHI(ptr,"-?") )
   1bdf6:	6d e6       	ldi	r22, 0x6D	; 109
   1bdf8:	76 e1       	ldi	r23, 0x16	; 22
   1bdfa:	c7 01       	movw	r24, r14
   1bdfc:	0e 94 38 32 	call	0x6470	; 0x6470 <MATCHI>
   1be00:	89 2b       	or	r24, r25
   1be02:	29 f0       	breq	.+10     	; 0x1be0e <lif_tests+0x5c>
		{
			lif_help(1);
   1be04:	81 e0       	ldi	r24, 0x01	; 1
   1be06:	90 e0       	ldi	r25, 0x00	; 0
   1be08:	0e 94 a3 c0 	call	0x18146	; 0x18146 <lif_help>
   1be0c:	6a c1       	rjmp	.+724    	; 0x1c0e2 <lif_tests+0x330>
        return(1);


	if(MATCHI_LEN(argv[0],"lif"))
	{
		if(MATCHI(ptr,"help") || MATCHI(ptr,"-help") || MATCHI(ptr,"-?") )
   1be0e:	6c e6       	ldi	r22, 0x6C	; 108
   1be10:	76 e1       	ldi	r23, 0x16	; 22
   1be12:	c7 01       	movw	r24, r14
   1be14:	0e 94 38 32 	call	0x6470	; 0x6470 <MATCHI>
   1be18:	89 2b       	or	r24, r25
   1be1a:	a1 f7       	brne	.-24     	; 0x1be04 <lif_tests+0x52>
   1be1c:	62 e7       	ldi	r22, 0x72	; 114
   1be1e:	76 e1       	ldi	r23, 0x16	; 22
   1be20:	c7 01       	movw	r24, r14
   1be22:	0e 94 38 32 	call	0x6470	; 0x6470 <MATCHI>
   1be26:	89 2b       	or	r24, r25
   1be28:	69 f7       	brne	.-38     	; 0x1be04 <lif_tests+0x52>
		}
	}

// Turn one debugging
// in the future we can add tests for specific messages
	debuglevel &= ~0x400;
   1be2a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1be2e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1be32:	9b 7f       	andi	r25, 0xFB	; 251
   1be34:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <debuglevel+0x1>
   1be38:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <debuglevel>
    if (MATCHARGS(ptr,"-d", (ind + 0) ,argc))
   1be3c:	96 01       	movw	r18, r12
   1be3e:	42 e0       	ldi	r20, 0x02	; 2
   1be40:	50 e0       	ldi	r21, 0x00	; 0
   1be42:	65 e7       	ldi	r22, 0x75	; 117
   1be44:	76 e1       	ldi	r23, 0x16	; 22
   1be46:	c7 01       	movw	r24, r14
   1be48:	0e 94 4c 32 	call	0x6498	; 0x6498 <MATCHARGS>
   1be4c:	89 2b       	or	r24, r25
   1be4e:	79 f0       	breq	.+30     	; 0x1be6e <lif_tests+0xbc>
    {
        debuglevel |= 0x400;
   1be50:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1be54:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1be58:	94 60       	ori	r25, 0x04	; 4
   1be5a:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <debuglevel+0x1>
   1be5e:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <debuglevel>
        ptr = argv[ind++];
   1be62:	f8 01       	movw	r30, r16
   1be64:	e4 80       	ldd	r14, Z+4	; 0x04
   1be66:	f5 80       	ldd	r15, Z+5	; 0x05
   1be68:	c3 e0       	ldi	r28, 0x03	; 3
   1be6a:	d0 e0       	ldi	r29, 0x00	; 0
   1be6c:	02 c0       	rjmp	.+4      	; 0x1be72 <lif_tests+0xc0>
    if(argc < 2)
        return (0);

// Argument 1
    ind = 1;
    ptr = argv[ind++];
   1be6e:	c2 e0       	ldi	r28, 0x02	; 2
   1be70:	d0 e0       	ldi	r29, 0x00	; 0
    {
        debuglevel |= 0x400;
        ptr = argv[ind++];
    }

    if (MATCHARGS(ptr,"addbin", (ind + 3) ,argc))
   1be72:	5e 01       	movw	r10, r28
   1be74:	f3 e0       	ldi	r31, 0x03	; 3
   1be76:	af 0e       	add	r10, r31
   1be78:	b1 1c       	adc	r11, r1
   1be7a:	96 01       	movw	r18, r12
   1be7c:	a5 01       	movw	r20, r10
   1be7e:	68 e7       	ldi	r22, 0x78	; 120
   1be80:	76 e1       	ldi	r23, 0x16	; 22
   1be82:	c7 01       	movw	r24, r14
   1be84:	0e 94 4c 32 	call	0x6498	; 0x6498 <MATCHARGS>
   1be88:	89 2b       	or	r24, r25
   1be8a:	61 f0       	breq	.+24     	; 0x1bea4 <lif_tests+0xf2>
    {
        lif_add_lif_file(argv[ind],argv[ind+1],argv[ind+2]);
   1be8c:	cc 0f       	add	r28, r28
   1be8e:	dd 1f       	adc	r29, r29
   1be90:	c0 0f       	add	r28, r16
   1be92:	d1 1f       	adc	r29, r17
   1be94:	4c 81       	ldd	r20, Y+4	; 0x04
   1be96:	5d 81       	ldd	r21, Y+5	; 0x05
   1be98:	6a 81       	ldd	r22, Y+2	; 0x02
   1be9a:	7b 81       	ldd	r23, Y+3	; 0x03
   1be9c:	88 81       	ld	r24, Y
   1be9e:	99 81       	ldd	r25, Y+1	; 0x01
   1bea0:	63 dc       	rcall	.-1850   	; 0x1b768 <lif_add_lif_file>
   1bea2:	1f c1       	rjmp	.+574    	; 0x1c0e2 <lif_tests+0x330>

        return(1);
    }

    if (MATCHARGS(ptr,"add", (ind + 3) ,argc))
   1bea4:	96 01       	movw	r18, r12
   1bea6:	a5 01       	movw	r20, r10
   1bea8:	6f e7       	ldi	r22, 0x7F	; 127
   1beaa:	76 e1       	ldi	r23, 0x16	; 22
   1beac:	c7 01       	movw	r24, r14
   1beae:	0e 94 4c 32 	call	0x6498	; 0x6498 <MATCHARGS>
   1beb2:	89 2b       	or	r24, r25
   1beb4:	69 f0       	breq	.+26     	; 0x1bed0 <lif_tests+0x11e>
    {
        lif_add_ascii_file_as_e010(argv[ind],argv[ind+1],argv[ind+2]);
   1beb6:	cc 0f       	add	r28, r28
   1beb8:	dd 1f       	adc	r29, r29
   1beba:	c0 0f       	add	r28, r16
   1bebc:	d1 1f       	adc	r29, r17
   1bebe:	4c 81       	ldd	r20, Y+4	; 0x04
   1bec0:	5d 81       	ldd	r21, Y+5	; 0x05
   1bec2:	6a 81       	ldd	r22, Y+2	; 0x02
   1bec4:	7b 81       	ldd	r23, Y+3	; 0x03
   1bec6:	88 81       	ld	r24, Y
   1bec8:	99 81       	ldd	r25, Y+1	; 0x01
   1beca:	0e 94 91 d6 	call	0x1ad22	; 0x1ad22 <lif_add_ascii_file_as_e010>
   1bece:	09 c1       	rjmp	.+530    	; 0x1c0e2 <lif_tests+0x330>
        return(1);
    }
    if (MATCHARGS(ptr,"createdisk", (ind + 3) ,argc))
   1bed0:	96 01       	movw	r18, r12
   1bed2:	a5 01       	movw	r20, r10
   1bed4:	63 e8       	ldi	r22, 0x83	; 131
   1bed6:	76 e1       	ldi	r23, 0x16	; 22
   1bed8:	c7 01       	movw	r24, r14
   1beda:	0e 94 4c 32 	call	0x6498	; 0x6498 <MATCHARGS>
   1bede:	89 2b       	or	r24, r25
   1bee0:	09 f4       	brne	.+2      	; 0x1bee4 <lif_tests+0x132>
   1bee2:	42 c0       	rjmp	.+132    	; 0x1bf68 <lif_tests+0x1b6>
    {
///@brief format LIF image
        long dir,sectors;
        char *name = argv[ind];
   1bee4:	ce 01       	movw	r24, r28
   1bee6:	88 0f       	add	r24, r24
   1bee8:	99 1f       	adc	r25, r25
   1beea:	e8 01       	movw	r28, r16
   1beec:	c8 0f       	add	r28, r24
   1beee:	d9 1f       	adc	r29, r25
   1bef0:	c8 80       	ld	r12, Y
   1bef2:	d9 80       	ldd	r13, Y+1	; 0x01
        char *label = argv[ind+1];
   1bef4:	aa 80       	ldd	r10, Y+2	; 0x02
   1bef6:	bb 80       	ldd	r11, Y+3	; 0x03
        char *model = argv[ind+2];
   1bef8:	0c 80       	ldd	r0, Y+4	; 0x04
   1befa:	dd 81       	ldd	r29, Y+5	; 0x05
   1befc:	c0 2d       	mov	r28, r0
        if( MATCHI_LEN(model,"hp"))
   1befe:	6e e8       	ldi	r22, 0x8E	; 142
   1bf00:	76 e1       	ldi	r23, 0x16	; 22
   1bf02:	ce 01       	movw	r24, r28
   1bf04:	0e 94 76 32 	call	0x64ec	; 0x64ec <MATCHI_LEN>
   1bf08:	89 2b       	or	r24, r25
   1bf0a:	09 f0       	breq	.+2      	; 0x1bf0e <lif_tests+0x15c>
            model +=2;
   1bf0c:	22 96       	adiw	r28, 0x02	; 2
        if(hpdir_find_drive(model,0, 0))
   1bf0e:	40 e0       	ldi	r20, 0x00	; 0
   1bf10:	50 e0       	ldi	r21, 0x00	; 0
   1bf12:	60 e0       	ldi	r22, 0x00	; 0
   1bf14:	70 e0       	ldi	r23, 0x00	; 0
   1bf16:	ce 01       	movw	r24, r28
   1bf18:	0e 94 e6 a3 	call	0x147cc	; 0x147cc <hpdir_find_drive>
   1bf1c:	89 2b       	or	r24, r25
   1bf1e:	b9 f0       	breq	.+46     	; 0x1bf4e <lif_tests+0x19c>
        {
            dir = lif_dir_count(hpdir.BLOCKS);
   1bf20:	60 91 24 20 	lds	r22, 0x2024	; 0x802024 <hpdir+0xac>
   1bf24:	70 91 25 20 	lds	r23, 0x2025	; 0x802025 <hpdir+0xad>
   1bf28:	80 91 26 20 	lds	r24, 0x2026	; 0x802026 <hpdir+0xae>
   1bf2c:	90 91 27 20 	lds	r25, 0x2027	; 0x802027 <hpdir+0xaf>
   1bf30:	0e 94 c9 a3 	call	0x14792	; 0x14792 <lif_dir_count>
   1bf34:	9b 01       	movw	r18, r22
   1bf36:	ac 01       	movw	r20, r24
            sectors = hpdir.BLOCKS;
			// NOTE: we could grab the directory size for non 0 entries in the hpdir.ini file - I use a computed value which is also fine
            lif_create_image(name, label, dir, sectors);
   1bf38:	e0 90 24 20 	lds	r14, 0x2024	; 0x802024 <hpdir+0xac>
   1bf3c:	f0 90 25 20 	lds	r15, 0x2025	; 0x802025 <hpdir+0xad>
   1bf40:	00 91 26 20 	lds	r16, 0x2026	; 0x802026 <hpdir+0xae>
   1bf44:	10 91 27 20 	lds	r17, 0x2027	; 0x802027 <hpdir+0xaf>
   1bf48:	b5 01       	movw	r22, r10
   1bf4a:	c6 01       	movw	r24, r12
   1bf4c:	2e c0       	rjmp	.+92     	; 0x1bfaa <lif_tests+0x1f8>
            return(1);
        }
        printf("Disk: %s not found in hpdir.ini\n", model);
   1bf4e:	ed b7       	in	r30, 0x3d	; 61
   1bf50:	fe b7       	in	r31, 0x3e	; 62
   1bf52:	d5 83       	std	Z+5, r29	; 0x05
   1bf54:	c4 83       	std	Z+4, r28	; 0x04
   1bf56:	8a e9       	ldi	r24, 0x9A	; 154
   1bf58:	94 e4       	ldi	r25, 0x44	; 68
   1bf5a:	a0 e0       	ldi	r26, 0x00	; 0
   1bf5c:	81 83       	std	Z+1, r24	; 0x01
   1bf5e:	92 83       	std	Z+2, r25	; 0x02
   1bf60:	a3 83       	std	Z+3, r26	; 0x03
   1bf62:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   1bf66:	bd c0       	rjmp	.+378    	; 0x1c0e2 <lif_tests+0x330>
        return(1);
    }
    if (MATCHARGS(ptr,"create", (ind + 4) ,argc))
   1bf68:	96 01       	movw	r18, r12
   1bf6a:	ae 01       	movw	r20, r28
   1bf6c:	4c 5f       	subi	r20, 0xFC	; 252
   1bf6e:	5f 4f       	sbci	r21, 0xFF	; 255
   1bf70:	61 e9       	ldi	r22, 0x91	; 145
   1bf72:	76 e1       	ldi	r23, 0x16	; 22
   1bf74:	c7 01       	movw	r24, r14
   1bf76:	0e 94 4c 32 	call	0x6498	; 0x6498 <MATCHARGS>
   1bf7a:	89 2b       	or	r24, r25
   1bf7c:	c1 f0       	breq	.+48     	; 0x1bfae <lif_tests+0x1fc>
    {
///@brief format LIF image
        lif_create_image(argv[ind],argv[ind+1], atol(argv[ind+2]), atol(argv[ind+3]) );
   1bf7e:	cc 0f       	add	r28, r28
   1bf80:	dd 1f       	adc	r29, r29
   1bf82:	c0 0f       	add	r28, r16
   1bf84:	d1 1f       	adc	r29, r17
   1bf86:	8c 81       	ldd	r24, Y+4	; 0x04
   1bf88:	9d 81       	ldd	r25, Y+5	; 0x05
   1bf8a:	0e 94 8b 47 	call	0x8f16	; 0x8f16 <atol>
   1bf8e:	4b 01       	movw	r8, r22
   1bf90:	5c 01       	movw	r10, r24
   1bf92:	8e 81       	ldd	r24, Y+6	; 0x06
   1bf94:	9f 81       	ldd	r25, Y+7	; 0x07
   1bf96:	0e 94 8b 47 	call	0x8f16	; 0x8f16 <atol>
   1bf9a:	7b 01       	movw	r14, r22
   1bf9c:	8c 01       	movw	r16, r24
   1bf9e:	6a 81       	ldd	r22, Y+2	; 0x02
   1bfa0:	7b 81       	ldd	r23, Y+3	; 0x03
   1bfa2:	a5 01       	movw	r20, r10
   1bfa4:	94 01       	movw	r18, r8
   1bfa6:	88 81       	ld	r24, Y
   1bfa8:	99 81       	ldd	r25, Y+1	; 0x01
   1bfaa:	7c de       	rcall	.-776    	; 0x1bca4 <lif_create_image>
   1bfac:	9a c0       	rjmp	.+308    	; 0x1c0e2 <lif_tests+0x330>
        return(1);
    }
    if (MATCHARGS(ptr,"del", (ind + 2) ,argc))
   1bfae:	96 01       	movw	r18, r12
   1bfb0:	ae 01       	movw	r20, r28
   1bfb2:	4e 5f       	subi	r20, 0xFE	; 254
   1bfb4:	5f 4f       	sbci	r21, 0xFF	; 255
   1bfb6:	68 e9       	ldi	r22, 0x98	; 152
   1bfb8:	76 e1       	ldi	r23, 0x16	; 22
   1bfba:	c7 01       	movw	r24, r14
   1bfbc:	0e 94 4c 32 	call	0x6498	; 0x6498 <MATCHARGS>
   1bfc0:	89 2b       	or	r24, r25
   1bfc2:	51 f0       	breq	.+20     	; 0x1bfd8 <lif_tests+0x226>
    {
        lif_del_file(argv[ind],argv[ind+1]);
   1bfc4:	cc 0f       	add	r28, r28
   1bfc6:	dd 1f       	adc	r29, r29
   1bfc8:	c0 0f       	add	r28, r16
   1bfca:	d1 1f       	adc	r29, r17
   1bfcc:	6a 81       	ldd	r22, Y+2	; 0x02
   1bfce:	7b 81       	ldd	r23, Y+3	; 0x03
   1bfd0:	88 81       	ld	r24, Y
   1bfd2:	99 81       	ldd	r25, Y+1	; 0x01
   1bfd4:	52 dd       	rcall	.-1372   	; 0x1ba7a <lif_del_file>
   1bfd6:	85 c0       	rjmp	.+266    	; 0x1c0e2 <lif_tests+0x330>
        return(1);
    }
    if (MATCHARGS(ptr,"dir", (ind + 1) ,argc))
   1bfd8:	96 01       	movw	r18, r12
   1bfda:	ae 01       	movw	r20, r28
   1bfdc:	4f 5f       	subi	r20, 0xFF	; 255
   1bfde:	5f 4f       	sbci	r21, 0xFF	; 255
   1bfe0:	68 ed       	ldi	r22, 0xD8	; 216
   1bfe2:	7b e0       	ldi	r23, 0x0B	; 11
   1bfe4:	c7 01       	movw	r24, r14
   1bfe6:	0e 94 4c 32 	call	0x6498	; 0x6498 <MATCHARGS>
   1bfea:	89 2b       	or	r24, r25
   1bfec:	49 f0       	breq	.+18     	; 0x1c000 <lif_tests+0x24e>
    {
        lif_dir(argv[ind]);
   1bfee:	cc 0f       	add	r28, r28
   1bff0:	dd 1f       	adc	r29, r29
   1bff2:	c0 0f       	add	r28, r16
   1bff4:	d1 1f       	adc	r29, r17
   1bff6:	88 81       	ld	r24, Y
   1bff8:	99 81       	ldd	r25, Y+1	; 0x01
   1bffa:	0e 94 3b d2 	call	0x1a476	; 0x1a476 <lif_dir>
   1bffe:	71 c0       	rjmp	.+226    	; 0x1c0e2 <lif_tests+0x330>
        return(1);
    }
    if (MATCHARGS(ptr,"extractbin", (ind + 3) ,argc))
   1c000:	96 01       	movw	r18, r12
   1c002:	a5 01       	movw	r20, r10
   1c004:	6c e9       	ldi	r22, 0x9C	; 156
   1c006:	76 e1       	ldi	r23, 0x16	; 22
   1c008:	c7 01       	movw	r24, r14
   1c00a:	0e 94 4c 32 	call	0x6498	; 0x6498 <MATCHARGS>
   1c00e:	89 2b       	or	r24, r25
   1c010:	71 f0       	breq	.+28     	; 0x1c02e <lif_tests+0x27c>
    {

        lif_extract_lif_as_lif(argv[ind],argv[ind+1],argv[ind+2]);
   1c012:	ce 01       	movw	r24, r28
   1c014:	88 0f       	add	r24, r24
   1c016:	99 1f       	adc	r25, r25
   1c018:	e8 01       	movw	r28, r16
   1c01a:	c8 0f       	add	r28, r24
   1c01c:	d9 1f       	adc	r29, r25
   1c01e:	4c 81       	ldd	r20, Y+4	; 0x04
   1c020:	5d 81       	ldd	r21, Y+5	; 0x05
   1c022:	6a 81       	ldd	r22, Y+2	; 0x02
   1c024:	7b 81       	ldd	r23, Y+3	; 0x03
   1c026:	88 81       	ld	r24, Y
   1c028:	99 81       	ldd	r25, Y+1	; 0x01
   1c02a:	66 da       	rcall	.-2868   	; 0x1b4f8 <lif_extract_lif_as_lif>
   1c02c:	5a c0       	rjmp	.+180    	; 0x1c0e2 <lif_tests+0x330>
        return(1);
    }
    if (MATCHARGS(ptr,"extract", (ind + 3) ,argc))
   1c02e:	96 01       	movw	r18, r12
   1c030:	a5 01       	movw	r20, r10
   1c032:	67 ea       	ldi	r22, 0xA7	; 167
   1c034:	76 e1       	ldi	r23, 0x16	; 22
   1c036:	c7 01       	movw	r24, r14
   1c038:	0e 94 4c 32 	call	0x6498	; 0x6498 <MATCHARGS>
   1c03c:	89 2b       	or	r24, r25
   1c03e:	79 f0       	breq	.+30     	; 0x1c05e <lif_tests+0x2ac>
    {

        lif_extract_e010_as_ascii(argv[ind],argv[ind+1],argv[ind+2]);
   1c040:	ce 01       	movw	r24, r28
   1c042:	88 0f       	add	r24, r24
   1c044:	99 1f       	adc	r25, r25
   1c046:	e8 01       	movw	r28, r16
   1c048:	c8 0f       	add	r28, r24
   1c04a:	d9 1f       	adc	r29, r25
   1c04c:	4c 81       	ldd	r20, Y+4	; 0x04
   1c04e:	5d 81       	ldd	r21, Y+5	; 0x05
   1c050:	6a 81       	ldd	r22, Y+2	; 0x02
   1c052:	7b 81       	ldd	r23, Y+3	; 0x03
   1c054:	88 81       	ld	r24, Y
   1c056:	99 81       	ldd	r25, Y+1	; 0x01
   1c058:	0e 94 cd d7 	call	0x1af9a	; 0x1af9a <lif_extract_e010_as_ascii>
   1c05c:	42 c0       	rjmp	.+132    	; 0x1c0e2 <lif_tests+0x330>
        return(1);
    }
    if (MATCHARGS(ptr,"rename", (ind + 3) ,argc))
   1c05e:	96 01       	movw	r18, r12
   1c060:	a5 01       	movw	r20, r10
   1c062:	65 ee       	ldi	r22, 0xE5	; 229
   1c064:	7b e0       	ldi	r23, 0x0B	; 11
   1c066:	c7 01       	movw	r24, r14
   1c068:	0e 94 4c 32 	call	0x6498	; 0x6498 <MATCHARGS>
   1c06c:	89 2b       	or	r24, r25
   1c06e:	71 f0       	breq	.+28     	; 0x1c08c <lif_tests+0x2da>
    {
        lif_rename_file(argv[ind],argv[ind+1],argv[ind+2]);
   1c070:	ce 01       	movw	r24, r28
   1c072:	88 0f       	add	r24, r24
   1c074:	99 1f       	adc	r25, r25
   1c076:	e8 01       	movw	r28, r16
   1c078:	c8 0f       	add	r28, r24
   1c07a:	d9 1f       	adc	r29, r25
   1c07c:	4c 81       	ldd	r20, Y+4	; 0x04
   1c07e:	5d 81       	ldd	r21, Y+5	; 0x05
   1c080:	6a 81       	ldd	r22, Y+2	; 0x02
   1c082:	7b 81       	ldd	r23, Y+3	; 0x03
   1c084:	88 81       	ld	r24, Y
   1c086:	99 81       	ldd	r25, Y+1	; 0x01
   1c088:	8e dd       	rcall	.-1252   	; 0x1bba6 <lif_rename_file>
   1c08a:	2b c0       	rjmp	.+86     	; 0x1c0e2 <lif_tests+0x330>
        return(1);
    }

	if(MATCHI_LEN(argv[0],"td02lif"))
   1c08c:	6f ea       	ldi	r22, 0xAF	; 175
   1c08e:	76 e1       	ldi	r23, 0x16	; 22
   1c090:	f8 01       	movw	r30, r16
   1c092:	80 81       	ld	r24, Z
   1c094:	91 81       	ldd	r25, Z+1	; 0x01
   1c096:	0e 94 76 32 	call	0x64ec	; 0x64ec <MATCHI_LEN>
   1c09a:	89 2b       	or	r24, r25
   1c09c:	09 f4       	brne	.+2      	; 0x1c0a0 <lif_tests+0x2ee>
   1c09e:	91 ce       	rjmp	.-734    	; 0x1bdc2 <lif_tests+0x10>
	{
		if(MATCHI(ptr,"help") || MATCHI(ptr,"-help") || MATCHI(ptr,"-?") )
   1c0a0:	6d e6       	ldi	r22, 0x6D	; 109
   1c0a2:	76 e1       	ldi	r23, 0x16	; 22
   1c0a4:	c7 01       	movw	r24, r14
   1c0a6:	0e 94 38 32 	call	0x6470	; 0x6470 <MATCHI>
   1c0aa:	89 2b       	or	r24, r25
   1c0ac:	59 f0       	breq	.+22     	; 0x1c0c4 <lif_tests+0x312>
		{
#ifdef TELEDISK
			td0_help(1);
			return(1);
#else
		    printf("td02lif support not enabled\n");
   1c0ae:	8d e7       	ldi	r24, 0x7D	; 125
   1c0b0:	94 e4       	ldi	r25, 0x44	; 68
   1c0b2:	a0 e0       	ldi	r26, 0x00	; 0
   1c0b4:	ed b7       	in	r30, 0x3d	; 61
   1c0b6:	fe b7       	in	r31, 0x3e	; 62
   1c0b8:	81 83       	std	Z+1, r24	; 0x01
   1c0ba:	92 83       	std	Z+2, r25	; 0x02
   1c0bc:	a3 83       	std	Z+3, r26	; 0x03
   1c0be:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   1c0c2:	0f c0       	rjmp	.+30     	; 0x1c0e2 <lif_tests+0x330>
        return(1);
    }

	if(MATCHI_LEN(argv[0],"td02lif"))
	{
		if(MATCHI(ptr,"help") || MATCHI(ptr,"-help") || MATCHI(ptr,"-?") )
   1c0c4:	6c e6       	ldi	r22, 0x6C	; 108
   1c0c6:	76 e1       	ldi	r23, 0x16	; 22
   1c0c8:	c7 01       	movw	r24, r14
   1c0ca:	0e 94 38 32 	call	0x6470	; 0x6470 <MATCHI>
   1c0ce:	89 2b       	or	r24, r25
   1c0d0:	71 f7       	brne	.-36     	; 0x1c0ae <lif_tests+0x2fc>
   1c0d2:	62 e7       	ldi	r22, 0x72	; 114
   1c0d4:	76 e1       	ldi	r23, 0x16	; 22
   1c0d6:	c7 01       	movw	r24, r14
   1c0d8:	0e 94 38 32 	call	0x6470	; 0x6470 <MATCHI>
   1c0dc:	89 2b       	or	r24, r25
   1c0de:	39 f7       	brne	.-50     	; 0x1c0ae <lif_tests+0x2fc>
   1c0e0:	70 ce       	rjmp	.-800    	; 0x1bdc2 <lif_tests+0x10>

// Argument 1 missing ?
//        Nothing to do
// argc should really get this
    if(!ptr || !*ptr)
        return(1);
   1c0e2:	81 e0       	ldi	r24, 0x01	; 1
   1c0e4:	90 e0       	ldi	r25, 0x00	; 0
        td02lif(argc,argv);
        return(1);
#endif
    }
    return(0);
}
   1c0e6:	cd b7       	in	r28, 0x3d	; 61
   1c0e8:	de b7       	in	r29, 0x3e	; 62
   1c0ea:	25 96       	adiw	r28, 0x05	; 5
   1c0ec:	ec e0       	ldi	r30, 0x0C	; 12
   1c0ee:	65 c6       	rjmp	.+3274   	; 0x1cdba <__epilogue_restores__+0xc>

0001c0f0 <lcd_task>:
static int16_t lcd_display_time = 0;

///@brief LCD timer function called at 1000HZ
void lcd_task()
{
	++lcd_display_time;
   1c0f0:	80 91 ea 19 	lds	r24, 0x19EA	; 0x8019ea <lcd_display_time>
   1c0f4:	90 91 eb 19 	lds	r25, 0x19EB	; 0x8019eb <lcd_display_time+0x1>
   1c0f8:	01 96       	adiw	r24, 0x01	; 1
   1c0fa:	90 93 eb 19 	sts	0x19EB, r25	; 0x8019eb <lcd_display_time+0x1>
   1c0fe:	80 93 ea 19 	sts	0x19EA, r24	; 0x8019ea <lcd_display_time>
   1c102:	08 95       	ret

0001c104 <copyright>:
int8_t debug_input = 0;

///@brief Display Copyright
///@return void
void copyright()
{
   1c104:	00 d0       	rcall	.+0      	; 0x1c106 <copyright+0x2>
   1c106:	00 d0       	rcall	.+0      	; 0x1c108 <copyright+0x4>
   1c108:	1f 92       	push	r1
    printf("Stand alone version of LIF utilities for linux\n");
   1c10a:	87 e7       	ldi	r24, 0x77	; 119
   1c10c:	9b e4       	ldi	r25, 0x4B	; 75
   1c10e:	a0 e0       	ldi	r26, 0x00	; 0
   1c110:	ed b7       	in	r30, 0x3d	; 61
   1c112:	fe b7       	in	r31, 0x3e	; 62
   1c114:	81 83       	std	Z+1, r24	; 0x01
   1c116:	92 83       	std	Z+2, r25	; 0x02
   1c118:	a3 83       	std	Z+3, r26	; 0x03
   1c11a:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    printf("HP85 Disk and Device Emulator\n");
   1c11e:	88 e5       	ldi	r24, 0x58	; 88
   1c120:	9b e4       	ldi	r25, 0x4B	; 75
   1c122:	a0 e0       	ldi	r26, 0x00	; 0
   1c124:	ed b7       	in	r30, 0x3d	; 61
   1c126:	fe b7       	in	r31, 0x3e	; 62
   1c128:	81 83       	std	Z+1, r24	; 0x01
   1c12a:	92 83       	std	Z+2, r25	; 0x02
   1c12c:	a3 83       	std	Z+3, r26	; 0x03
   1c12e:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    printf(" (c) 2014-2020 by Mike Gore\n");
   1c132:	8b e3       	ldi	r24, 0x3B	; 59
   1c134:	9b e4       	ldi	r25, 0x4B	; 75
   1c136:	a0 e0       	ldi	r26, 0x00	; 0
   1c138:	ed b7       	in	r30, 0x3d	; 61
   1c13a:	fe b7       	in	r31, 0x3e	; 62
   1c13c:	81 83       	std	Z+1, r24	; 0x01
   1c13e:	92 83       	std	Z+2, r25	; 0x02
   1c140:	a3 83       	std	Z+3, r26	; 0x03
   1c142:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    printf(" GNU version 3\n");
   1c146:	8b e2       	ldi	r24, 0x2B	; 43
   1c148:	9b e4       	ldi	r25, 0x4B	; 75
   1c14a:	a0 e0       	ldi	r26, 0x00	; 0
   1c14c:	ed b7       	in	r30, 0x3d	; 61
   1c14e:	fe b7       	in	r31, 0x3e	; 62
   1c150:	81 83       	std	Z+1, r24	; 0x01
   1c152:	92 83       	std	Z+2, r25	; 0x02
   1c154:	a3 83       	std	Z+3, r26	; 0x03
   1c156:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    printf("-> https://github.com/magore/hp85disk\n");
   1c15a:	84 e0       	ldi	r24, 0x04	; 4
   1c15c:	9b e4       	ldi	r25, 0x4B	; 75
   1c15e:	a0 e0       	ldi	r26, 0x00	; 0
   1c160:	ed b7       	in	r30, 0x3d	; 61
   1c162:	fe b7       	in	r31, 0x3e	; 62
   1c164:	81 83       	std	Z+1, r24	; 0x01
   1c166:	92 83       	std	Z+2, r25	; 0x02
   1c168:	a3 83       	std	Z+3, r26	; 0x03
   1c16a:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    printf("   GIT last pushed:   %s\n", GIT_VERSION);
   1c16e:	87 eb       	ldi	r24, 0xB7	; 183
   1c170:	96 e1       	ldi	r25, 0x16	; 22
   1c172:	ed b7       	in	r30, 0x3d	; 61
   1c174:	fe b7       	in	r31, 0x3e	; 62
   1c176:	95 83       	std	Z+5, r25	; 0x05
   1c178:	84 83       	std	Z+4, r24	; 0x04
   1c17a:	8a ee       	ldi	r24, 0xEA	; 234
   1c17c:	9a e4       	ldi	r25, 0x4A	; 74
   1c17e:	a0 e0       	ldi	r26, 0x00	; 0
   1c180:	81 83       	std	Z+1, r24	; 0x01
   1c182:	92 83       	std	Z+2, r25	; 0x02
   1c184:	a3 83       	std	Z+3, r26	; 0x03
   1c186:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    printf("   Last updated file: %s\n", LOCAL_MOD);
   1c18a:	8b ed       	ldi	r24, 0xDB	; 219
   1c18c:	96 e1       	ldi	r25, 0x16	; 22
   1c18e:	ed b7       	in	r30, 0x3d	; 61
   1c190:	fe b7       	in	r31, 0x3e	; 62
   1c192:	95 83       	std	Z+5, r25	; 0x05
   1c194:	84 83       	std	Z+4, r24	; 0x04
   1c196:	80 ed       	ldi	r24, 0xD0	; 208
   1c198:	9a e4       	ldi	r25, 0x4A	; 74
   1c19a:	a0 e0       	ldi	r26, 0x00	; 0
   1c19c:	81 83       	std	Z+1, r24	; 0x01
   1c19e:	92 83       	std	Z+2, r25	; 0x02
   1c1a0:	a3 83       	std	Z+3, r26	; 0x03
   1c1a2:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    printf("\n");
   1c1a6:	8e ec       	ldi	r24, 0xCE	; 206
   1c1a8:	9a e4       	ldi	r25, 0x4A	; 74
   1c1aa:	a0 e0       	ldi	r26, 0x00	; 0
   1c1ac:	ed b7       	in	r30, 0x3d	; 61
   1c1ae:	fe b7       	in	r31, 0x3e	; 62
   1c1b0:	81 83       	std	Z+1, r24	; 0x01
   1c1b2:	92 83       	std	Z+2, r25	; 0x02
   1c1b4:	a3 83       	std	Z+3, r26	; 0x03
   1c1b6:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
}
   1c1ba:	0f 90       	pop	r0
   1c1bc:	0f 90       	pop	r0
   1c1be:	0f 90       	pop	r0
   1c1c0:	0f 90       	pop	r0
   1c1c2:	0f 90       	pop	r0
   1c1c4:	08 95       	ret

0001c1c6 <lcd_time>:
/// - Example output: "Thu Dec  8 21:45:05 EST 2011".
///
/// @return buf string pointer.
MEMSPACE
char *lcd_time(tm_t *t, char *buf, int max)
{
   1c1c6:	a1 e1       	ldi	r26, 0x11	; 17
   1c1c8:	b0 e0       	ldi	r27, 0x00	; 0
   1c1ca:	e8 ee       	ldi	r30, 0xE8	; 232
   1c1cc:	f0 ee       	ldi	r31, 0xE0	; 224
   1c1ce:	df c5       	rjmp	.+3006   	; 0x1cd8e <__prologue_saves__+0x18>
   1c1d0:	ec 01       	movw	r28, r24
   1c1d2:	7b 01       	movw	r14, r22
   1c1d4:	8a 01       	movw	r16, r20
// normaize tm_t before output
    (void) normalize(t,0);
   1c1d6:	60 e0       	ldi	r22, 0x00	; 0
   1c1d8:	70 e0       	ldi	r23, 0x00	; 0
   1c1da:	0e 94 8a 38 	call	0x7114	; 0x7114 <normalize>
    memset(buf,0,max);
   1c1de:	a8 01       	movw	r20, r16
   1c1e0:	60 e0       	ldi	r22, 0x00	; 0
   1c1e2:	70 e0       	ldi	r23, 0x00	; 0
   1c1e4:	c7 01       	movw	r24, r14
   1c1e6:	0e 94 b3 ea 	call	0x1d566	; 0x1d566 <memset>
    snprintf(buf,max-1,"%s %2d %02d:%02d:%02d",
   1c1ea:	88 85       	ldd	r24, Y+8	; 0x08
   1c1ec:	99 85       	ldd	r25, Y+9	; 0x09
   1c1ee:	0e 94 6f 36 	call	0x6cde	; 0x6cde <tm_mon_to_ascii>
   1c1f2:	28 81       	ld	r18, Y
   1c1f4:	39 81       	ldd	r19, Y+1	; 0x01
   1c1f6:	ed b7       	in	r30, 0x3d	; 61
   1c1f8:	fe b7       	in	r31, 0x3e	; 62
   1c1fa:	31 8b       	std	Z+17, r19	; 0x11
   1c1fc:	20 8b       	std	Z+16, r18	; 0x10
   1c1fe:	2a 81       	ldd	r18, Y+2	; 0x02
   1c200:	3b 81       	ldd	r19, Y+3	; 0x03
   1c202:	37 87       	std	Z+15, r19	; 0x0f
   1c204:	26 87       	std	Z+14, r18	; 0x0e
   1c206:	2c 81       	ldd	r18, Y+4	; 0x04
   1c208:	3d 81       	ldd	r19, Y+5	; 0x05
   1c20a:	35 87       	std	Z+13, r19	; 0x0d
   1c20c:	24 87       	std	Z+12, r18	; 0x0c
   1c20e:	2e 81       	ldd	r18, Y+6	; 0x06
   1c210:	3f 81       	ldd	r19, Y+7	; 0x07
   1c212:	33 87       	std	Z+11, r19	; 0x0b
   1c214:	22 87       	std	Z+10, r18	; 0x0a
   1c216:	91 87       	std	Z+9, r25	; 0x09
   1c218:	80 87       	std	Z+8, r24	; 0x08
   1c21a:	88 eb       	ldi	r24, 0xB8	; 184
   1c21c:	9a e4       	ldi	r25, 0x4A	; 74
   1c21e:	a0 e0       	ldi	r26, 0x00	; 0
   1c220:	85 83       	std	Z+5, r24	; 0x05
   1c222:	96 83       	std	Z+6, r25	; 0x06
   1c224:	a7 83       	std	Z+7, r26	; 0x07
   1c226:	01 50       	subi	r16, 0x01	; 1
   1c228:	11 09       	sbc	r17, r1
   1c22a:	14 83       	std	Z+4, r17	; 0x04
   1c22c:	03 83       	std	Z+3, r16	; 0x03
   1c22e:	f2 82       	std	Z+2, r15	; 0x02
   1c230:	e1 82       	std	Z+1, r14	; 0x01
   1c232:	0e 94 c3 46 	call	0x8d86	; 0x8d86 <snprintf_P>
        (int)t->tm_mday,
        (int)t->tm_hour,
        (int)t->tm_min,
        (int)t->tm_sec);
    return(buf);
}
   1c236:	c7 01       	movw	r24, r14
   1c238:	cd b7       	in	r28, 0x3d	; 61
   1c23a:	de b7       	in	r29, 0x3e	; 62
   1c23c:	61 96       	adiw	r28, 0x11	; 17
   1c23e:	e6 e0       	ldi	r30, 0x06	; 6
   1c240:	c2 c5       	rjmp	.+2948   	; 0x1cdc6 <__epilogue_restores__+0x18>

0001c242 <lcd_backlight>:

///@brief lcd_backlight LCD Backlight settings
/// @param[in] rgb: hex value 0xRRGGBB, RR,GG,BB values are 0 to 255
uint8_t  _backlight[5] = { 0x7c, '+', 0x80, 0x80, 0x80 };	/* Backlight half bright */
uint8_t lcd_backlight(uint32_t rgb)
{
   1c242:	cf 93       	push	r28
   1c244:	00 d0       	rcall	.+0      	; 0x1c246 <lcd_backlight+0x4>
   1c246:	1f 92       	push	r1

	_backlight[2] = 0xff & (rgb >> 16);
   1c248:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <_backlight+0x2>
	_backlight[3] = 0xff & (rgb >> 8);
   1c24c:	70 93 f3 02 	sts	0x02F3, r23	; 0x8002f3 <_backlight+0x3>
	_backlight[4] = 0xff & (rgb );
   1c250:	60 93 f4 02 	sts	0x02F4, r22	; 0x8002f4 <_backlight+0x4>

	if(! i2c_fn(0x72, TW_WRITE, _backlight, sizeof(_backlight)) )
   1c254:	25 e0       	ldi	r18, 0x05	; 5
   1c256:	40 ef       	ldi	r20, 0xF0	; 240
   1c258:	52 e0       	ldi	r21, 0x02	; 2
   1c25a:	60 e0       	ldi	r22, 0x00	; 0
   1c25c:	82 e7       	ldi	r24, 0x72	; 114
   1c25e:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <i2c_fn>
   1c262:	c8 2f       	mov	r28, r24
   1c264:	81 11       	cpse	r24, r1
   1c266:	0d c0       	rjmp	.+26     	; 0x1c282 <lcd_backlight+0x40>
	{
		i2c_display_task_errors();
   1c268:	0e 94 06 2f 	call	0x5e0c	; 0x5e0c <i2c_display_task_errors>
        printf("I2C LCD is NOT attached!\n");
   1c26c:	8e e9       	ldi	r24, 0x9E	; 158
   1c26e:	9a e4       	ldi	r25, 0x4A	; 74
   1c270:	a0 e0       	ldi	r26, 0x00	; 0
   1c272:	ed b7       	in	r30, 0x3d	; 61
   1c274:	fe b7       	in	r31, 0x3e	; 62
   1c276:	81 83       	std	Z+1, r24	; 0x01
   1c278:	92 83       	std	Z+2, r25	; 0x02
   1c27a:	a3 83       	std	Z+3, r26	; 0x03
   1c27c:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   1c280:	01 c0       	rjmp	.+2      	; 0x1c284 <lcd_backlight+0x42>
		return(0);
	}
	return(1);
   1c282:	c1 e0       	ldi	r28, 0x01	; 1
}
   1c284:	8c 2f       	mov	r24, r28
   1c286:	0f 90       	pop	r0
   1c288:	0f 90       	pop	r0
   1c28a:	0f 90       	pop	r0
   1c28c:	cf 91       	pop	r28
   1c28e:	08 95       	ret

0001c290 <lcd_setup>:
///@brief LCD setup code
/// For a SparkFun SERLCD 2x16 display
/// Initializes the I2C deiplay update task structure 
/// Passes the structures to the interrupt handler
void lcd_setup()
{
   1c290:	cf 93       	push	r28
   1c292:	ad b7       	in	r26, 0x3d	; 61
   1c294:	be b7       	in	r27, 0x3e	; 62
   1c296:	17 97       	sbiw	r26, 0x07	; 7
   1c298:	0f b6       	in	r0, 0x3f	; 63
   1c29a:	f8 94       	cli
   1c29c:	be bf       	out	0x3e, r27	; 62
   1c29e:	0f be       	out	0x3f, r0	; 63
   1c2a0:	ad bf       	out	0x3d, r26	; 61
	int ind = 0;
    uint8_t sreg = SREG;
   1c2a2:	cf b7       	in	r28, 0x3f	; 63

    printf("I2C LCD initialization start\n");
   1c2a4:	80 e8       	ldi	r24, 0x80	; 128
   1c2a6:	9a e4       	ldi	r25, 0x4A	; 74
   1c2a8:	a0 e0       	ldi	r26, 0x00	; 0
   1c2aa:	ed b7       	in	r30, 0x3d	; 61
   1c2ac:	fe b7       	in	r31, 0x3e	; 62
   1c2ae:	81 83       	std	Z+1, r24	; 0x01
   1c2b0:	92 83       	std	Z+2, r25	; 0x02
   1c2b2:	a3 83       	std	Z+3, r26	; 0x03
   1c2b4:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>

	if(set_timers(lcd_task,1) == -1)
   1c2b8:	61 e0       	ldi	r22, 0x01	; 1
   1c2ba:	70 e0       	ldi	r23, 0x00	; 0
   1c2bc:	88 e7       	ldi	r24, 0x78	; 120
   1c2be:	90 ee       	ldi	r25, 0xE0	; 224
   1c2c0:	0e 94 99 34 	call	0x6932	; 0x6932 <set_timers>
   1c2c4:	01 96       	adiw	r24, 0x01	; 1
   1c2c6:	51 f4       	brne	.+20     	; 0x1c2dc <lcd_setup+0x4c>
        printf("lcd_task init failed\n");
   1c2c8:	8a e6       	ldi	r24, 0x6A	; 106
   1c2ca:	9a e4       	ldi	r25, 0x4A	; 74
   1c2cc:	a0 e0       	ldi	r26, 0x00	; 0
   1c2ce:	ed b7       	in	r30, 0x3d	; 61
   1c2d0:	fe b7       	in	r31, 0x3e	; 62
   1c2d2:	81 83       	std	Z+1, r24	; 0x01
   1c2d4:	92 83       	std	Z+2, r25	; 0x02
   1c2d6:	a3 83       	std	Z+3, r26	; 0x03
   1c2d8:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>

	i2c_init(100000);
   1c2dc:	60 ea       	ldi	r22, 0xA0	; 160
   1c2de:	76 e8       	ldi	r23, 0x86	; 134
   1c2e0:	81 e0       	ldi	r24, 0x01	; 1
   1c2e2:	90 e0       	ldi	r25, 0x00	; 0
   1c2e4:	0e 94 09 2c 	call	0x5812	; 0x5812 <i2c_init>

	i2c_task_init();
   1c2e8:	0e 94 ca 2b 	call	0x5794	; 0x5794 <i2c_task_init>

	cli();
   1c2ec:	f8 94       	cli

	// Default startup message
    sprintf((char *) _line1, "%-16s", "HP85Disk V2");
   1c2ee:	8f ef       	ldi	r24, 0xFF	; 255
   1c2f0:	96 e1       	ldi	r25, 0x16	; 22
   1c2f2:	ed b7       	in	r30, 0x3d	; 61
   1c2f4:	fe b7       	in	r31, 0x3e	; 62
   1c2f6:	97 83       	std	Z+7, r25	; 0x07
   1c2f8:	86 83       	std	Z+6, r24	; 0x06
   1c2fa:	84 e6       	ldi	r24, 0x64	; 100
   1c2fc:	9a e4       	ldi	r25, 0x4A	; 74
   1c2fe:	a0 e0       	ldi	r26, 0x00	; 0
   1c300:	83 83       	std	Z+3, r24	; 0x03
   1c302:	94 83       	std	Z+4, r25	; 0x04
   1c304:	a5 83       	std	Z+5, r26	; 0x05
   1c306:	8c e0       	ldi	r24, 0x0C	; 12
   1c308:	93 e0       	ldi	r25, 0x03	; 3
   1c30a:	92 83       	std	Z+2, r25	; 0x02
   1c30c:	81 83       	std	Z+1, r24	; 0x01
   1c30e:	0e 94 d7 46 	call	0x8dae	; 0x8dae <sprintf_P>
    sprintf((char *) _line2, "%-16s", "(C)Mike Gore");
   1c312:	8b e0       	ldi	r24, 0x0B	; 11
   1c314:	97 e1       	ldi	r25, 0x17	; 23
   1c316:	ed b7       	in	r30, 0x3d	; 61
   1c318:	fe b7       	in	r31, 0x3e	; 62
   1c31a:	97 83       	std	Z+7, r25	; 0x07
   1c31c:	86 83       	std	Z+6, r24	; 0x06
   1c31e:	8e e5       	ldi	r24, 0x5E	; 94
   1c320:	9a e4       	ldi	r25, 0x4A	; 74
   1c322:	a0 e0       	ldi	r26, 0x00	; 0
   1c324:	83 83       	std	Z+3, r24	; 0x03
   1c326:	94 83       	std	Z+4, r25	; 0x04
   1c328:	a5 83       	std	Z+5, r26	; 0x05
   1c32a:	85 ef       	ldi	r24, 0xF5	; 245
   1c32c:	92 e0       	ldi	r25, 0x02	; 2
   1c32e:	92 83       	std	Z+2, r25	; 0x02
   1c330:	81 83       	std	Z+1, r24	; 0x01
   1c332:	0e 94 d7 46 	call	0x8dae	; 0x8dae <sprintf_P>

	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _cmd1, sizeof(_cmd1));
   1c336:	22 e0       	ldi	r18, 0x02	; 2
   1c338:	41 e2       	ldi	r20, 0x21	; 33
   1c33a:	53 e0       	ldi	r21, 0x03	; 3
   1c33c:	60 e0       	ldi	r22, 0x00	; 0
   1c33e:	82 e7       	ldi	r24, 0x72	; 114
   1c340:	0e 94 df 2b 	call	0x57be	; 0x57be <i2c_task_op_add>
   1c344:	90 93 57 17 	sts	0x1757, r25	; 0x801757 <i2c_task_op+0x1>
   1c348:	80 93 56 17 	sts	0x1756, r24	; 0x801756 <i2c_task_op>
	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _line1, 16);
   1c34c:	20 e1       	ldi	r18, 0x10	; 16
   1c34e:	4c e0       	ldi	r20, 0x0C	; 12
   1c350:	53 e0       	ldi	r21, 0x03	; 3
   1c352:	60 e0       	ldi	r22, 0x00	; 0
   1c354:	82 e7       	ldi	r24, 0x72	; 114
   1c356:	0e 94 df 2b 	call	0x57be	; 0x57be <i2c_task_op_add>
   1c35a:	90 93 59 17 	sts	0x1759, r25	; 0x801759 <i2c_task_op+0x3>
   1c35e:	80 93 58 17 	sts	0x1758, r24	; 0x801758 <i2c_task_op+0x2>
	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _cmd2, sizeof(_cmd2));
   1c362:	22 e0       	ldi	r18, 0x02	; 2
   1c364:	4a e0       	ldi	r20, 0x0A	; 10
   1c366:	53 e0       	ldi	r21, 0x03	; 3
   1c368:	60 e0       	ldi	r22, 0x00	; 0
   1c36a:	82 e7       	ldi	r24, 0x72	; 114
   1c36c:	0e 94 df 2b 	call	0x57be	; 0x57be <i2c_task_op_add>
   1c370:	90 93 5b 17 	sts	0x175B, r25	; 0x80175b <i2c_task_op+0x5>
   1c374:	80 93 5a 17 	sts	0x175A, r24	; 0x80175a <i2c_task_op+0x4>
	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _line2, 16);
   1c378:	20 e1       	ldi	r18, 0x10	; 16
   1c37a:	45 ef       	ldi	r20, 0xF5	; 245
   1c37c:	52 e0       	ldi	r21, 0x02	; 2
   1c37e:	60 e0       	ldi	r22, 0x00	; 0
   1c380:	82 e7       	ldi	r24, 0x72	; 114
   1c382:	0e 94 df 2b 	call	0x57be	; 0x57be <i2c_task_op_add>
   1c386:	90 93 5d 17 	sts	0x175D, r25	; 0x80175d <i2c_task_op+0x7>
   1c38a:	80 93 5c 17 	sts	0x175C, r24	; 0x80175c <i2c_task_op+0x6>

	SREG = sreg;
   1c38e:	cf bf       	out	0x3f, r28	; 63

    i2c_task_run();
   1c390:	0e 94 9f 2c 	call	0x593e	; 0x593e <i2c_task_run>
	// wait long enough for us to see the startup message
    delayms(1000);
   1c394:	68 ee       	ldi	r22, 0xE8	; 232
   1c396:	73 e0       	ldi	r23, 0x03	; 3
   1c398:	80 e0       	ldi	r24, 0x00	; 0
   1c39a:	90 e0       	ldi	r25, 0x00	; 0
   1c39c:	0e 94 45 28 	call	0x508a	; 0x508a <delayms>
	
	// Verify the task finished - it normally takes < 30mS
    if(!i2c_task_done())
   1c3a0:	0e 94 80 2c 	call	0x5900	; 0x5900 <i2c_task_done>
   1c3a4:	81 11       	cpse	r24, r1
   1c3a6:	0c c0       	rjmp	.+24     	; 0x1c3c0 <lcd_setup+0x130>
	{
		i2c_display_task_errors();
   1c3a8:	0e 94 06 2f 	call	0x5e0c	; 0x5e0c <i2c_display_task_errors>
        printf("I2C LCD is NOT attached!\n");
   1c3ac:	84 e4       	ldi	r24, 0x44	; 68
   1c3ae:	9a e4       	ldi	r25, 0x4A	; 74
   1c3b0:	a0 e0       	ldi	r26, 0x00	; 0
   1c3b2:	ed b7       	in	r30, 0x3d	; 61
   1c3b4:	fe b7       	in	r31, 0x3e	; 62
   1c3b6:	81 83       	std	Z+1, r24	; 0x01
   1c3b8:	92 83       	std	Z+2, r25	; 0x02
   1c3ba:	a3 83       	std	Z+3, r26	; 0x03
   1c3bc:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
	}

    sep();
   1c3c0:	0e 94 fa 31 	call	0x63f4	; 0x63f4 <sep>
}
   1c3c4:	ad b7       	in	r26, 0x3d	; 61
   1c3c6:	be b7       	in	r27, 0x3e	; 62
   1c3c8:	17 96       	adiw	r26, 0x07	; 7
   1c3ca:	0f b6       	in	r0, 0x3f	; 63
   1c3cc:	f8 94       	cli
   1c3ce:	be bf       	out	0x3e, r27	; 62
   1c3d0:	0f be       	out	0x3f, r0	; 63
   1c3d2:	ad bf       	out	0x3d, r26	; 61
   1c3d4:	cf 91       	pop	r28
   1c3d6:	08 95       	ret

0001c3d8 <i2c_lcd_task>:


///@brief Update the LCD wile the system is running
/// Display SD card fault status and the current time
void i2c_lcd_task()
{
   1c3d8:	af e2       	ldi	r26, 0x2F	; 47
   1c3da:	b0 e0       	ldi	r27, 0x00	; 0
   1c3dc:	e1 ef       	ldi	r30, 0xF1	; 241
   1c3de:	f1 ee       	ldi	r31, 0xE1	; 225
   1c3e0:	d9 c4       	rjmp	.+2482   	; 0x1cd94 <__prologue_saves__+0x1e>
	char buf[32];
	uint8_t sreg=SREG;
   1c3e2:	1f b7       	in	r17, 0x3f	; 63
    ts_t ts;

	cli();
   1c3e4:	f8 94       	cli
	if(!mmc_ins_status())
   1c3e6:	0e 94 d9 6e 	call	0xddb2	; 0xddb2 <mmc_ins_status>
   1c3ea:	89 2b       	or	r24, r25
   1c3ec:	49 f4       	brne	.+18     	; 0x1c400 <i2c_lcd_task+0x28>
	{
		sprintf((char *) _line2,"%-16s", "SD Card Fault");
   1c3ee:	88 e1       	ldi	r24, 0x18	; 24
   1c3f0:	97 e1       	ldi	r25, 0x17	; 23
   1c3f2:	ed b7       	in	r30, 0x3d	; 61
   1c3f4:	fe b7       	in	r31, 0x3e	; 62
   1c3f6:	97 83       	std	Z+7, r25	; 0x07
   1c3f8:	86 83       	std	Z+6, r24	; 0x06
   1c3fa:	8e e3       	ldi	r24, 0x3E	; 62
   1c3fc:	9a e4       	ldi	r25, 0x4A	; 74
   1c3fe:	17 c0       	rjmp	.+46     	; 0x1c42e <i2c_lcd_task+0x56>
	}
	else
	{
		clock_gettime(0, (ts_t *) &ts);
   1c400:	be 01       	movw	r22, r28
   1c402:	68 5d       	subi	r22, 0xD8	; 216
   1c404:	7f 4f       	sbci	r23, 0xFF	; 255
   1c406:	80 e0       	ldi	r24, 0x00	; 0
   1c408:	90 e0       	ldi	r25, 0x00	; 0
   1c40a:	0e 94 a9 33 	call	0x6752	; 0x6752 <clock_gettime>
		sprintf((char *) _line2, "%-16s", lcd_time(gmtime(&(ts.tv_sec)),buf,sizeof(buf)-1) );
   1c40e:	ce 01       	movw	r24, r28
   1c410:	88 96       	adiw	r24, 0x28	; 40
   1c412:	0e 94 93 37 	call	0x6f26	; 0x6f26 <gmtime>
   1c416:	4f e1       	ldi	r20, 0x1F	; 31
   1c418:	50 e0       	ldi	r21, 0x00	; 0
   1c41a:	be 01       	movw	r22, r28
   1c41c:	68 5f       	subi	r22, 0xF8	; 248
   1c41e:	7f 4f       	sbci	r23, 0xFF	; 255
   1c420:	d2 de       	rcall	.-604    	; 0x1c1c6 <lcd_time>
   1c422:	ed b7       	in	r30, 0x3d	; 61
   1c424:	fe b7       	in	r31, 0x3e	; 62
   1c426:	97 83       	std	Z+7, r25	; 0x07
   1c428:	86 83       	std	Z+6, r24	; 0x06
   1c42a:	88 e3       	ldi	r24, 0x38	; 56
   1c42c:	9a e4       	ldi	r25, 0x4A	; 74
   1c42e:	a0 e0       	ldi	r26, 0x00	; 0
   1c430:	83 83       	std	Z+3, r24	; 0x03
   1c432:	94 83       	std	Z+4, r25	; 0x04
   1c434:	a5 83       	std	Z+5, r26	; 0x05
   1c436:	85 ef       	ldi	r24, 0xF5	; 245
   1c438:	92 e0       	ldi	r25, 0x02	; 2
   1c43a:	92 83       	std	Z+2, r25	; 0x02
   1c43c:	81 83       	std	Z+1, r24	; 0x01
   1c43e:	0e 94 d7 46 	call	0x8dae	; 0x8dae <sprintf_P>
		// sprintf((char *) _line2,"%16ld.%03ld", (long) ts.tv_sec, (long) ts.tv_nsec / 1000000UL);
	}
	SREG=sreg;
   1c442:	1f bf       	out	0x3f, r17	; 63

    i2c_task_run();
   1c444:	0e 94 9f 2c 	call	0x593e	; 0x593e <i2c_task_run>
}
   1c448:	af 96       	adiw	r28, 0x2f	; 47
   1c44a:	e3 e0       	ldi	r30, 0x03	; 3
   1c44c:	bf c4       	rjmp	.+2430   	; 0x1cdcc <__epilogue_restores__+0x1e>

0001c44e <gpib_user_task>:
///@brief GPIB callback from gpib_read_byte()
/// This function gets called evry time trough the read loop
/// This task run in the forground - is not an interrupt task
void gpib_user_task()
{
	uint8_t sreg = SREG;
   1c44e:	8f b7       	in	r24, 0x3f	; 63

	cli();
   1c450:	f8 94       	cli
	if(lcd_display_time > 100) // increments at 1000HZ
   1c452:	20 91 ea 19 	lds	r18, 0x19EA	; 0x8019ea <lcd_display_time>
   1c456:	30 91 eb 19 	lds	r19, 0x19EB	; 0x8019eb <lcd_display_time+0x1>
   1c45a:	25 36       	cpi	r18, 0x65	; 101
   1c45c:	31 05       	cpc	r19, r1
   1c45e:	3c f0       	brlt	.+14     	; 0x1c46e <gpib_user_task+0x20>
	{
		lcd_display_time = 0;
   1c460:	10 92 eb 19 	sts	0x19EB, r1	; 0x8019eb <lcd_display_time+0x1>
   1c464:	10 92 ea 19 	sts	0x19EA, r1	; 0x8019ea <lcd_display_time>
		SREG = sreg;
   1c468:	8f bf       	out	0x3f, r24	; 63
		i2c_lcd_task();
   1c46a:	b6 cf       	rjmp	.-148    	; 0x1c3d8 <i2c_lcd_task>
		return;
   1c46c:	08 95       	ret
	}
	SREG = sreg;
   1c46e:	8f bf       	out	0x3f, r24	; 63
   1c470:	08 95       	ret

0001c472 <help>:
/// @brief  Display the main help menu - calls all other help menus
/// @return  void
/// @see gpib_help()
/// @see fatfs_help()
void help()
{
   1c472:	00 d0       	rcall	.+0      	; 0x1c474 <help+0x2>
   1c474:	1f 92       	push	r1

    copyright();
   1c476:	46 de       	rcall	.-884    	; 0x1c104 <copyright>

#ifdef FATFS_TESTS
    fatfs_help(0);
   1c478:	80 e0       	ldi	r24, 0x00	; 0
   1c47a:	90 e0       	ldi	r25, 0x00	; 0
   1c47c:	0e 94 00 73 	call	0xe600	; 0xe600 <fatfs_help>
#endif

#ifdef POSIX_TESTS
    posix_help(0);
   1c480:	80 e0       	ldi	r24, 0x00	; 0
   1c482:	90 e0       	ldi	r25, 0x00	; 0
   1c484:	0e 94 56 7e 	call	0xfcac	; 0xfcac <posix_help>
#endif

#ifdef LIF_SUPPORT
    lif_help(0);
   1c488:	80 e0       	ldi	r24, 0x00	; 0
   1c48a:	90 e0       	ldi	r25, 0x00	; 0
   1c48c:	0e 94 a3 c0 	call	0x18146	; 0x18146 <lif_help>
#endif
#ifdef TELEDISK
    td0_help(0);
#endif

    gpib_help(0);
   1c490:	80 e0       	ldi	r24, 0x00	; 0
   1c492:	90 e0       	ldi	r25, 0x00	; 0
   1c494:	0e 94 b7 91 	call	0x1236e	; 0x1236e <gpib_help>

    printf(
   1c498:	87 e7       	ldi	r24, 0x77	; 119
   1c49a:	99 e4       	ldi	r25, 0x49	; 73
   1c49c:	a0 e0       	ldi	r26, 0x00	; 0
   1c49e:	ed b7       	in	r30, 0x3d	; 61
   1c4a0:	fe b7       	in	r31, 0x3e	; 62
   1c4a2:	81 83       	std	Z+1, r24	; 0x01
   1c4a4:	92 83       	std	Z+2, r25	; 0x02
   1c4a6:	a3 83       	std	Z+3, r26	; 0x03
   1c4a8:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
        "reset   - reset emulator\n"
        "setdate - set date\n"
        "time    - display current time\n"
        "\n"
        );
}
   1c4ac:	0f 90       	pop	r0
   1c4ae:	0f 90       	pop	r0
   1c4b0:	0f 90       	pop	r0
   1c4b2:	08 95       	ret

0001c4b4 <user_task.part.1>:
/// If a keypress is detected read a line from the uart
/// parse the result and call various user functions.
/// ? will return a list of fuctions and paramters permitted
/// @param[in] gpib - if non-zero run gpib while there are no user commands
/// @return  void
void user_task(uint8_t gpib)
   1c4b4:	6f 92       	push	r6
   1c4b6:	7f 92       	push	r7
   1c4b8:	8f 92       	push	r8
   1c4ba:	cf 92       	push	r12
   1c4bc:	df 92       	push	r13
   1c4be:	ef 92       	push	r14
   1c4c0:	ff 92       	push	r15
   1c4c2:	0f 93       	push	r16
   1c4c4:	1f 93       	push	r17
   1c4c6:	cf 93       	push	r28
   1c4c8:	df 93       	push	r29
   1c4ca:	cd b7       	in	r28, 0x3d	; 61
   1c4cc:	de b7       	in	r29, 0x3e	; 62
   1c4ce:	cb 56       	subi	r28, 0x6B	; 107
   1c4d0:	d1 40       	sbci	r29, 0x01	; 1
   1c4d2:	0f b6       	in	r0, 0x3f	; 63
   1c4d4:	f8 94       	cli
   1c4d6:	de bf       	out	0x3e, r29	; 62
   1c4d8:	0f be       	out	0x3f, r0	; 63
   1c4da:	cd bf       	out	0x3d, r28	; 61
        gpib_task();

    if(!kbhit(0))
        return;

    printf("\n>");
   1c4dc:	84 e7       	ldi	r24, 0x74	; 116
   1c4de:	99 e4       	ldi	r25, 0x49	; 73
   1c4e0:	a0 e0       	ldi	r26, 0x00	; 0
   1c4e2:	ed b7       	in	r30, 0x3d	; 61
   1c4e4:	fe b7       	in	r31, 0x3e	; 62
   1c4e6:	81 83       	std	Z+1, r24	; 0x01
   1c4e8:	92 83       	std	Z+2, r25	; 0x02
   1c4ea:	a3 83       	std	Z+3, r26	; 0x03
   1c4ec:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>

	memset(line,0,sizeof(line)-1);
   1c4f0:	8e 01       	movw	r16, r28
   1c4f2:	0a 5f       	subi	r16, 0xFA	; 250
   1c4f4:	1f 4f       	sbci	r17, 0xFF	; 255
   1c4f6:	8f ef       	ldi	r24, 0xFF	; 255
   1c4f8:	f8 01       	movw	r30, r16
   1c4fa:	11 92       	st	Z+, r1
   1c4fc:	8a 95       	dec	r24
   1c4fe:	e9 f7       	brne	.-6      	; 0x1c4fa <user_task.part.1+0x46>

    fgets(line,sizeof(line)-2,stdin);
   1c500:	40 91 bf 1c 	lds	r20, 0x1CBF	; 0x801cbf <__iob>
   1c504:	50 91 c0 1c 	lds	r21, 0x1CC0	; 0x801cc0 <__iob+0x1>
   1c508:	6e ef       	ldi	r22, 0xFE	; 254
   1c50a:	70 e0       	ldi	r23, 0x00	; 0
   1c50c:	c8 01       	movw	r24, r16
   1c50e:	0e 94 42 76 	call	0xec84	; 0xec84 <fgets>
    trim_tail(line);
   1c512:	c8 01       	movw	r24, r16
   1c514:	0e 94 0a 32 	call	0x6414	; 0x6414 <trim_tail>
    argc = split_args(line,argv,50);
   1c518:	42 e3       	ldi	r20, 0x32	; 50
   1c51a:	50 e0       	ldi	r21, 0x00	; 0
   1c51c:	be 01       	movw	r22, r28
   1c51e:	6a 5f       	subi	r22, 0xFA	; 250
   1c520:	7e 4f       	sbci	r23, 0xFE	; 254
   1c522:	c8 01       	movw	r24, r16
   1c524:	0e 94 90 32 	call	0x6520	; 0x6520 <split_args>
   1c528:	6c 01       	movw	r12, r24

	if(debug_input)
   1c52a:	80 91 ec 19 	lds	r24, 0x19EC	; 0x8019ec <debug_input>
   1c52e:	81 11       	cpse	r24, r1
   1c530:	0a c0       	rjmp	.+20     	; 0x1c546 <user_task.part.1+0x92>
			printf("   [%s]\n", argv[i]);
	}

    ind = 0;
	result = 0;
    ptr = argv[ind++];
   1c532:	ca 5f       	subi	r28, 0xFA	; 250
   1c534:	de 4f       	sbci	r29, 0xFE	; 254
   1c536:	e8 80       	ld	r14, Y
   1c538:	f9 80       	ldd	r15, Y+1	; 0x01
   1c53a:	c6 50       	subi	r28, 0x06	; 6
   1c53c:	d1 40       	sbci	r29, 0x01	; 1

    if(!ptr || argc < 1)
   1c53e:	e1 14       	cp	r14, r1
   1c540:	f1 04       	cpc	r15, r1
   1c542:	51 f5       	brne	.+84     	; 0x1c598 <user_task.part.1+0xe4>
   1c544:	b7 c0       	rjmp	.+366    	; 0x1c6b4 <user_task.part.1+0x200>
    trim_tail(line);
    argc = split_args(line,argv,50);

	if(debug_input)
	{
        printf("Argument count = %d\n", argc);
   1c546:	ed b7       	in	r30, 0x3d	; 61
   1c548:	fe b7       	in	r31, 0x3e	; 62
   1c54a:	d5 82       	std	Z+5, r13	; 0x05
   1c54c:	c4 82       	std	Z+4, r12	; 0x04
   1c54e:	8f e5       	ldi	r24, 0x5F	; 95
   1c550:	99 e4       	ldi	r25, 0x49	; 73
   1c552:	a0 e0       	ldi	r26, 0x00	; 0
   1c554:	81 83       	std	Z+1, r24	; 0x01
   1c556:	92 83       	std	Z+2, r25	; 0x02
   1c558:	a3 83       	std	Z+3, r26	; 0x03
   1c55a:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   1c55e:	ce 01       	movw	r24, r28
   1c560:	8a 5f       	subi	r24, 0xFA	; 250
   1c562:	9e 4f       	sbci	r25, 0xFE	; 254
   1c564:	7c 01       	movw	r14, r24
		for(i=0;i<argc;++i)
   1c566:	00 e0       	ldi	r16, 0x00	; 0
   1c568:	10 e0       	ldi	r17, 0x00	; 0
			printf("   [%s]\n", argv[i]);
   1c56a:	86 e5       	ldi	r24, 0x56	; 86
   1c56c:	99 e4       	ldi	r25, 0x49	; 73
   1c56e:	3c 01       	movw	r6, r24
   1c570:	81 2c       	mov	r8, r1
    argc = split_args(line,argv,50);

	if(debug_input)
	{
        printf("Argument count = %d\n", argc);
		for(i=0;i<argc;++i)
   1c572:	0c 15       	cp	r16, r12
   1c574:	1d 05       	cpc	r17, r13
   1c576:	ec f6       	brge	.-70     	; 0x1c532 <user_task.part.1+0x7e>
			printf("   [%s]\n", argv[i]);
   1c578:	f7 01       	movw	r30, r14
   1c57a:	81 91       	ld	r24, Z+
   1c57c:	91 91       	ld	r25, Z+
   1c57e:	7f 01       	movw	r14, r30
   1c580:	ed b7       	in	r30, 0x3d	; 61
   1c582:	fe b7       	in	r31, 0x3e	; 62
   1c584:	95 83       	std	Z+5, r25	; 0x05
   1c586:	84 83       	std	Z+4, r24	; 0x04
   1c588:	61 82       	std	Z+1, r6	; 0x01
   1c58a:	72 82       	std	Z+2, r7	; 0x02
   1c58c:	83 82       	std	Z+3, r8	; 0x03
   1c58e:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    argc = split_args(line,argv,50);

	if(debug_input)
	{
        printf("Argument count = %d\n", argc);
		for(i=0;i<argc;++i)
   1c592:	0f 5f       	subi	r16, 0xFF	; 255
   1c594:	1f 4f       	sbci	r17, 0xFF	; 255
   1c596:	ed cf       	rjmp	.-38     	; 0x1c572 <user_task.part.1+0xbe>

    ind = 0;
	result = 0;
    ptr = argv[ind++];

    if(!ptr || argc < 1)
   1c598:	1c 14       	cp	r1, r12
   1c59a:	1d 04       	cpc	r1, r13
   1c59c:	0c f0       	brlt	.+2      	; 0x1c5a0 <user_task.part.1+0xec>
   1c59e:	8a c0       	rjmp	.+276    	; 0x1c6b4 <user_task.part.1+0x200>
    {
        result = 1;
    }
    else if (MATCHI(ptr,"input") )
   1c5a0:	6d e2       	ldi	r22, 0x2D	; 45
   1c5a2:	77 e1       	ldi	r23, 0x17	; 23
   1c5a4:	c7 01       	movw	r24, r14
   1c5a6:	0e 94 38 32 	call	0x6470	; 0x6470 <MATCHI>
   1c5aa:	89 2b       	or	r24, r25
   1c5ac:	d9 f0       	breq	.+54     	; 0x1c5e4 <user_task.part.1+0x130>
    {
        debug_input = !debug_input;
   1c5ae:	80 91 ec 19 	lds	r24, 0x19EC	; 0x8019ec <debug_input>
   1c5b2:	91 e0       	ldi	r25, 0x01	; 1
   1c5b4:	81 11       	cpse	r24, r1
   1c5b6:	90 e0       	ldi	r25, 0x00	; 0
   1c5b8:	90 93 ec 19 	sts	0x19EC, r25	; 0x8019ec <debug_input>
		printf("Input debugging: %s\n", debug_input ? "ON" : "OFF");
   1c5bc:	88 23       	and	r24, r24
   1c5be:	19 f0       	breq	.+6      	; 0x1c5c6 <user_task.part.1+0x112>
   1c5c0:	89 e2       	ldi	r24, 0x29	; 41
   1c5c2:	97 e1       	ldi	r25, 0x17	; 23
   1c5c4:	02 c0       	rjmp	.+4      	; 0x1c5ca <user_task.part.1+0x116>
   1c5c6:	86 e2       	ldi	r24, 0x26	; 38
   1c5c8:	97 e1       	ldi	r25, 0x17	; 23
   1c5ca:	ed b7       	in	r30, 0x3d	; 61
   1c5cc:	fe b7       	in	r31, 0x3e	; 62
   1c5ce:	95 83       	std	Z+5, r25	; 0x05
   1c5d0:	84 83       	std	Z+4, r24	; 0x04
   1c5d2:	81 e4       	ldi	r24, 0x41	; 65
   1c5d4:	99 e4       	ldi	r25, 0x49	; 73
   1c5d6:	a0 e0       	ldi	r26, 0x00	; 0
   1c5d8:	81 83       	std	Z+1, r24	; 0x01
   1c5da:	92 83       	std	Z+2, r25	; 0x02
   1c5dc:	a3 83       	std	Z+3, r26	; 0x03
   1c5de:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   1c5e2:	68 c0       	rjmp	.+208    	; 0x1c6b4 <user_task.part.1+0x200>

    }
#endif

#ifdef LCD_SUPPORT
    else if (MATCHI(ptr,"backlight") )
   1c5e4:	63 e3       	ldi	r22, 0x33	; 51
   1c5e6:	77 e1       	ldi	r23, 0x17	; 23
   1c5e8:	c7 01       	movw	r24, r14
   1c5ea:	0e 94 38 32 	call	0x6470	; 0x6470 <MATCHI>
   1c5ee:	89 2b       	or	r24, r25
   1c5f0:	f9 f0       	breq	.+62     	; 0x1c630 <user_task.part.1+0x17c>
    {
		uint32_t rgb;
        ptr = argv[ind];
   1c5f2:	c8 5f       	subi	r28, 0xF8	; 248
   1c5f4:	de 4f       	sbci	r29, 0xFE	; 254
   1c5f6:	e8 80       	ld	r14, Y
   1c5f8:	f9 80       	ldd	r15, Y+1	; 0x01
   1c5fa:	c8 50       	subi	r28, 0x08	; 8
   1c5fc:	d1 40       	sbci	r29, 0x01	; 1
        if(*ptr == '=')
   1c5fe:	f7 01       	movw	r30, r14
   1c600:	80 81       	ld	r24, Z
   1c602:	8d 33       	cpi	r24, 0x3D	; 61
   1c604:	19 f4       	brne	.+6      	; 0x1c60c <user_task.part.1+0x158>
            ++ind;
   1c606:	82 e0       	ldi	r24, 0x02	; 2
   1c608:	90 e0       	ldi	r25, 0x00	; 0
   1c60a:	02 c0       	rjmp	.+4      	; 0x1c610 <user_task.part.1+0x15c>
			printf("   [%s]\n", argv[i]);
	}

    ind = 0;
	result = 0;
    ptr = argv[ind++];
   1c60c:	81 e0       	ldi	r24, 0x01	; 1
   1c60e:	90 e0       	ldi	r25, 0x00	; 0
    {
		uint32_t rgb;
        ptr = argv[ind];
        if(*ptr == '=')
            ++ind;
        rgb = get_value(argv[ind]);
   1c610:	88 0f       	add	r24, r24
   1c612:	99 1f       	adc	r25, r25
   1c614:	e6 e0       	ldi	r30, 0x06	; 6
   1c616:	f1 e0       	ldi	r31, 0x01	; 1
   1c618:	ec 0f       	add	r30, r28
   1c61a:	fd 1f       	adc	r31, r29
   1c61c:	e8 0f       	add	r30, r24
   1c61e:	f9 1f       	adc	r31, r25
   1c620:	80 81       	ld	r24, Z
   1c622:	91 81       	ldd	r25, Z+1	; 0x01
   1c624:	0e 94 2f 33 	call	0x665e	; 0x665e <get_value>
		result = lcd_backlight(rgb);
   1c628:	0c de       	rcall	.-1000   	; 0x1c242 <lcd_backlight>
   1c62a:	08 2f       	mov	r16, r24
   1c62c:	10 e0       	ldi	r17, 0x00	; 0
   1c62e:	44 c0       	rjmp	.+136    	; 0x1c6b8 <user_task.part.1+0x204>
    }
#endif

    else if ( MATCH(ptr,"mem") )
   1c630:	6d e3       	ldi	r22, 0x3D	; 61
   1c632:	77 e1       	ldi	r23, 0x17	; 23
   1c634:	c7 01       	movw	r24, r14
   1c636:	0e 94 24 32 	call	0x6448	; 0x6448 <MATCH>
   1c63a:	89 2b       	or	r24, r25
   1c63c:	19 f0       	breq	.+6      	; 0x1c644 <user_task.part.1+0x190>
    {
        PrintFree();
   1c63e:	0e 94 06 27 	call	0x4e0c	; 0x4e0c <PrintFree>
   1c642:	38 c0       	rjmp	.+112    	; 0x1c6b4 <user_task.part.1+0x200>
        result = 1;

    }
    else if ( MATCHI(ptr,"reset") )
   1c644:	64 ed       	ldi	r22, 0xD4	; 212
   1c646:	7d e0       	ldi	r23, 0x0D	; 13
   1c648:	c7 01       	movw	r24, r14
   1c64a:	0e 94 38 32 	call	0x6470	; 0x6470 <MATCHI>
   1c64e:	89 2b       	or	r24, r25
   1c650:	51 f0       	breq	.+20     	; 0x1c666 <user_task.part.1+0x1b2>
    {
        cli();
   1c652:	f8 94       	cli
        uart_rx_flush(0);
   1c654:	80 e0       	ldi	r24, 0x00	; 0
   1c656:	0e 94 8d 28 	call	0x511a	; 0x511a <uart_rx_flush>
        cli();
   1c65a:	f8 94       	cli
        MCUSR = (1 << EXTRF);
   1c65c:	82 e0       	ldi	r24, 0x02	; 2
   1c65e:	84 bf       	out	0x34, r24	; 52
        RESET();
   1c660:	e0 e0       	ldi	r30, 0x00	; 0
   1c662:	fc ef       	ldi	r31, 0xFC	; 252
   1c664:	09 95       	icall
		// should not return!
        result = 1;
    }
    else if ( MATCHI(ptr,"setdate" ) )
   1c666:	61 e4       	ldi	r22, 0x41	; 65
   1c668:	77 e1       	ldi	r23, 0x17	; 23
   1c66a:	c7 01       	movw	r24, r14
   1c66c:	0e 94 38 32 	call	0x6470	; 0x6470 <MATCHI>
   1c670:	89 2b       	or	r24, r25
   1c672:	19 f0       	breq	.+6      	; 0x1c67a <user_task.part.1+0x1c6>
    {
        setdate();
   1c674:	0e 94 73 3b 	call	0x76e6	; 0x76e6 <setdate>
   1c678:	07 c0       	rjmp	.+14     	; 0x1c688 <user_task.part.1+0x1d4>
        display_clock();
        result = 1;
    }
    else if ( MATCHI(ptr,"time") )
   1c67a:	69 e4       	ldi	r22, 0x49	; 73
   1c67c:	77 e1       	ldi	r23, 0x17	; 23
   1c67e:	c7 01       	movw	r24, r14
   1c680:	0e 94 38 32 	call	0x6470	; 0x6470 <MATCHI>
   1c684:	89 2b       	or	r24, r25
   1c686:	19 f0       	breq	.+6      	; 0x1c68e <user_task.part.1+0x1da>
    {
        display_clock();
   1c688:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <display_clock>
   1c68c:	13 c0       	rjmp	.+38     	; 0x1c6b4 <user_task.part.1+0x200>
        result = 1;
    }
    else if ( MATCHI(ptr,"help") || MATCHI(ptr,"?") )
   1c68e:	6d e6       	ldi	r22, 0x6D	; 109
   1c690:	76 e1       	ldi	r23, 0x16	; 22
   1c692:	c7 01       	movw	r24, r14
   1c694:	0e 94 38 32 	call	0x6470	; 0x6470 <MATCHI>
   1c698:	89 2b       	or	r24, r25
    {
        help();
   1c69a:	11 f0       	breq	.+4      	; 0x1c6a0 <user_task.part.1+0x1ec>
   1c69c:	ea de       	rcall	.-556    	; 0x1c472 <help>
   1c69e:	0a c0       	rjmp	.+20     	; 0x1c6b4 <user_task.part.1+0x200>
    else if ( MATCHI(ptr,"time") )
    {
        display_clock();
        result = 1;
    }
    else if ( MATCHI(ptr,"help") || MATCHI(ptr,"?") )
   1c6a0:	63 e7       	ldi	r22, 0x73	; 115
   1c6a2:	76 e1       	ldi	r23, 0x16	; 22
   1c6a4:	c7 01       	movw	r24, r14
   1c6a6:	0e 94 38 32 	call	0x6470	; 0x6470 <MATCHI>
   1c6aa:	89 2b       	or	r24, r25
   1c6ac:	b9 f7       	brne	.-18     	; 0x1c69c <user_task.part.1+0x1e8>
		for(i=0;i<argc;++i)
			printf("   [%s]\n", argv[i]);
	}

    ind = 0;
	result = 0;
   1c6ae:	00 e0       	ldi	r16, 0x00	; 0
   1c6b0:	10 e0       	ldi	r17, 0x00	; 0
   1c6b2:	02 c0       	rjmp	.+4      	; 0x1c6b8 <user_task.part.1+0x204>
    ptr = argv[ind++];

    if(!ptr || argc < 1)
    {
        result = 1;
   1c6b4:	01 e0       	ldi	r16, 0x01	; 1
   1c6b6:	10 e0       	ldi	r17, 0x00	; 0
    {
        help();
        result = 1;
    }

    if (MATCHI(ptr,"dir") )
   1c6b8:	68 ed       	ldi	r22, 0xD8	; 216
   1c6ba:	7b e0       	ldi	r23, 0x0B	; 11
   1c6bc:	c7 01       	movw	r24, r14
   1c6be:	0e 94 38 32 	call	0x6470	; 0x6470 <MATCHI>
   1c6c2:	89 2b       	or	r24, r25
   1c6c4:	51 f1       	breq	.+84     	; 0x1c71a <user_task.part.1+0x266>
   1c6c6:	86 e0       	ldi	r24, 0x06	; 6
   1c6c8:	68 2e       	mov	r6, r24
   1c6ca:	77 24       	eor	r7, r7
   1c6cc:	73 94       	inc	r7
   1c6ce:	6c 0e       	add	r6, r28
   1c6d0:	7d 1e       	adc	r7, r29
   1c6d2:	f2 e0       	ldi	r31, 0x02	; 2
   1c6d4:	6f 0e       	add	r6, r31
   1c6d6:	71 1c       	adc	r7, r1
   1c6d8:	ee 24       	eor	r14, r14
   1c6da:	e3 94       	inc	r14
   1c6dc:	f1 2c       	mov	r15, r1
   1c6de:	01 e0       	ldi	r16, 0x01	; 1
   1c6e0:	10 e0       	ldi	r17, 0x00	; 0
    {
        int i;
        int args = 0;
        result = 1;
        for(i=1;i<argc;++i)
   1c6e2:	ec 14       	cp	r14, r12
   1c6e4:	fd 04       	cpc	r15, r13
   1c6e6:	74 f4       	brge	.+28     	; 0x1c704 <user_task.part.1+0x250>
        {
            if(fatfs_ls(argv[i]) == 0)
   1c6e8:	f3 01       	movw	r30, r6
   1c6ea:	81 91       	ld	r24, Z+
   1c6ec:	91 91       	ld	r25, Z+
   1c6ee:	3f 01       	movw	r6, r30
   1c6f0:	0e 94 12 73 	call	0xe624	; 0xe624 <fatfs_ls>
   1c6f4:	89 2b       	or	r24, r25
   1c6f6:	11 f4       	brne	.+4      	; 0x1c6fc <user_task.part.1+0x248>
				result = -1;
   1c6f8:	0f ef       	ldi	r16, 0xFF	; 255
   1c6fa:	1f ef       	ldi	r17, 0xFF	; 255
    if (MATCHI(ptr,"dir") )
    {
        int i;
        int args = 0;
        result = 1;
        for(i=1;i<argc;++i)
   1c6fc:	ff ef       	ldi	r31, 0xFF	; 255
   1c6fe:	ef 1a       	sub	r14, r31
   1c700:	ff 0a       	sbc	r15, r31
   1c702:	ef cf       	rjmp	.-34     	; 0x1c6e2 <user_task.part.1+0x22e>
        {
            if(fatfs_ls(argv[i]) == 0)
				result = -1;
            ++args;
        }
        if(!args)
   1c704:	ea 94       	dec	r14
   1c706:	ef 28       	or	r14, r15
   1c708:	41 f4       	brne	.+16     	; 0x1c71a <user_task.part.1+0x266>
        {
            if(fatfs_ls("") == 0)
   1c70a:	80 e2       	ldi	r24, 0x20	; 32
   1c70c:	9c e0       	ldi	r25, 0x0C	; 12
   1c70e:	0e 94 12 73 	call	0xe624	; 0xe624 <fatfs_ls>
   1c712:	89 2b       	or	r24, r25
   1c714:	11 f4       	brne	.+4      	; 0x1c71a <user_task.part.1+0x266>
				result = -1;
   1c716:	0f ef       	ldi	r16, 0xFF	; 255
   1c718:	1f ef       	ldi	r17, 0xFF	; 255
        }
    }

	if( (ret = gpib_tests(argc,argv)) )
   1c71a:	be 01       	movw	r22, r28
   1c71c:	6a 5f       	subi	r22, 0xFA	; 250
   1c71e:	7e 4f       	sbci	r23, 0xFE	; 254
   1c720:	c6 01       	movw	r24, r12
   1c722:	0e 94 d8 91 	call	0x123b0	; 0x123b0 <gpib_tests>
   1c726:	00 97       	sbiw	r24, 0x00	; 0
   1c728:	51 f0       	breq	.+20     	; 0x1c73e <user_task.part.1+0x28a>
    {
		if(ret < 0)
   1c72a:	97 fd       	sbrc	r25, 7
   1c72c:	03 c0       	rjmp	.+6      	; 0x1c734 <user_task.part.1+0x280>
			result = -1;
		else
			result = 1;
   1c72e:	01 e0       	ldi	r16, 0x01	; 1
   1c730:	10 e0       	ldi	r17, 0x00	; 0
   1c732:	02 c0       	rjmp	.+4      	; 0x1c738 <user_task.part.1+0x284>
    }

	if( (ret = gpib_tests(argc,argv)) )
    {
		if(ret < 0)
			result = -1;
   1c734:	0f ef       	ldi	r16, 0xFF	; 255
   1c736:	1f ef       	ldi	r17, 0xFF	; 255
		else
			result = 1;
// Restore GPIB BUS states
        gpib_init_devices();
   1c738:	0e 94 ec 8c 	call	0x119d8	; 0x119d8 <gpib_init_devices>
   1c73c:	0f c0       	rjmp	.+30     	; 0x1c75c <user_task.part.1+0x2a8>
    }

#ifdef POSIX_TESTS
    else if( (ret = posix_tests(argc,argv)) )
   1c73e:	be 01       	movw	r22, r28
   1c740:	6a 5f       	subi	r22, 0xFA	; 250
   1c742:	7e 4f       	sbci	r23, 0xFE	; 254
   1c744:	c6 01       	movw	r24, r12
   1c746:	0e 94 bd 81 	call	0x1037a	; 0x1037a <posix_tests>
   1c74a:	00 97       	sbiw	r24, 0x00	; 0
   1c74c:	39 f0       	breq	.+14     	; 0x1c75c <user_task.part.1+0x2a8>
	{
		if(ret < 0)
   1c74e:	97 fd       	sbrc	r25, 7
   1c750:	03 c0       	rjmp	.+6      	; 0x1c758 <user_task.part.1+0x2a4>
			result = -1;
		else
			result = 1;
   1c752:	01 e0       	ldi	r16, 0x01	; 1
   1c754:	10 e0       	ldi	r17, 0x00	; 0
   1c756:	02 c0       	rjmp	.+4      	; 0x1c75c <user_task.part.1+0x2a8>

#ifdef POSIX_TESTS
    else if( (ret = posix_tests(argc,argv)) )
	{
		if(ret < 0)
			result = -1;
   1c758:	0f ef       	ldi	r16, 0xFF	; 255
   1c75a:	1f ef       	ldi	r17, 0xFF	; 255
			result = 1;
	}
#endif

#ifdef FATFS_TESTS
    if( (ret = fatfs_tests(argc,argv) ))
   1c75c:	be 01       	movw	r22, r28
   1c75e:	6a 5f       	subi	r22, 0xFA	; 250
   1c760:	7e 4f       	sbci	r23, 0xFE	; 254
   1c762:	c6 01       	movw	r24, r12
   1c764:	0e 94 1e 74 	call	0xe83c	; 0xe83c <fatfs_tests>
   1c768:	00 97       	sbiw	r24, 0x00	; 0
   1c76a:	39 f0       	breq	.+14     	; 0x1c77a <user_task.part.1+0x2c6>
	{
		if(ret < 0)
   1c76c:	97 fd       	sbrc	r25, 7
   1c76e:	03 c0       	rjmp	.+6      	; 0x1c776 <user_task.part.1+0x2c2>
			result = -1;
		else
			result = 1;
   1c770:	01 e0       	ldi	r16, 0x01	; 1
   1c772:	10 e0       	ldi	r17, 0x00	; 0
   1c774:	02 c0       	rjmp	.+4      	; 0x1c77a <user_task.part.1+0x2c6>

#ifdef FATFS_TESTS
    if( (ret = fatfs_tests(argc,argv) ))
	{
		if(ret < 0)
			result = -1;
   1c776:	0f ef       	ldi	r16, 0xFF	; 255
   1c778:	1f ef       	ldi	r17, 0xFF	; 255
			result = 1;
	}
#endif

#ifdef LIF_SUPPORT
    if( (ret = lif_tests(argc,argv)) )
   1c77a:	be 01       	movw	r22, r28
   1c77c:	6a 5f       	subi	r22, 0xFA	; 250
   1c77e:	7e 4f       	sbci	r23, 0xFE	; 254
   1c780:	c6 01       	movw	r24, r12
   1c782:	17 db       	rcall	.-2514   	; 0x1bdb2 <lif_tests>
   1c784:	00 97       	sbiw	r24, 0x00	; 0
   1c786:	19 f0       	breq	.+6      	; 0x1c78e <user_task.part.1+0x2da>
	{
		if(ret < 0)
   1c788:	97 ff       	sbrs	r25, 7
   1c78a:	04 c0       	rjmp	.+8      	; 0x1c794 <user_task.part.1+0x2e0>
   1c78c:	09 c0       	rjmp	.+18     	; 0x1c7a0 <user_task.part.1+0x2ec>
			result = -1;
		else
			result = 1;
	}
#endif
    if(result == 1)
   1c78e:	01 30       	cpi	r16, 0x01	; 1
   1c790:	11 05       	cpc	r17, r1
   1c792:	19 f4       	brne	.+6      	; 0x1c79a <user_task.part.1+0x2e6>
        printf("OK\n");
   1c794:	8d e3       	ldi	r24, 0x3D	; 61
   1c796:	99 e4       	ldi	r25, 0x49	; 73
   1c798:	05 c0       	rjmp	.+10     	; 0x1c7a4 <user_task.part.1+0x2f0>
	else if(result == -1)
   1c79a:	0f 3f       	cpi	r16, 0xFF	; 255
   1c79c:	1f 4f       	sbci	r17, 0xFF	; 255
   1c79e:	59 f4       	brne	.+22     	; 0x1c7b6 <user_task.part.1+0x302>
        printf("Command FAILED\n");
   1c7a0:	8d e2       	ldi	r24, 0x2D	; 45
   1c7a2:	99 e4       	ldi	r25, 0x49	; 73
   1c7a4:	a0 e0       	ldi	r26, 0x00	; 0
   1c7a6:	ed b7       	in	r30, 0x3d	; 61
   1c7a8:	fe b7       	in	r31, 0x3e	; 62
   1c7aa:	81 83       	std	Z+1, r24	; 0x01
   1c7ac:	92 83       	std	Z+2, r25	; 0x02
   1c7ae:	a3 83       	std	Z+3, r26	; 0x03
   1c7b0:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   1c7b4:	33 c0       	rjmp	.+102    	; 0x1c81c <user_task.part.1+0x368>
    else
	{
        printf("Invalid Command\n");
   1c7b6:	8c e1       	ldi	r24, 0x1C	; 28
   1c7b8:	99 e4       	ldi	r25, 0x49	; 73
   1c7ba:	a0 e0       	ldi	r26, 0x00	; 0
   1c7bc:	ed b7       	in	r30, 0x3d	; 61
   1c7be:	fe b7       	in	r31, 0x3e	; 62
   1c7c0:	81 83       	std	Z+1, r24	; 0x01
   1c7c2:	92 83       	std	Z+2, r25	; 0x02
   1c7c4:	a3 83       	std	Z+3, r26	; 0x03
   1c7c6:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
        printf("    Argument count = %d\n", argc);
   1c7ca:	ed b7       	in	r30, 0x3d	; 61
   1c7cc:	fe b7       	in	r31, 0x3e	; 62
   1c7ce:	d5 82       	std	Z+5, r13	; 0x05
   1c7d0:	c4 82       	std	Z+4, r12	; 0x04
   1c7d2:	83 e0       	ldi	r24, 0x03	; 3
   1c7d4:	99 e4       	ldi	r25, 0x49	; 73
   1c7d6:	a0 e0       	ldi	r26, 0x00	; 0
   1c7d8:	81 83       	std	Z+1, r24	; 0x01
   1c7da:	92 83       	std	Z+2, r25	; 0x02
   1c7dc:	a3 83       	std	Z+3, r26	; 0x03
   1c7de:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
   1c7e2:	8e 01       	movw	r16, r28
   1c7e4:	0a 5f       	subi	r16, 0xFA	; 250
   1c7e6:	1e 4f       	sbci	r17, 0xFE	; 254
		for(i=0;i<argc;++i)
   1c7e8:	e1 2c       	mov	r14, r1
   1c7ea:	f1 2c       	mov	r15, r1
			printf("       [%s]\n", argv[i]);
   1c7ec:	86 ef       	ldi	r24, 0xF6	; 246
   1c7ee:	98 e4       	ldi	r25, 0x48	; 72
   1c7f0:	3c 01       	movw	r6, r24
   1c7f2:	81 2c       	mov	r8, r1
        printf("Command FAILED\n");
    else
	{
        printf("Invalid Command\n");
        printf("    Argument count = %d\n", argc);
		for(i=0;i<argc;++i)
   1c7f4:	ec 14       	cp	r14, r12
   1c7f6:	fd 04       	cpc	r15, r13
   1c7f8:	8c f4       	brge	.+34     	; 0x1c81c <user_task.part.1+0x368>
			printf("       [%s]\n", argv[i]);
   1c7fa:	f8 01       	movw	r30, r16
   1c7fc:	81 91       	ld	r24, Z+
   1c7fe:	91 91       	ld	r25, Z+
   1c800:	8f 01       	movw	r16, r30
   1c802:	ed b7       	in	r30, 0x3d	; 61
   1c804:	fe b7       	in	r31, 0x3e	; 62
   1c806:	95 83       	std	Z+5, r25	; 0x05
   1c808:	84 83       	std	Z+4, r24	; 0x04
   1c80a:	61 82       	std	Z+1, r6	; 0x01
   1c80c:	72 82       	std	Z+2, r7	; 0x02
   1c80e:	83 82       	std	Z+3, r8	; 0x03
   1c810:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
        printf("Command FAILED\n");
    else
	{
        printf("Invalid Command\n");
        printf("    Argument count = %d\n", argc);
		for(i=0;i<argc;++i)
   1c814:	ff ef       	ldi	r31, 0xFF	; 255
   1c816:	ef 1a       	sub	r14, r31
   1c818:	ff 0a       	sbc	r15, r31
   1c81a:	ec cf       	rjmp	.-40     	; 0x1c7f4 <user_task.part.1+0x340>
			printf("       [%s]\n", argv[i]);
	}
}
   1c81c:	c5 59       	subi	r28, 0x95	; 149
   1c81e:	de 4f       	sbci	r29, 0xFE	; 254
   1c820:	0f b6       	in	r0, 0x3f	; 63
   1c822:	f8 94       	cli
   1c824:	de bf       	out	0x3e, r29	; 62
   1c826:	0f be       	out	0x3f, r0	; 63
   1c828:	cd bf       	out	0x3d, r28	; 61
   1c82a:	df 91       	pop	r29
   1c82c:	cf 91       	pop	r28
   1c82e:	1f 91       	pop	r17
   1c830:	0f 91       	pop	r16
   1c832:	ff 90       	pop	r15
   1c834:	ef 90       	pop	r14
   1c836:	df 90       	pop	r13
   1c838:	cf 90       	pop	r12
   1c83a:	8f 90       	pop	r8
   1c83c:	7f 90       	pop	r7
   1c83e:	6f 90       	pop	r6
   1c840:	08 95       	ret

0001c842 <user_task>:
	int ret;
    char *argv[51];
    char line[256];


    if(gpib)
   1c842:	81 11       	cpse	r24, r1
        gpib_task();
   1c844:	0e 94 57 91 	call	0x122ae	; 0x122ae <gpib_task>

    if(!kbhit(0))
   1c848:	80 e0       	ldi	r24, 0x00	; 0
   1c84a:	0e 94 cd 29 	call	0x539a	; 0x539a <uart_rx_count>
   1c84e:	89 2b       	or	r24, r25
   1c850:	09 f0       	breq	.+2      	; 0x1c854 <user_task+0x12>
   1c852:	30 ce       	rjmp	.-928    	; 0x1c4b4 <user_task.part.1>
   1c854:	08 95       	ret

0001c856 <main>:


/// @brief  main() for gpib project
/// @return  should never return!
int main(void)
{
   1c856:	a3 e3       	ldi	r26, 0x33	; 51
   1c858:	b0 e0       	ldi	r27, 0x00	; 0
   1c85a:	e0 e3       	ldi	r30, 0x30	; 48
   1c85c:	f4 ee       	ldi	r31, 0xE4	; 228
   1c85e:	95 c2       	rjmp	.+1322   	; 0x1cd8a <__prologue_saves__+0x14>
    ts_t ts;
    uint32_t actual,baud;
	char tmp[32];

	clear_error();		// Clear error state
   1c860:	0e 94 ea 26 	call	0x4dd4	; 0x4dd4 <clear_error>

	GPIO_PIN_LOW(LED1);	// Activity status
   1c864:	46 98       	cbi	0x08, 6	; 8
   1c866:	3e 9a       	sbi	0x07, 6	; 7

///@ initialize bus state as soon as practical
    gpib_bus_init();
   1c868:	0e 94 97 85 	call	0x10b2e	; 0x10b2e <gpib_bus_init>
// BAUD setting moved to Makefile
    baud = BAUD;

///@ Initialize UART early
/// Returns actual BAUD rate - possible with hardware - may differ slightly
    actual = uart_init(0, baud);                  // Serial Port Initialize
   1c86c:	40 e0       	ldi	r20, 0x00	; 0
   1c86e:	52 ec       	ldi	r21, 0xC2	; 194
   1c870:	61 e0       	ldi	r22, 0x01	; 1
   1c872:	70 e0       	ldi	r23, 0x00	; 0
   1c874:	80 e0       	ldi	r24, 0x00	; 0
   1c876:	0e 94 38 29 	call	0x5270	; 0x5270 <uart_init>
   1c87a:	6b 01       	movw	r12, r22
   1c87c:	7c 01       	movw	r14, r24

///@brief Power up delay
    delayms(200);
   1c87e:	68 ec       	ldi	r22, 0xC8	; 200
   1c880:	70 e0       	ldi	r23, 0x00	; 0
   1c882:	80 e0       	ldi	r24, 0x00	; 0
   1c884:	90 e0       	ldi	r25, 0x00	; 0
   1c886:	0e 94 45 28 	call	0x508a	; 0x508a <delayms>

    sep();
   1c88a:	0e 94 fa 31 	call	0x63f4	; 0x63f4 <sep>
    printf("Start\n");
   1c88e:	8f ee       	ldi	r24, 0xEF	; 239
   1c890:	98 e4       	ldi	r25, 0x48	; 72
   1c892:	a0 e0       	ldi	r26, 0x00	; 0
   1c894:	ed b7       	in	r30, 0x3d	; 61
   1c896:	fe b7       	in	r31, 0x3e	; 62
   1c898:	81 83       	std	Z+1, r24	; 0x01
   1c89a:	92 83       	std	Z+2, r25	; 0x02
   1c89c:	a3 83       	std	Z+3, r26	; 0x03
   1c89e:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    printf("CPU Clock = %lu\n", F_CPU);
   1c8a2:	80 e0       	ldi	r24, 0x00	; 0
   1c8a4:	9d e2       	ldi	r25, 0x2D	; 45
   1c8a6:	a1 e3       	ldi	r26, 0x31	; 49
   1c8a8:	b1 e0       	ldi	r27, 0x01	; 1
   1c8aa:	ed b7       	in	r30, 0x3d	; 61
   1c8ac:	fe b7       	in	r31, 0x3e	; 62
   1c8ae:	84 83       	std	Z+4, r24	; 0x04
   1c8b0:	95 83       	std	Z+5, r25	; 0x05
   1c8b2:	a6 83       	std	Z+6, r26	; 0x06
   1c8b4:	b7 83       	std	Z+7, r27	; 0x07
   1c8b6:	8e ed       	ldi	r24, 0xDE	; 222
   1c8b8:	98 e4       	ldi	r25, 0x48	; 72
   1c8ba:	a0 e0       	ldi	r26, 0x00	; 0
   1c8bc:	81 83       	std	Z+1, r24	; 0x01
   1c8be:	92 83       	std	Z+2, r25	; 0x02
   1c8c0:	a3 83       	std	Z+3, r26	; 0x03
   1c8c2:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    printf("Requested Baud Rate: %ld, Actual: %ld\n", (long)baud, (long)actual);
   1c8c6:	ed b7       	in	r30, 0x3d	; 61
   1c8c8:	fe b7       	in	r31, 0x3e	; 62
   1c8ca:	c0 86       	std	Z+8, r12	; 0x08
   1c8cc:	d1 86       	std	Z+9, r13	; 0x09
   1c8ce:	e2 86       	std	Z+10, r14	; 0x0a
   1c8d0:	f3 86       	std	Z+11, r15	; 0x0b
   1c8d2:	80 e0       	ldi	r24, 0x00	; 0
   1c8d4:	92 ec       	ldi	r25, 0xC2	; 194
   1c8d6:	a1 e0       	ldi	r26, 0x01	; 1
   1c8d8:	b0 e0       	ldi	r27, 0x00	; 0
   1c8da:	84 83       	std	Z+4, r24	; 0x04
   1c8dc:	95 83       	std	Z+5, r25	; 0x05
   1c8de:	a6 83       	std	Z+6, r26	; 0x06
   1c8e0:	b7 83       	std	Z+7, r27	; 0x07
   1c8e2:	87 eb       	ldi	r24, 0xB7	; 183
   1c8e4:	98 e4       	ldi	r25, 0x48	; 72
   1c8e6:	a0 e0       	ldi	r26, 0x00	; 0
   1c8e8:	81 83       	std	Z+1, r24	; 0x01
   1c8ea:	92 83       	std	Z+2, r25	; 0x02
   1c8ec:	a3 83       	std	Z+3, r26	; 0x03
   1c8ee:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>

    init_timers();
   1c8f2:	0e 94 e0 35 	call	0x6bc0	; 0x6bc0 <init_timers>

    sep();
   1c8f6:	0e 94 fa 31 	call	0x63f4	; 0x63f4 <sep>
    printf("HP85 Disk and Device Emulator\n");
   1c8fa:	88 e9       	ldi	r24, 0x98	; 152
   1c8fc:	98 e4       	ldi	r25, 0x48	; 72
   1c8fe:	a0 e0       	ldi	r26, 0x00	; 0
   1c900:	ed b7       	in	r30, 0x3d	; 61
   1c902:	fe b7       	in	r31, 0x3e	; 62
   1c904:	81 83       	std	Z+1, r24	; 0x01
   1c906:	92 83       	std	Z+2, r25	; 0x02
   1c908:	a3 83       	std	Z+3, r26	; 0x03
   1c90a:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    printf(" (C) 2014-2020 by Mike Gore\n");
   1c90e:	8b e7       	ldi	r24, 0x7B	; 123
   1c910:	98 e4       	ldi	r25, 0x48	; 72
   1c912:	a0 e0       	ldi	r26, 0x00	; 0
   1c914:	ed b7       	in	r30, 0x3d	; 61
   1c916:	fe b7       	in	r31, 0x3e	; 62
   1c918:	81 83       	std	Z+1, r24	; 0x01
   1c91a:	92 83       	std	Z+2, r25	; 0x02
   1c91c:	a3 83       	std	Z+3, r26	; 0x03
   1c91e:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    printf(" GNU version 3\n");
   1c922:	8b e6       	ldi	r24, 0x6B	; 107
   1c924:	98 e4       	ldi	r25, 0x48	; 72
   1c926:	a0 e0       	ldi	r26, 0x00	; 0
   1c928:	ed b7       	in	r30, 0x3d	; 61
   1c92a:	fe b7       	in	r31, 0x3e	; 62
   1c92c:	81 83       	std	Z+1, r24	; 0x01
   1c92e:	92 83       	std	Z+2, r25	; 0x02
   1c930:	a3 83       	std	Z+3, r26	; 0x03
   1c932:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    printf("-> https://github.com/magore/hp85disk\n");
   1c936:	84 e4       	ldi	r24, 0x44	; 68
   1c938:	98 e4       	ldi	r25, 0x48	; 72
   1c93a:	a0 e0       	ldi	r26, 0x00	; 0
   1c93c:	ed b7       	in	r30, 0x3d	; 61
   1c93e:	fe b7       	in	r31, 0x3e	; 62
   1c940:	81 83       	std	Z+1, r24	; 0x01
   1c942:	92 83       	std	Z+2, r25	; 0x02
   1c944:	a3 83       	std	Z+3, r26	; 0x03
   1c946:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    printf("   GIT last pushed:   %s\n", GIT_VERSION);
   1c94a:	87 eb       	ldi	r24, 0xB7	; 183
   1c94c:	96 e1       	ldi	r25, 0x16	; 22
   1c94e:	ed b7       	in	r30, 0x3d	; 61
   1c950:	fe b7       	in	r31, 0x3e	; 62
   1c952:	95 83       	std	Z+5, r25	; 0x05
   1c954:	84 83       	std	Z+4, r24	; 0x04
   1c956:	8a e2       	ldi	r24, 0x2A	; 42
   1c958:	98 e4       	ldi	r25, 0x48	; 72
   1c95a:	a0 e0       	ldi	r26, 0x00	; 0
   1c95c:	81 83       	std	Z+1, r24	; 0x01
   1c95e:	92 83       	std	Z+2, r25	; 0x02
   1c960:	a3 83       	std	Z+3, r26	; 0x03
   1c962:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    printf("   Last updated file: %s\n", LOCAL_MOD);
   1c966:	8b ed       	ldi	r24, 0xDB	; 219
   1c968:	96 e1       	ldi	r25, 0x16	; 22
   1c96a:	ed b7       	in	r30, 0x3d	; 61
   1c96c:	fe b7       	in	r31, 0x3e	; 62
   1c96e:	95 83       	std	Z+5, r25	; 0x05
   1c970:	84 83       	std	Z+4, r24	; 0x04
   1c972:	80 e1       	ldi	r24, 0x10	; 16
   1c974:	98 e4       	ldi	r25, 0x48	; 72
   1c976:	a0 e0       	ldi	r26, 0x00	; 0
   1c978:	81 83       	std	Z+1, r24	; 0x01
   1c97a:	92 83       	std	Z+2, r25	; 0x02
   1c97c:	a3 83       	std	Z+3, r26	; 0x03
   1c97e:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>

    sep();
   1c982:	0e 94 fa 31 	call	0x63f4	; 0x63f4 <sep>
    PrintFree();
   1c986:	0e 94 06 27 	call	0x4e0c	; 0x4e0c <PrintFree>

    sep();
   1c98a:	0e 94 fa 31 	call	0x63f4	; 0x63f4 <sep>
    // delayms(200);                                 ///@brief Power up delay

///@ initialize SPI bus
    printf("Initializing SPI bus\n");
   1c98e:	8a ef       	ldi	r24, 0xFA	; 250
   1c990:	97 e4       	ldi	r25, 0x47	; 71
   1c992:	a0 e0       	ldi	r26, 0x00	; 0
   1c994:	ed b7       	in	r30, 0x3d	; 61
   1c996:	fe b7       	in	r31, 0x3e	; 62
   1c998:	81 83       	std	Z+1, r24	; 0x01
   1c99a:	92 83       	std	Z+2, r25	; 0x02
   1c99c:	a3 83       	std	Z+3, r26	; 0x03
   1c99e:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    spi_init(MMC_SLOW,GPIO_B3);
   1c9a2:	4b e0       	ldi	r20, 0x0B	; 11
   1c9a4:	50 e0       	ldi	r21, 0x00	; 0
   1c9a6:	60 e2       	ldi	r22, 0x20	; 32
   1c9a8:	71 ea       	ldi	r23, 0xA1	; 161
   1c9aa:	87 e0       	ldi	r24, 0x07	; 7
   1c9ac:	90 e0       	ldi	r25, 0x00	; 0
   1c9ae:	0e 94 6c 26 	call	0x4cd8	; 0x4cd8 <spi_init>

///@ initialize I2C bus
    printf("Initializing I2C bus\n");
   1c9b2:	84 ee       	ldi	r24, 0xE4	; 228
   1c9b4:	97 e4       	ldi	r25, 0x47	; 71
   1c9b6:	a0 e0       	ldi	r26, 0x00	; 0
   1c9b8:	ed b7       	in	r30, 0x3d	; 61
   1c9ba:	fe b7       	in	r31, 0x3e	; 62
   1c9bc:	81 83       	std	Z+1, r24	; 0x01
   1c9be:	92 83       	std	Z+2, r25	; 0x02
   1c9c0:	a3 83       	std	Z+3, r26	; 0x03
   1c9c2:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
	i2c_init(100000);
   1c9c6:	60 ea       	ldi	r22, 0xA0	; 160
   1c9c8:	76 e8       	ldi	r23, 0x86	; 134
   1c9ca:	81 e0       	ldi	r24, 0x01	; 1
   1c9cc:	90 e0       	ldi	r25, 0x00	; 0
   1c9ce:	0e 94 09 2c 	call	0x5812	; 0x5812 <i2c_init>
    sep();
   1c9d2:	0e 94 fa 31 	call	0x63f4	; 0x63f4 <sep>

///@ initialize clock by RTC if we have it
    printf("Initializing RTC\n");
   1c9d6:	82 ed       	ldi	r24, 0xD2	; 210
   1c9d8:	97 e4       	ldi	r25, 0x47	; 71
   1c9da:	a0 e0       	ldi	r26, 0x00	; 0
   1c9dc:	ed b7       	in	r30, 0x3d	; 61
   1c9de:	fe b7       	in	r31, 0x3e	; 62
   1c9e0:	81 83       	std	Z+1, r24	; 0x01
   1c9e2:	92 83       	std	Z+2, r25	; 0x02
   1c9e4:	a3 83       	std	Z+3, r26	; 0x03
   1c9e6:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    clock_clear();
   1c9ea:	0e 94 9d 35 	call	0x6b3a	; 0x6b3a <clock_clear>
    printf("Clock cleared\n");
   1c9ee:	83 ec       	ldi	r24, 0xC3	; 195
   1c9f0:	97 e4       	ldi	r25, 0x47	; 71
   1c9f2:	a0 e0       	ldi	r26, 0x00	; 0
   1c9f4:	ed b7       	in	r30, 0x3d	; 61
   1c9f6:	fe b7       	in	r31, 0x3e	; 62
   1c9f8:	81 83       	std	Z+1, r24	; 0x01
   1c9fa:	92 83       	std	Z+2, r25	; 0x02
   1c9fc:	a3 83       	std	Z+3, r26	; 0x03
   1c9fe:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    clock_getres(0, (ts_t *) &ts);
   1ca02:	be 01       	movw	r22, r28
   1ca04:	64 5d       	subi	r22, 0xD4	; 212
   1ca06:	7f 4f       	sbci	r23, 0xFF	; 255
   1ca08:	80 e0       	ldi	r24, 0x00	; 0
   1ca0a:	90 e0       	ldi	r25, 0x00	; 0
   1ca0c:	0e 94 3d 36 	call	0x6c7a	; 0x6c7a <clock_getres>
    printf("System Task Interrupt Rate: %ld Nano Seconds\n", (long) ts.tv_nsec);
   1ca10:	88 a9       	ldd	r24, Y+48	; 0x30
   1ca12:	99 a9       	ldd	r25, Y+49	; 0x31
   1ca14:	aa a9       	ldd	r26, Y+50	; 0x32
   1ca16:	bb a9       	ldd	r27, Y+51	; 0x33
   1ca18:	ed b7       	in	r30, 0x3d	; 61
   1ca1a:	fe b7       	in	r31, 0x3e	; 62
   1ca1c:	84 83       	std	Z+4, r24	; 0x04
   1ca1e:	95 83       	std	Z+5, r25	; 0x05
   1ca20:	a6 83       	std	Z+6, r26	; 0x06
   1ca22:	b7 83       	std	Z+7, r27	; 0x07
   1ca24:	85 e9       	ldi	r24, 0x95	; 149
   1ca26:	97 e4       	ldi	r25, 0x47	; 71
   1ca28:	a0 e0       	ldi	r26, 0x00	; 0
   1ca2a:	81 83       	std	Z+1, r24	; 0x01
   1ca2c:	92 83       	std	Z+2, r25	; 0x02
   1ca2e:	a3 83       	std	Z+3, r26	; 0x03
   1ca30:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>

// Timezone offset we just use local time
    initialize_clock(0);
   1ca34:	80 e0       	ldi	r24, 0x00	; 0
   1ca36:	90 e0       	ldi	r25, 0x00	; 0
   1ca38:	0e 94 18 3d 	call	0x7a30	; 0x7a30 <initialize_clock>
    display_clock();
   1ca3c:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <display_clock>
    sep();
   1ca40:	0e 94 fa 31 	call	0x63f4	; 0x63f4 <sep>

///@ initialize Optional I2C LCD
#ifdef LCD_SUPPORT
	lcd_setup();
   1ca44:	25 dc       	rcall	.-1974   	; 0x1c290 <lcd_setup>
#endif

///@ initialize MMC bus
    printf("MMC initializing start\n");
   1ca46:	8d e7       	ldi	r24, 0x7D	; 125
   1ca48:	97 e4       	ldi	r25, 0x47	; 71
   1ca4a:	a0 e0       	ldi	r26, 0x00	; 0
   1ca4c:	ed b7       	in	r30, 0x3d	; 61
   1ca4e:	fe b7       	in	r31, 0x3e	; 62
   1ca50:	81 83       	std	Z+1, r24	; 0x01
   1ca52:	92 83       	std	Z+2, r25	; 0x02
   1ca54:	a3 83       	std	Z+3, r26	; 0x03
   1ca56:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    if ( !mmc_init(1) )
   1ca5a:	81 e0       	ldi	r24, 0x01	; 1
   1ca5c:	90 e0       	ldi	r25, 0x00	; 0
   1ca5e:	0e 94 0a 6f 	call	0xde14	; 0xde14 <mmc_init>
   1ca62:	89 2b       	or	r24, r25
   1ca64:	51 f4       	brne	.+20     	; 0x1ca7a <main+0x224>
		printf("MMC initialized\n");
   1ca66:	8c e6       	ldi	r24, 0x6C	; 108
   1ca68:	97 e4       	ldi	r25, 0x47	; 71
   1ca6a:	a0 e0       	ldi	r26, 0x00	; 0
   1ca6c:	ed b7       	in	r30, 0x3d	; 61
   1ca6e:	fe b7       	in	r31, 0x3e	; 62
   1ca70:	81 83       	std	Z+1, r24	; 0x01
   1ca72:	92 83       	std	Z+2, r25	; 0x02
   1ca74:	a3 83       	std	Z+3, r26	; 0x03
   1ca76:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    sep();
   1ca7a:	0e 94 fa 31 	call	0x63f4	; 0x63f4 <sep>

///@ initialize bus state as soon as practical
    gpib_bus_init();
   1ca7e:	0e 94 97 85 	call	0x10b2e	; 0x10b2e <gpib_bus_init>
    printf("GPIB bus initialized\n");
   1ca82:	86 e5       	ldi	r24, 0x56	; 86
   1ca84:	97 e4       	ldi	r25, 0x47	; 71
   1ca86:	a0 e0       	ldi	r26, 0x00	; 0
   1ca88:	ed b7       	in	r30, 0x3d	; 61
   1ca8a:	fe b7       	in	r31, 0x3e	; 62
   1ca8c:	81 83       	std	Z+1, r24	; 0x01
   1ca8e:	92 83       	std	Z+2, r25	; 0x02
   1ca90:	a3 83       	std	Z+3, r26	; 0x03
   1ca92:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>

///@ initialize Printer Capture
    printer_init();
   1ca96:	0e 94 1f be 	call	0x17c3e	; 0x17c3e <printer_init>
    printf("Printer initialized\n");
   1ca9a:	81 e4       	ldi	r24, 0x41	; 65
   1ca9c:	97 e4       	ldi	r25, 0x47	; 71
   1ca9e:	a0 e0       	ldi	r26, 0x00	; 0
   1caa0:	ed b7       	in	r30, 0x3d	; 61
   1caa2:	fe b7       	in	r31, 0x3e	; 62
   1caa4:	81 83       	std	Z+1, r24	; 0x01
   1caa6:	92 83       	std	Z+2, r25	; 0x02
   1caa8:	a3 83       	std	Z+3, r26	; 0x03
   1caaa:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>

///@ initialize GPIB timer tasks
    printf("GPIB Timer Setup\n");
   1caae:	8f e2       	ldi	r24, 0x2F	; 47
   1cab0:	97 e4       	ldi	r25, 0x47	; 71
   1cab2:	a0 e0       	ldi	r26, 0x00	; 0
   1cab4:	ed b7       	in	r30, 0x3d	; 61
   1cab6:	fe b7       	in	r31, 0x3e	; 62
   1cab8:	81 83       	std	Z+1, r24	; 0x01
   1caba:	92 83       	std	Z+2, r25	; 0x02
   1cabc:	a3 83       	std	Z+3, r26	; 0x03
   1cabe:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    gpib_timer_init();
   1cac2:	0e 94 ab 83 	call	0x10756	; 0x10756 <gpib_timer_init>
    printf("GPIB Timer initialized\n");
   1cac6:	87 e1       	ldi	r24, 0x17	; 23
   1cac8:	97 e4       	ldi	r25, 0x47	; 71
   1caca:	a0 e0       	ldi	r26, 0x00	; 0
   1cacc:	ed b7       	in	r30, 0x3d	; 61
   1cace:	fe b7       	in	r31, 0x3e	; 62
   1cad0:	81 83       	std	Z+1, r24	; 0x01
   1cad2:	92 83       	std	Z+2, r25	; 0x02
   1cad4:	a3 83       	std	Z+3, r26	; 0x03
   1cad6:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>

///@brief Process hp85disk emulator config file
    gpib_file_init();
   1cada:	0e 94 0f 8c 	call	0x1181e	; 0x1181e <gpib_file_init>
    printf("GPIB File init done\n");
   1cade:	82 e0       	ldi	r24, 0x02	; 2
   1cae0:	97 e4       	ldi	r25, 0x47	; 71
   1cae2:	a0 e0       	ldi	r26, 0x00	; 0
   1cae4:	ed b7       	in	r30, 0x3d	; 61
   1cae6:	fe b7       	in	r31, 0x3e	; 62
   1cae8:	81 83       	std	Z+1, r24	; 0x01
   1caea:	92 83       	std	Z+2, r25	; 0x02
   1caec:	a3 83       	std	Z+3, r26	; 0x03
   1caee:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>

///@brief GPIB talking/listening state variables
///Must be done AFTER gpib_file_init() so we have a valid configuration
    gpib_state_init();
   1caf2:	0e 94 ff 85 	call	0x10bfe	; 0x10bfe <gpib_state_init>
    printf("GPIB State init done\n");
   1caf6:	8c ee       	ldi	r24, 0xEC	; 236
   1caf8:	96 e4       	ldi	r25, 0x46	; 70
   1cafa:	a0 e0       	ldi	r26, 0x00	; 0
   1cafc:	ed b7       	in	r30, 0x3d	; 61
   1cafe:	fe b7       	in	r31, 0x3e	; 62
   1cb00:	81 83       	std	Z+1, r24	; 0x01
   1cb02:	92 83       	std	Z+2, r25	; 0x02
   1cb04:	a3 83       	std	Z+3, r26	; 0x03
   1cb06:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    sep();
   1cb0a:	0e 94 fa 31 	call	0x63f4	; 0x63f4 <sep>

///@brief Display Address Summary
    display_Addresses(0);
   1cb0e:	80 e0       	ldi	r24, 0x00	; 0
   1cb10:	90 e0       	ldi	r25, 0x00	; 0
   1cb12:	0e 94 b4 93 	call	0x12768	; 0x12768 <display_Addresses>
    sep();
   1cb16:	0e 94 fa 31 	call	0x63f4	; 0x63f4 <sep>

///@brief Display debug level
    printf("debuglevel   = %04xH\n",(int)debuglevel);
   1cb1a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1cb1e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1cb22:	ed b7       	in	r30, 0x3d	; 61
   1cb24:	fe b7       	in	r31, 0x3e	; 62
   1cb26:	95 83       	std	Z+5, r25	; 0x05
   1cb28:	84 83       	std	Z+4, r24	; 0x04
   1cb2a:	86 ed       	ldi	r24, 0xD6	; 214
   1cb2c:	96 e4       	ldi	r25, 0x46	; 70
   1cb2e:	a0 e0       	ldi	r26, 0x00	; 0
   1cb30:	81 83       	std	Z+1, r24	; 0x01
   1cb32:	92 83       	std	Z+2, r25	; 0x02
   1cb34:	a3 83       	std	Z+3, r26	; 0x03
   1cb36:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
    sep();
   1cb3a:	0e 94 fa 31 	call	0x63f4	; 0x63f4 <sep>

///@brief Format any drives that do not yet exist
    format_drives();
   1cb3e:	0e 94 c2 9a 	call	0x13584	; 0x13584 <format_drives>

#ifdef LCD_SUPPORT
	sprintf((char *) tmp, "SS80=%d AMIGO=%d",
   1cb42:	83 e0       	ldi	r24, 0x03	; 3
   1cb44:	0e 94 23 97 	call	0x12e46	; 0x12e46 <count_drive_types>
   1cb48:	18 2f       	mov	r17, r24
   1cb4a:	81 e0       	ldi	r24, 0x01	; 1
   1cb4c:	0e 94 23 97 	call	0x12e46	; 0x12e46 <count_drive_types>
   1cb50:	08 2e       	mov	r0, r24
   1cb52:	00 0c       	add	r0, r0
   1cb54:	99 0b       	sbc	r25, r25
   1cb56:	ed b7       	in	r30, 0x3d	; 61
   1cb58:	fe b7       	in	r31, 0x3e	; 62
   1cb5a:	91 87       	std	Z+9, r25	; 0x09
   1cb5c:	80 87       	std	Z+8, r24	; 0x08
   1cb5e:	81 2f       	mov	r24, r17
   1cb60:	11 0f       	add	r17, r17
   1cb62:	99 0b       	sbc	r25, r25
   1cb64:	97 83       	std	Z+7, r25	; 0x07
   1cb66:	86 83       	std	Z+6, r24	; 0x06
   1cb68:	85 ec       	ldi	r24, 0xC5	; 197
   1cb6a:	96 e4       	ldi	r25, 0x46	; 70
   1cb6c:	a0 e0       	ldi	r26, 0x00	; 0
   1cb6e:	83 83       	std	Z+3, r24	; 0x03
   1cb70:	94 83       	std	Z+4, r25	; 0x04
   1cb72:	a5 83       	std	Z+5, r26	; 0x05
   1cb74:	8e 01       	movw	r16, r28
   1cb76:	04 5f       	subi	r16, 0xF4	; 244
   1cb78:	1f 4f       	sbci	r17, 0xFF	; 255
   1cb7a:	12 83       	std	Z+2, r17	; 0x02
   1cb7c:	01 83       	std	Z+1, r16	; 0x01
   1cb7e:	0e 94 d7 46 	call	0x8dae	; 0x8dae <sprintf_P>
		(int) count_drive_types(SS80_TYPE),
		(int) count_drive_types(AMIGO_TYPE) );
	sprintf((char *) _line1, "%-16s", tmp);
   1cb82:	ed b7       	in	r30, 0x3d	; 61
   1cb84:	fe b7       	in	r31, 0x3e	; 62
   1cb86:	17 83       	std	Z+7, r17	; 0x07
   1cb88:	06 83       	std	Z+6, r16	; 0x06
   1cb8a:	8f eb       	ldi	r24, 0xBF	; 191
   1cb8c:	96 e4       	ldi	r25, 0x46	; 70
   1cb8e:	a0 e0       	ldi	r26, 0x00	; 0
   1cb90:	83 83       	std	Z+3, r24	; 0x03
   1cb92:	94 83       	std	Z+4, r25	; 0x04
   1cb94:	a5 83       	std	Z+5, r26	; 0x05
   1cb96:	8c e0       	ldi	r24, 0x0C	; 12
   1cb98:	93 e0       	ldi	r25, 0x03	; 3
   1cb9a:	92 83       	std	Z+2, r25	; 0x02
   1cb9c:	81 83       	std	Z+1, r24	; 0x01
   1cb9e:	0e 94 d7 46 	call	0x8dae	; 0x8dae <sprintf_P>
	sprintf((char *) _line2, "%-16s", "(C)Mike Gore");
   1cba2:	8b e0       	ldi	r24, 0x0B	; 11
   1cba4:	97 e1       	ldi	r25, 0x17	; 23
   1cba6:	ed b7       	in	r30, 0x3d	; 61
   1cba8:	fe b7       	in	r31, 0x3e	; 62
   1cbaa:	97 83       	std	Z+7, r25	; 0x07
   1cbac:	86 83       	std	Z+6, r24	; 0x06
   1cbae:	89 eb       	ldi	r24, 0xB9	; 185
   1cbb0:	96 e4       	ldi	r25, 0x46	; 70
   1cbb2:	a0 e0       	ldi	r26, 0x00	; 0
   1cbb4:	83 83       	std	Z+3, r24	; 0x03
   1cbb6:	94 83       	std	Z+4, r25	; 0x04
   1cbb8:	a5 83       	std	Z+5, r26	; 0x05
   1cbba:	85 ef       	ldi	r24, 0xF5	; 245
   1cbbc:	92 e0       	ldi	r25, 0x02	; 2
   1cbbe:	92 83       	std	Z+2, r25	; 0x02
   1cbc0:	81 83       	std	Z+1, r24	; 0x01
   1cbc2:	0e 94 d7 46 	call	0x8dae	; 0x8dae <sprintf_P>

	i2c_task_run();
   1cbc6:	0e 94 9f 2c 	call	0x593e	; 0x593e <i2c_task_run>
	delayms(1000);
   1cbca:	68 ee       	ldi	r22, 0xE8	; 232
   1cbcc:	73 e0       	ldi	r23, 0x03	; 3
   1cbce:	80 e0       	ldi	r24, 0x00	; 0
   1cbd0:	90 e0       	ldi	r25, 0x00	; 0
   1cbd2:	0e 94 45 28 	call	0x508a	; 0x508a <delayms>
    if(!i2c_task.done || i2c_task.error )
   1cbd6:	80 91 78 17 	lds	r24, 0x1778	; 0x801778 <i2c_task+0x2>
   1cbda:	88 23       	and	r24, r24
   1cbdc:	21 f0       	breq	.+8      	; 0x1cbe6 <main+0x390>
   1cbde:	80 91 79 17 	lds	r24, 0x1779	; 0x801779 <i2c_task+0x3>
   1cbe2:	88 23       	and	r24, r24
   1cbe4:	61 f0       	breq	.+24     	; 0x1cbfe <main+0x3a8>
	{
		i2c_display_task_errors();
   1cbe6:	0e 94 06 2f 	call	0x5e0c	; 0x5e0c <i2c_display_task_errors>
		printf("I2C LCD is NOT attached!\n");
   1cbea:	8f e9       	ldi	r24, 0x9F	; 159
   1cbec:	96 e4       	ldi	r25, 0x46	; 70
   1cbee:	a0 e0       	ldi	r26, 0x00	; 0
   1cbf0:	ed b7       	in	r30, 0x3d	; 61
   1cbf2:	fe b7       	in	r31, 0x3e	; 62
   1cbf4:	81 83       	std	Z+1, r24	; 0x01
   1cbf6:	92 83       	std	Z+2, r25	; 0x02
   1cbf8:	a3 83       	std	Z+3, r26	; 0x03
   1cbfa:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
	}
#endif

///@brief Start main GPIB state machine
    printf("Starting GPIB TASK\n");
   1cbfe:	8b e8       	ldi	r24, 0x8B	; 139
   1cc00:	96 e4       	ldi	r25, 0x46	; 70
   1cc02:	a0 e0       	ldi	r26, 0x00	; 0
   1cc04:	ed b7       	in	r30, 0x3d	; 61
   1cc06:	fe b7       	in	r31, 0x3e	; 62
   1cc08:	81 83       	std	Z+1, r24	; 0x01
   1cc0a:	92 83       	std	Z+2, r25	; 0x02
   1cc0c:	a3 83       	std	Z+3, r26	; 0x03
   1cc0e:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <printf_P>
///@brief Keep the task running 
/// task does not exit unless a keypress occurs
/// When it restarts ALL GPIB states are reset 
    while ( 1)
    {
        user_task(1);
   1cc12:	81 e0       	ldi	r24, 0x01	; 1
   1cc14:	16 de       	rcall	.-980    	; 0x1c842 <user_task>
   1cc16:	fd cf       	rjmp	.-6      	; 0x1cc12 <main+0x3bc>

0001cc18 <__mulsi3>:
   1cc18:	db 01       	movw	r26, r22
   1cc1a:	8f 93       	push	r24
   1cc1c:	9f 93       	push	r25
   1cc1e:	8b d0       	rcall	.+278    	; 0x1cd36 <__muluhisi3>
   1cc20:	bf 91       	pop	r27
   1cc22:	af 91       	pop	r26
   1cc24:	a2 9f       	mul	r26, r18
   1cc26:	80 0d       	add	r24, r0
   1cc28:	91 1d       	adc	r25, r1
   1cc2a:	a3 9f       	mul	r26, r19
   1cc2c:	90 0d       	add	r25, r0
   1cc2e:	b2 9f       	mul	r27, r18
   1cc30:	90 0d       	add	r25, r0
   1cc32:	11 24       	eor	r1, r1
   1cc34:	08 95       	ret

0001cc36 <__udivmodqi4>:
   1cc36:	99 1b       	sub	r25, r25
   1cc38:	79 e0       	ldi	r23, 0x09	; 9
   1cc3a:	04 c0       	rjmp	.+8      	; 0x1cc44 <__udivmodqi4_ep>

0001cc3c <__udivmodqi4_loop>:
   1cc3c:	99 1f       	adc	r25, r25
   1cc3e:	96 17       	cp	r25, r22
   1cc40:	08 f0       	brcs	.+2      	; 0x1cc44 <__udivmodqi4_ep>
   1cc42:	96 1b       	sub	r25, r22

0001cc44 <__udivmodqi4_ep>:
   1cc44:	88 1f       	adc	r24, r24
   1cc46:	7a 95       	dec	r23
   1cc48:	c9 f7       	brne	.-14     	; 0x1cc3c <__udivmodqi4_loop>
   1cc4a:	80 95       	com	r24
   1cc4c:	08 95       	ret

0001cc4e <__udivmodhi4>:
   1cc4e:	aa 1b       	sub	r26, r26
   1cc50:	bb 1b       	sub	r27, r27
   1cc52:	51 e1       	ldi	r21, 0x11	; 17
   1cc54:	07 c0       	rjmp	.+14     	; 0x1cc64 <__udivmodhi4_ep>

0001cc56 <__udivmodhi4_loop>:
   1cc56:	aa 1f       	adc	r26, r26
   1cc58:	bb 1f       	adc	r27, r27
   1cc5a:	a6 17       	cp	r26, r22
   1cc5c:	b7 07       	cpc	r27, r23
   1cc5e:	10 f0       	brcs	.+4      	; 0x1cc64 <__udivmodhi4_ep>
   1cc60:	a6 1b       	sub	r26, r22
   1cc62:	b7 0b       	sbc	r27, r23

0001cc64 <__udivmodhi4_ep>:
   1cc64:	88 1f       	adc	r24, r24
   1cc66:	99 1f       	adc	r25, r25
   1cc68:	5a 95       	dec	r21
   1cc6a:	a9 f7       	brne	.-22     	; 0x1cc56 <__udivmodhi4_loop>
   1cc6c:	80 95       	com	r24
   1cc6e:	90 95       	com	r25
   1cc70:	bc 01       	movw	r22, r24
   1cc72:	cd 01       	movw	r24, r26
   1cc74:	08 95       	ret

0001cc76 <__divmodhi4>:
   1cc76:	97 fb       	bst	r25, 7
   1cc78:	07 2e       	mov	r0, r23
   1cc7a:	16 f4       	brtc	.+4      	; 0x1cc80 <__divmodhi4+0xa>
   1cc7c:	00 94       	com	r0
   1cc7e:	06 d0       	rcall	.+12     	; 0x1cc8c <__divmodhi4_neg1>
   1cc80:	77 fd       	sbrc	r23, 7
   1cc82:	08 d0       	rcall	.+16     	; 0x1cc94 <__divmodhi4_neg2>
   1cc84:	e4 df       	rcall	.-56     	; 0x1cc4e <__udivmodhi4>
   1cc86:	07 fc       	sbrc	r0, 7
   1cc88:	05 d0       	rcall	.+10     	; 0x1cc94 <__divmodhi4_neg2>
   1cc8a:	3e f4       	brtc	.+14     	; 0x1cc9a <__divmodhi4_exit>

0001cc8c <__divmodhi4_neg1>:
   1cc8c:	90 95       	com	r25
   1cc8e:	81 95       	neg	r24
   1cc90:	9f 4f       	sbci	r25, 0xFF	; 255
   1cc92:	08 95       	ret

0001cc94 <__divmodhi4_neg2>:
   1cc94:	70 95       	com	r23
   1cc96:	61 95       	neg	r22
   1cc98:	7f 4f       	sbci	r23, 0xFF	; 255

0001cc9a <__divmodhi4_exit>:
   1cc9a:	08 95       	ret

0001cc9c <__udivmodsi4>:
   1cc9c:	a1 e2       	ldi	r26, 0x21	; 33
   1cc9e:	1a 2e       	mov	r1, r26
   1cca0:	aa 1b       	sub	r26, r26
   1cca2:	bb 1b       	sub	r27, r27
   1cca4:	fd 01       	movw	r30, r26
   1cca6:	0d c0       	rjmp	.+26     	; 0x1ccc2 <__udivmodsi4_ep>

0001cca8 <__udivmodsi4_loop>:
   1cca8:	aa 1f       	adc	r26, r26
   1ccaa:	bb 1f       	adc	r27, r27
   1ccac:	ee 1f       	adc	r30, r30
   1ccae:	ff 1f       	adc	r31, r31
   1ccb0:	a2 17       	cp	r26, r18
   1ccb2:	b3 07       	cpc	r27, r19
   1ccb4:	e4 07       	cpc	r30, r20
   1ccb6:	f5 07       	cpc	r31, r21
   1ccb8:	20 f0       	brcs	.+8      	; 0x1ccc2 <__udivmodsi4_ep>
   1ccba:	a2 1b       	sub	r26, r18
   1ccbc:	b3 0b       	sbc	r27, r19
   1ccbe:	e4 0b       	sbc	r30, r20
   1ccc0:	f5 0b       	sbc	r31, r21

0001ccc2 <__udivmodsi4_ep>:
   1ccc2:	66 1f       	adc	r22, r22
   1ccc4:	77 1f       	adc	r23, r23
   1ccc6:	88 1f       	adc	r24, r24
   1ccc8:	99 1f       	adc	r25, r25
   1ccca:	1a 94       	dec	r1
   1cccc:	69 f7       	brne	.-38     	; 0x1cca8 <__udivmodsi4_loop>
   1ccce:	60 95       	com	r22
   1ccd0:	70 95       	com	r23
   1ccd2:	80 95       	com	r24
   1ccd4:	90 95       	com	r25
   1ccd6:	9b 01       	movw	r18, r22
   1ccd8:	ac 01       	movw	r20, r24
   1ccda:	bd 01       	movw	r22, r26
   1ccdc:	cf 01       	movw	r24, r30
   1ccde:	08 95       	ret

0001cce0 <__divmodsi4>:
   1cce0:	05 2e       	mov	r0, r21
   1cce2:	97 fb       	bst	r25, 7
   1cce4:	16 f4       	brtc	.+4      	; 0x1ccea <__divmodsi4+0xa>
   1cce6:	00 94       	com	r0
   1cce8:	0f d0       	rcall	.+30     	; 0x1cd08 <__negsi2>
   1ccea:	57 fd       	sbrc	r21, 7
   1ccec:	05 d0       	rcall	.+10     	; 0x1ccf8 <__divmodsi4_neg2>
   1ccee:	d6 df       	rcall	.-84     	; 0x1cc9c <__udivmodsi4>
   1ccf0:	07 fc       	sbrc	r0, 7
   1ccf2:	02 d0       	rcall	.+4      	; 0x1ccf8 <__divmodsi4_neg2>
   1ccf4:	46 f4       	brtc	.+16     	; 0x1cd06 <__divmodsi4_exit>
   1ccf6:	08 c0       	rjmp	.+16     	; 0x1cd08 <__negsi2>

0001ccf8 <__divmodsi4_neg2>:
   1ccf8:	50 95       	com	r21
   1ccfa:	40 95       	com	r20
   1ccfc:	30 95       	com	r19
   1ccfe:	21 95       	neg	r18
   1cd00:	3f 4f       	sbci	r19, 0xFF	; 255
   1cd02:	4f 4f       	sbci	r20, 0xFF	; 255
   1cd04:	5f 4f       	sbci	r21, 0xFF	; 255

0001cd06 <__divmodsi4_exit>:
   1cd06:	08 95       	ret

0001cd08 <__negsi2>:
   1cd08:	90 95       	com	r25
   1cd0a:	80 95       	com	r24
   1cd0c:	70 95       	com	r23
   1cd0e:	61 95       	neg	r22
   1cd10:	7f 4f       	sbci	r23, 0xFF	; 255
   1cd12:	8f 4f       	sbci	r24, 0xFF	; 255
   1cd14:	9f 4f       	sbci	r25, 0xFF	; 255
   1cd16:	08 95       	ret

0001cd18 <__tablejump2__>:
   1cd18:	ee 0f       	add	r30, r30
   1cd1a:	ff 1f       	adc	r31, r31
   1cd1c:	00 24       	eor	r0, r0
   1cd1e:	00 1c       	adc	r0, r0
   1cd20:	0b be       	out	0x3b, r0	; 59
   1cd22:	07 90       	elpm	r0, Z+
   1cd24:	f6 91       	elpm	r31, Z
   1cd26:	e0 2d       	mov	r30, r0
   1cd28:	09 94       	ijmp

0001cd2a <__usmulhisi3>:
   1cd2a:	6f d0       	rcall	.+222    	; 0x1ce0a <__umulhisi3>

0001cd2c <__usmulhisi3_tail>:
   1cd2c:	b7 ff       	sbrs	r27, 7
   1cd2e:	08 95       	ret
   1cd30:	82 1b       	sub	r24, r18
   1cd32:	93 0b       	sbc	r25, r19
   1cd34:	08 95       	ret

0001cd36 <__muluhisi3>:
   1cd36:	69 d0       	rcall	.+210    	; 0x1ce0a <__umulhisi3>
   1cd38:	a5 9f       	mul	r26, r21
   1cd3a:	90 0d       	add	r25, r0
   1cd3c:	b4 9f       	mul	r27, r20
   1cd3e:	90 0d       	add	r25, r0
   1cd40:	a4 9f       	mul	r26, r20
   1cd42:	80 0d       	add	r24, r0
   1cd44:	91 1d       	adc	r25, r1
   1cd46:	11 24       	eor	r1, r1
   1cd48:	08 95       	ret

0001cd4a <__mulshisi3>:
   1cd4a:	b7 ff       	sbrs	r27, 7
   1cd4c:	f4 cf       	rjmp	.-24     	; 0x1cd36 <__muluhisi3>

0001cd4e <__mulohisi3>:
   1cd4e:	f3 df       	rcall	.-26     	; 0x1cd36 <__muluhisi3>
   1cd50:	82 1b       	sub	r24, r18
   1cd52:	93 0b       	sbc	r25, r19
   1cd54:	08 95       	ret

0001cd56 <__negdi2>:
   1cd56:	60 95       	com	r22
   1cd58:	70 95       	com	r23
   1cd5a:	80 95       	com	r24
   1cd5c:	90 95       	com	r25
   1cd5e:	30 95       	com	r19
   1cd60:	40 95       	com	r20
   1cd62:	50 95       	com	r21
   1cd64:	21 95       	neg	r18
   1cd66:	3f 4f       	sbci	r19, 0xFF	; 255
   1cd68:	4f 4f       	sbci	r20, 0xFF	; 255
   1cd6a:	5f 4f       	sbci	r21, 0xFF	; 255
   1cd6c:	6f 4f       	sbci	r22, 0xFF	; 255
   1cd6e:	7f 4f       	sbci	r23, 0xFF	; 255
   1cd70:	8f 4f       	sbci	r24, 0xFF	; 255
   1cd72:	9f 4f       	sbci	r25, 0xFF	; 255
   1cd74:	08 95       	ret

0001cd76 <__prologue_saves__>:
   1cd76:	2f 92       	push	r2
   1cd78:	3f 92       	push	r3
   1cd7a:	4f 92       	push	r4
   1cd7c:	5f 92       	push	r5
   1cd7e:	6f 92       	push	r6
   1cd80:	7f 92       	push	r7
   1cd82:	8f 92       	push	r8
   1cd84:	9f 92       	push	r9
   1cd86:	af 92       	push	r10
   1cd88:	bf 92       	push	r11
   1cd8a:	cf 92       	push	r12
   1cd8c:	df 92       	push	r13
   1cd8e:	ef 92       	push	r14
   1cd90:	ff 92       	push	r15
   1cd92:	0f 93       	push	r16
   1cd94:	1f 93       	push	r17
   1cd96:	cf 93       	push	r28
   1cd98:	df 93       	push	r29
   1cd9a:	cd b7       	in	r28, 0x3d	; 61
   1cd9c:	de b7       	in	r29, 0x3e	; 62
   1cd9e:	ca 1b       	sub	r28, r26
   1cda0:	db 0b       	sbc	r29, r27
   1cda2:	0f b6       	in	r0, 0x3f	; 63
   1cda4:	f8 94       	cli
   1cda6:	de bf       	out	0x3e, r29	; 62
   1cda8:	0f be       	out	0x3f, r0	; 63
   1cdaa:	cd bf       	out	0x3d, r28	; 61
   1cdac:	09 94       	ijmp

0001cdae <__epilogue_restores__>:
   1cdae:	2a 88       	ldd	r2, Y+18	; 0x12
   1cdb0:	39 88       	ldd	r3, Y+17	; 0x11
   1cdb2:	48 88       	ldd	r4, Y+16	; 0x10
   1cdb4:	5f 84       	ldd	r5, Y+15	; 0x0f
   1cdb6:	6e 84       	ldd	r6, Y+14	; 0x0e
   1cdb8:	7d 84       	ldd	r7, Y+13	; 0x0d
   1cdba:	8c 84       	ldd	r8, Y+12	; 0x0c
   1cdbc:	9b 84       	ldd	r9, Y+11	; 0x0b
   1cdbe:	aa 84       	ldd	r10, Y+10	; 0x0a
   1cdc0:	b9 84       	ldd	r11, Y+9	; 0x09
   1cdc2:	c8 84       	ldd	r12, Y+8	; 0x08
   1cdc4:	df 80       	ldd	r13, Y+7	; 0x07
   1cdc6:	ee 80       	ldd	r14, Y+6	; 0x06
   1cdc8:	fd 80       	ldd	r15, Y+5	; 0x05
   1cdca:	0c 81       	ldd	r16, Y+4	; 0x04
   1cdcc:	1b 81       	ldd	r17, Y+3	; 0x03
   1cdce:	aa 81       	ldd	r26, Y+2	; 0x02
   1cdd0:	b9 81       	ldd	r27, Y+1	; 0x01
   1cdd2:	ce 0f       	add	r28, r30
   1cdd4:	d1 1d       	adc	r29, r1
   1cdd6:	0f b6       	in	r0, 0x3f	; 63
   1cdd8:	f8 94       	cli
   1cdda:	de bf       	out	0x3e, r29	; 62
   1cddc:	0f be       	out	0x3f, r0	; 63
   1cdde:	cd bf       	out	0x3d, r28	; 61
   1cde0:	ed 01       	movw	r28, r26
   1cde2:	08 95       	ret

0001cde4 <__xload_1>:
   1cde4:	57 fd       	sbrc	r21, 7
   1cde6:	03 c0       	rjmp	.+6      	; 0x1cdee <__xload_1+0xa>
   1cde8:	5b bf       	out	0x3b, r21	; 59
   1cdea:	67 91       	elpm	r22, Z+
   1cdec:	08 95       	ret
   1cdee:	60 81       	ld	r22, Z
   1cdf0:	08 95       	ret

0001cdf2 <__cmpdi2_s8>:
   1cdf2:	00 24       	eor	r0, r0
   1cdf4:	a7 fd       	sbrc	r26, 7
   1cdf6:	00 94       	com	r0
   1cdf8:	2a 17       	cp	r18, r26
   1cdfa:	30 05       	cpc	r19, r0
   1cdfc:	40 05       	cpc	r20, r0
   1cdfe:	50 05       	cpc	r21, r0
   1ce00:	60 05       	cpc	r22, r0
   1ce02:	70 05       	cpc	r23, r0
   1ce04:	80 05       	cpc	r24, r0
   1ce06:	90 05       	cpc	r25, r0
   1ce08:	08 95       	ret

0001ce0a <__umulhisi3>:
   1ce0a:	a2 9f       	mul	r26, r18
   1ce0c:	b0 01       	movw	r22, r0
   1ce0e:	b3 9f       	mul	r27, r19
   1ce10:	c0 01       	movw	r24, r0
   1ce12:	a3 9f       	mul	r26, r19
   1ce14:	70 0d       	add	r23, r0
   1ce16:	81 1d       	adc	r24, r1
   1ce18:	11 24       	eor	r1, r1
   1ce1a:	91 1d       	adc	r25, r1
   1ce1c:	b2 9f       	mul	r27, r18
   1ce1e:	70 0d       	add	r23, r0
   1ce20:	81 1d       	adc	r24, r1
   1ce22:	11 24       	eor	r1, r1
   1ce24:	91 1d       	adc	r25, r1
   1ce26:	08 95       	ret

0001ce28 <__subsf3>:
   1ce28:	50 58       	subi	r21, 0x80	; 128

0001ce2a <__addsf3>:
   1ce2a:	bb 27       	eor	r27, r27
   1ce2c:	aa 27       	eor	r26, r26
   1ce2e:	0e d0       	rcall	.+28     	; 0x1ce4c <__addsf3x>
   1ce30:	75 c1       	rjmp	.+746    	; 0x1d11c <__fp_round>
   1ce32:	66 d1       	rcall	.+716    	; 0x1d100 <__fp_pscA>
   1ce34:	30 f0       	brcs	.+12     	; 0x1ce42 <__addsf3+0x18>
   1ce36:	6b d1       	rcall	.+726    	; 0x1d10e <__fp_pscB>
   1ce38:	20 f0       	brcs	.+8      	; 0x1ce42 <__addsf3+0x18>
   1ce3a:	31 f4       	brne	.+12     	; 0x1ce48 <__addsf3+0x1e>
   1ce3c:	9f 3f       	cpi	r25, 0xFF	; 255
   1ce3e:	11 f4       	brne	.+4      	; 0x1ce44 <__addsf3+0x1a>
   1ce40:	1e f4       	brtc	.+6      	; 0x1ce48 <__addsf3+0x1e>
   1ce42:	5b c1       	rjmp	.+694    	; 0x1d0fa <__fp_nan>
   1ce44:	0e f4       	brtc	.+2      	; 0x1ce48 <__addsf3+0x1e>
   1ce46:	e0 95       	com	r30
   1ce48:	e7 fb       	bst	r30, 7
   1ce4a:	51 c1       	rjmp	.+674    	; 0x1d0ee <__fp_inf>

0001ce4c <__addsf3x>:
   1ce4c:	e9 2f       	mov	r30, r25
   1ce4e:	77 d1       	rcall	.+750    	; 0x1d13e <__fp_split3>
   1ce50:	80 f3       	brcs	.-32     	; 0x1ce32 <__addsf3+0x8>
   1ce52:	ba 17       	cp	r27, r26
   1ce54:	62 07       	cpc	r22, r18
   1ce56:	73 07       	cpc	r23, r19
   1ce58:	84 07       	cpc	r24, r20
   1ce5a:	95 07       	cpc	r25, r21
   1ce5c:	18 f0       	brcs	.+6      	; 0x1ce64 <__addsf3x+0x18>
   1ce5e:	71 f4       	brne	.+28     	; 0x1ce7c <__addsf3x+0x30>
   1ce60:	9e f5       	brtc	.+102    	; 0x1cec8 <__addsf3x+0x7c>
   1ce62:	8f c1       	rjmp	.+798    	; 0x1d182 <__fp_zero>
   1ce64:	0e f4       	brtc	.+2      	; 0x1ce68 <__addsf3x+0x1c>
   1ce66:	e0 95       	com	r30
   1ce68:	0b 2e       	mov	r0, r27
   1ce6a:	ba 2f       	mov	r27, r26
   1ce6c:	a0 2d       	mov	r26, r0
   1ce6e:	0b 01       	movw	r0, r22
   1ce70:	b9 01       	movw	r22, r18
   1ce72:	90 01       	movw	r18, r0
   1ce74:	0c 01       	movw	r0, r24
   1ce76:	ca 01       	movw	r24, r20
   1ce78:	a0 01       	movw	r20, r0
   1ce7a:	11 24       	eor	r1, r1
   1ce7c:	ff 27       	eor	r31, r31
   1ce7e:	59 1b       	sub	r21, r25
   1ce80:	99 f0       	breq	.+38     	; 0x1cea8 <__addsf3x+0x5c>
   1ce82:	59 3f       	cpi	r21, 0xF9	; 249
   1ce84:	50 f4       	brcc	.+20     	; 0x1ce9a <__addsf3x+0x4e>
   1ce86:	50 3e       	cpi	r21, 0xE0	; 224
   1ce88:	68 f1       	brcs	.+90     	; 0x1cee4 <__addsf3x+0x98>
   1ce8a:	1a 16       	cp	r1, r26
   1ce8c:	f0 40       	sbci	r31, 0x00	; 0
   1ce8e:	a2 2f       	mov	r26, r18
   1ce90:	23 2f       	mov	r18, r19
   1ce92:	34 2f       	mov	r19, r20
   1ce94:	44 27       	eor	r20, r20
   1ce96:	58 5f       	subi	r21, 0xF8	; 248
   1ce98:	f3 cf       	rjmp	.-26     	; 0x1ce80 <__addsf3x+0x34>
   1ce9a:	46 95       	lsr	r20
   1ce9c:	37 95       	ror	r19
   1ce9e:	27 95       	ror	r18
   1cea0:	a7 95       	ror	r26
   1cea2:	f0 40       	sbci	r31, 0x00	; 0
   1cea4:	53 95       	inc	r21
   1cea6:	c9 f7       	brne	.-14     	; 0x1ce9a <__addsf3x+0x4e>
   1cea8:	7e f4       	brtc	.+30     	; 0x1cec8 <__addsf3x+0x7c>
   1ceaa:	1f 16       	cp	r1, r31
   1ceac:	ba 0b       	sbc	r27, r26
   1ceae:	62 0b       	sbc	r22, r18
   1ceb0:	73 0b       	sbc	r23, r19
   1ceb2:	84 0b       	sbc	r24, r20
   1ceb4:	ba f0       	brmi	.+46     	; 0x1cee4 <__addsf3x+0x98>
   1ceb6:	91 50       	subi	r25, 0x01	; 1
   1ceb8:	a1 f0       	breq	.+40     	; 0x1cee2 <__addsf3x+0x96>
   1ceba:	ff 0f       	add	r31, r31
   1cebc:	bb 1f       	adc	r27, r27
   1cebe:	66 1f       	adc	r22, r22
   1cec0:	77 1f       	adc	r23, r23
   1cec2:	88 1f       	adc	r24, r24
   1cec4:	c2 f7       	brpl	.-16     	; 0x1ceb6 <__addsf3x+0x6a>
   1cec6:	0e c0       	rjmp	.+28     	; 0x1cee4 <__addsf3x+0x98>
   1cec8:	ba 0f       	add	r27, r26
   1ceca:	62 1f       	adc	r22, r18
   1cecc:	73 1f       	adc	r23, r19
   1cece:	84 1f       	adc	r24, r20
   1ced0:	48 f4       	brcc	.+18     	; 0x1cee4 <__addsf3x+0x98>
   1ced2:	87 95       	ror	r24
   1ced4:	77 95       	ror	r23
   1ced6:	67 95       	ror	r22
   1ced8:	b7 95       	ror	r27
   1ceda:	f7 95       	ror	r31
   1cedc:	9e 3f       	cpi	r25, 0xFE	; 254
   1cede:	08 f0       	brcs	.+2      	; 0x1cee2 <__addsf3x+0x96>
   1cee0:	b3 cf       	rjmp	.-154    	; 0x1ce48 <__addsf3+0x1e>
   1cee2:	93 95       	inc	r25
   1cee4:	88 0f       	add	r24, r24
   1cee6:	08 f0       	brcs	.+2      	; 0x1ceea <__addsf3x+0x9e>
   1cee8:	99 27       	eor	r25, r25
   1ceea:	ee 0f       	add	r30, r30
   1ceec:	97 95       	ror	r25
   1ceee:	87 95       	ror	r24
   1cef0:	08 95       	ret

0001cef2 <__cmpsf2>:
   1cef2:	d9 d0       	rcall	.+434    	; 0x1d0a6 <__fp_cmp>
   1cef4:	08 f4       	brcc	.+2      	; 0x1cef8 <__cmpsf2+0x6>
   1cef6:	81 e0       	ldi	r24, 0x01	; 1
   1cef8:	08 95       	ret

0001cefa <__divsf3>:
   1cefa:	0c d0       	rcall	.+24     	; 0x1cf14 <__divsf3x>
   1cefc:	0f c1       	rjmp	.+542    	; 0x1d11c <__fp_round>
   1cefe:	07 d1       	rcall	.+526    	; 0x1d10e <__fp_pscB>
   1cf00:	40 f0       	brcs	.+16     	; 0x1cf12 <__divsf3+0x18>
   1cf02:	fe d0       	rcall	.+508    	; 0x1d100 <__fp_pscA>
   1cf04:	30 f0       	brcs	.+12     	; 0x1cf12 <__divsf3+0x18>
   1cf06:	21 f4       	brne	.+8      	; 0x1cf10 <__divsf3+0x16>
   1cf08:	5f 3f       	cpi	r21, 0xFF	; 255
   1cf0a:	19 f0       	breq	.+6      	; 0x1cf12 <__divsf3+0x18>
   1cf0c:	f0 c0       	rjmp	.+480    	; 0x1d0ee <__fp_inf>
   1cf0e:	51 11       	cpse	r21, r1
   1cf10:	39 c1       	rjmp	.+626    	; 0x1d184 <__fp_szero>
   1cf12:	f3 c0       	rjmp	.+486    	; 0x1d0fa <__fp_nan>

0001cf14 <__divsf3x>:
   1cf14:	14 d1       	rcall	.+552    	; 0x1d13e <__fp_split3>
   1cf16:	98 f3       	brcs	.-26     	; 0x1cefe <__divsf3+0x4>

0001cf18 <__divsf3_pse>:
   1cf18:	99 23       	and	r25, r25
   1cf1a:	c9 f3       	breq	.-14     	; 0x1cf0e <__divsf3+0x14>
   1cf1c:	55 23       	and	r21, r21
   1cf1e:	b1 f3       	breq	.-20     	; 0x1cf0c <__divsf3+0x12>
   1cf20:	95 1b       	sub	r25, r21
   1cf22:	55 0b       	sbc	r21, r21
   1cf24:	bb 27       	eor	r27, r27
   1cf26:	aa 27       	eor	r26, r26
   1cf28:	62 17       	cp	r22, r18
   1cf2a:	73 07       	cpc	r23, r19
   1cf2c:	84 07       	cpc	r24, r20
   1cf2e:	38 f0       	brcs	.+14     	; 0x1cf3e <__divsf3_pse+0x26>
   1cf30:	9f 5f       	subi	r25, 0xFF	; 255
   1cf32:	5f 4f       	sbci	r21, 0xFF	; 255
   1cf34:	22 0f       	add	r18, r18
   1cf36:	33 1f       	adc	r19, r19
   1cf38:	44 1f       	adc	r20, r20
   1cf3a:	aa 1f       	adc	r26, r26
   1cf3c:	a9 f3       	breq	.-22     	; 0x1cf28 <__divsf3_pse+0x10>
   1cf3e:	33 d0       	rcall	.+102    	; 0x1cfa6 <__divsf3_pse+0x8e>
   1cf40:	0e 2e       	mov	r0, r30
   1cf42:	3a f0       	brmi	.+14     	; 0x1cf52 <__divsf3_pse+0x3a>
   1cf44:	e0 e8       	ldi	r30, 0x80	; 128
   1cf46:	30 d0       	rcall	.+96     	; 0x1cfa8 <__divsf3_pse+0x90>
   1cf48:	91 50       	subi	r25, 0x01	; 1
   1cf4a:	50 40       	sbci	r21, 0x00	; 0
   1cf4c:	e6 95       	lsr	r30
   1cf4e:	00 1c       	adc	r0, r0
   1cf50:	ca f7       	brpl	.-14     	; 0x1cf44 <__divsf3_pse+0x2c>
   1cf52:	29 d0       	rcall	.+82     	; 0x1cfa6 <__divsf3_pse+0x8e>
   1cf54:	fe 2f       	mov	r31, r30
   1cf56:	27 d0       	rcall	.+78     	; 0x1cfa6 <__divsf3_pse+0x8e>
   1cf58:	66 0f       	add	r22, r22
   1cf5a:	77 1f       	adc	r23, r23
   1cf5c:	88 1f       	adc	r24, r24
   1cf5e:	bb 1f       	adc	r27, r27
   1cf60:	26 17       	cp	r18, r22
   1cf62:	37 07       	cpc	r19, r23
   1cf64:	48 07       	cpc	r20, r24
   1cf66:	ab 07       	cpc	r26, r27
   1cf68:	b0 e8       	ldi	r27, 0x80	; 128
   1cf6a:	09 f0       	breq	.+2      	; 0x1cf6e <__divsf3_pse+0x56>
   1cf6c:	bb 0b       	sbc	r27, r27
   1cf6e:	80 2d       	mov	r24, r0
   1cf70:	bf 01       	movw	r22, r30
   1cf72:	ff 27       	eor	r31, r31
   1cf74:	93 58       	subi	r25, 0x83	; 131
   1cf76:	5f 4f       	sbci	r21, 0xFF	; 255
   1cf78:	2a f0       	brmi	.+10     	; 0x1cf84 <__divsf3_pse+0x6c>
   1cf7a:	9e 3f       	cpi	r25, 0xFE	; 254
   1cf7c:	51 05       	cpc	r21, r1
   1cf7e:	68 f0       	brcs	.+26     	; 0x1cf9a <__divsf3_pse+0x82>
   1cf80:	b6 c0       	rjmp	.+364    	; 0x1d0ee <__fp_inf>
   1cf82:	00 c1       	rjmp	.+512    	; 0x1d184 <__fp_szero>
   1cf84:	5f 3f       	cpi	r21, 0xFF	; 255
   1cf86:	ec f3       	brlt	.-6      	; 0x1cf82 <__divsf3_pse+0x6a>
   1cf88:	98 3e       	cpi	r25, 0xE8	; 232
   1cf8a:	dc f3       	brlt	.-10     	; 0x1cf82 <__divsf3_pse+0x6a>
   1cf8c:	86 95       	lsr	r24
   1cf8e:	77 95       	ror	r23
   1cf90:	67 95       	ror	r22
   1cf92:	b7 95       	ror	r27
   1cf94:	f7 95       	ror	r31
   1cf96:	9f 5f       	subi	r25, 0xFF	; 255
   1cf98:	c9 f7       	brne	.-14     	; 0x1cf8c <__divsf3_pse+0x74>
   1cf9a:	88 0f       	add	r24, r24
   1cf9c:	91 1d       	adc	r25, r1
   1cf9e:	96 95       	lsr	r25
   1cfa0:	87 95       	ror	r24
   1cfa2:	97 f9       	bld	r25, 7
   1cfa4:	08 95       	ret
   1cfa6:	e1 e0       	ldi	r30, 0x01	; 1
   1cfa8:	66 0f       	add	r22, r22
   1cfaa:	77 1f       	adc	r23, r23
   1cfac:	88 1f       	adc	r24, r24
   1cfae:	bb 1f       	adc	r27, r27
   1cfb0:	62 17       	cp	r22, r18
   1cfb2:	73 07       	cpc	r23, r19
   1cfb4:	84 07       	cpc	r24, r20
   1cfb6:	ba 07       	cpc	r27, r26
   1cfb8:	20 f0       	brcs	.+8      	; 0x1cfc2 <__divsf3_pse+0xaa>
   1cfba:	62 1b       	sub	r22, r18
   1cfbc:	73 0b       	sbc	r23, r19
   1cfbe:	84 0b       	sbc	r24, r20
   1cfc0:	ba 0b       	sbc	r27, r26
   1cfc2:	ee 1f       	adc	r30, r30
   1cfc4:	88 f7       	brcc	.-30     	; 0x1cfa8 <__divsf3_pse+0x90>
   1cfc6:	e0 95       	com	r30
   1cfc8:	08 95       	ret

0001cfca <__fixsfsi>:
   1cfca:	04 d0       	rcall	.+8      	; 0x1cfd4 <__fixunssfsi>
   1cfcc:	68 94       	set
   1cfce:	b1 11       	cpse	r27, r1
   1cfd0:	d9 c0       	rjmp	.+434    	; 0x1d184 <__fp_szero>
   1cfd2:	08 95       	ret

0001cfd4 <__fixunssfsi>:
   1cfd4:	bc d0       	rcall	.+376    	; 0x1d14e <__fp_splitA>
   1cfd6:	88 f0       	brcs	.+34     	; 0x1cffa <__fixunssfsi+0x26>
   1cfd8:	9f 57       	subi	r25, 0x7F	; 127
   1cfda:	90 f0       	brcs	.+36     	; 0x1d000 <__fixunssfsi+0x2c>
   1cfdc:	b9 2f       	mov	r27, r25
   1cfde:	99 27       	eor	r25, r25
   1cfe0:	b7 51       	subi	r27, 0x17	; 23
   1cfe2:	a0 f0       	brcs	.+40     	; 0x1d00c <__fixunssfsi+0x38>
   1cfe4:	d1 f0       	breq	.+52     	; 0x1d01a <__fixunssfsi+0x46>
   1cfe6:	66 0f       	add	r22, r22
   1cfe8:	77 1f       	adc	r23, r23
   1cfea:	88 1f       	adc	r24, r24
   1cfec:	99 1f       	adc	r25, r25
   1cfee:	1a f0       	brmi	.+6      	; 0x1cff6 <__fixunssfsi+0x22>
   1cff0:	ba 95       	dec	r27
   1cff2:	c9 f7       	brne	.-14     	; 0x1cfe6 <__fixunssfsi+0x12>
   1cff4:	12 c0       	rjmp	.+36     	; 0x1d01a <__fixunssfsi+0x46>
   1cff6:	b1 30       	cpi	r27, 0x01	; 1
   1cff8:	81 f0       	breq	.+32     	; 0x1d01a <__fixunssfsi+0x46>
   1cffa:	c3 d0       	rcall	.+390    	; 0x1d182 <__fp_zero>
   1cffc:	b1 e0       	ldi	r27, 0x01	; 1
   1cffe:	08 95       	ret
   1d000:	c0 c0       	rjmp	.+384    	; 0x1d182 <__fp_zero>
   1d002:	67 2f       	mov	r22, r23
   1d004:	78 2f       	mov	r23, r24
   1d006:	88 27       	eor	r24, r24
   1d008:	b8 5f       	subi	r27, 0xF8	; 248
   1d00a:	39 f0       	breq	.+14     	; 0x1d01a <__fixunssfsi+0x46>
   1d00c:	b9 3f       	cpi	r27, 0xF9	; 249
   1d00e:	cc f3       	brlt	.-14     	; 0x1d002 <__fixunssfsi+0x2e>
   1d010:	86 95       	lsr	r24
   1d012:	77 95       	ror	r23
   1d014:	67 95       	ror	r22
   1d016:	b3 95       	inc	r27
   1d018:	d9 f7       	brne	.-10     	; 0x1d010 <__fixunssfsi+0x3c>
   1d01a:	3e f4       	brtc	.+14     	; 0x1d02a <__fixunssfsi+0x56>
   1d01c:	90 95       	com	r25
   1d01e:	80 95       	com	r24
   1d020:	70 95       	com	r23
   1d022:	61 95       	neg	r22
   1d024:	7f 4f       	sbci	r23, 0xFF	; 255
   1d026:	8f 4f       	sbci	r24, 0xFF	; 255
   1d028:	9f 4f       	sbci	r25, 0xFF	; 255
   1d02a:	08 95       	ret

0001d02c <__floatunsisf>:
   1d02c:	e8 94       	clt
   1d02e:	09 c0       	rjmp	.+18     	; 0x1d042 <__floatsisf+0x12>

0001d030 <__floatsisf>:
   1d030:	97 fb       	bst	r25, 7
   1d032:	3e f4       	brtc	.+14     	; 0x1d042 <__floatsisf+0x12>
   1d034:	90 95       	com	r25
   1d036:	80 95       	com	r24
   1d038:	70 95       	com	r23
   1d03a:	61 95       	neg	r22
   1d03c:	7f 4f       	sbci	r23, 0xFF	; 255
   1d03e:	8f 4f       	sbci	r24, 0xFF	; 255
   1d040:	9f 4f       	sbci	r25, 0xFF	; 255
   1d042:	99 23       	and	r25, r25
   1d044:	a9 f0       	breq	.+42     	; 0x1d070 <__floatsisf+0x40>
   1d046:	f9 2f       	mov	r31, r25
   1d048:	96 e9       	ldi	r25, 0x96	; 150
   1d04a:	bb 27       	eor	r27, r27
   1d04c:	93 95       	inc	r25
   1d04e:	f6 95       	lsr	r31
   1d050:	87 95       	ror	r24
   1d052:	77 95       	ror	r23
   1d054:	67 95       	ror	r22
   1d056:	b7 95       	ror	r27
   1d058:	f1 11       	cpse	r31, r1
   1d05a:	f8 cf       	rjmp	.-16     	; 0x1d04c <__floatsisf+0x1c>
   1d05c:	fa f4       	brpl	.+62     	; 0x1d09c <__floatsisf+0x6c>
   1d05e:	bb 0f       	add	r27, r27
   1d060:	11 f4       	brne	.+4      	; 0x1d066 <__floatsisf+0x36>
   1d062:	60 ff       	sbrs	r22, 0
   1d064:	1b c0       	rjmp	.+54     	; 0x1d09c <__floatsisf+0x6c>
   1d066:	6f 5f       	subi	r22, 0xFF	; 255
   1d068:	7f 4f       	sbci	r23, 0xFF	; 255
   1d06a:	8f 4f       	sbci	r24, 0xFF	; 255
   1d06c:	9f 4f       	sbci	r25, 0xFF	; 255
   1d06e:	16 c0       	rjmp	.+44     	; 0x1d09c <__floatsisf+0x6c>
   1d070:	88 23       	and	r24, r24
   1d072:	11 f0       	breq	.+4      	; 0x1d078 <__floatsisf+0x48>
   1d074:	96 e9       	ldi	r25, 0x96	; 150
   1d076:	11 c0       	rjmp	.+34     	; 0x1d09a <__floatsisf+0x6a>
   1d078:	77 23       	and	r23, r23
   1d07a:	21 f0       	breq	.+8      	; 0x1d084 <__floatsisf+0x54>
   1d07c:	9e e8       	ldi	r25, 0x8E	; 142
   1d07e:	87 2f       	mov	r24, r23
   1d080:	76 2f       	mov	r23, r22
   1d082:	05 c0       	rjmp	.+10     	; 0x1d08e <__floatsisf+0x5e>
   1d084:	66 23       	and	r22, r22
   1d086:	71 f0       	breq	.+28     	; 0x1d0a4 <__floatsisf+0x74>
   1d088:	96 e8       	ldi	r25, 0x86	; 134
   1d08a:	86 2f       	mov	r24, r22
   1d08c:	70 e0       	ldi	r23, 0x00	; 0
   1d08e:	60 e0       	ldi	r22, 0x00	; 0
   1d090:	2a f0       	brmi	.+10     	; 0x1d09c <__floatsisf+0x6c>
   1d092:	9a 95       	dec	r25
   1d094:	66 0f       	add	r22, r22
   1d096:	77 1f       	adc	r23, r23
   1d098:	88 1f       	adc	r24, r24
   1d09a:	da f7       	brpl	.-10     	; 0x1d092 <__floatsisf+0x62>
   1d09c:	88 0f       	add	r24, r24
   1d09e:	96 95       	lsr	r25
   1d0a0:	87 95       	ror	r24
   1d0a2:	97 f9       	bld	r25, 7
   1d0a4:	08 95       	ret

0001d0a6 <__fp_cmp>:
   1d0a6:	99 0f       	add	r25, r25
   1d0a8:	00 08       	sbc	r0, r0
   1d0aa:	55 0f       	add	r21, r21
   1d0ac:	aa 0b       	sbc	r26, r26
   1d0ae:	e0 e8       	ldi	r30, 0x80	; 128
   1d0b0:	fe ef       	ldi	r31, 0xFE	; 254
   1d0b2:	16 16       	cp	r1, r22
   1d0b4:	17 06       	cpc	r1, r23
   1d0b6:	e8 07       	cpc	r30, r24
   1d0b8:	f9 07       	cpc	r31, r25
   1d0ba:	c0 f0       	brcs	.+48     	; 0x1d0ec <__fp_cmp+0x46>
   1d0bc:	12 16       	cp	r1, r18
   1d0be:	13 06       	cpc	r1, r19
   1d0c0:	e4 07       	cpc	r30, r20
   1d0c2:	f5 07       	cpc	r31, r21
   1d0c4:	98 f0       	brcs	.+38     	; 0x1d0ec <__fp_cmp+0x46>
   1d0c6:	62 1b       	sub	r22, r18
   1d0c8:	73 0b       	sbc	r23, r19
   1d0ca:	84 0b       	sbc	r24, r20
   1d0cc:	95 0b       	sbc	r25, r21
   1d0ce:	39 f4       	brne	.+14     	; 0x1d0de <__fp_cmp+0x38>
   1d0d0:	0a 26       	eor	r0, r26
   1d0d2:	61 f0       	breq	.+24     	; 0x1d0ec <__fp_cmp+0x46>
   1d0d4:	23 2b       	or	r18, r19
   1d0d6:	24 2b       	or	r18, r20
   1d0d8:	25 2b       	or	r18, r21
   1d0da:	21 f4       	brne	.+8      	; 0x1d0e4 <__fp_cmp+0x3e>
   1d0dc:	08 95       	ret
   1d0de:	0a 26       	eor	r0, r26
   1d0e0:	09 f4       	brne	.+2      	; 0x1d0e4 <__fp_cmp+0x3e>
   1d0e2:	a1 40       	sbci	r26, 0x01	; 1
   1d0e4:	a6 95       	lsr	r26
   1d0e6:	8f ef       	ldi	r24, 0xFF	; 255
   1d0e8:	81 1d       	adc	r24, r1
   1d0ea:	81 1d       	adc	r24, r1
   1d0ec:	08 95       	ret

0001d0ee <__fp_inf>:
   1d0ee:	97 f9       	bld	r25, 7
   1d0f0:	9f 67       	ori	r25, 0x7F	; 127
   1d0f2:	80 e8       	ldi	r24, 0x80	; 128
   1d0f4:	70 e0       	ldi	r23, 0x00	; 0
   1d0f6:	60 e0       	ldi	r22, 0x00	; 0
   1d0f8:	08 95       	ret

0001d0fa <__fp_nan>:
   1d0fa:	9f ef       	ldi	r25, 0xFF	; 255
   1d0fc:	80 ec       	ldi	r24, 0xC0	; 192
   1d0fe:	08 95       	ret

0001d100 <__fp_pscA>:
   1d100:	00 24       	eor	r0, r0
   1d102:	0a 94       	dec	r0
   1d104:	16 16       	cp	r1, r22
   1d106:	17 06       	cpc	r1, r23
   1d108:	18 06       	cpc	r1, r24
   1d10a:	09 06       	cpc	r0, r25
   1d10c:	08 95       	ret

0001d10e <__fp_pscB>:
   1d10e:	00 24       	eor	r0, r0
   1d110:	0a 94       	dec	r0
   1d112:	12 16       	cp	r1, r18
   1d114:	13 06       	cpc	r1, r19
   1d116:	14 06       	cpc	r1, r20
   1d118:	05 06       	cpc	r0, r21
   1d11a:	08 95       	ret

0001d11c <__fp_round>:
   1d11c:	09 2e       	mov	r0, r25
   1d11e:	03 94       	inc	r0
   1d120:	00 0c       	add	r0, r0
   1d122:	11 f4       	brne	.+4      	; 0x1d128 <__fp_round+0xc>
   1d124:	88 23       	and	r24, r24
   1d126:	52 f0       	brmi	.+20     	; 0x1d13c <__fp_round+0x20>
   1d128:	bb 0f       	add	r27, r27
   1d12a:	40 f4       	brcc	.+16     	; 0x1d13c <__fp_round+0x20>
   1d12c:	bf 2b       	or	r27, r31
   1d12e:	11 f4       	brne	.+4      	; 0x1d134 <__fp_round+0x18>
   1d130:	60 ff       	sbrs	r22, 0
   1d132:	04 c0       	rjmp	.+8      	; 0x1d13c <__fp_round+0x20>
   1d134:	6f 5f       	subi	r22, 0xFF	; 255
   1d136:	7f 4f       	sbci	r23, 0xFF	; 255
   1d138:	8f 4f       	sbci	r24, 0xFF	; 255
   1d13a:	9f 4f       	sbci	r25, 0xFF	; 255
   1d13c:	08 95       	ret

0001d13e <__fp_split3>:
   1d13e:	57 fd       	sbrc	r21, 7
   1d140:	90 58       	subi	r25, 0x80	; 128
   1d142:	44 0f       	add	r20, r20
   1d144:	55 1f       	adc	r21, r21
   1d146:	59 f0       	breq	.+22     	; 0x1d15e <__fp_splitA+0x10>
   1d148:	5f 3f       	cpi	r21, 0xFF	; 255
   1d14a:	71 f0       	breq	.+28     	; 0x1d168 <__fp_splitA+0x1a>
   1d14c:	47 95       	ror	r20

0001d14e <__fp_splitA>:
   1d14e:	88 0f       	add	r24, r24
   1d150:	97 fb       	bst	r25, 7
   1d152:	99 1f       	adc	r25, r25
   1d154:	61 f0       	breq	.+24     	; 0x1d16e <__fp_splitA+0x20>
   1d156:	9f 3f       	cpi	r25, 0xFF	; 255
   1d158:	79 f0       	breq	.+30     	; 0x1d178 <__fp_splitA+0x2a>
   1d15a:	87 95       	ror	r24
   1d15c:	08 95       	ret
   1d15e:	12 16       	cp	r1, r18
   1d160:	13 06       	cpc	r1, r19
   1d162:	14 06       	cpc	r1, r20
   1d164:	55 1f       	adc	r21, r21
   1d166:	f2 cf       	rjmp	.-28     	; 0x1d14c <__fp_split3+0xe>
   1d168:	46 95       	lsr	r20
   1d16a:	f1 df       	rcall	.-30     	; 0x1d14e <__fp_splitA>
   1d16c:	08 c0       	rjmp	.+16     	; 0x1d17e <__fp_splitA+0x30>
   1d16e:	16 16       	cp	r1, r22
   1d170:	17 06       	cpc	r1, r23
   1d172:	18 06       	cpc	r1, r24
   1d174:	99 1f       	adc	r25, r25
   1d176:	f1 cf       	rjmp	.-30     	; 0x1d15a <__fp_splitA+0xc>
   1d178:	86 95       	lsr	r24
   1d17a:	71 05       	cpc	r23, r1
   1d17c:	61 05       	cpc	r22, r1
   1d17e:	08 94       	sec
   1d180:	08 95       	ret

0001d182 <__fp_zero>:
   1d182:	e8 94       	clt

0001d184 <__fp_szero>:
   1d184:	bb 27       	eor	r27, r27
   1d186:	66 27       	eor	r22, r22
   1d188:	77 27       	eor	r23, r23
   1d18a:	cb 01       	movw	r24, r22
   1d18c:	97 f9       	bld	r25, 7
   1d18e:	08 95       	ret

0001d190 <__gesf2>:
   1d190:	8a df       	rcall	.-236    	; 0x1d0a6 <__fp_cmp>
   1d192:	08 f4       	brcc	.+2      	; 0x1d196 <__gesf2+0x6>
   1d194:	8f ef       	ldi	r24, 0xFF	; 255
   1d196:	08 95       	ret

0001d198 <__mulsf3>:
   1d198:	0b d0       	rcall	.+22     	; 0x1d1b0 <__mulsf3x>
   1d19a:	c0 cf       	rjmp	.-128    	; 0x1d11c <__fp_round>
   1d19c:	b1 df       	rcall	.-158    	; 0x1d100 <__fp_pscA>
   1d19e:	28 f0       	brcs	.+10     	; 0x1d1aa <__mulsf3+0x12>
   1d1a0:	b6 df       	rcall	.-148    	; 0x1d10e <__fp_pscB>
   1d1a2:	18 f0       	brcs	.+6      	; 0x1d1aa <__mulsf3+0x12>
   1d1a4:	95 23       	and	r25, r21
   1d1a6:	09 f0       	breq	.+2      	; 0x1d1aa <__mulsf3+0x12>
   1d1a8:	a2 cf       	rjmp	.-188    	; 0x1d0ee <__fp_inf>
   1d1aa:	a7 cf       	rjmp	.-178    	; 0x1d0fa <__fp_nan>
   1d1ac:	11 24       	eor	r1, r1
   1d1ae:	ea cf       	rjmp	.-44     	; 0x1d184 <__fp_szero>

0001d1b0 <__mulsf3x>:
   1d1b0:	c6 df       	rcall	.-116    	; 0x1d13e <__fp_split3>
   1d1b2:	a0 f3       	brcs	.-24     	; 0x1d19c <__mulsf3+0x4>

0001d1b4 <__mulsf3_pse>:
   1d1b4:	95 9f       	mul	r25, r21
   1d1b6:	d1 f3       	breq	.-12     	; 0x1d1ac <__mulsf3+0x14>
   1d1b8:	95 0f       	add	r25, r21
   1d1ba:	50 e0       	ldi	r21, 0x00	; 0
   1d1bc:	55 1f       	adc	r21, r21
   1d1be:	62 9f       	mul	r22, r18
   1d1c0:	f0 01       	movw	r30, r0
   1d1c2:	72 9f       	mul	r23, r18
   1d1c4:	bb 27       	eor	r27, r27
   1d1c6:	f0 0d       	add	r31, r0
   1d1c8:	b1 1d       	adc	r27, r1
   1d1ca:	63 9f       	mul	r22, r19
   1d1cc:	aa 27       	eor	r26, r26
   1d1ce:	f0 0d       	add	r31, r0
   1d1d0:	b1 1d       	adc	r27, r1
   1d1d2:	aa 1f       	adc	r26, r26
   1d1d4:	64 9f       	mul	r22, r20
   1d1d6:	66 27       	eor	r22, r22
   1d1d8:	b0 0d       	add	r27, r0
   1d1da:	a1 1d       	adc	r26, r1
   1d1dc:	66 1f       	adc	r22, r22
   1d1de:	82 9f       	mul	r24, r18
   1d1e0:	22 27       	eor	r18, r18
   1d1e2:	b0 0d       	add	r27, r0
   1d1e4:	a1 1d       	adc	r26, r1
   1d1e6:	62 1f       	adc	r22, r18
   1d1e8:	73 9f       	mul	r23, r19
   1d1ea:	b0 0d       	add	r27, r0
   1d1ec:	a1 1d       	adc	r26, r1
   1d1ee:	62 1f       	adc	r22, r18
   1d1f0:	83 9f       	mul	r24, r19
   1d1f2:	a0 0d       	add	r26, r0
   1d1f4:	61 1d       	adc	r22, r1
   1d1f6:	22 1f       	adc	r18, r18
   1d1f8:	74 9f       	mul	r23, r20
   1d1fa:	33 27       	eor	r19, r19
   1d1fc:	a0 0d       	add	r26, r0
   1d1fe:	61 1d       	adc	r22, r1
   1d200:	23 1f       	adc	r18, r19
   1d202:	84 9f       	mul	r24, r20
   1d204:	60 0d       	add	r22, r0
   1d206:	21 1d       	adc	r18, r1
   1d208:	82 2f       	mov	r24, r18
   1d20a:	76 2f       	mov	r23, r22
   1d20c:	6a 2f       	mov	r22, r26
   1d20e:	11 24       	eor	r1, r1
   1d210:	9f 57       	subi	r25, 0x7F	; 127
   1d212:	50 40       	sbci	r21, 0x00	; 0
   1d214:	8a f0       	brmi	.+34     	; 0x1d238 <__mulsf3_pse+0x84>
   1d216:	e1 f0       	breq	.+56     	; 0x1d250 <__mulsf3_pse+0x9c>
   1d218:	88 23       	and	r24, r24
   1d21a:	4a f0       	brmi	.+18     	; 0x1d22e <__mulsf3_pse+0x7a>
   1d21c:	ee 0f       	add	r30, r30
   1d21e:	ff 1f       	adc	r31, r31
   1d220:	bb 1f       	adc	r27, r27
   1d222:	66 1f       	adc	r22, r22
   1d224:	77 1f       	adc	r23, r23
   1d226:	88 1f       	adc	r24, r24
   1d228:	91 50       	subi	r25, 0x01	; 1
   1d22a:	50 40       	sbci	r21, 0x00	; 0
   1d22c:	a9 f7       	brne	.-22     	; 0x1d218 <__mulsf3_pse+0x64>
   1d22e:	9e 3f       	cpi	r25, 0xFE	; 254
   1d230:	51 05       	cpc	r21, r1
   1d232:	70 f0       	brcs	.+28     	; 0x1d250 <__mulsf3_pse+0x9c>
   1d234:	5c cf       	rjmp	.-328    	; 0x1d0ee <__fp_inf>
   1d236:	a6 cf       	rjmp	.-180    	; 0x1d184 <__fp_szero>
   1d238:	5f 3f       	cpi	r21, 0xFF	; 255
   1d23a:	ec f3       	brlt	.-6      	; 0x1d236 <__mulsf3_pse+0x82>
   1d23c:	98 3e       	cpi	r25, 0xE8	; 232
   1d23e:	dc f3       	brlt	.-10     	; 0x1d236 <__mulsf3_pse+0x82>
   1d240:	86 95       	lsr	r24
   1d242:	77 95       	ror	r23
   1d244:	67 95       	ror	r22
   1d246:	b7 95       	ror	r27
   1d248:	f7 95       	ror	r31
   1d24a:	e7 95       	ror	r30
   1d24c:	9f 5f       	subi	r25, 0xFF	; 255
   1d24e:	c1 f7       	brne	.-16     	; 0x1d240 <__mulsf3_pse+0x8c>
   1d250:	fe 2b       	or	r31, r30
   1d252:	88 0f       	add	r24, r24
   1d254:	91 1d       	adc	r25, r1
   1d256:	96 95       	lsr	r25
   1d258:	87 95       	ror	r24
   1d25a:	97 f9       	bld	r25, 7
   1d25c:	08 95       	ret

0001d25e <round>:
   1d25e:	77 df       	rcall	.-274    	; 0x1d14e <__fp_splitA>
   1d260:	e0 f0       	brcs	.+56     	; 0x1d29a <round+0x3c>
   1d262:	9e 37       	cpi	r25, 0x7E	; 126
   1d264:	d8 f0       	brcs	.+54     	; 0x1d29c <round+0x3e>
   1d266:	96 39       	cpi	r25, 0x96	; 150
   1d268:	b8 f4       	brcc	.+46     	; 0x1d298 <round+0x3a>
   1d26a:	9e 38       	cpi	r25, 0x8E	; 142
   1d26c:	48 f4       	brcc	.+18     	; 0x1d280 <round+0x22>
   1d26e:	67 2f       	mov	r22, r23
   1d270:	78 2f       	mov	r23, r24
   1d272:	88 27       	eor	r24, r24
   1d274:	98 5f       	subi	r25, 0xF8	; 248
   1d276:	f9 cf       	rjmp	.-14     	; 0x1d26a <round+0xc>
   1d278:	86 95       	lsr	r24
   1d27a:	77 95       	ror	r23
   1d27c:	67 95       	ror	r22
   1d27e:	93 95       	inc	r25
   1d280:	95 39       	cpi	r25, 0x95	; 149
   1d282:	d0 f3       	brcs	.-12     	; 0x1d278 <round+0x1a>
   1d284:	b6 2f       	mov	r27, r22
   1d286:	b1 70       	andi	r27, 0x01	; 1
   1d288:	6b 0f       	add	r22, r27
   1d28a:	71 1d       	adc	r23, r1
   1d28c:	81 1d       	adc	r24, r1
   1d28e:	20 f4       	brcc	.+8      	; 0x1d298 <round+0x3a>
   1d290:	87 95       	ror	r24
   1d292:	77 95       	ror	r23
   1d294:	67 95       	ror	r22
   1d296:	93 95       	inc	r25
   1d298:	02 c0       	rjmp	.+4      	; 0x1d29e <__fp_mintl>
   1d29a:	1c c0       	rjmp	.+56     	; 0x1d2d4 <__fp_mpack>
   1d29c:	73 cf       	rjmp	.-282    	; 0x1d184 <__fp_szero>

0001d29e <__fp_mintl>:
   1d29e:	88 23       	and	r24, r24
   1d2a0:	71 f4       	brne	.+28     	; 0x1d2be <__fp_mintl+0x20>
   1d2a2:	77 23       	and	r23, r23
   1d2a4:	21 f0       	breq	.+8      	; 0x1d2ae <__fp_mintl+0x10>
   1d2a6:	98 50       	subi	r25, 0x08	; 8
   1d2a8:	87 2b       	or	r24, r23
   1d2aa:	76 2f       	mov	r23, r22
   1d2ac:	07 c0       	rjmp	.+14     	; 0x1d2bc <__fp_mintl+0x1e>
   1d2ae:	66 23       	and	r22, r22
   1d2b0:	11 f4       	brne	.+4      	; 0x1d2b6 <__fp_mintl+0x18>
   1d2b2:	99 27       	eor	r25, r25
   1d2b4:	0d c0       	rjmp	.+26     	; 0x1d2d0 <__fp_mintl+0x32>
   1d2b6:	90 51       	subi	r25, 0x10	; 16
   1d2b8:	86 2b       	or	r24, r22
   1d2ba:	70 e0       	ldi	r23, 0x00	; 0
   1d2bc:	60 e0       	ldi	r22, 0x00	; 0
   1d2be:	2a f0       	brmi	.+10     	; 0x1d2ca <__fp_mintl+0x2c>
   1d2c0:	9a 95       	dec	r25
   1d2c2:	66 0f       	add	r22, r22
   1d2c4:	77 1f       	adc	r23, r23
   1d2c6:	88 1f       	adc	r24, r24
   1d2c8:	da f7       	brpl	.-10     	; 0x1d2c0 <__fp_mintl+0x22>
   1d2ca:	88 0f       	add	r24, r24
   1d2cc:	96 95       	lsr	r25
   1d2ce:	87 95       	ror	r24
   1d2d0:	97 f9       	bld	r25, 7
   1d2d2:	08 95       	ret

0001d2d4 <__fp_mpack>:
   1d2d4:	9f 3f       	cpi	r25, 0xFF	; 255
   1d2d6:	31 f0       	breq	.+12     	; 0x1d2e4 <__fp_mpack_finite+0xc>

0001d2d8 <__fp_mpack_finite>:
   1d2d8:	91 50       	subi	r25, 0x01	; 1
   1d2da:	20 f4       	brcc	.+8      	; 0x1d2e4 <__fp_mpack_finite+0xc>
   1d2dc:	87 95       	ror	r24
   1d2de:	77 95       	ror	r23
   1d2e0:	67 95       	ror	r22
   1d2e2:	b7 95       	ror	r27
   1d2e4:	88 0f       	add	r24, r24
   1d2e6:	91 1d       	adc	r25, r1
   1d2e8:	96 95       	lsr	r25
   1d2ea:	87 95       	ror	r24
   1d2ec:	97 f9       	bld	r25, 7
   1d2ee:	08 95       	ret

0001d2f0 <calloc>:
   1d2f0:	0f 93       	push	r16
   1d2f2:	1f 93       	push	r17
   1d2f4:	cf 93       	push	r28
   1d2f6:	df 93       	push	r29
   1d2f8:	86 9f       	mul	r24, r22
   1d2fa:	80 01       	movw	r16, r0
   1d2fc:	87 9f       	mul	r24, r23
   1d2fe:	10 0d       	add	r17, r0
   1d300:	96 9f       	mul	r25, r22
   1d302:	10 0d       	add	r17, r0
   1d304:	11 24       	eor	r1, r1
   1d306:	c8 01       	movw	r24, r16
   1d308:	0d d0       	rcall	.+26     	; 0x1d324 <malloc>
   1d30a:	ec 01       	movw	r28, r24
   1d30c:	00 97       	sbiw	r24, 0x00	; 0
   1d30e:	21 f0       	breq	.+8      	; 0x1d318 <calloc+0x28>
   1d310:	a8 01       	movw	r20, r16
   1d312:	60 e0       	ldi	r22, 0x00	; 0
   1d314:	70 e0       	ldi	r23, 0x00	; 0
   1d316:	27 d1       	rcall	.+590    	; 0x1d566 <memset>
   1d318:	ce 01       	movw	r24, r28
   1d31a:	df 91       	pop	r29
   1d31c:	cf 91       	pop	r28
   1d31e:	1f 91       	pop	r17
   1d320:	0f 91       	pop	r16
   1d322:	08 95       	ret

0001d324 <malloc>:
   1d324:	0f 93       	push	r16
   1d326:	1f 93       	push	r17
   1d328:	cf 93       	push	r28
   1d32a:	df 93       	push	r29
   1d32c:	82 30       	cpi	r24, 0x02	; 2
   1d32e:	91 05       	cpc	r25, r1
   1d330:	10 f4       	brcc	.+4      	; 0x1d336 <malloc+0x12>
   1d332:	82 e0       	ldi	r24, 0x02	; 2
   1d334:	90 e0       	ldi	r25, 0x00	; 0
   1d336:	e0 91 2e 20 	lds	r30, 0x202E	; 0x80202e <__flp>
   1d33a:	f0 91 2f 20 	lds	r31, 0x202F	; 0x80202f <__flp+0x1>
   1d33e:	20 e0       	ldi	r18, 0x00	; 0
   1d340:	30 e0       	ldi	r19, 0x00	; 0
   1d342:	a0 e0       	ldi	r26, 0x00	; 0
   1d344:	b0 e0       	ldi	r27, 0x00	; 0
   1d346:	30 97       	sbiw	r30, 0x00	; 0
   1d348:	19 f1       	breq	.+70     	; 0x1d390 <malloc+0x6c>
   1d34a:	40 81       	ld	r20, Z
   1d34c:	51 81       	ldd	r21, Z+1	; 0x01
   1d34e:	02 81       	ldd	r16, Z+2	; 0x02
   1d350:	13 81       	ldd	r17, Z+3	; 0x03
   1d352:	48 17       	cp	r20, r24
   1d354:	59 07       	cpc	r21, r25
   1d356:	c8 f0       	brcs	.+50     	; 0x1d38a <malloc+0x66>
   1d358:	84 17       	cp	r24, r20
   1d35a:	95 07       	cpc	r25, r21
   1d35c:	69 f4       	brne	.+26     	; 0x1d378 <malloc+0x54>
   1d35e:	10 97       	sbiw	r26, 0x00	; 0
   1d360:	31 f0       	breq	.+12     	; 0x1d36e <malloc+0x4a>
   1d362:	12 96       	adiw	r26, 0x02	; 2
   1d364:	0c 93       	st	X, r16
   1d366:	12 97       	sbiw	r26, 0x02	; 2
   1d368:	13 96       	adiw	r26, 0x03	; 3
   1d36a:	1c 93       	st	X, r17
   1d36c:	27 c0       	rjmp	.+78     	; 0x1d3bc <malloc+0x98>
   1d36e:	00 93 2e 20 	sts	0x202E, r16	; 0x80202e <__flp>
   1d372:	10 93 2f 20 	sts	0x202F, r17	; 0x80202f <__flp+0x1>
   1d376:	22 c0       	rjmp	.+68     	; 0x1d3bc <malloc+0x98>
   1d378:	21 15       	cp	r18, r1
   1d37a:	31 05       	cpc	r19, r1
   1d37c:	19 f0       	breq	.+6      	; 0x1d384 <malloc+0x60>
   1d37e:	42 17       	cp	r20, r18
   1d380:	53 07       	cpc	r21, r19
   1d382:	18 f4       	brcc	.+6      	; 0x1d38a <malloc+0x66>
   1d384:	9a 01       	movw	r18, r20
   1d386:	bd 01       	movw	r22, r26
   1d388:	ef 01       	movw	r28, r30
   1d38a:	df 01       	movw	r26, r30
   1d38c:	f8 01       	movw	r30, r16
   1d38e:	db cf       	rjmp	.-74     	; 0x1d346 <malloc+0x22>
   1d390:	21 15       	cp	r18, r1
   1d392:	31 05       	cpc	r19, r1
   1d394:	f9 f0       	breq	.+62     	; 0x1d3d4 <malloc+0xb0>
   1d396:	28 1b       	sub	r18, r24
   1d398:	39 0b       	sbc	r19, r25
   1d39a:	24 30       	cpi	r18, 0x04	; 4
   1d39c:	31 05       	cpc	r19, r1
   1d39e:	80 f4       	brcc	.+32     	; 0x1d3c0 <malloc+0x9c>
   1d3a0:	8a 81       	ldd	r24, Y+2	; 0x02
   1d3a2:	9b 81       	ldd	r25, Y+3	; 0x03
   1d3a4:	61 15       	cp	r22, r1
   1d3a6:	71 05       	cpc	r23, r1
   1d3a8:	21 f0       	breq	.+8      	; 0x1d3b2 <malloc+0x8e>
   1d3aa:	fb 01       	movw	r30, r22
   1d3ac:	93 83       	std	Z+3, r25	; 0x03
   1d3ae:	82 83       	std	Z+2, r24	; 0x02
   1d3b0:	04 c0       	rjmp	.+8      	; 0x1d3ba <malloc+0x96>
   1d3b2:	90 93 2f 20 	sts	0x202F, r25	; 0x80202f <__flp+0x1>
   1d3b6:	80 93 2e 20 	sts	0x202E, r24	; 0x80202e <__flp>
   1d3ba:	fe 01       	movw	r30, r28
   1d3bc:	32 96       	adiw	r30, 0x02	; 2
   1d3be:	44 c0       	rjmp	.+136    	; 0x1d448 <malloc+0x124>
   1d3c0:	fe 01       	movw	r30, r28
   1d3c2:	e2 0f       	add	r30, r18
   1d3c4:	f3 1f       	adc	r31, r19
   1d3c6:	81 93       	st	Z+, r24
   1d3c8:	91 93       	st	Z+, r25
   1d3ca:	22 50       	subi	r18, 0x02	; 2
   1d3cc:	31 09       	sbc	r19, r1
   1d3ce:	39 83       	std	Y+1, r19	; 0x01
   1d3d0:	28 83       	st	Y, r18
   1d3d2:	3a c0       	rjmp	.+116    	; 0x1d448 <malloc+0x124>
   1d3d4:	20 91 2c 20 	lds	r18, 0x202C	; 0x80202c <__brkval>
   1d3d8:	30 91 2d 20 	lds	r19, 0x202D	; 0x80202d <__brkval+0x1>
   1d3dc:	23 2b       	or	r18, r19
   1d3de:	41 f4       	brne	.+16     	; 0x1d3f0 <malloc+0xcc>
   1d3e0:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
   1d3e4:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
   1d3e8:	30 93 2d 20 	sts	0x202D, r19	; 0x80202d <__brkval+0x1>
   1d3ec:	20 93 2c 20 	sts	0x202C, r18	; 0x80202c <__brkval>
   1d3f0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
   1d3f4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
   1d3f8:	21 15       	cp	r18, r1
   1d3fa:	31 05       	cpc	r19, r1
   1d3fc:	41 f4       	brne	.+16     	; 0x1d40e <malloc+0xea>
   1d3fe:	2d b7       	in	r18, 0x3d	; 61
   1d400:	3e b7       	in	r19, 0x3e	; 62
   1d402:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
   1d406:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
   1d40a:	24 1b       	sub	r18, r20
   1d40c:	35 0b       	sbc	r19, r21
   1d40e:	e0 91 2c 20 	lds	r30, 0x202C	; 0x80202c <__brkval>
   1d412:	f0 91 2d 20 	lds	r31, 0x202D	; 0x80202d <__brkval+0x1>
   1d416:	e2 17       	cp	r30, r18
   1d418:	f3 07       	cpc	r31, r19
   1d41a:	a0 f4       	brcc	.+40     	; 0x1d444 <malloc+0x120>
   1d41c:	2e 1b       	sub	r18, r30
   1d41e:	3f 0b       	sbc	r19, r31
   1d420:	28 17       	cp	r18, r24
   1d422:	39 07       	cpc	r19, r25
   1d424:	78 f0       	brcs	.+30     	; 0x1d444 <malloc+0x120>
   1d426:	ac 01       	movw	r20, r24
   1d428:	4e 5f       	subi	r20, 0xFE	; 254
   1d42a:	5f 4f       	sbci	r21, 0xFF	; 255
   1d42c:	24 17       	cp	r18, r20
   1d42e:	35 07       	cpc	r19, r21
   1d430:	48 f0       	brcs	.+18     	; 0x1d444 <malloc+0x120>
   1d432:	4e 0f       	add	r20, r30
   1d434:	5f 1f       	adc	r21, r31
   1d436:	50 93 2d 20 	sts	0x202D, r21	; 0x80202d <__brkval+0x1>
   1d43a:	40 93 2c 20 	sts	0x202C, r20	; 0x80202c <__brkval>
   1d43e:	81 93       	st	Z+, r24
   1d440:	91 93       	st	Z+, r25
   1d442:	02 c0       	rjmp	.+4      	; 0x1d448 <malloc+0x124>
   1d444:	e0 e0       	ldi	r30, 0x00	; 0
   1d446:	f0 e0       	ldi	r31, 0x00	; 0
   1d448:	cf 01       	movw	r24, r30
   1d44a:	df 91       	pop	r29
   1d44c:	cf 91       	pop	r28
   1d44e:	1f 91       	pop	r17
   1d450:	0f 91       	pop	r16
   1d452:	08 95       	ret

0001d454 <free>:
   1d454:	cf 93       	push	r28
   1d456:	df 93       	push	r29
   1d458:	00 97       	sbiw	r24, 0x00	; 0
   1d45a:	09 f4       	brne	.+2      	; 0x1d45e <free+0xa>
   1d45c:	81 c0       	rjmp	.+258    	; 0x1d560 <free+0x10c>
   1d45e:	fc 01       	movw	r30, r24
   1d460:	32 97       	sbiw	r30, 0x02	; 2
   1d462:	13 82       	std	Z+3, r1	; 0x03
   1d464:	12 82       	std	Z+2, r1	; 0x02
   1d466:	a0 91 2e 20 	lds	r26, 0x202E	; 0x80202e <__flp>
   1d46a:	b0 91 2f 20 	lds	r27, 0x202F	; 0x80202f <__flp+0x1>
   1d46e:	10 97       	sbiw	r26, 0x00	; 0
   1d470:	81 f4       	brne	.+32     	; 0x1d492 <free+0x3e>
   1d472:	20 81       	ld	r18, Z
   1d474:	31 81       	ldd	r19, Z+1	; 0x01
   1d476:	82 0f       	add	r24, r18
   1d478:	93 1f       	adc	r25, r19
   1d47a:	20 91 2c 20 	lds	r18, 0x202C	; 0x80202c <__brkval>
   1d47e:	30 91 2d 20 	lds	r19, 0x202D	; 0x80202d <__brkval+0x1>
   1d482:	28 17       	cp	r18, r24
   1d484:	39 07       	cpc	r19, r25
   1d486:	51 f5       	brne	.+84     	; 0x1d4dc <free+0x88>
   1d488:	f0 93 2d 20 	sts	0x202D, r31	; 0x80202d <__brkval+0x1>
   1d48c:	e0 93 2c 20 	sts	0x202C, r30	; 0x80202c <__brkval>
   1d490:	67 c0       	rjmp	.+206    	; 0x1d560 <free+0x10c>
   1d492:	ed 01       	movw	r28, r26
   1d494:	20 e0       	ldi	r18, 0x00	; 0
   1d496:	30 e0       	ldi	r19, 0x00	; 0
   1d498:	ce 17       	cp	r28, r30
   1d49a:	df 07       	cpc	r29, r31
   1d49c:	40 f4       	brcc	.+16     	; 0x1d4ae <free+0x5a>
   1d49e:	4a 81       	ldd	r20, Y+2	; 0x02
   1d4a0:	5b 81       	ldd	r21, Y+3	; 0x03
   1d4a2:	9e 01       	movw	r18, r28
   1d4a4:	41 15       	cp	r20, r1
   1d4a6:	51 05       	cpc	r21, r1
   1d4a8:	f1 f0       	breq	.+60     	; 0x1d4e6 <free+0x92>
   1d4aa:	ea 01       	movw	r28, r20
   1d4ac:	f5 cf       	rjmp	.-22     	; 0x1d498 <free+0x44>
   1d4ae:	d3 83       	std	Z+3, r29	; 0x03
   1d4b0:	c2 83       	std	Z+2, r28	; 0x02
   1d4b2:	40 81       	ld	r20, Z
   1d4b4:	51 81       	ldd	r21, Z+1	; 0x01
   1d4b6:	84 0f       	add	r24, r20
   1d4b8:	95 1f       	adc	r25, r21
   1d4ba:	c8 17       	cp	r28, r24
   1d4bc:	d9 07       	cpc	r29, r25
   1d4be:	59 f4       	brne	.+22     	; 0x1d4d6 <free+0x82>
   1d4c0:	88 81       	ld	r24, Y
   1d4c2:	99 81       	ldd	r25, Y+1	; 0x01
   1d4c4:	84 0f       	add	r24, r20
   1d4c6:	95 1f       	adc	r25, r21
   1d4c8:	02 96       	adiw	r24, 0x02	; 2
   1d4ca:	91 83       	std	Z+1, r25	; 0x01
   1d4cc:	80 83       	st	Z, r24
   1d4ce:	8a 81       	ldd	r24, Y+2	; 0x02
   1d4d0:	9b 81       	ldd	r25, Y+3	; 0x03
   1d4d2:	93 83       	std	Z+3, r25	; 0x03
   1d4d4:	82 83       	std	Z+2, r24	; 0x02
   1d4d6:	21 15       	cp	r18, r1
   1d4d8:	31 05       	cpc	r19, r1
   1d4da:	29 f4       	brne	.+10     	; 0x1d4e6 <free+0x92>
   1d4dc:	f0 93 2f 20 	sts	0x202F, r31	; 0x80202f <__flp+0x1>
   1d4e0:	e0 93 2e 20 	sts	0x202E, r30	; 0x80202e <__flp>
   1d4e4:	3d c0       	rjmp	.+122    	; 0x1d560 <free+0x10c>
   1d4e6:	e9 01       	movw	r28, r18
   1d4e8:	fb 83       	std	Y+3, r31	; 0x03
   1d4ea:	ea 83       	std	Y+2, r30	; 0x02
   1d4ec:	49 91       	ld	r20, Y+
   1d4ee:	59 91       	ld	r21, Y+
   1d4f0:	c4 0f       	add	r28, r20
   1d4f2:	d5 1f       	adc	r29, r21
   1d4f4:	ec 17       	cp	r30, r28
   1d4f6:	fd 07       	cpc	r31, r29
   1d4f8:	61 f4       	brne	.+24     	; 0x1d512 <free+0xbe>
   1d4fa:	80 81       	ld	r24, Z
   1d4fc:	91 81       	ldd	r25, Z+1	; 0x01
   1d4fe:	84 0f       	add	r24, r20
   1d500:	95 1f       	adc	r25, r21
   1d502:	02 96       	adiw	r24, 0x02	; 2
   1d504:	e9 01       	movw	r28, r18
   1d506:	99 83       	std	Y+1, r25	; 0x01
   1d508:	88 83       	st	Y, r24
   1d50a:	82 81       	ldd	r24, Z+2	; 0x02
   1d50c:	93 81       	ldd	r25, Z+3	; 0x03
   1d50e:	9b 83       	std	Y+3, r25	; 0x03
   1d510:	8a 83       	std	Y+2, r24	; 0x02
   1d512:	e0 e0       	ldi	r30, 0x00	; 0
   1d514:	f0 e0       	ldi	r31, 0x00	; 0
   1d516:	12 96       	adiw	r26, 0x02	; 2
   1d518:	8d 91       	ld	r24, X+
   1d51a:	9c 91       	ld	r25, X
   1d51c:	13 97       	sbiw	r26, 0x03	; 3
   1d51e:	00 97       	sbiw	r24, 0x00	; 0
   1d520:	19 f0       	breq	.+6      	; 0x1d528 <free+0xd4>
   1d522:	fd 01       	movw	r30, r26
   1d524:	dc 01       	movw	r26, r24
   1d526:	f7 cf       	rjmp	.-18     	; 0x1d516 <free+0xc2>
   1d528:	8d 91       	ld	r24, X+
   1d52a:	9c 91       	ld	r25, X
   1d52c:	11 97       	sbiw	r26, 0x01	; 1
   1d52e:	9d 01       	movw	r18, r26
   1d530:	2e 5f       	subi	r18, 0xFE	; 254
   1d532:	3f 4f       	sbci	r19, 0xFF	; 255
   1d534:	82 0f       	add	r24, r18
   1d536:	93 1f       	adc	r25, r19
   1d538:	20 91 2c 20 	lds	r18, 0x202C	; 0x80202c <__brkval>
   1d53c:	30 91 2d 20 	lds	r19, 0x202D	; 0x80202d <__brkval+0x1>
   1d540:	28 17       	cp	r18, r24
   1d542:	39 07       	cpc	r19, r25
   1d544:	69 f4       	brne	.+26     	; 0x1d560 <free+0x10c>
   1d546:	30 97       	sbiw	r30, 0x00	; 0
   1d548:	29 f4       	brne	.+10     	; 0x1d554 <free+0x100>
   1d54a:	10 92 2f 20 	sts	0x202F, r1	; 0x80202f <__flp+0x1>
   1d54e:	10 92 2e 20 	sts	0x202E, r1	; 0x80202e <__flp>
   1d552:	02 c0       	rjmp	.+4      	; 0x1d558 <free+0x104>
   1d554:	13 82       	std	Z+3, r1	; 0x03
   1d556:	12 82       	std	Z+2, r1	; 0x02
   1d558:	b0 93 2d 20 	sts	0x202D, r27	; 0x80202d <__brkval+0x1>
   1d55c:	a0 93 2c 20 	sts	0x202C, r26	; 0x80202c <__brkval>
   1d560:	df 91       	pop	r29
   1d562:	cf 91       	pop	r28
   1d564:	08 95       	ret

0001d566 <memset>:
   1d566:	dc 01       	movw	r26, r24
   1d568:	01 c0       	rjmp	.+2      	; 0x1d56c <memset+0x6>
   1d56a:	6d 93       	st	X+, r22
   1d56c:	41 50       	subi	r20, 0x01	; 1
   1d56e:	50 40       	sbci	r21, 0x00	; 0
   1d570:	e0 f7       	brcc	.-8      	; 0x1d56a <memset+0x4>
   1d572:	08 95       	ret

0001d574 <_exit>:
   1d574:	f8 94       	cli

0001d576 <__stop_program>:
   1d576:	ff cf       	rjmp	.-2      	; 0x1d576 <__stop_program>
