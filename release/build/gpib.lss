
gpib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000160e  00800100  0001d214  0001d2a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0001d214  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000a38  0080170e  0080170e  0001e8b6  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0001e8b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001e8c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000017b0  00000000  00000000  0001e908  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00028deb  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000062a0  00000000  00000000  00048ea3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0001218e  00000000  00000000  0004f143  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000051d4  00000000  00000000  000612d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004813  00000000  00000000  000664a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00023be5  00000000  00000000  0006acbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001790  00000000  00000000  0008e8a0  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00800100 l    d  .data	00000000 .data
00000000 l    d  .text	00000000 .text
0080170e l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .note.gnu.avr.deviceinfo	00000000 .note.gnu.avr.deviceinfo
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 malloc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000002d8 l     O .text	0000001e __c.3740
000002f6 l     O .text	0000001d __c.3735
00000000 l    df *ABS*	00000000 LCD.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0080010d l     O .data	00000001 lcd_address
0080010f l     O .data	00000001 _displayControl
0080010e l     O .data	00000001 _displayMode
00000000 l    df *ABS*	00000000 lcd_printf.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000063e8 l     F .text	00000016 _putc_win
00000000 l    df *ABS*	00000000 time.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00006ebc l     F .text	0000002a IS_Leap
008002a8 l     O .data	00000018 __days
00801762 l     O .bss	00000016 t.3794
00801778 l     O .bss	00000002 p.3795
00801744 l     O .bss	00000008 ts.3873
0080174c l     O .bss	00000016 t.3806
008002c0 l     O .data	0000001a __days_sum
000006e0 l     O .text	00000012 __c.3913
000006cf l     O .text	00000011 __c.3915
000006be l     O .text	00000011 __c.3917
000006ac l     O .text	00000012 __c.3919
0000069b l     O .text	00000011 __c.3921
00000684 l     O .text	00000017 __c.3923
000006f2 l     O .text	00000021 __c.3892
00000713 l     O .text	0000001d __c.3767
0080179a l     O .bss	00000020 buf.3772
0080177a l     O .bss	00000020 buf.3784
00000672 l     O .text	00000012 __c.3969
0000065d l     O .text	00000015 __c.3971
00000646 l     O .text	00000017 __c.3973
0000062c l     O .text	0000001a __c.3975
00000608 l     O .text	00000024 __c.3977
000005f6 l     O .text	00000012 __c.3984
000005e5 l     O .text	00000011 __c.3986
000005d4 l     O .text	00000011 __c.3988
000005c2 l     O .text	00000012 __c.3990
000005b1 l     O .text	00000011 __c.3992
00000000 l    df *ABS*	00000000 mmc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000d658 l     F .text	00000004 xchg_spi
0000d65c l     F .text	0000000c deselect
0000d668 l     F .text	0000004e rcvr_datablock
0000d6da l     F .text	00000044 select
00000730 l     O .text	00000010 __c.3735
0000d71e l     F .text	00000086 send_cmd
0000d7a4 l     F .text	00000054 xmit_datablock
008017bf l     O .bss	00000001 CardType
008017c1 l     O .bss	00000001 Timer1
008017c0 l     O .bss	00000001 Timer2
00000000 l    df *ABS*	00000000 posix.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00800ac4 l     O .data	00000014 CSWTCH.97
00000b58 l     O .text	00000018 __c.3712
00000b40 l     O .text	00000018 __c.3719
0000ee0a l     F .text	0000001a _fprintf_putc
008018cb l     O .bss	0000002e _dp
008017cc l     O .bss	000000ff _de
00000b2c l     O .text	00000008 __c.4035
00000b28 l     O .text	00000004 __c.4037
00000b34 l     O .text	0000000c __c.3790
00000000 l    df *ABS*	00000000 posix_tests.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000d82 l     O .text	0000000c __c.3736
00000cc2 l     O .text	000000c0 __c.3738
00000c95 l     O .text	0000000c __c.3789
00000c85 l     O .text	00000010 __c.3791
00000c78 l     O .text	0000000d __c.3793
00000c68 l     O .text	00000010 __c.3795
00000c5b l     O .text	0000000d __c.3797
00000c3f l     O .text	0000000f __c.3802
00000c4e l     O .text	0000000d __c.3799
00000c2c l     O .text	00000013 __c.3806
0080018d l     O .data	00000002 _pagesize
00000c25 l     O .text	00000007 __c.3816
00000c23 l     O .text	00000002 __c.3818
00000cae l     O .text	00000010 __c.3771
00000cac l     O .text	00000002 __c.3776
00000ca1 l     O .text	0000000b __c.3778
00000c11 l     O .text	00000012 __c.3830
00000c0d l     O .text	00000004 __c.3832
00000bf3 l     O .text	0000001a __c.3837
00000bd2 l     O .text	00000021 __c.3850
00000bc4 l     O .text	0000000e __c.3852
00000bae l     O .text	00000016 __c.3854
00000b7b l     O .text	00000023 __c.3862
00000b9e l     O .text	00000010 __c.3859
00000b70 l     O .text	0000000b __c.3866
00000cbe l     O .text	00000004 __c.3761
00000000 l    df *ABS*	00000000 gpib.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00001059 l     O .text	00000011 __c.4277
00001046 l     O .text	00000013 __c.4282
00001020 l     O .text	00000026 __c.4287
00001005 l     O .text	0000001b __c.4289
00000fde l     O .text	00000027 __c.4294
00000fc3 l     O .text	0000001b __c.4296
00000fb7 l     O .text	0000000c __c.4310
00000f89 l     O .text	0000002e __c.4322
00000ef7 l     O .text	0000001a __c.4355
00000f11 l     O .text	0000001b __c.4351
00000f2c l     O .text	0000001b __c.4348
00000f47 l     O .text	00000028 __c.4343
00000f6f l     O .text	0000001a __c.4339
00000ee4 l     O .text	00000013 __c.4359
00000edb l     O .text	00000009 __c.4401
00000ed5 l     O .text	00000006 __c.4403
00000eca l     O .text	0000000b __c.4407
00000ebf l     O .text	0000000b __c.4409
00000eb4 l     O .text	0000000b __c.4411
00000e9b l     O .text	00000019 __c.4427
00000e6e l     O .text	0000002d __c.4430
00000e47 l     O .text	00000027 __c.4434
00000e2d l     O .text	0000001a __c.4444
00000e05 l     O .text	00000028 __c.4449
00000000 l    df *ABS*	00000000 gpib_task.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000012fd l     O .text	00000012 __c.4261
000012ec l     O .text	00000011 __c.4263
000012d3 l     O .text	00000019 __c.4265
000012b9 l     O .text	0000001a __c.4311
0000128e l     O .text	0000002b __c.4313
00001277 l     O .text	00000017 __c.4315
0000126b l     O .text	0000000c __c.4317
00001265 l     O .text	00000006 __c.4321
00001253 l     O .text	00000012 __c.4323
0000124c l     O .text	00000007 __c.4328
00001241 l     O .text	0000000b __c.4330
0000123a l     O .text	00000007 __c.4332
0000122d l     O .text	0000000d __c.4334
0000121c l     O .text	00000011 __c.4336
000011fb l     O .text	00000021 __c.4363
000011e1 l     O .text	0000001a __c.4365
000011ce l     O .text	00000013 __c.4370
000011bb l     O .text	00000013 __c.4372
000011b4 l     O .text	00000007 __c.4374
000011ad l     O .text	00000007 __c.4376
000011a6 l     O .text	00000007 __c.4378
0000119a l     O .text	0000000c __c.4380
0000118d l     O .text	0000000d __c.4382
00001186 l     O .text	00000007 __c.4384
0000116a l     O .text	0000001c __c.4386
00001117 l     O .text	00000007 __c.4406
00001106 l     O .text	00000011 __c.4408
000010f4 l     O .text	00000012 __c.4410
000010e0 l     O .text	00000014 __c.4412
000010d0 l     O .text	00000010 __c.4414
000010c4 l     O .text	0000000c __c.4416
000010b3 l     O .text	00000011 __c.4421
000010a1 l     O .text	00000012 __c.4423
0000107b l     O .text	00000026 __c.4425
0000106a l     O .text	00000011 __c.4430
00001163 l     O .text	00000007 __c.4391
00001161 l     O .text	00000002 __c.4393
0000114f l     O .text	00000012 __c.4395
0000113e l     O .text	00000011 __c.4397
0000112a l     O .text	00000014 __c.4399
0000111e l     O .text	0000000c __c.4401
00000000 l    df *ABS*	00000000 ss80.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00801935 l     O .bss	00000005 B.4266
00801922 l     O .bss	00000013 B.4270
00801915 l     O .bss	0000000d B.4274
00002574 l     O .text	00000005 __c.4377
00002569 l     O .text	0000000b __c.4379
00002555 l     O .text	00000014 __c.4389
0000253a l     O .text	0000001b __c.4391
00002529 l     O .text	00000011 __c.4399
00002506 l     O .text	00000023 __c.4401
000024e9 l     O .text	0000001d __c.4403
000024ca l     O .text	0000001f __c.4405
000024b2 l     O .text	00000018 __c.4410
00002498 l     O .text	0000001a __c.4415
00002472 l     O .text	00000026 __c.4424
00002459 l     O .text	00000019 __c.4426
0000235d l     O .text	00000025 __c.4448
00002382 l     O .text	0000001a __c.4446
0000239c l     O .text	00000016 __c.4444
000023b2 l     O .text	0000000e __c.4442
000023c0 l     O .text	0000001c __c.4440
000023dc l     O .text	0000001d __c.4438
00002443 l     O .text	00000016 __c.4428
0000242a l     O .text	00000019 __c.4431
00002412 l     O .text	00000018 __c.4433
000023f9 l     O .text	00000019 __c.4436
0000233c l     O .text	00000021 __c.4450
00002326 l     O .text	00000016 __c.4452
00002309 l     O .text	0000001d __c.4454
000022ed l     O .text	0000001c __c.4456
000022dc l     O .text	00000011 __c.4458
000022be l     O .text	0000001e __c.4460
0000229f l     O .text	0000001f __c.4462
00002284 l     O .text	0000001b __c.4464
0000226b l     O .text	00000019 __c.4466
00002254 l     O .text	00000017 __c.4468
00002233 l     O .text	00000021 __c.4470
00002213 l     O .text	00000020 __c.4472
000021db l     O .text	00000038 __c.4475
00002098 l     O .text	00000020 __c.4508
00002084 l     O .text	00000014 __c.4510
00002619 l     O .text	00000029 __c.4338
000025cc l     O .text	00000026 __c.4346
000025f2 l     O .text	00000014 __c.4344
00002606 l     O .text	00000013 __c.4340
000025a4 l     O .text	00000028 __c.4350
00002579 l     O .text	0000002b __c.4352
0000206a l     O .text	0000001a __c.4517
00002057 l     O .text	00000013 __c.4519
00002722 l     O .text	00000013 __c.4280
0000204b l     O .text	0000000c __c.4533
00002038 l     O .text	00000013 __c.4540
00002029 l     O .text	0000000f __c.4542
000021c8 l     O .text	00000013 __c.4484
000021af l     O .text	00000019 __c.4486
0000218a l     O .text	00000025 __c.4489
0000216d l     O .text	0000001d __c.4492
0000214f l     O .text	0000001e __c.4494
00002128 l     O .text	00000027 __c.4496
00002114 l     O .text	00000014 __c.4498
000020f4 l     O .text	00000020 __c.4500
000020b8 l     O .text	0000003c __c.4503
00002006 l     O .text	00000023 __c.4556
000026de l     O .text	00000028 __c.4313
000026c0 l     O .text	0000001e __c.4315
0000268f l     O .text	00000019 __c.4319
000026a8 l     O .text	00000018 __c.4317
0000266a l     O .text	00000025 __c.4324
00002642 l     O .text	00000028 __c.4326
00002706 l     O .text	0000001c __c.4296
00001ff0 l     O .text	00000016 __c.4561
00001fda l     O .text	00000016 __c.4563
00001fc5 l     O .text	00000015 __c.4565
00001fb6 l     O .text	0000000f __c.4567
00001fa2 l     O .text	00000014 __c.4569
00001f6e l     O .text	00000034 __c.4571
00001f3a l     O .text	00000034 __c.4573
00000000 l    df *ABS*	00000000 main.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000047a4 l     O .text	00000030 __c.4499
00004785 l     O .text	0000001f __c.4501
00004768 l     O .text	0000001d __c.4503
00004758 l     O .text	00000010 __c.4505
00004731 l     O .text	00000027 __c.4507
00004717 l     O .text	0000001a __c.4509
000046fd l     O .text	0000001a __c.4511
000046fb l     O .text	00000002 __c.4513
000046ec l     O .text	0000000f __c.4517
000046e1 l     O .text	0000000b __c.4519
000046b7 l     O .text	0000002a __c.4525
000046b4 l     O .text	00000003 __c.4535
000046a8 l     O .text	0000000c __c.4537
000046a1 l     O .text	00000007 __c.4545
00004690 l     O .text	00000011 __c.4547
00004669 l     O .text	00000027 __c.4549
0000464a l     O .text	0000001f __c.4551
0000462d l     O .text	0000001d __c.4553
0000461d l     O .text	00000010 __c.4555
000045f6 l     O .text	00000027 __c.4557
000045dc l     O .text	0000001a __c.4559
000045c2 l     O .text	0000001a __c.4561
000045ac l     O .text	00000016 __c.4563
00004596 l     O .text	00000016 __c.4565
00004584 l     O .text	00000012 __c.4567
00004575 l     O .text	0000000f __c.4569
00004558 l     O .text	0000001d __c.4571
0000453a l     O .text	0000001e __c.4573
0000451d l     O .text	0000001d __c.4575
00004503 l     O .text	0000001a __c.4577
000044eb l     O .text	00000018 __c.4579
000044da l     O .text	00000011 __c.4581
000044c4 l     O .text	00000016 __c.4583
000044af l     O .text	00000015 __c.4585
0000449d l     O .text	00000012 __c.4587
00004485 l     O .text	00000018 __c.4589
00004470 l     O .text	00000015 __c.4591
0000445a l     O .text	00000016 __c.4593
00004444 l     O .text	00000016 __c.4595
00004430 l     O .text	00000014 __c.4597
00000000 l    df *ABS*	00000000 parsing.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000004e5 l     O .text	00000020 __c.3704
000004bf l     O .text	00000026 __c.3747
00000000 l    df *ABS*	00000000 printf.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00007e30 l     F .text	00000018 _putc_fn
00000000 l    df *ABS*	00000000 ff.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00008fbc l     F .text	0000002a ld_dword
00008fe6 l     F .text	0000000c st_dword
00008ff2 l     F .text	00000012 mem_set
00009004 l     F .text	0000001e mem_cmp
00009022 l     F .text	0000010c tchar2uni
0000912e l     F .text	00000050 clst2sect
0000917e l     F .text	00000078 clmt_clust
000091f6 l     F .text	0000001e sum_sfn
00009214 l     F .text	00000058 get_ldnumber
008017ba l     O .bss	00000001 CurrVol
0000926c l     F .text	00000058 validate
000092c4 l     F .text	00000016 mem_cpy.part.0
000092da l     F .text	0000015a put_utf
00009434 l     F .text	00000220 get_fileinfo
00009654 l     F .text	0000002a ld_clust.isra.4
0000967e l     F .text	0000001a st_clust.isra.5
00009698 l     F .text	000000a6 sync_window.part.6
0000973e l     F .text	000000e4 sync_fs
00009822 l     F .text	00000150 dir_clear
00009972 l     F .text	00000076 move_window
000099e8 l     F .text	00000080 check_fs
00009a68 l     F .text	000004b4 mount_volume
008017bd l     O .bss	00000002 FatFs
008017bb l     O .bss	00000002 Fsid
00009f1c l     F .text	000001f6 put_fat
0000a112 l     F .text	00000168 get_fat.isra.10
0000a27a l     F .text	00000182 dir_sdi
0000a3fc l     F .text	0000024c create_chain
0000a648 l     F .text	00000122 remove_chain
0000a76a l     F .text	000001d0 dir_next
0000a93a l     F .text	00000072 dir_alloc
0000a9ac l     F .text	00000192 dir_read
0080040b l     O .data	0000000d LfnOfs
0000ab3e l     F .text	00000090 dir_remove
0000abce l     F .text	0000021c dir_find
0000adea l     F .text	0000031c dir_register
0000b106 l     F .text	00000462 follow_path
0080038b l     O .data	00000080 ExCvt
00000000 l    df *ABS*	00000000 ffunicode.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
008006c6 l     O .data	00000100 uc437
00800418 l     O .data	000000bc cvt2.1843
008004d4 l     O .data	000001f2 cvt1.1842
00000000 l    df *ABS*	00000000 mmc_hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000df28 l     F .text	0000003c mmc_task
000007bb l     O .text	0000001c __c.3712
000007ae l     O .text	0000000d __c.3740
0000079e l     O .text	00000010 __c.3753
008017c2 l     O .bss	00000002 mmc_init_flag
00000792 l     O .text	0000000c __c.3755
00000781 l     O .text	00000011 __c.3757
00000763 l     O .text	0000001e __c.3760
0000074e l     O .text	00000015 __c.3762
00000740 l     O .text	0000000e __c.3764
00000000 l    df *ABS*	00000000 fatfs_sup.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000009cb l     O .text	00000007 __c.3714
008007ea l     O .data	00000008 CSWTCH.25
000009ba l     O .text	00000011 __c.3750
0000099c l     O .text	0000001e __c.3752
0000097d l     O .text	0000001f __c.3754
0000095f l     O .text	0000001e __c.3756
00000941 l     O .text	0000001e __c.3758
00000922 l     O .text	0000001f __c.3760
00000903 l     O .text	0000001f __c.3762
000008e4 l     O .text	0000001f __c.3764
000008c5 l     O .text	0000001f __c.3766
000008a6 l     O .text	0000001f __c.3768
00000888 l     O .text	0000001e __c.3770
00000863 l     O .text	00000025 __c.3772
00000816 l     O .text	0000004d __c.3774
000007fb l     O .text	0000001b __c.3780
000007d9 l     O .text	00000022 __c.3782
000007d7 l     O .text	00000002 __c.3784
00000000 l    df *ABS*	00000000 fatfs_tests.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000b1c l     O .text	0000000c __c.3705
00000aa0 l     O .text	0000007c __c.3707
00000a10 l     O .text	0000000e __c.3746
000009e7 l     O .text	00000029 __c.3750
000009d2 l     O .text	00000015 __c.3752
00000a70 l     O .text	00000020 __c.3725
00000a60 l     O .text	00000010 __c.3727
00000a4c l     O .text	00000014 __c.3729
00000a3e l     O .text	0000000e __c.3731
00000a1e l     O .text	00000020 __c.3733
00000a90 l     O .text	00000010 __c.3717
00000000 l    df *ABS*	00000000 gpib_tests.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000013d6 l     O .text	0000000b __c.4469
0000131c l     O .text	000000ba __c.4471
0000130f l     O .text	0000000d __c.4479
00000000 l    df *ABS*	00000000 drives.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00001ee0 l     O .text	00000025 __c.4534
00001ea7 l     O .text	00000039 __c.4536
00001e72 l     O .text	00000035 __c.4538
00001e3d l     O .text	00000035 __c.4540
00001e05 l     O .text	00000038 __c.4542
00001dda l     O .text	0000002b __c.4544
00001db6 l     O .text	00000024 __c.4557
00001d94 l     O .text	00000022 __c.4565
00801913 l     O .bss	00000002 stack_ind
00801909 l     O .bss	0000000a stack_p
00001d75 l     O .text	0000001f __c.4601
00001d08 l     O .text	00000037 __c.4616
00001d3f l     O .text	00000036 __c.4614
00001cfb l     O .text	0000000d __c.4643
0000186e l     O .text	00000026 __c.4711
00001894 l     O .text	00000030 __c.4708
000018c4 l     O .text	0000003f __c.4706
00001903 l     O .text	0000002f __c.4703
00001932 l     O .text	00000030 __c.4700
00001962 l     O .text	00000034 __c.4698
00001cdd l     O .text	0000001e __c.4645
00001cc4 l     O .text	00000019 __c.4649
00001c9c l     O .text	00000028 __c.4651
00001c72 l     O .text	0000002a __c.4655
00001c3d l     O .text	00000035 __c.4658
00001c0c l     O .text	00000031 __c.4660
00001bdf l     O .text	0000002d __c.4663
00001bbc l     O .text	00000023 __c.4666
00001b9b l     O .text	00000021 __c.4668
00001b6d l     O .text	0000002e __c.4670
00001b3f l     O .text	0000002e __c.4673
00001b0d l     O .text	00000032 __c.4676
00001ad0 l     O .text	0000003d __c.4679
00001a9a l     O .text	00000036 __c.4681
00001a69 l     O .text	00000031 __c.4683
00001a3d l     O .text	0000002c __c.4685
00001a0f l     O .text	0000002e __c.4688
000019e1 l     O .text	0000002e __c.4691
000019c8 l     O .text	00000019 __c.4694
00001996 l     O .text	00000032 __c.4696
0000184c l     O .text	00000022 __c.4715
0000182f l     O .text	0000001d __c.4717
00001808 l     O .text	00000027 __c.4719
000017ef l     O .text	00000019 __c.4730
000017dd l     O .text	00000012 __c.4741
000017bb l     O .text	00000022 __c.4747
0000171a l     O .text	00000017 __c.4762
00001703 l     O .text	00000017 __c.4764
000016ec l     O .text	00000017 __c.4766
0000175f l     O .text	00000017 __c.4756
00001748 l     O .text	00000017 __c.4758
00001731 l     O .text	00000017 __c.4760
000017a4 l     O .text	00000017 __c.4750
0000178d l     O .text	00000017 __c.4752
00001776 l     O .text	00000017 __c.4754
000016ea l     O .text	00000002 __c.4771
000016ca l     O .text	00000020 __c.4779
00001440 l     O .text	00000005 __c.4898
0000143e l     O .text	00000002 __c.4900
0000145e l     O .text	00000009 __c.4890
00001454 l     O .text	0000000a __c.4892
0000144c l     O .text	00000008 __c.4894
00001445 l     O .text	00000007 __c.4896
0000150b l     O .text	0000000a __c.4856
000016c1 l     O .text	00000009 __c.4782
000016a2 l     O .text	0000001f __c.4784
00001698 l     O .text	0000000a __c.4786
00001690 l     O .text	00000008 __c.4788
0000168c l     O .text	00000004 __c.4790
00001687 l     O .text	00000005 __c.4792
00001680 l     O .text	00000007 __c.4794
00001676 l     O .text	0000000a __c.4796
00001673 l     O .text	00000003 __c.4798
0000166c l     O .text	00000007 __c.4800
0000165e l     O .text	0000000e __c.4802
0000164e l     O .text	00000010 __c.4804
00001640 l     O .text	0000000e __c.4806
0000163b l     O .text	00000005 __c.4808
00001634 l     O .text	00000007 __c.4810
0000162c l     O .text	00000008 __c.4812
00001622 l     O .text	0000000a __c.4814
00001614 l     O .text	0000000e __c.4816
00001604 l     O .text	00000010 __c.4818
000015f4 l     O .text	00000010 __c.4820
000015e9 l     O .text	0000000b __c.4822
000015de l     O .text	0000000b __c.4824
000015c5 l     O .text	00000019 __c.4826
000015b2 l     O .text	00000013 __c.4828
000015a6 l     O .text	0000000c __c.4830
00001593 l     O .text	00000013 __c.4832
00001585 l     O .text	0000000e __c.4834
00001573 l     O .text	00000012 __c.4836
0000156c l     O .text	00000007 __c.4838
00001562 l     O .text	0000000a __c.4840
00001555 l     O .text	0000000d __c.4842
0000154c l     O .text	00000009 __c.4844
00001541 l     O .text	0000000b __c.4846
00001530 l     O .text	00000011 __c.4848
00001525 l     O .text	0000000b __c.4850
0000151c l     O .text	00000009 __c.4852
00001515 l     O .text	00000007 __c.4854
000014ec l     O .text	0000001f __c.4858
000014e2 l     O .text	0000000a __c.4860
000014da l     O .text	00000008 __c.4862
000014d6 l     O .text	00000004 __c.4864
000014d1 l     O .text	00000005 __c.4866
000014ca l     O .text	00000007 __c.4868
000014c0 l     O .text	0000000a __c.4870
000014bd l     O .text	00000003 __c.4872
000014b6 l     O .text	00000007 __c.4874
000014aa l     O .text	0000000c __c.4876
00001499 l     O .text	00000011 __c.4878
00001487 l     O .text	00000012 __c.4880
00001481 l     O .text	00000006 __c.4882
00001477 l     O .text	0000000a __c.4884
0000146e l     O .text	00000009 __c.4886
00001467 l     O .text	00000007 __c.4888
00001439 l     O .text	00000005 __c.4905
00001437 l     O .text	00000002 __c.4907
000013e3 l     O .text	00000008 __c.4926
000013eb l     O .text	00000022 __c.4924
0000140d l     O .text	00000008 __c.4922
00001415 l     O .text	00000022 __c.4920
000013e1 l     O .text	00000002 __c.4931
00000000 l    df *ABS*	00000000 drives_sup.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00001f16 l     O .text	00000007 __c.3765
00001f1d l     O .text	0000001d __c.3761
00001f05 l     O .text	00000011 __c.3767
00000000 l    df *ABS*	00000000 amigo.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00016560 l     F .text	000000ac amigo_overflow_check
00002eac l     O .text	00000019 __c.4226
0001660c l     F .text	000000e8 amigo_chs_to_logical
00002e59 l     O .text	0000002b __c.4219
00002f2c l     O .text	00000018 __c.4196
00002f0e l     O .text	0000001e __c.4202
00002ef4 l     O .text	0000001a __c.4204
00002edf l     O .text	00000015 __c.4210
00002ec5 l     O .text	0000001a __c.4212
00002e84 l     O .text	00000028 __c.4249
00002e49 l     O .text	00000010 __c.4260
00002e34 l     O .text	00000015 __c.4264
00002e1a l     O .text	0000001a __c.4271
00002dfb l     O .text	0000001f __c.4278
00002de1 l     O .text	0000001a __c.4285
00002dd4 l     O .text	0000000d __c.4287
00002dc5 l     O .text	0000000f __c.4300
00002d5e l     O .text	00000067 __c.4307
00002cf7 l     O .text	00000067 __c.4309
00002c90 l     O .text	00000067 __c.4311
00002c2b l     O .text	00000065 __c.4313
00002bdb l     O .text	00000050 __c.4318
00002b8b l     O .text	00000050 __c.4320
00002b3b l     O .text	00000050 __c.4322
00002aea l     O .text	00000051 __c.4324
00002ab8 l     O .text	00000032 __c.4336
00002a96 l     O .text	00000022 __c.4338
00002a75 l     O .text	00000021 __c.4340
00002a54 l     O .text	00000021 __c.4342
00002a25 l     O .text	0000002f __c.4344
00002a05 l     O .text	00000020 __c.4347
000029f1 l     O .text	00000014 __c.4350
000029dd l     O .text	00000014 __c.4353
000029b4 l     O .text	00000029 __c.4355
00002993 l     O .text	00000021 __c.4357
00002983 l     O .text	00000010 __c.4360
00002961 l     O .text	00000022 __c.4362
00002945 l     O .text	0000001c __c.4364
0000291c l     O .text	00000029 __c.4366
000028fc l     O .text	00000020 __c.4368
000028d1 l     O .text	0000002b __c.4370
000028b2 l     O .text	0000001f __c.4372
000028a2 l     O .text	00000010 __c.4375
00002870 l     O .text	00000032 __c.4380
00002850 l     O .text	00000020 __c.4384
0000282f l     O .text	00000021 __c.4387
00002810 l     O .text	0000001f __c.4390
000027ee l     O .text	00000022 __c.4393
000027d2 l     O .text	0000001c __c.4396
000027b2 l     O .text	00000020 __c.4399
00002789 l     O .text	00000029 __c.4404
0000275e l     O .text	0000002b __c.4407
00002735 l     O .text	00000029 __c.4410
00000000 l    df *ABS*	00000000 printer.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00002f81 l     O .text	00000021 __c.4187
00002fb0 l     O .text	00000015 __c.4179
00002fa2 l     O .text	0000000e __c.4181
00002fe7 l     O .text	00000022 __c.4169
00002fd1 l     O .text	00000016 __c.4171
00002fc5 l     O .text	0000000c __c.4173
00002f7a l     O .text	00000007 __c.4193
00002f5e l     O .text	0000001c __c.4198
00002f44 l     O .text	0000001a __c.4200
00000000 l    df *ABS*	00000000 lifutils.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00004426 l     O .text	0000000a __c.4129
0000425d l     O .text	000001c9 __c.4131
00004213 l     O .text	00000029 __c.4150
000041fb l     O .text	00000018 __c.4155
000041d6 l     O .text	00000025 __c.4167
000041bd l     O .text	00000019 __c.4173
0000419c l     O .text	00000021 __c.4180
00004160 l     O .text	0000003c __c.4189
00004123 l     O .text	0000003d __c.4198
00801967 l     O .bss	00000020 _lif_ctime_buf.4301
00801947 l     O .bss	00000020 _timestr.4306
0000411e l     O .text	00000005 __c.4321
00004104 l     O .text	0000001a __c.4323
000040e7 l     O .text	0000001d __c.4325
000040ca l     O .text	0000001d __c.4327
000040ad l     O .text	0000001d __c.4329
00004090 l     O .text	0000001d __c.4331
00004073 l     O .text	0000001d __c.4333
00004056 l     O .text	0000001d __c.4335
00004039 l     O .text	0000001d __c.4337
0000401c l     O .text	0000001d __c.4339
00004002 l     O .text	0000001a __c.4341
00003fe6 l     O .text	0000001c __c.4343
00003fc9 l     O .text	0000001d __c.4345
00003fac l     O .text	0000001d __c.4347
00003f90 l     O .text	0000001c __c.4349
00003f74 l     O .text	0000001c __c.4351
00003f5a l     O .text	0000001a __c.4353
00003f40 l     O .text	0000001a __c.4355
00003f24 l     O .text	0000001c __c.4357
00003f08 l     O .text	0000001c __c.4359
00003eeb l     O .text	0000001d __c.4361
00003ece l     O .text	0000001d __c.4363
00003eb1 l     O .text	0000001d __c.4365
00003e95 l     O .text	0000001c __c.4367
00003e7b l     O .text	0000001a __c.4369
00003e79 l     O .text	00000002 __c.4371
00003e5a l     O .text	0000001f __c.4378
00003e21 l     O .text	00000039 __c.4380
00003e09 l     O .text	00000018 __c.4382
00003dd0 l     O .text	00000039 __c.4384
00003d97 l     O .text	00000039 __c.4386
00003d72 l     O .text	00000025 __c.4388
00003d43 l     O .text	0000002f __c.4390
00003d17 l     O .text	0000002c __c.4392
00003cf6 l     O .text	00000021 __c.4398
00003cb2 l     O .text	00000044 __c.4400
00003c71 l     O .text	00000041 __c.4402
00003c43 l     O .text	0000002e __c.4404
00003bf8 l     O .text	0000004b __c.4406
00003bad l     O .text	0000004b __c.4408
00003b82 l     O .text	0000002b __c.4410
00003b56 l     O .text	0000002c __c.4412
00003a93 l     O .text	0000003a __c.4467
00003a73 l     O .text	00000020 __c.4476
00003a26 l     O .text	0000004d __c.4501
00003b01 l     O .text	00000055 __c.4428
00003af4 l     O .text	0000000d __c.4430
00003ae7 l     O .text	0000000d __c.4438
00003ada l     O .text	0000000d __c.4443
00003acd l     O .text	0000000d __c.4448
000039ee l     O .text	00000038 __c.4513
000039c5 l     O .text	00000029 __c.4515
00003974 l     O .text	00000051 __c.4518
00003935 l     O .text	0000003f __c.4531
000038ff l     O .text	00000036 __c.4533
000038cc l     O .text	00000033 __c.4535
00003899 l     O .text	00000033 __c.4537
00003882 l     O .text	00000017 __c.4547
00003842 l     O .text	00000040 __c.4549
000037f6 l     O .text	0000004c __c.4552
000037c6 l     O .text	00000030 __c.4554
000037c4 l     O .text	00000002 __c.4557
000037b8 l     O .text	0000000c __c.4559
000037ab l     O .text	0000000d __c.4561
0000379a l     O .text	00000011 __c.4563
00003787 l     O .text	00000013 __c.4565
00003774 l     O .text	00000013 __c.4567
00003761 l     O .text	00000013 __c.4569
0000373a l     O .text	00000027 __c.4576
00003715 l     O .text	00000025 __c.4578
000036dc l     O .text	00000039 __c.4592
000036b8 l     O .text	00000024 __c.4609
000036aa l     O .text	0000000e __c.4626
0000369c l     O .text	0000000e __c.4631
0000368e l     O .text	0000000e __c.4633
0000365b l     O .text	00000033 __c.4647
0000362d l     O .text	0000002e __c.4649
000035fe l     O .text	0000002f __c.4651
000035ce l     O .text	00000030 __c.4653
0000359f l     O .text	0000002f __c.4655
0000356f l     O .text	00000030 __c.4657
00003548 l     O .text	00000027 __c.4659
00003531 l     O .text	00000017 __c.4661
0000351a l     O .text	00000017 __c.4663
00003501 l     O .text	00000019 __c.4665
000034e8 l     O .text	00000019 __c.4667
000034da l     O .text	0000000e __c.4669
000034c2 l     O .text	00000018 __c.4693
000034ab l     O .text	00000017 __c.4695
00003473 l     O .text	00000038 __c.4697
00003463 l     O .text	00000010 __c.4699
000033a2 l     O .text	0000000e __c.4710
000033b0 l     O .text	00000028 __c.4708
0000342e l     O .text	00000035 __c.4703
000033d8 l     O .text	00000056 __c.4705
0000337a l     O .text	00000028 __c.4718
0000336c l     O .text	0000000e __c.4721
00003354 l     O .text	00000018 __c.4738
00003341 l     O .text	00000013 __c.4740
00003333 l     O .text	0000000e __c.4742
00003325 l     O .text	0000000e __c.4747
00003305 l     O .text	00000020 __c.4764
000032ea l     O .text	0000001b __c.4766
000032ce l     O .text	0000001c __c.4768
0000329f l     O .text	0000002f __c.4770
0000328c l     O .text	00000013 __c.4772
0000325c l     O .text	00000030 __c.4774
0000324e l     O .text	0000000e __c.4776
00003240 l     O .text	0000000e __c.4781
0000321b l     O .text	00000025 __c.4789
000031fb l     O .text	00000020 __c.4791
000031dc l     O .text	0000001f __c.4793
000031b4 l     O .text	00000028 __c.4795
000031a5 l     O .text	0000000f __c.4797
0000317d l     O .text	00000028 __c.4806
00003156 l     O .text	00000027 __c.4808
0000312f l     O .text	00000027 __c.4810
000030f9 l     O .text	00000036 __c.4812
000030d0 l     O .text	00000029 __c.4814
000030b9 l     O .text	00000017 __c.4816
00003090 l     O .text	00000029 __c.4829
0000306b l     O .text	00000025 __c.4831
00003048 l     O .text	00000023 __c.4833
00003028 l     O .text	00000020 __c.4835
00003009 l     O .text	0000001f __c.4837
0000423c l     O .text	00000021 __c.4144
00000000 l    df *ABS*	00000000 vfprintf.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000001d6 l     O .text	00000004 __c.2334
000001da l     O .text	00000004 __c.2332
00000000 l    df *ABS*	00000000 ram.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000041d l     O .text	0000000d __c.3722
0000040a l     O .text	00000013 __c.3724
000003f7 l     O .text	00000013 __c.3726
000003d9 l     O .text	0000001e __c.3728
000003bb l     O .text	0000001e __c.3730
0000039d l     O .text	0000001e __c.3732
0000037f l     O .text	0000001e __c.3734
0000036b l     O .text	00000014 __c.3736
00000350 l     O .text	0000001b __c.3751
00000338 l     O .text	00000018 __c.3757
00000313 l     O .text	00000025 __c.3766
00000000 l    df *ABS*	00000000 spi.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00801710 l     O .bss	00000004 SPI0_Speed_value
0000042a l     O .text	0000001d __c.3720
0080170e l     O .bss	00000002 SPI0_Mode_value
00000000 l    df *ABS*	00000000 rtc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000004a4 l     O .text	0000001b __c.3720
00000486 l     O .text	0000001e __c.3722
00000457 l     O .text	00000011 __c.3737
00000468 l     O .text	0000001e __c.3730
00000447 l     O .text	00000010 __c.3744
00000000 l    df *ABS*	00000000 timer.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00006ac8 l     F .text	0000007c clock_settime.part.2
00000594 l     O .text	0000001d __c.3717
0000058a l     O .text	0000000a __c.3737
00801720 l     O .bss	00000020 _ts_to_str
00801718 l     O .bss	00000008 __clock_elapsed
0000057c l     O .text	0000000e __c.3751
00000571 l     O .text	0000000b __c.3753
00801740 l     O .bss	00000002 timers_configured
00801742 l     O .bss	00000002 timers_enabled
0000055d l     O .text	00000014 __c.3773
0000054a l     O .text	00000013 __c.3775
0000053e l     O .text	0000000c __c.3777
00000526 l     O .text	00000018 __c.3779
00000515 l     O .text	00000011 __c.3781
00000505 l     O .text	00000010 __c.3783
00000000 l    df *ABS*	00000000 gpib_hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000de8 l     O .text	0000001d __c.3864
008018f9 l     O .bss	00000001 _ppr_reg
00000dd5 l     O .text	00000013 __c.3882
00000dc4 l     O .text	00000011 __c.3896
00000db7 l     O .text	0000000d __c.3905
00000da9 l     O .text	0000000e __c.3914
00000d9c l     O .text	0000000d __c.3921
00000d8e l     O .text	0000000e __c.3927
00000000 l    df *ABS*	00000000 _clear_bss.o
00004804 l       .text	00000000 .do_clear_bss_start
00004802 l       .text	00000000 .do_clear_bss_loop
00000000 l    df *ABS*	00000000 delay.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 rs232.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 TWI_AVR8.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 i2c.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00801716 l     O .bss	00000002 txn
00801714 l     O .bss	00000002 op
00000000 l    df *ABS*	00000000 stringsup.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 timer_hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 mathio.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 ffsystem.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 diskio.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 _udivmodqi4.o
0001c634 l       .text	00000000 __udivmodqi4_ep
0001c62c l       .text	00000000 __udivmodqi4_loop
00000000 l    df *ABS*	00000000 _udivmodhi4.o
0001c654 l       .text	00000000 __udivmodhi4_ep
0001c646 l       .text	00000000 __udivmodhi4_loop
00000000 l    df *ABS*	00000000 _divmodhi4.o
0001c67c l       .text	00000000 __divmodhi4_neg1
0001c684 l       .text	00000000 __divmodhi4_neg2
0001c68a l       .text	00000000 __divmodhi4_exit
00000000 l    df *ABS*	00000000 _udivmodsi4.o
0001c6b2 l       .text	00000000 __udivmodsi4_ep
0001c698 l       .text	00000000 __udivmodsi4_loop
00000000 l    df *ABS*	00000000 _divmodsi4.o
0001c6e8 l       .text	00000000 __divmodsi4_neg2
0001c6f6 l       .text	00000000 __divmodsi4_exit
00000000 l    df *ABS*	00000000 calloc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 _exit.o
0001d212 l       .text	00000000 __stop_program
00015c96 g     F .text	0000004a SS80_Selected_Device_Clear
0001c744 g       .text	00000002 .hidden __usmulhisi3
0000ee30 g     F .text	0000000c putchar
00011936 g     F .text	0000001e SS80_is_MTA
00006964 g     F .text	000000ea clock_gettime
00005fa6 g     F .text	00000098 rtc_init
00011c58 g     F .text	000000a8 GPIB_COMMANDS
00004812  w      .text	00000000 __vector_22
00010dfe g     F .text	00000054 gpib_unread
00014e8c g     F .text	00000034 SS80_test_extended_status
0000646a  w    F .text	00000016 strcpy
00007c0e g     F .text	00000008 asctime
00006ee6 g     F .text	00000020 tm_mon_to_ascii
00801a16 g     O .bss	00000235 Fatfs
0000ef64 g     F .text	0000004a mctime
00004812  w      .text	00000000 __vector_28
0000dfe2 g     F .text	0000001a mmc_fast
00005ef0 g     F .text	000000b6 rtc_write
00800245 g     O .data	00000002 RESET
00015d88 g     F .text	00000218 SS80_Transparent_State
008018fa g     O .bss	00000001 gpib_unread_f
0000502c g     F .text	00000004 spi_RX_buffer
00012394 g     F .text	00000042 gpib_help
00015afe g     F .text	0000009a SS80_Report
0000fa78 g     F .text	0000006a free_file_descriptor
0000ec24 g     F .text	00000096 fatfs_putc
0001c726 g       .text	0000001e .hidden __umulhisi3
008001c5 g     O .data	0000000c cfgfile
00004812  w      .text	00000000 __vector_1
00011dc0 g     F .text	0000017c GPIB
0000e7ca g     F .text	00000042 fatfs_help
00006bba g     F .text	00000016 delete_all_timers
00006238 g     F .text	00000016 LCD_clear
00005948 g     F .text	0000000c SPI0_TXRX_Byte
0001ccd4 g       .text	00000000 __fp_mpack_finite
00016cd4 g     F .text	00000192 amigo_buffered_read
0000f5be g     F .text	00000086 utime
008019e0 g     O .bss	00000008 __clock
000126a6 g     F .text	00000054 find_device
00013ba4 g     F .text	00000092 print_str_P
00800110 g     O .data	00000008 lcd
00007a3c g     F .text	00000128 set_dst
0000f2f8 g     F .text	00000096 fdevopen
00011954 g     F .text	0000001e SS80_is_MSA
00004fc8 g     F .text	00000060 spi_end
000187b4 g     F .text	000000e2 lif_dir2str
0001cc5a g     F .text	00000040 round
000129b4 g     F .text	0000017e alloc_device
0000532a g     F .text	0000006a safefree
00013af4 g     F .text	000000b0 print_var_P
00011f3c g     F .text	00000130 GPIB_TALK
00004812  w      .text	00000000 __vector_32
0000ff00 g       *ABS*	00000000 __DATA_REGION_LENGTH__
0001c8f6 g     F .text	00000004 __divsf3
0001c7c8 g       .text	00000036 .hidden __epilogue_restores__
000056fc g     F .text	00000018 uart_rx_count
000147fe g     F .text	0000003a lif_dir_count
00801c75 g     O .bss	00000009 gpib_timer
0001206c g     F .text	000000f6 GPIB_SECONDARY_ADDRESS
00018b4e g     F .text	0000000e lif_vol_clear
00006a4e g     F .text	0000007a clock_task
00011218 g     F .text	00000284 gpib_trace_display
0001ba78 g     F .text	000000fa lif_rename_file
00012e66 g     F .text	00000c8e Read_Config
00012626 g     F .text	00000028 find_type
0001cb18 g     F .text	00000022 __fp_round
0001264e g     F .text	0000001e count_drive_types
00006f06 g     F .text	00000042 Days_Per_Month
00006daa g     F .text	00000028 execute_timers
0001018e g     F .text	00000176 ls_info
00004812  w      .text	00000000 __vector_34
0000df9c g     F .text	0000001a mmc_spi_begin
0001c9c6 g     F .text	0000000a __fixsfsi
00006cc4 g     F .text	0000000c clock_elapsed_begin
000064d2  w    F .text	00000032 reverse
000063fe g     F .text	0000003c lcd_printf
0000d932 g     F .text	00000006 mmc_disk_status
0001cb3a g     F .text	00000044 __fp_split3
00010bd2 g     F .text	00000014 gpib_timeout_set
0001c63e g       .text	00000028 .hidden __udivmodhi4
00004fc4 g     F .text	00000004 chip_select_init
00006c52 g     F .text	00000072 ts_to_str
00008fb0 g     F .text	0000000c atol
00007fbc g     F .text	000000aa p_ntoa
0000e1aa g     F .text	000000d8 tm_to_fat
00005170 g     F .text	00000122 PrintFree
00016fe0 g     F .text	000000c2 amigo_cmd_dsj
0000d6b6 g     F .text	00000024 wait_ready
000001d6 g       .text	00000000 __trampolines_start
00012bdc g     F .text	0000013c hpdir_set_device
0001caa2 g     F .text	00000048 __fp_cmp
00011794 g     F .text	000000ea gpib_write_str
00801c53 g     O .bss	00000002 errno
00015d66 g     F .text	00000022 SS80_Cancel
0001d214 g       .text	00000000 _etext
00005a44 g     F .text	00000008 TWI_StopTransmission
0000da8e g     F .text	0000047c mmc_disk_ioctl
0000665a g     F .text	00000028 MATCH
00800132 g     O .data	00000010 __WDay
000195da g     F .text	000000b8 lif_writedirindex
000061e0 g     F .text	00000040 LCD_setCursor
00005806 g     F .text	000000ce SPI0_Speed
00006cd0 g     F .text	0000007c clock_elapsed_end
0000d528 g     F .text	000000c4 ff_wtoupper
0001c824 g     F .text	0000000a __subsf3
0001b63c g     F .text	00000312 lif_add_lif_file
00801c7e g     O .bss	00000002 lastcmd
00004812  w      .text	00000000 __vector_24
00012bda g     F .text	00000002 set_Config_Defaults
00006646 g     F .text	00000014 skipspaces
0000c0fc g     F .text	0000026c f_getcwd
00004812  w      .text	00000000 __vector_12
0001080e g     F .text	00000032 gpib_timer_init
00010870 g     F .text	0000002c ppr_init
0000ee3c g     F .text	00000068 fgets
0001d154 g     F .text	000000bc __ultoa_invert
00005714 g     F .text	0000004c uart_get_tail
000052e6 g     F .text	00000044 safemalloc
0001b94e g     F .text	0000012a lif_del_file
00007dfe g     F .text	00000032 _putc_buffer_fn
0001a878 g     F .text	0000016e lif_ascii_string_to_e010
0000e19e g     F .text	00000006 mmc_ins_status
00018ae4 g     F .text	0000004e lif_lifbcd2timestr
00801c80 g     O .bss	00000200 gpib_iobuff
00012556 g     F .text	00000028 V2B_MSB
00018984 g     F .text	00000084 lif_time2lifbcd
0001269e g     F .text	00000008 find_free
0001909e g     F .text	00000352 lif_check_dir
00004812 g       .text	00000000 __bad_interrupt
000053ee g     F .text	00000090 delayms
00015c62 g     F .text	00000018 SS80_Channel_Independent_Clear
000100b6 g     F .text	000000d8 cat
00008e20 g     F .text	00000028 snprintf_P
000170f2 g     F .text	00000132 amigo_todo_op
00015ce0 g     F .text	00000086 SS80_Amigo_Clear
0000f26e g     F .text	0000008a perror
0001e822 g       *ABS*	00000000 __data_load_end
0000d5f8 g     F .text	0000000c disk_initialize
0080193a g     O .bss	0000000d plot
00010b80 g     F .text	00000006 gpib_timer_elapsed_end
000180e8 g     F .text	0000002a lif_free
0000eed4 g     F .text	0000002e puts
0000fe8a g     F .text	000001bc copy
00006eac g     F .text	00000010 clock_settime
00018112 g     F .text	0000003e lif_stralloc
0000643a  w    F .text	00000016 islower
00005142 g     F .text	0000002e freeRam
0001677c g     F .text	0000001c amigo_request_logical_address
00006220 g     F .text	00000018 LCD_pos
0000cfde g     F .text	0000022a f_rename
00004812  w      .text	00000000 __vector_6
00010b62 g     F .text	0000001e gpib_timer_reset
000198d2 g     F .text	000005d4 lif_create_volume
0001cd20 g     F .text	00000130 malloc
00005050 g     F .text	00000040 spi_init
0000fe48 g     F .text	00000042 posix_help
00004812  w      .text	00000000 __vector_31
000108d2 g     F .text	00000046 dbf_open
0001bef4 g     F .text	000000c2 copyright
0000c046 g     F .text	000000b6 f_chdir
0001c8ee g       .text	00000000 __lesf2
00004f94 g     F .text	00000030 chip_deselect
00017fc4 g     F .text	00000076 PRINTER_COMMANDS
00006d4c g     F .text	00000036 clock_clear
00007c38 g     F .text	000000ee initialize_clock
0000e19c g     F .text	00000002 mmc_power_off
0000e1a4 g     F .text	00000006 mmc_wp_status
0000eb1e g     F .text	00000106 fatfs_getc
00801e80 g     O .bss	00000001 listening_last
0000d5ec g     F .text	0000000c disk_status
000061ba g     F .text	00000026 LCD_specialCommand
00800102 g     O .data	00000002 __malloc_heap_start
000001d6 g       .text	00000000 __trampolines_end
00006e8c g     F .text	00000020 clock_getres
0001a9e6 g     F .text	00000210 lif_add_ascii_file_as_e010_wrapper
00010db8 g     F .text	00000046 gpib_assert_ifc
0001896e g     F .text	00000016 lif_BCD2BIN
00005b0c g     F .text	00000028 TWI_SendByte
00018150 g     F .text	00000054 lif_open
00007d26 g     F .text	000000d8 display_clock
0001089c g     F .text	0000001a ppr_bit_set
00004812  w      .text	00000000 __vector_3
00010868 g     F .text	00000008 ppr_reg
00011648 g     F .text	00000008 gpib_decode
0000547e g     F .text	00000022 uart_rx_flush
0000f17c g     F .text	00000004 rmdir
00006b44 g     F .text	00000076 set_timers
00801a04 g     O .bss	0000000c dst
0000f1f2 g     F .text	0000007c readdir
0001cb7e g     F .text	0000000e __fp_zero
0000c9c2 g     F .text	0000002a f_closedir
0000d644 g     F .text	00000014 disk_ioctl
0001bc80 g     F .text	00000274 lif_tests
0000852c g     F .text	00000084 _puts_pad
00005030 g     F .text	00000020 spi_TX
00018b5c g     F .text	0000038c lif_dump_vol
00012162 g     F .text	0000004c listen_cleanup
00018a08 g     F .text	000000a0 lif_lifbcd2time
00018896 g     F .text	000000ca lif_str2dir
000059d6 g     F .text	0000002c SPI0_TXRX
0000628c g     F .text	00000064 LCD_init
0001c8ee g       .text	00000000 __nesf2
00012d18 g     F .text	00000022 hpdir_set_parameters
00005e08 g     F .text	0000000e BINtoBCD
0000f6a4 g     F .text	000000d0 lseek
00004812  w      .text	00000000 __vector_23
0001d214 g       *ABS*	00000000 __data_load_start
008017c6 g     O .bss	00000004 _mmc_clock
000047d4 g       .text	00000000 __dtors_end
00006170 g     F .text	00000024 LCD_putb
00011a08 g     F .text	00000010 gpib_init_devices
00006576  w    F .text	00000050 strncasecmp
00802146 g       .bss	00000000 __bss_end
000183bc g     F .text	00000056 lif_chars
0001c750 g       .text	00000014 .hidden __muluhisi3
00004812  w      .text	00000000 __vector_30
00000400 g       *ABS*	00000000 __LOCK_REGION_LENGTH__
0001cf62 g     F .text	00000008 abort
0001445c g     F .text	000002a6 format_drives
00004812  w      .text	00000000 __vector_25
00802142 g     O .bss	00000002 __brkval
00007104 g     F .text	0000002a gmtime_r
0000f008 g     F .text	00000052 chmod
00006dd2 g     F .text	000000ba init_timers
000119ae g     F .text	0000001e AMIGO_is_MSA
0001943c g     F .text	000000d0 lif_checkdirindex
0000ccb0 g     F .text	0000014e f_unlink
00010e5e g     F .text	00000020 gpib_control_pin_read
00010a00 g     F .text	000000ae dbf_open_read
0001c71a g       .text	0000000c .hidden __mulhisi3
00008ee6 g     F .text	000000bc strtol
00010b5c g     F .text	00000006 gpib_timer_elapsed_begin
0001d13e g     F .text	00000016 strnlen
000054a0 g     F .text	00000134 uart_ubr
0000d498 g     F .text	00000066 ff_uni2oem
0001a7c6 g     F .text	000000b2 lif_e010_pad_sector
0001803a g     F .text	00000042 lif_help
00006732 g     F .text	000000b8 split_args
0000f100 g     F .text	0000003e rename
000109c6 g     F .text	0000003a dbf_close
00017c1e g     F .text	000000be receive_plot_flush
0001c910 g     F .text	000000d4 __divsf3x
00004812  w      .text	00000000 __vector_11
00801e81 g     O .bss	00000001 spoll
0000efae g     F .text	0000001c basename
00014ec0 g     F .text	000000c6 SS80_display_extended_status
00017ad2 g     F .text	00000130 AMIGO_COMMANDS
0001cf6a g     F .text	000001b0 __ftoa_engine
000184fa g     F .text	0000007a lif_fixname
0000d9c4 g     F .text	000000ca mmc_disk_write
000047d4  w      .text	00000000 __init
0001ccec g     F .text	00000034 calloc
0001b3cc g     F .text	00000270 lif_extract_lif_as_lif
000068f0 g     F .text	00000026 install_timers_isr
00012d3a g     F .text	0000012c Post_Config
00010840 g     F .text	00000014 reverse_8bits
00015088 g     F .text	000000e0 SS80_describe
00005798 g     F .text	0000002c uart_getchar
00008066 g     F .text	0000020e p_ftoa
0000f964 g     F .text	000000dc write
000062f0 g     F .text	00000046 lcd_cleareol
00018412 g     F .text	00000074 lif_B2S
0001cb8c g       .text	00000000 __gtsf2
0000fe08 g     F .text	00000040 fprintf
00011174 g     F .text	000000a4 gpib_decode_header
0001149c g     F .text	000001ac gpib_read_byte
00015c7a g     F .text	0000001c SS80_Universal_Device_Clear
0001abf6 g     F .text	00000278 lif_add_ascii_file_as_e010
00006916 g     F .text	0000004e __vector_13
000064ac  w    F .text	00000026 strcat
00801989 g     O .bss	00000057 uarts
0001cbb0 g       .text	00000000 __mulsf3_pse
00004812  w      .text	00000000 __vector_17
00005120 g     F .text	00000022 spi_TXRX
0001caf6 g     F .text	00000006 __fp_nan
000126fa g     F .text	000001c6 set_active_device
00004812  w      .text	00000000 __vector_19
00006870 g     F .text	0000007c get_value
000059ae g     F .text	00000028 SPI0_TX
00018486 g     F .text	0000003a lif_checkname
0000efca g     F .text	0000003e chdir
00004812  w      .text	00000000 __vector_7
0000e064 g     F .text	00000138 mmc_init
0000e80c g     F .text	00000176 fatfs_ls
0001caea g     F .text	0000000c __fp_inf
00008e48 g     F .text	00000028 sprintf_P
0001c80c g       .text	00000018 .hidden __cmpdi2_s8
0000f38e g     F .text	00000088 fat_time_to_unix
0000f774 g     F .text	0000004e fseek
00801c4b g     O .bss	00000004 AccSize
00018b32 g     F .text	0000000c lif_image_clear
0000e00e g     F .text	0000000e mmc_set_ms_timeout
000068ec g     F .text	00000004 enable_system_task
0000e002 g     F .text	00000006 mmc_spi_RX_buffer
00007224 g     F .text	00000058 is_dst
000055d4 g     F .text	0000008e uart_init
00014bc4 g     F .text	00000078 SS80ControllerPack
00801e8a g     O .bss	00000204 Devices
000047fa g       .text	00000010 .hidden __do_clear_bss
0001d11a g     F .text	00000016 strnlen_P
00801a10 g     O .bss	00000006 _pch
000058d4 g     F .text	00000074 SPI0_Mode
00810000 g       .comment	00000000 __eeprom_end
0001a166 g     F .text	000001f4 lif_open_volume
00010046 g     F .text	00000070 testpage
00017ed2 g     F .text	000000f2 printer_buffer
00005bf2 g     F .text	0000005c TWI_WritePacket
0000c014 g     F .text	00000032 f_close
0001cbac g     F .text	000000ca __mulsf3x
00017c02 g     F .text	0000001c printer_init
0000dfbe g     F .text	0000001a mmc_slow
00006606 g     F .text	00000020 sep
00800100 g     O .data	00000002 __malloc_heap_end
00010854 g     F .text	00000014 ppr_set
00016baa g     F .text	0000012a amigo_format
0000f7c2 g     F .text	000000da read
00019692 g     F .text	00000030 lif_writedirEOF
0000dfb6 g     F .text	00000008 mmc_spi_end
0001ca2c g       .text	00000000 __floatsisf
000170a2 g     F .text	00000050 amigo_cmd_clear
00000000 g       .text	00000000 __vectors
000196c2 g     F .text	00000210 lif_updatefree
00005a02 g     F .text	0000002a SPI0_RX
0000b950 g     F .text	00000296 f_read
00801987 g     O .bss	00000002 rtc_ok
00011918 g     F .text	0000001e SS80_is_MLA
00005662 g     F .text	00000046 uart_rx_interrupt
000057c4 g     F .text	00000006 uart0_getchar
00004812  w      .text	00000000 __vector_27
00010d4c g     F .text	0000006c gpib_disable_PPR
0000e2d2 g     F .text	000000e0 fatfs_scan_files
00004f62 g     F .text	00000032 chip_select
0080170e g       .data	00000000 __data_end
0001098c g     F .text	0000003a dbf_lseek
0001638c g     F .text	000001d4 SS80_COMMANDS
000065c6 g     F .text	00000040 stralloc
0000c9ec g     F .text	00000088 f_readdir
00801e82 g     O .bss	00000002 current
000151ba g     F .text	0000004e SS80_Check_Volume
0000df64 g     F .text	00000038 mmc_install_timer
00007f74 g     F .text	00000048 pch
00008eaa g     F .text	0000003c atodigit
0001c608 g       .text	0000001e .hidden __mulsi3
00006480  w    F .text	0000002c strncpy
0000f13e g     F .text	0000003e unlink
0000f93a g     F .text	0000002a sync
00015bd6 g     F .text	0000008c SS80_init
0001c8ee g       .text	00000000 __eqsf2
0000fb54 g     F .text	0000008a new_file_descriptor
00006538  w    F .text	0000003e strcasecmp
0001c770 g       .text	00000020 .hidden __negdi2
000125e6 g     F .text	00000040 B2V_LSB
0000e6c4 g     F .text	00000106 fatfs_filinfo_list
0000d208 g     F .text	0000009a f_chmod
008019e8 g     O .bss	00000018 timer_irq
0001266c g     F .text	00000032 type_to_str
00000000  w      .text	00000000 __vector_default
0001c666 g       .text	00000026 .hidden __divmodhi4
00014c3c g     F .text	00000198 SS80UnitPack
00010aae g     F .text	000000ae dbf_open_write
00004812  w      .text	00000000 __vector_5
0000df0a g     F .text	0000001e mmc_disk_timerproc
00007930 g     F .text	0000010c find_dst
0080018f g     O .data	00000034 gpib_tokens
00004812  w      .text	00000000 __vector_33
00011650 g     F .text	00000144 gpib_read_str
0001a35a g     F .text	000003aa lif_dir
00016e66 g     F .text	0000017a amigo_buffered_write
0001c0c8 g     F .text	0000018e task
00000400 g       *ABS*	00000000 __SIGNATURE_REGION_LENGTH__
00014f86 g     F .text	00000102 SS80_send_status
00006336 g     F .text	000000b2 lcd_putch
0001c708 g       .text	00000012 .hidden __tablejump2__
00011a18 g     F .text	00000126 gpib_trace_task
00800142 g     O .data	00000001 Stat
0000f52e g     F .text	00000090 unix_time_to_fat
000047d4 g       .text	00000000 __ctors_start
0000624e g     F .text	0000003e LCD_setFastBacklightRGB
0000d7f8 g     F .text	0000013a mmc_disk_initialize
00801a00 g     O .bss	00000004 __tzone
0000e282 g     F .text	00000026 get_fattime
0000f89c g     F .text	00000038 fread
00018b3e g     F .text	00000010 lif_dir_clear
000169ca g     F .text	00000052 amigo_increment
000121ae g     F .text	00000122 GPIB_LISTEN
008001c3 g     O .data	00000002 debuglevel
008017ca g     O .bss	00000002 _mmc_timeout
000047e0 g       .text	0000001a .hidden __do_copy_data
008001d1 g     O .data	00000074 faults
0000fd1c g     F .text	000000d4 posix_fopen_modes_to_open
000125a8 g     F .text	0000003e B2V_MSB
00018960 g     F .text	0000000e lif_BIN2BCD
0001cc9a g     F .text	00000036 __fp_mintl
0001c8ee g     F .text	00000008 __cmpsf2
0001c7fe g       .text	0000000e .hidden __xload_1
00007186 g     F .text	0000005c gettimeofday
0001cb0a g     F .text	0000000e __fp_pscB
0001cb4a g       .text	00000000 __fp_splitA
00018aa8 g     F .text	0000003c lif_ctime_gmt
00018258 g     F .text	000000a2 lif_read
0000fdf0 g     F .text	00000018 fopen
0080170e g       .bss	00000000 __bss_start
00007b64 g     F .text	000000aa asctime_r
00007314 g     F .text	00000008 localtime
0001d130 g     F .text	0000000e memset
00017224 g     F .text	00000108 amigo_todo
00012b7a g     F .text	00000032 push_state
000078ee g     F .text	00000042 setdate
0001c256 g     F .text	000003b2 main
00005a2c g     F .text	00000018 TWI_Init
00012392 g     F .text	00000002 talk_cleanup
00005e28 g     F .text	000000c8 rtc_run
0000f66e g     F .text	00000036 ftell
00801e84 g     O .bss	00000001 talking
0000bf14 g     F .text	00000100 f_sync
008018ff g     O .bss	00000002 AMIGOs
0001c8ee g       .text	00000000 __ltsf2
00005802 g     F .text	00000004 uart_keyhit
00012b32 g     F .text	00000048 init_Devices
00004812  w      .text	00000000 __vector_4
000193f0 g     F .text	0000004c lif_close_volume
0000dfd8 g     F .text	0000000a mmc_spi_init
0001950c g     F .text	000000ce lif_readdirindex
00005a4c g     F .text	000000c0 TWI_StartTransmission
00017354 g     F .text	000005c8 Amigo_Command
0000fb44 g     F .text	00000010 fclose
0000ee24 g     F .text	0000000c getchar
0001690e g     F .text	000000bc amigo_send_status
000166f4 g     F .text	00000088 amigo_init
00800143 g     O .data	0000004a sys_errlist
000071e2 g     F .text	00000042 time
0000f1b6 g     F .text	0000003c opendir
0001ccd0 g     F .text	0000001c __fp_mpack
000128c0 g     F .text	000000f4 SS80_Set_Defaults
00007162 g     F .text	00000024 settimezone
0000b568 g     F .text	00000078 f_mount
0000e3d0 g     F .text	000002f4 fatfs_status
00007f5a g     F .text	0000001a pch_init
00011990 g     F .text	0000001e AMIGO_is_MTA
0001c6f8 g       .text	00000010 .hidden __negsi2
0000c8e0 g     F .text	000000e2 f_opendir
00015b98 g     F .text	0000003e Clear_Common
0001c086 g     F .text	00000042 help
00010ce0 g     F .text	0000006c gpib_enable_PPR
00016a72 g     F .text	00000138 amigo_verify
0001cb94 g     F .text	00000004 __mulsf3
000067ea g     F .text	00000086 get_token
00016798 g     F .text	000000ba amigo_request_status
00013c36 g     F .text	0000020a display_Addresses
0000f644 g     F .text	0000002a fileno_to_fatfs
0000d4fe g     F .text	0000002a ff_oem2uni
0000651e  w    F .text	0000001a strcmp
00010c86 g     F .text	0000005a gpib_state_init
00000000  w      *ABS*	00000000 __heap_end
00010b86 g     F .text	0000004c gpib_timer_task
00005394 g     F .text	0000005a delayus
00012bac g     F .text	0000002e pop_state
00004812  w      .text	00000000 __vector_9
0000f05a g     F .text	0000004a getcwd
00004812  w      .text	00000000 __vector_2
000066d6 g     F .text	00000028 MATCHI
0001732c g     F .text	00000028 amigo_check_unit
0001c848 g     F .text	000000c6 __addsf3x
00000400 g       *ABS*	00000000 __USER_SIGNATURE_REGION_LENGTH__
0000c368 g     F .text	00000578 f_lseek
0000ecba g     F .text	000000ac fgetc
00801e85 g     O .bss	00000001 secondary
00008dd4 g     F .text	0000004c vsnprintf_P
00007c16 g     F .text	00000022 ctime_gm
0001cb8c g     F .text	00000008 __gesf2
00014702 g     F .text	000000fc hpdir_init
00016852 g     F .text	000000bc amigo_send_logical_address
00015168 g     F .text	00000052 SS80_Check_Unit
0001187e g     F .text	0000009a gpib_file_init
0080010a g     O .data	00000001 _cs_pin
00006116 g     F .text	00000028 I2C_Start
008018fb g     O .bss	00000002 gpib_log_fp
00004812  w      .text	00000000 __vector_21
00004812  w      .text	00000000 __vector_15
0000614e g     F .text	00000022 I2C_Send
00008274 g     F .text	000002b8 p_etoa
00016014 g     F .text	000002c4 SS80_locate_and_read
000123d6 g     F .text	00000180 gpib_tests
00801c4f g     O .bss	00000002 AccDirs
0000d492 g     F .text	00000006 ff_memfree
00801907 g     O .bss	00000002 PRINTERp
0001cafc g     F .text	0000000e __fp_pscA
0001c626 g       .text	00000018 .hidden __udivmodqi4
00801e86 g     O .bss	00000001 listening
00011b3e g     F .text	0000011a gpib_error_test
00801903 g     O .bss	00000002 SS80s
0000ca74 g     F .text	0000007c f_stat
00010c2c g     F .text	0000005a gpib_bus_init
0000ed66 g     F .text	000000a4 fputc
00004812  w      .text	00000000 __vector_29
000057ee g     F .text	00000014 uart0_putchar
00008e70 g     F .text	0000003a printf_P
0001c768 g       .text	00000006 .hidden __mulohisi3
000162d8 g     F .text	000000b4 SS80_Execute_State
000076ac g     F .text	00000008 timegm
00015208 g     F .text	000004e8 SS80_Command_State
00007144 g     F .text	0000001e gettimezone
00802146 g       .comment	00000000 __heap_start
00006626 g     F .text	00000020 trim_tail
00010e96 g     F .text	000002de gpib_write_byte
00017cdc g     F .text	000000b0 printer_close
00018ee8 g     F .text	000001b6 lif_check_volume
0000727c g     F .text	00000098 localtime_r
00801c51 g     O .bss	00000002 AccFiles
0000603e g     F .text	000000d8 rtc_read
000047d4 g       .text	00000000 __dtors_start
00010be6 g     F .text	00000046 gpib_bus_read_init
000047d4 g       .text	00000000 __ctors_end
0001c6d0 g       .text	00000028 .hidden __divmodsi4
00010e52 g     F .text	0000000c gpib_bus_read
0000f416 g     F .text	00000118 stat
000040ff  w      *ABS*	00000000 __stack
0000f8d4 g     F .text	00000066 syncfs
0001807c g     F .text	0000006c lif_calloc
0000fa40 g     F .text	00000038 fwrite
00011d00 g     F .text	000000c0 Send_Identify
008017c4 g     O .bss	00000002 _mmc_pre
0000e008 g     F .text	00000006 mmc_spi_TXRX
0080170e g       .data	00000000 _edata
00005b70 g     F .text	00000082 TWI_ReadPacket
0000d2a2 g     F .text	000000b2 f_utime
00013e40 g     F .text	0000061c display_Config
0001c746 g       .text	00000008 .hidden __usmulhisi3_tail
00802146 g       .comment	00000000 _end
00005b34 g     F .text	0000003c TWI_ReceiveByte
000181ee g     F .text	0000006a lif_seek_msg
00005090 g     F .text	00000090 spi_begin
00017d8c g     F .text	00000146 printer_open
0000bbe6 g     F .text	0000032e f_write
00004812  w      .text	00000000 __vector_8
0001a704 g     F .text	000000c2 lif_find_file
00005c4e g     F .text	000001ba __vector_26
00007e48 g     F .text	00000112 bin2num
0001c914 g       .text	00000000 __divsf3_pse
0001bfb6 g     F .text	000000d0 delay_tests
00800106 g     O .data	00000004 _spi_clock
00801901 g     O .bss	00000002 AMIGOp
0000dffc g     F .text	00000006 mmc_spi_TX_buffer
0000b5e0 g     F .text	00000370 f_open
00018574 g     F .text	00000130 lif_vol2str
0000d624 g     F .text	00000020 disk_write
00010304 g     F .text	00000226 ls
0001d210  w      .text	00000000 .hidden exit
000122d0 g     F .text	000000c2 gpib_task
0001ca28 g     F .text	0000007a __floatunsisf
00006bd0 g     F .text	00000082 subtract_timespec
0001c666 g       .text	00000000 .hidden _div
0001791c g     F .text	000001b6 Amigo_Execute
00006504  w    F .text	0000001a strupper
00802144 g     O .bss	00000002 __flp
0001c68c g       .text	00000044 .hidden __udivmodsi4
000119ea g     F .text	0000001e PRINTER_is_MTA
00019ea6 g     F .text	000002c0 lif_newdir
00014838 g     F .text	0000038c hpdir_find_drive
000119cc g     F .text	0000001e PRINTER_is_MLA
00008fa2 g     F .text	0000000e atoi
00006f48 g     F .text	000001bc time_to_tm
0000e2a8 g     F .text	0000002a put_rc
0080010b g     O .data	00000002 LCD_ok
0000ef02 g     F .text	00000038 fileno
00800118 g     O .data	0000001a __Month
00005954 g     F .text	0000005a SPI0_Init
0000cdfe g     F .text	000001e0 f_mkdir
0001c9d0 g     F .text	00000058 __fixunssfsi
0080208e g     O .bss	000000b4 hpdir
000076b4 g     F .text	0000023a setdate_r
00006682 g     F .text	00000054 MATCHARGS
00005028 g     F .text	00000004 spi_TX_buffer
0000613e g     F .text	00000010 I2C_Stop
00010000 g       *ABS*	00000000 __EEPROM_REGION_LENGTH__
0001d210 g       .text	00000000 .hidden _exit
000182fa g     F .text	000000c2 lif_write
000184c0 g     F .text	0000003a lif_S2B
00801e87 g     O .bss	00000001 talking_last
00010918 g     F .text	0000003a dbf_read
00005e16 g     F .text	00000012 BCDtoBIN
0000731c g     F .text	00000390 normalize
0000712e g     F .text	00000016 gmtime
00004812  w      .text	00000000 __vector_14
0000e9fe g     F .text	00000120 fatfs_tests
0001bb72 g     F .text	0000010e lif_create_image
0000d604 g     F .text	00000020 disk_read
0000fbde g     F .text	0000013e open
00006450  w    F .text	0000001a toupper
000157da g     F .text	00000324 SS80_locate_and_write
000085b0 g     F .text	00000824 _printf_fn
00004812  w      .text	00000000 __vector_10
000108b6 g     F .text	0000001c ppr_bit_clr
00801c55 g     O .bss	00000020 __iob
0000d354 g     F .text	00000138 f_getlabel
000186a4 g     F .text	00000110 lif_str2vol
00006194 g     F .text	00000026 LCD_command
0000caf0 g     F .text	000001c0 f_getfree
0000eea4 g     F .text	00000030 fputs
00004812  w      .text	00000000 __vector_16
000066fe g     F .text	00000034 MATCHI_LEN
00800100 g       .data	00000000 __data_start
00005292 g     F .text	00000054 safecalloc
0000ef3a g     F .text	0000002a fileno_to_stream
000156f0 g     F .text	000000ea SS80_cmd_seek
0000f180 g     F .text	00000036 closedir
00004812  w      .text	00000000 __vector_18
00000003 g       *ABS*	00000000 __FUSE_REGION_LENGTH__
00014dd4 g     F .text	000000b8 SS80VolumePack
0000d938 g     F .text	0000008c mmc_disk_read
0000e982 g     F .text	0000007c mmc_test
00020000 g       *ABS*	00000000 __TEXT_REGION_LENGTH__
000181a4 g     F .text	0000004a lif_stat
00005760 g     F .text	00000006 uart_rx_byte
00015fa0 g     F .text	00000074 SS80_error_return
00800104 g     O .data	00000002 __malloc_margin
000056a8 g     F .text	00000054 __vector_20
0000f0a4 g     F .text	0000005c mkdir
000057ca g     F .text	00000024 uart_putchar
0001052a g     F .text	000002e4 posix_tests
00801e88 g     O .bss	00000002 gpib_unread_data
0000fae2 g     F .text	00000062 close
0001c826 g       .text	00000000 __addsf3
0001c790 g       .text	00000038 .hidden __prologue_saves__
00011972 g     F .text	0000001e AMIGO_is_MLA
0000e01c g     F .text	00000048 mmc_test_timeout
0001ae6e g     F .text	0000055e lif_extract_e010_as_ascii
00004816 g     F .text	0000074c vfprintf
00016a1c g     F .text	00000056 amigo_seek
00010e7e g     F .text	00000018 gpib_handshake_pin_read
00006d82 g     F .text	00000028 enable_timers
0000e3b2 g     F .text	0000001e fatfs_fstype
0001257e g     F .text	0000002a V2B_LSB
00010952 g     F .text	0000003a dbf_write
00801905 g     O .bss	00000002 SS80p
008018fd g     O .bss	00000002 lines
0000d48c g     F .text	00000006 ff_memalloc
0001ce50 g     F .text	00000112 free
0001cb80 g       .text	00000000 __fp_szero
00005766 g     F .text	00000032 uart_tx_byte
0001c764 g       .text	00000004 .hidden __mulshisi3



Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ea 23 	jmp	0x47d4	; 0x47d4 <__ctors_end>
       4:	0c 94 09 24 	jmp	0x4812	; 0x4812 <__bad_interrupt>
       8:	0c 94 09 24 	jmp	0x4812	; 0x4812 <__bad_interrupt>
       c:	0c 94 09 24 	jmp	0x4812	; 0x4812 <__bad_interrupt>
      10:	0c 94 09 24 	jmp	0x4812	; 0x4812 <__bad_interrupt>
      14:	0c 94 09 24 	jmp	0x4812	; 0x4812 <__bad_interrupt>
      18:	0c 94 09 24 	jmp	0x4812	; 0x4812 <__bad_interrupt>
      1c:	0c 94 09 24 	jmp	0x4812	; 0x4812 <__bad_interrupt>
      20:	0c 94 09 24 	jmp	0x4812	; 0x4812 <__bad_interrupt>
      24:	0c 94 09 24 	jmp	0x4812	; 0x4812 <__bad_interrupt>
      28:	0c 94 09 24 	jmp	0x4812	; 0x4812 <__bad_interrupt>
      2c:	0c 94 09 24 	jmp	0x4812	; 0x4812 <__bad_interrupt>
      30:	0c 94 09 24 	jmp	0x4812	; 0x4812 <__bad_interrupt>
      34:	0c 94 8b 34 	jmp	0x6916	; 0x6916 <__vector_13>
      38:	0c 94 09 24 	jmp	0x4812	; 0x4812 <__bad_interrupt>
      3c:	0c 94 09 24 	jmp	0x4812	; 0x4812 <__bad_interrupt>
      40:	0c 94 09 24 	jmp	0x4812	; 0x4812 <__bad_interrupt>
      44:	0c 94 09 24 	jmp	0x4812	; 0x4812 <__bad_interrupt>
      48:	0c 94 09 24 	jmp	0x4812	; 0x4812 <__bad_interrupt>
      4c:	0c 94 09 24 	jmp	0x4812	; 0x4812 <__bad_interrupt>
      50:	0c 94 54 2b 	jmp	0x56a8	; 0x56a8 <__vector_20>
      54:	0c 94 09 24 	jmp	0x4812	; 0x4812 <__bad_interrupt>
      58:	0c 94 09 24 	jmp	0x4812	; 0x4812 <__bad_interrupt>
      5c:	0c 94 09 24 	jmp	0x4812	; 0x4812 <__bad_interrupt>
      60:	0c 94 09 24 	jmp	0x4812	; 0x4812 <__bad_interrupt>
      64:	0c 94 09 24 	jmp	0x4812	; 0x4812 <__bad_interrupt>
      68:	0c 94 27 2e 	jmp	0x5c4e	; 0x5c4e <__vector_26>
      6c:	0c 94 09 24 	jmp	0x4812	; 0x4812 <__bad_interrupt>
      70:	0c 94 09 24 	jmp	0x4812	; 0x4812 <__bad_interrupt>
      74:	0c 94 09 24 	jmp	0x4812	; 0x4812 <__bad_interrupt>
      78:	0c 94 09 24 	jmp	0x4812	; 0x4812 <__bad_interrupt>
      7c:	0c 94 09 24 	jmp	0x4812	; 0x4812 <__bad_interrupt>
      80:	0c 94 09 24 	jmp	0x4812	; 0x4812 <__bad_interrupt>
      84:	0c 94 09 24 	jmp	0x4812	; 0x4812 <__bad_interrupt>
      88:	0c 94 09 24 	jmp	0x4812	; 0x4812 <__bad_interrupt>
      8c:	51 44       	sbci	r21, 0x41	; 65
      8e:	a4 45       	sbci	r26, 0x54	; 84
      90:	81 44       	sbci	r24, 0x41	; 65
      92:	7d 45       	sbci	r23, 0x5D	; 93
      94:	7d 45       	sbci	r23, 0x5D	; 93
      96:	a4 45       	sbci	r26, 0x54	; 84
      98:	a4 45       	sbci	r26, 0x54	; 84
      9a:	a4 45       	sbci	r26, 0x54	; 84
      9c:	a4 45       	sbci	r26, 0x54	; 84
      9e:	a4 45       	sbci	r26, 0x54	; 84
      a0:	a4 45       	sbci	r26, 0x54	; 84
      a2:	a4 45       	sbci	r26, 0x54	; 84
      a4:	a4 45       	sbci	r26, 0x54	; 84
      a6:	51 44       	sbci	r21, 0x41	; 65
      a8:	4b 44       	sbci	r20, 0x4B	; 75
      aa:	a4 45       	sbci	r26, 0x54	; 84
      ac:	a4 45       	sbci	r26, 0x54	; 84
      ae:	a4 45       	sbci	r26, 0x54	; 84
      b0:	a4 45       	sbci	r26, 0x54	; 84
      b2:	7b 44       	sbci	r23, 0x4B	; 75
      b4:	a4 45       	sbci	r26, 0x54	; 84
      b6:	a4 45       	sbci	r26, 0x54	; 84
      b8:	51 44       	sbci	r21, 0x41	; 65
      ba:	a4 45       	sbci	r26, 0x54	; 84
      bc:	a4 45       	sbci	r26, 0x54	; 84
      be:	a4 45       	sbci	r26, 0x54	; 84
      c0:	a4 45       	sbci	r26, 0x54	; 84
      c2:	a4 45       	sbci	r26, 0x54	; 84
      c4:	a4 45       	sbci	r26, 0x54	; 84
      c6:	a4 45       	sbci	r26, 0x54	; 84
      c8:	a4 45       	sbci	r26, 0x54	; 84
      ca:	a4 45       	sbci	r26, 0x54	; 84
      cc:	51 44       	sbci	r21, 0x41	; 65
      ce:	9f 45       	sbci	r25, 0x5F	; 95
      d0:	81 44       	sbci	r24, 0x41	; 65
      d2:	7d 45       	sbci	r23, 0x5D	; 93
      d4:	7d 45       	sbci	r23, 0x5D	; 93
      d6:	a4 45       	sbci	r26, 0x54	; 84
      d8:	a4 45       	sbci	r26, 0x54	; 84
      da:	a4 45       	sbci	r26, 0x54	; 84
      dc:	a4 45       	sbci	r26, 0x54	; 84
      de:	a4 45       	sbci	r26, 0x54	; 84
      e0:	a4 45       	sbci	r26, 0x54	; 84
      e2:	a4 45       	sbci	r26, 0x54	; 84
      e4:	a4 45       	sbci	r26, 0x54	; 84
      e6:	51 44       	sbci	r21, 0x41	; 65
      e8:	4b 44       	sbci	r20, 0x4B	; 75
      ea:	a4 45       	sbci	r26, 0x54	; 84
      ec:	a4 45       	sbci	r26, 0x54	; 84
      ee:	9a 45       	sbci	r25, 0x5A	; 90
      f0:	a4 45       	sbci	r26, 0x54	; 84
      f2:	7b 44       	sbci	r23, 0x4B	; 75
      f4:	a4 45       	sbci	r26, 0x54	; 84
      f6:	a4 45       	sbci	r26, 0x54	; 84
      f8:	51 44       	sbci	r21, 0x41	; 65
      fa:	c6 45       	sbci	r28, 0x56	; 86
      fc:	ad 46       	sbci	r26, 0x6D	; 109
      fe:	bc 45       	sbci	r27, 0x5C	; 92
     100:	1a 46       	sbci	r17, 0x6A	; 106
     102:	01 46       	sbci	r16, 0x61	; 97
     104:	ad 46       	sbci	r26, 0x6D	; 109
     106:	ad 46       	sbci	r26, 0x6D	; 109
     108:	ad 46       	sbci	r26, 0x6D	; 109
     10a:	ad 46       	sbci	r26, 0x6D	; 109
     10c:	ad 46       	sbci	r26, 0x6D	; 109
     10e:	ad 46       	sbci	r26, 0x6D	; 109
     110:	ad 46       	sbci	r26, 0x6D	; 109
     112:	ad 46       	sbci	r26, 0x6D	; 109
     114:	d0 45       	sbci	r29, 0x50	; 80
     116:	e4 45       	sbci	r30, 0x54	; 84
     118:	ad 46       	sbci	r26, 0x6D	; 109
     11a:	ad 46       	sbci	r26, 0x6D	; 109
     11c:	ad 46       	sbci	r26, 0x6D	; 109
     11e:	ad 46       	sbci	r26, 0x6D	; 109
     120:	b8 45       	sbci	r27, 0x58	; 88
     122:	ad 46       	sbci	r26, 0x6D	; 109
     124:	ad 46       	sbci	r26, 0x6D	; 109
     126:	e4 45       	sbci	r30, 0x54	; 84
     128:	ad 46       	sbci	r26, 0x6D	; 109
     12a:	ad 46       	sbci	r26, 0x6D	; 109
     12c:	ad 46       	sbci	r26, 0x6D	; 109
     12e:	ad 46       	sbci	r26, 0x6D	; 109
     130:	ad 46       	sbci	r26, 0x6D	; 109
     132:	ad 46       	sbci	r26, 0x6D	; 109
     134:	ad 46       	sbci	r26, 0x6D	; 109
     136:	ad 46       	sbci	r26, 0x6D	; 109
     138:	ad 46       	sbci	r26, 0x6D	; 109
     13a:	c6 45       	sbci	r28, 0x56	; 86
     13c:	48 46       	sbci	r20, 0x68	; 104
     13e:	bc 45       	sbci	r27, 0x5C	; 92
     140:	1a 46       	sbci	r17, 0x6A	; 106
     142:	01 46       	sbci	r16, 0x61	; 97
     144:	ad 46       	sbci	r26, 0x6D	; 109
     146:	ad 46       	sbci	r26, 0x6D	; 109
     148:	ad 46       	sbci	r26, 0x6D	; 109
     14a:	ad 46       	sbci	r26, 0x6D	; 109
     14c:	ad 46       	sbci	r26, 0x6D	; 109
     14e:	ad 46       	sbci	r26, 0x6D	; 109
     150:	ad 46       	sbci	r26, 0x6D	; 109
     152:	ad 46       	sbci	r26, 0x6D	; 109
     154:	d0 45       	sbci	r29, 0x50	; 80
     156:	e4 45       	sbci	r30, 0x54	; 84
     158:	ad 46       	sbci	r26, 0x6D	; 109
     15a:	ad 46       	sbci	r26, 0x6D	; 109
     15c:	48 46       	sbci	r20, 0x68	; 104
     15e:	ad 46       	sbci	r26, 0x6D	; 109
     160:	b8 45       	sbci	r27, 0x58	; 88
     162:	ad 46       	sbci	r26, 0x6D	; 109
     164:	ad 46       	sbci	r26, 0x6D	; 109
     166:	e4 45       	sbci	r30, 0x54	; 84
     168:	c4 6a       	ori	r28, 0xA4	; 164
     16a:	ce 6a       	ori	r28, 0xAE	; 174
     16c:	d6 6a       	ori	r29, 0xA6	; 166
     16e:	d9 6a       	ori	r29, 0xA9	; 169
     170:	dc 6a       	ori	r29, 0xAC	; 172
     172:	df 6a       	ori	r29, 0xAF	; 175
     174:	e2 6a       	ori	r30, 0xA2	; 162
     176:	e5 6a       	ori	r30, 0xA5	; 165
     178:	e8 6a       	ori	r30, 0xA8	; 168
     17a:	9e 87       	std	Y+14, r25	; 0x0e
     17c:	c7 87       	std	Z+15, r28	; 0x0f
     17e:	ee 87       	std	Y+14, r30	; 0x0e
     180:	08 88       	ldd	r0, Y+16	; 0x10
     182:	11 88       	ldd	r1, Z+17	; 0x11
     184:	33 88       	ldd	r3, Z+19	; 0x13
     186:	4e 88       	ldd	r4, Y+22	; 0x16
     188:	5d 88       	ldd	r5, Y+21	; 0x15
     18a:	a5 88       	ldd	r10, Z+21	; 0x15
     18c:	79 88       	ldd	r7, Y+17	; 0x11
     18e:	8e 8a       	std	Y+22, r8	; 0x16
     190:	96 8a       	std	Z+22, r9	; 0x16
     192:	9b 8a       	std	Y+19, r9	; 0x13
     194:	bf 8a       	std	Y+23, r11	; 0x17
     196:	c9 8a       	std	Y+17, r12	; 0x11
     198:	13 8b       	std	Z+19, r17	; 0x13
     19a:	de 8a       	std	Y+22, r13	; 0x16
     19c:	de 8a       	std	Y+22, r13	; 0x16
     19e:	d6 8a       	std	Z+22, r13	; 0x16
     1a0:	39 98       	cbi	0x07, 1	; 7
     1a2:	5b 99       	sbic	0x0b, 3	; 11
     1a4:	bb 99       	sbic	0x17, 3	; 23
     1a6:	29 9a       	sbi	0x05, 1	; 5
     1a8:	3f 9a       	sbi	0x07, 7	; 7
     1aa:	6a 9a       	sbi	0x0d, 2	; 13
     1ac:	4f 9b       	sbis	0x09, 7	; 9
     1ae:	0c 9d       	mul	r16, r12
     1b0:	0c 9d       	mul	r16, r12
     1b2:	0c 9d       	mul	r16, r12
     1b4:	97 9b       	sbis	0x12, 7	; 18
     1b6:	cb 9b       	sbis	0x19, 3	; 25
     1b8:	73 9c       	mul	r7, r3
     1ba:	95 9c       	mul	r9, r5
     1bc:	fb 98       	cbi	0x1f, 3	; 31
     1be:	16 99       	sbic	0x02, 6	; 2
     1c0:	61 bd       	out	0x21, r22	; 33
     1c2:	20 bd       	out	0x20, r18	; 32
     1c4:	20 bd       	out	0x20, r18	; 32
     1c6:	20 bd       	out	0x20, r18	; 32
     1c8:	20 bd       	out	0x20, r18	; 32
     1ca:	e4 bc       	out	0x24, r14	; 36
     1cc:	eb bc       	out	0x2b, r14	; 43
     1ce:	f2 bc       	out	0x22, r15	; 34
     1d0:	02 bd       	out	0x22, r16	; 34
     1d2:	10 bd       	out	0x20, r17	; 32
     1d4:	09 bd       	out	0x29, r16	; 41

000001d6 <__trampolines_end>:
     1d6:	6e 61       	ori	r22, 0x1E	; 30
     1d8:	6e 00       	.word	0x006e	; ????

000001da <__c.2332>:
     1da:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1ea:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1fa:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     20a:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     21a:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     22a:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     23a:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     24a:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     25a:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     26a:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     27a:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     28a:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     29a:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2aa:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2ba:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     2ca:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000002d8 <__c.3740>:
     2d8:	63 73 5f 64 69 73 61 62 6c 65 20 77 61 73 3a 20     cs_disable was: 
     2e8:	25 64 2c 20 77 61 6e 74 3a 20 25 64 0a 00           %d, want: %d..

000002f6 <__c.3735>:
     2f6:	63 73 5f 65 6e 61 62 6c 65 20 77 61 73 3a 20 25     cs_enable was: %
     306:	64 2c 20 77 61 6e 74 3a 20 25 64 0a 00              d, want: %d..

00000313 <__c.3766>:
     313:	73 61 66 65 66 72 65 65 3a 20 46 52 45 45 20 45     safefree: FREE E
     323:	52 52 4f 52 20 28 25 75 29 2c 20 74 6f 70 3a 28     RROR (%u), top:(
     333:	25 75 29 0a 00                                      %u)..

00000338 <__c.3757>:
     338:	73 61 66 65 6d 61 6c 6c 6f 63 28 25 64 29 20 66     safemalloc(%d) f
     348:	61 69 6c 65 64 21 0a 00                             ailed!..

00000350 <__c.3751>:
     350:	73 61 66 65 63 61 6c 6c 6f 63 28 25 64 2c 25 64     safecalloc(%d,%d
     360:	29 20 66 61 69 6c 65 64 21 0a 00                    ) failed!..

0000036b <__c.3736>:
     36b:	20 20 5f 5f 62 72 6b 76 61 6c 3a 20 20 20 20 25       __brkval:    %
     37b:	35 75 0a 00                                         5u..

0000037f <__c.3734>:
     37f:	20 20 4d 61 6c 6c 6f 63 20 73 74 61 72 74 20 25       Malloc start %
     38f:	35 75 20 20 65 6e 64 3a 20 25 35 75 0a 00           5u  end: %5u..

0000039d <__c.3732>:
     39d:	20 20 48 65 61 70 3a 20 73 74 61 72 74 3a 20 25       Heap: start: %
     3ad:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000003bb <__c.3730>:
     3bb:	20 20 44 61 74 61 20 20 73 74 61 72 74 3a 20 25       Data  start: %
     3cb:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000003d9 <__c.3728>:
     3d9:	20 20 42 53 53 20 20 20 73 74 61 72 74 3a 20 25       BSS   start: %
     3e9:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000003f7 <__c.3726>:
     3f7:	20 20 53 74 61 63 6b 20 46 72 65 65 3a 20 20 25       Stack Free:  %
     407:	75 0a 00                                            u..

0000040a <__c.3724>:
     40a:	20 20 53 74 61 63 6b 20 54 6f 70 3a 20 20 20 25       Stack Top:   %
     41a:	75 0a 00                                            u..

0000041d <__c.3722>:
     41d:	46 72 65 65 20 52 61 6d 3a 25 75 0a 00              Free Ram:%u..

0000042a <__c.3720>:
     42a:	53 50 49 30 5f 4d 6f 64 65 3a 20 49 6e 76 61 6c     SPI0_Mode: Inval
     43a:	69 64 20 6d 6f 64 65 28 25 64 29 0a 00              id mode(%d)..

00000447 <__c.3744>:
     447:	72 74 63 5f 72 65 61 64 20 65 72 72 6f 72 0a 00     rtc_read error..

00000457 <__c.3737>:
     457:	72 74 63 5f 77 72 69 74 65 20 65 72 72 6f 72 0a     rtc_write error.
	...

00000468 <__c.3730>:
     468:	72 74 63 5f 69 6e 69 74 20 20 77 72 69 74 65 20     rtc_init  write 
     478:	65 70 6f 63 68 20 66 61 69 6c 65 64 0a 00           epoch failed..

00000486 <__c.3722>:
     486:	72 74 63 5f 72 75 6e 20 2d 20 77 72 69 74 65 20     rtc_run - write 
     496:	73 74 61 74 75 73 20 65 72 72 6f 72 0a 00           status error..

000004a4 <__c.3720>:
     4a4:	72 74 63 5f 72 75 6e 20 72 65 61 64 20 73 74 61     rtc_run read sta
     4b4:	74 75 73 20 65 72 72 6f 72 0a 00                    tus error..

000004bf <__c.3747>:
     4bf:	25 73 20 65 78 70 65 63 74 65 64 20 25 64 20 61     %s expected %d a
     4cf:	72 67 75 6d 65 6e 74 73 20 6f 6e 6c 79 20 67 6f     rguments only go
     4df:	74 20 25 64 0a 00                                   t %d..

000004e5 <__c.3704>:
     4e5:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     4f5:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000505 <__c.3783>:
     505:	54 69 6d 65 72 73 20 65 6e 61 62 6c 65 64 0a 00     Timers enabled..

00000515 <__c.3781>:
     515:	43 6c 6f 63 6b 20 49 6e 73 74 61 6c 6c 65 64 0a     Clock Installed.
	...

00000526 <__c.3779>:
     526:	43 6c 6f 63 6b 20 74 61 73 6b 20 69 6e 69 74 20     Clock task init 
     536:	66 61 69 6c 65 64 0a 00                             failed..

0000053e <__c.3777>:
     53e:	43 6c 6f 63 6b 20 49 6e 69 74 0a 00                 Clock Init..

0000054a <__c.3775>:
     54a:	54 69 6d 65 72 73 20 63 6f 6e 66 69 67 75 72 65     Timers configure
     55a:	64 0a 00                                            d..

0000055d <__c.3773>:
     55d:	54 69 6d 65 72 73 20 69 6e 69 74 20 63 61 6c 6c     Timers init call
     56d:	65 64 0a 00                                         ed..

00000571 <__c.3753>:
     571:	5b 54 69 6d 65 3a 25 73 5d 0a 00                    [Time:%s]..

0000057c <__c.3751>:
     57c:	5b 25 73 20 54 69 6d 65 3a 25 73 5d 0a 00           [%s Time:%s]..

0000058a <__c.3737>:
     58a:	25 6c 64 2e 25 30 39 6c 64 00                       %ld.%09ld.

00000594 <__c.3717>:
     594:	73 65 74 5f 74 69 6d 65 72 73 3a 20 4e 6f 20 6d     set_timers: No m
     5a4:	6f 72 65 20 74 69 6d 65 72 73 21 0a 00              ore timers!..

000005b1 <__c.3992>:
     5b1:	63 6c 6b 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     clk time:    %s.
	...

000005c2 <__c.3990>:
     5c2:	63 6c 6b 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     clk seconds: %lu
     5d2:	0a 00                                               ..

000005d4 <__c.3988>:
     5d4:	52 54 43 20 72 65 61 64 20 66 61 69 6c 65 64 0a     RTC read failed.
	...

000005e5 <__c.3986>:
     5e5:	72 74 63 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     rtc time:    %s.
	...

000005f6 <__c.3984>:
     5f6:	72 74 63 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     rtc seconds: %lu
     606:	0a 00                                               ..

00000608 <__c.3977>:
     608:	75 73 65 20 73 65 74 64 61 74 65 20 63 6f 6d 6d     use setdate comm
     618:	61 6e 64 20 74 6f 20 63 68 61 6e 67 65 20 74 69     and to change ti
     628:	6d 65 0a 00                                         me..

0000062c <__c.3975>:
     62c:	72 74 63 20 72 65 61 64 20 65 72 72 6f 72 61 66     rtc read erroraf
     63c:	74 65 72 20 69 6e 69 74 0a 00                       ter init..

00000646 <__c.3973>:
     646:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     656:	61 69 6c 65 64 0a 00                                ailed..

0000065d <__c.3971>:
     65d:	61 74 74 65 6d 70 74 69 6e 67 20 72 74 63 20 69     attempting rtc i
     66d:	6e 69 74 0a 00                                      nit..

00000672 <__c.3969>:
     672:	72 74 63 20 75 6e 69 6e 69 74 69 6c 69 7a 65 64     rtc uninitilized
     682:	0a 00                                               ..

00000684 <__c.3923>:
     684:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     694:	61 69 6c 65 64 0a 00                                ailed..

0000069b <__c.3921>:
     69b:	69 6e 76 61 6c 69 64 20 6d 69 6e 3a 20 25 64 0a     invalid min: %d.
	...

000006ac <__c.3919>:
     6ac:	69 6e 76 61 6c 69 64 20 68 6f 75 72 3a 20 25 64     invalid hour: %d
     6bc:	0a 00                                               ..

000006be <__c.3917>:
     6be:	69 6e 76 61 6c 69 64 20 64 61 79 3a 20 25 64 0a     invalid day: %d.
	...

000006cf <__c.3915>:
     6cf:	69 6e 76 61 6c 69 64 20 6d 6f 6e 3a 20 25 64 0a     invalid mon: %d.
	...

000006e0 <__c.3913>:
     6e0:	69 6e 76 61 6c 69 64 20 79 65 61 72 3a 20 25 64     invalid year: %d
     6f0:	0a 00                                               ..

000006f2 <__c.3892>:
     6f2:	45 6e 74 65 72 20 64 61 74 65 20 59 59 59 59 20     Enter date YYYY 
     702:	4d 4d 20 44 44 20 48 48 3a 4d 4d 3a 53 53 20 3e     MM DD HH:MM:SS >
	...

00000713 <__c.3767>:
     713:	25 73 20 25 73 20 25 32 64 20 25 30 32 64 3a 25     %s %s %2d %02d:%
     723:	30 32 64 3a 25 30 32 64 20 25 34 64 00              02d:%02d %4d.

00000730 <__c.3735>:
     730:	73 65 6c 65 63 74 20 66 61 69 6c 65 64 21 0a 00     select failed!..

00000740 <__c.3764>:
     740:	45 4e 44 20 4d 4d 43 20 49 4e 49 54 0a 00           END MMC INIT..

0000074e <__c.3762>:
     74e:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 3a 20     MMC Block Size: 
     75e:	25 6c 64 0a 00                                      %ld..

00000763 <__c.3760>:
     763:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 20 2d     MMC Block Size -
     773:	20 72 65 61 64 20 66 61 69 6c 65 64 0a 00            read failed..

00000781 <__c.3757>:
     781:	2c 20 43 6f 64 65 20 70 61 67 65 3a 20 25 75 0a     , Code page: %u.
	...

00000792 <__c.3755>:
     792:	4c 46 4e 20 45 6e 61 62 6c 65 64 00                 LFN Enabled.

0000079e <__c.3753>:
     79e:	53 54 41 52 54 20 4d 4d 43 20 49 4e 49 54 0a 00     START MMC INIT..

000007ae <__c.3740>:
     7ae:	4d 4d 43 20 54 49 4d 45 4f 55 54 0a 00              MMC TIMEOUT..

000007bb <__c.3712>:
     7bb:	4d 4d 43 20 43 6c 6f 63 6b 20 74 61 73 6b 20 69     MMC Clock task i
     7cb:	6e 69 74 20 66 61 69 6c 65 64 0a 00                 nit failed..

000007d7 <__c.3784>:
     7d7:	0a 00                                               ..

000007d9 <__c.3782>:
     7d9:	25 73 20 25 75 2f 25 30 32 75 2f 25 30 32 75 20     %s %u/%02u/%02u 
     7e9:	25 30 32 75 3a 25 30 32 75 20 25 39 6c 75 20 25     %02u:%02u %9lu %
     7f9:	73 00                                               s.

000007fb <__c.3780>:
     7fb:	66 61 74 66 73 5f 66 69 6c 69 6e 66 6f 5f 6c 69     fatfs_filinfo_li
     80b:	73 74 3a 20 65 6d 70 74 79 0a 00                    st: empty..

00000816 <__c.3774>:
     816:	25 75 20 66 69 6c 65 73 2c 20 25 6c 75 20 62 79     %u files, %lu by
     826:	74 65 73 2e 0a 25 75 20 66 6f 6c 64 65 72 73 2e     tes..%u folders.
     836:	0a 25 6c 75 20 4b 42 20 74 6f 74 61 6c 20 64 69     .%lu KB total di
     846:	73 6b 20 73 70 61 63 65 2e 0a 25 6c 75 20 4b 42     sk space..%lu KB
     856:	20 61 76 61 69 6c 61 62 6c 65 2e 0a 00               available...

00000863 <__c.3772>:
     863:	56 6f 6c 75 6d 65 20 53 2f 4e 20 20 20 20 20 20     Volume S/N      
     873:	20 20 20 20 20 20 20 20 3d 20 25 30 34 58 2d 25             = %04X-%
     883:	30 34 58 0a 00                                      04X..

00000888 <__c.3770>:
     888:	56 6f 6c 75 6d 65 20 6e 61 6d 65 20 20 20 20 20     Volume name     
     898:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

000008a6 <__c.3768>:
     8a6:	44 61 74 61 20 73 74 61 72 74 20 28 6c 62 61 29     Data start (lba)
     8b6:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

000008c5 <__c.3766>:
     8c5:	44 49 52 20 73 74 61 72 74 20 28 6c 62 61 2c 63     DIR start (lba,c
     8d5:	6c 75 73 74 6f 72 29 20 3d 20 25 6c 75 0a 00        lustor) = %lu..

000008e4 <__c.3764>:
     8e4:	46 41 54 20 73 74 61 72 74 20 28 6c 62 61 29 20     FAT start (lba) 
     8f4:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000903 <__c.3762>:
     903:	4e 75 6d 62 65 72 20 6f 66 20 63 6c 75 73 74 65     Number of cluste
     913:	72 73 20 20 20 20 20 20 3d 20 25 6c 75 0a 00        rs      = %lu..

00000922 <__c.3760>:
     922:	53 65 63 74 6f 72 73 2f 46 41 54 20 20 20 20 20     Sectors/FAT     
     932:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000941 <__c.3758>:
     941:	52 6f 6f 74 20 44 49 52 20 65 6e 74 72 69 65 73     Root DIR entries
     951:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

0000095f <__c.3756>:
     95f:	4e 75 6d 62 65 72 20 6f 66 20 46 41 54 73 20 20     Number of FATs  
     96f:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

0000097d <__c.3754>:
     97d:	42 79 74 65 73 2f 43 6c 75 73 74 65 72 20 20 20     Bytes/Cluster   
     98d:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

0000099c <__c.3752>:
     99c:	46 41 54 20 74 79 70 65 20 20 20 20 20 20 20 20     FAT type        
     9ac:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

000009ba <__c.3750>:
     9ba:	66 61 74 66 73 20 73 74 61 74 75 73 3a 25 73 0a     fatfs status:%s.
	...

000009cb <__c.3714>:
     9cb:	72 63 3d 25 75 0a 00                                rc=%u..

000009d2 <__c.3752>:
     9d2:	2c 20 25 31 30 6c 75 4b 20 62 79 74 65 73 20 66     , %10luK bytes f
     9e2:	72 65 65 0a 00                                      ree..

000009e7 <__c.3750>:
     9e7:	25 34 75 20 46 69 6c 65 28 73 29 2c 25 31 30 6c     %4u File(s),%10l
     9f7:	75 20 62 79 74 65 73 20 74 6f 74 61 6c 0a 25 34     u bytes total.%4
     a07:	75 20 44 69 72 28 73 29 00                          u Dir(s).

00000a10 <__c.3746>:
     a10:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000a1e <__c.3733>:
     a1e:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     a2e:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000a3e <__c.3731>:
     a3e:	45 4e 44 20 4d 4d 43 20 54 45 53 54 0a 00           END MMC TEST..

00000a4c <__c.3729>:
     a4c:	4d 4d 43 20 44 69 72 65 63 74 6f 72 79 20 4c 69     MMC Directory Li
     a5c:	73 74 0a 00                                         st..

00000a60 <__c.3727>:
     a60:	53 54 41 52 54 20 4d 4d 43 20 54 45 53 54 0a 00     START MMC TEST..

00000a70 <__c.3725>:
     a70:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     a80:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000a90 <__c.3717>:
     a90:	69 6e 64 3a 25 64 2c 61 72 67 63 3a 25 64 0a 00     ind:%d,argc:%d..

00000aa0 <__c.3707>:
     aa0:	4e 6f 74 65 3a 20 66 61 74 66 73 20 74 65 73 74     Note: fatfs test
     ab0:	73 20 4d 55 53 54 20 73 74 61 72 74 20 77 69 74     s MUST start wit
     ac0:	68 20 22 66 61 74 66 73 22 20 6b 65 79 77 6f 72     h "fatfs" keywor
     ad0:	64 0a 66 61 74 66 73 20 68 65 6c 70 0a 66 61 74     d.fatfs help.fat
     ae0:	66 73 20 6d 6d 63 5f 74 65 73 74 0a 66 61 74 66     fs mmc_test.fatf
     af0:	73 20 6d 6d 63 5f 69 6e 69 74 0a 66 61 74 66 73     s mmc_init.fatfs
     b00:	20 6c 73 20 64 69 72 0a 66 61 74 66 73 20 73 74      ls dir.fatfs st
     b10:	61 74 75 73 20 66 69 6c 65 0a 0a 00                 atus file...

00000b1c <__c.3705>:
     b1c:	66 61 74 66 73 20 68 65 6c 70 0a 00                 fatfs help..

00000b28 <__c.4037>:
     b28:	25 73 0a 00                                         %s..

00000b2c <__c.4035>:
     b2c:	25 73 3a 20 25 73 0a 00                             %s: %s..

00000b34 <__c.3790>:
     b34:	53 65 65 6b 20 66 61 69 6c 65 64 00                 Seek failed.

00000b40 <__c.3719>:
     b40:	66 70 75 74 63 20 73 74 72 65 61 6d 2d 3e 70 75     fputc stream->pu
     b50:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000b58 <__c.3712>:
     b58:	66 67 65 74 63 20 73 74 72 65 61 6d 2d 3e 67 65     fgetc stream->ge
     b68:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000b70 <__c.3866>:
     b70:	46 69 6c 65 73 3a 20 25 64 0a 00                    Files: %d..

00000b7b <__c.3862>:
     b7b:	6e 61 6d 65 3a 5b 25 73 5d 20 74 6f 6f 20 6c 6f     name:[%s] too lo
     b8b:	6e 67 20 77 69 74 68 20 66 75 6c 6c 20 70 61 74     ng with full pat
     b9b:	68 0a 00                                            h..

00000b9e <__c.3859>:
     b9e:	6f 70 65 6e 64 69 72 20 66 61 69 6c 65 64 0a 00     opendir failed..

00000bae <__c.3854>:
     bae:	6c 73 3a 20 63 61 6e 6e 6f 74 20 73 74 61 74 20     ls: cannot stat 
     bbe:	5b 25 73 5d 0a 00                                   [%s]..

00000bc4 <__c.3852>:
     bc4:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000bd2 <__c.3850>:
     bd2:	6c 73 3a 20 43 61 6e 27 74 20 67 65 74 20 63 75     ls: Can't get cu
     be2:	72 72 65 6e 74 20 64 69 72 65 63 74 6f 72 79 0a     rrent directory.
	...

00000bf3 <__c.3837>:
     bf3:	25 73 20 6e 6f 6e 65 20 6e 6f 6e 65 20 25 31 32     %s none none %12
     c03:	6c 64 20 25 73 20 25 73 0a 00                       ld %s %s..

00000c0d <__c.3832>:
     c0d:	25 73 0a 00                                         %s..

00000c11 <__c.3830>:
     c11:	63 61 6e 20 6e 6f 74 20 73 74 61 74 3a 20 25 73     can not stat: %s
     c21:	0a 00                                               ..

00000c23 <__c.3818>:
     c23:	0d 00                                               ..

00000c25 <__c.3816>:
     c25:	4d 6f 72 65 2e 2e 00                                More...

00000c2c <__c.3806>:
     c2c:	25 6c 75 20 62 79 74 65 73 20 63 6f 70 69 65 64     %lu bytes copied
     c3c:	2e 0a 00                                            ...

00000c3f <__c.3802>:
     c3f:	43 6f 70 69 65 64 3a 20 25 30 38 6c 64 0d 00        Copied: %08ld..

00000c4e <__c.3799>:
     c4e:	57 72 69 74 65 20 65 72 72 6f 72 0a 00              Write error..

00000c5b <__c.3797>:
     c5b:	0a 43 6f 70 79 69 6e 67 2e 2e 2e 0a 00              .Copying.....

00000c68 <__c.3795>:
     c68:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000c78 <__c.3793>:
     c78:	43 72 65 61 74 69 6e 67 20 25 73 0a 00              Creating %s..

00000c85 <__c.3791>:
     c85:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000c95 <__c.3789>:
     c95:	4f 70 65 6e 69 6e 67 20 25 73 0a 00                 Opening %s..

00000ca1 <__c.3778>:
     ca1:	25 6c 64 20 62 79 74 65 73 0a 00                    %ld bytes..

00000cac <__c.3776>:
     cac:	0a 00                                               ..

00000cae <__c.3771>:
     cae:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000cbe <__c.3761>:
     cbe:	25 73 0a 00                                         %s..

00000cc2 <__c.3738>:
     cc2:	70 6f 73 69 78 20 70 72 65 66 69 78 20 69 73 20     posix prefix is 
     cd2:	6f 70 74 69 6f 6e 61 6c 0a 70 6f 73 69 78 20 63     optional.posix c
     ce2:	61 74 20 66 69 6c 65 20 5b 2d 70 5d 0a 70 6f 73     at file [-p].pos
     cf2:	69 78 20 63 64 20 64 69 72 0a 70 6f 73 69 78 20     ix cd dir.posix 
     d02:	63 6f 70 79 20 66 69 6c 65 31 20 66 69 6c 65 32     copy file1 file2
     d12:	0a 70 6f 73 69 78 20 6c 73 20 64 69 72 20 5b 2d     .posix ls dir [-
     d22:	6c 5d 0a 70 6f 73 69 78 20 6d 6b 64 69 72 20 64     l].posix mkdir d
     d32:	69 72 0a 70 6f 73 69 78 20 70 61 67 65 20 4e 4e     ir.posix page NN
     d42:	0a 70 6f 73 69 78 20 70 77 64 0a 70 6f 73 69 78     .posix pwd.posix
     d52:	20 72 6d 20 66 69 6c 65 0a 70 6f 73 69 78 20 72      rm file.posix r
     d62:	6d 64 69 72 20 64 69 72 0a 70 6f 73 69 78 20 72     mdir dir.posix r
     d72:	65 6e 61 6d 65 20 6f 6c 64 20 6e 65 77 0a 0a 00     ename old new...

00000d82 <__c.3736>:
     d82:	70 6f 73 69 78 20 68 65 6c 70 0a 00                 posix help..

00000d8e <__c.3927>:
     d8e:	43 6c 6f 73 65 20 65 72 72 6f 72 3a 20 00           Close error: .

00000d9c <__c.3921>:
     d9c:	53 65 65 6b 20 65 72 72 6f 72 3a 20 00              Seek error: .

00000da9 <__c.3914>:
     da9:	57 72 69 74 65 20 65 72 72 6f 72 3a 20 00           Write error: .

00000db7 <__c.3905>:
     db7:	52 65 61 64 20 65 72 72 6f 72 3a 20 00              Read error: .

00000dc4 <__c.3896>:
     dc4:	4f 70 65 6e 20 65 72 72 6f 72 3a 5b 25 73 5d 20     Open error:[%s] 
	...

00000dd5 <__c.3882>:
     dd5:	5b 50 50 52 20 44 49 53 41 42 4c 45 20 41 4c 4c     [PPR DISABLE ALL
     de5:	5d 0a 00                                            ]..

00000de8 <__c.3864>:
     de8:	47 50 49 42 20 43 6c 6f 63 6b 20 74 61 73 6b 20     GPIB Clock task 
     df8:	69 6e 69 74 20 66 61 69 6c 65 64 0a 00              init failed..

00000e05 <__c.4449>:
     e05:	5b 67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 20     [gpib_write_str 
     e15:	73 65 6e 74 28 25 64 29 20 65 78 70 65 63 74 65     sent(%d) expecte
     e25:	64 28 25 64 29 5d 0a 00                             d(%d)]..

00000e2d <__c.4444>:
     e2d:	67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 3a 20     gpib_write_str: 
     e3d:	73 69 7a 65 20 3d 20 30 0a 00                       size = 0..

00000e47 <__c.4434>:
     e47:	5b 67 70 69 62 5f 72 65 61 64 5f 73 74 72 20 72     [gpib_read_str r
     e57:	65 61 64 28 25 64 29 20 65 78 70 65 63 74 65 64     ead(%d) expected
     e67:	28 25 64 29 5d 0a 00                                (%d)]..

00000e6e <__c.4430>:
     e6e:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 28 69 6e     gpib_read_str(in
     e7e:	64 3a 25 64 29 3a 20 41 54 4e 20 25 30 32 58 48     d:%d): ATN %02XH
     e8e:	20 75 6e 65 78 70 65 63 74 65 64 0a 00               unexpected..

00000e9b <__c.4427>:
     e9b:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 3a 20 73     gpib_read_str: s
     eab:	69 7a 65 20 3d 20 30 0a 00                          ize = 0..

00000eb4 <__c.4411>:
     eb4:	20 4d 53 41 20 25 30 32 58 68 00                     MSA %02Xh.

00000ebf <__c.4409>:
     ebf:	20 4d 54 41 20 25 30 32 58 68 00                     MTA %02Xh.

00000eca <__c.4407>:
     eca:	20 4d 4c 41 20 25 30 32 58 68 00                     MLA %02Xh.

00000ed5 <__c.4403>:
     ed5:	20 20 20 20 20 00                                        .

00000edb <__c.4401>:
     edb:	25 30 32 58 20 25 63 20 00                          %02X %c .

00000ee4 <__c.4359>:
     ee4:	3c 4e 52 46 44 3d 25 64 2c 4e 44 41 56 3d 25 64     <NRFD=%d,NDAV=%d
     ef4:	3e 0a 00                                            >..

00000ef7 <__c.4355>:
     ef7:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
     f07:	20 44 41 56 3d 3d 31 3e 0a 00                        DAV==1>..

00000f11 <__c.4351>:
     f11:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
     f21:	20 4e 44 41 43 3d 3d 31 3e 0a 00                     NDAC==1>..

00000f2c <__c.4348>:
     f2c:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
     f3c:	20 4e 52 46 44 3d 3d 30 3e 0a 00                     NRFD==0>..

00000f47 <__c.4343>:
     f47:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
     f57:	20 4e 52 46 44 3d 3d 31 20 26 26 20 4e 44 41 43      NRFD==1 && NDAC
     f67:	20 3d 3d 20 30 3e 0a 00                              == 0>..

00000f6f <__c.4339>:
     f6f:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
     f7f:	20 44 41 56 3d 3d 31 3e 0a 00                        DAV==1>..

00000f89 <__c.4322>:
     f89:	67 70 69 62 5f 75 6e 72 65 61 64 3a 20 65 72 72     gpib_unread: err
     f99:	6f 72 2c 20 63 61 6e 20 6f 6e 6c 79 20 62 65 20     or, can only be 
     fa9:	63 61 6c 6c 65 64 20 6f 6e 63 65 21 0a 00           called once!..

00000fb7 <__c.4310>:
     fb7:	5b 49 46 43 20 53 45 4e 54 5d 0a 00                 [IFC SENT]..

00000fc3 <__c.4296>:
     fc3:	5b 44 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [DPPR bit:%d, ma
     fd3:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

00000fde <__c.4294>:
     fde:	67 70 69 62 5f 64 69 73 61 62 6c 65 5f 50 50 52     gpib_disable_PPR
     fee:	3a 20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20     : bit %d out of 
     ffe:	72 61 6e 67 65 0a 00                                range..

00001005 <__c.4289>:
    1005:	5b 45 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [EPPR bit:%d, ma
    1015:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

00001020 <__c.4287>:
    1020:	67 70 69 62 5f 65 6e 61 62 6c 65 5f 50 50 52 3a     gpib_enable_PPR:
    1030:	20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20 72      bit %d out of r
    1040:	61 6e 67 65 0a 00                                   ange..

00001046 <__c.4282>:
    1046:	5b 47 50 49 42 20 53 54 41 54 45 20 49 4e 49 54     [GPIB STATE INIT
    1056:	5d 0a 00                                            ]..

00001059 <__c.4277>:
    1059:	5b 47 50 49 42 20 42 55 53 5f 49 4e 49 54 5d 0a     [GPIB BUS_INIT].
	...

0000106a <__c.4430>:
    106a:	5b 50 52 49 4e 54 45 52 20 63 6c 6f 73 65 5d 0a     [PRINTER close].
	...

0000107b <__c.4425>:
    107b:	5b 53 41 20 25 30 32 58 48 2c 20 6c 69 73 74 65     [SA %02XH, liste
    108b:	6e 3a 25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30     n:%02XH, talk:%0
    109b:	32 58 48 5d 0a 00                                   2XH]..

000010a1 <__c.4423>:
    10a1:	5b 53 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [SA %02XH AMIGO]
    10b1:	0a 00                                               ..

000010b3 <__c.4421>:
    10b3:	5b 53 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [SA %02XH SS80].
	...

000010c4 <__c.4416>:
    10c4:	5b 54 41 20 25 30 32 58 48 5d 0a 00                 [TA %02XH]..

000010d0 <__c.4414>:
    10d0:	5b 50 52 49 4e 54 45 52 20 4f 50 45 4e 5d 0a 00     [PRINTER OPEN]..

000010e0 <__c.4412>:
    10e0:	5b 54 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [TA %02XH PRINTE
    10f0:	52 5d 0a 00                                         R]..

000010f4 <__c.4410>:
    10f4:	5b 54 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [TA %02XH AMIGO]
    1104:	0a 00                                               ..

00001106 <__c.4408>:
    1106:	5b 54 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [TA %02XH SS80].
	...

00001117 <__c.4406>:
    1117:	5b 55 4e 54 5d 0a 00                                [UNT]..

0000111e <__c.4401>:
    111e:	5b 4c 41 20 25 30 32 58 48 5d 0a 00                 [LA %02XH]..

0000112a <__c.4399>:
    112a:	5b 4c 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [LA %02XH PRINTE
    113a:	52 5d 0a 00                                         R]..

0000113e <__c.4397>:
    113e:	5b 4c 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [LA %02XH SS80].
	...

0000114f <__c.4395>:
    114f:	5b 4c 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [LA %02XH AMIGO]
    115f:	0a 00                                               ..

00001161 <__c.4393>:
    1161:	0a 00                                               ..

00001163 <__c.4391>:
    1163:	5b 55 4e 4c 5d 0a 00                                [UNL]..

0000116a <__c.4386>:
    116a:	5b 48 50 49 42 20 28 25 30 32 58 48 29 20 6e 6f     [HPIB (%02XH) no
    117a:	74 20 64 65 66 69 6e 65 64 5d 0a 00                 t defined]..

00001186 <__c.4384>:
    1186:	5b 44 43 4c 5d 0a 00                                [DCL]..

0000118d <__c.4382>:
    118d:	5b 53 44 43 20 41 4d 49 47 4f 5d 0a 00              [SDC AMIGO]..

0000119a <__c.4380>:
    119a:	5b 53 44 43 20 53 53 38 30 5d 0a 00                 [SDC SS80]..

000011a6 <__c.4378>:
    11a6:	5b 53 44 43 5d 0a 00                                [SDC]..

000011ad <__c.4376>:
    11ad:	5b 53 50 44 5d 0a 00                                [SPD]..

000011b4 <__c.4374>:
    11b4:	5b 53 50 45 5d 0a 00                                [SPE]..

000011bb <__c.4372>:
    11bb:	5b 50 50 55 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPU unsupported
    11cb:	5d 0a 00                                            ]..

000011ce <__c.4370>:
    11ce:	5b 50 50 43 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPC unsupported
    11de:	5d 0a 00                                            ]..

000011e1 <__c.4365>:
    11e1:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    11f1:	48 3d 25 30 34 58 48 5d 0a 00                       H=%04XH]..

000011fb <__c.4363>:
    11fb:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    120b:	48 3d 25 30 34 58 48 20 46 41 49 4c 45 44 5d 0a     H=%04XH FAILED].
	...

0000121c <__c.4336>:
    121c:	3c 4d 45 44 49 41 20 4d 49 53 53 49 4e 47 3e 0a     <MEDIA MISSING>.
	...

0000122d <__c.4334>:
    122d:	3c 49 4e 54 45 52 52 55 50 54 3e 0a 00              <INTERRUPT>..

0000123a <__c.4332>:
    123a:	3c 42 55 53 3e 0a 00                                <BUS>..

00001241 <__c.4330>:
    1241:	3c 54 49 4d 45 4f 55 54 3e 0a 00                    <TIMEOUT>..

0000124c <__c.4328>:
    124c:	3c 49 46 43 3e 0a 00                                <IFC>..

00001253 <__c.4323>:
    1253:	43 61 70 74 75 72 69 6e 67 20 43 6c 6f 73 65 64     Capturing Closed
    1263:	0a 00                                               ..

00001265 <__c.4321>:
    1265:	44 6f 6e 65 0a 00                                   Done..

0000126b <__c.4317>:
    126b:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

00001277 <__c.4315>:
    1277:	50 72 65 73 73 20 41 4e 59 20 6b 65 79 20 74 6f     Press ANY key to
    1287:	20 65 78 69 74 0a 00                                 exit..

0000128e <__c.4313>:
    128e:	46 55 4c 4c 20 47 50 49 42 20 42 55 53 20 68 61     FULL GPIB BUS ha
    129e:	6e 64 73 68 61 6b 65 20 6c 6f 67 67 69 6e 67 20     ndshake logging 
    12ae:	72 65 71 75 65 73 74 65 64 0a 00                    requested..

000012b9 <__c.4311>:
    12b9:	43 61 70 74 75 72 69 6e 67 20 47 50 49 42 20 42     Capturing GPIB B
    12c9:	55 53 20 74 6f 3a 25 73 0a 00                       US to:%s..

000012d3 <__c.4265>:
    12d3:	43 61 72 64 20 69 73 20 77 72 69 74 65 20 70 72     Card is write pr
    12e3:	6f 74 65 63 74 65 64 0a 00                          otected..

000012ec <__c.4263>:
    12ec:	25 73 20 6f 70 65 6e 20 66 61 69 6c 75 72 65 0a     %s open failure.
	...

000012fd <__c.4261>:
    12fd:	25 73 20 68 61 64 20 25 64 20 65 72 72 6f 72 73     %s had %d errors
    130d:	0a 00                                               ..

0000130f <__c.4479>:
    130f:	64 65 62 75 67 3d 25 30 34 58 48 0a 00              debug=%04XH..

0000131c <__c.4471>:
    131c:	67 70 69 62 20 70 72 65 66 69 78 20 69 73 20 6f     gpib prefix is o
    132c:	70 74 69 6f 6e 61 6c 0a 67 70 69 62 20 61 64 64     ptional.gpib add
    133c:	72 65 73 73 65 73 0a 67 70 69 62 20 63 6f 6e 66     resses.gpib conf
    134c:	69 67 0a 67 70 69 62 20 64 65 62 75 67 20 4e 0a     ig.gpib debug N.
    135c:	67 70 69 62 20 65 6c 61 70 73 65 64 0a 67 70 69     gpib elapsed.gpi
    136c:	62 20 65 6c 61 70 73 65 64 5f 72 65 73 65 74 0a     b elapsed_reset.
    137c:	67 70 69 62 20 69 66 63 0a 67 70 69 62 20 70 6c     gpib ifc.gpib pl
    138c:	6f 74 20 66 69 6c 65 6e 61 6d 65 2e 74 78 74 0a     ot filename.txt.
    139c:	67 70 69 62 20 70 6c 6f 74 5f 65 63 68 6f 0a 67     gpib plot_echo.g
    13ac:	70 69 62 20 74 61 73 6b 0a 67 70 69 62 20 74 72     pib task.gpib tr
    13bc:	61 63 65 20 66 69 6c 65 6e 61 6d 65 2e 74 78 74     ace filename.txt
    13cc:	20 5b 42 55 53 5d 0a 0a 0a 00                        [BUS]....

000013d6 <__c.4469>:
    13d6:	67 70 69 62 20 68 65 6c 70 0a 00                    gpib help..

000013e1 <__c.4931>:
    13e1:	0a 00                                               ..

000013e3 <__c.4926>:
    13e3:	41 4d 49 47 4f 25 64 00                             AMIGO%d.

000013eb <__c.4924>:
    13eb:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    13fb:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    140b:	0a 00                                               ..

0000140d <__c.4922>:
    140d:	53 53 38 30 2d 25 64 00                             SS80-%d.

00001415 <__c.4920>:
    1415:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    1425:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    1435:	0a 00                                               ..

00001437 <__c.4907>:
    1437:	0a 00                                               ..

00001439 <__c.4905>:
    1439:	45 4e 44 0a 00                                      END..

0000143e <__c.4900>:
    143e:	0a 00                                               ..

00001440 <__c.4898>:
    1440:	45 4e 44 0a 00                                      END..

00001445 <__c.4896>:
    1445:	20 20 45 4e 44 0a 00                                  END..

0000144c <__c.4894>:
    144c:	41 44 44 52 45 53 53 00                             ADDRESS.

00001454 <__c.4892>:
    1454:	20 20 43 4f 4e 46 49 47 0a 00                         CONFIG..

0000145e <__c.4890>:
    145e:	50 52 49 4e 54 45 52 0a 00                          PRINTER..

00001467 <__c.4888>:
    1467:	20 20 45 4e 44 0a 00                                  END..

0000146e <__c.4886>:
    146e:	23 20 42 4c 4f 43 4b 53 00                          # BLOCKS.

00001477 <__c.4884>:
    1477:	43 59 4c 49 4e 44 45 52 53 00                       CYLINDERS.

00001481 <__c.4882>:
    1481:	48 45 41 44 53 00                                   HEADS.

00001487 <__c.4880>:
    1487:	53 45 43 54 4f 52 53 5f 50 45 52 5f 54 52 41 43     SECTORS_PER_TRAC
    1497:	4b 00                                               K.

00001499 <__c.4878>:
    1499:	42 59 54 45 53 5f 50 45 52 5f 53 45 43 54 4f 52     BYTES_PER_SECTOR
	...

000014aa <__c.4876>:
    14aa:	20 20 47 45 4f 4d 45 54 52 59 0a 00                   GEOMETRY..

000014b6 <__c.4874>:
    14b6:	20 20 45 4e 44 0a 00                                  END..

000014bd <__c.4872>:
    14bd:	49 44 00                                            ID.

000014c0 <__c.4870>:
    14c0:	20 20 43 4f 4e 46 49 47 0a 00                         CONFIG..

000014ca <__c.4868>:
    14ca:	20 20 45 4e 44 0a 00                                  END..

000014d1 <__c.4866>:
    14d1:	46 49 4c 45 00                                      FILE.

000014d6 <__c.4864>:
    14d6:	50 50 52 00                                         PPR.

000014da <__c.4862>:
    14da:	41 44 44 52 45 53 53 00                             ADDRESS.

000014e2 <__c.4860>:
    14e2:	20 20 48 45 41 44 45 52 0a 00                         HEADER..

000014ec <__c.4858>:
    14ec:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    14fc:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

0000150b <__c.4856>:
    150b:	41 4d 49 47 4f 20 25 73 0a 00                       AMIGO %s..

00001515 <__c.4854>:
    1515:	20 20 45 4e 44 0a 00                                  END..

0000151c <__c.4852>:
    151c:	23 20 42 4c 4f 43 4b 53 00                          # BLOCKS.

00001525 <__c.4850>:
    1525:	49 4e 54 45 52 4c 45 41 56 45 00                    INTERLEAVE.

00001530 <__c.4848>:
    1530:	4d 41 58 5f 42 4c 4f 43 4b 5f 4e 55 4d 42 45 52     MAX_BLOCK_NUMBER
	...

00001541 <__c.4846>:
    1541:	4d 41 58 5f 53 45 43 54 4f 52 00                    MAX_SECTOR.

0000154c <__c.4844>:
    154c:	4d 41 58 5f 48 45 41 44 00                          MAX_HEAD.

00001555 <__c.4842>:
    1555:	4d 41 58 5f 43 59 4c 49 4e 44 45 52 00              MAX_CYLINDER.

00001562 <__c.4840>:
    1562:	20 20 56 4f 4c 55 4d 45 0a 00                         VOLUME..

0000156c <__c.4838>:
    156c:	20 20 45 4e 44 0a 00                                  END..

00001573 <__c.4836>:
    1573:	52 45 4d 4f 56 41 42 4c 45 5f 56 4f 4c 55 4d 45     REMOVABLE_VOLUME
    1583:	53 00                                               S.

00001585 <__c.4834>:
    1585:	46 49 58 45 44 5f 56 4f 4c 55 4d 45 53 00           FIXED_VOLUMES.

00001593 <__c.4832>:
    1593:	4d 41 58 49 4d 55 4d 5f 49 4e 54 45 52 4c 45 41     MAXIMUM_INTERLEA
    15a3:	56 45 00                                            VE.

000015a6 <__c.4830>:
    15a6:	41 43 43 45 53 53 5f 54 49 4d 45 00                 ACCESS_TIME.

000015b2 <__c.4828>:
    15b2:	4f 50 54 49 4d 41 4c 5f 52 45 54 52 59 5f 54 49     OPTIMAL_RETRY_TI
    15c2:	4d 45 00                                            ME.

000015c5 <__c.4826>:
    15c5:	43 4f 4e 54 49 4e 55 4f 55 53 5f 54 52 41 4e 53     CONTINUOUS_TRANS
    15d5:	46 45 52 5f 52 41 54 45 00                          FER_RATE.

000015de <__c.4824>:
    15de:	42 4c 4f 43 4b 5f 54 49 4d 45 00                    BLOCK_TIME.

000015e9 <__c.4822>:
    15e9:	42 55 52 53 54 5f 53 49 5a 45 00                    BURST_SIZE.

000015f4 <__c.4820>:
    15f4:	42 55 46 46 45 52 45 44 5f 42 4c 4f 43 4b 53 00     BUFFERED_BLOCKS.

00001604 <__c.4818>:
    1604:	42 59 54 45 53 5f 50 45 52 5f 42 4c 4f 43 4b 00     BYTES_PER_BLOCK.

00001614 <__c.4816>:
    1614:	44 45 56 49 43 45 5f 4e 55 4d 42 45 52 00           DEVICE_NUMBER.

00001622 <__c.4814>:
    1622:	55 4e 49 54 5f 54 59 50 45 00                       UNIT_TYPE.

0000162c <__c.4812>:
    162c:	20 20 55 4e 49 54 0a 00                               UNIT..

00001634 <__c.4810>:
    1634:	20 20 45 4e 44 0a 00                                  END..

0000163b <__c.4808>:
    163b:	54 59 50 45 00                                      TYPE.

00001640 <__c.4806>:
    1640:	54 52 41 4e 53 46 45 52 5f 52 41 54 45 00           TRANSFER_RATE.

0000164e <__c.4804>:
    164e:	55 4e 49 54 53 5f 49 4e 53 54 41 4c 4c 45 44 00     UNITS_INSTALLED.

0000165e <__c.4802>:
    165e:	20 20 43 4f 4e 54 52 4f 4c 4c 45 52 0a 00             CONTROLLER..

0000166c <__c.4800>:
    166c:	20 20 45 4e 44 0a 00                                  END..

00001673 <__c.4798>:
    1673:	49 44 00                                            ID.

00001676 <__c.4796>:
    1676:	20 20 48 45 41 44 45 52 0a 00                         HEADER..

00001680 <__c.4794>:
    1680:	20 20 45 4e 44 0a 00                                  END..

00001687 <__c.4792>:
    1687:	46 49 4c 45 00                                      FILE.

0000168c <__c.4790>:
    168c:	50 50 52 00                                         PPR.

00001690 <__c.4788>:
    1690:	41 44 44 52 45 53 53 00                             ADDRESS.

00001698 <__c.4786>:
    1698:	20 20 43 4f 4e 46 49 47 0a 00                         CONFIG..

000016a2 <__c.4784>:
    16a2:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    16b2:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

000016c1 <__c.4782>:
    16c1:	53 53 38 30 20 25 73 0a 00                          SS80 %s..

000016ca <__c.4779>:
    16ca:	43 75 72 72 65 6e 74 20 43 6f 6e 66 69 67 75 72     Current Configur
    16da:	61 74 69 6f 6e 20 53 65 74 74 69 6e 67 73 0a 00     ation Settings..

000016ea <__c.4771>:
    16ea:	0a 00                                               ..

000016ec <__c.4766>:
    16ec:	20 20 50 52 49 4e 54 45 52 5f 4d 53 41 20 3d 20       PRINTER_MSA = 
    16fc:	25 30 32 58 48 0a 00                                %02XH..

00001703 <__c.4764>:
    1703:	20 20 50 52 49 4e 54 45 52 5f 4d 54 41 20 3d 20       PRINTER_MTA = 
    1713:	25 30 32 58 48 0a 00                                %02XH..

0000171a <__c.4762>:
    171a:	20 20 50 52 49 4e 54 45 52 5f 4d 4c 41 20 3d 20       PRINTER_MLA = 
    172a:	25 30 32 58 48 0a 00                                %02XH..

00001731 <__c.4760>:
    1731:	20 20 41 4d 49 47 4f 5f 4d 53 41 20 20 20 3d 20       AMIGO_MSA   = 
    1741:	25 30 32 58 48 0a 00                                %02XH..

00001748 <__c.4758>:
    1748:	20 20 41 4d 49 47 4f 5f 4d 54 41 20 20 20 3d 20       AMIGO_MTA   = 
    1758:	25 30 32 58 48 0a 00                                %02XH..

0000175f <__c.4756>:
    175f:	20 20 41 4d 49 47 4f 5f 4d 4c 41 20 20 20 3d 20       AMIGO_MLA   = 
    176f:	25 30 32 58 48 0a 00                                %02XH..

00001776 <__c.4754>:
    1776:	20 20 53 53 38 30 5f 4d 53 41 20 20 20 20 3d 20       SS80_MSA    = 
    1786:	25 30 32 58 48 0a 00                                %02XH..

0000178d <__c.4752>:
    178d:	20 20 53 53 38 30 5f 4d 54 41 20 20 20 20 3d 20       SS80_MTA    = 
    179d:	25 30 32 58 48 0a 00                                %02XH..

000017a4 <__c.4750>:
    17a4:	20 20 53 53 38 30 5f 4d 4c 41 20 20 20 20 3d 20       SS80_MLA    = 
    17b4:	25 30 32 58 48 0a 00                                %02XH..

000017bb <__c.4747>:
    17bb:	4c 69 73 74 65 6e 20 61 6e 64 20 54 61 6c 6b 20     Listen and Talk 
    17cb:	41 64 64 72 65 73 73 20 53 65 74 74 69 6e 67 73     Address Settings
    17db:	0a 00                                               ..

000017dd <__c.4741>:
    17dd:	20 20 20 20 25 2d 32 35 73 20 3d 20 22 25 73 22         %-25s = "%s"
    17ed:	0a 00                                               ..

000017ef <__c.4730>:
    17ef:	20 20 20 20 25 2d 32 35 73 20 3d 20 25 38 6c 78         %-25s = %8lx
    17ff:	48 20 28 25 6c 64 29 0a 00                          H (%ld)..

00001808 <__c.4719>:
    1808:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 2a 2a 2a     Read_Config: ***
    1818:	2a 2a 2a 20 65 72 72 6f 72 73 28 25 64 29 20 2a     *** errors(%d) *
    1828:	2a 2a 2a 2a 2a 0a 00                                *****..

0000182f <__c.4717>:
    182f:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 72 65 61     Read_Config: rea
    183f:	64 28 25 64 29 20 6c 69 6e 65 73 0a 00              d(%d) lines..

0000184c <__c.4715>:
    184c:	4d 69 73 73 69 6e 67 20 45 4e 44 20 73 74 61 74     Missing END stat
    185c:	65 6d 65 6e 74 20 61 74 20 6c 69 6e 65 3a 25 64     ement at line:%d
    186c:	0a 00                                               ..

0000186e <__c.4711>:
    186e:	46 61 74 61 6c 20 55 6e 65 78 70 65 63 74 65 64     Fatal Unexpected
    187e:	20 53 54 41 54 45 20 25 64 20 61 74 20 6c 69 6e      STATE %d at lin
    188e:	65 3a 25 64 0a 00                                   e:%d..

00001894 <__c.4708>:
    1894:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    18a4:	20 47 45 4d 45 54 52 59 20 74 6f 6b 65 6e 3a 20      GEMETRY token: 
    18b4:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

000018c4 <__c.4706>:
    18c4:	46 61 74 61 6c 3a 20 41 4d 49 47 4f 20 42 59 54     Fatal: AMIGO BYT
    18d4:	45 53 5f 50 45 52 5f 53 45 43 54 4f 52 20 3e 20     ES_PER_SECTOR > 
    18e4:	30 78 31 30 30 30 2c 20 73 65 74 20 74 6f 20 32     0x1000, set to 2
    18f4:	35 36 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00        56 at line:%d..

00001903 <__c.4703>:
    1903:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1913:	20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25      CONFIG token: %
    1923:	73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00        s, at line:%d..

00001932 <__c.4700>:
    1932:	55 6e 65 78 70 65 63 74 65 64 20 48 45 41 44 45     Unexpected HEADE
    1942:	52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20     R CONFIG token: 
    1952:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00001962 <__c.4698>:
    1962:	57 61 72 6e 69 6e 67 20 41 4d 49 47 4f 20 41 44     Warning AMIGO AD
    1972:	44 52 45 53 53 3a 20 25 64 20 3e 20 37 2c 20 64     DRESS: %d > 7, d
    1982:	69 73 61 62 6c 65 64 20 61 74 20 6c 69 6e 65 3a     isabled at line:
    1992:	25 64 0a 00                                         %d..

00001996 <__c.4696>:
    1996:	46 61 74 61 6c 20 41 4d 49 47 4f 20 41 44 44 52     Fatal AMIGO ADDR
    19a6:	45 53 53 3a 20 25 64 20 3e 20 33 31 20 64 69 73     ESS: %d > 31 dis
    19b6:	61 62 6c 65 64 20 61 74 20 6c 69 6e 65 3a 25 64     abled at line:%d
    19c6:	0a 00                                               ..

000019c8 <__c.4694>:
    19c8:	53 6b 69 70 70 69 6e 67 20 25 73 2c 20 61 74 20     Skipping %s, at 
    19d8:	6c 69 6e 65 3a 25 64 0a 00                          line:%d..

000019e1 <__c.4691>:
    19e1:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    19f1:	20 53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73      START token: %s
    1a01:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001a0f <__c.4688>:
    1a0f:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1a1f:	56 4f 4c 55 4d 45 20 74 6f 6b 65 6e 3a 20 25 73     VOLUME token: %s
    1a2f:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001a3d <__c.4685>:
    1a3d:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1a4d:	55 4e 49 54 20 74 6f 6b 65 6e 3a 20 25 73 2c 20     UNIT token: %s, 
    1a5d:	61 74 20 6c 69 6e 65 3a 25 64 0a 00                 at line:%d..

00001a69 <__c.4683>:
    1a69:	46 61 74 61 6c 3a 20 53 53 38 30 20 42 55 52 53     Fatal: SS80 BURS
    1a79:	54 5f 53 49 5a 45 20 3e 20 30 2c 20 73 65 74 20     T_SIZE > 0, set 
    1a89:	74 6f 20 31 20 61 74 20 6c 69 6e 65 3a 25 64 0a     to 1 at line:%d.
	...

00001a9a <__c.4681>:
    1a9a:	46 61 74 61 6c 3a 20 53 53 38 30 20 42 55 46 46     Fatal: SS80 BUFF
    1aaa:	45 52 45 44 5f 42 4c 4f 43 4b 53 20 3e 20 31 2c     ERED_BLOCKS > 1,
    1aba:	20 73 65 74 20 74 6f 20 31 20 61 74 20 6c 69 6e      set to 1 at lin
    1aca:	65 3a 25 64 0a 00                                   e:%d..

00001ad0 <__c.4679>:
    1ad0:	46 61 74 61 6c 3a 20 53 53 38 30 20 42 59 54 45     Fatal: SS80 BYTE
    1ae0:	53 5f 50 45 52 5f 42 4c 4f 43 4b 20 3e 20 30 78     S_PER_BLOCK > 0x
    1af0:	31 30 30 30 2c 20 73 65 74 20 74 6f 20 32 35 36     1000, set to 256
    1b00:	20 61 74 20 6c 69 6e 65 3a 25 64 0a 00               at line:%d..

00001b0d <__c.4676>:
    1b0d:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1b1d:	43 4f 4e 54 52 4f 4c 4c 45 52 20 74 6f 6b 65 6e     CONTROLLER token
    1b2d:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1b3d:	0a 00                                               ..

00001b3f <__c.4673>:
    1b3f:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1b4f:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    1b5f:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001b6d <__c.4670>:
    1b6d:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1b7d:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    1b8d:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001b9b <__c.4668>:
    1b9b:	57 61 72 6e 69 6e 67 20 53 53 38 30 20 50 50 52     Warning SS80 PPR
    1bab:	20 3e 20 37 20 61 74 20 6c 69 6e 65 3a 25 64 0a      > 7 at line:%d.
	...

00001bbc <__c.4666>:
    1bbc:	46 61 74 61 6c 20 53 53 38 30 20 41 44 44 52 45     Fatal SS80 ADDRE
    1bcc:	53 53 20 3e 20 33 31 20 61 74 20 6c 69 6e 65 20     SS > 31 at line 
    1bdc:	64 0a 00                                            d..

00001bdf <__c.4663>:
    1bdf:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1bef:	53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73 2c     START token: %s,
    1bff:	20 61 74 20 6c 69 6e 65 3a 25 64 0a 00               at line:%d..

00001c0c <__c.4660>:
    1c0c:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    1c1c:	45 52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a     ER CONFIG token:
    1c2c:	20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a      %s, at line:%d.
	...

00001c3d <__c.4658>:
    1c3d:	46 61 74 61 6c 20 50 52 49 4e 54 45 52 20 41 44     Fatal PRINTER AD
    1c4d:	44 52 45 53 53 20 6f 75 74 20 6f 66 20 72 61 6e     DRESS out of ran
    1c5d:	67 65 3a 20 25 6c 64 20 64 69 73 61 62 6c 65 64     ge: %ld disabled
    1c6d:	3a 25 64 0a 00                                      :%d..

00001c72 <__c.4655>:
    1c72:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    1c82:	45 52 20 74 6f 6b 65 6e 3a 20 25 73 2c 20 61 74     ER token: %s, at
    1c92:	20 6c 69 6e 65 3a 25 64 0a 00                        line:%d..

00001c9c <__c.4651>:
    1c9c:	55 6e 65 78 70 65 63 74 65 64 20 53 54 41 52 54     Unexpected START
    1cac:	20 74 6f 6b 65 6e 3a 20 25 73 2c 20 61 74 20 6c      token: %s, at l
    1cbc:	69 6e 65 3a 25 64 0a 00                             ine:%d..

00001cc4 <__c.4649>:
    1cc4:	53 6b 69 70 70 69 6e 67 20 25 73 2c 20 61 74 20     Skipping %s, at 
    1cd4:	6c 69 6e 65 3a 25 64 0a 00                          line:%d..

00001cdd <__c.4645>:
    1cdd:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 6f 70 65     Read_Config: ope
    1ced:	6e 28 25 73 29 20 66 61 69 6c 65 64 0a 00           n(%s) failed..

00001cfb <__c.4643>:
    1cfb:	52 65 61 64 69 6e 67 3a 20 25 73 0a 00              Reading: %s..

00001d08 <__c.4616>:
    1d08:	57 61 72 6e 69 6e 67 3a 20 25 73 20 42 59 54 45     Warning: %s BYTE
    1d18:	53 5f 50 45 52 5f 53 45 43 54 4f 52 20 21 3d 20     S_PER_SECTOR != 
    1d28:	32 35 36 2c 20 41 64 6a 75 73 74 69 6e 67 20 74     256, Adjusting t
    1d38:	6f 20 32 35 36 0a 00                                o 256..

00001d3f <__c.4614>:
    1d3f:	57 61 72 6e 69 6e 67 3a 20 25 73 20 42 59 54 45     Warning: %s BYTE
    1d4f:	53 5f 50 45 52 5f 42 4c 4f 43 4b 20 21 3d 20 32     S_PER_BLOCK != 2
    1d5f:	35 36 2c 20 41 64 6a 75 73 74 69 6e 67 20 74 6f     56, Adjusting to
    1d6f:	20 32 35 36 0a 00                                    256..

00001d75 <__c.4601>:
    1d75:	68 70 64 69 72 5f 70 61 72 61 6d 65 74 65 72 73     hpdir_parameters
    1d85:	20 69 6e 76 61 6c 69 64 20 54 59 50 45 0a 00         invalid TYPE..

00001d94 <__c.4565>:
    1d94:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 69 6e     alloc_device: in
    1da4:	76 61 6c 69 64 20 74 79 70 65 3a 25 64 3a 25 73     valid type:%d:%s
    1db4:	0a 00                                               ..

00001db6 <__c.4557>:
    1db6:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 44 65     alloc_device: De
    1dc6:	76 69 63 65 20 74 61 62 6c 65 20 69 73 20 66 75     vice table is fu
    1dd6:	6c 6c 0a 00                                         ll..

00001dda <__c.4544>:
    1dda:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1dea:	65 3a 28 25 64 29 20 69 6e 76 61 6c 69 64 20 74     e:(%d) invalid t
    1dfa:	79 70 65 3a 25 64 3a 25 73 0a 00                    ype:%d:%s..

00001e05 <__c.4542>:
    1e05:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1e15:	65 3a 20 69 6e 64 65 78 3a 20 25 64 20 74 79 70     e: index: %d typ
    1e25:	65 3a 25 64 3a 25 73 2c 20 73 74 61 74 65 20 3d     e:%d:%s, state =
    1e35:	3d 20 4e 55 4c 4c 0a 00                             = NULL..

00001e3d <__c.4540>:
    1e3d:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1e4d:	65 3a 20 69 6e 64 65 78 20 25 64 20 75 6e 69 6e     e: index %d unin
    1e5d:	69 74 61 6c 69 7a 65 64 20 74 79 70 65 3a 25 64     italized type:%d
    1e6d:	3a 25 73 0a 00                                      :%s..

00001e72 <__c.4538>:
    1e72:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1e82:	65 3a 20 69 6e 64 65 78 3a 25 64 20 74 79 70 65     e: index:%d type
    1e92:	3a 25 64 3a 25 73 2c 20 64 65 76 20 3d 3d 20 4e     :%d:%s, dev == N
    1ea2:	55 4c 4c 0a 00                                      ULL..

00001ea7 <__c.4536>:
    1ea7:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1eb7:	65 3a 20 69 6e 64 65 78 3a 25 64 20 61 64 64 72     e: index:%d addr
    1ec7:	65 73 73 3a 20 25 30 32 58 48 20 6f 75 74 20 6f     ess: %02XH out o
    1ed7:	66 20 72 61 6e 67 65 0a 00                          f range..

00001ee0 <__c.4534>:
    1ee0:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1ef0:	65 3a 28 25 64 29 20 6f 75 74 20 6f 66 20 72 61     e:(%d) out of ra
    1f00:	6e 67 65 0a 00                                      nge..

00001f05 <__c.3767>:
    1f05:	46 6f 75 6e 64 20 4d 6f 64 65 6c 3a 20 25 73 0a     Found Model: %s.
	...

00001f16 <__c.3765>:
    1f16:	25 73 20 25 73 0a 00                                %s %s..

00001f1d <__c.3761>:
    1f1d:	45 72 72 6f 72 3a 20 68 70 64 69 72 2e 69 6e 69     Error: hpdir.ini
    1f2d:	20 6e 6f 74 20 66 6f 75 6e 64 21 0a 00               not found!..

00001f3a <__c.4573>:
    1f3a:	5b 53 53 38 30 20 55 6e 6b 6e 6f 77 6e 20 53 43     [SS80 Unknown SC
    1f4a:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    1f5a:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    1f6a:	48 5d 0a 00                                         H]..

00001f6e <__c.4571>:
    1f6e:	5b 53 53 38 30 20 53 43 20 55 6e 6b 6e 6f 77 6e     [SS80 SC Unknown
    1f7e:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    1f8e:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    1f9e:	48 5d 0a 00                                         H]..

00001fa2 <__c.4569>:
    1fa2:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    1fb2:	74 5d 0a 00                                         t]..

00001fb6 <__c.4567>:
    1fb6:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

00001fc5 <__c.4565>:
    1fc5:	5b 53 53 38 30 20 52 65 70 6f 72 74 20 53 74 61     [SS80 Report Sta
    1fd5:	74 65 5d 0a 00                                      te]..

00001fda <__c.4563>:
    1fda:	5b 53 53 30 30 20 45 78 65 63 75 74 65 20 53 74     [SS00 Execute St
    1fea:	61 74 65 5d 0a 00                                   ate]..

00001ff0 <__c.4561>:
    1ff0:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    2000:	61 74 65 5d 0a 00                                   ate]..

00002006 <__c.4556>:
    2006:	5b 47 50 49 42 20 45 72 72 6f 72 20 52 65 74 75     [GPIB Error Retu
    2016:	72 6e 20 2d 20 57 72 69 74 65 20 45 52 52 4f 52     rn - Write ERROR
    2026:	5d 0a 00                                            ]..

00002029 <__c.4542>:
    2029:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

00002038 <__c.4540>:
    2038:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    2048:	5d 0a 00                                            ]..

0000204b <__c.4533>:
    204b:	5b 53 53 38 30 20 53 44 43 5d 0a 00                 [SS80 SDC]..

00002057 <__c.4519>:
    2057:	5b 53 53 38 30 20 71 73 74 61 74 20 25 30 32 58     [SS80 qstat %02X
    2067:	5d 0a 00                                            ]..

0000206a <__c.4517>:
    206a:	5b 53 53 38 30 20 71 73 74 61 74 20 73 65 6e 64     [SS80 qstat send
    207a:	20 46 41 49 4c 45 44 5d 0a 00                        FAILED]..

00002084 <__c.4510>:
    2084:	5b 53 53 38 30 20 53 65 65 6b 3a 25 30 38 6c 58     [SS80 Seek:%08lX
    2094:	48 5d 0a 00                                         H]..

00002098 <__c.4508>:
    2098:	5b 53 53 38 30 20 53 65 65 6b 20 4f 56 45 52 46     [SS80 Seek OVERF
    20a8:	4c 4f 57 20 61 74 20 25 30 38 6c 58 48 5d 0a 00     LOW at %08lXH]..

000020b8 <__c.4503>:
    20b8:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    20c8:	74 20 43 6f 6d 6d 61 6e 64 2c 20 45 72 72 6f 72     t Command, Error
    20d8:	20 61 74 20 28 25 64 29 20 6f 66 20 28 25 64 29      at (%d) of (%d)
    20e8:	20 4f 50 20 43 6f 64 65 73 5d 0a 00                  OP Codes]..

000020f4 <__c.4500>:
    20f4:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    2104:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

00002114 <__c.4498>:
    2114:	5b 53 53 38 30 20 43 61 6e 63 65 6c 20 28 25 64     [SS80 Cancel (%d
    2124:	29 5d 0a 00                                         )]..

00002128 <__c.4496>:
    2128:	5b 53 53 38 30 20 43 68 61 6e 6e 65 6c 20 49 6e     [SS80 Channel In
    2138:	64 65 70 65 6e 64 65 6e 74 20 43 6c 65 61 72 20     dependent Clear 
    2148:	28 25 64 29 5d 0a 00                                (%d)]..

0000214f <__c.4494>:
    214f:	5b 53 53 38 30 20 57 72 69 74 65 20 4c 6f 6f 70     [SS80 Write Loop
    215f:	62 61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00           back - TODO]..

0000216d <__c.4492>:
    216d:	5b 53 53 38 30 20 52 65 61 64 20 4c 6f 6f 70 62     [SS80 Read Loopb
    217d:	61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00              ack - TODO]..

0000218a <__c.4489>:
    218a:	5b 53 53 38 30 20 48 50 2d 49 42 20 50 61 72 69     [SS80 HP-IB Pari
    219a:	74 79 20 43 68 65 63 6b 69 6e 67 20 2d 20 54 4f     ty Checking - TO
    21aa:	44 4f 5d 0a 00                                      DO]..

000021af <__c.4486>:
    21af:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    21bf:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

000021c8 <__c.4484>:
    21c8:	5b 47 50 49 42 20 52 65 61 64 20 45 52 52 4f 52     [GPIB Read ERROR
    21d8:	5d 0a 00                                            ]..

000021db <__c.4475>:
    21db:	5b 53 53 38 30 20 45 78 65 63 75 74 65 20 43 6f     [SS80 Execute Co
    21eb:	6d 6d 61 6e 64 2c 20 45 72 72 6f 72 20 61 74 20     mmand, Error at 
    21fb:	28 25 64 29 20 6f 66 20 28 25 64 29 20 4f 50 20     (%d) of (%d) OP 
    220b:	43 6f 64 65 73 5d 0a 00                             Codes]..

00002213 <__c.4472>:
    2213:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    2223:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

00002233 <__c.4470>:
    2233:	5b 53 53 38 30 20 49 6e 69 61 74 65 20 44 69 61     [SS80 Iniate Dia
    2243:	67 6e 6f 73 74 69 63 20 2d 20 54 4f 44 4f 5d 0a     gnostic - TODO].
	...

00002254 <__c.4468>:
    2254:	5b 53 53 38 30 20 52 65 71 75 65 73 74 20 53 74     [SS80 Request St
    2264:	61 74 75 73 5d 0a 00                                atus]..

0000226b <__c.4466>:
    226b:	5b 53 53 38 30 20 44 6f 6f 72 20 4c 6f 63 6b 20     [SS80 Door Lock 
    227b:	2d 20 54 4f 44 4f 5d 0a 00                          - TODO]..

00002284 <__c.4464>:
    2284:	5b 53 53 38 30 20 44 6f 6f 72 20 55 6e 4c 6f 63     [SS80 Door UnLoc
    2294:	6b 20 2d 20 54 4f 44 4f 5d 0a 00                    k - TODO]..

0000229f <__c.4462>:
    229f:	5b 53 53 38 30 20 53 65 74 20 53 74 61 74 75 73     [SS80 Set Status
    22af:	20 4d 61 73 6b 20 2d 20 54 4f 44 4f 5d 0a 00         Mask - TODO]..

000022be <__c.4460>:
    22be:	5b 53 53 38 30 20 49 6e 69 74 69 61 6c 69 7a 65     [SS80 Initialize
    22ce:	20 4d 65 64 69 61 20 54 4f 44 4f 5d 0a 00            Media TODO]..

000022dc <__c.4458>:
    22dc:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

000022ed <__c.4456>:
    22ed:	5b 53 53 38 30 20 56 61 6c 69 64 61 74 65 20 4b     [SS80 Validate K
    22fd:	65 79 20 2d 20 54 4f 44 4f 5d 0a 00                 ey - TODO]..

00002309 <__c.4454>:
    2309:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 44 65     [SS80 Release De
    2319:	6e 69 65 64 20 4e 4f 2d 4f 50 5d 0a 00              nied NO-OP]..

00002326 <__c.4452>:
    2326:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 4e 4f     [SS80 Release NO
    2336:	2d 4f 50 5d 0a 00                                   -OP]..

0000233c <__c.4450>:
    233c:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    234c:	20 56 65 72 69 66 79 20 2d 20 54 4f 44 4f 5d 0a      Verify - TODO].
	...

0000235d <__c.4448>:
    235d:	5b 53 53 38 30 20 53 65 74 20 52 65 74 75 72 6e     [SS80 Set Return
    236d:	20 41 64 64 72 65 73 73 69 6e 67 20 2d 20 54 4f      Addressing - TO
    237d:	44 4f 5d 0a 00                                      DO]..

00002382 <__c.4446>:
    2382:	5b 53 53 38 30 20 53 65 74 20 52 65 6c 65 61 73     [SS80 Set Releas
    2392:	65 20 4e 4f 2d 4f 50 5d 0a 00                       e NO-OP]..

0000239c <__c.4444>:
    239c:	5b 53 53 38 30 20 53 65 74 20 52 50 53 20 4e 4f     [SS80 Set RPS NO
    23ac:	2d 4f 50 5d 0a 00                                   -OP]..

000023b2 <__c.4442>:
    23b2:	5b 53 53 38 30 20 4e 4f 2d 4f 50 5d 0a 00           [SS80 NO-OP]..

000023c0 <__c.4440>:
    23c0:	5b 53 53 38 30 20 53 65 74 20 4c 65 6e 67 74 68     [SS80 Set Length
    23d0:	3a 28 25 30 38 6c 58 48 29 5d 0a 00                 :(%08lXH)]..

000023dc <__c.4438>:
    23dc:	5b 53 53 38 30 20 53 65 74 20 41 64 64 72 65 73     [SS80 Set Addres
    23ec:	73 3a 28 25 30 38 6c 58 48 29 5d 0a 00              s:(%08lXH)]..

000023f9 <__c.4436>:
    23f9:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2409:	20 57 72 69 74 65 5d 0a 00                           Write]..

00002412 <__c.4433>:
    2412:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2422:	20 52 65 61 64 5d 0a 00                              Read]..

0000242a <__c.4431>:
    242a:	5b 53 53 38 30 20 53 65 74 20 56 6f 6c 75 6d 65     [SS80 Set Volume
    243a:	3a 20 28 25 64 29 5d 0a 00                          : (%d)]..

00002443 <__c.4428>:
    2443:	5b 53 53 38 30 20 53 65 74 20 55 6e 69 74 3a 28     [SS80 Set Unit:(
    2453:	25 64 29 5d 0a 00                                   %d)]..

00002459 <__c.4426>:
    2459:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    2469:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

00002472 <__c.4424>:
    2472:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    2482:	61 74 65 20 47 50 49 42 20 52 65 61 64 20 45 52     ate GPIB Read ER
    2492:	52 4f 52 5d 0a 00                                   ROR]..

00002498 <__c.4415>:
    2498:	5b 53 53 38 30 20 56 6f 6c 75 6d 65 3a 25 64 20     [SS80 Volume:%d 
    24a8:	69 6e 76 61 6c 69 64 5d 0a 00                       invalid]..

000024b2 <__c.4410>:
    24b2:	5b 53 53 38 30 20 55 4e 49 54 3a 25 64 20 69 6e     [SS80 UNIT:%d in
    24c2:	76 61 6c 69 64 5d 0a 00                             valid]..

000024ca <__c.4405>:
    24ca:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 56     [SS80 Describe V
    24da:	6f 6c 75 6d 65 20 46 41 49 4c 45 44 5d 0a 00        olume FAILED]..

000024e9 <__c.4403>:
    24e9:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 55     [SS80 Describe U
    24f9:	6e 69 74 20 46 41 49 4c 45 44 5d 0a 00              nit FAILED]..

00002506 <__c.4401>:
    2506:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 43     [SS80 Describe C
    2516:	6f 6e 74 72 6f 6c 6c 65 72 20 46 41 49 4c 45 44     ontroller FAILED
    2526:	5d 0a 00                                            ]..

00002529 <__c.4399>:
    2529:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

0000253a <__c.4391>:
    253a:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    254a:	73 20 46 41 49 4c 45 44 5d 0a 00                    s FAILED]..

00002555 <__c.4389>:
    2555:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    2565:	73 5d 0a 00                                         s]..

00002569 <__c.4379>:
    2569:	20 20 20 20 25 64 3a 25 73 0a 00                        %d:%s..

00002574 <__c.4377>:
    2574:	25 73 3a 0a 00                                      %s:..

00002579 <__c.4352>:
    2579:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2589:	20 57 72 69 74 65 20 57 72 6f 74 65 20 54 6f 74      Write Wrote Tot
    2599:	61 6c 28 25 6c 78 48 29 5d 0a 00                    al(%lxH)]..

000025a4 <__c.4350>:
    25a4:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    25b4:	20 57 72 69 74 65 20 44 49 44 20 4e 4f 54 20 46      Write DID NOT F
    25c4:	49 4e 49 53 48 5d 0a 00                             INISH]..

000025cc <__c.4346>:
    25cc:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    25dc:	20 57 72 69 74 65 20 77 72 6f 74 65 28 25 30 32      Write wrote(%02
    25ec:	58 48 29 5d 0a 00                                   XH)]..

000025f2 <__c.4344>:
    25f2:	5b 44 69 73 6b 20 57 72 69 74 65 20 45 72 72 6f     [Disk Write Erro
    2602:	72 5d 0a 00                                         r]..

00002606 <__c.4340>:
    2606:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    2616:	5d 0a 00                                            ]..

00002619 <__c.4338>:
    2619:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2629:	20 57 72 69 74 65 20 61 74 20 25 30 38 6c 58 48      Write at %08lXH
    2639:	28 25 6c 58 48 29 5d 0a 00                          (%lXH)]..

00002642 <__c.4326>:
    2642:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    2652:	65 61 64 20 54 6f 74 61 6c 28 25 6c 58 48 29 20     ead Total(%lXH) 
    2662:	62 79 74 65 73 5d 0a 00                             bytes]..

0000266a <__c.4324>:
    266a:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    267a:	65 61 64 20 44 49 44 20 4e 4f 54 20 46 49 4e 49     ead DID NOT FINI
    268a:	53 48 5d 0a 00                                      SH]..

0000268f <__c.4319>:
    268f:	5b 53 53 38 30 20 47 50 49 42 20 57 72 69 74 65     [SS80 GPIB Write
    269f:	20 57 72 72 6f 72 5d 0a 00                           Wrror]..

000026a8 <__c.4317>:
    26a8:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    26b8:	45 72 72 6f 72 5d 0a 00                             Error]..

000026c0 <__c.4315>:
    26c0:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    26d0:	25 30 32 58 48 20 62 79 74 65 73 5d 0a 00           %02XH bytes]..

000026de <__c.4313>:
    26de:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    26ee:	20 52 65 61 64 20 61 74 20 25 30 38 6c 58 48 28      Read at %08lXH(
    26fe:	25 6c 58 48 29 5d 0a 00                             %lXH)]..

00002706 <__c.4296>:
    2706:	5b 53 53 38 30 20 45 58 45 43 20 73 74 61 74 65     [SS80 EXEC state
    2716:	3a 25 64 20 65 72 72 6f 72 5d 0a 00                 :%d error]..

00002722 <__c.4280>:
    2722:	5b 53 53 38 30 20 25 30 32 58 48 20 49 4e 49 54     [SS80 %02XH INIT
    2732:	5d 0a 00                                            ]..

00002735 <__c.4410>:
    2735:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2745:	65 71 75 65 73 74 20 4c 6f 67 69 63 61 6c 20 41     equest Logical A
    2755:	64 64 72 65 73 73 5d 0a 00                          ddress]..

0000275e <__c.4407>:
    275e:	5b 41 4d 49 47 4f 20 45 78 69 63 75 74 65 20 52     [AMIGO Exicute R
    276e:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 55 6e     equest Status Un
    277e:	62 75 66 66 65 72 65 64 5d 0a 00                    buffered]..

00002789 <__c.4404>:
    2789:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2799:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 42 75     equest Status Bu
    27a9:	66 66 65 72 65 64 5d 0a 00                          ffered]..

000027b2 <__c.4399>:
    27b2:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    27c2:	72 69 74 65 20 42 75 66 66 65 72 65 64 5d 0a 00     rite Buffered]..

000027d2 <__c.4396>:
    27d2:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 49     [AMIGO Execute I
    27e2:	6e 69 74 69 61 6c 69 7a 65 5d 0a 00                 nitialize]..

000027ee <__c.4393>:
    27ee:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    27fe:	72 69 74 65 20 55 6e 62 75 66 66 65 72 65 64 5d     rite Unbuffered]
    280e:	0a 00                                               ..

00002810 <__c.4390>:
    2810:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2820:	65 61 64 20 42 75 66 66 65 72 65 64 5d 0a 00        ead Buffered]..

0000282f <__c.4387>:
    282f:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    283f:	65 61 64 20 55 6e 62 75 66 66 65 72 65 64 5d 0a     ead Unbuffered].
	...

00002850 <__c.4384>:
    2850:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 43     [AMIGO Execute C
    2860:	6f 6c 64 20 4c 6f 61 64 20 52 65 61 64 5d 0a 00     old Load Read]..

00002870 <__c.4380>:
    2870:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 28 25     [AMIGO Execute(%
    2880:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    2890:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    28a0:	0a 00                                               ..

000028a2 <__c.4375>:
    28a2:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 5d 0a 00     [AMIGO Format]..

000028b2 <__c.4372>:
    28b2:	5b 41 4d 49 47 4f 20 52 65 61 64 20 42 75 66 66     [AMIGO Read Buff
    28c2:	65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00        ered Command]..

000028d1 <__c.4370>:
    28d1:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    28e1:	74 61 74 75 73 20 55 6e 62 75 66 66 65 72 65 64     tatus Unbuffered
    28f1:	20 43 6f 6d 6d 61 6e 64 5d 0a 00                     Command]..

000028fc <__c.4368>:
    28fc:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 42 75 66     [AMIGO Write Buf
    290c:	66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00     fered Command]..

0000291c <__c.4366>:
    291c:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 4c     [AMIGO Request L
    292c:	6f 67 69 63 61 6c 20 41 64 64 72 65 73 73 20 43     ogical Address C
    293c:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

00002945 <__c.4364>:
    2945:	5b 41 4d 49 47 4f 20 49 6e 69 74 69 61 6c 69 7a     [AMIGO Initializ
    2955:	65 20 43 6f 6d 6d 61 6e 64 5d 0a 00                 e Command]..

00002961 <__c.4362>:
    2961:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 55 6e 62     [AMIGO Write Unb
    2971:	75 66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d     uffered Command]
    2981:	0a 00                                               ..

00002983 <__c.4360>:
    2983:	5b 41 4d 49 47 4f 20 56 65 72 69 66 79 5d 0a 00     [AMIGO Verify]..

00002993 <__c.4357>:
    2993:	5b 41 4d 49 47 4f 20 52 65 61 64 20 55 6e 62 75     [AMIGO Read Unbu
    29a3:	66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a     ffered Command].
	...

000029b4 <__c.4355>:
    29b4:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    29c4:	74 61 74 75 73 20 42 75 66 66 65 72 65 64 20 43     tatus Buffered C
    29d4:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

000029dd <__c.4353>:
    29dd:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    29ed:	36 5d 0a 00                                         6]..

000029f1 <__c.4350>:
    29f1:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    2a01:	35 5d 0a 00                                         5]..

00002a05 <__c.4347>:
    2a05:	5b 41 4d 49 47 4f 20 43 6f 6c 64 20 4c 6f 61 64     [AMIGO Cold Load
    2a15:	20 52 65 61 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00      Read Command]..

00002a25 <__c.4344>:
    2a25:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    2a35:	30 32 58 48 29 3a 20 47 50 49 42 20 72 65 61 64     02XH): GPIB read
    2a45:	20 62 79 74 65 73 3a 25 30 32 58 48 5d 0a 00         bytes:%02XH]..

00002a54 <__c.4342>:
    2a54:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    2a64:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

00002a75 <__c.4340>:
    2a75:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    2a85:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

00002a96 <__c.4338>:
    2a96:	5b 41 4d 49 47 4f 5f 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO_Command:G
    2aa6:	50 49 42 20 77 72 69 74 65 20 65 72 72 6f 72 5d     PIB write error]
    2ab6:	0a 00                                               ..

00002ab8 <__c.4336>:
    2ab8:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    2ac8:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    2ad8:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    2ae8:	0a 00                                               ..

00002aea <__c.4324>:
    2aea:	5b 45 20 20 20 41 6d 69 67 6f 20 45 52 52 4f 52     [E   Amigo ERROR
    2afa:	20 73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58      secondary: %02X
    2b0a:	48 2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20     H, state:%02XH, 
    2b1a:	6c 69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c     listening:%02XH,
    2b2a:	20 74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a      talking:%02XH].
	...

00002b3b <__c.4322>:
    2b3b:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    2b4b:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2b5b:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2b6b:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2b7b:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002b8b <__c.4320>:
    2b8b:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    2b9b:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2bab:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2bbb:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2bcb:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002bdb <__c.4318>:
    2bdb:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    2beb:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2bfb:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2c0b:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2c1b:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002c2b <__c.4313>:
    2c2b:	5b 55 20 41 6d 69 67 6f 20 54 4f 44 4f 20 73 65     [U Amigo TODO se
    2c3b:	63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48 2c 20     condary: %02XH, 
    2c4b:	73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f 70 63     state:%02XH, opc
    2c5b:	6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e 3a 25     ode:%02XH, len:%
    2c6b:	33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a 25 30     3d, listening:%0
    2c7b:	32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25 30 32     2XH, talking:%02
    2c8b:	58 48 5d 0a 00                                      XH]..

00002c90 <__c.4311>:
    2c90:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    2ca0:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2cb0:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2cc0:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2cd0:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2ce0:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2cf0:	30 32 58 48 5d 0a 00                                02XH]..

00002cf7 <__c.4309>:
    2cf7:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    2d07:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2d17:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2d27:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2d37:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2d47:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2d57:	30 32 58 48 5d 0a 00                                02XH]..

00002d5e <__c.4307>:
    2d5e:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    2d6e:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2d7e:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2d8e:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2d9e:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2dae:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2dbe:	30 32 58 48 5d 0a 00                                02XH]..

00002dc5 <__c.4300>:
    2dc5:	5b 41 4d 49 47 4f 20 43 6c 65 61 72 5d 0a 00        [AMIGO Clear]..

00002dd4 <__c.4287>:
    2dd4:	5b 44 53 4a 20 25 30 32 58 48 5d 0a 00              [DSJ %02XH]..

00002de1 <__c.4285>:
    2de1:	5b 41 49 4d 47 4f 3a 20 44 53 4a 20 73 65 6e 64     [AIMGO: DSJ send
    2df1:	20 66 61 69 6c 65 64 5d 0a 00                        failed]..

00002dfb <__c.4278>:
    2dfb:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 47 50 49     [AMIGO Write GPI
    2e0b:	42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a 00        B read error]..

00002e1a <__c.4271>:
    2e1a:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2e2a:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002e34 <__c.4264>:
    2e34:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 20 44 6f     [AMIGO Format Do
    2e44:	6e 65 5d 0a 00                                      ne]..

00002e49 <__c.4260>:
    2e49:	5b 41 4d 49 47 4f 20 66 6f 72 6d 61 74 5d 0a 00     [AMIGO format]..

00002e59 <__c.4219>:
    2e59:	5b 41 4d 49 47 4f 20 25 73 2c 20 50 3a 25 30 38     [AMIGO %s, P:%08
    2e69:	6c 78 48 2c 20 55 3a 25 64 20 43 3a 25 64 20 48     lxH, U:%d C:%d H
    2e79:	3a 25 64 20 53 3a 25 64 5d 0a 00                    :%d S:%d]..

00002e84 <__c.4249>:
    2e84:	5b 41 4d 49 47 4f 20 76 65 72 69 66 79 20 50 3a     [AMIGO verify P:
    2e94:	25 30 38 6c 58 48 2c 20 73 65 63 74 6f 72 73 3a     %08lXH, sectors:
    2ea4:	25 30 34 58 48 5d 0a 00                             %04XH]..

00002eac <__c.4226>:
    2eac:	5b 41 4d 49 47 4f 20 25 73 20 70 6f 73 20 4f 56     [AMIGO %s pos OV
    2ebc:	45 52 46 4c 4f 57 5d 0a 00                          ERFLOW]..

00002ec5 <__c.4212>:
    2ec5:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2ed5:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002edf <__c.4210>:
    2edf:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 73 74 61 74     [AMIGO send stat
    2eef:	75 73 5d 0a 00                                      us]..

00002ef4 <__c.4204>:
    2ef4:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2f04:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002f0e <__c.4202>:
    2f0e:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 6c 6f 67 69     [AMIGO send logi
    2f1e:	63 61 6c 20 61 64 64 72 65 73 73 5d 0a 00           cal address]..

00002f2c <__c.4196>:
    2f2c:	5b 41 4d 49 47 4f 20 72 65 71 75 65 73 74 20 73     [AMIGO request s
    2f3c:	74 61 74 75 73 5d 0a 00                             tatus]..

00002f44 <__c.4200>:
    2f44:	5b 53 43 20 50 52 49 4e 54 45 52 20 54 61 6c 6b     [SC PRINTER Talk
    2f54:	3a 20 25 30 32 58 48 5d 0a 00                       : %02XH]..

00002f5e <__c.4198>:
    2f5e:	5b 53 43 20 50 52 49 4e 54 45 52 20 4c 69 73 74     [SC PRINTER List
    2f6e:	65 6e 3a 20 25 30 32 58 48 5d 0a 00                 en: %02XH]..

00002f7a <__c.4193>:
    2f7a:	25 30 38 6c 64 0d 00                                %08ld..

00002f81 <__c.4187>:
    2f81:	77 72 69 74 65 20 66 61 69 6c 65 64 3a 20 77 61     write failed: wa
    2f91:	6e 74 65 64 20 25 64 2c 20 67 6f 74 3a 25 64 0a     nted %d, got:%d.
	...

00002fa2 <__c.4181>:
    2fa2:	0a 44 4f 4e 45 3a 20 25 30 38 6c 64 0a 00           .DONE: %08ld..

00002fb0 <__c.4179>:
    2fb0:	45 52 52 4f 52 20 64 75 72 72 69 6e 67 20 77 72     ERROR durring wr
    2fc0:	69 74 65 0a 00                                      ite..

00002fc5 <__c.4173>:
    2fc5:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

00002fd1 <__c.4171>:
    2fd1:	43 61 70 74 75 72 69 6e 67 20 70 6c 6f 74 20 74     Capturing plot t
    2fe1:	6f 3a 25 73 0a 00                                   o:%s..

00002fe7 <__c.4169>:
    2fe7:	2f 70 6c 6f 74 2d 25 30 32 64 25 73 25 30 34 64     /plot-%02d%s%04d
    2ff7:	2d 25 30 32 64 25 30 32 64 25 30 32 64 2e 70 6c     -%02d%02d%02d.pl
    3007:	74 00                                               t.

00003009 <__c.4837>:
    3009:	09 46 6f 72 6d 61 74 69 6e 67 3a 20 77 72 6f 74     .Formating: wrot
    3019:	65 20 25 6c 64 20 73 65 63 74 6f 72 73 0a 00        e %ld sectors..

00003028 <__c.4835>:
    3028:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    3038:	3a 20 73 65 63 74 6f 72 73 20 69 73 20 30 0a 00     : sectors is 0..

00003048 <__c.4833>:
    3048:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    3058:	3a 20 64 69 72 73 65 63 74 6f 72 73 20 69 73 20     : dirsectors is 
    3068:	30 0a 00                                            0..

0000306b <__c.4831>:
    306b:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    307b:	3a 20 6c 69 66 6c 61 62 65 6c 20 69 73 20 65 6d     : liflabel is em
    308b:	70 74 79 0a 00                                      pty..

00003090 <__c.4829>:
    3090:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    30a0:	3a 20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69     : lifimagename i
    30b0:	73 20 65 6d 70 74 79 0a 00                          s empty..

000030b9 <__c.4816>:
    30b9:	72 65 6e 61 6d 65 64 3a 20 25 31 30 73 20 74 6f     renamed: %10s to
    30c9:	20 25 31 30 73 0a 00                                 %10s..

000030d0 <__c.4814>:
    30d0:	6c 69 66 5f 72 65 6e 61 6d 65 3a 5b 25 73 5d 20     lif_rename:[%s] 
    30e0:	6c 69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f     lif name:[%s] no
    30f0:	74 20 66 6f 75 6e 64 0a 00                          t found..

000030f9 <__c.4812>:
    30f9:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    3109:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 63 6f 6e      new lifname con
    3119:	74 61 69 6e 73 20 62 61 64 20 63 68 61 72 61 63     tains bad charac
    3129:	74 65 72 73 0a 00                                   ters..

0000312f <__c.4810>:
    312f:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    313f:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 69 73 20      new lifname is 
    314f:	65 6d 70 74 79 0a 00                                empty..

00003156 <__c.4808>:
    3156:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    3166:	20 6f 6c 64 20 6c 69 66 6e 61 6d 65 20 69 73 20      old lifname is 
    3176:	65 6d 70 74 79 0a 00                                empty..

0000317d <__c.4806>:
    317d:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    318d:	20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69 73      lifimagename is
    319d:	20 65 6d 70 74 79 0a 00                              empty..

000031a5 <__c.4797>:
    31a5:	44 65 6c 65 74 65 64 3a 20 25 31 30 73 0a 00        Deleted: %10s..

000031b4 <__c.4795>:
    31b4:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 20 6c     LIF image:[%s] l
    31c4:	69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f 74     if name:[%s] not
    31d4:	20 66 6f 75 6e 64 0a 00                              found..

000031dc <__c.4793>:
    31dc:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    31ec:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 0a 00        LIF name:[%s]..

000031fb <__c.4791>:
    31fb:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    320b:	66 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     fname is empty..

0000321b <__c.4789>:
    321b:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    322b:	66 69 6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d     fimagename is em
    323b:	70 74 79 0a 00                                      pty..

00003240 <__c.4781>:
    3240:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

0000324e <__c.4776>:
    324e:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

0000325c <__c.4774>:
    325c:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    326c:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    327c:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

0000328c <__c.4772>:
    328c:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    329c:	73 0a 00                                            s..

0000329f <__c.4770>:
    329f:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    32af:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    32bf:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

000032ce <__c.4768>:
    32ce:	6c 69 66 5f 61 64 64 3a 20 75 73 65 72 66 69 6c     lif_add: userfil
    32de:	65 20 69 73 20 65 6d 70 74 79 0a 00                 e is empty..

000032ea <__c.4766>:
    32ea:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 6e 61 6d 65     lif_add: lifname
    32fa:	20 69 73 20 65 6d 70 74 79 0a 00                     is empty..

00003305 <__c.4764>:
    3305:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 69 6d 61 67     lif_add: lifimag
    3315:	65 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     ename is empty..

00003325 <__c.4747>:
    3325:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

00003333 <__c.4742>:
    3333:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003341 <__c.4740>:
    3341:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    3351:	73 0a 00                                            s..

00003354 <__c.4738>:
    3354:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    3364:	75 6e 64 3a 25 73 0a 00                             und:%s..

0000336c <__c.4721>:
    336c:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

0000337a <__c.4718>:
    337a:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    338a:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    339a:	20 65 72 72 6f 72 0a 00                              error..

000033a2 <__c.4710>:
    33a2:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

000033b0 <__c.4708>:
    33b0:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    33c0:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    33d0:	20 65 72 72 6f 72 0a 00                              error..

000033d8 <__c.4705>:
    33d8:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    33e8:	5f 61 73 5f 61 73 63 69 69 3a 20 75 6e 65 78 70     _as_ascii: unexp
    33f8:	65 63 74 65 64 20 63 6f 6e 74 72 6f 6c 20 62 79     ected control by
    3408:	74 65 3a 5b 25 30 32 58 48 5d 20 40 20 6f 66 66     te:[%02XH] @ off
    3418:	73 65 74 3a 20 25 38 6c 78 2c 20 69 6e 64 3a 25     set: %8lx, ind:%
    3428:	30 32 58 48 0a 00                                   02XH..

0000342e <__c.4703>:
    342e:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    343e:	5f 61 73 5f 61 73 63 69 69 3a 20 73 74 72 69 6e     _as_ascii: strin
    344e:	67 20 74 6f 6f 20 62 69 67 20 73 69 7a 65 20 3d     g too big size =
    345e:	20 25 64 0a 00                                       %d..

00003463 <__c.4699>:
    3463:	45 78 74 72 61 63 74 69 6e 67 3a 20 25 73 0a 00     Extracting: %s..

00003473 <__c.4697>:
    3473:	46 69 6c 65 20 25 73 20 68 61 73 20 77 72 6f 6e     File %s has wron
    3483:	67 20 74 79 70 65 3a 5b 25 30 34 58 48 5d 20 65     g type:[%04XH] e
    3493:	78 70 65 63 74 65 64 20 30 78 45 30 31 30 2e 2e     xpected 0xE010..
    34a3:	30 78 45 30 31 33 0a 00                             0xE013..

000034ab <__c.4695>:
    34ab:	4c 49 46 20 46 69 6c 65 20 6e 6f 74 20 66 6f 75     LIF File not fou
    34bb:	6e 64 3a 25 73 0a 00                                nd:%s..

000034c2 <__c.4693>:
    34c2:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    34d2:	75 6e 64 3a 25 73 0a 00                             und:%s..

000034da <__c.4669>:
    34da:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

000034e8 <__c.4667>:
    34e8:	46 69 6c 65 20 53 65 63 74 6f 72 73 3a 20 20 20     File Sectors:   
    34f8:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

00003501 <__c.4665>:
    3501:	46 69 72 73 74 20 53 65 63 74 6f 72 3a 20 20 20     First Sector:   
    3511:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

0000351a <__c.4663>:
    351a:	49 6e 64 65 78 3a 20 20 20 20 20 20 20 20 20 20     Index:          
    352a:	20 20 25 34 64 0a 00                                  %4d..

00003531 <__c.4661>:
    3531:	4e 61 6d 65 3a 20 20 20 20 20 20 20 20 20 20 20     Name:           
    3541:	20 20 20 25 73 0a 00                                   %s..

00003548 <__c.4659>:
    3548:	4e 65 77 20 44 69 72 65 63 74 6f 72 79 20 49 6e     New Directory In
    3558:	66 6f 72 6d 61 74 69 6f 6e 20 41 46 54 45 52 20     formation AFTER 
    3568:	77 72 69 74 65 0a 00                                write..

0000356f <__c.4657>:
    356f:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    357f:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    358f:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

0000359f <__c.4655>:
    359f:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    35af:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    35bf:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

000035ce <__c.4653>:
    35ce:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    35de:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    35ee:	66 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 0a 00     file not found..

000035fe <__c.4651>:
    35fe:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    360e:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    361e:	66 69 6c 65 20 69 73 20 65 6d 70 74 79 0a 00        file is empty..

0000362d <__c.4649>:
    362d:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    363d:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 6e     le_as_e010: lifn
    364d:	61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00           ame is empty..

0000365b <__c.4647>:
    365b:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    366b:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 69     le_as_e010: lifi
    367b:	6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d 70 74     magename is empt
    368b:	79 0a 00                                            y..

0000368e <__c.4633>:
    368e:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

0000369c <__c.4631>:
    369c:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

000036aa <__c.4626>:
    36aa:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

000036b8 <__c.4609>:
    36b8:	45 78 70 65 63 74 65 64 20 73 65 63 74 6f 72 20     Expected sector 
    36c8:	62 6f 75 6e 64 72 79 2c 20 6f 66 66 73 65 74 3a     boundry, offset:
    36d8:	25 64 0a 00                                         %d..

000036dc <__c.4592>:
    36dc:	6c 69 66 5f 65 30 31 30 5f 64 61 70 5f 73 65 63     lif_e010_dap_sec
    36ec:	74 6f 72 3a 20 65 78 70 65 63 74 65 64 20 73 65     tor: expected se
    36fc:	63 74 6f 72 20 62 6f 75 6e 64 72 79 3a 20 6f 66     ctor boundry: of
    370c:	66 73 65 74 3a 25 64 0a 00                          fset:%d..

00003715 <__c.4578>:
    3715:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    3725:	73 5d 20 6c 69 66 6c 61 62 65 6c 20 74 6f 6f 20     s] liflabel too 
    3735:	62 69 67 0a 00                                      big..

0000373a <__c.4576>:
    373a:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    374a:	73 5d 20 69 6e 76 61 6c 69 64 20 63 68 61 72 61     s] invalid chara
    375a:	63 74 65 72 73 0a 00                                cters..

00003761 <__c.4569>:
    3761:	25 38 6c 64 20 46 72 65 65 20 73 65 63 74 6f 72     %8ld Free sector
    3771:	73 0a 00                                            s..

00003774 <__c.4567>:
    3774:	25 38 6c 64 20 55 73 65 64 20 73 65 63 74 6f 72     %8ld Used sector
    3784:	73 0a 00                                            s..

00003787 <__c.4565>:
    3787:	25 38 6c 64 20 44 69 72 20 20 73 65 63 74 6f 72     %8ld Dir  sector
    3797:	73 0a 00                                            s..

0000379a <__c.4563>:
    379a:	25 38 6c 64 20 44 69 72 20 20 73 74 61 72 74 0a     %8ld Dir  start.
	...

000037ab <__c.4561>:
    37ab:	25 38 6c 64 20 50 75 72 67 65 64 0a 00              %8ld Purged..

000037b8 <__c.4559>:
    37b8:	25 38 6c 64 20 46 69 6c 65 73 0a 00                 %8ld Files..

000037c4 <__c.4557>:
    37c4:	0a 00                                               ..

000037c6 <__c.4554>:
    37c6:	25 2d 31 30 73 20 20 25 30 34 58 68 20 20 20 20     %-10s  %04Xh    
    37d6:	20 20 25 38 6c 58 68 20 20 20 25 39 6c 64 25 63       %8lXh   %9ld%c
    37e6:	20 20 20 20 20 20 25 34 64 20 20 20 25 73 0a 00           %4d   %s..

000037f6 <__c.4552>:
    37f6:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3806:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    3816:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3826:	6f 72 73 3a 25 6c 64 20 21 3d 20 46 69 6c 65 53     ors:%ld != FileS
    3836:	65 63 74 6f 72 73 3a 25 6c 64 0a 00                 ectors:%ld..

00003842 <__c.4549>:
    3842:	4e 41 4d 45 20 20 20 20 20 20 20 20 20 54 59 50     NAME         TYP
    3852:	45 20 20 20 53 54 41 52 54 20 53 45 43 54 4f 52     E   START SECTOR
    3862:	20 20 20 20 20 20 20 20 53 49 5a 45 20 20 20 20             SIZE    
    3872:	52 45 43 53 49 5a 45 20 20 20 44 41 54 45 0a 00     RECSIZE   DATE..

00003882 <__c.4547>:
    3882:	56 6f 6c 75 6d 65 3a 5b 25 73 5d 20 44 61 74 65     Volume:[%s] Date
    3892:	3a 5b 25 73 5d 0a 00                                :[%s]..

00003899 <__c.4537>:
    3899:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    38a9:	5b 25 73 5d 20 65 72 72 6f 72 20 64 69 72 65 63     [%s] error direc
    38b9:	74 6f 72 79 20 63 68 65 63 6b 20 66 61 69 6c 65     tory check faile
    38c9:	64 0a 00                                            d..

000038cc <__c.4535>:
    38cc:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    38dc:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    38ec:	65 20 76 61 6c 69 64 61 74 65 20 66 61 69 6c 65     e validate faile
    38fc:	64 0a 00                                            d..

000038ff <__c.4533>:
    38ff:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    390f:	5b 25 73 5d 20 65 72 72 6f 72 20 72 65 61 64 20     [%s] error read 
    391f:	76 6f 6c 75 6d 65 20 68 65 61 64 65 72 20 66 61     volume header fa
    392f:	69 6c 65 64 0a 00                                   iled..

00003935 <__c.4531>:
    3935:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3945:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    3955:	65 20 68 65 61 64 65 72 20 61 72 65 61 20 74 6f     e header area to
    3965:	6f 20 73 6d 61 6c 6c 3a 5b 25 6c 64 5d 0a 00        o small:[%ld]..

00003974 <__c.4518>:
    3974:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 69 6e 64 65     lif_newdir: inde
    3984:	78 3a 5b 25 64 5d 20 61 64 64 69 6e 67 20 61 74     x:[%d] adding at
    3994:	3a 5b 25 6c 64 5d 74 6f 20 70 75 72 67 65 64 20     :[%ld]to purged 
    39a4:	73 70 61 63 65 3a 5b 25 6c 64 5d 20 73 65 63 74     space:[%ld] sect
    39b4:	6f 72 73 2c 20 66 72 65 65 3a 5b 25 6c 64 5d 0a     ors, free:[%ld].
	...

000039c5 <__c.4515>:
    39c5:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    39d5:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    39e5:	65 3a 5b 25 6c 64 5d 0a 00                          e:[%ld]..

000039ee <__c.4513>:
    39ee:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    39fe:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    3a0e:	65 3a 5b 25 6c 64 5d 20 66 6f 72 20 73 69 7a 65     e:[%ld] for size
    3a1e:	3a 5b 25 6c 64 5d 0a 00                             :[%ld]..

00003a26 <__c.4501>:
    3a26:	6c 69 66 5f 75 70 64 61 74 65 5f 66 72 65 65 3a     lif_update_free:
    3a36:	5b 25 73 5d 20 65 72 72 6f 72 20 70 72 65 76 69     [%s] error previ
    3a46:	6f 75 73 20 72 65 63 6f 72 64 20 66 69 6c 65 20     ous record file 
    3a56:	61 72 65 61 20 6f 76 65 72 6c 61 70 73 20 74 68     area overlaps th
    3a66:	69 73 20 6f 6e 65 3a 5b 25 73 5d 0a 00              is one:[%s]..

00003a73 <__c.4476>:
    3a73:	6c 69 66 5f 63 68 65 63 6b 5f 64 69 72 3a 20 65     lif_check_dir: e
    3a83:	72 72 6f 72 2c 20 69 6e 64 65 78 3a 25 64 0a 00     rror, index:%d..

00003a93 <__c.4467>:
    3a93:	6c 69 66 5f 63 68 65 63 6b 64 69 72 69 6e 64 65     lif_checkdirinde
    3aa3:	78 3a 5b 25 73 5d 20 64 69 72 65 63 6f 72 79 20     x:[%s] direcory 
    3ab3:	69 6e 64 65 78 3a 5b 25 64 5d 20 6f 75 74 20 6f     index:[%d] out o
    3ac3:	66 20 62 6f 75 6e 64 73 0a 00                       f bounds..

00003acd <__c.4448>:
    3acd:	09 57 72 6f 74 65 3a 20 25 6c 64 0a 00              .Wrote: %ld..

00003ada <__c.4443>:
    3ada:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

00003ae7 <__c.4438>:
    3ae7:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

00003af4 <__c.4430>:
    3af4:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

00003b01 <__c.4428>:
    3b01:	43 72 65 61 74 69 6e 67 3a 25 73 2c 20 4c 61 62     Creating:%s, Lab
    3b11:	65 6c 3a 5b 25 73 5d 2c 20 44 69 72 65 63 74 6f     el:[%s], Directo
    3b21:	72 79 20 53 74 61 72 74 20 25 6c 64 2c 20 44 69     ry Start %ld, Di
    3b31:	72 65 63 74 6f 72 79 20 53 69 7a 65 3a 20 25 6c     rectory Size: %l
    3b41:	64 2c 20 46 69 6c 65 20 53 65 63 74 6f 72 73 3a     d, File Sectors:
    3b51:	25 6c 64 0a 00                                      %ld..

00003b56 <__c.4412>:
    3b56:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3b66:	73 5d 20 69 6e 76 61 6c 69 64 20 73 65 63 74 6f     s] invalid secto
    3b76:	72 20 73 69 7a 65 3a 25 6c 64 0a 00                 r size:%ld..

00003b82 <__c.4410>:
    3b82:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3b92:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3ba2:	79 74 65 73 20 3d 3d 20 30 0a 00                    ytes == 0..

00003bad <__c.4408>:
    3bad:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3bbd:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    3bcd:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3bdd:	6f 72 73 3a 25 6c 64 20 3c 20 46 69 6c 65 53 65     ors:%ld < FileSe
    3bed:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003bf8 <__c.4406>:
    3bf8:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3c08:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3c18:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3c28:	6f 72 73 3a 25 6c 64 20 3e 20 46 69 6c 65 53 65     ors:%ld > FileSe
    3c38:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003c43 <__c.4404>:
    3c43:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3c53:	73 5d 20 69 6e 76 61 6c 69 64 20 56 6f 6c 75 6d     s] invalid Volum
    3c63:	65 20 4e 75 6d 62 65 72 3a 25 58 68 0a 00           e Number:%Xh..

00003c71 <__c.4402>:
    3c71:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3c81:	73 5d 20 69 6e 76 61 6c 69 64 20 65 6e 64 20 73     s] invalid end s
    3c91:	65 63 74 6f 72 3a 25 6c 58 68 20 3e 20 74 6f 74     ector:%lXh > tot
    3ca1:	61 6c 20 73 65 63 74 6f 72 73 3a 25 6c 58 68 0a     al sectors:%lXh.
	...

00003cb2 <__c.4400>:
    3cb2:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3cc2:	73 5d 20 69 6e 76 61 6c 69 64 20 73 74 61 72 74     s] invalid start
    3cd2:	20 73 65 63 74 6f 72 3a 25 6c 58 68 20 3c 20 66      sector:%lXh < f
    3ce2:	69 65 20 61 72 65 61 20 73 74 61 72 74 3a 25 6c     ie area start:%l
    3cf2:	58 68 0a 00                                         Xh..

00003cf6 <__c.4398>:
    3cf6:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3d06:	73 5d 20 69 6e 76 61 6c 69 64 20 4e 61 6d 65 0a     s] invalid Name.
	...

00003d17 <__c.4392>:
    3d17:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3d27:	69 64 20 66 69 6c 65 20 73 74 61 72 74 20 3e 20     id file start > 
    3d37:	69 6d 61 67 65 20 73 69 7a 65 0a 00                 image size..

00003d43 <__c.4390>:
    3d43:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3d53:	69 64 20 44 69 72 65 63 74 6f 72 79 20 53 65 63     id Directory Sec
    3d63:	74 6f 72 20 43 6f 75 6e 74 20 3c 20 31 0a 00        tor Count < 1..

00003d72 <__c.4388>:
    3d72:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3d82:	69 64 20 73 74 61 72 74 20 73 65 63 74 6f 72 3a     id start sector:
    3d92:	25 6c 64 0a 00                                      %ld..

00003d97 <__c.4386>:
    3d97:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3da7:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    3db7:	65 74 20 32 32 26 32 33 20 73 68 6f 75 6c 64 20     et 22&23 should 
    3dc7:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00003dd0 <__c.4384>:
    3dd0:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3de0:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    3df0:	65 74 20 31 34 26 31 35 20 73 68 6f 75 6c 64 20     et 14&15 should 
    3e00:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00003e09 <__c.4382>:
    3e09:	4c 49 46 20 56 65 72 73 69 6f 6e 3a 20 25 30 34     LIF Version: %04
    3e19:	58 48 20 3e 20 31 0a 00                             XH > 1..

00003e21 <__c.4380>:
    3e21:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3e31:	69 64 20 53 79 73 74 65 6d 33 30 30 30 20 49 44     id System3000 ID
    3e41:	20 28 25 30 34 58 48 29 20 65 78 70 65 63 74 65      (%04XH) expecte
    3e51:	64 20 31 30 30 30 48 0a 00                          d 1000H..

00003e5a <__c.4378>:
    3e5a:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3e6a:	69 64 20 56 6f 6c 75 6d 65 20 4e 61 6d 65 00        id Volume Name.

00003e79 <__c.4371>:
    3e79:	0a 00                                               ..

00003e7b <__c.4369>:
    3e7b:	44 49 52 20 46 69 6c 65 20 44 61 74 65 3a 20 20     DIR File Date:  
    3e8b:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003e95 <__c.4367>:
    3e95:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 20     DIR File sector 
    3ea5:	73 69 7a 65 3a 20 25 38 58 68 0a 00                 size: %8Xh..

00003eb1 <__c.4365>:
    3eb1:	44 49 52 20 46 69 6c 65 20 62 79 74 65 73 3a 20     DIR File bytes: 
    3ec1:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003ece <__c.4363>:
    3ece:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 73     DIR File sectors
    3ede:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

00003eeb <__c.4361>:
    3eeb:	44 49 52 20 46 69 6c 65 20 73 74 61 72 74 3a 20     DIR File start: 
    3efb:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003f08 <__c.4359>:
    3f08:	44 49 52 20 46 69 6c 65 20 56 6f 6c 75 6d 65 23     DIR File Volume#
    3f18:	3a 20 20 20 20 20 25 38 58 68 0a 00                 :     %8Xh..

00003f24 <__c.4357>:
    3f24:	44 49 52 20 46 69 6c 65 20 54 79 70 65 3a 20 20     DIR File Type:  
    3f34:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00003f40 <__c.4355>:
    3f40:	44 49 52 20 46 69 6c 65 20 4e 61 6d 65 3a 20 20     DIR File Name:  
    3f50:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003f5a <__c.4353>:
    3f5a:	56 4f 4c 20 44 61 74 65 3a 20 20 20 20 20 20 20     VOL Date:       
    3f6a:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003f74 <__c.4351>:
    3f74:	56 4f 4c 20 4c 49 46 56 65 72 73 69 6f 6e 3a 20     VOL LIFVersion: 
    3f84:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00003f90 <__c.4349>:
    3f90:	56 4f 4c 20 33 30 30 30 4c 49 46 69 64 3a 20 20     VOL 3000LIFid:  
    3fa0:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00003fac <__c.4347>:
    3fac:	56 4f 4c 20 44 69 72 20 73 65 63 74 6f 72 73 3a     VOL Dir sectors:
    3fbc:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003fc9 <__c.4345>:
    3fc9:	56 4f 4c 20 44 69 72 20 73 74 61 72 74 3a 20 20     VOL Dir start:  
    3fd9:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003fe6 <__c.4343>:
    3fe6:	56 4f 4c 20 4c 49 46 69 64 3a 20 20 20 20 20 20     VOL LIFid:      
    3ff6:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00004002 <__c.4341>:
    4002:	56 4f 4c 20 4c 61 62 65 6c 3a 20 20 20 20 20 20     VOL Label:      
    4012:	20 20 20 20 20 20 25 73 0a 00                             %s..

0000401c <__c.4339>:
    401c:	4c 49 46 20 70 75 72 67 65 64 3a 20 20 20 20 20     LIF purged:     
    402c:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004039 <__c.4337>:
    4039:	4c 49 46 20 66 69 6c 65 73 3a 20 20 20 20 20 20     LIF files:      
    4049:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004056 <__c.4335>:
    4056:	4c 49 46 20 66 72 65 65 3a 20 20 20 20 20 20 20     LIF free:       
    4066:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004073 <__c.4333>:
    4073:	4c 49 46 20 75 73 65 64 3a 20 20 20 20 20 20 20     LIF used:       
    4083:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004090 <__c.4331>:
    4090:	4c 49 46 20 66 69 6c 65 20 73 65 63 74 6f 72 73     LIF file sectors
    40a0:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

000040ad <__c.4329>:
    40ad:	4c 49 46 20 66 69 6c 65 73 74 61 72 74 3a 20 20     LIF filestart:  
    40bd:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000040ca <__c.4327>:
    40ca:	4c 49 46 20 62 79 74 65 73 3a 20 20 20 20 20 20     LIF bytes:      
    40da:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000040e7 <__c.4325>:
    40e7:	4c 49 46 20 73 65 63 74 6f 72 73 3a 20 20 20 20     LIF sectors:    
    40f7:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004104 <__c.4323>:
    4104:	4c 49 46 20 6e 61 6d 65 3a 20 20 20 20 20 20 20     LIF name:       
    4114:	20 20 20 20 20 20 25 73 0a 00                             %s..

0000411e <__c.4321>:
    411e:	0a 25 73 0a 00                                      .%s..

00004123 <__c.4198>:
    4123:	6c 69 66 5f 77 72 69 74 65 3a 20 57 72 69 74 65     lif_write: Write
    4133:	3a 5b 25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c     :[%s] offset:[%l
    4143:	64 5d 20 77 72 69 74 65 3a 5b 25 64 5d 20 65 78     d] write:[%d] ex
    4153:	70 65 63 74 65 64 3a 5b 25 64 5d 0a 00              pected:[%d]..

00004160 <__c.4189>:
    4160:	6c 69 66 5f 72 65 61 64 3a 20 72 65 61 64 3a 5b     lif_read: read:[
    4170:	25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c 64 5d     %s] offset:[%ld]
    4180:	20 77 72 69 74 65 3a 5b 25 6c 64 5d 20 65 78 70      write:[%ld] exp
    4190:	65 63 74 65 64 3a 5b 25 64 5d 0a 00                 ected:[%d]..

0000419c <__c.4180>:
    419c:	6c 69 66 5f 72 65 61 64 5f 6d 73 67 3a 20 25 73     lif_read_msg: %s
    41ac:	20 53 65 65 6b 20 65 72 72 6f 72 20 25 6c 64 0a      Seek error %ld.
	...

000041bd <__c.4173>:
    41bd:	6c 69 66 5f 73 74 61 74 3a 20 43 61 6e 27 74 20     lif_stat: Can't 
    41cd:	73 74 61 74 3a 25 73 0a 00                          stat:%s..

000041d6 <__c.4167>:
    41d6:	6c 69 66 5f 6f 70 65 6e 3a 20 43 61 6e 27 74 20     lif_open: Can't 
    41e6:	6f 70 65 6e 3a 5b 25 73 5d 20 6d 6f 64 65 3a 5b     open:[%s] mode:[
    41f6:	25 73 5d 0a 00                                      %s]..

000041fb <__c.4155>:
    41fb:	6c 69 66 5f 66 72 65 65 3a 20 4e 55 4c 4c 20 70     lif_free: NULL p
    420b:	6f 69 6e 74 65 72 0a 00                             ointer..

00004213 <__c.4150>:
    4213:	6c 69 66 5f 63 61 6c 6c 6f 63 3a 5b 25 6c 64 5d     lif_calloc:[%ld]
    4223:	20 6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65      not enough free
    4233:	20 6d 65 6d 6f 72 79 0a 00                           memory..

0000423c <__c.4144>:
    423c:	44 69 73 6b 3a 20 25 73 20 6e 6f 74 20 66 6f 75     Disk: %s not fou
    424c:	6e 64 20 69 6e 20 68 70 64 69 72 2e 69 6e 69 0a     nd in hpdir.ini.
	...

0000425d <__c.4131>:
    425d:	6c 69 66 20 61 64 64 20 6c 69 66 69 6d 61 67 65     lif add lifimage
    426d:	20 6c 69 66 6e 61 6d 65 20 66 72 6f 6d 5f 61 73      lifname from_as
    427d:	63 69 69 5f 66 69 6c 65 0a 6c 69 66 20 61 64 64     cii_file.lif add
    428d:	62 69 6e 20 6c 69 66 69 6d 61 67 65 20 6c 69 66     bin lifimage lif
    429d:	6e 61 6d 65 20 66 72 6f 6d 5f 6c 69 66 5f 66 69     name from_lif_fi
    42ad:	6c 65 0a 6c 69 66 20 63 72 65 61 74 65 20 6c 69     le.lif create li
    42bd:	66 69 6d 61 67 65 20 6c 61 62 65 6c 20 64 69 72     fimage label dir
    42cd:	65 63 74 6f 72 79 5f 73 65 63 74 6f 72 73 20 73     ectory_sectors s
    42dd:	65 63 74 6f 72 73 0a 6c 69 66 20 63 72 65 61 74     ectors.lif creat
    42ed:	65 64 69 73 6b 20 6c 69 66 69 6d 61 67 65 20 6c     edisk lifimage l
    42fd:	61 62 65 6c 20 6d 6f 64 65 6c 0a 6c 69 66 20 64     abel model.lif d
    430d:	65 6c 20 6c 69 66 69 6d 61 67 65 20 6e 61 6d 65     el lifimage name
    431d:	0a 6c 69 66 20 64 69 72 20 6c 69 66 69 6d 61 67     .lif dir lifimag
    432d:	65 0a 6c 69 66 20 65 78 74 72 61 63 74 20 6c 69     e.lif extract li
    433d:	66 69 6d 61 67 65 20 6c 69 66 6e 61 6d 65 20 74     fimage lifname t
    434d:	6f 5f 61 73 63 69 69 5f 66 69 6c 65 0a 6c 69 66     o_ascii_file.lif
    435d:	20 65 78 74 72 61 63 74 62 69 6e 20 6c 69 66 69      extractbin lifi
    436d:	6d 61 67 65 20 6c 69 66 6e 61 6d 65 20 74 6f 5f     mage lifname to_
    437d:	6c 69 66 5f 66 69 6c 65 0a 20 20 20 20 65 78 74     lif_file.    ext
    438d:	72 61 63 74 73 20 61 20 66 69 6c 65 20 69 6e 74     racts a file int
    439d:	6f 20 61 20 73 69 67 6c 65 20 66 69 6c 65 20 4c     o a sigle file L
    43ad:	49 46 20 69 6d 61 67 65 0a 6c 69 66 20 72 65 6e     IF image.lif ren
    43bd:	61 6d 65 20 6c 69 66 69 6d 61 67 65 20 6f 6c 64     ame lifimage old
    43cd:	6c 69 66 6e 61 6d 65 20 6e 65 77 6c 69 66 6e 61     lifname newlifna
    43dd:	6d 65 0a 55 73 65 20 2d 64 20 61 66 74 65 72 20     me.Use -d after 
    43ed:	66 69 72 73 74 20 6b 65 79 77 6f 72 64 20 27 6c     first keyword 'l
    43fd:	69 66 27 20 61 62 6f 76 65 20 66 6f 72 20 4c 49     if' above for LI
    440d:	46 20 66 69 6c 65 73 79 73 74 65 6d 20 64 65 62     F filesystem deb
    441d:	75 67 67 69 6e 67 0a 0a 00                          ugging...

00004426 <__c.4129>:
    4426:	6c 69 66 20 68 65 6c 70 0a 00                       lif help..

00004430 <__c.4597>:
    4430:	53 74 61 72 74 69 6e 67 20 47 50 49 42 20 54 41     Starting GPIB TA
    4440:	53 4b 0a 00                                         SK..

00004444 <__c.4595>:
    4444:	64 65 62 75 67 6c 65 76 65 6c 20 20 20 3d 20 25     debuglevel   = %
    4454:	30 34 78 48 0a 00                                   04xH..

0000445a <__c.4593>:
    445a:	47 50 49 42 20 53 74 61 74 65 20 69 6e 69 74 20     GPIB State init 
    446a:	64 6f 6e 65 0a 00                                   done..

00004470 <__c.4591>:
    4470:	47 50 49 42 20 46 69 6c 65 20 69 6e 69 74 20 64     GPIB File init d
    4480:	6f 6e 65 0a 00                                      one..

00004485 <__c.4589>:
    4485:	47 50 49 42 20 54 69 6d 65 72 20 69 6e 69 74 69     GPIB Timer initi
    4495:	61 6c 69 7a 65 64 0a 00                             alized..

0000449d <__c.4587>:
    449d:	47 50 49 42 20 54 69 6d 65 72 20 53 65 74 75 70     GPIB Timer Setup
    44ad:	0a 00                                               ..

000044af <__c.4585>:
    44af:	50 72 69 6e 74 65 72 20 69 6e 69 74 69 61 6c 69     Printer initiali
    44bf:	7a 65 64 0a 00                                      zed..

000044c4 <__c.4583>:
    44c4:	47 50 49 42 20 62 75 73 20 69 6e 69 74 69 61 6c     GPIB bus initial
    44d4:	69 7a 65 64 0a 00                                   ized..

000044da <__c.4581>:
    44da:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 65 64 0a     MMC initialized.
	...

000044eb <__c.4579>:
    44eb:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 69 6e 67     MMC initializing
    44fb:	20 73 74 61 72 74 0a 00                              start..

00004503 <__c.4577>:
    4503:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    4513:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

0000451d <__c.4575>:
    451d:	49 32 43 20 4c 43 44 20 69 6e 69 74 69 61 6c 69     I2C LCD initiali
    452d:	7a 61 74 69 6f 6e 20 44 6f 6e 65 0a 00              zation Done..

0000453a <__c.4573>:
    453a:	49 32 43 20 4c 43 44 20 69 6e 69 74 69 61 6c 69     I2C LCD initiali
    454a:	7a 61 74 69 6f 6e 20 73 74 61 72 74 0a 00           zation start..

00004558 <__c.4571>:
    4558:	53 59 53 54 45 4d 5f 54 41 53 4b 5f 43 4f 55 4e     SYSTEM_TASK_COUN
    4568:	54 45 52 5f 52 45 53 3a 25 6c 64 0a 00              TER_RES:%ld..

00004575 <__c.4569>:
    4575:	43 6c 6f 63 6b 20 63 6c 65 61 72 65 64 0a 00        Clock cleared..

00004584 <__c.4567>:
    4584:	69 6e 69 74 69 61 6c 69 7a 69 6e 67 20 52 54 43     initializing RTC
    4594:	0a 00                                               ..

00004596 <__c.4565>:
    4596:	69 6e 69 74 69 61 6c 69 7a 69 6e 67 20 49 32 43     initializing I2C
    45a6:	20 62 75 73 0a 00                                    bus..

000045ac <__c.4563>:
    45ac:	69 6e 69 74 69 61 6c 69 7a 69 6e 67 20 53 50 49     initializing SPI
    45bc:	20 62 75 73 0a 00                                    bus..

000045c2 <__c.4561>:
    45c2:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    45d2:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

000045dc <__c.4559>:
    45dc:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    45ec:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

000045f6 <__c.4557>:
    45f6:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    4606:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    4616:	35 64 69 73 6b 0a 00                                5disk..

0000461d <__c.4555>:
    461d:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

0000462d <__c.4553>:
    462d:	20 28 43 29 20 32 30 31 34 2d 32 30 32 30 20 62      (C) 2014-2020 b
    463d:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

0000464a <__c.4551>:
    464a:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    465a:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

00004669 <__c.4549>:
    4669:	52 65 71 75 65 73 74 65 64 20 42 61 75 64 20 52     Requested Baud R
    4679:	61 74 65 3a 20 25 6c 64 2c 20 41 63 74 75 61 6c     ate: %ld, Actual
    4689:	3a 20 25 6c 64 0a 00                                : %ld..

00004690 <__c.4547>:
    4690:	43 50 55 20 43 6c 6f 63 6b 20 3d 20 25 6c 75 0a     CPU Clock = %lu.
	...

000046a1 <__c.4545>:
    46a1:	53 74 61 72 74 0a 00                                Start..

000046a8 <__c.4537>:
    46a8:	45 72 72 6f 72 3a 5b 25 73 5d 0a 00                 Error:[%s]..

000046b4 <__c.4535>:
    46b4:	0a 3e 00                                            .>.

000046b7 <__c.4525>:
    46b7:	64 65 6c 61 79 5f 74 65 73 74 73 0a 68 65 6c 70     delay_tests.help
    46c7:	0a 6d 65 6d 0a 73 65 74 64 61 74 65 0a 74 69 6d     .mem.setdate.tim
    46d7:	65 0a 72 65 73 65 74 0a 0a 00                       e.reset...

000046e1 <__c.4519>:
    46e1:	4d 79 20 64 65 6c 61 79 73 0a 00                    My delays..

000046ec <__c.4517>:
    46ec:	53 79 73 74 65 6d 20 64 65 6c 61 79 73 0a 00        System delays..

000046fb <__c.4513>:
    46fb:	0a 00                                               ..

000046fd <__c.4511>:
    46fd:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    470d:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

00004717 <__c.4509>:
    4717:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    4727:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

00004731 <__c.4507>:
    4731:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    4741:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    4751:	35 64 69 73 6b 0a 00                                5disk..

00004758 <__c.4505>:
    4758:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

00004768 <__c.4503>:
    4768:	20 28 63 29 20 32 30 31 34 2d 32 30 32 30 20 62      (c) 2014-2020 b
    4778:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

00004785 <__c.4501>:
    4785:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    4795:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

000047a4 <__c.4499>:
    47a4:	53 74 61 6e 64 20 61 6c 6f 6e 65 20 76 65 72 73     Stand alone vers
    47b4:	69 6f 6e 20 6f 66 20 4c 49 46 20 75 74 69 6c 69     ion of LIF utili
    47c4:	74 69 65 73 20 66 6f 72 20 6c 69 6e 75 78 0a 00     ties for linux..

000047d4 <__ctors_end>:
    47d4:	11 24       	eor	r1, r1
    47d6:	1f be       	out	0x3f, r1	; 63
    47d8:	cf ef       	ldi	r28, 0xFF	; 255
    47da:	d0 e4       	ldi	r29, 0x40	; 64
    47dc:	de bf       	out	0x3e, r29	; 62
    47de:	cd bf       	out	0x3d, r28	; 61

000047e0 <__do_copy_data>:
    47e0:	17 e1       	ldi	r17, 0x17	; 23
    47e2:	a0 e0       	ldi	r26, 0x00	; 0
    47e4:	b1 e0       	ldi	r27, 0x01	; 1
    47e6:	e4 e1       	ldi	r30, 0x14	; 20
    47e8:	f2 ed       	ldi	r31, 0xD2	; 210
    47ea:	01 e0       	ldi	r16, 0x01	; 1
    47ec:	0b bf       	out	0x3b, r16	; 59
    47ee:	02 c0       	rjmp	.+4      	; 0x47f4 <__do_copy_data+0x14>
    47f0:	07 90       	elpm	r0, Z+
    47f2:	0d 92       	st	X+, r0
    47f4:	ae 30       	cpi	r26, 0x0E	; 14
    47f6:	b1 07       	cpc	r27, r17
    47f8:	d9 f7       	brne	.-10     	; 0x47f0 <__do_copy_data+0x10>

000047fa <__do_clear_bss>:
    47fa:	21 e2       	ldi	r18, 0x21	; 33
    47fc:	ae e0       	ldi	r26, 0x0E	; 14
    47fe:	b7 e1       	ldi	r27, 0x17	; 23
    4800:	01 c0       	rjmp	.+2      	; 0x4804 <.do_clear_bss_start>

00004802 <.do_clear_bss_loop>:
    4802:	1d 92       	st	X+, r1

00004804 <.do_clear_bss_start>:
    4804:	a6 34       	cpi	r26, 0x46	; 70
    4806:	b2 07       	cpc	r27, r18
    4808:	e1 f7       	brne	.-8      	; 0x4802 <.do_clear_bss_loop>
    480a:	0e 94 2b e1 	call	0x1c256	; 0x1c256 <main>
    480e:	0c 94 08 e9 	jmp	0x1d210	; 0x1d210 <_exit>

00004812 <__bad_interrupt>:
    4812:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00004816 <vfprintf>:
    4816:	2f 92       	push	r2
    4818:	3f 92       	push	r3
    481a:	4f 92       	push	r4
    481c:	5f 92       	push	r5
    481e:	6f 92       	push	r6
    4820:	7f 92       	push	r7
    4822:	8f 92       	push	r8
    4824:	9f 92       	push	r9
    4826:	af 92       	push	r10
    4828:	bf 92       	push	r11
    482a:	cf 92       	push	r12
    482c:	df 92       	push	r13
    482e:	ef 92       	push	r14
    4830:	ff 92       	push	r15
    4832:	0f 93       	push	r16
    4834:	1f 93       	push	r17
    4836:	cf 93       	push	r28
    4838:	df 93       	push	r29
    483a:	cd b7       	in	r28, 0x3d	; 61
    483c:	de b7       	in	r29, 0x3e	; 62
    483e:	60 97       	sbiw	r28, 0x10	; 16
    4840:	0f b6       	in	r0, 0x3f	; 63
    4842:	f8 94       	cli
    4844:	de bf       	out	0x3e, r29	; 62
    4846:	0f be       	out	0x3f, r0	; 63
    4848:	cd bf       	out	0x3d, r28	; 61
    484a:	7c 01       	movw	r14, r24
    484c:	1b 01       	movw	r2, r22
    484e:	6a 01       	movw	r12, r20
    4850:	fc 01       	movw	r30, r24
    4852:	17 82       	std	Z+7, r1	; 0x07
    4854:	16 82       	std	Z+6, r1	; 0x06
    4856:	83 81       	ldd	r24, Z+3	; 0x03
    4858:	81 ff       	sbrs	r24, 1
    485a:	44 c3       	rjmp	.+1672   	; 0x4ee4 <vfprintf+0x6ce>
    485c:	9e 01       	movw	r18, r28
    485e:	2f 5f       	subi	r18, 0xFF	; 255
    4860:	3f 4f       	sbci	r19, 0xFF	; 255
    4862:	39 01       	movw	r6, r18
    4864:	f7 01       	movw	r30, r14
    4866:	93 81       	ldd	r25, Z+3	; 0x03
    4868:	f1 01       	movw	r30, r2
    486a:	93 fd       	sbrc	r25, 3
    486c:	85 91       	lpm	r24, Z+
    486e:	93 ff       	sbrs	r25, 3
    4870:	81 91       	ld	r24, Z+
    4872:	1f 01       	movw	r2, r30
    4874:	88 23       	and	r24, r24
    4876:	09 f4       	brne	.+2      	; 0x487a <vfprintf+0x64>
    4878:	31 c3       	rjmp	.+1634   	; 0x4edc <vfprintf+0x6c6>
    487a:	85 32       	cpi	r24, 0x25	; 37
    487c:	39 f4       	brne	.+14     	; 0x488c <vfprintf+0x76>
    487e:	93 fd       	sbrc	r25, 3
    4880:	85 91       	lpm	r24, Z+
    4882:	93 ff       	sbrs	r25, 3
    4884:	81 91       	ld	r24, Z+
    4886:	1f 01       	movw	r2, r30
    4888:	85 32       	cpi	r24, 0x25	; 37
    488a:	39 f4       	brne	.+14     	; 0x489a <vfprintf+0x84>
    488c:	b7 01       	movw	r22, r14
    488e:	90 e0       	ldi	r25, 0x00	; 0
    4890:	0e 94 b3 76 	call	0xed66	; 0xed66 <fputc>
    4894:	56 01       	movw	r10, r12
    4896:	65 01       	movw	r12, r10
    4898:	e5 cf       	rjmp	.-54     	; 0x4864 <vfprintf+0x4e>
    489a:	10 e0       	ldi	r17, 0x00	; 0
    489c:	51 2c       	mov	r5, r1
    489e:	91 2c       	mov	r9, r1
    48a0:	ff e1       	ldi	r31, 0x1F	; 31
    48a2:	f9 15       	cp	r31, r9
    48a4:	d8 f0       	brcs	.+54     	; 0x48dc <vfprintf+0xc6>
    48a6:	8b 32       	cpi	r24, 0x2B	; 43
    48a8:	79 f0       	breq	.+30     	; 0x48c8 <vfprintf+0xb2>
    48aa:	38 f4       	brcc	.+14     	; 0x48ba <vfprintf+0xa4>
    48ac:	80 32       	cpi	r24, 0x20	; 32
    48ae:	79 f0       	breq	.+30     	; 0x48ce <vfprintf+0xb8>
    48b0:	83 32       	cpi	r24, 0x23	; 35
    48b2:	a1 f4       	brne	.+40     	; 0x48dc <vfprintf+0xc6>
    48b4:	f9 2d       	mov	r31, r9
    48b6:	f0 61       	ori	r31, 0x10	; 16
    48b8:	2e c0       	rjmp	.+92     	; 0x4916 <vfprintf+0x100>
    48ba:	8d 32       	cpi	r24, 0x2D	; 45
    48bc:	61 f0       	breq	.+24     	; 0x48d6 <vfprintf+0xc0>
    48be:	80 33       	cpi	r24, 0x30	; 48
    48c0:	69 f4       	brne	.+26     	; 0x48dc <vfprintf+0xc6>
    48c2:	29 2d       	mov	r18, r9
    48c4:	21 60       	ori	r18, 0x01	; 1
    48c6:	2d c0       	rjmp	.+90     	; 0x4922 <vfprintf+0x10c>
    48c8:	39 2d       	mov	r19, r9
    48ca:	32 60       	ori	r19, 0x02	; 2
    48cc:	93 2e       	mov	r9, r19
    48ce:	89 2d       	mov	r24, r9
    48d0:	84 60       	ori	r24, 0x04	; 4
    48d2:	98 2e       	mov	r9, r24
    48d4:	2a c0       	rjmp	.+84     	; 0x492a <vfprintf+0x114>
    48d6:	e9 2d       	mov	r30, r9
    48d8:	e8 60       	ori	r30, 0x08	; 8
    48da:	15 c0       	rjmp	.+42     	; 0x4906 <vfprintf+0xf0>
    48dc:	97 fc       	sbrc	r9, 7
    48de:	2d c0       	rjmp	.+90     	; 0x493a <vfprintf+0x124>
    48e0:	20 ed       	ldi	r18, 0xD0	; 208
    48e2:	28 0f       	add	r18, r24
    48e4:	2a 30       	cpi	r18, 0x0A	; 10
    48e6:	88 f4       	brcc	.+34     	; 0x490a <vfprintf+0xf4>
    48e8:	96 fe       	sbrs	r9, 6
    48ea:	06 c0       	rjmp	.+12     	; 0x48f8 <vfprintf+0xe2>
    48ec:	3a e0       	ldi	r19, 0x0A	; 10
    48ee:	13 9f       	mul	r17, r19
    48f0:	20 0d       	add	r18, r0
    48f2:	11 24       	eor	r1, r1
    48f4:	12 2f       	mov	r17, r18
    48f6:	19 c0       	rjmp	.+50     	; 0x492a <vfprintf+0x114>
    48f8:	8a e0       	ldi	r24, 0x0A	; 10
    48fa:	58 9e       	mul	r5, r24
    48fc:	20 0d       	add	r18, r0
    48fe:	11 24       	eor	r1, r1
    4900:	52 2e       	mov	r5, r18
    4902:	e9 2d       	mov	r30, r9
    4904:	e0 62       	ori	r30, 0x20	; 32
    4906:	9e 2e       	mov	r9, r30
    4908:	10 c0       	rjmp	.+32     	; 0x492a <vfprintf+0x114>
    490a:	8e 32       	cpi	r24, 0x2E	; 46
    490c:	31 f4       	brne	.+12     	; 0x491a <vfprintf+0x104>
    490e:	96 fc       	sbrc	r9, 6
    4910:	e5 c2       	rjmp	.+1482   	; 0x4edc <vfprintf+0x6c6>
    4912:	f9 2d       	mov	r31, r9
    4914:	f0 64       	ori	r31, 0x40	; 64
    4916:	9f 2e       	mov	r9, r31
    4918:	08 c0       	rjmp	.+16     	; 0x492a <vfprintf+0x114>
    491a:	8c 36       	cpi	r24, 0x6C	; 108
    491c:	21 f4       	brne	.+8      	; 0x4926 <vfprintf+0x110>
    491e:	29 2d       	mov	r18, r9
    4920:	20 68       	ori	r18, 0x80	; 128
    4922:	92 2e       	mov	r9, r18
    4924:	02 c0       	rjmp	.+4      	; 0x492a <vfprintf+0x114>
    4926:	88 36       	cpi	r24, 0x68	; 104
    4928:	41 f4       	brne	.+16     	; 0x493a <vfprintf+0x124>
    492a:	f1 01       	movw	r30, r2
    492c:	93 fd       	sbrc	r25, 3
    492e:	85 91       	lpm	r24, Z+
    4930:	93 ff       	sbrs	r25, 3
    4932:	81 91       	ld	r24, Z+
    4934:	1f 01       	movw	r2, r30
    4936:	81 11       	cpse	r24, r1
    4938:	b3 cf       	rjmp	.-154    	; 0x48a0 <vfprintf+0x8a>
    493a:	9b eb       	ldi	r25, 0xBB	; 187
    493c:	98 0f       	add	r25, r24
    493e:	93 30       	cpi	r25, 0x03	; 3
    4940:	20 f4       	brcc	.+8      	; 0x494a <vfprintf+0x134>
    4942:	99 2d       	mov	r25, r9
    4944:	90 61       	ori	r25, 0x10	; 16
    4946:	80 5e       	subi	r24, 0xE0	; 224
    4948:	07 c0       	rjmp	.+14     	; 0x4958 <vfprintf+0x142>
    494a:	9b e9       	ldi	r25, 0x9B	; 155
    494c:	98 0f       	add	r25, r24
    494e:	93 30       	cpi	r25, 0x03	; 3
    4950:	08 f0       	brcs	.+2      	; 0x4954 <vfprintf+0x13e>
    4952:	66 c1       	rjmp	.+716    	; 0x4c20 <vfprintf+0x40a>
    4954:	99 2d       	mov	r25, r9
    4956:	9f 7e       	andi	r25, 0xEF	; 239
    4958:	96 ff       	sbrs	r25, 6
    495a:	16 e0       	ldi	r17, 0x06	; 6
    495c:	9f 73       	andi	r25, 0x3F	; 63
    495e:	99 2e       	mov	r9, r25
    4960:	85 36       	cpi	r24, 0x65	; 101
    4962:	19 f4       	brne	.+6      	; 0x496a <vfprintf+0x154>
    4964:	90 64       	ori	r25, 0x40	; 64
    4966:	99 2e       	mov	r9, r25
    4968:	08 c0       	rjmp	.+16     	; 0x497a <vfprintf+0x164>
    496a:	86 36       	cpi	r24, 0x66	; 102
    496c:	21 f4       	brne	.+8      	; 0x4976 <vfprintf+0x160>
    496e:	39 2f       	mov	r19, r25
    4970:	30 68       	ori	r19, 0x80	; 128
    4972:	93 2e       	mov	r9, r19
    4974:	02 c0       	rjmp	.+4      	; 0x497a <vfprintf+0x164>
    4976:	11 11       	cpse	r17, r1
    4978:	11 50       	subi	r17, 0x01	; 1
    497a:	97 fe       	sbrs	r9, 7
    497c:	07 c0       	rjmp	.+14     	; 0x498c <vfprintf+0x176>
    497e:	1c 33       	cpi	r17, 0x3C	; 60
    4980:	50 f4       	brcc	.+20     	; 0x4996 <vfprintf+0x180>
    4982:	44 24       	eor	r4, r4
    4984:	43 94       	inc	r4
    4986:	41 0e       	add	r4, r17
    4988:	27 e0       	ldi	r18, 0x07	; 7
    498a:	0b c0       	rjmp	.+22     	; 0x49a2 <vfprintf+0x18c>
    498c:	18 30       	cpi	r17, 0x08	; 8
    498e:	38 f0       	brcs	.+14     	; 0x499e <vfprintf+0x188>
    4990:	27 e0       	ldi	r18, 0x07	; 7
    4992:	17 e0       	ldi	r17, 0x07	; 7
    4994:	05 c0       	rjmp	.+10     	; 0x49a0 <vfprintf+0x18a>
    4996:	27 e0       	ldi	r18, 0x07	; 7
    4998:	9c e3       	ldi	r25, 0x3C	; 60
    499a:	49 2e       	mov	r4, r25
    499c:	02 c0       	rjmp	.+4      	; 0x49a2 <vfprintf+0x18c>
    499e:	21 2f       	mov	r18, r17
    49a0:	41 2c       	mov	r4, r1
    49a2:	56 01       	movw	r10, r12
    49a4:	84 e0       	ldi	r24, 0x04	; 4
    49a6:	a8 0e       	add	r10, r24
    49a8:	b1 1c       	adc	r11, r1
    49aa:	f6 01       	movw	r30, r12
    49ac:	60 81       	ld	r22, Z
    49ae:	71 81       	ldd	r23, Z+1	; 0x01
    49b0:	82 81       	ldd	r24, Z+2	; 0x02
    49b2:	93 81       	ldd	r25, Z+3	; 0x03
    49b4:	04 2d       	mov	r16, r4
    49b6:	a3 01       	movw	r20, r6
    49b8:	0e 94 b5 e7 	call	0x1cf6a	; 0x1cf6a <__ftoa_engine>
    49bc:	6c 01       	movw	r12, r24
    49be:	f9 81       	ldd	r31, Y+1	; 0x01
    49c0:	fc 87       	std	Y+12, r31	; 0x0c
    49c2:	f0 ff       	sbrs	r31, 0
    49c4:	02 c0       	rjmp	.+4      	; 0x49ca <vfprintf+0x1b4>
    49c6:	f3 ff       	sbrs	r31, 3
    49c8:	06 c0       	rjmp	.+12     	; 0x49d6 <vfprintf+0x1c0>
    49ca:	91 fc       	sbrc	r9, 1
    49cc:	06 c0       	rjmp	.+12     	; 0x49da <vfprintf+0x1c4>
    49ce:	92 fe       	sbrs	r9, 2
    49d0:	06 c0       	rjmp	.+12     	; 0x49de <vfprintf+0x1c8>
    49d2:	00 e2       	ldi	r16, 0x20	; 32
    49d4:	05 c0       	rjmp	.+10     	; 0x49e0 <vfprintf+0x1ca>
    49d6:	0d e2       	ldi	r16, 0x2D	; 45
    49d8:	03 c0       	rjmp	.+6      	; 0x49e0 <vfprintf+0x1ca>
    49da:	0b e2       	ldi	r16, 0x2B	; 43
    49dc:	01 c0       	rjmp	.+2      	; 0x49e0 <vfprintf+0x1ca>
    49de:	00 e0       	ldi	r16, 0x00	; 0
    49e0:	8c 85       	ldd	r24, Y+12	; 0x0c
    49e2:	8c 70       	andi	r24, 0x0C	; 12
    49e4:	19 f0       	breq	.+6      	; 0x49ec <vfprintf+0x1d6>
    49e6:	01 11       	cpse	r16, r1
    49e8:	5a c2       	rjmp	.+1204   	; 0x4e9e <vfprintf+0x688>
    49ea:	9b c2       	rjmp	.+1334   	; 0x4f22 <vfprintf+0x70c>
    49ec:	97 fe       	sbrs	r9, 7
    49ee:	10 c0       	rjmp	.+32     	; 0x4a10 <vfprintf+0x1fa>
    49f0:	4c 0c       	add	r4, r12
    49f2:	fc 85       	ldd	r31, Y+12	; 0x0c
    49f4:	f4 ff       	sbrs	r31, 4
    49f6:	04 c0       	rjmp	.+8      	; 0x4a00 <vfprintf+0x1ea>
    49f8:	8a 81       	ldd	r24, Y+2	; 0x02
    49fa:	81 33       	cpi	r24, 0x31	; 49
    49fc:	09 f4       	brne	.+2      	; 0x4a00 <vfprintf+0x1ea>
    49fe:	4a 94       	dec	r4
    4a00:	14 14       	cp	r1, r4
    4a02:	74 f5       	brge	.+92     	; 0x4a60 <vfprintf+0x24a>
    4a04:	28 e0       	ldi	r18, 0x08	; 8
    4a06:	24 15       	cp	r18, r4
    4a08:	78 f5       	brcc	.+94     	; 0x4a68 <vfprintf+0x252>
    4a0a:	88 e0       	ldi	r24, 0x08	; 8
    4a0c:	48 2e       	mov	r4, r24
    4a0e:	2c c0       	rjmp	.+88     	; 0x4a68 <vfprintf+0x252>
    4a10:	96 fc       	sbrc	r9, 6
    4a12:	2a c0       	rjmp	.+84     	; 0x4a68 <vfprintf+0x252>
    4a14:	81 2f       	mov	r24, r17
    4a16:	90 e0       	ldi	r25, 0x00	; 0
    4a18:	8c 15       	cp	r24, r12
    4a1a:	9d 05       	cpc	r25, r13
    4a1c:	9c f0       	brlt	.+38     	; 0x4a44 <vfprintf+0x22e>
    4a1e:	3c ef       	ldi	r19, 0xFC	; 252
    4a20:	c3 16       	cp	r12, r19
    4a22:	3f ef       	ldi	r19, 0xFF	; 255
    4a24:	d3 06       	cpc	r13, r19
    4a26:	74 f0       	brlt	.+28     	; 0x4a44 <vfprintf+0x22e>
    4a28:	89 2d       	mov	r24, r9
    4a2a:	80 68       	ori	r24, 0x80	; 128
    4a2c:	98 2e       	mov	r9, r24
    4a2e:	0a c0       	rjmp	.+20     	; 0x4a44 <vfprintf+0x22e>
    4a30:	e2 e0       	ldi	r30, 0x02	; 2
    4a32:	f0 e0       	ldi	r31, 0x00	; 0
    4a34:	ec 0f       	add	r30, r28
    4a36:	fd 1f       	adc	r31, r29
    4a38:	e1 0f       	add	r30, r17
    4a3a:	f1 1d       	adc	r31, r1
    4a3c:	80 81       	ld	r24, Z
    4a3e:	80 33       	cpi	r24, 0x30	; 48
    4a40:	19 f4       	brne	.+6      	; 0x4a48 <vfprintf+0x232>
    4a42:	11 50       	subi	r17, 0x01	; 1
    4a44:	11 11       	cpse	r17, r1
    4a46:	f4 cf       	rjmp	.-24     	; 0x4a30 <vfprintf+0x21a>
    4a48:	97 fe       	sbrs	r9, 7
    4a4a:	0e c0       	rjmp	.+28     	; 0x4a68 <vfprintf+0x252>
    4a4c:	44 24       	eor	r4, r4
    4a4e:	43 94       	inc	r4
    4a50:	41 0e       	add	r4, r17
    4a52:	81 2f       	mov	r24, r17
    4a54:	90 e0       	ldi	r25, 0x00	; 0
    4a56:	c8 16       	cp	r12, r24
    4a58:	d9 06       	cpc	r13, r25
    4a5a:	2c f4       	brge	.+10     	; 0x4a66 <vfprintf+0x250>
    4a5c:	1c 19       	sub	r17, r12
    4a5e:	04 c0       	rjmp	.+8      	; 0x4a68 <vfprintf+0x252>
    4a60:	44 24       	eor	r4, r4
    4a62:	43 94       	inc	r4
    4a64:	01 c0       	rjmp	.+2      	; 0x4a68 <vfprintf+0x252>
    4a66:	10 e0       	ldi	r17, 0x00	; 0
    4a68:	97 fe       	sbrs	r9, 7
    4a6a:	06 c0       	rjmp	.+12     	; 0x4a78 <vfprintf+0x262>
    4a6c:	1c 14       	cp	r1, r12
    4a6e:	1d 04       	cpc	r1, r13
    4a70:	34 f4       	brge	.+12     	; 0x4a7e <vfprintf+0x268>
    4a72:	c6 01       	movw	r24, r12
    4a74:	01 96       	adiw	r24, 0x01	; 1
    4a76:	05 c0       	rjmp	.+10     	; 0x4a82 <vfprintf+0x26c>
    4a78:	85 e0       	ldi	r24, 0x05	; 5
    4a7a:	90 e0       	ldi	r25, 0x00	; 0
    4a7c:	02 c0       	rjmp	.+4      	; 0x4a82 <vfprintf+0x26c>
    4a7e:	81 e0       	ldi	r24, 0x01	; 1
    4a80:	90 e0       	ldi	r25, 0x00	; 0
    4a82:	01 11       	cpse	r16, r1
    4a84:	01 96       	adiw	r24, 0x01	; 1
    4a86:	11 23       	and	r17, r17
    4a88:	31 f0       	breq	.+12     	; 0x4a96 <vfprintf+0x280>
    4a8a:	21 2f       	mov	r18, r17
    4a8c:	30 e0       	ldi	r19, 0x00	; 0
    4a8e:	2f 5f       	subi	r18, 0xFF	; 255
    4a90:	3f 4f       	sbci	r19, 0xFF	; 255
    4a92:	82 0f       	add	r24, r18
    4a94:	93 1f       	adc	r25, r19
    4a96:	25 2d       	mov	r18, r5
    4a98:	30 e0       	ldi	r19, 0x00	; 0
    4a9a:	82 17       	cp	r24, r18
    4a9c:	93 07       	cpc	r25, r19
    4a9e:	14 f4       	brge	.+4      	; 0x4aa4 <vfprintf+0x28e>
    4aa0:	58 1a       	sub	r5, r24
    4aa2:	01 c0       	rjmp	.+2      	; 0x4aa6 <vfprintf+0x290>
    4aa4:	51 2c       	mov	r5, r1
    4aa6:	89 2d       	mov	r24, r9
    4aa8:	89 70       	andi	r24, 0x09	; 9
    4aaa:	49 f4       	brne	.+18     	; 0x4abe <vfprintf+0x2a8>
    4aac:	55 20       	and	r5, r5
    4aae:	39 f0       	breq	.+14     	; 0x4abe <vfprintf+0x2a8>
    4ab0:	b7 01       	movw	r22, r14
    4ab2:	80 e2       	ldi	r24, 0x20	; 32
    4ab4:	90 e0       	ldi	r25, 0x00	; 0
    4ab6:	0e 94 b3 76 	call	0xed66	; 0xed66 <fputc>
    4aba:	5a 94       	dec	r5
    4abc:	f7 cf       	rjmp	.-18     	; 0x4aac <vfprintf+0x296>
    4abe:	00 23       	and	r16, r16
    4ac0:	29 f0       	breq	.+10     	; 0x4acc <vfprintf+0x2b6>
    4ac2:	b7 01       	movw	r22, r14
    4ac4:	80 2f       	mov	r24, r16
    4ac6:	90 e0       	ldi	r25, 0x00	; 0
    4ac8:	0e 94 b3 76 	call	0xed66	; 0xed66 <fputc>
    4acc:	93 fc       	sbrc	r9, 3
    4ace:	09 c0       	rjmp	.+18     	; 0x4ae2 <vfprintf+0x2cc>
    4ad0:	55 20       	and	r5, r5
    4ad2:	39 f0       	breq	.+14     	; 0x4ae2 <vfprintf+0x2cc>
    4ad4:	b7 01       	movw	r22, r14
    4ad6:	80 e3       	ldi	r24, 0x30	; 48
    4ad8:	90 e0       	ldi	r25, 0x00	; 0
    4ada:	0e 94 b3 76 	call	0xed66	; 0xed66 <fputc>
    4ade:	5a 94       	dec	r5
    4ae0:	f7 cf       	rjmp	.-18     	; 0x4ad0 <vfprintf+0x2ba>
    4ae2:	97 fe       	sbrs	r9, 7
    4ae4:	4c c0       	rjmp	.+152    	; 0x4b7e <vfprintf+0x368>
    4ae6:	46 01       	movw	r8, r12
    4ae8:	d7 fe       	sbrs	r13, 7
    4aea:	02 c0       	rjmp	.+4      	; 0x4af0 <vfprintf+0x2da>
    4aec:	81 2c       	mov	r8, r1
    4aee:	91 2c       	mov	r9, r1
    4af0:	c6 01       	movw	r24, r12
    4af2:	88 19       	sub	r24, r8
    4af4:	99 09       	sbc	r25, r9
    4af6:	f3 01       	movw	r30, r6
    4af8:	e8 0f       	add	r30, r24
    4afa:	f9 1f       	adc	r31, r25
    4afc:	fe 87       	std	Y+14, r31	; 0x0e
    4afe:	ed 87       	std	Y+13, r30	; 0x0d
    4b00:	96 01       	movw	r18, r12
    4b02:	24 19       	sub	r18, r4
    4b04:	31 09       	sbc	r19, r1
    4b06:	38 8b       	std	Y+16, r19	; 0x10
    4b08:	2f 87       	std	Y+15, r18	; 0x0f
    4b0a:	01 2f       	mov	r16, r17
    4b0c:	10 e0       	ldi	r17, 0x00	; 0
    4b0e:	11 95       	neg	r17
    4b10:	01 95       	neg	r16
    4b12:	11 09       	sbc	r17, r1
    4b14:	3f ef       	ldi	r19, 0xFF	; 255
    4b16:	83 16       	cp	r8, r19
    4b18:	93 06       	cpc	r9, r19
    4b1a:	29 f4       	brne	.+10     	; 0x4b26 <vfprintf+0x310>
    4b1c:	b7 01       	movw	r22, r14
    4b1e:	8e e2       	ldi	r24, 0x2E	; 46
    4b20:	90 e0       	ldi	r25, 0x00	; 0
    4b22:	0e 94 b3 76 	call	0xed66	; 0xed66 <fputc>
    4b26:	c8 14       	cp	r12, r8
    4b28:	d9 04       	cpc	r13, r9
    4b2a:	4c f0       	brlt	.+18     	; 0x4b3e <vfprintf+0x328>
    4b2c:	8f 85       	ldd	r24, Y+15	; 0x0f
    4b2e:	98 89       	ldd	r25, Y+16	; 0x10
    4b30:	88 15       	cp	r24, r8
    4b32:	99 05       	cpc	r25, r9
    4b34:	24 f4       	brge	.+8      	; 0x4b3e <vfprintf+0x328>
    4b36:	ed 85       	ldd	r30, Y+13	; 0x0d
    4b38:	fe 85       	ldd	r31, Y+14	; 0x0e
    4b3a:	81 81       	ldd	r24, Z+1	; 0x01
    4b3c:	01 c0       	rjmp	.+2      	; 0x4b40 <vfprintf+0x32a>
    4b3e:	80 e3       	ldi	r24, 0x30	; 48
    4b40:	f1 e0       	ldi	r31, 0x01	; 1
    4b42:	8f 1a       	sub	r8, r31
    4b44:	91 08       	sbc	r9, r1
    4b46:	2d 85       	ldd	r18, Y+13	; 0x0d
    4b48:	3e 85       	ldd	r19, Y+14	; 0x0e
    4b4a:	2f 5f       	subi	r18, 0xFF	; 255
    4b4c:	3f 4f       	sbci	r19, 0xFF	; 255
    4b4e:	3e 87       	std	Y+14, r19	; 0x0e
    4b50:	2d 87       	std	Y+13, r18	; 0x0d
    4b52:	80 16       	cp	r8, r16
    4b54:	91 06       	cpc	r9, r17
    4b56:	2c f0       	brlt	.+10     	; 0x4b62 <vfprintf+0x34c>
    4b58:	b7 01       	movw	r22, r14
    4b5a:	90 e0       	ldi	r25, 0x00	; 0
    4b5c:	0e 94 b3 76 	call	0xed66	; 0xed66 <fputc>
    4b60:	d9 cf       	rjmp	.-78     	; 0x4b14 <vfprintf+0x2fe>
    4b62:	c8 14       	cp	r12, r8
    4b64:	d9 04       	cpc	r13, r9
    4b66:	41 f4       	brne	.+16     	; 0x4b78 <vfprintf+0x362>
    4b68:	9a 81       	ldd	r25, Y+2	; 0x02
    4b6a:	96 33       	cpi	r25, 0x36	; 54
    4b6c:	20 f4       	brcc	.+8      	; 0x4b76 <vfprintf+0x360>
    4b6e:	95 33       	cpi	r25, 0x35	; 53
    4b70:	19 f4       	brne	.+6      	; 0x4b78 <vfprintf+0x362>
    4b72:	3c 85       	ldd	r19, Y+12	; 0x0c
    4b74:	34 ff       	sbrs	r19, 4
    4b76:	81 e3       	ldi	r24, 0x31	; 49
    4b78:	b7 01       	movw	r22, r14
    4b7a:	90 e0       	ldi	r25, 0x00	; 0
    4b7c:	4e c0       	rjmp	.+156    	; 0x4c1a <vfprintf+0x404>
    4b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    4b80:	81 33       	cpi	r24, 0x31	; 49
    4b82:	19 f0       	breq	.+6      	; 0x4b8a <vfprintf+0x374>
    4b84:	9c 85       	ldd	r25, Y+12	; 0x0c
    4b86:	9f 7e       	andi	r25, 0xEF	; 239
    4b88:	9c 87       	std	Y+12, r25	; 0x0c
    4b8a:	b7 01       	movw	r22, r14
    4b8c:	90 e0       	ldi	r25, 0x00	; 0
    4b8e:	0e 94 b3 76 	call	0xed66	; 0xed66 <fputc>
    4b92:	11 11       	cpse	r17, r1
    4b94:	05 c0       	rjmp	.+10     	; 0x4ba0 <vfprintf+0x38a>
    4b96:	94 fc       	sbrc	r9, 4
    4b98:	18 c0       	rjmp	.+48     	; 0x4bca <vfprintf+0x3b4>
    4b9a:	85 e6       	ldi	r24, 0x65	; 101
    4b9c:	90 e0       	ldi	r25, 0x00	; 0
    4b9e:	17 c0       	rjmp	.+46     	; 0x4bce <vfprintf+0x3b8>
    4ba0:	b7 01       	movw	r22, r14
    4ba2:	8e e2       	ldi	r24, 0x2E	; 46
    4ba4:	90 e0       	ldi	r25, 0x00	; 0
    4ba6:	0e 94 b3 76 	call	0xed66	; 0xed66 <fputc>
    4baa:	1e 5f       	subi	r17, 0xFE	; 254
    4bac:	82 e0       	ldi	r24, 0x02	; 2
    4bae:	01 e0       	ldi	r16, 0x01	; 1
    4bb0:	08 0f       	add	r16, r24
    4bb2:	f3 01       	movw	r30, r6
    4bb4:	e8 0f       	add	r30, r24
    4bb6:	f1 1d       	adc	r31, r1
    4bb8:	80 81       	ld	r24, Z
    4bba:	b7 01       	movw	r22, r14
    4bbc:	90 e0       	ldi	r25, 0x00	; 0
    4bbe:	0e 94 b3 76 	call	0xed66	; 0xed66 <fputc>
    4bc2:	80 2f       	mov	r24, r16
    4bc4:	01 13       	cpse	r16, r17
    4bc6:	f3 cf       	rjmp	.-26     	; 0x4bae <vfprintf+0x398>
    4bc8:	e6 cf       	rjmp	.-52     	; 0x4b96 <vfprintf+0x380>
    4bca:	85 e4       	ldi	r24, 0x45	; 69
    4bcc:	90 e0       	ldi	r25, 0x00	; 0
    4bce:	b7 01       	movw	r22, r14
    4bd0:	0e 94 b3 76 	call	0xed66	; 0xed66 <fputc>
    4bd4:	d7 fc       	sbrc	r13, 7
    4bd6:	06 c0       	rjmp	.+12     	; 0x4be4 <vfprintf+0x3ce>
    4bd8:	c1 14       	cp	r12, r1
    4bda:	d1 04       	cpc	r13, r1
    4bdc:	41 f4       	brne	.+16     	; 0x4bee <vfprintf+0x3d8>
    4bde:	ec 85       	ldd	r30, Y+12	; 0x0c
    4be0:	e4 ff       	sbrs	r30, 4
    4be2:	05 c0       	rjmp	.+10     	; 0x4bee <vfprintf+0x3d8>
    4be4:	d1 94       	neg	r13
    4be6:	c1 94       	neg	r12
    4be8:	d1 08       	sbc	r13, r1
    4bea:	8d e2       	ldi	r24, 0x2D	; 45
    4bec:	01 c0       	rjmp	.+2      	; 0x4bf0 <vfprintf+0x3da>
    4bee:	8b e2       	ldi	r24, 0x2B	; 43
    4bf0:	b7 01       	movw	r22, r14
    4bf2:	90 e0       	ldi	r25, 0x00	; 0
    4bf4:	0e 94 b3 76 	call	0xed66	; 0xed66 <fputc>
    4bf8:	80 e3       	ldi	r24, 0x30	; 48
    4bfa:	2a e0       	ldi	r18, 0x0A	; 10
    4bfc:	c2 16       	cp	r12, r18
    4bfe:	d1 04       	cpc	r13, r1
    4c00:	2c f0       	brlt	.+10     	; 0x4c0c <vfprintf+0x3f6>
    4c02:	8f 5f       	subi	r24, 0xFF	; 255
    4c04:	fa e0       	ldi	r31, 0x0A	; 10
    4c06:	cf 1a       	sub	r12, r31
    4c08:	d1 08       	sbc	r13, r1
    4c0a:	f7 cf       	rjmp	.-18     	; 0x4bfa <vfprintf+0x3e4>
    4c0c:	b7 01       	movw	r22, r14
    4c0e:	90 e0       	ldi	r25, 0x00	; 0
    4c10:	0e 94 b3 76 	call	0xed66	; 0xed66 <fputc>
    4c14:	b7 01       	movw	r22, r14
    4c16:	c6 01       	movw	r24, r12
    4c18:	c0 96       	adiw	r24, 0x30	; 48
    4c1a:	0e 94 b3 76 	call	0xed66	; 0xed66 <fputc>
    4c1e:	54 c1       	rjmp	.+680    	; 0x4ec8 <vfprintf+0x6b2>
    4c20:	83 36       	cpi	r24, 0x63	; 99
    4c22:	31 f0       	breq	.+12     	; 0x4c30 <vfprintf+0x41a>
    4c24:	83 37       	cpi	r24, 0x73	; 115
    4c26:	79 f0       	breq	.+30     	; 0x4c46 <vfprintf+0x430>
    4c28:	83 35       	cpi	r24, 0x53	; 83
    4c2a:	09 f0       	breq	.+2      	; 0x4c2e <vfprintf+0x418>
    4c2c:	56 c0       	rjmp	.+172    	; 0x4cda <vfprintf+0x4c4>
    4c2e:	20 c0       	rjmp	.+64     	; 0x4c70 <vfprintf+0x45a>
    4c30:	56 01       	movw	r10, r12
    4c32:	32 e0       	ldi	r19, 0x02	; 2
    4c34:	a3 0e       	add	r10, r19
    4c36:	b1 1c       	adc	r11, r1
    4c38:	f6 01       	movw	r30, r12
    4c3a:	80 81       	ld	r24, Z
    4c3c:	89 83       	std	Y+1, r24	; 0x01
    4c3e:	01 e0       	ldi	r16, 0x01	; 1
    4c40:	10 e0       	ldi	r17, 0x00	; 0
    4c42:	63 01       	movw	r12, r6
    4c44:	12 c0       	rjmp	.+36     	; 0x4c6a <vfprintf+0x454>
    4c46:	56 01       	movw	r10, r12
    4c48:	f2 e0       	ldi	r31, 0x02	; 2
    4c4a:	af 0e       	add	r10, r31
    4c4c:	b1 1c       	adc	r11, r1
    4c4e:	f6 01       	movw	r30, r12
    4c50:	c0 80       	ld	r12, Z
    4c52:	d1 80       	ldd	r13, Z+1	; 0x01
    4c54:	96 fe       	sbrs	r9, 6
    4c56:	03 c0       	rjmp	.+6      	; 0x4c5e <vfprintf+0x448>
    4c58:	61 2f       	mov	r22, r17
    4c5a:	70 e0       	ldi	r23, 0x00	; 0
    4c5c:	02 c0       	rjmp	.+4      	; 0x4c62 <vfprintf+0x44c>
    4c5e:	6f ef       	ldi	r22, 0xFF	; 255
    4c60:	7f ef       	ldi	r23, 0xFF	; 255
    4c62:	c6 01       	movw	r24, r12
    4c64:	0e 94 9f e8 	call	0x1d13e	; 0x1d13e <strnlen>
    4c68:	8c 01       	movw	r16, r24
    4c6a:	f9 2d       	mov	r31, r9
    4c6c:	ff 77       	andi	r31, 0x7F	; 127
    4c6e:	14 c0       	rjmp	.+40     	; 0x4c98 <vfprintf+0x482>
    4c70:	56 01       	movw	r10, r12
    4c72:	22 e0       	ldi	r18, 0x02	; 2
    4c74:	a2 0e       	add	r10, r18
    4c76:	b1 1c       	adc	r11, r1
    4c78:	f6 01       	movw	r30, r12
    4c7a:	c0 80       	ld	r12, Z
    4c7c:	d1 80       	ldd	r13, Z+1	; 0x01
    4c7e:	96 fe       	sbrs	r9, 6
    4c80:	03 c0       	rjmp	.+6      	; 0x4c88 <vfprintf+0x472>
    4c82:	61 2f       	mov	r22, r17
    4c84:	70 e0       	ldi	r23, 0x00	; 0
    4c86:	02 c0       	rjmp	.+4      	; 0x4c8c <vfprintf+0x476>
    4c88:	6f ef       	ldi	r22, 0xFF	; 255
    4c8a:	7f ef       	ldi	r23, 0xFF	; 255
    4c8c:	c6 01       	movw	r24, r12
    4c8e:	0e 94 8d e8 	call	0x1d11a	; 0x1d11a <strnlen_P>
    4c92:	8c 01       	movw	r16, r24
    4c94:	f9 2d       	mov	r31, r9
    4c96:	f0 68       	ori	r31, 0x80	; 128
    4c98:	9f 2e       	mov	r9, r31
    4c9a:	f3 fd       	sbrc	r31, 3
    4c9c:	1a c0       	rjmp	.+52     	; 0x4cd2 <vfprintf+0x4bc>
    4c9e:	85 2d       	mov	r24, r5
    4ca0:	90 e0       	ldi	r25, 0x00	; 0
    4ca2:	08 17       	cp	r16, r24
    4ca4:	19 07       	cpc	r17, r25
    4ca6:	a8 f4       	brcc	.+42     	; 0x4cd2 <vfprintf+0x4bc>
    4ca8:	b7 01       	movw	r22, r14
    4caa:	80 e2       	ldi	r24, 0x20	; 32
    4cac:	90 e0       	ldi	r25, 0x00	; 0
    4cae:	0e 94 b3 76 	call	0xed66	; 0xed66 <fputc>
    4cb2:	5a 94       	dec	r5
    4cb4:	f4 cf       	rjmp	.-24     	; 0x4c9e <vfprintf+0x488>
    4cb6:	f6 01       	movw	r30, r12
    4cb8:	97 fc       	sbrc	r9, 7
    4cba:	85 91       	lpm	r24, Z+
    4cbc:	97 fe       	sbrs	r9, 7
    4cbe:	81 91       	ld	r24, Z+
    4cc0:	6f 01       	movw	r12, r30
    4cc2:	b7 01       	movw	r22, r14
    4cc4:	90 e0       	ldi	r25, 0x00	; 0
    4cc6:	0e 94 b3 76 	call	0xed66	; 0xed66 <fputc>
    4cca:	51 10       	cpse	r5, r1
    4ccc:	5a 94       	dec	r5
    4cce:	01 50       	subi	r16, 0x01	; 1
    4cd0:	11 09       	sbc	r17, r1
    4cd2:	01 15       	cp	r16, r1
    4cd4:	11 05       	cpc	r17, r1
    4cd6:	79 f7       	brne	.-34     	; 0x4cb6 <vfprintf+0x4a0>
    4cd8:	f7 c0       	rjmp	.+494    	; 0x4ec8 <vfprintf+0x6b2>
    4cda:	84 36       	cpi	r24, 0x64	; 100
    4cdc:	11 f0       	breq	.+4      	; 0x4ce2 <vfprintf+0x4cc>
    4cde:	89 36       	cpi	r24, 0x69	; 105
    4ce0:	61 f5       	brne	.+88     	; 0x4d3a <vfprintf+0x524>
    4ce2:	56 01       	movw	r10, r12
    4ce4:	97 fe       	sbrs	r9, 7
    4ce6:	09 c0       	rjmp	.+18     	; 0x4cfa <vfprintf+0x4e4>
    4ce8:	24 e0       	ldi	r18, 0x04	; 4
    4cea:	a2 0e       	add	r10, r18
    4cec:	b1 1c       	adc	r11, r1
    4cee:	f6 01       	movw	r30, r12
    4cf0:	60 81       	ld	r22, Z
    4cf2:	71 81       	ldd	r23, Z+1	; 0x01
    4cf4:	82 81       	ldd	r24, Z+2	; 0x02
    4cf6:	93 81       	ldd	r25, Z+3	; 0x03
    4cf8:	0a c0       	rjmp	.+20     	; 0x4d0e <vfprintf+0x4f8>
    4cfa:	f2 e0       	ldi	r31, 0x02	; 2
    4cfc:	af 0e       	add	r10, r31
    4cfe:	b1 1c       	adc	r11, r1
    4d00:	f6 01       	movw	r30, r12
    4d02:	60 81       	ld	r22, Z
    4d04:	71 81       	ldd	r23, Z+1	; 0x01
    4d06:	07 2e       	mov	r0, r23
    4d08:	00 0c       	add	r0, r0
    4d0a:	88 0b       	sbc	r24, r24
    4d0c:	99 0b       	sbc	r25, r25
    4d0e:	f9 2d       	mov	r31, r9
    4d10:	ff 76       	andi	r31, 0x6F	; 111
    4d12:	9f 2e       	mov	r9, r31
    4d14:	97 ff       	sbrs	r25, 7
    4d16:	09 c0       	rjmp	.+18     	; 0x4d2a <vfprintf+0x514>
    4d18:	90 95       	com	r25
    4d1a:	80 95       	com	r24
    4d1c:	70 95       	com	r23
    4d1e:	61 95       	neg	r22
    4d20:	7f 4f       	sbci	r23, 0xFF	; 255
    4d22:	8f 4f       	sbci	r24, 0xFF	; 255
    4d24:	9f 4f       	sbci	r25, 0xFF	; 255
    4d26:	f0 68       	ori	r31, 0x80	; 128
    4d28:	9f 2e       	mov	r9, r31
    4d2a:	2a e0       	ldi	r18, 0x0A	; 10
    4d2c:	30 e0       	ldi	r19, 0x00	; 0
    4d2e:	a3 01       	movw	r20, r6
    4d30:	0e 94 aa e8 	call	0x1d154	; 0x1d154 <__ultoa_invert>
    4d34:	c8 2e       	mov	r12, r24
    4d36:	c6 18       	sub	r12, r6
    4d38:	3f c0       	rjmp	.+126    	; 0x4db8 <vfprintf+0x5a2>
    4d3a:	09 2d       	mov	r16, r9
    4d3c:	85 37       	cpi	r24, 0x75	; 117
    4d3e:	21 f4       	brne	.+8      	; 0x4d48 <vfprintf+0x532>
    4d40:	0f 7e       	andi	r16, 0xEF	; 239
    4d42:	2a e0       	ldi	r18, 0x0A	; 10
    4d44:	30 e0       	ldi	r19, 0x00	; 0
    4d46:	1d c0       	rjmp	.+58     	; 0x4d82 <vfprintf+0x56c>
    4d48:	09 7f       	andi	r16, 0xF9	; 249
    4d4a:	8f 36       	cpi	r24, 0x6F	; 111
    4d4c:	91 f0       	breq	.+36     	; 0x4d72 <vfprintf+0x55c>
    4d4e:	18 f4       	brcc	.+6      	; 0x4d56 <vfprintf+0x540>
    4d50:	88 35       	cpi	r24, 0x58	; 88
    4d52:	59 f0       	breq	.+22     	; 0x4d6a <vfprintf+0x554>
    4d54:	c3 c0       	rjmp	.+390    	; 0x4edc <vfprintf+0x6c6>
    4d56:	80 37       	cpi	r24, 0x70	; 112
    4d58:	19 f0       	breq	.+6      	; 0x4d60 <vfprintf+0x54a>
    4d5a:	88 37       	cpi	r24, 0x78	; 120
    4d5c:	11 f0       	breq	.+4      	; 0x4d62 <vfprintf+0x54c>
    4d5e:	be c0       	rjmp	.+380    	; 0x4edc <vfprintf+0x6c6>
    4d60:	00 61       	ori	r16, 0x10	; 16
    4d62:	04 ff       	sbrs	r16, 4
    4d64:	09 c0       	rjmp	.+18     	; 0x4d78 <vfprintf+0x562>
    4d66:	04 60       	ori	r16, 0x04	; 4
    4d68:	07 c0       	rjmp	.+14     	; 0x4d78 <vfprintf+0x562>
    4d6a:	94 fe       	sbrs	r9, 4
    4d6c:	08 c0       	rjmp	.+16     	; 0x4d7e <vfprintf+0x568>
    4d6e:	06 60       	ori	r16, 0x06	; 6
    4d70:	06 c0       	rjmp	.+12     	; 0x4d7e <vfprintf+0x568>
    4d72:	28 e0       	ldi	r18, 0x08	; 8
    4d74:	30 e0       	ldi	r19, 0x00	; 0
    4d76:	05 c0       	rjmp	.+10     	; 0x4d82 <vfprintf+0x56c>
    4d78:	20 e1       	ldi	r18, 0x10	; 16
    4d7a:	30 e0       	ldi	r19, 0x00	; 0
    4d7c:	02 c0       	rjmp	.+4      	; 0x4d82 <vfprintf+0x56c>
    4d7e:	20 e1       	ldi	r18, 0x10	; 16
    4d80:	32 e0       	ldi	r19, 0x02	; 2
    4d82:	56 01       	movw	r10, r12
    4d84:	07 ff       	sbrs	r16, 7
    4d86:	09 c0       	rjmp	.+18     	; 0x4d9a <vfprintf+0x584>
    4d88:	84 e0       	ldi	r24, 0x04	; 4
    4d8a:	a8 0e       	add	r10, r24
    4d8c:	b1 1c       	adc	r11, r1
    4d8e:	f6 01       	movw	r30, r12
    4d90:	60 81       	ld	r22, Z
    4d92:	71 81       	ldd	r23, Z+1	; 0x01
    4d94:	82 81       	ldd	r24, Z+2	; 0x02
    4d96:	93 81       	ldd	r25, Z+3	; 0x03
    4d98:	08 c0       	rjmp	.+16     	; 0x4daa <vfprintf+0x594>
    4d9a:	f2 e0       	ldi	r31, 0x02	; 2
    4d9c:	af 0e       	add	r10, r31
    4d9e:	b1 1c       	adc	r11, r1
    4da0:	f6 01       	movw	r30, r12
    4da2:	60 81       	ld	r22, Z
    4da4:	71 81       	ldd	r23, Z+1	; 0x01
    4da6:	80 e0       	ldi	r24, 0x00	; 0
    4da8:	90 e0       	ldi	r25, 0x00	; 0
    4daa:	a3 01       	movw	r20, r6
    4dac:	0e 94 aa e8 	call	0x1d154	; 0x1d154 <__ultoa_invert>
    4db0:	c8 2e       	mov	r12, r24
    4db2:	c6 18       	sub	r12, r6
    4db4:	0f 77       	andi	r16, 0x7F	; 127
    4db6:	90 2e       	mov	r9, r16
    4db8:	96 fe       	sbrs	r9, 6
    4dba:	0b c0       	rjmp	.+22     	; 0x4dd2 <vfprintf+0x5bc>
    4dbc:	09 2d       	mov	r16, r9
    4dbe:	0e 7f       	andi	r16, 0xFE	; 254
    4dc0:	c1 16       	cp	r12, r17
    4dc2:	50 f4       	brcc	.+20     	; 0x4dd8 <vfprintf+0x5c2>
    4dc4:	94 fe       	sbrs	r9, 4
    4dc6:	0a c0       	rjmp	.+20     	; 0x4ddc <vfprintf+0x5c6>
    4dc8:	92 fc       	sbrc	r9, 2
    4dca:	08 c0       	rjmp	.+16     	; 0x4ddc <vfprintf+0x5c6>
    4dcc:	09 2d       	mov	r16, r9
    4dce:	0e 7e       	andi	r16, 0xEE	; 238
    4dd0:	05 c0       	rjmp	.+10     	; 0x4ddc <vfprintf+0x5c6>
    4dd2:	dc 2c       	mov	r13, r12
    4dd4:	09 2d       	mov	r16, r9
    4dd6:	03 c0       	rjmp	.+6      	; 0x4dde <vfprintf+0x5c8>
    4dd8:	dc 2c       	mov	r13, r12
    4dda:	01 c0       	rjmp	.+2      	; 0x4dde <vfprintf+0x5c8>
    4ddc:	d1 2e       	mov	r13, r17
    4dde:	04 ff       	sbrs	r16, 4
    4de0:	0d c0       	rjmp	.+26     	; 0x4dfc <vfprintf+0x5e6>
    4de2:	fe 01       	movw	r30, r28
    4de4:	ec 0d       	add	r30, r12
    4de6:	f1 1d       	adc	r31, r1
    4de8:	80 81       	ld	r24, Z
    4dea:	80 33       	cpi	r24, 0x30	; 48
    4dec:	11 f4       	brne	.+4      	; 0x4df2 <vfprintf+0x5dc>
    4dee:	09 7e       	andi	r16, 0xE9	; 233
    4df0:	09 c0       	rjmp	.+18     	; 0x4e04 <vfprintf+0x5ee>
    4df2:	02 ff       	sbrs	r16, 2
    4df4:	06 c0       	rjmp	.+12     	; 0x4e02 <vfprintf+0x5ec>
    4df6:	d3 94       	inc	r13
    4df8:	d3 94       	inc	r13
    4dfa:	04 c0       	rjmp	.+8      	; 0x4e04 <vfprintf+0x5ee>
    4dfc:	80 2f       	mov	r24, r16
    4dfe:	86 78       	andi	r24, 0x86	; 134
    4e00:	09 f0       	breq	.+2      	; 0x4e04 <vfprintf+0x5ee>
    4e02:	d3 94       	inc	r13
    4e04:	03 fd       	sbrc	r16, 3
    4e06:	11 c0       	rjmp	.+34     	; 0x4e2a <vfprintf+0x614>
    4e08:	00 ff       	sbrs	r16, 0
    4e0a:	06 c0       	rjmp	.+12     	; 0x4e18 <vfprintf+0x602>
    4e0c:	1c 2d       	mov	r17, r12
    4e0e:	d5 14       	cp	r13, r5
    4e10:	80 f4       	brcc	.+32     	; 0x4e32 <vfprintf+0x61c>
    4e12:	15 0d       	add	r17, r5
    4e14:	1d 19       	sub	r17, r13
    4e16:	0d c0       	rjmp	.+26     	; 0x4e32 <vfprintf+0x61c>
    4e18:	d5 14       	cp	r13, r5
    4e1a:	58 f4       	brcc	.+22     	; 0x4e32 <vfprintf+0x61c>
    4e1c:	b7 01       	movw	r22, r14
    4e1e:	80 e2       	ldi	r24, 0x20	; 32
    4e20:	90 e0       	ldi	r25, 0x00	; 0
    4e22:	0e 94 b3 76 	call	0xed66	; 0xed66 <fputc>
    4e26:	d3 94       	inc	r13
    4e28:	f7 cf       	rjmp	.-18     	; 0x4e18 <vfprintf+0x602>
    4e2a:	d5 14       	cp	r13, r5
    4e2c:	10 f4       	brcc	.+4      	; 0x4e32 <vfprintf+0x61c>
    4e2e:	5d 18       	sub	r5, r13
    4e30:	01 c0       	rjmp	.+2      	; 0x4e34 <vfprintf+0x61e>
    4e32:	51 2c       	mov	r5, r1
    4e34:	04 ff       	sbrs	r16, 4
    4e36:	10 c0       	rjmp	.+32     	; 0x4e58 <vfprintf+0x642>
    4e38:	b7 01       	movw	r22, r14
    4e3a:	80 e3       	ldi	r24, 0x30	; 48
    4e3c:	90 e0       	ldi	r25, 0x00	; 0
    4e3e:	0e 94 b3 76 	call	0xed66	; 0xed66 <fputc>
    4e42:	02 ff       	sbrs	r16, 2
    4e44:	17 c0       	rjmp	.+46     	; 0x4e74 <vfprintf+0x65e>
    4e46:	01 fd       	sbrc	r16, 1
    4e48:	03 c0       	rjmp	.+6      	; 0x4e50 <vfprintf+0x63a>
    4e4a:	88 e7       	ldi	r24, 0x78	; 120
    4e4c:	90 e0       	ldi	r25, 0x00	; 0
    4e4e:	02 c0       	rjmp	.+4      	; 0x4e54 <vfprintf+0x63e>
    4e50:	88 e5       	ldi	r24, 0x58	; 88
    4e52:	90 e0       	ldi	r25, 0x00	; 0
    4e54:	b7 01       	movw	r22, r14
    4e56:	0c c0       	rjmp	.+24     	; 0x4e70 <vfprintf+0x65a>
    4e58:	80 2f       	mov	r24, r16
    4e5a:	86 78       	andi	r24, 0x86	; 134
    4e5c:	59 f0       	breq	.+22     	; 0x4e74 <vfprintf+0x65e>
    4e5e:	01 ff       	sbrs	r16, 1
    4e60:	02 c0       	rjmp	.+4      	; 0x4e66 <vfprintf+0x650>
    4e62:	8b e2       	ldi	r24, 0x2B	; 43
    4e64:	01 c0       	rjmp	.+2      	; 0x4e68 <vfprintf+0x652>
    4e66:	80 e2       	ldi	r24, 0x20	; 32
    4e68:	07 fd       	sbrc	r16, 7
    4e6a:	8d e2       	ldi	r24, 0x2D	; 45
    4e6c:	b7 01       	movw	r22, r14
    4e6e:	90 e0       	ldi	r25, 0x00	; 0
    4e70:	0e 94 b3 76 	call	0xed66	; 0xed66 <fputc>
    4e74:	c1 16       	cp	r12, r17
    4e76:	38 f4       	brcc	.+14     	; 0x4e86 <vfprintf+0x670>
    4e78:	b7 01       	movw	r22, r14
    4e7a:	80 e3       	ldi	r24, 0x30	; 48
    4e7c:	90 e0       	ldi	r25, 0x00	; 0
    4e7e:	0e 94 b3 76 	call	0xed66	; 0xed66 <fputc>
    4e82:	11 50       	subi	r17, 0x01	; 1
    4e84:	f7 cf       	rjmp	.-18     	; 0x4e74 <vfprintf+0x65e>
    4e86:	ca 94       	dec	r12
    4e88:	f3 01       	movw	r30, r6
    4e8a:	ec 0d       	add	r30, r12
    4e8c:	f1 1d       	adc	r31, r1
    4e8e:	80 81       	ld	r24, Z
    4e90:	b7 01       	movw	r22, r14
    4e92:	90 e0       	ldi	r25, 0x00	; 0
    4e94:	0e 94 b3 76 	call	0xed66	; 0xed66 <fputc>
    4e98:	c1 10       	cpse	r12, r1
    4e9a:	f5 cf       	rjmp	.-22     	; 0x4e86 <vfprintf+0x670>
    4e9c:	15 c0       	rjmp	.+42     	; 0x4ec8 <vfprintf+0x6b2>
    4e9e:	f4 e0       	ldi	r31, 0x04	; 4
    4ea0:	f5 15       	cp	r31, r5
    4ea2:	60 f5       	brcc	.+88     	; 0x4efc <vfprintf+0x6e6>
    4ea4:	84 e0       	ldi	r24, 0x04	; 4
    4ea6:	58 1a       	sub	r5, r24
    4ea8:	93 fe       	sbrs	r9, 3
    4eaa:	1f c0       	rjmp	.+62     	; 0x4eea <vfprintf+0x6d4>
    4eac:	01 11       	cpse	r16, r1
    4eae:	27 c0       	rjmp	.+78     	; 0x4efe <vfprintf+0x6e8>
    4eb0:	2c 85       	ldd	r18, Y+12	; 0x0c
    4eb2:	23 ff       	sbrs	r18, 3
    4eb4:	2a c0       	rjmp	.+84     	; 0x4f0a <vfprintf+0x6f4>
    4eb6:	06 ed       	ldi	r16, 0xD6	; 214
    4eb8:	11 e0       	ldi	r17, 0x01	; 1
    4eba:	39 2d       	mov	r19, r9
    4ebc:	30 71       	andi	r19, 0x10	; 16
    4ebe:	93 2e       	mov	r9, r19
    4ec0:	f8 01       	movw	r30, r16
    4ec2:	84 91       	lpm	r24, Z
    4ec4:	81 11       	cpse	r24, r1
    4ec6:	24 c0       	rjmp	.+72     	; 0x4f10 <vfprintf+0x6fa>
    4ec8:	55 20       	and	r5, r5
    4eca:	09 f4       	brne	.+2      	; 0x4ece <vfprintf+0x6b8>
    4ecc:	e4 cc       	rjmp	.-1592   	; 0x4896 <vfprintf+0x80>
    4ece:	b7 01       	movw	r22, r14
    4ed0:	80 e2       	ldi	r24, 0x20	; 32
    4ed2:	90 e0       	ldi	r25, 0x00	; 0
    4ed4:	0e 94 b3 76 	call	0xed66	; 0xed66 <fputc>
    4ed8:	5a 94       	dec	r5
    4eda:	f6 cf       	rjmp	.-20     	; 0x4ec8 <vfprintf+0x6b2>
    4edc:	f7 01       	movw	r30, r14
    4ede:	86 81       	ldd	r24, Z+6	; 0x06
    4ee0:	97 81       	ldd	r25, Z+7	; 0x07
    4ee2:	26 c0       	rjmp	.+76     	; 0x4f30 <vfprintf+0x71a>
    4ee4:	8f ef       	ldi	r24, 0xFF	; 255
    4ee6:	9f ef       	ldi	r25, 0xFF	; 255
    4ee8:	23 c0       	rjmp	.+70     	; 0x4f30 <vfprintf+0x71a>
    4eea:	b7 01       	movw	r22, r14
    4eec:	80 e2       	ldi	r24, 0x20	; 32
    4eee:	90 e0       	ldi	r25, 0x00	; 0
    4ef0:	0e 94 b3 76 	call	0xed66	; 0xed66 <fputc>
    4ef4:	5a 94       	dec	r5
    4ef6:	51 10       	cpse	r5, r1
    4ef8:	f8 cf       	rjmp	.-16     	; 0x4eea <vfprintf+0x6d4>
    4efa:	d8 cf       	rjmp	.-80     	; 0x4eac <vfprintf+0x696>
    4efc:	51 2c       	mov	r5, r1
    4efe:	b7 01       	movw	r22, r14
    4f00:	80 2f       	mov	r24, r16
    4f02:	90 e0       	ldi	r25, 0x00	; 0
    4f04:	0e 94 b3 76 	call	0xed66	; 0xed66 <fputc>
    4f08:	d3 cf       	rjmp	.-90     	; 0x4eb0 <vfprintf+0x69a>
    4f0a:	0a ed       	ldi	r16, 0xDA	; 218
    4f0c:	11 e0       	ldi	r17, 0x01	; 1
    4f0e:	d5 cf       	rjmp	.-86     	; 0x4eba <vfprintf+0x6a4>
    4f10:	91 10       	cpse	r9, r1
    4f12:	80 52       	subi	r24, 0x20	; 32
    4f14:	b7 01       	movw	r22, r14
    4f16:	90 e0       	ldi	r25, 0x00	; 0
    4f18:	0e 94 b3 76 	call	0xed66	; 0xed66 <fputc>
    4f1c:	0f 5f       	subi	r16, 0xFF	; 255
    4f1e:	1f 4f       	sbci	r17, 0xFF	; 255
    4f20:	cf cf       	rjmp	.-98     	; 0x4ec0 <vfprintf+0x6aa>
    4f22:	23 e0       	ldi	r18, 0x03	; 3
    4f24:	25 15       	cp	r18, r5
    4f26:	10 f4       	brcc	.+4      	; 0x4f2c <vfprintf+0x716>
    4f28:	83 e0       	ldi	r24, 0x03	; 3
    4f2a:	bd cf       	rjmp	.-134    	; 0x4ea6 <vfprintf+0x690>
    4f2c:	51 2c       	mov	r5, r1
    4f2e:	c0 cf       	rjmp	.-128    	; 0x4eb0 <vfprintf+0x69a>
    4f30:	60 96       	adiw	r28, 0x10	; 16
    4f32:	0f b6       	in	r0, 0x3f	; 63
    4f34:	f8 94       	cli
    4f36:	de bf       	out	0x3e, r29	; 62
    4f38:	0f be       	out	0x3f, r0	; 63
    4f3a:	cd bf       	out	0x3d, r28	; 61
    4f3c:	df 91       	pop	r29
    4f3e:	cf 91       	pop	r28
    4f40:	1f 91       	pop	r17
    4f42:	0f 91       	pop	r16
    4f44:	ff 90       	pop	r15
    4f46:	ef 90       	pop	r14
    4f48:	df 90       	pop	r13
    4f4a:	cf 90       	pop	r12
    4f4c:	bf 90       	pop	r11
    4f4e:	af 90       	pop	r10
    4f50:	9f 90       	pop	r9
    4f52:	8f 90       	pop	r8
    4f54:	7f 90       	pop	r7
    4f56:	6f 90       	pop	r6
    4f58:	5f 90       	pop	r5
    4f5a:	4f 90       	pop	r4
    4f5c:	3f 90       	pop	r3
    4f5e:	2f 90       	pop	r2
    4f60:	08 95       	ret

00004f62 <chip_select>:
/// @brief SPI CS pin status
/// return CS GPIO pin number or 0xff
uint8_t spi_chip_select_status()
{
    return(_cs_pin);
}
    4f62:	e8 2f       	mov	r30, r24
    4f64:	e6 95       	lsr	r30
    4f66:	e6 95       	lsr	r30
    4f68:	e6 95       	lsr	r30
    4f6a:	93 e0       	ldi	r25, 0x03	; 3
    4f6c:	e9 9f       	mul	r30, r25
    4f6e:	f0 01       	movw	r30, r0
    4f70:	11 24       	eor	r1, r1
    4f72:	32 a1       	ldd	r19, Z+34	; 0x22
    4f74:	28 2f       	mov	r18, r24
    4f76:	27 70       	andi	r18, 0x07	; 7
    4f78:	81 e0       	ldi	r24, 0x01	; 1
    4f7a:	90 e0       	ldi	r25, 0x00	; 0
    4f7c:	01 c0       	rjmp	.+2      	; 0x4f80 <chip_select+0x1e>
    4f7e:	88 0f       	add	r24, r24
    4f80:	2a 95       	dec	r18
    4f82:	ea f7       	brpl	.-6      	; 0x4f7e <chip_select+0x1c>
    4f84:	98 2f       	mov	r25, r24
    4f86:	90 95       	com	r25
    4f88:	93 23       	and	r25, r19
    4f8a:	92 a3       	std	Z+34, r25	; 0x22
    4f8c:	91 a1       	ldd	r25, Z+33	; 0x21
    4f8e:	89 2b       	or	r24, r25
    4f90:	81 a3       	std	Z+33, r24	; 0x21
    4f92:	08 95       	ret

00004f94 <chip_deselect>:
    4f94:	e8 2f       	mov	r30, r24
    4f96:	e6 95       	lsr	r30
    4f98:	e6 95       	lsr	r30
    4f9a:	e6 95       	lsr	r30
    4f9c:	93 e0       	ldi	r25, 0x03	; 3
    4f9e:	e9 9f       	mul	r30, r25
    4fa0:	f0 01       	movw	r30, r0
    4fa2:	11 24       	eor	r1, r1
    4fa4:	32 a1       	ldd	r19, Z+34	; 0x22
    4fa6:	28 2f       	mov	r18, r24
    4fa8:	27 70       	andi	r18, 0x07	; 7
    4faa:	81 e0       	ldi	r24, 0x01	; 1
    4fac:	90 e0       	ldi	r25, 0x00	; 0
    4fae:	01 c0       	rjmp	.+2      	; 0x4fb2 <chip_deselect+0x1e>
    4fb0:	88 0f       	add	r24, r24
    4fb2:	2a 95       	dec	r18
    4fb4:	ea f7       	brpl	.-6      	; 0x4fb0 <chip_deselect+0x1c>
    4fb6:	93 2f       	mov	r25, r19
    4fb8:	98 2b       	or	r25, r24
    4fba:	92 a3       	std	Z+34, r25	; 0x22
    4fbc:	91 a1       	ldd	r25, Z+33	; 0x21
    4fbe:	89 2b       	or	r24, r25
    4fc0:	81 a3       	std	Z+33, r24	; 0x21
    4fc2:	08 95       	ret

00004fc4 <chip_select_init>:
    4fc4:	e7 cf       	rjmp	.-50     	; 0x4f94 <chip_deselect>
    4fc6:	08 95       	ret

00004fc8 <spi_end>:
    4fc8:	cf 93       	push	r28
    4fca:	ad b7       	in	r26, 0x3d	; 61
    4fcc:	be b7       	in	r27, 0x3e	; 62
    4fce:	17 97       	sbiw	r26, 0x07	; 7
    4fd0:	0f b6       	in	r0, 0x3f	; 63
    4fd2:	f8 94       	cli
    4fd4:	be bf       	out	0x3e, r27	; 62
    4fd6:	0f be       	out	0x3f, r0	; 63
    4fd8:	ad bf       	out	0x3d, r26	; 61
    4fda:	c8 2f       	mov	r28, r24
    4fdc:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_cs_pin>
    4fe0:	8c 17       	cp	r24, r28
    4fe2:	99 f0       	breq	.+38     	; 0x500a <spi_end+0x42>
    4fe4:	8f 3f       	cpi	r24, 0xFF	; 255
    4fe6:	89 f0       	breq	.+34     	; 0x500a <spi_end+0x42>
    4fe8:	2c 2f       	mov	r18, r28
    4fea:	30 e0       	ldi	r19, 0x00	; 0
    4fec:	ed b7       	in	r30, 0x3d	; 61
    4fee:	fe b7       	in	r31, 0x3e	; 62
    4ff0:	37 83       	std	Z+7, r19	; 0x07
    4ff2:	26 83       	std	Z+6, r18	; 0x06
    4ff4:	90 e0       	ldi	r25, 0x00	; 0
    4ff6:	95 83       	std	Z+5, r25	; 0x05
    4ff8:	84 83       	std	Z+4, r24	; 0x04
    4ffa:	88 ed       	ldi	r24, 0xD8	; 216
    4ffc:	92 e0       	ldi	r25, 0x02	; 2
    4ffe:	a0 e0       	ldi	r26, 0x00	; 0
    5000:	81 83       	std	Z+1, r24	; 0x01
    5002:	92 83       	std	Z+2, r25	; 0x02
    5004:	a3 83       	std	Z+3, r26	; 0x03
    5006:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    500a:	8c 2f       	mov	r24, r28
    500c:	c3 df       	rcall	.-122    	; 0x4f94 <chip_deselect>
    500e:	8f ef       	ldi	r24, 0xFF	; 255
    5010:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_cs_pin>
    5014:	ad b7       	in	r26, 0x3d	; 61
    5016:	be b7       	in	r27, 0x3e	; 62
    5018:	17 96       	adiw	r26, 0x07	; 7
    501a:	0f b6       	in	r0, 0x3f	; 63
    501c:	f8 94       	cli
    501e:	be bf       	out	0x3e, r27	; 62
    5020:	0f be       	out	0x3f, r0	; 63
    5022:	ad bf       	out	0x3d, r26	; 61
    5024:	cf 91       	pop	r28
    5026:	08 95       	ret

00005028 <spi_TX_buffer>:
/// @brief SPI write buffer
/// @param[in] *data: transmit buffer
/// @param[in] count: number of bytes to write
/// @return  void
void spi_TX_buffer(const uint8_t *data, int count)
{
    5028:	c2 c4       	rjmp	.+2436   	; 0x59ae <SPI0_TX>
    502a:	08 95       	ret

0000502c <spi_RX_buffer>:
    502c:	ea c4       	rjmp	.+2516   	; 0x5a02 <SPI0_RX>
    502e:	08 95       	ret

00005030 <spi_TX>:
    5030:	a1 e0       	ldi	r26, 0x01	; 1
    5032:	b0 e0       	ldi	r27, 0x00	; 0
    5034:	ee e1       	ldi	r30, 0x1E	; 30
    5036:	f8 e2       	ldi	r31, 0x28	; 40
    5038:	0c 94 d8 e3 	jmp	0x1c7b0	; 0x1c7b0 <__prologue_saves__+0x20>
    503c:	89 83       	std	Y+1, r24	; 0x01
    503e:	61 e0       	ldi	r22, 0x01	; 1
    5040:	70 e0       	ldi	r23, 0x00	; 0
    5042:	ce 01       	movw	r24, r28
    5044:	01 96       	adiw	r24, 0x01	; 1
    5046:	b3 d4       	rcall	.+2406   	; 0x59ae <SPI0_TX>
    5048:	21 96       	adiw	r28, 0x01	; 1
    504a:	e2 e0       	ldi	r30, 0x02	; 2
    504c:	0c 94 f4 e3 	jmp	0x1c7e8	; 0x1c7e8 <__epilogue_restores__+0x20>

00005050 <spi_init>:
    5050:	cf 92       	push	r12
    5052:	df 92       	push	r13
    5054:	ef 92       	push	r14
    5056:	ff 92       	push	r15
    5058:	6b 01       	movw	r12, r22
    505a:	7c 01       	movw	r14, r24
    505c:	84 2f       	mov	r24, r20
    505e:	9a df       	rcall	.-204    	; 0x4f94 <chip_deselect>
    5060:	8f ef       	ldi	r24, 0xFF	; 255
    5062:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_cs_pin>
    5066:	c7 01       	movw	r24, r14
    5068:	b6 01       	movw	r22, r12
    506a:	74 d4       	rcall	.+2280   	; 0x5954 <SPI0_Init>
    506c:	80 e0       	ldi	r24, 0x00	; 0
    506e:	90 e0       	ldi	r25, 0x00	; 0
    5070:	31 d4       	rcall	.+2146   	; 0x58d4 <SPI0_Mode>
    5072:	8f ef       	ldi	r24, 0xFF	; 255
    5074:	dd df       	rcall	.-70     	; 0x5030 <spi_TX>
    5076:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <_spi_clock>
    507a:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <_spi_clock+0x1>
    507e:	e0 92 08 01 	sts	0x0108, r14	; 0x800108 <_spi_clock+0x2>
    5082:	f0 92 09 01 	sts	0x0109, r15	; 0x800109 <_spi_clock+0x3>
    5086:	ff 90       	pop	r15
    5088:	ef 90       	pop	r14
    508a:	df 90       	pop	r13
    508c:	cf 90       	pop	r12
    508e:	08 95       	ret

00005090 <spi_begin>:
    5090:	cf 92       	push	r12
    5092:	df 92       	push	r13
    5094:	ef 92       	push	r14
    5096:	ff 92       	push	r15
    5098:	cf 93       	push	r28
    509a:	df 93       	push	r29
    509c:	ad b7       	in	r26, 0x3d	; 61
    509e:	be b7       	in	r27, 0x3e	; 62
    50a0:	17 97       	sbiw	r26, 0x07	; 7
    50a2:	0f b6       	in	r0, 0x3f	; 63
    50a4:	f8 94       	cli
    50a6:	be bf       	out	0x3e, r27	; 62
    50a8:	0f be       	out	0x3f, r0	; 63
    50aa:	ad bf       	out	0x3d, r26	; 61
    50ac:	6b 01       	movw	r12, r22
    50ae:	7c 01       	movw	r14, r24
    50b0:	ea 01       	movw	r28, r20
    50b2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_cs_pin>
    50b6:	8f 3f       	cpi	r24, 0xFF	; 255
    50b8:	79 f0       	breq	.+30     	; 0x50d8 <spi_begin+0x48>
    50ba:	ed b7       	in	r30, 0x3d	; 61
    50bc:	fe b7       	in	r31, 0x3e	; 62
    50be:	46 83       	std	Z+6, r20	; 0x06
    50c0:	d7 83       	std	Z+7, r29	; 0x07
    50c2:	90 e0       	ldi	r25, 0x00	; 0
    50c4:	95 83       	std	Z+5, r25	; 0x05
    50c6:	84 83       	std	Z+4, r24	; 0x04
    50c8:	86 ef       	ldi	r24, 0xF6	; 246
    50ca:	92 e0       	ldi	r25, 0x02	; 2
    50cc:	a0 e0       	ldi	r26, 0x00	; 0
    50ce:	81 83       	std	Z+1, r24	; 0x01
    50d0:	92 83       	std	Z+2, r25	; 0x02
    50d2:	a3 83       	std	Z+3, r26	; 0x03
    50d4:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    50d8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_spi_clock>
    50dc:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_spi_clock+0x1>
    50e0:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_spi_clock+0x2>
    50e4:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_spi_clock+0x3>
    50e8:	8c 15       	cp	r24, r12
    50ea:	9d 05       	cpc	r25, r13
    50ec:	ae 05       	cpc	r26, r14
    50ee:	bf 05       	cpc	r27, r15
    50f0:	21 f0       	breq	.+8      	; 0x50fa <spi_begin+0x6a>
    50f2:	ae 01       	movw	r20, r28
    50f4:	c7 01       	movw	r24, r14
    50f6:	b6 01       	movw	r22, r12
    50f8:	ab df       	rcall	.-170    	; 0x5050 <spi_init>
    50fa:	8c 2f       	mov	r24, r28
    50fc:	32 df       	rcall	.-412    	; 0x4f62 <chip_select>
    50fe:	c0 93 0a 01 	sts	0x010A, r28	; 0x80010a <_cs_pin>
    5102:	ad b7       	in	r26, 0x3d	; 61
    5104:	be b7       	in	r27, 0x3e	; 62
    5106:	17 96       	adiw	r26, 0x07	; 7
    5108:	0f b6       	in	r0, 0x3f	; 63
    510a:	f8 94       	cli
    510c:	be bf       	out	0x3e, r27	; 62
    510e:	0f be       	out	0x3f, r0	; 63
    5110:	ad bf       	out	0x3d, r26	; 61
    5112:	df 91       	pop	r29
    5114:	cf 91       	pop	r28
    5116:	ff 90       	pop	r15
    5118:	ef 90       	pop	r14
    511a:	df 90       	pop	r13
    511c:	cf 90       	pop	r12
    511e:	08 95       	ret

00005120 <spi_TXRX>:
    5120:	a1 e0       	ldi	r26, 0x01	; 1
    5122:	b0 e0       	ldi	r27, 0x00	; 0
    5124:	e6 e9       	ldi	r30, 0x96	; 150
    5126:	f8 e2       	ldi	r31, 0x28	; 40
    5128:	0c 94 d8 e3 	jmp	0x1c7b0	; 0x1c7b0 <__prologue_saves__+0x20>
    512c:	89 83       	std	Y+1, r24	; 0x01
    512e:	61 e0       	ldi	r22, 0x01	; 1
    5130:	70 e0       	ldi	r23, 0x00	; 0
    5132:	ce 01       	movw	r24, r28
    5134:	01 96       	adiw	r24, 0x01	; 1
    5136:	4f d4       	rcall	.+2206   	; 0x59d6 <SPI0_TXRX>
    5138:	89 81       	ldd	r24, Y+1	; 0x01
    513a:	21 96       	adiw	r28, 0x01	; 1
    513c:	e2 e0       	ldi	r30, 0x02	; 2
    513e:	0c 94 f4 e3 	jmp	0x1c7e8	; 0x1c7e8 <__epilogue_restores__+0x20>

00005142 <freeRam>:
/// - avr-libc dependent code.
///
/// @return free memory in bytes.
/// @see malloc().
uint16_t freeRam ()
{
    5142:	a2 e0       	ldi	r26, 0x02	; 2
    5144:	b0 e0       	ldi	r27, 0x00	; 0
    5146:	e7 ea       	ldi	r30, 0xA7	; 167
    5148:	f8 e2       	ldi	r31, 0x28	; 40
    514a:	0c 94 d8 e3 	jmp	0x1c7b0	; 0x1c7b0 <__prologue_saves__+0x20>
    extern void * __heap_start;
    extern void * __brkval;
    int ret;
    uint16_t top;

    if(__brkval)
    514e:	20 91 42 21 	lds	r18, 0x2142	; 0x802142 <__brkval>
    5152:	30 91 43 21 	lds	r19, 0x2143	; 0x802143 <__brkval+0x1>
    5156:	21 15       	cp	r18, r1
    5158:	31 05       	cpc	r19, r1
    515a:	11 f4       	brne	.+4      	; 0x5160 <freeRam+0x1e>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    515c:	26 e4       	ldi	r18, 0x46	; 70
    515e:	31 e2       	ldi	r19, 0x21	; 33

    ret = (uint16_t) &v - top;
    return ( ret );
}
    5160:	ce 01       	movw	r24, r28
    5162:	01 96       	adiw	r24, 0x01	; 1
    5164:	82 1b       	sub	r24, r18
    5166:	93 0b       	sbc	r25, r19
    5168:	22 96       	adiw	r28, 0x02	; 2
    516a:	e2 e0       	ldi	r30, 0x02	; 2
    516c:	0c 94 f4 e3 	jmp	0x1c7e8	; 0x1c7e8 <__epilogue_restores__+0x20>

00005170 <PrintFree>:
/// - avr-libc dependent code.
/// - Stack, BSS, Data, Heap, Malloc.
///
/// @return  void
void PrintFree()
{
    5170:	a9 e0       	ldi	r26, 0x09	; 9
    5172:	b0 e0       	ldi	r27, 0x00	; 0
    5174:	ee eb       	ldi	r30, 0xBE	; 190
    5176:	f8 e2       	ldi	r31, 0x28	; 40
    5178:	0c 94 d8 e3 	jmp	0x1c7b0	; 0x1c7b0 <__prologue_saves__+0x20>
    extern void * __data_start;
    extern void * __data_end;
    extern void * __stack;
    uint16_t ram;

    ram = freeRam();
    517c:	e2 df       	rcall	.-60     	; 0x5142 <freeRam>
    517e:	99 87       	std	Y+9, r25	; 0x09

    printf("Free Ram:%u\n", ram);
    5180:	88 87       	std	Y+8, r24	; 0x08
    5182:	ed b7       	in	r30, 0x3d	; 61
    5184:	fe b7       	in	r31, 0x3e	; 62
    5186:	95 83       	std	Z+5, r25	; 0x05
    5188:	84 83       	std	Z+4, r24	; 0x04
    518a:	8d e1       	ldi	r24, 0x1D	; 29
    518c:	94 e0       	ldi	r25, 0x04	; 4
    518e:	a0 e0       	ldi	r26, 0x00	; 0
    5190:	81 83       	std	Z+1, r24	; 0x01
    5192:	92 83       	std	Z+2, r25	; 0x02
    5194:	a3 83       	std	Z+3, r26	; 0x03
    5196:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    printf("  Stack Top:   %u\n", (unsigned int) &__stack);
    519a:	8f ef       	ldi	r24, 0xFF	; 255
    519c:	90 e4       	ldi	r25, 0x40	; 64
    519e:	ed b7       	in	r30, 0x3d	; 61
    51a0:	fe b7       	in	r31, 0x3e	; 62
    51a2:	95 83       	std	Z+5, r25	; 0x05
    51a4:	84 83       	std	Z+4, r24	; 0x04
    51a6:	8a e0       	ldi	r24, 0x0A	; 10
    51a8:	94 e0       	ldi	r25, 0x04	; 4
    51aa:	a0 e0       	ldi	r26, 0x00	; 0
    51ac:	81 83       	std	Z+1, r24	; 0x01
    51ae:	92 83       	std	Z+2, r25	; 0x02
    51b0:	a3 83       	std	Z+3, r26	; 0x03
    51b2:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    printf("  Stack Free:  %u\n", (unsigned int) &ram - 0);
    51b6:	ce 01       	movw	r24, r28
    51b8:	08 96       	adiw	r24, 0x08	; 8
    51ba:	ed b7       	in	r30, 0x3d	; 61
    51bc:	fe b7       	in	r31, 0x3e	; 62
    51be:	95 83       	std	Z+5, r25	; 0x05
    51c0:	84 83       	std	Z+4, r24	; 0x04
    51c2:	87 ef       	ldi	r24, 0xF7	; 247
    51c4:	93 e0       	ldi	r25, 0x03	; 3
    51c6:	a0 e0       	ldi	r26, 0x00	; 0
    51c8:	81 83       	std	Z+1, r24	; 0x01
    51ca:	92 83       	std	Z+2, r25	; 0x02
    51cc:	a3 83       	std	Z+3, r26	; 0x03
    51ce:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>

    printf("  BSS   start: %5u, end: %5u\n",
    51d2:	86 e4       	ldi	r24, 0x46	; 70
    51d4:	91 e2       	ldi	r25, 0x21	; 33
    51d6:	ed b7       	in	r30, 0x3d	; 61
    51d8:	fe b7       	in	r31, 0x3e	; 62
    51da:	97 83       	std	Z+7, r25	; 0x07
    51dc:	86 83       	std	Z+6, r24	; 0x06
    51de:	8e e0       	ldi	r24, 0x0E	; 14
    51e0:	97 e1       	ldi	r25, 0x17	; 23
    51e2:	95 83       	std	Z+5, r25	; 0x05
    51e4:	84 83       	std	Z+4, r24	; 0x04
    51e6:	89 ed       	ldi	r24, 0xD9	; 217
    51e8:	93 e0       	ldi	r25, 0x03	; 3
    51ea:	a0 e0       	ldi	r26, 0x00	; 0
    51ec:	81 83       	std	Z+1, r24	; 0x01
    51ee:	92 83       	std	Z+2, r25	; 0x02
    51f0:	a3 83       	std	Z+3, r26	; 0x03
    51f2:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
        (unsigned int)&__bss_start, (unsigned int)&__bss_end);

    printf("  Data  start: %5u, end: %5u\n",
    51f6:	8e e0       	ldi	r24, 0x0E	; 14
    51f8:	97 e1       	ldi	r25, 0x17	; 23
    51fa:	ed b7       	in	r30, 0x3d	; 61
    51fc:	fe b7       	in	r31, 0x3e	; 62
    51fe:	97 83       	std	Z+7, r25	; 0x07
    5200:	86 83       	std	Z+6, r24	; 0x06
    5202:	80 e0       	ldi	r24, 0x00	; 0
    5204:	91 e0       	ldi	r25, 0x01	; 1
    5206:	95 83       	std	Z+5, r25	; 0x05
    5208:	84 83       	std	Z+4, r24	; 0x04
    520a:	8b eb       	ldi	r24, 0xBB	; 187
    520c:	93 e0       	ldi	r25, 0x03	; 3
    520e:	a0 e0       	ldi	r26, 0x00	; 0
    5210:	81 83       	std	Z+1, r24	; 0x01
    5212:	92 83       	std	Z+2, r25	; 0x02
    5214:	a3 83       	std	Z+3, r26	; 0x03
    5216:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
        (unsigned int)&__data_start, (unsigned int)&__data_end);

    printf("  Heap: start: %5u, end: %5u\n",
    521a:	80 e0       	ldi	r24, 0x00	; 0
    521c:	90 e0       	ldi	r25, 0x00	; 0
    521e:	ed b7       	in	r30, 0x3d	; 61
    5220:	fe b7       	in	r31, 0x3e	; 62
    5222:	97 83       	std	Z+7, r25	; 0x07
    5224:	86 83       	std	Z+6, r24	; 0x06
    5226:	86 e4       	ldi	r24, 0x46	; 70
    5228:	91 e2       	ldi	r25, 0x21	; 33
    522a:	95 83       	std	Z+5, r25	; 0x05
    522c:	84 83       	std	Z+4, r24	; 0x04
    522e:	8d e9       	ldi	r24, 0x9D	; 157
    5230:	93 e0       	ldi	r25, 0x03	; 3
    5232:	a0 e0       	ldi	r26, 0x00	; 0
    5234:	81 83       	std	Z+1, r24	; 0x01
    5236:	92 83       	std	Z+2, r25	; 0x02
    5238:	a3 83       	std	Z+3, r26	; 0x03
    523a:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
        (unsigned int)&__heap_start, (unsigned int)&__heap_end);

    printf("  Malloc start %5u  end: %5u\n",
    523e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    5242:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    5246:	ed b7       	in	r30, 0x3d	; 61
    5248:	fe b7       	in	r31, 0x3e	; 62
    524a:	97 83       	std	Z+7, r25	; 0x07
    524c:	86 83       	std	Z+6, r24	; 0x06
    524e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__malloc_heap_start>
    5252:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    5256:	95 83       	std	Z+5, r25	; 0x05
    5258:	84 83       	std	Z+4, r24	; 0x04
    525a:	8f e7       	ldi	r24, 0x7F	; 127
    525c:	93 e0       	ldi	r25, 0x03	; 3
    525e:	a0 e0       	ldi	r26, 0x00	; 0
    5260:	81 83       	std	Z+1, r24	; 0x01
    5262:	92 83       	std	Z+2, r25	; 0x02
    5264:	a3 83       	std	Z+3, r26	; 0x03
    5266:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
        (unsigned int)__malloc_heap_start, (unsigned int) __malloc_heap_end );

    printf("  __brkval:    %5u\n", (unsigned int) __brkval);
    526a:	80 91 42 21 	lds	r24, 0x2142	; 0x802142 <__brkval>
    526e:	90 91 43 21 	lds	r25, 0x2143	; 0x802143 <__brkval+0x1>
    5272:	ed b7       	in	r30, 0x3d	; 61
    5274:	fe b7       	in	r31, 0x3e	; 62
    5276:	95 83       	std	Z+5, r25	; 0x05
    5278:	84 83       	std	Z+4, r24	; 0x04
    527a:	8b e6       	ldi	r24, 0x6B	; 107
    527c:	93 e0       	ldi	r25, 0x03	; 3
    527e:	a0 e0       	ldi	r26, 0x00	; 0
    5280:	81 83       	std	Z+1, r24	; 0x01
    5282:	92 83       	std	Z+2, r25	; 0x02
    5284:	a3 83       	std	Z+3, r26	; 0x03
    5286:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>

}
    528a:	29 96       	adiw	r28, 0x09	; 9
    528c:	e2 e0       	ldi	r30, 0x02	; 2
    528e:	0c 94 f4 e3 	jmp	0x1c7e8	; 0x1c7e8 <__epilogue_restores__+0x20>

00005292 <safecalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
///
/// @return  void.
void *safecalloc(int size, int elements)
{
    5292:	ef 92       	push	r14
    5294:	ff 92       	push	r15
    5296:	0f 93       	push	r16
    5298:	1f 93       	push	r17
    529a:	cf 93       	push	r28
    529c:	df 93       	push	r29
    529e:	ad b7       	in	r26, 0x3d	; 61
    52a0:	be b7       	in	r27, 0x3e	; 62
    52a2:	17 97       	sbiw	r26, 0x07	; 7
    52a4:	0f b6       	in	r0, 0x3f	; 63
    52a6:	f8 94       	cli
    52a8:	be bf       	out	0x3e, r27	; 62
    52aa:	0f be       	out	0x3f, r0	; 63
    52ac:	ad bf       	out	0x3d, r26	; 61
    52ae:	8c 01       	movw	r16, r24
    52b0:	7b 01       	movw	r14, r22
	void *p = calloc(size, elements);
    52b2:	0e 94 76 e6 	call	0x1ccec	; 0x1ccec <calloc>
    52b6:	ec 01       	movw	r28, r24
	if(!p)
    52b8:	89 2b       	or	r24, r25
    52ba:	71 f4       	brne	.+28     	; 0x52d8 <safecalloc+0x46>
	{
		printf("safecalloc(%d,%d) failed!\n", size, elements);
    52bc:	ed b7       	in	r30, 0x3d	; 61
    52be:	fe b7       	in	r31, 0x3e	; 62
    52c0:	f7 82       	std	Z+7, r15	; 0x07
    52c2:	e6 82       	std	Z+6, r14	; 0x06
    52c4:	15 83       	std	Z+5, r17	; 0x05
    52c6:	04 83       	std	Z+4, r16	; 0x04
    52c8:	80 e5       	ldi	r24, 0x50	; 80
    52ca:	93 e0       	ldi	r25, 0x03	; 3
    52cc:	a0 e0       	ldi	r26, 0x00	; 0
    52ce:	81 83       	std	Z+1, r24	; 0x01
    52d0:	92 83       	std	Z+2, r25	; 0x02
    52d2:	a3 83       	std	Z+3, r26	; 0x03
    52d4:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
	}
	return(p);
}
    52d8:	ce 01       	movw	r24, r28
    52da:	cd b7       	in	r28, 0x3d	; 61
    52dc:	de b7       	in	r29, 0x3e	; 62
    52de:	27 96       	adiw	r28, 0x07	; 7
    52e0:	e6 e0       	ldi	r30, 0x06	; 6
    52e2:	0c 94 f0 e3 	jmp	0x1c7e0	; 0x1c7e0 <__epilogue_restores__+0x18>

000052e6 <safemalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
/// @param[in] size:  size
/// @return  void.
void *safemalloc(size_t size)
{
    52e6:	0f 93       	push	r16
    52e8:	1f 93       	push	r17
    52ea:	cf 93       	push	r28
    52ec:	df 93       	push	r29
    52ee:	00 d0       	rcall	.+0      	; 0x52f0 <safemalloc+0xa>
    52f0:	00 d0       	rcall	.+0      	; 0x52f2 <safemalloc+0xc>
    52f2:	1f 92       	push	r1
    52f4:	8c 01       	movw	r16, r24
    void *p = calloc(size, 1);
    52f6:	61 e0       	ldi	r22, 0x01	; 1
    52f8:	70 e0       	ldi	r23, 0x00	; 0
    52fa:	0e 94 76 e6 	call	0x1ccec	; 0x1ccec <calloc>
    52fe:	ec 01       	movw	r28, r24
    if(!p)
    5300:	89 2b       	or	r24, r25
    5302:	61 f4       	brne	.+24     	; 0x531c <safemalloc+0x36>
    {
        printf("safemalloc(%d) failed!\n", size);
    5304:	ed b7       	in	r30, 0x3d	; 61
    5306:	fe b7       	in	r31, 0x3e	; 62
    5308:	15 83       	std	Z+5, r17	; 0x05
    530a:	04 83       	std	Z+4, r16	; 0x04
    530c:	88 e3       	ldi	r24, 0x38	; 56
    530e:	93 e0       	ldi	r25, 0x03	; 3
    5310:	a0 e0       	ldi	r26, 0x00	; 0
    5312:	81 83       	std	Z+1, r24	; 0x01
    5314:	92 83       	std	Z+2, r25	; 0x02
    5316:	a3 83       	std	Z+3, r26	; 0x03
    5318:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    }
    return(p);
}
    531c:	ce 01       	movw	r24, r28
    531e:	cd b7       	in	r28, 0x3d	; 61
    5320:	de b7       	in	r29, 0x3e	; 62
    5322:	25 96       	adiw	r28, 0x05	; 5
    5324:	e4 e0       	ldi	r30, 0x04	; 4
    5326:	0c 94 f2 e3 	jmp	0x1c7e4	; 0x1c7e4 <__epilogue_restores__+0x1c>

0000532a <safefree>:
///
/// @param[in] p: pointer to free.
///
/// @return  void.
void safefree(void *p)
{
    532a:	ad b7       	in	r26, 0x3d	; 61
    532c:	be b7       	in	r27, 0x3e	; 62
    532e:	17 97       	sbiw	r26, 0x07	; 7
    5330:	0f b6       	in	r0, 0x3f	; 63
    5332:	f8 94       	cli
    5334:	be bf       	out	0x3e, r27	; 62
    5336:	0f be       	out	0x3f, r0	; 63
    5338:	ad bf       	out	0x3d, r26	; 61
    extern void *__brkval;
    extern void * __heap_start;
    extern void * __heap_end;
    uint16_t top;

    if(p == NULL)
    533a:	00 97       	sbiw	r24, 0x00	; 0
    533c:	11 f1       	breq	.+68     	; 0x5382 <safefree+0x58>
        return;

    if(__brkval)
    533e:	20 91 42 21 	lds	r18, 0x2142	; 0x802142 <__brkval>
    5342:	30 91 43 21 	lds	r19, 0x2143	; 0x802143 <__brkval+0x1>
    5346:	21 15       	cp	r18, r1
    5348:	31 05       	cpc	r19, r1
    534a:	11 f4       	brne	.+4      	; 0x5350 <safefree+0x26>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    534c:	26 e4       	ldi	r18, 0x46	; 70
    534e:	31 e2       	ldi	r19, 0x21	; 33

    if( ((uint16_t) p >= (uint16_t) &__heap_start) &&
    5350:	41 e2       	ldi	r20, 0x21	; 33
    5352:	86 34       	cpi	r24, 0x46	; 70
    5354:	94 07       	cpc	r25, r20
    5356:	30 f0       	brcs	.+12     	; 0x5364 <safefree+0x3a>
    5358:	28 17       	cp	r18, r24
    535a:	39 07       	cpc	r19, r25
    535c:	18 f0       	brcs	.+6      	; 0x5364 <safefree+0x3a>
        ((uint16_t) p <= top) )
    {
        free(p);
    535e:	0e 94 28 e7 	call	0x1ce50	; 0x1ce50 <free>
        return;
    5362:	0f c0       	rjmp	.+30     	; 0x5382 <safefree+0x58>
    }
    printf("safefree: FREE ERROR (%u), top:(%u)\n", (uint16_t) p, (uint16_t) top);
    5364:	ed b7       	in	r30, 0x3d	; 61
    5366:	fe b7       	in	r31, 0x3e	; 62
    5368:	37 83       	std	Z+7, r19	; 0x07
    536a:	26 83       	std	Z+6, r18	; 0x06
    536c:	95 83       	std	Z+5, r25	; 0x05
    536e:	84 83       	std	Z+4, r24	; 0x04
    5370:	83 e1       	ldi	r24, 0x13	; 19
    5372:	93 e0       	ldi	r25, 0x03	; 3
    5374:	a0 e0       	ldi	r26, 0x00	; 0
    5376:	81 83       	std	Z+1, r24	; 0x01
    5378:	92 83       	std	Z+2, r25	; 0x02
    537a:	a3 83       	std	Z+3, r26	; 0x03
    537c:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    PrintFree();
}
    5380:	f7 de       	rcall	.-530    	; 0x5170 <PrintFree>
    5382:	ad b7       	in	r26, 0x3d	; 61
    5384:	be b7       	in	r27, 0x3e	; 62
    5386:	17 96       	adiw	r26, 0x07	; 7
    5388:	0f b6       	in	r0, 0x3f	; 63
    538a:	f8 94       	cli
    538c:	be bf       	out	0x3e, r27	; 62
    538e:	0f be       	out	0x3f, r0	; 63
    5390:	ad bf       	out	0x3d, r26	; 61
    5392:	08 95       	ret

00005394 <delayus>:
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayus(uint32_t us)
{

    while (us >= 100U)
    5394:	64 36       	cpi	r22, 0x64	; 100
    5396:	71 05       	cpc	r23, r1
    5398:	81 05       	cpc	r24, r1
    539a:	91 05       	cpc	r25, r1
    539c:	58 f0       	brcs	.+22     	; 0x53b4 <delayus+0x20>
    {
        us -= 100U;
    539e:	64 56       	subi	r22, 0x64	; 100
    53a0:	71 09       	sbc	r23, r1
    53a2:	81 09       	sbc	r24, r1
    53a4:	91 09       	sbc	r25, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    53a6:	e3 ef       	ldi	r30, 0xF3	; 243
    53a8:	f1 e0       	ldi	r31, 0x01	; 1
    53aa:	31 97       	sbiw	r30, 0x01	; 1
    53ac:	f1 f7       	brne	.-4      	; 0x53aa <delayus+0x16>
    53ae:	00 c0       	rjmp	.+0      	; 0x53b0 <delayus+0x1c>
    53b0:	00 00       	nop
    53b2:	f0 cf       	rjmp	.-32     	; 0x5394 <delayus>
        _delay_us(100);
    }
    while (us >= 10U)
    53b4:	6a 30       	cpi	r22, 0x0A	; 10
    53b6:	71 05       	cpc	r23, r1
    53b8:	81 05       	cpc	r24, r1
    53ba:	91 05       	cpc	r25, r1
    53bc:	48 f0       	brcs	.+18     	; 0x53d0 <delayus+0x3c>
    {
        us -= 10U;
    53be:	6a 50       	subi	r22, 0x0A	; 10
    53c0:	71 09       	sbc	r23, r1
    53c2:	81 09       	sbc	r24, r1
    53c4:	91 09       	sbc	r25, r1
    53c6:	f2 e4       	ldi	r31, 0x42	; 66
    53c8:	fa 95       	dec	r31
    53ca:	f1 f7       	brne	.-4      	; 0x53c8 <delayus+0x34>
    53cc:	00 c0       	rjmp	.+0      	; 0x53ce <delayus+0x3a>
    53ce:	f2 cf       	rjmp	.-28     	; 0x53b4 <delayus+0x20>
        _delay_us(10);
    }
    while (us != 0U)
    53d0:	61 15       	cp	r22, r1
    53d2:	71 05       	cpc	r23, r1
    53d4:	81 05       	cpc	r24, r1
    53d6:	91 05       	cpc	r25, r1
    53d8:	49 f0       	breq	.+18     	; 0x53ec <delayus+0x58>
    {
        --us;
    53da:	61 50       	subi	r22, 0x01	; 1
    53dc:	71 09       	sbc	r23, r1
    53de:	81 09       	sbc	r24, r1
    53e0:	91 09       	sbc	r25, r1
    53e2:	26 e0       	ldi	r18, 0x06	; 6
    53e4:	2a 95       	dec	r18
    53e6:	f1 f7       	brne	.-4      	; 0x53e4 <delayus+0x50>
    53e8:	00 c0       	rjmp	.+0      	; 0x53ea <delayus+0x56>
    53ea:	f2 cf       	rjmp	.-28     	; 0x53d0 <delayus+0x3c>
        _delay_us(1);
    }
}
    53ec:	08 95       	ret

000053ee <delayms>:
/// _delay_us() has limited range - this extends it.
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayms(uint32_t ms)
{
    while (ms--)
    53ee:	61 15       	cp	r22, r1
    53f0:	71 05       	cpc	r23, r1
    53f2:	81 05       	cpc	r24, r1
    53f4:	91 05       	cpc	r25, r1
    53f6:	09 f4       	brne	.+2      	; 0x53fa <delayms+0xc>
    53f8:	41 c0       	rjmp	.+130    	; 0x547c <delayms+0x8e>
    53fa:	e3 ef       	ldi	r30, 0xF3	; 243
    53fc:	f1 e0       	ldi	r31, 0x01	; 1
    53fe:	31 97       	sbiw	r30, 0x01	; 1
    5400:	f1 f7       	brne	.-4      	; 0x53fe <delayms+0x10>
    5402:	00 c0       	rjmp	.+0      	; 0x5404 <delayms+0x16>
    5404:	00 00       	nop
    5406:	e3 ef       	ldi	r30, 0xF3	; 243
    5408:	f1 e0       	ldi	r31, 0x01	; 1
    540a:	31 97       	sbiw	r30, 0x01	; 1
    540c:	f1 f7       	brne	.-4      	; 0x540a <delayms+0x1c>
    540e:	00 c0       	rjmp	.+0      	; 0x5410 <delayms+0x22>
    5410:	00 00       	nop
    5412:	e3 ef       	ldi	r30, 0xF3	; 243
    5414:	f1 e0       	ldi	r31, 0x01	; 1
    5416:	31 97       	sbiw	r30, 0x01	; 1
    5418:	f1 f7       	brne	.-4      	; 0x5416 <delayms+0x28>
    541a:	00 c0       	rjmp	.+0      	; 0x541c <delayms+0x2e>
    541c:	00 00       	nop
    541e:	e3 ef       	ldi	r30, 0xF3	; 243
    5420:	f1 e0       	ldi	r31, 0x01	; 1
    5422:	31 97       	sbiw	r30, 0x01	; 1
    5424:	f1 f7       	brne	.-4      	; 0x5422 <delayms+0x34>
    5426:	00 c0       	rjmp	.+0      	; 0x5428 <delayms+0x3a>
    5428:	00 00       	nop
    542a:	e3 ef       	ldi	r30, 0xF3	; 243
    542c:	f1 e0       	ldi	r31, 0x01	; 1
    542e:	31 97       	sbiw	r30, 0x01	; 1
    5430:	f1 f7       	brne	.-4      	; 0x542e <delayms+0x40>
    5432:	00 c0       	rjmp	.+0      	; 0x5434 <delayms+0x46>
    5434:	00 00       	nop
    5436:	e3 ef       	ldi	r30, 0xF3	; 243
    5438:	f1 e0       	ldi	r31, 0x01	; 1
    543a:	31 97       	sbiw	r30, 0x01	; 1
    543c:	f1 f7       	brne	.-4      	; 0x543a <delayms+0x4c>
    543e:	00 c0       	rjmp	.+0      	; 0x5440 <delayms+0x52>
    5440:	00 00       	nop
    5442:	e3 ef       	ldi	r30, 0xF3	; 243
    5444:	f1 e0       	ldi	r31, 0x01	; 1
    5446:	31 97       	sbiw	r30, 0x01	; 1
    5448:	f1 f7       	brne	.-4      	; 0x5446 <delayms+0x58>
    544a:	00 c0       	rjmp	.+0      	; 0x544c <delayms+0x5e>
    544c:	00 00       	nop
    544e:	e3 ef       	ldi	r30, 0xF3	; 243
    5450:	f1 e0       	ldi	r31, 0x01	; 1
    5452:	31 97       	sbiw	r30, 0x01	; 1
    5454:	f1 f7       	brne	.-4      	; 0x5452 <delayms+0x64>
    5456:	00 c0       	rjmp	.+0      	; 0x5458 <delayms+0x6a>
    5458:	00 00       	nop
    545a:	e3 ef       	ldi	r30, 0xF3	; 243
    545c:	f1 e0       	ldi	r31, 0x01	; 1
    545e:	31 97       	sbiw	r30, 0x01	; 1
    5460:	f1 f7       	brne	.-4      	; 0x545e <delayms+0x70>
    5462:	00 c0       	rjmp	.+0      	; 0x5464 <delayms+0x76>
    5464:	00 00       	nop
    5466:	e3 ef       	ldi	r30, 0xF3	; 243
    5468:	f1 e0       	ldi	r31, 0x01	; 1
    546a:	31 97       	sbiw	r30, 0x01	; 1
    546c:	f1 f7       	brne	.-4      	; 0x546a <delayms+0x7c>
    546e:	00 c0       	rjmp	.+0      	; 0x5470 <delayms+0x82>
    5470:	00 00       	nop
    5472:	61 50       	subi	r22, 0x01	; 1
    5474:	71 09       	sbc	r23, r1
    5476:	81 09       	sbc	r24, r1
    5478:	91 09       	sbc	r25, r1
    547a:	b9 cf       	rjmp	.-142    	; 0x53ee <delayms>
        _delay_us(100);                           // 700
        _delay_us(100);                           // 800
        _delay_us(100);                           // 900
        _delay_us(100);                           //1000
    }
}
    547c:	08 95       	ret

0000547e <uart_rx_flush>:

    cli();
    c = uarts[uart].rx_buf[uarts[uart].rx_tail];
    sei();
    return (c & 0xff);
}
    547e:	81 11       	cpse	r24, r1
    5480:	0e c0       	rjmp	.+28     	; 0x549e <uart_rx_flush+0x20>
    5482:	f8 94       	cli
    5484:	10 92 8d 19 	sts	0x198D, r1	; 0x80198d <uarts+0x4>
    5488:	10 92 8c 19 	sts	0x198C, r1	; 0x80198c <uarts+0x3>
    548c:	10 92 89 19 	sts	0x1989, r1	; 0x801989 <uarts>
    5490:	10 92 8a 19 	sts	0x198A, r1	; 0x80198a <uarts+0x1>
    5494:	10 92 8b 19 	sts	0x198B, r1	; 0x80198b <uarts+0x2>
    5498:	10 92 8e 19 	sts	0x198E, r1	; 0x80198e <uarts+0x5>
    549c:	78 94       	sei
    549e:	08 95       	ret

000054a0 <uart_ubr>:
    54a0:	4f 92       	push	r4
    54a2:	5f 92       	push	r5
    54a4:	6f 92       	push	r6
    54a6:	7f 92       	push	r7
    54a8:	8f 92       	push	r8
    54aa:	9f 92       	push	r9
    54ac:	af 92       	push	r10
    54ae:	bf 92       	push	r11
    54b0:	cf 92       	push	r12
    54b2:	df 92       	push	r13
    54b4:	ef 92       	push	r14
    54b6:	ff 92       	push	r15
    54b8:	cf 93       	push	r28
    54ba:	df 93       	push	r29
    54bc:	5a 01       	movw	r10, r20
    54be:	e9 01       	movw	r28, r18
    54c0:	0e 94 14 e5 	call	0x1ca28	; 0x1ca28 <__floatunsisf>
    54c4:	2b 01       	movw	r4, r22
    54c6:	3c 01       	movw	r6, r24
    54c8:	20 e0       	ldi	r18, 0x00	; 0
    54ca:	30 e0       	ldi	r19, 0x00	; 0
    54cc:	40 e0       	ldi	r20, 0x00	; 0
    54ce:	51 e4       	ldi	r21, 0x41	; 65
    54d0:	0e 94 ca e5 	call	0x1cb94	; 0x1cb94 <__mulsf3>
    54d4:	9b 01       	movw	r18, r22
    54d6:	ac 01       	movw	r20, r24
    54d8:	60 e8       	ldi	r22, 0x80	; 128
    54da:	76 e9       	ldi	r23, 0x96	; 150
    54dc:	88 e9       	ldi	r24, 0x98	; 152
    54de:	9b e4       	ldi	r25, 0x4B	; 75
    54e0:	0e 94 7b e4 	call	0x1c8f6	; 0x1c8f6 <__divsf3>
    54e4:	20 e0       	ldi	r18, 0x00	; 0
    54e6:	30 e0       	ldi	r19, 0x00	; 0
    54e8:	40 e8       	ldi	r20, 0x80	; 128
    54ea:	5f e3       	ldi	r21, 0x3F	; 63
    54ec:	0e 94 12 e4 	call	0x1c824	; 0x1c824 <__subsf3>
    54f0:	0e 94 2d e6 	call	0x1cc5a	; 0x1cc5a <round>
    54f4:	0e 94 e8 e4 	call	0x1c9d0	; 0x1c9d0 <__fixunssfsi>
    54f8:	6b 01       	movw	r12, r22
    54fa:	7c 01       	movw	r14, r24
    54fc:	c1 14       	cp	r12, r1
    54fe:	80 e1       	ldi	r24, 0x10	; 16
    5500:	d8 06       	cpc	r13, r24
    5502:	e1 04       	cpc	r14, r1
    5504:	f1 04       	cpc	r15, r1
    5506:	58 f4       	brcc	.+22     	; 0x551e <uart_ubr+0x7e>
    5508:	81 e0       	ldi	r24, 0x01	; 1
    550a:	90 e0       	ldi	r25, 0x00	; 0
    550c:	f5 01       	movw	r30, r10
    550e:	91 83       	std	Z+1, r25	; 0x01
    5510:	80 83       	st	Z, r24
    5512:	81 2c       	mov	r8, r1
    5514:	91 2c       	mov	r9, r1
    5516:	a1 2c       	mov	r10, r1
    5518:	21 e4       	ldi	r18, 0x41	; 65
    551a:	b2 2e       	mov	r11, r18
    551c:	31 c0       	rjmp	.+98     	; 0x5580 <uart_ubr+0xe0>
    551e:	f5 01       	movw	r30, r10
    5520:	11 82       	std	Z+1, r1	; 0x01
    5522:	10 82       	st	Z, r1
    5524:	20 e0       	ldi	r18, 0x00	; 0
    5526:	30 e0       	ldi	r19, 0x00	; 0
    5528:	40 e8       	ldi	r20, 0x80	; 128
    552a:	51 e4       	ldi	r21, 0x41	; 65
    552c:	c3 01       	movw	r24, r6
    552e:	b2 01       	movw	r22, r4
    5530:	0e 94 ca e5 	call	0x1cb94	; 0x1cb94 <__mulsf3>
    5534:	9b 01       	movw	r18, r22
    5536:	ac 01       	movw	r20, r24
    5538:	60 e8       	ldi	r22, 0x80	; 128
    553a:	76 e9       	ldi	r23, 0x96	; 150
    553c:	88 e9       	ldi	r24, 0x98	; 152
    553e:	9b e4       	ldi	r25, 0x4B	; 75
    5540:	0e 94 7b e4 	call	0x1c8f6	; 0x1c8f6 <__divsf3>
    5544:	20 e0       	ldi	r18, 0x00	; 0
    5546:	30 e0       	ldi	r19, 0x00	; 0
    5548:	40 e8       	ldi	r20, 0x80	; 128
    554a:	5f e3       	ldi	r21, 0x3F	; 63
    554c:	0e 94 12 e4 	call	0x1c824	; 0x1c824 <__subsf3>
    5550:	0e 94 2d e6 	call	0x1cc5a	; 0x1cc5a <round>
    5554:	0e 94 e8 e4 	call	0x1c9d0	; 0x1c9d0 <__fixunssfsi>
    5558:	6b 01       	movw	r12, r22
    555a:	7c 01       	movw	r14, r24
    555c:	81 2c       	mov	r8, r1
    555e:	91 2c       	mov	r9, r1
    5560:	90 e8       	ldi	r25, 0x80	; 128
    5562:	a9 2e       	mov	r10, r25
    5564:	91 e4       	ldi	r25, 0x41	; 65
    5566:	b9 2e       	mov	r11, r25
    5568:	c1 14       	cp	r12, r1
    556a:	f0 e1       	ldi	r31, 0x10	; 16
    556c:	df 06       	cpc	r13, r31
    556e:	e1 04       	cpc	r14, r1
    5570:	f1 04       	cpc	r15, r1
    5572:	30 f0       	brcs	.+12     	; 0x5580 <uart_ubr+0xe0>
    5574:	cc 24       	eor	r12, r12
    5576:	ca 94       	dec	r12
    5578:	8f e0       	ldi	r24, 0x0F	; 15
    557a:	d8 2e       	mov	r13, r24
    557c:	e1 2c       	mov	r14, r1
    557e:	f1 2c       	mov	r15, r1
    5580:	c7 01       	movw	r24, r14
    5582:	b6 01       	movw	r22, r12
    5584:	6f 5f       	subi	r22, 0xFF	; 255
    5586:	7f 4f       	sbci	r23, 0xFF	; 255
    5588:	8f 4f       	sbci	r24, 0xFF	; 255
    558a:	9f 4f       	sbci	r25, 0xFF	; 255
    558c:	0e 94 14 e5 	call	0x1ca28	; 0x1ca28 <__floatunsisf>
    5590:	a5 01       	movw	r20, r10
    5592:	94 01       	movw	r18, r8
    5594:	0e 94 ca e5 	call	0x1cb94	; 0x1cb94 <__mulsf3>
    5598:	9b 01       	movw	r18, r22
    559a:	ac 01       	movw	r20, r24
    559c:	60 e8       	ldi	r22, 0x80	; 128
    559e:	76 e9       	ldi	r23, 0x96	; 150
    55a0:	88 e9       	ldi	r24, 0x98	; 152
    55a2:	9b e4       	ldi	r25, 0x4B	; 75
    55a4:	0e 94 7b e4 	call	0x1c8f6	; 0x1c8f6 <__divsf3>
    55a8:	0e 94 e8 e4 	call	0x1c9d0	; 0x1c9d0 <__fixunssfsi>
    55ac:	68 83       	st	Y, r22
    55ae:	79 83       	std	Y+1, r23	; 0x01
    55b0:	8a 83       	std	Y+2, r24	; 0x02
    55b2:	9b 83       	std	Y+3, r25	; 0x03
    55b4:	c6 01       	movw	r24, r12
    55b6:	df 91       	pop	r29
    55b8:	cf 91       	pop	r28
    55ba:	ff 90       	pop	r15
    55bc:	ef 90       	pop	r14
    55be:	df 90       	pop	r13
    55c0:	cf 90       	pop	r12
    55c2:	bf 90       	pop	r11
    55c4:	af 90       	pop	r10
    55c6:	9f 90       	pop	r9
    55c8:	8f 90       	pop	r8
    55ca:	7f 90       	pop	r7
    55cc:	6f 90       	pop	r6
    55ce:	5f 90       	pop	r5
    55d0:	4f 90       	pop	r4
    55d2:	08 95       	ret

000055d4 <uart_init>:
    55d4:	a6 e0       	ldi	r26, 0x06	; 6
    55d6:	b0 e0       	ldi	r27, 0x00	; 0
    55d8:	e0 ef       	ldi	r30, 0xF0	; 240
    55da:	fa e2       	ldi	r31, 0x2A	; 42
    55dc:	0c 94 d8 e3 	jmp	0x1c7b0	; 0x1c7b0 <__prologue_saves__+0x20>
    55e0:	1e 82       	std	Y+6, r1	; 0x06
    55e2:	1d 82       	std	Y+5, r1	; 0x05
    55e4:	81 11       	cpse	r24, r1
    55e6:	36 c0       	rjmp	.+108    	; 0x5654 <uart_init+0x80>
    55e8:	cb 01       	movw	r24, r22
    55ea:	ba 01       	movw	r22, r20
    55ec:	9e 01       	movw	r18, r28
    55ee:	2f 5f       	subi	r18, 0xFF	; 255
    55f0:	3f 4f       	sbci	r19, 0xFF	; 255
    55f2:	ae 01       	movw	r20, r28
    55f4:	4b 5f       	subi	r20, 0xFB	; 251
    55f6:	5f 4f       	sbci	r21, 0xFF	; 255
    55f8:	53 df       	rcall	.-346    	; 0x54a0 <uart_ubr>
    55fa:	f8 94       	cli
    55fc:	10 92 8d 19 	sts	0x198D, r1	; 0x80198d <uarts+0x4>
    5600:	10 92 8c 19 	sts	0x198C, r1	; 0x80198c <uarts+0x3>
    5604:	10 92 89 19 	sts	0x1989, r1	; 0x801989 <uarts>
    5608:	10 92 8a 19 	sts	0x198A, r1	; 0x80198a <uarts+0x1>
    560c:	10 92 8b 19 	sts	0x198B, r1	; 0x80198b <uarts+0x2>
    5610:	10 92 8e 19 	sts	0x198E, r1	; 0x80198e <uarts+0x5>
    5614:	78 94       	sei
    5616:	f8 94       	cli
    5618:	58 9a       	sbi	0x0b, 0	; 11
    561a:	59 9a       	sbi	0x0b, 1	; 11
    561c:	50 98       	cbi	0x0a, 0	; 10
    561e:	51 9a       	sbi	0x0a, 1	; 10
    5620:	28 e9       	ldi	r18, 0x98	; 152
    5622:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    5626:	2d 81       	ldd	r18, Y+5	; 0x05
    5628:	3e 81       	ldd	r19, Y+6	; 0x06
    562a:	23 2b       	or	r18, r19
    562c:	19 f0       	breq	.+6      	; 0x5634 <uart_init+0x60>
    562e:	22 e0       	ldi	r18, 0x02	; 2
    5630:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    5634:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    5638:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    563c:	78 94       	sei
    563e:	62 ee       	ldi	r22, 0xE2	; 226
    5640:	7b e2       	ldi	r23, 0x2B	; 43
    5642:	87 ef       	ldi	r24, 0xF7	; 247
    5644:	9b e2       	ldi	r25, 0x2B	; 43
    5646:	0e 94 7c 79 	call	0xf2f8	; 0xf2f8 <fdevopen>
    564a:	69 81       	ldd	r22, Y+1	; 0x01
    564c:	7a 81       	ldd	r23, Y+2	; 0x02
    564e:	8b 81       	ldd	r24, Y+3	; 0x03
    5650:	9c 81       	ldd	r25, Y+4	; 0x04
    5652:	03 c0       	rjmp	.+6      	; 0x565a <uart_init+0x86>
    5654:	60 e0       	ldi	r22, 0x00	; 0
    5656:	70 e0       	ldi	r23, 0x00	; 0
    5658:	cb 01       	movw	r24, r22
    565a:	26 96       	adiw	r28, 0x06	; 6
    565c:	e2 e0       	ldi	r30, 0x02	; 2
    565e:	0c 94 f4 e3 	jmp	0x1c7e8	; 0x1c7e8 <__epilogue_restores__+0x20>

00005662 <uart_rx_interrupt>:
    5662:	cf 93       	push	r28
    5664:	df 93       	push	r29
    5666:	27 e5       	ldi	r18, 0x57	; 87
    5668:	82 9f       	mul	r24, r18
    566a:	c0 01       	movw	r24, r0
    566c:	11 24       	eor	r1, r1
    566e:	fc 01       	movw	r30, r24
    5670:	e7 57       	subi	r30, 0x77	; 119
    5672:	f6 4e       	sbci	r31, 0xE6	; 230
    5674:	83 81       	ldd	r24, Z+3	; 0x03
    5676:	94 81       	ldd	r25, Z+4	; 0x04
    5678:	80 35       	cpi	r24, 0x50	; 80
    567a:	91 05       	cpc	r25, r1
    567c:	7c f4       	brge	.+30     	; 0x569c <uart_rx_interrupt+0x3a>
    567e:	30 81       	ld	r19, Z
    5680:	21 e0       	ldi	r18, 0x01	; 1
    5682:	23 0f       	add	r18, r19
    5684:	20 83       	st	Z, r18
    5686:	ef 01       	movw	r28, r30
    5688:	c3 0f       	add	r28, r19
    568a:	d1 1d       	adc	r29, r1
    568c:	6e 83       	std	Y+6, r22	; 0x06
    568e:	01 96       	adiw	r24, 0x01	; 1
    5690:	94 83       	std	Z+4, r25	; 0x04
    5692:	83 83       	std	Z+3, r24	; 0x03
    5694:	20 35       	cpi	r18, 0x50	; 80
    5696:	28 f0       	brcs	.+10     	; 0x56a2 <uart_rx_interrupt+0x40>
    5698:	10 82       	st	Z, r1
    569a:	03 c0       	rjmp	.+6      	; 0x56a2 <uart_rx_interrupt+0x40>
    569c:	85 81       	ldd	r24, Z+5	; 0x05
    569e:	81 60       	ori	r24, 0x01	; 1
    56a0:	85 83       	std	Z+5, r24	; 0x05
    56a2:	df 91       	pop	r29
    56a4:	cf 91       	pop	r28
    56a6:	08 95       	ret

000056a8 <__vector_20>:
    56a8:	1f 92       	push	r1
    56aa:	0f 92       	push	r0
    56ac:	0f b6       	in	r0, 0x3f	; 63
    56ae:	0f 92       	push	r0
    56b0:	11 24       	eor	r1, r1
    56b2:	0b b6       	in	r0, 0x3b	; 59
    56b4:	0f 92       	push	r0
    56b6:	2f 93       	push	r18
    56b8:	3f 93       	push	r19
    56ba:	4f 93       	push	r20
    56bc:	5f 93       	push	r21
    56be:	6f 93       	push	r22
    56c0:	7f 93       	push	r23
    56c2:	8f 93       	push	r24
    56c4:	9f 93       	push	r25
    56c6:	af 93       	push	r26
    56c8:	bf 93       	push	r27
    56ca:	ef 93       	push	r30
    56cc:	ff 93       	push	r31
    56ce:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    56d2:	80 e0       	ldi	r24, 0x00	; 0
    56d4:	c6 df       	rcall	.-116    	; 0x5662 <uart_rx_interrupt>
    56d6:	ff 91       	pop	r31
    56d8:	ef 91       	pop	r30
    56da:	bf 91       	pop	r27
    56dc:	af 91       	pop	r26
    56de:	9f 91       	pop	r25
    56e0:	8f 91       	pop	r24
    56e2:	7f 91       	pop	r23
    56e4:	6f 91       	pop	r22
    56e6:	5f 91       	pop	r21
    56e8:	4f 91       	pop	r20
    56ea:	3f 91       	pop	r19
    56ec:	2f 91       	pop	r18
    56ee:	0f 90       	pop	r0
    56f0:	0b be       	out	0x3b, r0	; 59
    56f2:	0f 90       	pop	r0
    56f4:	0f be       	out	0x3f, r0	; 63
    56f6:	0f 90       	pop	r0
    56f8:	1f 90       	pop	r1
    56fa:	18 95       	reti

000056fc <uart_rx_count>:
/// @return  Character count in ring buffer.
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
    56fc:	81 11       	cpse	r24, r1
    56fe:	07 c0       	rjmp	.+14     	; 0x570e <uart_rx_count+0x12>
        return(EOF);

    cli();
    5700:	f8 94       	cli

    count = uarts[uart].rx_count;
    5702:	80 91 8c 19 	lds	r24, 0x198C	; 0x80198c <uarts+0x3>
    5706:	90 91 8d 19 	lds	r25, 0x198D	; 0x80198d <uarts+0x4>

    sei();
    570a:	78 94       	sei

    return (count );
    570c:	08 95       	ret
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
        return(EOF);
    570e:	8f ef       	ldi	r24, 0xFF	; 255
    5710:	9f ef       	ldi	r25, 0xFF	; 255
    count = uarts[uart].rx_count;

    sei();

    return (count );
}
    5712:	08 95       	ret

00005714 <uart_get_tail>:
/// @see uart_rx_count().
int uart_get_tail(uint8_t uart)
{
    uint8_t c;

    if (uart >= UARTS)
    5714:	81 11       	cpse	r24, r1
    5716:	21 c0       	rjmp	.+66     	; 0x575a <uart_get_tail+0x46>
	{
        return(EOF);
	}

	while(uart_rx_count(uart) < 1)
    5718:	80 e0       	ldi	r24, 0x00	; 0
    571a:	f0 df       	rcall	.-32     	; 0x56fc <uart_rx_count>
    571c:	18 16       	cp	r1, r24
    571e:	19 06       	cpc	r1, r25
    5720:	dc f7       	brge	.-10     	; 0x5718 <uart_get_tail+0x4>
		;

    cli();
    5722:	f8 94       	cli
    c = uarts[uart].rx_buf[uarts[uart].rx_tail++];
    5724:	e0 91 8a 19 	lds	r30, 0x198A	; 0x80198a <uarts+0x1>
    5728:	91 e0       	ldi	r25, 0x01	; 1
    572a:	9e 0f       	add	r25, r30
    572c:	90 93 8a 19 	sts	0x198A, r25	; 0x80198a <uarts+0x1>
    5730:	f0 e0       	ldi	r31, 0x00	; 0
    5732:	e7 57       	subi	r30, 0x77	; 119
    5734:	f6 4e       	sbci	r31, 0xE6	; 230
    5736:	86 81       	ldd	r24, Z+6	; 0x06
    if (uarts[uart].rx_tail >= RX_BUF_SIZE)
    5738:	90 35       	cpi	r25, 0x50	; 80
    573a:	10 f0       	brcs	.+4      	; 0x5740 <uart_get_tail+0x2c>
        uarts[uart].rx_tail = 0;
    573c:	10 92 8a 19 	sts	0x198A, r1	; 0x80198a <uarts+0x1>
    uarts[uart].rx_count--;
    5740:	20 91 8c 19 	lds	r18, 0x198C	; 0x80198c <uarts+0x3>
    5744:	30 91 8d 19 	lds	r19, 0x198D	; 0x80198d <uarts+0x4>
    5748:	21 50       	subi	r18, 0x01	; 1
    574a:	31 09       	sbc	r19, r1
    574c:	30 93 8d 19 	sts	0x198D, r19	; 0x80198d <uarts+0x4>
    5750:	20 93 8c 19 	sts	0x198C, r18	; 0x80198c <uarts+0x3>
    sei();
    5754:	78 94       	sei

    return (c & 0xff);
    5756:	90 e0       	ldi	r25, 0x00	; 0
    5758:	08 95       	ret
{
    uint8_t c;

    if (uart >= UARTS)
	{
        return(EOF);
    575a:	8f ef       	ldi	r24, 0xFF	; 255
    575c:	9f ef       	ldi	r25, 0xFF	; 255
        uarts[uart].rx_tail = 0;
    uarts[uart].rx_count--;
    sei();

    return (c & 0xff);
}
    575e:	08 95       	ret

00005760 <uart_rx_byte>:
///
/// @param[in] uart: uart number.
///
/// @return  Character.
int uart_rx_byte(uint8_t uart)
{
    5760:	d9 df       	rcall	.-78     	; 0x5714 <uart_get_tail>
    5762:	99 27       	eor	r25, r25
    5764:	08 95       	ret

00005766 <uart_tx_byte>:
    5766:	61 11       	cpse	r22, r1
    5768:	09 c0       	rjmp	.+18     	; 0x577c <uart_tx_byte+0x16>
    576a:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    576e:	25 ff       	sbrs	r18, 5
    5770:	fc cf       	rjmp	.-8      	; 0x576a <uart_tx_byte+0x4>
    5772:	28 2f       	mov	r18, r24
    5774:	2f 77       	andi	r18, 0x7F	; 127
    5776:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    577a:	08 95       	ret
    577c:	61 30       	cpi	r22, 0x01	; 1
    577e:	49 f4       	brne	.+18     	; 0x5792 <uart_tx_byte+0x2c>
    5780:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    5784:	25 ff       	sbrs	r18, 5
    5786:	fc cf       	rjmp	.-8      	; 0x5780 <uart_tx_byte+0x1a>
    5788:	28 2f       	mov	r18, r24
    578a:	2f 77       	andi	r18, 0x7F	; 127
    578c:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    5790:	08 95       	ret
    5792:	8f ef       	ldi	r24, 0xFF	; 255
    5794:	9f ef       	ldi	r25, 0xFF	; 255
    5796:	08 95       	ret

00005798 <uart_getchar>:
    5798:	cf 93       	push	r28
    579a:	81 11       	cpse	r24, r1
    579c:	0f c0       	rjmp	.+30     	; 0x57bc <uart_getchar+0x24>
    579e:	e0 df       	rcall	.-64     	; 0x5760 <uart_rx_byte>
    57a0:	c8 2f       	mov	r28, r24
    57a2:	60 e0       	ldi	r22, 0x00	; 0
    57a4:	90 e0       	ldi	r25, 0x00	; 0
    57a6:	df df       	rcall	.-66     	; 0x5766 <uart_tx_byte>
    57a8:	cd 30       	cpi	r28, 0x0D	; 13
    57aa:	29 f4       	brne	.+10     	; 0x57b6 <uart_getchar+0x1e>
    57ac:	60 e0       	ldi	r22, 0x00	; 0
    57ae:	8a e0       	ldi	r24, 0x0A	; 10
    57b0:	90 e0       	ldi	r25, 0x00	; 0
    57b2:	d9 df       	rcall	.-78     	; 0x5766 <uart_tx_byte>
    57b4:	ca e0       	ldi	r28, 0x0A	; 10
    57b6:	8c 2f       	mov	r24, r28
    57b8:	90 e0       	ldi	r25, 0x00	; 0
    57ba:	02 c0       	rjmp	.+4      	; 0x57c0 <uart_getchar+0x28>
    57bc:	8f ef       	ldi	r24, 0xFF	; 255
    57be:	9f ef       	ldi	r25, 0xFF	; 255
    57c0:	cf 91       	pop	r28
    57c2:	08 95       	ret

000057c4 <uart0_getchar>:
    57c4:	80 e0       	ldi	r24, 0x00	; 0
    57c6:	e8 cf       	rjmp	.-48     	; 0x5798 <uart_getchar>
    57c8:	08 95       	ret

000057ca <uart_putchar>:
    57ca:	1f 93       	push	r17
    57cc:	cf 93       	push	r28
    57ce:	df 93       	push	r29
    57d0:	ec 01       	movw	r28, r24
    57d2:	16 2f       	mov	r17, r22
    57d4:	c8 df       	rcall	.-112    	; 0x5766 <uart_tx_byte>
    57d6:	ca 30       	cpi	r28, 0x0A	; 10
    57d8:	d1 05       	cpc	r29, r1
    57da:	21 f4       	brne	.+8      	; 0x57e4 <uart_putchar+0x1a>
    57dc:	61 2f       	mov	r22, r17
    57de:	8d e0       	ldi	r24, 0x0D	; 13
    57e0:	90 e0       	ldi	r25, 0x00	; 0
    57e2:	c1 df       	rcall	.-126    	; 0x5766 <uart_tx_byte>
    57e4:	ce 01       	movw	r24, r28
    57e6:	df 91       	pop	r29
    57e8:	cf 91       	pop	r28
    57ea:	1f 91       	pop	r17
    57ec:	08 95       	ret

000057ee <uart0_putchar>:
    57ee:	cf 93       	push	r28
    57f0:	df 93       	push	r29
    57f2:	ec 01       	movw	r28, r24
    57f4:	60 e0       	ldi	r22, 0x00	; 0
    57f6:	70 e0       	ldi	r23, 0x00	; 0
    57f8:	e8 df       	rcall	.-48     	; 0x57ca <uart_putchar>
    57fa:	ce 01       	movw	r24, r28
    57fc:	df 91       	pop	r29
    57fe:	cf 91       	pop	r28
    5800:	08 95       	ret

00005802 <uart_keyhit>:
    5802:	7c cf       	rjmp	.-264    	; 0x56fc <uart_rx_count>
    5804:	08 95       	ret

00005806 <SPI0_Speed>:
/// @brief  Return saved SPI mode as set by SPI0_Mode().
/// @return  saved mode.
int SPI0_Get_Mode( void )
{
    return(SPI0_Mode_value);
}
    5806:	cf 92       	push	r12
    5808:	df 92       	push	r13
    580a:	ef 92       	push	r14
    580c:	ff 92       	push	r15
    580e:	6b 01       	movw	r12, r22
    5810:	7c 01       	movw	r14, r24
    5812:	80 91 10 17 	lds	r24, 0x1710	; 0x801710 <SPI0_Speed_value>
    5816:	90 91 11 17 	lds	r25, 0x1711	; 0x801711 <SPI0_Speed_value+0x1>
    581a:	a0 91 12 17 	lds	r26, 0x1712	; 0x801712 <SPI0_Speed_value+0x2>
    581e:	b0 91 13 17 	lds	r27, 0x1713	; 0x801713 <SPI0_Speed_value+0x3>
    5822:	8c 15       	cp	r24, r12
    5824:	9d 05       	cpc	r25, r13
    5826:	ae 05       	cpc	r26, r14
    5828:	bf 05       	cpc	r27, r15
    582a:	09 f4       	brne	.+2      	; 0x582e <SPI0_Speed+0x28>
    582c:	4e c0       	rjmp	.+156    	; 0x58ca <SPI0_Speed+0xc4>
    582e:	60 e0       	ldi	r22, 0x00	; 0
    5830:	7d e2       	ldi	r23, 0x2D	; 45
    5832:	81 e3       	ldi	r24, 0x31	; 49
    5834:	91 e0       	ldi	r25, 0x01	; 1
    5836:	a7 01       	movw	r20, r14
    5838:	96 01       	movw	r18, r12
    583a:	0e 94 46 e3 	call	0x1c68c	; 0x1c68c <__udivmodsi4>
    583e:	20 38       	cpi	r18, 0x80	; 128
    5840:	31 05       	cpc	r19, r1
    5842:	41 05       	cpc	r20, r1
    5844:	51 05       	cpc	r21, r1
    5846:	28 f4       	brcc	.+10     	; 0x5852 <SPI0_Speed+0x4c>
    5848:	20 34       	cpi	r18, 0x40	; 64
    584a:	31 05       	cpc	r19, r1
    584c:	41 05       	cpc	r20, r1
    584e:	51 05       	cpc	r21, r1
    5850:	30 f0       	brcs	.+12     	; 0x585e <SPI0_Speed+0x58>
    5852:	8d b5       	in	r24, 0x2d	; 45
    5854:	8e 7f       	andi	r24, 0xFE	; 254
    5856:	8d bd       	out	0x2d, r24	; 45
    5858:	8c b5       	in	r24, 0x2c	; 44
    585a:	82 60       	ori	r24, 0x02	; 2
    585c:	1b c0       	rjmp	.+54     	; 0x5894 <SPI0_Speed+0x8e>
    585e:	8d b5       	in	r24, 0x2d	; 45
    5860:	20 32       	cpi	r18, 0x20	; 32
    5862:	31 05       	cpc	r19, r1
    5864:	41 05       	cpc	r20, r1
    5866:	51 05       	cpc	r21, r1
    5868:	28 f0       	brcs	.+10     	; 0x5874 <SPI0_Speed+0x6e>
    586a:	81 60       	ori	r24, 0x01	; 1
    586c:	8d bd       	out	0x2d, r24	; 45
    586e:	8c b5       	in	r24, 0x2c	; 44
    5870:	82 60       	ori	r24, 0x02	; 2
    5872:	1f c0       	rjmp	.+62     	; 0x58b2 <SPI0_Speed+0xac>
    5874:	20 31       	cpi	r18, 0x10	; 16
    5876:	31 05       	cpc	r19, r1
    5878:	41 05       	cpc	r20, r1
    587a:	51 05       	cpc	r21, r1
    587c:	10 f0       	brcs	.+4      	; 0x5882 <SPI0_Speed+0x7c>
    587e:	8e 7f       	andi	r24, 0xFE	; 254
    5880:	06 c0       	rjmp	.+12     	; 0x588e <SPI0_Speed+0x88>
    5882:	28 30       	cpi	r18, 0x08	; 8
    5884:	31 05       	cpc	r19, r1
    5886:	41 05       	cpc	r20, r1
    5888:	51 05       	cpc	r21, r1
    588a:	40 f0       	brcs	.+16     	; 0x589c <SPI0_Speed+0x96>
    588c:	81 60       	ori	r24, 0x01	; 1
    588e:	8d bd       	out	0x2d, r24	; 45
    5890:	8c b5       	in	r24, 0x2c	; 44
    5892:	8d 7f       	andi	r24, 0xFD	; 253
    5894:	8c bd       	out	0x2c, r24	; 44
    5896:	8c b5       	in	r24, 0x2c	; 44
    5898:	81 60       	ori	r24, 0x01	; 1
    589a:	0e c0       	rjmp	.+28     	; 0x58b8 <SPI0_Speed+0xb2>
    589c:	24 30       	cpi	r18, 0x04	; 4
    589e:	31 05       	cpc	r19, r1
    58a0:	41 05       	cpc	r20, r1
    58a2:	51 05       	cpc	r21, r1
    58a4:	10 f0       	brcs	.+4      	; 0x58aa <SPI0_Speed+0xa4>
    58a6:	8e 7f       	andi	r24, 0xFE	; 254
    58a8:	01 c0       	rjmp	.+2      	; 0x58ac <SPI0_Speed+0xa6>
    58aa:	81 60       	ori	r24, 0x01	; 1
    58ac:	8d bd       	out	0x2d, r24	; 45
    58ae:	8c b5       	in	r24, 0x2c	; 44
    58b0:	8d 7f       	andi	r24, 0xFD	; 253
    58b2:	8c bd       	out	0x2c, r24	; 44
    58b4:	8c b5       	in	r24, 0x2c	; 44
    58b6:	8e 7f       	andi	r24, 0xFE	; 254
    58b8:	8c bd       	out	0x2c, r24	; 44
    58ba:	c0 92 10 17 	sts	0x1710, r12	; 0x801710 <SPI0_Speed_value>
    58be:	d0 92 11 17 	sts	0x1711, r13	; 0x801711 <SPI0_Speed_value+0x1>
    58c2:	e0 92 12 17 	sts	0x1712, r14	; 0x801712 <SPI0_Speed_value+0x2>
    58c6:	f0 92 13 17 	sts	0x1713, r15	; 0x801713 <SPI0_Speed_value+0x3>
    58ca:	ff 90       	pop	r15
    58cc:	ef 90       	pop	r14
    58ce:	df 90       	pop	r13
    58d0:	cf 90       	pop	r12
    58d2:	08 95       	ret

000058d4 <SPI0_Mode>:
    58d4:	cf 93       	push	r28
    58d6:	df 93       	push	r29
    58d8:	00 d0       	rcall	.+0      	; 0x58da <SPI0_Mode+0x6>
    58da:	00 d0       	rcall	.+0      	; 0x58dc <SPI0_Mode+0x8>
    58dc:	1f 92       	push	r1
    58de:	ec 01       	movw	r28, r24
    58e0:	81 30       	cpi	r24, 0x01	; 1
    58e2:	91 05       	cpc	r25, r1
    58e4:	71 f0       	breq	.+28     	; 0x5902 <SPI0_Mode+0x2e>
    58e6:	2c f4       	brge	.+10     	; 0x58f2 <SPI0_Mode+0x1e>
    58e8:	89 2b       	or	r24, r25
    58ea:	c1 f4       	brne	.+48     	; 0x591c <SPI0_Mode+0x48>
    58ec:	8c b5       	in	r24, 0x2c	; 44
    58ee:	87 7f       	andi	r24, 0xF7	; 247
    58f0:	11 c0       	rjmp	.+34     	; 0x5914 <SPI0_Mode+0x40>
    58f2:	82 30       	cpi	r24, 0x02	; 2
    58f4:	91 05       	cpc	r25, r1
    58f6:	61 f0       	breq	.+24     	; 0x5910 <SPI0_Mode+0x3c>
    58f8:	03 97       	sbiw	r24, 0x03	; 3
    58fa:	81 f4       	brne	.+32     	; 0x591c <SPI0_Mode+0x48>
    58fc:	8c b5       	in	r24, 0x2c	; 44
    58fe:	88 60       	ori	r24, 0x08	; 8
    5900:	02 c0       	rjmp	.+4      	; 0x5906 <SPI0_Mode+0x32>
    5902:	8c b5       	in	r24, 0x2c	; 44
    5904:	87 7f       	andi	r24, 0xF7	; 247
    5906:	8c bd       	out	0x2c, r24	; 44
    5908:	8c b5       	in	r24, 0x2c	; 44
    590a:	84 60       	ori	r24, 0x04	; 4
    590c:	8c bd       	out	0x2c, r24	; 44
    590e:	12 c0       	rjmp	.+36     	; 0x5934 <SPI0_Mode+0x60>
    5910:	8c b5       	in	r24, 0x2c	; 44
    5912:	88 60       	ori	r24, 0x08	; 8
    5914:	8c bd       	out	0x2c, r24	; 44
    5916:	8c b5       	in	r24, 0x2c	; 44
    5918:	8b 7f       	andi	r24, 0xFB	; 251
    591a:	f8 cf       	rjmp	.-16     	; 0x590c <SPI0_Mode+0x38>
    591c:	ed b7       	in	r30, 0x3d	; 61
    591e:	fe b7       	in	r31, 0x3e	; 62
    5920:	d5 83       	std	Z+5, r29	; 0x05
    5922:	c4 83       	std	Z+4, r28	; 0x04
    5924:	8a e2       	ldi	r24, 0x2A	; 42
    5926:	94 e0       	ldi	r25, 0x04	; 4
    5928:	a0 e0       	ldi	r26, 0x00	; 0
    592a:	81 83       	std	Z+1, r24	; 0x01
    592c:	92 83       	std	Z+2, r25	; 0x02
    592e:	a3 83       	std	Z+3, r26	; 0x03
    5930:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    5934:	d0 93 0f 17 	sts	0x170F, r29	; 0x80170f <__data_end+0x1>
    5938:	c0 93 0e 17 	sts	0x170E, r28	; 0x80170e <__data_end>
    593c:	cd b7       	in	r28, 0x3d	; 61
    593e:	de b7       	in	r29, 0x3e	; 62
    5940:	25 96       	adiw	r28, 0x05	; 5
    5942:	e2 e0       	ldi	r30, 0x02	; 2
    5944:	0c 94 f4 e3 	jmp	0x1c7e8	; 0x1c7e8 <__epilogue_restores__+0x20>

00005948 <SPI0_TXRX_Byte>:
/// @param[in] Data: Data to send.
///
/// @return  Data received.
uint8_t SPI0_TXRX_Byte(uint8_t Data)
{
    SPDR = Data;                                  // Transmit
    5948:	8e bd       	out	0x2e, r24	; 46

    while( !BIT_TST(SPSR,SPIF) )                  // Wait for send
    594a:	0d b4       	in	r0, 0x2d	; 45
    594c:	07 fe       	sbrs	r0, 7
    594e:	fd cf       	rjmp	.-6      	; 0x594a <SPI0_TXRX_Byte+0x2>
        ;

    return (SPDR);                                // Received Data
    5950:	8e b5       	in	r24, 0x2e	; 46
}
    5952:	08 95       	ret

00005954 <SPI0_Init>:

///@brief Initialize SPI0 device.
/// See Atmel App Note AVR151
/// Set default speed, IO pins and mode.
void SPI0_Init(uint32_t speed)
{
    5954:	cf 92       	push	r12
    5956:	df 92       	push	r13
    5958:	ef 92       	push	r14
    595a:	ff 92       	push	r15
    595c:	cf 93       	push	r28
    595e:	df 93       	push	r29
    5960:	1f 92       	push	r1
    5962:	cd b7       	in	r28, 0x3d	; 61
    5964:	de b7       	in	r29, 0x3e	; 62
    5966:	6b 01       	movw	r12, r22
    5968:	7c 01       	movw	r14, r24
	printf("Port B DDR:   0x%02x\n", (int) GPIO_PORT_DDR_RD(GPIO_B));
	printf("Port B LATCH: 0x%02x\n", (int) GPIO_PORT_LATCH_RD(GPIO_B));
	printf("Port B PINS:  0x%02x\n", (int) GPIO_PORT_LATCH_RD(GPIO_B));
#endif

	SPCR = 0;				// Clear SPCR in case we are not called after RESET
    596a:	1c bc       	out	0x2c, r1	; 44

    GPIO_PIN_HI(SCK);       // SCK Output
    596c:	2f 9a       	sbi	0x05, 7	; 5
    596e:	27 9a       	sbi	0x04, 7	; 4
    GPIO_PIN_HI(MOSI);                                  // MOSI Output
    5970:	2d 9a       	sbi	0x05, 5	; 5
    5972:	25 9a       	sbi	0x04, 5	; 4
    GPIO_PIN_FLOAT(MISO);   // MISO Input, no pull-up
    5974:	26 98       	cbi	0x04, 6	; 4

	// Warning *** MSTR MUST be set BEFORE SPE!!!! *** otherwise SS will NOT behave as an output
	GPIO_PIN_LOW(SS); 		// SS Output must be HI prevent slave mode from getting set while initializing
    5976:	2c 98       	cbi	0x05, 4	; 5
    5978:	24 9a       	sbi	0x04, 4	; 4
    BIT_SET(SPCR, MSTR);    // Master Mode
    597a:	8c b5       	in	r24, 0x2c	; 44
    597c:	80 61       	ori	r24, 0x10	; 16
    597e:	8c bd       	out	0x2c, r24	; 44
    BIT_SET(SPCR, SPE);     // Enable SPI
    5980:	8c b5       	in	r24, 0x2c	; 44
    5982:	80 64       	ori	r24, 0x40	; 64
    5984:	8c bd       	out	0x2c, r24	; 44

	// SPI Clear any pending interrupt flags
	D = SPSR;
    5986:	8d b5       	in	r24, 0x2d	; 45
    5988:	89 83       	std	Y+1, r24	; 0x01
	D = SPDR;
    598a:	8e b5       	in	r24, 0x2e	; 46
    598c:	89 83       	std	Y+1, r24	; 0x01

	/// Set SPI clock mode 0 
    ///  SPI Mode     CPOL    CPHA            Sample
    ///  0    0       0       Leading (Rising)   Edge
    SPI0_Mode(0);
    598e:	80 e0       	ldi	r24, 0x00	; 0
    5990:	90 e0       	ldi	r25, 0x00	; 0
    5992:	a0 df       	rcall	.-192    	; 0x58d4 <SPI0_Mode>

	// Set SPI clock speed
    SPI0_Speed(speed);
    5994:	c7 01       	movw	r24, r14
    5996:	b6 01       	movw	r22, r12

    SPI0_TXRX_Byte(0xff);	// Send dummy 0xFF
    5998:	36 df       	rcall	.-404    	; 0x5806 <SPI0_Speed>
    599a:	8f ef       	ldi	r24, 0xFF	; 255
    599c:	d5 df       	rcall	.-86     	; 0x5948 <SPI0_TXRX_Byte>
	SPI0_Init_state = 1;

}
    599e:	0f 90       	pop	r0
    59a0:	df 91       	pop	r29
    59a2:	cf 91       	pop	r28
    59a4:	ff 90       	pop	r15
    59a6:	ef 90       	pop	r14
    59a8:	df 90       	pop	r13
    59aa:	cf 90       	pop	r12
    59ac:	08 95       	ret

000059ae <SPI0_TX>:
/// @brief HSPI write using FIFO
/// @param[in] *data: transmit buffer
/// @param[in] count: number of bytes to write
/// @return  void
void SPI0_TX(uint8_t *data, int count)
{
    59ae:	0f 93       	push	r16
    59b0:	1f 93       	push	r17
    59b2:	cf 93       	push	r28
    59b4:	df 93       	push	r29
    59b6:	8c 01       	movw	r16, r24
    59b8:	eb 01       	movw	r28, r22

    while(count > 0)
    59ba:	1c 16       	cp	r1, r28
    59bc:	1d 06       	cpc	r1, r29
    59be:	34 f4       	brge	.+12     	; 0x59cc <SPI0_TX+0x1e>
    {
		SPI0_TXRX_Byte(*data);
    59c0:	f8 01       	movw	r30, r16
    59c2:	81 91       	ld	r24, Z+
    59c4:	8f 01       	movw	r16, r30
    59c6:	c0 df       	rcall	.-128    	; 0x5948 <SPI0_TXRX_Byte>
		++data;
		--count;
    59c8:	21 97       	sbiw	r28, 0x01	; 1
    59ca:	f7 cf       	rjmp	.-18     	; 0x59ba <SPI0_TX+0xc>
	}
}
    59cc:	df 91       	pop	r29
    59ce:	cf 91       	pop	r28
    59d0:	1f 91       	pop	r17
    59d2:	0f 91       	pop	r16
    59d4:	08 95       	ret

000059d6 <SPI0_TXRX>:
/// @param[in] *data: transmit / receive buffer
/// @param[in] count: number of bytes to write / read
/// @return  void

void SPI0_TXRX(uint8_t *data, int count)
{
    59d6:	0f 93       	push	r16
    59d8:	1f 93       	push	r17
    59da:	cf 93       	push	r28
    59dc:	df 93       	push	r29
    59de:	8c 01       	movw	r16, r24
    59e0:	eb 01       	movw	r28, r22

    while(count > 0)
    59e2:	1c 16       	cp	r1, r28
    59e4:	1d 06       	cpc	r1, r29
    59e6:	44 f4       	brge	.+16     	; 0x59f8 <SPI0_TXRX+0x22>
    {
		*data = SPI0_TXRX_Byte(*data);
    59e8:	f8 01       	movw	r30, r16
    59ea:	80 81       	ld	r24, Z
    59ec:	ad df       	rcall	.-166    	; 0x5948 <SPI0_TXRX_Byte>
    59ee:	f8 01       	movw	r30, r16
    59f0:	81 93       	st	Z+, r24
    59f2:	8f 01       	movw	r16, r30
		++data;
		--count;
    59f4:	21 97       	sbiw	r28, 0x01	; 1
    59f6:	f5 cf       	rjmp	.-22     	; 0x59e2 <SPI0_TXRX+0xc>
	}
}
    59f8:	df 91       	pop	r29
    59fa:	cf 91       	pop	r28
    59fc:	1f 91       	pop	r17
    59fe:	0f 91       	pop	r16
    5a00:	08 95       	ret

00005a02 <SPI0_RX>:
/// @brief HSPI read using FIFO
/// @param[in] *data: receive buffer
/// @param[in] count: number of bytes to read
/// @return  void
void SPI0_RX(uint8_t *data, int count)
{
    5a02:	0f 93       	push	r16
    5a04:	1f 93       	push	r17
    5a06:	cf 93       	push	r28
    5a08:	df 93       	push	r29
    5a0a:	8c 01       	movw	r16, r24
    5a0c:	eb 01       	movw	r28, r22

    while(count > 0)
    5a0e:	1c 16       	cp	r1, r28
    5a10:	1d 06       	cpc	r1, r29
    5a12:	3c f4       	brge	.+14     	; 0x5a22 <SPI0_RX+0x20>
    {
		*data = SPI0_TXRX_Byte(0xff);
    5a14:	8f ef       	ldi	r24, 0xFF	; 255
    5a16:	98 df       	rcall	.-208    	; 0x5948 <SPI0_TXRX_Byte>
    5a18:	f8 01       	movw	r30, r16
    5a1a:	81 93       	st	Z+, r24
    5a1c:	8f 01       	movw	r16, r30
		++data;
		--count;
    5a1e:	21 97       	sbiw	r28, 0x01	; 1
    5a20:	f6 cf       	rjmp	.-20     	; 0x5a0e <SPI0_RX+0xc>
	}
}
    5a22:	df 91       	pop	r29
    5a24:	cf 91       	pop	r28
    5a26:	1f 91       	pop	r17
    5a28:	0f 91       	pop	r16
    5a2a:	08 95       	ret

00005a2c <TWI_Init>:
///
///@return void.
void TWI_Init(const uint8_t Prescale, const uint8_t BitLength)
{

    GPIO_PIN_LATCH_HI(SCL);                   // Pull Up on
    5a2c:	40 9a       	sbi	0x08, 0	; 8
    GPIO_PIN_LATCH_HI(SDA);                   // Pull Up on
    5a2e:	41 9a       	sbi	0x08, 1	; 8

    BIT_SET(TWCR,TWEN);
    5a30:	ec eb       	ldi	r30, 0xBC	; 188
    5a32:	f0 e0       	ldi	r31, 0x00	; 0
    5a34:	90 81       	ld	r25, Z
    5a36:	94 60       	ori	r25, 0x04	; 4
    5a38:	90 83       	st	Z, r25

    TWSR  = Prescale;
    5a3a:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    TWBR  = BitLength;
    5a3e:	60 93 b8 00 	sts	0x00B8, r22	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    5a42:	08 95       	ret

00005a44 <TWI_StopTransmission>:


/** @brief Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
inline void TWI_StopTransmission(void)
{
    TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    5a44:	84 e9       	ldi	r24, 0x94	; 148
    5a46:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5a4a:	08 95       	ret

00005a4c <TWI_StartTransmission>:
    for (;;)
    {
        bool     BusCaptured = false;
        uint16_t TimeoutRemaining;

        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    5a4c:	94 ea       	ldi	r25, 0xA4	; 164
    5a4e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5a52:	24 e6       	ldi	r18, 0x64	; 100
    5a54:	62 9f       	mul	r22, r18
    5a56:	b0 01       	movw	r22, r0
    5a58:	11 24       	eor	r1, r1
    5a5a:	61 50       	subi	r22, 0x01	; 1
    5a5c:	71 09       	sbc	r23, r1

        TimeoutRemaining = (TimeoutMS * 100);
        while (TimeoutRemaining-- && !(BusCaptured))
    5a5e:	9b 01       	movw	r18, r22
///@return TWI error value on fail.
uint8_t TWI_StartTransmission(const uint8_t SlaveAddress, const uint8_t TimeoutMS)
{
    for (;;)
    {
        bool     BusCaptured = false;
    5a60:	40 e0       	ldi	r20, 0x00	; 0
    5a62:	50 e0       	ldi	r21, 0x00	; 0
                    case TW_START:
                    case TW_REP_START:
                        BusCaptured = true;
                        break;
                    case TW_MT_ARB_LOST:
                        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    5a64:	e4 ea       	ldi	r30, 0xA4	; 164
        uint16_t TimeoutRemaining;

        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));

        TimeoutRemaining = (TimeoutMS * 100);
        while (TimeoutRemaining-- && !(BusCaptured))
    5a66:	2f 3f       	cpi	r18, 0xFF	; 255
    5a68:	9f ef       	ldi	r25, 0xFF	; 255
    5a6a:	39 07       	cpc	r19, r25
    5a6c:	41 f1       	breq	.+80     	; 0x5abe <TWI_StartTransmission+0x72>
    5a6e:	41 15       	cp	r20, r1
    5a70:	51 05       	cpc	r21, r1
    5a72:	f1 f4       	brne	.+60     	; 0x5ab0 <TWI_StartTransmission+0x64>
        {
            if (TWCR & (1 << TWINT))
    5a74:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5a78:	97 ff       	sbrs	r25, 7
    5a7a:	13 c0       	rjmp	.+38     	; 0x5aa2 <TWI_StartTransmission+0x56>
            {
                switch (TWSR & TW_STATUS_MASK)
    5a7c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5a80:	98 7f       	andi	r25, 0xF8	; 248
    5a82:	90 31       	cpi	r25, 0x10	; 16
    5a84:	61 f0       	breq	.+24     	; 0x5a9e <TWI_StartTransmission+0x52>
    5a86:	98 33       	cpi	r25, 0x38	; 56
    5a88:	39 f0       	breq	.+14     	; 0x5a98 <TWI_StartTransmission+0x4c>
    5a8a:	98 30       	cpi	r25, 0x08	; 8
    5a8c:	41 f0       	breq	.+16     	; 0x5a9e <TWI_StartTransmission+0x52>
                        break;
                    case TW_MT_ARB_LOST:
                        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
                        continue;
                    default:
                        TWCR = (1 << TWEN);
    5a8e:	84 e0       	ldi	r24, 0x04	; 4
    5a90:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
                        return TWI_ERROR_BusFault;
    5a94:	81 e0       	ldi	r24, 0x01	; 1
    5a96:	08 95       	ret
                    case TW_START:
                    case TW_REP_START:
                        BusCaptured = true;
                        break;
                    case TW_MT_ARB_LOST:
                        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    5a98:	e0 93 bc 00 	sts	0x00BC, r30	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
                        continue;
    5a9c:	06 c0       	rjmp	.+12     	; 0x5aaa <TWI_StartTransmission+0x5e>
            {
                switch (TWSR & TW_STATUS_MASK)
                {
                    case TW_START:
                    case TW_REP_START:
                        BusCaptured = true;
    5a9e:	41 e0       	ldi	r20, 0x01	; 1
    5aa0:	50 e0       	ldi	r21, 0x00	; 0
    5aa2:	92 e4       	ldi	r25, 0x42	; 66
    5aa4:	9a 95       	dec	r25
    5aa6:	f1 f7       	brne	.-4      	; 0x5aa4 <TWI_StartTransmission+0x58>
    5aa8:	00 c0       	rjmp	.+0      	; 0x5aaa <TWI_StartTransmission+0x5e>
    5aaa:	21 50       	subi	r18, 0x01	; 1
    5aac:	31 09       	sbc	r19, r1
    5aae:	db cf       	rjmp	.-74     	; 0x5a66 <TWI_StartTransmission+0x1a>
            }

            _delay_us(10);
        }

        if (!(TimeoutRemaining))
    5ab0:	23 2b       	or	r18, r19
    5ab2:	29 f4       	brne	.+10     	; 0x5abe <TWI_StartTransmission+0x72>
        {
            TWCR = (1 << TWEN);
    5ab4:	84 e0       	ldi	r24, 0x04	; 4
    5ab6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
            return TWI_ERROR_BusCaptureTimeout;
    5aba:	82 e0       	ldi	r24, 0x02	; 2
    5abc:	08 95       	ret
        }

        TWDR = SlaveAddress;
    5abe:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
        TWCR = ((1 << TWINT) | (1 << TWEN));
    5ac2:	84 e8       	ldi	r24, 0x84	; 132
    5ac4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

        TimeoutRemaining = (TimeoutMS * 100);
        while (TimeoutRemaining--)
    5ac8:	6f 3f       	cpi	r22, 0xFF	; 255
    5aca:	8f ef       	ldi	r24, 0xFF	; 255
    5acc:	78 07       	cpc	r23, r24
    5ace:	71 f0       	breq	.+28     	; 0x5aec <TWI_StartTransmission+0xa0>
        {
            if (TWCR & (1 << TWINT))
    5ad0:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5ad4:	cb 01       	movw	r24, r22
    5ad6:	01 97       	sbiw	r24, 0x01	; 1
    5ad8:	27 fd       	sbrc	r18, 7
    5ada:	06 c0       	rjmp	.+12     	; 0x5ae8 <TWI_StartTransmission+0x9c>
    5adc:	22 e4       	ldi	r18, 0x42	; 66
    5ade:	2a 95       	dec	r18
    5ae0:	f1 f7       	brne	.-4      	; 0x5ade <TWI_StartTransmission+0x92>
    5ae2:	00 c0       	rjmp	.+0      	; 0x5ae4 <TWI_StartTransmission+0x98>
    5ae4:	bc 01       	movw	r22, r24
    5ae6:	f0 cf       	rjmp	.-32     	; 0x5ac8 <TWI_StartTransmission+0x7c>
                break;

            _delay_us(10);
        }

        if (!(TimeoutRemaining))
    5ae8:	67 2b       	or	r22, r23
    5aea:	61 f0       	breq	.+24     	; 0x5b04 <TWI_StartTransmission+0xb8>
            return TWI_ERROR_SlaveResponseTimeout;

        switch (TWSR & TW_STATUS_MASK)
    5aec:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5af0:	88 7f       	andi	r24, 0xF8	; 248
    5af2:	88 31       	cpi	r24, 0x18	; 24
    5af4:	49 f0       	breq	.+18     	; 0x5b08 <TWI_StartTransmission+0xbc>
    5af6:	80 34       	cpi	r24, 0x40	; 64
    5af8:	39 f0       	breq	.+14     	; 0x5b08 <TWI_StartTransmission+0xbc>
        {
            case TW_MT_SLA_ACK:
            case TW_MR_SLA_ACK:
                return TWI_ERROR_NoError;
            default:
                TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    5afa:	84 e9       	ldi	r24, 0x94	; 148
    5afc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
                return TWI_ERROR_SlaveNotReady;
    5b00:	84 e0       	ldi	r24, 0x04	; 4
    5b02:	08 95       	ret

            _delay_us(10);
        }

        if (!(TimeoutRemaining))
            return TWI_ERROR_SlaveResponseTimeout;
    5b04:	83 e0       	ldi	r24, 0x03	; 3
    5b06:	08 95       	ret

        switch (TWSR & TW_STATUS_MASK)
        {
            case TW_MT_SLA_ACK:
            case TW_MR_SLA_ACK:
                return TWI_ERROR_NoError;
    5b08:	80 e0       	ldi	r24, 0x00	; 0
            default:
                TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
                return TWI_ERROR_SlaveNotReady;
        }
    }
}
    5b0a:	08 95       	ret

00005b0c <TWI_SendByte>:
///
///@return 1 if Acknowledge.
///@return 0 on fail.
bool TWI_SendByte(const uint8_t Byte)
{
    TWDR = Byte;
    5b0c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    TWCR = ((1 << TWINT) | (1 << TWEN));
    5b10:	84 e8       	ldi	r24, 0x84	; 132
    5b12:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while (!(TWCR & (1 << TWINT)));
    5b16:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5b1a:	87 ff       	sbrs	r24, 7
    5b1c:	fc cf       	rjmp	.-8      	; 0x5b16 <TWI_SendByte+0xa>

    return ((TWSR & TW_STATUS_MASK) == TW_MT_DATA_ACK);
    5b1e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5b22:	98 7f       	andi	r25, 0xF8	; 248
    5b24:	21 e0       	ldi	r18, 0x01	; 1
    5b26:	30 e0       	ldi	r19, 0x00	; 0
    5b28:	98 32       	cpi	r25, 0x28	; 40
    5b2a:	11 f0       	breq	.+4      	; 0x5b30 <TWI_SendByte+0x24>
    5b2c:	20 e0       	ldi	r18, 0x00	; 0
    5b2e:	30 e0       	ldi	r19, 0x00	; 0
}
    5b30:	c9 01       	movw	r24, r18
    5b32:	08 95       	ret

00005b34 <TWI_ReceiveByte>:


bool TWI_ReceiveByte(uint8_t* const Byte,
const bool LastByte)
{
    5b34:	fc 01       	movw	r30, r24
    uint8_t TWCRMask;

    if (LastByte)
    5b36:	61 15       	cp	r22, r1
    5b38:	71 05       	cpc	r23, r1
    5b3a:	11 f4       	brne	.+4      	; 0x5b40 <TWI_ReceiveByte+0xc>
        TWCRMask = ((1 << TWINT) | (1 << TWEN));
    else
        TWCRMask = ((1 << TWINT) | (1 << TWEN) | (1 << TWEA));
    5b3c:	94 ec       	ldi	r25, 0xC4	; 196
    5b3e:	01 c0       	rjmp	.+2      	; 0x5b42 <TWI_ReceiveByte+0xe>
const bool LastByte)
{
    uint8_t TWCRMask;

    if (LastByte)
        TWCRMask = ((1 << TWINT) | (1 << TWEN));
    5b40:	94 e8       	ldi	r25, 0x84	; 132
    else
        TWCRMask = ((1 << TWINT) | (1 << TWEN) | (1 << TWEA));

    TWCR = TWCRMask;
    5b42:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while (!BIT_TST(TWCR, TWINT))
    5b46:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5b4a:	87 ff       	sbrs	r24, 7
    5b4c:	fc cf       	rjmp	.-8      	; 0x5b46 <TWI_ReceiveByte+0x12>
        ;
    *Byte = TWDR;
    5b4e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5b52:	80 83       	st	Z, r24

    uint8_t Status = (TWSR & TW_STATUS_MASK);
    5b54:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5b58:	28 7f       	andi	r18, 0xF8	; 248

    return ((LastByte) ? (Status == TW_MR_DATA_NACK) : (Status == TW_MR_DATA_ACK));
    5b5a:	81 e0       	ldi	r24, 0x01	; 1
    5b5c:	90 e0       	ldi	r25, 0x00	; 0
    5b5e:	67 2b       	or	r22, r23
    5b60:	19 f0       	breq	.+6      	; 0x5b68 <TWI_ReceiveByte+0x34>
    5b62:	28 35       	cpi	r18, 0x58	; 88
    5b64:	19 f4       	brne	.+6      	; 0x5b6c <TWI_ReceiveByte+0x38>
    5b66:	03 c0       	rjmp	.+6      	; 0x5b6e <TWI_ReceiveByte+0x3a>
    5b68:	20 35       	cpi	r18, 0x50	; 80
    5b6a:	09 f0       	breq	.+2      	; 0x5b6e <TWI_ReceiveByte+0x3a>
    5b6c:	80 e0       	ldi	r24, 0x00	; 0
}
    5b6e:	08 95       	ret

00005b70 <TWI_ReadPacket>:
const uint8_t TimeoutMS,
const uint8_t* InternalAddress,
uint8_t InternalAddressLen,
uint8_t* Buffer,
uint8_t Length)
{
    5b70:	a0 e0       	ldi	r26, 0x00	; 0
    5b72:	b0 e0       	ldi	r27, 0x00	; 0
    5b74:	ee eb       	ldi	r30, 0xBE	; 190
    5b76:	fd e2       	ldi	r31, 0x2D	; 45
    5b78:	0c 94 cf e3 	jmp	0x1c79e	; 0x1c79e <__prologue_saves__+0xe>
    5b7c:	f8 2e       	mov	r15, r24
    5b7e:	b6 2e       	mov	r11, r22
    5b80:	94 2e       	mov	r9, r20
    5b82:	a5 2e       	mov	r10, r21
    5b84:	c2 2f       	mov	r28, r18
    uint8_t ErrorCode;

    if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_WRITE,
    5b86:	8e 7f       	andi	r24, 0xFE	; 254
    5b88:	61 df       	rcall	.-318    	; 0x5a4c <TWI_StartTransmission>
    5b8a:	d8 2f       	mov	r29, r24
    5b8c:	81 11       	cpse	r24, r1
    5b8e:	2b c0       	rjmp	.+86     	; 0x5be6 <TWI_ReadPacket+0x76>
    5b90:	c9 2c       	mov	r12, r9
    5b92:	da 2c       	mov	r13, r10
        TimeoutMS)) == TWI_ERROR_NoError)
    {
        while (InternalAddressLen--)
    5b94:	cc 23       	and	r28, r28
    5b96:	39 f0       	breq	.+14     	; 0x5ba6 <TWI_ReadPacket+0x36>
        {
            if (!(TWI_SendByte(*(InternalAddress++))))
    5b98:	f6 01       	movw	r30, r12
    5b9a:	81 91       	ld	r24, Z+
    5b9c:	6f 01       	movw	r12, r30
    5b9e:	b6 df       	rcall	.-148    	; 0x5b0c <TWI_SendByte>
    5ba0:	c1 50       	subi	r28, 0x01	; 1
    5ba2:	89 2b       	or	r24, r25
    5ba4:	b9 f7       	brne	.-18     	; 0x5b94 <TWI_ReadPacket+0x24>
                ErrorCode = TWI_ERROR_SlaveNAK;
                break;
            }
        }

        if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_READ,
    5ba6:	6b 2d       	mov	r22, r11
    5ba8:	8f 2d       	mov	r24, r15
    5baa:	81 60       	ori	r24, 0x01	; 1
    5bac:	4f df       	rcall	.-354    	; 0x5a4c <TWI_StartTransmission>
    5bae:	d8 2f       	mov	r29, r24
    5bb0:	81 11       	cpse	r24, r1
    5bb2:	19 c0       	rjmp	.+50     	; 0x5be6 <TWI_ReadPacket+0x76>
    5bb4:	cf ef       	ldi	r28, 0xFF	; 255
    5bb6:	ce 0d       	add	r28, r14
            TimeoutMS)) == TWI_ERROR_NoError)
        {
            while (Length--)
    5bb8:	cf 3f       	cpi	r28, 0xFF	; 255
    5bba:	91 f0       	breq	.+36     	; 0x5be0 <TWI_ReadPacket+0x70>
            {
                if (!(TWI_ReceiveByte(Buffer++, (Length == 0))))
    5bbc:	78 01       	movw	r14, r16
    5bbe:	ff ef       	ldi	r31, 0xFF	; 255
    5bc0:	ef 1a       	sub	r14, r31
    5bc2:	ff 0a       	sbc	r15, r31
    5bc4:	61 e0       	ldi	r22, 0x01	; 1
    5bc6:	70 e0       	ldi	r23, 0x00	; 0
    5bc8:	cc 23       	and	r28, r28
    5bca:	11 f0       	breq	.+4      	; 0x5bd0 <TWI_ReadPacket+0x60>
    5bcc:	60 e0       	ldi	r22, 0x00	; 0
    5bce:	70 e0       	ldi	r23, 0x00	; 0
    5bd0:	c8 01       	movw	r24, r16
    5bd2:	b0 df       	rcall	.-160    	; 0x5b34 <TWI_ReceiveByte>
    5bd4:	c1 50       	subi	r28, 0x01	; 1
    5bd6:	89 2b       	or	r24, r25
    5bd8:	11 f0       	breq	.+4      	; 0x5bde <TWI_ReadPacket+0x6e>
    5bda:	87 01       	movw	r16, r14
    5bdc:	ed cf       	rjmp	.-38     	; 0x5bb8 <TWI_ReadPacket+0x48>
                {
                    ErrorCode = TWI_ERROR_SlaveNAK;
    5bde:	d5 e0       	ldi	r29, 0x05	; 5


/** @brief Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
inline void TWI_StopTransmission(void)
{
    TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    5be0:	84 e9       	ldi	r24, 0x94	; 148
    5be2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
            TWI_StopTransmission();
        }
    }

    return ErrorCode;
}
    5be6:	8d 2f       	mov	r24, r29
    5be8:	cd b7       	in	r28, 0x3d	; 61
    5bea:	de b7       	in	r29, 0x3e	; 62
    5bec:	eb e0       	ldi	r30, 0x0B	; 11
    5bee:	0c 94 eb e3 	jmp	0x1c7d6	; 0x1c7d6 <__epilogue_restores__+0xe>

00005bf2 <TWI_WritePacket>:
const uint8_t TimeoutMS,
const uint8_t* InternalAddress,
uint8_t InternalAddressLen,
const uint8_t* Buffer,
uint8_t Length)
{
    5bf2:	a0 e0       	ldi	r26, 0x00	; 0
    5bf4:	b0 e0       	ldi	r27, 0x00	; 0
    5bf6:	ef ef       	ldi	r30, 0xFF	; 255
    5bf8:	fd e2       	ldi	r31, 0x2D	; 45
    5bfa:	0c 94 d1 e3 	jmp	0x1c7a2	; 0x1c7a2 <__prologue_saves__+0x12>
    5bfe:	b4 2e       	mov	r11, r20
    5c00:	f5 2e       	mov	r15, r21
    5c02:	c2 2f       	mov	r28, r18
    uint8_t ErrorCode;

    if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_WRITE,
    5c04:	8e 7f       	andi	r24, 0xFE	; 254
    5c06:	22 df       	rcall	.-444    	; 0x5a4c <TWI_StartTransmission>
    5c08:	d8 2f       	mov	r29, r24
    5c0a:	81 11       	cpse	r24, r1
    5c0c:	1a c0       	rjmp	.+52     	; 0x5c42 <TWI_WritePacket+0x50>
    5c0e:	cb 2c       	mov	r12, r11
    5c10:	df 2c       	mov	r13, r15
        TimeoutMS)) == TWI_ERROR_NoError)
    {
        while (InternalAddressLen--)
    5c12:	cc 23       	and	r28, r28
    5c14:	41 f0       	breq	.+16     	; 0x5c26 <TWI_WritePacket+0x34>
        {
            if (!(TWI_SendByte(*(InternalAddress++))))
    5c16:	f6 01       	movw	r30, r12
    5c18:	81 91       	ld	r24, Z+
    5c1a:	6f 01       	movw	r12, r30
    5c1c:	77 df       	rcall	.-274    	; 0x5b0c <TWI_SendByte>
    5c1e:	c1 50       	subi	r28, 0x01	; 1
    5c20:	89 2b       	or	r24, r25
    5c22:	b9 f7       	brne	.-18     	; 0x5c12 <TWI_WritePacket+0x20>
            {
                ErrorCode = TWI_ERROR_SlaveNAK;
    5c24:	d5 e0       	ldi	r29, 0x05	; 5
    5c26:	68 01       	movw	r12, r16
                break;
            }
        }

        while (Length--)
    5c28:	ee 20       	and	r14, r14
    5c2a:	41 f0       	breq	.+16     	; 0x5c3c <TWI_WritePacket+0x4a>
        {
            if (!(TWI_SendByte(*(Buffer++))))
    5c2c:	f6 01       	movw	r30, r12
    5c2e:	81 91       	ld	r24, Z+
    5c30:	6f 01       	movw	r12, r30
    5c32:	6c df       	rcall	.-296    	; 0x5b0c <TWI_SendByte>
    5c34:	ea 94       	dec	r14
    5c36:	89 2b       	or	r24, r25
    5c38:	b9 f7       	brne	.-18     	; 0x5c28 <TWI_WritePacket+0x36>
            {
                ErrorCode = TWI_ERROR_SlaveNAK;
    5c3a:	d5 e0       	ldi	r29, 0x05	; 5


/** @brief Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
inline void TWI_StopTransmission(void)
{
    TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    5c3c:	84 e9       	ldi	r24, 0x94	; 148
    5c3e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

        TWI_StopTransmission();
    }

    return ErrorCode;
}
    5c42:	8d 2f       	mov	r24, r29
    5c44:	cd b7       	in	r28, 0x3d	; 61
    5c46:	de b7       	in	r29, 0x3e	; 62
    5c48:	e9 e0       	ldi	r30, 0x09	; 9
    5c4a:	0c 94 ed e3 	jmp	0x1c7da	; 0x1c7da <__epilogue_restores__+0x12>

00005c4e <__vector_26>:
  }

  SREG = sreg;
}

ISR(TWI_vect, ISR_BLOCK) {
    5c4e:	1f 92       	push	r1
    5c50:	0f 92       	push	r0
    5c52:	0f b6       	in	r0, 0x3f	; 63
    5c54:	0f 92       	push	r0
    5c56:	11 24       	eor	r1, r1
    5c58:	0b b6       	in	r0, 0x3b	; 59
    5c5a:	0f 92       	push	r0
    5c5c:	2f 93       	push	r18
    5c5e:	3f 93       	push	r19
    5c60:	4f 93       	push	r20
    5c62:	5f 93       	push	r21
    5c64:	6f 93       	push	r22
    5c66:	7f 93       	push	r23
    5c68:	8f 93       	push	r24
    5c6a:	9f 93       	push	r25
    5c6c:	af 93       	push	r26
    5c6e:	bf 93       	push	r27
    5c70:	ef 93       	push	r30
    5c72:	ff 93       	push	r31

  uint8_t status = TW_STATUS;
    5c74:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5c78:	88 7f       	andi	r24, 0xF8	; 248

  /* This interrupt should only fire if there is something to do. */
  assert(op != NULL);
    5c7a:	e0 91 14 17 	lds	r30, 0x1714	; 0x801714 <op>
    5c7e:	f0 91 15 17 	lds	r31, 0x1715	; 0x801715 <op+0x1>
    5c82:	30 97       	sbiw	r30, 0x00	; 0
    5c84:	09 f4       	brne	.+2      	; 0x5c88 <__vector_26+0x3a>
    5c86:	6f c0       	rjmp	.+222    	; 0x5d66 <__vector_26+0x118>

  if ((op->address & _BV(0)) == TW_READ) {
    5c88:	90 81       	ld	r25, Z
    5c8a:	90 ff       	sbrs	r25, 0
    5c8c:	39 c0       	rjmp	.+114    	; 0x5d00 <__vector_26+0xb2>
    /* Master Receiver mode. */
    switch (status) {
    5c8e:	80 34       	cpi	r24, 0x40	; 64
    5c90:	81 f0       	breq	.+32     	; 0x5cb2 <__vector_26+0x64>
    5c92:	38 f4       	brcc	.+14     	; 0x5ca2 <__vector_26+0x54>
    5c94:	80 31       	cpi	r24, 0x10	; 16
    5c96:	09 f4       	brne	.+2      	; 0x5c9a <__vector_26+0x4c>
    5c98:	45 c0       	rjmp	.+138    	; 0x5d24 <__vector_26+0xd6>
    5c9a:	88 33       	cpi	r24, 0x38	; 56
    5c9c:	09 f4       	brne	.+2      	; 0x5ca0 <__vector_26+0x52>
    5c9e:	94 c0       	rjmp	.+296    	; 0x5dc8 <__vector_26+0x17a>
    5ca0:	36 c0       	rjmp	.+108    	; 0x5d0e <__vector_26+0xc0>
    5ca2:	80 35       	cpi	r24, 0x50	; 80
    5ca4:	59 f0       	breq	.+22     	; 0x5cbc <__vector_26+0x6e>
    5ca6:	88 35       	cpi	r24, 0x58	; 88
    5ca8:	f1 f0       	breq	.+60     	; 0x5ce6 <__vector_26+0x98>
    5caa:	88 34       	cpi	r24, 0x48	; 72
    5cac:	09 f0       	breq	.+2      	; 0x5cb0 <__vector_26+0x62>
    5cae:	5b c0       	rjmp	.+182    	; 0x5d66 <__vector_26+0x118>
    5cb0:	54 c0       	rjmp	.+168    	; 0x5d5a <__vector_26+0x10c>
      TWCR = TWCR_DEFAULT | _BV(TWINT) | _BV(TWSTA);
      break;

    /* SLA+R has been transmitted; ACK has been received. */
    case TW_MR_SLA_ACK:
      if (op->buflen == 1) {
    5cb2:	81 81       	ldd	r24, Z+1	; 0x01
    5cb4:	81 30       	cpi	r24, 0x01	; 1
    5cb6:	09 f0       	breq	.+2      	; 0x5cba <__vector_26+0x6c>
    5cb8:	4a c0       	rjmp	.+148    	; 0x5d4e <__vector_26+0x100>
    5cba:	13 c0       	rjmp	.+38     	; 0x5ce2 <__vector_26+0x94>
      txn->flags = I2C_TXN_DONE | I2C_TXN_ERR;
      goto next_txn;

    /* Data byte has been received; ACK has been returned. */
    case TW_MR_DATA_ACK:
      op->buf[op->bufpos++] = TWDR;
    5cbc:	a3 81       	ldd	r26, Z+3	; 0x03
    5cbe:	b4 81       	ldd	r27, Z+4	; 0x04
    5cc0:	82 81       	ldd	r24, Z+2	; 0x02
    5cc2:	91 e0       	ldi	r25, 0x01	; 1
    5cc4:	98 0f       	add	r25, r24
    5cc6:	92 83       	std	Z+2, r25	; 0x02
    5cc8:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5ccc:	a8 0f       	add	r26, r24
    5cce:	b1 1d       	adc	r27, r1
    5cd0:	9c 93       	st	X, r25
      if (op->bufpos+1 == op->buflen) {
    5cd2:	82 81       	ldd	r24, Z+2	; 0x02
    5cd4:	21 81       	ldd	r18, Z+1	; 0x01
    5cd6:	90 e0       	ldi	r25, 0x00	; 0
    5cd8:	01 96       	adiw	r24, 0x01	; 1
    5cda:	30 e0       	ldi	r19, 0x00	; 0
    5cdc:	82 17       	cp	r24, r18
    5cde:	93 07       	cpc	r25, r19
    5ce0:	b1 f5       	brne	.+108    	; 0x5d4e <__vector_26+0x100>
        TWCR = TWCR_NOT_ACK;
    5ce2:	85 e8       	ldi	r24, 0x85	; 133
    5ce4:	7c c0       	rjmp	.+248    	; 0x5dde <__vector_26+0x190>
      }
      break;

    /* Data byte has been received; NOT ACK has been returned. */
    case TW_MR_DATA_NACK:
      op->buf[op->bufpos++] = TWDR;
    5ce6:	83 81       	ldd	r24, Z+3	; 0x03
    5ce8:	94 81       	ldd	r25, Z+4	; 0x04
    5cea:	22 81       	ldd	r18, Z+2	; 0x02
    5cec:	31 e0       	ldi	r19, 0x01	; 1
    5cee:	32 0f       	add	r19, r18
    5cf0:	32 83       	std	Z+2, r19	; 0x02
    5cf2:	30 91 bb 00 	lds	r19, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5cf6:	fc 01       	movw	r30, r24
    5cf8:	e2 0f       	add	r30, r18
    5cfa:	f1 1d       	adc	r31, r1
    5cfc:	30 83       	st	Z, r19
      goto next_op;
    5cfe:	35 c0       	rjmp	.+106    	; 0x5d6a <__vector_26+0x11c>
    default:
      assert(0 && "unknown status in master receiver mode");
    }
  } else {
    /* Master Transmitter mode. */
    switch (status) {
    5d00:	80 32       	cpi	r24, 0x20	; 32
    5d02:	59 f1       	breq	.+86     	; 0x5d5a <__vector_26+0x10c>
    5d04:	38 f4       	brcc	.+14     	; 0x5d14 <__vector_26+0xc6>
    5d06:	80 31       	cpi	r24, 0x10	; 16
    5d08:	69 f0       	breq	.+26     	; 0x5d24 <__vector_26+0xd6>
    5d0a:	88 31       	cpi	r24, 0x18	; 24
    5d0c:	a1 f0       	breq	.+40     	; 0x5d36 <__vector_26+0xe8>
    5d0e:	88 30       	cpi	r24, 0x08	; 8
    5d10:	51 f5       	brne	.+84     	; 0x5d66 <__vector_26+0x118>
    5d12:	08 c0       	rjmp	.+16     	; 0x5d24 <__vector_26+0xd6>
    5d14:	80 33       	cpi	r24, 0x30	; 48
    5d16:	e9 f0       	breq	.+58     	; 0x5d52 <__vector_26+0x104>
    5d18:	88 33       	cpi	r24, 0x38	; 56
    5d1a:	09 f4       	brne	.+2      	; 0x5d1e <__vector_26+0xd0>
    5d1c:	55 c0       	rjmp	.+170    	; 0x5dc8 <__vector_26+0x17a>
    5d1e:	88 32       	cpi	r24, 0x28	; 40
    5d20:	11 f5       	brne	.+68     	; 0x5d66 <__vector_26+0x118>
    5d22:	05 c0       	rjmp	.+10     	; 0x5d2e <__vector_26+0xe0>

    /* A START condition has been transmitted. */
    case TW_START:
    /* A repeated START condition has been transmitted. */
    case TW_REP_START:
      assert(op->buflen > 0);
    5d24:	81 81       	ldd	r24, Z+1	; 0x01
    5d26:	88 23       	and	r24, r24
    5d28:	f1 f0       	breq	.+60     	; 0x5d66 <__vector_26+0x118>
      op->bufpos = 0;
    5d2a:	12 82       	std	Z+2, r1	; 0x02
    5d2c:	0d c0       	rjmp	.+26     	; 0x5d48 <__vector_26+0xfa>
      txn->flags = I2C_TXN_DONE | I2C_TXN_ERR;
      goto next_txn;

    /* Data byte has been transmitted; ACK has been received. */
    case TW_MT_DATA_ACK:
      if (op->bufpos < op->buflen) {
    5d2e:	92 81       	ldd	r25, Z+2	; 0x02
    5d30:	81 81       	ldd	r24, Z+1	; 0x01
    5d32:	98 17       	cp	r25, r24
    5d34:	d0 f4       	brcc	.+52     	; 0x5d6a <__vector_26+0x11c>
        TWDR = op->buf[op->bufpos++];
    5d36:	83 81       	ldd	r24, Z+3	; 0x03
    5d38:	94 81       	ldd	r25, Z+4	; 0x04
    5d3a:	22 81       	ldd	r18, Z+2	; 0x02
    5d3c:	31 e0       	ldi	r19, 0x01	; 1
    5d3e:	32 0f       	add	r19, r18
    5d40:	32 83       	std	Z+2, r19	; 0x02
    5d42:	fc 01       	movw	r30, r24
    5d44:	e2 0f       	add	r30, r18
    5d46:	f1 1d       	adc	r31, r1
    5d48:	80 81       	ld	r24, Z
    5d4a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
        TWCR = TWCR_DEFAULT | _BV(TWINT);
    5d4e:	85 ec       	ldi	r24, 0xC5	; 197
    5d50:	46 c0       	rjmp	.+140    	; 0x5dde <__vector_26+0x190>
      /* No more bytes left to transmit... */
      goto next_op;

    /* Data byte has been transmitted; NOT ACK has been received. */
    case TW_MT_DATA_NACK:
      if (op->bufpos < op->buflen) {
    5d52:	92 81       	ldd	r25, Z+2	; 0x02
    5d54:	81 81       	ldd	r24, Z+1	; 0x01
    5d56:	98 17       	cp	r25, r24
    5d58:	40 f4       	brcc	.+16     	; 0x5d6a <__vector_26+0x11c>
        /* There were more bytes left to transmit! */
        txn->flags = I2C_TXN_DONE | I2C_TXN_ERR;
    5d5a:	e0 91 16 17 	lds	r30, 0x1716	; 0x801716 <txn>
    5d5e:	f0 91 17 17 	lds	r31, 0x1717	; 0x801717 <txn+0x1>
    5d62:	83 e0       	ldi	r24, 0x03	; 3
    5d64:	1d c0       	rjmp	.+58     	; 0x5da0 <__vector_26+0x152>
      }

      goto next_op;

    default:
      assert(0 && "unknown status in master transmitter mode");
    5d66:	0e 94 b1 e7 	call	0x1cf62	; 0x1cf62 <abort>

next_op:
  /*
   * Advance to next operation in transaction, if possible.
   */
  if (++(txn->opspos) < txn->opslen) {
    5d6a:	e0 91 16 17 	lds	r30, 0x1716	; 0x801716 <txn>
    5d6e:	f0 91 17 17 	lds	r31, 0x1717	; 0x801717 <txn+0x1>
    5d72:	84 81       	ldd	r24, Z+4	; 0x04
    5d74:	8f 5f       	subi	r24, 0xFF	; 255
    5d76:	84 83       	std	Z+4, r24	; 0x04
    5d78:	93 81       	ldd	r25, Z+3	; 0x03
    5d7a:	89 17       	cp	r24, r25
    5d7c:	80 f4       	brcc	.+32     	; 0x5d9e <__vector_26+0x150>
    op = &txn->ops[txn->opspos];
    5d7e:	84 81       	ldd	r24, Z+4	; 0x04
    5d80:	90 e0       	ldi	r25, 0x00	; 0
    5d82:	01 96       	adiw	r24, 0x01	; 1
    5d84:	45 e0       	ldi	r20, 0x05	; 5
    5d86:	48 9f       	mul	r20, r24
    5d88:	90 01       	movw	r18, r0
    5d8a:	49 9f       	mul	r20, r25
    5d8c:	30 0d       	add	r19, r0
    5d8e:	11 24       	eor	r1, r1
    5d90:	e2 0f       	add	r30, r18
    5d92:	f3 1f       	adc	r31, r19
    5d94:	f0 93 15 17 	sts	0x1715, r31	; 0x801715 <op+0x1>
    5d98:	e0 93 14 17 	sts	0x1714, r30	; 0x801714 <op>
    5d9c:	15 c0       	rjmp	.+42     	; 0x5dc8 <__vector_26+0x17a>
    TWCR = TWCR_DEFAULT | _BV(TWINT) | _BV(TWSTA);
    return;
  }

  /* No more operations, mark transaction as done. */
  txn->flags = I2C_TXN_DONE;
    5d9e:	81 e0       	ldi	r24, 0x01	; 1
    5da0:	82 83       	std	Z+2, r24	; 0x02

next_txn:
  /*
   * Advance to next transaction, if possible.
   */
  if (txn->next != NULL) {
    5da2:	e0 91 16 17 	lds	r30, 0x1716	; 0x801716 <txn>
    5da6:	f0 91 17 17 	lds	r31, 0x1717	; 0x801717 <txn+0x1>
    5daa:	80 81       	ld	r24, Z
    5dac:	91 81       	ldd	r25, Z+1	; 0x01
    5dae:	89 2b       	or	r24, r25
    5db0:	69 f0       	breq	.+26     	; 0x5dcc <__vector_26+0x17e>
    txn = txn->next;
    5db2:	80 81       	ld	r24, Z
    5db4:	91 81       	ldd	r25, Z+1	; 0x01
    5db6:	90 93 17 17 	sts	0x1717, r25	; 0x801717 <txn+0x1>
    5dba:	80 93 16 17 	sts	0x1716, r24	; 0x801716 <txn>
    op = &txn->ops[0];
    5dbe:	05 96       	adiw	r24, 0x05	; 5
    5dc0:	90 93 15 17 	sts	0x1715, r25	; 0x801715 <op+0x1>
    5dc4:	80 93 14 17 	sts	0x1714, r24	; 0x801714 <op>

    /* Repeated start. */
    TWCR = TWCR_DEFAULT | _BV(TWINT) | _BV(TWSTA);
    5dc8:	85 ee       	ldi	r24, 0xE5	; 229
    5dca:	09 c0       	rjmp	.+18     	; 0x5dde <__vector_26+0x190>
    return;
  }

  txn = NULL;
    5dcc:	10 92 17 17 	sts	0x1717, r1	; 0x801717 <txn+0x1>
    5dd0:	10 92 16 17 	sts	0x1716, r1	; 0x801716 <txn>
  op = NULL;
    5dd4:	10 92 15 17 	sts	0x1715, r1	; 0x801715 <op+0x1>
    5dd8:	10 92 14 17 	sts	0x1714, r1	; 0x801714 <op>

  /* No more transaction, transmit STOP. */
  TWCR = TWCR_DEFAULT | _BV(TWINT) | _BV(TWSTO);
    5ddc:	85 ed       	ldi	r24, 0xD5	; 213
    5dde:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
}
    5de2:	ff 91       	pop	r31
    5de4:	ef 91       	pop	r30
    5de6:	bf 91       	pop	r27
    5de8:	af 91       	pop	r26
    5dea:	9f 91       	pop	r25
    5dec:	8f 91       	pop	r24
    5dee:	7f 91       	pop	r23
    5df0:	6f 91       	pop	r22
    5df2:	5f 91       	pop	r21
    5df4:	4f 91       	pop	r20
    5df6:	3f 91       	pop	r19
    5df8:	2f 91       	pop	r18
    5dfa:	0f 90       	pop	r0
    5dfc:	0b be       	out	0x3b, r0	; 59
    5dfe:	0f 90       	pop	r0
    5e00:	0f be       	out	0x3f, r0	; 63
    5e02:	0f 90       	pop	r0
    5e04:	1f 90       	pop	r1
    5e06:	18 95       	reti

00005e08 <BINtoBCD>:
        return -1;
    }
    if(b & 8)
        return 0;
    return 1;
}
    5e08:	6a e0       	ldi	r22, 0x0A	; 10
    5e0a:	0e 94 13 e3 	call	0x1c626	; 0x1c626 <__udivmodqi4>
    5e0e:	82 95       	swap	r24
    5e10:	80 7f       	andi	r24, 0xF0	; 240
    5e12:	89 2b       	or	r24, r25
    5e14:	08 95       	ret

00005e16 <BCDtoBIN>:
    5e16:	98 2f       	mov	r25, r24
    5e18:	92 95       	swap	r25
    5e1a:	9f 70       	andi	r25, 0x0F	; 15
    5e1c:	8f 70       	andi	r24, 0x0F	; 15
    5e1e:	2a e0       	ldi	r18, 0x0A	; 10
    5e20:	92 9f       	mul	r25, r18
    5e22:	80 0d       	add	r24, r0
    5e24:	11 24       	eor	r1, r1
    5e26:	08 95       	ret

00005e28 <rtc_run>:
///  - -1 = check run state.
///
/// @return  run state 0/1 on success.
/// @return -1 on error.
int rtc_run(int run)
{
    5e28:	cf 92       	push	r12
    5e2a:	df 92       	push	r13
    5e2c:	ef 92       	push	r14
    5e2e:	0f 93       	push	r16
    5e30:	1f 93       	push	r17
    5e32:	cf 93       	push	r28
    5e34:	df 93       	push	r29
    5e36:	00 d0       	rcall	.+0      	; 0x5e38 <rtc_run+0x10>
    5e38:	00 d0       	rcall	.+0      	; 0x5e3a <rtc_run+0x12>
    5e3a:	00 d0       	rcall	.+0      	; 0x5e3c <rtc_run+0x14>
    5e3c:	cd b7       	in	r28, 0x3d	; 61
    5e3e:	de b7       	in	r29, 0x3e	; 62
    5e40:	6c 01       	movw	r12, r24
    uint8_t  WriteAddress;
    uint8_t  ReadAddress;
    uint8_t b = 0;
    5e42:	1c 82       	std	Y+4, r1	; 0x04

    ReadAddress = 0;
    5e44:	1d 82       	std	Y+5, r1	; 0x05
    if (TWI_ReadPacket(DS1307_R, RTC_TIMEOUT, &ReadAddress, sizeof(ReadAddress),
    5e46:	ee 24       	eor	r14, r14
    5e48:	e3 94       	inc	r14
    5e4a:	8e 01       	movw	r16, r28
    5e4c:	0c 5f       	subi	r16, 0xFC	; 252
    5e4e:	1f 4f       	sbci	r17, 0xFF	; 255
    5e50:	21 e0       	ldi	r18, 0x01	; 1
    5e52:	ae 01       	movw	r20, r28
    5e54:	4b 5f       	subi	r20, 0xFB	; 251
    5e56:	5f 4f       	sbci	r21, 0xFF	; 255
    5e58:	62 e3       	ldi	r22, 0x32	; 50
    5e5a:	81 ed       	ldi	r24, 0xD1	; 209
    5e5c:	89 de       	rcall	.-750    	; 0x5b70 <TWI_ReadPacket>
    5e5e:	88 23       	and	r24, r24
    5e60:	19 f0       	breq	.+6      	; 0x5e68 <rtc_run+0x40>
        (uint8_t*)&b, 1) != TWI_ERROR_NoError)
    {
        printf("rtc_run read status error\n");
    5e62:	84 ea       	ldi	r24, 0xA4	; 164
    5e64:	94 e0       	ldi	r25, 0x04	; 4
    5e66:	2a c0       	rjmp	.+84     	; 0x5ebc <rtc_run+0x94>
    5e68:	8c 81       	ldd	r24, Y+4	; 0x04
        return -1;
    }

    if(run == -1)
    5e6a:	ff ef       	ldi	r31, 0xFF	; 255
    5e6c:	cf 16       	cp	r12, r31
    5e6e:	df 06       	cpc	r13, r31
    5e70:	59 f4       	brne	.+22     	; 0x5e88 <rtc_run+0x60>
        return ((b & 0x80) ? 0 : 1);
    5e72:	08 2e       	mov	r0, r24
    5e74:	00 0c       	add	r0, r0
    5e76:	99 0b       	sbc	r25, r25
    5e78:	80 95       	com	r24
    5e7a:	90 95       	com	r25
    5e7c:	89 2f       	mov	r24, r25
    5e7e:	88 1f       	adc	r24, r24
    5e80:	88 27       	eor	r24, r24
    5e82:	88 1f       	adc	r24, r24
    5e84:	90 e0       	ldi	r25, 0x00	; 0
    5e86:	26 c0       	rjmp	.+76     	; 0x5ed4 <rtc_run+0xac>

    b = ( b  & 0x7f) | (run ? 0 : 0x80);
    5e88:	8f 77       	andi	r24, 0x7F	; 127
    5e8a:	c1 14       	cp	r12, r1
    5e8c:	d1 04       	cpc	r13, r1
    5e8e:	11 f4       	brne	.+4      	; 0x5e94 <rtc_run+0x6c>
    5e90:	90 e8       	ldi	r25, 0x80	; 128
    5e92:	01 c0       	rjmp	.+2      	; 0x5e96 <rtc_run+0x6e>
    5e94:	90 e0       	ldi	r25, 0x00	; 0
    5e96:	89 2b       	or	r24, r25
    5e98:	8c 83       	std	Y+4, r24	; 0x04

    WriteAddress = 0;
    5e9a:	1e 82       	std	Y+6, r1	; 0x06
    if (TWI_WritePacket(DS1307_W, RTC_TIMEOUT, &WriteAddress, sizeof(WriteAddress),
    5e9c:	ee 24       	eor	r14, r14
    5e9e:	e3 94       	inc	r14
    5ea0:	8e 01       	movw	r16, r28
    5ea2:	0c 5f       	subi	r16, 0xFC	; 252
    5ea4:	1f 4f       	sbci	r17, 0xFF	; 255
    5ea6:	21 e0       	ldi	r18, 0x01	; 1
    5ea8:	ae 01       	movw	r20, r28
    5eaa:	4a 5f       	subi	r20, 0xFA	; 250
    5eac:	5f 4f       	sbci	r21, 0xFF	; 255
    5eae:	62 e3       	ldi	r22, 0x32	; 50
    5eb0:	80 ed       	ldi	r24, 0xD0	; 208
    5eb2:	9f de       	rcall	.-706    	; 0x5bf2 <TWI_WritePacket>
    5eb4:	88 23       	and	r24, r24
    5eb6:	69 f0       	breq	.+26     	; 0x5ed2 <rtc_run+0xaa>
        (uint8_t*)&b, 1) != TWI_ERROR_NoError)
    {
        printf("rtc_run - write status error\n");
    5eb8:	86 e8       	ldi	r24, 0x86	; 134
    5eba:	94 e0       	ldi	r25, 0x04	; 4
    5ebc:	a0 e0       	ldi	r26, 0x00	; 0
    5ebe:	ed b7       	in	r30, 0x3d	; 61
    5ec0:	fe b7       	in	r31, 0x3e	; 62
    5ec2:	81 83       	std	Z+1, r24	; 0x01
    5ec4:	92 83       	std	Z+2, r25	; 0x02
    5ec6:	a3 83       	std	Z+3, r26	; 0x03
    5ec8:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
        return(-1);
    5ecc:	8f ef       	ldi	r24, 0xFF	; 255
    5ece:	9f ef       	ldi	r25, 0xFF	; 255
    5ed0:	01 c0       	rjmp	.+2      	; 0x5ed4 <rtc_run+0xac>
    5ed2:	c6 01       	movw	r24, r12
    }
    return(run);
}
    5ed4:	26 96       	adiw	r28, 0x06	; 6
    5ed6:	0f b6       	in	r0, 0x3f	; 63
    5ed8:	f8 94       	cli
    5eda:	de bf       	out	0x3e, r29	; 62
    5edc:	0f be       	out	0x3f, r0	; 63
    5ede:	cd bf       	out	0x3d, r28	; 61
    5ee0:	df 91       	pop	r29
    5ee2:	cf 91       	pop	r28
    5ee4:	1f 91       	pop	r17
    5ee6:	0f 91       	pop	r16
    5ee8:	ef 90       	pop	r14
    5eea:	df 90       	pop	r13
    5eec:	cf 90       	pop	r12
    5eee:	08 95       	ret

00005ef0 <rtc_write>:
/// @param[in] t: POSIX struct tm * time to set.
///
/// @return 1 on sucess.
/// @return 0 on fail.
uint8_t rtc_write(tm_t *t)
{
    5ef0:	ef 92       	push	r14
    5ef2:	0f 93       	push	r16
    5ef4:	1f 93       	push	r17
    5ef6:	cf 93       	push	r28
    5ef8:	df 93       	push	r29
    5efa:	cd b7       	in	r28, 0x3d	; 61
    5efc:	de b7       	in	r29, 0x3e	; 62
    5efe:	2c 97       	sbiw	r28, 0x0c	; 12
    5f00:	0f b6       	in	r0, 0x3f	; 63
    5f02:	f8 94       	cli
    5f04:	de bf       	out	0x3e, r29	; 62
    5f06:	0f be       	out	0x3f, r0	; 63
    5f08:	cd bf       	out	0x3d, r28	; 61
    5f0a:	8c 01       	movw	r16, r24
    uint8_t buf[8];
    uint8_t WriteAddress;

    buf[0] =  BINtoBCD(t->tm_sec) & 0x7f;
    5f0c:	fc 01       	movw	r30, r24
    5f0e:	80 81       	ld	r24, Z
    5f10:	7b df       	rcall	.-266    	; 0x5e08 <BINtoBCD>
    5f12:	8f 77       	andi	r24, 0x7F	; 127
    5f14:	8c 83       	std	Y+4, r24	; 0x04
    buf[1] =  BINtoBCD(t->tm_min) & 0x7f;
    5f16:	f8 01       	movw	r30, r16
    5f18:	82 81       	ldd	r24, Z+2	; 0x02
    5f1a:	76 df       	rcall	.-276    	; 0x5e08 <BINtoBCD>
    5f1c:	8f 77       	andi	r24, 0x7F	; 127
    buf[2] =  BINtoBCD(t->tm_hour) & 0x3f;
    5f1e:	8d 83       	std	Y+5, r24	; 0x05
    5f20:	f8 01       	movw	r30, r16
    5f22:	84 81       	ldd	r24, Z+4	; 0x04
    5f24:	71 df       	rcall	.-286    	; 0x5e08 <BINtoBCD>
    5f26:	8f 73       	andi	r24, 0x3F	; 63
    buf[3] =  ((t->tm_wday & 7) + 1) & 0x0f;
    5f28:	8e 83       	std	Y+6, r24	; 0x06
    5f2a:	f8 01       	movw	r30, r16
    5f2c:	84 85       	ldd	r24, Z+12	; 0x0c
    5f2e:	87 70       	andi	r24, 0x07	; 7
    buf[4] =  BINtoBCD(t->tm_mday ) & 0x3f;
    5f30:	8f 5f       	subi	r24, 0xFF	; 255
    5f32:	8f 83       	std	Y+7, r24	; 0x07
    5f34:	86 81       	ldd	r24, Z+6	; 0x06
    5f36:	68 df       	rcall	.-304    	; 0x5e08 <BINtoBCD>
    buf[5] =  BINtoBCD(t->tm_mon + 1) & 0x1f;
    5f38:	8f 73       	andi	r24, 0x3F	; 63
    5f3a:	88 87       	std	Y+8, r24	; 0x08
    5f3c:	f8 01       	movw	r30, r16
    5f3e:	80 85       	ldd	r24, Z+8	; 0x08
    5f40:	8f 5f       	subi	r24, 0xFF	; 255
    5f42:	62 df       	rcall	.-316    	; 0x5e08 <BINtoBCD>
    buf[6] =  BINtoBCD(t->tm_year - 100) & 0xff;  // 2000 = 0
    5f44:	8f 71       	andi	r24, 0x1F	; 31
    5f46:	89 87       	std	Y+9, r24	; 0x09
    5f48:	f8 01       	movw	r30, r16
    5f4a:	82 85       	ldd	r24, Z+10	; 0x0a
    5f4c:	84 56       	subi	r24, 0x64	; 100
    5f4e:	5c df       	rcall	.-328    	; 0x5e08 <BINtoBCD>
    buf[7] = 0x93;                                // 32khz, out square wave
    5f50:	8a 87       	std	Y+10, r24	; 0x0a
    5f52:	83 e9       	ldi	r24, 0x93	; 147
	for(i=0;i<7;++i)
		printf("%02x ", 0xff & buf[i]);
    printf("\n");
#endif

    WriteAddress = 0;
    5f54:	8b 87       	std	Y+11, r24	; 0x0b
    if (TWI_WritePacket(DS1307_W, RTC_TIMEOUT, &WriteAddress, sizeof(WriteAddress),
    5f56:	1c 86       	std	Y+12, r1	; 0x0c
    5f58:	88 e0       	ldi	r24, 0x08	; 8
    5f5a:	e8 2e       	mov	r14, r24
    5f5c:	8e 01       	movw	r16, r28
    5f5e:	0c 5f       	subi	r16, 0xFC	; 252
    5f60:	1f 4f       	sbci	r17, 0xFF	; 255
    5f62:	21 e0       	ldi	r18, 0x01	; 1
    5f64:	ae 01       	movw	r20, r28
    5f66:	44 5f       	subi	r20, 0xF4	; 244
    5f68:	5f 4f       	sbci	r21, 0xFF	; 255
    5f6a:	62 e3       	ldi	r22, 0x32	; 50
    5f6c:	80 ed       	ldi	r24, 0xD0	; 208
    5f6e:	41 de       	rcall	.-894    	; 0x5bf2 <TWI_WritePacket>
    5f70:	88 23       	and	r24, r24
        (uint8_t*)buf, 8) != TWI_ERROR_NoError)
    {
        printf("rtc_write error\n");
    5f72:	61 f0       	breq	.+24     	; 0x5f8c <rtc_write+0x9c>
    5f74:	87 e5       	ldi	r24, 0x57	; 87
    5f76:	94 e0       	ldi	r25, 0x04	; 4
    5f78:	a0 e0       	ldi	r26, 0x00	; 0
    5f7a:	ed b7       	in	r30, 0x3d	; 61
    5f7c:	fe b7       	in	r31, 0x3e	; 62
    5f7e:	81 83       	std	Z+1, r24	; 0x01
    5f80:	92 83       	std	Z+2, r25	; 0x02
    5f82:	a3 83       	std	Z+3, r26	; 0x03
    5f84:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
        return(0);
    5f88:	80 e0       	ldi	r24, 0x00	; 0
    }

    return(1);
    5f8a:	01 c0       	rjmp	.+2      	; 0x5f8e <rtc_write+0x9e>
}
    5f8c:	81 e0       	ldi	r24, 0x01	; 1
    5f8e:	2c 96       	adiw	r28, 0x0c	; 12
    5f90:	0f b6       	in	r0, 0x3f	; 63
    5f92:	f8 94       	cli
    5f94:	de bf       	out	0x3e, r29	; 62
    5f96:	0f be       	out	0x3f, r0	; 63
    5f98:	cd bf       	out	0x3d, r28	; 61
    5f9a:	df 91       	pop	r29
    5f9c:	cf 91       	pop	r28
    5f9e:	1f 91       	pop	r17
    5fa0:	0f 91       	pop	r16
    5fa2:	ef 90       	pop	r14
    5fa4:	08 95       	ret

00005fa6 <rtc_init>:
/// @param[in] seconds: POSIX EPOCH time in seconds.
///
/// @return  1 on success.
/// @return 0 on fail.
uint8_t rtc_init (int force, time_t seconds)
{
    5fa6:	a7 e0       	ldi	r26, 0x07	; 7
    5fa8:	b0 e0       	ldi	r27, 0x00	; 0
    5faa:	e9 ed       	ldi	r30, 0xD9	; 217
    5fac:	ff e2       	ldi	r31, 0x2F	; 47
    5fae:	0c 94 d6 e3 	jmp	0x1c7ac	; 0x1c7ac <__prologue_saves__+0x1c>
    5fb2:	8c 01       	movw	r16, r24
    5fb4:	4c 83       	std	Y+4, r20	; 0x04
    5fb6:	5d 83       	std	Y+5, r21	; 0x05
    5fb8:	6e 83       	std	Y+6, r22	; 0x06
    5fba:	7f 83       	std	Y+7, r23	; 0x07
    int8_t    state;

    tm_t *tmp;

    TWI_Init(TWI_BIT_PRESCALE_4, TWI_BITLENGTH_FROM_FREQ(4, 100000));
    5fbc:	61 e1       	ldi	r22, 0x11	; 17
    5fbe:	81 e0       	ldi	r24, 0x01	; 1
    5fc0:	35 dd       	rcall	.-1430   	; 0x5a2c <TWI_Init>

    if(!force)
    5fc2:	01 15       	cp	r16, r1
    5fc4:	11 05       	cpc	r17, r1
    5fc6:	d9 f4       	brne	.+54     	; 0x5ffe <rtc_init+0x58>
    {
        state = rtc_run(-1);
    5fc8:	8f ef       	ldi	r24, 0xFF	; 255
    5fca:	9f ef       	ldi	r25, 0xFF	; 255
    5fcc:	2d df       	rcall	.-422    	; 0x5e28 <rtc_run>
        if(state < 0)
    5fce:	87 ff       	sbrs	r24, 7
    5fd0:	06 c0       	rjmp	.+12     	; 0x5fde <rtc_init+0x38>
        {
            rtc_ok = 0;
    5fd2:	10 92 88 19 	sts	0x1988, r1	; 0x801988 <rtc_ok+0x1>
    5fd6:	10 92 87 19 	sts	0x1987, r1	; 0x801987 <rtc_ok>
            return 0;
    5fda:	10 e0       	ldi	r17, 0x00	; 0
    5fdc:	2b c0       	rjmp	.+86     	; 0x6034 <rtc_init+0x8e>
        }
        if(state == 0)                            // stopped
    5fde:	88 23       	and	r24, r24
    5fe0:	71 f0       	breq	.+28     	; 0x5ffe <rtc_init+0x58>
                return(0);
            }
        }
#endif

        if(rtc_run(1) < 0)                        // START RTC
    5fe2:	05 c0       	rjmp	.+10     	; 0x5fee <rtc_init+0x48>
    5fe4:	81 e0       	ldi	r24, 0x01	; 1
    5fe6:	90 e0       	ldi	r25, 0x00	; 0
    5fe8:	1f df       	rcall	.-450    	; 0x5e28 <rtc_run>
    5fea:	97 fd       	sbrc	r25, 7
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }
    }
    rtc_ok = 1;
    5fec:	f2 cf       	rjmp	.-28     	; 0x5fd2 <rtc_init+0x2c>
    5fee:	81 e0       	ldi	r24, 0x01	; 1
    5ff0:	90 e0       	ldi	r25, 0x00	; 0
    5ff2:	90 93 88 19 	sts	0x1988, r25	; 0x801988 <rtc_ok+0x1>
    5ff6:	80 93 87 19 	sts	0x1987, r24	; 0x801987 <rtc_ok>
            force = 1;
    }

    if(force)                                     // INIT
    {
        if(rtc_run(0) < 0)                        // STOP RTC
    5ffa:	11 e0       	ldi	r17, 0x01	; 1
    5ffc:	1b c0       	rjmp	.+54     	; 0x6034 <rtc_init+0x8e>
    5ffe:	80 e0       	ldi	r24, 0x00	; 0
    6000:	90 e0       	ldi	r25, 0x00	; 0
    6002:	12 df       	rcall	.-476    	; 0x5e28 <rtc_run>
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }
        tmp = gmtime(&seconds);
    6004:	97 fd       	sbrc	r25, 7
    6006:	e5 cf       	rjmp	.-54     	; 0x5fd2 <rtc_init+0x2c>
    6008:	ce 01       	movw	r24, r28
        if(!rtc_write(tmp))
    600a:	04 96       	adiw	r24, 0x04	; 4
    600c:	0e 94 97 38 	call	0x712e	; 0x712e <gmtime>
    6010:	6f df       	rcall	.-290    	; 0x5ef0 <rtc_write>
    6012:	18 2f       	mov	r17, r24
        {
            printf("rtc_init  write epoch failed\n");
    6014:	81 11       	cpse	r24, r1
    6016:	e6 cf       	rjmp	.-52     	; 0x5fe4 <rtc_init+0x3e>
    6018:	88 e6       	ldi	r24, 0x68	; 104
    601a:	94 e0       	ldi	r25, 0x04	; 4
    601c:	a0 e0       	ldi	r26, 0x00	; 0
    601e:	ed b7       	in	r30, 0x3d	; 61
    6020:	fe b7       	in	r31, 0x3e	; 62
    6022:	81 83       	std	Z+1, r24	; 0x01
    6024:	92 83       	std	Z+2, r25	; 0x02
    6026:	a3 83       	std	Z+3, r26	; 0x03
            rtc_ok = 0;
    6028:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    602c:	10 92 88 19 	sts	0x1988, r1	; 0x801988 <rtc_ok+0x1>
            return 0;
        }
    }
    rtc_ok = 1;
    return 1;
}
    6030:	10 92 87 19 	sts	0x1987, r1	; 0x801987 <rtc_ok>
    6034:	81 2f       	mov	r24, r17
    6036:	27 96       	adiw	r28, 0x07	; 7
    6038:	e4 e0       	ldi	r30, 0x04	; 4
    603a:	0c 94 f2 e3 	jmp	0x1c7e4	; 0x1c7e4 <__epilogue_restores__+0x1c>

0000603e <rtc_read>:
///
/// @param[out] t: struct tm * POSIX time returned.
/// @return  1 on sucess.
/// @return 0 on fail.
uint8_t rtc_read(tm_t *t)
{
    603e:	cf 92       	push	r12
    6040:	df 92       	push	r13
    6042:	ef 92       	push	r14
    6044:	0f 93       	push	r16
    6046:	1f 93       	push	r17
    6048:	cf 93       	push	r28
    604a:	df 93       	push	r29
    604c:	cd b7       	in	r28, 0x3d	; 61
    604e:	de b7       	in	r29, 0x3e	; 62
    6050:	2c 97       	sbiw	r28, 0x0c	; 12
    6052:	0f b6       	in	r0, 0x3f	; 63
    6054:	f8 94       	cli
    6056:	de bf       	out	0x3e, r29	; 62
    6058:	0f be       	out	0x3f, r0	; 63
    605a:	cd bf       	out	0x3d, r28	; 61
    605c:	6c 01       	movw	r12, r24
    uint8_t buf[8];

    uint8_t ReadAddress = 0;
    605e:	1c 86       	std	Y+12, r1	; 0x0c

    ReadAddress = 0;
    if (TWI_ReadPacket(DS1307_R, RTC_TIMEOUT, &ReadAddress, sizeof(ReadAddress),
    6060:	88 e0       	ldi	r24, 0x08	; 8
    6062:	e8 2e       	mov	r14, r24
    6064:	8e 01       	movw	r16, r28
    6066:	0c 5f       	subi	r16, 0xFC	; 252
    6068:	1f 4f       	sbci	r17, 0xFF	; 255
    606a:	21 e0       	ldi	r18, 0x01	; 1
    606c:	ae 01       	movw	r20, r28
    606e:	44 5f       	subi	r20, 0xF4	; 244
    6070:	5f 4f       	sbci	r21, 0xFF	; 255
    6072:	62 e3       	ldi	r22, 0x32	; 50
    6074:	81 ed       	ldi	r24, 0xD1	; 209
    6076:	7c dd       	rcall	.-1288   	; 0x5b70 <TWI_ReadPacket>
    6078:	88 23       	and	r24, r24
    607a:	61 f0       	breq	.+24     	; 0x6094 <rtc_read+0x56>
        (uint8_t*)buf, 8) != TWI_ERROR_NoError)
    {
        printf("rtc_read error\n");
    607c:	87 e4       	ldi	r24, 0x47	; 71
    607e:	94 e0       	ldi	r25, 0x04	; 4
    6080:	a0 e0       	ldi	r26, 0x00	; 0
    6082:	ed b7       	in	r30, 0x3d	; 61
    6084:	fe b7       	in	r31, 0x3e	; 62
    6086:	81 83       	std	Z+1, r24	; 0x01
    6088:	92 83       	std	Z+2, r25	; 0x02
    608a:	a3 83       	std	Z+3, r26	; 0x03
    608c:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
        return 0;
    6090:	80 e0       	ldi	r24, 0x00	; 0
    6092:	33 c0       	rjmp	.+102    	; 0x60fa <rtc_read+0xbc>
    for(i=0;i<7;++i)
        printf("%02x ", 0xff & buf[i]);
    printf("\n");
#endif

    t->tm_sec =   BCDtoBIN( buf[0] & 0x7f);
    6094:	8c 81       	ldd	r24, Y+4	; 0x04
    6096:	8f 77       	andi	r24, 0x7F	; 127
    6098:	be de       	rcall	.-644    	; 0x5e16 <BCDtoBIN>
    609a:	90 e0       	ldi	r25, 0x00	; 0
    609c:	f6 01       	movw	r30, r12
    609e:	91 83       	std	Z+1, r25	; 0x01
    t->tm_min =   BCDtoBIN( buf[1] & 0x7f);
    60a0:	80 83       	st	Z, r24
    60a2:	8d 81       	ldd	r24, Y+5	; 0x05
    60a4:	8f 77       	andi	r24, 0x7F	; 127
    60a6:	b7 de       	rcall	.-658    	; 0x5e16 <BCDtoBIN>
    60a8:	90 e0       	ldi	r25, 0x00	; 0
    60aa:	f6 01       	movw	r30, r12
    t->tm_hour =  BCDtoBIN( buf[2] & 0x3f);
    60ac:	93 83       	std	Z+3, r25	; 0x03
    60ae:	82 83       	std	Z+2, r24	; 0x02
    60b0:	8e 81       	ldd	r24, Y+6	; 0x06
    60b2:	8f 73       	andi	r24, 0x3F	; 63
    60b4:	b0 de       	rcall	.-672    	; 0x5e16 <BCDtoBIN>
    60b6:	90 e0       	ldi	r25, 0x00	; 0
    60b8:	f6 01       	movw	r30, r12
    60ba:	95 83       	std	Z+5, r25	; 0x05
    t->tm_wday =  ( buf[3] & 0x07) - 1;
    60bc:	84 83       	std	Z+4, r24	; 0x04
    60be:	8f 81       	ldd	r24, Y+7	; 0x07
    60c0:	87 70       	andi	r24, 0x07	; 7
    60c2:	90 e0       	ldi	r25, 0x00	; 0
    60c4:	01 97       	sbiw	r24, 0x01	; 1
    t->tm_mday =  BCDtoBIN( buf[4] & 0x3f) ;
    60c6:	95 87       	std	Z+13, r25	; 0x0d
    60c8:	84 87       	std	Z+12, r24	; 0x0c
    60ca:	88 85       	ldd	r24, Y+8	; 0x08
    60cc:	8f 73       	andi	r24, 0x3F	; 63
    60ce:	a3 de       	rcall	.-698    	; 0x5e16 <BCDtoBIN>
    60d0:	90 e0       	ldi	r25, 0x00	; 0
    60d2:	f6 01       	movw	r30, r12
    t->tm_mon=    BCDtoBIN( buf[5] & 0x1f) - 1;
    60d4:	97 83       	std	Z+7, r25	; 0x07
    60d6:	86 83       	std	Z+6, r24	; 0x06
    60d8:	89 85       	ldd	r24, Y+9	; 0x09
    60da:	8f 71       	andi	r24, 0x1F	; 31
    60dc:	9c de       	rcall	.-712    	; 0x5e16 <BCDtoBIN>
    60de:	90 e0       	ldi	r25, 0x00	; 0
    60e0:	01 97       	sbiw	r24, 0x01	; 1
    60e2:	f6 01       	movw	r30, r12
    t->tm_year =  BCDtoBIN( buf[6] & 0xff) + 100;
    60e4:	91 87       	std	Z+9, r25	; 0x09
    60e6:	80 87       	std	Z+8, r24	; 0x08
    60e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    60ea:	95 de       	rcall	.-726    	; 0x5e16 <BCDtoBIN>
    60ec:	90 e0       	ldi	r25, 0x00	; 0
    60ee:	8c 59       	subi	r24, 0x9C	; 156
    60f0:	9f 4f       	sbci	r25, 0xFF	; 255
    60f2:	f6 01       	movw	r30, r12
    60f4:	93 87       	std	Z+11, r25	; 0x0b
        t->tm_min,
        t->tm_sec,
        t->tm_wday);
#endif

    return 1;
    60f6:	82 87       	std	Z+10, r24	; 0x0a
}
    60f8:	81 e0       	ldi	r24, 0x01	; 1
    60fa:	2c 96       	adiw	r28, 0x0c	; 12
    60fc:	0f b6       	in	r0, 0x3f	; 63
    60fe:	f8 94       	cli
    6100:	de bf       	out	0x3e, r29	; 62
    6102:	0f be       	out	0x3f, r0	; 63
    6104:	cd bf       	out	0x3d, r28	; 61
    6106:	df 91       	pop	r29
    6108:	cf 91       	pop	r28
    610a:	1f 91       	pop	r17
    610c:	0f 91       	pop	r16
    610e:	ef 90       	pop	r14
    6110:	df 90       	pop	r13
    6112:	cf 90       	pop	r12
    6114:	08 95       	ret

00006116 <I2C_Start>:
/*
 *  Move the cursor one character to the right.
 */
void LCD_moveCursorRight()
{
	LCD_moveCursorRightCount(1);
    6116:	64 e1       	ldi	r22, 0x14	; 20
    6118:	99 dc       	rcall	.-1742   	; 0x5a4c <TWI_StartTransmission>
    611a:	81 11       	cpse	r24, r1
    611c:	07 c0       	rjmp	.+14     	; 0x612c <I2C_Start+0x16>
    611e:	81 e0       	ldi	r24, 0x01	; 1
    6120:	90 e0       	ldi	r25, 0x00	; 0
    6122:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <LCD_ok+0x1>
    6126:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <LCD_ok>
    612a:	04 c0       	rjmp	.+8      	; 0x6134 <I2C_Start+0x1e>
    612c:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <LCD_ok+0x1>
    6130:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <LCD_ok>
    6134:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <LCD_ok>
    6138:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <LCD_ok+0x1>
    613c:	08 95       	ret

0000613e <I2C_Stop>:
    613e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <LCD_ok>
    6142:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <LCD_ok+0x1>
    6146:	89 2b       	or	r24, r25
    6148:	09 f0       	breq	.+2      	; 0x614c <I2C_Stop+0xe>
    614a:	7c cc       	rjmp	.-1800   	; 0x5a44 <TWI_StopTransmission>
    614c:	08 95       	ret

0000614e <I2C_Send>:
    614e:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <LCD_ok>
    6152:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <LCD_ok+0x1>
    6156:	21 15       	cp	r18, r1
    6158:	31 05       	cpc	r19, r1
    615a:	41 f0       	breq	.+16     	; 0x616c <I2C_Send+0x1e>
    615c:	d7 dc       	rcall	.-1618   	; 0x5b0c <TWI_SendByte>
    615e:	51 e0       	ldi	r21, 0x01	; 1
    6160:	40 e0       	ldi	r20, 0x00	; 0
    6162:	89 2b       	or	r24, r25
    6164:	09 f0       	breq	.+2      	; 0x6168 <I2C_Send+0x1a>
    6166:	50 e0       	ldi	r21, 0x00	; 0
    6168:	25 2f       	mov	r18, r21
    616a:	34 2f       	mov	r19, r20
    616c:	c9 01       	movw	r24, r18
    616e:	08 95       	ret

00006170 <LCD_putb>:
    6170:	cf 93       	push	r28
    6172:	c8 2f       	mov	r28, r24
    6174:	84 ee       	ldi	r24, 0xE4	; 228
    6176:	cf df       	rcall	.-98     	; 0x6116 <I2C_Start>
    6178:	89 2b       	or	r24, r25
    617a:	19 f4       	brne	.+6      	; 0x6182 <LCD_putb+0x12>
    617c:	80 e0       	ldi	r24, 0x00	; 0
    617e:	90 e0       	ldi	r25, 0x00	; 0
    6180:	07 c0       	rjmp	.+14     	; 0x6190 <LCD_putb+0x20>
    6182:	8c 2f       	mov	r24, r28
    6184:	e4 df       	rcall	.-56     	; 0x614e <I2C_Send>
    6186:	89 2b       	or	r24, r25
    6188:	c9 f3       	breq	.-14     	; 0x617c <LCD_putb+0xc>
    618a:	d9 df       	rcall	.-78     	; 0x613e <I2C_Stop>
    618c:	81 e0       	ldi	r24, 0x01	; 1
    618e:	90 e0       	ldi	r25, 0x00	; 0
    6190:	cf 91       	pop	r28
    6192:	08 95       	ret

00006194 <LCD_command>:
    6194:	cf 93       	push	r28
    6196:	c8 2f       	mov	r28, r24
    6198:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <lcd_address>
    619c:	bc df       	rcall	.-136    	; 0x6116 <I2C_Start>
    619e:	89 2b       	or	r24, r25
    61a0:	51 f0       	breq	.+20     	; 0x61b6 <LCD_command+0x22>
    61a2:	8c e7       	ldi	r24, 0x7C	; 124
    61a4:	d4 df       	rcall	.-88     	; 0x614e <I2C_Send>
    61a6:	8c 2f       	mov	r24, r28
    61a8:	d2 df       	rcall	.-92     	; 0x614e <I2C_Send>
    61aa:	c9 df       	rcall	.-110    	; 0x613e <I2C_Stop>
    61ac:	6a e0       	ldi	r22, 0x0A	; 10
    61ae:	70 e0       	ldi	r23, 0x00	; 0
    61b0:	80 e0       	ldi	r24, 0x00	; 0
    61b2:	90 e0       	ldi	r25, 0x00	; 0
    61b4:	1c d9       	rcall	.-3528   	; 0x53ee <delayms>
    61b6:	cf 91       	pop	r28
    61b8:	08 95       	ret

000061ba <LCD_specialCommand>:
    61ba:	cf 93       	push	r28
    61bc:	c8 2f       	mov	r28, r24
    61be:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <lcd_address>
    61c2:	a9 df       	rcall	.-174    	; 0x6116 <I2C_Start>
    61c4:	89 2b       	or	r24, r25
    61c6:	51 f0       	breq	.+20     	; 0x61dc <LCD_specialCommand+0x22>
    61c8:	8e ef       	ldi	r24, 0xFE	; 254
    61ca:	c1 df       	rcall	.-126    	; 0x614e <I2C_Send>
    61cc:	8c 2f       	mov	r24, r28
    61ce:	bf df       	rcall	.-130    	; 0x614e <I2C_Send>
    61d0:	b6 df       	rcall	.-148    	; 0x613e <I2C_Stop>
    61d2:	62 e3       	ldi	r22, 0x32	; 50
    61d4:	70 e0       	ldi	r23, 0x00	; 0
    61d6:	80 e0       	ldi	r24, 0x00	; 0
    61d8:	90 e0       	ldi	r25, 0x00	; 0
    61da:	09 d9       	rcall	.-3566   	; 0x53ee <delayms>
    61dc:	cf 91       	pop	r28
    61de:	08 95       	ret

000061e0 <LCD_setCursor>:
    61e0:	a8 e0       	ldi	r26, 0x08	; 8
    61e2:	b0 e0       	ldi	r27, 0x00	; 0
    61e4:	e6 ef       	ldi	r30, 0xF6	; 246
    61e6:	f0 e3       	ldi	r31, 0x30	; 48
    61e8:	0c 94 d8 e3 	jmp	0x1c7b0	; 0x1c7b0 <__prologue_saves__+0x20>
    61ec:	98 e0       	ldi	r25, 0x08	; 8
    61ee:	e7 e4       	ldi	r30, 0x47	; 71
    61f0:	f2 e0       	ldi	r31, 0x02	; 2
    61f2:	de 01       	movw	r26, r28
    61f4:	11 96       	adiw	r26, 0x01	; 1
    61f6:	01 90       	ld	r0, Z+
    61f8:	0d 92       	st	X+, r0
    61fa:	9a 95       	dec	r25
    61fc:	e1 f7       	brne	.-8      	; 0x61f6 <LCD_setCursor+0x16>
    61fe:	64 30       	cpi	r22, 0x04	; 4
    6200:	08 f0       	brcs	.+2      	; 0x6204 <LCD_setCursor+0x24>
    6202:	63 e0       	ldi	r22, 0x03	; 3
    6204:	fe 01       	movw	r30, r28
    6206:	31 96       	adiw	r30, 0x01	; 1
    6208:	e6 0f       	add	r30, r22
    620a:	f1 1d       	adc	r31, r1
    620c:	e6 0f       	add	r30, r22
    620e:	f1 1d       	adc	r31, r1
    6210:	90 81       	ld	r25, Z
    6212:	89 0f       	add	r24, r25
    6214:	80 68       	ori	r24, 0x80	; 128
    6216:	d1 df       	rcall	.-94     	; 0x61ba <LCD_specialCommand>
    6218:	28 96       	adiw	r28, 0x08	; 8
    621a:	e2 e0       	ldi	r30, 0x02	; 2
    621c:	0c 94 f4 e3 	jmp	0x1c7e8	; 0x1c7e8 <__epilogue_restores__+0x20>

00006220 <LCD_pos>:
    6220:	e0 e1       	ldi	r30, 0x10	; 16
    6222:	f1 e0       	ldi	r31, 0x01	; 1
    6224:	28 2f       	mov	r18, r24
    6226:	30 e0       	ldi	r19, 0x00	; 0
    6228:	31 83       	std	Z+1, r19	; 0x01
    622a:	20 83       	st	Z, r18
    622c:	26 2f       	mov	r18, r22
    622e:	30 e0       	ldi	r19, 0x00	; 0
    6230:	33 83       	std	Z+3, r19	; 0x03
    6232:	22 83       	std	Z+2, r18	; 0x02
    6234:	d5 cf       	rjmp	.-86     	; 0x61e0 <LCD_setCursor>
    6236:	08 95       	ret

00006238 <LCD_clear>:
    6238:	8d e2       	ldi	r24, 0x2D	; 45
    623a:	ac df       	rcall	.-168    	; 0x6194 <LCD_command>
    623c:	60 e0       	ldi	r22, 0x00	; 0
    623e:	80 e0       	ldi	r24, 0x00	; 0
    6240:	ef df       	rcall	.-34     	; 0x6220 <LCD_pos>
    6242:	6a e0       	ldi	r22, 0x0A	; 10
    6244:	70 e0       	ldi	r23, 0x00	; 0
    6246:	80 e0       	ldi	r24, 0x00	; 0
    6248:	90 e0       	ldi	r25, 0x00	; 0
    624a:	d1 c8       	rjmp	.-3678   	; 0x53ee <delayms>
    624c:	08 95       	ret

0000624e <LCD_setFastBacklightRGB>:
} // moveCursorRight


//New command - set backlight with LCD messages or delaymss
void LCD_setFastBacklightRGB(byte r, byte g, byte b)
{
    624e:	1f 93       	push	r17
    6250:	cf 93       	push	r28
    6252:	df 93       	push	r29
    6254:	18 2f       	mov	r17, r24
    6256:	d6 2f       	mov	r29, r22
    6258:	c4 2f       	mov	r28, r20
  //send commands to the display to set backlights
  if( !I2C_Start(lcd_address) )
    625a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <lcd_address>
    625e:	5b df       	rcall	.-330    	; 0x6116 <I2C_Start>
    6260:	89 2b       	or	r24, r25
	return;
  I2C_Send(SETTING_COMMAND); //Send special command character
    6262:	81 f0       	breq	.+32     	; 0x6284 <LCD_setFastBacklightRGB+0x36>
  I2C_Send(SET_RGB_COMMAND); //Send the set RGB character '+' or plus
    6264:	8c e7       	ldi	r24, 0x7C	; 124
  I2C_Send(r);               //Send the red value
  I2C_Send(g);               //Send the green value
    6266:	73 df       	rcall	.-282    	; 0x614e <I2C_Send>
    6268:	8b e2       	ldi	r24, 0x2B	; 43
  I2C_Send(b);               //Send the blue value
    626a:	71 df       	rcall	.-286    	; 0x614e <I2C_Send>
    626c:	81 2f       	mov	r24, r17
  I2C_Stop();         //Stop transmission
    626e:	6f df       	rcall	.-290    	; 0x614e <I2C_Send>
    6270:	8d 2f       	mov	r24, r29
  delayms(10);
    6272:	6d df       	rcall	.-294    	; 0x614e <I2C_Send>
    6274:	8c 2f       	mov	r24, r28
    6276:	6b df       	rcall	.-298    	; 0x614e <I2C_Send>
    6278:	62 df       	rcall	.-316    	; 0x613e <I2C_Stop>
    627a:	6a e0       	ldi	r22, 0x0A	; 10
    627c:	70 e0       	ldi	r23, 0x00	; 0
} // setFastBacklight
    627e:	80 e0       	ldi	r24, 0x00	; 0
    6280:	90 e0       	ldi	r25, 0x00	; 0
    6282:	b5 d8       	rcall	.-3734   	; 0x53ee <delayms>
    6284:	df 91       	pop	r29
    6286:	cf 91       	pop	r28
    6288:	1f 91       	pop	r17
    628a:	08 95       	ret

0000628c <LCD_init>:
 *
 */
bool LCD_init(uint8_t addr)
{
  
  if( !I2C_Start(lcd_address = addr) )
    628c:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <lcd_address>
    6290:	42 df       	rcall	.-380    	; 0x6116 <I2C_Start>
    6292:	00 97       	sbiw	r24, 0x00	; 0
	return 0;

  I2C_Send(SPECIAL_COMMAND);                      //Send special command character
    6294:	61 f1       	breq	.+88     	; 0x62ee <LCD_init+0x62>
    6296:	8e ef       	ldi	r24, 0xFE	; 254
  I2C_Send(LCD_DISPLAYCONTROL | _displayControl); //Send the display command
    6298:	5a df       	rcall	.-332    	; 0x614e <I2C_Send>
    629a:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <_displayControl>

  I2C_Send(SPECIAL_COMMAND);                      //Send special command character
    629e:	88 60       	ori	r24, 0x08	; 8
    62a0:	56 df       	rcall	.-340    	; 0x614e <I2C_Send>
  I2C_Send(LCD_ENTRYMODESET | _displayMode);      //Send the entry mode command
    62a2:	8e ef       	ldi	r24, 0xFE	; 254
    62a4:	54 df       	rcall	.-344    	; 0x614e <I2C_Send>

  I2C_Send(SETTING_COMMAND);                      //Put LCD into setting mode
    62a6:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <_displayMode>
  I2C_Send(CLEAR_COMMAND);                        //Send clear display command

  I2C_Send(SETTING_COMMAND);                      //Send special command character
    62aa:	84 60       	ori	r24, 0x04	; 4
  I2C_Send(DISABLE_SYSTEM_MESSAGE_DISPLAY);       //Send the set '.' character
    62ac:	50 df       	rcall	.-352    	; 0x614e <I2C_Send>
    62ae:	8c e7       	ldi	r24, 0x7C	; 124

  I2C_Send(SPECIAL_COMMAND);                      //Send special command character
    62b0:	4e df       	rcall	.-356    	; 0x614e <I2C_Send>
    62b2:	8d e2       	ldi	r24, 0x2D	; 45
  I2C_Send(LCD_SETDDRAMADDR | 0);				// HOME 0,0
    62b4:	4c df       	rcall	.-360    	; 0x614e <I2C_Send>
    62b6:	8c e7       	ldi	r24, 0x7C	; 124

  I2C_Stop();
    62b8:	4a df       	rcall	.-364    	; 0x614e <I2C_Send>
    62ba:	8f e2       	ldi	r24, 0x2F	; 47
  delayms(50);                                      //let things settle a bit
    62bc:	48 df       	rcall	.-368    	; 0x614e <I2C_Send>
    62be:	8e ef       	ldi	r24, 0xFE	; 254
    62c0:	46 df       	rcall	.-372    	; 0x614e <I2C_Send>
    62c2:	80 e8       	ldi	r24, 0x80	; 128
    62c4:	44 df       	rcall	.-376    	; 0x614e <I2C_Send>
    62c6:	3b df       	rcall	.-394    	; 0x613e <I2C_Stop>

  LCD_setFastBacklightRGB ( 0xC0, 0xC0, 0xC0 );
    62c8:	62 e3       	ldi	r22, 0x32	; 50
    62ca:	70 e0       	ldi	r23, 0x00	; 0
    62cc:	80 e0       	ldi	r24, 0x00	; 0
    62ce:	90 e0       	ldi	r25, 0x00	; 0
    62d0:	8e d8       	rcall	.-3812   	; 0x53ee <delayms>

  lcd.xpos = 0;
    62d2:	40 ec       	ldi	r20, 0xC0	; 192
    62d4:	60 ec       	ldi	r22, 0xC0	; 192
    62d6:	80 ec       	ldi	r24, 0xC0	; 192
    62d8:	ba df       	rcall	.-140    	; 0x624e <LCD_setFastBacklightRGB>
  lcd.ypos = 0;
    62da:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <lcd+0x1>
    62de:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <lcd>

  return(1);
    62e2:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <lcd+0x3>
} //init
    62e6:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <lcd+0x2>
    62ea:	81 e0       	ldi	r24, 0x01	; 1
    62ec:	90 e0       	ldi	r25, 0x00	; 0
    62ee:	08 95       	ret

000062f0 <lcd_cleareol>:
	{
		LCD_putb(' ');
		rem--;
	}
	LCD_pos(lcd.xpos = 0,lcd.ypos);
}
    62f0:	cf 93       	push	r28
    62f2:	df 93       	push	r29
    62f4:	c0 91 14 01 	lds	r28, 0x0114	; 0x800114 <lcd+0x4>
    62f8:	d0 91 15 01 	lds	r29, 0x0115	; 0x800115 <lcd+0x5>
    62fc:	21 97       	sbiw	r28, 0x01	; 1
    62fe:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <lcd>
    6302:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <lcd+0x1>
    6306:	c8 1b       	sub	r28, r24
    6308:	d9 0b       	sbc	r29, r25
    630a:	1c 16       	cp	r1, r28
    630c:	1d 06       	cpc	r1, r29
    630e:	24 f4       	brge	.+8      	; 0x6318 <lcd_cleareol+0x28>
    6310:	80 e2       	ldi	r24, 0x20	; 32
    6312:	2e df       	rcall	.-420    	; 0x6170 <LCD_putb>
    6314:	21 97       	sbiw	r28, 0x01	; 1
    6316:	f9 cf       	rjmp	.-14     	; 0x630a <lcd_cleareol+0x1a>
    6318:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <lcd+0x4>
    631c:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <lcd+0x5>
    6320:	01 97       	sbiw	r24, 0x01	; 1
    6322:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <lcd+0x1>
    6326:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <lcd>
    632a:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <lcd+0x2>
    632e:	78 df       	rcall	.-272    	; 0x6220 <LCD_pos>
    6330:	df 91       	pop	r29
    6332:	cf 91       	pop	r28
    6334:	08 95       	ret

00006336 <lcd_putch>:

/// @brief  put character 
/// @param[in] c: character
/// return: void
void lcd_putch(int c)
{
    6336:	cf 93       	push	r28
    6338:	df 93       	push	r29
	int rem;

	if(c < 0 || c > 0x7e)
    633a:	8f 37       	cpi	r24, 0x7F	; 127
    633c:	91 05       	cpc	r25, r1
    633e:	08 f0       	brcs	.+2      	; 0x6342 <lcd_putch+0xc>
    6340:	50 c0       	rjmp	.+160    	; 0x63e2 <lcd_putch+0xac>
    6342:	ec 01       	movw	r28, r24
		return;

	// Normal visible characters
	if(c >= ' ')
    6344:	80 32       	cpi	r24, 0x20	; 32
    6346:	91 05       	cpc	r25, r1
    6348:	4c f1       	brlt	.+82     	; 0x639c <lcd_putch+0x66>
	{
		rem = (lcd.w - 1 - lcd.xpos);
		if( rem <= 0 )
    634a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <lcd+0x4>
    634e:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <lcd+0x5>
    6352:	01 97       	sbiw	r24, 0x01	; 1
    6354:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <lcd>
    6358:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <lcd+0x1>
    635c:	82 1b       	sub	r24, r18
    635e:	93 0b       	sbc	r25, r19
    6360:	18 16       	cp	r1, r24
    6362:	19 06       	cpc	r1, r25
    6364:	7c f0       	brlt	.+30     	; 0x6384 <lcd_putch+0x4e>
		{
			LCD_pos(++lcd.ypos,lcd.xpos=0);
    6366:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <lcd+0x2>
    636a:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <lcd+0x3>
    636e:	01 96       	adiw	r24, 0x01	; 1
    6370:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <lcd+0x3>
    6374:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <lcd+0x2>
    6378:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <lcd+0x1>
    637c:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <lcd>
    6380:	60 e0       	ldi	r22, 0x00	; 0
		}
		(void) LCD_putb(c);
    6382:	4e df       	rcall	.-356    	; 0x6220 <LCD_pos>
    6384:	8c 2f       	mov	r24, r28
		// uart_putchar(c,0);
		lcd.xpos++;
    6386:	f4 de       	rcall	.-536    	; 0x6170 <LCD_putb>
    6388:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <lcd>
    638c:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <lcd+0x1>
    6390:	01 96       	adiw	r24, 0x01	; 1
    6392:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <lcd+0x1>
    6396:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <lcd>
		return;
	}

	// Control characters
	if(c == '\n')
    639a:	23 c0       	rjmp	.+70     	; 0x63e2 <lcd_putch+0xac>
    639c:	8a 30       	cpi	r24, 0x0A	; 10
	{
		// uart_putchar(c,0);
		lcd_cleareol();
    639e:	91 05       	cpc	r25, r1
    63a0:	91 f4       	brne	.+36     	; 0x63c6 <lcd_putch+0x90>
		++lcd.ypos;
		lcd.ypos &= 3;
    63a2:	a6 df       	rcall	.-180    	; 0x62f0 <lcd_cleareol>
    63a4:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <lcd+0x2>
    63a8:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <lcd+0x3>
    63ac:	6f 5f       	subi	r22, 0xFF	; 255
    63ae:	7f 4f       	sbci	r23, 0xFF	; 255
    63b0:	63 70       	andi	r22, 0x03	; 3
    63b2:	77 27       	eor	r23, r23
    63b4:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <lcd+0x3>
    63b8:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <lcd+0x2>
		LCD_pos(lcd.xpos=0,lcd.ypos);
    63bc:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <lcd+0x1>
    63c0:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <lcd>
	}

	if(c == '\f')
    63c4:	0c c0       	rjmp	.+24     	; 0x63de <lcd_putch+0xa8>
	{
		LCD_clear();
    63c6:	0c 97       	sbiw	r24, 0x0c	; 12
    63c8:	61 f4       	brne	.+24     	; 0x63e2 <lcd_putch+0xac>
		LCD_pos(lcd.xpos=0,lcd.ypos=0);
    63ca:	36 df       	rcall	.-404    	; 0x6238 <LCD_clear>
    63cc:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <lcd+0x1>
    63d0:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <lcd>
    63d4:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <lcd+0x3>
    63d8:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <lcd+0x2>
    63dc:	60 e0       	ldi	r22, 0x00	; 0
    63de:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    63e0:	1f df       	rcall	.-450    	; 0x6220 <LCD_pos>
    63e2:	df 91       	pop	r29
    63e4:	cf 91       	pop	r28
    63e6:	08 95       	ret

000063e8 <_putc_win>:


// We do not use the printf structure
static void _putc_win(struct _printf_t *p, char ch)
{
    63e8:	fc 01       	movw	r30, r24
	p->sent++;
    63ea:	26 81       	ldd	r18, Z+6	; 0x06
    63ec:	37 81       	ldd	r19, Z+7	; 0x07
    63ee:	2f 5f       	subi	r18, 0xFF	; 255
    63f0:	3f 4f       	sbci	r19, 0xFF	; 255
    63f2:	37 83       	std	Z+7, r19	; 0x07
    63f4:	26 83       	std	Z+6, r18	; 0x06
	lcd_putch(ch);
    63f6:	86 2f       	mov	r24, r22
    63f8:	90 e0       	ldi	r25, 0x00	; 0
    63fa:	9d cf       	rjmp	.-198    	; 0x6336 <lcd_putch>
    63fc:	08 95       	ret

000063fe <lcd_printf>:
/// @param[in] fmt: printf forat string
/// @param[in] ...: vararg list or arguments
/// @return size of string
MEMSPACE
int lcd_printf(const char *fmt, ... )
{
    63fe:	a8 e0       	ldi	r26, 0x08	; 8
    6400:	b0 e0       	ldi	r27, 0x00	; 0
    6402:	e5 e0       	ldi	r30, 0x05	; 5
    6404:	f2 e3       	ldi	r31, 0x32	; 50
    6406:	0c 94 d8 e3 	jmp	0x1c7b0	; 0x1c7b0 <__prologue_saves__+0x20>
    640a:	9e 01       	movw	r18, r28
    640c:	23 5f       	subi	r18, 0xF3	; 243
    640e:	3f 4f       	sbci	r19, 0xFF	; 255
    6410:	f9 01       	movw	r30, r18
    6412:	41 91       	ld	r20, Z+
    6414:	51 91       	ld	r21, Z+
    6416:	9f 01       	movw	r18, r30
    printf_t fn;

    fn.put = _putc_win;
    6418:	84 ef       	ldi	r24, 0xF4	; 244
    641a:	91 e3       	ldi	r25, 0x31	; 49
    641c:	9a 83       	std	Y+2, r25	; 0x02
    641e:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    6420:	18 86       	std	Y+8, r1	; 0x08
    6422:	1f 82       	std	Y+7, r1	; 0x07

    va_list va;
    va_start(va, fmt);

    _printf_fn(&fn, fmt, va);
    6424:	60 e8       	ldi	r22, 0x80	; 128
    6426:	ce 01       	movw	r24, r28
    6428:	01 96       	adiw	r24, 0x01	; 1
    642a:	0e 94 d8 42 	call	0x85b0	; 0x85b0 <_printf_fn>

    va_end(va);

	return(fn.sent);

}
    642e:	8f 81       	ldd	r24, Y+7	; 0x07
    6430:	98 85       	ldd	r25, Y+8	; 0x08
    6432:	28 96       	adiw	r28, 0x08	; 8
    6434:	e2 e0       	ldi	r30, 0x02	; 2
    6436:	0c 94 f4 e3 	jmp	0x1c7e8	; 0x1c7e8 <__epilogue_restores__+0x20>

0000643a <islower>:
    if(!ptr)
        return(ptr);
    strncpy(ptr,str,len);
    return(ptr);

}
    643a:	9c 01       	movw	r18, r24
    643c:	21 56       	subi	r18, 0x61	; 97
    643e:	31 09       	sbc	r19, r1
    6440:	81 e0       	ldi	r24, 0x01	; 1
    6442:	90 e0       	ldi	r25, 0x00	; 0
    6444:	2a 31       	cpi	r18, 0x1A	; 26
    6446:	31 05       	cpc	r19, r1
    6448:	10 f0       	brcs	.+4      	; 0x644e <islower+0x14>
    644a:	80 e0       	ldi	r24, 0x00	; 0
    644c:	90 e0       	ldi	r25, 0x00	; 0
    644e:	08 95       	ret

00006450 <toupper>:
    6450:	cf 93       	push	r28
    6452:	df 93       	push	r29
    6454:	ec 01       	movw	r28, r24
    6456:	f1 df       	rcall	.-30     	; 0x643a <islower>
    6458:	89 2b       	or	r24, r25
    645a:	19 f0       	breq	.+6      	; 0x6462 <toupper+0x12>
    645c:	ce 01       	movw	r24, r28
    645e:	80 97       	sbiw	r24, 0x20	; 32
    6460:	01 c0       	rjmp	.+2      	; 0x6464 <toupper+0x14>
    6462:	ce 01       	movw	r24, r28
    6464:	df 91       	pop	r29
    6466:	cf 91       	pop	r28
    6468:	08 95       	ret

0000646a <strcpy>:
    646a:	fc 01       	movw	r30, r24
    646c:	db 01       	movw	r26, r22
    646e:	2d 91       	ld	r18, X+
    6470:	bd 01       	movw	r22, r26
    6472:	01 96       	adiw	r24, 0x01	; 1
    6474:	22 23       	and	r18, r18
    6476:	11 f0       	breq	.+4      	; 0x647c <strcpy+0x12>
    6478:	20 83       	st	Z, r18
    647a:	f7 cf       	rjmp	.-18     	; 0x646a <strcpy>
    647c:	10 82       	st	Z, r1
    647e:	08 95       	ret

00006480 <strncpy>:
    6480:	db 01       	movw	r26, r22
    6482:	fc 01       	movw	r30, r24
    6484:	2d 91       	ld	r18, X+
    6486:	21 11       	cpse	r18, r1
    6488:	03 c0       	rjmp	.+6      	; 0x6490 <strncpy+0x10>
    648a:	4e 0f       	add	r20, r30
    648c:	5f 1f       	adc	r21, r31
    648e:	08 c0       	rjmp	.+16     	; 0x64a0 <strncpy+0x20>
    6490:	41 15       	cp	r20, r1
    6492:	51 05       	cpc	r21, r1
    6494:	21 f0       	breq	.+8      	; 0x649e <strncpy+0x1e>
    6496:	21 93       	st	Z+, r18
    6498:	41 50       	subi	r20, 0x01	; 1
    649a:	51 09       	sbc	r21, r1
    649c:	f3 cf       	rjmp	.-26     	; 0x6484 <strncpy+0x4>
    649e:	08 95       	ret
    64a0:	4e 17       	cp	r20, r30
    64a2:	5f 07       	cpc	r21, r31
    64a4:	11 f0       	breq	.+4      	; 0x64aa <strncpy+0x2a>
    64a6:	11 92       	st	Z+, r1
    64a8:	fb cf       	rjmp	.-10     	; 0x64a0 <strncpy+0x20>
    64aa:	08 95       	ret

000064ac <strcat>:
    64ac:	cf 93       	push	r28
    64ae:	df 93       	push	r29
    64b0:	d8 2f       	mov	r29, r24
    64b2:	c9 2f       	mov	r28, r25
    64b4:	28 2f       	mov	r18, r24
    64b6:	39 2f       	mov	r19, r25
    64b8:	c9 01       	movw	r24, r18
    64ba:	2f 5f       	subi	r18, 0xFF	; 255
    64bc:	3f 4f       	sbci	r19, 0xFF	; 255
    64be:	fc 01       	movw	r30, r24
    64c0:	40 81       	ld	r20, Z
    64c2:	41 11       	cpse	r20, r1
    64c4:	f9 cf       	rjmp	.-14     	; 0x64b8 <strcat+0xc>
    64c6:	d1 df       	rcall	.-94     	; 0x646a <strcpy>
    64c8:	8d 2f       	mov	r24, r29
    64ca:	9c 2f       	mov	r25, r28
    64cc:	df 91       	pop	r29
    64ce:	cf 91       	pop	r28
    64d0:	08 95       	ret

000064d2 <reverse>:
    64d2:	fc 01       	movw	r30, r24
    64d4:	01 90       	ld	r0, Z+
    64d6:	00 20       	and	r0, r0
    64d8:	e9 f7       	brne	.-6      	; 0x64d4 <reverse+0x2>
    64da:	31 97       	sbiw	r30, 0x01	; 1
    64dc:	e8 1b       	sub	r30, r24
    64de:	f9 0b       	sbc	r31, r25
    64e0:	af 01       	movw	r20, r30
    64e2:	55 95       	asr	r21
    64e4:	47 95       	ror	r20
    64e6:	e8 0f       	add	r30, r24
    64e8:	f9 1f       	adc	r31, r25
    64ea:	dc 01       	movw	r26, r24
    64ec:	9d 01       	movw	r18, r26
    64ee:	28 1b       	sub	r18, r24
    64f0:	39 0b       	sbc	r19, r25
    64f2:	24 17       	cp	r18, r20
    64f4:	35 07       	cpc	r19, r21
    64f6:	2c f4       	brge	.+10     	; 0x6502 <reverse+0x30>
    64f8:	22 91       	ld	r18, -Z
    64fa:	3c 91       	ld	r19, X
    64fc:	30 83       	st	Z, r19
    64fe:	2d 93       	st	X+, r18
    6500:	f5 cf       	rjmp	.-22     	; 0x64ec <reverse+0x1a>
    6502:	08 95       	ret

00006504 <strupper>:
    6504:	cf 93       	push	r28
    6506:	df 93       	push	r29
    6508:	ec 01       	movw	r28, r24
    650a:	88 81       	ld	r24, Y
    650c:	88 23       	and	r24, r24
    650e:	21 f0       	breq	.+8      	; 0x6518 <strupper+0x14>
    6510:	90 e0       	ldi	r25, 0x00	; 0
    6512:	9e df       	rcall	.-196    	; 0x6450 <toupper>
    6514:	89 93       	st	Y+, r24
    6516:	f9 cf       	rjmp	.-14     	; 0x650a <strupper+0x6>
    6518:	df 91       	pop	r29
    651a:	cf 91       	pop	r28
    651c:	08 95       	ret

0000651e <strcmp>:
    651e:	dc 01       	movw	r26, r24
    6520:	fb 01       	movw	r30, r22
    6522:	2d 91       	ld	r18, X+
    6524:	41 91       	ld	r20, Z+
    6526:	50 e0       	ldi	r21, 0x00	; 0
    6528:	30 e0       	ldi	r19, 0x00	; 0
    652a:	c9 01       	movw	r24, r18
    652c:	84 1b       	sub	r24, r20
    652e:	95 0b       	sbc	r25, r21
    6530:	11 f4       	brne	.+4      	; 0x6536 <strcmp+0x18>
    6532:	45 2b       	or	r20, r21
    6534:	b1 f7       	brne	.-20     	; 0x6522 <strcmp+0x4>
    6536:	08 95       	ret

00006538 <strcasecmp>:
    6538:	ef 92       	push	r14
    653a:	ff 92       	push	r15
    653c:	0f 93       	push	r16
    653e:	1f 93       	push	r17
    6540:	cf 93       	push	r28
    6542:	df 93       	push	r29
    6544:	7c 01       	movw	r14, r24
    6546:	8b 01       	movw	r16, r22
    6548:	f7 01       	movw	r30, r14
    654a:	81 91       	ld	r24, Z+
    654c:	7f 01       	movw	r14, r30
    654e:	90 e0       	ldi	r25, 0x00	; 0
    6550:	7f df       	rcall	.-258    	; 0x6450 <toupper>
    6552:	ec 01       	movw	r28, r24
    6554:	f8 01       	movw	r30, r16
    6556:	81 91       	ld	r24, Z+
    6558:	8f 01       	movw	r16, r30
    655a:	90 e0       	ldi	r25, 0x00	; 0
    655c:	79 df       	rcall	.-270    	; 0x6450 <toupper>
    655e:	9c 01       	movw	r18, r24
    6560:	ce 01       	movw	r24, r28
    6562:	82 1b       	sub	r24, r18
    6564:	93 0b       	sbc	r25, r19
    6566:	11 f4       	brne	.+4      	; 0x656c <strcasecmp+0x34>
    6568:	23 2b       	or	r18, r19
    656a:	71 f7       	brne	.-36     	; 0x6548 <strcasecmp+0x10>
    656c:	cd b7       	in	r28, 0x3d	; 61
    656e:	de b7       	in	r29, 0x3e	; 62
    6570:	e6 e0       	ldi	r30, 0x06	; 6
    6572:	0c 94 f0 e3 	jmp	0x1c7e0	; 0x1c7e0 <__epilogue_restores__+0x18>

00006576 <strncasecmp>:
    6576:	a0 e0       	ldi	r26, 0x00	; 0
    6578:	b0 e0       	ldi	r27, 0x00	; 0
    657a:	e1 ec       	ldi	r30, 0xC1	; 193
    657c:	f2 e3       	ldi	r31, 0x32	; 50
    657e:	0c 94 d2 e3 	jmp	0x1c7a4	; 0x1c7a4 <__prologue_saves__+0x14>
    6582:	8c 01       	movw	r16, r24
    6584:	7b 01       	movw	r14, r22
    6586:	6c 01       	movw	r12, r24
    6588:	c4 0e       	add	r12, r20
    658a:	d5 1e       	adc	r13, r21
    658c:	0c 15       	cp	r16, r12
    658e:	1d 05       	cpc	r17, r13
    6590:	99 f0       	breq	.+38     	; 0x65b8 <strncasecmp+0x42>
    6592:	f8 01       	movw	r30, r16
    6594:	81 91       	ld	r24, Z+
    6596:	8f 01       	movw	r16, r30
    6598:	90 e0       	ldi	r25, 0x00	; 0
    659a:	5a df       	rcall	.-332    	; 0x6450 <toupper>
    659c:	ec 01       	movw	r28, r24
    659e:	f7 01       	movw	r30, r14
    65a0:	81 91       	ld	r24, Z+
    65a2:	7f 01       	movw	r14, r30
    65a4:	90 e0       	ldi	r25, 0x00	; 0
    65a6:	54 df       	rcall	.-344    	; 0x6450 <toupper>
    65a8:	9c 01       	movw	r18, r24
    65aa:	ce 01       	movw	r24, r28
    65ac:	82 1b       	sub	r24, r18
    65ae:	93 0b       	sbc	r25, r19
    65b0:	29 f4       	brne	.+10     	; 0x65bc <strncasecmp+0x46>
    65b2:	23 2b       	or	r18, r19
    65b4:	59 f7       	brne	.-42     	; 0x658c <strncasecmp+0x16>
    65b6:	02 c0       	rjmp	.+4      	; 0x65bc <strncasecmp+0x46>
    65b8:	80 e0       	ldi	r24, 0x00	; 0
    65ba:	90 e0       	ldi	r25, 0x00	; 0
    65bc:	cd b7       	in	r28, 0x3d	; 61
    65be:	de b7       	in	r29, 0x3e	; 62
    65c0:	e8 e0       	ldi	r30, 0x08	; 8
    65c2:	0c 94 ee e3 	jmp	0x1c7dc	; 0x1c7dc <__epilogue_restores__+0x14>

000065c6 <stralloc>:
///
///@return pointer to alocated string.
///@return NULL on out of memory.
MEMSPACE
char *stralloc(char *str)
{
    65c6:	0f 93       	push	r16
    65c8:	1f 93       	push	r17
    65ca:	cf 93       	push	r28
    65cc:	df 93       	push	r29
    char *ptr;
    int len;

    if(!str)
    65ce:	00 97       	sbiw	r24, 0x00	; 0
    65d0:	99 f0       	breq	.+38     	; 0x65f8 <stralloc+0x32>
    65d2:	ec 01       	movw	r28, r24
        return(str);;
    len  = strlen(str);
    65d4:	fc 01       	movw	r30, r24
    65d6:	01 90       	ld	r0, Z+
    65d8:	00 20       	and	r0, r0
    65da:	e9 f7       	brne	.-6      	; 0x65d6 <stralloc+0x10>
    65dc:	cf 01       	movw	r24, r30
    ptr = safecalloc(len+1,1);
    65de:	61 e0       	ldi	r22, 0x01	; 1
    65e0:	70 e0       	ldi	r23, 0x00	; 0
    65e2:	8c 1b       	sub	r24, r28
    65e4:	9d 0b       	sbc	r25, r29
    65e6:	0e 94 49 29 	call	0x5292	; 0x5292 <safecalloc>
    65ea:	8c 01       	movw	r16, r24
    if(!ptr)
    65ec:	00 97       	sbiw	r24, 0x00	; 0
    65ee:	21 f0       	breq	.+8      	; 0x65f8 <stralloc+0x32>
        return(ptr);
    strcpy(ptr,str);
    65f0:	be 01       	movw	r22, r28
    65f2:	3b df       	rcall	.-394    	; 0x646a <strcpy>
    return(ptr);
    65f4:	c8 01       	movw	r24, r16
    65f6:	02 c0       	rjmp	.+4      	; 0x65fc <stralloc+0x36>
    65f8:	80 e0       	ldi	r24, 0x00	; 0
    65fa:	90 e0       	ldi	r25, 0x00	; 0
}
    65fc:	df 91       	pop	r29
    65fe:	cf 91       	pop	r28
    6600:	1f 91       	pop	r17
    6602:	0f 91       	pop	r16
    6604:	08 95       	ret

00006606 <sep>:
        return(0);

    if(strncmp(str,pat,patlen) == 0)
        return(len);
    return(0);
}
    6606:	00 d0       	rcall	.+0      	; 0x6608 <sep+0x2>
    6608:	1f 92       	push	r1
    660a:	85 ee       	ldi	r24, 0xE5	; 229
    660c:	94 e0       	ldi	r25, 0x04	; 4
    660e:	a0 e0       	ldi	r26, 0x00	; 0
    6610:	ed b7       	in	r30, 0x3d	; 61
    6612:	fe b7       	in	r31, 0x3e	; 62
    6614:	81 83       	std	Z+1, r24	; 0x01
    6616:	92 83       	std	Z+2, r25	; 0x02
    6618:	a3 83       	std	Z+3, r26	; 0x03
    661a:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    661e:	0f 90       	pop	r0
    6620:	0f 90       	pop	r0
    6622:	0f 90       	pop	r0
    6624:	08 95       	ret

00006626 <trim_tail>:
    6626:	00 97       	sbiw	r24, 0x00	; 0
    6628:	69 f0       	breq	.+26     	; 0x6644 <trim_tail+0x1e>
    662a:	fc 01       	movw	r30, r24
    662c:	01 90       	ld	r0, Z+
    662e:	00 20       	and	r0, r0
    6630:	e9 f7       	brne	.-6      	; 0x662c <trim_tail+0x6>
    6632:	31 97       	sbiw	r30, 0x01	; 1
    6634:	e8 17       	cp	r30, r24
    6636:	f9 07       	cpc	r31, r25
    6638:	29 f0       	breq	.+10     	; 0x6644 <trim_tail+0x1e>
    663a:	22 91       	ld	r18, -Z
    663c:	21 32       	cpi	r18, 0x21	; 33
    663e:	10 f4       	brcc	.+4      	; 0x6644 <trim_tail+0x1e>
    6640:	10 82       	st	Z, r1
    6642:	f8 cf       	rjmp	.-16     	; 0x6634 <trim_tail+0xe>
    6644:	08 95       	ret

00006646 <skipspaces>:
    6646:	00 97       	sbiw	r24, 0x00	; 0
    6648:	39 f0       	breq	.+14     	; 0x6658 <skipspaces+0x12>
    664a:	fc 01       	movw	r30, r24
    664c:	cf 01       	movw	r24, r30
    664e:	21 91       	ld	r18, Z+
    6650:	20 32       	cpi	r18, 0x20	; 32
    6652:	e1 f3       	breq	.-8      	; 0x664c <skipspaces+0x6>
    6654:	29 30       	cpi	r18, 0x09	; 9
    6656:	d1 f3       	breq	.-12     	; 0x664c <skipspaces+0x6>
    6658:	08 95       	ret

0000665a <MATCH>:
    665a:	cf 93       	push	r28
    665c:	df 93       	push	r29
    665e:	fb 01       	movw	r30, r22
    6660:	01 90       	ld	r0, Z+
    6662:	00 20       	and	r0, r0
    6664:	e9 f7       	brne	.-6      	; 0x6660 <MATCH+0x6>
    6666:	31 97       	sbiw	r30, 0x01	; 1
    6668:	ef 01       	movw	r28, r30
    666a:	c6 1b       	sub	r28, r22
    666c:	d7 0b       	sbc	r29, r23
    666e:	57 df       	rcall	.-338    	; 0x651e <strcmp>
    6670:	89 2b       	or	r24, r25
    6672:	11 f4       	brne	.+4      	; 0x6678 <MATCH+0x1e>
    6674:	ce 01       	movw	r24, r28
    6676:	02 c0       	rjmp	.+4      	; 0x667c <MATCH+0x22>
    6678:	80 e0       	ldi	r24, 0x00	; 0
    667a:	90 e0       	ldi	r25, 0x00	; 0
    667c:	df 91       	pop	r29
    667e:	cf 91       	pop	r28
    6680:	08 95       	ret

00006682 <MATCHARGS>:
    6682:	a9 e0       	ldi	r26, 0x09	; 9
    6684:	b0 e0       	ldi	r27, 0x00	; 0
    6686:	e7 e4       	ldi	r30, 0x47	; 71
    6688:	f3 e3       	ldi	r31, 0x33	; 51
    668a:	0c 94 d4 e3 	jmp	0x1c7a8	; 0x1c7a8 <__prologue_saves__+0x18>
    668e:	eb 01       	movw	r28, r22
    6690:	8a 01       	movw	r16, r20
    6692:	79 01       	movw	r14, r18
    6694:	e2 df       	rcall	.-60     	; 0x665a <MATCH>
    6696:	00 97       	sbiw	r24, 0x00	; 0
    6698:	c1 f0       	breq	.+48     	; 0x66ca <MATCHARGS+0x48>
    669a:	e0 16       	cp	r14, r16
    669c:	f1 06       	cpc	r15, r17
    669e:	9c f4       	brge	.+38     	; 0x66c6 <MATCHARGS+0x44>
    66a0:	ed b7       	in	r30, 0x3d	; 61
    66a2:	fe b7       	in	r31, 0x3e	; 62
    66a4:	f1 86       	std	Z+9, r15	; 0x09
    66a6:	e0 86       	std	Z+8, r14	; 0x08
    66a8:	17 83       	std	Z+7, r17	; 0x07
    66aa:	06 83       	std	Z+6, r16	; 0x06
    66ac:	d5 83       	std	Z+5, r29	; 0x05
    66ae:	c4 83       	std	Z+4, r28	; 0x04
    66b0:	8f eb       	ldi	r24, 0xBF	; 191
    66b2:	94 e0       	ldi	r25, 0x04	; 4
    66b4:	a0 e0       	ldi	r26, 0x00	; 0
    66b6:	81 83       	std	Z+1, r24	; 0x01
    66b8:	92 83       	std	Z+2, r25	; 0x02
    66ba:	a3 83       	std	Z+3, r26	; 0x03
    66bc:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    66c0:	80 e0       	ldi	r24, 0x00	; 0
    66c2:	90 e0       	ldi	r25, 0x00	; 0
    66c4:	02 c0       	rjmp	.+4      	; 0x66ca <MATCHARGS+0x48>
    66c6:	81 e0       	ldi	r24, 0x01	; 1
    66c8:	90 e0       	ldi	r25, 0x00	; 0
    66ca:	cd b7       	in	r28, 0x3d	; 61
    66cc:	de b7       	in	r29, 0x3e	; 62
    66ce:	29 96       	adiw	r28, 0x09	; 9
    66d0:	e6 e0       	ldi	r30, 0x06	; 6
    66d2:	0c 94 f0 e3 	jmp	0x1c7e0	; 0x1c7e0 <__epilogue_restores__+0x18>

000066d6 <MATCHI>:
    66d6:	cf 93       	push	r28
    66d8:	df 93       	push	r29
    66da:	fb 01       	movw	r30, r22
    66dc:	01 90       	ld	r0, Z+
    66de:	00 20       	and	r0, r0
    66e0:	e9 f7       	brne	.-6      	; 0x66dc <MATCHI+0x6>
    66e2:	31 97       	sbiw	r30, 0x01	; 1
    66e4:	ef 01       	movw	r28, r30
    66e6:	c6 1b       	sub	r28, r22
    66e8:	d7 0b       	sbc	r29, r23
    66ea:	26 df       	rcall	.-436    	; 0x6538 <strcasecmp>
    66ec:	89 2b       	or	r24, r25
    66ee:	11 f4       	brne	.+4      	; 0x66f4 <MATCHI+0x1e>
    66f0:	ce 01       	movw	r24, r28
    66f2:	02 c0       	rjmp	.+4      	; 0x66f8 <MATCHI+0x22>
    66f4:	80 e0       	ldi	r24, 0x00	; 0
    66f6:	90 e0       	ldi	r25, 0x00	; 0
    66f8:	df 91       	pop	r29
    66fa:	cf 91       	pop	r28
    66fc:	08 95       	ret

000066fe <MATCHI_LEN>:
    66fe:	cf 93       	push	r28
    6700:	df 93       	push	r29
    6702:	00 97       	sbiw	r24, 0x00	; 0
    6704:	89 f0       	breq	.+34     	; 0x6728 <MATCHI_LEN+0x2a>
    6706:	61 15       	cp	r22, r1
    6708:	71 05       	cpc	r23, r1
    670a:	71 f0       	breq	.+28     	; 0x6728 <MATCHI_LEN+0x2a>
    670c:	eb 01       	movw	r28, r22
    670e:	09 90       	ld	r0, Y+
    6710:	00 20       	and	r0, r0
    6712:	e9 f7       	brne	.-6      	; 0x670e <MATCHI_LEN+0x10>
    6714:	21 97       	sbiw	r28, 0x01	; 1
    6716:	c6 1b       	sub	r28, r22
    6718:	d7 0b       	sbc	r29, r23
    671a:	31 f0       	breq	.+12     	; 0x6728 <MATCHI_LEN+0x2a>
    671c:	ae 01       	movw	r20, r28
    671e:	2b df       	rcall	.-426    	; 0x6576 <strncasecmp>
    6720:	89 2b       	or	r24, r25
    6722:	11 f4       	brne	.+4      	; 0x6728 <MATCHI_LEN+0x2a>
    6724:	ce 01       	movw	r24, r28
    6726:	02 c0       	rjmp	.+4      	; 0x672c <MATCHI_LEN+0x2e>
    6728:	80 e0       	ldi	r24, 0x00	; 0
    672a:	90 e0       	ldi	r25, 0x00	; 0
    672c:	df 91       	pop	r29
    672e:	cf 91       	pop	r28
    6730:	08 95       	ret

00006732 <split_args>:
    6732:	a0 e0       	ldi	r26, 0x00	; 0
    6734:	b0 e0       	ldi	r27, 0x00	; 0
    6736:	ef e9       	ldi	r30, 0x9F	; 159
    6738:	f3 e3       	ldi	r31, 0x33	; 51
    673a:	0c 94 d2 e3 	jmp	0x1c7a4	; 0x1c7a4 <__prologue_saves__+0x14>
    673e:	dc 01       	movw	r26, r24
    6740:	6a 01       	movw	r12, r20
    6742:	8b 01       	movw	r16, r22
    6744:	fb 01       	movw	r30, r22
    6746:	80 e0       	ldi	r24, 0x00	; 0
    6748:	90 e0       	ldi	r25, 0x00	; 0
    674a:	8c 15       	cp	r24, r12
    674c:	9d 05       	cpc	r25, r13
    674e:	24 f4       	brge	.+8      	; 0x6758 <split_args+0x26>
    6750:	11 92       	st	Z+, r1
    6752:	11 92       	st	Z+, r1
    6754:	01 96       	adiw	r24, 0x01	; 1
    6756:	f9 cf       	rjmp	.-14     	; 0x674a <split_args+0x18>
    6758:	c1 14       	cp	r12, r1
    675a:	d1 04       	cpc	r13, r1
    675c:	d9 f1       	breq	.+118    	; 0x67d4 <split_args+0xa2>
    675e:	10 97       	sbiw	r26, 0x00	; 0
    6760:	c9 f1       	breq	.+114    	; 0x67d4 <split_args+0xa2>
    6762:	ee 24       	eor	r14, r14
    6764:	e3 94       	inc	r14
    6766:	f1 2c       	mov	r15, r1
    6768:	c0 e0       	ldi	r28, 0x00	; 0
    676a:	d0 e0       	ldi	r29, 0x00	; 0
    676c:	8c 91       	ld	r24, X
    676e:	88 23       	and	r24, r24
    6770:	b1 f1       	breq	.+108    	; 0x67de <split_args+0xac>
    6772:	cc 15       	cp	r28, r12
    6774:	dd 05       	cpc	r29, r13
    6776:	9c f5       	brge	.+102    	; 0x67de <split_args+0xac>
    6778:	cd 01       	movw	r24, r26
    677a:	65 df       	rcall	.-310    	; 0x6646 <skipspaces>
    677c:	dc 01       	movw	r26, r24
    677e:	2c 91       	ld	r18, X
    6780:	22 23       	and	r18, r18
    6782:	69 f1       	breq	.+90     	; 0x67de <split_args+0xac>
    6784:	22 32       	cpi	r18, 0x22	; 34
    6786:	79 f4       	brne	.+30     	; 0x67a6 <split_args+0x74>
    6788:	fc 01       	movw	r30, r24
    678a:	31 96       	adiw	r30, 0x01	; 1
    678c:	d8 01       	movw	r26, r16
    678e:	ed 93       	st	X+, r30
    6790:	fc 93       	st	X, r31
    6792:	df 01       	movw	r26, r30
    6794:	80 81       	ld	r24, Z
    6796:	31 96       	adiw	r30, 0x01	; 1
    6798:	88 23       	and	r24, r24
    679a:	a9 f0       	breq	.+42     	; 0x67c6 <split_args+0x94>
    679c:	82 32       	cpi	r24, 0x22	; 34
    679e:	c9 f7       	brne	.-14     	; 0x6792 <split_args+0x60>
    67a0:	1c 92       	st	X, r1
    67a2:	df 01       	movw	r26, r30
    67a4:	10 c0       	rjmp	.+32     	; 0x67c6 <split_args+0x94>
    67a6:	f8 01       	movw	r30, r16
    67a8:	91 83       	std	Z+1, r25	; 0x01
    67aa:	80 83       	st	Z, r24
    67ac:	fc 01       	movw	r30, r24
    67ae:	2e 2f       	mov	r18, r30
    67b0:	9f 2f       	mov	r25, r31
    67b2:	81 91       	ld	r24, Z+
    67b4:	3f ed       	ldi	r19, 0xDF	; 223
    67b6:	38 0f       	add	r19, r24
    67b8:	3e 35       	cpi	r19, 0x5E	; 94
    67ba:	c8 f3       	brcs	.-14     	; 0x67ae <split_args+0x7c>
    67bc:	88 23       	and	r24, r24
    67be:	69 f0       	breq	.+26     	; 0x67da <split_args+0xa8>
    67c0:	a2 2f       	mov	r26, r18
    67c2:	b9 2f       	mov	r27, r25
    67c4:	1d 92       	st	X+, r1
    67c6:	21 96       	adiw	r28, 0x01	; 1
    67c8:	ff ef       	ldi	r31, 0xFF	; 255
    67ca:	ef 1a       	sub	r14, r31
    67cc:	ff 0a       	sbc	r15, r31
    67ce:	0e 5f       	subi	r16, 0xFE	; 254
    67d0:	1f 4f       	sbci	r17, 0xFF	; 255
    67d2:	cc cf       	rjmp	.-104    	; 0x676c <split_args+0x3a>
    67d4:	80 e0       	ldi	r24, 0x00	; 0
    67d6:	90 e0       	ldi	r25, 0x00	; 0
    67d8:	03 c0       	rjmp	.+6      	; 0x67e0 <split_args+0xae>
    67da:	c7 01       	movw	r24, r14
    67dc:	01 c0       	rjmp	.+2      	; 0x67e0 <split_args+0xae>
    67de:	ce 01       	movw	r24, r28
    67e0:	cd b7       	in	r28, 0x3d	; 61
    67e2:	de b7       	in	r29, 0x3e	; 62
    67e4:	e8 e0       	ldi	r30, 0x08	; 8
    67e6:	0c 94 ee e3 	jmp	0x1c7dc	; 0x1c7dc <__epilogue_restores__+0x14>

000067ea <get_token>:
    67ea:	ef 92       	push	r14
    67ec:	ff 92       	push	r15
    67ee:	0f 93       	push	r16
    67f0:	1f 93       	push	r17
    67f2:	cf 93       	push	r28
    67f4:	df 93       	push	r29
    67f6:	eb 01       	movw	r28, r22
    67f8:	8a 01       	movw	r16, r20
    67fa:	18 82       	st	Y, r1
    67fc:	00 97       	sbiw	r24, 0x00	; 0
    67fe:	89 f1       	breq	.+98     	; 0x6862 <get_token+0x78>
    6800:	fc 01       	movw	r30, r24
    6802:	20 81       	ld	r18, Z
    6804:	22 23       	and	r18, r18
    6806:	79 f1       	breq	.+94     	; 0x6866 <get_token+0x7c>
    6808:	1e df       	rcall	.-452    	; 0x6646 <skipspaces>
    680a:	7c 01       	movw	r14, r24
    680c:	0c df       	rcall	.-488    	; 0x6626 <trim_tail>
    680e:	f7 01       	movw	r30, r14
    6810:	cf 01       	movw	r24, r30
    6812:	21 91       	ld	r18, Z+
    6814:	21 32       	cpi	r18, 0x21	; 33
    6816:	e0 f0       	brcs	.+56     	; 0x6850 <get_token+0x66>
    6818:	10 16       	cp	r1, r16
    681a:	11 06       	cpc	r1, r17
    681c:	cc f4       	brge	.+50     	; 0x6850 <get_token+0x66>
    681e:	22 32       	cpi	r18, 0x22	; 34
    6820:	79 f4       	brne	.+30     	; 0x6840 <get_token+0x56>
    6822:	fc 01       	movw	r30, r24
    6824:	31 96       	adiw	r30, 0x01	; 1
    6826:	0c 0f       	add	r16, r28
    6828:	1d 1f       	adc	r17, r29
    682a:	cf 01       	movw	r24, r30
    682c:	21 91       	ld	r18, Z+
    682e:	22 23       	and	r18, r18
    6830:	79 f0       	breq	.+30     	; 0x6850 <get_token+0x66>
    6832:	22 32       	cpi	r18, 0x22	; 34
    6834:	59 f0       	breq	.+22     	; 0x684c <get_token+0x62>
    6836:	c0 17       	cp	r28, r16
    6838:	d1 07       	cpc	r29, r17
    683a:	51 f0       	breq	.+20     	; 0x6850 <get_token+0x66>
    683c:	29 93       	st	Y+, r18
    683e:	f5 cf       	rjmp	.-22     	; 0x682a <get_token+0x40>
    6840:	2c 32       	cpi	r18, 0x2C	; 44
    6842:	31 f0       	breq	.+12     	; 0x6850 <get_token+0x66>
    6844:	29 93       	st	Y+, r18
    6846:	01 50       	subi	r16, 0x01	; 1
    6848:	11 09       	sbc	r17, r1
    684a:	e2 cf       	rjmp	.-60     	; 0x6810 <get_token+0x26>
    684c:	cf 01       	movw	r24, r30
    684e:	18 82       	st	Y, r1
    6850:	fa de       	rcall	.-524    	; 0x6646 <skipspaces>
    6852:	fc 01       	movw	r30, r24
    6854:	80 81       	ld	r24, Z
    6856:	8c 32       	cpi	r24, 0x2C	; 44
    6858:	09 f4       	brne	.+2      	; 0x685c <get_token+0x72>
    685a:	31 96       	adiw	r30, 0x01	; 1
    685c:	18 82       	st	Y, r1
    685e:	cf 01       	movw	r24, r30
    6860:	02 c0       	rjmp	.+4      	; 0x6866 <get_token+0x7c>
    6862:	80 e0       	ldi	r24, 0x00	; 0
    6864:	90 e0       	ldi	r25, 0x00	; 0
    6866:	cd b7       	in	r28, 0x3d	; 61
    6868:	de b7       	in	r29, 0x3e	; 62
    686a:	e6 e0       	ldi	r30, 0x06	; 6
    686c:	0c 94 f0 e3 	jmp	0x1c7e0	; 0x1c7e0 <__epilogue_restores__+0x18>

00006870 <get_value>:
/// @param[in] str: string to examine
///
/// @return  value
MEMSPACE
int32_t get_value(char *str)
{ 
    6870:	a2 e0       	ldi	r26, 0x02	; 2
    6872:	b0 e0       	ldi	r27, 0x00	; 0
    6874:	ee e3       	ldi	r30, 0x3E	; 62
    6876:	f4 e3       	ldi	r31, 0x34	; 52
    6878:	0c 94 d6 e3 	jmp	0x1c7ac	; 0x1c7ac <__prologue_saves__+0x1c>
    int base;
    int ret;
    char *ptr;
    char *endptr;

    if(!str || *str == 0)
    687c:	00 97       	sbiw	r24, 0x00	; 0
    687e:	79 f1       	breq	.+94     	; 0x68de <get_value+0x6e>
    6880:	fc 01       	movw	r30, r24
    6882:	20 81       	ld	r18, Z
    6884:	22 23       	and	r18, r18
        return(0);

    ptr = skipspaces(str);
    6886:	59 f1       	breq	.+86     	; 0x68de <get_value+0x6e>
    6888:	de de       	rcall	.-580    	; 0x6646 <skipspaces>
    base = 10;

    // convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    688a:	8c 01       	movw	r16, r24
    688c:	6f e4       	ldi	r22, 0x4F	; 79
    688e:	72 e0       	ldi	r23, 0x02	; 2
    6890:	36 df       	rcall	.-404    	; 0x66fe <MATCHI_LEN>
    6892:	00 97       	sbiw	r24, 0x00	; 0
    {
        base = 16;
        ptr += ret;
    6894:	29 f0       	breq	.+10     	; 0x68a0 <get_value+0x30>
    6896:	08 0f       	add	r16, r24
    base = 10;

    // convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    {
        base = 16;
    6898:	19 1f       	adc	r17, r25
    689a:	40 e1       	ldi	r20, 0x10	; 16
    689c:	50 e0       	ldi	r21, 0x00	; 0
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    689e:	18 c0       	rjmp	.+48     	; 0x68d0 <get_value+0x60>
    68a0:	62 e5       	ldi	r22, 0x52	; 82
    68a2:	72 e0       	ldi	r23, 0x02	; 2
    68a4:	c8 01       	movw	r24, r16
    68a6:	2b df       	rcall	.-426    	; 0x66fe <MATCHI_LEN>
    68a8:	00 97       	sbiw	r24, 0x00	; 0
    {
        base = 8;
        ptr += ret;
    68aa:	29 f0       	breq	.+10     	; 0x68b6 <get_value+0x46>
    68ac:	08 0f       	add	r16, r24
        base = 16;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    {
        base = 8;
    68ae:	19 1f       	adc	r17, r25
    68b0:	48 e0       	ldi	r20, 0x08	; 8
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    68b2:	50 e0       	ldi	r21, 0x00	; 0
    68b4:	0d c0       	rjmp	.+26     	; 0x68d0 <get_value+0x60>
    68b6:	65 e5       	ldi	r22, 0x55	; 85
    68b8:	72 e0       	ldi	r23, 0x02	; 2
    68ba:	c8 01       	movw	r24, r16
    68bc:	20 df       	rcall	.-448    	; 0x66fe <MATCHI_LEN>
    {
        base = 2;
        ptr += ret;
    68be:	00 97       	sbiw	r24, 0x00	; 0
    68c0:	29 f0       	breq	.+10     	; 0x68cc <get_value+0x5c>
        base = 8;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
    68c2:	08 0f       	add	r16, r24
    68c4:	19 1f       	adc	r17, r25
    68c6:	42 e0       	ldi	r20, 0x02	; 2

    if(!str || *str == 0)
        return(0);

    ptr = skipspaces(str);
    base = 10;
    68c8:	50 e0       	ldi	r21, 0x00	; 0
    68ca:	02 c0       	rjmp	.+4      	; 0x68d0 <get_value+0x60>
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
    68cc:	4a e0       	ldi	r20, 0x0A	; 10
    68ce:	50 e0       	ldi	r21, 0x00	; 0
    68d0:	be 01       	movw	r22, r28
    68d2:	6f 5f       	subi	r22, 0xFF	; 255
    68d4:	7f 4f       	sbci	r23, 0xFF	; 255
    68d6:	c8 01       	movw	r24, r16
    68d8:	0e 94 73 47 	call	0x8ee6	; 0x8ee6 <strtol>
    int ret;
    char *ptr;
    char *endptr;

    if(!str || *str == 0)
        return(0);
    68dc:	03 c0       	rjmp	.+6      	; 0x68e4 <get_value+0x74>
    68de:	60 e0       	ldi	r22, 0x00	; 0
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
}
    68e0:	70 e0       	ldi	r23, 0x00	; 0
    68e2:	cb 01       	movw	r24, r22
    68e4:	22 96       	adiw	r28, 0x02	; 2
    68e6:	e4 e0       	ldi	r30, 0x04	; 4
    68e8:	0c 94 f2 e3 	jmp	0x1c7e4	; 0x1c7e4 <__epilogue_restores__+0x1c>

000068ec <enable_system_task>:
/// @brief Enable interrupts
/// @return void.
MEMSPACE
void enable_system_task()
{
    sei();
    68ec:	78 94       	sei
    68ee:	08 95       	ret

000068f0 <install_timers_isr>:
///
/// @see ISR().
/// @return void.
MEMSPACE void install_timers_isr()
{
    cli();
    68f0:	f8 94       	cli
    TCCR1B=(1<<WGM12) | TIMER1_PRE_1;   // No Prescale
    68f2:	89 e0       	ldi	r24, 0x09	; 9
    68f4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    TCCR1A=0;
    68f8:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    OCR1A=(TIMER1_COUNTS_PER_TIC-1);    // 0 .. count
    68fc:	8f e1       	ldi	r24, 0x1F	; 31
    68fe:	9e e4       	ldi	r25, 0x4E	; 78
    6900:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    6904:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    TIMSK1 |= (1<<OCIE1A);              //Enable the Output Compare A interrupt
    6908:	ef e6       	ldi	r30, 0x6F	; 111
    690a:	f0 e0       	ldi	r31, 0x00	; 0
    690c:	80 81       	ld	r24, Z
    690e:	82 60       	ori	r24, 0x02	; 2
    6910:	80 83       	st	Z, r24
    sei();
    6912:	78 94       	sei
    6914:	08 95       	ret

00006916 <__vector_13>:
/// @brief AVR Timer Interrupt Vector
///
/// - calls execute_timers() - we call this the System task.
///
ISR(TIMER1_COMPA_vect)
{
    6916:	1f 92       	push	r1
    6918:	0f 92       	push	r0
    691a:	0f b6       	in	r0, 0x3f	; 63
    691c:	0f 92       	push	r0
    691e:	11 24       	eor	r1, r1
    6920:	0b b6       	in	r0, 0x3b	; 59
    6922:	0f 92       	push	r0
    6924:	2f 93       	push	r18
    6926:	3f 93       	push	r19
    6928:	4f 93       	push	r20
    692a:	5f 93       	push	r21
    692c:	6f 93       	push	r22
    692e:	7f 93       	push	r23
    6930:	8f 93       	push	r24
    6932:	9f 93       	push	r25
    6934:	af 93       	push	r26
    6936:	bf 93       	push	r27
    6938:	ef 93       	push	r30
    execute_timers();
    693a:	ff 93       	push	r31
}
    693c:	36 d2       	rcall	.+1132   	; 0x6daa <execute_timers>
    693e:	ff 91       	pop	r31
    6940:	ef 91       	pop	r30
    6942:	bf 91       	pop	r27
    6944:	af 91       	pop	r26
    6946:	9f 91       	pop	r25
    6948:	8f 91       	pop	r24
    694a:	7f 91       	pop	r23
    694c:	6f 91       	pop	r22
    694e:	5f 91       	pop	r21
    6950:	4f 91       	pop	r20
    6952:	3f 91       	pop	r19
    6954:	2f 91       	pop	r18
    6956:	0f 90       	pop	r0
    6958:	0b be       	out	0x3b, r0	; 59
    695a:	0f 90       	pop	r0
    695c:	0f be       	out	0x3f, r0	; 63
    695e:	0f 90       	pop	r0
    6960:	1f 90       	pop	r1
    6962:	18 95       	reti

00006964 <clock_gettime>:
///
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id, struct timespec *ts)
{
    6964:	0f 93       	push	r16
    6966:	1f 93       	push	r17
    6968:	cf 93       	push	r28
    696a:	df 93       	push	r29
    696c:	fb 01       	movw	r30, r22
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;

    // disable interrupts
    cli();
    696e:	f8 94       	cli

    count1 = TCNT1;
    6970:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    6974:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    ts->tv_sec = __clock.tv_sec;
    6978:	80 91 e0 19 	lds	r24, 0x19E0	; 0x8019e0 <__clock>
    697c:	90 91 e1 19 	lds	r25, 0x19E1	; 0x8019e1 <__clock+0x1>
    6980:	a0 91 e2 19 	lds	r26, 0x19E2	; 0x8019e2 <__clock+0x2>
    6984:	b0 91 e3 19 	lds	r27, 0x19E3	; 0x8019e3 <__clock+0x3>
    6988:	80 83       	st	Z, r24
    698a:	91 83       	std	Z+1, r25	; 0x01
    698c:	a2 83       	std	Z+2, r26	; 0x02
    698e:	b3 83       	std	Z+3, r27	; 0x03
    ts->tv_nsec = __clock.tv_nsec;
    6990:	80 91 e4 19 	lds	r24, 0x19E4	; 0x8019e4 <__clock+0x4>
    6994:	90 91 e5 19 	lds	r25, 0x19E5	; 0x8019e5 <__clock+0x5>
    6998:	a0 91 e6 19 	lds	r26, 0x19E6	; 0x8019e6 <__clock+0x6>
    699c:	b0 91 e7 19 	lds	r27, 0x19E7	; 0x8019e7 <__clock+0x7>
    69a0:	84 83       	std	Z+4, r24	; 0x04
    69a2:	95 83       	std	Z+5, r25	; 0x05
    69a4:	a6 83       	std	Z+6, r26	; 0x06
    69a6:	b7 83       	std	Z+7, r27	; 0x07

    count2 = TCNT1;
    69a8:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    69ac:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    if( TIFR1 & (1<<OCF1A) )
    69b0:	b1 9b       	sbis	0x16, 1	; 22
    69b2:	03 c0       	rjmp	.+6      	; 0x69ba <clock_gettime+0x56>
int clock_gettime(clockid_t clk_id, struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    69b4:	c0 e0       	ldi	r28, 0x00	; 0
    69b6:	d0 e0       	ldi	r29, 0x00	; 0
    69b8:	3f c0       	rjmp	.+126    	; 0x6a38 <clock_gettime+0xd4>
    count2 = TCNT1;

    if( TIFR1 & (1<<OCF1A) )
        pendingf = 1;

    if (count2 < count1)
    69ba:	82 17       	cp	r24, r18
    69bc:	93 07       	cpc	r25, r19
    69be:	d0 f1       	brcs	.+116    	; 0x6a34 <clock_gettime+0xd0>
int clock_gettime(clockid_t clk_id, struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    69c0:	c0 e0       	ldi	r28, 0x00	; 0
    69c2:	d0 e0       	ldi	r29, 0x00	; 0
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id, struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    69c4:	40 e0       	ldi	r20, 0x00	; 0
    69c6:	50 e0       	ldi	r21, 0x00	; 0
    69c8:	ba 01       	movw	r22, r20
    else
    {
        if( pendingf )
            offset = TIMER1_COUNTS_PER_TIC;       // overflow
    }
    offset += count2;
    69ca:	9a 01       	movw	r18, r20
    69cc:	ab 01       	movw	r20, r22
    69ce:	28 0f       	add	r18, r24
    69d0:	39 1f       	adc	r19, r25
    69d2:	41 1d       	adc	r20, r1
    69d4:	51 1d       	adc	r21, r1

    // enable interrupts
    sei();
    69d6:	78 94       	sei

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    69d8:	a2 e3       	ldi	r26, 0x32	; 50
    69da:	b0 e0       	ldi	r27, 0x00	; 0
    69dc:	0e 94 a8 e3 	call	0x1c750	; 0x1c750 <__muluhisi3>
    69e0:	04 81       	ldd	r16, Z+4	; 0x04
    69e2:	15 81       	ldd	r17, Z+5	; 0x05
    69e4:	26 81       	ldd	r18, Z+6	; 0x06
    69e6:	37 81       	ldd	r19, Z+7	; 0x07
    69e8:	dc 01       	movw	r26, r24
    69ea:	cb 01       	movw	r24, r22
    69ec:	80 0f       	add	r24, r16
    69ee:	91 1f       	adc	r25, r17
    69f0:	a2 1f       	adc	r26, r18
    69f2:	b3 1f       	adc	r27, r19

    if (ts->tv_nsec >= 1000000000L)
    69f4:	81 15       	cp	r24, r1
    69f6:	2a ec       	ldi	r18, 0xCA	; 202
    69f8:	92 07       	cpc	r25, r18
    69fa:	2a e9       	ldi	r18, 0x9A	; 154
    69fc:	a2 07       	cpc	r26, r18
    69fe:	2b e3       	ldi	r18, 0x3B	; 59
    6a00:	b2 07       	cpc	r27, r18
    6a02:	2c f4       	brge	.+10     	; 0x6a0e <clock_gettime+0xaa>
    // enable interrupts
    sei();

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    6a04:	84 83       	std	Z+4, r24	; 0x04
    6a06:	95 83       	std	Z+5, r25	; 0x05
    6a08:	a6 83       	std	Z+6, r26	; 0x06
    6a0a:	b7 83       	std	Z+7, r27	; 0x07
    6a0c:	1a c0       	rjmp	.+52     	; 0x6a42 <clock_gettime+0xde>

    if (ts->tv_nsec >= 1000000000L)
    {
        ts->tv_nsec -= 1000000000L;
    6a0e:	9a 5c       	subi	r25, 0xCA	; 202
    6a10:	aa 49       	sbci	r26, 0x9A	; 154
    6a12:	bb 43       	sbci	r27, 0x3B	; 59
    6a14:	84 83       	std	Z+4, r24	; 0x04
    6a16:	95 83       	std	Z+5, r25	; 0x05
    6a18:	a6 83       	std	Z+6, r26	; 0x06
    6a1a:	b7 83       	std	Z+7, r27	; 0x07
        ts->tv_sec++;
    6a1c:	80 81       	ld	r24, Z
    6a1e:	91 81       	ldd	r25, Z+1	; 0x01
    6a20:	a2 81       	ldd	r26, Z+2	; 0x02
    6a22:	b3 81       	ldd	r27, Z+3	; 0x03
    6a24:	01 96       	adiw	r24, 0x01	; 1
    6a26:	a1 1d       	adc	r26, r1
    6a28:	b1 1d       	adc	r27, r1
    6a2a:	80 83       	st	Z, r24
    6a2c:	91 83       	std	Z+1, r25	; 0x01
    6a2e:	a2 83       	std	Z+2, r26	; 0x02
    6a30:	b3 83       	std	Z+3, r27	; 0x03
    }
    return(errorf);
    6a32:	07 c0       	rjmp	.+14     	; 0x6a42 <clock_gettime+0xde>

    if (count2 < count1)
    {
///  note: counter2 < count1 implies ISR flag must be set
        if( !pendingf )
            errorf = -1;    // counter overflow and NO pending is an error!
    6a34:	cf ef       	ldi	r28, 0xFF	; 255
    6a36:	df ef       	ldi	r29, 0xFF	; 255
        offset = TIMER1_COUNTS_PER_TIC;           // overflow
    6a38:	40 e2       	ldi	r20, 0x20	; 32
    6a3a:	5e e4       	ldi	r21, 0x4E	; 78
    6a3c:	60 e0       	ldi	r22, 0x00	; 0
    6a3e:	70 e0       	ldi	r23, 0x00	; 0
    6a40:	c4 cf       	rjmp	.-120    	; 0x69ca <clock_gettime+0x66>
    {
        ts->tv_nsec -= 1000000000L;
        ts->tv_sec++;
    }
    return(errorf);
}
    6a42:	ce 01       	movw	r24, r28
    6a44:	df 91       	pop	r29
    6a46:	cf 91       	pop	r28
    6a48:	1f 91       	pop	r17
    6a4a:	0f 91       	pop	r16
    6a4c:	08 95       	ret

00006a4e <clock_task>:
void disable_timers()
{
    if(timers_configured && timers_enabled)
    {
        disable_system_task();
        timers_enabled = 0;
    6a4e:	80 91 e4 19 	lds	r24, 0x19E4	; 0x8019e4 <__clock+0x4>
    6a52:	90 91 e5 19 	lds	r25, 0x19E5	; 0x8019e5 <__clock+0x5>
    6a56:	a0 91 e6 19 	lds	r26, 0x19E6	; 0x8019e6 <__clock+0x6>
    6a5a:	b0 91 e7 19 	lds	r27, 0x19E7	; 0x8019e7 <__clock+0x7>
    6a5e:	80 5c       	subi	r24, 0xC0	; 192
    6a60:	9d 4b       	sbci	r25, 0xBD	; 189
    6a62:	a0 4f       	sbci	r26, 0xF0	; 240
    6a64:	bf 4f       	sbci	r27, 0xFF	; 255
    6a66:	80 93 e4 19 	sts	0x19E4, r24	; 0x8019e4 <__clock+0x4>
    6a6a:	90 93 e5 19 	sts	0x19E5, r25	; 0x8019e5 <__clock+0x5>
    6a6e:	a0 93 e6 19 	sts	0x19E6, r26	; 0x8019e6 <__clock+0x6>
    6a72:	b0 93 e7 19 	sts	0x19E7, r27	; 0x8019e7 <__clock+0x7>
    6a76:	80 91 e4 19 	lds	r24, 0x19E4	; 0x8019e4 <__clock+0x4>
    6a7a:	90 91 e5 19 	lds	r25, 0x19E5	; 0x8019e5 <__clock+0x5>
    6a7e:	a0 91 e6 19 	lds	r26, 0x19E6	; 0x8019e6 <__clock+0x6>
    6a82:	b0 91 e7 19 	lds	r27, 0x19E7	; 0x8019e7 <__clock+0x7>
    6a86:	81 15       	cp	r24, r1
    6a88:	9a 4c       	sbci	r25, 0xCA	; 202
    6a8a:	aa 49       	sbci	r26, 0x9A	; 154
    6a8c:	bb 43       	sbci	r27, 0x3B	; 59
    6a8e:	dc f0       	brlt	.+54     	; 0x6ac6 <clock_task+0x78>
    6a90:	80 91 e0 19 	lds	r24, 0x19E0	; 0x8019e0 <__clock>
    6a94:	90 91 e1 19 	lds	r25, 0x19E1	; 0x8019e1 <__clock+0x1>
    6a98:	a0 91 e2 19 	lds	r26, 0x19E2	; 0x8019e2 <__clock+0x2>
    6a9c:	b0 91 e3 19 	lds	r27, 0x19E3	; 0x8019e3 <__clock+0x3>
    6aa0:	01 96       	adiw	r24, 0x01	; 1
    6aa2:	a1 1d       	adc	r26, r1
    6aa4:	b1 1d       	adc	r27, r1
    6aa6:	80 93 e0 19 	sts	0x19E0, r24	; 0x8019e0 <__clock>
    6aaa:	90 93 e1 19 	sts	0x19E1, r25	; 0x8019e1 <__clock+0x1>
    6aae:	a0 93 e2 19 	sts	0x19E2, r26	; 0x8019e2 <__clock+0x2>
    6ab2:	b0 93 e3 19 	sts	0x19E3, r27	; 0x8019e3 <__clock+0x3>
    6ab6:	10 92 e4 19 	sts	0x19E4, r1	; 0x8019e4 <__clock+0x4>
    6aba:	10 92 e5 19 	sts	0x19E5, r1	; 0x8019e5 <__clock+0x5>
    6abe:	10 92 e6 19 	sts	0x19E6, r1	; 0x8019e6 <__clock+0x6>
    6ac2:	10 92 e7 19 	sts	0x19E7, r1	; 0x8019e7 <__clock+0x7>
    6ac6:	08 95       	ret

00006ac8 <clock_settime.part.2>:
    6ac8:	fc 01       	movw	r30, r24
    6aca:	84 81       	ldd	r24, Z+4	; 0x04
    6acc:	95 81       	ldd	r25, Z+5	; 0x05
    6ace:	a6 81       	ldd	r26, Z+6	; 0x06
    6ad0:	b7 81       	ldd	r27, Z+7	; 0x07
    6ad2:	80 93 e4 19 	sts	0x19E4, r24	; 0x8019e4 <__clock+0x4>
    6ad6:	90 93 e5 19 	sts	0x19E5, r25	; 0x8019e5 <__clock+0x5>
    6ada:	a0 93 e6 19 	sts	0x19E6, r26	; 0x8019e6 <__clock+0x6>
    6ade:	b0 93 e7 19 	sts	0x19E7, r27	; 0x8019e7 <__clock+0x7>
    6ae2:	80 81       	ld	r24, Z
    6ae4:	91 81       	ldd	r25, Z+1	; 0x01
    6ae6:	a2 81       	ldd	r26, Z+2	; 0x02
    6ae8:	b3 81       	ldd	r27, Z+3	; 0x03
    6aea:	80 93 e0 19 	sts	0x19E0, r24	; 0x8019e0 <__clock>
    6aee:	90 93 e1 19 	sts	0x19E1, r25	; 0x8019e1 <__clock+0x1>
    6af2:	a0 93 e2 19 	sts	0x19E2, r26	; 0x8019e2 <__clock+0x2>
    6af6:	b0 93 e3 19 	sts	0x19E3, r27	; 0x8019e3 <__clock+0x3>
    6afa:	80 91 e4 19 	lds	r24, 0x19E4	; 0x8019e4 <__clock+0x4>
    6afe:	90 91 e5 19 	lds	r25, 0x19E5	; 0x8019e5 <__clock+0x5>
    6b02:	a0 91 e6 19 	lds	r26, 0x19E6	; 0x8019e6 <__clock+0x6>
    6b06:	b0 91 e7 19 	lds	r27, 0x19E7	; 0x8019e7 <__clock+0x7>
    6b0a:	44 81       	ldd	r20, Z+4	; 0x04
    6b0c:	55 81       	ldd	r21, Z+5	; 0x05
    6b0e:	66 81       	ldd	r22, Z+6	; 0x06
    6b10:	77 81       	ldd	r23, Z+7	; 0x07
    6b12:	48 17       	cp	r20, r24
    6b14:	59 07       	cpc	r21, r25
    6b16:	6a 07       	cpc	r22, r26
    6b18:	7b 07       	cpc	r23, r27
    6b1a:	b9 f6       	brne	.-82     	; 0x6aca <clock_settime.part.2+0x2>
    6b1c:	80 91 e0 19 	lds	r24, 0x19E0	; 0x8019e0 <__clock>
    6b20:	90 91 e1 19 	lds	r25, 0x19E1	; 0x8019e1 <__clock+0x1>
    6b24:	a0 91 e2 19 	lds	r26, 0x19E2	; 0x8019e2 <__clock+0x2>
    6b28:	b0 91 e3 19 	lds	r27, 0x19E3	; 0x8019e3 <__clock+0x3>
    6b2c:	40 81       	ld	r20, Z
    6b2e:	51 81       	ldd	r21, Z+1	; 0x01
    6b30:	62 81       	ldd	r22, Z+2	; 0x02
    6b32:	73 81       	ldd	r23, Z+3	; 0x03
    6b34:	48 17       	cp	r20, r24
    6b36:	59 07       	cpc	r21, r25
    6b38:	6a 07       	cpc	r22, r26
    6b3a:	7b 07       	cpc	r23, r27
    6b3c:	31 f6       	brne	.-116    	; 0x6aca <clock_settime.part.2+0x2>
    6b3e:	80 e0       	ldi	r24, 0x00	; 0
    6b40:	90 e0       	ldi	r25, 0x00	; 0
    6b42:	08 95       	ret

00006b44 <set_timers>:
    6b44:	00 d0       	rcall	.+0      	; 0x6b46 <set_timers+0x2>
    6b46:	1f 92       	push	r1
    6b48:	00 97       	sbiw	r24, 0x00	; 0
    6b4a:	79 f1       	breq	.+94     	; 0x6baa <set_timers+0x66>
    6b4c:	e8 ee       	ldi	r30, 0xE8	; 232
    6b4e:	f9 e1       	ldi	r31, 0x19	; 25
    6b50:	4f ef       	ldi	r20, 0xFF	; 255
    6b52:	5f ef       	ldi	r21, 0xFF	; 255
    6b54:	20 e0       	ldi	r18, 0x00	; 0
    6b56:	30 e0       	ldi	r19, 0x00	; 0
    6b58:	60 81       	ld	r22, Z
    6b5a:	71 81       	ldd	r23, Z+1	; 0x01
    6b5c:	86 17       	cp	r24, r22
    6b5e:	97 07       	cpc	r25, r23
    6b60:	79 f0       	breq	.+30     	; 0x6b80 <set_timers+0x3c>
    6b62:	67 2b       	or	r22, r23
    6b64:	71 f4       	brne	.+28     	; 0x6b82 <set_timers+0x3e>
    6b66:	f9 01       	movw	r30, r18
    6b68:	ee 0f       	add	r30, r30
    6b6a:	ff 1f       	adc	r31, r31
    6b6c:	e2 0f       	add	r30, r18
    6b6e:	f3 1f       	adc	r31, r19
    6b70:	e8 51       	subi	r30, 0x18	; 24
    6b72:	f6 4e       	sbci	r31, 0xE6	; 230
    6b74:	91 83       	std	Z+1, r25	; 0x01
    6b76:	80 83       	st	Z, r24
    6b78:	81 e0       	ldi	r24, 0x01	; 1
    6b7a:	82 83       	std	Z+2, r24	; 0x02
    6b7c:	c9 01       	movw	r24, r18
    6b7e:	19 c0       	rjmp	.+50     	; 0x6bb2 <set_timers+0x6e>
    6b80:	a9 01       	movw	r20, r18
    6b82:	2f 5f       	subi	r18, 0xFF	; 255
    6b84:	3f 4f       	sbci	r19, 0xFF	; 255
    6b86:	33 96       	adiw	r30, 0x03	; 3
    6b88:	28 30       	cpi	r18, 0x08	; 8
    6b8a:	31 05       	cpc	r19, r1
    6b8c:	29 f7       	brne	.-54     	; 0x6b58 <set_timers+0x14>
    6b8e:	4f 3f       	cpi	r20, 0xFF	; 255
    6b90:	8f ef       	ldi	r24, 0xFF	; 255
    6b92:	58 07       	cpc	r21, r24
    6b94:	69 f4       	brne	.+26     	; 0x6bb0 <set_timers+0x6c>
    6b96:	84 e9       	ldi	r24, 0x94	; 148
    6b98:	95 e0       	ldi	r25, 0x05	; 5
    6b9a:	a0 e0       	ldi	r26, 0x00	; 0
    6b9c:	ed b7       	in	r30, 0x3d	; 61
    6b9e:	fe b7       	in	r31, 0x3e	; 62
    6ba0:	81 83       	std	Z+1, r24	; 0x01
    6ba2:	92 83       	std	Z+2, r25	; 0x02
    6ba4:	a3 83       	std	Z+3, r26	; 0x03
    6ba6:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    6baa:	8f ef       	ldi	r24, 0xFF	; 255
    6bac:	9f ef       	ldi	r25, 0xFF	; 255
    6bae:	01 c0       	rjmp	.+2      	; 0x6bb2 <set_timers+0x6e>
    6bb0:	ca 01       	movw	r24, r20
    6bb2:	0f 90       	pop	r0
    6bb4:	0f 90       	pop	r0
    6bb6:	0f 90       	pop	r0
    6bb8:	08 95       	ret

00006bba <delete_all_timers>:
    6bba:	e8 ee       	ldi	r30, 0xE8	; 232
    6bbc:	f9 e1       	ldi	r31, 0x19	; 25
    6bbe:	12 82       	std	Z+2, r1	; 0x02
    6bc0:	11 82       	std	Z+1, r1	; 0x01
    6bc2:	10 82       	st	Z, r1
    6bc4:	33 96       	adiw	r30, 0x03	; 3
    6bc6:	8a e1       	ldi	r24, 0x1A	; 26
    6bc8:	e0 30       	cpi	r30, 0x00	; 0
    6bca:	f8 07       	cpc	r31, r24
    6bcc:	c1 f7       	brne	.-16     	; 0x6bbe <delete_all_timers+0x4>
    6bce:	08 95       	ret

00006bd0 <subtract_timespec>:
    6bd0:	0f 93       	push	r16
    6bd2:	1f 93       	push	r17
    6bd4:	cf 93       	push	r28
    6bd6:	df 93       	push	r29
    6bd8:	fc 01       	movw	r30, r24
    6bda:	84 81       	ldd	r24, Z+4	; 0x04
    6bdc:	95 81       	ldd	r25, Z+5	; 0x05
    6bde:	a6 81       	ldd	r26, Z+6	; 0x06
    6be0:	b7 81       	ldd	r27, Z+7	; 0x07
    6be2:	eb 01       	movw	r28, r22
    6be4:	0c 81       	ldd	r16, Y+4	; 0x04
    6be6:	1d 81       	ldd	r17, Y+5	; 0x05
    6be8:	2e 81       	ldd	r18, Y+6	; 0x06
    6bea:	3f 81       	ldd	r19, Y+7	; 0x07
    6bec:	80 1b       	sub	r24, r16
    6bee:	91 0b       	sbc	r25, r17
    6bf0:	a2 0b       	sbc	r26, r18
    6bf2:	b3 0b       	sbc	r27, r19
    6bf4:	b7 fd       	sbrc	r27, 7
    6bf6:	05 c0       	rjmp	.+10     	; 0x6c02 <subtract_timespec+0x32>
    6bf8:	84 83       	std	Z+4, r24	; 0x04
    6bfa:	95 83       	std	Z+5, r25	; 0x05
    6bfc:	a6 83       	std	Z+6, r26	; 0x06
    6bfe:	b7 83       	std	Z+7, r27	; 0x07
    6c00:	12 c0       	rjmp	.+36     	; 0x6c26 <subtract_timespec+0x56>
    6c02:	96 53       	subi	r25, 0x36	; 54
    6c04:	a5 46       	sbci	r26, 0x65	; 101
    6c06:	b4 4c       	sbci	r27, 0xC4	; 196
    6c08:	84 83       	std	Z+4, r24	; 0x04
    6c0a:	95 83       	std	Z+5, r25	; 0x05
    6c0c:	a6 83       	std	Z+6, r26	; 0x06
    6c0e:	b7 83       	std	Z+7, r27	; 0x07
    6c10:	80 81       	ld	r24, Z
    6c12:	91 81       	ldd	r25, Z+1	; 0x01
    6c14:	a2 81       	ldd	r26, Z+2	; 0x02
    6c16:	b3 81       	ldd	r27, Z+3	; 0x03
    6c18:	01 97       	sbiw	r24, 0x01	; 1
    6c1a:	a1 09       	sbc	r26, r1
    6c1c:	b1 09       	sbc	r27, r1
    6c1e:	80 83       	st	Z, r24
    6c20:	91 83       	std	Z+1, r25	; 0x01
    6c22:	a2 83       	std	Z+2, r26	; 0x02
    6c24:	b3 83       	std	Z+3, r27	; 0x03
    6c26:	80 81       	ld	r24, Z
    6c28:	91 81       	ldd	r25, Z+1	; 0x01
    6c2a:	a2 81       	ldd	r26, Z+2	; 0x02
    6c2c:	b3 81       	ldd	r27, Z+3	; 0x03
    6c2e:	eb 01       	movw	r28, r22
    6c30:	48 81       	ld	r20, Y
    6c32:	59 81       	ldd	r21, Y+1	; 0x01
    6c34:	6a 81       	ldd	r22, Y+2	; 0x02
    6c36:	7b 81       	ldd	r23, Y+3	; 0x03
    6c38:	84 1b       	sub	r24, r20
    6c3a:	95 0b       	sbc	r25, r21
    6c3c:	a6 0b       	sbc	r26, r22
    6c3e:	b7 0b       	sbc	r27, r23
    6c40:	80 83       	st	Z, r24
    6c42:	91 83       	std	Z+1, r25	; 0x01
    6c44:	a2 83       	std	Z+2, r26	; 0x02
    6c46:	b3 83       	std	Z+3, r27	; 0x03
    6c48:	df 91       	pop	r29
    6c4a:	cf 91       	pop	r28
    6c4c:	1f 91       	pop	r17
    6c4e:	0f 91       	pop	r16
    6c50:	08 95       	ret

00006c52 <ts_to_str>:
    6c52:	ad b7       	in	r26, 0x3d	; 61
    6c54:	be b7       	in	r27, 0x3e	; 62
    6c56:	1f 97       	sbiw	r26, 0x0f	; 15
    6c58:	0f b6       	in	r0, 0x3f	; 63
    6c5a:	f8 94       	cli
    6c5c:	be bf       	out	0x3e, r27	; 62
    6c5e:	0f be       	out	0x3f, r0	; 63
    6c60:	ad bf       	out	0x3d, r26	; 61
    6c62:	fc 01       	movw	r30, r24
    6c64:	44 81       	ldd	r20, Z+4	; 0x04
    6c66:	55 81       	ldd	r21, Z+5	; 0x05
    6c68:	66 81       	ldd	r22, Z+6	; 0x06
    6c6a:	77 81       	ldd	r23, Z+7	; 0x07
    6c6c:	ed b7       	in	r30, 0x3d	; 61
    6c6e:	fe b7       	in	r31, 0x3e	; 62
    6c70:	44 87       	std	Z+12, r20	; 0x0c
    6c72:	55 87       	std	Z+13, r21	; 0x0d
    6c74:	66 87       	std	Z+14, r22	; 0x0e
    6c76:	77 87       	std	Z+15, r23	; 0x0f
    6c78:	fc 01       	movw	r30, r24
    6c7a:	80 81       	ld	r24, Z
    6c7c:	91 81       	ldd	r25, Z+1	; 0x01
    6c7e:	a2 81       	ldd	r26, Z+2	; 0x02
    6c80:	b3 81       	ldd	r27, Z+3	; 0x03
    6c82:	ed b7       	in	r30, 0x3d	; 61
    6c84:	fe b7       	in	r31, 0x3e	; 62
    6c86:	80 87       	std	Z+8, r24	; 0x08
    6c88:	91 87       	std	Z+9, r25	; 0x09
    6c8a:	a2 87       	std	Z+10, r26	; 0x0a
    6c8c:	b3 87       	std	Z+11, r27	; 0x0b
    6c8e:	8a e8       	ldi	r24, 0x8A	; 138
    6c90:	95 e0       	ldi	r25, 0x05	; 5
    6c92:	a0 e0       	ldi	r26, 0x00	; 0
    6c94:	85 83       	std	Z+5, r24	; 0x05
    6c96:	96 83       	std	Z+6, r25	; 0x06
    6c98:	a7 83       	std	Z+7, r26	; 0x07
    6c9a:	8f e1       	ldi	r24, 0x1F	; 31
    6c9c:	90 e0       	ldi	r25, 0x00	; 0
    6c9e:	94 83       	std	Z+4, r25	; 0x04
    6ca0:	83 83       	std	Z+3, r24	; 0x03
    6ca2:	80 e2       	ldi	r24, 0x20	; 32
    6ca4:	97 e1       	ldi	r25, 0x17	; 23
    6ca6:	92 83       	std	Z+2, r25	; 0x02
    6ca8:	81 83       	std	Z+1, r24	; 0x01
    6caa:	0e 94 10 47 	call	0x8e20	; 0x8e20 <snprintf_P>
    6cae:	80 e2       	ldi	r24, 0x20	; 32
    6cb0:	97 e1       	ldi	r25, 0x17	; 23
    6cb2:	ad b7       	in	r26, 0x3d	; 61
    6cb4:	be b7       	in	r27, 0x3e	; 62
    6cb6:	1f 96       	adiw	r26, 0x0f	; 15
    6cb8:	0f b6       	in	r0, 0x3f	; 63
    6cba:	f8 94       	cli
    6cbc:	be bf       	out	0x3e, r27	; 62
    6cbe:	0f be       	out	0x3f, r0	; 63
    6cc0:	ad bf       	out	0x3d, r26	; 61
    6cc2:	08 95       	ret

00006cc4 <clock_elapsed_begin>:
    6cc4:	68 e1       	ldi	r22, 0x18	; 24
    6cc6:	77 e1       	ldi	r23, 0x17	; 23
    6cc8:	80 e0       	ldi	r24, 0x00	; 0
    6cca:	90 e0       	ldi	r25, 0x00	; 0
    6ccc:	4b ce       	rjmp	.-874    	; 0x6964 <clock_gettime>
    6cce:	08 95       	ret

00006cd0 <clock_elapsed_end>:
    6cd0:	af e0       	ldi	r26, 0x0F	; 15
    6cd2:	b0 e0       	ldi	r27, 0x00	; 0
    6cd4:	ee e6       	ldi	r30, 0x6E	; 110
    6cd6:	f6 e3       	ldi	r31, 0x36	; 54
    6cd8:	0c 94 d6 e3 	jmp	0x1c7ac	; 0x1c7ac <__prologue_saves__+0x1c>
    6cdc:	8c 01       	movw	r16, r24
    6cde:	be 01       	movw	r22, r28
    6ce0:	68 5f       	subi	r22, 0xF8	; 248
    6ce2:	7f 4f       	sbci	r23, 0xFF	; 255
    6ce4:	80 e0       	ldi	r24, 0x00	; 0
    6ce6:	90 e0       	ldi	r25, 0x00	; 0
    6ce8:	3d de       	rcall	.-902    	; 0x6964 <clock_gettime>
    6cea:	68 e1       	ldi	r22, 0x18	; 24
    6cec:	77 e1       	ldi	r23, 0x17	; 23
    6cee:	ce 01       	movw	r24, r28
    6cf0:	08 96       	adiw	r24, 0x08	; 8
    6cf2:	6e df       	rcall	.-292    	; 0x6bd0 <subtract_timespec>
    6cf4:	01 15       	cp	r16, r1
    6cf6:	11 05       	cpc	r17, r1
    6cf8:	b1 f0       	breq	.+44     	; 0x6d26 <clock_elapsed_end+0x56>
    6cfa:	f8 01       	movw	r30, r16
    6cfc:	80 81       	ld	r24, Z
    6cfe:	88 23       	and	r24, r24
    6d00:	91 f0       	breq	.+36     	; 0x6d26 <clock_elapsed_end+0x56>
    6d02:	ce 01       	movw	r24, r28
    6d04:	08 96       	adiw	r24, 0x08	; 8
    6d06:	a5 df       	rcall	.-182    	; 0x6c52 <ts_to_str>
    6d08:	ed b7       	in	r30, 0x3d	; 61
    6d0a:	fe b7       	in	r31, 0x3e	; 62
    6d0c:	97 83       	std	Z+7, r25	; 0x07
    6d0e:	86 83       	std	Z+6, r24	; 0x06
    6d10:	15 83       	std	Z+5, r17	; 0x05
    6d12:	04 83       	std	Z+4, r16	; 0x04
    6d14:	8c e7       	ldi	r24, 0x7C	; 124
    6d16:	95 e0       	ldi	r25, 0x05	; 5
    6d18:	a0 e0       	ldi	r26, 0x00	; 0
    6d1a:	81 83       	std	Z+1, r24	; 0x01
    6d1c:	92 83       	std	Z+2, r25	; 0x02
    6d1e:	a3 83       	std	Z+3, r26	; 0x03
    6d20:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    6d24:	0f c0       	rjmp	.+30     	; 0x6d44 <clock_elapsed_end+0x74>
    6d26:	ce 01       	movw	r24, r28
    6d28:	08 96       	adiw	r24, 0x08	; 8
    6d2a:	93 df       	rcall	.-218    	; 0x6c52 <ts_to_str>
    6d2c:	ed b7       	in	r30, 0x3d	; 61
    6d2e:	fe b7       	in	r31, 0x3e	; 62
    6d30:	95 83       	std	Z+5, r25	; 0x05
    6d32:	84 83       	std	Z+4, r24	; 0x04
    6d34:	81 e7       	ldi	r24, 0x71	; 113
    6d36:	95 e0       	ldi	r25, 0x05	; 5
    6d38:	a0 e0       	ldi	r26, 0x00	; 0
    6d3a:	81 83       	std	Z+1, r24	; 0x01
    6d3c:	92 83       	std	Z+2, r25	; 0x02
    6d3e:	a3 83       	std	Z+3, r26	; 0x03
    6d40:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    6d44:	2f 96       	adiw	r28, 0x0f	; 15
    6d46:	e4 e0       	ldi	r30, 0x04	; 4
    6d48:	0c 94 f2 e3 	jmp	0x1c7e4	; 0x1c7e4 <__epilogue_restores__+0x1c>

00006d4c <clock_clear>:
    6d4c:	a8 e0       	ldi	r26, 0x08	; 8
    6d4e:	b0 e0       	ldi	r27, 0x00	; 0
    6d50:	ec ea       	ldi	r30, 0xAC	; 172
    6d52:	f6 e3       	ldi	r31, 0x36	; 54
    6d54:	0c 94 d8 e3 	jmp	0x1c7b0	; 0x1c7b0 <__prologue_saves__+0x20>
    6d58:	1d 82       	std	Y+5, r1	; 0x05
    6d5a:	1e 82       	std	Y+6, r1	; 0x06
    6d5c:	1f 82       	std	Y+7, r1	; 0x07
    6d5e:	18 86       	std	Y+8, r1	; 0x08
    6d60:	19 82       	std	Y+1, r1	; 0x01
    6d62:	1a 82       	std	Y+2, r1	; 0x02
    6d64:	1b 82       	std	Y+3, r1	; 0x03
    6d66:	1c 82       	std	Y+4, r1	; 0x04
    6d68:	ce 01       	movw	r24, r28
    6d6a:	01 96       	adiw	r24, 0x01	; 1
    6d6c:	ad de       	rcall	.-678    	; 0x6ac8 <clock_settime.part.2>
    6d6e:	e0 e0       	ldi	r30, 0x00	; 0
    6d70:	fa e1       	ldi	r31, 0x1A	; 26
    6d72:	11 82       	std	Z+1, r1	; 0x01
    6d74:	10 82       	st	Z, r1
    6d76:	13 82       	std	Z+3, r1	; 0x03
    6d78:	12 82       	std	Z+2, r1	; 0x02
    6d7a:	28 96       	adiw	r28, 0x08	; 8
    6d7c:	e2 e0       	ldi	r30, 0x02	; 2
    6d7e:	0c 94 f4 e3 	jmp	0x1c7e8	; 0x1c7e8 <__epilogue_restores__+0x20>

00006d82 <enable_timers>:
///
/// @return  void
MEMSPACE
void enable_timers()
{
    if(timers_configured && !timers_enabled)
    6d82:	80 91 40 17 	lds	r24, 0x1740	; 0x801740 <timers_configured>
    6d86:	90 91 41 17 	lds	r25, 0x1741	; 0x801741 <timers_configured+0x1>
    6d8a:	89 2b       	or	r24, r25
    6d8c:	69 f0       	breq	.+26     	; 0x6da8 <enable_timers+0x26>
    6d8e:	80 91 42 17 	lds	r24, 0x1742	; 0x801742 <timers_enabled>
    6d92:	90 91 43 17 	lds	r25, 0x1743	; 0x801743 <timers_enabled+0x1>
    6d96:	89 2b       	or	r24, r25
    {
        enable_system_task();
    6d98:	39 f4       	brne	.+14     	; 0x6da8 <enable_timers+0x26>
        timers_enabled = 1;
    6d9a:	a8 dd       	rcall	.-1200   	; 0x68ec <enable_system_task>
    6d9c:	81 e0       	ldi	r24, 0x01	; 1
    6d9e:	90 e0       	ldi	r25, 0x00	; 0
    6da0:	90 93 43 17 	sts	0x1743, r25	; 0x801743 <timers_enabled+0x1>
    6da4:	80 93 42 17 	sts	0x1742, r24	; 0x801742 <timers_enabled>
    6da8:	08 95       	ret

00006daa <execute_timers>:
/// @brief  Execute all user timers at SYSTEM_HZ rate.
///  Called by system task
///
/// @return  void
void execute_timers()
{
    6daa:	cf 93       	push	r28
    6dac:	df 93       	push	r29
    6dae:	c8 ee       	ldi	r28, 0xE8	; 232
    6db0:	d9 e1       	ldi	r29, 0x19	; 25
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
    6db2:	8a 81       	ldd	r24, Y+2	; 0x02
    6db4:	88 23       	and	r24, r24
    6db6:	29 f0       	breq	.+10     	; 0x6dc2 <execute_timers+0x18>
    6db8:	e8 81       	ld	r30, Y
    6dba:	f9 81       	ldd	r31, Y+1	; 0x01
    6dbc:	30 97       	sbiw	r30, 0x00	; 0
    6dbe:	09 f0       	breq	.+2      	; 0x6dc2 <execute_timers+0x18>
            (*timer_irq[i].user_timer_handler)();
    6dc0:	09 95       	icall
    6dc2:	23 96       	adiw	r28, 0x03	; 3
/// @return  void
void execute_timers()
{
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    6dc4:	8a e1       	ldi	r24, 0x1A	; 26
    6dc6:	c0 30       	cpi	r28, 0x00	; 0
    6dc8:	d8 07       	cpc	r29, r24
    6dca:	99 f7       	brne	.-26     	; 0x6db2 <execute_timers+0x8>
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
            (*timer_irq[i].user_timer_handler)();
    }
}
    6dcc:	df 91       	pop	r29
    6dce:	cf 91       	pop	r28
    6dd0:	08 95       	ret

00006dd2 <init_timers>:
/// @see: timer_hal.c for hardware dependent interface
//
/// @return  void
MEMSPACE
void init_timers()
{
    6dd2:	00 d0       	rcall	.+0      	; 0x6dd4 <init_timers+0x2>
    6dd4:	1f 92       	push	r1
    printf("Timers init called\n");
    6dd6:	8d e5       	ldi	r24, 0x5D	; 93
    6dd8:	95 e0       	ldi	r25, 0x05	; 5
    6dda:	a0 e0       	ldi	r26, 0x00	; 0
    6ddc:	ed b7       	in	r30, 0x3d	; 61
    6dde:	fe b7       	in	r31, 0x3e	; 62
    6de0:	81 83       	std	Z+1, r24	; 0x01
    6de2:	92 83       	std	Z+2, r25	; 0x02
    6de4:	a3 83       	std	Z+3, r26	; 0x03
    6de6:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>

    if(!timers_configured)
    6dea:	80 91 40 17 	lds	r24, 0x1740	; 0x801740 <timers_configured>
    6dee:	90 91 41 17 	lds	r25, 0x1741	; 0x801741 <timers_configured+0x1>
    6df2:	89 2b       	or	r24, r25
    {
        install_timers_isr();
    6df4:	a9 f4       	brne	.+42     	; 0x6e20 <init_timers+0x4e>
        timers_configured = 1;
    6df6:	7c dd       	rcall	.-1288   	; 0x68f0 <install_timers_isr>
    6df8:	81 e0       	ldi	r24, 0x01	; 1
    6dfa:	90 e0       	ldi	r25, 0x00	; 0
    6dfc:	90 93 41 17 	sts	0x1741, r25	; 0x801741 <timers_configured+0x1>
    6e00:	80 93 40 17 	sts	0x1740, r24	; 0x801740 <timers_configured>
        timers_enabled = 0;
    6e04:	10 92 43 17 	sts	0x1743, r1	; 0x801743 <timers_enabled+0x1>
    6e08:	10 92 42 17 	sts	0x1742, r1	; 0x801742 <timers_enabled>
        printf("Timers configured\n");
    6e0c:	8a e4       	ldi	r24, 0x4A	; 74
    6e0e:	95 e0       	ldi	r25, 0x05	; 5
    6e10:	a0 e0       	ldi	r26, 0x00	; 0
    6e12:	ed b7       	in	r30, 0x3d	; 61
    6e14:	fe b7       	in	r31, 0x3e	; 62
    6e16:	81 83       	std	Z+1, r24	; 0x01
    6e18:	92 83       	std	Z+2, r25	; 0x02
    }

    delete_all_timers();
    6e1a:	a3 83       	std	Z+3, r26	; 0x03

    clock_clear();
    6e1c:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    printf("Clock Init\n");
    6e20:	cc de       	rcall	.-616    	; 0x6bba <delete_all_timers>
    6e22:	94 df       	rcall	.-216    	; 0x6d4c <clock_clear>
    6e24:	8e e3       	ldi	r24, 0x3E	; 62
    6e26:	95 e0       	ldi	r25, 0x05	; 5
    6e28:	a0 e0       	ldi	r26, 0x00	; 0
    6e2a:	ed b7       	in	r30, 0x3d	; 61
    6e2c:	fe b7       	in	r31, 0x3e	; 62
    6e2e:	81 83       	std	Z+1, r24	; 0x01
    6e30:	92 83       	std	Z+2, r25	; 0x02
    6e32:	a3 83       	std	Z+3, r26	; 0x03

///  See time.c
    if(set_timers(clock_task,1) == -1)
    6e34:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    6e38:	61 e0       	ldi	r22, 0x01	; 1
    6e3a:	70 e0       	ldi	r23, 0x00	; 0
    6e3c:	87 e2       	ldi	r24, 0x27	; 39
    6e3e:	95 e3       	ldi	r25, 0x35	; 53
    6e40:	81 de       	rcall	.-766    	; 0x6b44 <set_timers>
        printf("Clock task init failed\n");
    6e42:	01 96       	adiw	r24, 0x01	; 1
    6e44:	51 f4       	brne	.+20     	; 0x6e5a <init_timers+0x88>
    6e46:	86 e2       	ldi	r24, 0x26	; 38
    6e48:	95 e0       	ldi	r25, 0x05	; 5
    6e4a:	a0 e0       	ldi	r26, 0x00	; 0
    6e4c:	ed b7       	in	r30, 0x3d	; 61
    6e4e:	fe b7       	in	r31, 0x3e	; 62
    6e50:	81 83       	std	Z+1, r24	; 0x01
    6e52:	92 83       	std	Z+2, r25	; 0x02
    6e54:	a3 83       	std	Z+3, r26	; 0x03
    printf("Clock Installed\n");
    6e56:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    6e5a:	85 e1       	ldi	r24, 0x15	; 21
    6e5c:	95 e0       	ldi	r25, 0x05	; 5
    6e5e:	a0 e0       	ldi	r26, 0x00	; 0
    6e60:	ed b7       	in	r30, 0x3d	; 61
    6e62:	fe b7       	in	r31, 0x3e	; 62
    6e64:	81 83       	std	Z+1, r24	; 0x01
    6e66:	92 83       	std	Z+2, r25	; 0x02

    enable_timers();
    6e68:	a3 83       	std	Z+3, r26	; 0x03
    6e6a:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>

    printf("Timers enabled\n");
    6e6e:	89 df       	rcall	.-238    	; 0x6d82 <enable_timers>
    6e70:	85 e0       	ldi	r24, 0x05	; 5
    6e72:	95 e0       	ldi	r25, 0x05	; 5
    6e74:	a0 e0       	ldi	r26, 0x00	; 0
    6e76:	ed b7       	in	r30, 0x3d	; 61
    6e78:	fe b7       	in	r31, 0x3e	; 62
    6e7a:	81 83       	std	Z+1, r24	; 0x01
    6e7c:	92 83       	std	Z+2, r25	; 0x02
    6e7e:	a3 83       	std	Z+3, r26	; 0x03
}
    6e80:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    6e84:	0f 90       	pop	r0
    6e86:	0f 90       	pop	r0
    6e88:	0f 90       	pop	r0
    6e8a:	08 95       	ret

00006e8c <clock_getres>:
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_getres(clockid_t clk_id, struct timespec *res)
{
    res->tv_sec = 0;
    6e8c:	fb 01       	movw	r30, r22
    6e8e:	10 82       	st	Z, r1
    6e90:	11 82       	std	Z+1, r1	; 0x01
    6e92:	12 82       	std	Z+2, r1	; 0x02
    6e94:	13 82       	std	Z+3, r1	; 0x03
    res->tv_nsec = SYSTEM_TASK_TIC_NS;
    6e96:	80 e4       	ldi	r24, 0x40	; 64
    6e98:	92 e4       	ldi	r25, 0x42	; 66
    6e9a:	af e0       	ldi	r26, 0x0F	; 15
    6e9c:	b0 e0       	ldi	r27, 0x00	; 0
    6e9e:	84 83       	std	Z+4, r24	; 0x04
    6ea0:	95 83       	std	Z+5, r25	; 0x05
    6ea2:	a6 83       	std	Z+6, r26	; 0x06
    6ea4:	b7 83       	std	Z+7, r27	; 0x07
    return(0);
}
    6ea6:	80 e0       	ldi	r24, 0x00	; 0
    6ea8:	90 e0       	ldi	r25, 0x00	; 0
    6eaa:	08 95       	ret

00006eac <clock_settime>:
///
/// @return 0.
MEMSPACE
int clock_settime(clockid_t clk_id, const struct timespec *ts)
{
    if(clk_id)
    6eac:	89 2b       	or	r24, r25
    6eae:	19 f4       	brne	.+6      	; 0x6eb6 <clock_settime+0xa>
    6eb0:	cb 01       	movw	r24, r22
    6eb2:	0a ce       	rjmp	.-1004   	; 0x6ac8 <clock_settime.part.2>
    6eb4:	08 95       	ret
        return(-1);
    6eb6:	8f ef       	ldi	r24, 0xFF	; 255
    6eb8:	9f ef       	ldi	r25, 0xFF	; 255
            continue;
        break;
    }

    return(0);
}
    6eba:	08 95       	ret

00006ebc <IS_Leap>:
void print_dst_gmt()
{
    printf("DST START       GMT: %s\n", ctime_gm(&dst.start));
    printf("DST END         GMT: %s\n", ctime_gm(&dst.end));

}
    6ebc:	9c 01       	movw	r18, r24
    6ebe:	83 70       	andi	r24, 0x03	; 3
    6ec0:	99 27       	eor	r25, r25
    6ec2:	00 97       	sbiw	r24, 0x00	; 0
    6ec4:	69 f4       	brne	.+26     	; 0x6ee0 <IS_Leap+0x24>
    6ec6:	2c 36       	cpi	r18, 0x6C	; 108
    6ec8:	47 e0       	ldi	r20, 0x07	; 7
    6eca:	34 07       	cpc	r19, r20
    6ecc:	59 f0       	breq	.+22     	; 0x6ee4 <IS_Leap+0x28>
    6ece:	51 e0       	ldi	r21, 0x01	; 1
    6ed0:	40 e0       	ldi	r20, 0x00	; 0
    6ed2:	24 33       	cpi	r18, 0x34	; 52
    6ed4:	38 40       	sbci	r19, 0x08	; 8
    6ed6:	09 f4       	brne	.+2      	; 0x6eda <IS_Leap+0x1e>
    6ed8:	50 e0       	ldi	r21, 0x00	; 0
    6eda:	85 2f       	mov	r24, r21
    6edc:	94 2f       	mov	r25, r20
    6ede:	08 95       	ret
    6ee0:	80 e0       	ldi	r24, 0x00	; 0
    6ee2:	90 e0       	ldi	r25, 0x00	; 0
    6ee4:	08 95       	ret

00006ee6 <tm_mon_to_ascii>:
    6ee6:	8c 30       	cpi	r24, 0x0C	; 12
    6ee8:	91 05       	cpc	r25, r1
    6eea:	40 f4       	brcc	.+16     	; 0x6efc <tm_mon_to_ascii+0x16>
    6eec:	88 0f       	add	r24, r24
    6eee:	99 1f       	adc	r25, r25
    6ef0:	fc 01       	movw	r30, r24
    6ef2:	e8 5e       	subi	r30, 0xE8	; 232
    6ef4:	fe 4f       	sbci	r31, 0xFE	; 254
    6ef6:	80 81       	ld	r24, Z
    6ef8:	91 81       	ldd	r25, Z+1	; 0x01
    6efa:	08 95       	ret
    6efc:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__Month+0x18>
    6f00:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <__Month+0x19>
    6f04:	08 95       	ret

00006f06 <Days_Per_Month>:
    6f06:	cf 93       	push	r28
    6f08:	df 93       	push	r29
    6f0a:	8c 30       	cpi	r24, 0x0C	; 12
    6f0c:	91 05       	cpc	r25, r1
    6f0e:	24 f0       	brlt	.+8      	; 0x6f18 <Days_Per_Month+0x12>
    6f10:	6f 5f       	subi	r22, 0xFF	; 255
    6f12:	7f 4f       	sbci	r23, 0xFF	; 255
    6f14:	0c 97       	sbiw	r24, 0x0c	; 12
    6f16:	f9 cf       	rjmp	.-14     	; 0x6f0a <Days_Per_Month+0x4>
    6f18:	97 ff       	sbrs	r25, 7
    6f1a:	04 c0       	rjmp	.+8      	; 0x6f24 <Days_Per_Month+0x1e>
    6f1c:	61 50       	subi	r22, 0x01	; 1
    6f1e:	71 09       	sbc	r23, r1
    6f20:	0c 96       	adiw	r24, 0x0c	; 12
    6f22:	fa cf       	rjmp	.-12     	; 0x6f18 <Days_Per_Month+0x12>
    6f24:	fc 01       	movw	r30, r24
    6f26:	ee 0f       	add	r30, r30
    6f28:	ff 1f       	adc	r31, r31
    6f2a:	e8 55       	subi	r30, 0x58	; 88
    6f2c:	fd 4f       	sbci	r31, 0xFD	; 253
    6f2e:	c0 81       	ld	r28, Z
    6f30:	d1 81       	ldd	r29, Z+1	; 0x01
    6f32:	01 97       	sbiw	r24, 0x01	; 1
    6f34:	29 f4       	brne	.+10     	; 0x6f40 <Days_Per_Month+0x3a>
    6f36:	cb 01       	movw	r24, r22
    6f38:	c1 df       	rcall	.-126    	; 0x6ebc <IS_Leap>
    6f3a:	89 2b       	or	r24, r25
    6f3c:	09 f0       	breq	.+2      	; 0x6f40 <Days_Per_Month+0x3a>
    6f3e:	21 96       	adiw	r28, 0x01	; 1
    6f40:	ce 01       	movw	r24, r28
    6f42:	df 91       	pop	r29
    6f44:	cf 91       	pop	r28
    6f46:	08 95       	ret

00006f48 <time_to_tm>:
    6f48:	a0 e0       	ldi	r26, 0x00	; 0
    6f4a:	b0 e0       	ldi	r27, 0x00	; 0
    6f4c:	ea ea       	ldi	r30, 0xAA	; 170
    6f4e:	f7 e3       	ldi	r31, 0x37	; 55
    6f50:	0c 94 ca e3 	jmp	0x1c794	; 0x1c794 <__prologue_saves__+0x4>
    6f54:	e8 01       	movw	r28, r16
    6f56:	e6 e1       	ldi	r30, 0x16	; 22
    6f58:	d8 01       	movw	r26, r16
    6f5a:	1d 92       	st	X+, r1
    6f5c:	ea 95       	dec	r30
    6f5e:	e9 f7       	brne	.-6      	; 0x6f5a <time_to_tm+0x12>
    6f60:	61 15       	cp	r22, r1
    6f62:	bd e5       	ldi	r27, 0x5D	; 93
    6f64:	7b 07       	cpc	r23, r27
    6f66:	bd ef       	ldi	r27, 0xFD	; 253
    6f68:	8b 07       	cpc	r24, r27
    6f6a:	bf ef       	ldi	r27, 0xFF	; 255
    6f6c:	9b 07       	cpc	r25, r27
    6f6e:	08 f0       	brcs	.+2      	; 0x6f72 <time_to_tm+0x2a>
    6f70:	c0 c0       	rjmp	.+384    	; 0x70f2 <time_to_tm+0x1aa>
    6f72:	6b 01       	movw	r12, r22
    6f74:	7c 01       	movw	r14, r24
    6f76:	c2 1a       	sub	r12, r18
    6f78:	d3 0a       	sbc	r13, r19
    6f7a:	e4 0a       	sbc	r14, r20
    6f7c:	f5 0a       	sbc	r15, r21
    6f7e:	46 01       	movw	r8, r12
    6f80:	57 01       	movw	r10, r14
    6f82:	e0 e8       	ldi	r30, 0x80	; 128
    6f84:	ce 16       	cp	r12, r30
    6f86:	ee ea       	ldi	r30, 0xAE	; 174
    6f88:	de 06       	cpc	r13, r30
    6f8a:	ee ef       	ldi	r30, 0xFE	; 254
    6f8c:	ee 06       	cpc	r14, r30
    6f8e:	ef ef       	ldi	r30, 0xFF	; 255
    6f90:	fe 06       	cpc	r15, r30
    6f92:	50 f0       	brcs	.+20     	; 0x6fa8 <time_to_tm+0x60>
    6f94:	80 e8       	ldi	r24, 0x80	; 128
    6f96:	88 0e       	add	r8, r24
    6f98:	81 e5       	ldi	r24, 0x51	; 81
    6f9a:	98 1e       	adc	r9, r24
    6f9c:	81 e0       	ldi	r24, 0x01	; 1
    6f9e:	a8 1e       	adc	r10, r24
    6fa0:	b1 1c       	adc	r11, r1
    6fa2:	01 e0       	ldi	r16, 0x01	; 1
    6fa4:	10 e0       	ldi	r17, 0x00	; 0
    6fa6:	02 c0       	rjmp	.+4      	; 0x6fac <time_to_tm+0x64>
    6fa8:	00 e0       	ldi	r16, 0x00	; 0
    6faa:	10 e0       	ldi	r17, 0x00	; 0
    6fac:	8c e3       	ldi	r24, 0x3C	; 60
    6fae:	48 2e       	mov	r4, r24
    6fb0:	51 2c       	mov	r5, r1
    6fb2:	61 2c       	mov	r6, r1
    6fb4:	71 2c       	mov	r7, r1
    6fb6:	c5 01       	movw	r24, r10
    6fb8:	b4 01       	movw	r22, r8
    6fba:	a3 01       	movw	r20, r6
    6fbc:	92 01       	movw	r18, r4
    6fbe:	0e 94 46 e3 	call	0x1c68c	; 0x1c68c <__udivmodsi4>
    6fc2:	79 83       	std	Y+1, r23	; 0x01
    6fc4:	68 83       	st	Y, r22
    6fc6:	ca 01       	movw	r24, r20
    6fc8:	b9 01       	movw	r22, r18
    6fca:	a3 01       	movw	r20, r6
    6fcc:	92 01       	movw	r18, r4
    6fce:	0e 94 46 e3 	call	0x1c68c	; 0x1c68c <__udivmodsi4>
    6fd2:	7b 83       	std	Y+3, r23	; 0x03
    6fd4:	6a 83       	std	Y+2, r22	; 0x02
    6fd6:	c5 01       	movw	r24, r10
    6fd8:	b4 01       	movw	r22, r8
    6fda:	20 e1       	ldi	r18, 0x10	; 16
    6fdc:	3e e0       	ldi	r19, 0x0E	; 14
    6fde:	40 e0       	ldi	r20, 0x00	; 0
    6fe0:	50 e0       	ldi	r21, 0x00	; 0
    6fe2:	0e 94 46 e3 	call	0x1c68c	; 0x1c68c <__udivmodsi4>
    6fe6:	ca 01       	movw	r24, r20
    6fe8:	b9 01       	movw	r22, r18
    6fea:	28 e1       	ldi	r18, 0x18	; 24
    6fec:	30 e0       	ldi	r19, 0x00	; 0
    6fee:	40 e0       	ldi	r20, 0x00	; 0
    6ff0:	50 e0       	ldi	r21, 0x00	; 0
    6ff2:	0e 94 46 e3 	call	0x1c68c	; 0x1c68c <__udivmodsi4>
    6ff6:	7d 83       	std	Y+5, r23	; 0x05
    6ff8:	6c 83       	std	Y+4, r22	; 0x04
    6ffa:	01 15       	cp	r16, r1
    6ffc:	11 05       	cpc	r17, r1
    6ffe:	89 f0       	breq	.+34     	; 0x7022 <time_to_tm+0xda>
    7000:	85 e4       	ldi	r24, 0x45	; 69
    7002:	90 e0       	ldi	r25, 0x00	; 0
    7004:	9b 87       	std	Y+11, r25	; 0x0b
    7006:	8a 87       	std	Y+10, r24	; 0x0a
    7008:	8b e0       	ldi	r24, 0x0B	; 11
    700a:	90 e0       	ldi	r25, 0x00	; 0
    700c:	99 87       	std	Y+9, r25	; 0x09
    700e:	88 87       	std	Y+8, r24	; 0x08
    7010:	8f e1       	ldi	r24, 0x1F	; 31
    7012:	90 e0       	ldi	r25, 0x00	; 0
    7014:	9f 83       	std	Y+7, r25	; 0x07
    7016:	8e 83       	std	Y+6, r24	; 0x06
    7018:	83 e0       	ldi	r24, 0x03	; 3
    701a:	90 e0       	ldi	r25, 0x00	; 0
    701c:	9d 87       	std	Y+13, r25	; 0x0d
    701e:	8c 87       	std	Y+12, r24	; 0x0c
    7020:	65 c0       	rjmp	.+202    	; 0x70ec <time_to_tm+0x1a4>
    7022:	c5 01       	movw	r24, r10
    7024:	b4 01       	movw	r22, r8
    7026:	20 e8       	ldi	r18, 0x80	; 128
    7028:	31 e5       	ldi	r19, 0x51	; 81
    702a:	41 e0       	ldi	r20, 0x01	; 1
    702c:	50 e0       	ldi	r21, 0x00	; 0
    702e:	0e 94 46 e3 	call	0x1c68c	; 0x1c68c <__udivmodsi4>
    7032:	49 01       	movw	r8, r18
    7034:	5a 01       	movw	r10, r20
    7036:	ca 01       	movw	r24, r20
    7038:	b9 01       	movw	r22, r18
    703a:	6c 5f       	subi	r22, 0xFC	; 252
    703c:	7f 4f       	sbci	r23, 0xFF	; 255
    703e:	8f 4f       	sbci	r24, 0xFF	; 255
    7040:	9f 4f       	sbci	r25, 0xFF	; 255
    7042:	27 e0       	ldi	r18, 0x07	; 7
    7044:	30 e0       	ldi	r19, 0x00	; 0
    7046:	40 e0       	ldi	r20, 0x00	; 0
    7048:	50 e0       	ldi	r21, 0x00	; 0
    704a:	0e 94 68 e3 	call	0x1c6d0	; 0x1c6d0 <__divmodsi4>
    704e:	7d 87       	std	Y+13, r23	; 0x0d
    7050:	6c 87       	std	Y+12, r22	; 0x0c
    7052:	02 eb       	ldi	r16, 0xB2	; 178
    7054:	17 e0       	ldi	r17, 0x07	; 7
    7056:	c8 01       	movw	r24, r16
    7058:	31 df       	rcall	.-414    	; 0x6ebc <IS_Leap>
    705a:	00 97       	sbiw	r24, 0x00	; 0
    705c:	19 f4       	brne	.+6      	; 0x7064 <time_to_tm+0x11c>
    705e:	4d e6       	ldi	r20, 0x6D	; 109
    7060:	51 e0       	ldi	r21, 0x01	; 1
    7062:	02 c0       	rjmp	.+4      	; 0x7068 <time_to_tm+0x120>
    7064:	4e e6       	ldi	r20, 0x6E	; 110
    7066:	51 e0       	ldi	r21, 0x01	; 1
    7068:	05 2e       	mov	r0, r21
    706a:	00 0c       	add	r0, r0
    706c:	66 0b       	sbc	r22, r22
    706e:	77 0b       	sbc	r23, r23
    7070:	84 16       	cp	r8, r20
    7072:	95 06       	cpc	r9, r21
    7074:	a6 06       	cpc	r10, r22
    7076:	b7 06       	cpc	r11, r23
    7078:	3c f0       	brlt	.+14     	; 0x7088 <time_to_tm+0x140>
    707a:	0f 5f       	subi	r16, 0xFF	; 255
    707c:	1f 4f       	sbci	r17, 0xFF	; 255
    707e:	84 1a       	sub	r8, r20
    7080:	95 0a       	sbc	r9, r21
    7082:	a6 0a       	sbc	r10, r22
    7084:	b7 0a       	sbc	r11, r23
    7086:	e7 cf       	rjmp	.-50     	; 0x7056 <time_to_tm+0x10e>
    7088:	0c 56       	subi	r16, 0x6C	; 108
    708a:	17 40       	sbci	r17, 0x07	; 7
    708c:	1b 87       	std	Y+11, r17	; 0x0b
    708e:	0a 87       	std	Y+10, r16	; 0x0a
    7090:	9f 86       	std	Y+15, r9	; 0x0f
    7092:	8e 86       	std	Y+14, r8	; 0x0e
    7094:	e8 ea       	ldi	r30, 0xA8	; 168
    7096:	f2 e0       	ldi	r31, 0x02	; 2
    7098:	20 e0       	ldi	r18, 0x00	; 0
    709a:	30 e0       	ldi	r19, 0x00	; 0
    709c:	18 14       	cp	r1, r8
    709e:	19 04       	cpc	r1, r9
    70a0:	1a 04       	cpc	r1, r10
    70a2:	1b 04       	cpc	r1, r11
    70a4:	e4 f4       	brge	.+56     	; 0x70de <time_to_tm+0x196>
    70a6:	2c 30       	cpi	r18, 0x0C	; 12
    70a8:	31 05       	cpc	r19, r1
    70aa:	c9 f0       	breq	.+50     	; 0x70de <time_to_tm+0x196>
    70ac:	41 91       	ld	r20, Z+
    70ae:	51 91       	ld	r21, Z+
    70b0:	21 30       	cpi	r18, 0x01	; 1
    70b2:	31 05       	cpc	r19, r1
    70b4:	21 f4       	brne	.+8      	; 0x70be <time_to_tm+0x176>
    70b6:	00 97       	sbiw	r24, 0x00	; 0
    70b8:	11 f0       	breq	.+4      	; 0x70be <time_to_tm+0x176>
    70ba:	4f 5f       	subi	r20, 0xFF	; 255
    70bc:	5f 4f       	sbci	r21, 0xFF	; 255
    70be:	05 2e       	mov	r0, r21
    70c0:	00 0c       	add	r0, r0
    70c2:	66 0b       	sbc	r22, r22
    70c4:	77 0b       	sbc	r23, r23
    70c6:	84 16       	cp	r8, r20
    70c8:	95 06       	cpc	r9, r21
    70ca:	a6 06       	cpc	r10, r22
    70cc:	b7 06       	cpc	r11, r23
    70ce:	3c f0       	brlt	.+14     	; 0x70de <time_to_tm+0x196>
    70d0:	84 1a       	sub	r8, r20
    70d2:	95 0a       	sbc	r9, r21
    70d4:	a6 0a       	sbc	r10, r22
    70d6:	b7 0a       	sbc	r11, r23
    70d8:	2f 5f       	subi	r18, 0xFF	; 255
    70da:	3f 4f       	sbci	r19, 0xFF	; 255
    70dc:	df cf       	rjmp	.-66     	; 0x709c <time_to_tm+0x154>
    70de:	39 87       	std	Y+9, r19	; 0x09
    70e0:	28 87       	std	Y+8, r18	; 0x08
    70e2:	af ef       	ldi	r26, 0xFF	; 255
    70e4:	8a 1a       	sub	r8, r26
    70e6:	9a 0a       	sbc	r9, r26
    70e8:	9f 82       	std	Y+7, r9	; 0x07
    70ea:	8e 82       	std	Y+6, r8	; 0x06
    70ec:	b6 01       	movw	r22, r12
    70ee:	c7 01       	movw	r24, r14
    70f0:	04 c0       	rjmp	.+8      	; 0x70fa <time_to_tm+0x1b2>
    70f2:	6f ef       	ldi	r22, 0xFF	; 255
    70f4:	7f ef       	ldi	r23, 0xFF	; 255
    70f6:	8f ef       	ldi	r24, 0xFF	; 255
    70f8:	9f ef       	ldi	r25, 0xFF	; 255
    70fa:	cd b7       	in	r28, 0x3d	; 61
    70fc:	de b7       	in	r29, 0x3e	; 62
    70fe:	e0 e1       	ldi	r30, 0x10	; 16
    7100:	0c 94 e6 e3 	jmp	0x1c7cc	; 0x1c7cc <__epilogue_restores__+0x4>

00007104 <gmtime_r>:
    7104:	0f 93       	push	r16
    7106:	1f 93       	push	r17
    7108:	cf 93       	push	r28
    710a:	df 93       	push	r29
    710c:	eb 01       	movw	r28, r22
    710e:	fc 01       	movw	r30, r24
    7110:	60 81       	ld	r22, Z
    7112:	71 81       	ldd	r23, Z+1	; 0x01
    7114:	82 81       	ldd	r24, Z+2	; 0x02
    7116:	93 81       	ldd	r25, Z+3	; 0x03
    7118:	8e 01       	movw	r16, r28
    711a:	20 e0       	ldi	r18, 0x00	; 0
    711c:	30 e0       	ldi	r19, 0x00	; 0
    711e:	a9 01       	movw	r20, r18
    7120:	13 df       	rcall	.-474    	; 0x6f48 <time_to_tm>
    7122:	ce 01       	movw	r24, r28
    7124:	df 91       	pop	r29
    7126:	cf 91       	pop	r28
    7128:	1f 91       	pop	r17
    712a:	0f 91       	pop	r16
    712c:	08 95       	ret

0000712e <gmtime>:
    712e:	22 e6       	ldi	r18, 0x62	; 98
    7130:	37 e1       	ldi	r19, 0x17	; 23
    7132:	30 93 79 17 	sts	0x1779, r19	; 0x801779 <p.3795+0x1>
    7136:	20 93 78 17 	sts	0x1778, r18	; 0x801778 <p.3795>
    713a:	b9 01       	movw	r22, r18
    713c:	e3 df       	rcall	.-58     	; 0x7104 <gmtime_r>
    713e:	82 e6       	ldi	r24, 0x62	; 98
    7140:	97 e1       	ldi	r25, 0x17	; 23
    7142:	08 95       	ret

00007144 <gettimezone>:
    7144:	e0 e0       	ldi	r30, 0x00	; 0
    7146:	fa e1       	ldi	r31, 0x1A	; 26
    7148:	20 81       	ld	r18, Z
    714a:	31 81       	ldd	r19, Z+1	; 0x01
    714c:	dc 01       	movw	r26, r24
    714e:	2d 93       	st	X+, r18
    7150:	3c 93       	st	X, r19
    7152:	22 81       	ldd	r18, Z+2	; 0x02
    7154:	33 81       	ldd	r19, Z+3	; 0x03
    7156:	fc 01       	movw	r30, r24
    7158:	33 83       	std	Z+3, r19	; 0x03
    715a:	22 83       	std	Z+2, r18	; 0x02
    715c:	80 e0       	ldi	r24, 0x00	; 0
    715e:	90 e0       	ldi	r25, 0x00	; 0
    7160:	08 95       	ret

00007162 <settimezone>:
    7162:	cf 93       	push	r28
    7164:	df 93       	push	r29
    7166:	ec 01       	movw	r28, r24
    7168:	28 81       	ld	r18, Y
    716a:	39 81       	ldd	r19, Y+1	; 0x01
    716c:	e0 e0       	ldi	r30, 0x00	; 0
    716e:	fa e1       	ldi	r31, 0x1A	; 26
    7170:	31 83       	std	Z+1, r19	; 0x01
    7172:	20 83       	st	Z, r18
    7174:	8a 81       	ldd	r24, Y+2	; 0x02
    7176:	9b 81       	ldd	r25, Y+3	; 0x03
    7178:	93 83       	std	Z+3, r25	; 0x03
    717a:	82 83       	std	Z+2, r24	; 0x02
    717c:	80 e0       	ldi	r24, 0x00	; 0
    717e:	90 e0       	ldi	r25, 0x00	; 0
    7180:	df 91       	pop	r29
    7182:	cf 91       	pop	r28
    7184:	08 95       	ret

00007186 <gettimeofday>:
    7186:	a8 e0       	ldi	r26, 0x08	; 8
    7188:	b0 e0       	ldi	r27, 0x00	; 0
    718a:	e9 ec       	ldi	r30, 0xC9	; 201
    718c:	f8 e3       	ldi	r31, 0x38	; 56
    718e:	0c 94 d4 e3 	jmp	0x1c7a8	; 0x1c7a8 <__prologue_saves__+0x18>
    7192:	8c 01       	movw	r16, r24
    7194:	7b 01       	movw	r14, r22
    7196:	be 01       	movw	r22, r28
    7198:	6f 5f       	subi	r22, 0xFF	; 255
    719a:	7f 4f       	sbci	r23, 0xFF	; 255
    719c:	80 e0       	ldi	r24, 0x00	; 0
    719e:	90 e0       	ldi	r25, 0x00	; 0
    71a0:	e1 db       	rcall	.-2110   	; 0x6964 <clock_gettime>
    71a2:	89 81       	ldd	r24, Y+1	; 0x01
    71a4:	9a 81       	ldd	r25, Y+2	; 0x02
    71a6:	ab 81       	ldd	r26, Y+3	; 0x03
    71a8:	bc 81       	ldd	r27, Y+4	; 0x04
    71aa:	f8 01       	movw	r30, r16
    71ac:	80 83       	st	Z, r24
    71ae:	91 83       	std	Z+1, r25	; 0x01
    71b0:	a2 83       	std	Z+2, r26	; 0x02
    71b2:	b3 83       	std	Z+3, r27	; 0x03
    71b4:	6d 81       	ldd	r22, Y+5	; 0x05
    71b6:	7e 81       	ldd	r23, Y+6	; 0x06
    71b8:	8f 81       	ldd	r24, Y+7	; 0x07
    71ba:	98 85       	ldd	r25, Y+8	; 0x08
    71bc:	28 ee       	ldi	r18, 0xE8	; 232
    71be:	33 e0       	ldi	r19, 0x03	; 3
    71c0:	40 e0       	ldi	r20, 0x00	; 0
    71c2:	50 e0       	ldi	r21, 0x00	; 0
    71c4:	0e 94 68 e3 	call	0x1c6d0	; 0x1c6d0 <__divmodsi4>
    71c8:	f8 01       	movw	r30, r16
    71ca:	24 83       	std	Z+4, r18	; 0x04
    71cc:	35 83       	std	Z+5, r19	; 0x05
    71ce:	46 83       	std	Z+6, r20	; 0x06
    71d0:	57 83       	std	Z+7, r21	; 0x07
    71d2:	c7 01       	movw	r24, r14
    71d4:	b7 df       	rcall	.-146    	; 0x7144 <gettimezone>
    71d6:	80 e0       	ldi	r24, 0x00	; 0
    71d8:	90 e0       	ldi	r25, 0x00	; 0
    71da:	28 96       	adiw	r28, 0x08	; 8
    71dc:	e6 e0       	ldi	r30, 0x06	; 6
    71de:	0c 94 f0 e3 	jmp	0x1c7e0	; 0x1c7e0 <__epilogue_restores__+0x18>

000071e2 <time>:
    71e2:	cf 93       	push	r28
    71e4:	df 93       	push	r29
    71e6:	ec 01       	movw	r28, r24
    71e8:	64 e4       	ldi	r22, 0x44	; 68
    71ea:	77 e1       	ldi	r23, 0x17	; 23
    71ec:	80 e0       	ldi	r24, 0x00	; 0
    71ee:	90 e0       	ldi	r25, 0x00	; 0
    71f0:	b9 db       	rcall	.-2190   	; 0x6964 <clock_gettime>
    71f2:	20 97       	sbiw	r28, 0x00	; 0
    71f4:	61 f0       	breq	.+24     	; 0x720e <time+0x2c>
    71f6:	80 91 44 17 	lds	r24, 0x1744	; 0x801744 <ts.3873>
    71fa:	90 91 45 17 	lds	r25, 0x1745	; 0x801745 <ts.3873+0x1>
    71fe:	a0 91 46 17 	lds	r26, 0x1746	; 0x801746 <ts.3873+0x2>
    7202:	b0 91 47 17 	lds	r27, 0x1747	; 0x801747 <ts.3873+0x3>
    7206:	88 83       	st	Y, r24
    7208:	99 83       	std	Y+1, r25	; 0x01
    720a:	aa 83       	std	Y+2, r26	; 0x02
    720c:	bb 83       	std	Y+3, r27	; 0x03
    720e:	60 91 44 17 	lds	r22, 0x1744	; 0x801744 <ts.3873>
    7212:	70 91 45 17 	lds	r23, 0x1745	; 0x801745 <ts.3873+0x1>
    7216:	80 91 46 17 	lds	r24, 0x1746	; 0x801746 <ts.3873+0x2>
    721a:	90 91 47 17 	lds	r25, 0x1747	; 0x801747 <ts.3873+0x3>
    721e:	df 91       	pop	r29
    7220:	cf 91       	pop	r28
    7222:	08 95       	ret

00007224 <is_dst>:
    7224:	cf 92       	push	r12
    7226:	df 92       	push	r13
    7228:	ef 92       	push	r14
    722a:	ff 92       	push	r15
    722c:	6b 01       	movw	r12, r22
    722e:	7c 01       	movw	r14, r24
    7230:	05 d4       	rcall	.+2058   	; 0x7a3c <set_dst>
    7232:	80 91 04 1a 	lds	r24, 0x1A04	; 0x801a04 <dst>
    7236:	90 91 05 1a 	lds	r25, 0x1A05	; 0x801a05 <dst+0x1>
    723a:	a0 91 06 1a 	lds	r26, 0x1A06	; 0x801a06 <dst+0x2>
    723e:	b0 91 07 1a 	lds	r27, 0x1A07	; 0x801a07 <dst+0x3>
    7242:	c8 16       	cp	r12, r24
    7244:	d9 06       	cpc	r13, r25
    7246:	ea 06       	cpc	r14, r26
    7248:	fb 06       	cpc	r15, r27
    724a:	88 f0       	brcs	.+34     	; 0x726e <is_dst+0x4a>
    724c:	81 e0       	ldi	r24, 0x01	; 1
    724e:	90 e0       	ldi	r25, 0x00	; 0
    7250:	40 91 08 1a 	lds	r20, 0x1A08	; 0x801a08 <dst+0x4>
    7254:	50 91 09 1a 	lds	r21, 0x1A09	; 0x801a09 <dst+0x5>
    7258:	60 91 0a 1a 	lds	r22, 0x1A0A	; 0x801a0a <dst+0x6>
    725c:	70 91 0b 1a 	lds	r23, 0x1A0B	; 0x801a0b <dst+0x7>
    7260:	4c 15       	cp	r20, r12
    7262:	5d 05       	cpc	r21, r13
    7264:	6e 05       	cpc	r22, r14
    7266:	7f 05       	cpc	r23, r15
    7268:	20 f4       	brcc	.+8      	; 0x7272 <is_dst+0x4e>
    726a:	80 e0       	ldi	r24, 0x00	; 0
    726c:	02 c0       	rjmp	.+4      	; 0x7272 <is_dst+0x4e>
    726e:	80 e0       	ldi	r24, 0x00	; 0
    7270:	90 e0       	ldi	r25, 0x00	; 0
    7272:	ff 90       	pop	r15
    7274:	ef 90       	pop	r14
    7276:	df 90       	pop	r13
    7278:	cf 90       	pop	r12
    727a:	08 95       	ret

0000727c <localtime_r>:
    727c:	4f 92       	push	r4
    727e:	5f 92       	push	r5
    7280:	6f 92       	push	r6
    7282:	7f 92       	push	r7
    7284:	af 92       	push	r10
    7286:	bf 92       	push	r11
    7288:	cf 92       	push	r12
    728a:	df 92       	push	r13
    728c:	ef 92       	push	r14
    728e:	ff 92       	push	r15
    7290:	0f 93       	push	r16
    7292:	1f 93       	push	r17
    7294:	cf 93       	push	r28
    7296:	df 93       	push	r29
    7298:	00 d0       	rcall	.+0      	; 0x729a <localtime_r+0x1e>
    729a:	00 d0       	rcall	.+0      	; 0x729c <localtime_r+0x20>
    729c:	cd b7       	in	r28, 0x3d	; 61
    729e:	de b7       	in	r29, 0x3e	; 62
    72a0:	5b 01       	movw	r10, r22
    72a2:	fc 01       	movw	r30, r24
    72a4:	40 80       	ld	r4, Z
    72a6:	51 80       	ldd	r5, Z+1	; 0x01
    72a8:	62 80       	ldd	r6, Z+2	; 0x02
    72aa:	73 80       	ldd	r7, Z+3	; 0x03
    72ac:	ce 01       	movw	r24, r28
    72ae:	01 96       	adiw	r24, 0x01	; 1
    72b0:	49 df       	rcall	.-366    	; 0x7144 <gettimezone>
    72b2:	a9 81       	ldd	r26, Y+1	; 0x01
    72b4:	ba 81       	ldd	r27, Y+2	; 0x02
    72b6:	2c e3       	ldi	r18, 0x3C	; 60
    72b8:	30 e0       	ldi	r19, 0x00	; 0
    72ba:	0e 94 a2 e3 	call	0x1c744	; 0x1c744 <__usmulhisi3>
    72be:	6b 01       	movw	r12, r22
    72c0:	7c 01       	movw	r14, r24
    72c2:	c3 01       	movw	r24, r6
    72c4:	b2 01       	movw	r22, r4
    72c6:	6c 19       	sub	r22, r12
    72c8:	7d 09       	sbc	r23, r13
    72ca:	8e 09       	sbc	r24, r14
    72cc:	9f 09       	sbc	r25, r15
    72ce:	aa df       	rcall	.-172    	; 0x7224 <is_dst>
    72d0:	89 2b       	or	r24, r25
    72d2:	31 f0       	breq	.+12     	; 0x72e0 <localtime_r+0x64>
    72d4:	f0 e1       	ldi	r31, 0x10	; 16
    72d6:	cf 1a       	sub	r12, r31
    72d8:	fe e0       	ldi	r31, 0x0E	; 14
    72da:	df 0a       	sbc	r13, r31
    72dc:	e1 08       	sbc	r14, r1
    72de:	f1 08       	sbc	r15, r1
    72e0:	85 01       	movw	r16, r10
    72e2:	a7 01       	movw	r20, r14
    72e4:	96 01       	movw	r18, r12
    72e6:	c3 01       	movw	r24, r6
    72e8:	b2 01       	movw	r22, r4
    72ea:	2e de       	rcall	.-932    	; 0x6f48 <time_to_tm>
    72ec:	c5 01       	movw	r24, r10
    72ee:	0f 90       	pop	r0
    72f0:	0f 90       	pop	r0
    72f2:	0f 90       	pop	r0
    72f4:	0f 90       	pop	r0
    72f6:	df 91       	pop	r29
    72f8:	cf 91       	pop	r28
    72fa:	1f 91       	pop	r17
    72fc:	0f 91       	pop	r16
    72fe:	ff 90       	pop	r15
    7300:	ef 90       	pop	r14
    7302:	df 90       	pop	r13
    7304:	cf 90       	pop	r12
    7306:	bf 90       	pop	r11
    7308:	af 90       	pop	r10
    730a:	7f 90       	pop	r7
    730c:	6f 90       	pop	r6
    730e:	5f 90       	pop	r5
    7310:	4f 90       	pop	r4
    7312:	08 95       	ret

00007314 <localtime>:
    7314:	6c e4       	ldi	r22, 0x4C	; 76
    7316:	77 e1       	ldi	r23, 0x17	; 23
    7318:	b1 cf       	rjmp	.-158    	; 0x727c <localtime_r>
    731a:	08 95       	ret

0000731c <normalize>:
    731c:	aa e0       	ldi	r26, 0x0A	; 10
    731e:	b0 e0       	ldi	r27, 0x00	; 0
    7320:	e4 e9       	ldi	r30, 0x94	; 148
    7322:	f9 e3       	ldi	r31, 0x39	; 57
    7324:	0c 94 c8 e3 	jmp	0x1c790	; 0x1c790 <__prologue_saves__>
    7328:	7c 01       	movw	r14, r24
    732a:	7a 87       	std	Y+10, r23	; 0x0a
    732c:	69 87       	std	Y+9, r22	; 0x09
    732e:	f7 01       	movw	r30, r14
    7330:	80 81       	ld	r24, Z
    7332:	91 81       	ldd	r25, Z+1	; 0x01
    7334:	8c 33       	cpi	r24, 0x3C	; 60
    7336:	91 05       	cpc	r25, r1
    7338:	5c f0       	brlt	.+22     	; 0x7350 <normalize+0x34>
    733a:	f7 01       	movw	r30, r14
    733c:	22 81       	ldd	r18, Z+2	; 0x02
    733e:	33 81       	ldd	r19, Z+3	; 0x03
    7340:	2f 5f       	subi	r18, 0xFF	; 255
    7342:	3f 4f       	sbci	r19, 0xFF	; 255
    7344:	33 83       	std	Z+3, r19	; 0x03
    7346:	22 83       	std	Z+2, r18	; 0x02
    7348:	cc 97       	sbiw	r24, 0x3c	; 60
    734a:	91 83       	std	Z+1, r25	; 0x01
    734c:	80 83       	st	Z, r24
    734e:	ef cf       	rjmp	.-34     	; 0x732e <normalize+0x12>
    7350:	f7 01       	movw	r30, r14
    7352:	01 90       	ld	r0, Z+
    7354:	f0 81       	ld	r31, Z
    7356:	e0 2d       	mov	r30, r0
    7358:	fe 83       	std	Y+6, r31	; 0x06
    735a:	ed 83       	std	Y+5, r30	; 0x05
    735c:	f7 ff       	sbrs	r31, 7
    735e:	0d c0       	rjmp	.+26     	; 0x737a <normalize+0x5e>
    7360:	f7 01       	movw	r30, r14
    7362:	82 81       	ldd	r24, Z+2	; 0x02
    7364:	93 81       	ldd	r25, Z+3	; 0x03
    7366:	01 97       	sbiw	r24, 0x01	; 1
    7368:	93 83       	std	Z+3, r25	; 0x03
    736a:	82 83       	std	Z+2, r24	; 0x02
    736c:	6d 81       	ldd	r22, Y+5	; 0x05
    736e:	7e 81       	ldd	r23, Y+6	; 0x06
    7370:	64 5c       	subi	r22, 0xC4	; 196
    7372:	7f 4f       	sbci	r23, 0xFF	; 255
    7374:	71 83       	std	Z+1, r23	; 0x01
    7376:	60 83       	st	Z, r22
    7378:	eb cf       	rjmp	.-42     	; 0x7350 <normalize+0x34>
    737a:	f7 01       	movw	r30, r14
    737c:	82 81       	ldd	r24, Z+2	; 0x02
    737e:	93 81       	ldd	r25, Z+3	; 0x03
    7380:	8c 33       	cpi	r24, 0x3C	; 60
    7382:	91 05       	cpc	r25, r1
    7384:	5c f0       	brlt	.+22     	; 0x739c <normalize+0x80>
    7386:	f7 01       	movw	r30, r14
    7388:	24 81       	ldd	r18, Z+4	; 0x04
    738a:	35 81       	ldd	r19, Z+5	; 0x05
    738c:	2f 5f       	subi	r18, 0xFF	; 255
    738e:	3f 4f       	sbci	r19, 0xFF	; 255
    7390:	35 83       	std	Z+5, r19	; 0x05
    7392:	24 83       	std	Z+4, r18	; 0x04
    7394:	cc 97       	sbiw	r24, 0x3c	; 60
    7396:	93 83       	std	Z+3, r25	; 0x03
    7398:	82 83       	std	Z+2, r24	; 0x02
    739a:	ef cf       	rjmp	.-34     	; 0x737a <normalize+0x5e>
    739c:	f7 01       	movw	r30, r14
    739e:	22 80       	ldd	r2, Z+2	; 0x02
    73a0:	33 80       	ldd	r3, Z+3	; 0x03
    73a2:	37 fe       	sbrs	r3, 7
    73a4:	0d c0       	rjmp	.+26     	; 0x73c0 <normalize+0xa4>
    73a6:	f7 01       	movw	r30, r14
    73a8:	84 81       	ldd	r24, Z+4	; 0x04
    73aa:	95 81       	ldd	r25, Z+5	; 0x05
    73ac:	01 97       	sbiw	r24, 0x01	; 1
    73ae:	95 83       	std	Z+5, r25	; 0x05
    73b0:	84 83       	std	Z+4, r24	; 0x04
    73b2:	fc e3       	ldi	r31, 0x3C	; 60
    73b4:	2f 0e       	add	r2, r31
    73b6:	31 1c       	adc	r3, r1
    73b8:	f7 01       	movw	r30, r14
    73ba:	33 82       	std	Z+3, r3	; 0x03
    73bc:	22 82       	std	Z+2, r2	; 0x02
    73be:	ee cf       	rjmp	.-36     	; 0x739c <normalize+0x80>
    73c0:	f7 01       	movw	r30, r14
    73c2:	84 81       	ldd	r24, Z+4	; 0x04
    73c4:	95 81       	ldd	r25, Z+5	; 0x05
    73c6:	88 31       	cpi	r24, 0x18	; 24
    73c8:	91 05       	cpc	r25, r1
    73ca:	5c f0       	brlt	.+22     	; 0x73e2 <normalize+0xc6>
    73cc:	f7 01       	movw	r30, r14
    73ce:	26 81       	ldd	r18, Z+6	; 0x06
    73d0:	37 81       	ldd	r19, Z+7	; 0x07
    73d2:	2f 5f       	subi	r18, 0xFF	; 255
    73d4:	3f 4f       	sbci	r19, 0xFF	; 255
    73d6:	37 83       	std	Z+7, r19	; 0x07
    73d8:	26 83       	std	Z+6, r18	; 0x06
    73da:	48 97       	sbiw	r24, 0x18	; 24
    73dc:	95 83       	std	Z+5, r25	; 0x05
    73de:	84 83       	std	Z+4, r24	; 0x04
    73e0:	ef cf       	rjmp	.-34     	; 0x73c0 <normalize+0xa4>
    73e2:	f7 01       	movw	r30, r14
    73e4:	04 81       	ldd	r16, Z+4	; 0x04
    73e6:	15 81       	ldd	r17, Z+5	; 0x05
    73e8:	17 ff       	sbrs	r17, 7
    73ea:	0b c0       	rjmp	.+22     	; 0x7402 <normalize+0xe6>
    73ec:	f7 01       	movw	r30, r14
    73ee:	86 81       	ldd	r24, Z+6	; 0x06
    73f0:	97 81       	ldd	r25, Z+7	; 0x07
    73f2:	01 97       	sbiw	r24, 0x01	; 1
    73f4:	97 83       	std	Z+7, r25	; 0x07
    73f6:	86 83       	std	Z+6, r24	; 0x06
    73f8:	08 5e       	subi	r16, 0xE8	; 232
    73fa:	1f 4f       	sbci	r17, 0xFF	; 255
    73fc:	15 83       	std	Z+5, r17	; 0x05
    73fe:	04 83       	std	Z+4, r16	; 0x04
    7400:	f0 cf       	rjmp	.-32     	; 0x73e2 <normalize+0xc6>
    7402:	f7 01       	movw	r30, r14
    7404:	80 85       	ldd	r24, Z+8	; 0x08
    7406:	91 85       	ldd	r25, Z+9	; 0x09
    7408:	8c 30       	cpi	r24, 0x0C	; 12
    740a:	91 05       	cpc	r25, r1
    740c:	5c f0       	brlt	.+22     	; 0x7424 <normalize+0x108>
    740e:	f7 01       	movw	r30, r14
    7410:	22 85       	ldd	r18, Z+10	; 0x0a
    7412:	33 85       	ldd	r19, Z+11	; 0x0b
    7414:	2f 5f       	subi	r18, 0xFF	; 255
    7416:	3f 4f       	sbci	r19, 0xFF	; 255
    7418:	33 87       	std	Z+11, r19	; 0x0b
    741a:	22 87       	std	Z+10, r18	; 0x0a
    741c:	0c 97       	sbiw	r24, 0x0c	; 12
    741e:	91 87       	std	Z+9, r25	; 0x09
    7420:	80 87       	std	Z+8, r24	; 0x08
    7422:	ef cf       	rjmp	.-34     	; 0x7402 <normalize+0xe6>
    7424:	f7 01       	movw	r30, r14
    7426:	80 85       	ldd	r24, Z+8	; 0x08
    7428:	91 85       	ldd	r25, Z+9	; 0x09
    742a:	97 ff       	sbrs	r25, 7
    742c:	2d c0       	rjmp	.+90     	; 0x7488 <normalize+0x16c>
    742e:	f7 01       	movw	r30, r14
    7430:	22 85       	ldd	r18, Z+10	; 0x0a
    7432:	33 85       	ldd	r19, Z+11	; 0x0b
    7434:	21 50       	subi	r18, 0x01	; 1
    7436:	31 09       	sbc	r19, r1
    7438:	33 87       	std	Z+11, r19	; 0x0b
    743a:	22 87       	std	Z+10, r18	; 0x0a
    743c:	0c 96       	adiw	r24, 0x0c	; 12
    743e:	91 87       	std	Z+9, r25	; 0x09
    7440:	80 87       	std	Z+8, r24	; 0x08
    7442:	f0 cf       	rjmp	.-32     	; 0x7424 <normalize+0x108>
    7444:	f7 01       	movw	r30, r14
    7446:	c6 80       	ldd	r12, Z+6	; 0x06
    7448:	d7 80       	ldd	r13, Z+7	; 0x07
    744a:	a0 84       	ldd	r10, Z+8	; 0x08
    744c:	b1 84       	ldd	r11, Z+9	; 0x09
    744e:	b4 01       	movw	r22, r8
    7450:	c5 01       	movw	r24, r10
    7452:	59 dd       	rcall	.-1358   	; 0x6f06 <Days_Per_Month>
    7454:	8c 15       	cp	r24, r12
    7456:	9d 05       	cpc	r25, r13
    7458:	84 f5       	brge	.+96     	; 0x74ba <normalize+0x19e>
    745a:	c8 1a       	sub	r12, r24
    745c:	d9 0a       	sbc	r13, r25
    745e:	f7 01       	movw	r30, r14
    7460:	d7 82       	std	Z+7, r13	; 0x07
    7462:	c6 82       	std	Z+6, r12	; 0x06
    7464:	c5 01       	movw	r24, r10
    7466:	01 96       	adiw	r24, 0x01	; 1
    7468:	91 87       	std	Z+9, r25	; 0x09
    746a:	80 87       	std	Z+8, r24	; 0x08
    746c:	0c 97       	sbiw	r24, 0x0c	; 12
    746e:	54 f3       	brlt	.-44     	; 0x7444 <normalize+0x128>
    7470:	fb e0       	ldi	r31, 0x0B	; 11
    7472:	af 1a       	sub	r10, r31
    7474:	b1 08       	sbc	r11, r1
    7476:	f7 01       	movw	r30, r14
    7478:	b1 86       	std	Z+9, r11	; 0x09
    747a:	a0 86       	std	Z+8, r10	; 0x08
    747c:	ff ef       	ldi	r31, 0xFF	; 255
    747e:	8f 1a       	sub	r8, r31
    7480:	9f 0a       	sbc	r9, r31
    7482:	f7 01       	movw	r30, r14
    7484:	93 86       	std	Z+11, r9	; 0x0b
    7486:	82 86       	std	Z+10, r8	; 0x0a
    7488:	f7 01       	movw	r30, r14
    748a:	82 84       	ldd	r8, Z+10	; 0x0a
    748c:	93 84       	ldd	r9, Z+11	; 0x0b
    748e:	da cf       	rjmp	.-76     	; 0x7444 <normalize+0x128>
    7490:	f7 01       	movw	r30, r14
    7492:	80 85       	ldd	r24, Z+8	; 0x08
    7494:	91 85       	ldd	r25, Z+9	; 0x09
    7496:	9c 01       	movw	r18, r24
    7498:	21 50       	subi	r18, 0x01	; 1
    749a:	31 09       	sbc	r19, r1
    749c:	37 fd       	sbrc	r19, 7
    749e:	16 c0       	rjmp	.+44     	; 0x74cc <normalize+0x1b0>
    74a0:	31 87       	std	Z+9, r19	; 0x09
    74a2:	20 87       	std	Z+8, r18	; 0x08
    74a4:	f7 01       	movw	r30, r14
    74a6:	62 85       	ldd	r22, Z+10	; 0x0a
    74a8:	73 85       	ldd	r23, Z+11	; 0x0b
    74aa:	80 85       	ldd	r24, Z+8	; 0x08
    74ac:	91 85       	ldd	r25, Z+9	; 0x09
    74ae:	2b dd       	rcall	.-1450   	; 0x6f06 <Days_Per_Month>
    74b0:	88 0d       	add	r24, r8
    74b2:	99 1d       	adc	r25, r9
    74b4:	f7 01       	movw	r30, r14
    74b6:	97 83       	std	Z+7, r25	; 0x07
    74b8:	86 83       	std	Z+6, r24	; 0x06
    74ba:	f7 01       	movw	r30, r14
    74bc:	86 80       	ldd	r8, Z+6	; 0x06
    74be:	97 80       	ldd	r9, Z+7	; 0x07
    74c0:	a2 84       	ldd	r10, Z+10	; 0x0a
    74c2:	b3 84       	ldd	r11, Z+11	; 0x0b
    74c4:	18 14       	cp	r1, r8
    74c6:	19 04       	cpc	r1, r9
    74c8:	1c f7       	brge	.-58     	; 0x7490 <normalize+0x174>
    74ca:	0b c0       	rjmp	.+22     	; 0x74e2 <normalize+0x1c6>
    74cc:	0b 96       	adiw	r24, 0x0b	; 11
    74ce:	f7 01       	movw	r30, r14
    74d0:	91 87       	std	Z+9, r25	; 0x09
    74d2:	80 87       	std	Z+8, r24	; 0x08
    74d4:	f1 e0       	ldi	r31, 0x01	; 1
    74d6:	af 1a       	sub	r10, r31
    74d8:	b1 08       	sbc	r11, r1
    74da:	f7 01       	movw	r30, r14
    74dc:	b3 86       	std	Z+11, r11	; 0x0b
    74de:	a2 86       	std	Z+10, r10	; 0x0a
    74e0:	e1 cf       	rjmp	.-62     	; 0x74a4 <normalize+0x188>
    74e2:	a5 01       	movw	r20, r10
    74e4:	44 59       	subi	r20, 0x94	; 148
    74e6:	58 4f       	sbci	r21, 0xF8	; 248
    74e8:	58 87       	std	Y+8, r21	; 0x08
    74ea:	4f 83       	std	Y+7, r20	; 0x07
    74ec:	35 01       	movw	r6, r10
    74ee:	56 e4       	ldi	r21, 0x46	; 70
    74f0:	65 1a       	sub	r6, r21
    74f2:	71 08       	sbc	r7, r1
    74f4:	89 e8       	ldi	r24, 0x89	; 137
    74f6:	68 16       	cp	r6, r24
    74f8:	71 04       	cpc	r7, r1
    74fa:	08 f0       	brcs	.+2      	; 0x74fe <normalize+0x1e2>
    74fc:	9b c0       	rjmp	.+310    	; 0x7634 <normalize+0x318>
    74fe:	c0 84       	ldd	r12, Z+8	; 0x08
    7500:	d1 84       	ldd	r13, Z+9	; 0x09
    7502:	9c e0       	ldi	r25, 0x0C	; 12
    7504:	c9 16       	cp	r12, r25
    7506:	d1 04       	cpc	r13, r1
    7508:	08 f0       	brcs	.+2      	; 0x750c <normalize+0x1f0>
    750a:	94 c0       	rjmp	.+296    	; 0x7634 <normalize+0x318>
    750c:	24 01       	movw	r4, r8
    750e:	e1 e0       	ldi	r30, 0x01	; 1
    7510:	4e 1a       	sub	r4, r30
    7512:	51 08       	sbc	r5, r1
    7514:	6f 81       	ldd	r22, Y+7	; 0x07
    7516:	78 85       	ldd	r23, Y+8	; 0x08
    7518:	c6 01       	movw	r24, r12
    751a:	f5 dc       	rcall	.-1558   	; 0x6f06 <Days_Per_Month>
    751c:	48 16       	cp	r4, r24
    751e:	59 06       	cpc	r5, r25
    7520:	0c f0       	brlt	.+2      	; 0x7524 <normalize+0x208>
    7522:	88 c0       	rjmp	.+272    	; 0x7634 <normalize+0x318>
    7524:	08 31       	cpi	r16, 0x18	; 24
    7526:	11 05       	cpc	r17, r1
    7528:	0c f0       	brlt	.+2      	; 0x752c <normalize+0x210>
    752a:	84 c0       	rjmp	.+264    	; 0x7634 <normalize+0x318>
    752c:	fc e3       	ldi	r31, 0x3C	; 60
    752e:	2f 16       	cp	r2, r31
    7530:	31 04       	cpc	r3, r1
    7532:	0c f0       	brlt	.+2      	; 0x7536 <normalize+0x21a>
    7534:	7f c0       	rjmp	.+254    	; 0x7634 <normalize+0x318>
    7536:	4d 81       	ldd	r20, Y+5	; 0x05
    7538:	5e 81       	ldd	r21, Y+6	; 0x06
    753a:	4c 33       	cpi	r20, 0x3C	; 60
    753c:	51 05       	cpc	r21, r1
    753e:	0c f0       	brlt	.+2      	; 0x7542 <normalize+0x226>
    7540:	79 c0       	rjmp	.+242    	; 0x7634 <normalize+0x318>
    7542:	2d e6       	ldi	r18, 0x6D	; 109
    7544:	31 e0       	ldi	r19, 0x01	; 1
    7546:	d3 01       	movw	r26, r6
    7548:	0e 94 a2 e3 	call	0x1c744	; 0x1c744 <__usmulhisi3>
    754c:	f6 01       	movw	r30, r12
    754e:	ee 0f       	add	r30, r30
    7550:	ff 1f       	adc	r31, r31
    7552:	e0 54       	subi	r30, 0x40	; 64
    7554:	fd 4f       	sbci	r31, 0xFD	; 253
    7556:	20 81       	ld	r18, Z
    7558:	31 81       	ldd	r19, Z+1	; 0x01
    755a:	dc 01       	movw	r26, r24
    755c:	cb 01       	movw	r24, r22
    755e:	82 0f       	add	r24, r18
    7560:	93 1f       	adc	r25, r19
    7562:	a1 1d       	adc	r26, r1
    7564:	b1 1d       	adc	r27, r1
    7566:	05 2c       	mov	r0, r5
    7568:	00 0c       	add	r0, r0
    756a:	66 08       	sbc	r6, r6
    756c:	77 08       	sbc	r7, r7
    756e:	48 0e       	add	r4, r24
    7570:	59 1e       	adc	r5, r25
    7572:	6a 1e       	adc	r6, r26
    7574:	7b 1e       	adc	r7, r27
    7576:	1a 14       	cp	r1, r10
    7578:	1b 04       	cpc	r1, r11
    757a:	1c f4       	brge	.+6      	; 0x7582 <normalize+0x266>
    757c:	51 e0       	ldi	r21, 0x01	; 1
    757e:	a5 1a       	sub	r10, r21
    7580:	b1 08       	sbc	r11, r1
    7582:	45 01       	movw	r8, r10
    7584:	95 94       	asr	r9
    7586:	87 94       	ror	r8
    7588:	95 94       	asr	r9
    758a:	87 94       	ror	r8
    758c:	88 ec       	ldi	r24, 0xC8	; 200
    758e:	a8 16       	cp	r10, r24
    7590:	b1 04       	cpc	r11, r1
    7592:	1c f0       	brlt	.+6      	; 0x759a <normalize+0x27e>
    7594:	91 e0       	ldi	r25, 0x01	; 1
    7596:	89 1a       	sub	r8, r25
    7598:	91 08       	sbc	r9, r1
    759a:	09 2c       	mov	r0, r9
    759c:	00 0c       	add	r0, r0
    759e:	aa 08       	sbc	r10, r10
    75a0:	bb 08       	sbc	r11, r11
    75a2:	84 0c       	add	r8, r4
    75a4:	95 1c       	adc	r9, r5
    75a6:	a6 1c       	adc	r10, r6
    75a8:	b7 1c       	adc	r11, r7
    75aa:	24 01       	movw	r4, r8
    75ac:	35 01       	movw	r6, r10
    75ae:	e1 e1       	ldi	r30, 0x11	; 17
    75b0:	4e 1a       	sub	r4, r30
    75b2:	51 08       	sbc	r5, r1
    75b4:	61 08       	sbc	r6, r1
    75b6:	71 08       	sbc	r7, r1
    75b8:	f2 e0       	ldi	r31, 0x02	; 2
    75ba:	cf 16       	cp	r12, r31
    75bc:	d1 04       	cpc	r13, r1
    75be:	64 f0       	brlt	.+24     	; 0x75d8 <normalize+0x2bc>
    75c0:	8f 81       	ldd	r24, Y+7	; 0x07
    75c2:	98 85       	ldd	r25, Y+8	; 0x08
    75c4:	7b dc       	rcall	.-1802   	; 0x6ebc <IS_Leap>
    75c6:	89 2b       	or	r24, r25
    75c8:	39 f0       	breq	.+14     	; 0x75d8 <normalize+0x2bc>
    75ca:	24 01       	movw	r4, r8
    75cc:	35 01       	movw	r6, r10
    75ce:	40 e1       	ldi	r20, 0x10	; 16
    75d0:	44 1a       	sub	r4, r20
    75d2:	51 08       	sbc	r5, r1
    75d4:	61 08       	sbc	r6, r1
    75d6:	71 08       	sbc	r7, r1
    75d8:	a8 e1       	ldi	r26, 0x18	; 24
    75da:	b0 e0       	ldi	r27, 0x00	; 0
    75dc:	a3 01       	movw	r20, r6
    75de:	92 01       	movw	r18, r4
    75e0:	0e 94 a8 e3 	call	0x1c750	; 0x1c750 <__muluhisi3>
    75e4:	01 2e       	mov	r0, r17
    75e6:	00 0c       	add	r0, r0
    75e8:	22 0b       	sbc	r18, r18
    75ea:	33 0b       	sbc	r19, r19
    75ec:	a9 01       	movw	r20, r18
    75ee:	98 01       	movw	r18, r16
    75f0:	26 0f       	add	r18, r22
    75f2:	37 1f       	adc	r19, r23
    75f4:	48 1f       	adc	r20, r24
    75f6:	59 1f       	adc	r21, r25
    75f8:	ac e3       	ldi	r26, 0x3C	; 60
    75fa:	b0 e0       	ldi	r27, 0x00	; 0
    75fc:	0e 94 a8 e3 	call	0x1c750	; 0x1c750 <__muluhisi3>
    7600:	81 01       	movw	r16, r2
    7602:	03 2c       	mov	r0, r3
    7604:	00 0c       	add	r0, r0
    7606:	22 0b       	sbc	r18, r18
    7608:	33 0b       	sbc	r19, r19
    760a:	a9 01       	movw	r20, r18
    760c:	98 01       	movw	r18, r16
    760e:	26 0f       	add	r18, r22
    7610:	37 1f       	adc	r19, r23
    7612:	48 1f       	adc	r20, r24
    7614:	59 1f       	adc	r21, r25
    7616:	0e 94 a8 e3 	call	0x1c750	; 0x1c750 <__muluhisi3>
    761a:	ed 81       	ldd	r30, Y+5	; 0x05
    761c:	fe 81       	ldd	r31, Y+6	; 0x06
    761e:	8f 01       	movw	r16, r30
    7620:	ff 0f       	add	r31, r31
    7622:	22 0b       	sbc	r18, r18
    7624:	33 0b       	sbc	r19, r19
    7626:	48 01       	movw	r8, r16
    7628:	59 01       	movw	r10, r18
    762a:	86 0e       	add	r8, r22
    762c:	97 1e       	adc	r9, r23
    762e:	a8 1e       	adc	r10, r24
    7630:	b9 1e       	adc	r11, r25
    7632:	04 c0       	rjmp	.+8      	; 0x763c <normalize+0x320>
    7634:	88 24       	eor	r8, r8
    7636:	8a 94       	dec	r8
    7638:	98 2c       	mov	r9, r8
    763a:	54 01       	movw	r10, r8
    763c:	49 85       	ldd	r20, Y+9	; 0x09
    763e:	5a 85       	ldd	r21, Y+10	; 0x0a
    7640:	45 2b       	or	r20, r21
    7642:	e9 f0       	breq	.+58     	; 0x767e <normalize+0x362>
    7644:	ce 01       	movw	r24, r28
    7646:	01 96       	adiw	r24, 0x01	; 1
    7648:	7d dd       	rcall	.-1286   	; 0x7144 <gettimezone>
    764a:	a9 81       	ldd	r26, Y+1	; 0x01
    764c:	ba 81       	ldd	r27, Y+2	; 0x02
    764e:	2c e3       	ldi	r18, 0x3C	; 60
    7650:	30 e0       	ldi	r19, 0x00	; 0
    7652:	0e 94 a2 e3 	call	0x1c744	; 0x1c744 <__usmulhisi3>
    7656:	2b 01       	movw	r4, r22
    7658:	3c 01       	movw	r6, r24
    765a:	c5 01       	movw	r24, r10
    765c:	b4 01       	movw	r22, r8
    765e:	e2 dd       	rcall	.-1084   	; 0x7224 <is_dst>
    7660:	89 2b       	or	r24, r25
    7662:	51 f0       	breq	.+20     	; 0x7678 <normalize+0x35c>
    7664:	50 e1       	ldi	r21, 0x10	; 16
    7666:	45 1a       	sub	r4, r21
    7668:	5e e0       	ldi	r21, 0x0E	; 14
    766a:	55 0a       	sbc	r5, r21
    766c:	61 08       	sbc	r6, r1
    766e:	71 08       	sbc	r7, r1
    7670:	cc 24       	eor	r12, r12
    7672:	c3 94       	inc	r12
    7674:	d1 2c       	mov	r13, r1
    7676:	08 c0       	rjmp	.+16     	; 0x7688 <normalize+0x36c>
    7678:	c1 2c       	mov	r12, r1
    767a:	d1 2c       	mov	r13, r1
    767c:	05 c0       	rjmp	.+10     	; 0x7688 <normalize+0x36c>
    767e:	c1 2c       	mov	r12, r1
    7680:	d1 2c       	mov	r13, r1
    7682:	41 2c       	mov	r4, r1
    7684:	51 2c       	mov	r5, r1
    7686:	32 01       	movw	r6, r4
    7688:	87 01       	movw	r16, r14
    768a:	a3 01       	movw	r20, r6
    768c:	92 01       	movw	r18, r4
    768e:	c5 01       	movw	r24, r10
    7690:	b4 01       	movw	r22, r8
    7692:	5a dc       	rcall	.-1868   	; 0x6f48 <time_to_tm>
    7694:	c1 14       	cp	r12, r1
    7696:	d1 04       	cpc	r13, r1
    7698:	29 f0       	breq	.+10     	; 0x76a4 <normalize+0x388>
    769a:	21 e0       	ldi	r18, 0x01	; 1
    769c:	30 e0       	ldi	r19, 0x00	; 0
    769e:	f7 01       	movw	r30, r14
    76a0:	31 8b       	std	Z+17, r19	; 0x11
    76a2:	20 8b       	std	Z+16, r18	; 0x10
    76a4:	2a 96       	adiw	r28, 0x0a	; 10
    76a6:	e2 e1       	ldi	r30, 0x12	; 18
    76a8:	0c 94 e4 e3 	jmp	0x1c7c8	; 0x1c7c8 <__epilogue_restores__>

000076ac <timegm>:
    76ac:	60 e0       	ldi	r22, 0x00	; 0
    76ae:	70 e0       	ldi	r23, 0x00	; 0
    76b0:	35 ce       	rjmp	.-918    	; 0x731c <normalize>
    76b2:	08 95       	ret

000076b4 <setdate_r>:
    76b4:	cf 92       	push	r12
    76b6:	df 92       	push	r13
    76b8:	ef 92       	push	r14
    76ba:	ff 92       	push	r15
    76bc:	cf 93       	push	r28
    76be:	df 93       	push	r29
    76c0:	cd b7       	in	r28, 0x3d	; 61
    76c2:	de b7       	in	r29, 0x3e	; 62
    76c4:	a5 97       	sbiw	r28, 0x25	; 37
    76c6:	0f b6       	in	r0, 0x3f	; 63
    76c8:	f8 94       	cli
    76ca:	de bf       	out	0x3e, r29	; 62
    76cc:	0f be       	out	0x3f, r0	; 63
    76ce:	cd bf       	out	0x3d, r28	; 61
    76d0:	9d a3       	std	Y+37, r25	; 0x25
    76d2:	8c a3       	std	Y+36, r24	; 0x24
    76d4:	1f 82       	std	Y+7, r1	; 0x07
    76d6:	1e 82       	std	Y+6, r1	; 0x06
    76d8:	19 86       	std	Y+9, r1	; 0x09
    76da:	18 86       	std	Y+8, r1	; 0x08
    76dc:	1b 86       	std	Y+11, r1	; 0x0b
    76de:	1a 86       	std	Y+10, r1	; 0x0a
    76e0:	1d 86       	std	Y+13, r1	; 0x0d
    76e2:	1c 86       	std	Y+12, r1	; 0x0c
    76e4:	1f 86       	std	Y+15, r1	; 0x0f
    76e6:	1e 86       	std	Y+14, r1	; 0x0e
    76e8:	19 8a       	std	Y+17, r1	; 0x11
    76ea:	18 8a       	std	Y+16, r1	; 0x10
    76ec:	8c a1       	ldd	r24, Y+36	; 0x24
    76ee:	9d a1       	ldd	r25, Y+37	; 0x25
    76f0:	fc 01       	movw	r30, r24
    76f2:	20 81       	ld	r18, Z
    76f4:	20 32       	cpi	r18, 0x20	; 32
    76f6:	21 f4       	brne	.+8      	; 0x7700 <setdate_r+0x4c>
    76f8:	01 96       	adiw	r24, 0x01	; 1
    76fa:	9d a3       	std	Y+37, r25	; 0x25
    76fc:	8c a3       	std	Y+36, r24	; 0x24
    76fe:	f6 cf       	rjmp	.-20     	; 0x76ec <setdate_r+0x38>
    7700:	4a e0       	ldi	r20, 0x0A	; 10
    7702:	50 e0       	ldi	r21, 0x00	; 0
    7704:	be 01       	movw	r22, r28
    7706:	6c 5d       	subi	r22, 0xDC	; 220
    7708:	7f 4f       	sbci	r23, 0xFF	; 255
    770a:	0e 94 73 47 	call	0x8ee6	; 0x8ee6 <strtol>
    770e:	79 8b       	std	Y+17, r23	; 0x11
    7710:	68 8b       	std	Y+16, r22	; 0x10
    7712:	8c a1       	ldd	r24, Y+36	; 0x24
    7714:	9d a1       	ldd	r25, Y+37	; 0x25
    7716:	fc 01       	movw	r30, r24
    7718:	20 81       	ld	r18, Z
    771a:	20 32       	cpi	r18, 0x20	; 32
    771c:	21 f4       	brne	.+8      	; 0x7726 <setdate_r+0x72>
    771e:	01 96       	adiw	r24, 0x01	; 1
    7720:	9d a3       	std	Y+37, r25	; 0x25
    7722:	8c a3       	std	Y+36, r24	; 0x24
    7724:	f6 cf       	rjmp	.-20     	; 0x7712 <setdate_r+0x5e>
    7726:	4a e0       	ldi	r20, 0x0A	; 10
    7728:	50 e0       	ldi	r21, 0x00	; 0
    772a:	be 01       	movw	r22, r28
    772c:	6c 5d       	subi	r22, 0xDC	; 220
    772e:	7f 4f       	sbci	r23, 0xFF	; 255
    7730:	0e 94 73 47 	call	0x8ee6	; 0x8ee6 <strtol>
    7734:	7f 87       	std	Y+15, r23	; 0x0f
    7736:	6e 87       	std	Y+14, r22	; 0x0e
    7738:	8c a1       	ldd	r24, Y+36	; 0x24
    773a:	9d a1       	ldd	r25, Y+37	; 0x25
    773c:	fc 01       	movw	r30, r24
    773e:	20 81       	ld	r18, Z
    7740:	20 32       	cpi	r18, 0x20	; 32
    7742:	21 f4       	brne	.+8      	; 0x774c <setdate_r+0x98>
    7744:	01 96       	adiw	r24, 0x01	; 1
    7746:	9d a3       	std	Y+37, r25	; 0x25
    7748:	8c a3       	std	Y+36, r24	; 0x24
    774a:	f6 cf       	rjmp	.-20     	; 0x7738 <setdate_r+0x84>
    774c:	4a e0       	ldi	r20, 0x0A	; 10
    774e:	50 e0       	ldi	r21, 0x00	; 0
    7750:	be 01       	movw	r22, r28
    7752:	6c 5d       	subi	r22, 0xDC	; 220
    7754:	7f 4f       	sbci	r23, 0xFF	; 255
    7756:	0e 94 73 47 	call	0x8ee6	; 0x8ee6 <strtol>
    775a:	7d 87       	std	Y+13, r23	; 0x0d
    775c:	6c 87       	std	Y+12, r22	; 0x0c
    775e:	8c a1       	ldd	r24, Y+36	; 0x24
    7760:	9d a1       	ldd	r25, Y+37	; 0x25
    7762:	fc 01       	movw	r30, r24
    7764:	20 81       	ld	r18, Z
    7766:	20 32       	cpi	r18, 0x20	; 32
    7768:	21 f4       	brne	.+8      	; 0x7772 <setdate_r+0xbe>
    776a:	01 96       	adiw	r24, 0x01	; 1
    776c:	9d a3       	std	Y+37, r25	; 0x25
    776e:	8c a3       	std	Y+36, r24	; 0x24
    7770:	f6 cf       	rjmp	.-20     	; 0x775e <setdate_r+0xaa>
    7772:	4a e0       	ldi	r20, 0x0A	; 10
    7774:	50 e0       	ldi	r21, 0x00	; 0
    7776:	be 01       	movw	r22, r28
    7778:	6c 5d       	subi	r22, 0xDC	; 220
    777a:	7f 4f       	sbci	r23, 0xFF	; 255
    777c:	0e 94 73 47 	call	0x8ee6	; 0x8ee6 <strtol>
    7780:	7b 87       	std	Y+11, r23	; 0x0b
    7782:	6a 87       	std	Y+10, r22	; 0x0a
    7784:	ec a1       	ldd	r30, Y+36	; 0x24
    7786:	fd a1       	ldd	r31, Y+37	; 0x25
    7788:	80 81       	ld	r24, Z
    778a:	88 23       	and	r24, r24
    778c:	39 f0       	breq	.+14     	; 0x779c <setdate_r+0xe8>
    778e:	80 32       	cpi	r24, 0x20	; 32
    7790:	11 f0       	breq	.+4      	; 0x7796 <setdate_r+0xe2>
    7792:	8a 33       	cpi	r24, 0x3A	; 58
    7794:	19 f4       	brne	.+6      	; 0x779c <setdate_r+0xe8>
    7796:	31 96       	adiw	r30, 0x01	; 1
    7798:	fd a3       	std	Y+37, r31	; 0x25
    779a:	ec a3       	std	Y+36, r30	; 0x24
    779c:	4a e0       	ldi	r20, 0x0A	; 10
    779e:	50 e0       	ldi	r21, 0x00	; 0
    77a0:	be 01       	movw	r22, r28
    77a2:	6c 5d       	subi	r22, 0xDC	; 220
    77a4:	7f 4f       	sbci	r23, 0xFF	; 255
    77a6:	8c a1       	ldd	r24, Y+36	; 0x24
    77a8:	9d a1       	ldd	r25, Y+37	; 0x25
    77aa:	0e 94 73 47 	call	0x8ee6	; 0x8ee6 <strtol>
    77ae:	79 87       	std	Y+9, r23	; 0x09
    77b0:	68 87       	std	Y+8, r22	; 0x08
    77b2:	ec a1       	ldd	r30, Y+36	; 0x24
    77b4:	fd a1       	ldd	r31, Y+37	; 0x25
    77b6:	80 81       	ld	r24, Z
    77b8:	88 23       	and	r24, r24
    77ba:	39 f0       	breq	.+14     	; 0x77ca <setdate_r+0x116>
    77bc:	80 32       	cpi	r24, 0x20	; 32
    77be:	11 f0       	breq	.+4      	; 0x77c4 <setdate_r+0x110>
    77c0:	8a 33       	cpi	r24, 0x3A	; 58
    77c2:	19 f4       	brne	.+6      	; 0x77ca <setdate_r+0x116>
    77c4:	31 96       	adiw	r30, 0x01	; 1
    77c6:	fd a3       	std	Y+37, r31	; 0x25
    77c8:	ec a3       	std	Y+36, r30	; 0x24
    77ca:	4a e0       	ldi	r20, 0x0A	; 10
    77cc:	50 e0       	ldi	r21, 0x00	; 0
    77ce:	be 01       	movw	r22, r28
    77d0:	6c 5d       	subi	r22, 0xDC	; 220
    77d2:	7f 4f       	sbci	r23, 0xFF	; 255
    77d4:	8c a1       	ldd	r24, Y+36	; 0x24
    77d6:	9d a1       	ldd	r25, Y+37	; 0x25
    77d8:	0e 94 73 47 	call	0x8ee6	; 0x8ee6 <strtol>
    77dc:	7f 83       	std	Y+7, r23	; 0x07
    77de:	6e 83       	std	Y+6, r22	; 0x06
    77e0:	2e 85       	ldd	r18, Y+14	; 0x0e
    77e2:	3f 85       	ldd	r19, Y+15	; 0x0f
    77e4:	21 50       	subi	r18, 0x01	; 1
    77e6:	31 09       	sbc	r19, r1
    77e8:	3f 87       	std	Y+15, r19	; 0x0f
    77ea:	2e 87       	std	Y+14, r18	; 0x0e
    77ec:	88 89       	ldd	r24, Y+16	; 0x10
    77ee:	99 89       	ldd	r25, Y+17	; 0x11
    77f0:	ac 01       	movw	r20, r24
    77f2:	42 5b       	subi	r20, 0xB2	; 178
    77f4:	57 40       	sbci	r21, 0x07	; 7
    77f6:	45 34       	cpi	r20, 0x45	; 69
    77f8:	51 05       	cpc	r21, r1
    77fa:	38 f0       	brcs	.+14     	; 0x780a <setdate_r+0x156>
    77fc:	ed b7       	in	r30, 0x3d	; 61
    77fe:	fe b7       	in	r31, 0x3e	; 62
    7800:	95 83       	std	Z+5, r25	; 0x05
    7802:	84 83       	std	Z+4, r24	; 0x04
    7804:	80 ee       	ldi	r24, 0xE0	; 224
    7806:	96 e0       	ldi	r25, 0x06	; 6
    7808:	34 c0       	rjmp	.+104    	; 0x7872 <setdate_r+0x1be>
    780a:	8c 56       	subi	r24, 0x6C	; 108
    780c:	97 40       	sbci	r25, 0x07	; 7
    780e:	99 8b       	std	Y+17, r25	; 0x11
    7810:	88 8b       	std	Y+16, r24	; 0x10
    7812:	2c 30       	cpi	r18, 0x0C	; 12
    7814:	31 05       	cpc	r19, r1
    7816:	38 f0       	brcs	.+14     	; 0x7826 <setdate_r+0x172>
    7818:	ed b7       	in	r30, 0x3d	; 61
    781a:	fe b7       	in	r31, 0x3e	; 62
    781c:	95 83       	std	Z+5, r25	; 0x05
    781e:	84 83       	std	Z+4, r24	; 0x04
    7820:	8f ec       	ldi	r24, 0xCF	; 207
    7822:	96 e0       	ldi	r25, 0x06	; 6
    7824:	26 c0       	rjmp	.+76     	; 0x7872 <setdate_r+0x1be>
    7826:	8c 85       	ldd	r24, Y+12	; 0x0c
    7828:	9d 85       	ldd	r25, Y+13	; 0x0d
    782a:	9c 01       	movw	r18, r24
    782c:	21 50       	subi	r18, 0x01	; 1
    782e:	31 09       	sbc	r19, r1
    7830:	2f 31       	cpi	r18, 0x1F	; 31
    7832:	31 05       	cpc	r19, r1
    7834:	38 f0       	brcs	.+14     	; 0x7844 <setdate_r+0x190>
    7836:	ed b7       	in	r30, 0x3d	; 61
    7838:	fe b7       	in	r31, 0x3e	; 62
    783a:	95 83       	std	Z+5, r25	; 0x05
    783c:	84 83       	std	Z+4, r24	; 0x04
    783e:	8e eb       	ldi	r24, 0xBE	; 190
    7840:	96 e0       	ldi	r25, 0x06	; 6
    7842:	17 c0       	rjmp	.+46     	; 0x7872 <setdate_r+0x1be>
    7844:	8a 85       	ldd	r24, Y+10	; 0x0a
    7846:	9b 85       	ldd	r25, Y+11	; 0x0b
    7848:	88 31       	cpi	r24, 0x18	; 24
    784a:	91 05       	cpc	r25, r1
    784c:	38 f0       	brcs	.+14     	; 0x785c <setdate_r+0x1a8>
    784e:	ed b7       	in	r30, 0x3d	; 61
    7850:	fe b7       	in	r31, 0x3e	; 62
    7852:	95 83       	std	Z+5, r25	; 0x05
    7854:	84 83       	std	Z+4, r24	; 0x04
    7856:	8c ea       	ldi	r24, 0xAC	; 172
    7858:	96 e0       	ldi	r25, 0x06	; 6
    785a:	0b c0       	rjmp	.+22     	; 0x7872 <setdate_r+0x1be>
    785c:	88 85       	ldd	r24, Y+8	; 0x08
    785e:	99 85       	ldd	r25, Y+9	; 0x09
    7860:	8c 33       	cpi	r24, 0x3C	; 60
    7862:	91 05       	cpc	r25, r1
    7864:	68 f0       	brcs	.+26     	; 0x7880 <setdate_r+0x1cc>
    7866:	ed b7       	in	r30, 0x3d	; 61
    7868:	fe b7       	in	r31, 0x3e	; 62
    786a:	95 83       	std	Z+5, r25	; 0x05
    786c:	84 83       	std	Z+4, r24	; 0x04
    786e:	8b e9       	ldi	r24, 0x9B	; 155
    7870:	96 e0       	ldi	r25, 0x06	; 6
    7872:	a0 e0       	ldi	r26, 0x00	; 0
    7874:	81 83       	std	Z+1, r24	; 0x01
    7876:	92 83       	std	Z+2, r25	; 0x02
    7878:	a3 83       	std	Z+3, r26	; 0x03
    787a:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    787e:	25 c0       	rjmp	.+74     	; 0x78ca <setdate_r+0x216>
    7880:	ce 01       	movw	r24, r28
    7882:	06 96       	adiw	r24, 0x06	; 6
    7884:	13 df       	rcall	.-474    	; 0x76ac <timegm>
    7886:	6b 01       	movw	r12, r22
    7888:	7c 01       	movw	r14, r24
    788a:	6c 8f       	std	Y+28, r22	; 0x1c
    788c:	7d 8f       	std	Y+29, r23	; 0x1d
    788e:	8e 8f       	std	Y+30, r24	; 0x1e
    7890:	9f 8f       	std	Y+31, r25	; 0x1f
    7892:	18 a2       	std	Y+32, r1	; 0x20
    7894:	19 a2       	std	Y+33, r1	; 0x21
    7896:	1a a2       	std	Y+34, r1	; 0x22
    7898:	1b a2       	std	Y+35, r1	; 0x23
    789a:	be 01       	movw	r22, r28
    789c:	64 5e       	subi	r22, 0xE4	; 228
    789e:	7f 4f       	sbci	r23, 0xFF	; 255
    78a0:	80 e0       	ldi	r24, 0x00	; 0
    78a2:	90 e0       	ldi	r25, 0x00	; 0
    78a4:	03 db       	rcall	.-2554   	; 0x6eac <clock_settime>
    78a6:	b7 01       	movw	r22, r14
    78a8:	a6 01       	movw	r20, r12
    78aa:	81 e0       	ldi	r24, 0x01	; 1
    78ac:	90 e0       	ldi	r25, 0x00	; 0
    78ae:	0e 94 d3 2f 	call	0x5fa6	; 0x5fa6 <rtc_init>
    78b2:	81 11       	cpse	r24, r1
    78b4:	0d c0       	rjmp	.+26     	; 0x78d0 <setdate_r+0x21c>
    78b6:	84 e8       	ldi	r24, 0x84	; 132
    78b8:	96 e0       	ldi	r25, 0x06	; 6
    78ba:	a0 e0       	ldi	r26, 0x00	; 0
    78bc:	ed b7       	in	r30, 0x3d	; 61
    78be:	fe b7       	in	r31, 0x3e	; 62
    78c0:	81 83       	std	Z+1, r24	; 0x01
    78c2:	92 83       	std	Z+2, r25	; 0x02
    78c4:	a3 83       	std	Z+3, r26	; 0x03
    78c6:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    78ca:	8f ef       	ldi	r24, 0xFF	; 255
    78cc:	9f ef       	ldi	r25, 0xFF	; 255
    78ce:	02 c0       	rjmp	.+4      	; 0x78d4 <setdate_r+0x220>
    78d0:	80 e0       	ldi	r24, 0x00	; 0
    78d2:	90 e0       	ldi	r25, 0x00	; 0
    78d4:	a5 96       	adiw	r28, 0x25	; 37
    78d6:	0f b6       	in	r0, 0x3f	; 63
    78d8:	f8 94       	cli
    78da:	de bf       	out	0x3e, r29	; 62
    78dc:	0f be       	out	0x3f, r0	; 63
    78de:	cd bf       	out	0x3d, r28	; 61
    78e0:	df 91       	pop	r29
    78e2:	cf 91       	pop	r28
    78e4:	ff 90       	pop	r15
    78e6:	ef 90       	pop	r14
    78e8:	df 90       	pop	r13
    78ea:	cf 90       	pop	r12
    78ec:	08 95       	ret

000078ee <setdate>:
    78ee:	ab e2       	ldi	r26, 0x2B	; 43
    78f0:	b0 e0       	ldi	r27, 0x00	; 0
    78f2:	ed e7       	ldi	r30, 0x7D	; 125
    78f4:	fc e3       	ldi	r31, 0x3C	; 60
    78f6:	0c 94 d8 e3 	jmp	0x1c7b0	; 0x1c7b0 <__prologue_saves__+0x20>
    78fa:	82 ef       	ldi	r24, 0xF2	; 242
    78fc:	96 e0       	ldi	r25, 0x06	; 6
    78fe:	a0 e0       	ldi	r26, 0x00	; 0
    7900:	ed b7       	in	r30, 0x3d	; 61
    7902:	fe b7       	in	r31, 0x3e	; 62
    7904:	81 83       	std	Z+1, r24	; 0x01
    7906:	92 83       	std	Z+2, r25	; 0x02
    7908:	a3 83       	std	Z+3, r26	; 0x03
    790a:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    790e:	40 91 55 1c 	lds	r20, 0x1C55	; 0x801c55 <__iob>
    7912:	50 91 56 1c 	lds	r21, 0x1C56	; 0x801c56 <__iob+0x1>
    7916:	67 e2       	ldi	r22, 0x27	; 39
    7918:	70 e0       	ldi	r23, 0x00	; 0
    791a:	ce 01       	movw	r24, r28
    791c:	04 96       	adiw	r24, 0x04	; 4
    791e:	0e 94 1e 77 	call	0xee3c	; 0xee3c <fgets>
    7922:	ce 01       	movw	r24, r28
    7924:	04 96       	adiw	r24, 0x04	; 4
    7926:	c6 de       	rcall	.-628    	; 0x76b4 <setdate_r>
    7928:	ab 96       	adiw	r28, 0x2b	; 43
    792a:	e2 e0       	ldi	r30, 0x02	; 2
    792c:	0c 94 f4 e3 	jmp	0x1c7e8	; 0x1c7e8 <__epilogue_restores__+0x20>

00007930 <find_dst>:
    7930:	a8 e2       	ldi	r26, 0x28	; 40
    7932:	b0 e0       	ldi	r27, 0x00	; 0
    7934:	ee e9       	ldi	r30, 0x9E	; 158
    7936:	fc e3       	ldi	r31, 0x3C	; 60
    7938:	0c 94 c8 e3 	jmp	0x1c790	; 0x1c790 <__prologue_saves__>
    793c:	3c 01       	movw	r6, r24
    793e:	1a 01       	movw	r2, r20
    7940:	2b 01       	movw	r4, r22
    7942:	49 01       	movw	r8, r18
    7944:	1c a3       	std	Y+36, r17	; 0x24
    7946:	0b a3       	std	Y+35, r16	; 0x23
    7948:	de a2       	std	Y+38, r13	; 0x26
    794a:	cd a2       	std	Y+37, r12	; 0x25
    794c:	b8 a6       	std	Y+40, r11	; 0x28
    794e:	af a2       	std	Y+39, r10	; 0x27
    7950:	be 01       	movw	r22, r28
    7952:	61 5e       	subi	r22, 0xE1	; 225
    7954:	7f 4f       	sbci	r23, 0xFF	; 255
    7956:	ce 01       	movw	r24, r28
    7958:	47 96       	adiw	r24, 0x17	; 23
    795a:	15 dc       	rcall	.-2006   	; 0x7186 <gettimeofday>
    795c:	af 8d       	ldd	r26, Y+31	; 0x1f
    795e:	b8 a1       	ldd	r27, Y+32	; 0x20
    7960:	2c e3       	ldi	r18, 0x3C	; 60
    7962:	30 e0       	ldi	r19, 0x00	; 0
    7964:	0e 94 a2 e3 	call	0x1c744	; 0x1c744 <__usmulhisi3>
    7968:	5b 01       	movw	r10, r22
    796a:	6c 01       	movw	r12, r24
    796c:	61 14       	cp	r6, r1
    796e:	71 04       	cpc	r7, r1
    7970:	31 f0       	breq	.+12     	; 0x797e <find_dst+0x4e>
    7972:	20 e1       	ldi	r18, 0x10	; 16
    7974:	a2 1a       	sub	r10, r18
    7976:	2e e0       	ldi	r18, 0x0E	; 14
    7978:	b2 0a       	sbc	r11, r18
    797a:	c1 08       	sbc	r12, r1
    797c:	d1 08       	sbc	r13, r1
    797e:	81 14       	cp	r8, r1
    7980:	91 04       	cpc	r9, r1
    7982:	39 f0       	breq	.+14     	; 0x7992 <find_dst+0x62>
    7984:	4c e6       	ldi	r20, 0x6C	; 108
    7986:	84 1a       	sub	r8, r20
    7988:	47 e0       	ldi	r20, 0x07	; 7
    798a:	94 0a       	sbc	r9, r20
    798c:	9c 86       	std	Y+12, r9	; 0x0c
    798e:	8b 86       	std	Y+11, r8	; 0x0b
    7990:	11 c0       	rjmp	.+34     	; 0x79b4 <find_dst+0x84>
    7992:	21 14       	cp	r2, r1
    7994:	31 04       	cpc	r3, r1
    7996:	41 04       	cpc	r4, r1
    7998:	51 04       	cpc	r5, r1
    799a:	21 f4       	brne	.+8      	; 0x79a4 <find_dst+0x74>
    799c:	2f 88       	ldd	r2, Y+23	; 0x17
    799e:	38 8c       	ldd	r3, Y+24	; 0x18
    79a0:	49 8c       	ldd	r4, Y+25	; 0x19
    79a2:	5a 8c       	ldd	r5, Y+26	; 0x1a
    79a4:	8e 01       	movw	r16, r28
    79a6:	0f 5f       	subi	r16, 0xFF	; 255
    79a8:	1f 4f       	sbci	r17, 0xFF	; 255
    79aa:	a6 01       	movw	r20, r12
    79ac:	95 01       	movw	r18, r10
    79ae:	c2 01       	movw	r24, r4
    79b0:	b1 01       	movw	r22, r2
    79b2:	ca da       	rcall	.-2668   	; 0x6f48 <time_to_tm>
    79b4:	8b a1       	ldd	r24, Y+35	; 0x23
    79b6:	9c a1       	ldd	r25, Y+36	; 0x24
    79b8:	01 97       	sbiw	r24, 0x01	; 1
    79ba:	9a 87       	std	Y+10, r25	; 0x0a
    79bc:	89 87       	std	Y+9, r24	; 0x09
    79be:	81 e0       	ldi	r24, 0x01	; 1
    79c0:	90 e0       	ldi	r25, 0x00	; 0
    79c2:	98 87       	std	Y+8, r25	; 0x08
    79c4:	8f 83       	std	Y+7, r24	; 0x07
    79c6:	8f a1       	ldd	r24, Y+39	; 0x27
    79c8:	98 a5       	ldd	r25, Y+40	; 0x28
    79ca:	9e 83       	std	Y+6, r25	; 0x06
    79cc:	8d 83       	std	Y+5, r24	; 0x05
    79ce:	1c 82       	std	Y+4, r1	; 0x04
    79d0:	1b 82       	std	Y+3, r1	; 0x03
    79d2:	1a 82       	std	Y+2, r1	; 0x02
    79d4:	19 82       	std	Y+1, r1	; 0x01
    79d6:	ce 01       	movw	r24, r28
    79d8:	01 96       	adiw	r24, 0x01	; 1
    79da:	68 de       	rcall	.-816    	; 0x76ac <timegm>
    79dc:	45 01       	movw	r8, r10
    79de:	56 01       	movw	r10, r12
    79e0:	86 0e       	add	r8, r22
    79e2:	97 1e       	adc	r9, r23
    79e4:	a8 1e       	adc	r10, r24
    79e6:	b9 1e       	adc	r11, r25
    79e8:	8e 01       	movw	r16, r28
    79ea:	0f 5f       	subi	r16, 0xFF	; 255
    79ec:	1f 4f       	sbci	r17, 0xFF	; 255
    79ee:	20 e0       	ldi	r18, 0x00	; 0
    79f0:	30 e0       	ldi	r19, 0x00	; 0
    79f2:	a9 01       	movw	r20, r18
    79f4:	c5 01       	movw	r24, r10
    79f6:	b4 01       	movw	r22, r8
    79f8:	a7 da       	rcall	.-2738   	; 0x6f48 <time_to_tm>
    79fa:	2d 85       	ldd	r18, Y+13	; 0x0d
    79fc:	3e 85       	ldd	r19, Y+14	; 0x0e
    79fe:	e7 e0       	ldi	r30, 0x07	; 7
    7a00:	f0 e0       	ldi	r31, 0x00	; 0
    7a02:	c9 01       	movw	r24, r18
    7a04:	bf 01       	movw	r22, r30
    7a06:	0e 94 33 e3 	call	0x1c666	; 0x1c666 <__divmodhi4>
    7a0a:	4d a1       	ldd	r20, Y+37	; 0x25
    7a0c:	5e a1       	ldd	r21, Y+38	; 0x26
    7a0e:	48 17       	cp	r20, r24
    7a10:	59 07       	cpc	r21, r25
    7a12:	21 f4       	brne	.+8      	; 0x7a1c <find_dst+0xec>
    7a14:	51 e0       	ldi	r21, 0x01	; 1
    7a16:	e5 1a       	sub	r14, r21
    7a18:	f1 08       	sbc	r15, r1
    7a1a:	51 f0       	breq	.+20     	; 0x7a30 <find_dst+0x100>
    7a1c:	80 e8       	ldi	r24, 0x80	; 128
    7a1e:	88 0e       	add	r8, r24
    7a20:	81 e5       	ldi	r24, 0x51	; 81
    7a22:	98 1e       	adc	r9, r24
    7a24:	81 e0       	ldi	r24, 0x01	; 1
    7a26:	a8 1e       	adc	r10, r24
    7a28:	b1 1c       	adc	r11, r1
    7a2a:	2f 5f       	subi	r18, 0xFF	; 255
    7a2c:	3f 4f       	sbci	r19, 0xFF	; 255
    7a2e:	e9 cf       	rjmp	.-46     	; 0x7a02 <find_dst+0xd2>
    7a30:	c5 01       	movw	r24, r10
    7a32:	b4 01       	movw	r22, r8
    7a34:	a8 96       	adiw	r28, 0x28	; 40
    7a36:	e2 e1       	ldi	r30, 0x12	; 18
    7a38:	0c 94 e4 e3 	jmp	0x1c7c8	; 0x1c7c8 <__epilogue_restores__>

00007a3c <set_dst>:
    7a3c:	4f 92       	push	r4
    7a3e:	5f 92       	push	r5
    7a40:	6f 92       	push	r6
    7a42:	7f 92       	push	r7
    7a44:	af 92       	push	r10
    7a46:	bf 92       	push	r11
    7a48:	cf 92       	push	r12
    7a4a:	df 92       	push	r13
    7a4c:	ef 92       	push	r14
    7a4e:	ff 92       	push	r15
    7a50:	0f 93       	push	r16
    7a52:	1f 93       	push	r17
    7a54:	cf 93       	push	r28
    7a56:	df 93       	push	r29
    7a58:	cd b7       	in	r28, 0x3d	; 61
    7a5a:	de b7       	in	r29, 0x3e	; 62
    7a5c:	2c 97       	sbiw	r28, 0x0c	; 12
    7a5e:	0f b6       	in	r0, 0x3f	; 63
    7a60:	f8 94       	cli
    7a62:	de bf       	out	0x3e, r29	; 62
    7a64:	0f be       	out	0x3f, r0	; 63
    7a66:	cd bf       	out	0x3d, r28	; 61
    7a68:	2b 01       	movw	r4, r22
    7a6a:	3c 01       	movw	r6, r24
    7a6c:	67 2b       	or	r22, r23
    7a6e:	68 2b       	or	r22, r24
    7a70:	69 2b       	or	r22, r25
    7a72:	51 f4       	brne	.+20     	; 0x7a88 <set_dst+0x4c>
    7a74:	be 01       	movw	r22, r28
    7a76:	67 5f       	subi	r22, 0xF7	; 247
    7a78:	7f 4f       	sbci	r23, 0xFF	; 255
    7a7a:	ce 01       	movw	r24, r28
    7a7c:	01 96       	adiw	r24, 0x01	; 1
    7a7e:	83 db       	rcall	.-2298   	; 0x7186 <gettimeofday>
    7a80:	49 80       	ldd	r4, Y+1	; 0x01
    7a82:	5a 80       	ldd	r5, Y+2	; 0x02
    7a84:	6b 80       	ldd	r6, Y+3	; 0x03
    7a86:	7c 80       	ldd	r7, Y+4	; 0x04
    7a88:	80 91 0c 1a 	lds	r24, 0x1A0C	; 0x801a0c <dst+0x8>
    7a8c:	90 91 0d 1a 	lds	r25, 0x1A0D	; 0x801a0d <dst+0x9>
    7a90:	a0 91 0e 1a 	lds	r26, 0x1A0E	; 0x801a0e <dst+0xa>
    7a94:	b0 91 0f 1a 	lds	r27, 0x1A0F	; 0x801a0f <dst+0xb>
    7a98:	84 15       	cp	r24, r4
    7a9a:	95 05       	cpc	r25, r5
    7a9c:	a6 05       	cpc	r26, r6
    7a9e:	b7 05       	cpc	r27, r7
    7aa0:	50 f0       	brcs	.+20     	; 0x7ab6 <set_dst+0x7a>
    7aa2:	84 19       	sub	r24, r4
    7aa4:	95 09       	sbc	r25, r5
    7aa6:	a6 09       	sbc	r26, r6
    7aa8:	b7 09       	sbc	r27, r7
    7aaa:	80 38       	cpi	r24, 0x80	; 128
    7aac:	91 45       	sbci	r25, 0x51	; 81
    7aae:	a1 40       	sbci	r26, 0x01	; 1
    7ab0:	b1 05       	cpc	r27, r1
    7ab2:	70 f4       	brcc	.+28     	; 0x7ad0 <set_dst+0x94>
    7ab4:	42 c0       	rjmp	.+132    	; 0x7b3a <set_dst+0xfe>
    7ab6:	a3 01       	movw	r20, r6
    7ab8:	92 01       	movw	r18, r4
    7aba:	28 1b       	sub	r18, r24
    7abc:	39 0b       	sbc	r19, r25
    7abe:	4a 0b       	sbc	r20, r26
    7ac0:	5b 0b       	sbc	r21, r27
    7ac2:	da 01       	movw	r26, r20
    7ac4:	c9 01       	movw	r24, r18
    7ac6:	80 38       	cpi	r24, 0x80	; 128
    7ac8:	91 45       	sbci	r25, 0x51	; 81
    7aca:	a1 40       	sbci	r26, 0x01	; 1
    7acc:	b1 05       	cpc	r27, r1
    7ace:	a8 f1       	brcs	.+106    	; 0x7b3a <set_dst+0xfe>
    7ad0:	40 92 0c 1a 	sts	0x1A0C, r4	; 0x801a0c <dst+0x8>
    7ad4:	50 92 0d 1a 	sts	0x1A0D, r5	; 0x801a0d <dst+0x9>
    7ad8:	60 92 0e 1a 	sts	0x1A0E, r6	; 0x801a0e <dst+0xa>
    7adc:	70 92 0f 1a 	sts	0x1A0F, r7	; 0x801a0f <dst+0xb>
    7ae0:	82 e0       	ldi	r24, 0x02	; 2
    7ae2:	a8 2e       	mov	r10, r24
    7ae4:	b1 2c       	mov	r11, r1
    7ae6:	c1 2c       	mov	r12, r1
    7ae8:	d1 2c       	mov	r13, r1
    7aea:	92 e0       	ldi	r25, 0x02	; 2
    7aec:	e9 2e       	mov	r14, r25
    7aee:	f1 2c       	mov	r15, r1
    7af0:	03 e0       	ldi	r16, 0x03	; 3
    7af2:	10 e0       	ldi	r17, 0x00	; 0
    7af4:	20 e0       	ldi	r18, 0x00	; 0
    7af6:	30 e0       	ldi	r19, 0x00	; 0
    7af8:	b3 01       	movw	r22, r6
    7afa:	a2 01       	movw	r20, r4
    7afc:	80 e0       	ldi	r24, 0x00	; 0
    7afe:	90 e0       	ldi	r25, 0x00	; 0
    7b00:	17 df       	rcall	.-466    	; 0x7930 <find_dst>
    7b02:	60 93 04 1a 	sts	0x1A04, r22	; 0x801a04 <dst>
    7b06:	70 93 05 1a 	sts	0x1A05, r23	; 0x801a05 <dst+0x1>
    7b0a:	80 93 06 1a 	sts	0x1A06, r24	; 0x801a06 <dst+0x2>
    7b0e:	90 93 07 1a 	sts	0x1A07, r25	; 0x801a07 <dst+0x3>
    7b12:	ee 24       	eor	r14, r14
    7b14:	e3 94       	inc	r14
    7b16:	f1 2c       	mov	r15, r1
    7b18:	0b e0       	ldi	r16, 0x0B	; 11
    7b1a:	10 e0       	ldi	r17, 0x00	; 0
    7b1c:	20 e0       	ldi	r18, 0x00	; 0
    7b1e:	30 e0       	ldi	r19, 0x00	; 0
    7b20:	b3 01       	movw	r22, r6
    7b22:	a2 01       	movw	r20, r4
    7b24:	81 e0       	ldi	r24, 0x01	; 1
    7b26:	90 e0       	ldi	r25, 0x00	; 0
    7b28:	03 df       	rcall	.-506    	; 0x7930 <find_dst>
    7b2a:	60 93 08 1a 	sts	0x1A08, r22	; 0x801a08 <dst+0x4>
    7b2e:	70 93 09 1a 	sts	0x1A09, r23	; 0x801a09 <dst+0x5>
    7b32:	80 93 0a 1a 	sts	0x1A0A, r24	; 0x801a0a <dst+0x6>
    7b36:	90 93 0b 1a 	sts	0x1A0B, r25	; 0x801a0b <dst+0x7>
    7b3a:	2c 96       	adiw	r28, 0x0c	; 12
    7b3c:	0f b6       	in	r0, 0x3f	; 63
    7b3e:	f8 94       	cli
    7b40:	de bf       	out	0x3e, r29	; 62
    7b42:	0f be       	out	0x3f, r0	; 63
    7b44:	cd bf       	out	0x3d, r28	; 61
    7b46:	df 91       	pop	r29
    7b48:	cf 91       	pop	r28
    7b4a:	1f 91       	pop	r17
    7b4c:	0f 91       	pop	r16
    7b4e:	ff 90       	pop	r15
    7b50:	ef 90       	pop	r14
    7b52:	df 90       	pop	r13
    7b54:	cf 90       	pop	r12
    7b56:	bf 90       	pop	r11
    7b58:	af 90       	pop	r10
    7b5a:	7f 90       	pop	r7
    7b5c:	6f 90       	pop	r6
    7b5e:	5f 90       	pop	r5
    7b60:	4f 90       	pop	r4
    7b62:	08 95       	ret

00007b64 <asctime_r>:
    7b64:	a5 e1       	ldi	r26, 0x15	; 21
    7b66:	b0 e0       	ldi	r27, 0x00	; 0
    7b68:	e8 eb       	ldi	r30, 0xB8	; 184
    7b6a:	fd e3       	ldi	r31, 0x3D	; 61
    7b6c:	0c 94 d6 e3 	jmp	0x1c7ac	; 0x1c7ac <__prologue_saves__+0x1c>
    7b70:	ec 01       	movw	r28, r24
    7b72:	8b 01       	movw	r16, r22
    7b74:	60 e0       	ldi	r22, 0x00	; 0
    7b76:	70 e0       	ldi	r23, 0x00	; 0
    7b78:	d1 db       	rcall	.-2142   	; 0x731c <normalize>
    7b7a:	80 e2       	ldi	r24, 0x20	; 32
    7b7c:	f8 01       	movw	r30, r16
    7b7e:	11 92       	st	Z+, r1
    7b80:	8a 95       	dec	r24
    7b82:	e9 f7       	brne	.-6      	; 0x7b7e <asctime_r+0x1a>
    7b84:	8a 85       	ldd	r24, Y+10	; 0x0a
    7b86:	9b 85       	ldd	r25, Y+11	; 0x0b
    7b88:	84 59       	subi	r24, 0x94	; 148
    7b8a:	98 4f       	sbci	r25, 0xF8	; 248
    7b8c:	ed b7       	in	r30, 0x3d	; 61
    7b8e:	fe b7       	in	r31, 0x3e	; 62
    7b90:	95 8b       	std	Z+21, r25	; 0x15
    7b92:	84 8b       	std	Z+20, r24	; 0x14
    7b94:	88 81       	ld	r24, Y
    7b96:	99 81       	ldd	r25, Y+1	; 0x01
    7b98:	93 8b       	std	Z+19, r25	; 0x13
    7b9a:	82 8b       	std	Z+18, r24	; 0x12
    7b9c:	8a 81       	ldd	r24, Y+2	; 0x02
    7b9e:	9b 81       	ldd	r25, Y+3	; 0x03
    7ba0:	91 8b       	std	Z+17, r25	; 0x11
    7ba2:	80 8b       	std	Z+16, r24	; 0x10
    7ba4:	8c 81       	ldd	r24, Y+4	; 0x04
    7ba6:	9d 81       	ldd	r25, Y+5	; 0x05
    7ba8:	97 87       	std	Z+15, r25	; 0x0f
    7baa:	86 87       	std	Z+14, r24	; 0x0e
    7bac:	8e 81       	ldd	r24, Y+6	; 0x06
    7bae:	9f 81       	ldd	r25, Y+7	; 0x07
    7bb0:	95 87       	std	Z+13, r25	; 0x0d
    7bb2:	84 87       	std	Z+12, r24	; 0x0c
    7bb4:	e8 85       	ldd	r30, Y+8	; 0x08
    7bb6:	f9 85       	ldd	r31, Y+9	; 0x09
    7bb8:	ee 0f       	add	r30, r30
    7bba:	ff 1f       	adc	r31, r31
    7bbc:	e8 5e       	subi	r30, 0xE8	; 232
    7bbe:	fe 4f       	sbci	r31, 0xFE	; 254
    7bc0:	80 81       	ld	r24, Z
    7bc2:	91 81       	ldd	r25, Z+1	; 0x01
    7bc4:	ed b7       	in	r30, 0x3d	; 61
    7bc6:	fe b7       	in	r31, 0x3e	; 62
    7bc8:	93 87       	std	Z+11, r25	; 0x0b
    7bca:	82 87       	std	Z+10, r24	; 0x0a
    7bcc:	ec 85       	ldd	r30, Y+12	; 0x0c
    7bce:	fd 85       	ldd	r31, Y+13	; 0x0d
    7bd0:	ee 0f       	add	r30, r30
    7bd2:	ff 1f       	adc	r31, r31
    7bd4:	ee 5c       	subi	r30, 0xCE	; 206
    7bd6:	fe 4f       	sbci	r31, 0xFE	; 254
    7bd8:	80 81       	ld	r24, Z
    7bda:	91 81       	ldd	r25, Z+1	; 0x01
    7bdc:	ed b7       	in	r30, 0x3d	; 61
    7bde:	fe b7       	in	r31, 0x3e	; 62
    7be0:	91 87       	std	Z+9, r25	; 0x09
    7be2:	80 87       	std	Z+8, r24	; 0x08
    7be4:	83 e1       	ldi	r24, 0x13	; 19
    7be6:	97 e0       	ldi	r25, 0x07	; 7
    7be8:	a0 e0       	ldi	r26, 0x00	; 0
    7bea:	85 83       	std	Z+5, r24	; 0x05
    7bec:	96 83       	std	Z+6, r25	; 0x06
    7bee:	a7 83       	std	Z+7, r26	; 0x07
    7bf0:	80 e2       	ldi	r24, 0x20	; 32
    7bf2:	90 e0       	ldi	r25, 0x00	; 0
    7bf4:	94 83       	std	Z+4, r25	; 0x04
    7bf6:	83 83       	std	Z+3, r24	; 0x03
    7bf8:	12 83       	std	Z+2, r17	; 0x02
    7bfa:	01 83       	std	Z+1, r16	; 0x01
    7bfc:	0e 94 10 47 	call	0x8e20	; 0x8e20 <snprintf_P>
    7c00:	c8 01       	movw	r24, r16
    7c02:	cd b7       	in	r28, 0x3d	; 61
    7c04:	de b7       	in	r29, 0x3e	; 62
    7c06:	65 96       	adiw	r28, 0x15	; 21
    7c08:	e4 e0       	ldi	r30, 0x04	; 4
    7c0a:	0c 94 f2 e3 	jmp	0x1c7e4	; 0x1c7e4 <__epilogue_restores__+0x1c>

00007c0e <asctime>:
    7c0e:	6a e9       	ldi	r22, 0x9A	; 154
    7c10:	77 e1       	ldi	r23, 0x17	; 23
    7c12:	a8 cf       	rjmp	.-176    	; 0x7b64 <asctime_r>
    7c14:	08 95       	ret

00007c16 <ctime_gm>:
    7c16:	a6 e1       	ldi	r26, 0x16	; 22
    7c18:	b0 e0       	ldi	r27, 0x00	; 0
    7c1a:	e1 e1       	ldi	r30, 0x11	; 17
    7c1c:	fe e3       	ldi	r31, 0x3E	; 62
    7c1e:	0c 94 d8 e3 	jmp	0x1c7b0	; 0x1c7b0 <__prologue_saves__+0x20>
    7c22:	be 01       	movw	r22, r28
    7c24:	6f 5f       	subi	r22, 0xFF	; 255
    7c26:	7f 4f       	sbci	r23, 0xFF	; 255
    7c28:	6d da       	rcall	.-2854   	; 0x7104 <gmtime_r>
    7c2a:	6a e7       	ldi	r22, 0x7A	; 122
    7c2c:	77 e1       	ldi	r23, 0x17	; 23
    7c2e:	9a df       	rcall	.-204    	; 0x7b64 <asctime_r>
    7c30:	66 96       	adiw	r28, 0x16	; 22
    7c32:	e2 e0       	ldi	r30, 0x02	; 2
    7c34:	0c 94 f4 e3 	jmp	0x1c7e8	; 0x1c7e8 <__epilogue_restores__+0x20>

00007c38 <initialize_clock>:
/// @param[in] minwest: your time zone as minute west
///@return  void
///@see: clock_settime()
MEMSPACE
void initialize_clock(int minwest)
{
    7c38:	a5 e2       	ldi	r26, 0x25	; 37
    7c3a:	b0 e0       	ldi	r27, 0x00	; 0
    7c3c:	e2 e2       	ldi	r30, 0x22	; 34
    7c3e:	fe e3       	ldi	r31, 0x3E	; 62
    7c40:	0c 94 d2 e3 	jmp	0x1c7a4	; 0x1c7a4 <__prologue_saves__+0x14>
    7c44:	8c 01       	movw	r16, r24
    tm_t tc;
    ts_t ts;
    tz_t tz;

#ifdef RTC_SUPPORT
    if(!rtc_init(0,0L))
    7c46:	40 e0       	ldi	r20, 0x00	; 0
    7c48:	50 e0       	ldi	r21, 0x00	; 0
    7c4a:	ba 01       	movw	r22, r20
    7c4c:	80 e0       	ldi	r24, 0x00	; 0
    7c4e:	90 e0       	ldi	r25, 0x00	; 0
    7c50:	0e 94 d3 2f 	call	0x5fa6	; 0x5fa6 <rtc_init>
    7c54:	81 11       	cpse	r24, r1
    7c56:	27 c0       	rjmp	.+78     	; 0x7ca6 <initialize_clock+0x6e>
    {
        printf("rtc uninitilized\n");
    7c58:	82 e7       	ldi	r24, 0x72	; 114
    7c5a:	96 e0       	ldi	r25, 0x06	; 6
    7c5c:	a0 e0       	ldi	r26, 0x00	; 0
    7c5e:	ed b7       	in	r30, 0x3d	; 61
    7c60:	fe b7       	in	r31, 0x3e	; 62
    7c62:	81 83       	std	Z+1, r24	; 0x01
    7c64:	92 83       	std	Z+2, r25	; 0x02
    7c66:	a3 83       	std	Z+3, r26	; 0x03
    7c68:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
        printf("attempting rtc init\n");
    7c6c:	8d e5       	ldi	r24, 0x5D	; 93
    7c6e:	96 e0       	ldi	r25, 0x06	; 6
    7c70:	a0 e0       	ldi	r26, 0x00	; 0
    7c72:	ed b7       	in	r30, 0x3d	; 61
    7c74:	fe b7       	in	r31, 0x3e	; 62
    7c76:	81 83       	std	Z+1, r24	; 0x01
    7c78:	92 83       	std	Z+2, r25	; 0x02
    7c7a:	a3 83       	std	Z+3, r26	; 0x03
    7c7c:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
        if( !rtc_init(1, (time_t) 0) )
    7c80:	40 e0       	ldi	r20, 0x00	; 0
    7c82:	50 e0       	ldi	r21, 0x00	; 0
    7c84:	ba 01       	movw	r22, r20
    7c86:	81 e0       	ldi	r24, 0x01	; 1
    7c88:	90 e0       	ldi	r25, 0x00	; 0
    7c8a:	0e 94 d3 2f 	call	0x5fa6	; 0x5fa6 <rtc_init>
    7c8e:	81 11       	cpse	r24, r1
    7c90:	0a c0       	rjmp	.+20     	; 0x7ca6 <initialize_clock+0x6e>
        {
            printf("rtc force init failed\n");
    7c92:	86 e4       	ldi	r24, 0x46	; 70
    7c94:	96 e0       	ldi	r25, 0x06	; 6
    7c96:	a0 e0       	ldi	r26, 0x00	; 0
    7c98:	ed b7       	in	r30, 0x3d	; 61
    7c9a:	fe b7       	in	r31, 0x3e	; 62
    7c9c:	81 83       	std	Z+1, r24	; 0x01
    7c9e:	92 83       	std	Z+2, r25	; 0x02
    7ca0:	a3 83       	std	Z+3, r26	; 0x03
    7ca2:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
        }
    }

    if(rtc_read(&tc))
    7ca6:	ce 01       	movw	r24, r28
    7ca8:	04 96       	adiw	r24, 0x04	; 4
    7caa:	0e 94 1f 30 	call	0x603e	; 0x603e <rtc_read>
    7cae:	88 23       	and	r24, r24
    7cb0:	51 f0       	breq	.+20     	; 0x7cc6 <initialize_clock+0x8e>
    {
        seconds = timegm(&tc);
    7cb2:	ce 01       	movw	r24, r28
    7cb4:	04 96       	adiw	r24, 0x04	; 4
    7cb6:	fa dc       	rcall	.-1548   	; 0x76ac <timegm>
    7cb8:	6b 01       	movw	r12, r22
    7cba:	7c 01       	movw	r14, r24
    }
#else
    printf("NO RTC\n");
    seconds = 0;
#endif  // RTC_SUPPORT
    if(!seconds)
    7cbc:	67 2b       	or	r22, r23
    7cbe:	68 2b       	or	r22, r24
    7cc0:	69 2b       	or	r22, r25
    7cc2:	c1 f4       	brne	.+48     	; 0x7cf4 <initialize_clock+0xbc>
    7cc4:	0a c0       	rjmp	.+20     	; 0x7cda <initialize_clock+0xa2>
        seconds = timegm(&tc);
    }
    else
    {
        seconds = 0;
        printf("rtc read errorafter init\n");
    7cc6:	8c e2       	ldi	r24, 0x2C	; 44
    7cc8:	96 e0       	ldi	r25, 0x06	; 6
    7cca:	a0 e0       	ldi	r26, 0x00	; 0
    7ccc:	ed b7       	in	r30, 0x3d	; 61
    7cce:	fe b7       	in	r31, 0x3e	; 62
    7cd0:	81 83       	std	Z+1, r24	; 0x01
    7cd2:	92 83       	std	Z+2, r25	; 0x02
    7cd4:	a3 83       	std	Z+3, r26	; 0x03
    7cd6:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
#else
    printf("NO RTC\n");
    seconds = 0;
#endif  // RTC_SUPPORT
    if(!seconds)
        printf("use setdate command to change time\n");
    7cda:	88 e0       	ldi	r24, 0x08	; 8
    7cdc:	96 e0       	ldi	r25, 0x06	; 6
    7cde:	a0 e0       	ldi	r26, 0x00	; 0
    7ce0:	ed b7       	in	r30, 0x3d	; 61
    7ce2:	fe b7       	in	r31, 0x3e	; 62
    7ce4:	81 83       	std	Z+1, r24	; 0x01
    7ce6:	92 83       	std	Z+2, r25	; 0x02
    7ce8:	a3 83       	std	Z+3, r26	; 0x03
    7cea:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    7cee:	c1 2c       	mov	r12, r1
    7cf0:	d1 2c       	mov	r13, r1
    7cf2:	76 01       	movw	r14, r12
    tz.tz_minuteswest = minwest;
    7cf4:	1b a3       	std	Y+35, r17	; 0x23
    7cf6:	0a a3       	std	Y+34, r16	; 0x22
    tz.tz_dsttime = 0;
    7cf8:	1d a2       	std	Y+37, r1	; 0x25
    7cfa:	1c a2       	std	Y+36, r1	; 0x24
    settimezone( &tz );
    7cfc:	ce 01       	movw	r24, r28
    7cfe:	82 96       	adiw	r24, 0x22	; 34
    7d00:	30 da       	rcall	.-2976   	; 0x7162 <settimezone>

    ts.tv_sec = seconds;
    7d02:	ca 8e       	std	Y+26, r12	; 0x1a
    7d04:	db 8e       	std	Y+27, r13	; 0x1b
    7d06:	ec 8e       	std	Y+28, r14	; 0x1c
    7d08:	fd 8e       	std	Y+29, r15	; 0x1d
    ts.tv_nsec = 0L;
    7d0a:	1e 8e       	std	Y+30, r1	; 0x1e
    7d0c:	1f 8e       	std	Y+31, r1	; 0x1f
    7d0e:	18 a2       	std	Y+32, r1	; 0x20
    7d10:	19 a2       	std	Y+33, r1	; 0x21
    clock_settime(0, (ts_t *) &ts);
    7d12:	be 01       	movw	r22, r28
    7d14:	66 5e       	subi	r22, 0xE6	; 230
    7d16:	7f 4f       	sbci	r23, 0xFF	; 255
    7d18:	80 e0       	ldi	r24, 0x00	; 0
    7d1a:	90 e0       	ldi	r25, 0x00	; 0
    7d1c:	c7 d8       	rcall	.-3698   	; 0x6eac <clock_settime>
}
    7d1e:	a5 96       	adiw	r28, 0x25	; 37
    7d20:	e8 e0       	ldi	r30, 0x08	; 8
    7d22:	0c 94 ee e3 	jmp	0x1c7dc	; 0x1c7dc <__epilogue_restores__+0x14>

00007d26 <display_clock>:
/// @see: rtc_read
/// @see: timegm()
/// @see: ascitime()
MEMSPACE
void display_clock()
{
    7d26:	a9 e2       	ldi	r26, 0x29	; 41
    7d28:	b0 e0       	ldi	r27, 0x00	; 0
    7d2a:	e9 e9       	ldi	r30, 0x99	; 153
    7d2c:	fe e3       	ldi	r31, 0x3E	; 62
    7d2e:	0c 94 d8 e3 	jmp	0x1c7b0	; 0x1c7b0 <__prologue_saves__+0x20>
    time_t seconds;
    tm_t tc;
    ts_t ts;

#ifdef RTC_SUPPORT
    if(rtc_read(&tc))
    7d32:	ce 01       	movw	r24, r28
    7d34:	08 96       	adiw	r24, 0x08	; 8
    7d36:	0e 94 1f 30 	call	0x603e	; 0x603e <rtc_read>
    7d3a:	88 23       	and	r24, r24
    7d3c:	29 f1       	breq	.+74     	; 0x7d88 <display_clock+0x62>
    {
        seconds = timegm(&tc);
    7d3e:	ce 01       	movw	r24, r28
    7d40:	08 96       	adiw	r24, 0x08	; 8
    7d42:	b4 dc       	rcall	.-1688   	; 0x76ac <timegm>
    7d44:	6e a3       	std	Y+38, r22	; 0x26
    7d46:	7f a3       	std	Y+39, r23	; 0x27
    7d48:	88 a7       	std	Y+40, r24	; 0x28
    7d4a:	99 a7       	std	Y+41, r25	; 0x29
        printf("rtc seconds: %lu\n",seconds);
    7d4c:	ed b7       	in	r30, 0x3d	; 61
    7d4e:	fe b7       	in	r31, 0x3e	; 62
    7d50:	64 83       	std	Z+4, r22	; 0x04
    7d52:	75 83       	std	Z+5, r23	; 0x05
    7d54:	86 83       	std	Z+6, r24	; 0x06
    7d56:	97 83       	std	Z+7, r25	; 0x07
    7d58:	86 ef       	ldi	r24, 0xF6	; 246
    7d5a:	95 e0       	ldi	r25, 0x05	; 5
    7d5c:	a0 e0       	ldi	r26, 0x00	; 0
    7d5e:	81 83       	std	Z+1, r24	; 0x01
    7d60:	92 83       	std	Z+2, r25	; 0x02
    7d62:	a3 83       	std	Z+3, r26	; 0x03
    7d64:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
        printf("rtc time:    %s\n",asctime(&tc));
    7d68:	ce 01       	movw	r24, r28
    7d6a:	08 96       	adiw	r24, 0x08	; 8
    7d6c:	50 df       	rcall	.-352    	; 0x7c0e <asctime>
    7d6e:	ed b7       	in	r30, 0x3d	; 61
    7d70:	fe b7       	in	r31, 0x3e	; 62
    7d72:	95 83       	std	Z+5, r25	; 0x05
    7d74:	84 83       	std	Z+4, r24	; 0x04
    7d76:	85 ee       	ldi	r24, 0xE5	; 229
    7d78:	95 e0       	ldi	r25, 0x05	; 5
    7d7a:	a0 e0       	ldi	r26, 0x00	; 0
    7d7c:	81 83       	std	Z+1, r24	; 0x01
    7d7e:	92 83       	std	Z+2, r25	; 0x02
    7d80:	a3 83       	std	Z+3, r26	; 0x03
    7d82:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    7d86:	0a c0       	rjmp	.+20     	; 0x7d9c <display_clock+0x76>
            (int) tc.tm_wday);
#endif
    }
    else
    {
        printf("RTC read failed\n");
    7d88:	84 ed       	ldi	r24, 0xD4	; 212
    7d8a:	95 e0       	ldi	r25, 0x05	; 5
    7d8c:	a0 e0       	ldi	r26, 0x00	; 0
    7d8e:	ed b7       	in	r30, 0x3d	; 61
    7d90:	fe b7       	in	r31, 0x3e	; 62
    7d92:	81 83       	std	Z+1, r24	; 0x01
    7d94:	92 83       	std	Z+2, r25	; 0x02
    7d96:	a3 83       	std	Z+3, r26	; 0x03
    7d98:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    }
#endif  // RTC_SUPPORT

    clock_gettime(0, (ts_t *) &ts);
    7d9c:	be 01       	movw	r22, r28
    7d9e:	62 5e       	subi	r22, 0xE2	; 226
    7da0:	7f 4f       	sbci	r23, 0xFF	; 255
    7da2:	80 e0       	ldi	r24, 0x00	; 0
    7da4:	90 e0       	ldi	r25, 0x00	; 0
    7da6:	0e 94 b2 34 	call	0x6964	; 0x6964 <clock_gettime>
    seconds = ts.tv_sec;
    7daa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    7dac:	9f 8d       	ldd	r25, Y+31	; 0x1f
    7dae:	a8 a1       	ldd	r26, Y+32	; 0x20
    7db0:	b9 a1       	ldd	r27, Y+33	; 0x21
    7db2:	8e a3       	std	Y+38, r24	; 0x26
    7db4:	9f a3       	std	Y+39, r25	; 0x27
    7db6:	a8 a7       	std	Y+40, r26	; 0x28
    7db8:	b9 a7       	std	Y+41, r27	; 0x29
    printf("clk seconds: %lu\n",seconds);
    7dba:	ed b7       	in	r30, 0x3d	; 61
    7dbc:	fe b7       	in	r31, 0x3e	; 62
    7dbe:	84 83       	std	Z+4, r24	; 0x04
    7dc0:	95 83       	std	Z+5, r25	; 0x05
    7dc2:	a6 83       	std	Z+6, r26	; 0x06
    7dc4:	b7 83       	std	Z+7, r27	; 0x07
    7dc6:	82 ec       	ldi	r24, 0xC2	; 194
    7dc8:	95 e0       	ldi	r25, 0x05	; 5
    7dca:	a0 e0       	ldi	r26, 0x00	; 0
    7dcc:	81 83       	std	Z+1, r24	; 0x01
    7dce:	92 83       	std	Z+2, r25	; 0x02
    7dd0:	a3 83       	std	Z+3, r26	; 0x03
    7dd2:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    printf("clk time:    %s\n", asctime(gmtime(&seconds)));
    7dd6:	ce 01       	movw	r24, r28
    7dd8:	86 96       	adiw	r24, 0x26	; 38
    7dda:	a9 d9       	rcall	.-3246   	; 0x712e <gmtime>
    7ddc:	18 df       	rcall	.-464    	; 0x7c0e <asctime>
    7dde:	ed b7       	in	r30, 0x3d	; 61
    7de0:	fe b7       	in	r31, 0x3e	; 62
    7de2:	95 83       	std	Z+5, r25	; 0x05
    7de4:	84 83       	std	Z+4, r24	; 0x04
    7de6:	81 eb       	ldi	r24, 0xB1	; 177
    7de8:	95 e0       	ldi	r25, 0x05	; 5
    7dea:	a0 e0       	ldi	r26, 0x00	; 0
    7dec:	81 83       	std	Z+1, r24	; 0x01
    7dee:	92 83       	std	Z+2, r25	; 0x02
    7df0:	a3 83       	std	Z+3, r26	; 0x03
    7df2:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
}
    7df6:	a9 96       	adiw	r28, 0x29	; 41
    7df8:	e2 e0       	ldi	r30, 0x02	; 2
    7dfa:	0c 94 f4 e3 	jmp	0x1c7e8	; 0x1c7e8 <__epilogue_restores__+0x20>

00007dfe <_putc_buffer_fn>:
    va_start(va, format);
    _printf_fn(&fn, format, va);
    va_end(va);

    return ((int)fn.sent);
}
    7dfe:	fc 01       	movw	r30, r24
    7e00:	84 81       	ldd	r24, Z+4	; 0x04
    7e02:	95 81       	ldd	r25, Z+5	; 0x05
    7e04:	00 97       	sbiw	r24, 0x00	; 0
    7e06:	79 f0       	breq	.+30     	; 0x7e26 <_putc_buffer_fn+0x28>
    7e08:	66 23       	and	r22, r22
    7e0a:	69 f0       	breq	.+26     	; 0x7e26 <_putc_buffer_fn+0x28>
    7e0c:	01 97       	sbiw	r24, 0x01	; 1
    7e0e:	95 83       	std	Z+5, r25	; 0x05
    7e10:	84 83       	std	Z+4, r24	; 0x04
    7e12:	86 81       	ldd	r24, Z+6	; 0x06
    7e14:	97 81       	ldd	r25, Z+7	; 0x07
    7e16:	01 96       	adiw	r24, 0x01	; 1
    7e18:	97 83       	std	Z+7, r25	; 0x07
    7e1a:	86 83       	std	Z+6, r24	; 0x06
    7e1c:	a2 81       	ldd	r26, Z+2	; 0x02
    7e1e:	b3 81       	ldd	r27, Z+3	; 0x03
    7e20:	6d 93       	st	X+, r22
    7e22:	b3 83       	std	Z+3, r27	; 0x03
    7e24:	a2 83       	std	Z+2, r26	; 0x02
    7e26:	02 80       	ldd	r0, Z+2	; 0x02
    7e28:	f3 81       	ldd	r31, Z+3	; 0x03
    7e2a:	e0 2d       	mov	r30, r0
    7e2c:	10 82       	st	Z, r1
    7e2e:	08 95       	ret

00007e30 <_putc_fn>:
    7e30:	fc 01       	movw	r30, r24
    7e32:	26 81       	ldd	r18, Z+6	; 0x06
    7e34:	37 81       	ldd	r19, Z+7	; 0x07
    7e36:	2f 5f       	subi	r18, 0xFF	; 255
    7e38:	3f 4f       	sbci	r19, 0xFF	; 255
    7e3a:	37 83       	std	Z+7, r19	; 0x07
    7e3c:	26 83       	std	Z+6, r18	; 0x06
    7e3e:	86 2f       	mov	r24, r22
    7e40:	90 e0       	ldi	r25, 0x00	; 0
    7e42:	0c 94 18 77 	jmp	0xee30	; 0xee30 <putchar>
    7e46:	08 95       	ret

00007e48 <bin2num>:
    7e48:	a0 e0       	ldi	r26, 0x00	; 0
    7e4a:	b0 e0       	ldi	r27, 0x00	; 0
    7e4c:	ea e2       	ldi	r30, 0x2A	; 42
    7e4e:	ff e3       	ldi	r31, 0x3F	; 63
    7e50:	0c 94 cf e3 	jmp	0x1c79e	; 0x1c79e <__prologue_saves__+0xe>
    7e54:	ea 01       	movw	r28, r20
    7e56:	53 e0       	ldi	r21, 0x03	; 3
    7e58:	ee 0c       	add	r14, r14
    7e5a:	ff 1c       	adc	r15, r15
    7e5c:	5a 95       	dec	r21
    7e5e:	e1 f7       	brne	.-8      	; 0x7e58 <bin2num+0x10>
    7e60:	fc 01       	movw	r30, r24
    7e62:	af 01       	movw	r20, r30
    7e64:	48 1b       	sub	r20, r24
    7e66:	59 0b       	sbc	r21, r25
    7e68:	c4 17       	cp	r28, r20
    7e6a:	d5 07       	cpc	r29, r21
    7e6c:	14 f0       	brlt	.+4      	; 0x7e72 <bin2num+0x2a>
    7e6e:	11 92       	st	Z+, r1
    7e70:	f8 cf       	rjmp	.-16     	; 0x7e62 <bin2num+0x1a>
    7e72:	41 e0       	ldi	r20, 0x01	; 1
    7e74:	e4 1a       	sub	r14, r20
    7e76:	f1 08       	sbc	r15, r1
    7e78:	5b 01       	movw	r10, r22
    7e7a:	42 e0       	ldi	r20, 0x02	; 2
    7e7c:	a4 1a       	sub	r10, r20
    7e7e:	b1 08       	sbc	r11, r1
    7e80:	f7 fc       	sbrc	r15, 7
    7e82:	3b c0       	rjmp	.+118    	; 0x7efa <bin2num+0xb2>
    7e84:	f7 01       	movw	r30, r14
    7e86:	43 e0       	ldi	r20, 0x03	; 3
    7e88:	f5 95       	asr	r31
    7e8a:	e7 95       	ror	r30
    7e8c:	4a 95       	dec	r20
    7e8e:	e1 f7       	brne	.-8      	; 0x7e88 <bin2num+0x40>
    7e90:	e0 0f       	add	r30, r16
    7e92:	f1 1f       	adc	r31, r17
    7e94:	40 81       	ld	r20, Z
    7e96:	50 e0       	ldi	r21, 0x00	; 0
    7e98:	f7 01       	movw	r30, r14
    7e9a:	e7 70       	andi	r30, 0x07	; 7
    7e9c:	ff 27       	eor	r31, r31
    7e9e:	02 c0       	rjmp	.+4      	; 0x7ea4 <bin2num+0x5c>
    7ea0:	55 95       	asr	r21
    7ea2:	47 95       	ror	r20
    7ea4:	ea 95       	dec	r30
    7ea6:	e2 f7       	brpl	.-8      	; 0x7ea0 <bin2num+0x58>
    7ea8:	41 70       	andi	r20, 0x01	; 1
    7eaa:	55 27       	eor	r21, r21
    7eac:	dc 01       	movw	r26, r24
    7eae:	e0 e0       	ldi	r30, 0x00	; 0
    7eb0:	f0 e0       	ldi	r31, 0x00	; 0
    7eb2:	ec 17       	cp	r30, r28
    7eb4:	fd 07       	cpc	r31, r29
    7eb6:	ec f4       	brge	.+58     	; 0x7ef2 <bin2num+0xaa>
    7eb8:	ea 15       	cp	r30, r10
    7eba:	fb 05       	cpc	r31, r11
    7ebc:	4c f0       	brlt	.+18     	; 0x7ed0 <bin2num+0x88>
    7ebe:	dc 01       	movw	r26, r24
    7ec0:	ae 0f       	add	r26, r30
    7ec2:	bf 1f       	adc	r27, r31
    7ec4:	1c 92       	st	X, r1
    7ec6:	41 e0       	ldi	r20, 0x01	; 1
    7ec8:	e4 1a       	sub	r14, r20
    7eca:	f1 08       	sbc	r15, r1
    7ecc:	ef 01       	movw	r28, r30
    7ece:	d8 cf       	rjmp	.-80     	; 0x7e80 <bin2num+0x38>
    7ed0:	9c 90       	ld	r9, X
    7ed2:	99 0c       	add	r9, r9
    7ed4:	94 2a       	or	r9, r20
    7ed6:	49 2d       	mov	r20, r9
    7ed8:	50 e0       	ldi	r21, 0x00	; 0
    7eda:	42 17       	cp	r20, r18
    7edc:	53 07       	cpc	r21, r19
    7ede:	24 f0       	brlt	.+8      	; 0x7ee8 <bin2num+0xa0>
    7ee0:	92 1a       	sub	r9, r18
    7ee2:	41 e0       	ldi	r20, 0x01	; 1
    7ee4:	50 e0       	ldi	r21, 0x00	; 0
    7ee6:	02 c0       	rjmp	.+4      	; 0x7eec <bin2num+0xa4>
    7ee8:	40 e0       	ldi	r20, 0x00	; 0
    7eea:	50 e0       	ldi	r21, 0x00	; 0
    7eec:	9d 92       	st	X+, r9
    7eee:	31 96       	adiw	r30, 0x01	; 1
    7ef0:	e0 cf       	rjmp	.-64     	; 0x7eb2 <bin2num+0x6a>
    7ef2:	41 15       	cp	r20, r1
    7ef4:	51 05       	cpc	r21, r1
    7ef6:	01 f7       	brne	.-64     	; 0x7eb8 <bin2num+0x70>
    7ef8:	e2 cf       	rjmp	.-60     	; 0x7ebe <bin2num+0x76>
    7efa:	fc 01       	movw	r30, r24
    7efc:	9f 01       	movw	r18, r30
    7efe:	28 1b       	sub	r18, r24
    7f00:	39 0b       	sbc	r19, r25
    7f02:	2c 17       	cp	r18, r28
    7f04:	3d 07       	cpc	r19, r29
    7f06:	4c f4       	brge	.+18     	; 0x7f1a <bin2num+0xd2>
    7f08:	20 81       	ld	r18, Z
    7f0a:	2a 30       	cpi	r18, 0x0A	; 10
    7f0c:	10 f4       	brcc	.+4      	; 0x7f12 <bin2num+0xca>
    7f0e:	20 5d       	subi	r18, 0xD0	; 208
    7f10:	01 c0       	rjmp	.+2      	; 0x7f14 <bin2num+0xcc>
    7f12:	29 5a       	subi	r18, 0xA9	; 169
    7f14:	20 83       	st	Z, r18
    7f16:	31 96       	adiw	r30, 0x01	; 1
    7f18:	f1 cf       	rjmp	.-30     	; 0x7efc <bin2num+0xb4>
    7f1a:	9e 01       	movw	r18, r28
    7f1c:	d7 ff       	sbrs	r29, 7
    7f1e:	02 c0       	rjmp	.+4      	; 0x7f24 <bin2num+0xdc>
    7f20:	20 e0       	ldi	r18, 0x00	; 0
    7f22:	30 e0       	ldi	r19, 0x00	; 0
    7f24:	c1 14       	cp	r12, r1
    7f26:	d1 04       	cpc	r13, r1
    7f28:	61 f0       	breq	.+24     	; 0x7f42 <bin2num+0xfa>
    7f2a:	61 50       	subi	r22, 0x01	; 1
    7f2c:	71 09       	sbc	r23, r1
    7f2e:	26 17       	cp	r18, r22
    7f30:	37 07       	cpc	r19, r23
    7f32:	3c f4       	brge	.+14     	; 0x7f42 <bin2num+0xfa>
    7f34:	fc 01       	movw	r30, r24
    7f36:	e2 0f       	add	r30, r18
    7f38:	f3 1f       	adc	r31, r19
    7f3a:	c0 82       	st	Z, r12
    7f3c:	21 96       	adiw	r28, 0x01	; 1
    7f3e:	2f 5f       	subi	r18, 0xFF	; 255
    7f40:	3f 4f       	sbci	r19, 0xFF	; 255
    7f42:	fc 01       	movw	r30, r24
    7f44:	e2 0f       	add	r30, r18
    7f46:	f3 1f       	adc	r31, r19
    7f48:	10 82       	st	Z, r1
    7f4a:	0e 94 69 32 	call	0x64d2	; 0x64d2 <reverse>
    7f4e:	ce 01       	movw	r24, r28
    7f50:	cd b7       	in	r28, 0x3d	; 61
    7f52:	de b7       	in	r29, 0x3e	; 62
    7f54:	eb e0       	ldi	r30, 0x0B	; 11
    7f56:	0c 94 eb e3 	jmp	0x1c7d6	; 0x1c7d6 <__epilogue_restores__+0xe>

00007f5a <pch_init>:
    7f5a:	e0 e1       	ldi	r30, 0x10	; 16
    7f5c:	fa e1       	ldi	r31, 0x1A	; 26
    7f5e:	91 83       	std	Z+1, r25	; 0x01
    7f60:	80 83       	st	Z, r24
    7f62:	13 82       	std	Z+3, r1	; 0x03
    7f64:	12 82       	std	Z+2, r1	; 0x02
    7f66:	61 50       	subi	r22, 0x01	; 1
    7f68:	71 09       	sbc	r23, r1
    7f6a:	75 83       	std	Z+5, r23	; 0x05
    7f6c:	64 83       	std	Z+4, r22	; 0x04
    7f6e:	fc 01       	movw	r30, r24
    7f70:	10 82       	st	Z, r1
    7f72:	08 95       	ret

00007f74 <pch>:
    7f74:	20 91 12 1a 	lds	r18, 0x1A12	; 0x801a12 <_pch+0x2>
    7f78:	30 91 13 1a 	lds	r19, 0x1A13	; 0x801a13 <_pch+0x3>
    7f7c:	60 91 14 1a 	lds	r22, 0x1A14	; 0x801a14 <_pch+0x4>
    7f80:	70 91 15 1a 	lds	r23, 0x1A15	; 0x801a15 <_pch+0x5>
    7f84:	40 91 10 1a 	lds	r20, 0x1A10	; 0x801a10 <_pch>
    7f88:	50 91 11 1a 	lds	r21, 0x1A11	; 0x801a11 <_pch+0x1>
    7f8c:	26 17       	cp	r18, r22
    7f8e:	37 07       	cpc	r19, r23
    7f90:	64 f4       	brge	.+24     	; 0x7faa <pch+0x36>
    7f92:	b9 01       	movw	r22, r18
    7f94:	6f 5f       	subi	r22, 0xFF	; 255
    7f96:	7f 4f       	sbci	r23, 0xFF	; 255
    7f98:	70 93 13 1a 	sts	0x1A13, r23	; 0x801a13 <_pch+0x3>
    7f9c:	60 93 12 1a 	sts	0x1A12, r22	; 0x801a12 <_pch+0x2>
    7fa0:	fa 01       	movw	r30, r20
    7fa2:	e2 0f       	add	r30, r18
    7fa4:	f3 1f       	adc	r31, r19
    7fa6:	80 83       	st	Z, r24
    7fa8:	04 c0       	rjmp	.+8      	; 0x7fb2 <pch+0x3e>
    7faa:	fa 01       	movw	r30, r20
    7fac:	e2 0f       	add	r30, r18
    7fae:	f3 1f       	adc	r31, r19
    7fb0:	10 82       	st	Z, r1
    7fb2:	80 91 12 1a 	lds	r24, 0x1A12	; 0x801a12 <_pch+0x2>
    7fb6:	90 91 13 1a 	lds	r25, 0x1A13	; 0x801a13 <_pch+0x3>
    7fba:	08 95       	ret

00007fbc <p_ntoa>:
    7fbc:	af 92       	push	r10
    7fbe:	cf 92       	push	r12
    7fc0:	df 92       	push	r13
    7fc2:	ef 92       	push	r14
    7fc4:	ff 92       	push	r15
    7fc6:	0f 93       	push	r16
    7fc8:	1f 93       	push	r17
    7fca:	cf 93       	push	r28
    7fcc:	df 93       	push	r29
    7fce:	dc 01       	movw	r26, r24
    7fd0:	eb 01       	movw	r28, r22
    7fd2:	fa 01       	movw	r30, r20
    7fd4:	b9 01       	movw	r22, r18
    7fd6:	98 01       	movw	r18, r16
    7fd8:	a6 01       	movw	r20, r12
    7fda:	9a 2d       	mov	r25, r10
    7fdc:	a5 fa       	bst	r10, 5
    7fde:	cc 24       	eor	r12, r12
    7fe0:	c0 f8       	bld	r12, 0
    7fe2:	a6 fc       	sbrc	r10, 6
    7fe4:	07 c0       	rjmp	.+14     	; 0x7ff4 <p_ntoa+0x38>
    7fe6:	a2 fc       	sbrc	r10, 2
    7fe8:	08 c0       	rjmp	.+16     	; 0x7ffa <p_ntoa+0x3e>
    7fea:	a4 fe       	sbrs	r10, 4
    7fec:	09 c0       	rjmp	.+18     	; 0x8000 <p_ntoa+0x44>
    7fee:	00 e2       	ldi	r16, 0x20	; 32
    7ff0:	10 e0       	ldi	r17, 0x00	; 0
    7ff2:	08 c0       	rjmp	.+16     	; 0x8004 <p_ntoa+0x48>
    7ff4:	0d e2       	ldi	r16, 0x2D	; 45
    7ff6:	10 e0       	ldi	r17, 0x00	; 0
    7ff8:	05 c0       	rjmp	.+10     	; 0x8004 <p_ntoa+0x48>
    7ffa:	0b e2       	ldi	r16, 0x2B	; 43
    7ffc:	10 e0       	ldi	r17, 0x00	; 0
    7ffe:	02 c0       	rjmp	.+4      	; 0x8004 <p_ntoa+0x48>
    8000:	00 e0       	ldi	r16, 0x00	; 0
    8002:	10 e0       	ldi	r17, 0x00	; 0
    8004:	95 ff       	sbrs	r25, 5
    8006:	04 c0       	rjmp	.+8      	; 0x8010 <p_ntoa+0x54>
    8008:	89 2f       	mov	r24, r25
    800a:	8a 70       	andi	r24, 0x0A	; 10
    800c:	09 f0       	breq	.+2      	; 0x8010 <p_ntoa+0x54>
    800e:	c1 2c       	mov	r12, r1
    8010:	c0 fa       	bst	r12, 0
    8012:	95 f9       	bld	r25, 5
    8014:	89 2f       	mov	r24, r25
    8016:	82 70       	andi	r24, 0x02	; 2
    8018:	c8 2e       	mov	r12, r24
    801a:	91 fd       	sbrc	r25, 1
    801c:	02 c0       	rjmp	.+4      	; 0x8022 <p_ntoa+0x66>
    801e:	40 e0       	ldi	r20, 0x00	; 0
    8020:	50 e0       	ldi	r21, 0x00	; 0
    8022:	89 2f       	mov	r24, r25
    8024:	83 70       	andi	r24, 0x03	; 3
    8026:	11 f4       	brne	.+4      	; 0x802c <p_ntoa+0x70>
    8028:	41 e0       	ldi	r20, 0x01	; 1
    802a:	50 e0       	ldi	r21, 0x00	; 0
    802c:	90 ff       	sbrs	r25, 0
    802e:	0c c0       	rjmp	.+24     	; 0x8048 <p_ntoa+0x8c>
    8030:	95 fd       	sbrc	r25, 5
    8032:	05 c0       	rjmp	.+10     	; 0x803e <p_ntoa+0x82>
    8034:	c1 10       	cpse	r12, r1
    8036:	08 c0       	rjmp	.+16     	; 0x8048 <p_ntoa+0x8c>
    8038:	41 e0       	ldi	r20, 0x01	; 1
    803a:	50 e0       	ldi	r21, 0x00	; 0
    803c:	05 c0       	rjmp	.+10     	; 0x8048 <p_ntoa+0x8c>
    803e:	94 75       	andi	r25, 0x54	; 84
    8040:	a7 01       	movw	r20, r14
    8042:	11 f0       	breq	.+4      	; 0x8048 <p_ntoa+0x8c>
    8044:	41 50       	subi	r20, 0x01	; 1
    8046:	51 09       	sbc	r21, r1
    8048:	68 01       	movw	r12, r16
    804a:	7e 01       	movw	r14, r28
    804c:	8d 01       	movw	r16, r26
    804e:	cf 01       	movw	r24, r30
    8050:	fb de       	rcall	.-522    	; 0x7e48 <bin2num>
    8052:	df 91       	pop	r29
    8054:	cf 91       	pop	r28
    8056:	1f 91       	pop	r17
    8058:	0f 91       	pop	r16
    805a:	ff 90       	pop	r15
    805c:	ef 90       	pop	r14
    805e:	df 90       	pop	r13
    8060:	cf 90       	pop	r12
    8062:	af 90       	pop	r10
    8064:	08 95       	ret

00008066 <p_ftoa>:
    8066:	2f 92       	push	r2
    8068:	3f 92       	push	r3
    806a:	4f 92       	push	r4
    806c:	5f 92       	push	r5
    806e:	6f 92       	push	r6
    8070:	7f 92       	push	r7
    8072:	8f 92       	push	r8
    8074:	9f 92       	push	r9
    8076:	af 92       	push	r10
    8078:	bf 92       	push	r11
    807a:	cf 92       	push	r12
    807c:	ef 92       	push	r14
    807e:	ff 92       	push	r15
    8080:	0f 93       	push	r16
    8082:	1f 93       	push	r17
    8084:	cf 93       	push	r28
    8086:	df 93       	push	r29
    8088:	4b 01       	movw	r8, r22
    808a:	5c 01       	movw	r10, r24
    808c:	1a 01       	movw	r2, r20
    808e:	38 01       	movw	r6, r16
    8090:	c6 fa       	bst	r12, 6
    8092:	cc 27       	eor	r28, r28
    8094:	c0 f9       	bld	r28, 0
    8096:	b9 01       	movw	r22, r18
    8098:	ca 01       	movw	r24, r20
    809a:	5f df       	rcall	.-322    	; 0x7f5a <pch_init>
    809c:	20 e0       	ldi	r18, 0x00	; 0
    809e:	30 e0       	ldi	r19, 0x00	; 0
    80a0:	a9 01       	movw	r20, r18
    80a2:	c5 01       	movw	r24, r10
    80a4:	b4 01       	movw	r22, r8
    80a6:	0e 94 77 e4 	call	0x1c8ee	; 0x1c8ee <__cmpsf2>
    80aa:	87 ff       	sbrs	r24, 7
    80ac:	05 c0       	rjmp	.+10     	; 0x80b8 <p_ftoa+0x52>
    80ae:	b7 fa       	bst	r11, 7
    80b0:	b0 94       	com	r11
    80b2:	b7 f8       	bld	r11, 7
    80b4:	b0 94       	com	r11
    80b6:	c1 e0       	ldi	r28, 0x01	; 1
    80b8:	c0 fb       	bst	r28, 0
    80ba:	c6 f8       	bld	r12, 6
    80bc:	c6 fe       	sbrs	r12, 6
    80be:	02 c0       	rjmp	.+4      	; 0x80c4 <p_ftoa+0x5e>
    80c0:	8d e2       	ldi	r24, 0x2D	; 45
    80c2:	07 c0       	rjmp	.+14     	; 0x80d2 <p_ftoa+0x6c>
    80c4:	c2 fe       	sbrs	r12, 2
    80c6:	02 c0       	rjmp	.+4      	; 0x80cc <p_ftoa+0x66>
    80c8:	8b e2       	ldi	r24, 0x2B	; 43
    80ca:	03 c0       	rjmp	.+6      	; 0x80d2 <p_ftoa+0x6c>
    80cc:	c4 fe       	sbrs	r12, 4
    80ce:	02 c0       	rjmp	.+4      	; 0x80d4 <p_ftoa+0x6e>
    80d0:	80 e2       	ldi	r24, 0x20	; 32
    80d2:	50 df       	rcall	.-352    	; 0x7f74 <pch>
    80d4:	e7 01       	movw	r28, r14
    80d6:	f7 fe       	sbrs	r15, 7
    80d8:	02 c0       	rjmp	.+4      	; 0x80de <p_ftoa+0x78>
    80da:	c0 e0       	ldi	r28, 0x00	; 0
    80dc:	d0 e0       	ldi	r29, 0x00	; 0
    80de:	20 e0       	ldi	r18, 0x00	; 0
    80e0:	30 e0       	ldi	r19, 0x00	; 0
    80e2:	a9 01       	movw	r20, r18
    80e4:	c5 01       	movw	r24, r10
    80e6:	b4 01       	movw	r22, r8
    80e8:	0e 94 77 e4 	call	0x1c8ee	; 0x1c8ee <__cmpsf2>
    80ec:	88 23       	and	r24, r24
    80ee:	d1 f1       	breq	.+116    	; 0x8164 <p_ftoa+0xfe>
    80f0:	c1 fe       	sbrs	r12, 1
    80f2:	11 c0       	rjmp	.+34     	; 0x8116 <p_ftoa+0xb0>
    80f4:	8e 01       	movw	r16, r28
    80f6:	60 e0       	ldi	r22, 0x00	; 0
    80f8:	70 e0       	ldi	r23, 0x00	; 0
    80fa:	80 e0       	ldi	r24, 0x00	; 0
    80fc:	9f e3       	ldi	r25, 0x3F	; 63
    80fe:	01 15       	cp	r16, r1
    8100:	11 05       	cpc	r17, r1
    8102:	69 f0       	breq	.+26     	; 0x811e <p_ftoa+0xb8>
    8104:	20 e0       	ldi	r18, 0x00	; 0
    8106:	30 e0       	ldi	r19, 0x00	; 0
    8108:	40 e2       	ldi	r20, 0x20	; 32
    810a:	51 e4       	ldi	r21, 0x41	; 65
    810c:	0e 94 7b e4 	call	0x1c8f6	; 0x1c8f6 <__divsf3>
    8110:	01 50       	subi	r16, 0x01	; 1
    8112:	11 09       	sbc	r17, r1
    8114:	f4 cf       	rjmp	.-24     	; 0x80fe <p_ftoa+0x98>
    8116:	60 e0       	ldi	r22, 0x00	; 0
    8118:	70 e0       	ldi	r23, 0x00	; 0
    811a:	80 e0       	ldi	r24, 0x00	; 0
    811c:	9f e3       	ldi	r25, 0x3F	; 63
    811e:	9b 01       	movw	r18, r22
    8120:	ac 01       	movw	r20, r24
    8122:	c5 01       	movw	r24, r10
    8124:	b4 01       	movw	r22, r8
    8126:	0e 94 13 e4 	call	0x1c826	; 0x1c826 <__addsf3>
    812a:	4b 01       	movw	r8, r22
    812c:	5c 01       	movw	r10, r24
    812e:	ee 24       	eor	r14, r14
    8130:	e3 94       	inc	r14
    8132:	f1 2c       	mov	r15, r1
    8134:	20 e0       	ldi	r18, 0x00	; 0
    8136:	30 e0       	ldi	r19, 0x00	; 0
    8138:	40 e2       	ldi	r20, 0x20	; 32
    813a:	51 e4       	ldi	r21, 0x41	; 65
    813c:	c5 01       	movw	r24, r10
    813e:	b4 01       	movw	r22, r8
    8140:	0e 94 c6 e5 	call	0x1cb8c	; 0x1cb8c <__gesf2>
    8144:	87 fd       	sbrc	r24, 7
    8146:	11 c0       	rjmp	.+34     	; 0x816a <p_ftoa+0x104>
    8148:	2f ef       	ldi	r18, 0xFF	; 255
    814a:	e2 1a       	sub	r14, r18
    814c:	f2 0a       	sbc	r15, r18
    814e:	20 e0       	ldi	r18, 0x00	; 0
    8150:	30 e0       	ldi	r19, 0x00	; 0
    8152:	40 e2       	ldi	r20, 0x20	; 32
    8154:	51 e4       	ldi	r21, 0x41	; 65
    8156:	c5 01       	movw	r24, r10
    8158:	b4 01       	movw	r22, r8
    815a:	0e 94 7b e4 	call	0x1c8f6	; 0x1c8f6 <__divsf3>
    815e:	4b 01       	movw	r8, r22
    8160:	5c 01       	movw	r10, r24
    8162:	e8 cf       	rjmp	.-48     	; 0x8134 <p_ftoa+0xce>
    8164:	ee 24       	eor	r14, r14
    8166:	e3 94       	inc	r14
    8168:	f1 2c       	mov	r15, r1
    816a:	8c 2d       	mov	r24, r12
    816c:	88 72       	andi	r24, 0x28	; 40
    816e:	80 32       	cpi	r24, 0x20	; 32
    8170:	b9 f4       	brne	.+46     	; 0x81a0 <p_ftoa+0x13a>
    8172:	83 01       	movw	r16, r6
    8174:	0e 19       	sub	r16, r14
    8176:	1f 09       	sbc	r17, r15
    8178:	80 91 12 1a 	lds	r24, 0x1A12	; 0x801a12 <_pch+0x2>
    817c:	90 91 13 1a 	lds	r25, 0x1A13	; 0x801a13 <_pch+0x3>
    8180:	08 1b       	sub	r16, r24
    8182:	19 0b       	sbc	r17, r25
    8184:	c1 fe       	sbrs	r12, 1
    8186:	06 c0       	rjmp	.+12     	; 0x8194 <p_ftoa+0x12e>
    8188:	20 97       	sbiw	r28, 0x00	; 0
    818a:	21 f0       	breq	.+8      	; 0x8194 <p_ftoa+0x12e>
    818c:	0c 1b       	sub	r16, r28
    818e:	1d 0b       	sbc	r17, r29
    8190:	01 50       	subi	r16, 0x01	; 1
    8192:	11 09       	sbc	r17, r1
    8194:	10 16       	cp	r1, r16
    8196:	11 06       	cpc	r1, r17
    8198:	1c f4       	brge	.+6      	; 0x81a0 <p_ftoa+0x13a>
    819a:	80 e3       	ldi	r24, 0x30	; 48
    819c:	eb de       	rcall	.-554    	; 0x7f74 <pch>
    819e:	f8 cf       	rjmp	.-16     	; 0x8190 <p_ftoa+0x12a>
    81a0:	c5 01       	movw	r24, r10
    81a2:	b4 01       	movw	r22, r8
    81a4:	0e 94 e3 e4 	call	0x1c9c6	; 0x1c9c6 <__fixsfsi>
    81a8:	2b 01       	movw	r4, r22
    81aa:	3c 01       	movw	r6, r24
    81ac:	80 e3       	ldi	r24, 0x30	; 48
    81ae:	84 0d       	add	r24, r4
    81b0:	e1 de       	rcall	.-574    	; 0x7f74 <pch>
    81b2:	b2 01       	movw	r22, r4
    81b4:	55 0c       	add	r5, r5
    81b6:	88 0b       	sbc	r24, r24
    81b8:	99 0b       	sbc	r25, r25
    81ba:	0e 94 16 e5 	call	0x1ca2c	; 0x1ca2c <__floatsisf>
    81be:	9b 01       	movw	r18, r22
    81c0:	ac 01       	movw	r20, r24
    81c2:	c5 01       	movw	r24, r10
    81c4:	b4 01       	movw	r22, r8
    81c6:	0e 94 12 e4 	call	0x1c824	; 0x1c824 <__subsf3>
    81ca:	21 e0       	ldi	r18, 0x01	; 1
    81cc:	e2 1a       	sub	r14, r18
    81ce:	f1 08       	sbc	r15, r1
    81d0:	20 e0       	ldi	r18, 0x00	; 0
    81d2:	30 e0       	ldi	r19, 0x00	; 0
    81d4:	40 e2       	ldi	r20, 0x20	; 32
    81d6:	51 e4       	ldi	r21, 0x41	; 65
    81d8:	0e 94 ca e5 	call	0x1cb94	; 0x1cb94 <__mulsf3>
    81dc:	4b 01       	movw	r8, r22
    81de:	5c 01       	movw	r10, r24
    81e0:	e1 14       	cp	r14, r1
    81e2:	f1 04       	cpc	r15, r1
    81e4:	e9 f6       	brne	.-70     	; 0x81a0 <p_ftoa+0x13a>
    81e6:	c1 fc       	sbrc	r12, 1
    81e8:	1c c0       	rjmp	.+56     	; 0x8222 <p_ftoa+0x1bc>
    81ea:	80 e0       	ldi	r24, 0x00	; 0
    81ec:	c3 de       	rcall	.-634    	; 0x7f74 <pch>
    81ee:	f1 01       	movw	r30, r2
    81f0:	01 90       	ld	r0, Z+
    81f2:	00 20       	and	r0, r0
    81f4:	e9 f7       	brne	.-6      	; 0x81f0 <p_ftoa+0x18a>
    81f6:	31 97       	sbiw	r30, 0x01	; 1
    81f8:	cf 01       	movw	r24, r30
    81fa:	82 19       	sub	r24, r2
    81fc:	93 09       	sbc	r25, r3
    81fe:	df 91       	pop	r29
    8200:	cf 91       	pop	r28
    8202:	1f 91       	pop	r17
    8204:	0f 91       	pop	r16
    8206:	ff 90       	pop	r15
    8208:	ef 90       	pop	r14
    820a:	cf 90       	pop	r12
    820c:	bf 90       	pop	r11
    820e:	af 90       	pop	r10
    8210:	9f 90       	pop	r9
    8212:	8f 90       	pop	r8
    8214:	7f 90       	pop	r7
    8216:	6f 90       	pop	r6
    8218:	5f 90       	pop	r5
    821a:	4f 90       	pop	r4
    821c:	3f 90       	pop	r3
    821e:	2f 90       	pop	r2
    8220:	08 95       	ret
    8222:	20 97       	sbiw	r28, 0x00	; 0
    8224:	11 f3       	breq	.-60     	; 0x81ea <p_ftoa+0x184>
    8226:	8e e2       	ldi	r24, 0x2E	; 46
    8228:	a5 de       	rcall	.-694    	; 0x7f74 <pch>
    822a:	c5 01       	movw	r24, r10
    822c:	b4 01       	movw	r22, r8
    822e:	0e 94 e3 e4 	call	0x1c9c6	; 0x1c9c6 <__fixsfsi>
    8232:	2b 01       	movw	r4, r22
    8234:	3c 01       	movw	r6, r24
    8236:	07 2e       	mov	r0, r23
    8238:	00 0c       	add	r0, r0
    823a:	88 0b       	sbc	r24, r24
    823c:	99 0b       	sbc	r25, r25
    823e:	0e 94 16 e5 	call	0x1ca2c	; 0x1ca2c <__floatsisf>
    8242:	9b 01       	movw	r18, r22
    8244:	ac 01       	movw	r20, r24
    8246:	c5 01       	movw	r24, r10
    8248:	b4 01       	movw	r22, r8
    824a:	0e 94 12 e4 	call	0x1c824	; 0x1c824 <__subsf3>
    824e:	4b 01       	movw	r8, r22
    8250:	5c 01       	movw	r10, r24
    8252:	80 e3       	ldi	r24, 0x30	; 48
    8254:	84 0d       	add	r24, r4
    8256:	8e de       	rcall	.-740    	; 0x7f74 <pch>
    8258:	21 97       	sbiw	r28, 0x01	; 1
    825a:	20 e0       	ldi	r18, 0x00	; 0
    825c:	30 e0       	ldi	r19, 0x00	; 0
    825e:	40 e2       	ldi	r20, 0x20	; 32
    8260:	51 e4       	ldi	r21, 0x41	; 65
    8262:	c5 01       	movw	r24, r10
    8264:	b4 01       	movw	r22, r8
    8266:	0e 94 ca e5 	call	0x1cb94	; 0x1cb94 <__mulsf3>
    826a:	4b 01       	movw	r8, r22
    826c:	5c 01       	movw	r10, r24
    826e:	20 97       	sbiw	r28, 0x00	; 0
    8270:	e1 f6       	brne	.-72     	; 0x822a <p_ftoa+0x1c4>
    8272:	bb cf       	rjmp	.-138    	; 0x81ea <p_ftoa+0x184>

00008274 <p_etoa>:
    8274:	ad e0       	ldi	r26, 0x0D	; 13
    8276:	b0 e0       	ldi	r27, 0x00	; 0
    8278:	e0 e4       	ldi	r30, 0x40	; 64
    827a:	f1 e4       	ldi	r31, 0x41	; 65
    827c:	0c 94 c8 e3 	jmp	0x1c790	; 0x1c790 <__prologue_saves__>
    8280:	4b 01       	movw	r8, r22
    8282:	5c 01       	movw	r10, r24
    8284:	5b 87       	std	Y+11, r21	; 0x0b
    8286:	4a 87       	std	Y+10, r20	; 0x0a
    8288:	1d 87       	std	Y+13, r17	; 0x0d
    828a:	0c 87       	std	Y+12, r16	; 0x0c
    828c:	3c 2c       	mov	r3, r12
    828e:	c6 fa       	bst	r12, 6
    8290:	11 27       	eor	r17, r17
    8292:	10 f9       	bld	r17, 0
    8294:	b9 01       	movw	r22, r18
    8296:	ca 01       	movw	r24, r20
    8298:	60 de       	rcall	.-832    	; 0x7f5a <pch_init>
    829a:	20 e0       	ldi	r18, 0x00	; 0
    829c:	30 e0       	ldi	r19, 0x00	; 0
    829e:	a9 01       	movw	r20, r18
    82a0:	c5 01       	movw	r24, r10
    82a2:	b4 01       	movw	r22, r8
    82a4:	0e 94 77 e4 	call	0x1c8ee	; 0x1c8ee <__cmpsf2>
    82a8:	87 ff       	sbrs	r24, 7
    82aa:	05 c0       	rjmp	.+10     	; 0x82b6 <p_etoa+0x42>
    82ac:	b7 fa       	bst	r11, 7
    82ae:	b0 94       	com	r11
    82b0:	b7 f8       	bld	r11, 7
    82b2:	b0 94       	com	r11
    82b4:	11 e0       	ldi	r17, 0x01	; 1
    82b6:	10 fb       	bst	r17, 0
    82b8:	36 f8       	bld	r3, 6
    82ba:	36 fe       	sbrs	r3, 6
    82bc:	02 c0       	rjmp	.+4      	; 0x82c2 <p_etoa+0x4e>
    82be:	8d e2       	ldi	r24, 0x2D	; 45
    82c0:	07 c0       	rjmp	.+14     	; 0x82d0 <p_etoa+0x5c>
    82c2:	32 fe       	sbrs	r3, 2
    82c4:	02 c0       	rjmp	.+4      	; 0x82ca <p_etoa+0x56>
    82c6:	8b e2       	ldi	r24, 0x2B	; 43
    82c8:	03 c0       	rjmp	.+6      	; 0x82d0 <p_etoa+0x5c>
    82ca:	34 fe       	sbrs	r3, 4
    82cc:	02 c0       	rjmp	.+4      	; 0x82d2 <p_etoa+0x5e>
    82ce:	80 e2       	ldi	r24, 0x20	; 32
    82d0:	51 de       	rcall	.-862    	; 0x7f74 <pch>
    82d2:	37 01       	movw	r6, r14
    82d4:	f7 fe       	sbrs	r15, 7
    82d6:	02 c0       	rjmp	.+4      	; 0x82dc <p_etoa+0x68>
    82d8:	61 2c       	mov	r6, r1
    82da:	71 2c       	mov	r7, r1
    82dc:	19 86       	std	Y+9, r1	; 0x09
    82de:	18 86       	std	Y+8, r1	; 0x08
    82e0:	20 e0       	ldi	r18, 0x00	; 0
    82e2:	30 e0       	ldi	r19, 0x00	; 0
    82e4:	a9 01       	movw	r20, r18
    82e6:	c5 01       	movw	r24, r10
    82e8:	b4 01       	movw	r22, r8
    82ea:	0e 94 77 e4 	call	0x1c8ee	; 0x1c8ee <__cmpsf2>
    82ee:	23 2d       	mov	r18, r3
    82f0:	22 70       	andi	r18, 0x02	; 2
    82f2:	22 2e       	mov	r2, r18
    82f4:	88 23       	and	r24, r24
    82f6:	09 f4       	brne	.+2      	; 0x82fa <p_etoa+0x86>
    82f8:	70 c0       	rjmp	.+224    	; 0x83da <p_etoa+0x166>
    82fa:	22 23       	and	r18, r18
    82fc:	b1 f0       	breq	.+44     	; 0x832a <p_etoa+0xb6>
    82fe:	83 01       	movw	r16, r6
    8300:	c1 2c       	mov	r12, r1
    8302:	d1 2c       	mov	r13, r1
    8304:	e1 2c       	mov	r14, r1
    8306:	2f e3       	ldi	r18, 0x3F	; 63
    8308:	f2 2e       	mov	r15, r18
    830a:	01 15       	cp	r16, r1
    830c:	11 05       	cpc	r17, r1
    830e:	91 f0       	breq	.+36     	; 0x8334 <p_etoa+0xc0>
    8310:	20 e0       	ldi	r18, 0x00	; 0
    8312:	30 e0       	ldi	r19, 0x00	; 0
    8314:	40 e2       	ldi	r20, 0x20	; 32
    8316:	51 e4       	ldi	r21, 0x41	; 65
    8318:	c7 01       	movw	r24, r14
    831a:	b6 01       	movw	r22, r12
    831c:	0e 94 7b e4 	call	0x1c8f6	; 0x1c8f6 <__divsf3>
    8320:	6b 01       	movw	r12, r22
    8322:	7c 01       	movw	r14, r24
    8324:	01 50       	subi	r16, 0x01	; 1
    8326:	11 09       	sbc	r17, r1
    8328:	f0 cf       	rjmp	.-32     	; 0x830a <p_etoa+0x96>
    832a:	c1 2c       	mov	r12, r1
    832c:	d1 2c       	mov	r13, r1
    832e:	e1 2c       	mov	r14, r1
    8330:	9f e3       	ldi	r25, 0x3F	; 63
    8332:	f9 2e       	mov	r15, r25
    8334:	41 2c       	mov	r4, r1
    8336:	51 2c       	mov	r5, r1
    8338:	82 01       	movw	r16, r4
    833a:	01 50       	subi	r16, 0x01	; 1
    833c:	11 09       	sbc	r17, r1
    833e:	20 e0       	ldi	r18, 0x00	; 0
    8340:	30 e0       	ldi	r19, 0x00	; 0
    8342:	40 e8       	ldi	r20, 0x80	; 128
    8344:	5f e3       	ldi	r21, 0x3F	; 63
    8346:	c5 01       	movw	r24, r10
    8348:	b4 01       	movw	r22, r8
    834a:	0e 94 77 e4 	call	0x1c8ee	; 0x1c8ee <__cmpsf2>
    834e:	87 ff       	sbrs	r24, 7
    8350:	0c c0       	rjmp	.+24     	; 0x836a <p_etoa+0xf6>
    8352:	20 e0       	ldi	r18, 0x00	; 0
    8354:	30 e0       	ldi	r19, 0x00	; 0
    8356:	40 e2       	ldi	r20, 0x20	; 32
    8358:	51 e4       	ldi	r21, 0x41	; 65
    835a:	c5 01       	movw	r24, r10
    835c:	b4 01       	movw	r22, r8
    835e:	0e 94 ca e5 	call	0x1cb94	; 0x1cb94 <__mulsf3>
    8362:	4b 01       	movw	r8, r22
    8364:	5c 01       	movw	r10, r24
    8366:	28 01       	movw	r4, r16
    8368:	e7 cf       	rjmp	.-50     	; 0x8338 <p_etoa+0xc4>
    836a:	82 01       	movw	r16, r4
    836c:	0f 5f       	subi	r16, 0xFF	; 255
    836e:	1f 4f       	sbci	r17, 0xFF	; 255
    8370:	20 e0       	ldi	r18, 0x00	; 0
    8372:	30 e0       	ldi	r19, 0x00	; 0
    8374:	40 e2       	ldi	r20, 0x20	; 32
    8376:	51 e4       	ldi	r21, 0x41	; 65
    8378:	c5 01       	movw	r24, r10
    837a:	b4 01       	movw	r22, r8
    837c:	0e 94 c6 e5 	call	0x1cb8c	; 0x1cb8c <__gesf2>
    8380:	87 fd       	sbrc	r24, 7
    8382:	0c c0       	rjmp	.+24     	; 0x839c <p_etoa+0x128>
    8384:	20 e0       	ldi	r18, 0x00	; 0
    8386:	30 e0       	ldi	r19, 0x00	; 0
    8388:	40 e2       	ldi	r20, 0x20	; 32
    838a:	51 e4       	ldi	r21, 0x41	; 65
    838c:	c5 01       	movw	r24, r10
    838e:	b4 01       	movw	r22, r8
    8390:	0e 94 7b e4 	call	0x1c8f6	; 0x1c8f6 <__divsf3>
    8394:	4b 01       	movw	r8, r22
    8396:	5c 01       	movw	r10, r24
    8398:	28 01       	movw	r4, r16
    839a:	e7 cf       	rjmp	.-50     	; 0x836a <p_etoa+0xf6>
    839c:	a7 01       	movw	r20, r14
    839e:	96 01       	movw	r18, r12
    83a0:	c5 01       	movw	r24, r10
    83a2:	b4 01       	movw	r22, r8
    83a4:	0e 94 13 e4 	call	0x1c826	; 0x1c826 <__addsf3>
    83a8:	4b 01       	movw	r8, r22
    83aa:	5c 01       	movw	r10, r24
    83ac:	82 01       	movw	r16, r4
    83ae:	3f ef       	ldi	r19, 0xFF	; 255
    83b0:	43 1a       	sub	r4, r19
    83b2:	53 0a       	sbc	r5, r19
    83b4:	20 e0       	ldi	r18, 0x00	; 0
    83b6:	30 e0       	ldi	r19, 0x00	; 0
    83b8:	40 e2       	ldi	r20, 0x20	; 32
    83ba:	51 e4       	ldi	r21, 0x41	; 65
    83bc:	0e 94 c6 e5 	call	0x1cb8c	; 0x1cb8c <__gesf2>
    83c0:	87 fd       	sbrc	r24, 7
    83c2:	09 c0       	rjmp	.+18     	; 0x83d6 <p_etoa+0x162>
    83c4:	20 e0       	ldi	r18, 0x00	; 0
    83c6:	30 e0       	ldi	r19, 0x00	; 0
    83c8:	40 e2       	ldi	r20, 0x20	; 32
    83ca:	51 e4       	ldi	r21, 0x41	; 65
    83cc:	c5 01       	movw	r24, r10
    83ce:	b4 01       	movw	r22, r8
    83d0:	0e 94 7b e4 	call	0x1c8f6	; 0x1c8f6 <__divsf3>
    83d4:	e9 cf       	rjmp	.-46     	; 0x83a8 <p_etoa+0x134>
    83d6:	08 87       	std	Y+8, r16	; 0x08
    83d8:	19 87       	std	Y+9, r17	; 0x09
    83da:	85 e6       	ldi	r24, 0x65	; 101
    83dc:	89 83       	std	Y+1, r24	; 0x01
    83de:	88 85       	ldd	r24, Y+8	; 0x08
    83e0:	99 85       	ldd	r25, Y+9	; 0x09
    83e2:	97 ff       	sbrs	r25, 7
    83e4:	08 c0       	rjmp	.+16     	; 0x83f6 <p_etoa+0x182>
    83e6:	91 95       	neg	r25
    83e8:	81 95       	neg	r24
    83ea:	91 09       	sbc	r25, r1
    83ec:	99 87       	std	Y+9, r25	; 0x09
    83ee:	88 87       	std	Y+8, r24	; 0x08
    83f0:	8d e2       	ldi	r24, 0x2D	; 45
    83f2:	90 e0       	ldi	r25, 0x00	; 0
    83f4:	02 c0       	rjmp	.+4      	; 0x83fa <p_etoa+0x186>
    83f6:	8b e2       	ldi	r24, 0x2B	; 43
    83f8:	90 e0       	ldi	r25, 0x00	; 0
    83fa:	6c 01       	movw	r12, r24
    83fc:	82 e0       	ldi	r24, 0x02	; 2
    83fe:	e8 2e       	mov	r14, r24
    8400:	f1 2c       	mov	r15, r1
    8402:	8e 01       	movw	r16, r28
    8404:	08 5f       	subi	r16, 0xF8	; 248
    8406:	1f 4f       	sbci	r17, 0xFF	; 255
    8408:	2a e0       	ldi	r18, 0x0A	; 10
    840a:	30 e0       	ldi	r19, 0x00	; 0
    840c:	42 e0       	ldi	r20, 0x02	; 2
    840e:	50 e0       	ldi	r21, 0x00	; 0
    8410:	65 e0       	ldi	r22, 0x05	; 5
    8412:	70 e0       	ldi	r23, 0x00	; 0
    8414:	ce 01       	movw	r24, r28
    8416:	02 96       	adiw	r24, 0x02	; 2
    8418:	17 dd       	rcall	.-1490   	; 0x7e48 <bin2num>
    841a:	9c 01       	movw	r18, r24
    841c:	93 2d       	mov	r25, r3
    841e:	98 72       	andi	r25, 0x28	; 40
    8420:	90 32       	cpi	r25, 0x20	; 32
    8422:	61 f0       	breq	.+24     	; 0x843c <p_etoa+0x1c8>
    8424:	c5 01       	movw	r24, r10
    8426:	b4 01       	movw	r22, r8
    8428:	0e 94 e3 e4 	call	0x1c9c6	; 0x1c9c6 <__fixsfsi>
    842c:	6b 01       	movw	r12, r22
    842e:	7c 01       	movw	r14, r24
    8430:	80 e3       	ldi	r24, 0x30	; 48
    8432:	8c 0d       	add	r24, r12
    8434:	9f dd       	rcall	.-1218   	; 0x7f74 <pch>
    8436:	21 10       	cpse	r2, r1
    8438:	20 c0       	rjmp	.+64     	; 0x847a <p_etoa+0x206>
    843a:	5e c0       	rjmp	.+188    	; 0x84f8 <p_etoa+0x284>
    843c:	80 91 12 1a 	lds	r24, 0x1A12	; 0x801a12 <_pch+0x2>
    8440:	90 91 13 1a 	lds	r25, 0x1A13	; 0x801a13 <_pch+0x3>
    8444:	0c 85       	ldd	r16, Y+12	; 0x0c
    8446:	1d 85       	ldd	r17, Y+13	; 0x0d
    8448:	08 1b       	sub	r16, r24
    844a:	19 0b       	sbc	r17, r25
    844c:	22 20       	and	r2, r2
    844e:	41 f0       	breq	.+16     	; 0x8460 <p_etoa+0x1ec>
    8450:	61 14       	cp	r6, r1
    8452:	71 04       	cpc	r7, r1
    8454:	29 f0       	breq	.+10     	; 0x8460 <p_etoa+0x1ec>
    8456:	06 19       	sub	r16, r6
    8458:	17 09       	sbc	r17, r7
    845a:	06 50       	subi	r16, 0x06	; 6
    845c:	11 09       	sbc	r17, r1
    845e:	02 c0       	rjmp	.+4      	; 0x8464 <p_etoa+0x1f0>
    8460:	05 50       	subi	r16, 0x05	; 5
    8462:	11 09       	sbc	r17, r1
    8464:	24 30       	cpi	r18, 0x04	; 4
    8466:	31 05       	cpc	r19, r1
    8468:	14 f0       	brlt	.+4      	; 0x846e <p_etoa+0x1fa>
    846a:	01 50       	subi	r16, 0x01	; 1
    846c:	11 09       	sbc	r17, r1
    846e:	10 16       	cp	r1, r16
    8470:	11 06       	cpc	r1, r17
    8472:	c4 f6       	brge	.-80     	; 0x8424 <p_etoa+0x1b0>
    8474:	80 e3       	ldi	r24, 0x30	; 48
    8476:	7e dd       	rcall	.-1284   	; 0x7f74 <pch>
    8478:	f8 cf       	rjmp	.-16     	; 0x846a <p_etoa+0x1f6>
    847a:	61 14       	cp	r6, r1
    847c:	71 04       	cpc	r7, r1
    847e:	09 f4       	brne	.+2      	; 0x8482 <p_etoa+0x20e>
    8480:	3b c0       	rjmp	.+118    	; 0x84f8 <p_etoa+0x284>
    8482:	b6 01       	movw	r22, r12
    8484:	dd 0c       	add	r13, r13
    8486:	88 0b       	sbc	r24, r24
    8488:	99 0b       	sbc	r25, r25
    848a:	0e 94 16 e5 	call	0x1ca2c	; 0x1ca2c <__floatsisf>
    848e:	9b 01       	movw	r18, r22
    8490:	ac 01       	movw	r20, r24
    8492:	c5 01       	movw	r24, r10
    8494:	b4 01       	movw	r22, r8
    8496:	0e 94 12 e4 	call	0x1c824	; 0x1c824 <__subsf3>
    849a:	20 e0       	ldi	r18, 0x00	; 0
    849c:	30 e0       	ldi	r19, 0x00	; 0
    849e:	40 e2       	ldi	r20, 0x20	; 32
    84a0:	51 e4       	ldi	r21, 0x41	; 65
    84a2:	0e 94 ca e5 	call	0x1cb94	; 0x1cb94 <__mulsf3>
    84a6:	6b 01       	movw	r12, r22
    84a8:	7c 01       	movw	r14, r24
    84aa:	8e e2       	ldi	r24, 0x2E	; 46
    84ac:	63 dd       	rcall	.-1338   	; 0x7f74 <pch>
    84ae:	c7 01       	movw	r24, r14
    84b0:	b6 01       	movw	r22, r12
    84b2:	0e 94 e3 e4 	call	0x1c9c6	; 0x1c9c6 <__fixsfsi>
    84b6:	4b 01       	movw	r8, r22
    84b8:	5c 01       	movw	r10, r24
    84ba:	07 2e       	mov	r0, r23
    84bc:	00 0c       	add	r0, r0
    84be:	88 0b       	sbc	r24, r24
    84c0:	99 0b       	sbc	r25, r25
    84c2:	0e 94 16 e5 	call	0x1ca2c	; 0x1ca2c <__floatsisf>
    84c6:	9b 01       	movw	r18, r22
    84c8:	ac 01       	movw	r20, r24
    84ca:	c7 01       	movw	r24, r14
    84cc:	b6 01       	movw	r22, r12
    84ce:	0e 94 12 e4 	call	0x1c824	; 0x1c824 <__subsf3>
    84d2:	6b 01       	movw	r12, r22
    84d4:	7c 01       	movw	r14, r24
    84d6:	80 e3       	ldi	r24, 0x30	; 48
    84d8:	88 0d       	add	r24, r8
    84da:	4c dd       	rcall	.-1384   	; 0x7f74 <pch>
    84dc:	20 e0       	ldi	r18, 0x00	; 0
    84de:	30 e0       	ldi	r19, 0x00	; 0
    84e0:	40 e2       	ldi	r20, 0x20	; 32
    84e2:	51 e4       	ldi	r21, 0x41	; 65
    84e4:	c7 01       	movw	r24, r14
    84e6:	b6 01       	movw	r22, r12
    84e8:	0e 94 ca e5 	call	0x1cb94	; 0x1cb94 <__mulsf3>
    84ec:	6b 01       	movw	r12, r22
    84ee:	7c 01       	movw	r14, r24
    84f0:	81 e0       	ldi	r24, 0x01	; 1
    84f2:	68 1a       	sub	r6, r24
    84f4:	71 08       	sbc	r7, r1
    84f6:	d9 f6       	brne	.-74     	; 0x84ae <p_etoa+0x23a>
    84f8:	8e 01       	movw	r16, r28
    84fa:	0f 5f       	subi	r16, 0xFF	; 255
    84fc:	1f 4f       	sbci	r17, 0xFF	; 255
    84fe:	f8 01       	movw	r30, r16
    8500:	81 91       	ld	r24, Z+
    8502:	8f 01       	movw	r16, r30
    8504:	88 23       	and	r24, r24
    8506:	11 f0       	breq	.+4      	; 0x850c <p_etoa+0x298>
    8508:	35 dd       	rcall	.-1430   	; 0x7f74 <pch>
    850a:	f9 cf       	rjmp	.-14     	; 0x84fe <p_etoa+0x28a>
    850c:	33 dd       	rcall	.-1434   	; 0x7f74 <pch>
    850e:	ea 85       	ldd	r30, Y+10	; 0x0a
    8510:	fb 85       	ldd	r31, Y+11	; 0x0b
    8512:	01 90       	ld	r0, Z+
    8514:	00 20       	and	r0, r0
    8516:	e9 f7       	brne	.-6      	; 0x8512 <p_etoa+0x29e>
    8518:	cf 01       	movw	r24, r30
    851a:	01 97       	sbiw	r24, 0x01	; 1
    851c:	2a 85       	ldd	r18, Y+10	; 0x0a
    851e:	3b 85       	ldd	r19, Y+11	; 0x0b
    8520:	82 1b       	sub	r24, r18
    8522:	93 0b       	sbc	r25, r19
    8524:	2d 96       	adiw	r28, 0x0d	; 13
    8526:	e2 e1       	ldi	r30, 0x12	; 18
    8528:	0c 94 e4 e3 	jmp	0x1c7c8	; 0x1c7c8 <__epilogue_restores__>

0000852c <_puts_pad>:
    852c:	a0 e0       	ldi	r26, 0x00	; 0
    852e:	b0 e0       	ldi	r27, 0x00	; 0
    8530:	ec e9       	ldi	r30, 0x9C	; 156
    8532:	f2 e4       	ldi	r31, 0x42	; 66
    8534:	0c 94 ce e3 	jmp	0x1c79c	; 0x1c79c <__prologue_saves__+0xc>
    8538:	6c 01       	movw	r12, r24
    853a:	4b 01       	movw	r8, r22
    853c:	79 01       	movw	r14, r18
    853e:	24 17       	cp	r18, r20
    8540:	35 07       	cpc	r19, r21
    8542:	24 f4       	brge	.+8      	; 0x854c <_puts_pad+0x20>
    8544:	ea 01       	movw	r28, r20
    8546:	c2 1b       	sub	r28, r18
    8548:	d3 0b       	sbc	r29, r19
    854a:	02 c0       	rjmp	.+4      	; 0x8550 <_puts_pad+0x24>
    854c:	c0 e0       	ldi	r28, 0x00	; 0
    854e:	d0 e0       	ldi	r29, 0x00	; 0
    8550:	01 15       	cp	r16, r1
    8552:	11 05       	cpc	r17, r1
    8554:	49 f4       	brne	.+18     	; 0x8568 <_puts_pad+0x3c>
    8556:	21 97       	sbiw	r28, 0x01	; 1
    8558:	38 f0       	brcs	.+14     	; 0x8568 <_puts_pad+0x3c>
    855a:	d6 01       	movw	r26, r12
    855c:	ed 91       	ld	r30, X+
    855e:	fc 91       	ld	r31, X
    8560:	60 e2       	ldi	r22, 0x20	; 32
    8562:	c6 01       	movw	r24, r12
    8564:	09 95       	icall
    8566:	f7 cf       	rjmp	.-18     	; 0x8556 <_puts_pad+0x2a>
    8568:	54 01       	movw	r10, r8
    856a:	f5 01       	movw	r30, r10
    856c:	61 91       	ld	r22, Z+
    856e:	5f 01       	movw	r10, r30
    8570:	66 23       	and	r22, r22
    8572:	61 f0       	breq	.+24     	; 0x858c <_puts_pad+0x60>
    8574:	e1 14       	cp	r14, r1
    8576:	f1 04       	cpc	r15, r1
    8578:	49 f0       	breq	.+18     	; 0x858c <_puts_pad+0x60>
    857a:	d6 01       	movw	r26, r12
    857c:	ed 91       	ld	r30, X+
    857e:	fc 91       	ld	r31, X
    8580:	c6 01       	movw	r24, r12
    8582:	09 95       	icall
    8584:	b1 e0       	ldi	r27, 0x01	; 1
    8586:	eb 1a       	sub	r14, r27
    8588:	f1 08       	sbc	r15, r1
    858a:	ef cf       	rjmp	.-34     	; 0x856a <_puts_pad+0x3e>
    858c:	01 15       	cp	r16, r1
    858e:	11 05       	cpc	r17, r1
    8590:	51 f0       	breq	.+20     	; 0x85a6 <_puts_pad+0x7a>
    8592:	20 97       	sbiw	r28, 0x00	; 0
    8594:	41 f0       	breq	.+16     	; 0x85a6 <_puts_pad+0x7a>
    8596:	d6 01       	movw	r26, r12
    8598:	ed 91       	ld	r30, X+
    859a:	fc 91       	ld	r31, X
    859c:	60 e2       	ldi	r22, 0x20	; 32
    859e:	c6 01       	movw	r24, r12
    85a0:	09 95       	icall
    85a2:	21 97       	sbiw	r28, 0x01	; 1
    85a4:	f6 cf       	rjmp	.-20     	; 0x8592 <_puts_pad+0x66>
    85a6:	cd b7       	in	r28, 0x3d	; 61
    85a8:	de b7       	in	r29, 0x3e	; 62
    85aa:	ec e0       	ldi	r30, 0x0C	; 12
    85ac:	0c 94 ea e3 	jmp	0x1c7d4	; 0x1c7d4 <__epilogue_restores__+0xc>

000085b0 <_printf_fn>:
    85b0:	ab e6       	ldi	r26, 0x6B	; 107
    85b2:	b0 e0       	ldi	r27, 0x00	; 0
    85b4:	ee ed       	ldi	r30, 0xDE	; 222
    85b6:	f2 e4       	ldi	r31, 0x42	; 66
    85b8:	0c 94 c8 e3 	jmp	0x1c790	; 0x1c790 <__prologue_saves__>
    85bc:	a5 96       	adiw	r28, 0x25	; 37
    85be:	9f af       	std	Y+63, r25	; 0x3f
    85c0:	8e af       	std	Y+62, r24	; 0x3e
    85c2:	a5 97       	sbiw	r28, 0x25	; 37
    85c4:	6a 01       	movw	r12, r20
    85c6:	e6 2e       	mov	r14, r22
    85c8:	19 01       	movw	r2, r18
    85ca:	a9 96       	adiw	r28, 0x29	; 41
    85cc:	1c ae       	std	Y+60, r1	; 0x3c
    85ce:	1d ae       	std	Y+61, r1	; 0x3d
    85d0:	1e ae       	std	Y+62, r1	; 0x3e
    85d2:	1f ae       	std	Y+63, r1	; 0x3f
    85d4:	a9 97       	sbiw	r28, 0x29	; 41
    85d6:	9e 01       	movw	r18, r28
    85d8:	2f 5a       	subi	r18, 0xAF	; 175
    85da:	3f 4f       	sbci	r19, 0xFF	; 255
    85dc:	67 96       	adiw	r28, 0x17	; 23
    85de:	3f af       	std	Y+63, r19	; 0x3f
    85e0:	2e af       	std	Y+62, r18	; 0x3e
    85e2:	67 97       	sbiw	r28, 0x17	; 23
    85e4:	ae 01       	movw	r20, r28
    85e6:	4d 5b       	subi	r20, 0xBD	; 189
    85e8:	5f 4f       	sbci	r21, 0xFF	; 255
    85ea:	69 96       	adiw	r28, 0x19	; 25
    85ec:	5f af       	std	Y+63, r21	; 0x3f
    85ee:	4e af       	std	Y+62, r20	; 0x3e
    85f0:	69 97       	sbiw	r28, 0x19	; 25
    85f2:	ce 01       	movw	r24, r28
    85f4:	85 5b       	subi	r24, 0xB5	; 181
    85f6:	9f 4f       	sbci	r25, 0xFF	; 255
    85f8:	6b 96       	adiw	r28, 0x1b	; 27
    85fa:	9f af       	std	Y+63, r25	; 0x3f
    85fc:	8e af       	std	Y+62, r24	; 0x3e
    85fe:	6b 97       	sbiw	r28, 0x1b	; 27
    8600:	de 01       	movw	r26, r28
    8602:	ad 5a       	subi	r26, 0xAD	; 173
    8604:	bf 4f       	sbci	r27, 0xFF	; 255
    8606:	6d 96       	adiw	r28, 0x1d	; 29
    8608:	bf af       	std	Y+63, r27	; 0x3f
    860a:	ae af       	std	Y+62, r26	; 0x3e
    860c:	6d 97       	sbiw	r28, 0x1d	; 29
    860e:	f6 01       	movw	r30, r12
    8610:	5e 2d       	mov	r21, r14
    8612:	0e 94 ff e3 	call	0x1c7fe	; 0x1c7fe <__xload_1>
    8616:	66 23       	and	r22, r22
    8618:	09 f4       	brne	.+2      	; 0x861c <_printf_fn+0x6c>
    861a:	d7 c3       	rjmp	.+1966   	; 0x8dca <_printf_fn+0x81a>
    861c:	ae 2d       	mov	r26, r14
    861e:	c6 01       	movw	r24, r12
    8620:	01 96       	adiw	r24, 0x01	; 1
    8622:	a1 1d       	adc	r26, r1
    8624:	3c 01       	movw	r6, r24
    8626:	8a 2e       	mov	r8, r26
    8628:	65 32       	cpi	r22, 0x25	; 37
    862a:	51 f0       	breq	.+20     	; 0x8640 <_printf_fn+0x90>
    862c:	a5 96       	adiw	r28, 0x25	; 37
    862e:	ae ad       	ldd	r26, Y+62	; 0x3e
    8630:	bf ad       	ldd	r27, Y+63	; 0x3f
    8632:	a5 97       	sbiw	r28, 0x25	; 37
    8634:	ed 91       	ld	r30, X+
    8636:	fc 91       	ld	r31, X
    8638:	11 97       	sbiw	r26, 0x01	; 1
    863a:	cd 01       	movw	r24, r26
    863c:	09 95       	icall
    863e:	91 c3       	rjmp	.+1826   	; 0x8d62 <_printf_fn+0x7b2>
    8640:	91 2c       	mov	r9, r1
    8642:	f3 01       	movw	r30, r6
    8644:	58 2d       	mov	r21, r8
    8646:	0e 94 ff e3 	call	0x1c7fe	; 0x1c7fe <__xload_1>
    864a:	63 32       	cpi	r22, 0x23	; 35
    864c:	19 f4       	brne	.+6      	; 0x8654 <_printf_fn+0xa4>
    864e:	68 94       	set
    8650:	97 f8       	bld	r9, 7
    8652:	04 c0       	rjmp	.+8      	; 0x865c <_printf_fn+0xac>
    8654:	6b 32       	cpi	r22, 0x2B	; 43
    8656:	39 f4       	brne	.+14     	; 0x8666 <_printf_fn+0xb6>
    8658:	68 94       	set
    865a:	92 f8       	bld	r9, 2
    865c:	bf ef       	ldi	r27, 0xFF	; 255
    865e:	6b 1a       	sub	r6, r27
    8660:	7b 0a       	sbc	r7, r27
    8662:	8b 0a       	sbc	r8, r27
    8664:	ee cf       	rjmp	.-36     	; 0x8642 <_printf_fn+0x92>
    8666:	6d 32       	cpi	r22, 0x2D	; 45
    8668:	a9 f4       	brne	.+42     	; 0x8694 <_printf_fn+0xe4>
    866a:	93 fc       	sbrc	r9, 3
    866c:	05 c0       	rjmp	.+10     	; 0x8678 <_printf_fn+0xc8>
    866e:	6d 32       	cpi	r22, 0x2D	; 45
    8670:	19 f4       	brne	.+6      	; 0x8678 <_printf_fn+0xc8>
    8672:	68 94       	set
    8674:	93 f8       	bld	r9, 3
    8676:	f2 cf       	rjmp	.-28     	; 0x865c <_printf_fn+0xac>
    8678:	94 fc       	sbrc	r9, 4
    867a:	05 c0       	rjmp	.+10     	; 0x8686 <_printf_fn+0xd6>
    867c:	60 32       	cpi	r22, 0x20	; 32
    867e:	19 f4       	brne	.+6      	; 0x8686 <_printf_fn+0xd6>
    8680:	68 94       	set
    8682:	94 f8       	bld	r9, 4
    8684:	eb cf       	rjmp	.-42     	; 0x865c <_printf_fn+0xac>
    8686:	95 fc       	sbrc	r9, 5
    8688:	e9 cf       	rjmp	.-46     	; 0x865c <_printf_fn+0xac>
    868a:	60 33       	cpi	r22, 0x30	; 48
    868c:	39 f7       	brne	.-50     	; 0x865c <_printf_fn+0xac>
    868e:	68 94       	set
    8690:	95 f8       	bld	r9, 5
    8692:	e4 cf       	rjmp	.-56     	; 0x865c <_printf_fn+0xac>
    8694:	86 2f       	mov	r24, r22
    8696:	8f 7e       	andi	r24, 0xEF	; 239
    8698:	80 32       	cpi	r24, 0x20	; 32
    869a:	39 f3       	breq	.-50     	; 0x866a <_printf_fn+0xba>
    869c:	70 e0       	ldi	r23, 0x00	; 0
    869e:	60 53       	subi	r22, 0x30	; 48
    86a0:	71 09       	sbc	r23, r1
    86a2:	41 2c       	mov	r4, r1
    86a4:	51 2c       	mov	r5, r1
    86a6:	6a 30       	cpi	r22, 0x0A	; 10
    86a8:	71 05       	cpc	r23, r1
    86aa:	e0 f4       	brcc	.+56     	; 0x86e4 <_printf_fn+0x134>
    86ac:	2a e0       	ldi	r18, 0x0A	; 10
    86ae:	f3 01       	movw	r30, r6
    86b0:	58 2d       	mov	r21, r8
    86b2:	0e 94 ff e3 	call	0x1c7fe	; 0x1c7fe <__xload_1>
    86b6:	70 e0       	ldi	r23, 0x00	; 0
    86b8:	cb 01       	movw	r24, r22
    86ba:	c0 97       	sbiw	r24, 0x30	; 48
    86bc:	0a 97       	sbiw	r24, 0x0a	; 10
    86be:	80 f4       	brcc	.+32     	; 0x86e0 <_printf_fn+0x130>
    86c0:	ef ef       	ldi	r30, 0xFF	; 255
    86c2:	6e 1a       	sub	r6, r30
    86c4:	7e 0a       	sbc	r7, r30
    86c6:	8e 0a       	sbc	r8, r30
    86c8:	24 9d       	mul	r18, r4
    86ca:	c0 01       	movw	r24, r0
    86cc:	25 9d       	mul	r18, r5
    86ce:	90 0d       	add	r25, r0
    86d0:	11 24       	eor	r1, r1
    86d2:	68 0f       	add	r22, r24
    86d4:	79 1f       	adc	r23, r25
    86d6:	2b 01       	movw	r4, r22
    86d8:	f0 e3       	ldi	r31, 0x30	; 48
    86da:	4f 1a       	sub	r4, r31
    86dc:	51 08       	sbc	r5, r1
    86de:	e7 cf       	rjmp	.-50     	; 0x86ae <_printf_fn+0xfe>
    86e0:	68 94       	set
    86e2:	90 f8       	bld	r9, 0
    86e4:	f3 01       	movw	r30, r6
    86e6:	58 2d       	mov	r21, r8
    86e8:	0e 94 ff e3 	call	0x1c7fe	; 0x1c7fe <__xload_1>
    86ec:	6e 32       	cpi	r22, 0x2E	; 46
    86ee:	59 f5       	brne	.+86     	; 0x8746 <_printf_fn+0x196>
    86f0:	2f ef       	ldi	r18, 0xFF	; 255
    86f2:	62 1a       	sub	r6, r18
    86f4:	72 0a       	sbc	r7, r18
    86f6:	82 0a       	sbc	r8, r18
    86f8:	a1 96       	adiw	r28, 0x21	; 33
    86fa:	1f ae       	std	Y+63, r1	; 0x3f
    86fc:	1e ae       	std	Y+62, r1	; 0x3e
    86fe:	a1 97       	sbiw	r28, 0x21	; 33
    8700:	2a e0       	ldi	r18, 0x0A	; 10
    8702:	f3 01       	movw	r30, r6
    8704:	58 2d       	mov	r21, r8
    8706:	0e 94 ff e3 	call	0x1c7fe	; 0x1c7fe <__xload_1>
    870a:	70 e0       	ldi	r23, 0x00	; 0
    870c:	cb 01       	movw	r24, r22
    870e:	c0 97       	sbiw	r24, 0x30	; 48
    8710:	0a 97       	sbiw	r24, 0x0a	; 10
    8712:	b0 f4       	brcc	.+44     	; 0x8740 <_printf_fn+0x190>
    8714:	3f ef       	ldi	r19, 0xFF	; 255
    8716:	63 1a       	sub	r6, r19
    8718:	73 0a       	sbc	r7, r19
    871a:	83 0a       	sbc	r8, r19
    871c:	a1 96       	adiw	r28, 0x21	; 33
    871e:	4e ad       	ldd	r20, Y+62	; 0x3e
    8720:	5f ad       	ldd	r21, Y+63	; 0x3f
    8722:	a1 97       	sbiw	r28, 0x21	; 33
    8724:	24 9f       	mul	r18, r20
    8726:	c0 01       	movw	r24, r0
    8728:	25 9f       	mul	r18, r21
    872a:	90 0d       	add	r25, r0
    872c:	11 24       	eor	r1, r1
    872e:	68 0f       	add	r22, r24
    8730:	79 1f       	adc	r23, r25
    8732:	cb 01       	movw	r24, r22
    8734:	c0 97       	sbiw	r24, 0x30	; 48
    8736:	a1 96       	adiw	r28, 0x21	; 33
    8738:	9f af       	std	Y+63, r25	; 0x3f
    873a:	8e af       	std	Y+62, r24	; 0x3e
    873c:	a1 97       	sbiw	r28, 0x21	; 33
    873e:	e1 cf       	rjmp	.-62     	; 0x8702 <_printf_fn+0x152>
    8740:	68 94       	set
    8742:	91 f8       	bld	r9, 1
    8744:	04 c0       	rjmp	.+8      	; 0x874e <_printf_fn+0x19e>
    8746:	a1 96       	adiw	r28, 0x21	; 33
    8748:	1f ae       	std	Y+63, r1	; 0x3f
    874a:	1e ae       	std	Y+62, r1	; 0x3e
    874c:	a1 97       	sbiw	r28, 0x21	; 33
    874e:	f3 01       	movw	r30, r6
    8750:	58 2d       	mov	r21, r8
    8752:	0e 94 ff e3 	call	0x1c7fe	; 0x1c7fe <__xload_1>
    8756:	69 34       	cpi	r22, 0x49	; 73
    8758:	09 f0       	breq	.+2      	; 0x875c <_printf_fn+0x1ac>
    875a:	45 c0       	rjmp	.+138    	; 0x87e6 <_printf_fn+0x236>
    875c:	9f ef       	ldi	r25, 0xFF	; 255
    875e:	69 1a       	sub	r6, r25
    8760:	79 0a       	sbc	r7, r25
    8762:	89 0a       	sbc	r8, r25
    8764:	6f 96       	adiw	r28, 0x1f	; 31
    8766:	1f ae       	std	Y+63, r1	; 0x3f
    8768:	1e ae       	std	Y+62, r1	; 0x3e
    876a:	6f 97       	sbiw	r28, 0x1f	; 31
    876c:	2a e0       	ldi	r18, 0x0A	; 10
    876e:	f3 01       	movw	r30, r6
    8770:	58 2d       	mov	r21, r8
    8772:	0e 94 ff e3 	call	0x1c7fe	; 0x1c7fe <__xload_1>
    8776:	70 e0       	ldi	r23, 0x00	; 0
    8778:	cb 01       	movw	r24, r22
    877a:	c0 97       	sbiw	r24, 0x30	; 48
    877c:	0a 97       	sbiw	r24, 0x0a	; 10
    877e:	b8 f4       	brcc	.+46     	; 0x87ae <_printf_fn+0x1fe>
    8780:	af ef       	ldi	r26, 0xFF	; 255
    8782:	6a 1a       	sub	r6, r26
    8784:	7a 0a       	sbc	r7, r26
    8786:	8a 0a       	sbc	r8, r26
    8788:	6f 96       	adiw	r28, 0x1f	; 31
    878a:	ee ad       	ldd	r30, Y+62	; 0x3e
    878c:	ff ad       	ldd	r31, Y+63	; 0x3f
    878e:	6f 97       	sbiw	r28, 0x1f	; 31
    8790:	2e 9f       	mul	r18, r30
    8792:	c0 01       	movw	r24, r0
    8794:	2f 9f       	mul	r18, r31
    8796:	90 0d       	add	r25, r0
    8798:	11 24       	eor	r1, r1
    879a:	68 0f       	add	r22, r24
    879c:	79 1f       	adc	r23, r25
    879e:	ab 01       	movw	r20, r22
    87a0:	40 53       	subi	r20, 0x30	; 48
    87a2:	51 09       	sbc	r21, r1
    87a4:	6f 96       	adiw	r28, 0x1f	; 31
    87a6:	5f af       	std	Y+63, r21	; 0x3f
    87a8:	4e af       	std	Y+62, r20	; 0x3e
    87aa:	6f 97       	sbiw	r28, 0x1f	; 31
    87ac:	e0 cf       	rjmp	.-64     	; 0x876e <_printf_fn+0x1be>
    87ae:	6f 96       	adiw	r28, 0x1f	; 31
    87b0:	8e ad       	ldd	r24, Y+62	; 0x3e
    87b2:	9f ad       	ldd	r25, Y+63	; 0x3f
    87b4:	6f 97       	sbiw	r28, 0x1f	; 31
    87b6:	00 97       	sbiw	r24, 0x00	; 0
    87b8:	09 f4       	brne	.+2      	; 0x87bc <_printf_fn+0x20c>
    87ba:	4f c0       	rjmp	.+158    	; 0x885a <_printf_fn+0x2aa>
    87bc:	87 70       	andi	r24, 0x07	; 7
    87be:	99 27       	eor	r25, r25
    87c0:	89 2b       	or	r24, r25
    87c2:	09 f0       	breq	.+2      	; 0x87c6 <_printf_fn+0x216>
    87c4:	46 c0       	rjmp	.+140    	; 0x8852 <_printf_fn+0x2a2>
    87c6:	6f 96       	adiw	r28, 0x1f	; 31
    87c8:	ae ad       	ldd	r26, Y+62	; 0x3e
    87ca:	bf ad       	ldd	r27, Y+63	; 0x3f
    87cc:	6f 97       	sbiw	r28, 0x1f	; 31
    87ce:	83 e0       	ldi	r24, 0x03	; 3
    87d0:	b5 95       	asr	r27
    87d2:	a7 95       	ror	r26
    87d4:	8a 95       	dec	r24
    87d6:	e1 f7       	brne	.-8      	; 0x87d0 <_printf_fn+0x220>
    87d8:	6f 96       	adiw	r28, 0x1f	; 31
    87da:	bf af       	std	Y+63, r27	; 0x3f
    87dc:	ae af       	std	Y+62, r26	; 0x3e
    87de:	6f 97       	sbiw	r28, 0x1f	; 31
    87e0:	ab 2b       	or	r26, r27
    87e2:	d9 f1       	breq	.+118    	; 0x885a <_printf_fn+0x2aa>
    87e4:	27 c0       	rjmp	.+78     	; 0x8834 <_printf_fn+0x284>
    87e6:	68 36       	cpi	r22, 0x68	; 104
    87e8:	29 f4       	brne	.+10     	; 0x87f4 <_printf_fn+0x244>
    87ea:	bf ef       	ldi	r27, 0xFF	; 255
    87ec:	6b 1a       	sub	r6, r27
    87ee:	7b 0a       	sbc	r7, r27
    87f0:	8b 0a       	sbc	r8, r27
    87f2:	ba c2       	rjmp	.+1396   	; 0x8d68 <_printf_fn+0x7b8>
    87f4:	6c 36       	cpi	r22, 0x6C	; 108
    87f6:	09 f0       	breq	.+2      	; 0x87fa <_printf_fn+0x24a>
    87f8:	b7 c2       	rjmp	.+1390   	; 0x8d68 <_printf_fn+0x7b8>
    87fa:	a8 2d       	mov	r26, r8
    87fc:	c3 01       	movw	r24, r6
    87fe:	01 96       	adiw	r24, 0x01	; 1
    8800:	a1 1d       	adc	r26, r1
    8802:	fc 01       	movw	r30, r24
    8804:	5a 2f       	mov	r21, r26
    8806:	0e 94 ff e3 	call	0x1c7fe	; 0x1c7fe <__xload_1>
    880a:	6c 36       	cpi	r22, 0x6C	; 108
    880c:	49 f0       	breq	.+18     	; 0x8820 <_printf_fn+0x270>
    880e:	3c 01       	movw	r6, r24
    8810:	8a 2e       	mov	r8, r26
    8812:	24 e0       	ldi	r18, 0x04	; 4
    8814:	30 e0       	ldi	r19, 0x00	; 0
    8816:	6f 96       	adiw	r28, 0x1f	; 31
    8818:	3f af       	std	Y+63, r19	; 0x3f
    881a:	2e af       	std	Y+62, r18	; 0x3e
    881c:	6f 97       	sbiw	r28, 0x1f	; 31
    881e:	0a c0       	rjmp	.+20     	; 0x8834 <_printf_fn+0x284>
    8820:	32 e0       	ldi	r19, 0x02	; 2
    8822:	63 0e       	add	r6, r19
    8824:	71 1c       	adc	r7, r1
    8826:	81 1c       	adc	r8, r1
    8828:	48 e0       	ldi	r20, 0x08	; 8
    882a:	50 e0       	ldi	r21, 0x00	; 0
    882c:	6f 96       	adiw	r28, 0x1f	; 31
    882e:	5f af       	std	Y+63, r21	; 0x3f
    8830:	4e af       	std	Y+62, r20	; 0x3e
    8832:	6f 97       	sbiw	r28, 0x1f	; 31
    8834:	f3 01       	movw	r30, r6
    8836:	58 2d       	mov	r21, r8
    8838:	0e 94 ff e3 	call	0x1c7fe	; 0x1c7fe <__xload_1>
    883c:	86 2f       	mov	r24, r22
    883e:	90 e0       	ldi	r25, 0x00	; 0
    8840:	a3 96       	adiw	r28, 0x23	; 35
    8842:	9f af       	std	Y+63, r25	; 0x3f
    8844:	8e af       	std	Y+62, r24	; 0x3e
    8846:	a3 97       	sbiw	r28, 0x23	; 35
    8848:	84 36       	cpi	r24, 0x64	; 100
    884a:	91 05       	cpc	r25, r1
    884c:	09 f4       	brne	.+2      	; 0x8850 <_printf_fn+0x2a0>
    884e:	93 c2       	rjmp	.+1318   	; 0x8d76 <_printf_fn+0x7c6>
    8850:	08 c0       	rjmp	.+16     	; 0x8862 <_printf_fn+0x2b2>
    8852:	6f 96       	adiw	r28, 0x1f	; 31
    8854:	1f ae       	std	Y+63, r1	; 0x3f
    8856:	1e ae       	std	Y+62, r1	; 0x3e
    8858:	6f 97       	sbiw	r28, 0x1f	; 31
    885a:	a3 96       	adiw	r28, 0x23	; 35
    885c:	1f ae       	std	Y+63, r1	; 0x3f
    885e:	1e ae       	std	Y+62, r1	; 0x3e
    8860:	a3 97       	sbiw	r28, 0x23	; 35
    8862:	31 e0       	ldi	r19, 0x01	; 1
    8864:	20 e0       	ldi	r18, 0x00	; 0
    8866:	a3 96       	adiw	r28, 0x23	; 35
    8868:	ae ad       	ldd	r26, Y+62	; 0x3e
    886a:	bf ad       	ldd	r27, Y+63	; 0x3f
    886c:	a3 97       	sbiw	r28, 0x23	; 35
    886e:	a4 34       	cpi	r26, 0x44	; 68
    8870:	b1 05       	cpc	r27, r1
    8872:	09 f0       	breq	.+2      	; 0x8876 <_printf_fn+0x2c6>
    8874:	30 e0       	ldi	r19, 0x00	; 0
    8876:	83 2f       	mov	r24, r19
    8878:	92 2f       	mov	r25, r18
    887a:	a3 96       	adiw	r28, 0x23	; 35
    887c:	ee ad       	ldd	r30, Y+62	; 0x3e
    887e:	ff ad       	ldd	r31, Y+63	; 0x3f
    8880:	a3 97       	sbiw	r28, 0x23	; 35
    8882:	e2 54       	subi	r30, 0x42	; 66
    8884:	f1 09       	sbc	r31, r1
    8886:	e7 33       	cpi	r30, 0x37	; 55
    8888:	f1 05       	cpc	r31, r1
    888a:	08 f0       	brcs	.+2      	; 0x888e <_printf_fn+0x2de>
    888c:	5d c1       	rjmp	.+698    	; 0x8b48 <_printf_fn+0x598>
    888e:	ea 5b       	subi	r30, 0xBA	; 186
    8890:	ff 4f       	sbci	r31, 0xFF	; 255
    8892:	0c 94 84 e3 	jmp	0x1c708	; 0x1c708 <__tablejump2__>
    8896:	e2 e0       	ldi	r30, 0x02	; 2
    8898:	f0 e0       	ldi	r31, 0x00	; 0
    889a:	6f 96       	adiw	r28, 0x1f	; 31
    889c:	ff af       	std	Y+63, r31	; 0x3f
    889e:	ee af       	std	Y+62, r30	; 0x3e
    88a0:	6f 97       	sbiw	r28, 0x1f	; 31
    88a2:	29 2d       	mov	r18, r9
    88a4:	28 72       	andi	r18, 0x28	; 40
    88a6:	28 32       	cpi	r18, 0x28	; 40
    88a8:	11 f4       	brne	.+4      	; 0x88ae <_printf_fn+0x2fe>
    88aa:	e8 94       	clt
    88ac:	95 f8       	bld	r9, 5
    88ae:	29 2d       	mov	r18, r9
    88b0:	22 72       	andi	r18, 0x22	; 34
    88b2:	22 32       	cpi	r18, 0x22	; 34
    88b4:	11 f4       	brne	.+4      	; 0x88ba <_printf_fn+0x30a>
    88b6:	e8 94       	clt
    88b8:	95 f8       	bld	r9, 5
    88ba:	29 2d       	mov	r18, r9
    88bc:	21 72       	andi	r18, 0x21	; 33
    88be:	21 32       	cpi	r18, 0x21	; 33
    88c0:	59 f4       	brne	.+22     	; 0x88d8 <_printf_fn+0x328>
    88c2:	a1 96       	adiw	r28, 0x21	; 33
    88c4:	2e ad       	ldd	r18, Y+62	; 0x3e
    88c6:	3f ad       	ldd	r19, Y+63	; 0x3f
    88c8:	a1 97       	sbiw	r28, 0x21	; 33
    88ca:	24 15       	cp	r18, r4
    88cc:	35 05       	cpc	r19, r5
    88ce:	24 f4       	brge	.+8      	; 0x88d8 <_printf_fn+0x328>
    88d0:	a1 96       	adiw	r28, 0x21	; 33
    88d2:	5f ae       	std	Y+63, r5	; 0x3f
    88d4:	4e ae       	std	Y+62, r4	; 0x3e
    88d6:	a1 97       	sbiw	r28, 0x21	; 33
    88d8:	29 2d       	mov	r18, r9
    88da:	23 72       	andi	r18, 0x23	; 35
    88dc:	23 32       	cpi	r18, 0x23	; 35
    88de:	59 f4       	brne	.+22     	; 0x88f6 <_printf_fn+0x346>
    88e0:	a1 96       	adiw	r28, 0x21	; 33
    88e2:	4e ad       	ldd	r20, Y+62	; 0x3e
    88e4:	5f ad       	ldd	r21, Y+63	; 0x3f
    88e6:	a1 97       	sbiw	r28, 0x21	; 33
    88e8:	44 15       	cp	r20, r4
    88ea:	55 05       	cpc	r21, r5
    88ec:	24 f4       	brge	.+8      	; 0x88f6 <_printf_fn+0x346>
    88ee:	a1 96       	adiw	r28, 0x21	; 33
    88f0:	5f ae       	std	Y+63, r5	; 0x3f
    88f2:	4e ae       	std	Y+62, r4	; 0x3e
    88f4:	a1 97       	sbiw	r28, 0x21	; 33
    88f6:	e8 94       	clt
    88f8:	94 f8       	bld	r9, 4
    88fa:	e8 94       	clt
    88fc:	92 f8       	bld	r9, 2
    88fe:	e8 94       	clt
    8900:	96 f8       	bld	r9, 6
    8902:	6f 96       	adiw	r28, 0x1f	; 31
    8904:	ae ad       	ldd	r26, Y+62	; 0x3e
    8906:	bf ad       	ldd	r27, Y+63	; 0x3f
    8908:	6f 97       	sbiw	r28, 0x1f	; 31
    890a:	12 97       	sbiw	r26, 0x02	; 2
    890c:	29 f5       	brne	.+74     	; 0x8958 <_printf_fn+0x3a8>
    890e:	51 01       	movw	r10, r2
    8910:	b2 e0       	ldi	r27, 0x02	; 2
    8912:	ab 0e       	add	r10, r27
    8914:	b1 1c       	adc	r11, r1
    8916:	f1 01       	movw	r30, r2
    8918:	80 81       	ld	r24, Z
    891a:	91 81       	ldd	r25, Z+1	; 0x01
    891c:	65 96       	adiw	r28, 0x15	; 21
    891e:	9f af       	std	Y+63, r25	; 0x3f
    8920:	8e af       	std	Y+62, r24	; 0x3e
    8922:	65 97       	sbiw	r28, 0x15	; 21
    8924:	a3 96       	adiw	r28, 0x23	; 35
    8926:	2e ad       	ldd	r18, Y+62	; 0x3e
    8928:	3f ad       	ldd	r19, Y+63	; 0x3f
    892a:	a3 97       	sbiw	r28, 0x23	; 35
    892c:	24 34       	cpi	r18, 0x44	; 68
    892e:	31 05       	cpc	r19, r1
    8930:	09 f0       	breq	.+2      	; 0x8934 <_printf_fn+0x384>
    8932:	b8 c0       	rjmp	.+368    	; 0x8aa4 <_printf_fn+0x4f4>
    8934:	97 ff       	sbrs	r25, 7
    8936:	b0 c0       	rjmp	.+352    	; 0x8a98 <_printf_fn+0x4e8>
    8938:	68 94       	set
    893a:	96 f8       	bld	r9, 6
    893c:	91 95       	neg	r25
    893e:	81 95       	neg	r24
    8940:	91 09       	sbc	r25, r1
    8942:	65 96       	adiw	r28, 0x15	; 21
    8944:	9f af       	std	Y+63, r25	; 0x3f
    8946:	8e af       	std	Y+62, r24	; 0x3e
    8948:	65 97       	sbiw	r28, 0x15	; 21
    894a:	42 e0       	ldi	r20, 0x02	; 2
    894c:	50 e0       	ldi	r21, 0x00	; 0
    894e:	6f 96       	adiw	r28, 0x1f	; 31
    8950:	5f af       	std	Y+63, r21	; 0x3f
    8952:	4e af       	std	Y+62, r20	; 0x3e
    8954:	6f 97       	sbiw	r28, 0x1f	; 31
    8956:	a6 c0       	rjmp	.+332    	; 0x8aa4 <_printf_fn+0x4f4>
    8958:	6f 96       	adiw	r28, 0x1f	; 31
    895a:	ae ad       	ldd	r26, Y+62	; 0x3e
    895c:	bf ad       	ldd	r27, Y+63	; 0x3f
    895e:	6f 97       	sbiw	r28, 0x1f	; 31
    8960:	14 97       	sbiw	r26, 0x04	; 4
    8962:	59 f5       	brne	.+86     	; 0x89ba <_printf_fn+0x40a>
    8964:	51 01       	movw	r10, r2
    8966:	b4 e0       	ldi	r27, 0x04	; 4
    8968:	ab 0e       	add	r10, r27
    896a:	b1 1c       	adc	r11, r1
    896c:	f1 01       	movw	r30, r2
    896e:	80 81       	ld	r24, Z
    8970:	91 81       	ldd	r25, Z+1	; 0x01
    8972:	a2 81       	ldd	r26, Z+2	; 0x02
    8974:	b3 81       	ldd	r27, Z+3	; 0x03
    8976:	2f 96       	adiw	r28, 0x0f	; 15
    8978:	8c af       	std	Y+60, r24	; 0x3c
    897a:	9d af       	std	Y+61, r25	; 0x3d
    897c:	ae af       	std	Y+62, r26	; 0x3e
    897e:	bf af       	std	Y+63, r27	; 0x3f
    8980:	2f 97       	sbiw	r28, 0x0f	; 15
    8982:	a3 96       	adiw	r28, 0x23	; 35
    8984:	2e ad       	ldd	r18, Y+62	; 0x3e
    8986:	3f ad       	ldd	r19, Y+63	; 0x3f
    8988:	a3 97       	sbiw	r28, 0x23	; 35
    898a:	24 34       	cpi	r18, 0x44	; 68
    898c:	31 05       	cpc	r19, r1
    898e:	09 f0       	breq	.+2      	; 0x8992 <_printf_fn+0x3e2>
    8990:	96 c0       	rjmp	.+300    	; 0x8abe <_printf_fn+0x50e>
    8992:	b7 ff       	sbrs	r27, 7
    8994:	8e c0       	rjmp	.+284    	; 0x8ab2 <_printf_fn+0x502>
    8996:	68 94       	set
    8998:	96 f8       	bld	r9, 6
    899a:	b0 95       	com	r27
    899c:	a0 95       	com	r26
    899e:	90 95       	com	r25
    89a0:	81 95       	neg	r24
    89a2:	9f 4f       	sbci	r25, 0xFF	; 255
    89a4:	af 4f       	sbci	r26, 0xFF	; 255
    89a6:	bf 4f       	sbci	r27, 0xFF	; 255
    89a8:	2f 96       	adiw	r28, 0x0f	; 15
    89aa:	8c af       	std	Y+60, r24	; 0x3c
    89ac:	9d af       	std	Y+61, r25	; 0x3d
    89ae:	ae af       	std	Y+62, r26	; 0x3e
    89b0:	bf af       	std	Y+63, r27	; 0x3f
    89b2:	2f 97       	sbiw	r28, 0x0f	; 15
    89b4:	7e c0       	rjmp	.+252    	; 0x8ab2 <_printf_fn+0x502>
    89b6:	81 e0       	ldi	r24, 0x01	; 1
    89b8:	90 e0       	ldi	r25, 0x00	; 0
    89ba:	6f 96       	adiw	r28, 0x1f	; 31
    89bc:	ae ad       	ldd	r26, Y+62	; 0x3e
    89be:	bf ad       	ldd	r27, Y+63	; 0x3f
    89c0:	6f 97       	sbiw	r28, 0x1f	; 31
    89c2:	51 01       	movw	r10, r2
    89c4:	18 97       	sbiw	r26, 0x08	; 8
    89c6:	09 f0       	breq	.+2      	; 0x89ca <_printf_fn+0x41a>
    89c8:	81 c0       	rjmp	.+258    	; 0x8acc <_printf_fn+0x51c>
    89ca:	b8 e0       	ldi	r27, 0x08	; 8
    89cc:	ab 0e       	add	r10, r27
    89ce:	b1 1c       	adc	r11, r1
    89d0:	f1 01       	movw	r30, r2
    89d2:	f0 81       	ld	r31, Z
    89d4:	aa 96       	adiw	r28, 0x2a	; 42
    89d6:	ff af       	std	Y+63, r31	; 0x3f
    89d8:	aa 97       	sbiw	r28, 0x2a	; 42
    89da:	f1 01       	movw	r30, r2
    89dc:	f1 80       	ldd	r15, Z+1	; 0x01
    89de:	02 81       	ldd	r16, Z+2	; 0x02
    89e0:	13 81       	ldd	r17, Z+3	; 0x03
    89e2:	b4 81       	ldd	r27, Z+4	; 0x04
    89e4:	f5 81       	ldd	r31, Z+5	; 0x05
    89e6:	ab 96       	adiw	r28, 0x2b	; 43
    89e8:	ff af       	std	Y+63, r31	; 0x3f
    89ea:	ab 97       	sbiw	r28, 0x2b	; 43
    89ec:	f1 01       	movw	r30, r2
    89ee:	f6 81       	ldd	r31, Z+6	; 0x06
    89f0:	ac 96       	adiw	r28, 0x2c	; 44
    89f2:	ff af       	std	Y+63, r31	; 0x3f
    89f4:	ac 97       	sbiw	r28, 0x2c	; 44
    89f6:	f1 01       	movw	r30, r2
    89f8:	37 80       	ldd	r3, Z+7	; 0x07
    89fa:	aa 96       	adiw	r28, 0x2a	; 42
    89fc:	ff ad       	ldd	r31, Y+63	; 0x3f
    89fe:	aa 97       	sbiw	r28, 0x2a	; 42
    8a00:	24 96       	adiw	r28, 0x04	; 4
    8a02:	ff af       	std	Y+63, r31	; 0x3f
    8a04:	24 97       	sbiw	r28, 0x04	; 4
    8a06:	25 96       	adiw	r28, 0x05	; 5
    8a08:	ff ae       	std	Y+63, r15	; 0x3f
    8a0a:	25 97       	sbiw	r28, 0x05	; 5
    8a0c:	26 96       	adiw	r28, 0x06	; 6
    8a0e:	0f af       	std	Y+63, r16	; 0x3f
    8a10:	26 97       	sbiw	r28, 0x06	; 6
    8a12:	27 96       	adiw	r28, 0x07	; 7
    8a14:	1f af       	std	Y+63, r17	; 0x3f
    8a16:	27 97       	sbiw	r28, 0x07	; 7
    8a18:	28 96       	adiw	r28, 0x08	; 8
    8a1a:	bf af       	std	Y+63, r27	; 0x3f
    8a1c:	28 97       	sbiw	r28, 0x08	; 8
    8a1e:	ab 96       	adiw	r28, 0x2b	; 43
    8a20:	ef ad       	ldd	r30, Y+63	; 0x3f
    8a22:	ab 97       	sbiw	r28, 0x2b	; 43
    8a24:	29 96       	adiw	r28, 0x09	; 9
    8a26:	ef af       	std	Y+63, r30	; 0x3f
    8a28:	29 97       	sbiw	r28, 0x09	; 9
    8a2a:	ac 96       	adiw	r28, 0x2c	; 44
    8a2c:	ff ad       	ldd	r31, Y+63	; 0x3f
    8a2e:	ac 97       	sbiw	r28, 0x2c	; 44
    8a30:	2a 96       	adiw	r28, 0x0a	; 10
    8a32:	ff af       	std	Y+63, r31	; 0x3f
    8a34:	2a 97       	sbiw	r28, 0x0a	; 10
    8a36:	2b 96       	adiw	r28, 0x0b	; 11
    8a38:	3f ae       	std	Y+63, r3	; 0x3f
    8a3a:	2b 97       	sbiw	r28, 0x0b	; 11
    8a3c:	89 2b       	or	r24, r25
    8a3e:	09 f4       	brne	.+2      	; 0x8a42 <_printf_fn+0x492>
    8a40:	50 c0       	rjmp	.+160    	; 0x8ae2 <_printf_fn+0x532>
    8a42:	aa 96       	adiw	r28, 0x2a	; 42
    8a44:	2f ad       	ldd	r18, Y+63	; 0x3f
    8a46:	aa 97       	sbiw	r28, 0x2a	; 42
    8a48:	3f 2d       	mov	r19, r15
    8a4a:	a8 01       	movw	r20, r16
    8a4c:	6b 2f       	mov	r22, r27
    8a4e:	7e 2f       	mov	r23, r30
    8a50:	8f 2f       	mov	r24, r31
    8a52:	93 2d       	mov	r25, r3
    8a54:	a0 e0       	ldi	r26, 0x00	; 0
    8a56:	0e 94 06 e4 	call	0x1c80c	; 0x1c80c <__cmpdi2_s8>
    8a5a:	0c f0       	brlt	.+2      	; 0x8a5e <_printf_fn+0x4ae>
    8a5c:	42 c0       	rjmp	.+132    	; 0x8ae2 <_printf_fn+0x532>
    8a5e:	68 94       	set
    8a60:	96 f8       	bld	r9, 6
    8a62:	0e 94 b8 e3 	call	0x1c770	; 0x1c770 <__negdi2>
    8a66:	24 96       	adiw	r28, 0x04	; 4
    8a68:	2f af       	std	Y+63, r18	; 0x3f
    8a6a:	24 97       	sbiw	r28, 0x04	; 4
    8a6c:	25 96       	adiw	r28, 0x05	; 5
    8a6e:	3f af       	std	Y+63, r19	; 0x3f
    8a70:	25 97       	sbiw	r28, 0x05	; 5
    8a72:	26 96       	adiw	r28, 0x06	; 6
    8a74:	4f af       	std	Y+63, r20	; 0x3f
    8a76:	26 97       	sbiw	r28, 0x06	; 6
    8a78:	27 96       	adiw	r28, 0x07	; 7
    8a7a:	5f af       	std	Y+63, r21	; 0x3f
    8a7c:	27 97       	sbiw	r28, 0x07	; 7
    8a7e:	28 96       	adiw	r28, 0x08	; 8
    8a80:	6f af       	std	Y+63, r22	; 0x3f
    8a82:	28 97       	sbiw	r28, 0x08	; 8
    8a84:	29 96       	adiw	r28, 0x09	; 9
    8a86:	7f af       	std	Y+63, r23	; 0x3f
    8a88:	29 97       	sbiw	r28, 0x09	; 9
    8a8a:	2a 96       	adiw	r28, 0x0a	; 10
    8a8c:	8f af       	std	Y+63, r24	; 0x3f
    8a8e:	2a 97       	sbiw	r28, 0x0a	; 10
    8a90:	2b 96       	adiw	r28, 0x0b	; 11
    8a92:	9f af       	std	Y+63, r25	; 0x3f
    8a94:	2b 97       	sbiw	r28, 0x0b	; 11
    8a96:	25 c0       	rjmp	.+74     	; 0x8ae2 <_printf_fn+0x532>
    8a98:	22 e0       	ldi	r18, 0x02	; 2
    8a9a:	30 e0       	ldi	r19, 0x00	; 0
    8a9c:	6f 96       	adiw	r28, 0x1f	; 31
    8a9e:	3f af       	std	Y+63, r19	; 0x3f
    8aa0:	2e af       	std	Y+62, r18	; 0x3e
    8aa2:	6f 97       	sbiw	r28, 0x1f	; 31
    8aa4:	6c 96       	adiw	r28, 0x1c	; 28
    8aa6:	8f ad       	ldd	r24, Y+63	; 0x3f
    8aa8:	6c 97       	sbiw	r28, 0x1c	; 28
    8aaa:	6d 96       	adiw	r28, 0x1d	; 29
    8aac:	9f ad       	ldd	r25, Y+63	; 0x3f
    8aae:	6d 97       	sbiw	r28, 0x1d	; 29
    8ab0:	1e c0       	rjmp	.+60     	; 0x8aee <_printf_fn+0x53e>
    8ab2:	44 e0       	ldi	r20, 0x04	; 4
    8ab4:	50 e0       	ldi	r21, 0x00	; 0
    8ab6:	6f 96       	adiw	r28, 0x1f	; 31
    8ab8:	5f af       	std	Y+63, r21	; 0x3f
    8aba:	4e af       	std	Y+62, r20	; 0x3e
    8abc:	6f 97       	sbiw	r28, 0x1f	; 31
    8abe:	6a 96       	adiw	r28, 0x1a	; 26
    8ac0:	8f ad       	ldd	r24, Y+63	; 0x3f
    8ac2:	6a 97       	sbiw	r28, 0x1a	; 26
    8ac4:	6b 96       	adiw	r28, 0x1b	; 27
    8ac6:	9f ad       	ldd	r25, Y+63	; 0x3f
    8ac8:	6b 97       	sbiw	r28, 0x1b	; 27
    8aca:	11 c0       	rjmp	.+34     	; 0x8aee <_printf_fn+0x53e>
    8acc:	66 96       	adiw	r28, 0x16	; 22
    8ace:	8f ad       	ldd	r24, Y+63	; 0x3f
    8ad0:	66 97       	sbiw	r28, 0x16	; 22
    8ad2:	67 96       	adiw	r28, 0x17	; 23
    8ad4:	9f ad       	ldd	r25, Y+63	; 0x3f
    8ad6:	67 97       	sbiw	r28, 0x17	; 23
    8ad8:	a3 96       	adiw	r28, 0x23	; 35
    8ada:	1f ae       	std	Y+63, r1	; 0x3f
    8adc:	1e ae       	std	Y+62, r1	; 0x3e
    8ade:	a3 97       	sbiw	r28, 0x23	; 35
    8ae0:	06 c0       	rjmp	.+12     	; 0x8aee <_printf_fn+0x53e>
    8ae2:	68 96       	adiw	r28, 0x18	; 24
    8ae4:	8f ad       	ldd	r24, Y+63	; 0x3f
    8ae6:	68 97       	sbiw	r28, 0x18	; 24
    8ae8:	69 96       	adiw	r28, 0x19	; 25
    8aea:	9f ad       	ldd	r25, Y+63	; 0x3f
    8aec:	69 97       	sbiw	r28, 0x19	; 25
    8aee:	5f ef       	ldi	r21, 0xFF	; 255
    8af0:	65 1a       	sub	r6, r21
    8af2:	75 0a       	sbc	r7, r21
    8af4:	85 0a       	sbc	r8, r21
    8af6:	15 01       	movw	r2, r10
    8af8:	2d c0       	rjmp	.+90     	; 0x8b54 <_printf_fn+0x5a4>
    8afa:	91 fc       	sbrc	r9, 1
    8afc:	08 c0       	rjmp	.+16     	; 0x8b0e <_printf_fn+0x55e>
    8afe:	68 94       	set
    8b00:	91 f8       	bld	r9, 1
    8b02:	86 e0       	ldi	r24, 0x06	; 6
    8b04:	90 e0       	ldi	r25, 0x00	; 0
    8b06:	a1 96       	adiw	r28, 0x21	; 33
    8b08:	9f af       	std	Y+63, r25	; 0x3f
    8b0a:	8e af       	std	Y+62, r24	; 0x3e
    8b0c:	a1 97       	sbiw	r28, 0x21	; 33
    8b0e:	d1 01       	movw	r26, r2
    8b10:	2d 91       	ld	r18, X+
    8b12:	3d 91       	ld	r19, X+
    8b14:	4d 91       	ld	r20, X+
    8b16:	5c 91       	ld	r21, X
    8b18:	a9 96       	adiw	r28, 0x29	; 41
    8b1a:	2c af       	std	Y+60, r18	; 0x3c
    8b1c:	3d af       	std	Y+61, r19	; 0x3d
    8b1e:	4e af       	std	Y+62, r20	; 0x3e
    8b20:	5f af       	std	Y+63, r21	; 0x3f
    8b22:	a9 97       	sbiw	r28, 0x29	; 41
    8b24:	bf ef       	ldi	r27, 0xFF	; 255
    8b26:	6b 1a       	sub	r6, r27
    8b28:	7b 0a       	sbc	r7, r27
    8b2a:	8b 0a       	sbc	r8, r27
    8b2c:	f1 01       	movw	r30, r2
    8b2e:	34 96       	adiw	r30, 0x04	; 4
    8b30:	1f 01       	movw	r2, r30
    8b32:	0a c0       	rjmp	.+20     	; 0x8b48 <_printf_fn+0x598>
    8b34:	ff ef       	ldi	r31, 0xFF	; 255
    8b36:	6f 1a       	sub	r6, r31
    8b38:	7f 0a       	sbc	r7, r31
    8b3a:	8f 0a       	sbc	r8, r31
    8b3c:	b0 c0       	rjmp	.+352    	; 0x8c9e <_printf_fn+0x6ee>
    8b3e:	2f ef       	ldi	r18, 0xFF	; 255
    8b40:	62 1a       	sub	r6, r18
    8b42:	72 0a       	sbc	r7, r18
    8b44:	82 0a       	sbc	r8, r18
    8b46:	b8 c0       	rjmp	.+368    	; 0x8cb8 <_printf_fn+0x708>
    8b48:	66 96       	adiw	r28, 0x16	; 22
    8b4a:	8f ad       	ldd	r24, Y+63	; 0x3f
    8b4c:	66 97       	sbiw	r28, 0x16	; 22
    8b4e:	67 96       	adiw	r28, 0x17	; 23
    8b50:	9f ad       	ldd	r25, Y+63	; 0x3f
    8b52:	67 97       	sbiw	r28, 0x17	; 23
    8b54:	a3 96       	adiw	r28, 0x23	; 35
    8b56:	ee ad       	ldd	r30, Y+62	; 0x3e
    8b58:	ff ad       	ldd	r31, Y+63	; 0x3f
    8b5a:	a3 97       	sbiw	r28, 0x23	; 35
    8b5c:	e2 54       	subi	r30, 0x42	; 66
    8b5e:	f1 09       	sbc	r31, r1
    8b60:	e7 33       	cpi	r30, 0x37	; 55
    8b62:	f1 05       	cpc	r31, r1
    8b64:	08 f0       	brcs	.+2      	; 0x8b68 <_printf_fn+0x5b8>
    8b66:	f9 c0       	rjmp	.+498    	; 0x8d5a <_printf_fn+0x7aa>
    8b68:	e3 58       	subi	r30, 0x83	; 131
    8b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    8b6c:	0c 94 84 e3 	jmp	0x1c708	; 0x1c708 <__tablejump2__>
    8b70:	e8 94       	clt
    8b72:	94 f8       	bld	r9, 4
    8b74:	e8 94       	clt
    8b76:	92 f8       	bld	r9, 2
    8b78:	a9 2c       	mov	r10, r9
    8b7a:	b1 2c       	mov	r11, r1
    8b7c:	a1 96       	adiw	r28, 0x21	; 33
    8b7e:	ce ac       	ldd	r12, Y+62	; 0x3e
    8b80:	df ac       	ldd	r13, Y+63	; 0x3f
    8b82:	a1 97       	sbiw	r28, 0x21	; 33
    8b84:	72 01       	movw	r14, r4
    8b86:	0a e0       	ldi	r16, 0x0A	; 10
    8b88:	10 e0       	ldi	r17, 0x00	; 0
    8b8a:	13 c0       	rjmp	.+38     	; 0x8bb2 <_printf_fn+0x602>
    8b8c:	a9 2c       	mov	r10, r9
    8b8e:	b1 2c       	mov	r11, r1
    8b90:	a1 96       	adiw	r28, 0x21	; 33
    8b92:	ce ac       	ldd	r12, Y+62	; 0x3e
    8b94:	df ac       	ldd	r13, Y+63	; 0x3f
    8b96:	a1 97       	sbiw	r28, 0x21	; 33
    8b98:	72 01       	movw	r14, r4
    8b9a:	02 e0       	ldi	r16, 0x02	; 2
    8b9c:	10 e0       	ldi	r17, 0x00	; 0
    8b9e:	09 c0       	rjmp	.+18     	; 0x8bb2 <_printf_fn+0x602>
    8ba0:	a9 2c       	mov	r10, r9
    8ba2:	b1 2c       	mov	r11, r1
    8ba4:	a1 96       	adiw	r28, 0x21	; 33
    8ba6:	ce ac       	ldd	r12, Y+62	; 0x3e
    8ba8:	df ac       	ldd	r13, Y+63	; 0x3f
    8baa:	a1 97       	sbiw	r28, 0x21	; 33
    8bac:	72 01       	movw	r14, r4
    8bae:	08 e0       	ldi	r16, 0x08	; 8
    8bb0:	10 e0       	ldi	r17, 0x00	; 0
    8bb2:	22 e4       	ldi	r18, 0x42	; 66
    8bb4:	30 e0       	ldi	r19, 0x00	; 0
    8bb6:	ae 01       	movw	r20, r28
    8bb8:	4f 5f       	subi	r20, 0xFF	; 255
    8bba:	5f 4f       	sbci	r21, 0xFF	; 255
    8bbc:	6f 96       	adiw	r28, 0x1f	; 31
    8bbe:	6e ad       	ldd	r22, Y+62	; 0x3e
    8bc0:	7f ad       	ldd	r23, Y+63	; 0x3f
    8bc2:	6f 97       	sbiw	r28, 0x1f	; 31
    8bc4:	fb d9       	rcall	.-3082   	; 0x7fbc <p_ntoa>
    8bc6:	30 c0       	rjmp	.+96     	; 0x8c28 <_printf_fn+0x678>
    8bc8:	a9 2c       	mov	r10, r9
    8bca:	b1 2c       	mov	r11, r1
    8bcc:	a1 96       	adiw	r28, 0x21	; 33
    8bce:	ce ac       	ldd	r12, Y+62	; 0x3e
    8bd0:	df ac       	ldd	r13, Y+63	; 0x3f
    8bd2:	a1 97       	sbiw	r28, 0x21	; 33
    8bd4:	72 01       	movw	r14, r4
    8bd6:	00 e1       	ldi	r16, 0x10	; 16
    8bd8:	10 e0       	ldi	r17, 0x00	; 0
    8bda:	22 e4       	ldi	r18, 0x42	; 66
    8bdc:	30 e0       	ldi	r19, 0x00	; 0
    8bde:	ae 01       	movw	r20, r28
    8be0:	4f 5f       	subi	r20, 0xFF	; 255
    8be2:	5f 4f       	sbci	r21, 0xFF	; 255
    8be4:	6f 96       	adiw	r28, 0x1f	; 31
    8be6:	6e ad       	ldd	r22, Y+62	; 0x3e
    8be8:	7f ad       	ldd	r23, Y+63	; 0x3f
    8bea:	6f 97       	sbiw	r28, 0x1f	; 31
    8bec:	e7 d9       	rcall	.-3122   	; 0x7fbc <p_ntoa>
    8bee:	7c 01       	movw	r14, r24
    8bf0:	a3 96       	adiw	r28, 0x23	; 35
    8bf2:	6e ad       	ldd	r22, Y+62	; 0x3e
    8bf4:	7f ad       	ldd	r23, Y+63	; 0x3f
    8bf6:	a3 97       	sbiw	r28, 0x23	; 35
    8bf8:	67 7f       	andi	r22, 0xF7	; 247
    8bfa:	60 35       	cpi	r22, 0x50	; 80
    8bfc:	71 05       	cpc	r23, r1
    8bfe:	c9 f5       	brne	.+114    	; 0x8c72 <_printf_fn+0x6c2>
    8c00:	34 c0       	rjmp	.+104    	; 0x8c6a <_printf_fn+0x6ba>
    8c02:	c9 2c       	mov	r12, r9
    8c04:	d1 2c       	mov	r13, r1
    8c06:	a1 96       	adiw	r28, 0x21	; 33
    8c08:	ee ac       	ldd	r14, Y+62	; 0x3e
    8c0a:	ff ac       	ldd	r15, Y+63	; 0x3f
    8c0c:	a1 97       	sbiw	r28, 0x21	; 33
    8c0e:	82 01       	movw	r16, r4
    8c10:	22 e4       	ldi	r18, 0x42	; 66
    8c12:	30 e0       	ldi	r19, 0x00	; 0
    8c14:	ae 01       	movw	r20, r28
    8c16:	4f 5f       	subi	r20, 0xFF	; 255
    8c18:	5f 4f       	sbci	r21, 0xFF	; 255
    8c1a:	a9 96       	adiw	r28, 0x29	; 41
    8c1c:	6c ad       	ldd	r22, Y+60	; 0x3c
    8c1e:	7d ad       	ldd	r23, Y+61	; 0x3d
    8c20:	8e ad       	ldd	r24, Y+62	; 0x3e
    8c22:	9f ad       	ldd	r25, Y+63	; 0x3f
    8c24:	a9 97       	sbiw	r28, 0x29	; 41
    8c26:	1f da       	rcall	.-3010   	; 0x8066 <p_ftoa>
    8c28:	93 fa       	bst	r9, 3
    8c2a:	00 27       	eor	r16, r16
    8c2c:	00 f9       	bld	r16, 0
    8c2e:	10 e0       	ldi	r17, 0x00	; 0
    8c30:	9c 01       	movw	r18, r24
    8c32:	24 c0       	rjmp	.+72     	; 0x8c7c <_printf_fn+0x6cc>
    8c34:	c9 2c       	mov	r12, r9
    8c36:	d1 2c       	mov	r13, r1
    8c38:	a1 96       	adiw	r28, 0x21	; 33
    8c3a:	ee ac       	ldd	r14, Y+62	; 0x3e
    8c3c:	ff ac       	ldd	r15, Y+63	; 0x3f
    8c3e:	a1 97       	sbiw	r28, 0x21	; 33
    8c40:	82 01       	movw	r16, r4
    8c42:	22 e4       	ldi	r18, 0x42	; 66
    8c44:	30 e0       	ldi	r19, 0x00	; 0
    8c46:	ae 01       	movw	r20, r28
    8c48:	4f 5f       	subi	r20, 0xFF	; 255
    8c4a:	5f 4f       	sbci	r21, 0xFF	; 255
    8c4c:	a9 96       	adiw	r28, 0x29	; 41
    8c4e:	6c ad       	ldd	r22, Y+60	; 0x3c
    8c50:	7d ad       	ldd	r23, Y+61	; 0x3d
    8c52:	8e ad       	ldd	r24, Y+62	; 0x3e
    8c54:	9f ad       	ldd	r25, Y+63	; 0x3f
    8c56:	a9 97       	sbiw	r28, 0x29	; 41
    8c58:	0d db       	rcall	.-2534   	; 0x8274 <p_etoa>
    8c5a:	7c 01       	movw	r14, r24
    8c5c:	a3 96       	adiw	r28, 0x23	; 35
    8c5e:	4e ad       	ldd	r20, Y+62	; 0x3e
    8c60:	5f ad       	ldd	r21, Y+63	; 0x3f
    8c62:	a3 97       	sbiw	r28, 0x23	; 35
    8c64:	45 34       	cpi	r20, 0x45	; 69
    8c66:	51 05       	cpc	r21, r1
    8c68:	21 f4       	brne	.+8      	; 0x8c72 <_printf_fn+0x6c2>
    8c6a:	ce 01       	movw	r24, r28
    8c6c:	01 96       	adiw	r24, 0x01	; 1
    8c6e:	0e 94 82 32 	call	0x6504	; 0x6504 <strupper>
    8c72:	93 fa       	bst	r9, 3
    8c74:	00 27       	eor	r16, r16
    8c76:	00 f9       	bld	r16, 0
    8c78:	10 e0       	ldi	r17, 0x00	; 0
    8c7a:	97 01       	movw	r18, r14
    8c7c:	a2 01       	movw	r20, r4
    8c7e:	be 01       	movw	r22, r28
    8c80:	6f 5f       	subi	r22, 0xFF	; 255
    8c82:	7f 4f       	sbci	r23, 0xFF	; 255
    8c84:	a5 96       	adiw	r28, 0x25	; 37
    8c86:	8e ad       	ldd	r24, Y+62	; 0x3e
    8c88:	9f ad       	ldd	r25, Y+63	; 0x3f
    8c8a:	a5 97       	sbiw	r28, 0x25	; 37
    8c8c:	4f dc       	rcall	.-1890   	; 0x852c <_puts_pad>
    8c8e:	69 c0       	rjmp	.+210    	; 0x8d62 <_printf_fn+0x7b2>
    8c90:	a3 96       	adiw	r28, 0x23	; 35
    8c92:	8e ad       	ldd	r24, Y+62	; 0x3e
    8c94:	9f ad       	ldd	r25, Y+63	; 0x3f
    8c96:	a3 97       	sbiw	r28, 0x23	; 35
    8c98:	83 37       	cpi	r24, 0x73	; 115
    8c9a:	91 05       	cpc	r25, r1
    8c9c:	69 f4       	brne	.+26     	; 0x8cb8 <_printf_fn+0x708>
    8c9e:	71 01       	movw	r14, r2
    8ca0:	92 e0       	ldi	r25, 0x02	; 2
    8ca2:	e9 0e       	add	r14, r25
    8ca4:	f1 1c       	adc	r15, r1
    8ca6:	d1 01       	movw	r26, r2
    8ca8:	6d 91       	ld	r22, X+
    8caa:	7c 91       	ld	r23, X
    8cac:	61 15       	cp	r22, r1
    8cae:	71 05       	cpc	r23, r1
    8cb0:	91 f4       	brne	.+36     	; 0x8cd6 <_printf_fn+0x726>
    8cb2:	6a e3       	ldi	r22, 0x3A	; 58
    8cb4:	73 e0       	ldi	r23, 0x03	; 3
    8cb6:	0f c0       	rjmp	.+30     	; 0x8cd6 <_printf_fn+0x726>
    8cb8:	71 01       	movw	r14, r2
    8cba:	b2 e0       	ldi	r27, 0x02	; 2
    8cbc:	eb 0e       	add	r14, r27
    8cbe:	f1 1c       	adc	r15, r1
    8cc0:	f1 01       	movw	r30, r2
    8cc2:	80 81       	ld	r24, Z
    8cc4:	60 96       	adiw	r28, 0x10	; 16
    8cc6:	8f af       	std	Y+63, r24	; 0x3f
    8cc8:	60 97       	sbiw	r28, 0x10	; 16
    8cca:	61 96       	adiw	r28, 0x11	; 17
    8ccc:	1f ae       	std	Y+63, r1	; 0x3f
    8cce:	61 97       	sbiw	r28, 0x11	; 17
    8cd0:	be 01       	movw	r22, r28
    8cd2:	61 5b       	subi	r22, 0xB1	; 177
    8cd4:	7f 4f       	sbci	r23, 0xFF	; 255
    8cd6:	fb 01       	movw	r30, r22
    8cd8:	01 90       	ld	r0, Z+
    8cda:	00 20       	and	r0, r0
    8cdc:	e9 f7       	brne	.-6      	; 0x8cd8 <_printf_fn+0x728>
    8cde:	31 97       	sbiw	r30, 0x01	; 1
    8ce0:	e6 1b       	sub	r30, r22
    8ce2:	f7 0b       	sbc	r31, r23
    8ce4:	a1 96       	adiw	r28, 0x21	; 33
    8ce6:	2e ad       	ldd	r18, Y+62	; 0x3e
    8ce8:	3f ad       	ldd	r19, Y+63	; 0x3f
    8cea:	a1 97       	sbiw	r28, 0x21	; 33
    8cec:	23 2b       	or	r18, r19
    8cee:	21 f4       	brne	.+8      	; 0x8cf8 <_printf_fn+0x748>
    8cf0:	a1 96       	adiw	r28, 0x21	; 33
    8cf2:	ff af       	std	Y+63, r31	; 0x3f
    8cf4:	ee af       	std	Y+62, r30	; 0x3e
    8cf6:	a1 97       	sbiw	r28, 0x21	; 33
    8cf8:	a1 96       	adiw	r28, 0x21	; 33
    8cfa:	4e ad       	ldd	r20, Y+62	; 0x3e
    8cfc:	5f ad       	ldd	r21, Y+63	; 0x3f
    8cfe:	a1 97       	sbiw	r28, 0x21	; 33
    8d00:	44 16       	cp	r4, r20
    8d02:	55 06       	cpc	r5, r21
    8d04:	3c f4       	brge	.+14     	; 0x8d14 <_printf_fn+0x764>
    8d06:	41 14       	cp	r4, r1
    8d08:	51 04       	cpc	r5, r1
    8d0a:	21 f0       	breq	.+8      	; 0x8d14 <_printf_fn+0x764>
    8d0c:	a1 96       	adiw	r28, 0x21	; 33
    8d0e:	5f ae       	std	Y+63, r5	; 0x3f
    8d10:	4e ae       	std	Y+62, r4	; 0x3e
    8d12:	a1 97       	sbiw	r28, 0x21	; 33
    8d14:	93 fa       	bst	r9, 3
    8d16:	00 27       	eor	r16, r16
    8d18:	00 f9       	bld	r16, 0
    8d1a:	10 e0       	ldi	r17, 0x00	; 0
    8d1c:	a1 96       	adiw	r28, 0x21	; 33
    8d1e:	2e ad       	ldd	r18, Y+62	; 0x3e
    8d20:	3f ad       	ldd	r19, Y+63	; 0x3f
    8d22:	a1 97       	sbiw	r28, 0x21	; 33
    8d24:	a2 01       	movw	r20, r4
    8d26:	a5 96       	adiw	r28, 0x25	; 37
    8d28:	8e ad       	ldd	r24, Y+62	; 0x3e
    8d2a:	9f ad       	ldd	r25, Y+63	; 0x3f
    8d2c:	a5 97       	sbiw	r28, 0x25	; 37
    8d2e:	fe db       	rcall	.-2052   	; 0x852c <_puts_pad>
    8d30:	17 01       	movw	r2, r14
    8d32:	17 c0       	rjmp	.+46     	; 0x8d62 <_printf_fn+0x7b2>
    8d34:	f6 01       	movw	r30, r12
    8d36:	5e 2d       	mov	r21, r14
    8d38:	0e 94 ff e3 	call	0x1c7fe	; 0x1c7fe <__xload_1>
    8d3c:	66 23       	and	r22, r22
    8d3e:	89 f0       	breq	.+34     	; 0x8d62 <_printf_fn+0x7b2>
    8d40:	5f ef       	ldi	r21, 0xFF	; 255
    8d42:	c5 1a       	sub	r12, r21
    8d44:	d5 0a       	sbc	r13, r21
    8d46:	e5 0a       	sbc	r14, r21
    8d48:	a5 96       	adiw	r28, 0x25	; 37
    8d4a:	ae ad       	ldd	r26, Y+62	; 0x3e
    8d4c:	bf ad       	ldd	r27, Y+63	; 0x3f
    8d4e:	a5 97       	sbiw	r28, 0x25	; 37
    8d50:	ed 91       	ld	r30, X+
    8d52:	fc 91       	ld	r31, X
    8d54:	11 97       	sbiw	r26, 0x01	; 1
    8d56:	cd 01       	movw	r24, r26
    8d58:	09 95       	icall
    8d5a:	6c 14       	cp	r6, r12
    8d5c:	7d 04       	cpc	r7, r13
    8d5e:	8e 04       	cpc	r8, r14
    8d60:	48 f7       	brcc	.-46     	; 0x8d34 <_printf_fn+0x784>
    8d62:	e8 2c       	mov	r14, r8
    8d64:	63 01       	movw	r12, r6
    8d66:	53 cc       	rjmp	.-1882   	; 0x860e <_printf_fn+0x5e>
    8d68:	e2 e0       	ldi	r30, 0x02	; 2
    8d6a:	f0 e0       	ldi	r31, 0x00	; 0
    8d6c:	6f 96       	adiw	r28, 0x1f	; 31
    8d6e:	ff af       	std	Y+63, r31	; 0x3f
    8d70:	ee af       	std	Y+62, r30	; 0x3e
    8d72:	6f 97       	sbiw	r28, 0x1f	; 31
    8d74:	5f cd       	rjmp	.-1346   	; 0x8834 <_printf_fn+0x284>
    8d76:	6f 96       	adiw	r28, 0x1f	; 31
    8d78:	ee ad       	ldd	r30, Y+62	; 0x3e
    8d7a:	ff ad       	ldd	r31, Y+63	; 0x3f
    8d7c:	6f 97       	sbiw	r28, 0x1f	; 31
    8d7e:	32 97       	sbiw	r30, 0x02	; 2
    8d80:	61 f4       	brne	.+24     	; 0x8d9a <_printf_fn+0x7ea>
    8d82:	51 01       	movw	r10, r2
    8d84:	f2 e0       	ldi	r31, 0x02	; 2
    8d86:	af 0e       	add	r10, r31
    8d88:	b1 1c       	adc	r11, r1
    8d8a:	d1 01       	movw	r26, r2
    8d8c:	8d 91       	ld	r24, X+
    8d8e:	9c 91       	ld	r25, X
    8d90:	65 96       	adiw	r28, 0x15	; 21
    8d92:	9f af       	std	Y+63, r25	; 0x3f
    8d94:	8e af       	std	Y+62, r24	; 0x3e
    8d96:	65 97       	sbiw	r28, 0x15	; 21
    8d98:	cd cd       	rjmp	.-1126   	; 0x8934 <_printf_fn+0x384>
    8d9a:	6f 96       	adiw	r28, 0x1f	; 31
    8d9c:	2e ad       	ldd	r18, Y+62	; 0x3e
    8d9e:	3f ad       	ldd	r19, Y+63	; 0x3f
    8da0:	6f 97       	sbiw	r28, 0x1f	; 31
    8da2:	24 30       	cpi	r18, 0x04	; 4
    8da4:	31 05       	cpc	r19, r1
    8da6:	09 f0       	breq	.+2      	; 0x8daa <_printf_fn+0x7fa>
    8da8:	06 ce       	rjmp	.-1012   	; 0x89b6 <_printf_fn+0x406>
    8daa:	51 01       	movw	r10, r2
    8dac:	f4 e0       	ldi	r31, 0x04	; 4
    8dae:	af 0e       	add	r10, r31
    8db0:	b1 1c       	adc	r11, r1
    8db2:	f1 01       	movw	r30, r2
    8db4:	80 81       	ld	r24, Z
    8db6:	91 81       	ldd	r25, Z+1	; 0x01
    8db8:	a2 81       	ldd	r26, Z+2	; 0x02
    8dba:	b3 81       	ldd	r27, Z+3	; 0x03
    8dbc:	2f 96       	adiw	r28, 0x0f	; 15
    8dbe:	8c af       	std	Y+60, r24	; 0x3c
    8dc0:	9d af       	std	Y+61, r25	; 0x3d
    8dc2:	ae af       	std	Y+62, r26	; 0x3e
    8dc4:	bf af       	std	Y+63, r27	; 0x3f
    8dc6:	2f 97       	sbiw	r28, 0x0f	; 15
    8dc8:	e4 cd       	rjmp	.-1080   	; 0x8992 <_printf_fn+0x3e2>
    8dca:	c5 59       	subi	r28, 0x95	; 149
    8dcc:	df 4f       	sbci	r29, 0xFF	; 255
    8dce:	e2 e1       	ldi	r30, 0x12	; 18
    8dd0:	0c 94 e4 e3 	jmp	0x1c7c8	; 0x1c7c8 <__epilogue_restores__>

00008dd4 <vsnprintf_P>:
    8dd4:	a8 e0       	ldi	r26, 0x08	; 8
    8dd6:	b0 e0       	ldi	r27, 0x00	; 0
    8dd8:	e0 ef       	ldi	r30, 0xF0	; 240
    8dda:	f6 e4       	ldi	r31, 0x46	; 70
    8ddc:	0c 94 d4 e3 	jmp	0x1c7a8	; 0x1c7a8 <__prologue_saves__+0x18>
    8de0:	7c 01       	movw	r14, r24
    8de2:	cb 01       	movw	r24, r22
    8de4:	64 2f       	mov	r22, r20
    8de6:	a9 01       	movw	r20, r18
    8de8:	98 01       	movw	r18, r16
    8dea:	f7 01       	movw	r30, r14
    8dec:	10 82       	st	Z, r1
    8dee:	ef ef       	ldi	r30, 0xFF	; 255
    8df0:	fe e3       	ldi	r31, 0x3E	; 62
    8df2:	fa 83       	std	Y+2, r31	; 0x02
    8df4:	e9 83       	std	Y+1, r30	; 0x01
    8df6:	9e 83       	std	Y+6, r25	; 0x06
    8df8:	8d 83       	std	Y+5, r24	; 0x05
    8dfa:	18 86       	std	Y+8, r1	; 0x08
    8dfc:	1f 82       	std	Y+7, r1	; 0x07
    8dfe:	fc 82       	std	Y+4, r15	; 0x04
    8e00:	eb 82       	std	Y+3, r14	; 0x03
    8e02:	ce 01       	movw	r24, r28
    8e04:	01 96       	adiw	r24, 0x01	; 1
    8e06:	d4 db       	rcall	.-2136   	; 0x85b0 <_printf_fn>
    8e08:	f7 01       	movw	r30, r14
    8e0a:	01 90       	ld	r0, Z+
    8e0c:	00 20       	and	r0, r0
    8e0e:	e9 f7       	brne	.-6      	; 0x8e0a <vsnprintf_P+0x36>
    8e10:	cf 01       	movw	r24, r30
    8e12:	01 97       	sbiw	r24, 0x01	; 1
    8e14:	8e 19       	sub	r24, r14
    8e16:	9f 09       	sbc	r25, r15
    8e18:	28 96       	adiw	r28, 0x08	; 8
    8e1a:	e6 e0       	ldi	r30, 0x06	; 6
    8e1c:	0c 94 f0 e3 	jmp	0x1c7e0	; 0x1c7e0 <__epilogue_restores__+0x18>

00008e20 <snprintf_P>:
    8e20:	a0 e0       	ldi	r26, 0x00	; 0
    8e22:	b0 e0       	ldi	r27, 0x00	; 0
    8e24:	e6 e1       	ldi	r30, 0x16	; 22
    8e26:	f7 e4       	ldi	r31, 0x47	; 71
    8e28:	0c 94 d6 e3 	jmp	0x1c7ac	; 0x1c7ac <__prologue_saves__+0x1c>
    8e2c:	8e 01       	movw	r16, r28
    8e2e:	02 5f       	subi	r16, 0xF2	; 242
    8e30:	1f 4f       	sbci	r17, 0xFF	; 255
    8e32:	2b 85       	ldd	r18, Y+11	; 0x0b
    8e34:	3c 85       	ldd	r19, Y+12	; 0x0c
    8e36:	4d 85       	ldd	r20, Y+13	; 0x0d
    8e38:	69 85       	ldd	r22, Y+9	; 0x09
    8e3a:	7a 85       	ldd	r23, Y+10	; 0x0a
    8e3c:	8f 81       	ldd	r24, Y+7	; 0x07
    8e3e:	98 85       	ldd	r25, Y+8	; 0x08
    8e40:	c9 df       	rcall	.-110    	; 0x8dd4 <vsnprintf_P>
    8e42:	e4 e0       	ldi	r30, 0x04	; 4
    8e44:	0c 94 f2 e3 	jmp	0x1c7e4	; 0x1c7e4 <__epilogue_restores__+0x1c>

00008e48 <sprintf_P>:
    8e48:	a0 e0       	ldi	r26, 0x00	; 0
    8e4a:	b0 e0       	ldi	r27, 0x00	; 0
    8e4c:	ea e2       	ldi	r30, 0x2A	; 42
    8e4e:	f7 e4       	ldi	r31, 0x47	; 71
    8e50:	0c 94 d6 e3 	jmp	0x1c7ac	; 0x1c7ac <__prologue_saves__+0x1c>
    8e54:	8e 01       	movw	r16, r28
    8e56:	04 5f       	subi	r16, 0xF4	; 244
    8e58:	1f 4f       	sbci	r17, 0xFF	; 255
    8e5a:	29 85       	ldd	r18, Y+9	; 0x09
    8e5c:	3a 85       	ldd	r19, Y+10	; 0x0a
    8e5e:	4b 85       	ldd	r20, Y+11	; 0x0b
    8e60:	60 e0       	ldi	r22, 0x00	; 0
    8e62:	74 e0       	ldi	r23, 0x04	; 4
    8e64:	8f 81       	ldd	r24, Y+7	; 0x07
    8e66:	98 85       	ldd	r25, Y+8	; 0x08
    8e68:	b5 df       	rcall	.-150    	; 0x8dd4 <vsnprintf_P>
    8e6a:	e4 e0       	ldi	r30, 0x04	; 4
    8e6c:	0c 94 f2 e3 	jmp	0x1c7e4	; 0x1c7e4 <__epilogue_restores__+0x1c>

00008e70 <printf_P>:
/// @return size of printed string
/// TODO create a devprintf using an array of function prointers ?
MEMSPACE 
int 
printf_P(__memx const char *format, ...)
{
    8e70:	a8 e0       	ldi	r26, 0x08	; 8
    8e72:	b0 e0       	ldi	r27, 0x00	; 0
    8e74:	ee e3       	ldi	r30, 0x3E	; 62
    8e76:	f7 e4       	ldi	r31, 0x47	; 71
    8e78:	0c 94 d8 e3 	jmp	0x1c7b0	; 0x1c7b0 <__prologue_saves__+0x20>
    8e7c:	9e 01       	movw	r18, r28
    8e7e:	23 5f       	subi	r18, 0xF3	; 243
    8e80:	3f 4f       	sbci	r19, 0xFF	; 255
    8e82:	f9 01       	movw	r30, r18
    8e84:	41 91       	ld	r20, Z+
    8e86:	51 91       	ld	r21, Z+
    8e88:	61 91       	ld	r22, Z+
    8e8a:	9f 01       	movw	r18, r30
    printf_t fn;
    va_list va;

    fn.put = _putc_fn;
    8e8c:	88 e1       	ldi	r24, 0x18	; 24
    8e8e:	9f e3       	ldi	r25, 0x3F	; 63
    8e90:	9a 83       	std	Y+2, r25	; 0x02
    8e92:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    8e94:	18 86       	std	Y+8, r1	; 0x08
    8e96:	1f 82       	std	Y+7, r1	; 0x07

    va_start(va, format);
    _printf_fn(&fn, format, va);
    8e98:	ce 01       	movw	r24, r28
    8e9a:	01 96       	adiw	r24, 0x01	; 1
    8e9c:	89 db       	rcall	.-2286   	; 0x85b0 <_printf_fn>
    va_end(va);

    return ((int)fn.sent);
}
    8e9e:	8f 81       	ldd	r24, Y+7	; 0x07
    8ea0:	98 85       	ldd	r25, Y+8	; 0x08
    8ea2:	28 96       	adiw	r28, 0x08	; 8
    8ea4:	e2 e0       	ldi	r30, 0x02	; 2
    8ea6:	0c 94 f4 e3 	jmp	0x1c7e8	; 0x1c7e8 <__epilogue_restores__+0x20>

00008eaa <atodigit>:
    if(sign)
        num = -num;
    if(endptr)
        *endptr = (char *) nptr;
    return(num);
}
    8eaa:	9c 01       	movw	r18, r24
    8eac:	20 53       	subi	r18, 0x30	; 48
    8eae:	31 09       	sbc	r19, r1
    8eb0:	2a 30       	cpi	r18, 0x0A	; 10
    8eb2:	31 05       	cpc	r19, r1
    8eb4:	10 f4       	brcc	.+4      	; 0x8eba <atodigit+0x10>
    8eb6:	c9 01       	movw	r24, r18
    8eb8:	10 c0       	rjmp	.+32     	; 0x8eda <atodigit+0x30>
    8eba:	9c 01       	movw	r18, r24
    8ebc:	21 54       	subi	r18, 0x41	; 65
    8ebe:	31 09       	sbc	r19, r1
    8ec0:	26 30       	cpi	r18, 0x06	; 6
    8ec2:	31 05       	cpc	r19, r1
    8ec4:	10 f4       	brcc	.+4      	; 0x8eca <atodigit+0x20>
    8ec6:	c7 97       	sbiw	r24, 0x37	; 55
    8ec8:	08 c0       	rjmp	.+16     	; 0x8eda <atodigit+0x30>
    8eca:	9c 01       	movw	r18, r24
    8ecc:	21 56       	subi	r18, 0x61	; 97
    8ece:	31 09       	sbc	r19, r1
    8ed0:	26 30       	cpi	r18, 0x06	; 6
    8ed2:	31 05       	cpc	r19, r1
    8ed4:	28 f4       	brcc	.+10     	; 0x8ee0 <atodigit+0x36>
    8ed6:	87 55       	subi	r24, 0x57	; 87
    8ed8:	91 09       	sbc	r25, r1
    8eda:	86 17       	cp	r24, r22
    8edc:	97 07       	cpc	r25, r23
    8ede:	14 f0       	brlt	.+4      	; 0x8ee4 <atodigit+0x3a>
    8ee0:	8f ef       	ldi	r24, 0xFF	; 255
    8ee2:	9f ef       	ldi	r25, 0xFF	; 255
    8ee4:	08 95       	ret

00008ee6 <strtol>:
    8ee6:	a0 e0       	ldi	r26, 0x00	; 0
    8ee8:	b0 e0       	ldi	r27, 0x00	; 0
    8eea:	e9 e7       	ldi	r30, 0x79	; 121
    8eec:	f7 e4       	ldi	r31, 0x47	; 71
    8eee:	0c 94 c8 e3 	jmp	0x1c790	; 0x1c790 <__prologue_saves__>
    8ef2:	2b 01       	movw	r4, r22
    8ef4:	8a 01       	movw	r16, r20
    8ef6:	ec 01       	movw	r28, r24
    8ef8:	28 81       	ld	r18, Y
    8efa:	01 96       	adiw	r24, 0x01	; 1
    8efc:	20 32       	cpi	r18, 0x20	; 32
    8efe:	d9 f3       	breq	.-10     	; 0x8ef6 <strtol+0x10>
    8f00:	29 30       	cpi	r18, 0x09	; 9
    8f02:	c9 f3       	breq	.-14     	; 0x8ef6 <strtol+0x10>
    8f04:	2d 32       	cpi	r18, 0x2D	; 45
    8f06:	29 f4       	brne	.+10     	; 0x8f12 <strtol+0x2c>
    8f08:	ec 01       	movw	r28, r24
    8f0a:	66 24       	eor	r6, r6
    8f0c:	63 94       	inc	r6
    8f0e:	71 2c       	mov	r7, r1
    8f10:	05 c0       	rjmp	.+10     	; 0x8f1c <strtol+0x36>
    8f12:	2b 32       	cpi	r18, 0x2B	; 43
    8f14:	09 f4       	brne	.+2      	; 0x8f18 <strtol+0x32>
    8f16:	ec 01       	movw	r28, r24
    8f18:	61 2c       	mov	r6, r1
    8f1a:	71 2c       	mov	r7, r1
    8f1c:	9e 01       	movw	r18, r28
    8f1e:	2f 5f       	subi	r18, 0xFF	; 255
    8f20:	3f 4f       	sbci	r19, 0xFF	; 255
    8f22:	88 81       	ld	r24, Y
    8f24:	80 33       	cpi	r24, 0x30	; 48
    8f26:	11 f4       	brne	.+4      	; 0x8f2c <strtol+0x46>
    8f28:	e9 01       	movw	r28, r18
    8f2a:	f8 cf       	rjmp	.-16     	; 0x8f1c <strtol+0x36>
    8f2c:	c1 2c       	mov	r12, r1
    8f2e:	d1 2c       	mov	r13, r1
    8f30:	76 01       	movw	r14, r12
    8f32:	48 01       	movw	r8, r16
    8f34:	01 2e       	mov	r0, r17
    8f36:	00 0c       	add	r0, r0
    8f38:	aa 08       	sbc	r10, r10
    8f3a:	bb 08       	sbc	r11, r11
    8f3c:	3c 2e       	mov	r3, r28
    8f3e:	2d 2e       	mov	r2, r29
    8f40:	89 91       	ld	r24, Y+
    8f42:	88 23       	and	r24, r24
    8f44:	31 f0       	breq	.+12     	; 0x8f52 <strtol+0x6c>
    8f46:	b8 01       	movw	r22, r16
    8f48:	90 e0       	ldi	r25, 0x00	; 0
    8f4a:	af df       	rcall	.-162    	; 0x8eaa <atodigit>
    8f4c:	fc 01       	movw	r30, r24
    8f4e:	97 ff       	sbrs	r25, 7
    8f50:	0c c0       	rjmp	.+24     	; 0x8f6a <strtol+0x84>
    8f52:	61 14       	cp	r6, r1
    8f54:	71 04       	cpc	r7, r1
    8f56:	c1 f0       	breq	.+48     	; 0x8f88 <strtol+0xa2>
    8f58:	f0 94       	com	r15
    8f5a:	e0 94       	com	r14
    8f5c:	d0 94       	com	r13
    8f5e:	c0 94       	com	r12
    8f60:	c1 1c       	adc	r12, r1
    8f62:	d1 1c       	adc	r13, r1
    8f64:	e1 1c       	adc	r14, r1
    8f66:	f1 1c       	adc	r15, r1
    8f68:	0f c0       	rjmp	.+30     	; 0x8f88 <strtol+0xa2>
    8f6a:	a5 01       	movw	r20, r10
    8f6c:	94 01       	movw	r18, r8
    8f6e:	c7 01       	movw	r24, r14
    8f70:	b6 01       	movw	r22, r12
    8f72:	0e 94 04 e3 	call	0x1c608	; 0x1c608 <__mulsi3>
    8f76:	6f 01       	movw	r12, r30
    8f78:	ff 0f       	add	r31, r31
    8f7a:	ee 08       	sbc	r14, r14
    8f7c:	ff 08       	sbc	r15, r15
    8f7e:	c6 0e       	add	r12, r22
    8f80:	d7 1e       	adc	r13, r23
    8f82:	e8 1e       	adc	r14, r24
    8f84:	f9 1e       	adc	r15, r25
    8f86:	da cf       	rjmp	.-76     	; 0x8f3c <strtol+0x56>
    8f88:	41 14       	cp	r4, r1
    8f8a:	51 04       	cpc	r5, r1
    8f8c:	19 f0       	breq	.+6      	; 0x8f94 <strtol+0xae>
    8f8e:	f2 01       	movw	r30, r4
    8f90:	30 82       	st	Z, r3
    8f92:	21 82       	std	Z+1, r2	; 0x01
    8f94:	c7 01       	movw	r24, r14
    8f96:	b6 01       	movw	r22, r12
    8f98:	cd b7       	in	r28, 0x3d	; 61
    8f9a:	de b7       	in	r29, 0x3e	; 62
    8f9c:	e2 e1       	ldi	r30, 0x12	; 18
    8f9e:	0c 94 e4 e3 	jmp	0x1c7c8	; 0x1c7c8 <__epilogue_restores__>

00008fa2 <atoi>:
MEMSPACE 
int
atoi(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    8fa2:	4a e0       	ldi	r20, 0x0A	; 10
    8fa4:	50 e0       	ldi	r21, 0x00	; 0
    8fa6:	60 e0       	ldi	r22, 0x00	; 0
    8fa8:	70 e0       	ldi	r23, 0x00	; 0
    8faa:	9d df       	rcall	.-198    	; 0x8ee6 <strtol>
    return((int)num);
}
    8fac:	cb 01       	movw	r24, r22
    8fae:	08 95       	ret

00008fb0 <atol>:
MEMSPACE 
long
atol(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    8fb0:	4a e0       	ldi	r20, 0x0A	; 10
    8fb2:	50 e0       	ldi	r21, 0x00	; 0
    8fb4:	60 e0       	ldi	r22, 0x00	; 0
    8fb6:	70 e0       	ldi	r23, 0x00	; 0
    8fb8:	96 cf       	rjmp	.-212    	; 0x8ee6 <strtol>
    return(num);
}
    8fba:	08 95       	ret

00008fbc <ld_dword>:
#endif
		if (res != FR_OK) ABORT(fs, res);
	}

	LEAVE_FF(fs, res);
}
    8fbc:	fc 01       	movw	r30, r24
    8fbe:	62 81       	ldd	r22, Z+2	; 0x02
    8fc0:	73 81       	ldd	r23, Z+3	; 0x03
    8fc2:	cb 01       	movw	r24, r22
    8fc4:	a0 e0       	ldi	r26, 0x00	; 0
    8fc6:	b0 e0       	ldi	r27, 0x00	; 0
    8fc8:	ba 2f       	mov	r27, r26
    8fca:	a9 2f       	mov	r26, r25
    8fcc:	98 2f       	mov	r25, r24
    8fce:	88 27       	eor	r24, r24
    8fd0:	21 81       	ldd	r18, Z+1	; 0x01
    8fd2:	82 2b       	or	r24, r18
    8fd4:	ba 2f       	mov	r27, r26
    8fd6:	a9 2f       	mov	r26, r25
    8fd8:	98 2f       	mov	r25, r24
    8fda:	88 27       	eor	r24, r24
    8fdc:	20 81       	ld	r18, Z
    8fde:	bc 01       	movw	r22, r24
    8fe0:	cd 01       	movw	r24, r26
    8fe2:	62 2b       	or	r22, r18
    8fe4:	08 95       	ret

00008fe6 <st_dword>:
    8fe6:	fc 01       	movw	r30, r24
    8fe8:	40 83       	st	Z, r20
    8fea:	51 83       	std	Z+1, r21	; 0x01
    8fec:	62 83       	std	Z+2, r22	; 0x02
    8fee:	73 83       	std	Z+3, r23	; 0x03
    8ff0:	08 95       	ret

00008ff2 <mem_set>:
    8ff2:	48 0f       	add	r20, r24
    8ff4:	59 1f       	adc	r21, r25
    8ff6:	fc 01       	movw	r30, r24
    8ff8:	61 93       	st	Z+, r22
    8ffa:	cf 01       	movw	r24, r30
    8ffc:	e4 17       	cp	r30, r20
    8ffe:	f5 07       	cpc	r31, r21
    9000:	d1 f7       	brne	.-12     	; 0x8ff6 <mem_set+0x4>
    9002:	08 95       	ret

00009004 <mem_cmp>:
    9004:	dc 01       	movw	r26, r24
    9006:	fb 01       	movw	r30, r22
    9008:	2d 91       	ld	r18, X+
    900a:	81 91       	ld	r24, Z+
    900c:	30 e0       	ldi	r19, 0x00	; 0
    900e:	b9 01       	movw	r22, r18
    9010:	68 1b       	sub	r22, r24
    9012:	71 09       	sbc	r23, r1
    9014:	cb 01       	movw	r24, r22
    9016:	41 50       	subi	r20, 0x01	; 1
    9018:	51 09       	sbc	r21, r1
    901a:	11 f0       	breq	.+4      	; 0x9020 <mem_cmp+0x1c>
    901c:	00 97       	sbiw	r24, 0x00	; 0
    901e:	a1 f3       	breq	.-24     	; 0x9008 <mem_cmp+0x4>
    9020:	08 95       	ret

00009022 <tchar2uni>:
    9022:	0f 93       	push	r16
    9024:	1f 93       	push	r17
    9026:	fc 01       	movw	r30, r24
    9028:	a0 81       	ld	r26, Z
    902a:	b1 81       	ldd	r27, Z+1	; 0x01
    902c:	fd 01       	movw	r30, r26
    902e:	31 96       	adiw	r30, 0x01	; 1
    9030:	4c 91       	ld	r20, X
    9032:	47 fd       	sbrc	r20, 7
    9034:	04 c0       	rjmp	.+8      	; 0x903e <tchar2uni+0x1c>
    9036:	50 e0       	ldi	r21, 0x00	; 0
    9038:	60 e0       	ldi	r22, 0x00	; 0
    903a:	70 e0       	ldi	r23, 0x00	; 0
    903c:	68 c0       	rjmp	.+208    	; 0x910e <tchar2uni+0xec>
    903e:	24 2f       	mov	r18, r20
    9040:	20 7e       	andi	r18, 0xE0	; 224
    9042:	20 3c       	cpi	r18, 0xC0	; 192
    9044:	39 f4       	brne	.+14     	; 0x9054 <tchar2uni+0x32>
    9046:	4f 71       	andi	r20, 0x1F	; 31
    9048:	50 e0       	ldi	r21, 0x00	; 0
    904a:	60 e0       	ldi	r22, 0x00	; 0
    904c:	70 e0       	ldi	r23, 0x00	; 0
    904e:	21 e0       	ldi	r18, 0x01	; 1
    9050:	30 e0       	ldi	r19, 0x00	; 0
    9052:	16 c0       	rjmp	.+44     	; 0x9080 <tchar2uni+0x5e>
    9054:	24 2f       	mov	r18, r20
    9056:	20 7f       	andi	r18, 0xF0	; 240
    9058:	20 3e       	cpi	r18, 0xE0	; 224
    905a:	39 f4       	brne	.+14     	; 0x906a <tchar2uni+0x48>
    905c:	4f 70       	andi	r20, 0x0F	; 15
    905e:	50 e0       	ldi	r21, 0x00	; 0
    9060:	60 e0       	ldi	r22, 0x00	; 0
    9062:	70 e0       	ldi	r23, 0x00	; 0
    9064:	22 e0       	ldi	r18, 0x02	; 2
    9066:	30 e0       	ldi	r19, 0x00	; 0
    9068:	0b c0       	rjmp	.+22     	; 0x9080 <tchar2uni+0x5e>
    906a:	24 2f       	mov	r18, r20
    906c:	28 7f       	andi	r18, 0xF8	; 248
    906e:	20 3f       	cpi	r18, 0xF0	; 240
    9070:	09 f0       	breq	.+2      	; 0x9074 <tchar2uni+0x52>
    9072:	54 c0       	rjmp	.+168    	; 0x911c <tchar2uni+0xfa>
    9074:	47 70       	andi	r20, 0x07	; 7
    9076:	50 e0       	ldi	r21, 0x00	; 0
    9078:	60 e0       	ldi	r22, 0x00	; 0
    907a:	70 e0       	ldi	r23, 0x00	; 0
    907c:	23 e0       	ldi	r18, 0x03	; 3
    907e:	30 e0       	ldi	r19, 0x00	; 0
    9080:	31 96       	adiw	r30, 0x01	; 1
    9082:	df 01       	movw	r26, r30
    9084:	11 97       	sbiw	r26, 0x01	; 1
    9086:	ac 91       	ld	r26, X
    9088:	ba 2f       	mov	r27, r26
    908a:	b0 7c       	andi	r27, 0xC0	; 192
    908c:	b0 38       	cpi	r27, 0x80	; 128
    908e:	09 f0       	breq	.+2      	; 0x9092 <tchar2uni+0x70>
    9090:	45 c0       	rjmp	.+138    	; 0x911c <tchar2uni+0xfa>
    9092:	b6 e0       	ldi	r27, 0x06	; 6
    9094:	44 0f       	add	r20, r20
    9096:	55 1f       	adc	r21, r21
    9098:	66 1f       	adc	r22, r22
    909a:	77 1f       	adc	r23, r23
    909c:	ba 95       	dec	r27
    909e:	d1 f7       	brne	.-12     	; 0x9094 <tchar2uni+0x72>
    90a0:	af 73       	andi	r26, 0x3F	; 63
    90a2:	4a 2b       	or	r20, r26
    90a4:	21 50       	subi	r18, 0x01	; 1
    90a6:	31 09       	sbc	r19, r1
    90a8:	59 f7       	brne	.-42     	; 0x9080 <tchar2uni+0x5e>
    90aa:	8a 01       	movw	r16, r20
    90ac:	9b 01       	movw	r18, r22
    90ae:	00 58       	subi	r16, 0x80	; 128
    90b0:	11 09       	sbc	r17, r1
    90b2:	21 09       	sbc	r18, r1
    90b4:	31 09       	sbc	r19, r1
    90b6:	00 38       	cpi	r16, 0x80	; 128
    90b8:	1f 4f       	sbci	r17, 0xFF	; 255
    90ba:	20 41       	sbci	r18, 0x10	; 16
    90bc:	31 05       	cpc	r19, r1
    90be:	70 f5       	brcc	.+92     	; 0x911c <tchar2uni+0xfa>
    90c0:	8a 01       	movw	r16, r20
    90c2:	9b 01       	movw	r18, r22
    90c4:	18 5d       	subi	r17, 0xD8	; 216
    90c6:	21 09       	sbc	r18, r1
    90c8:	31 09       	sbc	r19, r1
    90ca:	01 15       	cp	r16, r1
    90cc:	18 40       	sbci	r17, 0x08	; 8
    90ce:	21 05       	cpc	r18, r1
    90d0:	31 05       	cpc	r19, r1
    90d2:	20 f1       	brcs	.+72     	; 0x911c <tchar2uni+0xfa>
    90d4:	41 15       	cp	r20, r1
    90d6:	51 05       	cpc	r21, r1
    90d8:	21 e0       	ldi	r18, 0x01	; 1
    90da:	62 07       	cpc	r22, r18
    90dc:	71 05       	cpc	r23, r1
    90de:	b8 f0       	brcs	.+46     	; 0x910e <tchar2uni+0xec>
    90e0:	8a 01       	movw	r16, r20
    90e2:	9b 01       	movw	r18, r22
    90e4:	21 50       	subi	r18, 0x01	; 1
    90e6:	31 09       	sbc	r19, r1
    90e8:	a6 e0       	ldi	r26, 0x06	; 6
    90ea:	00 0f       	add	r16, r16
    90ec:	11 1f       	adc	r17, r17
    90ee:	22 1f       	adc	r18, r18
    90f0:	33 1f       	adc	r19, r19
    90f2:	aa 95       	dec	r26
    90f4:	d1 f7       	brne	.-12     	; 0x90ea <tchar2uni+0xc8>
    90f6:	00 27       	eor	r16, r16
    90f8:	11 27       	eor	r17, r17
    90fa:	33 70       	andi	r19, 0x03	; 3
    90fc:	53 70       	andi	r21, 0x03	; 3
    90fe:	66 27       	eor	r22, r22
    9100:	77 27       	eor	r23, r23
    9102:	5c 6d       	ori	r21, 0xDC	; 220
    9104:	78 6d       	ori	r23, 0xD8	; 216
    9106:	40 2b       	or	r20, r16
    9108:	51 2b       	or	r21, r17
    910a:	62 2b       	or	r22, r18
    910c:	73 2b       	or	r23, r19
    910e:	dc 01       	movw	r26, r24
    9110:	ed 93       	st	X+, r30
    9112:	fc 93       	st	X, r31
    9114:	34 2f       	mov	r19, r20
    9116:	25 2f       	mov	r18, r21
    9118:	cb 01       	movw	r24, r22
    911a:	04 c0       	rjmp	.+8      	; 0x9124 <tchar2uni+0x102>
    911c:	3f ef       	ldi	r19, 0xFF	; 255
    911e:	2f ef       	ldi	r18, 0xFF	; 255
    9120:	8f ef       	ldi	r24, 0xFF	; 255
    9122:	9f ef       	ldi	r25, 0xFF	; 255
    9124:	63 2f       	mov	r22, r19
    9126:	72 2f       	mov	r23, r18
    9128:	1f 91       	pop	r17
    912a:	0f 91       	pop	r16
    912c:	08 95       	ret

0000912e <clst2sect>:
    912e:	0f 93       	push	r16
    9130:	1f 93       	push	r17
    9132:	fc 01       	movw	r30, r24
    9134:	9a 01       	movw	r18, r20
    9136:	ab 01       	movw	r20, r22
    9138:	22 50       	subi	r18, 0x02	; 2
    913a:	31 09       	sbc	r19, r1
    913c:	41 09       	sbc	r20, r1
    913e:	51 09       	sbc	r21, r1
    9140:	81 8d       	ldd	r24, Z+25	; 0x19
    9142:	92 8d       	ldd	r25, Z+26	; 0x1a
    9144:	a3 8d       	ldd	r26, Z+27	; 0x1b
    9146:	b4 8d       	ldd	r27, Z+28	; 0x1c
    9148:	02 97       	sbiw	r24, 0x02	; 2
    914a:	a1 09       	sbc	r26, r1
    914c:	b1 09       	sbc	r27, r1
    914e:	28 17       	cp	r18, r24
    9150:	39 07       	cpc	r19, r25
    9152:	4a 07       	cpc	r20, r26
    9154:	5b 07       	cpc	r21, r27
    9156:	68 f4       	brcc	.+26     	; 0x9172 <clst2sect+0x44>
    9158:	a1 85       	ldd	r26, Z+9	; 0x09
    915a:	b2 85       	ldd	r27, Z+10	; 0x0a
    915c:	0e 94 a8 e3 	call	0x1c750	; 0x1c750 <__muluhisi3>
    9160:	05 a5       	ldd	r16, Z+45	; 0x2d
    9162:	16 a5       	ldd	r17, Z+46	; 0x2e
    9164:	27 a5       	ldd	r18, Z+47	; 0x2f
    9166:	30 a9       	ldd	r19, Z+48	; 0x30
    9168:	60 0f       	add	r22, r16
    916a:	71 1f       	adc	r23, r17
    916c:	82 1f       	adc	r24, r18
    916e:	93 1f       	adc	r25, r19
    9170:	03 c0       	rjmp	.+6      	; 0x9178 <clst2sect+0x4a>
    9172:	60 e0       	ldi	r22, 0x00	; 0
    9174:	70 e0       	ldi	r23, 0x00	; 0
    9176:	cb 01       	movw	r24, r22
    9178:	1f 91       	pop	r17
    917a:	0f 91       	pop	r16
    917c:	08 95       	ret

0000917e <clmt_clust>:
    917e:	cf 93       	push	r28
    9180:	df 93       	push	r29
    9182:	fc 01       	movw	r30, r24
    9184:	c2 a1       	ldd	r28, Z+34	; 0x22
    9186:	d3 a1       	ldd	r29, Z+35	; 0x23
    9188:	24 96       	adiw	r28, 0x04	; 4
    918a:	cb 01       	movw	r24, r22
    918c:	ba 01       	movw	r22, r20
    918e:	29 e0       	ldi	r18, 0x09	; 9
    9190:	96 95       	lsr	r25
    9192:	87 95       	ror	r24
    9194:	77 95       	ror	r23
    9196:	67 95       	ror	r22
    9198:	2a 95       	dec	r18
    919a:	d1 f7       	brne	.-12     	; 0x9190 <clmt_clust+0x12>
    919c:	01 90       	ld	r0, Z+
    919e:	f0 81       	ld	r31, Z
    91a0:	e0 2d       	mov	r30, r0
    91a2:	21 85       	ldd	r18, Z+9	; 0x09
    91a4:	32 85       	ldd	r19, Z+10	; 0x0a
    91a6:	40 e0       	ldi	r20, 0x00	; 0
    91a8:	50 e0       	ldi	r21, 0x00	; 0
    91aa:	0e 94 46 e3 	call	0x1c68c	; 0x1c68c <__udivmodsi4>
    91ae:	88 81       	ld	r24, Y
    91b0:	99 81       	ldd	r25, Y+1	; 0x01
    91b2:	aa 81       	ldd	r26, Y+2	; 0x02
    91b4:	bb 81       	ldd	r27, Y+3	; 0x03
    91b6:	00 97       	sbiw	r24, 0x00	; 0
    91b8:	a1 05       	cpc	r26, r1
    91ba:	b1 05       	cpc	r27, r1
    91bc:	b1 f0       	breq	.+44     	; 0x91ea <clmt_clust+0x6c>
    91be:	28 17       	cp	r18, r24
    91c0:	39 07       	cpc	r19, r25
    91c2:	4a 07       	cpc	r20, r26
    91c4:	5b 07       	cpc	r21, r27
    91c6:	30 f0       	brcs	.+12     	; 0x91d4 <clmt_clust+0x56>
    91c8:	28 1b       	sub	r18, r24
    91ca:	39 0b       	sbc	r19, r25
    91cc:	4a 0b       	sbc	r20, r26
    91ce:	5b 0b       	sbc	r21, r27
    91d0:	28 96       	adiw	r28, 0x08	; 8
    91d2:	ed cf       	rjmp	.-38     	; 0x91ae <clmt_clust+0x30>
    91d4:	8c 81       	ldd	r24, Y+4	; 0x04
    91d6:	9d 81       	ldd	r25, Y+5	; 0x05
    91d8:	ae 81       	ldd	r26, Y+6	; 0x06
    91da:	bf 81       	ldd	r27, Y+7	; 0x07
    91dc:	bc 01       	movw	r22, r24
    91de:	cd 01       	movw	r24, r26
    91e0:	62 0f       	add	r22, r18
    91e2:	73 1f       	adc	r23, r19
    91e4:	84 1f       	adc	r24, r20
    91e6:	95 1f       	adc	r25, r21
    91e8:	03 c0       	rjmp	.+6      	; 0x91f0 <clmt_clust+0x72>
    91ea:	60 e0       	ldi	r22, 0x00	; 0
    91ec:	70 e0       	ldi	r23, 0x00	; 0
    91ee:	cb 01       	movw	r24, r22
    91f0:	df 91       	pop	r29
    91f2:	cf 91       	pop	r28
    91f4:	08 95       	ret

000091f6 <sum_sfn>:
    91f6:	fc 01       	movw	r30, r24
    91f8:	9c 01       	movw	r18, r24
    91fa:	25 5f       	subi	r18, 0xF5	; 245
    91fc:	3f 4f       	sbci	r19, 0xFF	; 255
    91fe:	80 e0       	ldi	r24, 0x00	; 0
    9200:	98 2f       	mov	r25, r24
    9202:	90 fb       	bst	r25, 0
    9204:	97 95       	ror	r25
    9206:	97 f9       	bld	r25, 7
    9208:	81 91       	ld	r24, Z+
    920a:	89 0f       	add	r24, r25
    920c:	e2 17       	cp	r30, r18
    920e:	f3 07       	cpc	r31, r19
    9210:	b9 f7       	brne	.-18     	; 0x9200 <sum_sfn+0xa>
    9212:	08 95       	ret

00009214 <get_ldnumber>:
    9214:	cf 93       	push	r28
    9216:	df 93       	push	r29
    9218:	dc 01       	movw	r26, r24
    921a:	ed 91       	ld	r30, X+
    921c:	fc 91       	ld	r31, X
    921e:	11 97       	sbiw	r26, 0x01	; 1
    9220:	30 97       	sbiw	r30, 0x00	; 0
    9222:	f9 f0       	breq	.+62     	; 0x9262 <get_ldnumber+0x4e>
    9224:	9f 01       	movw	r18, r30
    9226:	2f 5f       	subi	r18, 0xFF	; 255
    9228:	3f 4f       	sbci	r19, 0xFF	; 255
    922a:	e9 01       	movw	r28, r18
    922c:	21 97       	sbiw	r28, 0x01	; 1
    922e:	88 81       	ld	r24, Y
    9230:	80 32       	cpi	r24, 0x20	; 32
    9232:	18 f0       	brcs	.+6      	; 0x923a <get_ldnumber+0x26>
    9234:	8a 33       	cpi	r24, 0x3A	; 58
    9236:	b9 f7       	brne	.-18     	; 0x9226 <get_ldnumber+0x12>
    9238:	04 c0       	rjmp	.+8      	; 0x9242 <get_ldnumber+0x2e>
    923a:	80 91 ba 17 	lds	r24, 0x17BA	; 0x8017ba <CurrVol>
    923e:	90 e0       	ldi	r25, 0x00	; 0
    9240:	12 c0       	rjmp	.+36     	; 0x9266 <get_ldnumber+0x52>
    9242:	90 81       	ld	r25, Z
    9244:	80 ed       	ldi	r24, 0xD0	; 208
    9246:	89 0f       	add	r24, r25
    9248:	8a 30       	cpi	r24, 0x0A	; 10
    924a:	58 f4       	brcc	.+22     	; 0x9262 <get_ldnumber+0x4e>
    924c:	32 96       	adiw	r30, 0x02	; 2
    924e:	2e 17       	cp	r18, r30
    9250:	3f 07       	cpc	r19, r31
    9252:	39 f4       	brne	.+14     	; 0x9262 <get_ldnumber+0x4e>
    9254:	90 33       	cpi	r25, 0x30	; 48
    9256:	29 f4       	brne	.+10     	; 0x9262 <get_ldnumber+0x4e>
    9258:	2d 93       	st	X+, r18
    925a:	3c 93       	st	X, r19
    925c:	80 e0       	ldi	r24, 0x00	; 0
    925e:	90 e0       	ldi	r25, 0x00	; 0
    9260:	02 c0       	rjmp	.+4      	; 0x9266 <get_ldnumber+0x52>
    9262:	8f ef       	ldi	r24, 0xFF	; 255
    9264:	9f ef       	ldi	r25, 0xFF	; 255
    9266:	df 91       	pop	r29
    9268:	cf 91       	pop	r28
    926a:	08 95       	ret

0000926c <validate>:
    926c:	0f 93       	push	r16
    926e:	1f 93       	push	r17
    9270:	cf 93       	push	r28
    9272:	df 93       	push	r29
    9274:	ec 01       	movw	r28, r24
    9276:	8b 01       	movw	r16, r22
    9278:	89 2b       	or	r24, r25
    927a:	f9 f0       	breq	.+62     	; 0x92ba <validate+0x4e>
    927c:	e8 81       	ld	r30, Y
    927e:	f9 81       	ldd	r31, Y+1	; 0x01
    9280:	30 97       	sbiw	r30, 0x00	; 0
    9282:	d9 f0       	breq	.+54     	; 0x92ba <validate+0x4e>
    9284:	80 81       	ld	r24, Z
    9286:	88 23       	and	r24, r24
    9288:	c1 f0       	breq	.+48     	; 0x92ba <validate+0x4e>
    928a:	2a 81       	ldd	r18, Y+2	; 0x02
    928c:	3b 81       	ldd	r19, Y+3	; 0x03
    928e:	85 81       	ldd	r24, Z+5	; 0x05
    9290:	96 81       	ldd	r25, Z+6	; 0x06
    9292:	28 17       	cp	r18, r24
    9294:	39 07       	cpc	r19, r25
    9296:	89 f4       	brne	.+34     	; 0x92ba <validate+0x4e>
    9298:	81 81       	ldd	r24, Z+1	; 0x01
    929a:	0e 94 f6 6a 	call	0xd5ec	; 0xd5ec <disk_status>
    929e:	80 fd       	sbrc	r24, 0
    92a0:	0c c0       	rjmp	.+24     	; 0x92ba <validate+0x4e>
    92a2:	28 81       	ld	r18, Y
    92a4:	39 81       	ldd	r19, Y+1	; 0x01
    92a6:	80 e0       	ldi	r24, 0x00	; 0
    92a8:	90 e0       	ldi	r25, 0x00	; 0
    92aa:	f8 01       	movw	r30, r16
    92ac:	31 83       	std	Z+1, r19	; 0x01
    92ae:	20 83       	st	Z, r18
    92b0:	df 91       	pop	r29
    92b2:	cf 91       	pop	r28
    92b4:	1f 91       	pop	r17
    92b6:	0f 91       	pop	r16
    92b8:	08 95       	ret
    92ba:	89 e0       	ldi	r24, 0x09	; 9
    92bc:	90 e0       	ldi	r25, 0x00	; 0
    92be:	20 e0       	ldi	r18, 0x00	; 0
    92c0:	30 e0       	ldi	r19, 0x00	; 0
    92c2:	f3 cf       	rjmp	.-26     	; 0x92aa <validate+0x3e>

000092c4 <mem_cpy.part.0>:
    92c4:	fb 01       	movw	r30, r22
    92c6:	48 0f       	add	r20, r24
    92c8:	59 1f       	adc	r21, r25
    92ca:	21 91       	ld	r18, Z+
    92cc:	dc 01       	movw	r26, r24
    92ce:	2d 93       	st	X+, r18
    92d0:	cd 01       	movw	r24, r26
    92d2:	a4 17       	cp	r26, r20
    92d4:	b5 07       	cpc	r27, r21
    92d6:	c9 f7       	brne	.-14     	; 0x92ca <mem_cpy.part.0+0x6>
    92d8:	08 95       	ret

000092da <put_utf>:
    92da:	0f 93       	push	r16
    92dc:	1f 93       	push	r17
    92de:	fa 01       	movw	r30, r20
    92e0:	60 38       	cpi	r22, 0x80	; 128
    92e2:	71 05       	cpc	r23, r1
    92e4:	81 05       	cpc	r24, r1
    92e6:	91 05       	cpc	r25, r1
    92e8:	30 f4       	brcc	.+12     	; 0x92f6 <put_utf+0x1c>
    92ea:	23 2b       	or	r18, r19
    92ec:	09 f4       	brne	.+2      	; 0x92f0 <put_utf+0x16>
    92ee:	9e c0       	rjmp	.+316    	; 0x942c <put_utf+0x152>
    92f0:	60 83       	st	Z, r22
    92f2:	81 e0       	ldi	r24, 0x01	; 1
    92f4:	9c c0       	rjmp	.+312    	; 0x942e <put_utf+0x154>
    92f6:	61 15       	cp	r22, r1
    92f8:	48 e0       	ldi	r20, 0x08	; 8
    92fa:	74 07       	cpc	r23, r20
    92fc:	81 05       	cpc	r24, r1
    92fe:	91 05       	cpc	r25, r1
    9300:	a0 f4       	brcc	.+40     	; 0x932a <put_utf+0x50>
    9302:	22 30       	cpi	r18, 0x02	; 2
    9304:	31 05       	cpc	r19, r1
    9306:	08 f4       	brcc	.+2      	; 0x930a <put_utf+0x30>
    9308:	91 c0       	rjmp	.+290    	; 0x942c <put_utf+0x152>
    930a:	8b 01       	movw	r16, r22
    930c:	9c 01       	movw	r18, r24
    930e:	76 e0       	ldi	r23, 0x06	; 6
    9310:	36 95       	lsr	r19
    9312:	27 95       	ror	r18
    9314:	17 95       	ror	r17
    9316:	07 95       	ror	r16
    9318:	7a 95       	dec	r23
    931a:	d1 f7       	brne	.-12     	; 0x9310 <put_utf+0x36>
    931c:	00 6c       	ori	r16, 0xC0	; 192
    931e:	00 83       	st	Z, r16
    9320:	6f 73       	andi	r22, 0x3F	; 63
    9322:	60 68       	ori	r22, 0x80	; 128
    9324:	61 83       	std	Z+1, r22	; 0x01
    9326:	82 e0       	ldi	r24, 0x02	; 2
    9328:	82 c0       	rjmp	.+260    	; 0x942e <put_utf+0x154>
    932a:	61 15       	cp	r22, r1
    932c:	71 05       	cpc	r23, r1
    932e:	41 e0       	ldi	r20, 0x01	; 1
    9330:	84 07       	cpc	r24, r20
    9332:	91 05       	cpc	r25, r1
    9334:	58 f5       	brcc	.+86     	; 0x938c <put_utf+0xb2>
    9336:	23 30       	cpi	r18, 0x03	; 3
    9338:	31 05       	cpc	r19, r1
    933a:	08 f4       	brcc	.+2      	; 0x933e <put_utf+0x64>
    933c:	77 c0       	rjmp	.+238    	; 0x942c <put_utf+0x152>
    933e:	8b 01       	movw	r16, r22
    9340:	9c 01       	movw	r18, r24
    9342:	18 5d       	subi	r17, 0xD8	; 216
    9344:	21 09       	sbc	r18, r1
    9346:	31 09       	sbc	r19, r1
    9348:	01 15       	cp	r16, r1
    934a:	18 40       	sbci	r17, 0x08	; 8
    934c:	21 05       	cpc	r18, r1
    934e:	31 05       	cpc	r19, r1
    9350:	08 f4       	brcc	.+2      	; 0x9354 <put_utf+0x7a>
    9352:	6c c0       	rjmp	.+216    	; 0x942c <put_utf+0x152>
    9354:	8b 01       	movw	r16, r22
    9356:	9c 01       	movw	r18, r24
    9358:	4c e0       	ldi	r20, 0x0C	; 12
    935a:	36 95       	lsr	r19
    935c:	27 95       	ror	r18
    935e:	17 95       	ror	r17
    9360:	07 95       	ror	r16
    9362:	4a 95       	dec	r20
    9364:	d1 f7       	brne	.-12     	; 0x935a <put_utf+0x80>
    9366:	00 6e       	ori	r16, 0xE0	; 224
    9368:	00 83       	st	Z, r16
    936a:	8b 01       	movw	r16, r22
    936c:	9c 01       	movw	r18, r24
    936e:	56 e0       	ldi	r21, 0x06	; 6
    9370:	36 95       	lsr	r19
    9372:	27 95       	ror	r18
    9374:	17 95       	ror	r17
    9376:	07 95       	ror	r16
    9378:	5a 95       	dec	r21
    937a:	d1 f7       	brne	.-12     	; 0x9370 <put_utf+0x96>
    937c:	0f 73       	andi	r16, 0x3F	; 63
    937e:	00 68       	ori	r16, 0x80	; 128
    9380:	01 83       	std	Z+1, r16	; 0x01
    9382:	6f 73       	andi	r22, 0x3F	; 63
    9384:	60 68       	ori	r22, 0x80	; 128
    9386:	62 83       	std	Z+2, r22	; 0x02
    9388:	83 e0       	ldi	r24, 0x03	; 3
    938a:	51 c0       	rjmp	.+162    	; 0x942e <put_utf+0x154>
    938c:	24 30       	cpi	r18, 0x04	; 4
    938e:	31 05       	cpc	r19, r1
    9390:	08 f4       	brcc	.+2      	; 0x9394 <put_utf+0xba>
    9392:	4c c0       	rjmp	.+152    	; 0x942c <put_utf+0x152>
    9394:	8b 01       	movw	r16, r22
    9396:	9c 01       	movw	r18, r24
    9398:	00 27       	eor	r16, r16
    939a:	11 27       	eor	r17, r17
    939c:	38 5d       	subi	r19, 0xD8	; 216
    939e:	b6 e0       	ldi	r27, 0x06	; 6
    93a0:	36 95       	lsr	r19
    93a2:	27 95       	ror	r18
    93a4:	17 95       	ror	r17
    93a6:	07 95       	ror	r16
    93a8:	ba 95       	dec	r27
    93aa:	d1 f7       	brne	.-12     	; 0x93a0 <put_utf+0xc6>
    93ac:	01 15       	cp	r16, r1
    93ae:	11 05       	cpc	r17, r1
    93b0:	40 e1       	ldi	r20, 0x10	; 16
    93b2:	24 07       	cpc	r18, r20
    93b4:	31 05       	cpc	r19, r1
    93b6:	d0 f5       	brcc	.+116    	; 0x942c <put_utf+0x152>
    93b8:	dc 01       	movw	r26, r24
    93ba:	cb 01       	movw	r24, r22
    93bc:	aa 27       	eor	r26, r26
    93be:	bb 27       	eor	r27, r27
    93c0:	9c 5d       	subi	r25, 0xDC	; 220
    93c2:	a1 09       	sbc	r26, r1
    93c4:	b1 09       	sbc	r27, r1
    93c6:	81 15       	cp	r24, r1
    93c8:	44 e0       	ldi	r20, 0x04	; 4
    93ca:	94 07       	cpc	r25, r20
    93cc:	a1 05       	cpc	r26, r1
    93ce:	b1 05       	cpc	r27, r1
    93d0:	68 f5       	brcc	.+90     	; 0x942c <put_utf+0x152>
    93d2:	80 2b       	or	r24, r16
    93d4:	91 2b       	or	r25, r17
    93d6:	a2 2b       	or	r26, r18
    93d8:	b3 2b       	or	r27, r19
    93da:	11 96       	adiw	r26, 0x01	; 1
    93dc:	ac 01       	movw	r20, r24
    93de:	bd 01       	movw	r22, r26
    93e0:	22 e1       	ldi	r18, 0x12	; 18
    93e2:	76 95       	lsr	r23
    93e4:	67 95       	ror	r22
    93e6:	57 95       	ror	r21
    93e8:	47 95       	ror	r20
    93ea:	2a 95       	dec	r18
    93ec:	d1 f7       	brne	.-12     	; 0x93e2 <put_utf+0x108>
    93ee:	40 6f       	ori	r20, 0xF0	; 240
    93f0:	40 83       	st	Z, r20
    93f2:	ac 01       	movw	r20, r24
    93f4:	bd 01       	movw	r22, r26
    93f6:	3c e0       	ldi	r19, 0x0C	; 12
    93f8:	76 95       	lsr	r23
    93fa:	67 95       	ror	r22
    93fc:	57 95       	ror	r21
    93fe:	47 95       	ror	r20
    9400:	3a 95       	dec	r19
    9402:	d1 f7       	brne	.-12     	; 0x93f8 <put_utf+0x11e>
    9404:	4f 73       	andi	r20, 0x3F	; 63
    9406:	40 68       	ori	r20, 0x80	; 128
    9408:	41 83       	std	Z+1, r20	; 0x01
    940a:	ac 01       	movw	r20, r24
    940c:	bd 01       	movw	r22, r26
    940e:	a6 e0       	ldi	r26, 0x06	; 6
    9410:	76 95       	lsr	r23
    9412:	67 95       	ror	r22
    9414:	57 95       	ror	r21
    9416:	47 95       	ror	r20
    9418:	aa 95       	dec	r26
    941a:	d1 f7       	brne	.-12     	; 0x9410 <put_utf+0x136>
    941c:	4f 73       	andi	r20, 0x3F	; 63
    941e:	40 68       	ori	r20, 0x80	; 128
    9420:	42 83       	std	Z+2, r20	; 0x02
    9422:	8f 73       	andi	r24, 0x3F	; 63
    9424:	80 68       	ori	r24, 0x80	; 128
    9426:	83 83       	std	Z+3, r24	; 0x03
    9428:	84 e0       	ldi	r24, 0x04	; 4
    942a:	01 c0       	rjmp	.+2      	; 0x942e <put_utf+0x154>
    942c:	80 e0       	ldi	r24, 0x00	; 0
    942e:	1f 91       	pop	r17
    9430:	0f 91       	pop	r16
    9432:	08 95       	ret

00009434 <get_fileinfo>:
    9434:	a0 e0       	ldi	r26, 0x00	; 0
    9436:	b0 e0       	ldi	r27, 0x00	; 0
    9438:	e0 e2       	ldi	r30, 0x20	; 32
    943a:	fa e4       	ldi	r31, 0x4A	; 74
    943c:	0c 94 c8 e3 	jmp	0x1c790	; 0x1c790 <__prologue_saves__>
    9440:	fc 01       	movw	r30, r24
    9442:	60 80       	ld	r6, Z
    9444:	71 80       	ldd	r7, Z+1	; 0x01
    9446:	fb 01       	movw	r30, r22
    9448:	16 8a       	std	Z+22, r1	; 0x16
    944a:	fc 01       	movw	r30, r24
    944c:	06 89       	ldd	r16, Z+22	; 0x16
    944e:	17 89       	ldd	r17, Z+23	; 0x17
    9450:	20 8d       	ldd	r18, Z+24	; 0x18
    9452:	31 8d       	ldd	r19, Z+25	; 0x19
    9454:	01 15       	cp	r16, r1
    9456:	11 05       	cpc	r17, r1
    9458:	21 05       	cpc	r18, r1
    945a:	31 05       	cpc	r19, r1
    945c:	09 f4       	brne	.+2      	; 0x9460 <get_fileinfo+0x2c>
    945e:	f5 c0       	rjmp	.+490    	; 0x964a <get_fileinfo+0x216>
    9460:	eb 01       	movw	r28, r22
    9462:	8c 01       	movw	r16, r24
    9464:	80 a5       	ldd	r24, Z+40	; 0x28
    9466:	91 a5       	ldd	r25, Z+41	; 0x29
    9468:	a2 a5       	ldd	r26, Z+42	; 0x2a
    946a:	b3 a5       	ldd	r27, Z+43	; 0x2b
    946c:	8f 3f       	cpi	r24, 0xFF	; 255
    946e:	9f 4f       	sbci	r25, 0xFF	; 255
    9470:	af 4f       	sbci	r26, 0xFF	; 255
    9472:	bf 4f       	sbci	r27, 0xFF	; 255
    9474:	09 f4       	brne	.+2      	; 0x9478 <get_fileinfo+0x44>
    9476:	48 c0       	rjmp	.+144    	; 0x9508 <get_fileinfo+0xd4>
    9478:	a1 2c       	mov	r10, r1
    947a:	b1 2c       	mov	r11, r1
    947c:	c1 2c       	mov	r12, r1
    947e:	d1 2c       	mov	r13, r1
    9480:	e1 2c       	mov	r14, r1
    9482:	f1 2c       	mov	r15, r1
    9484:	88 24       	eor	r8, r8
    9486:	8a 94       	dec	r8
    9488:	91 2c       	mov	r9, r1
    948a:	f3 01       	movw	r30, r6
    948c:	83 85       	ldd	r24, Z+11	; 0x0b
    948e:	94 85       	ldd	r25, Z+12	; 0x0c
    9490:	fc 01       	movw	r30, r24
    9492:	ea 0d       	add	r30, r10
    9494:	fb 1d       	adc	r31, r11
    9496:	80 81       	ld	r24, Z
    9498:	91 81       	ldd	r25, Z+1	; 0x01
    949a:	00 97       	sbiw	r24, 0x00	; 0
    949c:	69 f1       	breq	.+90     	; 0x94f8 <get_fileinfo+0xc4>
    949e:	c1 14       	cp	r12, r1
    94a0:	d1 04       	cpc	r13, r1
    94a2:	29 f4       	brne	.+10     	; 0x94ae <get_fileinfo+0x7a>
    94a4:	9c 01       	movw	r18, r24
    94a6:	38 5d       	subi	r19, 0xD8	; 216
    94a8:	21 15       	cp	r18, r1
    94aa:	38 40       	sbci	r19, 0x08	; 8
    94ac:	f0 f0       	brcs	.+60     	; 0x94ea <get_fileinfo+0xb6>
    94ae:	a7 01       	movw	r20, r14
    94b0:	4a 5e       	subi	r20, 0xEA	; 234
    94b2:	5f 4f       	sbci	r21, 0xFF	; 255
    94b4:	4c 0f       	add	r20, r28
    94b6:	5d 1f       	adc	r21, r29
    94b8:	16 01       	movw	r2, r12
    94ba:	41 2c       	mov	r4, r1
    94bc:	51 2c       	mov	r5, r1
    94be:	21 01       	movw	r4, r2
    94c0:	33 24       	eor	r3, r3
    94c2:	22 24       	eor	r2, r2
    94c4:	a0 e0       	ldi	r26, 0x00	; 0
    94c6:	b0 e0       	ldi	r27, 0x00	; 0
    94c8:	bc 01       	movw	r22, r24
    94ca:	cd 01       	movw	r24, r26
    94cc:	62 29       	or	r22, r2
    94ce:	73 29       	or	r23, r3
    94d0:	84 29       	or	r24, r4
    94d2:	95 29       	or	r25, r5
    94d4:	94 01       	movw	r18, r8
    94d6:	2e 19       	sub	r18, r14
    94d8:	3f 09       	sbc	r19, r15
    94da:	ff de       	rcall	.-514    	; 0x92da <put_utf>
    94dc:	90 e0       	ldi	r25, 0x00	; 0
    94de:	00 97       	sbiw	r24, 0x00	; 0
    94e0:	49 f0       	breq	.+18     	; 0x94f4 <get_fileinfo+0xc0>
    94e2:	e8 0e       	add	r14, r24
    94e4:	f9 1e       	adc	r15, r25
    94e6:	80 e0       	ldi	r24, 0x00	; 0
    94e8:	90 e0       	ldi	r25, 0x00	; 0
    94ea:	e2 e0       	ldi	r30, 0x02	; 2
    94ec:	ae 0e       	add	r10, r30
    94ee:	b1 1c       	adc	r11, r1
    94f0:	6c 01       	movw	r12, r24
    94f2:	cb cf       	rjmp	.-106    	; 0x948a <get_fileinfo+0x56>
    94f4:	e1 2c       	mov	r14, r1
    94f6:	f1 2c       	mov	r15, r1
    94f8:	cd 28       	or	r12, r13
    94fa:	11 f0       	breq	.+4      	; 0x9500 <get_fileinfo+0xcc>
    94fc:	e1 2c       	mov	r14, r1
    94fe:	f1 2c       	mov	r15, r1
    9500:	fe 01       	movw	r30, r28
    9502:	ee 0d       	add	r30, r14
    9504:	ff 1d       	adc	r31, r15
    9506:	16 8a       	std	Z+22, r1	; 0x16
    9508:	e1 2c       	mov	r14, r1
    950a:	f1 2c       	mov	r15, r1
    950c:	80 e0       	ldi	r24, 0x00	; 0
    950e:	90 e0       	ldi	r25, 0x00	; 0
    9510:	2c e0       	ldi	r18, 0x0C	; 12
    9512:	a2 2e       	mov	r10, r18
    9514:	b1 2c       	mov	r11, r1
    9516:	3e e2       	ldi	r19, 0x2E	; 46
    9518:	93 2e       	mov	r9, r19
    951a:	6c 01       	movw	r12, r24
    951c:	ff ef       	ldi	r31, 0xFF	; 255
    951e:	cf 1a       	sub	r12, r31
    9520:	df 0a       	sbc	r13, r31
    9522:	f8 01       	movw	r30, r16
    9524:	22 8d       	ldd	r18, Z+26	; 0x1a
    9526:	33 8d       	ldd	r19, Z+27	; 0x1b
    9528:	f9 01       	movw	r30, r18
    952a:	e8 0f       	add	r30, r24
    952c:	f9 1f       	adc	r31, r25
    952e:	80 81       	ld	r24, Z
    9530:	90 e0       	ldi	r25, 0x00	; 0
    9532:	80 32       	cpi	r24, 0x20	; 32
    9534:	91 05       	cpc	r25, r1
    9536:	71 f1       	breq	.+92     	; 0x9594 <get_fileinfo+0x160>
    9538:	85 30       	cpi	r24, 0x05	; 5
    953a:	91 05       	cpc	r25, r1
    953c:	11 f4       	brne	.+4      	; 0x9542 <get_fileinfo+0x10e>
    953e:	85 ee       	ldi	r24, 0xE5	; 229
    9540:	90 e0       	ldi	r25, 0x00	; 0
    9542:	f9 e0       	ldi	r31, 0x09	; 9
    9544:	cf 16       	cp	r12, r31
    9546:	d1 04       	cpc	r13, r1
    9548:	59 f4       	brne	.+22     	; 0x9560 <get_fileinfo+0x12c>
    954a:	2c e0       	ldi	r18, 0x0C	; 12
    954c:	e2 16       	cp	r14, r18
    954e:	f1 04       	cpc	r15, r1
    9550:	38 f4       	brcc	.+14     	; 0x9560 <get_fileinfo+0x12c>
    9552:	fe 01       	movw	r30, r28
    9554:	ee 0d       	add	r30, r14
    9556:	ff 1d       	adc	r31, r15
    9558:	91 86       	std	Z+9, r9	; 0x09
    955a:	f7 01       	movw	r30, r14
    955c:	31 96       	adiw	r30, 0x01	; 1
    955e:	7f 01       	movw	r14, r30
    9560:	65 eb       	ldi	r22, 0xB5	; 181
    9562:	71 e0       	ldi	r23, 0x01	; 1
    9564:	0e 94 7f 6a 	call	0xd4fe	; 0xd4fe <ff_oem2uni>
    9568:	00 97       	sbiw	r24, 0x00	; 0
    956a:	19 f4       	brne	.+6      	; 0x9572 <get_fileinfo+0x13e>
    956c:	e1 2c       	mov	r14, r1
    956e:	f1 2c       	mov	r15, r1
    9570:	16 c0       	rjmp	.+44     	; 0x959e <get_fileinfo+0x16a>
    9572:	a7 01       	movw	r20, r14
    9574:	47 5f       	subi	r20, 0xF7	; 247
    9576:	5f 4f       	sbci	r21, 0xFF	; 255
    9578:	4c 0f       	add	r20, r28
    957a:	5d 1f       	adc	r21, r29
    957c:	bc 01       	movw	r22, r24
    957e:	80 e0       	ldi	r24, 0x00	; 0
    9580:	90 e0       	ldi	r25, 0x00	; 0
    9582:	95 01       	movw	r18, r10
    9584:	2e 19       	sub	r18, r14
    9586:	3f 09       	sbc	r19, r15
    9588:	a8 de       	rcall	.-688    	; 0x92da <put_utf>
    958a:	90 e0       	ldi	r25, 0x00	; 0
    958c:	00 97       	sbiw	r24, 0x00	; 0
    958e:	71 f3       	breq	.-36     	; 0x956c <get_fileinfo+0x138>
    9590:	e8 0e       	add	r14, r24
    9592:	f9 1e       	adc	r15, r25
    9594:	c6 01       	movw	r24, r12
    9596:	8b 30       	cpi	r24, 0x0B	; 11
    9598:	91 05       	cpc	r25, r1
    959a:	09 f0       	breq	.+2      	; 0x959e <get_fileinfo+0x16a>
    959c:	be cf       	rjmp	.-132    	; 0x951a <get_fileinfo+0xe6>
    959e:	fe 01       	movw	r30, r28
    95a0:	ee 0d       	add	r30, r14
    95a2:	ff 1d       	adc	r31, r15
    95a4:	11 86       	std	Z+9, r1	; 0x09
    95a6:	8e 89       	ldd	r24, Y+22	; 0x16
    95a8:	81 11       	cpse	r24, r1
    95aa:	36 c0       	rjmp	.+108    	; 0x9618 <get_fileinfo+0x1e4>
    95ac:	e1 14       	cp	r14, r1
    95ae:	f1 04       	cpc	r15, r1
    95b0:	31 f0       	breq	.+12     	; 0x95be <get_fileinfo+0x18a>
    95b2:	de 01       	movw	r26, r28
    95b4:	19 96       	adiw	r26, 0x09	; 9
    95b6:	58 e0       	ldi	r21, 0x08	; 8
    95b8:	20 e0       	ldi	r18, 0x00	; 0
    95ba:	30 e0       	ldi	r19, 0x00	; 0
    95bc:	14 c0       	rjmp	.+40     	; 0x95e6 <get_fileinfo+0x1b2>
    95be:	8f e3       	ldi	r24, 0x3F	; 63
    95c0:	8e 8b       	std	Y+22, r24	; 0x16
    95c2:	21 e0       	ldi	r18, 0x01	; 1
    95c4:	30 e0       	ldi	r19, 0x00	; 0
    95c6:	1c c0       	rjmp	.+56     	; 0x9600 <get_fileinfo+0x1cc>
    95c8:	90 e0       	ldi	r25, 0x00	; 0
    95ca:	8e 32       	cpi	r24, 0x2E	; 46
    95cc:	91 05       	cpc	r25, r1
    95ce:	09 f4       	brne	.+2      	; 0x95d2 <get_fileinfo+0x19e>
    95d0:	50 e1       	ldi	r21, 0x10	; 16
    95d2:	bc 01       	movw	r22, r24
    95d4:	61 54       	subi	r22, 0x41	; 65
    95d6:	71 09       	sbc	r23, r1
    95d8:	6a 31       	cpi	r22, 0x1A	; 26
    95da:	71 05       	cpc	r23, r1
    95dc:	40 f0       	brcs	.+16     	; 0x95ee <get_fileinfo+0x1ba>
    95de:	fd 01       	movw	r30, r26
    95e0:	84 87       	std	Z+12, r24	; 0x0c
    95e2:	2f 5f       	subi	r18, 0xFF	; 255
    95e4:	3f 4f       	sbci	r19, 0xFF	; 255
    95e6:	8d 91       	ld	r24, X+
    95e8:	81 11       	cpse	r24, r1
    95ea:	ee cf       	rjmp	.-36     	; 0x95c8 <get_fileinfo+0x194>
    95ec:	09 c0       	rjmp	.+18     	; 0x9600 <get_fileinfo+0x1cc>
    95ee:	f8 01       	movw	r30, r16
    95f0:	62 8d       	ldd	r22, Z+26	; 0x1a
    95f2:	73 8d       	ldd	r23, Z+27	; 0x1b
    95f4:	fb 01       	movw	r30, r22
    95f6:	44 85       	ldd	r20, Z+12	; 0x0c
    95f8:	45 23       	and	r20, r21
    95fa:	89 f3       	breq	.-30     	; 0x95de <get_fileinfo+0x1aa>
    95fc:	80 96       	adiw	r24, 0x20	; 32
    95fe:	ef cf       	rjmp	.-34     	; 0x95de <get_fileinfo+0x1aa>
    9600:	fe 01       	movw	r30, r28
    9602:	e2 0f       	add	r30, r18
    9604:	f3 1f       	adc	r31, r19
    9606:	16 8a       	std	Z+22, r1	; 0x16
    9608:	f8 01       	movw	r30, r16
    960a:	82 8d       	ldd	r24, Z+26	; 0x1a
    960c:	93 8d       	ldd	r25, Z+27	; 0x1b
    960e:	fc 01       	movw	r30, r24
    9610:	84 85       	ldd	r24, Z+12	; 0x0c
    9612:	81 11       	cpse	r24, r1
    9614:	01 c0       	rjmp	.+2      	; 0x9618 <get_fileinfo+0x1e4>
    9616:	19 86       	std	Y+9, r1	; 0x09
    9618:	f8 01       	movw	r30, r16
    961a:	82 8d       	ldd	r24, Z+26	; 0x1a
    961c:	93 8d       	ldd	r25, Z+27	; 0x1b
    961e:	fc 01       	movw	r30, r24
    9620:	83 85       	ldd	r24, Z+11	; 0x0b
    9622:	88 87       	std	Y+8, r24	; 0x08
    9624:	f8 01       	movw	r30, r16
    9626:	02 8d       	ldd	r16, Z+26	; 0x1a
    9628:	13 8d       	ldd	r17, Z+27	; 0x1b
    962a:	c8 01       	movw	r24, r16
    962c:	4c 96       	adiw	r24, 0x1c	; 28
    962e:	c6 dc       	rcall	.-1652   	; 0x8fbc <ld_dword>
    9630:	68 83       	st	Y, r22
    9632:	79 83       	std	Y+1, r23	; 0x01
    9634:	8a 83       	std	Y+2, r24	; 0x02
    9636:	9b 83       	std	Y+3, r25	; 0x03
    9638:	f8 01       	movw	r30, r16
    963a:	86 89       	ldd	r24, Z+22	; 0x16
    963c:	97 89       	ldd	r25, Z+23	; 0x17
    963e:	9f 83       	std	Y+7, r25	; 0x07
    9640:	8e 83       	std	Y+6, r24	; 0x06
    9642:	80 8d       	ldd	r24, Z+24	; 0x18
    9644:	91 8d       	ldd	r25, Z+25	; 0x19
    9646:	9d 83       	std	Y+5, r25	; 0x05
    9648:	8c 83       	std	Y+4, r24	; 0x04
    964a:	cd b7       	in	r28, 0x3d	; 61
    964c:	de b7       	in	r29, 0x3e	; 62
    964e:	e2 e1       	ldi	r30, 0x12	; 18
    9650:	0c 94 e4 e3 	jmp	0x1c7c8	; 0x1c7c8 <__epilogue_restores__>

00009654 <ld_clust.isra.4>:
    9654:	fb 01       	movw	r30, r22
    9656:	42 8d       	ldd	r20, Z+26	; 0x1a
    9658:	53 8d       	ldd	r21, Z+27	; 0x1b
    965a:	60 e0       	ldi	r22, 0x00	; 0
    965c:	70 e0       	ldi	r23, 0x00	; 0
    965e:	83 30       	cpi	r24, 0x03	; 3
    9660:	59 f4       	brne	.+22     	; 0x9678 <ld_clust.isra.4+0x24>
    9662:	84 89       	ldd	r24, Z+20	; 0x14
    9664:	95 89       	ldd	r25, Z+21	; 0x15
    9666:	a0 e0       	ldi	r26, 0x00	; 0
    9668:	b0 e0       	ldi	r27, 0x00	; 0
    966a:	dc 01       	movw	r26, r24
    966c:	99 27       	eor	r25, r25
    966e:	88 27       	eor	r24, r24
    9670:	48 2b       	or	r20, r24
    9672:	59 2b       	or	r21, r25
    9674:	6a 2b       	or	r22, r26
    9676:	7b 2b       	or	r23, r27
    9678:	cb 01       	movw	r24, r22
    967a:	ba 01       	movw	r22, r20
    967c:	08 95       	ret

0000967e <st_clust.isra.5>:
    967e:	fb 01       	movw	r30, r22
    9680:	22 8f       	std	Z+26, r18	; 0x1a
    9682:	33 8f       	std	Z+27, r19	; 0x1b
    9684:	dc 01       	movw	r26, r24
    9686:	8c 91       	ld	r24, X
    9688:	83 30       	cpi	r24, 0x03	; 3
    968a:	29 f4       	brne	.+10     	; 0x9696 <st_clust.isra.5+0x18>
    968c:	ca 01       	movw	r24, r20
    968e:	aa 27       	eor	r26, r26
    9690:	bb 27       	eor	r27, r27
    9692:	84 8b       	std	Z+20, r24	; 0x14
    9694:	95 8b       	std	Z+21, r25	; 0x15
    9696:	08 95       	ret

00009698 <sync_window.part.6>:
    9698:	8f 92       	push	r8
    969a:	9f 92       	push	r9
    969c:	af 92       	push	r10
    969e:	bf 92       	push	r11
    96a0:	ef 92       	push	r14
    96a2:	ff 92       	push	r15
    96a4:	0f 93       	push	r16
    96a6:	1f 93       	push	r17
    96a8:	cf 93       	push	r28
    96aa:	df 93       	push	r29
    96ac:	ec 01       	movw	r28, r24
    96ae:	7c 01       	movw	r14, r24
    96b0:	45 e3       	ldi	r20, 0x35	; 53
    96b2:	e4 0e       	add	r14, r20
    96b4:	f1 1c       	adc	r15, r1
    96b6:	29 a9       	ldd	r18, Y+49	; 0x31
    96b8:	3a a9       	ldd	r19, Y+50	; 0x32
    96ba:	4b a9       	ldd	r20, Y+51	; 0x33
    96bc:	5c a9       	ldd	r21, Y+52	; 0x34
    96be:	01 e0       	ldi	r16, 0x01	; 1
    96c0:	10 e0       	ldi	r17, 0x00	; 0
    96c2:	b7 01       	movw	r22, r14
    96c4:	89 81       	ldd	r24, Y+1	; 0x01
    96c6:	0e 94 12 6b 	call	0xd624	; 0xd624 <disk_write>
    96ca:	89 2b       	or	r24, r25
    96cc:	41 f5       	brne	.+80     	; 0x971e <sync_window.part.6+0x86>
    96ce:	1b 82       	std	Y+3, r1	; 0x03
    96d0:	09 a9       	ldd	r16, Y+49	; 0x31
    96d2:	1a a9       	ldd	r17, Y+50	; 0x32
    96d4:	2b a9       	ldd	r18, Y+51	; 0x33
    96d6:	3c a9       	ldd	r19, Y+52	; 0x34
    96d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    96da:	9e 8d       	ldd	r25, Y+30	; 0x1e
    96dc:	af 8d       	ldd	r26, Y+31	; 0x1f
    96de:	b8 a1       	ldd	r27, Y+32	; 0x20
    96e0:	8d a0       	ldd	r8, Y+37	; 0x25
    96e2:	9e a0       	ldd	r9, Y+38	; 0x26
    96e4:	af a0       	ldd	r10, Y+39	; 0x27
    96e6:	b8 a4       	ldd	r11, Y+40	; 0x28
    96e8:	b9 01       	movw	r22, r18
    96ea:	a8 01       	movw	r20, r16
    96ec:	48 19       	sub	r20, r8
    96ee:	59 09       	sbc	r21, r9
    96f0:	6a 09       	sbc	r22, r10
    96f2:	7b 09       	sbc	r23, r11
    96f4:	48 17       	cp	r20, r24
    96f6:	59 07       	cpc	r21, r25
    96f8:	6a 07       	cpc	r22, r26
    96fa:	7b 07       	cpc	r23, r27
    96fc:	98 f4       	brcc	.+38     	; 0x9724 <sync_window.part.6+0x8c>
    96fe:	6a 81       	ldd	r22, Y+2	; 0x02
    9700:	62 30       	cpi	r22, 0x02	; 2
    9702:	81 f4       	brne	.+32     	; 0x9724 <sync_window.part.6+0x8c>
    9704:	a9 01       	movw	r20, r18
    9706:	98 01       	movw	r18, r16
    9708:	28 0f       	add	r18, r24
    970a:	39 1f       	adc	r19, r25
    970c:	4a 1f       	adc	r20, r26
    970e:	5b 1f       	adc	r21, r27
    9710:	01 e0       	ldi	r16, 0x01	; 1
    9712:	10 e0       	ldi	r17, 0x00	; 0
    9714:	b7 01       	movw	r22, r14
    9716:	89 81       	ldd	r24, Y+1	; 0x01
    9718:	0e 94 12 6b 	call	0xd624	; 0xd624 <disk_write>
    971c:	03 c0       	rjmp	.+6      	; 0x9724 <sync_window.part.6+0x8c>
    971e:	81 e0       	ldi	r24, 0x01	; 1
    9720:	90 e0       	ldi	r25, 0x00	; 0
    9722:	02 c0       	rjmp	.+4      	; 0x9728 <sync_window.part.6+0x90>
    9724:	80 e0       	ldi	r24, 0x00	; 0
    9726:	90 e0       	ldi	r25, 0x00	; 0
    9728:	df 91       	pop	r29
    972a:	cf 91       	pop	r28
    972c:	1f 91       	pop	r17
    972e:	0f 91       	pop	r16
    9730:	ff 90       	pop	r15
    9732:	ef 90       	pop	r14
    9734:	bf 90       	pop	r11
    9736:	af 90       	pop	r10
    9738:	9f 90       	pop	r9
    973a:	8f 90       	pop	r8
    973c:	08 95       	ret

0000973e <sync_fs>:
    973e:	ef 92       	push	r14
    9740:	ff 92       	push	r15
    9742:	0f 93       	push	r16
    9744:	1f 93       	push	r17
    9746:	cf 93       	push	r28
    9748:	df 93       	push	r29
    974a:	ec 01       	movw	r28, r24
    974c:	8b 81       	ldd	r24, Y+3	; 0x03
    974e:	81 11       	cpse	r24, r1
    9750:	05 c0       	rjmp	.+10     	; 0x975c <sync_fs+0x1e>
    9752:	88 81       	ld	r24, Y
    9754:	83 30       	cpi	r24, 0x03	; 3
    9756:	09 f0       	breq	.+2      	; 0x975a <sync_fs+0x1c>
    9758:	52 c0       	rjmp	.+164    	; 0x97fe <sync_fs+0xc0>
    975a:	06 c0       	rjmp	.+12     	; 0x9768 <sync_fs+0x2a>
    975c:	ce 01       	movw	r24, r28
    975e:	9c df       	rcall	.-200    	; 0x9698 <sync_window.part.6>
    9760:	00 97       	sbiw	r24, 0x00	; 0
    9762:	09 f0       	breq	.+2      	; 0x9766 <sync_fs+0x28>
    9764:	59 c0       	rjmp	.+178    	; 0x9818 <sync_fs+0xda>
    9766:	f5 cf       	rjmp	.-22     	; 0x9752 <sync_fs+0x14>
    9768:	8c 81       	ldd	r24, Y+4	; 0x04
    976a:	81 30       	cpi	r24, 0x01	; 1
    976c:	09 f0       	breq	.+2      	; 0x9770 <sync_fs+0x32>
    976e:	47 c0       	rjmp	.+142    	; 0x97fe <sync_fs+0xc0>
    9770:	40 e0       	ldi	r20, 0x00	; 0
    9772:	52 e0       	ldi	r21, 0x02	; 2
    9774:	60 e0       	ldi	r22, 0x00	; 0
    9776:	70 e0       	ldi	r23, 0x00	; 0
    9778:	7e 01       	movw	r14, r28
    977a:	85 e3       	ldi	r24, 0x35	; 53
    977c:	e8 0e       	add	r14, r24
    977e:	f1 1c       	adc	r15, r1
    9780:	c7 01       	movw	r24, r14
    9782:	37 dc       	rcall	.-1938   	; 0x8ff2 <mem_set>
    9784:	85 e5       	ldi	r24, 0x55	; 85
    9786:	fe 01       	movw	r30, r28
    9788:	ed 5c       	subi	r30, 0xCD	; 205
    978a:	fd 4f       	sbci	r31, 0xFD	; 253
    978c:	80 83       	st	Z, r24
    978e:	8a ea       	ldi	r24, 0xAA	; 170
    9790:	31 96       	adiw	r30, 0x01	; 1
    9792:	80 83       	st	Z, r24
    9794:	82 e5       	ldi	r24, 0x52	; 82
    9796:	8d ab       	std	Y+53, r24	; 0x35
    9798:	8e ab       	std	Y+54, r24	; 0x36
    979a:	81 e6       	ldi	r24, 0x61	; 97
    979c:	8f ab       	std	Y+55, r24	; 0x37
    979e:	91 e4       	ldi	r25, 0x41	; 65
    97a0:	98 af       	std	Y+56, r25	; 0x38
    97a2:	22 e7       	ldi	r18, 0x72	; 114
    97a4:	7b 97       	sbiw	r30, 0x1b	; 27
    97a6:	20 83       	st	Z, r18
    97a8:	31 96       	adiw	r30, 0x01	; 1
    97aa:	20 83       	st	Z, r18
    97ac:	31 96       	adiw	r30, 0x01	; 1
    97ae:	90 83       	st	Z, r25
    97b0:	31 96       	adiw	r30, 0x01	; 1
    97b2:	80 83       	st	Z, r24
    97b4:	49 89       	ldd	r20, Y+17	; 0x11
    97b6:	5a 89       	ldd	r21, Y+18	; 0x12
    97b8:	6b 89       	ldd	r22, Y+19	; 0x13
    97ba:	7c 89       	ldd	r23, Y+20	; 0x14
    97bc:	ce 01       	movw	r24, r28
    97be:	83 5e       	subi	r24, 0xE3	; 227
    97c0:	9d 4f       	sbci	r25, 0xFD	; 253
    97c2:	11 dc       	rcall	.-2014   	; 0x8fe6 <st_dword>
    97c4:	4d 85       	ldd	r20, Y+13	; 0x0d
    97c6:	5e 85       	ldd	r21, Y+14	; 0x0e
    97c8:	6f 85       	ldd	r22, Y+15	; 0x0f
    97ca:	78 89       	ldd	r23, Y+16	; 0x10
    97cc:	ce 01       	movw	r24, r28
    97ce:	8f 5d       	subi	r24, 0xDF	; 223
    97d0:	9d 4f       	sbci	r25, 0xFD	; 253
    97d2:	09 dc       	rcall	.-2030   	; 0x8fe6 <st_dword>
    97d4:	89 a1       	ldd	r24, Y+33	; 0x21
    97d6:	9a a1       	ldd	r25, Y+34	; 0x22
    97d8:	ab a1       	ldd	r26, Y+35	; 0x23
    97da:	bc a1       	ldd	r27, Y+36	; 0x24
    97dc:	9c 01       	movw	r18, r24
    97de:	ad 01       	movw	r20, r26
    97e0:	2f 5f       	subi	r18, 0xFF	; 255
    97e2:	3f 4f       	sbci	r19, 0xFF	; 255
    97e4:	4f 4f       	sbci	r20, 0xFF	; 255
    97e6:	5f 4f       	sbci	r21, 0xFF	; 255
    97e8:	29 ab       	std	Y+49, r18	; 0x31
    97ea:	3a ab       	std	Y+50, r19	; 0x32
    97ec:	4b ab       	std	Y+51, r20	; 0x33
    97ee:	5c ab       	std	Y+52, r21	; 0x34
    97f0:	01 e0       	ldi	r16, 0x01	; 1
    97f2:	10 e0       	ldi	r17, 0x00	; 0
    97f4:	b7 01       	movw	r22, r14
    97f6:	89 81       	ldd	r24, Y+1	; 0x01
    97f8:	0e 94 12 6b 	call	0xd624	; 0xd624 <disk_write>
    97fc:	1c 82       	std	Y+4, r1	; 0x04
    97fe:	40 e0       	ldi	r20, 0x00	; 0
    9800:	50 e0       	ldi	r21, 0x00	; 0
    9802:	60 e0       	ldi	r22, 0x00	; 0
    9804:	89 81       	ldd	r24, Y+1	; 0x01
    9806:	0e 94 22 6b 	call	0xd644	; 0xd644 <disk_ioctl>
    980a:	31 e0       	ldi	r19, 0x01	; 1
    980c:	20 e0       	ldi	r18, 0x00	; 0
    980e:	89 2b       	or	r24, r25
    9810:	09 f4       	brne	.+2      	; 0x9814 <sync_fs+0xd6>
    9812:	30 e0       	ldi	r19, 0x00	; 0
    9814:	83 2f       	mov	r24, r19
    9816:	92 2f       	mov	r25, r18
    9818:	cd b7       	in	r28, 0x3d	; 61
    981a:	de b7       	in	r29, 0x3e	; 62
    981c:	e6 e0       	ldi	r30, 0x06	; 6
    981e:	0c 94 f0 e3 	jmp	0x1c7e0	; 0x1c7e0 <__epilogue_restores__+0x18>

00009822 <dir_clear>:
    9822:	4f 92       	push	r4
    9824:	5f 92       	push	r5
    9826:	6f 92       	push	r6
    9828:	7f 92       	push	r7
    982a:	af 92       	push	r10
    982c:	bf 92       	push	r11
    982e:	cf 92       	push	r12
    9830:	df 92       	push	r13
    9832:	ef 92       	push	r14
    9834:	ff 92       	push	r15
    9836:	0f 93       	push	r16
    9838:	1f 93       	push	r17
    983a:	cf 93       	push	r28
    983c:	df 93       	push	r29
    983e:	ec 01       	movw	r28, r24
    9840:	6a 01       	movw	r12, r20
    9842:	7b 01       	movw	r14, r22
    9844:	8b 81       	ldd	r24, Y+3	; 0x03
    9846:	81 11       	cpse	r24, r1
    9848:	28 c0       	rjmp	.+80     	; 0x989a <dir_clear+0x78>
    984a:	b7 01       	movw	r22, r14
    984c:	a6 01       	movw	r20, r12
    984e:	ce 01       	movw	r24, r28
    9850:	6e dc       	rcall	.-1828   	; 0x912e <clst2sect>
    9852:	2b 01       	movw	r4, r22
    9854:	3c 01       	movw	r6, r24
    9856:	69 ab       	std	Y+49, r22	; 0x31
    9858:	7a ab       	std	Y+50, r23	; 0x32
    985a:	8b ab       	std	Y+51, r24	; 0x33
    985c:	9c ab       	std	Y+52, r25	; 0x34
    985e:	5e 01       	movw	r10, r28
    9860:	25 e3       	ldi	r18, 0x35	; 53
    9862:	a2 0e       	add	r10, r18
    9864:	b1 1c       	adc	r11, r1
    9866:	40 e0       	ldi	r20, 0x00	; 0
    9868:	52 e0       	ldi	r21, 0x02	; 2
    986a:	60 e0       	ldi	r22, 0x00	; 0
    986c:	70 e0       	ldi	r23, 0x00	; 0
    986e:	c5 01       	movw	r24, r10
    9870:	c0 db       	rcall	.-2176   	; 0x8ff2 <mem_set>
    9872:	09 85       	ldd	r16, Y+9	; 0x09
    9874:	1a 85       	ldd	r17, Y+10	; 0x0a
    9876:	c8 01       	movw	r24, r16
    9878:	a0 e0       	ldi	r26, 0x00	; 0
    987a:	b0 e0       	ldi	r27, 0x00	; 0
    987c:	39 e0       	ldi	r19, 0x09	; 9
    987e:	88 0f       	add	r24, r24
    9880:	99 1f       	adc	r25, r25
    9882:	aa 1f       	adc	r26, r26
    9884:	bb 1f       	adc	r27, r27
    9886:	3a 95       	dec	r19
    9888:	d1 f7       	brne	.-12     	; 0x987e <dir_clear+0x5c>
    988a:	81 15       	cp	r24, r1
    988c:	90 48       	sbci	r25, 0x80	; 128
    988e:	a1 05       	cpc	r26, r1
    9890:	b1 05       	cpc	r27, r1
    9892:	50 f0       	brcs	.+20     	; 0x98a8 <dir_clear+0x86>
    9894:	00 e0       	ldi	r16, 0x00	; 0
    9896:	10 e8       	ldi	r17, 0x80	; 128
    9898:	14 c0       	rjmp	.+40     	; 0x98c2 <dir_clear+0xa0>
    989a:	ce 01       	movw	r24, r28
    989c:	fd de       	rcall	.-518    	; 0x9698 <sync_window.part.6>
    989e:	89 2b       	or	r24, r25
    98a0:	a1 f2       	breq	.-88     	; 0x984a <dir_clear+0x28>
    98a2:	81 e0       	ldi	r24, 0x01	; 1
    98a4:	90 e0       	ldi	r25, 0x00	; 0
    98a6:	56 c0       	rjmp	.+172    	; 0x9954 <dir_clear+0x132>
    98a8:	10 2f       	mov	r17, r16
    98aa:	00 27       	eor	r16, r16
    98ac:	11 0f       	add	r17, r17
    98ae:	09 c0       	rjmp	.+18     	; 0x98c2 <dir_clear+0xa0>
    98b0:	c8 01       	movw	r24, r16
    98b2:	0e 94 46 6a 	call	0xd48c	; 0xd48c <ff_memalloc>
    98b6:	6c 01       	movw	r12, r24
    98b8:	00 97       	sbiw	r24, 0x00	; 0
    98ba:	09 f0       	breq	.+2      	; 0x98be <dir_clear+0x9c>
    98bc:	40 c0       	rjmp	.+128    	; 0x993e <dir_clear+0x11c>
    98be:	16 95       	lsr	r17
    98c0:	07 95       	ror	r16
    98c2:	01 30       	cpi	r16, 0x01	; 1
    98c4:	82 e0       	ldi	r24, 0x02	; 2
    98c6:	18 07       	cpc	r17, r24
    98c8:	98 f7       	brcc	.-26     	; 0x98b0 <dir_clear+0x8e>
    98ca:	e1 2c       	mov	r14, r1
    98cc:	f1 2c       	mov	r15, r1
    98ce:	11 c0       	rjmp	.+34     	; 0x98f2 <dir_clear+0xd0>
    98d0:	01 e0       	ldi	r16, 0x01	; 1
    98d2:	10 e0       	ldi	r17, 0x00	; 0
    98d4:	a3 01       	movw	r20, r6
    98d6:	92 01       	movw	r18, r4
    98d8:	2e 0d       	add	r18, r14
    98da:	3f 1d       	adc	r19, r15
    98dc:	41 1d       	adc	r20, r1
    98de:	51 1d       	adc	r21, r1
    98e0:	b5 01       	movw	r22, r10
    98e2:	89 81       	ldd	r24, Y+1	; 0x01
    98e4:	0e 94 12 6b 	call	0xd624	; 0xd624 <disk_write>
    98e8:	89 2b       	or	r24, r25
    98ea:	01 f5       	brne	.+64     	; 0x992c <dir_clear+0x10a>
    98ec:	2f ef       	ldi	r18, 0xFF	; 255
    98ee:	e2 1a       	sub	r14, r18
    98f0:	f2 0a       	sbc	r15, r18
    98f2:	89 85       	ldd	r24, Y+9	; 0x09
    98f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    98f6:	e8 16       	cp	r14, r24
    98f8:	f9 06       	cpc	r15, r25
    98fa:	50 f3       	brcs	.-44     	; 0x98d0 <dir_clear+0xae>
    98fc:	17 c0       	rjmp	.+46     	; 0x992c <dir_clear+0x10a>
    98fe:	85 01       	movw	r16, r10
    9900:	a3 01       	movw	r20, r6
    9902:	92 01       	movw	r18, r4
    9904:	2e 0d       	add	r18, r14
    9906:	3f 1d       	adc	r19, r15
    9908:	41 1d       	adc	r20, r1
    990a:	51 1d       	adc	r21, r1
    990c:	b6 01       	movw	r22, r12
    990e:	89 81       	ldd	r24, Y+1	; 0x01
    9910:	0e 94 12 6b 	call	0xd624	; 0xd624 <disk_write>
    9914:	89 2b       	or	r24, r25
    9916:	39 f4       	brne	.+14     	; 0x9926 <dir_clear+0x104>
    9918:	ea 0c       	add	r14, r10
    991a:	fb 1c       	adc	r15, r11
    991c:	89 85       	ldd	r24, Y+9	; 0x09
    991e:	9a 85       	ldd	r25, Y+10	; 0x0a
    9920:	e8 16       	cp	r14, r24
    9922:	f9 06       	cpc	r15, r25
    9924:	60 f3       	brcs	.-40     	; 0x98fe <dir_clear+0xdc>
    9926:	c6 01       	movw	r24, r12
    9928:	0e 94 49 6a 	call	0xd492	; 0xd492 <ff_memfree>
    992c:	81 e0       	ldi	r24, 0x01	; 1
    992e:	90 e0       	ldi	r25, 0x00	; 0
    9930:	29 85       	ldd	r18, Y+9	; 0x09
    9932:	3a 85       	ldd	r19, Y+10	; 0x0a
    9934:	2e 15       	cp	r18, r14
    9936:	3f 05       	cpc	r19, r15
    9938:	69 f4       	brne	.+26     	; 0x9954 <dir_clear+0x132>
    993a:	80 e0       	ldi	r24, 0x00	; 0
    993c:	0b c0       	rjmp	.+22     	; 0x9954 <dir_clear+0x132>
    993e:	a8 01       	movw	r20, r16
    9940:	60 e0       	ldi	r22, 0x00	; 0
    9942:	70 e0       	ldi	r23, 0x00	; 0
    9944:	56 db       	rcall	.-2388   	; 0x8ff2 <mem_set>
    9946:	58 01       	movw	r10, r16
    9948:	ab 2c       	mov	r10, r11
    994a:	bb 24       	eor	r11, r11
    994c:	a6 94       	lsr	r10
    994e:	e1 2c       	mov	r14, r1
    9950:	f1 2c       	mov	r15, r1
    9952:	e4 cf       	rjmp	.-56     	; 0x991c <dir_clear+0xfa>
    9954:	df 91       	pop	r29
    9956:	cf 91       	pop	r28
    9958:	1f 91       	pop	r17
    995a:	0f 91       	pop	r16
    995c:	ff 90       	pop	r15
    995e:	ef 90       	pop	r14
    9960:	df 90       	pop	r13
    9962:	cf 90       	pop	r12
    9964:	bf 90       	pop	r11
    9966:	af 90       	pop	r10
    9968:	7f 90       	pop	r7
    996a:	6f 90       	pop	r6
    996c:	5f 90       	pop	r5
    996e:	4f 90       	pop	r4
    9970:	08 95       	ret

00009972 <move_window>:
    9972:	a0 e0       	ldi	r26, 0x00	; 0
    9974:	b0 e0       	ldi	r27, 0x00	; 0
    9976:	ef eb       	ldi	r30, 0xBF	; 191
    9978:	fc e4       	ldi	r31, 0x4C	; 76
    997a:	0c 94 d2 e3 	jmp	0x1c7a4	; 0x1c7a4 <__prologue_saves__+0x14>
    997e:	ec 01       	movw	r28, r24
    9980:	6a 01       	movw	r12, r20
    9982:	7b 01       	movw	r14, r22
    9984:	89 a9       	ldd	r24, Y+49	; 0x31
    9986:	9a a9       	ldd	r25, Y+50	; 0x32
    9988:	ab a9       	ldd	r26, Y+51	; 0x33
    998a:	bc a9       	ldd	r27, Y+52	; 0x34
    998c:	84 17       	cp	r24, r20
    998e:	95 07       	cpc	r25, r21
    9990:	a6 07       	cpc	r26, r22
    9992:	b7 07       	cpc	r27, r23
    9994:	11 f1       	breq	.+68     	; 0x99da <move_window+0x68>
    9996:	8b 81       	ldd	r24, Y+3	; 0x03
    9998:	81 11       	cpse	r24, r1
    999a:	13 c0       	rjmp	.+38     	; 0x99c2 <move_window+0x50>
    999c:	01 e0       	ldi	r16, 0x01	; 1
    999e:	10 e0       	ldi	r17, 0x00	; 0
    99a0:	a7 01       	movw	r20, r14
    99a2:	96 01       	movw	r18, r12
    99a4:	be 01       	movw	r22, r28
    99a6:	6b 5c       	subi	r22, 0xCB	; 203
    99a8:	7f 4f       	sbci	r23, 0xFF	; 255
    99aa:	89 81       	ldd	r24, Y+1	; 0x01
    99ac:	0e 94 02 6b 	call	0xd604	; 0xd604 <disk_read>
    99b0:	89 2b       	or	r24, r25
    99b2:	61 f0       	breq	.+24     	; 0x99cc <move_window+0x5a>
    99b4:	81 e0       	ldi	r24, 0x01	; 1
    99b6:	90 e0       	ldi	r25, 0x00	; 0
    99b8:	cc 24       	eor	r12, r12
    99ba:	ca 94       	dec	r12
    99bc:	dc 2c       	mov	r13, r12
    99be:	76 01       	movw	r14, r12
    99c0:	07 c0       	rjmp	.+14     	; 0x99d0 <move_window+0x5e>
    99c2:	ce 01       	movw	r24, r28
    99c4:	69 de       	rcall	.-814    	; 0x9698 <sync_window.part.6>
    99c6:	00 97       	sbiw	r24, 0x00	; 0
    99c8:	51 f4       	brne	.+20     	; 0x99de <move_window+0x6c>
    99ca:	e8 cf       	rjmp	.-48     	; 0x999c <move_window+0x2a>
    99cc:	80 e0       	ldi	r24, 0x00	; 0
    99ce:	90 e0       	ldi	r25, 0x00	; 0
    99d0:	c9 aa       	std	Y+49, r12	; 0x31
    99d2:	da aa       	std	Y+50, r13	; 0x32
    99d4:	eb aa       	std	Y+51, r14	; 0x33
    99d6:	fc aa       	std	Y+52, r15	; 0x34
    99d8:	02 c0       	rjmp	.+4      	; 0x99de <move_window+0x6c>
    99da:	80 e0       	ldi	r24, 0x00	; 0
    99dc:	90 e0       	ldi	r25, 0x00	; 0
    99de:	cd b7       	in	r28, 0x3d	; 61
    99e0:	de b7       	in	r29, 0x3e	; 62
    99e2:	e8 e0       	ldi	r30, 0x08	; 8
    99e4:	0c 94 ee e3 	jmp	0x1c7dc	; 0x1c7dc <__epilogue_restores__+0x14>

000099e8 <check_fs>:
    99e8:	cf 93       	push	r28
    99ea:	df 93       	push	r29
    99ec:	ec 01       	movw	r28, r24
    99ee:	1b 82       	std	Y+3, r1	; 0x03
    99f0:	8f ef       	ldi	r24, 0xFF	; 255
    99f2:	9f ef       	ldi	r25, 0xFF	; 255
    99f4:	dc 01       	movw	r26, r24
    99f6:	89 ab       	std	Y+49, r24	; 0x31
    99f8:	9a ab       	std	Y+50, r25	; 0x32
    99fa:	ab ab       	std	Y+51, r26	; 0x33
    99fc:	bc ab       	std	Y+52, r27	; 0x34
    99fe:	ce 01       	movw	r24, r28
    9a00:	b8 df       	rcall	.-144    	; 0x9972 <move_window>
    9a02:	89 2b       	or	r24, r25
    9a04:	19 f5       	brne	.+70     	; 0x9a4c <check_fs+0x64>
    9a06:	fe 01       	movw	r30, r28
    9a08:	ed 5c       	subi	r30, 0xCD	; 205
    9a0a:	fd 4f       	sbci	r31, 0xFD	; 253
    9a0c:	80 81       	ld	r24, Z
    9a0e:	91 81       	ldd	r25, Z+1	; 0x01
    9a10:	85 35       	cpi	r24, 0x55	; 85
    9a12:	9a 4a       	sbci	r25, 0xAA	; 170
    9a14:	f1 f4       	brne	.+60     	; 0x9a52 <check_fs+0x6a>
    9a16:	8d a9       	ldd	r24, Y+53	; 0x35
    9a18:	8b 3e       	cpi	r24, 0xEB	; 235
    9a1a:	19 f0       	breq	.+6      	; 0x9a22 <check_fs+0x3a>
    9a1c:	88 5e       	subi	r24, 0xE8	; 232
    9a1e:	82 30       	cpi	r24, 0x02	; 2
    9a20:	f0 f4       	brcc	.+60     	; 0x9a5e <check_fs+0x76>
    9a22:	43 e0       	ldi	r20, 0x03	; 3
    9a24:	50 e0       	ldi	r21, 0x00	; 0
    9a26:	66 ee       	ldi	r22, 0xE6	; 230
    9a28:	77 e0       	ldi	r23, 0x07	; 7
    9a2a:	ce 01       	movw	r24, r28
    9a2c:	85 59       	subi	r24, 0x95	; 149
    9a2e:	9f 4f       	sbci	r25, 0xFF	; 255
    9a30:	e9 da       	rcall	.-2606   	; 0x9004 <mem_cmp>
    9a32:	89 2b       	or	r24, r25
    9a34:	89 f0       	breq	.+34     	; 0x9a58 <check_fs+0x70>
    9a36:	45 e0       	ldi	r20, 0x05	; 5
    9a38:	50 e0       	ldi	r21, 0x00	; 0
    9a3a:	61 e4       	ldi	r22, 0x41	; 65
    9a3c:	73 e0       	ldi	r23, 0x03	; 3
    9a3e:	ce 01       	movw	r24, r28
    9a40:	89 57       	subi	r24, 0x79	; 121
    9a42:	9f 4f       	sbci	r25, 0xFF	; 255
    9a44:	df da       	rcall	.-2626   	; 0x9004 <mem_cmp>
    9a46:	89 2b       	or	r24, r25
    9a48:	51 f4       	brne	.+20     	; 0x9a5e <check_fs+0x76>
    9a4a:	06 c0       	rjmp	.+12     	; 0x9a58 <check_fs+0x70>
    9a4c:	84 e0       	ldi	r24, 0x04	; 4
    9a4e:	90 e0       	ldi	r25, 0x00	; 0
    9a50:	08 c0       	rjmp	.+16     	; 0x9a62 <check_fs+0x7a>
    9a52:	83 e0       	ldi	r24, 0x03	; 3
    9a54:	90 e0       	ldi	r25, 0x00	; 0
    9a56:	05 c0       	rjmp	.+10     	; 0x9a62 <check_fs+0x7a>
    9a58:	80 e0       	ldi	r24, 0x00	; 0
    9a5a:	90 e0       	ldi	r25, 0x00	; 0
    9a5c:	02 c0       	rjmp	.+4      	; 0x9a62 <check_fs+0x7a>
    9a5e:	82 e0       	ldi	r24, 0x02	; 2
    9a60:	90 e0       	ldi	r25, 0x00	; 0
    9a62:	df 91       	pop	r29
    9a64:	cf 91       	pop	r28
    9a66:	08 95       	ret

00009a68 <mount_volume>:
    9a68:	a0 e2       	ldi	r26, 0x20	; 32
    9a6a:	b0 e0       	ldi	r27, 0x00	; 0
    9a6c:	ea e3       	ldi	r30, 0x3A	; 58
    9a6e:	fd e4       	ldi	r31, 0x4D	; 77
    9a70:	0c 94 ca e3 	jmp	0x1c794	; 0x1c794 <__prologue_saves__+0x4>
    9a74:	5b 01       	movw	r10, r22
    9a76:	f4 2e       	mov	r15, r20
    9a78:	db 01       	movw	r26, r22
    9a7a:	1d 92       	st	X+, r1
    9a7c:	1c 92       	st	X, r1
    9a7e:	ca db       	rcall	.-2156   	; 0x9214 <get_ldnumber>
    9a80:	6c 01       	movw	r12, r24
    9a82:	97 fd       	sbrc	r25, 7
    9a84:	39 c2       	rjmp	.+1138   	; 0x9ef8 <mount_volume+0x490>
    9a86:	fc 01       	movw	r30, r24
    9a88:	ee 0f       	add	r30, r30
    9a8a:	ff 1f       	adc	r31, r31
    9a8c:	e3 54       	subi	r30, 0x43	; 67
    9a8e:	f8 4e       	sbci	r31, 0xE8	; 232
    9a90:	00 81       	ld	r16, Z
    9a92:	11 81       	ldd	r17, Z+1	; 0x01
    9a94:	01 15       	cp	r16, r1
    9a96:	11 05       	cpc	r17, r1
    9a98:	09 f4       	brne	.+2      	; 0x9a9c <mount_volume+0x34>
    9a9a:	31 c2       	rjmp	.+1122   	; 0x9efe <mount_volume+0x496>
    9a9c:	f5 01       	movw	r30, r10
    9a9e:	11 83       	std	Z+1, r17	; 0x01
    9aa0:	00 83       	st	Z, r16
    9aa2:	ff 2d       	mov	r31, r15
    9aa4:	fe 7f       	andi	r31, 0xFE	; 254
    9aa6:	ff 2e       	mov	r15, r31
    9aa8:	d8 01       	movw	r26, r16
    9aaa:	8c 91       	ld	r24, X
    9aac:	88 23       	and	r24, r24
    9aae:	71 f0       	breq	.+28     	; 0x9acc <mount_volume+0x64>
    9ab0:	f8 01       	movw	r30, r16
    9ab2:	81 81       	ldd	r24, Z+1	; 0x01
    9ab4:	0e 94 f6 6a 	call	0xd5ec	; 0xd5ec <disk_status>
    9ab8:	80 fd       	sbrc	r24, 0
    9aba:	08 c0       	rjmp	.+16     	; 0x9acc <mount_volume+0x64>
    9abc:	ff 20       	and	r15, r15
    9abe:	09 f4       	brne	.+2      	; 0x9ac2 <mount_volume+0x5a>
    9ac0:	21 c2       	rjmp	.+1090   	; 0x9f04 <mount_volume+0x49c>
    9ac2:	82 ff       	sbrs	r24, 2
    9ac4:	1f c2       	rjmp	.+1086   	; 0x9f04 <mount_volume+0x49c>
    9ac6:	8a e0       	ldi	r24, 0x0A	; 10
    9ac8:	90 e0       	ldi	r25, 0x00	; 0
    9aca:	24 c2       	rjmp	.+1096   	; 0x9f14 <mount_volume+0x4ac>
    9acc:	d8 01       	movw	r26, r16
    9ace:	1c 92       	st	X, r1
    9ad0:	f8 01       	movw	r30, r16
    9ad2:	c1 82       	std	Z+1, r12	; 0x01
    9ad4:	8c 2d       	mov	r24, r12
    9ad6:	0e 94 fc 6a 	call	0xd5f8	; 0xd5f8 <disk_initialize>
    9ada:	80 fd       	sbrc	r24, 0
    9adc:	16 c2       	rjmp	.+1068   	; 0x9f0a <mount_volume+0x4a2>
    9ade:	ff 20       	and	r15, r15
    9ae0:	11 f0       	breq	.+4      	; 0x9ae6 <mount_volume+0x7e>
    9ae2:	82 fd       	sbrc	r24, 2
    9ae4:	f0 cf       	rjmp	.-32     	; 0x9ac6 <mount_volume+0x5e>
    9ae6:	40 e0       	ldi	r20, 0x00	; 0
    9ae8:	50 e0       	ldi	r21, 0x00	; 0
    9aea:	ba 01       	movw	r22, r20
    9aec:	c8 01       	movw	r24, r16
    9aee:	7c df       	rcall	.-264    	; 0x99e8 <check_fs>
    9af0:	82 30       	cpi	r24, 0x02	; 2
    9af2:	91 05       	cpc	r25, r1
    9af4:	b9 f5       	brne	.+110    	; 0x9b64 <mount_volume+0xfc>
    9af6:	68 01       	movw	r12, r16
    9af8:	f5 e0       	ldi	r31, 0x05	; 5
    9afa:	cf 1a       	sub	r12, r31
    9afc:	fe ef       	ldi	r31, 0xFE	; 254
    9afe:	df 0a       	sbc	r13, r31
    9b00:	9e 01       	movw	r18, r28
    9b02:	2f 5f       	subi	r18, 0xFF	; 255
    9b04:	3f 4f       	sbci	r19, 0xFF	; 255
    9b06:	79 01       	movw	r14, r18
    9b08:	48 01       	movw	r8, r16
    9b0a:	35 ec       	ldi	r19, 0xC5	; 197
    9b0c:	83 1a       	sub	r8, r19
    9b0e:	3d ef       	ldi	r19, 0xFD	; 253
    9b10:	93 0a       	sbc	r9, r19
    9b12:	57 01       	movw	r10, r14
    9b14:	c6 01       	movw	r24, r12
    9b16:	52 da       	rcall	.-2908   	; 0x8fbc <ld_dword>
    9b18:	d5 01       	movw	r26, r10
    9b1a:	6d 93       	st	X+, r22
    9b1c:	7d 93       	st	X+, r23
    9b1e:	8d 93       	st	X+, r24
    9b20:	9d 93       	st	X+, r25
    9b22:	5d 01       	movw	r10, r26
    9b24:	b0 e1       	ldi	r27, 0x10	; 16
    9b26:	cb 0e       	add	r12, r27
    9b28:	d1 1c       	adc	r13, r1
    9b2a:	c8 14       	cp	r12, r8
    9b2c:	d9 04       	cpc	r13, r9
    9b2e:	91 f7       	brne	.-28     	; 0x9b14 <mount_volume+0xac>
    9b30:	6e 01       	movw	r12, r28
    9b32:	e1 e1       	ldi	r30, 0x11	; 17
    9b34:	ce 0e       	add	r12, r30
    9b36:	d1 1c       	adc	r13, r1
    9b38:	d7 01       	movw	r26, r14
    9b3a:	4d 91       	ld	r20, X+
    9b3c:	5d 91       	ld	r21, X+
    9b3e:	6d 91       	ld	r22, X+
    9b40:	7d 91       	ld	r23, X+
    9b42:	7d 01       	movw	r14, r26
    9b44:	41 15       	cp	r20, r1
    9b46:	51 05       	cpc	r21, r1
    9b48:	61 05       	cpc	r22, r1
    9b4a:	71 05       	cpc	r23, r1
    9b4c:	31 f0       	breq	.+12     	; 0x9b5a <mount_volume+0xf2>
    9b4e:	c8 01       	movw	r24, r16
    9b50:	4b df       	rcall	.-362    	; 0x99e8 <check_fs>
    9b52:	82 30       	cpi	r24, 0x02	; 2
    9b54:	91 05       	cpc	r25, r1
    9b56:	18 f4       	brcc	.+6      	; 0x9b5e <mount_volume+0xf6>
    9b58:	05 c0       	rjmp	.+10     	; 0x9b64 <mount_volume+0xfc>
    9b5a:	83 e0       	ldi	r24, 0x03	; 3
    9b5c:	90 e0       	ldi	r25, 0x00	; 0
    9b5e:	ce 14       	cp	r12, r14
    9b60:	df 04       	cpc	r13, r15
    9b62:	51 f7       	brne	.-44     	; 0x9b38 <mount_volume+0xd0>
    9b64:	84 30       	cpi	r24, 0x04	; 4
    9b66:	91 05       	cpc	r25, r1
    9b68:	09 f4       	brne	.+2      	; 0x9b6c <mount_volume+0x104>
    9b6a:	d2 c1       	rjmp	.+932    	; 0x9f10 <mount_volume+0x4a8>
    9b6c:	02 97       	sbiw	r24, 0x02	; 2
    9b6e:	18 f0       	brcs	.+6      	; 0x9b76 <mount_volume+0x10e>
    9b70:	8d e0       	ldi	r24, 0x0D	; 13
    9b72:	90 e0       	ldi	r25, 0x00	; 0
    9b74:	cf c1       	rjmp	.+926    	; 0x9f14 <mount_volume+0x4ac>
    9b76:	f8 01       	movw	r30, r16
    9b78:	e0 5c       	subi	r30, 0xC0	; 192
    9b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    9b7c:	80 81       	ld	r24, Z
    9b7e:	91 81       	ldd	r25, Z+1	; 0x01
    9b80:	81 15       	cp	r24, r1
    9b82:	92 40       	sbci	r25, 0x02	; 2
    9b84:	a9 f7       	brne	.-22     	; 0x9b70 <mount_volume+0x108>
    9b86:	3b 96       	adiw	r30, 0x0b	; 11
    9b88:	40 80       	ld	r4, Z
    9b8a:	51 80       	ldd	r5, Z+1	; 0x01
    9b8c:	41 14       	cp	r4, r1
    9b8e:	51 04       	cpc	r5, r1
    9b90:	19 f0       	breq	.+6      	; 0x9b98 <mount_volume+0x130>
    9b92:	61 2c       	mov	r6, r1
    9b94:	71 2c       	mov	r7, r1
    9b96:	06 c0       	rjmp	.+12     	; 0x9ba4 <mount_volume+0x13c>
    9b98:	c8 01       	movw	r24, r16
    9b9a:	87 5a       	subi	r24, 0xA7	; 167
    9b9c:	9f 4f       	sbci	r25, 0xFF	; 255
    9b9e:	0e da       	rcall	.-3044   	; 0x8fbc <ld_dword>
    9ba0:	2b 01       	movw	r4, r22
    9ba2:	3c 01       	movw	r6, r24
    9ba4:	f8 01       	movw	r30, r16
    9ba6:	21 a9       	ldd	r18, Z+49	; 0x31
    9ba8:	32 a9       	ldd	r19, Z+50	; 0x32
    9baa:	43 a9       	ldd	r20, Z+51	; 0x33
    9bac:	54 a9       	ldd	r21, Z+52	; 0x34
    9bae:	29 8b       	std	Y+17, r18	; 0x11
    9bb0:	3a 8b       	std	Y+18, r19	; 0x12
    9bb2:	4b 8b       	std	Y+19, r20	; 0x13
    9bb4:	5c 8b       	std	Y+20, r21	; 0x14
    9bb6:	45 8e       	std	Z+29, r4	; 0x1d
    9bb8:	56 8e       	std	Z+30, r5	; 0x1e
    9bba:	67 8e       	std	Z+31, r6	; 0x1f
    9bbc:	70 a2       	std	Z+32, r7	; 0x20
    9bbe:	eb 5b       	subi	r30, 0xBB	; 187
    9bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    9bc2:	a0 80       	ld	r10, Z
    9bc4:	f8 01       	movw	r30, r16
    9bc6:	a2 82       	std	Z+2, r10	; 0x02
    9bc8:	8f ef       	ldi	r24, 0xFF	; 255
    9bca:	8a 0d       	add	r24, r10
    9bcc:	82 30       	cpi	r24, 0x02	; 2
    9bce:	80 f6       	brcc	.-96     	; 0x9b70 <mount_volume+0x108>
    9bd0:	ee 5b       	subi	r30, 0xBE	; 190
    9bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    9bd4:	b0 80       	ld	r11, Z
    9bd6:	8b 2d       	mov	r24, r11
    9bd8:	90 e0       	ldi	r25, 0x00	; 0
    9bda:	f8 01       	movw	r30, r16
    9bdc:	92 87       	std	Z+10, r25	; 0x0a
    9bde:	81 87       	std	Z+9, r24	; 0x09
    9be0:	00 97       	sbiw	r24, 0x00	; 0
    9be2:	31 f2       	breq	.-116    	; 0x9b70 <mount_volume+0x108>
    9be4:	9c 01       	movw	r18, r24
    9be6:	21 50       	subi	r18, 0x01	; 1
    9be8:	31 09       	sbc	r19, r1
    9bea:	82 23       	and	r24, r18
    9bec:	93 23       	and	r25, r19
    9bee:	89 2b       	or	r24, r25
    9bf0:	09 f0       	breq	.+2      	; 0x9bf4 <mount_volume+0x18c>
    9bf2:	be cf       	rjmp	.-132    	; 0x9b70 <mount_volume+0x108>
    9bf4:	ea 5b       	subi	r30, 0xBA	; 186
    9bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    9bf8:	80 80       	ld	r8, Z
    9bfa:	91 80       	ldd	r9, Z+1	; 0x01
    9bfc:	f8 01       	movw	r30, r16
    9bfe:	90 86       	std	Z+8, r9	; 0x08
    9c00:	87 82       	std	Z+7, r8	; 0x07
    9c02:	c4 01       	movw	r24, r8
    9c04:	8f 70       	andi	r24, 0x0F	; 15
    9c06:	99 27       	eor	r25, r25
    9c08:	89 2b       	or	r24, r25
    9c0a:	09 f0       	breq	.+2      	; 0x9c0e <mount_volume+0x1a6>
    9c0c:	b1 cf       	rjmp	.-158    	; 0x9b70 <mount_volume+0x108>
    9c0e:	e8 5b       	subi	r30, 0xB8	; 184
    9c10:	ff 4f       	sbci	r31, 0xFF	; 255
    9c12:	80 81       	ld	r24, Z
    9c14:	91 81       	ldd	r25, Z+1	; 0x01
    9c16:	6c 01       	movw	r12, r24
    9c18:	e1 2c       	mov	r14, r1
    9c1a:	f1 2c       	mov	r15, r1
    9c1c:	89 2b       	or	r24, r25
    9c1e:	31 f4       	brne	.+12     	; 0x9c2c <mount_volume+0x1c4>
    9c20:	c8 01       	movw	r24, r16
    9c22:	8b 5a       	subi	r24, 0xAB	; 171
    9c24:	9f 4f       	sbci	r25, 0xFF	; 255
    9c26:	ca d9       	rcall	.-3180   	; 0x8fbc <ld_dword>
    9c28:	6b 01       	movw	r12, r22
    9c2a:	7c 01       	movw	r14, r24
    9c2c:	f8 01       	movw	r30, r16
    9c2e:	ed 5b       	subi	r30, 0xBD	; 189
    9c30:	ff 4f       	sbci	r31, 0xFF	; 255
    9c32:	01 90       	ld	r0, Z+
    9c34:	f0 81       	ld	r31, Z
    9c36:	e0 2d       	mov	r30, r0
    9c38:	30 97       	sbiw	r30, 0x00	; 0
    9c3a:	09 f4       	brne	.+2      	; 0x9c3e <mount_volume+0x1d6>
    9c3c:	99 cf       	rjmp	.-206    	; 0x9b70 <mount_volume+0x108>
    9c3e:	aa 2d       	mov	r26, r10
    9c40:	b0 e0       	ldi	r27, 0x00	; 0
    9c42:	a3 01       	movw	r20, r6
    9c44:	92 01       	movw	r18, r4
    9c46:	0e 94 a8 e3 	call	0x1c750	; 0x1c750 <__muluhisi3>
    9c4a:	69 8f       	std	Y+25, r22	; 0x19
    9c4c:	7a 8f       	std	Y+26, r23	; 0x1a
    9c4e:	8b 8f       	std	Y+27, r24	; 0x1b
    9c50:	9c 8f       	std	Y+28, r25	; 0x1c
    9c52:	9f 01       	movw	r18, r30
    9c54:	40 e0       	ldi	r20, 0x00	; 0
    9c56:	50 e0       	ldi	r21, 0x00	; 0
    9c58:	2d 8f       	std	Y+29, r18	; 0x1d
    9c5a:	3e 8f       	std	Y+30, r19	; 0x1e
    9c5c:	4f 8f       	std	Y+31, r20	; 0x1f
    9c5e:	58 a3       	std	Y+32, r21	; 0x20
    9c60:	c4 01       	movw	r24, r8
    9c62:	f4 e0       	ldi	r31, 0x04	; 4
    9c64:	96 95       	lsr	r25
    9c66:	87 95       	ror	r24
    9c68:	fa 95       	dec	r31
    9c6a:	e1 f7       	brne	.-8      	; 0x9c64 <mount_volume+0x1fc>
    9c6c:	28 0f       	add	r18, r24
    9c6e:	39 1f       	adc	r19, r25
    9c70:	41 1d       	adc	r20, r1
    9c72:	51 1d       	adc	r21, r1
    9c74:	da 01       	movw	r26, r20
    9c76:	c9 01       	movw	r24, r18
    9c78:	29 8d       	ldd	r18, Y+25	; 0x19
    9c7a:	3a 8d       	ldd	r19, Y+26	; 0x1a
    9c7c:	4b 8d       	ldd	r20, Y+27	; 0x1b
    9c7e:	5c 8d       	ldd	r21, Y+28	; 0x1c
    9c80:	28 0f       	add	r18, r24
    9c82:	39 1f       	adc	r19, r25
    9c84:	4a 1f       	adc	r20, r26
    9c86:	5b 1f       	adc	r21, r27
    9c88:	2d 8b       	std	Y+21, r18	; 0x15
    9c8a:	3e 8b       	std	Y+22, r19	; 0x16
    9c8c:	4f 8b       	std	Y+23, r20	; 0x17
    9c8e:	58 8f       	std	Y+24, r21	; 0x18
    9c90:	c2 16       	cp	r12, r18
    9c92:	d3 06       	cpc	r13, r19
    9c94:	e4 06       	cpc	r14, r20
    9c96:	f5 06       	cpc	r15, r21
    9c98:	08 f4       	brcc	.+2      	; 0x9c9c <mount_volume+0x234>
    9c9a:	6a cf       	rjmp	.-300    	; 0x9b70 <mount_volume+0x108>
    9c9c:	c7 01       	movw	r24, r14
    9c9e:	b6 01       	movw	r22, r12
    9ca0:	62 1b       	sub	r22, r18
    9ca2:	73 0b       	sbc	r23, r19
    9ca4:	84 0b       	sbc	r24, r20
    9ca6:	95 0b       	sbc	r25, r21
    9ca8:	2b 2d       	mov	r18, r11
    9caa:	30 e0       	ldi	r19, 0x00	; 0
    9cac:	40 e0       	ldi	r20, 0x00	; 0
    9cae:	50 e0       	ldi	r21, 0x00	; 0
    9cb0:	0e 94 46 e3 	call	0x1c68c	; 0x1c68c <__udivmodsi4>
    9cb4:	da 01       	movw	r26, r20
    9cb6:	c9 01       	movw	r24, r18
    9cb8:	01 97       	sbiw	r24, 0x01	; 1
    9cba:	a1 09       	sbc	r26, r1
    9cbc:	b1 09       	sbc	r27, r1
    9cbe:	85 3f       	cpi	r24, 0xF5	; 245
    9cc0:	9f 4f       	sbci	r25, 0xFF	; 255
    9cc2:	af 4f       	sbci	r26, 0xFF	; 255
    9cc4:	bf 40       	sbci	r27, 0x0F	; 15
    9cc6:	08 f0       	brcs	.+2      	; 0x9cca <mount_volume+0x262>
    9cc8:	53 cf       	rjmp	.-346    	; 0x9b70 <mount_volume+0x108>
    9cca:	26 3f       	cpi	r18, 0xF6	; 246
    9ccc:	8f ef       	ldi	r24, 0xFF	; 255
    9cce:	38 07       	cpc	r19, r24
    9cd0:	41 05       	cpc	r20, r1
    9cd2:	51 05       	cpc	r21, r1
    9cd4:	50 f4       	brcc	.+20     	; 0x9cea <mount_volume+0x282>
    9cd6:	26 3f       	cpi	r18, 0xF6	; 246
    9cd8:	9f e0       	ldi	r25, 0x0F	; 15
    9cda:	39 07       	cpc	r19, r25
    9cdc:	41 05       	cpc	r20, r1
    9cde:	51 05       	cpc	r21, r1
    9ce0:	40 f4       	brcc	.+16     	; 0x9cf2 <mount_volume+0x28a>
    9ce2:	aa 24       	eor	r10, r10
    9ce4:	a3 94       	inc	r10
    9ce6:	b1 2c       	mov	r11, r1
    9ce8:	07 c0       	rjmp	.+14     	; 0x9cf8 <mount_volume+0x290>
    9cea:	73 e0       	ldi	r23, 0x03	; 3
    9cec:	a7 2e       	mov	r10, r23
    9cee:	b1 2c       	mov	r11, r1
    9cf0:	03 c0       	rjmp	.+6      	; 0x9cf8 <mount_volume+0x290>
    9cf2:	62 e0       	ldi	r22, 0x02	; 2
    9cf4:	a6 2e       	mov	r10, r22
    9cf6:	b1 2c       	mov	r11, r1
    9cf8:	69 01       	movw	r12, r18
    9cfa:	7a 01       	movw	r14, r20
    9cfc:	a2 e0       	ldi	r26, 0x02	; 2
    9cfe:	ca 0e       	add	r12, r26
    9d00:	d1 1c       	adc	r13, r1
    9d02:	e1 1c       	adc	r14, r1
    9d04:	f1 1c       	adc	r15, r1
    9d06:	f8 01       	movw	r30, r16
    9d08:	c1 8e       	std	Z+25, r12	; 0x19
    9d0a:	d2 8e       	std	Z+26, r13	; 0x1a
    9d0c:	e3 8e       	std	Z+27, r14	; 0x1b
    9d0e:	f4 8e       	std	Z+28, r15	; 0x1c
    9d10:	29 89       	ldd	r18, Y+17	; 0x11
    9d12:	3a 89       	ldd	r19, Y+18	; 0x12
    9d14:	4b 89       	ldd	r20, Y+19	; 0x13
    9d16:	5c 89       	ldd	r21, Y+20	; 0x14
    9d18:	21 a3       	std	Z+33, r18	; 0x21
    9d1a:	32 a3       	std	Z+34, r19	; 0x22
    9d1c:	43 a3       	std	Z+35, r20	; 0x23
    9d1e:	54 a3       	std	Z+36, r21	; 0x24
    9d20:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9d22:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9d24:	af 8d       	ldd	r26, Y+31	; 0x1f
    9d26:	b8 a1       	ldd	r27, Y+32	; 0x20
    9d28:	28 0f       	add	r18, r24
    9d2a:	39 1f       	adc	r19, r25
    9d2c:	4a 1f       	adc	r20, r26
    9d2e:	5b 1f       	adc	r21, r27
    9d30:	2d 8f       	std	Y+29, r18	; 0x1d
    9d32:	3e 8f       	std	Y+30, r19	; 0x1e
    9d34:	4f 8f       	std	Y+31, r20	; 0x1f
    9d36:	58 a3       	std	Y+32, r21	; 0x20
    9d38:	25 a3       	std	Z+37, r18	; 0x25
    9d3a:	36 a3       	std	Z+38, r19	; 0x26
    9d3c:	47 a3       	std	Z+39, r20	; 0x27
    9d3e:	50 a7       	std	Z+40, r21	; 0x28
    9d40:	49 89       	ldd	r20, Y+17	; 0x11
    9d42:	5a 89       	ldd	r21, Y+18	; 0x12
    9d44:	6b 89       	ldd	r22, Y+19	; 0x13
    9d46:	7c 89       	ldd	r23, Y+20	; 0x14
    9d48:	8d 89       	ldd	r24, Y+21	; 0x15
    9d4a:	9e 89       	ldd	r25, Y+22	; 0x16
    9d4c:	af 89       	ldd	r26, Y+23	; 0x17
    9d4e:	b8 8d       	ldd	r27, Y+24	; 0x18
    9d50:	48 0f       	add	r20, r24
    9d52:	59 1f       	adc	r21, r25
    9d54:	6a 1f       	adc	r22, r26
    9d56:	7b 1f       	adc	r23, r27
    9d58:	45 a7       	std	Z+45, r20	; 0x2d
    9d5a:	56 a7       	std	Z+46, r21	; 0x2e
    9d5c:	67 a7       	std	Z+47, r22	; 0x2f
    9d5e:	70 ab       	std	Z+48, r23	; 0x30
    9d60:	f3 e0       	ldi	r31, 0x03	; 3
    9d62:	af 16       	cp	r10, r31
    9d64:	b1 04       	cpc	r11, r1
    9d66:	e9 f4       	brne	.+58     	; 0x9da2 <mount_volume+0x33a>
    9d68:	f8 01       	movw	r30, r16
    9d6a:	e1 5a       	subi	r30, 0xA1	; 161
    9d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    9d6e:	80 81       	ld	r24, Z
    9d70:	91 81       	ldd	r25, Z+1	; 0x01
    9d72:	89 2b       	or	r24, r25
    9d74:	09 f0       	breq	.+2      	; 0x9d78 <mount_volume+0x310>
    9d76:	fc ce       	rjmp	.-520    	; 0x9b70 <mount_volume+0x108>
    9d78:	81 14       	cp	r8, r1
    9d7a:	91 04       	cpc	r9, r1
    9d7c:	09 f0       	breq	.+2      	; 0x9d80 <mount_volume+0x318>
    9d7e:	f8 ce       	rjmp	.-528    	; 0x9b70 <mount_volume+0x108>
    9d80:	c8 01       	movw	r24, r16
    9d82:	8f 59       	subi	r24, 0x9F	; 159
    9d84:	9f 4f       	sbci	r25, 0xFF	; 255
    9d86:	1a d9       	rcall	.-3532   	; 0x8fbc <ld_dword>
    9d88:	f8 01       	movw	r30, r16
    9d8a:	61 a7       	std	Z+41, r22	; 0x29
    9d8c:	72 a7       	std	Z+42, r23	; 0x2a
    9d8e:	83 a7       	std	Z+43, r24	; 0x2b
    9d90:	94 a7       	std	Z+44, r25	; 0x2c
    9d92:	42 e0       	ldi	r20, 0x02	; 2
    9d94:	cc 0c       	add	r12, r12
    9d96:	dd 1c       	adc	r13, r13
    9d98:	ee 1c       	adc	r14, r14
    9d9a:	ff 1c       	adc	r15, r15
    9d9c:	4a 95       	dec	r20
    9d9e:	d1 f7       	brne	.-12     	; 0x9d94 <mount_volume+0x32c>
    9da0:	33 c0       	rjmp	.+102    	; 0x9e08 <mount_volume+0x3a0>
    9da2:	81 14       	cp	r8, r1
    9da4:	91 04       	cpc	r9, r1
    9da6:	09 f4       	brne	.+2      	; 0x9daa <mount_volume+0x342>
    9da8:	e3 ce       	rjmp	.-570    	; 0x9b70 <mount_volume+0x108>
    9daa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9dac:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9dae:	af 8d       	ldd	r26, Y+31	; 0x1f
    9db0:	b8 a1       	ldd	r27, Y+32	; 0x20
    9db2:	29 8d       	ldd	r18, Y+25	; 0x19
    9db4:	3a 8d       	ldd	r19, Y+26	; 0x1a
    9db6:	4b 8d       	ldd	r20, Y+27	; 0x1b
    9db8:	5c 8d       	ldd	r21, Y+28	; 0x1c
    9dba:	82 0f       	add	r24, r18
    9dbc:	93 1f       	adc	r25, r19
    9dbe:	a4 1f       	adc	r26, r20
    9dc0:	b5 1f       	adc	r27, r21
    9dc2:	f8 01       	movw	r30, r16
    9dc4:	81 a7       	std	Z+41, r24	; 0x29
    9dc6:	92 a7       	std	Z+42, r25	; 0x2a
    9dc8:	a3 a7       	std	Z+43, r26	; 0x2b
    9dca:	b4 a7       	std	Z+44, r27	; 0x2c
    9dcc:	f2 e0       	ldi	r31, 0x02	; 2
    9dce:	af 16       	cp	r10, r31
    9dd0:	b1 04       	cpc	r11, r1
    9dd2:	29 f4       	brne	.+10     	; 0x9dde <mount_volume+0x376>
    9dd4:	cc 0c       	add	r12, r12
    9dd6:	dd 1c       	adc	r13, r13
    9dd8:	ee 1c       	adc	r14, r14
    9dda:	ff 1c       	adc	r15, r15
    9ddc:	15 c0       	rjmp	.+42     	; 0x9e08 <mount_volume+0x3a0>
    9dde:	a3 e0       	ldi	r26, 0x03	; 3
    9de0:	b0 e0       	ldi	r27, 0x00	; 0
    9de2:	a7 01       	movw	r20, r14
    9de4:	96 01       	movw	r18, r12
    9de6:	0e 94 a8 e3 	call	0x1c750	; 0x1c750 <__muluhisi3>
    9dea:	dc 01       	movw	r26, r24
    9dec:	cb 01       	movw	r24, r22
    9dee:	b6 95       	lsr	r27
    9df0:	a7 95       	ror	r26
    9df2:	97 95       	ror	r25
    9df4:	87 95       	ror	r24
    9df6:	21 e0       	ldi	r18, 0x01	; 1
    9df8:	c2 22       	and	r12, r18
    9dfa:	dd 24       	eor	r13, r13
    9dfc:	ee 24       	eor	r14, r14
    9dfe:	ff 24       	eor	r15, r15
    9e00:	c8 0e       	add	r12, r24
    9e02:	d9 1e       	adc	r13, r25
    9e04:	ea 1e       	adc	r14, r26
    9e06:	fb 1e       	adc	r15, r27
    9e08:	3f ef       	ldi	r19, 0xFF	; 255
    9e0a:	c3 0e       	add	r12, r19
    9e0c:	31 e0       	ldi	r19, 0x01	; 1
    9e0e:	d3 1e       	adc	r13, r19
    9e10:	e1 1c       	adc	r14, r1
    9e12:	f1 1c       	adc	r15, r1
    9e14:	89 e0       	ldi	r24, 0x09	; 9
    9e16:	f6 94       	lsr	r15
    9e18:	e7 94       	ror	r14
    9e1a:	d7 94       	ror	r13
    9e1c:	c7 94       	ror	r12
    9e1e:	8a 95       	dec	r24
    9e20:	d1 f7       	brne	.-12     	; 0x9e16 <mount_volume+0x3ae>
    9e22:	4c 14       	cp	r4, r12
    9e24:	5d 04       	cpc	r5, r13
    9e26:	6e 04       	cpc	r6, r14
    9e28:	7f 04       	cpc	r7, r15
    9e2a:	08 f4       	brcc	.+2      	; 0x9e2e <mount_volume+0x3c6>
    9e2c:	a1 ce       	rjmp	.-702    	; 0x9b70 <mount_volume+0x108>
    9e2e:	8f ef       	ldi	r24, 0xFF	; 255
    9e30:	9f ef       	ldi	r25, 0xFF	; 255
    9e32:	dc 01       	movw	r26, r24
    9e34:	f8 01       	movw	r30, r16
    9e36:	81 8b       	std	Z+17, r24	; 0x11
    9e38:	92 8b       	std	Z+18, r25	; 0x12
    9e3a:	a3 8b       	std	Z+19, r26	; 0x13
    9e3c:	b4 8b       	std	Z+20, r27	; 0x14
    9e3e:	85 87       	std	Z+13, r24	; 0x0d
    9e40:	96 87       	std	Z+14, r25	; 0x0e
    9e42:	a7 87       	std	Z+15, r26	; 0x0f
    9e44:	b0 8b       	std	Z+16, r27	; 0x10
    9e46:	80 e8       	ldi	r24, 0x80	; 128
    9e48:	84 83       	std	Z+4, r24	; 0x04
    9e4a:	f3 e0       	ldi	r31, 0x03	; 3
    9e4c:	af 16       	cp	r10, r31
    9e4e:	b1 04       	cpc	r11, r1
    9e50:	09 f0       	breq	.+2      	; 0x9e54 <mount_volume+0x3ec>
    9e52:	3f c0       	rjmp	.+126    	; 0x9ed2 <mount_volume+0x46a>
    9e54:	f8 01       	movw	r30, r16
    9e56:	eb 59       	subi	r30, 0x9B	; 155
    9e58:	ff 4f       	sbci	r31, 0xFF	; 255
    9e5a:	80 81       	ld	r24, Z
    9e5c:	91 81       	ldd	r25, Z+1	; 0x01
    9e5e:	01 97       	sbiw	r24, 0x01	; 1
    9e60:	c1 f5       	brne	.+112    	; 0x9ed2 <mount_volume+0x46a>
    9e62:	49 89       	ldd	r20, Y+17	; 0x11
    9e64:	5a 89       	ldd	r21, Y+18	; 0x12
    9e66:	6b 89       	ldd	r22, Y+19	; 0x13
    9e68:	7c 89       	ldd	r23, Y+20	; 0x14
    9e6a:	4f 5f       	subi	r20, 0xFF	; 255
    9e6c:	5f 4f       	sbci	r21, 0xFF	; 255
    9e6e:	6f 4f       	sbci	r22, 0xFF	; 255
    9e70:	7f 4f       	sbci	r23, 0xFF	; 255
    9e72:	c8 01       	movw	r24, r16
    9e74:	7e dd       	rcall	.-1284   	; 0x9972 <move_window>
    9e76:	89 2b       	or	r24, r25
    9e78:	61 f5       	brne	.+88     	; 0x9ed2 <mount_volume+0x46a>
    9e7a:	f8 01       	movw	r30, r16
    9e7c:	14 82       	std	Z+4, r1	; 0x04
    9e7e:	ed 5c       	subi	r30, 0xCD	; 205
    9e80:	fd 4f       	sbci	r31, 0xFD	; 253
    9e82:	80 81       	ld	r24, Z
    9e84:	91 81       	ldd	r25, Z+1	; 0x01
    9e86:	85 35       	cpi	r24, 0x55	; 85
    9e88:	9a 4a       	sbci	r25, 0xAA	; 170
    9e8a:	19 f5       	brne	.+70     	; 0x9ed2 <mount_volume+0x46a>
    9e8c:	c8 01       	movw	r24, r16
    9e8e:	c5 96       	adiw	r24, 0x35	; 53
    9e90:	95 d8       	rcall	.-3798   	; 0x8fbc <ld_dword>
    9e92:	62 35       	cpi	r22, 0x52	; 82
    9e94:	72 45       	sbci	r23, 0x52	; 82
    9e96:	81 46       	sbci	r24, 0x61	; 97
    9e98:	91 44       	sbci	r25, 0x41	; 65
    9e9a:	d9 f4       	brne	.+54     	; 0x9ed2 <mount_volume+0x46a>
    9e9c:	c8 01       	movw	r24, r16
    9e9e:	87 5e       	subi	r24, 0xE7	; 231
    9ea0:	9d 4f       	sbci	r25, 0xFD	; 253
    9ea2:	8c d8       	rcall	.-3816   	; 0x8fbc <ld_dword>
    9ea4:	62 37       	cpi	r22, 0x72	; 114
    9ea6:	72 47       	sbci	r23, 0x72	; 114
    9ea8:	81 44       	sbci	r24, 0x41	; 65
    9eaa:	91 46       	sbci	r25, 0x61	; 97
    9eac:	91 f4       	brne	.+36     	; 0x9ed2 <mount_volume+0x46a>
    9eae:	c8 01       	movw	r24, r16
    9eb0:	83 5e       	subi	r24, 0xE3	; 227
    9eb2:	9d 4f       	sbci	r25, 0xFD	; 253
    9eb4:	83 d8       	rcall	.-3834   	; 0x8fbc <ld_dword>
    9eb6:	f8 01       	movw	r30, r16
    9eb8:	61 8b       	std	Z+17, r22	; 0x11
    9eba:	72 8b       	std	Z+18, r23	; 0x12
    9ebc:	83 8b       	std	Z+19, r24	; 0x13
    9ebe:	94 8b       	std	Z+20, r25	; 0x14
    9ec0:	c8 01       	movw	r24, r16
    9ec2:	8f 5d       	subi	r24, 0xDF	; 223
    9ec4:	9d 4f       	sbci	r25, 0xFD	; 253
    9ec6:	7a d8       	rcall	.-3852   	; 0x8fbc <ld_dword>
    9ec8:	f8 01       	movw	r30, r16
    9eca:	65 87       	std	Z+13, r22	; 0x0d
    9ecc:	76 87       	std	Z+14, r23	; 0x0e
    9ece:	87 87       	std	Z+15, r24	; 0x0f
    9ed0:	90 8b       	std	Z+16, r25	; 0x10
    9ed2:	d8 01       	movw	r26, r16
    9ed4:	ac 92       	st	X, r10
    9ed6:	80 91 bb 17 	lds	r24, 0x17BB	; 0x8017bb <Fsid>
    9eda:	90 91 bc 17 	lds	r25, 0x17BC	; 0x8017bc <Fsid+0x1>
    9ede:	01 96       	adiw	r24, 0x01	; 1
    9ee0:	90 93 bc 17 	sts	0x17BC, r25	; 0x8017bc <Fsid+0x1>
    9ee4:	80 93 bb 17 	sts	0x17BB, r24	; 0x8017bb <Fsid>
    9ee8:	f8 01       	movw	r30, r16
    9eea:	96 83       	std	Z+6, r25	; 0x06
    9eec:	85 83       	std	Z+5, r24	; 0x05
    9eee:	15 8a       	std	Z+21, r1	; 0x15
    9ef0:	16 8a       	std	Z+22, r1	; 0x16
    9ef2:	17 8a       	std	Z+23, r1	; 0x17
    9ef4:	10 8e       	std	Z+24, r1	; 0x18
    9ef6:	06 c0       	rjmp	.+12     	; 0x9f04 <mount_volume+0x49c>
    9ef8:	8b e0       	ldi	r24, 0x0B	; 11
    9efa:	90 e0       	ldi	r25, 0x00	; 0
    9efc:	0b c0       	rjmp	.+22     	; 0x9f14 <mount_volume+0x4ac>
    9efe:	8c e0       	ldi	r24, 0x0C	; 12
    9f00:	90 e0       	ldi	r25, 0x00	; 0
    9f02:	08 c0       	rjmp	.+16     	; 0x9f14 <mount_volume+0x4ac>
    9f04:	80 e0       	ldi	r24, 0x00	; 0
    9f06:	90 e0       	ldi	r25, 0x00	; 0
    9f08:	05 c0       	rjmp	.+10     	; 0x9f14 <mount_volume+0x4ac>
    9f0a:	83 e0       	ldi	r24, 0x03	; 3
    9f0c:	90 e0       	ldi	r25, 0x00	; 0
    9f0e:	02 c0       	rjmp	.+4      	; 0x9f14 <mount_volume+0x4ac>
    9f10:	81 e0       	ldi	r24, 0x01	; 1
    9f12:	90 e0       	ldi	r25, 0x00	; 0
    9f14:	a0 96       	adiw	r28, 0x20	; 32
    9f16:	e0 e1       	ldi	r30, 0x10	; 16
    9f18:	0c 94 e6 e3 	jmp	0x1c7cc	; 0x1c7cc <__epilogue_restores__+0x4>

00009f1c <put_fat>:
    9f1c:	a6 e0       	ldi	r26, 0x06	; 6
    9f1e:	b0 e0       	ldi	r27, 0x00	; 0
    9f20:	e4 e9       	ldi	r30, 0x94	; 148
    9f22:	ff e4       	ldi	r31, 0x4F	; 79
    9f24:	0c 94 c8 e3 	jmp	0x1c790	; 0x1c790 <__prologue_saves__>
    9f28:	42 30       	cpi	r20, 0x02	; 2
    9f2a:	51 05       	cpc	r21, r1
    9f2c:	61 05       	cpc	r22, r1
    9f2e:	71 05       	cpc	r23, r1
    9f30:	08 f4       	brcc	.+2      	; 0x9f34 <put_fat+0x18>
    9f32:	e7 c0       	rjmp	.+462    	; 0xa102 <put_fat+0x1e6>
    9f34:	fc 01       	movw	r30, r24
    9f36:	c1 8c       	ldd	r12, Z+25	; 0x19
    9f38:	d2 8c       	ldd	r13, Z+26	; 0x1a
    9f3a:	e3 8c       	ldd	r14, Z+27	; 0x1b
    9f3c:	f4 8c       	ldd	r15, Z+28	; 0x1c
    9f3e:	4c 15       	cp	r20, r12
    9f40:	5d 05       	cpc	r21, r13
    9f42:	6e 05       	cpc	r22, r14
    9f44:	7f 05       	cpc	r23, r15
    9f46:	08 f0       	brcs	.+2      	; 0x9f4a <put_fat+0x2e>
    9f48:	dc c0       	rjmp	.+440    	; 0xa102 <put_fat+0x1e6>
    9f4a:	28 01       	movw	r4, r16
    9f4c:	39 01       	movw	r6, r18
    9f4e:	6a 01       	movw	r12, r20
    9f50:	7b 01       	movw	r14, r22
    9f52:	9e 83       	std	Y+6, r25	; 0x06
    9f54:	8d 83       	std	Y+5, r24	; 0x05
    9f56:	80 81       	ld	r24, Z
    9f58:	82 30       	cpi	r24, 0x02	; 2
    9f5a:	09 f4       	brne	.+2      	; 0x9f5e <put_fat+0x42>
    9f5c:	73 c0       	rjmp	.+230    	; 0xa044 <put_fat+0x128>
    9f5e:	83 30       	cpi	r24, 0x03	; 3
    9f60:	09 f4       	brne	.+2      	; 0x9f64 <put_fat+0x48>
    9f62:	92 c0       	rjmp	.+292    	; 0xa088 <put_fat+0x16c>
    9f64:	81 30       	cpi	r24, 0x01	; 1
    9f66:	09 f0       	breq	.+2      	; 0x9f6a <put_fat+0x4e>
    9f68:	cc c0       	rjmp	.+408    	; 0xa102 <put_fat+0x1e6>
    9f6a:	4a 01       	movw	r8, r20
    9f6c:	96 94       	lsr	r9
    9f6e:	87 94       	ror	r8
    9f70:	84 0e       	add	r8, r20
    9f72:	95 1e       	adc	r9, r21
    9f74:	c4 01       	movw	r24, r8
    9f76:	89 2f       	mov	r24, r25
    9f78:	99 27       	eor	r25, r25
    9f7a:	86 95       	lsr	r24
    9f7c:	45 a1       	ldd	r20, Z+37	; 0x25
    9f7e:	56 a1       	ldd	r21, Z+38	; 0x26
    9f80:	67 a1       	ldd	r22, Z+39	; 0x27
    9f82:	70 a5       	ldd	r23, Z+40	; 0x28
    9f84:	48 0f       	add	r20, r24
    9f86:	59 1f       	adc	r21, r25
    9f88:	61 1d       	adc	r22, r1
    9f8a:	71 1d       	adc	r23, r1
    9f8c:	cf 01       	movw	r24, r30
    9f8e:	f1 dc       	rcall	.-1566   	; 0x9972 <move_window>
    9f90:	5c 01       	movw	r10, r24
    9f92:	89 2b       	or	r24, r25
    9f94:	09 f0       	breq	.+2      	; 0x9f98 <put_fat+0x7c>
    9f96:	b8 c0       	rjmp	.+368    	; 0xa108 <put_fat+0x1ec>
    9f98:	2d 80       	ldd	r2, Y+5	; 0x05
    9f9a:	3e 80       	ldd	r3, Y+6	; 0x06
    9f9c:	f5 e3       	ldi	r31, 0x35	; 53
    9f9e:	2f 0e       	add	r2, r31
    9fa0:	31 1c       	adc	r3, r1
    9fa2:	84 01       	movw	r16, r8
    9fa4:	0f 5f       	subi	r16, 0xFF	; 255
    9fa6:	1f 4f       	sbci	r17, 0xFF	; 255
    9fa8:	21 e0       	ldi	r18, 0x01	; 1
    9faa:	92 22       	and	r9, r18
    9fac:	f1 01       	movw	r30, r2
    9fae:	e8 0d       	add	r30, r8
    9fb0:	f9 1d       	adc	r31, r9
    9fb2:	d7 01       	movw	r26, r14
    9fb4:	c6 01       	movw	r24, r12
    9fb6:	81 70       	andi	r24, 0x01	; 1
    9fb8:	99 27       	eor	r25, r25
    9fba:	aa 27       	eor	r26, r26
    9fbc:	bb 27       	eor	r27, r27
    9fbe:	89 83       	std	Y+1, r24	; 0x01
    9fc0:	9a 83       	std	Y+2, r25	; 0x02
    9fc2:	ab 83       	std	Y+3, r26	; 0x03
    9fc4:	bc 83       	std	Y+4, r27	; 0x04
    9fc6:	c0 fe       	sbrs	r12, 0
    9fc8:	09 c0       	rjmp	.+18     	; 0x9fdc <put_fat+0xc0>
    9fca:	80 81       	ld	r24, Z
    9fcc:	28 2f       	mov	r18, r24
    9fce:	2f 70       	andi	r18, 0x0F	; 15
    9fd0:	a0 e1       	ldi	r26, 0x10	; 16
    9fd2:	4a 9e       	mul	r4, r26
    9fd4:	c0 01       	movw	r24, r0
    9fd6:	11 24       	eor	r1, r1
    9fd8:	82 2b       	or	r24, r18
    9fda:	01 c0       	rjmp	.+2      	; 0x9fde <put_fat+0xc2>
    9fdc:	84 2d       	mov	r24, r4
    9fde:	80 83       	st	Z, r24
    9fe0:	81 e0       	ldi	r24, 0x01	; 1
    9fe2:	ed 81       	ldd	r30, Y+5	; 0x05
    9fe4:	fe 81       	ldd	r31, Y+6	; 0x06
    9fe6:	83 83       	std	Z+3, r24	; 0x03
    9fe8:	45 a1       	ldd	r20, Z+37	; 0x25
    9fea:	56 a1       	ldd	r21, Z+38	; 0x26
    9fec:	67 a1       	ldd	r22, Z+39	; 0x27
    9fee:	70 a5       	ldd	r23, Z+40	; 0x28
    9ff0:	c8 01       	movw	r24, r16
    9ff2:	89 2f       	mov	r24, r25
    9ff4:	99 27       	eor	r25, r25
    9ff6:	86 95       	lsr	r24
    9ff8:	48 0f       	add	r20, r24
    9ffa:	59 1f       	adc	r21, r25
    9ffc:	61 1d       	adc	r22, r1
    9ffe:	71 1d       	adc	r23, r1
    a000:	cf 01       	movw	r24, r30
    a002:	b7 dc       	rcall	.-1682   	; 0x9972 <move_window>
    a004:	5c 01       	movw	r10, r24
    a006:	89 2b       	or	r24, r25
    a008:	09 f0       	breq	.+2      	; 0xa00c <put_fat+0xf0>
    a00a:	7e c0       	rjmp	.+252    	; 0xa108 <put_fat+0x1ec>
    a00c:	11 70       	andi	r17, 0x01	; 1
    a00e:	f1 01       	movw	r30, r2
    a010:	e0 0f       	add	r30, r16
    a012:	f1 1f       	adc	r31, r17
    a014:	89 81       	ldd	r24, Y+1	; 0x01
    a016:	9a 81       	ldd	r25, Y+2	; 0x02
    a018:	ab 81       	ldd	r26, Y+3	; 0x03
    a01a:	bc 81       	ldd	r27, Y+4	; 0x04
    a01c:	89 2b       	or	r24, r25
    a01e:	8a 2b       	or	r24, r26
    a020:	8b 2b       	or	r24, r27
    a022:	41 f0       	breq	.+16     	; 0xa034 <put_fat+0x118>
    a024:	54 e0       	ldi	r21, 0x04	; 4
    a026:	76 94       	lsr	r7
    a028:	67 94       	ror	r6
    a02a:	57 94       	ror	r5
    a02c:	47 94       	ror	r4
    a02e:	5a 95       	dec	r21
    a030:	d1 f7       	brne	.-12     	; 0xa026 <put_fat+0x10a>
    a032:	06 c0       	rjmp	.+12     	; 0xa040 <put_fat+0x124>
    a034:	00 81       	ld	r16, Z
    a036:	00 7f       	andi	r16, 0xF0	; 240
    a038:	85 2d       	mov	r24, r5
    a03a:	8f 70       	andi	r24, 0x0F	; 15
    a03c:	40 2e       	mov	r4, r16
    a03e:	48 2a       	or	r4, r24
    a040:	40 82       	st	Z, r4
    a042:	5a c0       	rjmp	.+180    	; 0xa0f8 <put_fat+0x1dc>
    a044:	77 27       	eor	r23, r23
    a046:	6f 2d       	mov	r22, r15
    a048:	5e 2d       	mov	r21, r14
    a04a:	4d 2d       	mov	r20, r13
    a04c:	ed 81       	ldd	r30, Y+5	; 0x05
    a04e:	fe 81       	ldd	r31, Y+6	; 0x06
    a050:	85 a1       	ldd	r24, Z+37	; 0x25
    a052:	96 a1       	ldd	r25, Z+38	; 0x26
    a054:	a7 a1       	ldd	r26, Z+39	; 0x27
    a056:	b0 a5       	ldd	r27, Z+40	; 0x28
    a058:	48 0f       	add	r20, r24
    a05a:	59 1f       	adc	r21, r25
    a05c:	6a 1f       	adc	r22, r26
    a05e:	7b 1f       	adc	r23, r27
    a060:	cf 01       	movw	r24, r30
    a062:	87 dc       	rcall	.-1778   	; 0x9972 <move_window>
    a064:	5c 01       	movw	r10, r24
    a066:	89 2b       	or	r24, r25
    a068:	09 f0       	breq	.+2      	; 0xa06c <put_fat+0x150>
    a06a:	4e c0       	rjmp	.+156    	; 0xa108 <put_fat+0x1ec>
    a06c:	ed 81       	ldd	r30, Y+5	; 0x05
    a06e:	fe 81       	ldd	r31, Y+6	; 0x06
    a070:	f5 96       	adiw	r30, 0x35	; 53
    a072:	cc 0c       	add	r12, r12
    a074:	dd 1c       	adc	r13, r13
    a076:	e8 94       	clt
    a078:	c0 f8       	bld	r12, 0
    a07a:	21 e0       	ldi	r18, 0x01	; 1
    a07c:	d2 22       	and	r13, r18
    a07e:	ec 0d       	add	r30, r12
    a080:	fd 1d       	adc	r31, r13
    a082:	40 82       	st	Z, r4
    a084:	51 82       	std	Z+1, r5	; 0x01
    a086:	38 c0       	rjmp	.+112    	; 0xa0f8 <put_fat+0x1dc>
    a088:	ed 81       	ldd	r30, Y+5	; 0x05
    a08a:	fe 81       	ldd	r31, Y+6	; 0x06
    a08c:	85 a1       	ldd	r24, Z+37	; 0x25
    a08e:	96 a1       	ldd	r25, Z+38	; 0x26
    a090:	a7 a1       	ldd	r26, Z+39	; 0x27
    a092:	b0 a5       	ldd	r27, Z+40	; 0x28
    a094:	27 e0       	ldi	r18, 0x07	; 7
    a096:	76 95       	lsr	r23
    a098:	67 95       	ror	r22
    a09a:	57 95       	ror	r21
    a09c:	47 95       	ror	r20
    a09e:	2a 95       	dec	r18
    a0a0:	d1 f7       	brne	.-12     	; 0xa096 <put_fat+0x17a>
    a0a2:	48 0f       	add	r20, r24
    a0a4:	59 1f       	adc	r21, r25
    a0a6:	6a 1f       	adc	r22, r26
    a0a8:	7b 1f       	adc	r23, r27
    a0aa:	cf 01       	movw	r24, r30
    a0ac:	62 dc       	rcall	.-1852   	; 0x9972 <move_window>
    a0ae:	5c 01       	movw	r10, r24
    a0b0:	89 2b       	or	r24, r25
    a0b2:	51 f5       	brne	.+84     	; 0xa108 <put_fat+0x1ec>
    a0b4:	4d 81       	ldd	r20, Y+5	; 0x05
    a0b6:	5e 81       	ldd	r21, Y+6	; 0x06
    a0b8:	4b 5c       	subi	r20, 0xCB	; 203
    a0ba:	5f 4f       	sbci	r21, 0xFF	; 255
    a0bc:	cc 0c       	add	r12, r12
    a0be:	dd 1c       	adc	r13, r13
    a0c0:	cc 0c       	add	r12, r12
    a0c2:	dd 1c       	adc	r13, r13
    a0c4:	fc ef       	ldi	r31, 0xFC	; 252
    a0c6:	cf 22       	and	r12, r31
    a0c8:	f1 e0       	ldi	r31, 0x01	; 1
    a0ca:	df 22       	and	r13, r31
    a0cc:	c4 0e       	add	r12, r20
    a0ce:	d5 1e       	adc	r13, r21
    a0d0:	c6 01       	movw	r24, r12
    a0d2:	0e 94 de 47 	call	0x8fbc	; 0x8fbc <ld_dword>
    a0d6:	2f e0       	ldi	r18, 0x0F	; 15
    a0d8:	72 22       	and	r7, r18
    a0da:	dc 01       	movw	r26, r24
    a0dc:	cb 01       	movw	r24, r22
    a0de:	88 27       	eor	r24, r24
    a0e0:	99 27       	eor	r25, r25
    a0e2:	aa 27       	eor	r26, r26
    a0e4:	b0 7f       	andi	r27, 0xF0	; 240
    a0e6:	b3 01       	movw	r22, r6
    a0e8:	a2 01       	movw	r20, r4
    a0ea:	48 2b       	or	r20, r24
    a0ec:	59 2b       	or	r21, r25
    a0ee:	6a 2b       	or	r22, r26
    a0f0:	7b 2b       	or	r23, r27
    a0f2:	c6 01       	movw	r24, r12
    a0f4:	0e 94 f3 47 	call	0x8fe6	; 0x8fe6 <st_dword>
    a0f8:	81 e0       	ldi	r24, 0x01	; 1
    a0fa:	ed 81       	ldd	r30, Y+5	; 0x05
    a0fc:	fe 81       	ldd	r31, Y+6	; 0x06
    a0fe:	83 83       	std	Z+3, r24	; 0x03
    a100:	03 c0       	rjmp	.+6      	; 0xa108 <put_fat+0x1ec>
    a102:	82 e0       	ldi	r24, 0x02	; 2
    a104:	a8 2e       	mov	r10, r24
    a106:	b1 2c       	mov	r11, r1
    a108:	c5 01       	movw	r24, r10
    a10a:	26 96       	adiw	r28, 0x06	; 6
    a10c:	e2 e1       	ldi	r30, 0x12	; 18
    a10e:	0c 94 e4 e3 	jmp	0x1c7c8	; 0x1c7c8 <__epilogue_restores__>

0000a112 <get_fat.isra.10>:
    a112:	a0 e0       	ldi	r26, 0x00	; 0
    a114:	b0 e0       	ldi	r27, 0x00	; 0
    a116:	ef e8       	ldi	r30, 0x8F	; 143
    a118:	f0 e5       	ldi	r31, 0x50	; 80
    a11a:	0c 94 d0 e3 	jmp	0x1c7a0	; 0x1c7a0 <__prologue_saves__+0x10>
    a11e:	42 30       	cpi	r20, 0x02	; 2
    a120:	51 05       	cpc	r21, r1
    a122:	61 05       	cpc	r22, r1
    a124:	71 05       	cpc	r23, r1
    a126:	08 f4       	brcc	.+2      	; 0xa12a <get_fat.isra.10+0x18>
    a128:	9f c0       	rjmp	.+318    	; 0xa268 <get_fat.isra.10+0x156>
    a12a:	fc 01       	movw	r30, r24
    a12c:	01 8d       	ldd	r16, Z+25	; 0x19
    a12e:	12 8d       	ldd	r17, Z+26	; 0x1a
    a130:	23 8d       	ldd	r18, Z+27	; 0x1b
    a132:	34 8d       	ldd	r19, Z+28	; 0x1c
    a134:	40 17       	cp	r20, r16
    a136:	51 07       	cpc	r21, r17
    a138:	62 07       	cpc	r22, r18
    a13a:	73 07       	cpc	r23, r19
    a13c:	08 f0       	brcs	.+2      	; 0xa140 <get_fat.isra.10+0x2e>
    a13e:	94 c0       	rjmp	.+296    	; 0xa268 <get_fat.isra.10+0x156>
    a140:	6a 01       	movw	r12, r20
    a142:	7b 01       	movw	r14, r22
    a144:	8c 01       	movw	r16, r24
    a146:	80 81       	ld	r24, Z
    a148:	82 30       	cpi	r24, 0x02	; 2
    a14a:	09 f4       	brne	.+2      	; 0xa14e <get_fat.isra.10+0x3c>
    a14c:	4b c0       	rjmp	.+150    	; 0xa1e4 <get_fat.isra.10+0xd2>
    a14e:	83 30       	cpi	r24, 0x03	; 3
    a150:	09 f4       	brne	.+2      	; 0xa154 <get_fat.isra.10+0x42>
    a152:	67 c0       	rjmp	.+206    	; 0xa222 <get_fat.isra.10+0x110>
    a154:	81 30       	cpi	r24, 0x01	; 1
    a156:	09 f0       	breq	.+2      	; 0xa15a <get_fat.isra.10+0x48>
    a158:	87 c0       	rjmp	.+270    	; 0xa268 <get_fat.isra.10+0x156>
    a15a:	ea 01       	movw	r28, r20
    a15c:	d6 95       	lsr	r29
    a15e:	c7 95       	ror	r28
    a160:	cc 0d       	add	r28, r12
    a162:	dd 1d       	adc	r29, r13
    a164:	ce 01       	movw	r24, r28
    a166:	89 2f       	mov	r24, r25
    a168:	99 27       	eor	r25, r25
    a16a:	86 95       	lsr	r24
    a16c:	45 a1       	ldd	r20, Z+37	; 0x25
    a16e:	56 a1       	ldd	r21, Z+38	; 0x26
    a170:	67 a1       	ldd	r22, Z+39	; 0x27
    a172:	70 a5       	ldd	r23, Z+40	; 0x28
    a174:	48 0f       	add	r20, r24
    a176:	59 1f       	adc	r21, r25
    a178:	61 1d       	adc	r22, r1
    a17a:	71 1d       	adc	r23, r1
    a17c:	cf 01       	movw	r24, r30
    a17e:	f9 db       	rcall	.-2062   	; 0x9972 <move_window>
    a180:	89 2b       	or	r24, r25
    a182:	21 f0       	breq	.+8      	; 0xa18c <get_fat.isra.10+0x7a>
    a184:	6f ef       	ldi	r22, 0xFF	; 255
    a186:	7f ef       	ldi	r23, 0xFF	; 255
    a188:	cb 01       	movw	r24, r22
    a18a:	72 c0       	rjmp	.+228    	; 0xa270 <get_fat.isra.10+0x15e>
    a18c:	5e 01       	movw	r10, r28
    a18e:	ff ef       	ldi	r31, 0xFF	; 255
    a190:	af 1a       	sub	r10, r31
    a192:	bf 0a       	sbc	r11, r31
    a194:	d1 70       	andi	r29, 0x01	; 1
    a196:	c0 0f       	add	r28, r16
    a198:	d1 1f       	adc	r29, r17
    a19a:	cd a9       	ldd	r28, Y+53	; 0x35
    a19c:	c5 01       	movw	r24, r10
    a19e:	89 2f       	mov	r24, r25
    a1a0:	99 27       	eor	r25, r25
    a1a2:	86 95       	lsr	r24
    a1a4:	f8 01       	movw	r30, r16
    a1a6:	45 a1       	ldd	r20, Z+37	; 0x25
    a1a8:	56 a1       	ldd	r21, Z+38	; 0x26
    a1aa:	67 a1       	ldd	r22, Z+39	; 0x27
    a1ac:	70 a5       	ldd	r23, Z+40	; 0x28
    a1ae:	48 0f       	add	r20, r24
    a1b0:	59 1f       	adc	r21, r25
    a1b2:	61 1d       	adc	r22, r1
    a1b4:	71 1d       	adc	r23, r1
    a1b6:	c8 01       	movw	r24, r16
    a1b8:	dc db       	rcall	.-2120   	; 0x9972 <move_window>
    a1ba:	89 2b       	or	r24, r25
    a1bc:	19 f7       	brne	.-58     	; 0xa184 <get_fat.isra.10+0x72>
    a1be:	f1 e0       	ldi	r31, 0x01	; 1
    a1c0:	bf 22       	and	r11, r31
    a1c2:	f8 01       	movw	r30, r16
    a1c4:	ea 0d       	add	r30, r10
    a1c6:	fb 1d       	adc	r31, r11
    a1c8:	85 a9       	ldd	r24, Z+53	; 0x35
    a1ca:	6c 2f       	mov	r22, r28
    a1cc:	70 e0       	ldi	r23, 0x00	; 0
    a1ce:	78 2b       	or	r23, r24
    a1d0:	c0 fe       	sbrs	r12, 0
    a1d2:	06 c0       	rjmp	.+12     	; 0xa1e0 <get_fat.isra.10+0xce>
    a1d4:	54 e0       	ldi	r21, 0x04	; 4
    a1d6:	76 95       	lsr	r23
    a1d8:	67 95       	ror	r22
    a1da:	5a 95       	dec	r21
    a1dc:	e1 f7       	brne	.-8      	; 0xa1d6 <get_fat.isra.10+0xc4>
    a1de:	1e c0       	rjmp	.+60     	; 0xa21c <get_fat.isra.10+0x10a>
    a1e0:	7f 70       	andi	r23, 0x0F	; 15
    a1e2:	1c c0       	rjmp	.+56     	; 0xa21c <get_fat.isra.10+0x10a>
    a1e4:	77 27       	eor	r23, r23
    a1e6:	6f 2d       	mov	r22, r15
    a1e8:	5e 2d       	mov	r21, r14
    a1ea:	4d 2d       	mov	r20, r13
    a1ec:	85 a1       	ldd	r24, Z+37	; 0x25
    a1ee:	96 a1       	ldd	r25, Z+38	; 0x26
    a1f0:	a7 a1       	ldd	r26, Z+39	; 0x27
    a1f2:	b0 a5       	ldd	r27, Z+40	; 0x28
    a1f4:	48 0f       	add	r20, r24
    a1f6:	59 1f       	adc	r21, r25
    a1f8:	6a 1f       	adc	r22, r26
    a1fa:	7b 1f       	adc	r23, r27
    a1fc:	cf 01       	movw	r24, r30
    a1fe:	b9 db       	rcall	.-2190   	; 0x9972 <move_window>
    a200:	89 2b       	or	r24, r25
    a202:	09 f0       	breq	.+2      	; 0xa206 <get_fat.isra.10+0xf4>
    a204:	bf cf       	rjmp	.-130    	; 0xa184 <get_fat.isra.10+0x72>
    a206:	cc 0c       	add	r12, r12
    a208:	dd 1c       	adc	r13, r13
    a20a:	e8 94       	clt
    a20c:	c0 f8       	bld	r12, 0
    a20e:	f1 e0       	ldi	r31, 0x01	; 1
    a210:	df 22       	and	r13, r31
    a212:	f8 01       	movw	r30, r16
    a214:	ec 0d       	add	r30, r12
    a216:	fd 1d       	adc	r31, r13
    a218:	65 a9       	ldd	r22, Z+53	; 0x35
    a21a:	76 a9       	ldd	r23, Z+54	; 0x36
    a21c:	80 e0       	ldi	r24, 0x00	; 0
    a21e:	90 e0       	ldi	r25, 0x00	; 0
    a220:	27 c0       	rjmp	.+78     	; 0xa270 <get_fat.isra.10+0x15e>
    a222:	85 a1       	ldd	r24, Z+37	; 0x25
    a224:	96 a1       	ldd	r25, Z+38	; 0x26
    a226:	a7 a1       	ldd	r26, Z+39	; 0x27
    a228:	b0 a5       	ldd	r27, Z+40	; 0x28
    a22a:	27 e0       	ldi	r18, 0x07	; 7
    a22c:	76 95       	lsr	r23
    a22e:	67 95       	ror	r22
    a230:	57 95       	ror	r21
    a232:	47 95       	ror	r20
    a234:	2a 95       	dec	r18
    a236:	d1 f7       	brne	.-12     	; 0xa22c <get_fat.isra.10+0x11a>
    a238:	48 0f       	add	r20, r24
    a23a:	59 1f       	adc	r21, r25
    a23c:	6a 1f       	adc	r22, r26
    a23e:	7b 1f       	adc	r23, r27
    a240:	cf 01       	movw	r24, r30
    a242:	97 db       	rcall	.-2258   	; 0x9972 <move_window>
    a244:	89 2b       	or	r24, r25
    a246:	09 f0       	breq	.+2      	; 0xa24a <get_fat.isra.10+0x138>
    a248:	9d cf       	rjmp	.-198    	; 0xa184 <get_fat.isra.10+0x72>
    a24a:	0b 5c       	subi	r16, 0xCB	; 203
    a24c:	1f 4f       	sbci	r17, 0xFF	; 255
    a24e:	cc 0c       	add	r12, r12
    a250:	dd 1c       	adc	r13, r13
    a252:	cc 0c       	add	r12, r12
    a254:	dd 1c       	adc	r13, r13
    a256:	c6 01       	movw	r24, r12
    a258:	8c 7f       	andi	r24, 0xFC	; 252
    a25a:	91 70       	andi	r25, 0x01	; 1
    a25c:	80 0f       	add	r24, r16
    a25e:	91 1f       	adc	r25, r17
    a260:	0e 94 de 47 	call	0x8fbc	; 0x8fbc <ld_dword>
    a264:	9f 70       	andi	r25, 0x0F	; 15
    a266:	04 c0       	rjmp	.+8      	; 0xa270 <get_fat.isra.10+0x15e>
    a268:	61 e0       	ldi	r22, 0x01	; 1
    a26a:	70 e0       	ldi	r23, 0x00	; 0
    a26c:	80 e0       	ldi	r24, 0x00	; 0
    a26e:	90 e0       	ldi	r25, 0x00	; 0
    a270:	cd b7       	in	r28, 0x3d	; 61
    a272:	de b7       	in	r29, 0x3e	; 62
    a274:	ea e0       	ldi	r30, 0x0A	; 10
    a276:	0c 94 ec e3 	jmp	0x1c7d8	; 0x1c7d8 <__epilogue_restores__+0x10>

0000a27a <dir_sdi>:
    a27a:	a0 e0       	ldi	r26, 0x00	; 0
    a27c:	b0 e0       	ldi	r27, 0x00	; 0
    a27e:	e3 e4       	ldi	r30, 0x43	; 67
    a280:	f1 e5       	ldi	r31, 0x51	; 81
    a282:	0c 94 ca e3 	jmp	0x1c794	; 0x1c794 <__prologue_saves__+0x4>
    a286:	ec 01       	movw	r28, r24
    a288:	6a 01       	movw	r12, r20
    a28a:	7b 01       	movw	r14, r22
    a28c:	41 15       	cp	r20, r1
    a28e:	51 05       	cpc	r21, r1
    a290:	80 e2       	ldi	r24, 0x20	; 32
    a292:	68 07       	cpc	r22, r24
    a294:	71 05       	cpc	r23, r1
    a296:	18 f0       	brcs	.+6      	; 0xa29e <dir_sdi+0x24>
    a298:	82 e0       	ldi	r24, 0x02	; 2
    a29a:	90 e0       	ldi	r25, 0x00	; 0
    a29c:	aa c0       	rjmp	.+340    	; 0xa3f2 <dir_sdi+0x178>
    a29e:	db 01       	movw	r26, r22
    a2a0:	ca 01       	movw	r24, r20
    a2a2:	8f 71       	andi	r24, 0x1F	; 31
    a2a4:	99 27       	eor	r25, r25
    a2a6:	aa 27       	eor	r26, r26
    a2a8:	bb 27       	eor	r27, r27
    a2aa:	89 2b       	or	r24, r25
    a2ac:	8a 2b       	or	r24, r26
    a2ae:	8b 2b       	or	r24, r27
    a2b0:	99 f7       	brne	.-26     	; 0xa298 <dir_sdi+0x1e>
    a2b2:	08 81       	ld	r16, Y
    a2b4:	19 81       	ldd	r17, Y+1	; 0x01
    a2b6:	4e 87       	std	Y+14, r20	; 0x0e
    a2b8:	5f 87       	std	Y+15, r21	; 0x0f
    a2ba:	68 8b       	std	Y+16, r22	; 0x10
    a2bc:	79 8b       	std	Y+17, r23	; 0x11
    a2be:	8e 80       	ldd	r8, Y+6	; 0x06
    a2c0:	9f 80       	ldd	r9, Y+7	; 0x07
    a2c2:	a8 84       	ldd	r10, Y+8	; 0x08
    a2c4:	b9 84       	ldd	r11, Y+9	; 0x09
    a2c6:	81 14       	cp	r8, r1
    a2c8:	91 04       	cpc	r9, r1
    a2ca:	a1 04       	cpc	r10, r1
    a2cc:	b1 04       	cpc	r11, r1
    a2ce:	51 f5       	brne	.+84     	; 0xa324 <dir_sdi+0xaa>
    a2d0:	f8 01       	movw	r30, r16
    a2d2:	80 81       	ld	r24, Z
    a2d4:	83 30       	cpi	r24, 0x03	; 3
    a2d6:	40 f0       	brcs	.+16     	; 0xa2e8 <dir_sdi+0x6e>
    a2d8:	81 a5       	ldd	r24, Z+41	; 0x29
    a2da:	92 a5       	ldd	r25, Z+42	; 0x2a
    a2dc:	a3 a5       	ldd	r26, Z+43	; 0x2b
    a2de:	b4 a5       	ldd	r27, Z+44	; 0x2c
    a2e0:	00 97       	sbiw	r24, 0x00	; 0
    a2e2:	a1 05       	cpc	r26, r1
    a2e4:	b1 05       	cpc	r27, r1
    a2e6:	e1 f4       	brne	.+56     	; 0xa320 <dir_sdi+0xa6>
    a2e8:	f8 01       	movw	r30, r16
    a2ea:	87 81       	ldd	r24, Z+7	; 0x07
    a2ec:	90 85       	ldd	r25, Z+8	; 0x08
    a2ee:	a0 e0       	ldi	r26, 0x00	; 0
    a2f0:	b0 e0       	ldi	r27, 0x00	; 0
    a2f2:	b7 01       	movw	r22, r14
    a2f4:	a6 01       	movw	r20, r12
    a2f6:	25 e0       	ldi	r18, 0x05	; 5
    a2f8:	76 95       	lsr	r23
    a2fa:	67 95       	ror	r22
    a2fc:	57 95       	ror	r21
    a2fe:	47 95       	ror	r20
    a300:	2a 95       	dec	r18
    a302:	d1 f7       	brne	.-12     	; 0xa2f8 <dir_sdi+0x7e>
    a304:	48 17       	cp	r20, r24
    a306:	59 07       	cpc	r21, r25
    a308:	6a 07       	cpc	r22, r26
    a30a:	7b 07       	cpc	r23, r27
    a30c:	28 f6       	brcc	.-118    	; 0xa298 <dir_sdi+0x1e>
    a30e:	81 a5       	ldd	r24, Z+41	; 0x29
    a310:	92 a5       	ldd	r25, Z+42	; 0x2a
    a312:	a3 a5       	ldd	r26, Z+43	; 0x2b
    a314:	b4 a5       	ldd	r27, Z+44	; 0x2c
    a316:	8e 8b       	std	Y+22, r24	; 0x16
    a318:	9f 8b       	std	Y+23, r25	; 0x17
    a31a:	a8 8f       	std	Y+24, r26	; 0x18
    a31c:	b9 8f       	std	Y+25, r27	; 0x19
    a31e:	3e c0       	rjmp	.+124    	; 0xa39c <dir_sdi+0x122>
    a320:	4c 01       	movw	r8, r24
    a322:	5d 01       	movw	r10, r26
    a324:	f8 01       	movw	r30, r16
    a326:	41 84       	ldd	r4, Z+9	; 0x09
    a328:	52 84       	ldd	r5, Z+10	; 0x0a
    a32a:	61 2c       	mov	r6, r1
    a32c:	71 2c       	mov	r7, r1
    a32e:	39 e0       	ldi	r19, 0x09	; 9
    a330:	44 0c       	add	r4, r4
    a332:	55 1c       	adc	r5, r5
    a334:	66 1c       	adc	r6, r6
    a336:	77 1c       	adc	r7, r7
    a338:	3a 95       	dec	r19
    a33a:	d1 f7       	brne	.-12     	; 0xa330 <dir_sdi+0xb6>
    a33c:	b5 01       	movw	r22, r10
    a33e:	a4 01       	movw	r20, r8
    a340:	c4 14       	cp	r12, r4
    a342:	d5 04       	cpc	r13, r5
    a344:	e6 04       	cpc	r14, r6
    a346:	f7 04       	cpc	r15, r7
    a348:	10 f1       	brcs	.+68     	; 0xa38e <dir_sdi+0x114>
    a34a:	88 81       	ld	r24, Y
    a34c:	99 81       	ldd	r25, Y+1	; 0x01
    a34e:	e1 de       	rcall	.-574    	; 0xa112 <get_fat.isra.10>
    a350:	4b 01       	movw	r8, r22
    a352:	5c 01       	movw	r10, r24
    a354:	6f 3f       	cpi	r22, 0xFF	; 255
    a356:	7f 4f       	sbci	r23, 0xFF	; 255
    a358:	8f 4f       	sbci	r24, 0xFF	; 255
    a35a:	9f 4f       	sbci	r25, 0xFF	; 255
    a35c:	09 f4       	brne	.+2      	; 0xa360 <dir_sdi+0xe6>
    a35e:	47 c0       	rjmp	.+142    	; 0xa3ee <dir_sdi+0x174>
    a360:	82 e0       	ldi	r24, 0x02	; 2
    a362:	88 16       	cp	r8, r24
    a364:	91 04       	cpc	r9, r1
    a366:	a1 04       	cpc	r10, r1
    a368:	b1 04       	cpc	r11, r1
    a36a:	08 f4       	brcc	.+2      	; 0xa36e <dir_sdi+0xf4>
    a36c:	95 cf       	rjmp	.-214    	; 0xa298 <dir_sdi+0x1e>
    a36e:	f8 01       	movw	r30, r16
    a370:	81 8d       	ldd	r24, Z+25	; 0x19
    a372:	92 8d       	ldd	r25, Z+26	; 0x1a
    a374:	a3 8d       	ldd	r26, Z+27	; 0x1b
    a376:	b4 8d       	ldd	r27, Z+28	; 0x1c
    a378:	88 16       	cp	r8, r24
    a37a:	99 06       	cpc	r9, r25
    a37c:	aa 06       	cpc	r10, r26
    a37e:	bb 06       	cpc	r11, r27
    a380:	08 f0       	brcs	.+2      	; 0xa384 <dir_sdi+0x10a>
    a382:	8a cf       	rjmp	.-236    	; 0xa298 <dir_sdi+0x1e>
    a384:	c4 18       	sub	r12, r4
    a386:	d5 08       	sbc	r13, r5
    a388:	e6 08       	sbc	r14, r6
    a38a:	f7 08       	sbc	r15, r7
    a38c:	d7 cf       	rjmp	.-82     	; 0xa33c <dir_sdi+0xc2>
    a38e:	c8 01       	movw	r24, r16
    a390:	0e 94 97 48 	call	0x912e	; 0x912e <clst2sect>
    a394:	6e 8b       	std	Y+22, r22	; 0x16
    a396:	7f 8b       	std	Y+23, r23	; 0x17
    a398:	88 8f       	std	Y+24, r24	; 0x18
    a39a:	99 8f       	std	Y+25, r25	; 0x19
    a39c:	8a 8a       	std	Y+18, r8	; 0x12
    a39e:	9b 8a       	std	Y+19, r9	; 0x13
    a3a0:	ac 8a       	std	Y+20, r10	; 0x14
    a3a2:	bd 8a       	std	Y+21, r11	; 0x15
    a3a4:	8e 89       	ldd	r24, Y+22	; 0x16
    a3a6:	9f 89       	ldd	r25, Y+23	; 0x17
    a3a8:	a8 8d       	ldd	r26, Y+24	; 0x18
    a3aa:	b9 8d       	ldd	r27, Y+25	; 0x19
    a3ac:	00 97       	sbiw	r24, 0x00	; 0
    a3ae:	a1 05       	cpc	r26, r1
    a3b0:	b1 05       	cpc	r27, r1
    a3b2:	09 f4       	brne	.+2      	; 0xa3b6 <dir_sdi+0x13c>
    a3b4:	71 cf       	rjmp	.-286    	; 0xa298 <dir_sdi+0x1e>
    a3b6:	b7 01       	movw	r22, r14
    a3b8:	a6 01       	movw	r20, r12
    a3ba:	29 e0       	ldi	r18, 0x09	; 9
    a3bc:	76 95       	lsr	r23
    a3be:	67 95       	ror	r22
    a3c0:	57 95       	ror	r21
    a3c2:	47 95       	ror	r20
    a3c4:	2a 95       	dec	r18
    a3c6:	d1 f7       	brne	.-12     	; 0xa3bc <dir_sdi+0x142>
    a3c8:	84 0f       	add	r24, r20
    a3ca:	95 1f       	adc	r25, r21
    a3cc:	a6 1f       	adc	r26, r22
    a3ce:	b7 1f       	adc	r27, r23
    a3d0:	8e 8b       	std	Y+22, r24	; 0x16
    a3d2:	9f 8b       	std	Y+23, r25	; 0x17
    a3d4:	a8 8f       	std	Y+24, r26	; 0x18
    a3d6:	b9 8f       	std	Y+25, r27	; 0x19
    a3d8:	0b 5c       	subi	r16, 0xCB	; 203
    a3da:	1f 4f       	sbci	r17, 0xFF	; 255
    a3dc:	f1 e0       	ldi	r31, 0x01	; 1
    a3de:	df 22       	and	r13, r31
    a3e0:	c0 0e       	add	r12, r16
    a3e2:	d1 1e       	adc	r13, r17
    a3e4:	db 8e       	std	Y+27, r13	; 0x1b
    a3e6:	ca 8e       	std	Y+26, r12	; 0x1a
    a3e8:	80 e0       	ldi	r24, 0x00	; 0
    a3ea:	90 e0       	ldi	r25, 0x00	; 0
    a3ec:	02 c0       	rjmp	.+4      	; 0xa3f2 <dir_sdi+0x178>
    a3ee:	81 e0       	ldi	r24, 0x01	; 1
    a3f0:	90 e0       	ldi	r25, 0x00	; 0
    a3f2:	cd b7       	in	r28, 0x3d	; 61
    a3f4:	de b7       	in	r29, 0x3e	; 62
    a3f6:	e0 e1       	ldi	r30, 0x10	; 16
    a3f8:	0c 94 e6 e3 	jmp	0x1c7cc	; 0x1c7cc <__epilogue_restores__+0x4>

0000a3fc <create_chain>:
    a3fc:	a0 e0       	ldi	r26, 0x00	; 0
    a3fe:	b0 e0       	ldi	r27, 0x00	; 0
    a400:	e4 e0       	ldi	r30, 0x04	; 4
    a402:	f2 e5       	ldi	r31, 0x52	; 82
    a404:	0c 94 ca e3 	jmp	0x1c794	; 0x1c794 <__prologue_saves__+0x4>
    a408:	8c 01       	movw	r16, r24
    a40a:	2a 01       	movw	r4, r20
    a40c:	3b 01       	movw	r6, r22
    a40e:	fc 01       	movw	r30, r24
    a410:	c0 81       	ld	r28, Z
    a412:	d1 81       	ldd	r29, Z+1	; 0x01
    a414:	41 15       	cp	r20, r1
    a416:	51 05       	cpc	r21, r1
    a418:	61 05       	cpc	r22, r1
    a41a:	71 05       	cpc	r23, r1
    a41c:	99 f4       	brne	.+38     	; 0xa444 <create_chain+0x48>
    a41e:	8d 84       	ldd	r8, Y+13	; 0x0d
    a420:	9e 84       	ldd	r9, Y+14	; 0x0e
    a422:	af 84       	ldd	r10, Y+15	; 0x0f
    a424:	b8 88       	ldd	r11, Y+16	; 0x10
    a426:	81 14       	cp	r8, r1
    a428:	91 04       	cpc	r9, r1
    a42a:	a1 04       	cpc	r10, r1
    a42c:	b1 04       	cpc	r11, r1
    a42e:	51 f1       	breq	.+84     	; 0xa484 <create_chain+0x88>
    a430:	89 8d       	ldd	r24, Y+25	; 0x19
    a432:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a434:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a436:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a438:	88 16       	cp	r8, r24
    a43a:	99 06       	cpc	r9, r25
    a43c:	aa 06       	cpc	r10, r26
    a43e:	bb 06       	cpc	r11, r27
    a440:	28 f1       	brcs	.+74     	; 0xa48c <create_chain+0x90>
    a442:	20 c0       	rjmp	.+64     	; 0xa484 <create_chain+0x88>
    a444:	ce 01       	movw	r24, r28
    a446:	65 de       	rcall	.-822    	; 0xa112 <get_fat.isra.10>
    a448:	62 30       	cpi	r22, 0x02	; 2
    a44a:	71 05       	cpc	r23, r1
    a44c:	81 05       	cpc	r24, r1
    a44e:	91 05       	cpc	r25, r1
    a450:	08 f4       	brcc	.+2      	; 0xa454 <create_chain+0x58>
    a452:	ea c0       	rjmp	.+468    	; 0xa628 <create_chain+0x22c>
    a454:	6f 3f       	cpi	r22, 0xFF	; 255
    a456:	ff ef       	ldi	r31, 0xFF	; 255
    a458:	7f 07       	cpc	r23, r31
    a45a:	8f 07       	cpc	r24, r31
    a45c:	9f 07       	cpc	r25, r31
    a45e:	29 f4       	brne	.+10     	; 0xa46a <create_chain+0x6e>
    a460:	4f ef       	ldi	r20, 0xFF	; 255
    a462:	3f ef       	ldi	r19, 0xFF	; 255
    a464:	2f ef       	ldi	r18, 0xFF	; 255
    a466:	9f ef       	ldi	r25, 0xFF	; 255
    a468:	e7 c0       	rjmp	.+462    	; 0xa638 <create_chain+0x23c>
    a46a:	c9 8c       	ldd	r12, Y+25	; 0x19
    a46c:	da 8c       	ldd	r13, Y+26	; 0x1a
    a46e:	eb 8c       	ldd	r14, Y+27	; 0x1b
    a470:	fc 8c       	ldd	r15, Y+28	; 0x1c
    a472:	6c 15       	cp	r22, r12
    a474:	7d 05       	cpc	r23, r13
    a476:	8e 05       	cpc	r24, r14
    a478:	9f 05       	cpc	r25, r15
    a47a:	08 f4       	brcc	.+2      	; 0xa47e <create_chain+0x82>
    a47c:	da c0       	rjmp	.+436    	; 0xa632 <create_chain+0x236>
    a47e:	53 01       	movw	r10, r6
    a480:	42 01       	movw	r8, r4
    a482:	04 c0       	rjmp	.+8      	; 0xa48c <create_chain+0x90>
    a484:	81 2c       	mov	r8, r1
    a486:	91 2c       	mov	r9, r1
    a488:	54 01       	movw	r10, r8
    a48a:	83 94       	inc	r8
    a48c:	89 89       	ldd	r24, Y+17	; 0x11
    a48e:	9a 89       	ldd	r25, Y+18	; 0x12
    a490:	ab 89       	ldd	r26, Y+19	; 0x13
    a492:	bc 89       	ldd	r27, Y+20	; 0x14
    a494:	89 2b       	or	r24, r25
    a496:	8a 2b       	or	r24, r26
    a498:	8b 2b       	or	r24, r27
    a49a:	11 f4       	brne	.+4      	; 0xa4a0 <create_chain+0xa4>
    a49c:	40 e0       	ldi	r20, 0x00	; 0
    a49e:	c5 c0       	rjmp	.+394    	; 0xa62a <create_chain+0x22e>
    a4a0:	84 14       	cp	r8, r4
    a4a2:	95 04       	cpc	r9, r5
    a4a4:	a6 04       	cpc	r10, r6
    a4a6:	b7 04       	cpc	r11, r7
    a4a8:	09 f0       	breq	.+2      	; 0xa4ac <create_chain+0xb0>
    a4aa:	46 c0       	rjmp	.+140    	; 0xa538 <create_chain+0x13c>
    a4ac:	75 01       	movw	r14, r10
    a4ae:	64 01       	movw	r12, r8
    a4b0:	2f ef       	ldi	r18, 0xFF	; 255
    a4b2:	c2 1a       	sub	r12, r18
    a4b4:	d2 0a       	sbc	r13, r18
    a4b6:	e2 0a       	sbc	r14, r18
    a4b8:	f2 0a       	sbc	r15, r18
    a4ba:	89 8d       	ldd	r24, Y+25	; 0x19
    a4bc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a4be:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a4c0:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a4c2:	c8 16       	cp	r12, r24
    a4c4:	d9 06       	cpc	r13, r25
    a4c6:	ea 06       	cpc	r14, r26
    a4c8:	fb 06       	cpc	r15, r27
    a4ca:	28 f0       	brcs	.+10     	; 0xa4d6 <create_chain+0xda>
    a4cc:	92 e0       	ldi	r25, 0x02	; 2
    a4ce:	c9 2e       	mov	r12, r25
    a4d0:	d1 2c       	mov	r13, r1
    a4d2:	e1 2c       	mov	r14, r1
    a4d4:	f1 2c       	mov	r15, r1
    a4d6:	b7 01       	movw	r22, r14
    a4d8:	a6 01       	movw	r20, r12
    a4da:	f8 01       	movw	r30, r16
    a4dc:	80 81       	ld	r24, Z
    a4de:	91 81       	ldd	r25, Z+1	; 0x01
    a4e0:	18 de       	rcall	.-976    	; 0xa112 <get_fat.isra.10>
    a4e2:	61 30       	cpi	r22, 0x01	; 1
    a4e4:	71 05       	cpc	r23, r1
    a4e6:	81 05       	cpc	r24, r1
    a4e8:	91 05       	cpc	r25, r1
    a4ea:	09 f4       	brne	.+2      	; 0xa4ee <create_chain+0xf2>
    a4ec:	9d c0       	rjmp	.+314    	; 0xa628 <create_chain+0x22c>
    a4ee:	6f 3f       	cpi	r22, 0xFF	; 255
    a4f0:	ff ef       	ldi	r31, 0xFF	; 255
    a4f2:	7f 07       	cpc	r23, r31
    a4f4:	8f 07       	cpc	r24, r31
    a4f6:	9f 07       	cpc	r25, r31
    a4f8:	09 f4       	brne	.+2      	; 0xa4fc <create_chain+0x100>
    a4fa:	b2 cf       	rjmp	.-156    	; 0xa460 <create_chain+0x64>
    a4fc:	67 2b       	or	r22, r23
    a4fe:	68 2b       	or	r22, r24
    a500:	69 2b       	or	r22, r25
    a502:	a9 f0       	breq	.+42     	; 0xa52e <create_chain+0x132>
    a504:	8d 85       	ldd	r24, Y+13	; 0x0d
    a506:	9e 85       	ldd	r25, Y+14	; 0x0e
    a508:	af 85       	ldd	r26, Y+15	; 0x0f
    a50a:	b8 89       	ldd	r27, Y+16	; 0x10
    a50c:	82 30       	cpi	r24, 0x02	; 2
    a50e:	91 05       	cpc	r25, r1
    a510:	a1 05       	cpc	r26, r1
    a512:	b1 05       	cpc	r27, r1
    a514:	88 f0       	brcs	.+34     	; 0xa538 <create_chain+0x13c>
    a516:	49 8d       	ldd	r20, Y+25	; 0x19
    a518:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a51a:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a51c:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a51e:	84 17       	cp	r24, r20
    a520:	95 07       	cpc	r25, r21
    a522:	a6 07       	cpc	r26, r22
    a524:	b7 07       	cpc	r27, r23
    a526:	40 f4       	brcc	.+16     	; 0xa538 <create_chain+0x13c>
    a528:	4c 01       	movw	r8, r24
    a52a:	5d 01       	movw	r10, r26
    a52c:	05 c0       	rjmp	.+10     	; 0xa538 <create_chain+0x13c>
    a52e:	c1 14       	cp	r12, r1
    a530:	d1 04       	cpc	r13, r1
    a532:	e1 04       	cpc	r14, r1
    a534:	f1 04       	cpc	r15, r1
    a536:	c9 f5       	brne	.+114    	; 0xa5aa <create_chain+0x1ae>
    a538:	75 01       	movw	r14, r10
    a53a:	64 01       	movw	r12, r8
    a53c:	2f ef       	ldi	r18, 0xFF	; 255
    a53e:	c2 1a       	sub	r12, r18
    a540:	d2 0a       	sbc	r13, r18
    a542:	e2 0a       	sbc	r14, r18
    a544:	f2 0a       	sbc	r15, r18
    a546:	89 8d       	ldd	r24, Y+25	; 0x19
    a548:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a54a:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a54c:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a54e:	c8 16       	cp	r12, r24
    a550:	d9 06       	cpc	r13, r25
    a552:	ea 06       	cpc	r14, r26
    a554:	fb 06       	cpc	r15, r27
    a556:	60 f0       	brcs	.+24     	; 0xa570 <create_chain+0x174>
    a558:	82 e0       	ldi	r24, 0x02	; 2
    a55a:	88 16       	cp	r8, r24
    a55c:	91 04       	cpc	r9, r1
    a55e:	a1 04       	cpc	r10, r1
    a560:	b1 04       	cpc	r11, r1
    a562:	08 f4       	brcc	.+2      	; 0xa566 <create_chain+0x16a>
    a564:	9b cf       	rjmp	.-202    	; 0xa49c <create_chain+0xa0>
    a566:	82 e0       	ldi	r24, 0x02	; 2
    a568:	c8 2e       	mov	r12, r24
    a56a:	d1 2c       	mov	r13, r1
    a56c:	e1 2c       	mov	r14, r1
    a56e:	f1 2c       	mov	r15, r1
    a570:	b7 01       	movw	r22, r14
    a572:	a6 01       	movw	r20, r12
    a574:	f8 01       	movw	r30, r16
    a576:	80 81       	ld	r24, Z
    a578:	91 81       	ldd	r25, Z+1	; 0x01
    a57a:	cb dd       	rcall	.-1130   	; 0xa112 <get_fat.isra.10>
    a57c:	61 15       	cp	r22, r1
    a57e:	71 05       	cpc	r23, r1
    a580:	81 05       	cpc	r24, r1
    a582:	91 05       	cpc	r25, r1
    a584:	91 f0       	breq	.+36     	; 0xa5aa <create_chain+0x1ae>
    a586:	61 30       	cpi	r22, 0x01	; 1
    a588:	71 05       	cpc	r23, r1
    a58a:	81 05       	cpc	r24, r1
    a58c:	91 05       	cpc	r25, r1
    a58e:	09 f4       	brne	.+2      	; 0xa592 <create_chain+0x196>
    a590:	4b c0       	rjmp	.+150    	; 0xa628 <create_chain+0x22c>
    a592:	6f 3f       	cpi	r22, 0xFF	; 255
    a594:	7f 4f       	sbci	r23, 0xFF	; 255
    a596:	8f 4f       	sbci	r24, 0xFF	; 255
    a598:	9f 4f       	sbci	r25, 0xFF	; 255
    a59a:	09 f4       	brne	.+2      	; 0xa59e <create_chain+0x1a2>
    a59c:	61 cf       	rjmp	.-318    	; 0xa460 <create_chain+0x64>
    a59e:	c8 14       	cp	r12, r8
    a5a0:	d9 04       	cpc	r13, r9
    a5a2:	ea 04       	cpc	r14, r10
    a5a4:	fb 04       	cpc	r15, r11
    a5a6:	51 f6       	brne	.-108    	; 0xa53c <create_chain+0x140>
    a5a8:	79 cf       	rjmp	.-270    	; 0xa49c <create_chain+0xa0>
    a5aa:	0f ef       	ldi	r16, 0xFF	; 255
    a5ac:	1f ef       	ldi	r17, 0xFF	; 255
    a5ae:	98 01       	movw	r18, r16
    a5b0:	b7 01       	movw	r22, r14
    a5b2:	a6 01       	movw	r20, r12
    a5b4:	ce 01       	movw	r24, r28
    a5b6:	b2 dc       	rcall	.-1692   	; 0x9f1c <put_fat>
    a5b8:	00 97       	sbiw	r24, 0x00	; 0
    a5ba:	99 f5       	brne	.+102    	; 0xa622 <create_chain+0x226>
    a5bc:	41 14       	cp	r4, r1
    a5be:	51 04       	cpc	r5, r1
    a5c0:	61 04       	cpc	r6, r1
    a5c2:	71 04       	cpc	r7, r1
    a5c4:	e9 f4       	brne	.+58     	; 0xa600 <create_chain+0x204>
    a5c6:	cd 86       	std	Y+13, r12	; 0x0d
    a5c8:	de 86       	std	Y+14, r13	; 0x0e
    a5ca:	ef 86       	std	Y+15, r14	; 0x0f
    a5cc:	f8 8a       	std	Y+16, r15	; 0x10
    a5ce:	89 89       	ldd	r24, Y+17	; 0x11
    a5d0:	9a 89       	ldd	r25, Y+18	; 0x12
    a5d2:	ab 89       	ldd	r26, Y+19	; 0x13
    a5d4:	bc 89       	ldd	r27, Y+20	; 0x14
    a5d6:	49 8d       	ldd	r20, Y+25	; 0x19
    a5d8:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a5da:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a5dc:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a5de:	42 50       	subi	r20, 0x02	; 2
    a5e0:	51 09       	sbc	r21, r1
    a5e2:	61 09       	sbc	r22, r1
    a5e4:	71 09       	sbc	r23, r1
    a5e6:	48 17       	cp	r20, r24
    a5e8:	59 07       	cpc	r21, r25
    a5ea:	6a 07       	cpc	r22, r26
    a5ec:	7b 07       	cpc	r23, r27
    a5ee:	88 f0       	brcs	.+34     	; 0xa612 <create_chain+0x216>
    a5f0:	01 97       	sbiw	r24, 0x01	; 1
    a5f2:	a1 09       	sbc	r26, r1
    a5f4:	b1 09       	sbc	r27, r1
    a5f6:	89 8b       	std	Y+17, r24	; 0x11
    a5f8:	9a 8b       	std	Y+18, r25	; 0x12
    a5fa:	ab 8b       	std	Y+19, r26	; 0x13
    a5fc:	bc 8b       	std	Y+20, r27	; 0x14
    a5fe:	09 c0       	rjmp	.+18     	; 0xa612 <create_chain+0x216>
    a600:	97 01       	movw	r18, r14
    a602:	86 01       	movw	r16, r12
    a604:	b3 01       	movw	r22, r6
    a606:	a2 01       	movw	r20, r4
    a608:	ce 01       	movw	r24, r28
    a60a:	88 dc       	rcall	.-1776   	; 0x9f1c <put_fat>
    a60c:	00 97       	sbiw	r24, 0x00	; 0
    a60e:	d9 f2       	breq	.-74     	; 0xa5c6 <create_chain+0x1ca>
    a610:	08 c0       	rjmp	.+16     	; 0xa622 <create_chain+0x226>
    a612:	8c 81       	ldd	r24, Y+4	; 0x04
    a614:	81 60       	ori	r24, 0x01	; 1
    a616:	8c 83       	std	Y+4, r24	; 0x04
    a618:	4c 2d       	mov	r20, r12
    a61a:	3d 2d       	mov	r19, r13
    a61c:	2e 2d       	mov	r18, r14
    a61e:	9f 2d       	mov	r25, r15
    a620:	0b c0       	rjmp	.+22     	; 0xa638 <create_chain+0x23c>
    a622:	01 97       	sbiw	r24, 0x01	; 1
    a624:	09 f4       	brne	.+2      	; 0xa628 <create_chain+0x22c>
    a626:	1c cf       	rjmp	.-456    	; 0xa460 <create_chain+0x64>
    a628:	41 e0       	ldi	r20, 0x01	; 1
    a62a:	30 e0       	ldi	r19, 0x00	; 0
    a62c:	20 e0       	ldi	r18, 0x00	; 0
    a62e:	90 e0       	ldi	r25, 0x00	; 0
    a630:	03 c0       	rjmp	.+6      	; 0xa638 <create_chain+0x23c>
    a632:	46 2f       	mov	r20, r22
    a634:	37 2f       	mov	r19, r23
    a636:	28 2f       	mov	r18, r24
    a638:	64 2f       	mov	r22, r20
    a63a:	73 2f       	mov	r23, r19
    a63c:	82 2f       	mov	r24, r18
    a63e:	cd b7       	in	r28, 0x3d	; 61
    a640:	de b7       	in	r29, 0x3e	; 62
    a642:	e0 e1       	ldi	r30, 0x10	; 16
    a644:	0c 94 e6 e3 	jmp	0x1c7cc	; 0x1c7cc <__epilogue_restores__+0x4>

0000a648 <remove_chain>:
    a648:	4f 92       	push	r4
    a64a:	5f 92       	push	r5
    a64c:	6f 92       	push	r6
    a64e:	7f 92       	push	r7
    a650:	af 92       	push	r10
    a652:	bf 92       	push	r11
    a654:	cf 92       	push	r12
    a656:	df 92       	push	r13
    a658:	ef 92       	push	r14
    a65a:	ff 92       	push	r15
    a65c:	0f 93       	push	r16
    a65e:	1f 93       	push	r17
    a660:	cf 93       	push	r28
    a662:	df 93       	push	r29
    a664:	5c 01       	movw	r10, r24
    a666:	6a 01       	movw	r12, r20
    a668:	7b 01       	movw	r14, r22
    a66a:	b9 01       	movw	r22, r18
    a66c:	a8 01       	movw	r20, r16
    a66e:	22 e0       	ldi	r18, 0x02	; 2
    a670:	c2 16       	cp	r12, r18
    a672:	d1 04       	cpc	r13, r1
    a674:	e1 04       	cpc	r14, r1
    a676:	f1 04       	cpc	r15, r1
    a678:	10 f4       	brcc	.+4      	; 0xa67e <remove_chain+0x36>
    a67a:	22 e0       	ldi	r18, 0x02	; 2
    a67c:	27 c0       	rjmp	.+78     	; 0xa6cc <remove_chain+0x84>
    a67e:	fc 01       	movw	r30, r24
    a680:	c0 81       	ld	r28, Z
    a682:	d1 81       	ldd	r29, Z+1	; 0x01
    a684:	89 8d       	ldd	r24, Y+25	; 0x19
    a686:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a688:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a68a:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a68c:	c8 16       	cp	r12, r24
    a68e:	d9 06       	cpc	r13, r25
    a690:	ea 06       	cpc	r14, r26
    a692:	fb 06       	cpc	r15, r27
    a694:	90 f7       	brcc	.-28     	; 0xa67a <remove_chain+0x32>
    a696:	41 15       	cp	r20, r1
    a698:	51 05       	cpc	r21, r1
    a69a:	61 05       	cpc	r22, r1
    a69c:	71 05       	cpc	r23, r1
    a69e:	41 f0       	breq	.+16     	; 0xa6b0 <remove_chain+0x68>
    a6a0:	0f ef       	ldi	r16, 0xFF	; 255
    a6a2:	1f ef       	ldi	r17, 0xFF	; 255
    a6a4:	98 01       	movw	r18, r16
    a6a6:	ce 01       	movw	r24, r28
    a6a8:	39 dc       	rcall	.-1934   	; 0x9f1c <put_fat>
    a6aa:	00 97       	sbiw	r24, 0x00	; 0
    a6ac:	09 f0       	breq	.+2      	; 0xa6b0 <remove_chain+0x68>
    a6ae:	4c c0       	rjmp	.+152    	; 0xa748 <remove_chain+0x100>
    a6b0:	b7 01       	movw	r22, r14
    a6b2:	a6 01       	movw	r20, r12
    a6b4:	f5 01       	movw	r30, r10
    a6b6:	80 81       	ld	r24, Z
    a6b8:	91 81       	ldd	r25, Z+1	; 0x01
    a6ba:	2b dd       	rcall	.-1450   	; 0xa112 <get_fat.isra.10>
    a6bc:	2b 01       	movw	r4, r22
    a6be:	3c 01       	movw	r6, r24
    a6c0:	61 15       	cp	r22, r1
    a6c2:	71 05       	cpc	r23, r1
    a6c4:	81 05       	cpc	r24, r1
    a6c6:	91 05       	cpc	r25, r1
    a6c8:	19 f4       	brne	.+6      	; 0xa6d0 <remove_chain+0x88>
    a6ca:	20 e0       	ldi	r18, 0x00	; 0
    a6cc:	90 e0       	ldi	r25, 0x00	; 0
    a6ce:	3d c0       	rjmp	.+122    	; 0xa74a <remove_chain+0x102>
    a6d0:	61 30       	cpi	r22, 0x01	; 1
    a6d2:	71 05       	cpc	r23, r1
    a6d4:	81 05       	cpc	r24, r1
    a6d6:	91 05       	cpc	r25, r1
    a6d8:	81 f2       	breq	.-96     	; 0xa67a <remove_chain+0x32>
    a6da:	6f 3f       	cpi	r22, 0xFF	; 255
    a6dc:	7f 4f       	sbci	r23, 0xFF	; 255
    a6de:	8f 4f       	sbci	r24, 0xFF	; 255
    a6e0:	9f 4f       	sbci	r25, 0xFF	; 255
    a6e2:	81 f1       	breq	.+96     	; 0xa744 <remove_chain+0xfc>
    a6e4:	00 e0       	ldi	r16, 0x00	; 0
    a6e6:	10 e0       	ldi	r17, 0x00	; 0
    a6e8:	98 01       	movw	r18, r16
    a6ea:	b7 01       	movw	r22, r14
    a6ec:	a6 01       	movw	r20, r12
    a6ee:	ce 01       	movw	r24, r28
    a6f0:	15 dc       	rcall	.-2006   	; 0x9f1c <put_fat>
    a6f2:	00 97       	sbiw	r24, 0x00	; 0
    a6f4:	49 f5       	brne	.+82     	; 0xa748 <remove_chain+0x100>
    a6f6:	89 89       	ldd	r24, Y+17	; 0x11
    a6f8:	9a 89       	ldd	r25, Y+18	; 0x12
    a6fa:	ab 89       	ldd	r26, Y+19	; 0x13
    a6fc:	bc 89       	ldd	r27, Y+20	; 0x14
    a6fe:	49 8d       	ldd	r20, Y+25	; 0x19
    a700:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a702:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a704:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a706:	6a 01       	movw	r12, r20
    a708:	7b 01       	movw	r14, r22
    a70a:	e2 e0       	ldi	r30, 0x02	; 2
    a70c:	ce 1a       	sub	r12, r30
    a70e:	d1 08       	sbc	r13, r1
    a710:	e1 08       	sbc	r14, r1
    a712:	f1 08       	sbc	r15, r1
    a714:	8c 15       	cp	r24, r12
    a716:	9d 05       	cpc	r25, r13
    a718:	ae 05       	cpc	r26, r14
    a71a:	bf 05       	cpc	r27, r15
    a71c:	50 f4       	brcc	.+20     	; 0xa732 <remove_chain+0xea>
    a71e:	01 96       	adiw	r24, 0x01	; 1
    a720:	a1 1d       	adc	r26, r1
    a722:	b1 1d       	adc	r27, r1
    a724:	89 8b       	std	Y+17, r24	; 0x11
    a726:	9a 8b       	std	Y+18, r25	; 0x12
    a728:	ab 8b       	std	Y+19, r26	; 0x13
    a72a:	bc 8b       	std	Y+20, r27	; 0x14
    a72c:	8c 81       	ldd	r24, Y+4	; 0x04
    a72e:	81 60       	ori	r24, 0x01	; 1
    a730:	8c 83       	std	Y+4, r24	; 0x04
    a732:	73 01       	movw	r14, r6
    a734:	62 01       	movw	r12, r4
    a736:	44 16       	cp	r4, r20
    a738:	55 06       	cpc	r5, r21
    a73a:	66 06       	cpc	r6, r22
    a73c:	77 06       	cpc	r7, r23
    a73e:	08 f4       	brcc	.+2      	; 0xa742 <remove_chain+0xfa>
    a740:	b7 cf       	rjmp	.-146    	; 0xa6b0 <remove_chain+0x68>
    a742:	c3 cf       	rjmp	.-122    	; 0xa6ca <remove_chain+0x82>
    a744:	21 e0       	ldi	r18, 0x01	; 1
    a746:	c2 cf       	rjmp	.-124    	; 0xa6cc <remove_chain+0x84>
    a748:	28 2f       	mov	r18, r24
    a74a:	82 2f       	mov	r24, r18
    a74c:	df 91       	pop	r29
    a74e:	cf 91       	pop	r28
    a750:	1f 91       	pop	r17
    a752:	0f 91       	pop	r16
    a754:	ff 90       	pop	r15
    a756:	ef 90       	pop	r14
    a758:	df 90       	pop	r13
    a75a:	cf 90       	pop	r12
    a75c:	bf 90       	pop	r11
    a75e:	af 90       	pop	r10
    a760:	7f 90       	pop	r7
    a762:	6f 90       	pop	r6
    a764:	5f 90       	pop	r5
    a766:	4f 90       	pop	r4
    a768:	08 95       	ret

0000a76a <dir_next>:
    a76a:	4f 92       	push	r4
    a76c:	5f 92       	push	r5
    a76e:	6f 92       	push	r6
    a770:	7f 92       	push	r7
    a772:	af 92       	push	r10
    a774:	bf 92       	push	r11
    a776:	cf 92       	push	r12
    a778:	df 92       	push	r13
    a77a:	ef 92       	push	r14
    a77c:	ff 92       	push	r15
    a77e:	0f 93       	push	r16
    a780:	1f 93       	push	r17
    a782:	cf 93       	push	r28
    a784:	df 93       	push	r29
    a786:	ec 01       	movw	r28, r24
    a788:	08 81       	ld	r16, Y
    a78a:	19 81       	ldd	r17, Y+1	; 0x01
    a78c:	ce 84       	ldd	r12, Y+14	; 0x0e
    a78e:	df 84       	ldd	r13, Y+15	; 0x0f
    a790:	e8 88       	ldd	r14, Y+16	; 0x10
    a792:	f9 88       	ldd	r15, Y+17	; 0x11
    a794:	80 e2       	ldi	r24, 0x20	; 32
    a796:	c8 0e       	add	r12, r24
    a798:	d1 1c       	adc	r13, r1
    a79a:	e1 1c       	adc	r14, r1
    a79c:	f1 1c       	adc	r15, r1
    a79e:	c1 14       	cp	r12, r1
    a7a0:	d1 04       	cpc	r13, r1
    a7a2:	e0 e2       	ldi	r30, 0x20	; 32
    a7a4:	ee 06       	cpc	r14, r30
    a7a6:	f1 04       	cpc	r15, r1
    a7a8:	20 f0       	brcs	.+8      	; 0xa7b2 <dir_next+0x48>
    a7aa:	1e 8a       	std	Y+22, r1	; 0x16
    a7ac:	1f 8a       	std	Y+23, r1	; 0x17
    a7ae:	18 8e       	std	Y+24, r1	; 0x18
    a7b0:	19 8e       	std	Y+25, r1	; 0x19
    a7b2:	8e 89       	ldd	r24, Y+22	; 0x16
    a7b4:	9f 89       	ldd	r25, Y+23	; 0x17
    a7b6:	a8 8d       	ldd	r26, Y+24	; 0x18
    a7b8:	b9 8d       	ldd	r27, Y+25	; 0x19
    a7ba:	00 97       	sbiw	r24, 0x00	; 0
    a7bc:	a1 05       	cpc	r26, r1
    a7be:	b1 05       	cpc	r27, r1
    a7c0:	09 f4       	brne	.+2      	; 0xa7c4 <dir_next+0x5a>
    a7c2:	a7 c0       	rjmp	.+334    	; 0xa912 <dir_next+0x1a8>
    a7c4:	5b 01       	movw	r10, r22
    a7c6:	b7 01       	movw	r22, r14
    a7c8:	a6 01       	movw	r20, r12
    a7ca:	51 70       	andi	r21, 0x01	; 1
    a7cc:	66 27       	eor	r22, r22
    a7ce:	77 27       	eor	r23, r23
    a7d0:	45 2b       	or	r20, r21
    a7d2:	46 2b       	or	r20, r22
    a7d4:	47 2b       	or	r20, r23
    a7d6:	09 f0       	breq	.+2      	; 0xa7da <dir_next+0x70>
    a7d8:	8d c0       	rjmp	.+282    	; 0xa8f4 <dir_next+0x18a>
    a7da:	01 96       	adiw	r24, 0x01	; 1
    a7dc:	a1 1d       	adc	r26, r1
    a7de:	b1 1d       	adc	r27, r1
    a7e0:	8e 8b       	std	Y+22, r24	; 0x16
    a7e2:	9f 8b       	std	Y+23, r25	; 0x17
    a7e4:	a8 8f       	std	Y+24, r26	; 0x18
    a7e6:	b9 8f       	std	Y+25, r27	; 0x19
    a7e8:	4a 89       	ldd	r20, Y+18	; 0x12
    a7ea:	5b 89       	ldd	r21, Y+19	; 0x13
    a7ec:	6c 89       	ldd	r22, Y+20	; 0x14
    a7ee:	7d 89       	ldd	r23, Y+21	; 0x15
    a7f0:	f8 01       	movw	r30, r16
    a7f2:	41 15       	cp	r20, r1
    a7f4:	51 05       	cpc	r21, r1
    a7f6:	61 05       	cpc	r22, r1
    a7f8:	71 05       	cpc	r23, r1
    a7fa:	c1 f4       	brne	.+48     	; 0xa82c <dir_next+0xc2>
    a7fc:	87 81       	ldd	r24, Z+7	; 0x07
    a7fe:	90 85       	ldd	r25, Z+8	; 0x08
    a800:	a0 e0       	ldi	r26, 0x00	; 0
    a802:	b0 e0       	ldi	r27, 0x00	; 0
    a804:	b7 01       	movw	r22, r14
    a806:	a6 01       	movw	r20, r12
    a808:	35 e0       	ldi	r19, 0x05	; 5
    a80a:	76 95       	lsr	r23
    a80c:	67 95       	ror	r22
    a80e:	57 95       	ror	r21
    a810:	47 95       	ror	r20
    a812:	3a 95       	dec	r19
    a814:	d1 f7       	brne	.-12     	; 0xa80a <dir_next+0xa0>
    a816:	48 17       	cp	r20, r24
    a818:	59 07       	cpc	r21, r25
    a81a:	6a 07       	cpc	r22, r26
    a81c:	7b 07       	cpc	r23, r27
    a81e:	08 f4       	brcc	.+2      	; 0xa822 <dir_next+0xb8>
    a820:	69 c0       	rjmp	.+210    	; 0xa8f4 <dir_next+0x18a>
    a822:	1e 8a       	std	Y+22, r1	; 0x16
    a824:	1f 8a       	std	Y+23, r1	; 0x17
    a826:	18 8e       	std	Y+24, r1	; 0x18
    a828:	19 8e       	std	Y+25, r1	; 0x19
    a82a:	73 c0       	rjmp	.+230    	; 0xa912 <dir_next+0x1a8>
    a82c:	81 85       	ldd	r24, Z+9	; 0x09
    a82e:	92 85       	ldd	r25, Z+10	; 0x0a
    a830:	01 97       	sbiw	r24, 0x01	; 1
    a832:	a0 e0       	ldi	r26, 0x00	; 0
    a834:	b0 e0       	ldi	r27, 0x00	; 0
    a836:	26 01       	movw	r4, r12
    a838:	37 01       	movw	r6, r14
    a83a:	29 e0       	ldi	r18, 0x09	; 9
    a83c:	76 94       	lsr	r7
    a83e:	67 94       	ror	r6
    a840:	57 94       	ror	r5
    a842:	47 94       	ror	r4
    a844:	2a 95       	dec	r18
    a846:	d1 f7       	brne	.-12     	; 0xa83c <dir_next+0xd2>
    a848:	84 21       	and	r24, r4
    a84a:	95 21       	and	r25, r5
    a84c:	a6 21       	and	r26, r6
    a84e:	b7 21       	and	r27, r7
    a850:	89 2b       	or	r24, r25
    a852:	8a 2b       	or	r24, r26
    a854:	8b 2b       	or	r24, r27
    a856:	09 f0       	breq	.+2      	; 0xa85a <dir_next+0xf0>
    a858:	4d c0       	rjmp	.+154    	; 0xa8f4 <dir_next+0x18a>
    a85a:	c8 01       	movw	r24, r16
    a85c:	5a dc       	rcall	.-1868   	; 0xa112 <get_fat.isra.10>
    a85e:	2b 01       	movw	r4, r22
    a860:	3c 01       	movw	r6, r24
    a862:	62 30       	cpi	r22, 0x02	; 2
    a864:	71 05       	cpc	r23, r1
    a866:	81 05       	cpc	r24, r1
    a868:	91 05       	cpc	r25, r1
    a86a:	18 f4       	brcc	.+6      	; 0xa872 <dir_next+0x108>
    a86c:	82 e0       	ldi	r24, 0x02	; 2
    a86e:	90 e0       	ldi	r25, 0x00	; 0
    a870:	55 c0       	rjmp	.+170    	; 0xa91c <dir_next+0x1b2>
    a872:	8f ef       	ldi	r24, 0xFF	; 255
    a874:	48 16       	cp	r4, r24
    a876:	58 06       	cpc	r5, r24
    a878:	68 06       	cpc	r6, r24
    a87a:	78 06       	cpc	r7, r24
    a87c:	19 f4       	brne	.+6      	; 0xa884 <dir_next+0x11a>
    a87e:	81 e0       	ldi	r24, 0x01	; 1
    a880:	90 e0       	ldi	r25, 0x00	; 0
    a882:	4c c0       	rjmp	.+152    	; 0xa91c <dir_next+0x1b2>
    a884:	f8 01       	movw	r30, r16
    a886:	81 8d       	ldd	r24, Z+25	; 0x19
    a888:	92 8d       	ldd	r25, Z+26	; 0x1a
    a88a:	a3 8d       	ldd	r26, Z+27	; 0x1b
    a88c:	b4 8d       	ldd	r27, Z+28	; 0x1c
    a88e:	48 16       	cp	r4, r24
    a890:	59 06       	cpc	r5, r25
    a892:	6a 06       	cpc	r6, r26
    a894:	7b 06       	cpc	r7, r27
    a896:	08 f1       	brcs	.+66     	; 0xa8da <dir_next+0x170>
    a898:	ab 28       	or	r10, r11
    a89a:	19 f2       	breq	.-122    	; 0xa822 <dir_next+0xb8>
    a89c:	4a 89       	ldd	r20, Y+18	; 0x12
    a89e:	5b 89       	ldd	r21, Y+19	; 0x13
    a8a0:	6c 89       	ldd	r22, Y+20	; 0x14
    a8a2:	7d 89       	ldd	r23, Y+21	; 0x15
    a8a4:	ce 01       	movw	r24, r28
    a8a6:	aa dd       	rcall	.-1196   	; 0xa3fc <create_chain>
    a8a8:	2b 01       	movw	r4, r22
    a8aa:	3c 01       	movw	r6, r24
    a8ac:	61 15       	cp	r22, r1
    a8ae:	71 05       	cpc	r23, r1
    a8b0:	81 05       	cpc	r24, r1
    a8b2:	91 05       	cpc	r25, r1
    a8b4:	89 f1       	breq	.+98     	; 0xa918 <dir_next+0x1ae>
    a8b6:	61 30       	cpi	r22, 0x01	; 1
    a8b8:	71 05       	cpc	r23, r1
    a8ba:	81 05       	cpc	r24, r1
    a8bc:	91 05       	cpc	r25, r1
    a8be:	b1 f2       	breq	.-84     	; 0xa86c <dir_next+0x102>
    a8c0:	8f ef       	ldi	r24, 0xFF	; 255
    a8c2:	48 16       	cp	r4, r24
    a8c4:	58 06       	cpc	r5, r24
    a8c6:	68 06       	cpc	r6, r24
    a8c8:	78 06       	cpc	r7, r24
    a8ca:	c9 f2       	breq	.-78     	; 0xa87e <dir_next+0x114>
    a8cc:	b3 01       	movw	r22, r6
    a8ce:	a2 01       	movw	r20, r4
    a8d0:	c8 01       	movw	r24, r16
    a8d2:	0e 94 11 4c 	call	0x9822	; 0x9822 <dir_clear>
    a8d6:	89 2b       	or	r24, r25
    a8d8:	91 f6       	brne	.-92     	; 0xa87e <dir_next+0x114>
    a8da:	4a 8a       	std	Y+18, r4	; 0x12
    a8dc:	5b 8a       	std	Y+19, r5	; 0x13
    a8de:	6c 8a       	std	Y+20, r6	; 0x14
    a8e0:	7d 8a       	std	Y+21, r7	; 0x15
    a8e2:	b3 01       	movw	r22, r6
    a8e4:	a2 01       	movw	r20, r4
    a8e6:	c8 01       	movw	r24, r16
    a8e8:	0e 94 97 48 	call	0x912e	; 0x912e <clst2sect>
    a8ec:	6e 8b       	std	Y+22, r22	; 0x16
    a8ee:	7f 8b       	std	Y+23, r23	; 0x17
    a8f0:	88 8f       	std	Y+24, r24	; 0x18
    a8f2:	99 8f       	std	Y+25, r25	; 0x19
    a8f4:	ce 86       	std	Y+14, r12	; 0x0e
    a8f6:	df 86       	std	Y+15, r13	; 0x0f
    a8f8:	e8 8a       	std	Y+16, r14	; 0x10
    a8fa:	f9 8a       	std	Y+17, r15	; 0x11
    a8fc:	0b 5c       	subi	r16, 0xCB	; 203
    a8fe:	1f 4f       	sbci	r17, 0xFF	; 255
    a900:	e1 e0       	ldi	r30, 0x01	; 1
    a902:	de 22       	and	r13, r30
    a904:	c0 0e       	add	r12, r16
    a906:	d1 1e       	adc	r13, r17
    a908:	db 8e       	std	Y+27, r13	; 0x1b
    a90a:	ca 8e       	std	Y+26, r12	; 0x1a
    a90c:	80 e0       	ldi	r24, 0x00	; 0
    a90e:	90 e0       	ldi	r25, 0x00	; 0
    a910:	05 c0       	rjmp	.+10     	; 0xa91c <dir_next+0x1b2>
    a912:	84 e0       	ldi	r24, 0x04	; 4
    a914:	90 e0       	ldi	r25, 0x00	; 0
    a916:	02 c0       	rjmp	.+4      	; 0xa91c <dir_next+0x1b2>
    a918:	87 e0       	ldi	r24, 0x07	; 7
    a91a:	90 e0       	ldi	r25, 0x00	; 0
    a91c:	df 91       	pop	r29
    a91e:	cf 91       	pop	r28
    a920:	1f 91       	pop	r17
    a922:	0f 91       	pop	r16
    a924:	ff 90       	pop	r15
    a926:	ef 90       	pop	r14
    a928:	df 90       	pop	r13
    a92a:	cf 90       	pop	r12
    a92c:	bf 90       	pop	r11
    a92e:	af 90       	pop	r10
    a930:	7f 90       	pop	r7
    a932:	6f 90       	pop	r6
    a934:	5f 90       	pop	r5
    a936:	4f 90       	pop	r4
    a938:	08 95       	ret

0000a93a <dir_alloc>:
    a93a:	a0 e0       	ldi	r26, 0x00	; 0
    a93c:	b0 e0       	ldi	r27, 0x00	; 0
    a93e:	e3 ea       	ldi	r30, 0xA3	; 163
    a940:	f4 e5       	ldi	r31, 0x54	; 84
    a942:	0c 94 d2 e3 	jmp	0x1c7a4	; 0x1c7a4 <__prologue_saves__+0x14>
    a946:	ec 01       	movw	r28, r24
    a948:	6b 01       	movw	r12, r22
    a94a:	e8 80       	ld	r14, Y
    a94c:	f9 80       	ldd	r15, Y+1	; 0x01
    a94e:	40 e0       	ldi	r20, 0x00	; 0
    a950:	50 e0       	ldi	r21, 0x00	; 0
    a952:	ba 01       	movw	r22, r20
    a954:	92 dc       	rcall	.-1756   	; 0xa27a <dir_sdi>
    a956:	00 97       	sbiw	r24, 0x00	; 0
    a958:	f9 f4       	brne	.+62     	; 0xa998 <dir_alloc+0x5e>
    a95a:	00 e0       	ldi	r16, 0x00	; 0
    a95c:	10 e0       	ldi	r17, 0x00	; 0
    a95e:	4e 89       	ldd	r20, Y+22	; 0x16
    a960:	5f 89       	ldd	r21, Y+23	; 0x17
    a962:	68 8d       	ldd	r22, Y+24	; 0x18
    a964:	79 8d       	ldd	r23, Y+25	; 0x19
    a966:	c7 01       	movw	r24, r14
    a968:	04 d8       	rcall	.-4088   	; 0x9972 <move_window>
    a96a:	00 97       	sbiw	r24, 0x00	; 0
    a96c:	a9 f4       	brne	.+42     	; 0xa998 <dir_alloc+0x5e>
    a96e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    a970:	fb 8d       	ldd	r31, Y+27	; 0x1b
    a972:	20 81       	ld	r18, Z
    a974:	25 3e       	cpi	r18, 0xE5	; 229
    a976:	11 f0       	breq	.+4      	; 0xa97c <dir_alloc+0x42>
    a978:	21 11       	cpse	r18, r1
    a97a:	06 c0       	rjmp	.+12     	; 0xa988 <dir_alloc+0x4e>
    a97c:	0f 5f       	subi	r16, 0xFF	; 255
    a97e:	1f 4f       	sbci	r17, 0xFF	; 255
    a980:	0c 15       	cp	r16, r12
    a982:	1d 05       	cpc	r17, r13
    a984:	19 f4       	brne	.+6      	; 0xa98c <dir_alloc+0x52>
    a986:	0d c0       	rjmp	.+26     	; 0xa9a2 <dir_alloc+0x68>
    a988:	00 e0       	ldi	r16, 0x00	; 0
    a98a:	10 e0       	ldi	r17, 0x00	; 0
    a98c:	61 e0       	ldi	r22, 0x01	; 1
    a98e:	70 e0       	ldi	r23, 0x00	; 0
    a990:	ce 01       	movw	r24, r28
    a992:	eb de       	rcall	.-554    	; 0xa76a <dir_next>
    a994:	00 97       	sbiw	r24, 0x00	; 0
    a996:	19 f3       	breq	.-58     	; 0xa95e <dir_alloc+0x24>
    a998:	84 30       	cpi	r24, 0x04	; 4
    a99a:	91 05       	cpc	r25, r1
    a99c:	11 f4       	brne	.+4      	; 0xa9a2 <dir_alloc+0x68>
    a99e:	87 e0       	ldi	r24, 0x07	; 7
    a9a0:	90 e0       	ldi	r25, 0x00	; 0
    a9a2:	cd b7       	in	r28, 0x3d	; 61
    a9a4:	de b7       	in	r29, 0x3e	; 62
    a9a6:	e8 e0       	ldi	r30, 0x08	; 8
    a9a8:	0c 94 ee e3 	jmp	0x1c7dc	; 0x1c7dc <__epilogue_restores__+0x14>

0000a9ac <dir_read>:
    a9ac:	a0 e0       	ldi	r26, 0x00	; 0
    a9ae:	b0 e0       	ldi	r27, 0x00	; 0
    a9b0:	ec ed       	ldi	r30, 0xDC	; 220
    a9b2:	f4 e5       	ldi	r31, 0x54	; 84
    a9b4:	0c 94 ce e3 	jmp	0x1c79c	; 0x1c79c <__prologue_saves__+0xc>
    a9b8:	ec 01       	movw	r28, r24
    a9ba:	7b 01       	movw	r14, r22
    a9bc:	a8 80       	ld	r10, Y
    a9be:	b9 80       	ldd	r11, Y+1	; 0x01
    a9c0:	dd 24       	eor	r13, r13
    a9c2:	da 94       	dec	r13
    a9c4:	1f ef       	ldi	r17, 0xFF	; 255
    a9c6:	84 e0       	ldi	r24, 0x04	; 4
    a9c8:	90 e0       	ldi	r25, 0x00	; 0
    a9ca:	fd e0       	ldi	r31, 0x0D	; 13
    a9cc:	cf 2e       	mov	r12, r31
    a9ce:	4e 89       	ldd	r20, Y+22	; 0x16
    a9d0:	5f 89       	ldd	r21, Y+23	; 0x17
    a9d2:	68 8d       	ldd	r22, Y+24	; 0x18
    a9d4:	79 8d       	ldd	r23, Y+25	; 0x19
    a9d6:	41 15       	cp	r20, r1
    a9d8:	51 05       	cpc	r21, r1
    a9da:	61 05       	cpc	r22, r1
    a9dc:	71 05       	cpc	r23, r1
    a9de:	09 f4       	brne	.+2      	; 0xa9e2 <dir_read+0x36>
    a9e0:	9a c0       	rjmp	.+308    	; 0xab16 <dir_read+0x16a>
    a9e2:	c5 01       	movw	r24, r10
    a9e4:	0e 94 b9 4c 	call	0x9972	; 0x9972 <move_window>
    a9e8:	00 97       	sbiw	r24, 0x00	; 0
    a9ea:	09 f0       	breq	.+2      	; 0xa9ee <dir_read+0x42>
    a9ec:	96 c0       	rjmp	.+300    	; 0xab1a <dir_read+0x16e>
    a9ee:	8a 8c       	ldd	r8, Y+26	; 0x1a
    a9f0:	9b 8c       	ldd	r9, Y+27	; 0x1b
    a9f2:	f4 01       	movw	r30, r8
    a9f4:	00 81       	ld	r16, Z
    a9f6:	00 23       	and	r16, r16
    a9f8:	09 f4       	brne	.+2      	; 0xa9fc <dir_read+0x50>
    a9fa:	97 c0       	rjmp	.+302    	; 0xab2a <dir_read+0x17e>
    a9fc:	83 85       	ldd	r24, Z+11	; 0x0b
    a9fe:	8f 73       	andi	r24, 0x3F	; 63
    aa00:	8c 83       	std	Y+4, r24	; 0x04
    aa02:	05 3e       	cpi	r16, 0xE5	; 229
    aa04:	09 f4       	brne	.+2      	; 0xaa08 <dir_read+0x5c>
    aa06:	7e c0       	rjmp	.+252    	; 0xab04 <dir_read+0x158>
    aa08:	0e 32       	cpi	r16, 0x2E	; 46
    aa0a:	09 f4       	brne	.+2      	; 0xaa0e <dir_read+0x62>
    aa0c:	7b c0       	rjmp	.+246    	; 0xab04 <dir_read+0x158>
    aa0e:	21 e0       	ldi	r18, 0x01	; 1
    aa10:	30 e0       	ldi	r19, 0x00	; 0
    aa12:	98 2f       	mov	r25, r24
    aa14:	9f 71       	andi	r25, 0x1F	; 31
    aa16:	98 30       	cpi	r25, 0x08	; 8
    aa18:	11 f0       	breq	.+4      	; 0xaa1e <dir_read+0x72>
    aa1a:	20 e0       	ldi	r18, 0x00	; 0
    aa1c:	30 e0       	ldi	r19, 0x00	; 0
    aa1e:	2e 15       	cp	r18, r14
    aa20:	3f 05       	cpc	r19, r15
    aa22:	09 f0       	breq	.+2      	; 0xaa26 <dir_read+0x7a>
    aa24:	6f c0       	rjmp	.+222    	; 0xab04 <dir_read+0x158>
    aa26:	8f 30       	cpi	r24, 0x0F	; 15
    aa28:	09 f0       	breq	.+2      	; 0xaa2c <dir_read+0x80>
    aa2a:	5c c0       	rjmp	.+184    	; 0xaae4 <dir_read+0x138>
    aa2c:	06 ff       	sbrs	r16, 6
    aa2e:	0c c0       	rjmp	.+24     	; 0xaa48 <dir_read+0x9c>
    aa30:	f4 01       	movw	r30, r8
    aa32:	85 85       	ldd	r24, Z+13	; 0x0d
    aa34:	0f 7b       	andi	r16, 0xBF	; 191
    aa36:	4e 85       	ldd	r20, Y+14	; 0x0e
    aa38:	5f 85       	ldd	r21, Y+15	; 0x0f
    aa3a:	68 89       	ldd	r22, Y+16	; 0x10
    aa3c:	79 89       	ldd	r23, Y+17	; 0x11
    aa3e:	48 a7       	std	Y+40, r20	; 0x28
    aa40:	59 a7       	std	Y+41, r21	; 0x29
    aa42:	6a a7       	std	Y+42, r22	; 0x2a
    aa44:	7b a7       	std	Y+43, r23	; 0x2b
    aa46:	03 c0       	rjmp	.+6      	; 0xaa4e <dir_read+0xa2>
    aa48:	10 13       	cpse	r17, r16
    aa4a:	5c c0       	rjmp	.+184    	; 0xab04 <dir_read+0x158>
    aa4c:	8d 2d       	mov	r24, r13
    aa4e:	f4 01       	movw	r30, r8
    aa50:	d5 84       	ldd	r13, Z+13	; 0x0d
    aa52:	d8 12       	cpse	r13, r24
    aa54:	56 c0       	rjmp	.+172    	; 0xab02 <dir_read+0x156>
    aa56:	82 8d       	ldd	r24, Z+26	; 0x1a
    aa58:	93 8d       	ldd	r25, Z+27	; 0x1b
    aa5a:	89 2b       	or	r24, r25
    aa5c:	09 f0       	breq	.+2      	; 0xaa60 <dir_read+0xb4>
    aa5e:	52 c0       	rjmp	.+164    	; 0xab04 <dir_read+0x158>
    aa60:	f5 01       	movw	r30, r10
    aa62:	63 85       	ldd	r22, Z+11	; 0x0b
    aa64:	74 85       	ldd	r23, Z+12	; 0x0c
    aa66:	f4 01       	movw	r30, r8
    aa68:	80 81       	ld	r24, Z
    aa6a:	90 e0       	ldi	r25, 0x00	; 0
    aa6c:	8f 7b       	andi	r24, 0xBF	; 191
    aa6e:	01 97       	sbiw	r24, 0x01	; 1
    aa70:	c8 9e       	mul	r12, r24
    aa72:	90 01       	movw	r18, r0
    aa74:	c9 9e       	mul	r12, r25
    aa76:	30 0d       	add	r19, r0
    aa78:	11 24       	eor	r1, r1
    aa7a:	ab e0       	ldi	r26, 0x0B	; 11
    aa7c:	b4 e0       	ldi	r27, 0x04	; 4
    aa7e:	81 e0       	ldi	r24, 0x01	; 1
    aa80:	90 e0       	ldi	r25, 0x00	; 0
    aa82:	4d 91       	ld	r20, X+
    aa84:	f4 01       	movw	r30, r8
    aa86:	e4 0f       	add	r30, r20
    aa88:	f1 1d       	adc	r31, r1
    aa8a:	40 81       	ld	r20, Z
    aa8c:	51 81       	ldd	r21, Z+1	; 0x01
    aa8e:	00 97       	sbiw	r24, 0x00	; 0
    aa90:	81 f0       	breq	.+32     	; 0xaab2 <dir_read+0x106>
    aa92:	2f 3f       	cpi	r18, 0xFF	; 255
    aa94:	31 05       	cpc	r19, r1
    aa96:	09 f0       	breq	.+2      	; 0xaa9a <dir_read+0xee>
    aa98:	a8 f5       	brcc	.+106    	; 0xab04 <dir_read+0x158>
    aa9a:	c9 01       	movw	r24, r18
    aa9c:	88 0f       	add	r24, r24
    aa9e:	99 1f       	adc	r25, r25
    aaa0:	86 0f       	add	r24, r22
    aaa2:	97 1f       	adc	r25, r23
    aaa4:	fc 01       	movw	r30, r24
    aaa6:	51 83       	std	Z+1, r21	; 0x01
    aaa8:	40 83       	st	Z, r20
    aaaa:	ca 01       	movw	r24, r20
    aaac:	2f 5f       	subi	r18, 0xFF	; 255
    aaae:	3f 4f       	sbci	r19, 0xFF	; 255
    aab0:	03 c0       	rjmp	.+6      	; 0xaab8 <dir_read+0x10c>
    aab2:	4f 3f       	cpi	r20, 0xFF	; 255
    aab4:	5f 4f       	sbci	r21, 0xFF	; 255
    aab6:	31 f5       	brne	.+76     	; 0xab04 <dir_read+0x158>
    aab8:	44 e0       	ldi	r20, 0x04	; 4
    aaba:	a8 31       	cpi	r26, 0x18	; 24
    aabc:	b4 07       	cpc	r27, r20
    aabe:	09 f7       	brne	.-62     	; 0xaa82 <dir_read+0xd6>
    aac0:	f4 01       	movw	r30, r8
    aac2:	40 81       	ld	r20, Z
    aac4:	46 ff       	sbrs	r20, 6
    aac6:	2e c0       	rjmp	.+92     	; 0xab24 <dir_read+0x178>
    aac8:	89 2b       	or	r24, r25
    aaca:	61 f1       	breq	.+88     	; 0xab24 <dir_read+0x178>
    aacc:	2f 3f       	cpi	r18, 0xFF	; 255
    aace:	31 05       	cpc	r19, r1
    aad0:	09 f0       	breq	.+2      	; 0xaad4 <dir_read+0x128>
    aad2:	c0 f4       	brcc	.+48     	; 0xab04 <dir_read+0x158>
    aad4:	22 0f       	add	r18, r18
    aad6:	33 1f       	adc	r19, r19
    aad8:	fb 01       	movw	r30, r22
    aada:	e2 0f       	add	r30, r18
    aadc:	f3 1f       	adc	r31, r19
    aade:	11 82       	std	Z+1, r1	; 0x01
    aae0:	10 82       	st	Z, r1
    aae2:	20 c0       	rjmp	.+64     	; 0xab24 <dir_read+0x178>
    aae4:	11 11       	cpse	r17, r1
    aae6:	05 c0       	rjmp	.+10     	; 0xaaf2 <dir_read+0x146>
    aae8:	c4 01       	movw	r24, r8
    aaea:	0e 94 fb 48 	call	0x91f6	; 0x91f6 <sum_sfn>
    aaee:	d8 16       	cp	r13, r24
    aaf0:	f9 f0       	breq	.+62     	; 0xab30 <dir_read+0x184>
    aaf2:	8f ef       	ldi	r24, 0xFF	; 255
    aaf4:	9f ef       	ldi	r25, 0xFF	; 255
    aaf6:	dc 01       	movw	r26, r24
    aaf8:	88 a7       	std	Y+40, r24	; 0x28
    aafa:	99 a7       	std	Y+41, r25	; 0x29
    aafc:	aa a7       	std	Y+42, r26	; 0x2a
    aafe:	bb a7       	std	Y+43, r27	; 0x2b
    ab00:	17 c0       	rjmp	.+46     	; 0xab30 <dir_read+0x184>
    ab02:	d8 2e       	mov	r13, r24
    ab04:	1f ef       	ldi	r17, 0xFF	; 255
    ab06:	60 e0       	ldi	r22, 0x00	; 0
    ab08:	70 e0       	ldi	r23, 0x00	; 0
    ab0a:	ce 01       	movw	r24, r28
    ab0c:	2e de       	rcall	.-932    	; 0xa76a <dir_next>
    ab0e:	00 97       	sbiw	r24, 0x00	; 0
    ab10:	09 f4       	brne	.+2      	; 0xab14 <dir_read+0x168>
    ab12:	5d cf       	rjmp	.-326    	; 0xa9ce <dir_read+0x22>
    ab14:	02 c0       	rjmp	.+4      	; 0xab1a <dir_read+0x16e>
    ab16:	00 97       	sbiw	r24, 0x00	; 0
    ab18:	59 f0       	breq	.+22     	; 0xab30 <dir_read+0x184>
    ab1a:	1e 8a       	std	Y+22, r1	; 0x16
    ab1c:	1f 8a       	std	Y+23, r1	; 0x17
    ab1e:	18 8e       	std	Y+24, r1	; 0x18
    ab20:	19 8e       	std	Y+25, r1	; 0x19
    ab22:	08 c0       	rjmp	.+16     	; 0xab34 <dir_read+0x188>
    ab24:	1f ef       	ldi	r17, 0xFF	; 255
    ab26:	10 0f       	add	r17, r16
    ab28:	ee cf       	rjmp	.-36     	; 0xab06 <dir_read+0x15a>
    ab2a:	84 e0       	ldi	r24, 0x04	; 4
    ab2c:	90 e0       	ldi	r25, 0x00	; 0
    ab2e:	f5 cf       	rjmp	.-22     	; 0xab1a <dir_read+0x16e>
    ab30:	80 e0       	ldi	r24, 0x00	; 0
    ab32:	90 e0       	ldi	r25, 0x00	; 0
    ab34:	cd b7       	in	r28, 0x3d	; 61
    ab36:	de b7       	in	r29, 0x3e	; 62
    ab38:	ec e0       	ldi	r30, 0x0C	; 12
    ab3a:	0c 94 ea e3 	jmp	0x1c7d4	; 0x1c7d4 <__epilogue_restores__+0xc>

0000ab3e <dir_remove>:
    ab3e:	a0 e0       	ldi	r26, 0x00	; 0
    ab40:	b0 e0       	ldi	r27, 0x00	; 0
    ab42:	e5 ea       	ldi	r30, 0xA5	; 165
    ab44:	f5 e5       	ldi	r31, 0x55	; 85
    ab46:	0c 94 d0 e3 	jmp	0x1c7a0	; 0x1c7a0 <__prologue_saves__+0x10>
    ab4a:	ec 01       	movw	r28, r24
    ab4c:	08 81       	ld	r16, Y
    ab4e:	19 81       	ldd	r17, Y+1	; 0x01
    ab50:	ce 84       	ldd	r12, Y+14	; 0x0e
    ab52:	df 84       	ldd	r13, Y+15	; 0x0f
    ab54:	e8 88       	ldd	r14, Y+16	; 0x10
    ab56:	f9 88       	ldd	r15, Y+17	; 0x11
    ab58:	48 a5       	ldd	r20, Y+40	; 0x28
    ab5a:	59 a5       	ldd	r21, Y+41	; 0x29
    ab5c:	6a a5       	ldd	r22, Y+42	; 0x2a
    ab5e:	7b a5       	ldd	r23, Y+43	; 0x2b
    ab60:	4f 3f       	cpi	r20, 0xFF	; 255
    ab62:	8f ef       	ldi	r24, 0xFF	; 255
    ab64:	58 07       	cpc	r21, r24
    ab66:	68 07       	cpc	r22, r24
    ab68:	78 07       	cpc	r23, r24
    ab6a:	29 f4       	brne	.+10     	; 0xab76 <dir_remove+0x38>
    ab6c:	85 ee       	ldi	r24, 0xE5	; 229
    ab6e:	b8 2e       	mov	r11, r24
    ab70:	aa 24       	eor	r10, r10
    ab72:	a3 94       	inc	r10
    ab74:	19 c0       	rjmp	.+50     	; 0xaba8 <dir_remove+0x6a>
    ab76:	ce 01       	movw	r24, r28
    ab78:	80 db       	rcall	.-2304   	; 0xa27a <dir_sdi>
    ab7a:	00 97       	sbiw	r24, 0x00	; 0
    ab7c:	19 f5       	brne	.+70     	; 0xabc4 <dir_remove+0x86>
    ab7e:	f6 cf       	rjmp	.-20     	; 0xab6c <dir_remove+0x2e>
    ab80:	ea 8d       	ldd	r30, Y+26	; 0x1a
    ab82:	fb 8d       	ldd	r31, Y+27	; 0x1b
    ab84:	b0 82       	st	Z, r11
    ab86:	f8 01       	movw	r30, r16
    ab88:	a3 82       	std	Z+3, r10	; 0x03
    ab8a:	4e 85       	ldd	r20, Y+14	; 0x0e
    ab8c:	5f 85       	ldd	r21, Y+15	; 0x0f
    ab8e:	68 89       	ldd	r22, Y+16	; 0x10
    ab90:	79 89       	ldd	r23, Y+17	; 0x11
    ab92:	4c 15       	cp	r20, r12
    ab94:	5d 05       	cpc	r21, r13
    ab96:	6e 05       	cpc	r22, r14
    ab98:	7f 05       	cpc	r23, r15
    ab9a:	a0 f4       	brcc	.+40     	; 0xabc4 <dir_remove+0x86>
    ab9c:	60 e0       	ldi	r22, 0x00	; 0
    ab9e:	70 e0       	ldi	r23, 0x00	; 0
    aba0:	ce 01       	movw	r24, r28
    aba2:	e3 dd       	rcall	.-1082   	; 0xa76a <dir_next>
    aba4:	00 97       	sbiw	r24, 0x00	; 0
    aba6:	49 f4       	brne	.+18     	; 0xabba <dir_remove+0x7c>
    aba8:	4e 89       	ldd	r20, Y+22	; 0x16
    abaa:	5f 89       	ldd	r21, Y+23	; 0x17
    abac:	68 8d       	ldd	r22, Y+24	; 0x18
    abae:	79 8d       	ldd	r23, Y+25	; 0x19
    abb0:	c8 01       	movw	r24, r16
    abb2:	0e 94 b9 4c 	call	0x9972	; 0x9972 <move_window>
    abb6:	00 97       	sbiw	r24, 0x00	; 0
    abb8:	19 f3       	breq	.-58     	; 0xab80 <dir_remove+0x42>
    abba:	84 30       	cpi	r24, 0x04	; 4
    abbc:	91 05       	cpc	r25, r1
    abbe:	11 f4       	brne	.+4      	; 0xabc4 <dir_remove+0x86>
    abc0:	82 e0       	ldi	r24, 0x02	; 2
    abc2:	90 e0       	ldi	r25, 0x00	; 0
    abc4:	cd b7       	in	r28, 0x3d	; 61
    abc6:	de b7       	in	r29, 0x3e	; 62
    abc8:	ea e0       	ldi	r30, 0x0A	; 10
    abca:	0c 94 ec e3 	jmp	0x1c7d8	; 0x1c7d8 <__epilogue_restores__+0x10>

0000abce <dir_find>:
    abce:	ac e0       	ldi	r26, 0x0C	; 12
    abd0:	b0 e0       	ldi	r27, 0x00	; 0
    abd2:	ed ee       	ldi	r30, 0xED	; 237
    abd4:	f5 e5       	ldi	r31, 0x55	; 85
    abd6:	0c 94 c8 e3 	jmp	0x1c790	; 0x1c790 <__prologue_saves__>
    abda:	9c 87       	std	Y+12, r25	; 0x0c
    abdc:	8b 87       	std	Y+11, r24	; 0x0b
    abde:	fc 01       	movw	r30, r24
    abe0:	01 90       	ld	r0, Z+
    abe2:	f0 81       	ld	r31, Z
    abe4:	e0 2d       	mov	r30, r0
    abe6:	fc 83       	std	Y+4, r31	; 0x04
    abe8:	eb 83       	std	Y+3, r30	; 0x03
    abea:	40 e0       	ldi	r20, 0x00	; 0
    abec:	50 e0       	ldi	r21, 0x00	; 0
    abee:	ba 01       	movw	r22, r20
    abf0:	44 db       	rcall	.-2424   	; 0xa27a <dir_sdi>
    abf2:	00 97       	sbiw	r24, 0x00	; 0
    abf4:	09 f0       	breq	.+2      	; 0xabf8 <dir_find+0x2a>
    abf6:	e7 c0       	rjmp	.+462    	; 0xadc6 <dir_find+0x1f8>
    abf8:	8f ef       	ldi	r24, 0xFF	; 255
    abfa:	9f ef       	ldi	r25, 0xFF	; 255
    abfc:	dc 01       	movw	r26, r24
    abfe:	eb 85       	ldd	r30, Y+11	; 0x0b
    ac00:	fc 85       	ldd	r31, Y+12	; 0x0c
    ac02:	80 a7       	std	Z+40, r24	; 0x28
    ac04:	91 a7       	std	Z+41, r25	; 0x29
    ac06:	a2 a7       	std	Z+42, r26	; 0x2a
    ac08:	b3 a7       	std	Z+43, r27	; 0x2b
    ac0a:	0f ef       	ldi	r16, 0xFF	; 255
    ac0c:	1f ef       	ldi	r17, 0xFF	; 255
    ac0e:	44 24       	eor	r4, r4
    ac10:	4a 94       	dec	r4
    ac12:	54 2c       	mov	r5, r4
    ac14:	32 01       	movw	r6, r4
    ac16:	7c 96       	adiw	r30, 0x1c	; 28
    ac18:	fa 87       	std	Y+10, r31	; 0x0a
    ac1a:	e9 87       	std	Y+9, r30	; 0x09
    ac1c:	eb 85       	ldd	r30, Y+11	; 0x0b
    ac1e:	fc 85       	ldd	r31, Y+12	; 0x0c
    ac20:	46 89       	ldd	r20, Z+22	; 0x16
    ac22:	57 89       	ldd	r21, Z+23	; 0x17
    ac24:	60 8d       	ldd	r22, Z+24	; 0x18
    ac26:	71 8d       	ldd	r23, Z+25	; 0x19
    ac28:	8b 81       	ldd	r24, Y+3	; 0x03
    ac2a:	9c 81       	ldd	r25, Y+4	; 0x04
    ac2c:	0e 94 b9 4c 	call	0x9972	; 0x9972 <move_window>
    ac30:	00 97       	sbiw	r24, 0x00	; 0
    ac32:	09 f0       	breq	.+2      	; 0xac36 <dir_find+0x68>
    ac34:	c8 c0       	rjmp	.+400    	; 0xadc6 <dir_find+0x1f8>
    ac36:	eb 85       	ldd	r30, Y+11	; 0x0b
    ac38:	fc 85       	ldd	r31, Y+12	; 0x0c
    ac3a:	e2 8c       	ldd	r14, Z+26	; 0x1a
    ac3c:	f3 8c       	ldd	r15, Z+27	; 0x1b
    ac3e:	f7 01       	movw	r30, r14
    ac40:	d0 80       	ld	r13, Z
    ac42:	dd 20       	and	r13, r13
    ac44:	09 f4       	brne	.+2      	; 0xac48 <dir_find+0x7a>
    ac46:	c1 c0       	rjmp	.+386    	; 0xadca <dir_find+0x1fc>
    ac48:	93 85       	ldd	r25, Z+11	; 0x0b
    ac4a:	89 2f       	mov	r24, r25
    ac4c:	8f 73       	andi	r24, 0x3F	; 63
    ac4e:	eb 85       	ldd	r30, Y+11	; 0x0b
    ac50:	fc 85       	ldd	r31, Y+12	; 0x0c
    ac52:	84 83       	std	Z+4, r24	; 0x04
    ac54:	f5 ee       	ldi	r31, 0xE5	; 229
    ac56:	df 16       	cp	r13, r31
    ac58:	09 f4       	brne	.+2      	; 0xac5c <dir_find+0x8e>
    ac5a:	a6 c0       	rjmp	.+332    	; 0xada8 <dir_find+0x1da>
    ac5c:	93 ff       	sbrs	r25, 3
    ac5e:	04 c0       	rjmp	.+8      	; 0xac68 <dir_find+0x9a>
    ac60:	8f 30       	cpi	r24, 0x0F	; 15
    ac62:	09 f0       	breq	.+2      	; 0xac66 <dir_find+0x98>
    ac64:	a1 c0       	rjmp	.+322    	; 0xada8 <dir_find+0x1da>
    ac66:	03 c0       	rjmp	.+6      	; 0xac6e <dir_find+0xa0>
    ac68:	8f 30       	cpi	r24, 0x0F	; 15
    ac6a:	09 f0       	breq	.+2      	; 0xac6e <dir_find+0xa0>
    ac6c:	88 c0       	rjmp	.+272    	; 0xad7e <dir_find+0x1b0>
    ac6e:	eb 85       	ldd	r30, Y+11	; 0x0b
    ac70:	fc 85       	ldd	r31, Y+12	; 0x0c
    ac72:	87 a1       	ldd	r24, Z+39	; 0x27
    ac74:	86 fd       	sbrc	r24, 6
    ac76:	9f c0       	rjmp	.+318    	; 0xadb6 <dir_find+0x1e8>
    ac78:	d6 fe       	sbrs	r13, 6
    ac7a:	10 c0       	rjmp	.+32     	; 0xac9c <dir_find+0xce>
    ac7c:	f7 01       	movw	r30, r14
    ac7e:	05 85       	ldd	r16, Z+13	; 0x0d
    ac80:	fd 2d       	mov	r31, r13
    ac82:	ff 7b       	andi	r31, 0xBF	; 191
    ac84:	df 2e       	mov	r13, r31
    ac86:	eb 85       	ldd	r30, Y+11	; 0x0b
    ac88:	fc 85       	ldd	r31, Y+12	; 0x0c
    ac8a:	86 85       	ldd	r24, Z+14	; 0x0e
    ac8c:	97 85       	ldd	r25, Z+15	; 0x0f
    ac8e:	a0 89       	ldd	r26, Z+16	; 0x10
    ac90:	b1 89       	ldd	r27, Z+17	; 0x11
    ac92:	80 a7       	std	Z+40, r24	; 0x28
    ac94:	91 a7       	std	Z+41, r25	; 0x29
    ac96:	a2 a7       	std	Z+42, r26	; 0x2a
    ac98:	b3 a7       	std	Z+43, r27	; 0x2b
    ac9a:	02 c0       	rjmp	.+4      	; 0xaca0 <dir_find+0xd2>
    ac9c:	1d 11       	cpse	r17, r13
    ac9e:	8a c0       	rjmp	.+276    	; 0xadb4 <dir_find+0x1e6>
    aca0:	f7 01       	movw	r30, r14
    aca2:	c5 84       	ldd	r12, Z+13	; 0x0d
    aca4:	c0 12       	cpse	r12, r16
    aca6:	86 c0       	rjmp	.+268    	; 0xadb4 <dir_find+0x1e6>
    aca8:	82 8d       	ldd	r24, Z+26	; 0x1a
    acaa:	93 8d       	ldd	r25, Z+27	; 0x1b
    acac:	89 2b       	or	r24, r25
    acae:	09 f0       	breq	.+2      	; 0xacb2 <dir_find+0xe4>
    acb0:	91 c0       	rjmp	.+290    	; 0xadd4 <dir_find+0x206>
    acb2:	eb 81       	ldd	r30, Y+3	; 0x03
    acb4:	fc 81       	ldd	r31, Y+4	; 0x04
    acb6:	03 84       	ldd	r0, Z+11	; 0x0b
    acb8:	f4 85       	ldd	r31, Z+12	; 0x0c
    acba:	e0 2d       	mov	r30, r0
    acbc:	fe 83       	std	Y+6, r31	; 0x06
    acbe:	ed 83       	std	Y+5, r30	; 0x05
    acc0:	f7 01       	movw	r30, r14
    acc2:	80 81       	ld	r24, Z
    acc4:	8f 73       	andi	r24, 0x3F	; 63
    acc6:	90 e0       	ldi	r25, 0x00	; 0
    acc8:	01 97       	sbiw	r24, 0x01	; 1
    acca:	fd e0       	ldi	r31, 0x0D	; 13
    accc:	f8 9f       	mul	r31, r24
    acce:	80 01       	movw	r16, r0
    acd0:	f9 9f       	mul	r31, r25
    acd2:	10 0d       	add	r17, r0
    acd4:	11 24       	eor	r1, r1
    acd6:	2b e0       	ldi	r18, 0x0B	; 11
    acd8:	34 e0       	ldi	r19, 0x04	; 4
    acda:	3a 83       	std	Y+2, r19	; 0x02
    acdc:	29 83       	std	Y+1, r18	; 0x01
    acde:	81 e0       	ldi	r24, 0x01	; 1
    ace0:	90 e0       	ldi	r25, 0x00	; 0
    ace2:	e9 81       	ldd	r30, Y+1	; 0x01
    ace4:	fa 81       	ldd	r31, Y+2	; 0x02
    ace6:	21 91       	ld	r18, Z+
    ace8:	fa 83       	std	Y+2, r31	; 0x02
    acea:	e9 83       	std	Y+1, r30	; 0x01
    acec:	f7 01       	movw	r30, r14
    acee:	e2 0f       	add	r30, r18
    acf0:	f1 1d       	adc	r31, r1
    acf2:	20 80       	ld	r2, Z
    acf4:	31 80       	ldd	r3, Z+1	; 0x01
    acf6:	00 97       	sbiw	r24, 0x00	; 0
    acf8:	39 f1       	breq	.+78     	; 0xad48 <dir_find+0x17a>
    acfa:	0f 3f       	cpi	r16, 0xFF	; 255
    acfc:	11 05       	cpc	r17, r1
    acfe:	11 f0       	breq	.+4      	; 0xad04 <dir_find+0x136>
    ad00:	08 f0       	brcs	.+2      	; 0xad04 <dir_find+0x136>
    ad02:	68 c0       	rjmp	.+208    	; 0xadd4 <dir_find+0x206>
    ad04:	b1 01       	movw	r22, r2
    ad06:	80 e0       	ldi	r24, 0x00	; 0
    ad08:	90 e0       	ldi	r25, 0x00	; 0
    ad0a:	0e 94 94 6a 	call	0xd528	; 0xd528 <ff_wtoupper>
    ad0e:	4b 01       	movw	r8, r22
    ad10:	5c 01       	movw	r10, r24
    ad12:	98 01       	movw	r18, r16
    ad14:	2f 5f       	subi	r18, 0xFF	; 255
    ad16:	3f 4f       	sbci	r19, 0xFF	; 255
    ad18:	38 87       	std	Y+8, r19	; 0x08
    ad1a:	2f 83       	std	Y+7, r18	; 0x07
    ad1c:	00 0f       	add	r16, r16
    ad1e:	11 1f       	adc	r17, r17
    ad20:	ed 81       	ldd	r30, Y+5	; 0x05
    ad22:	fe 81       	ldd	r31, Y+6	; 0x06
    ad24:	e0 0f       	add	r30, r16
    ad26:	f1 1f       	adc	r31, r17
    ad28:	60 81       	ld	r22, Z
    ad2a:	71 81       	ldd	r23, Z+1	; 0x01
    ad2c:	80 e0       	ldi	r24, 0x00	; 0
    ad2e:	90 e0       	ldi	r25, 0x00	; 0
    ad30:	0e 94 94 6a 	call	0xd528	; 0xd528 <ff_wtoupper>
    ad34:	86 16       	cp	r8, r22
    ad36:	97 06       	cpc	r9, r23
    ad38:	a8 06       	cpc	r10, r24
    ad3a:	b9 06       	cpc	r11, r25
    ad3c:	09 f0       	breq	.+2      	; 0xad40 <dir_find+0x172>
    ad3e:	4a c0       	rjmp	.+148    	; 0xadd4 <dir_find+0x206>
    ad40:	c1 01       	movw	r24, r2
    ad42:	0f 81       	ldd	r16, Y+7	; 0x07
    ad44:	18 85       	ldd	r17, Y+8	; 0x08
    ad46:	05 c0       	rjmp	.+10     	; 0xad52 <dir_find+0x184>
    ad48:	3f ef       	ldi	r19, 0xFF	; 255
    ad4a:	23 16       	cp	r2, r19
    ad4c:	33 06       	cpc	r3, r19
    ad4e:	09 f0       	breq	.+2      	; 0xad52 <dir_find+0x184>
    ad50:	41 c0       	rjmp	.+130    	; 0xadd4 <dir_find+0x206>
    ad52:	e9 81       	ldd	r30, Y+1	; 0x01
    ad54:	fa 81       	ldd	r31, Y+2	; 0x02
    ad56:	e8 51       	subi	r30, 0x18	; 24
    ad58:	f4 40       	sbci	r31, 0x04	; 4
    ad5a:	19 f6       	brne	.-122    	; 0xace2 <dir_find+0x114>
    ad5c:	f7 01       	movw	r30, r14
    ad5e:	20 81       	ld	r18, Z
    ad60:	26 ff       	sbrs	r18, 6
    ad62:	3a c0       	rjmp	.+116    	; 0xadd8 <dir_find+0x20a>
    ad64:	89 2b       	or	r24, r25
    ad66:	c1 f1       	breq	.+112    	; 0xadd8 <dir_find+0x20a>
    ad68:	00 0f       	add	r16, r16
    ad6a:	11 1f       	adc	r17, r17
    ad6c:	ed 81       	ldd	r30, Y+5	; 0x05
    ad6e:	fe 81       	ldd	r31, Y+6	; 0x06
    ad70:	e0 0f       	add	r30, r16
    ad72:	f1 1f       	adc	r31, r17
    ad74:	80 81       	ld	r24, Z
    ad76:	91 81       	ldd	r25, Z+1	; 0x01
    ad78:	89 2b       	or	r24, r25
    ad7a:	71 f1       	breq	.+92     	; 0xadd8 <dir_find+0x20a>
    ad7c:	2b c0       	rjmp	.+86     	; 0xadd4 <dir_find+0x206>
    ad7e:	11 11       	cpse	r17, r1
    ad80:	05 c0       	rjmp	.+10     	; 0xad8c <dir_find+0x1be>
    ad82:	c7 01       	movw	r24, r14
    ad84:	0e 94 fb 48 	call	0x91f6	; 0x91f6 <sum_sfn>
    ad88:	08 17       	cp	r16, r24
    ad8a:	09 f1       	breq	.+66     	; 0xadce <dir_find+0x200>
    ad8c:	eb 85       	ldd	r30, Y+11	; 0x0b
    ad8e:	fc 85       	ldd	r31, Y+12	; 0x0c
    ad90:	87 a1       	ldd	r24, Z+39	; 0x27
    ad92:	80 fd       	sbrc	r24, 0
    ad94:	09 c0       	rjmp	.+18     	; 0xada8 <dir_find+0x1da>
    ad96:	4b e0       	ldi	r20, 0x0B	; 11
    ad98:	50 e0       	ldi	r21, 0x00	; 0
    ad9a:	69 85       	ldd	r22, Y+9	; 0x09
    ad9c:	7a 85       	ldd	r23, Y+10	; 0x0a
    ad9e:	c7 01       	movw	r24, r14
    ada0:	0e 94 02 48 	call	0x9004	; 0x9004 <mem_cmp>
    ada4:	89 2b       	or	r24, r25
    ada6:	99 f0       	breq	.+38     	; 0xadce <dir_find+0x200>
    ada8:	eb 85       	ldd	r30, Y+11	; 0x0b
    adaa:	fc 85       	ldd	r31, Y+12	; 0x0c
    adac:	40 a6       	std	Z+40, r4	; 0x28
    adae:	51 a6       	std	Z+41, r5	; 0x29
    adb0:	62 a6       	std	Z+42, r6	; 0x2a
    adb2:	73 a6       	std	Z+43, r7	; 0x2b
    adb4:	1f ef       	ldi	r17, 0xFF	; 255
    adb6:	60 e0       	ldi	r22, 0x00	; 0
    adb8:	70 e0       	ldi	r23, 0x00	; 0
    adba:	8b 85       	ldd	r24, Y+11	; 0x0b
    adbc:	9c 85       	ldd	r25, Y+12	; 0x0c
    adbe:	d5 dc       	rcall	.-1622   	; 0xa76a <dir_next>
    adc0:	00 97       	sbiw	r24, 0x00	; 0
    adc2:	09 f4       	brne	.+2      	; 0xadc6 <dir_find+0x1f8>
    adc4:	2b cf       	rjmp	.-426    	; 0xac1c <dir_find+0x4e>
    adc6:	28 2f       	mov	r18, r24
    adc8:	0b c0       	rjmp	.+22     	; 0xade0 <dir_find+0x212>
    adca:	24 e0       	ldi	r18, 0x04	; 4
    adcc:	01 c0       	rjmp	.+2      	; 0xadd0 <dir_find+0x202>
    adce:	20 e0       	ldi	r18, 0x00	; 0
    add0:	90 e0       	ldi	r25, 0x00	; 0
    add2:	06 c0       	rjmp	.+12     	; 0xade0 <dir_find+0x212>
    add4:	0c 2d       	mov	r16, r12
    add6:	ee cf       	rjmp	.-36     	; 0xadb4 <dir_find+0x1e6>
    add8:	1f ef       	ldi	r17, 0xFF	; 255
    adda:	1d 0d       	add	r17, r13
    addc:	0c 2d       	mov	r16, r12
    adde:	eb cf       	rjmp	.-42     	; 0xadb6 <dir_find+0x1e8>
    ade0:	82 2f       	mov	r24, r18
    ade2:	2c 96       	adiw	r28, 0x0c	; 12
    ade4:	e2 e1       	ldi	r30, 0x12	; 18
    ade6:	0c 94 e4 e3 	jmp	0x1c7c8	; 0x1c7c8 <__epilogue_restores__>

0000adea <dir_register>:
    adea:	a6 e1       	ldi	r26, 0x16	; 22
    adec:	b0 e0       	ldi	r27, 0x00	; 0
    adee:	eb ef       	ldi	r30, 0xFB	; 251
    adf0:	f6 e5       	ldi	r31, 0x56	; 86
    adf2:	0c 94 c8 e3 	jmp	0x1c790	; 0x1c790 <__prologue_saves__>
    adf6:	fc 01       	movw	r30, r24
    adf8:	27 a1       	ldd	r18, Z+39	; 0x27
    adfa:	20 7a       	andi	r18, 0xA0	; 160
    adfc:	09 f0       	breq	.+2      	; 0xae00 <dir_register+0x16>
    adfe:	53 c1       	rjmp	.+678    	; 0xb0a6 <dir_register+0x2bc>
    ae00:	c0 80       	ld	r12, Z
    ae02:	d1 80       	ldd	r13, Z+1	; 0x01
    ae04:	f6 01       	movw	r30, r12
    ae06:	a3 85       	ldd	r26, Z+11	; 0x0b
    ae08:	b4 85       	ldd	r27, Z+12	; 0x0c
    ae0a:	81 2c       	mov	r8, r1
    ae0c:	91 2c       	mov	r9, r1
    ae0e:	2d 91       	ld	r18, X+
    ae10:	3d 91       	ld	r19, X+
    ae12:	23 2b       	or	r18, r19
    ae14:	21 f0       	breq	.+8      	; 0xae1e <dir_register+0x34>
    ae16:	ff ef       	ldi	r31, 0xFF	; 255
    ae18:	8f 1a       	sub	r8, r31
    ae1a:	9f 0a       	sbc	r9, r31
    ae1c:	f8 cf       	rjmp	.-16     	; 0xae0e <dir_register+0x24>
    ae1e:	8c 01       	movw	r16, r24
    ae20:	5c 01       	movw	r10, r24
    ae22:	2c e1       	ldi	r18, 0x1C	; 28
    ae24:	a2 0e       	add	r10, r18
    ae26:	b1 1c       	adc	r11, r1
    ae28:	4c e0       	ldi	r20, 0x0C	; 12
    ae2a:	50 e0       	ldi	r21, 0x00	; 0
    ae2c:	b5 01       	movw	r22, r10
    ae2e:	ce 01       	movw	r24, r28
    ae30:	01 96       	adiw	r24, 0x01	; 1
    ae32:	0e 94 62 49 	call	0x92c4	; 0x92c4 <mem_cpy.part.0>
    ae36:	8c 85       	ldd	r24, Y+12	; 0x0c
    ae38:	80 ff       	sbrs	r24, 0
    ae3a:	94 c0       	rjmp	.+296    	; 0xaf64 <dir_register+0x17a>
    ae3c:	80 e4       	ldi	r24, 0x40	; 64
    ae3e:	f8 01       	movw	r30, r16
    ae40:	87 a3       	std	Z+39, r24	; 0x27
    ae42:	41 2c       	mov	r4, r1
    ae44:	51 2c       	mov	r5, r1
    ae46:	32 01       	movw	r6, r4
    ae48:	43 94       	inc	r4
    ae4a:	72 01       	movw	r14, r4
    ae4c:	f6 01       	movw	r30, r12
    ae4e:	23 84       	ldd	r2, Z+11	; 0x0b
    ae50:	34 84       	ldd	r3, Z+12	; 0x0c
    ae52:	4b e0       	ldi	r20, 0x0B	; 11
    ae54:	50 e0       	ldi	r21, 0x00	; 0
    ae56:	be 01       	movw	r22, r28
    ae58:	6f 5f       	subi	r22, 0xFF	; 255
    ae5a:	7f 4f       	sbci	r23, 0xFF	; 255
    ae5c:	c5 01       	movw	r24, r10
    ae5e:	0e 94 62 49 	call	0x92c4	; 0x92c4 <mem_cpy.part.0>
    ae62:	f6 e0       	ldi	r31, 0x06	; 6
    ae64:	4f 16       	cp	r4, r31
    ae66:	51 04       	cpc	r5, r1
    ae68:	18 f1       	brcs	.+70     	; 0xaeb0 <dir_register+0xc6>
    ae6a:	f1 01       	movw	r30, r2
    ae6c:	b3 01       	movw	r22, r6
    ae6e:	a2 01       	movw	r20, r4
    ae70:	81 91       	ld	r24, Z+
    ae72:	91 91       	ld	r25, Z+
    ae74:	00 97       	sbiw	r24, 0x00	; 0
    ae76:	d9 f0       	breq	.+54     	; 0xaeae <dir_register+0xc4>
    ae78:	20 e1       	ldi	r18, 0x10	; 16
    ae7a:	30 e0       	ldi	r19, 0x00	; 0
    ae7c:	44 0f       	add	r20, r20
    ae7e:	55 1f       	adc	r21, r21
    ae80:	66 1f       	adc	r22, r22
    ae82:	77 1f       	adc	r23, r23
    ae84:	dc 01       	movw	r26, r24
    ae86:	a1 70       	andi	r26, 0x01	; 1
    ae88:	bb 27       	eor	r27, r27
    ae8a:	4a 0f       	add	r20, r26
    ae8c:	5b 1f       	adc	r21, r27
    ae8e:	61 1d       	adc	r22, r1
    ae90:	71 1d       	adc	r23, r1
    ae92:	96 95       	lsr	r25
    ae94:	87 95       	ror	r24
    ae96:	60 ff       	sbrs	r22, 0
    ae98:	06 c0       	rjmp	.+12     	; 0xaea6 <dir_register+0xbc>
    ae9a:	a1 e2       	ldi	r26, 0x21	; 33
    ae9c:	4a 27       	eor	r20, r26
    ae9e:	a0 e1       	ldi	r26, 0x10	; 16
    aea0:	5a 27       	eor	r21, r26
    aea2:	a1 e0       	ldi	r26, 0x01	; 1
    aea4:	6a 27       	eor	r22, r26
    aea6:	21 50       	subi	r18, 0x01	; 1
    aea8:	31 09       	sbc	r19, r1
    aeaa:	41 f7       	brne	.-48     	; 0xae7c <dir_register+0x92>
    aeac:	e1 cf       	rjmp	.-62     	; 0xae70 <dir_register+0x86>
    aeae:	7a 01       	movw	r14, r20
    aeb0:	fe 01       	movw	r30, r28
    aeb2:	75 96       	adiw	r30, 0x15	; 21
    aeb4:	27 e0       	ldi	r18, 0x07	; 7
    aeb6:	30 e0       	ldi	r19, 0x00	; 0
    aeb8:	9e 2d       	mov	r25, r14
    aeba:	9f 70       	andi	r25, 0x0F	; 15
    aebc:	80 e3       	ldi	r24, 0x30	; 48
    aebe:	89 0f       	add	r24, r25
    aec0:	8a 33       	cpi	r24, 0x3A	; 58
    aec2:	10 f0       	brcs	.+4      	; 0xaec8 <dir_register+0xde>
    aec4:	87 e3       	ldi	r24, 0x37	; 55
    aec6:	89 0f       	add	r24, r25
    aec8:	21 50       	subi	r18, 0x01	; 1
    aeca:	31 09       	sbc	r19, r1
    aecc:	82 93       	st	-Z, r24
    aece:	a4 e0       	ldi	r26, 0x04	; 4
    aed0:	f6 94       	lsr	r15
    aed2:	e7 94       	ror	r14
    aed4:	aa 95       	dec	r26
    aed6:	e1 f7       	brne	.-8      	; 0xaed0 <dir_register+0xe6>
    aed8:	e1 14       	cp	r14, r1
    aeda:	f1 04       	cpc	r15, r1
    aedc:	69 f7       	brne	.-38     	; 0xaeb8 <dir_register+0xce>
    aede:	ed e0       	ldi	r30, 0x0D	; 13
    aee0:	f0 e0       	ldi	r31, 0x00	; 0
    aee2:	ec 0f       	add	r30, r28
    aee4:	fd 1f       	adc	r31, r29
    aee6:	e2 0f       	add	r30, r18
    aee8:	f3 1f       	adc	r31, r19
    aeea:	4e e7       	ldi	r20, 0x7E	; 126
    aeec:	40 83       	st	Z, r20
    aeee:	f5 01       	movw	r30, r10
    aef0:	80 e0       	ldi	r24, 0x00	; 0
    aef2:	90 e0       	ldi	r25, 0x00	; 0
    aef4:	28 17       	cp	r18, r24
    aef6:	39 07       	cpc	r19, r25
    aef8:	29 f0       	breq	.+10     	; 0xaf04 <dir_register+0x11a>
    aefa:	41 91       	ld	r20, Z+
    aefc:	40 32       	cpi	r20, 0x20	; 32
    aefe:	11 f0       	breq	.+4      	; 0xaf04 <dir_register+0x11a>
    af00:	01 96       	adiw	r24, 0x01	; 1
    af02:	f8 cf       	rjmp	.-16     	; 0xaef4 <dir_register+0x10a>
    af04:	f5 01       	movw	r30, r10
    af06:	e8 0f       	add	r30, r24
    af08:	f9 1f       	adc	r31, r25
    af0a:	28 30       	cpi	r18, 0x08	; 8
    af0c:	31 05       	cpc	r19, r1
    af0e:	50 f4       	brcc	.+20     	; 0xaf24 <dir_register+0x13a>
    af10:	ad e0       	ldi	r26, 0x0D	; 13
    af12:	b0 e0       	ldi	r27, 0x00	; 0
    af14:	ac 0f       	add	r26, r28
    af16:	bd 1f       	adc	r27, r29
    af18:	a2 0f       	add	r26, r18
    af1a:	b3 1f       	adc	r27, r19
    af1c:	8c 91       	ld	r24, X
    af1e:	2f 5f       	subi	r18, 0xFF	; 255
    af20:	3f 4f       	sbci	r19, 0xFF	; 255
    af22:	01 c0       	rjmp	.+2      	; 0xaf26 <dir_register+0x13c>
    af24:	80 e2       	ldi	r24, 0x20	; 32
    af26:	81 93       	st	Z+, r24
    af28:	cf 01       	movw	r24, r30
    af2a:	8a 19       	sub	r24, r10
    af2c:	9b 09       	sbc	r25, r11
    af2e:	08 97       	sbiw	r24, 0x08	; 8
    af30:	60 f3       	brcs	.-40     	; 0xaf0a <dir_register+0x120>
    af32:	c8 01       	movw	r24, r16
    af34:	4c de       	rcall	.-872    	; 0xabce <dir_find>
    af36:	00 97       	sbiw	r24, 0x00	; 0
    af38:	71 f4       	brne	.+28     	; 0xaf56 <dir_register+0x16c>
    af3a:	8f ef       	ldi	r24, 0xFF	; 255
    af3c:	48 1a       	sub	r4, r24
    af3e:	58 0a       	sbc	r5, r24
    af40:	68 0a       	sbc	r6, r24
    af42:	78 0a       	sbc	r7, r24
    af44:	94 e6       	ldi	r25, 0x64	; 100
    af46:	49 16       	cp	r4, r25
    af48:	51 04       	cpc	r5, r1
    af4a:	61 04       	cpc	r6, r1
    af4c:	71 04       	cpc	r7, r1
    af4e:	09 f0       	breq	.+2      	; 0xaf52 <dir_register+0x168>
    af50:	7c cf       	rjmp	.-264    	; 0xae4a <dir_register+0x60>
    af52:	27 e0       	ldi	r18, 0x07	; 7
    af54:	a9 c0       	rjmp	.+338    	; 0xb0a8 <dir_register+0x2be>
    af56:	84 30       	cpi	r24, 0x04	; 4
    af58:	91 05       	cpc	r25, r1
    af5a:	09 f0       	breq	.+2      	; 0xaf5e <dir_register+0x174>
    af5c:	ce c0       	rjmp	.+412    	; 0xb0fa <dir_register+0x310>
    af5e:	8c 85       	ldd	r24, Y+12	; 0x0c
    af60:	f8 01       	movw	r30, r16
    af62:	87 a3       	std	Z+39, r24	; 0x27
    af64:	8c 85       	ldd	r24, Y+12	; 0x0c
    af66:	81 ff       	sbrs	r24, 1
    af68:	0b c0       	rjmp	.+22     	; 0xaf80 <dir_register+0x196>
    af6a:	c4 01       	movw	r24, r8
    af6c:	0c 96       	adiw	r24, 0x0c	; 12
    af6e:	6d e0       	ldi	r22, 0x0D	; 13
    af70:	70 e0       	ldi	r23, 0x00	; 0
    af72:	0e 94 1f e3 	call	0x1c63e	; 0x1c63e <__udivmodhi4>
    af76:	7b 01       	movw	r14, r22
    af78:	ff ef       	ldi	r31, 0xFF	; 255
    af7a:	ef 1a       	sub	r14, r31
    af7c:	ff 0a       	sbc	r15, r31
    af7e:	03 c0       	rjmp	.+6      	; 0xaf86 <dir_register+0x19c>
    af80:	ee 24       	eor	r14, r14
    af82:	e3 94       	inc	r14
    af84:	f1 2c       	mov	r15, r1
    af86:	b7 01       	movw	r22, r14
    af88:	c8 01       	movw	r24, r16
    af8a:	d7 dc       	rcall	.-1618   	; 0xa93a <dir_alloc>
    af8c:	00 97       	sbiw	r24, 0x00	; 0
    af8e:	09 f0       	breq	.+2      	; 0xaf92 <dir_register+0x1a8>
    af90:	b4 c0       	rjmp	.+360    	; 0xb0fa <dir_register+0x310>
    af92:	21 e0       	ldi	r18, 0x01	; 1
    af94:	e2 1a       	sub	r14, r18
    af96:	f1 08       	sbc	r15, r1
    af98:	09 f4       	brne	.+2      	; 0xaf9c <dir_register+0x1b2>
    af9a:	88 c0       	rjmp	.+272    	; 0xb0ac <dir_register+0x2c2>
    af9c:	f8 01       	movw	r30, r16
    af9e:	46 85       	ldd	r20, Z+14	; 0x0e
    afa0:	57 85       	ldd	r21, Z+15	; 0x0f
    afa2:	60 89       	ldd	r22, Z+16	; 0x10
    afa4:	71 89       	ldd	r23, Z+17	; 0x11
    afa6:	c7 01       	movw	r24, r14
    afa8:	e5 e0       	ldi	r30, 0x05	; 5
    afaa:	88 0f       	add	r24, r24
    afac:	99 1f       	adc	r25, r25
    afae:	ea 95       	dec	r30
    afb0:	e1 f7       	brne	.-8      	; 0xafaa <dir_register+0x1c0>
    afb2:	48 1b       	sub	r20, r24
    afb4:	59 0b       	sbc	r21, r25
    afb6:	61 09       	sbc	r22, r1
    afb8:	71 09       	sbc	r23, r1
    afba:	c8 01       	movw	r24, r16
    afbc:	5e d9       	rcall	.-3396   	; 0xa27a <dir_sdi>
    afbe:	00 97       	sbiw	r24, 0x00	; 0
    afc0:	09 f0       	breq	.+2      	; 0xafc4 <dir_register+0x1da>
    afc2:	9b c0       	rjmp	.+310    	; 0xb0fa <dir_register+0x310>
    afc4:	c5 01       	movw	r24, r10
    afc6:	0e 94 fb 48 	call	0x91f6	; 0x91f6 <sum_sfn>
    afca:	68 2e       	mov	r6, r24
    afcc:	5f e0       	ldi	r21, 0x0F	; 15
    afce:	35 2e       	mov	r3, r21
    afd0:	6d e0       	ldi	r22, 0x0D	; 13
    afd2:	46 2e       	mov	r4, r22
    afd4:	78 e1       	ldi	r23, 0x18	; 24
    afd6:	87 2e       	mov	r8, r23
    afd8:	74 e0       	ldi	r23, 0x04	; 4
    afda:	97 2e       	mov	r9, r23
    afdc:	55 24       	eor	r5, r5
    afde:	53 94       	inc	r5
    afe0:	f8 01       	movw	r30, r16
    afe2:	46 89       	ldd	r20, Z+22	; 0x16
    afe4:	57 89       	ldd	r21, Z+23	; 0x17
    afe6:	60 8d       	ldd	r22, Z+24	; 0x18
    afe8:	71 8d       	ldd	r23, Z+25	; 0x19
    afea:	c6 01       	movw	r24, r12
    afec:	0e 94 b9 4c 	call	0x9972	; 0x9972 <move_window>
    aff0:	00 97       	sbiw	r24, 0x00	; 0
    aff2:	09 f0       	breq	.+2      	; 0xaff6 <dir_register+0x20c>
    aff4:	82 c0       	rjmp	.+260    	; 0xb0fa <dir_register+0x310>
    aff6:	f6 01       	movw	r30, r12
    aff8:	63 85       	ldd	r22, Z+11	; 0x0b
    affa:	74 85       	ldd	r23, Z+12	; 0x0c
    affc:	f8 01       	movw	r30, r16
    affe:	02 8c       	ldd	r0, Z+26	; 0x1a
    b000:	f3 8d       	ldd	r31, Z+27	; 0x1b
    b002:	e0 2d       	mov	r30, r0
    b004:	fe 8b       	std	Y+22, r31	; 0x16
    b006:	ed 8b       	std	Y+21, r30	; 0x15
    b008:	7e 2c       	mov	r7, r14
    b00a:	65 86       	std	Z+13, r6	; 0x0d
    b00c:	33 86       	std	Z+11, r3	; 0x0b
    b00e:	14 86       	std	Z+12, r1	; 0x0c
    b010:	12 8e       	std	Z+26, r1	; 0x1a
    b012:	13 8e       	std	Z+27, r1	; 0x1b
    b014:	97 01       	movw	r18, r14
    b016:	33 27       	eor	r19, r19
    b018:	21 50       	subi	r18, 0x01	; 1
    b01a:	31 09       	sbc	r19, r1
    b01c:	42 9e       	mul	r4, r18
    b01e:	c0 01       	movw	r24, r0
    b020:	43 9e       	mul	r4, r19
    b022:	90 0d       	add	r25, r0
    b024:	11 24       	eor	r1, r1
    b026:	ab e0       	ldi	r26, 0x0B	; 11
    b028:	b4 e0       	ldi	r27, 0x04	; 4
    b02a:	20 e0       	ldi	r18, 0x00	; 0
    b02c:	30 e0       	ldi	r19, 0x00	; 0
    b02e:	2f 3f       	cpi	r18, 0xFF	; 255
    b030:	ff ef       	ldi	r31, 0xFF	; 255
    b032:	3f 07       	cpc	r19, r31
    b034:	49 f0       	breq	.+18     	; 0xb048 <dir_register+0x25e>
    b036:	9c 01       	movw	r18, r24
    b038:	22 0f       	add	r18, r18
    b03a:	33 1f       	adc	r19, r19
    b03c:	26 0f       	add	r18, r22
    b03e:	37 1f       	adc	r19, r23
    b040:	f9 01       	movw	r30, r18
    b042:	20 81       	ld	r18, Z
    b044:	31 81       	ldd	r19, Z+1	; 0x01
    b046:	01 96       	adiw	r24, 0x01	; 1
    b048:	4d 91       	ld	r20, X+
    b04a:	ed 89       	ldd	r30, Y+21	; 0x15
    b04c:	fe 89       	ldd	r31, Y+22	; 0x16
    b04e:	e4 0f       	add	r30, r20
    b050:	f1 1d       	adc	r31, r1
    b052:	20 83       	st	Z, r18
    b054:	31 83       	std	Z+1, r19	; 0x01
    b056:	21 15       	cp	r18, r1
    b058:	31 05       	cpc	r19, r1
    b05a:	11 f4       	brne	.+4      	; 0xb060 <dir_register+0x276>
    b05c:	2f ef       	ldi	r18, 0xFF	; 255
    b05e:	3f ef       	ldi	r19, 0xFF	; 255
    b060:	8a 16       	cp	r8, r26
    b062:	9b 06       	cpc	r9, r27
    b064:	21 f7       	brne	.-56     	; 0xb02e <dir_register+0x244>
    b066:	2f 3f       	cpi	r18, 0xFF	; 255
    b068:	3f 4f       	sbci	r19, 0xFF	; 255
    b06a:	49 f0       	breq	.+18     	; 0xb07e <dir_register+0x294>
    b06c:	88 0f       	add	r24, r24
    b06e:	99 1f       	adc	r25, r25
    b070:	db 01       	movw	r26, r22
    b072:	a8 0f       	add	r26, r24
    b074:	b9 1f       	adc	r27, r25
    b076:	8d 91       	ld	r24, X+
    b078:	9c 91       	ld	r25, X
    b07a:	89 2b       	or	r24, r25
    b07c:	19 f4       	brne	.+6      	; 0xb084 <dir_register+0x29a>
    b07e:	27 2d       	mov	r18, r7
    b080:	20 64       	ori	r18, 0x40	; 64
    b082:	72 2e       	mov	r7, r18
    b084:	ed 89       	ldd	r30, Y+21	; 0x15
    b086:	fe 89       	ldd	r31, Y+22	; 0x16
    b088:	70 82       	st	Z, r7
    b08a:	f6 01       	movw	r30, r12
    b08c:	53 82       	std	Z+3, r5	; 0x03
    b08e:	60 e0       	ldi	r22, 0x00	; 0
    b090:	70 e0       	ldi	r23, 0x00	; 0
    b092:	c8 01       	movw	r24, r16
    b094:	6a db       	rcall	.-2348   	; 0xa76a <dir_next>
    b096:	00 97       	sbiw	r24, 0x00	; 0
    b098:	81 f5       	brne	.+96     	; 0xb0fa <dir_register+0x310>
    b09a:	f1 e0       	ldi	r31, 0x01	; 1
    b09c:	ef 1a       	sub	r14, r31
    b09e:	f1 08       	sbc	r15, r1
    b0a0:	09 f0       	breq	.+2      	; 0xb0a4 <dir_register+0x2ba>
    b0a2:	9e cf       	rjmp	.-196    	; 0xafe0 <dir_register+0x1f6>
    b0a4:	03 c0       	rjmp	.+6      	; 0xb0ac <dir_register+0x2c2>
    b0a6:	26 e0       	ldi	r18, 0x06	; 6
    b0a8:	90 e0       	ldi	r25, 0x00	; 0
    b0aa:	28 c0       	rjmp	.+80     	; 0xb0fc <dir_register+0x312>
    b0ac:	f8 01       	movw	r30, r16
    b0ae:	46 89       	ldd	r20, Z+22	; 0x16
    b0b0:	57 89       	ldd	r21, Z+23	; 0x17
    b0b2:	60 8d       	ldd	r22, Z+24	; 0x18
    b0b4:	71 8d       	ldd	r23, Z+25	; 0x19
    b0b6:	c6 01       	movw	r24, r12
    b0b8:	0e 94 b9 4c 	call	0x9972	; 0x9972 <move_window>
    b0bc:	00 97       	sbiw	r24, 0x00	; 0
    b0be:	e9 f4       	brne	.+58     	; 0xb0fa <dir_register+0x310>
    b0c0:	40 e2       	ldi	r20, 0x20	; 32
    b0c2:	50 e0       	ldi	r21, 0x00	; 0
    b0c4:	60 e0       	ldi	r22, 0x00	; 0
    b0c6:	70 e0       	ldi	r23, 0x00	; 0
    b0c8:	f8 01       	movw	r30, r16
    b0ca:	82 8d       	ldd	r24, Z+26	; 0x1a
    b0cc:	93 8d       	ldd	r25, Z+27	; 0x1b
    b0ce:	0e 94 f9 47 	call	0x8ff2	; 0x8ff2 <mem_set>
    b0d2:	4b e0       	ldi	r20, 0x0B	; 11
    b0d4:	50 e0       	ldi	r21, 0x00	; 0
    b0d6:	b5 01       	movw	r22, r10
    b0d8:	f8 01       	movw	r30, r16
    b0da:	82 8d       	ldd	r24, Z+26	; 0x1a
    b0dc:	93 8d       	ldd	r25, Z+27	; 0x1b
    b0de:	0e 94 62 49 	call	0x92c4	; 0x92c4 <mem_cpy.part.0>
    b0e2:	f8 01       	movw	r30, r16
    b0e4:	22 8d       	ldd	r18, Z+26	; 0x1a
    b0e6:	33 8d       	ldd	r19, Z+27	; 0x1b
    b0e8:	87 a1       	ldd	r24, Z+39	; 0x27
    b0ea:	88 71       	andi	r24, 0x18	; 24
    b0ec:	f9 01       	movw	r30, r18
    b0ee:	84 87       	std	Z+12, r24	; 0x0c
    b0f0:	81 e0       	ldi	r24, 0x01	; 1
    b0f2:	f6 01       	movw	r30, r12
    b0f4:	83 83       	std	Z+3, r24	; 0x03
    b0f6:	20 e0       	ldi	r18, 0x00	; 0
    b0f8:	d7 cf       	rjmp	.-82     	; 0xb0a8 <dir_register+0x2be>
    b0fa:	28 2f       	mov	r18, r24
    b0fc:	82 2f       	mov	r24, r18
    b0fe:	66 96       	adiw	r28, 0x16	; 22
    b100:	e2 e1       	ldi	r30, 0x12	; 18
    b102:	0c 94 e4 e3 	jmp	0x1c7c8	; 0x1c7c8 <__epilogue_restores__>

0000b106 <follow_path>:
    b106:	aa e0       	ldi	r26, 0x0A	; 10
    b108:	b0 e0       	ldi	r27, 0x00	; 0
    b10a:	e9 e8       	ldi	r30, 0x89	; 137
    b10c:	f8 e5       	ldi	r31, 0x58	; 88
    b10e:	0c 94 c8 e3 	jmp	0x1c790	; 0x1c790 <__prologue_saves__>
    b112:	7c 01       	movw	r14, r24
    b114:	3b 01       	movw	r6, r22
    b116:	dc 01       	movw	r26, r24
    b118:	0d 90       	ld	r0, X+
    b11a:	bc 91       	ld	r27, X
    b11c:	a0 2d       	mov	r26, r0
    b11e:	be 83       	std	Y+6, r27	; 0x06
    b120:	ad 83       	std	Y+5, r26	; 0x05
    b122:	fb 01       	movw	r30, r22
    b124:	80 81       	ld	r24, Z
    b126:	8f 32       	cpi	r24, 0x2F	; 47
    b128:	11 f0       	breq	.+4      	; 0xb12e <follow_path+0x28>
    b12a:	8c 35       	cpi	r24, 0x5C	; 92
    b12c:	11 f4       	brne	.+4      	; 0xb132 <follow_path+0x2c>
    b12e:	93 01       	movw	r18, r6
    b130:	0c c0       	rjmp	.+24     	; 0xb14a <follow_path+0x44>
    b132:	ed 81       	ldd	r30, Y+5	; 0x05
    b134:	fe 81       	ldd	r31, Y+6	; 0x06
    b136:	85 89       	ldd	r24, Z+21	; 0x15
    b138:	96 89       	ldd	r25, Z+22	; 0x16
    b13a:	a7 89       	ldd	r26, Z+23	; 0x17
    b13c:	b0 8d       	ldd	r27, Z+24	; 0x18
    b13e:	f7 01       	movw	r30, r14
    b140:	86 83       	std	Z+6, r24	; 0x06
    b142:	97 83       	std	Z+7, r25	; 0x07
    b144:	a0 87       	std	Z+8, r26	; 0x08
    b146:	b1 87       	std	Z+9, r27	; 0x09
    b148:	0e c0       	rjmp	.+28     	; 0xb166 <follow_path+0x60>
    b14a:	39 01       	movw	r6, r18
    b14c:	d9 01       	movw	r26, r18
    b14e:	8c 91       	ld	r24, X
    b150:	2f 5f       	subi	r18, 0xFF	; 255
    b152:	3f 4f       	sbci	r19, 0xFF	; 255
    b154:	8f 32       	cpi	r24, 0x2F	; 47
    b156:	c9 f3       	breq	.-14     	; 0xb14a <follow_path+0x44>
    b158:	8c 35       	cpi	r24, 0x5C	; 92
    b15a:	b9 f3       	breq	.-18     	; 0xb14a <follow_path+0x44>
    b15c:	f7 01       	movw	r30, r14
    b15e:	16 82       	std	Z+6, r1	; 0x06
    b160:	17 82       	std	Z+7, r1	; 0x07
    b162:	10 86       	std	Z+8, r1	; 0x08
    b164:	11 86       	std	Z+9, r1	; 0x09
    b166:	d3 01       	movw	r26, r6
    b168:	8c 91       	ld	r24, X
    b16a:	80 32       	cpi	r24, 0x20	; 32
    b16c:	58 f0       	brcs	.+22     	; 0xb184 <follow_path+0x7e>
    b16e:	f7 01       	movw	r30, r14
    b170:	7c 96       	adiw	r30, 0x1c	; 28
    b172:	f8 87       	std	Y+8, r31	; 0x08
    b174:	ef 83       	std	Y+7, r30	; 0x07
    b176:	2d 81       	ldd	r18, Y+5	; 0x05
    b178:	3e 81       	ldd	r19, Y+6	; 0x06
    b17a:	2b 5c       	subi	r18, 0xCB	; 203
    b17c:	3f 4f       	sbci	r19, 0xFF	; 255
    b17e:	3a 87       	std	Y+10, r19	; 0x0a
    b180:	29 87       	std	Y+9, r18	; 0x09
    b182:	96 c0       	rjmp	.+300    	; 0xb2b0 <follow_path+0x1aa>
    b184:	80 e8       	ldi	r24, 0x80	; 128
    b186:	f7 01       	movw	r30, r14
    b188:	87 a3       	std	Z+39, r24	; 0x27
    b18a:	40 e0       	ldi	r20, 0x00	; 0
    b18c:	50 e0       	ldi	r21, 0x00	; 0
    b18e:	ba 01       	movw	r22, r20
    b190:	c7 01       	movw	r24, r14
    b192:	73 d8       	rcall	.-3866   	; 0xa27a <dir_sdi>
    b194:	e5 c1       	rjmp	.+970    	; 0xb560 <follow_path+0x45a>
    b196:	6c 35       	cpi	r22, 0x5C	; 92
    b198:	71 05       	cpc	r23, r1
    b19a:	b9 f1       	breq	.+110    	; 0xb20a <follow_path+0x104>
    b19c:	60 38       	cpi	r22, 0x80	; 128
    b19e:	71 05       	cpc	r23, r1
    b1a0:	28 f4       	brcc	.+10     	; 0xb1ac <follow_path+0xa6>
    b1a2:	e7 e4       	ldi	r30, 0x47	; 71
    b1a4:	f3 e0       	ldi	r31, 0x03	; 3
    b1a6:	41 91       	ld	r20, Z+
    b1a8:	41 11       	cpse	r20, r1
    b1aa:	8c c0       	rjmp	.+280    	; 0xb2c4 <follow_path+0x1be>
    b1ac:	0f 3f       	cpi	r16, 0xFF	; 255
    b1ae:	11 05       	cpc	r17, r1
    b1b0:	08 f0       	brcs	.+2      	; 0xb1b4 <follow_path+0xae>
    b1b2:	b9 c1       	rjmp	.+882    	; 0xb526 <follow_path+0x420>
    b1b4:	f8 01       	movw	r30, r16
    b1b6:	ee 0f       	add	r30, r30
    b1b8:	ff 1f       	adc	r31, r31
    b1ba:	ea 0d       	add	r30, r10
    b1bc:	fb 1d       	adc	r31, r11
    b1be:	71 83       	std	Z+1, r23	; 0x01
    b1c0:	60 83       	st	Z, r22
    b1c2:	0f 5f       	subi	r16, 0xFF	; 255
    b1c4:	1f 4f       	sbci	r17, 0xFF	; 255
    b1c6:	ce 01       	movw	r24, r28
    b1c8:	01 96       	adiw	r24, 0x01	; 1
    b1ca:	0e 94 11 48 	call	0x9022	; 0x9022 <tchar2uni>
    b1ce:	6f 3f       	cpi	r22, 0xFF	; 255
    b1d0:	bf ef       	ldi	r27, 0xFF	; 255
    b1d2:	7b 07       	cpc	r23, r27
    b1d4:	8b 07       	cpc	r24, r27
    b1d6:	9b 07       	cpc	r25, r27
    b1d8:	09 f4       	brne	.+2      	; 0xb1dc <follow_path+0xd6>
    b1da:	a5 c1       	rjmp	.+842    	; 0xb526 <follow_path+0x420>
    b1dc:	61 15       	cp	r22, r1
    b1de:	71 05       	cpc	r23, r1
    b1e0:	e1 e0       	ldi	r30, 0x01	; 1
    b1e2:	8e 07       	cpc	r24, r30
    b1e4:	91 05       	cpc	r25, r1
    b1e6:	48 f0       	brcs	.+18     	; 0xb1fa <follow_path+0xf4>
    b1e8:	f8 01       	movw	r30, r16
    b1ea:	ee 0f       	add	r30, r30
    b1ec:	ff 1f       	adc	r31, r31
    b1ee:	ea 0d       	add	r30, r10
    b1f0:	fb 1d       	adc	r31, r11
    b1f2:	91 83       	std	Z+1, r25	; 0x01
    b1f4:	80 83       	st	Z, r24
    b1f6:	0f 5f       	subi	r16, 0xFF	; 255
    b1f8:	1f 4f       	sbci	r17, 0xFF	; 255
    b1fa:	9b 01       	movw	r18, r22
    b1fc:	60 32       	cpi	r22, 0x20	; 32
    b1fe:	71 05       	cpc	r23, r1
    b200:	08 f4       	brcc	.+2      	; 0xb204 <follow_path+0xfe>
    b202:	6a c0       	rjmp	.+212    	; 0xb2d8 <follow_path+0x1d2>
    b204:	6f 32       	cpi	r22, 0x2F	; 47
    b206:	71 05       	cpc	r23, r1
    b208:	31 f6       	brne	.-116    	; 0xb196 <follow_path+0x90>
    b20a:	e9 81       	ldd	r30, Y+1	; 0x01
    b20c:	fa 81       	ldd	r31, Y+2	; 0x02
    b20e:	80 81       	ld	r24, Z
    b210:	8f 32       	cpi	r24, 0x2F	; 47
    b212:	09 f4       	brne	.+2      	; 0xb216 <follow_path+0x110>
    b214:	5d c0       	rjmp	.+186    	; 0xb2d0 <follow_path+0x1ca>
    b216:	8c 35       	cpi	r24, 0x5C	; 92
    b218:	09 f4       	brne	.+2      	; 0xb21c <follow_path+0x116>
    b21a:	5a c0       	rjmp	.+180    	; 0xb2d0 <follow_path+0x1ca>
    b21c:	1b 82       	std	Y+3, r1	; 0x03
    b21e:	69 80       	ldd	r6, Y+1	; 0x01
    b220:	7a 80       	ldd	r7, Y+2	; 0x02
    b222:	98 01       	movw	r18, r16
    b224:	22 0f       	add	r18, r18
    b226:	33 1f       	adc	r19, r19
    b228:	01 30       	cpi	r16, 0x01	; 1
    b22a:	11 05       	cpc	r17, r1
    b22c:	09 f0       	breq	.+2      	; 0xb230 <follow_path+0x12a>
    b22e:	57 c0       	rjmp	.+174    	; 0xb2de <follow_path+0x1d8>
    b230:	d5 01       	movw	r26, r10
    b232:	8d 91       	ld	r24, X+
    b234:	9c 91       	ld	r25, X
    b236:	8e 97       	sbiw	r24, 0x2e	; 46
    b238:	09 f0       	breq	.+2      	; 0xb23c <follow_path+0x136>
    b23a:	5c c0       	rjmp	.+184    	; 0xb2f4 <follow_path+0x1ee>
    b23c:	f9 01       	movw	r30, r18
    b23e:	ea 0d       	add	r30, r10
    b240:	fb 1d       	adc	r31, r11
    b242:	11 82       	std	Z+1, r1	; 0x01
    b244:	10 82       	st	Z, r1
    b246:	f7 01       	movw	r30, r14
    b248:	7c 96       	adiw	r30, 0x1c	; 28
    b24a:	80 e0       	ldi	r24, 0x00	; 0
    b24c:	90 e0       	ldi	r25, 0x00	; 0
    b24e:	80 17       	cp	r24, r16
    b250:	91 07       	cpc	r25, r17
    b252:	08 f0       	brcs	.+2      	; 0xb256 <follow_path+0x150>
    b254:	53 c0       	rjmp	.+166    	; 0xb2fc <follow_path+0x1f6>
    b256:	2e e2       	ldi	r18, 0x2E	; 46
    b258:	21 93       	st	Z+, r18
    b25a:	01 96       	adiw	r24, 0x01	; 1
    b25c:	8b 30       	cpi	r24, 0x0B	; 11
    b25e:	91 05       	cpc	r25, r1
    b260:	b1 f7       	brne	.-20     	; 0xb24e <follow_path+0x148>
    b262:	8b 81       	ldd	r24, Y+3	; 0x03
    b264:	80 62       	ori	r24, 0x20	; 32
    b266:	f7 01       	movw	r30, r14
    b268:	87 a3       	std	Z+39, r24	; 0x27
    b26a:	80 e0       	ldi	r24, 0x00	; 0
    b26c:	90 e0       	ldi	r25, 0x00	; 0
    b26e:	00 97       	sbiw	r24, 0x00	; 0
    b270:	09 f0       	breq	.+2      	; 0xb274 <follow_path+0x16e>
    b272:	76 c1       	rjmp	.+748    	; 0xb560 <follow_path+0x45a>
    b274:	c7 01       	movw	r24, r14
    b276:	ab dc       	rcall	.-1706   	; 0xabce <dir_find>
    b278:	f7 01       	movw	r30, r14
    b27a:	27 a1       	ldd	r18, Z+39	; 0x27
    b27c:	00 97       	sbiw	r24, 0x00	; 0
    b27e:	09 f0       	breq	.+2      	; 0xb282 <follow_path+0x17c>
    b280:	55 c1       	rjmp	.+682    	; 0xb52c <follow_path+0x426>
    b282:	22 fd       	sbrc	r18, 2
    b284:	6d c1       	rjmp	.+730    	; 0xb560 <follow_path+0x45a>
    b286:	f7 01       	movw	r30, r14
    b288:	84 81       	ldd	r24, Z+4	; 0x04
    b28a:	84 ff       	sbrs	r24, 4
    b28c:	60 c1       	rjmp	.+704    	; 0xb54e <follow_path+0x448>
    b28e:	66 85       	ldd	r22, Z+14	; 0x0e
    b290:	77 85       	ldd	r23, Z+15	; 0x0f
    b292:	71 70       	andi	r23, 0x01	; 1
    b294:	29 85       	ldd	r18, Y+9	; 0x09
    b296:	3a 85       	ldd	r19, Y+10	; 0x0a
    b298:	62 0f       	add	r22, r18
    b29a:	73 1f       	adc	r23, r19
    b29c:	ad 81       	ldd	r26, Y+5	; 0x05
    b29e:	be 81       	ldd	r27, Y+6	; 0x06
    b2a0:	8c 91       	ld	r24, X
    b2a2:	0e 94 2a 4b 	call	0x9654	; 0x9654 <ld_clust.isra.4>
    b2a6:	f7 01       	movw	r30, r14
    b2a8:	66 83       	std	Z+6, r22	; 0x06
    b2aa:	77 83       	std	Z+7, r23	; 0x07
    b2ac:	80 87       	std	Z+8, r24	; 0x08
    b2ae:	91 87       	std	Z+9, r25	; 0x09
    b2b0:	7a 82       	std	Y+2, r7	; 0x02
    b2b2:	69 82       	std	Y+1, r6	; 0x01
    b2b4:	d7 01       	movw	r26, r14
    b2b6:	ed 91       	ld	r30, X+
    b2b8:	fc 91       	ld	r31, X
    b2ba:	a3 84       	ldd	r10, Z+11	; 0x0b
    b2bc:	b4 84       	ldd	r11, Z+12	; 0x0c
    b2be:	00 e0       	ldi	r16, 0x00	; 0
    b2c0:	10 e0       	ldi	r17, 0x00	; 0
    b2c2:	81 cf       	rjmp	.-254    	; 0xb1c6 <follow_path+0xc0>
    b2c4:	50 e0       	ldi	r21, 0x00	; 0
    b2c6:	24 17       	cp	r18, r20
    b2c8:	35 07       	cpc	r19, r21
    b2ca:	09 f0       	breq	.+2      	; 0xb2ce <follow_path+0x1c8>
    b2cc:	6c cf       	rjmp	.-296    	; 0xb1a6 <follow_path+0xa0>
    b2ce:	2b c1       	rjmp	.+598    	; 0xb526 <follow_path+0x420>
    b2d0:	31 96       	adiw	r30, 0x01	; 1
    b2d2:	fa 83       	std	Y+2, r31	; 0x02
    b2d4:	e9 83       	std	Y+1, r30	; 0x01
    b2d6:	99 cf       	rjmp	.-206    	; 0xb20a <follow_path+0x104>
    b2d8:	f4 e0       	ldi	r31, 0x04	; 4
    b2da:	fb 83       	std	Y+3, r31	; 0x03
    b2dc:	a0 cf       	rjmp	.-192    	; 0xb21e <follow_path+0x118>
    b2de:	02 30       	cpi	r16, 0x02	; 2
    b2e0:	11 05       	cpc	r17, r1
    b2e2:	41 f4       	brne	.+16     	; 0xb2f4 <follow_path+0x1ee>
    b2e4:	f5 01       	movw	r30, r10
    b2e6:	82 81       	ldd	r24, Z+2	; 0x02
    b2e8:	93 81       	ldd	r25, Z+3	; 0x03
    b2ea:	8e 97       	sbiw	r24, 0x2e	; 46
    b2ec:	19 f4       	brne	.+6      	; 0xb2f4 <follow_path+0x1ee>
    b2ee:	80 81       	ld	r24, Z
    b2f0:	91 81       	ldd	r25, Z+1	; 0x01
    b2f2:	a1 cf       	rjmp	.-190    	; 0xb236 <follow_path+0x130>
    b2f4:	f9 01       	movw	r30, r18
    b2f6:	ea 0d       	add	r30, r10
    b2f8:	fb 1d       	adc	r31, r11
    b2fa:	09 c0       	rjmp	.+18     	; 0xb30e <follow_path+0x208>
    b2fc:	20 e2       	ldi	r18, 0x20	; 32
    b2fe:	ac cf       	rjmp	.-168    	; 0xb258 <follow_path+0x152>
    b300:	92 91       	ld	r25, -Z
    b302:	82 91       	ld	r24, -Z
    b304:	80 32       	cpi	r24, 0x20	; 32
    b306:	91 05       	cpc	r25, r1
    b308:	31 f4       	brne	.+12     	; 0xb316 <follow_path+0x210>
    b30a:	01 50       	subi	r16, 0x01	; 1
    b30c:	11 09       	sbc	r17, r1
    b30e:	01 15       	cp	r16, r1
    b310:	11 05       	cpc	r17, r1
    b312:	b1 f7       	brne	.-20     	; 0xb300 <follow_path+0x1fa>
    b314:	02 c0       	rjmp	.+4      	; 0xb31a <follow_path+0x214>
    b316:	8e 97       	sbiw	r24, 0x2e	; 46
    b318:	c1 f3       	breq	.-16     	; 0xb30a <follow_path+0x204>
    b31a:	f8 01       	movw	r30, r16
    b31c:	ee 0f       	add	r30, r30
    b31e:	ff 1f       	adc	r31, r31
    b320:	ea 0d       	add	r30, r10
    b322:	fb 1d       	adc	r31, r11
    b324:	11 82       	std	Z+1, r1	; 0x01
    b326:	10 82       	st	Z, r1
    b328:	01 15       	cp	r16, r1
    b32a:	11 05       	cpc	r17, r1
    b32c:	09 f4       	brne	.+2      	; 0xb330 <follow_path+0x22a>
    b32e:	fb c0       	rjmp	.+502    	; 0xb526 <follow_path+0x420>
    b330:	d5 01       	movw	r26, r10
    b332:	41 2c       	mov	r4, r1
    b334:	51 2c       	mov	r5, r1
    b336:	8d 91       	ld	r24, X+
    b338:	9d 91       	ld	r25, X+
    b33a:	80 32       	cpi	r24, 0x20	; 32
    b33c:	91 05       	cpc	r25, r1
    b33e:	21 f4       	brne	.+8      	; 0xb348 <follow_path+0x242>
    b340:	2f ef       	ldi	r18, 0xFF	; 255
    b342:	42 1a       	sub	r4, r18
    b344:	52 0a       	sbc	r5, r18
    b346:	f7 cf       	rjmp	.-18     	; 0xb336 <follow_path+0x230>
    b348:	41 14       	cp	r4, r1
    b34a:	51 04       	cpc	r5, r1
    b34c:	11 f4       	brne	.+4      	; 0xb352 <follow_path+0x24c>
    b34e:	8e 97       	sbiw	r24, 0x2e	; 46
    b350:	39 f4       	brne	.+14     	; 0xb360 <follow_path+0x25a>
    b352:	3b 81       	ldd	r19, Y+3	; 0x03
    b354:	33 60       	ori	r19, 0x03	; 3
    b356:	3b 83       	std	Y+3, r19	; 0x03
    b358:	03 c0       	rjmp	.+6      	; 0xb360 <follow_path+0x25a>
    b35a:	01 50       	subi	r16, 0x01	; 1
    b35c:	11 09       	sbc	r17, r1
    b35e:	21 f0       	breq	.+8      	; 0xb368 <follow_path+0x262>
    b360:	92 91       	ld	r25, -Z
    b362:	82 91       	ld	r24, -Z
    b364:	8e 97       	sbiw	r24, 0x2e	; 46
    b366:	c9 f7       	brne	.-14     	; 0xb35a <follow_path+0x254>
    b368:	4b e0       	ldi	r20, 0x0B	; 11
    b36a:	50 e0       	ldi	r21, 0x00	; 0
    b36c:	60 e2       	ldi	r22, 0x20	; 32
    b36e:	70 e0       	ldi	r23, 0x00	; 0
    b370:	8f 81       	ldd	r24, Y+7	; 0x07
    b372:	98 85       	ldd	r25, Y+8	; 0x08
    b374:	0e 94 f9 47 	call	0x8ff2	; 0x8ff2 <mem_set>
    b378:	48 e0       	ldi	r20, 0x08	; 8
    b37a:	84 2e       	mov	r8, r20
    b37c:	91 2c       	mov	r9, r1
    b37e:	c1 2c       	mov	r12, r1
    b380:	d1 2c       	mov	r13, r1
    b382:	1c 82       	std	Y+4, r1	; 0x04
    b384:	12 01       	movw	r2, r4
    b386:	8f ef       	ldi	r24, 0xFF	; 255
    b388:	28 1a       	sub	r2, r24
    b38a:	38 0a       	sbc	r3, r24
    b38c:	44 0c       	add	r4, r4
    b38e:	55 1c       	adc	r5, r5
    b390:	f5 01       	movw	r30, r10
    b392:	e4 0d       	add	r30, r4
    b394:	f5 1d       	adc	r31, r5
    b396:	80 81       	ld	r24, Z
    b398:	91 81       	ldd	r25, Z+1	; 0x01
    b39a:	00 97       	sbiw	r24, 0x00	; 0
    b39c:	09 f4       	brne	.+2      	; 0xb3a0 <follow_path+0x29a>
    b39e:	98 c0       	rjmp	.+304    	; 0xb4d0 <follow_path+0x3ca>
    b3a0:	80 32       	cpi	r24, 0x20	; 32
    b3a2:	91 05       	cpc	r25, r1
    b3a4:	31 f0       	breq	.+12     	; 0xb3b2 <follow_path+0x2ac>
    b3a6:	8e 32       	cpi	r24, 0x2E	; 46
    b3a8:	91 05       	cpc	r25, r1
    b3aa:	41 f4       	brne	.+16     	; 0xb3bc <follow_path+0x2b6>
    b3ac:	20 16       	cp	r2, r16
    b3ae:	31 06       	cpc	r3, r17
    b3b0:	61 f0       	breq	.+24     	; 0xb3ca <follow_path+0x2c4>
    b3b2:	9b 81       	ldd	r25, Y+3	; 0x03
    b3b4:	93 60       	ori	r25, 0x03	; 3
    b3b6:	9b 83       	std	Y+3, r25	; 0x03
    b3b8:	21 01       	movw	r4, r2
    b3ba:	e4 cf       	rjmp	.-56     	; 0xb384 <follow_path+0x27e>
    b3bc:	c8 14       	cp	r12, r8
    b3be:	d9 04       	cpc	r13, r9
    b3c0:	40 f4       	brcc	.+16     	; 0xb3d2 <follow_path+0x2cc>
    b3c2:	20 16       	cp	r2, r16
    b3c4:	31 06       	cpc	r3, r17
    b3c6:	31 f5       	brne	.+76     	; 0xb414 <follow_path+0x30e>
    b3c8:	c5 c0       	rjmp	.+394    	; 0xb554 <follow_path+0x44e>
    b3ca:	c8 14       	cp	r12, r8
    b3cc:	d9 04       	cpc	r13, r9
    b3ce:	08 f4       	brcc	.+2      	; 0xb3d2 <follow_path+0x2cc>
    b3d0:	c1 c0       	rjmp	.+386    	; 0xb554 <follow_path+0x44e>
    b3d2:	ab e0       	ldi	r26, 0x0B	; 11
    b3d4:	8a 16       	cp	r8, r26
    b3d6:	91 04       	cpc	r9, r1
    b3d8:	39 f4       	brne	.+14     	; 0xb3e8 <follow_path+0x2e2>
    b3da:	bb 81       	ldd	r27, Y+3	; 0x03
    b3dc:	b3 60       	ori	r27, 0x03	; 3
    b3de:	bb 83       	std	Y+3, r27	; 0x03
    b3e0:	2b e0       	ldi	r18, 0x0B	; 11
    b3e2:	82 2e       	mov	r8, r18
    b3e4:	91 2c       	mov	r9, r1
    b3e6:	74 c0       	rjmp	.+232    	; 0xb4d0 <follow_path+0x3ca>
    b3e8:	20 16       	cp	r2, r16
    b3ea:	31 06       	cpc	r3, r17
    b3ec:	39 f0       	breq	.+14     	; 0xb3fc <follow_path+0x2f6>
    b3ee:	eb 81       	ldd	r30, Y+3	; 0x03
    b3f0:	e3 60       	ori	r30, 0x03	; 3
    b3f2:	eb 83       	std	Y+3, r30	; 0x03
    b3f4:	02 15       	cp	r16, r2
    b3f6:	13 05       	cpc	r17, r3
    b3f8:	08 f4       	brcc	.+2      	; 0xb3fc <follow_path+0x2f6>
    b3fa:	6a c0       	rjmp	.+212    	; 0xb4d0 <follow_path+0x3ca>
    b3fc:	fc 81       	ldd	r31, Y+4	; 0x04
    b3fe:	ff 0f       	add	r31, r31
    b400:	ff 0f       	add	r31, r31
    b402:	fc 83       	std	Y+4, r31	; 0x04
    b404:	18 01       	movw	r2, r16
    b406:	8b e0       	ldi	r24, 0x0B	; 11
    b408:	88 2e       	mov	r8, r24
    b40a:	91 2c       	mov	r9, r1
    b40c:	98 e0       	ldi	r25, 0x08	; 8
    b40e:	c9 2e       	mov	r12, r25
    b410:	d1 2c       	mov	r13, r1
    b412:	d2 cf       	rjmp	.-92     	; 0xb3b8 <follow_path+0x2b2>
    b414:	80 38       	cpi	r24, 0x80	; 128
    b416:	91 05       	cpc	r25, r1
    b418:	78 f1       	brcs	.+94     	; 0xb478 <follow_path+0x372>
    b41a:	2b 81       	ldd	r18, Y+3	; 0x03
    b41c:	22 60       	ori	r18, 0x02	; 2
    b41e:	52 2e       	mov	r5, r18
    b420:	bc 01       	movw	r22, r24
    b422:	80 e0       	ldi	r24, 0x00	; 0
    b424:	90 e0       	ldi	r25, 0x00	; 0
    b426:	45 eb       	ldi	r20, 0xB5	; 181
    b428:	51 e0       	ldi	r21, 0x01	; 1
    b42a:	0e 94 4c 6a 	call	0xd498	; 0xd498 <ff_uni2oem>
    b42e:	87 ff       	sbrs	r24, 7
    b430:	08 c0       	rjmp	.+16     	; 0xb442 <follow_path+0x33c>
    b432:	8f 77       	andi	r24, 0x7F	; 127
    b434:	99 27       	eor	r25, r25
    b436:	fc 01       	movw	r30, r24
    b438:	e5 57       	subi	r30, 0x75	; 117
    b43a:	fc 4f       	sbci	r31, 0xFC	; 252
    b43c:	80 81       	ld	r24, Z
    b43e:	90 e0       	ldi	r25, 0x00	; 0
    b440:	18 c0       	rjmp	.+48     	; 0xb472 <follow_path+0x36c>
    b442:	8f 3f       	cpi	r24, 0xFF	; 255
    b444:	91 05       	cpc	r25, r1
    b446:	a9 f0       	breq	.+42     	; 0xb472 <follow_path+0x36c>
    b448:	a0 f0       	brcs	.+40     	; 0xb472 <follow_path+0x36c>
    b44a:	94 01       	movw	r18, r8
    b44c:	21 50       	subi	r18, 0x01	; 1
    b44e:	31 09       	sbc	r19, r1
    b450:	c2 16       	cp	r12, r18
    b452:	d3 06       	cpc	r13, r19
    b454:	28 f0       	brcs	.+10     	; 0xb460 <follow_path+0x35a>
    b456:	3b 81       	ldd	r19, Y+3	; 0x03
    b458:	33 60       	ori	r19, 0x03	; 3
    b45a:	3b 83       	std	Y+3, r19	; 0x03
    b45c:	64 01       	movw	r12, r8
    b45e:	ac cf       	rjmp	.-168    	; 0xb3b8 <follow_path+0x2b2>
    b460:	f7 01       	movw	r30, r14
    b462:	ec 0d       	add	r30, r12
    b464:	fd 1d       	adc	r31, r13
    b466:	94 8f       	std	Z+28, r25	; 0x1c
    b468:	d6 01       	movw	r26, r12
    b46a:	11 96       	adiw	r26, 0x01	; 1
    b46c:	6d 01       	movw	r12, r26
    b46e:	5b 82       	std	Y+3, r5	; 0x03
    b470:	26 c0       	rjmp	.+76     	; 0xb4be <follow_path+0x3b8>
    b472:	00 97       	sbiw	r24, 0x00	; 0
    b474:	59 f0       	breq	.+22     	; 0xb48c <follow_path+0x386>
    b476:	5b 82       	std	Y+3, r5	; 0x03
    b478:	e0 e5       	ldi	r30, 0x50	; 80
    b47a:	f3 e0       	ldi	r31, 0x03	; 3
    b47c:	21 91       	ld	r18, Z+
    b47e:	22 23       	and	r18, r18
    b480:	59 f0       	breq	.+22     	; 0xb498 <follow_path+0x392>
    b482:	30 e0       	ldi	r19, 0x00	; 0
    b484:	82 17       	cp	r24, r18
    b486:	93 07       	cpc	r25, r19
    b488:	c9 f7       	brne	.-14     	; 0xb47c <follow_path+0x376>
    b48a:	5b 80       	ldd	r5, Y+3	; 0x03
    b48c:	b5 2d       	mov	r27, r5
    b48e:	b3 60       	ori	r27, 0x03	; 3
    b490:	bb 83       	std	Y+3, r27	; 0x03
    b492:	8f e5       	ldi	r24, 0x5F	; 95
    b494:	90 e0       	ldi	r25, 0x00	; 0
    b496:	13 c0       	rjmp	.+38     	; 0xb4be <follow_path+0x3b8>
    b498:	9c 01       	movw	r18, r24
    b49a:	21 54       	subi	r18, 0x41	; 65
    b49c:	31 09       	sbc	r19, r1
    b49e:	2a 31       	cpi	r18, 0x1A	; 26
    b4a0:	31 05       	cpc	r19, r1
    b4a2:	18 f4       	brcc	.+6      	; 0xb4aa <follow_path+0x3a4>
    b4a4:	ec 81       	ldd	r30, Y+4	; 0x04
    b4a6:	e2 60       	ori	r30, 0x02	; 2
    b4a8:	ec 83       	std	Y+4, r30	; 0x04
    b4aa:	9c 01       	movw	r18, r24
    b4ac:	21 56       	subi	r18, 0x61	; 97
    b4ae:	31 09       	sbc	r19, r1
    b4b0:	2a 31       	cpi	r18, 0x1A	; 26
    b4b2:	31 05       	cpc	r19, r1
    b4b4:	20 f4       	brcc	.+8      	; 0xb4be <follow_path+0x3b8>
    b4b6:	fc 81       	ldd	r31, Y+4	; 0x04
    b4b8:	f1 60       	ori	r31, 0x01	; 1
    b4ba:	fc 83       	std	Y+4, r31	; 0x04
    b4bc:	80 97       	sbiw	r24, 0x20	; 32
    b4be:	f7 01       	movw	r30, r14
    b4c0:	ec 0d       	add	r30, r12
    b4c2:	fd 1d       	adc	r31, r13
    b4c4:	84 8f       	std	Z+28, r24	; 0x1c
    b4c6:	96 01       	movw	r18, r12
    b4c8:	2f 5f       	subi	r18, 0xFF	; 255
    b4ca:	3f 4f       	sbci	r19, 0xFF	; 255
    b4cc:	69 01       	movw	r12, r18
    b4ce:	74 cf       	rjmp	.-280    	; 0xb3b8 <follow_path+0x2b2>
    b4d0:	f7 01       	movw	r30, r14
    b4d2:	84 8d       	ldd	r24, Z+28	; 0x1c
    b4d4:	85 3e       	cpi	r24, 0xE5	; 229
    b4d6:	11 f4       	brne	.+4      	; 0xb4dc <follow_path+0x3d6>
    b4d8:	25 e0       	ldi	r18, 0x05	; 5
    b4da:	24 8f       	std	Z+28, r18	; 0x1c
    b4dc:	38 e0       	ldi	r19, 0x08	; 8
    b4de:	83 16       	cp	r8, r19
    b4e0:	91 04       	cpc	r9, r1
    b4e2:	21 f4       	brne	.+8      	; 0xb4ec <follow_path+0x3e6>
    b4e4:	8c 81       	ldd	r24, Y+4	; 0x04
    b4e6:	88 0f       	add	r24, r24
    b4e8:	88 0f       	add	r24, r24
    b4ea:	8c 83       	std	Y+4, r24	; 0x04
    b4ec:	8c 81       	ldd	r24, Y+4	; 0x04
    b4ee:	8c 70       	andi	r24, 0x0C	; 12
    b4f0:	8c 30       	cpi	r24, 0x0C	; 12
    b4f2:	21 f0       	breq	.+8      	; 0xb4fc <follow_path+0x3f6>
    b4f4:	8c 81       	ldd	r24, Y+4	; 0x04
    b4f6:	83 70       	andi	r24, 0x03	; 3
    b4f8:	83 30       	cpi	r24, 0x03	; 3
    b4fa:	19 f4       	brne	.+6      	; 0xb502 <follow_path+0x3fc>
    b4fc:	9b 81       	ldd	r25, Y+3	; 0x03
    b4fe:	92 60       	ori	r25, 0x02	; 2
    b500:	9b 83       	std	Y+3, r25	; 0x03
    b502:	ab 81       	ldd	r26, Y+3	; 0x03
    b504:	a1 fd       	sbrc	r26, 1
    b506:	0b c0       	rjmp	.+22     	; 0xb51e <follow_path+0x418>
    b508:	bc 81       	ldd	r27, Y+4	; 0x04
    b50a:	b0 ff       	sbrs	r27, 0
    b50c:	02 c0       	rjmp	.+4      	; 0xb512 <follow_path+0x40c>
    b50e:	a0 61       	ori	r26, 0x10	; 16
    b510:	ab 83       	std	Y+3, r26	; 0x03
    b512:	ec 81       	ldd	r30, Y+4	; 0x04
    b514:	e2 ff       	sbrs	r30, 2
    b516:	03 c0       	rjmp	.+6      	; 0xb51e <follow_path+0x418>
    b518:	fb 81       	ldd	r31, Y+3	; 0x03
    b51a:	f8 60       	ori	r31, 0x08	; 8
    b51c:	fb 83       	std	Y+3, r31	; 0x03
    b51e:	2b 81       	ldd	r18, Y+3	; 0x03
    b520:	f7 01       	movw	r30, r14
    b522:	27 a3       	std	Z+39, r18	; 0x27
    b524:	a2 ce       	rjmp	.-700    	; 0xb26a <follow_path+0x164>
    b526:	86 e0       	ldi	r24, 0x06	; 6
    b528:	90 e0       	ldi	r25, 0x00	; 0
    b52a:	a1 ce       	rjmp	.-702    	; 0xb26e <follow_path+0x168>
    b52c:	84 30       	cpi	r24, 0x04	; 4
    b52e:	91 05       	cpc	r25, r1
    b530:	b9 f4       	brne	.+46     	; 0xb560 <follow_path+0x45a>
    b532:	32 2f       	mov	r19, r18
    b534:	34 70       	andi	r19, 0x04	; 4
    b536:	25 ff       	sbrs	r18, 5
    b538:	08 c0       	rjmp	.+16     	; 0xb54a <follow_path+0x444>
    b53a:	33 23       	and	r19, r19
    b53c:	09 f4       	brne	.+2      	; 0xb540 <follow_path+0x43a>
    b53e:	b8 ce       	rjmp	.-656    	; 0xb2b0 <follow_path+0x1aa>
    b540:	80 e8       	ldi	r24, 0x80	; 128
    b542:	87 a3       	std	Z+39, r24	; 0x27
    b544:	80 e0       	ldi	r24, 0x00	; 0
    b546:	90 e0       	ldi	r25, 0x00	; 0
    b548:	0b c0       	rjmp	.+22     	; 0xb560 <follow_path+0x45a>
    b54a:	31 11       	cpse	r19, r1
    b54c:	09 c0       	rjmp	.+18     	; 0xb560 <follow_path+0x45a>
    b54e:	85 e0       	ldi	r24, 0x05	; 5
    b550:	90 e0       	ldi	r25, 0x00	; 0
    b552:	06 c0       	rjmp	.+12     	; 0xb560 <follow_path+0x45a>
    b554:	fb e0       	ldi	r31, 0x0B	; 11
    b556:	8f 16       	cp	r8, r31
    b558:	91 04       	cpc	r9, r1
    b55a:	09 f0       	breq	.+2      	; 0xb55e <follow_path+0x458>
    b55c:	4f cf       	rjmp	.-354    	; 0xb3fc <follow_path+0x2f6>
    b55e:	3d cf       	rjmp	.-390    	; 0xb3da <follow_path+0x2d4>
    b560:	2a 96       	adiw	r28, 0x0a	; 10
    b562:	e2 e1       	ldi	r30, 0x12	; 18
    b564:	0c 94 e4 e3 	jmp	0x1c7c8	; 0x1c7c8 <__epilogue_restores__>

0000b568 <f_mount>:
    b568:	a6 e0       	ldi	r26, 0x06	; 6
    b56a:	b0 e0       	ldi	r27, 0x00	; 0
    b56c:	ea eb       	ldi	r30, 0xBA	; 186
    b56e:	fa e5       	ldi	r31, 0x5A	; 90
    b570:	0c 94 d7 e3 	jmp	0x1c7ae	; 0x1c7ae <__prologue_saves__+0x1e>
    b574:	9c 83       	std	Y+4, r25	; 0x04
    b576:	8b 83       	std	Y+3, r24	; 0x03
    b578:	7e 83       	std	Y+6, r23	; 0x06
    b57a:	6d 83       	std	Y+5, r22	; 0x05
    b57c:	14 2f       	mov	r17, r20
    b57e:	7a 83       	std	Y+2, r23	; 0x02
    b580:	69 83       	std	Y+1, r22	; 0x01
    b582:	ce 01       	movw	r24, r28
    b584:	01 96       	adiw	r24, 0x01	; 1
    b586:	0e 94 0a 49 	call	0x9214	; 0x9214 <get_ldnumber>
    b58a:	97 fd       	sbrc	r25, 7
    b58c:	20 c0       	rjmp	.+64     	; 0xb5ce <f_mount+0x66>
    b58e:	88 0f       	add	r24, r24
    b590:	99 1f       	adc	r25, r25
    b592:	fc 01       	movw	r30, r24
    b594:	e3 54       	subi	r30, 0x43	; 67
    b596:	f8 4e       	sbci	r31, 0xE8	; 232
    b598:	01 90       	ld	r0, Z+
    b59a:	f0 81       	ld	r31, Z
    b59c:	e0 2d       	mov	r30, r0
    b59e:	30 97       	sbiw	r30, 0x00	; 0
    b5a0:	09 f0       	breq	.+2      	; 0xb5a4 <f_mount+0x3c>
    b5a2:	10 82       	st	Z, r1
    b5a4:	eb 81       	ldd	r30, Y+3	; 0x03
    b5a6:	fc 81       	ldd	r31, Y+4	; 0x04
    b5a8:	30 97       	sbiw	r30, 0x00	; 0
    b5aa:	09 f0       	breq	.+2      	; 0xb5ae <f_mount+0x46>
    b5ac:	10 82       	st	Z, r1
    b5ae:	dc 01       	movw	r26, r24
    b5b0:	a3 54       	subi	r26, 0x43	; 67
    b5b2:	b8 4e       	sbci	r27, 0xE8	; 232
    b5b4:	ed 93       	st	X+, r30
    b5b6:	fc 93       	st	X, r31
    b5b8:	11 23       	and	r17, r17
    b5ba:	61 f0       	breq	.+24     	; 0xb5d4 <f_mount+0x6c>
    b5bc:	40 e0       	ldi	r20, 0x00	; 0
    b5be:	be 01       	movw	r22, r28
    b5c0:	6d 5f       	subi	r22, 0xFD	; 253
    b5c2:	7f 4f       	sbci	r23, 0xFF	; 255
    b5c4:	ce 01       	movw	r24, r28
    b5c6:	05 96       	adiw	r24, 0x05	; 5
    b5c8:	0e 94 34 4d 	call	0x9a68	; 0x9a68 <mount_volume>
    b5cc:	05 c0       	rjmp	.+10     	; 0xb5d8 <f_mount+0x70>
    b5ce:	8b e0       	ldi	r24, 0x0B	; 11
    b5d0:	90 e0       	ldi	r25, 0x00	; 0
    b5d2:	02 c0       	rjmp	.+4      	; 0xb5d8 <f_mount+0x70>
    b5d4:	80 e0       	ldi	r24, 0x00	; 0
    b5d6:	90 e0       	ldi	r25, 0x00	; 0
    b5d8:	26 96       	adiw	r28, 0x06	; 6
    b5da:	e3 e0       	ldi	r30, 0x03	; 3
    b5dc:	0c 94 f3 e3 	jmp	0x1c7e6	; 0x1c7e6 <__epilogue_restores__+0x1e>

0000b5e0 <f_open>:
    b5e0:	a6 e3       	ldi	r26, 0x36	; 54
    b5e2:	b0 e0       	ldi	r27, 0x00	; 0
    b5e4:	e6 ef       	ldi	r30, 0xF6	; 246
    b5e6:	fa e5       	ldi	r31, 0x5A	; 90
    b5e8:	0c 94 c8 e3 	jmp	0x1c790	; 0x1c790 <__prologue_saves__>
    b5ec:	7a ab       	std	Y+50, r23	; 0x32
    b5ee:	69 ab       	std	Y+49, r22	; 0x31
    b5f0:	00 97       	sbiw	r24, 0x00	; 0
    b5f2:	09 f4       	brne	.+2      	; 0xb5f6 <f_open+0x16>
    b5f4:	93 c1       	rjmp	.+806    	; 0xb91c <f_open+0x33c>
    b5f6:	74 2e       	mov	r7, r20
    b5f8:	7c 01       	movw	r14, r24
    b5fa:	24 2f       	mov	r18, r20
    b5fc:	2f 73       	andi	r18, 0x3F	; 63
    b5fe:	32 2e       	mov	r3, r18
    b600:	42 2f       	mov	r20, r18
    b602:	be 01       	movw	r22, r28
    b604:	61 5d       	subi	r22, 0xD1	; 209
    b606:	7f 4f       	sbci	r23, 0xFF	; 255
    b608:	ce 01       	movw	r24, r28
    b60a:	c1 96       	adiw	r24, 0x31	; 49
    b60c:	0e 94 34 4d 	call	0x9a68	; 0x9a68 <mount_volume>
    b610:	00 97       	sbiw	r24, 0x00	; 0
    b612:	09 f0       	breq	.+2      	; 0xb616 <f_open+0x36>
    b614:	7d c1       	rjmp	.+762    	; 0xb910 <f_open+0x330>
    b616:	8f a5       	ldd	r24, Y+47	; 0x2f
    b618:	98 a9       	ldd	r25, Y+48	; 0x30
    b61a:	9a 83       	std	Y+2, r25	; 0x02
    b61c:	89 83       	std	Y+1, r24	; 0x01
    b61e:	80 e0       	ldi	r24, 0x00	; 0
    b620:	92 e0       	ldi	r25, 0x02	; 2
    b622:	0e 94 46 6a 	call	0xd48c	; 0xd48c <ff_memalloc>
    b626:	5c 01       	movw	r10, r24
    b628:	00 97       	sbiw	r24, 0x00	; 0
    b62a:	09 f4       	brne	.+2      	; 0xb62e <f_open+0x4e>
    b62c:	79 c1       	rjmp	.+754    	; 0xb920 <f_open+0x340>
    b62e:	ef a5       	ldd	r30, Y+47	; 0x2f
    b630:	f8 a9       	ldd	r31, Y+48	; 0x30
    b632:	94 87       	std	Z+12, r25	; 0x0c
    b634:	83 87       	std	Z+11, r24	; 0x0b
    b636:	69 a9       	ldd	r22, Y+49	; 0x31
    b638:	7a a9       	ldd	r23, Y+50	; 0x32
    b63a:	ce 01       	movw	r24, r28
    b63c:	01 96       	adiw	r24, 0x01	; 1
    b63e:	63 dd       	rcall	.-1338   	; 0xb106 <follow_path>
    b640:	8c 01       	movw	r16, r24
    b642:	89 2b       	or	r24, r25
    b644:	29 f4       	brne	.+10     	; 0xb650 <f_open+0x70>
    b646:	88 a5       	ldd	r24, Y+40	; 0x28
    b648:	87 ff       	sbrs	r24, 7
    b64a:	02 c0       	rjmp	.+4      	; 0xb650 <f_open+0x70>
    b64c:	06 e0       	ldi	r16, 0x06	; 6
    b64e:	10 e0       	ldi	r17, 0x00	; 0
    b650:	87 2d       	mov	r24, r7
    b652:	8c 71       	andi	r24, 0x1C	; 28
    b654:	09 f4       	brne	.+2      	; 0xb658 <f_open+0x78>
    b656:	75 c0       	rjmp	.+234    	; 0xb742 <f_open+0x162>
    b658:	01 15       	cp	r16, r1
    b65a:	11 05       	cpc	r17, r1
    b65c:	79 f0       	breq	.+30     	; 0xb67c <f_open+0x9c>
    b65e:	04 30       	cpi	r16, 0x04	; 4
    b660:	11 05       	cpc	r17, r1
    b662:	09 f0       	breq	.+2      	; 0xb666 <f_open+0x86>
    b664:	6d c1       	rjmp	.+730    	; 0xb940 <f_open+0x360>
    b666:	ce 01       	movw	r24, r28
    b668:	01 96       	adiw	r24, 0x01	; 1
    b66a:	bf db       	rcall	.-2178   	; 0xadea <dir_register>
    b66c:	8c 01       	movw	r16, r24
    b66e:	89 2b       	or	r24, r25
    b670:	09 f0       	breq	.+2      	; 0xb674 <f_open+0x94>
    b672:	66 c1       	rjmp	.+716    	; 0xb940 <f_open+0x360>
    b674:	33 2d       	mov	r19, r3
    b676:	38 60       	ori	r19, 0x08	; 8
    b678:	33 2e       	mov	r3, r19
    b67a:	06 c0       	rjmp	.+12     	; 0xb688 <f_open+0xa8>
    b67c:	8d 81       	ldd	r24, Y+5	; 0x05
    b67e:	81 71       	andi	r24, 0x11	; 17
    b680:	09 f0       	breq	.+2      	; 0xb684 <f_open+0xa4>
    b682:	5c c1       	rjmp	.+696    	; 0xb93c <f_open+0x35c>
    b684:	72 fc       	sbrc	r7, 2
    b686:	51 c1       	rjmp	.+674    	; 0xb92a <f_open+0x34a>
    b688:	33 fe       	sbrs	r3, 3
    b68a:	6b c0       	rjmp	.+214    	; 0xb762 <f_open+0x182>
    b68c:	0b 8d       	ldd	r16, Y+27	; 0x1b
    b68e:	1c 8d       	ldd	r17, Y+28	; 0x1c
    b690:	ef a5       	ldd	r30, Y+47	; 0x2f
    b692:	f8 a9       	ldd	r31, Y+48	; 0x30
    b694:	b8 01       	movw	r22, r16
    b696:	80 81       	ld	r24, Z
    b698:	0e 94 2a 4b 	call	0x9654	; 0x9654 <ld_clust.isra.4>
    b69c:	2b 01       	movw	r4, r22
    b69e:	3c 01       	movw	r6, r24
    b6a0:	0e 94 41 71 	call	0xe282	; 0xe282 <get_fattime>
    b6a4:	ab 01       	movw	r20, r22
    b6a6:	bc 01       	movw	r22, r24
    b6a8:	c8 01       	movw	r24, r16
    b6aa:	0e 96       	adiw	r24, 0x0e	; 14
    b6ac:	0e 94 f3 47 	call	0x8fe6	; 0x8fe6 <st_dword>
    b6b0:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b6b2:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b6b4:	80 e2       	ldi	r24, 0x20	; 32
    b6b6:	83 87       	std	Z+11, r24	; 0x0b
    b6b8:	af a5       	ldd	r26, Y+47	; 0x2f
    b6ba:	b8 a9       	ldd	r27, Y+48	; 0x30
    b6bc:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b6be:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b6c0:	12 8e       	std	Z+26, r1	; 0x1a
    b6c2:	13 8e       	std	Z+27, r1	; 0x1b
    b6c4:	8c 91       	ld	r24, X
    b6c6:	83 30       	cpi	r24, 0x03	; 3
    b6c8:	11 f4       	brne	.+4      	; 0xb6ce <f_open+0xee>
    b6ca:	14 8a       	std	Z+20, r1	; 0x14
    b6cc:	15 8a       	std	Z+21, r1	; 0x15
    b6ce:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b6d0:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b6d2:	14 8e       	std	Z+28, r1	; 0x1c
    b6d4:	15 8e       	std	Z+29, r1	; 0x1d
    b6d6:	16 8e       	std	Z+30, r1	; 0x1e
    b6d8:	17 8e       	std	Z+31, r1	; 0x1f
    b6da:	81 e0       	ldi	r24, 0x01	; 1
    b6dc:	fd 01       	movw	r30, r26
    b6de:	83 83       	std	Z+3, r24	; 0x03
    b6e0:	41 14       	cp	r4, r1
    b6e2:	51 04       	cpc	r5, r1
    b6e4:	61 04       	cpc	r6, r1
    b6e6:	71 04       	cpc	r7, r1
    b6e8:	c9 f1       	breq	.+114    	; 0xb75c <f_open+0x17c>
    b6ea:	21 a9       	ldd	r18, Z+49	; 0x31
    b6ec:	32 a9       	ldd	r19, Z+50	; 0x32
    b6ee:	43 a9       	ldd	r20, Z+51	; 0x33
    b6f0:	54 a9       	ldd	r21, Z+52	; 0x34
    b6f2:	2b ab       	std	Y+51, r18	; 0x33
    b6f4:	3c ab       	std	Y+52, r19	; 0x34
    b6f6:	4d ab       	std	Y+53, r20	; 0x35
    b6f8:	5e ab       	std	Y+54, r21	; 0x36
    b6fa:	00 e0       	ldi	r16, 0x00	; 0
    b6fc:	10 e0       	ldi	r17, 0x00	; 0
    b6fe:	98 01       	movw	r18, r16
    b700:	b3 01       	movw	r22, r6
    b702:	a2 01       	movw	r20, r4
    b704:	ce 01       	movw	r24, r28
    b706:	01 96       	adiw	r24, 0x01	; 1
    b708:	0e 94 24 53 	call	0xa648	; 0xa648 <remove_chain>
    b70c:	8c 01       	movw	r16, r24
    b70e:	89 2b       	or	r24, r25
    b710:	09 f0       	breq	.+2      	; 0xb714 <f_open+0x134>
    b712:	16 c1       	rjmp	.+556    	; 0xb940 <f_open+0x360>
    b714:	4b a9       	ldd	r20, Y+51	; 0x33
    b716:	5c a9       	ldd	r21, Y+52	; 0x34
    b718:	6d a9       	ldd	r22, Y+53	; 0x35
    b71a:	7e a9       	ldd	r23, Y+54	; 0x36
    b71c:	8f a5       	ldd	r24, Y+47	; 0x2f
    b71e:	98 a9       	ldd	r25, Y+48	; 0x30
    b720:	0e 94 b9 4c 	call	0x9972	; 0x9972 <move_window>
    b724:	8c 01       	movw	r16, r24
    b726:	ef a5       	ldd	r30, Y+47	; 0x2f
    b728:	f8 a9       	ldd	r31, Y+48	; 0x30
    b72a:	21 e0       	ldi	r18, 0x01	; 1
    b72c:	42 1a       	sub	r4, r18
    b72e:	51 08       	sbc	r5, r1
    b730:	61 08       	sbc	r6, r1
    b732:	71 08       	sbc	r7, r1
    b734:	45 86       	std	Z+13, r4	; 0x0d
    b736:	56 86       	std	Z+14, r5	; 0x0e
    b738:	67 86       	std	Z+15, r6	; 0x0f
    b73a:	70 8a       	std	Z+16, r7	; 0x10
    b73c:	89 2b       	or	r24, r25
    b73e:	61 f0       	breq	.+24     	; 0xb758 <f_open+0x178>
    b740:	ff c0       	rjmp	.+510    	; 0xb940 <f_open+0x360>
    b742:	01 15       	cp	r16, r1
    b744:	11 05       	cpc	r17, r1
    b746:	09 f0       	breq	.+2      	; 0xb74a <f_open+0x16a>
    b748:	fb c0       	rjmp	.+502    	; 0xb940 <f_open+0x360>
    b74a:	8d 81       	ldd	r24, Y+5	; 0x05
    b74c:	84 fd       	sbrc	r24, 4
    b74e:	f3 c0       	rjmp	.+486    	; 0xb936 <f_open+0x356>
    b750:	71 fe       	sbrs	r7, 1
    b752:	02 c0       	rjmp	.+4      	; 0xb758 <f_open+0x178>
    b754:	80 fd       	sbrc	r24, 0
    b756:	f2 c0       	rjmp	.+484    	; 0xb93c <f_open+0x35c>
    b758:	33 fe       	sbrs	r3, 3
    b75a:	03 c0       	rjmp	.+6      	; 0xb762 <f_open+0x182>
    b75c:	33 2d       	mov	r19, r3
    b75e:	30 64       	ori	r19, 0x40	; 64
    b760:	33 2e       	mov	r3, r19
    b762:	0f a5       	ldd	r16, Y+47	; 0x2f
    b764:	18 a9       	ldd	r17, Y+48	; 0x30
    b766:	f8 01       	movw	r30, r16
    b768:	81 a9       	ldd	r24, Z+49	; 0x31
    b76a:	92 a9       	ldd	r25, Z+50	; 0x32
    b76c:	a3 a9       	ldd	r26, Z+51	; 0x33
    b76e:	b4 a9       	ldd	r27, Z+52	; 0x34
    b770:	f7 01       	movw	r30, r14
    b772:	84 8f       	std	Z+28, r24	; 0x1c
    b774:	95 8f       	std	Z+29, r25	; 0x1d
    b776:	a6 8f       	std	Z+30, r26	; 0x1e
    b778:	b7 8f       	std	Z+31, r27	; 0x1f
    b77a:	6b 8c       	ldd	r6, Y+27	; 0x1b
    b77c:	7c 8c       	ldd	r7, Y+28	; 0x1c
    b77e:	71 a2       	std	Z+33, r7	; 0x21
    b780:	60 a2       	std	Z+32, r6	; 0x20
    b782:	b3 01       	movw	r22, r6
    b784:	f8 01       	movw	r30, r16
    b786:	80 81       	ld	r24, Z
    b788:	0e 94 2a 4b 	call	0x9654	; 0x9654 <ld_clust.isra.4>
    b78c:	f7 01       	movw	r30, r14
    b78e:	66 83       	std	Z+6, r22	; 0x06
    b790:	77 83       	std	Z+7, r23	; 0x07
    b792:	80 87       	std	Z+8, r24	; 0x08
    b794:	91 87       	std	Z+9, r25	; 0x09
    b796:	c3 01       	movw	r24, r6
    b798:	4c 96       	adiw	r24, 0x1c	; 28
    b79a:	0e 94 de 47 	call	0x8fbc	; 0x8fbc <ld_dword>
    b79e:	f7 01       	movw	r30, r14
    b7a0:	62 87       	std	Z+10, r22	; 0x0a
    b7a2:	73 87       	std	Z+11, r23	; 0x0b
    b7a4:	84 87       	std	Z+12, r24	; 0x0c
    b7a6:	95 87       	std	Z+13, r25	; 0x0d
    b7a8:	13 a2       	std	Z+35, r1	; 0x23
    b7aa:	12 a2       	std	Z+34, r1	; 0x22
    b7ac:	11 83       	std	Z+1, r17	; 0x01
    b7ae:	00 83       	st	Z, r16
    b7b0:	f8 01       	movw	r30, r16
    b7b2:	85 81       	ldd	r24, Z+5	; 0x05
    b7b4:	96 81       	ldd	r25, Z+6	; 0x06
    b7b6:	f7 01       	movw	r30, r14
    b7b8:	93 83       	std	Z+3, r25	; 0x03
    b7ba:	82 83       	std	Z+2, r24	; 0x02
    b7bc:	36 86       	std	Z+14, r3	; 0x0e
    b7be:	17 86       	std	Z+15, r1	; 0x0f
    b7c0:	10 8e       	std	Z+24, r1	; 0x18
    b7c2:	11 8e       	std	Z+25, r1	; 0x19
    b7c4:	12 8e       	std	Z+26, r1	; 0x1a
    b7c6:	13 8e       	std	Z+27, r1	; 0x1b
    b7c8:	10 8a       	std	Z+16, r1	; 0x10
    b7ca:	11 8a       	std	Z+17, r1	; 0x11
    b7cc:	12 8a       	std	Z+18, r1	; 0x12
    b7ce:	13 8a       	std	Z+19, r1	; 0x13
    b7d0:	67 01       	movw	r12, r14
    b7d2:	f4 e2       	ldi	r31, 0x24	; 36
    b7d4:	cf 0e       	add	r12, r31
    b7d6:	d1 1c       	adc	r13, r1
    b7d8:	40 e0       	ldi	r20, 0x00	; 0
    b7da:	52 e0       	ldi	r21, 0x02	; 2
    b7dc:	60 e0       	ldi	r22, 0x00	; 0
    b7de:	70 e0       	ldi	r23, 0x00	; 0
    b7e0:	c6 01       	movw	r24, r12
    b7e2:	0e 94 f9 47 	call	0x8ff2	; 0x8ff2 <mem_set>
    b7e6:	35 fc       	sbrc	r3, 5
    b7e8:	03 c0       	rjmp	.+6      	; 0xb7f0 <f_open+0x210>
    b7ea:	00 e0       	ldi	r16, 0x00	; 0
    b7ec:	10 e0       	ldi	r17, 0x00	; 0
    b7ee:	89 c0       	rjmp	.+274    	; 0xb902 <f_open+0x322>
    b7f0:	f7 01       	movw	r30, r14
    b7f2:	62 84       	ldd	r6, Z+10	; 0x0a
    b7f4:	73 84       	ldd	r7, Z+11	; 0x0b
    b7f6:	84 84       	ldd	r8, Z+12	; 0x0c
    b7f8:	95 84       	ldd	r9, Z+13	; 0x0d
    b7fa:	61 14       	cp	r6, r1
    b7fc:	71 04       	cpc	r7, r1
    b7fe:	81 04       	cpc	r8, r1
    b800:	91 04       	cpc	r9, r1
    b802:	99 f3       	breq	.-26     	; 0xb7ea <f_open+0x20a>
    b804:	60 8a       	std	Z+16, r6	; 0x10
    b806:	71 8a       	std	Z+17, r7	; 0x11
    b808:	82 8a       	std	Z+18, r8	; 0x12
    b80a:	93 8a       	std	Z+19, r9	; 0x13
    b80c:	ef a5       	ldd	r30, Y+47	; 0x2f
    b80e:	f8 a9       	ldd	r31, Y+48	; 0x30
    b810:	21 84       	ldd	r2, Z+9	; 0x09
    b812:	32 84       	ldd	r3, Z+10	; 0x0a
    b814:	c1 01       	movw	r24, r2
    b816:	a0 e0       	ldi	r26, 0x00	; 0
    b818:	b0 e0       	ldi	r27, 0x00	; 0
    b81a:	1c 01       	movw	r2, r24
    b81c:	2d 01       	movw	r4, r26
    b81e:	59 e0       	ldi	r21, 0x09	; 9
    b820:	22 0c       	add	r2, r2
    b822:	33 1c       	adc	r3, r3
    b824:	44 1c       	adc	r4, r4
    b826:	55 1c       	adc	r5, r5
    b828:	5a 95       	dec	r21
    b82a:	d1 f7       	brne	.-12     	; 0xb820 <f_open+0x240>
    b82c:	f7 01       	movw	r30, r14
    b82e:	46 81       	ldd	r20, Z+6	; 0x06
    b830:	57 81       	ldd	r21, Z+7	; 0x07
    b832:	60 85       	ldd	r22, Z+8	; 0x08
    b834:	71 85       	ldd	r23, Z+9	; 0x09
    b836:	26 14       	cp	r2, r6
    b838:	37 04       	cpc	r3, r7
    b83a:	48 04       	cpc	r4, r8
    b83c:	59 04       	cpc	r5, r9
    b83e:	f0 f4       	brcc	.+60     	; 0xb87c <f_open+0x29c>
    b840:	f7 01       	movw	r30, r14
    b842:	80 81       	ld	r24, Z
    b844:	91 81       	ldd	r25, Z+1	; 0x01
    b846:	0e 94 89 50 	call	0xa112	; 0xa112 <get_fat.isra.10>
    b84a:	ab 01       	movw	r20, r22
    b84c:	bc 01       	movw	r22, r24
    b84e:	d4 01       	movw	r26, r8
    b850:	c3 01       	movw	r24, r6
    b852:	82 19       	sub	r24, r2
    b854:	93 09       	sbc	r25, r3
    b856:	a4 09       	sbc	r26, r4
    b858:	b5 09       	sbc	r27, r5
    b85a:	3c 01       	movw	r6, r24
    b85c:	4d 01       	movw	r8, r26
    b85e:	42 30       	cpi	r20, 0x02	; 2
    b860:	51 05       	cpc	r21, r1
    b862:	61 05       	cpc	r22, r1
    b864:	71 05       	cpc	r23, r1
    b866:	08 f4       	brcc	.+2      	; 0xb86a <f_open+0x28a>
    b868:	63 c0       	rjmp	.+198    	; 0xb930 <f_open+0x350>
    b86a:	4f 3f       	cpi	r20, 0xFF	; 255
    b86c:	ff ef       	ldi	r31, 0xFF	; 255
    b86e:	5f 07       	cpc	r21, r31
    b870:	6f 07       	cpc	r22, r31
    b872:	7f 07       	cpc	r23, r31
    b874:	01 f7       	brne	.-64     	; 0xb836 <f_open+0x256>
    b876:	01 e0       	ldi	r16, 0x01	; 1
    b878:	10 e0       	ldi	r17, 0x00	; 0
    b87a:	02 c0       	rjmp	.+4      	; 0xb880 <f_open+0x2a0>
    b87c:	00 e0       	ldi	r16, 0x00	; 0
    b87e:	10 e0       	ldi	r17, 0x00	; 0
    b880:	f7 01       	movw	r30, r14
    b882:	44 8b       	std	Z+20, r20	; 0x14
    b884:	55 8b       	std	Z+21, r21	; 0x15
    b886:	66 8b       	std	Z+22, r22	; 0x16
    b888:	77 8b       	std	Z+23, r23	; 0x17
    b88a:	01 15       	cp	r16, r1
    b88c:	11 05       	cpc	r17, r1
    b88e:	c9 f5       	brne	.+114    	; 0xb902 <f_open+0x322>
    b890:	d4 01       	movw	r26, r8
    b892:	c3 01       	movw	r24, r6
    b894:	91 70       	andi	r25, 0x01	; 1
    b896:	aa 27       	eor	r26, r26
    b898:	bb 27       	eor	r27, r27
    b89a:	89 2b       	or	r24, r25
    b89c:	8a 2b       	or	r24, r26
    b89e:	8b 2b       	or	r24, r27
    b8a0:	09 f4       	brne	.+2      	; 0xb8a4 <f_open+0x2c4>
    b8a2:	a3 cf       	rjmp	.-186    	; 0xb7ea <f_open+0x20a>
    b8a4:	4f a4       	ldd	r4, Y+47	; 0x2f
    b8a6:	58 a8       	ldd	r5, Y+48	; 0x30
    b8a8:	c2 01       	movw	r24, r4
    b8aa:	0e 94 97 48 	call	0x912e	; 0x912e <clst2sect>
    b8ae:	61 15       	cp	r22, r1
    b8b0:	71 05       	cpc	r23, r1
    b8b2:	81 05       	cpc	r24, r1
    b8b4:	91 05       	cpc	r25, r1
    b8b6:	19 f1       	breq	.+70     	; 0xb8fe <f_open+0x31e>
    b8b8:	94 01       	movw	r18, r8
    b8ba:	83 01       	movw	r16, r6
    b8bc:	49 e0       	ldi	r20, 0x09	; 9
    b8be:	36 95       	lsr	r19
    b8c0:	27 95       	ror	r18
    b8c2:	17 95       	ror	r17
    b8c4:	07 95       	ror	r16
    b8c6:	4a 95       	dec	r20
    b8c8:	d1 f7       	brne	.-12     	; 0xb8be <f_open+0x2de>
    b8ca:	a9 01       	movw	r20, r18
    b8cc:	98 01       	movw	r18, r16
    b8ce:	26 0f       	add	r18, r22
    b8d0:	37 1f       	adc	r19, r23
    b8d2:	48 1f       	adc	r20, r24
    b8d4:	59 1f       	adc	r21, r25
    b8d6:	f7 01       	movw	r30, r14
    b8d8:	20 8f       	std	Z+24, r18	; 0x18
    b8da:	31 8f       	std	Z+25, r19	; 0x19
    b8dc:	42 8f       	std	Z+26, r20	; 0x1a
    b8de:	53 8f       	std	Z+27, r21	; 0x1b
    b8e0:	01 e0       	ldi	r16, 0x01	; 1
    b8e2:	10 e0       	ldi	r17, 0x00	; 0
    b8e4:	b6 01       	movw	r22, r12
    b8e6:	f2 01       	movw	r30, r4
    b8e8:	81 81       	ldd	r24, Z+1	; 0x01
    b8ea:	0e 94 02 6b 	call	0xd604	; 0xd604 <disk_read>
    b8ee:	31 e0       	ldi	r19, 0x01	; 1
    b8f0:	20 e0       	ldi	r18, 0x00	; 0
    b8f2:	89 2b       	or	r24, r25
    b8f4:	09 f4       	brne	.+2      	; 0xb8f8 <f_open+0x318>
    b8f6:	30 e0       	ldi	r19, 0x00	; 0
    b8f8:	03 2f       	mov	r16, r19
    b8fa:	12 2f       	mov	r17, r18
    b8fc:	02 c0       	rjmp	.+4      	; 0xb902 <f_open+0x322>
    b8fe:	02 e0       	ldi	r16, 0x02	; 2
    b900:	10 e0       	ldi	r17, 0x00	; 0
    b902:	c5 01       	movw	r24, r10
    b904:	0e 94 49 6a 	call	0xd492	; 0xd492 <ff_memfree>
    b908:	01 15       	cp	r16, r1
    b90a:	11 05       	cpc	r17, r1
    b90c:	59 f0       	breq	.+22     	; 0xb924 <f_open+0x344>
    b90e:	01 c0       	rjmp	.+2      	; 0xb912 <f_open+0x332>
    b910:	8c 01       	movw	r16, r24
    b912:	f7 01       	movw	r30, r14
    b914:	11 82       	std	Z+1, r1	; 0x01
    b916:	10 82       	st	Z, r1
    b918:	c8 01       	movw	r24, r16
    b91a:	16 c0       	rjmp	.+44     	; 0xb948 <f_open+0x368>
    b91c:	89 e0       	ldi	r24, 0x09	; 9
    b91e:	03 c0       	rjmp	.+6      	; 0xb926 <f_open+0x346>
    b920:	81 e1       	ldi	r24, 0x11	; 17
    b922:	01 c0       	rjmp	.+2      	; 0xb926 <f_open+0x346>
    b924:	80 e0       	ldi	r24, 0x00	; 0
    b926:	90 e0       	ldi	r25, 0x00	; 0
    b928:	0f c0       	rjmp	.+30     	; 0xb948 <f_open+0x368>
    b92a:	08 e0       	ldi	r16, 0x08	; 8
    b92c:	10 e0       	ldi	r17, 0x00	; 0
    b92e:	08 c0       	rjmp	.+16     	; 0xb940 <f_open+0x360>
    b930:	02 e0       	ldi	r16, 0x02	; 2
    b932:	10 e0       	ldi	r17, 0x00	; 0
    b934:	a5 cf       	rjmp	.-182    	; 0xb880 <f_open+0x2a0>
    b936:	04 e0       	ldi	r16, 0x04	; 4
    b938:	10 e0       	ldi	r17, 0x00	; 0
    b93a:	02 c0       	rjmp	.+4      	; 0xb940 <f_open+0x360>
    b93c:	07 e0       	ldi	r16, 0x07	; 7
    b93e:	10 e0       	ldi	r17, 0x00	; 0
    b940:	c5 01       	movw	r24, r10
    b942:	0e 94 49 6a 	call	0xd492	; 0xd492 <ff_memfree>
    b946:	e5 cf       	rjmp	.-54     	; 0xb912 <f_open+0x332>
    b948:	e6 96       	adiw	r28, 0x36	; 54
    b94a:	e2 e1       	ldi	r30, 0x12	; 18
    b94c:	0c 94 e4 e3 	jmp	0x1c7c8	; 0x1c7c8 <__epilogue_restores__>

0000b950 <f_read>:
    b950:	a6 e0       	ldi	r26, 0x06	; 6
    b952:	b0 e0       	ldi	r27, 0x00	; 0
    b954:	ee ea       	ldi	r30, 0xAE	; 174
    b956:	fc e5       	ldi	r31, 0x5C	; 92
    b958:	0c 94 c8 e3 	jmp	0x1c790	; 0x1c790 <__prologue_saves__>
    b95c:	7c 01       	movw	r14, r24
    b95e:	4b 01       	movw	r8, r22
    b960:	5a 01       	movw	r10, r20
    b962:	3e 83       	std	Y+6, r19	; 0x06
    b964:	2d 83       	std	Y+5, r18	; 0x05
    b966:	f9 01       	movw	r30, r18
    b968:	11 82       	std	Z+1, r1	; 0x01
    b96a:	10 82       	st	Z, r1
    b96c:	be 01       	movw	r22, r28
    b96e:	6f 5f       	subi	r22, 0xFF	; 255
    b970:	7f 4f       	sbci	r23, 0xFF	; 255
    b972:	0e 94 36 49 	call	0x926c	; 0x926c <validate>
    b976:	00 97       	sbiw	r24, 0x00	; 0
    b978:	09 f0       	breq	.+2      	; 0xb97c <f_read+0x2c>
    b97a:	31 c1       	rjmp	.+610    	; 0xbbde <f_read+0x28e>
    b97c:	f7 01       	movw	r30, r14
    b97e:	87 85       	ldd	r24, Z+15	; 0x0f
    b980:	90 e0       	ldi	r25, 0x00	; 0
    b982:	00 97       	sbiw	r24, 0x00	; 0
    b984:	09 f0       	breq	.+2      	; 0xb988 <f_read+0x38>
    b986:	2b c1       	rjmp	.+598    	; 0xbbde <f_read+0x28e>
    b988:	86 85       	ldd	r24, Z+14	; 0x0e
    b98a:	80 ff       	sbrs	r24, 0
    b98c:	26 c1       	rjmp	.+588    	; 0xbbda <f_read+0x28a>
    b98e:	82 85       	ldd	r24, Z+10	; 0x0a
    b990:	93 85       	ldd	r25, Z+11	; 0x0b
    b992:	a4 85       	ldd	r26, Z+12	; 0x0c
    b994:	b5 85       	ldd	r27, Z+13	; 0x0d
    b996:	40 89       	ldd	r20, Z+16	; 0x10
    b998:	51 89       	ldd	r21, Z+17	; 0x11
    b99a:	62 89       	ldd	r22, Z+18	; 0x12
    b99c:	73 89       	ldd	r23, Z+19	; 0x13
    b99e:	84 1b       	sub	r24, r20
    b9a0:	95 0b       	sbc	r25, r21
    b9a2:	a6 0b       	sbc	r26, r22
    b9a4:	b7 0b       	sbc	r27, r23
    b9a6:	a5 01       	movw	r20, r10
    b9a8:	60 e0       	ldi	r22, 0x00	; 0
    b9aa:	70 e0       	ldi	r23, 0x00	; 0
    b9ac:	84 17       	cp	r24, r20
    b9ae:	95 07       	cpc	r25, r21
    b9b0:	a6 07       	cpc	r26, r22
    b9b2:	b7 07       	cpc	r27, r23
    b9b4:	08 f4       	brcc	.+2      	; 0xb9b8 <f_read+0x68>
    b9b6:	5c 01       	movw	r10, r24
    b9b8:	17 01       	movw	r2, r14
    b9ba:	f4 e2       	ldi	r31, 0x24	; 36
    b9bc:	2f 0e       	add	r2, r31
    b9be:	31 1c       	adc	r3, r1
    b9c0:	a1 14       	cp	r10, r1
    b9c2:	b1 04       	cpc	r11, r1
    b9c4:	09 f4       	brne	.+2      	; 0xb9c8 <f_read+0x78>
    b9c6:	07 c1       	rjmp	.+526    	; 0xbbd6 <f_read+0x286>
    b9c8:	f7 01       	movw	r30, r14
    b9ca:	40 89       	ldd	r20, Z+16	; 0x10
    b9cc:	51 89       	ldd	r21, Z+17	; 0x11
    b9ce:	62 89       	ldd	r22, Z+18	; 0x12
    b9d0:	73 89       	ldd	r23, Z+19	; 0x13
    b9d2:	db 01       	movw	r26, r22
    b9d4:	ca 01       	movw	r24, r20
    b9d6:	91 70       	andi	r25, 0x01	; 1
    b9d8:	aa 27       	eor	r26, r26
    b9da:	bb 27       	eor	r27, r27
    b9dc:	89 2b       	or	r24, r25
    b9de:	8a 2b       	or	r24, r26
    b9e0:	8b 2b       	or	r24, r27
    b9e2:	09 f0       	breq	.+2      	; 0xb9e6 <f_read+0x96>
    b9e4:	cb c0       	rjmp	.+406    	; 0xbb7c <f_read+0x22c>
    b9e6:	e9 81       	ldd	r30, Y+1	; 0x01
    b9e8:	fa 81       	ldd	r31, Y+2	; 0x02
    b9ea:	01 85       	ldd	r16, Z+9	; 0x09
    b9ec:	12 85       	ldd	r17, Z+10	; 0x0a
    b9ee:	01 50       	subi	r16, 0x01	; 1
    b9f0:	11 09       	sbc	r17, r1
    b9f2:	db 01       	movw	r26, r22
    b9f4:	ca 01       	movw	r24, r20
    b9f6:	e9 e0       	ldi	r30, 0x09	; 9
    b9f8:	b6 95       	lsr	r27
    b9fa:	a7 95       	ror	r26
    b9fc:	97 95       	ror	r25
    b9fe:	87 95       	ror	r24
    ba00:	ea 95       	dec	r30
    ba02:	d1 f7       	brne	.-12     	; 0xb9f8 <f_read+0xa8>
    ba04:	08 23       	and	r16, r24
    ba06:	19 23       	and	r17, r25
    ba08:	01 15       	cp	r16, r1
    ba0a:	11 05       	cpc	r17, r1
    ba0c:	91 f5       	brne	.+100    	; 0xba72 <f_read+0x122>
    ba0e:	f7 01       	movw	r30, r14
    ba10:	41 15       	cp	r20, r1
    ba12:	51 05       	cpc	r21, r1
    ba14:	61 05       	cpc	r22, r1
    ba16:	71 05       	cpc	r23, r1
    ba18:	29 f4       	brne	.+10     	; 0xba24 <f_read+0xd4>
    ba1a:	66 81       	ldd	r22, Z+6	; 0x06
    ba1c:	77 81       	ldd	r23, Z+7	; 0x07
    ba1e:	80 85       	ldd	r24, Z+8	; 0x08
    ba20:	91 85       	ldd	r25, Z+9	; 0x09
    ba22:	11 c0       	rjmp	.+34     	; 0xba46 <f_read+0xf6>
    ba24:	82 a1       	ldd	r24, Z+34	; 0x22
    ba26:	93 a1       	ldd	r25, Z+35	; 0x23
    ba28:	89 2b       	or	r24, r25
    ba2a:	21 f0       	breq	.+8      	; 0xba34 <f_read+0xe4>
    ba2c:	c7 01       	movw	r24, r14
    ba2e:	0e 94 bf 48 	call	0x917e	; 0x917e <clmt_clust>
    ba32:	09 c0       	rjmp	.+18     	; 0xba46 <f_read+0xf6>
    ba34:	f7 01       	movw	r30, r14
    ba36:	44 89       	ldd	r20, Z+20	; 0x14
    ba38:	55 89       	ldd	r21, Z+21	; 0x15
    ba3a:	66 89       	ldd	r22, Z+22	; 0x16
    ba3c:	77 89       	ldd	r23, Z+23	; 0x17
    ba3e:	80 81       	ld	r24, Z
    ba40:	91 81       	ldd	r25, Z+1	; 0x01
    ba42:	0e 94 89 50 	call	0xa112	; 0xa112 <get_fat.isra.10>
    ba46:	62 30       	cpi	r22, 0x02	; 2
    ba48:	71 05       	cpc	r23, r1
    ba4a:	81 05       	cpc	r24, r1
    ba4c:	91 05       	cpc	r25, r1
    ba4e:	10 f4       	brcc	.+4      	; 0xba54 <f_read+0x104>
    ba50:	82 e0       	ldi	r24, 0x02	; 2
    ba52:	07 c0       	rjmp	.+14     	; 0xba62 <f_read+0x112>
    ba54:	6f 3f       	cpi	r22, 0xFF	; 255
    ba56:	ff ef       	ldi	r31, 0xFF	; 255
    ba58:	7f 07       	cpc	r23, r31
    ba5a:	8f 07       	cpc	r24, r31
    ba5c:	9f 07       	cpc	r25, r31
    ba5e:	21 f4       	brne	.+8      	; 0xba68 <f_read+0x118>
    ba60:	81 e0       	ldi	r24, 0x01	; 1
    ba62:	f7 01       	movw	r30, r14
    ba64:	87 87       	std	Z+15, r24	; 0x0f
    ba66:	ba c0       	rjmp	.+372    	; 0xbbdc <f_read+0x28c>
    ba68:	f7 01       	movw	r30, r14
    ba6a:	64 8b       	std	Z+20, r22	; 0x14
    ba6c:	75 8b       	std	Z+21, r23	; 0x15
    ba6e:	86 8b       	std	Z+22, r24	; 0x16
    ba70:	97 8b       	std	Z+23, r25	; 0x17
    ba72:	89 81       	ldd	r24, Y+1	; 0x01
    ba74:	9a 81       	ldd	r25, Y+2	; 0x02
    ba76:	9c 83       	std	Y+4, r25	; 0x04
    ba78:	8b 83       	std	Y+3, r24	; 0x03
    ba7a:	f7 01       	movw	r30, r14
    ba7c:	44 89       	ldd	r20, Z+20	; 0x14
    ba7e:	55 89       	ldd	r21, Z+21	; 0x15
    ba80:	66 89       	ldd	r22, Z+22	; 0x16
    ba82:	77 89       	ldd	r23, Z+23	; 0x17
    ba84:	0e 94 97 48 	call	0x912e	; 0x912e <clst2sect>
    ba88:	61 15       	cp	r22, r1
    ba8a:	71 05       	cpc	r23, r1
    ba8c:	81 05       	cpc	r24, r1
    ba8e:	91 05       	cpc	r25, r1
    ba90:	f9 f2       	breq	.-66     	; 0xba50 <f_read+0x100>
    ba92:	2b 01       	movw	r4, r22
    ba94:	3c 01       	movw	r6, r24
    ba96:	40 0e       	add	r4, r16
    ba98:	51 1e       	adc	r5, r17
    ba9a:	61 1c       	adc	r6, r1
    ba9c:	71 1c       	adc	r7, r1
    ba9e:	65 01       	movw	r12, r10
    baa0:	cd 2c       	mov	r12, r13
    baa2:	dd 24       	eor	r13, r13
    baa4:	c6 94       	lsr	r12
    baa6:	c1 14       	cp	r12, r1
    baa8:	d1 04       	cpc	r13, r1
    baaa:	d1 f1       	breq	.+116    	; 0xbb20 <f_read+0x1d0>
    baac:	eb 81       	ldd	r30, Y+3	; 0x03
    baae:	fc 81       	ldd	r31, Y+4	; 0x04
    bab0:	81 85       	ldd	r24, Z+9	; 0x09
    bab2:	92 85       	ldd	r25, Z+10	; 0x0a
    bab4:	98 01       	movw	r18, r16
    bab6:	2c 0d       	add	r18, r12
    bab8:	3d 1d       	adc	r19, r13
    baba:	82 17       	cp	r24, r18
    babc:	93 07       	cpc	r25, r19
    babe:	18 f4       	brcc	.+6      	; 0xbac6 <f_read+0x176>
    bac0:	6c 01       	movw	r12, r24
    bac2:	c0 1a       	sub	r12, r16
    bac4:	d1 0a       	sbc	r13, r17
    bac6:	86 01       	movw	r16, r12
    bac8:	a3 01       	movw	r20, r6
    baca:	92 01       	movw	r18, r4
    bacc:	b4 01       	movw	r22, r8
    bace:	eb 81       	ldd	r30, Y+3	; 0x03
    bad0:	fc 81       	ldd	r31, Y+4	; 0x04
    bad2:	81 81       	ldd	r24, Z+1	; 0x01
    bad4:	0e 94 02 6b 	call	0xd604	; 0xd604 <disk_read>
    bad8:	89 2b       	or	r24, r25
    bada:	11 f6       	brne	.-124    	; 0xba60 <f_read+0x110>
    badc:	f7 01       	movw	r30, r14
    bade:	86 85       	ldd	r24, Z+14	; 0x0e
    bae0:	87 ff       	sbrs	r24, 7
    bae2:	1a c0       	rjmp	.+52     	; 0xbb18 <f_read+0x1c8>
    bae4:	80 8d       	ldd	r24, Z+24	; 0x18
    bae6:	91 8d       	ldd	r25, Z+25	; 0x19
    bae8:	a2 8d       	ldd	r26, Z+26	; 0x1a
    baea:	b3 8d       	ldd	r27, Z+27	; 0x1b
    baec:	84 19       	sub	r24, r4
    baee:	95 09       	sbc	r25, r5
    baf0:	a6 09       	sbc	r26, r6
    baf2:	b7 09       	sbc	r27, r7
    baf4:	a6 01       	movw	r20, r12
    baf6:	60 e0       	ldi	r22, 0x00	; 0
    baf8:	70 e0       	ldi	r23, 0x00	; 0
    bafa:	84 17       	cp	r24, r20
    bafc:	95 07       	cpc	r25, r21
    bafe:	a6 07       	cpc	r26, r22
    bb00:	b7 07       	cpc	r27, r23
    bb02:	50 f4       	brcc	.+20     	; 0xbb18 <f_read+0x1c8>
    bb04:	98 2f       	mov	r25, r24
    bb06:	88 27       	eor	r24, r24
    bb08:	99 0f       	add	r25, r25
    bb0a:	40 e0       	ldi	r20, 0x00	; 0
    bb0c:	52 e0       	ldi	r21, 0x02	; 2
    bb0e:	b1 01       	movw	r22, r2
    bb10:	88 0d       	add	r24, r8
    bb12:	99 1d       	adc	r25, r9
    bb14:	0e 94 62 49 	call	0x92c4	; 0x92c4 <mem_cpy.part.0>
    bb18:	dc 2c       	mov	r13, r12
    bb1a:	cc 24       	eor	r12, r12
    bb1c:	dd 0c       	add	r13, r13
    bb1e:	41 c0       	rjmp	.+130    	; 0xbba2 <f_read+0x252>
    bb20:	f7 01       	movw	r30, r14
    bb22:	20 8d       	ldd	r18, Z+24	; 0x18
    bb24:	31 8d       	ldd	r19, Z+25	; 0x19
    bb26:	42 8d       	ldd	r20, Z+26	; 0x1a
    bb28:	53 8d       	ldd	r21, Z+27	; 0x1b
    bb2a:	42 16       	cp	r4, r18
    bb2c:	53 06       	cpc	r5, r19
    bb2e:	64 06       	cpc	r6, r20
    bb30:	75 06       	cpc	r7, r21
    bb32:	f9 f0       	breq	.+62     	; 0xbb72 <f_read+0x222>
    bb34:	86 85       	ldd	r24, Z+14	; 0x0e
    bb36:	87 ff       	sbrs	r24, 7
    bb38:	0f c0       	rjmp	.+30     	; 0xbb58 <f_read+0x208>
    bb3a:	01 e0       	ldi	r16, 0x01	; 1
    bb3c:	10 e0       	ldi	r17, 0x00	; 0
    bb3e:	b1 01       	movw	r22, r2
    bb40:	eb 81       	ldd	r30, Y+3	; 0x03
    bb42:	fc 81       	ldd	r31, Y+4	; 0x04
    bb44:	81 81       	ldd	r24, Z+1	; 0x01
    bb46:	0e 94 12 6b 	call	0xd624	; 0xd624 <disk_write>
    bb4a:	89 2b       	or	r24, r25
    bb4c:	09 f0       	breq	.+2      	; 0xbb50 <f_read+0x200>
    bb4e:	88 cf       	rjmp	.-240    	; 0xba60 <f_read+0x110>
    bb50:	f7 01       	movw	r30, r14
    bb52:	86 85       	ldd	r24, Z+14	; 0x0e
    bb54:	8f 77       	andi	r24, 0x7F	; 127
    bb56:	86 87       	std	Z+14, r24	; 0x0e
    bb58:	e9 81       	ldd	r30, Y+1	; 0x01
    bb5a:	fa 81       	ldd	r31, Y+2	; 0x02
    bb5c:	01 e0       	ldi	r16, 0x01	; 1
    bb5e:	10 e0       	ldi	r17, 0x00	; 0
    bb60:	a3 01       	movw	r20, r6
    bb62:	92 01       	movw	r18, r4
    bb64:	b1 01       	movw	r22, r2
    bb66:	81 81       	ldd	r24, Z+1	; 0x01
    bb68:	0e 94 02 6b 	call	0xd604	; 0xd604 <disk_read>
    bb6c:	89 2b       	or	r24, r25
    bb6e:	09 f0       	breq	.+2      	; 0xbb72 <f_read+0x222>
    bb70:	77 cf       	rjmp	.-274    	; 0xba60 <f_read+0x110>
    bb72:	f7 01       	movw	r30, r14
    bb74:	40 8e       	std	Z+24, r4	; 0x18
    bb76:	51 8e       	std	Z+25, r5	; 0x19
    bb78:	62 8e       	std	Z+26, r6	; 0x1a
    bb7a:	73 8e       	std	Z+27, r7	; 0x1b
    bb7c:	f7 01       	movw	r30, r14
    bb7e:	60 89       	ldd	r22, Z+16	; 0x10
    bb80:	71 89       	ldd	r23, Z+17	; 0x11
    bb82:	71 70       	andi	r23, 0x01	; 1
    bb84:	80 e0       	ldi	r24, 0x00	; 0
    bb86:	92 e0       	ldi	r25, 0x02	; 2
    bb88:	86 1b       	sub	r24, r22
    bb8a:	97 0b       	sbc	r25, r23
    bb8c:	65 01       	movw	r12, r10
    bb8e:	8a 15       	cp	r24, r10
    bb90:	9b 05       	cpc	r25, r11
    bb92:	08 f4       	brcc	.+2      	; 0xbb96 <f_read+0x246>
    bb94:	6c 01       	movw	r12, r24
    bb96:	62 0d       	add	r22, r2
    bb98:	73 1d       	adc	r23, r3
    bb9a:	a6 01       	movw	r20, r12
    bb9c:	c4 01       	movw	r24, r8
    bb9e:	0e 94 62 49 	call	0x92c4	; 0x92c4 <mem_cpy.part.0>
    bba2:	ac 18       	sub	r10, r12
    bba4:	bd 08       	sbc	r11, r13
    bba6:	ed 81       	ldd	r30, Y+5	; 0x05
    bba8:	fe 81       	ldd	r31, Y+6	; 0x06
    bbaa:	80 81       	ld	r24, Z
    bbac:	91 81       	ldd	r25, Z+1	; 0x01
    bbae:	8c 0d       	add	r24, r12
    bbb0:	9d 1d       	adc	r25, r13
    bbb2:	91 83       	std	Z+1, r25	; 0x01
    bbb4:	80 83       	st	Z, r24
    bbb6:	8c 0c       	add	r8, r12
    bbb8:	9d 1c       	adc	r9, r13
    bbba:	f7 01       	movw	r30, r14
    bbbc:	80 89       	ldd	r24, Z+16	; 0x10
    bbbe:	91 89       	ldd	r25, Z+17	; 0x11
    bbc0:	a2 89       	ldd	r26, Z+18	; 0x12
    bbc2:	b3 89       	ldd	r27, Z+19	; 0x13
    bbc4:	8c 0d       	add	r24, r12
    bbc6:	9d 1d       	adc	r25, r13
    bbc8:	a1 1d       	adc	r26, r1
    bbca:	b1 1d       	adc	r27, r1
    bbcc:	80 8b       	std	Z+16, r24	; 0x10
    bbce:	91 8b       	std	Z+17, r25	; 0x11
    bbd0:	a2 8b       	std	Z+18, r26	; 0x12
    bbd2:	b3 8b       	std	Z+19, r27	; 0x13
    bbd4:	f5 ce       	rjmp	.-534    	; 0xb9c0 <f_read+0x70>
    bbd6:	80 e0       	ldi	r24, 0x00	; 0
    bbd8:	01 c0       	rjmp	.+2      	; 0xbbdc <f_read+0x28c>
    bbda:	87 e0       	ldi	r24, 0x07	; 7
    bbdc:	90 e0       	ldi	r25, 0x00	; 0
    bbde:	26 96       	adiw	r28, 0x06	; 6
    bbe0:	e2 e1       	ldi	r30, 0x12	; 18
    bbe2:	0c 94 e4 e3 	jmp	0x1c7c8	; 0x1c7c8 <__epilogue_restores__>

0000bbe6 <f_write>:
    bbe6:	a8 e0       	ldi	r26, 0x08	; 8
    bbe8:	b0 e0       	ldi	r27, 0x00	; 0
    bbea:	e9 ef       	ldi	r30, 0xF9	; 249
    bbec:	fd e5       	ldi	r31, 0x5D	; 93
    bbee:	0c 94 c8 e3 	jmp	0x1c790	; 0x1c790 <__prologue_saves__>
    bbf2:	7c 01       	movw	r14, r24
    bbf4:	3b 01       	movw	r6, r22
    bbf6:	5a 01       	movw	r10, r20
    bbf8:	38 87       	std	Y+8, r19	; 0x08
    bbfa:	2f 83       	std	Y+7, r18	; 0x07
    bbfc:	f9 01       	movw	r30, r18
    bbfe:	11 82       	std	Z+1, r1	; 0x01
    bc00:	10 82       	st	Z, r1
    bc02:	be 01       	movw	r22, r28
    bc04:	6f 5f       	subi	r22, 0xFF	; 255
    bc06:	7f 4f       	sbci	r23, 0xFF	; 255
    bc08:	0e 94 36 49 	call	0x926c	; 0x926c <validate>
    bc0c:	00 97       	sbiw	r24, 0x00	; 0
    bc0e:	09 f0       	breq	.+2      	; 0xbc12 <f_write+0x2c>
    bc10:	7d c1       	rjmp	.+762    	; 0xbf0c <f_write+0x326>
    bc12:	f7 01       	movw	r30, r14
    bc14:	87 85       	ldd	r24, Z+15	; 0x0f
    bc16:	90 e0       	ldi	r25, 0x00	; 0
    bc18:	00 97       	sbiw	r24, 0x00	; 0
    bc1a:	09 f0       	breq	.+2      	; 0xbc1e <f_write+0x38>
    bc1c:	77 c1       	rjmp	.+750    	; 0xbf0c <f_write+0x326>
    bc1e:	86 85       	ldd	r24, Z+14	; 0x0e
    bc20:	81 ff       	sbrs	r24, 1
    bc22:	72 c1       	rjmp	.+740    	; 0xbf08 <f_write+0x322>
    bc24:	80 89       	ldd	r24, Z+16	; 0x10
    bc26:	91 89       	ldd	r25, Z+17	; 0x11
    bc28:	a2 89       	ldd	r26, Z+18	; 0x12
    bc2a:	b3 89       	ldd	r27, Z+19	; 0x13
    bc2c:	ac 01       	movw	r20, r24
    bc2e:	bd 01       	movw	r22, r26
    bc30:	4a 0d       	add	r20, r10
    bc32:	5b 1d       	adc	r21, r11
    bc34:	61 1d       	adc	r22, r1
    bc36:	71 1d       	adc	r23, r1
    bc38:	48 17       	cp	r20, r24
    bc3a:	59 07       	cpc	r21, r25
    bc3c:	6a 07       	cpc	r22, r26
    bc3e:	7b 07       	cpc	r23, r27
    bc40:	18 f4       	brcc	.+6      	; 0xbc48 <f_write+0x62>
    bc42:	5c 01       	movw	r10, r24
    bc44:	a0 94       	com	r10
    bc46:	b0 94       	com	r11
    bc48:	97 01       	movw	r18, r14
    bc4a:	2c 5d       	subi	r18, 0xDC	; 220
    bc4c:	3f 4f       	sbci	r19, 0xFF	; 255
    bc4e:	3e 83       	std	Y+6, r19	; 0x06
    bc50:	2d 83       	std	Y+5, r18	; 0x05
    bc52:	a1 14       	cp	r10, r1
    bc54:	b1 04       	cpc	r11, r1
    bc56:	09 f4       	brne	.+2      	; 0xbc5a <f_write+0x74>
    bc58:	4d c0       	rjmp	.+154    	; 0xbcf4 <f_write+0x10e>
    bc5a:	f7 01       	movw	r30, r14
    bc5c:	40 89       	ldd	r20, Z+16	; 0x10
    bc5e:	51 89       	ldd	r21, Z+17	; 0x11
    bc60:	62 89       	ldd	r22, Z+18	; 0x12
    bc62:	73 89       	ldd	r23, Z+19	; 0x13
    bc64:	db 01       	movw	r26, r22
    bc66:	ca 01       	movw	r24, r20
    bc68:	91 70       	andi	r25, 0x01	; 1
    bc6a:	aa 27       	eor	r26, r26
    bc6c:	bb 27       	eor	r27, r27
    bc6e:	89 2b       	or	r24, r25
    bc70:	8a 2b       	or	r24, r26
    bc72:	8b 2b       	or	r24, r27
    bc74:	09 f0       	breq	.+2      	; 0xbc78 <f_write+0x92>
    bc76:	05 c1       	rjmp	.+522    	; 0xbe82 <f_write+0x29c>
    bc78:	e9 81       	ldd	r30, Y+1	; 0x01
    bc7a:	fa 81       	ldd	r31, Y+2	; 0x02
    bc7c:	81 84       	ldd	r8, Z+9	; 0x09
    bc7e:	92 84       	ldd	r9, Z+10	; 0x0a
    bc80:	f1 e0       	ldi	r31, 0x01	; 1
    bc82:	8f 1a       	sub	r8, r31
    bc84:	91 08       	sbc	r9, r1
    bc86:	db 01       	movw	r26, r22
    bc88:	ca 01       	movw	r24, r20
    bc8a:	e9 e0       	ldi	r30, 0x09	; 9
    bc8c:	b6 95       	lsr	r27
    bc8e:	a7 95       	ror	r26
    bc90:	97 95       	ror	r25
    bc92:	87 95       	ror	r24
    bc94:	ea 95       	dec	r30
    bc96:	d1 f7       	brne	.-12     	; 0xbc8c <f_write+0xa6>
    bc98:	88 22       	and	r8, r24
    bc9a:	99 22       	and	r9, r25
    bc9c:	81 14       	cp	r8, r1
    bc9e:	91 04       	cpc	r9, r1
    bca0:	09 f0       	breq	.+2      	; 0xbca4 <f_write+0xbe>
    bca2:	51 c0       	rjmp	.+162    	; 0xbd46 <f_write+0x160>
    bca4:	f7 01       	movw	r30, r14
    bca6:	41 15       	cp	r20, r1
    bca8:	51 05       	cpc	r21, r1
    bcaa:	61 05       	cpc	r22, r1
    bcac:	71 05       	cpc	r23, r1
    bcae:	69 f4       	brne	.+26     	; 0xbcca <f_write+0xe4>
    bcb0:	66 81       	ldd	r22, Z+6	; 0x06
    bcb2:	77 81       	ldd	r23, Z+7	; 0x07
    bcb4:	80 85       	ldd	r24, Z+8	; 0x08
    bcb6:	91 85       	ldd	r25, Z+9	; 0x09
    bcb8:	61 15       	cp	r22, r1
    bcba:	71 05       	cpc	r23, r1
    bcbc:	81 05       	cpc	r24, r1
    bcbe:	91 05       	cpc	r25, r1
    bcc0:	f9 f4       	brne	.+62     	; 0xbd00 <f_write+0x11a>
    bcc2:	40 e0       	ldi	r20, 0x00	; 0
    bcc4:	50 e0       	ldi	r21, 0x00	; 0
    bcc6:	ba 01       	movw	r22, r20
    bcc8:	0d c0       	rjmp	.+26     	; 0xbce4 <f_write+0xfe>
    bcca:	82 a1       	ldd	r24, Z+34	; 0x22
    bccc:	93 a1       	ldd	r25, Z+35	; 0x23
    bcce:	89 2b       	or	r24, r25
    bcd0:	21 f0       	breq	.+8      	; 0xbcda <f_write+0xf4>
    bcd2:	c7 01       	movw	r24, r14
    bcd4:	0e 94 bf 48 	call	0x917e	; 0x917e <clmt_clust>
    bcd8:	08 c0       	rjmp	.+16     	; 0xbcea <f_write+0x104>
    bcda:	f7 01       	movw	r30, r14
    bcdc:	44 89       	ldd	r20, Z+20	; 0x14
    bcde:	55 89       	ldd	r21, Z+21	; 0x15
    bce0:	66 89       	ldd	r22, Z+22	; 0x16
    bce2:	77 89       	ldd	r23, Z+23	; 0x17
    bce4:	c7 01       	movw	r24, r14
    bce6:	0e 94 fe 51 	call	0xa3fc	; 0xa3fc <create_chain>
    bcea:	61 15       	cp	r22, r1
    bcec:	71 05       	cpc	r23, r1
    bcee:	81 05       	cpc	r24, r1
    bcf0:	91 05       	cpc	r25, r1
    bcf2:	31 f4       	brne	.+12     	; 0xbd00 <f_write+0x11a>
    bcf4:	f7 01       	movw	r30, r14
    bcf6:	86 85       	ldd	r24, Z+14	; 0x0e
    bcf8:	80 64       	ori	r24, 0x40	; 64
    bcfa:	86 87       	std	Z+14, r24	; 0x0e
    bcfc:	80 e0       	ldi	r24, 0x00	; 0
    bcfe:	05 c1       	rjmp	.+522    	; 0xbf0a <f_write+0x324>
    bd00:	61 30       	cpi	r22, 0x01	; 1
    bd02:	71 05       	cpc	r23, r1
    bd04:	81 05       	cpc	r24, r1
    bd06:	91 05       	cpc	r25, r1
    bd08:	11 f4       	brne	.+4      	; 0xbd0e <f_write+0x128>
    bd0a:	82 e0       	ldi	r24, 0x02	; 2
    bd0c:	07 c0       	rjmp	.+14     	; 0xbd1c <f_write+0x136>
    bd0e:	6f 3f       	cpi	r22, 0xFF	; 255
    bd10:	ff ef       	ldi	r31, 0xFF	; 255
    bd12:	7f 07       	cpc	r23, r31
    bd14:	8f 07       	cpc	r24, r31
    bd16:	9f 07       	cpc	r25, r31
    bd18:	21 f4       	brne	.+8      	; 0xbd22 <f_write+0x13c>
    bd1a:	81 e0       	ldi	r24, 0x01	; 1
    bd1c:	f7 01       	movw	r30, r14
    bd1e:	87 87       	std	Z+15, r24	; 0x0f
    bd20:	f4 c0       	rjmp	.+488    	; 0xbf0a <f_write+0x324>
    bd22:	f7 01       	movw	r30, r14
    bd24:	64 8b       	std	Z+20, r22	; 0x14
    bd26:	75 8b       	std	Z+21, r23	; 0x15
    bd28:	86 8b       	std	Z+22, r24	; 0x16
    bd2a:	97 8b       	std	Z+23, r25	; 0x17
    bd2c:	06 81       	ldd	r16, Z+6	; 0x06
    bd2e:	17 81       	ldd	r17, Z+7	; 0x07
    bd30:	20 85       	ldd	r18, Z+8	; 0x08
    bd32:	31 85       	ldd	r19, Z+9	; 0x09
    bd34:	01 15       	cp	r16, r1
    bd36:	11 05       	cpc	r17, r1
    bd38:	21 05       	cpc	r18, r1
    bd3a:	31 05       	cpc	r19, r1
    bd3c:	21 f4       	brne	.+8      	; 0xbd46 <f_write+0x160>
    bd3e:	66 83       	std	Z+6, r22	; 0x06
    bd40:	77 83       	std	Z+7, r23	; 0x07
    bd42:	80 87       	std	Z+8, r24	; 0x08
    bd44:	91 87       	std	Z+9, r25	; 0x09
    bd46:	f7 01       	movw	r30, r14
    bd48:	86 85       	ldd	r24, Z+14	; 0x0e
    bd4a:	87 ff       	sbrs	r24, 7
    bd4c:	13 c0       	rjmp	.+38     	; 0xbd74 <f_write+0x18e>
    bd4e:	20 8d       	ldd	r18, Z+24	; 0x18
    bd50:	31 8d       	ldd	r19, Z+25	; 0x19
    bd52:	42 8d       	ldd	r20, Z+26	; 0x1a
    bd54:	53 8d       	ldd	r21, Z+27	; 0x1b
    bd56:	e9 81       	ldd	r30, Y+1	; 0x01
    bd58:	fa 81       	ldd	r31, Y+2	; 0x02
    bd5a:	01 e0       	ldi	r16, 0x01	; 1
    bd5c:	10 e0       	ldi	r17, 0x00	; 0
    bd5e:	6d 81       	ldd	r22, Y+5	; 0x05
    bd60:	7e 81       	ldd	r23, Y+6	; 0x06
    bd62:	81 81       	ldd	r24, Z+1	; 0x01
    bd64:	0e 94 12 6b 	call	0xd624	; 0xd624 <disk_write>
    bd68:	89 2b       	or	r24, r25
    bd6a:	b9 f6       	brne	.-82     	; 0xbd1a <f_write+0x134>
    bd6c:	f7 01       	movw	r30, r14
    bd6e:	86 85       	ldd	r24, Z+14	; 0x0e
    bd70:	8f 77       	andi	r24, 0x7F	; 127
    bd72:	86 87       	std	Z+14, r24	; 0x0e
    bd74:	29 81       	ldd	r18, Y+1	; 0x01
    bd76:	3a 81       	ldd	r19, Y+2	; 0x02
    bd78:	3c 83       	std	Y+4, r19	; 0x04
    bd7a:	2b 83       	std	Y+3, r18	; 0x03
    bd7c:	f7 01       	movw	r30, r14
    bd7e:	44 89       	ldd	r20, Z+20	; 0x14
    bd80:	55 89       	ldd	r21, Z+21	; 0x15
    bd82:	66 89       	ldd	r22, Z+22	; 0x16
    bd84:	77 89       	ldd	r23, Z+23	; 0x17
    bd86:	c9 01       	movw	r24, r18
    bd88:	0e 94 97 48 	call	0x912e	; 0x912e <clst2sect>
    bd8c:	61 15       	cp	r22, r1
    bd8e:	71 05       	cpc	r23, r1
    bd90:	81 05       	cpc	r24, r1
    bd92:	91 05       	cpc	r25, r1
    bd94:	09 f4       	brne	.+2      	; 0xbd98 <f_write+0x1b2>
    bd96:	b9 cf       	rjmp	.-142    	; 0xbd0a <f_write+0x124>
    bd98:	1b 01       	movw	r2, r22
    bd9a:	2c 01       	movw	r4, r24
    bd9c:	28 0c       	add	r2, r8
    bd9e:	39 1c       	adc	r3, r9
    bda0:	41 1c       	adc	r4, r1
    bda2:	51 1c       	adc	r5, r1
    bda4:	65 01       	movw	r12, r10
    bda6:	cd 2c       	mov	r12, r13
    bda8:	dd 24       	eor	r13, r13
    bdaa:	c6 94       	lsr	r12
    bdac:	c1 14       	cp	r12, r1
    bdae:	d1 04       	cpc	r13, r1
    bdb0:	f1 f1       	breq	.+124    	; 0xbe2e <f_write+0x248>
    bdb2:	eb 81       	ldd	r30, Y+3	; 0x03
    bdb4:	fc 81       	ldd	r31, Y+4	; 0x04
    bdb6:	81 85       	ldd	r24, Z+9	; 0x09
    bdb8:	92 85       	ldd	r25, Z+10	; 0x0a
    bdba:	94 01       	movw	r18, r8
    bdbc:	2c 0d       	add	r18, r12
    bdbe:	3d 1d       	adc	r19, r13
    bdc0:	82 17       	cp	r24, r18
    bdc2:	93 07       	cpc	r25, r19
    bdc4:	18 f4       	brcc	.+6      	; 0xbdcc <f_write+0x1e6>
    bdc6:	6c 01       	movw	r12, r24
    bdc8:	c8 18       	sub	r12, r8
    bdca:	d9 08       	sbc	r13, r9
    bdcc:	86 01       	movw	r16, r12
    bdce:	a2 01       	movw	r20, r4
    bdd0:	91 01       	movw	r18, r2
    bdd2:	b3 01       	movw	r22, r6
    bdd4:	eb 81       	ldd	r30, Y+3	; 0x03
    bdd6:	fc 81       	ldd	r31, Y+4	; 0x04
    bdd8:	81 81       	ldd	r24, Z+1	; 0x01
    bdda:	0e 94 12 6b 	call	0xd624	; 0xd624 <disk_write>
    bdde:	89 2b       	or	r24, r25
    bde0:	09 f0       	breq	.+2      	; 0xbde4 <f_write+0x1fe>
    bde2:	9b cf       	rjmp	.-202    	; 0xbd1a <f_write+0x134>
    bde4:	f7 01       	movw	r30, r14
    bde6:	80 8d       	ldd	r24, Z+24	; 0x18
    bde8:	91 8d       	ldd	r25, Z+25	; 0x19
    bdea:	a2 8d       	ldd	r26, Z+26	; 0x1a
    bdec:	b3 8d       	ldd	r27, Z+27	; 0x1b
    bdee:	82 19       	sub	r24, r2
    bdf0:	93 09       	sbc	r25, r3
    bdf2:	a4 09       	sbc	r26, r4
    bdf4:	b5 09       	sbc	r27, r5
    bdf6:	a6 01       	movw	r20, r12
    bdf8:	60 e0       	ldi	r22, 0x00	; 0
    bdfa:	70 e0       	ldi	r23, 0x00	; 0
    bdfc:	84 17       	cp	r24, r20
    bdfe:	95 07       	cpc	r25, r21
    be00:	a6 07       	cpc	r26, r22
    be02:	b7 07       	cpc	r27, r23
    be04:	80 f4       	brcc	.+32     	; 0xbe26 <f_write+0x240>
    be06:	98 2f       	mov	r25, r24
    be08:	88 27       	eor	r24, r24
    be0a:	99 0f       	add	r25, r25
    be0c:	b3 01       	movw	r22, r6
    be0e:	68 0f       	add	r22, r24
    be10:	79 1f       	adc	r23, r25
    be12:	40 e0       	ldi	r20, 0x00	; 0
    be14:	52 e0       	ldi	r21, 0x02	; 2
    be16:	8d 81       	ldd	r24, Y+5	; 0x05
    be18:	9e 81       	ldd	r25, Y+6	; 0x06
    be1a:	0e 94 62 49 	call	0x92c4	; 0x92c4 <mem_cpy.part.0>
    be1e:	f7 01       	movw	r30, r14
    be20:	86 85       	ldd	r24, Z+14	; 0x0e
    be22:	8f 77       	andi	r24, 0x7F	; 127
    be24:	86 87       	std	Z+14, r24	; 0x0e
    be26:	dc 2c       	mov	r13, r12
    be28:	cc 24       	eor	r12, r12
    be2a:	dd 0c       	add	r13, r13
    be2c:	43 c0       	rjmp	.+134    	; 0xbeb4 <f_write+0x2ce>
    be2e:	f7 01       	movw	r30, r14
    be30:	80 8d       	ldd	r24, Z+24	; 0x18
    be32:	91 8d       	ldd	r25, Z+25	; 0x19
    be34:	a2 8d       	ldd	r26, Z+26	; 0x1a
    be36:	b3 8d       	ldd	r27, Z+27	; 0x1b
    be38:	28 16       	cp	r2, r24
    be3a:	39 06       	cpc	r3, r25
    be3c:	4a 06       	cpc	r4, r26
    be3e:	5b 06       	cpc	r5, r27
    be40:	d9 f0       	breq	.+54     	; 0xbe78 <f_write+0x292>
    be42:	40 89       	ldd	r20, Z+16	; 0x10
    be44:	51 89       	ldd	r21, Z+17	; 0x11
    be46:	62 89       	ldd	r22, Z+18	; 0x12
    be48:	73 89       	ldd	r23, Z+19	; 0x13
    be4a:	82 85       	ldd	r24, Z+10	; 0x0a
    be4c:	93 85       	ldd	r25, Z+11	; 0x0b
    be4e:	a4 85       	ldd	r26, Z+12	; 0x0c
    be50:	b5 85       	ldd	r27, Z+13	; 0x0d
    be52:	48 17       	cp	r20, r24
    be54:	59 07       	cpc	r21, r25
    be56:	6a 07       	cpc	r22, r26
    be58:	7b 07       	cpc	r23, r27
    be5a:	70 f4       	brcc	.+28     	; 0xbe78 <f_write+0x292>
    be5c:	01 e0       	ldi	r16, 0x01	; 1
    be5e:	10 e0       	ldi	r17, 0x00	; 0
    be60:	a2 01       	movw	r20, r4
    be62:	91 01       	movw	r18, r2
    be64:	6d 81       	ldd	r22, Y+5	; 0x05
    be66:	7e 81       	ldd	r23, Y+6	; 0x06
    be68:	eb 81       	ldd	r30, Y+3	; 0x03
    be6a:	fc 81       	ldd	r31, Y+4	; 0x04
    be6c:	81 81       	ldd	r24, Z+1	; 0x01
    be6e:	0e 94 02 6b 	call	0xd604	; 0xd604 <disk_read>
    be72:	89 2b       	or	r24, r25
    be74:	09 f0       	breq	.+2      	; 0xbe78 <f_write+0x292>
    be76:	51 cf       	rjmp	.-350    	; 0xbd1a <f_write+0x134>
    be78:	f7 01       	movw	r30, r14
    be7a:	20 8e       	std	Z+24, r2	; 0x18
    be7c:	31 8e       	std	Z+25, r3	; 0x19
    be7e:	42 8e       	std	Z+26, r4	; 0x1a
    be80:	53 8e       	std	Z+27, r5	; 0x1b
    be82:	f7 01       	movw	r30, r14
    be84:	80 89       	ldd	r24, Z+16	; 0x10
    be86:	91 89       	ldd	r25, Z+17	; 0x11
    be88:	91 70       	andi	r25, 0x01	; 1
    be8a:	20 e0       	ldi	r18, 0x00	; 0
    be8c:	32 e0       	ldi	r19, 0x02	; 2
    be8e:	28 1b       	sub	r18, r24
    be90:	39 0b       	sbc	r19, r25
    be92:	65 01       	movw	r12, r10
    be94:	2a 15       	cp	r18, r10
    be96:	3b 05       	cpc	r19, r11
    be98:	08 f4       	brcc	.+2      	; 0xbe9c <f_write+0x2b6>
    be9a:	69 01       	movw	r12, r18
    be9c:	a6 01       	movw	r20, r12
    be9e:	b3 01       	movw	r22, r6
    bea0:	2d 81       	ldd	r18, Y+5	; 0x05
    bea2:	3e 81       	ldd	r19, Y+6	; 0x06
    bea4:	82 0f       	add	r24, r18
    bea6:	93 1f       	adc	r25, r19
    bea8:	0e 94 62 49 	call	0x92c4	; 0x92c4 <mem_cpy.part.0>
    beac:	f7 01       	movw	r30, r14
    beae:	86 85       	ldd	r24, Z+14	; 0x0e
    beb0:	80 68       	ori	r24, 0x80	; 128
    beb2:	86 87       	std	Z+14, r24	; 0x0e
    beb4:	ac 18       	sub	r10, r12
    beb6:	bd 08       	sbc	r11, r13
    beb8:	ef 81       	ldd	r30, Y+7	; 0x07
    beba:	f8 85       	ldd	r31, Y+8	; 0x08
    bebc:	80 81       	ld	r24, Z
    bebe:	91 81       	ldd	r25, Z+1	; 0x01
    bec0:	8c 0d       	add	r24, r12
    bec2:	9d 1d       	adc	r25, r13
    bec4:	91 83       	std	Z+1, r25	; 0x01
    bec6:	80 83       	st	Z, r24
    bec8:	6c 0c       	add	r6, r12
    beca:	7d 1c       	adc	r7, r13
    becc:	f7 01       	movw	r30, r14
    bece:	80 89       	ldd	r24, Z+16	; 0x10
    bed0:	91 89       	ldd	r25, Z+17	; 0x11
    bed2:	a2 89       	ldd	r26, Z+18	; 0x12
    bed4:	b3 89       	ldd	r27, Z+19	; 0x13
    bed6:	8c 0d       	add	r24, r12
    bed8:	9d 1d       	adc	r25, r13
    beda:	a1 1d       	adc	r26, r1
    bedc:	b1 1d       	adc	r27, r1
    bede:	80 8b       	std	Z+16, r24	; 0x10
    bee0:	91 8b       	std	Z+17, r25	; 0x11
    bee2:	a2 8b       	std	Z+18, r26	; 0x12
    bee4:	b3 8b       	std	Z+19, r27	; 0x13
    bee6:	42 85       	ldd	r20, Z+10	; 0x0a
    bee8:	53 85       	ldd	r21, Z+11	; 0x0b
    beea:	64 85       	ldd	r22, Z+12	; 0x0c
    beec:	75 85       	ldd	r23, Z+13	; 0x0d
    beee:	48 17       	cp	r20, r24
    bef0:	59 07       	cpc	r21, r25
    bef2:	6a 07       	cpc	r22, r26
    bef4:	7b 07       	cpc	r23, r27
    bef6:	10 f4       	brcc	.+4      	; 0xbefc <f_write+0x316>
    bef8:	ac 01       	movw	r20, r24
    befa:	bd 01       	movw	r22, r26
    befc:	f7 01       	movw	r30, r14
    befe:	42 87       	std	Z+10, r20	; 0x0a
    bf00:	53 87       	std	Z+11, r21	; 0x0b
    bf02:	64 87       	std	Z+12, r22	; 0x0c
    bf04:	75 87       	std	Z+13, r23	; 0x0d
    bf06:	a5 ce       	rjmp	.-694    	; 0xbc52 <f_write+0x6c>
    bf08:	87 e0       	ldi	r24, 0x07	; 7
    bf0a:	90 e0       	ldi	r25, 0x00	; 0
    bf0c:	28 96       	adiw	r28, 0x08	; 8
    bf0e:	e2 e1       	ldi	r30, 0x12	; 18
    bf10:	0c 94 e4 e3 	jmp	0x1c7c8	; 0x1c7c8 <__epilogue_restores__>

0000bf14 <f_sync>:
    bf14:	8f 92       	push	r8
    bf16:	9f 92       	push	r9
    bf18:	af 92       	push	r10
    bf1a:	bf 92       	push	r11
    bf1c:	ef 92       	push	r14
    bf1e:	ff 92       	push	r15
    bf20:	0f 93       	push	r16
    bf22:	1f 93       	push	r17
    bf24:	cf 93       	push	r28
    bf26:	df 93       	push	r29
    bf28:	00 d0       	rcall	.+0      	; 0xbf2a <f_sync+0x16>
    bf2a:	cd b7       	in	r28, 0x3d	; 61
    bf2c:	de b7       	in	r29, 0x3e	; 62
    bf2e:	7c 01       	movw	r14, r24
    bf30:	be 01       	movw	r22, r28
    bf32:	6f 5f       	subi	r22, 0xFF	; 255
    bf34:	7f 4f       	sbci	r23, 0xFF	; 255
    bf36:	0e 94 36 49 	call	0x926c	; 0x926c <validate>
    bf3a:	00 97       	sbiw	r24, 0x00	; 0
    bf3c:	09 f0       	breq	.+2      	; 0xbf40 <f_sync+0x2c>
    bf3e:	5d c0       	rjmp	.+186    	; 0xbffa <f_sync+0xe6>
    bf40:	f7 01       	movw	r30, r14
    bf42:	86 85       	ldd	r24, Z+14	; 0x0e
    bf44:	86 ff       	sbrs	r24, 6
    bf46:	55 c0       	rjmp	.+170    	; 0xbff2 <f_sync+0xde>
    bf48:	87 ff       	sbrs	r24, 7
    bf4a:	15 c0       	rjmp	.+42     	; 0xbf76 <f_sync+0x62>
    bf4c:	20 8d       	ldd	r18, Z+24	; 0x18
    bf4e:	31 8d       	ldd	r19, Z+25	; 0x19
    bf50:	42 8d       	ldd	r20, Z+26	; 0x1a
    bf52:	53 8d       	ldd	r21, Z+27	; 0x1b
    bf54:	e9 81       	ldd	r30, Y+1	; 0x01
    bf56:	fa 81       	ldd	r31, Y+2	; 0x02
    bf58:	01 e0       	ldi	r16, 0x01	; 1
    bf5a:	10 e0       	ldi	r17, 0x00	; 0
    bf5c:	b7 01       	movw	r22, r14
    bf5e:	6c 5d       	subi	r22, 0xDC	; 220
    bf60:	7f 4f       	sbci	r23, 0xFF	; 255
    bf62:	81 81       	ldd	r24, Z+1	; 0x01
    bf64:	0e 94 12 6b 	call	0xd624	; 0xd624 <disk_write>
    bf68:	89 2b       	or	r24, r25
    bf6a:	09 f0       	breq	.+2      	; 0xbf6e <f_sync+0x5a>
    bf6c:	44 c0       	rjmp	.+136    	; 0xbff6 <f_sync+0xe2>
    bf6e:	f7 01       	movw	r30, r14
    bf70:	86 85       	ldd	r24, Z+14	; 0x0e
    bf72:	8f 77       	andi	r24, 0x7F	; 127
    bf74:	86 87       	std	Z+14, r24	; 0x0e
    bf76:	0e 94 41 71 	call	0xe282	; 0xe282 <get_fattime>
    bf7a:	4b 01       	movw	r8, r22
    bf7c:	5c 01       	movw	r10, r24
    bf7e:	f7 01       	movw	r30, r14
    bf80:	44 8d       	ldd	r20, Z+28	; 0x1c
    bf82:	55 8d       	ldd	r21, Z+29	; 0x1d
    bf84:	66 8d       	ldd	r22, Z+30	; 0x1e
    bf86:	77 8d       	ldd	r23, Z+31	; 0x1f
    bf88:	89 81       	ldd	r24, Y+1	; 0x01
    bf8a:	9a 81       	ldd	r25, Y+2	; 0x02
    bf8c:	0e 94 b9 4c 	call	0x9972	; 0x9972 <move_window>
    bf90:	00 97       	sbiw	r24, 0x00	; 0
    bf92:	99 f5       	brne	.+102    	; 0xbffa <f_sync+0xe6>
    bf94:	f7 01       	movw	r30, r14
    bf96:	00 a1       	ldd	r16, Z+32	; 0x20
    bf98:	11 a1       	ldd	r17, Z+33	; 0x21
    bf9a:	f8 01       	movw	r30, r16
    bf9c:	83 85       	ldd	r24, Z+11	; 0x0b
    bf9e:	80 62       	ori	r24, 0x20	; 32
    bfa0:	83 87       	std	Z+11, r24	; 0x0b
    bfa2:	f7 01       	movw	r30, r14
    bfa4:	26 81       	ldd	r18, Z+6	; 0x06
    bfa6:	37 81       	ldd	r19, Z+7	; 0x07
    bfa8:	40 85       	ldd	r20, Z+8	; 0x08
    bfaa:	51 85       	ldd	r21, Z+9	; 0x09
    bfac:	b8 01       	movw	r22, r16
    bfae:	80 81       	ld	r24, Z
    bfb0:	91 81       	ldd	r25, Z+1	; 0x01
    bfb2:	0e 94 3f 4b 	call	0x967e	; 0x967e <st_clust.isra.5>
    bfb6:	f7 01       	movw	r30, r14
    bfb8:	42 85       	ldd	r20, Z+10	; 0x0a
    bfba:	53 85       	ldd	r21, Z+11	; 0x0b
    bfbc:	64 85       	ldd	r22, Z+12	; 0x0c
    bfbe:	75 85       	ldd	r23, Z+13	; 0x0d
    bfc0:	c8 01       	movw	r24, r16
    bfc2:	4c 96       	adiw	r24, 0x1c	; 28
    bfc4:	0e 94 f3 47 	call	0x8fe6	; 0x8fe6 <st_dword>
    bfc8:	b5 01       	movw	r22, r10
    bfca:	a4 01       	movw	r20, r8
    bfcc:	c8 01       	movw	r24, r16
    bfce:	46 96       	adiw	r24, 0x16	; 22
    bfd0:	0e 94 f3 47 	call	0x8fe6	; 0x8fe6 <st_dword>
    bfd4:	f8 01       	movw	r30, r16
    bfd6:	12 8a       	std	Z+18, r1	; 0x12
    bfd8:	13 8a       	std	Z+19, r1	; 0x13
    bfda:	89 81       	ldd	r24, Y+1	; 0x01
    bfdc:	9a 81       	ldd	r25, Y+2	; 0x02
    bfde:	21 e0       	ldi	r18, 0x01	; 1
    bfe0:	fc 01       	movw	r30, r24
    bfe2:	23 83       	std	Z+3, r18	; 0x03
    bfe4:	0e 94 9f 4b 	call	0x973e	; 0x973e <sync_fs>
    bfe8:	f7 01       	movw	r30, r14
    bfea:	26 85       	ldd	r18, Z+14	; 0x0e
    bfec:	2f 7b       	andi	r18, 0xBF	; 191
    bfee:	26 87       	std	Z+14, r18	; 0x0e
    bff0:	04 c0       	rjmp	.+8      	; 0xbffa <f_sync+0xe6>
    bff2:	80 e0       	ldi	r24, 0x00	; 0
    bff4:	01 c0       	rjmp	.+2      	; 0xbff8 <f_sync+0xe4>
    bff6:	81 e0       	ldi	r24, 0x01	; 1
    bff8:	90 e0       	ldi	r25, 0x00	; 0
    bffa:	0f 90       	pop	r0
    bffc:	0f 90       	pop	r0
    bffe:	df 91       	pop	r29
    c000:	cf 91       	pop	r28
    c002:	1f 91       	pop	r17
    c004:	0f 91       	pop	r16
    c006:	ff 90       	pop	r15
    c008:	ef 90       	pop	r14
    c00a:	bf 90       	pop	r11
    c00c:	af 90       	pop	r10
    c00e:	9f 90       	pop	r9
    c010:	8f 90       	pop	r8
    c012:	08 95       	ret

0000c014 <f_close>:
    c014:	a2 e0       	ldi	r26, 0x02	; 2
    c016:	b0 e0       	ldi	r27, 0x00	; 0
    c018:	e0 e1       	ldi	r30, 0x10	; 16
    c01a:	f0 e6       	ldi	r31, 0x60	; 96
    c01c:	0c 94 d6 e3 	jmp	0x1c7ac	; 0x1c7ac <__prologue_saves__+0x1c>
    c020:	8c 01       	movw	r16, r24
    c022:	78 df       	rcall	.-272    	; 0xbf14 <f_sync>
    c024:	00 97       	sbiw	r24, 0x00	; 0
    c026:	59 f4       	brne	.+22     	; 0xc03e <f_close+0x2a>
    c028:	be 01       	movw	r22, r28
    c02a:	6f 5f       	subi	r22, 0xFF	; 255
    c02c:	7f 4f       	sbci	r23, 0xFF	; 255
    c02e:	c8 01       	movw	r24, r16
    c030:	0e 94 36 49 	call	0x926c	; 0x926c <validate>
    c034:	00 97       	sbiw	r24, 0x00	; 0
    c036:	19 f4       	brne	.+6      	; 0xc03e <f_close+0x2a>
    c038:	f8 01       	movw	r30, r16
    c03a:	11 82       	std	Z+1, r1	; 0x01
    c03c:	10 82       	st	Z, r1
    c03e:	22 96       	adiw	r28, 0x02	; 2
    c040:	e4 e0       	ldi	r30, 0x04	; 4
    c042:	0c 94 f2 e3 	jmp	0x1c7e4	; 0x1c7e4 <__epilogue_restores__+0x1c>

0000c046 <f_chdir>:
    c046:	a2 e3       	ldi	r26, 0x32	; 50
    c048:	b0 e0       	ldi	r27, 0x00	; 0
    c04a:	e9 e2       	ldi	r30, 0x29	; 41
    c04c:	f0 e6       	ldi	r31, 0x60	; 96
    c04e:	0c 94 d2 e3 	jmp	0x1c7a4	; 0x1c7a4 <__prologue_saves__+0x14>
    c052:	9a ab       	std	Y+50, r25	; 0x32
    c054:	89 ab       	std	Y+49, r24	; 0x31
    c056:	40 e0       	ldi	r20, 0x00	; 0
    c058:	be 01       	movw	r22, r28
    c05a:	61 5d       	subi	r22, 0xD1	; 209
    c05c:	7f 4f       	sbci	r23, 0xFF	; 255
    c05e:	ce 01       	movw	r24, r28
    c060:	c1 96       	adiw	r24, 0x31	; 49
    c062:	0e 94 34 4d 	call	0x9a68	; 0x9a68 <mount_volume>
    c066:	00 97       	sbiw	r24, 0x00	; 0
    c068:	09 f0       	breq	.+2      	; 0xc06c <f_chdir+0x26>
    c06a:	44 c0       	rjmp	.+136    	; 0xc0f4 <f_chdir+0xae>
    c06c:	8f a5       	ldd	r24, Y+47	; 0x2f
    c06e:	98 a9       	ldd	r25, Y+48	; 0x30
    c070:	9a 83       	std	Y+2, r25	; 0x02
    c072:	89 83       	std	Y+1, r24	; 0x01
    c074:	80 e0       	ldi	r24, 0x00	; 0
    c076:	92 e0       	ldi	r25, 0x02	; 2
    c078:	0e 94 46 6a 	call	0xd48c	; 0xd48c <ff_memalloc>
    c07c:	7c 01       	movw	r14, r24
    c07e:	00 97       	sbiw	r24, 0x00	; 0
    c080:	a9 f1       	breq	.+106    	; 0xc0ec <f_chdir+0xa6>
    c082:	ef a5       	ldd	r30, Y+47	; 0x2f
    c084:	f8 a9       	ldd	r31, Y+48	; 0x30
    c086:	94 87       	std	Z+12, r25	; 0x0c
    c088:	83 87       	std	Z+11, r24	; 0x0b
    c08a:	69 a9       	ldd	r22, Y+49	; 0x31
    c08c:	7a a9       	ldd	r23, Y+50	; 0x32
    c08e:	ce 01       	movw	r24, r28
    c090:	01 96       	adiw	r24, 0x01	; 1
    c092:	39 d8       	rcall	.-3982   	; 0xb106 <follow_path>
    c094:	8c 01       	movw	r16, r24
    c096:	89 2b       	or	r24, r25
    c098:	09 f5       	brne	.+66     	; 0xc0dc <f_chdir+0x96>
    c09a:	88 a5       	ldd	r24, Y+40	; 0x28
    c09c:	87 ff       	sbrs	r24, 7
    c09e:	0b c0       	rjmp	.+22     	; 0xc0b6 <f_chdir+0x70>
    c0a0:	ef a5       	ldd	r30, Y+47	; 0x2f
    c0a2:	f8 a9       	ldd	r31, Y+48	; 0x30
    c0a4:	8f 81       	ldd	r24, Y+7	; 0x07
    c0a6:	98 85       	ldd	r25, Y+8	; 0x08
    c0a8:	a9 85       	ldd	r26, Y+9	; 0x09
    c0aa:	ba 85       	ldd	r27, Y+10	; 0x0a
    c0ac:	85 8b       	std	Z+21, r24	; 0x15
    c0ae:	96 8b       	std	Z+22, r25	; 0x16
    c0b0:	a7 8b       	std	Z+23, r26	; 0x17
    c0b2:	b0 8f       	std	Z+24, r27	; 0x18
    c0b4:	13 c0       	rjmp	.+38     	; 0xc0dc <f_chdir+0x96>
    c0b6:	8d 81       	ldd	r24, Y+5	; 0x05
    c0b8:	84 ff       	sbrs	r24, 4
    c0ba:	0e c0       	rjmp	.+28     	; 0xc0d8 <f_chdir+0x92>
    c0bc:	cf a4       	ldd	r12, Y+47	; 0x2f
    c0be:	d8 a8       	ldd	r13, Y+48	; 0x30
    c0c0:	6b 8d       	ldd	r22, Y+27	; 0x1b
    c0c2:	7c 8d       	ldd	r23, Y+28	; 0x1c
    c0c4:	f6 01       	movw	r30, r12
    c0c6:	80 81       	ld	r24, Z
    c0c8:	0e 94 2a 4b 	call	0x9654	; 0x9654 <ld_clust.isra.4>
    c0cc:	f6 01       	movw	r30, r12
    c0ce:	65 8b       	std	Z+21, r22	; 0x15
    c0d0:	76 8b       	std	Z+22, r23	; 0x16
    c0d2:	87 8b       	std	Z+23, r24	; 0x17
    c0d4:	90 8f       	std	Z+24, r25	; 0x18
    c0d6:	02 c0       	rjmp	.+4      	; 0xc0dc <f_chdir+0x96>
    c0d8:	05 e0       	ldi	r16, 0x05	; 5
    c0da:	10 e0       	ldi	r17, 0x00	; 0
    c0dc:	c7 01       	movw	r24, r14
    c0de:	0e 94 49 6a 	call	0xd492	; 0xd492 <ff_memfree>
    c0e2:	04 30       	cpi	r16, 0x04	; 4
    c0e4:	11 05       	cpc	r17, r1
    c0e6:	29 f4       	brne	.+10     	; 0xc0f2 <f_chdir+0xac>
    c0e8:	85 e0       	ldi	r24, 0x05	; 5
    c0ea:	01 c0       	rjmp	.+2      	; 0xc0ee <f_chdir+0xa8>
    c0ec:	81 e1       	ldi	r24, 0x11	; 17
    c0ee:	90 e0       	ldi	r25, 0x00	; 0
    c0f0:	01 c0       	rjmp	.+2      	; 0xc0f4 <f_chdir+0xae>
    c0f2:	c8 01       	movw	r24, r16
    c0f4:	e2 96       	adiw	r28, 0x32	; 50
    c0f6:	e8 e0       	ldi	r30, 0x08	; 8
    c0f8:	0c 94 ee e3 	jmp	0x1c7dc	; 0x1c7dc <__epilogue_restores__+0x14>

0000c0fc <f_getcwd>:
    c0fc:	a8 e4       	ldi	r26, 0x48	; 72
    c0fe:	b1 e0       	ldi	r27, 0x01	; 1
    c100:	e4 e8       	ldi	r30, 0x84	; 132
    c102:	f0 e6       	ldi	r31, 0x60	; 96
    c104:	0c 94 c8 e3 	jmp	0x1c790	; 0x1c790 <__prologue_saves__>
    c108:	c9 5b       	subi	r28, 0xB9	; 185
    c10a:	de 4f       	sbci	r29, 0xFE	; 254
    c10c:	99 83       	std	Y+1, r25	; 0x01
    c10e:	88 83       	st	Y, r24
    c110:	c7 54       	subi	r28, 0x47	; 71
    c112:	d1 40       	sbci	r29, 0x01	; 1
    c114:	4b 01       	movw	r8, r22
    c116:	7c 01       	movw	r14, r24
    c118:	fc 01       	movw	r30, r24
    c11a:	10 82       	st	Z, r1
    c11c:	40 e0       	ldi	r20, 0x00	; 0
    c11e:	be 01       	movw	r22, r28
    c120:	6b 5b       	subi	r22, 0xBB	; 187
    c122:	7e 4f       	sbci	r23, 0xFE	; 254
    c124:	ce 01       	movw	r24, r28
    c126:	89 5b       	subi	r24, 0xB9	; 185
    c128:	9e 4f       	sbci	r25, 0xFE	; 254
    c12a:	0e 94 34 4d 	call	0x9a68	; 0x9a68 <mount_volume>
    c12e:	1c 01       	movw	r2, r24
    c130:	89 2b       	or	r24, r25
    c132:	09 f0       	breq	.+2      	; 0xc136 <f_getcwd+0x3a>
    c134:	03 c1       	rjmp	.+518    	; 0xc33c <f_getcwd+0x240>
    c136:	cb 5b       	subi	r28, 0xBB	; 187
    c138:	de 4f       	sbci	r29, 0xFE	; 254
    c13a:	88 81       	ld	r24, Y
    c13c:	99 81       	ldd	r25, Y+1	; 0x01
    c13e:	c5 54       	subi	r28, 0x45	; 69
    c140:	d1 40       	sbci	r29, 0x01	; 1
    c142:	c9 5e       	subi	r28, 0xE9	; 233
    c144:	de 4f       	sbci	r29, 0xFE	; 254
    c146:	99 83       	std	Y+1, r25	; 0x01
    c148:	88 83       	st	Y, r24
    c14a:	c7 51       	subi	r28, 0x17	; 23
    c14c:	d1 40       	sbci	r29, 0x01	; 1
    c14e:	80 e0       	ldi	r24, 0x00	; 0
    c150:	92 e0       	ldi	r25, 0x02	; 2
    c152:	0e 94 46 6a 	call	0xd48c	; 0xd48c <ff_memalloc>
    c156:	5c 01       	movw	r10, r24
    c158:	00 97       	sbiw	r24, 0x00	; 0
    c15a:	09 f4       	brne	.+2      	; 0xc15e <f_getcwd+0x62>
    c15c:	f3 c0       	rjmp	.+486    	; 0xc344 <f_getcwd+0x248>
    c15e:	cb 5b       	subi	r28, 0xBB	; 187
    c160:	de 4f       	sbci	r29, 0xFE	; 254
    c162:	e8 81       	ld	r30, Y
    c164:	f9 81       	ldd	r31, Y+1	; 0x01
    c166:	c5 54       	subi	r28, 0x45	; 69
    c168:	d1 40       	sbci	r29, 0x01	; 1
    c16a:	94 87       	std	Z+12, r25	; 0x0c
    c16c:	83 87       	std	Z+11, r24	; 0x0b
    c16e:	85 89       	ldd	r24, Z+21	; 0x15
    c170:	96 89       	ldd	r25, Z+22	; 0x16
    c172:	a7 89       	ldd	r26, Z+23	; 0x17
    c174:	b0 8d       	ldd	r27, Z+24	; 0x18
    c176:	c3 5e       	subi	r28, 0xE3	; 227
    c178:	de 4f       	sbci	r29, 0xFE	; 254
    c17a:	88 83       	st	Y, r24
    c17c:	99 83       	std	Y+1, r25	; 0x01
    c17e:	aa 83       	std	Y+2, r26	; 0x02
    c180:	bb 83       	std	Y+3, r27	; 0x03
    c182:	cd 51       	subi	r28, 0x1D	; 29
    c184:	d1 40       	sbci	r29, 0x01	; 1
    c186:	84 01       	movw	r16, r8
    c188:	ce 01       	movw	r24, r28
    c18a:	01 96       	adiw	r24, 0x01	; 1
    c18c:	6c 01       	movw	r12, r24
    c18e:	c3 5e       	subi	r28, 0xE3	; 227
    c190:	de 4f       	sbci	r29, 0xFE	; 254
    c192:	48 80       	ld	r4, Y
    c194:	59 80       	ldd	r5, Y+1	; 0x01
    c196:	6a 80       	ldd	r6, Y+2	; 0x02
    c198:	7b 80       	ldd	r7, Y+3	; 0x03
    c19a:	cd 51       	subi	r28, 0x1D	; 29
    c19c:	d1 40       	sbci	r29, 0x01	; 1
    c19e:	41 14       	cp	r4, r1
    c1a0:	51 04       	cpc	r5, r1
    c1a2:	61 04       	cpc	r6, r1
    c1a4:	71 04       	cpc	r7, r1
    c1a6:	09 f4       	brne	.+2      	; 0xc1aa <f_getcwd+0xae>
    c1a8:	a3 c0       	rjmp	.+326    	; 0xc2f0 <f_getcwd+0x1f4>
    c1aa:	40 e2       	ldi	r20, 0x20	; 32
    c1ac:	50 e0       	ldi	r21, 0x00	; 0
    c1ae:	60 e0       	ldi	r22, 0x00	; 0
    c1b0:	70 e0       	ldi	r23, 0x00	; 0
    c1b2:	ce 01       	movw	r24, r28
    c1b4:	89 5e       	subi	r24, 0xE9	; 233
    c1b6:	9e 4f       	sbci	r25, 0xFE	; 254
    c1b8:	0e 94 3d 51 	call	0xa27a	; 0xa27a <dir_sdi>
    c1bc:	00 97       	sbiw	r24, 0x00	; 0
    c1be:	09 f0       	breq	.+2      	; 0xc1c2 <f_getcwd+0xc6>
    c1c0:	c6 c0       	rjmp	.+396    	; 0xc34e <f_getcwd+0x252>
    c1c2:	c3 5d       	subi	r28, 0xD3	; 211
    c1c4:	de 4f       	sbci	r29, 0xFE	; 254
    c1c6:	48 81       	ld	r20, Y
    c1c8:	59 81       	ldd	r21, Y+1	; 0x01
    c1ca:	6a 81       	ldd	r22, Y+2	; 0x02
    c1cc:	7b 81       	ldd	r23, Y+3	; 0x03
    c1ce:	cd 52       	subi	r28, 0x2D	; 45
    c1d0:	d1 40       	sbci	r29, 0x01	; 1
    c1d2:	cb 5b       	subi	r28, 0xBB	; 187
    c1d4:	de 4f       	sbci	r29, 0xFE	; 254
    c1d6:	88 81       	ld	r24, Y
    c1d8:	99 81       	ldd	r25, Y+1	; 0x01
    c1da:	c5 54       	subi	r28, 0x45	; 69
    c1dc:	d1 40       	sbci	r29, 0x01	; 1
    c1de:	0e 94 b9 4c 	call	0x9972	; 0x9972 <move_window>
    c1e2:	00 97       	sbiw	r24, 0x00	; 0
    c1e4:	09 f0       	breq	.+2      	; 0xc1e8 <f_getcwd+0xec>
    c1e6:	b3 c0       	rjmp	.+358    	; 0xc34e <f_getcwd+0x252>
    c1e8:	cf 5c       	subi	r28, 0xCF	; 207
    c1ea:	de 4f       	sbci	r29, 0xFE	; 254
    c1ec:	68 81       	ld	r22, Y
    c1ee:	79 81       	ldd	r23, Y+1	; 0x01
    c1f0:	c1 53       	subi	r28, 0x31	; 49
    c1f2:	d1 40       	sbci	r29, 0x01	; 1
    c1f4:	cb 5b       	subi	r28, 0xBB	; 187
    c1f6:	de 4f       	sbci	r29, 0xFE	; 254
    c1f8:	e8 81       	ld	r30, Y
    c1fa:	f9 81       	ldd	r31, Y+1	; 0x01
    c1fc:	c5 54       	subi	r28, 0x45	; 69
    c1fe:	d1 40       	sbci	r29, 0x01	; 1
    c200:	80 81       	ld	r24, Z
    c202:	0e 94 2a 4b 	call	0x9654	; 0x9654 <ld_clust.isra.4>
    c206:	c3 5e       	subi	r28, 0xE3	; 227
    c208:	de 4f       	sbci	r29, 0xFE	; 254
    c20a:	68 83       	st	Y, r22
    c20c:	79 83       	std	Y+1, r23	; 0x01
    c20e:	8a 83       	std	Y+2, r24	; 0x02
    c210:	9b 83       	std	Y+3, r25	; 0x03
    c212:	cd 51       	subi	r28, 0x1D	; 29
    c214:	d1 40       	sbci	r29, 0x01	; 1
    c216:	40 e0       	ldi	r20, 0x00	; 0
    c218:	50 e0       	ldi	r21, 0x00	; 0
    c21a:	ba 01       	movw	r22, r20
    c21c:	ce 01       	movw	r24, r28
    c21e:	89 5e       	subi	r24, 0xE9	; 233
    c220:	9e 4f       	sbci	r25, 0xFE	; 254
    c222:	0e 94 3d 51 	call	0xa27a	; 0xa27a <dir_sdi>
    c226:	00 97       	sbiw	r24, 0x00	; 0
    c228:	09 f0       	breq	.+2      	; 0xc22c <f_getcwd+0x130>
    c22a:	91 c0       	rjmp	.+290    	; 0xc34e <f_getcwd+0x252>
    c22c:	60 e0       	ldi	r22, 0x00	; 0
    c22e:	70 e0       	ldi	r23, 0x00	; 0
    c230:	ce 01       	movw	r24, r28
    c232:	89 5e       	subi	r24, 0xE9	; 233
    c234:	9e 4f       	sbci	r25, 0xFE	; 254
    c236:	0e 94 d6 54 	call	0xa9ac	; 0xa9ac <dir_read>
    c23a:	00 97       	sbiw	r24, 0x00	; 0
    c23c:	09 f0       	breq	.+2      	; 0xc240 <f_getcwd+0x144>
    c23e:	89 c0       	rjmp	.+274    	; 0xc352 <f_getcwd+0x256>
    c240:	cf 5c       	subi	r28, 0xCF	; 207
    c242:	de 4f       	sbci	r29, 0xFE	; 254
    c244:	68 81       	ld	r22, Y
    c246:	79 81       	ldd	r23, Y+1	; 0x01
    c248:	c1 53       	subi	r28, 0x31	; 49
    c24a:	d1 40       	sbci	r29, 0x01	; 1
    c24c:	cb 5b       	subi	r28, 0xBB	; 187
    c24e:	de 4f       	sbci	r29, 0xFE	; 254
    c250:	e8 81       	ld	r30, Y
    c252:	f9 81       	ldd	r31, Y+1	; 0x01
    c254:	c5 54       	subi	r28, 0x45	; 69
    c256:	d1 40       	sbci	r29, 0x01	; 1
    c258:	80 81       	ld	r24, Z
    c25a:	0e 94 2a 4b 	call	0x9654	; 0x9654 <ld_clust.isra.4>
    c25e:	46 16       	cp	r4, r22
    c260:	57 06       	cpc	r5, r23
    c262:	68 06       	cpc	r6, r24
    c264:	79 06       	cpc	r7, r25
    c266:	41 f4       	brne	.+16     	; 0xc278 <f_getcwd+0x17c>
    c268:	b6 01       	movw	r22, r12
    c26a:	ce 01       	movw	r24, r28
    c26c:	89 5e       	subi	r24, 0xE9	; 233
    c26e:	9e 4f       	sbci	r25, 0xFE	; 254
    c270:	0e 94 1a 4a 	call	0x9434	; 0x9434 <get_fileinfo>
    c274:	f6 01       	movw	r30, r12
    c276:	0a c0       	rjmp	.+20     	; 0xc28c <f_getcwd+0x190>
    c278:	60 e0       	ldi	r22, 0x00	; 0
    c27a:	70 e0       	ldi	r23, 0x00	; 0
    c27c:	ce 01       	movw	r24, r28
    c27e:	89 5e       	subi	r24, 0xE9	; 233
    c280:	9e 4f       	sbci	r25, 0xFE	; 254
    c282:	0e 94 b5 53 	call	0xa76a	; 0xa76a <dir_next>
    c286:	00 97       	sbiw	r24, 0x00	; 0
    c288:	89 f2       	breq	.-94     	; 0xc22c <f_getcwd+0x130>
    c28a:	63 c0       	rjmp	.+198    	; 0xc352 <f_getcwd+0x256>
    c28c:	cf 01       	movw	r24, r30
    c28e:	8c 19       	sub	r24, r12
    c290:	9d 09       	sbc	r25, r13
    c292:	31 96       	adiw	r30, 0x01	; 1
    c294:	25 89       	ldd	r18, Z+21	; 0x15
    c296:	21 11       	cpse	r18, r1
    c298:	f9 cf       	rjmp	.-14     	; 0xc28c <f_getcwd+0x190>
    c29a:	9c 01       	movw	r18, r24
    c29c:	2f 5f       	subi	r18, 0xFF	; 255
    c29e:	3f 4f       	sbci	r19, 0xFF	; 255
    c2a0:	02 17       	cp	r16, r18
    c2a2:	13 07       	cpc	r17, r19
    c2a4:	08 f4       	brcc	.+2      	; 0xc2a8 <f_getcwd+0x1ac>
    c2a6:	51 c0       	rjmp	.+162    	; 0xc34a <f_getcwd+0x24e>
    c2a8:	f6 01       	movw	r30, r12
    c2aa:	e8 0f       	add	r30, r24
    c2ac:	f9 1f       	adc	r31, r25
    c2ae:	98 01       	movw	r18, r16
    c2b0:	ce 16       	cp	r12, r30
    c2b2:	df 06       	cpc	r13, r31
    c2b4:	71 f0       	breq	.+28     	; 0xc2d2 <f_getcwd+0x1d6>
    c2b6:	21 50       	subi	r18, 0x01	; 1
    c2b8:	31 09       	sbc	r19, r1
    c2ba:	45 89       	ldd	r20, Z+21	; 0x15
    c2bc:	c9 5b       	subi	r28, 0xB9	; 185
    c2be:	de 4f       	sbci	r29, 0xFE	; 254
    c2c0:	a8 81       	ld	r26, Y
    c2c2:	b9 81       	ldd	r27, Y+1	; 0x01
    c2c4:	c7 54       	subi	r28, 0x47	; 71
    c2c6:	d1 40       	sbci	r29, 0x01	; 1
    c2c8:	a2 0f       	add	r26, r18
    c2ca:	b3 1f       	adc	r27, r19
    c2cc:	4c 93       	st	X, r20
    c2ce:	31 97       	sbiw	r30, 0x01	; 1
    c2d0:	ef cf       	rjmp	.-34     	; 0xc2b0 <f_getcwd+0x1b4>
    c2d2:	80 95       	com	r24
    c2d4:	90 95       	com	r25
    c2d6:	08 0f       	add	r16, r24
    c2d8:	19 1f       	adc	r17, r25
    c2da:	c9 5b       	subi	r28, 0xB9	; 185
    c2dc:	de 4f       	sbci	r29, 0xFE	; 254
    c2de:	e8 81       	ld	r30, Y
    c2e0:	f9 81       	ldd	r31, Y+1	; 0x01
    c2e2:	c7 54       	subi	r28, 0x47	; 71
    c2e4:	d1 40       	sbci	r29, 0x01	; 1
    c2e6:	e0 0f       	add	r30, r16
    c2e8:	f1 1f       	adc	r31, r17
    c2ea:	9f e2       	ldi	r25, 0x2F	; 47
    c2ec:	90 83       	st	Z, r25
    c2ee:	4f cf       	rjmp	.-354    	; 0xc18e <f_getcwd+0x92>
    c2f0:	08 15       	cp	r16, r8
    c2f2:	19 05       	cpc	r17, r9
    c2f4:	61 f4       	brne	.+24     	; 0xc30e <f_getcwd+0x212>
    c2f6:	01 50       	subi	r16, 0x01	; 1
    c2f8:	11 09       	sbc	r17, r1
    c2fa:	c9 5b       	subi	r28, 0xB9	; 185
    c2fc:	de 4f       	sbci	r29, 0xFE	; 254
    c2fe:	e8 81       	ld	r30, Y
    c300:	f9 81       	ldd	r31, Y+1	; 0x01
    c302:	c7 54       	subi	r28, 0x47	; 71
    c304:	d1 40       	sbci	r29, 0x01	; 1
    c306:	e0 0f       	add	r30, r16
    c308:	f1 1f       	adc	r31, r17
    c30a:	8f e2       	ldi	r24, 0x2F	; 47
    c30c:	80 83       	st	Z, r24
    c30e:	ef ef       	ldi	r30, 0xFF	; 255
    c310:	ee 1a       	sub	r14, r30
    c312:	fe 0a       	sbc	r15, r30
    c314:	c9 5b       	subi	r28, 0xB9	; 185
    c316:	de 4f       	sbci	r29, 0xFE	; 254
    c318:	e8 81       	ld	r30, Y
    c31a:	f9 81       	ldd	r31, Y+1	; 0x01
    c31c:	c7 54       	subi	r28, 0x47	; 71
    c31e:	d1 40       	sbci	r29, 0x01	; 1
    c320:	e0 0f       	add	r30, r16
    c322:	f1 1f       	adc	r31, r17
    c324:	80 81       	ld	r24, Z
    c326:	f7 01       	movw	r30, r14
    c328:	31 97       	sbiw	r30, 0x01	; 1
    c32a:	80 83       	st	Z, r24
    c32c:	0f 5f       	subi	r16, 0xFF	; 255
    c32e:	1f 4f       	sbci	r17, 0xFF	; 255
    c330:	08 15       	cp	r16, r8
    c332:	19 05       	cpc	r17, r9
    c334:	60 f3       	brcs	.-40     	; 0xc30e <f_getcwd+0x212>
    c336:	c5 01       	movw	r24, r10
    c338:	0e 94 49 6a 	call	0xd492	; 0xd492 <ff_memfree>
    c33c:	f7 01       	movw	r30, r14
    c33e:	10 82       	st	Z, r1
    c340:	c1 01       	movw	r24, r2
    c342:	0d c0       	rjmp	.+26     	; 0xc35e <f_getcwd+0x262>
    c344:	81 e1       	ldi	r24, 0x11	; 17
    c346:	90 e0       	ldi	r25, 0x00	; 0
    c348:	0a c0       	rjmp	.+20     	; 0xc35e <f_getcwd+0x262>
    c34a:	81 e1       	ldi	r24, 0x11	; 17
    c34c:	90 e0       	ldi	r25, 0x00	; 0
    c34e:	1c 01       	movw	r2, r24
    c350:	f2 cf       	rjmp	.-28     	; 0xc336 <f_getcwd+0x23a>
    c352:	84 30       	cpi	r24, 0x04	; 4
    c354:	91 05       	cpc	r25, r1
    c356:	d9 f7       	brne	.-10     	; 0xc34e <f_getcwd+0x252>
    c358:	82 e0       	ldi	r24, 0x02	; 2
    c35a:	90 e0       	ldi	r25, 0x00	; 0
    c35c:	f8 cf       	rjmp	.-16     	; 0xc34e <f_getcwd+0x252>
    c35e:	c8 5b       	subi	r28, 0xB8	; 184
    c360:	de 4f       	sbci	r29, 0xFE	; 254
    c362:	e2 e1       	ldi	r30, 0x12	; 18
    c364:	0c 94 e4 e3 	jmp	0x1c7c8	; 0x1c7c8 <__epilogue_restores__>

0000c368 <f_lseek>:
    c368:	aa e0       	ldi	r26, 0x0A	; 10
    c36a:	b0 e0       	ldi	r27, 0x00	; 0
    c36c:	ea eb       	ldi	r30, 0xBA	; 186
    c36e:	f1 e6       	ldi	r31, 0x61	; 97
    c370:	0c 94 c8 e3 	jmp	0x1c790	; 0x1c790 <__prologue_saves__>
    c374:	1c 01       	movw	r2, r24
    c376:	6a 01       	movw	r12, r20
    c378:	7b 01       	movw	r14, r22
    c37a:	be 01       	movw	r22, r28
    c37c:	6f 5f       	subi	r22, 0xFF	; 255
    c37e:	7f 4f       	sbci	r23, 0xFF	; 255
    c380:	0e 94 36 49 	call	0x926c	; 0x926c <validate>
    c384:	00 97       	sbiw	r24, 0x00	; 0
    c386:	09 f0       	breq	.+2      	; 0xc38a <f_lseek+0x22>
    c388:	a7 c2       	rjmp	.+1358   	; 0xc8d8 <f_lseek+0x570>
    c38a:	f1 01       	movw	r30, r2
    c38c:	87 85       	ldd	r24, Z+15	; 0x0f
    c38e:	90 e0       	ldi	r25, 0x00	; 0
    c390:	00 97       	sbiw	r24, 0x00	; 0
    c392:	09 f0       	breq	.+2      	; 0xc396 <f_lseek+0x2e>
    c394:	a1 c2       	rjmp	.+1346   	; 0xc8d8 <f_lseek+0x570>
    c396:	22 a1       	ldd	r18, Z+34	; 0x22
    c398:	33 a1       	ldd	r19, Z+35	; 0x23
    c39a:	21 15       	cp	r18, r1
    c39c:	31 05       	cpc	r19, r1
    c39e:	09 f4       	brne	.+2      	; 0xc3a2 <f_lseek+0x3a>
    c3a0:	2e c1       	rjmp	.+604    	; 0xc5fe <f_lseek+0x296>
    c3a2:	ff ef       	ldi	r31, 0xFF	; 255
    c3a4:	cf 16       	cp	r12, r31
    c3a6:	df 06       	cpc	r13, r31
    c3a8:	ef 06       	cpc	r14, r31
    c3aa:	ff 06       	cpc	r15, r31
    c3ac:	09 f0       	breq	.+2      	; 0xc3b0 <f_lseek+0x48>
    c3ae:	9a c0       	rjmp	.+308    	; 0xc4e4 <f_lseek+0x17c>
    c3b0:	89 01       	movw	r16, r18
    c3b2:	0c 5f       	subi	r16, 0xFC	; 252
    c3b4:	1f 4f       	sbci	r17, 0xFF	; 255
    c3b6:	d9 01       	movw	r26, r18
    c3b8:	4d 91       	ld	r20, X+
    c3ba:	5d 91       	ld	r21, X+
    c3bc:	6d 91       	ld	r22, X+
    c3be:	7c 91       	ld	r23, X
    c3c0:	4f 83       	std	Y+7, r20	; 0x07
    c3c2:	58 87       	std	Y+8, r21	; 0x08
    c3c4:	69 87       	std	Y+9, r22	; 0x09
    c3c6:	7a 87       	std	Y+10, r23	; 0x0a
    c3c8:	f1 01       	movw	r30, r2
    c3ca:	86 80       	ldd	r8, Z+6	; 0x06
    c3cc:	97 80       	ldd	r9, Z+7	; 0x07
    c3ce:	a0 84       	ldd	r10, Z+8	; 0x08
    c3d0:	b1 84       	ldd	r11, Z+9	; 0x09
    c3d2:	52 e0       	ldi	r21, 0x02	; 2
    c3d4:	c5 2e       	mov	r12, r21
    c3d6:	d1 2c       	mov	r13, r1
    c3d8:	e1 2c       	mov	r14, r1
    c3da:	f1 2c       	mov	r15, r1
    c3dc:	81 14       	cp	r8, r1
    c3de:	91 04       	cpc	r9, r1
    c3e0:	a1 04       	cpc	r10, r1
    c3e2:	b1 04       	cpc	r11, r1
    c3e4:	09 f4       	brne	.+2      	; 0xc3e8 <f_lseek+0x80>
    c3e6:	65 c0       	rjmp	.+202    	; 0xc4b2 <f_lseek+0x14a>
    c3e8:	24 01       	movw	r4, r8
    c3ea:	35 01       	movw	r6, r10
    c3ec:	1b 82       	std	Y+3, r1	; 0x03
    c3ee:	1c 82       	std	Y+4, r1	; 0x04
    c3f0:	1d 82       	std	Y+5, r1	; 0x05
    c3f2:	1e 82       	std	Y+6, r1	; 0x06
    c3f4:	2b 81       	ldd	r18, Y+3	; 0x03
    c3f6:	3c 81       	ldd	r19, Y+4	; 0x04
    c3f8:	4d 81       	ldd	r20, Y+5	; 0x05
    c3fa:	5e 81       	ldd	r21, Y+6	; 0x06
    c3fc:	2f 5f       	subi	r18, 0xFF	; 255
    c3fe:	3f 4f       	sbci	r19, 0xFF	; 255
    c400:	4f 4f       	sbci	r20, 0xFF	; 255
    c402:	5f 4f       	sbci	r21, 0xFF	; 255
    c404:	2b 83       	std	Y+3, r18	; 0x03
    c406:	3c 83       	std	Y+4, r19	; 0x04
    c408:	4d 83       	std	Y+5, r20	; 0x05
    c40a:	5e 83       	std	Y+6, r21	; 0x06
    c40c:	b3 01       	movw	r22, r6
    c40e:	a2 01       	movw	r20, r4
    c410:	d1 01       	movw	r26, r2
    c412:	8d 91       	ld	r24, X+
    c414:	9c 91       	ld	r25, X
    c416:	0e 94 89 50 	call	0xa112	; 0xa112 <get_fat.isra.10>
    c41a:	62 30       	cpi	r22, 0x02	; 2
    c41c:	71 05       	cpc	r23, r1
    c41e:	81 05       	cpc	r24, r1
    c420:	91 05       	cpc	r25, r1
    c422:	10 f4       	brcc	.+4      	; 0xc428 <f_lseek+0xc0>
    c424:	82 e0       	ldi	r24, 0x02	; 2
    c426:	07 c0       	rjmp	.+14     	; 0xc436 <f_lseek+0xce>
    c428:	6f 3f       	cpi	r22, 0xFF	; 255
    c42a:	ff ef       	ldi	r31, 0xFF	; 255
    c42c:	7f 07       	cpc	r23, r31
    c42e:	8f 07       	cpc	r24, r31
    c430:	9f 07       	cpc	r25, r31
    c432:	29 f4       	brne	.+10     	; 0xc43e <f_lseek+0xd6>
    c434:	81 e0       	ldi	r24, 0x01	; 1
    c436:	f1 01       	movw	r30, r2
    c438:	87 87       	std	Z+15, r24	; 0x0f
    c43a:	90 e0       	ldi	r25, 0x00	; 0
    c43c:	4d c2       	rjmp	.+1178   	; 0xc8d8 <f_lseek+0x570>
    c43e:	a3 01       	movw	r20, r6
    c440:	92 01       	movw	r18, r4
    c442:	2f 5f       	subi	r18, 0xFF	; 255
    c444:	3f 4f       	sbci	r19, 0xFF	; 255
    c446:	4f 4f       	sbci	r20, 0xFF	; 255
    c448:	5f 4f       	sbci	r21, 0xFF	; 255
    c44a:	2b 01       	movw	r4, r22
    c44c:	3c 01       	movw	r6, r24
    c44e:	62 17       	cp	r22, r18
    c450:	73 07       	cpc	r23, r19
    c452:	84 07       	cpc	r24, r20
    c454:	95 07       	cpc	r25, r21
    c456:	71 f2       	breq	.-100    	; 0xc3f4 <f_lseek+0x8c>
    c458:	f2 e0       	ldi	r31, 0x02	; 2
    c45a:	cf 0e       	add	r12, r31
    c45c:	d1 1c       	adc	r13, r1
    c45e:	e1 1c       	adc	r14, r1
    c460:	f1 1c       	adc	r15, r1
    c462:	2f 81       	ldd	r18, Y+7	; 0x07
    c464:	38 85       	ldd	r19, Y+8	; 0x08
    c466:	49 85       	ldd	r20, Y+9	; 0x09
    c468:	5a 85       	ldd	r21, Y+10	; 0x0a
    c46a:	2c 15       	cp	r18, r12
    c46c:	3d 05       	cpc	r19, r13
    c46e:	4e 05       	cpc	r20, r14
    c470:	5f 05       	cpc	r21, r15
    c472:	88 f0       	brcs	.+34     	; 0xc496 <f_lseek+0x12e>
    c474:	2b 81       	ldd	r18, Y+3	; 0x03
    c476:	3c 81       	ldd	r19, Y+4	; 0x04
    c478:	4d 81       	ldd	r20, Y+5	; 0x05
    c47a:	5e 81       	ldd	r21, Y+6	; 0x06
    c47c:	d8 01       	movw	r26, r16
    c47e:	2d 93       	st	X+, r18
    c480:	3d 93       	st	X+, r19
    c482:	4d 93       	st	X+, r20
    c484:	5c 93       	st	X, r21
    c486:	13 97       	sbiw	r26, 0x03	; 3
    c488:	f8 01       	movw	r30, r16
    c48a:	84 82       	std	Z+4, r8	; 0x04
    c48c:	95 82       	std	Z+5, r9	; 0x05
    c48e:	a6 82       	std	Z+6, r10	; 0x06
    c490:	b7 82       	std	Z+7, r11	; 0x07
    c492:	08 5f       	subi	r16, 0xF8	; 248
    c494:	1f 4f       	sbci	r17, 0xFF	; 255
    c496:	e9 81       	ldd	r30, Y+1	; 0x01
    c498:	fa 81       	ldd	r31, Y+2	; 0x02
    c49a:	81 8c       	ldd	r8, Z+25	; 0x19
    c49c:	92 8c       	ldd	r9, Z+26	; 0x1a
    c49e:	a3 8c       	ldd	r10, Z+27	; 0x1b
    c4a0:	b4 8c       	ldd	r11, Z+28	; 0x1c
    c4a2:	68 15       	cp	r22, r8
    c4a4:	79 05       	cpc	r23, r9
    c4a6:	8a 05       	cpc	r24, r10
    c4a8:	9b 05       	cpc	r25, r11
    c4aa:	18 f4       	brcc	.+6      	; 0xc4b2 <f_lseek+0x14a>
    c4ac:	4b 01       	movw	r8, r22
    c4ae:	5c 01       	movw	r10, r24
    c4b0:	9b cf       	rjmp	.-202    	; 0xc3e8 <f_lseek+0x80>
    c4b2:	f1 01       	movw	r30, r2
    c4b4:	a2 a1       	ldd	r26, Z+34	; 0x22
    c4b6:	b3 a1       	ldd	r27, Z+35	; 0x23
    c4b8:	cd 92       	st	X+, r12
    c4ba:	dd 92       	st	X+, r13
    c4bc:	ed 92       	st	X+, r14
    c4be:	fc 92       	st	X, r15
    c4c0:	13 97       	sbiw	r26, 0x03	; 3
    c4c2:	2f 81       	ldd	r18, Y+7	; 0x07
    c4c4:	38 85       	ldd	r19, Y+8	; 0x08
    c4c6:	49 85       	ldd	r20, Y+9	; 0x09
    c4c8:	5a 85       	ldd	r21, Y+10	; 0x0a
    c4ca:	2c 15       	cp	r18, r12
    c4cc:	3d 05       	cpc	r19, r13
    c4ce:	4e 05       	cpc	r20, r14
    c4d0:	5f 05       	cpc	r21, r15
    c4d2:	08 f4       	brcc	.+2      	; 0xc4d6 <f_lseek+0x16e>
    c4d4:	f8 c1       	rjmp	.+1008   	; 0xc8c6 <f_lseek+0x55e>
    c4d6:	d8 01       	movw	r26, r16
    c4d8:	1d 92       	st	X+, r1
    c4da:	1d 92       	st	X+, r1
    c4dc:	1d 92       	st	X+, r1
    c4de:	1c 92       	st	X, r1
    c4e0:	13 97       	sbiw	r26, 0x03	; 3
    c4e2:	ef c1       	rjmp	.+990    	; 0xc8c2 <f_lseek+0x55a>
    c4e4:	f1 01       	movw	r30, r2
    c4e6:	82 85       	ldd	r24, Z+10	; 0x0a
    c4e8:	93 85       	ldd	r25, Z+11	; 0x0b
    c4ea:	a4 85       	ldd	r26, Z+12	; 0x0c
    c4ec:	b5 85       	ldd	r27, Z+13	; 0x0d
    c4ee:	46 01       	movw	r8, r12
    c4f0:	57 01       	movw	r10, r14
    c4f2:	8c 15       	cp	r24, r12
    c4f4:	9d 05       	cpc	r25, r13
    c4f6:	ae 05       	cpc	r26, r14
    c4f8:	bf 05       	cpc	r27, r15
    c4fa:	10 f4       	brcc	.+4      	; 0xc500 <f_lseek+0x198>
    c4fc:	4c 01       	movw	r8, r24
    c4fe:	5d 01       	movw	r10, r26
    c500:	f1 01       	movw	r30, r2
    c502:	80 8a       	std	Z+16, r8	; 0x10
    c504:	91 8a       	std	Z+17, r9	; 0x11
    c506:	a2 8a       	std	Z+18, r10	; 0x12
    c508:	b3 8a       	std	Z+19, r11	; 0x13
    c50a:	81 14       	cp	r8, r1
    c50c:	91 04       	cpc	r9, r1
    c50e:	a1 04       	cpc	r10, r1
    c510:	b1 04       	cpc	r11, r1
    c512:	09 f4       	brne	.+2      	; 0xc516 <f_lseek+0x1ae>
    c514:	d6 c1       	rjmp	.+940    	; 0xc8c2 <f_lseek+0x55a>
    c516:	24 01       	movw	r4, r8
    c518:	35 01       	movw	r6, r10
    c51a:	f1 e0       	ldi	r31, 0x01	; 1
    c51c:	4f 1a       	sub	r4, r31
    c51e:	51 08       	sbc	r5, r1
    c520:	61 08       	sbc	r6, r1
    c522:	71 08       	sbc	r7, r1
    c524:	b3 01       	movw	r22, r6
    c526:	a2 01       	movw	r20, r4
    c528:	c1 01       	movw	r24, r2
    c52a:	0e 94 bf 48 	call	0x917e	; 0x917e <clmt_clust>
    c52e:	ab 01       	movw	r20, r22
    c530:	bc 01       	movw	r22, r24
    c532:	f1 01       	movw	r30, r2
    c534:	44 8b       	std	Z+20, r20	; 0x14
    c536:	55 8b       	std	Z+21, r21	; 0x15
    c538:	66 8b       	std	Z+22, r22	; 0x16
    c53a:	77 8b       	std	Z+23, r23	; 0x17
    c53c:	e9 80       	ldd	r14, Y+1	; 0x01
    c53e:	fa 80       	ldd	r15, Y+2	; 0x02
    c540:	c7 01       	movw	r24, r14
    c542:	0e 94 97 48 	call	0x912e	; 0x912e <clst2sect>
    c546:	61 15       	cp	r22, r1
    c548:	71 05       	cpc	r23, r1
    c54a:	81 05       	cpc	r24, r1
    c54c:	91 05       	cpc	r25, r1
    c54e:	09 f4       	brne	.+2      	; 0xc552 <f_lseek+0x1ea>
    c550:	69 cf       	rjmp	.-302    	; 0xc424 <f_lseek+0xbc>
    c552:	95 01       	movw	r18, r10
    c554:	84 01       	movw	r16, r8
    c556:	11 70       	andi	r17, 0x01	; 1
    c558:	22 27       	eor	r18, r18
    c55a:	33 27       	eor	r19, r19
    c55c:	01 15       	cp	r16, r1
    c55e:	11 05       	cpc	r17, r1
    c560:	21 05       	cpc	r18, r1
    c562:	31 05       	cpc	r19, r1
    c564:	09 f4       	brne	.+2      	; 0xc568 <f_lseek+0x200>
    c566:	ad c1       	rjmp	.+858    	; 0xc8c2 <f_lseek+0x55a>
    c568:	f7 01       	movw	r30, r14
    c56a:	81 84       	ldd	r8, Z+9	; 0x09
    c56c:	92 84       	ldd	r9, Z+10	; 0x0a
    c56e:	f1 e0       	ldi	r31, 0x01	; 1
    c570:	8f 1a       	sub	r8, r31
    c572:	91 08       	sbc	r9, r1
    c574:	a1 2c       	mov	r10, r1
    c576:	b1 2c       	mov	r11, r1
    c578:	49 e0       	ldi	r20, 0x09	; 9
    c57a:	76 94       	lsr	r7
    c57c:	67 94       	ror	r6
    c57e:	57 94       	ror	r5
    c580:	47 94       	ror	r4
    c582:	4a 95       	dec	r20
    c584:	d1 f7       	brne	.-12     	; 0xc57a <f_lseek+0x212>
    c586:	48 20       	and	r4, r8
    c588:	59 20       	and	r5, r9
    c58a:	6a 20       	and	r6, r10
    c58c:	7b 20       	and	r7, r11
    c58e:	53 01       	movw	r10, r6
    c590:	42 01       	movw	r8, r4
    c592:	86 0e       	add	r8, r22
    c594:	97 1e       	adc	r9, r23
    c596:	a8 1e       	adc	r10, r24
    c598:	b9 1e       	adc	r11, r25
    c59a:	f1 01       	movw	r30, r2
    c59c:	20 8d       	ldd	r18, Z+24	; 0x18
    c59e:	31 8d       	ldd	r19, Z+25	; 0x19
    c5a0:	42 8d       	ldd	r20, Z+26	; 0x1a
    c5a2:	53 8d       	ldd	r21, Z+27	; 0x1b
    c5a4:	82 16       	cp	r8, r18
    c5a6:	93 06       	cpc	r9, r19
    c5a8:	a4 06       	cpc	r10, r20
    c5aa:	b5 06       	cpc	r11, r21
    c5ac:	09 f4       	brne	.+2      	; 0xc5b0 <f_lseek+0x248>
    c5ae:	89 c1       	rjmp	.+786    	; 0xc8c2 <f_lseek+0x55a>
    c5b0:	86 85       	ldd	r24, Z+14	; 0x0e
    c5b2:	b1 01       	movw	r22, r2
    c5b4:	6c 5d       	subi	r22, 0xDC	; 220
    c5b6:	7f 4f       	sbci	r23, 0xFF	; 255
    c5b8:	6b 01       	movw	r12, r22
    c5ba:	87 ff       	sbrs	r24, 7
    c5bc:	0d c0       	rjmp	.+26     	; 0xc5d8 <f_lseek+0x270>
    c5be:	01 e0       	ldi	r16, 0x01	; 1
    c5c0:	10 e0       	ldi	r17, 0x00	; 0
    c5c2:	f7 01       	movw	r30, r14
    c5c4:	81 81       	ldd	r24, Z+1	; 0x01
    c5c6:	0e 94 12 6b 	call	0xd624	; 0xd624 <disk_write>
    c5ca:	89 2b       	or	r24, r25
    c5cc:	09 f0       	breq	.+2      	; 0xc5d0 <f_lseek+0x268>
    c5ce:	32 cf       	rjmp	.-412    	; 0xc434 <f_lseek+0xcc>
    c5d0:	f1 01       	movw	r30, r2
    c5d2:	86 85       	ldd	r24, Z+14	; 0x0e
    c5d4:	8f 77       	andi	r24, 0x7F	; 127
    c5d6:	86 87       	std	Z+14, r24	; 0x0e
    c5d8:	e9 81       	ldd	r30, Y+1	; 0x01
    c5da:	fa 81       	ldd	r31, Y+2	; 0x02
    c5dc:	01 e0       	ldi	r16, 0x01	; 1
    c5de:	10 e0       	ldi	r17, 0x00	; 0
    c5e0:	a5 01       	movw	r20, r10
    c5e2:	94 01       	movw	r18, r8
    c5e4:	b6 01       	movw	r22, r12
    c5e6:	81 81       	ldd	r24, Z+1	; 0x01
    c5e8:	0e 94 02 6b 	call	0xd604	; 0xd604 <disk_read>
    c5ec:	89 2b       	or	r24, r25
    c5ee:	09 f0       	breq	.+2      	; 0xc5f2 <f_lseek+0x28a>
    c5f0:	21 cf       	rjmp	.-446    	; 0xc434 <f_lseek+0xcc>
    c5f2:	f1 01       	movw	r30, r2
    c5f4:	80 8e       	std	Z+24, r8	; 0x18
    c5f6:	91 8e       	std	Z+25, r9	; 0x19
    c5f8:	a2 8e       	std	Z+26, r10	; 0x1a
    c5fa:	b3 8e       	std	Z+27, r11	; 0x1b
    c5fc:	62 c1       	rjmp	.+708    	; 0xc8c2 <f_lseek+0x55a>
    c5fe:	f1 01       	movw	r30, r2
    c600:	82 85       	ldd	r24, Z+10	; 0x0a
    c602:	93 85       	ldd	r25, Z+11	; 0x0b
    c604:	a4 85       	ldd	r26, Z+12	; 0x0c
    c606:	b5 85       	ldd	r27, Z+13	; 0x0d
    c608:	8c 15       	cp	r24, r12
    c60a:	9d 05       	cpc	r25, r13
    c60c:	ae 05       	cpc	r26, r14
    c60e:	bf 05       	cpc	r27, r15
    c610:	28 f4       	brcc	.+10     	; 0xc61c <f_lseek+0x2b4>
    c612:	26 85       	ldd	r18, Z+14	; 0x0e
    c614:	21 fd       	sbrc	r18, 1
    c616:	02 c0       	rjmp	.+4      	; 0xc61c <f_lseek+0x2b4>
    c618:	6c 01       	movw	r12, r24
    c61a:	7d 01       	movw	r14, r26
    c61c:	f1 01       	movw	r30, r2
    c61e:	40 88       	ldd	r4, Z+16	; 0x10
    c620:	51 88       	ldd	r5, Z+17	; 0x11
    c622:	62 88       	ldd	r6, Z+18	; 0x12
    c624:	73 88       	ldd	r7, Z+19	; 0x13
    c626:	10 8a       	std	Z+16, r1	; 0x10
    c628:	11 8a       	std	Z+17, r1	; 0x11
    c62a:	12 8a       	std	Z+18, r1	; 0x12
    c62c:	13 8a       	std	Z+19, r1	; 0x13
    c62e:	c1 14       	cp	r12, r1
    c630:	d1 04       	cpc	r13, r1
    c632:	e1 04       	cpc	r14, r1
    c634:	f1 04       	cpc	r15, r1
    c636:	09 f4       	brne	.+2      	; 0xc63a <f_lseek+0x2d2>
    c638:	48 c1       	rjmp	.+656    	; 0xc8ca <f_lseek+0x562>
    c63a:	e9 81       	ldd	r30, Y+1	; 0x01
    c63c:	fa 81       	ldd	r31, Y+2	; 0x02
    c63e:	81 84       	ldd	r8, Z+9	; 0x09
    c640:	92 84       	ldd	r9, Z+10	; 0x0a
    c642:	a1 2c       	mov	r10, r1
    c644:	b1 2c       	mov	r11, r1
    c646:	39 e0       	ldi	r19, 0x09	; 9
    c648:	88 0c       	add	r8, r8
    c64a:	99 1c       	adc	r9, r9
    c64c:	aa 1c       	adc	r10, r10
    c64e:	bb 1c       	adc	r11, r11
    c650:	3a 95       	dec	r19
    c652:	d1 f7       	brne	.-12     	; 0xc648 <f_lseek+0x2e0>
    c654:	41 14       	cp	r4, r1
    c656:	51 04       	cpc	r5, r1
    c658:	61 04       	cpc	r6, r1
    c65a:	71 04       	cpc	r7, r1
    c65c:	d9 f1       	breq	.+118    	; 0xc6d4 <f_lseek+0x36c>
    c65e:	f1 e0       	ldi	r31, 0x01	; 1
    c660:	4f 1a       	sub	r4, r31
    c662:	51 08       	sbc	r5, r1
    c664:	61 08       	sbc	r6, r1
    c666:	71 08       	sbc	r7, r1
    c668:	c7 01       	movw	r24, r14
    c66a:	b6 01       	movw	r22, r12
    c66c:	61 50       	subi	r22, 0x01	; 1
    c66e:	71 09       	sbc	r23, r1
    c670:	81 09       	sbc	r24, r1
    c672:	91 09       	sbc	r25, r1
    c674:	a5 01       	movw	r20, r10
    c676:	94 01       	movw	r18, r8
    c678:	0e 94 46 e3 	call	0x1c68c	; 0x1c68c <__udivmodsi4>
    c67c:	2b 83       	std	Y+3, r18	; 0x03
    c67e:	3c 83       	std	Y+4, r19	; 0x04
    c680:	4d 83       	std	Y+5, r20	; 0x05
    c682:	5e 83       	std	Y+6, r21	; 0x06
    c684:	c3 01       	movw	r24, r6
    c686:	b2 01       	movw	r22, r4
    c688:	a5 01       	movw	r20, r10
    c68a:	94 01       	movw	r18, r8
    c68c:	0e 94 46 e3 	call	0x1c68c	; 0x1c68c <__udivmodsi4>
    c690:	6b 81       	ldd	r22, Y+3	; 0x03
    c692:	7c 81       	ldd	r23, Y+4	; 0x04
    c694:	8d 81       	ldd	r24, Y+5	; 0x05
    c696:	9e 81       	ldd	r25, Y+6	; 0x06
    c698:	62 17       	cp	r22, r18
    c69a:	73 07       	cpc	r23, r19
    c69c:	84 07       	cpc	r24, r20
    c69e:	95 07       	cpc	r25, r21
    c6a0:	c8 f0       	brcs	.+50     	; 0xc6d4 <f_lseek+0x36c>
    c6a2:	88 27       	eor	r24, r24
    c6a4:	99 27       	eor	r25, r25
    c6a6:	dc 01       	movw	r26, r24
    c6a8:	88 19       	sub	r24, r8
    c6aa:	99 09       	sbc	r25, r9
    c6ac:	aa 09       	sbc	r26, r10
    c6ae:	bb 09       	sbc	r27, r11
    c6b0:	48 22       	and	r4, r24
    c6b2:	59 22       	and	r5, r25
    c6b4:	6a 22       	and	r6, r26
    c6b6:	7b 22       	and	r7, r27
    c6b8:	f1 01       	movw	r30, r2
    c6ba:	40 8a       	std	Z+16, r4	; 0x10
    c6bc:	51 8a       	std	Z+17, r5	; 0x11
    c6be:	62 8a       	std	Z+18, r6	; 0x12
    c6c0:	73 8a       	std	Z+19, r7	; 0x13
    c6c2:	c4 18       	sub	r12, r4
    c6c4:	d5 08       	sbc	r13, r5
    c6c6:	e6 08       	sbc	r14, r6
    c6c8:	f7 08       	sbc	r15, r7
    c6ca:	44 89       	ldd	r20, Z+20	; 0x14
    c6cc:	55 89       	ldd	r21, Z+21	; 0x15
    c6ce:	66 89       	ldd	r22, Z+22	; 0x16
    c6d0:	77 89       	ldd	r23, Z+23	; 0x17
    c6d2:	29 c0       	rjmp	.+82     	; 0xc726 <f_lseek+0x3be>
    c6d4:	f1 01       	movw	r30, r2
    c6d6:	46 81       	ldd	r20, Z+6	; 0x06
    c6d8:	57 81       	ldd	r21, Z+7	; 0x07
    c6da:	60 85       	ldd	r22, Z+8	; 0x08
    c6dc:	71 85       	ldd	r23, Z+9	; 0x09
    c6de:	41 15       	cp	r20, r1
    c6e0:	51 05       	cpc	r21, r1
    c6e2:	61 05       	cpc	r22, r1
    c6e4:	71 05       	cpc	r23, r1
    c6e6:	d1 f4       	brne	.+52     	; 0xc71c <f_lseek+0x3b4>
    c6e8:	40 e0       	ldi	r20, 0x00	; 0
    c6ea:	50 e0       	ldi	r21, 0x00	; 0
    c6ec:	ba 01       	movw	r22, r20
    c6ee:	c1 01       	movw	r24, r2
    c6f0:	0e 94 fe 51 	call	0xa3fc	; 0xa3fc <create_chain>
    c6f4:	ab 01       	movw	r20, r22
    c6f6:	bc 01       	movw	r22, r24
    c6f8:	41 30       	cpi	r20, 0x01	; 1
    c6fa:	51 05       	cpc	r21, r1
    c6fc:	61 05       	cpc	r22, r1
    c6fe:	71 05       	cpc	r23, r1
    c700:	09 f4       	brne	.+2      	; 0xc704 <f_lseek+0x39c>
    c702:	90 ce       	rjmp	.-736    	; 0xc424 <f_lseek+0xbc>
    c704:	4f 3f       	cpi	r20, 0xFF	; 255
    c706:	ff ef       	ldi	r31, 0xFF	; 255
    c708:	5f 07       	cpc	r21, r31
    c70a:	6f 07       	cpc	r22, r31
    c70c:	7f 07       	cpc	r23, r31
    c70e:	09 f4       	brne	.+2      	; 0xc712 <f_lseek+0x3aa>
    c710:	91 ce       	rjmp	.-734    	; 0xc434 <f_lseek+0xcc>
    c712:	f1 01       	movw	r30, r2
    c714:	46 83       	std	Z+6, r20	; 0x06
    c716:	57 83       	std	Z+7, r21	; 0x07
    c718:	60 87       	std	Z+8, r22	; 0x08
    c71a:	71 87       	std	Z+9, r23	; 0x09
    c71c:	f1 01       	movw	r30, r2
    c71e:	44 8b       	std	Z+20, r20	; 0x14
    c720:	55 8b       	std	Z+21, r21	; 0x15
    c722:	66 8b       	std	Z+22, r22	; 0x16
    c724:	77 8b       	std	Z+23, r23	; 0x17
    c726:	41 15       	cp	r20, r1
    c728:	51 05       	cpc	r21, r1
    c72a:	61 05       	cpc	r22, r1
    c72c:	71 05       	cpc	r23, r1
    c72e:	09 f0       	breq	.+2      	; 0xc732 <f_lseek+0x3ca>
    c730:	40 c0       	rjmp	.+128    	; 0xc7b2 <f_lseek+0x44a>
    c732:	c1 2c       	mov	r12, r1
    c734:	d1 2c       	mov	r13, r1
    c736:	76 01       	movw	r14, r12
    c738:	79 c0       	rjmp	.+242    	; 0xc82c <f_lseek+0x4c4>
    c73a:	c8 18       	sub	r12, r8
    c73c:	d9 08       	sbc	r13, r9
    c73e:	ea 08       	sbc	r14, r10
    c740:	fb 08       	sbc	r15, r11
    c742:	f1 01       	movw	r30, r2
    c744:	80 89       	ldd	r24, Z+16	; 0x10
    c746:	91 89       	ldd	r25, Z+17	; 0x11
    c748:	a2 89       	ldd	r26, Z+18	; 0x12
    c74a:	b3 89       	ldd	r27, Z+19	; 0x13
    c74c:	88 0d       	add	r24, r8
    c74e:	99 1d       	adc	r25, r9
    c750:	aa 1d       	adc	r26, r10
    c752:	bb 1d       	adc	r27, r11
    c754:	80 8b       	std	Z+16, r24	; 0x10
    c756:	91 8b       	std	Z+17, r25	; 0x11
    c758:	a2 8b       	std	Z+18, r26	; 0x12
    c75a:	b3 8b       	std	Z+19, r27	; 0x13
    c75c:	86 85       	ldd	r24, Z+14	; 0x0e
    c75e:	81 ff       	sbrs	r24, 1
    c760:	2f c0       	rjmp	.+94     	; 0xc7c0 <f_lseek+0x458>
    c762:	c1 01       	movw	r24, r2
    c764:	0e 94 fe 51 	call	0xa3fc	; 0xa3fc <create_chain>
    c768:	ab 01       	movw	r20, r22
    c76a:	bc 01       	movw	r22, r24
    c76c:	41 15       	cp	r20, r1
    c76e:	51 05       	cpc	r21, r1
    c770:	61 05       	cpc	r22, r1
    c772:	71 05       	cpc	r23, r1
    c774:	61 f1       	breq	.+88     	; 0xc7ce <f_lseek+0x466>
    c776:	4f 3f       	cpi	r20, 0xFF	; 255
    c778:	bf ef       	ldi	r27, 0xFF	; 255
    c77a:	5b 07       	cpc	r21, r27
    c77c:	6b 07       	cpc	r22, r27
    c77e:	7b 07       	cpc	r23, r27
    c780:	09 f4       	brne	.+2      	; 0xc784 <f_lseek+0x41c>
    c782:	58 ce       	rjmp	.-848    	; 0xc434 <f_lseek+0xcc>
    c784:	42 30       	cpi	r20, 0x02	; 2
    c786:	51 05       	cpc	r21, r1
    c788:	61 05       	cpc	r22, r1
    c78a:	71 05       	cpc	r23, r1
    c78c:	08 f4       	brcc	.+2      	; 0xc790 <f_lseek+0x428>
    c78e:	4a ce       	rjmp	.-876    	; 0xc424 <f_lseek+0xbc>
    c790:	e9 81       	ldd	r30, Y+1	; 0x01
    c792:	fa 81       	ldd	r31, Y+2	; 0x02
    c794:	81 8d       	ldd	r24, Z+25	; 0x19
    c796:	92 8d       	ldd	r25, Z+26	; 0x1a
    c798:	a3 8d       	ldd	r26, Z+27	; 0x1b
    c79a:	b4 8d       	ldd	r27, Z+28	; 0x1c
    c79c:	48 17       	cp	r20, r24
    c79e:	59 07       	cpc	r21, r25
    c7a0:	6a 07       	cpc	r22, r26
    c7a2:	7b 07       	cpc	r23, r27
    c7a4:	08 f0       	brcs	.+2      	; 0xc7a8 <f_lseek+0x440>
    c7a6:	3e ce       	rjmp	.-900    	; 0xc424 <f_lseek+0xbc>
    c7a8:	f1 01       	movw	r30, r2
    c7aa:	44 8b       	std	Z+20, r20	; 0x14
    c7ac:	55 8b       	std	Z+21, r21	; 0x15
    c7ae:	66 8b       	std	Z+22, r22	; 0x16
    c7b0:	77 8b       	std	Z+23, r23	; 0x17
    c7b2:	8c 14       	cp	r8, r12
    c7b4:	9d 04       	cpc	r9, r13
    c7b6:	ae 04       	cpc	r10, r14
    c7b8:	bf 04       	cpc	r11, r15
    c7ba:	08 f4       	brcc	.+2      	; 0xc7be <f_lseek+0x456>
    c7bc:	be cf       	rjmp	.-132    	; 0xc73a <f_lseek+0x3d2>
    c7be:	0a c0       	rjmp	.+20     	; 0xc7d4 <f_lseek+0x46c>
    c7c0:	80 81       	ld	r24, Z
    c7c2:	91 81       	ldd	r25, Z+1	; 0x01
    c7c4:	0e 94 89 50 	call	0xa112	; 0xa112 <get_fat.isra.10>
    c7c8:	ab 01       	movw	r20, r22
    c7ca:	bc 01       	movw	r22, r24
    c7cc:	d4 cf       	rjmp	.-88     	; 0xc776 <f_lseek+0x40e>
    c7ce:	c1 2c       	mov	r12, r1
    c7d0:	d1 2c       	mov	r13, r1
    c7d2:	76 01       	movw	r14, r12
    c7d4:	f1 01       	movw	r30, r2
    c7d6:	80 89       	ldd	r24, Z+16	; 0x10
    c7d8:	91 89       	ldd	r25, Z+17	; 0x11
    c7da:	a2 89       	ldd	r26, Z+18	; 0x12
    c7dc:	b3 89       	ldd	r27, Z+19	; 0x13
    c7de:	8c 0d       	add	r24, r12
    c7e0:	9d 1d       	adc	r25, r13
    c7e2:	ae 1d       	adc	r26, r14
    c7e4:	bf 1d       	adc	r27, r15
    c7e6:	80 8b       	std	Z+16, r24	; 0x10
    c7e8:	91 8b       	std	Z+17, r25	; 0x11
    c7ea:	a2 8b       	std	Z+18, r26	; 0x12
    c7ec:	b3 8b       	std	Z+19, r27	; 0x13
    c7ee:	d7 01       	movw	r26, r14
    c7f0:	c6 01       	movw	r24, r12
    c7f2:	91 70       	andi	r25, 0x01	; 1
    c7f4:	aa 27       	eor	r26, r26
    c7f6:	bb 27       	eor	r27, r27
    c7f8:	89 2b       	or	r24, r25
    c7fa:	8a 2b       	or	r24, r26
    c7fc:	8b 2b       	or	r24, r27
    c7fe:	09 f4       	brne	.+2      	; 0xc802 <f_lseek+0x49a>
    c800:	98 cf       	rjmp	.-208    	; 0xc732 <f_lseek+0x3ca>
    c802:	89 81       	ldd	r24, Y+1	; 0x01
    c804:	9a 81       	ldd	r25, Y+2	; 0x02
    c806:	0e 94 97 48 	call	0x912e	; 0x912e <clst2sect>
    c80a:	61 15       	cp	r22, r1
    c80c:	71 05       	cpc	r23, r1
    c80e:	81 05       	cpc	r24, r1
    c810:	91 05       	cpc	r25, r1
    c812:	09 f4       	brne	.+2      	; 0xc816 <f_lseek+0x4ae>
    c814:	07 ce       	rjmp	.-1010   	; 0xc424 <f_lseek+0xbc>
    c816:	29 e0       	ldi	r18, 0x09	; 9
    c818:	f6 94       	lsr	r15
    c81a:	e7 94       	ror	r14
    c81c:	d7 94       	ror	r13
    c81e:	c7 94       	ror	r12
    c820:	2a 95       	dec	r18
    c822:	d1 f7       	brne	.-12     	; 0xc818 <f_lseek+0x4b0>
    c824:	c6 0e       	add	r12, r22
    c826:	d7 1e       	adc	r13, r23
    c828:	e8 1e       	adc	r14, r24
    c82a:	f9 1e       	adc	r15, r25
    c82c:	f1 01       	movw	r30, r2
    c82e:	80 89       	ldd	r24, Z+16	; 0x10
    c830:	91 89       	ldd	r25, Z+17	; 0x11
    c832:	a2 89       	ldd	r26, Z+18	; 0x12
    c834:	b3 89       	ldd	r27, Z+19	; 0x13
    c836:	42 85       	ldd	r20, Z+10	; 0x0a
    c838:	53 85       	ldd	r21, Z+11	; 0x0b
    c83a:	64 85       	ldd	r22, Z+12	; 0x0c
    c83c:	75 85       	ldd	r23, Z+13	; 0x0d
    c83e:	48 17       	cp	r20, r24
    c840:	59 07       	cpc	r21, r25
    c842:	6a 07       	cpc	r22, r26
    c844:	7b 07       	cpc	r23, r27
    c846:	38 f4       	brcc	.+14     	; 0xc856 <f_lseek+0x4ee>
    c848:	82 87       	std	Z+10, r24	; 0x0a
    c84a:	93 87       	std	Z+11, r25	; 0x0b
    c84c:	a4 87       	std	Z+12, r26	; 0x0c
    c84e:	b5 87       	std	Z+13, r27	; 0x0d
    c850:	26 85       	ldd	r18, Z+14	; 0x0e
    c852:	20 64       	ori	r18, 0x40	; 64
    c854:	26 87       	std	Z+14, r18	; 0x0e
    c856:	91 70       	andi	r25, 0x01	; 1
    c858:	aa 27       	eor	r26, r26
    c85a:	bb 27       	eor	r27, r27
    c85c:	89 2b       	or	r24, r25
    c85e:	8a 2b       	or	r24, r26
    c860:	8b 2b       	or	r24, r27
    c862:	79 f1       	breq	.+94     	; 0xc8c2 <f_lseek+0x55a>
    c864:	f1 01       	movw	r30, r2
    c866:	20 8d       	ldd	r18, Z+24	; 0x18
    c868:	31 8d       	ldd	r19, Z+25	; 0x19
    c86a:	42 8d       	ldd	r20, Z+26	; 0x1a
    c86c:	53 8d       	ldd	r21, Z+27	; 0x1b
    c86e:	2c 15       	cp	r18, r12
    c870:	3d 05       	cpc	r19, r13
    c872:	4e 05       	cpc	r20, r14
    c874:	5f 05       	cpc	r21, r15
    c876:	29 f1       	breq	.+74     	; 0xc8c2 <f_lseek+0x55a>
    c878:	86 85       	ldd	r24, Z+14	; 0x0e
    c87a:	b1 01       	movw	r22, r2
    c87c:	6c 5d       	subi	r22, 0xDC	; 220
    c87e:	7f 4f       	sbci	r23, 0xFF	; 255
    c880:	5b 01       	movw	r10, r22
    c882:	87 ff       	sbrs	r24, 7
    c884:	0d c0       	rjmp	.+26     	; 0xc8a0 <f_lseek+0x538>
    c886:	e9 81       	ldd	r30, Y+1	; 0x01
    c888:	fa 81       	ldd	r31, Y+2	; 0x02
    c88a:	01 e0       	ldi	r16, 0x01	; 1
    c88c:	10 e0       	ldi	r17, 0x00	; 0
    c88e:	81 81       	ldd	r24, Z+1	; 0x01
    c890:	c9 d6       	rcall	.+3474   	; 0xd624 <disk_write>
    c892:	89 2b       	or	r24, r25
    c894:	09 f0       	breq	.+2      	; 0xc898 <f_lseek+0x530>
    c896:	ce cd       	rjmp	.-1124   	; 0xc434 <f_lseek+0xcc>
    c898:	f1 01       	movw	r30, r2
    c89a:	86 85       	ldd	r24, Z+14	; 0x0e
    c89c:	8f 77       	andi	r24, 0x7F	; 127
    c89e:	86 87       	std	Z+14, r24	; 0x0e
    c8a0:	e9 81       	ldd	r30, Y+1	; 0x01
    c8a2:	fa 81       	ldd	r31, Y+2	; 0x02
    c8a4:	01 e0       	ldi	r16, 0x01	; 1
    c8a6:	10 e0       	ldi	r17, 0x00	; 0
    c8a8:	a7 01       	movw	r20, r14
    c8aa:	96 01       	movw	r18, r12
    c8ac:	b5 01       	movw	r22, r10
    c8ae:	81 81       	ldd	r24, Z+1	; 0x01
    c8b0:	a9 d6       	rcall	.+3410   	; 0xd604 <disk_read>
    c8b2:	89 2b       	or	r24, r25
    c8b4:	09 f0       	breq	.+2      	; 0xc8b8 <f_lseek+0x550>
    c8b6:	be cd       	rjmp	.-1156   	; 0xc434 <f_lseek+0xcc>
    c8b8:	f1 01       	movw	r30, r2
    c8ba:	c0 8e       	std	Z+24, r12	; 0x18
    c8bc:	d1 8e       	std	Z+25, r13	; 0x19
    c8be:	e2 8e       	std	Z+26, r14	; 0x1a
    c8c0:	f3 8e       	std	Z+27, r15	; 0x1b
    c8c2:	80 e0       	ldi	r24, 0x00	; 0
    c8c4:	ba cd       	rjmp	.-1164   	; 0xc43a <f_lseek+0xd2>
    c8c6:	81 e1       	ldi	r24, 0x11	; 17
    c8c8:	b8 cd       	rjmp	.-1168   	; 0xc43a <f_lseek+0xd2>
    c8ca:	80 e0       	ldi	r24, 0x00	; 0
    c8cc:	90 e0       	ldi	r25, 0x00	; 0
    c8ce:	dc 01       	movw	r26, r24
    c8d0:	c1 2c       	mov	r12, r1
    c8d2:	d1 2c       	mov	r13, r1
    c8d4:	76 01       	movw	r14, r12
    c8d6:	bf cf       	rjmp	.-130    	; 0xc856 <f_lseek+0x4ee>
    c8d8:	2a 96       	adiw	r28, 0x0a	; 10
    c8da:	e2 e1       	ldi	r30, 0x12	; 18
    c8dc:	0c 94 e4 e3 	jmp	0x1c7c8	; 0x1c7c8 <__epilogue_restores__>

0000c8e0 <f_opendir>:
    c8e0:	a4 e0       	ldi	r26, 0x04	; 4
    c8e2:	b0 e0       	ldi	r27, 0x00	; 0
    c8e4:	e6 e7       	ldi	r30, 0x76	; 118
    c8e6:	f4 e6       	ldi	r31, 0x64	; 100
    c8e8:	0c 94 d2 e3 	jmp	0x1c7a4	; 0x1c7a4 <__prologue_saves__+0x14>
    c8ec:	7c 83       	std	Y+4, r23	; 0x04
    c8ee:	6b 83       	std	Y+3, r22	; 0x03
    c8f0:	00 97       	sbiw	r24, 0x00	; 0
    c8f2:	09 f4       	brne	.+2      	; 0xc8f6 <f_opendir+0x16>
    c8f4:	48 c0       	rjmp	.+144    	; 0xc986 <f_opendir+0xa6>
    c8f6:	8c 01       	movw	r16, r24
    c8f8:	40 e0       	ldi	r20, 0x00	; 0
    c8fa:	be 01       	movw	r22, r28
    c8fc:	6f 5f       	subi	r22, 0xFF	; 255
    c8fe:	7f 4f       	sbci	r23, 0xFF	; 255
    c900:	ce 01       	movw	r24, r28
    c902:	03 96       	adiw	r24, 0x03	; 3
    c904:	0e 94 34 4d 	call	0x9a68	; 0x9a68 <mount_volume>
    c908:	7c 01       	movw	r14, r24
    c90a:	89 2b       	or	r24, r25
    c90c:	b9 f5       	brne	.+110    	; 0xc97c <f_opendir+0x9c>
    c90e:	89 81       	ldd	r24, Y+1	; 0x01
    c910:	9a 81       	ldd	r25, Y+2	; 0x02
    c912:	f8 01       	movw	r30, r16
    c914:	91 83       	std	Z+1, r25	; 0x01
    c916:	80 83       	st	Z, r24
    c918:	80 e0       	ldi	r24, 0x00	; 0
    c91a:	92 e0       	ldi	r25, 0x02	; 2
    c91c:	b7 d5       	rcall	.+2926   	; 0xd48c <ff_memalloc>
    c91e:	6c 01       	movw	r12, r24
    c920:	00 97       	sbiw	r24, 0x00	; 0
    c922:	99 f1       	breq	.+102    	; 0xc98a <f_opendir+0xaa>
    c924:	e9 81       	ldd	r30, Y+1	; 0x01
    c926:	fa 81       	ldd	r31, Y+2	; 0x02
    c928:	94 87       	std	Z+12, r25	; 0x0c
    c92a:	83 87       	std	Z+11, r24	; 0x0b
    c92c:	6b 81       	ldd	r22, Y+3	; 0x03
    c92e:	7c 81       	ldd	r23, Y+4	; 0x04
    c930:	c8 01       	movw	r24, r16
    c932:	0e 94 83 58 	call	0xb106	; 0xb106 <follow_path>
    c936:	7c 01       	movw	r14, r24
    c938:	89 2b       	or	r24, r25
    c93a:	b9 f4       	brne	.+46     	; 0xc96a <f_opendir+0x8a>
    c93c:	f8 01       	movw	r30, r16
    c93e:	87 a1       	ldd	r24, Z+39	; 0x27
    c940:	87 fd       	sbrc	r24, 7
    c942:	28 c0       	rjmp	.+80     	; 0xc994 <f_opendir+0xb4>
    c944:	84 81       	ldd	r24, Z+4	; 0x04
    c946:	84 ff       	sbrs	r24, 4
    c948:	0d c0       	rjmp	.+26     	; 0xc964 <f_opendir+0x84>
    c94a:	62 8d       	ldd	r22, Z+26	; 0x1a
    c94c:	73 8d       	ldd	r23, Z+27	; 0x1b
    c94e:	e9 81       	ldd	r30, Y+1	; 0x01
    c950:	fa 81       	ldd	r31, Y+2	; 0x02
    c952:	80 81       	ld	r24, Z
    c954:	0e 94 2a 4b 	call	0x9654	; 0x9654 <ld_clust.isra.4>
    c958:	f8 01       	movw	r30, r16
    c95a:	66 83       	std	Z+6, r22	; 0x06
    c95c:	77 83       	std	Z+7, r23	; 0x07
    c95e:	80 87       	std	Z+8, r24	; 0x08
    c960:	91 87       	std	Z+9, r25	; 0x09
    c962:	18 c0       	rjmp	.+48     	; 0xc994 <f_opendir+0xb4>
    c964:	95 e0       	ldi	r25, 0x05	; 5
    c966:	e9 2e       	mov	r14, r25
    c968:	f1 2c       	mov	r15, r1
    c96a:	c6 01       	movw	r24, r12
    c96c:	92 d5       	rcall	.+2852   	; 0xd492 <ff_memfree>
    c96e:	f4 e0       	ldi	r31, 0x04	; 4
    c970:	ef 16       	cp	r14, r31
    c972:	f1 04       	cpc	r15, r1
    c974:	f1 f0       	breq	.+60     	; 0xc9b2 <f_opendir+0xd2>
    c976:	e1 14       	cp	r14, r1
    c978:	f1 04       	cpc	r15, r1
    c97a:	49 f0       	breq	.+18     	; 0xc98e <f_opendir+0xae>
    c97c:	f8 01       	movw	r30, r16
    c97e:	11 82       	std	Z+1, r1	; 0x01
    c980:	10 82       	st	Z, r1
    c982:	c7 01       	movw	r24, r14
    c984:	1a c0       	rjmp	.+52     	; 0xc9ba <f_opendir+0xda>
    c986:	89 e0       	ldi	r24, 0x09	; 9
    c988:	03 c0       	rjmp	.+6      	; 0xc990 <f_opendir+0xb0>
    c98a:	81 e1       	ldi	r24, 0x11	; 17
    c98c:	01 c0       	rjmp	.+2      	; 0xc990 <f_opendir+0xb0>
    c98e:	80 e0       	ldi	r24, 0x00	; 0
    c990:	90 e0       	ldi	r25, 0x00	; 0
    c992:	13 c0       	rjmp	.+38     	; 0xc9ba <f_opendir+0xda>
    c994:	e9 81       	ldd	r30, Y+1	; 0x01
    c996:	fa 81       	ldd	r31, Y+2	; 0x02
    c998:	85 81       	ldd	r24, Z+5	; 0x05
    c99a:	96 81       	ldd	r25, Z+6	; 0x06
    c99c:	f8 01       	movw	r30, r16
    c99e:	93 83       	std	Z+3, r25	; 0x03
    c9a0:	82 83       	std	Z+2, r24	; 0x02
    c9a2:	40 e0       	ldi	r20, 0x00	; 0
    c9a4:	50 e0       	ldi	r21, 0x00	; 0
    c9a6:	ba 01       	movw	r22, r20
    c9a8:	c8 01       	movw	r24, r16
    c9aa:	0e 94 3d 51 	call	0xa27a	; 0xa27a <dir_sdi>
    c9ae:	7c 01       	movw	r14, r24
    c9b0:	dc cf       	rjmp	.-72     	; 0xc96a <f_opendir+0x8a>
    c9b2:	85 e0       	ldi	r24, 0x05	; 5
    c9b4:	e8 2e       	mov	r14, r24
    c9b6:	f1 2c       	mov	r15, r1
    c9b8:	e1 cf       	rjmp	.-62     	; 0xc97c <f_opendir+0x9c>
    c9ba:	24 96       	adiw	r28, 0x04	; 4
    c9bc:	e8 e0       	ldi	r30, 0x08	; 8
    c9be:	0c 94 ee e3 	jmp	0x1c7dc	; 0x1c7dc <__epilogue_restores__+0x14>

0000c9c2 <f_closedir>:
    c9c2:	a2 e0       	ldi	r26, 0x02	; 2
    c9c4:	b0 e0       	ldi	r27, 0x00	; 0
    c9c6:	e7 ee       	ldi	r30, 0xE7	; 231
    c9c8:	f4 e6       	ldi	r31, 0x64	; 100
    c9ca:	0c 94 d6 e3 	jmp	0x1c7ac	; 0x1c7ac <__prologue_saves__+0x1c>
    c9ce:	8c 01       	movw	r16, r24
    c9d0:	be 01       	movw	r22, r28
    c9d2:	6f 5f       	subi	r22, 0xFF	; 255
    c9d4:	7f 4f       	sbci	r23, 0xFF	; 255
    c9d6:	0e 94 36 49 	call	0x926c	; 0x926c <validate>
    c9da:	00 97       	sbiw	r24, 0x00	; 0
    c9dc:	19 f4       	brne	.+6      	; 0xc9e4 <f_closedir+0x22>
    c9de:	f8 01       	movw	r30, r16
    c9e0:	11 82       	std	Z+1, r1	; 0x01
    c9e2:	10 82       	st	Z, r1
    c9e4:	22 96       	adiw	r28, 0x02	; 2
    c9e6:	e4 e0       	ldi	r30, 0x04	; 4
    c9e8:	0c 94 f2 e3 	jmp	0x1c7e4	; 0x1c7e4 <__epilogue_restores__+0x1c>

0000c9ec <f_readdir>:
    c9ec:	a2 e0       	ldi	r26, 0x02	; 2
    c9ee:	b0 e0       	ldi	r27, 0x00	; 0
    c9f0:	ec ef       	ldi	r30, 0xFC	; 252
    c9f2:	f4 e6       	ldi	r31, 0x64	; 100
    c9f4:	0c 94 d0 e3 	jmp	0x1c7a0	; 0x1c7a0 <__prologue_saves__+0x10>
    c9f8:	7c 01       	movw	r14, r24
    c9fa:	5b 01       	movw	r10, r22
    c9fc:	be 01       	movw	r22, r28
    c9fe:	6f 5f       	subi	r22, 0xFF	; 255
    ca00:	7f 4f       	sbci	r23, 0xFF	; 255
    ca02:	0e 94 36 49 	call	0x926c	; 0x926c <validate>
    ca06:	00 97       	sbiw	r24, 0x00	; 0
    ca08:	89 f5       	brne	.+98     	; 0xca6c <f_readdir+0x80>
    ca0a:	a1 14       	cp	r10, r1
    ca0c:	b1 04       	cpc	r11, r1
    ca0e:	39 f4       	brne	.+14     	; 0xca1e <f_readdir+0x32>
    ca10:	40 e0       	ldi	r20, 0x00	; 0
    ca12:	50 e0       	ldi	r21, 0x00	; 0
    ca14:	ba 01       	movw	r22, r20
    ca16:	c7 01       	movw	r24, r14
    ca18:	0e 94 3d 51 	call	0xa27a	; 0xa27a <dir_sdi>
    ca1c:	27 c0       	rjmp	.+78     	; 0xca6c <f_readdir+0x80>
    ca1e:	80 e0       	ldi	r24, 0x00	; 0
    ca20:	92 e0       	ldi	r25, 0x02	; 2
    ca22:	34 d5       	rcall	.+2664   	; 0xd48c <ff_memalloc>
    ca24:	6c 01       	movw	r12, r24
    ca26:	00 97       	sbiw	r24, 0x00	; 0
    ca28:	f9 f0       	breq	.+62     	; 0xca68 <f_readdir+0x7c>
    ca2a:	e9 81       	ldd	r30, Y+1	; 0x01
    ca2c:	fa 81       	ldd	r31, Y+2	; 0x02
    ca2e:	94 87       	std	Z+12, r25	; 0x0c
    ca30:	83 87       	std	Z+11, r24	; 0x0b
    ca32:	60 e0       	ldi	r22, 0x00	; 0
    ca34:	70 e0       	ldi	r23, 0x00	; 0
    ca36:	c7 01       	movw	r24, r14
    ca38:	0e 94 d6 54 	call	0xa9ac	; 0xa9ac <dir_read>
    ca3c:	8c 01       	movw	r16, r24
    ca3e:	8b 7f       	andi	r24, 0xFB	; 251
    ca40:	89 2b       	or	r24, r25
    ca42:	71 f4       	brne	.+28     	; 0xca60 <f_readdir+0x74>
    ca44:	b5 01       	movw	r22, r10
    ca46:	c7 01       	movw	r24, r14
    ca48:	0e 94 1a 4a 	call	0x9434	; 0x9434 <get_fileinfo>
    ca4c:	60 e0       	ldi	r22, 0x00	; 0
    ca4e:	70 e0       	ldi	r23, 0x00	; 0
    ca50:	c7 01       	movw	r24, r14
    ca52:	0e 94 b5 53 	call	0xa76a	; 0xa76a <dir_next>
    ca56:	8c 01       	movw	r16, r24
    ca58:	04 97       	sbiw	r24, 0x04	; 4
    ca5a:	11 f4       	brne	.+4      	; 0xca60 <f_readdir+0x74>
    ca5c:	00 e0       	ldi	r16, 0x00	; 0
    ca5e:	10 e0       	ldi	r17, 0x00	; 0
    ca60:	c6 01       	movw	r24, r12
    ca62:	17 d5       	rcall	.+2606   	; 0xd492 <ff_memfree>
    ca64:	c8 01       	movw	r24, r16
    ca66:	02 c0       	rjmp	.+4      	; 0xca6c <f_readdir+0x80>
    ca68:	81 e1       	ldi	r24, 0x11	; 17
    ca6a:	90 e0       	ldi	r25, 0x00	; 0
    ca6c:	22 96       	adiw	r28, 0x02	; 2
    ca6e:	ea e0       	ldi	r30, 0x0A	; 10
    ca70:	0c 94 ec e3 	jmp	0x1c7d8	; 0x1c7d8 <__epilogue_restores__+0x10>

0000ca74 <f_stat>:
    ca74:	a0 e3       	ldi	r26, 0x30	; 48
    ca76:	b0 e0       	ldi	r27, 0x00	; 0
    ca78:	e0 e4       	ldi	r30, 0x40	; 64
    ca7a:	f5 e6       	ldi	r31, 0x65	; 101
    ca7c:	0c 94 d2 e3 	jmp	0x1c7a4	; 0x1c7a4 <__prologue_saves__+0x14>
    ca80:	98 ab       	std	Y+48, r25	; 0x30
    ca82:	8f a7       	std	Y+47, r24	; 0x2f
    ca84:	6b 01       	movw	r12, r22
    ca86:	40 e0       	ldi	r20, 0x00	; 0
    ca88:	be 01       	movw	r22, r28
    ca8a:	6f 5f       	subi	r22, 0xFF	; 255
    ca8c:	7f 4f       	sbci	r23, 0xFF	; 255
    ca8e:	ce 01       	movw	r24, r28
    ca90:	8f 96       	adiw	r24, 0x2f	; 47
    ca92:	0e 94 34 4d 	call	0x9a68	; 0x9a68 <mount_volume>
    ca96:	00 97       	sbiw	r24, 0x00	; 0
    ca98:	39 f5       	brne	.+78     	; 0xcae8 <f_stat+0x74>
    ca9a:	80 e0       	ldi	r24, 0x00	; 0
    ca9c:	92 e0       	ldi	r25, 0x02	; 2
    ca9e:	f6 d4       	rcall	.+2540   	; 0xd48c <ff_memalloc>
    caa0:	7c 01       	movw	r14, r24
    caa2:	00 97       	sbiw	r24, 0x00	; 0
    caa4:	f9 f0       	breq	.+62     	; 0xcae4 <f_stat+0x70>
    caa6:	e9 81       	ldd	r30, Y+1	; 0x01
    caa8:	fa 81       	ldd	r31, Y+2	; 0x02
    caaa:	94 87       	std	Z+12, r25	; 0x0c
    caac:	83 87       	std	Z+11, r24	; 0x0b
    caae:	6f a5       	ldd	r22, Y+47	; 0x2f
    cab0:	78 a9       	ldd	r23, Y+48	; 0x30
    cab2:	ce 01       	movw	r24, r28
    cab4:	01 96       	adiw	r24, 0x01	; 1
    cab6:	0e 94 83 58 	call	0xb106	; 0xb106 <follow_path>
    caba:	8c 01       	movw	r16, r24
    cabc:	89 2b       	or	r24, r25
    cabe:	71 f4       	brne	.+28     	; 0xcadc <f_stat+0x68>
    cac0:	88 a5       	ldd	r24, Y+40	; 0x28
    cac2:	87 fd       	sbrc	r24, 7
    cac4:	09 c0       	rjmp	.+18     	; 0xcad8 <f_stat+0x64>
    cac6:	c1 14       	cp	r12, r1
    cac8:	d1 04       	cpc	r13, r1
    caca:	41 f0       	breq	.+16     	; 0xcadc <f_stat+0x68>
    cacc:	b6 01       	movw	r22, r12
    cace:	ce 01       	movw	r24, r28
    cad0:	01 96       	adiw	r24, 0x01	; 1
    cad2:	0e 94 1a 4a 	call	0x9434	; 0x9434 <get_fileinfo>
    cad6:	02 c0       	rjmp	.+4      	; 0xcadc <f_stat+0x68>
    cad8:	06 e0       	ldi	r16, 0x06	; 6
    cada:	10 e0       	ldi	r17, 0x00	; 0
    cadc:	c7 01       	movw	r24, r14
    cade:	d9 d4       	rcall	.+2482   	; 0xd492 <ff_memfree>
    cae0:	c8 01       	movw	r24, r16
    cae2:	02 c0       	rjmp	.+4      	; 0xcae8 <f_stat+0x74>
    cae4:	81 e1       	ldi	r24, 0x11	; 17
    cae6:	90 e0       	ldi	r25, 0x00	; 0
    cae8:	e0 96       	adiw	r28, 0x30	; 48
    caea:	e8 e0       	ldi	r30, 0x08	; 8
    caec:	0c 94 ee e3 	jmp	0x1c7dc	; 0x1c7dc <__epilogue_restores__+0x14>

0000caf0 <f_getfree>:
    caf0:	aa e0       	ldi	r26, 0x0A	; 10
    caf2:	b0 e0       	ldi	r27, 0x00	; 0
    caf4:	ee e7       	ldi	r30, 0x7E	; 126
    caf6:	f5 e6       	ldi	r31, 0x65	; 101
    caf8:	0c 94 c8 e3 	jmp	0x1c790	; 0x1c790 <__prologue_saves__>
    cafc:	9c 83       	std	Y+4, r25	; 0x04
    cafe:	8b 83       	std	Y+3, r24	; 0x03
    cb00:	7e 83       	std	Y+6, r23	; 0x06
    cb02:	6d 83       	std	Y+5, r22	; 0x05
    cb04:	7a 01       	movw	r14, r20
    cb06:	40 e0       	ldi	r20, 0x00	; 0
    cb08:	be 01       	movw	r22, r28
    cb0a:	6f 5f       	subi	r22, 0xFF	; 255
    cb0c:	7f 4f       	sbci	r23, 0xFF	; 255
    cb0e:	ce 01       	movw	r24, r28
    cb10:	03 96       	adiw	r24, 0x03	; 3
    cb12:	0e 94 34 4d 	call	0x9a68	; 0x9a68 <mount_volume>
    cb16:	8c 01       	movw	r16, r24
    cb18:	89 2b       	or	r24, r25
    cb1a:	09 f0       	breq	.+2      	; 0xcb1e <f_getfree+0x2e>
    cb1c:	c4 c0       	rjmp	.+392    	; 0xcca6 <f_getfree+0x1b6>
    cb1e:	69 80       	ldd	r6, Y+1	; 0x01
    cb20:	7a 80       	ldd	r7, Y+2	; 0x02
    cb22:	d7 01       	movw	r26, r14
    cb24:	6d 92       	st	X+, r6
    cb26:	7c 92       	st	X, r7
    cb28:	f3 01       	movw	r30, r6
    cb2a:	81 89       	ldd	r24, Z+17	; 0x11
    cb2c:	92 89       	ldd	r25, Z+18	; 0x12
    cb2e:	a3 89       	ldd	r26, Z+19	; 0x13
    cb30:	b4 89       	ldd	r27, Z+20	; 0x14
    cb32:	81 8c       	ldd	r8, Z+25	; 0x19
    cb34:	92 8c       	ldd	r9, Z+26	; 0x1a
    cb36:	a3 8c       	ldd	r10, Z+27	; 0x1b
    cb38:	b4 8c       	ldd	r11, Z+28	; 0x1c
    cb3a:	b5 01       	movw	r22, r10
    cb3c:	a4 01       	movw	r20, r8
    cb3e:	42 50       	subi	r20, 0x02	; 2
    cb40:	51 09       	sbc	r21, r1
    cb42:	61 09       	sbc	r22, r1
    cb44:	71 09       	sbc	r23, r1
    cb46:	48 17       	cp	r20, r24
    cb48:	59 07       	cpc	r21, r25
    cb4a:	6a 07       	cpc	r22, r26
    cb4c:	7b 07       	cpc	r23, r27
    cb4e:	38 f0       	brcs	.+14     	; 0xcb5e <f_getfree+0x6e>
    cb50:	ed 81       	ldd	r30, Y+5	; 0x05
    cb52:	fe 81       	ldd	r31, Y+6	; 0x06
    cb54:	80 83       	st	Z, r24
    cb56:	91 83       	std	Z+1, r25	; 0x01
    cb58:	a2 83       	std	Z+2, r26	; 0x02
    cb5a:	b3 83       	std	Z+3, r27	; 0x03
    cb5c:	a4 c0       	rjmp	.+328    	; 0xcca6 <f_getfree+0x1b6>
    cb5e:	80 81       	ld	r24, Z
    cb60:	81 30       	cpi	r24, 0x01	; 1
    cb62:	a1 f5       	brne	.+104    	; 0xcbcc <f_getfree+0xdc>
    cb64:	82 e0       	ldi	r24, 0x02	; 2
    cb66:	88 2e       	mov	r8, r24
    cb68:	91 2c       	mov	r9, r1
    cb6a:	a1 2c       	mov	r10, r1
    cb6c:	b1 2c       	mov	r11, r1
    cb6e:	c1 2c       	mov	r12, r1
    cb70:	d1 2c       	mov	r13, r1
    cb72:	76 01       	movw	r14, r12
    cb74:	b5 01       	movw	r22, r10
    cb76:	a4 01       	movw	r20, r8
    cb78:	c3 01       	movw	r24, r6
    cb7a:	0e 94 89 50 	call	0xa112	; 0xa112 <get_fat.isra.10>
    cb7e:	6f 3f       	cpi	r22, 0xFF	; 255
    cb80:	bf ef       	ldi	r27, 0xFF	; 255
    cb82:	7b 07       	cpc	r23, r27
    cb84:	8b 07       	cpc	r24, r27
    cb86:	9b 07       	cpc	r25, r27
    cb88:	09 f4       	brne	.+2      	; 0xcb8c <f_getfree+0x9c>
    cb8a:	76 c0       	rjmp	.+236    	; 0xcc78 <f_getfree+0x188>
    cb8c:	61 30       	cpi	r22, 0x01	; 1
    cb8e:	71 05       	cpc	r23, r1
    cb90:	81 05       	cpc	r24, r1
    cb92:	91 05       	cpc	r25, r1
    cb94:	09 f4       	brne	.+2      	; 0xcb98 <f_getfree+0xa8>
    cb96:	73 c0       	rjmp	.+230    	; 0xcc7e <f_getfree+0x18e>
    cb98:	67 2b       	or	r22, r23
    cb9a:	68 2b       	or	r22, r24
    cb9c:	69 2b       	or	r22, r25
    cb9e:	29 f4       	brne	.+10     	; 0xcbaa <f_getfree+0xba>
    cba0:	ef ef       	ldi	r30, 0xFF	; 255
    cba2:	ce 1a       	sub	r12, r30
    cba4:	de 0a       	sbc	r13, r30
    cba6:	ee 0a       	sbc	r14, r30
    cba8:	fe 0a       	sbc	r15, r30
    cbaa:	ff ef       	ldi	r31, 0xFF	; 255
    cbac:	8f 1a       	sub	r8, r31
    cbae:	9f 0a       	sbc	r9, r31
    cbb0:	af 0a       	sbc	r10, r31
    cbb2:	bf 0a       	sbc	r11, r31
    cbb4:	e9 81       	ldd	r30, Y+1	; 0x01
    cbb6:	fa 81       	ldd	r31, Y+2	; 0x02
    cbb8:	81 8d       	ldd	r24, Z+25	; 0x19
    cbba:	92 8d       	ldd	r25, Z+26	; 0x1a
    cbbc:	a3 8d       	ldd	r26, Z+27	; 0x1b
    cbbe:	b4 8d       	ldd	r27, Z+28	; 0x1c
    cbc0:	88 16       	cp	r8, r24
    cbc2:	99 06       	cpc	r9, r25
    cbc4:	aa 06       	cpc	r10, r26
    cbc6:	bb 06       	cpc	r11, r27
    cbc8:	a8 f2       	brcs	.-86     	; 0xcb74 <f_getfree+0x84>
    cbca:	5d c0       	rjmp	.+186    	; 0xcc86 <f_getfree+0x196>
    cbcc:	f3 01       	movw	r30, r6
    cbce:	45 a0       	ldd	r4, Z+37	; 0x25
    cbd0:	56 a0       	ldd	r5, Z+38	; 0x26
    cbd2:	67 a0       	ldd	r6, Z+39	; 0x27
    cbd4:	70 a4       	ldd	r7, Z+40	; 0x28
    cbd6:	21 2c       	mov	r2, r1
    cbd8:	31 2c       	mov	r3, r1
    cbda:	c1 2c       	mov	r12, r1
    cbdc:	d1 2c       	mov	r13, r1
    cbde:	76 01       	movw	r14, r12
    cbe0:	21 14       	cp	r2, r1
    cbe2:	31 04       	cpc	r3, r1
    cbe4:	b1 f4       	brne	.+44     	; 0xcc12 <f_getfree+0x122>
    cbe6:	d3 01       	movw	r26, r6
    cbe8:	c2 01       	movw	r24, r4
    cbea:	01 96       	adiw	r24, 0x01	; 1
    cbec:	a1 1d       	adc	r26, r1
    cbee:	b1 1d       	adc	r27, r1
    cbf0:	8f 83       	std	Y+7, r24	; 0x07
    cbf2:	98 87       	std	Y+8, r25	; 0x08
    cbf4:	a9 87       	std	Y+9, r26	; 0x09
    cbf6:	ba 87       	std	Y+10, r27	; 0x0a
    cbf8:	b3 01       	movw	r22, r6
    cbfa:	a2 01       	movw	r20, r4
    cbfc:	89 81       	ldd	r24, Y+1	; 0x01
    cbfe:	9a 81       	ldd	r25, Y+2	; 0x02
    cc00:	0e 94 b9 4c 	call	0x9972	; 0x9972 <move_window>
    cc04:	00 97       	sbiw	r24, 0x00	; 0
    cc06:	09 f0       	breq	.+2      	; 0xcc0a <f_getfree+0x11a>
    cc08:	3d c0       	rjmp	.+122    	; 0xcc84 <f_getfree+0x194>
    cc0a:	4f 80       	ldd	r4, Y+7	; 0x07
    cc0c:	58 84       	ldd	r5, Y+8	; 0x08
    cc0e:	69 84       	ldd	r6, Y+9	; 0x09
    cc10:	7a 84       	ldd	r7, Y+10	; 0x0a
    cc12:	e9 81       	ldd	r30, Y+1	; 0x01
    cc14:	fa 81       	ldd	r31, Y+2	; 0x02
    cc16:	80 81       	ld	r24, Z
    cc18:	82 30       	cpi	r24, 0x02	; 2
    cc1a:	79 f4       	brne	.+30     	; 0xcc3a <f_getfree+0x14a>
    cc1c:	e2 0d       	add	r30, r2
    cc1e:	f3 1d       	adc	r31, r3
    cc20:	85 a9       	ldd	r24, Z+53	; 0x35
    cc22:	96 a9       	ldd	r25, Z+54	; 0x36
    cc24:	89 2b       	or	r24, r25
    cc26:	29 f4       	brne	.+10     	; 0xcc32 <f_getfree+0x142>
    cc28:	9f ef       	ldi	r25, 0xFF	; 255
    cc2a:	c9 1a       	sub	r12, r25
    cc2c:	d9 0a       	sbc	r13, r25
    cc2e:	e9 0a       	sbc	r14, r25
    cc30:	f9 0a       	sbc	r15, r25
    cc32:	a2 e0       	ldi	r26, 0x02	; 2
    cc34:	2a 0e       	add	r2, r26
    cc36:	31 1c       	adc	r3, r1
    cc38:	15 c0       	rjmp	.+42     	; 0xcc64 <f_getfree+0x174>
    cc3a:	cf 01       	movw	r24, r30
    cc3c:	c5 96       	adiw	r24, 0x35	; 53
    cc3e:	82 0d       	add	r24, r2
    cc40:	93 1d       	adc	r25, r3
    cc42:	0e 94 de 47 	call	0x8fbc	; 0x8fbc <ld_dword>
    cc46:	dc 01       	movw	r26, r24
    cc48:	cb 01       	movw	r24, r22
    cc4a:	bf 70       	andi	r27, 0x0F	; 15
    cc4c:	89 2b       	or	r24, r25
    cc4e:	8a 2b       	or	r24, r26
    cc50:	8b 2b       	or	r24, r27
    cc52:	29 f4       	brne	.+10     	; 0xcc5e <f_getfree+0x16e>
    cc54:	bf ef       	ldi	r27, 0xFF	; 255
    cc56:	cb 1a       	sub	r12, r27
    cc58:	db 0a       	sbc	r13, r27
    cc5a:	eb 0a       	sbc	r14, r27
    cc5c:	fb 0a       	sbc	r15, r27
    cc5e:	e4 e0       	ldi	r30, 0x04	; 4
    cc60:	2e 0e       	add	r2, r30
    cc62:	31 1c       	adc	r3, r1
    cc64:	f1 e0       	ldi	r31, 0x01	; 1
    cc66:	3f 22       	and	r3, r31
    cc68:	21 e0       	ldi	r18, 0x01	; 1
    cc6a:	82 1a       	sub	r8, r18
    cc6c:	91 08       	sbc	r9, r1
    cc6e:	a1 08       	sbc	r10, r1
    cc70:	b1 08       	sbc	r11, r1
    cc72:	09 f0       	breq	.+2      	; 0xcc76 <f_getfree+0x186>
    cc74:	b5 cf       	rjmp	.-150    	; 0xcbe0 <f_getfree+0xf0>
    cc76:	07 c0       	rjmp	.+14     	; 0xcc86 <f_getfree+0x196>
    cc78:	01 e0       	ldi	r16, 0x01	; 1
    cc7a:	10 e0       	ldi	r17, 0x00	; 0
    cc7c:	04 c0       	rjmp	.+8      	; 0xcc86 <f_getfree+0x196>
    cc7e:	02 e0       	ldi	r16, 0x02	; 2
    cc80:	10 e0       	ldi	r17, 0x00	; 0
    cc82:	01 c0       	rjmp	.+2      	; 0xcc86 <f_getfree+0x196>
    cc84:	8c 01       	movw	r16, r24
    cc86:	ad 81       	ldd	r26, Y+5	; 0x05
    cc88:	be 81       	ldd	r27, Y+6	; 0x06
    cc8a:	cd 92       	st	X+, r12
    cc8c:	dd 92       	st	X+, r13
    cc8e:	ed 92       	st	X+, r14
    cc90:	fc 92       	st	X, r15
    cc92:	13 97       	sbiw	r26, 0x03	; 3
    cc94:	e9 81       	ldd	r30, Y+1	; 0x01
    cc96:	fa 81       	ldd	r31, Y+2	; 0x02
    cc98:	c1 8a       	std	Z+17, r12	; 0x11
    cc9a:	d2 8a       	std	Z+18, r13	; 0x12
    cc9c:	e3 8a       	std	Z+19, r14	; 0x13
    cc9e:	f4 8a       	std	Z+20, r15	; 0x14
    cca0:	84 81       	ldd	r24, Z+4	; 0x04
    cca2:	81 60       	ori	r24, 0x01	; 1
    cca4:	84 83       	std	Z+4, r24	; 0x04
    cca6:	c8 01       	movw	r24, r16
    cca8:	2a 96       	adiw	r28, 0x0a	; 10
    ccaa:	e2 e1       	ldi	r30, 0x12	; 18
    ccac:	0c 94 e4 e3 	jmp	0x1c7c8	; 0x1c7c8 <__epilogue_restores__>

0000ccb0 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
    ccb0:	a0 e6       	ldi	r26, 0x60	; 96
    ccb2:	b0 e0       	ldi	r27, 0x00	; 0
    ccb4:	ee e5       	ldi	r30, 0x5E	; 94
    ccb6:	f6 e6       	ldi	r31, 0x66	; 102
    ccb8:	0c 94 cf e3 	jmp	0x1c79e	; 0x1c79e <__prologue_saves__+0xe>
    ccbc:	a1 96       	adiw	r28, 0x21	; 33
    ccbe:	9f af       	std	Y+63, r25	; 0x3f
    ccc0:	8e af       	std	Y+62, r24	; 0x3e
    ccc2:	a1 97       	sbiw	r28, 0x21	; 33
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
    ccc4:	42 e0       	ldi	r20, 0x02	; 2
    ccc6:	be 01       	movw	r22, r28
    ccc8:	63 5a       	subi	r22, 0xA3	; 163
    ccca:	7f 4f       	sbci	r23, 0xFF	; 255
    cccc:	ce 01       	movw	r24, r28
    ccce:	81 5a       	subi	r24, 0xA1	; 161
    ccd0:	9f 4f       	sbci	r25, 0xFF	; 255
    ccd2:	0e 94 34 4d 	call	0x9a68	; 0x9a68 <mount_volume>
	if (res == FR_OK) {
    ccd6:	00 97       	sbiw	r24, 0x00	; 0
    ccd8:	09 f0       	breq	.+2      	; 0xccdc <f_unlink+0x2c>
    ccda:	8c c0       	rjmp	.+280    	; 0xcdf4 <f_unlink+0x144>
		dj.obj.fs = fs;
    ccdc:	6f 96       	adiw	r28, 0x1f	; 31
    ccde:	8e ad       	ldd	r24, Y+62	; 0x3e
    cce0:	9f ad       	ldd	r25, Y+63	; 0x3f
    cce2:	6f 97       	sbiw	r28, 0x1f	; 31
    cce4:	98 ab       	std	Y+48, r25	; 0x30
    cce6:	8f a7       	std	Y+47, r24	; 0x2f
		INIT_NAMBUF(fs);
    cce8:	80 e0       	ldi	r24, 0x00	; 0
    ccea:	92 e0       	ldi	r25, 0x02	; 2
    ccec:	cf d3       	rcall	.+1950   	; 0xd48c <ff_memalloc>
    ccee:	5c 01       	movw	r10, r24
    ccf0:	00 97       	sbiw	r24, 0x00	; 0
    ccf2:	09 f4       	brne	.+2      	; 0xccf6 <f_unlink+0x46>
    ccf4:	49 c0       	rjmp	.+146    	; 0xcd88 <f_unlink+0xd8>
    ccf6:	6f 96       	adiw	r28, 0x1f	; 31
    ccf8:	ee ad       	ldd	r30, Y+62	; 0x3e
    ccfa:	ff ad       	ldd	r31, Y+63	; 0x3f
    ccfc:	6f 97       	sbiw	r28, 0x1f	; 31
    ccfe:	94 87       	std	Z+12, r25	; 0x0c
    cd00:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);		/* Follow the file path */
    cd02:	a1 96       	adiw	r28, 0x21	; 33
    cd04:	6e ad       	ldd	r22, Y+62	; 0x3e
    cd06:	7f ad       	ldd	r23, Y+63	; 0x3f
    cd08:	a1 97       	sbiw	r28, 0x21	; 33
    cd0a:	ce 01       	movw	r24, r28
    cd0c:	8f 96       	adiw	r24, 0x2f	; 47
    cd0e:	0e 94 83 58 	call	0xb106	; 0xb106 <follow_path>
    cd12:	8c 01       	movw	r16, r24
		if (FF_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
    cd14:	89 2b       	or	r24, r25
    cd16:	a1 f5       	brne	.+104    	; 0xcd80 <f_unlink+0xd0>
    cd18:	67 96       	adiw	r28, 0x17	; 23
    cd1a:	8f ad       	ldd	r24, Y+63	; 0x3f
    cd1c:	67 97       	sbiw	r28, 0x17	; 23
    cd1e:	85 fd       	sbrc	r24, 5
    cd20:	36 c0       	rjmp	.+108    	; 0xcd8e <f_unlink+0xde>
		}
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
    cd22:	87 fd       	sbrc	r24, 7
    cd24:	34 c0       	rjmp	.+104    	; 0xcd8e <f_unlink+0xde>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
			} else {
				if (dj.obj.attr & AM_RDO) {
    cd26:	9b a8       	ldd	r9, Y+51	; 0x33
    cd28:	90 fc       	sbrc	r9, 0
    cd2a:	40 c0       	rjmp	.+128    	; 0xcdac <f_unlink+0xfc>
					init_alloc_info(fs, &obj);
					dclst = obj.sclust;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
    cd2c:	6f 96       	adiw	r28, 0x1f	; 31
    cd2e:	0e ad       	ldd	r16, Y+62	; 0x3e
    cd30:	1f ad       	ldd	r17, Y+63	; 0x3f
    cd32:	6f 97       	sbiw	r28, 0x1f	; 31
    cd34:	2b 96       	adiw	r28, 0x0b	; 11
    cd36:	6e ad       	ldd	r22, Y+62	; 0x3e
    cd38:	7f ad       	ldd	r23, Y+63	; 0x3f
    cd3a:	2b 97       	sbiw	r28, 0x0b	; 11
    cd3c:	f8 01       	movw	r30, r16
    cd3e:	80 81       	ld	r24, Z
    cd40:	0e 94 2a 4b 	call	0x9654	; 0x9654 <ld_clust.isra.4>
    cd44:	6b 01       	movw	r12, r22
    cd46:	7c 01       	movw	r14, r24
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
    cd48:	94 fe       	sbrs	r9, 4
    cd4a:	33 c0       	rjmp	.+102    	; 0xcdb2 <f_unlink+0x102>
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
    cd4c:	f8 01       	movw	r30, r16
    cd4e:	85 89       	ldd	r24, Z+21	; 0x15
    cd50:	96 89       	ldd	r25, Z+22	; 0x16
    cd52:	a7 89       	ldd	r26, Z+23	; 0x17
    cd54:	b0 8d       	ldd	r27, Z+24	; 0x18
    cd56:	c8 16       	cp	r12, r24
    cd58:	d9 06       	cpc	r13, r25
    cd5a:	ea 06       	cpc	r14, r26
    cd5c:	fb 06       	cpc	r15, r27
    cd5e:	31 f1       	breq	.+76     	; 0xcdac <f_unlink+0xfc>
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;				/* Open the sub-directory */
    cd60:	1a 83       	std	Y+2, r17	; 0x02
    cd62:	09 83       	std	Y+1, r16	; 0x01
						sdj.obj.sclust = dclst;
    cd64:	cf 82       	std	Y+7, r12	; 0x07
    cd66:	d8 86       	std	Y+8, r13	; 0x08
    cd68:	e9 86       	std	Y+9, r14	; 0x09
    cd6a:	fa 86       	std	Y+10, r15	; 0x0a
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
    cd6c:	40 e0       	ldi	r20, 0x00	; 0
    cd6e:	50 e0       	ldi	r21, 0x00	; 0
    cd70:	ba 01       	movw	r22, r20
    cd72:	ce 01       	movw	r24, r28
    cd74:	01 96       	adiw	r24, 0x01	; 1
    cd76:	0e 94 3d 51 	call	0xa27a	; 0xa27a <dir_sdi>
    cd7a:	8c 01       	movw	r16, r24
						if (res == FR_OK) {
    cd7c:	89 2b       	or	r24, r25
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    cd7e:	51 f0       	breq	.+20     	; 0xcd94 <f_unlink+0xe4>
    cd80:	c5 01       	movw	r24, r10
    cd82:	87 d3       	rcall	.+1806   	; 0xd492 <ff_memfree>
    cd84:	c8 01       	movw	r24, r16

	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    cd86:	36 c0       	rjmp	.+108    	; 0xcdf4 <f_unlink+0x144>
    cd88:	81 e1       	ldi	r24, 0x11	; 17
    cd8a:	90 e0       	ldi	r25, 0x00	; 0
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
    cd8c:	33 c0       	rjmp	.+102    	; 0xcdf4 <f_unlink+0x144>
    cd8e:	06 e0       	ldi	r16, 0x06	; 6
    cd90:	10 e0       	ldi	r17, 0x00	; 0
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
						if (res == FR_OK) {
							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
    cd92:	f6 cf       	rjmp	.-20     	; 0xcd80 <f_unlink+0xd0>
    cd94:	60 e0       	ldi	r22, 0x00	; 0
    cd96:	70 e0       	ldi	r23, 0x00	; 0
    cd98:	ce 01       	movw	r24, r28
    cd9a:	01 96       	adiw	r24, 0x01	; 1
    cd9c:	0e 94 d6 54 	call	0xa9ac	; 0xa9ac <dir_read>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
    cda0:	8c 01       	movw	r16, r24
    cda2:	00 97       	sbiw	r24, 0x00	; 0
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
    cda4:	19 f0       	breq	.+6      	; 0xcdac <f_unlink+0xfc>
    cda6:	04 97       	sbiw	r24, 0x04	; 4
    cda8:	21 f0       	breq	.+8      	; 0xcdb2 <f_unlink+0x102>
					dclst = ld_clust(fs, dj.dir);
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
						res = FR_DENIED;
    cdaa:	ea cf       	rjmp	.-44     	; 0xcd80 <f_unlink+0xd0>
    cdac:	07 e0       	ldi	r16, 0x07	; 7
    cdae:	10 e0       	ldi	r17, 0x00	; 0
						}
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);			/* Remove the directory entry */
    cdb0:	e7 cf       	rjmp	.-50     	; 0xcd80 <f_unlink+0xd0>
    cdb2:	ce 01       	movw	r24, r28
    cdb4:	8f 96       	adiw	r24, 0x2f	; 47
    cdb6:	0e 94 9f 55 	call	0xab3e	; 0xab3e <dir_remove>
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
    cdba:	8c 01       	movw	r16, r24
    cdbc:	89 2b       	or	r24, r25
    cdbe:	01 f7       	brne	.-64     	; 0xcd80 <f_unlink+0xd0>
    cdc0:	c1 14       	cp	r12, r1
    cdc2:	d1 04       	cpc	r13, r1
    cdc4:	e1 04       	cpc	r14, r1
    cdc6:	f1 04       	cpc	r15, r1
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    cdc8:	41 f4       	brne	.+16     	; 0xcdda <f_unlink+0x12a>
    cdca:	6f 96       	adiw	r28, 0x1f	; 31
    cdcc:	8e ad       	ldd	r24, Y+62	; 0x3e
    cdce:	9f ad       	ldd	r25, Y+63	; 0x3f
    cdd0:	6f 97       	sbiw	r28, 0x1f	; 31
    cdd2:	0e 94 9f 4b 	call	0x973e	; 0x973e <sync_fs>
    cdd6:	8c 01       	movw	r16, r24
				res = dir_remove(&dj);			/* Remove the directory entry */
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
#if FF_FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
    cdd8:	d3 cf       	rjmp	.-90     	; 0xcd80 <f_unlink+0xd0>
    cdda:	00 e0       	ldi	r16, 0x00	; 0
    cddc:	10 e0       	ldi	r17, 0x00	; 0
    cdde:	98 01       	movw	r18, r16
    cde0:	b7 01       	movw	r22, r14
    cde2:	a6 01       	movw	r20, r12
    cde4:	ce 01       	movw	r24, r28
    cde6:	8f 96       	adiw	r24, 0x2f	; 47
    cde8:	0e 94 24 53 	call	0xa648	; 0xa648 <remove_chain>
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    cdec:	8c 01       	movw	r16, r24
    cdee:	89 2b       	or	r24, r25
    cdf0:	39 f6       	brne	.-114    	; 0xcd80 <f_unlink+0xd0>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cdf2:	eb cf       	rjmp	.-42     	; 0xcdca <f_unlink+0x11a>
    cdf4:	c0 5a       	subi	r28, 0xA0	; 160
    cdf6:	df 4f       	sbci	r29, 0xFF	; 255
    cdf8:	eb e0       	ldi	r30, 0x0B	; 11
    cdfa:	0c 94 eb e3 	jmp	0x1c7d6	; 0x1c7d6 <__epilogue_restores__+0xe>

0000cdfe <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
    cdfe:	a0 e4       	ldi	r26, 0x40	; 64
    ce00:	b0 e0       	ldi	r27, 0x00	; 0
    ce02:	e5 e0       	ldi	r30, 0x05	; 5
    ce04:	f7 e6       	ldi	r31, 0x67	; 103
    ce06:	0c 94 ca e3 	jmp	0x1c794	; 0x1c794 <__prologue_saves__+0x4>
    ce0a:	21 96       	adiw	r28, 0x01	; 1
    ce0c:	9f af       	std	Y+63, r25	; 0x3f
    ce0e:	8e af       	std	Y+62, r24	; 0x3e
    ce10:	21 97       	sbiw	r28, 0x01	; 1
	FATFS *fs;
	DWORD dcl, pcl, tm;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    ce12:	42 e0       	ldi	r20, 0x02	; 2
    ce14:	be 01       	movw	r22, r28
    ce16:	63 5c       	subi	r22, 0xC3	; 195
    ce18:	7f 4f       	sbci	r23, 0xFF	; 255
    ce1a:	ce 01       	movw	r24, r28
    ce1c:	cf 96       	adiw	r24, 0x3f	; 63
    ce1e:	0e 94 34 4d 	call	0x9a68	; 0x9a68 <mount_volume>
	if (res == FR_OK) {
    ce22:	00 97       	sbiw	r24, 0x00	; 0
    ce24:	09 f0       	breq	.+2      	; 0xce28 <f_mkdir+0x2a>
    ce26:	d6 c0       	rjmp	.+428    	; 0xcfd4 <f_mkdir+0x1d6>
		dj.obj.fs = fs;
    ce28:	8d ad       	ldd	r24, Y+61	; 0x3d
    ce2a:	9e ad       	ldd	r25, Y+62	; 0x3e
    ce2c:	9a 83       	std	Y+2, r25	; 0x02
    ce2e:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    ce30:	80 e0       	ldi	r24, 0x00	; 0
    ce32:	92 e0       	ldi	r25, 0x02	; 2
    ce34:	2b d3       	rcall	.+1622   	; 0xd48c <ff_memalloc>
    ce36:	6c 01       	movw	r12, r24
    ce38:	00 97       	sbiw	r24, 0x00	; 0
    ce3a:	e9 f0       	breq	.+58     	; 0xce76 <f_mkdir+0x78>
    ce3c:	ed ad       	ldd	r30, Y+61	; 0x3d
    ce3e:	fe ad       	ldd	r31, Y+62	; 0x3e
    ce40:	94 87       	std	Z+12, r25	; 0x0c
    ce42:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);			/* Follow the file path */
    ce44:	21 96       	adiw	r28, 0x01	; 1
    ce46:	6e ad       	ldd	r22, Y+62	; 0x3e
    ce48:	7f ad       	ldd	r23, Y+63	; 0x3f
    ce4a:	21 97       	sbiw	r28, 0x01	; 1
    ce4c:	ce 01       	movw	r24, r28
    ce4e:	01 96       	adiw	r24, 0x01	; 1
    ce50:	0e 94 83 58 	call	0xb106	; 0xb106 <follow_path>
    ce54:	7c 01       	movw	r14, r24
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    ce56:	89 2b       	or	r24, r25
    ce58:	89 f0       	breq	.+34     	; 0xce7c <f_mkdir+0x7e>
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
    ce5a:	84 e0       	ldi	r24, 0x04	; 4
    ce5c:	e8 16       	cp	r14, r24
    ce5e:	f1 04       	cpc	r15, r1
    ce60:	31 f4       	brne	.+12     	; 0xce6e <f_mkdir+0x70>
    ce62:	88 a5       	ldd	r24, Y+40	; 0x28
    ce64:	85 ff       	sbrs	r24, 5
    ce66:	0e c0       	rjmp	.+28     	; 0xce84 <f_mkdir+0x86>
			res = FR_INVALID_NAME;
    ce68:	26 e0       	ldi	r18, 0x06	; 6
    ce6a:	e2 2e       	mov	r14, r18
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
			}
		}
		FREE_NAMBUF();
    ce6c:	f1 2c       	mov	r15, r1
    ce6e:	c6 01       	movw	r24, r12
    ce70:	10 d3       	rcall	.+1568   	; 0xd492 <ff_memfree>
    ce72:	c7 01       	movw	r24, r14


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    ce74:	af c0       	rjmp	.+350    	; 0xcfd4 <f_mkdir+0x1d6>
    ce76:	81 e1       	ldi	r24, 0x11	; 17
    ce78:	90 e0       	ldi	r25, 0x00	; 0
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    ce7a:	ac c0       	rjmp	.+344    	; 0xcfd4 <f_mkdir+0x1d6>
    ce7c:	38 e0       	ldi	r19, 0x08	; 8
    ce7e:	e3 2e       	mov	r14, r19
    ce80:	f1 2c       	mov	r15, r1
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
    ce82:	f5 cf       	rjmp	.-22     	; 0xce6e <f_mkdir+0x70>
    ce84:	8d ad       	ldd	r24, Y+61	; 0x3d
    ce86:	9e ad       	ldd	r25, Y+62	; 0x3e
    ce88:	98 ab       	std	Y+48, r25	; 0x30
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
    ce8a:	8f a7       	std	Y+47, r24	; 0x2f
    ce8c:	40 e0       	ldi	r20, 0x00	; 0
    ce8e:	50 e0       	ldi	r21, 0x00	; 0
    ce90:	ba 01       	movw	r22, r20
    ce92:	ce 01       	movw	r24, r28
    ce94:	8f 96       	adiw	r24, 0x2f	; 47
    ce96:	0e 94 fe 51 	call	0xa3fc	; 0xa3fc <create_chain>
    ce9a:	4b 01       	movw	r8, r22
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    ce9c:	5c 01       	movw	r10, r24
    ce9e:	67 2b       	or	r22, r23
    cea0:	68 2b       	or	r22, r24
    cea2:	69 2b       	or	r22, r25
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    cea4:	09 f1       	breq	.+66     	; 0xcee8 <f_mkdir+0xea>
    cea6:	e1 e0       	ldi	r30, 0x01	; 1
    cea8:	8e 16       	cp	r8, r30
    ceaa:	91 04       	cpc	r9, r1
    ceac:	a1 04       	cpc	r10, r1
    ceae:	b1 04       	cpc	r11, r1
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
    ceb0:	61 f0       	breq	.+24     	; 0xceca <f_mkdir+0xcc>
    ceb2:	ff ef       	ldi	r31, 0xFF	; 255
    ceb4:	8f 16       	cp	r8, r31
    ceb6:	9f 06       	cpc	r9, r31
    ceb8:	af 06       	cpc	r10, r31
    ceba:	bf 06       	cpc	r11, r31
			tm = GET_FATTIME();
    cebc:	d9 f4       	brne	.+54     	; 0xcef4 <f_mkdir+0xf6>
    cebe:	0e 94 41 71 	call	0xe282	; 0xe282 <get_fattime>
    cec2:	ee 24       	eor	r14, r14
    cec4:	e3 94       	inc	r14
    cec6:	f1 2c       	mov	r15, r1
    cec8:	05 c0       	rjmp	.+10     	; 0xced4 <f_mkdir+0xd6>
    ceca:	0e 94 41 71 	call	0xe282	; 0xe282 <get_fattime>
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    cece:	92 e0       	ldi	r25, 0x02	; 2
    ced0:	e9 2e       	mov	r14, r25
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
    ced2:	f1 2c       	mov	r15, r1
    ced4:	00 e0       	ldi	r16, 0x00	; 0
    ced6:	10 e0       	ldi	r17, 0x00	; 0
    ced8:	98 01       	movw	r18, r16
    ceda:	b5 01       	movw	r22, r10
    cedc:	a4 01       	movw	r20, r8
    cede:	ce 01       	movw	r24, r28
    cee0:	8f 96       	adiw	r24, 0x2f	; 47
    cee2:	0e 94 24 53 	call	0xa648	; 0xa648 <remove_chain>
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
			tm = GET_FATTIME();
    cee6:	c3 cf       	rjmp	.-122    	; 0xce6e <f_mkdir+0x70>
    cee8:	0e 94 41 71 	call	0xe282	; 0xe282 <get_fattime>
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    ceec:	87 e0       	ldi	r24, 0x07	; 7
    ceee:	e8 2e       	mov	r14, r24
    cef0:	f1 2c       	mov	r15, r1
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
			tm = GET_FATTIME();
    cef2:	f0 cf       	rjmp	.-32     	; 0xced4 <f_mkdir+0xd6>
    cef4:	0e 94 41 71 	call	0xe282	; 0xe282 <get_fattime>
    cef8:	2b 01       	movw	r4, r22
			if (res == FR_OK) {
				res = dir_clear(fs, dcl);		/* Clean up the new table */
    cefa:	3c 01       	movw	r6, r24
    cefc:	b5 01       	movw	r22, r10
    cefe:	a4 01       	movw	r20, r8
    cf00:	8d ad       	ldd	r24, Y+61	; 0x3d
    cf02:	9e ad       	ldd	r25, Y+62	; 0x3e
    cf04:	0e 94 11 4c 	call	0x9822	; 0x9822 <dir_clear>
				if (res == FR_OK) {
    cf08:	7c 01       	movw	r14, r24
    cf0a:	89 2b       	or	r24, r25
					if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* Create dot entries (FAT only) */
						mem_set(fs->win + DIR_Name, ' ', 11);	/* Create "." entry */
    cf0c:	19 f7       	brne	.-58     	; 0xced4 <f_mkdir+0xd6>
    cf0e:	8d ad       	ldd	r24, Y+61	; 0x3d
    cf10:	9e ad       	ldd	r25, Y+62	; 0x3e
    cf12:	4b e0       	ldi	r20, 0x0B	; 11
    cf14:	50 e0       	ldi	r21, 0x00	; 0
    cf16:	60 e2       	ldi	r22, 0x20	; 32
    cf18:	70 e0       	ldi	r23, 0x00	; 0
    cf1a:	c5 96       	adiw	r24, 0x35	; 53
    cf1c:	0e 94 f9 47 	call	0x8ff2	; 0x8ff2 <mem_set>
						fs->win[DIR_Name] = '.';
    cf20:	8d ad       	ldd	r24, Y+61	; 0x3d
    cf22:	9e ad       	ldd	r25, Y+62	; 0x3e
    cf24:	1e e2       	ldi	r17, 0x2E	; 46
    cf26:	fc 01       	movw	r30, r24
						fs->win[DIR_Attr] = AM_DIR;
    cf28:	15 ab       	std	Z+53, r17	; 0x35
    cf2a:	e0 5c       	subi	r30, 0xC0	; 192
    cf2c:	ff 4f       	sbci	r31, 0xFF	; 255
    cf2e:	20 e1       	ldi	r18, 0x10	; 16
						st_dword(fs->win + DIR_ModTime, tm);
    cf30:	20 83       	st	Z, r18
    cf32:	b3 01       	movw	r22, r6
    cf34:	a2 01       	movw	r20, r4
    cf36:	85 5b       	subi	r24, 0xB5	; 181
    cf38:	9f 4f       	sbci	r25, 0xFF	; 255
    cf3a:	0e 94 f3 47 	call	0x8fe6	; 0x8fe6 <st_dword>
						st_clust(fs, fs->win, dcl);
    cf3e:	8d ad       	ldd	r24, Y+61	; 0x3d
    cf40:	9e ad       	ldd	r25, Y+62	; 0x3e
    cf42:	bc 01       	movw	r22, r24
    cf44:	6b 5c       	subi	r22, 0xCB	; 203
    cf46:	7f 4f       	sbci	r23, 0xFF	; 255
    cf48:	a5 01       	movw	r20, r10
    cf4a:	94 01       	movw	r18, r8
    cf4c:	0e 94 3f 4b 	call	0x967e	; 0x967e <st_clust.isra.5>
						mem_cpy(fs->win + SZDIRE, fs->win, SZDIRE); /* Create ".." entry */
    cf50:	8d ad       	ldd	r24, Y+61	; 0x3d
    cf52:	9e ad       	ldd	r25, Y+62	; 0x3e
    cf54:	bc 01       	movw	r22, r24
    cf56:	6b 5c       	subi	r22, 0xCB	; 203
    cf58:	7f 4f       	sbci	r23, 0xFF	; 255
    cf5a:	40 e2       	ldi	r20, 0x20	; 32
    cf5c:	50 e0       	ldi	r21, 0x00	; 0
    cf5e:	8b 5a       	subi	r24, 0xAB	; 171
    cf60:	9f 4f       	sbci	r25, 0xFF	; 255
    cf62:	0e 94 62 49 	call	0x92c4	; 0x92c4 <mem_cpy.part.0>
						fs->win[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
    cf66:	8d ad       	ldd	r24, Y+61	; 0x3d
    cf68:	9e ad       	ldd	r25, Y+62	; 0x3e
    cf6a:	fc 01       	movw	r30, r24
    cf6c:	ea 5a       	subi	r30, 0xAA	; 170
    cf6e:	ff 4f       	sbci	r31, 0xFF	; 255
						st_clust(fs, fs->win + SZDIRE, pcl);
    cf70:	10 83       	st	Z, r17
    cf72:	2f 81       	ldd	r18, Y+7	; 0x07
    cf74:	38 85       	ldd	r19, Y+8	; 0x08
    cf76:	49 85       	ldd	r20, Y+9	; 0x09
    cf78:	5a 85       	ldd	r21, Y+10	; 0x0a
    cf7a:	bc 01       	movw	r22, r24
    cf7c:	6b 5a       	subi	r22, 0xAB	; 171
    cf7e:	7f 4f       	sbci	r23, 0xFF	; 255
    cf80:	0e 94 3f 4b 	call	0x967e	; 0x967e <st_clust.isra.5>
						fs->wflag = 1;
    cf84:	ed ad       	ldd	r30, Y+61	; 0x3d
    cf86:	fe ad       	ldd	r31, Y+62	; 0x3e
    cf88:	81 e0       	ldi	r24, 0x01	; 1
					}
					res = dir_register(&dj);	/* Register the object to the parent directoy */
    cf8a:	83 83       	std	Z+3, r24	; 0x03
    cf8c:	ce 01       	movw	r24, r28
    cf8e:	01 96       	adiw	r24, 0x01	; 1
    cf90:	0e 94 f5 56 	call	0xadea	; 0xadea <dir_register>
				}
			}
			if (res == FR_OK) {
    cf94:	7c 01       	movw	r14, r24
    cf96:	89 2b       	or	r24, r25
    cf98:	09 f0       	breq	.+2      	; 0xcf9c <f_mkdir+0x19e>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					st_dword(dj.dir + DIR_ModTime, tm);	/* Created time */
    cf9a:	9c cf       	rjmp	.-200    	; 0xced4 <f_mkdir+0xd6>
    cf9c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    cf9e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    cfa0:	b3 01       	movw	r22, r6
    cfa2:	a2 01       	movw	r20, r4
    cfa4:	46 96       	adiw	r24, 0x16	; 22
    cfa6:	0e 94 f3 47 	call	0x8fe6	; 0x8fe6 <st_dword>
					st_clust(fs, dj.dir, dcl);			/* Table start cluster */
    cfaa:	6b 8d       	ldd	r22, Y+27	; 0x1b
    cfac:	7c 8d       	ldd	r23, Y+28	; 0x1c
    cfae:	a5 01       	movw	r20, r10
    cfb0:	94 01       	movw	r18, r8
    cfb2:	8d ad       	ldd	r24, Y+61	; 0x3d
    cfb4:	9e ad       	ldd	r25, Y+62	; 0x3e
    cfb6:	0e 94 3f 4b 	call	0x967e	; 0x967e <st_clust.isra.5>
					dj.dir[DIR_Attr] = AM_DIR;			/* Attribute */
    cfba:	eb 8d       	ldd	r30, Y+27	; 0x1b
    cfbc:	fc 8d       	ldd	r31, Y+28	; 0x1c
    cfbe:	80 e1       	ldi	r24, 0x10	; 16
					fs->wflag = 1;
    cfc0:	83 87       	std	Z+11, r24	; 0x0b
    cfc2:	8d ad       	ldd	r24, Y+61	; 0x3d
    cfc4:	9e ad       	ldd	r25, Y+62	; 0x3e
    cfc6:	21 e0       	ldi	r18, 0x01	; 1
    cfc8:	fc 01       	movw	r30, r24
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
    cfca:	23 83       	std	Z+3, r18	; 0x03
    cfcc:	0e 94 9f 4b 	call	0x973e	; 0x973e <sync_fs>
    cfd0:	7c 01       	movw	r14, r24
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cfd2:	4d cf       	rjmp	.-358    	; 0xce6e <f_mkdir+0x70>
    cfd4:	c0 5c       	subi	r28, 0xC0	; 192
    cfd6:	df 4f       	sbci	r29, 0xFF	; 255
    cfd8:	e0 e1       	ldi	r30, 0x10	; 16
    cfda:	0c 94 e6 e3 	jmp	0x1c7cc	; 0x1c7cc <__epilogue_restores__+0x4>

0000cfde <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
    cfde:	a2 e8       	ldi	r26, 0x82	; 130
    cfe0:	b0 e0       	ldi	r27, 0x00	; 0
    cfe2:	e5 ef       	ldi	r30, 0xF5	; 245
    cfe4:	f7 e6       	ldi	r31, 0x67	; 103
    cfe6:	0c 94 d1 e3 	jmp	0x1c7a2	; 0x1c7a2 <__prologue_saves__+0x12>
    cfea:	c1 58       	subi	r28, 0x81	; 129
    cfec:	df 4f       	sbci	r29, 0xFF	; 255
    cfee:	99 83       	std	Y+1, r25	; 0x01
    cff0:	88 83       	st	Y, r24
    cff2:	cf 57       	subi	r28, 0x7F	; 127
    cff4:	d0 40       	sbci	r29, 0x00	; 0
    cff6:	cf 57       	subi	r28, 0x7F	; 127
    cff8:	df 4f       	sbci	r29, 0xFF	; 255
    cffa:	79 83       	std	Y+1, r23	; 0x01
    cffc:	68 83       	st	Y, r22
    cffe:	c1 58       	subi	r28, 0x81	; 129
    d000:	d0 40       	sbci	r29, 0x00	; 0
	BYTE buf[FF_FS_EXFAT ? SZDIRE * 2 : SZDIRE], *dir;
	LBA_t sect;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
    d002:	ce 01       	movw	r24, r28
    d004:	8f 57       	subi	r24, 0x7F	; 127
    d006:	9f 4f       	sbci	r25, 0xFF	; 255
    d008:	0e 94 0a 49 	call	0x9214	; 0x9214 <get_ldnumber>
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
    d00c:	42 e0       	ldi	r20, 0x02	; 2
    d00e:	be 01       	movw	r22, r28
    d010:	63 58       	subi	r22, 0x83	; 131
    d012:	7f 4f       	sbci	r23, 0xFF	; 255
    d014:	ce 01       	movw	r24, r28
    d016:	81 58       	subi	r24, 0x81	; 129
    d018:	9f 4f       	sbci	r25, 0xFF	; 255
    d01a:	0e 94 34 4d 	call	0x9a68	; 0x9a68 <mount_volume>
	if (res == FR_OK) {
    d01e:	00 97       	sbiw	r24, 0x00	; 0
    d020:	09 f0       	breq	.+2      	; 0xd024 <f_rename+0x46>
    d022:	ed c0       	rjmp	.+474    	; 0xd1fe <f_rename+0x220>
		djo.obj.fs = fs;
    d024:	ef 96       	adiw	r28, 0x3f	; 63
    d026:	8e ad       	ldd	r24, Y+62	; 0x3e
    d028:	9f ad       	ldd	r25, Y+63	; 0x3f
    d02a:	ef 97       	sbiw	r28, 0x3f	; 63
    d02c:	98 ab       	std	Y+48, r25	; 0x30
    d02e:	8f a7       	std	Y+47, r24	; 0x2f
		INIT_NAMBUF(fs);
    d030:	80 e0       	ldi	r24, 0x00	; 0
    d032:	92 e0       	ldi	r25, 0x02	; 2
    d034:	2b d2       	rcall	.+1110   	; 0xd48c <ff_memalloc>
    d036:	6c 01       	movw	r12, r24
    d038:	00 97       	sbiw	r24, 0x00	; 0
    d03a:	f1 f0       	breq	.+60     	; 0xd078 <f_rename+0x9a>
    d03c:	ef 96       	adiw	r28, 0x3f	; 63
    d03e:	ee ad       	ldd	r30, Y+62	; 0x3e
    d040:	ff ad       	ldd	r31, Y+63	; 0x3f
    d042:	ef 97       	sbiw	r28, 0x3f	; 63
    d044:	94 87       	std	Z+12, r25	; 0x0c
    d046:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&djo, path_old);		/* Check old object */
    d048:	c1 58       	subi	r28, 0x81	; 129
    d04a:	df 4f       	sbci	r29, 0xFF	; 255
    d04c:	68 81       	ld	r22, Y
    d04e:	79 81       	ldd	r23, Y+1	; 0x01
    d050:	cf 57       	subi	r28, 0x7F	; 127
    d052:	d0 40       	sbci	r29, 0x00	; 0
    d054:	ce 01       	movw	r24, r28
    d056:	8f 96       	adiw	r24, 0x2f	; 47
    d058:	0e 94 83 58 	call	0xb106	; 0xb106 <follow_path>
    d05c:	8c 01       	movw	r16, r24
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
    d05e:	89 2b       	or	r24, r25
    d060:	39 f4       	brne	.+14     	; 0xd070 <f_rename+0x92>
    d062:	67 96       	adiw	r28, 0x17	; 23
    d064:	8f ad       	ldd	r24, Y+63	; 0x3f
    d066:	67 97       	sbiw	r28, 0x17	; 23
    d068:	80 7a       	andi	r24, 0xA0	; 160
    d06a:	49 f0       	breq	.+18     	; 0xd07e <f_rename+0xa0>
    d06c:	06 e0       	ldi	r16, 0x06	; 6
					res = sync_fs(fs);
				}
			}
/* End of the critical section */
		}
		FREE_NAMBUF();
    d06e:	10 e0       	ldi	r17, 0x00	; 0
    d070:	c6 01       	movw	r24, r12
    d072:	0f d2       	rcall	.+1054   	; 0xd492 <ff_memfree>
    d074:	c8 01       	movw	r24, r16

	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
	if (res == FR_OK) {
		djo.obj.fs = fs;
		INIT_NAMBUF(fs);
    d076:	c3 c0       	rjmp	.+390    	; 0xd1fe <f_rename+0x220>
    d078:	81 e1       	ldi	r24, 0x11	; 17
    d07a:	90 e0       	ldi	r25, 0x00	; 0
    d07c:	c0 c0       	rjmp	.+384    	; 0xd1fe <f_rename+0x220>
    d07e:	2b 96       	adiw	r28, 0x0b	; 11
    d080:	6e ad       	ldd	r22, Y+62	; 0x3e
    d082:	7f ad       	ldd	r23, Y+63	; 0x3f
    d084:	2b 97       	sbiw	r28, 0x0b	; 11
    d086:	40 e2       	ldi	r20, 0x20	; 32
    d088:	50 e0       	ldi	r21, 0x00	; 0
    d08a:	ce 01       	movw	r24, r28
    d08c:	83 5a       	subi	r24, 0xA3	; 163
    d08e:	9f 4f       	sbci	r25, 0xFF	; 255
    d090:	0e 94 62 49 	call	0x92c4	; 0x92c4 <mem_cpy.part.0>
    d094:	4e e2       	ldi	r20, 0x2E	; 46
    d096:	50 e0       	ldi	r21, 0x00	; 0
    d098:	be 01       	movw	r22, r28
    d09a:	61 5d       	subi	r22, 0xD1	; 209
    d09c:	7f 4f       	sbci	r23, 0xFF	; 255
    d09e:	ce 01       	movw	r24, r28
    d0a0:	01 96       	adiw	r24, 0x01	; 1
    d0a2:	0e 94 62 49 	call	0x92c4	; 0x92c4 <mem_cpy.part.0>
			} else
#endif
			{	/* At FAT/FAT32 volume */
				mem_cpy(buf, djo.dir, SZDIRE);			/* Save directory entry of the object */
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
    d0a6:	cf 57       	subi	r28, 0x7F	; 127
    d0a8:	df 4f       	sbci	r29, 0xFF	; 255
    d0aa:	68 81       	ld	r22, Y
    d0ac:	79 81       	ldd	r23, Y+1	; 0x01
    d0ae:	c1 58       	subi	r28, 0x81	; 129
    d0b0:	d0 40       	sbci	r29, 0x00	; 0
    d0b2:	ce 01       	movw	r24, r28
    d0b4:	01 96       	adiw	r24, 0x01	; 1
    d0b6:	0e 94 83 58 	call	0xb106	; 0xb106 <follow_path>
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
    d0ba:	8c 01       	movw	r16, r24
    d0bc:	89 2b       	or	r24, r25
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
    d0be:	f9 f4       	brne	.+62     	; 0xd0fe <f_rename+0x120>
    d0c0:	4f 81       	ldd	r20, Y+7	; 0x07
    d0c2:	58 85       	ldd	r21, Y+8	; 0x08
    d0c4:	69 85       	ldd	r22, Y+9	; 0x09
    d0c6:	7a 85       	ldd	r23, Y+10	; 0x0a
    d0c8:	8d a9       	ldd	r24, Y+53	; 0x35
    d0ca:	9e a9       	ldd	r25, Y+54	; 0x36
    d0cc:	af a9       	ldd	r26, Y+55	; 0x37
    d0ce:	b8 ad       	ldd	r27, Y+56	; 0x38
    d0d0:	48 17       	cp	r20, r24
    d0d2:	59 07       	cpc	r21, r25
    d0d4:	6a 07       	cpc	r22, r26
    d0d6:	7b 07       	cpc	r23, r27
    d0d8:	09 f0       	breq	.+2      	; 0xd0dc <f_rename+0xfe>
    d0da:	8b c0       	rjmp	.+278    	; 0xd1f2 <f_rename+0x214>
    d0dc:	4f 85       	ldd	r20, Y+15	; 0x0f
    d0de:	58 89       	ldd	r21, Y+16	; 0x10
    d0e0:	69 89       	ldd	r22, Y+17	; 0x11
    d0e2:	7a 89       	ldd	r23, Y+18	; 0x12
    d0e4:	21 96       	adiw	r28, 0x01	; 1
    d0e6:	8c ad       	ldd	r24, Y+60	; 0x3c
    d0e8:	9d ad       	ldd	r25, Y+61	; 0x3d
    d0ea:	ae ad       	ldd	r26, Y+62	; 0x3e
    d0ec:	bf ad       	ldd	r27, Y+63	; 0x3f
    d0ee:	21 97       	sbiw	r28, 0x01	; 1
    d0f0:	48 17       	cp	r20, r24
    d0f2:	59 07       	cpc	r21, r25
    d0f4:	6a 07       	cpc	r22, r26
    d0f6:	7b 07       	cpc	r23, r27
    d0f8:	09 f0       	breq	.+2      	; 0xd0fc <f_rename+0x11e>
    d0fa:	7b c0       	rjmp	.+246    	; 0xd1f2 <f_rename+0x214>
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
    d0fc:	04 c0       	rjmp	.+8      	; 0xd106 <f_rename+0x128>
    d0fe:	04 30       	cpi	r16, 0x04	; 4
    d100:	11 05       	cpc	r17, r1
    d102:	09 f0       	breq	.+2      	; 0xd106 <f_rename+0x128>
					res = dir_register(&djn);			/* Register the new entry */
    d104:	b5 cf       	rjmp	.-150    	; 0xd070 <f_rename+0x92>
    d106:	ce 01       	movw	r24, r28
    d108:	01 96       	adiw	r24, 0x01	; 1
    d10a:	0e 94 f5 56 	call	0xadea	; 0xadea <dir_register>
					if (res == FR_OK) {
    d10e:	8c 01       	movw	r16, r24
    d110:	89 2b       	or	r24, r25
    d112:	09 f0       	breq	.+2      	; 0xd116 <f_rename+0x138>
						dir = djn.dir;					/* Copy directory entry of the object except name */
    d114:	ad cf       	rjmp	.-166    	; 0xd070 <f_rename+0x92>
    d116:	0b 8d       	ldd	r16, Y+27	; 0x1b
    d118:	1c 8d       	ldd	r17, Y+28	; 0x1c
    d11a:	6d e5       	ldi	r22, 0x5D	; 93
    d11c:	70 e0       	ldi	r23, 0x00	; 0
    d11e:	6c 0f       	add	r22, r28
    d120:	7d 1f       	adc	r23, r29
    d122:	63 5f       	subi	r22, 0xF3	; 243
    d124:	7f 4f       	sbci	r23, 0xFF	; 255
    d126:	43 e1       	ldi	r20, 0x13	; 19
    d128:	50 e0       	ldi	r21, 0x00	; 0
    d12a:	c8 01       	movw	r24, r16
    d12c:	0d 96       	adiw	r24, 0x0d	; 13
    d12e:	0e 94 62 49 	call	0x92c4	; 0x92c4 <mem_cpy.part.0>
						mem_cpy(dir + 13, buf + 13, SZDIRE - 13);
						dir[DIR_Attr] = buf[DIR_Attr];
    d132:	a9 96       	adiw	r28, 0x29	; 41
    d134:	8f ad       	ldd	r24, Y+63	; 0x3f
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
    d136:	a9 97       	sbiw	r28, 0x29	; 41
    d138:	84 ff       	sbrs	r24, 4
    d13a:	80 62       	ori	r24, 0x20	; 32
    d13c:	f8 01       	movw	r30, r16
						fs->wflag = 1;
    d13e:	83 87       	std	Z+11, r24	; 0x0b
    d140:	ef 96       	adiw	r28, 0x3f	; 63
    d142:	ee ac       	ldd	r14, Y+62	; 0x3e
    d144:	ff ac       	ldd	r15, Y+63	; 0x3f
    d146:	ef 97       	sbiw	r28, 0x3f	; 63
    d148:	bb 24       	eor	r11, r11
    d14a:	b3 94       	inc	r11
    d14c:	f7 01       	movw	r30, r14
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
    d14e:	b3 82       	std	Z+3, r11	; 0x03
    d150:	f8 01       	movw	r30, r16
    d152:	83 85       	ldd	r24, Z+11	; 0x0b
    d154:	84 ff       	sbrs	r24, 4
    d156:	3d c0       	rjmp	.+122    	; 0xd1d2 <f_rename+0x1f4>
    d158:	4d a9       	ldd	r20, Y+53	; 0x35
    d15a:	5e a9       	ldd	r21, Y+54	; 0x36
    d15c:	6f a9       	ldd	r22, Y+55	; 0x37
    d15e:	78 ad       	ldd	r23, Y+56	; 0x38
    d160:	8f 81       	ldd	r24, Y+7	; 0x07
    d162:	98 85       	ldd	r25, Y+8	; 0x08
    d164:	a9 85       	ldd	r26, Y+9	; 0x09
    d166:	ba 85       	ldd	r27, Y+10	; 0x0a
    d168:	48 17       	cp	r20, r24
    d16a:	59 07       	cpc	r21, r25
    d16c:	6a 07       	cpc	r22, r26
    d16e:	7b 07       	cpc	r23, r27
							sect = clst2sect(fs, ld_clust(fs, dir));
    d170:	81 f1       	breq	.+96     	; 0xd1d2 <f_rename+0x1f4>
    d172:	b8 01       	movw	r22, r16
    d174:	f7 01       	movw	r30, r14
    d176:	80 81       	ld	r24, Z
    d178:	0e 94 2a 4b 	call	0x9654	; 0x9654 <ld_clust.isra.4>
    d17c:	ab 01       	movw	r20, r22
    d17e:	bc 01       	movw	r22, r24
    d180:	c7 01       	movw	r24, r14
    d182:	0e 94 97 48 	call	0x912e	; 0x912e <clst2sect>
    d186:	ab 01       	movw	r20, r22
							if (sect == 0) {
    d188:	bc 01       	movw	r22, r24
    d18a:	41 15       	cp	r20, r1
    d18c:	51 05       	cpc	r21, r1
    d18e:	61 05       	cpc	r22, r1
    d190:	71 05       	cpc	r23, r1
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
    d192:	91 f1       	breq	.+100    	; 0xd1f8 <f_rename+0x21a>
    d194:	c7 01       	movw	r24, r14
    d196:	0e 94 b9 4c 	call	0x9972	; 0x9972 <move_window>
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
								if (res == FR_OK && dir[1] == '.') {
    d19a:	8c 01       	movw	r16, r24
    d19c:	89 2b       	or	r24, r25
    d19e:	09 f0       	breq	.+2      	; 0xd1a2 <f_rename+0x1c4>
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    d1a0:	67 cf       	rjmp	.-306    	; 0xd070 <f_rename+0x92>
    d1a2:	ef 96       	adiw	r28, 0x3f	; 63
    d1a4:	8e ad       	ldd	r24, Y+62	; 0x3e
    d1a6:	9f ad       	ldd	r25, Y+63	; 0x3f
								if (res == FR_OK && dir[1] == '.') {
    d1a8:	ef 97       	sbiw	r28, 0x3f	; 63
    d1aa:	fc 01       	movw	r30, r24
    d1ac:	ea 5a       	subi	r30, 0xAA	; 170
    d1ae:	ff 4f       	sbci	r31, 0xFF	; 255
    d1b0:	20 81       	ld	r18, Z
    d1b2:	2e 32       	cpi	r18, 0x2E	; 46
									st_clust(fs, dir, djn.obj.sclust);
    d1b4:	71 f4       	brne	.+28     	; 0xd1d2 <f_rename+0x1f4>
    d1b6:	2f 81       	ldd	r18, Y+7	; 0x07
    d1b8:	38 85       	ldd	r19, Y+8	; 0x08
    d1ba:	49 85       	ldd	r20, Y+9	; 0x09
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    d1bc:	5a 85       	ldd	r21, Y+10	; 0x0a
    d1be:	bc 01       	movw	r22, r24
    d1c0:	6b 5a       	subi	r22, 0xAB	; 171
								if (res == FR_OK && dir[1] == '.') {
									st_clust(fs, dir, djn.obj.sclust);
    d1c2:	7f 4f       	sbci	r23, 0xFF	; 255
    d1c4:	0e 94 3f 4b 	call	0x967e	; 0x967e <st_clust.isra.5>
									fs->wflag = 1;
    d1c8:	ef 96       	adiw	r28, 0x3f	; 63
    d1ca:	ee ad       	ldd	r30, Y+62	; 0x3e
    d1cc:	ff ad       	ldd	r31, Y+63	; 0x3f
    d1ce:	ef 97       	sbiw	r28, 0x3f	; 63
						}
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&djo);		/* Remove old entry */
    d1d0:	b3 82       	std	Z+3, r11	; 0x03
    d1d2:	ce 01       	movw	r24, r28
    d1d4:	8f 96       	adiw	r24, 0x2f	; 47
    d1d6:	0e 94 9f 55 	call	0xab3e	; 0xab3e <dir_remove>
				if (res == FR_OK) {
    d1da:	8c 01       	movw	r16, r24
    d1dc:	89 2b       	or	r24, r25
    d1de:	09 f0       	breq	.+2      	; 0xd1e2 <f_rename+0x204>
					res = sync_fs(fs);
    d1e0:	47 cf       	rjmp	.-370    	; 0xd070 <f_rename+0x92>
    d1e2:	ef 96       	adiw	r28, 0x3f	; 63
    d1e4:	8e ad       	ldd	r24, Y+62	; 0x3e
    d1e6:	9f ad       	ldd	r25, Y+63	; 0x3f
    d1e8:	ef 97       	sbiw	r28, 0x3f	; 63
    d1ea:	0e 94 9f 4b 	call	0x973e	; 0x973e <sync_fs>
    d1ee:	8c 01       	movw	r16, r24
    d1f0:	3f cf       	rjmp	.-386    	; 0xd070 <f_rename+0x92>
    d1f2:	08 e0       	ldi	r16, 0x08	; 8
    d1f4:	10 e0       	ldi	r17, 0x00	; 0
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
						fs->wflag = 1;
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
							sect = clst2sect(fs, ld_clust(fs, dir));
							if (sect == 0) {
								res = FR_INT_ERR;
    d1f6:	3c cf       	rjmp	.-392    	; 0xd070 <f_rename+0x92>
    d1f8:	02 e0       	ldi	r16, 0x02	; 2
    d1fa:	10 e0       	ldi	r17, 0x00	; 0
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    d1fc:	39 cf       	rjmp	.-398    	; 0xd070 <f_rename+0x92>
    d1fe:	ce 57       	subi	r28, 0x7E	; 126
    d200:	df 4f       	sbci	r29, 0xFF	; 255
    d202:	e9 e0       	ldi	r30, 0x09	; 9
    d204:	0c 94 ed e3 	jmp	0x1c7da	; 0x1c7da <__epilogue_restores__+0x12>

0000d208 <f_chmod>:
FRESULT f_chmod (
	const TCHAR* path,	/* Pointer to the file path */
	BYTE attr,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
    d208:	a2 e3       	ldi	r26, 0x32	; 50
    d20a:	b0 e0       	ldi	r27, 0x00	; 0
    d20c:	ea e0       	ldi	r30, 0x0A	; 10
    d20e:	f9 e6       	ldi	r31, 0x69	; 105
    d210:	0c 94 d2 e3 	jmp	0x1c7a4	; 0x1c7a4 <__prologue_saves__+0x14>
    d214:	9a ab       	std	Y+50, r25	; 0x32
    d216:	89 ab       	std	Y+49, r24	; 0x31
    d218:	e6 2e       	mov	r14, r22
    d21a:	f4 2e       	mov	r15, r20
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    d21c:	42 e0       	ldi	r20, 0x02	; 2
    d21e:	be 01       	movw	r22, r28
    d220:	61 5d       	subi	r22, 0xD1	; 209
    d222:	7f 4f       	sbci	r23, 0xFF	; 255
    d224:	ce 01       	movw	r24, r28
    d226:	c1 96       	adiw	r24, 0x31	; 49
    d228:	0e 94 34 4d 	call	0x9a68	; 0x9a68 <mount_volume>
	if (res == FR_OK) {
    d22c:	00 97       	sbiw	r24, 0x00	; 0
    d22e:	a9 f5       	brne	.+106    	; 0xd29a <f_chmod+0x92>
		dj.obj.fs = fs;
    d230:	8f a5       	ldd	r24, Y+47	; 0x2f
    d232:	98 a9       	ldd	r25, Y+48	; 0x30
    d234:	9a 83       	std	Y+2, r25	; 0x02
    d236:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    d238:	80 e0       	ldi	r24, 0x00	; 0
    d23a:	92 e0       	ldi	r25, 0x02	; 2
    d23c:	27 d1       	rcall	.+590    	; 0xd48c <ff_memalloc>
    d23e:	6c 01       	movw	r12, r24
    d240:	00 97       	sbiw	r24, 0x00	; 0
    d242:	b1 f0       	breq	.+44     	; 0xd270 <f_chmod+0x68>
    d244:	ef a5       	ldd	r30, Y+47	; 0x2f
    d246:	f8 a9       	ldd	r31, Y+48	; 0x30
    d248:	94 87       	std	Z+12, r25	; 0x0c
    d24a:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);	/* Follow the file path */
    d24c:	69 a9       	ldd	r22, Y+49	; 0x31
    d24e:	7a a9       	ldd	r23, Y+50	; 0x32
    d250:	ce 01       	movw	r24, r28
    d252:	01 96       	adiw	r24, 0x01	; 1
    d254:	0e 94 83 58 	call	0xb106	; 0xb106 <follow_path>
    d258:	8c 01       	movw	r16, r24
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
    d25a:	89 2b       	or	r24, r25
    d25c:	29 f4       	brne	.+10     	; 0xd268 <f_chmod+0x60>
    d25e:	88 a5       	ldd	r24, Y+40	; 0x28
    d260:	80 7a       	andi	r24, 0xA0	; 160
    d262:	49 f0       	breq	.+18     	; 0xd276 <f_chmod+0x6e>
    d264:	06 e0       	ldi	r16, 0x06	; 6
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    d266:	10 e0       	ldi	r17, 0x00	; 0
    d268:	c6 01       	movw	r24, r12
    d26a:	13 d1       	rcall	.+550    	; 0xd492 <ff_memfree>
    d26c:	c8 01       	movw	r24, r16


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    d26e:	15 c0       	rjmp	.+42     	; 0xd29a <f_chmod+0x92>
    d270:	81 e1       	ldi	r24, 0x11	; 17
    d272:	90 e0       	ldi	r25, 0x00	; 0
				fs->dirbuf[XDIR_Attr] = (attr & mask) | (fs->dirbuf[XDIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
				res = store_xdir(&dj);
			} else
#endif
			{
				dj.dir[DIR_Attr] = (attr & mask) | (dj.dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
    d274:	12 c0       	rjmp	.+36     	; 0xd29a <f_chmod+0x92>
    d276:	eb 8d       	ldd	r30, Y+27	; 0x1b
    d278:	fc 8d       	ldd	r31, Y+28	; 0x1c
    d27a:	83 85       	ldd	r24, Z+11	; 0x0b
    d27c:	6e 2d       	mov	r22, r14
    d27e:	68 27       	eor	r22, r24
    d280:	6f 21       	and	r22, r15
    d282:	67 72       	andi	r22, 0x27	; 39
    d284:	68 27       	eor	r22, r24
				fs->wflag = 1;
    d286:	63 87       	std	Z+11, r22	; 0x0b
    d288:	8f a5       	ldd	r24, Y+47	; 0x2f
    d28a:	98 a9       	ldd	r25, Y+48	; 0x30
    d28c:	21 e0       	ldi	r18, 0x01	; 1
    d28e:	fc 01       	movw	r30, r24
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
    d290:	23 83       	std	Z+3, r18	; 0x03
    d292:	0e 94 9f 4b 	call	0x973e	; 0x973e <sync_fs>
    d296:	8c 01       	movw	r16, r24
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    d298:	e7 cf       	rjmp	.-50     	; 0xd268 <f_chmod+0x60>
    d29a:	e2 96       	adiw	r28, 0x32	; 50
    d29c:	e8 e0       	ldi	r30, 0x08	; 8
    d29e:	0c 94 ee e3 	jmp	0x1c7dc	; 0x1c7dc <__epilogue_restores__+0x14>

0000d2a2 <f_utime>:

FRESULT f_utime (
	const TCHAR* path,	/* Pointer to the file/directory name */
	const FILINFO* fno	/* Pointer to the timestamp to be set */
)
{
    d2a2:	a2 e3       	ldi	r26, 0x32	; 50
    d2a4:	b0 e0       	ldi	r27, 0x00	; 0
    d2a6:	e7 e5       	ldi	r30, 0x57	; 87
    d2a8:	f9 e6       	ldi	r31, 0x69	; 105
    d2aa:	0c 94 d2 e3 	jmp	0x1c7a4	; 0x1c7a4 <__prologue_saves__+0x14>
    d2ae:	9a ab       	std	Y+50, r25	; 0x32
    d2b0:	89 ab       	std	Y+49, r24	; 0x31
    d2b2:	6b 01       	movw	r12, r22
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    d2b4:	42 e0       	ldi	r20, 0x02	; 2
    d2b6:	be 01       	movw	r22, r28
    d2b8:	61 5d       	subi	r22, 0xD1	; 209
    d2ba:	7f 4f       	sbci	r23, 0xFF	; 255
    d2bc:	ce 01       	movw	r24, r28
    d2be:	c1 96       	adiw	r24, 0x31	; 49
    d2c0:	0e 94 34 4d 	call	0x9a68	; 0x9a68 <mount_volume>
	if (res == FR_OK) {
    d2c4:	00 97       	sbiw	r24, 0x00	; 0
    d2c6:	09 f0       	breq	.+2      	; 0xd2ca <f_utime+0x28>
    d2c8:	41 c0       	rjmp	.+130    	; 0xd34c <f_utime+0xaa>
		dj.obj.fs = fs;
    d2ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    d2cc:	98 a9       	ldd	r25, Y+48	; 0x30
    d2ce:	9a 83       	std	Y+2, r25	; 0x02
    d2d0:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    d2d2:	80 e0       	ldi	r24, 0x00	; 0
    d2d4:	92 e0       	ldi	r25, 0x02	; 2
    d2d6:	da d0       	rcall	.+436    	; 0xd48c <ff_memalloc>
    d2d8:	7c 01       	movw	r14, r24
    d2da:	00 97       	sbiw	r24, 0x00	; 0
    d2dc:	b1 f0       	breq	.+44     	; 0xd30a <f_utime+0x68>
    d2de:	ef a5       	ldd	r30, Y+47	; 0x2f
    d2e0:	f8 a9       	ldd	r31, Y+48	; 0x30
    d2e2:	94 87       	std	Z+12, r25	; 0x0c
    d2e4:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);	/* Follow the file path */
    d2e6:	69 a9       	ldd	r22, Y+49	; 0x31
    d2e8:	7a a9       	ldd	r23, Y+50	; 0x32
    d2ea:	ce 01       	movw	r24, r28
    d2ec:	01 96       	adiw	r24, 0x01	; 1
    d2ee:	0e 94 83 58 	call	0xb106	; 0xb106 <follow_path>
    d2f2:	8c 01       	movw	r16, r24
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
    d2f4:	89 2b       	or	r24, r25
    d2f6:	29 f4       	brne	.+10     	; 0xd302 <f_utime+0x60>
    d2f8:	88 a5       	ldd	r24, Y+40	; 0x28
    d2fa:	80 7a       	andi	r24, 0xA0	; 160
    d2fc:	49 f0       	breq	.+18     	; 0xd310 <f_utime+0x6e>
    d2fe:	06 e0       	ldi	r16, 0x06	; 6
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    d300:	10 e0       	ldi	r17, 0x00	; 0
    d302:	c7 01       	movw	r24, r14
    d304:	c6 d0       	rcall	.+396    	; 0xd492 <ff_memfree>
    d306:	c8 01       	movw	r24, r16


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    d308:	21 c0       	rjmp	.+66     	; 0xd34c <f_utime+0xaa>
    d30a:	81 e1       	ldi	r24, 0x11	; 17
    d30c:	90 e0       	ldi	r25, 0x00	; 0
				st_dword(fs->dirbuf + XDIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
				res = store_xdir(&dj);
			} else
#endif
			{
				st_dword(dj.dir + DIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
    d30e:	1e c0       	rjmp	.+60     	; 0xd34c <f_utime+0xaa>
    d310:	f6 01       	movw	r30, r12
    d312:	44 81       	ldd	r20, Z+4	; 0x04
    d314:	55 81       	ldd	r21, Z+5	; 0x05
    d316:	60 e0       	ldi	r22, 0x00	; 0
    d318:	70 e0       	ldi	r23, 0x00	; 0
    d31a:	ba 01       	movw	r22, r20
    d31c:	55 27       	eor	r21, r21
    d31e:	44 27       	eor	r20, r20
    d320:	86 81       	ldd	r24, Z+6	; 0x06
    d322:	97 81       	ldd	r25, Z+7	; 0x07
    d324:	a0 e0       	ldi	r26, 0x00	; 0
    d326:	b0 e0       	ldi	r27, 0x00	; 0
    d328:	48 2b       	or	r20, r24
    d32a:	59 2b       	or	r21, r25
    d32c:	6a 2b       	or	r22, r26
    d32e:	7b 2b       	or	r23, r27
    d330:	8b 8d       	ldd	r24, Y+27	; 0x1b
    d332:	9c 8d       	ldd	r25, Y+28	; 0x1c
    d334:	46 96       	adiw	r24, 0x16	; 22
    d336:	0e 94 f3 47 	call	0x8fe6	; 0x8fe6 <st_dword>
				fs->wflag = 1;
    d33a:	8f a5       	ldd	r24, Y+47	; 0x2f
    d33c:	98 a9       	ldd	r25, Y+48	; 0x30
    d33e:	21 e0       	ldi	r18, 0x01	; 1
    d340:	fc 01       	movw	r30, r24
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
    d342:	23 83       	std	Z+3, r18	; 0x03
    d344:	0e 94 9f 4b 	call	0x973e	; 0x973e <sync_fs>
    d348:	8c 01       	movw	r16, r24
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    d34a:	db cf       	rjmp	.-74     	; 0xd302 <f_utime+0x60>
    d34c:	e2 96       	adiw	r28, 0x32	; 50
    d34e:	e8 e0       	ldi	r30, 0x08	; 8
    d350:	0c 94 ee e3 	jmp	0x1c7dc	; 0x1c7dc <__epilogue_restores__+0x14>

0000d354 <f_getlabel>:
FRESULT f_getlabel (
	const TCHAR* path,	/* Logical drive number */
	TCHAR* label,		/* Buffer to store the volume label */
	DWORD* vsn			/* Variable to store the volume serial number */
)
{
    d354:	a2 e3       	ldi	r26, 0x32	; 50
    d356:	b0 e0       	ldi	r27, 0x00	; 0
    d358:	e0 eb       	ldi	r30, 0xB0	; 176
    d35a:	f9 e6       	ldi	r31, 0x69	; 105
    d35c:	0c 94 ce e3 	jmp	0x1c79c	; 0x1c79c <__prologue_saves__+0xc>
    d360:	9a ab       	std	Y+50, r25	; 0x32
    d362:	89 ab       	std	Y+49, r24	; 0x31
    d364:	6b 01       	movw	r12, r22
    d366:	5a 01       	movw	r10, r20
	FATFS *fs;
	UINT si, di;
	WCHAR wc;

	/* Get logical drive */
	res = mount_volume(&path, &fs, 0);
    d368:	40 e0       	ldi	r20, 0x00	; 0
    d36a:	be 01       	movw	r22, r28
    d36c:	61 5d       	subi	r22, 0xD1	; 209
    d36e:	7f 4f       	sbci	r23, 0xFF	; 255
    d370:	ce 01       	movw	r24, r28
    d372:	c1 96       	adiw	r24, 0x31	; 49
    d374:	0e 94 34 4d 	call	0x9a68	; 0x9a68 <mount_volume>
    d378:	7c 01       	movw	r14, r24

	/* Get volume label */
	if (res == FR_OK && label) {
    d37a:	89 2b       	or	r24, r25
    d37c:	09 f0       	breq	.+2      	; 0xd380 <f_getlabel+0x2c>
    d37e:	81 c0       	rjmp	.+258    	; 0xd482 <f_getlabel+0x12e>
    d380:	c1 14       	cp	r12, r1
    d382:	d1 04       	cpc	r13, r1
    d384:	09 f4       	brne	.+2      	; 0xd388 <f_getlabel+0x34>
    d386:	53 c0       	rjmp	.+166    	; 0xd42e <f_getlabel+0xda>
		dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
    d388:	8f a5       	ldd	r24, Y+47	; 0x2f
    d38a:	98 a9       	ldd	r25, Y+48	; 0x30
    d38c:	9a 83       	std	Y+2, r25	; 0x02
    d38e:	89 83       	std	Y+1, r24	; 0x01
    d390:	1f 82       	std	Y+7, r1	; 0x07
    d392:	18 86       	std	Y+8, r1	; 0x08
    d394:	19 86       	std	Y+9, r1	; 0x09
    d396:	1a 86       	std	Y+10, r1	; 0x0a
		res = dir_sdi(&dj, 0);
    d398:	40 e0       	ldi	r20, 0x00	; 0
    d39a:	50 e0       	ldi	r21, 0x00	; 0
    d39c:	ba 01       	movw	r22, r20
    d39e:	ce 01       	movw	r24, r28
    d3a0:	01 96       	adiw	r24, 0x01	; 1
    d3a2:	0e 94 3d 51 	call	0xa27a	; 0xa27a <dir_sdi>
		if (res == FR_OK) {
    d3a6:	00 97       	sbiw	r24, 0x00	; 0
    d3a8:	e9 f5       	brne	.+122    	; 0xd424 <f_getlabel+0xd0>
		 	res = DIR_READ_LABEL(&dj);		/* Find a volume label entry */
    d3aa:	61 e0       	ldi	r22, 0x01	; 1
    d3ac:	70 e0       	ldi	r23, 0x00	; 0
    d3ae:	ce 01       	movw	r24, r28
    d3b0:	01 96       	adiw	r24, 0x01	; 1
    d3b2:	0e 94 d6 54 	call	0xa9ac	; 0xa9ac <dir_read>
		 	if (res == FR_OK) {
    d3b6:	00 97       	sbiw	r24, 0x00	; 0
    d3b8:	a9 f5       	brne	.+106    	; 0xd424 <f_getlabel+0xd0>
    d3ba:	00 e0       	ldi	r16, 0x00	; 0
    d3bc:	10 e0       	ldi	r17, 0x00	; 0
    d3be:	80 e0       	ldi	r24, 0x00	; 0
    d3c0:	90 e0       	ldi	r25, 0x00	; 0
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry */
					while (si < 11) {
						wc = dj.dir[si++];
    d3c2:	4c 01       	movw	r8, r24
    d3c4:	2f ef       	ldi	r18, 0xFF	; 255
    d3c6:	82 1a       	sub	r8, r18
    d3c8:	92 0a       	sbc	r9, r18
    d3ca:	2b 8d       	ldd	r18, Y+27	; 0x1b
    d3cc:	3c 8d       	ldd	r19, Y+28	; 0x1c
    d3ce:	f9 01       	movw	r30, r18
    d3d0:	e8 0f       	add	r30, r24
    d3d2:	f9 1f       	adc	r31, r25
    d3d4:	80 81       	ld	r24, Z
#if FF_USE_LFN && FF_LFN_UNICODE >= 1 	/* Unicode output */
						if (dbc_1st((BYTE)wc) && si < 11) wc = wc << 8 | dj.dir[si++];	/* Is it a DBC? */
						wc = ff_oem2uni(wc, CODEPAGE);					/* Convert it into Unicode */
    d3d6:	65 eb       	ldi	r22, 0xB5	; 181
    d3d8:	71 e0       	ldi	r23, 0x01	; 1
    d3da:	90 e0       	ldi	r25, 0x00	; 0
    d3dc:	90 d0       	rcall	.+288    	; 0xd4fe <ff_oem2uni>
						if (wc != 0) wc = put_utf(wc, &label[di], 4);	/* Put it in Unicode */
    d3de:	00 97       	sbiw	r24, 0x00	; 0
    d3e0:	19 f4       	brne	.+6      	; 0xd3e8 <f_getlabel+0x94>
						if (wc == 0) { di = 0; break; }
    d3e2:	00 e0       	ldi	r16, 0x00	; 0
    d3e4:	10 e0       	ldi	r17, 0x00	; 0
    d3e6:	13 c0       	rjmp	.+38     	; 0xd40e <f_getlabel+0xba>
					while (si < 11) {
						wc = dj.dir[si++];
#if FF_USE_LFN && FF_LFN_UNICODE >= 1 	/* Unicode output */
						if (dbc_1st((BYTE)wc) && si < 11) wc = wc << 8 | dj.dir[si++];	/* Is it a DBC? */
						wc = ff_oem2uni(wc, CODEPAGE);					/* Convert it into Unicode */
						if (wc != 0) wc = put_utf(wc, &label[di], 4);	/* Put it in Unicode */
    d3e8:	bc 01       	movw	r22, r24
    d3ea:	80 e0       	ldi	r24, 0x00	; 0
    d3ec:	90 e0       	ldi	r25, 0x00	; 0
    d3ee:	24 e0       	ldi	r18, 0x04	; 4
    d3f0:	30 e0       	ldi	r19, 0x00	; 0
    d3f2:	a6 01       	movw	r20, r12
    d3f4:	40 0f       	add	r20, r16
    d3f6:	51 1f       	adc	r21, r17
    d3f8:	0e 94 6d 49 	call	0x92da	; 0x92da <put_utf>
    d3fc:	90 e0       	ldi	r25, 0x00	; 0
						if (wc == 0) { di = 0; break; }
    d3fe:	00 97       	sbiw	r24, 0x00	; 0
    d400:	81 f3       	breq	.-32     	; 0xd3e2 <f_getlabel+0x8e>
						di += wc;
    d402:	08 0f       	add	r16, r24
    d404:	19 1f       	adc	r17, r25
    d406:	c4 01       	movw	r24, r8
					label[di] = 0;
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry */
					while (si < 11) {
    d408:	8b 30       	cpi	r24, 0x0B	; 11
    d40a:	91 05       	cpc	r25, r1
    d40c:	d1 f6       	brne	.-76     	; 0xd3c2 <f_getlabel+0x6e>
    d40e:	f6 01       	movw	r30, r12
    d410:	e0 0f       	add	r30, r16
    d412:	f1 1f       	adc	r31, r17
#else									/* ANSI/OEM output */
						label[di++] = (TCHAR)wc;
#endif
					}
					do {				/* Truncate trailing spaces */
						label[di] = 0;
    d414:	10 82       	st	Z, r1
						if (di == 0) break;
    d416:	ce 16       	cp	r12, r30
    d418:	df 06       	cpc	r13, r31
    d41a:	49 f0       	breq	.+18     	; 0xd42e <f_getlabel+0xda>
					} while (label[--di] == ' ');
    d41c:	82 91       	ld	r24, -Z
    d41e:	80 32       	cpi	r24, 0x20	; 32
    d420:	c9 f3       	breq	.-14     	; 0xd414 <f_getlabel+0xc0>
    d422:	05 c0       	rjmp	.+10     	; 0xd42e <f_getlabel+0xda>
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
    d424:	84 30       	cpi	r24, 0x04	; 4
    d426:	91 05       	cpc	r25, r1
    d428:	59 f5       	brne	.+86     	; 0xd480 <f_getlabel+0x12c>
			label[0] = 0;
    d42a:	f6 01       	movw	r30, r12
    d42c:	10 82       	st	Z, r1
			res = FR_OK;
		}
	}

	/* Get volume serial number */
	if (res == FR_OK && vsn) {
    d42e:	a1 14       	cp	r10, r1
    d430:	b1 04       	cpc	r11, r1
    d432:	39 f1       	breq	.+78     	; 0xd482 <f_getlabel+0x12e>
		res = move_window(fs, fs->volbase);
    d434:	8f a5       	ldd	r24, Y+47	; 0x2f
    d436:	98 a9       	ldd	r25, Y+48	; 0x30
    d438:	fc 01       	movw	r30, r24
    d43a:	41 a1       	ldd	r20, Z+33	; 0x21
    d43c:	52 a1       	ldd	r21, Z+34	; 0x22
    d43e:	63 a1       	ldd	r22, Z+35	; 0x23
    d440:	74 a1       	ldd	r23, Z+36	; 0x24
    d442:	0e 94 b9 4c 	call	0x9972	; 0x9972 <move_window>
    d446:	7c 01       	movw	r14, r24
		if (res == FR_OK) {
    d448:	89 2b       	or	r24, r25
    d44a:	d9 f4       	brne	.+54     	; 0xd482 <f_getlabel+0x12e>
			switch (fs->fs_type) {
    d44c:	ef a5       	ldd	r30, Y+47	; 0x2f
    d44e:	f8 a9       	ldd	r31, Y+48	; 0x30
    d450:	80 81       	ld	r24, Z
    d452:	83 30       	cpi	r24, 0x03	; 3
    d454:	29 f0       	breq	.+10     	; 0xd460 <f_getlabel+0x10c>
    d456:	84 30       	cpi	r24, 0x04	; 4
    d458:	31 f0       	breq	.+12     	; 0xd466 <f_getlabel+0x112>

			case FS_FAT32:
				di = BS_VolID32; break;

			default:
				di = BS_VolID;
    d45a:	87 e2       	ldi	r24, 0x27	; 39
    d45c:	90 e0       	ldi	r25, 0x00	; 0
    d45e:	05 c0       	rjmp	.+10     	; 0xd46a <f_getlabel+0x116>
			switch (fs->fs_type) {
			case FS_EXFAT:
				di = BPB_VolIDEx; break;

			case FS_FAT32:
				di = BS_VolID32; break;
    d460:	83 e4       	ldi	r24, 0x43	; 67
    d462:	90 e0       	ldi	r25, 0x00	; 0
    d464:	02 c0       	rjmp	.+4      	; 0xd46a <f_getlabel+0x116>
	if (res == FR_OK && vsn) {
		res = move_window(fs, fs->volbase);
		if (res == FR_OK) {
			switch (fs->fs_type) {
			case FS_EXFAT:
				di = BPB_VolIDEx; break;
    d466:	84 e6       	ldi	r24, 0x64	; 100
    d468:	90 e0       	ldi	r25, 0x00	; 0
				di = BS_VolID32; break;

			default:
				di = BS_VolID;
			}
			*vsn = ld_dword(fs->win + di);
    d46a:	f5 96       	adiw	r30, 0x35	; 53
    d46c:	8e 0f       	add	r24, r30
    d46e:	9f 1f       	adc	r25, r31
    d470:	0e 94 de 47 	call	0x8fbc	; 0x8fbc <ld_dword>
    d474:	f5 01       	movw	r30, r10
    d476:	60 83       	st	Z, r22
    d478:	71 83       	std	Z+1, r23	; 0x01
    d47a:	82 83       	std	Z+2, r24	; 0x02
    d47c:	93 83       	std	Z+3, r25	; 0x03
    d47e:	01 c0       	rjmp	.+2      	; 0xd482 <f_getlabel+0x12e>
						if (di == 0) break;
					} while (label[--di] == ' ');
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
    d480:	7c 01       	movw	r14, r24
			*vsn = ld_dword(fs->win + di);
		}
	}

	LEAVE_FF(fs, res);
}
    d482:	c7 01       	movw	r24, r14
    d484:	e2 96       	adiw	r28, 0x32	; 50
    d486:	ec e0       	ldi	r30, 0x0C	; 12
    d488:	0c 94 ea e3 	jmp	0x1c7d4	; 0x1c7d4 <__epilogue_restores__+0xc>

0000d48c <ff_memalloc>:

void* ff_memalloc (	/* Returns pointer to the allocated memory block (null if not enough core) */
	UINT msize		/* Number of bytes to allocate */
)
{
	return safemalloc(msize);	/* Allocate a new memory block with POSIX API */
    d48c:	0c 94 73 29 	jmp	0x52e6	; 0x52e6 <safemalloc>
}
    d490:	08 95       	ret

0000d492 <ff_memfree>:

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free (nothing to do if null) */
)
{
	safefree(mblock);	/* Free the memory block with POSIX API */
    d492:	0c 94 95 29 	jmp	0x532a	; 0x532a <safefree>
    d496:	08 95       	ret

0000d498 <ff_uni2oem>:
#if FF_CODE_PAGE != 0 && FF_CODE_PAGE < 900
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
    d498:	cf 92       	push	r12
    d49a:	df 92       	push	r13
    d49c:	ef 92       	push	r14
    d49e:	ff 92       	push	r15
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (uni < 0x80) {	/* ASCII? */
    d4a0:	60 38       	cpi	r22, 0x80	; 128
    d4a2:	71 05       	cpc	r23, r1
    d4a4:	81 05       	cpc	r24, r1
    d4a6:	91 05       	cpc	r25, r1
    d4a8:	10 f4       	brcc	.+4      	; 0xd4ae <ff_uni2oem+0x16>
		c = (WCHAR)uni;
    d4aa:	cb 01       	movw	r24, r22
    d4ac:	23 c0       	rjmp	.+70     	; 0xd4f4 <ff_uni2oem+0x5c>

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
    d4ae:	61 15       	cp	r22, r1
    d4b0:	71 05       	cpc	r23, r1
    d4b2:	21 e0       	ldi	r18, 0x01	; 1
    d4b4:	82 07       	cpc	r24, r18
    d4b6:	91 05       	cpc	r25, r1
    d4b8:	d8 f4       	brcc	.+54     	; 0xd4f0 <ff_uni2oem+0x58>
    d4ba:	45 3b       	cpi	r20, 0xB5	; 181
    d4bc:	51 40       	sbci	r21, 0x01	; 1
    d4be:	c1 f4       	brne	.+48     	; 0xd4f0 <ff_uni2oem+0x58>
    d4c0:	e6 ec       	ldi	r30, 0xC6	; 198
    d4c2:	f6 e0       	ldi	r31, 0x06	; 6
    d4c4:	20 e0       	ldi	r18, 0x00	; 0
    d4c6:	30 e0       	ldi	r19, 0x00	; 0
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
    d4c8:	c1 90       	ld	r12, Z+
    d4ca:	d1 90       	ld	r13, Z+
    d4cc:	e1 2c       	mov	r14, r1
    d4ce:	f1 2c       	mov	r15, r1
    d4d0:	6c 15       	cp	r22, r12
    d4d2:	7d 05       	cpc	r23, r13
    d4d4:	8e 05       	cpc	r24, r14
    d4d6:	9f 05       	cpc	r25, r15
    d4d8:	29 f0       	breq	.+10     	; 0xd4e4 <ff_uni2oem+0x4c>
    d4da:	2f 5f       	subi	r18, 0xFF	; 255
    d4dc:	3f 4f       	sbci	r19, 0xFF	; 255
    d4de:	20 38       	cpi	r18, 0x80	; 128
    d4e0:	31 05       	cpc	r19, r1
    d4e2:	91 f7       	brne	.-28     	; 0xd4c8 <ff_uni2oem+0x30>
			c = (c + 0x80) & 0xFF;
    d4e4:	b9 01       	movw	r22, r18
    d4e6:	60 58       	subi	r22, 0x80	; 128
    d4e8:	7f 4f       	sbci	r23, 0xFF	; 255
    d4ea:	cb 01       	movw	r24, r22
    d4ec:	99 27       	eor	r25, r25
    d4ee:	02 c0       	rjmp	.+4      	; 0xd4f4 <ff_uni2oem+0x5c>
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
	WCHAR c = 0;
    d4f0:	80 e0       	ldi	r24, 0x00	; 0
    d4f2:	90 e0       	ldi	r25, 0x00	; 0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
    d4f4:	ff 90       	pop	r15
    d4f6:	ef 90       	pop	r14
    d4f8:	df 90       	pop	r13
    d4fa:	cf 90       	pop	r12
    d4fc:	08 95       	ret

0000d4fe <ff_oem2uni>:
{
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (oem < 0x80) {	/* ASCII? */
    d4fe:	80 38       	cpi	r24, 0x80	; 128
    d500:	91 05       	cpc	r25, r1
    d502:	88 f0       	brcs	.+34     	; 0xd526 <ff_oem2uni+0x28>
		c = oem;

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
    d504:	65 3b       	cpi	r22, 0xB5	; 181
    d506:	71 40       	sbci	r23, 0x01	; 1
    d508:	61 f4       	brne	.+24     	; 0xd522 <ff_oem2uni+0x24>
			if (oem < 0x100) c = p[oem - 0x80];
    d50a:	8f 3f       	cpi	r24, 0xFF	; 255
    d50c:	91 05       	cpc	r25, r1
    d50e:	09 f0       	breq	.+2      	; 0xd512 <ff_oem2uni+0x14>
    d510:	40 f4       	brcc	.+16     	; 0xd522 <ff_oem2uni+0x24>
    d512:	88 0f       	add	r24, r24
    d514:	99 1f       	adc	r25, r25
    d516:	fc 01       	movw	r30, r24
    d518:	ea 53       	subi	r30, 0x3A	; 58
    d51a:	fa 4f       	sbci	r31, 0xFA	; 250
    d51c:	80 81       	ld	r24, Z
    d51e:	91 81       	ldd	r25, Z+1	; 0x01
    d520:	08 95       	ret
WCHAR ff_oem2uni (	/* Returns Unicode character in UTF-16, zero on error */
	WCHAR	oem,	/* OEM code to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
	WCHAR c = 0;
    d522:	80 e0       	ldi	r24, 0x00	; 0
    d524:	90 e0       	ldi	r25, 0x00	; 0
			if (oem < 0x100) c = p[oem - 0x80];
		}
	}

	return c;
}
    d526:	08 95       	ret

0000d528 <ff_wtoupper>:

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
    d528:	61 15       	cp	r22, r1
    d52a:	71 05       	cpc	r23, r1
    d52c:	21 e0       	ldi	r18, 0x01	; 1
    d52e:	82 07       	cpc	r24, r18
    d530:	91 05       	cpc	r25, r1
    d532:	08 f0       	brcs	.+2      	; 0xd536 <ff_wtoupper+0xe>
    d534:	5a c0       	rjmp	.+180    	; 0xd5ea <ff_wtoupper+0xc2>
		uc = (WORD)uni;
		p = uc < 0x1000 ? cvt1 : cvt2;
    d536:	61 15       	cp	r22, r1
    d538:	80 e1       	ldi	r24, 0x10	; 16
    d53a:	78 07       	cpc	r23, r24
    d53c:	18 f0       	brcs	.+6      	; 0xd544 <ff_wtoupper+0x1c>
    d53e:	a8 e1       	ldi	r26, 0x18	; 24
    d540:	b4 e0       	ldi	r27, 0x04	; 4
    d542:	02 c0       	rjmp	.+4      	; 0xd548 <ff_wtoupper+0x20>
    d544:	a4 ed       	ldi	r26, 0xD4	; 212
    d546:	b4 e0       	ldi	r27, 0x04	; 4
		for (;;) {
			bc = *p++;								/* Get the block base */
    d548:	2d 91       	ld	r18, X+
    d54a:	3c 91       	ld	r19, X
    d54c:	11 97       	sbiw	r26, 0x01	; 1
			if (bc == 0 || uc < bc) break;			/* Not matched? */
    d54e:	21 15       	cp	r18, r1
    d550:	31 05       	cpc	r19, r1
    d552:	09 f4       	brne	.+2      	; 0xd556 <ff_wtoupper+0x2e>
    d554:	48 c0       	rjmp	.+144    	; 0xd5e6 <ff_wtoupper+0xbe>
    d556:	62 17       	cp	r22, r18
    d558:	73 07       	cpc	r23, r19
    d55a:	08 f4       	brcc	.+2      	; 0xd55e <ff_wtoupper+0x36>
    d55c:	44 c0       	rjmp	.+136    	; 0xd5e6 <ff_wtoupper+0xbe>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
    d55e:	14 96       	adiw	r26, 0x04	; 4
    d560:	fd 01       	movw	r30, r26
    d562:	32 97       	sbiw	r30, 0x02	; 2
    d564:	80 81       	ld	r24, Z
    d566:	91 81       	ldd	r25, Z+1	; 0x01
    d568:	e9 2f       	mov	r30, r25
    d56a:	ff 27       	eor	r31, r31
    d56c:	99 27       	eor	r25, r25
			if (uc < bc + nc) {	/* In the block? */
    d56e:	a9 01       	movw	r20, r18
    d570:	48 0f       	add	r20, r24
    d572:	59 1f       	adc	r21, r25
    d574:	64 17       	cp	r22, r20
    d576:	75 07       	cpc	r23, r21
    d578:	70 f5       	brcc	.+92     	; 0xd5d6 <ff_wtoupper+0xae>
				switch (cmd) {
    d57a:	e9 30       	cpi	r30, 0x09	; 9
    d57c:	f1 05       	cpc	r31, r1
    d57e:	98 f5       	brcc	.+102    	; 0xd5e6 <ff_wtoupper+0xbe>
    d580:	ec 54       	subi	r30, 0x4C	; 76
    d582:	ff 4f       	sbci	r31, 0xFF	; 255
    d584:	0c 94 84 e3 	jmp	0x1c708	; 0x1c708 <__tablejump2__>
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
    d588:	62 1b       	sub	r22, r18
    d58a:	73 0b       	sbc	r23, r19
    d58c:	fb 01       	movw	r30, r22
    d58e:	ee 0f       	add	r30, r30
    d590:	ff 1f       	adc	r31, r31
    d592:	ea 0f       	add	r30, r26
    d594:	fb 1f       	adc	r31, r27
    d596:	60 81       	ld	r22, Z
    d598:	71 81       	ldd	r23, Z+1	; 0x01
    d59a:	25 c0       	rjmp	.+74     	; 0xd5e6 <ff_wtoupper+0xbe>
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
    d59c:	cb 01       	movw	r24, r22
    d59e:	82 1b       	sub	r24, r18
    d5a0:	93 0b       	sbc	r25, r19
    d5a2:	81 70       	andi	r24, 0x01	; 1
    d5a4:	99 27       	eor	r25, r25
    d5a6:	68 1b       	sub	r22, r24
    d5a8:	79 0b       	sbc	r23, r25
    d5aa:	1d c0       	rjmp	.+58     	; 0xd5e6 <ff_wtoupper+0xbe>
				case 2: uc -= 16; break;			/* Shift -16 */
    d5ac:	60 51       	subi	r22, 0x10	; 16
    d5ae:	71 09       	sbc	r23, r1
    d5b0:	1a c0       	rjmp	.+52     	; 0xd5e6 <ff_wtoupper+0xbe>
				case 3:	uc -= 32; break;			/* Shift -32 */
    d5b2:	60 52       	subi	r22, 0x20	; 32
    d5b4:	71 09       	sbc	r23, r1
    d5b6:	17 c0       	rjmp	.+46     	; 0xd5e6 <ff_wtoupper+0xbe>
				case 4:	uc -= 48; break;			/* Shift -48 */
    d5b8:	60 53       	subi	r22, 0x30	; 48
    d5ba:	71 09       	sbc	r23, r1
    d5bc:	14 c0       	rjmp	.+40     	; 0xd5e6 <ff_wtoupper+0xbe>
				case 5:	uc -= 26; break;			/* Shift -26 */
    d5be:	6a 51       	subi	r22, 0x1A	; 26
    d5c0:	71 09       	sbc	r23, r1
    d5c2:	11 c0       	rjmp	.+34     	; 0xd5e6 <ff_wtoupper+0xbe>
				case 6:	uc += 8; break;				/* Shift +8 */
    d5c4:	68 5f       	subi	r22, 0xF8	; 248
    d5c6:	7f 4f       	sbci	r23, 0xFF	; 255
    d5c8:	0e c0       	rjmp	.+28     	; 0xd5e6 <ff_wtoupper+0xbe>
				case 7: uc -= 80; break;			/* Shift -80 */
    d5ca:	60 55       	subi	r22, 0x50	; 80
    d5cc:	71 09       	sbc	r23, r1
    d5ce:	0b c0       	rjmp	.+22     	; 0xd5e6 <ff_wtoupper+0xbe>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
    d5d0:	60 56       	subi	r22, 0x60	; 96
    d5d2:	7c 41       	sbci	r23, 0x1C	; 28
    d5d4:	08 c0       	rjmp	.+16     	; 0xd5e6 <ff_wtoupper+0xbe>
				}
				break;
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
    d5d6:	ef 2b       	or	r30, r31
    d5d8:	09 f0       	breq	.+2      	; 0xd5dc <ff_wtoupper+0xb4>
    d5da:	b6 cf       	rjmp	.-148    	; 0xd548 <ff_wtoupper+0x20>
    d5dc:	88 0f       	add	r24, r24
    d5de:	99 1f       	adc	r25, r25
    d5e0:	a8 0f       	add	r26, r24
    d5e2:	b9 1f       	adc	r27, r25
    d5e4:	b1 cf       	rjmp	.-158    	; 0xd548 <ff_wtoupper+0x20>
		}
		uni = uc;
    d5e6:	80 e0       	ldi	r24, 0x00	; 0
    d5e8:	90 e0       	ldi	r25, 0x00	; 0
	}

	return uni;
}
    d5ea:	08 95       	ret

0000d5ec <disk_status>:

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
	switch (pdrv) {
    d5ec:	81 11       	cpse	r24, r1
#ifdef DRV_MMC
	case DEV_MMC :
		return ( mmc_disk_status() );
    d5ee:	02 c0       	rjmp	.+4      	; 0xd5f4 <disk_status+0x8>
    d5f0:	a0 c1       	rjmp	.+832    	; 0xd932 <mmc_disk_status>
#ifdef DRV_USB
	case DEV_USB :
		return ( usb_disk_status() );
#endif
	}
	return STA_NOINIT;
    d5f2:	08 95       	ret
}
    d5f4:	81 e0       	ldi	r24, 0x01	; 1
    d5f6:	08 95       	ret

0000d5f8 <disk_initialize>:
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{

	switch (pdrv) {
    d5f8:	81 11       	cpse	r24, r1
#ifdef DRV_MMC
	case DEV_MMC :
		return ( mmc_disk_initialize() );
    d5fa:	02 c0       	rjmp	.+4      	; 0xd600 <disk_initialize+0x8>
    d5fc:	fd c0       	rjmp	.+506    	; 0xd7f8 <mmc_disk_initialize>
#ifdef DRV_USB
	case DEV_USB :
		return ( usb_disk_initialize() );
#endif
	}
	return STA_NOINIT;
    d5fe:	08 95       	ret
}
    d600:	81 e0       	ldi	r24, 0x01	; 1
    d602:	08 95       	ret

0000d604 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	LBA_t sector,	/* Start sector in LBA */
	UINT count		/* Number of sectors to read */
)
{
    d604:	0f 93       	push	r16
    d606:	1f 93       	push	r17
    d608:	fb 01       	movw	r30, r22
	switch (pdrv) {
    d60a:	81 11       	cpse	r24, r1
    d60c:	06 c0       	rjmp	.+12     	; 0xd61a <disk_read+0x16>
    d60e:	ba 01       	movw	r22, r20
    d610:	a9 01       	movw	r20, r18
    d612:	cf 01       	movw	r24, r30
#ifdef DRV_MMC
	case DEV_MMC :
		return ( mmc_disk_read(buff, sector, count) );
    d614:	98 01       	movw	r18, r16
    d616:	90 d1       	rcall	.+800    	; 0xd938 <mmc_disk_read>
    d618:	02 c0       	rjmp	.+4      	; 0xd61e <disk_read+0x1a>
#ifdef DRV_USB
	case DEV_USB :
		return ( usb_disk_read(buff, sector, count) );
#endif
	}
	return RES_PARERR;
    d61a:	84 e0       	ldi	r24, 0x04	; 4
    d61c:	90 e0       	ldi	r25, 0x00	; 0
}
    d61e:	1f 91       	pop	r17
    d620:	0f 91       	pop	r16
    d622:	08 95       	ret

0000d624 <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	LBA_t sector,		/* Start sector in LBA */
	UINT count			/* Number of sectors to write */
)
{
    d624:	0f 93       	push	r16
    d626:	1f 93       	push	r17
    d628:	fb 01       	movw	r30, r22
	switch (pdrv) {
    d62a:	81 11       	cpse	r24, r1
    d62c:	06 c0       	rjmp	.+12     	; 0xd63a <disk_write+0x16>
    d62e:	ba 01       	movw	r22, r20
    d630:	a9 01       	movw	r20, r18
    d632:	cf 01       	movw	r24, r30
#ifdef DRV_MMC
	case DEV_MMC :
		return ( mmc_disk_write(buff, sector, count) );
    d634:	98 01       	movw	r18, r16
    d636:	c6 d1       	rcall	.+908    	; 0xd9c4 <mmc_disk_write>
    d638:	02 c0       	rjmp	.+4      	; 0xd63e <disk_write+0x1a>
	case DEV_USB :
		return ( usb_disk_write(buff, sector, count) );
#endif
	}

	return RES_PARERR;
    d63a:	84 e0       	ldi	r24, 0x04	; 4
    d63c:	90 e0       	ldi	r25, 0x00	; 0
}
    d63e:	1f 91       	pop	r17
    d640:	0f 91       	pop	r16
    d642:	08 95       	ret

0000d644 <disk_ioctl>:
DRESULT disk_ioctl (
    BYTE pdrv,      /* Physical drive nmuber (0..) */
    BYTE cmd,       /* Control code */
    void *buff      /* Buffer to send/receive control data */
)
{
    d644:	96 2f       	mov	r25, r22
    switch (pdrv) {
    d646:	81 11       	cpse	r24, r1
    d648:	04 c0       	rjmp	.+8      	; 0xd652 <disk_ioctl+0xe>
    d64a:	ba 01       	movw	r22, r20
#ifdef DRV_MMC
    case DEV_MMC :
        return ( mmc_disk_ioctl(cmd, buff) );
    d64c:	89 2f       	mov	r24, r25
    d64e:	1f c2       	rjmp	.+1086   	; 0xda8e <mmc_disk_ioctl>
#ifdef DRV_USB
    case DEV_MMC :
        return ( usb_disk_ioctl(cmd, buff) );
#endif
    }
    return RES_PARERR;
    d650:	08 95       	ret
    d652:	84 e0       	ldi	r24, 0x04	; 4
}
    d654:	90 e0       	ldi	r25, 0x00	; 0
    d656:	08 95       	ret

0000d658 <xchg_spi>:
///@return Data read
static
BYTE xchg_spi (     /* Returns received data */
    BYTE dat        /* Data to be sent */
)
{
    d658:	d7 c4       	rjmp	.+2478   	; 0xe008 <mmc_spi_TXRX>
    d65a:	08 95       	ret

0000d65c <deselect>:
    d65c:	ac d4       	rcall	.+2392   	; 0xdfb6 <mmc_spi_end>
    d65e:	8f ef       	ldi	r24, 0xFF	; 255
    d660:	fb df       	rcall	.-10     	; 0xd658 <xchg_spi>
    d662:	8f ef       	ldi	r24, 0xFF	; 255
    d664:	f9 cf       	rjmp	.-14     	; 0xd658 <xchg_spi>
    d666:	08 95       	ret

0000d668 <rcvr_datablock>:
    d668:	0f 93       	push	r16
    d66a:	1f 93       	push	r17
    d66c:	cf 93       	push	r28
    d66e:	df 93       	push	r29
    d670:	ec 01       	movw	r28, r24
    d672:	8b 01       	movw	r16, r22
    d674:	46 9a       	sbi	0x08, 6	; 8
    d676:	3e 9a       	sbi	0x07, 6	; 7
    d678:	88 ee       	ldi	r24, 0xE8	; 232
    d67a:	93 e0       	ldi	r25, 0x03	; 3
    d67c:	c8 d4       	rcall	.+2448   	; 0xe00e <mmc_set_ms_timeout>
    d67e:	8f ef       	ldi	r24, 0xFF	; 255
    d680:	c3 d4       	rcall	.+2438   	; 0xe008 <mmc_spi_TXRX>
    d682:	8f 3f       	cpi	r24, 0xFF	; 255
    d684:	31 f4       	brne	.+12     	; 0xd692 <rcvr_datablock+0x2a>
    d686:	ca d4       	rcall	.+2452   	; 0xe01c <mmc_test_timeout>
    d688:	89 2b       	or	r24, r25
    d68a:	c9 f3       	breq	.-14     	; 0xd67e <rcvr_datablock+0x16>
    d68c:	80 e0       	ldi	r24, 0x00	; 0
    d68e:	90 e0       	ldi	r25, 0x00	; 0
    d690:	0d c0       	rjmp	.+26     	; 0xd6ac <rcvr_datablock+0x44>
    d692:	8e 3f       	cpi	r24, 0xFE	; 254
    d694:	d9 f7       	brne	.-10     	; 0xd68c <rcvr_datablock+0x24>
    d696:	b8 01       	movw	r22, r16
    d698:	ce 01       	movw	r24, r28
    d69a:	b3 d4       	rcall	.+2406   	; 0xe002 <mmc_spi_RX_buffer>
    d69c:	8f ef       	ldi	r24, 0xFF	; 255
    d69e:	dc df       	rcall	.-72     	; 0xd658 <xchg_spi>
    d6a0:	8f ef       	ldi	r24, 0xFF	; 255
    d6a2:	da df       	rcall	.-76     	; 0xd658 <xchg_spi>
    d6a4:	46 98       	cbi	0x08, 6	; 8
    d6a6:	3e 9a       	sbi	0x07, 6	; 7
    d6a8:	81 e0       	ldi	r24, 0x01	; 1
    d6aa:	90 e0       	ldi	r25, 0x00	; 0
    d6ac:	df 91       	pop	r29
    d6ae:	cf 91       	pop	r28
    d6b0:	1f 91       	pop	r17
    d6b2:	0f 91       	pop	r16
    d6b4:	08 95       	ret

0000d6b6 <wait_ready>:
    d6b6:	cf 93       	push	r28
    d6b8:	aa d4       	rcall	.+2388   	; 0xe00e <mmc_set_ms_timeout>
    d6ba:	8f ef       	ldi	r24, 0xFF	; 255
    d6bc:	a5 d4       	rcall	.+2378   	; 0xe008 <mmc_spi_TXRX>
    d6be:	c8 2f       	mov	r28, r24
    d6c0:	8f 3f       	cpi	r24, 0xFF	; 255
    d6c2:	19 f0       	breq	.+6      	; 0xd6ca <wait_ready+0x14>
    d6c4:	ab d4       	rcall	.+2390   	; 0xe01c <mmc_test_timeout>
    d6c6:	89 2b       	or	r24, r25
    d6c8:	c1 f3       	breq	.-16     	; 0xd6ba <wait_ready+0x4>
    d6ca:	81 e0       	ldi	r24, 0x01	; 1
    d6cc:	90 e0       	ldi	r25, 0x00	; 0
    d6ce:	cf 3f       	cpi	r28, 0xFF	; 255
    d6d0:	11 f0       	breq	.+4      	; 0xd6d6 <wait_ready+0x20>
    d6d2:	80 e0       	ldi	r24, 0x00	; 0
    d6d4:	90 e0       	ldi	r25, 0x00	; 0
    d6d6:	cf 91       	pop	r28
    d6d8:	08 95       	ret

0000d6da <select>:
    d6da:	cf 93       	push	r28
    d6dc:	df 93       	push	r29
    d6de:	00 d0       	rcall	.+0      	; 0xd6e0 <select+0x6>
    d6e0:	1f 92       	push	r1
    d6e2:	5c d4       	rcall	.+2232   	; 0xdf9c <mmc_spi_begin>
    d6e4:	8f ef       	ldi	r24, 0xFF	; 255
    d6e6:	b8 df       	rcall	.-144    	; 0xd658 <xchg_spi>
    d6e8:	88 ee       	ldi	r24, 0xE8	; 232
    d6ea:	93 e0       	ldi	r25, 0x03	; 3
    d6ec:	e4 df       	rcall	.-56     	; 0xd6b6 <wait_ready>
    d6ee:	ec 01       	movw	r28, r24
    d6f0:	89 2b       	or	r24, r25
    d6f2:	61 f4       	brne	.+24     	; 0xd70c <select+0x32>
    d6f4:	80 e3       	ldi	r24, 0x30	; 48
    d6f6:	97 e0       	ldi	r25, 0x07	; 7
    d6f8:	a0 e0       	ldi	r26, 0x00	; 0
    d6fa:	ed b7       	in	r30, 0x3d	; 61
    d6fc:	fe b7       	in	r31, 0x3e	; 62
    d6fe:	81 83       	std	Z+1, r24	; 0x01
    d700:	92 83       	std	Z+2, r25	; 0x02
    d702:	a3 83       	std	Z+3, r26	; 0x03
    d704:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    d708:	a9 df       	rcall	.-174    	; 0xd65c <deselect>
    d70a:	02 c0       	rjmp	.+4      	; 0xd710 <select+0x36>
    d70c:	c1 e0       	ldi	r28, 0x01	; 1
    d70e:	d0 e0       	ldi	r29, 0x00	; 0
    d710:	ce 01       	movw	r24, r28
    d712:	cd b7       	in	r28, 0x3d	; 61
    d714:	de b7       	in	r29, 0x3e	; 62
    d716:	23 96       	adiw	r28, 0x03	; 3
    d718:	e2 e0       	ldi	r30, 0x02	; 2
    d71a:	0c 94 f4 e3 	jmp	0x1c7e8	; 0x1c7e8 <__epilogue_restores__+0x20>

0000d71e <send_cmd>:
    d71e:	ff 92       	push	r15
    d720:	0f 93       	push	r16
    d722:	1f 93       	push	r17
    d724:	cf 93       	push	r28
    d726:	df 93       	push	r29
    d728:	c8 2f       	mov	r28, r24
    d72a:	d4 2f       	mov	r29, r20
    d72c:	15 2f       	mov	r17, r21
    d72e:	06 2f       	mov	r16, r22
    d730:	f7 2e       	mov	r15, r23
    d732:	87 ff       	sbrs	r24, 7
    d734:	08 c0       	rjmp	.+16     	; 0xd746 <send_cmd+0x28>
    d736:	40 e0       	ldi	r20, 0x00	; 0
    d738:	50 e0       	ldi	r21, 0x00	; 0
    d73a:	ba 01       	movw	r22, r20
    d73c:	87 e3       	ldi	r24, 0x37	; 55
    d73e:	ef df       	rcall	.-34     	; 0xd71e <send_cmd>
    d740:	82 30       	cpi	r24, 0x02	; 2
    d742:	58 f5       	brcc	.+86     	; 0xd79a <send_cmd+0x7c>
    d744:	cf 77       	andi	r28, 0x7F	; 127
    d746:	cc 30       	cpi	r28, 0x0C	; 12
    d748:	71 f4       	brne	.+28     	; 0xd766 <send_cmd+0x48>
    d74a:	8c 2f       	mov	r24, r28
    d74c:	80 64       	ori	r24, 0x40	; 64
    d74e:	84 df       	rcall	.-248    	; 0xd658 <xchg_spi>
    d750:	8f 2d       	mov	r24, r15
    d752:	82 df       	rcall	.-252    	; 0xd658 <xchg_spi>
    d754:	80 2f       	mov	r24, r16
    d756:	80 df       	rcall	.-256    	; 0xd658 <xchg_spi>
    d758:	81 2f       	mov	r24, r17
    d75a:	7e df       	rcall	.-260    	; 0xd658 <xchg_spi>
    d75c:	8d 2f       	mov	r24, r29
    d75e:	7c df       	rcall	.-264    	; 0xd658 <xchg_spi>
    d760:	cc 23       	and	r28, r28
    d762:	c9 f0       	breq	.+50     	; 0xd796 <send_cmd+0x78>
    d764:	06 c0       	rjmp	.+12     	; 0xd772 <send_cmd+0x54>
    d766:	7a df       	rcall	.-268    	; 0xd65c <deselect>
    d768:	b8 df       	rcall	.-144    	; 0xd6da <select>
    d76a:	89 2b       	or	r24, r25
    d76c:	71 f7       	brne	.-36     	; 0xd74a <send_cmd+0x2c>
    d76e:	8f ef       	ldi	r24, 0xFF	; 255
    d770:	14 c0       	rjmp	.+40     	; 0xd79a <send_cmd+0x7c>
    d772:	c8 30       	cpi	r28, 0x08	; 8
    d774:	11 f4       	brne	.+4      	; 0xd77a <send_cmd+0x5c>
    d776:	87 e8       	ldi	r24, 0x87	; 135
    d778:	01 c0       	rjmp	.+2      	; 0xd77c <send_cmd+0x5e>
    d77a:	81 e0       	ldi	r24, 0x01	; 1
    d77c:	6d df       	rcall	.-294    	; 0xd658 <xchg_spi>
    d77e:	cc 30       	cpi	r28, 0x0C	; 12
    d780:	11 f4       	brne	.+4      	; 0xd786 <send_cmd+0x68>
    d782:	8f ef       	ldi	r24, 0xFF	; 255
    d784:	69 df       	rcall	.-302    	; 0xd658 <xchg_spi>
    d786:	ca e0       	ldi	r28, 0x0A	; 10
    d788:	8f ef       	ldi	r24, 0xFF	; 255
    d78a:	3e d4       	rcall	.+2172   	; 0xe008 <mmc_spi_TXRX>
    d78c:	87 ff       	sbrs	r24, 7
    d78e:	05 c0       	rjmp	.+10     	; 0xd79a <send_cmd+0x7c>
    d790:	c1 50       	subi	r28, 0x01	; 1
    d792:	d1 f7       	brne	.-12     	; 0xd788 <send_cmd+0x6a>
    d794:	02 c0       	rjmp	.+4      	; 0xd79a <send_cmd+0x7c>
    d796:	85 e9       	ldi	r24, 0x95	; 149
    d798:	f5 cf       	rjmp	.-22     	; 0xd784 <send_cmd+0x66>
    d79a:	cd b7       	in	r28, 0x3d	; 61
    d79c:	de b7       	in	r29, 0x3e	; 62
    d79e:	e5 e0       	ldi	r30, 0x05	; 5
    d7a0:	0c 94 f1 e3 	jmp	0x1c7e2	; 0x1c7e2 <__epilogue_restores__+0x1a>

0000d7a4 <xmit_datablock>:
    d7a4:	0f 93       	push	r16
    d7a6:	1f 93       	push	r17
    d7a8:	cf 93       	push	r28
    d7aa:	8c 01       	movw	r16, r24
    d7ac:	c6 2f       	mov	r28, r22
    d7ae:	2c 9a       	sbi	0x05, 4	; 5
    d7b0:	24 9a       	sbi	0x04, 4	; 4
    d7b2:	88 ee       	ldi	r24, 0xE8	; 232
    d7b4:	93 e0       	ldi	r25, 0x03	; 3
    d7b6:	7f df       	rcall	.-258    	; 0xd6b6 <wait_ready>
    d7b8:	89 2b       	or	r24, r25
    d7ba:	19 f4       	brne	.+6      	; 0xd7c2 <xmit_datablock+0x1e>
    d7bc:	80 e0       	ldi	r24, 0x00	; 0
    d7be:	90 e0       	ldi	r25, 0x00	; 0
    d7c0:	17 c0       	rjmp	.+46     	; 0xd7f0 <xmit_datablock+0x4c>
    d7c2:	8c 2f       	mov	r24, r28
    d7c4:	49 df       	rcall	.-366    	; 0xd658 <xchg_spi>
    d7c6:	cd 3f       	cpi	r28, 0xFD	; 253
    d7c8:	29 f4       	brne	.+10     	; 0xd7d4 <xmit_datablock+0x30>
    d7ca:	46 98       	cbi	0x08, 6	; 8
    d7cc:	3e 9a       	sbi	0x07, 6	; 7
    d7ce:	81 e0       	ldi	r24, 0x01	; 1
    d7d0:	90 e0       	ldi	r25, 0x00	; 0
    d7d2:	0e c0       	rjmp	.+28     	; 0xd7f0 <xmit_datablock+0x4c>
    d7d4:	60 e0       	ldi	r22, 0x00	; 0
    d7d6:	72 e0       	ldi	r23, 0x02	; 2
    d7d8:	c8 01       	movw	r24, r16
    d7da:	10 d4       	rcall	.+2080   	; 0xdffc <mmc_spi_TX_buffer>
    d7dc:	8f ef       	ldi	r24, 0xFF	; 255
    d7de:	3c df       	rcall	.-392    	; 0xd658 <xchg_spi>
    d7e0:	8f ef       	ldi	r24, 0xFF	; 255
    d7e2:	3a df       	rcall	.-396    	; 0xd658 <xchg_spi>
    d7e4:	8f ef       	ldi	r24, 0xFF	; 255
    d7e6:	10 d4       	rcall	.+2080   	; 0xe008 <mmc_spi_TXRX>
    d7e8:	8f 71       	andi	r24, 0x1F	; 31
    d7ea:	85 30       	cpi	r24, 0x05	; 5
    d7ec:	39 f7       	brne	.-50     	; 0xd7bc <xmit_datablock+0x18>
    d7ee:	ed cf       	rjmp	.-38     	; 0xd7ca <xmit_datablock+0x26>
    d7f0:	cf 91       	pop	r28
    d7f2:	1f 91       	pop	r17
    d7f4:	0f 91       	pop	r16
    d7f6:	08 95       	ret

0000d7f8 <mmc_disk_initialize>:
    d7f8:	a4 e0       	ldi	r26, 0x04	; 4
    d7fa:	b0 e0       	ldi	r27, 0x00	; 0
    d7fc:	e2 e0       	ldi	r30, 0x02	; 2
    d7fe:	fc e6       	ldi	r31, 0x6C	; 108
    d800:	0c 94 d2 e3 	jmp	0x1c7a4	; 0x1c7a4 <__prologue_saves__+0x14>
    d804:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Stat>
    d808:	81 fd       	sbrc	r24, 1
    d80a:	8d c0       	rjmp	.+282    	; 0xd926 <mmc_disk_initialize+0x12e>
    d80c:	d8 d3       	rcall	.+1968   	; 0xdfbe <mmc_slow>
    d80e:	1a e0       	ldi	r17, 0x0A	; 10
    d810:	8f ef       	ldi	r24, 0xFF	; 255
    d812:	22 df       	rcall	.-444    	; 0xd658 <xchg_spi>
    d814:	11 50       	subi	r17, 0x01	; 1
    d816:	e1 f7       	brne	.-8      	; 0xd810 <mmc_disk_initialize+0x18>
    d818:	40 e0       	ldi	r20, 0x00	; 0
    d81a:	50 e0       	ldi	r21, 0x00	; 0
    d81c:	ba 01       	movw	r22, r20
    d81e:	80 e0       	ldi	r24, 0x00	; 0
    d820:	7e df       	rcall	.-260    	; 0xd71e <send_cmd>
    d822:	81 30       	cpi	r24, 0x01	; 1
    d824:	09 f0       	breq	.+2      	; 0xd828 <mmc_disk_initialize+0x30>
    d826:	6f c0       	rjmp	.+222    	; 0xd906 <mmc_disk_initialize+0x10e>
    d828:	80 ed       	ldi	r24, 0xD0	; 208
    d82a:	97 e0       	ldi	r25, 0x07	; 7
    d82c:	f0 d3       	rcall	.+2016   	; 0xe00e <mmc_set_ms_timeout>
    d82e:	4a ea       	ldi	r20, 0xAA	; 170
    d830:	51 e0       	ldi	r21, 0x01	; 1
    d832:	60 e0       	ldi	r22, 0x00	; 0
    d834:	70 e0       	ldi	r23, 0x00	; 0
    d836:	88 e0       	ldi	r24, 0x08	; 8
    d838:	72 df       	rcall	.-284    	; 0xd71e <send_cmd>
    d83a:	81 30       	cpi	r24, 0x01	; 1
    d83c:	09 f0       	breq	.+2      	; 0xd840 <mmc_disk_initialize+0x48>
    d83e:	3d c0       	rjmp	.+122    	; 0xd8ba <mmc_disk_initialize+0xc2>
    d840:	8e 01       	movw	r16, r28
    d842:	0f 5f       	subi	r16, 0xFF	; 255
    d844:	1f 4f       	sbci	r17, 0xFF	; 255
    d846:	6e 01       	movw	r12, r28
    d848:	85 e0       	ldi	r24, 0x05	; 5
    d84a:	c8 0e       	add	r12, r24
    d84c:	d1 1c       	adc	r13, r1
    d84e:	78 01       	movw	r14, r16
    d850:	8f ef       	ldi	r24, 0xFF	; 255
    d852:	da d3       	rcall	.+1972   	; 0xe008 <mmc_spi_TXRX>
    d854:	f7 01       	movw	r30, r14
    d856:	81 93       	st	Z+, r24
    d858:	7f 01       	movw	r14, r30
    d85a:	ce 16       	cp	r12, r30
    d85c:	df 06       	cpc	r13, r31
    d85e:	c1 f7       	brne	.-16     	; 0xd850 <mmc_disk_initialize+0x58>
    d860:	8b 81       	ldd	r24, Y+3	; 0x03
    d862:	81 30       	cpi	r24, 0x01	; 1
    d864:	09 f0       	breq	.+2      	; 0xd868 <mmc_disk_initialize+0x70>
    d866:	4f c0       	rjmp	.+158    	; 0xd906 <mmc_disk_initialize+0x10e>
    d868:	8c 81       	ldd	r24, Y+4	; 0x04
    d86a:	8a 3a       	cpi	r24, 0xAA	; 170
    d86c:	09 f0       	breq	.+2      	; 0xd870 <mmc_disk_initialize+0x78>
    d86e:	4b c0       	rjmp	.+150    	; 0xd906 <mmc_disk_initialize+0x10e>
    d870:	d5 d3       	rcall	.+1962   	; 0xe01c <mmc_test_timeout>
    d872:	89 2b       	or	r24, r25
    d874:	29 f0       	breq	.+10     	; 0xd880 <mmc_disk_initialize+0x88>
    d876:	d2 d3       	rcall	.+1956   	; 0xe01c <mmc_test_timeout>
    d878:	89 2b       	or	r24, r25
    d87a:	09 f0       	breq	.+2      	; 0xd87e <mmc_disk_initialize+0x86>
    d87c:	44 c0       	rjmp	.+136    	; 0xd906 <mmc_disk_initialize+0x10e>
    d87e:	09 c0       	rjmp	.+18     	; 0xd892 <mmc_disk_initialize+0x9a>
    d880:	40 e0       	ldi	r20, 0x00	; 0
    d882:	50 e0       	ldi	r21, 0x00	; 0
    d884:	60 e0       	ldi	r22, 0x00	; 0
    d886:	70 e4       	ldi	r23, 0x40	; 64
    d888:	89 ea       	ldi	r24, 0xA9	; 169
    d88a:	49 df       	rcall	.-366    	; 0xd71e <send_cmd>
    d88c:	81 11       	cpse	r24, r1
    d88e:	f0 cf       	rjmp	.-32     	; 0xd870 <mmc_disk_initialize+0x78>
    d890:	f2 cf       	rjmp	.-28     	; 0xd876 <mmc_disk_initialize+0x7e>
    d892:	40 e0       	ldi	r20, 0x00	; 0
    d894:	50 e0       	ldi	r21, 0x00	; 0
    d896:	ba 01       	movw	r22, r20
    d898:	8a e3       	ldi	r24, 0x3A	; 58
    d89a:	41 df       	rcall	.-382    	; 0xd71e <send_cmd>
    d89c:	81 11       	cpse	r24, r1
    d89e:	33 c0       	rjmp	.+102    	; 0xd906 <mmc_disk_initialize+0x10e>
    d8a0:	8f ef       	ldi	r24, 0xFF	; 255
    d8a2:	b2 d3       	rcall	.+1892   	; 0xe008 <mmc_spi_TXRX>
    d8a4:	f8 01       	movw	r30, r16
    d8a6:	81 93       	st	Z+, r24
    d8a8:	8f 01       	movw	r16, r30
    d8aa:	ce 16       	cp	r12, r30
    d8ac:	df 06       	cpc	r13, r31
    d8ae:	c1 f7       	brne	.-16     	; 0xd8a0 <mmc_disk_initialize+0xa8>
    d8b0:	89 81       	ldd	r24, Y+1	; 0x01
    d8b2:	86 fd       	sbrc	r24, 6
    d8b4:	2a c0       	rjmp	.+84     	; 0xd90a <mmc_disk_initialize+0x112>
    d8b6:	14 e0       	ldi	r17, 0x04	; 4
    d8b8:	29 c0       	rjmp	.+82     	; 0xd90c <mmc_disk_initialize+0x114>
    d8ba:	80 ed       	ldi	r24, 0xD0	; 208
    d8bc:	97 e0       	ldi	r25, 0x07	; 7
    d8be:	a7 d3       	rcall	.+1870   	; 0xe00e <mmc_set_ms_timeout>
    d8c0:	40 e0       	ldi	r20, 0x00	; 0
    d8c2:	50 e0       	ldi	r21, 0x00	; 0
    d8c4:	ba 01       	movw	r22, r20
    d8c6:	89 ea       	ldi	r24, 0xA9	; 169
    d8c8:	2a df       	rcall	.-428    	; 0xd71e <send_cmd>
    d8ca:	82 30       	cpi	r24, 0x02	; 2
    d8cc:	18 f0       	brcs	.+6      	; 0xd8d4 <mmc_disk_initialize+0xdc>
    d8ce:	11 e0       	ldi	r17, 0x01	; 1
    d8d0:	01 e0       	ldi	r16, 0x01	; 1
    d8d2:	02 c0       	rjmp	.+4      	; 0xd8d8 <mmc_disk_initialize+0xe0>
    d8d4:	12 e0       	ldi	r17, 0x02	; 2
    d8d6:	09 ea       	ldi	r16, 0xA9	; 169
    d8d8:	a1 d3       	rcall	.+1858   	; 0xe01c <mmc_test_timeout>
    d8da:	89 2b       	or	r24, r25
    d8dc:	21 f0       	breq	.+8      	; 0xd8e6 <mmc_disk_initialize+0xee>
    d8de:	9e d3       	rcall	.+1852   	; 0xe01c <mmc_test_timeout>
    d8e0:	89 2b       	or	r24, r25
    d8e2:	89 f4       	brne	.+34     	; 0xd906 <mmc_disk_initialize+0x10e>
    d8e4:	08 c0       	rjmp	.+16     	; 0xd8f6 <mmc_disk_initialize+0xfe>
    d8e6:	40 e0       	ldi	r20, 0x00	; 0
    d8e8:	50 e0       	ldi	r21, 0x00	; 0
    d8ea:	ba 01       	movw	r22, r20
    d8ec:	80 2f       	mov	r24, r16
    d8ee:	17 df       	rcall	.-466    	; 0xd71e <send_cmd>
    d8f0:	81 11       	cpse	r24, r1
    d8f2:	f2 cf       	rjmp	.-28     	; 0xd8d8 <mmc_disk_initialize+0xe0>
    d8f4:	f4 cf       	rjmp	.-24     	; 0xd8de <mmc_disk_initialize+0xe6>
    d8f6:	40 e0       	ldi	r20, 0x00	; 0
    d8f8:	52 e0       	ldi	r21, 0x02	; 2
    d8fa:	60 e0       	ldi	r22, 0x00	; 0
    d8fc:	70 e0       	ldi	r23, 0x00	; 0
    d8fe:	80 e1       	ldi	r24, 0x10	; 16
    d900:	0e df       	rcall	.-484    	; 0xd71e <send_cmd>
    d902:	88 23       	and	r24, r24
    d904:	19 f0       	breq	.+6      	; 0xd90c <mmc_disk_initialize+0x114>
    d906:	10 e0       	ldi	r17, 0x00	; 0
    d908:	01 c0       	rjmp	.+2      	; 0xd90c <mmc_disk_initialize+0x114>
    d90a:	1c e0       	ldi	r17, 0x0C	; 12
    d90c:	10 93 bf 17 	sts	0x17BF, r17	; 0x8017bf <CardType>
    d910:	a5 de       	rcall	.-694    	; 0xd65c <deselect>
    d912:	11 23       	and	r17, r17
    d914:	39 f0       	breq	.+14     	; 0xd924 <mmc_disk_initialize+0x12c>
    d916:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Stat>
    d91a:	8e 7f       	andi	r24, 0xFE	; 254
    d91c:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <Stat>
    d920:	60 d3       	rcall	.+1728   	; 0xdfe2 <mmc_fast>
    d922:	01 c0       	rjmp	.+2      	; 0xd926 <mmc_disk_initialize+0x12e>
    d924:	3b d4       	rcall	.+2166   	; 0xe19c <mmc_power_off>
    d926:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Stat>
    d92a:	24 96       	adiw	r28, 0x04	; 4
    d92c:	e8 e0       	ldi	r30, 0x08	; 8
    d92e:	0c 94 ee e3 	jmp	0x1c7dc	; 0x1c7dc <__epilogue_restores__+0x14>

0000d932 <mmc_disk_status>:
    d932:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Stat>
    d936:	08 95       	ret

0000d938 <mmc_disk_read>:
    d938:	ef 92       	push	r14
    d93a:	ff 92       	push	r15
    d93c:	1f 93       	push	r17
    d93e:	cf 93       	push	r28
    d940:	df 93       	push	r29
    d942:	7c 01       	movw	r14, r24
    d944:	e9 01       	movw	r28, r18
    d946:	20 97       	sbiw	r28, 0x00	; 0
    d948:	19 f4       	brne	.+6      	; 0xd950 <mmc_disk_read+0x18>
    d94a:	88 de       	rcall	.-752    	; 0xd65c <deselect>
    d94c:	84 e0       	ldi	r24, 0x04	; 4
    d94e:	06 c0       	rjmp	.+12     	; 0xd95c <mmc_disk_read+0x24>
    d950:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Stat>
    d954:	80 ff       	sbrs	r24, 0
    d956:	04 c0       	rjmp	.+8      	; 0xd960 <mmc_disk_read+0x28>
    d958:	81 de       	rcall	.-766    	; 0xd65c <deselect>
    d95a:	83 e0       	ldi	r24, 0x03	; 3
    d95c:	90 e0       	ldi	r25, 0x00	; 0
    d95e:	2c c0       	rjmp	.+88     	; 0xd9b8 <mmc_disk_read+0x80>
    d960:	80 91 bf 17 	lds	r24, 0x17BF	; 0x8017bf <CardType>
    d964:	83 fd       	sbrc	r24, 3
    d966:	07 c0       	rjmp	.+14     	; 0xd976 <mmc_disk_read+0x3e>
    d968:	89 e0       	ldi	r24, 0x09	; 9
    d96a:	44 0f       	add	r20, r20
    d96c:	55 1f       	adc	r21, r21
    d96e:	66 1f       	adc	r22, r22
    d970:	77 1f       	adc	r23, r23
    d972:	8a 95       	dec	r24
    d974:	d1 f7       	brne	.-12     	; 0xd96a <mmc_disk_read+0x32>
    d976:	c2 30       	cpi	r28, 0x02	; 2
    d978:	d1 05       	cpc	r29, r1
    d97a:	10 f4       	brcc	.+4      	; 0xd980 <mmc_disk_read+0x48>
    d97c:	11 e1       	ldi	r17, 0x11	; 17
    d97e:	01 c0       	rjmp	.+2      	; 0xd982 <mmc_disk_read+0x4a>
    d980:	12 e1       	ldi	r17, 0x12	; 18
    d982:	81 2f       	mov	r24, r17
    d984:	cc de       	rcall	.-616    	; 0xd71e <send_cmd>
    d986:	81 11       	cpse	r24, r1
    d988:	11 c0       	rjmp	.+34     	; 0xd9ac <mmc_disk_read+0x74>
    d98a:	60 e0       	ldi	r22, 0x00	; 0
    d98c:	72 e0       	ldi	r23, 0x02	; 2
    d98e:	c7 01       	movw	r24, r14
    d990:	6b de       	rcall	.-810    	; 0xd668 <rcvr_datablock>
    d992:	89 2b       	or	r24, r25
    d994:	21 f0       	breq	.+8      	; 0xd99e <mmc_disk_read+0x66>
    d996:	8e ef       	ldi	r24, 0xFE	; 254
    d998:	f8 1a       	sub	r15, r24
    d99a:	21 97       	sbiw	r28, 0x01	; 1
    d99c:	b1 f7       	brne	.-20     	; 0xd98a <mmc_disk_read+0x52>
    d99e:	12 31       	cpi	r17, 0x12	; 18
    d9a0:	29 f4       	brne	.+10     	; 0xd9ac <mmc_disk_read+0x74>
    d9a2:	40 e0       	ldi	r20, 0x00	; 0
    d9a4:	50 e0       	ldi	r21, 0x00	; 0
    d9a6:	ba 01       	movw	r22, r20
    d9a8:	8c e0       	ldi	r24, 0x0C	; 12
    d9aa:	b9 de       	rcall	.-654    	; 0xd71e <send_cmd>
    d9ac:	57 de       	rcall	.-850    	; 0xd65c <deselect>
    d9ae:	81 e0       	ldi	r24, 0x01	; 1
    d9b0:	90 e0       	ldi	r25, 0x00	; 0
    d9b2:	cd 2b       	or	r28, r29
    d9b4:	09 f4       	brne	.+2      	; 0xd9b8 <mmc_disk_read+0x80>
    d9b6:	80 e0       	ldi	r24, 0x00	; 0
    d9b8:	df 91       	pop	r29
    d9ba:	cf 91       	pop	r28
    d9bc:	1f 91       	pop	r17
    d9be:	ff 90       	pop	r15
    d9c0:	ef 90       	pop	r14
    d9c2:	08 95       	ret

0000d9c4 <mmc_disk_write>:
    d9c4:	a0 e0       	ldi	r26, 0x00	; 0
    d9c6:	b0 e0       	ldi	r27, 0x00	; 0
    d9c8:	e8 ee       	ldi	r30, 0xE8	; 232
    d9ca:	fc e6       	ldi	r31, 0x6C	; 108
    d9cc:	0c 94 d2 e3 	jmp	0x1c7a4	; 0x1c7a4 <__prologue_saves__+0x14>
    d9d0:	8c 01       	movw	r16, r24
    d9d2:	6a 01       	movw	r12, r20
    d9d4:	7b 01       	movw	r14, r22
    d9d6:	e9 01       	movw	r28, r18
    d9d8:	20 97       	sbiw	r28, 0x00	; 0
    d9da:	19 f4       	brne	.+6      	; 0xd9e2 <mmc_disk_write+0x1e>
    d9dc:	3f de       	rcall	.-898    	; 0xd65c <deselect>
    d9de:	84 e0       	ldi	r24, 0x04	; 4
    d9e0:	06 c0       	rjmp	.+12     	; 0xd9ee <mmc_disk_write+0x2a>
    d9e2:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Stat>
    d9e6:	80 ff       	sbrs	r24, 0
    d9e8:	04 c0       	rjmp	.+8      	; 0xd9f2 <mmc_disk_write+0x2e>
    d9ea:	38 de       	rcall	.-912    	; 0xd65c <deselect>
    d9ec:	83 e0       	ldi	r24, 0x03	; 3
    d9ee:	90 e0       	ldi	r25, 0x00	; 0
    d9f0:	49 c0       	rjmp	.+146    	; 0xda84 <mmc_disk_write+0xc0>
    d9f2:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Stat>
    d9f6:	82 ff       	sbrs	r24, 2
    d9f8:	03 c0       	rjmp	.+6      	; 0xda00 <mmc_disk_write+0x3c>
    d9fa:	30 de       	rcall	.-928    	; 0xd65c <deselect>
    d9fc:	82 e0       	ldi	r24, 0x02	; 2
    d9fe:	f7 cf       	rjmp	.-18     	; 0xd9ee <mmc_disk_write+0x2a>
    da00:	80 91 bf 17 	lds	r24, 0x17BF	; 0x8017bf <CardType>
    da04:	83 fd       	sbrc	r24, 3
    da06:	07 c0       	rjmp	.+14     	; 0xda16 <mmc_disk_write+0x52>
    da08:	99 e0       	ldi	r25, 0x09	; 9
    da0a:	cc 0c       	add	r12, r12
    da0c:	dd 1c       	adc	r13, r13
    da0e:	ee 1c       	adc	r14, r14
    da10:	ff 1c       	adc	r15, r15
    da12:	9a 95       	dec	r25
    da14:	d1 f7       	brne	.-12     	; 0xda0a <mmc_disk_write+0x46>
    da16:	c1 30       	cpi	r28, 0x01	; 1
    da18:	d1 05       	cpc	r29, r1
    da1a:	89 f4       	brne	.+34     	; 0xda3e <mmc_disk_write+0x7a>
    da1c:	b7 01       	movw	r22, r14
    da1e:	a6 01       	movw	r20, r12
    da20:	88 e1       	ldi	r24, 0x18	; 24
    da22:	7d de       	rcall	.-774    	; 0xd71e <send_cmd>
    da24:	81 11       	cpse	r24, r1
    da26:	26 c0       	rjmp	.+76     	; 0xda74 <mmc_disk_write+0xb0>
    da28:	6e ef       	ldi	r22, 0xFE	; 254
    da2a:	c8 01       	movw	r24, r16
    da2c:	bb de       	rcall	.-650    	; 0xd7a4 <xmit_datablock>
    da2e:	31 e0       	ldi	r19, 0x01	; 1
    da30:	20 e0       	ldi	r18, 0x00	; 0
    da32:	89 2b       	or	r24, r25
    da34:	09 f0       	breq	.+2      	; 0xda38 <mmc_disk_write+0x74>
    da36:	30 e0       	ldi	r19, 0x00	; 0
    da38:	c3 2f       	mov	r28, r19
    da3a:	d2 2f       	mov	r29, r18
    da3c:	1d c0       	rjmp	.+58     	; 0xda78 <mmc_disk_write+0xb4>
    da3e:	86 70       	andi	r24, 0x06	; 6
    da40:	29 f0       	breq	.+10     	; 0xda4c <mmc_disk_write+0x88>
    da42:	ae 01       	movw	r20, r28
    da44:	60 e0       	ldi	r22, 0x00	; 0
    da46:	70 e0       	ldi	r23, 0x00	; 0
    da48:	87 e9       	ldi	r24, 0x97	; 151
    da4a:	69 de       	rcall	.-814    	; 0xd71e <send_cmd>
    da4c:	b7 01       	movw	r22, r14
    da4e:	a6 01       	movw	r20, r12
    da50:	89 e1       	ldi	r24, 0x19	; 25
    da52:	65 de       	rcall	.-822    	; 0xd71e <send_cmd>
    da54:	81 11       	cpse	r24, r1
    da56:	10 c0       	rjmp	.+32     	; 0xda78 <mmc_disk_write+0xb4>
    da58:	6c ef       	ldi	r22, 0xFC	; 252
    da5a:	c8 01       	movw	r24, r16
    da5c:	a3 de       	rcall	.-698    	; 0xd7a4 <xmit_datablock>
    da5e:	89 2b       	or	r24, r25
    da60:	19 f0       	breq	.+6      	; 0xda68 <mmc_disk_write+0xa4>
    da62:	1e 5f       	subi	r17, 0xFE	; 254
    da64:	21 97       	sbiw	r28, 0x01	; 1
    da66:	c1 f7       	brne	.-16     	; 0xda58 <mmc_disk_write+0x94>
    da68:	6d ef       	ldi	r22, 0xFD	; 253
    da6a:	80 e0       	ldi	r24, 0x00	; 0
    da6c:	90 e0       	ldi	r25, 0x00	; 0
    da6e:	9a de       	rcall	.-716    	; 0xd7a4 <xmit_datablock>
    da70:	89 2b       	or	r24, r25
    da72:	11 f4       	brne	.+4      	; 0xda78 <mmc_disk_write+0xb4>
    da74:	c1 e0       	ldi	r28, 0x01	; 1
    da76:	d0 e0       	ldi	r29, 0x00	; 0
    da78:	f1 dd       	rcall	.-1054   	; 0xd65c <deselect>
    da7a:	81 e0       	ldi	r24, 0x01	; 1
    da7c:	90 e0       	ldi	r25, 0x00	; 0
    da7e:	cd 2b       	or	r28, r29
    da80:	09 f4       	brne	.+2      	; 0xda84 <mmc_disk_write+0xc0>
    da82:	80 e0       	ldi	r24, 0x00	; 0
    da84:	cd b7       	in	r28, 0x3d	; 61
    da86:	de b7       	in	r29, 0x3e	; 62
    da88:	e8 e0       	ldi	r30, 0x08	; 8
    da8a:	0c 94 ee e3 	jmp	0x1c7dc	; 0x1c7dc <__epilogue_restores__+0x14>

0000da8e <mmc_disk_ioctl>:
    da8e:	a0 e1       	ldi	r26, 0x10	; 16
    da90:	b0 e0       	ldi	r27, 0x00	; 0
    da92:	ed e4       	ldi	r30, 0x4D	; 77
    da94:	fd e6       	ldi	r31, 0x6D	; 109
    da96:	0c 94 d2 e3 	jmp	0x1c7a4	; 0x1c7a4 <__prologue_saves__+0x14>
    da9a:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <Stat>
    da9e:	90 fd       	sbrc	r25, 0
    daa0:	2b c2       	rjmp	.+1110   	; 0xdef8 <mmc_disk_ioctl+0x46a>
    daa2:	8b 01       	movw	r16, r22
    daa4:	83 33       	cpi	r24, 0x33	; 51
    daa6:	09 f4       	brne	.+2      	; 0xdaaa <mmc_disk_ioctl+0x1c>
    daa8:	01 c1       	rjmp	.+514    	; 0xdcac <mmc_disk_ioctl+0x21e>
    daaa:	a0 f4       	brcc	.+40     	; 0xdad4 <mmc_disk_ioctl+0x46>
    daac:	83 30       	cpi	r24, 0x03	; 3
    daae:	09 f4       	brne	.+2      	; 0xdab2 <mmc_disk_ioctl+0x24>
    dab0:	85 c0       	rjmp	.+266    	; 0xdbbc <mmc_disk_ioctl+0x12e>
    dab2:	28 f4       	brcc	.+10     	; 0xdabe <mmc_disk_ioctl+0x30>
    dab4:	88 23       	and	r24, r24
    dab6:	11 f1       	breq	.+68     	; 0xdafc <mmc_disk_ioctl+0x6e>
    dab8:	81 30       	cpi	r24, 0x01	; 1
    daba:	11 f1       	breq	.+68     	; 0xdb00 <mmc_disk_ioctl+0x72>
    dabc:	1f c2       	rjmp	.+1086   	; 0xdefc <mmc_disk_ioctl+0x46e>
    dabe:	87 30       	cpi	r24, 0x07	; 7
    dac0:	09 f4       	brne	.+2      	; 0xdac4 <mmc_disk_ioctl+0x36>
    dac2:	2a c1       	rjmp	.+596    	; 0xdd18 <mmc_disk_ioctl+0x28a>
    dac4:	82 33       	cpi	r24, 0x32	; 50
    dac6:	09 f0       	breq	.+2      	; 0xdaca <mmc_disk_ioctl+0x3c>
    dac8:	19 c2       	rjmp	.+1074   	; 0xdefc <mmc_disk_ioctl+0x46e>
    daca:	80 91 bf 17 	lds	r24, 0x17BF	; 0x8017bf <CardType>
    dace:	fb 01       	movw	r30, r22
    dad0:	80 83       	st	Z, r24
    dad2:	28 c1       	rjmp	.+592    	; 0xdd24 <mmc_disk_ioctl+0x296>
    dad4:	86 33       	cpi	r24, 0x36	; 54
    dad6:	09 f4       	brne	.+2      	; 0xdada <mmc_disk_ioctl+0x4c>
    dad8:	0c c1       	rjmp	.+536    	; 0xdcf2 <mmc_disk_ioctl+0x264>
    dada:	38 f4       	brcc	.+14     	; 0xdaea <mmc_disk_ioctl+0x5c>
    dadc:	84 33       	cpi	r24, 0x34	; 52
    dade:	09 f4       	brne	.+2      	; 0xdae2 <mmc_disk_ioctl+0x54>
    dae0:	ea c0       	rjmp	.+468    	; 0xdcb6 <mmc_disk_ioctl+0x228>
    dae2:	85 33       	cpi	r24, 0x35	; 53
    dae4:	09 f4       	brne	.+2      	; 0xdae8 <mmc_disk_ioctl+0x5a>
    dae6:	f1 c0       	rjmp	.+482    	; 0xdcca <mmc_disk_ioctl+0x23c>
    dae8:	09 c2       	rjmp	.+1042   	; 0xdefc <mmc_disk_ioctl+0x46e>
    daea:	88 33       	cpi	r24, 0x38	; 56
    daec:	09 f4       	brne	.+2      	; 0xdaf0 <mmc_disk_ioctl+0x62>
    daee:	74 c1       	rjmp	.+744    	; 0xddd8 <mmc_disk_ioctl+0x34a>
    daf0:	08 f4       	brcc	.+2      	; 0xdaf4 <mmc_disk_ioctl+0x66>
    daf2:	1a c1       	rjmp	.+564    	; 0xdd28 <mmc_disk_ioctl+0x29a>
    daf4:	89 33       	cpi	r24, 0x39	; 57
    daf6:	09 f4       	brne	.+2      	; 0xdafa <mmc_disk_ioctl+0x6c>
    daf8:	bc c1       	rjmp	.+888    	; 0xde72 <mmc_disk_ioctl+0x3e4>
    dafa:	00 c2       	rjmp	.+1024   	; 0xdefc <mmc_disk_ioctl+0x46e>
    dafc:	ee dd       	rcall	.-1060   	; 0xd6da <select>
    dafe:	06 c1       	rjmp	.+524    	; 0xdd0c <mmc_disk_ioctl+0x27e>
    db00:	40 e0       	ldi	r20, 0x00	; 0
    db02:	50 e0       	ldi	r21, 0x00	; 0
    db04:	ba 01       	movw	r22, r20
    db06:	89 e0       	ldi	r24, 0x09	; 9
    db08:	0a de       	rcall	.-1004   	; 0xd71e <send_cmd>
    db0a:	81 11       	cpse	r24, r1
    db0c:	f1 c1       	rjmp	.+994    	; 0xdef0 <mmc_disk_ioctl+0x462>
    db0e:	60 e1       	ldi	r22, 0x10	; 16
    db10:	70 e0       	ldi	r23, 0x00	; 0
    db12:	ce 01       	movw	r24, r28
    db14:	01 96       	adiw	r24, 0x01	; 1
    db16:	a8 dd       	rcall	.-1200   	; 0xd668 <rcvr_datablock>
    db18:	89 2b       	or	r24, r25
    db1a:	09 f4       	brne	.+2      	; 0xdb1e <mmc_disk_ioctl+0x90>
    db1c:	e9 c1       	rjmp	.+978    	; 0xdef0 <mmc_disk_ioctl+0x462>
    db1e:	99 81       	ldd	r25, Y+1	; 0x01
    db20:	92 95       	swap	r25
    db22:	96 95       	lsr	r25
    db24:	96 95       	lsr	r25
    db26:	93 70       	andi	r25, 0x03	; 3
    db28:	29 85       	ldd	r18, Y+9	; 0x09
    db2a:	4a 85       	ldd	r20, Y+10	; 0x0a
    db2c:	88 85       	ldd	r24, Y+8	; 0x08
    db2e:	91 30       	cpi	r25, 0x01	; 1
    db30:	d9 f4       	brne	.+54     	; 0xdb68 <mmc_disk_ioctl+0xda>
    db32:	30 e0       	ldi	r19, 0x00	; 0
    db34:	32 2f       	mov	r19, r18
    db36:	22 27       	eor	r18, r18
    db38:	24 0f       	add	r18, r20
    db3a:	31 1d       	adc	r19, r1
    db3c:	8f 73       	andi	r24, 0x3F	; 63
    db3e:	90 e0       	ldi	r25, 0x00	; 0
    db40:	a0 e0       	ldi	r26, 0x00	; 0
    db42:	b0 e0       	ldi	r27, 0x00	; 0
    db44:	dc 01       	movw	r26, r24
    db46:	99 27       	eor	r25, r25
    db48:	88 27       	eor	r24, r24
    db4a:	01 96       	adiw	r24, 0x01	; 1
    db4c:	a1 1d       	adc	r26, r1
    db4e:	b1 1d       	adc	r27, r1
    db50:	82 0f       	add	r24, r18
    db52:	93 1f       	adc	r25, r19
    db54:	a1 1d       	adc	r26, r1
    db56:	b1 1d       	adc	r27, r1
    db58:	fa e0       	ldi	r31, 0x0A	; 10
    db5a:	88 0f       	add	r24, r24
    db5c:	99 1f       	adc	r25, r25
    db5e:	aa 1f       	adc	r26, r26
    db60:	bb 1f       	adc	r27, r27
    db62:	fa 95       	dec	r31
    db64:	d1 f7       	brne	.-12     	; 0xdb5a <mmc_disk_ioctl+0xcc>
    db66:	9b c0       	rjmp	.+310    	; 0xdc9e <mmc_disk_ioctl+0x210>
    db68:	22 95       	swap	r18
    db6a:	26 95       	lsr	r18
    db6c:	26 95       	lsr	r18
    db6e:	23 70       	andi	r18, 0x03	; 3
    db70:	f4 e0       	ldi	r31, 0x04	; 4
    db72:	8f 9f       	mul	r24, r31
    db74:	c0 01       	movw	r24, r0
    db76:	11 24       	eor	r1, r1
    db78:	82 0f       	add	r24, r18
    db7a:	91 1d       	adc	r25, r1
    db7c:	01 96       	adiw	r24, 0x01	; 1
    db7e:	2f 81       	ldd	r18, Y+7	; 0x07
    db80:	23 70       	andi	r18, 0x03	; 3
    db82:	30 e0       	ldi	r19, 0x00	; 0
    db84:	32 2f       	mov	r19, r18
    db86:	22 27       	eor	r18, r18
    db88:	33 0f       	add	r19, r19
    db8a:	33 0f       	add	r19, r19
    db8c:	82 0f       	add	r24, r18
    db8e:	93 1f       	adc	r25, r19
    db90:	a0 e0       	ldi	r26, 0x00	; 0
    db92:	b0 e0       	ldi	r27, 0x00	; 0
    db94:	2e 81       	ldd	r18, Y+6	; 0x06
    db96:	32 2f       	mov	r19, r18
    db98:	3f 70       	andi	r19, 0x0F	; 15
    db9a:	2b 85       	ldd	r18, Y+11	; 0x0b
    db9c:	22 1f       	adc	r18, r18
    db9e:	22 27       	eor	r18, r18
    dba0:	22 1f       	adc	r18, r18
    dba2:	23 0f       	add	r18, r19
    dba4:	43 70       	andi	r20, 0x03	; 3
    dba6:	44 0f       	add	r20, r20
    dba8:	42 0f       	add	r20, r18
    dbaa:	47 50       	subi	r20, 0x07	; 7
    dbac:	04 c0       	rjmp	.+8      	; 0xdbb6 <mmc_disk_ioctl+0x128>
    dbae:	88 0f       	add	r24, r24
    dbb0:	99 1f       	adc	r25, r25
    dbb2:	aa 1f       	adc	r26, r26
    dbb4:	bb 1f       	adc	r27, r27
    dbb6:	4a 95       	dec	r20
    dbb8:	d2 f7       	brpl	.-12     	; 0xdbae <mmc_disk_ioctl+0x120>
    dbba:	71 c0       	rjmp	.+226    	; 0xdc9e <mmc_disk_ioctl+0x210>
    dbbc:	80 91 bf 17 	lds	r24, 0x17BF	; 0x8017bf <CardType>
    dbc0:	40 e0       	ldi	r20, 0x00	; 0
    dbc2:	50 e0       	ldi	r21, 0x00	; 0
    dbc4:	ba 01       	movw	r22, r20
    dbc6:	82 ff       	sbrs	r24, 2
    dbc8:	24 c0       	rjmp	.+72     	; 0xdc12 <mmc_disk_ioctl+0x184>
    dbca:	8d e8       	ldi	r24, 0x8D	; 141
    dbcc:	a8 dd       	rcall	.-1200   	; 0xd71e <send_cmd>
    dbce:	81 11       	cpse	r24, r1
    dbd0:	8f c1       	rjmp	.+798    	; 0xdef0 <mmc_disk_ioctl+0x462>
    dbd2:	8f ef       	ldi	r24, 0xFF	; 255
    dbd4:	41 dd       	rcall	.-1406   	; 0xd658 <xchg_spi>
    dbd6:	60 e1       	ldi	r22, 0x10	; 16
    dbd8:	70 e0       	ldi	r23, 0x00	; 0
    dbda:	ce 01       	movw	r24, r28
    dbdc:	01 96       	adiw	r24, 0x01	; 1
    dbde:	44 dd       	rcall	.-1400   	; 0xd668 <rcvr_datablock>
    dbe0:	89 2b       	or	r24, r25
    dbe2:	09 f4       	brne	.+2      	; 0xdbe6 <mmc_disk_ioctl+0x158>
    dbe4:	85 c1       	rjmp	.+778    	; 0xdef0 <mmc_disk_ioctl+0x462>
    dbe6:	50 e3       	ldi	r21, 0x30	; 48
    dbe8:	f5 2e       	mov	r15, r21
    dbea:	8f ef       	ldi	r24, 0xFF	; 255
    dbec:	35 dd       	rcall	.-1430   	; 0xd658 <xchg_spi>
    dbee:	fa 94       	dec	r15
    dbf0:	f1 10       	cpse	r15, r1
    dbf2:	fb cf       	rjmp	.-10     	; 0xdbea <mmc_disk_ioctl+0x15c>
    dbf4:	2b 85       	ldd	r18, Y+11	; 0x0b
    dbf6:	22 95       	swap	r18
    dbf8:	2f 70       	andi	r18, 0x0F	; 15
    dbfa:	80 e1       	ldi	r24, 0x10	; 16
    dbfc:	90 e0       	ldi	r25, 0x00	; 0
    dbfe:	a0 e0       	ldi	r26, 0x00	; 0
    dc00:	b0 e0       	ldi	r27, 0x00	; 0
    dc02:	04 c0       	rjmp	.+8      	; 0xdc0c <mmc_disk_ioctl+0x17e>
    dc04:	88 0f       	add	r24, r24
    dc06:	99 1f       	adc	r25, r25
    dc08:	aa 1f       	adc	r26, r26
    dc0a:	bb 1f       	adc	r27, r27
    dc0c:	2a 95       	dec	r18
    dc0e:	d2 f7       	brpl	.-12     	; 0xdc04 <mmc_disk_ioctl+0x176>
    dc10:	46 c0       	rjmp	.+140    	; 0xdc9e <mmc_disk_ioctl+0x210>
    dc12:	89 e0       	ldi	r24, 0x09	; 9
    dc14:	84 dd       	rcall	.-1272   	; 0xd71e <send_cmd>
    dc16:	81 11       	cpse	r24, r1
    dc18:	6b c1       	rjmp	.+726    	; 0xdef0 <mmc_disk_ioctl+0x462>
    dc1a:	60 e1       	ldi	r22, 0x10	; 16
    dc1c:	70 e0       	ldi	r23, 0x00	; 0
    dc1e:	ce 01       	movw	r24, r28
    dc20:	01 96       	adiw	r24, 0x01	; 1
    dc22:	22 dd       	rcall	.-1468   	; 0xd668 <rcvr_datablock>
    dc24:	89 2b       	or	r24, r25
    dc26:	09 f4       	brne	.+2      	; 0xdc2a <mmc_disk_ioctl+0x19c>
    dc28:	63 c1       	rjmp	.+710    	; 0xdef0 <mmc_disk_ioctl+0x462>
    dc2a:	90 91 bf 17 	lds	r25, 0x17BF	; 0x8017bf <CardType>
    dc2e:	2b 85       	ldd	r18, Y+11	; 0x0b
    dc30:	8c 85       	ldd	r24, Y+12	; 0x0c
    dc32:	91 ff       	sbrs	r25, 1
    dc34:	16 c0       	rjmp	.+44     	; 0xdc62 <mmc_disk_ioctl+0x1d4>
    dc36:	2f 73       	andi	r18, 0x3F	; 63
    dc38:	88 1f       	adc	r24, r24
    dc3a:	88 27       	eor	r24, r24
    dc3c:	88 1f       	adc	r24, r24
    dc3e:	90 e0       	ldi	r25, 0x00	; 0
    dc40:	01 96       	adiw	r24, 0x01	; 1
    dc42:	82 0f       	add	r24, r18
    dc44:	91 1d       	adc	r25, r1
    dc46:	82 0f       	add	r24, r18
    dc48:	91 1d       	adc	r25, r1
    dc4a:	2e 85       	ldd	r18, Y+14	; 0x0e
    dc4c:	22 95       	swap	r18
    dc4e:	26 95       	lsr	r18
    dc50:	26 95       	lsr	r18
    dc52:	23 70       	andi	r18, 0x03	; 3
    dc54:	21 50       	subi	r18, 0x01	; 1
    dc56:	02 c0       	rjmp	.+4      	; 0xdc5c <mmc_disk_ioctl+0x1ce>
    dc58:	88 0f       	add	r24, r24
    dc5a:	99 1f       	adc	r25, r25
    dc5c:	2a 95       	dec	r18
    dc5e:	e2 f7       	brpl	.-8      	; 0xdc58 <mmc_disk_ioctl+0x1ca>
    dc60:	1c c0       	rjmp	.+56     	; 0xdc9a <mmc_disk_ioctl+0x20c>
    dc62:	38 2f       	mov	r19, r24
    dc64:	33 70       	andi	r19, 0x03	; 3
    dc66:	82 95       	swap	r24
    dc68:	86 95       	lsr	r24
    dc6a:	87 70       	andi	r24, 0x07	; 7
    dc6c:	90 e0       	ldi	r25, 0x00	; 0
    dc6e:	f8 e0       	ldi	r31, 0x08	; 8
    dc70:	3f 9f       	mul	r19, r31
    dc72:	80 0d       	add	r24, r0
    dc74:	91 1d       	adc	r25, r1
    dc76:	11 24       	eor	r1, r1
    dc78:	01 96       	adiw	r24, 0x01	; 1
    dc7a:	2c 77       	andi	r18, 0x7C	; 124
    dc7c:	30 e0       	ldi	r19, 0x00	; 0
    dc7e:	35 95       	asr	r19
    dc80:	27 95       	ror	r18
    dc82:	35 95       	asr	r19
    dc84:	27 95       	ror	r18
    dc86:	2f 5f       	subi	r18, 0xFF	; 255
    dc88:	3f 4f       	sbci	r19, 0xFF	; 255
    dc8a:	82 9f       	mul	r24, r18
    dc8c:	a0 01       	movw	r20, r0
    dc8e:	83 9f       	mul	r24, r19
    dc90:	50 0d       	add	r21, r0
    dc92:	92 9f       	mul	r25, r18
    dc94:	50 0d       	add	r21, r0
    dc96:	11 24       	eor	r1, r1
    dc98:	ca 01       	movw	r24, r20
    dc9a:	a0 e0       	ldi	r26, 0x00	; 0
    dc9c:	b0 e0       	ldi	r27, 0x00	; 0
    dc9e:	f8 01       	movw	r30, r16
    dca0:	80 83       	st	Z, r24
    dca2:	91 83       	std	Z+1, r25	; 0x01
    dca4:	a2 83       	std	Z+2, r26	; 0x02
    dca6:	b3 83       	std	Z+3, r27	; 0x03
    dca8:	00 e0       	ldi	r16, 0x00	; 0
    dcaa:	23 c1       	rjmp	.+582    	; 0xdef2 <mmc_disk_ioctl+0x464>
    dcac:	40 e0       	ldi	r20, 0x00	; 0
    dcae:	50 e0       	ldi	r21, 0x00	; 0
    dcb0:	ba 01       	movw	r22, r20
    dcb2:	89 e0       	ldi	r24, 0x09	; 9
    dcb4:	04 c0       	rjmp	.+8      	; 0xdcbe <mmc_disk_ioctl+0x230>
    dcb6:	40 e0       	ldi	r20, 0x00	; 0
    dcb8:	50 e0       	ldi	r21, 0x00	; 0
    dcba:	ba 01       	movw	r22, r20
    dcbc:	8a e0       	ldi	r24, 0x0A	; 10
    dcbe:	2f dd       	rcall	.-1442   	; 0xd71e <send_cmd>
    dcc0:	81 11       	cpse	r24, r1
    dcc2:	16 c1       	rjmp	.+556    	; 0xdef0 <mmc_disk_ioctl+0x462>
    dcc4:	60 e1       	ldi	r22, 0x10	; 16
    dcc6:	70 e0       	ldi	r23, 0x00	; 0
    dcc8:	1f c0       	rjmp	.+62     	; 0xdd08 <mmc_disk_ioctl+0x27a>
    dcca:	40 e0       	ldi	r20, 0x00	; 0
    dccc:	50 e0       	ldi	r21, 0x00	; 0
    dcce:	ba 01       	movw	r22, r20
    dcd0:	8a e3       	ldi	r24, 0x3A	; 58
    dcd2:	25 dd       	rcall	.-1462   	; 0xd71e <send_cmd>
    dcd4:	81 11       	cpse	r24, r1
    dcd6:	0c c1       	rjmp	.+536    	; 0xdef0 <mmc_disk_ioctl+0x462>
    dcd8:	78 01       	movw	r14, r16
    dcda:	f4 e0       	ldi	r31, 0x04	; 4
    dcdc:	ef 0e       	add	r14, r31
    dcde:	f1 1c       	adc	r15, r1
    dce0:	8f ef       	ldi	r24, 0xFF	; 255
    dce2:	92 d1       	rcall	.+804    	; 0xe008 <mmc_spi_TXRX>
    dce4:	f8 01       	movw	r30, r16
    dce6:	81 93       	st	Z+, r24
    dce8:	8f 01       	movw	r16, r30
    dcea:	ee 15       	cp	r30, r14
    dcec:	ff 05       	cpc	r31, r15
    dcee:	c1 f7       	brne	.-16     	; 0xdce0 <mmc_disk_ioctl+0x252>
    dcf0:	db cf       	rjmp	.-74     	; 0xdca8 <mmc_disk_ioctl+0x21a>
    dcf2:	40 e0       	ldi	r20, 0x00	; 0
    dcf4:	50 e0       	ldi	r21, 0x00	; 0
    dcf6:	ba 01       	movw	r22, r20
    dcf8:	8d e8       	ldi	r24, 0x8D	; 141
    dcfa:	11 dd       	rcall	.-1502   	; 0xd71e <send_cmd>
    dcfc:	81 11       	cpse	r24, r1
    dcfe:	f8 c0       	rjmp	.+496    	; 0xdef0 <mmc_disk_ioctl+0x462>
    dd00:	8f ef       	ldi	r24, 0xFF	; 255
    dd02:	aa dc       	rcall	.-1708   	; 0xd658 <xchg_spi>
    dd04:	60 e4       	ldi	r22, 0x40	; 64
    dd06:	70 e0       	ldi	r23, 0x00	; 0
    dd08:	c8 01       	movw	r24, r16
    dd0a:	ae dc       	rcall	.-1700   	; 0xd668 <rcvr_datablock>
    dd0c:	01 e0       	ldi	r16, 0x01	; 1
    dd0e:	10 e0       	ldi	r17, 0x00	; 0
    dd10:	89 2b       	or	r24, r25
    dd12:	09 f4       	brne	.+2      	; 0xdd16 <mmc_disk_ioctl+0x288>
    dd14:	ef c0       	rjmp	.+478    	; 0xdef4 <mmc_disk_ioctl+0x466>
    dd16:	ea c0       	rjmp	.+468    	; 0xdeec <mmc_disk_ioctl+0x45e>
    dd18:	41 d2       	rcall	.+1154   	; 0xe19c <mmc_power_off>
    dd1a:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Stat>
    dd1e:	81 60       	ori	r24, 0x01	; 1
    dd20:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <Stat>
    dd24:	00 e0       	ldi	r16, 0x00	; 0
    dd26:	eb c0       	rjmp	.+470    	; 0xdefe <mmc_disk_ioctl+0x470>
    dd28:	fb 01       	movw	r30, r22
    dd2a:	43 81       	ldd	r20, Z+3	; 0x03
    dd2c:	54 81       	ldd	r21, Z+4	; 0x04
    dd2e:	65 81       	ldd	r22, Z+5	; 0x05
    dd30:	76 81       	ldd	r23, Z+6	; 0x06
    dd32:	39 e0       	ldi	r19, 0x09	; 9
    dd34:	44 0f       	add	r20, r20
    dd36:	55 1f       	adc	r21, r21
    dd38:	66 1f       	adc	r22, r22
    dd3a:	77 1f       	adc	r23, r23
    dd3c:	3a 95       	dec	r19
    dd3e:	d1 f7       	brne	.-12     	; 0xdd34 <mmc_disk_ioctl+0x2a6>
    dd40:	70 68       	ori	r23, 0x80	; 128
    dd42:	80 81       	ld	r24, Z
    dd44:	90 e0       	ldi	r25, 0x00	; 0
    dd46:	a0 e0       	ldi	r26, 0x00	; 0
    dd48:	b0 e0       	ldi	r27, 0x00	; 0
    dd4a:	2c e1       	ldi	r18, 0x1C	; 28
    dd4c:	88 0f       	add	r24, r24
    dd4e:	99 1f       	adc	r25, r25
    dd50:	aa 1f       	adc	r26, r26
    dd52:	bb 1f       	adc	r27, r27
    dd54:	2a 95       	dec	r18
    dd56:	d1 f7       	brne	.-12     	; 0xdd4c <mmc_disk_ioctl+0x2be>
    dd58:	48 2b       	or	r20, r24
    dd5a:	59 2b       	or	r21, r25
    dd5c:	6a 2b       	or	r22, r26
    dd5e:	7b 2b       	or	r23, r27
    dd60:	81 81       	ldd	r24, Z+1	; 0x01
    dd62:	92 81       	ldd	r25, Z+2	; 0x02
    dd64:	01 97       	sbiw	r24, 0x01	; 1
    dd66:	91 70       	andi	r25, 0x01	; 1
    dd68:	a0 e0       	ldi	r26, 0x00	; 0
    dd6a:	b0 e0       	ldi	r27, 0x00	; 0
    dd6c:	48 2b       	or	r20, r24
    dd6e:	59 2b       	or	r21, r25
    dd70:	6a 2b       	or	r22, r26
    dd72:	7b 2b       	or	r23, r27
    dd74:	80 e3       	ldi	r24, 0x30	; 48
    dd76:	d3 dc       	rcall	.-1626   	; 0xd71e <send_cmd>
    dd78:	81 11       	cpse	r24, r1
    dd7a:	ba c0       	rjmp	.+372    	; 0xdef0 <mmc_disk_ioctl+0x462>
    dd7c:	88 ee       	ldi	r24, 0xE8	; 232
    dd7e:	93 e0       	ldi	r25, 0x03	; 3
    dd80:	46 d1       	rcall	.+652    	; 0xe00e <mmc_set_ms_timeout>
    dd82:	8f ef       	ldi	r24, 0xFF	; 255
    dd84:	41 d1       	rcall	.+642    	; 0xe008 <mmc_spi_TXRX>
    dd86:	8f 3f       	cpi	r24, 0xFF	; 255
    dd88:	21 f4       	brne	.+8      	; 0xdd92 <mmc_disk_ioctl+0x304>
    dd8a:	48 d1       	rcall	.+656    	; 0xe01c <mmc_test_timeout>
    dd8c:	89 2b       	or	r24, r25
    dd8e:	c9 f3       	breq	.-14     	; 0xdd82 <mmc_disk_ioctl+0x2f4>
    dd90:	af c0       	rjmp	.+350    	; 0xdef0 <mmc_disk_ioctl+0x462>
    dd92:	8e 3f       	cpi	r24, 0xFE	; 254
    dd94:	09 f0       	breq	.+2      	; 0xdd98 <mmc_disk_ioctl+0x30a>
    dd96:	ac c0       	rjmp	.+344    	; 0xdef0 <mmc_disk_ioctl+0x462>
    dd98:	f8 01       	movw	r30, r16
    dd9a:	e7 80       	ldd	r14, Z+7	; 0x07
    dd9c:	f0 84       	ldd	r15, Z+8	; 0x08
    dd9e:	c1 80       	ldd	r12, Z+1	; 0x01
    dda0:	d2 80       	ldd	r13, Z+2	; 0x02
    dda2:	ce 0c       	add	r12, r14
    dda4:	df 1c       	adc	r13, r15
    dda6:	ce 14       	cp	r12, r14
    dda8:	df 04       	cpc	r13, r15
    ddaa:	31 f0       	breq	.+12     	; 0xddb8 <mmc_disk_ioctl+0x32a>
    ddac:	8f ef       	ldi	r24, 0xFF	; 255
    ddae:	2c d1       	rcall	.+600    	; 0xe008 <mmc_spi_TXRX>
    ddb0:	f7 01       	movw	r30, r14
    ddb2:	81 93       	st	Z+, r24
    ddb4:	7f 01       	movw	r14, r30
    ddb6:	f7 cf       	rjmp	.-18     	; 0xdda6 <mmc_disk_ioctl+0x318>
    ddb8:	f8 01       	movw	r30, r16
    ddba:	81 81       	ldd	r24, Z+1	; 0x01
    ddbc:	92 81       	ldd	r25, Z+2	; 0x02
    ddbe:	02 e0       	ldi	r16, 0x02	; 2
    ddc0:	12 e0       	ldi	r17, 0x02	; 2
    ddc2:	08 1b       	sub	r16, r24
    ddc4:	19 0b       	sbc	r17, r25
    ddc6:	01 15       	cp	r16, r1
    ddc8:	11 05       	cpc	r17, r1
    ddca:	09 f4       	brne	.+2      	; 0xddce <mmc_disk_ioctl+0x340>
    ddcc:	6d cf       	rjmp	.-294    	; 0xdca8 <mmc_disk_ioctl+0x21a>
    ddce:	8f ef       	ldi	r24, 0xFF	; 255
    ddd0:	43 dc       	rcall	.-1914   	; 0xd658 <xchg_spi>
    ddd2:	01 50       	subi	r16, 0x01	; 1
    ddd4:	11 09       	sbc	r17, r1
    ddd6:	f7 cf       	rjmp	.-18     	; 0xddc6 <mmc_disk_ioctl+0x338>
    ddd8:	fb 01       	movw	r30, r22
    ddda:	43 81       	ldd	r20, Z+3	; 0x03
    dddc:	54 81       	ldd	r21, Z+4	; 0x04
    ddde:	65 81       	ldd	r22, Z+5	; 0x05
    dde0:	76 81       	ldd	r23, Z+6	; 0x06
    dde2:	39 e0       	ldi	r19, 0x09	; 9
    dde4:	44 0f       	add	r20, r20
    dde6:	55 1f       	adc	r21, r21
    dde8:	66 1f       	adc	r22, r22
    ddea:	77 1f       	adc	r23, r23
    ddec:	3a 95       	dec	r19
    ddee:	d1 f7       	brne	.-12     	; 0xdde4 <mmc_disk_ioctl+0x356>
    ddf0:	70 68       	ori	r23, 0x80	; 128
    ddf2:	80 81       	ld	r24, Z
    ddf4:	90 e0       	ldi	r25, 0x00	; 0
    ddf6:	a0 e0       	ldi	r26, 0x00	; 0
    ddf8:	b0 e0       	ldi	r27, 0x00	; 0
    ddfa:	2c e1       	ldi	r18, 0x1C	; 28
    ddfc:	88 0f       	add	r24, r24
    ddfe:	99 1f       	adc	r25, r25
    de00:	aa 1f       	adc	r26, r26
    de02:	bb 1f       	adc	r27, r27
    de04:	2a 95       	dec	r18
    de06:	d1 f7       	brne	.-12     	; 0xddfc <mmc_disk_ioctl+0x36e>
    de08:	48 2b       	or	r20, r24
    de0a:	59 2b       	or	r21, r25
    de0c:	6a 2b       	or	r22, r26
    de0e:	7b 2b       	or	r23, r27
    de10:	81 81       	ldd	r24, Z+1	; 0x01
    de12:	92 81       	ldd	r25, Z+2	; 0x02
    de14:	01 97       	sbiw	r24, 0x01	; 1
    de16:	91 70       	andi	r25, 0x01	; 1
    de18:	a0 e0       	ldi	r26, 0x00	; 0
    de1a:	b0 e0       	ldi	r27, 0x00	; 0
    de1c:	48 2b       	or	r20, r24
    de1e:	59 2b       	or	r21, r25
    de20:	6a 2b       	or	r22, r26
    de22:	7b 2b       	or	r23, r27
    de24:	81 e3       	ldi	r24, 0x31	; 49
    de26:	7b dc       	rcall	.-1802   	; 0xd71e <send_cmd>
    de28:	81 11       	cpse	r24, r1
    de2a:	62 c0       	rjmp	.+196    	; 0xdef0 <mmc_disk_ioctl+0x462>
    de2c:	8f ef       	ldi	r24, 0xFF	; 255
    de2e:	14 dc       	rcall	.-2008   	; 0xd658 <xchg_spi>
    de30:	8e ef       	ldi	r24, 0xFE	; 254
    de32:	12 dc       	rcall	.-2012   	; 0xd658 <xchg_spi>
    de34:	f8 01       	movw	r30, r16
    de36:	e7 80       	ldd	r14, Z+7	; 0x07
    de38:	f0 84       	ldd	r15, Z+8	; 0x08
    de3a:	c1 80       	ldd	r12, Z+1	; 0x01
    de3c:	d2 80       	ldd	r13, Z+2	; 0x02
    de3e:	ce 0c       	add	r12, r14
    de40:	df 1c       	adc	r13, r15
    de42:	ec 14       	cp	r14, r12
    de44:	fd 04       	cpc	r15, r13
    de46:	29 f0       	breq	.+10     	; 0xde52 <mmc_disk_ioctl+0x3c4>
    de48:	f7 01       	movw	r30, r14
    de4a:	81 91       	ld	r24, Z+
    de4c:	7f 01       	movw	r14, r30
    de4e:	04 dc       	rcall	.-2040   	; 0xd658 <xchg_spi>
    de50:	f8 cf       	rjmp	.-16     	; 0xde42 <mmc_disk_ioctl+0x3b4>
    de52:	f8 01       	movw	r30, r16
    de54:	81 81       	ldd	r24, Z+1	; 0x01
    de56:	92 81       	ldd	r25, Z+2	; 0x02
    de58:	02 e0       	ldi	r16, 0x02	; 2
    de5a:	12 e0       	ldi	r17, 0x02	; 2
    de5c:	08 1b       	sub	r16, r24
    de5e:	19 0b       	sbc	r17, r25
    de60:	8f ef       	ldi	r24, 0xFF	; 255
    de62:	01 15       	cp	r16, r1
    de64:	11 05       	cpc	r17, r1
    de66:	09 f4       	brne	.+2      	; 0xde6a <mmc_disk_ioctl+0x3dc>
    de68:	3b c0       	rjmp	.+118    	; 0xdee0 <mmc_disk_ioctl+0x452>
    de6a:	f6 db       	rcall	.-2068   	; 0xd658 <xchg_spi>
    de6c:	01 50       	subi	r16, 0x01	; 1
    de6e:	11 09       	sbc	r17, r1
    de70:	f7 cf       	rjmp	.-18     	; 0xde60 <mmc_disk_ioctl+0x3d2>
    de72:	fb 01       	movw	r30, r22
    de74:	43 81       	ldd	r20, Z+3	; 0x03
    de76:	54 81       	ldd	r21, Z+4	; 0x04
    de78:	65 81       	ldd	r22, Z+5	; 0x05
    de7a:	76 81       	ldd	r23, Z+6	; 0x06
    de7c:	89 e0       	ldi	r24, 0x09	; 9
    de7e:	44 0f       	add	r20, r20
    de80:	55 1f       	adc	r21, r21
    de82:	66 1f       	adc	r22, r22
    de84:	77 1f       	adc	r23, r23
    de86:	8a 95       	dec	r24
    de88:	d1 f7       	brne	.-12     	; 0xde7e <mmc_disk_ioctl+0x3f0>
    de8a:	74 68       	ori	r23, 0x84	; 132
    de8c:	80 81       	ld	r24, Z
    de8e:	90 e0       	ldi	r25, 0x00	; 0
    de90:	a0 e0       	ldi	r26, 0x00	; 0
    de92:	b0 e0       	ldi	r27, 0x00	; 0
    de94:	2c e1       	ldi	r18, 0x1C	; 28
    de96:	88 0f       	add	r24, r24
    de98:	99 1f       	adc	r25, r25
    de9a:	aa 1f       	adc	r26, r26
    de9c:	bb 1f       	adc	r27, r27
    de9e:	2a 95       	dec	r18
    dea0:	d1 f7       	brne	.-12     	; 0xde96 <mmc_disk_ioctl+0x408>
    dea2:	48 2b       	or	r20, r24
    dea4:	59 2b       	or	r21, r25
    dea6:	6a 2b       	or	r22, r26
    dea8:	7b 2b       	or	r23, r27
    deaa:	82 81       	ldd	r24, Z+2	; 0x02
    deac:	90 e0       	ldi	r25, 0x00	; 0
    deae:	a0 e0       	ldi	r26, 0x00	; 0
    deb0:	b0 e0       	ldi	r27, 0x00	; 0
    deb2:	48 2b       	or	r20, r24
    deb4:	59 2b       	or	r21, r25
    deb6:	6a 2b       	or	r22, r26
    deb8:	7b 2b       	or	r23, r27
    deba:	81 e3       	ldi	r24, 0x31	; 49
    debc:	30 dc       	rcall	.-1952   	; 0xd71e <send_cmd>
    debe:	81 11       	cpse	r24, r1
    dec0:	17 c0       	rjmp	.+46     	; 0xdef0 <mmc_disk_ioctl+0x462>
    dec2:	8f ef       	ldi	r24, 0xFF	; 255
    dec4:	c9 db       	rcall	.-2158   	; 0xd658 <xchg_spi>
    dec6:	8e ef       	ldi	r24, 0xFE	; 254
    dec8:	c7 db       	rcall	.-2162   	; 0xd658 <xchg_spi>
    deca:	f8 01       	movw	r30, r16
    decc:	81 81       	ldd	r24, Z+1	; 0x01
    dece:	c4 db       	rcall	.-2168   	; 0xd658 <xchg_spi>
    ded0:	01 e0       	ldi	r16, 0x01	; 1
    ded2:	12 e0       	ldi	r17, 0x02	; 2
    ded4:	8f ef       	ldi	r24, 0xFF	; 255
    ded6:	c0 db       	rcall	.-2176   	; 0xd658 <xchg_spi>
    ded8:	01 50       	subi	r16, 0x01	; 1
    deda:	11 09       	sbc	r17, r1
    dedc:	d9 f7       	brne	.-10     	; 0xded4 <mmc_disk_ioctl+0x446>
    dede:	8f ef       	ldi	r24, 0xFF	; 255
    dee0:	93 d0       	rcall	.+294    	; 0xe008 <mmc_spi_TXRX>
    dee2:	8f 71       	andi	r24, 0x1F	; 31
    dee4:	01 e0       	ldi	r16, 0x01	; 1
    dee6:	10 e0       	ldi	r17, 0x00	; 0
    dee8:	85 30       	cpi	r24, 0x05	; 5
    deea:	21 f4       	brne	.+8      	; 0xdef4 <mmc_disk_ioctl+0x466>
    deec:	00 e0       	ldi	r16, 0x00	; 0
    deee:	02 c0       	rjmp	.+4      	; 0xdef4 <mmc_disk_ioctl+0x466>
    def0:	01 e0       	ldi	r16, 0x01	; 1
    def2:	10 e0       	ldi	r17, 0x00	; 0
    def4:	b3 db       	rcall	.-2202   	; 0xd65c <deselect>
    def6:	04 c0       	rjmp	.+8      	; 0xdf00 <mmc_disk_ioctl+0x472>
    def8:	03 e0       	ldi	r16, 0x03	; 3
    defa:	01 c0       	rjmp	.+2      	; 0xdefe <mmc_disk_ioctl+0x470>
    defc:	04 e0       	ldi	r16, 0x04	; 4
    defe:	10 e0       	ldi	r17, 0x00	; 0
    df00:	c8 01       	movw	r24, r16
    df02:	60 96       	adiw	r28, 0x10	; 16
    df04:	e8 e0       	ldi	r30, 0x08	; 8
    df06:	0c 94 ee e3 	jmp	0x1c7dc	; 0x1c7dc <__epilogue_restores__+0x14>

0000df0a <mmc_disk_timerproc>:
    df0a:	80 91 c1 17 	lds	r24, 0x17C1	; 0x8017c1 <Timer1>
    df0e:	88 23       	and	r24, r24
    df10:	19 f0       	breq	.+6      	; 0xdf18 <mmc_disk_timerproc+0xe>
    df12:	81 50       	subi	r24, 0x01	; 1
    df14:	80 93 c1 17 	sts	0x17C1, r24	; 0x8017c1 <Timer1>
    df18:	80 91 c0 17 	lds	r24, 0x17C0	; 0x8017c0 <Timer2>
    df1c:	88 23       	and	r24, r24
    df1e:	19 f0       	breq	.+6      	; 0xdf26 <mmc_disk_timerproc+0x1c>
    df20:	81 50       	subi	r24, 0x01	; 1
    df22:	80 93 c0 17 	sts	0x17C0, r24	; 0x8017c0 <Timer2>
    df26:	08 95       	ret

0000df28 <mmc_task>:
void mmc_ms_wait(int ms)
{
    mmc_set_ms_timeout(ms);
    while(!mmc_test_timeout())
        ;
}
    df28:	80 91 ca 17 	lds	r24, 0x17CA	; 0x8017ca <_mmc_timeout>
    df2c:	90 91 cb 17 	lds	r25, 0x17CB	; 0x8017cb <_mmc_timeout+0x1>
    df30:	00 97       	sbiw	r24, 0x00	; 0
    df32:	29 f0       	breq	.+10     	; 0xdf3e <mmc_task+0x16>
    df34:	01 97       	sbiw	r24, 0x01	; 1
    df36:	90 93 cb 17 	sts	0x17CB, r25	; 0x8017cb <_mmc_timeout+0x1>
    df3a:	80 93 ca 17 	sts	0x17CA, r24	; 0x8017ca <_mmc_timeout>
    df3e:	80 91 c4 17 	lds	r24, 0x17C4	; 0x8017c4 <_mmc_pre>
    df42:	90 91 c5 17 	lds	r25, 0x17C5	; 0x8017c5 <_mmc_pre+0x1>
    df46:	8a 30       	cpi	r24, 0x0A	; 10
    df48:	91 05       	cpc	r25, r1
    df4a:	30 f4       	brcc	.+12     	; 0xdf58 <mmc_task+0x30>
    df4c:	01 96       	adiw	r24, 0x01	; 1
    df4e:	90 93 c5 17 	sts	0x17C5, r25	; 0x8017c5 <_mmc_pre+0x1>
    df52:	80 93 c4 17 	sts	0x17C4, r24	; 0x8017c4 <_mmc_pre>
    df56:	08 95       	ret
    df58:	10 92 c5 17 	sts	0x17C5, r1	; 0x8017c5 <_mmc_pre+0x1>
    df5c:	10 92 c4 17 	sts	0x17C4, r1	; 0x8017c4 <_mmc_pre>
    df60:	d4 cf       	rjmp	.-88     	; 0xdf0a <mmc_disk_timerproc>
    df62:	08 95       	ret

0000df64 <mmc_install_timer>:
    df64:	00 d0       	rcall	.+0      	; 0xdf66 <mmc_install_timer+0x2>
    df66:	1f 92       	push	r1
    df68:	10 92 cb 17 	sts	0x17CB, r1	; 0x8017cb <_mmc_timeout+0x1>
    df6c:	10 92 ca 17 	sts	0x17CA, r1	; 0x8017ca <_mmc_timeout>
    df70:	61 e0       	ldi	r22, 0x01	; 1
    df72:	70 e0       	ldi	r23, 0x00	; 0
    df74:	84 e9       	ldi	r24, 0x94	; 148
    df76:	9f e6       	ldi	r25, 0x6F	; 111
    df78:	0e 94 a2 35 	call	0x6b44	; 0x6b44 <set_timers>
    df7c:	01 96       	adiw	r24, 0x01	; 1
    df7e:	51 f4       	brne	.+20     	; 0xdf94 <mmc_install_timer+0x30>
    df80:	8b eb       	ldi	r24, 0xBB	; 187
    df82:	97 e0       	ldi	r25, 0x07	; 7
    df84:	a0 e0       	ldi	r26, 0x00	; 0
    df86:	ed b7       	in	r30, 0x3d	; 61
    df88:	fe b7       	in	r31, 0x3e	; 62
    df8a:	81 83       	std	Z+1, r24	; 0x01
    df8c:	92 83       	std	Z+2, r25	; 0x02
    df8e:	a3 83       	std	Z+3, r26	; 0x03
    df90:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    df94:	0f 90       	pop	r0
    df96:	0f 90       	pop	r0
    df98:	0f 90       	pop	r0
    df9a:	08 95       	ret

0000df9c <mmc_spi_begin>:
    df9c:	60 91 c6 17 	lds	r22, 0x17C6	; 0x8017c6 <_mmc_clock>
    dfa0:	70 91 c7 17 	lds	r23, 0x17C7	; 0x8017c7 <_mmc_clock+0x1>
    dfa4:	80 91 c8 17 	lds	r24, 0x17C8	; 0x8017c8 <_mmc_clock+0x2>
    dfa8:	90 91 c9 17 	lds	r25, 0x17C9	; 0x8017c9 <_mmc_clock+0x3>
    dfac:	4b e0       	ldi	r20, 0x0B	; 11
    dfae:	50 e0       	ldi	r21, 0x00	; 0
    dfb0:	0c 94 48 28 	jmp	0x5090	; 0x5090 <spi_begin>
    dfb4:	08 95       	ret

0000dfb6 <mmc_spi_end>:
    dfb6:	8b e0       	ldi	r24, 0x0B	; 11
    dfb8:	0c 94 e4 27 	jmp	0x4fc8	; 0x4fc8 <spi_end>
    dfbc:	08 95       	ret

0000dfbe <mmc_slow>:
    dfbe:	80 e2       	ldi	r24, 0x20	; 32
    dfc0:	91 ea       	ldi	r25, 0xA1	; 161
    dfc2:	a7 e0       	ldi	r26, 0x07	; 7
    dfc4:	b0 e0       	ldi	r27, 0x00	; 0
    dfc6:	80 93 c6 17 	sts	0x17C6, r24	; 0x8017c6 <_mmc_clock>
    dfca:	90 93 c7 17 	sts	0x17C7, r25	; 0x8017c7 <_mmc_clock+0x1>
    dfce:	a0 93 c8 17 	sts	0x17C8, r26	; 0x8017c8 <_mmc_clock+0x2>
    dfd2:	b0 93 c9 17 	sts	0x17C9, r27	; 0x8017c9 <_mmc_clock+0x3>
    dfd6:	08 95       	ret

0000dfd8 <mmc_spi_init>:
    dfd8:	8b e0       	ldi	r24, 0x0B	; 11
    dfda:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <chip_select_init>
    dfde:	ef cf       	rjmp	.-34     	; 0xdfbe <mmc_slow>
    dfe0:	08 95       	ret

0000dfe2 <mmc_fast>:
    dfe2:	80 ea       	ldi	r24, 0xA0	; 160
    dfe4:	95 e2       	ldi	r25, 0x25	; 37
    dfe6:	a6 e2       	ldi	r26, 0x26	; 38
    dfe8:	b0 e0       	ldi	r27, 0x00	; 0
    dfea:	80 93 c6 17 	sts	0x17C6, r24	; 0x8017c6 <_mmc_clock>
    dfee:	90 93 c7 17 	sts	0x17C7, r25	; 0x8017c7 <_mmc_clock+0x1>
    dff2:	a0 93 c8 17 	sts	0x17C8, r26	; 0x8017c8 <_mmc_clock+0x2>
    dff6:	b0 93 c9 17 	sts	0x17C9, r27	; 0x8017c9 <_mmc_clock+0x3>
    dffa:	08 95       	ret

0000dffc <mmc_spi_TX_buffer>:
    dffc:	0c 94 14 28 	jmp	0x5028	; 0x5028 <spi_TX_buffer>
    e000:	08 95       	ret

0000e002 <mmc_spi_RX_buffer>:
    e002:	0c 94 16 28 	jmp	0x502c	; 0x502c <spi_RX_buffer>
    e006:	08 95       	ret

0000e008 <mmc_spi_TXRX>:
    e008:	0c 94 90 28 	jmp	0x5120	; 0x5120 <spi_TXRX>
    e00c:	08 95       	ret

0000e00e <mmc_set_ms_timeout>:
    e00e:	f8 94       	cli
    e010:	90 93 cb 17 	sts	0x17CB, r25	; 0x8017cb <_mmc_timeout+0x1>
    e014:	80 93 ca 17 	sts	0x17CA, r24	; 0x8017ca <_mmc_timeout>
    e018:	78 94       	sei
    e01a:	08 95       	ret

0000e01c <mmc_test_timeout>:
    e01c:	00 d0       	rcall	.+0      	; 0xe01e <mmc_test_timeout+0x2>
    e01e:	1f 92       	push	r1
    e020:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Stat>
    e024:	81 fd       	sbrc	r24, 1
    e026:	15 c0       	rjmp	.+42     	; 0xe052 <mmc_test_timeout+0x36>
    e028:	80 91 ca 17 	lds	r24, 0x17CA	; 0x8017ca <_mmc_timeout>
    e02c:	90 91 cb 17 	lds	r25, 0x17CB	; 0x8017cb <_mmc_timeout+0x1>
    e030:	89 2b       	or	r24, r25
    e032:	91 f4       	brne	.+36     	; 0xe058 <mmc_test_timeout+0x3c>
    e034:	8e ea       	ldi	r24, 0xAE	; 174
    e036:	97 e0       	ldi	r25, 0x07	; 7
    e038:	a0 e0       	ldi	r26, 0x00	; 0
    e03a:	ed b7       	in	r30, 0x3d	; 61
    e03c:	fe b7       	in	r31, 0x3e	; 62
    e03e:	81 83       	std	Z+1, r24	; 0x01
    e040:	92 83       	std	Z+2, r25	; 0x02
    e042:	a3 83       	std	Z+3, r26	; 0x03
    e044:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    e048:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Stat>
    e04c:	83 60       	ori	r24, 0x03	; 3
    e04e:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <Stat>
    e052:	81 e0       	ldi	r24, 0x01	; 1
    e054:	90 e0       	ldi	r25, 0x00	; 0
    e056:	02 c0       	rjmp	.+4      	; 0xe05c <mmc_test_timeout+0x40>
    e058:	80 e0       	ldi	r24, 0x00	; 0
    e05a:	90 e0       	ldi	r25, 0x00	; 0
    e05c:	0f 90       	pop	r0
    e05e:	0f 90       	pop	r0
    e060:	0f 90       	pop	r0
    e062:	08 95       	ret

0000e064 <mmc_init>:
///
/// @param[in] verbose: display initialisation messages
/// @return
MEMSPACE
int mmc_init(int verbose)
{
    e064:	ab e0       	ldi	r26, 0x0B	; 11
    e066:	b0 e0       	ldi	r27, 0x00	; 0
    e068:	e8 e3       	ldi	r30, 0x38	; 56
    e06a:	f0 e7       	ldi	r31, 0x70	; 112
    e06c:	0c 94 d4 e3 	jmp	0x1c7a8	; 0x1c7a8 <__prologue_saves__+0x18>
    e070:	7c 01       	movw	r14, r24
    int rc;

    Stat = 0;
    e072:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <Stat>

    mmc_spi_init();

    if( verbose)
    e076:	b0 df       	rcall	.-160    	; 0xdfd8 <mmc_spi_init>
    e078:	e1 14       	cp	r14, r1
    e07a:	f1 04       	cpc	r15, r1
    {
        printf("START MMC INIT\n");
    e07c:	51 f0       	breq	.+20     	; 0xe092 <mmc_init+0x2e>
    e07e:	8e e9       	ldi	r24, 0x9E	; 158
    e080:	97 e0       	ldi	r25, 0x07	; 7
    e082:	a0 e0       	ldi	r26, 0x00	; 0
    e084:	ed b7       	in	r30, 0x3d	; 61
    e086:	fe b7       	in	r31, 0x3e	; 62
    e088:	81 83       	std	Z+1, r24	; 0x01
    e08a:	92 83       	std	Z+2, r25	; 0x02
    e08c:	a3 83       	std	Z+3, r26	; 0x03
    e08e:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    }
    // we only install timers once!
    if(!mmc_init_flag)
    e092:	80 91 c2 17 	lds	r24, 0x17C2	; 0x8017c2 <mmc_init_flag>
    e096:	90 91 c3 17 	lds	r25, 0x17C3	; 0x8017c3 <mmc_init_flag+0x1>
        mmc_install_timer();
    e09a:	89 2b       	or	r24, r25
    e09c:	09 f4       	brne	.+2      	; 0xe0a0 <mmc_init+0x3c>

    if( verbose)
    e09e:	62 df       	rcall	.-316    	; 0xdf64 <mmc_install_timer>
    e0a0:	e1 14       	cp	r14, r1
    e0a2:	f1 04       	cpc	r15, r1
    {
#if defined (FF_USE_LFN)
        printf("LFN Enabled");
    e0a4:	c1 f0       	breq	.+48     	; 0xe0d6 <mmc_init+0x72>
    e0a6:	82 e9       	ldi	r24, 0x92	; 146
    e0a8:	97 e0       	ldi	r25, 0x07	; 7
    e0aa:	a0 e0       	ldi	r26, 0x00	; 0
    e0ac:	ed b7       	in	r30, 0x3d	; 61
    e0ae:	fe b7       	in	r31, 0x3e	; 62
    e0b0:	81 83       	std	Z+1, r24	; 0x01
    e0b2:	92 83       	std	Z+2, r25	; 0x02
    e0b4:	a3 83       	std	Z+3, r26	; 0x03
    e0b6:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
#else
        printf("LFN Disabled");
#endif
        printf(", Code page: %u\n", FF_CODE_PAGE);
    e0ba:	85 eb       	ldi	r24, 0xB5	; 181
    e0bc:	91 e0       	ldi	r25, 0x01	; 1
    e0be:	ed b7       	in	r30, 0x3d	; 61
    e0c0:	fe b7       	in	r31, 0x3e	; 62
    e0c2:	95 83       	std	Z+5, r25	; 0x05
    e0c4:	84 83       	std	Z+4, r24	; 0x04
    e0c6:	81 e8       	ldi	r24, 0x81	; 129
    e0c8:	97 e0       	ldi	r25, 0x07	; 7
    e0ca:	a0 e0       	ldi	r26, 0x00	; 0
    e0cc:	81 83       	std	Z+1, r24	; 0x01
    e0ce:	92 83       	std	Z+2, r25	; 0x02
    e0d0:	a3 83       	std	Z+3, r26	; 0x03
    }

    rc = disk_initialize(DEV_MMC);    // aliased to mmc_disk_initialize()
    e0d2:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    e0d6:	80 e0       	ldi	r24, 0x00	; 0
    e0d8:	8f da       	rcall	.-2786   	; 0xd5f8 <disk_initialize>
    e0da:	08 2f       	mov	r16, r24

    if( rc != RES_OK  )
    e0dc:	10 e0       	ldi	r17, 0x00	; 0
    e0de:	01 15       	cp	r16, r1
        put_rc(rc);
    e0e0:	11 05       	cpc	r17, r1
    e0e2:	19 f0       	breq	.+6      	; 0xe0ea <mmc_init+0x86>
    e0e4:	c8 01       	movw	r24, r16
    e0e6:	e0 d0       	rcall	.+448    	; 0xe2a8 <put_rc>

    if( rc == RES_OK)
        rc = f_mount(&Fatfs[0],"/", 0);
    e0e8:	0e c0       	rjmp	.+28     	; 0xe106 <mmc_init+0xa2>
    e0ea:	40 e0       	ldi	r20, 0x00	; 0
    e0ec:	66 ec       	ldi	r22, 0xC6	; 198
    e0ee:	77 e0       	ldi	r23, 0x07	; 7
    e0f0:	86 e1       	ldi	r24, 0x16	; 22
    e0f2:	9a e1       	ldi	r25, 0x1A	; 26
    e0f4:	0e 94 b4 5a 	call	0xb568	; 0xb568 <f_mount>

    if( rc != RES_OK || verbose)
    e0f8:	8c 01       	movw	r16, r24
    e0fa:	89 2b       	or	r24, r25
    e0fc:	21 f4       	brne	.+8      	; 0xe106 <mmc_init+0xa2>
    e0fe:	e1 14       	cp	r14, r1
    e100:	f1 04       	cpc	r15, r1
        put_rc( rc );
    e102:	09 f4       	brne	.+2      	; 0xe106 <mmc_init+0xa2>
    e104:	40 c0       	rjmp	.+128    	; 0xe186 <mmc_init+0x122>
    e106:	c8 01       	movw	r24, r16

    if (verbose )
    e108:	cf d0       	rcall	.+414    	; 0xe2a8 <put_rc>
    e10a:	e1 14       	cp	r14, r1
    e10c:	f1 04       	cpc	r15, r1
    {
        DWORD blksize = 0;
    e10e:	d9 f1       	breq	.+118    	; 0xe186 <mmc_init+0x122>
    e110:	18 86       	std	Y+8, r1	; 0x08
    e112:	19 86       	std	Y+9, r1	; 0x09
    e114:	1a 86       	std	Y+10, r1	; 0x0a
        if(rc == RES_OK)
    e116:	1b 86       	std	Y+11, r1	; 0x0b
    e118:	01 15       	cp	r16, r1
        {
            rc = disk_ioctl ( DEV_MMC, GET_BLOCK_SIZE, (void *) &blksize);
    e11a:	11 05       	cpc	r17, r1
    e11c:	51 f5       	brne	.+84     	; 0xe172 <mmc_init+0x10e>
    e11e:	ae 01       	movw	r20, r28
    e120:	48 5f       	subi	r20, 0xF8	; 248
    e122:	5f 4f       	sbci	r21, 0xFF	; 255
    e124:	63 e0       	ldi	r22, 0x03	; 3
            if( rc != RES_OK)
    e126:	80 e0       	ldi	r24, 0x00	; 0
    e128:	8d da       	rcall	.-2790   	; 0xd644 <disk_ioctl>
            {
                put_rc( rc );
    e12a:	8c 01       	movw	r16, r24
    e12c:	00 97       	sbiw	r24, 0x00	; 0
                printf("MMC Block Size - read failed\n");
    e12e:	61 f0       	breq	.+24     	; 0xe148 <mmc_init+0xe4>
    e130:	bb d0       	rcall	.+374    	; 0xe2a8 <put_rc>
    e132:	83 e6       	ldi	r24, 0x63	; 99
    e134:	97 e0       	ldi	r25, 0x07	; 7
    e136:	a0 e0       	ldi	r26, 0x00	; 0
    e138:	ed b7       	in	r30, 0x3d	; 61
    e13a:	fe b7       	in	r31, 0x3e	; 62
    e13c:	81 83       	std	Z+1, r24	; 0x01
    e13e:	92 83       	std	Z+2, r25	; 0x02
    e140:	a3 83       	std	Z+3, r26	; 0x03
    e142:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
            }
            else
            {
                printf("MMC Block Size: %ld\n", blksize);
    e146:	15 c0       	rjmp	.+42     	; 0xe172 <mmc_init+0x10e>
    e148:	88 85       	ldd	r24, Y+8	; 0x08
    e14a:	99 85       	ldd	r25, Y+9	; 0x09
    e14c:	aa 85       	ldd	r26, Y+10	; 0x0a
    e14e:	bb 85       	ldd	r27, Y+11	; 0x0b
    e150:	ed b7       	in	r30, 0x3d	; 61
    e152:	fe b7       	in	r31, 0x3e	; 62
    e154:	84 83       	std	Z+4, r24	; 0x04
    e156:	95 83       	std	Z+5, r25	; 0x05
    e158:	a6 83       	std	Z+6, r26	; 0x06
    e15a:	b7 83       	std	Z+7, r27	; 0x07
    e15c:	8e e4       	ldi	r24, 0x4E	; 78
    e15e:	97 e0       	ldi	r25, 0x07	; 7
    e160:	a0 e0       	ldi	r26, 0x00	; 0
    e162:	81 83       	std	Z+1, r24	; 0x01
    e164:	92 83       	std	Z+2, r25	; 0x02
            }
            if( rc == RES_OK)
            {
                fatfs_status("/");
    e166:	a3 83       	std	Z+3, r26	; 0x03
    e168:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    e16c:	86 ec       	ldi	r24, 0xC6	; 198
            }
        }
        printf("END MMC INIT\n");
    e16e:	97 e0       	ldi	r25, 0x07	; 7
    e170:	2f d1       	rcall	.+606    	; 0xe3d0 <fatfs_status>
    e172:	80 e4       	ldi	r24, 0x40	; 64
    e174:	97 e0       	ldi	r25, 0x07	; 7
    e176:	a0 e0       	ldi	r26, 0x00	; 0
    e178:	ed b7       	in	r30, 0x3d	; 61
    e17a:	fe b7       	in	r31, 0x3e	; 62
    e17c:	81 83       	std	Z+1, r24	; 0x01
    e17e:	92 83       	std	Z+2, r25	; 0x02
    e180:	a3 83       	std	Z+3, r26	; 0x03
    }
    mmc_init_flag = 1;
    e182:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    e186:	81 e0       	ldi	r24, 0x01	; 1
    e188:	90 e0       	ldi	r25, 0x00	; 0
    e18a:	90 93 c3 17 	sts	0x17C3, r25	; 0x8017c3 <mmc_init_flag+0x1>

    return( rc ) ;
}
    e18e:	80 93 c2 17 	sts	0x17C2, r24	; 0x8017c2 <mmc_init_flag>
    e192:	c8 01       	movw	r24, r16
    e194:	2b 96       	adiw	r28, 0x0b	; 11
    e196:	e6 e0       	ldi	r30, 0x06	; 6
    e198:	0c 94 f0 e3 	jmp	0x1c7e0	; 0x1c7e0 <__epilogue_restores__+0x18>

0000e19c <mmc_power_off>:
/// @brief  MMC Power OFF
///
/// @return void
MEMSPACE
void mmc_power_off()
{
    e19c:	08 95       	ret

0000e19e <mmc_ins_status>:

MEMSPACE
int mmc_ins_status()
{
    return (1);
}
    e19e:	81 e0       	ldi	r24, 0x01	; 1
    e1a0:	90 e0       	ldi	r25, 0x00	; 0
    e1a2:	08 95       	ret

0000e1a4 <mmc_wp_status>:

MEMSPACE
int mmc_wp_status()
{
    return (0);
}
    e1a4:	80 e0       	ldi	r24, 0x00	; 0
    e1a6:	90 e0       	ldi	r25, 0x00	; 0
    e1a8:	08 95       	ret

0000e1aa <tm_to_fat>:
/// @param[in] t: POSIX struct tm * to convert.
///
/// @return  FAT32 time.
MEMSPACE
uint32_t tm_to_fat(tm_t *t)
{
    e1aa:	0f 93       	push	r16
    e1ac:	1f 93       	push	r17
    e1ae:	fc 01       	movw	r30, r24
        | (((uint32_t)t->tm_mon+1) << 21)
        | (((uint32_t)t->tm_mday) << 16)
        | ((uint32_t)t->tm_hour << 11)
        | ((uint32_t)t->tm_min << 5)
        | ((uint32_t)t->tm_sec >> 1);
    return(fat);
    e1b0:	46 81       	ldd	r20, Z+6	; 0x06
    e1b2:	57 81       	ldd	r21, Z+7	; 0x07
    e1b4:	05 2e       	mov	r0, r21
    e1b6:	00 0c       	add	r0, r0
    e1b8:	66 0b       	sbc	r22, r22
    e1ba:	77 0b       	sbc	r23, r23
    e1bc:	ba 01       	movw	r22, r20
    e1be:	55 27       	eor	r21, r21
    e1c0:	44 27       	eor	r20, r20
    e1c2:	84 81       	ldd	r24, Z+4	; 0x04
    e1c4:	95 81       	ldd	r25, Z+5	; 0x05
    e1c6:	09 2e       	mov	r0, r25
    e1c8:	00 0c       	add	r0, r0
    e1ca:	aa 0b       	sbc	r26, r26
    e1cc:	bb 0b       	sbc	r27, r27
    e1ce:	2b e0       	ldi	r18, 0x0B	; 11
    e1d0:	88 0f       	add	r24, r24
    e1d2:	99 1f       	adc	r25, r25
    e1d4:	aa 1f       	adc	r26, r26
    e1d6:	bb 1f       	adc	r27, r27
    e1d8:	2a 95       	dec	r18
    e1da:	d1 f7       	brne	.-12     	; 0xe1d0 <tm_to_fat+0x26>
    e1dc:	48 2b       	or	r20, r24
    e1de:	59 2b       	or	r21, r25
    e1e0:	6a 2b       	or	r22, r26
    e1e2:	7b 2b       	or	r23, r27
    e1e4:	82 81       	ldd	r24, Z+2	; 0x02
    e1e6:	93 81       	ldd	r25, Z+3	; 0x03
    e1e8:	09 2e       	mov	r0, r25
    e1ea:	00 0c       	add	r0, r0
    e1ec:	aa 0b       	sbc	r26, r26
    e1ee:	bb 0b       	sbc	r27, r27
    e1f0:	35 e0       	ldi	r19, 0x05	; 5
    e1f2:	88 0f       	add	r24, r24
    e1f4:	99 1f       	adc	r25, r25
    e1f6:	aa 1f       	adc	r26, r26
    e1f8:	bb 1f       	adc	r27, r27
    e1fa:	3a 95       	dec	r19
    e1fc:	d1 f7       	brne	.-12     	; 0xe1f2 <tm_to_fat+0x48>
    e1fe:	48 2b       	or	r20, r24
    e200:	59 2b       	or	r21, r25
    e202:	6a 2b       	or	r22, r26
    e204:	7b 2b       	or	r23, r27
    e206:	80 81       	ld	r24, Z
    e208:	91 81       	ldd	r25, Z+1	; 0x01
    e20a:	09 2e       	mov	r0, r25
    e20c:	00 0c       	add	r0, r0
    e20e:	aa 0b       	sbc	r26, r26
    e210:	bb 0b       	sbc	r27, r27
    e212:	b6 95       	lsr	r27
    e214:	a7 95       	ror	r26
    e216:	97 95       	ror	r25
    e218:	87 95       	ror	r24
    e21a:	84 2b       	or	r24, r20
    e21c:	95 2b       	or	r25, r21
    e21e:	a6 2b       	or	r26, r22
    e220:	b7 2b       	or	r27, r23
    e222:	02 85       	ldd	r16, Z+10	; 0x0a
    e224:	13 85       	ldd	r17, Z+11	; 0x0b
    e226:	00 55       	subi	r16, 0x50	; 80
    e228:	11 09       	sbc	r17, r1
    e22a:	01 2e       	mov	r0, r17
    e22c:	00 0c       	add	r0, r0
    e22e:	22 0b       	sbc	r18, r18
    e230:	33 0b       	sbc	r19, r19
    e232:	49 e1       	ldi	r20, 0x19	; 25
    e234:	00 0f       	add	r16, r16
    e236:	11 1f       	adc	r17, r17
    e238:	22 1f       	adc	r18, r18
    e23a:	33 1f       	adc	r19, r19
    e23c:	4a 95       	dec	r20
    e23e:	d1 f7       	brne	.-12     	; 0xe234 <tm_to_fat+0x8a>
    e240:	ac 01       	movw	r20, r24
    e242:	bd 01       	movw	r22, r26
    e244:	40 2b       	or	r20, r16
    e246:	51 2b       	or	r21, r17
    e248:	62 2b       	or	r22, r18
    e24a:	73 2b       	or	r23, r19
    e24c:	80 85       	ldd	r24, Z+8	; 0x08
    e24e:	91 85       	ldd	r25, Z+9	; 0x09
    e250:	09 2e       	mov	r0, r25
    e252:	00 0c       	add	r0, r0
    e254:	aa 0b       	sbc	r26, r26
    e256:	bb 0b       	sbc	r27, r27
    e258:	01 96       	adiw	r24, 0x01	; 1
    e25a:	a1 1d       	adc	r26, r1
    e25c:	b1 1d       	adc	r27, r1
    e25e:	e5 e1       	ldi	r30, 0x15	; 21
    e260:	88 0f       	add	r24, r24
    e262:	99 1f       	adc	r25, r25
    e264:	aa 1f       	adc	r26, r26
    e266:	bb 1f       	adc	r27, r27
    e268:	ea 95       	dec	r30
    e26a:	d1 f7       	brne	.-12     	; 0xe260 <tm_to_fat+0xb6>
    e26c:	8a 01       	movw	r16, r20
    e26e:	9b 01       	movw	r18, r22
    e270:	08 2b       	or	r16, r24
    e272:	19 2b       	or	r17, r25
    e274:	2a 2b       	or	r18, r26
    e276:	3b 2b       	or	r19, r27
    e278:	c9 01       	movw	r24, r18
    e27a:	b8 01       	movw	r22, r16
}
    e27c:	1f 91       	pop	r17
    e27e:	0f 91       	pop	r16
    e280:	08 95       	ret

0000e282 <get_fattime>:
///
/// @return FAT32 time.
/// @see tm_to_fat().
MEMSPACE
DWORD get_fattime (void)
{
    e282:	a4 e0       	ldi	r26, 0x04	; 4
    e284:	b0 e0       	ldi	r27, 0x00	; 0
    e286:	e7 e4       	ldi	r30, 0x47	; 71
    e288:	f1 e7       	ldi	r31, 0x71	; 113
    e28a:	0c 94 d8 e3 	jmp	0x1c7b0	; 0x1c7b0 <__prologue_saves__+0x20>
    time_t t;
/* Get GMT time */
    time(&t);
    e28e:	ce 01       	movw	r24, r28
    e290:	01 96       	adiw	r24, 0x01	; 1
    e292:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <time>
    return( tm_to_fat(localtime(&t)));
    e296:	ce 01       	movw	r24, r28
    e298:	01 96       	adiw	r24, 0x01	; 1
    e29a:	0e 94 8a 39 	call	0x7314	; 0x7314 <localtime>
    e29e:	85 df       	rcall	.-246    	; 0xe1aa <tm_to_fat>
}
    e2a0:	24 96       	adiw	r28, 0x04	; 4
    e2a2:	e2 e0       	ldi	r30, 0x02	; 2
    e2a4:	0c 94 f4 e3 	jmp	0x1c7e8	; 0x1c7e8 <__epilogue_restores__+0x20>

0000e2a8 <put_rc>:
/// @param[in] rc: FatFs status return code
/// @return  void

MEMSPACE
void put_rc (int rc)
{
    e2a8:	00 d0       	rcall	.+0      	; 0xe2aa <put_rc+0x2>
    e2aa:	00 d0       	rcall	.+0      	; 0xe2ac <put_rc+0x4>
    e2ac:	1f 92       	push	r1
        ptr = "INVALID ERROR MESSAGE";
    else
        ptr = (char *) err_msg[(int)rc];
    printf("rc=%u FR_%s\n", rc, ptr);
#else
    printf("rc=%u\n", rc);
    e2ae:	ed b7       	in	r30, 0x3d	; 61
    e2b0:	fe b7       	in	r31, 0x3e	; 62
    e2b2:	95 83       	std	Z+5, r25	; 0x05
    e2b4:	84 83       	std	Z+4, r24	; 0x04
    e2b6:	8b ec       	ldi	r24, 0xCB	; 203
    e2b8:	99 e0       	ldi	r25, 0x09	; 9
    e2ba:	a0 e0       	ldi	r26, 0x00	; 0
    e2bc:	81 83       	std	Z+1, r24	; 0x01
    e2be:	92 83       	std	Z+2, r25	; 0x02
    e2c0:	a3 83       	std	Z+3, r26	; 0x03
    e2c2:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
#endif
}
    e2c6:	0f 90       	pop	r0
    e2c8:	0f 90       	pop	r0
    e2ca:	0f 90       	pop	r0
    e2cc:	0f 90       	pop	r0
    e2ce:	0f 90       	pop	r0
    e2d0:	08 95       	ret

0000e2d2 <fatfs_scan_files>:

MEMSPACE
int fatfs_scan_files (
char* path                                        /* Pointer to the working buffer with start path */
)
{
    e2d2:	a4 e4       	ldi	r26, 0x44	; 68
    e2d4:	b1 e0       	ldi	r27, 0x01	; 1
    e2d6:	ef e6       	ldi	r30, 0x6F	; 111
    e2d8:	f1 e7       	ldi	r31, 0x71	; 113
    e2da:	0c 94 d3 e3 	jmp	0x1c7a6	; 0x1c7a6 <__prologue_saves__+0x16>
    e2de:	8c 01       	movw	r16, r24
    DIR dirs;
    FRESULT fr;
    int i;
    FILINFO info;

    fr = f_opendir(&dirs, path);
    e2e0:	bc 01       	movw	r22, r24
    e2e2:	ce 01       	movw	r24, r28
    e2e4:	89 5e       	subi	r24, 0xE9	; 233
    e2e6:	9e 4f       	sbci	r25, 0xFE	; 254
    e2e8:	0e 94 70 64 	call	0xc8e0	; 0xc8e0 <f_opendir>
    if (fr == FR_OK) {
    e2ec:	00 97       	sbiw	r24, 0x00	; 0
    e2ee:	09 f0       	breq	.+2      	; 0xe2f2 <fatfs_scan_files+0x20>
    e2f0:	5b c0       	rjmp	.+182    	; 0xe3a8 <fatfs_scan_files+0xd6>
        while (((fr = f_readdir(&dirs, &info)) == FR_OK) && info.fname[0]) {
            if (info.fattrib & AM_DIR) {
                AccDirs++;
                i = strlen(path);
                path[i] = '/'; strcpy(path+i+1, info.fname);
    e2f2:	8f e2       	ldi	r24, 0x2F	; 47
    e2f4:	d8 2e       	mov	r13, r24
    int i;
    FILINFO info;

    fr = f_opendir(&dirs, path);
    if (fr == FR_OK) {
        while (((fr = f_readdir(&dirs, &info)) == FR_OK) && info.fname[0]) {
    e2f6:	be 01       	movw	r22, r28
    e2f8:	6f 5f       	subi	r22, 0xFF	; 255
    e2fa:	7f 4f       	sbci	r23, 0xFF	; 255
    e2fc:	ce 01       	movw	r24, r28
    e2fe:	89 5e       	subi	r24, 0xE9	; 233
    e300:	9e 4f       	sbci	r25, 0xFE	; 254
    e302:	0e 94 f6 64 	call	0xc9ec	; 0xc9ec <f_readdir>
    e306:	00 97       	sbiw	r24, 0x00	; 0
    e308:	09 f0       	breq	.+2      	; 0xe30c <fatfs_scan_files+0x3a>
    e30a:	4e c0       	rjmp	.+156    	; 0xe3a8 <fatfs_scan_files+0xd6>
    e30c:	2f 89       	ldd	r18, Y+23	; 0x17
    e30e:	22 23       	and	r18, r18
    e310:	09 f4       	brne	.+2      	; 0xe314 <fatfs_scan_files+0x42>
    e312:	4a c0       	rjmp	.+148    	; 0xe3a8 <fatfs_scan_files+0xd6>
            if (info.fattrib & AM_DIR) {
    e314:	89 85       	ldd	r24, Y+9	; 0x09
    e316:	84 ff       	sbrs	r24, 4
    e318:	25 c0       	rjmp	.+74     	; 0xe364 <fatfs_scan_files+0x92>
                AccDirs++;
    e31a:	80 91 4f 1c 	lds	r24, 0x1C4F	; 0x801c4f <AccDirs>
    e31e:	90 91 50 1c 	lds	r25, 0x1C50	; 0x801c50 <AccDirs+0x1>
    e322:	01 96       	adiw	r24, 0x01	; 1
    e324:	90 93 50 1c 	sts	0x1C50, r25	; 0x801c50 <AccDirs+0x1>
    e328:	80 93 4f 1c 	sts	0x1C4F, r24	; 0x801c4f <AccDirs>
                i = strlen(path);
    e32c:	f8 01       	movw	r30, r16
    e32e:	01 90       	ld	r0, Z+
    e330:	00 20       	and	r0, r0
    e332:	e9 f7       	brne	.-6      	; 0xe32e <fatfs_scan_files+0x5c>
    e334:	31 97       	sbiw	r30, 0x01	; 1
    e336:	e0 1b       	sub	r30, r16
    e338:	f1 0b       	sbc	r31, r17
                path[i] = '/'; strcpy(path+i+1, info.fname);
    e33a:	78 01       	movw	r14, r16
    e33c:	ee 0e       	add	r14, r30
    e33e:	ff 1e       	adc	r15, r31
    e340:	d7 01       	movw	r26, r14
    e342:	dc 92       	st	X, r13
    e344:	cf 01       	movw	r24, r30
    e346:	01 96       	adiw	r24, 0x01	; 1
    e348:	be 01       	movw	r22, r28
    e34a:	69 5e       	subi	r22, 0xE9	; 233
    e34c:	7f 4f       	sbci	r23, 0xFF	; 255
    e34e:	80 0f       	add	r24, r16
    e350:	91 1f       	adc	r25, r17
    e352:	0e 94 35 32 	call	0x646a	; 0x646a <strcpy>
                fr = fatfs_scan_files(path);
    e356:	c8 01       	movw	r24, r16
    e358:	bc df       	rcall	.-136    	; 0xe2d2 <fatfs_scan_files>
                path[i] = 0;
    e35a:	f7 01       	movw	r30, r14
    e35c:	10 82       	st	Z, r1
                if (fr != FR_OK) break;
    e35e:	00 97       	sbiw	r24, 0x00	; 0
    e360:	51 f2       	breq	.-108    	; 0xe2f6 <fatfs_scan_files+0x24>
    e362:	22 c0       	rjmp	.+68     	; 0xe3a8 <fatfs_scan_files+0xd6>
            } else {
//              xprintf(PSTR("%s/%s\n"), path, info.fname);
                AccFiles++;
    e364:	80 91 51 1c 	lds	r24, 0x1C51	; 0x801c51 <AccFiles>
    e368:	90 91 52 1c 	lds	r25, 0x1C52	; 0x801c52 <AccFiles+0x1>
    e36c:	01 96       	adiw	r24, 0x01	; 1
    e36e:	90 93 52 1c 	sts	0x1C52, r25	; 0x801c52 <AccFiles+0x1>
    e372:	80 93 51 1c 	sts	0x1C51, r24	; 0x801c51 <AccFiles>
                AccSize += info.fsize;
    e376:	40 91 4b 1c 	lds	r20, 0x1C4B	; 0x801c4b <AccSize>
    e37a:	50 91 4c 1c 	lds	r21, 0x1C4C	; 0x801c4c <AccSize+0x1>
    e37e:	60 91 4d 1c 	lds	r22, 0x1C4D	; 0x801c4d <AccSize+0x2>
    e382:	70 91 4e 1c 	lds	r23, 0x1C4E	; 0x801c4e <AccSize+0x3>
    e386:	89 81       	ldd	r24, Y+1	; 0x01
    e388:	9a 81       	ldd	r25, Y+2	; 0x02
    e38a:	ab 81       	ldd	r26, Y+3	; 0x03
    e38c:	bc 81       	ldd	r27, Y+4	; 0x04
    e38e:	84 0f       	add	r24, r20
    e390:	95 1f       	adc	r25, r21
    e392:	a6 1f       	adc	r26, r22
    e394:	b7 1f       	adc	r27, r23
    e396:	80 93 4b 1c 	sts	0x1C4B, r24	; 0x801c4b <AccSize>
    e39a:	90 93 4c 1c 	sts	0x1C4C, r25	; 0x801c4c <AccSize+0x1>
    e39e:	a0 93 4d 1c 	sts	0x1C4D, r26	; 0x801c4d <AccSize+0x2>
    e3a2:	b0 93 4e 1c 	sts	0x1C4E, r27	; 0x801c4e <AccSize+0x3>
    e3a6:	a7 cf       	rjmp	.-178    	; 0xe2f6 <fatfs_scan_files+0x24>
#endif
        }
    }

    return fr;
}
    e3a8:	cc 5b       	subi	r28, 0xBC	; 188
    e3aa:	de 4f       	sbci	r29, 0xFE	; 254
    e3ac:	e7 e0       	ldi	r30, 0x07	; 7
    e3ae:	0c 94 ef e3 	jmp	0x1c7de	; 0x1c7de <__epilogue_restores__+0x16>

0000e3b2 <fatfs_fstype>:
/// @brief  return a string with the file system type
/// @param[in] type: file system type
/// @return string with file system type
MEMSPACE
char *fatfs_fstype(int type)
{
    e3b2:	01 97       	sbiw	r24, 0x01	; 1
    e3b4:	84 30       	cpi	r24, 0x04	; 4
    e3b6:	91 05       	cpc	r25, r1
    e3b8:	40 f4       	brcc	.+16     	; 0xe3ca <fatfs_fstype+0x18>
    e3ba:	88 0f       	add	r24, r24
    e3bc:	99 1f       	adc	r25, r25
    e3be:	fc 01       	movw	r30, r24
    e3c0:	e6 51       	subi	r30, 0x16	; 22
    e3c2:	f8 4f       	sbci	r31, 0xF8	; 248
    e3c4:	80 81       	ld	r24, Z
    e3c6:	91 81       	ldd	r25, Z+1	; 0x01
    e3c8:	08 95       	ret
    char *ptr;
    switch(type)
    e3ca:	88 ec       	ldi	r24, 0xC8	; 200
    e3cc:	97 e0       	ldi	r25, 0x07	; 7
        default:
             ptr = "UNKNOWN";
            break;
    }
    return(ptr);
}
    e3ce:	08 95       	ret

0000e3d0 <fatfs_status>:
/// @see AccFiles: Total number of Files
/// @see AccSize:  Total size of all files
/// @return  void
MEMSPACE
void fatfs_status(char *ptr)
{
    e3d0:	a7 e3       	ldi	r26, 0x37	; 55
    e3d2:	b0 e0       	ldi	r27, 0x00	; 0
    e3d4:	ee ee       	ldi	r30, 0xEE	; 238
    e3d6:	f1 e7       	ldi	r31, 0x71	; 113
    e3d8:	0c 94 d2 e3 	jmp	0x1c7a4	; 0x1c7a4 <__prologue_saves__+0x14>
    e3dc:	7c 01       	movw	r14, r24
    int res;
    FATFS *fs;
    char label[24+2];
    DWORD vsn; // volume serial number

    while(*ptr == ' ' || *ptr == '\t')
    e3de:	fc 01       	movw	r30, r24
    e3e0:	21 91       	ld	r18, Z+
    e3e2:	cf 01       	movw	r24, r30
    e3e4:	20 32       	cpi	r18, 0x20	; 32
    e3e6:	d1 f3       	breq	.-12     	; 0xe3dc <fatfs_status+0xc>
    e3e8:	29 30       	cpi	r18, 0x09	; 9
    e3ea:	c1 f3       	breq	.-16     	; 0xe3dc <fatfs_status+0xc>
        ++ptr;
    printf("fatfs status:%s\n",ptr);
    e3ec:	ed b7       	in	r30, 0x3d	; 61
    e3ee:	fe b7       	in	r31, 0x3e	; 62
    e3f0:	e4 82       	std	Z+4, r14	; 0x04
    e3f2:	f5 82       	std	Z+5, r15	; 0x05
    e3f4:	8a eb       	ldi	r24, 0xBA	; 186
    e3f6:	99 e0       	ldi	r25, 0x09	; 9
    e3f8:	a0 e0       	ldi	r26, 0x00	; 0
    e3fa:	81 83       	std	Z+1, r24	; 0x01
    e3fc:	92 83       	std	Z+2, r25	; 0x02
    e3fe:	a3 83       	std	Z+3, r26	; 0x03
    e400:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    res = f_getfree(ptr, (DWORD*)&p2, &fs);
    e404:	ae 01       	movw	r20, r28
    e406:	4a 5c       	subi	r20, 0xCA	; 202
    e408:	5f 4f       	sbci	r21, 0xFF	; 255
    e40a:	be 01       	movw	r22, r28
    e40c:	6e 5c       	subi	r22, 0xCE	; 206
    e40e:	7f 4f       	sbci	r23, 0xFF	; 255
    e410:	c7 01       	movw	r24, r14
    e412:	0e 94 78 65 	call	0xcaf0	; 0xcaf0 <f_getfree>
    if (res)
    e416:	00 97       	sbiw	r24, 0x00	; 0
    e418:	09 f0       	breq	.+2      	; 0xe41c <fatfs_status+0x4c>
    e41a:	f8 c0       	rjmp	.+496    	; 0xe60c <fatfs_status+0x23c>
    {
        put_rc(res);
        return;
    }
    printf("FAT type                = %s\n",  fatfs_fstype(fs->fs_type));
    e41c:	ee a9       	ldd	r30, Y+54	; 0x36
    e41e:	ff a9       	ldd	r31, Y+55	; 0x37
    e420:	80 81       	ld	r24, Z
    e422:	90 e0       	ldi	r25, 0x00	; 0
    e424:	c6 df       	rcall	.-116    	; 0xe3b2 <fatfs_fstype>
    e426:	ed b7       	in	r30, 0x3d	; 61
    e428:	fe b7       	in	r31, 0x3e	; 62
    e42a:	95 83       	std	Z+5, r25	; 0x05
    e42c:	84 83       	std	Z+4, r24	; 0x04
    e42e:	8c e9       	ldi	r24, 0x9C	; 156
    e430:	99 e0       	ldi	r25, 0x09	; 9
    e432:	a0 e0       	ldi	r26, 0x00	; 0
    e434:	81 83       	std	Z+1, r24	; 0x01
    e436:	92 83       	std	Z+2, r25	; 0x02
    e438:	a3 83       	std	Z+3, r26	; 0x03
    e43a:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    printf("Bytes/Cluster           = %lu\n", (DWORD)fs->csize * 512);
    e43e:	ee a9       	ldd	r30, Y+54	; 0x36
    e440:	ff a9       	ldd	r31, Y+55	; 0x37
    e442:	81 85       	ldd	r24, Z+9	; 0x09
    e444:	92 85       	ldd	r25, Z+10	; 0x0a
    e446:	a0 e0       	ldi	r26, 0x00	; 0
    e448:	b0 e0       	ldi	r27, 0x00	; 0
    e44a:	39 e0       	ldi	r19, 0x09	; 9
    e44c:	88 0f       	add	r24, r24
    e44e:	99 1f       	adc	r25, r25
    e450:	aa 1f       	adc	r26, r26
    e452:	bb 1f       	adc	r27, r27
    e454:	3a 95       	dec	r19
    e456:	d1 f7       	brne	.-12     	; 0xe44c <fatfs_status+0x7c>
    e458:	ed b7       	in	r30, 0x3d	; 61
    e45a:	fe b7       	in	r31, 0x3e	; 62
    e45c:	84 83       	std	Z+4, r24	; 0x04
    e45e:	95 83       	std	Z+5, r25	; 0x05
    e460:	a6 83       	std	Z+6, r26	; 0x06
    e462:	b7 83       	std	Z+7, r27	; 0x07
    e464:	8d e7       	ldi	r24, 0x7D	; 125
    e466:	99 e0       	ldi	r25, 0x09	; 9
    e468:	a0 e0       	ldi	r26, 0x00	; 0
    e46a:	81 83       	std	Z+1, r24	; 0x01
    e46c:	92 83       	std	Z+2, r25	; 0x02
    e46e:	a3 83       	std	Z+3, r26	; 0x03
    e470:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    printf("Number of FATs          = %u\n",  fs->n_fats);
    e474:	ee a9       	ldd	r30, Y+54	; 0x36
    e476:	ff a9       	ldd	r31, Y+55	; 0x37
    e478:	82 81       	ldd	r24, Z+2	; 0x02
    e47a:	90 e0       	ldi	r25, 0x00	; 0
    e47c:	ed b7       	in	r30, 0x3d	; 61
    e47e:	fe b7       	in	r31, 0x3e	; 62
    e480:	95 83       	std	Z+5, r25	; 0x05
    e482:	84 83       	std	Z+4, r24	; 0x04
    e484:	8f e5       	ldi	r24, 0x5F	; 95
    e486:	99 e0       	ldi	r25, 0x09	; 9
    e488:	a0 e0       	ldi	r26, 0x00	; 0
    e48a:	81 83       	std	Z+1, r24	; 0x01
    e48c:	92 83       	std	Z+2, r25	; 0x02
    e48e:	a3 83       	std	Z+3, r26	; 0x03
    e490:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    printf("Root DIR entries        = %u\n",  fs->n_rootdir);
    e494:	ee a9       	ldd	r30, Y+54	; 0x36
    e496:	ff a9       	ldd	r31, Y+55	; 0x37
    e498:	87 81       	ldd	r24, Z+7	; 0x07
    e49a:	90 85       	ldd	r25, Z+8	; 0x08
    e49c:	ed b7       	in	r30, 0x3d	; 61
    e49e:	fe b7       	in	r31, 0x3e	; 62
    e4a0:	95 83       	std	Z+5, r25	; 0x05
    e4a2:	84 83       	std	Z+4, r24	; 0x04
    e4a4:	81 e4       	ldi	r24, 0x41	; 65
    e4a6:	99 e0       	ldi	r25, 0x09	; 9
    e4a8:	a0 e0       	ldi	r26, 0x00	; 0
    e4aa:	81 83       	std	Z+1, r24	; 0x01
    e4ac:	92 83       	std	Z+2, r25	; 0x02
    e4ae:	a3 83       	std	Z+3, r26	; 0x03
    e4b0:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    printf("Sectors/FAT             = %lu\n", fs->fsize);
    e4b4:	ee a9       	ldd	r30, Y+54	; 0x36
    e4b6:	ff a9       	ldd	r31, Y+55	; 0x37
    e4b8:	85 8d       	ldd	r24, Z+29	; 0x1d
    e4ba:	96 8d       	ldd	r25, Z+30	; 0x1e
    e4bc:	a7 8d       	ldd	r26, Z+31	; 0x1f
    e4be:	b0 a1       	ldd	r27, Z+32	; 0x20
    e4c0:	ed b7       	in	r30, 0x3d	; 61
    e4c2:	fe b7       	in	r31, 0x3e	; 62
    e4c4:	84 83       	std	Z+4, r24	; 0x04
    e4c6:	95 83       	std	Z+5, r25	; 0x05
    e4c8:	a6 83       	std	Z+6, r26	; 0x06
    e4ca:	b7 83       	std	Z+7, r27	; 0x07
    e4cc:	82 e2       	ldi	r24, 0x22	; 34
    e4ce:	99 e0       	ldi	r25, 0x09	; 9
    e4d0:	a0 e0       	ldi	r26, 0x00	; 0
    e4d2:	81 83       	std	Z+1, r24	; 0x01
    e4d4:	92 83       	std	Z+2, r25	; 0x02
    e4d6:	a3 83       	std	Z+3, r26	; 0x03
    e4d8:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    printf("Number of clusters      = %lu\n", fs->n_fatent - 2);
    e4dc:	ee a9       	ldd	r30, Y+54	; 0x36
    e4de:	ff a9       	ldd	r31, Y+55	; 0x37
    e4e0:	81 8d       	ldd	r24, Z+25	; 0x19
    e4e2:	92 8d       	ldd	r25, Z+26	; 0x1a
    e4e4:	a3 8d       	ldd	r26, Z+27	; 0x1b
    e4e6:	b4 8d       	ldd	r27, Z+28	; 0x1c
    e4e8:	02 97       	sbiw	r24, 0x02	; 2
    e4ea:	a1 09       	sbc	r26, r1
    e4ec:	b1 09       	sbc	r27, r1
    e4ee:	ed b7       	in	r30, 0x3d	; 61
    e4f0:	fe b7       	in	r31, 0x3e	; 62
    e4f2:	84 83       	std	Z+4, r24	; 0x04
    e4f4:	95 83       	std	Z+5, r25	; 0x05
    e4f6:	a6 83       	std	Z+6, r26	; 0x06
    e4f8:	b7 83       	std	Z+7, r27	; 0x07
    e4fa:	83 e0       	ldi	r24, 0x03	; 3
    e4fc:	99 e0       	ldi	r25, 0x09	; 9
    e4fe:	a0 e0       	ldi	r26, 0x00	; 0
    e500:	81 83       	std	Z+1, r24	; 0x01
    e502:	92 83       	std	Z+2, r25	; 0x02
    e504:	a3 83       	std	Z+3, r26	; 0x03
    e506:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    printf("FAT start (lba)         = %lu\n", fs->fatbase);
    e50a:	ee a9       	ldd	r30, Y+54	; 0x36
    e50c:	ff a9       	ldd	r31, Y+55	; 0x37
    e50e:	85 a1       	ldd	r24, Z+37	; 0x25
    e510:	96 a1       	ldd	r25, Z+38	; 0x26
    e512:	a7 a1       	ldd	r26, Z+39	; 0x27
    e514:	b0 a5       	ldd	r27, Z+40	; 0x28
    e516:	ed b7       	in	r30, 0x3d	; 61
    e518:	fe b7       	in	r31, 0x3e	; 62
    e51a:	84 83       	std	Z+4, r24	; 0x04
    e51c:	95 83       	std	Z+5, r25	; 0x05
    e51e:	a6 83       	std	Z+6, r26	; 0x06
    e520:	b7 83       	std	Z+7, r27	; 0x07
    e522:	84 ee       	ldi	r24, 0xE4	; 228
    e524:	98 e0       	ldi	r25, 0x08	; 8
    e526:	a0 e0       	ldi	r26, 0x00	; 0
    e528:	81 83       	std	Z+1, r24	; 0x01
    e52a:	92 83       	std	Z+2, r25	; 0x02
    e52c:	a3 83       	std	Z+3, r26	; 0x03
    e52e:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    printf("DIR start (lba,clustor) = %lu\n", fs->dirbase);
    e532:	ee a9       	ldd	r30, Y+54	; 0x36
    e534:	ff a9       	ldd	r31, Y+55	; 0x37
    e536:	81 a5       	ldd	r24, Z+41	; 0x29
    e538:	92 a5       	ldd	r25, Z+42	; 0x2a
    e53a:	a3 a5       	ldd	r26, Z+43	; 0x2b
    e53c:	b4 a5       	ldd	r27, Z+44	; 0x2c
    e53e:	ed b7       	in	r30, 0x3d	; 61
    e540:	fe b7       	in	r31, 0x3e	; 62
    e542:	84 83       	std	Z+4, r24	; 0x04
    e544:	95 83       	std	Z+5, r25	; 0x05
    e546:	a6 83       	std	Z+6, r26	; 0x06
    e548:	b7 83       	std	Z+7, r27	; 0x07
    e54a:	85 ec       	ldi	r24, 0xC5	; 197
    e54c:	98 e0       	ldi	r25, 0x08	; 8
    e54e:	a0 e0       	ldi	r26, 0x00	; 0
    e550:	81 83       	std	Z+1, r24	; 0x01
    e552:	92 83       	std	Z+2, r25	; 0x02
    e554:	a3 83       	std	Z+3, r26	; 0x03
    e556:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    printf("Data start (lba)        = %lu\n", fs->database);
    e55a:	ee a9       	ldd	r30, Y+54	; 0x36
    e55c:	ff a9       	ldd	r31, Y+55	; 0x37
    e55e:	85 a5       	ldd	r24, Z+45	; 0x2d
    e560:	96 a5       	ldd	r25, Z+46	; 0x2e
    e562:	a7 a5       	ldd	r26, Z+47	; 0x2f
    e564:	b0 a9       	ldd	r27, Z+48	; 0x30
    e566:	ed b7       	in	r30, 0x3d	; 61
    e568:	fe b7       	in	r31, 0x3e	; 62
    e56a:	84 83       	std	Z+4, r24	; 0x04
    e56c:	95 83       	std	Z+5, r25	; 0x05
    e56e:	a6 83       	std	Z+6, r26	; 0x06
    e570:	b7 83       	std	Z+7, r27	; 0x07
    e572:	86 ea       	ldi	r24, 0xA6	; 166
    e574:	98 e0       	ldi	r25, 0x08	; 8
    e576:	a0 e0       	ldi	r26, 0x00	; 0
    e578:	81 83       	std	Z+1, r24	; 0x01
    e57a:	92 83       	std	Z+2, r25	; 0x02
    e57c:	a3 83       	std	Z+3, r26	; 0x03
    e57e:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>

#if FF_USE_LABEL
    res = f_getlabel(ptr, label, (DWORD*)&vsn);
    e582:	ae 01       	movw	r20, r28
    e584:	42 5d       	subi	r20, 0xD2	; 210
    e586:	5f 4f       	sbci	r21, 0xFF	; 255
    e588:	be 01       	movw	r22, r28
    e58a:	6c 5e       	subi	r22, 0xEC	; 236
    e58c:	7f 4f       	sbci	r23, 0xFF	; 255
    e58e:	c7 01       	movw	r24, r14
    e590:	0e 94 aa 69 	call	0xd354	; 0xd354 <f_getlabel>
    if (res)
    e594:	00 97       	sbiw	r24, 0x00	; 0
    e596:	d1 f5       	brne	.+116    	; 0xe60c <fatfs_status+0x23c>
    {
        put_rc(res);
        return;
    }
    printf("Volume name             = %s\n", label[0] ? label : "<blank>");
    e598:	8c 89       	ldd	r24, Y+20	; 0x14
    e59a:	81 11       	cpse	r24, r1
    e59c:	03 c0       	rjmp	.+6      	; 0xe5a4 <fatfs_status+0x1d4>
    e59e:	80 ed       	ldi	r24, 0xD0	; 208
    e5a0:	97 e0       	ldi	r25, 0x07	; 7
    e5a2:	02 c0       	rjmp	.+4      	; 0xe5a8 <fatfs_status+0x1d8>
    e5a4:	ce 01       	movw	r24, r28
    e5a6:	44 96       	adiw	r24, 0x14	; 20
    e5a8:	ed b7       	in	r30, 0x3d	; 61
    e5aa:	fe b7       	in	r31, 0x3e	; 62
    e5ac:	95 83       	std	Z+5, r25	; 0x05
    e5ae:	84 83       	std	Z+4, r24	; 0x04
    e5b0:	88 e8       	ldi	r24, 0x88	; 136
    e5b2:	98 e0       	ldi	r25, 0x08	; 8
    e5b4:	a0 e0       	ldi	r26, 0x00	; 0
    e5b6:	81 83       	std	Z+1, r24	; 0x01
    e5b8:	92 83       	std	Z+2, r25	; 0x02
    e5ba:	a3 83       	std	Z+3, r26	; 0x03
    e5bc:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    printf("Volume S/N              = %04X-%04X\n", (WORD)((DWORD)vsn >> 16), (WORD)(vsn & 0xFFFF));
    e5c0:	8e a5       	ldd	r24, Y+46	; 0x2e
    e5c2:	9f a5       	ldd	r25, Y+47	; 0x2f
    e5c4:	a8 a9       	ldd	r26, Y+48	; 0x30
    e5c6:	b9 a9       	ldd	r27, Y+49	; 0x31
    e5c8:	ed b7       	in	r30, 0x3d	; 61
    e5ca:	fe b7       	in	r31, 0x3e	; 62
    e5cc:	97 83       	std	Z+7, r25	; 0x07
    e5ce:	86 83       	std	Z+6, r24	; 0x06
    e5d0:	b5 83       	std	Z+5, r27	; 0x05
    e5d2:	a4 83       	std	Z+4, r26	; 0x04
    e5d4:	83 e6       	ldi	r24, 0x63	; 99
    e5d6:	98 e0       	ldi	r25, 0x08	; 8
    e5d8:	a0 e0       	ldi	r26, 0x00	; 0
    e5da:	81 83       	std	Z+1, r24	; 0x01
    e5dc:	92 83       	std	Z+2, r25	; 0x02
    e5de:	a3 83       	std	Z+3, r26	; 0x03
    e5e0:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
#endif

    AccSize = AccFiles = AccDirs = 0;
    e5e4:	10 92 50 1c 	sts	0x1C50, r1	; 0x801c50 <AccDirs+0x1>
    e5e8:	10 92 4f 1c 	sts	0x1C4F, r1	; 0x801c4f <AccDirs>
    e5ec:	10 92 52 1c 	sts	0x1C52, r1	; 0x801c52 <AccFiles+0x1>
    e5f0:	10 92 51 1c 	sts	0x1C51, r1	; 0x801c51 <AccFiles>
    e5f4:	10 92 4b 1c 	sts	0x1C4B, r1	; 0x801c4b <AccSize>
    e5f8:	10 92 4c 1c 	sts	0x1C4C, r1	; 0x801c4c <AccSize+0x1>
    e5fc:	10 92 4d 1c 	sts	0x1C4D, r1	; 0x801c4d <AccSize+0x2>
    e600:	10 92 4e 1c 	sts	0x1C4E, r1	; 0x801c4e <AccSize+0x3>
    res = fatfs_scan_files(ptr);
    if (res)
    e604:	c7 01       	movw	r24, r14
    {
        put_rc(res);
    e606:	65 de       	rcall	.-822    	; 0xe2d2 <fatfs_scan_files>
    e608:	00 97       	sbiw	r24, 0x00	; 0
        return;
    e60a:	11 f0       	breq	.+4      	; 0xe610 <fatfs_status+0x240>
    }
    printf("%u files, %lu bytes.\n%u folders.\n"
    e60c:	4d de       	rcall	.-870    	; 0xe2a8 <put_rc>
    e60e:	56 c0       	rjmp	.+172    	; 0xe6bc <fatfs_status+0x2ec>
    e610:	0e a9       	ldd	r16, Y+54	; 0x36
    e612:	1f a9       	ldd	r17, Y+55	; 0x37
    e614:	f8 01       	movw	r30, r16
    e616:	c1 84       	ldd	r12, Z+9	; 0x09
    e618:	d2 84       	ldd	r13, Z+10	; 0x0a
    e61a:	e1 2c       	mov	r14, r1
    e61c:	f1 2c       	mov	r15, r1
    e61e:	6a a9       	ldd	r22, Y+50	; 0x32
    e620:	7b a9       	ldd	r23, Y+51	; 0x33
    e622:	8c a9       	ldd	r24, Y+52	; 0x34
    e624:	9d a9       	ldd	r25, Y+53	; 0x35
    e626:	a7 01       	movw	r20, r14
    e628:	96 01       	movw	r18, r12
    e62a:	0e 94 04 e3 	call	0x1c608	; 0x1c608 <__mulsi3>
    e62e:	22 e0       	ldi	r18, 0x02	; 2
    e630:	30 e0       	ldi	r19, 0x00	; 0
    e632:	40 e0       	ldi	r20, 0x00	; 0
    e634:	50 e0       	ldi	r21, 0x00	; 0
    e636:	0e 94 68 e3 	call	0x1c6d0	; 0x1c6d0 <__divmodsi4>
    e63a:	ed b7       	in	r30, 0x3d	; 61
    e63c:	fe b7       	in	r31, 0x3e	; 62
    e63e:	20 8b       	std	Z+16, r18	; 0x10
    e640:	31 8b       	std	Z+17, r19	; 0x11
    e642:	42 8b       	std	Z+18, r20	; 0x12
    e644:	53 8b       	std	Z+19, r21	; 0x13
    e646:	f8 01       	movw	r30, r16
    e648:	81 8d       	ldd	r24, Z+25	; 0x19
    e64a:	92 8d       	ldd	r25, Z+26	; 0x1a
    e64c:	a3 8d       	ldd	r26, Z+27	; 0x1b
    e64e:	b4 8d       	ldd	r27, Z+28	; 0x1c
    e650:	9c 01       	movw	r18, r24
    e652:	ad 01       	movw	r20, r26
    e654:	22 50       	subi	r18, 0x02	; 2
    e656:	31 09       	sbc	r19, r1
    e658:	41 09       	sbc	r20, r1
    e65a:	51 09       	sbc	r21, r1
    e65c:	c7 01       	movw	r24, r14
    e65e:	b6 01       	movw	r22, r12
    e660:	0e 94 04 e3 	call	0x1c608	; 0x1c608 <__mulsi3>
    e664:	dc 01       	movw	r26, r24
    e666:	cb 01       	movw	r24, r22
    e668:	b6 95       	lsr	r27
    e66a:	a7 95       	ror	r26
    e66c:	97 95       	ror	r25
    e66e:	87 95       	ror	r24
    e670:	ed b7       	in	r30, 0x3d	; 61
    e672:	fe b7       	in	r31, 0x3e	; 62
    e674:	84 87       	std	Z+12, r24	; 0x0c
    e676:	95 87       	std	Z+13, r25	; 0x0d
    e678:	a6 87       	std	Z+14, r26	; 0x0e
    e67a:	b7 87       	std	Z+15, r27	; 0x0f
    e67c:	80 91 4f 1c 	lds	r24, 0x1C4F	; 0x801c4f <AccDirs>
    e680:	90 91 50 1c 	lds	r25, 0x1C50	; 0x801c50 <AccDirs+0x1>
    e684:	93 87       	std	Z+11, r25	; 0x0b
    e686:	82 87       	std	Z+10, r24	; 0x0a
    e688:	80 91 4b 1c 	lds	r24, 0x1C4B	; 0x801c4b <AccSize>
    e68c:	90 91 4c 1c 	lds	r25, 0x1C4C	; 0x801c4c <AccSize+0x1>
    e690:	a0 91 4d 1c 	lds	r26, 0x1C4D	; 0x801c4d <AccSize+0x2>
    e694:	b0 91 4e 1c 	lds	r27, 0x1C4E	; 0x801c4e <AccSize+0x3>
    e698:	86 83       	std	Z+6, r24	; 0x06
    e69a:	97 83       	std	Z+7, r25	; 0x07
    e69c:	a0 87       	std	Z+8, r26	; 0x08
    e69e:	b1 87       	std	Z+9, r27	; 0x09
    e6a0:	80 91 51 1c 	lds	r24, 0x1C51	; 0x801c51 <AccFiles>
    e6a4:	90 91 52 1c 	lds	r25, 0x1C52	; 0x801c52 <AccFiles+0x1>
    e6a8:	95 83       	std	Z+5, r25	; 0x05
    e6aa:	84 83       	std	Z+4, r24	; 0x04
    e6ac:	86 e1       	ldi	r24, 0x16	; 22
    e6ae:	98 e0       	ldi	r25, 0x08	; 8
    e6b0:	a0 e0       	ldi	r26, 0x00	; 0
    e6b2:	81 83       	std	Z+1, r24	; 0x01
    e6b4:	92 83       	std	Z+2, r25	; 0x02
    e6b6:	a3 83       	std	Z+3, r26	; 0x03
                 "%lu KB total disk space.\n%lu KB available.\n",
            AccFiles, AccSize, AccDirs,
            (fs->n_fatent - 2) * fs->csize / 2, p2 * fs->csize / 2
    );

}
    e6b8:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    e6bc:	e7 96       	adiw	r28, 0x37	; 55
    e6be:	e8 e0       	ldi	r30, 0x08	; 8
    e6c0:	0c 94 ee e3 	jmp	0x1c7dc	; 0x1c7dc <__epilogue_restores__+0x14>

0000e6c4 <fatfs_filinfo_list>:
/// @param[in] : FILINFO pointer
/// @return  void

MEMSPACE
void fatfs_filinfo_list(FILINFO *info)
{
    e6c4:	ab e1       	ldi	r26, 0x1B	; 27
    e6c6:	b0 e0       	ldi	r27, 0x00	; 0
    e6c8:	e8 e6       	ldi	r30, 0x68	; 104
    e6ca:	f3 e7       	ldi	r31, 0x73	; 115
    e6cc:	0c 94 d8 e3 	jmp	0x1c7b0	; 0x1c7b0 <__prologue_saves__+0x20>
    e6d0:	dc 01       	movw	r26, r24
    char attrs[6];
    if(info->fname[0] == 0)
    e6d2:	fc 01       	movw	r30, r24
    e6d4:	86 89       	ldd	r24, Z+22	; 0x16
    e6d6:	81 11       	cpse	r24, r1
    e6d8:	03 c0       	rjmp	.+6      	; 0xe6e0 <fatfs_filinfo_list+0x1c>
    {
        printf("fatfs_filinfo_list: empty\n");
    e6da:	8b ef       	ldi	r24, 0xFB	; 251
    e6dc:	97 e0       	ldi	r25, 0x07	; 7
    e6de:	69 c0       	rjmp	.+210    	; 0xe7b2 <fatfs_filinfo_list+0xee>
        return;
    }
    attrs[0] = (info->fattrib & AM_DIR) ? 'D' : '-';
    e6e0:	fd 01       	movw	r30, r26
    e6e2:	80 85       	ldd	r24, Z+8	; 0x08
    e6e4:	84 fd       	sbrc	r24, 4
    e6e6:	02 c0       	rjmp	.+4      	; 0xe6ec <fatfs_filinfo_list+0x28>
    e6e8:	9d e2       	ldi	r25, 0x2D	; 45
    e6ea:	01 c0       	rjmp	.+2      	; 0xe6ee <fatfs_filinfo_list+0x2a>
    e6ec:	94 e4       	ldi	r25, 0x44	; 68
    e6ee:	9e 8b       	std	Y+22, r25	; 0x16
    attrs[1] = (info->fattrib & AM_RDO) ? 'R' : '-';
    e6f0:	80 fd       	sbrc	r24, 0
    e6f2:	02 c0       	rjmp	.+4      	; 0xe6f8 <fatfs_filinfo_list+0x34>
    e6f4:	9d e2       	ldi	r25, 0x2D	; 45
    e6f6:	01 c0       	rjmp	.+2      	; 0xe6fa <fatfs_filinfo_list+0x36>
    e6f8:	92 e5       	ldi	r25, 0x52	; 82
    e6fa:	9f 8b       	std	Y+23, r25	; 0x17
    attrs[2] = (info->fattrib & AM_HID) ? 'H' : '-';
    e6fc:	81 fd       	sbrc	r24, 1
    e6fe:	02 c0       	rjmp	.+4      	; 0xe704 <fatfs_filinfo_list+0x40>
    e700:	9d e2       	ldi	r25, 0x2D	; 45
    e702:	01 c0       	rjmp	.+2      	; 0xe706 <fatfs_filinfo_list+0x42>
    e704:	98 e4       	ldi	r25, 0x48	; 72
    e706:	98 8f       	std	Y+24, r25	; 0x18
    attrs[3] = (info->fattrib & AM_SYS) ? 'S' : '-';
    e708:	82 fd       	sbrc	r24, 2
    e70a:	02 c0       	rjmp	.+4      	; 0xe710 <fatfs_filinfo_list+0x4c>
    e70c:	9d e2       	ldi	r25, 0x2D	; 45
    e70e:	01 c0       	rjmp	.+2      	; 0xe712 <fatfs_filinfo_list+0x4e>
    e710:	93 e5       	ldi	r25, 0x53	; 83
    e712:	99 8f       	std	Y+25, r25	; 0x19
    attrs[4] = (info->fattrib & AM_ARC) ? 'A' : '-';
    e714:	85 fd       	sbrc	r24, 5
    e716:	02 c0       	rjmp	.+4      	; 0xe71c <fatfs_filinfo_list+0x58>
    e718:	8d e2       	ldi	r24, 0x2D	; 45
    e71a:	01 c0       	rjmp	.+2      	; 0xe71e <fatfs_filinfo_list+0x5a>
    e71c:	81 e4       	ldi	r24, 0x41	; 65
    e71e:	8a 8f       	std	Y+26, r24	; 0x1a
    attrs[5] = 0;
    e720:	1b 8e       	std	Y+27, r1	; 0x1b
    printf("%s %u/%02u/%02u %02u:%02u %9lu %s",
    e722:	fd 01       	movw	r30, r26
    e724:	24 81       	ldd	r18, Z+4	; 0x04
    e726:	35 81       	ldd	r19, Z+5	; 0x05
    e728:	46 81       	ldd	r20, Z+6	; 0x06
    e72a:	57 81       	ldd	r21, Z+7	; 0x07
    e72c:	cd 01       	movw	r24, r26
    e72e:	46 96       	adiw	r24, 0x16	; 22
    e730:	ed b7       	in	r30, 0x3d	; 61
    e732:	fe b7       	in	r31, 0x3e	; 62
    e734:	95 8b       	std	Z+21, r25	; 0x15
    e736:	84 8b       	std	Z+20, r24	; 0x14
    e738:	8d 91       	ld	r24, X+
    e73a:	9d 91       	ld	r25, X+
    e73c:	0d 90       	ld	r0, X+
    e73e:	bc 91       	ld	r27, X
    e740:	a0 2d       	mov	r26, r0
    e742:	80 8b       	std	Z+16, r24	; 0x10
    e744:	91 8b       	std	Z+17, r25	; 0x11
    e746:	a2 8b       	std	Z+18, r26	; 0x12
    e748:	b3 8b       	std	Z+19, r27	; 0x13
    e74a:	ca 01       	movw	r24, r20
    e74c:	45 e0       	ldi	r20, 0x05	; 5
    e74e:	96 95       	lsr	r25
    e750:	87 95       	ror	r24
    e752:	4a 95       	dec	r20
    e754:	e1 f7       	brne	.-8      	; 0xe74e <fatfs_filinfo_list+0x8a>
    e756:	8f 73       	andi	r24, 0x3F	; 63
    e758:	99 27       	eor	r25, r25
    e75a:	97 87       	std	Z+15, r25	; 0x0f
    e75c:	86 87       	std	Z+14, r24	; 0x0e
    e75e:	85 2f       	mov	r24, r21
    e760:	86 95       	lsr	r24
    e762:	86 95       	lsr	r24
    e764:	86 95       	lsr	r24
    e766:	84 87       	std	Z+12, r24	; 0x0c
    e768:	15 86       	std	Z+13, r1	; 0x0d
    e76a:	c9 01       	movw	r24, r18
    e76c:	8f 71       	andi	r24, 0x1F	; 31
    e76e:	99 27       	eor	r25, r25
    e770:	93 87       	std	Z+11, r25	; 0x0b
    e772:	82 87       	std	Z+10, r24	; 0x0a
    e774:	c9 01       	movw	r24, r18
    e776:	55 e0       	ldi	r21, 0x05	; 5
    e778:	96 95       	lsr	r25
    e77a:	87 95       	ror	r24
    e77c:	5a 95       	dec	r21
    e77e:	e1 f7       	brne	.-8      	; 0xe778 <fatfs_filinfo_list+0xb4>
    e780:	8f 70       	andi	r24, 0x0F	; 15
    e782:	99 27       	eor	r25, r25
    e784:	91 87       	std	Z+9, r25	; 0x09
    e786:	80 87       	std	Z+8, r24	; 0x08
    e788:	23 2f       	mov	r18, r19
    e78a:	33 27       	eor	r19, r19
    e78c:	26 95       	lsr	r18
    e78e:	24 54       	subi	r18, 0x44	; 68
    e790:	38 4f       	sbci	r19, 0xF8	; 248
    e792:	37 83       	std	Z+7, r19	; 0x07
    e794:	26 83       	std	Z+6, r18	; 0x06
    e796:	ce 01       	movw	r24, r28
    e798:	46 96       	adiw	r24, 0x16	; 22
    e79a:	95 83       	std	Z+5, r25	; 0x05
    e79c:	84 83       	std	Z+4, r24	; 0x04
    e79e:	89 ed       	ldi	r24, 0xD9	; 217
    e7a0:	97 e0       	ldi	r25, 0x07	; 7
    e7a2:	a0 e0       	ldi	r26, 0x00	; 0
    e7a4:	81 83       	std	Z+1, r24	; 0x01
    e7a6:	92 83       	std	Z+2, r25	; 0x02
    e7a8:	a3 83       	std	Z+3, r26	; 0x03
    e7aa:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
        attrs,
        (info->fdate >> 9) + 1980, (info->fdate >> 5) & 15, info->fdate & 31,
        (info->ftime >> 11), (info->ftime >> 5) & 63,
        info->fsize, info->fname);
    printf("\n");
    e7ae:	87 ed       	ldi	r24, 0xD7	; 215
    e7b0:	97 e0       	ldi	r25, 0x07	; 7
    e7b2:	a0 e0       	ldi	r26, 0x00	; 0
    e7b4:	ed b7       	in	r30, 0x3d	; 61
    e7b6:	fe b7       	in	r31, 0x3e	; 62
    e7b8:	81 83       	std	Z+1, r24	; 0x01
    e7ba:	92 83       	std	Z+2, r25	; 0x02
    e7bc:	a3 83       	std	Z+3, r26	; 0x03
    e7be:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
}
    e7c2:	6b 96       	adiw	r28, 0x1b	; 27
    e7c4:	e2 e0       	ldi	r30, 0x02	; 2
    e7c6:	0c 94 f4 e3 	jmp	0x1c7e8	; 0x1c7e8 <__epilogue_restores__+0x20>

0000e7ca <fatfs_help>:

/// @brief Display FatFs test diagnostics help menu.
/// @return  void
MEMSPACE
void fatfs_help( int full)
{
    e7ca:	cf 93       	push	r28
    e7cc:	df 93       	push	r29
    e7ce:	00 d0       	rcall	.+0      	; 0xe7d0 <fatfs_help+0x6>
    e7d0:	1f 92       	push	r1
    e7d2:	ec 01       	movw	r28, r24
    printf("fatfs help\n");
    e7d4:	8c e1       	ldi	r24, 0x1C	; 28
    e7d6:	9b e0       	ldi	r25, 0x0B	; 11
    e7d8:	a0 e0       	ldi	r26, 0x00	; 0
    e7da:	ed b7       	in	r30, 0x3d	; 61
    e7dc:	fe b7       	in	r31, 0x3e	; 62
    e7de:	81 83       	std	Z+1, r24	; 0x01
    e7e0:	92 83       	std	Z+2, r25	; 0x02
    e7e2:	a3 83       	std	Z+3, r26	; 0x03
    e7e4:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    
    if(full)
    e7e8:	cd 2b       	or	r28, r29
    e7ea:	51 f0       	breq	.+20     	; 0xe800 <fatfs_help+0x36>
    {
        printf(
    e7ec:	80 ea       	ldi	r24, 0xA0	; 160
    e7ee:	9a e0       	ldi	r25, 0x0A	; 10
    e7f0:	a0 e0       	ldi	r26, 0x00	; 0
    e7f2:	ed b7       	in	r30, 0x3d	; 61
    e7f4:	fe b7       	in	r31, 0x3e	; 62
    e7f6:	81 83       	std	Z+1, r24	; 0x01
    e7f8:	92 83       	std	Z+2, r25	; 0x02
    e7fa:	a3 83       	std	Z+3, r26	; 0x03
    e7fc:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
#endif
        "\n"
        );
    }
        
}
    e800:	cd b7       	in	r28, 0x3d	; 61
    e802:	de b7       	in	r29, 0x3e	; 62
    e804:	23 96       	adiw	r28, 0x03	; 3
    e806:	e2 e0       	ldi	r30, 0x02	; 2
    e808:	0c 94 f4 e3 	jmp	0x1c7e8	; 0x1c7e8 <__epilogue_restores__+0x20>

0000e80c <fatfs_ls>:
///
/// @see fatfs_filinfo_list().
/// @return  void.
MEMSPACE
void fatfs_ls(char *name)
{
    e80c:	a5 e5       	ldi	r26, 0x55	; 85
    e80e:	b2 e0       	ldi	r27, 0x02	; 2
    e810:	ec e0       	ldi	r30, 0x0C	; 12
    e812:	f4 e7       	ldi	r31, 0x74	; 116
    e814:	0c 94 d2 e3 	jmp	0x1c7a4	; 0x1c7a4 <__prologue_saves__+0x14>
    e818:	8e 01       	movw	r16, r28
    e81a:	0e 5d       	subi	r16, 0xDE	; 222
    e81c:	1e 4f       	sbci	r17, 0xFE	; 254
    FILINFO fno;
    DIR dirs;                                     /* Directory object */
    FATFS *fs;
    char buff[256]; 

    if(!name || !*name)
    e81e:	00 97       	sbiw	r24, 0x00	; 0
    e820:	21 f0       	breq	.+8      	; 0xe82a <fatfs_ls+0x1e>
    e822:	fc 01       	movw	r30, r24
    e824:	20 81       	ld	r18, Z
    e826:	21 11       	cpse	r18, r1
    e828:	03 c0       	rjmp	.+6      	; 0xe830 <fatfs_ls+0x24>
    {
        strcpy(buff,".");
    e82a:	6b e0       	ldi	r22, 0x0B	; 11
    e82c:	72 e1       	ldi	r23, 0x12	; 18
    e82e:	01 c0       	rjmp	.+2      	; 0xe832 <fatfs_ls+0x26>
    }
    else
    {
        strcpy(buff,name);
    e830:	bc 01       	movw	r22, r24
    e832:	c8 01       	movw	r24, r16
    e834:	0e 94 35 32 	call	0x646a	; 0x646a <strcpy>
    }
    printf("Listing:[%s]\n",buff);
    e838:	ed b7       	in	r30, 0x3d	; 61
    e83a:	fe b7       	in	r31, 0x3e	; 62
    e83c:	15 83       	std	Z+5, r17	; 0x05
    e83e:	04 83       	std	Z+4, r16	; 0x04
    e840:	80 e1       	ldi	r24, 0x10	; 16
    e842:	9a e0       	ldi	r25, 0x0A	; 10
    e844:	a0 e0       	ldi	r26, 0x00	; 0
    e846:	81 83       	std	Z+1, r24	; 0x01
    e848:	92 83       	std	Z+2, r25	; 0x02
    e84a:	a3 83       	std	Z+3, r26	; 0x03
    e84c:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>

    res = f_opendir(&dirs, buff);
    e850:	b8 01       	movw	r22, r16
    e852:	ce 01       	movw	r24, r28
    e854:	8e 5d       	subi	r24, 0xDE	; 222
    e856:	9d 4f       	sbci	r25, 0xFD	; 253
    e858:	0e 94 70 64 	call	0xc8e0	; 0xc8e0 <f_opendir>
    if (res) { put_rc(res); return; }
    e85c:	00 97       	sbiw	r24, 0x00	; 0
    e85e:	11 f0       	breq	.+4      	; 0xe864 <fatfs_ls+0x58>
    e860:	23 dd       	rcall	.-1466   	; 0xe2a8 <put_rc>
    p1 = s1 = s2 = 0;
    e862:	8a c0       	rjmp	.+276    	; 0xe978 <fatfs_ls+0x16c>
    e864:	c0 5b       	subi	r28, 0xB0	; 176
    e866:	dd 4f       	sbci	r29, 0xFD	; 253
    e868:	18 82       	st	Y, r1
    e86a:	19 82       	std	Y+1, r1	; 0x01
    e86c:	1a 82       	std	Y+2, r1	; 0x02
    e86e:	1b 82       	std	Y+3, r1	; 0x03
    e870:	c0 55       	subi	r28, 0x50	; 80
    e872:	d2 40       	sbci	r29, 0x02	; 2
    e874:	c1 2c       	mov	r12, r1
    e876:	d1 2c       	mov	r13, r1
    e878:	e1 2c       	mov	r14, r1
    while(1)
    {
        res = f_readdir(&dirs, &fno);
    e87a:	f1 2c       	mov	r15, r1
    e87c:	be 01       	movw	r22, r28
    e87e:	64 5f       	subi	r22, 0xF4	; 244
    e880:	7f 4f       	sbci	r23, 0xFF	; 255
    e882:	ce 01       	movw	r24, r28
    e884:	8e 5d       	subi	r24, 0xDE	; 222
    e886:	9d 4f       	sbci	r25, 0xFD	; 253
    e888:	0e 94 f6 64 	call	0xc9ec	; 0xc9ec <f_readdir>
        if ((res != FR_OK) || !fno.fname[0]) break;
    e88c:	89 2b       	or	r24, r25
    e88e:	49 f5       	brne	.+82     	; 0xe8e2 <fatfs_ls+0xd6>
    e890:	8a a1       	ldd	r24, Y+34	; 0x22
    e892:	88 23       	and	r24, r24
        if (fno.fattrib & AM_DIR)
    e894:	31 f1       	breq	.+76     	; 0xe8e2 <fatfs_ls+0xd6>
    e896:	8c 89       	ldd	r24, Y+20	; 0x14
    e898:	84 ff       	sbrs	r24, 4
        {
            s2++;
    e89a:	04 c0       	rjmp	.+8      	; 0xe8a4 <fatfs_ls+0x98>
    e89c:	ff ef       	ldi	r31, 0xFF	; 255
    e89e:	cf 1a       	sub	r12, r31
    e8a0:	df 0a       	sbc	r13, r31
        }
        else
        {
            s1++; p1 += fno.fsize;
    e8a2:	1b c0       	rjmp	.+54     	; 0xe8da <fatfs_ls+0xce>
    e8a4:	8f ef       	ldi	r24, 0xFF	; 255
    e8a6:	e8 1a       	sub	r14, r24
    e8a8:	f8 0a       	sbc	r15, r24
    e8aa:	4c 85       	ldd	r20, Y+12	; 0x0c
    e8ac:	5d 85       	ldd	r21, Y+13	; 0x0d
    e8ae:	6e 85       	ldd	r22, Y+14	; 0x0e
    e8b0:	7f 85       	ldd	r23, Y+15	; 0x0f
    e8b2:	c0 5b       	subi	r28, 0xB0	; 176
    e8b4:	dd 4f       	sbci	r29, 0xFD	; 253
    e8b6:	88 81       	ld	r24, Y
    e8b8:	99 81       	ldd	r25, Y+1	; 0x01
    e8ba:	aa 81       	ldd	r26, Y+2	; 0x02
    e8bc:	bb 81       	ldd	r27, Y+3	; 0x03
    e8be:	c0 55       	subi	r28, 0x50	; 80
    e8c0:	d2 40       	sbci	r29, 0x02	; 2
    e8c2:	84 0f       	add	r24, r20
    e8c4:	95 1f       	adc	r25, r21
    e8c6:	a6 1f       	adc	r26, r22
    e8c8:	b7 1f       	adc	r27, r23
    e8ca:	c0 5b       	subi	r28, 0xB0	; 176
    e8cc:	dd 4f       	sbci	r29, 0xFD	; 253
    e8ce:	88 83       	st	Y, r24
    e8d0:	99 83       	std	Y+1, r25	; 0x01
    e8d2:	aa 83       	std	Y+2, r26	; 0x02
    e8d4:	bb 83       	std	Y+3, r27	; 0x03
    e8d6:	c0 55       	subi	r28, 0x50	; 80
        }
        fatfs_filinfo_list(&fno);
    e8d8:	d2 40       	sbci	r29, 0x02	; 2
    e8da:	ce 01       	movw	r24, r28
    e8dc:	0c 96       	adiw	r24, 0x0c	; 12
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    e8de:	f2 de       	rcall	.-540    	; 0xe6c4 <fatfs_filinfo_list>
    printf("%4u File(s),%10lu bytes total\n%4u Dir(s)", s1, p1, s2);
    e8e0:	cd cf       	rjmp	.-102    	; 0xe87c <fatfs_ls+0x70>
    e8e2:	ed b7       	in	r30, 0x3d	; 61
    e8e4:	fe b7       	in	r31, 0x3e	; 62
    e8e6:	d3 86       	std	Z+11, r13	; 0x0b
    e8e8:	c2 86       	std	Z+10, r12	; 0x0a
    e8ea:	c0 5b       	subi	r28, 0xB0	; 176
    e8ec:	dd 4f       	sbci	r29, 0xFD	; 253
    e8ee:	88 81       	ld	r24, Y
    e8f0:	99 81       	ldd	r25, Y+1	; 0x01
    e8f2:	aa 81       	ldd	r26, Y+2	; 0x02
    e8f4:	bb 81       	ldd	r27, Y+3	; 0x03
    e8f6:	c0 55       	subi	r28, 0x50	; 80
    e8f8:	d2 40       	sbci	r29, 0x02	; 2
    e8fa:	86 83       	std	Z+6, r24	; 0x06
    e8fc:	97 83       	std	Z+7, r25	; 0x07
    e8fe:	a0 87       	std	Z+8, r26	; 0x08
    e900:	b1 87       	std	Z+9, r27	; 0x09
    e902:	f5 82       	std	Z+5, r15	; 0x05
    e904:	e4 82       	std	Z+4, r14	; 0x04
    e906:	87 ee       	ldi	r24, 0xE7	; 231
    e908:	99 e0       	ldi	r25, 0x09	; 9
    e90a:	a0 e0       	ldi	r26, 0x00	; 0
    e90c:	81 83       	std	Z+1, r24	; 0x01
    e90e:	92 83       	std	Z+2, r25	; 0x02
    e910:	a3 83       	std	Z+3, r26	; 0x03
    e912:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    if (f_getfree(buff, (DWORD*)&p1, &fs) == FR_OK)
    e916:	ae 01       	movw	r20, r28
    e918:	4c 5a       	subi	r20, 0xAC	; 172
    e91a:	5d 4f       	sbci	r21, 0xFD	; 253
    e91c:	be 01       	movw	r22, r28
    e91e:	60 5b       	subi	r22, 0xB0	; 176
    e920:	7d 4f       	sbci	r23, 0xFD	; 253
    e922:	c8 01       	movw	r24, r16
    e924:	0e 94 78 65 	call	0xcaf0	; 0xcaf0 <f_getfree>
    e928:	89 2b       	or	r24, r25
        printf(", %10luK bytes free\n", p1 * fs->csize / 2);
    e92a:	31 f5       	brne	.+76     	; 0xe978 <fatfs_ls+0x16c>
    e92c:	cc 5a       	subi	r28, 0xAC	; 172
    e92e:	dd 4f       	sbci	r29, 0xFD	; 253
    e930:	e8 81       	ld	r30, Y
    e932:	f9 81       	ldd	r31, Y+1	; 0x01
    e934:	c4 55       	subi	r28, 0x54	; 84
    e936:	d2 40       	sbci	r29, 0x02	; 2
    e938:	a1 85       	ldd	r26, Z+9	; 0x09
    e93a:	b2 85       	ldd	r27, Z+10	; 0x0a
    e93c:	c0 5b       	subi	r28, 0xB0	; 176
    e93e:	dd 4f       	sbci	r29, 0xFD	; 253
    e940:	28 81       	ld	r18, Y
    e942:	39 81       	ldd	r19, Y+1	; 0x01
    e944:	4a 81       	ldd	r20, Y+2	; 0x02
    e946:	5b 81       	ldd	r21, Y+3	; 0x03
    e948:	c0 55       	subi	r28, 0x50	; 80
    e94a:	d2 40       	sbci	r29, 0x02	; 2
    e94c:	0e 94 a8 e3 	call	0x1c750	; 0x1c750 <__muluhisi3>
    e950:	22 e0       	ldi	r18, 0x02	; 2
    e952:	30 e0       	ldi	r19, 0x00	; 0
    e954:	40 e0       	ldi	r20, 0x00	; 0
    e956:	50 e0       	ldi	r21, 0x00	; 0
    e958:	0e 94 68 e3 	call	0x1c6d0	; 0x1c6d0 <__divmodsi4>
    e95c:	ed b7       	in	r30, 0x3d	; 61
    e95e:	fe b7       	in	r31, 0x3e	; 62
    e960:	24 83       	std	Z+4, r18	; 0x04
    e962:	35 83       	std	Z+5, r19	; 0x05
    e964:	46 83       	std	Z+6, r20	; 0x06
    e966:	57 83       	std	Z+7, r21	; 0x07
    e968:	82 ed       	ldi	r24, 0xD2	; 210
    e96a:	99 e0       	ldi	r25, 0x09	; 9
    e96c:	a0 e0       	ldi	r26, 0x00	; 0
    e96e:	81 83       	std	Z+1, r24	; 0x01
    e970:	92 83       	std	Z+2, r25	; 0x02
    e972:	a3 83       	std	Z+3, r26	; 0x03
    e974:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
}
    e978:	cb 5a       	subi	r28, 0xAB	; 171
    e97a:	dd 4f       	sbci	r29, 0xFD	; 253
    e97c:	e8 e0       	ldi	r30, 0x08	; 8
    e97e:	0c 94 ee e3 	jmp	0x1c7dc	; 0x1c7dc <__epilogue_restores__+0x14>

0000e982 <mmc_test>:
/// - Assumes the device is formatted
///
/// @return void
MEMSPACE
void mmc_test(void)
{
    e982:	00 d0       	rcall	.+0      	; 0xe984 <mmc_test+0x2>
    e984:	1f 92       	push	r1
    printf("==============================\n");
    e986:	80 e7       	ldi	r24, 0x70	; 112
    e988:	9a e0       	ldi	r25, 0x0A	; 10
    e98a:	a0 e0       	ldi	r26, 0x00	; 0
    e98c:	ed b7       	in	r30, 0x3d	; 61
    e98e:	fe b7       	in	r31, 0x3e	; 62
    e990:	81 83       	std	Z+1, r24	; 0x01
    e992:	92 83       	std	Z+2, r25	; 0x02
    e994:	a3 83       	std	Z+3, r26	; 0x03
    e996:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    printf("START MMC TEST\n");
    e99a:	80 e6       	ldi	r24, 0x60	; 96
    e99c:	9a e0       	ldi	r25, 0x0A	; 10
    e99e:	a0 e0       	ldi	r26, 0x00	; 0
    e9a0:	ed b7       	in	r30, 0x3d	; 61
    e9a2:	fe b7       	in	r31, 0x3e	; 62
    e9a4:	81 83       	std	Z+1, r24	; 0x01
    e9a6:	92 83       	std	Z+2, r25	; 0x02
    e9a8:	a3 83       	std	Z+3, r26	; 0x03
    e9aa:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    fatfs_status("/");
    e9ae:	86 ec       	ldi	r24, 0xC6	; 198
    e9b0:	97 e0       	ldi	r25, 0x07	; 7
    e9b2:	0e dd       	rcall	.-1508   	; 0xe3d0 <fatfs_status>
    printf("MMC Directory List\n");
    e9b4:	8c e4       	ldi	r24, 0x4C	; 76
    e9b6:	9a e0       	ldi	r25, 0x0A	; 10
    e9b8:	a0 e0       	ldi	r26, 0x00	; 0
    e9ba:	ed b7       	in	r30, 0x3d	; 61
    e9bc:	fe b7       	in	r31, 0x3e	; 62
    e9be:	81 83       	std	Z+1, r24	; 0x01
    e9c0:	92 83       	std	Z+2, r25	; 0x02
    e9c2:	a3 83       	std	Z+3, r26	; 0x03
    e9c4:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    fatfs_ls("/");
    e9c8:	86 ec       	ldi	r24, 0xC6	; 198
    e9ca:	97 e0       	ldi	r25, 0x07	; 7
    e9cc:	1f df       	rcall	.-450    	; 0xe80c <fatfs_ls>
    fatfs_cat("test3.txt");
    fatfs_ls("");
#endif
#endif

    printf("END MMC TEST\n");
    e9ce:	8e e3       	ldi	r24, 0x3E	; 62
    e9d0:	9a e0       	ldi	r25, 0x0A	; 10
    e9d2:	a0 e0       	ldi	r26, 0x00	; 0
    e9d4:	ed b7       	in	r30, 0x3d	; 61
    e9d6:	fe b7       	in	r31, 0x3e	; 62
    e9d8:	81 83       	std	Z+1, r24	; 0x01
    e9da:	92 83       	std	Z+2, r25	; 0x02
    e9dc:	a3 83       	std	Z+3, r26	; 0x03
    e9de:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    printf("==============================\n");
    e9e2:	8e e1       	ldi	r24, 0x1E	; 30
    e9e4:	9a e0       	ldi	r25, 0x0A	; 10
    e9e6:	a0 e0       	ldi	r26, 0x00	; 0
    e9e8:	ed b7       	in	r30, 0x3d	; 61
    e9ea:	fe b7       	in	r31, 0x3e	; 62
    e9ec:	81 83       	std	Z+1, r24	; 0x01
    e9ee:	92 83       	std	Z+2, r25	; 0x02
    e9f0:	a3 83       	std	Z+3, r26	; 0x03
    e9f2:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
}
    e9f6:	0f 90       	pop	r0
    e9f8:	0f 90       	pop	r0
    e9fa:	0f 90       	pop	r0
    e9fc:	08 95       	ret

0000e9fe <fatfs_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int fatfs_tests(int argc,char *argv[])
{
    e9fe:	ef 92       	push	r14
    ea00:	ff 92       	push	r15
    ea02:	0f 93       	push	r16
    ea04:	1f 93       	push	r17
    ea06:	cf 93       	push	r28
    ea08:	df 93       	push	r29
    ea0a:	ad b7       	in	r26, 0x3d	; 61
    ea0c:	be b7       	in	r27, 0x3e	; 62
    ea0e:	17 97       	sbiw	r26, 0x07	; 7
    ea10:	0f b6       	in	r0, 0x3f	; 63
    ea12:	f8 94       	cli
    ea14:	be bf       	out	0x3e, r27	; 62
    ea16:	0f be       	out	0x3f, r0	; 63
    ea18:	ad bf       	out	0x3d, r26	; 61
    char *ptr;
    int ind;


    ind = 0;
    ptr = argv[ind++];
    ea1a:	fb 01       	movw	r30, r22
    ea1c:	20 81       	ld	r18, Z
    ea1e:	31 81       	ldd	r19, Z+1	; 0x01

    if(!ptr)
    ea20:	21 15       	cp	r18, r1
    ea22:	31 05       	cpc	r19, r1
    ea24:	19 f4       	brne	.+6      	; 0xea2c <fatfs_tests+0x2e>
        return(0);
    ea26:	80 e0       	ldi	r24, 0x00	; 0
    ea28:	90 e0       	ldi	r25, 0x00	; 0
    ea2a:	73 c0       	rjmp	.+230    	; 0xeb12 <fatfs_tests+0x114>
    ea2c:	eb 01       	movw	r28, r22
    ea2e:	8c 01       	movw	r16, r24

// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCH(ptr,"fatfs") )
    ea30:	62 ef       	ldi	r22, 0xF2	; 242
    ea32:	77 e0       	ldi	r23, 0x07	; 7
    ea34:	c9 01       	movw	r24, r18
    ea36:	0e 94 2d 33 	call	0x665a	; 0x665a <MATCH>
    ea3a:	89 2b       	or	r24, r25
    ea3c:	a1 f3       	breq	.-24     	; 0xea26 <fatfs_tests+0x28>
    {
        ptr = argv[ind++];
    ea3e:	ea 80       	ldd	r14, Y+2	; 0x02
    ea40:	fb 80       	ldd	r15, Y+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
    ea42:	e1 14       	cp	r14, r1
    ea44:	f1 04       	cpc	r15, r1
    ea46:	21 f4       	brne	.+8      	; 0xea50 <fatfs_tests+0x52>
        {
            fatfs_help(1);
    ea48:	81 e0       	ldi	r24, 0x01	; 1
    ea4a:	90 e0       	ldi	r25, 0x00	; 0
    ea4c:	be de       	rcall	.-644    	; 0xe7ca <fatfs_help>
    ea4e:	5f c0       	rjmp	.+190    	; 0xeb0e <fatfs_tests+0x110>
// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCH(ptr,"fatfs") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
    ea50:	6c eb       	ldi	r22, 0xBC	; 188
    ea52:	75 e1       	ldi	r23, 0x15	; 21
    ea54:	c7 01       	movw	r24, r14
    ea56:	0e 94 2d 33 	call	0x665a	; 0x665a <MATCH>
    ea5a:	89 2b       	or	r24, r25
    ea5c:	a9 f7       	brne	.-22     	; 0xea48 <fatfs_tests+0x4a>
    {
        return(0);
    }
#endif

    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
    ea5e:	98 01       	movw	r18, r16
    ea60:	42 e0       	ldi	r20, 0x02	; 2
    ea62:	50 e0       	ldi	r21, 0x00	; 0
    ea64:	68 ef       	ldi	r22, 0xF8	; 248
    ea66:	77 e0       	ldi	r23, 0x07	; 7
    ea68:	c7 01       	movw	r24, r14
    ea6a:	0e 94 41 33 	call	0x6682	; 0x6682 <MATCHARGS>
    ea6e:	89 2b       	or	r24, r25
    ea70:	31 f1       	breq	.+76     	; 0xeabe <fatfs_tests+0xc0>
    {
        int i;
        int args = 0;
        printf("ind:%d,argc:%d\n", ind, argc);
    ea72:	ed b7       	in	r30, 0x3d	; 61
    ea74:	fe b7       	in	r31, 0x3e	; 62
    ea76:	17 83       	std	Z+7, r17	; 0x07
    ea78:	06 83       	std	Z+6, r16	; 0x06
    ea7a:	82 e0       	ldi	r24, 0x02	; 2
    ea7c:	90 e0       	ldi	r25, 0x00	; 0
    ea7e:	95 83       	std	Z+5, r25	; 0x05
    ea80:	84 83       	std	Z+4, r24	; 0x04
    ea82:	80 e9       	ldi	r24, 0x90	; 144
    ea84:	9a e0       	ldi	r25, 0x0A	; 10
    ea86:	a0 e0       	ldi	r26, 0x00	; 0
    ea88:	81 83       	std	Z+1, r24	; 0x01
    ea8a:	92 83       	std	Z+2, r25	; 0x02
    ea8c:	a3 83       	std	Z+3, r26	; 0x03
    ea8e:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    ea92:	7e 01       	movw	r14, r28
    ea94:	f4 e0       	ldi	r31, 0x04	; 4
    ea96:	ef 0e       	add	r14, r31
    ea98:	f1 1c       	adc	r15, r1
        for(i=ind;i<argc;++i)
    ea9a:	c2 e0       	ldi	r28, 0x02	; 2
    ea9c:	d0 e0       	ldi	r29, 0x00	; 0
    ea9e:	c0 17       	cp	r28, r16
    eaa0:	d1 07       	cpc	r29, r17
    eaa2:	3c f4       	brge	.+14     	; 0xeab2 <fatfs_tests+0xb4>
        {
            //printf("%d:%s\n", i, argv[i]);
            fatfs_ls(argv[i]);
    eaa4:	f7 01       	movw	r30, r14
    eaa6:	81 91       	ld	r24, Z+
    eaa8:	91 91       	ld	r25, Z+
    eaaa:	7f 01       	movw	r14, r30
    eaac:	af de       	rcall	.-674    	; 0xe80c <fatfs_ls>
    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
    {
        int i;
        int args = 0;
        printf("ind:%d,argc:%d\n", ind, argc);
        for(i=ind;i<argc;++i)
    eaae:	21 96       	adiw	r28, 0x01	; 1
    eab0:	f6 cf       	rjmp	.-20     	; 0xea9e <fatfs_tests+0xa0>
        {
            //printf("%d:%s\n", i, argv[i]);
            fatfs_ls(argv[i]);
            ++args;
        }
        if(!args)
    eab2:	22 97       	sbiw	r28, 0x02	; 2
        {
            fatfs_ls("");
    eab4:	61 f5       	brne	.+88     	; 0xeb0e <fatfs_tests+0x110>
    eab6:	8c ed       	ldi	r24, 0xDC	; 220
    eab8:	96 e1       	ldi	r25, 0x16	; 22
    eaba:	a8 de       	rcall	.-688    	; 0xe80c <fatfs_ls>
        }
        return(1);
    }

    if (MATCHARGS(ptr,"mmc_test",(ind+0),argc ))
    eabc:	28 c0       	rjmp	.+80     	; 0xeb0e <fatfs_tests+0x110>
    eabe:	98 01       	movw	r18, r16
    eac0:	42 e0       	ldi	r20, 0x02	; 2
    eac2:	50 e0       	ldi	r21, 0x00	; 0
    eac4:	6b ef       	ldi	r22, 0xFB	; 251
    eac6:	77 e0       	ldi	r23, 0x07	; 7
    eac8:	c7 01       	movw	r24, r14
    eaca:	0e 94 41 33 	call	0x6682	; 0x6682 <MATCHARGS>
    {
        mmc_test();
    eace:	89 2b       	or	r24, r25
    ead0:	11 f0       	breq	.+4      	; 0xead6 <fatfs_tests+0xd8>
    ead2:	57 df       	rcall	.-338    	; 0xe982 <mmc_test>
        return(1);
    }

    if (MATCHARGS(ptr,"mmc_init",(ind+0),argc))
    ead4:	1c c0       	rjmp	.+56     	; 0xeb0e <fatfs_tests+0x110>
    ead6:	98 01       	movw	r18, r16
    ead8:	42 e0       	ldi	r20, 0x02	; 2
    eada:	50 e0       	ldi	r21, 0x00	; 0
    eadc:	64 e0       	ldi	r22, 0x04	; 4
    eade:	78 e0       	ldi	r23, 0x08	; 8
    eae0:	c7 01       	movw	r24, r14
    eae2:	0e 94 41 33 	call	0x6682	; 0x6682 <MATCHARGS>
    {
        mmc_init(1);
    eae6:	89 2b       	or	r24, r25
    eae8:	21 f0       	breq	.+8      	; 0xeaf2 <fatfs_tests+0xf4>
    eaea:	81 e0       	ldi	r24, 0x01	; 1
    eaec:	90 e0       	ldi	r25, 0x00	; 0
    eaee:	ba da       	rcall	.-2700   	; 0xe064 <mmc_init>
        return(1);
    }

    if (MATCHARGS(ptr,"status", (ind + 1), argc))
    eaf0:	0e c0       	rjmp	.+28     	; 0xeb0e <fatfs_tests+0x110>
    eaf2:	98 01       	movw	r18, r16
    eaf4:	43 e0       	ldi	r20, 0x03	; 3
    eaf6:	50 e0       	ldi	r21, 0x00	; 0
    eaf8:	6d e0       	ldi	r22, 0x0D	; 13
    eafa:	78 e0       	ldi	r23, 0x08	; 8
    eafc:	c7 01       	movw	r24, r14
    eafe:	0e 94 41 33 	call	0x6682	; 0x6682 <MATCHARGS>
    eb02:	89 2b       	or	r24, r25
    {
        fatfs_status(argv[ind]);
    eb04:	09 f4       	brne	.+2      	; 0xeb08 <fatfs_tests+0x10a>
    eb06:	8f cf       	rjmp	.-226    	; 0xea26 <fatfs_tests+0x28>
    eb08:	8c 81       	ldd	r24, Y+4	; 0x04
    eb0a:	9d 81       	ldd	r25, Y+5	; 0x05
        }
        if(!args)
        {
            fatfs_ls("");
        }
        return(1);
    eb0c:	61 dc       	rcall	.-1854   	; 0xe3d0 <fatfs_status>
    eb0e:	81 e0       	ldi	r24, 0x01	; 1
        return(1);
    }
#endif

    return(0);
}
    eb10:	90 e0       	ldi	r25, 0x00	; 0
    eb12:	cd b7       	in	r28, 0x3d	; 61
    eb14:	de b7       	in	r29, 0x3e	; 62
    eb16:	27 96       	adiw	r28, 0x07	; 7
    eb18:	e6 e0       	ldi	r30, 0x06	; 6
    eb1a:	0c 94 f0 e3 	jmp	0x1c7e0	; 0x1c7e0 <__epilogue_restores__+0x18>

0000eb1e <fatfs_getc>:
    {
        errno = fatfs_to_errno(rc);
        return(-1);
    }
    return(0);
}
    eb1e:	8f 92       	push	r8
    eb20:	9f 92       	push	r9
    eb22:	af 92       	push	r10
    eb24:	bf 92       	push	r11
    eb26:	ef 92       	push	r14
    eb28:	ff 92       	push	r15
    eb2a:	0f 93       	push	r16
    eb2c:	1f 93       	push	r17
    eb2e:	cf 93       	push	r28
    eb30:	df 93       	push	r29
    eb32:	00 d0       	rcall	.+0      	; 0xeb34 <fatfs_getc+0x16>
    eb34:	1f 92       	push	r1
    eb36:	cd b7       	in	r28, 0x3d	; 61
    eb38:	de b7       	in	r29, 0x3e	; 62
    eb3a:	10 92 54 1c 	sts	0x1C54, r1	; 0x801c54 <errno+0x1>
    eb3e:	10 92 53 1c 	sts	0x1C53, r1	; 0x801c53 <errno>
    eb42:	00 97       	sbiw	r24, 0x00	; 0
    eb44:	39 f4       	brne	.+14     	; 0xeb54 <fatfs_getc+0x36>
    eb46:	89 e0       	ldi	r24, 0x09	; 9
    eb48:	90 e0       	ldi	r25, 0x00	; 0
    eb4a:	90 93 54 1c 	sts	0x1C54, r25	; 0x801c54 <errno+0x1>
    eb4e:	80 93 53 1c 	sts	0x1C53, r24	; 0x801c53 <errno>
    eb52:	2f c0       	rjmp	.+94     	; 0xebb2 <fatfs_getc+0x94>
    eb54:	fc 01       	movw	r30, r24
    eb56:	e4 84       	ldd	r14, Z+12	; 0x0c
    eb58:	f5 84       	ldd	r15, Z+13	; 0x0d
    eb5a:	e1 14       	cp	r14, r1
    eb5c:	f1 04       	cpc	r15, r1
    eb5e:	99 f3       	breq	.-26     	; 0xeb46 <fatfs_getc+0x28>
    eb60:	8c 01       	movw	r16, r24
    eb62:	9e 01       	movw	r18, r28
    eb64:	2f 5f       	subi	r18, 0xFF	; 255
    eb66:	3f 4f       	sbci	r19, 0xFF	; 255
    eb68:	41 e0       	ldi	r20, 0x01	; 1
    eb6a:	50 e0       	ldi	r21, 0x00	; 0
    eb6c:	be 01       	movw	r22, r28
    eb6e:	6d 5f       	subi	r22, 0xFD	; 253
    eb70:	7f 4f       	sbci	r23, 0xFF	; 255
    eb72:	c7 01       	movw	r24, r14
    eb74:	0e 94 a8 5c 	call	0xb950	; 0xb950 <f_read>
    eb78:	00 97       	sbiw	r24, 0x00	; 0
    eb7a:	31 f4       	brne	.+12     	; 0xeb88 <fatfs_getc+0x6a>
    eb7c:	29 81       	ldd	r18, Y+1	; 0x01
    eb7e:	3a 81       	ldd	r19, Y+2	; 0x02
    eb80:	21 30       	cpi	r18, 0x01	; 1
    eb82:	31 05       	cpc	r19, r1
    eb84:	c9 f0       	breq	.+50     	; 0xebb8 <fatfs_getc+0x9a>
    eb86:	03 c0       	rjmp	.+6      	; 0xeb8e <fatfs_getc+0x70>
    eb88:	84 31       	cpi	r24, 0x14	; 20
    eb8a:	91 05       	cpc	r25, r1
    eb8c:	40 f4       	brcc	.+16     	; 0xeb9e <fatfs_getc+0x80>
    eb8e:	fc 01       	movw	r30, r24
    eb90:	ec 53       	subi	r30, 0x3C	; 60
    eb92:	f5 4f       	sbci	r31, 0xF5	; 245
    eb94:	80 81       	ld	r24, Z
    eb96:	08 2e       	mov	r0, r24
    eb98:	00 0c       	add	r0, r0
    eb9a:	99 0b       	sbc	r25, r25
    eb9c:	02 c0       	rjmp	.+4      	; 0xeba2 <fatfs_getc+0x84>
    eb9e:	83 e2       	ldi	r24, 0x23	; 35
    eba0:	90 e0       	ldi	r25, 0x00	; 0
    eba2:	90 93 54 1c 	sts	0x1C54, r25	; 0x801c54 <errno+0x1>
    eba6:	80 93 53 1c 	sts	0x1C53, r24	; 0x801c53 <errno>
    ebaa:	f8 01       	movw	r30, r16
    ebac:	83 81       	ldd	r24, Z+3	; 0x03
    ebae:	80 62       	ori	r24, 0x20	; 32
    ebb0:	83 83       	std	Z+3, r24	; 0x03
    ebb2:	8f ef       	ldi	r24, 0xFF	; 255
    ebb4:	9f ef       	ldi	r25, 0xFF	; 255
    ebb6:	28 c0       	rjmp	.+80     	; 0xec08 <fatfs_getc+0xea>
    ebb8:	8b 81       	ldd	r24, Y+3	; 0x03
    ebba:	8d 30       	cpi	r24, 0x0D	; 13
    ebbc:	01 f5       	brne	.+64     	; 0xebfe <fatfs_getc+0xe0>
    ebbe:	f7 01       	movw	r30, r14
    ebc0:	80 88       	ldd	r8, Z+16	; 0x10
    ebc2:	91 88       	ldd	r9, Z+17	; 0x11
    ebc4:	a2 88       	ldd	r10, Z+18	; 0x12
    ebc6:	b3 88       	ldd	r11, Z+19	; 0x13
    ebc8:	9e 01       	movw	r18, r28
    ebca:	2f 5f       	subi	r18, 0xFF	; 255
    ebcc:	3f 4f       	sbci	r19, 0xFF	; 255
    ebce:	41 e0       	ldi	r20, 0x01	; 1
    ebd0:	50 e0       	ldi	r21, 0x00	; 0
    ebd2:	be 01       	movw	r22, r28
    ebd4:	6d 5f       	subi	r22, 0xFD	; 253
    ebd6:	7f 4f       	sbci	r23, 0xFF	; 255
    ebd8:	c7 01       	movw	r24, r14
    ebda:	0e 94 a8 5c 	call	0xb950	; 0xb950 <f_read>
    ebde:	89 2b       	or	r24, r25
    ebe0:	89 f4       	brne	.+34     	; 0xec04 <fatfs_getc+0xe6>
    ebe2:	89 81       	ldd	r24, Y+1	; 0x01
    ebe4:	9a 81       	ldd	r25, Y+2	; 0x02
    ebe6:	01 97       	sbiw	r24, 0x01	; 1
    ebe8:	69 f4       	brne	.+26     	; 0xec04 <fatfs_getc+0xe6>
    ebea:	8b 81       	ldd	r24, Y+3	; 0x03
    ebec:	8a 30       	cpi	r24, 0x0A	; 10
    ebee:	31 f0       	breq	.+12     	; 0xebfc <fatfs_getc+0xde>
    ebf0:	b5 01       	movw	r22, r10
    ebf2:	a4 01       	movw	r20, r8
    ebf4:	c7 01       	movw	r24, r14
    ebf6:	0e 94 b4 61 	call	0xc368	; 0xc368 <f_lseek>
    ebfa:	04 c0       	rjmp	.+8      	; 0xec04 <fatfs_getc+0xe6>
    ebfc:	8b 83       	std	Y+3, r24	; 0x03
    ebfe:	8b 81       	ldd	r24, Y+3	; 0x03
    ec00:	90 e0       	ldi	r25, 0x00	; 0
    ec02:	02 c0       	rjmp	.+4      	; 0xec08 <fatfs_getc+0xea>
    ec04:	8a e0       	ldi	r24, 0x0A	; 10
    ec06:	90 e0       	ldi	r25, 0x00	; 0
    ec08:	0f 90       	pop	r0
    ec0a:	0f 90       	pop	r0
    ec0c:	0f 90       	pop	r0
    ec0e:	df 91       	pop	r29
    ec10:	cf 91       	pop	r28
    ec12:	1f 91       	pop	r17
    ec14:	0f 91       	pop	r16
    ec16:	ff 90       	pop	r15
    ec18:	ef 90       	pop	r14
    ec1a:	bf 90       	pop	r11
    ec1c:	af 90       	pop	r10
    ec1e:	9f 90       	pop	r9
    ec20:	8f 90       	pop	r8
    ec22:	08 95       	ret

0000ec24 <fatfs_putc>:
    ec24:	a3 e0       	ldi	r26, 0x03	; 3
    ec26:	b0 e0       	ldi	r27, 0x00	; 0
    ec28:	e8 e1       	ldi	r30, 0x18	; 24
    ec2a:	f6 e7       	ldi	r31, 0x76	; 118
    ec2c:	0c 94 d6 e3 	jmp	0x1c7ac	; 0x1c7ac <__prologue_saves__+0x1c>
    ec30:	8b 83       	std	Y+3, r24	; 0x03
    ec32:	10 92 54 1c 	sts	0x1C54, r1	; 0x801c54 <errno+0x1>
    ec36:	10 92 53 1c 	sts	0x1C53, r1	; 0x801c53 <errno>
    ec3a:	61 15       	cp	r22, r1
    ec3c:	71 05       	cpc	r23, r1
    ec3e:	39 f4       	brne	.+14     	; 0xec4e <fatfs_putc+0x2a>
    ec40:	89 e0       	ldi	r24, 0x09	; 9
    ec42:	90 e0       	ldi	r25, 0x00	; 0
    ec44:	90 93 54 1c 	sts	0x1C54, r25	; 0x801c54 <errno+0x1>
    ec48:	80 93 53 1c 	sts	0x1C53, r24	; 0x801c53 <errno>
    ec4c:	2d c0       	rjmp	.+90     	; 0xeca8 <fatfs_putc+0x84>
    ec4e:	fb 01       	movw	r30, r22
    ec50:	84 85       	ldd	r24, Z+12	; 0x0c
    ec52:	95 85       	ldd	r25, Z+13	; 0x0d
    ec54:	00 97       	sbiw	r24, 0x00	; 0
    ec56:	a1 f3       	breq	.-24     	; 0xec40 <fatfs_putc+0x1c>
    ec58:	8b 01       	movw	r16, r22
    ec5a:	9e 01       	movw	r18, r28
    ec5c:	2f 5f       	subi	r18, 0xFF	; 255
    ec5e:	3f 4f       	sbci	r19, 0xFF	; 255
    ec60:	41 e0       	ldi	r20, 0x01	; 1
    ec62:	50 e0       	ldi	r21, 0x00	; 0
    ec64:	be 01       	movw	r22, r28
    ec66:	6d 5f       	subi	r22, 0xFD	; 253
    ec68:	7f 4f       	sbci	r23, 0xFF	; 255
    ec6a:	0e 94 f3 5d 	call	0xbbe6	; 0xbbe6 <f_write>
    ec6e:	00 97       	sbiw	r24, 0x00	; 0
    ec70:	31 f4       	brne	.+12     	; 0xec7e <fatfs_putc+0x5a>
    ec72:	29 81       	ldd	r18, Y+1	; 0x01
    ec74:	3a 81       	ldd	r19, Y+2	; 0x02
    ec76:	21 30       	cpi	r18, 0x01	; 1
    ec78:	31 05       	cpc	r19, r1
    ec7a:	c9 f0       	breq	.+50     	; 0xecae <fatfs_putc+0x8a>
    ec7c:	03 c0       	rjmp	.+6      	; 0xec84 <fatfs_putc+0x60>
    ec7e:	84 31       	cpi	r24, 0x14	; 20
    ec80:	91 05       	cpc	r25, r1
    ec82:	40 f4       	brcc	.+16     	; 0xec94 <fatfs_putc+0x70>
    ec84:	fc 01       	movw	r30, r24
    ec86:	ec 53       	subi	r30, 0x3C	; 60
    ec88:	f5 4f       	sbci	r31, 0xF5	; 245
    ec8a:	80 81       	ld	r24, Z
    ec8c:	08 2e       	mov	r0, r24
    ec8e:	00 0c       	add	r0, r0
    ec90:	99 0b       	sbc	r25, r25
    ec92:	02 c0       	rjmp	.+4      	; 0xec98 <fatfs_putc+0x74>
    ec94:	83 e2       	ldi	r24, 0x23	; 35
    ec96:	90 e0       	ldi	r25, 0x00	; 0
    ec98:	90 93 54 1c 	sts	0x1C54, r25	; 0x801c54 <errno+0x1>
    ec9c:	80 93 53 1c 	sts	0x1C53, r24	; 0x801c53 <errno>
    eca0:	f8 01       	movw	r30, r16
    eca2:	83 81       	ldd	r24, Z+3	; 0x03
    eca4:	80 62       	ori	r24, 0x20	; 32
    eca6:	83 83       	std	Z+3, r24	; 0x03
    eca8:	8f ef       	ldi	r24, 0xFF	; 255
    ecaa:	9f ef       	ldi	r25, 0xFF	; 255
    ecac:	02 c0       	rjmp	.+4      	; 0xecb2 <fatfs_putc+0x8e>
    ecae:	8b 81       	ldd	r24, Y+3	; 0x03
    ecb0:	90 e0       	ldi	r25, 0x00	; 0
    ecb2:	23 96       	adiw	r28, 0x03	; 3
    ecb4:	e4 e0       	ldi	r30, 0x04	; 4
    ecb6:	0c 94 f2 e3 	jmp	0x1c7e4	; 0x1c7e4 <__epilogue_restores__+0x1c>

0000ecba <fgetc>:
    ecba:	cf 93       	push	r28
    ecbc:	df 93       	push	r29
    ecbe:	00 d0       	rcall	.+0      	; 0xecc0 <fgetc+0x6>
    ecc0:	1f 92       	push	r1
    ecc2:	ec 01       	movw	r28, r24
    ecc4:	00 97       	sbiw	r24, 0x00	; 0
    ecc6:	39 f4       	brne	.+14     	; 0xecd6 <fgetc+0x1c>
    ecc8:	89 e0       	ldi	r24, 0x09	; 9
    ecca:	90 e0       	ldi	r25, 0x00	; 0
    eccc:	90 93 54 1c 	sts	0x1C54, r25	; 0x801c54 <errno+0x1>
    ecd0:	80 93 53 1c 	sts	0x1C53, r24	; 0x801c53 <errno>
    ecd4:	40 c0       	rjmp	.+128    	; 0xed56 <fgetc+0x9c>
    ecd6:	2b 81       	ldd	r18, Y+3	; 0x03
    ecd8:	20 ff       	sbrs	r18, 0
    ecda:	3d c0       	rjmp	.+122    	; 0xed56 <fgetc+0x9c>
    ecdc:	26 ff       	sbrs	r18, 6
    ecde:	0a c0       	rjmp	.+20     	; 0xecf4 <fgetc+0x3a>
    ece0:	2f 7b       	andi	r18, 0xBF	; 191
    ece2:	2b 83       	std	Y+3, r18	; 0x03
    ece4:	8e 81       	ldd	r24, Y+6	; 0x06
    ece6:	9f 81       	ldd	r25, Y+7	; 0x07
    ece8:	01 96       	adiw	r24, 0x01	; 1
    ecea:	9f 83       	std	Y+7, r25	; 0x07
    ecec:	8e 83       	std	Y+6, r24	; 0x06
    ecee:	8a 81       	ldd	r24, Y+2	; 0x02
    ecf0:	90 e0       	ldi	r25, 0x00	; 0
    ecf2:	33 c0       	rjmp	.+102    	; 0xed5a <fgetc+0xa0>
    ecf4:	22 ff       	sbrs	r18, 2
    ecf6:	0d c0       	rjmp	.+26     	; 0xed12 <fgetc+0x58>
    ecf8:	e8 81       	ld	r30, Y
    ecfa:	f9 81       	ldd	r31, Y+1	; 0x01
    ecfc:	80 81       	ld	r24, Z
    ecfe:	90 e0       	ldi	r25, 0x00	; 0
    ed00:	00 97       	sbiw	r24, 0x00	; 0
    ed02:	19 f4       	brne	.+6      	; 0xed0a <fgetc+0x50>
    ed04:	20 62       	ori	r18, 0x20	; 32
    ed06:	2b 83       	std	Y+3, r18	; 0x03
    ed08:	26 c0       	rjmp	.+76     	; 0xed56 <fgetc+0x9c>
    ed0a:	31 96       	adiw	r30, 0x01	; 1
    ed0c:	f9 83       	std	Y+1, r31	; 0x01
    ed0e:	e8 83       	st	Y, r30
    ed10:	1b c0       	rjmp	.+54     	; 0xed48 <fgetc+0x8e>
    ed12:	ea 85       	ldd	r30, Y+10	; 0x0a
    ed14:	fb 85       	ldd	r31, Y+11	; 0x0b
    ed16:	30 97       	sbiw	r30, 0x00	; 0
    ed18:	59 f4       	brne	.+22     	; 0xed30 <fgetc+0x76>
    ed1a:	88 e5       	ldi	r24, 0x58	; 88
    ed1c:	9b e0       	ldi	r25, 0x0B	; 11
    ed1e:	a0 e0       	ldi	r26, 0x00	; 0
    ed20:	ed b7       	in	r30, 0x3d	; 61
    ed22:	fe b7       	in	r31, 0x3e	; 62
    ed24:	81 83       	std	Z+1, r24	; 0x01
    ed26:	92 83       	std	Z+2, r25	; 0x02
    ed28:	a3 83       	std	Z+3, r26	; 0x03
    ed2a:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    ed2e:	13 c0       	rjmp	.+38     	; 0xed56 <fgetc+0x9c>
    ed30:	09 95       	icall
    ed32:	97 ff       	sbrs	r25, 7
    ed34:	09 c0       	rjmp	.+18     	; 0xed48 <fgetc+0x8e>
    ed36:	2b 81       	ldd	r18, Y+3	; 0x03
    ed38:	02 96       	adiw	r24, 0x02	; 2
    ed3a:	11 f0       	breq	.+4      	; 0xed40 <fgetc+0x86>
    ed3c:	80 e2       	ldi	r24, 0x20	; 32
    ed3e:	01 c0       	rjmp	.+2      	; 0xed42 <fgetc+0x88>
    ed40:	80 e1       	ldi	r24, 0x10	; 16
    ed42:	82 2b       	or	r24, r18
    ed44:	8b 83       	std	Y+3, r24	; 0x03
    ed46:	07 c0       	rjmp	.+14     	; 0xed56 <fgetc+0x9c>
    ed48:	2e 81       	ldd	r18, Y+6	; 0x06
    ed4a:	3f 81       	ldd	r19, Y+7	; 0x07
    ed4c:	2f 5f       	subi	r18, 0xFF	; 255
    ed4e:	3f 4f       	sbci	r19, 0xFF	; 255
    ed50:	3f 83       	std	Y+7, r19	; 0x07
    ed52:	2e 83       	std	Y+6, r18	; 0x06
    ed54:	02 c0       	rjmp	.+4      	; 0xed5a <fgetc+0xa0>
    ed56:	8f ef       	ldi	r24, 0xFF	; 255
    ed58:	9f ef       	ldi	r25, 0xFF	; 255
    ed5a:	cd b7       	in	r28, 0x3d	; 61
    ed5c:	de b7       	in	r29, 0x3e	; 62
    ed5e:	23 96       	adiw	r28, 0x03	; 3
    ed60:	e2 e0       	ldi	r30, 0x02	; 2
    ed62:	0c 94 f4 e3 	jmp	0x1c7e8	; 0x1c7e8 <__epilogue_restores__+0x20>

0000ed66 <fputc>:
    ed66:	cf 93       	push	r28
    ed68:	df 93       	push	r29
    ed6a:	00 d0       	rcall	.+0      	; 0xed6c <fputc+0x6>
    ed6c:	1f 92       	push	r1
    ed6e:	eb 01       	movw	r28, r22
    ed70:	10 92 54 1c 	sts	0x1C54, r1	; 0x801c54 <errno+0x1>
    ed74:	10 92 53 1c 	sts	0x1C53, r1	; 0x801c53 <errno>
    ed78:	20 91 57 1c 	lds	r18, 0x1C57	; 0x801c57 <__iob+0x2>
    ed7c:	30 91 58 1c 	lds	r19, 0x1C58	; 0x801c58 <__iob+0x3>
    ed80:	62 17       	cp	r22, r18
    ed82:	73 07       	cpc	r23, r19
    ed84:	49 f0       	breq	.+18     	; 0xed98 <fputc+0x32>
    ed86:	20 91 59 1c 	lds	r18, 0x1C59	; 0x801c59 <__iob+0x4>
    ed8a:	30 91 5a 1c 	lds	r19, 0x1C5A	; 0x801c5a <__iob+0x5>
    ed8e:	62 17       	cp	r22, r18
    ed90:	73 07       	cpc	r23, r19
    ed92:	11 f0       	breq	.+4      	; 0xed98 <fputc+0x32>
    ed94:	47 df       	rcall	.-370    	; 0xec24 <fatfs_putc>
    ed96:	33 c0       	rjmp	.+102    	; 0xedfe <fputc+0x98>
    ed98:	2b 81       	ldd	r18, Y+3	; 0x03
    ed9a:	21 ff       	sbrs	r18, 1
    ed9c:	2e c0       	rjmp	.+92     	; 0xedfa <fputc+0x94>
    ed9e:	22 ff       	sbrs	r18, 2
    eda0:	10 c0       	rjmp	.+32     	; 0xedc2 <fputc+0x5c>
    eda2:	4e 81       	ldd	r20, Y+6	; 0x06
    eda4:	5f 81       	ldd	r21, Y+7	; 0x07
    eda6:	2c 81       	ldd	r18, Y+4	; 0x04
    eda8:	3d 81       	ldd	r19, Y+5	; 0x05
    edaa:	42 17       	cp	r20, r18
    edac:	53 07       	cpc	r21, r19
    edae:	f4 f4       	brge	.+60     	; 0xedec <fputc+0x86>
    edb0:	e8 81       	ld	r30, Y
    edb2:	f9 81       	ldd	r31, Y+1	; 0x01
    edb4:	9f 01       	movw	r18, r30
    edb6:	2f 5f       	subi	r18, 0xFF	; 255
    edb8:	3f 4f       	sbci	r19, 0xFF	; 255
    edba:	39 83       	std	Y+1, r19	; 0x01
    edbc:	28 83       	st	Y, r18
    edbe:	80 83       	st	Z, r24
    edc0:	15 c0       	rjmp	.+42     	; 0xedec <fputc+0x86>
    edc2:	e8 85       	ldd	r30, Y+8	; 0x08
    edc4:	f9 85       	ldd	r31, Y+9	; 0x09
    edc6:	30 97       	sbiw	r30, 0x00	; 0
    edc8:	59 f4       	brne	.+22     	; 0xede0 <fputc+0x7a>
    edca:	80 e4       	ldi	r24, 0x40	; 64
    edcc:	9b e0       	ldi	r25, 0x0B	; 11
    edce:	a0 e0       	ldi	r26, 0x00	; 0
    edd0:	ed b7       	in	r30, 0x3d	; 61
    edd2:	fe b7       	in	r31, 0x3e	; 62
    edd4:	81 83       	std	Z+1, r24	; 0x01
    edd6:	92 83       	std	Z+2, r25	; 0x02
    edd8:	a3 83       	std	Z+3, r26	; 0x03
    edda:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    edde:	0d c0       	rjmp	.+26     	; 0xedfa <fputc+0x94>
    ede0:	be 01       	movw	r22, r28
    ede2:	09 95       	icall
    ede4:	8f 3f       	cpi	r24, 0xFF	; 255
    ede6:	ff ef       	ldi	r31, 0xFF	; 255
    ede8:	9f 07       	cpc	r25, r31
    edea:	39 f0       	breq	.+14     	; 0xedfa <fputc+0x94>
    edec:	2e 81       	ldd	r18, Y+6	; 0x06
    edee:	3f 81       	ldd	r19, Y+7	; 0x07
    edf0:	2f 5f       	subi	r18, 0xFF	; 255
    edf2:	3f 4f       	sbci	r19, 0xFF	; 255
    edf4:	3f 83       	std	Y+7, r19	; 0x07
    edf6:	2e 83       	std	Y+6, r18	; 0x06
    edf8:	02 c0       	rjmp	.+4      	; 0xedfe <fputc+0x98>
    edfa:	8f ef       	ldi	r24, 0xFF	; 255
    edfc:	9f ef       	ldi	r25, 0xFF	; 255
    edfe:	cd b7       	in	r28, 0x3d	; 61
    ee00:	de b7       	in	r29, 0x3e	; 62
    ee02:	23 96       	adiw	r28, 0x03	; 3
    ee04:	e2 e0       	ldi	r30, 0x02	; 2
    ee06:	0c 94 f4 e3 	jmp	0x1c7e8	; 0x1c7e8 <__epilogue_restores__+0x20>

0000ee0a <_fprintf_putc>:
    ee0a:	fc 01       	movw	r30, r24
    ee0c:	86 2f       	mov	r24, r22
    ee0e:	26 81       	ldd	r18, Z+6	; 0x06
    ee10:	37 81       	ldd	r19, Z+7	; 0x07
    ee12:	2f 5f       	subi	r18, 0xFF	; 255
    ee14:	3f 4f       	sbci	r19, 0xFF	; 255
    ee16:	37 83       	std	Z+7, r19	; 0x07
    ee18:	26 83       	std	Z+6, r18	; 0x06
    ee1a:	62 81       	ldd	r22, Z+2	; 0x02
    ee1c:	73 81       	ldd	r23, Z+3	; 0x03
    ee1e:	90 e0       	ldi	r25, 0x00	; 0
    ee20:	a2 cf       	rjmp	.-188    	; 0xed66 <fputc>
    ee22:	08 95       	ret

0000ee24 <getchar>:
    ee24:	80 91 55 1c 	lds	r24, 0x1C55	; 0x801c55 <__iob>
    ee28:	90 91 56 1c 	lds	r25, 0x1C56	; 0x801c56 <__iob+0x1>
    ee2c:	46 cf       	rjmp	.-372    	; 0xecba <fgetc>
    ee2e:	08 95       	ret

0000ee30 <putchar>:
    ee30:	60 91 57 1c 	lds	r22, 0x1C57	; 0x801c57 <__iob+0x2>
    ee34:	70 91 58 1c 	lds	r23, 0x1C58	; 0x801c58 <__iob+0x3>
    ee38:	96 cf       	rjmp	.-212    	; 0xed66 <fputc>
    ee3a:	08 95       	ret

0000ee3c <fgets>:
    ee3c:	a0 e0       	ldi	r26, 0x00	; 0
    ee3e:	b0 e0       	ldi	r27, 0x00	; 0
    ee40:	e4 e2       	ldi	r30, 0x24	; 36
    ee42:	f7 e7       	ldi	r31, 0x77	; 119
    ee44:	0c 94 d2 e3 	jmp	0x1c7a4	; 0x1c7a4 <__prologue_saves__+0x14>
    ee48:	7c 01       	movw	r14, r24
    ee4a:	6a 01       	movw	r12, r20
    ee4c:	8b 01       	movw	r16, r22
    ee4e:	c0 e0       	ldi	r28, 0x00	; 0
    ee50:	d0 e0       	ldi	r29, 0x00	; 0
    ee52:	01 15       	cp	r16, r1
    ee54:	11 05       	cpc	r17, r1
    ee56:	41 f0       	breq	.+16     	; 0xee68 <fgets+0x2c>
    ee58:	c6 01       	movw	r24, r12
    ee5a:	2f df       	rcall	.-418    	; 0xecba <fgetc>
    ee5c:	8f 3f       	cpi	r24, 0xFF	; 255
    ee5e:	2f ef       	ldi	r18, 0xFF	; 255
    ee60:	92 07       	cpc	r25, r18
    ee62:	39 f4       	brne	.+14     	; 0xee72 <fgets+0x36>
    ee64:	20 97       	sbiw	r28, 0x00	; 0
    ee66:	b9 f0       	breq	.+46     	; 0xee96 <fgets+0x5a>
    ee68:	ce 0d       	add	r28, r14
    ee6a:	df 1d       	adc	r29, r15
    ee6c:	18 82       	st	Y, r1
    ee6e:	c7 01       	movw	r24, r14
    ee70:	14 c0       	rjmp	.+40     	; 0xee9a <fgets+0x5e>
    ee72:	8a 30       	cpi	r24, 0x0A	; 10
    ee74:	91 05       	cpc	r25, r1
    ee76:	c1 f3       	breq	.-16     	; 0xee68 <fgets+0x2c>
    ee78:	88 30       	cpi	r24, 0x08	; 8
    ee7a:	91 05       	cpc	r25, r1
    ee7c:	21 f4       	brne	.+8      	; 0xee86 <fgets+0x4a>
    ee7e:	20 97       	sbiw	r28, 0x00	; 0
    ee80:	39 f0       	breq	.+14     	; 0xee90 <fgets+0x54>
    ee82:	21 97       	sbiw	r28, 0x01	; 1
    ee84:	05 c0       	rjmp	.+10     	; 0xee90 <fgets+0x54>
    ee86:	f7 01       	movw	r30, r14
    ee88:	ec 0f       	add	r30, r28
    ee8a:	fd 1f       	adc	r31, r29
    ee8c:	80 83       	st	Z, r24
    ee8e:	21 96       	adiw	r28, 0x01	; 1
    ee90:	01 50       	subi	r16, 0x01	; 1
    ee92:	11 09       	sbc	r17, r1
    ee94:	de cf       	rjmp	.-68     	; 0xee52 <fgets+0x16>
    ee96:	80 e0       	ldi	r24, 0x00	; 0
    ee98:	90 e0       	ldi	r25, 0x00	; 0
    ee9a:	cd b7       	in	r28, 0x3d	; 61
    ee9c:	de b7       	in	r29, 0x3e	; 62
    ee9e:	e8 e0       	ldi	r30, 0x08	; 8
    eea0:	0c 94 ee e3 	jmp	0x1c7dc	; 0x1c7dc <__epilogue_restores__+0x14>

0000eea4 <fputs>:
    eea4:	0f 93       	push	r16
    eea6:	1f 93       	push	r17
    eea8:	cf 93       	push	r28
    eeaa:	df 93       	push	r29
    eeac:	8b 01       	movw	r16, r22
    eeae:	ec 01       	movw	r28, r24
    eeb0:	89 91       	ld	r24, Y+
    eeb2:	88 23       	and	r24, r24
    eeb4:	41 f0       	breq	.+16     	; 0xeec6 <fputs+0x22>
    eeb6:	b8 01       	movw	r22, r16
    eeb8:	90 e0       	ldi	r25, 0x00	; 0
    eeba:	55 df       	rcall	.-342    	; 0xed66 <fputc>
    eebc:	8f 3f       	cpi	r24, 0xFF	; 255
    eebe:	2f ef       	ldi	r18, 0xFF	; 255
    eec0:	92 07       	cpc	r25, r18
    eec2:	b1 f7       	brne	.-20     	; 0xeeb0 <fputs+0xc>
    eec4:	02 c0       	rjmp	.+4      	; 0xeeca <fputs+0x26>
    eec6:	80 e0       	ldi	r24, 0x00	; 0
    eec8:	90 e0       	ldi	r25, 0x00	; 0
    eeca:	df 91       	pop	r29
    eecc:	cf 91       	pop	r28
    eece:	1f 91       	pop	r17
    eed0:	0f 91       	pop	r16
    eed2:	08 95       	ret

0000eed4 <puts>:
    eed4:	cf 93       	push	r28
    eed6:	df 93       	push	r29
    eed8:	ec 01       	movw	r28, r24
    eeda:	89 91       	ld	r24, Y+
    eedc:	60 91 57 1c 	lds	r22, 0x1C57	; 0x801c57 <__iob+0x2>
    eee0:	70 91 58 1c 	lds	r23, 0x1C58	; 0x801c58 <__iob+0x3>
    eee4:	88 23       	and	r24, r24
    eee6:	39 f0       	breq	.+14     	; 0xeef6 <puts+0x22>
    eee8:	90 e0       	ldi	r25, 0x00	; 0
    eeea:	3d df       	rcall	.-390    	; 0xed66 <fputc>
    eeec:	8f 3f       	cpi	r24, 0xFF	; 255
    eeee:	2f ef       	ldi	r18, 0xFF	; 255
    eef0:	92 07       	cpc	r25, r18
    eef2:	99 f7       	brne	.-26     	; 0xeeda <puts+0x6>
    eef4:	03 c0       	rjmp	.+6      	; 0xeefc <puts+0x28>
    eef6:	8a e0       	ldi	r24, 0x0A	; 10
    eef8:	90 e0       	ldi	r25, 0x00	; 0
    eefa:	35 df       	rcall	.-406    	; 0xed66 <fputc>
    eefc:	df 91       	pop	r29
    eefe:	cf 91       	pop	r28
    ef00:	08 95       	ret

0000ef02 <fileno>:
    ef02:	00 97       	sbiw	r24, 0x00	; 0
    ef04:	39 f4       	brne	.+14     	; 0xef14 <fileno+0x12>
    ef06:	89 e0       	ldi	r24, 0x09	; 9
    ef08:	90 e0       	ldi	r25, 0x00	; 0
    ef0a:	90 93 54 1c 	sts	0x1C54, r25	; 0x801c54 <errno+0x1>
    ef0e:	80 93 53 1c 	sts	0x1C53, r24	; 0x801c53 <errno>
    ef12:	0e c0       	rjmp	.+28     	; 0xef30 <fileno+0x2e>
    ef14:	e5 e5       	ldi	r30, 0x55	; 85
    ef16:	fc e1       	ldi	r31, 0x1C	; 28
    ef18:	20 e0       	ldi	r18, 0x00	; 0
    ef1a:	30 e0       	ldi	r19, 0x00	; 0
    ef1c:	41 91       	ld	r20, Z+
    ef1e:	51 91       	ld	r21, Z+
    ef20:	84 17       	cp	r24, r20
    ef22:	95 07       	cpc	r25, r21
    ef24:	41 f0       	breq	.+16     	; 0xef36 <fileno+0x34>
    ef26:	2f 5f       	subi	r18, 0xFF	; 255
    ef28:	3f 4f       	sbci	r19, 0xFF	; 255
    ef2a:	20 31       	cpi	r18, 0x10	; 16
    ef2c:	31 05       	cpc	r19, r1
    ef2e:	b1 f7       	brne	.-20     	; 0xef1c <fileno+0x1a>
    ef30:	8f ef       	ldi	r24, 0xFF	; 255
    ef32:	9f ef       	ldi	r25, 0xFF	; 255
    ef34:	08 95       	ret
    ef36:	c9 01       	movw	r24, r18
    ef38:	08 95       	ret

0000ef3a <fileno_to_stream>:
    ef3a:	80 31       	cpi	r24, 0x10	; 16
    ef3c:	91 05       	cpc	r25, r1
    ef3e:	48 f4       	brcc	.+18     	; 0xef52 <fileno_to_stream+0x18>
    ef40:	88 0f       	add	r24, r24
    ef42:	99 1f       	adc	r25, r25
    ef44:	fc 01       	movw	r30, r24
    ef46:	eb 5a       	subi	r30, 0xAB	; 171
    ef48:	f3 4e       	sbci	r31, 0xE3	; 227
    ef4a:	80 81       	ld	r24, Z
    ef4c:	91 81       	ldd	r25, Z+1	; 0x01
    ef4e:	00 97       	sbiw	r24, 0x00	; 0
    ef50:	41 f4       	brne	.+16     	; 0xef62 <fileno_to_stream+0x28>
    ef52:	89 e0       	ldi	r24, 0x09	; 9
    ef54:	90 e0       	ldi	r25, 0x00	; 0
    ef56:	90 93 54 1c 	sts	0x1C54, r25	; 0x801c54 <errno+0x1>
    ef5a:	80 93 53 1c 	sts	0x1C53, r24	; 0x801c53 <errno>
    ef5e:	80 e0       	ldi	r24, 0x00	; 0
    ef60:	90 e0       	ldi	r25, 0x00	; 0
    ef62:	08 95       	ret

0000ef64 <mctime>:
    ef64:	a4 e0       	ldi	r26, 0x04	; 4
    ef66:	b0 e0       	ldi	r27, 0x00	; 0
    ef68:	e8 eb       	ldi	r30, 0xB8	; 184
    ef6a:	f7 e7       	ldi	r31, 0x77	; 119
    ef6c:	0c 94 d8 e3 	jmp	0x1c7b0	; 0x1c7b0 <__prologue_saves__+0x20>
    ef70:	69 83       	std	Y+1, r22	; 0x01
    ef72:	7a 83       	std	Y+2, r23	; 0x02
    ef74:	8b 83       	std	Y+3, r24	; 0x03
    ef76:	9c 83       	std	Y+4, r25	; 0x04
    ef78:	10 92 54 1c 	sts	0x1C54, r1	; 0x801c54 <errno+0x1>
    ef7c:	10 92 53 1c 	sts	0x1C53, r1	; 0x801c53 <errno>
    ef80:	ce 01       	movw	r24, r28
    ef82:	01 96       	adiw	r24, 0x01	; 1
    ef84:	0e 94 0b 3e 	call	0x7c16	; 0x7c16 <ctime_gm>
    ef88:	fc 01       	movw	r30, r24
    ef8a:	01 90       	ld	r0, Z+
    ef8c:	00 20       	and	r0, r0
    ef8e:	e9 f7       	brne	.-6      	; 0xef8a <mctime+0x26>
    ef90:	31 97       	sbiw	r30, 0x01	; 1
    ef92:	e8 1b       	sub	r30, r24
    ef94:	f9 0b       	sbc	r31, r25
    ef96:	39 f0       	breq	.+14     	; 0xefa6 <mctime+0x42>
    ef98:	31 97       	sbiw	r30, 0x01	; 1
    ef9a:	e8 0f       	add	r30, r24
    ef9c:	f9 1f       	adc	r31, r25
    ef9e:	20 81       	ld	r18, Z
    efa0:	2a 30       	cpi	r18, 0x0A	; 10
    efa2:	09 f4       	brne	.+2      	; 0xefa6 <mctime+0x42>
    efa4:	10 82       	st	Z, r1
    efa6:	24 96       	adiw	r28, 0x04	; 4
    efa8:	e2 e0       	ldi	r30, 0x02	; 2
    efaa:	0c 94 f4 e3 	jmp	0x1c7e8	; 0x1c7e8 <__epilogue_restores__+0x20>

0000efae <basename>:
    efae:	00 97       	sbiw	r24, 0x00	; 0
    efb0:	49 f0       	breq	.+18     	; 0xefc4 <basename+0x16>
    efb2:	fc 01       	movw	r30, r24
    efb4:	21 91       	ld	r18, Z+
    efb6:	22 23       	and	r18, r18
    efb8:	21 f0       	breq	.+8      	; 0xefc2 <basename+0x14>
    efba:	2f 32       	cpi	r18, 0x2F	; 47
    efbc:	d9 f7       	brne	.-10     	; 0xefb4 <basename+0x6>
    efbe:	cf 01       	movw	r24, r30
    efc0:	f9 cf       	rjmp	.-14     	; 0xefb4 <basename+0x6>
    efc2:	08 95       	ret
    efc4:	8c ed       	ldi	r24, 0xDC	; 220
    efc6:	96 e1       	ldi	r25, 0x16	; 22
    efc8:	08 95       	ret

0000efca <chdir>:
    efca:	10 92 54 1c 	sts	0x1C54, r1	; 0x801c54 <errno+0x1>
    efce:	10 92 53 1c 	sts	0x1C53, r1	; 0x801c53 <errno>
    efd2:	0e 94 23 60 	call	0xc046	; 0xc046 <f_chdir>
    efd6:	00 97       	sbiw	r24, 0x00	; 0
    efd8:	a1 f0       	breq	.+40     	; 0xf002 <chdir+0x38>
    efda:	84 31       	cpi	r24, 0x14	; 20
    efdc:	91 05       	cpc	r25, r1
    efde:	40 f4       	brcc	.+16     	; 0xeff0 <chdir+0x26>
    efe0:	fc 01       	movw	r30, r24
    efe2:	ec 53       	subi	r30, 0x3C	; 60
    efe4:	f5 4f       	sbci	r31, 0xF5	; 245
    efe6:	80 81       	ld	r24, Z
    efe8:	08 2e       	mov	r0, r24
    efea:	00 0c       	add	r0, r0
    efec:	99 0b       	sbc	r25, r25
    efee:	02 c0       	rjmp	.+4      	; 0xeff4 <chdir+0x2a>
    eff0:	83 e2       	ldi	r24, 0x23	; 35
    eff2:	90 e0       	ldi	r25, 0x00	; 0
    eff4:	90 93 54 1c 	sts	0x1C54, r25	; 0x801c54 <errno+0x1>
    eff8:	80 93 53 1c 	sts	0x1C53, r24	; 0x801c53 <errno>
    effc:	8f ef       	ldi	r24, 0xFF	; 255
    effe:	9f ef       	ldi	r25, 0xFF	; 255
    f000:	08 95       	ret
    f002:	80 e0       	ldi	r24, 0x00	; 0
    f004:	90 e0       	ldi	r25, 0x00	; 0
    f006:	08 95       	ret

0000f008 <chmod>:
    f008:	10 92 54 1c 	sts	0x1C54, r1	; 0x801c54 <errno+0x1>
    f00c:	10 92 53 1c 	sts	0x1C53, r1	; 0x801c53 <errno>
    f010:	42 79       	andi	r20, 0x92	; 146
    f012:	55 27       	eor	r21, r21
    f014:	66 27       	eor	r22, r22
    f016:	77 27       	eor	r23, r23
    f018:	45 2b       	or	r20, r21
    f01a:	46 2b       	or	r20, r22
    f01c:	47 2b       	or	r20, r23
    f01e:	19 f0       	breq	.+6      	; 0xf026 <chmod+0x1e>
    f020:	80 e0       	ldi	r24, 0x00	; 0
    f022:	90 e0       	ldi	r25, 0x00	; 0
    f024:	08 95       	ret
    f026:	41 e0       	ldi	r20, 0x01	; 1
    f028:	61 e0       	ldi	r22, 0x01	; 1
    f02a:	0e 94 04 69 	call	0xd208	; 0xd208 <f_chmod>
    f02e:	00 97       	sbiw	r24, 0x00	; 0
    f030:	b9 f3       	breq	.-18     	; 0xf020 <chmod+0x18>
    f032:	84 31       	cpi	r24, 0x14	; 20
    f034:	91 05       	cpc	r25, r1
    f036:	40 f4       	brcc	.+16     	; 0xf048 <chmod+0x40>
    f038:	fc 01       	movw	r30, r24
    f03a:	ec 53       	subi	r30, 0x3C	; 60
    f03c:	f5 4f       	sbci	r31, 0xF5	; 245
    f03e:	80 81       	ld	r24, Z
    f040:	08 2e       	mov	r0, r24
    f042:	00 0c       	add	r0, r0
    f044:	99 0b       	sbc	r25, r25
    f046:	02 c0       	rjmp	.+4      	; 0xf04c <chmod+0x44>
    f048:	83 e2       	ldi	r24, 0x23	; 35
    f04a:	90 e0       	ldi	r25, 0x00	; 0
    f04c:	90 93 54 1c 	sts	0x1C54, r25	; 0x801c54 <errno+0x1>
    f050:	80 93 53 1c 	sts	0x1C53, r24	; 0x801c53 <errno>
    f054:	8f ef       	ldi	r24, 0xFF	; 255
    f056:	9f ef       	ldi	r25, 0xFF	; 255
    f058:	08 95       	ret

0000f05a <getcwd>:
    f05a:	cf 93       	push	r28
    f05c:	df 93       	push	r29
    f05e:	d8 2f       	mov	r29, r24
    f060:	c9 2f       	mov	r28, r25
    f062:	10 92 54 1c 	sts	0x1C54, r1	; 0x801c54 <errno+0x1>
    f066:	10 92 53 1c 	sts	0x1C53, r1	; 0x801c53 <errno>
    f06a:	0e 94 7e 60 	call	0xc0fc	; 0xc0fc <f_getcwd>
    f06e:	00 97       	sbiw	r24, 0x00	; 0
    f070:	a1 f0       	breq	.+40     	; 0xf09a <getcwd+0x40>
    f072:	84 31       	cpi	r24, 0x14	; 20
    f074:	91 05       	cpc	r25, r1
    f076:	40 f4       	brcc	.+16     	; 0xf088 <getcwd+0x2e>
    f078:	fc 01       	movw	r30, r24
    f07a:	ec 53       	subi	r30, 0x3C	; 60
    f07c:	f5 4f       	sbci	r31, 0xF5	; 245
    f07e:	80 81       	ld	r24, Z
    f080:	08 2e       	mov	r0, r24
    f082:	00 0c       	add	r0, r0
    f084:	99 0b       	sbc	r25, r25
    f086:	02 c0       	rjmp	.+4      	; 0xf08c <getcwd+0x32>
    f088:	83 e2       	ldi	r24, 0x23	; 35
    f08a:	90 e0       	ldi	r25, 0x00	; 0
    f08c:	90 93 54 1c 	sts	0x1C54, r25	; 0x801c54 <errno+0x1>
    f090:	80 93 53 1c 	sts	0x1C53, r24	; 0x801c53 <errno>
    f094:	80 e0       	ldi	r24, 0x00	; 0
    f096:	90 e0       	ldi	r25, 0x00	; 0
    f098:	02 c0       	rjmp	.+4      	; 0xf09e <getcwd+0x44>
    f09a:	8d 2f       	mov	r24, r29
    f09c:	9c 2f       	mov	r25, r28
    f09e:	df 91       	pop	r29
    f0a0:	cf 91       	pop	r28
    f0a2:	08 95       	ret

0000f0a4 <mkdir>:
    f0a4:	cf 93       	push	r28
    f0a6:	df 93       	push	r29
    f0a8:	ec 01       	movw	r28, r24
    f0aa:	10 92 54 1c 	sts	0x1C54, r1	; 0x801c54 <errno+0x1>
    f0ae:	10 92 53 1c 	sts	0x1C53, r1	; 0x801c53 <errno>
    f0b2:	41 15       	cp	r20, r1
    f0b4:	51 05       	cpc	r21, r1
    f0b6:	61 05       	cpc	r22, r1
    f0b8:	71 05       	cpc	r23, r1
    f0ba:	41 f4       	brne	.+16     	; 0xf0cc <mkdir+0x28>
    f0bc:	ce 01       	movw	r24, r28
    f0be:	0e 94 ff 66 	call	0xcdfe	; 0xcdfe <f_mkdir>
    f0c2:	00 97       	sbiw	r24, 0x00	; 0
    f0c4:	39 f4       	brne	.+14     	; 0xf0d4 <mkdir+0x30>
    f0c6:	80 e0       	ldi	r24, 0x00	; 0
    f0c8:	90 e0       	ldi	r25, 0x00	; 0
    f0ca:	17 c0       	rjmp	.+46     	; 0xf0fa <mkdir+0x56>
    f0cc:	9d df       	rcall	.-198    	; 0xf008 <chmod>
    f0ce:	89 2b       	or	r24, r25
    f0d0:	a9 f3       	breq	.-22     	; 0xf0bc <mkdir+0x18>
    f0d2:	11 c0       	rjmp	.+34     	; 0xf0f6 <mkdir+0x52>
    f0d4:	84 31       	cpi	r24, 0x14	; 20
    f0d6:	91 05       	cpc	r25, r1
    f0d8:	40 f4       	brcc	.+16     	; 0xf0ea <mkdir+0x46>
    f0da:	fc 01       	movw	r30, r24
    f0dc:	ec 53       	subi	r30, 0x3C	; 60
    f0de:	f5 4f       	sbci	r31, 0xF5	; 245
    f0e0:	80 81       	ld	r24, Z
    f0e2:	08 2e       	mov	r0, r24
    f0e4:	00 0c       	add	r0, r0
    f0e6:	99 0b       	sbc	r25, r25
    f0e8:	02 c0       	rjmp	.+4      	; 0xf0ee <mkdir+0x4a>
    f0ea:	83 e2       	ldi	r24, 0x23	; 35
    f0ec:	90 e0       	ldi	r25, 0x00	; 0
    f0ee:	90 93 54 1c 	sts	0x1C54, r25	; 0x801c54 <errno+0x1>
    f0f2:	80 93 53 1c 	sts	0x1C53, r24	; 0x801c53 <errno>
    f0f6:	8f ef       	ldi	r24, 0xFF	; 255
    f0f8:	9f ef       	ldi	r25, 0xFF	; 255
    f0fa:	df 91       	pop	r29
    f0fc:	cf 91       	pop	r28
    f0fe:	08 95       	ret

0000f100 <rename>:
    f100:	10 92 54 1c 	sts	0x1C54, r1	; 0x801c54 <errno+0x1>
    f104:	10 92 53 1c 	sts	0x1C53, r1	; 0x801c53 <errno>
    f108:	0e 94 ef 67 	call	0xcfde	; 0xcfde <f_rename>
    f10c:	00 97       	sbiw	r24, 0x00	; 0
    f10e:	a1 f0       	breq	.+40     	; 0xf138 <rename+0x38>
    f110:	84 31       	cpi	r24, 0x14	; 20
    f112:	91 05       	cpc	r25, r1
    f114:	40 f4       	brcc	.+16     	; 0xf126 <rename+0x26>
    f116:	fc 01       	movw	r30, r24
    f118:	ec 53       	subi	r30, 0x3C	; 60
    f11a:	f5 4f       	sbci	r31, 0xF5	; 245
    f11c:	80 81       	ld	r24, Z
    f11e:	08 2e       	mov	r0, r24
    f120:	00 0c       	add	r0, r0
    f122:	99 0b       	sbc	r25, r25
    f124:	02 c0       	rjmp	.+4      	; 0xf12a <rename+0x2a>
    f126:	83 e2       	ldi	r24, 0x23	; 35
    f128:	90 e0       	ldi	r25, 0x00	; 0
    f12a:	90 93 54 1c 	sts	0x1C54, r25	; 0x801c54 <errno+0x1>
    f12e:	80 93 53 1c 	sts	0x1C53, r24	; 0x801c53 <errno>
    f132:	8f ef       	ldi	r24, 0xFF	; 255
    f134:	9f ef       	ldi	r25, 0xFF	; 255
    f136:	08 95       	ret
    f138:	80 e0       	ldi	r24, 0x00	; 0
    f13a:	90 e0       	ldi	r25, 0x00	; 0
    f13c:	08 95       	ret

0000f13e <unlink>:
    f13e:	10 92 54 1c 	sts	0x1C54, r1	; 0x801c54 <errno+0x1>
    f142:	10 92 53 1c 	sts	0x1C53, r1	; 0x801c53 <errno>
    f146:	0e 94 58 66 	call	0xccb0	; 0xccb0 <f_unlink>
    f14a:	00 97       	sbiw	r24, 0x00	; 0
    f14c:	a1 f0       	breq	.+40     	; 0xf176 <unlink+0x38>
    f14e:	84 31       	cpi	r24, 0x14	; 20
    f150:	91 05       	cpc	r25, r1
    f152:	40 f4       	brcc	.+16     	; 0xf164 <unlink+0x26>
    f154:	fc 01       	movw	r30, r24
    f156:	ec 53       	subi	r30, 0x3C	; 60
    f158:	f5 4f       	sbci	r31, 0xF5	; 245
    f15a:	80 81       	ld	r24, Z
    f15c:	08 2e       	mov	r0, r24
    f15e:	00 0c       	add	r0, r0
    f160:	99 0b       	sbc	r25, r25
    f162:	02 c0       	rjmp	.+4      	; 0xf168 <unlink+0x2a>
    f164:	83 e2       	ldi	r24, 0x23	; 35
    f166:	90 e0       	ldi	r25, 0x00	; 0
    f168:	90 93 54 1c 	sts	0x1C54, r25	; 0x801c54 <errno+0x1>
    f16c:	80 93 53 1c 	sts	0x1C53, r24	; 0x801c53 <errno>
    f170:	8f ef       	ldi	r24, 0xFF	; 255
    f172:	9f ef       	ldi	r25, 0xFF	; 255
    f174:	08 95       	ret
    f176:	80 e0       	ldi	r24, 0x00	; 0
    f178:	90 e0       	ldi	r25, 0x00	; 0
    f17a:	08 95       	ret

0000f17c <rmdir>:
    f17c:	e0 cf       	rjmp	.-64     	; 0xf13e <unlink>
    f17e:	08 95       	ret

0000f180 <closedir>:
    f180:	0e 94 e1 64 	call	0xc9c2	; 0xc9c2 <f_closedir>
    f184:	00 97       	sbiw	r24, 0x00	; 0
    f186:	a1 f0       	breq	.+40     	; 0xf1b0 <closedir+0x30>
    f188:	84 31       	cpi	r24, 0x14	; 20
    f18a:	91 05       	cpc	r25, r1
    f18c:	40 f4       	brcc	.+16     	; 0xf19e <closedir+0x1e>
    f18e:	fc 01       	movw	r30, r24
    f190:	ec 53       	subi	r30, 0x3C	; 60
    f192:	f5 4f       	sbci	r31, 0xF5	; 245
    f194:	80 81       	ld	r24, Z
    f196:	08 2e       	mov	r0, r24
    f198:	00 0c       	add	r0, r0
    f19a:	99 0b       	sbc	r25, r25
    f19c:	02 c0       	rjmp	.+4      	; 0xf1a2 <closedir+0x22>
    f19e:	83 e2       	ldi	r24, 0x23	; 35
    f1a0:	90 e0       	ldi	r25, 0x00	; 0
    f1a2:	90 93 54 1c 	sts	0x1C54, r25	; 0x801c54 <errno+0x1>
    f1a6:	80 93 53 1c 	sts	0x1C53, r24	; 0x801c53 <errno>
    f1aa:	8f ef       	ldi	r24, 0xFF	; 255
    f1ac:	9f ef       	ldi	r25, 0xFF	; 255
    f1ae:	08 95       	ret
    f1b0:	80 e0       	ldi	r24, 0x00	; 0
    f1b2:	90 e0       	ldi	r25, 0x00	; 0
    f1b4:	08 95       	ret

0000f1b6 <opendir>:
    f1b6:	bc 01       	movw	r22, r24
    f1b8:	8b ec       	ldi	r24, 0xCB	; 203
    f1ba:	98 e1       	ldi	r25, 0x18	; 24
    f1bc:	0e 94 70 64 	call	0xc8e0	; 0xc8e0 <f_opendir>
    f1c0:	00 97       	sbiw	r24, 0x00	; 0
    f1c2:	a1 f0       	breq	.+40     	; 0xf1ec <opendir+0x36>
    f1c4:	84 31       	cpi	r24, 0x14	; 20
    f1c6:	91 05       	cpc	r25, r1
    f1c8:	40 f4       	brcc	.+16     	; 0xf1da <opendir+0x24>
    f1ca:	fc 01       	movw	r30, r24
    f1cc:	ec 53       	subi	r30, 0x3C	; 60
    f1ce:	f5 4f       	sbci	r31, 0xF5	; 245
    f1d0:	80 81       	ld	r24, Z
    f1d2:	08 2e       	mov	r0, r24
    f1d4:	00 0c       	add	r0, r0
    f1d6:	99 0b       	sbc	r25, r25
    f1d8:	02 c0       	rjmp	.+4      	; 0xf1de <opendir+0x28>
    f1da:	83 e2       	ldi	r24, 0x23	; 35
    f1dc:	90 e0       	ldi	r25, 0x00	; 0
    f1de:	90 93 54 1c 	sts	0x1C54, r25	; 0x801c54 <errno+0x1>
    f1e2:	80 93 53 1c 	sts	0x1C53, r24	; 0x801c53 <errno>
    f1e6:	80 e0       	ldi	r24, 0x00	; 0
    f1e8:	90 e0       	ldi	r25, 0x00	; 0
    f1ea:	08 95       	ret
    f1ec:	8b ec       	ldi	r24, 0xCB	; 203
    f1ee:	98 e1       	ldi	r25, 0x18	; 24
    f1f0:	08 95       	ret

0000f1f2 <readdir>:
    f1f2:	a6 e1       	ldi	r26, 0x16	; 22
    f1f4:	b1 e0       	ldi	r27, 0x01	; 1
    f1f6:	ef ef       	ldi	r30, 0xFF	; 255
    f1f8:	f8 e7       	ldi	r31, 0x78	; 120
    f1fa:	0c 94 d6 e3 	jmp	0x1c7ac	; 0x1c7ac <__prologue_saves__+0x1c>
    f1fe:	10 92 cc 17 	sts	0x17CC, r1	; 0x8017cc <_de>
    f202:	be 01       	movw	r22, r28
    f204:	6f 5f       	subi	r22, 0xFF	; 255
    f206:	7f 4f       	sbci	r23, 0xFF	; 255
    f208:	0e 94 f6 64 	call	0xc9ec	; 0xc9ec <f_readdir>
    f20c:	00 97       	sbiw	r24, 0x00	; 0
    f20e:	a1 f0       	breq	.+40     	; 0xf238 <readdir+0x46>
    f210:	84 31       	cpi	r24, 0x14	; 20
    f212:	91 05       	cpc	r25, r1
    f214:	40 f4       	brcc	.+16     	; 0xf226 <readdir+0x34>
    f216:	fc 01       	movw	r30, r24
    f218:	ec 53       	subi	r30, 0x3C	; 60
    f21a:	f5 4f       	sbci	r31, 0xF5	; 245
    f21c:	80 81       	ld	r24, Z
    f21e:	08 2e       	mov	r0, r24
    f220:	00 0c       	add	r0, r0
    f222:	99 0b       	sbc	r25, r25
    f224:	02 c0       	rjmp	.+4      	; 0xf22a <readdir+0x38>
    f226:	83 e2       	ldi	r24, 0x23	; 35
    f228:	90 e0       	ldi	r25, 0x00	; 0
    f22a:	90 93 54 1c 	sts	0x1C54, r25	; 0x801c54 <errno+0x1>
    f22e:	80 93 53 1c 	sts	0x1C53, r24	; 0x801c53 <errno>
    f232:	80 e0       	ldi	r24, 0x00	; 0
    f234:	90 e0       	ldi	r25, 0x00	; 0
    f236:	16 c0       	rjmp	.+44     	; 0xf264 <readdir+0x72>
    f238:	be 01       	movw	r22, r28
    f23a:	69 5e       	subi	r22, 0xE9	; 233
    f23c:	7f 4f       	sbci	r23, 0xFF	; 255
    f23e:	fb 01       	movw	r30, r22
    f240:	01 90       	ld	r0, Z+
    f242:	00 20       	and	r0, r0
    f244:	e9 f7       	brne	.-6      	; 0xf240 <readdir+0x4e>
    f246:	31 97       	sbiw	r30, 0x01	; 1
    f248:	8f 01       	movw	r16, r30
    f24a:	06 1b       	sub	r16, r22
    f24c:	17 0b       	sbc	r17, r23
    f24e:	a8 01       	movw	r20, r16
    f250:	8c ec       	ldi	r24, 0xCC	; 204
    f252:	97 e1       	ldi	r25, 0x17	; 23
    f254:	0e 94 40 32 	call	0x6480	; 0x6480 <strncpy>
    f258:	f8 01       	movw	r30, r16
    f25a:	e4 53       	subi	r30, 0x34	; 52
    f25c:	f8 4e       	sbci	r31, 0xE8	; 232
    f25e:	10 82       	st	Z, r1
    f260:	8c ec       	ldi	r24, 0xCC	; 204
    f262:	97 e1       	ldi	r25, 0x17	; 23
    f264:	ca 5e       	subi	r28, 0xEA	; 234
    f266:	de 4f       	sbci	r29, 0xFE	; 254
    f268:	e4 e0       	ldi	r30, 0x04	; 4
    f26a:	0c 94 f2 e3 	jmp	0x1c7e4	; 0x1c7e4 <__epilogue_restores__+0x1c>

0000f26e <perror>:
    f26e:	ad b7       	in	r26, 0x3d	; 61
    f270:	be b7       	in	r27, 0x3e	; 62
    f272:	17 97       	sbiw	r26, 0x07	; 7
    f274:	0f b6       	in	r0, 0x3f	; 63
    f276:	f8 94       	cli
    f278:	be bf       	out	0x3e, r27	; 62
    f27a:	0f be       	out	0x3f, r0	; 63
    f27c:	ad bf       	out	0x3d, r26	; 61
    f27e:	20 91 53 1c 	lds	r18, 0x1C53	; 0x801c53 <errno>
    f282:	30 91 54 1c 	lds	r19, 0x1C54	; 0x801c54 <errno+0x1>
    f286:	23 32       	cpi	r18, 0x23	; 35
    f288:	31 05       	cpc	r19, r1
    f28a:	40 f4       	brcc	.+16     	; 0xf29c <perror+0x2e>
    f28c:	22 0f       	add	r18, r18
    f28e:	33 1f       	adc	r19, r19
    f290:	f9 01       	movw	r30, r18
    f292:	ed 5b       	subi	r30, 0xBD	; 189
    f294:	fe 4f       	sbci	r31, 0xFE	; 254
    f296:	20 81       	ld	r18, Z
    f298:	31 81       	ldd	r19, Z+1	; 0x01
    f29a:	04 c0       	rjmp	.+8      	; 0xf2a4 <perror+0x36>
    f29c:	20 91 89 01 	lds	r18, 0x0189	; 0x800189 <sys_errlist+0x46>
    f2a0:	30 91 8a 01 	lds	r19, 0x018A	; 0x80018a <sys_errlist+0x47>
    f2a4:	00 97       	sbiw	r24, 0x00	; 0
    f2a6:	99 f0       	breq	.+38     	; 0xf2ce <perror+0x60>
    f2a8:	fc 01       	movw	r30, r24
    f2aa:	40 81       	ld	r20, Z
    f2ac:	44 23       	and	r20, r20
    f2ae:	79 f0       	breq	.+30     	; 0xf2ce <perror+0x60>
    f2b0:	ed b7       	in	r30, 0x3d	; 61
    f2b2:	fe b7       	in	r31, 0x3e	; 62
    f2b4:	37 83       	std	Z+7, r19	; 0x07
    f2b6:	26 83       	std	Z+6, r18	; 0x06
    f2b8:	95 83       	std	Z+5, r25	; 0x05
    f2ba:	84 83       	std	Z+4, r24	; 0x04
    f2bc:	8c e2       	ldi	r24, 0x2C	; 44
    f2be:	9b e0       	ldi	r25, 0x0B	; 11
    f2c0:	a0 e0       	ldi	r26, 0x00	; 0
    f2c2:	81 83       	std	Z+1, r24	; 0x01
    f2c4:	92 83       	std	Z+2, r25	; 0x02
    f2c6:	a3 83       	std	Z+3, r26	; 0x03
    f2c8:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    f2cc:	0c c0       	rjmp	.+24     	; 0xf2e6 <perror+0x78>
    f2ce:	ed b7       	in	r30, 0x3d	; 61
    f2d0:	fe b7       	in	r31, 0x3e	; 62
    f2d2:	35 83       	std	Z+5, r19	; 0x05
    f2d4:	24 83       	std	Z+4, r18	; 0x04
    f2d6:	88 e2       	ldi	r24, 0x28	; 40
    f2d8:	9b e0       	ldi	r25, 0x0B	; 11
    f2da:	a0 e0       	ldi	r26, 0x00	; 0
    f2dc:	81 83       	std	Z+1, r24	; 0x01
    f2de:	92 83       	std	Z+2, r25	; 0x02
    f2e0:	a3 83       	std	Z+3, r26	; 0x03
    f2e2:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    f2e6:	ad b7       	in	r26, 0x3d	; 61
    f2e8:	be b7       	in	r27, 0x3e	; 62
    f2ea:	17 96       	adiw	r26, 0x07	; 7
    f2ec:	0f b6       	in	r0, 0x3f	; 63
    f2ee:	f8 94       	cli
    f2f0:	be bf       	out	0x3e, r27	; 62
    f2f2:	0f be       	out	0x3f, r0	; 63
    f2f4:	ad bf       	out	0x3d, r26	; 61
    f2f6:	08 95       	ret

0000f2f8 <fdevopen>:
    f2f8:	0f 93       	push	r16
    f2fa:	1f 93       	push	r17
    f2fc:	cf 93       	push	r28
    f2fe:	df 93       	push	r29
    f300:	00 97       	sbiw	r24, 0x00	; 0
    f302:	31 f4       	brne	.+12     	; 0xf310 <fdevopen+0x18>
    f304:	61 15       	cp	r22, r1
    f306:	71 05       	cpc	r23, r1
    f308:	19 f4       	brne	.+6      	; 0xf310 <fdevopen+0x18>
    f30a:	80 e0       	ldi	r24, 0x00	; 0
    f30c:	90 e0       	ldi	r25, 0x00	; 0
    f30e:	3a c0       	rjmp	.+116    	; 0xf384 <fdevopen+0x8c>
    f310:	8b 01       	movw	r16, r22
    f312:	ec 01       	movw	r28, r24
    f314:	6e e0       	ldi	r22, 0x0E	; 14
    f316:	70 e0       	ldi	r23, 0x00	; 0
    f318:	81 e0       	ldi	r24, 0x01	; 1
    f31a:	90 e0       	ldi	r25, 0x00	; 0
    f31c:	0e 94 49 29 	call	0x5292	; 0x5292 <safecalloc>
    f320:	fc 01       	movw	r30, r24
    f322:	89 2b       	or	r24, r25
    f324:	91 f3       	breq	.-28     	; 0xf30a <fdevopen+0x12>
    f326:	80 e8       	ldi	r24, 0x80	; 128
    f328:	83 83       	std	Z+3, r24	; 0x03
    f32a:	01 15       	cp	r16, r1
    f32c:	11 05       	cpc	r17, r1
    f32e:	71 f0       	breq	.+28     	; 0xf34c <fdevopen+0x54>
    f330:	13 87       	std	Z+11, r17	; 0x0b
    f332:	02 87       	std	Z+10, r16	; 0x0a
    f334:	81 e8       	ldi	r24, 0x81	; 129
    f336:	83 83       	std	Z+3, r24	; 0x03
    f338:	80 91 55 1c 	lds	r24, 0x1C55	; 0x801c55 <__iob>
    f33c:	90 91 56 1c 	lds	r25, 0x1C56	; 0x801c56 <__iob+0x1>
    f340:	89 2b       	or	r24, r25
    f342:	21 f4       	brne	.+8      	; 0xf34c <fdevopen+0x54>
    f344:	f0 93 56 1c 	sts	0x1C56, r31	; 0x801c56 <__iob+0x1>
    f348:	e0 93 55 1c 	sts	0x1C55, r30	; 0x801c55 <__iob>
    f34c:	20 97       	sbiw	r28, 0x00	; 0
    f34e:	c9 f0       	breq	.+50     	; 0xf382 <fdevopen+0x8a>
    f350:	d1 87       	std	Z+9, r29	; 0x09
    f352:	c0 87       	std	Z+8, r28	; 0x08
    f354:	83 81       	ldd	r24, Z+3	; 0x03
    f356:	82 60       	ori	r24, 0x02	; 2
    f358:	83 83       	std	Z+3, r24	; 0x03
    f35a:	80 91 57 1c 	lds	r24, 0x1C57	; 0x801c57 <__iob+0x2>
    f35e:	90 91 58 1c 	lds	r25, 0x1C58	; 0x801c58 <__iob+0x3>
    f362:	89 2b       	or	r24, r25
    f364:	21 f4       	brne	.+8      	; 0xf36e <fdevopen+0x76>
    f366:	f0 93 58 1c 	sts	0x1C58, r31	; 0x801c58 <__iob+0x3>
    f36a:	e0 93 57 1c 	sts	0x1C57, r30	; 0x801c57 <__iob+0x2>
    f36e:	80 91 59 1c 	lds	r24, 0x1C59	; 0x801c59 <__iob+0x4>
    f372:	90 91 5a 1c 	lds	r25, 0x1C5A	; 0x801c5a <__iob+0x5>
    f376:	89 2b       	or	r24, r25
    f378:	21 f4       	brne	.+8      	; 0xf382 <fdevopen+0x8a>
    f37a:	f0 93 5a 1c 	sts	0x1C5A, r31	; 0x801c5a <__iob+0x5>
    f37e:	e0 93 59 1c 	sts	0x1C59, r30	; 0x801c59 <__iob+0x4>
    f382:	cf 01       	movw	r24, r30
    f384:	df 91       	pop	r29
    f386:	cf 91       	pop	r28
    f388:	1f 91       	pop	r17
    f38a:	0f 91       	pop	r16
    f38c:	08 95       	ret

0000f38e <fat_time_to_unix>:
    f38e:	a6 e1       	ldi	r26, 0x16	; 22
    f390:	b0 e0       	ldi	r27, 0x00	; 0
    f392:	ed ec       	ldi	r30, 0xCD	; 205
    f394:	f9 e7       	ldi	r31, 0x79	; 121
    f396:	0c 94 d8 e3 	jmp	0x1c7b0	; 0x1c7b0 <__prologue_saves__+0x20>
    f39a:	fe 01       	movw	r30, r28
    f39c:	31 96       	adiw	r30, 0x01	; 1
    f39e:	26 e1       	ldi	r18, 0x16	; 22
    f3a0:	df 01       	movw	r26, r30
    f3a2:	1d 92       	st	X+, r1
    f3a4:	2a 95       	dec	r18
    f3a6:	e9 f7       	brne	.-6      	; 0xf3a2 <fat_time_to_unix+0x14>
    f3a8:	9b 01       	movw	r18, r22
    f3aa:	22 0f       	add	r18, r18
    f3ac:	33 1f       	adc	r19, r19
    f3ae:	2e 73       	andi	r18, 0x3E	; 62
    f3b0:	33 27       	eor	r19, r19
    f3b2:	3a 83       	std	Y+2, r19	; 0x02
    f3b4:	29 83       	std	Y+1, r18	; 0x01
    f3b6:	9b 01       	movw	r18, r22
    f3b8:	55 e0       	ldi	r21, 0x05	; 5
    f3ba:	36 95       	lsr	r19
    f3bc:	27 95       	ror	r18
    f3be:	5a 95       	dec	r21
    f3c0:	e1 f7       	brne	.-8      	; 0xf3ba <fat_time_to_unix+0x2c>
    f3c2:	2f 73       	andi	r18, 0x3F	; 63
    f3c4:	33 27       	eor	r19, r19
    f3c6:	3c 83       	std	Y+4, r19	; 0x04
    f3c8:	2b 83       	std	Y+3, r18	; 0x03
    f3ca:	27 2f       	mov	r18, r23
    f3cc:	26 95       	lsr	r18
    f3ce:	26 95       	lsr	r18
    f3d0:	26 95       	lsr	r18
    f3d2:	2d 83       	std	Y+5, r18	; 0x05
    f3d4:	1e 82       	std	Y+6, r1	; 0x06
    f3d6:	9c 01       	movw	r18, r24
    f3d8:	2f 71       	andi	r18, 0x1F	; 31
    f3da:	33 27       	eor	r19, r19
    f3dc:	38 87       	std	Y+8, r19	; 0x08
    f3de:	2f 83       	std	Y+7, r18	; 0x07
    f3e0:	9c 01       	movw	r18, r24
    f3e2:	65 e0       	ldi	r22, 0x05	; 5
    f3e4:	36 95       	lsr	r19
    f3e6:	27 95       	ror	r18
    f3e8:	6a 95       	dec	r22
    f3ea:	e1 f7       	brne	.-8      	; 0xf3e4 <fat_time_to_unix+0x56>
    f3ec:	2f 70       	andi	r18, 0x0F	; 15
    f3ee:	33 27       	eor	r19, r19
    f3f0:	21 50       	subi	r18, 0x01	; 1
    f3f2:	31 09       	sbc	r19, r1
    f3f4:	3a 87       	std	Y+10, r19	; 0x0a
    f3f6:	29 87       	std	Y+9, r18	; 0x09
    f3f8:	9c 01       	movw	r18, r24
    f3fa:	23 2f       	mov	r18, r19
    f3fc:	33 27       	eor	r19, r19
    f3fe:	26 95       	lsr	r18
    f400:	20 5b       	subi	r18, 0xB0	; 176
    f402:	3f 4f       	sbci	r19, 0xFF	; 255
    f404:	3c 87       	std	Y+12, r19	; 0x0c
    f406:	2b 87       	std	Y+11, r18	; 0x0b
    f408:	cf 01       	movw	r24, r30
    f40a:	0e 94 56 3b 	call	0x76ac	; 0x76ac <timegm>
    f40e:	66 96       	adiw	r28, 0x16	; 22
    f410:	e2 e0       	ldi	r30, 0x02	; 2
    f412:	0c 94 f4 e3 	jmp	0x1c7e8	; 0x1c7e8 <__epilogue_restores__+0x20>

0000f416 <stat>:
    f416:	a6 e1       	ldi	r26, 0x16	; 22
    f418:	b1 e0       	ldi	r27, 0x01	; 1
    f41a:	e1 e1       	ldi	r30, 0x11	; 17
    f41c:	fa e7       	ldi	r31, 0x7A	; 122
    f41e:	0c 94 d4 e3 	jmp	0x1c7a8	; 0x1c7a8 <__prologue_saves__+0x18>
    f422:	7c 01       	movw	r14, r24
    f424:	8b 01       	movw	r16, r22
    f426:	10 92 54 1c 	sts	0x1C54, r1	; 0x801c54 <errno+0x1>
    f42a:	10 92 53 1c 	sts	0x1C53, r1	; 0x801c53 <errno>
    f42e:	66 ec       	ldi	r22, 0xC6	; 198
    f430:	77 e0       	ldi	r23, 0x07	; 7
    f432:	0e 94 8f 32 	call	0x651e	; 0x651e <strcmp>
    f436:	89 2b       	or	r24, r25
    f438:	39 f0       	breq	.+14     	; 0xf448 <stat+0x32>
    f43a:	6b e0       	ldi	r22, 0x0B	; 11
    f43c:	72 e1       	ldi	r23, 0x12	; 18
    f43e:	c7 01       	movw	r24, r14
    f440:	0e 94 8f 32 	call	0x651e	; 0x651e <strcmp>
    f444:	89 2b       	or	r24, r25
    f446:	d1 f4       	brne	.+52     	; 0xf47c <stat+0x66>
    f448:	f8 01       	movw	r30, r16
    f44a:	14 a2       	std	Z+36, r1	; 0x24
    f44c:	15 a2       	std	Z+37, r1	; 0x25
    f44e:	16 a2       	std	Z+38, r1	; 0x26
    f450:	17 a2       	std	Z+39, r1	; 0x27
    f452:	10 a6       	std	Z+40, r1	; 0x28
    f454:	11 a6       	std	Z+41, r1	; 0x29
    f456:	12 a6       	std	Z+42, r1	; 0x2a
    f458:	13 a6       	std	Z+43, r1	; 0x2b
    f45a:	14 a6       	std	Z+44, r1	; 0x2c
    f45c:	15 a6       	std	Z+45, r1	; 0x2d
    f45e:	16 a6       	std	Z+46, r1	; 0x2e
    f460:	17 a6       	std	Z+47, r1	; 0x2f
    f462:	11 8a       	std	Z+17, r1	; 0x11
    f464:	10 8a       	std	Z+16, r1	; 0x10
    f466:	13 8a       	std	Z+19, r1	; 0x13
    f468:	12 8a       	std	Z+18, r1	; 0x12
    f46a:	10 8e       	std	Z+24, r1	; 0x18
    f46c:	11 8e       	std	Z+25, r1	; 0x19
    f46e:	12 8e       	std	Z+26, r1	; 0x1a
    f470:	13 8e       	std	Z+27, r1	; 0x1b
    f472:	80 e0       	ldi	r24, 0x00	; 0
    f474:	90 e4       	ldi	r25, 0x40	; 64
    f476:	a0 e0       	ldi	r26, 0x00	; 0
    f478:	b0 e0       	ldi	r27, 0x00	; 0
    f47a:	4e c0       	rjmp	.+156    	; 0xf518 <stat+0x102>
    f47c:	be 01       	movw	r22, r28
    f47e:	6f 5f       	subi	r22, 0xFF	; 255
    f480:	7f 4f       	sbci	r23, 0xFF	; 255
    f482:	c7 01       	movw	r24, r14
    f484:	0e 94 3a 65 	call	0xca74	; 0xca74 <f_stat>
    f488:	00 97       	sbiw	r24, 0x00	; 0
    f48a:	a1 f0       	breq	.+40     	; 0xf4b4 <stat+0x9e>
    f48c:	84 31       	cpi	r24, 0x14	; 20
    f48e:	91 05       	cpc	r25, r1
    f490:	40 f4       	brcc	.+16     	; 0xf4a2 <stat+0x8c>
    f492:	fc 01       	movw	r30, r24
    f494:	ec 53       	subi	r30, 0x3C	; 60
    f496:	f5 4f       	sbci	r31, 0xF5	; 245
    f498:	80 81       	ld	r24, Z
    f49a:	08 2e       	mov	r0, r24
    f49c:	00 0c       	add	r0, r0
    f49e:	99 0b       	sbc	r25, r25
    f4a0:	02 c0       	rjmp	.+4      	; 0xf4a6 <stat+0x90>
    f4a2:	83 e2       	ldi	r24, 0x23	; 35
    f4a4:	90 e0       	ldi	r25, 0x00	; 0
    f4a6:	90 93 54 1c 	sts	0x1C54, r25	; 0x801c54 <errno+0x1>
    f4aa:	80 93 53 1c 	sts	0x1C53, r24	; 0x801c53 <errno>
    f4ae:	8f ef       	ldi	r24, 0xFF	; 255
    f4b0:	9f ef       	ldi	r25, 0xFF	; 255
    f4b2:	38 c0       	rjmp	.+112    	; 0xf524 <stat+0x10e>
    f4b4:	89 81       	ldd	r24, Y+1	; 0x01
    f4b6:	9a 81       	ldd	r25, Y+2	; 0x02
    f4b8:	ab 81       	ldd	r26, Y+3	; 0x03
    f4ba:	bc 81       	ldd	r27, Y+4	; 0x04
    f4bc:	f8 01       	movw	r30, r16
    f4be:	80 8f       	std	Z+24, r24	; 0x18
    f4c0:	91 8f       	std	Z+25, r25	; 0x19
    f4c2:	a2 8f       	std	Z+26, r26	; 0x1a
    f4c4:	b3 8f       	std	Z+27, r27	; 0x1b
    f4c6:	6f 81       	ldd	r22, Y+7	; 0x07
    f4c8:	78 85       	ldd	r23, Y+8	; 0x08
    f4ca:	8d 81       	ldd	r24, Y+5	; 0x05
    f4cc:	9e 81       	ldd	r25, Y+6	; 0x06
    f4ce:	5f df       	rcall	.-322    	; 0xf38e <fat_time_to_unix>
    f4d0:	f8 01       	movw	r30, r16
    f4d2:	64 a3       	std	Z+36, r22	; 0x24
    f4d4:	75 a3       	std	Z+37, r23	; 0x25
    f4d6:	86 a3       	std	Z+38, r24	; 0x26
    f4d8:	97 a3       	std	Z+39, r25	; 0x27
    f4da:	60 a7       	std	Z+40, r22	; 0x28
    f4dc:	71 a7       	std	Z+41, r23	; 0x29
    f4de:	82 a7       	std	Z+42, r24	; 0x2a
    f4e0:	93 a7       	std	Z+43, r25	; 0x2b
    f4e2:	64 a7       	std	Z+44, r22	; 0x2c
    f4e4:	75 a7       	std	Z+45, r23	; 0x2d
    f4e6:	86 a7       	std	Z+46, r24	; 0x2e
    f4e8:	97 a7       	std	Z+47, r25	; 0x2f
    f4ea:	29 85       	ldd	r18, Y+9	; 0x09
    f4ec:	20 fd       	sbrc	r18, 0
    f4ee:	03 c0       	rjmp	.+6      	; 0xf4f6 <stat+0xe0>
    f4f0:	8f ef       	ldi	r24, 0xFF	; 255
    f4f2:	91 e0       	ldi	r25, 0x01	; 1
    f4f4:	02 c0       	rjmp	.+4      	; 0xf4fa <stat+0xe4>
    f4f6:	8d e6       	ldi	r24, 0x6D	; 109
    f4f8:	91 e0       	ldi	r25, 0x01	; 1
    f4fa:	48 ee       	ldi	r20, 0xE8	; 232
    f4fc:	53 e0       	ldi	r21, 0x03	; 3
    f4fe:	f8 01       	movw	r30, r16
    f500:	51 8b       	std	Z+17, r21	; 0x11
    f502:	40 8b       	std	Z+16, r20	; 0x10
    f504:	53 8b       	std	Z+19, r21	; 0x13
    f506:	42 8b       	std	Z+18, r20	; 0x12
    f508:	24 ff       	sbrs	r18, 4
    f50a:	02 c0       	rjmp	.+4      	; 0xf510 <stat+0xfa>
    f50c:	90 64       	ori	r25, 0x40	; 64
    f50e:	01 c0       	rjmp	.+2      	; 0xf512 <stat+0xfc>
    f510:	90 68       	ori	r25, 0x80	; 128
    f512:	a0 e0       	ldi	r26, 0x00	; 0
    f514:	b0 e0       	ldi	r27, 0x00	; 0
    f516:	f8 01       	movw	r30, r16
    f518:	80 87       	std	Z+8, r24	; 0x08
    f51a:	91 87       	std	Z+9, r25	; 0x09
    f51c:	a2 87       	std	Z+10, r26	; 0x0a
    f51e:	b3 87       	std	Z+11, r27	; 0x0b
    f520:	80 e0       	ldi	r24, 0x00	; 0
    f522:	90 e0       	ldi	r25, 0x00	; 0
    f524:	ca 5e       	subi	r28, 0xEA	; 234
    f526:	de 4f       	sbci	r29, 0xFE	; 254
    f528:	e6 e0       	ldi	r30, 0x06	; 6
    f52a:	0c 94 f0 e3 	jmp	0x1c7e0	; 0x1c7e0 <__epilogue_restores__+0x18>

0000f52e <unix_time_to_fat>:
    f52e:	a4 e0       	ldi	r26, 0x04	; 4
    f530:	b0 e0       	ldi	r27, 0x00	; 0
    f532:	ed e9       	ldi	r30, 0x9D	; 157
    f534:	fa e7       	ldi	r31, 0x7A	; 122
    f536:	0c 94 d4 e3 	jmp	0x1c7a8	; 0x1c7a8 <__prologue_saves__+0x18>
    f53a:	69 83       	std	Y+1, r22	; 0x01
    f53c:	7a 83       	std	Y+2, r23	; 0x02
    f53e:	8b 83       	std	Y+3, r24	; 0x03
    f540:	9c 83       	std	Y+4, r25	; 0x04
    f542:	7a 01       	movw	r14, r20
    f544:	89 01       	movw	r16, r18
    f546:	ce 01       	movw	r24, r28
    f548:	01 96       	adiw	r24, 0x01	; 1
    f54a:	0e 94 97 38 	call	0x712e	; 0x712e <gmtime>
    f54e:	fc 01       	movw	r30, r24
    f550:	22 85       	ldd	r18, Z+10	; 0x0a
    f552:	33 85       	ldd	r19, Z+11	; 0x0b
    f554:	20 55       	subi	r18, 0x50	; 80
    f556:	31 09       	sbc	r19, r1
    f558:	c9 01       	movw	r24, r18
    f55a:	98 2f       	mov	r25, r24
    f55c:	88 27       	eor	r24, r24
    f55e:	99 0f       	add	r25, r25
    f560:	20 85       	ldd	r18, Z+8	; 0x08
    f562:	31 85       	ldd	r19, Z+9	; 0x09
    f564:	2f 5f       	subi	r18, 0xFF	; 255
    f566:	3f 4f       	sbci	r19, 0xFF	; 255
    f568:	45 e0       	ldi	r20, 0x05	; 5
    f56a:	22 0f       	add	r18, r18
    f56c:	33 1f       	adc	r19, r19
    f56e:	4a 95       	dec	r20
    f570:	e1 f7       	brne	.-8      	; 0xf56a <unix_time_to_fat+0x3c>
    f572:	28 2b       	or	r18, r24
    f574:	39 2b       	or	r19, r25
    f576:	86 81       	ldd	r24, Z+6	; 0x06
    f578:	97 81       	ldd	r25, Z+7	; 0x07
    f57a:	28 2b       	or	r18, r24
    f57c:	39 2b       	or	r19, r25
    f57e:	d7 01       	movw	r26, r14
    f580:	2d 93       	st	X+, r18
    f582:	3c 93       	st	X, r19
    f584:	84 81       	ldd	r24, Z+4	; 0x04
    f586:	20 e0       	ldi	r18, 0x00	; 0
    f588:	30 e0       	ldi	r19, 0x00	; 0
    f58a:	38 2f       	mov	r19, r24
    f58c:	33 0f       	add	r19, r19
    f58e:	33 0f       	add	r19, r19
    f590:	33 0f       	add	r19, r19
    f592:	82 81       	ldd	r24, Z+2	; 0x02
    f594:	93 81       	ldd	r25, Z+3	; 0x03
    f596:	55 e0       	ldi	r21, 0x05	; 5
    f598:	88 0f       	add	r24, r24
    f59a:	99 1f       	adc	r25, r25
    f59c:	5a 95       	dec	r21
    f59e:	e1 f7       	brne	.-8      	; 0xf598 <unix_time_to_fat+0x6a>
    f5a0:	82 2b       	or	r24, r18
    f5a2:	93 2b       	or	r25, r19
    f5a4:	20 81       	ld	r18, Z
    f5a6:	31 81       	ldd	r19, Z+1	; 0x01
    f5a8:	36 95       	lsr	r19
    f5aa:	27 95       	ror	r18
    f5ac:	82 2b       	or	r24, r18
    f5ae:	93 2b       	or	r25, r19
    f5b0:	f8 01       	movw	r30, r16
    f5b2:	91 83       	std	Z+1, r25	; 0x01
    f5b4:	80 83       	st	Z, r24
    f5b6:	24 96       	adiw	r28, 0x04	; 4
    f5b8:	e6 e0       	ldi	r30, 0x06	; 6
    f5ba:	0c 94 f0 e3 	jmp	0x1c7e0	; 0x1c7e0 <__epilogue_restores__+0x18>

0000f5be <utime>:
    f5be:	aa e1       	ldi	r26, 0x1A	; 26
    f5c0:	b1 e0       	ldi	r27, 0x01	; 1
    f5c2:	e5 ee       	ldi	r30, 0xE5	; 229
    f5c4:	fa e7       	ldi	r31, 0x7A	; 122
    f5c6:	0c 94 d6 e3 	jmp	0x1c7ac	; 0x1c7ac <__prologue_saves__+0x1c>
    f5ca:	8c 01       	movw	r16, r24
    f5cc:	61 15       	cp	r22, r1
    f5ce:	71 05       	cpc	r23, r1
    f5d0:	31 f0       	breq	.+12     	; 0xf5de <utime+0x20>
    f5d2:	fb 01       	movw	r30, r22
    f5d4:	64 81       	ldd	r22, Z+4	; 0x04
    f5d6:	75 81       	ldd	r23, Z+5	; 0x05
    f5d8:	86 81       	ldd	r24, Z+6	; 0x06
    f5da:	97 81       	ldd	r25, Z+7	; 0x07
    f5dc:	04 c0       	rjmp	.+8      	; 0xf5e6 <utime+0x28>
    f5de:	80 e0       	ldi	r24, 0x00	; 0
    f5e0:	90 e0       	ldi	r25, 0x00	; 0
    f5e2:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <time>
    f5e6:	9e 01       	movw	r18, r28
    f5e8:	29 5e       	subi	r18, 0xE9	; 233
    f5ea:	3e 4f       	sbci	r19, 0xFE	; 254
    f5ec:	ae 01       	movw	r20, r28
    f5ee:	47 5e       	subi	r20, 0xE7	; 231
    f5f0:	5e 4f       	sbci	r21, 0xFE	; 254
    f5f2:	9d df       	rcall	.-198    	; 0xf52e <unix_time_to_fat>
    f5f4:	c7 5e       	subi	r28, 0xE7	; 231
    f5f6:	de 4f       	sbci	r29, 0xFE	; 254
    f5f8:	88 81       	ld	r24, Y
    f5fa:	99 81       	ldd	r25, Y+1	; 0x01
    f5fc:	c9 51       	subi	r28, 0x19	; 25
    f5fe:	d1 40       	sbci	r29, 0x01	; 1
    f600:	9e 83       	std	Y+6, r25	; 0x06
    f602:	8d 83       	std	Y+5, r24	; 0x05
    f604:	c9 5e       	subi	r28, 0xE9	; 233
    f606:	de 4f       	sbci	r29, 0xFE	; 254
    f608:	88 81       	ld	r24, Y
    f60a:	99 81       	ldd	r25, Y+1	; 0x01
    f60c:	c7 51       	subi	r28, 0x17	; 23
    f60e:	d1 40       	sbci	r29, 0x01	; 1
    f610:	98 87       	std	Y+8, r25	; 0x08
    f612:	8f 83       	std	Y+7, r24	; 0x07
    f614:	be 01       	movw	r22, r28
    f616:	6f 5f       	subi	r22, 0xFF	; 255
    f618:	7f 4f       	sbci	r23, 0xFF	; 255
    f61a:	c8 01       	movw	r24, r16
    f61c:	0e 94 51 69 	call	0xd2a2	; 0xd2a2 <f_utime>
    f620:	84 31       	cpi	r24, 0x14	; 20
    f622:	91 05       	cpc	r25, r1
    f624:	40 f4       	brcc	.+16     	; 0xf636 <utime+0x78>
    f626:	fc 01       	movw	r30, r24
    f628:	ec 53       	subi	r30, 0x3C	; 60
    f62a:	f5 4f       	sbci	r31, 0xF5	; 245
    f62c:	80 81       	ld	r24, Z
    f62e:	08 2e       	mov	r0, r24
    f630:	00 0c       	add	r0, r0
    f632:	99 0b       	sbc	r25, r25
    f634:	02 c0       	rjmp	.+4      	; 0xf63a <utime+0x7c>
    f636:	83 e2       	ldi	r24, 0x23	; 35
    f638:	90 e0       	ldi	r25, 0x00	; 0
    f63a:	c6 5e       	subi	r28, 0xE6	; 230
    f63c:	de 4f       	sbci	r29, 0xFE	; 254
    f63e:	e4 e0       	ldi	r30, 0x04	; 4
    f640:	0c 94 f2 e3 	jmp	0x1c7e4	; 0x1c7e4 <__epilogue_restores__+0x1c>

0000f644 <fileno_to_fatfs>:
    f644:	83 30       	cpi	r24, 0x03	; 3
    f646:	91 05       	cpc	r25, r1
    f648:	48 f4       	brcc	.+18     	; 0xf65c <fileno_to_fatfs+0x18>
    f64a:	89 e0       	ldi	r24, 0x09	; 9
    f64c:	90 e0       	ldi	r25, 0x00	; 0
    f64e:	90 93 54 1c 	sts	0x1C54, r25	; 0x801c54 <errno+0x1>
    f652:	80 93 53 1c 	sts	0x1C53, r24	; 0x801c53 <errno>
    f656:	80 e0       	ldi	r24, 0x00	; 0
    f658:	90 e0       	ldi	r25, 0x00	; 0
    f65a:	08 95       	ret
    f65c:	6e dc       	rcall	.-1828   	; 0xef3a <fileno_to_stream>
    f65e:	00 97       	sbiw	r24, 0x00	; 0
    f660:	d1 f3       	breq	.-12     	; 0xf656 <fileno_to_fatfs+0x12>
    f662:	fc 01       	movw	r30, r24
    f664:	84 85       	ldd	r24, Z+12	; 0x0c
    f666:	95 85       	ldd	r25, Z+13	; 0x0d
    f668:	00 97       	sbiw	r24, 0x00	; 0
    f66a:	79 f3       	breq	.-34     	; 0xf64a <fileno_to_fatfs+0x6>
    f66c:	08 95       	ret

0000f66e <ftell>:
    f66e:	10 92 54 1c 	sts	0x1C54, r1	; 0x801c54 <errno+0x1>
    f672:	10 92 53 1c 	sts	0x1C53, r1	; 0x801c53 <errno>
    f676:	45 dc       	rcall	.-1910   	; 0xef02 <fileno>
    f678:	83 30       	cpi	r24, 0x03	; 3
    f67a:	91 05       	cpc	r25, r1
    f67c:	48 f0       	brcs	.+18     	; 0xf690 <ftell+0x22>
    f67e:	e2 df       	rcall	.-60     	; 0xf644 <fileno_to_fatfs>
    f680:	00 97       	sbiw	r24, 0x00	; 0
    f682:	51 f4       	brne	.+20     	; 0xf698 <ftell+0x2a>
    f684:	89 e0       	ldi	r24, 0x09	; 9
    f686:	90 e0       	ldi	r25, 0x00	; 0
    f688:	90 93 54 1c 	sts	0x1C54, r25	; 0x801c54 <errno+0x1>
    f68c:	80 93 53 1c 	sts	0x1C53, r24	; 0x801c53 <errno>
    f690:	6f ef       	ldi	r22, 0xFF	; 255
    f692:	7f ef       	ldi	r23, 0xFF	; 255
    f694:	cb 01       	movw	r24, r22
    f696:	08 95       	ret
    f698:	fc 01       	movw	r30, r24
    f69a:	60 89       	ldd	r22, Z+16	; 0x10
    f69c:	71 89       	ldd	r23, Z+17	; 0x11
    f69e:	82 89       	ldd	r24, Z+18	; 0x12
    f6a0:	93 89       	ldd	r25, Z+19	; 0x13
    f6a2:	08 95       	ret

0000f6a4 <lseek>:
    f6a4:	a3 e0       	ldi	r26, 0x03	; 3
    f6a6:	b0 e0       	ldi	r27, 0x00	; 0
    f6a8:	e8 e5       	ldi	r30, 0x58	; 88
    f6aa:	fb e7       	ldi	r31, 0x7B	; 123
    f6ac:	0c 94 d0 e3 	jmp	0x1c7a0	; 0x1c7a0 <__prologue_saves__+0x10>
    f6b0:	5c 01       	movw	r10, r24
    f6b2:	6a 01       	movw	r12, r20
    f6b4:	7b 01       	movw	r14, r22
    f6b6:	89 01       	movw	r16, r18
    f6b8:	10 92 54 1c 	sts	0x1C54, r1	; 0x801c54 <errno+0x1>
    f6bc:	10 92 53 1c 	sts	0x1C53, r1	; 0x801c53 <errno>
    f6c0:	c1 df       	rcall	.-126    	; 0xf644 <fileno_to_fatfs>
    f6c2:	ec 01       	movw	r28, r24
    f6c4:	89 2b       	or	r24, r25
    f6c6:	19 f4       	brne	.+6      	; 0xf6ce <lseek+0x2a>
    f6c8:	88 e1       	ldi	r24, 0x18	; 24
    f6ca:	90 e0       	ldi	r25, 0x00	; 0
    f6cc:	26 c0       	rjmp	.+76     	; 0xf71a <lseek+0x76>
    f6ce:	83 e0       	ldi	r24, 0x03	; 3
    f6d0:	a8 16       	cp	r10, r24
    f6d2:	b1 04       	cpc	r11, r1
    f6d4:	d0 f1       	brcs	.+116    	; 0xf74a <lseek+0xa6>
    f6d6:	c5 01       	movw	r24, r10
    f6d8:	30 dc       	rcall	.-1952   	; 0xef3a <fileno_to_stream>
    f6da:	fc 01       	movw	r30, r24
    f6dc:	93 81       	ldd	r25, Z+3	; 0x03
    f6de:	90 64       	ori	r25, 0x40	; 64
    f6e0:	93 83       	std	Z+3, r25	; 0x03
    f6e2:	02 30       	cpi	r16, 0x02	; 2
    f6e4:	11 05       	cpc	r17, r1
    f6e6:	a9 f5       	brne	.+106    	; 0xf752 <lseek+0xae>
    f6e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    f6ea:	9b 85       	ldd	r25, Y+11	; 0x0b
    f6ec:	ac 85       	ldd	r26, Y+12	; 0x0c
    f6ee:	bd 85       	ldd	r27, Y+13	; 0x0d
    f6f0:	c8 0e       	add	r12, r24
    f6f2:	d9 1e       	adc	r13, r25
    f6f4:	ea 1e       	adc	r14, r26
    f6f6:	fb 1e       	adc	r15, r27
    f6f8:	b7 01       	movw	r22, r14
    f6fa:	a6 01       	movw	r20, r12
    f6fc:	ce 01       	movw	r24, r28
    f6fe:	0e 94 b4 61 	call	0xc368	; 0xc368 <f_lseek>
    f702:	00 97       	sbiw	r24, 0x00	; 0
    f704:	79 f0       	breq	.+30     	; 0xf724 <lseek+0x80>
    f706:	84 31       	cpi	r24, 0x14	; 20
    f708:	91 05       	cpc	r25, r1
    f70a:	58 f5       	brcc	.+86     	; 0xf762 <lseek+0xbe>
    f70c:	fc 01       	movw	r30, r24
    f70e:	ec 53       	subi	r30, 0x3C	; 60
    f710:	f5 4f       	sbci	r31, 0xF5	; 245
    f712:	80 81       	ld	r24, Z
    f714:	08 2e       	mov	r0, r24
    f716:	00 0c       	add	r0, r0
    f718:	99 0b       	sbc	r25, r25
    f71a:	90 93 54 1c 	sts	0x1C54, r25	; 0x801c54 <errno+0x1>
    f71e:	80 93 53 1c 	sts	0x1C53, r24	; 0x801c53 <errno>
    f722:	13 c0       	rjmp	.+38     	; 0xf74a <lseek+0xa6>
    f724:	68 89       	ldd	r22, Y+16	; 0x10
    f726:	79 89       	ldd	r23, Y+17	; 0x11
    f728:	8a 89       	ldd	r24, Y+18	; 0x12
    f72a:	9b 89       	ldd	r25, Y+19	; 0x13
    f72c:	c6 16       	cp	r12, r22
    f72e:	d7 06       	cpc	r13, r23
    f730:	e8 06       	cpc	r14, r24
    f732:	f9 06       	cpc	r15, r25
    f734:	c9 f0       	breq	.+50     	; 0xf768 <lseek+0xc4>
    f736:	84 e3       	ldi	r24, 0x34	; 52
    f738:	9b e0       	ldi	r25, 0x0B	; 11
    f73a:	a0 e0       	ldi	r26, 0x00	; 0
    f73c:	ed b7       	in	r30, 0x3d	; 61
    f73e:	fe b7       	in	r31, 0x3e	; 62
    f740:	81 83       	std	Z+1, r24	; 0x01
    f742:	92 83       	std	Z+2, r25	; 0x02
    f744:	a3 83       	std	Z+3, r26	; 0x03
    f746:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    f74a:	6f ef       	ldi	r22, 0xFF	; 255
    f74c:	7f ef       	ldi	r23, 0xFF	; 255
    f74e:	cb 01       	movw	r24, r22
    f750:	0b c0       	rjmp	.+22     	; 0xf768 <lseek+0xc4>
    f752:	01 30       	cpi	r16, 0x01	; 1
    f754:	11 05       	cpc	r17, r1
    f756:	81 f6       	brne	.-96     	; 0xf6f8 <lseek+0x54>
    f758:	88 89       	ldd	r24, Y+16	; 0x10
    f75a:	99 89       	ldd	r25, Y+17	; 0x11
    f75c:	aa 89       	ldd	r26, Y+18	; 0x12
    f75e:	bb 89       	ldd	r27, Y+19	; 0x13
    f760:	c7 cf       	rjmp	.-114    	; 0xf6f0 <lseek+0x4c>
    f762:	83 e2       	ldi	r24, 0x23	; 35
    f764:	90 e0       	ldi	r25, 0x00	; 0
    f766:	d9 cf       	rjmp	.-78     	; 0xf71a <lseek+0x76>
    f768:	cd b7       	in	r28, 0x3d	; 61
    f76a:	de b7       	in	r29, 0x3e	; 62
    f76c:	23 96       	adiw	r28, 0x03	; 3
    f76e:	ea e0       	ldi	r30, 0x0A	; 10
    f770:	0c 94 ec e3 	jmp	0x1c7d8	; 0x1c7d8 <__epilogue_restores__+0x10>

0000f774 <fseek>:
    f774:	cf 92       	push	r12
    f776:	df 92       	push	r13
    f778:	ef 92       	push	r14
    f77a:	ff 92       	push	r15
    f77c:	cf 93       	push	r28
    f77e:	df 93       	push	r29
    f780:	6a 01       	movw	r12, r20
    f782:	7b 01       	movw	r14, r22
    f784:	e9 01       	movw	r28, r18
    f786:	bd db       	rcall	.-2182   	; 0xef02 <fileno>
    f788:	97 fd       	sbrc	r25, 7
    f78a:	12 c0       	rjmp	.+36     	; 0xf7b0 <fseek+0x3c>
    f78c:	9e 01       	movw	r18, r28
    f78e:	b7 01       	movw	r22, r14
    f790:	a6 01       	movw	r20, r12
    f792:	88 df       	rcall	.-240    	; 0xf6a4 <lseek>
    f794:	21 e0       	ldi	r18, 0x01	; 1
    f796:	30 e0       	ldi	r19, 0x00	; 0
    f798:	6f 3f       	cpi	r22, 0xFF	; 255
    f79a:	7f 4f       	sbci	r23, 0xFF	; 255
    f79c:	8f 4f       	sbci	r24, 0xFF	; 255
    f79e:	9f 4f       	sbci	r25, 0xFF	; 255
    f7a0:	11 f0       	breq	.+4      	; 0xf7a6 <fseek+0x32>
    f7a2:	20 e0       	ldi	r18, 0x00	; 0
    f7a4:	30 e0       	ldi	r19, 0x00	; 0
    f7a6:	88 27       	eor	r24, r24
    f7a8:	99 27       	eor	r25, r25
    f7aa:	82 1b       	sub	r24, r18
    f7ac:	93 0b       	sbc	r25, r19
    f7ae:	02 c0       	rjmp	.+4      	; 0xf7b4 <fseek+0x40>
    f7b0:	8f ef       	ldi	r24, 0xFF	; 255
    f7b2:	9f ef       	ldi	r25, 0xFF	; 255
    f7b4:	df 91       	pop	r29
    f7b6:	cf 91       	pop	r28
    f7b8:	ff 90       	pop	r15
    f7ba:	ef 90       	pop	r14
    f7bc:	df 90       	pop	r13
    f7be:	cf 90       	pop	r12
    f7c0:	08 95       	ret

0000f7c2 <read>:
///
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t read(int fd, const void *buf, size_t count)
{
    f7c2:	a2 e0       	ldi	r26, 0x02	; 2
    f7c4:	b0 e0       	ldi	r27, 0x00	; 0
    f7c6:	e7 ee       	ldi	r30, 0xE7	; 231
    f7c8:	fb e7       	ldi	r31, 0x7B	; 123
    f7ca:	0c 94 d0 e3 	jmp	0x1c7a0	; 0x1c7a0 <__prologue_saves__+0x10>
    f7ce:	5c 01       	movw	r10, r24
    f7d0:	8b 01       	movw	r16, r22
    f7d2:	6a 01       	movw	r12, r20
    int ret;
    FIL *fh;
    FILE *stream;

    //FIXME
    *(char *) buf = 0;
    f7d4:	fb 01       	movw	r30, r22
    f7d6:	10 82       	st	Z, r1

    errno = 0;
    f7d8:	10 92 54 1c 	sts	0x1C54, r1	; 0x801c54 <errno+0x1>
    f7dc:	10 92 53 1c 	sts	0x1C53, r1	; 0x801c53 <errno>

    // TTY read function
    // FIXME should we really be blocking ???
    stream = fileno_to_stream(fd);
    f7e0:	ac db       	rcall	.-2216   	; 0xef3a <fileno_to_stream>
    if(stream == stdin)
    f7e2:	7c 01       	movw	r14, r24
    f7e4:	80 91 55 1c 	lds	r24, 0x1C55	; 0x801c55 <__iob>
    f7e8:	90 91 56 1c 	lds	r25, 0x1C56	; 0x801c56 <__iob+0x1>
    f7ec:	e8 16       	cp	r14, r24
    f7ee:	f9 06       	cpc	r15, r25
    {
        char *ptr = (char *) buf;
        // ungetc is undefined for read
        stream->flags |= __SUNGET;
    f7f0:	c9 f4       	brne	.+50     	; 0xf824 <read+0x62>
    f7f2:	f7 01       	movw	r30, r14
    f7f4:	83 81       	ldd	r24, Z+3	; 0x03
    f7f6:	80 64       	ori	r24, 0x40	; 64
        size = 0;
    f7f8:	83 83       	std	Z+3, r24	; 0x03
    f7fa:	1a 82       	std	Y+2, r1	; 0x02
    f7fc:	19 82       	std	Y+1, r1	; 0x01
    f7fe:	c0 0e       	add	r12, r16
        while(count--)
    f800:	d1 1e       	adc	r13, r17
    f802:	0c 15       	cp	r16, r12
    f804:	1d 05       	cpc	r17, r13
        {
            ret = fgetc(stream);
    f806:	09 f4       	brne	.+2      	; 0xf80a <read+0x48>
    f808:	3d c0       	rjmp	.+122    	; 0xf884 <read+0xc2>
            if(ret < 0)
    f80a:	c7 01       	movw	r24, r14
    f80c:	56 da       	rcall	.-2900   	; 0xecba <fgetc>
                break;
            
            *ptr++ = ret;
    f80e:	97 fd       	sbrc	r25, 7
    f810:	39 c0       	rjmp	.+114    	; 0xf884 <read+0xc2>
    f812:	f8 01       	movw	r30, r16
            ++size;
    f814:	81 93       	st	Z+, r24
    f816:	8f 01       	movw	r16, r30
    f818:	89 81       	ldd	r24, Y+1	; 0x01
    f81a:	9a 81       	ldd	r25, Y+2	; 0x02
    f81c:	01 96       	adiw	r24, 0x01	; 1
    f81e:	9a 83       	std	Y+2, r25	; 0x02
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    f820:	89 83       	std	Y+1, r24	; 0x01
    f822:	ef cf       	rjmp	.-34     	; 0xf802 <read+0x40>
    f824:	80 91 57 1c 	lds	r24, 0x1C57	; 0x801c57 <__iob+0x2>
    f828:	90 91 58 1c 	lds	r25, 0x1C58	; 0x801c58 <__iob+0x3>
    f82c:	e8 16       	cp	r14, r24
    f82e:	f9 06       	cpc	r15, r25
    f830:	71 f1       	breq	.+92     	; 0xf88e <read+0xcc>
    f832:	80 91 59 1c 	lds	r24, 0x1C59	; 0x801c59 <__iob+0x4>
    f836:	90 91 5a 1c 	lds	r25, 0x1C5A	; 0x801c5a <__iob+0x5>
    {
        return(-1);
    }

    // fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f83a:	e8 16       	cp	r14, r24
    f83c:	f9 06       	cpc	r15, r25
    f83e:	39 f1       	breq	.+78     	; 0xf88e <read+0xcc>
    if ( fh == NULL )
    f840:	c5 01       	movw	r24, r10
    f842:	00 df       	rcall	.-512    	; 0xf644 <fileno_to_fatfs>
    {
        errno = EBADF;
    f844:	00 97       	sbiw	r24, 0x00	; 0
    f846:	19 f4       	brne	.+6      	; 0xf84e <read+0x8c>
    f848:	89 e0       	ldi	r24, 0x09	; 9
        return(-1);
    }

    res = f_read(fh, (void *) buf, bytes, &size);
    f84a:	90 e0       	ldi	r25, 0x00	; 0
    f84c:	16 c0       	rjmp	.+44     	; 0xf87a <read+0xb8>
    f84e:	9e 01       	movw	r18, r28
    f850:	2f 5f       	subi	r18, 0xFF	; 255
    f852:	3f 4f       	sbci	r19, 0xFF	; 255
    f854:	a6 01       	movw	r20, r12
    f856:	b8 01       	movw	r22, r16
    if(res != FR_OK)
    f858:	0e 94 a8 5c 	call	0xb950	; 0xb950 <f_read>
    f85c:	00 97       	sbiw	r24, 0x00	; 0
    f85e:	91 f0       	breq	.+36     	; 0xf884 <read+0xc2>
    f860:	84 31       	cpi	r24, 0x14	; 20
    f862:	91 05       	cpc	r25, r1
    f864:	40 f4       	brcc	.+16     	; 0xf876 <read+0xb4>
    f866:	fc 01       	movw	r30, r24
    f868:	ec 53       	subi	r30, 0x3C	; 60
    f86a:	f5 4f       	sbci	r31, 0xF5	; 245
    f86c:	80 81       	ld	r24, Z
    f86e:	08 2e       	mov	r0, r24
    f870:	00 0c       	add	r0, r0
    f872:	99 0b       	sbc	r25, r25
    f874:	02 c0       	rjmp	.+4      	; 0xf87a <read+0xb8>
    {
        errno = fatfs_to_errno(res);
    f876:	83 e2       	ldi	r24, 0x23	; 35
    f878:	90 e0       	ldi	r25, 0x00	; 0
    f87a:	90 93 54 1c 	sts	0x1C54, r25	; 0x801c54 <errno+0x1>
    f87e:	80 93 53 1c 	sts	0x1C53, r24	; 0x801c53 <errno>
        return(-1);
    }
    return ((ssize_t) size);
    f882:	05 c0       	rjmp	.+10     	; 0xf88e <read+0xcc>
    f884:	69 81       	ldd	r22, Y+1	; 0x01
    f886:	7a 81       	ldd	r23, Y+2	; 0x02
    f888:	80 e0       	ldi	r24, 0x00	; 0
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    {
        return(-1);
    f88a:	90 e0       	ldi	r25, 0x00	; 0
    f88c:	03 c0       	rjmp	.+6      	; 0xf894 <read+0xd2>
    f88e:	6f ef       	ldi	r22, 0xFF	; 255
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    f890:	7f ef       	ldi	r23, 0xFF	; 255
    f892:	cb 01       	movw	r24, r22
    f894:	22 96       	adiw	r28, 0x02	; 2
    f896:	ea e0       	ldi	r30, 0x0A	; 10
    f898:	0c 94 ec e3 	jmp	0x1c7d8	; 0x1c7d8 <__epilogue_restores__+0x10>

0000f89c <fread>:
///
/// @return count on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    f89c:	0f 93       	push	r16
    f89e:	1f 93       	push	r17
    f8a0:	cf 93       	push	r28
    f8a2:	df 93       	push	r29
    f8a4:	ec 01       	movw	r28, r24
    f8a6:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    f8a8:	64 9f       	mul	r22, r20
    f8aa:	80 01       	movw	r16, r0
    f8ac:	65 9f       	mul	r22, r21
    f8ae:	10 0d       	add	r17, r0
    f8b0:	74 9f       	mul	r23, r20
    f8b2:	10 0d       	add	r17, r0
    int fn = fileno(stream);
    f8b4:	11 24       	eor	r1, r1
    ssize_t ret;

    // read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    f8b6:	25 db       	rcall	.-2486   	; 0xef02 <fileno>
    f8b8:	a8 01       	movw	r20, r16
    f8ba:	be 01       	movw	r22, r28
    if(ret < 0)
    f8bc:	82 df       	rcall	.-252    	; 0xf7c2 <read>
    f8be:	97 fd       	sbrc	r25, 7
        return(0);

    return((size_t) ret);
    f8c0:	02 c0       	rjmp	.+4      	; 0xf8c6 <fread+0x2a>
    f8c2:	cb 01       	movw	r24, r22
    ssize_t ret;

    // read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    if(ret < 0)
        return(0);
    f8c4:	02 c0       	rjmp	.+4      	; 0xf8ca <fread+0x2e>
    f8c6:	80 e0       	ldi	r24, 0x00	; 0

    return((size_t) ret);
}
    f8c8:	90 e0       	ldi	r25, 0x00	; 0
    f8ca:	df 91       	pop	r29
    f8cc:	cf 91       	pop	r28
    f8ce:	1f 91       	pop	r17
    f8d0:	0f 91       	pop	r16
    f8d2:	08 95       	ret

0000f8d4 <syncfs>:
/// @param[in] fd: POSIX fileno to sync.
/// @return 0.
/// @return -1 on error witrh errno set.
MEMSPACE
int syncfs(int fd)
{
    f8d4:	cf 93       	push	r28
    f8d6:	df 93       	push	r29
    FIL *fh;
    FRESULT res;
    FILE *stream;

    errno = 0;
    f8d8:	10 92 54 1c 	sts	0x1C54, r1	; 0x801c54 <errno+0x1>
    f8dc:	10 92 53 1c 	sts	0x1C53, r1	; 0x801c53 <errno>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f8e0:	83 30       	cpi	r24, 0x03	; 3
    f8e2:	91 05       	cpc	r25, r1
    f8e4:	18 f4       	brcc	.+6      	; 0xf8ec <syncfs+0x18>

    // fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    if(fh == NULL)
    {
        errno = EBADF;
    f8e6:	89 e0       	ldi	r24, 0x09	; 9
    f8e8:	90 e0       	ldi	r25, 0x00	; 0
    f8ea:	18 c0       	rjmp	.+48     	; 0xf91c <syncfs+0x48>
    if(isatty(fd))
    {
        errno = EBADF;
        return(-1);
    }
    stream = fileno_to_stream(fd);
    f8ec:	ec 01       	movw	r28, r24
    f8ee:	25 db       	rcall	.-2486   	; 0xef3a <fileno_to_stream>
    // reset unget on sync
    stream->flags |= __SUNGET;
    f8f0:	fc 01       	movw	r30, r24
    f8f2:	93 81       	ldd	r25, Z+3	; 0x03

    // fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f8f4:	90 64       	ori	r25, 0x40	; 64
    f8f6:	93 83       	std	Z+3, r25	; 0x03
    if(fh == NULL)
    f8f8:	ce 01       	movw	r24, r28
    f8fa:	a4 de       	rcall	.-696    	; 0xf644 <fileno_to_fatfs>
    {
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    f8fc:	00 97       	sbiw	r24, 0x00	; 0
    f8fe:	99 f3       	breq	.-26     	; 0xf8e6 <syncfs+0x12>
    if (res != FR_OK)
    f900:	0e 94 8a 5f 	call	0xbf14	; 0xbf14 <f_sync>
    f904:	00 97       	sbiw	r24, 0x00	; 0
    f906:	a1 f0       	breq	.+40     	; 0xf930 <syncfs+0x5c>
    f908:	84 31       	cpi	r24, 0x14	; 20
    f90a:	91 05       	cpc	r25, r1
    f90c:	70 f4       	brcc	.+28     	; 0xf92a <syncfs+0x56>
    f90e:	fc 01       	movw	r30, r24
    f910:	ec 53       	subi	r30, 0x3C	; 60
    f912:	f5 4f       	sbci	r31, 0xF5	; 245
    f914:	80 81       	ld	r24, Z
    f916:	08 2e       	mov	r0, r24
    {
        errno = fatfs_to_errno(res);
    f918:	00 0c       	add	r0, r0
    f91a:	99 0b       	sbc	r25, r25
    f91c:	90 93 54 1c 	sts	0x1C54, r25	; 0x801c54 <errno+0x1>
        return(-1);
    f920:	80 93 53 1c 	sts	0x1C53, r24	; 0x801c53 <errno>
    f924:	8f ef       	ldi	r24, 0xFF	; 255
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    if (res != FR_OK)
    f926:	9f ef       	ldi	r25, 0xFF	; 255
    f928:	05 c0       	rjmp	.+10     	; 0xf934 <syncfs+0x60>
    f92a:	83 e2       	ldi	r24, 0x23	; 35
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return(0);
    f92c:	90 e0       	ldi	r25, 0x00	; 0
    f92e:	f6 cf       	rjmp	.-20     	; 0xf91c <syncfs+0x48>
}
    f930:	80 e0       	ldi	r24, 0x00	; 0
    f932:	90 e0       	ldi	r25, 0x00	; 0
    f934:	df 91       	pop	r29
    f936:	cf 91       	pop	r28
    f938:	08 95       	ret

0000f93a <sync>:
/// - man page sync (2).
///
/// @return  void.
MEMSPACE
void sync(void)
{
    f93a:	cf 93       	push	r28
    f93c:	df 93       	push	r29
    FIL *fh;
    int i;

    for(i=0;i<MAX_FILES;++i)
    f93e:	c0 e0       	ldi	r28, 0x00	; 0
    f940:	d0 e0       	ldi	r29, 0x00	; 0
    f942:	21 96       	adiw	r28, 0x01	; 1
    f944:	c0 31       	cpi	r28, 0x10	; 16
    f946:	d1 05       	cpc	r29, r1
    f948:	51 f0       	breq	.+20     	; 0xf95e <sync+0x24>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f94a:	c3 30       	cpi	r28, 0x03	; 3
    f94c:	d1 05       	cpc	r29, r1
    f94e:	cc f3       	brlt	.-14     	; 0xf942 <sync+0x8>
    {
        if(isatty(i))
            continue;

        // fileno_to_fatfs checks for i out of bounds
        fh = fileno_to_fatfs(i);
    f950:	ce 01       	movw	r24, r28
    f952:	78 de       	rcall	.-784    	; 0xf644 <fileno_to_fatfs>
        if(fh == NULL)
    f954:	89 2b       	or	r24, r25
            continue;

        (void ) syncfs(i);
    f956:	a9 f3       	breq	.-22     	; 0xf942 <sync+0x8>
    f958:	ce 01       	movw	r24, r28
    f95a:	bc df       	rcall	.-136    	; 0xf8d4 <syncfs>
    }
}
    f95c:	f2 cf       	rjmp	.-28     	; 0xf942 <sync+0x8>
    f95e:	df 91       	pop	r29
    f960:	cf 91       	pop	r28
    f962:	08 95       	ret

0000f964 <write>:
/// @param[in] count: number of bytes to write.
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t write(int fd, const void *buf, size_t count)
{
    f964:	a2 e0       	ldi	r26, 0x02	; 2
    f966:	b0 e0       	ldi	r27, 0x00	; 0
    f968:	e8 eb       	ldi	r30, 0xB8	; 184
    f96a:	fc e7       	ldi	r31, 0x7C	; 124
    f96c:	0c 94 ce e3 	jmp	0x1c79c	; 0x1c79c <__prologue_saves__+0xc>
    f970:	8c 01       	movw	r16, r24
    f972:	b6 2e       	mov	r11, r22
    f974:	f7 2e       	mov	r15, r23
    f976:	4a 01       	movw	r8, r20
    UINT size;
    UINT bytes = count;
    FRESULT res;
    FIL *fh;
    FILE *stream;
    errno = 0;
    f978:	10 92 54 1c 	sts	0x1C54, r1	; 0x801c54 <errno+0x1>
    f97c:	10 92 53 1c 	sts	0x1C53, r1	; 0x801c53 <errno>

    // TTY read function
    stream = fileno_to_stream(fd);
    f980:	dc da       	rcall	.-2632   	; 0xef3a <fileno_to_stream>
    if(stream == stdout || stream == stderr)
    f982:	6c 01       	movw	r12, r24
    f984:	80 91 57 1c 	lds	r24, 0x1C57	; 0x801c57 <__iob+0x2>
    f988:	90 91 58 1c 	lds	r25, 0x1C58	; 0x801c58 <__iob+0x3>
    f98c:	c8 16       	cp	r12, r24
    f98e:	d9 06       	cpc	r13, r25
    f990:	39 f0       	breq	.+14     	; 0xf9a0 <write+0x3c>
    f992:	80 91 59 1c 	lds	r24, 0x1C59	; 0x801c59 <__iob+0x4>
    f996:	90 91 5a 1c 	lds	r25, 0x1C5A	; 0x801c5a <__iob+0x5>
    f99a:	c8 16       	cp	r12, r24
    f99c:	d9 06       	cpc	r13, r25
    {
        char *ptr = (char *) buf;   
        size = 0;
    f99e:	d1 f4       	brne	.+52     	; 0xf9d4 <write+0x70>
    f9a0:	1a 82       	std	Y+2, r1	; 0x02
    f9a2:	19 82       	std	Y+1, r1	; 0x01
    f9a4:	0b 2d       	mov	r16, r11
    f9a6:	1f 2d       	mov	r17, r15
    f9a8:	78 01       	movw	r14, r16
    f9aa:	e8 0c       	add	r14, r8
        while(count--)
    f9ac:	f9 1c       	adc	r15, r9
    f9ae:	0e 15       	cp	r16, r14
    f9b0:	1f 05       	cpc	r17, r15
        {
            int c,ret;
            c = *ptr++;
    f9b2:	d1 f1       	breq	.+116    	; 0xfa28 <write+0xc4>
    f9b4:	f8 01       	movw	r30, r16
    f9b6:	a1 90       	ld	r10, Z+
    f9b8:	8f 01       	movw	r16, r30
            ret = fputc(c, stream);
    f9ba:	b1 2c       	mov	r11, r1
    f9bc:	b6 01       	movw	r22, r12
    f9be:	c5 01       	movw	r24, r10
            if(c != ret)
    f9c0:	d2 d9       	rcall	.-3164   	; 0xed66 <fputc>
    f9c2:	a8 16       	cp	r10, r24
    f9c4:	b9 06       	cpc	r11, r25
                break;

            ++size;
    f9c6:	81 f5       	brne	.+96     	; 0xfa28 <write+0xc4>
    f9c8:	89 81       	ldd	r24, Y+1	; 0x01
    f9ca:	9a 81       	ldd	r25, Y+2	; 0x02
    f9cc:	01 96       	adiw	r24, 0x01	; 1
    f9ce:	9a 83       	std	Y+2, r25	; 0x02
    f9d0:	89 83       	std	Y+1, r24	; 0x01
        }
        return(size);
    }
    if(stream == stdin)
    f9d2:	ed cf       	rjmp	.-38     	; 0xf9ae <write+0x4a>
    f9d4:	80 91 55 1c 	lds	r24, 0x1C55	; 0x801c55 <__iob>
    f9d8:	90 91 56 1c 	lds	r25, 0x1C56	; 0x801c56 <__iob+0x1>
    f9dc:	c8 16       	cp	r12, r24
    {
        return(-1);
    }

    // fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f9de:	d9 06       	cpc	r13, r25
    f9e0:	41 f1       	breq	.+80     	; 0xfa32 <write+0xce>
    f9e2:	c8 01       	movw	r24, r16
    if ( fh == NULL )
    f9e4:	2f de       	rcall	.-930    	; 0xf644 <fileno_to_fatfs>
    f9e6:	00 97       	sbiw	r24, 0x00	; 0
    {
        errno = EBADF;
    f9e8:	19 f4       	brne	.+6      	; 0xf9f0 <write+0x8c>
    f9ea:	89 e0       	ldi	r24, 0x09	; 9
    f9ec:	90 e0       	ldi	r25, 0x00	; 0
        return(-1);
    }

    res = f_write(fh, buf, bytes, &size);
    f9ee:	17 c0       	rjmp	.+46     	; 0xfa1e <write+0xba>
    f9f0:	9e 01       	movw	r18, r28
    f9f2:	2f 5f       	subi	r18, 0xFF	; 255
    f9f4:	3f 4f       	sbci	r19, 0xFF	; 255
    f9f6:	a4 01       	movw	r20, r8
    f9f8:	6b 2d       	mov	r22, r11
    f9fa:	7f 2d       	mov	r23, r15
    f9fc:	0e 94 f3 5d 	call	0xbbe6	; 0xbbe6 <f_write>
    if(res != FR_OK)
    fa00:	00 97       	sbiw	r24, 0x00	; 0
    fa02:	91 f0       	breq	.+36     	; 0xfa28 <write+0xc4>
    fa04:	84 31       	cpi	r24, 0x14	; 20
    fa06:	91 05       	cpc	r25, r1
    fa08:	40 f4       	brcc	.+16     	; 0xfa1a <write+0xb6>
    fa0a:	fc 01       	movw	r30, r24
    fa0c:	ec 53       	subi	r30, 0x3C	; 60
    fa0e:	f5 4f       	sbci	r31, 0xF5	; 245
    fa10:	80 81       	ld	r24, Z
    fa12:	08 2e       	mov	r0, r24
    fa14:	00 0c       	add	r0, r0
    fa16:	99 0b       	sbc	r25, r25
    fa18:	02 c0       	rjmp	.+4      	; 0xfa1e <write+0xba>
    fa1a:	83 e2       	ldi	r24, 0x23	; 35
    {
        errno = fatfs_to_errno(res);
    fa1c:	90 e0       	ldi	r25, 0x00	; 0
    fa1e:	90 93 54 1c 	sts	0x1C54, r25	; 0x801c54 <errno+0x1>
    fa22:	80 93 53 1c 	sts	0x1C53, r24	; 0x801c53 <errno>
        return(-1);
    }
    return ((ssize_t) size);
    fa26:	05 c0       	rjmp	.+10     	; 0xfa32 <write+0xce>
    fa28:	69 81       	ldd	r22, Y+1	; 0x01
    fa2a:	7a 81       	ldd	r23, Y+2	; 0x02
    fa2c:	80 e0       	ldi	r24, 0x00	; 0
    fa2e:	90 e0       	ldi	r25, 0x00	; 0
        }
        return(size);
    }
    if(stream == stdin)
    {
        return(-1);
    fa30:	03 c0       	rjmp	.+6      	; 0xfa38 <write+0xd4>
    fa32:	6f ef       	ldi	r22, 0xFF	; 255
    fa34:	7f ef       	ldi	r23, 0xFF	; 255
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    fa36:	cb 01       	movw	r24, r22
    fa38:	22 96       	adiw	r28, 0x02	; 2
    fa3a:	ec e0       	ldi	r30, 0x0C	; 12
    fa3c:	0c 94 ea e3 	jmp	0x1c7d4	; 0x1c7d4 <__epilogue_restores__+0xc>

0000fa40 <fwrite>:
///
/// @return count written on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    fa40:	0f 93       	push	r16
    fa42:	1f 93       	push	r17
    fa44:	cf 93       	push	r28
    fa46:	df 93       	push	r29
    fa48:	ec 01       	movw	r28, r24
    fa4a:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    fa4c:	64 9f       	mul	r22, r20
    fa4e:	80 01       	movw	r16, r0
    fa50:	65 9f       	mul	r22, r21
    fa52:	10 0d       	add	r17, r0
    fa54:	74 9f       	mul	r23, r20
    fa56:	10 0d       	add	r17, r0
    int fn = fileno(stream);
    fa58:	11 24       	eor	r1, r1
    ssize_t ret;
    
    // write () checks for fn out of bounds
    ret =  write(fn, ptr, count);
    fa5a:	53 da       	rcall	.-2906   	; 0xef02 <fileno>
    fa5c:	a8 01       	movw	r20, r16
    fa5e:	be 01       	movw	r22, r28

    if(ret < 0)
    fa60:	81 df       	rcall	.-254    	; 0xf964 <write>
    fa62:	97 fd       	sbrc	r25, 7
        return(0);

    return((size_t) ret);
    fa64:	02 c0       	rjmp	.+4      	; 0xfa6a <fwrite+0x2a>
    fa66:	cb 01       	movw	r24, r22
    
    // write () checks for fn out of bounds
    ret =  write(fn, ptr, count);

    if(ret < 0)
        return(0);
    fa68:	02 c0       	rjmp	.+4      	; 0xfa6e <fwrite+0x2e>
    fa6a:	80 e0       	ldi	r24, 0x00	; 0

    return((size_t) ret);
}
    fa6c:	90 e0       	ldi	r25, 0x00	; 0
    fa6e:	df 91       	pop	r29
    fa70:	cf 91       	pop	r28
    fa72:	1f 91       	pop	r17
    fa74:	0f 91       	pop	r16
    fa76:	08 95       	ret

0000fa78 <free_file_descriptor>:
///
/// @return fileno on success.
/// @return -1 on failure.
MEMSPACE
int free_file_descriptor(int fileno)
{
    fa78:	0f 93       	push	r16
    fa7a:	1f 93       	push	r17
    fa7c:	cf 93       	push	r28
    fa7e:	df 93       	push	r29
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    fa80:	83 30       	cpi	r24, 0x03	; 3
    fa82:	91 05       	cpc	r25, r1
    fa84:	48 f4       	brcc	.+18     	; 0xfa98 <free_file_descriptor+0x20>
    FILE *stream;
    FIL *fh;

    if(isatty( fileno ))
    {
        errno = EBADF;
    fa86:	89 e0       	ldi	r24, 0x09	; 9
    fa88:	90 e0       	ldi	r25, 0x00	; 0
    fa8a:	90 93 54 1c 	sts	0x1C54, r25	; 0x801c54 <errno+0x1>
    fa8e:	80 93 53 1c 	sts	0x1C53, r24	; 0x801c53 <errno>
        return(-1);
    fa92:	8f ef       	ldi	r24, 0xFF	; 255
    fa94:	9f ef       	ldi	r25, 0xFF	; 255
    fa96:	20 c0       	rjmp	.+64     	; 0xfad8 <free_file_descriptor+0x60>
    }

    // checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    fa98:	ec 01       	movw	r28, r24
    fa9a:	4f da       	rcall	.-2914   	; 0xef3a <fileno_to_stream>
    if(stream == NULL)
    fa9c:	8c 01       	movw	r16, r24
    fa9e:	89 2b       	or	r24, r25
    {
        return(-1);
    }

    fh = fdev_get_udata(stream);
    faa0:	c1 f3       	breq	.-16     	; 0xfa92 <free_file_descriptor+0x1a>
    faa2:	f8 01       	movw	r30, r16
    faa4:	84 85       	ldd	r24, Z+12	; 0x0c

    if(fh != NULL)
    faa6:	95 85       	ldd	r25, Z+13	; 0x0d
    faa8:	00 97       	sbiw	r24, 0x00	; 0
    {
        safefree(fh);
    faaa:	11 f0       	breq	.+4      	; 0xfab0 <free_file_descriptor+0x38>
    faac:	0e 94 95 29 	call	0x532a	; 0x532a <safefree>
    }

    if(stream->buf != NULL && stream->flags & __SMALLOC)
    fab0:	f8 01       	movw	r30, r16
    fab2:	80 81       	ld	r24, Z
    fab4:	91 81       	ldd	r25, Z+1	; 0x01
    fab6:	00 97       	sbiw	r24, 0x00	; 0
    fab8:	21 f0       	breq	.+8      	; 0xfac2 <free_file_descriptor+0x4a>
    faba:	23 81       	ldd	r18, Z+3	; 0x03
    {
        safefree(stream->buf);
    fabc:	27 fd       	sbrc	r18, 7
    fabe:	0e 94 95 29 	call	0x532a	; 0x532a <safefree>
    }

    __iob[fileno]  = NULL;
    fac2:	fe 01       	movw	r30, r28
    fac4:	ee 0f       	add	r30, r30
    fac6:	ff 1f       	adc	r31, r31
    fac8:	eb 5a       	subi	r30, 0xAB	; 171
    faca:	f3 4e       	sbci	r31, 0xE3	; 227
    facc:	11 82       	std	Z+1, r1	; 0x01
    safefree(stream);
    face:	10 82       	st	Z, r1
    fad0:	c8 01       	movw	r24, r16
    fad2:	0e 94 95 29 	call	0x532a	; 0x532a <safefree>
    return(fileno);
}
    fad6:	ce 01       	movw	r24, r28
    fad8:	df 91       	pop	r29
    fada:	cf 91       	pop	r28
    fadc:	1f 91       	pop	r17
    fade:	0f 91       	pop	r16
    fae0:	08 95       	ret

0000fae2 <close>:
///
/// @return 0 on sucess.
/// @return -1 on error with errno set.
MEMSPACE
int close(int fileno)
{
    fae2:	0f 93       	push	r16
    fae4:	1f 93       	push	r17
    fae6:	cf 93       	push	r28
    fae8:	df 93       	push	r29
    faea:	8c 01       	movw	r16, r24
    FILE *stream;
    FIL *fh;
    int res;

    errno = 0;
    faec:	10 92 54 1c 	sts	0x1C54, r1	; 0x801c54 <errno+0x1>
    faf0:	10 92 53 1c 	sts	0x1C53, r1	; 0x801c53 <errno>

    // checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    if(stream == NULL)
    faf4:	22 da       	rcall	.-3004   	; 0xef3a <fileno_to_stream>
    {
        return(-1);
    }

    // fileno_to_fatfs checks for fileno out of bounds
    fh = fileno_to_fatfs(fileno);
    faf6:	89 2b       	or	r24, r25
    faf8:	d9 f0       	breq	.+54     	; 0xfb30 <close+0x4e>
    if(fh == NULL)
    fafa:	c8 01       	movw	r24, r16
    fafc:	a3 dd       	rcall	.-1210   	; 0xf644 <fileno_to_fatfs>
    {
        return(-1);
    }
    res = f_close(fh);
    fafe:	00 97       	sbiw	r24, 0x00	; 0
    fb00:	b9 f0       	breq	.+46     	; 0xfb30 <close+0x4e>
    free_file_descriptor(fileno);
    fb02:	0e 94 0a 60 	call	0xc014	; 0xc014 <f_close>
    fb06:	ec 01       	movw	r28, r24
    if (res != FR_OK)
    fb08:	c8 01       	movw	r24, r16
    fb0a:	b6 df       	rcall	.-148    	; 0xfa78 <free_file_descriptor>
    fb0c:	20 97       	sbiw	r28, 0x00	; 0
    fb0e:	99 f0       	breq	.+38     	; 0xfb36 <close+0x54>
    fb10:	c4 31       	cpi	r28, 0x14	; 20
    fb12:	d1 05       	cpc	r29, r1
    fb14:	38 f4       	brcc	.+14     	; 0xfb24 <close+0x42>
    fb16:	cc 53       	subi	r28, 0x3C	; 60
    fb18:	d5 4f       	sbci	r29, 0xF5	; 245
    fb1a:	88 81       	ld	r24, Y
    fb1c:	08 2e       	mov	r0, r24
    fb1e:	00 0c       	add	r0, r0
    fb20:	99 0b       	sbc	r25, r25
    fb22:	02 c0       	rjmp	.+4      	; 0xfb28 <close+0x46>
    {
        errno = fatfs_to_errno(res);
    fb24:	83 e2       	ldi	r24, 0x23	; 35
    fb26:	90 e0       	ldi	r25, 0x00	; 0
    fb28:	90 93 54 1c 	sts	0x1C54, r25	; 0x801c54 <errno+0x1>
        return(-1);
    fb2c:	80 93 53 1c 	sts	0x1C53, r24	; 0x801c53 <errno>
    fb30:	8f ef       	ldi	r24, 0xFF	; 255
    }
    return(0);
    fb32:	9f ef       	ldi	r25, 0xFF	; 255
    fb34:	02 c0       	rjmp	.+4      	; 0xfb3a <close+0x58>
}
    fb36:	80 e0       	ldi	r24, 0x00	; 0
    fb38:	90 e0       	ldi	r25, 0x00	; 0
    fb3a:	df 91       	pop	r29
    fb3c:	cf 91       	pop	r28
    fb3e:	1f 91       	pop	r17
    fb40:	0f 91       	pop	r16
    fb42:	08 95       	ret

0000fb44 <fclose>:
    fb44:	de d9       	rcall	.-3140   	; 0xef02 <fileno>
    fb46:	97 fd       	sbrc	r25, 7
    fb48:	02 c0       	rjmp	.+4      	; 0xfb4e <fclose+0xa>
    fb4a:	cb cf       	rjmp	.-106    	; 0xfae2 <close>
    fb4c:	08 95       	ret
    fb4e:	8f ef       	ldi	r24, 0xFF	; 255
    fb50:	9f ef       	ldi	r25, 0xFF	; 255
    fb52:	08 95       	ret

0000fb54 <new_file_descriptor>:
    fb54:	0f 93       	push	r16
    fb56:	1f 93       	push	r17
    fb58:	cf 93       	push	r28
    fb5a:	df 93       	push	r29
    fb5c:	e5 e5       	ldi	r30, 0x55	; 85
    fb5e:	fc e1       	ldi	r31, 0x1C	; 28
    fb60:	c0 e0       	ldi	r28, 0x00	; 0
    fb62:	d0 e0       	ldi	r29, 0x00	; 0
    fb64:	21 96       	adiw	r28, 0x01	; 1
    fb66:	c0 31       	cpi	r28, 0x10	; 16
    fb68:	d1 05       	cpc	r29, r1
    fb6a:	49 f0       	breq	.+18     	; 0xfb7e <new_file_descriptor+0x2a>
    fb6c:	c3 30       	cpi	r28, 0x03	; 3
    fb6e:	d1 05       	cpc	r29, r1
    fb70:	24 f0       	brlt	.+8      	; 0xfb7a <new_file_descriptor+0x26>
    fb72:	82 81       	ldd	r24, Z+2	; 0x02
    fb74:	93 81       	ldd	r25, Z+3	; 0x03
    fb76:	89 2b       	or	r24, r25
    fb78:	59 f0       	breq	.+22     	; 0xfb90 <new_file_descriptor+0x3c>
    fb7a:	32 96       	adiw	r30, 0x02	; 2
    fb7c:	f3 cf       	rjmp	.-26     	; 0xfb64 <new_file_descriptor+0x10>
    fb7e:	87 e1       	ldi	r24, 0x17	; 23
    fb80:	90 e0       	ldi	r25, 0x00	; 0
    fb82:	90 93 54 1c 	sts	0x1C54, r25	; 0x801c54 <errno+0x1>
    fb86:	80 93 53 1c 	sts	0x1C53, r24	; 0x801c53 <errno>
    fb8a:	8f ef       	ldi	r24, 0xFF	; 255
    fb8c:	9f ef       	ldi	r25, 0xFF	; 255
    fb8e:	22 c0       	rjmp	.+68     	; 0xfbd4 <new_file_descriptor+0x80>
    fb90:	61 e0       	ldi	r22, 0x01	; 1
    fb92:	70 e0       	ldi	r23, 0x00	; 0
    fb94:	8e e0       	ldi	r24, 0x0E	; 14
    fb96:	90 e0       	ldi	r25, 0x00	; 0
    fb98:	0e 94 49 29 	call	0x5292	; 0x5292 <safecalloc>
    fb9c:	8c 01       	movw	r16, r24
    fb9e:	89 2b       	or	r24, r25
    fba0:	59 f0       	breq	.+22     	; 0xfbb8 <new_file_descriptor+0x64>
    fba2:	61 e0       	ldi	r22, 0x01	; 1
    fba4:	70 e0       	ldi	r23, 0x00	; 0
    fba6:	84 e2       	ldi	r24, 0x24	; 36
    fba8:	92 e0       	ldi	r25, 0x02	; 2
    fbaa:	0e 94 49 29 	call	0x5292	; 0x5292 <safecalloc>
    fbae:	00 97       	sbiw	r24, 0x00	; 0
    fbb0:	31 f4       	brne	.+12     	; 0xfbbe <new_file_descriptor+0x6a>
    fbb2:	c8 01       	movw	r24, r16
    fbb4:	0e 94 95 29 	call	0x532a	; 0x532a <safefree>
    fbb8:	8c e0       	ldi	r24, 0x0C	; 12
    fbba:	90 e0       	ldi	r25, 0x00	; 0
    fbbc:	e2 cf       	rjmp	.-60     	; 0xfb82 <new_file_descriptor+0x2e>
    fbbe:	fe 01       	movw	r30, r28
    fbc0:	ee 0f       	add	r30, r30
    fbc2:	ff 1f       	adc	r31, r31
    fbc4:	eb 5a       	subi	r30, 0xAB	; 171
    fbc6:	f3 4e       	sbci	r31, 0xE3	; 227
    fbc8:	11 83       	std	Z+1, r17	; 0x01
    fbca:	00 83       	st	Z, r16
    fbcc:	f8 01       	movw	r30, r16
    fbce:	95 87       	std	Z+13, r25	; 0x0d
    fbd0:	84 87       	std	Z+12, r24	; 0x0c
    fbd2:	ce 01       	movw	r24, r28
    fbd4:	df 91       	pop	r29
    fbd6:	cf 91       	pop	r28
    fbd8:	1f 91       	pop	r17
    fbda:	0f 91       	pop	r16
    fbdc:	08 95       	ret

0000fbde <open>:
    fbde:	a0 e0       	ldi	r26, 0x00	; 0
    fbe0:	b0 e0       	ldi	r27, 0x00	; 0
    fbe2:	e5 ef       	ldi	r30, 0xF5	; 245
    fbe4:	fd e7       	ldi	r31, 0x7D	; 125
    fbe6:	0c 94 cc e3 	jmp	0x1c798	; 0x1c798 <__prologue_saves__+0x8>
    fbea:	5c 01       	movw	r10, r24
    fbec:	6b 01       	movw	r12, r22
    fbee:	10 92 54 1c 	sts	0x1C54, r1	; 0x801c54 <errno+0x1>
    fbf2:	10 92 53 1c 	sts	0x1C53, r1	; 0x801c53 <errno>
    fbf6:	7b 01       	movw	r14, r22
    fbf8:	83 e0       	ldi	r24, 0x03	; 3
    fbfa:	e8 22       	and	r14, r24
    fbfc:	ff 24       	eor	r15, r15
    fbfe:	e2 e0       	ldi	r30, 0x02	; 2
    fc00:	ee 16       	cp	r14, r30
    fc02:	f1 04       	cpc	r15, r1
    fc04:	31 f0       	breq	.+12     	; 0xfc12 <open+0x34>
    fc06:	e1 14       	cp	r14, r1
    fc08:	f1 04       	cpc	r15, r1
    fc0a:	31 f0       	breq	.+12     	; 0xfc18 <open+0x3a>
    fc0c:	02 e0       	ldi	r16, 0x02	; 2
    fc0e:	10 e0       	ldi	r17, 0x00	; 0
    fc10:	05 c0       	rjmp	.+10     	; 0xfc1c <open+0x3e>
    fc12:	03 e0       	ldi	r16, 0x03	; 3
    fc14:	10 e0       	ldi	r17, 0x00	; 0
    fc16:	02 c0       	rjmp	.+4      	; 0xfc1c <open+0x3e>
    fc18:	01 e0       	ldi	r16, 0x01	; 1
    fc1a:	10 e0       	ldi	r17, 0x00	; 0
    fc1c:	c6 fe       	sbrs	r12, 6
    fc1e:	05 c0       	rjmp	.+10     	; 0xfc2a <open+0x4c>
    fc20:	d1 fe       	sbrs	r13, 1
    fc22:	02 c0       	rjmp	.+4      	; 0xfc28 <open+0x4a>
    fc24:	08 60       	ori	r16, 0x08	; 8
    fc26:	01 c0       	rjmp	.+2      	; 0xfc2a <open+0x4c>
    fc28:	00 61       	ori	r16, 0x10	; 16
    fc2a:	94 df       	rcall	.-216    	; 0xfb54 <new_file_descriptor>
    fc2c:	3c 01       	movw	r6, r24
    fc2e:	85 d9       	rcall	.-3318   	; 0xef3a <fileno_to_stream>
    fc30:	ec 01       	movw	r28, r24
    fc32:	c3 01       	movw	r24, r6
    fc34:	20 97       	sbiw	r28, 0x00	; 0
    fc36:	09 f4       	brne	.+2      	; 0xfc3a <open+0x5c>
    fc38:	48 c0       	rjmp	.+144    	; 0xfcca <open+0xec>
    fc3a:	04 dd       	rcall	.-1528   	; 0xf644 <fileno_to_fatfs>
    fc3c:	4c 01       	movw	r8, r24
    fc3e:	00 97       	sbiw	r24, 0x00	; 0
    fc40:	59 f4       	brne	.+22     	; 0xfc58 <open+0x7a>
    fc42:	c3 01       	movw	r24, r6
    fc44:	19 df       	rcall	.-462    	; 0xfa78 <free_file_descriptor>
    fc46:	89 e0       	ldi	r24, 0x09	; 9
    fc48:	90 e0       	ldi	r25, 0x00	; 0
    fc4a:	90 93 54 1c 	sts	0x1C54, r25	; 0x801c54 <errno+0x1>
    fc4e:	80 93 53 1c 	sts	0x1C53, r24	; 0x801c53 <errno>
    fc52:	8f ef       	ldi	r24, 0xFF	; 255
    fc54:	9f ef       	ldi	r25, 0xFF	; 255
    fc56:	5d c0       	rjmp	.+186    	; 0xfd12 <open+0x134>
    fc58:	40 2f       	mov	r20, r16
    fc5a:	b5 01       	movw	r22, r10
    fc5c:	0e 94 f0 5a 	call	0xb5e0	; 0xb5e0 <f_open>
    fc60:	00 97       	sbiw	r24, 0x00	; 0
    fc62:	91 f0       	breq	.+36     	; 0xfc88 <open+0xaa>
    fc64:	84 31       	cpi	r24, 0x14	; 20
    fc66:	91 05       	cpc	r25, r1
    fc68:	40 f4       	brcc	.+16     	; 0xfc7a <open+0x9c>
    fc6a:	fc 01       	movw	r30, r24
    fc6c:	ec 53       	subi	r30, 0x3C	; 60
    fc6e:	f5 4f       	sbci	r31, 0xF5	; 245
    fc70:	80 81       	ld	r24, Z
    fc72:	08 2e       	mov	r0, r24
    fc74:	00 0c       	add	r0, r0
    fc76:	99 0b       	sbc	r25, r25
    fc78:	02 c0       	rjmp	.+4      	; 0xfc7e <open+0xa0>
    fc7a:	83 e2       	ldi	r24, 0x23	; 35
    fc7c:	90 e0       	ldi	r25, 0x00	; 0
    fc7e:	90 93 54 1c 	sts	0x1C54, r25	; 0x801c54 <errno+0x1>
    fc82:	80 93 53 1c 	sts	0x1C53, r24	; 0x801c53 <errno>
    fc86:	20 c0       	rjmp	.+64     	; 0xfcc8 <open+0xea>
    fc88:	d2 fe       	sbrs	r13, 2
    fc8a:	21 c0       	rjmp	.+66     	; 0xfcce <open+0xf0>
    fc8c:	f4 01       	movw	r30, r8
    fc8e:	42 85       	ldd	r20, Z+10	; 0x0a
    fc90:	53 85       	ldd	r21, Z+11	; 0x0b
    fc92:	64 85       	ldd	r22, Z+12	; 0x0c
    fc94:	75 85       	ldd	r23, Z+13	; 0x0d
    fc96:	c4 01       	movw	r24, r8
    fc98:	0e 94 b4 61 	call	0xc368	; 0xc368 <f_lseek>
    fc9c:	00 97       	sbiw	r24, 0x00	; 0
    fc9e:	b9 f0       	breq	.+46     	; 0xfcce <open+0xf0>
    fca0:	84 31       	cpi	r24, 0x14	; 20
    fca2:	91 05       	cpc	r25, r1
    fca4:	40 f4       	brcc	.+16     	; 0xfcb6 <open+0xd8>
    fca6:	fc 01       	movw	r30, r24
    fca8:	ec 53       	subi	r30, 0x3C	; 60
    fcaa:	f5 4f       	sbci	r31, 0xF5	; 245
    fcac:	80 81       	ld	r24, Z
    fcae:	08 2e       	mov	r0, r24
    fcb0:	00 0c       	add	r0, r0
    fcb2:	99 0b       	sbc	r25, r25
    fcb4:	02 c0       	rjmp	.+4      	; 0xfcba <open+0xdc>
    fcb6:	83 e2       	ldi	r24, 0x23	; 35
    fcb8:	90 e0       	ldi	r25, 0x00	; 0
    fcba:	90 93 54 1c 	sts	0x1C54, r25	; 0x801c54 <errno+0x1>
    fcbe:	80 93 53 1c 	sts	0x1C53, r24	; 0x801c53 <errno>
    fcc2:	c4 01       	movw	r24, r8
    fcc4:	0e 94 0a 60 	call	0xc014	; 0xc014 <f_close>
    fcc8:	c3 01       	movw	r24, r6
    fcca:	d6 de       	rcall	.-596    	; 0xfa78 <free_file_descriptor>
    fccc:	c2 cf       	rjmp	.-124    	; 0xfc52 <open+0x74>
    fcce:	f2 e0       	ldi	r31, 0x02	; 2
    fcd0:	ef 16       	cp	r14, r31
    fcd2:	f1 04       	cpc	r15, r1
    fcd4:	51 f4       	brne	.+20     	; 0xfcea <open+0x10c>
    fcd6:	82 e1       	ldi	r24, 0x12	; 18
    fcd8:	96 e7       	ldi	r25, 0x76	; 118
    fcda:	99 87       	std	Y+9, r25	; 0x09
    fcdc:	88 87       	std	Y+8, r24	; 0x08
    fcde:	8f e8       	ldi	r24, 0x8F	; 143
    fce0:	95 e7       	ldi	r25, 0x75	; 117
    fce2:	9b 87       	std	Y+11, r25	; 0x0b
    fce4:	8a 87       	std	Y+10, r24	; 0x0a
    fce6:	83 e0       	ldi	r24, 0x03	; 3
    fce8:	12 c0       	rjmp	.+36     	; 0xfd0e <open+0x130>
    fcea:	e1 14       	cp	r14, r1
    fcec:	f1 04       	cpc	r15, r1
    fcee:	41 f4       	brne	.+16     	; 0xfd00 <open+0x122>
    fcf0:	19 86       	std	Y+9, r1	; 0x09
    fcf2:	18 86       	std	Y+8, r1	; 0x08
    fcf4:	8f e8       	ldi	r24, 0x8F	; 143
    fcf6:	95 e7       	ldi	r25, 0x75	; 117
    fcf8:	9b 87       	std	Y+11, r25	; 0x0b
    fcfa:	8a 87       	std	Y+10, r24	; 0x0a
    fcfc:	81 e0       	ldi	r24, 0x01	; 1
    fcfe:	07 c0       	rjmp	.+14     	; 0xfd0e <open+0x130>
    fd00:	82 e1       	ldi	r24, 0x12	; 18
    fd02:	96 e7       	ldi	r25, 0x76	; 118
    fd04:	99 87       	std	Y+9, r25	; 0x09
    fd06:	88 87       	std	Y+8, r24	; 0x08
    fd08:	1b 86       	std	Y+11, r1	; 0x0b
    fd0a:	1a 86       	std	Y+10, r1	; 0x0a
    fd0c:	82 e0       	ldi	r24, 0x02	; 2
    fd0e:	8b 83       	std	Y+3, r24	; 0x03
    fd10:	c3 01       	movw	r24, r6
    fd12:	cd b7       	in	r28, 0x3d	; 61
    fd14:	de b7       	in	r29, 0x3e	; 62
    fd16:	ee e0       	ldi	r30, 0x0E	; 14
    fd18:	0c 94 e8 e3 	jmp	0x1c7d0	; 0x1c7d0 <__epilogue_restores__+0x8>

0000fd1c <posix_fopen_modes_to_open>:
    fd1c:	cf 93       	push	r28
    fd1e:	df 93       	push	r29
    fd20:	ec 01       	movw	r28, r24
    fd22:	62 e6       	ldi	r22, 0x62	; 98
    fd24:	72 e0       	ldi	r23, 0x02	; 2
    fd26:	0e 94 8f 32 	call	0x651e	; 0x651e <strcmp>
    fd2a:	00 97       	sbiw	r24, 0x00	; 0
    fd2c:	09 f4       	brne	.+2      	; 0xfd30 <posix_fopen_modes_to_open+0x14>
    fd2e:	5d c0       	rjmp	.+186    	; 0xfdea <posix_fopen_modes_to_open+0xce>
    fd30:	6c e1       	ldi	r22, 0x1C	; 28
    fd32:	78 e0       	ldi	r23, 0x08	; 8
    fd34:	ce 01       	movw	r24, r28
    fd36:	0e 94 8f 32 	call	0x651e	; 0x651e <strcmp>
    fd3a:	00 97       	sbiw	r24, 0x00	; 0
    fd3c:	09 f4       	brne	.+2      	; 0xfd40 <posix_fopen_modes_to_open+0x24>
    fd3e:	55 c0       	rjmp	.+170    	; 0xfdea <posix_fopen_modes_to_open+0xce>
    fd40:	6f e1       	ldi	r22, 0x1F	; 31
    fd42:	78 e0       	ldi	r23, 0x08	; 8
    fd44:	ce 01       	movw	r24, r28
    fd46:	0e 94 8f 32 	call	0x651e	; 0x651e <strcmp>
    fd4a:	89 2b       	or	r24, r25
    fd4c:	09 f4       	brne	.+2      	; 0xfd50 <posix_fopen_modes_to_open+0x34>
    fd4e:	42 c0       	rjmp	.+132    	; 0xfdd4 <posix_fopen_modes_to_open+0xb8>
    fd50:	62 e2       	ldi	r22, 0x22	; 34
    fd52:	78 e0       	ldi	r23, 0x08	; 8
    fd54:	ce 01       	movw	r24, r28
    fd56:	0e 94 8f 32 	call	0x651e	; 0x651e <strcmp>
    fd5a:	89 2b       	or	r24, r25
    fd5c:	d9 f1       	breq	.+118    	; 0xfdd4 <posix_fopen_modes_to_open+0xb8>
    fd5e:	66 e2       	ldi	r22, 0x26	; 38
    fd60:	78 e0       	ldi	r23, 0x08	; 8
    fd62:	ce 01       	movw	r24, r28
    fd64:	0e 94 8f 32 	call	0x651e	; 0x651e <strcmp>
    fd68:	89 2b       	or	r24, r25
    fd6a:	a1 f1       	breq	.+104    	; 0xfdd4 <posix_fopen_modes_to_open+0xb8>
    fd6c:	6b ed       	ldi	r22, 0xDB	; 219
    fd6e:	79 e0       	ldi	r23, 0x09	; 9
    fd70:	ce 01       	movw	r24, r28
    fd72:	0e 94 8f 32 	call	0x651e	; 0x651e <strcmp>
    fd76:	89 2b       	or	r24, r25
    fd78:	81 f1       	breq	.+96     	; 0xfdda <posix_fopen_modes_to_open+0xbe>
    fd7a:	6a e2       	ldi	r22, 0x2A	; 42
    fd7c:	78 e0       	ldi	r23, 0x08	; 8
    fd7e:	ce 01       	movw	r24, r28
    fd80:	0e 94 8f 32 	call	0x651e	; 0x651e <strcmp>
    fd84:	89 2b       	or	r24, r25
    fd86:	49 f1       	breq	.+82     	; 0xfdda <posix_fopen_modes_to_open+0xbe>
    fd88:	6d e2       	ldi	r22, 0x2D	; 45
    fd8a:	78 e0       	ldi	r23, 0x08	; 8
    fd8c:	ce 01       	movw	r24, r28
    fd8e:	0e 94 8f 32 	call	0x651e	; 0x651e <strcmp>
    fd92:	89 2b       	or	r24, r25
    fd94:	29 f1       	breq	.+74     	; 0xfde0 <posix_fopen_modes_to_open+0xc4>
    fd96:	60 e3       	ldi	r22, 0x30	; 48
    fd98:	78 e0       	ldi	r23, 0x08	; 8
    fd9a:	ce 01       	movw	r24, r28
    fd9c:	0e 94 8f 32 	call	0x651e	; 0x651e <strcmp>
    fda0:	89 2b       	or	r24, r25
    fda2:	f1 f0       	breq	.+60     	; 0xfde0 <posix_fopen_modes_to_open+0xc4>
    fda4:	64 e3       	ldi	r22, 0x34	; 52
    fda6:	78 e0       	ldi	r23, 0x08	; 8
    fda8:	ce 01       	movw	r24, r28
    fdaa:	0e 94 8f 32 	call	0x651e	; 0x651e <strcmp>
    fdae:	89 2b       	or	r24, r25
    fdb0:	b9 f0       	breq	.+46     	; 0xfde0 <posix_fopen_modes_to_open+0xc4>
    fdb2:	6c e3       	ldi	r22, 0x3C	; 60
    fdb4:	72 e1       	ldi	r23, 0x12	; 18
    fdb6:	ce 01       	movw	r24, r28
    fdb8:	0e 94 8f 32 	call	0x651e	; 0x651e <strcmp>
    fdbc:	89 2b       	or	r24, r25
    fdbe:	99 f0       	breq	.+38     	; 0xfde6 <posix_fopen_modes_to_open+0xca>
    fdc0:	68 e3       	ldi	r22, 0x38	; 56
    fdc2:	78 e0       	ldi	r23, 0x08	; 8
    fdc4:	ce 01       	movw	r24, r28
    fdc6:	0e 94 8f 32 	call	0x651e	; 0x651e <strcmp>
    fdca:	89 2b       	or	r24, r25
    fdcc:	61 f0       	breq	.+24     	; 0xfde6 <posix_fopen_modes_to_open+0xca>
    fdce:	8f ef       	ldi	r24, 0xFF	; 255
    fdd0:	9f ef       	ldi	r25, 0xFF	; 255
    fdd2:	0b c0       	rjmp	.+22     	; 0xfdea <posix_fopen_modes_to_open+0xce>
    fdd4:	82 e0       	ldi	r24, 0x02	; 2
    fdd6:	92 e0       	ldi	r25, 0x02	; 2
    fdd8:	08 c0       	rjmp	.+16     	; 0xfdea <posix_fopen_modes_to_open+0xce>
    fdda:	81 e4       	ldi	r24, 0x41	; 65
    fddc:	92 e0       	ldi	r25, 0x02	; 2
    fdde:	05 c0       	rjmp	.+10     	; 0xfdea <posix_fopen_modes_to_open+0xce>
    fde0:	82 e4       	ldi	r24, 0x42	; 66
    fde2:	92 e0       	ldi	r25, 0x02	; 2
    fde4:	02 c0       	rjmp	.+4      	; 0xfdea <posix_fopen_modes_to_open+0xce>
    fde6:	81 e4       	ldi	r24, 0x41	; 65
    fde8:	94 e0       	ldi	r25, 0x04	; 4
    fdea:	df 91       	pop	r29
    fdec:	cf 91       	pop	r28
    fdee:	08 95       	ret

0000fdf0 <fopen>:
    fdf0:	cf 93       	push	r28
    fdf2:	df 93       	push	r29
    fdf4:	ec 01       	movw	r28, r24
    fdf6:	cb 01       	movw	r24, r22
    fdf8:	91 df       	rcall	.-222    	; 0xfd1c <posix_fopen_modes_to_open>
    fdfa:	bc 01       	movw	r22, r24
    fdfc:	ce 01       	movw	r24, r28
    fdfe:	ef de       	rcall	.-546    	; 0xfbde <open>
    fe00:	9c d8       	rcall	.-3784   	; 0xef3a <fileno_to_stream>
    fe02:	df 91       	pop	r29
    fe04:	cf 91       	pop	r28
    fe06:	08 95       	ret

0000fe08 <fprintf>:
    fe08:	a8 e0       	ldi	r26, 0x08	; 8
    fe0a:	b0 e0       	ldi	r27, 0x00	; 0
    fe0c:	ea e0       	ldi	r30, 0x0A	; 10
    fe0e:	ff e7       	ldi	r31, 0x7F	; 127
    fe10:	0c 94 d8 e3 	jmp	0x1c7b0	; 0x1c7b0 <__prologue_saves__+0x20>
    fe14:	85 e0       	ldi	r24, 0x05	; 5
    fe16:	97 e7       	ldi	r25, 0x77	; 119
    fe18:	9a 83       	std	Y+2, r25	; 0x02
    fe1a:	89 83       	std	Y+1, r24	; 0x01
    fe1c:	18 86       	std	Y+8, r1	; 0x08
    fe1e:	1f 82       	std	Y+7, r1	; 0x07
    fe20:	8d 85       	ldd	r24, Y+13	; 0x0d
    fe22:	9e 85       	ldd	r25, Y+14	; 0x0e
    fe24:	9c 83       	std	Y+4, r25	; 0x04
    fe26:	8b 83       	std	Y+3, r24	; 0x03
    fe28:	4f 85       	ldd	r20, Y+15	; 0x0f
    fe2a:	58 89       	ldd	r21, Y+16	; 0x10
    fe2c:	60 e8       	ldi	r22, 0x80	; 128
    fe2e:	9e 01       	movw	r18, r28
    fe30:	2f 5e       	subi	r18, 0xEF	; 239
    fe32:	3f 4f       	sbci	r19, 0xFF	; 255
    fe34:	ce 01       	movw	r24, r28
    fe36:	01 96       	adiw	r24, 0x01	; 1
    fe38:	0e 94 d8 42 	call	0x85b0	; 0x85b0 <_printf_fn>
    fe3c:	8f 81       	ldd	r24, Y+7	; 0x07
    fe3e:	98 85       	ldd	r25, Y+8	; 0x08
    fe40:	28 96       	adiw	r28, 0x08	; 8
    fe42:	e2 e0       	ldi	r30, 0x02	; 2
    fe44:	0c 94 f4 e3 	jmp	0x1c7e8	; 0x1c7e8 <__epilogue_restores__+0x20>

0000fe48 <posix_help>:
    fe48:	cf 93       	push	r28
    fe4a:	df 93       	push	r29
    fe4c:	00 d0       	rcall	.+0      	; 0xfe4e <posix_help+0x6>
    fe4e:	1f 92       	push	r1
    fe50:	ec 01       	movw	r28, r24
    fe52:	82 e8       	ldi	r24, 0x82	; 130
    fe54:	9d e0       	ldi	r25, 0x0D	; 13
    fe56:	a0 e0       	ldi	r26, 0x00	; 0
    fe58:	ed b7       	in	r30, 0x3d	; 61
    fe5a:	fe b7       	in	r31, 0x3e	; 62
    fe5c:	81 83       	std	Z+1, r24	; 0x01
    fe5e:	92 83       	std	Z+2, r25	; 0x02
    fe60:	a3 83       	std	Z+3, r26	; 0x03
    fe62:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    fe66:	cd 2b       	or	r28, r29
    fe68:	51 f0       	breq	.+20     	; 0xfe7e <posix_help+0x36>
    fe6a:	82 ec       	ldi	r24, 0xC2	; 194
    fe6c:	9c e0       	ldi	r25, 0x0C	; 12
    fe6e:	a0 e0       	ldi	r26, 0x00	; 0
    fe70:	ed b7       	in	r30, 0x3d	; 61
    fe72:	fe b7       	in	r31, 0x3e	; 62
    fe74:	81 83       	std	Z+1, r24	; 0x01
    fe76:	92 83       	std	Z+2, r25	; 0x02
    fe78:	a3 83       	std	Z+3, r26	; 0x03
    fe7a:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    fe7e:	cd b7       	in	r28, 0x3d	; 61
    fe80:	de b7       	in	r29, 0x3e	; 62
    fe82:	23 96       	adiw	r28, 0x03	; 3
    fe84:	e2 e0       	ldi	r30, 0x02	; 2
    fe86:	0c 94 f4 e3 	jmp	0x1c7e8	; 0x1c7e8 <__epilogue_restores__+0x20>

0000fe8a <copy>:
    fe8a:	4f 92       	push	r4
    fe8c:	5f 92       	push	r5
    fe8e:	6f 92       	push	r6
    fe90:	8f 92       	push	r8
    fe92:	9f 92       	push	r9
    fe94:	af 92       	push	r10
    fe96:	bf 92       	push	r11
    fe98:	cf 92       	push	r12
    fe9a:	df 92       	push	r13
    fe9c:	ef 92       	push	r14
    fe9e:	ff 92       	push	r15
    fea0:	0f 93       	push	r16
    fea2:	1f 93       	push	r17
    fea4:	cf 93       	push	r28
    fea6:	df 93       	push	r29
    fea8:	ad b7       	in	r26, 0x3d	; 61
    feaa:	be b7       	in	r27, 0x3e	; 62
    feac:	17 97       	sbiw	r26, 0x07	; 7
    feae:	0f b6       	in	r0, 0x3f	; 63
    feb0:	f8 94       	cli
    feb2:	be bf       	out	0x3e, r27	; 62
    feb4:	0f be       	out	0x3f, r0	; 63
    feb6:	ad bf       	out	0x3d, r26	; 61
    feb8:	8c 01       	movw	r16, r24
    feba:	eb 01       	movw	r28, r22
    febc:	ed b7       	in	r30, 0x3d	; 61
    febe:	fe b7       	in	r31, 0x3e	; 62
    fec0:	95 83       	std	Z+5, r25	; 0x05
    fec2:	84 83       	std	Z+4, r24	; 0x04
    fec4:	85 e9       	ldi	r24, 0x95	; 149
    fec6:	9c e0       	ldi	r25, 0x0C	; 12
    fec8:	a0 e0       	ldi	r26, 0x00	; 0
    feca:	81 83       	std	Z+1, r24	; 0x01
    fecc:	92 83       	std	Z+2, r25	; 0x02
    fece:	a3 83       	std	Z+3, r26	; 0x03
    fed0:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    fed4:	6c e1       	ldi	r22, 0x1C	; 28
    fed6:	78 e0       	ldi	r23, 0x08	; 8
    fed8:	c8 01       	movw	r24, r16
    feda:	8a df       	rcall	.-236    	; 0xfdf0 <fopen>
    fedc:	7c 01       	movw	r14, r24
    fede:	ed b7       	in	r30, 0x3d	; 61
    fee0:	fe b7       	in	r31, 0x3e	; 62
    fee2:	89 2b       	or	r24, r25
    fee4:	59 f4       	brne	.+22     	; 0xfefc <copy+0x72>
    fee6:	15 83       	std	Z+5, r17	; 0x05
    fee8:	04 83       	std	Z+4, r16	; 0x04
    feea:	85 e8       	ldi	r24, 0x85	; 133
    feec:	9c e0       	ldi	r25, 0x0C	; 12
    feee:	a0 e0       	ldi	r26, 0x00	; 0
    fef0:	81 83       	std	Z+1, r24	; 0x01
    fef2:	92 83       	std	Z+2, r25	; 0x02
    fef4:	a3 83       	std	Z+3, r26	; 0x03
    fef6:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    fefa:	20 c0       	rjmp	.+64     	; 0xff3c <__DATA_REGION_LENGTH__+0x3c>
    fefc:	d5 83       	std	Z+5, r29	; 0x05
    fefe:	c4 83       	std	Z+4, r28	; 0x04
    ff00:	88 e7       	ldi	r24, 0x78	; 120
    ff02:	9c e0       	ldi	r25, 0x0C	; 12
    ff04:	a0 e0       	ldi	r26, 0x00	; 0
    ff06:	81 83       	std	Z+1, r24	; 0x01
    ff08:	92 83       	std	Z+2, r25	; 0x02
    ff0a:	a3 83       	std	Z+3, r26	; 0x03
    ff0c:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    ff10:	6a e2       	ldi	r22, 0x2A	; 42
    ff12:	78 e0       	ldi	r23, 0x08	; 8
    ff14:	ce 01       	movw	r24, r28
    ff16:	6c df       	rcall	.-296    	; 0xfdf0 <fopen>
    ff18:	8c 01       	movw	r16, r24
    ff1a:	89 2b       	or	r24, r25
    ff1c:	a1 f4       	brne	.+40     	; 0xff46 <__DATA_REGION_LENGTH__+0x46>
    ff1e:	ed b7       	in	r30, 0x3d	; 61
    ff20:	fe b7       	in	r31, 0x3e	; 62
    ff22:	d5 83       	std	Z+5, r29	; 0x05
    ff24:	c4 83       	std	Z+4, r28	; 0x04
    ff26:	88 e6       	ldi	r24, 0x68	; 104
    ff28:	9c e0       	ldi	r25, 0x0C	; 12
    ff2a:	a0 e0       	ldi	r26, 0x00	; 0
    ff2c:	81 83       	std	Z+1, r24	; 0x01
    ff2e:	92 83       	std	Z+2, r25	; 0x02
    ff30:	a3 83       	std	Z+3, r26	; 0x03
    ff32:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    ff36:	80 e0       	ldi	r24, 0x00	; 0
    ff38:	90 e0       	ldi	r25, 0x00	; 0
    ff3a:	04 de       	rcall	.-1016   	; 0xfb44 <fclose>
    ff3c:	60 e0       	ldi	r22, 0x00	; 0
    ff3e:	70 e0       	ldi	r23, 0x00	; 0
    ff40:	80 e0       	ldi	r24, 0x00	; 0
    ff42:	90 e0       	ldi	r25, 0x00	; 0
    ff44:	68 c0       	rjmp	.+208    	; 0x10016 <__EEPROM_REGION_LENGTH__+0x16>
    ff46:	61 e0       	ldi	r22, 0x01	; 1
    ff48:	70 e0       	ldi	r23, 0x00	; 0
    ff4a:	80 e0       	ldi	r24, 0x00	; 0
    ff4c:	92 e0       	ldi	r25, 0x02	; 2
    ff4e:	0e 94 49 29 	call	0x5292	; 0x5292 <safecalloc>
    ff52:	6c 01       	movw	r12, r24
    ff54:	89 2b       	or	r24, r25
    ff56:	21 f4       	brne	.+8      	; 0xff60 <__DATA_REGION_LENGTH__+0x60>
    ff58:	c7 01       	movw	r24, r14
    ff5a:	f4 dd       	rcall	.-1048   	; 0xfb44 <fclose>
    ff5c:	c8 01       	movw	r24, r16
    ff5e:	ed cf       	rjmp	.-38     	; 0xff3a <__DATA_REGION_LENGTH__+0x3a>
    ff60:	8b e5       	ldi	r24, 0x5B	; 91
    ff62:	9c e0       	ldi	r25, 0x0C	; 12
    ff64:	a0 e0       	ldi	r26, 0x00	; 0
    ff66:	ed b7       	in	r30, 0x3d	; 61
    ff68:	fe b7       	in	r31, 0x3e	; 62
    ff6a:	81 83       	std	Z+1, r24	; 0x01
    ff6c:	92 83       	std	Z+2, r25	; 0x02
    ff6e:	a3 83       	std	Z+3, r26	; 0x03
    ff70:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    ff74:	81 2c       	mov	r8, r1
    ff76:	91 2c       	mov	r9, r1
    ff78:	54 01       	movw	r10, r8
    ff7a:	8f e3       	ldi	r24, 0x3F	; 63
    ff7c:	9c e0       	ldi	r25, 0x0C	; 12
    ff7e:	2c 01       	movw	r4, r24
    ff80:	61 2c       	mov	r6, r1
    ff82:	97 01       	movw	r18, r14
    ff84:	40 e0       	ldi	r20, 0x00	; 0
    ff86:	52 e0       	ldi	r21, 0x02	; 2
    ff88:	61 e0       	ldi	r22, 0x01	; 1
    ff8a:	70 e0       	ldi	r23, 0x00	; 0
    ff8c:	c6 01       	movw	r24, r12
    ff8e:	86 dc       	rcall	.-1780   	; 0xf89c <fread>
    ff90:	ec 01       	movw	r28, r24
    ff92:	18 16       	cp	r1, r24
    ff94:	19 06       	cpc	r1, r25
    ff96:	44 f5       	brge	.+80     	; 0xffe8 <__DATA_REGION_LENGTH__+0xe8>
    ff98:	98 01       	movw	r18, r16
    ff9a:	ae 01       	movw	r20, r28
    ff9c:	61 e0       	ldi	r22, 0x01	; 1
    ff9e:	70 e0       	ldi	r23, 0x00	; 0
    ffa0:	c6 01       	movw	r24, r12
    ffa2:	4e dd       	rcall	.-1380   	; 0xfa40 <fwrite>
    ffa4:	8c 17       	cp	r24, r28
    ffa6:	9d 07       	cpc	r25, r29
    ffa8:	5c f4       	brge	.+22     	; 0xffc0 <__DATA_REGION_LENGTH__+0xc0>
    ffaa:	8e e4       	ldi	r24, 0x4E	; 78
    ffac:	9c e0       	ldi	r25, 0x0C	; 12
    ffae:	a0 e0       	ldi	r26, 0x00	; 0
    ffb0:	ed b7       	in	r30, 0x3d	; 61
    ffb2:	fe b7       	in	r31, 0x3e	; 62
    ffb4:	81 83       	std	Z+1, r24	; 0x01
    ffb6:	92 83       	std	Z+2, r25	; 0x02
    ffb8:	a3 83       	std	Z+3, r26	; 0x03
    ffba:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    ffbe:	14 c0       	rjmp	.+40     	; 0xffe8 <__DATA_REGION_LENGTH__+0xe8>
    ffc0:	ce 01       	movw	r24, r28
    ffc2:	dd 0f       	add	r29, r29
    ffc4:	aa 0b       	sbc	r26, r26
    ffc6:	bb 0b       	sbc	r27, r27
    ffc8:	88 0e       	add	r8, r24
    ffca:	99 1e       	adc	r9, r25
    ffcc:	aa 1e       	adc	r10, r26
    ffce:	bb 1e       	adc	r11, r27
    ffd0:	ed b7       	in	r30, 0x3d	; 61
    ffd2:	fe b7       	in	r31, 0x3e	; 62
    ffd4:	84 82       	std	Z+4, r8	; 0x04
    ffd6:	95 82       	std	Z+5, r9	; 0x05
    ffd8:	a6 82       	std	Z+6, r10	; 0x06
    ffda:	b7 82       	std	Z+7, r11	; 0x07
    ffdc:	41 82       	std	Z+1, r4	; 0x01
    ffde:	52 82       	std	Z+2, r5	; 0x02
    ffe0:	63 82       	std	Z+3, r6	; 0x03
    ffe2:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    ffe6:	cd cf       	rjmp	.-102    	; 0xff82 <__DATA_REGION_LENGTH__+0x82>
    ffe8:	ed b7       	in	r30, 0x3d	; 61
    ffea:	fe b7       	in	r31, 0x3e	; 62
    ffec:	84 82       	std	Z+4, r8	; 0x04
    ffee:	95 82       	std	Z+5, r9	; 0x05
    fff0:	a6 82       	std	Z+6, r10	; 0x06
    fff2:	b7 82       	std	Z+7, r11	; 0x07
    fff4:	8c e2       	ldi	r24, 0x2C	; 44
    fff6:	9c e0       	ldi	r25, 0x0C	; 12
    fff8:	a0 e0       	ldi	r26, 0x00	; 0
    fffa:	81 83       	std	Z+1, r24	; 0x01
    fffc:	92 83       	std	Z+2, r25	; 0x02
    fffe:	a3 83       	std	Z+3, r26	; 0x03
   10000:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   10004:	c6 01       	movw	r24, r12
   10006:	0e 94 95 29 	call	0x532a	; 0x532a <safefree>
   1000a:	c7 01       	movw	r24, r14
   1000c:	9b dd       	rcall	.-1226   	; 0xfb44 <fclose>
   1000e:	c8 01       	movw	r24, r16
   10010:	99 dd       	rcall	.-1230   	; 0xfb44 <fclose>
   10012:	b4 01       	movw	r22, r8
   10014:	c5 01       	movw	r24, r10
   10016:	ad b7       	in	r26, 0x3d	; 61
   10018:	be b7       	in	r27, 0x3e	; 62
   1001a:	17 96       	adiw	r26, 0x07	; 7
   1001c:	0f b6       	in	r0, 0x3f	; 63
   1001e:	f8 94       	cli
   10020:	be bf       	out	0x3e, r27	; 62
   10022:	0f be       	out	0x3f, r0	; 63
   10024:	ad bf       	out	0x3d, r26	; 61
   10026:	df 91       	pop	r29
   10028:	cf 91       	pop	r28
   1002a:	1f 91       	pop	r17
   1002c:	0f 91       	pop	r16
   1002e:	ff 90       	pop	r15
   10030:	ef 90       	pop	r14
   10032:	df 90       	pop	r13
   10034:	cf 90       	pop	r12
   10036:	bf 90       	pop	r11
   10038:	af 90       	pop	r10
   1003a:	9f 90       	pop	r9
   1003c:	8f 90       	pop	r8
   1003e:	6f 90       	pop	r6
   10040:	5f 90       	pop	r5
   10042:	4f 90       	pop	r4
   10044:	08 95       	ret

00010046 <testpage>:
   10046:	cf 93       	push	r28
   10048:	df 93       	push	r29
   1004a:	00 d0       	rcall	.+0      	; 0x1004c <testpage+0x6>
   1004c:	1f 92       	push	r1
   1004e:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <_pagesize>
   10052:	30 91 8e 01 	lds	r19, 0x018E	; 0x80018e <_pagesize+0x1>
   10056:	82 17       	cp	r24, r18
   10058:	93 07       	cpc	r25, r19
   1005a:	3c f1       	brlt	.+78     	; 0x100aa <testpage+0x64>
   1005c:	85 e2       	ldi	r24, 0x25	; 37
   1005e:	9c e0       	ldi	r25, 0x0C	; 12
   10060:	a0 e0       	ldi	r26, 0x00	; 0
   10062:	ed b7       	in	r30, 0x3d	; 61
   10064:	fe b7       	in	r31, 0x3e	; 62
   10066:	81 83       	std	Z+1, r24	; 0x01
   10068:	92 83       	std	Z+2, r25	; 0x02
   1006a:	a3 83       	std	Z+3, r26	; 0x03
   1006c:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   10070:	0e 94 12 77 	call	0xee24	; 0xee24 <getchar>
   10074:	ec 01       	movw	r28, r24
   10076:	83 e2       	ldi	r24, 0x23	; 35
   10078:	9c e0       	ldi	r25, 0x0C	; 12
   1007a:	a0 e0       	ldi	r26, 0x00	; 0
   1007c:	ed b7       	in	r30, 0x3d	; 61
   1007e:	fe b7       	in	r31, 0x3e	; 62
   10080:	81 83       	std	Z+1, r24	; 0x01
   10082:	92 83       	std	Z+2, r25	; 0x02
   10084:	a3 83       	std	Z+3, r26	; 0x03
   10086:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   1008a:	c1 37       	cpi	r28, 0x71	; 113
   1008c:	d1 05       	cpc	r29, r1
   1008e:	41 f0       	breq	.+16     	; 0x100a0 <testpage+0x5a>
   10090:	2a 97       	sbiw	r28, 0x0a	; 10
   10092:	49 f4       	brne	.+18     	; 0x100a6 <testpage+0x60>
   10094:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <_pagesize>
   10098:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <_pagesize+0x1>
   1009c:	01 97       	sbiw	r24, 0x01	; 1
   1009e:	05 c0       	rjmp	.+10     	; 0x100aa <testpage+0x64>
   100a0:	8f ef       	ldi	r24, 0xFF	; 255
   100a2:	9f ef       	ldi	r25, 0xFF	; 255
   100a4:	02 c0       	rjmp	.+4      	; 0x100aa <testpage+0x64>
   100a6:	80 e0       	ldi	r24, 0x00	; 0
   100a8:	90 e0       	ldi	r25, 0x00	; 0
   100aa:	cd b7       	in	r28, 0x3d	; 61
   100ac:	de b7       	in	r29, 0x3e	; 62
   100ae:	23 96       	adiw	r28, 0x03	; 3
   100b0:	e2 e0       	ldi	r30, 0x02	; 2
   100b2:	0c 94 f4 e3 	jmp	0x1c7e8	; 0x1c7e8 <__epilogue_restores__+0x20>

000100b6 <cat>:
/// @param[in] name: file name.
/// @param[in] option: --p page display
/// @return  void.
MEMSPACE
long cat(char *name, int dopage)
{
   100b6:	a7 e0       	ldi	r26, 0x07	; 7
   100b8:	b1 e0       	ldi	r27, 0x01	; 1
   100ba:	e1 e6       	ldi	r30, 0x61	; 97
   100bc:	f0 e8       	ldi	r31, 0x80	; 128
   100be:	0c 94 ce e3 	jmp	0x1c79c	; 0x1c79c <__prologue_saves__+0xc>
   100c2:	8c 01       	movw	r16, r24
   100c4:	4b 01       	movw	r8, r22
    FILE *fp;
    int count = 0;
    int size = 0;
    char line[256];

    fp = fopen(name,"rb");
   100c6:	6c e1       	ldi	r22, 0x1C	; 28
   100c8:	78 e0       	ldi	r23, 0x08	; 8
   100ca:	92 de       	rcall	.-732    	; 0xfdf0 <fopen>
   100cc:	7c 01       	movw	r14, r24
    if (!fp)
   100ce:	89 2b       	or	r24, r25
   100d0:	41 f0       	breq	.+16     	; 0x100e2 <cat+0x2c>
   100d2:	c1 2c       	mov	r12, r1
   100d4:	d1 2c       	mov	r13, r1
   100d6:	a1 2c       	mov	r10, r1
   100d8:	b1 2c       	mov	r11, r1
    {
        printf("Can't open: %s\n", name);
        return(0);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
   100da:	8e 01       	movw	r16, r28
   100dc:	08 5f       	subi	r16, 0xF8	; 248
   100de:	1f 4f       	sbci	r17, 0xFF	; 255
   100e0:	22 c0       	rjmp	.+68     	; 0x10126 <cat+0x70>
    char line[256];

    fp = fopen(name,"rb");
    if (!fp)
    {
        printf("Can't open: %s\n", name);
   100e2:	ed b7       	in	r30, 0x3d	; 61
   100e4:	fe b7       	in	r31, 0x3e	; 62
   100e6:	15 83       	std	Z+5, r17	; 0x05
   100e8:	04 83       	std	Z+4, r16	; 0x04
   100ea:	8e ea       	ldi	r24, 0xAE	; 174
   100ec:	9c e0       	ldi	r25, 0x0C	; 12
   100ee:	a0 e0       	ldi	r26, 0x00	; 0
   100f0:	81 83       	std	Z+1, r24	; 0x01
   100f2:	92 83       	std	Z+2, r25	; 0x02
   100f4:	a3 83       	std	Z+3, r26	; 0x03
   100f6:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
        return(0);
   100fa:	c1 2c       	mov	r12, r1
   100fc:	d1 2c       	mov	r13, r1
   100fe:	76 01       	movw	r14, r12
   10100:	3f c0       	rjmp	.+126    	; 0x10180 <cat+0xca>
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    {
        trim_tail(line);
   10102:	c8 01       	movw	r24, r16
   10104:	0e 94 13 33 	call	0x6626	; 0x6626 <trim_tail>
        size += strlen(line);
   10108:	f8 01       	movw	r30, r16
   1010a:	01 90       	ld	r0, Z+
   1010c:	00 20       	and	r0, r0
   1010e:	e9 f7       	brne	.-6      	; 0x1010a <cat+0x54>
   10110:	31 97       	sbiw	r30, 0x01	; 1
   10112:	e0 1b       	sub	r30, r16
   10114:	f1 0b       	sbc	r31, r17
   10116:	ce 0e       	add	r12, r30
   10118:	df 1e       	adc	r13, r31
        puts(line);
   1011a:	c8 01       	movw	r24, r16
   1011c:	0e 94 6a 77 	call	0xeed4	; 0xeed4 <puts>
        if(dopage)
   10120:	81 14       	cp	r8, r1
   10122:	91 04       	cpc	r9, r1
   10124:	49 f4       	brne	.+18     	; 0x10138 <cat+0x82>
    if (!fp)
    {
        printf("Can't open: %s\n", name);
        return(0);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
   10126:	a7 01       	movw	r20, r14
   10128:	6e ef       	ldi	r22, 0xFE	; 254
   1012a:	70 e0       	ldi	r23, 0x00	; 0
   1012c:	c8 01       	movw	r24, r16
   1012e:	0e 94 1e 77 	call	0xee3c	; 0xee3c <fgets>
   10132:	89 2b       	or	r24, r25
   10134:	31 f7       	brne	.-52     	; 0x10102 <cat+0x4c>
   10136:	06 c0       	rjmp	.+12     	; 0x10144 <cat+0x8e>
        trim_tail(line);
        size += strlen(line);
        puts(line);
        if(dopage)
        {
            count = testpage(++count);
   10138:	c5 01       	movw	r24, r10
   1013a:	01 96       	adiw	r24, 0x01	; 1
   1013c:	84 df       	rcall	.-248    	; 0x10046 <testpage>
   1013e:	5c 01       	movw	r10, r24
            if(count < 0)
   10140:	97 ff       	sbrs	r25, 7
   10142:	f1 cf       	rjmp	.-30     	; 0x10126 <cat+0x70>
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    printf("\n");
   10144:	8c ea       	ldi	r24, 0xAC	; 172
   10146:	9c e0       	ldi	r25, 0x0C	; 12
   10148:	a0 e0       	ldi	r26, 0x00	; 0
   1014a:	ed b7       	in	r30, 0x3d	; 61
   1014c:	fe b7       	in	r31, 0x3e	; 62
   1014e:	81 83       	std	Z+1, r24	; 0x01
   10150:	92 83       	std	Z+2, r25	; 0x02
   10152:	a3 83       	std	Z+3, r26	; 0x03
   10154:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    fclose(fp);
   10158:	c7 01       	movw	r24, r14
   1015a:	f4 dc       	rcall	.-1560   	; 0xfb44 <fclose>
    printf("%ld bytes\n", (long)size);
   1015c:	0d 2c       	mov	r0, r13
   1015e:	00 0c       	add	r0, r0
   10160:	ee 08       	sbc	r14, r14
   10162:	ff 08       	sbc	r15, r15
   10164:	ed b7       	in	r30, 0x3d	; 61
   10166:	fe b7       	in	r31, 0x3e	; 62
   10168:	c4 82       	std	Z+4, r12	; 0x04
   1016a:	d5 82       	std	Z+5, r13	; 0x05
   1016c:	e6 82       	std	Z+6, r14	; 0x06
   1016e:	f7 82       	std	Z+7, r15	; 0x07
   10170:	81 ea       	ldi	r24, 0xA1	; 161
   10172:	9c e0       	ldi	r25, 0x0C	; 12
   10174:	a0 e0       	ldi	r26, 0x00	; 0
   10176:	81 83       	std	Z+1, r24	; 0x01
   10178:	92 83       	std	Z+2, r25	; 0x02
   1017a:	a3 83       	std	Z+3, r26	; 0x03
   1017c:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    return(size);
}
   10180:	c7 01       	movw	r24, r14
   10182:	b6 01       	movw	r22, r12
   10184:	c9 5f       	subi	r28, 0xF9	; 249
   10186:	de 4f       	sbci	r29, 0xFE	; 254
   10188:	ec e0       	ldi	r30, 0x0C	; 12
   1018a:	0c 94 ea e3 	jmp	0x1c7d4	; 0x1c7d4 <__epilogue_restores__+0xc>

0001018e <ls_info>:
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
   1018e:	4f 92       	push	r4
   10190:	5f 92       	push	r5
   10192:	6f 92       	push	r6
   10194:	7f 92       	push	r7
   10196:	af 92       	push	r10
   10198:	bf 92       	push	r11
   1019a:	cf 92       	push	r12
   1019c:	df 92       	push	r13
   1019e:	ef 92       	push	r14
   101a0:	ff 92       	push	r15
   101a2:	0f 93       	push	r16
   101a4:	1f 93       	push	r17
   101a6:	cf 93       	push	r28
   101a8:	df 93       	push	r29
   101aa:	cd b7       	in	r28, 0x3d	; 61
   101ac:	de b7       	in	r29, 0x3e	; 62
   101ae:	c9 54       	subi	r28, 0x49	; 73
   101b0:	d1 09       	sbc	r29, r1
   101b2:	0f b6       	in	r0, 0x3f	; 63
   101b4:	f8 94       	cli
   101b6:	de bf       	out	0x3e, r29	; 62
   101b8:	0f be       	out	0x3f, r0	; 63
   101ba:	cd bf       	out	0x3d, r28	; 61
   101bc:	8c 01       	movw	r16, r24
   101be:	7b 01       	movw	r14, r22
    uint16_t mask;
    char *cm = "rwx";
    char attr[12], *p;


    if(stat(name, &sp) == -1) 
   101c0:	be 01       	movw	r22, r28
   101c2:	62 5f       	subi	r22, 0xF2	; 242
   101c4:	7f 4f       	sbci	r23, 0xFF	; 255
   101c6:	27 d9       	rcall	.-3506   	; 0xf416 <stat>
   101c8:	01 96       	adiw	r24, 0x01	; 1
   101ca:	79 f4       	brne	.+30     	; 0x101ea <ls_info+0x5c>
    {
        printf("can not stat: %s\n", name);
   101cc:	ed b7       	in	r30, 0x3d	; 61
   101ce:	fe b7       	in	r31, 0x3e	; 62
   101d0:	15 83       	std	Z+5, r17	; 0x05
   101d2:	04 83       	std	Z+4, r16	; 0x04
   101d4:	81 e1       	ldi	r24, 0x11	; 17
   101d6:	9c e0       	ldi	r25, 0x0C	; 12
   101d8:	a0 e0       	ldi	r26, 0x00	; 0
   101da:	81 83       	std	Z+1, r24	; 0x01
   101dc:	92 83       	std	Z+2, r25	; 0x02
   101de:	a3 83       	std	Z+3, r26	; 0x03
   101e0:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
        return(0);
   101e4:	80 e0       	ldi	r24, 0x00	; 0
   101e6:	90 e0       	ldi	r25, 0x00	; 0
   101e8:	77 c0       	rjmp	.+238    	; 0x102d8 <ls_info+0x14a>
    }

    if(!verbose)
   101ea:	ef 28       	or	r14, r15
   101ec:	81 f4       	brne	.+32     	; 0x1020e <ls_info+0x80>
    {
        printf("%s\n",basename(name));
   101ee:	c8 01       	movw	r24, r16
   101f0:	0e 94 d7 77 	call	0xefae	; 0xefae <basename>
   101f4:	ed b7       	in	r30, 0x3d	; 61
   101f6:	fe b7       	in	r31, 0x3e	; 62
   101f8:	95 83       	std	Z+5, r25	; 0x05
   101fa:	84 83       	std	Z+4, r24	; 0x04
   101fc:	8d e0       	ldi	r24, 0x0D	; 13
   101fe:	9c e0       	ldi	r25, 0x0C	; 12
   10200:	a0 e0       	ldi	r26, 0x00	; 0
   10202:	81 83       	std	Z+1, r24	; 0x01
   10204:	92 83       	std	Z+2, r25	; 0x02
   10206:	a3 83       	std	Z+3, r26	; 0x03
   10208:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   1020c:	63 c0       	rjmp	.+198    	; 0x102d4 <ls_info+0x146>
        return(1);
    }

    p = attr;
    if(S_ISDIR(sp.st_mode))
   1020e:	4e 88       	ldd	r4, Y+22	; 0x16
   10210:	5f 88       	ldd	r5, Y+23	; 0x17
   10212:	68 8c       	ldd	r6, Y+24	; 0x18
   10214:	79 8c       	ldd	r7, Y+25	; 0x19
   10216:	d3 01       	movw	r26, r6
   10218:	c2 01       	movw	r24, r4
   1021a:	88 27       	eor	r24, r24
   1021c:	90 7f       	andi	r25, 0xF0	; 240
   1021e:	aa 27       	eor	r26, r26
   10220:	bb 27       	eor	r27, r27
   10222:	81 15       	cp	r24, r1
   10224:	90 44       	sbci	r25, 0x40	; 64
   10226:	a1 05       	cpc	r26, r1
   10228:	b1 05       	cpc	r27, r1
   1022a:	11 f4       	brne	.+4      	; 0x10230 <ls_info+0xa2>
        *p++ = 'd';
   1022c:	84 e6       	ldi	r24, 0x64	; 100
   1022e:	01 c0       	rjmp	.+2      	; 0x10232 <ls_info+0xa4>
    else
        *p++ = '-';
   10230:	8d e2       	ldi	r24, 0x2D	; 45
   10232:	8e af       	std	Y+62, r24	; 0x3e
   10234:	fe 01       	movw	r30, r28
   10236:	fe 96       	adiw	r30, 0x3e	; 62
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
   10238:	e1 2c       	mov	r14, r1
   1023a:	ff 24       	eor	r15, r15
   1023c:	f3 94       	inc	r15
   1023e:	20 e0       	ldi	r18, 0x00	; 0
   10240:	30 e0       	ldi	r19, 0x00	; 0
   10242:	be 2e       	mov	r11, r30
   10244:	af 2e       	mov	r10, r31
    {
        // User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
   10246:	4d e2       	ldi	r20, 0x2D	; 45
    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
        // User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
   10248:	53 e0       	ldi	r21, 0x03	; 3
   1024a:	c5 2e       	mov	r12, r21
   1024c:	d1 2c       	mov	r13, r1

    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
        // User
        if( sp.st_mode & mask)
   1024e:	c7 01       	movw	r24, r14
   10250:	a0 e0       	ldi	r26, 0x00	; 0
   10252:	b0 e0       	ldi	r27, 0x00	; 0
   10254:	84 21       	and	r24, r4
   10256:	95 21       	and	r25, r5
   10258:	a6 21       	and	r26, r6
   1025a:	b7 21       	and	r27, r7
   1025c:	89 2b       	or	r24, r25
   1025e:	8a 2b       	or	r24, r26
   10260:	8b 2b       	or	r24, r27
   10262:	51 f0       	breq	.+20     	; 0x10278 <ls_info+0xea>
            *p++ = cm[ i % 3];
   10264:	c9 01       	movw	r24, r18
   10266:	b6 01       	movw	r22, r12
   10268:	0e 94 33 e3 	call	0x1c666	; 0x1c666 <__divmodhi4>
   1026c:	dc 01       	movw	r26, r24
   1026e:	a8 52       	subi	r26, 0x28	; 40
   10270:	b5 4f       	sbci	r27, 0xF5	; 245
   10272:	8c 91       	ld	r24, X
   10274:	81 83       	std	Z+1, r24	; 0x01
   10276:	01 c0       	rjmp	.+2      	; 0x1027a <ls_info+0xec>
        else
            *p++ = '-';
   10278:	41 83       	std	Z+1, r20	; 0x01
        mask >>= 1;
   1027a:	f6 94       	lsr	r15
   1027c:	e7 94       	ror	r14
        *p++ = 'd';
    else
        *p++ = '-';

    mask = 4 << 6;
    for(i=0;i<9;++i)
   1027e:	2f 5f       	subi	r18, 0xFF	; 255
   10280:	3f 4f       	sbci	r19, 0xFF	; 255
   10282:	31 96       	adiw	r30, 0x01	; 1
   10284:	29 30       	cpi	r18, 0x09	; 9
   10286:	31 05       	cpc	r19, r1
   10288:	11 f7       	brne	.-60     	; 0x1024e <ls_info+0xc0>
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
        mask >>= 1;
    }
    *p = 0;
   1028a:	29 96       	adiw	r28, 0x09	; 9
   1028c:	1f ae       	std	Y+63, r1	; 0x3f
   1028e:	29 97       	sbiw	r28, 0x09	; 9

    printf("%s none none %12ld %s %s\n",
   10290:	4e a0       	ldd	r4, Y+38	; 0x26
   10292:	5f a0       	ldd	r5, Y+39	; 0x27
   10294:	68 a4       	ldd	r6, Y+40	; 0x28
   10296:	79 a4       	ldd	r7, Y+41	; 0x29
   10298:	6e a9       	ldd	r22, Y+54	; 0x36
   1029a:	7f a9       	ldd	r23, Y+55	; 0x37
   1029c:	88 ad       	ldd	r24, Y+56	; 0x38
   1029e:	99 ad       	ldd	r25, Y+57	; 0x39
   102a0:	0e 94 b2 77 	call	0xef64	; 0xef64 <mctime>
   102a4:	7c 01       	movw	r14, r24
   102a6:	c8 01       	movw	r24, r16
   102a8:	0e 94 d7 77 	call	0xefae	; 0xefae <basename>
   102ac:	ed b7       	in	r30, 0x3d	; 61
   102ae:	fe b7       	in	r31, 0x3e	; 62
   102b0:	95 87       	std	Z+13, r25	; 0x0d
   102b2:	84 87       	std	Z+12, r24	; 0x0c
   102b4:	f3 86       	std	Z+11, r15	; 0x0b
   102b6:	e2 86       	std	Z+10, r14	; 0x0a
   102b8:	46 82       	std	Z+6, r4	; 0x06
   102ba:	57 82       	std	Z+7, r5	; 0x07
   102bc:	60 86       	std	Z+8, r6	; 0x08
   102be:	71 86       	std	Z+9, r7	; 0x09
   102c0:	b4 82       	std	Z+4, r11	; 0x04
   102c2:	a5 82       	std	Z+5, r10	; 0x05
   102c4:	83 ef       	ldi	r24, 0xF3	; 243
   102c6:	9b e0       	ldi	r25, 0x0B	; 11
   102c8:	a0 e0       	ldi	r26, 0x00	; 0
   102ca:	81 83       	std	Z+1, r24	; 0x01
   102cc:	92 83       	std	Z+2, r25	; 0x02
   102ce:	a3 83       	std	Z+3, r26	; 0x03
   102d0:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
        attr, 
        (long) sp.st_size, 
        mctime((time_t)sp.st_mtime),
        basename(name));
    return(1);
   102d4:	81 e0       	ldi	r24, 0x01	; 1
   102d6:	90 e0       	ldi	r25, 0x00	; 0
}
   102d8:	c7 5b       	subi	r28, 0xB7	; 183
   102da:	df 4f       	sbci	r29, 0xFF	; 255
   102dc:	0f b6       	in	r0, 0x3f	; 63
   102de:	f8 94       	cli
   102e0:	de bf       	out	0x3e, r29	; 62
   102e2:	0f be       	out	0x3f, r0	; 63
   102e4:	cd bf       	out	0x3d, r28	; 61
   102e6:	df 91       	pop	r29
   102e8:	cf 91       	pop	r28
   102ea:	1f 91       	pop	r17
   102ec:	0f 91       	pop	r16
   102ee:	ff 90       	pop	r15
   102f0:	ef 90       	pop	r14
   102f2:	df 90       	pop	r13
   102f4:	cf 90       	pop	r12
   102f6:	bf 90       	pop	r11
   102f8:	af 90       	pop	r10
   102fa:	7f 90       	pop	r7
   102fc:	6f 90       	pop	r6
   102fe:	5f 90       	pop	r5
   10300:	4f 90       	pop	r4
   10302:	08 95       	ret

00010304 <ls>:
/// @param[in] path: file name or directory
/// @param[in] option: -l for detail
/// @return  number of files
MEMSPACE
int ls(char *name, int verbose)
{
   10304:	2f 92       	push	r2
   10306:	3f 92       	push	r3
   10308:	4f 92       	push	r4
   1030a:	5f 92       	push	r5
   1030c:	6f 92       	push	r6
   1030e:	8f 92       	push	r8
   10310:	9f 92       	push	r9
   10312:	af 92       	push	r10
   10314:	bf 92       	push	r11
   10316:	cf 92       	push	r12
   10318:	df 92       	push	r13
   1031a:	ef 92       	push	r14
   1031c:	ff 92       	push	r15
   1031e:	0f 93       	push	r16
   10320:	1f 93       	push	r17
   10322:	cf 93       	push	r28
   10324:	df 93       	push	r29
   10326:	cd b7       	in	r28, 0x3d	; 61
   10328:	de b7       	in	r29, 0x3e	; 62
   1032a:	c7 53       	subi	r28, 0x37	; 55
   1032c:	d1 40       	sbci	r29, 0x01	; 1
   1032e:	0f b6       	in	r0, 0x3f	; 63
   10330:	f8 94       	cli
   10332:	de bf       	out	0x3e, r29	; 62
   10334:	0f be       	out	0x3f, r0	; 63
   10336:	cd bf       	out	0x3d, r28	; 61
   10338:	7c 01       	movw	r14, r24
   1033a:	4b 01       	movw	r8, r22
    int files = 0;
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
   1033c:	1e 82       	std	Y+6, r1	; 0x06
   1033e:	8e 01       	movw	r16, r28
   10340:	0a 5f       	subi	r16, 0xFA	; 250
   10342:	1f 4f       	sbci	r17, 0xFF	; 255
    if(!name || !*name || MATCH(name,".") )
   10344:	00 97       	sbiw	r24, 0x00	; 0
   10346:	91 f4       	brne	.+36     	; 0x1036c <ls+0x68>
    {
        if( !getcwd(fullpath, sizeof(fullpath)-2) )
   10348:	6e ef       	ldi	r22, 0xFE	; 254
   1034a:	70 e0       	ldi	r23, 0x00	; 0
   1034c:	c8 01       	movw	r24, r16
   1034e:	0e 94 2d 78 	call	0xf05a	; 0xf05a <getcwd>
   10352:	89 2b       	or	r24, r25
   10354:	d1 f4       	brne	.+52     	; 0x1038a <ls+0x86>
        {
            printf("ls: Can't get current directory\n"); 
   10356:	82 ed       	ldi	r24, 0xD2	; 210
   10358:	9b e0       	ldi	r25, 0x0B	; 11
   1035a:	a0 e0       	ldi	r26, 0x00	; 0
   1035c:	ed b7       	in	r30, 0x3d	; 61
   1035e:	fe b7       	in	r31, 0x3e	; 62
   10360:	81 83       	std	Z+1, r24	; 0x01
   10362:	92 83       	std	Z+2, r25	; 0x02
   10364:	a3 83       	std	Z+3, r26	; 0x03
   10366:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   1036a:	37 c0       	rjmp	.+110    	; 0x103da <ls+0xd6>
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
    if(!name || !*name || MATCH(name,".") )
   1036c:	fc 01       	movw	r30, r24
   1036e:	80 81       	ld	r24, Z
   10370:	88 23       	and	r24, r24
   10372:	51 f3       	breq	.-44     	; 0x10348 <ls+0x44>
   10374:	6b e0       	ldi	r22, 0x0B	; 11
   10376:	72 e1       	ldi	r23, 0x12	; 18
   10378:	c7 01       	movw	r24, r14
   1037a:	0e 94 2d 33 	call	0x665a	; 0x665a <MATCH>
   1037e:	89 2b       	or	r24, r25
   10380:	19 f7       	brne	.-58     	; 0x10348 <ls+0x44>

        }
    }
    else
    {
        strcpy(fullpath,name);
   10382:	b7 01       	movw	r22, r14
   10384:	c8 01       	movw	r24, r16
   10386:	0e 94 35 32 	call	0x646a	; 0x646a <strcpy>
    }
    len = strlen(fullpath);
   1038a:	f8 01       	movw	r30, r16
   1038c:	01 90       	ld	r0, Z+
   1038e:	00 20       	and	r0, r0
   10390:	e9 f7       	brne	.-6      	; 0x1038c <ls+0x88>
   10392:	31 97       	sbiw	r30, 0x01	; 1
   10394:	1f 01       	movw	r2, r30
   10396:	20 1a       	sub	r2, r16
   10398:	31 0a       	sbc	r3, r17


    printf("Listing:[%s]\n",fullpath);
   1039a:	ed b7       	in	r30, 0x3d	; 61
   1039c:	fe b7       	in	r31, 0x3e	; 62
   1039e:	15 83       	std	Z+5, r17	; 0x05
   103a0:	04 83       	std	Z+4, r16	; 0x04
   103a2:	84 ec       	ldi	r24, 0xC4	; 196
   103a4:	9b e0       	ldi	r25, 0x0B	; 11
   103a6:	a0 e0       	ldi	r26, 0x00	; 0
   103a8:	81 83       	std	Z+1, r24	; 0x01
   103aa:	92 83       	std	Z+2, r25	; 0x02
   103ac:	a3 83       	std	Z+3, r26	; 0x03
   103ae:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>

    if (stat(fullpath, &st)) 
   103b2:	be 01       	movw	r22, r28
   103b4:	6a 5f       	subi	r22, 0xFA	; 250
   103b6:	7e 4f       	sbci	r23, 0xFE	; 254
   103b8:	c8 01       	movw	r24, r16
   103ba:	2d d8       	rcall	.-4006   	; 0xf416 <stat>
   103bc:	7c 01       	movw	r14, r24
   103be:	89 2b       	or	r24, r25
   103c0:	79 f0       	breq	.+30     	; 0x103e0 <ls+0xdc>
    { 
        printf("ls: cannot stat [%s]\n", fullpath); 
   103c2:	ed b7       	in	r30, 0x3d	; 61
   103c4:	fe b7       	in	r31, 0x3e	; 62
   103c6:	15 83       	std	Z+5, r17	; 0x05
   103c8:	04 83       	std	Z+4, r16	; 0x04
   103ca:	8e ea       	ldi	r24, 0xAE	; 174
   103cc:	9b e0       	ldi	r25, 0x0B	; 11
   103ce:	a0 e0       	ldi	r26, 0x00	; 0
   103d0:	81 83       	std	Z+1, r24	; 0x01
   103d2:	92 83       	std	Z+2, r25	; 0x02
   103d4:	a3 83       	std	Z+3, r26	; 0x03
   103d6:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
        return(0); 
   103da:	e1 2c       	mov	r14, r1
   103dc:	f1 2c       	mov	r15, r1
   103de:	8b c0       	rjmp	.+278    	; 0x104f6 <ls+0x1f2>
    }

    switch (st.st_mode & S_IFMT) 
   103e0:	c2 5f       	subi	r28, 0xF2	; 242
   103e2:	de 4f       	sbci	r29, 0xFE	; 254
   103e4:	88 81       	ld	r24, Y
   103e6:	99 81       	ldd	r25, Y+1	; 0x01
   103e8:	aa 81       	ldd	r26, Y+2	; 0x02
   103ea:	bb 81       	ldd	r27, Y+3	; 0x03
   103ec:	ce 50       	subi	r28, 0x0E	; 14
   103ee:	d1 40       	sbci	r29, 0x01	; 1
   103f0:	88 27       	eor	r24, r24
   103f2:	90 7f       	andi	r25, 0xF0	; 240
   103f4:	aa 27       	eor	r26, r26
   103f6:	bb 27       	eor	r27, r27
   103f8:	81 15       	cp	r24, r1
   103fa:	f0 e4       	ldi	r31, 0x40	; 64
   103fc:	9f 07       	cpc	r25, r31
   103fe:	a1 05       	cpc	r26, r1
   10400:	b1 05       	cpc	r27, r1
   10402:	51 f0       	breq	.+20     	; 0x10418 <ls+0x114>
   10404:	81 15       	cp	r24, r1
   10406:	90 48       	sbci	r25, 0x80	; 128
   10408:	a1 05       	cpc	r26, r1
   1040a:	b1 05       	cpc	r27, r1
   1040c:	09 f0       	breq	.+2      	; 0x10410 <ls+0x10c>
   1040e:	65 c0       	rjmp	.+202    	; 0x104da <ls+0x1d6>
    {
    case S_IFREG:
        ls_info(fullpath,verbose);
   10410:	b4 01       	movw	r22, r8
   10412:	c8 01       	movw	r24, r16
   10414:	bc de       	rcall	.-648    	; 0x1018e <ls_info>
   10416:	61 c0       	rjmp	.+194    	; 0x104da <ls+0x1d6>
        break;
    case S_IFDIR:
        dirp = opendir(fullpath);
   10418:	c8 01       	movw	r24, r16
   1041a:	0e 94 db 78 	call	0xf1b6	; 0xf1b6 <opendir>
   1041e:	5c 01       	movw	r10, r24
        if(!dirp)
   10420:	89 2b       	or	r24, r25
   10422:	81 f0       	breq	.+32     	; 0x10444 <ls+0x140>
    }
    else
    {
        strcpy(fullpath,name);
    }
    len = strlen(fullpath);
   10424:	e1 2c       	mov	r14, r1
   10426:	f1 2c       	mov	r15, r1
                strcat(fullpath,"/");
            }
            strcat(fullpath,de->d_name);
            files +=ls_info(fullpath,verbose);
            // restore path
            fullpath[len] = 0;
   10428:	c8 01       	movw	r24, r16
   1042a:	82 0d       	add	r24, r2
   1042c:	93 1d       	adc	r25, r3
   1042e:	ca 5c       	subi	r28, 0xCA	; 202
   10430:	de 4f       	sbci	r29, 0xFE	; 254
   10432:	99 83       	std	Y+1, r25	; 0x01
   10434:	88 83       	st	Y, r24
   10436:	c6 53       	subi	r28, 0x36	; 54
   10438:	d1 40       	sbci	r29, 0x01	; 1
                break;
            // FIXME neeed beetter string length tests here
            len2 = strlen(de->d_name);
            if(len + len2 >= MAX_NAME_LEN)
            {
                printf("name:[%s] too long with full path\n",de->d_name);
   1043a:	8b e7       	ldi	r24, 0x7B	; 123
   1043c:	9b e0       	ldi	r25, 0x0B	; 11
   1043e:	2c 01       	movw	r4, r24
   10440:	61 2c       	mov	r6, r1
   10442:	24 c0       	rjmp	.+72     	; 0x1048c <ls+0x188>
        break;
    case S_IFDIR:
        dirp = opendir(fullpath);
        if(!dirp)
        {
            printf("opendir failed\n");
   10444:	8e e9       	ldi	r24, 0x9E	; 158
   10446:	9b e0       	ldi	r25, 0x0B	; 11
   10448:	a0 e0       	ldi	r26, 0x00	; 0
   1044a:	ed b7       	in	r30, 0x3d	; 61
   1044c:	fe b7       	in	r31, 0x3e	; 62
   1044e:	81 83       	std	Z+1, r24	; 0x01
   10450:	92 83       	std	Z+2, r25	; 0x02
   10452:	a3 83       	std	Z+3, r26	; 0x03
   10454:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
            return(0);
   10458:	4e c0       	rjmp	.+156    	; 0x104f6 <ls+0x1f2>
        }
        while ( (de = readdir(dirp)) ) 
        {
            if(de->d_name[0] == 0)
   1045a:	f6 01       	movw	r30, r12
   1045c:	80 81       	ld	r24, Z
   1045e:	88 23       	and	r24, r24
   10460:	d9 f0       	breq	.+54     	; 0x10498 <ls+0x194>
                break;
            // FIXME neeed beetter string length tests here
            len2 = strlen(de->d_name);
   10462:	f6 01       	movw	r30, r12
   10464:	01 90       	ld	r0, Z+
   10466:	00 20       	and	r0, r0
   10468:	e9 f7       	brne	.-6      	; 0x10464 <ls+0x160>
   1046a:	31 97       	sbiw	r30, 0x01	; 1
   1046c:	ec 19       	sub	r30, r12
   1046e:	fd 09       	sbc	r31, r13
            if(len + len2 >= MAX_NAME_LEN)
   10470:	e2 0d       	add	r30, r2
   10472:	f3 1d       	adc	r31, r3
   10474:	ef 3f       	cpi	r30, 0xFF	; 255
   10476:	f1 05       	cpc	r31, r1
   10478:	9c f0       	brlt	.+38     	; 0x104a0 <ls+0x19c>
            {
                printf("name:[%s] too long with full path\n",de->d_name);
   1047a:	ed b7       	in	r30, 0x3d	; 61
   1047c:	fe b7       	in	r31, 0x3e	; 62
   1047e:	d5 82       	std	Z+5, r13	; 0x05
   10480:	c4 82       	std	Z+4, r12	; 0x04
   10482:	41 82       	std	Z+1, r4	; 0x01
   10484:	52 82       	std	Z+2, r5	; 0x02
   10486:	63 82       	std	Z+3, r6	; 0x03
   10488:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
        if(!dirp)
        {
            printf("opendir failed\n");
            return(0);
        }
        while ( (de = readdir(dirp)) ) 
   1048c:	c5 01       	movw	r24, r10
   1048e:	0e 94 f9 78 	call	0xf1f2	; 0xf1f2 <readdir>
   10492:	6c 01       	movw	r12, r24
   10494:	89 2b       	or	r24, r25
   10496:	09 f7       	brne	.-62     	; 0x1045a <ls+0x156>
#ifdef ESP8266
            optimistic_yield(1000);
            wdt_reset();
#endif
        }
        closedir(dirp);
   10498:	c5 01       	movw	r24, r10
   1049a:	0e 94 c0 78 	call	0xf180	; 0xf180 <closedir>
        break;
   1049e:	1f c0       	rjmp	.+62     	; 0x104de <ls+0x1da>
            if(len + len2 >= MAX_NAME_LEN)
            {
                printf("name:[%s] too long with full path\n",de->d_name);
                continue;
            }
            if(!MATCH(fullpath,"/") )
   104a0:	66 ec       	ldi	r22, 0xC6	; 198
   104a2:	77 e0       	ldi	r23, 0x07	; 7
   104a4:	c8 01       	movw	r24, r16
   104a6:	0e 94 2d 33 	call	0x665a	; 0x665a <MATCH>
   104aa:	89 2b       	or	r24, r25
   104ac:	29 f4       	brne	.+10     	; 0x104b8 <ls+0x1b4>
            {
                strcat(fullpath,"/");
   104ae:	66 ec       	ldi	r22, 0xC6	; 198
   104b0:	77 e0       	ldi	r23, 0x07	; 7
   104b2:	c8 01       	movw	r24, r16
   104b4:	0e 94 56 32 	call	0x64ac	; 0x64ac <strcat>
            }
            strcat(fullpath,de->d_name);
   104b8:	b6 01       	movw	r22, r12
   104ba:	c8 01       	movw	r24, r16
   104bc:	0e 94 56 32 	call	0x64ac	; 0x64ac <strcat>
            files +=ls_info(fullpath,verbose);
   104c0:	b4 01       	movw	r22, r8
   104c2:	c8 01       	movw	r24, r16
   104c4:	64 de       	rcall	.-824    	; 0x1018e <ls_info>
   104c6:	e8 0e       	add	r14, r24
   104c8:	f9 1e       	adc	r15, r25
            // restore path
            fullpath[len] = 0;
   104ca:	ca 5c       	subi	r28, 0xCA	; 202
   104cc:	de 4f       	sbci	r29, 0xFE	; 254
   104ce:	e8 81       	ld	r30, Y
   104d0:	f9 81       	ldd	r31, Y+1	; 0x01
   104d2:	c6 53       	subi	r28, 0x36	; 54
   104d4:	d1 40       	sbci	r29, 0x01	; 1
   104d6:	10 82       	st	Z, r1
   104d8:	d9 cf       	rjmp	.-78     	; 0x1048c <ls+0x188>
MEMSPACE
int ls(char *name, int verbose)
{
    struct stat st;
    DIR *dirp;
    int files = 0;
   104da:	e1 2c       	mov	r14, r1
   104dc:	f1 2c       	mov	r15, r1
#endif
        }
        closedir(dirp);
        break;
    }
    printf("Files: %d\n", (int)files);
   104de:	ed b7       	in	r30, 0x3d	; 61
   104e0:	fe b7       	in	r31, 0x3e	; 62
   104e2:	f5 82       	std	Z+5, r15	; 0x05
   104e4:	e4 82       	std	Z+4, r14	; 0x04
   104e6:	80 e7       	ldi	r24, 0x70	; 112
   104e8:	9b e0       	ldi	r25, 0x0B	; 11
   104ea:	a0 e0       	ldi	r26, 0x00	; 0
   104ec:	81 83       	std	Z+1, r24	; 0x01
   104ee:	92 83       	std	Z+2, r25	; 0x02
   104f0:	a3 83       	std	Z+3, r26	; 0x03
   104f2:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    return(files);
}
   104f6:	c7 01       	movw	r24, r14
   104f8:	c9 5c       	subi	r28, 0xC9	; 201
   104fa:	de 4f       	sbci	r29, 0xFE	; 254
   104fc:	0f b6       	in	r0, 0x3f	; 63
   104fe:	f8 94       	cli
   10500:	de bf       	out	0x3e, r29	; 62
   10502:	0f be       	out	0x3f, r0	; 63
   10504:	cd bf       	out	0x3d, r28	; 61
   10506:	df 91       	pop	r29
   10508:	cf 91       	pop	r28
   1050a:	1f 91       	pop	r17
   1050c:	0f 91       	pop	r16
   1050e:	ff 90       	pop	r15
   10510:	ef 90       	pop	r14
   10512:	df 90       	pop	r13
   10514:	cf 90       	pop	r12
   10516:	bf 90       	pop	r11
   10518:	af 90       	pop	r10
   1051a:	9f 90       	pop	r9
   1051c:	8f 90       	pop	r8
   1051e:	6f 90       	pop	r6
   10520:	5f 90       	pop	r5
   10522:	4f 90       	pop	r4
   10524:	3f 90       	pop	r3
   10526:	2f 90       	pop	r2
   10528:	08 95       	ret

0001052a <posix_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int posix_tests(int argc,char *argv[])
{
   1052a:	a5 e0       	ldi	r26, 0x05	; 5
   1052c:	b1 e0       	ldi	r27, 0x01	; 1
   1052e:	eb e9       	ldi	r30, 0x9B	; 155
   10530:	f2 e8       	ldi	r31, 0x82	; 130
   10532:	0c 94 ca e3 	jmp	0x1c794	; 0x1c794 <__prologue_saves__+0x4>
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   10536:	fb 01       	movw	r30, r22
   10538:	c0 80       	ld	r12, Z
   1053a:	d1 80       	ldd	r13, Z+1	; 0x01

    if(!ptr)
   1053c:	c1 14       	cp	r12, r1
   1053e:	d1 04       	cpc	r13, r1
   10540:	19 f4       	brne	.+6      	; 0x10548 <posix_tests+0x1e>
        return(0);
   10542:	80 e0       	ldi	r24, 0x00	; 0
   10544:	90 e0       	ldi	r25, 0x00	; 0
   10546:	5e c1       	rjmp	.+700    	; 0x10804 <posix_tests+0x2da>
   10548:	4b 01       	movw	r8, r22
   1054a:	8c 01       	movw	r16, r24

    if( MATCH(ptr,"posix") )
   1054c:	6c ed       	ldi	r22, 0xDC	; 220
   1054e:	7a e0       	ldi	r23, 0x0A	; 10
   10550:	c6 01       	movw	r24, r12
   10552:	0e 94 2d 33 	call	0x665a	; 0x665a <MATCH>
   10556:	89 2b       	or	r24, r25
   10558:	a9 f0       	breq	.+42     	; 0x10584 <posix_tests+0x5a>
    {
        ptr = argv[ind++];
   1055a:	f4 01       	movw	r30, r8
   1055c:	c2 80       	ldd	r12, Z+2	; 0x02
   1055e:	d3 80       	ldd	r13, Z+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
   10560:	c1 14       	cp	r12, r1
   10562:	d1 04       	cpc	r13, r1
   10564:	21 f4       	brne	.+8      	; 0x1056e <posix_tests+0x44>
        {
            posix_help(1);
   10566:	81 e0       	ldi	r24, 0x01	; 1
   10568:	90 e0       	ldi	r25, 0x00	; 0
   1056a:	6e dc       	rcall	.-1828   	; 0xfe48 <posix_help>
   1056c:	49 c1       	rjmp	.+658    	; 0x10800 <posix_tests+0x2d6>
        return(0);

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
   1056e:	6c eb       	ldi	r22, 0xBC	; 188
   10570:	75 e1       	ldi	r23, 0x15	; 21
   10572:	c6 01       	movw	r24, r12
   10574:	0e 94 2d 33 	call	0x665a	; 0x665a <MATCH>
   10578:	89 2b       	or	r24, r25
   1057a:	a9 f7       	brne	.-22     	; 0x10566 <posix_tests+0x3c>
    if(!ptr)
        return(0);

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
   1057c:	62 e0       	ldi	r22, 0x02	; 2
   1057e:	66 2e       	mov	r6, r22
   10580:	71 2c       	mov	r7, r1
   10582:	03 c0       	rjmp	.+6      	; 0x1058a <posix_tests+0x60>
{
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   10584:	66 24       	eor	r6, r6
   10586:	63 94       	inc	r6
   10588:	71 2c       	mov	r7, r1
            posix_help(1);
            return(1);
        }
    }

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
   1058a:	73 01       	movw	r14, r6
   1058c:	ff ef       	ldi	r31, 0xFF	; 255
   1058e:	ef 1a       	sub	r14, r31
   10590:	ff 0a       	sbc	r15, r31
   10592:	98 01       	movw	r18, r16
   10594:	a7 01       	movw	r20, r14
   10596:	62 ee       	ldi	r22, 0xE2	; 226
   10598:	7a e0       	ldi	r23, 0x0A	; 10
   1059a:	c6 01       	movw	r24, r12
   1059c:	0e 94 41 33 	call	0x6682	; 0x6682 <MATCHARGS>
   105a0:	89 2b       	or	r24, r25
   105a2:	a1 f1       	breq	.+104    	; 0x1060c <posix_tests+0xe2>
   105a4:	73 01       	movw	r14, r6
   105a6:	ee 0c       	add	r14, r14
   105a8:	ff 1c       	adc	r15, r15
   105aa:	e8 0c       	add	r14, r8
   105ac:	f9 1c       	adc	r15, r9
   105ae:	57 01       	movw	r10, r14
   105b0:	47 01       	movw	r8, r14
   105b2:	63 01       	movw	r12, r6
   105b4:	41 2c       	mov	r4, r1
   105b6:	51 2c       	mov	r5, r1
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   105b8:	c0 16       	cp	r12, r16
   105ba:	d1 06       	cpc	r13, r17
   105bc:	1c f5       	brge	.+70     	; 0x10604 <posix_tests+0xda>
        {
            if(MATCH(argv[i],"-p"))
   105be:	66 ee       	ldi	r22, 0xE6	; 230
   105c0:	7a e0       	ldi	r23, 0x0A	; 10
   105c2:	f4 01       	movw	r30, r8
   105c4:	81 91       	ld	r24, Z+
   105c6:	91 91       	ld	r25, Z+
   105c8:	4f 01       	movw	r8, r30
   105ca:	0e 94 2d 33 	call	0x665a	; 0x665a <MATCH>
   105ce:	89 2b       	or	r24, r25
   105d0:	19 f0       	breq	.+6      	; 0x105d8 <posix_tests+0xae>
                page = 1;
   105d2:	44 24       	eor	r4, r4
   105d4:	43 94       	inc	r4
   105d6:	51 2c       	mov	r5, r1

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   105d8:	ff ef       	ldi	r31, 0xFF	; 255
   105da:	cf 1a       	sub	r12, r31
   105dc:	df 0a       	sbc	r13, r31
   105de:	ec cf       	rjmp	.-40     	; 0x105b8 <posix_tests+0x8e>
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
        {
            if(!MATCH(argv[i],"-p"))
   105e0:	66 ee       	ldi	r22, 0xE6	; 230
   105e2:	7a e0       	ldi	r23, 0x0A	; 10
   105e4:	f5 01       	movw	r30, r10
   105e6:	81 91       	ld	r24, Z+
   105e8:	91 91       	ld	r25, Z+
   105ea:	5f 01       	movw	r10, r30
   105ec:	0e 94 2d 33 	call	0x665a	; 0x665a <MATCH>
   105f0:	89 2b       	or	r24, r25
   105f2:	29 f4       	brne	.+10     	; 0x105fe <posix_tests+0xd4>
                cat(argv[ind], page);
   105f4:	b2 01       	movw	r22, r4
   105f6:	f7 01       	movw	r30, r14
   105f8:	80 81       	ld	r24, Z
   105fa:	91 81       	ldd	r25, Z+1	; 0x01
   105fc:	5c dd       	rcall	.-1352   	; 0x100b6 <cat>
        for(i=ind;i<argc;++i)
        {
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
   105fe:	ff ef       	ldi	r31, 0xFF	; 255
   10600:	6f 1a       	sub	r6, r31
   10602:	7f 0a       	sbc	r7, r31
   10604:	60 16       	cp	r6, r16
   10606:	71 06       	cpc	r7, r17
   10608:	5c f3       	brlt	.-42     	; 0x105e0 <posix_tests+0xb6>
   1060a:	fa c0       	rjmp	.+500    	; 0x10800 <posix_tests+0x2d6>
        chmod( argv[ind],strtol(argv[ind+1],NULL,8));
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"copy", (ind + 2), argc))
   1060c:	53 01       	movw	r10, r6
   1060e:	82 e0       	ldi	r24, 0x02	; 2
   10610:	a8 0e       	add	r10, r24
   10612:	b1 1c       	adc	r11, r1
   10614:	98 01       	movw	r18, r16
   10616:	a5 01       	movw	r20, r10
   10618:	69 ee       	ldi	r22, 0xE9	; 233
   1061a:	7a e0       	ldi	r23, 0x0A	; 10
   1061c:	c6 01       	movw	r24, r12
   1061e:	0e 94 41 33 	call	0x6682	; 0x6682 <MATCHARGS>
   10622:	89 2b       	or	r24, r25
   10624:	59 f0       	breq	.+22     	; 0x1063c <posix_tests+0x112>
    {
        copy(argv[ind],argv[ind+1]);
   10626:	f3 01       	movw	r30, r6
   10628:	ee 0f       	add	r30, r30
   1062a:	ff 1f       	adc	r31, r31
   1062c:	e8 0d       	add	r30, r8
   1062e:	f9 1d       	adc	r31, r9
   10630:	62 81       	ldd	r22, Z+2	; 0x02
   10632:	73 81       	ldd	r23, Z+3	; 0x03
   10634:	80 81       	ld	r24, Z
   10636:	91 81       	ldd	r25, Z+1	; 0x01
   10638:	28 dc       	rcall	.-1968   	; 0xfe8a <copy>
   1063a:	e2 c0       	rjmp	.+452    	; 0x10800 <posix_tests+0x2d6>
        return(1);
    }

    if (MATCHARGS(ptr,"cd", (ind + 1), argc))
   1063c:	98 01       	movw	r18, r16
   1063e:	a7 01       	movw	r20, r14
   10640:	6e ee       	ldi	r22, 0xEE	; 238
   10642:	7a e0       	ldi	r23, 0x0A	; 10
   10644:	c6 01       	movw	r24, r12
   10646:	0e 94 41 33 	call	0x6682	; 0x6682 <MATCHARGS>
   1064a:	89 2b       	or	r24, r25
   1064c:	51 f0       	breq	.+20     	; 0x10662 <posix_tests+0x138>
    {
        chdir(argv[ind]);
   1064e:	f3 01       	movw	r30, r6
   10650:	ee 0f       	add	r30, r30
   10652:	ff 1f       	adc	r31, r31
   10654:	e8 0d       	add	r30, r8
   10656:	f9 1d       	adc	r31, r9
   10658:	80 81       	ld	r24, Z
   1065a:	91 81       	ldd	r25, Z+1	; 0x01
   1065c:	0e 94 e5 77 	call	0xefca	; 0xefca <chdir>
   10660:	cf c0       	rjmp	.+414    	; 0x10800 <posix_tests+0x2d6>
        logfile(argv[ind],argv[ind+1]);
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
   10662:	98 01       	movw	r18, r16
   10664:	a3 01       	movw	r20, r6
   10666:	68 ef       	ldi	r22, 0xF8	; 248
   10668:	77 e0       	ldi	r23, 0x07	; 7
   1066a:	c6 01       	movw	r24, r12
   1066c:	0e 94 41 33 	call	0x6682	; 0x6682 <MATCHARGS>
   10670:	89 2b       	or	r24, r25
   10672:	69 f1       	breq	.+90     	; 0x106ce <posix_tests+0x1a4>
   10674:	73 01       	movw	r14, r6
   10676:	ee 0c       	add	r14, r14
   10678:	ff 1c       	adc	r15, r15
   1067a:	e8 0c       	add	r14, r8
   1067c:	f9 1c       	adc	r15, r9
   1067e:	c1 2c       	mov	r12, r1
   10680:	d1 2c       	mov	r13, r1
    {
        int i;
        int args = 0;
        for(i=ind;i<argc;++i)
   10682:	c6 01       	movw	r24, r12
   10684:	86 0d       	add	r24, r6
   10686:	97 1d       	adc	r25, r7
   10688:	80 17       	cp	r24, r16
   1068a:	91 07       	cpc	r25, r17
   1068c:	b4 f4       	brge	.+44     	; 0x106ba <posix_tests+0x190>
        {
            if(!MATCH(argv[i],"-l"))
   1068e:	61 ef       	ldi	r22, 0xF1	; 241
   10690:	7a e0       	ldi	r23, 0x0A	; 10
   10692:	f7 01       	movw	r30, r14
   10694:	80 81       	ld	r24, Z
   10696:	91 81       	ldd	r25, Z+1	; 0x01
   10698:	0e 94 2d 33 	call	0x665a	; 0x665a <MATCH>
   1069c:	89 2b       	or	r24, r25
   1069e:	31 f4       	brne	.+12     	; 0x106ac <posix_tests+0x182>
                ls(argv[i],1);
   106a0:	61 e0       	ldi	r22, 0x01	; 1
   106a2:	70 e0       	ldi	r23, 0x00	; 0
   106a4:	f7 01       	movw	r30, r14
   106a6:	80 81       	ld	r24, Z
   106a8:	91 81       	ldd	r25, Z+1	; 0x01
   106aa:	2c de       	rcall	.-936    	; 0x10304 <ls>
            ++args;
   106ac:	ff ef       	ldi	r31, 0xFF	; 255
   106ae:	cf 1a       	sub	r12, r31
   106b0:	df 0a       	sbc	r13, r31
   106b2:	82 e0       	ldi	r24, 0x02	; 2
   106b4:	e8 0e       	add	r14, r24
   106b6:	f1 1c       	adc	r15, r1
   106b8:	e4 cf       	rjmp	.-56     	; 0x10682 <posix_tests+0x158>
        }
        if(!args)
   106ba:	c1 14       	cp	r12, r1
   106bc:	d1 04       	cpc	r13, r1
   106be:	09 f0       	breq	.+2      	; 0x106c2 <posix_tests+0x198>
        {
            ls("",1);
   106c0:	9f c0       	rjmp	.+318    	; 0x10800 <posix_tests+0x2d6>
   106c2:	61 e0       	ldi	r22, 0x01	; 1
   106c4:	70 e0       	ldi	r23, 0x00	; 0
   106c6:	8c ed       	ldi	r24, 0xDC	; 220
   106c8:	96 e1       	ldi	r25, 0x16	; 22
   106ca:	1c de       	rcall	.-968    	; 0x10304 <ls>
        mkfs(argv[ind++]);
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
   106cc:	99 c0       	rjmp	.+306    	; 0x10800 <posix_tests+0x2d6>
   106ce:	98 01       	movw	r18, r16
   106d0:	a7 01       	movw	r20, r14
   106d2:	64 ef       	ldi	r22, 0xF4	; 244
   106d4:	7a e0       	ldi	r23, 0x0A	; 10
   106d6:	c6 01       	movw	r24, r12
   106d8:	0e 94 41 33 	call	0x6682	; 0x6682 <MATCHARGS>
   106dc:	89 2b       	or	r24, r25
    {
        int mode = 0777;
        if((ind+2) <= argc)
   106de:	11 f1       	breq	.+68     	; 0x10724 <posix_tests+0x1fa>
   106e0:	e0 16       	cp	r14, r16
   106e2:	f1 06       	cpc	r15, r17
        {
            mode = strtol(argv[ind+1],NULL,8);
   106e4:	7c f4       	brge	.+30     	; 0x10704 <posix_tests+0x1da>
   106e6:	ee 0c       	add	r14, r14
   106e8:	ff 1c       	adc	r15, r15
   106ea:	f4 01       	movw	r30, r8
   106ec:	ee 0d       	add	r30, r14
   106ee:	ff 1d       	adc	r31, r15
   106f0:	48 e0       	ldi	r20, 0x08	; 8
   106f2:	50 e0       	ldi	r21, 0x00	; 0
   106f4:	60 e0       	ldi	r22, 0x00	; 0
   106f6:	70 e0       	ldi	r23, 0x00	; 0
   106f8:	80 81       	ld	r24, Z
   106fa:	91 81       	ldd	r25, Z+1	; 0x01
   106fc:	0e 94 73 47 	call	0x8ee6	; 0x8ee6 <strtol>
   10700:	ab 01       	movw	r20, r22
    }
#endif

    if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
    {
        int mode = 0777;
   10702:	02 c0       	rjmp	.+4      	; 0x10708 <posix_tests+0x1de>
   10704:	4f ef       	ldi	r20, 0xFF	; 255
        if((ind+2) <= argc)
        {
            mode = strtol(argv[ind+1],NULL,8);
        }
        mkdir(argv[ind],mode);
   10706:	51 e0       	ldi	r21, 0x01	; 1
   10708:	05 2e       	mov	r0, r21
   1070a:	00 0c       	add	r0, r0
   1070c:	66 0b       	sbc	r22, r22
   1070e:	77 0b       	sbc	r23, r23
   10710:	f3 01       	movw	r30, r6
   10712:	ee 0f       	add	r30, r30
   10714:	ff 1f       	adc	r31, r31
   10716:	e8 0d       	add	r30, r8
   10718:	f9 1d       	adc	r31, r9
   1071a:	80 81       	ld	r24, Z
   1071c:	91 81       	ldd	r25, Z+1	; 0x01
   1071e:	0e 94 52 78 	call	0xf0a4	; 0xf0a4 <mkdir>
        return(1);
    }

    if (MATCHARGS(ptr,"page", (ind + 1), argc))
   10722:	6e c0       	rjmp	.+220    	; 0x10800 <posix_tests+0x2d6>
   10724:	98 01       	movw	r18, r16
   10726:	a7 01       	movw	r20, r14
   10728:	6a ef       	ldi	r22, 0xFA	; 250
   1072a:	7a e0       	ldi	r23, 0x0A	; 10
   1072c:	c6 01       	movw	r24, r12
   1072e:	0e 94 41 33 	call	0x6682	; 0x6682 <MATCHARGS>
   10732:	89 2b       	or	r24, r25
    {
        setpage(atoi(argv[ind]));
   10734:	71 f0       	breq	.+28     	; 0x10752 <posix_tests+0x228>
   10736:	f3 01       	movw	r30, r6
   10738:	ee 0f       	add	r30, r30
   1073a:	ff 1f       	adc	r31, r31
   1073c:	e8 0d       	add	r30, r8
   1073e:	f9 1d       	adc	r31, r9
   10740:	80 81       	ld	r24, Z
   10742:	91 81       	ldd	r25, Z+1	; 0x01
   10744:	0e 94 d1 47 	call	0x8fa2	; 0x8fa2 <atoi>
/// @retrun void
static int _pagesize = 25;
MEMSPACE
int setpage(int count)
{
    _pagesize = count;
   10748:	90 93 8e 01 	sts	0x018E, r25	; 0x80018e <_pagesize+0x1>
   1074c:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <_pagesize>
    {
        setpage(atoi(argv[ind]));
        return(1);
    }

    if (MATCHARGS(ptr,"pwd", (ind + 0), argc))
   10750:	57 c0       	rjmp	.+174    	; 0x10800 <posix_tests+0x2d6>
   10752:	98 01       	movw	r18, r16
   10754:	a3 01       	movw	r20, r6
   10756:	6f ef       	ldi	r22, 0xFF	; 255
   10758:	7a e0       	ldi	r23, 0x0A	; 10
   1075a:	c6 01       	movw	r24, r12
   1075c:	0e 94 41 33 	call	0x6682	; 0x6682 <MATCHARGS>
   10760:	89 2b       	or	r24, r25
    {
        char path[256];
        printf("%s\n", getcwd(path, sizeof(path)-2));
   10762:	99 f0       	breq	.+38     	; 0x1078a <posix_tests+0x260>
   10764:	6e ef       	ldi	r22, 0xFE	; 254
   10766:	70 e0       	ldi	r23, 0x00	; 0
   10768:	ce 01       	movw	r24, r28
   1076a:	06 96       	adiw	r24, 0x06	; 6
   1076c:	0e 94 2d 78 	call	0xf05a	; 0xf05a <getcwd>
   10770:	ed b7       	in	r30, 0x3d	; 61
   10772:	fe b7       	in	r31, 0x3e	; 62
   10774:	95 83       	std	Z+5, r25	; 0x05
   10776:	84 83       	std	Z+4, r24	; 0x04
   10778:	8e eb       	ldi	r24, 0xBE	; 190
   1077a:	9c e0       	ldi	r25, 0x0C	; 12
   1077c:	a0 e0       	ldi	r26, 0x00	; 0
   1077e:	81 83       	std	Z+1, r24	; 0x01
   10780:	92 83       	std	Z+2, r25	; 0x02
   10782:	a3 83       	std	Z+3, r26	; 0x03
   10784:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
        return(1);
    }

    if (MATCHARGS(ptr,"rename", (ind + 2), argc))
   10788:	3b c0       	rjmp	.+118    	; 0x10800 <posix_tests+0x2d6>
   1078a:	98 01       	movw	r18, r16
   1078c:	a5 01       	movw	r20, r10
   1078e:	63 e0       	ldi	r22, 0x03	; 3
   10790:	7b e0       	ldi	r23, 0x0B	; 11
   10792:	c6 01       	movw	r24, r12
   10794:	0e 94 41 33 	call	0x6682	; 0x6682 <MATCHARGS>
   10798:	89 2b       	or	r24, r25
    {
        rename(argv[ind],argv[ind+1]);
   1079a:	61 f0       	breq	.+24     	; 0x107b4 <posix_tests+0x28a>
   1079c:	f3 01       	movw	r30, r6
   1079e:	ee 0f       	add	r30, r30
   107a0:	ff 1f       	adc	r31, r31
   107a2:	e8 0d       	add	r30, r8
   107a4:	f9 1d       	adc	r31, r9
   107a6:	62 81       	ldd	r22, Z+2	; 0x02
   107a8:	73 81       	ldd	r23, Z+3	; 0x03
   107aa:	80 81       	ld	r24, Z
   107ac:	91 81       	ldd	r25, Z+1	; 0x01
   107ae:	0e 94 80 78 	call	0xf100	; 0xf100 <rename>
        return(1);
    }

    if (MATCHARGS(ptr,"rm", (ind + 1), argc))
   107b2:	26 c0       	rjmp	.+76     	; 0x10800 <posix_tests+0x2d6>
   107b4:	98 01       	movw	r18, r16
   107b6:	a7 01       	movw	r20, r14
   107b8:	6a e0       	ldi	r22, 0x0A	; 10
   107ba:	7b e0       	ldi	r23, 0x0B	; 11
   107bc:	c6 01       	movw	r24, r12
   107be:	0e 94 41 33 	call	0x6682	; 0x6682 <MATCHARGS>
   107c2:	89 2b       	or	r24, r25
    {
        unlink(argv[ind]);
   107c4:	51 f0       	breq	.+20     	; 0x107da <posix_tests+0x2b0>
   107c6:	f3 01       	movw	r30, r6
   107c8:	ee 0f       	add	r30, r30
   107ca:	ff 1f       	adc	r31, r31
   107cc:	e8 0d       	add	r30, r8
   107ce:	f9 1d       	adc	r31, r9
   107d0:	80 81       	ld	r24, Z
   107d2:	91 81       	ldd	r25, Z+1	; 0x01
   107d4:	0e 94 9f 78 	call	0xf13e	; 0xf13e <unlink>
        dump_stat(&p);
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"rmdir", (ind + 1), argc))
   107d8:	13 c0       	rjmp	.+38     	; 0x10800 <posix_tests+0x2d6>
   107da:	98 01       	movw	r18, r16
   107dc:	a7 01       	movw	r20, r14
   107de:	6d e0       	ldi	r22, 0x0D	; 13
   107e0:	7b e0       	ldi	r23, 0x0B	; 11
   107e2:	c6 01       	movw	r24, r12
   107e4:	0e 94 41 33 	call	0x6682	; 0x6682 <MATCHARGS>
   107e8:	89 2b       	or	r24, r25
   107ea:	09 f4       	brne	.+2      	; 0x107ee <posix_tests+0x2c4>
    {
        rmdir(argv[ind]);
   107ec:	aa ce       	rjmp	.-684    	; 0x10542 <posix_tests+0x18>
   107ee:	f3 01       	movw	r30, r6
   107f0:	ee 0f       	add	r30, r30
   107f2:	ff 1f       	adc	r31, r31
   107f4:	e8 0d       	add	r30, r8
   107f6:	f9 1d       	adc	r31, r9
   107f8:	80 81       	ld	r24, Z
   107fa:	91 81       	ldd	r25, Z+1	; 0x01
   107fc:	0e 94 be 78 	call	0xf17c	; 0xf17c <rmdir>
        return(1);
   10800:	81 e0       	ldi	r24, 0x01	; 1
        return(1);
    }
#endif

    return(0);
}
   10802:	90 e0       	ldi	r25, 0x00	; 0
   10804:	cb 5f       	subi	r28, 0xFB	; 251
   10806:	de 4f       	sbci	r29, 0xFE	; 254
   10808:	e0 e1       	ldi	r30, 0x10	; 16
   1080a:	0c 94 e6 e3 	jmp	0x1c7cc	; 0x1c7cc <__epilogue_restores__+0x4>

0001080e <gpib_timer_init>:
///
/// - Has some platform dependent code.
/// @return  void

void gpib_timer_init()
{
   1080e:	00 d0       	rcall	.+0      	; 0x10810 <gpib_timer_init+0x2>
   10810:	1f 92       	push	r1
    if(set_timers(gpib_timer_task,1) == -1)       // Install Clock Task
   10812:	61 e0       	ldi	r22, 0x01	; 1
   10814:	70 e0       	ldi	r23, 0x00	; 0
   10816:	83 ec       	ldi	r24, 0xC3	; 195
   10818:	95 e8       	ldi	r25, 0x85	; 133
   1081a:	0e 94 a2 35 	call	0x6b44	; 0x6b44 <set_timers>
   1081e:	01 96       	adiw	r24, 0x01	; 1
   10820:	51 f4       	brne	.+20     	; 0x10836 <gpib_timer_init+0x28>
        printf("GPIB Clock task init failed\n");
   10822:	88 ee       	ldi	r24, 0xE8	; 232
   10824:	9d e0       	ldi	r25, 0x0D	; 13
   10826:	a0 e0       	ldi	r26, 0x00	; 0
   10828:	ed b7       	in	r30, 0x3d	; 61
   1082a:	fe b7       	in	r31, 0x3e	; 62
   1082c:	81 83       	std	Z+1, r24	; 0x01
   1082e:	92 83       	std	Z+2, r25	; 0x02
   10830:	a3 83       	std	Z+3, r26	; 0x03
   10832:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>

    gpib_timer_reset();
}
   10836:	95 d1       	rcall	.+810    	; 0x10b62 <gpib_timer_reset>
   10838:	0f 90       	pop	r0
   1083a:	0f 90       	pop	r0
   1083c:	0f 90       	pop	r0
   1083e:	08 95       	ret

00010840 <reverse_8bits>:
/// - GPIB D1 controls last device.
///
/// @param [in] mask: bit mask to reverse.
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
   10840:	28 2f       	mov	r18, r24
   10842:	98 e0       	ldi	r25, 0x08	; 8
    int8_t i;
    uint8_t rmask = 0;
   10844:	80 e0       	ldi	r24, 0x00	; 0
    for(i=0;i<8;++i)
    {
        rmask <<= 1;
   10846:	88 0f       	add	r24, r24
        if(mask & 1)
   10848:	20 fd       	sbrc	r18, 0
            rmask |= 1;
   1084a:	81 60       	ori	r24, 0x01	; 1
        mask >>= 1;
   1084c:	26 95       	lsr	r18
   1084e:	91 50       	subi	r25, 0x01	; 1
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
    int8_t i;
    uint8_t rmask = 0;
    for(i=0;i<8;++i)
   10850:	d1 f7       	brne	.-12     	; 0x10846 <reverse_8bits+0x6>
        if(mask & 1)
            rmask |= 1;
        mask >>= 1;
    }
    return(rmask & 0xff);
}
   10852:	08 95       	ret

00010854 <ppr_set>:
   10854:	f5 df       	rcall	.-22     	; 0x10840 <reverse_8bits>
   10856:	80 93 f9 18 	sts	0x18F9, r24	; 0x8018f9 <_ppr_reg>
   1085a:	0e 94 a4 2c 	call	0x5948	; 0x5948 <SPI0_TXRX_Byte>
   1085e:	2a 9a       	sbi	0x05, 2	; 5
   10860:	22 9a       	sbi	0x04, 2	; 4
   10862:	2a 98       	cbi	0x05, 2	; 5
   10864:	22 9a       	sbi	0x04, 2	; 4
   10866:	08 95       	ret

00010868 <ppr_reg>:
   10868:	80 91 f9 18 	lds	r24, 0x18F9	; 0x8018f9 <_ppr_reg>
   1086c:	e9 cf       	rjmp	.-46     	; 0x10840 <reverse_8bits>
   1086e:	08 95       	ret

00010870 <ppr_init>:
   10870:	00 d0       	rcall	.+0      	; 0x10872 <ppr_init+0x2>
   10872:	1f 92       	push	r1
   10874:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   10878:	81 ff       	sbrs	r24, 1
   1087a:	0a c0       	rjmp	.+20     	; 0x10890 <ppr_init+0x20>
   1087c:	85 ed       	ldi	r24, 0xD5	; 213
   1087e:	9d e0       	ldi	r25, 0x0D	; 13
   10880:	a0 e0       	ldi	r26, 0x00	; 0
   10882:	ed b7       	in	r30, 0x3d	; 61
   10884:	fe b7       	in	r31, 0x3e	; 62
   10886:	81 83       	std	Z+1, r24	; 0x01
   10888:	92 83       	std	Z+2, r25	; 0x02
   1088a:	a3 83       	std	Z+3, r26	; 0x03
   1088c:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   10890:	80 e0       	ldi	r24, 0x00	; 0
   10892:	e0 df       	rcall	.-64     	; 0x10854 <ppr_set>
   10894:	0f 90       	pop	r0
   10896:	0f 90       	pop	r0
   10898:	0f 90       	pop	r0
   1089a:	08 95       	ret

0001089c <ppr_bit_set>:
   1089c:	21 e0       	ldi	r18, 0x01	; 1
   1089e:	30 e0       	ldi	r19, 0x00	; 0
   108a0:	01 c0       	rjmp	.+2      	; 0x108a4 <ppr_bit_set+0x8>
   108a2:	22 0f       	add	r18, r18
   108a4:	8a 95       	dec	r24
   108a6:	ea f7       	brpl	.-6      	; 0x108a2 <ppr_bit_set+0x6>
   108a8:	80 91 f9 18 	lds	r24, 0x18F9	; 0x8018f9 <_ppr_reg>
   108ac:	82 2b       	or	r24, r18
   108ae:	80 93 f9 18 	sts	0x18F9, r24	; 0x8018f9 <_ppr_reg>
   108b2:	d0 cf       	rjmp	.-96     	; 0x10854 <ppr_set>
   108b4:	08 95       	ret

000108b6 <ppr_bit_clr>:
   108b6:	21 e0       	ldi	r18, 0x01	; 1
   108b8:	30 e0       	ldi	r19, 0x00	; 0
   108ba:	01 c0       	rjmp	.+2      	; 0x108be <ppr_bit_clr+0x8>
   108bc:	22 0f       	add	r18, r18
   108be:	8a 95       	dec	r24
   108c0:	ea f7       	brpl	.-6      	; 0x108bc <ppr_bit_clr+0x6>
   108c2:	20 95       	com	r18
   108c4:	80 91 f9 18 	lds	r24, 0x18F9	; 0x8018f9 <_ppr_reg>
   108c8:	82 23       	and	r24, r18
   108ca:	80 93 f9 18 	sts	0x18F9, r24	; 0x8018f9 <_ppr_reg>
   108ce:	c2 cf       	rjmp	.-124    	; 0x10854 <ppr_set>
   108d0:	08 95       	ret

000108d2 <dbf_open>:
   108d2:	0f 93       	push	r16
   108d4:	1f 93       	push	r17
   108d6:	cf 93       	push	r28
   108d8:	df 93       	push	r29
   108da:	00 d0       	rcall	.+0      	; 0x108dc <dbf_open+0xa>
   108dc:	00 d0       	rcall	.+0      	; 0x108de <dbf_open+0xc>
   108de:	1f 92       	push	r1
   108e0:	8b 01       	movw	r16, r22
   108e2:	0e 94 f0 5a 	call	0xb5e0	; 0xb5e0 <f_open>
   108e6:	ec 01       	movw	r28, r24
   108e8:	89 2b       	or	r24, r25
   108ea:	79 f0       	breq	.+30     	; 0x1090a <dbf_open+0x38>
   108ec:	ed b7       	in	r30, 0x3d	; 61
   108ee:	fe b7       	in	r31, 0x3e	; 62
   108f0:	15 83       	std	Z+5, r17	; 0x05
   108f2:	04 83       	std	Z+4, r16	; 0x04
   108f4:	84 ec       	ldi	r24, 0xC4	; 196
   108f6:	9d e0       	ldi	r25, 0x0D	; 13
   108f8:	a0 e0       	ldi	r26, 0x00	; 0
   108fa:	81 83       	std	Z+1, r24	; 0x01
   108fc:	92 83       	std	Z+2, r25	; 0x02
   108fe:	a3 83       	std	Z+3, r26	; 0x03
   10900:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   10904:	ce 01       	movw	r24, r28
   10906:	0e 94 54 71 	call	0xe2a8	; 0xe2a8 <put_rc>
   1090a:	ce 01       	movw	r24, r28
   1090c:	cd b7       	in	r28, 0x3d	; 61
   1090e:	de b7       	in	r29, 0x3e	; 62
   10910:	25 96       	adiw	r28, 0x05	; 5
   10912:	e4 e0       	ldi	r30, 0x04	; 4
   10914:	0c 94 f2 e3 	jmp	0x1c7e4	; 0x1c7e4 <__epilogue_restores__+0x1c>

00010918 <dbf_read>:
   10918:	cf 93       	push	r28
   1091a:	df 93       	push	r29
   1091c:	00 d0       	rcall	.+0      	; 0x1091e <dbf_read+0x6>
   1091e:	1f 92       	push	r1
   10920:	0e 94 a8 5c 	call	0xb950	; 0xb950 <f_read>
   10924:	ec 01       	movw	r28, r24
   10926:	89 2b       	or	r24, r25
   10928:	69 f0       	breq	.+26     	; 0x10944 <dbf_read+0x2c>
   1092a:	87 eb       	ldi	r24, 0xB7	; 183
   1092c:	9d e0       	ldi	r25, 0x0D	; 13
   1092e:	a0 e0       	ldi	r26, 0x00	; 0
   10930:	ed b7       	in	r30, 0x3d	; 61
   10932:	fe b7       	in	r31, 0x3e	; 62
   10934:	81 83       	std	Z+1, r24	; 0x01
   10936:	92 83       	std	Z+2, r25	; 0x02
   10938:	a3 83       	std	Z+3, r26	; 0x03
   1093a:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   1093e:	ce 01       	movw	r24, r28
   10940:	0e 94 54 71 	call	0xe2a8	; 0xe2a8 <put_rc>
   10944:	ce 01       	movw	r24, r28
   10946:	cd b7       	in	r28, 0x3d	; 61
   10948:	de b7       	in	r29, 0x3e	; 62
   1094a:	23 96       	adiw	r28, 0x03	; 3
   1094c:	e2 e0       	ldi	r30, 0x02	; 2
   1094e:	0c 94 f4 e3 	jmp	0x1c7e8	; 0x1c7e8 <__epilogue_restores__+0x20>

00010952 <dbf_write>:
   10952:	cf 93       	push	r28
   10954:	df 93       	push	r29
   10956:	00 d0       	rcall	.+0      	; 0x10958 <dbf_write+0x6>
   10958:	1f 92       	push	r1
   1095a:	0e 94 f3 5d 	call	0xbbe6	; 0xbbe6 <f_write>
   1095e:	ec 01       	movw	r28, r24
   10960:	89 2b       	or	r24, r25
   10962:	69 f0       	breq	.+26     	; 0x1097e <dbf_write+0x2c>
   10964:	89 ea       	ldi	r24, 0xA9	; 169
   10966:	9d e0       	ldi	r25, 0x0D	; 13
   10968:	a0 e0       	ldi	r26, 0x00	; 0
   1096a:	ed b7       	in	r30, 0x3d	; 61
   1096c:	fe b7       	in	r31, 0x3e	; 62
   1096e:	81 83       	std	Z+1, r24	; 0x01
   10970:	92 83       	std	Z+2, r25	; 0x02
   10972:	a3 83       	std	Z+3, r26	; 0x03
   10974:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   10978:	ce 01       	movw	r24, r28
   1097a:	0e 94 54 71 	call	0xe2a8	; 0xe2a8 <put_rc>
   1097e:	ce 01       	movw	r24, r28
   10980:	cd b7       	in	r28, 0x3d	; 61
   10982:	de b7       	in	r29, 0x3e	; 62
   10984:	23 96       	adiw	r28, 0x03	; 3
   10986:	e2 e0       	ldi	r30, 0x02	; 2
   10988:	0c 94 f4 e3 	jmp	0x1c7e8	; 0x1c7e8 <__epilogue_restores__+0x20>

0001098c <dbf_lseek>:
   1098c:	cf 93       	push	r28
   1098e:	df 93       	push	r29
   10990:	00 d0       	rcall	.+0      	; 0x10992 <dbf_lseek+0x6>
   10992:	1f 92       	push	r1
   10994:	0e 94 b4 61 	call	0xc368	; 0xc368 <f_lseek>
   10998:	ec 01       	movw	r28, r24
   1099a:	89 2b       	or	r24, r25
   1099c:	69 f0       	breq	.+26     	; 0x109b8 <dbf_lseek+0x2c>
   1099e:	8c e9       	ldi	r24, 0x9C	; 156
   109a0:	9d e0       	ldi	r25, 0x0D	; 13
   109a2:	a0 e0       	ldi	r26, 0x00	; 0
   109a4:	ed b7       	in	r30, 0x3d	; 61
   109a6:	fe b7       	in	r31, 0x3e	; 62
   109a8:	81 83       	std	Z+1, r24	; 0x01
   109aa:	92 83       	std	Z+2, r25	; 0x02
   109ac:	a3 83       	std	Z+3, r26	; 0x03
   109ae:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   109b2:	ce 01       	movw	r24, r28
   109b4:	0e 94 54 71 	call	0xe2a8	; 0xe2a8 <put_rc>
   109b8:	ce 01       	movw	r24, r28
   109ba:	cd b7       	in	r28, 0x3d	; 61
   109bc:	de b7       	in	r29, 0x3e	; 62
   109be:	23 96       	adiw	r28, 0x03	; 3
   109c0:	e2 e0       	ldi	r30, 0x02	; 2
   109c2:	0c 94 f4 e3 	jmp	0x1c7e8	; 0x1c7e8 <__epilogue_restores__+0x20>

000109c6 <dbf_close>:
   109c6:	cf 93       	push	r28
   109c8:	df 93       	push	r29
   109ca:	00 d0       	rcall	.+0      	; 0x109cc <dbf_close+0x6>
   109cc:	1f 92       	push	r1
   109ce:	0e 94 0a 60 	call	0xc014	; 0xc014 <f_close>
   109d2:	ec 01       	movw	r28, r24
   109d4:	89 2b       	or	r24, r25
   109d6:	69 f0       	breq	.+26     	; 0x109f2 <dbf_close+0x2c>
   109d8:	8e e8       	ldi	r24, 0x8E	; 142
   109da:	9d e0       	ldi	r25, 0x0D	; 13
   109dc:	a0 e0       	ldi	r26, 0x00	; 0
   109de:	ed b7       	in	r30, 0x3d	; 61
   109e0:	fe b7       	in	r31, 0x3e	; 62
   109e2:	81 83       	std	Z+1, r24	; 0x01
   109e4:	92 83       	std	Z+2, r25	; 0x02
   109e6:	a3 83       	std	Z+3, r26	; 0x03
   109e8:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   109ec:	ce 01       	movw	r24, r28
   109ee:	0e 94 54 71 	call	0xe2a8	; 0xe2a8 <put_rc>
   109f2:	ce 01       	movw	r24, r28
   109f4:	cd b7       	in	r28, 0x3d	; 61
   109f6:	de b7       	in	r29, 0x3e	; 62
   109f8:	23 96       	adiw	r28, 0x03	; 3
   109fa:	e2 e0       	ldi	r30, 0x02	; 2
   109fc:	0c 94 f4 e3 	jmp	0x1c7e8	; 0x1c7e8 <__epilogue_restores__+0x20>

00010a00 <dbf_open_read>:
   10a00:	a6 e2       	ldi	r26, 0x26	; 38
   10a02:	b2 e0       	ldi	r27, 0x02	; 2
   10a04:	e6 e0       	ldi	r30, 0x06	; 6
   10a06:	f5 e8       	ldi	r31, 0x85	; 133
   10a08:	0c 94 ce e3 	jmp	0x1c79c	; 0x1c79c <__prologue_saves__+0xc>
   10a0c:	4a 01       	movw	r8, r20
   10a0e:	5b 01       	movw	r10, r22
   10a10:	69 01       	movw	r12, r18
   10a12:	cb 5d       	subi	r28, 0xDB	; 219
   10a14:	dd 4f       	sbci	r29, 0xFD	; 253
   10a16:	19 82       	std	Y+1, r1	; 0x01
   10a18:	18 82       	st	Y, r1
   10a1a:	c5 52       	subi	r28, 0x25	; 37
   10a1c:	d2 40       	sbci	r29, 0x02	; 2
   10a1e:	43 e0       	ldi	r20, 0x03	; 3
   10a20:	bc 01       	movw	r22, r24
   10a22:	ce 01       	movw	r24, r28
   10a24:	01 96       	adiw	r24, 0x01	; 1
   10a26:	55 df       	rcall	.-342    	; 0x108d2 <dbf_open>
   10a28:	89 2b       	or	r24, r25
   10a2a:	19 f0       	breq	.+6      	; 0x10a32 <dbf_open_read+0x32>
   10a2c:	81 e1       	ldi	r24, 0x11	; 17
   10a2e:	90 e0       	ldi	r25, 0x00	; 0
   10a30:	2f c0       	rjmp	.+94     	; 0x10a90 <dbf_open_read+0x90>
   10a32:	b5 01       	movw	r22, r10
   10a34:	a4 01       	movw	r20, r8
   10a36:	ce 01       	movw	r24, r28
   10a38:	01 96       	adiw	r24, 0x01	; 1
   10a3a:	a8 df       	rcall	.-176    	; 0x1098c <dbf_lseek>
   10a3c:	89 2b       	or	r24, r25
   10a3e:	59 f0       	breq	.+22     	; 0x10a56 <dbf_open_read+0x56>
   10a40:	85 e0       	ldi	r24, 0x05	; 5
   10a42:	90 e0       	ldi	r25, 0x00	; 0
   10a44:	f7 01       	movw	r30, r14
   10a46:	91 83       	std	Z+1, r25	; 0x01
   10a48:	80 83       	st	Z, r24
   10a4a:	ce 01       	movw	r24, r28
   10a4c:	01 96       	adiw	r24, 0x01	; 1
   10a4e:	bb df       	rcall	.-138    	; 0x109c6 <dbf_close>
   10a50:	8f ef       	ldi	r24, 0xFF	; 255
   10a52:	9f ef       	ldi	r25, 0xFF	; 255
   10a54:	27 c0       	rjmp	.+78     	; 0x10aa4 <dbf_open_read+0xa4>
   10a56:	9e 01       	movw	r18, r28
   10a58:	2b 5d       	subi	r18, 0xDB	; 219
   10a5a:	3d 4f       	sbci	r19, 0xFD	; 253
   10a5c:	a8 01       	movw	r20, r16
   10a5e:	b6 01       	movw	r22, r12
   10a60:	ce 01       	movw	r24, r28
   10a62:	01 96       	adiw	r24, 0x01	; 1
   10a64:	59 df       	rcall	.-334    	; 0x10918 <dbf_read>
   10a66:	89 2b       	or	r24, r25
   10a68:	49 f4       	brne	.+18     	; 0x10a7c <dbf_open_read+0x7c>
   10a6a:	cb 5d       	subi	r28, 0xDB	; 219
   10a6c:	dd 4f       	sbci	r29, 0xFD	; 253
   10a6e:	88 81       	ld	r24, Y
   10a70:	99 81       	ldd	r25, Y+1	; 0x01
   10a72:	c5 52       	subi	r28, 0x25	; 37
   10a74:	d2 40       	sbci	r29, 0x02	; 2
   10a76:	08 17       	cp	r16, r24
   10a78:	19 07       	cpc	r17, r25
   10a7a:	19 f0       	breq	.+6      	; 0x10a82 <dbf_open_read+0x82>
   10a7c:	81 e0       	ldi	r24, 0x01	; 1
   10a7e:	90 e0       	ldi	r25, 0x00	; 0
   10a80:	e1 cf       	rjmp	.-62     	; 0x10a44 <dbf_open_read+0x44>
   10a82:	ce 01       	movw	r24, r28
   10a84:	01 96       	adiw	r24, 0x01	; 1
   10a86:	9f df       	rcall	.-194    	; 0x109c6 <dbf_close>
   10a88:	89 2b       	or	r24, r25
   10a8a:	31 f0       	breq	.+12     	; 0x10a98 <dbf_open_read+0x98>
   10a8c:	80 e1       	ldi	r24, 0x10	; 16
   10a8e:	90 e0       	ldi	r25, 0x00	; 0
   10a90:	f7 01       	movw	r30, r14
   10a92:	91 83       	std	Z+1, r25	; 0x01
   10a94:	80 83       	st	Z, r24
   10a96:	dc cf       	rjmp	.-72     	; 0x10a50 <dbf_open_read+0x50>
   10a98:	cb 5d       	subi	r28, 0xDB	; 219
   10a9a:	dd 4f       	sbci	r29, 0xFD	; 253
   10a9c:	88 81       	ld	r24, Y
   10a9e:	99 81       	ldd	r25, Y+1	; 0x01
   10aa0:	c5 52       	subi	r28, 0x25	; 37
   10aa2:	d2 40       	sbci	r29, 0x02	; 2
   10aa4:	ca 5d       	subi	r28, 0xDA	; 218
   10aa6:	dd 4f       	sbci	r29, 0xFD	; 253
   10aa8:	ec e0       	ldi	r30, 0x0C	; 12
   10aaa:	0c 94 ea e3 	jmp	0x1c7d4	; 0x1c7d4 <__epilogue_restores__+0xc>

00010aae <dbf_open_write>:
   10aae:	a6 e2       	ldi	r26, 0x26	; 38
   10ab0:	b2 e0       	ldi	r27, 0x02	; 2
   10ab2:	ed e5       	ldi	r30, 0x5D	; 93
   10ab4:	f5 e8       	ldi	r31, 0x85	; 133
   10ab6:	0c 94 ce e3 	jmp	0x1c79c	; 0x1c79c <__prologue_saves__+0xc>
   10aba:	4a 01       	movw	r8, r20
   10abc:	5b 01       	movw	r10, r22
   10abe:	69 01       	movw	r12, r18
   10ac0:	cb 5d       	subi	r28, 0xDB	; 219
   10ac2:	dd 4f       	sbci	r29, 0xFD	; 253
   10ac4:	19 82       	std	Y+1, r1	; 0x01
   10ac6:	18 82       	st	Y, r1
   10ac8:	c5 52       	subi	r28, 0x25	; 37
   10aca:	d2 40       	sbci	r29, 0x02	; 2
   10acc:	43 e0       	ldi	r20, 0x03	; 3
   10ace:	bc 01       	movw	r22, r24
   10ad0:	ce 01       	movw	r24, r28
   10ad2:	01 96       	adiw	r24, 0x01	; 1
   10ad4:	fe de       	rcall	.-516    	; 0x108d2 <dbf_open>
   10ad6:	89 2b       	or	r24, r25
   10ad8:	19 f0       	breq	.+6      	; 0x10ae0 <dbf_open_write+0x32>
   10ada:	81 e1       	ldi	r24, 0x11	; 17
   10adc:	90 e0       	ldi	r25, 0x00	; 0
   10ade:	2f c0       	rjmp	.+94     	; 0x10b3e <dbf_open_write+0x90>
   10ae0:	b5 01       	movw	r22, r10
   10ae2:	a4 01       	movw	r20, r8
   10ae4:	ce 01       	movw	r24, r28
   10ae6:	01 96       	adiw	r24, 0x01	; 1
   10ae8:	51 df       	rcall	.-350    	; 0x1098c <dbf_lseek>
   10aea:	89 2b       	or	r24, r25
   10aec:	59 f0       	breq	.+22     	; 0x10b04 <dbf_open_write+0x56>
   10aee:	85 e0       	ldi	r24, 0x05	; 5
   10af0:	90 e0       	ldi	r25, 0x00	; 0
   10af2:	f7 01       	movw	r30, r14
   10af4:	91 83       	std	Z+1, r25	; 0x01
   10af6:	80 83       	st	Z, r24
   10af8:	ce 01       	movw	r24, r28
   10afa:	01 96       	adiw	r24, 0x01	; 1
   10afc:	64 df       	rcall	.-312    	; 0x109c6 <dbf_close>
   10afe:	8f ef       	ldi	r24, 0xFF	; 255
   10b00:	9f ef       	ldi	r25, 0xFF	; 255
   10b02:	27 c0       	rjmp	.+78     	; 0x10b52 <dbf_open_write+0xa4>
   10b04:	9e 01       	movw	r18, r28
   10b06:	2b 5d       	subi	r18, 0xDB	; 219
   10b08:	3d 4f       	sbci	r19, 0xFD	; 253
   10b0a:	a8 01       	movw	r20, r16
   10b0c:	b6 01       	movw	r22, r12
   10b0e:	ce 01       	movw	r24, r28
   10b10:	01 96       	adiw	r24, 0x01	; 1
   10b12:	1f df       	rcall	.-450    	; 0x10952 <dbf_write>
   10b14:	89 2b       	or	r24, r25
   10b16:	49 f4       	brne	.+18     	; 0x10b2a <dbf_open_write+0x7c>
   10b18:	cb 5d       	subi	r28, 0xDB	; 219
   10b1a:	dd 4f       	sbci	r29, 0xFD	; 253
   10b1c:	88 81       	ld	r24, Y
   10b1e:	99 81       	ldd	r25, Y+1	; 0x01
   10b20:	c5 52       	subi	r28, 0x25	; 37
   10b22:	d2 40       	sbci	r29, 0x02	; 2
   10b24:	08 17       	cp	r16, r24
   10b26:	19 07       	cpc	r17, r25
   10b28:	19 f0       	breq	.+6      	; 0x10b30 <dbf_open_write+0x82>
   10b2a:	81 e0       	ldi	r24, 0x01	; 1
   10b2c:	90 e0       	ldi	r25, 0x00	; 0
   10b2e:	e1 cf       	rjmp	.-62     	; 0x10af2 <dbf_open_write+0x44>
   10b30:	ce 01       	movw	r24, r28
   10b32:	01 96       	adiw	r24, 0x01	; 1
   10b34:	48 df       	rcall	.-368    	; 0x109c6 <dbf_close>
   10b36:	89 2b       	or	r24, r25
   10b38:	31 f0       	breq	.+12     	; 0x10b46 <dbf_open_write+0x98>
   10b3a:	80 e1       	ldi	r24, 0x10	; 16
   10b3c:	90 e0       	ldi	r25, 0x00	; 0
   10b3e:	f7 01       	movw	r30, r14
   10b40:	91 83       	std	Z+1, r25	; 0x01
   10b42:	80 83       	st	Z, r24
   10b44:	dc cf       	rjmp	.-72     	; 0x10afe <dbf_open_write+0x50>
   10b46:	cb 5d       	subi	r28, 0xDB	; 219
   10b48:	dd 4f       	sbci	r29, 0xFD	; 253
   10b4a:	88 81       	ld	r24, Y
   10b4c:	99 81       	ldd	r25, Y+1	; 0x01
   10b4e:	c5 52       	subi	r28, 0x25	; 37
   10b50:	d2 40       	sbci	r29, 0x02	; 2
   10b52:	ca 5d       	subi	r28, 0xDA	; 218
   10b54:	dd 4f       	sbci	r29, 0xFD	; 253
   10b56:	ec e0       	ldi	r30, 0x0C	; 12
   10b58:	0c 94 ea e3 	jmp	0x1c7d4	; 0x1c7d4 <__epilogue_restores__+0xc>

00010b5c <gpib_timer_elapsed_begin>:
   10b5c:	0c 94 62 36 	jmp	0x6cc4	; 0x6cc4 <clock_elapsed_begin>
   10b60:	08 95       	ret

00010b62 <gpib_timer_reset>:
   10b62:	f8 94       	cli
   10b64:	e5 e7       	ldi	r30, 0x75	; 117
   10b66:	fc e1       	ldi	r31, 0x1C	; 28
   10b68:	10 82       	st	Z, r1
   10b6a:	11 82       	std	Z+1, r1	; 0x01
   10b6c:	12 82       	std	Z+2, r1	; 0x02
   10b6e:	13 82       	std	Z+3, r1	; 0x03
   10b70:	14 82       	std	Z+4, r1	; 0x04
   10b72:	15 82       	std	Z+5, r1	; 0x05
   10b74:	16 82       	std	Z+6, r1	; 0x06
   10b76:	17 82       	std	Z+7, r1	; 0x07
   10b78:	81 e0       	ldi	r24, 0x01	; 1
   10b7a:	80 87       	std	Z+8, r24	; 0x08
   10b7c:	78 94       	sei
   10b7e:	08 95       	ret

00010b80 <gpib_timer_elapsed_end>:
   10b80:	0c 94 68 36 	jmp	0x6cd0	; 0x6cd0 <clock_elapsed_end>
   10b84:	08 95       	ret

00010b86 <gpib_timer_task>:
   10b86:	f8 94       	cli
   10b88:	80 91 79 1c 	lds	r24, 0x1C79	; 0x801c79 <gpib_timer+0x4>
   10b8c:	90 91 7a 1c 	lds	r25, 0x1C7A	; 0x801c7a <gpib_timer+0x5>
   10b90:	a0 91 7b 1c 	lds	r26, 0x1C7B	; 0x801c7b <gpib_timer+0x6>
   10b94:	b0 91 7c 1c 	lds	r27, 0x1C7C	; 0x801c7c <gpib_timer+0x7>
   10b98:	89 2b       	or	r24, r25
   10b9a:	8a 2b       	or	r24, r26
   10b9c:	8b 2b       	or	r24, r27
   10b9e:	a1 f0       	breq	.+40     	; 0x10bc8 <gpib_timer_task+0x42>
   10ba0:	80 91 79 1c 	lds	r24, 0x1C79	; 0x801c79 <gpib_timer+0x4>
   10ba4:	90 91 7a 1c 	lds	r25, 0x1C7A	; 0x801c7a <gpib_timer+0x5>
   10ba8:	a0 91 7b 1c 	lds	r26, 0x1C7B	; 0x801c7b <gpib_timer+0x6>
   10bac:	b0 91 7c 1c 	lds	r27, 0x1C7C	; 0x801c7c <gpib_timer+0x7>
   10bb0:	01 97       	sbiw	r24, 0x01	; 1
   10bb2:	a1 09       	sbc	r26, r1
   10bb4:	b1 09       	sbc	r27, r1
   10bb6:	80 93 79 1c 	sts	0x1C79, r24	; 0x801c79 <gpib_timer+0x4>
   10bba:	90 93 7a 1c 	sts	0x1C7A, r25	; 0x801c7a <gpib_timer+0x5>
   10bbe:	a0 93 7b 1c 	sts	0x1C7B, r26	; 0x801c7b <gpib_timer+0x6>
   10bc2:	b0 93 7c 1c 	sts	0x1C7C, r27	; 0x801c7c <gpib_timer+0x7>
   10bc6:	03 c0       	rjmp	.+6      	; 0x10bce <gpib_timer_task+0x48>
   10bc8:	81 e0       	ldi	r24, 0x01	; 1
   10bca:	80 93 7d 1c 	sts	0x1C7D, r24	; 0x801c7d <gpib_timer+0x8>
   10bce:	78 94       	sei
   10bd0:	08 95       	ret

00010bd2 <gpib_timeout_set>:
   10bd2:	f8 94       	cli
   10bd4:	e5 e7       	ldi	r30, 0x75	; 117
   10bd6:	fc e1       	ldi	r31, 0x1C	; 28
   10bd8:	64 83       	std	Z+4, r22	; 0x04
   10bda:	75 83       	std	Z+5, r23	; 0x05
   10bdc:	86 83       	std	Z+6, r24	; 0x06
   10bde:	97 83       	std	Z+7, r25	; 0x07
   10be0:	10 86       	std	Z+8, r1	; 0x08
   10be2:	78 94       	sei
   10be4:	08 95       	ret

00010be6 <gpib_bus_read_init>:
   10be6:	54 98       	cbi	0x0a, 4	; 10
   10be8:	57 98       	cbi	0x0a, 7	; 10
   10bea:	45 98       	cbi	0x08, 5	; 8
   10bec:	3d 9a       	sbi	0x07, 5	; 7
   10bee:	11 b8       	out	0x01, r1	; 1
   10bf0:	2f ef       	ldi	r18, 0xFF	; 255
   10bf2:	22 b9       	out	0x02, r18	; 2
   10bf4:	43 98       	cbi	0x08, 3	; 8
   10bf6:	3b 9a       	sbi	0x07, 3	; 7
   10bf8:	21 98       	cbi	0x04, 1	; 4
   10bfa:	56 98       	cbi	0x0a, 6	; 10
   10bfc:	20 98       	cbi	0x04, 0	; 4
   10bfe:	55 98       	cbi	0x0a, 5	; 10
   10c00:	89 2b       	or	r24, r25
   10c02:	39 f4       	brne	.+14     	; 0x10c12 <gpib_bus_read_init+0x2c>
   10c04:	52 98       	cbi	0x0a, 2	; 10
   10c06:	53 98       	cbi	0x0a, 3	; 10
   10c08:	8d e0       	ldi	r24, 0x0D	; 13
   10c0a:	8a 95       	dec	r24
   10c0c:	f1 f7       	brne	.-4      	; 0x10c0a <gpib_bus_read_init+0x24>
   10c0e:	00 00       	nop
   10c10:	04 c0       	rjmp	.+8      	; 0x10c1a <gpib_bus_read_init+0x34>
   10c12:	5b 98       	cbi	0x0b, 3	; 11
   10c14:	53 9a       	sbi	0x0a, 3	; 10
   10c16:	5a 98       	cbi	0x0b, 2	; 11
   10c18:	52 9a       	sbi	0x0a, 2	; 10
   10c1a:	42 98       	cbi	0x08, 2	; 8
   10c1c:	3a 9a       	sbi	0x07, 2	; 7
   10c1e:	44 9a       	sbi	0x08, 4	; 8
   10c20:	3c 9a       	sbi	0x07, 4	; 7
   10c22:	8d e0       	ldi	r24, 0x0D	; 13
   10c24:	8a 95       	dec	r24
   10c26:	f1 f7       	brne	.-4      	; 0x10c24 <gpib_bus_read_init+0x3e>
   10c28:	00 00       	nop
   10c2a:	08 95       	ret

00010c2c <gpib_bus_init>:
   10c2c:	00 d0       	rcall	.+0      	; 0x10c2e <gpib_bus_init+0x2>
   10c2e:	1f 92       	push	r1
   10c30:	10 92 fa 18 	sts	0x18FA, r1	; 0x8018fa <gpib_unread_f>
   10c34:	11 b8       	out	0x01, r1	; 1
   10c36:	8f ef       	ldi	r24, 0xFF	; 255
   10c38:	82 b9       	out	0x02, r24	; 2
   10c3a:	21 98       	cbi	0x04, 1	; 4
   10c3c:	52 98       	cbi	0x0a, 2	; 10
   10c3e:	53 98       	cbi	0x0a, 3	; 10
   10c40:	54 98       	cbi	0x0a, 4	; 10
   10c42:	57 98       	cbi	0x0a, 7	; 10
   10c44:	56 98       	cbi	0x0a, 6	; 10
   10c46:	20 98       	cbi	0x04, 0	; 4
   10c48:	55 98       	cbi	0x0a, 5	; 10
   10c4a:	45 98       	cbi	0x08, 5	; 8
   10c4c:	3d 9a       	sbi	0x07, 5	; 7
   10c4e:	43 98       	cbi	0x08, 3	; 8
   10c50:	3b 9a       	sbi	0x07, 3	; 7
   10c52:	42 98       	cbi	0x08, 2	; 8
   10c54:	3a 9a       	sbi	0x07, 2	; 7
   10c56:	44 9a       	sbi	0x08, 4	; 8
   10c58:	3c 9a       	sbi	0x07, 4	; 7
   10c5a:	8d e0       	ldi	r24, 0x0D	; 13
   10c5c:	8a 95       	dec	r24
   10c5e:	f1 f7       	brne	.-4      	; 0x10c5c <gpib_bus_init+0x30>
   10c60:	00 00       	nop
   10c62:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   10c66:	82 ff       	sbrs	r24, 2
   10c68:	0a c0       	rjmp	.+20     	; 0x10c7e <gpib_bus_init+0x52>
   10c6a:	89 e5       	ldi	r24, 0x59	; 89
   10c6c:	90 e1       	ldi	r25, 0x10	; 16
   10c6e:	a0 e0       	ldi	r26, 0x00	; 0
   10c70:	ed b7       	in	r30, 0x3d	; 61
   10c72:	fe b7       	in	r31, 0x3e	; 62
   10c74:	81 83       	std	Z+1, r24	; 0x01
   10c76:	92 83       	std	Z+2, r25	; 0x02
   10c78:	a3 83       	std	Z+3, r26	; 0x03
   10c7a:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   10c7e:	0f 90       	pop	r0
   10c80:	0f 90       	pop	r0
   10c82:	0f 90       	pop	r0
   10c84:	08 95       	ret

00010c86 <gpib_state_init>:
   10c86:	00 d0       	rcall	.+0      	; 0x10c88 <gpib_state_init+0x2>
   10c88:	1f 92       	push	r1
   10c8a:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   10c8e:	82 ff       	sbrs	r24, 2
   10c90:	0a c0       	rjmp	.+20     	; 0x10ca6 <gpib_state_init+0x20>
   10c92:	86 e4       	ldi	r24, 0x46	; 70
   10c94:	90 e1       	ldi	r25, 0x10	; 16
   10c96:	a0 e0       	ldi	r26, 0x00	; 0
   10c98:	ed b7       	in	r30, 0x3d	; 61
   10c9a:	fe b7       	in	r31, 0x3e	; 62
   10c9c:	81 83       	std	Z+1, r24	; 0x01
   10c9e:	92 83       	std	Z+2, r25	; 0x02
   10ca0:	a3 83       	std	Z+3, r26	; 0x03
   10ca2:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   10ca6:	e4 dd       	rcall	.-1080   	; 0x10870 <ppr_init>
   10ca8:	0e 94 b1 90 	call	0x12162	; 0x12162 <listen_cleanup>
   10cac:	0e 94 c9 91 	call	0x12392	; 0x12392 <talk_cleanup>
   10cb0:	10 92 81 1e 	sts	0x1E81, r1	; 0x801e81 <spoll>
   10cb4:	10 92 84 1e 	sts	0x1E84, r1	; 0x801e84 <talking>
   10cb8:	10 92 87 1e 	sts	0x1E87, r1	; 0x801e87 <talking_last>
   10cbc:	10 92 86 1e 	sts	0x1E86, r1	; 0x801e86 <listening>
   10cc0:	10 92 80 1e 	sts	0x1E80, r1	; 0x801e80 <listening_last>
   10cc4:	10 92 7f 1c 	sts	0x1C7F, r1	; 0x801c7f <lastcmd+0x1>
   10cc8:	10 92 7e 1c 	sts	0x1C7E, r1	; 0x801c7e <lastcmd>
   10ccc:	10 92 83 1e 	sts	0x1E83, r1	; 0x801e83 <current+0x1>
   10cd0:	10 92 82 1e 	sts	0x1E82, r1	; 0x801e82 <current>
   10cd4:	10 92 85 1e 	sts	0x1E85, r1	; 0x801e85 <secondary>
   10cd8:	0f 90       	pop	r0
   10cda:	0f 90       	pop	r0
   10cdc:	0f 90       	pop	r0
   10cde:	08 95       	ret

00010ce0 <gpib_enable_PPR>:
   10ce0:	cf 93       	push	r28
   10ce2:	df 93       	push	r29
   10ce4:	ad b7       	in	r26, 0x3d	; 61
   10ce6:	be b7       	in	r27, 0x3e	; 62
   10ce8:	17 97       	sbiw	r26, 0x07	; 7
   10cea:	0f b6       	in	r0, 0x3f	; 63
   10cec:	f8 94       	cli
   10cee:	be bf       	out	0x3e, r27	; 62
   10cf0:	0f be       	out	0x3f, r0	; 63
   10cf2:	ad bf       	out	0x3d, r26	; 61
   10cf4:	ec 01       	movw	r28, r24
   10cf6:	88 30       	cpi	r24, 0x08	; 8
   10cf8:	91 05       	cpc	r25, r1
   10cfa:	68 f0       	brcs	.+26     	; 0x10d16 <gpib_enable_PPR+0x36>
   10cfc:	ed b7       	in	r30, 0x3d	; 61
   10cfe:	fe b7       	in	r31, 0x3e	; 62
   10d00:	95 83       	std	Z+5, r25	; 0x05
   10d02:	84 83       	std	Z+4, r24	; 0x04
   10d04:	80 e2       	ldi	r24, 0x20	; 32
   10d06:	90 e1       	ldi	r25, 0x10	; 16
   10d08:	a0 e0       	ldi	r26, 0x00	; 0
   10d0a:	81 83       	std	Z+1, r24	; 0x01
   10d0c:	92 83       	std	Z+2, r25	; 0x02
   10d0e:	a3 83       	std	Z+3, r26	; 0x03
   10d10:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   10d14:	15 c0       	rjmp	.+42     	; 0x10d40 <gpib_enable_PPR+0x60>
   10d16:	c2 dd       	rcall	.-1148   	; 0x1089c <ppr_bit_set>
   10d18:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   10d1c:	81 ff       	sbrs	r24, 1
   10d1e:	10 c0       	rjmp	.+32     	; 0x10d40 <gpib_enable_PPR+0x60>
   10d20:	a3 dd       	rcall	.-1210   	; 0x10868 <ppr_reg>
   10d22:	90 e0       	ldi	r25, 0x00	; 0
   10d24:	ed b7       	in	r30, 0x3d	; 61
   10d26:	fe b7       	in	r31, 0x3e	; 62
   10d28:	97 83       	std	Z+7, r25	; 0x07
   10d2a:	86 83       	std	Z+6, r24	; 0x06
   10d2c:	d5 83       	std	Z+5, r29	; 0x05
   10d2e:	c4 83       	std	Z+4, r28	; 0x04
   10d30:	85 e0       	ldi	r24, 0x05	; 5
   10d32:	90 e1       	ldi	r25, 0x10	; 16
   10d34:	a0 e0       	ldi	r26, 0x00	; 0
   10d36:	81 83       	std	Z+1, r24	; 0x01
   10d38:	92 83       	std	Z+2, r25	; 0x02
   10d3a:	a3 83       	std	Z+3, r26	; 0x03
   10d3c:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   10d40:	cd b7       	in	r28, 0x3d	; 61
   10d42:	de b7       	in	r29, 0x3e	; 62
   10d44:	27 96       	adiw	r28, 0x07	; 7
   10d46:	e2 e0       	ldi	r30, 0x02	; 2
   10d48:	0c 94 f4 e3 	jmp	0x1c7e8	; 0x1c7e8 <__epilogue_restores__+0x20>

00010d4c <gpib_disable_PPR>:
   10d4c:	cf 93       	push	r28
   10d4e:	df 93       	push	r29
   10d50:	ad b7       	in	r26, 0x3d	; 61
   10d52:	be b7       	in	r27, 0x3e	; 62
   10d54:	17 97       	sbiw	r26, 0x07	; 7
   10d56:	0f b6       	in	r0, 0x3f	; 63
   10d58:	f8 94       	cli
   10d5a:	be bf       	out	0x3e, r27	; 62
   10d5c:	0f be       	out	0x3f, r0	; 63
   10d5e:	ad bf       	out	0x3d, r26	; 61
   10d60:	ec 01       	movw	r28, r24
   10d62:	88 30       	cpi	r24, 0x08	; 8
   10d64:	91 05       	cpc	r25, r1
   10d66:	68 f0       	brcs	.+26     	; 0x10d82 <gpib_disable_PPR+0x36>
   10d68:	ed b7       	in	r30, 0x3d	; 61
   10d6a:	fe b7       	in	r31, 0x3e	; 62
   10d6c:	95 83       	std	Z+5, r25	; 0x05
   10d6e:	84 83       	std	Z+4, r24	; 0x04
   10d70:	8e ed       	ldi	r24, 0xDE	; 222
   10d72:	9f e0       	ldi	r25, 0x0F	; 15
   10d74:	a0 e0       	ldi	r26, 0x00	; 0
   10d76:	81 83       	std	Z+1, r24	; 0x01
   10d78:	92 83       	std	Z+2, r25	; 0x02
   10d7a:	a3 83       	std	Z+3, r26	; 0x03
   10d7c:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   10d80:	15 c0       	rjmp	.+42     	; 0x10dac <gpib_disable_PPR+0x60>
   10d82:	99 dd       	rcall	.-1230   	; 0x108b6 <ppr_bit_clr>
   10d84:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   10d88:	81 ff       	sbrs	r24, 1
   10d8a:	10 c0       	rjmp	.+32     	; 0x10dac <gpib_disable_PPR+0x60>
   10d8c:	6d dd       	rcall	.-1318   	; 0x10868 <ppr_reg>
   10d8e:	90 e0       	ldi	r25, 0x00	; 0
   10d90:	ed b7       	in	r30, 0x3d	; 61
   10d92:	fe b7       	in	r31, 0x3e	; 62
   10d94:	97 83       	std	Z+7, r25	; 0x07
   10d96:	86 83       	std	Z+6, r24	; 0x06
   10d98:	d5 83       	std	Z+5, r29	; 0x05
   10d9a:	c4 83       	std	Z+4, r28	; 0x04
   10d9c:	83 ec       	ldi	r24, 0xC3	; 195
   10d9e:	9f e0       	ldi	r25, 0x0F	; 15
   10da0:	a0 e0       	ldi	r26, 0x00	; 0
   10da2:	81 83       	std	Z+1, r24	; 0x01
   10da4:	92 83       	std	Z+2, r25	; 0x02
   10da6:	a3 83       	std	Z+3, r26	; 0x03
   10da8:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   10dac:	cd b7       	in	r28, 0x3d	; 61
   10dae:	de b7       	in	r29, 0x3e	; 62
   10db0:	27 96       	adiw	r28, 0x07	; 7
   10db2:	e2 e0       	ldi	r30, 0x02	; 2
   10db4:	0c 94 f4 e3 	jmp	0x1c7e8	; 0x1c7e8 <__epilogue_restores__+0x20>

00010db8 <gpib_assert_ifc>:
   10db8:	00 d0       	rcall	.+0      	; 0x10dba <gpib_assert_ifc+0x2>
   10dba:	1f 92       	push	r1
   10dbc:	5c 98       	cbi	0x0b, 4	; 11
   10dbe:	54 9a       	sbi	0x0a, 4	; 10
   10dc0:	6a ef       	ldi	r22, 0xFA	; 250
   10dc2:	70 e0       	ldi	r23, 0x00	; 0
   10dc4:	80 e0       	ldi	r24, 0x00	; 0
   10dc6:	90 e0       	ldi	r25, 0x00	; 0
   10dc8:	0e 94 ca 29 	call	0x5394	; 0x5394 <delayus>
   10dcc:	54 98       	cbi	0x0a, 4	; 10
   10dce:	6a ef       	ldi	r22, 0xFA	; 250
   10dd0:	70 e0       	ldi	r23, 0x00	; 0
   10dd2:	80 e0       	ldi	r24, 0x00	; 0
   10dd4:	90 e0       	ldi	r25, 0x00	; 0
   10dd6:	0e 94 ca 29 	call	0x5394	; 0x5394 <delayus>
   10dda:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   10dde:	82 ff       	sbrs	r24, 2
   10de0:	0a c0       	rjmp	.+20     	; 0x10df6 <gpib_assert_ifc+0x3e>
   10de2:	87 eb       	ldi	r24, 0xB7	; 183
   10de4:	9f e0       	ldi	r25, 0x0F	; 15
   10de6:	a0 e0       	ldi	r26, 0x00	; 0
   10de8:	ed b7       	in	r30, 0x3d	; 61
   10dea:	fe b7       	in	r31, 0x3e	; 62
   10dec:	81 83       	std	Z+1, r24	; 0x01
   10dee:	92 83       	std	Z+2, r25	; 0x02
   10df0:	a3 83       	std	Z+3, r26	; 0x03
   10df2:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   10df6:	0f 90       	pop	r0
   10df8:	0f 90       	pop	r0
   10dfa:	0f 90       	pop	r0
   10dfc:	08 95       	ret

00010dfe <gpib_unread>:
   10dfe:	cf 93       	push	r28
   10e00:	df 93       	push	r29
   10e02:	00 d0       	rcall	.+0      	; 0x10e04 <gpib_unread+0x6>
   10e04:	1f 92       	push	r1
   10e06:	ec 01       	movw	r28, r24
   10e08:	80 91 fa 18 	lds	r24, 0x18FA	; 0x8018fa <gpib_unread_f>
   10e0c:	81 11       	cpse	r24, r1
   10e0e:	08 c0       	rjmp	.+16     	; 0x10e20 <gpib_unread+0x22>
   10e10:	d0 93 89 1e 	sts	0x1E89, r29	; 0x801e89 <gpib_unread_data+0x1>
   10e14:	c0 93 88 1e 	sts	0x1E88, r28	; 0x801e88 <gpib_unread_data>
   10e18:	81 e0       	ldi	r24, 0x01	; 1
   10e1a:	80 93 fa 18 	sts	0x18FA, r24	; 0x8018fa <gpib_unread_f>
   10e1e:	12 c0       	rjmp	.+36     	; 0x10e44 <gpib_unread+0x46>
   10e20:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   10e24:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   10e28:	85 70       	andi	r24, 0x05	; 5
   10e2a:	99 27       	eor	r25, r25
   10e2c:	89 2b       	or	r24, r25
   10e2e:	51 f0       	breq	.+20     	; 0x10e44 <gpib_unread+0x46>
   10e30:	89 e8       	ldi	r24, 0x89	; 137
   10e32:	9f e0       	ldi	r25, 0x0F	; 15
   10e34:	a0 e0       	ldi	r26, 0x00	; 0
   10e36:	ed b7       	in	r30, 0x3d	; 61
   10e38:	fe b7       	in	r31, 0x3e	; 62
   10e3a:	81 83       	std	Z+1, r24	; 0x01
   10e3c:	92 83       	std	Z+2, r25	; 0x02
   10e3e:	a3 83       	std	Z+3, r26	; 0x03
   10e40:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   10e44:	ce 01       	movw	r24, r28
   10e46:	cd b7       	in	r28, 0x3d	; 61
   10e48:	de b7       	in	r29, 0x3e	; 62
   10e4a:	23 96       	adiw	r28, 0x03	; 3
   10e4c:	e2 e0       	ldi	r30, 0x02	; 2
   10e4e:	0c 94 f4 e3 	jmp	0x1c7e8	; 0x1c7e8 <__epilogue_restores__+0x20>

00010e52 <gpib_bus_read>:

/// @brief Read GPIB data BUS only
/// @return  bus (lower 8 bits)
uint8_t gpib_bus_read()
{
    uint8_t bus = ~(GPIB_BUS_RD());
   10e52:	11 b8       	out	0x01, r1	; 1
   10e54:	80 b1       	in	r24, 0x00	; 0
   10e56:	80 95       	com	r24

    ///@brief if a command byte (ATN low) then strip partity
    if(!GPIB_PIN_TST(ATN))
   10e58:	4e 9b       	sbis	0x09, 6	; 9
        bus &= 0x7f;
   10e5a:	8f 77       	andi	r24, 0x7F	; 127
    else
        bus &= 0xff;
    return(bus);
}
   10e5c:	08 95       	ret

00010e5e <gpib_control_pin_read>:
/// @return  control lines (upper 8 bits)
/// @see gpib_bus_read_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
    if(GPIB_PIN_TST(ATN) == 0 )
   10e5e:	4e 99       	sbic	0x09, 6	; 9
   10e60:	03 c0       	rjmp	.+6      	; 0x10e68 <gpib_control_pin_read+0xa>
        control |= ATN_FLAG;
   10e62:	80 e0       	ldi	r24, 0x00	; 0
   10e64:	94 e0       	ldi	r25, 0x04	; 4
   10e66:	02 c0       	rjmp	.+4      	; 0x10e6c <gpib_control_pin_read+0xe>
///   FIXME We could add a test for read/write state ??
/// @return  control lines (upper 8 bits)
/// @see gpib_bus_read_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
   10e68:	80 e0       	ldi	r24, 0x00	; 0
   10e6a:	90 e0       	ldi	r25, 0x00	; 0
    if(GPIB_PIN_TST(ATN) == 0 )
        control |= ATN_FLAG;
    if(GPIB_PIN_TST(EOI) == 0 )
   10e6c:	18 9b       	sbis	0x03, 0	; 3
        control |= EOI_FLAG;
   10e6e:	91 60       	ori	r25, 0x01	; 1
    if(GPIB_PIN_TST(SRQ) == 0 )
   10e70:	4d 9b       	sbis	0x09, 5	; 9
        control |= SRQ_FLAG;
   10e72:	92 60       	ori	r25, 0x02	; 2
    if(GPIB_PIN_TST(REN) == 0 )
   10e74:	4f 9b       	sbis	0x09, 7	; 9
        control |= REN_FLAG;
   10e76:	98 60       	ori	r25, 0x08	; 8
    if(GPIB_PIN_TST(IFC) == 0 )
   10e78:	4c 9b       	sbis	0x09, 4	; 9
        control |= IFC_FLAG;
   10e7a:	90 61       	ori	r25, 0x10	; 16
    return(control);
}
   10e7c:	08 95       	ret

00010e7e <gpib_handshake_pin_read>:
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
    ///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
    /// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
   10e7e:	19 99       	sbic	0x03, 1	; 3
   10e80:	03 c0       	rjmp	.+6      	; 0x10e88 <gpib_handshake_pin_read+0xa>
        control |= DAV_FLAG;
   10e82:	80 e0       	ldi	r24, 0x00	; 0
   10e84:	90 e2       	ldi	r25, 0x20	; 32
   10e86:	02 c0       	rjmp	.+4      	; 0x10e8c <gpib_handshake_pin_read+0xe>
/// FIXME: V2 boards can only read pins enabled for read by the SN75162
///   FIXME We could add a test for read/write state ??
/// @return  handshake lines (upper 8 bits)
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
   10e88:	80 e0       	ldi	r24, 0x00	; 0
   10e8a:	90 e0       	ldi	r25, 0x00	; 0
    ///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
    /// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
        control |= DAV_FLAG;
    if(GPIB_PIN_TST(NRFD) == 0 )
   10e8c:	4a 9b       	sbis	0x09, 2	; 9
        control |= NRFD_FLAG;
   10e8e:	90 64       	ori	r25, 0x40	; 64
    if(GPIB_PIN_TST(NDAC) == 0 )
   10e90:	4b 9b       	sbis	0x09, 3	; 9
        control |= NDAC_FLAG;
   10e92:	90 68       	ori	r25, 0x80	; 128
    return(control);
}
   10e94:	08 95       	ret

00010e96 <gpib_write_byte>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
uint16_t gpib_write_byte(uint16_t ch)
{
   10e96:	2f 92       	push	r2
   10e98:	3f 92       	push	r3
   10e9a:	4f 92       	push	r4
   10e9c:	6f 92       	push	r6
   10e9e:	7f 92       	push	r7
   10ea0:	8f 92       	push	r8
   10ea2:	cf 92       	push	r12
   10ea4:	df 92       	push	r13
   10ea6:	ef 92       	push	r14
   10ea8:	1f 93       	push	r17
   10eaa:	cf 93       	push	r28
   10eac:	df 93       	push	r29
   10eae:	cd b7       	in	r28, 0x3d	; 61
   10eb0:	de b7       	in	r29, 0x3e	; 62
   10eb2:	2f 97       	sbiw	r28, 0x0f	; 15
   10eb4:	0f b6       	in	r0, 0x3f	; 63
   10eb6:	f8 94       	cli
   10eb8:	de bf       	out	0x3e, r29	; 62
   10eba:	0f be       	out	0x3f, r0	; 63
   10ebc:	cd bf       	out	0x3d, r28	; 61
   10ebe:	9f 87       	std	Y+15, r25	; 0x0f
   10ec0:	8e 87       	std	Y+14, r24	; 0x0e
    uint8_t tx_state;

	// Wait for DAV to be released before starting
	// Read state for DAV
	gpib_bus_read_init(0);
   10ec2:	80 e0       	ldi	r24, 0x00	; 0
   10ec4:	90 e0       	ldi	r25, 0x00	; 0
   10ec6:	8f de       	rcall	.-738    	; 0x10be6 <gpib_bus_read_init>
	// Bus read init sets the following states
	// GPIB_BUS_LATCH_WR(0xff); // float OC BUS on write
	// GPIB_IO_LOW(PE);			// BUS OC PULLUP

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);
   10ec8:	64 ef       	ldi	r22, 0xF4	; 244
   10eca:	71 e0       	ldi	r23, 0x01	; 1
   10ecc:	80 e0       	ldi	r24, 0x00	; 0
   10ece:	90 e0       	ldi	r25, 0x00	; 0
   10ed0:	80 de       	rcall	.-768    	; 0x10bd2 <gpib_timeout_set>

	// Bus read init sets the following states
	// GPIB_BUS_LATCH_WR(0xff); // float OC BUS on write
	// GPIB_IO_LOW(PE);			// BUS OC PULLUP

    tx_state = GPIB_TX_START;
   10ed2:	10 e0       	ldi	r17, 0x00	; 0
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for DAV==1>\n");
   10ed4:	87 ef       	ldi	r24, 0xF7	; 247
   10ed6:	9e e0       	ldi	r25, 0x0E	; 14
   10ed8:	6c 01       	movw	r12, r24
   10eda:	e1 2c       	mov	r14, r1
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for NDAC==1>\n");
   10edc:	81 e1       	ldi	r24, 0x11	; 17
   10ede:	9f e0       	ldi	r25, 0x0F	; 15
   10ee0:	3c 01       	movw	r6, r24
   10ee2:	81 2c       	mov	r8, r1
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for NRFD==0>\n");
   10ee4:	8c e2       	ldi	r24, 0x2C	; 44
   10ee6:	9f e0       	ldi	r25, 0x0F	; 15
   10ee8:	1c 01       	movw	r2, r24
   10eea:	41 2c       	mov	r4, r1
                }
                if (gpib_timeout_test())
                {
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for NRFD==1 && NDAC == 0>\n");
   10eec:	87 e4       	ldi	r24, 0x47	; 71
   10eee:	9f e0       	ldi	r25, 0x0F	; 15
   10ef0:	9c 01       	movw	r18, r24
   10ef2:	40 e0       	ldi	r20, 0x00	; 0
   10ef4:	28 87       	std	Y+8, r18	; 0x08
   10ef6:	39 87       	std	Y+9, r19	; 0x09
   10ef8:	4a 87       	std	Y+10, r20	; 0x0a
                }
                if (gpib_timeout_test())
                {
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for DAV==1>\n");
   10efa:	8f e6       	ldi	r24, 0x6F	; 111
   10efc:	9f e0       	ldi	r25, 0x0F	; 15
   10efe:	9c 01       	movw	r18, r24
   10f00:	40 e0       	ldi	r20, 0x00	; 0
   10f02:	2b 87       	std	Y+11, r18	; 0x0b
   10f04:	3c 87       	std	Y+12, r19	; 0x0c
   10f06:	4d 87       	std	Y+13, r20	; 0x0d
    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);

    while(tx_state != GPIB_TX_DONE )
    {
        if(uart_keyhit(0))
   10f08:	80 e0       	ldi	r24, 0x00	; 0
   10f0a:	0e 94 01 2c 	call	0x5802	; 0x5802 <uart_keyhit>
   10f0e:	89 2b       	or	r24, r25
   10f10:	09 f0       	breq	.+2      	; 0x10f14 <gpib_write_byte+0x7e>
   10f12:	1b c1       	rjmp	.+566    	; 0x1114a <gpib_write_byte+0x2b4>
        if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

		// IFC is always in for a device
        if(GPIB_PIN_TST(IFC) == 0)
   10f14:	4c 99       	sbic	0x09, 4	; 9
   10f16:	07 c0       	rjmp	.+14     	; 0x10f26 <gpib_write_byte+0x90>
        {
            ch |= IFC_FLAG;
   10f18:	8e 85       	ldd	r24, Y+14	; 0x0e
   10f1a:	9f 85       	ldd	r25, Y+15	; 0x0f
   10f1c:	90 61       	ori	r25, 0x10	; 16
   10f1e:	9f 87       	std	Y+15, r25	; 0x0f
			gpib_bus_init();
   10f20:	8e 87       	std	Y+14, r24	; 0x0e
   10f22:	84 de       	rcall	.-760    	; 0x10c2c <gpib_bus_init>
            break;
   10f24:	12 c1       	rjmp	.+548    	; 0x1114a <gpib_write_byte+0x2b4>
        }

        switch(tx_state)
   10f26:	81 2f       	mov	r24, r17
   10f28:	90 e0       	ldi	r25, 0x00	; 0
   10f2a:	8a 30       	cpi	r24, 0x0A	; 10
   10f2c:	91 05       	cpc	r25, r1
   10f2e:	08 f0       	brcs	.+2      	; 0x10f32 <gpib_write_byte+0x9c>
   10f30:	02 c1       	rjmp	.+516    	; 0x11136 <gpib_write_byte+0x2a0>
   10f32:	fc 01       	movw	r30, r24
   10f34:	e3 54       	subi	r30, 0x43	; 67
   10f36:	ff 4f       	sbci	r31, 0xFF	; 255
   10f38:	0c 94 84 e3 	jmp	0x1c708	; 0x1c708 <__tablejump2__>
        {
            case GPIB_TX_START:
                // Wait for release of DAV and EOI before starting
				// IF DAV = 0 the bus is busy
                if(GPIB_PIN_TST(DAV) == 1)
   10f3c:	19 9b       	sbis	0x03, 1	; 3
   10f3e:	12 c0       	rjmp	.+36     	; 0x10f64 <gpib_write_byte+0xce>
					// We arive here in Read Mode - see gpib_bus_read_init(0);

					// Switch GBIB driver direction to Write
					// CPU has BUS already set IN with pullups = 0xff - see gpib_bus_read_init(0);
					// When we switch the GPIB drivers will be in OC mode and off the bus (0xff)
					GPIB_IO_HI(TE); // BUS OUT, DAV OUT, NRFD and NDAC IN
   10f40:	42 9a       	sbi	0x08, 2	; 8
   10f42:	3a 9a       	sbi	0x07, 2	; 7
					GPIB_IO_LOW(DC);// ATN OUT, EOI OUT, SRQ IN
   10f44:	44 98       	cbi	0x08, 4	; 8
   10f46:	3c 9a       	sbi	0x07, 4	; 7
#endif
                    // My testing with various GPIB devices shows that we MUST assert ATN EARLY!
                    if(ch & ATN_FLAG)
   10f48:	ee 85       	ldd	r30, Y+14	; 0x0e
   10f4a:	ff 85       	ldd	r31, Y+15	; 0x0f
   10f4c:	f2 ff       	sbrs	r31, 2
   10f4e:	03 c0       	rjmp	.+6      	; 0x10f56 <gpib_write_byte+0xc0>
                        GPIB_IO_LOW(ATN);   // FYI: SS80 never sends ATN from a device
   10f50:	5e 98       	cbi	0x0b, 6	; 11
   10f52:	56 9a       	sbi	0x0a, 6	; 10
   10f54:	01 c0       	rjmp	.+2      	; 0x10f58 <gpib_write_byte+0xc2>
                    else
                        GPIB_PIN_FLOAT_UP(ATN);
   10f56:	56 98       	cbi	0x0a, 6	; 10

                    gpib_timeout_set(HTIMEOUT);
   10f58:	64 ef       	ldi	r22, 0xF4	; 244
   10f5a:	71 e0       	ldi	r23, 0x01	; 1
   10f5c:	80 e0       	ldi	r24, 0x00	; 0
   10f5e:	90 e0       	ldi	r25, 0x00	; 0
   10f60:	38 de       	rcall	.-912    	; 0x10bd2 <gpib_timeout_set>
                    tx_state = GPIB_TX_WAIT_READY;
   10f62:	11 e0       	ldi	r17, 0x01	; 1
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10f64:	80 91 7d 1c 	lds	r24, 0x1C7D	; 0x801c7d <gpib_timer+0x8>
                        GPIB_PIN_FLOAT_UP(ATN);

                    gpib_timeout_set(HTIMEOUT);
                    tx_state = GPIB_TX_WAIT_READY;
                }
                if (gpib_timeout_test())
   10f68:	88 23       	and	r24, r24
   10f6a:	71 f2       	breq	.-100    	; 0x10f08 <gpib_write_byte+0x72>
                {
#if SDEBUG
                    if(debuglevel & (1+4))
   10f6c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   10f70:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   10f74:	85 70       	andi	r24, 0x05	; 5
   10f76:	99 27       	eor	r25, r25
   10f78:	89 2b       	or	r24, r25
   10f7a:	51 f1       	breq	.+84     	; 0x10fd0 <gpib_write_byte+0x13a>
                        printf("<BUS waiting for DAV==1>\n");
   10f7c:	2b 85       	ldd	r18, Y+11	; 0x0b
   10f7e:	3c 85       	ldd	r19, Y+12	; 0x0c
   10f80:	4d 85       	ldd	r20, Y+13	; 0x0d
   10f82:	ed b7       	in	r30, 0x3d	; 61
   10f84:	fe b7       	in	r31, 0x3e	; 62
   10f86:	21 83       	std	Z+1, r18	; 0x01
   10f88:	32 83       	std	Z+2, r19	; 0x02
   10f8a:	43 83       	std	Z+3, r20	; 0x03
   10f8c:	1f c0       	rjmp	.+62     	; 0x10fcc <gpib_write_byte+0x136>
                }
                break;

            case GPIB_TX_WAIT_READY:
                // Wait for ready condition
                if(GPIB_PIN_TST(NRFD) == 1 && GPIB_PIN_TST(NDAC) == 0)
   10f8e:	4a 9b       	sbis	0x09, 2	; 9
   10f90:	08 c0       	rjmp	.+16     	; 0x10fa2 <gpib_write_byte+0x10c>
   10f92:	4b 99       	sbic	0x09, 3	; 9
                {
                    gpib_timeout_set(HTIMEOUT);
   10f94:	06 c0       	rjmp	.+12     	; 0x10fa2 <gpib_write_byte+0x10c>
   10f96:	64 ef       	ldi	r22, 0xF4	; 244
   10f98:	71 e0       	ldi	r23, 0x01	; 1
   10f9a:	80 e0       	ldi	r24, 0x00	; 0
   10f9c:	90 e0       	ldi	r25, 0x00	; 0
                    tx_state = GPIB_TX_PUT_DATA;
   10f9e:	19 de       	rcall	.-974    	; 0x10bd2 <gpib_timeout_set>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10fa0:	12 e0       	ldi	r17, 0x02	; 2
   10fa2:	80 91 7d 1c 	lds	r24, 0x1C7D	; 0x801c7d <gpib_timer+0x8>
                if(GPIB_PIN_TST(NRFD) == 1 && GPIB_PIN_TST(NDAC) == 0)
                {
                    gpib_timeout_set(HTIMEOUT);
                    tx_state = GPIB_TX_PUT_DATA;
                }
                if (gpib_timeout_test())
   10fa6:	88 23       	and	r24, r24
   10fa8:	09 f4       	brne	.+2      	; 0x10fac <gpib_write_byte+0x116>
                {
#if SDEBUG
                    if(debuglevel & (1+4))
   10faa:	ae cf       	rjmp	.-164    	; 0x10f08 <gpib_write_byte+0x72>
   10fac:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   10fb0:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   10fb4:	85 70       	andi	r24, 0x05	; 5
   10fb6:	99 27       	eor	r25, r25
   10fb8:	89 2b       	or	r24, r25
                        printf("<BUS waiting for NRFD==1 && NDAC == 0>\n");
   10fba:	51 f0       	breq	.+20     	; 0x10fd0 <gpib_write_byte+0x13a>
   10fbc:	88 85       	ldd	r24, Y+8	; 0x08
   10fbe:	99 85       	ldd	r25, Y+9	; 0x09
   10fc0:	aa 85       	ldd	r26, Y+10	; 0x0a
   10fc2:	ed b7       	in	r30, 0x3d	; 61
   10fc4:	fe b7       	in	r31, 0x3e	; 62
   10fc6:	81 83       	std	Z+1, r24	; 0x01
   10fc8:	92 83       	std	Z+2, r25	; 0x02
   10fca:	a3 83       	std	Z+3, r26	; 0x03
   10fcc:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
#endif
                    ch |= TIMEOUT_FLAG;
   10fd0:	2e 85       	ldd	r18, Y+14	; 0x0e
   10fd2:	3f 85       	ldd	r19, Y+15	; 0x0f
   10fd4:	30 64       	ori	r19, 0x40	; 64
   10fd6:	3f 87       	std	Y+15, r19	; 0x0f
   10fd8:	2e 87       	std	Y+14, r18	; 0x0e
                }
                break;

            case GPIB_TX_PUT_DATA:

                if(ch & EOI_FLAG)
   10fda:	b5 c0       	rjmp	.+362    	; 0x11146 <gpib_write_byte+0x2b0>
   10fdc:	8e 85       	ldd	r24, Y+14	; 0x0e
   10fde:	9f 85       	ldd	r25, Y+15	; 0x0f
   10fe0:	90 ff       	sbrs	r25, 0
                    GPIB_IO_LOW(EOI);
   10fe2:	03 c0       	rjmp	.+6      	; 0x10fea <gpib_write_byte+0x154>
   10fe4:	28 98       	cbi	0x05, 0	; 5
   10fe6:	20 9a       	sbi	0x04, 0	; 4
                else
                    GPIB_PIN_FLOAT_UP(EOI);
   10fe8:	01 c0       	rjmp	.+2      	; 0x10fec <gpib_write_byte+0x156>

                GPIB_BUS_WR((ch & 0xff) ^ 0xff);  // Write Data inverted
   10fea:	20 98       	cbi	0x04, 0	; 4
   10fec:	8f ef       	ldi	r24, 0xFF	; 255
   10fee:	81 b9       	out	0x01, r24	; 1
   10ff0:	8e 85       	ldd	r24, Y+14	; 0x0e
   10ff2:	80 95       	com	r24
#if BOARD == 2
				// Switch to Tristate mode to soeed up Write
                GPIB_IO_HI(PE); 
   10ff4:	82 b9       	out	0x02, r24	; 2
   10ff6:	43 9a       	sbi	0x08, 3	; 8
   10ff8:	3b 9a       	sbi	0x07, 3	; 7
   10ffa:	9d e0       	ldi	r25, 0x0D	; 13
   10ffc:	9a 95       	dec	r25
#endif
                GPIB_BUS_SETTLE();                // Let Data BUS settle

                gpib_timeout_set(HTIMEOUT);
   10ffe:	f1 f7       	brne	.-4      	; 0x10ffc <gpib_write_byte+0x166>
   11000:	00 00       	nop
   11002:	64 ef       	ldi	r22, 0xF4	; 244
   11004:	71 e0       	ldi	r23, 0x01	; 1
   11006:	80 e0       	ldi	r24, 0x00	; 0
   11008:	90 e0       	ldi	r25, 0x00	; 0
                tx_state = GPIB_TX_SET_DAV_LOW;
   1100a:	e3 dd       	rcall	.-1082   	; 0x10bd2 <gpib_timeout_set>
                break;


            case GPIB_TX_SET_DAV_LOW:
                GPIB_IO_LOW(DAV);
   1100c:	13 e0       	ldi	r17, 0x03	; 3
                gpib_timeout_set(HTIMEOUT);
   1100e:	7c cf       	rjmp	.-264    	; 0x10f08 <gpib_write_byte+0x72>
   11010:	29 98       	cbi	0x05, 1	; 5
   11012:	21 9a       	sbi	0x04, 1	; 4
   11014:	64 ef       	ldi	r22, 0xF4	; 244
   11016:	71 e0       	ldi	r23, 0x01	; 1
   11018:	80 e0       	ldi	r24, 0x00	; 0
                tx_state = GPIB_TX_WAIT_FOR_NRFD_LOW;
                break;

            ///@brief first device is ready
            case GPIB_TX_WAIT_FOR_NRFD_LOW:
                if (GPIB_PIN_TST(NRFD) == 0)
   1101a:	90 e0       	ldi	r25, 0x00	; 0
   1101c:	da dd       	rcall	.-1100   	; 0x10bd2 <gpib_timeout_set>
                {
                    gpib_timeout_set(HTIMEOUT);
   1101e:	14 e0       	ldi	r17, 0x04	; 4
   11020:	73 cf       	rjmp	.-282    	; 0x10f08 <gpib_write_byte+0x72>
   11022:	4a 99       	sbic	0x09, 2	; 9
   11024:	07 c0       	rjmp	.+14     	; 0x11034 <gpib_write_byte+0x19e>
   11026:	64 ef       	ldi	r22, 0xF4	; 244
   11028:	71 e0       	ldi	r23, 0x01	; 1
                    tx_state = GPIB_TX_WAIT_FOR_NDAC_HI;
   1102a:	80 e0       	ldi	r24, 0x00	; 0
                    break;
   1102c:	90 e0       	ldi	r25, 0x00	; 0
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   1102e:	d1 dd       	rcall	.-1118   	; 0x10bd2 <gpib_timeout_set>
   11030:	15 e0       	ldi	r17, 0x05	; 5
                {
                    gpib_timeout_set(HTIMEOUT);
                    tx_state = GPIB_TX_WAIT_FOR_NDAC_HI;
                    break;
                }
                if (gpib_timeout_test())
   11032:	6a cf       	rjmp	.-300    	; 0x10f08 <gpib_write_byte+0x72>
   11034:	80 91 7d 1c 	lds	r24, 0x1C7D	; 0x801c7d <gpib_timer+0x8>
                {
                    ch |= TIMEOUT_FLAG;
   11038:	88 23       	and	r24, r24
   1103a:	09 f4       	brne	.+2      	; 0x1103e <gpib_write_byte+0x1a8>
   1103c:	65 cf       	rjmp	.-310    	; 0x10f08 <gpib_write_byte+0x72>
   1103e:	ee 85       	ldd	r30, Y+14	; 0x0e
   11040:	ff 85       	ldd	r31, Y+15	; 0x0f
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
   11042:	f0 64       	ori	r31, 0x40	; 64
   11044:	ff 87       	std	Y+15, r31	; 0x0f
   11046:	ee 87       	std	Y+14, r30	; 0x0e
   11048:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1104c:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   11050:	85 70       	andi	r24, 0x05	; 5
   11052:	99 27       	eor	r25, r25
                        printf("<BUS waiting for NRFD==0>\n");
   11054:	89 2b       	or	r24, r25
   11056:	09 f4       	brne	.+2      	; 0x1105a <gpib_write_byte+0x1c4>
   11058:	76 c0       	rjmp	.+236    	; 0x11146 <gpib_write_byte+0x2b0>
   1105a:	ed b7       	in	r30, 0x3d	; 61
   1105c:	fe b7       	in	r31, 0x3e	; 62
   1105e:	21 82       	std	Z+1, r2	; 0x01
                }
                break;

            ///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)         // Byte byte accepted
   11060:	32 82       	std	Z+2, r3	; 0x02
   11062:	43 82       	std	Z+3, r4	; 0x03
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11064:	43 c0       	rjmp	.+134    	; 0x110ec <gpib_write_byte+0x256>
   11066:	4b 99       	sbic	0x09, 3	; 9
                if(GPIB_PIN_TST(NDAC) == 1)         // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
                    break;
                }
                if (gpib_timeout_test())
   11068:	6a c0       	rjmp	.+212    	; 0x1113e <gpib_write_byte+0x2a8>
   1106a:	80 91 7d 1c 	lds	r24, 0x1C7D	; 0x801c7d <gpib_timer+0x8>
                {
                    ch |= TIMEOUT_FLAG;
   1106e:	88 23       	and	r24, r24
   11070:	09 f4       	brne	.+2      	; 0x11074 <gpib_write_byte+0x1de>
   11072:	4a cf       	rjmp	.-364    	; 0x10f08 <gpib_write_byte+0x72>
   11074:	2e 85       	ldd	r18, Y+14	; 0x0e
   11076:	3f 85       	ldd	r19, Y+15	; 0x0f
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
   11078:	30 64       	ori	r19, 0x40	; 64
   1107a:	3f 87       	std	Y+15, r19	; 0x0f
   1107c:	2e 87       	std	Y+14, r18	; 0x0e
   1107e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   11082:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   11086:	85 70       	andi	r24, 0x05	; 5
   11088:	99 27       	eor	r25, r25
                        printf("<BUS waiting for NDAC==1>\n");
   1108a:	89 2b       	or	r24, r25
   1108c:	09 f4       	brne	.+2      	; 0x11090 <gpib_write_byte+0x1fa>
   1108e:	5b c0       	rjmp	.+182    	; 0x11146 <gpib_write_byte+0x2b0>
   11090:	ed b7       	in	r30, 0x3d	; 61
   11092:	fe b7       	in	r31, 0x3e	; 62
                }
                break;

            ///@release BUS
            case GPIB_TX_SET_DAV_HI:
                GPIB_PIN_FLOAT_UP(DAV);
   11094:	61 82       	std	Z+1, r6	; 0x01
   11096:	72 82       	std	Z+2, r7	; 0x02
   11098:	83 82       	std	Z+3, r8	; 0x03
   1109a:	28 c0       	rjmp	.+80     	; 0x110ec <gpib_write_byte+0x256>
				GPIB_BUS_SETTLE();			// give some time

				gpib_bus_read_init(0);		// Free BUS, NOT busy
   1109c:	21 98       	cbi	0x04, 1	; 4
   1109e:	fd e0       	ldi	r31, 0x0D	; 13
   110a0:	fa 95       	dec	r31
   110a2:	f1 f7       	brne	.-4      	; 0x110a0 <gpib_write_byte+0x20a>

                gpib_timeout_set(HTIMEOUT);
   110a4:	00 00       	nop
   110a6:	80 e0       	ldi	r24, 0x00	; 0
   110a8:	90 e0       	ldi	r25, 0x00	; 0
   110aa:	9d dd       	rcall	.-1222   	; 0x10be6 <gpib_bus_read_init>
   110ac:	64 ef       	ldi	r22, 0xF4	; 244
   110ae:	71 e0       	ldi	r23, 0x01	; 1
                tx_state = GPIB_TX_WAIT_FOR_DAV_HI;
   110b0:	80 e0       	ldi	r24, 0x00	; 0
                break;
   110b2:	90 e0       	ldi	r25, 0x00	; 0

			/// We are in read mode now
            ///@wait for DAV to finish float HI - finishing floating HI
            case GPIB_TX_WAIT_FOR_DAV_HI:
                if(GPIO_PIN_TST(DAV) == 1)
   110b4:	8e dd       	rcall	.-1252   	; 0x10bd2 <gpib_timeout_set>
   110b6:	17 e0       	ldi	r17, 0x07	; 7
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   110b8:	27 cf       	rjmp	.-434    	; 0x10f08 <gpib_write_byte+0x72>
   110ba:	19 99       	sbic	0x03, 1	; 3
                if(GPIO_PIN_TST(DAV) == 1)
                {
                    tx_state = GPIB_TX_FINISH;
                    break;
                }
                if (gpib_timeout_test())
   110bc:	42 c0       	rjmp	.+132    	; 0x11142 <gpib_write_byte+0x2ac>
   110be:	80 91 7d 1c 	lds	r24, 0x1C7D	; 0x801c7d <gpib_timer+0x8>
                {
                    ch |= TIMEOUT_FLAG;
   110c2:	88 23       	and	r24, r24
   110c4:	09 f4       	brne	.+2      	; 0x110c8 <gpib_write_byte+0x232>
   110c6:	20 cf       	rjmp	.-448    	; 0x10f08 <gpib_write_byte+0x72>
   110c8:	2e 85       	ldd	r18, Y+14	; 0x0e
   110ca:	3f 85       	ldd	r19, Y+15	; 0x0f
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
   110cc:	30 64       	ori	r19, 0x40	; 64
   110ce:	3f 87       	std	Y+15, r19	; 0x0f
   110d0:	2e 87       	std	Y+14, r18	; 0x0e
   110d2:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   110d6:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   110da:	85 70       	andi	r24, 0x05	; 5
                        printf("<BUS waiting for DAV==1>\n");
   110dc:	99 27       	eor	r25, r25
   110de:	89 2b       	or	r24, r25
   110e0:	91 f1       	breq	.+100    	; 0x11146 <gpib_write_byte+0x2b0>
   110e2:	ed b7       	in	r30, 0x3d	; 61
   110e4:	fe b7       	in	r31, 0x3e	; 62
   110e6:	c1 82       	std	Z+1, r12	; 0x01
   110e8:	d2 82       	std	Z+2, r13	; 0x02
   110ea:	e3 82       	std	Z+3, r14	; 0x03
                tx_state = GPIB_TX_DONE;
                break;

            case GPIB_TX_ERROR:
#if SDEBUG
                if(debuglevel & (1+4))
   110ec:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   110f0:	2a c0       	rjmp	.+84     	; 0x11146 <gpib_write_byte+0x2b0>
   110f2:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   110f6:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   110fa:	85 70       	andi	r24, 0x05	; 5
                    printf("<NRFD=%d,NDAV=%d>\n", GPIB_PIN_TST(NRFD),GPIB_PIN_TST(NDAC));
   110fc:	99 27       	eor	r25, r25
   110fe:	89 2b       	or	r24, r25
   11100:	b1 f0       	breq	.+44     	; 0x1112e <gpib_write_byte+0x298>
   11102:	89 b1       	in	r24, 0x09	; 9
   11104:	99 b1       	in	r25, 0x09	; 9
   11106:	93 fb       	bst	r25, 3
   11108:	99 27       	eor	r25, r25
   1110a:	90 f9       	bld	r25, 0
   1110c:	ed b7       	in	r30, 0x3d	; 61
   1110e:	fe b7       	in	r31, 0x3e	; 62
   11110:	96 83       	std	Z+6, r25	; 0x06
   11112:	17 82       	std	Z+7, r1	; 0x07
   11114:	82 fb       	bst	r24, 2
   11116:	88 27       	eor	r24, r24
   11118:	80 f9       	bld	r24, 0
   1111a:	84 83       	std	Z+4, r24	; 0x04
   1111c:	15 82       	std	Z+5, r1	; 0x05
   1111e:	84 ee       	ldi	r24, 0xE4	; 228
   11120:	9e e0       	ldi	r25, 0x0E	; 14
   11122:	a0 e0       	ldi	r26, 0x00	; 0
   11124:	81 83       	std	Z+1, r24	; 0x01
#endif
// Free BUS, BUSY on error
				gpib_bus_read_init(1);		
   11126:	92 83       	std	Z+2, r25	; 0x02
   11128:	a3 83       	std	Z+3, r26	; 0x03
   1112a:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
                tx_state = GPIB_TX_DONE;
                break;
   1112e:	81 e0       	ldi	r24, 0x01	; 1
	// GPIB_IO_LOW(PE);			// BUS OC PULLUP

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);

    while(tx_state != GPIB_TX_DONE )
   11130:	90 e0       	ldi	r25, 0x00	; 0
   11132:	59 dd       	rcall	.-1358   	; 0x10be6 <gpib_bus_read_init>
   11134:	0a c0       	rjmp	.+20     	; 0x1114a <gpib_write_byte+0x2b4>
   11136:	1a 30       	cpi	r17, 0x0A	; 10

            ///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)         // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
   11138:	09 f0       	breq	.+2      	; 0x1113c <gpib_write_byte+0x2a6>
   1113a:	e6 ce       	rjmp	.-564    	; 0x10f08 <gpib_write_byte+0x72>
			/// We are in read mode now
            ///@wait for DAV to finish float HI - finishing floating HI
            case GPIB_TX_WAIT_FOR_DAV_HI:
                if(GPIO_PIN_TST(DAV) == 1)
                {
                    tx_state = GPIB_TX_FINISH;
   1113c:	06 c0       	rjmp	.+12     	; 0x1114a <gpib_write_byte+0x2b4>
   1113e:	16 e0       	ldi	r17, 0x06	; 6
                    break;
                }
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
   11140:	e3 ce       	rjmp	.-570    	; 0x10f08 <gpib_write_byte+0x72>
   11142:	18 e0       	ldi	r17, 0x08	; 8
            case GPIB_TX_DONE:
                break;
        }
    }
    return(ch);
}
   11144:	e1 ce       	rjmp	.-574    	; 0x10f08 <gpib_write_byte+0x72>
   11146:	19 e0       	ldi	r17, 0x09	; 9
   11148:	df ce       	rjmp	.-578    	; 0x10f08 <gpib_write_byte+0x72>
   1114a:	8e 85       	ldd	r24, Y+14	; 0x0e
   1114c:	9f 85       	ldd	r25, Y+15	; 0x0f
   1114e:	2f 96       	adiw	r28, 0x0f	; 15
   11150:	0f b6       	in	r0, 0x3f	; 63
   11152:	f8 94       	cli
   11154:	de bf       	out	0x3e, r29	; 62
   11156:	0f be       	out	0x3f, r0	; 63
   11158:	cd bf       	out	0x3d, r28	; 61
   1115a:	df 91       	pop	r29
   1115c:	cf 91       	pop	r28
   1115e:	1f 91       	pop	r17
   11160:	ef 90       	pop	r14
   11162:	df 90       	pop	r13
   11164:	cf 90       	pop	r12
   11166:	8f 90       	pop	r8
   11168:	7f 90       	pop	r7
   1116a:	6f 90       	pop	r6
   1116c:	4f 90       	pop	r4
   1116e:	3f 90       	pop	r3
   11170:	2f 90       	pop	r2
   11172:	08 95       	ret

00011174 <gpib_decode_header>:
/// @see: gpib.h _FLAGS defines for a full list is control lines we track
/// @see: gpib_trace()
/// @return void
///@param[in] fo: FILE pointer or "stdout"
void gpib_decode_header( FILE *fo)
{
   11174:	cf 93       	push	r28
   11176:	df 93       	push	r29
   11178:	ec 01       	movw	r28, r24
    if(fo == NULL)
   1117a:	89 2b       	or	r24, r25
   1117c:	21 f4       	brne	.+8      	; 0x11186 <gpib_decode_header+0x12>
        fo = stdout;
   1117e:	c0 91 57 1c 	lds	r28, 0x1C57	; 0x801c57 <__iob+0x2>
   11182:	d0 91 58 1c 	lds	r29, 0x1C58	; 0x801c58 <__iob+0x3>
        
    fprintf(fo,"===========================================\n");
   11186:	be 01       	movw	r22, r28
   11188:	8f e1       	ldi	r24, 0x1F	; 31
   1118a:	9b e0       	ldi	r25, 0x0B	; 11
   1118c:	0e 94 52 77 	call	0xeea4	; 0xeea4 <fputs>
    fprintf(fo,"GPIB bus state\n");
   11190:	be 01       	movw	r22, r28
   11192:	8c e4       	ldi	r24, 0x4C	; 76
   11194:	9b e0       	ldi	r25, 0x0B	; 11
   11196:	0e 94 52 77 	call	0xeea4	; 0xeea4 <fputs>
    fprintf(fo,"HH . AESRPITB gpib\n");
   1119a:	be 01       	movw	r22, r28
   1119c:	8c e5       	ldi	r24, 0x5C	; 92
   1119e:	9b e0       	ldi	r25, 0x0B	; 11
   111a0:	0e 94 52 77 	call	0xeea4	; 0xeea4 <fputs>
    fprintf(fo,"HH = Hex value of Command or Data\n");
   111a4:	be 01       	movw	r22, r28
   111a6:	80 e7       	ldi	r24, 0x70	; 112
   111a8:	9b e0       	ldi	r25, 0x0B	; 11
   111aa:	0e 94 52 77 	call	0xeea4	; 0xeea4 <fputs>
    fprintf(fo,"   . = ASCII of XX only for 0x20 .. 0x7e\n");
   111ae:	be 01       	movw	r22, r28
   111b0:	83 e9       	ldi	r24, 0x93	; 147
   111b2:	9b e0       	ldi	r25, 0x0B	; 11
   111b4:	0e 94 52 77 	call	0xeea4	; 0xeea4 <fputs>
    fprintf(fo,"     A = ATN\n");
   111b8:	be 01       	movw	r22, r28
   111ba:	8d eb       	ldi	r24, 0xBD	; 189
   111bc:	9b e0       	ldi	r25, 0x0B	; 11
   111be:	0e 94 52 77 	call	0xeea4	; 0xeea4 <fputs>
    fprintf(fo,"      E = EOI\n");
   111c2:	be 01       	movw	r22, r28
   111c4:	8b ec       	ldi	r24, 0xCB	; 203
   111c6:	9b e0       	ldi	r25, 0x0B	; 11
   111c8:	0e 94 52 77 	call	0xeea4	; 0xeea4 <fputs>
    fprintf(fo,"       S = SRQ\n");
   111cc:	be 01       	movw	r22, r28
   111ce:	8a ed       	ldi	r24, 0xDA	; 218
   111d0:	9b e0       	ldi	r25, 0x0B	; 11
   111d2:	0e 94 52 77 	call	0xeea4	; 0xeea4 <fputs>
    fprintf(fo,"        R = REN\n");
   111d6:	be 01       	movw	r22, r28
   111d8:	8a ee       	ldi	r24, 0xEA	; 234
   111da:	9b e0       	ldi	r25, 0x0B	; 11
   111dc:	0e 94 52 77 	call	0xeea4	; 0xeea4 <fputs>
    fprintf(fo,"         I = IFC\n");
   111e0:	be 01       	movw	r22, r28
   111e2:	8b ef       	ldi	r24, 0xFB	; 251
   111e4:	9b e0       	ldi	r25, 0x0B	; 11
   111e6:	0e 94 52 77 	call	0xeea4	; 0xeea4 <fputs>
    fprintf(fo,"          P = Parallel Poll seen\n");
   111ea:	be 01       	movw	r22, r28
   111ec:	8d e0       	ldi	r24, 0x0D	; 13
   111ee:	9c e0       	ldi	r25, 0x0C	; 12
   111f0:	0e 94 52 77 	call	0xeea4	; 0xeea4 <fputs>
    fprintf(fo,"           T = TIMEOUT\n");
   111f4:	be 01       	movw	r22, r28
   111f6:	8f e2       	ldi	r24, 0x2F	; 47
   111f8:	9c e0       	ldi	r25, 0x0C	; 12
   111fa:	0e 94 52 77 	call	0xeea4	; 0xeea4 <fputs>
    fprintf(fo,"            B = BUS_ERROR\n");
   111fe:	be 01       	movw	r22, r28
   11200:	87 e4       	ldi	r24, 0x47	; 71
   11202:	9c e0       	ldi	r25, 0x0C	; 12
   11204:	0e 94 52 77 	call	0xeea4	; 0xeea4 <fputs>
    fprintf(fo,"              GPIB commands\n");
   11208:	be 01       	movw	r22, r28
   1120a:	82 e6       	ldi	r24, 0x62	; 98
   1120c:	9c e0       	ldi	r25, 0x0C	; 12
   1120e:	0e 94 52 77 	call	0xeea4	; 0xeea4 <fputs>
}
   11212:	df 91       	pop	r29
   11214:	cf 91       	pop	r28
   11216:	08 95       	ret

00011218 <gpib_trace_display>:
/// @return  void
/// Note the bits we can read depends on what hardware verions we have
/// V2 hardware can only read status bits based on GPIB control buffer direction
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
   11218:	a9 e8       	ldi	r26, 0x89	; 137
   1121a:	b0 e0       	ldi	r27, 0x00	; 0
   1121c:	e2 e1       	ldi	r30, 0x12	; 18
   1121e:	f9 e8       	ldi	r31, 0x89	; 137
   11220:	0c 94 ce e3 	jmp	0x1c79c	; 0x1c79c <__prologue_saves__+0xc>
   11224:	8c 01       	movw	r16, r24
   11226:	5b 01       	movw	r10, r22
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
    extern FILE *gpib_log_fp;

    str[0] = 0;
   11228:	1a 86       	std	Y+10, r1	; 0x0a
   1122a:	4c 01       	movw	r8, r24
   1122c:	88 24       	eor	r8, r8
   1122e:	44 e0       	ldi	r20, 0x04	; 4
   11230:	94 22       	and	r9, r20
   11232:	ce 01       	movw	r24, r28
   11234:	0a 96       	adiw	r24, 0x0a	; 10
   11236:	7c 01       	movw	r14, r24

    // Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
   11238:	62 30       	cpi	r22, 0x02	; 2
   1123a:	71 05       	cpc	r23, r1
   1123c:	e8 f4       	brcc	.+58     	; 0x11278 <gpib_trace_display+0x60>
    {
        uint8_t printable = ' ';                          // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   1123e:	81 14       	cp	r8, r1
   11240:	91 04       	cpc	r9, r1
   11242:	29 f4       	brne	.+10     	; 0x1124e <gpib_trace_display+0x36>
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
   11244:	80 2f       	mov	r24, r16

    // Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                          // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   11246:	90 ee       	ldi	r25, 0xE0	; 224
   11248:	90 0f       	add	r25, r16
   1124a:	9f 35       	cpi	r25, 0x5F	; 95
   1124c:	08 f0       	brcs	.+2      	; 0x11250 <gpib_trace_display+0x38>
    str[0] = 0;

    // Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                          // Data
   1124e:	80 e2       	ldi	r24, 0x20	; 32
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
            printable = bus;
        sprintf(str, "%02X %c ", (int)bus & 0xff, (int)printable);
   11250:	90 e0       	ldi	r25, 0x00	; 0
   11252:	ed b7       	in	r30, 0x3d	; 61
   11254:	fe b7       	in	r31, 0x3e	; 62
   11256:	91 87       	std	Z+9, r25	; 0x09
   11258:	80 87       	std	Z+8, r24	; 0x08
   1125a:	c8 01       	movw	r24, r16
   1125c:	99 27       	eor	r25, r25
   1125e:	97 83       	std	Z+7, r25	; 0x07
   11260:	86 83       	std	Z+6, r24	; 0x06
   11262:	8b ed       	ldi	r24, 0xDB	; 219
   11264:	9e e0       	ldi	r25, 0x0E	; 14
   11266:	a0 e0       	ldi	r26, 0x00	; 0
   11268:	83 83       	std	Z+3, r24	; 0x03
   1126a:	94 83       	std	Z+4, r25	; 0x04
   1126c:	a5 83       	std	Z+5, r26	; 0x05
   1126e:	f2 82       	std	Z+2, r15	; 0x02
   11270:	e1 82       	std	Z+1, r14	; 0x01
   11272:	0e 94 24 47 	call	0x8e48	; 0x8e48 <sprintf_P>
   11276:	0c c0       	rjmp	.+24     	; 0x11290 <gpib_trace_display+0x78>
    }
    else
    {
        sprintf(str, "     ");
   11278:	85 ed       	ldi	r24, 0xD5	; 213
   1127a:	9e e0       	ldi	r25, 0x0E	; 14
   1127c:	a0 e0       	ldi	r26, 0x00	; 0
   1127e:	ed b7       	in	r30, 0x3d	; 61
   11280:	fe b7       	in	r31, 0x3e	; 62
   11282:	83 83       	std	Z+3, r24	; 0x03
   11284:	94 83       	std	Z+4, r25	; 0x04
   11286:	a5 83       	std	Z+5, r26	; 0x05
   11288:	f2 82       	std	Z+2, r15	; 0x02
   1128a:	e1 82       	std	Z+1, r14	; 0x01
   1128c:	0e 94 24 47 	call	0x8e48	; 0x8e48 <sprintf_P>
    }

    tmp = str + strlen(str);
   11290:	f7 01       	movw	r30, r14
   11292:	01 90       	ld	r0, Z+
   11294:	00 20       	and	r0, r0
   11296:	e9 f7       	brne	.-6      	; 0x11292 <gpib_trace_display+0x7a>
   11298:	31 97       	sbiw	r30, 0x01	; 1
   1129a:	cf 01       	movw	r24, r30
   1129c:	01 96       	adiw	r24, 0x01	; 1

    if(status & ATN_FLAG)
   1129e:	81 14       	cp	r8, r1
   112a0:	91 04       	cpc	r9, r1
   112a2:	11 f0       	breq	.+4      	; 0x112a8 <gpib_trace_display+0x90>
        *tmp++ = 'A';
   112a4:	21 e4       	ldi	r18, 0x41	; 65
   112a6:	01 c0       	rjmp	.+2      	; 0x112aa <gpib_trace_display+0x92>
    else
        *tmp++ = '-';
   112a8:	2d e2       	ldi	r18, 0x2D	; 45
   112aa:	20 83       	st	Z, r18
   112ac:	dc 01       	movw	r26, r24
   112ae:	11 96       	adiw	r26, 0x01	; 1

    if(status & EOI_FLAG)
   112b0:	10 ff       	sbrs	r17, 0
   112b2:	02 c0       	rjmp	.+4      	; 0x112b8 <gpib_trace_display+0xa0>
        *tmp++ = 'E';
   112b4:	25 e4       	ldi	r18, 0x45	; 69
   112b6:	01 c0       	rjmp	.+2      	; 0x112ba <gpib_trace_display+0xa2>
    else
        *tmp++ = '-';
   112b8:	2d e2       	ldi	r18, 0x2D	; 45
   112ba:	fc 01       	movw	r30, r24
   112bc:	20 83       	st	Z, r18
   112be:	fd 01       	movw	r30, r26
   112c0:	31 96       	adiw	r30, 0x01	; 1

    if(status & SRQ_FLAG)
   112c2:	11 ff       	sbrs	r17, 1
   112c4:	02 c0       	rjmp	.+4      	; 0x112ca <gpib_trace_display+0xb2>
        *tmp++ = 'S';
   112c6:	83 e5       	ldi	r24, 0x53	; 83
   112c8:	01 c0       	rjmp	.+2      	; 0x112cc <gpib_trace_display+0xb4>
    else
        *tmp++ = '-';
   112ca:	8d e2       	ldi	r24, 0x2D	; 45
   112cc:	8c 93       	st	X, r24
   112ce:	df 01       	movw	r26, r30
   112d0:	11 96       	adiw	r26, 0x01	; 1

    if(status & REN_FLAG)
   112d2:	13 ff       	sbrs	r17, 3
   112d4:	02 c0       	rjmp	.+4      	; 0x112da <gpib_trace_display+0xc2>
        *tmp++ = 'R';
   112d6:	82 e5       	ldi	r24, 0x52	; 82
   112d8:	01 c0       	rjmp	.+2      	; 0x112dc <gpib_trace_display+0xc4>
    else
        *tmp++ = '-';
   112da:	8d e2       	ldi	r24, 0x2D	; 45
   112dc:	80 83       	st	Z, r24
   112de:	fd 01       	movw	r30, r26
   112e0:	31 96       	adiw	r30, 0x01	; 1

    if(status & IFC_FLAG)
   112e2:	14 ff       	sbrs	r17, 4
   112e4:	02 c0       	rjmp	.+4      	; 0x112ea <gpib_trace_display+0xd2>
        *tmp++ = 'I';
   112e6:	89 e4       	ldi	r24, 0x49	; 73
   112e8:	01 c0       	rjmp	.+2      	; 0x112ec <gpib_trace_display+0xd4>
    else
        *tmp++ = '-';
   112ea:	8d e2       	ldi	r24, 0x2D	; 45
   112ec:	8c 93       	st	X, r24

    if(trace_state == TRACE_DISABLE)
   112ee:	a1 14       	cp	r10, r1
   112f0:	b1 04       	cpc	r11, r1
   112f2:	d1 f4       	brne	.+52     	; 0x11328 <gpib_trace_display+0x110>
   112f4:	df 01       	movw	r26, r30
   112f6:	11 96       	adiw	r26, 0x01	; 1
    {
        if(status & PP_FLAG)
   112f8:	15 ff       	sbrs	r17, 5
   112fa:	02 c0       	rjmp	.+4      	; 0x11300 <gpib_trace_display+0xe8>
            *tmp++ = 'P';
   112fc:	80 e5       	ldi	r24, 0x50	; 80
   112fe:	01 c0       	rjmp	.+2      	; 0x11302 <gpib_trace_display+0xea>
        else
            *tmp++ = '-';
   11300:	8d e2       	ldi	r24, 0x2D	; 45
   11302:	80 83       	st	Z, r24
   11304:	fd 01       	movw	r30, r26
   11306:	31 96       	adiw	r30, 0x01	; 1
        if(status & TIMEOUT_FLAG)
   11308:	16 ff       	sbrs	r17, 6
   1130a:	02 c0       	rjmp	.+4      	; 0x11310 <gpib_trace_display+0xf8>
            *tmp++ = 'T';
   1130c:	84 e5       	ldi	r24, 0x54	; 84
   1130e:	01 c0       	rjmp	.+2      	; 0x11312 <gpib_trace_display+0xfa>
        else
            *tmp++ = '-';
   11310:	8d e2       	ldi	r24, 0x2D	; 45
   11312:	8c 93       	st	X, r24
   11314:	cf 01       	movw	r24, r30
   11316:	01 96       	adiw	r24, 0x01	; 1
        if(status & BUS_ERROR_FLAG)
            *tmp++ = 'B';
   11318:	6c 01       	movw	r12, r24
            *tmp++ = '-';
        if(status & TIMEOUT_FLAG)
            *tmp++ = 'T';
        else
            *tmp++ = '-';
        if(status & BUS_ERROR_FLAG)
   1131a:	17 ff       	sbrs	r17, 7
   1131c:	02 c0       	rjmp	.+4      	; 0x11322 <gpib_trace_display+0x10a>
            *tmp++ = 'B';
   1131e:	82 e4       	ldi	r24, 0x42	; 66
   11320:	01 c0       	rjmp	.+2      	; 0x11324 <gpib_trace_display+0x10c>
        else
            *tmp++ = '-';
   11322:	8d e2       	ldi	r24, 0x2D	; 45
   11324:	80 83       	st	Z, r24
   11326:	08 c0       	rjmp	.+16     	; 0x11338 <gpib_trace_display+0x120>
    }
    else
    {
        // not used when tracing
        *tmp++ = '-';
   11328:	8d e2       	ldi	r24, 0x2D	; 45
   1132a:	80 83       	st	Z, r24
        *tmp++ = '-';
   1132c:	81 83       	std	Z+1, r24	; 0x01
        *tmp++ = '-';
   1132e:	6f 01       	movw	r12, r30
   11330:	43 e0       	ldi	r20, 0x03	; 3
   11332:	c4 0e       	add	r12, r20
   11334:	d1 1c       	adc	r13, r1
   11336:	82 83       	std	Z+2, r24	; 0x02
    }
    *tmp = 0;
   11338:	f6 01       	movw	r30, r12
   1133a:	10 82       	st	Z, r1

    if(trace_state == TRACE_READ || trace_state == TRACE_BUS)
   1133c:	f1 e0       	ldi	r31, 0x01	; 1
   1133e:	af 1a       	sub	r10, r31
   11340:	b1 08       	sbc	r11, r1
   11342:	42 e0       	ldi	r20, 0x02	; 2
   11344:	a4 16       	cp	r10, r20
   11346:	b1 04       	cpc	r11, r1
   11348:	f0 f4       	brcc	.+60     	; 0x11386 <gpib_trace_display+0x16e>
    {
        if(status & DAV_FLAG)
   1134a:	15 ff       	sbrs	r17, 5
   1134c:	03 c0       	rjmp	.+6      	; 0x11354 <gpib_trace_display+0x13c>
            strcat(str,"  DAV");
   1134e:	6f e7       	ldi	r22, 0x7F	; 127
   11350:	7c e0       	ldi	r23, 0x0C	; 12
   11352:	02 c0       	rjmp	.+4      	; 0x11358 <gpib_trace_display+0x140>
        else
            strcat(str,"     ");
   11354:	65 e8       	ldi	r22, 0x85	; 133
   11356:	73 e0       	ldi	r23, 0x03	; 3
   11358:	c7 01       	movw	r24, r14
   1135a:	0e 94 56 32 	call	0x64ac	; 0x64ac <strcat>
        if(status & NRFD_FLAG)
   1135e:	16 ff       	sbrs	r17, 6
   11360:	03 c0       	rjmp	.+6      	; 0x11368 <gpib_trace_display+0x150>
            strcat(str," NRFD");
   11362:	65 e8       	ldi	r22, 0x85	; 133
   11364:	7c e0       	ldi	r23, 0x0C	; 12
   11366:	02 c0       	rjmp	.+4      	; 0x1136c <gpib_trace_display+0x154>
        else
            strcat(str,"     ");
   11368:	65 e8       	ldi	r22, 0x85	; 133
   1136a:	73 e0       	ldi	r23, 0x03	; 3
   1136c:	c7 01       	movw	r24, r14
   1136e:	0e 94 56 32 	call	0x64ac	; 0x64ac <strcat>
        if(status & NDAC_FLAG)
   11372:	17 ff       	sbrs	r17, 7
   11374:	03 c0       	rjmp	.+6      	; 0x1137c <gpib_trace_display+0x164>
            strcat(str," NDAC");
   11376:	6b e8       	ldi	r22, 0x8B	; 139
   11378:	7c e0       	ldi	r23, 0x0C	; 12
   1137a:	02 c0       	rjmp	.+4      	; 0x11380 <gpib_trace_display+0x168>
        else
            strcat(str,"     ");
   1137c:	65 e8       	ldi	r22, 0x85	; 133
   1137e:	73 e0       	ldi	r23, 0x03	; 3
   11380:	c7 01       	movw	r24, r14
   11382:	0e 94 56 32 	call	0x64ac	; 0x64ac <strcat>
    }

    if( (status & ATN_FLAG) )
   11386:	81 14       	cp	r8, r1
   11388:	91 04       	cpc	r9, r1
   1138a:	09 f4       	brne	.+2      	; 0x1138e <gpib_trace_display+0x176>
   1138c:	5a c0       	rjmp	.+180    	; 0x11442 <gpib_trace_display+0x22a>
    {
        int i;
        int cmd = status & CMD_MASK;
   1138e:	c8 01       	movw	r24, r16
   11390:	8f 77       	andi	r24, 0x7F	; 127
   11392:	99 27       	eor	r25, r25
        if(cmd >= 0x020 && cmd <= 0x3e)
   11394:	9c 01       	movw	r18, r24
   11396:	20 52       	subi	r18, 0x20	; 32
   11398:	31 09       	sbc	r19, r1
   1139a:	2f 31       	cpi	r18, 0x1F	; 31
   1139c:	31 05       	cpc	r19, r1
   1139e:	48 f4       	brcc	.+18     	; 0x113b2 <gpib_trace_display+0x19a>
            sprintf(tmp," MLA %02Xh", cmd & 0x1f);
   113a0:	0f 71       	andi	r16, 0x1F	; 31
   113a2:	11 27       	eor	r17, r17
   113a4:	ed b7       	in	r30, 0x3d	; 61
   113a6:	fe b7       	in	r31, 0x3e	; 62
   113a8:	17 83       	std	Z+7, r17	; 0x07
   113aa:	06 83       	std	Z+6, r16	; 0x06
   113ac:	8a ec       	ldi	r24, 0xCA	; 202
   113ae:	9e e0       	ldi	r25, 0x0E	; 14
   113b0:	0e c0       	rjmp	.+28     	; 0x113ce <gpib_trace_display+0x1b6>
        else if(cmd >= 0x040 && cmd <= 0x4e)
   113b2:	9c 01       	movw	r18, r24
   113b4:	20 54       	subi	r18, 0x40	; 64
   113b6:	31 09       	sbc	r19, r1
   113b8:	2f 30       	cpi	r18, 0x0F	; 15
   113ba:	31 05       	cpc	r19, r1
   113bc:	88 f4       	brcc	.+34     	; 0x113e0 <gpib_trace_display+0x1c8>
            sprintf(tmp," MTA %02Xh", cmd & 0x1f);
   113be:	0f 71       	andi	r16, 0x1F	; 31
   113c0:	11 27       	eor	r17, r17
   113c2:	ed b7       	in	r30, 0x3d	; 61
   113c4:	fe b7       	in	r31, 0x3e	; 62
   113c6:	17 83       	std	Z+7, r17	; 0x07
   113c8:	06 83       	std	Z+6, r16	; 0x06
   113ca:	8f eb       	ldi	r24, 0xBF	; 191
   113cc:	9e e0       	ldi	r25, 0x0E	; 14
   113ce:	a0 e0       	ldi	r26, 0x00	; 0
   113d0:	83 83       	std	Z+3, r24	; 0x03
   113d2:	94 83       	std	Z+4, r25	; 0x04
   113d4:	a5 83       	std	Z+5, r26	; 0x05
   113d6:	d2 82       	std	Z+2, r13	; 0x02
   113d8:	c1 82       	std	Z+1, r12	; 0x01
   113da:	0e 94 24 47 	call	0x8e48	; 0x8e48 <sprintf_P>
   113de:	31 c0       	rjmp	.+98     	; 0x11442 <gpib_trace_display+0x22a>
        else if(cmd >= 0x060 && cmd <= 0x6f)
   113e0:	9c 01       	movw	r18, r24
   113e2:	20 56       	subi	r18, 0x60	; 96
   113e4:	31 09       	sbc	r19, r1
   113e6:	20 31       	cpi	r18, 0x10	; 16
   113e8:	31 05       	cpc	r19, r1
   113ea:	28 f0       	brcs	.+10     	; 0x113f6 <gpib_trace_display+0x1de>
   113ec:	ef e8       	ldi	r30, 0x8F	; 143
   113ee:	f1 e0       	ldi	r31, 0x01	; 1
   113f0:	00 e0       	ldi	r16, 0x00	; 0
   113f2:	10 e0       	ldi	r17, 0x00	; 0
   113f4:	0b c0       	rjmp	.+22     	; 0x1140c <gpib_trace_display+0x1f4>
            sprintf(tmp," MSA %02Xh", cmd & 0x1f);
   113f6:	0f 71       	andi	r16, 0x1F	; 31
   113f8:	11 27       	eor	r17, r17
   113fa:	ed b7       	in	r30, 0x3d	; 61
   113fc:	fe b7       	in	r31, 0x3e	; 62
   113fe:	17 83       	std	Z+7, r17	; 0x07
   11400:	06 83       	std	Z+6, r16	; 0x06
   11402:	84 eb       	ldi	r24, 0xB4	; 180
   11404:	9e e0       	ldi	r25, 0x0E	; 14
   11406:	e3 cf       	rjmp	.-58     	; 0x113ce <gpib_trace_display+0x1b6>
        else
        {
            for(i=0;gpib_tokens[i].cmd != -1;++i)
   11408:	0f 5f       	subi	r16, 0xFF	; 255
   1140a:	1f 4f       	sbci	r17, 0xFF	; 255
   1140c:	20 81       	ld	r18, Z
   1140e:	31 81       	ldd	r19, Z+1	; 0x01
   11410:	2f 3f       	cpi	r18, 0xFF	; 255
   11412:	4f ef       	ldi	r20, 0xFF	; 255
   11414:	34 07       	cpc	r19, r20
   11416:	a9 f0       	breq	.+42     	; 0x11442 <gpib_trace_display+0x22a>
   11418:	34 96       	adiw	r30, 0x04	; 4
            {
                if(cmd == gpib_tokens[i].cmd)
   1141a:	82 17       	cp	r24, r18
   1141c:	93 07       	cpc	r25, r19
   1141e:	a1 f7       	brne	.-24     	; 0x11408 <gpib_trace_display+0x1f0>
                {
                    strcat(tmp," ");
   11420:	69 e8       	ldi	r22, 0x89	; 137
   11422:	73 e0       	ldi	r23, 0x03	; 3
   11424:	c6 01       	movw	r24, r12
   11426:	0e 94 56 32 	call	0x64ac	; 0x64ac <strcat>
                    strcat(tmp,gpib_tokens[i].name);
   1142a:	f8 01       	movw	r30, r16
   1142c:	ee 0f       	add	r30, r30
   1142e:	ff 1f       	adc	r31, r31
   11430:	ee 0f       	add	r30, r30
   11432:	ff 1f       	adc	r31, r31
   11434:	e1 57       	subi	r30, 0x71	; 113
   11436:	fe 4f       	sbci	r31, 0xFE	; 254
   11438:	62 81       	ldd	r22, Z+2	; 0x02
   1143a:	73 81       	ldd	r23, Z+3	; 0x03
   1143c:	c6 01       	movw	r24, r12
   1143e:	0e 94 56 32 	call	0x64ac	; 0x64ac <strcat>
                }
            }
        }
    }

    if(gpib_log_fp == NULL)
   11442:	20 91 fb 18 	lds	r18, 0x18FB	; 0x8018fb <gpib_log_fp>
   11446:	30 91 fc 18 	lds	r19, 0x18FC	; 0x8018fc <gpib_log_fp+0x1>
   1144a:	80 91 57 1c 	lds	r24, 0x1C57	; 0x801c57 <__iob+0x2>
   1144e:	90 91 58 1c 	lds	r25, 0x1C58	; 0x801c58 <__iob+0x3>
   11452:	23 2b       	or	r18, r19
   11454:	21 f4       	brne	.+8      	; 0x1145e <gpib_trace_display+0x246>
        gpib_log_fp = stdout;
   11456:	90 93 fc 18 	sts	0x18FC, r25	; 0x8018fc <gpib_log_fp+0x1>
   1145a:	80 93 fb 18 	sts	0x18FB, r24	; 0x8018fb <gpib_log_fp>

    // Echo to console unless file is the console
    if(gpib_log_fp != stdout)
   1145e:	20 91 fb 18 	lds	r18, 0x18FB	; 0x8018fb <gpib_log_fp>
   11462:	30 91 fc 18 	lds	r19, 0x18FC	; 0x8018fc <gpib_log_fp+0x1>
   11466:	82 17       	cp	r24, r18
   11468:	93 07       	cpc	r25, r19
   1146a:	19 f0       	breq	.+6      	; 0x11472 <gpib_trace_display+0x25a>
        puts(str);
   1146c:	c7 01       	movw	r24, r14
   1146e:	0e 94 6a 77 	call	0xeed4	; 0xeed4 <puts>

    // Save to file
    fprintf(gpib_log_fp,"%s\n",str);
   11472:	ed b7       	in	r30, 0x3d	; 61
   11474:	fe b7       	in	r31, 0x3e	; 62
   11476:	f6 82       	std	Z+6, r15	; 0x06
   11478:	e5 82       	std	Z+5, r14	; 0x05
   1147a:	81 e9       	ldi	r24, 0x91	; 145
   1147c:	9c e0       	ldi	r25, 0x0C	; 12
   1147e:	94 83       	std	Z+4, r25	; 0x04
   11480:	83 83       	std	Z+3, r24	; 0x03
   11482:	80 91 fb 18 	lds	r24, 0x18FB	; 0x8018fb <gpib_log_fp>
   11486:	90 91 fc 18 	lds	r25, 0x18FC	; 0x8018fc <gpib_log_fp+0x1>
   1148a:	92 83       	std	Z+2, r25	; 0x02
   1148c:	81 83       	std	Z+1, r24	; 0x01
   1148e:	0e 94 04 7f 	call	0xfe08	; 0xfe08 <fprintf>
}
   11492:	c7 57       	subi	r28, 0x77	; 119
   11494:	df 4f       	sbci	r29, 0xFF	; 255
   11496:	ec e0       	ldi	r30, 0x0C	; 12
   11498:	0c 94 ea e3 	jmp	0x1c7d4	; 0x1c7d4 <__epilogue_restores__+0xc>

0001149c <gpib_read_byte>:
///     - Error Flags:
///       - IFC_FLAG
///
/// @return (data bus, control and error status)
uint16_t gpib_read_byte(int trace)
{
   1149c:	af 92       	push	r10
   1149e:	bf 92       	push	r11
   114a0:	cf 92       	push	r12
   114a2:	df 92       	push	r13
   114a4:	ff 92       	push	r15
   114a6:	0f 93       	push	r16
   114a8:	1f 93       	push	r17
   114aa:	cf 93       	push	r28
   114ac:	df 93       	push	r29

    ch = 0;
    control_last = 0;

    // If we have an unread state it has already been traced!
    if(gpib_unread_f)
   114ae:	20 91 fa 18 	lds	r18, 0x18FA	; 0x8018fa <gpib_unread_f>
   114b2:	22 23       	and	r18, r18
   114b4:	39 f0       	breq	.+14     	; 0x114c4 <gpib_read_byte+0x28>
    {
        gpib_unread_f = 0;
   114b6:	10 92 fa 18 	sts	0x18FA, r1	; 0x8018fa <gpib_unread_f>
        return(gpib_unread_data);
   114ba:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <gpib_unread_data>
   114be:	90 91 89 1e 	lds	r25, 0x1E89	; 0x801e89 <gpib_unread_data+0x1>
   114c2:	b8 c0       	rjmp	.+368    	; 0x11634 <gpib_read_byte+0x198>
   114c4:	6c 01       	movw	r12, r24
    }

	gpib_bus_read_init(1); // Busy until we are ready
   114c6:	81 e0       	ldi	r24, 0x01	; 1
   114c8:	90 e0       	ldi	r25, 0x00	; 0
   114ca:	8d db       	rcall	.-2278   	; 0x10be6 <gpib_bus_read_init>


///@brief V2 boards can NOT read all bits on the control bus at once
/// FIXME We could add a test for read/write state ??
///@brief NRFD,NDAC SRQ are outputs
    if(trace)
   114cc:	c1 14       	cp	r12, r1
   114ce:	d1 04       	cpc	r13, r1
    {
        control_last = gpib_control_pin_read();
   114d0:	51 f0       	breq	.+20     	; 0x114e6 <gpib_read_byte+0x4a>
   114d2:	c5 dc       	rcall	.-1654   	; 0x10e5e <gpib_control_pin_read>
        control_last |= gpib_handshake_pin_read();
   114d4:	8c 01       	movw	r16, r24
   114d6:	d3 dc       	rcall	.-1626   	; 0x10e7e <gpib_handshake_pin_read>
   114d8:	08 2b       	or	r16, r24
        gpib_trace_display(control_last, TRACE_BUS);
   114da:	19 2b       	or	r17, r25
   114dc:	62 e0       	ldi	r22, 0x02	; 2
   114de:	70 e0       	ldi	r23, 0x00	; 0
   114e0:	c8 01       	movw	r24, r16
   114e2:	9a de       	rcall	.-716    	; 0x11218 <gpib_trace_display>
    uint16_t bus, control, control_last;
    extern uint8_t gpib_unread_f;
    extern uint16_t gpib_unread_data;

    ch = 0;
    control_last = 0;
   114e4:	02 c0       	rjmp	.+4      	; 0x114ea <gpib_read_byte+0x4e>
   114e6:	00 e0       	ldi	r16, 0x00	; 0
        control_last |= gpib_handshake_pin_read();
        gpib_trace_display(control_last, TRACE_BUS);
    }

    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
   114e8:	10 e0       	ldi	r17, 0x00	; 0
   114ea:	f1 2c       	mov	r15, r1
   114ec:	c0 e0       	ldi	r28, 0x00	; 0
    {
        if(uart_keyhit(0))
   114ee:	d0 e0       	ldi	r29, 0x00	; 0
   114f0:	80 e0       	ldi	r24, 0x00	; 0
   114f2:	0e 94 01 2c 	call	0x5802	; 0x5802 <uart_keyhit>
   114f6:	89 2b       	or	r24, r25
		if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

		// IFC is always in for a device
        if(GPIB_PIN_TST(IFC) == 0)
   114f8:	09 f0       	breq	.+2      	; 0x114fc <gpib_read_byte+0x60>
   114fa:	78 c0       	rjmp	.+240    	; 0x115ec <gpib_read_byte+0x150>
        {
            ch |= IFC_FLAG;
   114fc:	4c 99       	sbic	0x09, 4	; 9
			gpib_bus_init();
   114fe:	03 c0       	rjmp	.+6      	; 0x11506 <gpib_read_byte+0x6a>
   11500:	d0 61       	ori	r29, 0x10	; 16
   11502:	94 db       	rcall	.-2264   	; 0x10c2c <gpib_bus_init>
            break;
        }


        switch(rx_state)
   11504:	73 c0       	rjmp	.+230    	; 0x115ec <gpib_read_byte+0x150>
   11506:	8f 2d       	mov	r24, r15
   11508:	90 e0       	ldi	r25, 0x00	; 0
   1150a:	89 30       	cpi	r24, 0x09	; 9
   1150c:	91 05       	cpc	r25, r1
   1150e:	08 f0       	brcs	.+2      	; 0x11512 <gpib_read_byte+0x76>
   11510:	51 c0       	rjmp	.+162    	; 0x115b4 <gpib_read_byte+0x118>
   11512:	fc 01       	movw	r30, r24
   11514:	e9 53       	subi	r30, 0x39	; 57
   11516:	ff 4f       	sbci	r31, 0xFF	; 255
   11518:	0c 94 84 e3 	jmp	0x1c708	; 0x1c708 <__tablejump2__>
   1151c:	52 98       	cbi	0x0a, 2	; 10
   1151e:	8d e0       	ldi	r24, 0x0D	; 13
   11520:	8a 95       	dec	r24
   11522:	f1 f7       	brne	.-4      	; 0x11520 <gpib_read_byte+0x84>
        {
            case GPIB_RX_START:
                ///@brief Signal that we are ready to ready
                GPIB_PIN_FLOAT_UP(NRFD);
                GPIB_BUS_SETTLE();                // Let Data BUS settle
                rx_state = GPIB_RX_WAIT_FOR_DAV_LOW;
   11524:	00 00       	nop
   11526:	ff 24       	eor	r15, r15
   11528:	f3 94       	inc	r15
                break;

            case GPIB_RX_WAIT_FOR_DAV_LOW:
                ///@brief Wait for Ready acknowledge
                if ( GPIB_PIN_TST(DAV) == 0 )
   1152a:	7f c0       	rjmp	.+254    	; 0x1162a <gpib_read_byte+0x18e>
                    rx_state = GPIB_RX_DAV_IS_LOW;
   1152c:	19 99       	sbic	0x03, 1	; 3
                break;

// Accept Data
            case GPIB_RX_DAV_IS_LOW:
                GPIB_IO_LOW(NRFD);                // BUSY
   1152e:	7d c0       	rjmp	.+250    	; 0x1162a <gpib_read_byte+0x18e>

                ///@brief gpib_bus_read strips command parity if ATN is low at read time
                bus = gpib_bus_read();
   11530:	62 e0       	ldi	r22, 0x02	; 2
   11532:	f6 2e       	mov	r15, r22
   11534:	7a c0       	rjmp	.+244    	; 0x1162a <gpib_read_byte+0x18e>
   11536:	5a 98       	cbi	0x0b, 2	; 11
                ch |= bus;
///@brief V2 boards can NOT read all bits on the control bus at once
/// FIXME could add a test for read/write state ??
///@brief NRFD,NDAC SRQ are outputs
                control_last = gpib_control_pin_read();
   11538:	52 9a       	sbi	0x0a, 2	; 10
   1153a:	8b dc       	rcall	.-1770   	; 0x10e52 <gpib_bus_read>
   1153c:	a8 2e       	mov	r10, r24
   1153e:	b1 2c       	mov	r11, r1
                ch |= control_last;
   11540:	8e dc       	rcall	.-1764   	; 0x10e5e <gpib_control_pin_read>
   11542:	8c 01       	movw	r16, r24

                if(trace)
   11544:	c8 2b       	or	r28, r24
   11546:	d9 2b       	or	r29, r25
   11548:	ca 29       	or	r28, r10
                {
///@brief V2 boards can NOT read all bits on the control bus at once
/// FIXME We could add a test for read/write state ??
///@brief NRFD,NDAC SRQ are outputs
                    control_last |= gpib_handshake_pin_read();
   1154a:	db 29       	or	r29, r11
   1154c:	c1 14       	cp	r12, r1
   1154e:	d1 04       	cpc	r13, r1
                    gpib_trace_display(bus | control_last, TRACE_READ);
   11550:	49 f0       	breq	.+18     	; 0x11564 <gpib_read_byte+0xc8>
   11552:	95 dc       	rcall	.-1750   	; 0x10e7e <gpib_handshake_pin_read>
   11554:	08 2b       	or	r16, r24
   11556:	19 2b       	or	r17, r25
   11558:	61 e0       	ldi	r22, 0x01	; 1
   1155a:	70 e0       	ldi	r23, 0x00	; 0
   1155c:	c5 01       	movw	r24, r10
   1155e:	80 2b       	or	r24, r16
   11560:	91 2b       	or	r25, r17
   11562:	5a de       	rcall	.-844    	; 0x11218 <gpib_trace_display>
                }

                GPIB_PIN_FLOAT_UP(NDAC);
                GPIB_BUS_SETTLE();                // Let Data BUS settle
                gpib_timeout_set(HTIMEOUT);
   11564:	53 98       	cbi	0x0a, 3	; 10
   11566:	8d e0       	ldi	r24, 0x0D	; 13
   11568:	8a 95       	dec	r24
   1156a:	f1 f7       	brne	.-4      	; 0x11568 <gpib_read_byte+0xcc>
   1156c:	00 00       	nop
#if BOARD == 2
				/// FIXME do we want to keep the next state ?
                rx_state = GPIB_RX_WAIT_FOR_DAV_HI;
   1156e:	64 ef       	ldi	r22, 0xF4	; 244
   11570:	71 e0       	ldi	r23, 0x01	; 1
   11572:	80 e0       	ldi	r24, 0x00	; 0
/// FIXME We clould add a test for read/write state ??
///@brief V2 boards we can't - not a big deal as the DAV test works anyway
            ///@brief Wait for NDAC float HI

            case GPIB_RX_WAIT_FOR_NDAC_HI:
                if (GPIB_PIN_TST(NDAC) == 1)
   11574:	90 e0       	ldi	r25, 0x00	; 0
   11576:	2d db       	rcall	.-2470   	; 0x10bd2 <gpib_timeout_set>
                {
                    gpib_timeout_set(HTIMEOUT);
   11578:	54 e0       	ldi	r21, 0x04	; 4
   1157a:	f5 2e       	mov	r15, r21
   1157c:	56 c0       	rjmp	.+172    	; 0x1162a <gpib_read_byte+0x18e>
   1157e:	4b 9b       	sbis	0x09, 3	; 9
   11580:	0c c0       	rjmp	.+24     	; 0x1159a <gpib_read_byte+0xfe>
   11582:	64 ef       	ldi	r22, 0xF4	; 244
                    rx_state = GPIB_RX_WAIT_FOR_DAV_HI;
   11584:	71 e0       	ldi	r23, 0x01	; 1
   11586:	80 e0       	ldi	r24, 0x00	; 0
   11588:	90 e0       	ldi	r25, 0x00	; 0
                }
                break;

            ///@brief Wait for DAV HI
            case GPIB_RX_WAIT_FOR_DAV_HI:
                if (GPIB_PIN_TST(DAV) == 1)
   1158a:	23 db       	rcall	.-2490   	; 0x10bd2 <gpib_timeout_set>
   1158c:	44 e0       	ldi	r20, 0x04	; 4
				{
                    rx_state = GPIB_RX_DAV_IS_HI;
   1158e:	f4 2e       	mov	r15, r20
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11590:	04 c0       	rjmp	.+8      	; 0x1159a <gpib_read_byte+0xfe>
            case GPIB_RX_WAIT_FOR_DAV_HI:
                if (GPIB_PIN_TST(DAV) == 1)
				{
                    rx_state = GPIB_RX_DAV_IS_HI;
				}
                if (gpib_timeout_test())
   11592:	19 9b       	sbis	0x03, 1	; 3
   11594:	02 c0       	rjmp	.+4      	; 0x1159a <gpib_read_byte+0xfe>
   11596:	35 e0       	ldi	r19, 0x05	; 5
                {
                    ch |= TIMEOUT_FLAG;
   11598:	f3 2e       	mov	r15, r19
                    rx_state = GPIB_RX_ERROR;
   1159a:	80 91 7d 1c 	lds	r24, 0x1C7D	; 0x801c7d <gpib_timer+0x8>
   1159e:	88 23       	and	r24, r24
            case GPIB_RX_ERROR:
                rx_state = GPIB_RX_DONE;
                break;

            case GPIB_RX_DONE:
				gpib_bus_read_init(1); // Busy
   115a0:	09 f4       	brne	.+2      	; 0x115a4 <gpib_read_byte+0x108>
   115a2:	43 c0       	rjmp	.+134    	; 0x1162a <gpib_read_byte+0x18e>
   115a4:	d0 64       	ori	r29, 0x40	; 64
                break;
        }

        if(trace)
   115a6:	27 e0       	ldi	r18, 0x07	; 7
   115a8:	f2 2e       	mov	r15, r18
   115aa:	3f c0       	rjmp	.+126    	; 0x1162a <gpib_read_byte+0x18e>
   115ac:	81 e0       	ldi	r24, 0x01	; 1
   115ae:	90 e0       	ldi	r25, 0x00	; 0
   115b0:	1a db       	rcall	.-2508   	; 0x10be6 <gpib_bus_read_init>
   115b2:	04 c0       	rjmp	.+8      	; 0x115bc <gpib_read_byte+0x120>
   115b4:	c1 14       	cp	r12, r1
        {
			/// V2 boards can not read all control and handshake bits at once
			/// FIXME We could add a test for read/write state ??
			/// NRFD,NDAC SRQ are outputs durring write phase, but not at very start
            control = gpib_control_pin_read();
   115b6:	d1 04       	cpc	r13, r1
   115b8:	99 f0       	breq	.+38     	; 0x115e0 <gpib_read_byte+0x144>
   115ba:	05 c0       	rjmp	.+10     	; 0x115c6 <gpib_read_byte+0x12a>
            control |= gpib_handshake_pin_read();
   115bc:	c1 14       	cp	r12, r1
   115be:	d1 04       	cpc	r13, r1
   115c0:	a9 f0       	breq	.+42     	; 0x115ec <gpib_read_byte+0x150>
   115c2:	98 e0       	ldi	r25, 0x08	; 8
            if(control_last != control)
   115c4:	f9 2e       	mov	r15, r25
   115c6:	4b dc       	rcall	.-1898   	; 0x10e5e <gpib_control_pin_read>
   115c8:	5c 01       	movw	r10, r24
            {
                gpib_trace_display(control, TRACE_BUS);
   115ca:	59 dc       	rcall	.-1870   	; 0x10e7e <gpib_handshake_pin_read>
   115cc:	a8 2a       	or	r10, r24
   115ce:	b9 2a       	or	r11, r25
   115d0:	a0 16       	cp	r10, r16
   115d2:	b1 06       	cpc	r11, r17
   115d4:	31 f0       	breq	.+12     	; 0x115e2 <gpib_read_byte+0x146>
            case GPIB_RX_DONE:
				gpib_bus_read_init(1); // Busy
                break;
        }

        if(trace)
   115d6:	62 e0       	ldi	r22, 0x02	; 2
        control_last |= gpib_handshake_pin_read();
        gpib_trace_display(control_last, TRACE_BUS);
    }

    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
   115d8:	70 e0       	ldi	r23, 0x00	; 0
   115da:	c5 01       	movw	r24, r10
   115dc:	1d de       	rcall	.-966    	; 0x11218 <gpib_trace_display>
   115de:	01 c0       	rjmp	.+2      	; 0x115e2 <gpib_read_byte+0x146>
   115e0:	58 01       	movw	r10, r16
///  - Remember that NDAC and NRFD are now both LOW!
///  - The spec says to KEEP BOTH LOW when NOT ready to read otherwise
///    we may miss a transfer and cause a controller timeout!
///  - GPIB TX state expects NRFD LOW on entry or it is an ERROR!

    lastcmd = current;
   115e2:	88 e0       	ldi	r24, 0x08	; 8
   115e4:	f8 16       	cp	r15, r24
   115e6:	11 f0       	breq	.+4      	; 0x115ec <gpib_read_byte+0x150>
   115e8:	85 01       	movw	r16, r10
   115ea:	82 cf       	rjmp	.-252    	; 0x114f0 <gpib_read_byte+0x54>
   115ec:	80 91 82 1e 	lds	r24, 0x1E82	; 0x801e82 <current>
   115f0:	90 91 83 1e 	lds	r25, 0x1E83	; 0x801e83 <current+0x1>

    if(ch & ERROR_MASK || (ch & ATN_FLAG) == 0)
   115f4:	90 93 7f 1c 	sts	0x1C7F, r25	; 0x801c7f <lastcmd+0x1>
   115f8:	80 93 7e 1c 	sts	0x1C7E, r24	; 0x801c7e <lastcmd>
   115fc:	ce 01       	movw	r24, r28
   115fe:	88 27       	eor	r24, r24
        current = 0;
   11600:	90 7d       	andi	r25, 0xD0	; 208
   11602:	89 2b       	or	r24, r25
   11604:	11 f4       	brne	.+4      	; 0x1160a <gpib_read_byte+0x16e>
   11606:	d2 fd       	sbrc	r29, 2
   11608:	05 c0       	rjmp	.+10     	; 0x11614 <gpib_read_byte+0x178>
    else
        current = ch & CMD_MASK;
   1160a:	10 92 83 1e 	sts	0x1E83, r1	; 0x801e83 <current+0x1>
   1160e:	10 92 82 1e 	sts	0x1E82, r1	; 0x801e82 <current>
   11612:	07 c0       	rjmp	.+14     	; 0x11622 <gpib_read_byte+0x186>
   11614:	ce 01       	movw	r24, r28
   11616:	8f 77       	andi	r24, 0x7F	; 127
   11618:	99 27       	eor	r25, r25
   1161a:	90 93 83 1e 	sts	0x1E83, r25	; 0x801e83 <current+0x1>
                }
                break;

            ///@brief Ready for next byte
            case GPIB_RX_DAV_IS_HI:
                rx_state = GPIB_RX_FINISH;        // DONE
   1161e:	80 93 82 1e 	sts	0x1E82, r24	; 0x801e82 <current>
            case GPIB_RX_DONE:
				gpib_bus_read_init(1); // Busy
                break;
        }

        if(trace)
   11622:	ce 01       	movw	r24, r28
   11624:	07 c0       	rjmp	.+14     	; 0x11634 <gpib_read_byte+0x198>
   11626:	86 e0       	ldi	r24, 0x06	; 6
   11628:	f8 2e       	mov	r15, r24
        current = 0;
    else
        current = ch & CMD_MASK;

    return (ch);
}
   1162a:	c1 14       	cp	r12, r1
   1162c:	d1 04       	cpc	r13, r1
   1162e:	09 f4       	brne	.+2      	; 0x11632 <gpib_read_byte+0x196>
   11630:	5f cf       	rjmp	.-322    	; 0x114f0 <gpib_read_byte+0x54>
   11632:	c9 cf       	rjmp	.-110    	; 0x115c6 <gpib_read_byte+0x12a>
   11634:	df 91       	pop	r29
   11636:	cf 91       	pop	r28
   11638:	1f 91       	pop	r17
   1163a:	0f 91       	pop	r16
   1163c:	ff 90       	pop	r15
   1163e:	df 90       	pop	r13
   11640:	cf 90       	pop	r12
   11642:	bf 90       	pop	r11
   11644:	af 90       	pop	r10
   11646:	08 95       	ret

00011648 <gpib_decode>:
/// @see gpib_decode_str()
/// @return  void

void gpib_decode(uint16_t ch)
{
    gpib_trace_display(ch,0);
   11648:	60 e0       	ldi	r22, 0x00	; 0
   1164a:	70 e0       	ldi	r23, 0x00	; 0
   1164c:	e5 cd       	rjmp	.-1078   	; 0x11218 <gpib_trace_display>
   1164e:	08 95       	ret

00011650 <gpib_read_str>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
int gpib_read_str(uint8_t *buf, int size, uint16_t *status)
{
   11650:	a7 e0       	ldi	r26, 0x07	; 7
   11652:	b0 e0       	ldi	r27, 0x00	; 0
   11654:	ee e2       	ldi	r30, 0x2E	; 46
   11656:	fb e8       	ldi	r31, 0x8B	; 139
   11658:	0c 94 d0 e3 	jmp	0x1c7a0	; 0x1c7a0 <__prologue_saves__+0x10>
   1165c:	5b 01       	movw	r10, r22
   1165e:	6a 01       	movw	r12, r20
    uint16_t val;
    int ind = 0;

    *status &= STATUS_MASK;
   11660:	fa 01       	movw	r30, r20
   11662:	20 81       	ld	r18, Z
   11664:	31 81       	ldd	r19, Z+1	; 0x01
   11666:	22 27       	eor	r18, r18
   11668:	31 83       	std	Z+1, r19	; 0x01
   1166a:	20 83       	st	Z, r18

    if(!size)
   1166c:	67 2b       	or	r22, r23
   1166e:	21 f0       	breq	.+8      	; 0x11678 <gpib_read_str+0x28>
   11670:	7c 01       	movw	r14, r24
   11672:	00 e0       	ldi	r16, 0x00	; 0
   11674:	10 e0       	ldi	r17, 0x00	; 0
   11676:	28 c0       	rjmp	.+80     	; 0x116c8 <gpib_read_str+0x78>
    {
        if(debuglevel & (1+4))
   11678:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1167c:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   11680:	85 70       	andi	r24, 0x05	; 5
   11682:	99 27       	eor	r25, r25
   11684:	89 2b       	or	r24, r25
   11686:	09 f4       	brne	.+2      	; 0x1168a <gpib_read_str+0x3a>
   11688:	7c c0       	rjmp	.+248    	; 0x11782 <gpib_read_str+0x132>
            printf("gpib_read_str: size = 0\n");
   1168a:	8b e9       	ldi	r24, 0x9B	; 155
   1168c:	9e e0       	ldi	r25, 0x0E	; 14
   1168e:	a0 e0       	ldi	r26, 0x00	; 0
   11690:	ed b7       	in	r30, 0x3d	; 61
   11692:	fe b7       	in	r31, 0x3e	; 62
   11694:	81 83       	std	Z+1, r24	; 0x01
   11696:	92 83       	std	Z+2, r25	; 0x02
   11698:	a3 83       	std	Z+3, r26	; 0x03
   1169a:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   1169e:	71 c0       	rjmp	.+226    	; 0x11782 <gpib_read_str+0x132>
        {
            *status |= (val & ERROR_MASK);
            break;
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
   116a0:	8c 27       	eor	r24, r28
   116a2:	9d 27       	eor	r25, r29
   116a4:	92 fd       	sbrc	r25, 2
   116a6:	2e c0       	rjmp	.+92     	; 0x11704 <gpib_read_str+0xb4>
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
            gpib_unread(val);
            break;
        }

        if(val & ATN_FLAG)
   116a8:	ce 01       	movw	r24, r28
   116aa:	88 27       	eor	r24, r24
   116ac:	94 70       	andi	r25, 0x04	; 4
            buf[ind] = (val & CMD_MASK);
   116ae:	2c 2f       	mov	r18, r28
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
            gpib_unread(val);
            break;
        }

        if(val & ATN_FLAG)
   116b0:	d2 fd       	sbrc	r29, 2
            buf[ind] = (val & CMD_MASK);
   116b2:	2f 77       	andi	r18, 0x7F	; 127
        else
            buf[ind] = (val & DATA_MASK);
   116b4:	f7 01       	movw	r30, r14
   116b6:	20 83       	st	Z, r18
        ++ind;
   116b8:	0f 5f       	subi	r16, 0xFF	; 255
   116ba:	1f 4f       	sbci	r17, 0xFF	; 255

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   116bc:	89 2b       	or	r24, r25
   116be:	09 f4       	brne	.+2      	; 0x116c2 <gpib_read_str+0x72>
   116c0:	3c c0       	rjmp	.+120    	; 0x1173a <gpib_read_str+0xea>
   116c2:	ff ef       	ldi	r31, 0xFF	; 255
   116c4:	ef 1a       	sub	r14, r31
   116c6:	ff 0a       	sbc	r15, r31
    {
        if(debuglevel & (1+4))
            printf("gpib_read_str: size = 0\n");
    }

    while(ind < size)
   116c8:	0a 15       	cp	r16, r10
   116ca:	1b 05       	cpc	r17, r11
   116cc:	0c f0       	brlt	.+2      	; 0x116d0 <gpib_read_str+0x80>
   116ce:	3f c0       	rjmp	.+126    	; 0x1174e <gpib_read_str+0xfe>
    {
        val = gpib_read_byte(NO_TRACE);
   116d0:	80 e0       	ldi	r24, 0x00	; 0
   116d2:	90 e0       	ldi	r25, 0x00	; 0
   116d4:	e3 de       	rcall	.-570    	; 0x1149c <gpib_read_byte>
   116d6:	ec 01       	movw	r28, r24
#if SDEBUG
        if(debuglevel & 256)
   116d8:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   116dc:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   116e0:	90 ff       	sbrs	r25, 0
            gpib_decode(val);
   116e2:	02 c0       	rjmp	.+4      	; 0x116e8 <gpib_read_str+0x98>
   116e4:	ce 01       	movw	r24, r28
#endif
        if(val & ERROR_MASK)
   116e6:	b0 df       	rcall	.-160    	; 0x11648 <gpib_decode>
   116e8:	9e 01       	movw	r18, r28
   116ea:	22 27       	eor	r18, r18
   116ec:	30 7d       	andi	r19, 0xD0	; 208
   116ee:	f6 01       	movw	r30, r12
   116f0:	80 81       	ld	r24, Z
   116f2:	91 81       	ldd	r25, Z+1	; 0x01
   116f4:	21 15       	cp	r18, r1
   116f6:	31 05       	cpc	r19, r1
        {
            *status |= (val & ERROR_MASK);
   116f8:	99 f2       	breq	.-90     	; 0x116a0 <gpib_read_str+0x50>
   116fa:	82 2b       	or	r24, r18
   116fc:	93 2b       	or	r25, r19
   116fe:	91 83       	std	Z+1, r25	; 0x01
            break;
   11700:	80 83       	st	Z, r24
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
        {
            if(debuglevel & (1+4))
   11702:	28 c0       	rjmp	.+80     	; 0x11754 <gpib_read_str+0x104>
   11704:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   11708:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1170c:	85 70       	andi	r24, 0x05	; 5
   1170e:	99 27       	eor	r25, r25
   11710:	89 2b       	or	r24, r25
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
   11712:	81 f0       	breq	.+32     	; 0x11734 <gpib_read_str+0xe4>
   11714:	ce 01       	movw	r24, r28
   11716:	99 27       	eor	r25, r25
   11718:	ed b7       	in	r30, 0x3d	; 61
   1171a:	fe b7       	in	r31, 0x3e	; 62
   1171c:	97 83       	std	Z+7, r25	; 0x07
   1171e:	86 83       	std	Z+6, r24	; 0x06
   11720:	15 83       	std	Z+5, r17	; 0x05
   11722:	04 83       	std	Z+4, r16	; 0x04
   11724:	8e e6       	ldi	r24, 0x6E	; 110
   11726:	9e e0       	ldi	r25, 0x0E	; 14
   11728:	a0 e0       	ldi	r26, 0x00	; 0
   1172a:	81 83       	std	Z+1, r24	; 0x01
   1172c:	92 83       	std	Z+2, r25	; 0x02
   1172e:	a3 83       	std	Z+3, r26	; 0x03
            gpib_unread(val);
   11730:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   11734:	ce 01       	movw	r24, r28
            break;
   11736:	63 db       	rcall	.-2362   	; 0x10dfe <gpib_unread>
            buf[ind] = (val & CMD_MASK);
        else
            buf[ind] = (val & DATA_MASK);
        ++ind;

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   11738:	0d c0       	rjmp	.+26     	; 0x11754 <gpib_read_str+0x104>
   1173a:	d0 ff       	sbrs	r29, 0
        {

            if(*status & EOI_FLAG)
   1173c:	c2 cf       	rjmp	.-124    	; 0x116c2 <gpib_read_str+0x72>
   1173e:	f6 01       	movw	r30, r12
   11740:	80 81       	ld	r24, Z
   11742:	91 81       	ldd	r25, Z+1	; 0x01
   11744:	90 fd       	sbrc	r25, 0
                return(ind);
/// @todo TODO
///  decode this state - for now I just set the EOI_FLAG
            *status |= EOI_FLAG;
   11746:	1f c0       	rjmp	.+62     	; 0x11786 <gpib_read_str+0x136>
   11748:	91 60       	ori	r25, 0x01	; 1
   1174a:	91 83       	std	Z+1, r25	; 0x01
            break;
        }
    }
    if ( ind != size )
   1174c:	80 83       	st	Z, r24
   1174e:	0a 15       	cp	r16, r10
   11750:	1b 05       	cpc	r17, r11
    {
        if(debuglevel & (1+4))
   11752:	c9 f0       	breq	.+50     	; 0x11786 <gpib_read_str+0x136>
   11754:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   11758:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1175c:	85 70       	andi	r24, 0x05	; 5
   1175e:	99 27       	eor	r25, r25
   11760:	89 2b       	or	r24, r25
            printf("[gpib_read_str read(%d) expected(%d)]\n", ind , size);
   11762:	89 f0       	breq	.+34     	; 0x11786 <gpib_read_str+0x136>
   11764:	ed b7       	in	r30, 0x3d	; 61
   11766:	fe b7       	in	r31, 0x3e	; 62
   11768:	b7 82       	std	Z+7, r11	; 0x07
   1176a:	a6 82       	std	Z+6, r10	; 0x06
   1176c:	15 83       	std	Z+5, r17	; 0x05
   1176e:	04 83       	std	Z+4, r16	; 0x04
   11770:	87 e4       	ldi	r24, 0x47	; 71
   11772:	9e e0       	ldi	r25, 0x0E	; 14
   11774:	a0 e0       	ldi	r26, 0x00	; 0
   11776:	81 83       	std	Z+1, r24	; 0x01
   11778:	92 83       	std	Z+2, r25	; 0x02
   1177a:	a3 83       	std	Z+3, r26	; 0x03
   1177c:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   11780:	02 c0       	rjmp	.+4      	; 0x11786 <gpib_read_str+0x136>
   11782:	00 e0       	ldi	r16, 0x00	; 0
    }
    return(ind);
}
   11784:	10 e0       	ldi	r17, 0x00	; 0
   11786:	c8 01       	movw	r24, r16
   11788:	cd b7       	in	r28, 0x3d	; 61
   1178a:	de b7       	in	r29, 0x3e	; 62
   1178c:	27 96       	adiw	r28, 0x07	; 7
   1178e:	ea e0       	ldi	r30, 0x0A	; 10
   11790:	0c 94 ec e3 	jmp	0x1c7d8	; 0x1c7d8 <__epilogue_restores__+0x10>

00011794 <gpib_write_str>:
///     - Error Flags:
///       - IFC_FLAG
/// @see: gpib_write_byte()
/// @see: gpib.h _FLAGS defines for a full list)
int gpib_write_str(uint8_t *buf, int size, uint16_t *status)
{
   11794:	a7 e0       	ldi	r26, 0x07	; 7
   11796:	b0 e0       	ldi	r27, 0x00	; 0
   11798:	e0 ed       	ldi	r30, 0xD0	; 208
   1179a:	fb e8       	ldi	r31, 0x8B	; 139
   1179c:	0c 94 d0 e3 	jmp	0x1c7a0	; 0x1c7a0 <__prologue_saves__+0x10>
   117a0:	8b 01       	movw	r16, r22
   117a2:	7a 01       	movw	r14, r20
    uint16_t val, ch;
    int ind = 0;

    *status &= STATUS_MASK;
   117a4:	fa 01       	movw	r30, r20
   117a6:	20 81       	ld	r18, Z
   117a8:	31 81       	ldd	r19, Z+1	; 0x01
   117aa:	22 27       	eor	r18, r18
   117ac:	31 83       	std	Z+1, r19	; 0x01
   117ae:	20 83       	st	Z, r18

    if(!size)
   117b0:	67 2b       	or	r22, r23
   117b2:	21 f0       	breq	.+8      	; 0x117bc <gpib_write_str+0x28>
   117b4:	6c 01       	movw	r12, r24
   117b6:	c0 e0       	ldi	r28, 0x00	; 0
   117b8:	d0 e0       	ldi	r29, 0x00	; 0
   117ba:	35 c0       	rjmp	.+106    	; 0x11826 <gpib_write_str+0x92>
    {
        if(debuglevel & (1+4))
   117bc:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   117c0:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   117c4:	85 70       	andi	r24, 0x05	; 5
   117c6:	99 27       	eor	r25, r25
   117c8:	89 2b       	or	r24, r25
   117ca:	09 f4       	brne	.+2      	; 0x117ce <gpib_write_str+0x3a>
   117cc:	4f c0       	rjmp	.+158    	; 0x1186c <gpib_write_str+0xd8>
            printf("gpib_write_str: size = 0\n");
   117ce:	8d e2       	ldi	r24, 0x2D	; 45
   117d0:	9e e0       	ldi	r25, 0x0E	; 14
   117d2:	a0 e0       	ldi	r26, 0x00	; 0
   117d4:	ed b7       	in	r30, 0x3d	; 61
   117d6:	fe b7       	in	r31, 0x3e	; 62
   117d8:	81 83       	std	Z+1, r24	; 0x01
   117da:	92 83       	std	Z+2, r25	; 0x02
   117dc:	a3 83       	std	Z+3, r26	; 0x03
   117de:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   117e2:	44 c0       	rjmp	.+136    	; 0x1186c <gpib_write_str+0xd8>
    }

    while(ind < size)
    {
        ch = buf[ind++] & 0xff;                   // unsigned
   117e4:	21 96       	adiw	r28, 0x01	; 1
   117e6:	f6 01       	movw	r30, r12
   117e8:	81 91       	ld	r24, Z+
   117ea:	6f 01       	movw	r12, r30
   117ec:	90 e0       	ldi	r25, 0x00	; 0

        if(*status & ATN_FLAG)
   117ee:	f7 01       	movw	r30, r14
   117f0:	20 81       	ld	r18, Z
   117f2:	31 81       	ldd	r19, Z+1	; 0x01
   117f4:	32 fd       	sbrc	r19, 2
        {
            ch |= ATN_FLAG;
   117f6:	94 60       	ori	r25, 0x04	; 4
        }

        if( (*status & EOI_FLAG) && (ind == size ) )
   117f8:	30 fd       	sbrc	r19, 0
            ch |= EOI_FLAG;

/// @return Returns

        val = gpib_write_byte(ch);
   117fa:	19 c0       	rjmp	.+50     	; 0x1182e <gpib_write_str+0x9a>
        *status |= (val & ERROR_MASK);
   117fc:	4c db       	rcall	.-2408   	; 0x10e96 <gpib_write_byte>
   117fe:	5c 01       	movw	r10, r24
   11800:	aa 24       	eor	r10, r10
   11802:	f0 ed       	ldi	r31, 0xD0	; 208
   11804:	bf 22       	and	r11, r31
   11806:	f7 01       	movw	r30, r14
   11808:	20 81       	ld	r18, Z
   1180a:	31 81       	ldd	r19, Z+1	; 0x01
   1180c:	2a 29       	or	r18, r10
   1180e:	3b 29       	or	r19, r11
   11810:	31 83       	std	Z+1, r19	; 0x01

#if SDEBUG
        if(debuglevel & 256)
   11812:	20 83       	st	Z, r18
   11814:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   11818:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
            gpib_decode(val);
   1181c:	30 fd       	sbrc	r19, 0
#endif
        if(val & ERROR_MASK)
   1181e:	14 df       	rcall	.-472    	; 0x11648 <gpib_decode>
   11820:	a1 14       	cp	r10, r1
   11822:	b1 04       	cpc	r11, r1
    {
        if(debuglevel & (1+4))
            printf("gpib_write_str: size = 0\n");
    }

    while(ind < size)
   11824:	49 f4       	brne	.+18     	; 0x11838 <gpib_write_str+0xa4>
   11826:	c0 17       	cp	r28, r16
   11828:	d1 07       	cpc	r29, r17
   1182a:	e4 f2       	brlt	.-72     	; 0x117e4 <gpib_write_str+0x50>
        if(*status & ATN_FLAG)
        {
            ch |= ATN_FLAG;
        }

        if( (*status & EOI_FLAG) && (ind == size ) )
   1182c:	05 c0       	rjmp	.+10     	; 0x11838 <gpib_write_str+0xa4>
   1182e:	0c 17       	cp	r16, r28
   11830:	1d 07       	cpc	r17, r29
            ch |= EOI_FLAG;
   11832:	21 f7       	brne	.-56     	; 0x117fc <gpib_write_str+0x68>
   11834:	91 60       	ori	r25, 0x01	; 1
        {
            break;
        }

    }                                             // while(ind < size)
    if ( ind != size )
   11836:	e2 cf       	rjmp	.-60     	; 0x117fc <gpib_write_str+0x68>
   11838:	c0 17       	cp	r28, r16
   1183a:	d1 07       	cpc	r29, r17
    {
        if(debuglevel & (1+4))
   1183c:	c9 f0       	breq	.+50     	; 0x11870 <gpib_write_str+0xdc>
   1183e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   11842:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   11846:	85 70       	andi	r24, 0x05	; 5
   11848:	99 27       	eor	r25, r25
   1184a:	89 2b       	or	r24, r25
            printf("[gpib_write_str sent(%d) expected(%d)]\n", ind,size);
   1184c:	89 f0       	breq	.+34     	; 0x11870 <gpib_write_str+0xdc>
   1184e:	ed b7       	in	r30, 0x3d	; 61
   11850:	fe b7       	in	r31, 0x3e	; 62
   11852:	17 83       	std	Z+7, r17	; 0x07
   11854:	06 83       	std	Z+6, r16	; 0x06
   11856:	d5 83       	std	Z+5, r29	; 0x05
   11858:	c4 83       	std	Z+4, r28	; 0x04
   1185a:	85 e0       	ldi	r24, 0x05	; 5
   1185c:	9e e0       	ldi	r25, 0x0E	; 14
   1185e:	a0 e0       	ldi	r26, 0x00	; 0
   11860:	81 83       	std	Z+1, r24	; 0x01
   11862:	92 83       	std	Z+2, r25	; 0x02
   11864:	a3 83       	std	Z+3, r26	; 0x03
   11866:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    uint16_t val, ch;
    int ind = 0;

    *status &= STATUS_MASK;

    if(!size)
   1186a:	02 c0       	rjmp	.+4      	; 0x11870 <gpib_write_str+0xdc>
   1186c:	c0 e0       	ldi	r28, 0x00	; 0
    {
        if(debuglevel & (1+4))
            printf("[gpib_write_str sent(%d) expected(%d)]\n", ind,size);
    }
    return(ind);
}
   1186e:	d0 e0       	ldi	r29, 0x00	; 0
   11870:	ce 01       	movw	r24, r28
   11872:	cd b7       	in	r28, 0x3d	; 61
   11874:	de b7       	in	r29, 0x3e	; 62
   11876:	27 96       	adiw	r28, 0x07	; 7
   11878:	ea e0       	ldi	r30, 0x0A	; 10
   1187a:	0c 94 ec e3 	jmp	0x1c7d8	; 0x1c7d8 <__epilogue_restores__+0x10>

0001187e <gpib_file_init>:
   1187e:	ad b7       	in	r26, 0x3d	; 61
   11880:	be b7       	in	r27, 0x3e	; 62
   11882:	17 97       	sbiw	r26, 0x07	; 7
   11884:	0f b6       	in	r0, 0x3f	; 63
   11886:	f8 94       	cli
   11888:	be bf       	out	0x3e, r27	; 62
   1188a:	0f be       	out	0x3f, r0	; 63
   1188c:	ad bf       	out	0x3d, r26	; 61
   1188e:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <debuglevel+0x1>
   11892:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <debuglevel>
   11896:	85 ec       	ldi	r24, 0xC5	; 197
   11898:	91 e0       	ldi	r25, 0x01	; 1
   1189a:	0e 94 33 97 	call	0x12e66	; 0x12e66 <Read_Config>
   1189e:	18 16       	cp	r1, r24
   118a0:	19 06       	cpc	r1, r25
   118a2:	8c f4       	brge	.+34     	; 0x118c6 <gpib_file_init+0x48>
   118a4:	ed b7       	in	r30, 0x3d	; 61
   118a6:	fe b7       	in	r31, 0x3e	; 62
   118a8:	97 83       	std	Z+7, r25	; 0x07
   118aa:	86 83       	std	Z+6, r24	; 0x06
   118ac:	85 ec       	ldi	r24, 0xC5	; 197
   118ae:	91 e0       	ldi	r25, 0x01	; 1
   118b0:	95 83       	std	Z+5, r25	; 0x05
   118b2:	84 83       	std	Z+4, r24	; 0x04
   118b4:	8d ef       	ldi	r24, 0xFD	; 253
   118b6:	92 e1       	ldi	r25, 0x12	; 18
   118b8:	a0 e0       	ldi	r26, 0x00	; 0
   118ba:	81 83       	std	Z+1, r24	; 0x01
   118bc:	92 83       	std	Z+2, r25	; 0x02
   118be:	a3 83       	std	Z+3, r26	; 0x03
   118c0:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   118c4:	10 c0       	rjmp	.+32     	; 0x118e6 <gpib_file_init+0x68>
   118c6:	89 2b       	or	r24, r25
   118c8:	71 f0       	breq	.+28     	; 0x118e6 <gpib_file_init+0x68>
   118ca:	85 ec       	ldi	r24, 0xC5	; 197
   118cc:	91 e0       	ldi	r25, 0x01	; 1
   118ce:	ed b7       	in	r30, 0x3d	; 61
   118d0:	fe b7       	in	r31, 0x3e	; 62
   118d2:	95 83       	std	Z+5, r25	; 0x05
   118d4:	84 83       	std	Z+4, r24	; 0x04
   118d6:	8c ee       	ldi	r24, 0xEC	; 236
   118d8:	92 e1       	ldi	r25, 0x12	; 18
   118da:	a0 e0       	ldi	r26, 0x00	; 0
   118dc:	81 83       	std	Z+1, r24	; 0x01
   118de:	92 83       	std	Z+2, r25	; 0x02
   118e0:	a3 83       	std	Z+3, r26	; 0x03
   118e2:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   118e6:	0e 94 ed 95 	call	0x12bda	; 0x12bda <set_Config_Defaults>
   118ea:	0e 94 d2 70 	call	0xe1a4	; 0xe1a4 <mmc_wp_status>
   118ee:	89 2b       	or	r24, r25
   118f0:	51 f0       	breq	.+20     	; 0x11906 <gpib_file_init+0x88>
   118f2:	83 ed       	ldi	r24, 0xD3	; 211
   118f4:	92 e1       	ldi	r25, 0x12	; 18
   118f6:	a0 e0       	ldi	r26, 0x00	; 0
   118f8:	ed b7       	in	r30, 0x3d	; 61
   118fa:	fe b7       	in	r31, 0x3e	; 62
   118fc:	81 83       	std	Z+1, r24	; 0x01
   118fe:	92 83       	std	Z+2, r25	; 0x02
   11900:	a3 83       	std	Z+3, r26	; 0x03
   11902:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   11906:	ad b7       	in	r26, 0x3d	; 61
   11908:	be b7       	in	r27, 0x3e	; 62
   1190a:	17 96       	adiw	r26, 0x07	; 7
   1190c:	0f b6       	in	r0, 0x3f	; 63
   1190e:	f8 94       	cli
   11910:	be bf       	out	0x3e, r27	; 62
   11912:	0f be       	out	0x3f, r0	; 63
   11914:	ad bf       	out	0x3d, r26	; 61
   11916:	08 95       	ret

00011918 <SS80_is_MLA>:
   11918:	40 e2       	ldi	r20, 0x20	; 32
   1191a:	50 e0       	ldi	r21, 0x00	; 0
   1191c:	bc 01       	movw	r22, r24
   1191e:	83 e0       	ldi	r24, 0x03	; 3
   11920:	90 e0       	ldi	r25, 0x00	; 0
   11922:	c1 d6       	rcall	.+3458   	; 0x126a6 <find_device>
   11924:	8f 3f       	cpi	r24, 0xFF	; 255
   11926:	2f ef       	ldi	r18, 0xFF	; 255
   11928:	92 07       	cpc	r25, r18
   1192a:	11 f0       	breq	.+4      	; 0x11930 <SS80_is_MLA+0x18>
   1192c:	e6 c6       	rjmp	.+3532   	; 0x126fa <set_active_device>
   1192e:	08 95       	ret
   11930:	80 e0       	ldi	r24, 0x00	; 0
   11932:	90 e0       	ldi	r25, 0x00	; 0
   11934:	08 95       	ret

00011936 <SS80_is_MTA>:
   11936:	40 e4       	ldi	r20, 0x40	; 64
   11938:	50 e0       	ldi	r21, 0x00	; 0
   1193a:	bc 01       	movw	r22, r24
   1193c:	83 e0       	ldi	r24, 0x03	; 3
   1193e:	90 e0       	ldi	r25, 0x00	; 0
   11940:	b2 d6       	rcall	.+3428   	; 0x126a6 <find_device>
   11942:	8f 3f       	cpi	r24, 0xFF	; 255
   11944:	2f ef       	ldi	r18, 0xFF	; 255
   11946:	92 07       	cpc	r25, r18
   11948:	11 f0       	breq	.+4      	; 0x1194e <SS80_is_MTA+0x18>
   1194a:	d7 c6       	rjmp	.+3502   	; 0x126fa <set_active_device>
   1194c:	08 95       	ret
   1194e:	80 e0       	ldi	r24, 0x00	; 0
   11950:	90 e0       	ldi	r25, 0x00	; 0
   11952:	08 95       	ret

00011954 <SS80_is_MSA>:
   11954:	40 e6       	ldi	r20, 0x60	; 96
   11956:	50 e0       	ldi	r21, 0x00	; 0
   11958:	bc 01       	movw	r22, r24
   1195a:	83 e0       	ldi	r24, 0x03	; 3
   1195c:	90 e0       	ldi	r25, 0x00	; 0
   1195e:	a3 d6       	rcall	.+3398   	; 0x126a6 <find_device>
   11960:	8f 3f       	cpi	r24, 0xFF	; 255
   11962:	2f ef       	ldi	r18, 0xFF	; 255
   11964:	92 07       	cpc	r25, r18
   11966:	11 f0       	breq	.+4      	; 0x1196c <SS80_is_MSA+0x18>
   11968:	c8 c6       	rjmp	.+3472   	; 0x126fa <set_active_device>
   1196a:	08 95       	ret
   1196c:	80 e0       	ldi	r24, 0x00	; 0
   1196e:	90 e0       	ldi	r25, 0x00	; 0
   11970:	08 95       	ret

00011972 <AMIGO_is_MLA>:
   11972:	40 e2       	ldi	r20, 0x20	; 32
   11974:	50 e0       	ldi	r21, 0x00	; 0
   11976:	bc 01       	movw	r22, r24
   11978:	81 e0       	ldi	r24, 0x01	; 1
   1197a:	90 e0       	ldi	r25, 0x00	; 0
   1197c:	94 d6       	rcall	.+3368   	; 0x126a6 <find_device>
   1197e:	8f 3f       	cpi	r24, 0xFF	; 255
   11980:	2f ef       	ldi	r18, 0xFF	; 255
   11982:	92 07       	cpc	r25, r18
   11984:	11 f0       	breq	.+4      	; 0x1198a <AMIGO_is_MLA+0x18>
   11986:	b9 c6       	rjmp	.+3442   	; 0x126fa <set_active_device>
   11988:	08 95       	ret
   1198a:	80 e0       	ldi	r24, 0x00	; 0
   1198c:	90 e0       	ldi	r25, 0x00	; 0
   1198e:	08 95       	ret

00011990 <AMIGO_is_MTA>:
   11990:	40 e4       	ldi	r20, 0x40	; 64
   11992:	50 e0       	ldi	r21, 0x00	; 0
   11994:	bc 01       	movw	r22, r24
   11996:	81 e0       	ldi	r24, 0x01	; 1
   11998:	90 e0       	ldi	r25, 0x00	; 0
   1199a:	85 d6       	rcall	.+3338   	; 0x126a6 <find_device>
   1199c:	8f 3f       	cpi	r24, 0xFF	; 255
   1199e:	2f ef       	ldi	r18, 0xFF	; 255
   119a0:	92 07       	cpc	r25, r18
   119a2:	11 f0       	breq	.+4      	; 0x119a8 <AMIGO_is_MTA+0x18>
   119a4:	aa c6       	rjmp	.+3412   	; 0x126fa <set_active_device>
   119a6:	08 95       	ret
   119a8:	80 e0       	ldi	r24, 0x00	; 0
   119aa:	90 e0       	ldi	r25, 0x00	; 0
   119ac:	08 95       	ret

000119ae <AMIGO_is_MSA>:
   119ae:	40 e6       	ldi	r20, 0x60	; 96
   119b0:	50 e0       	ldi	r21, 0x00	; 0
   119b2:	bc 01       	movw	r22, r24
   119b4:	81 e0       	ldi	r24, 0x01	; 1
   119b6:	90 e0       	ldi	r25, 0x00	; 0
   119b8:	76 d6       	rcall	.+3308   	; 0x126a6 <find_device>
   119ba:	8f 3f       	cpi	r24, 0xFF	; 255
   119bc:	2f ef       	ldi	r18, 0xFF	; 255
   119be:	92 07       	cpc	r25, r18
   119c0:	11 f0       	breq	.+4      	; 0x119c6 <AMIGO_is_MSA+0x18>
   119c2:	9b c6       	rjmp	.+3382   	; 0x126fa <set_active_device>
   119c4:	08 95       	ret
   119c6:	80 e0       	ldi	r24, 0x00	; 0
   119c8:	90 e0       	ldi	r25, 0x00	; 0
   119ca:	08 95       	ret

000119cc <PRINTER_is_MLA>:
   119cc:	40 e2       	ldi	r20, 0x20	; 32
   119ce:	50 e0       	ldi	r21, 0x00	; 0
   119d0:	bc 01       	movw	r22, r24
   119d2:	84 e0       	ldi	r24, 0x04	; 4
   119d4:	90 e0       	ldi	r25, 0x00	; 0
   119d6:	67 d6       	rcall	.+3278   	; 0x126a6 <find_device>
   119d8:	8f 3f       	cpi	r24, 0xFF	; 255
   119da:	2f ef       	ldi	r18, 0xFF	; 255
   119dc:	92 07       	cpc	r25, r18
   119de:	11 f0       	breq	.+4      	; 0x119e4 <PRINTER_is_MLA+0x18>
   119e0:	8c c6       	rjmp	.+3352   	; 0x126fa <set_active_device>
   119e2:	08 95       	ret
   119e4:	80 e0       	ldi	r24, 0x00	; 0
   119e6:	90 e0       	ldi	r25, 0x00	; 0
   119e8:	08 95       	ret

000119ea <PRINTER_is_MTA>:
   119ea:	40 e4       	ldi	r20, 0x40	; 64
   119ec:	50 e0       	ldi	r21, 0x00	; 0
   119ee:	bc 01       	movw	r22, r24
   119f0:	84 e0       	ldi	r24, 0x04	; 4
   119f2:	90 e0       	ldi	r25, 0x00	; 0
   119f4:	58 d6       	rcall	.+3248   	; 0x126a6 <find_device>
   119f6:	8f 3f       	cpi	r24, 0xFF	; 255
   119f8:	2f ef       	ldi	r18, 0xFF	; 255
   119fa:	92 07       	cpc	r25, r18
   119fc:	11 f0       	breq	.+4      	; 0x11a02 <PRINTER_is_MTA+0x18>
   119fe:	7d c6       	rjmp	.+3322   	; 0x126fa <set_active_device>
   11a00:	08 95       	ret
   11a02:	80 e0       	ldi	r24, 0x00	; 0
   11a04:	90 e0       	ldi	r25, 0x00	; 0
   11a06:	08 95       	ret

00011a08 <gpib_init_devices>:
   11a08:	11 d9       	rcall	.-3550   	; 0x10c2c <gpib_bus_init>
   11a0a:	0e 94 eb ad 	call	0x15bd6	; 0x15bd6 <SS80_init>
   11a0e:	0e 94 7a b3 	call	0x166f4	; 0x166f4 <amigo_init>
   11a12:	0c 94 6e be 	jmp	0x17cdc	; 0x17cdc <printer_close>
   11a16:	08 95       	ret

00011a18 <gpib_trace_task>:
   11a18:	0f 93       	push	r16
   11a1a:	1f 93       	push	r17
   11a1c:	cf 93       	push	r28
   11a1e:	df 93       	push	r29
   11a20:	00 d0       	rcall	.+0      	; 0x11a22 <gpib_trace_task+0xa>
   11a22:	00 d0       	rcall	.+0      	; 0x11a24 <gpib_trace_task+0xc>
   11a24:	1f 92       	push	r1
   11a26:	eb 01       	movw	r28, r22
   11a28:	00 97       	sbiw	r24, 0x00	; 0
   11a2a:	09 f4       	brne	.+2      	; 0x11a2e <gpib_trace_task+0x16>
   11a2c:	44 c0       	rjmp	.+136    	; 0x11ab6 <gpib_trace_task+0x9e>
   11a2e:	fc 01       	movw	r30, r24
   11a30:	20 81       	ld	r18, Z
   11a32:	22 23       	and	r18, r18
   11a34:	09 f4       	brne	.+2      	; 0x11a38 <gpib_trace_task+0x20>
   11a36:	3f c0       	rjmp	.+126    	; 0x11ab6 <gpib_trace_task+0x9e>
   11a38:	0e 94 23 33 	call	0x6646	; 0x6646 <skipspaces>
   11a3c:	8c 01       	movw	r16, r24
   11a3e:	ed b7       	in	r30, 0x3d	; 61
   11a40:	fe b7       	in	r31, 0x3e	; 62
   11a42:	95 83       	std	Z+5, r25	; 0x05
   11a44:	84 83       	std	Z+4, r24	; 0x04
   11a46:	89 eb       	ldi	r24, 0xB9	; 185
   11a48:	92 e1       	ldi	r25, 0x12	; 18
   11a4a:	a0 e0       	ldi	r26, 0x00	; 0
   11a4c:	81 83       	std	Z+1, r24	; 0x01
   11a4e:	92 83       	std	Z+2, r25	; 0x02
   11a50:	a3 83       	std	Z+3, r26	; 0x03
   11a52:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   11a56:	20 97       	sbiw	r28, 0x00	; 0
   11a58:	51 f0       	breq	.+20     	; 0x11a6e <gpib_trace_task+0x56>
   11a5a:	8e e8       	ldi	r24, 0x8E	; 142
   11a5c:	92 e1       	ldi	r25, 0x12	; 18
   11a5e:	a0 e0       	ldi	r26, 0x00	; 0
   11a60:	ed b7       	in	r30, 0x3d	; 61
   11a62:	fe b7       	in	r31, 0x3e	; 62
   11a64:	81 83       	std	Z+1, r24	; 0x01
   11a66:	92 83       	std	Z+2, r25	; 0x02
   11a68:	a3 83       	std	Z+3, r26	; 0x03
   11a6a:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   11a6e:	87 e7       	ldi	r24, 0x77	; 119
   11a70:	92 e1       	ldi	r25, 0x12	; 18
   11a72:	a0 e0       	ldi	r26, 0x00	; 0
   11a74:	ed b7       	in	r30, 0x3d	; 61
   11a76:	fe b7       	in	r31, 0x3e	; 62
   11a78:	81 83       	std	Z+1, r24	; 0x01
   11a7a:	92 83       	std	Z+2, r25	; 0x02
   11a7c:	a3 83       	std	Z+3, r26	; 0x03
   11a7e:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   11a82:	6a e2       	ldi	r22, 0x2A	; 42
   11a84:	78 e0       	ldi	r23, 0x08	; 8
   11a86:	c8 01       	movw	r24, r16
   11a88:	0e 94 f8 7e 	call	0xfdf0	; 0xfdf0 <fopen>
   11a8c:	90 93 fc 18 	sts	0x18FC, r25	; 0x8018fc <gpib_log_fp+0x1>
   11a90:	80 93 fb 18 	sts	0x18FB, r24	; 0x8018fb <gpib_log_fp>
   11a94:	89 2b       	or	r24, r25
   11a96:	b9 f4       	brne	.+46     	; 0x11ac6 <gpib_trace_task+0xae>
   11a98:	85 ec       	ldi	r24, 0xC5	; 197
   11a9a:	9c e0       	ldi	r25, 0x0C	; 12
   11a9c:	0e 94 37 79 	call	0xf26e	; 0xf26e <perror>
   11aa0:	8b e6       	ldi	r24, 0x6B	; 107
   11aa2:	92 e1       	ldi	r25, 0x12	; 18
   11aa4:	a0 e0       	ldi	r26, 0x00	; 0
   11aa6:	ed b7       	in	r30, 0x3d	; 61
   11aa8:	fe b7       	in	r31, 0x3e	; 62
   11aaa:	81 83       	std	Z+1, r24	; 0x01
   11aac:	92 83       	std	Z+2, r25	; 0x02
   11aae:	a3 83       	std	Z+3, r26	; 0x03
   11ab0:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   11ab4:	3e c0       	rjmp	.+124    	; 0x11b32 <gpib_trace_task+0x11a>
   11ab6:	80 91 57 1c 	lds	r24, 0x1C57	; 0x801c57 <__iob+0x2>
   11aba:	90 91 58 1c 	lds	r25, 0x1C58	; 0x801c58 <__iob+0x3>
   11abe:	90 93 fc 18 	sts	0x18FC, r25	; 0x8018fc <gpib_log_fp+0x1>
   11ac2:	80 93 fb 18 	sts	0x18FB, r24	; 0x8018fb <gpib_log_fp>
   11ac6:	df d8       	rcall	.-3650   	; 0x10c86 <gpib_state_init>
   11ac8:	9f df       	rcall	.-194    	; 0x11a08 <gpib_init_devices>
   11aca:	80 91 fb 18 	lds	r24, 0x18FB	; 0x8018fb <gpib_log_fp>
   11ace:	90 91 fc 18 	lds	r25, 0x18FC	; 0x8018fc <gpib_log_fp+0x1>
   11ad2:	50 db       	rcall	.-2400   	; 0x11174 <gpib_decode_header>
   11ad4:	80 e0       	ldi	r24, 0x00	; 0
   11ad6:	0e 94 01 2c 	call	0x5802	; 0x5802 <uart_keyhit>
   11ada:	89 2b       	or	r24, r25
   11adc:	31 f4       	brne	.+12     	; 0x11aea <gpib_trace_task+0xd2>
   11ade:	ce 01       	movw	r24, r28
   11ae0:	dd dc       	rcall	.-1606   	; 0x1149c <gpib_read_byte>
   11ae2:	20 97       	sbiw	r28, 0x00	; 0
   11ae4:	b9 f7       	brne	.-18     	; 0x11ad4 <gpib_trace_task+0xbc>
   11ae6:	b0 dd       	rcall	.-1184   	; 0x11648 <gpib_decode>
   11ae8:	f5 cf       	rjmp	.-22     	; 0x11ad4 <gpib_trace_task+0xbc>
   11aea:	85 e6       	ldi	r24, 0x65	; 101
   11aec:	92 e1       	ldi	r25, 0x12	; 18
   11aee:	a0 e0       	ldi	r26, 0x00	; 0
   11af0:	ed b7       	in	r30, 0x3d	; 61
   11af2:	fe b7       	in	r31, 0x3e	; 62
   11af4:	81 83       	std	Z+1, r24	; 0x01
   11af6:	92 83       	std	Z+2, r25	; 0x02
   11af8:	a3 83       	std	Z+3, r26	; 0x03
   11afa:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   11afe:	80 91 fb 18 	lds	r24, 0x18FB	; 0x8018fb <gpib_log_fp>
   11b02:	90 91 fc 18 	lds	r25, 0x18FC	; 0x8018fc <gpib_log_fp+0x1>
   11b06:	00 97       	sbiw	r24, 0x00	; 0
   11b08:	a1 f0       	breq	.+40     	; 0x11b32 <gpib_trace_task+0x11a>
   11b0a:	0e 94 a2 7d 	call	0xfb44	; 0xfb44 <fclose>
   11b0e:	83 e5       	ldi	r24, 0x53	; 83
   11b10:	92 e1       	ldi	r25, 0x12	; 18
   11b12:	a0 e0       	ldi	r26, 0x00	; 0
   11b14:	ed b7       	in	r30, 0x3d	; 61
   11b16:	fe b7       	in	r31, 0x3e	; 62
   11b18:	81 83       	std	Z+1, r24	; 0x01
   11b1a:	92 83       	std	Z+2, r25	; 0x02
   11b1c:	a3 83       	std	Z+3, r26	; 0x03
   11b1e:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   11b22:	80 91 57 1c 	lds	r24, 0x1C57	; 0x801c57 <__iob+0x2>
   11b26:	90 91 58 1c 	lds	r25, 0x1C58	; 0x801c58 <__iob+0x3>
   11b2a:	90 93 fc 18 	sts	0x18FC, r25	; 0x8018fc <gpib_log_fp+0x1>
   11b2e:	80 93 fb 18 	sts	0x18FB, r24	; 0x8018fb <gpib_log_fp>
   11b32:	cd b7       	in	r28, 0x3d	; 61
   11b34:	de b7       	in	r29, 0x3e	; 62
   11b36:	25 96       	adiw	r28, 0x05	; 5
   11b38:	e4 e0       	ldi	r30, 0x04	; 4
   11b3a:	0c 94 f2 e3 	jmp	0x1c7e4	; 0x1c7e4 <__epilogue_restores__+0x1c>

00011b3e <gpib_error_test>:
   11b3e:	ef 92       	push	r14
   11b40:	ff 92       	push	r15
   11b42:	0f 93       	push	r16
   11b44:	1f 93       	push	r17
   11b46:	cf 93       	push	r28
   11b48:	df 93       	push	r29
   11b4a:	00 d0       	rcall	.+0      	; 0x11b4c <gpib_error_test+0xe>
   11b4c:	1f 92       	push	r1
   11b4e:	7c 01       	movw	r14, r24
   11b50:	ec 01       	movw	r28, r24
   11b52:	cc 27       	eor	r28, r28
   11b54:	d0 7d       	andi	r29, 0xD0	; 208
   11b56:	20 97       	sbiw	r28, 0x00	; 0
   11b58:	61 f0       	breq	.+24     	; 0x11b72 <gpib_error_test+0x34>
   11b5a:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   11b5e:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   11b62:	8e 72       	andi	r24, 0x2E	; 46
   11b64:	99 27       	eor	r25, r25
   11b66:	87 01       	movw	r16, r14
   11b68:	00 27       	eor	r16, r16
   11b6a:	10 71       	andi	r17, 0x10	; 16
   11b6c:	89 2b       	or	r24, r25
   11b6e:	59 f4       	brne	.+22     	; 0x11b86 <gpib_error_test+0x48>
   11b70:	17 c0       	rjmp	.+46     	; 0x11ba0 <gpib_error_test+0x62>
   11b72:	80 e0       	ldi	r24, 0x00	; 0
   11b74:	0e 94 01 2c 	call	0x5802	; 0x5802 <uart_keyhit>
   11b78:	89 2b       	or	r24, r25
   11b7a:	79 f7       	brne	.-34     	; 0x11b5a <gpib_error_test+0x1c>
   11b7c:	0e 94 cf 70 	call	0xe19e	; 0xe19e <mmc_ins_status>
   11b80:	01 97       	sbiw	r24, 0x01	; 1
   11b82:	59 f7       	brne	.-42     	; 0x11b5a <gpib_error_test+0x1c>
   11b84:	62 c0       	rjmp	.+196    	; 0x11c4a <gpib_error_test+0x10c>
   11b86:	01 15       	cp	r16, r1
   11b88:	11 05       	cpc	r17, r1
   11b8a:	51 f0       	breq	.+20     	; 0x11ba0 <gpib_error_test+0x62>
   11b8c:	8c e4       	ldi	r24, 0x4C	; 76
   11b8e:	92 e1       	ldi	r25, 0x12	; 18
   11b90:	a0 e0       	ldi	r26, 0x00	; 0
   11b92:	ed b7       	in	r30, 0x3d	; 61
   11b94:	fe b7       	in	r31, 0x3e	; 62
   11b96:	81 83       	std	Z+1, r24	; 0x01
   11b98:	92 83       	std	Z+2, r25	; 0x02
   11b9a:	a3 83       	std	Z+3, r26	; 0x03
   11b9c:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   11ba0:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   11ba4:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   11ba8:	85 70       	andi	r24, 0x05	; 5
   11baa:	99 27       	eor	r25, r25
   11bac:	89 2b       	or	r24, r25
   11bae:	c1 f0       	breq	.+48     	; 0x11be0 <gpib_error_test+0xa2>
   11bb0:	f6 fe       	sbrs	r15, 6
   11bb2:	0a c0       	rjmp	.+20     	; 0x11bc8 <gpib_error_test+0x8a>
   11bb4:	81 e4       	ldi	r24, 0x41	; 65
   11bb6:	92 e1       	ldi	r25, 0x12	; 18
   11bb8:	a0 e0       	ldi	r26, 0x00	; 0
   11bba:	ed b7       	in	r30, 0x3d	; 61
   11bbc:	fe b7       	in	r31, 0x3e	; 62
   11bbe:	81 83       	std	Z+1, r24	; 0x01
   11bc0:	92 83       	std	Z+2, r25	; 0x02
   11bc2:	a3 83       	std	Z+3, r26	; 0x03
   11bc4:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   11bc8:	d7 ff       	sbrs	r29, 7
   11bca:	0a c0       	rjmp	.+20     	; 0x11be0 <gpib_error_test+0xa2>
   11bcc:	8a e3       	ldi	r24, 0x3A	; 58
   11bce:	92 e1       	ldi	r25, 0x12	; 18
   11bd0:	a0 e0       	ldi	r26, 0x00	; 0
   11bd2:	ed b7       	in	r30, 0x3d	; 61
   11bd4:	fe b7       	in	r31, 0x3e	; 62
   11bd6:	81 83       	std	Z+1, r24	; 0x01
   11bd8:	92 83       	std	Z+2, r25	; 0x02
   11bda:	a3 83       	std	Z+3, r26	; 0x03
   11bdc:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   11be0:	80 e0       	ldi	r24, 0x00	; 0
   11be2:	0e 94 01 2c 	call	0x5802	; 0x5802 <uart_keyhit>
   11be6:	89 2b       	or	r24, r25
   11be8:	51 f0       	breq	.+20     	; 0x11bfe <gpib_error_test+0xc0>
   11bea:	8d e2       	ldi	r24, 0x2D	; 45
   11bec:	92 e1       	ldi	r25, 0x12	; 18
   11bee:	a0 e0       	ldi	r26, 0x00	; 0
   11bf0:	ed b7       	in	r30, 0x3d	; 61
   11bf2:	fe b7       	in	r31, 0x3e	; 62
   11bf4:	81 83       	std	Z+1, r24	; 0x01
   11bf6:	92 83       	std	Z+2, r25	; 0x02
   11bf8:	a3 83       	std	Z+3, r26	; 0x03
   11bfa:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   11bfe:	0e 94 cf 70 	call	0xe19e	; 0xe19e <mmc_ins_status>
   11c02:	01 97       	sbiw	r24, 0x01	; 1
   11c04:	51 f0       	breq	.+20     	; 0x11c1a <gpib_error_test+0xdc>
   11c06:	8c e1       	ldi	r24, 0x1C	; 28
   11c08:	92 e1       	ldi	r25, 0x12	; 18
   11c0a:	a0 e0       	ldi	r26, 0x00	; 0
   11c0c:	ed b7       	in	r30, 0x3d	; 61
   11c0e:	fe b7       	in	r31, 0x3e	; 62
   11c10:	81 83       	std	Z+1, r24	; 0x01
   11c12:	92 83       	std	Z+2, r25	; 0x02
   11c14:	a3 83       	std	Z+3, r26	; 0x03
   11c16:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   11c1a:	01 15       	cp	r16, r1
   11c1c:	11 05       	cpc	r17, r1
   11c1e:	09 f0       	breq	.+2      	; 0x11c22 <gpib_error_test+0xe4>
   11c20:	f3 de       	rcall	.-538    	; 0x11a08 <gpib_init_devices>
   11c22:	80 e0       	ldi	r24, 0x00	; 0
   11c24:	0e 94 01 2c 	call	0x5802	; 0x5802 <uart_keyhit>
   11c28:	89 2b       	or	r24, r25
   11c2a:	11 f0       	breq	.+4      	; 0x11c30 <gpib_error_test+0xf2>
   11c2c:	ed de       	rcall	.-550    	; 0x11a08 <gpib_init_devices>
   11c2e:	0b c0       	rjmp	.+22     	; 0x11c46 <gpib_error_test+0x108>
   11c30:	0e 94 cf 70 	call	0xe19e	; 0xe19e <mmc_ins_status>
   11c34:	01 97       	sbiw	r24, 0x01	; 1
   11c36:	39 f4       	brne	.+14     	; 0x11c46 <gpib_error_test+0x108>
   11c38:	01 15       	cp	r16, r1
   11c3a:	11 05       	cpc	r17, r1
   11c3c:	31 f0       	breq	.+12     	; 0x11c4a <gpib_error_test+0x10c>
   11c3e:	54 98       	cbi	0x0a, 4	; 10
   11c40:	4c 9b       	sbis	0x09, 4	; 9
   11c42:	fd cf       	rjmp	.-6      	; 0x11c3e <gpib_error_test+0x100>
   11c44:	02 c0       	rjmp	.+4      	; 0x11c4a <gpib_error_test+0x10c>
   11c46:	c1 e0       	ldi	r28, 0x01	; 1
   11c48:	d0 e0       	ldi	r29, 0x00	; 0
   11c4a:	ce 01       	movw	r24, r28
   11c4c:	cd b7       	in	r28, 0x3d	; 61
   11c4e:	de b7       	in	r29, 0x3e	; 62
   11c50:	23 96       	adiw	r28, 0x03	; 3
   11c52:	e6 e0       	ldi	r30, 0x06	; 6
   11c54:	0c 94 f0 e3 	jmp	0x1c7e0	; 0x1c7e0 <__epilogue_restores__+0x18>

00011c58 <GPIB_COMMANDS>:
   11c58:	1f 93       	push	r17
   11c5a:	cf 93       	push	r28
   11c5c:	df 93       	push	r29
   11c5e:	ec 01       	movw	r28, r24
   11c60:	16 2f       	mov	r17, r22
   11c62:	80 91 84 1e 	lds	r24, 0x1E84	; 0x801e84 <talking>
   11c66:	8f 35       	cpi	r24, 0x5F	; 95
   11c68:	91 f0       	breq	.+36     	; 0x11c8e <GPIB_COMMANDS+0x36>
   11c6a:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <listening>
   11c6e:	90 e0       	ldi	r25, 0x00	; 0
   11c70:	80 de       	rcall	.-768    	; 0x11972 <AMIGO_is_MLA>
   11c72:	89 2b       	or	r24, r25
   11c74:	c9 f4       	brne	.+50     	; 0x11ca8 <GPIB_COMMANDS+0x50>
   11c76:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <listening>
   11c7a:	90 e0       	ldi	r25, 0x00	; 0
   11c7c:	4d de       	rcall	.-870    	; 0x11918 <SS80_is_MLA>
   11c7e:	89 2b       	or	r24, r25
   11c80:	11 f5       	brne	.+68     	; 0x11cc6 <GPIB_COMMANDS+0x6e>
   11c82:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <listening>
   11c86:	90 e0       	ldi	r25, 0x00	; 0
   11c88:	a1 de       	rcall	.-702    	; 0x119cc <PRINTER_is_MLA>
   11c8a:	89 2b       	or	r24, r25
   11c8c:	59 f5       	brne	.+86     	; 0x11ce4 <GPIB_COMMANDS+0x8c>
   11c8e:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <listening>
   11c92:	8f 33       	cpi	r24, 0x3F	; 63
   11c94:	19 f4       	brne	.+6      	; 0x11c9c <GPIB_COMMANDS+0x44>
   11c96:	80 e0       	ldi	r24, 0x00	; 0
   11c98:	90 e0       	ldi	r25, 0x00	; 0
   11c9a:	2e c0       	rjmp	.+92     	; 0x11cf8 <GPIB_COMMANDS+0xa0>
   11c9c:	80 91 84 1e 	lds	r24, 0x1E84	; 0x801e84 <talking>
   11ca0:	90 e0       	ldi	r25, 0x00	; 0
   11ca2:	76 de       	rcall	.-788    	; 0x11990 <AMIGO_is_MTA>
   11ca4:	89 2b       	or	r24, r25
   11ca6:	49 f0       	breq	.+18     	; 0x11cba <GPIB_COMMANDS+0x62>
   11ca8:	11 23       	and	r17, r17
   11caa:	11 f0       	breq	.+4      	; 0x11cb0 <GPIB_COMMANDS+0x58>
   11cac:	ce 01       	movw	r24, r28
   11cae:	a7 d8       	rcall	.-3762   	; 0x10dfe <gpib_unread>
   11cb0:	80 91 85 1e 	lds	r24, 0x1E85	; 0x801e85 <secondary>
   11cb4:	0e 94 69 bd 	call	0x17ad2	; 0x17ad2 <AMIGO_COMMANDS>
   11cb8:	1d c0       	rjmp	.+58     	; 0x11cf4 <GPIB_COMMANDS+0x9c>
   11cba:	80 91 84 1e 	lds	r24, 0x1E84	; 0x801e84 <talking>
   11cbe:	90 e0       	ldi	r25, 0x00	; 0
   11cc0:	3a de       	rcall	.-908    	; 0x11936 <SS80_is_MTA>
   11cc2:	89 2b       	or	r24, r25
   11cc4:	49 f0       	breq	.+18     	; 0x11cd8 <GPIB_COMMANDS+0x80>
   11cc6:	11 23       	and	r17, r17
   11cc8:	11 f0       	breq	.+4      	; 0x11cce <GPIB_COMMANDS+0x76>
   11cca:	ce 01       	movw	r24, r28
   11ccc:	98 d8       	rcall	.-3792   	; 0x10dfe <gpib_unread>
   11cce:	80 91 85 1e 	lds	r24, 0x1E85	; 0x801e85 <secondary>
   11cd2:	0e 94 c6 b1 	call	0x1638c	; 0x1638c <SS80_COMMANDS>
   11cd6:	0e c0       	rjmp	.+28     	; 0x11cf4 <GPIB_COMMANDS+0x9c>
   11cd8:	80 91 84 1e 	lds	r24, 0x1E84	; 0x801e84 <talking>
   11cdc:	90 e0       	ldi	r25, 0x00	; 0
   11cde:	85 de       	rcall	.-758    	; 0x119ea <PRINTER_is_MTA>
   11ce0:	89 2b       	or	r24, r25
   11ce2:	c9 f2       	breq	.-78     	; 0x11c96 <GPIB_COMMANDS+0x3e>
   11ce4:	11 23       	and	r17, r17
   11ce6:	11 f0       	breq	.+4      	; 0x11cec <GPIB_COMMANDS+0x94>
   11ce8:	ce 01       	movw	r24, r28
   11cea:	89 d8       	rcall	.-3822   	; 0x10dfe <gpib_unread>
   11cec:	80 91 85 1e 	lds	r24, 0x1E85	; 0x801e85 <secondary>
   11cf0:	0e 94 e2 bf 	call	0x17fc4	; 0x17fc4 <PRINTER_COMMANDS>
   11cf4:	10 92 85 1e 	sts	0x1E85, r1	; 0x801e85 <secondary>
   11cf8:	df 91       	pop	r29
   11cfa:	cf 91       	pop	r28
   11cfc:	1f 91       	pop	r17
   11cfe:	08 95       	ret

00011d00 <Send_Identify>:
   11d00:	cf 92       	push	r12
   11d02:	df 92       	push	r13
   11d04:	ff 92       	push	r15
   11d06:	0f 93       	push	r16
   11d08:	1f 93       	push	r17
   11d0a:	cf 93       	push	r28
   11d0c:	df 93       	push	r29
   11d0e:	cd b7       	in	r28, 0x3d	; 61
   11d10:	de b7       	in	r29, 0x3e	; 62
   11d12:	2b 97       	sbiw	r28, 0x0b	; 11
   11d14:	0f b6       	in	r0, 0x3f	; 63
   11d16:	f8 94       	cli
   11d18:	de bf       	out	0x3e, r29	; 62
   11d1a:	0f be       	out	0x3f, r0	; 63
   11d1c:	cd bf       	out	0x3d, r28	; 61
   11d1e:	f8 2e       	mov	r15, r24
   11d20:	6b 01       	movw	r12, r22
   11d22:	80 e0       	ldi	r24, 0x00	; 0
   11d24:	91 e0       	ldi	r25, 0x01	; 1
   11d26:	9b 87       	std	Y+11, r25	; 0x0b
   11d28:	8a 87       	std	Y+10, r24	; 0x0a
   11d2a:	8b 01       	movw	r16, r22
   11d2c:	20 e0       	ldi	r18, 0x00	; 0
   11d2e:	30 e0       	ldi	r19, 0x00	; 0
   11d30:	42 e0       	ldi	r20, 0x02	; 2
   11d32:	50 e0       	ldi	r21, 0x00	; 0
   11d34:	60 e0       	ldi	r22, 0x00	; 0
   11d36:	70 e0       	ldi	r23, 0x00	; 0
   11d38:	ce 01       	movw	r24, r28
   11d3a:	08 96       	adiw	r24, 0x08	; 8
   11d3c:	0c d4       	rcall	.+2072   	; 0x12556 <V2B_MSB>
   11d3e:	ae 01       	movw	r20, r28
   11d40:	46 5f       	subi	r20, 0xF6	; 246
   11d42:	5f 4f       	sbci	r21, 0xFF	; 255
   11d44:	62 e0       	ldi	r22, 0x02	; 2
   11d46:	70 e0       	ldi	r23, 0x00	; 0
   11d48:	ce 01       	movw	r24, r28
   11d4a:	08 96       	adiw	r24, 0x08	; 8
   11d4c:	23 dd       	rcall	.-1466   	; 0x11794 <gpib_write_str>
   11d4e:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   11d52:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   11d56:	02 97       	sbiw	r24, 0x02	; 2
   11d58:	79 f0       	breq	.+30     	; 0x11d78 <Send_Identify+0x78>
   11d5a:	25 70       	andi	r18, 0x05	; 5
   11d5c:	33 27       	eor	r19, r19
   11d5e:	23 2b       	or	r18, r19
   11d60:	e9 f0       	breq	.+58     	; 0x11d9c <Send_Identify+0x9c>
   11d62:	ed b7       	in	r30, 0x3d	; 61
   11d64:	fe b7       	in	r31, 0x3e	; 62
   11d66:	d7 82       	std	Z+7, r13	; 0x07
   11d68:	c6 82       	std	Z+6, r12	; 0x06
   11d6a:	8f 2d       	mov	r24, r15
   11d6c:	90 e0       	ldi	r25, 0x00	; 0
   11d6e:	95 83       	std	Z+5, r25	; 0x05
   11d70:	84 83       	std	Z+4, r24	; 0x04
   11d72:	8b ef       	ldi	r24, 0xFB	; 251
   11d74:	91 e1       	ldi	r25, 0x11	; 17
   11d76:	0c c0       	rjmp	.+24     	; 0x11d90 <Send_Identify+0x90>
   11d78:	22 ff       	sbrs	r18, 2
   11d7a:	10 c0       	rjmp	.+32     	; 0x11d9c <Send_Identify+0x9c>
   11d7c:	ed b7       	in	r30, 0x3d	; 61
   11d7e:	fe b7       	in	r31, 0x3e	; 62
   11d80:	d7 82       	std	Z+7, r13	; 0x07
   11d82:	c6 82       	std	Z+6, r12	; 0x06
   11d84:	8f 2d       	mov	r24, r15
   11d86:	90 e0       	ldi	r25, 0x00	; 0
   11d88:	95 83       	std	Z+5, r25	; 0x05
   11d8a:	84 83       	std	Z+4, r24	; 0x04
   11d8c:	81 ee       	ldi	r24, 0xE1	; 225
   11d8e:	91 e1       	ldi	r25, 0x11	; 17
   11d90:	a0 e0       	ldi	r26, 0x00	; 0
   11d92:	81 83       	std	Z+1, r24	; 0x01
   11d94:	92 83       	std	Z+2, r25	; 0x02
   11d96:	a3 83       	std	Z+3, r26	; 0x03
   11d98:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   11d9c:	8a 85       	ldd	r24, Y+10	; 0x0a
   11d9e:	9b 85       	ldd	r25, Y+11	; 0x0b
   11da0:	88 27       	eor	r24, r24
   11da2:	90 7d       	andi	r25, 0xD0	; 208
   11da4:	2b 96       	adiw	r28, 0x0b	; 11
   11da6:	0f b6       	in	r0, 0x3f	; 63
   11da8:	f8 94       	cli
   11daa:	de bf       	out	0x3e, r29	; 62
   11dac:	0f be       	out	0x3f, r0	; 63
   11dae:	cd bf       	out	0x3d, r28	; 61
   11db0:	df 91       	pop	r29
   11db2:	cf 91       	pop	r28
   11db4:	1f 91       	pop	r17
   11db6:	0f 91       	pop	r16
   11db8:	ff 90       	pop	r15
   11dba:	df 90       	pop	r13
   11dbc:	cf 90       	pop	r12
   11dbe:	08 95       	ret

00011dc0 <GPIB>:
   11dc0:	00 d0       	rcall	.+0      	; 0x11dc2 <GPIB+0x2>
   11dc2:	00 d0       	rcall	.+0      	; 0x11dc4 <GPIB+0x4>
   11dc4:	1f 92       	push	r1
   11dc6:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   11dca:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   11dce:	85 30       	cpi	r24, 0x05	; 5
   11dd0:	89 f4       	brne	.+34     	; 0x11df4 <GPIB+0x34>
   11dd2:	24 71       	andi	r18, 0x14	; 20
   11dd4:	33 27       	eor	r19, r19
   11dd6:	23 2b       	or	r18, r19
   11dd8:	51 f0       	breq	.+20     	; 0x11dee <GPIB+0x2e>
   11dda:	8e ec       	ldi	r24, 0xCE	; 206
   11ddc:	91 e1       	ldi	r25, 0x11	; 17
   11dde:	a0 e0       	ldi	r26, 0x00	; 0
   11de0:	ed b7       	in	r30, 0x3d	; 61
   11de2:	fe b7       	in	r31, 0x3e	; 62
   11de4:	81 83       	std	Z+1, r24	; 0x01
   11de6:	92 83       	std	Z+2, r25	; 0x02
   11de8:	a3 83       	std	Z+3, r26	; 0x03
   11dea:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   11dee:	10 92 81 1e 	sts	0x1E81, r1	; 0x801e81 <spoll>
   11df2:	9c c0       	rjmp	.+312    	; 0x11f2c <GPIB+0x16c>
   11df4:	85 31       	cpi	r24, 0x15	; 21
   11df6:	39 f4       	brne	.+14     	; 0x11e06 <GPIB+0x46>
   11df8:	24 71       	andi	r18, 0x14	; 20
   11dfa:	33 27       	eor	r19, r19
   11dfc:	23 2b       	or	r18, r19
   11dfe:	b9 f3       	breq	.-18     	; 0x11dee <GPIB+0x2e>
   11e00:	8b eb       	ldi	r24, 0xBB	; 187
   11e02:	91 e1       	ldi	r25, 0x11	; 17
   11e04:	ec cf       	rjmp	.-40     	; 0x11dde <GPIB+0x1e>
   11e06:	88 31       	cpi	r24, 0x18	; 24
   11e08:	c9 f4       	brne	.+50     	; 0x11e3c <GPIB+0x7c>
   11e0a:	22 ff       	sbrs	r18, 2
   11e0c:	0a c0       	rjmp	.+20     	; 0x11e22 <GPIB+0x62>
   11e0e:	84 eb       	ldi	r24, 0xB4	; 180
   11e10:	91 e1       	ldi	r25, 0x11	; 17
   11e12:	a0 e0       	ldi	r26, 0x00	; 0
   11e14:	ed b7       	in	r30, 0x3d	; 61
   11e16:	fe b7       	in	r31, 0x3e	; 62
   11e18:	81 83       	std	Z+1, r24	; 0x01
   11e1a:	92 83       	std	Z+2, r25	; 0x02
   11e1c:	a3 83       	std	Z+3, r26	; 0x03
   11e1e:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   11e22:	81 e0       	ldi	r24, 0x01	; 1
   11e24:	80 93 81 1e 	sts	0x1E81, r24	; 0x801e81 <spoll>
   11e28:	80 91 84 1e 	lds	r24, 0x1E84	; 0x801e84 <talking>
   11e2c:	90 e0       	ldi	r25, 0x00	; 0
   11e2e:	83 dd       	rcall	.-1274   	; 0x11936 <SS80_is_MTA>
   11e30:	89 2b       	or	r24, r25
   11e32:	09 f4       	brne	.+2      	; 0x11e36 <GPIB+0x76>
   11e34:	7b c0       	rjmp	.+246    	; 0x11f2c <GPIB+0x16c>
   11e36:	0e 94 7f ad 	call	0x15afe	; 0x15afe <SS80_Report>
   11e3a:	7a c0       	rjmp	.+244    	; 0x11f30 <GPIB+0x170>
   11e3c:	89 31       	cpi	r24, 0x19	; 25
   11e3e:	29 f4       	brne	.+10     	; 0x11e4a <GPIB+0x8a>
   11e40:	22 ff       	sbrs	r18, 2
   11e42:	d5 cf       	rjmp	.-86     	; 0x11dee <GPIB+0x2e>
   11e44:	8d ea       	ldi	r24, 0xAD	; 173
   11e46:	91 e1       	ldi	r25, 0x11	; 17
   11e48:	ca cf       	rjmp	.-108    	; 0x11dde <GPIB+0x1e>
   11e4a:	84 30       	cpi	r24, 0x04	; 4
   11e4c:	09 f0       	breq	.+2      	; 0x11e50 <GPIB+0x90>
   11e4e:	48 c0       	rjmp	.+144    	; 0x11ee0 <GPIB+0x120>
   11e50:	22 ff       	sbrs	r18, 2
   11e52:	0a c0       	rjmp	.+20     	; 0x11e68 <GPIB+0xa8>
   11e54:	86 ea       	ldi	r24, 0xA6	; 166
   11e56:	91 e1       	ldi	r25, 0x11	; 17
   11e58:	a0 e0       	ldi	r26, 0x00	; 0
   11e5a:	ed b7       	in	r30, 0x3d	; 61
   11e5c:	fe b7       	in	r31, 0x3e	; 62
   11e5e:	81 83       	std	Z+1, r24	; 0x01
   11e60:	92 83       	std	Z+2, r25	; 0x02
   11e62:	a3 83       	std	Z+3, r26	; 0x03
   11e64:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   11e68:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <listening>
   11e6c:	90 e0       	ldi	r25, 0x00	; 0
   11e6e:	54 dd       	rcall	.-1368   	; 0x11918 <SS80_is_MLA>
   11e70:	89 2b       	or	r24, r25
   11e72:	d9 f0       	breq	.+54     	; 0x11eaa <GPIB+0xea>
   11e74:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   11e78:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   11e7c:	84 72       	andi	r24, 0x24	; 36
   11e7e:	99 27       	eor	r25, r25
   11e80:	89 2b       	or	r24, r25
   11e82:	51 f0       	breq	.+20     	; 0x11e98 <GPIB+0xd8>
   11e84:	8a e9       	ldi	r24, 0x9A	; 154
   11e86:	91 e1       	ldi	r25, 0x11	; 17
   11e88:	a0 e0       	ldi	r26, 0x00	; 0
   11e8a:	ed b7       	in	r30, 0x3d	; 61
   11e8c:	fe b7       	in	r31, 0x3e	; 62
   11e8e:	81 83       	std	Z+1, r24	; 0x01
   11e90:	92 83       	std	Z+2, r25	; 0x02
   11e92:	a3 83       	std	Z+3, r26	; 0x03
   11e94:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   11e98:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <SS80s>
   11e9c:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <SS80s+0x1>
   11ea0:	85 81       	ldd	r24, Z+5	; 0x05
   11ea2:	90 e0       	ldi	r25, 0x00	; 0
   11ea4:	0e 94 4b ae 	call	0x15c96	; 0x15c96 <SS80_Selected_Device_Clear>
   11ea8:	43 c0       	rjmp	.+134    	; 0x11f30 <GPIB+0x170>
   11eaa:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <listening>
   11eae:	90 e0       	ldi	r25, 0x00	; 0
   11eb0:	60 dd       	rcall	.-1344   	; 0x11972 <AMIGO_is_MLA>
   11eb2:	89 2b       	or	r24, r25
   11eb4:	d9 f1       	breq	.+118    	; 0x11f2c <GPIB+0x16c>
   11eb6:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   11eba:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   11ebe:	84 72       	andi	r24, 0x24	; 36
   11ec0:	99 27       	eor	r25, r25
   11ec2:	89 2b       	or	r24, r25
   11ec4:	51 f0       	breq	.+20     	; 0x11eda <GPIB+0x11a>
   11ec6:	8d e8       	ldi	r24, 0x8D	; 141
   11ec8:	91 e1       	ldi	r25, 0x11	; 17
   11eca:	a0 e0       	ldi	r26, 0x00	; 0
   11ecc:	ed b7       	in	r30, 0x3d	; 61
   11ece:	fe b7       	in	r31, 0x3e	; 62
   11ed0:	81 83       	std	Z+1, r24	; 0x01
   11ed2:	92 83       	std	Z+2, r25	; 0x02
   11ed4:	a3 83       	std	Z+3, r26	; 0x03
   11ed6:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   11eda:	0e 94 51 b8 	call	0x170a2	; 0x170a2 <amigo_cmd_clear>
   11ede:	28 c0       	rjmp	.+80     	; 0x11f30 <GPIB+0x170>
   11ee0:	84 31       	cpi	r24, 0x14	; 20
   11ee2:	99 f4       	brne	.+38     	; 0x11f0a <GPIB+0x14a>
   11ee4:	22 ff       	sbrs	r18, 2
   11ee6:	0a c0       	rjmp	.+20     	; 0x11efc <GPIB+0x13c>
   11ee8:	86 e8       	ldi	r24, 0x86	; 134
   11eea:	91 e1       	ldi	r25, 0x11	; 17
   11eec:	a0 e0       	ldi	r26, 0x00	; 0
   11eee:	ed b7       	in	r30, 0x3d	; 61
   11ef0:	fe b7       	in	r31, 0x3e	; 62
   11ef2:	81 83       	std	Z+1, r24	; 0x01
   11ef4:	92 83       	std	Z+2, r25	; 0x02
   11ef6:	a3 83       	std	Z+3, r26	; 0x03
   11ef8:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   11efc:	0e 94 3d ae 	call	0x15c7a	; 0x15c7a <SS80_Universal_Device_Clear>
   11f00:	0e 94 51 b8 	call	0x170a2	; 0x170a2 <amigo_cmd_clear>
   11f04:	0e 94 6e be 	call	0x17cdc	; 0x17cdc <printer_close>
   11f08:	11 c0       	rjmp	.+34     	; 0x11f2c <GPIB+0x16c>
   11f0a:	25 71       	andi	r18, 0x15	; 21
   11f0c:	33 27       	eor	r19, r19
   11f0e:	23 2b       	or	r18, r19
   11f10:	69 f0       	breq	.+26     	; 0x11f2c <GPIB+0x16c>
   11f12:	90 e0       	ldi	r25, 0x00	; 0
   11f14:	ed b7       	in	r30, 0x3d	; 61
   11f16:	fe b7       	in	r31, 0x3e	; 62
   11f18:	95 83       	std	Z+5, r25	; 0x05
   11f1a:	84 83       	std	Z+4, r24	; 0x04
   11f1c:	8a e6       	ldi	r24, 0x6A	; 106
   11f1e:	91 e1       	ldi	r25, 0x11	; 17
   11f20:	a0 e0       	ldi	r26, 0x00	; 0
   11f22:	81 83       	std	Z+1, r24	; 0x01
   11f24:	92 83       	std	Z+2, r25	; 0x02
   11f26:	a3 83       	std	Z+3, r26	; 0x03
   11f28:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   11f2c:	80 e0       	ldi	r24, 0x00	; 0
   11f2e:	90 e0       	ldi	r25, 0x00	; 0
   11f30:	0f 90       	pop	r0
   11f32:	0f 90       	pop	r0
   11f34:	0f 90       	pop	r0
   11f36:	0f 90       	pop	r0
   11f38:	0f 90       	pop	r0
   11f3a:	08 95       	ret

00011f3c <GPIB_TALK>:
   11f3c:	cf 93       	push	r28
   11f3e:	df 93       	push	r29
   11f40:	00 d0       	rcall	.+0      	; 0x11f42 <GPIB_TALK+0x6>
   11f42:	00 d0       	rcall	.+0      	; 0x11f44 <GPIB_TALK+0x8>
   11f44:	1f 92       	push	r1
   11f46:	90 91 84 1e 	lds	r25, 0x1E84	; 0x801e84 <talking>
   11f4a:	90 93 87 1e 	sts	0x1E87, r25	; 0x801e87 <talking_last>
   11f4e:	80 93 84 1e 	sts	0x1E84, r24	; 0x801e84 <talking>
   11f52:	8f 35       	cpi	r24, 0x5F	; 95
   11f54:	79 f4       	brne	.+30     	; 0x11f74 <GPIB_TALK+0x38>
   11f56:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   11f5a:	82 ff       	sbrs	r24, 2
   11f5c:	7f c0       	rjmp	.+254    	; 0x1205c <GPIB_TALK+0x120>
   11f5e:	87 e1       	ldi	r24, 0x17	; 23
   11f60:	91 e1       	ldi	r25, 0x11	; 17
   11f62:	a0 e0       	ldi	r26, 0x00	; 0
   11f64:	ed b7       	in	r30, 0x3d	; 61
   11f66:	fe b7       	in	r31, 0x3e	; 62
   11f68:	81 83       	std	Z+1, r24	; 0x01
   11f6a:	92 83       	std	Z+2, r25	; 0x02
   11f6c:	a3 83       	std	Z+3, r26	; 0x03
   11f6e:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   11f72:	74 c0       	rjmp	.+232    	; 0x1205c <GPIB_TALK+0x120>
   11f74:	c8 2f       	mov	r28, r24
   11f76:	d0 e0       	ldi	r29, 0x00	; 0
   11f78:	ce 01       	movw	r24, r28
   11f7a:	dd dc       	rcall	.-1606   	; 0x11936 <SS80_is_MTA>
   11f7c:	89 2b       	or	r24, r25
   11f7e:	e1 f0       	breq	.+56     	; 0x11fb8 <GPIB_TALK+0x7c>
   11f80:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   11f84:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   11f88:	84 72       	andi	r24, 0x24	; 36
   11f8a:	99 27       	eor	r25, r25
   11f8c:	89 2b       	or	r24, r25
   11f8e:	61 f0       	breq	.+24     	; 0x11fa8 <GPIB_TALK+0x6c>
   11f90:	ed b7       	in	r30, 0x3d	; 61
   11f92:	fe b7       	in	r31, 0x3e	; 62
   11f94:	d5 83       	std	Z+5, r29	; 0x05
   11f96:	c4 83       	std	Z+4, r28	; 0x04
   11f98:	86 e0       	ldi	r24, 0x06	; 6
   11f9a:	91 e1       	ldi	r25, 0x11	; 17
   11f9c:	a0 e0       	ldi	r26, 0x00	; 0
   11f9e:	81 83       	std	Z+1, r24	; 0x01
   11fa0:	92 83       	std	Z+2, r25	; 0x02
   11fa2:	a3 83       	std	Z+3, r26	; 0x03
   11fa4:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   11fa8:	80 91 81 1e 	lds	r24, 0x1E81	; 0x801e81 <spoll>
   11fac:	88 23       	and	r24, r24
   11fae:	09 f4       	brne	.+2      	; 0x11fb2 <GPIB_TALK+0x76>
   11fb0:	55 c0       	rjmp	.+170    	; 0x1205c <GPIB_TALK+0x120>
   11fb2:	0e 94 7f ad 	call	0x15afe	; 0x15afe <SS80_Report>
   11fb6:	52 c0       	rjmp	.+164    	; 0x1205c <GPIB_TALK+0x120>
   11fb8:	ce 01       	movw	r24, r28
   11fba:	ea dc       	rcall	.-1580   	; 0x11990 <AMIGO_is_MTA>
   11fbc:	89 2b       	or	r24, r25
   11fbe:	81 f0       	breq	.+32     	; 0x11fe0 <GPIB_TALK+0xa4>
   11fc0:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   11fc4:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   11fc8:	84 72       	andi	r24, 0x24	; 36
   11fca:	99 27       	eor	r25, r25
   11fcc:	89 2b       	or	r24, r25
   11fce:	09 f4       	brne	.+2      	; 0x11fd2 <GPIB_TALK+0x96>
   11fd0:	45 c0       	rjmp	.+138    	; 0x1205c <GPIB_TALK+0x120>
   11fd2:	ed b7       	in	r30, 0x3d	; 61
   11fd4:	fe b7       	in	r31, 0x3e	; 62
   11fd6:	d5 83       	std	Z+5, r29	; 0x05
   11fd8:	c4 83       	std	Z+4, r28	; 0x04
   11fda:	84 ef       	ldi	r24, 0xF4	; 244
   11fdc:	90 e1       	ldi	r25, 0x10	; 16
   11fde:	38 c0       	rjmp	.+112    	; 0x12050 <GPIB_TALK+0x114>
   11fe0:	ce 01       	movw	r24, r28
   11fe2:	03 dd       	rcall	.-1530   	; 0x119ea <PRINTER_is_MTA>
   11fe4:	89 2b       	or	r24, r25
   11fe6:	79 f0       	breq	.+30     	; 0x12006 <GPIB_TALK+0xca>
   11fe8:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   11fec:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   11ff0:	84 72       	andi	r24, 0x24	; 36
   11ff2:	99 27       	eor	r25, r25
   11ff4:	89 2b       	or	r24, r25
   11ff6:	91 f1       	breq	.+100    	; 0x1205c <GPIB_TALK+0x120>
   11ff8:	ed b7       	in	r30, 0x3d	; 61
   11ffa:	fe b7       	in	r31, 0x3e	; 62
   11ffc:	d5 83       	std	Z+5, r29	; 0x05
   11ffe:	c4 83       	std	Z+4, r28	; 0x04
   12000:	80 ee       	ldi	r24, 0xE0	; 224
   12002:	90 e1       	ldi	r25, 0x10	; 16
   12004:	25 c0       	rjmp	.+74     	; 0x12050 <GPIB_TALK+0x114>
   12006:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <listening>
   1200a:	90 e0       	ldi	r25, 0x00	; 0
   1200c:	df dc       	rcall	.-1602   	; 0x119cc <PRINTER_is_MLA>
   1200e:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   12012:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   12016:	89 2b       	or	r24, r25
   12018:	99 f0       	breq	.+38     	; 0x12040 <GPIB_TALK+0x104>
   1201a:	24 72       	andi	r18, 0x24	; 36
   1201c:	33 27       	eor	r19, r19
   1201e:	23 2b       	or	r18, r19
   12020:	51 f0       	breq	.+20     	; 0x12036 <GPIB_TALK+0xfa>
   12022:	80 ed       	ldi	r24, 0xD0	; 208
   12024:	90 e1       	ldi	r25, 0x10	; 16
   12026:	a0 e0       	ldi	r26, 0x00	; 0
   12028:	ed b7       	in	r30, 0x3d	; 61
   1202a:	fe b7       	in	r31, 0x3e	; 62
   1202c:	81 83       	std	Z+1, r24	; 0x01
   1202e:	92 83       	std	Z+2, r25	; 0x02
   12030:	a3 83       	std	Z+3, r26	; 0x03
   12032:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   12036:	80 e0       	ldi	r24, 0x00	; 0
   12038:	90 e0       	ldi	r25, 0x00	; 0
   1203a:	0e 94 c6 be 	call	0x17d8c	; 0x17d8c <printer_open>
   1203e:	0e c0       	rjmp	.+28     	; 0x1205c <GPIB_TALK+0x120>
   12040:	22 ff       	sbrs	r18, 2
   12042:	0c c0       	rjmp	.+24     	; 0x1205c <GPIB_TALK+0x120>
   12044:	ed b7       	in	r30, 0x3d	; 61
   12046:	fe b7       	in	r31, 0x3e	; 62
   12048:	d5 83       	std	Z+5, r29	; 0x05
   1204a:	c4 83       	std	Z+4, r28	; 0x04
   1204c:	84 ec       	ldi	r24, 0xC4	; 196
   1204e:	90 e1       	ldi	r25, 0x10	; 16
   12050:	a0 e0       	ldi	r26, 0x00	; 0
   12052:	81 83       	std	Z+1, r24	; 0x01
   12054:	92 83       	std	Z+2, r25	; 0x02
   12056:	a3 83       	std	Z+3, r26	; 0x03
   12058:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   1205c:	80 e0       	ldi	r24, 0x00	; 0
   1205e:	90 e0       	ldi	r25, 0x00	; 0
   12060:	cd b7       	in	r28, 0x3d	; 61
   12062:	de b7       	in	r29, 0x3e	; 62
   12064:	25 96       	adiw	r28, 0x05	; 5
   12066:	e2 e0       	ldi	r30, 0x02	; 2
   12068:	0c 94 f4 e3 	jmp	0x1c7e8	; 0x1c7e8 <__epilogue_restores__+0x20>

0001206c <GPIB_SECONDARY_ADDRESS>:
   1206c:	a9 e0       	ldi	r26, 0x09	; 9
   1206e:	b0 e0       	ldi	r27, 0x00	; 0
   12070:	ec e3       	ldi	r30, 0x3C	; 60
   12072:	f0 e9       	ldi	r31, 0x90	; 144
   12074:	0c 94 d7 e3 	jmp	0x1c7ae	; 0x1c7ae <__prologue_saves__+0x1e>
   12078:	18 2f       	mov	r17, r24
   1207a:	c8 2f       	mov	r28, r24
   1207c:	d0 e0       	ldi	r29, 0x00	; 0
   1207e:	ce 01       	movw	r24, r28
   12080:	69 dc       	rcall	.-1838   	; 0x11954 <SS80_is_MSA>
   12082:	89 2b       	or	r24, r25
   12084:	09 f1       	breq	.+66     	; 0x120c8 <GPIB_SECONDARY_ADDRESS+0x5c>
   12086:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1208a:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1208e:	84 72       	andi	r24, 0x24	; 36
   12090:	99 27       	eor	r25, r25
   12092:	89 2b       	or	r24, r25
   12094:	61 f0       	breq	.+24     	; 0x120ae <GPIB_SECONDARY_ADDRESS+0x42>
   12096:	ed b7       	in	r30, 0x3d	; 61
   12098:	fe b7       	in	r31, 0x3e	; 62
   1209a:	d5 83       	std	Z+5, r29	; 0x05
   1209c:	c4 83       	std	Z+4, r28	; 0x04
   1209e:	83 eb       	ldi	r24, 0xB3	; 179
   120a0:	90 e1       	ldi	r25, 0x10	; 16
   120a2:	a0 e0       	ldi	r26, 0x00	; 0
   120a4:	81 83       	std	Z+1, r24	; 0x01
   120a6:	92 83       	std	Z+2, r25	; 0x02
   120a8:	a3 83       	std	Z+3, r26	; 0x03
   120aa:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   120ae:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80p>
   120b2:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80p+0x1>
   120b6:	81 81       	ldd	r24, Z+1	; 0x01
   120b8:	90 e0       	ldi	r25, 0x00	; 0
   120ba:	0e 94 a6 86 	call	0x10d4c	; 0x10d4c <gpib_disable_PPR>
   120be:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80p>
   120c2:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80p+0x1>
   120c6:	25 c0       	rjmp	.+74     	; 0x12112 <GPIB_SECONDARY_ADDRESS+0xa6>
   120c8:	ce 01       	movw	r24, r28
   120ca:	71 dc       	rcall	.-1822   	; 0x119ae <AMIGO_is_MSA>
   120cc:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   120d0:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   120d4:	89 2b       	or	r24, r25
   120d6:	11 f1       	breq	.+68     	; 0x1211c <GPIB_SECONDARY_ADDRESS+0xb0>
   120d8:	c9 01       	movw	r24, r18
   120da:	84 72       	andi	r24, 0x24	; 36
   120dc:	99 27       	eor	r25, r25
   120de:	89 2b       	or	r24, r25
   120e0:	61 f0       	breq	.+24     	; 0x120fa <GPIB_SECONDARY_ADDRESS+0x8e>
   120e2:	ed b7       	in	r30, 0x3d	; 61
   120e4:	fe b7       	in	r31, 0x3e	; 62
   120e6:	d5 83       	std	Z+5, r29	; 0x05
   120e8:	c4 83       	std	Z+4, r28	; 0x04
   120ea:	81 ea       	ldi	r24, 0xA1	; 161
   120ec:	90 e1       	ldi	r25, 0x10	; 16
   120ee:	a0 e0       	ldi	r26, 0x00	; 0
   120f0:	81 83       	std	Z+1, r24	; 0x01
   120f2:	92 83       	std	Z+2, r25	; 0x02
   120f4:	a3 83       	std	Z+3, r26	; 0x03
   120f6:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   120fa:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOp>
   120fe:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOp+0x1>
   12102:	81 81       	ldd	r24, Z+1	; 0x01
   12104:	90 e0       	ldi	r25, 0x00	; 0
   12106:	0e 94 a6 86 	call	0x10d4c	; 0x10d4c <gpib_disable_PPR>
   1210a:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOp>
   1210e:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOp+0x1>
   12112:	64 81       	ldd	r22, Z+4	; 0x04
   12114:	75 81       	ldd	r23, Z+5	; 0x05
   12116:	81 2f       	mov	r24, r17
   12118:	f3 dd       	rcall	.-1050   	; 0x11d00 <Send_Identify>
   1211a:	1d c0       	rjmp	.+58     	; 0x12156 <GPIB_SECONDARY_ADDRESS+0xea>
   1211c:	c9 01       	movw	r24, r18
   1211e:	84 72       	andi	r24, 0x24	; 36
   12120:	99 27       	eor	r25, r25
   12122:	00 97       	sbiw	r24, 0x00	; 0
   12124:	c1 f0       	breq	.+48     	; 0x12156 <GPIB_SECONDARY_ADDRESS+0xea>
   12126:	80 91 84 1e 	lds	r24, 0x1E84	; 0x801e84 <talking>
   1212a:	90 e0       	ldi	r25, 0x00	; 0
   1212c:	ed b7       	in	r30, 0x3d	; 61
   1212e:	fe b7       	in	r31, 0x3e	; 62
   12130:	91 87       	std	Z+9, r25	; 0x09
   12132:	80 87       	std	Z+8, r24	; 0x08
   12134:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <listening>
   12138:	90 e0       	ldi	r25, 0x00	; 0
   1213a:	97 83       	std	Z+7, r25	; 0x07
   1213c:	86 83       	std	Z+6, r24	; 0x06
   1213e:	d5 83       	std	Z+5, r29	; 0x05
   12140:	c4 83       	std	Z+4, r28	; 0x04
   12142:	8b e7       	ldi	r24, 0x7B	; 123
   12144:	90 e1       	ldi	r25, 0x10	; 16
   12146:	a0 e0       	ldi	r26, 0x00	; 0
   12148:	81 83       	std	Z+1, r24	; 0x01
   1214a:	92 83       	std	Z+2, r25	; 0x02
   1214c:	a3 83       	std	Z+3, r26	; 0x03
   1214e:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   12152:	80 e0       	ldi	r24, 0x00	; 0
   12154:	90 e0       	ldi	r25, 0x00	; 0
   12156:	cd b7       	in	r28, 0x3d	; 61
   12158:	de b7       	in	r29, 0x3e	; 62
   1215a:	29 96       	adiw	r28, 0x09	; 9
   1215c:	e3 e0       	ldi	r30, 0x03	; 3
   1215e:	0c 94 f3 e3 	jmp	0x1c7e6	; 0x1c7e6 <__epilogue_restores__+0x1e>

00012162 <listen_cleanup>:
   12162:	00 d0       	rcall	.+0      	; 0x12164 <listen_cleanup+0x2>
   12164:	1f 92       	push	r1
   12166:	60 91 80 1e 	lds	r22, 0x1E80	; 0x801e80 <listening_last>
   1216a:	66 23       	and	r22, r22
   1216c:	e1 f0       	breq	.+56     	; 0x121a6 <listen_cleanup+0x44>
   1216e:	70 e0       	ldi	r23, 0x00	; 0
   12170:	40 e2       	ldi	r20, 0x20	; 32
   12172:	50 e0       	ldi	r21, 0x00	; 0
   12174:	84 e0       	ldi	r24, 0x04	; 4
   12176:	90 e0       	ldi	r25, 0x00	; 0
   12178:	96 d2       	rcall	.+1324   	; 0x126a6 <find_device>
   1217a:	01 96       	adiw	r24, 0x01	; 1
   1217c:	a1 f0       	breq	.+40     	; 0x121a6 <listen_cleanup+0x44>
   1217e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   12182:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   12186:	84 72       	andi	r24, 0x24	; 36
   12188:	99 27       	eor	r25, r25
   1218a:	89 2b       	or	r24, r25
   1218c:	51 f0       	breq	.+20     	; 0x121a2 <listen_cleanup+0x40>
   1218e:	8a e6       	ldi	r24, 0x6A	; 106
   12190:	90 e1       	ldi	r25, 0x10	; 16
   12192:	a0 e0       	ldi	r26, 0x00	; 0
   12194:	ed b7       	in	r30, 0x3d	; 61
   12196:	fe b7       	in	r31, 0x3e	; 62
   12198:	81 83       	std	Z+1, r24	; 0x01
   1219a:	92 83       	std	Z+2, r25	; 0x02
   1219c:	a3 83       	std	Z+3, r26	; 0x03
   1219e:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   121a2:	0e 94 6e be 	call	0x17cdc	; 0x17cdc <printer_close>
   121a6:	0f 90       	pop	r0
   121a8:	0f 90       	pop	r0
   121aa:	0f 90       	pop	r0
   121ac:	08 95       	ret

000121ae <GPIB_LISTEN>:
   121ae:	cf 93       	push	r28
   121b0:	df 93       	push	r29
   121b2:	00 d0       	rcall	.+0      	; 0x121b4 <GPIB_LISTEN+0x6>
   121b4:	00 d0       	rcall	.+0      	; 0x121b6 <GPIB_LISTEN+0x8>
   121b6:	1f 92       	push	r1
   121b8:	c8 2f       	mov	r28, r24
   121ba:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <listening>
   121be:	80 93 80 1e 	sts	0x1E80, r24	; 0x801e80 <listening_last>
   121c2:	c0 93 86 1e 	sts	0x1E86, r28	; 0x801e86 <listening>
   121c6:	cd df       	rcall	.-102    	; 0x12162 <listen_cleanup>
   121c8:	cf 33       	cpi	r28, 0x3F	; 63
   121ca:	19 f5       	brne	.+70     	; 0x12212 <GPIB_LISTEN+0x64>
   121cc:	10 92 86 1e 	sts	0x1E86, r1	; 0x801e86 <listening>
   121d0:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   121d4:	82 ff       	sbrs	r24, 2
   121d6:	74 c0       	rjmp	.+232    	; 0x122c0 <GPIB_LISTEN+0x112>
   121d8:	83 e6       	ldi	r24, 0x63	; 99
   121da:	91 e1       	ldi	r25, 0x11	; 17
   121dc:	a0 e0       	ldi	r26, 0x00	; 0
   121de:	ed b7       	in	r30, 0x3d	; 61
   121e0:	fe b7       	in	r31, 0x3e	; 62
   121e2:	81 83       	std	Z+1, r24	; 0x01
   121e4:	92 83       	std	Z+2, r25	; 0x02
   121e6:	a3 83       	std	Z+3, r26	; 0x03
   121e8:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   121ec:	80 91 7e 1c 	lds	r24, 0x1C7E	; 0x801c7e <lastcmd>
   121f0:	90 91 7f 1c 	lds	r25, 0x1C7F	; 0x801c7f <lastcmd+0x1>
   121f4:	8f 35       	cpi	r24, 0x5F	; 95
   121f6:	91 05       	cpc	r25, r1
   121f8:	09 f0       	breq	.+2      	; 0x121fc <GPIB_LISTEN+0x4e>
   121fa:	62 c0       	rjmp	.+196    	; 0x122c0 <GPIB_LISTEN+0x112>
   121fc:	81 e6       	ldi	r24, 0x61	; 97
   121fe:	91 e1       	ldi	r25, 0x11	; 17
   12200:	a0 e0       	ldi	r26, 0x00	; 0
   12202:	ed b7       	in	r30, 0x3d	; 61
   12204:	fe b7       	in	r31, 0x3e	; 62
   12206:	81 83       	std	Z+1, r24	; 0x01
   12208:	92 83       	std	Z+2, r25	; 0x02
   1220a:	a3 83       	std	Z+3, r26	; 0x03
   1220c:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   12210:	57 c0       	rjmp	.+174    	; 0x122c0 <GPIB_LISTEN+0x112>
   12212:	d0 e0       	ldi	r29, 0x00	; 0
   12214:	ce 01       	movw	r24, r28
   12216:	ad db       	rcall	.-2214   	; 0x11972 <AMIGO_is_MLA>
   12218:	89 2b       	or	r24, r25
   1221a:	81 f0       	breq	.+32     	; 0x1223c <GPIB_LISTEN+0x8e>
   1221c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   12220:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   12224:	84 72       	andi	r24, 0x24	; 36
   12226:	99 27       	eor	r25, r25
   12228:	89 2b       	or	r24, r25
   1222a:	09 f4       	brne	.+2      	; 0x1222e <GPIB_LISTEN+0x80>
   1222c:	49 c0       	rjmp	.+146    	; 0x122c0 <GPIB_LISTEN+0x112>
   1222e:	ed b7       	in	r30, 0x3d	; 61
   12230:	fe b7       	in	r31, 0x3e	; 62
   12232:	d5 83       	std	Z+5, r29	; 0x05
   12234:	c4 83       	std	Z+4, r28	; 0x04
   12236:	8f e4       	ldi	r24, 0x4F	; 79
   12238:	91 e1       	ldi	r25, 0x11	; 17
   1223a:	3c c0       	rjmp	.+120    	; 0x122b4 <GPIB_LISTEN+0x106>
   1223c:	ce 01       	movw	r24, r28
   1223e:	6c db       	rcall	.-2344   	; 0x11918 <SS80_is_MLA>
   12240:	89 2b       	or	r24, r25
   12242:	79 f0       	breq	.+30     	; 0x12262 <GPIB_LISTEN+0xb4>
   12244:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   12248:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1224c:	84 72       	andi	r24, 0x24	; 36
   1224e:	99 27       	eor	r25, r25
   12250:	89 2b       	or	r24, r25
   12252:	b1 f1       	breq	.+108    	; 0x122c0 <GPIB_LISTEN+0x112>
   12254:	ed b7       	in	r30, 0x3d	; 61
   12256:	fe b7       	in	r31, 0x3e	; 62
   12258:	d5 83       	std	Z+5, r29	; 0x05
   1225a:	c4 83       	std	Z+4, r28	; 0x04
   1225c:	8e e3       	ldi	r24, 0x3E	; 62
   1225e:	91 e1       	ldi	r25, 0x11	; 17
   12260:	29 c0       	rjmp	.+82     	; 0x122b4 <GPIB_LISTEN+0x106>
   12262:	ce 01       	movw	r24, r28
   12264:	b3 db       	rcall	.-2202   	; 0x119cc <PRINTER_is_MLA>
   12266:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   1226a:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1226e:	89 2b       	or	r24, r25
   12270:	c9 f0       	breq	.+50     	; 0x122a4 <GPIB_LISTEN+0xf6>
   12272:	24 72       	andi	r18, 0x24	; 36
   12274:	33 27       	eor	r19, r19
   12276:	23 2b       	or	r18, r19
   12278:	61 f0       	breq	.+24     	; 0x12292 <GPIB_LISTEN+0xe4>
   1227a:	ed b7       	in	r30, 0x3d	; 61
   1227c:	fe b7       	in	r31, 0x3e	; 62
   1227e:	d5 83       	std	Z+5, r29	; 0x05
   12280:	c4 83       	std	Z+4, r28	; 0x04
   12282:	8a e2       	ldi	r24, 0x2A	; 42
   12284:	91 e1       	ldi	r25, 0x11	; 17
   12286:	a0 e0       	ldi	r26, 0x00	; 0
   12288:	81 83       	std	Z+1, r24	; 0x01
   1228a:	92 83       	std	Z+2, r25	; 0x02
   1228c:	a3 83       	std	Z+3, r26	; 0x03
   1228e:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   12292:	80 91 84 1e 	lds	r24, 0x1E84	; 0x801e84 <talking>
   12296:	8f 35       	cpi	r24, 0x5F	; 95
   12298:	99 f0       	breq	.+38     	; 0x122c0 <GPIB_LISTEN+0x112>
   1229a:	80 e0       	ldi	r24, 0x00	; 0
   1229c:	90 e0       	ldi	r25, 0x00	; 0
   1229e:	0e 94 c6 be 	call	0x17d8c	; 0x17d8c <printer_open>
   122a2:	0e c0       	rjmp	.+28     	; 0x122c0 <GPIB_LISTEN+0x112>
   122a4:	22 ff       	sbrs	r18, 2
   122a6:	0c c0       	rjmp	.+24     	; 0x122c0 <GPIB_LISTEN+0x112>
   122a8:	ed b7       	in	r30, 0x3d	; 61
   122aa:	fe b7       	in	r31, 0x3e	; 62
   122ac:	d5 83       	std	Z+5, r29	; 0x05
   122ae:	c4 83       	std	Z+4, r28	; 0x04
   122b0:	8e e1       	ldi	r24, 0x1E	; 30
   122b2:	91 e1       	ldi	r25, 0x11	; 17
   122b4:	a0 e0       	ldi	r26, 0x00	; 0
   122b6:	81 83       	std	Z+1, r24	; 0x01
   122b8:	92 83       	std	Z+2, r25	; 0x02
   122ba:	a3 83       	std	Z+3, r26	; 0x03
   122bc:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   122c0:	80 e0       	ldi	r24, 0x00	; 0
   122c2:	90 e0       	ldi	r25, 0x00	; 0
   122c4:	cd b7       	in	r28, 0x3d	; 61
   122c6:	de b7       	in	r29, 0x3e	; 62
   122c8:	25 96       	adiw	r28, 0x05	; 5
   122ca:	e2 e0       	ldi	r30, 0x02	; 2
   122cc:	0c 94 f4 e3 	jmp	0x1c7e8	; 0x1c7e8 <__epilogue_restores__+0x20>

000122d0 <gpib_task>:
   122d0:	cf 93       	push	r28
   122d2:	df 93       	push	r29
   122d4:	0e 94 43 86 	call	0x10c86	; 0x10c86 <gpib_state_init>
   122d8:	97 db       	rcall	.-2258   	; 0x11a08 <gpib_init_devices>
   122da:	10 92 fc 18 	sts	0x18FC, r1	; 0x8018fc <gpib_log_fp+0x1>
   122de:	10 92 fb 18 	sts	0x18FB, r1	; 0x8018fb <gpib_log_fp>
   122e2:	80 e0       	ldi	r24, 0x00	; 0
   122e4:	90 e0       	ldi	r25, 0x00	; 0
   122e6:	da d8       	rcall	.-3660   	; 0x1149c <gpib_read_byte>
   122e8:	ec 01       	movw	r28, r24
   122ea:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   122ee:	83 ff       	sbrs	r24, 3
   122f0:	02 c0       	rjmp	.+4      	; 0x122f6 <gpib_task+0x26>
   122f2:	ce 01       	movw	r24, r28
   122f4:	a9 d9       	rcall	.-3246   	; 0x11648 <gpib_decode>
   122f6:	ce 01       	movw	r24, r28
   122f8:	22 dc       	rcall	.-1980   	; 0x11b3e <gpib_error_test>
   122fa:	9c 01       	movw	r18, r24
   122fc:	23 70       	andi	r18, 0x03	; 3
   122fe:	33 27       	eor	r19, r19
   12300:	23 2b       	or	r18, r19
   12302:	09 f0       	breq	.+2      	; 0x12306 <gpib_task+0x36>
   12304:	43 c0       	rjmp	.+134    	; 0x1238c <gpib_task+0xbc>
   12306:	89 2b       	or	r24, r25
   12308:	61 f7       	brne	.-40     	; 0x122e2 <gpib_task+0x12>
   1230a:	d2 ff       	sbrs	r29, 2
   1230c:	26 c0       	rjmp	.+76     	; 0x1235a <gpib_task+0x8a>
   1230e:	8c 2f       	mov	r24, r28
   12310:	8f 77       	andi	r24, 0x7F	; 127
   12312:	80 32       	cpi	r24, 0x20	; 32
   12314:	10 f4       	brcc	.+4      	; 0x1231a <gpib_task+0x4a>
   12316:	54 dd       	rcall	.-1368   	; 0x11dc0 <GPIB>
   12318:	e4 cf       	rjmp	.-56     	; 0x122e2 <gpib_task+0x12>
   1231a:	90 ee       	ldi	r25, 0xE0	; 224
   1231c:	98 0f       	add	r25, r24
   1231e:	90 32       	cpi	r25, 0x20	; 32
   12320:	10 f4       	brcc	.+4      	; 0x12326 <gpib_task+0x56>
   12322:	45 df       	rcall	.-374    	; 0x121ae <GPIB_LISTEN>
   12324:	de cf       	rjmp	.-68     	; 0x122e2 <gpib_task+0x12>
   12326:	90 ec       	ldi	r25, 0xC0	; 192
   12328:	98 0f       	add	r25, r24
   1232a:	90 32       	cpi	r25, 0x20	; 32
   1232c:	10 f4       	brcc	.+4      	; 0x12332 <gpib_task+0x62>
   1232e:	06 de       	rcall	.-1012   	; 0x11f3c <GPIB_TALK>
   12330:	d8 cf       	rjmp	.-80     	; 0x122e2 <gpib_task+0x12>
   12332:	90 91 86 1e 	lds	r25, 0x1E86	; 0x801e86 <listening>
   12336:	99 23       	and	r25, r25
   12338:	59 f0       	breq	.+22     	; 0x12350 <gpib_task+0x80>
   1233a:	20 91 7e 1c 	lds	r18, 0x1C7E	; 0x801c7e <lastcmd>
   1233e:	30 91 7f 1c 	lds	r19, 0x1C7F	; 0x801c7f <lastcmd+0x1>
   12342:	2f 35       	cpi	r18, 0x5F	; 95
   12344:	31 05       	cpc	r19, r1
   12346:	21 f4       	brne	.+8      	; 0x12350 <gpib_task+0x80>
   12348:	10 92 85 1e 	sts	0x1E85, r1	; 0x801e85 <secondary>
   1234c:	8f de       	rcall	.-738    	; 0x1206c <GPIB_SECONDARY_ADDRESS>
   1234e:	c9 cf       	rjmp	.-110    	; 0x122e2 <gpib_task+0x12>
   12350:	80 93 85 1e 	sts	0x1E85, r24	; 0x801e85 <secondary>
   12354:	60 e0       	ldi	r22, 0x00	; 0
   12356:	90 e0       	ldi	r25, 0x00	; 0
   12358:	12 c0       	rjmp	.+36     	; 0x1237e <gpib_task+0xae>
   1235a:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <listening>
   1235e:	90 e0       	ldi	r25, 0x00	; 0
   12360:	35 db       	rcall	.-2454   	; 0x119cc <PRINTER_is_MLA>
   12362:	89 2b       	or	r24, r25
   12364:	29 f0       	breq	.+10     	; 0x12370 <gpib_task+0xa0>
   12366:	ce 01       	movw	r24, r28
   12368:	99 27       	eor	r25, r25
   1236a:	0e 94 69 bf 	call	0x17ed2	; 0x17ed2 <printer_buffer>
   1236e:	b9 cf       	rjmp	.-142    	; 0x122e2 <gpib_task+0x12>
   12370:	80 91 85 1e 	lds	r24, 0x1E85	; 0x801e85 <secondary>
   12374:	88 23       	and	r24, r24
   12376:	09 f4       	brne	.+2      	; 0x1237a <gpib_task+0xaa>
   12378:	b4 cf       	rjmp	.-152    	; 0x122e2 <gpib_task+0x12>
   1237a:	61 e0       	ldi	r22, 0x01	; 1
   1237c:	ce 01       	movw	r24, r28
   1237e:	6c dc       	rcall	.-1832   	; 0x11c58 <GPIB_COMMANDS>
   12380:	de db       	rcall	.-2116   	; 0x11b3e <gpib_error_test>
   12382:	83 70       	andi	r24, 0x03	; 3
   12384:	99 27       	eor	r25, r25
   12386:	89 2b       	or	r24, r25
   12388:	09 f4       	brne	.+2      	; 0x1238c <gpib_task+0xbc>
   1238a:	ab cf       	rjmp	.-170    	; 0x122e2 <gpib_task+0x12>
   1238c:	df 91       	pop	r29
   1238e:	cf 91       	pop	r28
   12390:	08 95       	ret

00012392 <talk_cleanup>:
   12392:	08 95       	ret

00012394 <gpib_help>:
///  Help Menu for User invoked GPIB functions and tasks
///  See: int gpib_tests(char *str)
/// @return  void

void gpib_help(int full)
{
   12394:	cf 93       	push	r28
   12396:	df 93       	push	r29
   12398:	00 d0       	rcall	.+0      	; 0x1239a <gpib_help+0x6>
   1239a:	1f 92       	push	r1
   1239c:	ec 01       	movw	r28, r24
    printf("gpib help\n");
   1239e:	86 ed       	ldi	r24, 0xD6	; 214
   123a0:	93 e1       	ldi	r25, 0x13	; 19
   123a2:	a0 e0       	ldi	r26, 0x00	; 0
   123a4:	ed b7       	in	r30, 0x3d	; 61
   123a6:	fe b7       	in	r31, 0x3e	; 62
   123a8:	81 83       	std	Z+1, r24	; 0x01
   123aa:	92 83       	std	Z+2, r25	; 0x02
   123ac:	a3 83       	std	Z+3, r26	; 0x03
   123ae:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    if(full)
   123b2:	cd 2b       	or	r28, r29
   123b4:	51 f0       	breq	.+20     	; 0x123ca <gpib_help+0x36>
    {
        printf("gpib prefix is optional\n"
   123b6:	8c e1       	ldi	r24, 0x1C	; 28
   123b8:	93 e1       	ldi	r25, 0x13	; 19
   123ba:	a0 e0       	ldi	r26, 0x00	; 0
   123bc:	ed b7       	in	r30, 0x3d	; 61
   123be:	fe b7       	in	r31, 0x3e	; 62
   123c0:	81 83       	std	Z+1, r24	; 0x01
   123c2:	92 83       	std	Z+2, r25	; 0x02
   123c4:	a3 83       	std	Z+3, r26	; 0x03
   123c6:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
            "gpib ppr_set XX\n"
#endif
            "\n"
            );
    }
}
   123ca:	cd b7       	in	r28, 0x3d	; 61
   123cc:	de b7       	in	r29, 0x3e	; 62
   123ce:	23 96       	adiw	r28, 0x03	; 3
   123d0:	e2 e0       	ldi	r30, 0x02	; 2
   123d2:	0c 94 f4 e3 	jmp	0x1c7e8	; 0x1c7e8 <__epilogue_restores__+0x20>

000123d6 <gpib_tests>:

/// @brief GPIB user tests
///  User invoked GPIB functions and tasks
/// @return  1 matched token, 0 if not
int gpib_tests(int argc, char * argv[])
{
   123d6:	ef 92       	push	r14
   123d8:	ff 92       	push	r15
   123da:	0f 93       	push	r16
   123dc:	1f 93       	push	r17
   123de:	cf 93       	push	r28
   123e0:	df 93       	push	r29
   123e2:	00 d0       	rcall	.+0      	; 0x123e4 <gpib_tests+0xe>
   123e4:	00 d0       	rcall	.+0      	; 0x123e6 <gpib_tests+0x10>
   123e6:	1f 92       	push	r1
   123e8:	8c 01       	movw	r16, r24

    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   123ea:	fb 01       	movw	r30, r22
   123ec:	80 81       	ld	r24, Z
   123ee:	91 81       	ldd	r25, Z+1	; 0x01

    // skip optional gpib key word
    if( !ptr || !MATCH(ptr,"gpib") )
   123f0:	00 97       	sbiw	r24, 0x00	; 0
   123f2:	19 f4       	brne	.+6      	; 0x123fa <gpib_tests+0x24>
        return(0);
   123f4:	80 e0       	ldi	r24, 0x00	; 0
   123f6:	90 e0       	ldi	r25, 0x00	; 0
   123f8:	a8 c0       	rjmp	.+336    	; 0x1254a <gpib_tests+0x174>
   123fa:	7b 01       	movw	r14, r22

    ind = 0;
    ptr = argv[ind++];

    // skip optional gpib key word
    if( !ptr || !MATCH(ptr,"gpib") )
   123fc:	61 ed       	ldi	r22, 0xD1	; 209
   123fe:	7c e0       	ldi	r23, 0x0C	; 12
   12400:	0e 94 2d 33 	call	0x665a	; 0x665a <MATCH>
   12404:	89 2b       	or	r24, r25
   12406:	b1 f3       	breq	.-20     	; 0x123f4 <gpib_tests+0x1e>
        return(0);

    ptr = argv[ind++];
   12408:	f7 01       	movw	r30, r14
   1240a:	c2 81       	ldd	r28, Z+2	; 0x02
   1240c:	d3 81       	ldd	r29, Z+3	; 0x03
    if ( !ptr || MATCH(ptr,"help") )
   1240e:	20 97       	sbiw	r28, 0x00	; 0
   12410:	21 f4       	brne	.+8      	; 0x1241a <gpib_tests+0x44>
    {
        gpib_help(1);
   12412:	81 e0       	ldi	r24, 0x01	; 1
   12414:	90 e0       	ldi	r25, 0x00	; 0
   12416:	be df       	rcall	.-132    	; 0x12394 <gpib_help>
   12418:	96 c0       	rjmp	.+300    	; 0x12546 <gpib_tests+0x170>
    // skip optional gpib key word
    if( !ptr || !MATCH(ptr,"gpib") )
        return(0);

    ptr = argv[ind++];
    if ( !ptr || MATCH(ptr,"help") )
   1241a:	6c eb       	ldi	r22, 0xBC	; 188
   1241c:	75 e1       	ldi	r23, 0x15	; 21
   1241e:	ce 01       	movw	r24, r28
   12420:	0e 94 2d 33 	call	0x665a	; 0x665a <MATCH>
   12424:	89 2b       	or	r24, r25
   12426:	a9 f7       	brne	.-22     	; 0x12412 <gpib_tests+0x3c>
    {
        gpib_help(1);
        return(1);
    }

    if (MATCHARGS(ptr,"addresses",(ind+0),argc))
   12428:	98 01       	movw	r18, r16
   1242a:	42 e0       	ldi	r20, 0x02	; 2
   1242c:	50 e0       	ldi	r21, 0x00	; 0
   1242e:	66 ed       	ldi	r22, 0xD6	; 214
   12430:	7c e0       	ldi	r23, 0x0C	; 12
   12432:	ce 01       	movw	r24, r28
   12434:	0e 94 41 33 	call	0x6682	; 0x6682 <MATCHARGS>
   12438:	89 2b       	or	r24, r25
   1243a:	19 f0       	breq	.+6      	; 0x12442 <gpib_tests+0x6c>
    {
        display_Addresses();
   1243c:	0e 94 1b 9e 	call	0x13c36	; 0x13c36 <display_Addresses>
   12440:	82 c0       	rjmp	.+260    	; 0x12546 <gpib_tests+0x170>
        return(1);
    }

    if (MATCHARGS(ptr,"config",(ind+0),argc))
   12442:	98 01       	movw	r18, r16
   12444:	42 e0       	ldi	r20, 0x02	; 2
   12446:	50 e0       	ldi	r21, 0x00	; 0
   12448:	60 ee       	ldi	r22, 0xE0	; 224
   1244a:	7c e0       	ldi	r23, 0x0C	; 12
   1244c:	ce 01       	movw	r24, r28
   1244e:	0e 94 41 33 	call	0x6682	; 0x6682 <MATCHARGS>
   12452:	89 2b       	or	r24, r25
   12454:	19 f0       	breq	.+6      	; 0x1245c <gpib_tests+0x86>
    {
        display_Config();
   12456:	0e 94 20 9f 	call	0x13e40	; 0x13e40 <display_Config>
   1245a:	75 c0       	rjmp	.+234    	; 0x12546 <gpib_tests+0x170>
        return(1);
    }

    if (MATCHARGS(ptr,"debug", (ind+1) ,argc))
   1245c:	98 01       	movw	r18, r16
   1245e:	43 e0       	ldi	r20, 0x03	; 3
   12460:	50 e0       	ldi	r21, 0x00	; 0
   12462:	67 ee       	ldi	r22, 0xE7	; 231
   12464:	7c e0       	ldi	r23, 0x0C	; 12
   12466:	ce 01       	movw	r24, r28
   12468:	0e 94 41 33 	call	0x6682	; 0x6682 <MATCHARGS>
   1246c:	89 2b       	or	r24, r25
   1246e:	b1 f0       	breq	.+44     	; 0x1249c <gpib_tests+0xc6>
    {
        debuglevel = get_value(argv[ind]);
   12470:	f7 01       	movw	r30, r14
   12472:	84 81       	ldd	r24, Z+4	; 0x04
   12474:	95 81       	ldd	r25, Z+5	; 0x05
   12476:	0e 94 38 34 	call	0x6870	; 0x6870 <get_value>
   1247a:	70 93 c4 01 	sts	0x01C4, r23	; 0x8001c4 <debuglevel+0x1>
   1247e:	60 93 c3 01 	sts	0x01C3, r22	; 0x8001c3 <debuglevel>
        printf("debug=%04XH\n", debuglevel);
   12482:	ed b7       	in	r30, 0x3d	; 61
   12484:	fe b7       	in	r31, 0x3e	; 62
   12486:	75 83       	std	Z+5, r23	; 0x05
   12488:	64 83       	std	Z+4, r22	; 0x04
   1248a:	8f e0       	ldi	r24, 0x0F	; 15
   1248c:	93 e1       	ldi	r25, 0x13	; 19
   1248e:	a0 e0       	ldi	r26, 0x00	; 0
   12490:	81 83       	std	Z+1, r24	; 0x01
   12492:	92 83       	std	Z+2, r25	; 0x02
   12494:	a3 83       	std	Z+3, r26	; 0x03
   12496:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   1249a:	55 c0       	rjmp	.+170    	; 0x12546 <gpib_tests+0x170>
        return(1);
    }

    if (MATCHARGS(ptr,"elapsed_reset",(ind+0),argc))
   1249c:	98 01       	movw	r18, r16
   1249e:	42 e0       	ldi	r20, 0x02	; 2
   124a0:	50 e0       	ldi	r21, 0x00	; 0
   124a2:	6d ee       	ldi	r22, 0xED	; 237
   124a4:	7c e0       	ldi	r23, 0x0C	; 12
   124a6:	ce 01       	movw	r24, r28
   124a8:	0e 94 41 33 	call	0x6682	; 0x6682 <MATCHARGS>
   124ac:	89 2b       	or	r24, r25
   124ae:	19 f0       	breq	.+6      	; 0x124b6 <gpib_tests+0xe0>
    {
        gpib_timer_elapsed_begin();
   124b0:	0e 94 ae 85 	call	0x10b5c	; 0x10b5c <gpib_timer_elapsed_begin>
   124b4:	48 c0       	rjmp	.+144    	; 0x12546 <gpib_tests+0x170>
        return(1);
    }

    if (MATCHARGS(ptr,"elapsed",(ind+0),argc))
   124b6:	98 01       	movw	r18, r16
   124b8:	42 e0       	ldi	r20, 0x02	; 2
   124ba:	50 e0       	ldi	r21, 0x00	; 0
   124bc:	6b ef       	ldi	r22, 0xFB	; 251
   124be:	7c e0       	ldi	r23, 0x0C	; 12
   124c0:	ce 01       	movw	r24, r28
   124c2:	0e 94 41 33 	call	0x6682	; 0x6682 <MATCHARGS>
   124c6:	89 2b       	or	r24, r25
   124c8:	29 f0       	breq	.+10     	; 0x124d4 <gpib_tests+0xfe>
    {
        gpib_timer_elapsed_end("gpib elapsed:");
   124ca:	83 e0       	ldi	r24, 0x03	; 3
   124cc:	9d e0       	ldi	r25, 0x0D	; 13
   124ce:	0e 94 c0 85 	call	0x10b80	; 0x10b80 <gpib_timer_elapsed_end>
   124d2:	39 c0       	rjmp	.+114    	; 0x12546 <gpib_tests+0x170>
        return(1);
    }

    if ( MATCHARGS(ptr, "ifc",(ind+0),argc))
   124d4:	98 01       	movw	r18, r16
   124d6:	42 e0       	ldi	r20, 0x02	; 2
   124d8:	50 e0       	ldi	r21, 0x00	; 0
   124da:	61 e1       	ldi	r22, 0x11	; 17
   124dc:	7d e0       	ldi	r23, 0x0D	; 13
   124de:	ce 01       	movw	r24, r28
   124e0:	0e 94 41 33 	call	0x6682	; 0x6682 <MATCHARGS>
   124e4:	89 2b       	or	r24, r25
   124e6:	19 f0       	breq	.+6      	; 0x124ee <gpib_tests+0x118>
    {
        gpib_assert_ifc();
   124e8:	0e 94 dc 86 	call	0x10db8	; 0x10db8 <gpib_assert_ifc>
   124ec:	2c c0       	rjmp	.+88     	; 0x12546 <gpib_tests+0x170>
        return(1);

    }

    if (MATCHARGS(ptr,"task",(ind+0),argc))
   124ee:	98 01       	movw	r18, r16
   124f0:	42 e0       	ldi	r20, 0x02	; 2
   124f2:	50 e0       	ldi	r21, 0x00	; 0
   124f4:	65 e1       	ldi	r22, 0x15	; 21
   124f6:	7d e0       	ldi	r23, 0x0D	; 13
   124f8:	ce 01       	movw	r24, r28
   124fa:	0e 94 41 33 	call	0x6682	; 0x6682 <MATCHARGS>
   124fe:	89 2b       	or	r24, r25
    {
        gpib_task();
   12500:	11 f0       	breq	.+4      	; 0x12506 <gpib_tests+0x130>
   12502:	e6 de       	rcall	.-564    	; 0x122d0 <gpib_task>
   12504:	20 c0       	rjmp	.+64     	; 0x12546 <gpib_tests+0x170>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
   12506:	98 01       	movw	r18, r16
   12508:	43 e0       	ldi	r20, 0x03	; 3
   1250a:	50 e0       	ldi	r21, 0x00	; 0
   1250c:	6a e1       	ldi	r22, 0x1A	; 26
   1250e:	7d e0       	ldi	r23, 0x0D	; 13
   12510:	ce 01       	movw	r24, r28
   12512:	0e 94 41 33 	call	0x6682	; 0x6682 <MATCHARGS>
   12516:	89 2b       	or	r24, r25
   12518:	09 f4       	brne	.+2      	; 0x1251c <gpib_tests+0x146>
   1251a:	6c cf       	rjmp	.-296    	; 0x123f4 <gpib_tests+0x1e>
    {
        int detail = 0;
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
   1251c:	f7 01       	movw	r30, r14
   1251e:	86 81       	ldd	r24, Z+6	; 0x06
   12520:	97 81       	ldd	r25, Z+7	; 0x07
   12522:	00 97       	sbiw	r24, 0x00	; 0
   12524:	51 f0       	breq	.+20     	; 0x1253a <gpib_tests+0x164>
   12526:	60 e2       	ldi	r22, 0x20	; 32
   12528:	7d e0       	ldi	r23, 0x0D	; 13
   1252a:	0e 94 2d 33 	call	0x665a	; 0x665a <MATCH>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
    {
        int detail = 0;
   1252e:	61 e0       	ldi	r22, 0x01	; 1
   12530:	70 e0       	ldi	r23, 0x00	; 0
   12532:	89 2b       	or	r24, r25
   12534:	21 f4       	brne	.+8      	; 0x1253e <gpib_tests+0x168>
   12536:	60 e0       	ldi	r22, 0x00	; 0
   12538:	02 c0       	rjmp	.+4      	; 0x1253e <gpib_tests+0x168>
   1253a:	60 e0       	ldi	r22, 0x00	; 0
   1253c:	70 e0       	ldi	r23, 0x00	; 0
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
            detail = 1;
        gpib_trace_task(argv[ind], detail);
   1253e:	f7 01       	movw	r30, r14
   12540:	84 81       	ldd	r24, Z+4	; 0x04
   12542:	95 81       	ldd	r25, Z+5	; 0x05
   12544:	69 da       	rcall	.-2862   	; 0x11a18 <gpib_trace_task>
        return(1);
   12546:	81 e0       	ldi	r24, 0x01	; 1
   12548:	90 e0       	ldi	r25, 0x00	; 0

	} // port write 
#endif  // #ifdef GPIB_EXTENDED_TESTS

    return(0);
}
   1254a:	cd b7       	in	r28, 0x3d	; 61
   1254c:	de b7       	in	r29, 0x3e	; 62
   1254e:	25 96       	adiw	r28, 0x05	; 5
   12550:	e6 e0       	ldi	r30, 0x06	; 6
   12552:	0c 94 f0 e3 	jmp	0x1c7e0	; 0x1c7e0 <__epilogue_restores__+0x18>

00012556 <V2B_MSB>:
   12556:	0f 93       	push	r16
   12558:	1f 93       	push	r17
   1255a:	da 01       	movw	r26, r20
   1255c:	11 97       	sbiw	r26, 0x01	; 1
   1255e:	b7 fd       	sbrc	r27, 7
   12560:	0b c0       	rjmp	.+22     	; 0x12578 <V2B_MSB+0x22>
   12562:	fd 01       	movw	r30, r26
   12564:	e6 0f       	add	r30, r22
   12566:	f7 1f       	adc	r31, r23
   12568:	e8 0f       	add	r30, r24
   1256a:	f9 1f       	adc	r31, r25
   1256c:	00 83       	st	Z, r16
   1256e:	01 2f       	mov	r16, r17
   12570:	12 2f       	mov	r17, r18
   12572:	23 2f       	mov	r18, r19
   12574:	33 27       	eor	r19, r19
   12576:	f2 cf       	rjmp	.-28     	; 0x1255c <V2B_MSB+0x6>
   12578:	1f 91       	pop	r17
   1257a:	0f 91       	pop	r16
   1257c:	08 95       	ret

0001257e <V2B_LSB>:
   1257e:	0f 93       	push	r16
   12580:	1f 93       	push	r17
   12582:	fc 01       	movw	r30, r24
   12584:	e6 0f       	add	r30, r22
   12586:	f7 1f       	adc	r31, r23
   12588:	bf 01       	movw	r22, r30
   1258a:	cf 01       	movw	r24, r30
   1258c:	86 1b       	sub	r24, r22
   1258e:	97 0b       	sbc	r25, r23
   12590:	84 17       	cp	r24, r20
   12592:	95 07       	cpc	r25, r21
   12594:	34 f4       	brge	.+12     	; 0x125a2 <V2B_LSB+0x24>
   12596:	01 93       	st	Z+, r16
   12598:	01 2f       	mov	r16, r17
   1259a:	12 2f       	mov	r17, r18
   1259c:	23 2f       	mov	r18, r19
   1259e:	33 27       	eor	r19, r19
   125a0:	f4 cf       	rjmp	.-24     	; 0x1258a <V2B_LSB+0xc>
   125a2:	1f 91       	pop	r17
   125a4:	0f 91       	pop	r16
   125a6:	08 95       	ret

000125a8 <B2V_MSB>:
   125a8:	cf 92       	push	r12
   125aa:	df 92       	push	r13
   125ac:	ef 92       	push	r14
   125ae:	ff 92       	push	r15
   125b0:	fc 01       	movw	r30, r24
   125b2:	e6 0f       	add	r30, r22
   125b4:	f7 1f       	adc	r31, r23
   125b6:	60 e0       	ldi	r22, 0x00	; 0
   125b8:	70 e0       	ldi	r23, 0x00	; 0
   125ba:	cb 01       	movw	r24, r22
   125bc:	df 01       	movw	r26, r30
   125be:	9f 01       	movw	r18, r30
   125c0:	2a 1b       	sub	r18, r26
   125c2:	3b 0b       	sbc	r19, r27
   125c4:	24 17       	cp	r18, r20
   125c6:	35 07       	cpc	r19, r21
   125c8:	4c f4       	brge	.+18     	; 0x125dc <B2V_MSB+0x34>
   125ca:	cc 24       	eor	r12, r12
   125cc:	d6 2e       	mov	r13, r22
   125ce:	e7 2e       	mov	r14, r23
   125d0:	f8 2e       	mov	r15, r24
   125d2:	21 91       	ld	r18, Z+
   125d4:	c7 01       	movw	r24, r14
   125d6:	b6 01       	movw	r22, r12
   125d8:	62 2b       	or	r22, r18
   125da:	f1 cf       	rjmp	.-30     	; 0x125be <B2V_MSB+0x16>
   125dc:	ff 90       	pop	r15
   125de:	ef 90       	pop	r14
   125e0:	df 90       	pop	r13
   125e2:	cf 90       	pop	r12
   125e4:	08 95       	ret

000125e6 <B2V_LSB>:
   125e6:	cf 92       	push	r12
   125e8:	df 92       	push	r13
   125ea:	ef 92       	push	r14
   125ec:	ff 92       	push	r15
   125ee:	9c 01       	movw	r18, r24
   125f0:	db 01       	movw	r26, r22
   125f2:	60 e0       	ldi	r22, 0x00	; 0
   125f4:	70 e0       	ldi	r23, 0x00	; 0
   125f6:	cb 01       	movw	r24, r22
   125f8:	41 50       	subi	r20, 0x01	; 1
   125fa:	51 09       	sbc	r21, r1
   125fc:	57 fd       	sbrc	r21, 7
   125fe:	0e c0       	rjmp	.+28     	; 0x1261c <B2V_LSB+0x36>
   12600:	cc 24       	eor	r12, r12
   12602:	d6 2e       	mov	r13, r22
   12604:	e7 2e       	mov	r14, r23
   12606:	f8 2e       	mov	r15, r24
   12608:	fa 01       	movw	r30, r20
   1260a:	ea 0f       	add	r30, r26
   1260c:	fb 1f       	adc	r31, r27
   1260e:	e2 0f       	add	r30, r18
   12610:	f3 1f       	adc	r31, r19
   12612:	e0 81       	ld	r30, Z
   12614:	c7 01       	movw	r24, r14
   12616:	b6 01       	movw	r22, r12
   12618:	6e 2b       	or	r22, r30
   1261a:	ee cf       	rjmp	.-36     	; 0x125f8 <B2V_LSB+0x12>
   1261c:	ff 90       	pop	r15
   1261e:	ef 90       	pop	r14
   12620:	df 90       	pop	r13
   12622:	cf 90       	pop	r12
   12624:	08 95       	ret

00012626 <find_type>:
   12626:	ea e8       	ldi	r30, 0x8A	; 138
   12628:	fe e1       	ldi	r31, 0x1E	; 30
   1262a:	20 e0       	ldi	r18, 0x00	; 0
   1262c:	30 e0       	ldi	r19, 0x00	; 0
   1262e:	40 81       	ld	r20, Z
   12630:	50 e0       	ldi	r21, 0x00	; 0
   12632:	48 17       	cp	r20, r24
   12634:	59 07       	cpc	r21, r25
   12636:	49 f0       	breq	.+18     	; 0x1264a <find_type+0x24>
   12638:	2f 5f       	subi	r18, 0xFF	; 255
   1263a:	3f 4f       	sbci	r19, 0xFF	; 255
   1263c:	bb 96       	adiw	r30, 0x2b	; 43
   1263e:	2c 30       	cpi	r18, 0x0C	; 12
   12640:	31 05       	cpc	r19, r1
   12642:	a9 f7       	brne	.-22     	; 0x1262e <find_type+0x8>
   12644:	8f ef       	ldi	r24, 0xFF	; 255
   12646:	9f ef       	ldi	r25, 0xFF	; 255
   12648:	08 95       	ret
   1264a:	c9 01       	movw	r24, r18
   1264c:	08 95       	ret

0001264e <count_drive_types>:
   1264e:	28 2f       	mov	r18, r24
   12650:	ea e8       	ldi	r30, 0x8A	; 138
   12652:	fe e1       	ldi	r31, 0x1E	; 30
   12654:	80 e0       	ldi	r24, 0x00	; 0
   12656:	90 e0       	ldi	r25, 0x00	; 0
   12658:	30 81       	ld	r19, Z
   1265a:	32 13       	cpse	r19, r18
   1265c:	01 c0       	rjmp	.+2      	; 0x12660 <count_drive_types+0x12>
   1265e:	01 96       	adiw	r24, 0x01	; 1
   12660:	bb 96       	adiw	r30, 0x2b	; 43
   12662:	30 e2       	ldi	r19, 0x20	; 32
   12664:	ee 38       	cpi	r30, 0x8E	; 142
   12666:	f3 07       	cpc	r31, r19
   12668:	b9 f7       	brne	.-18     	; 0x12658 <count_drive_types+0xa>
   1266a:	08 95       	ret

0001266c <type_to_str>:
   1266c:	00 97       	sbiw	r24, 0x00	; 0
   1266e:	59 f0       	breq	.+22     	; 0x12686 <type_to_str+0x1a>
   12670:	81 30       	cpi	r24, 0x01	; 1
   12672:	91 05       	cpc	r25, r1
   12674:	59 f0       	breq	.+22     	; 0x1268c <type_to_str+0x20>
   12676:	83 30       	cpi	r24, 0x03	; 3
   12678:	91 05       	cpc	r25, r1
   1267a:	59 f0       	breq	.+22     	; 0x12692 <type_to_str+0x26>
   1267c:	04 97       	sbiw	r24, 0x04	; 4
   1267e:	61 f0       	breq	.+24     	; 0x12698 <type_to_str+0x2c>
   12680:	8e e4       	ldi	r24, 0x4E	; 78
   12682:	9d e0       	ldi	r25, 0x0D	; 13
   12684:	08 95       	ret
   12686:	84 e2       	ldi	r24, 0x24	; 36
   12688:	9d e0       	ldi	r25, 0x0D	; 13
   1268a:	08 95       	ret
   1268c:	8c e2       	ldi	r24, 0x2C	; 44
   1268e:	9d e0       	ldi	r25, 0x0D	; 13
   12690:	08 95       	ret
   12692:	84 e4       	ldi	r24, 0x44	; 68
   12694:	9d e0       	ldi	r25, 0x0D	; 13
   12696:	08 95       	ret
   12698:	87 e3       	ldi	r24, 0x37	; 55
   1269a:	9d e0       	ldi	r25, 0x0D	; 13
   1269c:	08 95       	ret

0001269e <find_free>:
   1269e:	80 e0       	ldi	r24, 0x00	; 0
   126a0:	90 e0       	ldi	r25, 0x00	; 0
   126a2:	c1 cf       	rjmp	.-126    	; 0x12626 <find_type>
   126a4:	08 95       	ret

000126a6 <find_device>:
   126a6:	9b 01       	movw	r18, r22
   126a8:	20 52       	subi	r18, 0x20	; 32
   126aa:	31 09       	sbc	r19, r1
   126ac:	2f 35       	cpi	r18, 0x5F	; 95
   126ae:	31 05       	cpc	r19, r1
   126b0:	f8 f4       	brcc	.+62     	; 0x126f0 <find_device+0x4a>
   126b2:	64 17       	cp	r22, r20
   126b4:	75 07       	cpc	r23, r21
   126b6:	e4 f0       	brlt	.+56     	; 0x126f0 <find_device+0x4a>
   126b8:	9a 01       	movw	r18, r20
   126ba:	22 5e       	subi	r18, 0xE2	; 226
   126bc:	3f 4f       	sbci	r19, 0xFF	; 255
   126be:	26 17       	cp	r18, r22
   126c0:	37 07       	cpc	r19, r23
   126c2:	b4 f0       	brlt	.+44     	; 0x126f0 <find_device+0x4a>
   126c4:	64 1b       	sub	r22, r20
   126c6:	75 0b       	sbc	r23, r21
   126c8:	ea e8       	ldi	r30, 0x8A	; 138
   126ca:	fe e1       	ldi	r31, 0x1E	; 30
   126cc:	20 e0       	ldi	r18, 0x00	; 0
   126ce:	30 e0       	ldi	r19, 0x00	; 0
   126d0:	40 81       	ld	r20, Z
   126d2:	50 e0       	ldi	r21, 0x00	; 0
   126d4:	48 17       	cp	r20, r24
   126d6:	59 07       	cpc	r21, r25
   126d8:	29 f4       	brne	.+10     	; 0x126e4 <find_device+0x3e>
   126da:	41 81       	ldd	r20, Z+1	; 0x01
   126dc:	50 e0       	ldi	r21, 0x00	; 0
   126de:	64 17       	cp	r22, r20
   126e0:	75 07       	cpc	r23, r21
   126e2:	49 f0       	breq	.+18     	; 0x126f6 <find_device+0x50>
   126e4:	2f 5f       	subi	r18, 0xFF	; 255
   126e6:	3f 4f       	sbci	r19, 0xFF	; 255
   126e8:	bb 96       	adiw	r30, 0x2b	; 43
   126ea:	2c 30       	cpi	r18, 0x0C	; 12
   126ec:	31 05       	cpc	r19, r1
   126ee:	81 f7       	brne	.-32     	; 0x126d0 <find_device+0x2a>
   126f0:	8f ef       	ldi	r24, 0xFF	; 255
   126f2:	9f ef       	ldi	r25, 0xFF	; 255
   126f4:	08 95       	ret
   126f6:	c9 01       	movw	r24, r18
   126f8:	08 95       	ret

000126fa <set_active_device>:
   126fa:	a9 e0       	ldi	r26, 0x09	; 9
   126fc:	b0 e0       	ldi	r27, 0x00	; 0
   126fe:	e3 e8       	ldi	r30, 0x83	; 131
   12700:	f3 e9       	ldi	r31, 0x93	; 147
   12702:	0c 94 d6 e3 	jmp	0x1c7ac	; 0x1c7ac <__prologue_saves__+0x1c>
   12706:	8f 3f       	cpi	r24, 0xFF	; 255
   12708:	2f ef       	ldi	r18, 0xFF	; 255
   1270a:	92 07       	cpc	r25, r18
   1270c:	09 f4       	brne	.+2      	; 0x12710 <set_active_device+0x16>
   1270e:	d0 c0       	rjmp	.+416    	; 0x128b0 <set_active_device+0x1b6>
   12710:	ec 01       	movw	r28, r24
   12712:	0c 97       	sbiw	r24, 0x0c	; 12
   12714:	b0 f0       	brcs	.+44     	; 0x12742 <set_active_device+0x48>
   12716:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   1271a:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1271e:	c9 01       	movw	r24, r18
   12720:	81 70       	andi	r24, 0x01	; 1
   12722:	99 27       	eor	r25, r25
   12724:	20 ff       	sbrs	r18, 0
   12726:	c6 c0       	rjmp	.+396    	; 0x128b4 <set_active_device+0x1ba>
   12728:	ed b7       	in	r30, 0x3d	; 61
   1272a:	fe b7       	in	r31, 0x3e	; 62
   1272c:	d5 83       	std	Z+5, r29	; 0x05
   1272e:	c4 83       	std	Z+4, r28	; 0x04
   12730:	80 ee       	ldi	r24, 0xE0	; 224
   12732:	9e e1       	ldi	r25, 0x1E	; 30
   12734:	a0 e0       	ldi	r26, 0x00	; 0
   12736:	81 83       	std	Z+1, r24	; 0x01
   12738:	92 83       	std	Z+2, r25	; 0x02
   1273a:	a3 83       	std	Z+3, r26	; 0x03
   1273c:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   12740:	b7 c0       	rjmp	.+366    	; 0x128b0 <set_active_device+0x1b6>
   12742:	8b e2       	ldi	r24, 0x2B	; 43
   12744:	8c 9f       	mul	r24, r28
   12746:	f0 01       	movw	r30, r0
   12748:	8d 9f       	mul	r24, r29
   1274a:	f0 0d       	add	r31, r0
   1274c:	11 24       	eor	r1, r1
   1274e:	e6 57       	subi	r30, 0x76	; 118
   12750:	f1 4e       	sbci	r31, 0xE1	; 225
   12752:	21 81       	ldd	r18, Z+1	; 0x01
   12754:	2f 31       	cpi	r18, 0x1F	; 31
   12756:	d0 f0       	brcs	.+52     	; 0x1278c <set_active_device+0x92>
   12758:	40 91 c3 01 	lds	r20, 0x01C3	; 0x8001c3 <debuglevel>
   1275c:	50 91 c4 01 	lds	r21, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   12760:	ca 01       	movw	r24, r20
   12762:	81 70       	andi	r24, 0x01	; 1
   12764:	99 27       	eor	r25, r25
   12766:	40 ff       	sbrs	r20, 0
   12768:	a5 c0       	rjmp	.+330    	; 0x128b4 <set_active_device+0x1ba>
   1276a:	82 2f       	mov	r24, r18
   1276c:	90 e0       	ldi	r25, 0x00	; 0
   1276e:	ed b7       	in	r30, 0x3d	; 61
   12770:	fe b7       	in	r31, 0x3e	; 62
   12772:	97 83       	std	Z+7, r25	; 0x07
   12774:	86 83       	std	Z+6, r24	; 0x06
   12776:	d5 83       	std	Z+5, r29	; 0x05
   12778:	c4 83       	std	Z+4, r28	; 0x04
   1277a:	87 ea       	ldi	r24, 0xA7	; 167
   1277c:	9e e1       	ldi	r25, 0x1E	; 30
   1277e:	a0 e0       	ldi	r26, 0x00	; 0
   12780:	81 83       	std	Z+1, r24	; 0x01
   12782:	92 83       	std	Z+2, r25	; 0x02
   12784:	a3 83       	std	Z+3, r26	; 0x03
   12786:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   1278a:	92 c0       	rjmp	.+292    	; 0x128b0 <set_active_device+0x1b6>
   1278c:	20 81       	ld	r18, Z
   1278e:	02 2f       	mov	r16, r18
   12790:	10 e0       	ldi	r17, 0x00	; 0
   12792:	87 a1       	ldd	r24, Z+39	; 0x27
   12794:	90 a5       	ldd	r25, Z+40	; 0x28
   12796:	00 97       	sbiw	r24, 0x00	; 0
   12798:	b1 f4       	brne	.+44     	; 0x127c6 <set_active_device+0xcc>
   1279a:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   1279e:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   127a2:	c9 01       	movw	r24, r18
   127a4:	81 70       	andi	r24, 0x01	; 1
   127a6:	99 27       	eor	r25, r25
   127a8:	20 ff       	sbrs	r18, 0
   127aa:	84 c0       	rjmp	.+264    	; 0x128b4 <set_active_device+0x1ba>
   127ac:	c8 01       	movw	r24, r16
   127ae:	5e df       	rcall	.-324    	; 0x1266c <type_to_str>
   127b0:	ed b7       	in	r30, 0x3d	; 61
   127b2:	fe b7       	in	r31, 0x3e	; 62
   127b4:	91 87       	std	Z+9, r25	; 0x09
   127b6:	80 87       	std	Z+8, r24	; 0x08
   127b8:	17 83       	std	Z+7, r17	; 0x07
   127ba:	06 83       	std	Z+6, r16	; 0x06
   127bc:	d5 83       	std	Z+5, r29	; 0x05
   127be:	c4 83       	std	Z+4, r28	; 0x04
   127c0:	82 e7       	ldi	r24, 0x72	; 114
   127c2:	9e e1       	ldi	r25, 0x1E	; 30
   127c4:	6f c0       	rjmp	.+222    	; 0x128a4 <set_active_device+0x1aa>
   127c6:	01 15       	cp	r16, r1
   127c8:	11 05       	cpc	r17, r1
   127ca:	b9 f4       	brne	.+46     	; 0x127fa <set_active_device+0x100>
   127cc:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   127d0:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   127d4:	c9 01       	movw	r24, r18
   127d6:	81 70       	andi	r24, 0x01	; 1
   127d8:	99 27       	eor	r25, r25
   127da:	20 ff       	sbrs	r18, 0
   127dc:	6b c0       	rjmp	.+214    	; 0x128b4 <set_active_device+0x1ba>
   127de:	80 e0       	ldi	r24, 0x00	; 0
   127e0:	90 e0       	ldi	r25, 0x00	; 0
   127e2:	44 df       	rcall	.-376    	; 0x1266c <type_to_str>
   127e4:	ed b7       	in	r30, 0x3d	; 61
   127e6:	fe b7       	in	r31, 0x3e	; 62
   127e8:	91 87       	std	Z+9, r25	; 0x09
   127ea:	80 87       	std	Z+8, r24	; 0x08
   127ec:	17 82       	std	Z+7, r1	; 0x07
   127ee:	16 82       	std	Z+6, r1	; 0x06
   127f0:	d5 83       	std	Z+5, r29	; 0x05
   127f2:	c4 83       	std	Z+4, r28	; 0x04
   127f4:	8d e3       	ldi	r24, 0x3D	; 61
   127f6:	9e e1       	ldi	r25, 0x1E	; 30
   127f8:	55 c0       	rjmp	.+170    	; 0x128a4 <set_active_device+0x1aa>
   127fa:	04 30       	cpi	r16, 0x04	; 4
   127fc:	11 05       	cpc	r17, r1
   127fe:	29 f4       	brne	.+10     	; 0x1280a <set_active_device+0x110>
   12800:	90 93 08 19 	sts	0x1908, r25	; 0x801908 <PRINTERp+0x1>
   12804:	80 93 07 19 	sts	0x1907, r24	; 0x801907 <PRINTERp>
   12808:	35 c0       	rjmp	.+106    	; 0x12874 <set_active_device+0x17a>
   1280a:	2d 7f       	andi	r18, 0xFD	; 253
   1280c:	21 30       	cpi	r18, 0x01	; 1
   1280e:	a9 f5       	brne	.+106    	; 0x1287a <set_active_device+0x180>
   12810:	21 a5       	ldd	r18, Z+41	; 0x29
   12812:	32 a5       	ldd	r19, Z+42	; 0x2a
   12814:	21 15       	cp	r18, r1
   12816:	31 05       	cpc	r19, r1
   12818:	b1 f4       	brne	.+44     	; 0x12846 <set_active_device+0x14c>
   1281a:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   1281e:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   12822:	c9 01       	movw	r24, r18
   12824:	81 70       	andi	r24, 0x01	; 1
   12826:	99 27       	eor	r25, r25
   12828:	20 ff       	sbrs	r18, 0
   1282a:	44 c0       	rjmp	.+136    	; 0x128b4 <set_active_device+0x1ba>
   1282c:	c8 01       	movw	r24, r16
   1282e:	1e df       	rcall	.-452    	; 0x1266c <type_to_str>
   12830:	ed b7       	in	r30, 0x3d	; 61
   12832:	fe b7       	in	r31, 0x3e	; 62
   12834:	91 87       	std	Z+9, r25	; 0x09
   12836:	80 87       	std	Z+8, r24	; 0x08
   12838:	17 83       	std	Z+7, r17	; 0x07
   1283a:	06 83       	std	Z+6, r16	; 0x06
   1283c:	d5 83       	std	Z+5, r29	; 0x05
   1283e:	c4 83       	std	Z+4, r28	; 0x04
   12840:	85 e0       	ldi	r24, 0x05	; 5
   12842:	9e e1       	ldi	r25, 0x1E	; 30
   12844:	2f c0       	rjmp	.+94     	; 0x128a4 <set_active_device+0x1aa>
   12846:	01 30       	cpi	r16, 0x01	; 1
   12848:	11 05       	cpc	r17, r1
   1284a:	49 f4       	brne	.+18     	; 0x1285e <set_active_device+0x164>
   1284c:	90 93 02 19 	sts	0x1902, r25	; 0x801902 <AMIGOp+0x1>
   12850:	80 93 01 19 	sts	0x1901, r24	; 0x801901 <AMIGOp>
   12854:	30 93 00 19 	sts	0x1900, r19	; 0x801900 <AMIGOs+0x1>
   12858:	20 93 ff 18 	sts	0x18FF, r18	; 0x8018ff <AMIGOs>
   1285c:	0b c0       	rjmp	.+22     	; 0x12874 <set_active_device+0x17a>
   1285e:	03 30       	cpi	r16, 0x03	; 3
   12860:	11 05       	cpc	r17, r1
   12862:	59 f4       	brne	.+22     	; 0x1287a <set_active_device+0x180>
   12864:	90 93 06 19 	sts	0x1906, r25	; 0x801906 <SS80p+0x1>
   12868:	80 93 05 19 	sts	0x1905, r24	; 0x801905 <SS80p>
   1286c:	30 93 04 19 	sts	0x1904, r19	; 0x801904 <SS80s+0x1>
   12870:	20 93 03 19 	sts	0x1903, r18	; 0x801903 <SS80s>
   12874:	81 e0       	ldi	r24, 0x01	; 1
   12876:	90 e0       	ldi	r25, 0x00	; 0
   12878:	1d c0       	rjmp	.+58     	; 0x128b4 <set_active_device+0x1ba>
   1287a:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   1287e:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   12882:	c9 01       	movw	r24, r18
   12884:	81 70       	andi	r24, 0x01	; 1
   12886:	99 27       	eor	r25, r25
   12888:	20 ff       	sbrs	r18, 0
   1288a:	14 c0       	rjmp	.+40     	; 0x128b4 <set_active_device+0x1ba>
   1288c:	c8 01       	movw	r24, r16
   1288e:	ee de       	rcall	.-548    	; 0x1266c <type_to_str>
   12890:	ed b7       	in	r30, 0x3d	; 61
   12892:	fe b7       	in	r31, 0x3e	; 62
   12894:	91 87       	std	Z+9, r25	; 0x09
   12896:	80 87       	std	Z+8, r24	; 0x08
   12898:	17 83       	std	Z+7, r17	; 0x07
   1289a:	06 83       	std	Z+6, r16	; 0x06
   1289c:	d5 83       	std	Z+5, r29	; 0x05
   1289e:	c4 83       	std	Z+4, r28	; 0x04
   128a0:	8a ed       	ldi	r24, 0xDA	; 218
   128a2:	9d e1       	ldi	r25, 0x1D	; 29
   128a4:	a0 e0       	ldi	r26, 0x00	; 0
   128a6:	81 83       	std	Z+1, r24	; 0x01
   128a8:	92 83       	std	Z+2, r25	; 0x02
   128aa:	a3 83       	std	Z+3, r26	; 0x03
   128ac:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   128b0:	80 e0       	ldi	r24, 0x00	; 0
   128b2:	90 e0       	ldi	r25, 0x00	; 0
   128b4:	cd b7       	in	r28, 0x3d	; 61
   128b6:	de b7       	in	r29, 0x3e	; 62
   128b8:	29 96       	adiw	r28, 0x09	; 9
   128ba:	e4 e0       	ldi	r30, 0x04	; 4
   128bc:	0c 94 f2 e3 	jmp	0x1c7e4	; 0x1c7e4 <__epilogue_restores__+0x1c>

000128c0 <SS80_Set_Defaults>:
   128c0:	0f 93       	push	r16
   128c2:	1f 93       	push	r17
   128c4:	cf 93       	push	r28
   128c6:	df 93       	push	r29
   128c8:	ec 01       	movw	r28, r24
   128ca:	82 e0       	ldi	r24, 0x02	; 2
   128cc:	90 e0       	ldi	r25, 0x00	; 0
   128ce:	ab de       	rcall	.-682    	; 0x12626 <find_type>
   128d0:	97 fd       	sbrc	r25, 7
   128d2:	6b c0       	rjmp	.+214    	; 0x129aa <SS80_Set_Defaults+0xea>
   128d4:	2b e2       	ldi	r18, 0x2B	; 43
   128d6:	2c 9f       	mul	r18, r28
   128d8:	f0 01       	movw	r30, r0
   128da:	2d 9f       	mul	r18, r29
   128dc:	f0 0d       	add	r31, r0
   128de:	11 24       	eor	r1, r1
   128e0:	e6 57       	subi	r30, 0x76	; 118
   128e2:	f1 4e       	sbci	r31, 0xE1	; 225
   128e4:	c7 a1       	ldd	r28, Z+39	; 0x27
   128e6:	d0 a5       	ldd	r29, Z+40	; 0x28
   128e8:	28 9f       	mul	r18, r24
   128ea:	f0 01       	movw	r30, r0
   128ec:	29 9f       	mul	r18, r25
   128ee:	f0 0d       	add	r31, r0
   128f0:	11 24       	eor	r1, r1
   128f2:	e6 57       	subi	r30, 0x76	; 118
   128f4:	f1 4e       	sbci	r31, 0xE1	; 225
   128f6:	07 a1       	ldd	r16, Z+39	; 0x27
   128f8:	10 a5       	ldd	r17, Z+40	; 0x28
   128fa:	f8 01       	movw	r30, r16
   128fc:	80 81       	ld	r24, Z
   128fe:	88 83       	st	Y, r24
   12900:	81 81       	ldd	r24, Z+1	; 0x01
   12902:	89 83       	std	Y+1, r24	; 0x01
   12904:	82 81       	ldd	r24, Z+2	; 0x02
   12906:	93 81       	ldd	r25, Z+3	; 0x03
   12908:	0e 94 e3 32 	call	0x65c6	; 0x65c6 <stralloc>
   1290c:	9b 83       	std	Y+3, r25	; 0x03
   1290e:	8a 83       	std	Y+2, r24	; 0x02
   12910:	f8 01       	movw	r30, r16
   12912:	84 81       	ldd	r24, Z+4	; 0x04
   12914:	95 81       	ldd	r25, Z+5	; 0x05
   12916:	9d 83       	std	Y+5, r25	; 0x05
   12918:	8c 83       	std	Y+4, r24	; 0x04
   1291a:	86 81       	ldd	r24, Z+6	; 0x06
   1291c:	97 81       	ldd	r25, Z+7	; 0x07
   1291e:	9f 83       	std	Y+7, r25	; 0x07
   12920:	8e 83       	std	Y+6, r24	; 0x06
   12922:	80 85       	ldd	r24, Z+8	; 0x08
   12924:	91 85       	ldd	r25, Z+9	; 0x09
   12926:	99 87       	std	Y+9, r25	; 0x09
   12928:	88 87       	std	Y+8, r24	; 0x08
   1292a:	82 85       	ldd	r24, Z+10	; 0x0a
   1292c:	8a 87       	std	Y+10, r24	; 0x0a
   1292e:	83 85       	ldd	r24, Z+11	; 0x0b
   12930:	8b 87       	std	Y+11, r24	; 0x0b
   12932:	84 85       	ldd	r24, Z+12	; 0x0c
   12934:	95 85       	ldd	r25, Z+13	; 0x0d
   12936:	a6 85       	ldd	r26, Z+14	; 0x0e
   12938:	b7 85       	ldd	r27, Z+15	; 0x0f
   1293a:	8c 87       	std	Y+12, r24	; 0x0c
   1293c:	9d 87       	std	Y+13, r25	; 0x0d
   1293e:	ae 87       	std	Y+14, r26	; 0x0e
   12940:	bf 87       	std	Y+15, r27	; 0x0f
   12942:	80 89       	ldd	r24, Z+16	; 0x10
   12944:	91 89       	ldd	r25, Z+17	; 0x11
   12946:	99 8b       	std	Y+17, r25	; 0x11
   12948:	88 8b       	std	Y+16, r24	; 0x10
   1294a:	82 89       	ldd	r24, Z+18	; 0x12
   1294c:	8a 8b       	std	Y+18, r24	; 0x12
   1294e:	83 89       	ldd	r24, Z+19	; 0x13
   12950:	8b 8b       	std	Y+19, r24	; 0x13
   12952:	84 89       	ldd	r24, Z+20	; 0x14
   12954:	95 89       	ldd	r25, Z+21	; 0x15
   12956:	9d 8b       	std	Y+21, r25	; 0x15
   12958:	8c 8b       	std	Y+20, r24	; 0x14
   1295a:	86 89       	ldd	r24, Z+22	; 0x16
   1295c:	97 89       	ldd	r25, Z+23	; 0x17
   1295e:	9f 8b       	std	Y+23, r25	; 0x17
   12960:	8e 8b       	std	Y+22, r24	; 0x16
   12962:	80 8d       	ldd	r24, Z+24	; 0x18
   12964:	91 8d       	ldd	r25, Z+25	; 0x19
   12966:	99 8f       	std	Y+25, r25	; 0x19
   12968:	88 8f       	std	Y+24, r24	; 0x18
   1296a:	82 8d       	ldd	r24, Z+26	; 0x1a
   1296c:	93 8d       	ldd	r25, Z+27	; 0x1b
   1296e:	9b 8f       	std	Y+27, r25	; 0x1b
   12970:	8a 8f       	std	Y+26, r24	; 0x1a
   12972:	84 8d       	ldd	r24, Z+28	; 0x1c
   12974:	8c 8f       	std	Y+28, r24	; 0x1c
   12976:	85 8d       	ldd	r24, Z+29	; 0x1d
   12978:	8d 8f       	std	Y+29, r24	; 0x1d
   1297a:	87 8d       	ldd	r24, Z+31	; 0x1f
   1297c:	90 a1       	ldd	r25, Z+32	; 0x20
   1297e:	a1 a1       	ldd	r26, Z+33	; 0x21
   12980:	b2 a1       	ldd	r27, Z+34	; 0x22
   12982:	8f 8f       	std	Y+31, r24	; 0x1f
   12984:	98 a3       	std	Y+32, r25	; 0x20
   12986:	a9 a3       	std	Y+33, r26	; 0x21
   12988:	ba a3       	std	Y+34, r27	; 0x22
   1298a:	83 a1       	ldd	r24, Z+35	; 0x23
   1298c:	8b a3       	std	Y+35, r24	; 0x23
   1298e:	84 a1       	ldd	r24, Z+36	; 0x24
   12990:	95 a1       	ldd	r25, Z+37	; 0x25
   12992:	9d a3       	std	Y+37, r25	; 0x25
   12994:	8c a3       	std	Y+36, r24	; 0x24
   12996:	86 a1       	ldd	r24, Z+38	; 0x26
   12998:	97 a1       	ldd	r25, Z+39	; 0x27
   1299a:	a0 a5       	ldd	r26, Z+40	; 0x28
   1299c:	b1 a5       	ldd	r27, Z+41	; 0x29
   1299e:	8e a3       	std	Y+38, r24	; 0x26
   129a0:	9f a3       	std	Y+39, r25	; 0x27
   129a2:	a8 a7       	std	Y+40, r26	; 0x28
   129a4:	b9 a7       	std	Y+41, r27	; 0x29
   129a6:	82 a5       	ldd	r24, Z+42	; 0x2a
   129a8:	8a a7       	std	Y+42, r24	; 0x2a
   129aa:	df 91       	pop	r29
   129ac:	cf 91       	pop	r28
   129ae:	1f 91       	pop	r17
   129b0:	0f 91       	pop	r16
   129b2:	08 95       	ret

000129b4 <alloc_device>:
   129b4:	0f 93       	push	r16
   129b6:	1f 93       	push	r17
   129b8:	cf 93       	push	r28
   129ba:	df 93       	push	r29
   129bc:	ad b7       	in	r26, 0x3d	; 61
   129be:	be b7       	in	r27, 0x3e	; 62
   129c0:	17 97       	sbiw	r26, 0x07	; 7
   129c2:	0f b6       	in	r0, 0x3f	; 63
   129c4:	f8 94       	cli
   129c6:	be bf       	out	0x3e, r27	; 62
   129c8:	0f be       	out	0x3f, r0	; 63
   129ca:	ad bf       	out	0x3d, r26	; 61
   129cc:	8c 01       	movw	r16, r24
   129ce:	67 de       	rcall	.-818    	; 0x1269e <find_free>
   129d0:	ec 01       	movw	r28, r24
   129d2:	cf 3f       	cpi	r28, 0xFF	; 255
   129d4:	8f ef       	ldi	r24, 0xFF	; 255
   129d6:	d8 07       	cpc	r29, r24
   129d8:	89 f4       	brne	.+34     	; 0x129fc <alloc_device+0x48>
   129da:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   129de:	80 ff       	sbrs	r24, 0
   129e0:	a1 c0       	rjmp	.+322    	; 0x12b24 <alloc_device+0x170>
   129e2:	ed b7       	in	r30, 0x3d	; 61
   129e4:	fe b7       	in	r31, 0x3e	; 62
   129e6:	15 83       	std	Z+5, r17	; 0x05
   129e8:	04 83       	std	Z+4, r16	; 0x04
   129ea:	86 eb       	ldi	r24, 0xB6	; 182
   129ec:	9d e1       	ldi	r25, 0x1D	; 29
   129ee:	a0 e0       	ldi	r26, 0x00	; 0
   129f0:	81 83       	std	Z+1, r24	; 0x01
   129f2:	92 83       	std	Z+2, r25	; 0x02
   129f4:	a3 83       	std	Z+3, r26	; 0x03
   129f6:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   129fa:	94 c0       	rjmp	.+296    	; 0x12b24 <alloc_device+0x170>
   129fc:	02 30       	cpi	r16, 0x02	; 2
   129fe:	11 05       	cpc	r17, r1
   12a00:	e1 f1       	breq	.+120    	; 0x12a7a <alloc_device+0xc6>
   12a02:	ec f4       	brge	.+58     	; 0x12a3e <alloc_device+0x8a>
   12a04:	01 30       	cpi	r16, 0x01	; 1
   12a06:	11 05       	cpc	r17, r1
   12a08:	09 f0       	breq	.+2      	; 0x12a0c <alloc_device+0x58>
   12a0a:	76 c0       	rjmp	.+236    	; 0x12af8 <alloc_device+0x144>
   12a0c:	8b e2       	ldi	r24, 0x2B	; 43
   12a0e:	8c 9f       	mul	r24, r28
   12a10:	80 01       	movw	r16, r0
   12a12:	8d 9f       	mul	r24, r29
   12a14:	10 0d       	add	r17, r0
   12a16:	11 24       	eor	r1, r1
   12a18:	06 57       	subi	r16, 0x76	; 118
   12a1a:	11 4e       	sbci	r17, 0xE1	; 225
   12a1c:	81 e0       	ldi	r24, 0x01	; 1
   12a1e:	f8 01       	movw	r30, r16
   12a20:	80 83       	st	Z, r24
   12a22:	61 e0       	ldi	r22, 0x01	; 1
   12a24:	70 e0       	ldi	r23, 0x00	; 0
   12a26:	85 e1       	ldi	r24, 0x15	; 21
   12a28:	90 e0       	ldi	r25, 0x00	; 0
   12a2a:	0e 94 49 29 	call	0x5292	; 0x5292 <safecalloc>
   12a2e:	f8 01       	movw	r30, r16
   12a30:	90 a7       	std	Z+40, r25	; 0x28
   12a32:	87 a3       	std	Z+39, r24	; 0x27
   12a34:	61 e0       	ldi	r22, 0x01	; 1
   12a36:	70 e0       	ldi	r23, 0x00	; 0
   12a38:	88 e1       	ldi	r24, 0x18	; 24
   12a3a:	90 e0       	ldi	r25, 0x00	; 0
   12a3c:	57 c0       	rjmp	.+174    	; 0x12aec <alloc_device+0x138>
   12a3e:	03 30       	cpi	r16, 0x03	; 3
   12a40:	11 05       	cpc	r17, r1
   12a42:	a1 f1       	breq	.+104    	; 0x12aac <alloc_device+0xf8>
   12a44:	04 30       	cpi	r16, 0x04	; 4
   12a46:	11 05       	cpc	r17, r1
   12a48:	09 f0       	breq	.+2      	; 0x12a4c <alloc_device+0x98>
   12a4a:	56 c0       	rjmp	.+172    	; 0x12af8 <alloc_device+0x144>
   12a4c:	8b e2       	ldi	r24, 0x2B	; 43
   12a4e:	8c 9f       	mul	r24, r28
   12a50:	80 01       	movw	r16, r0
   12a52:	8d 9f       	mul	r24, r29
   12a54:	10 0d       	add	r17, r0
   12a56:	11 24       	eor	r1, r1
   12a58:	06 57       	subi	r16, 0x76	; 118
   12a5a:	11 4e       	sbci	r17, 0xE1	; 225
   12a5c:	84 e0       	ldi	r24, 0x04	; 4
   12a5e:	f8 01       	movw	r30, r16
   12a60:	80 83       	st	Z, r24
   12a62:	61 e0       	ldi	r22, 0x01	; 1
   12a64:	70 e0       	ldi	r23, 0x00	; 0
   12a66:	8b e0       	ldi	r24, 0x0B	; 11
   12a68:	90 e0       	ldi	r25, 0x00	; 0
   12a6a:	0e 94 49 29 	call	0x5292	; 0x5292 <safecalloc>
   12a6e:	f8 01       	movw	r30, r16
   12a70:	90 a7       	std	Z+40, r25	; 0x28
   12a72:	87 a3       	std	Z+39, r24	; 0x27
   12a74:	12 a6       	std	Z+42, r1	; 0x2a
   12a76:	11 a6       	std	Z+41, r1	; 0x29
   12a78:	55 c0       	rjmp	.+170    	; 0x12b24 <alloc_device+0x170>
   12a7a:	8b e2       	ldi	r24, 0x2B	; 43
   12a7c:	8c 9f       	mul	r24, r28
   12a7e:	80 01       	movw	r16, r0
   12a80:	8d 9f       	mul	r24, r29
   12a82:	10 0d       	add	r17, r0
   12a84:	11 24       	eor	r1, r1
   12a86:	06 57       	subi	r16, 0x76	; 118
   12a88:	11 4e       	sbci	r17, 0xE1	; 225
   12a8a:	82 e0       	ldi	r24, 0x02	; 2
   12a8c:	f8 01       	movw	r30, r16
   12a8e:	80 83       	st	Z, r24
   12a90:	61 e0       	ldi	r22, 0x01	; 1
   12a92:	70 e0       	ldi	r23, 0x00	; 0
   12a94:	82 e3       	ldi	r24, 0x32	; 50
   12a96:	90 e0       	ldi	r25, 0x00	; 0
   12a98:	0e 94 49 29 	call	0x5292	; 0x5292 <safecalloc>
   12a9c:	f8 01       	movw	r30, r16
   12a9e:	90 a7       	std	Z+40, r25	; 0x28
   12aa0:	87 a3       	std	Z+39, r24	; 0x27
   12aa2:	61 e0       	ldi	r22, 0x01	; 1
   12aa4:	70 e0       	ldi	r23, 0x00	; 0
   12aa6:	86 e1       	ldi	r24, 0x16	; 22
   12aa8:	90 e0       	ldi	r25, 0x00	; 0
   12aaa:	20 c0       	rjmp	.+64     	; 0x12aec <alloc_device+0x138>
   12aac:	8b e2       	ldi	r24, 0x2B	; 43
   12aae:	8c 9f       	mul	r24, r28
   12ab0:	80 01       	movw	r16, r0
   12ab2:	8d 9f       	mul	r24, r29
   12ab4:	10 0d       	add	r17, r0
   12ab6:	11 24       	eor	r1, r1
   12ab8:	06 57       	subi	r16, 0x76	; 118
   12aba:	11 4e       	sbci	r17, 0xE1	; 225
   12abc:	83 e0       	ldi	r24, 0x03	; 3
   12abe:	f8 01       	movw	r30, r16
   12ac0:	80 83       	st	Z, r24
   12ac2:	61 e0       	ldi	r22, 0x01	; 1
   12ac4:	70 e0       	ldi	r23, 0x00	; 0
   12ac6:	82 e3       	ldi	r24, 0x32	; 50
   12ac8:	90 e0       	ldi	r25, 0x00	; 0
   12aca:	0e 94 49 29 	call	0x5292	; 0x5292 <safecalloc>
   12ace:	f8 01       	movw	r30, r16
   12ad0:	90 a7       	std	Z+40, r25	; 0x28
   12ad2:	87 a3       	std	Z+39, r24	; 0x27
   12ad4:	61 e0       	ldi	r22, 0x01	; 1
   12ad6:	70 e0       	ldi	r23, 0x00	; 0
   12ad8:	86 e1       	ldi	r24, 0x16	; 22
   12ada:	90 e0       	ldi	r25, 0x00	; 0
   12adc:	0e 94 49 29 	call	0x5292	; 0x5292 <safecalloc>
   12ae0:	f8 01       	movw	r30, r16
   12ae2:	92 a7       	std	Z+42, r25	; 0x2a
   12ae4:	81 a7       	std	Z+41, r24	; 0x29
   12ae6:	ce 01       	movw	r24, r28
   12ae8:	eb de       	rcall	.-554    	; 0x128c0 <SS80_Set_Defaults>
   12aea:	1c c0       	rjmp	.+56     	; 0x12b24 <alloc_device+0x170>
   12aec:	0e 94 49 29 	call	0x5292	; 0x5292 <safecalloc>
   12af0:	f8 01       	movw	r30, r16
   12af2:	92 a7       	std	Z+42, r25	; 0x2a
   12af4:	81 a7       	std	Z+41, r24	; 0x29
   12af6:	16 c0       	rjmp	.+44     	; 0x12b24 <alloc_device+0x170>
   12af8:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   12afc:	80 ff       	sbrs	r24, 0
   12afe:	10 c0       	rjmp	.+32     	; 0x12b20 <alloc_device+0x16c>
   12b00:	c8 01       	movw	r24, r16
   12b02:	b4 dd       	rcall	.-1176   	; 0x1266c <type_to_str>
   12b04:	ed b7       	in	r30, 0x3d	; 61
   12b06:	fe b7       	in	r31, 0x3e	; 62
   12b08:	97 83       	std	Z+7, r25	; 0x07
   12b0a:	86 83       	std	Z+6, r24	; 0x06
   12b0c:	15 83       	std	Z+5, r17	; 0x05
   12b0e:	04 83       	std	Z+4, r16	; 0x04
   12b10:	84 e9       	ldi	r24, 0x94	; 148
   12b12:	9d e1       	ldi	r25, 0x1D	; 29
   12b14:	a0 e0       	ldi	r26, 0x00	; 0
   12b16:	81 83       	std	Z+1, r24	; 0x01
   12b18:	92 83       	std	Z+2, r25	; 0x02
   12b1a:	a3 83       	std	Z+3, r26	; 0x03
   12b1c:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   12b20:	cf ef       	ldi	r28, 0xFF	; 255
   12b22:	df ef       	ldi	r29, 0xFF	; 255
   12b24:	ce 01       	movw	r24, r28
   12b26:	cd b7       	in	r28, 0x3d	; 61
   12b28:	de b7       	in	r29, 0x3e	; 62
   12b2a:	27 96       	adiw	r28, 0x07	; 7
   12b2c:	e4 e0       	ldi	r30, 0x04	; 4
   12b2e:	0c 94 f2 e3 	jmp	0x1c7e4	; 0x1c7e4 <__epilogue_restores__+0x1c>

00012b32 <init_Devices>:
   12b32:	cf 93       	push	r28
   12b34:	df 93       	push	r29
   12b36:	10 92 14 19 	sts	0x1914, r1	; 0x801914 <stack_ind+0x1>
   12b3a:	10 92 13 19 	sts	0x1913, r1	; 0x801913 <stack_ind>
   12b3e:	ea e8       	ldi	r30, 0x8A	; 138
   12b40:	fe e1       	ldi	r31, 0x1E	; 30
   12b42:	9f ef       	ldi	r25, 0xFF	; 255
   12b44:	80 e2       	ldi	r24, 0x20	; 32
   12b46:	10 82       	st	Z, r1
   12b48:	11 82       	std	Z+1, r1	; 0x01
   12b4a:	92 83       	std	Z+2, r25	; 0x02
   12b4c:	13 82       	std	Z+3, r1	; 0x03
   12b4e:	14 82       	std	Z+4, r1	; 0x04
   12b50:	15 82       	std	Z+5, r1	; 0x05
   12b52:	16 82       	std	Z+6, r1	; 0x06
   12b54:	df 01       	movw	r26, r30
   12b56:	17 96       	adiw	r26, 0x07	; 7
   12b58:	ed 01       	movw	r28, r26
   12b5a:	28 2f       	mov	r18, r24
   12b5c:	19 92       	st	Y+, r1
   12b5e:	2a 95       	dec	r18
   12b60:	e9 f7       	brne	.-6      	; 0x12b5c <init_Devices+0x2a>
   12b62:	10 a6       	std	Z+40, r1	; 0x28
   12b64:	17 a2       	std	Z+39, r1	; 0x27
   12b66:	12 a6       	std	Z+42, r1	; 0x2a
   12b68:	11 a6       	std	Z+41, r1	; 0x29
   12b6a:	bb 96       	adiw	r30, 0x2b	; 43
   12b6c:	c0 e2       	ldi	r28, 0x20	; 32
   12b6e:	ee 38       	cpi	r30, 0x8E	; 142
   12b70:	fc 07       	cpc	r31, r28
   12b72:	49 f7       	brne	.-46     	; 0x12b46 <init_Devices+0x14>
   12b74:	df 91       	pop	r29
   12b76:	cf 91       	pop	r28
   12b78:	08 95       	ret

00012b7a <push_state>:
   12b7a:	20 91 13 19 	lds	r18, 0x1913	; 0x801913 <stack_ind>
   12b7e:	30 91 14 19 	lds	r19, 0x1914	; 0x801914 <stack_ind+0x1>
   12b82:	25 30       	cpi	r18, 0x05	; 5
   12b84:	31 05       	cpc	r19, r1
   12b86:	7c f4       	brge	.+30     	; 0x12ba6 <push_state+0x2c>
   12b88:	a9 01       	movw	r20, r18
   12b8a:	4f 5f       	subi	r20, 0xFF	; 255
   12b8c:	5f 4f       	sbci	r21, 0xFF	; 255
   12b8e:	50 93 14 19 	sts	0x1914, r21	; 0x801914 <stack_ind+0x1>
   12b92:	40 93 13 19 	sts	0x1913, r20	; 0x801913 <stack_ind>
   12b96:	22 0f       	add	r18, r18
   12b98:	33 1f       	adc	r19, r19
   12b9a:	f9 01       	movw	r30, r18
   12b9c:	e7 5f       	subi	r30, 0xF7	; 247
   12b9e:	f6 4e       	sbci	r31, 0xE6	; 230
   12ba0:	80 83       	st	Z, r24
   12ba2:	91 83       	std	Z+1, r25	; 0x01
   12ba4:	08 95       	ret
   12ba6:	80 e0       	ldi	r24, 0x00	; 0
   12ba8:	90 e0       	ldi	r25, 0x00	; 0
   12baa:	08 95       	ret

00012bac <pop_state>:
   12bac:	80 91 13 19 	lds	r24, 0x1913	; 0x801913 <stack_ind>
   12bb0:	90 91 14 19 	lds	r25, 0x1914	; 0x801914 <stack_ind+0x1>
   12bb4:	18 16       	cp	r1, r24
   12bb6:	19 06       	cpc	r1, r25
   12bb8:	6c f4       	brge	.+26     	; 0x12bd4 <pop_state+0x28>
   12bba:	01 97       	sbiw	r24, 0x01	; 1
   12bbc:	90 93 14 19 	sts	0x1914, r25	; 0x801914 <stack_ind+0x1>
   12bc0:	80 93 13 19 	sts	0x1913, r24	; 0x801913 <stack_ind>
   12bc4:	88 0f       	add	r24, r24
   12bc6:	99 1f       	adc	r25, r25
   12bc8:	fc 01       	movw	r30, r24
   12bca:	e7 5f       	subi	r30, 0xF7	; 247
   12bcc:	f6 4e       	sbci	r31, 0xE6	; 230
   12bce:	80 81       	ld	r24, Z
   12bd0:	91 81       	ldd	r25, Z+1	; 0x01
   12bd2:	08 95       	ret
   12bd4:	80 e0       	ldi	r24, 0x00	; 0
   12bd6:	90 e0       	ldi	r25, 0x00	; 0
   12bd8:	08 95       	ret

00012bda <set_Config_Defaults>:
   12bda:	08 95       	ret

00012bdc <hpdir_set_device>:
///
///@param[in] model: model string
///
///@return 1 on sucess or 0 on fail
void hpdir_set_device(int index)
{
   12bdc:	00 d0       	rcall	.+0      	; 0x12bde <hpdir_set_device+0x2>
   12bde:	1f 92       	push	r1
    SS80DiskType *SS80p = NULL;
#ifdef AMIGO
    AMIGODiskType *AMIGOp = NULL;
#endif
	if(Devices[index].TYPE == SS80_TYPE)
   12be0:	2b e2       	ldi	r18, 0x2B	; 43
   12be2:	28 9f       	mul	r18, r24
   12be4:	f0 01       	movw	r30, r0
   12be6:	29 9f       	mul	r18, r25
   12be8:	f0 0d       	add	r31, r0
   12bea:	11 24       	eor	r1, r1
   12bec:	e6 57       	subi	r30, 0x76	; 118
   12bee:	f1 4e       	sbci	r31, 0xE1	; 225
   12bf0:	20 81       	ld	r18, Z
   12bf2:	23 30       	cpi	r18, 0x03	; 3
   12bf4:	a9 f5       	brne	.+106    	; 0x12c60 <hpdir_set_device+0x84>
	{
		SS80p = (SS80DiskType *) Devices[index].dev;
   12bf6:	07 a0       	ldd	r0, Z+39	; 0x27
   12bf8:	f0 a5       	ldd	r31, Z+40	; 0x28
   12bfa:	e0 2d       	mov	r30, r0
		return;
	}

	if(Devices[index].TYPE == SS80_TYPE)
	{
		SS80p->CONFIG.ID 				= hpdir.ID;
   12bfc:	20 91 0e 21 	lds	r18, 0x210E	; 0x80210e <hpdir+0x80>
   12c00:	30 91 0f 21 	lds	r19, 0x210F	; 0x80210f <hpdir+0x81>
   12c04:	35 83       	std	Z+5, r19	; 0x05
   12c06:	24 83       	std	Z+4, r18	; 0x04
		SS80p->UNIT.DEVICE_NUMBER 		= hpdir.DEVICE_NUMBER;
   12c08:	40 91 1a 21 	lds	r20, 0x211A	; 0x80211a <hpdir+0x8c>
   12c0c:	50 91 1b 21 	lds	r21, 0x211B	; 0x80211b <hpdir+0x8d>
   12c10:	60 91 1c 21 	lds	r22, 0x211C	; 0x80211c <hpdir+0x8e>
   12c14:	70 91 1d 21 	lds	r23, 0x211D	; 0x80211d <hpdir+0x8f>
   12c18:	44 87       	std	Z+12, r20	; 0x0c
   12c1a:	55 87       	std	Z+13, r21	; 0x0d
   12c1c:	66 87       	std	Z+14, r22	; 0x0e
   12c1e:	77 87       	std	Z+15, r23	; 0x0f
		SS80p->UNIT.BYTES_PER_BLOCK 	= hpdir.BYTES_PER_SECTOR;
   12c20:	20 91 2e 21 	lds	r18, 0x212E	; 0x80212e <hpdir+0xa0>
   12c24:	30 91 2f 21 	lds	r19, 0x212F	; 0x80212f <hpdir+0xa1>
   12c28:	31 8b       	std	Z+17, r19	; 0x11
   12c2a:	20 8b       	std	Z+16, r18	; 0x10

		// CHS NOT used in this emulator!
		SS80p->VOLUME.MAX_CYLINDER 		= 0;	// hpdir.CYLINDERS-1;
   12c2c:	17 8e       	std	Z+31, r1	; 0x1f
   12c2e:	10 a2       	std	Z+32, r1	; 0x20
   12c30:	11 a2       	std	Z+33, r1	; 0x21
   12c32:	12 a2       	std	Z+34, r1	; 0x22
		SS80p->VOLUME.MAX_HEAD 			= 0;	// hpdir.HEADS-1;
   12c34:	13 a2       	std	Z+35, r1	; 0x23
		SS80p->VOLUME.MAX_SECTOR 		= 0;	// hpdir.SECTORS-1;
   12c36:	15 a2       	std	Z+37, r1	; 0x25
   12c38:	14 a2       	std	Z+36, r1	; 0x24

		SS80p->VOLUME.MAX_BLOCK_NUMBER 	= hpdir.BLOCKS-1;
   12c3a:	40 91 3a 21 	lds	r20, 0x213A	; 0x80213a <hpdir+0xac>
   12c3e:	50 91 3b 21 	lds	r21, 0x213B	; 0x80213b <hpdir+0xad>
   12c42:	60 91 3c 21 	lds	r22, 0x213C	; 0x80213c <hpdir+0xae>
   12c46:	70 91 3d 21 	lds	r23, 0x213D	; 0x80213d <hpdir+0xaf>
   12c4a:	41 50       	subi	r20, 0x01	; 1
   12c4c:	51 09       	sbc	r21, r1
   12c4e:	61 09       	sbc	r22, r1
   12c50:	71 09       	sbc	r23, r1
   12c52:	46 a3       	std	Z+38, r20	; 0x26
   12c54:	57 a3       	std	Z+39, r21	; 0x27
   12c56:	60 a7       	std	Z+40, r22	; 0x28
   12c58:	71 a7       	std	Z+41, r23	; 0x29
///@return 1 on sucess or 0 on fail
void hpdir_set_device(int index)
{
    SS80DiskType *SS80p = NULL;
#ifdef AMIGO
    AMIGODiskType *AMIGOp = NULL;
   12c5a:	e0 e0       	ldi	r30, 0x00	; 0
   12c5c:	f0 e0       	ldi	r31, 0x00	; 0
   12c5e:	11 c0       	rjmp	.+34     	; 0x12c82 <hpdir_set_device+0xa6>
	if(Devices[index].TYPE == SS80_TYPE)
	{
		SS80p = (SS80DiskType *) Devices[index].dev;
	}
#ifdef AMIGO
	else if(Devices[index].TYPE == AMIGO_TYPE)
   12c60:	21 30       	cpi	r18, 0x01	; 1
   12c62:	21 f4       	brne	.+8      	; 0x12c6c <hpdir_set_device+0x90>
	{
		AMIGOp = (AMIGODiskType *) Devices[index].dev;
   12c64:	07 a0       	ldd	r0, Z+39	; 0x27
   12c66:	f0 a5       	ldd	r31, Z+40	; 0x28
   12c68:	e0 2d       	mov	r30, r0
   12c6a:	0b c0       	rjmp	.+22     	; 0x12c82 <hpdir_set_device+0xa6>
	}
#endif
	else
	{
		printf("hpdir_parameters invalid TYPE\n");
   12c6c:	85 e7       	ldi	r24, 0x75	; 117
   12c6e:	9d e1       	ldi	r25, 0x1D	; 29
   12c70:	a0 e0       	ldi	r26, 0x00	; 0
   12c72:	ed b7       	in	r30, 0x3d	; 61
   12c74:	fe b7       	in	r31, 0x3e	; 62
   12c76:	81 83       	std	Z+1, r24	; 0x01
   12c78:	92 83       	std	Z+2, r25	; 0x02
   12c7a:	a3 83       	std	Z+3, r26	; 0x03
   12c7c:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
		return;
   12c80:	47 c0       	rjmp	.+142    	; 0x12d10 <hpdir_set_device+0x134>

		SS80p->VOLUME.MAX_BLOCK_NUMBER 	= hpdir.BLOCKS-1;
	}

#ifdef AMIGO
	if(Devices[index].TYPE == AMIGO_TYPE)
   12c82:	2b e2       	ldi	r18, 0x2B	; 43
   12c84:	28 9f       	mul	r18, r24
   12c86:	d0 01       	movw	r26, r0
   12c88:	29 9f       	mul	r18, r25
   12c8a:	b0 0d       	add	r27, r0
   12c8c:	11 24       	eor	r1, r1
   12c8e:	a6 57       	subi	r26, 0x76	; 118
   12c90:	b1 4e       	sbci	r27, 0xE1	; 225
   12c92:	2c 91       	ld	r18, X
   12c94:	21 30       	cpi	r18, 0x01	; 1
   12c96:	f1 f4       	brne	.+60     	; 0x12cd4 <hpdir_set_device+0xf8>
	{
		AMIGOp->CONFIG.ID = hpdir.ID;
   12c98:	20 91 0e 21 	lds	r18, 0x210E	; 0x80210e <hpdir+0x80>
   12c9c:	30 91 0f 21 	lds	r19, 0x210F	; 0x80210f <hpdir+0x81>
   12ca0:	35 83       	std	Z+5, r19	; 0x05
   12ca2:	24 83       	std	Z+4, r18	; 0x04
		AMIGOp->GEOMETRY.BYTES_PER_SECTOR = hpdir.BYTES_PER_SECTOR;
   12ca4:	20 91 2e 21 	lds	r18, 0x212E	; 0x80212e <hpdir+0xa0>
   12ca8:	30 91 2f 21 	lds	r19, 0x212F	; 0x80212f <hpdir+0xa1>
   12cac:	37 83       	std	Z+7, r19	; 0x07
   12cae:	26 83       	std	Z+6, r18	; 0x06
		AMIGOp->GEOMETRY.SECTORS_PER_TRACK = hpdir.SECTORS;
   12cb0:	20 91 2a 21 	lds	r18, 0x212A	; 0x80212a <hpdir+0x9c>
   12cb4:	30 91 2b 21 	lds	r19, 0x212B	; 0x80212b <hpdir+0x9d>
   12cb8:	31 87       	std	Z+9, r19	; 0x09
   12cba:	20 87       	std	Z+8, r18	; 0x08
		AMIGOp->GEOMETRY.HEADS = hpdir.HEADS;
   12cbc:	20 91 26 21 	lds	r18, 0x2126	; 0x802126 <hpdir+0x98>
   12cc0:	30 91 27 21 	lds	r19, 0x2127	; 0x802127 <hpdir+0x99>
   12cc4:	33 87       	std	Z+11, r19	; 0x0b
   12cc6:	22 87       	std	Z+10, r18	; 0x0a
		AMIGOp->GEOMETRY.CYLINDERS = hpdir.CYLINDERS;
   12cc8:	20 91 22 21 	lds	r18, 0x2122	; 0x802122 <hpdir+0x94>
   12ccc:	30 91 23 21 	lds	r19, 0x2123	; 0x802123 <hpdir+0x95>
   12cd0:	35 87       	std	Z+13, r19	; 0x0d
   12cd2:	24 87       	std	Z+12, r18	; 0x0c
	}
#endif
	Devices[index].BLOCKS = hpdir.BLOCKS;
   12cd4:	4b e2       	ldi	r20, 0x2B	; 43
   12cd6:	48 9f       	mul	r20, r24
   12cd8:	90 01       	movw	r18, r0
   12cda:	49 9f       	mul	r20, r25
   12cdc:	30 0d       	add	r19, r0
   12cde:	11 24       	eor	r1, r1
   12ce0:	f9 01       	movw	r30, r18
   12ce2:	e6 57       	subi	r30, 0x76	; 118
   12ce4:	f1 4e       	sbci	r31, 0xE1	; 225
   12ce6:	80 91 3a 21 	lds	r24, 0x213A	; 0x80213a <hpdir+0xac>
   12cea:	90 91 3b 21 	lds	r25, 0x213B	; 0x80213b <hpdir+0xad>
   12cee:	a0 91 3c 21 	lds	r26, 0x213C	; 0x80213c <hpdir+0xae>
   12cf2:	b0 91 3d 21 	lds	r27, 0x213D	; 0x80213d <hpdir+0xaf>
   12cf6:	83 83       	std	Z+3, r24	; 0x03
   12cf8:	94 83       	std	Z+4, r25	; 0x04
   12cfa:	a5 83       	std	Z+5, r26	; 0x05
   12cfc:	b6 83       	std	Z+6, r27	; 0x06
	strncpy(Devices[index].model, hpdir.model, sizeof(Devices[index].model) -2);
   12cfe:	4e e1       	ldi	r20, 0x1E	; 30
   12d00:	50 e0       	ldi	r21, 0x00	; 0
   12d02:	6e e8       	ldi	r22, 0x8E	; 142
   12d04:	70 e2       	ldi	r23, 0x20	; 32
   12d06:	c9 01       	movw	r24, r18
   12d08:	8f 56       	subi	r24, 0x6F	; 111
   12d0a:	91 4e       	sbci	r25, 0xE1	; 225
   12d0c:	0e 94 40 32 	call	0x6480	; 0x6480 <strncpy>

}
   12d10:	0f 90       	pop	r0
   12d12:	0f 90       	pop	r0
   12d14:	0f 90       	pop	r0
   12d16:	08 95       	ret

00012d18 <hpdir_set_parameters>:
///@param[in] index: Devices index
///@param[in] model: model string
///
///@return void
void hpdir_set_parameters(int index, char *model)
{
   12d18:	cf 93       	push	r28
   12d1a:	df 93       	push	r29
   12d1c:	ec 01       	movw	r28, r24
   12d1e:	cb 01       	movw	r24, r22
	if ( hpdir_find_drive( model, 0 ,1) )
   12d20:	41 e0       	ldi	r20, 0x01	; 1
   12d22:	50 e0       	ldi	r21, 0x00	; 0
   12d24:	60 e0       	ldi	r22, 0x00	; 0
   12d26:	70 e0       	ldi	r23, 0x00	; 0
   12d28:	0e 94 1c a4 	call	0x14838	; 0x14838 <hpdir_find_drive>
   12d2c:	89 2b       	or	r24, r25
   12d2e:	11 f0       	breq	.+4      	; 0x12d34 <hpdir_set_parameters+0x1c>
		hpdir_set_device(index);
   12d30:	ce 01       	movw	r24, r28
   12d32:	54 df       	rcall	.-344    	; 0x12bdc <hpdir_set_device>
}
   12d34:	df 91       	pop	r29
   12d36:	cf 91       	pop	r28
   12d38:	08 95       	ret

00012d3a <Post_Config>:

/// ===============================================
/// @brief Post Process COnfiguration file after reading
/// @return  void
void Post_Config()
{
   12d3a:	4f 92       	push	r4
   12d3c:	5f 92       	push	r5
   12d3e:	6f 92       	push	r6
   12d40:	7f 92       	push	r7
   12d42:	8f 92       	push	r8
   12d44:	af 92       	push	r10
   12d46:	bf 92       	push	r11
   12d48:	cf 92       	push	r12
   12d4a:	df 92       	push	r13
   12d4c:	ef 92       	push	r14
   12d4e:	0f 93       	push	r16
   12d50:	1f 93       	push	r17
   12d52:	cf 93       	push	r28
   12d54:	df 93       	push	r29
   12d56:	00 d0       	rcall	.+0      	; 0x12d58 <Post_Config+0x1e>
   12d58:	00 d0       	rcall	.+0      	; 0x12d5a <Post_Config+0x20>
   12d5a:	1f 92       	push	r1
   12d5c:	ca e8       	ldi	r28, 0x8A	; 138
   12d5e:	de e1       	ldi	r29, 0x1E	; 30
   12d60:	8e e8       	ldi	r24, 0x8E	; 142
   12d62:	48 2e       	mov	r4, r24
   12d64:	80 e2       	ldi	r24, 0x20	; 32
   12d66:	58 2e       	mov	r5, r24
        if(Devices[i].TYPE == AMIGO_TYPE )
        {
            AMIGOp = (AMIGODiskType *)Devices[i].dev;
			if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
			{
				AMIGOp->GEOMETRY.BYTES_PER_SECTOR = 256;
   12d68:	a1 2c       	mov	r10, r1
   12d6a:	bb 24       	eor	r11, r11
   12d6c:	b3 94       	inc	r11
				printf("Warning: %s BYTES_PER_SECTOR != 256, Adjusting to 256\n", Devices[i].model);
   12d6e:	88 e0       	ldi	r24, 0x08	; 8
   12d70:	9d e1       	ldi	r25, 0x1D	; 29
   12d72:	6c 01       	movw	r12, r24
   12d74:	e1 2c       	mov	r14, r1
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
			if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
			{
				// SS80p->UNIT.BYTES_PER_BLOCK = 256;
				printf("Warning: %s BYTES_PER_BLOCK != 256, Adjusting to 256\n", Devices[i].model);
   12d76:	8f e3       	ldi	r24, 0x3F	; 63
   12d78:	9d e1       	ldi	r25, 0x1D	; 29
   12d7a:	3c 01       	movw	r6, r24
   12d7c:	81 2c       	mov	r8, r1
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   12d7e:	88 81       	ld	r24, Y
   12d80:	88 23       	and	r24, r24
   12d82:	09 f4       	brne	.+2      	; 0x12d86 <Post_Config+0x4c>
   12d84:	57 c0       	rjmp	.+174    	; 0x12e34 <Post_Config+0xfa>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   12d86:	83 30       	cpi	r24, 0x03	; 3
   12d88:	f9 f4       	brne	.+62     	; 0x12dc8 <Post_Config+0x8e>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   12d8a:	0f a1       	ldd	r16, Y+39	; 0x27
   12d8c:	18 a5       	ldd	r17, Y+40	; 0x28
			if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
   12d8e:	f8 01       	movw	r30, r16
   12d90:	80 89       	ldd	r24, Z+16	; 0x10
   12d92:	91 89       	ldd	r25, Z+17	; 0x11
   12d94:	81 15       	cp	r24, r1
   12d96:	91 40       	sbci	r25, 0x01	; 1
   12d98:	59 f0       	breq	.+22     	; 0x12db0 <Post_Config+0x76>
			{
				// SS80p->UNIT.BYTES_PER_BLOCK = 256;
				printf("Warning: %s BYTES_PER_BLOCK != 256, Adjusting to 256\n", Devices[i].model);
   12d9a:	ce 01       	movw	r24, r28
   12d9c:	07 96       	adiw	r24, 0x07	; 7
   12d9e:	ed b7       	in	r30, 0x3d	; 61
   12da0:	fe b7       	in	r31, 0x3e	; 62
   12da2:	95 83       	std	Z+5, r25	; 0x05
   12da4:	84 83       	std	Z+4, r24	; 0x04
   12da6:	61 82       	std	Z+1, r6	; 0x01
   12da8:	72 82       	std	Z+2, r7	; 0x02
   12daa:	83 82       	std	Z+3, r8	; 0x03
   12dac:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
			}
			sectors = SS80p->VOLUME.MAX_BLOCK_NUMBER+1;
			Devices[i].BLOCKS = sectors;
   12db0:	f8 01       	movw	r30, r16
   12db2:	86 a1       	ldd	r24, Z+38	; 0x26
   12db4:	97 a1       	ldd	r25, Z+39	; 0x27
   12db6:	a0 a5       	ldd	r26, Z+40	; 0x28
   12db8:	b1 a5       	ldd	r27, Z+41	; 0x29
   12dba:	01 96       	adiw	r24, 0x01	; 1
   12dbc:	a1 1d       	adc	r26, r1
   12dbe:	b1 1d       	adc	r27, r1
   12dc0:	8b 83       	std	Y+3, r24	; 0x03
   12dc2:	9c 83       	std	Y+4, r25	; 0x04
   12dc4:	ad 83       	std	Y+5, r26	; 0x05
   12dc6:	be 83       	std	Y+6, r27	; 0x06
        } // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   12dc8:	88 81       	ld	r24, Y
   12dca:	81 30       	cpi	r24, 0x01	; 1
   12dcc:	99 f5       	brne	.+102    	; 0x12e34 <Post_Config+0xfa>
        {
            AMIGOp = (AMIGODiskType *)Devices[i].dev;
   12dce:	0f a1       	ldd	r16, Y+39	; 0x27
   12dd0:	18 a5       	ldd	r17, Y+40	; 0x28
			if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
   12dd2:	f8 01       	movw	r30, r16
   12dd4:	86 81       	ldd	r24, Z+6	; 0x06
   12dd6:	97 81       	ldd	r25, Z+7	; 0x07
   12dd8:	81 15       	cp	r24, r1
   12dda:	91 40       	sbci	r25, 0x01	; 1
   12ddc:	71 f0       	breq	.+28     	; 0x12dfa <Post_Config+0xc0>
			{
				AMIGOp->GEOMETRY.BYTES_PER_SECTOR = 256;
   12dde:	f8 01       	movw	r30, r16
   12de0:	b7 82       	std	Z+7, r11	; 0x07
   12de2:	a6 82       	std	Z+6, r10	; 0x06
				printf("Warning: %s BYTES_PER_SECTOR != 256, Adjusting to 256\n", Devices[i].model);
   12de4:	ce 01       	movw	r24, r28
   12de6:	07 96       	adiw	r24, 0x07	; 7
   12de8:	ed b7       	in	r30, 0x3d	; 61
   12dea:	fe b7       	in	r31, 0x3e	; 62
   12dec:	95 83       	std	Z+5, r25	; 0x05
   12dee:	84 83       	std	Z+4, r24	; 0x04
   12df0:	c1 82       	std	Z+1, r12	; 0x01
   12df2:	d2 82       	std	Z+2, r13	; 0x02
   12df4:	e3 82       	std	Z+3, r14	; 0x03
   12df6:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
			}
			sectors = AMIGOp->GEOMETRY.SECTORS_PER_TRACK
				 * AMIGOp->GEOMETRY.HEADS
				 * AMIGOp->GEOMETRY.CYLINDERS;
			Devices[i].BLOCKS = sectors;
   12dfa:	f8 01       	movw	r30, r16
   12dfc:	20 85       	ldd	r18, Z+8	; 0x08
   12dfe:	31 85       	ldd	r19, Z+9	; 0x09
   12e00:	82 85       	ldd	r24, Z+10	; 0x0a
   12e02:	93 85       	ldd	r25, Z+11	; 0x0b
   12e04:	28 9f       	mul	r18, r24
   12e06:	a0 01       	movw	r20, r0
   12e08:	29 9f       	mul	r18, r25
   12e0a:	50 0d       	add	r21, r0
   12e0c:	38 9f       	mul	r19, r24
   12e0e:	50 0d       	add	r21, r0
   12e10:	11 24       	eor	r1, r1
   12e12:	24 85       	ldd	r18, Z+12	; 0x0c
   12e14:	35 85       	ldd	r19, Z+13	; 0x0d
   12e16:	42 9f       	mul	r20, r18
   12e18:	c0 01       	movw	r24, r0
   12e1a:	43 9f       	mul	r20, r19
   12e1c:	90 0d       	add	r25, r0
   12e1e:	52 9f       	mul	r21, r18
   12e20:	90 0d       	add	r25, r0
   12e22:	11 24       	eor	r1, r1
   12e24:	09 2e       	mov	r0, r25
   12e26:	00 0c       	add	r0, r0
   12e28:	aa 0b       	sbc	r26, r26
   12e2a:	bb 0b       	sbc	r27, r27
   12e2c:	8b 83       	std	Y+3, r24	; 0x03
   12e2e:	9c 83       	std	Y+4, r25	; 0x04
   12e30:	ad 83       	std	Y+5, r26	; 0x05
   12e32:	be 83       	std	Y+6, r27	; 0x06
   12e34:	ab 96       	adiw	r28, 0x2b	; 43
#ifdef AMIGO
    ///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
   12e36:	4c 16       	cp	r4, r28
   12e38:	5d 06       	cpc	r5, r29
   12e3a:	09 f0       	breq	.+2      	; 0x12e3e <Post_Config+0x104>
   12e3c:	a0 cf       	rjmp	.-192    	; 0x12d7e <Post_Config+0x44>
				 * AMIGOp->GEOMETRY.CYLINDERS;
			Devices[i].BLOCKS = sectors;
        } 
#endif // #ifdef AMIGO
    }
}
   12e3e:	0f 90       	pop	r0
   12e40:	0f 90       	pop	r0
   12e42:	0f 90       	pop	r0
   12e44:	0f 90       	pop	r0
   12e46:	0f 90       	pop	r0
   12e48:	df 91       	pop	r29
   12e4a:	cf 91       	pop	r28
   12e4c:	1f 91       	pop	r17
   12e4e:	0f 91       	pop	r16
   12e50:	ef 90       	pop	r14
   12e52:	df 90       	pop	r13
   12e54:	cf 90       	pop	r12
   12e56:	bf 90       	pop	r11
   12e58:	af 90       	pop	r10
   12e5a:	8f 90       	pop	r8
   12e5c:	7f 90       	pop	r7
   12e5e:	6f 90       	pop	r6
   12e60:	5f 90       	pop	r5
   12e62:	4f 90       	pop	r4
   12e64:	08 95       	ret

00012e66 <Read_Config>:
/// Set all drive parameters and debuglevel 
///
/// @param name: config file name to process
/// @return  number of parse errors
int Read_Config(char *name)
{
   12e66:	a3 ea       	ldi	r26, 0xA3	; 163
   12e68:	b1 e0       	ldi	r27, 0x01	; 1
   12e6a:	e9 e3       	ldi	r30, 0x39	; 57
   12e6c:	f7 e9       	ldi	r31, 0x97	; 151
   12e6e:	0c 94 c8 e3 	jmp	0x1c790	; 0x1c790 <__prologue_saves__>
    char *ptr;
    char str[128];
    char token[128];
    char arg[128];

    init_Devices();
   12e72:	8c 01       	movw	r16, r24

    lines = 0;
   12e74:	5e de       	rcall	.-836    	; 0x12b32 <init_Devices>
   12e76:	10 92 fe 18 	sts	0x18FE, r1	; 0x8018fe <lines+0x1>
   12e7a:	10 92 fd 18 	sts	0x18FD, r1	; 0x8018fd <lines>

    printf("Reading: %s\n", name);
   12e7e:	ed b7       	in	r30, 0x3d	; 61
   12e80:	fe b7       	in	r31, 0x3e	; 62
   12e82:	15 83       	std	Z+5, r17	; 0x05
   12e84:	04 83       	std	Z+4, r16	; 0x04
   12e86:	8b ef       	ldi	r24, 0xFB	; 251
   12e88:	9c e1       	ldi	r25, 0x1C	; 28
   12e8a:	a0 e0       	ldi	r26, 0x00	; 0
   12e8c:	81 83       	std	Z+1, r24	; 0x01
   12e8e:	92 83       	std	Z+2, r25	; 0x02
   12e90:	a3 83       	std	Z+3, r26	; 0x03
   12e92:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    cfg = fopen(name, "rb");
   12e96:	6c e1       	ldi	r22, 0x1C	; 28
   12e98:	78 e0       	ldi	r23, 0x08	; 8
   12e9a:	c8 01       	movw	r24, r16
   12e9c:	0e 94 f8 7e 	call	0xfdf0	; 0xfdf0 <fopen>
   12ea0:	c0 57       	subi	r28, 0x70	; 112
   12ea2:	de 4f       	sbci	r29, 0xFE	; 254
   12ea4:	99 83       	std	Y+1, r25	; 0x01
   12ea6:	88 83       	st	Y, r24
   12ea8:	c0 59       	subi	r28, 0x90	; 144
    if(cfg == NULL)
   12eaa:	d1 40       	sbci	r29, 0x01	; 1
   12eac:	89 2b       	or	r24, r25
   12eae:	09 f4       	brne	.+2      	; 0x12eb2 <Read_Config+0x4c>
   12eb0:	60 c0       	rjmp	.+192    	; 0x12f72 <Read_Config+0x10c>
   12eb2:	c4 57       	subi	r28, 0x74	; 116
   12eb4:	de 4f       	sbci	r29, 0xFE	; 254
   12eb6:	19 82       	std	Y+1, r1	; 0x01
   12eb8:	18 82       	st	Y, r1
   12eba:	cc 58       	subi	r28, 0x8C	; 140
   12ebc:	d1 40       	sbci	r29, 0x01	; 1
   12ebe:	a1 2c       	mov	r10, r1
   12ec0:	b1 2c       	mov	r11, r1
   12ec2:	c2 57       	subi	r28, 0x72	; 114
   12ec4:	de 4f       	sbci	r29, 0xFE	; 254
   12ec6:	19 82       	std	Y+1, r1	; 0x01
   12ec8:	18 82       	st	Y, r1
   12eca:	ce 58       	subi	r28, 0x8E	; 142
   12ecc:	d1 40       	sbci	r29, 0x01	; 1
   12ece:	c1 2c       	mov	r12, r1
   12ed0:	d1 2c       	mov	r13, r1
   12ed2:	e1 2c       	mov	r14, r1
   12ed4:	f1 2c       	mov	r15, r1
   12ed6:	c6 57       	subi	r28, 0x76	; 118
   12ed8:	de 4f       	sbci	r29, 0xFE	; 254
   12eda:	19 82       	std	Y+1, r1	; 0x01
   12edc:	18 82       	st	Y, r1
   12ede:	ca 58       	subi	r28, 0x8A	; 138
        printf("Read_Config: open(%s) failed\n", name);
        set_Config_Defaults();
        return(errors);
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   12ee0:	d1 40       	sbci	r29, 0x01	; 1
   12ee2:	4e 01       	movw	r8, r28
   12ee4:	f6 ef       	ldi	r31, 0xF6	; 246
   12ee6:	8f 1a       	sub	r8, r31
   12ee8:	fe ef       	ldi	r31, 0xFE	; 254
            }
            break;
#endif // #ifdef AMIGO

        default:
            printf("Fatal Unexpected STATE %d at line:%d\n", state, lines);
   12eea:	9f 0a       	sbc	r9, r31
   12eec:	8e e6       	ldi	r24, 0x6E	; 110
   12eee:	98 e1       	ldi	r25, 0x18	; 24
   12ef0:	9c 01       	movw	r18, r24
   12ef2:	40 e0       	ldi	r20, 0x00	; 0
   12ef4:	ce 56       	subi	r28, 0x6E	; 110
   12ef6:	de 4f       	sbci	r29, 0xFE	; 254
   12ef8:	28 83       	st	Y, r18
   12efa:	39 83       	std	Y+1, r19	; 0x01
   12efc:	4a 83       	std	Y+2, r20	; 0x02
   12efe:	c2 59       	subi	r28, 0x92	; 146
            {
                AMIGOp->GEOMETRY.CYLINDERS = val.w;
            }
            else
            {
                printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", str,lines);
   12f00:	d1 40       	sbci	r29, 0x01	; 1
   12f02:	84 e9       	ldi	r24, 0x94	; 148
   12f04:	98 e1       	ldi	r25, 0x18	; 24
   12f06:	9c 01       	movw	r18, r24
   12f08:	40 e0       	ldi	r20, 0x00	; 0
   12f0a:	cb 56       	subi	r28, 0x6B	; 107
   12f0c:	de 4f       	sbci	r29, 0xFE	; 254
   12f0e:	28 83       	st	Y, r18
   12f10:	39 83       	std	Y+1, r19	; 0x01
   12f12:	4a 83       	std	Y+2, r20	; 0x02
   12f14:	c5 59       	subi	r28, 0x95	; 149
        case AMIGO_GEOMETRY:
            if( MATCHI (token,"BYTES_PER_SECTOR") )
            {
                if(val.w > 0x1000)
				{
					printf("Fatal: AMIGO BYTES_PER_SECTOR > 0x1000, set to 256 at line:%d\n", lines);
   12f16:	d1 40       	sbci	r29, 0x01	; 1
   12f18:	84 ec       	ldi	r24, 0xC4	; 196
   12f1a:	98 e1       	ldi	r25, 0x18	; 24
   12f1c:	9c 01       	movw	r18, r24
   12f1e:	40 e0       	ldi	r20, 0x00	; 0
   12f20:	c8 56       	subi	r28, 0x68	; 104
   12f22:	de 4f       	sbci	r29, 0xFE	; 254
   12f24:	28 83       	st	Y, r18
   12f26:	39 83       	std	Y+1, r19	; 0x01
   12f28:	4a 83       	std	Y+2, r20	; 0x02
   12f2a:	c8 59       	subi	r28, 0x98	; 152
            {
                AMIGOp->CONFIG.ID = val.w;
            }
            else
            {
                printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", str,lines);
   12f2c:	d1 40       	sbci	r29, 0x01	; 1
   12f2e:	83 e0       	ldi	r24, 0x03	; 3
   12f30:	99 e1       	ldi	r25, 0x19	; 25
   12f32:	9c 01       	movw	r18, r24
   12f34:	40 e0       	ldi	r20, 0x00	; 0
   12f36:	c5 56       	subi	r28, 0x65	; 101
   12f38:	de 4f       	sbci	r29, 0xFE	; 254
   12f3a:	28 83       	st	Y, r18
   12f3c:	39 83       	std	Y+1, r19	; 0x01
   12f3e:	4a 83       	std	Y+2, r20	; 0x02
   12f40:	cb 59       	subi	r28, 0x9B	; 155
            {
                AMIGOp->HEADER.NAME = stralloc(arg);
            }
            else
            {
                printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", str,lines);
   12f42:	d1 40       	sbci	r29, 0x01	; 1
   12f44:	82 e3       	ldi	r24, 0x32	; 50
   12f46:	99 e1       	ldi	r25, 0x19	; 25
   12f48:	9c 01       	movw	r18, r24
   12f4a:	40 e0       	ldi	r20, 0x00	; 0
   12f4c:	c2 56       	subi	r28, 0x62	; 98
   12f4e:	de 4f       	sbci	r29, 0xFE	; 254
   12f50:	28 83       	st	Y, r18
   12f52:	39 83       	std	Y+1, r19	; 0x01
   12f54:	4a 83       	std	Y+2, r20	; 0x02
   12f56:	ce 59       	subi	r28, 0x9E	; 158
            }
            else if( MATCHI (token,"PPR") )
            {
                if(val.b > 7)
				{
					printf("Warning AMIGO ADDRESS: %d > 7, disabled at line:%d\n", str,lines);
   12f58:	d1 40       	sbci	r29, 0x01	; 1
   12f5a:	82 e6       	ldi	r24, 0x62	; 98
   12f5c:	99 e1       	ldi	r25, 0x19	; 25
   12f5e:	9c 01       	movw	r18, r24
   12f60:	40 e0       	ldi	r20, 0x00	; 0
   12f62:	cf 55       	subi	r28, 0x5F	; 95
   12f64:	de 4f       	sbci	r29, 0xFE	; 254
   12f66:	28 83       	st	Y, r18
   12f68:	39 83       	std	Y+1, r19	; 0x01
   12f6a:	4a 83       	std	Y+2, r20	; 0x02
   12f6c:	c1 5a       	subi	r28, 0xA1	; 161
   12f6e:	d1 40       	sbci	r29, 0x01	; 1
    cfg = fopen(name, "rb");
    if(cfg == NULL)
    {
        ++errors;
        //FIXME
        perror("Read_Config - open");
   12f70:	27 c0       	rjmp	.+78     	; 0x12fc0 <Read_Config+0x15a>
   12f72:	86 e7       	ldi	r24, 0x76	; 118
   12f74:	9d e0       	ldi	r25, 0x0D	; 13
   12f76:	0e 94 37 79 	call	0xf26e	; 0xf26e <perror>
        printf("Read_Config: open(%s) failed\n", name);
   12f7a:	ed b7       	in	r30, 0x3d	; 61
   12f7c:	fe b7       	in	r31, 0x3e	; 62
   12f7e:	15 83       	std	Z+5, r17	; 0x05
   12f80:	04 83       	std	Z+4, r16	; 0x04
   12f82:	8d ed       	ldi	r24, 0xDD	; 221
   12f84:	9c e1       	ldi	r25, 0x1C	; 28
   12f86:	a0 e0       	ldi	r26, 0x00	; 0
   12f88:	81 83       	std	Z+1, r24	; 0x01
   12f8a:	92 83       	std	Z+2, r25	; 0x02
   12f8c:	a3 83       	std	Z+3, r26	; 0x03
   12f8e:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
        set_Config_Defaults();
        return(errors);
   12f92:	81 e0       	ldi	r24, 0x01	; 1
   12f94:	90 e0       	ldi	r25, 0x00	; 0
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
        ++lines;
   12f96:	a9 c5       	rjmp	.+2898   	; 0x13aea <Read_Config+0xc84>
   12f98:	2f 5f       	subi	r18, 0xFF	; 255
   12f9a:	3f 4f       	sbci	r19, 0xFF	; 255
   12f9c:	30 93 fe 18 	sts	0x18FE, r19	; 0x8018fe <lines+0x1>
   12fa0:	20 93 fd 18 	sts	0x18FD, r18	; 0x8018fd <lines>

        ptr = str;

        trim_tail(ptr);
   12fa4:	c4 01       	movw	r24, r8
   12fa6:	0e 94 13 33 	call	0x6626	; 0x6626 <trim_tail>
        ptr = skipspaces(ptr);
   12faa:	c4 01       	movw	r24, r8
   12fac:	0e 94 23 33 	call	0x6646	; 0x6646 <skipspaces>
        len = strlen(ptr);
   12fb0:	fc 01       	movw	r30, r24
   12fb2:	01 90       	ld	r0, Z+
   12fb4:	00 20       	and	r0, r0
   12fb6:	e9 f7       	brne	.-6      	; 0x12fb2 <Read_Config+0x14c>

        if(!len)
   12fb8:	31 97       	sbiw	r30, 0x01	; 1
   12fba:	8e 17       	cp	r24, r30
   12fbc:	9f 07       	cpc	r25, r31
        printf("Read_Config: open(%s) failed\n", name);
        set_Config_Defaults();
        return(errors);
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   12fbe:	91 f4       	brne	.+36     	; 0x12fe4 <Read_Config+0x17e>
   12fc0:	c0 57       	subi	r28, 0x70	; 112
   12fc2:	de 4f       	sbci	r29, 0xFE	; 254
   12fc4:	48 81       	ld	r20, Y
   12fc6:	59 81       	ldd	r21, Y+1	; 0x01
   12fc8:	c0 59       	subi	r28, 0x90	; 144
   12fca:	d1 40       	sbci	r29, 0x01	; 1
   12fcc:	6e e7       	ldi	r22, 0x7E	; 126
   12fce:	70 e0       	ldi	r23, 0x00	; 0
   12fd0:	c4 01       	movw	r24, r8
   12fd2:	0e 94 1e 77 	call	0xee3c	; 0xee3c <fgets>
   12fd6:	20 91 fd 18 	lds	r18, 0x18FD	; 0x8018fd <lines>
   12fda:	30 91 fe 18 	lds	r19, 0x18FE	; 0x8018fe <lines+0x1>
   12fde:	89 2b       	or	r24, r25
   12fe0:	d9 f6       	brne	.-74     	; 0x12f98 <Read_Config+0x132>

        if(!len)
            continue;

        // Skip comments
        if(*ptr == '#')
   12fe2:	3a c5       	rjmp	.+2676   	; 0x13a58 <Read_Config+0xbf2>
   12fe4:	dc 01       	movw	r26, r24
   12fe6:	2c 91       	ld	r18, X
   12fe8:	23 32       	cpi	r18, 0x23	; 35
            continue;

		*token = 0;
   12fea:	51 f3       	breq	.-44     	; 0x12fc0 <Read_Config+0x15a>
   12fec:	8e 01       	movw	r16, r28
   12fee:	06 57       	subi	r16, 0x76	; 118
   12ff0:	1f 4f       	sbci	r17, 0xFF	; 255
   12ff2:	f8 01       	movw	r30, r16
		*arg = 0;
   12ff4:	10 82       	st	Z, r1
		val.l = 0;

		// To save on code we process a token and optional argument here
		ptr = get_token(ptr,token, sizeof(token)-2);
   12ff6:	1a 86       	std	Y+10, r1	; 0x0a
   12ff8:	4e e7       	ldi	r20, 0x7E	; 126
   12ffa:	50 e0       	ldi	r21, 0x00	; 0
   12ffc:	b8 01       	movw	r22, r16
   12ffe:	0e 94 f5 33 	call	0x67ea	; 0x67ea <get_token>

		// Argument
		ptr = get_token(ptr,arg, sizeof(arg)-2);
   13002:	4e e7       	ldi	r20, 0x7E	; 126
   13004:	50 e0       	ldi	r21, 0x00	; 0
   13006:	be 01       	movw	r22, r28
   13008:	66 5f       	subi	r22, 0xF6	; 246
   1300a:	7f 4f       	sbci	r23, 0xFF	; 255
   1300c:	0e 94 f5 33 	call	0x67ea	; 0x67ea <get_token>
		if( MATCHI(arg,"=") )
   13010:	3c 01       	movw	r6, r24
   13012:	69 e8       	ldi	r22, 0x89	; 137
   13014:	7d e0       	ldi	r23, 0x0D	; 13
   13016:	ce 01       	movw	r24, r28
   13018:	0a 96       	adiw	r24, 0x0a	; 10
   1301a:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <MATCHI>
   1301e:	89 2b       	or	r24, r25
			ptr = get_token(ptr,arg,sizeof(arg)-2);
   13020:	41 f0       	breq	.+16     	; 0x13032 <Read_Config+0x1cc>
   13022:	4e e7       	ldi	r20, 0x7E	; 126
   13024:	50 e0       	ldi	r21, 0x00	; 0
   13026:	be 01       	movw	r22, r28
   13028:	66 5f       	subi	r22, 0xF6	; 246
   1302a:	7f 4f       	sbci	r23, 0xFF	; 255
   1302c:	c3 01       	movw	r24, r6
   1302e:	0e 94 f5 33 	call	0x67ea	; 0x67ea <get_token>
		val.l = get_value(arg);
   13032:	ce 01       	movw	r24, r28
   13034:	0a 96       	adiw	r24, 0x0a	; 10
   13036:	0e 94 38 34 	call	0x6870	; 0x6870 <get_value>
   1303a:	2b 01       	movw	r4, r22
   1303c:	3c 01       	movw	r6, r24
   1303e:	36 2e       	mov	r3, r22

        //FIXME check for state and last state
        if( MATCHI(token,"END") )
   13040:	25 2c       	mov	r2, r5
   13042:	6b e8       	ldi	r22, 0x8B	; 139
   13044:	7d e0       	ldi	r23, 0x0D	; 13
   13046:	c8 01       	movw	r24, r16
   13048:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <MATCHI>
        {
            state = pop_state();
   1304c:	89 2b       	or	r24, r25
   1304e:	11 f0       	breq	.+4      	; 0x13054 <Read_Config+0x1ee>
   13050:	ad dd       	rcall	.-1190   	; 0x12bac <pop_state>
            continue;
        }

        switch(state)
   13052:	2c c0       	rjmp	.+88     	; 0x130ac <Read_Config+0x246>
   13054:	c6 57       	subi	r28, 0x76	; 118
   13056:	de 4f       	sbci	r29, 0xFE	; 254
   13058:	28 81       	ld	r18, Y
   1305a:	39 81       	ldd	r19, Y+1	; 0x01
   1305c:	ca 58       	subi	r28, 0x8A	; 138
   1305e:	d1 40       	sbci	r29, 0x01	; 1
   13060:	20 31       	cpi	r18, 0x10	; 16
   13062:	31 05       	cpc	r19, r1
   13064:	08 f0       	brcs	.+2      	; 0x13068 <Read_Config+0x202>
   13066:	d8 c4       	rjmp	.+2480   	; 0x13a18 <Read_Config+0xbb2>
   13068:	f9 01       	movw	r30, r18
   1306a:	e0 53       	subi	r30, 0x30	; 48
   1306c:	ff 4f       	sbci	r31, 0xFF	; 255
   1306e:	0c 94 84 e3 	jmp	0x1c708	; 0x1c708 <__tablejump2__>
        {
        case START_STATE:

            if( MATCHI (token,"SS80_DEFAULT") )
   13072:	6f e8       	ldi	r22, 0x8F	; 143
   13074:	7d e0       	ldi	r23, 0x0D	; 13
   13076:	c8 01       	movw	r24, r16
   13078:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <MATCHI>
            {
                push_state(state);
   1307c:	89 2b       	or	r24, r25
   1307e:	e9 f0       	breq	.+58     	; 0x130ba <Read_Config+0x254>
				state = SS80_STATE;
				index = alloc_device(SS80_DEFAULT_TYPE);
   13080:	80 e0       	ldi	r24, 0x00	; 0
   13082:	90 e0       	ldi	r25, 0x00	; 0
   13084:	7a dd       	rcall	.-1292   	; 0x12b7a <push_state>
   13086:	82 e0       	ldi	r24, 0x02	; 2
   13088:	90 e0       	ldi	r25, 0x00	; 0
				if(index == -1)
   1308a:	94 dc       	rcall	.-1752   	; 0x129b4 <alloc_device>
   1308c:	6c 01       	movw	r12, r24
   1308e:	01 96       	adiw	r24, 0x01	; 1
					state = START_STATE;
				else
					SS80p = (SS80DiskType *) Devices[index].dev;
   13090:	09 f4       	brne	.+2      	; 0x13094 <Read_Config+0x22e>
   13092:	96 cf       	rjmp	.-212    	; 0x12fc0 <Read_Config+0x15a>
   13094:	8b e2       	ldi	r24, 0x2B	; 43
   13096:	8c 9d       	mul	r24, r12
   13098:	f0 01       	movw	r30, r0
   1309a:	8d 9d       	mul	r24, r13
   1309c:	f0 0d       	add	r31, r0
   1309e:	11 24       	eor	r1, r1
   130a0:	e6 57       	subi	r30, 0x76	; 118
   130a2:	f1 4e       	sbci	r31, 0xE1	; 225
        case START_STATE:

            if( MATCHI (token,"SS80_DEFAULT") )
            {
                push_state(state);
				state = SS80_STATE;
   130a4:	a7 a0       	ldd	r10, Z+39	; 0x27
   130a6:	b0 a4       	ldd	r11, Z+40	; 0x28
   130a8:	81 e0       	ldi	r24, 0x01	; 1
   130aa:	90 e0       	ldi	r25, 0x00	; 0
   130ac:	c6 57       	subi	r28, 0x76	; 118
   130ae:	de 4f       	sbci	r29, 0xFE	; 254
   130b0:	99 83       	std	Y+1, r25	; 0x01
   130b2:	88 83       	st	Y, r24
   130b4:	ca 58       	subi	r28, 0x8A	; 138
					state = START_STATE;
				else
					SS80p = (SS80DiskType *) Devices[index].dev;
            }

            else if( MATCHI (token,"SS80") || MATCHI (token, "CS80") )
   130b6:	d1 40       	sbci	r29, 0x01	; 1
   130b8:	83 cf       	rjmp	.-250    	; 0x12fc0 <Read_Config+0x15a>
   130ba:	6c e9       	ldi	r22, 0x9C	; 156
   130bc:	7d e0       	ldi	r23, 0x0D	; 13
   130be:	c8 01       	movw	r24, r16
   130c0:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <MATCHI>
            {
                push_state(state);
   130c4:	89 2b       	or	r24, r25
   130c6:	f1 f0       	breq	.+60     	; 0x13104 <Read_Config+0x29e>
				state = SS80_STATE;
				index = alloc_device(SS80_TYPE);
   130c8:	80 e0       	ldi	r24, 0x00	; 0
   130ca:	90 e0       	ldi	r25, 0x00	; 0
   130cc:	56 dd       	rcall	.-1364   	; 0x12b7a <push_state>
   130ce:	83 e0       	ldi	r24, 0x03	; 3
   130d0:	90 e0       	ldi	r25, 0x00	; 0
				if(index == -1)
   130d2:	70 dc       	rcall	.-1824   	; 0x129b4 <alloc_device>
   130d4:	6c 01       	movw	r12, r24
   130d6:	9f ef       	ldi	r25, 0xFF	; 255
   130d8:	c9 16       	cp	r12, r25
   130da:	d9 06       	cpc	r13, r25
				{
					state = START_STATE;
				}
				else
				{
					SS80p = (SS80DiskType *) Devices[index].dev;
   130dc:	09 f4       	brne	.+2      	; 0x130e0 <Read_Config+0x27a>
   130de:	70 cf       	rjmp	.-288    	; 0x12fc0 <Read_Config+0x15a>
   130e0:	8b e2       	ldi	r24, 0x2B	; 43
   130e2:	8c 9d       	mul	r24, r12
   130e4:	f0 01       	movw	r30, r0
   130e6:	8d 9d       	mul	r24, r13
   130e8:	f0 0d       	add	r31, r0
   130ea:	11 24       	eor	r1, r1
   130ec:	e6 57       	subi	r30, 0x76	; 118
					hpdir_set_parameters(index,arg);	// Also sets Devices[index].model
   130ee:	f1 4e       	sbci	r31, 0xE1	; 225
   130f0:	a7 a0       	ldd	r10, Z+39	; 0x27
   130f2:	b0 a4       	ldd	r11, Z+40	; 0x28
   130f4:	be 01       	movw	r22, r28
   130f6:	66 5f       	subi	r22, 0xF6	; 246
   130f8:	7f 4f       	sbci	r23, 0xFF	; 255
            }

            else if( MATCHI (token,"SS80") || MATCHI (token, "CS80") )
            {
                push_state(state);
				state = SS80_STATE;
   130fa:	c6 01       	movw	r24, r12
   130fc:	0d de       	rcall	.-998    	; 0x12d18 <hpdir_set_parameters>
   130fe:	a1 e0       	ldi	r26, 0x01	; 1
					state = START_STATE;
				else
					SS80p = (SS80DiskType *) Devices[index].dev;
            }

            else if( MATCHI (token,"SS80") || MATCHI (token, "CS80") )
   13100:	b0 e0       	ldi	r27, 0x00	; 0
   13102:	05 c1       	rjmp	.+522    	; 0x1330e <Read_Config+0x4a8>
   13104:	61 ea       	ldi	r22, 0xA1	; 161
   13106:	7d e0       	ldi	r23, 0x0D	; 13
   13108:	c8 01       	movw	r24, r16
   1310a:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <MATCHI>
					hpdir_set_parameters(index,arg);	// Also sets Devices[index].model
				}
			}

#ifdef AMIGO
            else if( MATCHI (token,"AMIGO") )
   1310e:	89 2b       	or	r24, r25
   13110:	d9 f6       	brne	.-74     	; 0x130c8 <Read_Config+0x262>
   13112:	66 ea       	ldi	r22, 0xA6	; 166
   13114:	7d e0       	ldi	r23, 0x0D	; 13
   13116:	c8 01       	movw	r24, r16
            {
                push_state(state);
   13118:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <MATCHI>
   1311c:	89 2b       	or	r24, r25
   1311e:	11 f1       	breq	.+68     	; 0x13164 <Read_Config+0x2fe>
                state = AMIGO_STATE;
                index = alloc_device(AMIGO_TYPE);
   13120:	80 e0       	ldi	r24, 0x00	; 0
   13122:	90 e0       	ldi	r25, 0x00	; 0
   13124:	2a dd       	rcall	.-1452   	; 0x12b7a <push_state>
   13126:	81 e0       	ldi	r24, 0x01	; 1
   13128:	90 e0       	ldi	r25, 0x00	; 0
                if(index == -1)
   1312a:	44 dc       	rcall	.-1912   	; 0x129b4 <alloc_device>
   1312c:	6c 01       	movw	r12, r24
   1312e:	01 96       	adiw	r24, 0x01	; 1
				{
                    state = START_STATE;
				}
                else
				{
                    AMIGOp = (AMIGODiskType *) Devices[index].dev;
   13130:	09 f4       	brne	.+2      	; 0x13134 <Read_Config+0x2ce>
   13132:	46 cf       	rjmp	.-372    	; 0x12fc0 <Read_Config+0x15a>
   13134:	8b e2       	ldi	r24, 0x2B	; 43
   13136:	8c 9d       	mul	r24, r12
   13138:	f0 01       	movw	r30, r0
   1313a:	8d 9d       	mul	r24, r13
   1313c:	f0 0d       	add	r31, r0
   1313e:	11 24       	eor	r1, r1
   13140:	e6 57       	subi	r30, 0x76	; 118
   13142:	f1 4e       	sbci	r31, 0xE1	; 225
   13144:	27 a1       	ldd	r18, Z+39	; 0x27
   13146:	30 a5       	ldd	r19, Z+40	; 0x28
   13148:	c4 57       	subi	r28, 0x74	; 116
   1314a:	de 4f       	sbci	r29, 0xFE	; 254
   1314c:	39 83       	std	Y+1, r19	; 0x01
					hpdir_set_parameters(index,arg);	// Also sets Devices[index.model
   1314e:	28 83       	st	Y, r18
   13150:	cc 58       	subi	r28, 0x8C	; 140
   13152:	d1 40       	sbci	r29, 0x01	; 1
   13154:	be 01       	movw	r22, r28
   13156:	66 5f       	subi	r22, 0xF6	; 246
   13158:	7f 4f       	sbci	r23, 0xFF	; 255

#ifdef AMIGO
            else if( MATCHI (token,"AMIGO") )
            {
                push_state(state);
                state = AMIGO_STATE;
   1315a:	c6 01       	movw	r24, r12
   1315c:	dd dd       	rcall	.-1094   	; 0x12d18 <hpdir_set_parameters>
                    AMIGOp = (AMIGODiskType *) Devices[index].dev;
					hpdir_set_parameters(index,arg);	// Also sets Devices[index.model
				}
			}
#endif
            else if( MATCHI (token,"PRINTER") )
   1315e:	8a e0       	ldi	r24, 0x0A	; 10
   13160:	90 e0       	ldi	r25, 0x00	; 0
   13162:	a4 cf       	rjmp	.-184    	; 0x130ac <Read_Config+0x246>
   13164:	6c ea       	ldi	r22, 0xAC	; 172
   13166:	7d e0       	ldi	r23, 0x0D	; 13
   13168:	c8 01       	movw	r24, r16
            {
                push_state(state);
   1316a:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <MATCHI>
   1316e:	89 2b       	or	r24, r25
   13170:	f9 f0       	breq	.+62     	; 0x131b0 <Read_Config+0x34a>
                state = PRINTER_STATE;
                index = alloc_device(PRINTER_TYPE);
   13172:	80 e0       	ldi	r24, 0x00	; 0
   13174:	90 e0       	ldi	r25, 0x00	; 0
   13176:	01 dd       	rcall	.-1534   	; 0x12b7a <push_state>
   13178:	84 e0       	ldi	r24, 0x04	; 4
   1317a:	90 e0       	ldi	r25, 0x00	; 0
                if(index == -1)
   1317c:	1b dc       	rcall	.-1994   	; 0x129b4 <alloc_device>
   1317e:	6c 01       	movw	r12, r24
   13180:	9f ef       	ldi	r25, 0xFF	; 255
   13182:	c9 16       	cp	r12, r25
   13184:	d9 06       	cpc	r13, r25
                    state = START_STATE;
                else
                    PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
   13186:	09 f4       	brne	.+2      	; 0x1318a <Read_Config+0x324>
   13188:	1b cf       	rjmp	.-458    	; 0x12fc0 <Read_Config+0x15a>
   1318a:	8b e2       	ldi	r24, 0x2B	; 43
   1318c:	8c 9d       	mul	r24, r12
   1318e:	f0 01       	movw	r30, r0
   13190:	8d 9d       	mul	r24, r13
   13192:	f0 0d       	add	r31, r0
   13194:	11 24       	eor	r1, r1
   13196:	e6 57       	subi	r30, 0x76	; 118
   13198:	f1 4e       	sbci	r31, 0xE1	; 225
   1319a:	a7 a1       	ldd	r26, Z+39	; 0x27
   1319c:	b0 a5       	ldd	r27, Z+40	; 0x28
   1319e:	c2 57       	subi	r28, 0x72	; 114
   131a0:	de 4f       	sbci	r29, 0xFE	; 254
   131a2:	b9 83       	std	Y+1, r27	; 0x01
   131a4:	a8 83       	st	Y, r26
			}
#endif
            else if( MATCHI (token,"PRINTER") )
            {
                push_state(state);
                state = PRINTER_STATE;
   131a6:	ce 58       	subi	r28, 0x8E	; 142
   131a8:	d1 40       	sbci	r29, 0x01	; 1
   131aa:	ee e0       	ldi	r30, 0x0E	; 14
                if(index == -1)
                    state = START_STATE;
                else
                    PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
            }
            else if( MATCHI (token,"DEBUG") )
   131ac:	f0 e0       	ldi	r31, 0x00	; 0
   131ae:	c2 c0       	rjmp	.+388    	; 0x13334 <Read_Config+0x4ce>
   131b0:	64 eb       	ldi	r22, 0xB4	; 180
   131b2:	7d e0       	ldi	r23, 0x0D	; 13
   131b4:	c8 01       	movw	r24, r16
   131b6:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <MATCHI>
            {
				debuglevel = val.w;
   131ba:	89 2b       	or	r24, r25
   131bc:	29 f0       	breq	.+10     	; 0x131c8 <Read_Config+0x362>
   131be:	50 92 c4 01 	sts	0x01C4, r5	; 0x8001c4 <debuglevel+0x1>
   131c2:	40 92 c3 01 	sts	0x01C3, r4	; 0x8001c3 <debuglevel>
            }
            else if( MATCHI (token,"PRINTER_DEFAULT_ADDRESS") )
   131c6:	fc ce       	rjmp	.-520    	; 0x12fc0 <Read_Config+0x15a>
   131c8:	6a eb       	ldi	r22, 0xBA	; 186
   131ca:	7d e0       	ldi	r23, 0x0D	; 13
   131cc:	c8 01       	movw	r24, r16
   131ce:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <MATCHI>
   131d2:	20 91 fd 18 	lds	r18, 0x18FD	; 0x8018fd <lines>
            {
                //FIXME REMOVE from config
                printf("Skipping %s, at line:%d\n", str,lines);
   131d6:	30 91 fe 18 	lds	r19, 0x18FE	; 0x8018fe <lines+0x1>
   131da:	ed b7       	in	r30, 0x3d	; 61
   131dc:	fe b7       	in	r31, 0x3e	; 62
   131de:	37 83       	std	Z+7, r19	; 0x07
   131e0:	26 83       	std	Z+6, r18	; 0x06
            }
            else if( MATCHI (token,"DEBUG") )
            {
				debuglevel = val.w;
            }
            else if( MATCHI (token,"PRINTER_DEFAULT_ADDRESS") )
   131e2:	95 82       	std	Z+5, r9	; 0x05
   131e4:	84 82       	std	Z+4, r8	; 0x04
            {
                //FIXME REMOVE from config
                printf("Skipping %s, at line:%d\n", str,lines);
   131e6:	89 2b       	or	r24, r25
   131e8:	19 f0       	breq	.+6      	; 0x131f0 <Read_Config+0x38a>
            }
            else
            {
                printf("Unexpected START token: %s, at line:%d\n", str,lines);
   131ea:	84 ec       	ldi	r24, 0xC4	; 196
   131ec:	9c e1       	ldi	r25, 0x1C	; 28
                ++errors;
            }
            break;

        case PRINTER_STATE:
            if( MATCHI (token,"CONFIG") )
   131ee:	e6 c2       	rjmp	.+1484   	; 0x137bc <Read_Config+0x956>
   131f0:	8c e9       	ldi	r24, 0x9C	; 156
   131f2:	9c e1       	ldi	r25, 0x1C	; 28
   131f4:	19 c0       	rjmp	.+50     	; 0x13228 <Read_Config+0x3c2>
   131f6:	62 ed       	ldi	r22, 0xD2	; 210
   131f8:	7d e0       	ldi	r23, 0x0D	; 13
   131fa:	c8 01       	movw	r24, r16
            {
                push_state(state);
   131fc:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <MATCHI>
   13200:	89 2b       	or	r24, r25
   13202:	31 f0       	breq	.+12     	; 0x13210 <Read_Config+0x3aa>
                state = PRINTER_CONFIG;
   13204:	8e e0       	ldi	r24, 0x0E	; 14
   13206:	90 e0       	ldi	r25, 0x00	; 0
   13208:	b8 dc       	rcall	.-1680   	; 0x12b7a <push_state>
            }
            else
            {
                printf("Unexpected PRINTER token: %s, at line:%d\n", str,lines);
   1320a:	2f e0       	ldi	r18, 0x0F	; 15
   1320c:	30 e0       	ldi	r19, 0x00	; 0
   1320e:	5f c0       	rjmp	.+190    	; 0x132ce <Read_Config+0x468>
   13210:	80 91 fd 18 	lds	r24, 0x18FD	; 0x8018fd <lines>
   13214:	90 91 fe 18 	lds	r25, 0x18FE	; 0x8018fe <lines+0x1>
   13218:	ed b7       	in	r30, 0x3d	; 61
   1321a:	fe b7       	in	r31, 0x3e	; 62
   1321c:	97 83       	std	Z+7, r25	; 0x07
   1321e:	86 83       	std	Z+6, r24	; 0x06
   13220:	95 82       	std	Z+5, r9	; 0x05
   13222:	84 82       	std	Z+4, r8	; 0x04
   13224:	82 e7       	ldi	r24, 0x72	; 114
                ++errors;
            }
            break;

        case PRINTER_CONFIG:
            if( MATCHI (token,"ADDRESS") )
   13226:	9c e1       	ldi	r25, 0x1C	; 28
   13228:	a0 e0       	ldi	r26, 0x00	; 0
   1322a:	0d c4       	rjmp	.+2074   	; 0x13a46 <Read_Config+0xbe0>
   1322c:	6a ec       	ldi	r22, 0xCA	; 202
   1322e:	7d e0       	ldi	r23, 0x0D	; 13
   13230:	c8 01       	movw	r24, r16
   13232:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <MATCHI>
            {
				if(val.b > 31)
   13236:	89 2b       	or	r24, r25
   13238:	89 f1       	breq	.+98     	; 0x1329c <Read_Config+0x436>
				{
					printf("Fatal PRINTER ADDRESS out of range: %ld disabled:%d\n", val.l, lines);
   1323a:	2f e1       	ldi	r18, 0x1F	; 31
   1323c:	24 15       	cp	r18, r4
   1323e:	c8 f4       	brcc	.+50     	; 0x13272 <Read_Config+0x40c>
   13240:	80 91 fd 18 	lds	r24, 0x18FD	; 0x8018fd <lines>
   13244:	90 91 fe 18 	lds	r25, 0x18FE	; 0x8018fe <lines+0x1>
   13248:	ed b7       	in	r30, 0x3d	; 61
   1324a:	fe b7       	in	r31, 0x3e	; 62
   1324c:	91 87       	std	Z+9, r25	; 0x09
   1324e:	80 87       	std	Z+8, r24	; 0x08
   13250:	44 82       	std	Z+4, r4	; 0x04
   13252:	55 82       	std	Z+5, r5	; 0x05
   13254:	66 82       	std	Z+6, r6	; 0x06
   13256:	77 82       	std	Z+7, r7	; 0x07
   13258:	8d e3       	ldi	r24, 0x3D	; 61
   1325a:	9c e1       	ldi	r25, 0x1C	; 28
   1325c:	a0 e0       	ldi	r26, 0x00	; 0
   1325e:	81 83       	std	Z+1, r24	; 0x01
   13260:	92 83       	std	Z+2, r25	; 0x02
					val.b = 0xff;
   13262:	a3 83       	std	Z+3, r26	; 0x03
   13264:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
                    ++errors;
   13268:	33 24       	eor	r3, r3
   1326a:	3a 94       	dec	r3
				}
                Devices[index].ADDRESS = val.b;
   1326c:	ff ef       	ldi	r31, 0xFF	; 255
   1326e:	ef 1a       	sub	r14, r31
   13270:	ff 0a       	sbc	r15, r31
   13272:	8b e2       	ldi	r24, 0x2B	; 43
   13274:	8c 9d       	mul	r24, r12
   13276:	f0 01       	movw	r30, r0
   13278:	8d 9d       	mul	r24, r13
   1327a:	f0 0d       	add	r31, r0
   1327c:	11 24       	eor	r1, r1
                PRINTERp->HEADER.ADDRESS  = val.b;
   1327e:	e6 57       	subi	r30, 0x76	; 118
   13280:	f1 4e       	sbci	r31, 0xE1	; 225
   13282:	31 82       	std	Z+1, r3	; 0x01
   13284:	c2 57       	subi	r28, 0x72	; 114
   13286:	de 4f       	sbci	r29, 0xFE	; 254
   13288:	a8 81       	ld	r26, Y
   1328a:	b9 81       	ldd	r27, Y+1	; 0x01
                // NO PPR
                Devices[index].PPR = 0xff;
   1328c:	ce 58       	subi	r28, 0x8E	; 142
   1328e:	d1 40       	sbci	r29, 0x01	; 1
                PRINTERp->HEADER.PPR = 0xff;
   13290:	3c 92       	st	X, r3
   13292:	8f ef       	ldi	r24, 0xFF	; 255
   13294:	82 83       	std	Z+2, r24	; 0x02
            }
            else
            {
                printf("Unexpected PRINTER CONFIG token: %s, at line:%d\n", str,lines);
   13296:	fd 01       	movw	r30, r26
   13298:	81 83       	std	Z+1, r24	; 0x01
   1329a:	92 ce       	rjmp	.-732    	; 0x12fc0 <Read_Config+0x15a>
   1329c:	80 91 fd 18 	lds	r24, 0x18FD	; 0x8018fd <lines>
   132a0:	90 91 fe 18 	lds	r25, 0x18FE	; 0x8018fe <lines+0x1>
   132a4:	ed b7       	in	r30, 0x3d	; 61
   132a6:	fe b7       	in	r31, 0x3e	; 62
   132a8:	97 83       	std	Z+7, r25	; 0x07
   132aa:	86 83       	std	Z+6, r24	; 0x06
   132ac:	95 82       	std	Z+5, r9	; 0x05
                ++errors;
            }
            break;

        case SS80_STATE:
            if( MATCHI (token,"HEADER") )
   132ae:	84 82       	std	Z+4, r8	; 0x04
   132b0:	8c e0       	ldi	r24, 0x0C	; 12
   132b2:	9c e1       	ldi	r25, 0x1C	; 28
   132b4:	b9 cf       	rjmp	.-142    	; 0x13228 <Read_Config+0x3c2>
   132b6:	69 ed       	ldi	r22, 0xD9	; 217
   132b8:	7d e0       	ldi	r23, 0x0D	; 13
   132ba:	c8 01       	movw	r24, r16
            {
                push_state(state);
   132bc:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <MATCHI>
   132c0:	89 2b       	or	r24, r25
   132c2:	61 f0       	breq	.+24     	; 0x132dc <Read_Config+0x476>
                state = SS80_HEADER;
   132c4:	81 e0       	ldi	r24, 0x01	; 1
   132c6:	90 e0       	ldi	r25, 0x00	; 0
   132c8:	58 dc       	rcall	.-1872   	; 0x12b7a <push_state>
   132ca:	22 e0       	ldi	r18, 0x02	; 2
   132cc:	30 e0       	ldi	r19, 0x00	; 0
   132ce:	c6 57       	subi	r28, 0x76	; 118
   132d0:	de 4f       	sbci	r29, 0xFE	; 254
   132d2:	39 83       	std	Y+1, r19	; 0x01
            }
            else if( MATCHI (token,"CONFIG") )
   132d4:	28 83       	st	Y, r18
   132d6:	ca 58       	subi	r28, 0x8A	; 138
   132d8:	d1 40       	sbci	r29, 0x01	; 1
   132da:	72 ce       	rjmp	.-796    	; 0x12fc0 <Read_Config+0x15a>
   132dc:	62 ed       	ldi	r22, 0xD2	; 210
   132de:	7d e0       	ldi	r23, 0x0D	; 13
   132e0:	c8 01       	movw	r24, r16
            {
                push_state(state);
   132e2:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <MATCHI>
   132e6:	89 2b       	or	r24, r25
                state = SS80_CONFIG;
   132e8:	31 f0       	breq	.+12     	; 0x132f6 <Read_Config+0x490>
   132ea:	81 e0       	ldi	r24, 0x01	; 1
   132ec:	90 e0       	ldi	r25, 0x00	; 0
            }
            else if( MATCHI (token,"CONTROLLER") )
   132ee:	45 dc       	rcall	.-1910   	; 0x12b7a <push_state>
   132f0:	83 e0       	ldi	r24, 0x03	; 3
   132f2:	90 e0       	ldi	r25, 0x00	; 0
   132f4:	db ce       	rjmp	.-586    	; 0x130ac <Read_Config+0x246>
   132f6:	60 ee       	ldi	r22, 0xE0	; 224
   132f8:	7d e0       	ldi	r23, 0x0D	; 13
   132fa:	c8 01       	movw	r24, r16
            {
                push_state(state);
   132fc:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <MATCHI>
   13300:	89 2b       	or	r24, r25
   13302:	61 f0       	breq	.+24     	; 0x1331c <Read_Config+0x4b6>
                state = SS80_CONTROLLER;
   13304:	81 e0       	ldi	r24, 0x01	; 1
   13306:	90 e0       	ldi	r25, 0x00	; 0
   13308:	38 dc       	rcall	.-1936   	; 0x12b7a <push_state>
   1330a:	a4 e0       	ldi	r26, 0x04	; 4
   1330c:	b0 e0       	ldi	r27, 0x00	; 0
   1330e:	c6 57       	subi	r28, 0x76	; 118
   13310:	de 4f       	sbci	r29, 0xFE	; 254
   13312:	b9 83       	std	Y+1, r27	; 0x01
            }
            else if( MATCHI (token,"UNIT") )
   13314:	a8 83       	st	Y, r26
   13316:	ca 58       	subi	r28, 0x8A	; 138
   13318:	d1 40       	sbci	r29, 0x01	; 1
   1331a:	52 ce       	rjmp	.-860    	; 0x12fc0 <Read_Config+0x15a>
   1331c:	6b ee       	ldi	r22, 0xEB	; 235
   1331e:	7d e0       	ldi	r23, 0x0D	; 13
   13320:	c8 01       	movw	r24, r16
            {
                push_state(state);
   13322:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <MATCHI>
   13326:	89 2b       	or	r24, r25
   13328:	61 f0       	breq	.+24     	; 0x13342 <Read_Config+0x4dc>
                state = SS80_UNIT;
   1332a:	81 e0       	ldi	r24, 0x01	; 1
   1332c:	90 e0       	ldi	r25, 0x00	; 0
   1332e:	25 dc       	rcall	.-1974   	; 0x12b7a <push_state>
   13330:	e5 e0       	ldi	r30, 0x05	; 5
   13332:	f0 e0       	ldi	r31, 0x00	; 0
   13334:	c6 57       	subi	r28, 0x76	; 118
   13336:	de 4f       	sbci	r29, 0xFE	; 254
   13338:	f9 83       	std	Y+1, r31	; 0x01
            }
            else if( MATCHI (token,"VOLUME") )
   1333a:	e8 83       	st	Y, r30
   1333c:	ca 58       	subi	r28, 0x8A	; 138
   1333e:	d1 40       	sbci	r29, 0x01	; 1
   13340:	3f ce       	rjmp	.-898    	; 0x12fc0 <Read_Config+0x15a>
   13342:	60 ef       	ldi	r22, 0xF0	; 240
   13344:	7d e0       	ldi	r23, 0x0D	; 13
   13346:	c8 01       	movw	r24, r16
            {
                push_state(state);
   13348:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <MATCHI>
   1334c:	89 2b       	or	r24, r25
   1334e:	31 f0       	breq	.+12     	; 0x1335c <Read_Config+0x4f6>
                state = SS80_VOLUME;
   13350:	81 e0       	ldi	r24, 0x01	; 1
   13352:	90 e0       	ldi	r25, 0x00	; 0
   13354:	12 dc       	rcall	.-2012   	; 0x12b7a <push_state>
            }
            else
            {
                printf("Unexpected SS80 START token: %s, at line:%d\n", str,lines);
   13356:	26 e0       	ldi	r18, 0x06	; 6
   13358:	30 e0       	ldi	r19, 0x00	; 0
   1335a:	b9 cf       	rjmp	.-142    	; 0x132ce <Read_Config+0x468>
   1335c:	80 91 fd 18 	lds	r24, 0x18FD	; 0x8018fd <lines>
   13360:	90 91 fe 18 	lds	r25, 0x18FE	; 0x8018fe <lines+0x1>
   13364:	ed b7       	in	r30, 0x3d	; 61
   13366:	fe b7       	in	r31, 0x3e	; 62
   13368:	97 83       	std	Z+7, r25	; 0x07
   1336a:	86 83       	std	Z+6, r24	; 0x06
   1336c:	95 82       	std	Z+5, r9	; 0x05
   1336e:	84 82       	std	Z+4, r8	; 0x04
            }
            break;


        case SS80_HEADER:
            if( MATCHI (token,"ADDRESS") )
   13370:	8f ed       	ldi	r24, 0xDF	; 223
   13372:	9b e1       	ldi	r25, 0x1B	; 27
   13374:	59 cf       	rjmp	.-334    	; 0x13228 <Read_Config+0x3c2>
   13376:	6a ec       	ldi	r22, 0xCA	; 202
   13378:	7d e0       	ldi	r23, 0x0D	; 13
   1337a:	c8 01       	movw	r24, r16
   1337c:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <MATCHI>
            {
                if(val.b > 31)
   13380:	89 2b       	or	r24, r25
   13382:	19 f1       	breq	.+70     	; 0x133ca <Read_Config+0x564>
				{
					printf("Fatal SS80 ADDRESS > 31 at line d\n", lines);
   13384:	2f e1       	ldi	r18, 0x1F	; 31
   13386:	24 15       	cp	r18, r4
   13388:	a8 f4       	brcc	.+42     	; 0x133b4 <Read_Config+0x54e>
   1338a:	80 91 fd 18 	lds	r24, 0x18FD	; 0x8018fd <lines>
   1338e:	90 91 fe 18 	lds	r25, 0x18FE	; 0x8018fe <lines+0x1>
   13392:	ed b7       	in	r30, 0x3d	; 61
   13394:	fe b7       	in	r31, 0x3e	; 62
   13396:	95 83       	std	Z+5, r25	; 0x05
   13398:	84 83       	std	Z+4, r24	; 0x04
   1339a:	8c eb       	ldi	r24, 0xBC	; 188
   1339c:	9b e1       	ldi	r25, 0x1B	; 27
   1339e:	a0 e0       	ldi	r26, 0x00	; 0
   133a0:	81 83       	std	Z+1, r24	; 0x01
   133a2:	92 83       	std	Z+2, r25	; 0x02
					val.b = 0xff;
   133a4:	a3 83       	std	Z+3, r26	; 0x03
   133a6:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
					++errors;
   133aa:	33 24       	eor	r3, r3
   133ac:	3a 94       	dec	r3
				}
                Devices[index].ADDRESS = val.b;
   133ae:	ff ef       	ldi	r31, 0xFF	; 255
   133b0:	ef 1a       	sub	r14, r31
   133b2:	ff 0a       	sbc	r15, r31
   133b4:	8b e2       	ldi	r24, 0x2B	; 43
   133b6:	8c 9d       	mul	r24, r12
   133b8:	f0 01       	movw	r30, r0
   133ba:	8d 9d       	mul	r24, r13
   133bc:	f0 0d       	add	r31, r0
   133be:	11 24       	eor	r1, r1
                SS80p->HEADER.ADDRESS  = val.b;
   133c0:	e6 57       	subi	r30, 0x76	; 118
   133c2:	f1 4e       	sbci	r31, 0xE1	; 225
            }
            else if( MATCHI (token,"PPR") )
   133c4:	31 82       	std	Z+1, r3	; 0x01
   133c6:	d5 01       	movw	r26, r10
   133c8:	30 c2       	rjmp	.+1120   	; 0x1382a <Read_Config+0x9c4>
   133ca:	67 ef       	ldi	r22, 0xF7	; 247
   133cc:	7d e0       	ldi	r23, 0x0D	; 13
   133ce:	c8 01       	movw	r24, r16
   133d0:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <MATCHI>
            {
                if(val.b > 7)
   133d4:	89 2b       	or	r24, r25
   133d6:	19 f1       	breq	.+70     	; 0x1341e <Read_Config+0x5b8>
				{
					printf("Warning SS80 PPR > 7 at line:%d\n", lines);
   133d8:	b7 e0       	ldi	r27, 0x07	; 7
   133da:	b4 15       	cp	r27, r4
   133dc:	a8 f4       	brcc	.+42     	; 0x13408 <Read_Config+0x5a2>
   133de:	80 91 fd 18 	lds	r24, 0x18FD	; 0x8018fd <lines>
   133e2:	90 91 fe 18 	lds	r25, 0x18FE	; 0x8018fe <lines+0x1>
   133e6:	ed b7       	in	r30, 0x3d	; 61
   133e8:	fe b7       	in	r31, 0x3e	; 62
   133ea:	95 83       	std	Z+5, r25	; 0x05
   133ec:	84 83       	std	Z+4, r24	; 0x04
   133ee:	8b e9       	ldi	r24, 0x9B	; 155
   133f0:	9b e1       	ldi	r25, 0x1B	; 27
   133f2:	a0 e0       	ldi	r26, 0x00	; 0
   133f4:	81 83       	std	Z+1, r24	; 0x01
   133f6:	92 83       	std	Z+2, r25	; 0x02
					val.b = 0xff;
   133f8:	a3 83       	std	Z+3, r26	; 0x03
   133fa:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
					++errors;
   133fe:	33 24       	eor	r3, r3
   13400:	3a 94       	dec	r3
				}
                Devices[index].PPR = val.b;
   13402:	ff ef       	ldi	r31, 0xFF	; 255
   13404:	ef 1a       	sub	r14, r31
   13406:	ff 0a       	sbc	r15, r31
   13408:	8b e2       	ldi	r24, 0x2B	; 43
   1340a:	8c 9d       	mul	r24, r12
   1340c:	f0 01       	movw	r30, r0
   1340e:	8d 9d       	mul	r24, r13
   13410:	f0 0d       	add	r31, r0
   13412:	11 24       	eor	r1, r1
                SS80p->HEADER.PPR = val.b;
   13414:	e6 57       	subi	r30, 0x76	; 118
   13416:	f1 4e       	sbci	r31, 0xE1	; 225
            }
            else if( MATCHI (token,"FILE") )
   13418:	32 82       	std	Z+2, r3	; 0x02
   1341a:	f5 01       	movw	r30, r10
   1341c:	3c c2       	rjmp	.+1144   	; 0x13896 <Read_Config+0xa30>
   1341e:	6b ef       	ldi	r22, 0xFB	; 251
   13420:	7d e0       	ldi	r23, 0x0D	; 13
   13422:	c8 01       	movw	r24, r16
   13424:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <MATCHI>
            {
                SS80p->HEADER.NAME = stralloc(arg);
   13428:	89 2b       	or	r24, r25
   1342a:	31 f0       	breq	.+12     	; 0x13438 <Read_Config+0x5d2>
   1342c:	ce 01       	movw	r24, r28
   1342e:	0a 96       	adiw	r24, 0x0a	; 10
   13430:	0e 94 e3 32 	call	0x65c6	; 0x65c6 <stralloc>
            }
            else
            {
                printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", token,lines);
   13434:	f5 01       	movw	r30, r10
   13436:	42 c2       	rjmp	.+1156   	; 0x138bc <Read_Config+0xa56>
   13438:	80 91 fd 18 	lds	r24, 0x18FD	; 0x8018fd <lines>
   1343c:	90 91 fe 18 	lds	r25, 0x18FE	; 0x8018fe <lines+0x1>
   13440:	ed b7       	in	r30, 0x3d	; 61
   13442:	fe b7       	in	r31, 0x3e	; 62
   13444:	97 83       	std	Z+7, r25	; 0x07
   13446:	86 83       	std	Z+6, r24	; 0x06
   13448:	15 83       	std	Z+5, r17	; 0x05
   1344a:	04 83       	std	Z+4, r16	; 0x04
                ++errors;
            }
            break;

        case SS80_CONFIG:
            if( MATCHI (token,"ID") )
   1344c:	8d e6       	ldi	r24, 0x6D	; 109
   1344e:	9b e1       	ldi	r25, 0x1B	; 27
   13450:	eb ce       	rjmp	.-554    	; 0x13228 <Read_Config+0x3c2>
   13452:	60 e0       	ldi	r22, 0x00	; 0
   13454:	7e e0       	ldi	r23, 0x0E	; 14
   13456:	c8 01       	movw	r24, r16
   13458:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <MATCHI>
            {
                SS80p->CONFIG.ID = val.w;
   1345c:	89 2b       	or	r24, r25
            }
            else
            {
                printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", str,lines);
   1345e:	11 f0       	breq	.+4      	; 0x13464 <Read_Config+0x5fe>
   13460:	f5 01       	movw	r30, r10
   13462:	4e c2       	rjmp	.+1180   	; 0x13900 <Read_Config+0xa9a>
   13464:	80 91 fd 18 	lds	r24, 0x18FD	; 0x8018fd <lines>
   13468:	90 91 fe 18 	lds	r25, 0x18FE	; 0x8018fe <lines+0x1>
   1346c:	ed b7       	in	r30, 0x3d	; 61
   1346e:	fe b7       	in	r31, 0x3e	; 62
   13470:	97 83       	std	Z+7, r25	; 0x07
   13472:	86 83       	std	Z+6, r24	; 0x06
   13474:	95 82       	std	Z+5, r9	; 0x05
   13476:	84 82       	std	Z+4, r8	; 0x04
                ++errors;
            }
            break;

        case SS80_CONTROLLER:
            if( MATCHI (token,"UNITS_INSTALLED") )
   13478:	8f e3       	ldi	r24, 0x3F	; 63
   1347a:	9b e1       	ldi	r25, 0x1B	; 27
   1347c:	d5 ce       	rjmp	.-598    	; 0x13228 <Read_Config+0x3c2>
   1347e:	63 e0       	ldi	r22, 0x03	; 3
   13480:	7e e0       	ldi	r23, 0x0E	; 14
   13482:	c8 01       	movw	r24, r16
   13484:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <MATCHI>
            {
                SS80p->CONTROLLER.UNITS_INSTALLED = val.w;
   13488:	89 2b       	or	r24, r25
   1348a:	21 f0       	breq	.+8      	; 0x13494 <Read_Config+0x62e>
   1348c:	f5 01       	movw	r30, r10
            }
            else if( MATCHI (token,"TRANSFER_RATE") )
   1348e:	57 82       	std	Z+7, r5	; 0x07
   13490:	46 82       	std	Z+6, r4	; 0x06
   13492:	96 cd       	rjmp	.-1236   	; 0x12fc0 <Read_Config+0x15a>
   13494:	64 e8       	ldi	r22, 0x84	; 132
   13496:	7e e0       	ldi	r23, 0x0E	; 14
   13498:	c8 01       	movw	r24, r16
   1349a:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <MATCHI>
            {
                SS80p->CONTROLLER.TRANSFER_RATE = val.w;
   1349e:	89 2b       	or	r24, r25
            }
            else if( MATCHI (token,"TYPE") )
   134a0:	11 f0       	breq	.+4      	; 0x134a6 <Read_Config+0x640>
   134a2:	f5 01       	movw	r30, r10
   134a4:	81 c2       	rjmp	.+1282   	; 0x139a8 <Read_Config+0xb42>
   134a6:	66 e5       	ldi	r22, 0x56	; 86
   134a8:	7d e0       	ldi	r23, 0x0D	; 13
   134aa:	c8 01       	movw	r24, r16
   134ac:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <MATCHI>
            {
                SS80p->CONTROLLER.TYPE = val.w;
   134b0:	89 2b       	or	r24, r25
   134b2:	19 f0       	breq	.+6      	; 0x134ba <Read_Config+0x654>
            }
            else
            {
                printf("Unexpected SS80 CONTROLLER token: %s, at line:%d\n", token,lines);
   134b4:	f5 01       	movw	r30, r10
   134b6:	42 86       	std	Z+10, r4	; 0x0a
   134b8:	83 cd       	rjmp	.-1274   	; 0x12fc0 <Read_Config+0x15a>
   134ba:	80 91 fd 18 	lds	r24, 0x18FD	; 0x8018fd <lines>
   134be:	90 91 fe 18 	lds	r25, 0x18FE	; 0x8018fe <lines+0x1>
   134c2:	ed b7       	in	r30, 0x3d	; 61
   134c4:	fe b7       	in	r31, 0x3e	; 62
   134c6:	97 83       	std	Z+7, r25	; 0x07
   134c8:	86 83       	std	Z+6, r24	; 0x06
   134ca:	15 83       	std	Z+5, r17	; 0x05
   134cc:	04 83       	std	Z+4, r16	; 0x04
            }
            break;


        case SS80_UNIT:
            if( MATCHI (token,"UNIT_TYPE") )
   134ce:	8d e0       	ldi	r24, 0x0D	; 13
   134d0:	9b e1       	ldi	r25, 0x1B	; 27
   134d2:	aa ce       	rjmp	.-684    	; 0x13228 <Read_Config+0x3c2>
   134d4:	63 e1       	ldi	r22, 0x13	; 19
   134d6:	7e e0       	ldi	r23, 0x0E	; 14
   134d8:	c8 01       	movw	r24, r16
   134da:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <MATCHI>
            {
                SS80p->UNIT.UNIT_TYPE = val.w;
   134de:	89 2b       	or	r24, r25
   134e0:	19 f0       	breq	.+6      	; 0x134e8 <Read_Config+0x682>
            }
            else if( MATCHI (token,"DEVICE_NUMBER") )
   134e2:	f5 01       	movw	r30, r10
   134e4:	43 86       	std	Z+11, r4	; 0x0b
   134e6:	6c cd       	rjmp	.-1320   	; 0x12fc0 <Read_Config+0x15a>
   134e8:	6d e1       	ldi	r22, 0x1D	; 29
   134ea:	7e e0       	ldi	r23, 0x0E	; 14
   134ec:	c8 01       	movw	r24, r16
   134ee:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <MATCHI>
            {
                SS80p->UNIT.DEVICE_NUMBER = val.l;
   134f2:	89 2b       	or	r24, r25
   134f4:	31 f0       	breq	.+12     	; 0x13502 <Read_Config+0x69c>
   134f6:	f5 01       	movw	r30, r10
   134f8:	44 86       	std	Z+12, r4	; 0x0c
   134fa:	55 86       	std	Z+13, r5	; 0x0d
            }
            else if( MATCHI (token,"BYTES_PER_BLOCK") )
   134fc:	66 86       	std	Z+14, r6	; 0x0e
   134fe:	77 86       	std	Z+15, r7	; 0x0f
   13500:	5f cd       	rjmp	.-1346   	; 0x12fc0 <Read_Config+0x15a>
   13502:	6b e2       	ldi	r22, 0x2B	; 43
   13504:	7e e0       	ldi	r23, 0x0E	; 14
   13506:	c8 01       	movw	r24, r16
   13508:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <MATCHI>
            {
                if(val.w > 0x1000)
   1350c:	89 2b       	or	r24, r25
   1350e:	11 f1       	breq	.+68     	; 0x13554 <Read_Config+0x6ee>
   13510:	f1 e0       	ldi	r31, 0x01	; 1
   13512:	4f 16       	cp	r4, r31
				{
					printf("Fatal: SS80 BYTES_PER_BLOCK > 0x1000, set to 256 at line:%d\n", lines);
   13514:	f0 e1       	ldi	r31, 0x10	; 16
   13516:	5f 06       	cpc	r5, r31
   13518:	b8 f0       	brcs	.+46     	; 0x13548 <Read_Config+0x6e2>
   1351a:	80 91 fd 18 	lds	r24, 0x18FD	; 0x8018fd <lines>
   1351e:	90 91 fe 18 	lds	r25, 0x18FE	; 0x8018fe <lines+0x1>
   13522:	ed b7       	in	r30, 0x3d	; 61
   13524:	fe b7       	in	r31, 0x3e	; 62
   13526:	95 83       	std	Z+5, r25	; 0x05
   13528:	84 83       	std	Z+4, r24	; 0x04
   1352a:	80 ed       	ldi	r24, 0xD0	; 208
   1352c:	9a e1       	ldi	r25, 0x1A	; 26
   1352e:	a0 e0       	ldi	r26, 0x00	; 0
   13530:	81 83       	std	Z+1, r24	; 0x01
   13532:	92 83       	std	Z+2, r25	; 0x02
					val.w = 256;
   13534:	a3 83       	std	Z+3, r26	; 0x03
   13536:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   1353a:	80 e0       	ldi	r24, 0x00	; 0
                    ++errors;
   1353c:	91 e0       	ldi	r25, 0x01	; 1
   1353e:	38 2e       	mov	r3, r24
   13540:	29 2e       	mov	r2, r25
				}
                SS80p->UNIT.BYTES_PER_BLOCK = val.w;
   13542:	ff ef       	ldi	r31, 0xFF	; 255
   13544:	ef 1a       	sub	r14, r31
   13546:	ff 0a       	sbc	r15, r31
   13548:	83 2d       	mov	r24, r3
   1354a:	92 2d       	mov	r25, r2
   1354c:	f5 01       	movw	r30, r10
            }
            else if( MATCHI (token,"BUFFERED_BLOCKS") )
   1354e:	91 8b       	std	Z+17, r25	; 0x11
   13550:	80 8b       	std	Z+16, r24	; 0x10
   13552:	36 cd       	rjmp	.-1428   	; 0x12fc0 <Read_Config+0x15a>
   13554:	6b e3       	ldi	r22, 0x3B	; 59
   13556:	7e e0       	ldi	r23, 0x0E	; 14
   13558:	c8 01       	movw	r24, r16
   1355a:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <MATCHI>
            {
				if(val.b > 1)
   1355e:	89 2b       	or	r24, r25
   13560:	e9 f0       	breq	.+58     	; 0x1359c <Read_Config+0x736>
				{
					printf("Fatal: SS80 BUFFERED_BLOCKS > 1, set to 1 at line:%d\n", lines);
   13562:	f1 e0       	ldi	r31, 0x01	; 1
   13564:	f4 15       	cp	r31, r4
   13566:	b8 f4       	brcc	.+46     	; 0x13596 <Read_Config+0x730>
   13568:	80 91 fd 18 	lds	r24, 0x18FD	; 0x8018fd <lines>
   1356c:	90 91 fe 18 	lds	r25, 0x18FE	; 0x8018fe <lines+0x1>
   13570:	ed b7       	in	r30, 0x3d	; 61
   13572:	fe b7       	in	r31, 0x3e	; 62
   13574:	95 83       	std	Z+5, r25	; 0x05
   13576:	84 83       	std	Z+4, r24	; 0x04
   13578:	8a e9       	ldi	r24, 0x9A	; 154
   1357a:	9a e1       	ldi	r25, 0x1A	; 26
   1357c:	a0 e0       	ldi	r26, 0x00	; 0
   1357e:	81 83       	std	Z+1, r24	; 0x01
   13580:	92 83       	std	Z+2, r25	; 0x02
                    ++errors;
   13582:	a3 83       	std	Z+3, r26	; 0x03
   13584:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
					val.w = 1;
   13588:	ff ef       	ldi	r31, 0xFF	; 255
   1358a:	ef 1a       	sub	r14, r31
   1358c:	ff 0a       	sbc	r15, r31
   1358e:	81 e0       	ldi	r24, 0x01	; 1
				}
                SS80p->UNIT.BUFFERED_BLOCKS = val.b;
   13590:	90 e0       	ldi	r25, 0x00	; 0
   13592:	38 2e       	mov	r3, r24
   13594:	29 2e       	mov	r2, r25
            }
            else if( MATCHI (token,"BURST_SIZE") )
   13596:	f5 01       	movw	r30, r10
   13598:	32 8a       	std	Z+18, r3	; 0x12
   1359a:	12 cd       	rjmp	.-1500   	; 0x12fc0 <Read_Config+0x15a>
   1359c:	6b e4       	ldi	r22, 0x4B	; 75
   1359e:	7e e0       	ldi	r23, 0x0E	; 14
   135a0:	c8 01       	movw	r24, r16
   135a2:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <MATCHI>
            {
				if(val.b > 0)
   135a6:	89 2b       	or	r24, r25
				{
					printf("Fatal: SS80 BURST_SIZE > 0, set to 1 at line:%d\n", lines);
   135a8:	e1 f0       	breq	.+56     	; 0x135e2 <Read_Config+0x77c>
   135aa:	44 20       	and	r4, r4
   135ac:	b9 f0       	breq	.+46     	; 0x135dc <Read_Config+0x776>
   135ae:	80 91 fd 18 	lds	r24, 0x18FD	; 0x8018fd <lines>
   135b2:	90 91 fe 18 	lds	r25, 0x18FE	; 0x8018fe <lines+0x1>
   135b6:	ed b7       	in	r30, 0x3d	; 61
   135b8:	fe b7       	in	r31, 0x3e	; 62
   135ba:	95 83       	std	Z+5, r25	; 0x05
   135bc:	84 83       	std	Z+4, r24	; 0x04
   135be:	89 e6       	ldi	r24, 0x69	; 105
   135c0:	9a e1       	ldi	r25, 0x1A	; 26
   135c2:	a0 e0       	ldi	r26, 0x00	; 0
   135c4:	81 83       	std	Z+1, r24	; 0x01
   135c6:	92 83       	std	Z+2, r25	; 0x02
                    ++errors;
   135c8:	a3 83       	std	Z+3, r26	; 0x03
   135ca:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
					val.w = 0;
   135ce:	ff ef       	ldi	r31, 0xFF	; 255
   135d0:	ef 1a       	sub	r14, r31
   135d2:	ff 0a       	sbc	r15, r31
   135d4:	80 e0       	ldi	r24, 0x00	; 0
				}
                SS80p->UNIT.BURST_SIZE = val.b;
   135d6:	90 e0       	ldi	r25, 0x00	; 0
   135d8:	38 2e       	mov	r3, r24
   135da:	29 2e       	mov	r2, r25
            }
            else if( MATCHI (token,"BLOCK_TIME") )
   135dc:	f5 01       	movw	r30, r10
   135de:	33 8a       	std	Z+19, r3	; 0x13
   135e0:	ef cc       	rjmp	.-1570   	; 0x12fc0 <Read_Config+0x15a>
   135e2:	66 e5       	ldi	r22, 0x56	; 86
   135e4:	7e e0       	ldi	r23, 0x0E	; 14
   135e6:	c8 01       	movw	r24, r16
   135e8:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <MATCHI>
            {
                SS80p->UNIT.BLOCK_TIME = val.w;
   135ec:	89 2b       	or	r24, r25
   135ee:	21 f0       	breq	.+8      	; 0x135f8 <Read_Config+0x792>
   135f0:	f5 01       	movw	r30, r10
            }
            else if( MATCHI (token,"CONTINUOUS_TRANSFER_RATE") || MATCHI (token,"CONTINOUS_TRANSFER_RATE") )
   135f2:	55 8a       	std	Z+21, r5	; 0x15
   135f4:	44 8a       	std	Z+20, r4	; 0x14
   135f6:	e4 cc       	rjmp	.-1592   	; 0x12fc0 <Read_Config+0x15a>
   135f8:	61 e6       	ldi	r22, 0x61	; 97
   135fa:	7e e0       	ldi	r23, 0x0E	; 14
   135fc:	c8 01       	movw	r24, r16
   135fe:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <MATCHI>
            {
                SS80p->UNIT.CONTINUOUS_TRANSFER_RATE = val.w;
   13602:	89 2b       	or	r24, r25
   13604:	21 f0       	breq	.+8      	; 0x1360e <Read_Config+0x7a8>
   13606:	f5 01       	movw	r30, r10
            }
            else if( MATCHI (token,"BLOCK_TIME") )
            {
                SS80p->UNIT.BLOCK_TIME = val.w;
            }
            else if( MATCHI (token,"CONTINUOUS_TRANSFER_RATE") || MATCHI (token,"CONTINOUS_TRANSFER_RATE") )
   13608:	57 8a       	std	Z+23, r5	; 0x17
   1360a:	46 8a       	std	Z+22, r4	; 0x16
   1360c:	d9 cc       	rjmp	.-1614   	; 0x12fc0 <Read_Config+0x15a>
   1360e:	6a e7       	ldi	r22, 0x7A	; 122
   13610:	7e e0       	ldi	r23, 0x0E	; 14
   13612:	c8 01       	movw	r24, r16
   13614:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <MATCHI>
            {
                SS80p->UNIT.CONTINUOUS_TRANSFER_RATE = val.w;
            }
            else if( MATCHI (token,"OPTIMAL_RETRY_TIME") )
   13618:	89 2b       	or	r24, r25
   1361a:	a9 f7       	brne	.-22     	; 0x13606 <Read_Config+0x7a0>
   1361c:	62 e9       	ldi	r22, 0x92	; 146
   1361e:	7e e0       	ldi	r23, 0x0E	; 14
   13620:	c8 01       	movw	r24, r16
   13622:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <MATCHI>
            {
                SS80p->UNIT.OPTIMAL_RETRY_TIME = val.w;
   13626:	89 2b       	or	r24, r25
   13628:	21 f0       	breq	.+8      	; 0x13632 <Read_Config+0x7cc>
   1362a:	f5 01       	movw	r30, r10
            }
            else if( MATCHI (token,"ACCESS_TIME") )
   1362c:	51 8e       	std	Z+25, r5	; 0x19
   1362e:	40 8e       	std	Z+24, r4	; 0x18
   13630:	c7 cc       	rjmp	.-1650   	; 0x12fc0 <Read_Config+0x15a>
   13632:	65 ea       	ldi	r22, 0xA5	; 165
   13634:	7e e0       	ldi	r23, 0x0E	; 14
   13636:	c8 01       	movw	r24, r16
   13638:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <MATCHI>
            {
                SS80p->UNIT.ACCESS_TIME = val.w;
   1363c:	89 2b       	or	r24, r25
   1363e:	21 f0       	breq	.+8      	; 0x13648 <Read_Config+0x7e2>
   13640:	f5 01       	movw	r30, r10
            }
            else if( MATCHI (token,"MAXIMUM_INTERLEAVE") )
   13642:	53 8e       	std	Z+27, r5	; 0x1b
   13644:	42 8e       	std	Z+26, r4	; 0x1a
   13646:	bc cc       	rjmp	.-1672   	; 0x12fc0 <Read_Config+0x15a>
   13648:	61 eb       	ldi	r22, 0xB1	; 177
   1364a:	7e e0       	ldi	r23, 0x0E	; 14
   1364c:	c8 01       	movw	r24, r16
   1364e:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <MATCHI>
            {
                SS80p->UNIT.MAXIMUM_INTERLEAVE = val.b;
   13652:	89 2b       	or	r24, r25
   13654:	19 f0       	breq	.+6      	; 0x1365c <Read_Config+0x7f6>
            }
            else if( MATCHI (token,"FIXED_VOLUMES") )
   13656:	f5 01       	movw	r30, r10
   13658:	44 8e       	std	Z+28, r4	; 0x1c
   1365a:	b2 cc       	rjmp	.-1692   	; 0x12fc0 <Read_Config+0x15a>
   1365c:	64 ec       	ldi	r22, 0xC4	; 196
   1365e:	7e e0       	ldi	r23, 0x0E	; 14
   13660:	c8 01       	movw	r24, r16
   13662:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <MATCHI>
            {
                SS80p->UNIT.FIXED_VOLUMES = val.b;
   13666:	89 2b       	or	r24, r25
   13668:	19 f0       	breq	.+6      	; 0x13670 <Read_Config+0x80a>
            }
            else if( MATCHI (token,"REMOVABLE_VOLUMES") )
   1366a:	f5 01       	movw	r30, r10
   1366c:	45 8e       	std	Z+29, r4	; 0x1d
   1366e:	a8 cc       	rjmp	.-1712   	; 0x12fc0 <Read_Config+0x15a>
   13670:	62 ed       	ldi	r22, 0xD2	; 210
   13672:	7e e0       	ldi	r23, 0x0E	; 14
   13674:	c8 01       	movw	r24, r16
   13676:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <MATCHI>
            {
                SS80p->UNIT.REMOVABLE_VOLUMES = val.b;
   1367a:	89 2b       	or	r24, r25
   1367c:	19 f0       	breq	.+6      	; 0x13684 <Read_Config+0x81e>
            }
            else
            {
                printf("Unexpected SS80 UNIT token: %s, at line:%d\n", token,lines);
   1367e:	f5 01       	movw	r30, r10
   13680:	46 8e       	std	Z+30, r4	; 0x1e
   13682:	9e cc       	rjmp	.-1732   	; 0x12fc0 <Read_Config+0x15a>
   13684:	80 91 fd 18 	lds	r24, 0x18FD	; 0x8018fd <lines>
   13688:	90 91 fe 18 	lds	r25, 0x18FE	; 0x8018fe <lines+0x1>
   1368c:	ed b7       	in	r30, 0x3d	; 61
   1368e:	fe b7       	in	r31, 0x3e	; 62
   13690:	97 83       	std	Z+7, r25	; 0x07
   13692:	86 83       	std	Z+6, r24	; 0x06
   13694:	15 83       	std	Z+5, r17	; 0x05
   13696:	04 83       	std	Z+4, r16	; 0x04
                ++errors;
            }
            break;

        case SS80_VOLUME:
            if( MATCHI (token,"MAX_CYLINDER") )
   13698:	8d e3       	ldi	r24, 0x3D	; 61
   1369a:	9a e1       	ldi	r25, 0x1A	; 26
   1369c:	c5 cd       	rjmp	.-1142   	; 0x13228 <Read_Config+0x3c2>
   1369e:	64 ee       	ldi	r22, 0xE4	; 228
   136a0:	7e e0       	ldi	r23, 0x0E	; 14
   136a2:	c8 01       	movw	r24, r16
   136a4:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <MATCHI>
            {
                SS80p->VOLUME.MAX_CYLINDER = val.l;
   136a8:	89 2b       	or	r24, r25
   136aa:	31 f0       	breq	.+12     	; 0x136b8 <Read_Config+0x852>
   136ac:	f5 01       	movw	r30, r10
   136ae:	47 8e       	std	Z+31, r4	; 0x1f
   136b0:	50 a2       	std	Z+32, r5	; 0x20
            }
            else if( MATCHI (token,"MAX_HEAD") )
   136b2:	61 a2       	std	Z+33, r6	; 0x21
   136b4:	72 a2       	std	Z+34, r7	; 0x22
   136b6:	84 cc       	rjmp	.-1784   	; 0x12fc0 <Read_Config+0x15a>
   136b8:	61 ef       	ldi	r22, 0xF1	; 241
   136ba:	7e e0       	ldi	r23, 0x0E	; 14
   136bc:	c8 01       	movw	r24, r16
   136be:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <MATCHI>
            {
                SS80p->VOLUME.MAX_HEAD = val.b;
   136c2:	89 2b       	or	r24, r25
   136c4:	19 f0       	breq	.+6      	; 0x136cc <Read_Config+0x866>
            }
            else if( MATCHI (token,"MAX_SECTOR") )
   136c6:	f5 01       	movw	r30, r10
   136c8:	43 a2       	std	Z+35, r4	; 0x23
   136ca:	7a cc       	rjmp	.-1804   	; 0x12fc0 <Read_Config+0x15a>
   136cc:	6a ef       	ldi	r22, 0xFA	; 250
   136ce:	7e e0       	ldi	r23, 0x0E	; 14
   136d0:	c8 01       	movw	r24, r16
   136d2:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <MATCHI>
            {
                SS80p->VOLUME.MAX_SECTOR = val.w;
   136d6:	89 2b       	or	r24, r25
   136d8:	21 f0       	breq	.+8      	; 0x136e2 <Read_Config+0x87c>
   136da:	f5 01       	movw	r30, r10
            }
            else if( MATCHI (token,"MAX_BLOCK_NUMBER") )
   136dc:	55 a2       	std	Z+37, r5	; 0x25
   136de:	44 a2       	std	Z+36, r4	; 0x24
   136e0:	6f cc       	rjmp	.-1826   	; 0x12fc0 <Read_Config+0x15a>
   136e2:	65 e0       	ldi	r22, 0x05	; 5
   136e4:	7f e0       	ldi	r23, 0x0F	; 15
   136e6:	c8 01       	movw	r24, r16
   136e8:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <MATCHI>
            {
                SS80p->VOLUME.MAX_BLOCK_NUMBER = val.w;
   136ec:	89 2b       	or	r24, r25
   136ee:	41 f0       	breq	.+16     	; 0x13700 <Read_Config+0x89a>
   136f0:	61 2c       	mov	r6, r1
   136f2:	71 2c       	mov	r7, r1
   136f4:	f5 01       	movw	r30, r10
   136f6:	46 a2       	std	Z+38, r4	; 0x26
   136f8:	57 a2       	std	Z+39, r5	; 0x27
            }
            else if( MATCHI (token,"INTERLEAVE") )
   136fa:	60 a6       	std	Z+40, r6	; 0x28
   136fc:	71 a6       	std	Z+41, r7	; 0x29
   136fe:	60 cc       	rjmp	.-1856   	; 0x12fc0 <Read_Config+0x15a>
   13700:	69 eb       	ldi	r22, 0xB9	; 185
   13702:	7e e0       	ldi	r23, 0x0E	; 14
   13704:	c8 01       	movw	r24, r16
   13706:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <MATCHI>
            {
                SS80p->VOLUME.INTERLEAVE = val.b;
   1370a:	89 2b       	or	r24, r25
   1370c:	19 f0       	breq	.+6      	; 0x13714 <Read_Config+0x8ae>

            }
            else
            {
                printf("Unexpected SS80 VOLUME token: %s, at line:%d\n", token,lines);
   1370e:	f5 01       	movw	r30, r10
   13710:	42 a6       	std	Z+42, r4	; 0x2a
   13712:	56 cc       	rjmp	.-1876   	; 0x12fc0 <Read_Config+0x15a>
   13714:	80 91 fd 18 	lds	r24, 0x18FD	; 0x8018fd <lines>
   13718:	90 91 fe 18 	lds	r25, 0x18FE	; 0x8018fe <lines+0x1>
   1371c:	ed b7       	in	r30, 0x3d	; 61
   1371e:	fe b7       	in	r31, 0x3e	; 62
   13720:	97 83       	std	Z+7, r25	; 0x07
   13722:	86 83       	std	Z+6, r24	; 0x06
   13724:	15 83       	std	Z+5, r17	; 0x05
            }
            break;

#ifdef AMIGO
        case AMIGO_STATE:
            if( MATCHI (token,"HEADER") )
   13726:	04 83       	std	Z+4, r16	; 0x04
   13728:	8f e0       	ldi	r24, 0x0F	; 15
   1372a:	9a e1       	ldi	r25, 0x1A	; 26
   1372c:	7d cd       	rjmp	.-1286   	; 0x13228 <Read_Config+0x3c2>
   1372e:	69 ed       	ldi	r22, 0xD9	; 217
   13730:	7d e0       	ldi	r23, 0x0D	; 13
            {
                push_state(state);
   13732:	c8 01       	movw	r24, r16
   13734:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <MATCHI>
   13738:	89 2b       	or	r24, r25
                state = AMIGO_HEADER;
   1373a:	31 f0       	breq	.+12     	; 0x13748 <Read_Config+0x8e2>
   1373c:	8a e0       	ldi	r24, 0x0A	; 10
   1373e:	90 e0       	ldi	r25, 0x00	; 0
            }
            else if( MATCHI (token,"CONFIG") )
   13740:	1c da       	rcall	.-3016   	; 0x12b7a <push_state>
   13742:	2b e0       	ldi	r18, 0x0B	; 11
   13744:	30 e0       	ldi	r19, 0x00	; 0
   13746:	c3 cd       	rjmp	.-1146   	; 0x132ce <Read_Config+0x468>
   13748:	62 ed       	ldi	r22, 0xD2	; 210
   1374a:	7d e0       	ldi	r23, 0x0D	; 13
            {
                push_state(state);
   1374c:	c8 01       	movw	r24, r16
   1374e:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <MATCHI>
   13752:	89 2b       	or	r24, r25
                state = AMIGO_CONFIG;
   13754:	31 f0       	breq	.+12     	; 0x13762 <Read_Config+0x8fc>
   13756:	8a e0       	ldi	r24, 0x0A	; 10
   13758:	90 e0       	ldi	r25, 0x00	; 0
            }
            else if( MATCHI (token,"GEOMETRY") )
   1375a:	0f da       	rcall	.-3042   	; 0x12b7a <push_state>
   1375c:	8c e0       	ldi	r24, 0x0C	; 12
   1375e:	90 e0       	ldi	r25, 0x00	; 0
   13760:	a5 cc       	rjmp	.-1718   	; 0x130ac <Read_Config+0x246>
   13762:	66 e1       	ldi	r22, 0x16	; 22
   13764:	7f e0       	ldi	r23, 0x0F	; 15
   13766:	c8 01       	movw	r24, r16
            {
                push_state(state);
   13768:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <MATCHI>
   1376c:	89 2b       	or	r24, r25
   1376e:	31 f0       	breq	.+12     	; 0x1377c <Read_Config+0x916>
                state = AMIGO_GEOMETRY;
   13770:	8a e0       	ldi	r24, 0x0A	; 10
   13772:	90 e0       	ldi	r25, 0x00	; 0
   13774:	02 da       	rcall	.-3068   	; 0x12b7a <push_state>
            }
            else
            {
                printf("Unexpected AMIGO START token: %s, at line:%d\n", str,lines);
   13776:	ad e0       	ldi	r26, 0x0D	; 13
   13778:	b0 e0       	ldi	r27, 0x00	; 0
   1377a:	c9 cd       	rjmp	.-1134   	; 0x1330e <Read_Config+0x4a8>
   1377c:	80 91 fd 18 	lds	r24, 0x18FD	; 0x8018fd <lines>
   13780:	90 91 fe 18 	lds	r25, 0x18FE	; 0x8018fe <lines+0x1>
   13784:	ed b7       	in	r30, 0x3d	; 61
   13786:	fe b7       	in	r31, 0x3e	; 62
   13788:	97 83       	std	Z+7, r25	; 0x07
   1378a:	86 83       	std	Z+6, r24	; 0x06
   1378c:	95 82       	std	Z+5, r9	; 0x05
   1378e:	84 82       	std	Z+4, r8	; 0x04
                ++errors;
            }
            break;

        case AMIGO_HEADER:
            if( MATCHI (token,"DRIVE") )
   13790:	81 ee       	ldi	r24, 0xE1	; 225
   13792:	99 e1       	ldi	r25, 0x19	; 25
   13794:	49 cd       	rjmp	.-1390   	; 0x13228 <Read_Config+0x3c2>
   13796:	6f e1       	ldi	r22, 0x1F	; 31
   13798:	7f e0       	ldi	r23, 0x0F	; 15
   1379a:	c8 01       	movw	r24, r16
   1379c:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <MATCHI>
            {
                //skip this
                printf("Skipping %s, at line:%d\n", str,lines);
   137a0:	89 2b       	or	r24, r25
   137a2:	99 f0       	breq	.+38     	; 0x137ca <Read_Config+0x964>
   137a4:	80 91 fd 18 	lds	r24, 0x18FD	; 0x8018fd <lines>
   137a8:	90 91 fe 18 	lds	r25, 0x18FE	; 0x8018fe <lines+0x1>
   137ac:	ed b7       	in	r30, 0x3d	; 61
   137ae:	fe b7       	in	r31, 0x3e	; 62
   137b0:	97 83       	std	Z+7, r25	; 0x07
   137b2:	86 83       	std	Z+6, r24	; 0x06
   137b4:	95 82       	std	Z+5, r9	; 0x05
   137b6:	84 82       	std	Z+4, r8	; 0x04
   137b8:	88 ec       	ldi	r24, 0xC8	; 200
   137ba:	99 e1       	ldi	r25, 0x19	; 25
   137bc:	a0 e0       	ldi	r26, 0x00	; 0
   137be:	81 83       	std	Z+1, r24	; 0x01
   137c0:	92 83       	std	Z+2, r25	; 0x02
   137c2:	a3 83       	std	Z+3, r26	; 0x03
            }
            else if( MATCHI (token,"ADDRESS") )
   137c4:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   137c8:	fb cb       	rjmp	.-2058   	; 0x12fc0 <Read_Config+0x15a>
   137ca:	6a ec       	ldi	r22, 0xCA	; 202
   137cc:	7d e0       	ldi	r23, 0x0D	; 13
   137ce:	c8 01       	movw	r24, r16
   137d0:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <MATCHI>
            {
                if(val.b > 31)
   137d4:	89 2b       	or	r24, r25
   137d6:	59 f1       	breq	.+86     	; 0x1382e <Read_Config+0x9c8>
				{
					printf("Fatal AMIGO ADDRESS: %d > 31 disabled at line:%d\n", str,lines);
   137d8:	ff e1       	ldi	r31, 0x1F	; 31
   137da:	f4 15       	cp	r31, r4
   137dc:	b8 f4       	brcc	.+46     	; 0x1380c <Read_Config+0x9a6>
   137de:	80 91 fd 18 	lds	r24, 0x18FD	; 0x8018fd <lines>
   137e2:	90 91 fe 18 	lds	r25, 0x18FE	; 0x8018fe <lines+0x1>
   137e6:	ed b7       	in	r30, 0x3d	; 61
   137e8:	fe b7       	in	r31, 0x3e	; 62
   137ea:	97 83       	std	Z+7, r25	; 0x07
   137ec:	86 83       	std	Z+6, r24	; 0x06
   137ee:	95 82       	std	Z+5, r9	; 0x05
   137f0:	84 82       	std	Z+4, r8	; 0x04
   137f2:	86 e9       	ldi	r24, 0x96	; 150
   137f4:	99 e1       	ldi	r25, 0x19	; 25
   137f6:	a0 e0       	ldi	r26, 0x00	; 0
   137f8:	81 83       	std	Z+1, r24	; 0x01
   137fa:	92 83       	std	Z+2, r25	; 0x02
					val.b = 0xff;
   137fc:	a3 83       	std	Z+3, r26	; 0x03
   137fe:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
					++errors;
   13802:	33 24       	eor	r3, r3
   13804:	3a 94       	dec	r3
				}
                Devices[index].ADDRESS = val.b;
   13806:	ff ef       	ldi	r31, 0xFF	; 255
   13808:	ef 1a       	sub	r14, r31
   1380a:	ff 0a       	sbc	r15, r31
   1380c:	8b e2       	ldi	r24, 0x2B	; 43
   1380e:	8c 9d       	mul	r24, r12
   13810:	f0 01       	movw	r30, r0
   13812:	8d 9d       	mul	r24, r13
   13814:	f0 0d       	add	r31, r0
   13816:	11 24       	eor	r1, r1
                AMIGOp->HEADER.ADDRESS = val.b;
   13818:	e6 57       	subi	r30, 0x76	; 118
   1381a:	f1 4e       	sbci	r31, 0xE1	; 225
   1381c:	31 82       	std	Z+1, r3	; 0x01
   1381e:	c4 57       	subi	r28, 0x74	; 116
   13820:	de 4f       	sbci	r29, 0xFE	; 254
   13822:	a8 81       	ld	r26, Y
   13824:	b9 81       	ldd	r27, Y+1	; 0x01
   13826:	cc 58       	subi	r28, 0x8C	; 140
            }
            else if( MATCHI (token,"PPR") )
   13828:	d1 40       	sbci	r29, 0x01	; 1
   1382a:	3c 92       	st	X, r3
   1382c:	c9 cb       	rjmp	.-2158   	; 0x12fc0 <Read_Config+0x15a>
   1382e:	67 ef       	ldi	r22, 0xF7	; 247
   13830:	7d e0       	ldi	r23, 0x0D	; 13
   13832:	c8 01       	movw	r24, r16
   13834:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <MATCHI>
            {
                if(val.b > 7)
   13838:	89 2b       	or	r24, r25
   1383a:	79 f1       	breq	.+94     	; 0x1389a <Read_Config+0xa34>
				{
					printf("Warning AMIGO ADDRESS: %d > 7, disabled at line:%d\n", str,lines);
   1383c:	b7 e0       	ldi	r27, 0x07	; 7
   1383e:	b4 15       	cp	r27, r4
   13840:	d8 f4       	brcc	.+54     	; 0x13878 <Read_Config+0xa12>
   13842:	80 91 fd 18 	lds	r24, 0x18FD	; 0x8018fd <lines>
   13846:	90 91 fe 18 	lds	r25, 0x18FE	; 0x8018fe <lines+0x1>
   1384a:	ed b7       	in	r30, 0x3d	; 61
   1384c:	fe b7       	in	r31, 0x3e	; 62
   1384e:	97 83       	std	Z+7, r25	; 0x07
   13850:	86 83       	std	Z+6, r24	; 0x06
   13852:	95 82       	std	Z+5, r9	; 0x05
   13854:	84 82       	std	Z+4, r8	; 0x04
   13856:	cf 55       	subi	r28, 0x5F	; 95
   13858:	de 4f       	sbci	r29, 0xFE	; 254
   1385a:	28 81       	ld	r18, Y
   1385c:	39 81       	ldd	r19, Y+1	; 0x01
   1385e:	4a 81       	ldd	r20, Y+2	; 0x02
   13860:	c1 5a       	subi	r28, 0xA1	; 161
   13862:	d1 40       	sbci	r29, 0x01	; 1
   13864:	21 83       	std	Z+1, r18	; 0x01
   13866:	32 83       	std	Z+2, r19	; 0x02
					val.b = 0xff;
   13868:	43 83       	std	Z+3, r20	; 0x03
   1386a:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
					++errors;
   1386e:	33 24       	eor	r3, r3
   13870:	3a 94       	dec	r3
				}
                Devices[index].PPR = val.b;
   13872:	ff ef       	ldi	r31, 0xFF	; 255
   13874:	ef 1a       	sub	r14, r31
   13876:	ff 0a       	sbc	r15, r31
   13878:	8b e2       	ldi	r24, 0x2B	; 43
   1387a:	8c 9d       	mul	r24, r12
   1387c:	f0 01       	movw	r30, r0
   1387e:	8d 9d       	mul	r24, r13
   13880:	f0 0d       	add	r31, r0
   13882:	11 24       	eor	r1, r1
                AMIGOp->HEADER.PPR = val.b;
   13884:	e6 57       	subi	r30, 0x76	; 118
   13886:	f1 4e       	sbci	r31, 0xE1	; 225
   13888:	32 82       	std	Z+2, r3	; 0x02
   1388a:	c4 57       	subi	r28, 0x74	; 116
   1388c:	de 4f       	sbci	r29, 0xFE	; 254
   1388e:	e8 81       	ld	r30, Y
   13890:	f9 81       	ldd	r31, Y+1	; 0x01
   13892:	cc 58       	subi	r28, 0x8C	; 140
            }
            else if( MATCHI (token,"FILE") )
   13894:	d1 40       	sbci	r29, 0x01	; 1
   13896:	31 82       	std	Z+1, r3	; 0x01
   13898:	93 cb       	rjmp	.-2266   	; 0x12fc0 <Read_Config+0x15a>
   1389a:	6b ef       	ldi	r22, 0xFB	; 251
   1389c:	7d e0       	ldi	r23, 0x0D	; 13
   1389e:	c8 01       	movw	r24, r16
   138a0:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <MATCHI>
            {
                AMIGOp->HEADER.NAME = stralloc(arg);
   138a4:	89 2b       	or	r24, r25
   138a6:	69 f0       	breq	.+26     	; 0x138c2 <Read_Config+0xa5c>
   138a8:	ce 01       	movw	r24, r28
   138aa:	0a 96       	adiw	r24, 0x0a	; 10
   138ac:	0e 94 e3 32 	call	0x65c6	; 0x65c6 <stralloc>
   138b0:	c4 57       	subi	r28, 0x74	; 116
   138b2:	de 4f       	sbci	r29, 0xFE	; 254
   138b4:	e8 81       	ld	r30, Y
   138b6:	f9 81       	ldd	r31, Y+1	; 0x01
   138b8:	cc 58       	subi	r28, 0x8C	; 140
   138ba:	d1 40       	sbci	r29, 0x01	; 1
            }
            else
            {
                printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", str,lines);
   138bc:	93 83       	std	Z+3, r25	; 0x03
   138be:	82 83       	std	Z+2, r24	; 0x02
   138c0:	7f cb       	rjmp	.-2306   	; 0x12fc0 <Read_Config+0x15a>
   138c2:	80 91 fd 18 	lds	r24, 0x18FD	; 0x8018fd <lines>
   138c6:	90 91 fe 18 	lds	r25, 0x18FE	; 0x8018fe <lines+0x1>
   138ca:	ed b7       	in	r30, 0x3d	; 61
   138cc:	fe b7       	in	r31, 0x3e	; 62
   138ce:	97 83       	std	Z+7, r25	; 0x07
   138d0:	86 83       	std	Z+6, r24	; 0x06
   138d2:	95 82       	std	Z+5, r9	; 0x05
   138d4:	84 82       	std	Z+4, r8	; 0x04
   138d6:	c2 56       	subi	r28, 0x62	; 98
   138d8:	de 4f       	sbci	r29, 0xFE	; 254
   138da:	28 81       	ld	r18, Y
   138dc:	39 81       	ldd	r19, Y+1	; 0x01
   138de:	4a 81       	ldd	r20, Y+2	; 0x02
                ++errors;
            }
            break;

        case AMIGO_CONFIG:
            if( MATCHI (token,"ID") )
   138e0:	ce 59       	subi	r28, 0x9E	; 158
   138e2:	d1 40       	sbci	r29, 0x01	; 1
   138e4:	95 c0       	rjmp	.+298    	; 0x13a10 <Read_Config+0xbaa>
   138e6:	60 e0       	ldi	r22, 0x00	; 0
   138e8:	7e e0       	ldi	r23, 0x0E	; 14
   138ea:	c8 01       	movw	r24, r16
   138ec:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <MATCHI>
            {
                AMIGOp->CONFIG.ID = val.w;
   138f0:	89 2b       	or	r24, r25
   138f2:	49 f0       	breq	.+18     	; 0x13906 <Read_Config+0xaa0>
   138f4:	c4 57       	subi	r28, 0x74	; 116
   138f6:	de 4f       	sbci	r29, 0xFE	; 254
   138f8:	e8 81       	ld	r30, Y
   138fa:	f9 81       	ldd	r31, Y+1	; 0x01
   138fc:	cc 58       	subi	r28, 0x8C	; 140
   138fe:	d1 40       	sbci	r29, 0x01	; 1
            }
            else
            {
                printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", str,lines);
   13900:	55 82       	std	Z+5, r5	; 0x05
   13902:	44 82       	std	Z+4, r4	; 0x04
   13904:	5d cb       	rjmp	.-2374   	; 0x12fc0 <Read_Config+0x15a>
   13906:	80 91 fd 18 	lds	r24, 0x18FD	; 0x8018fd <lines>
   1390a:	90 91 fe 18 	lds	r25, 0x18FE	; 0x8018fe <lines+0x1>
   1390e:	ed b7       	in	r30, 0x3d	; 61
   13910:	fe b7       	in	r31, 0x3e	; 62
   13912:	97 83       	std	Z+7, r25	; 0x07
   13914:	86 83       	std	Z+6, r24	; 0x06
   13916:	95 82       	std	Z+5, r9	; 0x05
   13918:	84 82       	std	Z+4, r8	; 0x04
   1391a:	c5 56       	subi	r28, 0x65	; 101
   1391c:	de 4f       	sbci	r29, 0xFE	; 254
   1391e:	28 81       	ld	r18, Y
   13920:	39 81       	ldd	r19, Y+1	; 0x01
   13922:	4a 81       	ldd	r20, Y+2	; 0x02
                ++errors;
            }
            break;

        case AMIGO_GEOMETRY:
            if( MATCHI (token,"BYTES_PER_SECTOR") )
   13924:	cb 59       	subi	r28, 0x9B	; 155
   13926:	d1 40       	sbci	r29, 0x01	; 1
   13928:	73 c0       	rjmp	.+230    	; 0x13a10 <Read_Config+0xbaa>
   1392a:	65 e2       	ldi	r22, 0x25	; 37
   1392c:	7f e0       	ldi	r23, 0x0F	; 15
   1392e:	c8 01       	movw	r24, r16
   13930:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <MATCHI>
            {
                if(val.w > 0x1000)
   13934:	89 2b       	or	r24, r25
   13936:	59 f1       	breq	.+86     	; 0x1398e <Read_Config+0xb28>
   13938:	21 e0       	ldi	r18, 0x01	; 1
   1393a:	42 16       	cp	r4, r18
				{
					printf("Fatal: AMIGO BYTES_PER_SECTOR > 0x1000, set to 256 at line:%d\n", lines);
   1393c:	20 e1       	ldi	r18, 0x10	; 16
   1393e:	52 06       	cpc	r5, r18
   13940:	d8 f0       	brcs	.+54     	; 0x13978 <Read_Config+0xb12>
   13942:	80 91 fd 18 	lds	r24, 0x18FD	; 0x8018fd <lines>
   13946:	90 91 fe 18 	lds	r25, 0x18FE	; 0x8018fe <lines+0x1>
   1394a:	ed b7       	in	r30, 0x3d	; 61
   1394c:	fe b7       	in	r31, 0x3e	; 62
   1394e:	95 83       	std	Z+5, r25	; 0x05
   13950:	84 83       	std	Z+4, r24	; 0x04
   13952:	c8 56       	subi	r28, 0x68	; 104
   13954:	de 4f       	sbci	r29, 0xFE	; 254
   13956:	28 81       	ld	r18, Y
   13958:	39 81       	ldd	r19, Y+1	; 0x01
   1395a:	4a 81       	ldd	r20, Y+2	; 0x02
   1395c:	c8 59       	subi	r28, 0x98	; 152
   1395e:	d1 40       	sbci	r29, 0x01	; 1
   13960:	21 83       	std	Z+1, r18	; 0x01
   13962:	32 83       	std	Z+2, r19	; 0x02
					val.w = 256;
   13964:	43 83       	std	Z+3, r20	; 0x03
   13966:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   1396a:	80 e0       	ldi	r24, 0x00	; 0
                    ++errors;
   1396c:	91 e0       	ldi	r25, 0x01	; 1
   1396e:	38 2e       	mov	r3, r24
   13970:	29 2e       	mov	r2, r25
				}
                AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
   13972:	ff ef       	ldi	r31, 0xFF	; 255
   13974:	ef 1a       	sub	r14, r31
   13976:	ff 0a       	sbc	r15, r31
   13978:	83 2d       	mov	r24, r3
   1397a:	92 2d       	mov	r25, r2
   1397c:	c4 57       	subi	r28, 0x74	; 116
   1397e:	de 4f       	sbci	r29, 0xFE	; 254
   13980:	e8 81       	ld	r30, Y
   13982:	f9 81       	ldd	r31, Y+1	; 0x01
   13984:	cc 58       	subi	r28, 0x8C	; 140
   13986:	d1 40       	sbci	r29, 0x01	; 1
            }
            else if( MATCHI (token,"SECTORS_PER_TRACK") )
   13988:	97 83       	std	Z+7, r25	; 0x07
   1398a:	86 83       	std	Z+6, r24	; 0x06
   1398c:	19 cb       	rjmp	.-2510   	; 0x12fc0 <Read_Config+0x15a>
   1398e:	66 e3       	ldi	r22, 0x36	; 54
   13990:	7f e0       	ldi	r23, 0x0F	; 15
   13992:	c8 01       	movw	r24, r16
   13994:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <MATCHI>
            {
                AMIGOp->GEOMETRY.SECTORS_PER_TRACK = val.w;
   13998:	89 2b       	or	r24, r25
   1399a:	49 f0       	breq	.+18     	; 0x139ae <Read_Config+0xb48>
   1399c:	c4 57       	subi	r28, 0x74	; 116
   1399e:	de 4f       	sbci	r29, 0xFE	; 254
   139a0:	e8 81       	ld	r30, Y
   139a2:	f9 81       	ldd	r31, Y+1	; 0x01
   139a4:	cc 58       	subi	r28, 0x8C	; 140
   139a6:	d1 40       	sbci	r29, 0x01	; 1
            }
            else if( MATCHI (token,"HEADS") )
   139a8:	51 86       	std	Z+9, r5	; 0x09
   139aa:	40 86       	std	Z+8, r4	; 0x08
   139ac:	09 cb       	rjmp	.-2542   	; 0x12fc0 <Read_Config+0x15a>
   139ae:	68 e4       	ldi	r22, 0x48	; 72
   139b0:	7f e0       	ldi	r23, 0x0F	; 15
   139b2:	c8 01       	movw	r24, r16
   139b4:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <MATCHI>
            {
                AMIGOp->GEOMETRY.HEADS = val.w;
   139b8:	89 2b       	or	r24, r25
   139ba:	49 f0       	breq	.+18     	; 0x139ce <Read_Config+0xb68>
   139bc:	c4 57       	subi	r28, 0x74	; 116
   139be:	de 4f       	sbci	r29, 0xFE	; 254
   139c0:	e8 81       	ld	r30, Y
   139c2:	f9 81       	ldd	r31, Y+1	; 0x01
   139c4:	cc 58       	subi	r28, 0x8C	; 140
   139c6:	d1 40       	sbci	r29, 0x01	; 1
            }
            else if( MATCHI (token,"CYLINDERS") )
   139c8:	53 86       	std	Z+11, r5	; 0x0b
   139ca:	42 86       	std	Z+10, r4	; 0x0a
   139cc:	f9 ca       	rjmp	.-2574   	; 0x12fc0 <Read_Config+0x15a>
   139ce:	6e e4       	ldi	r22, 0x4E	; 78
   139d0:	7f e0       	ldi	r23, 0x0F	; 15
   139d2:	c8 01       	movw	r24, r16
   139d4:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <MATCHI>
            {
                AMIGOp->GEOMETRY.CYLINDERS = val.w;
   139d8:	89 2b       	or	r24, r25
   139da:	49 f0       	breq	.+18     	; 0x139ee <Read_Config+0xb88>
   139dc:	c4 57       	subi	r28, 0x74	; 116
   139de:	de 4f       	sbci	r29, 0xFE	; 254
   139e0:	e8 81       	ld	r30, Y
   139e2:	f9 81       	ldd	r31, Y+1	; 0x01
   139e4:	cc 58       	subi	r28, 0x8C	; 140
   139e6:	d1 40       	sbci	r29, 0x01	; 1
            }
            else
            {
                printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", str,lines);
   139e8:	55 86       	std	Z+13, r5	; 0x0d
   139ea:	44 86       	std	Z+12, r4	; 0x0c
   139ec:	e9 ca       	rjmp	.-2606   	; 0x12fc0 <Read_Config+0x15a>
   139ee:	80 91 fd 18 	lds	r24, 0x18FD	; 0x8018fd <lines>
   139f2:	90 91 fe 18 	lds	r25, 0x18FE	; 0x8018fe <lines+0x1>
   139f6:	ed b7       	in	r30, 0x3d	; 61
   139f8:	fe b7       	in	r31, 0x3e	; 62
   139fa:	97 83       	std	Z+7, r25	; 0x07
   139fc:	86 83       	std	Z+6, r24	; 0x06
   139fe:	95 82       	std	Z+5, r9	; 0x05
   13a00:	84 82       	std	Z+4, r8	; 0x04
   13a02:	cb 56       	subi	r28, 0x6B	; 107
   13a04:	de 4f       	sbci	r29, 0xFE	; 254
   13a06:	28 81       	ld	r18, Y
   13a08:	39 81       	ldd	r19, Y+1	; 0x01
   13a0a:	4a 81       	ldd	r20, Y+2	; 0x02
   13a0c:	c5 59       	subi	r28, 0x95	; 149
   13a0e:	d1 40       	sbci	r29, 0x01	; 1
   13a10:	21 83       	std	Z+1, r18	; 0x01
            }
            break;
#endif // #ifdef AMIGO

        default:
            printf("Fatal Unexpected STATE %d at line:%d\n", state, lines);
   13a12:	32 83       	std	Z+2, r19	; 0x02
   13a14:	43 83       	std	Z+3, r20	; 0x03
   13a16:	1a c0       	rjmp	.+52     	; 0x13a4c <Read_Config+0xbe6>
   13a18:	80 91 fd 18 	lds	r24, 0x18FD	; 0x8018fd <lines>
   13a1c:	90 91 fe 18 	lds	r25, 0x18FE	; 0x8018fe <lines+0x1>
   13a20:	ed b7       	in	r30, 0x3d	; 61
   13a22:	fe b7       	in	r31, 0x3e	; 62
   13a24:	97 83       	std	Z+7, r25	; 0x07
   13a26:	86 83       	std	Z+6, r24	; 0x06
   13a28:	c6 57       	subi	r28, 0x76	; 118
   13a2a:	de 4f       	sbci	r29, 0xFE	; 254
   13a2c:	28 81       	ld	r18, Y
   13a2e:	39 81       	ldd	r19, Y+1	; 0x01
   13a30:	ca 58       	subi	r28, 0x8A	; 138
   13a32:	d1 40       	sbci	r29, 0x01	; 1
   13a34:	35 83       	std	Z+5, r19	; 0x05
   13a36:	24 83       	std	Z+4, r18	; 0x04
   13a38:	ce 56       	subi	r28, 0x6E	; 110
   13a3a:	de 4f       	sbci	r29, 0xFE	; 254
   13a3c:	88 81       	ld	r24, Y
   13a3e:	99 81       	ldd	r25, Y+1	; 0x01
   13a40:	aa 81       	ldd	r26, Y+2	; 0x02
   13a42:	c2 59       	subi	r28, 0x92	; 146
   13a44:	d1 40       	sbci	r29, 0x01	; 1
   13a46:	81 83       	std	Z+1, r24	; 0x01
   13a48:	92 83       	std	Z+2, r25	; 0x02
            ++errors;
   13a4a:	a3 83       	std	Z+3, r26	; 0x03
   13a4c:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
            break;
   13a50:	ff ef       	ldi	r31, 0xFF	; 255

        } // switch
    } //while
    if(state != START_STATE)
   13a52:	ef 1a       	sub	r14, r31
   13a54:	ff 0a       	sbc	r15, r31
   13a56:	b4 ca       	rjmp	.-2712   	; 0x12fc0 <Read_Config+0x15a>
   13a58:	c6 57       	subi	r28, 0x76	; 118
   13a5a:	de 4f       	sbci	r29, 0xFE	; 254
   13a5c:	88 81       	ld	r24, Y
   13a5e:	99 81       	ldd	r25, Y+1	; 0x01
   13a60:	ca 58       	subi	r28, 0x8A	; 138
    {
        printf("Missing END statement at line:%d\n", lines);
   13a62:	d1 40       	sbci	r29, 0x01	; 1
   13a64:	89 2b       	or	r24, r25
   13a66:	79 f0       	breq	.+30     	; 0x13a86 <Read_Config+0xc20>
   13a68:	ed b7       	in	r30, 0x3d	; 61
   13a6a:	fe b7       	in	r31, 0x3e	; 62
   13a6c:	35 83       	std	Z+5, r19	; 0x05
   13a6e:	24 83       	std	Z+4, r18	; 0x04
   13a70:	8c e4       	ldi	r24, 0x4C	; 76
   13a72:	98 e1       	ldi	r25, 0x18	; 24
   13a74:	a0 e0       	ldi	r26, 0x00	; 0
   13a76:	81 83       	std	Z+1, r24	; 0x01
   13a78:	92 83       	std	Z+2, r25	; 0x02
        ++errors;
   13a7a:	a3 83       	std	Z+3, r26	; 0x03
   13a7c:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    }
    printf("Read_Config: read(%d) lines\n", lines);
   13a80:	ff ef       	ldi	r31, 0xFF	; 255
   13a82:	ef 1a       	sub	r14, r31
   13a84:	ff 0a       	sbc	r15, r31
   13a86:	80 91 fd 18 	lds	r24, 0x18FD	; 0x8018fd <lines>
   13a8a:	90 91 fe 18 	lds	r25, 0x18FE	; 0x8018fe <lines+0x1>
   13a8e:	ed b7       	in	r30, 0x3d	; 61
   13a90:	fe b7       	in	r31, 0x3e	; 62
   13a92:	95 83       	std	Z+5, r25	; 0x05
   13a94:	84 83       	std	Z+4, r24	; 0x04
   13a96:	8f e2       	ldi	r24, 0x2F	; 47
   13a98:	98 e1       	ldi	r25, 0x18	; 24
   13a9a:	a0 e0       	ldi	r26, 0x00	; 0
   13a9c:	81 83       	std	Z+1, r24	; 0x01
   13a9e:	92 83       	std	Z+2, r25	; 0x02
    if(errors)
   13aa0:	a3 83       	std	Z+3, r26	; 0x03
   13aa2:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
        printf("Read_Config: ****** errors(%d) ******\n", errors);
   13aa6:	e1 14       	cp	r14, r1
   13aa8:	f1 04       	cpc	r15, r1
   13aaa:	61 f0       	breq	.+24     	; 0x13ac4 <Read_Config+0xc5e>
   13aac:	ed b7       	in	r30, 0x3d	; 61
   13aae:	fe b7       	in	r31, 0x3e	; 62
   13ab0:	f5 82       	std	Z+5, r15	; 0x05
   13ab2:	e4 82       	std	Z+4, r14	; 0x04
   13ab4:	88 e0       	ldi	r24, 0x08	; 8
   13ab6:	98 e1       	ldi	r25, 0x18	; 24
   13ab8:	a0 e0       	ldi	r26, 0x00	; 0
   13aba:	81 83       	std	Z+1, r24	; 0x01

    ret = fclose(cfg);
   13abc:	92 83       	std	Z+2, r25	; 0x02
   13abe:	a3 83       	std	Z+3, r26	; 0x03
   13ac0:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   13ac4:	c0 57       	subi	r28, 0x70	; 112
   13ac6:	de 4f       	sbci	r29, 0xFE	; 254
   13ac8:	88 81       	ld	r24, Y
   13aca:	99 81       	ldd	r25, Y+1	; 0x01
    if(ret == EOF)
   13acc:	c0 59       	subi	r28, 0x90	; 144
   13ace:	d1 40       	sbci	r29, 0x01	; 1
    {
        perror("Read_Config - close error");
   13ad0:	0e 94 a2 7d 	call	0xfb44	; 0xfb44 <fclose>
   13ad4:	01 96       	adiw	r24, 0x01	; 1
   13ad6:	39 f4       	brne	.+14     	; 0x13ae6 <Read_Config+0xc80>
        ++errors;
   13ad8:	88 e5       	ldi	r24, 0x58	; 88
   13ada:	9f e0       	ldi	r25, 0x0F	; 15
   13adc:	0e 94 37 79 	call	0xf26e	; 0xf26e <perror>
    }

	// Post process device values
	Post_Config();
   13ae0:	2f ef       	ldi	r18, 0xFF	; 255

    return(errors);
   13ae2:	e2 1a       	sub	r14, r18
}
   13ae4:	f2 0a       	sbc	r15, r18
   13ae6:	29 d9       	rcall	.-3502   	; 0x12d3a <Post_Config>
   13ae8:	c7 01       	movw	r24, r14
   13aea:	cd 55       	subi	r28, 0x5D	; 93
   13aec:	de 4f       	sbci	r29, 0xFE	; 254
   13aee:	e2 e1       	ldi	r30, 0x12	; 18
   13af0:	0c 94 e4 e3 	jmp	0x1c7c8	; 0x1c7c8 <__epilogue_restores__>

00013af4 <print_var_P>:
/// @brief Display Configuration File variable
/// @param str: title
/// @param val: variable value
/// @return  void
void print_var_P(__memx const char *str, uint32_t val)
{
   13af4:	8f 92       	push	r8
   13af6:	9f 92       	push	r9
   13af8:	af 92       	push	r10
   13afa:	bf 92       	push	r11
   13afc:	cf 92       	push	r12
   13afe:	df 92       	push	r13
   13b00:	ef 92       	push	r14
   13b02:	0f 93       	push	r16
   13b04:	1f 93       	push	r17
   13b06:	cf 93       	push	r28
   13b08:	df 93       	push	r29
   13b0a:	cd b7       	in	r28, 0x3d	; 61
   13b0c:	de b7       	in	r29, 0x3e	; 62
   13b0e:	cd 54       	subi	r28, 0x4D	; 77
   13b10:	d1 09       	sbc	r29, r1
   13b12:	0f b6       	in	r0, 0x3f	; 63
   13b14:	f8 94       	cli
   13b16:	de bf       	out	0x3e, r29	; 62
   13b18:	0f be       	out	0x3f, r0	; 63
   13b1a:	cd bf       	out	0x3d, r28	; 61
   13b1c:	6b 01       	movw	r12, r22
   13b1e:	e8 2e       	mov	r14, r24
   13b20:	49 01       	movw	r8, r18
   13b22:	5a 01       	movw	r10, r20
   13b24:	de 01       	movw	r26, r28
   13b26:	1e 96       	adiw	r26, 0x0e	; 14
    char tmp[64];
    int i=0;
   13b28:	80 e0       	ldi	r24, 0x00	; 0
   13b2a:	90 e0       	ldi	r25, 0x00	; 0
   13b2c:	8d 01       	movw	r16, r26
    while( *str && i < 62)
   13b2e:	f6 01       	movw	r30, r12
   13b30:	5e 2d       	mov	r21, r14
   13b32:	0e 94 ff e3 	call	0x1c7fe	; 0x1c7fe <__xload_1>
   13b36:	66 23       	and	r22, r22
   13b38:	51 f0       	breq	.+20     	; 0x13b4e <print_var_P+0x5a>
   13b3a:	8e 33       	cpi	r24, 0x3E	; 62
   13b3c:	91 05       	cpc	r25, r1
   13b3e:	39 f0       	breq	.+14     	; 0x13b4e <print_var_P+0x5a>
        tmp[i++] = *str++;
   13b40:	01 96       	adiw	r24, 0x01	; 1
   13b42:	2f ef       	ldi	r18, 0xFF	; 255
   13b44:	c2 1a       	sub	r12, r18
   13b46:	d2 0a       	sbc	r13, r18
   13b48:	e2 0a       	sbc	r14, r18
   13b4a:	6d 93       	st	X+, r22
   13b4c:	f0 cf       	rjmp	.-32     	; 0x13b2e <print_var_P+0x3a>
    tmp[i++] = 0;
   13b4e:	f8 01       	movw	r30, r16
   13b50:	e8 0f       	add	r30, r24
   13b52:	f9 1f       	adc	r31, r25
   13b54:	10 82       	st	Z, r1

    printf("    %-25s = %8lxH (%ld)\n", tmp, val, val); 
   13b56:	ed b7       	in	r30, 0x3d	; 61
   13b58:	fe b7       	in	r31, 0x3e	; 62
   13b5a:	82 86       	std	Z+10, r8	; 0x0a
   13b5c:	93 86       	std	Z+11, r9	; 0x0b
   13b5e:	a4 86       	std	Z+12, r10	; 0x0c
   13b60:	b5 86       	std	Z+13, r11	; 0x0d
   13b62:	86 82       	std	Z+6, r8	; 0x06
   13b64:	97 82       	std	Z+7, r9	; 0x07
   13b66:	a0 86       	std	Z+8, r10	; 0x08
   13b68:	b1 86       	std	Z+9, r11	; 0x09
   13b6a:	15 83       	std	Z+5, r17	; 0x05
   13b6c:	04 83       	std	Z+4, r16	; 0x04
   13b6e:	8f ee       	ldi	r24, 0xEF	; 239
   13b70:	97 e1       	ldi	r25, 0x17	; 23
   13b72:	a0 e0       	ldi	r26, 0x00	; 0
   13b74:	81 83       	std	Z+1, r24	; 0x01
   13b76:	92 83       	std	Z+2, r25	; 0x02
   13b78:	a3 83       	std	Z+3, r26	; 0x03
   13b7a:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
}
   13b7e:	c3 5b       	subi	r28, 0xB3	; 179
   13b80:	df 4f       	sbci	r29, 0xFF	; 255
   13b82:	0f b6       	in	r0, 0x3f	; 63
   13b84:	f8 94       	cli
   13b86:	de bf       	out	0x3e, r29	; 62
   13b88:	0f be       	out	0x3f, r0	; 63
   13b8a:	cd bf       	out	0x3d, r28	; 61
   13b8c:	df 91       	pop	r29
   13b8e:	cf 91       	pop	r28
   13b90:	1f 91       	pop	r17
   13b92:	0f 91       	pop	r16
   13b94:	ef 90       	pop	r14
   13b96:	df 90       	pop	r13
   13b98:	cf 90       	pop	r12
   13b9a:	bf 90       	pop	r11
   13b9c:	af 90       	pop	r10
   13b9e:	9f 90       	pop	r9
   13ba0:	8f 90       	pop	r8
   13ba2:	08 95       	ret

00013ba4 <print_str_P>:
/// @brief Display Configuration File string
/// @param *str: title
/// @param *arg: string
/// @return  void
void print_str_P(__memx const char *str, char *arg)
{
   13ba4:	cf 92       	push	r12
   13ba6:	df 92       	push	r13
   13ba8:	ef 92       	push	r14
   13baa:	0f 93       	push	r16
   13bac:	1f 93       	push	r17
   13bae:	cf 93       	push	r28
   13bb0:	df 93       	push	r29
   13bb2:	cd b7       	in	r28, 0x3d	; 61
   13bb4:	de b7       	in	r29, 0x3e	; 62
   13bb6:	c7 54       	subi	r28, 0x47	; 71
   13bb8:	d1 09       	sbc	r29, r1
   13bba:	0f b6       	in	r0, 0x3f	; 63
   13bbc:	f8 94       	cli
   13bbe:	de bf       	out	0x3e, r29	; 62
   13bc0:	0f be       	out	0x3f, r0	; 63
   13bc2:	cd bf       	out	0x3d, r28	; 61
   13bc4:	6b 01       	movw	r12, r22
   13bc6:	e8 2e       	mov	r14, r24
   13bc8:	8a 01       	movw	r16, r20
   13bca:	de 01       	movw	r26, r28
   13bcc:	18 96       	adiw	r26, 0x08	; 8
    char tmp[64];
    int i=0;
   13bce:	80 e0       	ldi	r24, 0x00	; 0
   13bd0:	90 e0       	ldi	r25, 0x00	; 0
   13bd2:	9d 01       	movw	r18, r26
    while( *str && i < 62)
   13bd4:	f6 01       	movw	r30, r12
   13bd6:	5e 2d       	mov	r21, r14
   13bd8:	0e 94 ff e3 	call	0x1c7fe	; 0x1c7fe <__xload_1>
   13bdc:	66 23       	and	r22, r22
   13bde:	51 f0       	breq	.+20     	; 0x13bf4 <print_str_P+0x50>
   13be0:	8e 33       	cpi	r24, 0x3E	; 62
   13be2:	91 05       	cpc	r25, r1
   13be4:	39 f0       	breq	.+14     	; 0x13bf4 <print_str_P+0x50>
        tmp[i++] = *str++;
   13be6:	01 96       	adiw	r24, 0x01	; 1
   13be8:	4f ef       	ldi	r20, 0xFF	; 255
   13bea:	c4 1a       	sub	r12, r20
   13bec:	d4 0a       	sbc	r13, r20
   13bee:	e4 0a       	sbc	r14, r20
   13bf0:	6d 93       	st	X+, r22
   13bf2:	f0 cf       	rjmp	.-32     	; 0x13bd4 <print_str_P+0x30>
    tmp[i++] = 0;
   13bf4:	f9 01       	movw	r30, r18
   13bf6:	e8 0f       	add	r30, r24
   13bf8:	f9 1f       	adc	r31, r25
   13bfa:	10 82       	st	Z, r1
    printf("    %-25s = \"%s\"\n", tmp, arg);   
   13bfc:	ed b7       	in	r30, 0x3d	; 61
   13bfe:	fe b7       	in	r31, 0x3e	; 62
   13c00:	17 83       	std	Z+7, r17	; 0x07
   13c02:	06 83       	std	Z+6, r16	; 0x06
   13c04:	35 83       	std	Z+5, r19	; 0x05
   13c06:	24 83       	std	Z+4, r18	; 0x04
   13c08:	8d ed       	ldi	r24, 0xDD	; 221
   13c0a:	97 e1       	ldi	r25, 0x17	; 23
   13c0c:	a0 e0       	ldi	r26, 0x00	; 0
   13c0e:	81 83       	std	Z+1, r24	; 0x01
   13c10:	92 83       	std	Z+2, r25	; 0x02
   13c12:	a3 83       	std	Z+3, r26	; 0x03
   13c14:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
}
   13c18:	c9 5b       	subi	r28, 0xB9	; 185
   13c1a:	df 4f       	sbci	r29, 0xFF	; 255
   13c1c:	0f b6       	in	r0, 0x3f	; 63
   13c1e:	f8 94       	cli
   13c20:	de bf       	out	0x3e, r29	; 62
   13c22:	0f be       	out	0x3f, r0	; 63
   13c24:	cd bf       	out	0x3d, r28	; 61
   13c26:	df 91       	pop	r29
   13c28:	cf 91       	pop	r28
   13c2a:	1f 91       	pop	r17
   13c2c:	0f 91       	pop	r16
   13c2e:	ef 90       	pop	r14
   13c30:	df 90       	pop	r13
   13c32:	cf 90       	pop	r12
   13c34:	08 95       	ret

00013c36 <display_Addresses>:

/// ===============================================
/// @brief Display Configuration device address saummary
/// @return  void
void display_Addresses()
{
   13c36:	2f 92       	push	r2
   13c38:	3f 92       	push	r3
   13c3a:	4f 92       	push	r4
   13c3c:	6f 92       	push	r6
   13c3e:	7f 92       	push	r7
   13c40:	8f 92       	push	r8
   13c42:	af 92       	push	r10
   13c44:	bf 92       	push	r11
   13c46:	cf 92       	push	r12
   13c48:	df 92       	push	r13
   13c4a:	ef 92       	push	r14
   13c4c:	0f 93       	push	r16
   13c4e:	1f 93       	push	r17
   13c50:	cf 93       	push	r28
   13c52:	df 93       	push	r29
   13c54:	cd b7       	in	r28, 0x3d	; 61
   13c56:	de b7       	in	r29, 0x3e	; 62
   13c58:	60 97       	sbiw	r28, 0x10	; 16
   13c5a:	0f b6       	in	r0, 0x3f	; 63
   13c5c:	f8 94       	cli
   13c5e:	de bf       	out	0x3e, r29	; 62
   13c60:	0f be       	out	0x3f, r0	; 63
   13c62:	cd bf       	out	0x3d, r28	; 61
    int i;
    int address;
    printf("Listen and Talk Address Settings\n");
   13c64:	8b eb       	ldi	r24, 0xBB	; 187
   13c66:	97 e1       	ldi	r25, 0x17	; 23
   13c68:	a0 e0       	ldi	r26, 0x00	; 0
   13c6a:	ed b7       	in	r30, 0x3d	; 61
   13c6c:	fe b7       	in	r31, 0x3e	; 62
   13c6e:	81 83       	std	Z+1, r24	; 0x01
   13c70:	92 83       	std	Z+2, r25	; 0x02
   13c72:	a3 83       	std	Z+3, r26	; 0x03
   13c74:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   13c78:	0a e8       	ldi	r16, 0x8A	; 138
   13c7a:	1e e1       	ldi	r17, 0x1E	; 30
            printf("  AMIGO_MSA   = %02XH\n",BASE_MSA + address );
        }
#endif
        if(Devices[i].TYPE == PRINTER_TYPE )
        {
            printf("  PRINTER_MLA = %02XH\n",BASE_MLA + address );
   13c7c:	8a e1       	ldi	r24, 0x1A	; 26
   13c7e:	97 e1       	ldi	r25, 0x17	; 23
   13c80:	9c 01       	movw	r18, r24
   13c82:	40 e0       	ldi	r20, 0x00	; 0
   13c84:	2e 83       	std	Y+6, r18	; 0x06
   13c86:	3f 83       	std	Y+7, r19	; 0x07
   13c88:	48 87       	std	Y+8, r20	; 0x08
            printf("  PRINTER_MTA = %02XH\n",BASE_MTA + address );
   13c8a:	83 e0       	ldi	r24, 0x03	; 3
   13c8c:	97 e1       	ldi	r25, 0x17	; 23
   13c8e:	9c 01       	movw	r18, r24
   13c90:	40 e0       	ldi	r20, 0x00	; 0
   13c92:	29 87       	std	Y+9, r18	; 0x09
   13c94:	3a 87       	std	Y+10, r19	; 0x0a
   13c96:	4b 87       	std	Y+11, r20	; 0x0b
            printf("  PRINTER_MSA = %02XH\n",BASE_MSA + address );
   13c98:	8c ee       	ldi	r24, 0xEC	; 236
   13c9a:	96 e1       	ldi	r25, 0x16	; 22
   13c9c:	6c 01       	movw	r12, r24
   13c9e:	e1 2c       	mov	r14, r1
            printf("  SS80_MSA    = %02XH\n",BASE_MSA + address );
        }
#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
        {
            printf("  AMIGO_MLA   = %02XH\n",BASE_MLA + address );
   13ca0:	8f e5       	ldi	r24, 0x5F	; 95
   13ca2:	97 e1       	ldi	r25, 0x17	; 23
   13ca4:	3c 01       	movw	r6, r24
   13ca6:	81 2c       	mov	r8, r1
            printf("  AMIGO_MTA   = %02XH\n",BASE_MTA + address );
   13ca8:	88 e4       	ldi	r24, 0x48	; 72
   13caa:	97 e1       	ldi	r25, 0x17	; 23
   13cac:	1c 01       	movw	r2, r24
   13cae:	41 2c       	mov	r4, r1
            printf("  AMIGO_MSA   = %02XH\n",BASE_MSA + address );
   13cb0:	81 e3       	ldi	r24, 0x31	; 49
   13cb2:	97 e1       	ldi	r25, 0x17	; 23
   13cb4:	9c 01       	movw	r18, r24
   13cb6:	40 e0       	ldi	r20, 0x00	; 0
   13cb8:	2c 87       	std	Y+12, r18	; 0x0c
   13cba:	3d 87       	std	Y+13, r19	; 0x0d
   13cbc:	4e 87       	std	Y+14, r20	; 0x0e
            continue;
        address = Devices[i].ADDRESS;

        if(Devices[i].TYPE == SS80_TYPE)
        {
            printf("  SS80_MLA    = %02XH\n",BASE_MLA + address );
   13cbe:	84 ea       	ldi	r24, 0xA4	; 164
   13cc0:	a8 2e       	mov	r10, r24
   13cc2:	87 e1       	ldi	r24, 0x17	; 23
   13cc4:	b8 2e       	mov	r11, r24
    int i;
    int address;
    printf("Listen and Talk Address Settings\n");
    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   13cc6:	f8 01       	movw	r30, r16
   13cc8:	80 81       	ld	r24, Z
   13cca:	88 23       	and	r24, r24
   13ccc:	09 f4       	brne	.+2      	; 0x13cd0 <display_Addresses+0x9a>
   13cce:	91 c0       	rjmp	.+290    	; 0x13df2 <display_Addresses+0x1bc>
            continue;
        address = Devices[i].ADDRESS;
   13cd0:	f1 81       	ldd	r31, Z+1	; 0x01
   13cd2:	2f 2f       	mov	r18, r31
   13cd4:	30 e0       	ldi	r19, 0x00	; 0
   13cd6:	38 8b       	std	Y+16, r19	; 0x10
   13cd8:	2f 87       	std	Y+15, r18	; 0x0f

        if(Devices[i].TYPE == SS80_TYPE)
   13cda:	83 30       	cpi	r24, 0x03	; 3
   13cdc:	69 f5       	brne	.+90     	; 0x13d38 <display_Addresses+0x102>
        {
            printf("  SS80_MLA    = %02XH\n",BASE_MLA + address );
   13cde:	c9 01       	movw	r24, r18
   13ce0:	80 96       	adiw	r24, 0x20	; 32
   13ce2:	ed b7       	in	r30, 0x3d	; 61
   13ce4:	fe b7       	in	r31, 0x3e	; 62
   13ce6:	95 83       	std	Z+5, r25	; 0x05
   13ce8:	84 83       	std	Z+4, r24	; 0x04
   13cea:	c5 01       	movw	r24, r10
   13cec:	a0 e0       	ldi	r26, 0x00	; 0
   13cee:	81 83       	std	Z+1, r24	; 0x01
   13cf0:	92 83       	std	Z+2, r25	; 0x02
   13cf2:	a3 83       	std	Z+3, r26	; 0x03
   13cf4:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
            printf("  SS80_MTA    = %02XH\n",BASE_MTA + address );
   13cf8:	8f 85       	ldd	r24, Y+15	; 0x0f
   13cfa:	98 89       	ldd	r25, Y+16	; 0x10
   13cfc:	80 5c       	subi	r24, 0xC0	; 192
   13cfe:	9f 4f       	sbci	r25, 0xFF	; 255
   13d00:	ed b7       	in	r30, 0x3d	; 61
   13d02:	fe b7       	in	r31, 0x3e	; 62
   13d04:	95 83       	std	Z+5, r25	; 0x05
   13d06:	84 83       	std	Z+4, r24	; 0x04
   13d08:	8d e8       	ldi	r24, 0x8D	; 141
   13d0a:	97 e1       	ldi	r25, 0x17	; 23
   13d0c:	a0 e0       	ldi	r26, 0x00	; 0
   13d0e:	81 83       	std	Z+1, r24	; 0x01
   13d10:	92 83       	std	Z+2, r25	; 0x02
   13d12:	a3 83       	std	Z+3, r26	; 0x03
   13d14:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
            printf("  SS80_MSA    = %02XH\n",BASE_MSA + address );
   13d18:	8f 85       	ldd	r24, Y+15	; 0x0f
   13d1a:	98 89       	ldd	r25, Y+16	; 0x10
   13d1c:	80 5a       	subi	r24, 0xA0	; 160
   13d1e:	9f 4f       	sbci	r25, 0xFF	; 255
   13d20:	ed b7       	in	r30, 0x3d	; 61
   13d22:	fe b7       	in	r31, 0x3e	; 62
   13d24:	95 83       	std	Z+5, r25	; 0x05
   13d26:	84 83       	std	Z+4, r24	; 0x04
   13d28:	86 e7       	ldi	r24, 0x76	; 118
   13d2a:	97 e1       	ldi	r25, 0x17	; 23
   13d2c:	a0 e0       	ldi	r26, 0x00	; 0
   13d2e:	81 83       	std	Z+1, r24	; 0x01
   13d30:	92 83       	std	Z+2, r25	; 0x02
   13d32:	a3 83       	std	Z+3, r26	; 0x03
   13d34:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
        }
#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   13d38:	f8 01       	movw	r30, r16
   13d3a:	80 81       	ld	r24, Z
   13d3c:	81 30       	cpi	r24, 0x01	; 1
   13d3e:	49 f5       	brne	.+82     	; 0x13d92 <display_Addresses+0x15c>
        {
            printf("  AMIGO_MLA   = %02XH\n",BASE_MLA + address );
   13d40:	8f 85       	ldd	r24, Y+15	; 0x0f
   13d42:	98 89       	ldd	r25, Y+16	; 0x10
   13d44:	80 96       	adiw	r24, 0x20	; 32
   13d46:	ed b7       	in	r30, 0x3d	; 61
   13d48:	fe b7       	in	r31, 0x3e	; 62
   13d4a:	95 83       	std	Z+5, r25	; 0x05
   13d4c:	84 83       	std	Z+4, r24	; 0x04
   13d4e:	61 82       	std	Z+1, r6	; 0x01
   13d50:	72 82       	std	Z+2, r7	; 0x02
   13d52:	83 82       	std	Z+3, r8	; 0x03
   13d54:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
            printf("  AMIGO_MTA   = %02XH\n",BASE_MTA + address );
   13d58:	8f 85       	ldd	r24, Y+15	; 0x0f
   13d5a:	98 89       	ldd	r25, Y+16	; 0x10
   13d5c:	80 5c       	subi	r24, 0xC0	; 192
   13d5e:	9f 4f       	sbci	r25, 0xFF	; 255
   13d60:	ed b7       	in	r30, 0x3d	; 61
   13d62:	fe b7       	in	r31, 0x3e	; 62
   13d64:	95 83       	std	Z+5, r25	; 0x05
   13d66:	84 83       	std	Z+4, r24	; 0x04
   13d68:	21 82       	std	Z+1, r2	; 0x01
   13d6a:	32 82       	std	Z+2, r3	; 0x02
   13d6c:	43 82       	std	Z+3, r4	; 0x03
   13d6e:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
            printf("  AMIGO_MSA   = %02XH\n",BASE_MSA + address );
   13d72:	8f 85       	ldd	r24, Y+15	; 0x0f
   13d74:	98 89       	ldd	r25, Y+16	; 0x10
   13d76:	80 5a       	subi	r24, 0xA0	; 160
   13d78:	9f 4f       	sbci	r25, 0xFF	; 255
   13d7a:	ed b7       	in	r30, 0x3d	; 61
   13d7c:	fe b7       	in	r31, 0x3e	; 62
   13d7e:	95 83       	std	Z+5, r25	; 0x05
   13d80:	84 83       	std	Z+4, r24	; 0x04
   13d82:	2c 85       	ldd	r18, Y+12	; 0x0c
   13d84:	3d 85       	ldd	r19, Y+13	; 0x0d
   13d86:	4e 85       	ldd	r20, Y+14	; 0x0e
   13d88:	21 83       	std	Z+1, r18	; 0x01
   13d8a:	32 83       	std	Z+2, r19	; 0x02
   13d8c:	43 83       	std	Z+3, r20	; 0x03
   13d8e:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
        }
#endif
        if(Devices[i].TYPE == PRINTER_TYPE )
   13d92:	f8 01       	movw	r30, r16
   13d94:	80 81       	ld	r24, Z
   13d96:	84 30       	cpi	r24, 0x04	; 4
   13d98:	61 f5       	brne	.+88     	; 0x13df2 <display_Addresses+0x1bc>
        {
            printf("  PRINTER_MLA = %02XH\n",BASE_MLA + address );
   13d9a:	8f 85       	ldd	r24, Y+15	; 0x0f
   13d9c:	98 89       	ldd	r25, Y+16	; 0x10
   13d9e:	80 96       	adiw	r24, 0x20	; 32
   13da0:	ed b7       	in	r30, 0x3d	; 61
   13da2:	fe b7       	in	r31, 0x3e	; 62
   13da4:	95 83       	std	Z+5, r25	; 0x05
   13da6:	84 83       	std	Z+4, r24	; 0x04
   13da8:	2e 81       	ldd	r18, Y+6	; 0x06
   13daa:	3f 81       	ldd	r19, Y+7	; 0x07
   13dac:	48 85       	ldd	r20, Y+8	; 0x08
   13dae:	21 83       	std	Z+1, r18	; 0x01
   13db0:	32 83       	std	Z+2, r19	; 0x02
   13db2:	43 83       	std	Z+3, r20	; 0x03
   13db4:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
            printf("  PRINTER_MTA = %02XH\n",BASE_MTA + address );
   13db8:	8f 85       	ldd	r24, Y+15	; 0x0f
   13dba:	98 89       	ldd	r25, Y+16	; 0x10
   13dbc:	80 5c       	subi	r24, 0xC0	; 192
   13dbe:	9f 4f       	sbci	r25, 0xFF	; 255
   13dc0:	ed b7       	in	r30, 0x3d	; 61
   13dc2:	fe b7       	in	r31, 0x3e	; 62
   13dc4:	95 83       	std	Z+5, r25	; 0x05
   13dc6:	84 83       	std	Z+4, r24	; 0x04
   13dc8:	29 85       	ldd	r18, Y+9	; 0x09
   13dca:	3a 85       	ldd	r19, Y+10	; 0x0a
   13dcc:	4b 85       	ldd	r20, Y+11	; 0x0b
   13dce:	21 83       	std	Z+1, r18	; 0x01
   13dd0:	32 83       	std	Z+2, r19	; 0x02
   13dd2:	43 83       	std	Z+3, r20	; 0x03
   13dd4:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
            printf("  PRINTER_MSA = %02XH\n",BASE_MSA + address );
   13dd8:	2f 85       	ldd	r18, Y+15	; 0x0f
   13dda:	38 89       	ldd	r19, Y+16	; 0x10
   13ddc:	20 5a       	subi	r18, 0xA0	; 160
   13dde:	3f 4f       	sbci	r19, 0xFF	; 255
   13de0:	ed b7       	in	r30, 0x3d	; 61
   13de2:	fe b7       	in	r31, 0x3e	; 62
   13de4:	35 83       	std	Z+5, r19	; 0x05
   13de6:	24 83       	std	Z+4, r18	; 0x04
   13de8:	c1 82       	std	Z+1, r12	; 0x01
   13dea:	d2 82       	std	Z+2, r13	; 0x02
   13dec:	e3 82       	std	Z+3, r14	; 0x03
   13dee:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   13df2:	05 5d       	subi	r16, 0xD5	; 213
   13df4:	1f 4f       	sbci	r17, 0xFF	; 255
void display_Addresses()
{
    int i;
    int address;
    printf("Listen and Talk Address Settings\n");
    for(i=0;i<MAX_DEVICES;++i)
   13df6:	f0 e2       	ldi	r31, 0x20	; 32
   13df8:	0e 38       	cpi	r16, 0x8E	; 142
   13dfa:	1f 07       	cpc	r17, r31
   13dfc:	09 f0       	breq	.+2      	; 0x13e00 <display_Addresses+0x1ca>
   13dfe:	63 cf       	rjmp	.-314    	; 0x13cc6 <display_Addresses+0x90>
            printf("  PRINTER_MLA = %02XH\n",BASE_MLA + address );
            printf("  PRINTER_MTA = %02XH\n",BASE_MTA + address );
            printf("  PRINTER_MSA = %02XH\n",BASE_MSA + address );
        }
    }
    printf("\n");
   13e00:	8a ee       	ldi	r24, 0xEA	; 234
   13e02:	96 e1       	ldi	r25, 0x16	; 22
   13e04:	a0 e0       	ldi	r26, 0x00	; 0
   13e06:	ed b7       	in	r30, 0x3d	; 61
   13e08:	fe b7       	in	r31, 0x3e	; 62
   13e0a:	81 83       	std	Z+1, r24	; 0x01
   13e0c:	92 83       	std	Z+2, r25	; 0x02
   13e0e:	a3 83       	std	Z+3, r26	; 0x03
   13e10:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
}
   13e14:	60 96       	adiw	r28, 0x10	; 16
   13e16:	0f b6       	in	r0, 0x3f	; 63
   13e18:	f8 94       	cli
   13e1a:	de bf       	out	0x3e, r29	; 62
   13e1c:	0f be       	out	0x3f, r0	; 63
   13e1e:	cd bf       	out	0x3d, r28	; 61
   13e20:	df 91       	pop	r29
   13e22:	cf 91       	pop	r28
   13e24:	1f 91       	pop	r17
   13e26:	0f 91       	pop	r16
   13e28:	ef 90       	pop	r14
   13e2a:	df 90       	pop	r13
   13e2c:	cf 90       	pop	r12
   13e2e:	bf 90       	pop	r11
   13e30:	af 90       	pop	r10
   13e32:	8f 90       	pop	r8
   13e34:	7f 90       	pop	r7
   13e36:	6f 90       	pop	r6
   13e38:	4f 90       	pop	r4
   13e3a:	3f 90       	pop	r3
   13e3c:	2f 90       	pop	r2
   13e3e:	08 95       	ret

00013e40 <display_Config>:

/// ===============================================
/// @brief Display current Configuration File values
/// @return  void
void display_Config()
{
   13e40:	2f 92       	push	r2
   13e42:	3f 92       	push	r3
   13e44:	4f 92       	push	r4
   13e46:	6f 92       	push	r6
   13e48:	7f 92       	push	r7
   13e4a:	8f 92       	push	r8
   13e4c:	af 92       	push	r10
   13e4e:	bf 92       	push	r11
   13e50:	cf 92       	push	r12
   13e52:	df 92       	push	r13
   13e54:	ef 92       	push	r14
   13e56:	0f 93       	push	r16
   13e58:	1f 93       	push	r17
   13e5a:	cf 93       	push	r28
   13e5c:	df 93       	push	r29
   13e5e:	cd b7       	in	r28, 0x3d	; 61
   13e60:	de b7       	in	r29, 0x3e	; 62
   13e62:	60 97       	sbiw	r28, 0x10	; 16
   13e64:	0f b6       	in	r0, 0x3f	; 63
   13e66:	f8 94       	cli
   13e68:	de bf       	out	0x3e, r29	; 62
   13e6a:	0f be       	out	0x3f, r0	; 63
   13e6c:	cd bf       	out	0x3d, r28	; 61
#ifdef AMIGO
    ///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    printf("Current Configuration Settings\n");
   13e6e:	8a ec       	ldi	r24, 0xCA	; 202
   13e70:	96 e1       	ldi	r25, 0x16	; 22
   13e72:	a0 e0       	ldi	r26, 0x00	; 0
   13e74:	ed b7       	in	r30, 0x3d	; 61
   13e76:	fe b7       	in	r31, 0x3e	; 62
   13e78:	81 83       	std	Z+1, r24	; 0x01
   13e7a:	92 83       	std	Z+2, r25	; 0x02
   13e7c:	a3 83       	std	Z+3, r26	; 0x03
   13e7e:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   13e82:	0a e8       	ldi	r16, 0x8A	; 138
   13e84:	1e e1       	ldi	r17, 0x1E	; 30
            printf("PRINTER\n");
            printf("  CONFIG\n");
                print_var("ADDRESS", (uint32_t) PRINTERp->HEADER.ADDRESS);
			printf("  END\n");
        }
		printf("END\n");
   13e86:	80 e4       	ldi	r24, 0x40	; 64
   13e88:	94 e1       	ldi	r25, 0x14	; 20
   13e8a:	9c 01       	movw	r18, r24
   13e8c:	40 e0       	ldi	r20, 0x00	; 0
   13e8e:	2e 83       	std	Y+6, r18	; 0x06
   13e90:	3f 83       	std	Y+7, r19	; 0x07
   13e92:	48 87       	std	Y+8, r20	; 0x08
		printf("\n");
   13e94:	8e e3       	ldi	r24, 0x3E	; 62
   13e96:	94 e1       	ldi	r25, 0x14	; 20
   13e98:	9c 01       	movw	r18, r24
   13e9a:	40 e0       	ldi	r20, 0x00	; 0
   13e9c:	29 87       	std	Y+9, r18	; 0x09
   13e9e:	3a 87       	std	Y+10, r19	; 0x0a
   13ea0:	4b 87       	std	Y+11, r20	; 0x0b

        if(Devices[i].TYPE == PRINTER_TYPE )
        {
            PRINTERp= (PRINTERDeviceType *)Devices[i].dev;

            printf("PRINTER\n");
   13ea2:	8e e5       	ldi	r24, 0x5E	; 94
   13ea4:	94 e1       	ldi	r25, 0x14	; 20
   13ea6:	9c 01       	movw	r18, r24
   13ea8:	40 e0       	ldi	r20, 0x00	; 0
   13eaa:	2c 87       	std	Y+12, r18	; 0x0c
   13eac:	3d 87       	std	Y+13, r19	; 0x0d
   13eae:	4e 87       	std	Y+14, r20	; 0x0e
            printf("  CONFIG\n");
   13eb0:	84 e5       	ldi	r24, 0x54	; 84
   13eb2:	94 e1       	ldi	r25, 0x14	; 20
   13eb4:	1c 01       	movw	r2, r24
   13eb6:	41 2c       	mov	r4, r1
                print_var("ADDRESS", (uint32_t) PRINTERp->HEADER.ADDRESS);
   13eb8:	8c e4       	ldi	r24, 0x4C	; 76
   13eba:	94 e1       	ldi	r25, 0x14	; 20
   13ebc:	6c 01       	movw	r12, r24
   13ebe:	e1 2c       	mov	r14, r1
			printf("  END\n");
   13ec0:	85 e4       	ldi	r24, 0x45	; 69
   13ec2:	94 e1       	ldi	r25, 0x14	; 20
   13ec4:	3c 01       	movw	r6, r24
   13ec6:	81 2c       	mov	r8, r1
#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;

            printf("AMIGO %s\n", Devices[i].model);
   13ec8:	8b e0       	ldi	r24, 0x0B	; 11
   13eca:	a8 2e       	mov	r10, r24
   13ecc:	85 e1       	ldi	r24, 0x15	; 21
   13ece:	b8 2e       	mov	r11, r24
#endif

    printf("Current Configuration Settings\n");
    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   13ed0:	f8 01       	movw	r30, r16
   13ed2:	80 81       	ld	r24, Z
   13ed4:	88 23       	and	r24, r24
   13ed6:	09 f4       	brne	.+2      	; 0x13eda <display_Config+0x9a>
   13ed8:	90 c2       	rjmp	.+1312   	; 0x143fa <display_Config+0x5ba>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   13eda:	83 30       	cpi	r24, 0x03	; 3
   13edc:	09 f0       	breq	.+2      	; 0x13ee0 <display_Config+0xa0>
   13ede:	84 c1       	rjmp	.+776    	; 0x141e8 <display_Config+0x3a8>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   13ee0:	27 a1       	ldd	r18, Z+39	; 0x27
   13ee2:	30 a5       	ldd	r19, Z+40	; 0x28
   13ee4:	38 8b       	std	Y+16, r19	; 0x10
   13ee6:	2f 87       	std	Y+15, r18	; 0x0f

            printf("SS80 %s\n", Devices[i].model);
   13ee8:	c8 01       	movw	r24, r16
   13eea:	07 96       	adiw	r24, 0x07	; 7
   13eec:	ed b7       	in	r30, 0x3d	; 61
   13eee:	fe b7       	in	r31, 0x3e	; 62
   13ef0:	95 83       	std	Z+5, r25	; 0x05
   13ef2:	84 83       	std	Z+4, r24	; 0x04
   13ef4:	81 ec       	ldi	r24, 0xC1	; 193
   13ef6:	96 e1       	ldi	r25, 0x16	; 22
   13ef8:	a0 e0       	ldi	r26, 0x00	; 0
   13efa:	81 83       	std	Z+1, r24	; 0x01
   13efc:	92 83       	std	Z+2, r25	; 0x02
   13efe:	a3 83       	std	Z+3, r26	; 0x03
   13f00:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
			printf("  # HP85 BASIC ADDRESS :D7%d0\n", (int) SS80p->HEADER.ADDRESS);
   13f04:	ef 85       	ldd	r30, Y+15	; 0x0f
   13f06:	f8 89       	ldd	r31, Y+16	; 0x10
   13f08:	80 81       	ld	r24, Z
   13f0a:	90 e0       	ldi	r25, 0x00	; 0
   13f0c:	ed b7       	in	r30, 0x3d	; 61
   13f0e:	fe b7       	in	r31, 0x3e	; 62
   13f10:	95 83       	std	Z+5, r25	; 0x05
   13f12:	84 83       	std	Z+4, r24	; 0x04
   13f14:	82 ea       	ldi	r24, 0xA2	; 162
   13f16:	96 e1       	ldi	r25, 0x16	; 22
   13f18:	a0 e0       	ldi	r26, 0x00	; 0
   13f1a:	81 83       	std	Z+1, r24	; 0x01
   13f1c:	92 83       	std	Z+2, r25	; 0x02
   13f1e:	a3 83       	std	Z+3, r26	; 0x03
   13f20:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
            printf("  CONFIG\n");
   13f24:	88 e9       	ldi	r24, 0x98	; 152
   13f26:	96 e1       	ldi	r25, 0x16	; 22
   13f28:	a0 e0       	ldi	r26, 0x00	; 0
   13f2a:	ed b7       	in	r30, 0x3d	; 61
   13f2c:	fe b7       	in	r31, 0x3e	; 62
   13f2e:	81 83       	std	Z+1, r24	; 0x01
   13f30:	92 83       	std	Z+2, r25	; 0x02
   13f32:	a3 83       	std	Z+3, r26	; 0x03
   13f34:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
                print_var("ADDRESS", (uint32_t) SS80p->HEADER.ADDRESS);
   13f38:	ef 85       	ldd	r30, Y+15	; 0x0f
   13f3a:	f8 89       	ldd	r31, Y+16	; 0x10
   13f3c:	20 81       	ld	r18, Z
   13f3e:	30 e0       	ldi	r19, 0x00	; 0
   13f40:	40 e0       	ldi	r20, 0x00	; 0
   13f42:	50 e0       	ldi	r21, 0x00	; 0
   13f44:	60 e9       	ldi	r22, 0x90	; 144
   13f46:	76 e1       	ldi	r23, 0x16	; 22
   13f48:	80 e0       	ldi	r24, 0x00	; 0
   13f4a:	d4 dd       	rcall	.-1112   	; 0x13af4 <print_var_P>
                print_var("PPR", (uint32_t) SS80p->HEADER.PPR);
   13f4c:	ef 85       	ldd	r30, Y+15	; 0x0f
   13f4e:	f8 89       	ldd	r31, Y+16	; 0x10
   13f50:	21 81       	ldd	r18, Z+1	; 0x01
   13f52:	30 e0       	ldi	r19, 0x00	; 0
   13f54:	40 e0       	ldi	r20, 0x00	; 0
   13f56:	50 e0       	ldi	r21, 0x00	; 0
   13f58:	6c e8       	ldi	r22, 0x8C	; 140
   13f5a:	76 e1       	ldi	r23, 0x16	; 22
   13f5c:	80 e0       	ldi	r24, 0x00	; 0
   13f5e:	ca dd       	rcall	.-1132   	; 0x13af4 <print_var_P>
                print_str("FILE", SS80p->HEADER.NAME);
   13f60:	ef 85       	ldd	r30, Y+15	; 0x0f
   13f62:	f8 89       	ldd	r31, Y+16	; 0x10
   13f64:	42 81       	ldd	r20, Z+2	; 0x02
   13f66:	53 81       	ldd	r21, Z+3	; 0x03
   13f68:	67 e8       	ldi	r22, 0x87	; 135
   13f6a:	76 e1       	ldi	r23, 0x16	; 22
   13f6c:	80 e0       	ldi	r24, 0x00	; 0
   13f6e:	1a de       	rcall	.-972    	; 0x13ba4 <print_str_P>
			printf("  END\n");
   13f70:	80 e8       	ldi	r24, 0x80	; 128
   13f72:	96 e1       	ldi	r25, 0x16	; 22
   13f74:	a0 e0       	ldi	r26, 0x00	; 0
   13f76:	ed b7       	in	r30, 0x3d	; 61
   13f78:	fe b7       	in	r31, 0x3e	; 62
   13f7a:	81 83       	std	Z+1, r24	; 0x01
   13f7c:	92 83       	std	Z+2, r25	; 0x02
   13f7e:	a3 83       	std	Z+3, r26	; 0x03
   13f80:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
            printf("  HEADER\n");
   13f84:	86 e7       	ldi	r24, 0x76	; 118
   13f86:	96 e1       	ldi	r25, 0x16	; 22
   13f88:	a0 e0       	ldi	r26, 0x00	; 0
   13f8a:	ed b7       	in	r30, 0x3d	; 61
   13f8c:	fe b7       	in	r31, 0x3e	; 62
   13f8e:	81 83       	std	Z+1, r24	; 0x01
   13f90:	92 83       	std	Z+2, r25	; 0x02
   13f92:	a3 83       	std	Z+3, r26	; 0x03
   13f94:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
                print_var("ID", (uint32_t) SS80p->CONFIG.ID);
   13f98:	ef 85       	ldd	r30, Y+15	; 0x0f
   13f9a:	f8 89       	ldd	r31, Y+16	; 0x10
   13f9c:	24 81       	ldd	r18, Z+4	; 0x04
   13f9e:	35 81       	ldd	r19, Z+5	; 0x05
   13fa0:	40 e0       	ldi	r20, 0x00	; 0
   13fa2:	50 e0       	ldi	r21, 0x00	; 0
   13fa4:	63 e7       	ldi	r22, 0x73	; 115
   13fa6:	76 e1       	ldi	r23, 0x16	; 22
   13fa8:	80 e0       	ldi	r24, 0x00	; 0
   13faa:	a4 dd       	rcall	.-1208   	; 0x13af4 <print_var_P>
			printf("  END\n");
   13fac:	8c e6       	ldi	r24, 0x6C	; 108
   13fae:	96 e1       	ldi	r25, 0x16	; 22
   13fb0:	a0 e0       	ldi	r26, 0x00	; 0
   13fb2:	ed b7       	in	r30, 0x3d	; 61
   13fb4:	fe b7       	in	r31, 0x3e	; 62
   13fb6:	81 83       	std	Z+1, r24	; 0x01
   13fb8:	92 83       	std	Z+2, r25	; 0x02
   13fba:	a3 83       	std	Z+3, r26	; 0x03
   13fbc:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
            printf("  CONTROLLER\n");
   13fc0:	8e e5       	ldi	r24, 0x5E	; 94
   13fc2:	96 e1       	ldi	r25, 0x16	; 22
   13fc4:	a0 e0       	ldi	r26, 0x00	; 0
   13fc6:	ed b7       	in	r30, 0x3d	; 61
   13fc8:	fe b7       	in	r31, 0x3e	; 62
   13fca:	81 83       	std	Z+1, r24	; 0x01
   13fcc:	92 83       	std	Z+2, r25	; 0x02
   13fce:	a3 83       	std	Z+3, r26	; 0x03
   13fd0:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
                print_var("UNITS_INSTALLED", (uint32_t) SS80p->CONTROLLER.UNITS_INSTALLED);
   13fd4:	ef 85       	ldd	r30, Y+15	; 0x0f
   13fd6:	f8 89       	ldd	r31, Y+16	; 0x10
   13fd8:	26 81       	ldd	r18, Z+6	; 0x06
   13fda:	37 81       	ldd	r19, Z+7	; 0x07
   13fdc:	40 e0       	ldi	r20, 0x00	; 0
   13fde:	50 e0       	ldi	r21, 0x00	; 0
   13fe0:	6e e4       	ldi	r22, 0x4E	; 78
   13fe2:	76 e1       	ldi	r23, 0x16	; 22
   13fe4:	80 e0       	ldi	r24, 0x00	; 0
   13fe6:	86 dd       	rcall	.-1268   	; 0x13af4 <print_var_P>
                print_var("TRANSFER_RATE", (uint32_t)  SS80p->CONTROLLER.TRANSFER_RATE);
   13fe8:	ef 85       	ldd	r30, Y+15	; 0x0f
   13fea:	f8 89       	ldd	r31, Y+16	; 0x10
   13fec:	20 85       	ldd	r18, Z+8	; 0x08
   13fee:	31 85       	ldd	r19, Z+9	; 0x09
   13ff0:	40 e0       	ldi	r20, 0x00	; 0
   13ff2:	50 e0       	ldi	r21, 0x00	; 0
   13ff4:	60 e4       	ldi	r22, 0x40	; 64
   13ff6:	76 e1       	ldi	r23, 0x16	; 22
   13ff8:	80 e0       	ldi	r24, 0x00	; 0
   13ffa:	7c dd       	rcall	.-1288   	; 0x13af4 <print_var_P>
                print_var("TYPE", (uint32_t)  SS80p->CONTROLLER.TYPE);
   13ffc:	ef 85       	ldd	r30, Y+15	; 0x0f
   13ffe:	f8 89       	ldd	r31, Y+16	; 0x10
   14000:	22 85       	ldd	r18, Z+10	; 0x0a
   14002:	30 e0       	ldi	r19, 0x00	; 0
   14004:	40 e0       	ldi	r20, 0x00	; 0
   14006:	50 e0       	ldi	r21, 0x00	; 0
   14008:	6b e3       	ldi	r22, 0x3B	; 59
   1400a:	76 e1       	ldi	r23, 0x16	; 22
   1400c:	80 e0       	ldi	r24, 0x00	; 0
   1400e:	72 dd       	rcall	.-1308   	; 0x13af4 <print_var_P>
			printf("  END\n");
   14010:	84 e3       	ldi	r24, 0x34	; 52
   14012:	96 e1       	ldi	r25, 0x16	; 22
   14014:	a0 e0       	ldi	r26, 0x00	; 0
   14016:	ed b7       	in	r30, 0x3d	; 61
   14018:	fe b7       	in	r31, 0x3e	; 62
   1401a:	81 83       	std	Z+1, r24	; 0x01
   1401c:	92 83       	std	Z+2, r25	; 0x02
   1401e:	a3 83       	std	Z+3, r26	; 0x03
   14020:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
            printf("  UNIT\n");
   14024:	8c e2       	ldi	r24, 0x2C	; 44
   14026:	96 e1       	ldi	r25, 0x16	; 22
   14028:	a0 e0       	ldi	r26, 0x00	; 0
   1402a:	ed b7       	in	r30, 0x3d	; 61
   1402c:	fe b7       	in	r31, 0x3e	; 62
   1402e:	81 83       	std	Z+1, r24	; 0x01
   14030:	92 83       	std	Z+2, r25	; 0x02
   14032:	a3 83       	std	Z+3, r26	; 0x03
   14034:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
                print_var("UNIT_TYPE", (uint32_t)SS80p->UNIT.UNIT_TYPE);
   14038:	ef 85       	ldd	r30, Y+15	; 0x0f
   1403a:	f8 89       	ldd	r31, Y+16	; 0x10
   1403c:	23 85       	ldd	r18, Z+11	; 0x0b
   1403e:	30 e0       	ldi	r19, 0x00	; 0
   14040:	40 e0       	ldi	r20, 0x00	; 0
   14042:	50 e0       	ldi	r21, 0x00	; 0
   14044:	62 e2       	ldi	r22, 0x22	; 34
   14046:	76 e1       	ldi	r23, 0x16	; 22
   14048:	80 e0       	ldi	r24, 0x00	; 0
   1404a:	54 dd       	rcall	.-1368   	; 0x13af4 <print_var_P>
                print_var("DEVICE_NUMBER", (uint32_t)SS80p->UNIT.DEVICE_NUMBER);
   1404c:	ef 85       	ldd	r30, Y+15	; 0x0f
   1404e:	f8 89       	ldd	r31, Y+16	; 0x10
   14050:	24 85       	ldd	r18, Z+12	; 0x0c
   14052:	35 85       	ldd	r19, Z+13	; 0x0d
   14054:	46 85       	ldd	r20, Z+14	; 0x0e
   14056:	57 85       	ldd	r21, Z+15	; 0x0f
   14058:	64 e1       	ldi	r22, 0x14	; 20
   1405a:	76 e1       	ldi	r23, 0x16	; 22
   1405c:	80 e0       	ldi	r24, 0x00	; 0
                print_var("BYTES_PER_BLOCK", (uint32_t)SS80p->UNIT.BYTES_PER_BLOCK);
   1405e:	4a dd       	rcall	.-1388   	; 0x13af4 <print_var_P>
   14060:	ef 85       	ldd	r30, Y+15	; 0x0f
   14062:	f8 89       	ldd	r31, Y+16	; 0x10
   14064:	20 89       	ldd	r18, Z+16	; 0x10
   14066:	31 89       	ldd	r19, Z+17	; 0x11
   14068:	40 e0       	ldi	r20, 0x00	; 0
   1406a:	50 e0       	ldi	r21, 0x00	; 0
   1406c:	64 e0       	ldi	r22, 0x04	; 4
   1406e:	76 e1       	ldi	r23, 0x16	; 22
                print_var("BUFFERED_BLOCKS", (uint32_t)SS80p->UNIT.BUFFERED_BLOCKS);
   14070:	80 e0       	ldi	r24, 0x00	; 0
   14072:	40 dd       	rcall	.-1408   	; 0x13af4 <print_var_P>
   14074:	ef 85       	ldd	r30, Y+15	; 0x0f
   14076:	f8 89       	ldd	r31, Y+16	; 0x10
   14078:	22 89       	ldd	r18, Z+18	; 0x12
   1407a:	30 e0       	ldi	r19, 0x00	; 0
   1407c:	40 e0       	ldi	r20, 0x00	; 0
   1407e:	50 e0       	ldi	r21, 0x00	; 0
   14080:	64 ef       	ldi	r22, 0xF4	; 244
   14082:	75 e1       	ldi	r23, 0x15	; 21
                print_var("BURST_SIZE", (uint32_t)SS80p->UNIT.BURST_SIZE);
   14084:	80 e0       	ldi	r24, 0x00	; 0
   14086:	36 dd       	rcall	.-1428   	; 0x13af4 <print_var_P>
   14088:	ef 85       	ldd	r30, Y+15	; 0x0f
   1408a:	f8 89       	ldd	r31, Y+16	; 0x10
   1408c:	23 89       	ldd	r18, Z+19	; 0x13
   1408e:	30 e0       	ldi	r19, 0x00	; 0
   14090:	40 e0       	ldi	r20, 0x00	; 0
   14092:	50 e0       	ldi	r21, 0x00	; 0
   14094:	69 ee       	ldi	r22, 0xE9	; 233
   14096:	75 e1       	ldi	r23, 0x15	; 21
                print_var("BLOCK_TIME", (uint32_t)SS80p->UNIT.BLOCK_TIME);
   14098:	80 e0       	ldi	r24, 0x00	; 0
   1409a:	2c dd       	rcall	.-1448   	; 0x13af4 <print_var_P>
   1409c:	ef 85       	ldd	r30, Y+15	; 0x0f
   1409e:	f8 89       	ldd	r31, Y+16	; 0x10
   140a0:	24 89       	ldd	r18, Z+20	; 0x14
   140a2:	35 89       	ldd	r19, Z+21	; 0x15
   140a4:	40 e0       	ldi	r20, 0x00	; 0
   140a6:	50 e0       	ldi	r21, 0x00	; 0
   140a8:	6e ed       	ldi	r22, 0xDE	; 222
   140aa:	75 e1       	ldi	r23, 0x15	; 21
                print_var("CONTINUOUS_TRANSFER_RATE", (uint32_t)SS80p->UNIT.CONTINUOUS_TRANSFER_RATE);
   140ac:	80 e0       	ldi	r24, 0x00	; 0
   140ae:	22 dd       	rcall	.-1468   	; 0x13af4 <print_var_P>
   140b0:	ef 85       	ldd	r30, Y+15	; 0x0f
   140b2:	f8 89       	ldd	r31, Y+16	; 0x10
   140b4:	26 89       	ldd	r18, Z+22	; 0x16
   140b6:	37 89       	ldd	r19, Z+23	; 0x17
   140b8:	40 e0       	ldi	r20, 0x00	; 0
   140ba:	50 e0       	ldi	r21, 0x00	; 0
   140bc:	65 ec       	ldi	r22, 0xC5	; 197
   140be:	75 e1       	ldi	r23, 0x15	; 21
                print_var("OPTIMAL_RETRY_TIME", (uint32_t)SS80p->UNIT.OPTIMAL_RETRY_TIME);
   140c0:	80 e0       	ldi	r24, 0x00	; 0
   140c2:	18 dd       	rcall	.-1488   	; 0x13af4 <print_var_P>
   140c4:	ef 85       	ldd	r30, Y+15	; 0x0f
   140c6:	f8 89       	ldd	r31, Y+16	; 0x10
   140c8:	20 8d       	ldd	r18, Z+24	; 0x18
   140ca:	31 8d       	ldd	r19, Z+25	; 0x19
   140cc:	40 e0       	ldi	r20, 0x00	; 0
   140ce:	50 e0       	ldi	r21, 0x00	; 0
   140d0:	62 eb       	ldi	r22, 0xB2	; 178
   140d2:	75 e1       	ldi	r23, 0x15	; 21
                print_var("ACCESS_TIME", (uint32_t)SS80p->UNIT.ACCESS_TIME);
   140d4:	80 e0       	ldi	r24, 0x00	; 0
   140d6:	0e dd       	rcall	.-1508   	; 0x13af4 <print_var_P>
   140d8:	ef 85       	ldd	r30, Y+15	; 0x0f
   140da:	f8 89       	ldd	r31, Y+16	; 0x10
   140dc:	22 8d       	ldd	r18, Z+26	; 0x1a
   140de:	33 8d       	ldd	r19, Z+27	; 0x1b
   140e0:	40 e0       	ldi	r20, 0x00	; 0
   140e2:	50 e0       	ldi	r21, 0x00	; 0
   140e4:	66 ea       	ldi	r22, 0xA6	; 166
   140e6:	75 e1       	ldi	r23, 0x15	; 21
                print_var("MAXIMUM_INTERLEAVE", (uint32_t)SS80p->UNIT.MAXIMUM_INTERLEAVE);
   140e8:	80 e0       	ldi	r24, 0x00	; 0
   140ea:	04 dd       	rcall	.-1528   	; 0x13af4 <print_var_P>
   140ec:	ef 85       	ldd	r30, Y+15	; 0x0f
   140ee:	f8 89       	ldd	r31, Y+16	; 0x10
   140f0:	24 8d       	ldd	r18, Z+28	; 0x1c
   140f2:	30 e0       	ldi	r19, 0x00	; 0
   140f4:	40 e0       	ldi	r20, 0x00	; 0
   140f6:	50 e0       	ldi	r21, 0x00	; 0
   140f8:	63 e9       	ldi	r22, 0x93	; 147
   140fa:	75 e1       	ldi	r23, 0x15	; 21
                print_var("FIXED_VOLUMES", (uint32_t)SS80p->UNIT.FIXED_VOLUMES);
   140fc:	80 e0       	ldi	r24, 0x00	; 0
   140fe:	fa dc       	rcall	.-1548   	; 0x13af4 <print_var_P>
   14100:	ef 85       	ldd	r30, Y+15	; 0x0f
   14102:	f8 89       	ldd	r31, Y+16	; 0x10
   14104:	25 8d       	ldd	r18, Z+29	; 0x1d
   14106:	30 e0       	ldi	r19, 0x00	; 0
   14108:	40 e0       	ldi	r20, 0x00	; 0
   1410a:	50 e0       	ldi	r21, 0x00	; 0
   1410c:	65 e8       	ldi	r22, 0x85	; 133
   1410e:	75 e1       	ldi	r23, 0x15	; 21
                print_var("REMOVABLE_VOLUMES", (uint32_t)SS80p->UNIT.REMOVABLE_VOLUMES);
   14110:	80 e0       	ldi	r24, 0x00	; 0
   14112:	f0 dc       	rcall	.-1568   	; 0x13af4 <print_var_P>
   14114:	ef 85       	ldd	r30, Y+15	; 0x0f
   14116:	f8 89       	ldd	r31, Y+16	; 0x10
   14118:	26 8d       	ldd	r18, Z+30	; 0x1e
   1411a:	30 e0       	ldi	r19, 0x00	; 0
   1411c:	40 e0       	ldi	r20, 0x00	; 0
   1411e:	50 e0       	ldi	r21, 0x00	; 0
   14120:	63 e7       	ldi	r22, 0x73	; 115
   14122:	75 e1       	ldi	r23, 0x15	; 21
   14124:	80 e0       	ldi	r24, 0x00	; 0
			printf("  END\n");
   14126:	e6 dc       	rcall	.-1588   	; 0x13af4 <print_var_P>
   14128:	8c e6       	ldi	r24, 0x6C	; 108
   1412a:	95 e1       	ldi	r25, 0x15	; 21
   1412c:	a0 e0       	ldi	r26, 0x00	; 0
   1412e:	ed b7       	in	r30, 0x3d	; 61
   14130:	fe b7       	in	r31, 0x3e	; 62
   14132:	81 83       	std	Z+1, r24	; 0x01
   14134:	92 83       	std	Z+2, r25	; 0x02
   14136:	a3 83       	std	Z+3, r26	; 0x03
            printf("  VOLUME\n");
   14138:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   1413c:	82 e6       	ldi	r24, 0x62	; 98
   1413e:	95 e1       	ldi	r25, 0x15	; 21
   14140:	a0 e0       	ldi	r26, 0x00	; 0
   14142:	ed b7       	in	r30, 0x3d	; 61
   14144:	fe b7       	in	r31, 0x3e	; 62
   14146:	81 83       	std	Z+1, r24	; 0x01
                print_var("MAX_CYLINDER", (uint32_t)SS80p->VOLUME.MAX_CYLINDER);
   14148:	92 83       	std	Z+2, r25	; 0x02
   1414a:	a3 83       	std	Z+3, r26	; 0x03
   1414c:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   14150:	ef 85       	ldd	r30, Y+15	; 0x0f
   14152:	f8 89       	ldd	r31, Y+16	; 0x10
   14154:	27 8d       	ldd	r18, Z+31	; 0x1f
   14156:	30 a1       	ldd	r19, Z+32	; 0x20
   14158:	41 a1       	ldd	r20, Z+33	; 0x21
                print_var("MAX_HEAD", (uint32_t)SS80p->VOLUME.MAX_HEAD);
   1415a:	52 a1       	ldd	r21, Z+34	; 0x22
   1415c:	65 e5       	ldi	r22, 0x55	; 85
   1415e:	75 e1       	ldi	r23, 0x15	; 21
   14160:	80 e0       	ldi	r24, 0x00	; 0
   14162:	c8 dc       	rcall	.-1648   	; 0x13af4 <print_var_P>
   14164:	ef 85       	ldd	r30, Y+15	; 0x0f
   14166:	f8 89       	ldd	r31, Y+16	; 0x10
   14168:	23 a1       	ldd	r18, Z+35	; 0x23
   1416a:	30 e0       	ldi	r19, 0x00	; 0
   1416c:	40 e0       	ldi	r20, 0x00	; 0
                print_var("MAX_SECTOR", (uint32_t)SS80p->VOLUME.MAX_SECTOR);
   1416e:	50 e0       	ldi	r21, 0x00	; 0
   14170:	6c e4       	ldi	r22, 0x4C	; 76
   14172:	75 e1       	ldi	r23, 0x15	; 21
   14174:	80 e0       	ldi	r24, 0x00	; 0
   14176:	be dc       	rcall	.-1668   	; 0x13af4 <print_var_P>
   14178:	ef 85       	ldd	r30, Y+15	; 0x0f
   1417a:	f8 89       	ldd	r31, Y+16	; 0x10
   1417c:	24 a1       	ldd	r18, Z+36	; 0x24
   1417e:	35 a1       	ldd	r19, Z+37	; 0x25
   14180:	40 e0       	ldi	r20, 0x00	; 0
                print_var("MAX_BLOCK_NUMBER", (uint32_t)SS80p->VOLUME.MAX_BLOCK_NUMBER);
   14182:	50 e0       	ldi	r21, 0x00	; 0
   14184:	61 e4       	ldi	r22, 0x41	; 65
   14186:	75 e1       	ldi	r23, 0x15	; 21
   14188:	80 e0       	ldi	r24, 0x00	; 0
   1418a:	b4 dc       	rcall	.-1688   	; 0x13af4 <print_var_P>
   1418c:	ef 85       	ldd	r30, Y+15	; 0x0f
   1418e:	f8 89       	ldd	r31, Y+16	; 0x10
   14190:	26 a1       	ldd	r18, Z+38	; 0x26
   14192:	37 a1       	ldd	r19, Z+39	; 0x27
   14194:	40 a5       	ldd	r20, Z+40	; 0x28
   14196:	51 a5       	ldd	r21, Z+41	; 0x29
                print_var("INTERLEAVE", (uint32_t)SS80p->VOLUME.INTERLEAVE);
   14198:	60 e3       	ldi	r22, 0x30	; 48
   1419a:	75 e1       	ldi	r23, 0x15	; 21
   1419c:	80 e0       	ldi	r24, 0x00	; 0
   1419e:	aa dc       	rcall	.-1708   	; 0x13af4 <print_var_P>
   141a0:	ef 85       	ldd	r30, Y+15	; 0x0f
   141a2:	f8 89       	ldd	r31, Y+16	; 0x10
   141a4:	22 a5       	ldd	r18, Z+42	; 0x2a
   141a6:	30 e0       	ldi	r19, 0x00	; 0
   141a8:	40 e0       	ldi	r20, 0x00	; 0
   141aa:	50 e0       	ldi	r21, 0x00	; 0
                print_var("# BLOCKS", (uint32_t)SS80p->VOLUME.MAX_BLOCK_NUMBER+1);
   141ac:	65 e2       	ldi	r22, 0x25	; 37
   141ae:	75 e1       	ldi	r23, 0x15	; 21
   141b0:	80 e0       	ldi	r24, 0x00	; 0
   141b2:	a0 dc       	rcall	.-1728   	; 0x13af4 <print_var_P>
   141b4:	ef 85       	ldd	r30, Y+15	; 0x0f
   141b6:	f8 89       	ldd	r31, Y+16	; 0x10
   141b8:	86 a1       	ldd	r24, Z+38	; 0x26
   141ba:	97 a1       	ldd	r25, Z+39	; 0x27
   141bc:	a0 a5       	ldd	r26, Z+40	; 0x28
   141be:	b1 a5       	ldd	r27, Z+41	; 0x29
   141c0:	9c 01       	movw	r18, r24
   141c2:	ad 01       	movw	r20, r26
   141c4:	2f 5f       	subi	r18, 0xFF	; 255
   141c6:	3f 4f       	sbci	r19, 0xFF	; 255
   141c8:	4f 4f       	sbci	r20, 0xFF	; 255
   141ca:	5f 4f       	sbci	r21, 0xFF	; 255
   141cc:	6c e1       	ldi	r22, 0x1C	; 28
			printf("  END\n");
   141ce:	75 e1       	ldi	r23, 0x15	; 21
   141d0:	80 e0       	ldi	r24, 0x00	; 0
   141d2:	90 dc       	rcall	.-1760   	; 0x13af4 <print_var_P>
   141d4:	85 e1       	ldi	r24, 0x15	; 21
   141d6:	95 e1       	ldi	r25, 0x15	; 21
   141d8:	a0 e0       	ldi	r26, 0x00	; 0
   141da:	ed b7       	in	r30, 0x3d	; 61
   141dc:	fe b7       	in	r31, 0x3e	; 62
   141de:	81 83       	std	Z+1, r24	; 0x01
   141e0:	92 83       	std	Z+2, r25	; 0x02
        } // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   141e2:	a3 83       	std	Z+3, r26	; 0x03
   141e4:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   141e8:	f8 01       	movw	r30, r16
   141ea:	80 81       	ld	r24, Z
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
   141ec:	81 30       	cpi	r24, 0x01	; 1
   141ee:	09 f0       	breq	.+2      	; 0x141f2 <display_Config+0x3b2>
   141f0:	c7 c0       	rjmp	.+398    	; 0x14380 <display_Config+0x540>
   141f2:	27 a1       	ldd	r18, Z+39	; 0x27

            printf("AMIGO %s\n", Devices[i].model);
   141f4:	30 a5       	ldd	r19, Z+40	; 0x28
   141f6:	38 8b       	std	Y+16, r19	; 0x10
   141f8:	2f 87       	std	Y+15, r18	; 0x0f
   141fa:	c8 01       	movw	r24, r16
   141fc:	07 96       	adiw	r24, 0x07	; 7
   141fe:	ed b7       	in	r30, 0x3d	; 61
   14200:	fe b7       	in	r31, 0x3e	; 62
   14202:	95 83       	std	Z+5, r25	; 0x05
   14204:	84 83       	std	Z+4, r24	; 0x04
   14206:	c5 01       	movw	r24, r10
   14208:	a0 e0       	ldi	r26, 0x00	; 0
   1420a:	81 83       	std	Z+1, r24	; 0x01
   1420c:	92 83       	std	Z+2, r25	; 0x02
			printf("  # HP85 BASIC ADDRESS :D7%d0\n", (int) AMIGOp->HEADER.ADDRESS);
   1420e:	a3 83       	std	Z+3, r26	; 0x03
   14210:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   14214:	ef 85       	ldd	r30, Y+15	; 0x0f
   14216:	f8 89       	ldd	r31, Y+16	; 0x10
   14218:	80 81       	ld	r24, Z
   1421a:	90 e0       	ldi	r25, 0x00	; 0
   1421c:	ed b7       	in	r30, 0x3d	; 61
   1421e:	fe b7       	in	r31, 0x3e	; 62
   14220:	95 83       	std	Z+5, r25	; 0x05
   14222:	84 83       	std	Z+4, r24	; 0x04
   14224:	8c ee       	ldi	r24, 0xEC	; 236
   14226:	94 e1       	ldi	r25, 0x14	; 20
   14228:	a0 e0       	ldi	r26, 0x00	; 0
   1422a:	81 83       	std	Z+1, r24	; 0x01
            printf("  HEADER\n");
   1422c:	92 83       	std	Z+2, r25	; 0x02
   1422e:	a3 83       	std	Z+3, r26	; 0x03
   14230:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   14234:	82 ee       	ldi	r24, 0xE2	; 226
   14236:	94 e1       	ldi	r25, 0x14	; 20
   14238:	a0 e0       	ldi	r26, 0x00	; 0
   1423a:	ed b7       	in	r30, 0x3d	; 61
   1423c:	fe b7       	in	r31, 0x3e	; 62
                print_var("ADDRESS", (uint32_t) AMIGOp->HEADER.ADDRESS);
   1423e:	81 83       	std	Z+1, r24	; 0x01
   14240:	92 83       	std	Z+2, r25	; 0x02
   14242:	a3 83       	std	Z+3, r26	; 0x03
   14244:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   14248:	ef 85       	ldd	r30, Y+15	; 0x0f
   1424a:	f8 89       	ldd	r31, Y+16	; 0x10
   1424c:	20 81       	ld	r18, Z
   1424e:	30 e0       	ldi	r19, 0x00	; 0
   14250:	40 e0       	ldi	r20, 0x00	; 0
                print_var("PPR", (uint32_t) AMIGOp->HEADER.PPR);
   14252:	50 e0       	ldi	r21, 0x00	; 0
   14254:	6a ed       	ldi	r22, 0xDA	; 218
   14256:	74 e1       	ldi	r23, 0x14	; 20
   14258:	80 e0       	ldi	r24, 0x00	; 0
   1425a:	4c dc       	rcall	.-1896   	; 0x13af4 <print_var_P>
   1425c:	ef 85       	ldd	r30, Y+15	; 0x0f
   1425e:	f8 89       	ldd	r31, Y+16	; 0x10
   14260:	21 81       	ldd	r18, Z+1	; 0x01
   14262:	30 e0       	ldi	r19, 0x00	; 0
   14264:	40 e0       	ldi	r20, 0x00	; 0
   14266:	50 e0       	ldi	r21, 0x00	; 0
                print_str("FILE", AMIGOp->HEADER.NAME);
   14268:	66 ed       	ldi	r22, 0xD6	; 214
   1426a:	74 e1       	ldi	r23, 0x14	; 20
   1426c:	80 e0       	ldi	r24, 0x00	; 0
   1426e:	42 dc       	rcall	.-1916   	; 0x13af4 <print_var_P>
   14270:	ef 85       	ldd	r30, Y+15	; 0x0f
   14272:	f8 89       	ldd	r31, Y+16	; 0x10
   14274:	42 81       	ldd	r20, Z+2	; 0x02
   14276:	53 81       	ldd	r21, Z+3	; 0x03
   14278:	61 ed       	ldi	r22, 0xD1	; 209
			printf("  END\n");
   1427a:	74 e1       	ldi	r23, 0x14	; 20
   1427c:	80 e0       	ldi	r24, 0x00	; 0
   1427e:	92 dc       	rcall	.-1756   	; 0x13ba4 <print_str_P>
   14280:	8a ec       	ldi	r24, 0xCA	; 202
   14282:	94 e1       	ldi	r25, 0x14	; 20
   14284:	a0 e0       	ldi	r26, 0x00	; 0
   14286:	ed b7       	in	r30, 0x3d	; 61
   14288:	fe b7       	in	r31, 0x3e	; 62
   1428a:	81 83       	std	Z+1, r24	; 0x01
            printf("  CONFIG\n");
   1428c:	92 83       	std	Z+2, r25	; 0x02
   1428e:	a3 83       	std	Z+3, r26	; 0x03
   14290:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   14294:	80 ec       	ldi	r24, 0xC0	; 192
   14296:	94 e1       	ldi	r25, 0x14	; 20
   14298:	a0 e0       	ldi	r26, 0x00	; 0
   1429a:	ed b7       	in	r30, 0x3d	; 61
   1429c:	fe b7       	in	r31, 0x3e	; 62
   1429e:	81 83       	std	Z+1, r24	; 0x01
                print_var("ID", (uint32_t) AMIGOp->CONFIG.ID);
   142a0:	92 83       	std	Z+2, r25	; 0x02
   142a2:	a3 83       	std	Z+3, r26	; 0x03
   142a4:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   142a8:	ef 85       	ldd	r30, Y+15	; 0x0f
   142aa:	f8 89       	ldd	r31, Y+16	; 0x10
   142ac:	24 81       	ldd	r18, Z+4	; 0x04
   142ae:	35 81       	ldd	r19, Z+5	; 0x05
   142b0:	40 e0       	ldi	r20, 0x00	; 0
   142b2:	50 e0       	ldi	r21, 0x00	; 0
   142b4:	6d eb       	ldi	r22, 0xBD	; 189
			printf("  END\n");
   142b6:	74 e1       	ldi	r23, 0x14	; 20
   142b8:	80 e0       	ldi	r24, 0x00	; 0
   142ba:	1c dc       	rcall	.-1992   	; 0x13af4 <print_var_P>
   142bc:	86 eb       	ldi	r24, 0xB6	; 182
   142be:	94 e1       	ldi	r25, 0x14	; 20
   142c0:	a0 e0       	ldi	r26, 0x00	; 0
   142c2:	ed b7       	in	r30, 0x3d	; 61
   142c4:	fe b7       	in	r31, 0x3e	; 62
   142c6:	81 83       	std	Z+1, r24	; 0x01
            printf("  GEOMETRY\n");
   142c8:	92 83       	std	Z+2, r25	; 0x02
   142ca:	a3 83       	std	Z+3, r26	; 0x03
   142cc:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   142d0:	8a ea       	ldi	r24, 0xAA	; 170
   142d2:	94 e1       	ldi	r25, 0x14	; 20
   142d4:	a0 e0       	ldi	r26, 0x00	; 0
   142d6:	ed b7       	in	r30, 0x3d	; 61
   142d8:	fe b7       	in	r31, 0x3e	; 62
                print_var("BYTES_PER_SECTOR", (uint32_t) AMIGOp->GEOMETRY.BYTES_PER_SECTOR);
   142da:	81 83       	std	Z+1, r24	; 0x01
   142dc:	92 83       	std	Z+2, r25	; 0x02
   142de:	a3 83       	std	Z+3, r26	; 0x03
   142e0:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   142e4:	ef 85       	ldd	r30, Y+15	; 0x0f
   142e6:	f8 89       	ldd	r31, Y+16	; 0x10
   142e8:	26 81       	ldd	r18, Z+6	; 0x06
   142ea:	37 81       	ldd	r19, Z+7	; 0x07
   142ec:	03 2e       	mov	r0, r19
   142ee:	00 0c       	add	r0, r0
   142f0:	44 0b       	sbc	r20, r20
                print_var("SECTORS_PER_TRACK", (uint32_t) AMIGOp->GEOMETRY.SECTORS_PER_TRACK);
   142f2:	55 0b       	sbc	r21, r21
   142f4:	69 e9       	ldi	r22, 0x99	; 153
   142f6:	74 e1       	ldi	r23, 0x14	; 20
   142f8:	80 e0       	ldi	r24, 0x00	; 0
   142fa:	fc db       	rcall	.-2056   	; 0x13af4 <print_var_P>
   142fc:	ef 85       	ldd	r30, Y+15	; 0x0f
   142fe:	f8 89       	ldd	r31, Y+16	; 0x10
   14300:	20 85       	ldd	r18, Z+8	; 0x08
   14302:	31 85       	ldd	r19, Z+9	; 0x09
   14304:	03 2e       	mov	r0, r19
   14306:	00 0c       	add	r0, r0
   14308:	44 0b       	sbc	r20, r20
                print_var("HEADS", (uint32_t) AMIGOp->GEOMETRY.HEADS);
   1430a:	55 0b       	sbc	r21, r21
   1430c:	67 e8       	ldi	r22, 0x87	; 135
   1430e:	74 e1       	ldi	r23, 0x14	; 20
   14310:	80 e0       	ldi	r24, 0x00	; 0
   14312:	f0 db       	rcall	.-2080   	; 0x13af4 <print_var_P>
   14314:	ef 85       	ldd	r30, Y+15	; 0x0f
   14316:	f8 89       	ldd	r31, Y+16	; 0x10
   14318:	22 85       	ldd	r18, Z+10	; 0x0a
   1431a:	33 85       	ldd	r19, Z+11	; 0x0b
   1431c:	03 2e       	mov	r0, r19
   1431e:	00 0c       	add	r0, r0
   14320:	44 0b       	sbc	r20, r20
                print_var("CYLINDERS", (uint32_t) AMIGOp->GEOMETRY.CYLINDERS);
   14322:	55 0b       	sbc	r21, r21
   14324:	61 e8       	ldi	r22, 0x81	; 129
   14326:	74 e1       	ldi	r23, 0x14	; 20
   14328:	80 e0       	ldi	r24, 0x00	; 0
   1432a:	e4 db       	rcall	.-2104   	; 0x13af4 <print_var_P>
   1432c:	ef 85       	ldd	r30, Y+15	; 0x0f
   1432e:	f8 89       	ldd	r31, Y+16	; 0x10
   14330:	24 85       	ldd	r18, Z+12	; 0x0c
   14332:	35 85       	ldd	r19, Z+13	; 0x0d
   14334:	03 2e       	mov	r0, r19
   14336:	00 0c       	add	r0, r0
   14338:	44 0b       	sbc	r20, r20
   1433a:	55 0b       	sbc	r21, r21
                print_var("# BLOCKS", (uint32_t)AMIGOp->GEOMETRY.CYLINDERS * AMIGOp->GEOMETRY.SECTORS_PER_TRACK * AMIGOp->GEOMETRY.HEADS );
   1433c:	67 e7       	ldi	r22, 0x77	; 119
   1433e:	74 e1       	ldi	r23, 0x14	; 20
   14340:	80 e0       	ldi	r24, 0x00	; 0
   14342:	d8 db       	rcall	.-2128   	; 0x13af4 <print_var_P>
   14344:	ef 85       	ldd	r30, Y+15	; 0x0f
   14346:	f8 89       	ldd	r31, Y+16	; 0x10
   14348:	24 85       	ldd	r18, Z+12	; 0x0c
   1434a:	35 85       	ldd	r19, Z+13	; 0x0d
   1434c:	a0 85       	ldd	r26, Z+8	; 0x08
   1434e:	b1 85       	ldd	r27, Z+9	; 0x09
   14350:	0e 94 8d e3 	call	0x1c71a	; 0x1c71a <__mulhisi3>
   14354:	9b 01       	movw	r18, r22
   14356:	ac 01       	movw	r20, r24
   14358:	a2 85       	ldd	r26, Z+10	; 0x0a
   1435a:	b3 85       	ldd	r27, Z+11	; 0x0b
   1435c:	0e 94 b2 e3 	call	0x1c764	; 0x1c764 <__mulshisi3>
   14360:	9b 01       	movw	r18, r22
   14362:	ac 01       	movw	r20, r24
   14364:	6e e6       	ldi	r22, 0x6E	; 110
			printf("  END\n");
   14366:	74 e1       	ldi	r23, 0x14	; 20
   14368:	80 e0       	ldi	r24, 0x00	; 0
   1436a:	c4 db       	rcall	.-2168   	; 0x13af4 <print_var_P>
   1436c:	87 e6       	ldi	r24, 0x67	; 103
   1436e:	94 e1       	ldi	r25, 0x14	; 20
   14370:	a0 e0       	ldi	r26, 0x00	; 0
   14372:	ed b7       	in	r30, 0x3d	; 61
   14374:	fe b7       	in	r31, 0x3e	; 62
   14376:	81 83       	std	Z+1, r24	; 0x01
        } 
#endif // #ifdef AMIGO

        if(Devices[i].TYPE == PRINTER_TYPE )
   14378:	92 83       	std	Z+2, r25	; 0x02
   1437a:	a3 83       	std	Z+3, r26	; 0x03
   1437c:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
        {
            PRINTERp= (PRINTERDeviceType *)Devices[i].dev;
   14380:	f8 01       	movw	r30, r16
   14382:	80 81       	ld	r24, Z
   14384:	84 30       	cpi	r24, 0x04	; 4
   14386:	29 f5       	brne	.+74     	; 0x143d2 <display_Config+0x592>

            printf("PRINTER\n");
   14388:	27 a1       	ldd	r18, Z+39	; 0x27
   1438a:	30 a5       	ldd	r19, Z+40	; 0x28
   1438c:	38 8b       	std	Y+16, r19	; 0x10
   1438e:	2f 87       	std	Y+15, r18	; 0x0f
   14390:	8c 85       	ldd	r24, Y+12	; 0x0c
   14392:	9d 85       	ldd	r25, Y+13	; 0x0d
   14394:	ae 85       	ldd	r26, Y+14	; 0x0e
   14396:	ed b7       	in	r30, 0x3d	; 61
   14398:	fe b7       	in	r31, 0x3e	; 62
   1439a:	81 83       	std	Z+1, r24	; 0x01
            printf("  CONFIG\n");
   1439c:	92 83       	std	Z+2, r25	; 0x02
   1439e:	a3 83       	std	Z+3, r26	; 0x03
   143a0:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   143a4:	ed b7       	in	r30, 0x3d	; 61
   143a6:	fe b7       	in	r31, 0x3e	; 62
   143a8:	21 82       	std	Z+1, r2	; 0x01
                print_var("ADDRESS", (uint32_t) PRINTERp->HEADER.ADDRESS);
   143aa:	32 82       	std	Z+2, r3	; 0x02
   143ac:	43 82       	std	Z+3, r4	; 0x03
   143ae:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   143b2:	ef 85       	ldd	r30, Y+15	; 0x0f
   143b4:	f8 89       	ldd	r31, Y+16	; 0x10
   143b6:	20 81       	ld	r18, Z
   143b8:	30 e0       	ldi	r19, 0x00	; 0
   143ba:	40 e0       	ldi	r20, 0x00	; 0
   143bc:	50 e0       	ldi	r21, 0x00	; 0
			printf("  END\n");
   143be:	8e 2d       	mov	r24, r14
   143c0:	b6 01       	movw	r22, r12
   143c2:	98 db       	rcall	.-2256   	; 0x13af4 <print_var_P>
   143c4:	ed b7       	in	r30, 0x3d	; 61
   143c6:	fe b7       	in	r31, 0x3e	; 62
   143c8:	61 82       	std	Z+1, r6	; 0x01
   143ca:	72 82       	std	Z+2, r7	; 0x02
        }
		printf("END\n");
   143cc:	83 82       	std	Z+3, r8	; 0x03
   143ce:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   143d2:	2e 81       	ldd	r18, Y+6	; 0x06
   143d4:	3f 81       	ldd	r19, Y+7	; 0x07
   143d6:	48 85       	ldd	r20, Y+8	; 0x08
   143d8:	ed b7       	in	r30, 0x3d	; 61
   143da:	fe b7       	in	r31, 0x3e	; 62
   143dc:	21 83       	std	Z+1, r18	; 0x01
   143de:	32 83       	std	Z+2, r19	; 0x02
		printf("\n");
   143e0:	43 83       	std	Z+3, r20	; 0x03
   143e2:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   143e6:	29 85       	ldd	r18, Y+9	; 0x09
   143e8:	3a 85       	ldd	r19, Y+10	; 0x0a
   143ea:	4b 85       	ldd	r20, Y+11	; 0x0b
   143ec:	ed b7       	in	r30, 0x3d	; 61
   143ee:	fe b7       	in	r31, 0x3e	; 62
   143f0:	21 83       	std	Z+1, r18	; 0x01
   143f2:	32 83       	std	Z+2, r19	; 0x02
   143f4:	43 83       	std	Z+3, r20	; 0x03
   143f6:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    ///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    printf("Current Configuration Settings\n");
    for(i=0;i<MAX_DEVICES;++i)
   143fa:	05 5d       	subi	r16, 0xD5	; 213
   143fc:	1f 4f       	sbci	r17, 0xFF	; 255
   143fe:	f0 e2       	ldi	r31, 0x20	; 32
   14400:	0e 38       	cpi	r16, 0x8E	; 142
			printf("  END\n");
        }
		printf("END\n");
		printf("\n");
    }
    printf("END\n");
   14402:	1f 07       	cpc	r17, r31
   14404:	09 f0       	breq	.+2      	; 0x14408 <display_Config+0x5c8>
   14406:	64 cd       	rjmp	.-1336   	; 0x13ed0 <display_Config+0x90>
   14408:	89 e3       	ldi	r24, 0x39	; 57
   1440a:	94 e1       	ldi	r25, 0x14	; 20
   1440c:	a0 e0       	ldi	r26, 0x00	; 0
   1440e:	ed b7       	in	r30, 0x3d	; 61
   14410:	fe b7       	in	r31, 0x3e	; 62
   14412:	81 83       	std	Z+1, r24	; 0x01
   14414:	92 83       	std	Z+2, r25	; 0x02
    printf("\n");
   14416:	a3 83       	std	Z+3, r26	; 0x03
   14418:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   1441c:	87 e3       	ldi	r24, 0x37	; 55
   1441e:	94 e1       	ldi	r25, 0x14	; 20
   14420:	a0 e0       	ldi	r26, 0x00	; 0
   14422:	ed b7       	in	r30, 0x3d	; 61
   14424:	fe b7       	in	r31, 0x3e	; 62
   14426:	81 83       	std	Z+1, r24	; 0x01
   14428:	92 83       	std	Z+2, r25	; 0x02
}
   1442a:	a3 83       	std	Z+3, r26	; 0x03
   1442c:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   14430:	60 96       	adiw	r28, 0x10	; 16
   14432:	0f b6       	in	r0, 0x3f	; 63
   14434:	f8 94       	cli
   14436:	de bf       	out	0x3e, r29	; 62
   14438:	0f be       	out	0x3f, r0	; 63
   1443a:	cd bf       	out	0x3d, r28	; 61
   1443c:	df 91       	pop	r29
   1443e:	cf 91       	pop	r28
   14440:	1f 91       	pop	r17
   14442:	0f 91       	pop	r16
   14444:	ef 90       	pop	r14
   14446:	df 90       	pop	r13
   14448:	cf 90       	pop	r12
   1444a:	bf 90       	pop	r11
   1444c:	af 90       	pop	r10
   1444e:	8f 90       	pop	r8
   14450:	7f 90       	pop	r7
   14452:	6f 90       	pop	r6
   14454:	4f 90       	pop	r4
   14456:	3f 90       	pop	r3
   14458:	2f 90       	pop	r2
   1445a:	08 95       	ret

0001445c <format_drives>:

/// ===============================================
/// @brief Format devices that have no image file
/// @return  void
void format_drives()
{
   1445c:	2f 92       	push	r2
   1445e:	3f 92       	push	r3
   14460:	4f 92       	push	r4
   14462:	6f 92       	push	r6
   14464:	7f 92       	push	r7
   14466:	8f 92       	push	r8
   14468:	af 92       	push	r10
   1446a:	bf 92       	push	r11
   1446c:	cf 92       	push	r12
   1446e:	ef 92       	push	r14
   14470:	ff 92       	push	r15
   14472:	0f 93       	push	r16
   14474:	1f 93       	push	r17
   14476:	cf 93       	push	r28
   14478:	df 93       	push	r29
   1447a:	cd b7       	in	r28, 0x3d	; 61
   1447c:	de b7       	in	r29, 0x3e	; 62
   1447e:	c6 56       	subi	r28, 0x66	; 102
   14480:	d1 09       	sbc	r29, r1
   14482:	0f b6       	in	r0, 0x3f	; 63
   14484:	f8 94       	cli
   14486:	de bf       	out	0x3e, r29	; 62
   14488:	0f be       	out	0x3f, r0	; 63
   1448a:	cd bf       	out	0x3d, r28	; 61
   1448c:	2a e8       	ldi	r18, 0x8A	; 138
   1448e:	3e e1       	ldi	r19, 0x1E	; 30
   14490:	6a 96       	adiw	r28, 0x1a	; 26
   14492:	3f af       	std	Y+63, r19	; 0x3f
   14494:	2e af       	std	Y+62, r18	; 0x3e
   14496:	6a 97       	sbiw	r28, 0x1a	; 26
    int i;
    struct stat st;
    long sectors;
    char label[32];
    int ss80 = 1;
    int amigo = 1;
   14498:	81 e0       	ldi	r24, 0x01	; 1
   1449a:	90 e0       	ldi	r25, 0x00	; 0
   1449c:	a2 96       	adiw	r28, 0x22	; 34
   1449e:	9f af       	std	Y+63, r25	; 0x3f
   144a0:	8e af       	std	Y+62, r24	; 0x3e
   144a2:	a2 97       	sbiw	r28, 0x22	; 34
{
    int i;
    struct stat st;
    long sectors;
    char label[32];
    int ss80 = 1;
   144a4:	a1 e0       	ldi	r26, 0x01	; 1
   144a6:	b0 e0       	ldi	r27, 0x00	; 0
   144a8:	a0 96       	adiw	r28, 0x20	; 32
   144aa:	bf af       	std	Y+63, r27	; 0x3f
   144ac:	ae af       	std	Y+62, r26	; 0x3e
   144ae:	a0 97       	sbiw	r28, 0x20	; 32
                {
                    printf("Can not use non 256 byte sectors\n");
                    continue;
                }
                sectors = Devices[i].BLOCKS;
                sprintf(label,"AMIGO%d", amigo);
   144b0:	83 ee       	ldi	r24, 0xE3	; 227
   144b2:	93 e1       	ldi	r25, 0x13	; 19
   144b4:	9c 01       	movw	r18, r24
   144b6:	40 e0       	ldi	r20, 0x00	; 0
   144b8:	a7 96       	adiw	r28, 0x27	; 39
   144ba:	2d af       	std	Y+61, r18	; 0x3d
   144bc:	3e af       	std	Y+62, r19	; 0x3e
   144be:	4f af       	std	Y+63, r20	; 0x3f
   144c0:	a7 97       	sbiw	r28, 0x27	; 39
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
            if(stat(AMIGOp->HEADER.NAME, &st) == -1) 
            {
                if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
                {
                    printf("Can not use non 256 byte sectors\n");
   144c2:	8b ee       	ldi	r24, 0xEB	; 235
   144c4:	93 e1       	ldi	r25, 0x13	; 19
   144c6:	3c 01       	movw	r6, r24
   144c8:	81 2c       	mov	r8, r1
                }
                //SS80p->VOLUME.MAX_CYLINDER;
                //SS80p->VOLUME.MAX_HEAD;
                //SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
                sprintf(label,"SS80-%d", ss80);
   144ca:	8d e0       	ldi	r24, 0x0D	; 13
   144cc:	94 e1       	ldi	r25, 0x14	; 20
   144ce:	5c 01       	movw	r10, r24
   144d0:	c1 2c       	mov	r12, r1

            if(stat(SS80p->HEADER.NAME, &st) == -1) 
            {
                if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
                {
                    printf("Can not use non 256 byte sectors\n");
   144d2:	85 e1       	ldi	r24, 0x15	; 21
   144d4:	94 e1       	ldi	r25, 0x14	; 20
   144d6:	1c 01       	movw	r2, r24
   144d8:	41 2c       	mov	r4, r1
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   144da:	6a 96       	adiw	r28, 0x1a	; 26
   144dc:	ae ad       	ldd	r26, Y+62	; 0x3e
   144de:	bf ad       	ldd	r27, Y+63	; 0x3f
   144e0:	6a 97       	sbiw	r28, 0x1a	; 26
   144e2:	8c 91       	ld	r24, X
   144e4:	88 23       	and	r24, r24
   144e6:	09 f4       	brne	.+2      	; 0x144ea <format_drives+0x8e>
   144e8:	dc c0       	rjmp	.+440    	; 0x146a2 <format_drives+0x246>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   144ea:	83 30       	cpi	r24, 0x03	; 3
   144ec:	09 f0       	breq	.+2      	; 0x144f0 <format_drives+0x94>
   144ee:	65 c0       	rjmp	.+202    	; 0x145ba <format_drives+0x15e>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   144f0:	fd 01       	movw	r30, r26
   144f2:	07 a1       	ldd	r16, Z+39	; 0x27
   144f4:	10 a5       	ldd	r17, Z+40	; 0x28

            if(stat(SS80p->HEADER.NAME, &st) == -1) 
   144f6:	be 01       	movw	r22, r28
   144f8:	68 5f       	subi	r22, 0xF8	; 248
   144fa:	7f 4f       	sbci	r23, 0xFF	; 255
   144fc:	f8 01       	movw	r30, r16
   144fe:	82 81       	ldd	r24, Z+2	; 0x02
   14500:	93 81       	ldd	r25, Z+3	; 0x03
   14502:	0e 94 0b 7a 	call	0xf416	; 0xf416 <stat>
   14506:	01 96       	adiw	r24, 0x01	; 1
   14508:	09 f0       	breq	.+2      	; 0x1450c <format_drives+0xb0>
   1450a:	4d c0       	rjmp	.+154    	; 0x145a6 <format_drives+0x14a>
            {
                if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
   1450c:	f8 01       	movw	r30, r16
   1450e:	80 89       	ldd	r24, Z+16	; 0x10
   14510:	91 89       	ldd	r25, Z+17	; 0x11
   14512:	81 15       	cp	r24, r1
   14514:	91 40       	sbci	r25, 0x01	; 1
   14516:	31 f0       	breq	.+12     	; 0x14524 <format_drives+0xc8>
                {
                    printf("Can not use non 256 byte sectors\n");
   14518:	ed b7       	in	r30, 0x3d	; 61
   1451a:	fe b7       	in	r31, 0x3e	; 62
   1451c:	21 82       	std	Z+1, r2	; 0x01
   1451e:	32 82       	std	Z+2, r3	; 0x02
   14520:	43 82       	std	Z+3, r4	; 0x03
   14522:	6c c0       	rjmp	.+216    	; 0x145fc <format_drives+0x1a0>
                    continue;
                }
                //SS80p->VOLUME.MAX_CYLINDER;
                //SS80p->VOLUME.MAX_HEAD;
                //SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
   14524:	6a 96       	adiw	r28, 0x1a	; 26
   14526:	ee ad       	ldd	r30, Y+62	; 0x3e
   14528:	ff ad       	ldd	r31, Y+63	; 0x3f
   1452a:	6a 97       	sbiw	r28, 0x1a	; 26
   1452c:	83 81       	ldd	r24, Z+3	; 0x03
   1452e:	94 81       	ldd	r25, Z+4	; 0x04
   14530:	a5 81       	ldd	r26, Z+5	; 0x05
   14532:	b6 81       	ldd	r27, Z+6	; 0x06
   14534:	6e 96       	adiw	r28, 0x1e	; 30
   14536:	8c af       	std	Y+60, r24	; 0x3c
   14538:	9d af       	std	Y+61, r25	; 0x3d
   1453a:	ae af       	std	Y+62, r26	; 0x3e
   1453c:	bf af       	std	Y+63, r27	; 0x3f
   1453e:	6e 97       	sbiw	r28, 0x1e	; 30
                sprintf(label,"SS80-%d", ss80);
   14540:	a0 96       	adiw	r28, 0x20	; 32
   14542:	2e ad       	ldd	r18, Y+62	; 0x3e
   14544:	3f ad       	ldd	r19, Y+63	; 0x3f
   14546:	a0 97       	sbiw	r28, 0x20	; 32
   14548:	ed b7       	in	r30, 0x3d	; 61
   1454a:	fe b7       	in	r31, 0x3e	; 62
   1454c:	37 83       	std	Z+7, r19	; 0x07
   1454e:	26 83       	std	Z+6, r18	; 0x06
   14550:	a3 82       	std	Z+3, r10	; 0x03
   14552:	b4 82       	std	Z+4, r11	; 0x04
   14554:	c5 82       	std	Z+5, r12	; 0x05
   14556:	28 e3       	ldi	r18, 0x38	; 56
   14558:	30 e0       	ldi	r19, 0x00	; 0
   1455a:	2c 0f       	add	r18, r28
   1455c:	3d 1f       	adc	r19, r29
   1455e:	32 83       	std	Z+2, r19	; 0x02
   14560:	21 83       	std	Z+1, r18	; 0x01
   14562:	0e 94 24 47 	call	0x8e48	; 0x8e48 <sprintf_P>
#ifdef LIF_SUPPORT
                lif_create_image(SS80p->HEADER.NAME,
   14566:	f8 01       	movw	r30, r16
   14568:	02 80       	ldd	r0, Z+2	; 0x02
   1456a:	f3 81       	ldd	r31, Z+3	; 0x03
   1456c:	e0 2d       	mov	r30, r0
   1456e:	a4 96       	adiw	r28, 0x24	; 36
   14570:	ff af       	std	Y+63, r31	; 0x3f
   14572:	ee af       	std	Y+62, r30	; 0x3e
   14574:	a4 97       	sbiw	r28, 0x24	; 36
                    label,
                    lif_dir_count(sectors), 
   14576:	6e 96       	adiw	r28, 0x1e	; 30
   14578:	6c ad       	ldd	r22, Y+60	; 0x3c
   1457a:	7d ad       	ldd	r23, Y+61	; 0x3d
   1457c:	8e ad       	ldd	r24, Y+62	; 0x3e
   1457e:	9f ad       	ldd	r25, Y+63	; 0x3f
   14580:	6e 97       	sbiw	r28, 0x1e	; 30
   14582:	3d d1       	rcall	.+634    	; 0x147fe <lif_dir_count>
   14584:	9b 01       	movw	r18, r22
   14586:	ac 01       	movw	r20, r24
                //SS80p->VOLUME.MAX_HEAD;
                //SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
                sprintf(label,"SS80-%d", ss80);
#ifdef LIF_SUPPORT
                lif_create_image(SS80p->HEADER.NAME,
   14588:	6e 96       	adiw	r28, 0x1e	; 30
   1458a:	ec ac       	ldd	r14, Y+60	; 0x3c
   1458c:	fd ac       	ldd	r15, Y+61	; 0x3d
   1458e:	0e ad       	ldd	r16, Y+62	; 0x3e
   14590:	1f ad       	ldd	r17, Y+63	; 0x3f
   14592:	6e 97       	sbiw	r28, 0x1e	; 30
   14594:	be 01       	movw	r22, r28
   14596:	68 5c       	subi	r22, 0xC8	; 200
   14598:	7f 4f       	sbci	r23, 0xFF	; 255
   1459a:	a4 96       	adiw	r28, 0x24	; 36
   1459c:	8e ad       	ldd	r24, Y+62	; 0x3e
   1459e:	9f ad       	ldd	r25, Y+63	; 0x3f
   145a0:	a4 97       	sbiw	r28, 0x24	; 36
   145a2:	0e 94 b9 dd 	call	0x1bb72	; 0x1bb72 <lif_create_image>
#else
                printf("please create a SS80 LIF image with %ld sectors and 128 directory sectors\n", sectors);
#endif

            }
            ss80++;
   145a6:	a0 96       	adiw	r28, 0x20	; 32
   145a8:	2e ad       	ldd	r18, Y+62	; 0x3e
   145aa:	3f ad       	ldd	r19, Y+63	; 0x3f
   145ac:	a0 97       	sbiw	r28, 0x20	; 32
   145ae:	2f 5f       	subi	r18, 0xFF	; 255
   145b0:	3f 4f       	sbci	r19, 0xFF	; 255
   145b2:	a0 96       	adiw	r28, 0x20	; 32
   145b4:	3f af       	std	Y+63, r19	; 0x3f
   145b6:	2e af       	std	Y+62, r18	; 0x3e
   145b8:	a0 97       	sbiw	r28, 0x20	; 32
        } // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   145ba:	6a 96       	adiw	r28, 0x1a	; 26
   145bc:	ae ad       	ldd	r26, Y+62	; 0x3e
   145be:	bf ad       	ldd	r27, Y+63	; 0x3f
   145c0:	6a 97       	sbiw	r28, 0x1a	; 26
   145c2:	8c 91       	ld	r24, X
   145c4:	81 30       	cpi	r24, 0x01	; 1
   145c6:	09 f0       	breq	.+2      	; 0x145ca <format_drives+0x16e>
   145c8:	6c c0       	rjmp	.+216    	; 0x146a2 <format_drives+0x246>
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
   145ca:	fd 01       	movw	r30, r26
   145cc:	07 a1       	ldd	r16, Z+39	; 0x27
   145ce:	10 a5       	ldd	r17, Z+40	; 0x28
            if(stat(AMIGOp->HEADER.NAME, &st) == -1) 
   145d0:	be 01       	movw	r22, r28
   145d2:	68 5f       	subi	r22, 0xF8	; 248
   145d4:	7f 4f       	sbci	r23, 0xFF	; 255
   145d6:	f8 01       	movw	r30, r16
   145d8:	82 81       	ldd	r24, Z+2	; 0x02
   145da:	93 81       	ldd	r25, Z+3	; 0x03
   145dc:	0e 94 0b 7a 	call	0xf416	; 0xf416 <stat>
   145e0:	01 96       	adiw	r24, 0x01	; 1
   145e2:	09 f0       	breq	.+2      	; 0x145e6 <format_drives+0x18a>
   145e4:	54 c0       	rjmp	.+168    	; 0x1468e <format_drives+0x232>
            {
                if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
   145e6:	f8 01       	movw	r30, r16
   145e8:	86 81       	ldd	r24, Z+6	; 0x06
   145ea:	97 81       	ldd	r25, Z+7	; 0x07
   145ec:	81 15       	cp	r24, r1
   145ee:	91 40       	sbci	r25, 0x01	; 1
   145f0:	41 f0       	breq	.+16     	; 0x14602 <format_drives+0x1a6>
                {
                    printf("Can not use non 256 byte sectors\n");
   145f2:	ed b7       	in	r30, 0x3d	; 61
   145f4:	fe b7       	in	r31, 0x3e	; 62
   145f6:	61 82       	std	Z+1, r6	; 0x01
   145f8:	72 82       	std	Z+2, r7	; 0x02
   145fa:	83 82       	std	Z+3, r8	; 0x03
   145fc:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
                    continue;
   14600:	50 c0       	rjmp	.+160    	; 0x146a2 <format_drives+0x246>
                }
                sectors = Devices[i].BLOCKS;
   14602:	6a 96       	adiw	r28, 0x1a	; 26
   14604:	ee ad       	ldd	r30, Y+62	; 0x3e
   14606:	ff ad       	ldd	r31, Y+63	; 0x3f
   14608:	6a 97       	sbiw	r28, 0x1a	; 26
   1460a:	83 81       	ldd	r24, Z+3	; 0x03
   1460c:	94 81       	ldd	r25, Z+4	; 0x04
   1460e:	a5 81       	ldd	r26, Z+5	; 0x05
   14610:	b6 81       	ldd	r27, Z+6	; 0x06
   14612:	6e 96       	adiw	r28, 0x1e	; 30
   14614:	8c af       	std	Y+60, r24	; 0x3c
   14616:	9d af       	std	Y+61, r25	; 0x3d
   14618:	ae af       	std	Y+62, r26	; 0x3e
   1461a:	bf af       	std	Y+63, r27	; 0x3f
   1461c:	6e 97       	sbiw	r28, 0x1e	; 30
                sprintf(label,"AMIGO%d", amigo);
   1461e:	a2 96       	adiw	r28, 0x22	; 34
   14620:	2e ad       	ldd	r18, Y+62	; 0x3e
   14622:	3f ad       	ldd	r19, Y+63	; 0x3f
   14624:	a2 97       	sbiw	r28, 0x22	; 34
   14626:	ed b7       	in	r30, 0x3d	; 61
   14628:	fe b7       	in	r31, 0x3e	; 62
   1462a:	37 83       	std	Z+7, r19	; 0x07
   1462c:	26 83       	std	Z+6, r18	; 0x06
   1462e:	a7 96       	adiw	r28, 0x27	; 39
   14630:	8d ad       	ldd	r24, Y+61	; 0x3d
   14632:	9e ad       	ldd	r25, Y+62	; 0x3e
   14634:	af ad       	ldd	r26, Y+63	; 0x3f
   14636:	a7 97       	sbiw	r28, 0x27	; 39
   14638:	83 83       	std	Z+3, r24	; 0x03
   1463a:	94 83       	std	Z+4, r25	; 0x04
   1463c:	a5 83       	std	Z+5, r26	; 0x05
   1463e:	28 e3       	ldi	r18, 0x38	; 56
   14640:	30 e0       	ldi	r19, 0x00	; 0
   14642:	2c 0f       	add	r18, r28
   14644:	3d 1f       	adc	r19, r29
   14646:	32 83       	std	Z+2, r19	; 0x02
   14648:	21 83       	std	Z+1, r18	; 0x01
   1464a:	0e 94 24 47 	call	0x8e48	; 0x8e48 <sprintf_P>
#ifdef LIF_SUPPORT
                lif_create_image(AMIGOp->HEADER.NAME,
   1464e:	f8 01       	movw	r30, r16
   14650:	02 80       	ldd	r0, Z+2	; 0x02
   14652:	f3 81       	ldd	r31, Z+3	; 0x03
   14654:	e0 2d       	mov	r30, r0
   14656:	a4 96       	adiw	r28, 0x24	; 36
   14658:	ff af       	std	Y+63, r31	; 0x3f
   1465a:	ee af       	std	Y+62, r30	; 0x3e
   1465c:	a4 97       	sbiw	r28, 0x24	; 36
                    label,
                    lif_dir_count(sectors), 
   1465e:	6e 96       	adiw	r28, 0x1e	; 30
   14660:	6c ad       	ldd	r22, Y+60	; 0x3c
   14662:	7d ad       	ldd	r23, Y+61	; 0x3d
   14664:	8e ad       	ldd	r24, Y+62	; 0x3e
   14666:	9f ad       	ldd	r25, Y+63	; 0x3f
   14668:	6e 97       	sbiw	r28, 0x1e	; 30
   1466a:	c9 d0       	rcall	.+402    	; 0x147fe <lif_dir_count>
   1466c:	9b 01       	movw	r18, r22
   1466e:	ac 01       	movw	r20, r24
                    continue;
                }
                sectors = Devices[i].BLOCKS;
                sprintf(label,"AMIGO%d", amigo);
#ifdef LIF_SUPPORT
                lif_create_image(AMIGOp->HEADER.NAME,
   14670:	6e 96       	adiw	r28, 0x1e	; 30
   14672:	ec ac       	ldd	r14, Y+60	; 0x3c
   14674:	fd ac       	ldd	r15, Y+61	; 0x3d
   14676:	0e ad       	ldd	r16, Y+62	; 0x3e
   14678:	1f ad       	ldd	r17, Y+63	; 0x3f
   1467a:	6e 97       	sbiw	r28, 0x1e	; 30
   1467c:	be 01       	movw	r22, r28
   1467e:	68 5c       	subi	r22, 0xC8	; 200
   14680:	7f 4f       	sbci	r23, 0xFF	; 255
   14682:	a4 96       	adiw	r28, 0x24	; 36
   14684:	8e ad       	ldd	r24, Y+62	; 0x3e
   14686:	9f ad       	ldd	r25, Y+63	; 0x3f
   14688:	a4 97       	sbiw	r28, 0x24	; 36
   1468a:	0e 94 b9 dd 	call	0x1bb72	; 0x1bb72 <lif_create_image>
                    sectors);
#else
                printf("please create a AMIGO LIF image with %ld sectors and 15 directory sectors\n", sectors);
#endif
            }
            amigo++;
   1468e:	a2 96       	adiw	r28, 0x22	; 34
   14690:	2e ad       	ldd	r18, Y+62	; 0x3e
   14692:	3f ad       	ldd	r19, Y+63	; 0x3f
   14694:	a2 97       	sbiw	r28, 0x22	; 34
   14696:	2f 5f       	subi	r18, 0xFF	; 255
   14698:	3f 4f       	sbci	r19, 0xFF	; 255
   1469a:	a2 96       	adiw	r28, 0x22	; 34
   1469c:	3f af       	std	Y+63, r19	; 0x3f
   1469e:	2e af       	std	Y+62, r18	; 0x3e
   146a0:	a2 97       	sbiw	r28, 0x22	; 34
   146a2:	6a 96       	adiw	r28, 0x1a	; 26
   146a4:	8e ad       	ldd	r24, Y+62	; 0x3e
   146a6:	9f ad       	ldd	r25, Y+63	; 0x3f
   146a8:	6a 97       	sbiw	r28, 0x1a	; 26
   146aa:	8b 96       	adiw	r24, 0x2b	; 43
   146ac:	6a 96       	adiw	r28, 0x1a	; 26
   146ae:	9f af       	std	Y+63, r25	; 0x3f
   146b0:	8e af       	std	Y+62, r24	; 0x3e
   146b2:	6a 97       	sbiw	r28, 0x1a	; 26
#ifdef AMIGO
    ///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
   146b4:	ae e8       	ldi	r26, 0x8E	; 142
   146b6:	b0 e2       	ldi	r27, 0x20	; 32
   146b8:	a8 17       	cp	r26, r24
   146ba:	b9 07       	cpc	r27, r25
   146bc:	09 f0       	breq	.+2      	; 0x146c0 <format_drives+0x264>
   146be:	0d cf       	rjmp	.-486    	; 0x144da <format_drives+0x7e>
            }
            amigo++;
        } 
#endif // #ifdef AMIGO
    }
    printf("\n");
   146c0:	81 ee       	ldi	r24, 0xE1	; 225
   146c2:	93 e1       	ldi	r25, 0x13	; 19
   146c4:	a0 e0       	ldi	r26, 0x00	; 0
   146c6:	ed b7       	in	r30, 0x3d	; 61
   146c8:	fe b7       	in	r31, 0x3e	; 62
   146ca:	81 83       	std	Z+1, r24	; 0x01
   146cc:	92 83       	std	Z+2, r25	; 0x02
   146ce:	a3 83       	std	Z+3, r26	; 0x03
   146d0:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
}
   146d4:	ca 59       	subi	r28, 0x9A	; 154
   146d6:	df 4f       	sbci	r29, 0xFF	; 255
   146d8:	0f b6       	in	r0, 0x3f	; 63
   146da:	f8 94       	cli
   146dc:	de bf       	out	0x3e, r29	; 62
   146de:	0f be       	out	0x3f, r0	; 63
   146e0:	cd bf       	out	0x3d, r28	; 61
   146e2:	df 91       	pop	r29
   146e4:	cf 91       	pop	r28
   146e6:	1f 91       	pop	r17
   146e8:	0f 91       	pop	r16
   146ea:	ff 90       	pop	r15
   146ec:	ef 90       	pop	r14
   146ee:	cf 90       	pop	r12
   146f0:	bf 90       	pop	r11
   146f2:	af 90       	pop	r10
   146f4:	8f 90       	pop	r8
   146f6:	7f 90       	pop	r7
   146f8:	6f 90       	pop	r6
   146fa:	4f 90       	pop	r4
   146fc:	3f 90       	pop	r3
   146fe:	2f 90       	pop	r2
   14700:	08 95       	ret

00014702 <hpdir_init>:
/// disk parameters from a single hpdir disk entry
///
///@return void
void hpdir_init()
{
    memset(hpdir.model,0,sizeof(hpdir.model) -1);		// 1
   14702:	8f e1       	ldi	r24, 0x1F	; 31
   14704:	ee e8       	ldi	r30, 0x8E	; 142
   14706:	f0 e2       	ldi	r31, 0x20	; 32
   14708:	df 01       	movw	r26, r30
   1470a:	98 2f       	mov	r25, r24
   1470c:	1d 92       	st	X+, r1
   1470e:	9a 95       	dec	r25
   14710:	e9 f7       	brne	.-6      	; 0x1470c <hpdir_init+0xa>
    memset(hpdir.comment,0,sizeof(hpdir.comment) -1);	// 2
   14712:	9f e3       	ldi	r25, 0x3F	; 63
   14714:	ee ea       	ldi	r30, 0xAE	; 174
   14716:	f0 e2       	ldi	r31, 0x20	; 32
   14718:	df 01       	movw	r26, r30
   1471a:	1d 92       	st	X+, r1
   1471c:	9a 95       	dec	r25
   1471e:	e9 f7       	brne	.-6      	; 0x1471a <hpdir_init+0x18>
    memset(hpdir.TYPE,0,sizeof(hpdir.TYPE) -1);		// 3
   14720:	ee ee       	ldi	r30, 0xEE	; 238
   14722:	f0 e2       	ldi	r31, 0x20	; 32
   14724:	df 01       	movw	r26, r30
   14726:	1d 92       	st	X+, r1
   14728:	8a 95       	dec	r24
   1472a:	e9 f7       	brne	.-6      	; 0x14726 <hpdir_init+0x24>
    hpdir.ID = 0;						// 4
   1472c:	10 92 0e 21 	sts	0x210E, r1	; 0x80210e <hpdir+0x80>
   14730:	10 92 0f 21 	sts	0x210F, r1	; 0x80210f <hpdir+0x81>
   14734:	10 92 10 21 	sts	0x2110, r1	; 0x802110 <hpdir+0x82>
   14738:	10 92 11 21 	sts	0x2111, r1	; 0x802111 <hpdir+0x83>
	hpdir.mask_stat2 = 0;				// 5
   1473c:	10 92 12 21 	sts	0x2112, r1	; 0x802112 <hpdir+0x84>
   14740:	10 92 13 21 	sts	0x2113, r1	; 0x802113 <hpdir+0x85>
   14744:	10 92 14 21 	sts	0x2114, r1	; 0x802114 <hpdir+0x86>
   14748:	10 92 15 21 	sts	0x2115, r1	; 0x802115 <hpdir+0x87>
	hpdir.id_stat2 = 0;					// 6
   1474c:	10 92 16 21 	sts	0x2116, r1	; 0x802116 <hpdir+0x88>
   14750:	10 92 17 21 	sts	0x2117, r1	; 0x802117 <hpdir+0x89>
   14754:	10 92 18 21 	sts	0x2118, r1	; 0x802118 <hpdir+0x8a>
   14758:	10 92 19 21 	sts	0x2119, r1	; 0x802119 <hpdir+0x8b>
	hpdir.DEVICE_NUMBER = 0;			// 7
   1475c:	10 92 1a 21 	sts	0x211A, r1	; 0x80211a <hpdir+0x8c>
   14760:	10 92 1b 21 	sts	0x211B, r1	; 0x80211b <hpdir+0x8d>
   14764:	10 92 1c 21 	sts	0x211C, r1	; 0x80211c <hpdir+0x8e>
   14768:	10 92 1d 21 	sts	0x211D, r1	; 0x80211d <hpdir+0x8f>
	hpdir.UNITS_INSTALLED = 0x8001;		// 8
   1476c:	81 e0       	ldi	r24, 0x01	; 1
   1476e:	90 e8       	ldi	r25, 0x80	; 128
   14770:	a0 e0       	ldi	r26, 0x00	; 0
   14772:	b0 e0       	ldi	r27, 0x00	; 0
   14774:	80 93 1e 21 	sts	0x211E, r24	; 0x80211e <hpdir+0x90>
   14778:	90 93 1f 21 	sts	0x211F, r25	; 0x80211f <hpdir+0x91>
   1477c:	a0 93 20 21 	sts	0x2120, r26	; 0x802120 <hpdir+0x92>
   14780:	b0 93 21 21 	sts	0x2121, r27	; 0x802121 <hpdir+0x93>
	hpdir.CYLINDERS = 0;  				// 9
   14784:	10 92 22 21 	sts	0x2122, r1	; 0x802122 <hpdir+0x94>
   14788:	10 92 23 21 	sts	0x2123, r1	; 0x802123 <hpdir+0x95>
   1478c:	10 92 24 21 	sts	0x2124, r1	; 0x802124 <hpdir+0x96>
   14790:	10 92 25 21 	sts	0x2125, r1	; 0x802125 <hpdir+0x97>
	hpdir.HEADS= 0;	     				// 10
   14794:	10 92 26 21 	sts	0x2126, r1	; 0x802126 <hpdir+0x98>
   14798:	10 92 27 21 	sts	0x2127, r1	; 0x802127 <hpdir+0x99>
   1479c:	10 92 28 21 	sts	0x2128, r1	; 0x802128 <hpdir+0x9a>
   147a0:	10 92 29 21 	sts	0x2129, r1	; 0x802129 <hpdir+0x9b>
	hpdir.SECTORS= 0;    				// 11
   147a4:	10 92 2a 21 	sts	0x212A, r1	; 0x80212a <hpdir+0x9c>
   147a8:	10 92 2b 21 	sts	0x212B, r1	; 0x80212b <hpdir+0x9d>
   147ac:	10 92 2c 21 	sts	0x212C, r1	; 0x80212c <hpdir+0x9e>
   147b0:	10 92 2d 21 	sts	0x212D, r1	; 0x80212d <hpdir+0x9f>
	hpdir.BYTES_PER_SECTOR = 0;			// 12
   147b4:	10 92 2e 21 	sts	0x212E, r1	; 0x80212e <hpdir+0xa0>
   147b8:	10 92 2f 21 	sts	0x212F, r1	; 0x80212f <hpdir+0xa1>
   147bc:	10 92 30 21 	sts	0x2130, r1	; 0x802130 <hpdir+0xa2>
   147c0:	10 92 31 21 	sts	0x2131, r1	; 0x802131 <hpdir+0xa3>
	hpdir.INTERLEAVE = 0;				// 13
   147c4:	10 92 32 21 	sts	0x2132, r1	; 0x802132 <hpdir+0xa4>
   147c8:	10 92 33 21 	sts	0x2133, r1	; 0x802133 <hpdir+0xa5>
   147cc:	10 92 34 21 	sts	0x2134, r1	; 0x802134 <hpdir+0xa6>
   147d0:	10 92 35 21 	sts	0x2135, r1	; 0x802135 <hpdir+0xa7>
    hpdir.FIXED = 1;					// 14 ALWAYS 1
   147d4:	81 e0       	ldi	r24, 0x01	; 1
   147d6:	90 e0       	ldi	r25, 0x00	; 0
   147d8:	a0 e0       	ldi	r26, 0x00	; 0
   147da:	b0 e0       	ldi	r27, 0x00	; 0
   147dc:	80 93 36 21 	sts	0x2136, r24	; 0x802136 <hpdir+0xa8>
   147e0:	90 93 37 21 	sts	0x2137, r25	; 0x802137 <hpdir+0xa9>
   147e4:	a0 93 38 21 	sts	0x2138, r26	; 0x802138 <hpdir+0xaa>
   147e8:	b0 93 39 21 	sts	0x2139, r27	; 0x802139 <hpdir+0xab>

	// Computed values
    hpdir.BLOCKS = 0;
   147ec:	10 92 3a 21 	sts	0x213A, r1	; 0x80213a <hpdir+0xac>
   147f0:	10 92 3b 21 	sts	0x213B, r1	; 0x80213b <hpdir+0xad>
   147f4:	10 92 3c 21 	sts	0x213C, r1	; 0x80213c <hpdir+0xae>
   147f8:	10 92 3d 21 	sts	0x213D, r1	; 0x80213d <hpdir+0xaf>
   147fc:	08 95       	ret

000147fe <lif_dir_count>:
///@param[in] blocks: size of LIF image in total
///
///@return Size of LIF directory in blocks
long lif_dir_count(long blocks)
{
	int scale = 0;
   147fe:	20 e0       	ldi	r18, 0x00	; 0
   14800:	30 e0       	ldi	r19, 0x00	; 0
	long num = 1;
	while(blocks)
   14802:	61 15       	cp	r22, r1
   14804:	71 05       	cpc	r23, r1
   14806:	81 05       	cpc	r24, r1
   14808:	91 05       	cpc	r25, r1
   1480a:	39 f0       	breq	.+14     	; 0x1481a <lif_dir_count+0x1c>
	{
		scale++;
   1480c:	2f 5f       	subi	r18, 0xFF	; 255
   1480e:	3f 4f       	sbci	r19, 0xFF	; 255
 		blocks >>= 1;
   14810:	95 95       	asr	r25
   14812:	87 95       	ror	r24
   14814:	77 95       	ror	r23
   14816:	67 95       	ror	r22
   14818:	f4 cf       	rjmp	.-24     	; 0x14802 <lif_dir_count+0x4>
	}
	scale>>=1;
   1481a:	35 95       	asr	r19
   1481c:	27 95       	ror	r18
///
///@return Size of LIF directory in blocks
long lif_dir_count(long blocks)
{
	int scale = 0;
	long num = 1;
   1481e:	61 e0       	ldi	r22, 0x01	; 1
   14820:	70 e0       	ldi	r23, 0x00	; 0
   14822:	80 e0       	ldi	r24, 0x00	; 0
   14824:	90 e0       	ldi	r25, 0x00	; 0
	{
		scale++;
 		blocks >>= 1;
	}
	scale>>=1;
	while(scale--)
   14826:	21 50       	subi	r18, 0x01	; 1
   14828:	31 09       	sbc	r19, r1
   1482a:	28 f0       	brcs	.+10     	; 0x14836 <lif_dir_count+0x38>
		num <<=1;
   1482c:	66 0f       	add	r22, r22
   1482e:	77 1f       	adc	r23, r23
   14830:	88 1f       	adc	r24, r24
   14832:	99 1f       	adc	r25, r25
   14834:	f8 cf       	rjmp	.-16     	; 0x14826 <lif_dir_count+0x28>
	return(num);
}
   14836:	08 95       	ret

00014838 <hpdir_find_drive>:
///
///@param[in] model: model string
///
///@return 1 on sucess or 0 on fail
int hpdir_find_drive(char *model, int list, int verbose)
{
   14838:	2f 92       	push	r2
   1483a:	3f 92       	push	r3
   1483c:	4f 92       	push	r4
   1483e:	5f 92       	push	r5
   14840:	6f 92       	push	r6
   14842:	8f 92       	push	r8
   14844:	9f 92       	push	r9
   14846:	af 92       	push	r10
   14848:	bf 92       	push	r11
   1484a:	cf 92       	push	r12
   1484c:	df 92       	push	r13
   1484e:	ef 92       	push	r14
   14850:	ff 92       	push	r15
   14852:	0f 93       	push	r16
   14854:	1f 93       	push	r17
   14856:	cf 93       	push	r28
   14858:	df 93       	push	r29
   1485a:	cd b7       	in	r28, 0x3d	; 61
   1485c:	de b7       	in	r29, 0x3e	; 62
   1485e:	c9 58       	subi	r28, 0x89	; 137
   14860:	d1 40       	sbci	r29, 0x01	; 1
   14862:	0f b6       	in	r0, 0x3f	; 63
   14864:	f8 94       	cli
   14866:	de bf       	out	0x3e, r29	; 62
   14868:	0f be       	out	0x3f, r0	; 63
   1486a:	cd bf       	out	0x3d, r28	; 61
   1486c:	6c 01       	movw	r12, r24
   1486e:	c8 57       	subi	r28, 0x78	; 120
   14870:	de 4f       	sbci	r29, 0xFE	; 254
   14872:	79 83       	std	Y+1, r23	; 0x01
   14874:	68 83       	st	Y, r22
   14876:	c8 58       	subi	r28, 0x88	; 136
   14878:	d1 40       	sbci	r29, 0x01	; 1
	FILE *cfg;
	char *ptr;
    char str[256];
    char token[128];

	hpdir_init();
   1487a:	5a 01       	movw	r10, r20

	cfg = fopen("hpdir.ini","rb");
   1487c:	42 df       	rcall	.-380    	; 0x14702 <hpdir_init>
   1487e:	6c e1       	ldi	r22, 0x1C	; 28
   14880:	78 e0       	ldi	r23, 0x08	; 8
   14882:	83 e7       	ldi	r24, 0x73	; 115
   14884:	9f e0       	ldi	r25, 0x0F	; 15
   14886:	0e 94 f8 7e 	call	0xfdf0	; 0xfdf0 <fopen>

#ifndef LIF_STAND_ALONE
	if(cfg == NULL)
   1488a:	7c 01       	movw	r14, r24
   1488c:	89 2b       	or	r24, r25
		cfg = fopen("/hpdir.ini","rb");
   1488e:	49 f4       	brne	.+18     	; 0x148a2 <hpdir_find_drive+0x6a>
   14890:	6c e1       	ldi	r22, 0x1C	; 28
   14892:	78 e0       	ldi	r23, 0x08	; 8
   14894:	82 e7       	ldi	r24, 0x72	; 114
   14896:	9f e0       	ldi	r25, 0x0F	; 15
   14898:	0e 94 f8 7e 	call	0xfdf0	; 0xfdf0 <fopen>
        strcat  (name, "/hpdir.ini");
        cfg = fopen(name, "rb");
    }
#endif

	if(cfg == NULL)
   1489c:	7c 01       	movw	r14, r24
   1489e:	89 2b       	or	r24, r25
		// MODEL something else
		ptr = get_token(ptr, token, 	sizeof(token)-2);

        if(MATCHI(token,"[driveinfo]"))
        {
			driveinfo = 1;
   148a0:	51 f0       	breq	.+20     	; 0x148b6 <hpdir_find_drive+0x7e>
   148a2:	21 2c       	mov	r2, r1

		if(*ptr == '[' && driveinfo == 1 )
                break;

		// MODEL something else
		ptr = get_token(ptr, token, 	sizeof(token)-2);
   148a4:	31 2c       	mov	r3, r1
   148a6:	8e 01       	movw	r16, r28
   148a8:	08 5f       	subi	r16, 0xF8	; 248
		if( driveinfo != 1)
			continue;

        if(list)
        {
            printf("%s %s\n", token, ptr);
   148aa:	1e 4f       	sbci	r17, 0xFE	; 254
   148ac:	86 e1       	ldi	r24, 0x16	; 22
   148ae:	9f e1       	ldi	r25, 0x1F	; 31
   148b0:	2c 01       	movw	r4, r24
   148b2:	61 2c       	mov	r6, r1
    }
#endif

	if(cfg == NULL)
	{
		if(verbose)
   148b4:	1e c0       	rjmp	.+60     	; 0x148f2 <hpdir_find_drive+0xba>
   148b6:	ab 28       	or	r10, r11
   148b8:	09 f4       	brne	.+2      	; 0x148bc <hpdir_find_drive+0x84>
			printf("Error: hpdir.ini not found!\n");
   148ba:	69 c1       	rjmp	.+722    	; 0x14b8e <hpdir_find_drive+0x356>
   148bc:	8d e1       	ldi	r24, 0x1D	; 29
   148be:	9f e1       	ldi	r25, 0x1F	; 31
   148c0:	a0 e0       	ldi	r26, 0x00	; 0
   148c2:	ed b7       	in	r30, 0x3d	; 61
   148c4:	fe b7       	in	r31, 0x3e	; 62
   148c6:	81 83       	std	Z+1, r24	; 0x01
   148c8:	92 83       	std	Z+2, r25	; 0x02
   148ca:	a3 83       	std	Z+3, r26	; 0x03
   148cc:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
		errors = 0;
        ptr = str;

        trim_tail(ptr);
   148d0:	5e c1       	rjmp	.+700    	; 0x14b8e <hpdir_find_drive+0x356>
   148d2:	ce 01       	movw	r24, r28
   148d4:	08 96       	adiw	r24, 0x08	; 8
   148d6:	0e 94 13 33 	call	0x6626	; 0x6626 <trim_tail>
        ptr = skipspaces(ptr);
   148da:	ce 01       	movw	r24, r28
   148dc:	08 96       	adiw	r24, 0x08	; 8
   148de:	0e 94 23 33 	call	0x6646	; 0x6646 <skipspaces>

        len = strlen(ptr);
   148e2:	fc 01       	movw	r30, r24
   148e4:	01 90       	ld	r0, Z+
   148e6:	00 20       	and	r0, r0
   148e8:	e9 f7       	brne	.-6      	; 0x148e4 <hpdir_find_drive+0xac>
        if(!len)
   148ea:	31 97       	sbiw	r30, 0x01	; 1
   148ec:	8e 17       	cp	r24, r30
   148ee:	9f 07       	cpc	r25, r31
		return(0);
	}

	// printf("Searching /hpdir.ini for model:%s\n", model);

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   148f0:	51 f4       	brne	.+20     	; 0x14906 <hpdir_find_drive+0xce>
   148f2:	a7 01       	movw	r20, r14
   148f4:	6e ef       	ldi	r22, 0xFE	; 254
   148f6:	70 e0       	ldi	r23, 0x00	; 0
   148f8:	ce 01       	movw	r24, r28
   148fa:	08 96       	adiw	r24, 0x08	; 8
   148fc:	0e 94 1e 77 	call	0xee3c	; 0xee3c <fgets>
   14900:	89 2b       	or	r24, r25
   14902:	39 f7       	brne	.-50     	; 0x148d2 <hpdir_find_drive+0x9a>
        len = strlen(ptr);
        if(!len)
            continue;

        // Skip comments
        if(*ptr == ';' || *ptr == '#' )
   14904:	0c c0       	rjmp	.+24     	; 0x1491e <hpdir_find_drive+0xe6>
   14906:	fc 01       	movw	r30, r24
   14908:	20 81       	ld	r18, Z
   1490a:	2b 33       	cpi	r18, 0x3B	; 59
   1490c:	91 f3       	breq	.-28     	; 0x148f2 <hpdir_find_drive+0xba>
   1490e:	23 32       	cpi	r18, 0x23	; 35
            continue;

		if(*ptr == '[' && driveinfo == 1 )
   14910:	81 f3       	breq	.-32     	; 0x148f2 <hpdir_find_drive+0xba>
   14912:	2b 35       	cpi	r18, 0x5B	; 91
   14914:	31 f4       	brne	.+12     	; 0x14922 <hpdir_find_drive+0xea>
   14916:	f1 e0       	ldi	r31, 0x01	; 1
   14918:	2f 16       	cp	r2, r31
   1491a:	31 04       	cpc	r3, r1
int hpdir_find_drive(char *model, int list, int verbose)
{
    int len;
    int errors = 0;
    int driveinfo=0;
    int found = 0;
   1491c:	11 f4       	brne	.+4      	; 0x14922 <hpdir_find_drive+0xea>
   1491e:	00 e0       	ldi	r16, 0x00	; 0

		if(*ptr == '[' && driveinfo == 1 )
                break;

		// MODEL something else
		ptr = get_token(ptr, token, 	sizeof(token)-2);
   14920:	30 c1       	rjmp	.+608    	; 0x14b82 <hpdir_find_drive+0x34a>
   14922:	4e e7       	ldi	r20, 0x7E	; 126
   14924:	50 e0       	ldi	r21, 0x00	; 0
   14926:	b8 01       	movw	r22, r16
   14928:	0e 94 f5 33 	call	0x67ea	; 0x67ea <get_token>

        if(MATCHI(token,"[driveinfo]"))
   1492c:	4c 01       	movw	r8, r24
   1492e:	6d e7       	ldi	r22, 0x7D	; 125
   14930:	7f e0       	ldi	r23, 0x0F	; 15
   14932:	c8 01       	movw	r24, r16
   14934:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <MATCHI>
   14938:	89 2b       	or	r24, r25
        {
			driveinfo = 1;
   1493a:	21 f0       	breq	.+8      	; 0x14944 <hpdir_find_drive+0x10c>
   1493c:	22 24       	eor	r2, r2
   1493e:	23 94       	inc	r2
   14940:	31 2c       	mov	r3, r1
            continue;
        }

		if( driveinfo != 1)
   14942:	d7 cf       	rjmp	.-82     	; 0x148f2 <hpdir_find_drive+0xba>
   14944:	21 e0       	ldi	r18, 0x01	; 1
   14946:	22 16       	cp	r2, r18
   14948:	31 04       	cpc	r3, r1
			continue;

        if(list)
   1494a:	99 f6       	brne	.-90     	; 0x148f2 <hpdir_find_drive+0xba>
   1494c:	c8 57       	subi	r28, 0x78	; 120
   1494e:	de 4f       	sbci	r29, 0xFE	; 254
   14950:	88 81       	ld	r24, Y
   14952:	99 81       	ldd	r25, Y+1	; 0x01
   14954:	c8 58       	subi	r28, 0x88	; 136
   14956:	d1 40       	sbci	r29, 0x01	; 1
   14958:	89 2b       	or	r24, r25
        {
            printf("%s %s\n", token, ptr);
   1495a:	61 f0       	breq	.+24     	; 0x14974 <hpdir_find_drive+0x13c>
   1495c:	ed b7       	in	r30, 0x3d	; 61
   1495e:	fe b7       	in	r31, 0x3e	; 62
   14960:	97 82       	std	Z+7, r9	; 0x07
   14962:	86 82       	std	Z+6, r8	; 0x06
   14964:	15 83       	std	Z+5, r17	; 0x05
   14966:	04 83       	std	Z+4, r16	; 0x04
   14968:	41 82       	std	Z+1, r4	; 0x01
   1496a:	52 82       	std	Z+2, r5	; 0x02
   1496c:	63 82       	std	Z+3, r6	; 0x03
   1496e:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
            continue;
        }

		if ( ! MATCHI(model,token) )
   14972:	bf cf       	rjmp	.-130    	; 0x148f2 <hpdir_find_drive+0xba>
   14974:	b8 01       	movw	r22, r16
   14976:	c6 01       	movw	r24, r12
   14978:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <MATCHI>
			continue;

		hpdir_init();
   1497c:	89 2b       	or	r24, r25
   1497e:	f1 f2       	breq	.-68     	; 0x1493c <hpdir_find_drive+0x104>

		if(verbose)
   14980:	c0 de       	rcall	.-640    	; 0x14702 <hpdir_init>
   14982:	ab 28       	or	r10, r11
			printf("Found Model: %s\n", model);
   14984:	61 f0       	breq	.+24     	; 0x1499e <hpdir_find_drive+0x166>
   14986:	ed b7       	in	r30, 0x3d	; 61
   14988:	fe b7       	in	r31, 0x3e	; 62
   1498a:	d5 82       	std	Z+5, r13	; 0x05
   1498c:	c4 82       	std	Z+4, r12	; 0x04
   1498e:	85 e0       	ldi	r24, 0x05	; 5
   14990:	9f e1       	ldi	r25, 0x1F	; 31
   14992:	a0 e0       	ldi	r26, 0x00	; 0
   14994:	81 83       	std	Z+1, r24	; 0x01
   14996:	92 83       	std	Z+2, r25	; 0x02
   14998:	a3 83       	std	Z+3, r26	; 0x03
   1499a:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>

		strncpy(hpdir.model,token,sizeof(hpdir.model)-2);				// 1 Model
   1499e:	4e e1       	ldi	r20, 0x1E	; 30
   149a0:	50 e0       	ldi	r21, 0x00	; 0
   149a2:	b8 01       	movw	r22, r16
   149a4:	8e e8       	ldi	r24, 0x8E	; 142
   149a6:	90 e2       	ldi	r25, 0x20	; 32
   149a8:	0e 94 40 32 	call	0x6480	; 0x6480 <strncpy>

		ptr = get_token(ptr, token, 	sizeof(token)-2);				// =
   149ac:	4e e7       	ldi	r20, 0x7E	; 126
   149ae:	50 e0       	ldi	r21, 0x00	; 0
   149b0:	b8 01       	movw	r22, r16
   149b2:	c4 01       	movw	r24, r8
   149b4:	0e 94 f5 33 	call	0x67ea	; 0x67ea <get_token>

		ptr = get_token(ptr, hpdir.comment, sizeof(hpdir.comment)-2);	// 2 Comment
   149b8:	4e e3       	ldi	r20, 0x3E	; 62
   149ba:	50 e0       	ldi	r21, 0x00	; 0
   149bc:	6e ea       	ldi	r22, 0xAE	; 174
   149be:	70 e2       	ldi	r23, 0x20	; 32
   149c0:	0e 94 f5 33 	call	0x67ea	; 0x67ea <get_token>

		ptr = get_token(ptr, hpdir.TYPE,  sizeof(hpdir.TYPE)-2);		// 3 AMIGO/SS80/CS80
   149c4:	4e e1       	ldi	r20, 0x1E	; 30
   149c6:	50 e0       	ldi	r21, 0x00	; 0
   149c8:	6e ee       	ldi	r22, 0xEE	; 238
   149ca:	70 e2       	ldi	r23, 0x20	; 32
   149cc:	0e 94 f5 33 	call	0x67ea	; 0x67ea <get_token>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 4 Identify ID
   149d0:	4e e7       	ldi	r20, 0x7E	; 126
   149d2:	50 e0       	ldi	r21, 0x00	; 0
   149d4:	b8 01       	movw	r22, r16
   149d6:	0e 94 f5 33 	call	0x67ea	; 0x67ea <get_token>
		hpdir.ID = get_value(token);
   149da:	6c 01       	movw	r12, r24
   149dc:	c8 01       	movw	r24, r16
   149de:	0e 94 38 34 	call	0x6870	; 0x6870 <get_value>
   149e2:	60 93 0e 21 	sts	0x210E, r22	; 0x80210e <hpdir+0x80>
   149e6:	70 93 0f 21 	sts	0x210F, r23	; 0x80210f <hpdir+0x81>
   149ea:	80 93 10 21 	sts	0x2110, r24	; 0x802110 <hpdir+0x82>
   149ee:	90 93 11 21 	sts	0x2111, r25	; 0x802111 <hpdir+0x83>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 5 MASK STAT 2
   149f2:	4e e7       	ldi	r20, 0x7E	; 126
   149f4:	50 e0       	ldi	r21, 0x00	; 0
   149f6:	b8 01       	movw	r22, r16
   149f8:	c6 01       	movw	r24, r12
   149fa:	0e 94 f5 33 	call	0x67ea	; 0x67ea <get_token>
		hpdir.mask_stat2 = get_value(token);
   149fe:	6c 01       	movw	r12, r24
   14a00:	c8 01       	movw	r24, r16
   14a02:	0e 94 38 34 	call	0x6870	; 0x6870 <get_value>
   14a06:	60 93 12 21 	sts	0x2112, r22	; 0x802112 <hpdir+0x84>
   14a0a:	70 93 13 21 	sts	0x2113, r23	; 0x802113 <hpdir+0x85>
   14a0e:	80 93 14 21 	sts	0x2114, r24	; 0x802114 <hpdir+0x86>
   14a12:	90 93 15 21 	sts	0x2115, r25	; 0x802115 <hpdir+0x87>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 6 STAT2
   14a16:	4e e7       	ldi	r20, 0x7E	; 126
   14a18:	50 e0       	ldi	r21, 0x00	; 0
   14a1a:	b8 01       	movw	r22, r16
   14a1c:	c6 01       	movw	r24, r12
   14a1e:	0e 94 f5 33 	call	0x67ea	; 0x67ea <get_token>
		hpdir.id_stat2 = get_value(token);
   14a22:	6c 01       	movw	r12, r24
   14a24:	c8 01       	movw	r24, r16
   14a26:	0e 94 38 34 	call	0x6870	; 0x6870 <get_value>
   14a2a:	60 93 16 21 	sts	0x2116, r22	; 0x802116 <hpdir+0x88>
   14a2e:	70 93 17 21 	sts	0x2117, r23	; 0x802117 <hpdir+0x89>
   14a32:	80 93 18 21 	sts	0x2118, r24	; 0x802118 <hpdir+0x8a>
   14a36:	90 93 19 21 	sts	0x2119, r25	; 0x802119 <hpdir+0x8b>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 7 BCD include model number
   14a3a:	4e e7       	ldi	r20, 0x7E	; 126
   14a3c:	50 e0       	ldi	r21, 0x00	; 0
   14a3e:	b8 01       	movw	r22, r16
   14a40:	c6 01       	movw	r24, r12
   14a42:	0e 94 f5 33 	call	0x67ea	; 0x67ea <get_token>
		hpdir.DEVICE_NUMBER = get_value(token);
   14a46:	6c 01       	movw	r12, r24
   14a48:	c8 01       	movw	r24, r16
   14a4a:	0e 94 38 34 	call	0x6870	; 0x6870 <get_value>
   14a4e:	60 93 1a 21 	sts	0x211A, r22	; 0x80211a <hpdir+0x8c>
   14a52:	70 93 1b 21 	sts	0x211B, r23	; 0x80211b <hpdir+0x8d>
   14a56:	80 93 1c 21 	sts	0x211C, r24	; 0x80211c <hpdir+0x8e>
   14a5a:	90 93 1d 21 	sts	0x211D, r25	; 0x80211d <hpdir+0x8f>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 8 Units installed
   14a5e:	4e e7       	ldi	r20, 0x7E	; 126
   14a60:	50 e0       	ldi	r21, 0x00	; 0
   14a62:	b8 01       	movw	r22, r16
   14a64:	c6 01       	movw	r24, r12
   14a66:	0e 94 f5 33 	call	0x67ea	; 0x67ea <get_token>
		hpdir.UNITS_INSTALLED = get_value(token);
   14a6a:	6c 01       	movw	r12, r24
   14a6c:	c8 01       	movw	r24, r16
   14a6e:	0e 94 38 34 	call	0x6870	; 0x6870 <get_value>
   14a72:	60 93 1e 21 	sts	0x211E, r22	; 0x80211e <hpdir+0x90>
   14a76:	70 93 1f 21 	sts	0x211F, r23	; 0x80211f <hpdir+0x91>
   14a7a:	80 93 20 21 	sts	0x2120, r24	; 0x802120 <hpdir+0x92>
   14a7e:	90 93 21 21 	sts	0x2121, r25	; 0x802121 <hpdir+0x93>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 9 Cylinders
   14a82:	4e e7       	ldi	r20, 0x7E	; 126
   14a84:	50 e0       	ldi	r21, 0x00	; 0
   14a86:	b8 01       	movw	r22, r16
   14a88:	c6 01       	movw	r24, r12
   14a8a:	0e 94 f5 33 	call	0x67ea	; 0x67ea <get_token>
		hpdir.CYLINDERS = get_value(token);
   14a8e:	6c 01       	movw	r12, r24
   14a90:	c8 01       	movw	r24, r16
   14a92:	0e 94 38 34 	call	0x6870	; 0x6870 <get_value>
   14a96:	60 93 22 21 	sts	0x2122, r22	; 0x802122 <hpdir+0x94>
   14a9a:	70 93 23 21 	sts	0x2123, r23	; 0x802123 <hpdir+0x95>
   14a9e:	80 93 24 21 	sts	0x2124, r24	; 0x802124 <hpdir+0x96>
   14aa2:	90 93 25 21 	sts	0x2125, r25	; 0x802125 <hpdir+0x97>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 10 Heads
   14aa6:	4e e7       	ldi	r20, 0x7E	; 126
   14aa8:	50 e0       	ldi	r21, 0x00	; 0
   14aaa:	b8 01       	movw	r22, r16
   14aac:	c6 01       	movw	r24, r12
   14aae:	0e 94 f5 33 	call	0x67ea	; 0x67ea <get_token>
		hpdir.HEADS = get_value(token);
   14ab2:	6c 01       	movw	r12, r24
   14ab4:	c8 01       	movw	r24, r16
   14ab6:	0e 94 38 34 	call	0x6870	; 0x6870 <get_value>
   14aba:	60 93 26 21 	sts	0x2126, r22	; 0x802126 <hpdir+0x98>
   14abe:	70 93 27 21 	sts	0x2127, r23	; 0x802127 <hpdir+0x99>
   14ac2:	80 93 28 21 	sts	0x2128, r24	; 0x802128 <hpdir+0x9a>
   14ac6:	90 93 29 21 	sts	0x2129, r25	; 0x802129 <hpdir+0x9b>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 11 Sectors
   14aca:	4e e7       	ldi	r20, 0x7E	; 126
   14acc:	50 e0       	ldi	r21, 0x00	; 0
   14ace:	b8 01       	movw	r22, r16
   14ad0:	c6 01       	movw	r24, r12
   14ad2:	0e 94 f5 33 	call	0x67ea	; 0x67ea <get_token>
		hpdir.SECTORS = get_value(token);
   14ad6:	6c 01       	movw	r12, r24
   14ad8:	c8 01       	movw	r24, r16
   14ada:	0e 94 38 34 	call	0x6870	; 0x6870 <get_value>
   14ade:	60 93 2a 21 	sts	0x212A, r22	; 0x80212a <hpdir+0x9c>
   14ae2:	70 93 2b 21 	sts	0x212B, r23	; 0x80212b <hpdir+0x9d>
   14ae6:	80 93 2c 21 	sts	0x212C, r24	; 0x80212c <hpdir+0x9e>
   14aea:	90 93 2d 21 	sts	0x212D, r25	; 0x80212d <hpdir+0x9f>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 12 Bytes Per Block/Sector
   14aee:	4e e7       	ldi	r20, 0x7E	; 126
   14af0:	50 e0       	ldi	r21, 0x00	; 0
   14af2:	b8 01       	movw	r22, r16
   14af4:	c6 01       	movw	r24, r12
   14af6:	0e 94 f5 33 	call	0x67ea	; 0x67ea <get_token>
		hpdir.BYTES_PER_SECTOR = get_value(token);
   14afa:	6c 01       	movw	r12, r24
   14afc:	c8 01       	movw	r24, r16
   14afe:	0e 94 38 34 	call	0x6870	; 0x6870 <get_value>
   14b02:	60 93 2e 21 	sts	0x212E, r22	; 0x80212e <hpdir+0xa0>
   14b06:	70 93 2f 21 	sts	0x212F, r23	; 0x80212f <hpdir+0xa1>
   14b0a:	80 93 30 21 	sts	0x2130, r24	; 0x802130 <hpdir+0xa2>
   14b0e:	90 93 31 21 	sts	0x2131, r25	; 0x802131 <hpdir+0xa3>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 13 Interleave
   14b12:	4e e7       	ldi	r20, 0x7E	; 126
   14b14:	50 e0       	ldi	r21, 0x00	; 0
   14b16:	b8 01       	movw	r22, r16
   14b18:	c6 01       	movw	r24, r12
   14b1a:	0e 94 f5 33 	call	0x67ea	; 0x67ea <get_token>
		hpdir.INTERLEAVE = get_value(token);
   14b1e:	c8 01       	movw	r24, r16
   14b20:	0e 94 38 34 	call	0x6870	; 0x6870 <get_value>
   14b24:	60 93 32 21 	sts	0x2132, r22	; 0x802132 <hpdir+0xa4>
   14b28:	70 93 33 21 	sts	0x2133, r23	; 0x802133 <hpdir+0xa5>
   14b2c:	80 93 34 21 	sts	0x2134, r24	; 0x802134 <hpdir+0xa6>
   14b30:	90 93 35 21 	sts	0x2135, r25	; 0x802135 <hpdir+0xa7>

		// Computed values
		hpdir.BLOCKS = ( hpdir.CYLINDERS * hpdir.HEADS * hpdir.SECTORS );
   14b34:	20 91 22 21 	lds	r18, 0x2122	; 0x802122 <hpdir+0x94>
   14b38:	30 91 23 21 	lds	r19, 0x2123	; 0x802123 <hpdir+0x95>
   14b3c:	40 91 24 21 	lds	r20, 0x2124	; 0x802124 <hpdir+0x96>
   14b40:	50 91 25 21 	lds	r21, 0x2125	; 0x802125 <hpdir+0x97>
   14b44:	60 91 26 21 	lds	r22, 0x2126	; 0x802126 <hpdir+0x98>
   14b48:	70 91 27 21 	lds	r23, 0x2127	; 0x802127 <hpdir+0x99>
   14b4c:	80 91 28 21 	lds	r24, 0x2128	; 0x802128 <hpdir+0x9a>
   14b50:	90 91 29 21 	lds	r25, 0x2129	; 0x802129 <hpdir+0x9b>
   14b54:	0e 94 04 e3 	call	0x1c608	; 0x1c608 <__mulsi3>
   14b58:	9b 01       	movw	r18, r22
   14b5a:	ac 01       	movw	r20, r24
   14b5c:	60 91 2a 21 	lds	r22, 0x212A	; 0x80212a <hpdir+0x9c>
   14b60:	70 91 2b 21 	lds	r23, 0x212B	; 0x80212b <hpdir+0x9d>
   14b64:	80 91 2c 21 	lds	r24, 0x212C	; 0x80212c <hpdir+0x9e>
   14b68:	90 91 2d 21 	lds	r25, 0x212D	; 0x80212d <hpdir+0x9f>
   14b6c:	0e 94 04 e3 	call	0x1c608	; 0x1c608 <__mulsi3>
   14b70:	60 93 3a 21 	sts	0x213A, r22	; 0x80213a <hpdir+0xac>
   14b74:	70 93 3b 21 	sts	0x213B, r23	; 0x80213b <hpdir+0xad>
   14b78:	80 93 3c 21 	sts	0x213C, r24	; 0x80213c <hpdir+0xae>
   14b7c:	90 93 3d 21 	sts	0x213D, r25	; 0x80213d <hpdir+0xaf>
		{
			if(verbose)
				printf("Error /hpdir.ini parsing\n");
			break;
		}
		found = 1;
   14b80:	01 e0       	ldi	r16, 0x01	; 1
		break;

	}	// while
	fclose(cfg);
   14b82:	10 e0       	ldi	r17, 0x00	; 0
   14b84:	c7 01       	movw	r24, r14
   14b86:	0e 94 a2 7d 	call	0xfb44	; 0xfb44 <fclose>
	return(found);
   14b8a:	c8 01       	movw	r24, r16

	if(cfg == NULL)
	{
		if(verbose)
			printf("Error: hpdir.ini not found!\n");
		return(0);
   14b8c:	02 c0       	rjmp	.+4      	; 0x14b92 <hpdir_find_drive+0x35a>
   14b8e:	80 e0       	ldi	r24, 0x00	; 0
		break;

	}	// while
	fclose(cfg);
	return(found);
}
   14b90:	90 e0       	ldi	r25, 0x00	; 0
   14b92:	c7 57       	subi	r28, 0x77	; 119
   14b94:	de 4f       	sbci	r29, 0xFE	; 254
   14b96:	0f b6       	in	r0, 0x3f	; 63
   14b98:	f8 94       	cli
   14b9a:	de bf       	out	0x3e, r29	; 62
   14b9c:	0f be       	out	0x3f, r0	; 63
   14b9e:	cd bf       	out	0x3d, r28	; 61
   14ba0:	df 91       	pop	r29
   14ba2:	cf 91       	pop	r28
   14ba4:	1f 91       	pop	r17
   14ba6:	0f 91       	pop	r16
   14ba8:	ff 90       	pop	r15
   14baa:	ef 90       	pop	r14
   14bac:	df 90       	pop	r13
   14bae:	cf 90       	pop	r12
   14bb0:	bf 90       	pop	r11
   14bb2:	af 90       	pop	r10
   14bb4:	9f 90       	pop	r9
   14bb6:	8f 90       	pop	r8
   14bb8:	6f 90       	pop	r6
   14bba:	5f 90       	pop	r5
   14bbc:	4f 90       	pop	r4
   14bbe:	3f 90       	pop	r3
   14bc0:	2f 90       	pop	r2
   14bc2:	08 95       	ret

00014bc4 <SS80ControllerPack>:
   14bc4:	0f 93       	push	r16
   14bc6:	1f 93       	push	r17
   14bc8:	25 e0       	ldi	r18, 0x05	; 5
   14bca:	30 e0       	ldi	r19, 0x00	; 0
   14bcc:	fc 01       	movw	r30, r24
   14bce:	31 83       	std	Z+1, r19	; 0x01
   14bd0:	20 83       	st	Z, r18
   14bd2:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80p>
   14bd6:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80p+0x1>
   14bda:	06 81       	ldd	r16, Z+6	; 0x06
   14bdc:	17 81       	ldd	r17, Z+7	; 0x07
   14bde:	20 e0       	ldi	r18, 0x00	; 0
   14be0:	30 e0       	ldi	r19, 0x00	; 0
   14be2:	42 e0       	ldi	r20, 0x02	; 2
   14be4:	50 e0       	ldi	r21, 0x00	; 0
   14be6:	60 e0       	ldi	r22, 0x00	; 0
   14be8:	70 e0       	ldi	r23, 0x00	; 0
   14bea:	85 e3       	ldi	r24, 0x35	; 53
   14bec:	99 e1       	ldi	r25, 0x19	; 25
   14bee:	0e 94 ab 92 	call	0x12556	; 0x12556 <V2B_MSB>
   14bf2:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80p>
   14bf6:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80p+0x1>
   14bfa:	00 85       	ldd	r16, Z+8	; 0x08
   14bfc:	11 85       	ldd	r17, Z+9	; 0x09
   14bfe:	20 e0       	ldi	r18, 0x00	; 0
   14c00:	30 e0       	ldi	r19, 0x00	; 0
   14c02:	42 e0       	ldi	r20, 0x02	; 2
   14c04:	50 e0       	ldi	r21, 0x00	; 0
   14c06:	61 e0       	ldi	r22, 0x01	; 1
   14c08:	70 e0       	ldi	r23, 0x00	; 0
   14c0a:	85 e3       	ldi	r24, 0x35	; 53
   14c0c:	99 e1       	ldi	r25, 0x19	; 25
   14c0e:	0e 94 ab 92 	call	0x12556	; 0x12556 <V2B_MSB>
   14c12:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80p>
   14c16:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80p+0x1>
   14c1a:	02 85       	ldd	r16, Z+10	; 0x0a
   14c1c:	10 e0       	ldi	r17, 0x00	; 0
   14c1e:	20 e0       	ldi	r18, 0x00	; 0
   14c20:	30 e0       	ldi	r19, 0x00	; 0
   14c22:	41 e0       	ldi	r20, 0x01	; 1
   14c24:	50 e0       	ldi	r21, 0x00	; 0
   14c26:	64 e0       	ldi	r22, 0x04	; 4
   14c28:	70 e0       	ldi	r23, 0x00	; 0
   14c2a:	85 e3       	ldi	r24, 0x35	; 53
   14c2c:	99 e1       	ldi	r25, 0x19	; 25
   14c2e:	0e 94 ab 92 	call	0x12556	; 0x12556 <V2B_MSB>
   14c32:	85 e3       	ldi	r24, 0x35	; 53
   14c34:	99 e1       	ldi	r25, 0x19	; 25
   14c36:	1f 91       	pop	r17
   14c38:	0f 91       	pop	r16
   14c3a:	08 95       	ret

00014c3c <SS80UnitPack>:
   14c3c:	0f 93       	push	r16
   14c3e:	1f 93       	push	r17
   14c40:	23 e1       	ldi	r18, 0x13	; 19
   14c42:	30 e0       	ldi	r19, 0x00	; 0
   14c44:	fc 01       	movw	r30, r24
   14c46:	31 83       	std	Z+1, r19	; 0x01
   14c48:	20 83       	st	Z, r18
   14c4a:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80p>
   14c4e:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80p+0x1>
   14c52:	03 85       	ldd	r16, Z+11	; 0x0b
   14c54:	10 e0       	ldi	r17, 0x00	; 0
   14c56:	20 e0       	ldi	r18, 0x00	; 0
   14c58:	30 e0       	ldi	r19, 0x00	; 0
   14c5a:	41 e0       	ldi	r20, 0x01	; 1
   14c5c:	50 e0       	ldi	r21, 0x00	; 0
   14c5e:	60 e0       	ldi	r22, 0x00	; 0
   14c60:	70 e0       	ldi	r23, 0x00	; 0
   14c62:	82 e2       	ldi	r24, 0x22	; 34
   14c64:	99 e1       	ldi	r25, 0x19	; 25
   14c66:	0e 94 ab 92 	call	0x12556	; 0x12556 <V2B_MSB>
   14c6a:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80p>
   14c6e:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80p+0x1>
   14c72:	04 85       	ldd	r16, Z+12	; 0x0c
   14c74:	15 85       	ldd	r17, Z+13	; 0x0d
   14c76:	26 85       	ldd	r18, Z+14	; 0x0e
   14c78:	37 85       	ldd	r19, Z+15	; 0x0f
   14c7a:	43 e0       	ldi	r20, 0x03	; 3
   14c7c:	50 e0       	ldi	r21, 0x00	; 0
   14c7e:	61 e0       	ldi	r22, 0x01	; 1
   14c80:	70 e0       	ldi	r23, 0x00	; 0
   14c82:	82 e2       	ldi	r24, 0x22	; 34
   14c84:	99 e1       	ldi	r25, 0x19	; 25
   14c86:	0e 94 ab 92 	call	0x12556	; 0x12556 <V2B_MSB>
   14c8a:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80p>
   14c8e:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80p+0x1>
   14c92:	00 89       	ldd	r16, Z+16	; 0x10
   14c94:	11 89       	ldd	r17, Z+17	; 0x11
   14c96:	20 e0       	ldi	r18, 0x00	; 0
   14c98:	30 e0       	ldi	r19, 0x00	; 0
   14c9a:	42 e0       	ldi	r20, 0x02	; 2
   14c9c:	50 e0       	ldi	r21, 0x00	; 0
   14c9e:	64 e0       	ldi	r22, 0x04	; 4
   14ca0:	70 e0       	ldi	r23, 0x00	; 0
   14ca2:	82 e2       	ldi	r24, 0x22	; 34
   14ca4:	99 e1       	ldi	r25, 0x19	; 25
   14ca6:	0e 94 ab 92 	call	0x12556	; 0x12556 <V2B_MSB>
   14caa:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80p>
   14cae:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80p+0x1>
   14cb2:	02 89       	ldd	r16, Z+18	; 0x12
   14cb4:	10 e0       	ldi	r17, 0x00	; 0
   14cb6:	20 e0       	ldi	r18, 0x00	; 0
   14cb8:	30 e0       	ldi	r19, 0x00	; 0
   14cba:	41 e0       	ldi	r20, 0x01	; 1
   14cbc:	50 e0       	ldi	r21, 0x00	; 0
   14cbe:	66 e0       	ldi	r22, 0x06	; 6
   14cc0:	70 e0       	ldi	r23, 0x00	; 0
   14cc2:	82 e2       	ldi	r24, 0x22	; 34
   14cc4:	99 e1       	ldi	r25, 0x19	; 25
   14cc6:	0e 94 ab 92 	call	0x12556	; 0x12556 <V2B_MSB>
   14cca:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80p>
   14cce:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80p+0x1>
   14cd2:	03 89       	ldd	r16, Z+19	; 0x13
   14cd4:	10 e0       	ldi	r17, 0x00	; 0
   14cd6:	20 e0       	ldi	r18, 0x00	; 0
   14cd8:	30 e0       	ldi	r19, 0x00	; 0
   14cda:	41 e0       	ldi	r20, 0x01	; 1
   14cdc:	50 e0       	ldi	r21, 0x00	; 0
   14cde:	67 e0       	ldi	r22, 0x07	; 7
   14ce0:	70 e0       	ldi	r23, 0x00	; 0
   14ce2:	82 e2       	ldi	r24, 0x22	; 34
   14ce4:	99 e1       	ldi	r25, 0x19	; 25
   14ce6:	0e 94 ab 92 	call	0x12556	; 0x12556 <V2B_MSB>
   14cea:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80p>
   14cee:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80p+0x1>
   14cf2:	04 89       	ldd	r16, Z+20	; 0x14
   14cf4:	15 89       	ldd	r17, Z+21	; 0x15
   14cf6:	20 e0       	ldi	r18, 0x00	; 0
   14cf8:	30 e0       	ldi	r19, 0x00	; 0
   14cfa:	42 e0       	ldi	r20, 0x02	; 2
   14cfc:	50 e0       	ldi	r21, 0x00	; 0
   14cfe:	68 e0       	ldi	r22, 0x08	; 8
   14d00:	70 e0       	ldi	r23, 0x00	; 0
   14d02:	82 e2       	ldi	r24, 0x22	; 34
   14d04:	99 e1       	ldi	r25, 0x19	; 25
   14d06:	0e 94 ab 92 	call	0x12556	; 0x12556 <V2B_MSB>
   14d0a:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80p>
   14d0e:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80p+0x1>
   14d12:	06 89       	ldd	r16, Z+22	; 0x16
   14d14:	17 89       	ldd	r17, Z+23	; 0x17
   14d16:	20 e0       	ldi	r18, 0x00	; 0
   14d18:	30 e0       	ldi	r19, 0x00	; 0
   14d1a:	42 e0       	ldi	r20, 0x02	; 2
   14d1c:	50 e0       	ldi	r21, 0x00	; 0
   14d1e:	6a e0       	ldi	r22, 0x0A	; 10
   14d20:	70 e0       	ldi	r23, 0x00	; 0
   14d22:	82 e2       	ldi	r24, 0x22	; 34
   14d24:	99 e1       	ldi	r25, 0x19	; 25
   14d26:	0e 94 ab 92 	call	0x12556	; 0x12556 <V2B_MSB>
   14d2a:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80p>
   14d2e:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80p+0x1>
   14d32:	00 8d       	ldd	r16, Z+24	; 0x18
   14d34:	11 8d       	ldd	r17, Z+25	; 0x19
   14d36:	20 e0       	ldi	r18, 0x00	; 0
   14d38:	30 e0       	ldi	r19, 0x00	; 0
   14d3a:	42 e0       	ldi	r20, 0x02	; 2
   14d3c:	50 e0       	ldi	r21, 0x00	; 0
   14d3e:	6c e0       	ldi	r22, 0x0C	; 12
   14d40:	70 e0       	ldi	r23, 0x00	; 0
   14d42:	82 e2       	ldi	r24, 0x22	; 34
   14d44:	99 e1       	ldi	r25, 0x19	; 25
   14d46:	0e 94 ab 92 	call	0x12556	; 0x12556 <V2B_MSB>
   14d4a:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80p>
   14d4e:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80p+0x1>
   14d52:	02 8d       	ldd	r16, Z+26	; 0x1a
   14d54:	13 8d       	ldd	r17, Z+27	; 0x1b
   14d56:	20 e0       	ldi	r18, 0x00	; 0
   14d58:	30 e0       	ldi	r19, 0x00	; 0
   14d5a:	42 e0       	ldi	r20, 0x02	; 2
   14d5c:	50 e0       	ldi	r21, 0x00	; 0
   14d5e:	6e e0       	ldi	r22, 0x0E	; 14
   14d60:	70 e0       	ldi	r23, 0x00	; 0
   14d62:	82 e2       	ldi	r24, 0x22	; 34
   14d64:	99 e1       	ldi	r25, 0x19	; 25
   14d66:	0e 94 ab 92 	call	0x12556	; 0x12556 <V2B_MSB>
   14d6a:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80p>
   14d6e:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80p+0x1>
   14d72:	04 8d       	ldd	r16, Z+28	; 0x1c
   14d74:	10 e0       	ldi	r17, 0x00	; 0
   14d76:	20 e0       	ldi	r18, 0x00	; 0
   14d78:	30 e0       	ldi	r19, 0x00	; 0
   14d7a:	41 e0       	ldi	r20, 0x01	; 1
   14d7c:	50 e0       	ldi	r21, 0x00	; 0
   14d7e:	60 e1       	ldi	r22, 0x10	; 16
   14d80:	70 e0       	ldi	r23, 0x00	; 0
   14d82:	82 e2       	ldi	r24, 0x22	; 34
   14d84:	99 e1       	ldi	r25, 0x19	; 25
   14d86:	0e 94 ab 92 	call	0x12556	; 0x12556 <V2B_MSB>
   14d8a:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80p>
   14d8e:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80p+0x1>
   14d92:	05 8d       	ldd	r16, Z+29	; 0x1d
   14d94:	10 e0       	ldi	r17, 0x00	; 0
   14d96:	20 e0       	ldi	r18, 0x00	; 0
   14d98:	30 e0       	ldi	r19, 0x00	; 0
   14d9a:	41 e0       	ldi	r20, 0x01	; 1
   14d9c:	50 e0       	ldi	r21, 0x00	; 0
   14d9e:	61 e1       	ldi	r22, 0x11	; 17
   14da0:	70 e0       	ldi	r23, 0x00	; 0
   14da2:	82 e2       	ldi	r24, 0x22	; 34
   14da4:	99 e1       	ldi	r25, 0x19	; 25
   14da6:	0e 94 ab 92 	call	0x12556	; 0x12556 <V2B_MSB>
   14daa:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80p>
   14dae:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80p+0x1>
   14db2:	06 8d       	ldd	r16, Z+30	; 0x1e
   14db4:	10 e0       	ldi	r17, 0x00	; 0
   14db6:	20 e0       	ldi	r18, 0x00	; 0
   14db8:	30 e0       	ldi	r19, 0x00	; 0
   14dba:	41 e0       	ldi	r20, 0x01	; 1
   14dbc:	50 e0       	ldi	r21, 0x00	; 0
   14dbe:	62 e1       	ldi	r22, 0x12	; 18
   14dc0:	70 e0       	ldi	r23, 0x00	; 0
   14dc2:	82 e2       	ldi	r24, 0x22	; 34
   14dc4:	99 e1       	ldi	r25, 0x19	; 25
   14dc6:	0e 94 ab 92 	call	0x12556	; 0x12556 <V2B_MSB>
   14dca:	82 e2       	ldi	r24, 0x22	; 34
   14dcc:	99 e1       	ldi	r25, 0x19	; 25
   14dce:	1f 91       	pop	r17
   14dd0:	0f 91       	pop	r16
   14dd2:	08 95       	ret

00014dd4 <SS80VolumePack>:
   14dd4:	0f 93       	push	r16
   14dd6:	1f 93       	push	r17
   14dd8:	2d e0       	ldi	r18, 0x0D	; 13
   14dda:	30 e0       	ldi	r19, 0x00	; 0
   14ddc:	fc 01       	movw	r30, r24
   14dde:	31 83       	std	Z+1, r19	; 0x01
   14de0:	20 83       	st	Z, r18
   14de2:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80p>
   14de6:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80p+0x1>
   14dea:	07 8d       	ldd	r16, Z+31	; 0x1f
   14dec:	10 a1       	ldd	r17, Z+32	; 0x20
   14dee:	21 a1       	ldd	r18, Z+33	; 0x21
   14df0:	32 a1       	ldd	r19, Z+34	; 0x22
   14df2:	43 e0       	ldi	r20, 0x03	; 3
   14df4:	50 e0       	ldi	r21, 0x00	; 0
   14df6:	60 e0       	ldi	r22, 0x00	; 0
   14df8:	70 e0       	ldi	r23, 0x00	; 0
   14dfa:	85 e1       	ldi	r24, 0x15	; 21
   14dfc:	99 e1       	ldi	r25, 0x19	; 25
   14dfe:	0e 94 ab 92 	call	0x12556	; 0x12556 <V2B_MSB>
   14e02:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80p>
   14e06:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80p+0x1>
   14e0a:	03 a1       	ldd	r16, Z+35	; 0x23
   14e0c:	10 e0       	ldi	r17, 0x00	; 0
   14e0e:	20 e0       	ldi	r18, 0x00	; 0
   14e10:	30 e0       	ldi	r19, 0x00	; 0
   14e12:	41 e0       	ldi	r20, 0x01	; 1
   14e14:	50 e0       	ldi	r21, 0x00	; 0
   14e16:	63 e0       	ldi	r22, 0x03	; 3
   14e18:	70 e0       	ldi	r23, 0x00	; 0
   14e1a:	85 e1       	ldi	r24, 0x15	; 21
   14e1c:	99 e1       	ldi	r25, 0x19	; 25
   14e1e:	0e 94 ab 92 	call	0x12556	; 0x12556 <V2B_MSB>
   14e22:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80p>
   14e26:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80p+0x1>
   14e2a:	04 a1       	ldd	r16, Z+36	; 0x24
   14e2c:	15 a1       	ldd	r17, Z+37	; 0x25
   14e2e:	20 e0       	ldi	r18, 0x00	; 0
   14e30:	30 e0       	ldi	r19, 0x00	; 0
   14e32:	42 e0       	ldi	r20, 0x02	; 2
   14e34:	50 e0       	ldi	r21, 0x00	; 0
   14e36:	64 e0       	ldi	r22, 0x04	; 4
   14e38:	70 e0       	ldi	r23, 0x00	; 0
   14e3a:	85 e1       	ldi	r24, 0x15	; 21
   14e3c:	99 e1       	ldi	r25, 0x19	; 25
   14e3e:	0e 94 ab 92 	call	0x12556	; 0x12556 <V2B_MSB>
   14e42:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80p>
   14e46:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80p+0x1>
   14e4a:	06 a1       	ldd	r16, Z+38	; 0x26
   14e4c:	17 a1       	ldd	r17, Z+39	; 0x27
   14e4e:	20 a5       	ldd	r18, Z+40	; 0x28
   14e50:	31 a5       	ldd	r19, Z+41	; 0x29
   14e52:	46 e0       	ldi	r20, 0x06	; 6
   14e54:	50 e0       	ldi	r21, 0x00	; 0
   14e56:	66 e0       	ldi	r22, 0x06	; 6
   14e58:	70 e0       	ldi	r23, 0x00	; 0
   14e5a:	85 e1       	ldi	r24, 0x15	; 21
   14e5c:	99 e1       	ldi	r25, 0x19	; 25
   14e5e:	0e 94 ab 92 	call	0x12556	; 0x12556 <V2B_MSB>
   14e62:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80p>
   14e66:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80p+0x1>
   14e6a:	02 a5       	ldd	r16, Z+42	; 0x2a
   14e6c:	10 e0       	ldi	r17, 0x00	; 0
   14e6e:	20 e0       	ldi	r18, 0x00	; 0
   14e70:	30 e0       	ldi	r19, 0x00	; 0
   14e72:	41 e0       	ldi	r20, 0x01	; 1
   14e74:	50 e0       	ldi	r21, 0x00	; 0
   14e76:	6c e0       	ldi	r22, 0x0C	; 12
   14e78:	70 e0       	ldi	r23, 0x00	; 0
   14e7a:	85 e1       	ldi	r24, 0x15	; 21
   14e7c:	99 e1       	ldi	r25, 0x19	; 25
   14e7e:	0e 94 ab 92 	call	0x12556	; 0x12556 <V2B_MSB>
   14e82:	85 e1       	ldi	r24, 0x15	; 21
   14e84:	99 e1       	ldi	r25, 0x19	; 25
   14e86:	1f 91       	pop	r17
   14e88:	0f 91       	pop	r16
   14e8a:	08 95       	ret

00014e8c <SS80_test_extended_status>:
   14e8c:	9b 01       	movw	r18, r22
   14e8e:	43 e0       	ldi	r20, 0x03	; 3
   14e90:	35 95       	asr	r19
   14e92:	27 95       	ror	r18
   14e94:	4a 95       	dec	r20
   14e96:	e1 f7       	brne	.-8      	; 0x14e90 <SS80_test_extended_status+0x4>
   14e98:	82 0f       	add	r24, r18
   14e9a:	93 1f       	adc	r25, r19
   14e9c:	67 70       	andi	r22, 0x07	; 7
   14e9e:	77 27       	eor	r23, r23
   14ea0:	20 e8       	ldi	r18, 0x80	; 128
   14ea2:	30 e0       	ldi	r19, 0x00	; 0
   14ea4:	02 c0       	rjmp	.+4      	; 0x14eaa <SS80_test_extended_status+0x1e>
   14ea6:	35 95       	asr	r19
   14ea8:	27 95       	ror	r18
   14eaa:	6a 95       	dec	r22
   14eac:	e2 f7       	brpl	.-8      	; 0x14ea6 <SS80_test_extended_status+0x1a>
   14eae:	fc 01       	movw	r30, r24
   14eb0:	80 81       	ld	r24, Z
   14eb2:	28 23       	and	r18, r24
   14eb4:	81 e0       	ldi	r24, 0x01	; 1
   14eb6:	90 e0       	ldi	r25, 0x00	; 0
   14eb8:	11 f4       	brne	.+4      	; 0x14ebe <SS80_test_extended_status+0x32>
   14eba:	80 e0       	ldi	r24, 0x00	; 0
   14ebc:	90 e0       	ldi	r25, 0x00	; 0
   14ebe:	08 95       	ret

00014ec0 <SS80_display_extended_status>:
   14ec0:	6f 92       	push	r6
   14ec2:	7f 92       	push	r7
   14ec4:	8f 92       	push	r8
   14ec6:	ef 92       	push	r14
   14ec8:	ff 92       	push	r15
   14eca:	0f 93       	push	r16
   14ecc:	1f 93       	push	r17
   14ece:	cf 93       	push	r28
   14ed0:	df 93       	push	r29
   14ed2:	ad b7       	in	r26, 0x3d	; 61
   14ed4:	be b7       	in	r27, 0x3e	; 62
   14ed6:	17 97       	sbiw	r26, 0x07	; 7
   14ed8:	0f b6       	in	r0, 0x3f	; 63
   14eda:	f8 94       	cli
   14edc:	be bf       	out	0x3e, r27	; 62
   14ede:	0f be       	out	0x3f, r0	; 63
   14ee0:	ad bf       	out	0x3d, r26	; 61
   14ee2:	fc 01       	movw	r30, r24
   14ee4:	ac 01       	movw	r20, r24
   14ee6:	48 5f       	subi	r20, 0xF8	; 248
   14ee8:	5f 4f       	sbci	r21, 0xFF	; 255
   14eea:	20 e0       	ldi	r18, 0x00	; 0
   14eec:	30 e0       	ldi	r19, 0x00	; 0
   14eee:	a1 91       	ld	r26, Z+
   14ef0:	aa 23       	and	r26, r26
   14ef2:	11 f0       	breq	.+4      	; 0x14ef8 <SS80_display_extended_status+0x38>
   14ef4:	21 e0       	ldi	r18, 0x01	; 1
   14ef6:	30 e0       	ldi	r19, 0x00	; 0
   14ef8:	e4 17       	cp	r30, r20
   14efa:	f5 07       	cpc	r31, r21
   14efc:	c1 f7       	brne	.-16     	; 0x14eee <SS80_display_extended_status+0x2e>
   14efe:	23 2b       	or	r18, r19
   14f00:	81 f1       	breq	.+96     	; 0x14f62 <SS80_display_extended_status+0xa2>
   14f02:	ec 01       	movw	r28, r24
   14f04:	ed b7       	in	r30, 0x3d	; 61
   14f06:	fe b7       	in	r31, 0x3e	; 62
   14f08:	75 83       	std	Z+5, r23	; 0x05
   14f0a:	64 83       	std	Z+4, r22	; 0x04
   14f0c:	84 e7       	ldi	r24, 0x74	; 116
   14f0e:	95 e2       	ldi	r25, 0x25	; 37
   14f10:	a0 e0       	ldi	r26, 0x00	; 0
   14f12:	81 83       	std	Z+1, r24	; 0x01
   14f14:	92 83       	std	Z+2, r25	; 0x02
   14f16:	a3 83       	std	Z+3, r26	; 0x03
   14f18:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   14f1c:	01 ed       	ldi	r16, 0xD1	; 209
   14f1e:	11 e0       	ldi	r17, 0x01	; 1
   14f20:	89 e6       	ldi	r24, 0x69	; 105
   14f22:	95 e2       	ldi	r25, 0x25	; 37
   14f24:	3c 01       	movw	r6, r24
   14f26:	81 2c       	mov	r8, r1
   14f28:	f8 01       	movw	r30, r16
   14f2a:	e0 80       	ld	r14, Z
   14f2c:	f1 80       	ldd	r15, Z+1	; 0x01
   14f2e:	ff ef       	ldi	r31, 0xFF	; 255
   14f30:	ef 16       	cp	r14, r31
   14f32:	ff 06       	cpc	r15, r31
   14f34:	b1 f0       	breq	.+44     	; 0x14f62 <SS80_display_extended_status+0xa2>
   14f36:	b7 01       	movw	r22, r14
   14f38:	ce 01       	movw	r24, r28
   14f3a:	a8 df       	rcall	.-176    	; 0x14e8c <SS80_test_extended_status>
   14f3c:	89 2b       	or	r24, r25
   14f3e:	71 f0       	breq	.+28     	; 0x14f5c <SS80_display_extended_status+0x9c>
   14f40:	f8 01       	movw	r30, r16
   14f42:	82 81       	ldd	r24, Z+2	; 0x02
   14f44:	93 81       	ldd	r25, Z+3	; 0x03
   14f46:	ed b7       	in	r30, 0x3d	; 61
   14f48:	fe b7       	in	r31, 0x3e	; 62
   14f4a:	97 83       	std	Z+7, r25	; 0x07
   14f4c:	86 83       	std	Z+6, r24	; 0x06
   14f4e:	f5 82       	std	Z+5, r15	; 0x05
   14f50:	e4 82       	std	Z+4, r14	; 0x04
   14f52:	61 82       	std	Z+1, r6	; 0x01
   14f54:	72 82       	std	Z+2, r7	; 0x02
   14f56:	83 82       	std	Z+3, r8	; 0x03
   14f58:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   14f5c:	0c 5f       	subi	r16, 0xFC	; 252
   14f5e:	1f 4f       	sbci	r17, 0xFF	; 255
   14f60:	e3 cf       	rjmp	.-58     	; 0x14f28 <SS80_display_extended_status+0x68>
   14f62:	ad b7       	in	r26, 0x3d	; 61
   14f64:	be b7       	in	r27, 0x3e	; 62
   14f66:	17 96       	adiw	r26, 0x07	; 7
   14f68:	0f b6       	in	r0, 0x3f	; 63
   14f6a:	f8 94       	cli
   14f6c:	be bf       	out	0x3e, r27	; 62
   14f6e:	0f be       	out	0x3f, r0	; 63
   14f70:	ad bf       	out	0x3d, r26	; 61
   14f72:	df 91       	pop	r29
   14f74:	cf 91       	pop	r28
   14f76:	1f 91       	pop	r17
   14f78:	0f 91       	pop	r16
   14f7a:	ff 90       	pop	r15
   14f7c:	ef 90       	pop	r14
   14f7e:	8f 90       	pop	r8
   14f80:	7f 90       	pop	r7
   14f82:	6f 90       	pop	r6
   14f84:	08 95       	ret

00014f86 <SS80_send_status>:
   14f86:	a9 e1       	ldi	r26, 0x19	; 25
   14f88:	b0 e0       	ldi	r27, 0x00	; 0
   14f8a:	e9 ec       	ldi	r30, 0xC9	; 201
   14f8c:	f7 ea       	ldi	r31, 0xA7	; 167
   14f8e:	0c 94 d4 e3 	jmp	0x1c7a8	; 0x1c7a8 <__prologue_saves__+0x18>
   14f92:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   14f96:	85 ff       	sbrs	r24, 5
   14f98:	0a c0       	rjmp	.+20     	; 0x14fae <SS80_send_status+0x28>
   14f9a:	85 e5       	ldi	r24, 0x55	; 85
   14f9c:	95 e2       	ldi	r25, 0x25	; 37
   14f9e:	a0 e0       	ldi	r26, 0x00	; 0
   14fa0:	ed b7       	in	r30, 0x3d	; 61
   14fa2:	fe b7       	in	r31, 0x3e	; 62
   14fa4:	81 83       	std	Z+1, r24	; 0x01
   14fa6:	92 83       	std	Z+2, r25	; 0x02
   14fa8:	a3 83       	std	Z+3, r26	; 0x03
   14faa:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   14fae:	ce 01       	movw	r24, r28
   14fb0:	04 96       	adiw	r24, 0x04	; 4
   14fb2:	7c 01       	movw	r14, r24
   14fb4:	84 e1       	ldi	r24, 0x14	; 20
   14fb6:	f7 01       	movw	r30, r14
   14fb8:	11 92       	st	Z+, r1
   14fba:	8a 95       	dec	r24
   14fbc:	e9 f7       	brne	.-6      	; 0x14fb8 <SS80_send_status+0x32>
   14fbe:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <SS80s>
   14fc2:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <SS80s+0x1>
   14fc6:	86 81       	ldd	r24, Z+6	; 0x06
   14fc8:	20 e1       	ldi	r18, 0x10	; 16
   14fca:	82 9f       	mul	r24, r18
   14fcc:	c0 01       	movw	r24, r0
   14fce:	11 24       	eor	r1, r1
   14fd0:	95 81       	ldd	r25, Z+5	; 0x05
   14fd2:	9f 70       	andi	r25, 0x0F	; 15
   14fd4:	89 2b       	or	r24, r25
   14fd6:	8c 83       	std	Y+4, r24	; 0x04
   14fd8:	8f ef       	ldi	r24, 0xFF	; 255
   14fda:	8d 83       	std	Y+5, r24	; 0x05
   14fdc:	83 81       	ldd	r24, Z+3	; 0x03
   14fde:	86 ff       	sbrs	r24, 6
   14fe0:	02 c0       	rjmp	.+4      	; 0x14fe6 <SS80_send_status+0x60>
   14fe2:	92 e0       	ldi	r25, 0x02	; 2
   14fe4:	9e 83       	std	Y+6, r25	; 0x06
   14fe6:	82 ff       	sbrs	r24, 2
   14fe8:	03 c0       	rjmp	.+6      	; 0x14ff0 <SS80_send_status+0x6a>
   14fea:	9e 81       	ldd	r25, Y+6	; 0x06
   14fec:	91 60       	ori	r25, 0x01	; 1
   14fee:	9e 83       	std	Y+6, r25	; 0x06
   14ff0:	80 ff       	sbrs	r24, 0
   14ff2:	02 c0       	rjmp	.+4      	; 0x14ff8 <SS80_send_status+0x72>
   14ff4:	82 e0       	ldi	r24, 0x02	; 2
   14ff6:	88 87       	std	Y+8, r24	; 0x08
   14ff8:	83 81       	ldd	r24, Z+3	; 0x03
   14ffa:	81 ff       	sbrs	r24, 1
   14ffc:	03 c0       	rjmp	.+6      	; 0x15004 <SS80_send_status+0x7e>
   14ffe:	88 85       	ldd	r24, Y+8	; 0x08
   15000:	82 60       	ori	r24, 0x02	; 2
   15002:	88 87       	std	Y+8, r24	; 0x08
   15004:	83 81       	ldd	r24, Z+3	; 0x03
   15006:	83 ff       	sbrs	r24, 3
   15008:	02 c0       	rjmp	.+4      	; 0x1500e <SS80_send_status+0x88>
   1500a:	88 e0       	ldi	r24, 0x08	; 8
   1500c:	8a 87       	std	Y+10, r24	; 0x0a
   1500e:	83 81       	ldd	r24, Z+3	; 0x03
   15010:	94 81       	ldd	r25, Z+4	; 0x04
   15012:	89 2b       	or	r24, r25
   15014:	59 f4       	brne	.+22     	; 0x1502c <SS80_send_status+0xa6>
   15016:	07 81       	ldd	r16, Z+7	; 0x07
   15018:	10 85       	ldd	r17, Z+8	; 0x08
   1501a:	21 85       	ldd	r18, Z+9	; 0x09
   1501c:	32 85       	ldd	r19, Z+10	; 0x0a
   1501e:	46 e0       	ldi	r20, 0x06	; 6
   15020:	50 e0       	ldi	r21, 0x00	; 0
   15022:	6a e0       	ldi	r22, 0x0A	; 10
   15024:	70 e0       	ldi	r23, 0x00	; 0
   15026:	c7 01       	movw	r24, r14
   15028:	0e 94 ab 92 	call	0x12556	; 0x12556 <V2B_MSB>
{
#ifdef ESP8266
    hspi_RX((uint8_t *) data,count);
#endif
#ifdef AVR
    SPI0_RX((uint8_t *)data,count);
   1502c:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <SS80s>
   15030:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <SS80s+0x1>
   15034:	83 81       	ldd	r24, Z+3	; 0x03
   15036:	94 81       	ldd	r25, Z+4	; 0x04
   15038:	89 2b       	or	r24, r25
   1503a:	11 f0       	breq	.+4      	; 0x15040 <SS80_send_status+0xba>
   1503c:	81 e0       	ldi	r24, 0x01	; 1
   1503e:	82 83       	std	Z+2, r24	; 0x02
   15040:	80 e0       	ldi	r24, 0x00	; 0
   15042:	91 e0       	ldi	r25, 0x01	; 1
   15044:	99 8f       	std	Y+25, r25	; 0x19
   15046:	88 8f       	std	Y+24, r24	; 0x18
   15048:	ae 01       	movw	r20, r28
   1504a:	48 5e       	subi	r20, 0xE8	; 232
   1504c:	5f 4f       	sbci	r21, 0xFF	; 255
   1504e:	64 e1       	ldi	r22, 0x14	; 20
   15050:	70 e0       	ldi	r23, 0x00	; 0
   15052:	c7 01       	movw	r24, r14
   15054:	0e 94 ca 8b 	call	0x11794	; 0x11794 <gpib_write_str>
   15058:	44 97       	sbiw	r24, 0x14	; 20
   1505a:	71 f0       	breq	.+28     	; 0x15078 <SS80_send_status+0xf2>
   1505c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15060:	80 ff       	sbrs	r24, 0
   15062:	0a c0       	rjmp	.+20     	; 0x15078 <SS80_send_status+0xf2>
   15064:	8a e3       	ldi	r24, 0x3A	; 58
   15066:	95 e2       	ldi	r25, 0x25	; 37
   15068:	a0 e0       	ldi	r26, 0x00	; 0
   1506a:	ed b7       	in	r30, 0x3d	; 61
   1506c:	fe b7       	in	r31, 0x3e	; 62
   1506e:	81 83       	std	Z+1, r24	; 0x01
   15070:	92 83       	std	Z+2, r25	; 0x02
   15072:	a3 83       	std	Z+3, r26	; 0x03
   15074:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   15078:	88 8d       	ldd	r24, Y+24	; 0x18
   1507a:	99 8d       	ldd	r25, Y+25	; 0x19
   1507c:	88 27       	eor	r24, r24
   1507e:	90 7d       	andi	r25, 0xD0	; 208
   15080:	69 96       	adiw	r28, 0x19	; 25
   15082:	e6 e0       	ldi	r30, 0x06	; 6
   15084:	0c 94 f0 e3 	jmp	0x1c7e0	; 0x1c7e0 <__epilogue_restores__+0x18>

00015088 <SS80_describe>:
   15088:	a7 e0       	ldi	r26, 0x07	; 7
   1508a:	b0 e0       	ldi	r27, 0x00	; 0
   1508c:	ea e4       	ldi	r30, 0x4A	; 74
   1508e:	f8 ea       	ldi	r31, 0xA8	; 168
   15090:	0c 94 d8 e3 	jmp	0x1c7b0	; 0x1c7b0 <__prologue_saves__+0x20>
   15094:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15098:	85 ff       	sbrs	r24, 5
   1509a:	0a c0       	rjmp	.+20     	; 0x150b0 <SS80_describe+0x28>
   1509c:	89 e2       	ldi	r24, 0x29	; 41
   1509e:	95 e2       	ldi	r25, 0x25	; 37
   150a0:	a0 e0       	ldi	r26, 0x00	; 0
   150a2:	ed b7       	in	r30, 0x3d	; 61
   150a4:	fe b7       	in	r31, 0x3e	; 62
   150a6:	81 83       	std	Z+1, r24	; 0x01
   150a8:	92 83       	std	Z+2, r25	; 0x02
   150aa:	a3 83       	std	Z+3, r26	; 0x03
   150ac:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   150b0:	1f 82       	std	Y+7, r1	; 0x07
   150b2:	1e 82       	std	Y+6, r1	; 0x06
   150b4:	ce 01       	movw	r24, r28
   150b6:	04 96       	adiw	r24, 0x04	; 4
   150b8:	85 dd       	rcall	.-1270   	; 0x14bc4 <SS80ControllerPack>
   150ba:	6c 81       	ldd	r22, Y+4	; 0x04
   150bc:	7d 81       	ldd	r23, Y+5	; 0x05
   150be:	ae 01       	movw	r20, r28
   150c0:	4a 5f       	subi	r20, 0xFA	; 250
   150c2:	5f 4f       	sbci	r21, 0xFF	; 255
   150c4:	0e 94 ca 8b 	call	0x11794	; 0x11794 <gpib_write_str>
   150c8:	2c 81       	ldd	r18, Y+4	; 0x04
   150ca:	3d 81       	ldd	r19, Y+5	; 0x05
   150cc:	82 17       	cp	r24, r18
   150ce:	93 07       	cpc	r25, r19
   150d0:	39 f0       	breq	.+14     	; 0x150e0 <SS80_describe+0x58>
   150d2:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   150d6:	80 ff       	sbrs	r24, 0
   150d8:	3c c0       	rjmp	.+120    	; 0x15152 <SS80_describe+0xca>
   150da:	86 e0       	ldi	r24, 0x06	; 6
   150dc:	95 e2       	ldi	r25, 0x25	; 37
   150de:	31 c0       	rjmp	.+98     	; 0x15142 <SS80_describe+0xba>
   150e0:	1f 82       	std	Y+7, r1	; 0x07
   150e2:	1e 82       	std	Y+6, r1	; 0x06
   150e4:	ce 01       	movw	r24, r28
   150e6:	04 96       	adiw	r24, 0x04	; 4
   150e8:	a9 dd       	rcall	.-1198   	; 0x14c3c <SS80UnitPack>
   150ea:	6c 81       	ldd	r22, Y+4	; 0x04
   150ec:	7d 81       	ldd	r23, Y+5	; 0x05
   150ee:	ae 01       	movw	r20, r28
   150f0:	4a 5f       	subi	r20, 0xFA	; 250
   150f2:	5f 4f       	sbci	r21, 0xFF	; 255
   150f4:	0e 94 ca 8b 	call	0x11794	; 0x11794 <gpib_write_str>
   150f8:	2c 81       	ldd	r18, Y+4	; 0x04
   150fa:	3d 81       	ldd	r19, Y+5	; 0x05
   150fc:	82 17       	cp	r24, r18
   150fe:	93 07       	cpc	r25, r19
   15100:	39 f0       	breq	.+14     	; 0x15110 <SS80_describe+0x88>
   15102:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15106:	80 ff       	sbrs	r24, 0
   15108:	24 c0       	rjmp	.+72     	; 0x15152 <SS80_describe+0xca>
   1510a:	89 ee       	ldi	r24, 0xE9	; 233
   1510c:	94 e2       	ldi	r25, 0x24	; 36
   1510e:	19 c0       	rjmp	.+50     	; 0x15142 <SS80_describe+0xba>
   15110:	80 e0       	ldi	r24, 0x00	; 0
   15112:	91 e0       	ldi	r25, 0x01	; 1
   15114:	9f 83       	std	Y+7, r25	; 0x07
   15116:	8e 83       	std	Y+6, r24	; 0x06
   15118:	ce 01       	movw	r24, r28
   1511a:	04 96       	adiw	r24, 0x04	; 4
   1511c:	5b de       	rcall	.-842    	; 0x14dd4 <SS80VolumePack>
   1511e:	6c 81       	ldd	r22, Y+4	; 0x04
   15120:	7d 81       	ldd	r23, Y+5	; 0x05
   15122:	ae 01       	movw	r20, r28
   15124:	4a 5f       	subi	r20, 0xFA	; 250
   15126:	5f 4f       	sbci	r21, 0xFF	; 255
   15128:	0e 94 ca 8b 	call	0x11794	; 0x11794 <gpib_write_str>
   1512c:	2c 81       	ldd	r18, Y+4	; 0x04
   1512e:	3d 81       	ldd	r19, Y+5	; 0x05
   15130:	82 17       	cp	r24, r18
   15132:	93 07       	cpc	r25, r19
   15134:	99 f0       	breq	.+38     	; 0x1515c <SS80_describe+0xd4>
   15136:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1513a:	80 ff       	sbrs	r24, 0
   1513c:	0a c0       	rjmp	.+20     	; 0x15152 <SS80_describe+0xca>
   1513e:	8a ec       	ldi	r24, 0xCA	; 202
   15140:	94 e2       	ldi	r25, 0x24	; 36
   15142:	a0 e0       	ldi	r26, 0x00	; 0
   15144:	ed b7       	in	r30, 0x3d	; 61
   15146:	fe b7       	in	r31, 0x3e	; 62
   15148:	81 83       	std	Z+1, r24	; 0x01
   1514a:	92 83       	std	Z+2, r25	; 0x02
   1514c:	a3 83       	std	Z+3, r26	; 0x03
   1514e:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   15152:	8e 81       	ldd	r24, Y+6	; 0x06
   15154:	9f 81       	ldd	r25, Y+7	; 0x07
   15156:	88 27       	eor	r24, r24
   15158:	90 7d       	andi	r25, 0xD0	; 208
   1515a:	02 c0       	rjmp	.+4      	; 0x15160 <SS80_describe+0xd8>
   1515c:	80 e0       	ldi	r24, 0x00	; 0
   1515e:	90 e0       	ldi	r25, 0x00	; 0
   15160:	27 96       	adiw	r28, 0x07	; 7
   15162:	e2 e0       	ldi	r30, 0x02	; 2
   15164:	0c 94 f4 e3 	jmp	0x1c7e8	; 0x1c7e8 <__epilogue_restores__+0x20>

00015168 <SS80_Check_Unit>:
   15168:	00 d0       	rcall	.+0      	; 0x1516a <SS80_Check_Unit+0x2>
   1516a:	00 d0       	rcall	.+0      	; 0x1516c <SS80_Check_Unit+0x4>
   1516c:	1f 92       	push	r1
   1516e:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <SS80s>
   15172:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <SS80s+0x1>
   15176:	88 23       	and	r24, r24
   15178:	c9 f0       	breq	.+50     	; 0x151ac <SS80_Check_Unit+0x44>
   1517a:	8f 30       	cpi	r24, 0x0F	; 15
   1517c:	b9 f0       	breq	.+46     	; 0x151ac <SS80_Check_Unit+0x44>
   1517e:	23 81       	ldd	r18, Z+3	; 0x03
   15180:	34 81       	ldd	r19, Z+4	; 0x04
   15182:	20 64       	ori	r18, 0x40	; 64
   15184:	34 83       	std	Z+4, r19	; 0x04
   15186:	23 83       	std	Z+3, r18	; 0x03
   15188:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <debuglevel>
   1518c:	90 ff       	sbrs	r25, 0
   1518e:	0f c0       	rjmp	.+30     	; 0x151ae <SS80_Check_Unit+0x46>
   15190:	90 e0       	ldi	r25, 0x00	; 0
   15192:	ed b7       	in	r30, 0x3d	; 61
   15194:	fe b7       	in	r31, 0x3e	; 62
   15196:	95 83       	std	Z+5, r25	; 0x05
   15198:	84 83       	std	Z+4, r24	; 0x04
   1519a:	82 eb       	ldi	r24, 0xB2	; 178
   1519c:	94 e2       	ldi	r25, 0x24	; 36
   1519e:	a0 e0       	ldi	r26, 0x00	; 0
   151a0:	81 83       	std	Z+1, r24	; 0x01
   151a2:	92 83       	std	Z+2, r25	; 0x02
   151a4:	a3 83       	std	Z+3, r26	; 0x03
   151a6:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   151aa:	01 c0       	rjmp	.+2      	; 0x151ae <SS80_Check_Unit+0x46>
   151ac:	85 83       	std	Z+5, r24	; 0x05
   151ae:	0f 90       	pop	r0
   151b0:	0f 90       	pop	r0
   151b2:	0f 90       	pop	r0
   151b4:	0f 90       	pop	r0
   151b6:	0f 90       	pop	r0
   151b8:	08 95       	ret

000151ba <SS80_Check_Volume>:
   151ba:	00 d0       	rcall	.+0      	; 0x151bc <SS80_Check_Volume+0x2>
   151bc:	00 d0       	rcall	.+0      	; 0x151be <SS80_Check_Volume+0x4>
   151be:	1f 92       	push	r1
   151c0:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <SS80s>
   151c4:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <SS80s+0x1>
   151c8:	88 23       	and	r24, r24
   151ca:	b9 f0       	breq	.+46     	; 0x151fa <SS80_Check_Volume+0x40>
   151cc:	23 81       	ldd	r18, Z+3	; 0x03
   151ce:	34 81       	ldd	r19, Z+4	; 0x04
   151d0:	20 64       	ori	r18, 0x40	; 64
   151d2:	34 83       	std	Z+4, r19	; 0x04
   151d4:	23 83       	std	Z+3, r18	; 0x03
   151d6:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <debuglevel>
   151da:	90 ff       	sbrs	r25, 0
   151dc:	0f c0       	rjmp	.+30     	; 0x151fc <SS80_Check_Volume+0x42>
   151de:	90 e0       	ldi	r25, 0x00	; 0
   151e0:	ed b7       	in	r30, 0x3d	; 61
   151e2:	fe b7       	in	r31, 0x3e	; 62
   151e4:	95 83       	std	Z+5, r25	; 0x05
   151e6:	84 83       	std	Z+4, r24	; 0x04
   151e8:	88 e9       	ldi	r24, 0x98	; 152
   151ea:	94 e2       	ldi	r25, 0x24	; 36
   151ec:	a0 e0       	ldi	r26, 0x00	; 0
   151ee:	81 83       	std	Z+1, r24	; 0x01
   151f0:	92 83       	std	Z+2, r25	; 0x02
   151f2:	a3 83       	std	Z+3, r26	; 0x03
   151f4:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   151f8:	01 c0       	rjmp	.+2      	; 0x151fc <SS80_Check_Volume+0x42>
   151fa:	16 82       	std	Z+6, r1	; 0x06
   151fc:	0f 90       	pop	r0
   151fe:	0f 90       	pop	r0
   15200:	0f 90       	pop	r0
   15202:	0f 90       	pop	r0
   15204:	0f 90       	pop	r0
   15206:	08 95       	ret

00015208 <SS80_Command_State>:
   15208:	2f 92       	push	r2
   1520a:	3f 92       	push	r3
   1520c:	4f 92       	push	r4
   1520e:	6f 92       	push	r6
   15210:	7f 92       	push	r7
   15212:	8f 92       	push	r8
   15214:	af 92       	push	r10
   15216:	bf 92       	push	r11
   15218:	cf 92       	push	r12
   1521a:	ef 92       	push	r14
   1521c:	ff 92       	push	r15
   1521e:	0f 93       	push	r16
   15220:	1f 93       	push	r17
   15222:	cf 93       	push	r28
   15224:	df 93       	push	r29
   15226:	cd b7       	in	r28, 0x3d	; 61
   15228:	de b7       	in	r29, 0x3e	; 62
   1522a:	66 97       	sbiw	r28, 0x16	; 22
   1522c:	0f b6       	in	r0, 0x3f	; 63
   1522e:	f8 94       	cli
   15230:	de bf       	out	0x3e, r29	; 62
   15232:	0f be       	out	0x3f, r0	; 63
   15234:	cd bf       	out	0x3d, r28	; 61
   15236:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80p>
   1523a:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80p+0x1>
   1523e:	81 81       	ldd	r24, Z+1	; 0x01
   15240:	90 e0       	ldi	r25, 0x00	; 0
   15242:	0e 94 a6 86 	call	0x10d4c	; 0x10d4c <gpib_disable_PPR>
   15246:	80 e0       	ldi	r24, 0x00	; 0
   15248:	91 e0       	ldi	r25, 0x01	; 1
   1524a:	99 87       	std	Y+9, r25	; 0x09
   1524c:	88 87       	std	Y+8, r24	; 0x08
   1524e:	ae 01       	movw	r20, r28
   15250:	48 5f       	subi	r20, 0xF8	; 248
   15252:	5f 4f       	sbci	r21, 0xFF	; 255
   15254:	60 e0       	ldi	r22, 0x00	; 0
   15256:	72 e0       	ldi	r23, 0x02	; 2
   15258:	80 e8       	ldi	r24, 0x80	; 128
   1525a:	9c e1       	ldi	r25, 0x1C	; 28
   1525c:	0e 94 28 8b 	call	0x11650	; 0x11650 <gpib_read_str>
   15260:	9b 87       	std	Y+11, r25	; 0x0b
   15262:	8a 87       	std	Y+10, r24	; 0x0a
   15264:	88 85       	ldd	r24, Y+8	; 0x08
   15266:	99 85       	ldd	r25, Y+9	; 0x09
   15268:	9c 01       	movw	r18, r24
   1526a:	22 27       	eor	r18, r18
   1526c:	30 7d       	andi	r19, 0xD0	; 208
   1526e:	23 2b       	or	r18, r19
   15270:	79 f0       	breq	.+30     	; 0x15290 <SS80_Command_State+0x88>
   15272:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15276:	80 ff       	sbrs	r24, 0
   15278:	1e c2       	rjmp	.+1084   	; 0x156b6 <SS80_Command_State+0x4ae>
   1527a:	82 e7       	ldi	r24, 0x72	; 114
   1527c:	94 e2       	ldi	r25, 0x24	; 36
   1527e:	a0 e0       	ldi	r26, 0x00	; 0
   15280:	ed b7       	in	r30, 0x3d	; 61
   15282:	fe b7       	in	r31, 0x3e	; 62
   15284:	81 83       	std	Z+1, r24	; 0x01
   15286:	92 83       	std	Z+2, r25	; 0x02
   15288:	a3 83       	std	Z+3, r26	; 0x03
   1528a:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   1528e:	13 c2       	rjmp	.+1062   	; 0x156b6 <SS80_Command_State+0x4ae>
   15290:	2a 85       	ldd	r18, Y+10	; 0x0a
   15292:	3b 85       	ldd	r19, Y+11	; 0x0b
   15294:	23 2b       	or	r18, r19
   15296:	09 f4       	brne	.+2      	; 0x1529a <SS80_Command_State+0x92>
   15298:	13 c2       	rjmp	.+1062   	; 0x156c0 <SS80_Command_State+0x4b8>
   1529a:	90 fd       	sbrc	r25, 0
   1529c:	0e c0       	rjmp	.+28     	; 0x152ba <SS80_Command_State+0xb2>
   1529e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   152a2:	80 ff       	sbrs	r24, 0
   152a4:	0a c0       	rjmp	.+20     	; 0x152ba <SS80_Command_State+0xb2>
   152a6:	89 e5       	ldi	r24, 0x59	; 89
   152a8:	94 e2       	ldi	r25, 0x24	; 36
   152aa:	a0 e0       	ldi	r26, 0x00	; 0
   152ac:	ed b7       	in	r30, 0x3d	; 61
   152ae:	fe b7       	in	r31, 0x3e	; 62
   152b0:	81 83       	std	Z+1, r24	; 0x01
   152b2:	92 83       	std	Z+2, r25	; 0x02
   152b4:	a3 83       	std	Z+3, r26	; 0x03
   152b6:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   152ba:	e1 2c       	mov	r14, r1
   152bc:	f1 2c       	mov	r15, r1
   152be:	8d e5       	ldi	r24, 0x5D	; 93
   152c0:	93 e2       	ldi	r25, 0x23	; 35
   152c2:	9c 01       	movw	r18, r24
   152c4:	40 e0       	ldi	r20, 0x00	; 0
   152c6:	2e 87       	std	Y+14, r18	; 0x0e
   152c8:	3f 87       	std	Y+15, r19	; 0x0f
   152ca:	48 8b       	std	Y+16, r20	; 0x10
   152cc:	82 e8       	ldi	r24, 0x82	; 130
   152ce:	93 e2       	ldi	r25, 0x23	; 35
   152d0:	9c 01       	movw	r18, r24
   152d2:	40 e0       	ldi	r20, 0x00	; 0
   152d4:	29 8b       	std	Y+17, r18	; 0x11
   152d6:	3a 8b       	std	Y+18, r19	; 0x12
   152d8:	4b 8b       	std	Y+19, r20	; 0x13
   152da:	8c e9       	ldi	r24, 0x9C	; 156
   152dc:	93 e2       	ldi	r25, 0x23	; 35
   152de:	9c 01       	movw	r18, r24
   152e0:	40 e0       	ldi	r20, 0x00	; 0
   152e2:	2c 8b       	std	Y+20, r18	; 0x14
   152e4:	3d 8b       	std	Y+21, r19	; 0x15
   152e6:	4e 8b       	std	Y+22, r20	; 0x16
   152e8:	82 eb       	ldi	r24, 0xB2	; 178
   152ea:	93 e2       	ldi	r25, 0x23	; 35
   152ec:	3c 01       	movw	r6, r24
   152ee:	81 2c       	mov	r8, r1
   152f0:	80 ec       	ldi	r24, 0xC0	; 192
   152f2:	93 e2       	ldi	r25, 0x23	; 35
   152f4:	5c 01       	movw	r10, r24
   152f6:	c1 2c       	mov	r12, r1
   152f8:	8c ed       	ldi	r24, 0xDC	; 220
   152fa:	93 e2       	ldi	r25, 0x23	; 35
   152fc:	1c 01       	movw	r2, r24
   152fe:	41 2c       	mov	r4, r1
   15300:	2a 85       	ldd	r18, Y+10	; 0x0a
   15302:	3b 85       	ldd	r19, Y+11	; 0x0b
   15304:	87 01       	movw	r16, r14
   15306:	e2 16       	cp	r14, r18
   15308:	f3 06       	cpc	r15, r19
   1530a:	0c f0       	brlt	.+2      	; 0x1530e <SS80_Command_State+0x106>
   1530c:	b3 c1       	rjmp	.+870    	; 0x15674 <SS80_Command_State+0x46c>
   1530e:	0f 5f       	subi	r16, 0xFF	; 255
   15310:	1f 4f       	sbci	r17, 0xFF	; 255
   15312:	f7 01       	movw	r30, r14
   15314:	e0 58       	subi	r30, 0x80	; 128
   15316:	f3 4e       	sbci	r31, 0xE3	; 227
   15318:	80 81       	ld	r24, Z
   1531a:	28 2f       	mov	r18, r24
   1531c:	30 e0       	ldi	r19, 0x00	; 0
   1531e:	a9 01       	movw	r20, r18
   15320:	40 52       	subi	r20, 0x20	; 32
   15322:	51 09       	sbc	r21, r1
   15324:	40 31       	cpi	r20, 0x10	; 16
   15326:	51 05       	cpc	r21, r1
   15328:	98 f4       	brcc	.+38     	; 0x15350 <SS80_Command_State+0x148>
   1532a:	80 52       	subi	r24, 0x20	; 32
   1532c:	1d df       	rcall	.-454    	; 0x15168 <SS80_Check_Unit>
   1532e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15332:	85 ff       	sbrs	r24, 5
   15334:	9d c1       	rjmp	.+826    	; 0x15670 <SS80_Command_State+0x468>
   15336:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <SS80s>
   1533a:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <SS80s+0x1>
   1533e:	85 81       	ldd	r24, Z+5	; 0x05
   15340:	90 e0       	ldi	r25, 0x00	; 0
   15342:	ed b7       	in	r30, 0x3d	; 61
   15344:	fe b7       	in	r31, 0x3e	; 62
   15346:	95 83       	std	Z+5, r25	; 0x05
   15348:	84 83       	std	Z+4, r24	; 0x04
   1534a:	83 e4       	ldi	r24, 0x43	; 67
   1534c:	94 e2       	ldi	r25, 0x24	; 36
   1534e:	19 c0       	rjmp	.+50     	; 0x15382 <SS80_Command_State+0x17a>
   15350:	a9 01       	movw	r20, r18
   15352:	40 54       	subi	r20, 0x40	; 64
   15354:	51 09       	sbc	r21, r1
   15356:	40 31       	cpi	r20, 0x10	; 16
   15358:	51 05       	cpc	r21, r1
   1535a:	d0 f4       	brcc	.+52     	; 0x15390 <SS80_Command_State+0x188>
   1535c:	80 54       	subi	r24, 0x40	; 64
   1535e:	2d df       	rcall	.-422    	; 0x151ba <SS80_Check_Volume>
   15360:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15364:	85 ff       	sbrs	r24, 5
   15366:	84 c1       	rjmp	.+776    	; 0x15670 <SS80_Command_State+0x468>
   15368:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <SS80s>
   1536c:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <SS80s+0x1>
   15370:	86 81       	ldd	r24, Z+6	; 0x06
   15372:	90 e0       	ldi	r25, 0x00	; 0
   15374:	ed b7       	in	r30, 0x3d	; 61
   15376:	fe b7       	in	r31, 0x3e	; 62
   15378:	95 83       	std	Z+5, r25	; 0x05
   1537a:	84 83       	std	Z+4, r24	; 0x04
   1537c:	2a e2       	ldi	r18, 0x2A	; 42
   1537e:	34 e2       	ldi	r19, 0x24	; 36
   15380:	c9 01       	movw	r24, r18
   15382:	a0 e0       	ldi	r26, 0x00	; 0
   15384:	81 83       	std	Z+1, r24	; 0x01
   15386:	92 83       	std	Z+2, r25	; 0x02
   15388:	a3 83       	std	Z+3, r26	; 0x03
   1538a:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   1538e:	70 c1       	rjmp	.+736    	; 0x15670 <SS80_Command_State+0x468>
   15390:	21 15       	cp	r18, r1
   15392:	31 05       	cpc	r19, r1
   15394:	79 f4       	brne	.+30     	; 0x153b4 <SS80_Command_State+0x1ac>
   15396:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <SS80s>
   1539a:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <SS80s+0x1>
   1539e:	81 e0       	ldi	r24, 0x01	; 1
   153a0:	90 e0       	ldi	r25, 0x00	; 0
   153a2:	91 83       	std	Z+1, r25	; 0x01
   153a4:	80 83       	st	Z, r24
   153a6:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   153aa:	85 ff       	sbrs	r24, 5
   153ac:	63 c1       	rjmp	.+710    	; 0x15674 <SS80_Command_State+0x46c>
   153ae:	82 e1       	ldi	r24, 0x12	; 18
   153b0:	94 e2       	ldi	r25, 0x24	; 36
   153b2:	0f c0       	rjmp	.+30     	; 0x153d2 <SS80_Command_State+0x1ca>
   153b4:	22 30       	cpi	r18, 0x02	; 2
   153b6:	31 05       	cpc	r19, r1
   153b8:	a9 f4       	brne	.+42     	; 0x153e4 <SS80_Command_State+0x1dc>
   153ba:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <SS80s>
   153be:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <SS80s+0x1>
   153c2:	31 83       	std	Z+1, r19	; 0x01
   153c4:	20 83       	st	Z, r18
   153c6:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   153ca:	85 ff       	sbrs	r24, 5
   153cc:	53 c1       	rjmp	.+678    	; 0x15674 <SS80_Command_State+0x46c>
   153ce:	89 ef       	ldi	r24, 0xF9	; 249
   153d0:	93 e2       	ldi	r25, 0x23	; 35
   153d2:	a0 e0       	ldi	r26, 0x00	; 0
   153d4:	ed b7       	in	r30, 0x3d	; 61
   153d6:	fe b7       	in	r31, 0x3e	; 62
   153d8:	81 83       	std	Z+1, r24	; 0x01
   153da:	92 83       	std	Z+2, r25	; 0x02
   153dc:	a3 83       	std	Z+3, r26	; 0x03
   153de:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   153e2:	48 c1       	rjmp	.+656    	; 0x15674 <SS80_Command_State+0x46c>
   153e4:	20 31       	cpi	r18, 0x10	; 16
   153e6:	31 05       	cpc	r19, r1
   153e8:	b1 f5       	brne	.+108    	; 0x15456 <SS80_Command_State+0x24e>
   153ea:	20 91 03 19 	lds	r18, 0x1903	; 0x801903 <SS80s>
   153ee:	30 91 04 19 	lds	r19, 0x1904	; 0x801904 <SS80s+0x1>
   153f2:	3d 87       	std	Y+13, r19	; 0x0d
   153f4:	2c 87       	std	Y+12, r18	; 0x0c
   153f6:	46 e0       	ldi	r20, 0x06	; 6
   153f8:	50 e0       	ldi	r21, 0x00	; 0
   153fa:	b8 01       	movw	r22, r16
   153fc:	80 e8       	ldi	r24, 0x80	; 128
   153fe:	9c e1       	ldi	r25, 0x1C	; 28
   15400:	0e 94 d4 92 	call	0x125a8	; 0x125a8 <B2V_MSB>
   15404:	ec 85       	ldd	r30, Y+12	; 0x0c
   15406:	fd 85       	ldd	r31, Y+13	; 0x0d
   15408:	67 83       	std	Z+7, r22	; 0x07
   1540a:	70 87       	std	Z+8, r23	; 0x08
   1540c:	81 87       	std	Z+9, r24	; 0x09
   1540e:	92 87       	std	Z+10, r25	; 0x0a
   15410:	87 01       	movw	r16, r14
   15412:	09 5f       	subi	r16, 0xF9	; 249
   15414:	1f 4f       	sbci	r17, 0xFF	; 255
   15416:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1541a:	85 ff       	sbrs	r24, 5
   1541c:	29 c1       	rjmp	.+594    	; 0x15670 <SS80_Command_State+0x468>
   1541e:	20 91 03 19 	lds	r18, 0x1903	; 0x801903 <SS80s>
   15422:	30 91 04 19 	lds	r19, 0x1904	; 0x801904 <SS80s+0x1>
   15426:	80 91 05 19 	lds	r24, 0x1905	; 0x801905 <SS80p>
   1542a:	90 91 06 19 	lds	r25, 0x1906	; 0x801906 <SS80p+0x1>
   1542e:	fc 01       	movw	r30, r24
   15430:	a0 89       	ldd	r26, Z+16	; 0x10
   15432:	b1 89       	ldd	r27, Z+17	; 0x11
   15434:	f9 01       	movw	r30, r18
   15436:	27 81       	ldd	r18, Z+7	; 0x07
   15438:	30 85       	ldd	r19, Z+8	; 0x08
   1543a:	41 85       	ldd	r20, Z+9	; 0x09
   1543c:	52 85       	ldd	r21, Z+10	; 0x0a
   1543e:	0e 94 a8 e3 	call	0x1c750	; 0x1c750 <__muluhisi3>
   15442:	ed b7       	in	r30, 0x3d	; 61
   15444:	fe b7       	in	r31, 0x3e	; 62
   15446:	64 83       	std	Z+4, r22	; 0x04
   15448:	75 83       	std	Z+5, r23	; 0x05
   1544a:	86 83       	std	Z+6, r24	; 0x06
   1544c:	97 83       	std	Z+7, r25	; 0x07
   1544e:	21 82       	std	Z+1, r2	; 0x01
   15450:	32 82       	std	Z+2, r3	; 0x02
   15452:	43 82       	std	Z+3, r4	; 0x03
   15454:	2e c0       	rjmp	.+92     	; 0x154b2 <SS80_Command_State+0x2aa>
   15456:	28 31       	cpi	r18, 0x18	; 24
   15458:	31 05       	cpc	r19, r1
   1545a:	71 f5       	brne	.+92     	; 0x154b8 <SS80_Command_State+0x2b0>
   1545c:	20 91 03 19 	lds	r18, 0x1903	; 0x801903 <SS80s>
   15460:	30 91 04 19 	lds	r19, 0x1904	; 0x801904 <SS80s+0x1>
   15464:	3d 87       	std	Y+13, r19	; 0x0d
   15466:	2c 87       	std	Y+12, r18	; 0x0c
   15468:	44 e0       	ldi	r20, 0x04	; 4
   1546a:	50 e0       	ldi	r21, 0x00	; 0
   1546c:	b8 01       	movw	r22, r16
   1546e:	80 e8       	ldi	r24, 0x80	; 128
   15470:	9c e1       	ldi	r25, 0x1C	; 28
   15472:	0e 94 d4 92 	call	0x125a8	; 0x125a8 <B2V_MSB>
   15476:	ec 85       	ldd	r30, Y+12	; 0x0c
   15478:	fd 85       	ldd	r31, Y+13	; 0x0d
   1547a:	63 87       	std	Z+11, r22	; 0x0b
   1547c:	74 87       	std	Z+12, r23	; 0x0c
   1547e:	85 87       	std	Z+13, r24	; 0x0d
   15480:	96 87       	std	Z+14, r25	; 0x0e
   15482:	87 01       	movw	r16, r14
   15484:	0b 5f       	subi	r16, 0xFB	; 251
   15486:	1f 4f       	sbci	r17, 0xFF	; 255
   15488:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1548c:	85 ff       	sbrs	r24, 5
   1548e:	f0 c0       	rjmp	.+480    	; 0x15670 <SS80_Command_State+0x468>
   15490:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <SS80s>
   15494:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <SS80s+0x1>
   15498:	83 85       	ldd	r24, Z+11	; 0x0b
   1549a:	94 85       	ldd	r25, Z+12	; 0x0c
   1549c:	a5 85       	ldd	r26, Z+13	; 0x0d
   1549e:	b6 85       	ldd	r27, Z+14	; 0x0e
   154a0:	ed b7       	in	r30, 0x3d	; 61
   154a2:	fe b7       	in	r31, 0x3e	; 62
   154a4:	84 83       	std	Z+4, r24	; 0x04
   154a6:	95 83       	std	Z+5, r25	; 0x05
   154a8:	a6 83       	std	Z+6, r26	; 0x06
   154aa:	b7 83       	std	Z+7, r27	; 0x07
   154ac:	a1 82       	std	Z+1, r10	; 0x01
   154ae:	b2 82       	std	Z+2, r11	; 0x02
   154b0:	c3 82       	std	Z+3, r12	; 0x03
   154b2:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   154b6:	dc c0       	rjmp	.+440    	; 0x15670 <SS80_Command_State+0x468>
   154b8:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   154bc:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   154c0:	24 33       	cpi	r18, 0x34	; 52
   154c2:	31 05       	cpc	r19, r1
   154c4:	41 f4       	brne	.+16     	; 0x154d6 <SS80_Command_State+0x2ce>
   154c6:	85 ff       	sbrs	r24, 5
   154c8:	d3 c0       	rjmp	.+422    	; 0x15670 <SS80_Command_State+0x468>
   154ca:	ed b7       	in	r30, 0x3d	; 61
   154cc:	fe b7       	in	r31, 0x3e	; 62
   154ce:	61 82       	std	Z+1, r6	; 0x01
   154d0:	72 82       	std	Z+2, r7	; 0x02
   154d2:	83 82       	std	Z+3, r8	; 0x03
   154d4:	2b c0       	rjmp	.+86     	; 0x1552c <SS80_Command_State+0x324>
   154d6:	29 33       	cpi	r18, 0x39	; 57
   154d8:	31 05       	cpc	r19, r1
   154da:	49 f4       	brne	.+18     	; 0x154ee <SS80_Command_State+0x2e6>
   154dc:	87 01       	movw	r16, r14
   154de:	0d 5f       	subi	r16, 0xFD	; 253
   154e0:	1f 4f       	sbci	r17, 0xFF	; 255
   154e2:	85 ff       	sbrs	r24, 5
   154e4:	c5 c0       	rjmp	.+394    	; 0x15670 <SS80_Command_State+0x468>
   154e6:	2c 89       	ldd	r18, Y+20	; 0x14
   154e8:	3d 89       	ldd	r19, Y+21	; 0x15
   154ea:	4e 89       	ldd	r20, Y+22	; 0x16
   154ec:	1a c0       	rjmp	.+52     	; 0x15522 <SS80_Command_State+0x31a>
   154ee:	2b 33       	cpi	r18, 0x3B	; 59
   154f0:	31 05       	cpc	r19, r1
   154f2:	49 f4       	brne	.+18     	; 0x15506 <SS80_Command_State+0x2fe>
   154f4:	87 01       	movw	r16, r14
   154f6:	0e 5f       	subi	r16, 0xFE	; 254
   154f8:	1f 4f       	sbci	r17, 0xFF	; 255
   154fa:	85 ff       	sbrs	r24, 5
   154fc:	b9 c0       	rjmp	.+370    	; 0x15670 <SS80_Command_State+0x468>
   154fe:	29 89       	ldd	r18, Y+17	; 0x11
   15500:	3a 89       	ldd	r19, Y+18	; 0x12
   15502:	4b 89       	ldd	r20, Y+19	; 0x13
   15504:	0e c0       	rjmp	.+28     	; 0x15522 <SS80_Command_State+0x31a>
   15506:	28 34       	cpi	r18, 0x48	; 72
   15508:	31 05       	cpc	r19, r1
   1550a:	99 f4       	brne	.+38     	; 0x15532 <SS80_Command_State+0x32a>
   1550c:	87 01       	movw	r16, r14
   1550e:	0e 5f       	subi	r16, 0xFE	; 254
   15510:	1f 4f       	sbci	r17, 0xFF	; 255
   15512:	80 73       	andi	r24, 0x30	; 48
   15514:	99 27       	eor	r25, r25
   15516:	89 2b       	or	r24, r25
   15518:	09 f4       	brne	.+2      	; 0x1551c <SS80_Command_State+0x314>
   1551a:	aa c0       	rjmp	.+340    	; 0x15670 <SS80_Command_State+0x468>
   1551c:	2e 85       	ldd	r18, Y+14	; 0x0e
   1551e:	3f 85       	ldd	r19, Y+15	; 0x0f
   15520:	48 89       	ldd	r20, Y+16	; 0x10
   15522:	ed b7       	in	r30, 0x3d	; 61
   15524:	fe b7       	in	r31, 0x3e	; 62
   15526:	21 83       	std	Z+1, r18	; 0x01
   15528:	32 83       	std	Z+2, r19	; 0x02
   1552a:	43 83       	std	Z+3, r20	; 0x03
   1552c:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   15530:	9f c0       	rjmp	.+318    	; 0x15670 <SS80_Command_State+0x468>
   15532:	24 30       	cpi	r18, 0x04	; 4
   15534:	31 05       	cpc	r19, r1
   15536:	41 f4       	brne	.+16     	; 0x15548 <SS80_Command_State+0x340>
   15538:	80 73       	andi	r24, 0x30	; 48
   1553a:	99 27       	eor	r25, r25
   1553c:	89 2b       	or	r24, r25
   1553e:	09 f4       	brne	.+2      	; 0x15542 <SS80_Command_State+0x33a>
   15540:	99 c0       	rjmp	.+306    	; 0x15674 <SS80_Command_State+0x46c>
   15542:	8c e3       	ldi	r24, 0x3C	; 60
   15544:	93 e2       	ldi	r25, 0x23	; 35
   15546:	45 cf       	rjmp	.-374    	; 0x153d2 <SS80_Command_State+0x1ca>
   15548:	2e 30       	cpi	r18, 0x0E	; 14
   1554a:	31 05       	cpc	r19, r1
   1554c:	29 f4       	brne	.+10     	; 0x15558 <SS80_Command_State+0x350>
   1554e:	85 ff       	sbrs	r24, 5
   15550:	91 c0       	rjmp	.+290    	; 0x15674 <SS80_Command_State+0x46c>
   15552:	86 e2       	ldi	r24, 0x26	; 38
   15554:	93 e2       	ldi	r25, 0x23	; 35
   15556:	3d cf       	rjmp	.-390    	; 0x153d2 <SS80_Command_State+0x1ca>
   15558:	2f 30       	cpi	r18, 0x0F	; 15
   1555a:	31 05       	cpc	r19, r1
   1555c:	29 f4       	brne	.+10     	; 0x15568 <SS80_Command_State+0x360>
   1555e:	85 ff       	sbrs	r24, 5
   15560:	89 c0       	rjmp	.+274    	; 0x15674 <SS80_Command_State+0x46c>
   15562:	89 e0       	ldi	r24, 0x09	; 9
   15564:	93 e2       	ldi	r25, 0x23	; 35
   15566:	35 cf       	rjmp	.-406    	; 0x153d2 <SS80_Command_State+0x1ca>
   15568:	21 33       	cpi	r18, 0x31	; 49
   1556a:	31 05       	cpc	r19, r1
   1556c:	41 f4       	brne	.+16     	; 0x1557e <SS80_Command_State+0x376>
   1556e:	87 01       	movw	r16, r14
   15570:	0d 5f       	subi	r16, 0xFD	; 253
   15572:	1f 4f       	sbci	r17, 0xFF	; 255
   15574:	85 ff       	sbrs	r24, 5
   15576:	7e c0       	rjmp	.+252    	; 0x15674 <SS80_Command_State+0x46c>
   15578:	8d ee       	ldi	r24, 0xED	; 237
   1557a:	92 e2       	ldi	r25, 0x22	; 34
   1557c:	2a cf       	rjmp	.-428    	; 0x153d2 <SS80_Command_State+0x1ca>
   1557e:	25 33       	cpi	r18, 0x35	; 53
   15580:	31 05       	cpc	r19, r1
   15582:	69 f4       	brne	.+26     	; 0x1559e <SS80_Command_State+0x396>
   15584:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <SS80s>
   15588:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <SS80s+0x1>
   1558c:	24 e0       	ldi	r18, 0x04	; 4
   1558e:	30 e0       	ldi	r19, 0x00	; 0
   15590:	31 83       	std	Z+1, r19	; 0x01
   15592:	20 83       	st	Z, r18
   15594:	85 ff       	sbrs	r24, 5
   15596:	6e c0       	rjmp	.+220    	; 0x15674 <SS80_Command_State+0x46c>
   15598:	8c ed       	ldi	r24, 0xDC	; 220
   1559a:	92 e2       	ldi	r25, 0x22	; 34
   1559c:	1a cf       	rjmp	.-460    	; 0x153d2 <SS80_Command_State+0x1ca>
   1559e:	27 33       	cpi	r18, 0x37	; 55
   155a0:	31 05       	cpc	r19, r1
   155a2:	59 f4       	brne	.+22     	; 0x155ba <SS80_Command_State+0x3b2>
   155a4:	87 01       	movw	r16, r14
   155a6:	0d 5f       	subi	r16, 0xFD	; 253
   155a8:	1f 4f       	sbci	r17, 0xFF	; 255
   155aa:	80 73       	andi	r24, 0x30	; 48
   155ac:	99 27       	eor	r25, r25
   155ae:	89 2b       	or	r24, r25
   155b0:	09 f4       	brne	.+2      	; 0x155b4 <SS80_Command_State+0x3ac>
   155b2:	60 c0       	rjmp	.+192    	; 0x15674 <SS80_Command_State+0x46c>
   155b4:	8e eb       	ldi	r24, 0xBE	; 190
   155b6:	92 e2       	ldi	r25, 0x22	; 34
   155b8:	0c cf       	rjmp	.-488    	; 0x153d2 <SS80_Command_State+0x1ca>
   155ba:	2e 33       	cpi	r18, 0x3E	; 62
   155bc:	31 05       	cpc	r19, r1
   155be:	c1 f4       	brne	.+48     	; 0x155f0 <SS80_Command_State+0x3e8>
   155c0:	80 73       	andi	r24, 0x30	; 48
   155c2:	99 27       	eor	r25, r25
   155c4:	89 2b       	or	r24, r25
   155c6:	81 f0       	breq	.+32     	; 0x155e8 <SS80_Command_State+0x3e0>
   155c8:	8f e9       	ldi	r24, 0x9F	; 159
   155ca:	92 e2       	ldi	r25, 0x22	; 34
   155cc:	a0 e0       	ldi	r26, 0x00	; 0
   155ce:	ed b7       	in	r30, 0x3d	; 61
   155d0:	fe b7       	in	r31, 0x3e	; 62
   155d2:	81 83       	std	Z+1, r24	; 0x01
   155d4:	92 83       	std	Z+2, r25	; 0x02
   155d6:	a3 83       	std	Z+3, r26	; 0x03
   155d8:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   155dc:	69 e8       	ldi	r22, 0x89	; 137
   155de:	7f e0       	ldi	r23, 0x0F	; 15
   155e0:	c8 01       	movw	r24, r16
   155e2:	80 58       	subi	r24, 0x80	; 128
   155e4:	93 4e       	sbci	r25, 0xE3	; 227
   155e6:	6c dc       	rcall	.-1832   	; 0x14ec0 <SS80_display_extended_status>
   155e8:	87 01       	movw	r16, r14
   155ea:	07 5f       	subi	r16, 0xF7	; 247
   155ec:	1f 4f       	sbci	r17, 0xFF	; 255
   155ee:	42 c0       	rjmp	.+132    	; 0x15674 <SS80_Command_State+0x46c>
   155f0:	2c 34       	cpi	r18, 0x4C	; 76
   155f2:	31 05       	cpc	r19, r1
   155f4:	39 f4       	brne	.+14     	; 0x15604 <SS80_Command_State+0x3fc>
   155f6:	80 73       	andi	r24, 0x30	; 48
   155f8:	99 27       	eor	r25, r25
   155fa:	89 2b       	or	r24, r25
   155fc:	d9 f1       	breq	.+118    	; 0x15674 <SS80_Command_State+0x46c>
   155fe:	84 e8       	ldi	r24, 0x84	; 132
   15600:	92 e2       	ldi	r25, 0x22	; 34
   15602:	e7 ce       	rjmp	.-562    	; 0x153d2 <SS80_Command_State+0x1ca>
   15604:	2d 34       	cpi	r18, 0x4D	; 77
   15606:	31 05       	cpc	r19, r1
   15608:	39 f4       	brne	.+14     	; 0x15618 <SS80_Command_State+0x410>
   1560a:	80 73       	andi	r24, 0x30	; 48
   1560c:	99 27       	eor	r25, r25
   1560e:	89 2b       	or	r24, r25
   15610:	89 f1       	breq	.+98     	; 0x15674 <SS80_Command_State+0x46c>
   15612:	8b e6       	ldi	r24, 0x6B	; 107
   15614:	92 e2       	ldi	r25, 0x22	; 34
   15616:	dd ce       	rjmp	.-582    	; 0x153d2 <SS80_Command_State+0x1ca>
   15618:	2d 30       	cpi	r18, 0x0D	; 13
   1561a:	31 05       	cpc	r19, r1
   1561c:	69 f4       	brne	.+26     	; 0x15638 <SS80_Command_State+0x430>
   1561e:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <SS80s>
   15622:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <SS80s+0x1>
   15626:	23 e0       	ldi	r18, 0x03	; 3
   15628:	30 e0       	ldi	r19, 0x00	; 0
   1562a:	31 83       	std	Z+1, r19	; 0x01
   1562c:	20 83       	st	Z, r18
   1562e:	85 ff       	sbrs	r24, 5
   15630:	21 c0       	rjmp	.+66     	; 0x15674 <SS80_Command_State+0x46c>
   15632:	84 e5       	ldi	r24, 0x54	; 84
   15634:	92 e2       	ldi	r25, 0x22	; 34
   15636:	cd ce       	rjmp	.-614    	; 0x153d2 <SS80_Command_State+0x1ca>
   15638:	23 33       	cpi	r18, 0x33	; 51
   1563a:	31 05       	cpc	r19, r1
   1563c:	51 f4       	brne	.+20     	; 0x15652 <SS80_Command_State+0x44a>
   1563e:	87 01       	movw	r16, r14
   15640:	0c 5f       	subi	r16, 0xFC	; 252
   15642:	1f 4f       	sbci	r17, 0xFF	; 255
   15644:	80 73       	andi	r24, 0x30	; 48
   15646:	99 27       	eor	r25, r25
   15648:	89 2b       	or	r24, r25
   1564a:	a1 f0       	breq	.+40     	; 0x15674 <SS80_Command_State+0x46c>
   1564c:	83 e3       	ldi	r24, 0x33	; 51
   1564e:	92 e2       	ldi	r25, 0x22	; 34
   15650:	c0 ce       	rjmp	.-640    	; 0x153d2 <SS80_Command_State+0x1ca>
   15652:	80 ff       	sbrs	r24, 0
   15654:	28 c0       	rjmp	.+80     	; 0x156a6 <SS80_Command_State+0x49e>
   15656:	ed b7       	in	r30, 0x3d	; 61
   15658:	fe b7       	in	r31, 0x3e	; 62
   1565a:	35 83       	std	Z+5, r19	; 0x05
   1565c:	24 83       	std	Z+4, r18	; 0x04
   1565e:	83 e1       	ldi	r24, 0x13	; 19
   15660:	92 e2       	ldi	r25, 0x22	; 34
   15662:	a0 e0       	ldi	r26, 0x00	; 0
   15664:	81 83       	std	Z+1, r24	; 0x01
   15666:	92 83       	std	Z+2, r25	; 0x02
   15668:	a3 83       	std	Z+3, r26	; 0x03
   1566a:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   1566e:	02 c0       	rjmp	.+4      	; 0x15674 <SS80_Command_State+0x46c>
   15670:	78 01       	movw	r14, r16
   15672:	46 ce       	rjmp	.-884    	; 0x15300 <SS80_Command_State+0xf8>
   15674:	8a 85       	ldd	r24, Y+10	; 0x0a
   15676:	9b 85       	ldd	r25, Y+11	; 0x0b
   15678:	08 17       	cp	r16, r24
   1567a:	19 07       	cpc	r17, r25
   1567c:	a1 f0       	breq	.+40     	; 0x156a6 <SS80_Command_State+0x49e>
   1567e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15682:	80 ff       	sbrs	r24, 0
   15684:	10 c0       	rjmp	.+32     	; 0x156a6 <SS80_Command_State+0x49e>
   15686:	2a 85       	ldd	r18, Y+10	; 0x0a
   15688:	3b 85       	ldd	r19, Y+11	; 0x0b
   1568a:	ed b7       	in	r30, 0x3d	; 61
   1568c:	fe b7       	in	r31, 0x3e	; 62
   1568e:	37 83       	std	Z+7, r19	; 0x07
   15690:	26 83       	std	Z+6, r18	; 0x06
   15692:	15 83       	std	Z+5, r17	; 0x05
   15694:	04 83       	std	Z+4, r16	; 0x04
   15696:	8b ed       	ldi	r24, 0xDB	; 219
   15698:	91 e2       	ldi	r25, 0x21	; 33
   1569a:	a0 e0       	ldi	r26, 0x00	; 0
   1569c:	81 83       	std	Z+1, r24	; 0x01
   1569e:	92 83       	std	Z+2, r25	; 0x02
   156a0:	a3 83       	std	Z+3, r26	; 0x03
   156a2:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   156a6:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80p>
   156aa:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80p+0x1>
   156ae:	81 81       	ldd	r24, Z+1	; 0x01
   156b0:	90 e0       	ldi	r25, 0x00	; 0
   156b2:	0e 94 70 86 	call	0x10ce0	; 0x10ce0 <gpib_enable_PPR>
   156b6:	88 85       	ldd	r24, Y+8	; 0x08
   156b8:	99 85       	ldd	r25, Y+9	; 0x09
   156ba:	88 27       	eor	r24, r24
   156bc:	90 7d       	andi	r25, 0xD0	; 208
   156be:	02 c0       	rjmp	.+4      	; 0x156c4 <SS80_Command_State+0x4bc>
   156c0:	80 e0       	ldi	r24, 0x00	; 0
   156c2:	90 e0       	ldi	r25, 0x00	; 0
   156c4:	66 96       	adiw	r28, 0x16	; 22
   156c6:	0f b6       	in	r0, 0x3f	; 63
   156c8:	f8 94       	cli
   156ca:	de bf       	out	0x3e, r29	; 62
   156cc:	0f be       	out	0x3f, r0	; 63
   156ce:	cd bf       	out	0x3d, r28	; 61
   156d0:	df 91       	pop	r29
   156d2:	cf 91       	pop	r28
   156d4:	1f 91       	pop	r17
   156d6:	0f 91       	pop	r16
   156d8:	ff 90       	pop	r15
   156da:	ef 90       	pop	r14
   156dc:	cf 90       	pop	r12
   156de:	bf 90       	pop	r11
   156e0:	af 90       	pop	r10
   156e2:	8f 90       	pop	r8
   156e4:	7f 90       	pop	r7
   156e6:	6f 90       	pop	r6
   156e8:	4f 90       	pop	r4
   156ea:	3f 90       	pop	r3
   156ec:	2f 90       	pop	r2
   156ee:	08 95       	ret

000156f0 <SS80_cmd_seek>:
   156f0:	a7 e0       	ldi	r26, 0x07	; 7
   156f2:	b0 e0       	ldi	r27, 0x00	; 0
   156f4:	ee e7       	ldi	r30, 0x7E	; 126
   156f6:	fb ea       	ldi	r31, 0xAB	; 171
   156f8:	0c 94 ca e3 	jmp	0x1c794	; 0x1c794 <__prologue_saves__+0x4>
   156fc:	c0 91 03 19 	lds	r28, 0x1903	; 0x801903 <SS80s>
   15700:	d0 91 04 19 	lds	r29, 0x1904	; 0x801904 <SS80s+0x1>
   15704:	8f 80       	ldd	r8, Y+7	; 0x07
   15706:	98 84       	ldd	r9, Y+8	; 0x08
   15708:	a9 84       	ldd	r10, Y+9	; 0x09
   1570a:	ba 84       	ldd	r11, Y+10	; 0x0a
   1570c:	00 91 05 19 	lds	r16, 0x1905	; 0x801905 <SS80p>
   15710:	10 91 06 19 	lds	r17, 0x1906	; 0x801906 <SS80p+0x1>
   15714:	f8 01       	movw	r30, r16
   15716:	c0 88       	ldd	r12, Z+16	; 0x10
   15718:	d1 88       	ldd	r13, Z+17	; 0x11
   1571a:	e1 2c       	mov	r14, r1
   1571c:	f1 2c       	mov	r15, r1
   1571e:	6b 85       	ldd	r22, Y+11	; 0x0b
   15720:	7c 85       	ldd	r23, Y+12	; 0x0c
   15722:	8d 85       	ldd	r24, Y+13	; 0x0d
   15724:	9e 85       	ldd	r25, Y+14	; 0x0e
   15726:	a7 01       	movw	r20, r14
   15728:	96 01       	movw	r18, r12
   1572a:	0e 94 46 e3 	call	0x1c68c	; 0x1c68c <__udivmodsi4>
   1572e:	da 01       	movw	r26, r20
   15730:	c9 01       	movw	r24, r18
   15732:	88 0d       	add	r24, r8
   15734:	99 1d       	adc	r25, r9
   15736:	aa 1d       	adc	r26, r10
   15738:	bb 1d       	adc	r27, r11
   1573a:	f8 01       	movw	r30, r16
   1573c:	46 a0       	ldd	r4, Z+38	; 0x26
   1573e:	57 a0       	ldd	r5, Z+39	; 0x27
   15740:	60 a4       	ldd	r6, Z+40	; 0x28
   15742:	71 a4       	ldd	r7, Z+41	; 0x29
   15744:	40 91 c3 01 	lds	r20, 0x01C3	; 0x8001c3 <debuglevel>
   15748:	50 91 c4 01 	lds	r21, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1574c:	48 16       	cp	r4, r24
   1574e:	59 06       	cpc	r5, r25
   15750:	6a 06       	cpc	r6, r26
   15752:	7b 06       	cpc	r7, r27
   15754:	f0 f4       	brcc	.+60     	; 0x15792 <SS80_cmd_seek+0xa2>
   15756:	81 e0       	ldi	r24, 0x01	; 1
   15758:	8a 83       	std	Y+2, r24	; 0x02
   1575a:	8b 81       	ldd	r24, Y+3	; 0x03
   1575c:	9c 81       	ldd	r25, Y+4	; 0x04
   1575e:	84 60       	ori	r24, 0x04	; 4
   15760:	9c 83       	std	Y+4, r25	; 0x04
   15762:	8b 83       	std	Y+3, r24	; 0x03
///
/// @param[in] uart: uart number.
///
/// @return  Character count in receive buffer.
int uart_keyhit(uint8_t uart)
{
   15764:	40 ff       	sbrs	r20, 0
   15766:	31 c0       	rjmp	.+98     	; 0x157ca <SS80_cmd_seek+0xda>
   15768:	a0 89       	ldd	r26, Z+16	; 0x10
   1576a:	b1 89       	ldd	r27, Z+17	; 0x11
   1576c:	a5 01       	movw	r20, r10
   1576e:	94 01       	movw	r18, r8
   15770:	0e 94 a8 e3 	call	0x1c750	; 0x1c750 <__muluhisi3>
   15774:	ed b7       	in	r30, 0x3d	; 61
   15776:	fe b7       	in	r31, 0x3e	; 62
   15778:	64 83       	std	Z+4, r22	; 0x04
   1577a:	75 83       	std	Z+5, r23	; 0x05
   1577c:	86 83       	std	Z+6, r24	; 0x06
   1577e:	97 83       	std	Z+7, r25	; 0x07
   15780:	88 e9       	ldi	r24, 0x98	; 152
   15782:	90 e2       	ldi	r25, 0x20	; 32
   15784:	a0 e0       	ldi	r26, 0x00	; 0
   15786:	81 83       	std	Z+1, r24	; 0x01
   15788:	92 83       	std	Z+2, r25	; 0x02
   1578a:	a3 83       	std	Z+3, r26	; 0x03
   1578c:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   15790:	1c c0       	rjmp	.+56     	; 0x157ca <SS80_cmd_seek+0xda>
   15792:	ca 01       	movw	r24, r20
   15794:	80 72       	andi	r24, 0x20	; 32
   15796:	99 27       	eor	r25, r25
   15798:	45 ff       	sbrs	r20, 5
   1579a:	19 c0       	rjmp	.+50     	; 0x157ce <SS80_cmd_seek+0xde>
   1579c:	a5 01       	movw	r20, r10
   1579e:	94 01       	movw	r18, r8
   157a0:	c7 01       	movw	r24, r14
   157a2:	b6 01       	movw	r22, r12
   157a4:	0e 94 04 e3 	call	0x1c608	; 0x1c608 <__mulsi3>
   157a8:	ed b7       	in	r30, 0x3d	; 61
   157aa:	fe b7       	in	r31, 0x3e	; 62
   157ac:	64 83       	std	Z+4, r22	; 0x04
   157ae:	75 83       	std	Z+5, r23	; 0x05
   157b0:	86 83       	std	Z+6, r24	; 0x06
   157b2:	97 83       	std	Z+7, r25	; 0x07
   157b4:	84 e8       	ldi	r24, 0x84	; 132
   157b6:	90 e2       	ldi	r25, 0x20	; 32
   157b8:	a0 e0       	ldi	r26, 0x00	; 0
   157ba:	81 83       	std	Z+1, r24	; 0x01
   157bc:	92 83       	std	Z+2, r25	; 0x02
   157be:	a3 83       	std	Z+3, r26	; 0x03
   157c0:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   157c4:	80 e0       	ldi	r24, 0x00	; 0
   157c6:	90 e0       	ldi	r25, 0x00	; 0
   157c8:	02 c0       	rjmp	.+4      	; 0x157ce <SS80_cmd_seek+0xde>
   157ca:	81 e0       	ldi	r24, 0x01	; 1
   157cc:	90 e0       	ldi	r25, 0x00	; 0
   157ce:	cd b7       	in	r28, 0x3d	; 61
   157d0:	de b7       	in	r29, 0x3e	; 62
   157d2:	27 96       	adiw	r28, 0x07	; 7
   157d4:	e0 e1       	ldi	r30, 0x10	; 16
   157d6:	0c 94 e6 e3 	jmp	0x1c7cc	; 0x1c7cc <__epilogue_restores__+0x4>

000157da <SS80_locate_and_write>:
   157da:	a3 e1       	ldi	r26, 0x13	; 19
   157dc:	b0 e0       	ldi	r27, 0x00	; 0
   157de:	e3 ef       	ldi	r30, 0xF3	; 243
   157e0:	fb ea       	ldi	r31, 0xAB	; 171
   157e2:	0c 94 c8 e3 	jmp	0x1c790	; 0x1c790 <__prologue_saves__>
   157e6:	00 91 03 19 	lds	r16, 0x1903	; 0x801903 <SS80s>
   157ea:	10 91 04 19 	lds	r17, 0x1904	; 0x801904 <SS80s+0x1>
   157ee:	80 91 05 19 	lds	r24, 0x1905	; 0x801905 <SS80p>
   157f2:	90 91 06 19 	lds	r25, 0x1906	; 0x801906 <SS80p+0x1>
   157f6:	fc 01       	movw	r30, r24
   157f8:	a0 89       	ldd	r26, Z+16	; 0x10
   157fa:	b1 89       	ldd	r27, Z+17	; 0x11
   157fc:	f8 01       	movw	r30, r16
   157fe:	27 81       	ldd	r18, Z+7	; 0x07
    return ( uart_rx_count( uart ) );
   15800:	30 85       	ldd	r19, Z+8	; 0x08
}
   15802:	41 85       	ldd	r20, Z+9	; 0x09
   15804:	52 85       	ldd	r21, Z+10	; 0x0a
   15806:	0e 94 a8 e3 	call	0x1c750	; 0x1c750 <__muluhisi3>
   1580a:	4b 01       	movw	r8, r22
   1580c:	5c 01       	movw	r10, r24
   1580e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15812:	85 ff       	sbrs	r24, 5
   15814:	16 c0       	rjmp	.+44     	; 0x15842 <SS80_locate_and_write+0x68>
   15816:	83 85       	ldd	r24, Z+11	; 0x0b
   15818:	94 85       	ldd	r25, Z+12	; 0x0c
   1581a:	a5 85       	ldd	r26, Z+13	; 0x0d
   1581c:	b6 85       	ldd	r27, Z+14	; 0x0e
   1581e:	ed b7       	in	r30, 0x3d	; 61
   15820:	fe b7       	in	r31, 0x3e	; 62
   15822:	80 87       	std	Z+8, r24	; 0x08
   15824:	91 87       	std	Z+9, r25	; 0x09
   15826:	a2 87       	std	Z+10, r26	; 0x0a
   15828:	b3 87       	std	Z+11, r27	; 0x0b
   1582a:	84 82       	std	Z+4, r8	; 0x04
   1582c:	95 82       	std	Z+5, r9	; 0x05
   1582e:	a6 82       	std	Z+6, r10	; 0x06
   15830:	b7 82       	std	Z+7, r11	; 0x07
   15832:	89 e1       	ldi	r24, 0x19	; 25
   15834:	96 e2       	ldi	r25, 0x26	; 38
   15836:	a0 e0       	ldi	r26, 0x00	; 0
   15838:	81 83       	std	Z+1, r24	; 0x01
   1583a:	92 83       	std	Z+2, r25	; 0x02
   1583c:	a3 83       	std	Z+3, r26	; 0x03
   1583e:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   15842:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <SS80s>
   15846:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <SS80s+0x1>
   1584a:	12 82       	std	Z+2, r1	; 0x02
   1584c:	54 98       	cbi	0x0a, 4	; 10
   1584e:	4c 99       	sbic	0x09, 4	; 9
   15850:	03 c0       	rjmp	.+6      	; 0x15858 <SS80_locate_and_write+0x7e>
   15852:	80 e0       	ldi	r24, 0x00	; 0
   15854:	90 e1       	ldi	r25, 0x10	; 16
   15856:	4f c1       	rjmp	.+670    	; 0x15af6 <SS80_locate_and_write+0x31c>
   15858:	4b df       	rcall	.-362    	; 0x156f0 <SS80_cmd_seek>
   1585a:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <SS80s>
   1585e:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <SS80s+0x1>
   15862:	89 2b       	or	r24, r25
   15864:	41 f0       	breq	.+16     	; 0x15876 <SS80_locate_and_write+0x9c>
   15866:	83 81       	ldd	r24, Z+3	; 0x03
   15868:	94 81       	ldd	r25, Z+4	; 0x04
   1586a:	82 60       	ori	r24, 0x02	; 2
   1586c:	94 83       	std	Z+4, r25	; 0x04
   1586e:	83 83       	std	Z+3, r24	; 0x03
   15870:	01 e0       	ldi	r16, 0x01	; 1
   15872:	10 e0       	ldi	r17, 0x00	; 0
   15874:	02 c0       	rjmp	.+4      	; 0x1587a <SS80_locate_and_write+0xa0>
   15876:	00 e0       	ldi	r16, 0x00	; 0
   15878:	10 e0       	ldi	r17, 0x00	; 0
   1587a:	23 84       	ldd	r2, Z+11	; 0x0b
   1587c:	34 84       	ldd	r3, Z+12	; 0x0c
   1587e:	1d 86       	std	Y+13, r1	; 0x0d
   15880:	1c 86       	std	Y+12, r1	; 0x0c
   15882:	41 2c       	mov	r4, r1
   15884:	51 2c       	mov	r5, r1
   15886:	32 01       	movw	r6, r4
   15888:	8c ec       	ldi	r24, 0xCC	; 204
   1588a:	95 e2       	ldi	r25, 0x25	; 37
   1588c:	9c 01       	movw	r18, r24
   1588e:	40 e0       	ldi	r20, 0x00	; 0
   15890:	2e 87       	std	Y+14, r18	; 0x0e
   15892:	3f 87       	std	Y+15, r19	; 0x0f
   15894:	48 8b       	std	Y+16, r20	; 0x10
   15896:	82 ef       	ldi	r24, 0xF2	; 242
   15898:	95 e2       	ldi	r25, 0x25	; 37
   1589a:	9c 01       	movw	r18, r24
   1589c:	40 e0       	ldi	r20, 0x00	; 0
   1589e:	29 8b       	std	Y+17, r18	; 0x11
   158a0:	3a 8b       	std	Y+18, r19	; 0x12
   158a2:	4b 8b       	std	Y+19, r20	; 0x13
   158a4:	12 14       	cp	r1, r2
   158a6:	13 04       	cpc	r1, r3
   158a8:	0c f0       	brlt	.+2      	; 0x158ac <SS80_locate_and_write+0xd2>
   158aa:	f5 c0       	rjmp	.+490    	; 0x15a96 <SS80_locate_and_write+0x2bc>
   158ac:	54 98       	cbi	0x0a, 4	; 10
   158ae:	4c 9b       	sbis	0x09, 4	; 9
   158b0:	d0 cf       	rjmp	.-96     	; 0x15852 <SS80_locate_and_write+0x78>
   158b2:	71 01       	movw	r14, r2
   158b4:	31 e0       	ldi	r19, 0x01	; 1
   158b6:	23 16       	cp	r2, r19
   158b8:	33 06       	cpc	r3, r19
   158ba:	1c f0       	brlt	.+6      	; 0x158c2 <SS80_locate_and_write+0xe8>
   158bc:	e1 2c       	mov	r14, r1
   158be:	ff 24       	eor	r15, r15
   158c0:	f3 94       	inc	r15
   158c2:	e0 e8       	ldi	r30, 0x80	; 128
   158c4:	fc e1       	ldi	r31, 0x1C	; 28
   158c6:	20 e0       	ldi	r18, 0x00	; 0
   158c8:	32 e0       	ldi	r19, 0x02	; 2
   158ca:	11 92       	st	Z+, r1
   158cc:	21 50       	subi	r18, 0x01	; 1
   158ce:	30 40       	sbci	r19, 0x00	; 0
   158d0:	e1 f7       	brne	.-8      	; 0x158ca <SS80_locate_and_write+0xf0>
   158d2:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   158d6:	87 fd       	sbrc	r24, 7
   158d8:	0e 94 ae 85 	call	0x10b5c	; 0x10b5c <gpib_timer_elapsed_begin>
   158dc:	ae 01       	movw	r20, r28
   158de:	44 5f       	subi	r20, 0xF4	; 244
   158e0:	5f 4f       	sbci	r21, 0xFF	; 255
   158e2:	b7 01       	movw	r22, r14
   158e4:	80 e8       	ldi	r24, 0x80	; 128
   158e6:	9c e1       	ldi	r25, 0x1C	; 28
   158e8:	0e 94 28 8b 	call	0x11650	; 0x11650 <gpib_read_str>
   158ec:	6c 01       	movw	r12, r24
   158ee:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   158f2:	87 ff       	sbrs	r24, 7
   158f4:	04 c0       	rjmp	.+8      	; 0x158fe <SS80_locate_and_write+0x124>
   158f6:	85 ea       	ldi	r24, 0xA5	; 165
   158f8:	9f e0       	ldi	r25, 0x0F	; 15
   158fa:	0e 94 c0 85 	call	0x10b80	; 0x10b80 <gpib_timer_elapsed_end>
   158fe:	ce 14       	cp	r12, r14
   15900:	df 04       	cpc	r13, r15
   15902:	39 f1       	breq	.+78     	; 0x15952 <SS80_locate_and_write+0x178>
   15904:	8c 85       	ldd	r24, Y+12	; 0x0c
   15906:	9d 85       	ldd	r25, Y+13	; 0x0d
   15908:	9c 01       	movw	r18, r24
   1590a:	22 27       	eor	r18, r18
   1590c:	30 7d       	andi	r19, 0xD0	; 208
   1590e:	23 2b       	or	r18, r19
   15910:	d1 f0       	breq	.+52     	; 0x15946 <SS80_locate_and_write+0x16c>
   15912:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15916:	80 ff       	sbrs	r24, 0
   15918:	0a c0       	rjmp	.+20     	; 0x1592e <SS80_locate_and_write+0x154>
   1591a:	86 e0       	ldi	r24, 0x06	; 6
   1591c:	96 e2       	ldi	r25, 0x26	; 38
   1591e:	a0 e0       	ldi	r26, 0x00	; 0
   15920:	ed b7       	in	r30, 0x3d	; 61
   15922:	fe b7       	in	r31, 0x3e	; 62
   15924:	81 83       	std	Z+1, r24	; 0x01
   15926:	92 83       	std	Z+2, r25	; 0x02
   15928:	a3 83       	std	Z+3, r26	; 0x03
   1592a:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   1592e:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <SS80s>
   15932:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <SS80s+0x1>
   15936:	83 81       	ldd	r24, Z+3	; 0x03
   15938:	94 81       	ldd	r25, Z+4	; 0x04
   1593a:	82 60       	ori	r24, 0x02	; 2
   1593c:	94 83       	std	Z+4, r25	; 0x04
   1593e:	83 83       	std	Z+3, r24	; 0x03
   15940:	81 e0       	ldi	r24, 0x01	; 1
   15942:	82 83       	std	Z+2, r24	; 0x02
   15944:	99 c0       	rjmp	.+306    	; 0x15a78 <SS80_locate_and_write+0x29e>
   15946:	c1 14       	cp	r12, r1
   15948:	d1 04       	cpc	r13, r1
   1594a:	09 f0       	breq	.+2      	; 0x1594e <SS80_locate_and_write+0x174>
   1594c:	d0 c0       	rjmp	.+416    	; 0x15aee <SS80_locate_and_write+0x314>
   1594e:	90 fd       	sbrc	r25, 0
   15950:	93 c0       	rjmp	.+294    	; 0x15a78 <SS80_locate_and_write+0x29e>
   15952:	01 15       	cp	r16, r1
   15954:	11 05       	cpc	r17, r1
   15956:	09 f0       	breq	.+2      	; 0x1595a <SS80_locate_and_write+0x180>
   15958:	84 c0       	rjmp	.+264    	; 0x15a62 <SS80_locate_and_write+0x288>
   1595a:	c1 14       	cp	r12, r1
   1595c:	d1 04       	cpc	r13, r1
   1595e:	09 f4       	brne	.+2      	; 0x15962 <SS80_locate_and_write+0x188>
   15960:	82 c0       	rjmp	.+260    	; 0x15a66 <SS80_locate_and_write+0x28c>
   15962:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15966:	86 fd       	sbrc	r24, 6
   15968:	0e 94 ae 85 	call	0x10b5c	; 0x10b5c <gpib_timer_elapsed_begin>
   1596c:	e0 90 03 19 	lds	r14, 0x1903	; 0x801903 <SS80s>
   15970:	f0 90 04 19 	lds	r15, 0x1904	; 0x801904 <SS80s+0x1>
   15974:	f3 e0       	ldi	r31, 0x03	; 3
   15976:	ef 0e       	add	r14, r31
   15978:	f1 1c       	adc	r15, r1
   1597a:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80p>
   1597e:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80p+0x1>
   15982:	86 01       	movw	r16, r12
   15984:	20 e8       	ldi	r18, 0x80	; 128
   15986:	3c e1       	ldi	r19, 0x1C	; 28
   15988:	b5 01       	movw	r22, r10
   1598a:	a4 01       	movw	r20, r8
   1598c:	82 81       	ldd	r24, Z+2	; 0x02
   1598e:	93 81       	ldd	r25, Z+3	; 0x03
   15990:	0e 94 57 85 	call	0x10aae	; 0x10aae <dbf_open_write>
   15994:	7c 01       	movw	r14, r24
   15996:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1599a:	86 ff       	sbrs	r24, 6
   1599c:	04 c0       	rjmp	.+8      	; 0x159a6 <SS80_locate_and_write+0x1cc>
   1599e:	8f ea       	ldi	r24, 0xAF	; 175
   159a0:	9f e0       	ldi	r25, 0x0F	; 15
   159a2:	0e 94 c0 85 	call	0x10b80	; 0x10b80 <gpib_timer_elapsed_end>
   159a6:	ce 14       	cp	r12, r14
   159a8:	df 04       	cpc	r13, r15
   159aa:	39 f1       	breq	.+78     	; 0x159fa <SS80_locate_and_write+0x220>
   159ac:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <SS80s>
   159b0:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <SS80s+0x1>
   159b4:	83 81       	ldd	r24, Z+3	; 0x03
   159b6:	94 81       	ldd	r25, Z+4	; 0x04
   159b8:	82 60       	ori	r24, 0x02	; 2
   159ba:	94 83       	std	Z+4, r25	; 0x04
   159bc:	83 83       	std	Z+3, r24	; 0x03
   159be:	0e 94 d2 70 	call	0xe1a4	; 0xe1a4 <mmc_wp_status>
   159c2:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <SS80s>
   159c6:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <SS80s+0x1>
   159ca:	89 2b       	or	r24, r25
   159cc:	29 f0       	breq	.+10     	; 0x159d8 <SS80_locate_and_write+0x1fe>
   159ce:	83 81       	ldd	r24, Z+3	; 0x03
   159d0:	94 81       	ldd	r25, Z+4	; 0x04
   159d2:	88 60       	ori	r24, 0x08	; 8
   159d4:	94 83       	std	Z+4, r25	; 0x04
   159d6:	83 83       	std	Z+3, r24	; 0x03
   159d8:	21 e0       	ldi	r18, 0x01	; 1
   159da:	22 83       	std	Z+2, r18	; 0x02
   159dc:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   159e0:	80 ff       	sbrs	r24, 0
   159e2:	27 c0       	rjmp	.+78     	; 0x15a32 <SS80_locate_and_write+0x258>
   159e4:	89 89       	ldd	r24, Y+17	; 0x11
   159e6:	9a 89       	ldd	r25, Y+18	; 0x12
   159e8:	ab 89       	ldd	r26, Y+19	; 0x13
   159ea:	ed b7       	in	r30, 0x3d	; 61
   159ec:	fe b7       	in	r31, 0x3e	; 62
   159ee:	81 83       	std	Z+1, r24	; 0x01
   159f0:	92 83       	std	Z+2, r25	; 0x02
   159f2:	a3 83       	std	Z+3, r26	; 0x03
   159f4:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   159f8:	1c c0       	rjmp	.+56     	; 0x15a32 <SS80_locate_and_write+0x258>
   159fa:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   159fe:	85 ff       	sbrs	r24, 5
   15a00:	0c c0       	rjmp	.+24     	; 0x15a1a <SS80_locate_and_write+0x240>
   15a02:	ed b7       	in	r30, 0x3d	; 61
   15a04:	fe b7       	in	r31, 0x3e	; 62
   15a06:	d5 82       	std	Z+5, r13	; 0x05
   15a08:	c4 82       	std	Z+4, r12	; 0x04
   15a0a:	2e 85       	ldd	r18, Y+14	; 0x0e
   15a0c:	3f 85       	ldd	r19, Y+15	; 0x0f
   15a0e:	48 89       	ldd	r20, Y+16	; 0x10
   15a10:	21 83       	std	Z+1, r18	; 0x01
   15a12:	32 83       	std	Z+2, r19	; 0x02
   15a14:	43 83       	std	Z+3, r20	; 0x03
   15a16:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   15a1a:	c6 01       	movw	r24, r12
   15a1c:	0d 2c       	mov	r0, r13
   15a1e:	00 0c       	add	r0, r0
   15a20:	aa 0b       	sbc	r26, r26
   15a22:	bb 0b       	sbc	r27, r27
   15a24:	88 0e       	add	r8, r24
   15a26:	99 1e       	adc	r9, r25
   15a28:	aa 1e       	adc	r10, r26
   15a2a:	bb 1e       	adc	r11, r27
   15a2c:	00 e0       	ldi	r16, 0x00	; 0
   15a2e:	10 e0       	ldi	r17, 0x00	; 0
   15a30:	05 c0       	rjmp	.+10     	; 0x15a3c <SS80_locate_and_write+0x262>
   15a32:	ec 14       	cp	r14, r12
   15a34:	fd 04       	cpc	r15, r13
   15a36:	64 f0       	brlt	.+24     	; 0x15a50 <SS80_locate_and_write+0x276>
   15a38:	01 e0       	ldi	r16, 0x01	; 1
   15a3a:	10 e0       	ldi	r17, 0x00	; 0
   15a3c:	c7 01       	movw	r24, r14
   15a3e:	0f 2c       	mov	r0, r15
   15a40:	00 0c       	add	r0, r0
   15a42:	aa 0b       	sbc	r26, r26
   15a44:	bb 0b       	sbc	r27, r27
   15a46:	48 0e       	add	r4, r24
   15a48:	59 1e       	adc	r5, r25
   15a4a:	6a 1e       	adc	r6, r26
   15a4c:	7b 1e       	adc	r7, r27
   15a4e:	0b c0       	rjmp	.+22     	; 0x15a66 <SS80_locate_and_write+0x28c>
   15a50:	c6 01       	movw	r24, r12
   15a52:	0d 2c       	mov	r0, r13
   15a54:	00 0c       	add	r0, r0
   15a56:	aa 0b       	sbc	r26, r26
   15a58:	bb 0b       	sbc	r27, r27
   15a5a:	48 0e       	add	r4, r24
   15a5c:	59 1e       	adc	r5, r25
   15a5e:	6a 1e       	adc	r6, r26
   15a60:	7b 1e       	adc	r7, r27
   15a62:	01 e0       	ldi	r16, 0x01	; 1
   15a64:	10 e0       	ldi	r17, 0x00	; 0
   15a66:	2c 18       	sub	r2, r12
   15a68:	3d 08       	sbc	r3, r13
   15a6a:	8c 85       	ldd	r24, Y+12	; 0x0c
   15a6c:	9d 85       	ldd	r25, Y+13	; 0x0d
   15a6e:	90 ff       	sbrs	r25, 0
   15a70:	19 cf       	rjmp	.-462    	; 0x158a4 <SS80_locate_and_write+0xca>
   15a72:	12 14       	cp	r1, r2
   15a74:	13 04       	cpc	r1, r3
   15a76:	7c f4       	brge	.+30     	; 0x15a96 <SS80_locate_and_write+0x2bc>
   15a78:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15a7c:	80 ff       	sbrs	r24, 0
   15a7e:	1d c0       	rjmp	.+58     	; 0x15aba <SS80_locate_and_write+0x2e0>
   15a80:	84 ea       	ldi	r24, 0xA4	; 164
   15a82:	95 e2       	ldi	r25, 0x25	; 37
   15a84:	a0 e0       	ldi	r26, 0x00	; 0
   15a86:	ed b7       	in	r30, 0x3d	; 61
   15a88:	fe b7       	in	r31, 0x3e	; 62
   15a8a:	81 83       	std	Z+1, r24	; 0x01
   15a8c:	92 83       	std	Z+2, r25	; 0x02
   15a8e:	a3 83       	std	Z+3, r26	; 0x03
   15a90:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   15a94:	12 c0       	rjmp	.+36     	; 0x15aba <SS80_locate_and_write+0x2e0>
   15a96:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15a9a:	85 ff       	sbrs	r24, 5
   15a9c:	0e c0       	rjmp	.+28     	; 0x15aba <SS80_locate_and_write+0x2e0>
   15a9e:	ed b7       	in	r30, 0x3d	; 61
   15aa0:	fe b7       	in	r31, 0x3e	; 62
   15aa2:	44 82       	std	Z+4, r4	; 0x04
   15aa4:	55 82       	std	Z+5, r5	; 0x05
   15aa6:	66 82       	std	Z+6, r6	; 0x06
   15aa8:	77 82       	std	Z+7, r7	; 0x07
   15aaa:	89 e7       	ldi	r24, 0x79	; 121
   15aac:	95 e2       	ldi	r25, 0x25	; 37
   15aae:	a0 e0       	ldi	r26, 0x00	; 0
   15ab0:	81 83       	std	Z+1, r24	; 0x01
   15ab2:	92 83       	std	Z+2, r25	; 0x02
   15ab4:	a3 83       	std	Z+3, r26	; 0x03
   15ab6:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   15aba:	00 91 03 19 	lds	r16, 0x1903	; 0x801903 <SS80s>
   15abe:	10 91 04 19 	lds	r17, 0x1904	; 0x801904 <SS80s+0x1>
   15ac2:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80p>
   15ac6:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80p+0x1>
   15aca:	20 89       	ldd	r18, Z+16	; 0x10
   15acc:	31 89       	ldd	r19, Z+17	; 0x11
   15ace:	40 e0       	ldi	r20, 0x00	; 0
   15ad0:	50 e0       	ldi	r21, 0x00	; 0
   15ad2:	c5 01       	movw	r24, r10
   15ad4:	b4 01       	movw	r22, r8
   15ad6:	0e 94 46 e3 	call	0x1c68c	; 0x1c68c <__udivmodsi4>
   15ada:	f8 01       	movw	r30, r16
   15adc:	27 83       	std	Z+7, r18	; 0x07
   15ade:	30 87       	std	Z+8, r19	; 0x08
   15ae0:	41 87       	std	Z+9, r20	; 0x09
   15ae2:	52 87       	std	Z+10, r21	; 0x0a
   15ae4:	8c 85       	ldd	r24, Y+12	; 0x0c
   15ae6:	9d 85       	ldd	r25, Y+13	; 0x0d
   15ae8:	88 27       	eor	r24, r24
   15aea:	90 7d       	andi	r25, 0xD0	; 208
   15aec:	04 c0       	rjmp	.+8      	; 0x15af6 <SS80_locate_and_write+0x31c>
   15aee:	01 2b       	or	r16, r17
   15af0:	09 f4       	brne	.+2      	; 0x15af4 <SS80_locate_and_write+0x31a>
   15af2:	37 cf       	rjmp	.-402    	; 0x15962 <SS80_locate_and_write+0x188>
   15af4:	b6 cf       	rjmp	.-148    	; 0x15a62 <SS80_locate_and_write+0x288>
   15af6:	63 96       	adiw	r28, 0x13	; 19
   15af8:	e2 e1       	ldi	r30, 0x12	; 18
   15afa:	0c 94 e4 e3 	jmp	0x1c7c8	; 0x1c7c8 <__epilogue_restores__>

00015afe <SS80_Report>:
   15afe:	a8 e0       	ldi	r26, 0x08	; 8
   15b00:	b0 e0       	ldi	r27, 0x00	; 0
   15b02:	e5 e8       	ldi	r30, 0x85	; 133
   15b04:	fd ea       	ldi	r31, 0xAD	; 173
   15b06:	0c 94 d8 e3 	jmp	0x1c7b0	; 0x1c7b0 <__prologue_saves__+0x20>
   15b0a:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <SS80s>
   15b0e:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <SS80s+0x1>
   15b12:	82 81       	ldd	r24, Z+2	; 0x02
   15b14:	88 87       	std	Y+8, r24	; 0x08
   15b16:	80 e0       	ldi	r24, 0x00	; 0
   15b18:	91 e0       	ldi	r25, 0x01	; 1
   15b1a:	9f 83       	std	Y+7, r25	; 0x07
   15b1c:	8e 83       	std	Y+6, r24	; 0x06
   15b1e:	ae 01       	movw	r20, r28
   15b20:	4a 5f       	subi	r20, 0xFA	; 250
   15b22:	5f 4f       	sbci	r21, 0xFF	; 255
   15b24:	61 e0       	ldi	r22, 0x01	; 1
   15b26:	70 e0       	ldi	r23, 0x00	; 0
   15b28:	ce 01       	movw	r24, r28
   15b2a:	08 96       	adiw	r24, 0x08	; 8
   15b2c:	0e 94 ca 8b 	call	0x11794	; 0x11794 <gpib_write_str>
   15b30:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   15b34:	01 97       	sbiw	r24, 0x01	; 1
   15b36:	89 f0       	breq	.+34     	; 0x15b5a <SS80_Report+0x5c>
   15b38:	20 ff       	sbrs	r18, 0
   15b3a:	0a c0       	rjmp	.+20     	; 0x15b50 <SS80_Report+0x52>
   15b3c:	8a e6       	ldi	r24, 0x6A	; 106
   15b3e:	90 e2       	ldi	r25, 0x20	; 32
   15b40:	a0 e0       	ldi	r26, 0x00	; 0
   15b42:	ed b7       	in	r30, 0x3d	; 61
   15b44:	fe b7       	in	r31, 0x3e	; 62
   15b46:	81 83       	std	Z+1, r24	; 0x01
   15b48:	92 83       	std	Z+2, r25	; 0x02
   15b4a:	a3 83       	std	Z+3, r26	; 0x03
   15b4c:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   15b50:	8e 81       	ldd	r24, Y+6	; 0x06
   15b52:	9f 81       	ldd	r25, Y+7	; 0x07
   15b54:	88 27       	eor	r24, r24
   15b56:	90 7d       	andi	r25, 0xD0	; 208
   15b58:	1b c0       	rjmp	.+54     	; 0x15b90 <SS80_Report+0x92>
   15b5a:	25 ff       	sbrs	r18, 5
   15b5c:	12 c0       	rjmp	.+36     	; 0x15b82 <SS80_Report+0x84>
   15b5e:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <SS80s>
   15b62:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <SS80s+0x1>
   15b66:	82 81       	ldd	r24, Z+2	; 0x02
   15b68:	90 e0       	ldi	r25, 0x00	; 0
   15b6a:	ed b7       	in	r30, 0x3d	; 61
   15b6c:	fe b7       	in	r31, 0x3e	; 62
   15b6e:	95 83       	std	Z+5, r25	; 0x05
   15b70:	84 83       	std	Z+4, r24	; 0x04
   15b72:	87 e5       	ldi	r24, 0x57	; 87
   15b74:	90 e2       	ldi	r25, 0x20	; 32
   15b76:	a0 e0       	ldi	r26, 0x00	; 0
   15b78:	81 83       	std	Z+1, r24	; 0x01
   15b7a:	92 83       	std	Z+2, r25	; 0x02
   15b7c:	a3 83       	std	Z+3, r26	; 0x03
   15b7e:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   15b82:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <SS80s>
   15b86:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <SS80s+0x1>
   15b8a:	12 82       	std	Z+2, r1	; 0x02
   15b8c:	80 e0       	ldi	r24, 0x00	; 0
   15b8e:	90 e0       	ldi	r25, 0x00	; 0
   15b90:	28 96       	adiw	r28, 0x08	; 8
   15b92:	e2 e0       	ldi	r30, 0x02	; 2
   15b94:	0c 94 f4 e3 	jmp	0x1c7e8	; 0x1c7e8 <__epilogue_restores__+0x20>

00015b98 <Clear_Common>:
   15b98:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <SS80s>
   15b9c:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <SS80s+0x1>
   15ba0:	25 81       	ldd	r18, Z+5	; 0x05
   15ba2:	30 e0       	ldi	r19, 0x00	; 0
   15ba4:	28 17       	cp	r18, r24
   15ba6:	39 07       	cpc	r19, r25
   15ba8:	19 f0       	breq	.+6      	; 0x15bb0 <Clear_Common+0x18>
   15baa:	0f 97       	sbiw	r24, 0x0f	; 15
   15bac:	99 f4       	brne	.+38     	; 0x15bd4 <Clear_Common+0x3c>
   15bae:	03 c0       	rjmp	.+6      	; 0x15bb6 <Clear_Common+0x1e>
   15bb0:	2f 30       	cpi	r18, 0x0F	; 15
   15bb2:	31 05       	cpc	r19, r1
   15bb4:	09 f4       	brne	.+2      	; 0x15bb8 <Clear_Common+0x20>
   15bb6:	15 82       	std	Z+5, r1	; 0x05
   15bb8:	16 82       	std	Z+6, r1	; 0x06
   15bba:	17 82       	std	Z+7, r1	; 0x07
   15bbc:	10 86       	std	Z+8, r1	; 0x08
   15bbe:	11 86       	std	Z+9, r1	; 0x09
   15bc0:	12 86       	std	Z+10, r1	; 0x0a
   15bc2:	13 86       	std	Z+11, r1	; 0x0b
   15bc4:	14 86       	std	Z+12, r1	; 0x0c
   15bc6:	15 86       	std	Z+13, r1	; 0x0d
   15bc8:	16 86       	std	Z+14, r1	; 0x0e
   15bca:	11 82       	std	Z+1, r1	; 0x01
   15bcc:	10 82       	st	Z, r1
   15bce:	14 82       	std	Z+4, r1	; 0x04
   15bd0:	13 82       	std	Z+3, r1	; 0x03
   15bd2:	12 82       	std	Z+2, r1	; 0x02
   15bd4:	08 95       	ret

00015bd6 <SS80_init>:
   15bd6:	a5 e0       	ldi	r26, 0x05	; 5
   15bd8:	b0 e0       	ldi	r27, 0x00	; 0
   15bda:	e1 ef       	ldi	r30, 0xF1	; 241
   15bdc:	fd ea       	ldi	r31, 0xAD	; 173
   15bde:	0c 94 d2 e3 	jmp	0x1c7a4	; 0x1c7a4 <__prologue_saves__+0x14>
   15be2:	03 e6       	ldi	r16, 0x63	; 99
   15be4:	10 e2       	ldi	r17, 0x20	; 32
   15be6:	cb e0       	ldi	r28, 0x0B	; 11
   15be8:	d0 e0       	ldi	r29, 0x00	; 0
   15bea:	82 e0       	ldi	r24, 0x02	; 2
   15bec:	f8 2e       	mov	r15, r24
   15bee:	82 e2       	ldi	r24, 0x22	; 34
   15bf0:	97 e2       	ldi	r25, 0x27	; 39
   15bf2:	6c 01       	movw	r12, r24
   15bf4:	e1 2c       	mov	r14, r1
   15bf6:	f8 01       	movw	r30, r16
   15bf8:	80 81       	ld	r24, Z
   15bfa:	83 30       	cpi	r24, 0x03	; 3
   15bfc:	29 f5       	brne	.+74     	; 0x15c48 <SS80_init+0x72>
   15bfe:	ce 01       	movw	r24, r28
   15c00:	0e 94 7d 93 	call	0x126fa	; 0x126fa <set_active_device>
   15c04:	89 2b       	or	r24, r25
   15c06:	01 f1       	breq	.+64     	; 0x15c48 <SS80_init+0x72>
   15c08:	8f e0       	ldi	r24, 0x0F	; 15
   15c0a:	90 e0       	ldi	r25, 0x00	; 0
   15c0c:	c5 df       	rcall	.-118    	; 0x15b98 <Clear_Common>
   15c0e:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <SS80s>
   15c12:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <SS80s+0x1>
   15c16:	f2 82       	std	Z+2, r15	; 0x02
   15c18:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15c1c:	85 ff       	sbrs	r24, 5
   15c1e:	0c c0       	rjmp	.+24     	; 0x15c38 <SS80_init+0x62>
   15c20:	f8 01       	movw	r30, r16
   15c22:	81 81       	ldd	r24, Z+1	; 0x01
   15c24:	90 e0       	ldi	r25, 0x00	; 0
   15c26:	ed b7       	in	r30, 0x3d	; 61
   15c28:	fe b7       	in	r31, 0x3e	; 62
   15c2a:	95 83       	std	Z+5, r25	; 0x05
   15c2c:	84 83       	std	Z+4, r24	; 0x04
   15c2e:	c1 82       	std	Z+1, r12	; 0x01
   15c30:	d2 82       	std	Z+2, r13	; 0x02
   15c32:	e3 82       	std	Z+3, r14	; 0x03
   15c34:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   15c38:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80p>
   15c3c:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80p+0x1>
   15c40:	81 81       	ldd	r24, Z+1	; 0x01
   15c42:	90 e0       	ldi	r25, 0x00	; 0
   15c44:	0e 94 a6 86 	call	0x10d4c	; 0x10d4c <gpib_disable_PPR>
   15c48:	21 97       	sbiw	r28, 0x01	; 1
   15c4a:	0b 52       	subi	r16, 0x2B	; 43
   15c4c:	11 09       	sbc	r17, r1
   15c4e:	cf 3f       	cpi	r28, 0xFF	; 255
   15c50:	ff ef       	ldi	r31, 0xFF	; 255
   15c52:	df 07       	cpc	r29, r31
   15c54:	81 f6       	brne	.-96     	; 0x15bf6 <SS80_init+0x20>
   15c56:	cd b7       	in	r28, 0x3d	; 61
   15c58:	de b7       	in	r29, 0x3e	; 62
   15c5a:	25 96       	adiw	r28, 0x05	; 5
   15c5c:	e8 e0       	ldi	r30, 0x08	; 8
   15c5e:	0c 94 ee e3 	jmp	0x1c7dc	; 0x1c7dc <__epilogue_restores__+0x14>

00015c62 <SS80_Channel_Independent_Clear>:
   15c62:	9a df       	rcall	.-204    	; 0x15b98 <Clear_Common>
   15c64:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80p>
   15c68:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80p+0x1>
   15c6c:	81 81       	ldd	r24, Z+1	; 0x01
   15c6e:	90 e0       	ldi	r25, 0x00	; 0
   15c70:	0e 94 70 86 	call	0x10ce0	; 0x10ce0 <gpib_enable_PPR>
   15c74:	80 e0       	ldi	r24, 0x00	; 0
   15c76:	90 e0       	ldi	r25, 0x00	; 0
   15c78:	08 95       	ret

00015c7a <SS80_Universal_Device_Clear>:
   15c7a:	8f e0       	ldi	r24, 0x0F	; 15
   15c7c:	90 e0       	ldi	r25, 0x00	; 0
   15c7e:	8c df       	rcall	.-232    	; 0x15b98 <Clear_Common>
   15c80:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80p>
   15c84:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80p+0x1>
   15c88:	81 81       	ldd	r24, Z+1	; 0x01
   15c8a:	90 e0       	ldi	r25, 0x00	; 0
   15c8c:	0e 94 70 86 	call	0x10ce0	; 0x10ce0 <gpib_enable_PPR>
   15c90:	80 e0       	ldi	r24, 0x00	; 0
   15c92:	90 e0       	ldi	r25, 0x00	; 0
   15c94:	08 95       	ret

00015c96 <SS80_Selected_Device_Clear>:
   15c96:	cf 93       	push	r28
   15c98:	df 93       	push	r29
   15c9a:	00 d0       	rcall	.+0      	; 0x15c9c <SS80_Selected_Device_Clear+0x6>
   15c9c:	1f 92       	push	r1
   15c9e:	ec 01       	movw	r28, r24
   15ca0:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15ca4:	85 ff       	sbrs	r24, 5
   15ca6:	0a c0       	rjmp	.+20     	; 0x15cbc <SS80_Selected_Device_Clear+0x26>
   15ca8:	8b e4       	ldi	r24, 0x4B	; 75
   15caa:	90 e2       	ldi	r25, 0x20	; 32
   15cac:	a0 e0       	ldi	r26, 0x00	; 0
   15cae:	ed b7       	in	r30, 0x3d	; 61
   15cb0:	fe b7       	in	r31, 0x3e	; 62
   15cb2:	81 83       	std	Z+1, r24	; 0x01
   15cb4:	92 83       	std	Z+2, r25	; 0x02
   15cb6:	a3 83       	std	Z+3, r26	; 0x03
   15cb8:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   15cbc:	ce 01       	movw	r24, r28
   15cbe:	6c df       	rcall	.-296    	; 0x15b98 <Clear_Common>
   15cc0:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80p>
   15cc4:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80p+0x1>
   15cc8:	81 81       	ldd	r24, Z+1	; 0x01
   15cca:	90 e0       	ldi	r25, 0x00	; 0
   15ccc:	0e 94 70 86 	call	0x10ce0	; 0x10ce0 <gpib_enable_PPR>
   15cd0:	80 e0       	ldi	r24, 0x00	; 0
   15cd2:	90 e0       	ldi	r25, 0x00	; 0
   15cd4:	cd b7       	in	r28, 0x3d	; 61
   15cd6:	de b7       	in	r29, 0x3e	; 62
   15cd8:	23 96       	adiw	r28, 0x03	; 3
   15cda:	e2 e0       	ldi	r30, 0x02	; 2
   15cdc:	0c 94 f4 e3 	jmp	0x1c7e8	; 0x1c7e8 <__epilogue_restores__+0x20>

00015ce0 <SS80_Amigo_Clear>:
   15ce0:	a6 e0       	ldi	r26, 0x06	; 6
   15ce2:	b0 e0       	ldi	r27, 0x00	; 0
   15ce4:	e6 e7       	ldi	r30, 0x76	; 118
   15ce6:	fe ea       	ldi	r31, 0xAE	; 174
   15ce8:	0c 94 d8 e3 	jmp	0x1c7b0	; 0x1c7b0 <__prologue_saves__+0x20>
   15cec:	1d 82       	std	Y+5, r1	; 0x05
   15cee:	1c 82       	std	Y+4, r1	; 0x04
   15cf0:	ae 01       	movw	r20, r28
   15cf2:	4c 5f       	subi	r20, 0xFC	; 252
   15cf4:	5f 4f       	sbci	r21, 0xFF	; 255
   15cf6:	61 e0       	ldi	r22, 0x01	; 1
   15cf8:	70 e0       	ldi	r23, 0x00	; 0
   15cfa:	ce 01       	movw	r24, r28
   15cfc:	06 96       	adiw	r24, 0x06	; 6
   15cfe:	0e 94 28 8b 	call	0x11650	; 0x11650 <gpib_read_str>
   15d02:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   15d06:	01 97       	sbiw	r24, 0x01	; 1
   15d08:	89 f0       	breq	.+34     	; 0x15d2c <SS80_Amigo_Clear+0x4c>
   15d0a:	20 ff       	sbrs	r18, 0
   15d0c:	0a c0       	rjmp	.+20     	; 0x15d22 <SS80_Amigo_Clear+0x42>
   15d0e:	88 e3       	ldi	r24, 0x38	; 56
   15d10:	90 e2       	ldi	r25, 0x20	; 32
   15d12:	a0 e0       	ldi	r26, 0x00	; 0
   15d14:	ed b7       	in	r30, 0x3d	; 61
   15d16:	fe b7       	in	r31, 0x3e	; 62
   15d18:	81 83       	std	Z+1, r24	; 0x01
   15d1a:	92 83       	std	Z+2, r25	; 0x02
   15d1c:	a3 83       	std	Z+3, r26	; 0x03
   15d1e:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   15d22:	8c 81       	ldd	r24, Y+4	; 0x04
   15d24:	9d 81       	ldd	r25, Y+5	; 0x05
   15d26:	88 27       	eor	r24, r24
   15d28:	90 7d       	andi	r25, 0xD0	; 208
   15d2a:	19 c0       	rjmp	.+50     	; 0x15d5e <SS80_Amigo_Clear+0x7e>
   15d2c:	25 ff       	sbrs	r18, 5
   15d2e:	0a c0       	rjmp	.+20     	; 0x15d44 <SS80_Amigo_Clear+0x64>
   15d30:	89 e2       	ldi	r24, 0x29	; 41
   15d32:	90 e2       	ldi	r25, 0x20	; 32
   15d34:	a0 e0       	ldi	r26, 0x00	; 0
   15d36:	ed b7       	in	r30, 0x3d	; 61
   15d38:	fe b7       	in	r31, 0x3e	; 62
   15d3a:	81 83       	std	Z+1, r24	; 0x01
   15d3c:	92 83       	std	Z+2, r25	; 0x02
   15d3e:	a3 83       	std	Z+3, r26	; 0x03
   15d40:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   15d44:	8f e0       	ldi	r24, 0x0F	; 15
   15d46:	90 e0       	ldi	r25, 0x00	; 0
   15d48:	27 df       	rcall	.-434    	; 0x15b98 <Clear_Common>
   15d4a:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80p>
   15d4e:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80p+0x1>
   15d52:	81 81       	ldd	r24, Z+1	; 0x01
   15d54:	90 e0       	ldi	r25, 0x00	; 0
   15d56:	0e 94 70 86 	call	0x10ce0	; 0x10ce0 <gpib_enable_PPR>
   15d5a:	80 e0       	ldi	r24, 0x00	; 0
   15d5c:	90 e0       	ldi	r25, 0x00	; 0
   15d5e:	26 96       	adiw	r28, 0x06	; 6
   15d60:	e2 e0       	ldi	r30, 0x02	; 2
   15d62:	0c 94 f4 e3 	jmp	0x1c7e8	; 0x1c7e8 <__epilogue_restores__+0x20>

00015d66 <SS80_Cancel>:
   15d66:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <SS80s>
   15d6a:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <SS80s+0x1>
   15d6e:	11 82       	std	Z+1, r1	; 0x01
   15d70:	10 82       	st	Z, r1
   15d72:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80p>
   15d76:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80p+0x1>
   15d7a:	81 81       	ldd	r24, Z+1	; 0x01
   15d7c:	90 e0       	ldi	r25, 0x00	; 0
   15d7e:	0e 94 70 86 	call	0x10ce0	; 0x10ce0 <gpib_enable_PPR>
   15d82:	80 e0       	ldi	r24, 0x00	; 0
   15d84:	90 e0       	ldi	r25, 0x00	; 0
   15d86:	08 95       	ret

00015d88 <SS80_Transparent_State>:
   15d88:	a9 e0       	ldi	r26, 0x09	; 9
   15d8a:	b0 e0       	ldi	r27, 0x00	; 0
   15d8c:	ea ec       	ldi	r30, 0xCA	; 202
   15d8e:	fe ea       	ldi	r31, 0xAE	; 174
   15d90:	0c 94 d0 e3 	jmp	0x1c7a0	; 0x1c7a0 <__prologue_saves__+0x10>
   15d94:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80p>
   15d98:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80p+0x1>
   15d9c:	81 81       	ldd	r24, Z+1	; 0x01
   15d9e:	90 e0       	ldi	r25, 0x00	; 0
   15da0:	0e 94 a6 86 	call	0x10d4c	; 0x10d4c <gpib_disable_PPR>
   15da4:	80 e0       	ldi	r24, 0x00	; 0
   15da6:	91 e0       	ldi	r25, 0x01	; 1
   15da8:	99 87       	std	Y+9, r25	; 0x09
   15daa:	88 87       	std	Y+8, r24	; 0x08
   15dac:	ae 01       	movw	r20, r28
   15dae:	48 5f       	subi	r20, 0xF8	; 248
   15db0:	5f 4f       	sbci	r21, 0xFF	; 255
   15db2:	60 e0       	ldi	r22, 0x00	; 0
   15db4:	72 e0       	ldi	r23, 0x02	; 2
   15db6:	80 e8       	ldi	r24, 0x80	; 128
   15db8:	9c e1       	ldi	r25, 0x1C	; 28
   15dba:	0e 94 28 8b 	call	0x11650	; 0x11650 <gpib_read_str>
   15dbe:	7c 01       	movw	r14, r24
   15dc0:	88 85       	ldd	r24, Y+8	; 0x08
   15dc2:	99 85       	ldd	r25, Y+9	; 0x09
   15dc4:	9c 01       	movw	r18, r24
   15dc6:	22 27       	eor	r18, r18
   15dc8:	30 7d       	andi	r19, 0xD0	; 208
   15dca:	23 2b       	or	r18, r19
   15dcc:	79 f0       	breq	.+30     	; 0x15dec <SS80_Transparent_State+0x64>
   15dce:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15dd2:	80 ff       	sbrs	r24, 0
   15dd4:	da c0       	rjmp	.+436    	; 0x15f8a <SS80_Transparent_State+0x202>
   15dd6:	88 ec       	ldi	r24, 0xC8	; 200
   15dd8:	91 e2       	ldi	r25, 0x21	; 33
   15dda:	a0 e0       	ldi	r26, 0x00	; 0
   15ddc:	ed b7       	in	r30, 0x3d	; 61
   15dde:	fe b7       	in	r31, 0x3e	; 62
   15de0:	81 83       	std	Z+1, r24	; 0x01
   15de2:	92 83       	std	Z+2, r25	; 0x02
   15de4:	a3 83       	std	Z+3, r26	; 0x03
   15de6:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   15dea:	cf c0       	rjmp	.+414    	; 0x15f8a <SS80_Transparent_State+0x202>
   15dec:	e1 14       	cp	r14, r1
   15dee:	f1 04       	cpc	r15, r1
   15df0:	09 f4       	brne	.+2      	; 0x15df4 <SS80_Transparent_State+0x6c>
   15df2:	d0 c0       	rjmp	.+416    	; 0x15f94 <SS80_Transparent_State+0x20c>
   15df4:	90 fd       	sbrc	r25, 0
   15df6:	0e c0       	rjmp	.+28     	; 0x15e14 <SS80_Transparent_State+0x8c>
   15df8:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15dfc:	80 ff       	sbrs	r24, 0
   15dfe:	0a c0       	rjmp	.+20     	; 0x15e14 <SS80_Transparent_State+0x8c>
   15e00:	8f ea       	ldi	r24, 0xAF	; 175
   15e02:	91 e2       	ldi	r25, 0x21	; 33
   15e04:	a0 e0       	ldi	r26, 0x00	; 0
   15e06:	ed b7       	in	r30, 0x3d	; 61
   15e08:	fe b7       	in	r31, 0x3e	; 62
   15e0a:	81 83       	std	Z+1, r24	; 0x01
   15e0c:	92 83       	std	Z+2, r25	; 0x02
   15e0e:	a3 83       	std	Z+3, r26	; 0x03
   15e10:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   15e14:	80 e8       	ldi	r24, 0x80	; 128
   15e16:	a8 2e       	mov	r10, r24
   15e18:	8c e1       	ldi	r24, 0x1C	; 28
   15e1a:	b8 2e       	mov	r11, r24
   15e1c:	00 e0       	ldi	r16, 0x00	; 0
   15e1e:	10 e0       	ldi	r17, 0x00	; 0
   15e20:	0e 15       	cp	r16, r14
   15e22:	1f 05       	cpc	r17, r15
   15e24:	0c f0       	brlt	.+2      	; 0x15e28 <SS80_Transparent_State+0xa0>
   15e26:	9c c0       	rjmp	.+312    	; 0x15f60 <SS80_Transparent_State+0x1d8>
   15e28:	68 01       	movw	r12, r16
   15e2a:	ff ef       	ldi	r31, 0xFF	; 255
   15e2c:	cf 1a       	sub	r12, r31
   15e2e:	df 0a       	sbc	r13, r31
   15e30:	f5 01       	movw	r30, r10
   15e32:	81 91       	ld	r24, Z+
   15e34:	5f 01       	movw	r10, r30
   15e36:	28 2f       	mov	r18, r24
   15e38:	30 e0       	ldi	r19, 0x00	; 0
   15e3a:	a9 01       	movw	r20, r18
   15e3c:	40 52       	subi	r20, 0x20	; 32
   15e3e:	51 09       	sbc	r21, r1
   15e40:	40 31       	cpi	r20, 0x10	; 16
   15e42:	51 05       	cpc	r21, r1
   15e44:	20 f4       	brcc	.+8      	; 0x15e4e <SS80_Transparent_State+0xc6>
   15e46:	80 52       	subi	r24, 0x20	; 32
   15e48:	8f d9       	rcall	.-3298   	; 0x15168 <SS80_Check_Unit>
   15e4a:	86 01       	movw	r16, r12
   15e4c:	e9 cf       	rjmp	.-46     	; 0x15e20 <SS80_Transparent_State+0x98>
   15e4e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15e52:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   15e56:	21 30       	cpi	r18, 0x01	; 1
   15e58:	31 05       	cpc	r19, r1
   15e5a:	c9 f4       	brne	.+50     	; 0x15e8e <SS80_Transparent_State+0x106>
   15e5c:	0e 5f       	subi	r16, 0xFE	; 254
   15e5e:	1f 4f       	sbci	r17, 0xFF	; 255
   15e60:	80 73       	andi	r24, 0x30	; 48
   15e62:	99 27       	eor	r25, r25
   15e64:	89 2b       	or	r24, r25
   15e66:	51 f0       	breq	.+20     	; 0x15e7c <SS80_Transparent_State+0xf4>
   15e68:	8a e8       	ldi	r24, 0x8A	; 138
   15e6a:	91 e2       	ldi	r25, 0x21	; 33
   15e6c:	a0 e0       	ldi	r26, 0x00	; 0
   15e6e:	ed b7       	in	r30, 0x3d	; 61
   15e70:	fe b7       	in	r31, 0x3e	; 62
   15e72:	81 83       	std	Z+1, r24	; 0x01
   15e74:	92 83       	std	Z+2, r25	; 0x02
   15e76:	a3 83       	std	Z+3, r26	; 0x03
   15e78:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   15e7c:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80p>
   15e80:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80p+0x1>
   15e84:	81 81       	ldd	r24, Z+1	; 0x01
   15e86:	90 e0       	ldi	r25, 0x00	; 0
   15e88:	0e 94 70 86 	call	0x10ce0	; 0x10ce0 <gpib_enable_PPR>
   15e8c:	69 c0       	rjmp	.+210    	; 0x15f60 <SS80_Transparent_State+0x1d8>
   15e8e:	22 30       	cpi	r18, 0x02	; 2
   15e90:	31 05       	cpc	r19, r1
   15e92:	51 f4       	brne	.+20     	; 0x15ea8 <SS80_Transparent_State+0x120>
   15e94:	0b 5f       	subi	r16, 0xFB	; 251
   15e96:	1f 4f       	sbci	r17, 0xFF	; 255
   15e98:	80 73       	andi	r24, 0x30	; 48
   15e9a:	99 27       	eor	r25, r25
   15e9c:	89 2b       	or	r24, r25
   15e9e:	09 f4       	brne	.+2      	; 0x15ea2 <SS80_Transparent_State+0x11a>
   15ea0:	5f c0       	rjmp	.+190    	; 0x15f60 <SS80_Transparent_State+0x1d8>
   15ea2:	8d e6       	ldi	r24, 0x6D	; 109
   15ea4:	91 e2       	ldi	r25, 0x21	; 33
   15ea6:	0c c0       	rjmp	.+24     	; 0x15ec0 <SS80_Transparent_State+0x138>
   15ea8:	23 30       	cpi	r18, 0x03	; 3
   15eaa:	31 05       	cpc	r19, r1
   15eac:	91 f4       	brne	.+36     	; 0x15ed2 <SS80_Transparent_State+0x14a>
   15eae:	0b 5f       	subi	r16, 0xFB	; 251
   15eb0:	1f 4f       	sbci	r17, 0xFF	; 255
   15eb2:	80 73       	andi	r24, 0x30	; 48
   15eb4:	99 27       	eor	r25, r25
   15eb6:	89 2b       	or	r24, r25
   15eb8:	09 f4       	brne	.+2      	; 0x15ebc <SS80_Transparent_State+0x134>
   15eba:	52 c0       	rjmp	.+164    	; 0x15f60 <SS80_Transparent_State+0x1d8>
   15ebc:	8f e4       	ldi	r24, 0x4F	; 79
   15ebe:	91 e2       	ldi	r25, 0x21	; 33
   15ec0:	a0 e0       	ldi	r26, 0x00	; 0
   15ec2:	ed b7       	in	r30, 0x3d	; 61
   15ec4:	fe b7       	in	r31, 0x3e	; 62
   15ec6:	81 83       	std	Z+1, r24	; 0x01
   15ec8:	92 83       	std	Z+2, r25	; 0x02
   15eca:	a3 83       	std	Z+3, r26	; 0x03
   15ecc:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   15ed0:	47 c0       	rjmp	.+142    	; 0x15f60 <SS80_Transparent_State+0x1d8>
   15ed2:	28 30       	cpi	r18, 0x08	; 8
   15ed4:	31 05       	cpc	r19, r1
   15ed6:	e1 f4       	brne	.+56     	; 0x15f10 <SS80_Transparent_State+0x188>
   15ed8:	85 ff       	sbrs	r24, 5
   15eda:	12 c0       	rjmp	.+36     	; 0x15f00 <SS80_Transparent_State+0x178>
   15edc:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <SS80s>
   15ee0:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <SS80s+0x1>
   15ee4:	85 81       	ldd	r24, Z+5	; 0x05
   15ee6:	90 e0       	ldi	r25, 0x00	; 0
   15ee8:	ed b7       	in	r30, 0x3d	; 61
   15eea:	fe b7       	in	r31, 0x3e	; 62
   15eec:	95 83       	std	Z+5, r25	; 0x05
   15eee:	84 83       	std	Z+4, r24	; 0x04
   15ef0:	88 e2       	ldi	r24, 0x28	; 40
   15ef2:	91 e2       	ldi	r25, 0x21	; 33
   15ef4:	a0 e0       	ldi	r26, 0x00	; 0
   15ef6:	81 83       	std	Z+1, r24	; 0x01
   15ef8:	92 83       	std	Z+2, r25	; 0x02
   15efa:	a3 83       	std	Z+3, r26	; 0x03
   15efc:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   15f00:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <SS80s>
   15f04:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <SS80s+0x1>
   15f08:	85 81       	ldd	r24, Z+5	; 0x05
   15f0a:	90 e0       	ldi	r25, 0x00	; 0
   15f0c:	aa de       	rcall	.-684    	; 0x15c62 <SS80_Channel_Independent_Clear>
   15f0e:	44 c0       	rjmp	.+136    	; 0x15f98 <SS80_Transparent_State+0x210>
   15f10:	29 30       	cpi	r18, 0x09	; 9
   15f12:	31 05       	cpc	r19, r1
   15f14:	b1 f4       	brne	.+44     	; 0x15f42 <SS80_Transparent_State+0x1ba>
   15f16:	85 ff       	sbrs	r24, 5
   15f18:	12 c0       	rjmp	.+36     	; 0x15f3e <SS80_Transparent_State+0x1b6>
   15f1a:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <SS80s>
   15f1e:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <SS80s+0x1>
   15f22:	85 81       	ldd	r24, Z+5	; 0x05
   15f24:	90 e0       	ldi	r25, 0x00	; 0
   15f26:	ed b7       	in	r30, 0x3d	; 61
   15f28:	fe b7       	in	r31, 0x3e	; 62
   15f2a:	95 83       	std	Z+5, r25	; 0x05
   15f2c:	84 83       	std	Z+4, r24	; 0x04
   15f2e:	84 e1       	ldi	r24, 0x14	; 20
   15f30:	91 e2       	ldi	r25, 0x21	; 33
   15f32:	a0 e0       	ldi	r26, 0x00	; 0
   15f34:	81 83       	std	Z+1, r24	; 0x01
   15f36:	92 83       	std	Z+2, r25	; 0x02
   15f38:	a3 83       	std	Z+3, r26	; 0x03
   15f3a:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   15f3e:	13 df       	rcall	.-474    	; 0x15d66 <SS80_Cancel>
   15f40:	2b c0       	rjmp	.+86     	; 0x15f98 <SS80_Transparent_State+0x210>
   15f42:	80 ff       	sbrs	r24, 0
   15f44:	22 c0       	rjmp	.+68     	; 0x15f8a <SS80_Transparent_State+0x202>
   15f46:	ed b7       	in	r30, 0x3d	; 61
   15f48:	fe b7       	in	r31, 0x3e	; 62
   15f4a:	35 83       	std	Z+5, r19	; 0x05
   15f4c:	24 83       	std	Z+4, r18	; 0x04
   15f4e:	84 ef       	ldi	r24, 0xF4	; 244
   15f50:	90 e2       	ldi	r25, 0x20	; 32
   15f52:	a0 e0       	ldi	r26, 0x00	; 0
   15f54:	81 83       	std	Z+1, r24	; 0x01
   15f56:	92 83       	std	Z+2, r25	; 0x02
   15f58:	a3 83       	std	Z+3, r26	; 0x03
   15f5a:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   15f5e:	86 01       	movw	r16, r12
   15f60:	0e 15       	cp	r16, r14
   15f62:	1f 05       	cpc	r17, r15
   15f64:	91 f0       	breq	.+36     	; 0x15f8a <SS80_Transparent_State+0x202>
   15f66:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15f6a:	80 ff       	sbrs	r24, 0
   15f6c:	0e c0       	rjmp	.+28     	; 0x15f8a <SS80_Transparent_State+0x202>
   15f6e:	ed b7       	in	r30, 0x3d	; 61
   15f70:	fe b7       	in	r31, 0x3e	; 62
   15f72:	f7 82       	std	Z+7, r15	; 0x07
   15f74:	e6 82       	std	Z+6, r14	; 0x06
   15f76:	15 83       	std	Z+5, r17	; 0x05
   15f78:	04 83       	std	Z+4, r16	; 0x04
   15f7a:	88 eb       	ldi	r24, 0xB8	; 184
   15f7c:	90 e2       	ldi	r25, 0x20	; 32
   15f7e:	a0 e0       	ldi	r26, 0x00	; 0
   15f80:	81 83       	std	Z+1, r24	; 0x01
   15f82:	92 83       	std	Z+2, r25	; 0x02
   15f84:	a3 83       	std	Z+3, r26	; 0x03
   15f86:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   15f8a:	88 85       	ldd	r24, Y+8	; 0x08
   15f8c:	99 85       	ldd	r25, Y+9	; 0x09
   15f8e:	88 27       	eor	r24, r24
   15f90:	90 7d       	andi	r25, 0xD0	; 208
   15f92:	02 c0       	rjmp	.+4      	; 0x15f98 <SS80_Transparent_State+0x210>
   15f94:	80 e0       	ldi	r24, 0x00	; 0
   15f96:	90 e0       	ldi	r25, 0x00	; 0
   15f98:	29 96       	adiw	r28, 0x09	; 9
   15f9a:	ea e0       	ldi	r30, 0x0A	; 10
   15f9c:	0c 94 ec e3 	jmp	0x1c7d8	; 0x1c7d8 <__epilogue_restores__+0x10>

00015fa0 <SS80_error_return>:
   15fa0:	a6 e0       	ldi	r26, 0x06	; 6
   15fa2:	b0 e0       	ldi	r27, 0x00	; 0
   15fa4:	e6 ed       	ldi	r30, 0xD6	; 214
   15fa6:	ff ea       	ldi	r31, 0xAF	; 175
   15fa8:	0c 94 d8 e3 	jmp	0x1c7b0	; 0x1c7b0 <__prologue_saves__+0x20>
   15fac:	80 e0       	ldi	r24, 0x00	; 0
   15fae:	91 e0       	ldi	r25, 0x01	; 1
   15fb0:	9d 83       	std	Y+5, r25	; 0x05
   15fb2:	8c 83       	std	Y+4, r24	; 0x04
   15fb4:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <SS80s>
   15fb8:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <SS80s+0x1>
   15fbc:	81 e0       	ldi	r24, 0x01	; 1
   15fbe:	82 83       	std	Z+2, r24	; 0x02
   15fc0:	8e 83       	std	Y+6, r24	; 0x06
   15fc2:	ae 01       	movw	r20, r28
   15fc4:	4c 5f       	subi	r20, 0xFC	; 252
   15fc6:	5f 4f       	sbci	r21, 0xFF	; 255
   15fc8:	61 e0       	ldi	r22, 0x01	; 1
   15fca:	70 e0       	ldi	r23, 0x00	; 0
   15fcc:	ce 01       	movw	r24, r28
   15fce:	06 96       	adiw	r24, 0x06	; 6
   15fd0:	0e 94 ca 8b 	call	0x11794	; 0x11794 <gpib_write_str>
   15fd4:	01 97       	sbiw	r24, 0x01	; 1
   15fd6:	99 f0       	breq	.+38     	; 0x15ffe <SS80_error_return+0x5e>
   15fd8:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15fdc:	80 ff       	sbrs	r24, 0
   15fde:	0a c0       	rjmp	.+20     	; 0x15ff4 <SS80_error_return+0x54>
   15fe0:	86 e0       	ldi	r24, 0x06	; 6
   15fe2:	90 e2       	ldi	r25, 0x20	; 32
   15fe4:	a0 e0       	ldi	r26, 0x00	; 0
   15fe6:	ed b7       	in	r30, 0x3d	; 61
   15fe8:	fe b7       	in	r31, 0x3e	; 62
   15fea:	81 83       	std	Z+1, r24	; 0x01
   15fec:	92 83       	std	Z+2, r25	; 0x02
   15fee:	a3 83       	std	Z+3, r26	; 0x03
   15ff0:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   15ff4:	8c 81       	ldd	r24, Y+4	; 0x04
   15ff6:	9d 81       	ldd	r25, Y+5	; 0x05
   15ff8:	88 27       	eor	r24, r24
   15ffa:	90 7d       	andi	r25, 0xD0	; 208
   15ffc:	07 c0       	rjmp	.+14     	; 0x1600c <SS80_error_return+0x6c>
   15ffe:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <SS80s>
   16002:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <SS80s+0x1>
   16006:	12 82       	std	Z+2, r1	; 0x02
   16008:	80 e0       	ldi	r24, 0x00	; 0
   1600a:	90 e0       	ldi	r25, 0x00	; 0
   1600c:	26 96       	adiw	r28, 0x06	; 6
   1600e:	e2 e0       	ldi	r30, 0x02	; 2
   16010:	0c 94 f4 e3 	jmp	0x1c7e8	; 0x1c7e8 <__epilogue_restores__+0x20>

00016014 <SS80_locate_and_read>:
/// - Phases: Command, Report
/// @param[in] u: Unit
/// @return  0

int SS80_Channel_Independent_Clear( int u )
{
   16014:	a7 e1       	ldi	r26, 0x17	; 23
   16016:	b0 e0       	ldi	r27, 0x00	; 0
   16018:	e0 e1       	ldi	r30, 0x10	; 16
   1601a:	f0 eb       	ldi	r31, 0xB0	; 176
   1601c:	0c 94 c9 e3 	jmp	0x1c792	; 0x1c792 <__prologue_saves__+0x2>
   16020:	60 91 03 19 	lds	r22, 0x1903	; 0x801903 <SS80s>
   16024:	70 91 04 19 	lds	r23, 0x1904	; 0x801904 <SS80s+0x1>
   16028:	fb 01       	movw	r30, r22
   1602a:	27 81       	ldd	r18, Z+7	; 0x07
   1602c:	30 85       	ldd	r19, Z+8	; 0x08
   1602e:	41 85       	ldd	r20, Z+9	; 0x09
   16030:	52 85       	ldd	r21, Z+10	; 0x0a
   16032:	80 91 05 19 	lds	r24, 0x1905	; 0x801905 <SS80p>
   16036:	90 91 06 19 	lds	r25, 0x1906	; 0x801906 <SS80p+0x1>
   1603a:	fc 01       	movw	r30, r24
   1603c:	a0 89       	ldd	r26, Z+16	; 0x10
   1603e:	b1 89       	ldd	r27, Z+17	; 0x11
   16040:	fb 01       	movw	r30, r22
   16042:	12 82       	std	Z+2, r1	; 0x02
   16044:	1d 86       	std	Y+13, r1	; 0x0d
   16046:	1c 86       	std	Y+12, r1	; 0x0c
   16048:	54 98       	cbi	0x0a, 4	; 10
   1604a:	4c 99       	sbic	0x09, 4	; 9
   1604c:	03 c0       	rjmp	.+6      	; 0x16054 <SS80_locate_and_read+0x40>
   1604e:	80 e0       	ldi	r24, 0x00	; 0
   16050:	90 e1       	ldi	r25, 0x10	; 16
   16052:	3e c1       	rjmp	.+636    	; 0x162d0 <SS80_locate_and_read+0x2bc>
   16054:	0e 94 a8 e3 	call	0x1c750	; 0x1c750 <__muluhisi3>
   16058:	4b 01       	movw	r8, r22
   1605a:	5c 01       	movw	r10, r24
   1605c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16060:	85 ff       	sbrs	r24, 5
   16062:	1a c0       	rjmp	.+52     	; 0x16098 <SS80_locate_and_read+0x84>
   16064:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <SS80s>
   16068:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <SS80s+0x1>
   1606c:	83 85       	ldd	r24, Z+11	; 0x0b
   1606e:	94 85       	ldd	r25, Z+12	; 0x0c
   16070:	a5 85       	ldd	r26, Z+13	; 0x0d
   16072:	b6 85       	ldd	r27, Z+14	; 0x0e
   16074:	ed b7       	in	r30, 0x3d	; 61
   16076:	fe b7       	in	r31, 0x3e	; 62
   16078:	80 87       	std	Z+8, r24	; 0x08
   1607a:	91 87       	std	Z+9, r25	; 0x09
   1607c:	a2 87       	std	Z+10, r26	; 0x0a
   1607e:	b3 87       	std	Z+11, r27	; 0x0b
   16080:	84 82       	std	Z+4, r8	; 0x04
   16082:	95 82       	std	Z+5, r9	; 0x05
   16084:	a6 82       	std	Z+6, r10	; 0x06
   16086:	b7 82       	std	Z+7, r11	; 0x07
   16088:	8e ed       	ldi	r24, 0xDE	; 222
   1608a:	96 e2       	ldi	r25, 0x26	; 38
   1608c:	a0 e0       	ldi	r26, 0x00	; 0
   1608e:	81 83       	std	Z+1, r24	; 0x01
   16090:	92 83       	std	Z+2, r25	; 0x02
   16092:	a3 83       	std	Z+3, r26	; 0x03
   16094:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   16098:	2b db       	rcall	.-2474   	; 0x156f0 <SS80_cmd_seek>
   1609a:	89 2b       	or	r24, r25
   1609c:	09 f0       	breq	.+2      	; 0x160a0 <SS80_locate_and_read+0x8c>
   1609e:	ae c0       	rjmp	.+348    	; 0x161fc <SS80_locate_and_read+0x1e8>
   160a0:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <SS80s>
   160a4:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <SS80s+0x1>
   160a8:	43 84       	ldd	r4, Z+11	; 0x0b
   160aa:	54 84       	ldd	r5, Z+12	; 0x0c
   160ac:	65 84       	ldd	r6, Z+13	; 0x0d
   160ae:	76 84       	ldd	r7, Z+14	; 0x0e
   160b0:	1e 86       	std	Y+14, r1	; 0x0e
   160b2:	1f 86       	std	Y+15, r1	; 0x0f
   160b4:	18 8a       	std	Y+16, r1	; 0x10
   160b6:	19 8a       	std	Y+17, r1	; 0x11
   160b8:	80 ec       	ldi	r24, 0xC0	; 192
   160ba:	96 e2       	ldi	r25, 0x26	; 38
   160bc:	9c 01       	movw	r18, r24
   160be:	40 e0       	ldi	r20, 0x00	; 0
   160c0:	2a 8b       	std	Y+18, r18	; 0x12
   160c2:	3b 8b       	std	Y+19, r19	; 0x13
   160c4:	4c 8b       	std	Y+20, r20	; 0x14
   160c6:	33 24       	eor	r3, r3
   160c8:	33 94       	inc	r3
   160ca:	8f e8       	ldi	r24, 0x8F	; 143
   160cc:	96 e2       	ldi	r25, 0x26	; 38
   160ce:	9c 01       	movw	r18, r24
   160d0:	40 e0       	ldi	r20, 0x00	; 0
   160d2:	2d 8b       	std	Y+21, r18	; 0x15
   160d4:	3e 8b       	std	Y+22, r19	; 0x16
   160d6:	4f 8b       	std	Y+23, r20	; 0x17
   160d8:	34 c0       	rjmp	.+104    	; 0x16142 <SS80_locate_and_read+0x12e>
   160da:	86 fd       	sbrc	r24, 6
   160dc:	0e 94 ae 85 	call	0x10b5c	; 0x10b5c <gpib_timer_elapsed_begin>
   160e0:	ae 01       	movw	r20, r28
   160e2:	44 5f       	subi	r20, 0xF4	; 244
   160e4:	5f 4f       	sbci	r21, 0xFF	; 255
   160e6:	b6 01       	movw	r22, r12
   160e8:	80 e8       	ldi	r24, 0x80	; 128
   160ea:	9c e1       	ldi	r25, 0x1C	; 28
   160ec:	0e 94 ca 8b 	call	0x11794	; 0x11794 <gpib_write_str>
   160f0:	8c 01       	movw	r16, r24
   160f2:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   160f6:	86 ff       	sbrs	r24, 6
   160f8:	04 c0       	rjmp	.+8      	; 0x16102 <SS80_locate_and_read+0xee>
   160fa:	84 ec       	ldi	r24, 0xC4	; 196
   160fc:	9f e0       	ldi	r25, 0x0F	; 15
   160fe:	0e 94 c0 85 	call	0x10b80	; 0x10b80 <gpib_timer_elapsed_end>
   16102:	c0 16       	cp	r12, r16
   16104:	d1 06       	cpc	r13, r17
   16106:	09 f0       	breq	.+2      	; 0x1610a <SS80_locate_and_read+0xf6>
   16108:	82 c0       	rjmp	.+260    	; 0x1620e <SS80_locate_and_read+0x1fa>
   1610a:	0d 2c       	mov	r0, r13
   1610c:	00 0c       	add	r0, r0
   1610e:	ee 08       	sbc	r14, r14
   16110:	ff 08       	sbc	r15, r15
   16112:	8c 0c       	add	r8, r12
   16114:	9d 1c       	adc	r9, r13
   16116:	ae 1c       	adc	r10, r14
   16118:	bf 1c       	adc	r11, r15
   1611a:	01 2e       	mov	r0, r17
   1611c:	00 0c       	add	r0, r0
   1611e:	22 0b       	sbc	r18, r18
   16120:	33 0b       	sbc	r19, r19
   16122:	8e 85       	ldd	r24, Y+14	; 0x0e
   16124:	9f 85       	ldd	r25, Y+15	; 0x0f
   16126:	a8 89       	ldd	r26, Y+16	; 0x10
   16128:	b9 89       	ldd	r27, Y+17	; 0x11
   1612a:	80 0f       	add	r24, r16
   1612c:	91 1f       	adc	r25, r17
   1612e:	a2 1f       	adc	r26, r18
   16130:	b3 1f       	adc	r27, r19
   16132:	8e 87       	std	Y+14, r24	; 0x0e
   16134:	9f 87       	std	Y+15, r25	; 0x0f
   16136:	a8 8b       	std	Y+16, r26	; 0x10
   16138:	b9 8b       	std	Y+17, r27	; 0x11
   1613a:	40 1a       	sub	r4, r16
   1613c:	51 0a       	sbc	r5, r17
   1613e:	62 0a       	sbc	r6, r18
   16140:	73 0a       	sbc	r7, r19
   16142:	41 14       	cp	r4, r1
   16144:	51 04       	cpc	r5, r1
   16146:	61 04       	cpc	r6, r1
   16148:	71 04       	cpc	r7, r1
   1614a:	09 f4       	brne	.+2      	; 0x1614e <SS80_locate_and_read+0x13a>
   1614c:	92 c0       	rjmp	.+292    	; 0x16272 <SS80_locate_and_read+0x25e>
   1614e:	54 98       	cbi	0x0a, 4	; 10
   16150:	4c 9b       	sbis	0x09, 4	; 9
   16152:	7d cf       	rjmp	.-262    	; 0x1604e <SS80_locate_and_read+0x3a>
   16154:	31 e0       	ldi	r19, 0x01	; 1
   16156:	43 16       	cp	r4, r19
   16158:	53 06       	cpc	r5, r19
   1615a:	61 04       	cpc	r6, r1
   1615c:	71 04       	cpc	r7, r1
   1615e:	08 f4       	brcc	.+2      	; 0x16162 <SS80_locate_and_read+0x14e>
   16160:	4f c0       	rjmp	.+158    	; 0x16200 <SS80_locate_and_read+0x1ec>
   16162:	1d 86       	std	Y+13, r1	; 0x0d
   16164:	1c 86       	std	Y+12, r1	; 0x0c
   16166:	c1 2c       	mov	r12, r1
   16168:	dd 24       	eor	r13, r13
   1616a:	d3 94       	inc	r13
   1616c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16170:	86 fd       	sbrc	r24, 6
   16172:	0e 94 ae 85 	call	0x10b5c	; 0x10b5c <gpib_timer_elapsed_begin>
   16176:	e0 90 03 19 	lds	r14, 0x1903	; 0x801903 <SS80s>
   1617a:	f0 90 04 19 	lds	r15, 0x1904	; 0x801904 <SS80s+0x1>
   1617e:	43 e0       	ldi	r20, 0x03	; 3
   16180:	e4 0e       	add	r14, r20
   16182:	f1 1c       	adc	r15, r1
   16184:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80p>
   16188:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80p+0x1>
   1618c:	86 01       	movw	r16, r12
   1618e:	20 e8       	ldi	r18, 0x80	; 128
   16190:	3c e1       	ldi	r19, 0x1C	; 28
   16192:	b5 01       	movw	r22, r10
   16194:	a4 01       	movw	r20, r8
   16196:	82 81       	ldd	r24, Z+2	; 0x02
   16198:	93 81       	ldd	r25, Z+3	; 0x03
   1619a:	0e 94 00 85 	call	0x10a00	; 0x10a00 <dbf_open_read>
   1619e:	8c 01       	movw	r16, r24
   161a0:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   161a4:	86 ff       	sbrs	r24, 6
   161a6:	04 c0       	rjmp	.+8      	; 0x161b0 <SS80_locate_and_read+0x19c>
   161a8:	8a eb       	ldi	r24, 0xBA	; 186
   161aa:	9f e0       	ldi	r25, 0x0F	; 15
   161ac:	0e 94 c0 85 	call	0x10b80	; 0x10b80 <gpib_timer_elapsed_end>
   161b0:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   161b4:	85 ff       	sbrs	r24, 5
   161b6:	0c c0       	rjmp	.+24     	; 0x161d0 <SS80_locate_and_read+0x1bc>
   161b8:	ed b7       	in	r30, 0x3d	; 61
   161ba:	fe b7       	in	r31, 0x3e	; 62
   161bc:	15 83       	std	Z+5, r17	; 0x05
   161be:	04 83       	std	Z+4, r16	; 0x04
   161c0:	2a 89       	ldd	r18, Y+18	; 0x12
   161c2:	3b 89       	ldd	r19, Y+19	; 0x13
   161c4:	4c 89       	ldd	r20, Y+20	; 0x14
   161c6:	21 83       	std	Z+1, r18	; 0x01
   161c8:	32 83       	std	Z+2, r19	; 0x02
   161ca:	43 83       	std	Z+3, r20	; 0x03
   161cc:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   161d0:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   161d4:	17 ff       	sbrs	r17, 7
   161d6:	81 cf       	rjmp	.-254    	; 0x160da <SS80_locate_and_read+0xc6>
   161d8:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <SS80s>
   161dc:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <SS80s+0x1>
   161e0:	91 e0       	ldi	r25, 0x01	; 1
   161e2:	92 83       	std	Z+2, r25	; 0x02
   161e4:	80 ff       	sbrs	r24, 0
   161e6:	0a c0       	rjmp	.+20     	; 0x161fc <SS80_locate_and_read+0x1e8>
   161e8:	88 ea       	ldi	r24, 0xA8	; 168
   161ea:	96 e2       	ldi	r25, 0x26	; 38
   161ec:	a0 e0       	ldi	r26, 0x00	; 0
   161ee:	ed b7       	in	r30, 0x3d	; 61
   161f0:	fe b7       	in	r31, 0x3e	; 62
   161f2:	81 83       	std	Z+1, r24	; 0x01
   161f4:	92 83       	std	Z+2, r25	; 0x02
   161f6:	a3 83       	std	Z+3, r26	; 0x03
   161f8:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   161fc:	d1 de       	rcall	.-606    	; 0x15fa0 <SS80_error_return>
   161fe:	68 c0       	rjmp	.+208    	; 0x162d0 <SS80_locate_and_read+0x2bc>
   16200:	62 01       	movw	r12, r4
   16202:	8c 85       	ldd	r24, Y+12	; 0x0c
   16204:	9d 85       	ldd	r25, Y+13	; 0x0d
   16206:	91 60       	ori	r25, 0x01	; 1
   16208:	9d 87       	std	Y+13, r25	; 0x0d
   1620a:	8c 87       	std	Y+12, r24	; 0x0c
   1620c:	af cf       	rjmp	.-162    	; 0x1616c <SS80_locate_and_read+0x158>
   1620e:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <SS80s>
   16212:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <SS80s+0x1>
   16216:	32 82       	std	Z+2, r3	; 0x02
   16218:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1621c:	80 ff       	sbrs	r24, 0
   1621e:	0a c0       	rjmp	.+20     	; 0x16234 <SS80_locate_and_read+0x220>
   16220:	2d 89       	ldd	r18, Y+21	; 0x15
   16222:	3e 89       	ldd	r19, Y+22	; 0x16
   16224:	4f 89       	ldd	r20, Y+23	; 0x17
   16226:	ed b7       	in	r30, 0x3d	; 61
   16228:	fe b7       	in	r31, 0x3e	; 62
   1622a:	21 83       	std	Z+1, r18	; 0x01
   1622c:	32 83       	std	Z+2, r19	; 0x02
   1622e:	43 83       	std	Z+3, r20	; 0x03
   16230:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   16234:	8c 85       	ldd	r24, Y+12	; 0x0c
   16236:	9d 85       	ldd	r25, Y+13	; 0x0d
   16238:	88 27       	eor	r24, r24
   1623a:	90 7d       	andi	r25, 0xD0	; 208
   1623c:	89 2b       	or	r24, r25
   1623e:	09 f4       	brne	.+2      	; 0x16242 <SS80_locate_and_read+0x22e>
   16240:	64 cf       	rjmp	.-312    	; 0x1610a <SS80_locate_and_read+0xf6>
   16242:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <SS80s>
   16246:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <SS80s+0x1>
   1624a:	83 81       	ldd	r24, Z+3	; 0x03
   1624c:	94 81       	ldd	r25, Z+4	; 0x04
   1624e:	80 62       	ori	r24, 0x20	; 32
   16250:	94 83       	std	Z+4, r25	; 0x04
   16252:	83 83       	std	Z+3, r24	; 0x03
   16254:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16258:	80 ff       	sbrs	r24, 0
   1625a:	21 c0       	rjmp	.+66     	; 0x1629e <SS80_locate_and_read+0x28a>
   1625c:	8a e6       	ldi	r24, 0x6A	; 106
   1625e:	96 e2       	ldi	r25, 0x26	; 38
   16260:	a0 e0       	ldi	r26, 0x00	; 0
   16262:	ed b7       	in	r30, 0x3d	; 61
   16264:	fe b7       	in	r31, 0x3e	; 62
   16266:	81 83       	std	Z+1, r24	; 0x01
   16268:	92 83       	std	Z+2, r25	; 0x02
   1626a:	a3 83       	std	Z+3, r26	; 0x03
   1626c:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   16270:	16 c0       	rjmp	.+44     	; 0x1629e <SS80_locate_and_read+0x28a>
   16272:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16276:	85 ff       	sbrs	r24, 5
   16278:	12 c0       	rjmp	.+36     	; 0x1629e <SS80_locate_and_read+0x28a>
   1627a:	8e 85       	ldd	r24, Y+14	; 0x0e
   1627c:	9f 85       	ldd	r25, Y+15	; 0x0f
   1627e:	a8 89       	ldd	r26, Y+16	; 0x10
   16280:	b9 89       	ldd	r27, Y+17	; 0x11
   16282:	ed b7       	in	r30, 0x3d	; 61
   16284:	fe b7       	in	r31, 0x3e	; 62
   16286:	84 83       	std	Z+4, r24	; 0x04
   16288:	95 83       	std	Z+5, r25	; 0x05
   1628a:	a6 83       	std	Z+6, r26	; 0x06
   1628c:	b7 83       	std	Z+7, r27	; 0x07
   1628e:	82 e4       	ldi	r24, 0x42	; 66
   16290:	96 e2       	ldi	r25, 0x26	; 38
   16292:	a0 e0       	ldi	r26, 0x00	; 0
   16294:	81 83       	std	Z+1, r24	; 0x01
   16296:	92 83       	std	Z+2, r25	; 0x02
   16298:	a3 83       	std	Z+3, r26	; 0x03
   1629a:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   1629e:	00 91 03 19 	lds	r16, 0x1903	; 0x801903 <SS80s>
   162a2:	10 91 04 19 	lds	r17, 0x1904	; 0x801904 <SS80s+0x1>
   162a6:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80p>
   162aa:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80p+0x1>
   162ae:	20 89       	ldd	r18, Z+16	; 0x10
   162b0:	31 89       	ldd	r19, Z+17	; 0x11
   162b2:	40 e0       	ldi	r20, 0x00	; 0
   162b4:	50 e0       	ldi	r21, 0x00	; 0
   162b6:	c5 01       	movw	r24, r10
   162b8:	b4 01       	movw	r22, r8
   162ba:	0e 94 46 e3 	call	0x1c68c	; 0x1c68c <__udivmodsi4>
   162be:	f8 01       	movw	r30, r16
   162c0:	27 83       	std	Z+7, r18	; 0x07
   162c2:	30 87       	std	Z+8, r19	; 0x08
   162c4:	41 87       	std	Z+9, r20	; 0x09
   162c6:	52 87       	std	Z+10, r21	; 0x0a
   162c8:	8c 85       	ldd	r24, Y+12	; 0x0c
   162ca:	9d 85       	ldd	r25, Y+13	; 0x0d
   162cc:	88 27       	eor	r24, r24
   162ce:	90 7d       	andi	r25, 0xD0	; 208
   162d0:	67 96       	adiw	r28, 0x17	; 23
   162d2:	e1 e1       	ldi	r30, 0x11	; 17
   162d4:	0c 94 e5 e3 	jmp	0x1c7ca	; 0x1c7ca <__epilogue_restores__+0x2>

000162d8 <SS80_Execute_State>:
   162d8:	cf 93       	push	r28
   162da:	df 93       	push	r29
   162dc:	00 d0       	rcall	.+0      	; 0x162de <SS80_Execute_State+0x6>
   162de:	00 d0       	rcall	.+0      	; 0x162e0 <SS80_Execute_State+0x8>
   162e0:	1f 92       	push	r1
   162e2:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80p>
   162e6:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80p+0x1>
   162ea:	81 81       	ldd	r24, Z+1	; 0x01
   162ec:	90 e0       	ldi	r25, 0x00	; 0
   162ee:	0e 94 a6 86 	call	0x10d4c	; 0x10d4c <gpib_disable_PPR>
   162f2:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <SS80s>
   162f6:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <SS80s+0x1>
   162fa:	80 81       	ld	r24, Z
   162fc:	91 81       	ldd	r25, Z+1	; 0x01
   162fe:	82 30       	cpi	r24, 0x02	; 2
   16300:	91 05       	cpc	r25, r1
   16302:	89 f0       	breq	.+34     	; 0x16326 <SS80_Execute_State+0x4e>
   16304:	3c f4       	brge	.+14     	; 0x16314 <SS80_Execute_State+0x3c>
   16306:	00 97       	sbiw	r24, 0x00	; 0
   16308:	81 f1       	breq	.+96     	; 0x1636a <SS80_Execute_State+0x92>
   1630a:	81 30       	cpi	r24, 0x01	; 1
   1630c:	91 05       	cpc	r25, r1
   1630e:	b9 f4       	brne	.+46     	; 0x1633e <SS80_Execute_State+0x66>
   16310:	81 de       	rcall	.-766    	; 0x16014 <SS80_locate_and_read>
   16312:	0d c0       	rjmp	.+26     	; 0x1632e <SS80_Execute_State+0x56>
   16314:	83 30       	cpi	r24, 0x03	; 3
   16316:	91 05       	cpc	r25, r1
   16318:	41 f0       	breq	.+16     	; 0x1632a <SS80_Execute_State+0x52>
   1631a:	84 30       	cpi	r24, 0x04	; 4
   1631c:	91 05       	cpc	r25, r1
   1631e:	79 f4       	brne	.+30     	; 0x1633e <SS80_Execute_State+0x66>
   16320:	0e 94 44 a8 	call	0x15088	; 0x15088 <SS80_describe>
   16324:	04 c0       	rjmp	.+8      	; 0x1632e <SS80_Execute_State+0x56>
   16326:	59 da       	rcall	.-2894   	; 0x157da <SS80_locate_and_write>
   16328:	02 c0       	rjmp	.+4      	; 0x1632e <SS80_Execute_State+0x56>
   1632a:	0e 94 c3 a7 	call	0x14f86	; 0x14f86 <SS80_send_status>
   1632e:	ec 01       	movw	r28, r24
   16330:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <SS80s>
   16334:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <SS80s+0x1>
   16338:	11 82       	std	Z+1, r1	; 0x01
   1633a:	10 82       	st	Z, r1
   1633c:	18 c0       	rjmp	.+48     	; 0x1636e <SS80_Execute_State+0x96>
   1633e:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   16342:	20 ff       	sbrs	r18, 0
   16344:	0c c0       	rjmp	.+24     	; 0x1635e <SS80_Execute_State+0x86>
   16346:	ed b7       	in	r30, 0x3d	; 61
   16348:	fe b7       	in	r31, 0x3e	; 62
   1634a:	95 83       	std	Z+5, r25	; 0x05
   1634c:	84 83       	std	Z+4, r24	; 0x04
   1634e:	86 e0       	ldi	r24, 0x06	; 6
   16350:	97 e2       	ldi	r25, 0x27	; 39
   16352:	a0 e0       	ldi	r26, 0x00	; 0
   16354:	81 83       	std	Z+1, r24	; 0x01
   16356:	92 83       	std	Z+2, r25	; 0x02
   16358:	a3 83       	std	Z+3, r26	; 0x03
   1635a:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   1635e:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <SS80s>
   16362:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <SS80s+0x1>
   16366:	11 82       	std	Z+1, r1	; 0x01
   16368:	10 82       	st	Z, r1
   1636a:	c0 e0       	ldi	r28, 0x00	; 0
   1636c:	d0 e0       	ldi	r29, 0x00	; 0
   1636e:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80p>
   16372:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80p+0x1>
   16376:	81 81       	ldd	r24, Z+1	; 0x01
   16378:	90 e0       	ldi	r25, 0x00	; 0
   1637a:	0e 94 70 86 	call	0x10ce0	; 0x10ce0 <gpib_enable_PPR>
   1637e:	ce 01       	movw	r24, r28
   16380:	cd b7       	in	r28, 0x3d	; 61
   16382:	de b7       	in	r29, 0x3e	; 62
   16384:	25 96       	adiw	r28, 0x05	; 5
   16386:	e2 e0       	ldi	r30, 0x02	; 2
   16388:	0c 94 f4 e3 	jmp	0x1c7e8	; 0x1c7e8 <__epilogue_restores__+0x20>

0001638c <SS80_COMMANDS>:
   1638c:	a9 e0       	ldi	r26, 0x09	; 9
   1638e:	b0 e0       	ldi	r27, 0x00	; 0
   16390:	ec ec       	ldi	r30, 0xCC	; 204
   16392:	f1 eb       	ldi	r31, 0xB1	; 177
   16394:	0c 94 d7 e3 	jmp	0x1c7ae	; 0x1c7ae <__prologue_saves__+0x1e>
   16398:	18 2f       	mov	r17, r24
   1639a:	80 91 84 1e 	lds	r24, 0x1E84	; 0x801e84 <talking>
   1639e:	90 e0       	ldi	r25, 0x00	; 0
   163a0:	0e 94 9b 8c 	call	0x11936	; 0x11936 <SS80_is_MTA>
   163a4:	89 2b       	or	r24, r25
   163a6:	19 f0       	breq	.+6      	; 0x163ae <SS80_COMMANDS+0x22>
   163a8:	15 36       	cpi	r17, 0x65	; 101
   163aa:	19 f5       	brne	.+70     	; 0x163f2 <SS80_COMMANDS+0x66>
   163ac:	09 c0       	rjmp	.+18     	; 0x163c0 <SS80_COMMANDS+0x34>
   163ae:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <listening>
   163b2:	90 e0       	ldi	r25, 0x00	; 0
   163b4:	0e 94 8c 8c 	call	0x11918	; 0x11918 <SS80_is_MLA>
   163b8:	ec 01       	movw	r28, r24
   163ba:	89 2b       	or	r24, r25
   163bc:	a9 f7       	brne	.-22     	; 0x163a8 <SS80_COMMANDS+0x1c>
   163be:	ad c0       	rjmp	.+346    	; 0x1651a <SS80_COMMANDS+0x18e>
   163c0:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <listening>
   163c4:	90 e0       	ldi	r25, 0x00	; 0
   163c6:	0e 94 8c 8c 	call	0x11918	; 0x11918 <SS80_is_MLA>
   163ca:	89 2b       	or	r24, r25
   163cc:	09 f4       	brne	.+2      	; 0x163d0 <SS80_COMMANDS+0x44>
   163ce:	a2 c0       	rjmp	.+324    	; 0x16514 <SS80_COMMANDS+0x188>
   163d0:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   163d4:	85 ff       	sbrs	r24, 5
   163d6:	0a c0       	rjmp	.+20     	; 0x163ec <SS80_COMMANDS+0x60>
   163d8:	80 ef       	ldi	r24, 0xF0	; 240
   163da:	9f e1       	ldi	r25, 0x1F	; 31
   163dc:	a0 e0       	ldi	r26, 0x00	; 0
   163de:	ed b7       	in	r30, 0x3d	; 61
   163e0:	fe b7       	in	r31, 0x3e	; 62
   163e2:	81 83       	std	Z+1, r24	; 0x01
   163e4:	92 83       	std	Z+2, r25	; 0x02
   163e6:	a3 83       	std	Z+3, r26	; 0x03
   163e8:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   163ec:	0e 94 04 a9 	call	0x15208	; 0x15208 <SS80_Command_State>
   163f0:	73 c0       	rjmp	.+230    	; 0x164d8 <SS80_COMMANDS+0x14c>
   163f2:	1e 36       	cpi	r17, 0x6E	; 110
   163f4:	01 f5       	brne	.+64     	; 0x16436 <SS80_COMMANDS+0xaa>
   163f6:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <listening>
   163fa:	90 e0       	ldi	r25, 0x00	; 0
   163fc:	0e 94 8c 8c 	call	0x11918	; 0x11918 <SS80_is_MLA>
   16400:	89 2b       	or	r24, r25
   16402:	79 f0       	breq	.+30     	; 0x16422 <SS80_COMMANDS+0x96>
   16404:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16408:	85 ff       	sbrs	r24, 5
   1640a:	13 c0       	rjmp	.+38     	; 0x16432 <SS80_COMMANDS+0xa6>
   1640c:	8a ed       	ldi	r24, 0xDA	; 218
   1640e:	9f e1       	ldi	r25, 0x1F	; 31
   16410:	a0 e0       	ldi	r26, 0x00	; 0
   16412:	ed b7       	in	r30, 0x3d	; 61
   16414:	fe b7       	in	r31, 0x3e	; 62
   16416:	81 83       	std	Z+1, r24	; 0x01
   16418:	92 83       	std	Z+2, r25	; 0x02
   1641a:	a3 83       	std	Z+3, r26	; 0x03
   1641c:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   16420:	08 c0       	rjmp	.+16     	; 0x16432 <SS80_COMMANDS+0xa6>
   16422:	80 91 84 1e 	lds	r24, 0x1E84	; 0x801e84 <talking>
   16426:	90 e0       	ldi	r25, 0x00	; 0
   16428:	0e 94 9b 8c 	call	0x11936	; 0x11936 <SS80_is_MTA>
   1642c:	89 2b       	or	r24, r25
   1642e:	51 f7       	brne	.-44     	; 0x16404 <SS80_COMMANDS+0x78>
   16430:	71 c0       	rjmp	.+226    	; 0x16514 <SS80_COMMANDS+0x188>
   16432:	52 df       	rcall	.-348    	; 0x162d8 <SS80_Execute_State>
   16434:	51 c0       	rjmp	.+162    	; 0x164d8 <SS80_COMMANDS+0x14c>
   16436:	10 37       	cpi	r17, 0x70	; 112
   16438:	b9 f5       	brne	.+110    	; 0x164a8 <SS80_COMMANDS+0x11c>
   1643a:	80 91 84 1e 	lds	r24, 0x1E84	; 0x801e84 <talking>
   1643e:	90 e0       	ldi	r25, 0x00	; 0
   16440:	0e 94 9b 8c 	call	0x11936	; 0x11936 <SS80_is_MTA>
   16444:	89 2b       	or	r24, r25
   16446:	81 f0       	breq	.+32     	; 0x16468 <SS80_COMMANDS+0xdc>
   16448:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1644c:	85 ff       	sbrs	r24, 5
   1644e:	0a c0       	rjmp	.+20     	; 0x16464 <SS80_COMMANDS+0xd8>
   16450:	85 ec       	ldi	r24, 0xC5	; 197
   16452:	9f e1       	ldi	r25, 0x1F	; 31
   16454:	a0 e0       	ldi	r26, 0x00	; 0
   16456:	ed b7       	in	r30, 0x3d	; 61
   16458:	fe b7       	in	r31, 0x3e	; 62
   1645a:	81 83       	std	Z+1, r24	; 0x01
   1645c:	92 83       	std	Z+2, r25	; 0x02
   1645e:	a3 83       	std	Z+3, r26	; 0x03
   16460:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   16464:	4c db       	rcall	.-2408   	; 0x15afe <SS80_Report>
   16466:	38 c0       	rjmp	.+112    	; 0x164d8 <SS80_COMMANDS+0x14c>
   16468:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <listening>
   1646c:	90 e0       	ldi	r25, 0x00	; 0
   1646e:	0e 94 8c 8c 	call	0x11918	; 0x11918 <SS80_is_MLA>
   16472:	89 2b       	or	r24, r25
   16474:	09 f4       	brne	.+2      	; 0x16478 <SS80_COMMANDS+0xec>
   16476:	4e c0       	rjmp	.+156    	; 0x16514 <SS80_COMMANDS+0x188>
   16478:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1647c:	85 ff       	sbrs	r24, 5
   1647e:	0a c0       	rjmp	.+20     	; 0x16494 <SS80_COMMANDS+0x108>
   16480:	86 eb       	ldi	r24, 0xB6	; 182
   16482:	9f e1       	ldi	r25, 0x1F	; 31
   16484:	a0 e0       	ldi	r26, 0x00	; 0
   16486:	ed b7       	in	r30, 0x3d	; 61
   16488:	fe b7       	in	r31, 0x3e	; 62
   1648a:	81 83       	std	Z+1, r24	; 0x01
   1648c:	92 83       	std	Z+2, r25	; 0x02
   1648e:	a3 83       	std	Z+3, r26	; 0x03
   16490:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   16494:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80p>
   16498:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80p+0x1>
   1649c:	81 81       	ldd	r24, Z+1	; 0x01
   1649e:	90 e0       	ldi	r25, 0x00	; 0
   164a0:	0e 94 a6 86 	call	0x10d4c	; 0x10d4c <gpib_disable_PPR>
   164a4:	1d dc       	rcall	.-1990   	; 0x15ce0 <SS80_Amigo_Clear>
   164a6:	18 c0       	rjmp	.+48     	; 0x164d8 <SS80_COMMANDS+0x14c>
   164a8:	12 37       	cpi	r17, 0x72	; 114
   164aa:	c1 f4       	brne	.+48     	; 0x164dc <SS80_COMMANDS+0x150>
   164ac:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <listening>
   164b0:	90 e0       	ldi	r25, 0x00	; 0
   164b2:	0e 94 8c 8c 	call	0x11918	; 0x11918 <SS80_is_MLA>
   164b6:	89 2b       	or	r24, r25
   164b8:	89 f0       	breq	.+34     	; 0x164dc <SS80_COMMANDS+0x150>
   164ba:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   164be:	85 ff       	sbrs	r24, 5
   164c0:	0a c0       	rjmp	.+20     	; 0x164d6 <SS80_COMMANDS+0x14a>
   164c2:	82 ea       	ldi	r24, 0xA2	; 162
   164c4:	9f e1       	ldi	r25, 0x1F	; 31
   164c6:	a0 e0       	ldi	r26, 0x00	; 0
   164c8:	ed b7       	in	r30, 0x3d	; 61
   164ca:	fe b7       	in	r31, 0x3e	; 62
   164cc:	81 83       	std	Z+1, r24	; 0x01
   164ce:	92 83       	std	Z+2, r25	; 0x02
   164d0:	a3 83       	std	Z+3, r26	; 0x03
   164d2:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   164d6:	58 dc       	rcall	.-1872   	; 0x15d88 <SS80_Transparent_State>
   164d8:	ec 01       	movw	r28, r24
   164da:	3b c0       	rjmp	.+118    	; 0x16552 <SS80_COMMANDS+0x1c6>
   164dc:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   164e0:	80 ff       	sbrs	r24, 0
   164e2:	18 c0       	rjmp	.+48     	; 0x16514 <SS80_COMMANDS+0x188>
   164e4:	80 91 84 1e 	lds	r24, 0x1E84	; 0x801e84 <talking>
   164e8:	90 e0       	ldi	r25, 0x00	; 0
   164ea:	ed b7       	in	r30, 0x3d	; 61
   164ec:	fe b7       	in	r31, 0x3e	; 62
   164ee:	91 87       	std	Z+9, r25	; 0x09
   164f0:	80 87       	std	Z+8, r24	; 0x08
   164f2:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <listening>
   164f6:	90 e0       	ldi	r25, 0x00	; 0
   164f8:	97 83       	std	Z+7, r25	; 0x07
   164fa:	86 83       	std	Z+6, r24	; 0x06
   164fc:	81 2f       	mov	r24, r17
   164fe:	90 e0       	ldi	r25, 0x00	; 0
   16500:	95 83       	std	Z+5, r25	; 0x05
   16502:	84 83       	std	Z+4, r24	; 0x04
   16504:	8e e6       	ldi	r24, 0x6E	; 110
   16506:	9f e1       	ldi	r25, 0x1F	; 31
   16508:	a0 e0       	ldi	r26, 0x00	; 0
   1650a:	81 83       	std	Z+1, r24	; 0x01
   1650c:	92 83       	std	Z+2, r25	; 0x02
   1650e:	a3 83       	std	Z+3, r26	; 0x03
   16510:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   16514:	c0 e0       	ldi	r28, 0x00	; 0
   16516:	d0 e0       	ldi	r29, 0x00	; 0
   16518:	1c c0       	rjmp	.+56     	; 0x16552 <SS80_COMMANDS+0x1c6>
   1651a:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1651e:	80 ff       	sbrs	r24, 0
   16520:	f9 cf       	rjmp	.-14     	; 0x16514 <SS80_COMMANDS+0x188>
   16522:	80 91 84 1e 	lds	r24, 0x1E84	; 0x801e84 <talking>
   16526:	90 e0       	ldi	r25, 0x00	; 0
   16528:	ed b7       	in	r30, 0x3d	; 61
   1652a:	fe b7       	in	r31, 0x3e	; 62
   1652c:	91 87       	std	Z+9, r25	; 0x09
   1652e:	80 87       	std	Z+8, r24	; 0x08
   16530:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <listening>
   16534:	90 e0       	ldi	r25, 0x00	; 0
   16536:	97 83       	std	Z+7, r25	; 0x07
   16538:	86 83       	std	Z+6, r24	; 0x06
   1653a:	81 2f       	mov	r24, r17
   1653c:	90 e0       	ldi	r25, 0x00	; 0
   1653e:	95 83       	std	Z+5, r25	; 0x05
   16540:	84 83       	std	Z+4, r24	; 0x04
   16542:	8a e3       	ldi	r24, 0x3A	; 58
   16544:	9f e1       	ldi	r25, 0x1F	; 31
   16546:	a0 e0       	ldi	r26, 0x00	; 0
   16548:	81 83       	std	Z+1, r24	; 0x01
   1654a:	92 83       	std	Z+2, r25	; 0x02
   1654c:	a3 83       	std	Z+3, r26	; 0x03
   1654e:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   16552:	ce 01       	movw	r24, r28
   16554:	cd b7       	in	r28, 0x3d	; 61
   16556:	de b7       	in	r29, 0x3e	; 62
   16558:	29 96       	adiw	r28, 0x09	; 9
   1655a:	e3 e0       	ldi	r30, 0x03	; 3
   1655c:	0c 94 f3 e3 	jmp	0x1c7e6	; 0x1c7e6 <__epilogue_restores__+0x1e>

00016560 <amigo_overflow_check>:
   16560:	cf 92       	push	r12
   16562:	df 92       	push	r13
   16564:	ef 92       	push	r14
   16566:	0f 93       	push	r16
   16568:	1f 93       	push	r17
   1656a:	cf 93       	push	r28
   1656c:	df 93       	push	r29
   1656e:	00 d0       	rcall	.+0      	; 0x16570 <amigo_overflow_check+0x10>
   16570:	00 d0       	rcall	.+0      	; 0x16572 <amigo_overflow_check+0x12>
   16572:	1f 92       	push	r1
   16574:	ec 01       	movw	r28, r24
   16576:	8b 01       	movw	r16, r22
   16578:	80 e0       	ldi	r24, 0x00	; 0
   1657a:	90 e0       	ldi	r25, 0x00	; 0
   1657c:	2c ea       	ldi	r18, 0xAC	; 172
   1657e:	3e e2       	ldi	r19, 0x2E	; 46
   16580:	69 01       	movw	r12, r18
   16582:	e1 2c       	mov	r14, r1
   16584:	2d 81       	ldd	r18, Y+5	; 0x05
   16586:	30 e0       	ldi	r19, 0x00	; 0
   16588:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOp>
   1658c:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOp+0x1>
   16590:	40 85       	ldd	r20, Z+8	; 0x08
   16592:	51 85       	ldd	r21, Z+9	; 0x09
   16594:	24 17       	cp	r18, r20
   16596:	35 07       	cpc	r19, r21
   16598:	64 f1       	brlt	.+88     	; 0x165f2 <amigo_overflow_check+0x92>
   1659a:	1d 82       	std	Y+5, r1	; 0x05
   1659c:	2c 81       	ldd	r18, Y+4	; 0x04
   1659e:	2f 5f       	subi	r18, 0xFF	; 255
   165a0:	2c 83       	std	Y+4, r18	; 0x04
   165a2:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOp>
   165a6:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOp+0x1>
   165aa:	2c 81       	ldd	r18, Y+4	; 0x04
   165ac:	30 e0       	ldi	r19, 0x00	; 0
   165ae:	42 85       	ldd	r20, Z+10	; 0x0a
   165b0:	53 85       	ldd	r21, Z+11	; 0x0b
   165b2:	24 17       	cp	r18, r20
   165b4:	35 07       	cpc	r19, r21
   165b6:	34 f3       	brlt	.-52     	; 0x16584 <amigo_overflow_check+0x24>
   165b8:	1c 82       	std	Y+4, r1	; 0x04
   165ba:	2b 81       	ldd	r18, Y+3	; 0x03
   165bc:	2f 5f       	subi	r18, 0xFF	; 255
   165be:	2b 83       	std	Y+3, r18	; 0x03
   165c0:	30 e0       	ldi	r19, 0x00	; 0
   165c2:	44 85       	ldd	r20, Z+12	; 0x0c
   165c4:	55 85       	ldd	r21, Z+13	; 0x0d
   165c6:	24 17       	cp	r18, r20
   165c8:	35 07       	cpc	r19, r21
   165ca:	5c f3       	brlt	.-42     	; 0x165a2 <amigo_overflow_check+0x42>
   165cc:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   165d0:	80 ff       	sbrs	r24, 0
   165d2:	0c c0       	rjmp	.+24     	; 0x165ec <amigo_overflow_check+0x8c>
   165d4:	01 15       	cp	r16, r1
   165d6:	11 05       	cpc	r17, r1
   165d8:	49 f0       	breq	.+18     	; 0x165ec <amigo_overflow_check+0x8c>
   165da:	ed b7       	in	r30, 0x3d	; 61
   165dc:	fe b7       	in	r31, 0x3e	; 62
   165de:	15 83       	std	Z+5, r17	; 0x05
   165e0:	04 83       	std	Z+4, r16	; 0x04
   165e2:	c1 82       	std	Z+1, r12	; 0x01
   165e4:	d2 82       	std	Z+2, r13	; 0x02
   165e6:	e3 82       	std	Z+3, r14	; 0x03
   165e8:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   165ec:	81 e0       	ldi	r24, 0x01	; 1
   165ee:	90 e0       	ldi	r25, 0x00	; 0
   165f0:	d8 cf       	rjmp	.-80     	; 0x165a2 <amigo_overflow_check+0x42>
   165f2:	0f 90       	pop	r0
   165f4:	0f 90       	pop	r0
   165f6:	0f 90       	pop	r0
   165f8:	0f 90       	pop	r0
   165fa:	0f 90       	pop	r0
   165fc:	df 91       	pop	r29
   165fe:	cf 91       	pop	r28
   16600:	1f 91       	pop	r17
   16602:	0f 91       	pop	r16
   16604:	ef 90       	pop	r14
   16606:	df 90       	pop	r13
   16608:	cf 90       	pop	r12
   1660a:	08 95       	ret

0001660c <amigo_chs_to_logical>:
   1660c:	a1 e1       	ldi	r26, 0x11	; 17
   1660e:	b0 e0       	ldi	r27, 0x00	; 0
   16610:	ec e0       	ldi	r30, 0x0C	; 12
   16612:	f3 eb       	ldi	r31, 0xB3	; 179
   16614:	0c 94 cc e3 	jmp	0x1c798	; 0x1c798 <__prologue_saves__+0x8>
   16618:	8b 01       	movw	r16, r22
   1661a:	60 91 01 19 	lds	r22, 0x1901	; 0x801901 <AMIGOp>
   1661e:	70 91 02 19 	lds	r23, 0x1902	; 0x801902 <AMIGOp+0x1>
   16622:	fb 01       	movw	r30, r22
   16624:	40 85       	ldd	r20, Z+8	; 0x08
   16626:	51 85       	ldd	r21, Z+9	; 0x09
   16628:	fc 01       	movw	r30, r24
   1662a:	c4 81       	ldd	r28, Z+4	; 0x04
   1662c:	d0 e0       	ldi	r29, 0x00	; 0
   1662e:	4c 9f       	mul	r20, r28
   16630:	90 01       	movw	r18, r0
   16632:	4d 9f       	mul	r20, r29
   16634:	30 0d       	add	r19, r0
   16636:	5c 9f       	mul	r21, r28
   16638:	30 0d       	add	r19, r0
   1663a:	11 24       	eor	r1, r1
   1663c:	49 01       	movw	r8, r18
   1663e:	33 0f       	add	r19, r19
   16640:	aa 08       	sbc	r10, r10
   16642:	bb 08       	sbc	r11, r11
   16644:	63 80       	ldd	r6, Z+3	; 0x03
   16646:	71 2c       	mov	r7, r1
   16648:	fb 01       	movw	r30, r22
   1664a:	e2 84       	ldd	r14, Z+10	; 0x0a
   1664c:	f3 84       	ldd	r15, Z+11	; 0x0b
   1664e:	4e 9d       	mul	r20, r14
   16650:	d0 01       	movw	r26, r0
   16652:	4f 9d       	mul	r20, r15
   16654:	b0 0d       	add	r27, r0
   16656:	5e 9d       	mul	r21, r14
   16658:	b0 0d       	add	r27, r0
   1665a:	11 24       	eor	r1, r1
   1665c:	a6 9d       	mul	r26, r6
   1665e:	90 01       	movw	r18, r0
   16660:	a7 9d       	mul	r26, r7
   16662:	30 0d       	add	r19, r0
   16664:	b6 9d       	mul	r27, r6
   16666:	30 0d       	add	r19, r0
   16668:	11 24       	eor	r1, r1
   1666a:	69 01       	movw	r12, r18
   1666c:	33 0f       	add	r19, r19
   1666e:	ee 08       	sbc	r14, r14
   16670:	ff 08       	sbc	r15, r15
   16672:	8c 0c       	add	r8, r12
   16674:	9d 1c       	adc	r9, r13
   16676:	ae 1c       	adc	r10, r14
   16678:	bf 1c       	adc	r11, r15
   1667a:	fc 01       	movw	r30, r24
   1667c:	f5 80       	ldd	r15, Z+5	; 0x05
   1667e:	a5 01       	movw	r20, r10
   16680:	94 01       	movw	r18, r8
   16682:	2f 0d       	add	r18, r15
   16684:	31 1d       	adc	r19, r1
   16686:	41 1d       	adc	r20, r1
   16688:	51 1d       	adc	r21, r1
   1668a:	fb 01       	movw	r30, r22
   1668c:	a6 81       	ldd	r26, Z+6	; 0x06
   1668e:	b7 81       	ldd	r27, Z+7	; 0x07
   16690:	0e 94 b2 e3 	call	0x1c764	; 0x1c764 <__mulshisi3>
   16694:	4b 01       	movw	r8, r22
   16696:	5c 01       	movw	r10, r24
   16698:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1669c:	85 ff       	sbrs	r24, 5
   1669e:	22 c0       	rjmp	.+68     	; 0x166e4 <amigo_chs_to_logical+0xd8>
   166a0:	8f 2d       	mov	r24, r15
   166a2:	90 e0       	ldi	r25, 0x00	; 0
   166a4:	ed b7       	in	r30, 0x3d	; 61
   166a6:	fe b7       	in	r31, 0x3e	; 62
   166a8:	91 8b       	std	Z+17, r25	; 0x11
   166aa:	80 8b       	std	Z+16, r24	; 0x10
   166ac:	d7 87       	std	Z+15, r29	; 0x0f
   166ae:	c6 87       	std	Z+14, r28	; 0x0e
   166b0:	75 86       	std	Z+13, r7	; 0x0d
   166b2:	64 86       	std	Z+12, r6	; 0x0c
   166b4:	e0 91 ff 18 	lds	r30, 0x18FF	; 0x8018ff <AMIGOs>
   166b8:	f0 91 00 19 	lds	r31, 0x1900	; 0x801900 <AMIGOs+0x1>
   166bc:	81 81       	ldd	r24, Z+1	; 0x01
   166be:	90 e0       	ldi	r25, 0x00	; 0
   166c0:	ed b7       	in	r30, 0x3d	; 61
   166c2:	fe b7       	in	r31, 0x3e	; 62
   166c4:	93 87       	std	Z+11, r25	; 0x0b
   166c6:	82 87       	std	Z+10, r24	; 0x0a
   166c8:	86 82       	std	Z+6, r8	; 0x06
   166ca:	97 82       	std	Z+7, r9	; 0x07
   166cc:	a0 86       	std	Z+8, r10	; 0x08
   166ce:	b1 86       	std	Z+9, r11	; 0x09
   166d0:	15 83       	std	Z+5, r17	; 0x05
   166d2:	04 83       	std	Z+4, r16	; 0x04
   166d4:	89 e5       	ldi	r24, 0x59	; 89
   166d6:	9e e2       	ldi	r25, 0x2E	; 46
   166d8:	a0 e0       	ldi	r26, 0x00	; 0
   166da:	81 83       	std	Z+1, r24	; 0x01
   166dc:	92 83       	std	Z+2, r25	; 0x02
   166de:	a3 83       	std	Z+3, r26	; 0x03
   166e0:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   166e4:	c5 01       	movw	r24, r10
   166e6:	b4 01       	movw	r22, r8
   166e8:	cd b7       	in	r28, 0x3d	; 61
   166ea:	de b7       	in	r29, 0x3e	; 62
   166ec:	61 96       	adiw	r28, 0x11	; 17
   166ee:	ee e0       	ldi	r30, 0x0E	; 14
   166f0:	0c 94 e8 e3 	jmp	0x1c7d0	; 0x1c7d0 <__epilogue_restores__+0x8>

000166f4 <amigo_init>:
   166f4:	ef 92       	push	r14
   166f6:	ff 92       	push	r15
   166f8:	0f 93       	push	r16
   166fa:	1f 93       	push	r17
   166fc:	cf 93       	push	r28
   166fe:	df 93       	push	r29
   16700:	03 e6       	ldi	r16, 0x63	; 99
   16702:	10 e2       	ldi	r17, 0x20	; 32
   16704:	cb e0       	ldi	r28, 0x0B	; 11
   16706:	d0 e0       	ldi	r29, 0x00	; 0
   16708:	84 e0       	ldi	r24, 0x04	; 4
   1670a:	f8 2e       	mov	r15, r24
   1670c:	92 e0       	ldi	r25, 0x02	; 2
   1670e:	e9 2e       	mov	r14, r25
   16710:	d8 01       	movw	r26, r16
   16712:	8c 91       	ld	r24, X
   16714:	81 30       	cpi	r24, 0x01	; 1
   16716:	31 f5       	brne	.+76     	; 0x16764 <amigo_init+0x70>
   16718:	ce 01       	movw	r24, r28
   1671a:	0e 94 7d 93 	call	0x126fa	; 0x126fa <set_active_device>
   1671e:	e0 91 ff 18 	lds	r30, 0x18FF	; 0x8018ff <AMIGOs>
   16722:	f0 91 00 19 	lds	r31, 0x1900	; 0x801900 <AMIGOs+0x1>
   16726:	10 82       	st	Z, r1
   16728:	9f 01       	movw	r18, r30
   1672a:	27 5f       	subi	r18, 0xF7	; 247
   1672c:	3f 4f       	sbci	r19, 0xFF	; 255
   1672e:	d9 01       	movw	r26, r18
   16730:	8f 2d       	mov	r24, r15
   16732:	1d 92       	st	X+, r1
   16734:	8a 95       	dec	r24
   16736:	e9 f7       	brne	.-6      	; 0x16732 <amigo_init+0x3e>
   16738:	2c 5f       	subi	r18, 0xFC	; 252
   1673a:	3f 4f       	sbci	r19, 0xFF	; 255
   1673c:	d9 01       	movw	r26, r18
   1673e:	8f 2d       	mov	r24, r15
   16740:	1d 92       	st	X+, r1
   16742:	8a 95       	dec	r24
   16744:	e9 f7       	brne	.-6      	; 0x16740 <amigo_init+0x4c>
   16746:	11 82       	std	Z+1, r1	; 0x01
   16748:	15 82       	std	Z+5, r1	; 0x05
   1674a:	14 82       	std	Z+4, r1	; 0x04
   1674c:	13 82       	std	Z+3, r1	; 0x03
   1674e:	e6 82       	std	Z+6, r14	; 0x06
   16750:	10 86       	std	Z+8, r1	; 0x08
   16752:	17 82       	std	Z+7, r1	; 0x07
   16754:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOp>
   16758:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOp+0x1>
   1675c:	81 81       	ldd	r24, Z+1	; 0x01
   1675e:	90 e0       	ldi	r25, 0x00	; 0
   16760:	0e 94 a6 86 	call	0x10d4c	; 0x10d4c <gpib_disable_PPR>
   16764:	21 97       	sbiw	r28, 0x01	; 1
   16766:	0b 52       	subi	r16, 0x2B	; 43
   16768:	11 09       	sbc	r17, r1
   1676a:	cf 3f       	cpi	r28, 0xFF	; 255
   1676c:	af ef       	ldi	r26, 0xFF	; 255
   1676e:	da 07       	cpc	r29, r26
   16770:	79 f6       	brne	.-98     	; 0x16710 <amigo_init+0x1c>
   16772:	cd b7       	in	r28, 0x3d	; 61
   16774:	de b7       	in	r29, 0x3e	; 62
   16776:	e6 e0       	ldi	r30, 0x06	; 6
   16778:	0c 94 f0 e3 	jmp	0x1c7e0	; 0x1c7e0 <__epilogue_restores__+0x18>

0001677c <amigo_request_logical_address>:
   1677c:	e0 91 ff 18 	lds	r30, 0x18FF	; 0x8018ff <AMIGOs>
   16780:	f0 91 00 19 	lds	r31, 0x1900	; 0x801900 <AMIGOs+0x1>
   16784:	15 86       	std	Z+13, r1	; 0x0d
   16786:	83 81       	ldd	r24, Z+3	; 0x03
   16788:	86 87       	std	Z+14, r24	; 0x0e
   1678a:	84 81       	ldd	r24, Z+4	; 0x04
   1678c:	87 87       	std	Z+15, r24	; 0x0f
   1678e:	85 81       	ldd	r24, Z+5	; 0x05
   16790:	80 8b       	std	Z+16, r24	; 0x10
   16792:	80 e0       	ldi	r24, 0x00	; 0
   16794:	90 e0       	ldi	r25, 0x00	; 0
   16796:	08 95       	ret

00016798 <amigo_request_status>:
   16798:	00 d0       	rcall	.+0      	; 0x1679a <amigo_request_status+0x2>
   1679a:	1f 92       	push	r1
   1679c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   167a0:	85 ff       	sbrs	r24, 5
   167a2:	0a c0       	rjmp	.+20     	; 0x167b8 <amigo_request_status+0x20>
   167a4:	8c e2       	ldi	r24, 0x2C	; 44
   167a6:	9f e2       	ldi	r25, 0x2F	; 47
   167a8:	a0 e0       	ldi	r26, 0x00	; 0
   167aa:	ed b7       	in	r30, 0x3d	; 61
   167ac:	fe b7       	in	r31, 0x3e	; 62
   167ae:	81 83       	std	Z+1, r24	; 0x01
   167b0:	92 83       	std	Z+2, r25	; 0x02
   167b2:	a3 83       	std	Z+3, r26	; 0x03
   167b4:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   167b8:	e0 91 ff 18 	lds	r30, 0x18FF	; 0x8018ff <AMIGOs>
   167bc:	f0 91 00 19 	lds	r31, 0x1900	; 0x801900 <AMIGOs+0x1>
   167c0:	11 86       	std	Z+9, r1	; 0x09
   167c2:	81 81       	ldd	r24, Z+1	; 0x01
   167c4:	82 87       	std	Z+10, r24	; 0x0a
   167c6:	8d e0       	ldi	r24, 0x0D	; 13
   167c8:	83 87       	std	Z+11, r24	; 0x0b
   167ca:	14 86       	std	Z+12, r1	; 0x0c
   167cc:	0e 94 d2 70 	call	0xe1a4	; 0xe1a4 <mmc_wp_status>
   167d0:	e0 91 ff 18 	lds	r30, 0x18FF	; 0x8018ff <AMIGOs>
   167d4:	f0 91 00 19 	lds	r31, 0x1900	; 0x801900 <AMIGOs+0x1>
   167d8:	89 2b       	or	r24, r25
   167da:	19 f0       	breq	.+6      	; 0x167e2 <amigo_request_status+0x4a>
   167dc:	84 85       	ldd	r24, Z+12	; 0x0c
   167de:	80 66       	ori	r24, 0x60	; 96
   167e0:	84 87       	std	Z+12, r24	; 0x0c
   167e2:	86 81       	ldd	r24, Z+6	; 0x06
   167e4:	82 30       	cpi	r24, 0x02	; 2
   167e6:	31 f4       	brne	.+12     	; 0x167f4 <amigo_request_status+0x5c>
   167e8:	83 e1       	ldi	r24, 0x13	; 19
   167ea:	81 87       	std	Z+9, r24	; 0x09
   167ec:	84 85       	ldd	r24, Z+12	; 0x0c
   167ee:	88 60       	ori	r24, 0x08	; 8
   167f0:	84 87       	std	Z+12, r24	; 0x0c
   167f2:	21 c0       	rjmp	.+66     	; 0x16836 <amigo_request_status+0x9e>
   167f4:	27 81       	ldd	r18, Z+7	; 0x07
   167f6:	30 85       	ldd	r19, Z+8	; 0x08
   167f8:	21 15       	cp	r18, r1
   167fa:	31 05       	cpc	r19, r1
   167fc:	11 f4       	brne	.+4      	; 0x16802 <amigo_request_status+0x6a>
   167fe:	81 30       	cpi	r24, 0x01	; 1
   16800:	d1 f4       	brne	.+52     	; 0x16836 <amigo_request_status+0x9e>
   16802:	26 fd       	sbrc	r18, 6
   16804:	0c c0       	rjmp	.+24     	; 0x1681e <amigo_request_status+0x86>
   16806:	25 ff       	sbrs	r18, 5
   16808:	03 c0       	rjmp	.+6      	; 0x16810 <amigo_request_status+0x78>
   1680a:	8a e0       	ldi	r24, 0x0A	; 10
   1680c:	81 87       	std	Z+9, r24	; 0x09
   1680e:	0d c0       	rjmp	.+26     	; 0x1682a <amigo_request_status+0x92>
   16810:	84 85       	ldd	r24, Z+12	; 0x0c
   16812:	24 ff       	sbrs	r18, 4
   16814:	02 c0       	rjmp	.+4      	; 0x1681a <amigo_request_status+0x82>
   16816:	83 60       	ori	r24, 0x03	; 3
   16818:	07 c0       	rjmp	.+14     	; 0x16828 <amigo_request_status+0x90>
   1681a:	21 ff       	sbrs	r18, 1
   1681c:	02 c0       	rjmp	.+4      	; 0x16822 <amigo_request_status+0x8a>
   1681e:	83 e1       	ldi	r24, 0x13	; 19
   16820:	f5 cf       	rjmp	.-22     	; 0x1680c <amigo_request_status+0x74>
   16822:	22 ff       	sbrs	r18, 2
   16824:	02 c0       	rjmp	.+4      	; 0x1682a <amigo_request_status+0x92>
   16826:	84 60       	ori	r24, 0x04	; 4
   16828:	84 87       	std	Z+12, r24	; 0x0c
   1682a:	84 85       	ldd	r24, Z+12	; 0x0c
   1682c:	80 61       	ori	r24, 0x10	; 16
   1682e:	84 87       	std	Z+12, r24	; 0x0c
   16830:	83 85       	ldd	r24, Z+11	; 0x0b
   16832:	80 68       	ori	r24, 0x80	; 128
   16834:	83 87       	std	Z+11, r24	; 0x0b
   16836:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOp>
   1683a:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOp+0x1>
   1683e:	81 81       	ldd	r24, Z+1	; 0x01
   16840:	90 e0       	ldi	r25, 0x00	; 0
   16842:	0e 94 70 86 	call	0x10ce0	; 0x10ce0 <gpib_enable_PPR>
   16846:	80 e0       	ldi	r24, 0x00	; 0
   16848:	90 e0       	ldi	r25, 0x00	; 0
   1684a:	0f 90       	pop	r0
   1684c:	0f 90       	pop	r0
   1684e:	0f 90       	pop	r0
   16850:	08 95       	ret

00016852 <amigo_send_logical_address>:
   16852:	a5 e0       	ldi	r26, 0x05	; 5
   16854:	b0 e0       	ldi	r27, 0x00	; 0
   16856:	ef e2       	ldi	r30, 0x2F	; 47
   16858:	f4 eb       	ldi	r31, 0xB4	; 180
   1685a:	0c 94 d8 e3 	jmp	0x1c7b0	; 0x1c7b0 <__prologue_saves__+0x20>
   1685e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16862:	85 ff       	sbrs	r24, 5
   16864:	0a c0       	rjmp	.+20     	; 0x1687a <amigo_send_logical_address+0x28>
   16866:	8e e0       	ldi	r24, 0x0E	; 14
   16868:	9f e2       	ldi	r25, 0x2F	; 47
   1686a:	a0 e0       	ldi	r26, 0x00	; 0
   1686c:	ed b7       	in	r30, 0x3d	; 61
   1686e:	fe b7       	in	r31, 0x3e	; 62
   16870:	81 83       	std	Z+1, r24	; 0x01
   16872:	92 83       	std	Z+2, r25	; 0x02
   16874:	a3 83       	std	Z+3, r26	; 0x03
   16876:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   1687a:	80 e0       	ldi	r24, 0x00	; 0
   1687c:	91 e0       	ldi	r25, 0x01	; 1
   1687e:	9d 83       	std	Y+5, r25	; 0x05
   16880:	8c 83       	std	Y+4, r24	; 0x04
   16882:	80 91 ff 18 	lds	r24, 0x18FF	; 0x8018ff <AMIGOs>
   16886:	90 91 00 19 	lds	r25, 0x1900	; 0x801900 <AMIGOs+0x1>
   1688a:	ae 01       	movw	r20, r28
   1688c:	4c 5f       	subi	r20, 0xFC	; 252
   1688e:	5f 4f       	sbci	r21, 0xFF	; 255
   16890:	64 e0       	ldi	r22, 0x04	; 4
   16892:	70 e0       	ldi	r23, 0x00	; 0
   16894:	0d 96       	adiw	r24, 0x0d	; 13
   16896:	0e 94 ca 8b 	call	0x11794	; 0x11794 <gpib_write_str>
   1689a:	2c 81       	ldd	r18, Y+4	; 0x04
   1689c:	3d 81       	ldd	r19, Y+5	; 0x05
   1689e:	22 27       	eor	r18, r18
   168a0:	30 7d       	andi	r19, 0xD0	; 208
   168a2:	23 2b       	or	r18, r19
   168a4:	49 f0       	breq	.+18     	; 0x168b8 <amigo_send_logical_address+0x66>
   168a6:	e0 91 ff 18 	lds	r30, 0x18FF	; 0x8018ff <AMIGOs>
   168aa:	f0 91 00 19 	lds	r31, 0x1900	; 0x801900 <AMIGOs+0x1>
   168ae:	27 81       	ldd	r18, Z+7	; 0x07
   168b0:	30 85       	ldd	r19, Z+8	; 0x08
   168b2:	20 62       	ori	r18, 0x20	; 32
   168b4:	30 87       	std	Z+8, r19	; 0x08
   168b6:	27 83       	std	Z+7, r18	; 0x07
   168b8:	04 97       	sbiw	r24, 0x04	; 4
   168ba:	c9 f0       	breq	.+50     	; 0x168ee <amigo_send_logical_address+0x9c>
   168bc:	e0 91 ff 18 	lds	r30, 0x18FF	; 0x8018ff <AMIGOs>
   168c0:	f0 91 00 19 	lds	r31, 0x1900	; 0x801900 <AMIGOs+0x1>
   168c4:	87 81       	ldd	r24, Z+7	; 0x07
   168c6:	90 85       	ldd	r25, Z+8	; 0x08
   168c8:	80 62       	ori	r24, 0x20	; 32
   168ca:	90 87       	std	Z+8, r25	; 0x08
   168cc:	87 83       	std	Z+7, r24	; 0x07
   168ce:	81 e0       	ldi	r24, 0x01	; 1
   168d0:	86 83       	std	Z+6, r24	; 0x06
   168d2:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   168d6:	80 ff       	sbrs	r24, 0
   168d8:	0a c0       	rjmp	.+20     	; 0x168ee <amigo_send_logical_address+0x9c>
   168da:	84 ef       	ldi	r24, 0xF4	; 244
   168dc:	9e e2       	ldi	r25, 0x2E	; 46
   168de:	a0 e0       	ldi	r26, 0x00	; 0
   168e0:	ed b7       	in	r30, 0x3d	; 61
   168e2:	fe b7       	in	r31, 0x3e	; 62
   168e4:	81 83       	std	Z+1, r24	; 0x01
   168e6:	92 83       	std	Z+2, r25	; 0x02
   168e8:	a3 83       	std	Z+3, r26	; 0x03
   168ea:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   168ee:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOp>
   168f2:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOp+0x1>
   168f6:	81 81       	ldd	r24, Z+1	; 0x01
   168f8:	90 e0       	ldi	r25, 0x00	; 0
   168fa:	0e 94 70 86 	call	0x10ce0	; 0x10ce0 <gpib_enable_PPR>
   168fe:	8c 81       	ldd	r24, Y+4	; 0x04
   16900:	9d 81       	ldd	r25, Y+5	; 0x05
   16902:	88 27       	eor	r24, r24
   16904:	90 7d       	andi	r25, 0xD0	; 208
   16906:	25 96       	adiw	r28, 0x05	; 5
   16908:	e2 e0       	ldi	r30, 0x02	; 2
   1690a:	0c 94 f4 e3 	jmp	0x1c7e8	; 0x1c7e8 <__epilogue_restores__+0x20>

0001690e <amigo_send_status>:
   1690e:	a5 e0       	ldi	r26, 0x05	; 5
   16910:	b0 e0       	ldi	r27, 0x00	; 0
   16912:	ed e8       	ldi	r30, 0x8D	; 141
   16914:	f4 eb       	ldi	r31, 0xB4	; 180
   16916:	0c 94 d8 e3 	jmp	0x1c7b0	; 0x1c7b0 <__prologue_saves__+0x20>
   1691a:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1691e:	85 ff       	sbrs	r24, 5
   16920:	0a c0       	rjmp	.+20     	; 0x16936 <amigo_send_status+0x28>
   16922:	8f ed       	ldi	r24, 0xDF	; 223
   16924:	9e e2       	ldi	r25, 0x2E	; 46
   16926:	a0 e0       	ldi	r26, 0x00	; 0
   16928:	ed b7       	in	r30, 0x3d	; 61
   1692a:	fe b7       	in	r31, 0x3e	; 62
   1692c:	81 83       	std	Z+1, r24	; 0x01
   1692e:	92 83       	std	Z+2, r25	; 0x02
   16930:	a3 83       	std	Z+3, r26	; 0x03
   16932:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   16936:	80 e0       	ldi	r24, 0x00	; 0
   16938:	91 e0       	ldi	r25, 0x01	; 1
   1693a:	9d 83       	std	Y+5, r25	; 0x05
   1693c:	8c 83       	std	Y+4, r24	; 0x04
   1693e:	80 91 ff 18 	lds	r24, 0x18FF	; 0x8018ff <AMIGOs>
   16942:	90 91 00 19 	lds	r25, 0x1900	; 0x801900 <AMIGOs+0x1>
   16946:	ae 01       	movw	r20, r28
   16948:	4c 5f       	subi	r20, 0xFC	; 252
   1694a:	5f 4f       	sbci	r21, 0xFF	; 255
   1694c:	64 e0       	ldi	r22, 0x04	; 4
   1694e:	70 e0       	ldi	r23, 0x00	; 0
   16950:	09 96       	adiw	r24, 0x09	; 9
   16952:	0e 94 ca 8b 	call	0x11794	; 0x11794 <gpib_write_str>
   16956:	2c 81       	ldd	r18, Y+4	; 0x04
   16958:	3d 81       	ldd	r19, Y+5	; 0x05
   1695a:	22 27       	eor	r18, r18
   1695c:	30 7d       	andi	r19, 0xD0	; 208
   1695e:	e0 91 ff 18 	lds	r30, 0x18FF	; 0x8018ff <AMIGOs>
   16962:	f0 91 00 19 	lds	r31, 0x1900	; 0x801900 <AMIGOs+0x1>
   16966:	23 2b       	or	r18, r19
   16968:	29 f0       	breq	.+10     	; 0x16974 <amigo_send_status+0x66>
   1696a:	27 81       	ldd	r18, Z+7	; 0x07
   1696c:	30 85       	ldd	r19, Z+8	; 0x08
   1696e:	20 62       	ori	r18, 0x20	; 32
   16970:	30 87       	std	Z+8, r19	; 0x08
   16972:	27 83       	std	Z+7, r18	; 0x07
   16974:	04 97       	sbiw	r24, 0x04	; 4
   16976:	b1 f0       	breq	.+44     	; 0x169a4 <amigo_send_status+0x96>
   16978:	87 81       	ldd	r24, Z+7	; 0x07
   1697a:	90 85       	ldd	r25, Z+8	; 0x08
   1697c:	80 62       	ori	r24, 0x20	; 32
   1697e:	90 87       	std	Z+8, r25	; 0x08
   16980:	87 83       	std	Z+7, r24	; 0x07
   16982:	81 e0       	ldi	r24, 0x01	; 1
   16984:	86 83       	std	Z+6, r24	; 0x06
   16986:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1698a:	80 ff       	sbrs	r24, 0
   1698c:	0e c0       	rjmp	.+28     	; 0x169aa <amigo_send_status+0x9c>
   1698e:	85 ec       	ldi	r24, 0xC5	; 197
   16990:	9e e2       	ldi	r25, 0x2E	; 46
   16992:	a0 e0       	ldi	r26, 0x00	; 0
   16994:	ed b7       	in	r30, 0x3d	; 61
   16996:	fe b7       	in	r31, 0x3e	; 62
   16998:	81 83       	std	Z+1, r24	; 0x01
   1699a:	92 83       	std	Z+2, r25	; 0x02
   1699c:	a3 83       	std	Z+3, r26	; 0x03
   1699e:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   169a2:	03 c0       	rjmp	.+6      	; 0x169aa <amigo_send_status+0x9c>
   169a4:	10 86       	std	Z+8, r1	; 0x08
   169a6:	17 82       	std	Z+7, r1	; 0x07
   169a8:	16 82       	std	Z+6, r1	; 0x06
   169aa:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOp>
   169ae:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOp+0x1>
   169b2:	81 81       	ldd	r24, Z+1	; 0x01
   169b4:	90 e0       	ldi	r25, 0x00	; 0
   169b6:	0e 94 70 86 	call	0x10ce0	; 0x10ce0 <gpib_enable_PPR>
   169ba:	8c 81       	ldd	r24, Y+4	; 0x04
   169bc:	9d 81       	ldd	r25, Y+5	; 0x05
   169be:	88 27       	eor	r24, r24
   169c0:	90 7d       	andi	r25, 0xD0	; 208
   169c2:	25 96       	adiw	r28, 0x05	; 5
   169c4:	e2 e0       	ldi	r30, 0x02	; 2
   169c6:	0c 94 f4 e3 	jmp	0x1c7e8	; 0x1c7e8 <__epilogue_restores__+0x20>

000169ca <amigo_increment>:
   169ca:	a1 e1       	ldi	r26, 0x11	; 17
   169cc:	b0 e0       	ldi	r27, 0x00	; 0
   169ce:	eb ee       	ldi	r30, 0xEB	; 235
   169d0:	f4 eb       	ldi	r31, 0xB4	; 180
   169d2:	0c 94 d8 e3 	jmp	0x1c7b0	; 0x1c7b0 <__prologue_saves__+0x20>
   169d6:	bc 01       	movw	r22, r24
   169d8:	e0 91 ff 18 	lds	r30, 0x18FF	; 0x8018ff <AMIGOs>
   169dc:	f0 91 00 19 	lds	r31, 0x1900	; 0x801900 <AMIGOs+0x1>
   169e0:	91 e1       	ldi	r25, 0x11	; 17
   169e2:	de 01       	movw	r26, r28
   169e4:	11 96       	adiw	r26, 0x01	; 1
   169e6:	01 90       	ld	r0, Z+
   169e8:	0d 92       	st	X+, r0
   169ea:	9a 95       	dec	r25
   169ec:	e1 f7       	brne	.-8      	; 0x169e6 <amigo_increment+0x1c>
   169ee:	9e 81       	ldd	r25, Y+6	; 0x06
   169f0:	9f 5f       	subi	r25, 0xFF	; 255
   169f2:	9e 83       	std	Y+6, r25	; 0x06
   169f4:	ce 01       	movw	r24, r28
   169f6:	01 96       	adiw	r24, 0x01	; 1
   169f8:	b3 dd       	rcall	.-1178   	; 0x16560 <amigo_overflow_check>
   169fa:	00 97       	sbiw	r24, 0x00	; 0
   169fc:	59 f4       	brne	.+22     	; 0x16a14 <amigo_increment+0x4a>
   169fe:	a0 91 ff 18 	lds	r26, 0x18FF	; 0x8018ff <AMIGOs>
   16a02:	b0 91 00 19 	lds	r27, 0x1900	; 0x801900 <AMIGOs+0x1>
   16a06:	21 e1       	ldi	r18, 0x11	; 17
   16a08:	fe 01       	movw	r30, r28
   16a0a:	31 96       	adiw	r30, 0x01	; 1
   16a0c:	01 90       	ld	r0, Z+
   16a0e:	0d 92       	st	X+, r0
   16a10:	2a 95       	dec	r18
   16a12:	e1 f7       	brne	.-8      	; 0x16a0c <amigo_increment+0x42>
   16a14:	61 96       	adiw	r28, 0x11	; 17
   16a16:	e2 e0       	ldi	r30, 0x02	; 2
   16a18:	0c 94 f4 e3 	jmp	0x1c7e8	; 0x1c7e8 <__epilogue_restores__+0x20>

00016a1c <amigo_seek>:
   16a1c:	0f 93       	push	r16
   16a1e:	1f 93       	push	r17
   16a20:	cf 93       	push	r28
   16a22:	df 93       	push	r29
   16a24:	ec 01       	movw	r28, r24
   16a26:	60 ea       	ldi	r22, 0xA0	; 160
   16a28:	74 e1       	ldi	r23, 0x14	; 20
   16a2a:	9a dd       	rcall	.-1228   	; 0x16560 <amigo_overflow_check>
   16a2c:	8c 01       	movw	r16, r24
   16a2e:	e0 91 ff 18 	lds	r30, 0x18FF	; 0x8018ff <AMIGOs>
   16a32:	f0 91 00 19 	lds	r31, 0x1900	; 0x801900 <AMIGOs+0x1>
   16a36:	89 2b       	or	r24, r25
   16a38:	41 f0       	breq	.+16     	; 0x16a4a <amigo_seek+0x2e>
   16a3a:	81 e0       	ldi	r24, 0x01	; 1
   16a3c:	86 83       	std	Z+6, r24	; 0x06
   16a3e:	87 81       	ldd	r24, Z+7	; 0x07
   16a40:	90 85       	ldd	r25, Z+8	; 0x08
   16a42:	84 60       	ori	r24, 0x04	; 4
   16a44:	90 87       	std	Z+8, r25	; 0x08
   16a46:	87 83       	std	Z+7, r24	; 0x07
   16a48:	06 c0       	rjmp	.+12     	; 0x16a56 <amigo_seek+0x3a>
   16a4a:	8d 81       	ldd	r24, Y+5	; 0x05
   16a4c:	85 83       	std	Z+5, r24	; 0x05
   16a4e:	8c 81       	ldd	r24, Y+4	; 0x04
   16a50:	84 83       	std	Z+4, r24	; 0x04
   16a52:	8b 81       	ldd	r24, Y+3	; 0x03
   16a54:	83 83       	std	Z+3, r24	; 0x03
   16a56:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOp>
   16a5a:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOp+0x1>
   16a5e:	81 81       	ldd	r24, Z+1	; 0x01
   16a60:	90 e0       	ldi	r25, 0x00	; 0
   16a62:	0e 94 70 86 	call	0x10ce0	; 0x10ce0 <gpib_enable_PPR>
   16a66:	c8 01       	movw	r24, r16
   16a68:	df 91       	pop	r29
   16a6a:	cf 91       	pop	r28
   16a6c:	1f 91       	pop	r17
   16a6e:	0f 91       	pop	r16
   16a70:	08 95       	ret

00016a72 <amigo_verify>:
   16a72:	8f 92       	push	r8
   16a74:	9f 92       	push	r9
   16a76:	af 92       	push	r10
   16a78:	bf 92       	push	r11
   16a7a:	ef 92       	push	r14
   16a7c:	ff 92       	push	r15
   16a7e:	0f 93       	push	r16
   16a80:	1f 93       	push	r17
   16a82:	cf 93       	push	r28
   16a84:	df 93       	push	r29
   16a86:	ad b7       	in	r26, 0x3d	; 61
   16a88:	be b7       	in	r27, 0x3e	; 62
   16a8a:	19 97       	sbiw	r26, 0x09	; 9
   16a8c:	0f b6       	in	r0, 0x3f	; 63
   16a8e:	f8 94       	cli
   16a90:	be bf       	out	0x3e, r27	; 62
   16a92:	0f be       	out	0x3f, r0	; 63
   16a94:	ad bf       	out	0x3d, r26	; 61
   16a96:	7c 01       	movw	r14, r24
   16a98:	65 ea       	ldi	r22, 0xA5	; 165
   16a9a:	74 e1       	ldi	r23, 0x14	; 20
   16a9c:	80 91 ff 18 	lds	r24, 0x18FF	; 0x8018ff <AMIGOs>
   16aa0:	90 91 00 19 	lds	r25, 0x1900	; 0x801900 <AMIGOs+0x1>
   16aa4:	b3 dd       	rcall	.-1178   	; 0x1660c <amigo_chs_to_logical>
   16aa6:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   16aaa:	25 ff       	sbrs	r18, 5
   16aac:	10 c0       	rjmp	.+32     	; 0x16ace <amigo_verify+0x5c>
   16aae:	ed b7       	in	r30, 0x3d	; 61
   16ab0:	fe b7       	in	r31, 0x3e	; 62
   16ab2:	e0 86       	std	Z+8, r14	; 0x08
   16ab4:	f1 86       	std	Z+9, r15	; 0x09
   16ab6:	64 83       	std	Z+4, r22	; 0x04
   16ab8:	75 83       	std	Z+5, r23	; 0x05
   16aba:	86 83       	std	Z+6, r24	; 0x06
   16abc:	97 83       	std	Z+7, r25	; 0x07
   16abe:	84 e8       	ldi	r24, 0x84	; 132
   16ac0:	9e e2       	ldi	r25, 0x2E	; 46
   16ac2:	a0 e0       	ldi	r26, 0x00	; 0
   16ac4:	81 83       	std	Z+1, r24	; 0x01
   16ac6:	92 83       	std	Z+2, r25	; 0x02
   16ac8:	a3 83       	std	Z+3, r26	; 0x03
   16aca:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   16ace:	e7 01       	movw	r28, r14
   16ad0:	20 97       	sbiw	r28, 0x00	; 0
   16ad2:	09 f4       	brne	.+2      	; 0x16ad6 <amigo_verify+0x64>
   16ad4:	49 c0       	rjmp	.+146    	; 0x16b68 <amigo_verify+0xf6>
   16ad6:	62 eb       	ldi	r22, 0xB2	; 178
   16ad8:	74 e1       	ldi	r23, 0x14	; 20
   16ada:	80 91 ff 18 	lds	r24, 0x18FF	; 0x8018ff <AMIGOs>
   16ade:	90 91 00 19 	lds	r25, 0x1900	; 0x801900 <AMIGOs+0x1>
   16ae2:	94 dd       	rcall	.-1240   	; 0x1660c <amigo_chs_to_logical>
   16ae4:	4b 01       	movw	r8, r22
   16ae6:	5c 01       	movw	r10, r24
   16ae8:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16aec:	86 fd       	sbrc	r24, 6
   16aee:	0e 94 ae 85 	call	0x10b5c	; 0x10b5c <gpib_timer_elapsed_begin>
   16af2:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOp>
   16af6:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOp+0x1>
   16afa:	e0 90 ff 18 	lds	r14, 0x18FF	; 0x8018ff <AMIGOs>
   16afe:	f0 90 00 19 	lds	r15, 0x1900	; 0x801900 <AMIGOs+0x1>
   16b02:	87 e0       	ldi	r24, 0x07	; 7
   16b04:	e8 0e       	add	r14, r24
   16b06:	f1 1c       	adc	r15, r1
   16b08:	06 81       	ldd	r16, Z+6	; 0x06
   16b0a:	17 81       	ldd	r17, Z+7	; 0x07
   16b0c:	20 e8       	ldi	r18, 0x80	; 128
   16b0e:	3c e1       	ldi	r19, 0x1C	; 28
   16b10:	b5 01       	movw	r22, r10
   16b12:	a4 01       	movw	r20, r8
   16b14:	82 81       	ldd	r24, Z+2	; 0x02
   16b16:	93 81       	ldd	r25, Z+3	; 0x03
   16b18:	0e 94 00 85 	call	0x10a00	; 0x10a00 <dbf_open_read>
   16b1c:	7c 01       	movw	r14, r24
   16b1e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16b22:	86 ff       	sbrs	r24, 6
   16b24:	04 c0       	rjmp	.+8      	; 0x16b2e <amigo_verify+0xbc>
   16b26:	8a eb       	ldi	r24, 0xBA	; 186
   16b28:	9f e0       	ldi	r25, 0x0F	; 15
   16b2a:	0e 94 c0 85 	call	0x10b80	; 0x10b80 <gpib_timer_elapsed_end>
   16b2e:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOp>
   16b32:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOp+0x1>
   16b36:	86 81       	ldd	r24, Z+6	; 0x06
   16b38:	97 81       	ldd	r25, Z+7	; 0x07
   16b3a:	e8 16       	cp	r14, r24
   16b3c:	f9 06       	cpc	r15, r25
   16b3e:	61 f0       	breq	.+24     	; 0x16b58 <amigo_verify+0xe6>
   16b40:	e0 91 ff 18 	lds	r30, 0x18FF	; 0x8018ff <AMIGOs>
   16b44:	f0 91 00 19 	lds	r31, 0x1900	; 0x801900 <AMIGOs+0x1>
   16b48:	81 e0       	ldi	r24, 0x01	; 1
   16b4a:	86 83       	std	Z+6, r24	; 0x06
   16b4c:	87 81       	ldd	r24, Z+7	; 0x07
   16b4e:	90 85       	ldd	r25, Z+8	; 0x08
   16b50:	81 60       	ori	r24, 0x01	; 1
   16b52:	90 87       	std	Z+8, r25	; 0x08
   16b54:	87 83       	std	Z+7, r24	; 0x07
   16b56:	0b c0       	rjmp	.+22     	; 0x16b6e <amigo_verify+0xfc>
   16b58:	8a eb       	ldi	r24, 0xBA	; 186
   16b5a:	94 e1       	ldi	r25, 0x14	; 20
   16b5c:	36 df       	rcall	.-404    	; 0x169ca <amigo_increment>
   16b5e:	21 97       	sbiw	r28, 0x01	; 1
   16b60:	89 2b       	or	r24, r25
   16b62:	09 f4       	brne	.+2      	; 0x16b66 <amigo_verify+0xf4>
   16b64:	b5 cf       	rjmp	.-150    	; 0x16ad0 <amigo_verify+0x5e>
   16b66:	03 c0       	rjmp	.+6      	; 0x16b6e <amigo_verify+0xfc>
   16b68:	c0 e0       	ldi	r28, 0x00	; 0
   16b6a:	d0 e0       	ldi	r29, 0x00	; 0
   16b6c:	02 c0       	rjmp	.+4      	; 0x16b72 <amigo_verify+0x100>
   16b6e:	c1 e0       	ldi	r28, 0x01	; 1
   16b70:	d0 e0       	ldi	r29, 0x00	; 0
   16b72:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOp>
   16b76:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOp+0x1>
   16b7a:	81 81       	ldd	r24, Z+1	; 0x01
   16b7c:	90 e0       	ldi	r25, 0x00	; 0
   16b7e:	0e 94 70 86 	call	0x10ce0	; 0x10ce0 <gpib_enable_PPR>
   16b82:	ce 01       	movw	r24, r28
   16b84:	ad b7       	in	r26, 0x3d	; 61
   16b86:	be b7       	in	r27, 0x3e	; 62
   16b88:	19 96       	adiw	r26, 0x09	; 9
   16b8a:	0f b6       	in	r0, 0x3f	; 63
   16b8c:	f8 94       	cli
   16b8e:	be bf       	out	0x3e, r27	; 62
   16b90:	0f be       	out	0x3f, r0	; 63
   16b92:	ad bf       	out	0x3d, r26	; 61
   16b94:	df 91       	pop	r29
   16b96:	cf 91       	pop	r28
   16b98:	1f 91       	pop	r17
   16b9a:	0f 91       	pop	r16
   16b9c:	ff 90       	pop	r15
   16b9e:	ef 90       	pop	r14
   16ba0:	bf 90       	pop	r11
   16ba2:	af 90       	pop	r10
   16ba4:	9f 90       	pop	r9
   16ba6:	8f 90       	pop	r8
   16ba8:	08 95       	ret

00016baa <amigo_format>:
   16baa:	ef 92       	push	r14
   16bac:	ff 92       	push	r15
   16bae:	0f 93       	push	r16
   16bb0:	1f 93       	push	r17
   16bb2:	cf 93       	push	r28
   16bb4:	df 93       	push	r29
   16bb6:	00 d0       	rcall	.+0      	; 0x16bb8 <amigo_format+0xe>
   16bb8:	1f 92       	push	r1
   16bba:	e0 91 ff 18 	lds	r30, 0x18FF	; 0x8018ff <AMIGOs>
   16bbe:	f0 91 00 19 	lds	r31, 0x1900	; 0x801900 <AMIGOs+0x1>
   16bc2:	15 82       	std	Z+5, r1	; 0x05
   16bc4:	14 82       	std	Z+4, r1	; 0x04
   16bc6:	13 82       	std	Z+3, r1	; 0x03
   16bc8:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOp>
   16bcc:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOp+0x1>
   16bd0:	46 81       	ldd	r20, Z+6	; 0x06
   16bd2:	57 81       	ldd	r21, Z+7	; 0x07
   16bd4:	68 2f       	mov	r22, r24
   16bd6:	70 e0       	ldi	r23, 0x00	; 0
   16bd8:	80 e8       	ldi	r24, 0x80	; 128
   16bda:	9c e1       	ldi	r25, 0x1C	; 28
   16bdc:	0e 94 98 e8 	call	0x1d130	; 0x1d130 <memset>
   16be0:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16be4:	85 ff       	sbrs	r24, 5
   16be6:	0a c0       	rjmp	.+20     	; 0x16bfc <amigo_format+0x52>
   16be8:	89 e4       	ldi	r24, 0x49	; 73
   16bea:	9e e2       	ldi	r25, 0x2E	; 46
   16bec:	a0 e0       	ldi	r26, 0x00	; 0
   16bee:	ed b7       	in	r30, 0x3d	; 61
   16bf0:	fe b7       	in	r31, 0x3e	; 62
   16bf2:	81 83       	std	Z+1, r24	; 0x01
   16bf4:	92 83       	std	Z+2, r25	; 0x02
   16bf6:	a3 83       	std	Z+3, r26	; 0x03
   16bf8:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   16bfc:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16c00:	86 fd       	sbrc	r24, 6
   16c02:	0e 94 ae 85 	call	0x10b5c	; 0x10b5c <gpib_timer_elapsed_begin>
   16c06:	61 ec       	ldi	r22, 0xC1	; 193
   16c08:	74 e1       	ldi	r23, 0x14	; 20
   16c0a:	80 91 ff 18 	lds	r24, 0x18FF	; 0x8018ff <AMIGOs>
   16c0e:	90 91 00 19 	lds	r25, 0x1900	; 0x801900 <AMIGOs+0x1>
   16c12:	fc dc       	rcall	.-1544   	; 0x1660c <amigo_chs_to_logical>
   16c14:	ab 01       	movw	r20, r22
   16c16:	bc 01       	movw	r22, r24
   16c18:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOp>
   16c1c:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOp+0x1>
   16c20:	e0 90 ff 18 	lds	r14, 0x18FF	; 0x8018ff <AMIGOs>
   16c24:	f0 90 00 19 	lds	r15, 0x1900	; 0x801900 <AMIGOs+0x1>
   16c28:	87 e0       	ldi	r24, 0x07	; 7
   16c2a:	e8 0e       	add	r14, r24
   16c2c:	f1 1c       	adc	r15, r1
   16c2e:	06 81       	ldd	r16, Z+6	; 0x06
   16c30:	17 81       	ldd	r17, Z+7	; 0x07
   16c32:	20 e8       	ldi	r18, 0x80	; 128
   16c34:	3c e1       	ldi	r19, 0x1C	; 28
   16c36:	82 81       	ldd	r24, Z+2	; 0x02
   16c38:	93 81       	ldd	r25, Z+3	; 0x03
   16c3a:	0e 94 57 85 	call	0x10aae	; 0x10aae <dbf_open_write>
   16c3e:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOp>
   16c42:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOp+0x1>
   16c46:	26 81       	ldd	r18, Z+6	; 0x06
   16c48:	37 81       	ldd	r19, Z+7	; 0x07
   16c4a:	82 17       	cp	r24, r18
   16c4c:	93 07       	cpc	r25, r19
   16c4e:	71 f0       	breq	.+28     	; 0x16c6c <amigo_format+0xc2>
   16c50:	e0 91 ff 18 	lds	r30, 0x18FF	; 0x8018ff <AMIGOs>
   16c54:	f0 91 00 19 	lds	r31, 0x1900	; 0x801900 <AMIGOs+0x1>
   16c58:	87 81       	ldd	r24, Z+7	; 0x07
   16c5a:	90 85       	ldd	r25, Z+8	; 0x08
   16c5c:	82 60       	ori	r24, 0x02	; 2
   16c5e:	90 87       	std	Z+8, r25	; 0x08
   16c60:	87 83       	std	Z+7, r24	; 0x07
   16c62:	81 e0       	ldi	r24, 0x01	; 1
   16c64:	86 83       	std	Z+6, r24	; 0x06
   16c66:	c1 e0       	ldi	r28, 0x01	; 1
   16c68:	d0 e0       	ldi	r29, 0x00	; 0
   16c6a:	0f c0       	rjmp	.+30     	; 0x16c8a <amigo_format+0xe0>
   16c6c:	80 e0       	ldi	r24, 0x00	; 0
   16c6e:	90 e0       	ldi	r25, 0x00	; 0
   16c70:	ac de       	rcall	.-680    	; 0x169ca <amigo_increment>
   16c72:	89 2b       	or	r24, r25
   16c74:	41 f2       	breq	.-112    	; 0x16c06 <amigo_format+0x5c>
   16c76:	e0 91 ff 18 	lds	r30, 0x18FF	; 0x8018ff <AMIGOs>
   16c7a:	f0 91 00 19 	lds	r31, 0x1900	; 0x801900 <AMIGOs+0x1>
   16c7e:	15 82       	std	Z+5, r1	; 0x05
   16c80:	14 82       	std	Z+4, r1	; 0x04
   16c82:	13 82       	std	Z+3, r1	; 0x03
   16c84:	16 82       	std	Z+6, r1	; 0x06
   16c86:	c0 e0       	ldi	r28, 0x00	; 0
   16c88:	d0 e0       	ldi	r29, 0x00	; 0
   16c8a:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16c8e:	86 ff       	sbrs	r24, 6
   16c90:	04 c0       	rjmp	.+8      	; 0x16c9a <amigo_format+0xf0>
   16c92:	81 ec       	ldi	r24, 0xC1	; 193
   16c94:	94 e1       	ldi	r25, 0x14	; 20
   16c96:	0e 94 c0 85 	call	0x10b80	; 0x10b80 <gpib_timer_elapsed_end>
   16c9a:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16c9e:	85 ff       	sbrs	r24, 5
   16ca0:	0a c0       	rjmp	.+20     	; 0x16cb6 <amigo_format+0x10c>
   16ca2:	84 e3       	ldi	r24, 0x34	; 52
   16ca4:	9e e2       	ldi	r25, 0x2E	; 46
   16ca6:	a0 e0       	ldi	r26, 0x00	; 0
   16ca8:	ed b7       	in	r30, 0x3d	; 61
   16caa:	fe b7       	in	r31, 0x3e	; 62
   16cac:	81 83       	std	Z+1, r24	; 0x01
   16cae:	92 83       	std	Z+2, r25	; 0x02
   16cb0:	a3 83       	std	Z+3, r26	; 0x03
   16cb2:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   16cb6:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOp>
   16cba:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOp+0x1>
   16cbe:	81 81       	ldd	r24, Z+1	; 0x01
   16cc0:	90 e0       	ldi	r25, 0x00	; 0
   16cc2:	0e 94 70 86 	call	0x10ce0	; 0x10ce0 <gpib_enable_PPR>
   16cc6:	ce 01       	movw	r24, r28
   16cc8:	cd b7       	in	r28, 0x3d	; 61
   16cca:	de b7       	in	r29, 0x3e	; 62
   16ccc:	23 96       	adiw	r28, 0x03	; 3
   16cce:	e6 e0       	ldi	r30, 0x06	; 6
   16cd0:	0c 94 f0 e3 	jmp	0x1c7e0	; 0x1c7e0 <__epilogue_restores__+0x18>

00016cd4 <amigo_buffered_read>:
   16cd4:	8f 92       	push	r8
   16cd6:	9f 92       	push	r9
   16cd8:	af 92       	push	r10
   16cda:	bf 92       	push	r11
   16cdc:	ef 92       	push	r14
   16cde:	ff 92       	push	r15
   16ce0:	0f 93       	push	r16
   16ce2:	1f 93       	push	r17
   16ce4:	cf 93       	push	r28
   16ce6:	df 93       	push	r29
   16ce8:	00 d0       	rcall	.+0      	; 0x16cea <amigo_buffered_read+0x16>
   16cea:	00 d0       	rcall	.+0      	; 0x16cec <amigo_buffered_read+0x18>
   16cec:	1f 92       	push	r1
   16cee:	cd b7       	in	r28, 0x3d	; 61
   16cf0:	de b7       	in	r29, 0x3e	; 62
   16cf2:	68 ec       	ldi	r22, 0xC8	; 200
   16cf4:	74 e1       	ldi	r23, 0x14	; 20
   16cf6:	80 91 ff 18 	lds	r24, 0x18FF	; 0x8018ff <AMIGOs>
   16cfa:	90 91 00 19 	lds	r25, 0x1900	; 0x801900 <AMIGOs+0x1>
   16cfe:	86 dc       	rcall	.-1780   	; 0x1660c <amigo_chs_to_logical>
   16d00:	4b 01       	movw	r8, r22
   16d02:	5c 01       	movw	r10, r24
   16d04:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16d08:	86 fd       	sbrc	r24, 6
   16d0a:	0e 94 ae 85 	call	0x10b5c	; 0x10b5c <gpib_timer_elapsed_begin>
   16d0e:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOp>
   16d12:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOp+0x1>
   16d16:	e0 90 ff 18 	lds	r14, 0x18FF	; 0x8018ff <AMIGOs>
   16d1a:	f0 90 00 19 	lds	r15, 0x1900	; 0x801900 <AMIGOs+0x1>
   16d1e:	87 e0       	ldi	r24, 0x07	; 7
   16d20:	e8 0e       	add	r14, r24
   16d22:	f1 1c       	adc	r15, r1
   16d24:	06 81       	ldd	r16, Z+6	; 0x06
   16d26:	17 81       	ldd	r17, Z+7	; 0x07
   16d28:	20 e8       	ldi	r18, 0x80	; 128
   16d2a:	3c e1       	ldi	r19, 0x1C	; 28
   16d2c:	b5 01       	movw	r22, r10
   16d2e:	a4 01       	movw	r20, r8
   16d30:	82 81       	ldd	r24, Z+2	; 0x02
   16d32:	93 81       	ldd	r25, Z+3	; 0x03
   16d34:	0e 94 00 85 	call	0x10a00	; 0x10a00 <dbf_open_read>
   16d38:	7c 01       	movw	r14, r24
   16d3a:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16d3e:	86 ff       	sbrs	r24, 6
   16d40:	04 c0       	rjmp	.+8      	; 0x16d4a <amigo_buffered_read+0x76>
   16d42:	8a eb       	ldi	r24, 0xBA	; 186
   16d44:	9f e0       	ldi	r25, 0x0F	; 15
   16d46:	0e 94 c0 85 	call	0x10b80	; 0x10b80 <gpib_timer_elapsed_end>
   16d4a:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOp>
   16d4e:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOp+0x1>
   16d52:	86 81       	ldd	r24, Z+6	; 0x06
   16d54:	97 81       	ldd	r25, Z+7	; 0x07
   16d56:	e8 16       	cp	r14, r24
   16d58:	f9 06       	cpc	r15, r25
   16d5a:	39 f0       	breq	.+14     	; 0x16d6a <amigo_buffered_read+0x96>
   16d5c:	e0 91 ff 18 	lds	r30, 0x18FF	; 0x8018ff <AMIGOs>
   16d60:	f0 91 00 19 	lds	r31, 0x1900	; 0x801900 <AMIGOs+0x1>
   16d64:	81 e0       	ldi	r24, 0x01	; 1
   16d66:	86 83       	std	Z+6, r24	; 0x06
   16d68:	6c c0       	rjmp	.+216    	; 0x16e42 <amigo_buffered_read+0x16e>
   16d6a:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16d6e:	87 fd       	sbrc	r24, 7
   16d70:	0e 94 ae 85 	call	0x10b5c	; 0x10b5c <gpib_timer_elapsed_begin>
   16d74:	80 e0       	ldi	r24, 0x00	; 0
   16d76:	91 e0       	ldi	r25, 0x01	; 1
   16d78:	9d 83       	std	Y+5, r25	; 0x05
   16d7a:	8c 83       	std	Y+4, r24	; 0x04
   16d7c:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOp>
   16d80:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOp+0x1>
   16d84:	66 81       	ldd	r22, Z+6	; 0x06
   16d86:	77 81       	ldd	r23, Z+7	; 0x07
   16d88:	ae 01       	movw	r20, r28
   16d8a:	4c 5f       	subi	r20, 0xFC	; 252
   16d8c:	5f 4f       	sbci	r21, 0xFF	; 255
   16d8e:	80 e8       	ldi	r24, 0x80	; 128
   16d90:	9c e1       	ldi	r25, 0x1C	; 28
   16d92:	0e 94 ca 8b 	call	0x11794	; 0x11794 <gpib_write_str>
   16d96:	7c 01       	movw	r14, r24
   16d98:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16d9c:	87 ff       	sbrs	r24, 7
   16d9e:	04 c0       	rjmp	.+8      	; 0x16da8 <amigo_buffered_read+0xd4>
   16da0:	86 ed       	ldi	r24, 0xD6	; 214
   16da2:	94 e1       	ldi	r25, 0x14	; 20
   16da4:	0e 94 c0 85 	call	0x10b80	; 0x10b80 <gpib_timer_elapsed_end>
   16da8:	8c 81       	ldd	r24, Y+4	; 0x04
   16daa:	9d 81       	ldd	r25, Y+5	; 0x05
   16dac:	88 27       	eor	r24, r24
   16dae:	90 7d       	andi	r25, 0xD0	; 208
   16db0:	89 2b       	or	r24, r25
   16db2:	49 f4       	brne	.+18     	; 0x16dc6 <amigo_buffered_read+0xf2>
   16db4:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOp>
   16db8:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOp+0x1>
   16dbc:	86 81       	ldd	r24, Z+6	; 0x06
   16dbe:	97 81       	ldd	r25, Z+7	; 0x07
   16dc0:	e8 16       	cp	r14, r24
   16dc2:	f9 06       	cpc	r15, r25
   16dc4:	31 f1       	breq	.+76     	; 0x16e12 <amigo_buffered_read+0x13e>
   16dc6:	e0 91 ff 18 	lds	r30, 0x18FF	; 0x8018ff <AMIGOs>
   16dca:	f0 91 00 19 	lds	r31, 0x1900	; 0x801900 <AMIGOs+0x1>
   16dce:	81 e0       	ldi	r24, 0x01	; 1
   16dd0:	86 83       	std	Z+6, r24	; 0x06
   16dd2:	87 81       	ldd	r24, Z+7	; 0x07
   16dd4:	90 85       	ldd	r25, Z+8	; 0x08
   16dd6:	80 62       	ori	r24, 0x20	; 32
   16dd8:	90 87       	std	Z+8, r25	; 0x08
   16dda:	87 83       	std	Z+7, r24	; 0x07
   16ddc:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16de0:	80 ff       	sbrs	r24, 0
   16de2:	0a c0       	rjmp	.+20     	; 0x16df8 <amigo_buffered_read+0x124>
   16de4:	8a e1       	ldi	r24, 0x1A	; 26
   16de6:	9e e2       	ldi	r25, 0x2E	; 46
   16de8:	a0 e0       	ldi	r26, 0x00	; 0
   16dea:	ed b7       	in	r30, 0x3d	; 61
   16dec:	fe b7       	in	r31, 0x3e	; 62
   16dee:	81 83       	std	Z+1, r24	; 0x01
   16df0:	92 83       	std	Z+2, r25	; 0x02
   16df2:	a3 83       	std	Z+3, r26	; 0x03
   16df4:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   16df8:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOp>
   16dfc:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOp+0x1>
   16e00:	81 81       	ldd	r24, Z+1	; 0x01
   16e02:	90 e0       	ldi	r25, 0x00	; 0
   16e04:	0e 94 70 86 	call	0x10ce0	; 0x10ce0 <gpib_enable_PPR>
   16e08:	8c 81       	ldd	r24, Y+4	; 0x04
   16e0a:	9d 81       	ldd	r25, Y+5	; 0x05
   16e0c:	88 27       	eor	r24, r24
   16e0e:	90 7d       	andi	r25, 0xD0	; 208
   16e10:	1a c0       	rjmp	.+52     	; 0x16e46 <amigo_buffered_read+0x172>
   16e12:	88 ec       	ldi	r24, 0xC8	; 200
   16e14:	94 e1       	ldi	r25, 0x14	; 20
   16e16:	d9 dd       	rcall	.-1102   	; 0x169ca <amigo_increment>
   16e18:	89 2b       	or	r24, r25
   16e1a:	59 f0       	breq	.+22     	; 0x16e32 <amigo_buffered_read+0x15e>
   16e1c:	e0 91 ff 18 	lds	r30, 0x18FF	; 0x8018ff <AMIGOs>
   16e20:	f0 91 00 19 	lds	r31, 0x1900	; 0x801900 <AMIGOs+0x1>
   16e24:	81 e0       	ldi	r24, 0x01	; 1
   16e26:	86 83       	std	Z+6, r24	; 0x06
   16e28:	87 81       	ldd	r24, Z+7	; 0x07
   16e2a:	90 85       	ldd	r25, Z+8	; 0x08
   16e2c:	84 60       	ori	r24, 0x04	; 4
   16e2e:	90 87       	std	Z+8, r25	; 0x08
   16e30:	87 83       	std	Z+7, r24	; 0x07
   16e32:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOp>
   16e36:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOp+0x1>
   16e3a:	81 81       	ldd	r24, Z+1	; 0x01
   16e3c:	90 e0       	ldi	r25, 0x00	; 0
   16e3e:	0e 94 70 86 	call	0x10ce0	; 0x10ce0 <gpib_enable_PPR>
   16e42:	80 e0       	ldi	r24, 0x00	; 0
   16e44:	90 e0       	ldi	r25, 0x00	; 0
   16e46:	0f 90       	pop	r0
   16e48:	0f 90       	pop	r0
   16e4a:	0f 90       	pop	r0
   16e4c:	0f 90       	pop	r0
   16e4e:	0f 90       	pop	r0
   16e50:	df 91       	pop	r29
   16e52:	cf 91       	pop	r28
   16e54:	1f 91       	pop	r17
   16e56:	0f 91       	pop	r16
   16e58:	ff 90       	pop	r15
   16e5a:	ef 90       	pop	r14
   16e5c:	bf 90       	pop	r11
   16e5e:	af 90       	pop	r10
   16e60:	9f 90       	pop	r9
   16e62:	8f 90       	pop	r8
   16e64:	08 95       	ret

00016e66 <amigo_buffered_write>:
   16e66:	8f 92       	push	r8
   16e68:	9f 92       	push	r9
   16e6a:	af 92       	push	r10
   16e6c:	bf 92       	push	r11
   16e6e:	ef 92       	push	r14
   16e70:	ff 92       	push	r15
   16e72:	0f 93       	push	r16
   16e74:	1f 93       	push	r17
   16e76:	cf 93       	push	r28
   16e78:	df 93       	push	r29
   16e7a:	00 d0       	rcall	.+0      	; 0x16e7c <amigo_buffered_write+0x16>
   16e7c:	00 d0       	rcall	.+0      	; 0x16e7e <amigo_buffered_write+0x18>
   16e7e:	1f 92       	push	r1
   16e80:	cd b7       	in	r28, 0x3d	; 61
   16e82:	de b7       	in	r29, 0x3e	; 62
   16e84:	61 ee       	ldi	r22, 0xE1	; 225
   16e86:	74 e1       	ldi	r23, 0x14	; 20
   16e88:	80 91 ff 18 	lds	r24, 0x18FF	; 0x8018ff <AMIGOs>
   16e8c:	90 91 00 19 	lds	r25, 0x1900	; 0x801900 <AMIGOs+0x1>
   16e90:	bd db       	rcall	.-2182   	; 0x1660c <amigo_chs_to_logical>
   16e92:	4b 01       	movw	r8, r22
   16e94:	5c 01       	movw	r10, r24
   16e96:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16e9a:	87 fd       	sbrc	r24, 7
   16e9c:	0e 94 ae 85 	call	0x10b5c	; 0x10b5c <gpib_timer_elapsed_begin>
   16ea0:	1d 82       	std	Y+5, r1	; 0x05
   16ea2:	1c 82       	std	Y+4, r1	; 0x04
   16ea4:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOp>
   16ea8:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOp+0x1>
   16eac:	66 81       	ldd	r22, Z+6	; 0x06
   16eae:	77 81       	ldd	r23, Z+7	; 0x07
   16eb0:	ae 01       	movw	r20, r28
   16eb2:	4c 5f       	subi	r20, 0xFC	; 252
   16eb4:	5f 4f       	sbci	r21, 0xFF	; 255
   16eb6:	80 e8       	ldi	r24, 0x80	; 128
   16eb8:	9c e1       	ldi	r25, 0x1C	; 28
   16eba:	0e 94 28 8b 	call	0x11650	; 0x11650 <gpib_read_str>
   16ebe:	7c 01       	movw	r14, r24
   16ec0:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16ec4:	87 ff       	sbrs	r24, 7
   16ec6:	04 c0       	rjmp	.+8      	; 0x16ed0 <amigo_buffered_write+0x6a>
   16ec8:	80 ef       	ldi	r24, 0xF0	; 240
   16eca:	94 e1       	ldi	r25, 0x14	; 20
   16ecc:	0e 94 c0 85 	call	0x10b80	; 0x10b80 <gpib_timer_elapsed_end>
   16ed0:	8c 81       	ldd	r24, Y+4	; 0x04
   16ed2:	9d 81       	ldd	r25, Y+5	; 0x05
   16ed4:	88 27       	eor	r24, r24
   16ed6:	90 7d       	andi	r25, 0xD0	; 208
   16ed8:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   16edc:	89 2b       	or	r24, r25
   16ede:	49 f4       	brne	.+18     	; 0x16ef2 <amigo_buffered_write+0x8c>
   16ee0:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOp>
   16ee4:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOp+0x1>
   16ee8:	86 81       	ldd	r24, Z+6	; 0x06
   16eea:	97 81       	ldd	r25, Z+7	; 0x07
   16eec:	e8 16       	cp	r14, r24
   16eee:	f9 06       	cpc	r15, r25
   16ef0:	c1 f0       	breq	.+48     	; 0x16f22 <amigo_buffered_write+0xbc>
   16ef2:	e0 91 ff 18 	lds	r30, 0x18FF	; 0x8018ff <AMIGOs>
   16ef6:	f0 91 00 19 	lds	r31, 0x1900	; 0x801900 <AMIGOs+0x1>
   16efa:	81 e0       	ldi	r24, 0x01	; 1
   16efc:	86 83       	std	Z+6, r24	; 0x06
   16efe:	87 81       	ldd	r24, Z+7	; 0x07
   16f00:	90 85       	ldd	r25, Z+8	; 0x08
   16f02:	80 62       	ori	r24, 0x20	; 32
   16f04:	90 87       	std	Z+8, r25	; 0x08
   16f06:	87 83       	std	Z+7, r24	; 0x07
   16f08:	20 ff       	sbrs	r18, 0
   16f0a:	4e c0       	rjmp	.+156    	; 0x16fa8 <amigo_buffered_write+0x142>
   16f0c:	8b ef       	ldi	r24, 0xFB	; 251
   16f0e:	9d e2       	ldi	r25, 0x2D	; 45
   16f10:	a0 e0       	ldi	r26, 0x00	; 0
   16f12:	ed b7       	in	r30, 0x3d	; 61
   16f14:	fe b7       	in	r31, 0x3e	; 62
   16f16:	81 83       	std	Z+1, r24	; 0x01
   16f18:	92 83       	std	Z+2, r25	; 0x02
   16f1a:	a3 83       	std	Z+3, r26	; 0x03
   16f1c:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   16f20:	43 c0       	rjmp	.+134    	; 0x16fa8 <amigo_buffered_write+0x142>
   16f22:	26 fd       	sbrc	r18, 6
   16f24:	0e 94 ae 85 	call	0x10b5c	; 0x10b5c <gpib_timer_elapsed_begin>
   16f28:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOp>
   16f2c:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOp+0x1>
   16f30:	e0 90 ff 18 	lds	r14, 0x18FF	; 0x8018ff <AMIGOs>
   16f34:	f0 90 00 19 	lds	r15, 0x1900	; 0x801900 <AMIGOs+0x1>
   16f38:	87 e0       	ldi	r24, 0x07	; 7
   16f3a:	e8 0e       	add	r14, r24
   16f3c:	f1 1c       	adc	r15, r1
   16f3e:	06 81       	ldd	r16, Z+6	; 0x06
   16f40:	17 81       	ldd	r17, Z+7	; 0x07
   16f42:	20 e8       	ldi	r18, 0x80	; 128
   16f44:	3c e1       	ldi	r19, 0x1C	; 28
   16f46:	b5 01       	movw	r22, r10
   16f48:	a4 01       	movw	r20, r8
   16f4a:	82 81       	ldd	r24, Z+2	; 0x02
   16f4c:	93 81       	ldd	r25, Z+3	; 0x03
   16f4e:	0e 94 57 85 	call	0x10aae	; 0x10aae <dbf_open_write>
   16f52:	7c 01       	movw	r14, r24
   16f54:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16f58:	86 ff       	sbrs	r24, 6
   16f5a:	04 c0       	rjmp	.+8      	; 0x16f64 <amigo_buffered_write+0xfe>
   16f5c:	8f ea       	ldi	r24, 0xAF	; 175
   16f5e:	9f e0       	ldi	r25, 0x0F	; 15
   16f60:	0e 94 c0 85 	call	0x10b80	; 0x10b80 <gpib_timer_elapsed_end>
   16f64:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOp>
   16f68:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOp+0x1>
   16f6c:	86 81       	ldd	r24, Z+6	; 0x06
   16f6e:	97 81       	ldd	r25, Z+7	; 0x07
   16f70:	e8 16       	cp	r14, r24
   16f72:	f9 06       	cpc	r15, r25
   16f74:	49 f0       	breq	.+18     	; 0x16f88 <amigo_buffered_write+0x122>
   16f76:	e0 91 ff 18 	lds	r30, 0x18FF	; 0x8018ff <AMIGOs>
   16f7a:	f0 91 00 19 	lds	r31, 0x1900	; 0x801900 <AMIGOs+0x1>
   16f7e:	81 e0       	ldi	r24, 0x01	; 1
   16f80:	86 83       	std	Z+6, r24	; 0x06
   16f82:	80 e0       	ldi	r24, 0x00	; 0
   16f84:	90 e0       	ldi	r25, 0x00	; 0
   16f86:	1c c0       	rjmp	.+56     	; 0x16fc0 <amigo_buffered_write+0x15a>
   16f88:	81 ee       	ldi	r24, 0xE1	; 225
   16f8a:	94 e1       	ldi	r25, 0x14	; 20
   16f8c:	1e dd       	rcall	.-1476   	; 0x169ca <amigo_increment>
   16f8e:	89 2b       	or	r24, r25
   16f90:	59 f0       	breq	.+22     	; 0x16fa8 <amigo_buffered_write+0x142>
   16f92:	e0 91 ff 18 	lds	r30, 0x18FF	; 0x8018ff <AMIGOs>
   16f96:	f0 91 00 19 	lds	r31, 0x1900	; 0x801900 <AMIGOs+0x1>
   16f9a:	81 e0       	ldi	r24, 0x01	; 1
   16f9c:	86 83       	std	Z+6, r24	; 0x06
   16f9e:	87 81       	ldd	r24, Z+7	; 0x07
   16fa0:	90 85       	ldd	r25, Z+8	; 0x08
   16fa2:	84 60       	ori	r24, 0x04	; 4
   16fa4:	90 87       	std	Z+8, r25	; 0x08
   16fa6:	87 83       	std	Z+7, r24	; 0x07
   16fa8:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOp>
   16fac:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOp+0x1>
   16fb0:	81 81       	ldd	r24, Z+1	; 0x01
   16fb2:	90 e0       	ldi	r25, 0x00	; 0
   16fb4:	0e 94 70 86 	call	0x10ce0	; 0x10ce0 <gpib_enable_PPR>
   16fb8:	8c 81       	ldd	r24, Y+4	; 0x04
   16fba:	9d 81       	ldd	r25, Y+5	; 0x05
   16fbc:	88 27       	eor	r24, r24
   16fbe:	90 7d       	andi	r25, 0xD0	; 208
   16fc0:	0f 90       	pop	r0
   16fc2:	0f 90       	pop	r0
   16fc4:	0f 90       	pop	r0
   16fc6:	0f 90       	pop	r0
   16fc8:	0f 90       	pop	r0
   16fca:	df 91       	pop	r29
   16fcc:	cf 91       	pop	r28
   16fce:	1f 91       	pop	r17
   16fd0:	0f 91       	pop	r16
   16fd2:	ff 90       	pop	r15
   16fd4:	ef 90       	pop	r14
   16fd6:	bf 90       	pop	r11
   16fd8:	af 90       	pop	r10
   16fda:	9f 90       	pop	r9
   16fdc:	8f 90       	pop	r8
   16fde:	08 95       	ret

00016fe0 <amigo_cmd_dsj>:
   16fe0:	a8 e0       	ldi	r26, 0x08	; 8
   16fe2:	b0 e0       	ldi	r27, 0x00	; 0
   16fe4:	e6 ef       	ldi	r30, 0xF6	; 246
   16fe6:	f7 eb       	ldi	r31, 0xB7	; 183
   16fe8:	0c 94 d8 e3 	jmp	0x1c7b0	; 0x1c7b0 <__prologue_saves__+0x20>
   16fec:	e0 91 ff 18 	lds	r30, 0x18FF	; 0x8018ff <AMIGOs>
   16ff0:	f0 91 00 19 	lds	r31, 0x1900	; 0x801900 <AMIGOs+0x1>
   16ff4:	86 81       	ldd	r24, Z+6	; 0x06
   16ff6:	88 87       	std	Y+8, r24	; 0x08
   16ff8:	80 e0       	ldi	r24, 0x00	; 0
   16ffa:	91 e0       	ldi	r25, 0x01	; 1
   16ffc:	9f 83       	std	Y+7, r25	; 0x07
   16ffe:	8e 83       	std	Y+6, r24	; 0x06
   17000:	ae 01       	movw	r20, r28
   17002:	4a 5f       	subi	r20, 0xFA	; 250
   17004:	5f 4f       	sbci	r21, 0xFF	; 255
   17006:	61 e0       	ldi	r22, 0x01	; 1
   17008:	70 e0       	ldi	r23, 0x00	; 0
   1700a:	ce 01       	movw	r24, r28
   1700c:	08 96       	adiw	r24, 0x08	; 8
   1700e:	0e 94 ca 8b 	call	0x11794	; 0x11794 <gpib_write_str>
   17012:	2e 81       	ldd	r18, Y+6	; 0x06
   17014:	3f 81       	ldd	r19, Y+7	; 0x07
   17016:	22 27       	eor	r18, r18
   17018:	30 7d       	andi	r19, 0xD0	; 208
   1701a:	e0 91 ff 18 	lds	r30, 0x18FF	; 0x8018ff <AMIGOs>
   1701e:	f0 91 00 19 	lds	r31, 0x1900	; 0x801900 <AMIGOs+0x1>
   17022:	23 2b       	or	r18, r19
   17024:	29 f0       	breq	.+10     	; 0x17030 <amigo_cmd_dsj+0x50>
   17026:	27 81       	ldd	r18, Z+7	; 0x07
   17028:	30 85       	ldd	r19, Z+8	; 0x08
   1702a:	20 62       	ori	r18, 0x20	; 32
   1702c:	30 87       	std	Z+8, r19	; 0x08
   1702e:	27 83       	std	Z+7, r18	; 0x07
   17030:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   17034:	01 97       	sbiw	r24, 0x01	; 1
   17036:	c1 f0       	breq	.+48     	; 0x17068 <amigo_cmd_dsj+0x88>
   17038:	81 e0       	ldi	r24, 0x01	; 1
   1703a:	86 83       	std	Z+6, r24	; 0x06
   1703c:	87 81       	ldd	r24, Z+7	; 0x07
   1703e:	90 85       	ldd	r25, Z+8	; 0x08
   17040:	80 62       	ori	r24, 0x20	; 32
   17042:	90 87       	std	Z+8, r25	; 0x08
   17044:	87 83       	std	Z+7, r24	; 0x07
   17046:	20 ff       	sbrs	r18, 0
   17048:	0a c0       	rjmp	.+20     	; 0x1705e <amigo_cmd_dsj+0x7e>
   1704a:	81 ee       	ldi	r24, 0xE1	; 225
   1704c:	9d e2       	ldi	r25, 0x2D	; 45
   1704e:	a0 e0       	ldi	r26, 0x00	; 0
   17050:	ed b7       	in	r30, 0x3d	; 61
   17052:	fe b7       	in	r31, 0x3e	; 62
   17054:	81 83       	std	Z+1, r24	; 0x01
   17056:	92 83       	std	Z+2, r25	; 0x02
   17058:	a3 83       	std	Z+3, r26	; 0x03
   1705a:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   1705e:	8e 81       	ldd	r24, Y+6	; 0x06
   17060:	9f 81       	ldd	r25, Y+7	; 0x07
   17062:	88 27       	eor	r24, r24
   17064:	90 7d       	andi	r25, 0xD0	; 208
   17066:	19 c0       	rjmp	.+50     	; 0x1709a <amigo_cmd_dsj+0xba>
   17068:	25 ff       	sbrs	r18, 5
   1706a:	0e c0       	rjmp	.+28     	; 0x17088 <amigo_cmd_dsj+0xa8>
   1706c:	86 81       	ldd	r24, Z+6	; 0x06
   1706e:	90 e0       	ldi	r25, 0x00	; 0
   17070:	ed b7       	in	r30, 0x3d	; 61
   17072:	fe b7       	in	r31, 0x3e	; 62
   17074:	95 83       	std	Z+5, r25	; 0x05
   17076:	84 83       	std	Z+4, r24	; 0x04
   17078:	84 ed       	ldi	r24, 0xD4	; 212
   1707a:	9d e2       	ldi	r25, 0x2D	; 45
   1707c:	a0 e0       	ldi	r26, 0x00	; 0
   1707e:	81 83       	std	Z+1, r24	; 0x01
   17080:	92 83       	std	Z+2, r25	; 0x02
   17082:	a3 83       	std	Z+3, r26	; 0x03
   17084:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   17088:	e0 91 ff 18 	lds	r30, 0x18FF	; 0x8018ff <AMIGOs>
   1708c:	f0 91 00 19 	lds	r31, 0x1900	; 0x801900 <AMIGOs+0x1>
   17090:	16 82       	std	Z+6, r1	; 0x06
   17092:	10 86       	std	Z+8, r1	; 0x08
   17094:	17 82       	std	Z+7, r1	; 0x07
   17096:	80 e0       	ldi	r24, 0x00	; 0
   17098:	90 e0       	ldi	r25, 0x00	; 0
   1709a:	28 96       	adiw	r28, 0x08	; 8
   1709c:	e2 e0       	ldi	r30, 0x02	; 2
   1709e:	0c 94 f4 e3 	jmp	0x1c7e8	; 0x1c7e8 <__epilogue_restores__+0x20>

000170a2 <amigo_cmd_clear>:
   170a2:	00 d0       	rcall	.+0      	; 0x170a4 <amigo_cmd_clear+0x2>
   170a4:	1f 92       	push	r1
   170a6:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   170aa:	85 ff       	sbrs	r24, 5
   170ac:	0a c0       	rjmp	.+20     	; 0x170c2 <amigo_cmd_clear+0x20>
   170ae:	85 ec       	ldi	r24, 0xC5	; 197
   170b0:	9d e2       	ldi	r25, 0x2D	; 45
   170b2:	a0 e0       	ldi	r26, 0x00	; 0
   170b4:	ed b7       	in	r30, 0x3d	; 61
   170b6:	fe b7       	in	r31, 0x3e	; 62
   170b8:	81 83       	std	Z+1, r24	; 0x01
   170ba:	92 83       	std	Z+2, r25	; 0x02
   170bc:	a3 83       	std	Z+3, r26	; 0x03
   170be:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   170c2:	e0 91 ff 18 	lds	r30, 0x18FF	; 0x8018ff <AMIGOs>
   170c6:	f0 91 00 19 	lds	r31, 0x1900	; 0x801900 <AMIGOs+0x1>
   170ca:	15 82       	std	Z+5, r1	; 0x05
   170cc:	14 82       	std	Z+4, r1	; 0x04
   170ce:	13 82       	std	Z+3, r1	; 0x03
   170d0:	16 82       	std	Z+6, r1	; 0x06
   170d2:	10 86       	std	Z+8, r1	; 0x08
   170d4:	17 82       	std	Z+7, r1	; 0x07
   170d6:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOp>
   170da:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOp+0x1>
   170de:	81 81       	ldd	r24, Z+1	; 0x01
   170e0:	90 e0       	ldi	r25, 0x00	; 0
   170e2:	0e 94 70 86 	call	0x10ce0	; 0x10ce0 <gpib_enable_PPR>
   170e6:	80 e0       	ldi	r24, 0x00	; 0
   170e8:	90 e0       	ldi	r25, 0x00	; 0
   170ea:	0f 90       	pop	r0
   170ec:	0f 90       	pop	r0
   170ee:	0f 90       	pop	r0
   170f0:	08 95       	ret

000170f2 <amigo_todo_op>:
/// @param[in] opcode: GPIB data byte OP Code
/// @param[in] len: Length of GOIB data returned
/// @return  0

int amigo_todo_op(uint8_t secondary, uint8_t opcode, int len)
{
   170f2:	af e0       	ldi	r26, 0x0F	; 15
   170f4:	b0 e0       	ldi	r27, 0x00	; 0
   170f6:	ef e7       	ldi	r30, 0x7F	; 127
   170f8:	f8 eb       	ldi	r31, 0xB8	; 184
   170fa:	0c 94 d4 e3 	jmp	0x1c7a8	; 0x1c7a8 <__prologue_saves__+0x18>
   170fe:	c8 2f       	mov	r28, r24
   17100:	e6 2e       	mov	r14, r22
   17102:	8a 01       	movw	r16, r20
    if(AMIGO_is_MLA(listening))
   17104:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <listening>
   17108:	90 e0       	ldi	r25, 0x00	; 0
   1710a:	0e 94 b9 8c 	call	0x11972	; 0x11972 <AMIGO_is_MLA>
   1710e:	20 91 84 1e 	lds	r18, 0x1E84	; 0x801e84 <talking>
   17112:	f1 2c       	mov	r15, r1
   17114:	d0 e0       	ldi	r29, 0x00	; 0
   17116:	89 2b       	or	r24, r25
   17118:	f1 f0       	breq	.+60     	; 0x17156 <amigo_todo_op+0x64>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   1711a:	82 2f       	mov	r24, r18
   1711c:	90 e0       	ldi	r25, 0x00	; 0
   1711e:	ed b7       	in	r30, 0x3d	; 61
   17120:	fe b7       	in	r31, 0x3e	; 62
   17122:	97 87       	std	Z+15, r25	; 0x0f
   17124:	86 87       	std	Z+14, r24	; 0x0e
   17126:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <listening>
   1712a:	90 e0       	ldi	r25, 0x00	; 0
   1712c:	95 87       	std	Z+13, r25	; 0x0d
   1712e:	84 87       	std	Z+12, r24	; 0x0c
   17130:	13 87       	std	Z+11, r17	; 0x0b
   17132:	02 87       	std	Z+10, r16	; 0x0a
   17134:	f1 86       	std	Z+9, r15	; 0x09
   17136:	e0 86       	std	Z+8, r14	; 0x08
   17138:	e0 91 ff 18 	lds	r30, 0x18FF	; 0x8018ff <AMIGOs>
   1713c:	f0 91 00 19 	lds	r31, 0x1900	; 0x801900 <AMIGOs+0x1>
   17140:	80 81       	ld	r24, Z
   17142:	90 e0       	ldi	r25, 0x00	; 0
   17144:	ed b7       	in	r30, 0x3d	; 61
   17146:	fe b7       	in	r31, 0x3e	; 62
   17148:	97 83       	std	Z+7, r25	; 0x07
   1714a:	86 83       	std	Z+6, r24	; 0x06
   1714c:	d5 83       	std	Z+5, r29	; 0x05
   1714e:	c4 83       	std	Z+4, r28	; 0x04
   17150:	8e e5       	ldi	r24, 0x5E	; 94
   17152:	9d e2       	ldi	r25, 0x2D	; 45
   17154:	51 c0       	rjmp	.+162    	; 0x171f8 <amigo_todo_op+0x106>
            secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(AMIGO_is_MTA(talking))
   17156:	82 2f       	mov	r24, r18
   17158:	90 e0       	ldi	r25, 0x00	; 0
   1715a:	0e 94 c8 8c 	call	0x11990	; 0x11990 <AMIGO_is_MTA>
   1715e:	20 91 86 1e 	lds	r18, 0x1E86	; 0x801e86 <listening>
   17162:	30 91 84 1e 	lds	r19, 0x1E84	; 0x801e84 <talking>
   17166:	a0 91 ff 18 	lds	r26, 0x18FF	; 0x8018ff <AMIGOs>
   1716a:	b0 91 00 19 	lds	r27, 0x1900	; 0x801900 <AMIGOs+0x1>
   1716e:	89 2b       	or	r24, r25
   17170:	b1 f0       	breq	.+44     	; 0x1719e <amigo_todo_op+0xac>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   17172:	83 2f       	mov	r24, r19
   17174:	90 e0       	ldi	r25, 0x00	; 0
   17176:	ed b7       	in	r30, 0x3d	; 61
   17178:	fe b7       	in	r31, 0x3e	; 62
   1717a:	97 87       	std	Z+15, r25	; 0x0f
   1717c:	86 87       	std	Z+14, r24	; 0x0e
   1717e:	30 e0       	ldi	r19, 0x00	; 0
   17180:	35 87       	std	Z+13, r19	; 0x0d
   17182:	24 87       	std	Z+12, r18	; 0x0c
   17184:	13 87       	std	Z+11, r17	; 0x0b
   17186:	02 87       	std	Z+10, r16	; 0x0a
   17188:	f1 86       	std	Z+9, r15	; 0x09
   1718a:	e0 86       	std	Z+8, r14	; 0x08
   1718c:	8c 91       	ld	r24, X
   1718e:	90 e0       	ldi	r25, 0x00	; 0
   17190:	97 83       	std	Z+7, r25	; 0x07
   17192:	86 83       	std	Z+6, r24	; 0x06
   17194:	d5 83       	std	Z+5, r29	; 0x05
   17196:	c4 83       	std	Z+4, r28	; 0x04
   17198:	87 ef       	ldi	r24, 0xF7	; 247
   1719a:	9c e2       	ldi	r25, 0x2C	; 44
   1719c:	2d c0       	rjmp	.+90     	; 0x171f8 <amigo_todo_op+0x106>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(talking == UNT)
   1719e:	3f 35       	cpi	r19, 0x5F	; 95
   171a0:	b1 f4       	brne	.+44     	; 0x171ce <amigo_todo_op+0xdc>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   171a2:	8f e5       	ldi	r24, 0x5F	; 95
   171a4:	90 e0       	ldi	r25, 0x00	; 0
   171a6:	ed b7       	in	r30, 0x3d	; 61
   171a8:	fe b7       	in	r31, 0x3e	; 62
   171aa:	97 87       	std	Z+15, r25	; 0x0f
   171ac:	86 87       	std	Z+14, r24	; 0x0e
   171ae:	30 e0       	ldi	r19, 0x00	; 0
   171b0:	35 87       	std	Z+13, r19	; 0x0d
   171b2:	24 87       	std	Z+12, r18	; 0x0c
   171b4:	13 87       	std	Z+11, r17	; 0x0b
   171b6:	02 87       	std	Z+10, r16	; 0x0a
   171b8:	f1 86       	std	Z+9, r15	; 0x09
   171ba:	e0 86       	std	Z+8, r14	; 0x08
   171bc:	8c 91       	ld	r24, X
   171be:	90 e0       	ldi	r25, 0x00	; 0
   171c0:	97 83       	std	Z+7, r25	; 0x07
   171c2:	86 83       	std	Z+6, r24	; 0x06
   171c4:	d5 83       	std	Z+5, r29	; 0x05
   171c6:	c4 83       	std	Z+4, r28	; 0x04
   171c8:	80 e9       	ldi	r24, 0x90	; 144
   171ca:	9c e2       	ldi	r25, 0x2C	; 44
   171cc:	15 c0       	rjmp	.+42     	; 0x171f8 <amigo_todo_op+0x106>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else
        printf("[U Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   171ce:	83 2f       	mov	r24, r19
   171d0:	90 e0       	ldi	r25, 0x00	; 0
   171d2:	ed b7       	in	r30, 0x3d	; 61
   171d4:	fe b7       	in	r31, 0x3e	; 62
   171d6:	97 87       	std	Z+15, r25	; 0x0f
   171d8:	86 87       	std	Z+14, r24	; 0x0e
   171da:	30 e0       	ldi	r19, 0x00	; 0
   171dc:	35 87       	std	Z+13, r19	; 0x0d
   171de:	24 87       	std	Z+12, r18	; 0x0c
   171e0:	13 87       	std	Z+11, r17	; 0x0b
   171e2:	02 87       	std	Z+10, r16	; 0x0a
   171e4:	f1 86       	std	Z+9, r15	; 0x09
   171e6:	e0 86       	std	Z+8, r14	; 0x08
   171e8:	8c 91       	ld	r24, X
   171ea:	90 e0       	ldi	r25, 0x00	; 0
   171ec:	97 83       	std	Z+7, r25	; 0x07
   171ee:	86 83       	std	Z+6, r24	; 0x06
   171f0:	d5 83       	std	Z+5, r29	; 0x05
   171f2:	c4 83       	std	Z+4, r28	; 0x04
   171f4:	8b e2       	ldi	r24, 0x2B	; 43
   171f6:	9c e2       	ldi	r25, 0x2C	; 44
   171f8:	a0 e0       	ldi	r26, 0x00	; 0
   171fa:	81 83       	std	Z+1, r24	; 0x01
   171fc:	92 83       	std	Z+2, r25	; 0x02
   171fe:	a3 83       	std	Z+3, r26	; 0x03
   17200:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
            secondary, AMIGOs->state, opcode, len, listening, talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   17204:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOp>
   17208:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOp+0x1>
   1720c:	81 81       	ldd	r24, Z+1	; 0x01
   1720e:	90 e0       	ldi	r25, 0x00	; 0
   17210:	0e 94 70 86 	call	0x10ce0	; 0x10ce0 <gpib_enable_PPR>
    return(0);
}
   17214:	80 e0       	ldi	r24, 0x00	; 0
   17216:	90 e0       	ldi	r25, 0x00	; 0
   17218:	cd b7       	in	r28, 0x3d	; 61
   1721a:	de b7       	in	r29, 0x3e	; 62
   1721c:	2f 96       	adiw	r28, 0x0f	; 15
   1721e:	e6 e0       	ldi	r30, 0x06	; 6
   17220:	0c 94 f0 e3 	jmp	0x1c7e0	; 0x1c7e0 <__epilogue_restores__+0x18>

00017224 <amigo_todo>:
/// @param[in] secondary: GPIB seconday command
///
/// @return  0

int amigo_todo(uint8_t secondary)
{
   17224:	ab e0       	ldi	r26, 0x0B	; 11
   17226:	b0 e0       	ldi	r27, 0x00	; 0
   17228:	e8 e1       	ldi	r30, 0x18	; 24
   1722a:	f9 eb       	ldi	r31, 0xB9	; 185
   1722c:	0c 94 d8 e3 	jmp	0x1c7b0	; 0x1c7b0 <__prologue_saves__+0x20>
   17230:	c8 2f       	mov	r28, r24
    if(AMIGO_is_MLA(listening))
   17232:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <listening>
   17236:	90 e0       	ldi	r25, 0x00	; 0
   17238:	0e 94 b9 8c 	call	0x11972	; 0x11972 <AMIGO_is_MLA>
   1723c:	20 91 84 1e 	lds	r18, 0x1E84	; 0x801e84 <talking>
   17240:	d0 e0       	ldi	r29, 0x00	; 0
   17242:	89 2b       	or	r24, r25
   17244:	d1 f0       	breq	.+52     	; 0x1727a <amigo_todo+0x56>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   17246:	82 2f       	mov	r24, r18
   17248:	90 e0       	ldi	r25, 0x00	; 0
   1724a:	ed b7       	in	r30, 0x3d	; 61
   1724c:	fe b7       	in	r31, 0x3e	; 62
   1724e:	93 87       	std	Z+11, r25	; 0x0b
   17250:	82 87       	std	Z+10, r24	; 0x0a
   17252:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <listening>
   17256:	90 e0       	ldi	r25, 0x00	; 0
   17258:	91 87       	std	Z+9, r25	; 0x09
   1725a:	80 87       	std	Z+8, r24	; 0x08
   1725c:	e0 91 ff 18 	lds	r30, 0x18FF	; 0x8018ff <AMIGOs>
   17260:	f0 91 00 19 	lds	r31, 0x1900	; 0x801900 <AMIGOs+0x1>
   17264:	80 81       	ld	r24, Z
   17266:	90 e0       	ldi	r25, 0x00	; 0
   17268:	ed b7       	in	r30, 0x3d	; 61
   1726a:	fe b7       	in	r31, 0x3e	; 62
   1726c:	97 83       	std	Z+7, r25	; 0x07
   1726e:	86 83       	std	Z+6, r24	; 0x06
   17270:	d5 83       	std	Z+5, r29	; 0x05
   17272:	c4 83       	std	Z+4, r28	; 0x04
   17274:	8b ed       	ldi	r24, 0xDB	; 219
   17276:	9b e2       	ldi	r25, 0x2B	; 43
   17278:	43 c0       	rjmp	.+134    	; 0x17300 <amigo_todo+0xdc>
            secondary,AMIGOs->state,listening,talking);
    else if(AMIGO_is_MTA(talking))
   1727a:	82 2f       	mov	r24, r18
   1727c:	90 e0       	ldi	r25, 0x00	; 0
   1727e:	0e 94 c8 8c 	call	0x11990	; 0x11990 <AMIGO_is_MTA>
   17282:	20 91 86 1e 	lds	r18, 0x1E86	; 0x801e86 <listening>
   17286:	40 91 84 1e 	lds	r20, 0x1E84	; 0x801e84 <talking>
   1728a:	a0 91 ff 18 	lds	r26, 0x18FF	; 0x8018ff <AMIGOs>
   1728e:	b0 91 00 19 	lds	r27, 0x1900	; 0x801900 <AMIGOs+0x1>
   17292:	89 2b       	or	r24, r25
   17294:	89 f0       	breq	.+34     	; 0x172b8 <amigo_todo+0x94>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   17296:	50 e0       	ldi	r21, 0x00	; 0
   17298:	ed b7       	in	r30, 0x3d	; 61
   1729a:	fe b7       	in	r31, 0x3e	; 62
   1729c:	53 87       	std	Z+11, r21	; 0x0b
   1729e:	42 87       	std	Z+10, r20	; 0x0a
   172a0:	30 e0       	ldi	r19, 0x00	; 0
   172a2:	31 87       	std	Z+9, r19	; 0x09
   172a4:	20 87       	std	Z+8, r18	; 0x08
   172a6:	8c 91       	ld	r24, X
   172a8:	90 e0       	ldi	r25, 0x00	; 0
   172aa:	97 83       	std	Z+7, r25	; 0x07
   172ac:	86 83       	std	Z+6, r24	; 0x06
   172ae:	d5 83       	std	Z+5, r29	; 0x05
   172b0:	c4 83       	std	Z+4, r28	; 0x04
   172b2:	8b e8       	ldi	r24, 0x8B	; 139
   172b4:	9b e2       	ldi	r25, 0x2B	; 43
   172b6:	24 c0       	rjmp	.+72     	; 0x17300 <amigo_todo+0xdc>
                secondary,AMIGOs->state,listening,talking);
    else if(talking == UNT)
   172b8:	4f 35       	cpi	r20, 0x5F	; 95
   172ba:	91 f4       	brne	.+36     	; 0x172e0 <amigo_todo+0xbc>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   172bc:	8f e5       	ldi	r24, 0x5F	; 95
   172be:	90 e0       	ldi	r25, 0x00	; 0
   172c0:	ed b7       	in	r30, 0x3d	; 61
   172c2:	fe b7       	in	r31, 0x3e	; 62
   172c4:	93 87       	std	Z+11, r25	; 0x0b
   172c6:	82 87       	std	Z+10, r24	; 0x0a
   172c8:	30 e0       	ldi	r19, 0x00	; 0
   172ca:	31 87       	std	Z+9, r19	; 0x09
   172cc:	20 87       	std	Z+8, r18	; 0x08
   172ce:	8c 91       	ld	r24, X
   172d0:	90 e0       	ldi	r25, 0x00	; 0
   172d2:	97 83       	std	Z+7, r25	; 0x07
   172d4:	86 83       	std	Z+6, r24	; 0x06
   172d6:	d5 83       	std	Z+5, r29	; 0x05
   172d8:	c4 83       	std	Z+4, r28	; 0x04
   172da:	8b e3       	ldi	r24, 0x3B	; 59
   172dc:	9b e2       	ldi	r25, 0x2B	; 43
   172de:	10 c0       	rjmp	.+32     	; 0x17300 <amigo_todo+0xdc>
                secondary,AMIGOs->state,listening,talking);
    else
        printf("[E   Amigo ERROR secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   172e0:	50 e0       	ldi	r21, 0x00	; 0
   172e2:	ed b7       	in	r30, 0x3d	; 61
   172e4:	fe b7       	in	r31, 0x3e	; 62
   172e6:	53 87       	std	Z+11, r21	; 0x0b
   172e8:	42 87       	std	Z+10, r20	; 0x0a
   172ea:	30 e0       	ldi	r19, 0x00	; 0
   172ec:	31 87       	std	Z+9, r19	; 0x09
   172ee:	20 87       	std	Z+8, r18	; 0x08
   172f0:	8c 91       	ld	r24, X
   172f2:	90 e0       	ldi	r25, 0x00	; 0
   172f4:	97 83       	std	Z+7, r25	; 0x07
   172f6:	86 83       	std	Z+6, r24	; 0x06
   172f8:	d5 83       	std	Z+5, r29	; 0x05
   172fa:	c4 83       	std	Z+4, r28	; 0x04
   172fc:	8a ee       	ldi	r24, 0xEA	; 234
   172fe:	9a e2       	ldi	r25, 0x2A	; 42
   17300:	a0 e0       	ldi	r26, 0x00	; 0
   17302:	81 83       	std	Z+1, r24	; 0x01
   17304:	92 83       	std	Z+2, r25	; 0x02
   17306:	a3 83       	std	Z+3, r26	; 0x03
   17308:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
            secondary,AMIGOs->state,listening,talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   1730c:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOp>
   17310:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOp+0x1>
   17314:	81 81       	ldd	r24, Z+1	; 0x01
   17316:	90 e0       	ldi	r25, 0x00	; 0
   17318:	0e 94 70 86 	call	0x10ce0	; 0x10ce0 <gpib_enable_PPR>
    return(0);
}
   1731c:	80 e0       	ldi	r24, 0x00	; 0
   1731e:	90 e0       	ldi	r25, 0x00	; 0
   17320:	cd b7       	in	r28, 0x3d	; 61
   17322:	de b7       	in	r29, 0x3e	; 62
   17324:	2b 96       	adiw	r28, 0x0b	; 11
   17326:	e2 e0       	ldi	r30, 0x02	; 2
   17328:	0c 94 f4 e3 	jmp	0x1c7e8	; 0x1c7e8 <__epilogue_restores__+0x20>

0001732c <amigo_check_unit>:
/// @brief  Amigo Check Valid unit
/// @param[in] unit: unit to set
/// @return void
void amigo_check_unit(uint8_t unit)
{
    if(unit != 15)
   1732c:	8f 30       	cpi	r24, 0x0F	; 15
   1732e:	29 f0       	breq	.+10     	; 0x1733a <amigo_check_unit+0xe>
        AMIGOs->unitNO = unit;
   17330:	e0 91 ff 18 	lds	r30, 0x18FF	; 0x8018ff <AMIGOs>
   17334:	f0 91 00 19 	lds	r31, 0x1900	; 0x801900 <AMIGOs+0x1>
   17338:	81 83       	std	Z+1, r24	; 0x01
    if(AMIGOs->unitNO != 0)
   1733a:	e0 91 ff 18 	lds	r30, 0x18FF	; 0x8018ff <AMIGOs>
   1733e:	f0 91 00 19 	lds	r31, 0x1900	; 0x801900 <AMIGOs+0x1>
   17342:	81 81       	ldd	r24, Z+1	; 0x01
   17344:	88 23       	and	r24, r24
   17346:	29 f0       	breq	.+10     	; 0x17352 <amigo_check_unit+0x26>
        AMIGOs->Errors |= ERR_UNIT;
   17348:	87 81       	ldd	r24, Z+7	; 0x07
   1734a:	90 85       	ldd	r25, Z+8	; 0x08
   1734c:	80 64       	ori	r24, 0x40	; 64
   1734e:	90 87       	std	Z+8, r25	; 0x08
   17350:	87 83       	std	Z+7, r24	; 0x07
   17352:	08 95       	ret

00017354 <Amigo_Command>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)

int Amigo_Command( int secondary )
{
   17354:	ac e1       	ldi	r26, 0x1C	; 28
   17356:	b0 e0       	ldi	r27, 0x00	; 0
   17358:	e0 eb       	ldi	r30, 0xB0	; 176
   1735a:	f9 eb       	ldi	r31, 0xB9	; 185
   1735c:	0c 94 d4 e3 	jmp	0x1c7a8	; 0x1c7a8 <__prologue_saves__+0x18>
   17360:	7c 01       	movw	r14, r24
    uint8_t *ptr;
    uint16_t status;                              // Current status
    UINT len;                                     // Size of Data/Op Codes/Parameters read in bytes

#if SDEBUG
    if(debuglevel & 32)
   17362:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17366:	85 ff       	sbrs	r24, 5
   17368:	16 c0       	rjmp	.+44     	; 0x17396 <Amigo_Command+0x42>
        printf("[AMIGO Command(%02XH): listen:%02XH, talk:%02XH]\n",
   1736a:	80 91 84 1e 	lds	r24, 0x1E84	; 0x801e84 <talking>
   1736e:	90 e0       	ldi	r25, 0x00	; 0
   17370:	ed b7       	in	r30, 0x3d	; 61
   17372:	fe b7       	in	r31, 0x3e	; 62
   17374:	91 87       	std	Z+9, r25	; 0x09
   17376:	80 87       	std	Z+8, r24	; 0x08
   17378:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <listening>
   1737c:	90 e0       	ldi	r25, 0x00	; 0
   1737e:	97 83       	std	Z+7, r25	; 0x07
   17380:	86 83       	std	Z+6, r24	; 0x06
   17382:	f5 82       	std	Z+5, r15	; 0x05
   17384:	e4 82       	std	Z+4, r14	; 0x04
   17386:	88 eb       	ldi	r24, 0xB8	; 184
   17388:	9a e2       	ldi	r25, 0x2A	; 42
   1738a:	a0 e0       	ldi	r26, 0x00	; 0
   1738c:	81 83       	std	Z+1, r24	; 0x01
   1738e:	92 83       	std	Z+2, r25	; 0x02
   17390:	a3 83       	std	Z+3, r26	; 0x03
   17392:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
            secondary, listening, talking);
#endif

///  Reference: A14
    if (secondary == 0x7e && AMIGO_is_MTA(talking))
   17396:	fe e7       	ldi	r31, 0x7E	; 126
   17398:	ef 16       	cp	r14, r31
   1739a:	f1 04       	cpc	r15, r1
   1739c:	f1 f5       	brne	.+124    	; 0x1741a <Amigo_Command+0xc6>
   1739e:	80 91 84 1e 	lds	r24, 0x1E84	; 0x801e84 <talking>
   173a2:	90 e0       	ldi	r25, 0x00	; 0
   173a4:	0e 94 c8 8c 	call	0x11990	; 0x11990 <AMIGO_is_MTA>
   173a8:	89 2b       	or	r24, r25
   173aa:	09 f4       	brne	.+2      	; 0x173ae <Amigo_Command+0x5a>
   173ac:	86 c0       	rjmp	.+268    	; 0x174ba <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   173ae:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOp>
   173b2:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOp+0x1>
   173b6:	81 81       	ldd	r24, Z+1	; 0x01
   173b8:	90 e0       	ldi	r25, 0x00	; 0
   173ba:	0e 94 a6 86 	call	0x10d4c	; 0x10d4c <gpib_disable_PPR>
        status = EOI_FLAG;
   173be:	80 e0       	ldi	r24, 0x00	; 0
   173c0:	91 e0       	ldi	r25, 0x01	; 1
   173c2:	9c 8f       	std	Y+28, r25	; 0x1c
   173c4:	8b 8f       	std	Y+27, r24	; 0x1b
        len = gpib_write_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   173c6:	ae 01       	movw	r20, r28
   173c8:	45 5e       	subi	r20, 0xE5	; 229
   173ca:	5f 4f       	sbci	r21, 0xFF	; 255
   173cc:	60 e0       	ldi	r22, 0x00	; 0
   173ce:	72 e0       	ldi	r23, 0x02	; 2
   173d0:	80 e8       	ldi	r24, 0x80	; 128
   173d2:	9c e1       	ldi	r25, 0x1C	; 28
   173d4:	0e 94 ca 8b 	call	0x11794	; 0x11794 <gpib_write_str>
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   173d8:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOp>
   173dc:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOp+0x1>
   173e0:	81 81       	ldd	r24, Z+1	; 0x01
   173e2:	90 e0       	ldi	r25, 0x00	; 0
   173e4:	0e 94 70 86 	call	0x10ce0	; 0x10ce0 <gpib_enable_PPR>
        if(status & ERROR_MASK)
   173e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
   173ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
   173ec:	88 27       	eor	r24, r24
   173ee:	90 7d       	andi	r25, 0xD0	; 208
   173f0:	89 2b       	or	r24, r25
   173f2:	09 f4       	brne	.+2      	; 0x173f6 <Amigo_Command+0xa2>
   173f4:	87 c2       	rjmp	.+1294   	; 0x17904 <Amigo_Command+0x5b0>
        {
            AMIGOs->dsj = 1;
   173f6:	e0 91 ff 18 	lds	r30, 0x18FF	; 0x8018ff <AMIGOs>
   173fa:	f0 91 00 19 	lds	r31, 0x1900	; 0x801900 <AMIGOs+0x1>
   173fe:	81 e0       	ldi	r24, 0x01	; 1
   17400:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   17402:	87 81       	ldd	r24, Z+7	; 0x07
   17404:	90 85       	ldd	r25, Z+8	; 0x08
   17406:	80 62       	ori	r24, 0x20	; 32
   17408:	90 87       	std	Z+8, r25	; 0x08
   1740a:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & 1)
   1740c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17410:	80 ff       	sbrs	r24, 0
   17412:	78 c2       	rjmp	.+1264   	; 0x17904 <Amigo_Command+0x5b0>
                printf("[AMIGO_Command:GPIB write error]\n");
   17414:	86 e9       	ldi	r24, 0x96	; 150
   17416:	9a e2       	ldi	r25, 0x2A	; 42
   17418:	8e c0       	rjmp	.+284    	; 0x17536 <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

///  Reference: A25
    if (secondary == 0x7f && AMIGO_is_MLA(listening))
   1741a:	ff e7       	ldi	r31, 0x7F	; 127
   1741c:	ef 16       	cp	r14, r31
   1741e:	f1 04       	cpc	r15, r1
   17420:	09 f0       	breq	.+2      	; 0x17424 <Amigo_Command+0xd0>
   17422:	4b c0       	rjmp	.+150    	; 0x174ba <Amigo_Command+0x166>
   17424:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <listening>
   17428:	90 e0       	ldi	r25, 0x00	; 0
   1742a:	0e 94 b9 8c 	call	0x11972	; 0x11972 <AMIGO_is_MLA>
   1742e:	89 2b       	or	r24, r25
   17430:	09 f4       	brne	.+2      	; 0x17434 <Amigo_Command+0xe0>
   17432:	43 c0       	rjmp	.+134    	; 0x174ba <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17434:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOp>
   17438:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOp+0x1>
   1743c:	81 81       	ldd	r24, Z+1	; 0x01
   1743e:	90 e0       	ldi	r25, 0x00	; 0
   17440:	0e 94 a6 86 	call	0x10d4c	; 0x10d4c <gpib_disable_PPR>
#if SDEBUG
        if(debuglevel & 128)
   17444:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17448:	87 fd       	sbrc	r24, 7
            gpib_timer_elapsed_begin();
   1744a:	0e 94 ae 85 	call	0x10b5c	; 0x10b5c <gpib_timer_elapsed_begin>
#endif
        status = EOI_FLAG;
   1744e:	80 e0       	ldi	r24, 0x00	; 0
   17450:	91 e0       	ldi	r25, 0x01	; 1
   17452:	9c 8f       	std	Y+28, r25	; 0x1c
   17454:	8b 8f       	std	Y+27, r24	; 0x1b
        len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   17456:	ae 01       	movw	r20, r28
   17458:	45 5e       	subi	r20, 0xE5	; 229
   1745a:	5f 4f       	sbci	r21, 0xFF	; 255
   1745c:	60 e0       	ldi	r22, 0x00	; 0
   1745e:	72 e0       	ldi	r23, 0x02	; 2
   17460:	80 e8       	ldi	r24, 0x80	; 128
   17462:	9c e1       	ldi	r25, 0x1C	; 28
   17464:	0e 94 28 8b 	call	0x11650	; 0x11650 <gpib_read_str>
#if SDEBUG
        if(debuglevel & 128)
   17468:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1746c:	87 ff       	sbrs	r24, 7
   1746e:	04 c0       	rjmp	.+8      	; 0x17478 <Amigo_Command+0x124>
            gpib_timer_elapsed_end("GPIB read str");
   17470:	80 ef       	ldi	r24, 0xF0	; 240
   17472:	94 e1       	ldi	r25, 0x14	; 20
   17474:	0e 94 c0 85 	call	0x10b80	; 0x10b80 <gpib_timer_elapsed_end>
#endif
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   17478:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOp>
   1747c:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOp+0x1>
   17480:	81 81       	ldd	r24, Z+1	; 0x01
   17482:	90 e0       	ldi	r25, 0x00	; 0
   17484:	0e 94 70 86 	call	0x10ce0	; 0x10ce0 <gpib_enable_PPR>
        if(status & ERROR_MASK)
   17488:	8b 8d       	ldd	r24, Y+27	; 0x1b
   1748a:	9c 8d       	ldd	r25, Y+28	; 0x1c
   1748c:	88 27       	eor	r24, r24
   1748e:	90 7d       	andi	r25, 0xD0	; 208
   17490:	89 2b       	or	r24, r25
   17492:	09 f4       	brne	.+2      	; 0x17496 <Amigo_Command+0x142>
   17494:	37 c2       	rjmp	.+1134   	; 0x17904 <Amigo_Command+0x5b0>
        {
            AMIGOs->dsj = 1;
   17496:	e0 91 ff 18 	lds	r30, 0x18FF	; 0x8018ff <AMIGOs>
   1749a:	f0 91 00 19 	lds	r31, 0x1900	; 0x801900 <AMIGOs+0x1>
   1749e:	81 e0       	ldi	r24, 0x01	; 1
   174a0:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   174a2:	87 81       	ldd	r24, Z+7	; 0x07
   174a4:	90 85       	ldd	r25, Z+8	; 0x08
   174a6:	80 62       	ori	r24, 0x20	; 32
   174a8:	90 87       	std	Z+8, r25	; 0x08
   174aa:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & 1)
   174ac:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   174b0:	80 ff       	sbrs	r24, 0
   174b2:	28 c2       	rjmp	.+1104   	; 0x17904 <Amigo_Command+0x5b0>
                printf("[AMIGO Command:GPIB read error]\n");
   174b4:	85 e7       	ldi	r24, 0x75	; 117
   174b6:	9a e2       	ldi	r25, 0x2A	; 42
   174b8:	3e c0       	rjmp	.+124    	; 0x17536 <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   174ba:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <listening>
   174be:	90 e0       	ldi	r25, 0x00	; 0
   174c0:	0e 94 b9 8c 	call	0x11972	; 0x11972 <AMIGO_is_MLA>
   174c4:	89 2b       	or	r24, r25
   174c6:	19 f4       	brne	.+6      	; 0x174ce <Amigo_Command+0x17a>
        return(0);
   174c8:	80 e0       	ldi	r24, 0x00	; 0
   174ca:	90 e0       	ldi	r25, 0x00	; 0
   174cc:	23 c2       	rjmp	.+1094   	; 0x17914 <Amigo_Command+0x5c0>
                printf("[AMIGO Command:GPIB read error]\n");
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   174ce:	80 91 84 1e 	lds	r24, 0x1E84	; 0x801e84 <talking>
   174d2:	90 e0       	ldi	r25, 0x00	; 0
   174d4:	0e 94 c8 8c 	call	0x11990	; 0x11990 <AMIGO_is_MTA>
   174d8:	89 2b       	or	r24, r25
   174da:	b1 f7       	brne	.-20     	; 0x174c8 <Amigo_Command+0x174>
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   174dc:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOp>
   174e0:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOp+0x1>
   174e4:	81 81       	ldd	r24, Z+1	; 0x01
   174e6:	90 e0       	ldi	r25, 0x00	; 0
   174e8:	0e 94 a6 86 	call	0x10d4c	; 0x10d4c <gpib_disable_PPR>


///  Note: the function will "unread" any commands and return
///  All Data MUST have EOI

    status = EOI_FLAG;
   174ec:	80 e0       	ldi	r24, 0x00	; 0
   174ee:	91 e0       	ldi	r25, 0x01	; 1
   174f0:	9c 8f       	std	Y+28, r25	; 0x1c
   174f2:	8b 8f       	std	Y+27, r24	; 0x1b
    len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   174f4:	ae 01       	movw	r20, r28
   174f6:	45 5e       	subi	r20, 0xE5	; 229
   174f8:	5f 4f       	sbci	r21, 0xFF	; 255
   174fa:	60 e0       	ldi	r22, 0x00	; 0
   174fc:	72 e0       	ldi	r23, 0x02	; 2
   174fe:	80 e8       	ldi	r24, 0x80	; 128
   17500:	9c e1       	ldi	r25, 0x1C	; 28
   17502:	0e 94 28 8b 	call	0x11650	; 0x11650 <gpib_read_str>
   17506:	8c 01       	movw	r16, r24
    if(status & ERROR_MASK)
   17508:	8b 8d       	ldd	r24, Y+27	; 0x1b
   1750a:	9c 8d       	ldd	r25, Y+28	; 0x1c
   1750c:	88 27       	eor	r24, r24
   1750e:	90 7d       	andi	r25, 0xD0	; 208
   17510:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   17514:	89 2b       	or	r24, r25
   17516:	c1 f0       	breq	.+48     	; 0x17548 <Amigo_Command+0x1f4>
    {
        AMIGOs->dsj = 1;
   17518:	e0 91 ff 18 	lds	r30, 0x18FF	; 0x8018ff <AMIGOs>
   1751c:	f0 91 00 19 	lds	r31, 0x1900	; 0x801900 <AMIGOs+0x1>
   17520:	81 e0       	ldi	r24, 0x01	; 1
   17522:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   17524:	87 81       	ldd	r24, Z+7	; 0x07
   17526:	90 85       	ldd	r25, Z+8	; 0x08
   17528:	80 62       	ori	r24, 0x20	; 32
   1752a:	90 87       	std	Z+8, r25	; 0x08
   1752c:	87 83       	std	Z+7, r24	; 0x07
        if(debuglevel & 1)
   1752e:	20 ff       	sbrs	r18, 0
   17530:	e9 c1       	rjmp	.+978    	; 0x17904 <Amigo_Command+0x5b0>
            printf("[AMIGO Command:GPIB read error]\n");
   17532:	84 e5       	ldi	r24, 0x54	; 84
   17534:	9a e2       	ldi	r25, 0x2A	; 42
   17536:	a0 e0       	ldi	r26, 0x00	; 0
   17538:	ed b7       	in	r30, 0x3d	; 61
   1753a:	fe b7       	in	r31, 0x3e	; 62
   1753c:	81 83       	std	Z+1, r24	; 0x01
   1753e:	92 83       	std	Z+2, r25	; 0x02
   17540:	a3 83       	std	Z+3, r26	; 0x03
   17542:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   17546:	de c1       	rjmp	.+956    	; 0x17904 <Amigo_Command+0x5b0>
        return(status & ERROR_MASK);
    }
#if SDEBUG
    if(debuglevel & 32)
   17548:	25 ff       	sbrs	r18, 5
   1754a:	0e c0       	rjmp	.+28     	; 0x17568 <Amigo_Command+0x214>
        printf("[AMIGO Command(%02XH): GPIB read bytes:%02XH]\n",
   1754c:	ed b7       	in	r30, 0x3d	; 61
   1754e:	fe b7       	in	r31, 0x3e	; 62
   17550:	17 83       	std	Z+7, r17	; 0x07
   17552:	06 83       	std	Z+6, r16	; 0x06
   17554:	f5 82       	std	Z+5, r15	; 0x05
   17556:	e4 82       	std	Z+4, r14	; 0x04
   17558:	85 e2       	ldi	r24, 0x25	; 37
   1755a:	9a e2       	ldi	r25, 0x2A	; 42
   1755c:	a0 e0       	ldi	r26, 0x00	; 0
   1755e:	81 83       	std	Z+1, r24	; 0x01
   17560:	92 83       	std	Z+2, r25	; 0x02
   17562:	a3 83       	std	Z+3, r26	; 0x03
   17564:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
            secondary, len);
#endif
    if(!len)
   17568:	01 15       	cp	r16, r1
   1756a:	11 05       	cpc	r17, r1
   1756c:	61 f4       	brne	.+24     	; 0x17586 <Amigo_Command+0x232>
    {
        AMIGOs->dsj = 1;
   1756e:	e0 91 ff 18 	lds	r30, 0x18FF	; 0x8018ff <AMIGOs>
   17572:	f0 91 00 19 	lds	r31, 0x1900	; 0x801900 <AMIGOs+0x1>
   17576:	81 e0       	ldi	r24, 0x01	; 1
   17578:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   1757a:	87 81       	ldd	r24, Z+7	; 0x07
   1757c:	90 85       	ldd	r25, Z+8	; 0x08
   1757e:	80 62       	ori	r24, 0x20	; 32
   17580:	90 87       	std	Z+8, r25	; 0x08
   17582:	87 83       	std	Z+7, r24	; 0x07
   17584:	bf c1       	rjmp	.+894    	; 0x17904 <Amigo_Command+0x5b0>
        return(status & ERROR_MASK);
    }

    ptr = gpib_iobuff;
    op = *ptr++;
   17586:	60 91 80 1c 	lds	r22, 0x1C80	; 0x801c80 <gpib_iobuff>

    if (secondary == 0x68)
   1758a:	f8 e6       	ldi	r31, 0x68	; 104
   1758c:	ef 16       	cp	r14, r31
   1758e:	f1 04       	cpc	r15, r1
   17590:	09 f0       	breq	.+2      	; 0x17594 <Amigo_Command+0x240>
   17592:	28 c1       	rjmp	.+592    	; 0x177e4 <Amigo_Command+0x490>
    {
        if(op == 0x00 && len == 2)
   17594:	61 11       	cpse	r22, r1
   17596:	2e c0       	rjmp	.+92     	; 0x175f4 <Amigo_Command+0x2a0>
   17598:	02 30       	cpi	r16, 0x02	; 2
   1759a:	11 05       	cpc	r17, r1
   1759c:	09 f0       	breq	.+2      	; 0x175a0 <Amigo_Command+0x24c>
   1759e:	b7 c1       	rjmp	.+878    	; 0x1790e <Amigo_Command+0x5ba>
        {
///  Reference: A40

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & 32)
   175a0:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   175a4:	85 ff       	sbrs	r24, 5
   175a6:	0a c0       	rjmp	.+20     	; 0x175bc <Amigo_Command+0x268>
                printf("[AMIGO Cold Load Read Command]\n");
   175a8:	85 e0       	ldi	r24, 0x05	; 5
   175aa:	9a e2       	ldi	r25, 0x2A	; 42
   175ac:	a0 e0       	ldi	r26, 0x00	; 0
   175ae:	ed b7       	in	r30, 0x3d	; 61
   175b0:	fe b7       	in	r31, 0x3e	; 62
   175b2:	81 83       	std	Z+1, r24	; 0x01
   175b4:	92 83       	std	Z+2, r25	; 0x02
   175b6:	a3 83       	std	Z+3, r26	; 0x03
   175b8:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
#endif
            ///TODO we do NOT support multiple units yet
            AMIGOs->unitNO = 0;
   175bc:	e0 91 ff 18 	lds	r30, 0x18FF	; 0x8018ff <AMIGOs>
   175c0:	f0 91 00 19 	lds	r31, 0x1900	; 0x801900 <AMIGOs+0x1>
   175c4:	11 82       	std	Z+1, r1	; 0x01
            AMIGOs->dsj = 0;
   175c6:	16 82       	std	Z+6, r1	; 0x06
            AMIGOs->Errors = 0;
   175c8:	10 86       	std	Z+8, r1	; 0x08
   175ca:	17 82       	std	Z+7, r1	; 0x07
            /// Fill in temparary address
            tmp.cyl = 0;
   175cc:	1d 86       	std	Y+13, r1	; 0x0d
            tmp.head = ( (0xff & *ptr) >> 6) & 0x03;
   175ce:	80 91 81 1c 	lds	r24, 0x1C81	; 0x801c81 <gpib_iobuff+0x1>
   175d2:	98 2f       	mov	r25, r24
   175d4:	92 95       	swap	r25
   175d6:	96 95       	lsr	r25
   175d8:	96 95       	lsr	r25
   175da:	93 70       	andi	r25, 0x03	; 3
   175dc:	9e 87       	std	Y+14, r25	; 0x0e
            tmp.sector = 0x3f & *ptr;
   175de:	8f 73       	andi	r24, 0x3F	; 63
   175e0:	8f 87       	std	Y+15, r24	; 0x0f
            ++ptr;
            //update to real address on sucess
            amigo_seek((AMIGOStateType *) &tmp);
   175e2:	ce 01       	movw	r24, r28
   175e4:	0a 96       	adiw	r24, 0x0a	; 10
   175e6:	1a da       	rcall	.-3020   	; 0x16a1c <amigo_seek>
            AMIGOs->state = AMIGO_COLD_LOAD_READ;
   175e8:	e0 91 ff 18 	lds	r30, 0x18FF	; 0x8018ff <AMIGOs>
   175ec:	f0 91 00 19 	lds	r31, 0x1900	; 0x801900 <AMIGOs+0x1>
   175f0:	85 e0       	ldi	r24, 0x05	; 5
   175f2:	5c c1       	rjmp	.+696    	; 0x178ac <Amigo_Command+0x558>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 5)
   175f4:	62 30       	cpi	r22, 0x02	; 2
   175f6:	09 f0       	breq	.+2      	; 0x175fa <Amigo_Command+0x2a6>
   175f8:	3f c0       	rjmp	.+126    	; 0x17678 <Amigo_Command+0x324>
   175fa:	05 30       	cpi	r16, 0x05	; 5
   175fc:	11 05       	cpc	r17, r1
   175fe:	d1 f4       	brne	.+52     	; 0x17634 <Amigo_Command+0x2e0>
/// @brief 
///  Seek 1 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & 32)
   17600:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17604:	85 ff       	sbrs	r24, 5
   17606:	0a c0       	rjmp	.+20     	; 0x1761c <Amigo_Command+0x2c8>
                printf("[AMIGO Seek len=5]\n");
   17608:	81 ef       	ldi	r24, 0xF1	; 241
   1760a:	99 e2       	ldi	r25, 0x29	; 41
   1760c:	a0 e0       	ldi	r26, 0x00	; 0
   1760e:	ed b7       	in	r30, 0x3d	; 61
   17610:	fe b7       	in	r31, 0x3e	; 62
   17612:	81 83       	std	Z+1, r24	; 0x01
   17614:	92 83       	std	Z+2, r25	; 0x02
   17616:	a3 83       	std	Z+3, r26	; 0x03
   17618:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1761c:	80 91 81 1c 	lds	r24, 0x1C81	; 0x801c81 <gpib_iobuff+0x1>
   17620:	85 de       	rcall	.-758    	; 0x1732c <amigo_check_unit>

            /// Fill in temparary address
            tmp.cyl = 0xff & *ptr++;
   17622:	80 91 82 1c 	lds	r24, 0x1C82	; 0x801c82 <gpib_iobuff+0x2>
   17626:	8d 87       	std	Y+13, r24	; 0x0d
            tmp.head = 0xff & *ptr++;
   17628:	80 91 83 1c 	lds	r24, 0x1C83	; 0x801c83 <gpib_iobuff+0x3>
   1762c:	8e 87       	std	Y+14, r24	; 0x0e
            tmp.sector = 0xff & *ptr++;
   1762e:	80 91 84 1c 	lds	r24, 0x1C84	; 0x801c84 <gpib_iobuff+0x4>
   17632:	1d c0       	rjmp	.+58     	; 0x1766e <Amigo_Command+0x31a>
            //update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 6)
   17634:	06 30       	cpi	r16, 0x06	; 6
   17636:	11 05       	cpc	r17, r1
   17638:	09 f0       	breq	.+2      	; 0x1763c <Amigo_Command+0x2e8>
   1763a:	69 c1       	rjmp	.+722    	; 0x1790e <Amigo_Command+0x5ba>
/// @brief 
///  Seek 2 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & 32)
   1763c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17640:	85 ff       	sbrs	r24, 5
   17642:	0a c0       	rjmp	.+20     	; 0x17658 <Amigo_Command+0x304>
                printf("[AMIGO Seek len=6]\n");
   17644:	8d ed       	ldi	r24, 0xDD	; 221
   17646:	99 e2       	ldi	r25, 0x29	; 41
   17648:	a0 e0       	ldi	r26, 0x00	; 0
   1764a:	ed b7       	in	r30, 0x3d	; 61
   1764c:	fe b7       	in	r31, 0x3e	; 62
   1764e:	81 83       	std	Z+1, r24	; 0x01
   17650:	92 83       	std	Z+2, r25	; 0x02
   17652:	a3 83       	std	Z+3, r26	; 0x03
   17654:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17658:	80 91 81 1c 	lds	r24, 0x1C81	; 0x801c81 <gpib_iobuff+0x1>
   1765c:	67 de       	rcall	.-818    	; 0x1732c <amigo_check_unit>
            /// Fill in temparary address
            tmp.cyl = (0xff & *ptr++) << 8;       // MSB
            tmp.cyl |= (0xff & *ptr++);           // LSB
   1765e:	80 91 83 1c 	lds	r24, 0x1C83	; 0x801c83 <gpib_iobuff+0x3>
   17662:	8d 87       	std	Y+13, r24	; 0x0d
            tmp.head = 0xff & *ptr++;
   17664:	80 91 84 1c 	lds	r24, 0x1C84	; 0x801c84 <gpib_iobuff+0x4>
   17668:	8e 87       	std	Y+14, r24	; 0x0e
            tmp.sector = 0xff & *ptr++;
   1766a:	80 91 85 1c 	lds	r24, 0x1C85	; 0x801c85 <gpib_iobuff+0x5>
            //update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
   1766e:	8f 87       	std	Y+15, r24	; 0x0f
   17670:	ce 01       	movw	r24, r28
   17672:	0a 96       	adiw	r24, 0x0a	; 10
   17674:	d3 d9       	rcall	.-3162   	; 0x16a1c <amigo_seek>
   17676:	1b c1       	rjmp	.+566    	; 0x178ae <Amigo_Command+0x55a>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x03 && len == 2)
   17678:	63 30       	cpi	r22, 0x03	; 3
   1767a:	e9 f4       	brne	.+58     	; 0x176b6 <Amigo_Command+0x362>
   1767c:	02 30       	cpi	r16, 0x02	; 2
   1767e:	11 05       	cpc	r17, r1
   17680:	09 f0       	breq	.+2      	; 0x17684 <Amigo_Command+0x330>
   17682:	45 c1       	rjmp	.+650    	; 0x1790e <Amigo_Command+0x5ba>
        {
///  Reference: A15
#if SDEBUG
            if(debuglevel & 32)
   17684:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17688:	85 ff       	sbrs	r24, 5
   1768a:	0a c0       	rjmp	.+20     	; 0x176a0 <Amigo_Command+0x34c>
                printf("[AMIGO Request Status Buffered Command]\n");
   1768c:	84 eb       	ldi	r24, 0xB4	; 180
   1768e:	99 e2       	ldi	r25, 0x29	; 41
   17690:	a0 e0       	ldi	r26, 0x00	; 0
   17692:	ed b7       	in	r30, 0x3d	; 61
   17694:	fe b7       	in	r31, 0x3e	; 62
   17696:	81 83       	std	Z+1, r24	; 0x01
   17698:	92 83       	std	Z+2, r25	; 0x02
   1769a:	a3 83       	std	Z+3, r26	; 0x03
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1769c:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   176a0:	80 91 81 1c 	lds	r24, 0x1C81	; 0x801c81 <gpib_iobuff+0x1>
            amigo_request_status();
   176a4:	43 de       	rcall	.-890    	; 0x1732c <amigo_check_unit>
            AMIGOs->state = AMIGO_REQUEST_STATUS_BUFFERED;
   176a6:	78 d8       	rcall	.-3856   	; 0x16798 <amigo_request_status>
   176a8:	e0 91 ff 18 	lds	r30, 0x18FF	; 0x8018ff <AMIGOs>
   176ac:	f0 91 00 19 	lds	r31, 0x1900	; 0x801900 <AMIGOs+0x1>
   176b0:	83 e0       	ldi	r24, 0x03	; 3
   176b2:	80 83       	st	Z, r24
            return(status & ERROR_MASK);
        }
        else if(op == 0x05 && len == 2)
   176b4:	27 c1       	rjmp	.+590    	; 0x17904 <Amigo_Command+0x5b0>
   176b6:	65 30       	cpi	r22, 0x05	; 5
   176b8:	d9 f4       	brne	.+54     	; 0x176f0 <Amigo_Command+0x39c>
   176ba:	02 30       	cpi	r16, 0x02	; 2
   176bc:	11 05       	cpc	r17, r1
   176be:	09 f0       	breq	.+2      	; 0x176c2 <Amigo_Command+0x36e>
        {
///  Reference: A35
#if SDEBUG
            if(debuglevel & 32)
   176c0:	26 c1       	rjmp	.+588    	; 0x1790e <Amigo_Command+0x5ba>
   176c2:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   176c6:	85 ff       	sbrs	r24, 5
                printf("[AMIGO Read Unbuffered Command]\n");
   176c8:	0a c0       	rjmp	.+20     	; 0x176de <Amigo_Command+0x38a>
   176ca:	83 e9       	ldi	r24, 0x93	; 147
   176cc:	99 e2       	ldi	r25, 0x29	; 41
   176ce:	a0 e0       	ldi	r26, 0x00	; 0
   176d0:	ed b7       	in	r30, 0x3d	; 61
   176d2:	fe b7       	in	r31, 0x3e	; 62
   176d4:	81 83       	std	Z+1, r24	; 0x01
   176d6:	92 83       	std	Z+2, r25	; 0x02
   176d8:	a3 83       	std	Z+3, r26	; 0x03
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   176da:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   176de:	80 91 81 1c 	lds	r24, 0x1C81	; 0x801c81 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_READ_UNBUFFERED;
   176e2:	24 de       	rcall	.-952    	; 0x1732c <amigo_check_unit>
   176e4:	e0 91 ff 18 	lds	r30, 0x18FF	; 0x8018ff <AMIGOs>
   176e8:	f0 91 00 19 	lds	r31, 0x1900	; 0x801900 <AMIGOs+0x1>
   176ec:	86 e0       	ldi	r24, 0x06	; 6
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x07 && len == 4)
   176ee:	de c0       	rjmp	.+444    	; 0x178ac <Amigo_Command+0x558>
   176f0:	67 30       	cpi	r22, 0x07	; 7
   176f2:	f9 f4       	brne	.+62     	; 0x17732 <Amigo_Command+0x3de>
   176f4:	04 30       	cpi	r16, 0x04	; 4
   176f6:	11 05       	cpc	r17, r1
   176f8:	09 f0       	breq	.+2      	; 0x176fc <Amigo_Command+0x3a8>
        {
            uint16_t sectors;
#if SDEBUG
            if(debuglevel & 32)
   176fa:	09 c1       	rjmp	.+530    	; 0x1790e <Amigo_Command+0x5ba>
   176fc:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17700:	85 ff       	sbrs	r24, 5
                printf("[AMIGO Verify]\n");
   17702:	0a c0       	rjmp	.+20     	; 0x17718 <Amigo_Command+0x3c4>
   17704:	83 e8       	ldi	r24, 0x83	; 131
   17706:	99 e2       	ldi	r25, 0x29	; 41
   17708:	a0 e0       	ldi	r26, 0x00	; 0
   1770a:	ed b7       	in	r30, 0x3d	; 61
   1770c:	fe b7       	in	r31, 0x3e	; 62
   1770e:	81 83       	std	Z+1, r24	; 0x01
   17710:	92 83       	std	Z+2, r25	; 0x02
   17712:	a3 83       	std	Z+3, r26	; 0x03
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17714:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   17718:	80 91 81 1c 	lds	r24, 0x1C81	; 0x801c81 <gpib_iobuff+0x1>
            sectors = (0xff & *ptr++) << 8;
   1771c:	07 de       	rcall	.-1010   	; 0x1732c <amigo_check_unit>
   1771e:	80 91 82 1c 	lds	r24, 0x1C82	; 0x801c82 <gpib_iobuff+0x2>
            sectors |= (0xff & *ptr++);
            return ( amigo_verify( sectors) );
   17722:	90 e0       	ldi	r25, 0x00	; 0
   17724:	98 2f       	mov	r25, r24
   17726:	88 27       	eor	r24, r24
   17728:	20 91 83 1c 	lds	r18, 0x1C83	; 0x801c83 <gpib_iobuff+0x3>
   1772c:	82 2b       	or	r24, r18
        }
        else if(op == 0x08 && len == 2)
   1772e:	a1 d9       	rcall	.-3262   	; 0x16a72 <amigo_verify>
   17730:	f1 c0       	rjmp	.+482    	; 0x17914 <Amigo_Command+0x5c0>
   17732:	68 30       	cpi	r22, 0x08	; 8
   17734:	d9 f4       	brne	.+54     	; 0x1776c <Amigo_Command+0x418>
   17736:	02 30       	cpi	r16, 0x02	; 2
   17738:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   1773a:	09 f0       	breq	.+2      	; 0x1773e <Amigo_Command+0x3ea>
   1773c:	e8 c0       	rjmp	.+464    	; 0x1790e <Amigo_Command+0x5ba>
   1773e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
                printf("[AMIGO Write Unbuffered Command]\n");
   17742:	85 ff       	sbrs	r24, 5
   17744:	0a c0       	rjmp	.+20     	; 0x1775a <Amigo_Command+0x406>
   17746:	81 e6       	ldi	r24, 0x61	; 97
   17748:	99 e2       	ldi	r25, 0x29	; 41
   1774a:	a0 e0       	ldi	r26, 0x00	; 0
   1774c:	ed b7       	in	r30, 0x3d	; 61
   1774e:	fe b7       	in	r31, 0x3e	; 62
   17750:	81 83       	std	Z+1, r24	; 0x01
   17752:	92 83       	std	Z+2, r25	; 0x02
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17754:	a3 83       	std	Z+3, r26	; 0x03
   17756:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   1775a:	80 91 81 1c 	lds	r24, 0x1C81	; 0x801c81 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_WRITE_UNBUFFERED;
   1775e:	e6 dd       	rcall	.-1076   	; 0x1732c <amigo_check_unit>
   17760:	e0 91 ff 18 	lds	r30, 0x18FF	; 0x8018ff <AMIGOs>
   17764:	f0 91 00 19 	lds	r31, 0x1900	; 0x801900 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if((op == 0x0B || op == 0x2b) && len == 2)
   17768:	88 e0       	ldi	r24, 0x08	; 8
   1776a:	a0 c0       	rjmp	.+320    	; 0x178ac <Amigo_Command+0x558>
   1776c:	86 2f       	mov	r24, r22
   1776e:	8f 7d       	andi	r24, 0xDF	; 223
   17770:	8b 30       	cpi	r24, 0x0B	; 11
   17772:	d9 f4       	brne	.+54     	; 0x177aa <Amigo_Command+0x456>
   17774:	02 30       	cpi	r16, 0x02	; 2
   17776:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   17778:	09 f0       	breq	.+2      	; 0x1777c <Amigo_Command+0x428>
   1777a:	c9 c0       	rjmp	.+402    	; 0x1790e <Amigo_Command+0x5ba>
   1777c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
                printf("[AMIGO Initialize Command]\n");
   17780:	85 ff       	sbrs	r24, 5
   17782:	0a c0       	rjmp	.+20     	; 0x17798 <Amigo_Command+0x444>
   17784:	85 e4       	ldi	r24, 0x45	; 69
   17786:	99 e2       	ldi	r25, 0x29	; 41
   17788:	a0 e0       	ldi	r26, 0x00	; 0
   1778a:	ed b7       	in	r30, 0x3d	; 61
   1778c:	fe b7       	in	r31, 0x3e	; 62
   1778e:	81 83       	std	Z+1, r24	; 0x01
   17790:	92 83       	std	Z+2, r25	; 0x02
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17792:	a3 83       	std	Z+3, r26	; 0x03
   17794:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   17798:	80 91 81 1c 	lds	r24, 0x1C81	; 0x801c81 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_INITIALIZE;
   1779c:	c7 dd       	rcall	.-1138   	; 0x1732c <amigo_check_unit>
   1779e:	e0 91 ff 18 	lds	r30, 0x18FF	; 0x8018ff <AMIGOs>
   177a2:	f0 91 00 19 	lds	r31, 0x1900	; 0x801900 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x14 && len == 2)
   177a6:	8a e0       	ldi	r24, 0x0A	; 10
   177a8:	81 c0       	rjmp	.+258    	; 0x178ac <Amigo_Command+0x558>
   177aa:	64 31       	cpi	r22, 0x14	; 20
   177ac:	09 f0       	breq	.+2      	; 0x177b0 <Amigo_Command+0x45c>
   177ae:	af c0       	rjmp	.+350    	; 0x1790e <Amigo_Command+0x5ba>
   177b0:	02 30       	cpi	r16, 0x02	; 2
   177b2:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   177b4:	09 f0       	breq	.+2      	; 0x177b8 <Amigo_Command+0x464>
   177b6:	ab c0       	rjmp	.+342    	; 0x1790e <Amigo_Command+0x5ba>
   177b8:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
                printf("[AMIGO Request Logical Address Command]\n");
   177bc:	85 ff       	sbrs	r24, 5
   177be:	0a c0       	rjmp	.+20     	; 0x177d4 <Amigo_Command+0x480>
   177c0:	8c e1       	ldi	r24, 0x1C	; 28
   177c2:	99 e2       	ldi	r25, 0x29	; 41
   177c4:	a0 e0       	ldi	r26, 0x00	; 0
   177c6:	ed b7       	in	r30, 0x3d	; 61
   177c8:	fe b7       	in	r31, 0x3e	; 62
   177ca:	81 83       	std	Z+1, r24	; 0x01
   177cc:	92 83       	std	Z+2, r25	; 0x02
   177ce:	a3 83       	std	Z+3, r26	; 0x03
#endif
            amigo_request_logical_address();
   177d0:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
            AMIGOs->state = AMIGO_REQUEST_LOGICAL_ADDRESS;
   177d4:	0e 94 be b3 	call	0x1677c	; 0x1677c <amigo_request_logical_address>
   177d8:	e0 91 ff 18 	lds	r30, 0x18FF	; 0x8018ff <AMIGOs>
   177dc:	f0 91 00 19 	lds	r31, 0x1900	; 0x801900 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x69)
   177e0:	84 e0       	ldi	r24, 0x04	; 4
   177e2:	64 c0       	rjmp	.+200    	; 0x178ac <Amigo_Command+0x558>
   177e4:	f9 e6       	ldi	r31, 0x69	; 105
   177e6:	ef 16       	cp	r14, r31
    {
        if(op == 0x08 && len == 2)
   177e8:	f1 04       	cpc	r15, r1
   177ea:	f1 f4       	brne	.+60     	; 0x17828 <Amigo_Command+0x4d4>
   177ec:	68 30       	cpi	r22, 0x08	; 8
   177ee:	09 f0       	breq	.+2      	; 0x177f2 <Amigo_Command+0x49e>
   177f0:	8e c0       	rjmp	.+284    	; 0x1790e <Amigo_Command+0x5ba>
   177f2:	02 30       	cpi	r16, 0x02	; 2
   177f4:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   177f6:	09 f0       	breq	.+2      	; 0x177fa <Amigo_Command+0x4a6>
   177f8:	8a c0       	rjmp	.+276    	; 0x1790e <Amigo_Command+0x5ba>
   177fa:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
                printf("[AMIGO Write Buffered Command]\n");
   177fe:	85 ff       	sbrs	r24, 5
   17800:	0a c0       	rjmp	.+20     	; 0x17816 <Amigo_Command+0x4c2>
   17802:	8c ef       	ldi	r24, 0xFC	; 252
   17804:	98 e2       	ldi	r25, 0x28	; 40
   17806:	a0 e0       	ldi	r26, 0x00	; 0
   17808:	ed b7       	in	r30, 0x3d	; 61
   1780a:	fe b7       	in	r31, 0x3e	; 62
   1780c:	81 83       	std	Z+1, r24	; 0x01
   1780e:	92 83       	std	Z+2, r25	; 0x02
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17810:	a3 83       	std	Z+3, r26	; 0x03
   17812:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   17816:	80 91 81 1c 	lds	r24, 0x1C81	; 0x801c81 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_WRITE_BUFFERED;
   1781a:	88 dd       	rcall	.-1264   	; 0x1732c <amigo_check_unit>
   1781c:	e0 91 ff 18 	lds	r30, 0x18FF	; 0x8018ff <AMIGOs>
   17820:	f0 91 00 19 	lds	r31, 0x1900	; 0x801900 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x6A)
   17824:	89 e0       	ldi	r24, 0x09	; 9
   17826:	42 c0       	rjmp	.+132    	; 0x178ac <Amigo_Command+0x558>
   17828:	fa e6       	ldi	r31, 0x6A	; 106
   1782a:	ef 16       	cp	r14, r31
   1782c:	f1 04       	cpc	r15, r1
    {
        if(op == 0x08 && len == 2)
   1782e:	09 f0       	breq	.+2      	; 0x17832 <Amigo_Command+0x4de>
   17830:	47 c0       	rjmp	.+142    	; 0x178c0 <Amigo_Command+0x56c>
   17832:	68 30       	cpi	r22, 0x08	; 8
   17834:	f1 f4       	brne	.+60     	; 0x17872 <Amigo_Command+0x51e>
   17836:	02 30       	cpi	r16, 0x02	; 2
   17838:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   1783a:	09 f0       	breq	.+2      	; 0x1783e <Amigo_Command+0x4ea>
   1783c:	68 c0       	rjmp	.+208    	; 0x1790e <Amigo_Command+0x5ba>
   1783e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
                printf("[AMIGO Request Status Unbuffered Command]\n");
   17842:	85 ff       	sbrs	r24, 5
   17844:	0a c0       	rjmp	.+20     	; 0x1785a <Amigo_Command+0x506>
   17846:	81 ed       	ldi	r24, 0xD1	; 209
   17848:	98 e2       	ldi	r25, 0x28	; 40
   1784a:	a0 e0       	ldi	r26, 0x00	; 0
   1784c:	ed b7       	in	r30, 0x3d	; 61
   1784e:	fe b7       	in	r31, 0x3e	; 62
   17850:	81 83       	std	Z+1, r24	; 0x01
   17852:	92 83       	std	Z+2, r25	; 0x02
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17854:	a3 83       	std	Z+3, r26	; 0x03
   17856:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   1785a:	80 91 81 1c 	lds	r24, 0x1C81	; 0x801c81 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_REQUEST_STATUS_UNBUFFERED;
   1785e:	66 dd       	rcall	.-1332   	; 0x1732c <amigo_check_unit>
   17860:	e0 91 ff 18 	lds	r30, 0x18FF	; 0x8018ff <AMIGOs>
   17864:	f0 91 00 19 	lds	r31, 0x1900	; 0x801900 <AMIGOs+0x1>
            amigo_request_status();
   17868:	82 e0       	ldi	r24, 0x02	; 2
   1786a:	80 83       	st	Z, r24
   1786c:	0e 94 cc b3 	call	0x16798	; 0x16798 <amigo_request_status>
            return(status & ERROR_MASK);
        }
        if(op == 0x05 && len == 2)
   17870:	49 c0       	rjmp	.+146    	; 0x17904 <Amigo_Command+0x5b0>
   17872:	65 30       	cpi	r22, 0x05	; 5
   17874:	09 f0       	breq	.+2      	; 0x17878 <Amigo_Command+0x524>
   17876:	4b c0       	rjmp	.+150    	; 0x1790e <Amigo_Command+0x5ba>
   17878:	02 30       	cpi	r16, 0x02	; 2
   1787a:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   1787c:	09 f0       	breq	.+2      	; 0x17880 <Amigo_Command+0x52c>
   1787e:	47 c0       	rjmp	.+142    	; 0x1790e <Amigo_Command+0x5ba>
   17880:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
                printf("[AMIGO Read Buffered Command]\n");
   17884:	85 ff       	sbrs	r24, 5
   17886:	0a c0       	rjmp	.+20     	; 0x1789c <Amigo_Command+0x548>
   17888:	82 eb       	ldi	r24, 0xB2	; 178
   1788a:	98 e2       	ldi	r25, 0x28	; 40
   1788c:	a0 e0       	ldi	r26, 0x00	; 0
   1788e:	ed b7       	in	r30, 0x3d	; 61
   17890:	fe b7       	in	r31, 0x3e	; 62
   17892:	81 83       	std	Z+1, r24	; 0x01
   17894:	92 83       	std	Z+2, r25	; 0x02
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17896:	a3 83       	std	Z+3, r26	; 0x03
   17898:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   1789c:	80 91 81 1c 	lds	r24, 0x1C81	; 0x801c81 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_READ_BUFFERED;
   178a0:	45 dd       	rcall	.-1398   	; 0x1732c <amigo_check_unit>
   178a2:	e0 91 ff 18 	lds	r30, 0x18FF	; 0x8018ff <AMIGOs>
   178a6:	f0 91 00 19 	lds	r31, 0x1900	; 0x801900 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
   178aa:	87 e0       	ldi	r24, 0x07	; 7
   178ac:	80 83       	st	Z, r24
   178ae:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOp>
   178b2:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOp+0x1>
   178b6:	81 81       	ldd	r24, Z+1	; 0x01
   178b8:	90 e0       	ldi	r25, 0x00	; 0
   178ba:	0e 94 70 86 	call	0x10ce0	; 0x10ce0 <gpib_enable_PPR>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x6C)
   178be:	22 c0       	rjmp	.+68     	; 0x17904 <Amigo_Command+0x5b0>
   178c0:	fc e6       	ldi	r31, 0x6C	; 108
   178c2:	ef 16       	cp	r14, r31
    {
        if(op == 0x18 && len == 5)
   178c4:	f1 04       	cpc	r15, r1
   178c6:	d1 f4       	brne	.+52     	; 0x178fc <Amigo_Command+0x5a8>
   178c8:	68 31       	cpi	r22, 0x18	; 24
   178ca:	09 f5       	brne	.+66     	; 0x1790e <Amigo_Command+0x5ba>
   178cc:	05 30       	cpi	r16, 0x05	; 5
        {
///  Reference: A48 ..  A50

            uint8_t db;
#if SDEBUG
            if(debuglevel & 32)
   178ce:	11 05       	cpc	r17, r1
   178d0:	f1 f4       	brne	.+60     	; 0x1790e <Amigo_Command+0x5ba>
   178d2:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
                printf("[AMIGO Format]\n");
   178d6:	85 ff       	sbrs	r24, 5
   178d8:	0a c0       	rjmp	.+20     	; 0x178ee <Amigo_Command+0x59a>
   178da:	82 ea       	ldi	r24, 0xA2	; 162
   178dc:	98 e2       	ldi	r25, 0x28	; 40
   178de:	a0 e0       	ldi	r26, 0x00	; 0
   178e0:	ed b7       	in	r30, 0x3d	; 61
   178e2:	fe b7       	in	r31, 0x3e	; 62
   178e4:	81 83       	std	Z+1, r24	; 0x01
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   178e6:	92 83       	std	Z+2, r25	; 0x02
   178e8:	a3 83       	std	Z+3, r26	; 0x03
   178ea:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
            ++ptr; // override not used
            ++ptr; // interleave not used
            db = 0xff & *ptr++;
            amigo_format(db);
   178ee:	80 91 81 1c 	lds	r24, 0x1C81	; 0x801c81 <gpib_iobuff+0x1>
   178f2:	1c dd       	rcall	.-1480   	; 0x1732c <amigo_check_unit>
   178f4:	80 91 84 1c 	lds	r24, 0x1C84	; 0x801c84 <gpib_iobuff+0x4>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x70)                   // HP-300 Clear
   178f8:	58 d9       	rcall	.-3408   	; 0x16baa <amigo_format>
   178fa:	04 c0       	rjmp	.+8      	; 0x17904 <Amigo_Command+0x5b0>
    {
///  Reference: A23
        ++ptr;                                    // Dummy byte
        return(status & ERROR_MASK);
   178fc:	f0 e7       	ldi	r31, 0x70	; 112
   178fe:	ef 16       	cp	r14, r31
   17900:	f1 04       	cpc	r15, r1
   17902:	29 f4       	brne	.+10     	; 0x1790e <Amigo_Command+0x5ba>
   17904:	8b 8d       	ldd	r24, Y+27	; 0x1b
    }
    return ( amigo_todo_op(secondary, op, len) );
   17906:	9c 8d       	ldd	r25, Y+28	; 0x1c
   17908:	88 27       	eor	r24, r24
   1790a:	90 7d       	andi	r25, 0xD0	; 208
   1790c:	03 c0       	rjmp	.+6      	; 0x17914 <Amigo_Command+0x5c0>
}
   1790e:	a8 01       	movw	r20, r16
   17910:	8e 2d       	mov	r24, r14
   17912:	ef db       	rcall	.-2082   	; 0x170f2 <amigo_todo_op>
   17914:	6c 96       	adiw	r28, 0x1c	; 28
   17916:	e6 e0       	ldi	r30, 0x06	; 6
   17918:	0c 94 f0 e3 	jmp	0x1c7e0	; 0x1c7e0 <__epilogue_restores__+0x18>

0001791c <Amigo_Execute>:
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)


int Amigo_Execute( int secondary )
{
   1791c:	a9 e0       	ldi	r26, 0x09	; 9
   1791e:	b0 e0       	ldi	r27, 0x00	; 0
   17920:	e4 e9       	ldi	r30, 0x94	; 148
   17922:	fc eb       	ldi	r31, 0xBC	; 188
   17924:	0c 94 d8 e3 	jmp	0x1c7b0	; 0x1c7b0 <__prologue_saves__+0x20>
   17928:	ec 01       	movw	r28, r24
#if SDEBUG
    if(debuglevel & 32)
   1792a:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1792e:	85 ff       	sbrs	r24, 5
   17930:	16 c0       	rjmp	.+44     	; 0x1795e <Amigo_Execute+0x42>
        printf("[AMIGO Execute(%02XH): listen:%02XH, talk:%02XH]\n",
   17932:	80 91 84 1e 	lds	r24, 0x1E84	; 0x801e84 <talking>
   17936:	90 e0       	ldi	r25, 0x00	; 0
   17938:	ed b7       	in	r30, 0x3d	; 61
   1793a:	fe b7       	in	r31, 0x3e	; 62
   1793c:	91 87       	std	Z+9, r25	; 0x09
   1793e:	80 87       	std	Z+8, r24	; 0x08
   17940:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <listening>
   17944:	90 e0       	ldi	r25, 0x00	; 0
   17946:	97 83       	std	Z+7, r25	; 0x07
   17948:	86 83       	std	Z+6, r24	; 0x06
   1794a:	d5 83       	std	Z+5, r29	; 0x05
   1794c:	c4 83       	std	Z+4, r28	; 0x04
   1794e:	80 e7       	ldi	r24, 0x70	; 112
   17950:	98 e2       	ldi	r25, 0x28	; 40
   17952:	a0 e0       	ldi	r26, 0x00	; 0
   17954:	81 83       	std	Z+1, r24	; 0x01
   17956:	92 83       	std	Z+2, r25	; 0x02
   17958:	a3 83       	std	Z+3, r26	; 0x03
   1795a:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
            secondary, listening, talking);
#endif

    if(talking == UNT)
   1795e:	80 91 84 1e 	lds	r24, 0x1E84	; 0x801e84 <talking>
   17962:	8f 35       	cpi	r24, 0x5F	; 95
   17964:	09 f4       	brne	.+2      	; 0x17968 <Amigo_Execute+0x4c>
   17966:	ad c0       	rjmp	.+346    	; 0x17ac2 <Amigo_Execute+0x1a6>
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   17968:	90 e0       	ldi	r25, 0x00	; 0
   1796a:	0e 94 c8 8c 	call	0x11990	; 0x11990 <AMIGO_is_MTA>
   1796e:	89 2b       	or	r24, r25
   17970:	39 f0       	breq	.+14     	; 0x17980 <Amigo_Execute+0x64>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
   17972:	ce 01       	movw	r24, r28
   17974:	87 7f       	andi	r24, 0xF7	; 247
   17976:	80 36       	cpi	r24, 0x60	; 96
   17978:	91 05       	cpc	r25, r1
   1797a:	09 f0       	breq	.+2      	; 0x1797e <Amigo_Execute+0x62>
   1797c:	a2 c0       	rjmp	.+324    	; 0x17ac2 <Amigo_Execute+0x1a6>
   1797e:	08 c0       	rjmp	.+16     	; 0x17990 <Amigo_Execute+0x74>
#endif

    if(talking == UNT)
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   17980:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <listening>
   17984:	90 e0       	ldi	r25, 0x00	; 0
   17986:	0e 94 b9 8c 	call	0x11972	; 0x11972 <AMIGO_is_MLA>
   1798a:	89 2b       	or	r24, r25
   1798c:	91 f7       	brne	.-28     	; 0x17972 <Amigo_Execute+0x56>
   1798e:	99 c0       	rjmp	.+306    	; 0x17ac2 <Amigo_Execute+0x1a6>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17990:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOp>
   17994:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOp+0x1>
   17998:	81 81       	ldd	r24, Z+1	; 0x01
   1799a:	90 e0       	ldi	r25, 0x00	; 0
   1799c:	0e 94 a6 86 	call	0x10d4c	; 0x10d4c <gpib_disable_PPR>

    if(secondary == 0x60)
   179a0:	c0 36       	cpi	r28, 0x60	; 96
   179a2:	d1 05       	cpc	r29, r1
   179a4:	09 f0       	breq	.+2      	; 0x179a8 <Amigo_Execute+0x8c>
   179a6:	4e c0       	rjmp	.+156    	; 0x17a44 <Amigo_Execute+0x128>
    {
        switch(AMIGOs->state)
   179a8:	e0 91 ff 18 	lds	r30, 0x18FF	; 0x8018ff <AMIGOs>
   179ac:	f0 91 00 19 	lds	r31, 0x1900	; 0x801900 <AMIGOs+0x1>
   179b0:	e0 81       	ld	r30, Z
   179b2:	8e 2f       	mov	r24, r30
   179b4:	90 e0       	ldi	r25, 0x00	; 0
   179b6:	8b 30       	cpi	r24, 0x0B	; 11
   179b8:	91 05       	cpc	r25, r1
   179ba:	08 f0       	brcs	.+2      	; 0x179be <Amigo_Execute+0xa2>
   179bc:	41 c0       	rjmp	.+130    	; 0x17a40 <Amigo_Execute+0x124>
   179be:	fc 01       	movw	r30, r24
   179c0:	e0 52       	subi	r30, 0x20	; 32
   179c2:	ff 4f       	sbci	r31, 0xFF	; 255
   179c4:	0c 94 84 e3 	jmp	0x1c708	; 0x1c708 <__tablejump2__>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_COLD_LOAD_READ:
#if SDEBUG
                if(debuglevel & 32)
   179c8:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   179cc:	85 ff       	sbrs	r24, 5
   179ce:	18 c0       	rjmp	.+48     	; 0x17a00 <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Cold Load Read]\n");
   179d0:	80 e5       	ldi	r24, 0x50	; 80
   179d2:	98 e2       	ldi	r25, 0x28	; 40
   179d4:	0d c0       	rjmp	.+26     	; 0x179f0 <Amigo_Execute+0xd4>
#endif
                return ( amigo_buffered_read() );
            case AMIGO_READ_UNBUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   179d6:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   179da:	85 ff       	sbrs	r24, 5
   179dc:	11 c0       	rjmp	.+34     	; 0x17a00 <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Read Unbuffered]\n");
   179de:	8f e2       	ldi	r24, 0x2F	; 47
   179e0:	98 e2       	ldi	r25, 0x28	; 40
   179e2:	06 c0       	rjmp	.+12     	; 0x179f0 <Amigo_Execute+0xd4>
#endif
                return ( amigo_buffered_read() );
            case AMIGO_READ_BUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   179e4:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   179e8:	85 ff       	sbrs	r24, 5
   179ea:	0a c0       	rjmp	.+20     	; 0x17a00 <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Read Buffered]\n");
   179ec:	80 e1       	ldi	r24, 0x10	; 16
   179ee:	98 e2       	ldi	r25, 0x28	; 40
   179f0:	a0 e0       	ldi	r26, 0x00	; 0
   179f2:	ed b7       	in	r30, 0x3d	; 61
   179f4:	fe b7       	in	r31, 0x3e	; 62
   179f6:	81 83       	std	Z+1, r24	; 0x01
   179f8:	92 83       	std	Z+2, r25	; 0x02
   179fa:	a3 83       	std	Z+3, r26	; 0x03
   179fc:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
#endif
                return ( amigo_buffered_read() );
   17a00:	69 d9       	rcall	.-3374   	; 0x16cd4 <amigo_buffered_read>
            case AMIGO_WRITE_UNBUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   17a02:	61 c0       	rjmp	.+194    	; 0x17ac6 <Amigo_Execute+0x1aa>
   17a04:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17a08:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Write Unbuffered]\n");
   17a0a:	18 c0       	rjmp	.+48     	; 0x17a3c <Amigo_Execute+0x120>
   17a0c:	8e ee       	ldi	r24, 0xEE	; 238
   17a0e:	97 e2       	ldi	r25, 0x27	; 39
#endif
                return ( amigo_buffered_write() );
            case AMIGO_INITIALIZE:
#if SDEBUG
                if(debuglevel & 32)
   17a10:	0d c0       	rjmp	.+26     	; 0x17a2c <Amigo_Execute+0x110>
   17a12:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17a16:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Initialize]\n");
   17a18:	11 c0       	rjmp	.+34     	; 0x17a3c <Amigo_Execute+0x120>
   17a1a:	82 ed       	ldi	r24, 0xD2	; 210
   17a1c:	97 e2       	ldi	r25, 0x27	; 39
#endif
                return ( amigo_buffered_write() );
            case AMIGO_WRITE_BUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   17a1e:	06 c0       	rjmp	.+12     	; 0x17a2c <Amigo_Execute+0x110>
   17a20:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17a24:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Write Buffered]\n");
   17a26:	0a c0       	rjmp	.+20     	; 0x17a3c <Amigo_Execute+0x120>
   17a28:	82 eb       	ldi	r24, 0xB2	; 178
   17a2a:	97 e2       	ldi	r25, 0x27	; 39
   17a2c:	a0 e0       	ldi	r26, 0x00	; 0
   17a2e:	ed b7       	in	r30, 0x3d	; 61
   17a30:	fe b7       	in	r31, 0x3e	; 62
   17a32:	81 83       	std	Z+1, r24	; 0x01
   17a34:	92 83       	std	Z+2, r25	; 0x02
   17a36:	a3 83       	std	Z+3, r26	; 0x03
#endif
                return ( amigo_buffered_write() );
   17a38:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   17a3c:	14 da       	rcall	.-3032   	; 0x16e66 <amigo_buffered_write>
            default:
                return ( amigo_todo(secondary) );
   17a3e:	43 c0       	rjmp	.+134    	; 0x17ac6 <Amigo_Execute+0x1aa>
   17a40:	80 e6       	ldi	r24, 0x60	; 96
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    if(secondary == 0x68)
   17a42:	3d c0       	rjmp	.+122    	; 0x17abe <Amigo_Execute+0x1a2>
   17a44:	c8 36       	cpi	r28, 0x68	; 104
   17a46:	d1 05       	cpc	r29, r1
    {
        switch(AMIGOs->state)
   17a48:	e1 f5       	brne	.+120    	; 0x17ac2 <Amigo_Execute+0x1a6>
   17a4a:	e0 91 ff 18 	lds	r30, 0x18FF	; 0x8018ff <AMIGOs>
   17a4e:	f0 91 00 19 	lds	r31, 0x1900	; 0x801900 <AMIGOs+0x1>
   17a52:	80 81       	ld	r24, Z
   17a54:	82 30       	cpi	r24, 0x02	; 2
   17a56:	81 f0       	breq	.+32     	; 0x17a78 <Amigo_Execute+0x15c>
   17a58:	18 f4       	brcc	.+6      	; 0x17a60 <Amigo_Execute+0x144>
   17a5a:	88 23       	and	r24, r24
   17a5c:	91 f1       	breq	.+100    	; 0x17ac2 <Amigo_Execute+0x1a6>
   17a5e:	2e c0       	rjmp	.+92     	; 0x17abc <Amigo_Execute+0x1a0>
   17a60:	83 30       	cpi	r24, 0x03	; 3
   17a62:	19 f0       	breq	.+6      	; 0x17a6a <Amigo_Execute+0x14e>
   17a64:	84 30       	cpi	r24, 0x04	; 4
   17a66:	c9 f0       	breq	.+50     	; 0x17a9a <Amigo_Execute+0x17e>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_REQUEST_STATUS_BUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   17a68:	29 c0       	rjmp	.+82     	; 0x17abc <Amigo_Execute+0x1a0>
   17a6a:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17a6e:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Request Status Buffered]\n");
   17a70:	11 c0       	rjmp	.+34     	; 0x17a94 <Amigo_Execute+0x178>
   17a72:	89 e8       	ldi	r24, 0x89	; 137
   17a74:	97 e2       	ldi	r25, 0x27	; 39
#endif
                return ( amigo_send_status() );
            case AMIGO_REQUEST_STATUS_UNBUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   17a76:	06 c0       	rjmp	.+12     	; 0x17a84 <Amigo_Execute+0x168>
   17a78:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17a7c:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Exicute Request Status Unbuffered]\n");
   17a7e:	0a c0       	rjmp	.+20     	; 0x17a94 <Amigo_Execute+0x178>
   17a80:	8e e5       	ldi	r24, 0x5E	; 94
   17a82:	97 e2       	ldi	r25, 0x27	; 39
   17a84:	a0 e0       	ldi	r26, 0x00	; 0
   17a86:	ed b7       	in	r30, 0x3d	; 61
   17a88:	fe b7       	in	r31, 0x3e	; 62
   17a8a:	81 83       	std	Z+1, r24	; 0x01
   17a8c:	92 83       	std	Z+2, r25	; 0x02
   17a8e:	a3 83       	std	Z+3, r26	; 0x03
   17a90:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
#endif
                return ( amigo_send_status() );
   17a94:	0e 94 87 b4 	call	0x1690e	; 0x1690e <amigo_send_status>
            case AMIGO_REQUEST_LOGICAL_ADDRESS:
#if SDEBUG
                if(debuglevel & 32)
   17a98:	16 c0       	rjmp	.+44     	; 0x17ac6 <Amigo_Execute+0x1aa>
   17a9a:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17a9e:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Request Logical Address]\n");
   17aa0:	0a c0       	rjmp	.+20     	; 0x17ab6 <Amigo_Execute+0x19a>
   17aa2:	85 e3       	ldi	r24, 0x35	; 53
   17aa4:	97 e2       	ldi	r25, 0x27	; 39
   17aa6:	a0 e0       	ldi	r26, 0x00	; 0
   17aa8:	ed b7       	in	r30, 0x3d	; 61
   17aaa:	fe b7       	in	r31, 0x3e	; 62
   17aac:	81 83       	std	Z+1, r24	; 0x01
   17aae:	92 83       	std	Z+2, r25	; 0x02
   17ab0:	a3 83       	std	Z+3, r26	; 0x03
   17ab2:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
#endif
                return ( amigo_send_logical_address() );
   17ab6:	0e 94 29 b4 	call	0x16852	; 0x16852 <amigo_send_logical_address>
            default:
                return ( amigo_todo(secondary) );
   17aba:	05 c0       	rjmp	.+10     	; 0x17ac6 <Amigo_Execute+0x1aa>
   17abc:	88 e6       	ldi	r24, 0x68	; 104
   17abe:	b2 db       	rcall	.-2204   	; 0x17224 <amigo_todo>
    if(secondary == 0x68)
    {
        switch(AMIGOs->state)
        {
            case AMIGO_IDLE:
                return(0);
   17ac0:	02 c0       	rjmp	.+4      	; 0x17ac6 <Amigo_Execute+0x1aa>
   17ac2:	80 e0       	ldi	r24, 0x00	; 0
                return ( amigo_todo(secondary) );
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    return(0);
}
   17ac4:	90 e0       	ldi	r25, 0x00	; 0
   17ac6:	cd b7       	in	r28, 0x3d	; 61
   17ac8:	de b7       	in	r29, 0x3e	; 62
   17aca:	29 96       	adiw	r28, 0x09	; 9
   17acc:	e2 e0       	ldi	r30, 0x02	; 2
   17ace:	0c 94 f4 e3 	jmp	0x1c7e8	; 0x1c7e8 <__epilogue_restores__+0x20>

00017ad2 <AMIGO_COMMANDS>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{
   17ad2:	cf 93       	push	r28
   17ad4:	df 93       	push	r29
   17ad6:	c8 2f       	mov	r28, r24

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   17ad8:	80 91 84 1e 	lds	r24, 0x1E84	; 0x801e84 <talking>
   17adc:	90 e0       	ldi	r25, 0x00	; 0
   17ade:	0e 94 c8 8c 	call	0x11990	; 0x11990 <AMIGO_is_MTA>
   17ae2:	89 2b       	or	r24, r25
   17ae4:	51 f0       	breq	.+20     	; 0x17afa <AMIGO_COMMANDS+0x28>
    {

        if(talking == UNT && AMIGO_is_MLA(listening))
   17ae6:	80 91 84 1e 	lds	r24, 0x1E84	; 0x801e84 <talking>
   17aea:	8f 35       	cpi	r24, 0x5F	; 95
   17aec:	71 f4       	brne	.+28     	; 0x17b0a <AMIGO_COMMANDS+0x38>
   17aee:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <listening>
   17af2:	90 e0       	ldi	r25, 0x00	; 0
   17af4:	0e 94 b9 8c 	call	0x11972	; 0x11972 <AMIGO_is_MLA>
   17af8:	08 c0       	rjmp	.+16     	; 0x17b0a <AMIGO_COMMANDS+0x38>
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   17afa:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <listening>
   17afe:	90 e0       	ldi	r25, 0x00	; 0
   17b00:	0e 94 b9 8c 	call	0x11972	; 0x11972 <AMIGO_is_MLA>
   17b04:	89 2b       	or	r24, r25
   17b06:	79 f7       	brne	.-34     	; 0x17ae6 <AMIGO_COMMANDS+0x14>
   17b08:	76 c0       	rjmp	.+236    	; 0x17bf6 <AMIGO_COMMANDS+0x124>

        if(talking == UNT && AMIGO_is_MLA(listening))
        {
            // printf("AMIGO COMMANDS %02XH NO TALK ADDRESS!\n", ch);
        }
        if(listening == 0 && AMIGO_is_MTA(talking))
   17b0a:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <listening>
   17b0e:	81 11       	cpse	r24, r1
   17b10:	05 c0       	rjmp	.+10     	; 0x17b1c <AMIGO_COMMANDS+0x4a>
   17b12:	80 91 84 1e 	lds	r24, 0x1E84	; 0x801e84 <talking>
   17b16:	90 e0       	ldi	r25, 0x00	; 0
   17b18:	0e 94 c8 8c 	call	0x11990	; 0x11990 <AMIGO_is_MTA>
        {
            // printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   17b1c:	c0 36       	cpi	r28, 0x60	; 96
   17b1e:	99 f4       	brne	.+38     	; 0x17b46 <AMIGO_COMMANDS+0x74>
   17b20:	80 91 84 1e 	lds	r24, 0x1E84	; 0x801e84 <talking>
   17b24:	90 e0       	ldi	r25, 0x00	; 0
   17b26:	0e 94 c8 8c 	call	0x11990	; 0x11990 <AMIGO_is_MTA>
   17b2a:	89 2b       	or	r24, r25
   17b2c:	19 f0       	breq	.+6      	; 0x17b34 <AMIGO_COMMANDS+0x62>
        {
            return (Amigo_Execute(ch) );
   17b2e:	80 e6       	ldi	r24, 0x60	; 96
   17b30:	90 e0       	ldi	r25, 0x00	; 0
   17b32:	14 c0       	rjmp	.+40     	; 0x17b5c <AMIGO_COMMANDS+0x8a>
        if(listening == 0 && AMIGO_is_MTA(talking))
        {
            // printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   17b34:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <listening>
   17b38:	90 e0       	ldi	r25, 0x00	; 0
   17b3a:	0e 94 b9 8c 	call	0x11972	; 0x11972 <AMIGO_is_MLA>
   17b3e:	89 2b       	or	r24, r25
   17b40:	09 f4       	brne	.+2      	; 0x17b44 <AMIGO_COMMANDS+0x72>
   17b42:	59 c0       	rjmp	.+178    	; 0x17bf6 <AMIGO_COMMANDS+0x124>
   17b44:	f4 cf       	rjmp	.-24     	; 0x17b2e <AMIGO_COMMANDS+0x5c>
        {
            return (Amigo_Execute(ch) );
        }

        if(ch == 0x68 && AMIGO_is_MTA(talking) )
   17b46:	c8 36       	cpi	r28, 0x68	; 104
   17b48:	c1 f4       	brne	.+48     	; 0x17b7a <AMIGO_COMMANDS+0xa8>
   17b4a:	80 91 84 1e 	lds	r24, 0x1E84	; 0x801e84 <talking>
   17b4e:	90 e0       	ldi	r25, 0x00	; 0
   17b50:	0e 94 c8 8c 	call	0x11990	; 0x11990 <AMIGO_is_MTA>
   17b54:	89 2b       	or	r24, r25
   17b56:	21 f0       	breq	.+8      	; 0x17b60 <AMIGO_COMMANDS+0x8e>
        {
            return (Amigo_Execute(ch) );
   17b58:	88 e6       	ldi	r24, 0x68	; 104
   17b5a:	90 e0       	ldi	r25, 0x00	; 0
   17b5c:	df de       	rcall	.-578    	; 0x1791c <Amigo_Execute>
   17b5e:	0b c0       	rjmp	.+22     	; 0x17b76 <AMIGO_COMMANDS+0xa4>
        }

        if(ch == 0x68 && AMIGO_is_MLA(listening) ) // Single byte command
   17b60:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <listening>
   17b64:	90 e0       	ldi	r25, 0x00	; 0
   17b66:	0e 94 b9 8c 	call	0x11972	; 0x11972 <AMIGO_is_MLA>
   17b6a:	89 2b       	or	r24, r25
   17b6c:	09 f4       	brne	.+2      	; 0x17b70 <AMIGO_COMMANDS+0x9e>
   17b6e:	43 c0       	rjmp	.+134    	; 0x17bf6 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17b70:	88 e6       	ldi	r24, 0x68	; 104
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) ) // Single byte command
        {
            return (Amigo_Command(ch) );
   17b72:	90 e0       	ldi	r25, 0x00	; 0
   17b74:	ef db       	rcall	.-2082   	; 0x17354 <Amigo_Command>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
            return( amigo_cmd_dsj() );
   17b76:	ec 01       	movw	r28, r24
   17b78:	40 c0       	rjmp	.+128    	; 0x17bfa <AMIGO_COMMANDS+0x128>

        if(ch == 0x68 && AMIGO_is_MLA(listening) ) // Single byte command
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x69 && AMIGO_is_MLA(listening) ) // Single byte command
   17b7a:	c9 36       	cpi	r28, 0x69	; 105
   17b7c:	51 f4       	brne	.+20     	; 0x17b92 <AMIGO_COMMANDS+0xc0>
   17b7e:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <listening>
   17b82:	90 e0       	ldi	r25, 0x00	; 0
   17b84:	0e 94 b9 8c 	call	0x11972	; 0x11972 <AMIGO_is_MLA>
   17b88:	89 2b       	or	r24, r25
   17b8a:	a9 f1       	breq	.+106    	; 0x17bf6 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17b8c:	89 e6       	ldi	r24, 0x69	; 105
   17b8e:	90 e0       	ldi	r25, 0x00	; 0
   17b90:	f1 cf       	rjmp	.-30     	; 0x17b74 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6a && AMIGO_is_MLA(listening) ) // Single byte command
   17b92:	ca 36       	cpi	r28, 0x6A	; 106
   17b94:	51 f4       	brne	.+20     	; 0x17baa <AMIGO_COMMANDS+0xd8>
   17b96:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <listening>
   17b9a:	90 e0       	ldi	r25, 0x00	; 0
   17b9c:	0e 94 b9 8c 	call	0x11972	; 0x11972 <AMIGO_is_MLA>
   17ba0:	89 2b       	or	r24, r25
   17ba2:	49 f1       	breq	.+82     	; 0x17bf6 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17ba4:	8a e6       	ldi	r24, 0x6A	; 106
   17ba6:	90 e0       	ldi	r25, 0x00	; 0
   17ba8:	e5 cf       	rjmp	.-54     	; 0x17b74 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) ) // Single byte command
   17baa:	cc 36       	cpi	r28, 0x6C	; 108
   17bac:	51 f4       	brne	.+20     	; 0x17bc2 <AMIGO_COMMANDS+0xf0>
   17bae:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <listening>
   17bb2:	90 e0       	ldi	r25, 0x00	; 0
   17bb4:	0e 94 b9 8c 	call	0x11972	; 0x11972 <AMIGO_is_MLA>
   17bb8:	89 2b       	or	r24, r25
   17bba:	e9 f0       	breq	.+58     	; 0x17bf6 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17bbc:	8c e6       	ldi	r24, 0x6C	; 108
   17bbe:	90 e0       	ldi	r25, 0x00	; 0
   17bc0:	d9 cf       	rjmp	.-78     	; 0x17b74 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
   17bc2:	c0 37       	cpi	r28, 0x70	; 112
   17bc4:	c1 f4       	brne	.+48     	; 0x17bf6 <AMIGO_COMMANDS+0x124>
   17bc6:	80 91 84 1e 	lds	r24, 0x1E84	; 0x801e84 <talking>
   17bca:	90 e0       	ldi	r25, 0x00	; 0
   17bcc:	0e 94 c8 8c 	call	0x11990	; 0x11990 <AMIGO_is_MTA>
   17bd0:	ec 01       	movw	r28, r24
   17bd2:	89 2b       	or	r24, r25
   17bd4:	51 f0       	breq	.+20     	; 0x17bea <AMIGO_COMMANDS+0x118>
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17bd6:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOp>
   17bda:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOp+0x1>
   17bde:	81 81       	ldd	r24, Z+1	; 0x01
   17be0:	90 e0       	ldi	r25, 0x00	; 0
   17be2:	0e 94 a6 86 	call	0x10d4c	; 0x10d4c <gpib_disable_PPR>
            return( amigo_cmd_dsj() );
   17be6:	fc d9       	rcall	.-3080   	; 0x16fe0 <amigo_cmd_dsj>
   17be8:	c6 cf       	rjmp	.-116    	; 0x17b76 <AMIGO_COMMANDS+0xa4>
        }
        if(ch == 0x7e && ch == 0x7f)
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x70 && AMIGO_is_MLA(listening))
   17bea:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <listening>
   17bee:	90 e0       	ldi	r25, 0x00	; 0
   17bf0:	0e 94 b9 8c 	call	0x11972	; 0x11972 <AMIGO_is_MLA>
   17bf4:	02 c0       	rjmp	.+4      	; 0x17bfa <AMIGO_COMMANDS+0x128>
        {
            // NOP
        }
    }
    return(0);
   17bf6:	c0 e0       	ldi	r28, 0x00	; 0
   17bf8:	d0 e0       	ldi	r29, 0x00	; 0
}
   17bfa:	ce 01       	movw	r24, r28
   17bfc:	df 91       	pop	r29
   17bfe:	cf 91       	pop	r28
   17c00:	08 95       	ret

00017c02 <printer_init>:
/// - Only called once after power on by main().
/// @return  void

void printer_init()
{
    plot.error = 0;
   17c02:	ea e3       	ldi	r30, 0x3A	; 58
   17c04:	f9 e1       	ldi	r31, 0x19	; 25
   17c06:	10 86       	std	Z+8, r1	; 0x08
    plot.count = 0;
   17c08:	10 82       	st	Z, r1
   17c0a:	11 82       	std	Z+1, r1	; 0x01
   17c0c:	12 82       	std	Z+2, r1	; 0x02
   17c0e:	13 82       	std	Z+3, r1	; 0x03
    plot.ind = 0;
   17c10:	15 82       	std	Z+5, r1	; 0x05
   17c12:	14 82       	std	Z+4, r1	; 0x04
    plot.fp = NULL;
   17c14:	12 86       	std	Z+10, r1	; 0x0a
   17c16:	11 86       	std	Z+9, r1	; 0x09
    plot.buf = NULL;
   17c18:	14 86       	std	Z+12, r1	; 0x0c
   17c1a:	13 86       	std	Z+11, r1	; 0x0b
   17c1c:	08 95       	ret

00017c1e <receive_plot_flush>:
/// @see posix.h
/// @see printer_buffer()
/// @return  file handle

int receive_plot_flush()
{
   17c1e:	cf 93       	push	r28
   17c20:	df 93       	push	r29
   17c22:	ad b7       	in	r26, 0x3d	; 61
   17c24:	be b7       	in	r27, 0x3e	; 62
   17c26:	17 97       	sbiw	r26, 0x07	; 7
   17c28:	0f b6       	in	r0, 0x3f	; 63
   17c2a:	f8 94       	cli
   17c2c:	be bf       	out	0x3e, r27	; 62
   17c2e:	0f be       	out	0x3f, r0	; 63
   17c30:	ad bf       	out	0x3d, r26	; 61
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
   17c32:	20 91 43 19 	lds	r18, 0x1943	; 0x801943 <plot+0x9>
   17c36:	30 91 44 19 	lds	r19, 0x1944	; 0x801944 <plot+0xa>
   17c3a:	21 15       	cp	r18, r1
   17c3c:	31 05       	cpc	r19, r1
   17c3e:	09 f4       	brne	.+2      	; 0x17c42 <receive_plot_flush+0x24>
   17c40:	45 c0       	rjmp	.+138    	; 0x17ccc <receive_plot_flush+0xae>
   17c42:	80 91 3e 19 	lds	r24, 0x193E	; 0x80193e <plot+0x4>
   17c46:	90 91 3f 19 	lds	r25, 0x193F	; 0x80193f <plot+0x5>
   17c4a:	00 97       	sbiw	r24, 0x00	; 0
   17c4c:	09 f4       	brne	.+2      	; 0x17c50 <receive_plot_flush+0x32>
   17c4e:	40 c0       	rjmp	.+128    	; 0x17cd0 <receive_plot_flush+0xb2>
        return(0);

    ret  = fwrite(plot.buf, 1, plot.ind , plot.fp);
   17c50:	ac 01       	movw	r20, r24
   17c52:	61 e0       	ldi	r22, 0x01	; 1
   17c54:	70 e0       	ldi	r23, 0x00	; 0
   17c56:	80 91 45 19 	lds	r24, 0x1945	; 0x801945 <plot+0xb>
   17c5a:	90 91 46 19 	lds	r25, 0x1946	; 0x801946 <plot+0xc>
   17c5e:	0e 94 20 7d 	call	0xfa40	; 0xfa40 <fwrite>
   17c62:	ec 01       	movw	r28, r24
    if(ret != plot.ind)
   17c64:	80 91 3e 19 	lds	r24, 0x193E	; 0x80193e <plot+0x4>
   17c68:	90 91 3f 19 	lds	r25, 0x193F	; 0x80193f <plot+0x5>
   17c6c:	c8 17       	cp	r28, r24
   17c6e:	d9 07       	cpc	r29, r25
   17c70:	09 f1       	breq	.+66     	; 0x17cb4 <receive_plot_flush+0x96>
    {
        if(debuglevel & (1+32))
   17c72:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17c76:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   17c7a:	81 72       	andi	r24, 0x21	; 33
   17c7c:	99 27       	eor	r25, r25
   17c7e:	89 2b       	or	r24, r25
   17c80:	b1 f0       	breq	.+44     	; 0x17cae <receive_plot_flush+0x90>
        {
            perror("receive_plot_flush");
   17c82:	8e ef       	ldi	r24, 0xFE	; 254
   17c84:	94 e1       	ldi	r25, 0x14	; 20
   17c86:	0e 94 37 79 	call	0xf26e	; 0xf26e <perror>
            printf("write failed: wanted %d, got:%d\n", plot.ind, ret);
   17c8a:	ed b7       	in	r30, 0x3d	; 61
   17c8c:	fe b7       	in	r31, 0x3e	; 62
   17c8e:	d7 83       	std	Z+7, r29	; 0x07
   17c90:	c6 83       	std	Z+6, r28	; 0x06
   17c92:	80 91 3e 19 	lds	r24, 0x193E	; 0x80193e <plot+0x4>
   17c96:	90 91 3f 19 	lds	r25, 0x193F	; 0x80193f <plot+0x5>
   17c9a:	95 83       	std	Z+5, r25	; 0x05
   17c9c:	84 83       	std	Z+4, r24	; 0x04
   17c9e:	81 e8       	ldi	r24, 0x81	; 129
   17ca0:	9f e2       	ldi	r25, 0x2F	; 47
   17ca2:	a0 e0       	ldi	r26, 0x00	; 0
   17ca4:	81 83       	std	Z+1, r24	; 0x01
   17ca6:	92 83       	std	Z+2, r25	; 0x02
   17ca8:	a3 83       	std	Z+3, r26	; 0x03
   17caa:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
        }
        return(-1);
   17cae:	8f ef       	ldi	r24, 0xFF	; 255
   17cb0:	9f ef       	ldi	r25, 0xFF	; 255
   17cb2:	0e c0       	rjmp	.+28     	; 0x17cd0 <receive_plot_flush+0xb2>
    }

    fno = fileno( plot.fp );
   17cb4:	80 91 43 19 	lds	r24, 0x1943	; 0x801943 <plot+0x9>
   17cb8:	90 91 44 19 	lds	r25, 0x1944	; 0x801944 <plot+0xa>
   17cbc:	0e 94 81 77 	call	0xef02	; 0xef02 <fileno>
    if(fno < 0)
   17cc0:	97 fd       	sbrc	r25, 7
   17cc2:	f5 cf       	rjmp	.-22     	; 0x17cae <receive_plot_flush+0x90>
        return(-1);
    ///@brief sync filesystem after every write 
    syncfs( fno );
   17cc4:	0e 94 6a 7c 	call	0xf8d4	; 0xf8d4 <syncfs>
    return (ret);
   17cc8:	ce 01       	movw	r24, r28
   17cca:	02 c0       	rjmp	.+4      	; 0x17cd0 <receive_plot_flush+0xb2>
{
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
        return(0);
   17ccc:	80 e0       	ldi	r24, 0x00	; 0
   17cce:	90 e0       	ldi	r25, 0x00	; 0
    if(fno < 0)
        return(-1);
    ///@brief sync filesystem after every write 
    syncfs( fno );
    return (ret);
}
   17cd0:	cd b7       	in	r28, 0x3d	; 61
   17cd2:	de b7       	in	r29, 0x3e	; 62
   17cd4:	27 96       	adiw	r28, 0x07	; 7
   17cd6:	e2 e0       	ldi	r30, 0x02	; 2
   17cd8:	0c 94 f4 e3 	jmp	0x1c7e8	; 0x1c7e8 <__epilogue_restores__+0x20>

00017cdc <printer_close>:
/// @see posix.h
/// @return  void
/// FYI: for the HP54645D plots end with: pd;pu;pu;sp0;
/// This gets called
void printer_close()
{
   17cdc:	ad b7       	in	r26, 0x3d	; 61
   17cde:	be b7       	in	r27, 0x3e	; 62
   17ce0:	17 97       	sbiw	r26, 0x07	; 7
   17ce2:	0f b6       	in	r0, 0x3f	; 63
   17ce4:	f8 94       	cli
   17ce6:	be bf       	out	0x3e, r27	; 62
   17ce8:	0f be       	out	0x3f, r0	; 63
    if( receive_plot_flush() < 0 )
   17cea:	ad bf       	out	0x3d, r26	; 61
   17cec:	98 df       	rcall	.-208    	; 0x17c1e <receive_plot_flush>
   17cee:	97 ff       	sbrs	r25, 7
        plot.error = 1;
   17cf0:	03 c0       	rjmp	.+6      	; 0x17cf8 <printer_close+0x1c>
   17cf2:	81 e0       	ldi	r24, 0x01	; 1
   17cf4:	80 93 42 19 	sts	0x1942, r24	; 0x801942 <plot+0x8>

    if(debuglevel & (1+32))
   17cf8:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17cfc:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   17d00:	81 72       	andi	r24, 0x21	; 33
   17d02:	99 27       	eor	r25, r25
   17d04:	89 2b       	or	r24, r25
    {
        if(plot.error)
   17d06:	71 f0       	breq	.+28     	; 0x17d24 <printer_close+0x48>
   17d08:	80 91 42 19 	lds	r24, 0x1942	; 0x801942 <plot+0x8>
   17d0c:	88 23       	and	r24, r24
            printf("ERROR durring write\n");
   17d0e:	51 f0       	breq	.+20     	; 0x17d24 <printer_close+0x48>
   17d10:	80 eb       	ldi	r24, 0xB0	; 176
   17d12:	9f e2       	ldi	r25, 0x2F	; 47
   17d14:	a0 e0       	ldi	r26, 0x00	; 0
   17d16:	ed b7       	in	r30, 0x3d	; 61
   17d18:	fe b7       	in	r31, 0x3e	; 62
   17d1a:	81 83       	std	Z+1, r24	; 0x01
   17d1c:	92 83       	std	Z+2, r25	; 0x02
   17d1e:	a3 83       	std	Z+3, r26	; 0x03
   17d20:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    }

    if(plot.fp)
   17d24:	80 91 43 19 	lds	r24, 0x1943	; 0x801943 <plot+0x9>
   17d28:	90 91 44 19 	lds	r25, 0x1944	; 0x801944 <plot+0xa>
   17d2c:	00 97       	sbiw	r24, 0x00	; 0
    {
        fclose(plot.fp);
   17d2e:	e1 f0       	breq	.+56     	; 0x17d68 <printer_close+0x8c>
   17d30:	0e 94 a2 7d 	call	0xfb44	; 0xfb44 <fclose>
        if(debuglevel & 32)
   17d34:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17d38:	85 ff       	sbrs	r24, 5
            printf("\nDONE: %08ld\n",plot.count);
   17d3a:	16 c0       	rjmp	.+44     	; 0x17d68 <printer_close+0x8c>
   17d3c:	80 91 3a 19 	lds	r24, 0x193A	; 0x80193a <plot>
   17d40:	90 91 3b 19 	lds	r25, 0x193B	; 0x80193b <plot+0x1>
   17d44:	a0 91 3c 19 	lds	r26, 0x193C	; 0x80193c <plot+0x2>
   17d48:	b0 91 3d 19 	lds	r27, 0x193D	; 0x80193d <plot+0x3>
   17d4c:	ed b7       	in	r30, 0x3d	; 61
   17d4e:	fe b7       	in	r31, 0x3e	; 62
   17d50:	84 83       	std	Z+4, r24	; 0x04
   17d52:	95 83       	std	Z+5, r25	; 0x05
   17d54:	a6 83       	std	Z+6, r26	; 0x06
   17d56:	b7 83       	std	Z+7, r27	; 0x07
   17d58:	82 ea       	ldi	r24, 0xA2	; 162
   17d5a:	9f e2       	ldi	r25, 0x2F	; 47
   17d5c:	a0 e0       	ldi	r26, 0x00	; 0
   17d5e:	81 83       	std	Z+1, r24	; 0x01
   17d60:	92 83       	std	Z+2, r25	; 0x02
   17d62:	a3 83       	std	Z+3, r26	; 0x03
   17d64:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    }

    if(plot.buf)
   17d68:	80 91 45 19 	lds	r24, 0x1945	; 0x801945 <plot+0xb>
   17d6c:	90 91 46 19 	lds	r25, 0x1946	; 0x801946 <plot+0xc>
   17d70:	00 97       	sbiw	r24, 0x00	; 0
        safefree(plot.buf);
   17d72:	11 f0       	breq	.+4      	; 0x17d78 <printer_close+0x9c>
    printer_init();
   17d74:	0e 94 95 29 	call	0x532a	; 0x532a <safefree>
}
   17d78:	44 df       	rcall	.-376    	; 0x17c02 <printer_init>
   17d7a:	ad b7       	in	r26, 0x3d	; 61
   17d7c:	be b7       	in	r27, 0x3e	; 62
   17d7e:	17 96       	adiw	r26, 0x07	; 7
   17d80:	0f b6       	in	r0, 0x3f	; 63
   17d82:	f8 94       	cli
   17d84:	be bf       	out	0x3e, r27	; 62
   17d86:	0f be       	out	0x3f, r0	; 63
   17d88:	ad bf       	out	0x3d, r26	; 61
   17d8a:	08 95       	ret

00017d8c <printer_open>:
/// @see posix.c
/// @see posix.h
/// @return  void

void printer_open(char *name)
{
   17d8c:	ad e5       	ldi	r26, 0x5D	; 93
   17d8e:	b0 e0       	ldi	r27, 0x00	; 0
   17d90:	ec ec       	ldi	r30, 0xCC	; 204
   17d92:	fe eb       	ldi	r31, 0xBE	; 190
   17d94:	0c 94 d4 e3 	jmp	0x1c7a8	; 0x1c7a8 <__prologue_saves__+0x18>
   17d98:	8c 01       	movw	r16, r24

    char *ptr;

    if(!name)
   17d9a:	89 2b       	or	r24, r25
   17d9c:	09 f0       	breq	.+2      	; 0x17da0 <printer_open+0x14>
   17d9e:	4f c0       	rjmp	.+158    	; 0x17e3e <printer_open+0xb2>
        time_t seconds;
        tm_t *tc;
        ts_t ts;
        char fname[64];

        clock_gettime(0, (ts_t *) &ts);
   17da0:	be 01       	movw	r22, r28
   17da2:	6e 5a       	subi	r22, 0xAE	; 174
   17da4:	7f 4f       	sbci	r23, 0xFF	; 255
   17da6:	80 e0       	ldi	r24, 0x00	; 0
   17da8:	90 e0       	ldi	r25, 0x00	; 0
   17daa:	0e 94 b2 34 	call	0x6964	; 0x6964 <clock_gettime>
        seconds = ts.tv_sec;
   17dae:	66 96       	adiw	r28, 0x16	; 22
   17db0:	8c ad       	ldd	r24, Y+60	; 0x3c
   17db2:	9d ad       	ldd	r25, Y+61	; 0x3d
   17db4:	ae ad       	ldd	r26, Y+62	; 0x3e
   17db6:	bf ad       	ldd	r27, Y+63	; 0x3f
   17db8:	66 97       	sbiw	r28, 0x16	; 22
   17dba:	6e 96       	adiw	r28, 0x1e	; 30
   17dbc:	8c af       	std	Y+60, r24	; 0x3c
   17dbe:	9d af       	std	Y+61, r25	; 0x3d
   17dc0:	ae af       	std	Y+62, r26	; 0x3e
   17dc2:	bf af       	std	Y+63, r27	; 0x3f
   17dc4:	6e 97       	sbiw	r28, 0x1e	; 30
        tc = gmtime(&seconds);
   17dc6:	ce 01       	movw	r24, r28
   17dc8:	86 5a       	subi	r24, 0xA6	; 166
   17dca:	9f 4f       	sbci	r25, 0xFF	; 255
   17dcc:	0e 94 97 38 	call	0x712e	; 0x712e <gmtime>
   17dd0:	8c 01       	movw	r16, r24
        sprintf(fname,"/plot-%02d%s%04d-%02d%02d%02d.plt",
   17dd2:	fc 01       	movw	r30, r24
   17dd4:	e6 80       	ldd	r14, Z+6	; 0x06
   17dd6:	f7 80       	ldd	r15, Z+7	; 0x07
   17dd8:	80 85       	ldd	r24, Z+8	; 0x08
   17dda:	91 85       	ldd	r25, Z+9	; 0x09
   17ddc:	0e 94 73 37 	call	0x6ee6	; 0x6ee6 <tm_mon_to_ascii>
   17de0:	f8 01       	movw	r30, r16
   17de2:	20 81       	ld	r18, Z
   17de4:	31 81       	ldd	r19, Z+1	; 0x01
   17de6:	ed b7       	in	r30, 0x3d	; 61
   17de8:	fe b7       	in	r31, 0x3e	; 62
   17dea:	31 8b       	std	Z+17, r19	; 0x11
   17dec:	20 8b       	std	Z+16, r18	; 0x10
   17dee:	f8 01       	movw	r30, r16
   17df0:	22 81       	ldd	r18, Z+2	; 0x02
   17df2:	33 81       	ldd	r19, Z+3	; 0x03
   17df4:	ed b7       	in	r30, 0x3d	; 61
   17df6:	fe b7       	in	r31, 0x3e	; 62
   17df8:	37 87       	std	Z+15, r19	; 0x0f
   17dfa:	26 87       	std	Z+14, r18	; 0x0e
   17dfc:	f8 01       	movw	r30, r16
   17dfe:	24 81       	ldd	r18, Z+4	; 0x04
   17e00:	35 81       	ldd	r19, Z+5	; 0x05
   17e02:	ed b7       	in	r30, 0x3d	; 61
   17e04:	fe b7       	in	r31, 0x3e	; 62
   17e06:	35 87       	std	Z+13, r19	; 0x0d
   17e08:	24 87       	std	Z+12, r18	; 0x0c
   17e0a:	f8 01       	movw	r30, r16
   17e0c:	22 85       	ldd	r18, Z+10	; 0x0a
   17e0e:	33 85       	ldd	r19, Z+11	; 0x0b
   17e10:	24 59       	subi	r18, 0x94	; 148
   17e12:	38 4f       	sbci	r19, 0xF8	; 248
   17e14:	ed b7       	in	r30, 0x3d	; 61
   17e16:	fe b7       	in	r31, 0x3e	; 62
   17e18:	33 87       	std	Z+11, r19	; 0x0b
   17e1a:	22 87       	std	Z+10, r18	; 0x0a
   17e1c:	91 87       	std	Z+9, r25	; 0x09
   17e1e:	80 87       	std	Z+8, r24	; 0x08
   17e20:	f7 82       	std	Z+7, r15	; 0x07
   17e22:	e6 82       	std	Z+6, r14	; 0x06
   17e24:	87 ee       	ldi	r24, 0xE7	; 231
   17e26:	9f e2       	ldi	r25, 0x2F	; 47
   17e28:	a0 e0       	ldi	r26, 0x00	; 0
   17e2a:	83 83       	std	Z+3, r24	; 0x03
   17e2c:	94 83       	std	Z+4, r25	; 0x04
   17e2e:	a5 83       	std	Z+5, r26	; 0x05
   17e30:	8e 01       	movw	r16, r28
   17e32:	0e 5e       	subi	r16, 0xEE	; 238
   17e34:	1f 4f       	sbci	r17, 0xFF	; 255
   17e36:	12 83       	std	Z+2, r17	; 0x02
   17e38:	01 83       	std	Z+1, r16	; 0x01
   17e3a:	0e 94 24 47 	call	0x8e48	; 0x8e48 <sprintf_P>
    else
    {
        ptr = name;
    }

    if(debuglevel & 32)
   17e3e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17e42:	85 ff       	sbrs	r24, 5
   17e44:	0c c0       	rjmp	.+24     	; 0x17e5e <printer_open+0xd2>
        printf("Capturing plot to:%s\n", ptr);
   17e46:	ed b7       	in	r30, 0x3d	; 61
   17e48:	fe b7       	in	r31, 0x3e	; 62
   17e4a:	15 83       	std	Z+5, r17	; 0x05
   17e4c:	04 83       	std	Z+4, r16	; 0x04
   17e4e:	81 ed       	ldi	r24, 0xD1	; 209
   17e50:	9f e2       	ldi	r25, 0x2F	; 47
   17e52:	a0 e0       	ldi	r26, 0x00	; 0
   17e54:	81 83       	std	Z+1, r24	; 0x01
   17e56:	92 83       	std	Z+2, r25	; 0x02
   17e58:	a3 83       	std	Z+3, r26	; 0x03
   17e5a:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>

    plot.fp = fopen(ptr,"wb");
   17e5e:	6a e2       	ldi	r22, 0x2A	; 42
   17e60:	78 e0       	ldi	r23, 0x08	; 8
   17e62:	c8 01       	movw	r24, r16
   17e64:	0e 94 f8 7e 	call	0xfdf0	; 0xfdf0 <fopen>
   17e68:	90 93 44 19 	sts	0x1944, r25	; 0x801944 <plot+0xa>
   17e6c:	80 93 43 19 	sts	0x1943, r24	; 0x801943 <plot+0x9>
    if(plot.fp == NULL)
   17e70:	89 2b       	or	r24, r25
   17e72:	b9 f4       	brne	.+46     	; 0x17ea2 <printer_open+0x116>
    {
        if(debuglevel & (1+32))
   17e74:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17e78:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   17e7c:	81 72       	andi	r24, 0x21	; 33
   17e7e:	99 27       	eor	r25, r25
   17e80:	89 2b       	or	r24, r25
   17e82:	11 f1       	breq	.+68     	; 0x17ec8 <printer_open+0x13c>
        {
            perror("open failed");
   17e84:	85 ec       	ldi	r24, 0xC5	; 197
   17e86:	9c e0       	ldi	r25, 0x0C	; 12
   17e88:	0e 94 37 79 	call	0xf26e	; 0xf26e <perror>
            printf("exiting...\n");
   17e8c:	85 ec       	ldi	r24, 0xC5	; 197
   17e8e:	9f e2       	ldi	r25, 0x2F	; 47
   17e90:	a0 e0       	ldi	r26, 0x00	; 0
   17e92:	ed b7       	in	r30, 0x3d	; 61
   17e94:	fe b7       	in	r31, 0x3e	; 62
   17e96:	81 83       	std	Z+1, r24	; 0x01
   17e98:	92 83       	std	Z+2, r25	; 0x02
   17e9a:	a3 83       	std	Z+3, r26	; 0x03
   17e9c:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   17ea0:	13 c0       	rjmp	.+38     	; 0x17ec8 <printer_open+0x13c>
        }
        return;
    }

    plot.buf = calloc(512+1,1);
   17ea2:	61 e0       	ldi	r22, 0x01	; 1
   17ea4:	70 e0       	ldi	r23, 0x00	; 0
   17ea6:	81 e0       	ldi	r24, 0x01	; 1
   17ea8:	92 e0       	ldi	r25, 0x02	; 2
   17eaa:	0e 94 49 29 	call	0x5292	; 0x5292 <safecalloc>
   17eae:	90 93 46 19 	sts	0x1946, r25	; 0x801946 <plot+0xc>
   17eb2:	80 93 45 19 	sts	0x1945, r24	; 0x801945 <plot+0xb>
    if(plot.buf == NULL)
   17eb6:	89 2b       	or	r24, r25
        printer_close();
   17eb8:	09 f4       	brne	.+2      	; 0x17ebc <printer_open+0x130>
    plot.size = 512;
   17eba:	10 df       	rcall	.-480    	; 0x17cdc <printer_close>
   17ebc:	80 e0       	ldi	r24, 0x00	; 0
   17ebe:	92 e0       	ldi	r25, 0x02	; 2
   17ec0:	90 93 41 19 	sts	0x1941, r25	; 0x801941 <plot+0x7>
   17ec4:	80 93 40 19 	sts	0x1940, r24	; 0x801940 <plot+0x6>
}
   17ec8:	c3 5a       	subi	r28, 0xA3	; 163
   17eca:	df 4f       	sbci	r29, 0xFF	; 255
   17ecc:	e6 e0       	ldi	r30, 0x06	; 6
   17ece:	0c 94 f0 e3 	jmp	0x1c7e0	; 0x1c7e0 <__epilogue_restores__+0x18>

00017ed2 <printer_buffer>:
///
/// @see posix.c
/// @see posix.h
/// @return  void
void printer_buffer( uint16_t val )
{
   17ed2:	cf 93       	push	r28
   17ed4:	df 93       	push	r29
   17ed6:	ad b7       	in	r26, 0x3d	; 61
   17ed8:	be b7       	in	r27, 0x3e	; 62
   17eda:	17 97       	sbiw	r26, 0x07	; 7
   17edc:	0f b6       	in	r0, 0x3f	; 63
   17ede:	f8 94       	cli
   17ee0:	be bf       	out	0x3e, r27	; 62
   17ee2:	0f be       	out	0x3f, r0	; 63
   17ee4:	ad bf       	out	0x3d, r26	; 61
   17ee6:	ec 01       	movw	r28, r24

    uint16_t ch;

    if(debuglevel & (1+32))
   17ee8:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17eec:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   17ef0:	81 72       	andi	r24, 0x21	; 33
   17ef2:	99 27       	eor	r25, r25
   17ef4:	89 2b       	or	r24, r25
   17ef6:	c1 f0       	breq	.+48     	; 0x17f28 <printer_buffer+0x56>
    {
        if( ( plot.count & 255L ) == 0)
   17ef8:	80 91 3a 19 	lds	r24, 0x193A	; 0x80193a <plot>
   17efc:	30 91 3b 19 	lds	r19, 0x193B	; 0x80193b <plot+0x1>
   17f00:	20 91 3c 19 	lds	r18, 0x193C	; 0x80193c <plot+0x2>
   17f04:	90 91 3d 19 	lds	r25, 0x193D	; 0x80193d <plot+0x3>
   17f08:	81 11       	cpse	r24, r1
   17f0a:	0e c0       	rjmp	.+28     	; 0x17f28 <printer_buffer+0x56>
            printf("%08ld\r",plot.count);
   17f0c:	ed b7       	in	r30, 0x3d	; 61
   17f0e:	fe b7       	in	r31, 0x3e	; 62
   17f10:	84 83       	std	Z+4, r24	; 0x04
   17f12:	35 83       	std	Z+5, r19	; 0x05
   17f14:	26 83       	std	Z+6, r18	; 0x06
   17f16:	97 83       	std	Z+7, r25	; 0x07
   17f18:	8a e7       	ldi	r24, 0x7A	; 122
   17f1a:	9f e2       	ldi	r25, 0x2F	; 47
   17f1c:	a0 e0       	ldi	r26, 0x00	; 0
   17f1e:	81 83       	std	Z+1, r24	; 0x01
   17f20:	92 83       	std	Z+2, r25	; 0x02
   17f22:	a3 83       	std	Z+3, r26	; 0x03
   17f24:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    }

    ch = val & 0xff;
    if(val & (0xff00 & ~REN_FLAG))
   17f28:	ce 01       	movw	r24, r28
   17f2a:	88 27       	eor	r24, r24
   17f2c:	97 7f       	andi	r25, 0xF7	; 247
   17f2e:	89 2b       	or	r24, r25
    {
        if( receive_plot_flush() )
   17f30:	41 f0       	breq	.+16     	; 0x17f42 <printer_buffer+0x70>
   17f32:	75 de       	rcall	.-790    	; 0x17c1e <receive_plot_flush>
   17f34:	89 2b       	or	r24, r25
   17f36:	09 f4       	brne	.+2      	; 0x17f3a <printer_buffer+0x68>
            plot.error = 1;
   17f38:	3f c0       	rjmp	.+126    	; 0x17fb8 <printer_buffer+0xe6>
   17f3a:	81 e0       	ldi	r24, 0x01	; 1
   17f3c:	80 93 42 19 	sts	0x1942, r24	; 0x801942 <plot+0x8>
        //plot.count += strlen(ptr);
    }
    else
    {
        ch  = val & 0xff;
        plot.buf[plot.ind++] = ch;
   17f40:	3b c0       	rjmp	.+118    	; 0x17fb8 <printer_buffer+0xe6>
   17f42:	20 91 45 19 	lds	r18, 0x1945	; 0x801945 <plot+0xb>
   17f46:	30 91 46 19 	lds	r19, 0x1946	; 0x801946 <plot+0xc>
   17f4a:	80 91 3e 19 	lds	r24, 0x193E	; 0x80193e <plot+0x4>
   17f4e:	90 91 3f 19 	lds	r25, 0x193F	; 0x80193f <plot+0x5>
   17f52:	ac 01       	movw	r20, r24
   17f54:	4f 5f       	subi	r20, 0xFF	; 255
   17f56:	5f 4f       	sbci	r21, 0xFF	; 255
   17f58:	50 93 3f 19 	sts	0x193F, r21	; 0x80193f <plot+0x5>
   17f5c:	40 93 3e 19 	sts	0x193E, r20	; 0x80193e <plot+0x4>
   17f60:	f9 01       	movw	r30, r18
   17f62:	e8 0f       	add	r30, r24
   17f64:	f9 1f       	adc	r31, r25
        plot.count++;
   17f66:	c0 83       	st	Z, r28
   17f68:	80 91 3a 19 	lds	r24, 0x193A	; 0x80193a <plot>
   17f6c:	90 91 3b 19 	lds	r25, 0x193B	; 0x80193b <plot+0x1>
   17f70:	a0 91 3c 19 	lds	r26, 0x193C	; 0x80193c <plot+0x2>
   17f74:	b0 91 3d 19 	lds	r27, 0x193D	; 0x80193d <plot+0x3>
   17f78:	01 96       	adiw	r24, 0x01	; 1
   17f7a:	a1 1d       	adc	r26, r1
   17f7c:	b1 1d       	adc	r27, r1
   17f7e:	80 93 3a 19 	sts	0x193A, r24	; 0x80193a <plot>
   17f82:	90 93 3b 19 	sts	0x193B, r25	; 0x80193b <plot+0x1>
   17f86:	a0 93 3c 19 	sts	0x193C, r26	; 0x80193c <plot+0x2>
   17f8a:	b0 93 3d 19 	sts	0x193D, r27	; 0x80193d <plot+0x3>

        if(plot.ind >= plot.size)
   17f8e:	20 91 3e 19 	lds	r18, 0x193E	; 0x80193e <plot+0x4>
   17f92:	30 91 3f 19 	lds	r19, 0x193F	; 0x80193f <plot+0x5>
   17f96:	80 91 40 19 	lds	r24, 0x1940	; 0x801940 <plot+0x6>
   17f9a:	90 91 41 19 	lds	r25, 0x1941	; 0x801941 <plot+0x7>
   17f9e:	28 17       	cp	r18, r24
        {
            if( receive_plot_flush() < 0 )
   17fa0:	39 07       	cpc	r19, r25
   17fa2:	54 f0       	brlt	.+20     	; 0x17fb8 <printer_buffer+0xe6>
   17fa4:	3c de       	rcall	.-904    	; 0x17c1e <receive_plot_flush>
   17fa6:	97 ff       	sbrs	r25, 7
                plot.error = 1;
   17fa8:	03 c0       	rjmp	.+6      	; 0x17fb0 <printer_buffer+0xde>
   17faa:	81 e0       	ldi	r24, 0x01	; 1
   17fac:	80 93 42 19 	sts	0x1942, r24	; 0x801942 <plot+0x8>
            plot.ind  = 0;
   17fb0:	10 92 3f 19 	sts	0x193F, r1	; 0x80193f <plot+0x5>
   17fb4:	10 92 3e 19 	sts	0x193E, r1	; 0x80193e <plot+0x4>
        }
    }
}
   17fb8:	cd b7       	in	r28, 0x3d	; 61
   17fba:	de b7       	in	r29, 0x3e	; 62
   17fbc:	27 96       	adiw	r28, 0x07	; 7
   17fbe:	e2 e0       	ldi	r30, 0x02	; 2
   17fc0:	0c 94 f4 e3 	jmp	0x1c7e8	; 0x1c7e8 <__epilogue_restores__+0x20>

00017fc4 <PRINTER_COMMANDS>:
///
/// @todo  Fully emulated plotter response.
/// @return  0

int PRINTER_COMMANDS(uint8_t ch)
{
   17fc4:	cf 93       	push	r28
   17fc6:	00 d0       	rcall	.+0      	; 0x17fc8 <PRINTER_COMMANDS+0x4>
   17fc8:	00 d0       	rcall	.+0      	; 0x17fca <PRINTER_COMMANDS+0x6>
   17fca:	1f 92       	push	r1
   17fcc:	c8 2f       	mov	r28, r24

    // We could, for example, use secondaries to set file names, etc
    // We don not use them yet
    if(PRINTER_is_MLA(listening))
   17fce:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <listening>
   17fd2:	90 e0       	ldi	r25, 0x00	; 0
   17fd4:	0e 94 e6 8c 	call	0x119cc	; 0x119cc <PRINTER_is_MLA>
   17fd8:	89 2b       	or	r24, r25
   17fda:	69 f0       	breq	.+26     	; 0x17ff6 <PRINTER_COMMANDS+0x32>
    {
#if SDEBUG
        if(debuglevel & 32)
   17fdc:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17fe0:	85 ff       	sbrs	r24, 5
   17fe2:	22 c0       	rjmp	.+68     	; 0x18028 <PRINTER_COMMANDS+0x64>
            printf("[SC PRINTER Listen: %02XH]\n",  0xff & ch );
   17fe4:	8c 2f       	mov	r24, r28
   17fe6:	90 e0       	ldi	r25, 0x00	; 0
   17fe8:	ed b7       	in	r30, 0x3d	; 61
   17fea:	fe b7       	in	r31, 0x3e	; 62
   17fec:	95 83       	std	Z+5, r25	; 0x05
   17fee:	84 83       	std	Z+4, r24	; 0x04
   17ff0:	8e e5       	ldi	r24, 0x5E	; 94
   17ff2:	9f e2       	ldi	r25, 0x2F	; 47
   17ff4:	13 c0       	rjmp	.+38     	; 0x1801c <PRINTER_COMMANDS+0x58>
#endif
        return(0);
    }

    if(PRINTER_is_MTA(talking))
   17ff6:	80 91 84 1e 	lds	r24, 0x1E84	; 0x801e84 <talking>
   17ffa:	90 e0       	ldi	r25, 0x00	; 0
   17ffc:	0e 94 f5 8c 	call	0x119ea	; 0x119ea <PRINTER_is_MTA>
   18000:	89 2b       	or	r24, r25
   18002:	91 f0       	breq	.+36     	; 0x18028 <PRINTER_COMMANDS+0x64>
    {
#if SDEBUG
        if(debuglevel & 32)
   18004:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   18008:	85 ff       	sbrs	r24, 5
   1800a:	0e c0       	rjmp	.+28     	; 0x18028 <PRINTER_COMMANDS+0x64>
            printf("[SC PRINTER Talk: %02XH]\n",  0xff & ch );
   1800c:	8c 2f       	mov	r24, r28
   1800e:	90 e0       	ldi	r25, 0x00	; 0
   18010:	ed b7       	in	r30, 0x3d	; 61
   18012:	fe b7       	in	r31, 0x3e	; 62
   18014:	95 83       	std	Z+5, r25	; 0x05
   18016:	84 83       	std	Z+4, r24	; 0x04
   18018:	84 e4       	ldi	r24, 0x44	; 68
   1801a:	9f e2       	ldi	r25, 0x2F	; 47
   1801c:	a0 e0       	ldi	r26, 0x00	; 0
   1801e:	81 83       	std	Z+1, r24	; 0x01
   18020:	92 83       	std	Z+2, r25	; 0x02
   18022:	a3 83       	std	Z+3, r26	; 0x03
   18024:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
#endif
        return(0);
    }
    return(0);
}
   18028:	80 e0       	ldi	r24, 0x00	; 0
   1802a:	90 e0       	ldi	r25, 0x00	; 0
   1802c:	0f 90       	pop	r0
   1802e:	0f 90       	pop	r0
   18030:	0f 90       	pop	r0
   18032:	0f 90       	pop	r0
   18034:	0f 90       	pop	r0
   18036:	cf 91       	pop	r28
   18038:	08 95       	ret

0001803a <lif_help>:
   1803a:	cf 93       	push	r28
   1803c:	df 93       	push	r29
   1803e:	00 d0       	rcall	.+0      	; 0x18040 <lif_help+0x6>
   18040:	1f 92       	push	r1
   18042:	ec 01       	movw	r28, r24
   18044:	86 e2       	ldi	r24, 0x26	; 38
   18046:	94 e4       	ldi	r25, 0x44	; 68
   18048:	a0 e0       	ldi	r26, 0x00	; 0
   1804a:	ed b7       	in	r30, 0x3d	; 61
   1804c:	fe b7       	in	r31, 0x3e	; 62
   1804e:	81 83       	std	Z+1, r24	; 0x01
   18050:	92 83       	std	Z+2, r25	; 0x02
   18052:	a3 83       	std	Z+3, r26	; 0x03
   18054:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   18058:	cd 2b       	or	r28, r29
   1805a:	51 f0       	breq	.+20     	; 0x18070 <lif_help+0x36>
   1805c:	8d e5       	ldi	r24, 0x5D	; 93
   1805e:	92 e4       	ldi	r25, 0x42	; 66
   18060:	a0 e0       	ldi	r26, 0x00	; 0
   18062:	ed b7       	in	r30, 0x3d	; 61
   18064:	fe b7       	in	r31, 0x3e	; 62
   18066:	81 83       	std	Z+1, r24	; 0x01
   18068:	92 83       	std	Z+2, r25	; 0x02
   1806a:	a3 83       	std	Z+3, r26	; 0x03
   1806c:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   18070:	cd b7       	in	r28, 0x3d	; 61
   18072:	de b7       	in	r29, 0x3e	; 62
   18074:	23 96       	adiw	r28, 0x03	; 3
   18076:	e2 e0       	ldi	r30, 0x02	; 2
   18078:	0c 94 f4 e3 	jmp	0x1c7e8	; 0x1c7e8 <__epilogue_restores__+0x20>

0001807c <lif_calloc>:
   1807c:	cf 92       	push	r12
   1807e:	df 92       	push	r13
   18080:	ef 92       	push	r14
   18082:	ff 92       	push	r15
   18084:	cf 93       	push	r28
   18086:	df 93       	push	r29
   18088:	ad b7       	in	r26, 0x3d	; 61
   1808a:	be b7       	in	r27, 0x3e	; 62
   1808c:	17 97       	sbiw	r26, 0x07	; 7
   1808e:	0f b6       	in	r0, 0x3f	; 63
   18090:	f8 94       	cli
   18092:	be bf       	out	0x3e, r27	; 62
   18094:	0f be       	out	0x3f, r0	; 63
   18096:	ad bf       	out	0x3d, r26	; 61
   18098:	6b 01       	movw	r12, r22
   1809a:	7c 01       	movw	r14, r24
   1809c:	61 e0       	ldi	r22, 0x01	; 1
   1809e:	70 e0       	ldi	r23, 0x00	; 0
   180a0:	c6 01       	movw	r24, r12
   180a2:	0e 94 49 29 	call	0x5292	; 0x5292 <safecalloc>
   180a6:	ec 01       	movw	r28, r24
   180a8:	89 2b       	or	r24, r25
   180aa:	71 f4       	brne	.+28     	; 0x180c8 <lif_calloc+0x4c>
   180ac:	ed b7       	in	r30, 0x3d	; 61
   180ae:	fe b7       	in	r31, 0x3e	; 62
   180b0:	c4 82       	std	Z+4, r12	; 0x04
   180b2:	d5 82       	std	Z+5, r13	; 0x05
   180b4:	e6 82       	std	Z+6, r14	; 0x06
   180b6:	f7 82       	std	Z+7, r15	; 0x07
   180b8:	83 e1       	ldi	r24, 0x13	; 19
   180ba:	92 e4       	ldi	r25, 0x42	; 66
   180bc:	a0 e0       	ldi	r26, 0x00	; 0
   180be:	81 83       	std	Z+1, r24	; 0x01
   180c0:	92 83       	std	Z+2, r25	; 0x02
   180c2:	a3 83       	std	Z+3, r26	; 0x03
   180c4:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   180c8:	ce 01       	movw	r24, r28
   180ca:	ad b7       	in	r26, 0x3d	; 61
   180cc:	be b7       	in	r27, 0x3e	; 62
   180ce:	17 96       	adiw	r26, 0x07	; 7
   180d0:	0f b6       	in	r0, 0x3f	; 63
   180d2:	f8 94       	cli
   180d4:	be bf       	out	0x3e, r27	; 62
   180d6:	0f be       	out	0x3f, r0	; 63
   180d8:	ad bf       	out	0x3d, r26	; 61
   180da:	df 91       	pop	r29
   180dc:	cf 91       	pop	r28
   180de:	ff 90       	pop	r15
   180e0:	ef 90       	pop	r14
   180e2:	df 90       	pop	r13
   180e4:	cf 90       	pop	r12
   180e6:	08 95       	ret

000180e8 <lif_free>:
   180e8:	00 d0       	rcall	.+0      	; 0x180ea <lif_free+0x2>
   180ea:	1f 92       	push	r1
   180ec:	00 97       	sbiw	r24, 0x00	; 0
   180ee:	59 f4       	brne	.+22     	; 0x18106 <lif_free+0x1e>
   180f0:	8b ef       	ldi	r24, 0xFB	; 251
   180f2:	91 e4       	ldi	r25, 0x41	; 65
   180f4:	a0 e0       	ldi	r26, 0x00	; 0
   180f6:	ed b7       	in	r30, 0x3d	; 61
   180f8:	fe b7       	in	r31, 0x3e	; 62
   180fa:	81 83       	std	Z+1, r24	; 0x01
   180fc:	92 83       	std	Z+2, r25	; 0x02
   180fe:	a3 83       	std	Z+3, r26	; 0x03
   18100:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   18104:	02 c0       	rjmp	.+4      	; 0x1810a <lif_free+0x22>
   18106:	0e 94 95 29 	call	0x532a	; 0x532a <safefree>
   1810a:	0f 90       	pop	r0
   1810c:	0f 90       	pop	r0
   1810e:	0f 90       	pop	r0
   18110:	08 95       	ret

00018112 <lif_stralloc>:
   18112:	0f 93       	push	r16
   18114:	1f 93       	push	r17
   18116:	cf 93       	push	r28
   18118:	df 93       	push	r29
   1811a:	ec 01       	movw	r28, r24
   1811c:	fc 01       	movw	r30, r24
   1811e:	01 90       	ld	r0, Z+
   18120:	00 20       	and	r0, r0
   18122:	e9 f7       	brne	.-6      	; 0x1811e <lif_stralloc+0xc>
   18124:	bf 01       	movw	r22, r30
   18126:	68 1b       	sub	r22, r24
   18128:	79 0b       	sbc	r23, r25
   1812a:	6d 5f       	subi	r22, 0xFD	; 253
   1812c:	7f 4f       	sbci	r23, 0xFF	; 255
   1812e:	07 2e       	mov	r0, r23
   18130:	00 0c       	add	r0, r0
   18132:	88 0b       	sbc	r24, r24
   18134:	99 0b       	sbc	r25, r25
   18136:	a2 df       	rcall	.-188    	; 0x1807c <lif_calloc>
   18138:	8c 01       	movw	r16, r24
   1813a:	00 97       	sbiw	r24, 0x00	; 0
   1813c:	19 f0       	breq	.+6      	; 0x18144 <lif_stralloc+0x32>
   1813e:	be 01       	movw	r22, r28
   18140:	0e 94 35 32 	call	0x646a	; 0x646a <strcpy>
   18144:	c8 01       	movw	r24, r16
   18146:	df 91       	pop	r29
   18148:	cf 91       	pop	r28
   1814a:	1f 91       	pop	r17
   1814c:	0f 91       	pop	r16
   1814e:	08 95       	ret

00018150 <lif_open>:
   18150:	ef 92       	push	r14
   18152:	ff 92       	push	r15
   18154:	0f 93       	push	r16
   18156:	1f 93       	push	r17
   18158:	cf 93       	push	r28
   1815a:	df 93       	push	r29
   1815c:	ad b7       	in	r26, 0x3d	; 61
   1815e:	be b7       	in	r27, 0x3e	; 62
   18160:	17 97       	sbiw	r26, 0x07	; 7
   18162:	0f b6       	in	r0, 0x3f	; 63
   18164:	f8 94       	cli
   18166:	be bf       	out	0x3e, r27	; 62
   18168:	0f be       	out	0x3f, r0	; 63
   1816a:	ad bf       	out	0x3d, r26	; 61
   1816c:	8c 01       	movw	r16, r24
   1816e:	7b 01       	movw	r14, r22
   18170:	0e 94 f8 7e 	call	0xfdf0	; 0xfdf0 <fopen>
   18174:	ec 01       	movw	r28, r24
   18176:	89 2b       	or	r24, r25
   18178:	71 f4       	brne	.+28     	; 0x18196 <lif_open+0x46>
   1817a:	ed b7       	in	r30, 0x3d	; 61
   1817c:	fe b7       	in	r31, 0x3e	; 62
   1817e:	f7 82       	std	Z+7, r15	; 0x07
   18180:	e6 82       	std	Z+6, r14	; 0x06
   18182:	15 83       	std	Z+5, r17	; 0x05
   18184:	04 83       	std	Z+4, r16	; 0x04
   18186:	86 ed       	ldi	r24, 0xD6	; 214
   18188:	91 e4       	ldi	r25, 0x41	; 65
   1818a:	a0 e0       	ldi	r26, 0x00	; 0
   1818c:	81 83       	std	Z+1, r24	; 0x01
   1818e:	92 83       	std	Z+2, r25	; 0x02
   18190:	a3 83       	std	Z+3, r26	; 0x03
   18192:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   18196:	ce 01       	movw	r24, r28
   18198:	cd b7       	in	r28, 0x3d	; 61
   1819a:	de b7       	in	r29, 0x3e	; 62
   1819c:	27 96       	adiw	r28, 0x07	; 7
   1819e:	e6 e0       	ldi	r30, 0x06	; 6
   181a0:	0c 94 f0 e3 	jmp	0x1c7e0	; 0x1c7e0 <__epilogue_restores__+0x18>

000181a4 <lif_stat>:
   181a4:	0f 93       	push	r16
   181a6:	1f 93       	push	r17
   181a8:	cf 93       	push	r28
   181aa:	df 93       	push	r29
   181ac:	00 d0       	rcall	.+0      	; 0x181ae <lif_stat+0xa>
   181ae:	00 d0       	rcall	.+0      	; 0x181b0 <lif_stat+0xc>
   181b0:	1f 92       	push	r1
   181b2:	8c 01       	movw	r16, r24
   181b4:	d6 2f       	mov	r29, r22
   181b6:	c7 2f       	mov	r28, r23
   181b8:	0e 94 0b 7a 	call	0xf416	; 0xf416 <stat>
   181bc:	97 ff       	sbrs	r25, 7
   181be:	0f c0       	rjmp	.+30     	; 0x181de <lif_stat+0x3a>
   181c0:	ed b7       	in	r30, 0x3d	; 61
   181c2:	fe b7       	in	r31, 0x3e	; 62
   181c4:	15 83       	std	Z+5, r17	; 0x05
   181c6:	04 83       	std	Z+4, r16	; 0x04
   181c8:	8d eb       	ldi	r24, 0xBD	; 189
   181ca:	91 e4       	ldi	r25, 0x41	; 65
   181cc:	a0 e0       	ldi	r26, 0x00	; 0
   181ce:	81 83       	std	Z+1, r24	; 0x01
   181d0:	92 83       	std	Z+2, r25	; 0x02
   181d2:	a3 83       	std	Z+3, r26	; 0x03
   181d4:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   181d8:	80 e0       	ldi	r24, 0x00	; 0
   181da:	90 e0       	ldi	r25, 0x00	; 0
   181dc:	02 c0       	rjmp	.+4      	; 0x181e2 <lif_stat+0x3e>
   181de:	8d 2f       	mov	r24, r29
   181e0:	9c 2f       	mov	r25, r28
   181e2:	cd b7       	in	r28, 0x3d	; 61
   181e4:	de b7       	in	r29, 0x3e	; 62
   181e6:	25 96       	adiw	r28, 0x05	; 5
   181e8:	e4 e0       	ldi	r30, 0x04	; 4
   181ea:	0c 94 f2 e3 	jmp	0x1c7e4	; 0x1c7e4 <__epilogue_restores__+0x1c>

000181ee <lif_seek_msg>:
   181ee:	a9 e0       	ldi	r26, 0x09	; 9
   181f0:	b0 e0       	ldi	r27, 0x00	; 0
   181f2:	ed ef       	ldi	r30, 0xFD	; 253
   181f4:	f0 ec       	ldi	r31, 0xC0	; 192
   181f6:	0c 94 d2 e3 	jmp	0x1c7a4	; 0x1c7a4 <__prologue_saves__+0x14>
   181fa:	ec 01       	movw	r28, r24
   181fc:	6a 01       	movw	r12, r20
   181fe:	7b 01       	movw	r14, r22
   18200:	89 01       	movw	r16, r18
   18202:	0e 94 37 7b 	call	0xf66e	; 0xf66e <ftell>
   18206:	6c 15       	cp	r22, r12
   18208:	7d 05       	cpc	r23, r13
   1820a:	8e 05       	cpc	r24, r14
   1820c:	9f 05       	cpc	r25, r15
   1820e:	19 f4       	brne	.+6      	; 0x18216 <lif_seek_msg+0x28>
   18210:	81 e0       	ldi	r24, 0x01	; 1
   18212:	90 e0       	ldi	r25, 0x00	; 0
   18214:	1b c0       	rjmp	.+54     	; 0x1824c <lif_seek_msg+0x5e>
   18216:	20 e0       	ldi	r18, 0x00	; 0
   18218:	30 e0       	ldi	r19, 0x00	; 0
   1821a:	b7 01       	movw	r22, r14
   1821c:	a6 01       	movw	r20, r12
   1821e:	ce 01       	movw	r24, r28
   18220:	0e 94 ba 7b 	call	0xf774	; 0xf774 <fseek>
   18224:	97 ff       	sbrs	r25, 7
   18226:	f4 cf       	rjmp	.-24     	; 0x18210 <lif_seek_msg+0x22>
   18228:	ed b7       	in	r30, 0x3d	; 61
   1822a:	fe b7       	in	r31, 0x3e	; 62
   1822c:	c6 82       	std	Z+6, r12	; 0x06
   1822e:	d7 82       	std	Z+7, r13	; 0x07
   18230:	e0 86       	std	Z+8, r14	; 0x08
   18232:	f1 86       	std	Z+9, r15	; 0x09
   18234:	15 83       	std	Z+5, r17	; 0x05
   18236:	04 83       	std	Z+4, r16	; 0x04
   18238:	8c e9       	ldi	r24, 0x9C	; 156
   1823a:	91 e4       	ldi	r25, 0x41	; 65
   1823c:	a0 e0       	ldi	r26, 0x00	; 0
   1823e:	81 83       	std	Z+1, r24	; 0x01
   18240:	92 83       	std	Z+2, r25	; 0x02
   18242:	a3 83       	std	Z+3, r26	; 0x03
   18244:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   18248:	80 e0       	ldi	r24, 0x00	; 0
   1824a:	90 e0       	ldi	r25, 0x00	; 0
   1824c:	cd b7       	in	r28, 0x3d	; 61
   1824e:	de b7       	in	r29, 0x3e	; 62
   18250:	29 96       	adiw	r28, 0x09	; 9
   18252:	e8 e0       	ldi	r30, 0x08	; 8
   18254:	0c 94 ee e3 	jmp	0x1c7dc	; 0x1c7dc <__epilogue_restores__+0x14>

00018258 <lif_read>:
   18258:	af e0       	ldi	r26, 0x0F	; 15
   1825a:	b0 e0       	ldi	r27, 0x00	; 0
   1825c:	e2 e3       	ldi	r30, 0x32	; 50
   1825e:	f1 ec       	ldi	r31, 0xC1	; 193
   18260:	0c 94 ce e3 	jmp	0x1c79c	; 0x1c79c <__prologue_saves__+0xc>
   18264:	ec 01       	movw	r28, r24
   18266:	7b 01       	movw	r14, r22
   18268:	49 01       	movw	r8, r18
   1826a:	5a 01       	movw	r10, r20
   1826c:	28 81       	ld	r18, Y
   1826e:	39 81       	ldd	r19, Y+1	; 0x01
   18270:	b5 01       	movw	r22, r10
   18272:	a4 01       	movw	r20, r8
   18274:	8a 81       	ldd	r24, Y+2	; 0x02
   18276:	9b 81       	ldd	r25, Y+3	; 0x03
   18278:	ba df       	rcall	.-140    	; 0x181ee <lif_seek_msg>
   1827a:	89 2b       	or	r24, r25
   1827c:	91 f1       	breq	.+100    	; 0x182e2 <lif_read+0x8a>
   1827e:	2a 81       	ldd	r18, Y+2	; 0x02
   18280:	3b 81       	ldd	r19, Y+3	; 0x03
   18282:	a8 01       	movw	r20, r16
   18284:	61 e0       	ldi	r22, 0x01	; 1
   18286:	70 e0       	ldi	r23, 0x00	; 0
   18288:	c7 01       	movw	r24, r14
   1828a:	0e 94 4e 7c 	call	0xf89c	; 0xf89c <fread>
   1828e:	6c 01       	movw	r12, r24
   18290:	e1 2c       	mov	r14, r1
   18292:	f1 2c       	mov	r15, r1
   18294:	b8 01       	movw	r22, r16
   18296:	01 2e       	mov	r0, r17
   18298:	00 0c       	add	r0, r0
   1829a:	88 0b       	sbc	r24, r24
   1829c:	99 0b       	sbc	r25, r25
   1829e:	c6 16       	cp	r12, r22
   182a0:	d7 06       	cpc	r13, r23
   182a2:	e8 06       	cpc	r14, r24
   182a4:	f9 06       	cpc	r15, r25
   182a6:	19 f1       	breq	.+70     	; 0x182ee <lif_read+0x96>
   182a8:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   182ac:	80 ff       	sbrs	r24, 0
   182ae:	1d c0       	rjmp	.+58     	; 0x182ea <lif_read+0x92>
   182b0:	ed b7       	in	r30, 0x3d	; 61
   182b2:	fe b7       	in	r31, 0x3e	; 62
   182b4:	17 87       	std	Z+15, r17	; 0x0f
   182b6:	06 87       	std	Z+14, r16	; 0x0e
   182b8:	c2 86       	std	Z+10, r12	; 0x0a
   182ba:	d3 86       	std	Z+11, r13	; 0x0b
   182bc:	e4 86       	std	Z+12, r14	; 0x0c
   182be:	f5 86       	std	Z+13, r15	; 0x0d
   182c0:	86 82       	std	Z+6, r8	; 0x06
   182c2:	97 82       	std	Z+7, r9	; 0x07
   182c4:	a0 86       	std	Z+8, r10	; 0x08
   182c6:	b1 86       	std	Z+9, r11	; 0x09
   182c8:	88 81       	ld	r24, Y
   182ca:	99 81       	ldd	r25, Y+1	; 0x01
   182cc:	95 83       	std	Z+5, r25	; 0x05
   182ce:	84 83       	std	Z+4, r24	; 0x04
   182d0:	80 e6       	ldi	r24, 0x60	; 96
   182d2:	91 e4       	ldi	r25, 0x41	; 65
   182d4:	a0 e0       	ldi	r26, 0x00	; 0
   182d6:	81 83       	std	Z+1, r24	; 0x01
   182d8:	92 83       	std	Z+2, r25	; 0x02
   182da:	a3 83       	std	Z+3, r26	; 0x03
   182dc:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   182e0:	04 c0       	rjmp	.+8      	; 0x182ea <lif_read+0x92>
   182e2:	60 e0       	ldi	r22, 0x00	; 0
   182e4:	70 e0       	ldi	r23, 0x00	; 0
   182e6:	cb 01       	movw	r24, r22
   182e8:	02 c0       	rjmp	.+4      	; 0x182ee <lif_read+0x96>
   182ea:	c7 01       	movw	r24, r14
   182ec:	b6 01       	movw	r22, r12
   182ee:	cd b7       	in	r28, 0x3d	; 61
   182f0:	de b7       	in	r29, 0x3e	; 62
   182f2:	2f 96       	adiw	r28, 0x0f	; 15
   182f4:	ec e0       	ldi	r30, 0x0C	; 12
   182f6:	0c 94 ea e3 	jmp	0x1c7d4	; 0x1c7d4 <__epilogue_restores__+0xc>

000182fa <lif_write>:
   182fa:	8f 92       	push	r8
   182fc:	9f 92       	push	r9
   182fe:	af 92       	push	r10
   18300:	bf 92       	push	r11
   18302:	ef 92       	push	r14
   18304:	ff 92       	push	r15
   18306:	0f 93       	push	r16
   18308:	1f 93       	push	r17
   1830a:	cf 93       	push	r28
   1830c:	df 93       	push	r29
   1830e:	ad b7       	in	r26, 0x3d	; 61
   18310:	be b7       	in	r27, 0x3e	; 62
   18312:	1d 97       	sbiw	r26, 0x0d	; 13
   18314:	0f b6       	in	r0, 0x3f	; 63
   18316:	f8 94       	cli
   18318:	be bf       	out	0x3e, r27	; 62
   1831a:	0f be       	out	0x3f, r0	; 63
   1831c:	ad bf       	out	0x3d, r26	; 61
   1831e:	7c 01       	movw	r14, r24
   18320:	eb 01       	movw	r28, r22
   18322:	49 01       	movw	r8, r18
   18324:	5a 01       	movw	r10, r20
   18326:	fc 01       	movw	r30, r24
   18328:	20 81       	ld	r18, Z
   1832a:	31 81       	ldd	r19, Z+1	; 0x01
   1832c:	b5 01       	movw	r22, r10
   1832e:	a4 01       	movw	r20, r8
   18330:	82 81       	ldd	r24, Z+2	; 0x02
   18332:	93 81       	ldd	r25, Z+3	; 0x03
   18334:	5c df       	rcall	.-328    	; 0x181ee <lif_seek_msg>
   18336:	00 97       	sbiw	r24, 0x00	; 0
   18338:	71 f1       	breq	.+92     	; 0x18396 <lif_write+0x9c>
   1833a:	f7 01       	movw	r30, r14
   1833c:	22 81       	ldd	r18, Z+2	; 0x02
   1833e:	33 81       	ldd	r19, Z+3	; 0x03
   18340:	a8 01       	movw	r20, r16
   18342:	61 e0       	ldi	r22, 0x01	; 1
   18344:	70 e0       	ldi	r23, 0x00	; 0
   18346:	ce 01       	movw	r24, r28
   18348:	0e 94 20 7d 	call	0xfa40	; 0xfa40 <fwrite>
   1834c:	ec 01       	movw	r28, r24
   1834e:	08 17       	cp	r16, r24
   18350:	19 07       	cpc	r17, r25
   18352:	f1 f0       	breq	.+60     	; 0x18390 <lif_write+0x96>
   18354:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   18358:	80 ff       	sbrs	r24, 0
   1835a:	1c c0       	rjmp	.+56     	; 0x18394 <lif_write+0x9a>
   1835c:	ed b7       	in	r30, 0x3d	; 61
   1835e:	fe b7       	in	r31, 0x3e	; 62
   18360:	15 87       	std	Z+13, r17	; 0x0d
   18362:	04 87       	std	Z+12, r16	; 0x0c
   18364:	d3 87       	std	Z+11, r29	; 0x0b
   18366:	c2 87       	std	Z+10, r28	; 0x0a
   18368:	86 82       	std	Z+6, r8	; 0x06
   1836a:	97 82       	std	Z+7, r9	; 0x07
   1836c:	a0 86       	std	Z+8, r10	; 0x08
   1836e:	b1 86       	std	Z+9, r11	; 0x09
   18370:	f7 01       	movw	r30, r14
   18372:	80 81       	ld	r24, Z
   18374:	91 81       	ldd	r25, Z+1	; 0x01
   18376:	ed b7       	in	r30, 0x3d	; 61
   18378:	fe b7       	in	r31, 0x3e	; 62
   1837a:	95 83       	std	Z+5, r25	; 0x05
   1837c:	84 83       	std	Z+4, r24	; 0x04
   1837e:	83 e2       	ldi	r24, 0x23	; 35
   18380:	91 e4       	ldi	r25, 0x41	; 65
   18382:	a0 e0       	ldi	r26, 0x00	; 0
   18384:	81 83       	std	Z+1, r24	; 0x01
   18386:	92 83       	std	Z+2, r25	; 0x02
   18388:	a3 83       	std	Z+3, r26	; 0x03
   1838a:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   1838e:	02 c0       	rjmp	.+4      	; 0x18394 <lif_write+0x9a>
   18390:	c8 01       	movw	r24, r16
   18392:	01 c0       	rjmp	.+2      	; 0x18396 <lif_write+0x9c>
   18394:	ce 01       	movw	r24, r28
   18396:	ad b7       	in	r26, 0x3d	; 61
   18398:	be b7       	in	r27, 0x3e	; 62
   1839a:	1d 96       	adiw	r26, 0x0d	; 13
   1839c:	0f b6       	in	r0, 0x3f	; 63
   1839e:	f8 94       	cli
   183a0:	be bf       	out	0x3e, r27	; 62
   183a2:	0f be       	out	0x3f, r0	; 63
   183a4:	ad bf       	out	0x3d, r26	; 61
   183a6:	df 91       	pop	r29
   183a8:	cf 91       	pop	r28
   183aa:	1f 91       	pop	r17
   183ac:	0f 91       	pop	r16
   183ae:	ff 90       	pop	r15
   183b0:	ef 90       	pop	r14
   183b2:	bf 90       	pop	r11
   183b4:	af 90       	pop	r10
   183b6:	9f 90       	pop	r9
   183b8:	8f 90       	pop	r8
   183ba:	08 95       	ret

000183bc <lif_chars>:
   183bc:	80 32       	cpi	r24, 0x20	; 32
   183be:	91 05       	cpc	r25, r1
   183c0:	e1 f0       	breq	.+56     	; 0x183fa <lif_chars+0x3e>
   183c2:	9c 01       	movw	r18, r24
   183c4:	21 56       	subi	r18, 0x61	; 97
   183c6:	31 09       	sbc	r19, r1
   183c8:	2a 31       	cpi	r18, 0x1A	; 26
   183ca:	31 05       	cpc	r19, r1
   183cc:	10 f4       	brcc	.+4      	; 0x183d2 <lif_chars+0x16>
   183ce:	80 97       	sbiw	r24, 0x20	; 32
   183d0:	08 95       	ret
   183d2:	9c 01       	movw	r18, r24
   183d4:	21 54       	subi	r18, 0x41	; 65
   183d6:	31 09       	sbc	r19, r1
   183d8:	2a 31       	cpi	r18, 0x1A	; 26
   183da:	31 05       	cpc	r19, r1
   183dc:	c8 f0       	brcs	.+50     	; 0x18410 <lif_chars+0x54>
   183de:	16 16       	cp	r1, r22
   183e0:	17 06       	cpc	r1, r23
   183e2:	74 f4       	brge	.+28     	; 0x18400 <lif_chars+0x44>
   183e4:	2f 5e       	subi	r18, 0xEF	; 239
   183e6:	3f 4f       	sbci	r19, 0xFF	; 255
   183e8:	2a 30       	cpi	r18, 0x0A	; 10
   183ea:	31 05       	cpc	r19, r1
   183ec:	88 f0       	brcs	.+34     	; 0x18410 <lif_chars+0x54>
   183ee:	8f 35       	cpi	r24, 0x5F	; 95
   183f0:	91 05       	cpc	r25, r1
   183f2:	49 f0       	breq	.+18     	; 0x18406 <lif_chars+0x4a>
   183f4:	8d 97       	sbiw	r24, 0x2d	; 45
   183f6:	21 f4       	brne	.+8      	; 0x18400 <lif_chars+0x44>
   183f8:	09 c0       	rjmp	.+18     	; 0x1840c <lif_chars+0x50>
   183fa:	80 e2       	ldi	r24, 0x20	; 32
   183fc:	90 e0       	ldi	r25, 0x00	; 0
   183fe:	08 95       	ret
   18400:	80 e0       	ldi	r24, 0x00	; 0
   18402:	90 e0       	ldi	r25, 0x00	; 0
   18404:	08 95       	ret
   18406:	8f e5       	ldi	r24, 0x5F	; 95
   18408:	90 e0       	ldi	r25, 0x00	; 0
   1840a:	08 95       	ret
   1840c:	8d e2       	ldi	r24, 0x2D	; 45
   1840e:	90 e0       	ldi	r25, 0x00	; 0
   18410:	08 95       	ret

00018412 <lif_B2S>:
   18412:	a0 e0       	ldi	r26, 0x00	; 0
   18414:	b0 e0       	ldi	r27, 0x00	; 0
   18416:	ef e0       	ldi	r30, 0x0F	; 15
   18418:	f2 ec       	ldi	r31, 0xC2	; 194
   1841a:	0c 94 ce e3 	jmp	0x1c79c	; 0x1c79c <__prologue_saves__+0xc>
   1841e:	5c 01       	movw	r10, r24
   18420:	6b 01       	movw	r12, r22
   18422:	ea 01       	movw	r28, r20
   18424:	4c 01       	movw	r8, r24
   18426:	ee 24       	eor	r14, r14
   18428:	e3 94       	inc	r14
   1842a:	f1 2c       	mov	r15, r1
   1842c:	00 e0       	ldi	r16, 0x00	; 0
   1842e:	10 e0       	ldi	r17, 0x00	; 0
   18430:	0c 17       	cp	r16, r28
   18432:	1d 07       	cpc	r17, r29
   18434:	6c f4       	brge	.+26     	; 0x18450 <lif_B2S+0x3e>
   18436:	f4 01       	movw	r30, r8
   18438:	81 91       	ld	r24, Z+
   1843a:	4f 01       	movw	r8, r30
   1843c:	b8 01       	movw	r22, r16
   1843e:	90 e0       	ldi	r25, 0x00	; 0
   18440:	bd df       	rcall	.-134    	; 0x183bc <lif_chars>
   18442:	89 2b       	or	r24, r25
   18444:	11 f4       	brne	.+4      	; 0x1844a <lif_B2S+0x38>
   18446:	e1 2c       	mov	r14, r1
   18448:	f1 2c       	mov	r15, r1
   1844a:	0f 5f       	subi	r16, 0xFF	; 255
   1844c:	1f 4f       	sbci	r17, 0xFF	; 255
   1844e:	f0 cf       	rjmp	.-32     	; 0x18430 <lif_B2S+0x1e>
   18450:	d6 01       	movw	r26, r12
   18452:	f5 01       	movw	r30, r10
   18454:	cf 01       	movw	r24, r30
   18456:	8a 19       	sub	r24, r10
   18458:	9b 09       	sbc	r25, r11
   1845a:	8c 17       	cp	r24, r28
   1845c:	9d 07       	cpc	r25, r29
   1845e:	1c f4       	brge	.+6      	; 0x18466 <lif_B2S+0x54>
   18460:	81 91       	ld	r24, Z+
   18462:	8d 93       	st	X+, r24
   18464:	f7 cf       	rjmp	.-18     	; 0x18454 <lif_B2S+0x42>
   18466:	d7 ff       	sbrs	r29, 7
   18468:	02 c0       	rjmp	.+4      	; 0x1846e <lif_B2S+0x5c>
   1846a:	c0 e0       	ldi	r28, 0x00	; 0
   1846c:	d0 e0       	ldi	r29, 0x00	; 0
   1846e:	cc 0d       	add	r28, r12
   18470:	dd 1d       	adc	r29, r13
   18472:	18 82       	st	Y, r1
   18474:	c6 01       	movw	r24, r12
   18476:	0e 94 13 33 	call	0x6626	; 0x6626 <trim_tail>
   1847a:	c7 01       	movw	r24, r14
   1847c:	cd b7       	in	r28, 0x3d	; 61
   1847e:	de b7       	in	r29, 0x3e	; 62
   18480:	ec e0       	ldi	r30, 0x0C	; 12
   18482:	0c 94 ea e3 	jmp	0x1c7d4	; 0x1c7d4 <__epilogue_restores__+0xc>

00018486 <lif_checkname>:
   18486:	ef 92       	push	r14
   18488:	ff 92       	push	r15
   1848a:	0f 93       	push	r16
   1848c:	1f 93       	push	r17
   1848e:	cf 93       	push	r28
   18490:	df 93       	push	r29
   18492:	7c 01       	movw	r14, r24
   18494:	ec 01       	movw	r28, r24
   18496:	01 e0       	ldi	r16, 0x01	; 1
   18498:	10 e0       	ldi	r17, 0x00	; 0
   1849a:	be 01       	movw	r22, r28
   1849c:	6e 19       	sub	r22, r14
   1849e:	7f 09       	sbc	r23, r15
   184a0:	89 91       	ld	r24, Y+
   184a2:	88 23       	and	r24, r24
   184a4:	39 f0       	breq	.+14     	; 0x184b4 <lif_checkname+0x2e>
   184a6:	90 e0       	ldi	r25, 0x00	; 0
   184a8:	89 df       	rcall	.-238    	; 0x183bc <lif_chars>
   184aa:	89 2b       	or	r24, r25
   184ac:	b1 f7       	brne	.-20     	; 0x1849a <lif_checkname+0x14>
   184ae:	00 e0       	ldi	r16, 0x00	; 0
   184b0:	10 e0       	ldi	r17, 0x00	; 0
   184b2:	f3 cf       	rjmp	.-26     	; 0x1849a <lif_checkname+0x14>
   184b4:	c8 01       	movw	r24, r16
   184b6:	cd b7       	in	r28, 0x3d	; 61
   184b8:	de b7       	in	r29, 0x3e	; 62
   184ba:	e6 e0       	ldi	r30, 0x06	; 6
   184bc:	0c 94 f0 e3 	jmp	0x1c7e0	; 0x1c7e0 <__epilogue_restores__+0x18>

000184c0 <lif_S2B>:
   184c0:	fb 01       	movw	r30, r22
   184c2:	dc 01       	movw	r26, r24
   184c4:	20 e0       	ldi	r18, 0x00	; 0
   184c6:	30 e0       	ldi	r19, 0x00	; 0
   184c8:	61 91       	ld	r22, Z+
   184ca:	61 11       	cpse	r22, r1
   184cc:	05 c0       	rjmp	.+10     	; 0x184d8 <lif_S2B+0x18>
   184ce:	fc 01       	movw	r30, r24
   184d0:	e2 0f       	add	r30, r18
   184d2:	f3 1f       	adc	r31, r19
   184d4:	60 e2       	ldi	r22, 0x20	; 32
   184d6:	08 c0       	rjmp	.+16     	; 0x184e8 <lif_S2B+0x28>
   184d8:	24 17       	cp	r18, r20
   184da:	35 07       	cpc	r19, r21
   184dc:	24 f4       	brge	.+8      	; 0x184e6 <lif_S2B+0x26>
   184de:	6d 93       	st	X+, r22
   184e0:	2f 5f       	subi	r18, 0xFF	; 255
   184e2:	3f 4f       	sbci	r19, 0xFF	; 255
   184e4:	f1 cf       	rjmp	.-30     	; 0x184c8 <lif_S2B+0x8>
   184e6:	08 95       	ret
   184e8:	9f 01       	movw	r18, r30
   184ea:	28 1b       	sub	r18, r24
   184ec:	39 0b       	sbc	r19, r25
   184ee:	24 17       	cp	r18, r20
   184f0:	35 07       	cpc	r19, r21
   184f2:	14 f4       	brge	.+4      	; 0x184f8 <lif_S2B+0x38>
   184f4:	61 93       	st	Z+, r22
   184f6:	f8 cf       	rjmp	.-16     	; 0x184e8 <lif_S2B+0x28>
   184f8:	08 95       	ret

000184fa <lif_fixname>:
   184fa:	a0 e0       	ldi	r26, 0x00	; 0
   184fc:	b0 e0       	ldi	r27, 0x00	; 0
   184fe:	e3 e8       	ldi	r30, 0x83	; 131
   18500:	f2 ec       	ldi	r31, 0xC2	; 194
   18502:	0c 94 d1 e3 	jmp	0x1c7a2	; 0x1c7a2 <__prologue_saves__+0x12>
   18506:	8c 01       	movw	r16, r24
   18508:	cb 01       	movw	r24, r22
   1850a:	7a 01       	movw	r14, r20
   1850c:	0e 94 d7 77 	call	0xefae	; 0xefae <basename>
   18510:	6c 01       	movw	r12, r24
   18512:	e8 01       	movw	r28, r16
   18514:	80 e2       	ldi	r24, 0x20	; 32
   18516:	b8 2e       	mov	r11, r24
   18518:	be 01       	movw	r22, r28
   1851a:	60 1b       	sub	r22, r16
   1851c:	71 0b       	sbc	r23, r17
   1851e:	f6 01       	movw	r30, r12
   18520:	81 91       	ld	r24, Z+
   18522:	6f 01       	movw	r12, r30
   18524:	81 11       	cpse	r24, r1
   18526:	02 c0       	rjmp	.+4      	; 0x1852c <lif_fixname+0x32>
   18528:	20 e2       	ldi	r18, 0x20	; 32
   1852a:	0e c0       	rjmp	.+28     	; 0x18548 <lif_fixname+0x4e>
   1852c:	1e 14       	cp	r1, r14
   1852e:	1f 04       	cpc	r1, r15
   18530:	dc f7       	brge	.-10     	; 0x18528 <lif_fixname+0x2e>
   18532:	8e 32       	cpi	r24, 0x2E	; 46
   18534:	c9 f3       	breq	.-14     	; 0x18528 <lif_fixname+0x2e>
   18536:	90 e0       	ldi	r25, 0x00	; 0
   18538:	41 df       	rcall	.-382    	; 0x183bc <lif_chars>
   1853a:	88 23       	and	r24, r24
   1853c:	11 f0       	breq	.+4      	; 0x18542 <lif_fixname+0x48>
   1853e:	88 83       	st	Y, r24
   18540:	01 c0       	rjmp	.+2      	; 0x18544 <lif_fixname+0x4a>
   18542:	b8 82       	st	Y, r11
   18544:	21 96       	adiw	r28, 0x01	; 1
   18546:	e8 cf       	rjmp	.-48     	; 0x18518 <lif_fixname+0x1e>
   18548:	ce 01       	movw	r24, r28
   1854a:	80 1b       	sub	r24, r16
   1854c:	91 0b       	sbc	r25, r17
   1854e:	8e 15       	cp	r24, r14
   18550:	9f 05       	cpc	r25, r15
   18552:	14 f4       	brge	.+4      	; 0x18558 <lif_fixname+0x5e>
   18554:	29 93       	st	Y+, r18
   18556:	f8 cf       	rjmp	.-16     	; 0x18548 <lif_fixname+0x4e>
   18558:	18 82       	st	Y, r1
   1855a:	f8 01       	movw	r30, r16
   1855c:	01 90       	ld	r0, Z+
   1855e:	00 20       	and	r0, r0
   18560:	e9 f7       	brne	.-6      	; 0x1855c <lif_fixname+0x62>
   18562:	cf 01       	movw	r24, r30
   18564:	01 97       	sbiw	r24, 0x01	; 1
   18566:	80 1b       	sub	r24, r16
   18568:	91 0b       	sbc	r25, r17
   1856a:	cd b7       	in	r28, 0x3d	; 61
   1856c:	de b7       	in	r29, 0x3e	; 62
   1856e:	e9 e0       	ldi	r30, 0x09	; 9
   18570:	0c 94 ed e3 	jmp	0x1c7da	; 0x1c7da <__epilogue_restores__+0x12>

00018574 <lif_vol2str>:
   18574:	ef 92       	push	r14
   18576:	ff 92       	push	r15
   18578:	0f 93       	push	r16
   1857a:	1f 93       	push	r17
   1857c:	cf 93       	push	r28
   1857e:	df 93       	push	r29
   18580:	7c 01       	movw	r14, r24
   18582:	eb 01       	movw	r28, r22
   18584:	fc 01       	movw	r30, r24
   18586:	04 a1       	ldd	r16, Z+36	; 0x24
   18588:	15 a1       	ldd	r17, Z+37	; 0x25
   1858a:	20 e0       	ldi	r18, 0x00	; 0
   1858c:	30 e0       	ldi	r19, 0x00	; 0
   1858e:	42 e0       	ldi	r20, 0x02	; 2
   18590:	50 e0       	ldi	r21, 0x00	; 0
   18592:	60 e0       	ldi	r22, 0x00	; 0
   18594:	70 e0       	ldi	r23, 0x00	; 0
   18596:	ce 01       	movw	r24, r28
   18598:	0e 94 ab 92 	call	0x12556	; 0x12556 <V2B_MSB>
   1859c:	b7 01       	movw	r22, r14
   1859e:	6a 5d       	subi	r22, 0xDA	; 218
   185a0:	7f 4f       	sbci	r23, 0xFF	; 255
   185a2:	46 e0       	ldi	r20, 0x06	; 6
   185a4:	50 e0       	ldi	r21, 0x00	; 0
   185a6:	ce 01       	movw	r24, r28
   185a8:	02 96       	adiw	r24, 0x02	; 2
   185aa:	8a df       	rcall	.-236    	; 0x184c0 <lif_S2B>
   185ac:	f7 01       	movw	r30, r14
   185ae:	05 a5       	ldd	r16, Z+45	; 0x2d
   185b0:	16 a5       	ldd	r17, Z+46	; 0x2e
   185b2:	27 a5       	ldd	r18, Z+47	; 0x2f
   185b4:	30 a9       	ldd	r19, Z+48	; 0x30
   185b6:	44 e0       	ldi	r20, 0x04	; 4
   185b8:	50 e0       	ldi	r21, 0x00	; 0
   185ba:	68 e0       	ldi	r22, 0x08	; 8
   185bc:	70 e0       	ldi	r23, 0x00	; 0
   185be:	ce 01       	movw	r24, r28
   185c0:	0e 94 ab 92 	call	0x12556	; 0x12556 <V2B_MSB>
   185c4:	f7 01       	movw	r30, r14
   185c6:	01 a9       	ldd	r16, Z+49	; 0x31
   185c8:	12 a9       	ldd	r17, Z+50	; 0x32
   185ca:	20 e0       	ldi	r18, 0x00	; 0
   185cc:	30 e0       	ldi	r19, 0x00	; 0
   185ce:	42 e0       	ldi	r20, 0x02	; 2
   185d0:	50 e0       	ldi	r21, 0x00	; 0
   185d2:	6c e0       	ldi	r22, 0x0C	; 12
   185d4:	70 e0       	ldi	r23, 0x00	; 0
   185d6:	ce 01       	movw	r24, r28
   185d8:	0e 94 ab 92 	call	0x12556	; 0x12556 <V2B_MSB>
   185dc:	00 e0       	ldi	r16, 0x00	; 0
   185de:	10 e0       	ldi	r17, 0x00	; 0
   185e0:	98 01       	movw	r18, r16
   185e2:	42 e0       	ldi	r20, 0x02	; 2
   185e4:	50 e0       	ldi	r21, 0x00	; 0
   185e6:	6e e0       	ldi	r22, 0x0E	; 14
   185e8:	70 e0       	ldi	r23, 0x00	; 0
   185ea:	ce 01       	movw	r24, r28
   185ec:	0e 94 ab 92 	call	0x12556	; 0x12556 <V2B_MSB>
   185f0:	f7 01       	movw	r30, r14
   185f2:	05 a9       	ldd	r16, Z+53	; 0x35
   185f4:	16 a9       	ldd	r17, Z+54	; 0x36
   185f6:	27 a9       	ldd	r18, Z+55	; 0x37
   185f8:	30 ad       	ldd	r19, Z+56	; 0x38
   185fa:	44 e0       	ldi	r20, 0x04	; 4
   185fc:	50 e0       	ldi	r21, 0x00	; 0
   185fe:	60 e1       	ldi	r22, 0x10	; 16
   18600:	70 e0       	ldi	r23, 0x00	; 0
   18602:	ce 01       	movw	r24, r28
   18604:	0e 94 ab 92 	call	0x12556	; 0x12556 <V2B_MSB>
   18608:	f7 01       	movw	r30, r14
   1860a:	01 ad       	ldd	r16, Z+57	; 0x39
   1860c:	12 ad       	ldd	r17, Z+58	; 0x3a
   1860e:	20 e0       	ldi	r18, 0x00	; 0
   18610:	30 e0       	ldi	r19, 0x00	; 0
   18612:	42 e0       	ldi	r20, 0x02	; 2
   18614:	50 e0       	ldi	r21, 0x00	; 0
   18616:	64 e1       	ldi	r22, 0x14	; 20
   18618:	70 e0       	ldi	r23, 0x00	; 0
   1861a:	ce 01       	movw	r24, r28
   1861c:	0e 94 ab 92 	call	0x12556	; 0x12556 <V2B_MSB>
   18620:	00 e0       	ldi	r16, 0x00	; 0
   18622:	10 e0       	ldi	r17, 0x00	; 0
   18624:	98 01       	movw	r18, r16
   18626:	42 e0       	ldi	r20, 0x02	; 2
   18628:	50 e0       	ldi	r21, 0x00	; 0
   1862a:	66 e1       	ldi	r22, 0x16	; 22
   1862c:	70 e0       	ldi	r23, 0x00	; 0
   1862e:	ce 01       	movw	r24, r28
   18630:	0e 94 ab 92 	call	0x12556	; 0x12556 <V2B_MSB>
   18634:	f7 01       	movw	r30, r14
   18636:	fd 96       	adiw	r30, 0x3d	; 61
   18638:	00 81       	ld	r16, Z
   1863a:	11 81       	ldd	r17, Z+1	; 0x01
   1863c:	22 81       	ldd	r18, Z+2	; 0x02
   1863e:	33 81       	ldd	r19, Z+3	; 0x03
   18640:	44 e0       	ldi	r20, 0x04	; 4
   18642:	50 e0       	ldi	r21, 0x00	; 0
   18644:	68 e1       	ldi	r22, 0x18	; 24
   18646:	70 e0       	ldi	r23, 0x00	; 0
   18648:	ce 01       	movw	r24, r28
   1864a:	0e 94 ab 92 	call	0x12556	; 0x12556 <V2B_MSB>
   1864e:	f7 01       	movw	r30, r14
   18650:	ef 5b       	subi	r30, 0xBF	; 191
   18652:	ff 4f       	sbci	r31, 0xFF	; 255
   18654:	00 81       	ld	r16, Z
   18656:	11 81       	ldd	r17, Z+1	; 0x01
   18658:	22 81       	ldd	r18, Z+2	; 0x02
   1865a:	33 81       	ldd	r19, Z+3	; 0x03
   1865c:	44 e0       	ldi	r20, 0x04	; 4
   1865e:	50 e0       	ldi	r21, 0x00	; 0
   18660:	6c e1       	ldi	r22, 0x1C	; 28
   18662:	70 e0       	ldi	r23, 0x00	; 0
   18664:	ce 01       	movw	r24, r28
   18666:	0e 94 ab 92 	call	0x12556	; 0x12556 <V2B_MSB>
   1866a:	f7 01       	movw	r30, r14
   1866c:	eb 5b       	subi	r30, 0xBB	; 187
   1866e:	ff 4f       	sbci	r31, 0xFF	; 255
   18670:	00 81       	ld	r16, Z
   18672:	11 81       	ldd	r17, Z+1	; 0x01
   18674:	22 81       	ldd	r18, Z+2	; 0x02
   18676:	33 81       	ldd	r19, Z+3	; 0x03
   18678:	44 e0       	ldi	r20, 0x04	; 4
   1867a:	50 e0       	ldi	r21, 0x00	; 0
   1867c:	60 e2       	ldi	r22, 0x20	; 32
   1867e:	70 e0       	ldi	r23, 0x00	; 0
   18680:	ce 01       	movw	r24, r28
   18682:	0e 94 ab 92 	call	0x12556	; 0x12556 <V2B_MSB>
   18686:	de 01       	movw	r26, r28
   18688:	94 96       	adiw	r26, 0x24	; 36
   1868a:	f7 01       	movw	r30, r14
   1868c:	e7 5b       	subi	r30, 0xB7	; 183
   1868e:	ff 4f       	sbci	r31, 0xFF	; 255
   18690:	86 e0       	ldi	r24, 0x06	; 6
   18692:	01 90       	ld	r0, Z+
   18694:	0d 92       	st	X+, r0
   18696:	8a 95       	dec	r24
   18698:	e1 f7       	brne	.-8      	; 0x18692 <lif_vol2str+0x11e>
   1869a:	cd b7       	in	r28, 0x3d	; 61
   1869c:	de b7       	in	r29, 0x3e	; 62
   1869e:	e6 e0       	ldi	r30, 0x06	; 6
   186a0:	0c 94 f0 e3 	jmp	0x1c7e0	; 0x1c7e0 <__epilogue_restores__+0x18>

000186a4 <lif_str2vol>:
   186a4:	0f 93       	push	r16
   186a6:	1f 93       	push	r17
   186a8:	cf 93       	push	r28
   186aa:	df 93       	push	r29
   186ac:	8c 01       	movw	r16, r24
   186ae:	eb 01       	movw	r28, r22
   186b0:	42 e0       	ldi	r20, 0x02	; 2
   186b2:	50 e0       	ldi	r21, 0x00	; 0
   186b4:	60 e0       	ldi	r22, 0x00	; 0
   186b6:	70 e0       	ldi	r23, 0x00	; 0
   186b8:	0e 94 d4 92 	call	0x125a8	; 0x125a8 <B2V_MSB>
   186bc:	7d a3       	std	Y+37, r23	; 0x25
   186be:	6c a3       	std	Y+36, r22	; 0x24
   186c0:	be 01       	movw	r22, r28
   186c2:	6a 5d       	subi	r22, 0xDA	; 218
   186c4:	7f 4f       	sbci	r23, 0xFF	; 255
   186c6:	46 e0       	ldi	r20, 0x06	; 6
   186c8:	50 e0       	ldi	r21, 0x00	; 0
   186ca:	c8 01       	movw	r24, r16
   186cc:	02 96       	adiw	r24, 0x02	; 2
   186ce:	a1 de       	rcall	.-702    	; 0x18412 <lif_B2S>
   186d0:	44 e0       	ldi	r20, 0x04	; 4
   186d2:	50 e0       	ldi	r21, 0x00	; 0
   186d4:	68 e0       	ldi	r22, 0x08	; 8
   186d6:	70 e0       	ldi	r23, 0x00	; 0
   186d8:	c8 01       	movw	r24, r16
   186da:	0e 94 d4 92 	call	0x125a8	; 0x125a8 <B2V_MSB>
   186de:	6d a7       	std	Y+45, r22	; 0x2d
   186e0:	7e a7       	std	Y+46, r23	; 0x2e
   186e2:	8f a7       	std	Y+47, r24	; 0x2f
   186e4:	98 ab       	std	Y+48, r25	; 0x30
   186e6:	42 e0       	ldi	r20, 0x02	; 2
   186e8:	50 e0       	ldi	r21, 0x00	; 0
   186ea:	6c e0       	ldi	r22, 0x0C	; 12
   186ec:	70 e0       	ldi	r23, 0x00	; 0
   186ee:	c8 01       	movw	r24, r16
   186f0:	0e 94 d4 92 	call	0x125a8	; 0x125a8 <B2V_MSB>
   186f4:	7a ab       	std	Y+50, r23	; 0x32
   186f6:	69 ab       	std	Y+49, r22	; 0x31
   186f8:	42 e0       	ldi	r20, 0x02	; 2
   186fa:	50 e0       	ldi	r21, 0x00	; 0
   186fc:	6e e0       	ldi	r22, 0x0E	; 14
   186fe:	70 e0       	ldi	r23, 0x00	; 0
   18700:	c8 01       	movw	r24, r16
   18702:	0e 94 d4 92 	call	0x125a8	; 0x125a8 <B2V_MSB>
   18706:	7c ab       	std	Y+52, r23	; 0x34
   18708:	6b ab       	std	Y+51, r22	; 0x33
   1870a:	44 e0       	ldi	r20, 0x04	; 4
   1870c:	50 e0       	ldi	r21, 0x00	; 0
   1870e:	60 e1       	ldi	r22, 0x10	; 16
   18710:	70 e0       	ldi	r23, 0x00	; 0
   18712:	c8 01       	movw	r24, r16
   18714:	0e 94 d4 92 	call	0x125a8	; 0x125a8 <B2V_MSB>
   18718:	6d ab       	std	Y+53, r22	; 0x35
   1871a:	7e ab       	std	Y+54, r23	; 0x36
   1871c:	8f ab       	std	Y+55, r24	; 0x37
   1871e:	98 af       	std	Y+56, r25	; 0x38
   18720:	42 e0       	ldi	r20, 0x02	; 2
   18722:	50 e0       	ldi	r21, 0x00	; 0
   18724:	64 e1       	ldi	r22, 0x14	; 20
   18726:	70 e0       	ldi	r23, 0x00	; 0
   18728:	c8 01       	movw	r24, r16
   1872a:	0e 94 d4 92 	call	0x125a8	; 0x125a8 <B2V_MSB>
   1872e:	7a af       	std	Y+58, r23	; 0x3a
   18730:	69 af       	std	Y+57, r22	; 0x39
   18732:	42 e0       	ldi	r20, 0x02	; 2
   18734:	50 e0       	ldi	r21, 0x00	; 0
   18736:	66 e1       	ldi	r22, 0x16	; 22
   18738:	70 e0       	ldi	r23, 0x00	; 0
   1873a:	c8 01       	movw	r24, r16
   1873c:	0e 94 d4 92 	call	0x125a8	; 0x125a8 <B2V_MSB>
   18740:	7c af       	std	Y+60, r23	; 0x3c
   18742:	6b af       	std	Y+59, r22	; 0x3b
   18744:	44 e0       	ldi	r20, 0x04	; 4
   18746:	50 e0       	ldi	r21, 0x00	; 0
   18748:	68 e1       	ldi	r22, 0x18	; 24
   1874a:	70 e0       	ldi	r23, 0x00	; 0
   1874c:	c8 01       	movw	r24, r16
   1874e:	0e 94 d4 92 	call	0x125a8	; 0x125a8 <B2V_MSB>
   18752:	fe 01       	movw	r30, r28
   18754:	fd 96       	adiw	r30, 0x3d	; 61
   18756:	60 83       	st	Z, r22
   18758:	71 83       	std	Z+1, r23	; 0x01
   1875a:	82 83       	std	Z+2, r24	; 0x02
   1875c:	93 83       	std	Z+3, r25	; 0x03
   1875e:	44 e0       	ldi	r20, 0x04	; 4
   18760:	50 e0       	ldi	r21, 0x00	; 0
   18762:	6c e1       	ldi	r22, 0x1C	; 28
   18764:	70 e0       	ldi	r23, 0x00	; 0
   18766:	c8 01       	movw	r24, r16
   18768:	0e 94 d4 92 	call	0x125a8	; 0x125a8 <B2V_MSB>
   1876c:	fe 01       	movw	r30, r28
   1876e:	ef 5b       	subi	r30, 0xBF	; 191
   18770:	ff 4f       	sbci	r31, 0xFF	; 255
   18772:	60 83       	st	Z, r22
   18774:	71 83       	std	Z+1, r23	; 0x01
   18776:	82 83       	std	Z+2, r24	; 0x02
   18778:	93 83       	std	Z+3, r25	; 0x03
   1877a:	44 e0       	ldi	r20, 0x04	; 4
   1877c:	50 e0       	ldi	r21, 0x00	; 0
   1877e:	60 e2       	ldi	r22, 0x20	; 32
   18780:	70 e0       	ldi	r23, 0x00	; 0
   18782:	c8 01       	movw	r24, r16
   18784:	0e 94 d4 92 	call	0x125a8	; 0x125a8 <B2V_MSB>
   18788:	fe 01       	movw	r30, r28
   1878a:	eb 5b       	subi	r30, 0xBB	; 187
   1878c:	ff 4f       	sbci	r31, 0xFF	; 255
   1878e:	60 83       	st	Z, r22
   18790:	71 83       	std	Z+1, r23	; 0x01
   18792:	82 83       	std	Z+2, r24	; 0x02
   18794:	93 83       	std	Z+3, r25	; 0x03
   18796:	de 01       	movw	r26, r28
   18798:	a7 5b       	subi	r26, 0xB7	; 183
   1879a:	bf 4f       	sbci	r27, 0xFF	; 255
   1879c:	f8 01       	movw	r30, r16
   1879e:	b4 96       	adiw	r30, 0x24	; 36
   187a0:	86 e0       	ldi	r24, 0x06	; 6
   187a2:	01 90       	ld	r0, Z+
   187a4:	0d 92       	st	X+, r0
   187a6:	8a 95       	dec	r24
   187a8:	e1 f7       	brne	.-8      	; 0x187a2 <lif_str2vol+0xfe>
   187aa:	df 91       	pop	r29
   187ac:	cf 91       	pop	r28
   187ae:	1f 91       	pop	r17
   187b0:	0f 91       	pop	r16
   187b2:	08 95       	ret

000187b4 <lif_dir2str>:
   187b4:	ef 92       	push	r14
   187b6:	ff 92       	push	r15
   187b8:	0f 93       	push	r16
   187ba:	1f 93       	push	r17
   187bc:	cf 93       	push	r28
   187be:	df 93       	push	r29
   187c0:	ec 01       	movw	r28, r24
   187c2:	7b 01       	movw	r14, r22
   187c4:	bc 01       	movw	r22, r24
   187c6:	61 5b       	subi	r22, 0xB1	; 177
   187c8:	7f 4f       	sbci	r23, 0xFF	; 255
   187ca:	4a e0       	ldi	r20, 0x0A	; 10
   187cc:	50 e0       	ldi	r21, 0x00	; 0
   187ce:	c7 01       	movw	r24, r14
   187d0:	77 de       	rcall	.-786    	; 0x184c0 <lif_S2B>
   187d2:	fe 01       	movw	r30, r28
   187d4:	e6 5a       	subi	r30, 0xA6	; 166
   187d6:	ff 4f       	sbci	r31, 0xFF	; 255
   187d8:	00 81       	ld	r16, Z
   187da:	11 81       	ldd	r17, Z+1	; 0x01
   187dc:	20 e0       	ldi	r18, 0x00	; 0
   187de:	30 e0       	ldi	r19, 0x00	; 0
   187e0:	42 e0       	ldi	r20, 0x02	; 2
   187e2:	50 e0       	ldi	r21, 0x00	; 0
   187e4:	6a e0       	ldi	r22, 0x0A	; 10
   187e6:	70 e0       	ldi	r23, 0x00	; 0
   187e8:	c7 01       	movw	r24, r14
   187ea:	0e 94 ab 92 	call	0x12556	; 0x12556 <V2B_MSB>
   187ee:	fe 01       	movw	r30, r28
   187f0:	e4 5a       	subi	r30, 0xA4	; 164
   187f2:	ff 4f       	sbci	r31, 0xFF	; 255
   187f4:	00 81       	ld	r16, Z
   187f6:	11 81       	ldd	r17, Z+1	; 0x01
   187f8:	22 81       	ldd	r18, Z+2	; 0x02
   187fa:	33 81       	ldd	r19, Z+3	; 0x03
   187fc:	44 e0       	ldi	r20, 0x04	; 4
   187fe:	50 e0       	ldi	r21, 0x00	; 0
   18800:	6c e0       	ldi	r22, 0x0C	; 12
   18802:	70 e0       	ldi	r23, 0x00	; 0
   18804:	c7 01       	movw	r24, r14
   18806:	0e 94 ab 92 	call	0x12556	; 0x12556 <V2B_MSB>
   1880a:	fe 01       	movw	r30, r28
   1880c:	e0 5a       	subi	r30, 0xA0	; 160
   1880e:	ff 4f       	sbci	r31, 0xFF	; 255
   18810:	00 81       	ld	r16, Z
   18812:	11 81       	ldd	r17, Z+1	; 0x01
   18814:	22 81       	ldd	r18, Z+2	; 0x02
   18816:	33 81       	ldd	r19, Z+3	; 0x03
   18818:	44 e0       	ldi	r20, 0x04	; 4
   1881a:	50 e0       	ldi	r21, 0x00	; 0
   1881c:	60 e1       	ldi	r22, 0x10	; 16
   1881e:	70 e0       	ldi	r23, 0x00	; 0
   18820:	c7 01       	movw	r24, r14
   18822:	0e 94 ab 92 	call	0x12556	; 0x12556 <V2B_MSB>
   18826:	d7 01       	movw	r26, r14
   18828:	54 96       	adiw	r26, 0x14	; 20
   1882a:	fe 01       	movw	r30, r28
   1882c:	ec 59       	subi	r30, 0x9C	; 156
   1882e:	ff 4f       	sbci	r31, 0xFF	; 255
   18830:	86 e0       	ldi	r24, 0x06	; 6
   18832:	01 90       	ld	r0, Z+
   18834:	0d 92       	st	X+, r0
   18836:	8a 95       	dec	r24
   18838:	e1 f7       	brne	.-8      	; 0x18832 <lif_dir2str+0x7e>
   1883a:	fe 01       	movw	r30, r28
   1883c:	e6 59       	subi	r30, 0x96	; 150
   1883e:	ff 4f       	sbci	r31, 0xFF	; 255
   18840:	00 81       	ld	r16, Z
   18842:	11 81       	ldd	r17, Z+1	; 0x01
   18844:	20 e0       	ldi	r18, 0x00	; 0
   18846:	30 e0       	ldi	r19, 0x00	; 0
   18848:	42 e0       	ldi	r20, 0x02	; 2
   1884a:	50 e0       	ldi	r21, 0x00	; 0
   1884c:	6a e1       	ldi	r22, 0x1A	; 26
   1884e:	70 e0       	ldi	r23, 0x00	; 0
   18850:	c7 01       	movw	r24, r14
   18852:	0e 94 ab 92 	call	0x12556	; 0x12556 <V2B_MSB>
   18856:	fe 01       	movw	r30, r28
   18858:	e4 59       	subi	r30, 0x94	; 148
   1885a:	ff 4f       	sbci	r31, 0xFF	; 255
   1885c:	00 81       	ld	r16, Z
   1885e:	11 81       	ldd	r17, Z+1	; 0x01
   18860:	20 e0       	ldi	r18, 0x00	; 0
   18862:	30 e0       	ldi	r19, 0x00	; 0
   18864:	42 e0       	ldi	r20, 0x02	; 2
   18866:	50 e0       	ldi	r21, 0x00	; 0
   18868:	6c e1       	ldi	r22, 0x1C	; 28
   1886a:	70 e0       	ldi	r23, 0x00	; 0
   1886c:	c7 01       	movw	r24, r14
   1886e:	0e 94 bf 92 	call	0x1257e	; 0x1257e <V2B_LSB>
   18872:	c2 59       	subi	r28, 0x92	; 146
   18874:	df 4f       	sbci	r29, 0xFF	; 255
   18876:	08 81       	ld	r16, Y
   18878:	19 81       	ldd	r17, Y+1	; 0x01
   1887a:	20 e0       	ldi	r18, 0x00	; 0
   1887c:	30 e0       	ldi	r19, 0x00	; 0
   1887e:	42 e0       	ldi	r20, 0x02	; 2
   18880:	50 e0       	ldi	r21, 0x00	; 0
   18882:	6e e1       	ldi	r22, 0x1E	; 30
   18884:	70 e0       	ldi	r23, 0x00	; 0
   18886:	c7 01       	movw	r24, r14
   18888:	0e 94 bf 92 	call	0x1257e	; 0x1257e <V2B_LSB>
   1888c:	cd b7       	in	r28, 0x3d	; 61
   1888e:	de b7       	in	r29, 0x3e	; 62
   18890:	e6 e0       	ldi	r30, 0x06	; 6
   18892:	0c 94 f0 e3 	jmp	0x1c7e0	; 0x1c7e0 <__epilogue_restores__+0x18>

00018896 <lif_str2dir>:
   18896:	0f 93       	push	r16
   18898:	1f 93       	push	r17
   1889a:	cf 93       	push	r28
   1889c:	df 93       	push	r29
   1889e:	8c 01       	movw	r16, r24
   188a0:	eb 01       	movw	r28, r22
   188a2:	61 5b       	subi	r22, 0xB1	; 177
   188a4:	7f 4f       	sbci	r23, 0xFF	; 255
   188a6:	4a e0       	ldi	r20, 0x0A	; 10
   188a8:	50 e0       	ldi	r21, 0x00	; 0
   188aa:	b3 dd       	rcall	.-1178   	; 0x18412 <lif_B2S>
   188ac:	42 e0       	ldi	r20, 0x02	; 2
   188ae:	50 e0       	ldi	r21, 0x00	; 0
   188b0:	6a e0       	ldi	r22, 0x0A	; 10
   188b2:	70 e0       	ldi	r23, 0x00	; 0
   188b4:	c8 01       	movw	r24, r16
   188b6:	0e 94 d4 92 	call	0x125a8	; 0x125a8 <B2V_MSB>
   188ba:	fe 01       	movw	r30, r28
   188bc:	e6 5a       	subi	r30, 0xA6	; 166
   188be:	ff 4f       	sbci	r31, 0xFF	; 255
   188c0:	71 83       	std	Z+1, r23	; 0x01
   188c2:	60 83       	st	Z, r22
   188c4:	44 e0       	ldi	r20, 0x04	; 4
   188c6:	50 e0       	ldi	r21, 0x00	; 0
   188c8:	6c e0       	ldi	r22, 0x0C	; 12
   188ca:	70 e0       	ldi	r23, 0x00	; 0
   188cc:	c8 01       	movw	r24, r16
   188ce:	0e 94 d4 92 	call	0x125a8	; 0x125a8 <B2V_MSB>
   188d2:	fe 01       	movw	r30, r28
   188d4:	e4 5a       	subi	r30, 0xA4	; 164
   188d6:	ff 4f       	sbci	r31, 0xFF	; 255
   188d8:	60 83       	st	Z, r22
   188da:	71 83       	std	Z+1, r23	; 0x01
   188dc:	82 83       	std	Z+2, r24	; 0x02
   188de:	93 83       	std	Z+3, r25	; 0x03
   188e0:	44 e0       	ldi	r20, 0x04	; 4
   188e2:	50 e0       	ldi	r21, 0x00	; 0
   188e4:	60 e1       	ldi	r22, 0x10	; 16
   188e6:	70 e0       	ldi	r23, 0x00	; 0
   188e8:	c8 01       	movw	r24, r16
   188ea:	0e 94 d4 92 	call	0x125a8	; 0x125a8 <B2V_MSB>
   188ee:	fe 01       	movw	r30, r28
   188f0:	e0 5a       	subi	r30, 0xA0	; 160
   188f2:	ff 4f       	sbci	r31, 0xFF	; 255
   188f4:	60 83       	st	Z, r22
   188f6:	71 83       	std	Z+1, r23	; 0x01
   188f8:	82 83       	std	Z+2, r24	; 0x02
   188fa:	93 83       	std	Z+3, r25	; 0x03
   188fc:	de 01       	movw	r26, r28
   188fe:	ac 59       	subi	r26, 0x9C	; 156
   18900:	bf 4f       	sbci	r27, 0xFF	; 255
   18902:	f8 01       	movw	r30, r16
   18904:	74 96       	adiw	r30, 0x14	; 20
   18906:	86 e0       	ldi	r24, 0x06	; 6
   18908:	01 90       	ld	r0, Z+
   1890a:	0d 92       	st	X+, r0
   1890c:	8a 95       	dec	r24
   1890e:	e1 f7       	brne	.-8      	; 0x18908 <lif_str2dir+0x72>
   18910:	42 e0       	ldi	r20, 0x02	; 2
   18912:	50 e0       	ldi	r21, 0x00	; 0
   18914:	6a e1       	ldi	r22, 0x1A	; 26
   18916:	70 e0       	ldi	r23, 0x00	; 0
   18918:	c8 01       	movw	r24, r16
   1891a:	0e 94 d4 92 	call	0x125a8	; 0x125a8 <B2V_MSB>
   1891e:	fe 01       	movw	r30, r28
   18920:	e6 59       	subi	r30, 0x96	; 150
   18922:	ff 4f       	sbci	r31, 0xFF	; 255
   18924:	71 83       	std	Z+1, r23	; 0x01
   18926:	60 83       	st	Z, r22
   18928:	42 e0       	ldi	r20, 0x02	; 2
   1892a:	50 e0       	ldi	r21, 0x00	; 0
   1892c:	6c e1       	ldi	r22, 0x1C	; 28
   1892e:	70 e0       	ldi	r23, 0x00	; 0
   18930:	c8 01       	movw	r24, r16
   18932:	0e 94 f3 92 	call	0x125e6	; 0x125e6 <B2V_LSB>
   18936:	fe 01       	movw	r30, r28
   18938:	e4 59       	subi	r30, 0x94	; 148
   1893a:	ff 4f       	sbci	r31, 0xFF	; 255
   1893c:	71 83       	std	Z+1, r23	; 0x01
   1893e:	60 83       	st	Z, r22
   18940:	42 e0       	ldi	r20, 0x02	; 2
   18942:	50 e0       	ldi	r21, 0x00	; 0
   18944:	6e e1       	ldi	r22, 0x1E	; 30
   18946:	70 e0       	ldi	r23, 0x00	; 0
   18948:	c8 01       	movw	r24, r16
   1894a:	0e 94 f3 92 	call	0x125e6	; 0x125e6 <B2V_LSB>
   1894e:	c2 59       	subi	r28, 0x92	; 146
   18950:	df 4f       	sbci	r29, 0xFF	; 255
   18952:	79 83       	std	Y+1, r23	; 0x01
   18954:	68 83       	st	Y, r22
   18956:	df 91       	pop	r29
   18958:	cf 91       	pop	r28
   1895a:	1f 91       	pop	r17
   1895c:	0f 91       	pop	r16
   1895e:	08 95       	ret

00018960 <lif_BIN2BCD>:
   18960:	6a e0       	ldi	r22, 0x0A	; 10
   18962:	0e 94 13 e3 	call	0x1c626	; 0x1c626 <__udivmodqi4>
   18966:	82 95       	swap	r24
   18968:	80 7f       	andi	r24, 0xF0	; 240
   1896a:	89 2b       	or	r24, r25
   1896c:	08 95       	ret

0001896e <lif_BCD2BIN>:
   1896e:	28 2f       	mov	r18, r24
   18970:	22 95       	swap	r18
   18972:	2f 70       	andi	r18, 0x0F	; 15
   18974:	8f 70       	andi	r24, 0x0F	; 15
   18976:	90 e0       	ldi	r25, 0x00	; 0
   18978:	3a e0       	ldi	r19, 0x0A	; 10
   1897a:	23 9f       	mul	r18, r19
   1897c:	80 0d       	add	r24, r0
   1897e:	91 1d       	adc	r25, r1
   18980:	11 24       	eor	r1, r1
   18982:	08 95       	ret

00018984 <lif_time2lifbcd>:
   18984:	aa e1       	ldi	r26, 0x1A	; 26
   18986:	b0 e0       	ldi	r27, 0x00	; 0
   18988:	e8 ec       	ldi	r30, 0xC8	; 200
   1898a:	f4 ec       	ldi	r31, 0xC4	; 196
   1898c:	0c 94 d6 e3 	jmp	0x1c7ac	; 0x1c7ac <__prologue_saves__+0x1c>
   18990:	8b 01       	movw	r16, r22
   18992:	9c 01       	movw	r18, r24
   18994:	6f 8b       	std	Y+23, r22	; 0x17
   18996:	78 8f       	std	Y+24, r23	; 0x18
   18998:	89 8f       	std	Y+25, r24	; 0x19
   1899a:	9a 8f       	std	Y+26, r25	; 0x1a
   1899c:	67 2b       	or	r22, r23
   1899e:	68 2b       	or	r22, r24
   189a0:	69 2b       	or	r22, r25
   189a2:	41 f4       	brne	.+16     	; 0x189b4 <lif_time2lifbcd+0x30>
   189a4:	fa 01       	movw	r30, r20
   189a6:	ca 01       	movw	r24, r20
   189a8:	06 96       	adiw	r24, 0x06	; 6
   189aa:	11 92       	st	Z+, r1
   189ac:	e8 17       	cp	r30, r24
   189ae:	f9 07       	cpc	r31, r25
   189b0:	e1 f7       	brne	.-8      	; 0x189aa <lif_time2lifbcd+0x26>
   189b2:	26 c0       	rjmp	.+76     	; 0x18a00 <lif_time2lifbcd+0x7c>
   189b4:	8a 01       	movw	r16, r20
   189b6:	be 01       	movw	r22, r28
   189b8:	6f 5f       	subi	r22, 0xFF	; 255
   189ba:	7f 4f       	sbci	r23, 0xFF	; 255
   189bc:	ce 01       	movw	r24, r28
   189be:	47 96       	adiw	r24, 0x17	; 23
   189c0:	0e 94 82 38 	call	0x7104	; 0x7104 <gmtime_r>
   189c4:	8b 85       	ldd	r24, Y+11	; 0x0b
   189c6:	9c 85       	ldd	r25, Y+12	; 0x0c
   189c8:	64 e6       	ldi	r22, 0x64	; 100
   189ca:	70 e0       	ldi	r23, 0x00	; 0
   189cc:	0e 94 33 e3 	call	0x1c666	; 0x1c666 <__divmodhi4>
   189d0:	c7 df       	rcall	.-114    	; 0x18960 <lif_BIN2BCD>
   189d2:	f8 01       	movw	r30, r16
   189d4:	80 83       	st	Z, r24
   189d6:	89 85       	ldd	r24, Y+9	; 0x09
   189d8:	8f 5f       	subi	r24, 0xFF	; 255
   189da:	c2 df       	rcall	.-124    	; 0x18960 <lif_BIN2BCD>
   189dc:	f8 01       	movw	r30, r16
   189de:	81 83       	std	Z+1, r24	; 0x01
   189e0:	8f 81       	ldd	r24, Y+7	; 0x07
   189e2:	be df       	rcall	.-132    	; 0x18960 <lif_BIN2BCD>
   189e4:	f8 01       	movw	r30, r16
   189e6:	82 83       	std	Z+2, r24	; 0x02
   189e8:	8d 81       	ldd	r24, Y+5	; 0x05
   189ea:	ba df       	rcall	.-140    	; 0x18960 <lif_BIN2BCD>
   189ec:	f8 01       	movw	r30, r16
   189ee:	83 83       	std	Z+3, r24	; 0x03
   189f0:	8b 81       	ldd	r24, Y+3	; 0x03
   189f2:	b6 df       	rcall	.-148    	; 0x18960 <lif_BIN2BCD>
   189f4:	f8 01       	movw	r30, r16
   189f6:	84 83       	std	Z+4, r24	; 0x04
   189f8:	89 81       	ldd	r24, Y+1	; 0x01
   189fa:	b2 df       	rcall	.-156    	; 0x18960 <lif_BIN2BCD>
   189fc:	f8 01       	movw	r30, r16
   189fe:	85 83       	std	Z+5, r24	; 0x05
   18a00:	6a 96       	adiw	r28, 0x1a	; 26
   18a02:	e4 e0       	ldi	r30, 0x04	; 4
   18a04:	0c 94 f2 e3 	jmp	0x1c7e4	; 0x1c7e4 <__epilogue_restores__+0x1c>

00018a08 <lif_lifbcd2time>:
   18a08:	a6 e1       	ldi	r26, 0x16	; 22
   18a0a:	b0 e0       	ldi	r27, 0x00	; 0
   18a0c:	ea e0       	ldi	r30, 0x0A	; 10
   18a0e:	f5 ec       	ldi	r31, 0xC5	; 197
   18a10:	0c 94 d0 e3 	jmp	0x1c7a0	; 0x1c7a0 <__prologue_saves__+0x10>
   18a14:	8c 01       	movw	r16, r24
   18a16:	7c 01       	movw	r14, r24
   18a18:	5c 01       	movw	r10, r24
   18a1a:	26 e0       	ldi	r18, 0x06	; 6
   18a1c:	a2 0e       	add	r10, r18
   18a1e:	b1 1c       	adc	r11, r1
   18a20:	cc 24       	eor	r12, r12
   18a22:	c3 94       	inc	r12
   18a24:	d1 2c       	mov	r13, r1
   18a26:	f7 01       	movw	r30, r14
   18a28:	81 91       	ld	r24, Z+
   18a2a:	7f 01       	movw	r14, r30
   18a2c:	a0 df       	rcall	.-192    	; 0x1896e <lif_BCD2BIN>
   18a2e:	89 2b       	or	r24, r25
   18a30:	11 f0       	breq	.+4      	; 0x18a36 <lif_lifbcd2time+0x2e>
   18a32:	c1 2c       	mov	r12, r1
   18a34:	d1 2c       	mov	r13, r1
   18a36:	ea 14       	cp	r14, r10
   18a38:	fb 04       	cpc	r15, r11
   18a3a:	a9 f7       	brne	.-22     	; 0x18a26 <lif_lifbcd2time+0x1e>
   18a3c:	c1 14       	cp	r12, r1
   18a3e:	d1 04       	cpc	r13, r1
   18a40:	61 f5       	brne	.+88     	; 0x18a9a <lif_lifbcd2time+0x92>
   18a42:	f8 01       	movw	r30, r16
   18a44:	80 81       	ld	r24, Z
   18a46:	93 df       	rcall	.-218    	; 0x1896e <lif_BCD2BIN>
   18a48:	7c 01       	movw	r14, r24
   18a4a:	f8 01       	movw	r30, r16
   18a4c:	81 81       	ldd	r24, Z+1	; 0x01
   18a4e:	8f df       	rcall	.-226    	; 0x1896e <lif_BCD2BIN>
   18a50:	01 97       	sbiw	r24, 0x01	; 1
   18a52:	f6 e4       	ldi	r31, 0x46	; 70
   18a54:	ef 16       	cp	r14, r31
   18a56:	f1 04       	cpc	r15, r1
   18a58:	1c f4       	brge	.+6      	; 0x18a60 <lif_lifbcd2time+0x58>
   18a5a:	24 e6       	ldi	r18, 0x64	; 100
   18a5c:	e2 0e       	add	r14, r18
   18a5e:	f1 1c       	adc	r15, r1
   18a60:	fc 86       	std	Y+12, r15	; 0x0c
   18a62:	eb 86       	std	Y+11, r14	; 0x0b
   18a64:	9a 87       	std	Y+10, r25	; 0x0a
   18a66:	89 87       	std	Y+9, r24	; 0x09
   18a68:	f8 01       	movw	r30, r16
   18a6a:	82 81       	ldd	r24, Z+2	; 0x02
   18a6c:	80 df       	rcall	.-256    	; 0x1896e <lif_BCD2BIN>
   18a6e:	98 87       	std	Y+8, r25	; 0x08
   18a70:	8f 83       	std	Y+7, r24	; 0x07
   18a72:	f8 01       	movw	r30, r16
   18a74:	83 81       	ldd	r24, Z+3	; 0x03
   18a76:	7b df       	rcall	.-266    	; 0x1896e <lif_BCD2BIN>
   18a78:	9e 83       	std	Y+6, r25	; 0x06
   18a7a:	8d 83       	std	Y+5, r24	; 0x05
   18a7c:	f8 01       	movw	r30, r16
   18a7e:	84 81       	ldd	r24, Z+4	; 0x04
   18a80:	76 df       	rcall	.-276    	; 0x1896e <lif_BCD2BIN>
   18a82:	9c 83       	std	Y+4, r25	; 0x04
   18a84:	8b 83       	std	Y+3, r24	; 0x03
   18a86:	f8 01       	movw	r30, r16
   18a88:	85 81       	ldd	r24, Z+5	; 0x05
   18a8a:	71 df       	rcall	.-286    	; 0x1896e <lif_BCD2BIN>
   18a8c:	9a 83       	std	Y+2, r25	; 0x02
   18a8e:	89 83       	std	Y+1, r24	; 0x01
   18a90:	ce 01       	movw	r24, r28
   18a92:	01 96       	adiw	r24, 0x01	; 1
   18a94:	0e 94 56 3b 	call	0x76ac	; 0x76ac <timegm>
   18a98:	03 c0       	rjmp	.+6      	; 0x18aa0 <lif_lifbcd2time+0x98>
   18a9a:	60 e0       	ldi	r22, 0x00	; 0
   18a9c:	70 e0       	ldi	r23, 0x00	; 0
   18a9e:	cb 01       	movw	r24, r22
   18aa0:	66 96       	adiw	r28, 0x16	; 22
   18aa2:	ea e0       	ldi	r30, 0x0A	; 10
   18aa4:	0c 94 ec e3 	jmp	0x1c7d8	; 0x1c7d8 <__epilogue_restores__+0x10>

00018aa8 <lif_ctime_gmt>:
   18aa8:	a6 e1       	ldi	r26, 0x16	; 22
   18aaa:	b0 e0       	ldi	r27, 0x00	; 0
   18aac:	ea e5       	ldi	r30, 0x5A	; 90
   18aae:	f5 ec       	ldi	r31, 0xC5	; 197
   18ab0:	0c 94 d6 e3 	jmp	0x1c7ac	; 0x1c7ac <__prologue_saves__+0x1c>
   18ab4:	20 e2       	ldi	r18, 0x20	; 32
   18ab6:	e7 e6       	ldi	r30, 0x67	; 103
   18ab8:	f9 e1       	ldi	r31, 0x19	; 25
   18aba:	df 01       	movw	r26, r30
   18abc:	1d 92       	st	X+, r1
   18abe:	2a 95       	dec	r18
   18ac0:	e9 f7       	brne	.-6      	; 0x18abc <lif_ctime_gmt+0x14>
   18ac2:	be 01       	movw	r22, r28
   18ac4:	6f 5f       	subi	r22, 0xFF	; 255
   18ac6:	7f 4f       	sbci	r23, 0xFF	; 255
   18ac8:	0e 94 82 38 	call	0x7104	; 0x7104 <gmtime_r>
   18acc:	67 e6       	ldi	r22, 0x67	; 103
   18ace:	79 e1       	ldi	r23, 0x19	; 25
   18ad0:	0e 94 b2 3d 	call	0x7b64	; 0x7b64 <asctime_r>
   18ad4:	8c 01       	movw	r16, r24
   18ad6:	0e 94 13 33 	call	0x6626	; 0x6626 <trim_tail>
   18ada:	c8 01       	movw	r24, r16
   18adc:	66 96       	adiw	r28, 0x16	; 22
   18ade:	e4 e0       	ldi	r30, 0x04	; 4
   18ae0:	0c 94 f2 e3 	jmp	0x1c7e4	; 0x1c7e4 <__epilogue_restores__+0x1c>

00018ae4 <lif_lifbcd2timestr>:
   18ae4:	a4 e0       	ldi	r26, 0x04	; 4
   18ae6:	b0 e0       	ldi	r27, 0x00	; 0
   18ae8:	e8 e7       	ldi	r30, 0x78	; 120
   18aea:	f5 ec       	ldi	r31, 0xC5	; 197
   18aec:	0c 94 d8 e3 	jmp	0x1c7b0	; 0x1c7b0 <__prologue_saves__+0x20>
   18af0:	20 e2       	ldi	r18, 0x20	; 32
   18af2:	e7 e4       	ldi	r30, 0x47	; 71
   18af4:	f9 e1       	ldi	r31, 0x19	; 25
   18af6:	df 01       	movw	r26, r30
   18af8:	1d 92       	st	X+, r1
   18afa:	2a 95       	dec	r18
   18afc:	e9 f7       	brne	.-6      	; 0x18af8 <lif_lifbcd2timestr+0x14>
   18afe:	84 df       	rcall	.-248    	; 0x18a08 <lif_lifbcd2time>
   18b00:	69 83       	std	Y+1, r22	; 0x01
   18b02:	7a 83       	std	Y+2, r23	; 0x02
   18b04:	8b 83       	std	Y+3, r24	; 0x03
   18b06:	9c 83       	std	Y+4, r25	; 0x04
   18b08:	67 2b       	or	r22, r23
   18b0a:	68 2b       	or	r22, r24
   18b0c:	69 2b       	or	r22, r25
   18b0e:	29 f0       	breq	.+10     	; 0x18b1a <lif_lifbcd2timestr+0x36>
   18b10:	ce 01       	movw	r24, r28
   18b12:	01 96       	adiw	r24, 0x01	; 1
   18b14:	c9 df       	rcall	.-110    	; 0x18aa8 <lif_ctime_gmt>
   18b16:	bc 01       	movw	r22, r24
   18b18:	02 c0       	rjmp	.+4      	; 0x18b1e <lif_lifbcd2timestr+0x3a>
   18b1a:	67 e3       	ldi	r22, 0x37	; 55
   18b1c:	75 e1       	ldi	r23, 0x15	; 21
   18b1e:	87 e4       	ldi	r24, 0x47	; 71
   18b20:	99 e1       	ldi	r25, 0x19	; 25
   18b22:	0e 94 35 32 	call	0x646a	; 0x646a <strcpy>
   18b26:	87 e4       	ldi	r24, 0x47	; 71
   18b28:	99 e1       	ldi	r25, 0x19	; 25
   18b2a:	24 96       	adiw	r28, 0x04	; 4
   18b2c:	e2 e0       	ldi	r30, 0x02	; 2
   18b2e:	0c 94 f4 e3 	jmp	0x1c7e8	; 0x1c7e8 <__epilogue_restores__+0x20>

00018b32 <lif_image_clear>:
   18b32:	20 e7       	ldi	r18, 0x70	; 112
   18b34:	fc 01       	movw	r30, r24
   18b36:	11 92       	st	Z+, r1
   18b38:	2a 95       	dec	r18
   18b3a:	e9 f7       	brne	.-6      	; 0x18b36 <lif_image_clear+0x4>
   18b3c:	08 95       	ret

00018b3e <lif_dir_clear>:
   18b3e:	81 5b       	subi	r24, 0xB1	; 177
   18b40:	9f 4f       	sbci	r25, 0xFF	; 255
   18b42:	21 e2       	ldi	r18, 0x21	; 33
   18b44:	fc 01       	movw	r30, r24
   18b46:	11 92       	st	Z+, r1
   18b48:	2a 95       	dec	r18
   18b4a:	e9 f7       	brne	.-6      	; 0x18b46 <lif_dir_clear+0x8>
   18b4c:	08 95       	ret

00018b4e <lif_vol_clear>:
   18b4e:	84 96       	adiw	r24, 0x24	; 36
   18b50:	2b e2       	ldi	r18, 0x2B	; 43
   18b52:	fc 01       	movw	r30, r24
   18b54:	11 92       	st	Z+, r1
   18b56:	2a 95       	dec	r18
   18b58:	e9 f7       	brne	.-6      	; 0x18b54 <lif_vol_clear+0x6>
   18b5a:	08 95       	ret

00018b5c <lif_dump_vol>:
   18b5c:	cf 93       	push	r28
   18b5e:	df 93       	push	r29
   18b60:	ad b7       	in	r26, 0x3d	; 61
   18b62:	be b7       	in	r27, 0x3e	; 62
   18b64:	17 97       	sbiw	r26, 0x07	; 7
   18b66:	0f b6       	in	r0, 0x3f	; 63
   18b68:	f8 94       	cli
   18b6a:	be bf       	out	0x3e, r27	; 62
   18b6c:	0f be       	out	0x3f, r0	; 63
   18b6e:	ad bf       	out	0x3d, r26	; 61
   18b70:	ec 01       	movw	r28, r24
   18b72:	ed b7       	in	r30, 0x3d	; 61
   18b74:	fe b7       	in	r31, 0x3e	; 62
   18b76:	75 83       	std	Z+5, r23	; 0x05
   18b78:	64 83       	std	Z+4, r22	; 0x04
   18b7a:	8e e1       	ldi	r24, 0x1E	; 30
   18b7c:	91 e4       	ldi	r25, 0x41	; 65
   18b7e:	a0 e0       	ldi	r26, 0x00	; 0
   18b80:	81 83       	std	Z+1, r24	; 0x01
   18b82:	92 83       	std	Z+2, r25	; 0x02
   18b84:	a3 83       	std	Z+3, r26	; 0x03
   18b86:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   18b8a:	88 81       	ld	r24, Y
   18b8c:	99 81       	ldd	r25, Y+1	; 0x01
   18b8e:	ed b7       	in	r30, 0x3d	; 61
   18b90:	fe b7       	in	r31, 0x3e	; 62
   18b92:	95 83       	std	Z+5, r25	; 0x05
   18b94:	84 83       	std	Z+4, r24	; 0x04
   18b96:	84 e0       	ldi	r24, 0x04	; 4
   18b98:	91 e4       	ldi	r25, 0x41	; 65
   18b9a:	a0 e0       	ldi	r26, 0x00	; 0
   18b9c:	81 83       	std	Z+1, r24	; 0x01
   18b9e:	92 83       	std	Z+2, r25	; 0x02
   18ba0:	a3 83       	std	Z+3, r26	; 0x03
   18ba2:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   18ba6:	8c 81       	ldd	r24, Y+4	; 0x04
   18ba8:	9d 81       	ldd	r25, Y+5	; 0x05
   18baa:	ae 81       	ldd	r26, Y+6	; 0x06
   18bac:	bf 81       	ldd	r27, Y+7	; 0x07
   18bae:	ed b7       	in	r30, 0x3d	; 61
   18bb0:	fe b7       	in	r31, 0x3e	; 62
   18bb2:	84 83       	std	Z+4, r24	; 0x04
   18bb4:	95 83       	std	Z+5, r25	; 0x05
   18bb6:	a6 83       	std	Z+6, r26	; 0x06
   18bb8:	b7 83       	std	Z+7, r27	; 0x07
   18bba:	87 ee       	ldi	r24, 0xE7	; 231
   18bbc:	90 e4       	ldi	r25, 0x40	; 64
   18bbe:	a0 e0       	ldi	r26, 0x00	; 0
   18bc0:	81 83       	std	Z+1, r24	; 0x01
   18bc2:	92 83       	std	Z+2, r25	; 0x02
   18bc4:	a3 83       	std	Z+3, r26	; 0x03
   18bc6:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   18bca:	88 85       	ldd	r24, Y+8	; 0x08
   18bcc:	99 85       	ldd	r25, Y+9	; 0x09
   18bce:	aa 85       	ldd	r26, Y+10	; 0x0a
   18bd0:	bb 85       	ldd	r27, Y+11	; 0x0b
   18bd2:	ed b7       	in	r30, 0x3d	; 61
   18bd4:	fe b7       	in	r31, 0x3e	; 62
   18bd6:	84 83       	std	Z+4, r24	; 0x04
   18bd8:	95 83       	std	Z+5, r25	; 0x05
   18bda:	a6 83       	std	Z+6, r26	; 0x06
   18bdc:	b7 83       	std	Z+7, r27	; 0x07
   18bde:	8a ec       	ldi	r24, 0xCA	; 202
   18be0:	90 e4       	ldi	r25, 0x40	; 64
   18be2:	a0 e0       	ldi	r26, 0x00	; 0
   18be4:	81 83       	std	Z+1, r24	; 0x01
   18be6:	92 83       	std	Z+2, r25	; 0x02
   18be8:	a3 83       	std	Z+3, r26	; 0x03
   18bea:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   18bee:	8c 85       	ldd	r24, Y+12	; 0x0c
   18bf0:	9d 85       	ldd	r25, Y+13	; 0x0d
   18bf2:	ae 85       	ldd	r26, Y+14	; 0x0e
   18bf4:	bf 85       	ldd	r27, Y+15	; 0x0f
   18bf6:	ed b7       	in	r30, 0x3d	; 61
   18bf8:	fe b7       	in	r31, 0x3e	; 62
   18bfa:	84 83       	std	Z+4, r24	; 0x04
   18bfc:	95 83       	std	Z+5, r25	; 0x05
   18bfe:	a6 83       	std	Z+6, r26	; 0x06
   18c00:	b7 83       	std	Z+7, r27	; 0x07
   18c02:	8d ea       	ldi	r24, 0xAD	; 173
   18c04:	90 e4       	ldi	r25, 0x40	; 64
   18c06:	a0 e0       	ldi	r26, 0x00	; 0
   18c08:	81 83       	std	Z+1, r24	; 0x01
   18c0a:	92 83       	std	Z+2, r25	; 0x02
   18c0c:	a3 83       	std	Z+3, r26	; 0x03
   18c0e:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   18c12:	88 89       	ldd	r24, Y+16	; 0x10
   18c14:	99 89       	ldd	r25, Y+17	; 0x11
   18c16:	aa 89       	ldd	r26, Y+18	; 0x12
   18c18:	bb 89       	ldd	r27, Y+19	; 0x13
   18c1a:	ed b7       	in	r30, 0x3d	; 61
   18c1c:	fe b7       	in	r31, 0x3e	; 62
   18c1e:	84 83       	std	Z+4, r24	; 0x04
   18c20:	95 83       	std	Z+5, r25	; 0x05
   18c22:	a6 83       	std	Z+6, r26	; 0x06
   18c24:	b7 83       	std	Z+7, r27	; 0x07
   18c26:	80 e9       	ldi	r24, 0x90	; 144
   18c28:	90 e4       	ldi	r25, 0x40	; 64
   18c2a:	a0 e0       	ldi	r26, 0x00	; 0
   18c2c:	81 83       	std	Z+1, r24	; 0x01
   18c2e:	92 83       	std	Z+2, r25	; 0x02
   18c30:	a3 83       	std	Z+3, r26	; 0x03
   18c32:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   18c36:	8c 89       	ldd	r24, Y+20	; 0x14
   18c38:	9d 89       	ldd	r25, Y+21	; 0x15
   18c3a:	ae 89       	ldd	r26, Y+22	; 0x16
   18c3c:	bf 89       	ldd	r27, Y+23	; 0x17
   18c3e:	ed b7       	in	r30, 0x3d	; 61
   18c40:	fe b7       	in	r31, 0x3e	; 62
   18c42:	84 83       	std	Z+4, r24	; 0x04
   18c44:	95 83       	std	Z+5, r25	; 0x05
   18c46:	a6 83       	std	Z+6, r26	; 0x06
   18c48:	b7 83       	std	Z+7, r27	; 0x07
   18c4a:	83 e7       	ldi	r24, 0x73	; 115
   18c4c:	90 e4       	ldi	r25, 0x40	; 64
   18c4e:	a0 e0       	ldi	r26, 0x00	; 0
   18c50:	81 83       	std	Z+1, r24	; 0x01
   18c52:	92 83       	std	Z+2, r25	; 0x02
   18c54:	a3 83       	std	Z+3, r26	; 0x03
   18c56:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   18c5a:	88 8d       	ldd	r24, Y+24	; 0x18
   18c5c:	99 8d       	ldd	r25, Y+25	; 0x19
   18c5e:	aa 8d       	ldd	r26, Y+26	; 0x1a
   18c60:	bb 8d       	ldd	r27, Y+27	; 0x1b
   18c62:	ed b7       	in	r30, 0x3d	; 61
   18c64:	fe b7       	in	r31, 0x3e	; 62
   18c66:	84 83       	std	Z+4, r24	; 0x04
   18c68:	95 83       	std	Z+5, r25	; 0x05
   18c6a:	a6 83       	std	Z+6, r26	; 0x06
   18c6c:	b7 83       	std	Z+7, r27	; 0x07
   18c6e:	86 e5       	ldi	r24, 0x56	; 86
   18c70:	90 e4       	ldi	r25, 0x40	; 64
   18c72:	a0 e0       	ldi	r26, 0x00	; 0
   18c74:	81 83       	std	Z+1, r24	; 0x01
   18c76:	92 83       	std	Z+2, r25	; 0x02
   18c78:	a3 83       	std	Z+3, r26	; 0x03
   18c7a:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   18c7e:	8c 8d       	ldd	r24, Y+28	; 0x1c
   18c80:	9d 8d       	ldd	r25, Y+29	; 0x1d
   18c82:	09 2e       	mov	r0, r25
   18c84:	00 0c       	add	r0, r0
   18c86:	aa 0b       	sbc	r26, r26
   18c88:	bb 0b       	sbc	r27, r27
   18c8a:	ed b7       	in	r30, 0x3d	; 61
   18c8c:	fe b7       	in	r31, 0x3e	; 62
   18c8e:	84 83       	std	Z+4, r24	; 0x04
   18c90:	95 83       	std	Z+5, r25	; 0x05
   18c92:	a6 83       	std	Z+6, r26	; 0x06
   18c94:	b7 83       	std	Z+7, r27	; 0x07
   18c96:	89 e3       	ldi	r24, 0x39	; 57
   18c98:	90 e4       	ldi	r25, 0x40	; 64
   18c9a:	a0 e0       	ldi	r26, 0x00	; 0
   18c9c:	81 83       	std	Z+1, r24	; 0x01
   18c9e:	92 83       	std	Z+2, r25	; 0x02
   18ca0:	a3 83       	std	Z+3, r26	; 0x03
   18ca2:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   18ca6:	8e 8d       	ldd	r24, Y+30	; 0x1e
   18ca8:	9f 8d       	ldd	r25, Y+31	; 0x1f
   18caa:	09 2e       	mov	r0, r25
   18cac:	00 0c       	add	r0, r0
   18cae:	aa 0b       	sbc	r26, r26
   18cb0:	bb 0b       	sbc	r27, r27
   18cb2:	ed b7       	in	r30, 0x3d	; 61
   18cb4:	fe b7       	in	r31, 0x3e	; 62
   18cb6:	84 83       	std	Z+4, r24	; 0x04
   18cb8:	95 83       	std	Z+5, r25	; 0x05
   18cba:	a6 83       	std	Z+6, r26	; 0x06
   18cbc:	b7 83       	std	Z+7, r27	; 0x07
   18cbe:	8c e1       	ldi	r24, 0x1C	; 28
   18cc0:	90 e4       	ldi	r25, 0x40	; 64
   18cc2:	a0 e0       	ldi	r26, 0x00	; 0
   18cc4:	81 83       	std	Z+1, r24	; 0x01
   18cc6:	92 83       	std	Z+2, r25	; 0x02
   18cc8:	a3 83       	std	Z+3, r26	; 0x03
   18cca:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   18cce:	ce 01       	movw	r24, r28
   18cd0:	86 96       	adiw	r24, 0x26	; 38
   18cd2:	ed b7       	in	r30, 0x3d	; 61
   18cd4:	fe b7       	in	r31, 0x3e	; 62
   18cd6:	95 83       	std	Z+5, r25	; 0x05
   18cd8:	84 83       	std	Z+4, r24	; 0x04
   18cda:	82 e0       	ldi	r24, 0x02	; 2
   18cdc:	90 e4       	ldi	r25, 0x40	; 64
   18cde:	a0 e0       	ldi	r26, 0x00	; 0
   18ce0:	81 83       	std	Z+1, r24	; 0x01
   18ce2:	92 83       	std	Z+2, r25	; 0x02
   18ce4:	a3 83       	std	Z+3, r26	; 0x03
   18ce6:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   18cea:	8c a1       	ldd	r24, Y+36	; 0x24
   18cec:	9d a1       	ldd	r25, Y+37	; 0x25
   18cee:	ed b7       	in	r30, 0x3d	; 61
   18cf0:	fe b7       	in	r31, 0x3e	; 62
   18cf2:	95 83       	std	Z+5, r25	; 0x05
   18cf4:	84 83       	std	Z+4, r24	; 0x04
   18cf6:	86 ee       	ldi	r24, 0xE6	; 230
   18cf8:	9f e3       	ldi	r25, 0x3F	; 63
   18cfa:	a0 e0       	ldi	r26, 0x00	; 0
   18cfc:	81 83       	std	Z+1, r24	; 0x01
   18cfe:	92 83       	std	Z+2, r25	; 0x02
   18d00:	a3 83       	std	Z+3, r26	; 0x03
   18d02:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   18d06:	8d a5       	ldd	r24, Y+45	; 0x2d
   18d08:	9e a5       	ldd	r25, Y+46	; 0x2e
   18d0a:	af a5       	ldd	r26, Y+47	; 0x2f
   18d0c:	b8 a9       	ldd	r27, Y+48	; 0x30
   18d0e:	ed b7       	in	r30, 0x3d	; 61
   18d10:	fe b7       	in	r31, 0x3e	; 62
   18d12:	84 83       	std	Z+4, r24	; 0x04
   18d14:	95 83       	std	Z+5, r25	; 0x05
   18d16:	a6 83       	std	Z+6, r26	; 0x06
   18d18:	b7 83       	std	Z+7, r27	; 0x07
   18d1a:	89 ec       	ldi	r24, 0xC9	; 201
   18d1c:	9f e3       	ldi	r25, 0x3F	; 63
   18d1e:	a0 e0       	ldi	r26, 0x00	; 0
   18d20:	81 83       	std	Z+1, r24	; 0x01
   18d22:	92 83       	std	Z+2, r25	; 0x02
   18d24:	a3 83       	std	Z+3, r26	; 0x03
   18d26:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   18d2a:	8d a9       	ldd	r24, Y+53	; 0x35
   18d2c:	9e a9       	ldd	r25, Y+54	; 0x36
   18d2e:	af a9       	ldd	r26, Y+55	; 0x37
   18d30:	b8 ad       	ldd	r27, Y+56	; 0x38
   18d32:	ed b7       	in	r30, 0x3d	; 61
   18d34:	fe b7       	in	r31, 0x3e	; 62
   18d36:	84 83       	std	Z+4, r24	; 0x04
   18d38:	95 83       	std	Z+5, r25	; 0x05
   18d3a:	a6 83       	std	Z+6, r26	; 0x06
   18d3c:	b7 83       	std	Z+7, r27	; 0x07
   18d3e:	8c ea       	ldi	r24, 0xAC	; 172
   18d40:	9f e3       	ldi	r25, 0x3F	; 63
   18d42:	a0 e0       	ldi	r26, 0x00	; 0
   18d44:	81 83       	std	Z+1, r24	; 0x01
   18d46:	92 83       	std	Z+2, r25	; 0x02
   18d48:	a3 83       	std	Z+3, r26	; 0x03
   18d4a:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   18d4e:	89 a9       	ldd	r24, Y+49	; 0x31
   18d50:	9a a9       	ldd	r25, Y+50	; 0x32
   18d52:	ed b7       	in	r30, 0x3d	; 61
   18d54:	fe b7       	in	r31, 0x3e	; 62
   18d56:	95 83       	std	Z+5, r25	; 0x05
   18d58:	84 83       	std	Z+4, r24	; 0x04
   18d5a:	80 e9       	ldi	r24, 0x90	; 144
   18d5c:	9f e3       	ldi	r25, 0x3F	; 63
   18d5e:	a0 e0       	ldi	r26, 0x00	; 0
   18d60:	81 83       	std	Z+1, r24	; 0x01
   18d62:	92 83       	std	Z+2, r25	; 0x02
   18d64:	a3 83       	std	Z+3, r26	; 0x03
   18d66:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   18d6a:	89 ad       	ldd	r24, Y+57	; 0x39
   18d6c:	9a ad       	ldd	r25, Y+58	; 0x3a
   18d6e:	ed b7       	in	r30, 0x3d	; 61
   18d70:	fe b7       	in	r31, 0x3e	; 62
   18d72:	95 83       	std	Z+5, r25	; 0x05
   18d74:	84 83       	std	Z+4, r24	; 0x04
   18d76:	84 e7       	ldi	r24, 0x74	; 116
   18d78:	9f e3       	ldi	r25, 0x3F	; 63
   18d7a:	a0 e0       	ldi	r26, 0x00	; 0
   18d7c:	81 83       	std	Z+1, r24	; 0x01
   18d7e:	92 83       	std	Z+2, r25	; 0x02
   18d80:	a3 83       	std	Z+3, r26	; 0x03
   18d82:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   18d86:	ce 01       	movw	r24, r28
   18d88:	87 5b       	subi	r24, 0xB7	; 183
   18d8a:	9f 4f       	sbci	r25, 0xFF	; 255
   18d8c:	ab de       	rcall	.-682    	; 0x18ae4 <lif_lifbcd2timestr>
   18d8e:	ed b7       	in	r30, 0x3d	; 61
   18d90:	fe b7       	in	r31, 0x3e	; 62
   18d92:	95 83       	std	Z+5, r25	; 0x05
   18d94:	84 83       	std	Z+4, r24	; 0x04
   18d96:	8a e5       	ldi	r24, 0x5A	; 90
   18d98:	9f e3       	ldi	r25, 0x3F	; 63
   18d9a:	a0 e0       	ldi	r26, 0x00	; 0
   18d9c:	81 83       	std	Z+1, r24	; 0x01
   18d9e:	92 83       	std	Z+2, r25	; 0x02
   18da0:	a3 83       	std	Z+3, r26	; 0x03
   18da2:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   18da6:	ce 01       	movw	r24, r28
   18da8:	81 5b       	subi	r24, 0xB1	; 177
   18daa:	9f 4f       	sbci	r25, 0xFF	; 255
   18dac:	ed b7       	in	r30, 0x3d	; 61
   18dae:	fe b7       	in	r31, 0x3e	; 62
   18db0:	95 83       	std	Z+5, r25	; 0x05
   18db2:	84 83       	std	Z+4, r24	; 0x04
   18db4:	80 e4       	ldi	r24, 0x40	; 64
   18db6:	9f e3       	ldi	r25, 0x3F	; 63
   18db8:	a0 e0       	ldi	r26, 0x00	; 0
   18dba:	81 83       	std	Z+1, r24	; 0x01
   18dbc:	92 83       	std	Z+2, r25	; 0x02
   18dbe:	a3 83       	std	Z+3, r26	; 0x03
   18dc0:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   18dc4:	fe 01       	movw	r30, r28
   18dc6:	e6 5a       	subi	r30, 0xA6	; 166
   18dc8:	ff 4f       	sbci	r31, 0xFF	; 255
   18dca:	80 81       	ld	r24, Z
   18dcc:	91 81       	ldd	r25, Z+1	; 0x01
   18dce:	ed b7       	in	r30, 0x3d	; 61
   18dd0:	fe b7       	in	r31, 0x3e	; 62
   18dd2:	95 83       	std	Z+5, r25	; 0x05
   18dd4:	84 83       	std	Z+4, r24	; 0x04
   18dd6:	84 e2       	ldi	r24, 0x24	; 36
   18dd8:	9f e3       	ldi	r25, 0x3F	; 63
   18dda:	a0 e0       	ldi	r26, 0x00	; 0
   18ddc:	81 83       	std	Z+1, r24	; 0x01
   18dde:	92 83       	std	Z+2, r25	; 0x02
   18de0:	a3 83       	std	Z+3, r26	; 0x03
   18de2:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   18de6:	fe 01       	movw	r30, r28
   18de8:	e6 59       	subi	r30, 0x96	; 150
   18dea:	ff 4f       	sbci	r31, 0xFF	; 255
   18dec:	80 81       	ld	r24, Z
   18dee:	91 81       	ldd	r25, Z+1	; 0x01
   18df0:	ed b7       	in	r30, 0x3d	; 61
   18df2:	fe b7       	in	r31, 0x3e	; 62
   18df4:	95 83       	std	Z+5, r25	; 0x05
   18df6:	84 83       	std	Z+4, r24	; 0x04
   18df8:	88 e0       	ldi	r24, 0x08	; 8
   18dfa:	9f e3       	ldi	r25, 0x3F	; 63
   18dfc:	a0 e0       	ldi	r26, 0x00	; 0
   18dfe:	81 83       	std	Z+1, r24	; 0x01
   18e00:	92 83       	std	Z+2, r25	; 0x02
   18e02:	a3 83       	std	Z+3, r26	; 0x03
   18e04:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   18e08:	fe 01       	movw	r30, r28
   18e0a:	e4 5a       	subi	r30, 0xA4	; 164
   18e0c:	ff 4f       	sbci	r31, 0xFF	; 255
   18e0e:	80 81       	ld	r24, Z
   18e10:	91 81       	ldd	r25, Z+1	; 0x01
   18e12:	a2 81       	ldd	r26, Z+2	; 0x02
   18e14:	b3 81       	ldd	r27, Z+3	; 0x03
   18e16:	ed b7       	in	r30, 0x3d	; 61
   18e18:	fe b7       	in	r31, 0x3e	; 62
   18e1a:	84 83       	std	Z+4, r24	; 0x04
   18e1c:	95 83       	std	Z+5, r25	; 0x05
   18e1e:	a6 83       	std	Z+6, r26	; 0x06
   18e20:	b7 83       	std	Z+7, r27	; 0x07
   18e22:	8b ee       	ldi	r24, 0xEB	; 235
   18e24:	9e e3       	ldi	r25, 0x3E	; 62
   18e26:	a0 e0       	ldi	r26, 0x00	; 0
   18e28:	81 83       	std	Z+1, r24	; 0x01
   18e2a:	92 83       	std	Z+2, r25	; 0x02
   18e2c:	a3 83       	std	Z+3, r26	; 0x03
   18e2e:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   18e32:	fe 01       	movw	r30, r28
   18e34:	e0 5a       	subi	r30, 0xA0	; 160
   18e36:	ff 4f       	sbci	r31, 0xFF	; 255
   18e38:	80 81       	ld	r24, Z
   18e3a:	91 81       	ldd	r25, Z+1	; 0x01
   18e3c:	a2 81       	ldd	r26, Z+2	; 0x02
   18e3e:	b3 81       	ldd	r27, Z+3	; 0x03
   18e40:	ed b7       	in	r30, 0x3d	; 61
   18e42:	fe b7       	in	r31, 0x3e	; 62
   18e44:	84 83       	std	Z+4, r24	; 0x04
   18e46:	95 83       	std	Z+5, r25	; 0x05
   18e48:	a6 83       	std	Z+6, r26	; 0x06
   18e4a:	b7 83       	std	Z+7, r27	; 0x07
   18e4c:	8e ec       	ldi	r24, 0xCE	; 206
   18e4e:	9e e3       	ldi	r25, 0x3E	; 62
   18e50:	a0 e0       	ldi	r26, 0x00	; 0
   18e52:	81 83       	std	Z+1, r24	; 0x01
   18e54:	92 83       	std	Z+2, r25	; 0x02
   18e56:	a3 83       	std	Z+3, r26	; 0x03
   18e58:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   18e5c:	fe 01       	movw	r30, r28
   18e5e:	e4 59       	subi	r30, 0x94	; 148
   18e60:	ff 4f       	sbci	r31, 0xFF	; 255
   18e62:	80 81       	ld	r24, Z
   18e64:	91 81       	ldd	r25, Z+1	; 0x01
   18e66:	a0 e0       	ldi	r26, 0x00	; 0
   18e68:	b0 e0       	ldi	r27, 0x00	; 0
   18e6a:	ed b7       	in	r30, 0x3d	; 61
   18e6c:	fe b7       	in	r31, 0x3e	; 62
   18e6e:	84 83       	std	Z+4, r24	; 0x04
   18e70:	95 83       	std	Z+5, r25	; 0x05
   18e72:	a6 83       	std	Z+6, r26	; 0x06
   18e74:	b7 83       	std	Z+7, r27	; 0x07
   18e76:	81 eb       	ldi	r24, 0xB1	; 177
   18e78:	9e e3       	ldi	r25, 0x3E	; 62
   18e7a:	a0 e0       	ldi	r26, 0x00	; 0
   18e7c:	81 83       	std	Z+1, r24	; 0x01
   18e7e:	92 83       	std	Z+2, r25	; 0x02
   18e80:	a3 83       	std	Z+3, r26	; 0x03
   18e82:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   18e86:	fe 01       	movw	r30, r28
   18e88:	e2 59       	subi	r30, 0x92	; 146
   18e8a:	ff 4f       	sbci	r31, 0xFF	; 255
   18e8c:	80 81       	ld	r24, Z
   18e8e:	91 81       	ldd	r25, Z+1	; 0x01
   18e90:	ed b7       	in	r30, 0x3d	; 61
   18e92:	fe b7       	in	r31, 0x3e	; 62
   18e94:	95 83       	std	Z+5, r25	; 0x05
   18e96:	84 83       	std	Z+4, r24	; 0x04
   18e98:	85 e9       	ldi	r24, 0x95	; 149
   18e9a:	9e e3       	ldi	r25, 0x3E	; 62
   18e9c:	a0 e0       	ldi	r26, 0x00	; 0
   18e9e:	81 83       	std	Z+1, r24	; 0x01
   18ea0:	92 83       	std	Z+2, r25	; 0x02
   18ea2:	a3 83       	std	Z+3, r26	; 0x03
   18ea4:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   18ea8:	ce 01       	movw	r24, r28
   18eaa:	8c 59       	subi	r24, 0x9C	; 156
   18eac:	9f 4f       	sbci	r25, 0xFF	; 255
   18eae:	1a de       	rcall	.-972    	; 0x18ae4 <lif_lifbcd2timestr>
   18eb0:	ed b7       	in	r30, 0x3d	; 61
   18eb2:	fe b7       	in	r31, 0x3e	; 62
   18eb4:	95 83       	std	Z+5, r25	; 0x05
   18eb6:	84 83       	std	Z+4, r24	; 0x04
   18eb8:	8b e7       	ldi	r24, 0x7B	; 123
   18eba:	9e e3       	ldi	r25, 0x3E	; 62
   18ebc:	a0 e0       	ldi	r26, 0x00	; 0
   18ebe:	81 83       	std	Z+1, r24	; 0x01
   18ec0:	92 83       	std	Z+2, r25	; 0x02
   18ec2:	a3 83       	std	Z+3, r26	; 0x03
   18ec4:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   18ec8:	89 e7       	ldi	r24, 0x79	; 121
   18eca:	9e e3       	ldi	r25, 0x3E	; 62
   18ecc:	a0 e0       	ldi	r26, 0x00	; 0
   18ece:	ed b7       	in	r30, 0x3d	; 61
   18ed0:	fe b7       	in	r31, 0x3e	; 62
   18ed2:	81 83       	std	Z+1, r24	; 0x01
   18ed4:	92 83       	std	Z+2, r25	; 0x02
   18ed6:	a3 83       	std	Z+3, r26	; 0x03
   18ed8:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   18edc:	cd b7       	in	r28, 0x3d	; 61
   18ede:	de b7       	in	r29, 0x3e	; 62
   18ee0:	27 96       	adiw	r28, 0x07	; 7
   18ee2:	e2 e0       	ldi	r30, 0x02	; 2
   18ee4:	0c 94 f4 e3 	jmp	0x1c7e8	; 0x1c7e8 <__epilogue_restores__+0x20>

00018ee8 <lif_check_volume>:
   18ee8:	0f 93       	push	r16
   18eea:	1f 93       	push	r17
   18eec:	cf 93       	push	r28
   18eee:	df 93       	push	r29
   18ef0:	ad b7       	in	r26, 0x3d	; 61
   18ef2:	be b7       	in	r27, 0x3e	; 62
   18ef4:	17 97       	sbiw	r26, 0x07	; 7
   18ef6:	0f b6       	in	r0, 0x3f	; 63
   18ef8:	f8 94       	cli
   18efa:	be bf       	out	0x3e, r27	; 62
   18efc:	0f be       	out	0x3f, r0	; 63
   18efe:	ad bf       	out	0x3d, r26	; 61
   18f00:	ec 01       	movw	r28, r24
   18f02:	86 96       	adiw	r24, 0x26	; 38
   18f04:	c0 da       	rcall	.-2688   	; 0x18486 <lif_checkname>
   18f06:	89 2b       	or	r24, r25
   18f08:	79 f4       	brne	.+30     	; 0x18f28 <lif_check_volume+0x40>
   18f0a:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   18f0e:	80 ff       	sbrs	r24, 0
   18f10:	0e c0       	rjmp	.+28     	; 0x18f2e <lif_check_volume+0x46>
   18f12:	8a e5       	ldi	r24, 0x5A	; 90
   18f14:	9e e3       	ldi	r25, 0x3E	; 62
   18f16:	a0 e0       	ldi	r26, 0x00	; 0
   18f18:	ed b7       	in	r30, 0x3d	; 61
   18f1a:	fe b7       	in	r31, 0x3e	; 62
   18f1c:	81 83       	std	Z+1, r24	; 0x01
   18f1e:	92 83       	std	Z+2, r25	; 0x02
   18f20:	a3 83       	std	Z+3, r26	; 0x03
   18f22:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   18f26:	03 c0       	rjmp	.+6      	; 0x18f2e <lif_check_volume+0x46>
   18f28:	81 e0       	ldi	r24, 0x01	; 1
   18f2a:	90 e0       	ldi	r25, 0x00	; 0
   18f2c:	02 c0       	rjmp	.+4      	; 0x18f32 <lif_check_volume+0x4a>
   18f2e:	80 e0       	ldi	r24, 0x00	; 0
   18f30:	90 e0       	ldi	r25, 0x00	; 0
   18f32:	29 a9       	ldd	r18, Y+49	; 0x31
   18f34:	3a a9       	ldd	r19, Y+50	; 0x32
   18f36:	21 15       	cp	r18, r1
   18f38:	f0 e1       	ldi	r31, 0x10	; 16
   18f3a:	3f 07       	cpc	r19, r31
   18f3c:	91 f0       	breq	.+36     	; 0x18f62 <lif_check_volume+0x7a>
   18f3e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   18f42:	80 ff       	sbrs	r24, 0
   18f44:	0c c0       	rjmp	.+24     	; 0x18f5e <lif_check_volume+0x76>
   18f46:	ed b7       	in	r30, 0x3d	; 61
   18f48:	fe b7       	in	r31, 0x3e	; 62
   18f4a:	35 83       	std	Z+5, r19	; 0x05
   18f4c:	24 83       	std	Z+4, r18	; 0x04
   18f4e:	81 e2       	ldi	r24, 0x21	; 33
   18f50:	9e e3       	ldi	r25, 0x3E	; 62
   18f52:	a0 e0       	ldi	r26, 0x00	; 0
   18f54:	81 83       	std	Z+1, r24	; 0x01
   18f56:	92 83       	std	Z+2, r25	; 0x02
   18f58:	a3 83       	std	Z+3, r26	; 0x03
   18f5a:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   18f5e:	80 e0       	ldi	r24, 0x00	; 0
   18f60:	90 e0       	ldi	r25, 0x00	; 0
   18f62:	29 ad       	ldd	r18, Y+57	; 0x39
   18f64:	3a ad       	ldd	r19, Y+58	; 0x3a
   18f66:	22 30       	cpi	r18, 0x02	; 2
   18f68:	31 05       	cpc	r19, r1
   18f6a:	90 f0       	brcs	.+36     	; 0x18f90 <lif_check_volume+0xa8>
   18f6c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   18f70:	80 ff       	sbrs	r24, 0
   18f72:	0c c0       	rjmp	.+24     	; 0x18f8c <lif_check_volume+0xa4>
   18f74:	ed b7       	in	r30, 0x3d	; 61
   18f76:	fe b7       	in	r31, 0x3e	; 62
   18f78:	35 83       	std	Z+5, r19	; 0x05
   18f7a:	24 83       	std	Z+4, r18	; 0x04
   18f7c:	89 e0       	ldi	r24, 0x09	; 9
   18f7e:	9e e3       	ldi	r25, 0x3E	; 62
   18f80:	a0 e0       	ldi	r26, 0x00	; 0
   18f82:	81 83       	std	Z+1, r24	; 0x01
   18f84:	92 83       	std	Z+2, r25	; 0x02
   18f86:	a3 83       	std	Z+3, r26	; 0x03
   18f88:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   18f8c:	80 e0       	ldi	r24, 0x00	; 0
   18f8e:	90 e0       	ldi	r25, 0x00	; 0
   18f90:	2b a9       	ldd	r18, Y+51	; 0x33
   18f92:	3c a9       	ldd	r19, Y+52	; 0x34
   18f94:	23 2b       	or	r18, r19
   18f96:	81 f0       	breq	.+32     	; 0x18fb8 <lif_check_volume+0xd0>
   18f98:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   18f9c:	80 ff       	sbrs	r24, 0
   18f9e:	0a c0       	rjmp	.+20     	; 0x18fb4 <lif_check_volume+0xcc>
   18fa0:	80 ed       	ldi	r24, 0xD0	; 208
   18fa2:	9d e3       	ldi	r25, 0x3D	; 61
   18fa4:	a0 e0       	ldi	r26, 0x00	; 0
   18fa6:	ed b7       	in	r30, 0x3d	; 61
   18fa8:	fe b7       	in	r31, 0x3e	; 62
   18faa:	81 83       	std	Z+1, r24	; 0x01
   18fac:	92 83       	std	Z+2, r25	; 0x02
   18fae:	a3 83       	std	Z+3, r26	; 0x03
   18fb0:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   18fb4:	80 e0       	ldi	r24, 0x00	; 0
   18fb6:	90 e0       	ldi	r25, 0x00	; 0
   18fb8:	2b ad       	ldd	r18, Y+59	; 0x3b
   18fba:	3c ad       	ldd	r19, Y+60	; 0x3c
   18fbc:	23 2b       	or	r18, r19
   18fbe:	81 f0       	breq	.+32     	; 0x18fe0 <lif_check_volume+0xf8>
   18fc0:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   18fc4:	80 ff       	sbrs	r24, 0
   18fc6:	0a c0       	rjmp	.+20     	; 0x18fdc <lif_check_volume+0xf4>
   18fc8:	87 e9       	ldi	r24, 0x97	; 151
   18fca:	9d e3       	ldi	r25, 0x3D	; 61
   18fcc:	a0 e0       	ldi	r26, 0x00	; 0
   18fce:	ed b7       	in	r30, 0x3d	; 61
   18fd0:	fe b7       	in	r31, 0x3e	; 62
   18fd2:	81 83       	std	Z+1, r24	; 0x01
   18fd4:	92 83       	std	Z+2, r25	; 0x02
   18fd6:	a3 83       	std	Z+3, r26	; 0x03
   18fd8:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   18fdc:	80 e0       	ldi	r24, 0x00	; 0
   18fde:	90 e0       	ldi	r25, 0x00	; 0
   18fe0:	4d a5       	ldd	r20, Y+45	; 0x2d
   18fe2:	5e a5       	ldd	r21, Y+46	; 0x2e
   18fe4:	6f a5       	ldd	r22, Y+47	; 0x2f
   18fe6:	78 a9       	ldd	r23, Y+48	; 0x30
   18fe8:	45 2b       	or	r20, r21
   18fea:	46 2b       	or	r20, r22
   18fec:	47 2b       	or	r20, r23
   18fee:	a1 f4       	brne	.+40     	; 0x19018 <lif_check_volume+0x130>
   18ff0:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   18ff4:	80 ff       	sbrs	r24, 0
   18ff6:	0e c0       	rjmp	.+28     	; 0x19014 <lif_check_volume+0x12c>
   18ff8:	ed b7       	in	r30, 0x3d	; 61
   18ffa:	fe b7       	in	r31, 0x3e	; 62
   18ffc:	14 82       	std	Z+4, r1	; 0x04
   18ffe:	15 82       	std	Z+5, r1	; 0x05
   19000:	16 82       	std	Z+6, r1	; 0x06
   19002:	17 82       	std	Z+7, r1	; 0x07
   19004:	82 e7       	ldi	r24, 0x72	; 114
   19006:	9d e3       	ldi	r25, 0x3D	; 61
   19008:	a0 e0       	ldi	r26, 0x00	; 0
   1900a:	81 83       	std	Z+1, r24	; 0x01
   1900c:	92 83       	std	Z+2, r25	; 0x02
   1900e:	a3 83       	std	Z+3, r26	; 0x03
   19010:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   19014:	80 e0       	ldi	r24, 0x00	; 0
   19016:	90 e0       	ldi	r25, 0x00	; 0
   19018:	4d a9       	ldd	r20, Y+53	; 0x35
   1901a:	5e a9       	ldd	r21, Y+54	; 0x36
   1901c:	6f a9       	ldd	r22, Y+55	; 0x37
   1901e:	78 ad       	ldd	r23, Y+56	; 0x38
   19020:	45 2b       	or	r20, r21
   19022:	46 2b       	or	r20, r22
   19024:	47 2b       	or	r20, r23
   19026:	81 f4       	brne	.+32     	; 0x19048 <lif_check_volume+0x160>
   19028:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1902c:	80 ff       	sbrs	r24, 0
   1902e:	0a c0       	rjmp	.+20     	; 0x19044 <lif_check_volume+0x15c>
   19030:	83 e4       	ldi	r24, 0x43	; 67
   19032:	9d e3       	ldi	r25, 0x3D	; 61
   19034:	a0 e0       	ldi	r26, 0x00	; 0
   19036:	ed b7       	in	r30, 0x3d	; 61
   19038:	fe b7       	in	r31, 0x3e	; 62
   1903a:	81 83       	std	Z+1, r24	; 0x01
   1903c:	92 83       	std	Z+2, r25	; 0x02
   1903e:	a3 83       	std	Z+3, r26	; 0x03
   19040:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   19044:	80 e0       	ldi	r24, 0x00	; 0
   19046:	90 e0       	ldi	r25, 0x00	; 0
   19048:	0d a5       	ldd	r16, Y+45	; 0x2d
   1904a:	1e a5       	ldd	r17, Y+46	; 0x2e
   1904c:	2f a5       	ldd	r18, Y+47	; 0x2f
   1904e:	38 a9       	ldd	r19, Y+48	; 0x30
   19050:	4d a9       	ldd	r20, Y+53	; 0x35
   19052:	5e a9       	ldd	r21, Y+54	; 0x36
   19054:	6f a9       	ldd	r22, Y+55	; 0x37
   19056:	78 ad       	ldd	r23, Y+56	; 0x38
   19058:	40 0f       	add	r20, r16
   1905a:	51 1f       	adc	r21, r17
   1905c:	62 1f       	adc	r22, r18
   1905e:	73 1f       	adc	r23, r19
   19060:	0c 81       	ldd	r16, Y+4	; 0x04
   19062:	1d 81       	ldd	r17, Y+5	; 0x05
   19064:	2e 81       	ldd	r18, Y+6	; 0x06
   19066:	3f 81       	ldd	r19, Y+7	; 0x07
   19068:	04 17       	cp	r16, r20
   1906a:	15 07       	cpc	r17, r21
   1906c:	26 07       	cpc	r18, r22
   1906e:	37 07       	cpc	r19, r23
   19070:	80 f4       	brcc	.+32     	; 0x19092 <lif_check_volume+0x1aa>
   19072:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   19076:	80 ff       	sbrs	r24, 0
   19078:	0a c0       	rjmp	.+20     	; 0x1908e <lif_check_volume+0x1a6>
   1907a:	87 e1       	ldi	r24, 0x17	; 23
   1907c:	9d e3       	ldi	r25, 0x3D	; 61
   1907e:	a0 e0       	ldi	r26, 0x00	; 0
   19080:	ed b7       	in	r30, 0x3d	; 61
   19082:	fe b7       	in	r31, 0x3e	; 62
   19084:	81 83       	std	Z+1, r24	; 0x01
   19086:	92 83       	std	Z+2, r25	; 0x02
   19088:	a3 83       	std	Z+3, r26	; 0x03
   1908a:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   1908e:	80 e0       	ldi	r24, 0x00	; 0
   19090:	90 e0       	ldi	r25, 0x00	; 0
   19092:	cd b7       	in	r28, 0x3d	; 61
   19094:	de b7       	in	r29, 0x3e	; 62
   19096:	27 96       	adiw	r28, 0x07	; 7
   19098:	e4 e0       	ldi	r30, 0x04	; 4
   1909a:	0c 94 f2 e3 	jmp	0x1c7e4	; 0x1c7e4 <__epilogue_restores__+0x1c>

0001909e <lif_check_dir>:
   1909e:	a5 e1       	ldi	r26, 0x15	; 21
   190a0:	b0 e0       	ldi	r27, 0x00	; 0
   190a2:	e5 e5       	ldi	r30, 0x55	; 85
   190a4:	f8 ec       	ldi	r31, 0xC8	; 200
   190a6:	0c 94 c8 e3 	jmp	0x1c790	; 0x1c790 <__prologue_saves__>
   190aa:	6c 01       	movw	r12, r24
   190ac:	2a e5       	ldi	r18, 0x5A	; 90
   190ae:	c2 0e       	add	r12, r18
   190b0:	d1 1c       	adc	r13, r1
   190b2:	f6 01       	movw	r30, r12
   190b4:	20 81       	ld	r18, Z
   190b6:	31 81       	ldd	r19, Z+1	; 0x01
   190b8:	21 50       	subi	r18, 0x01	; 1
   190ba:	31 09       	sbc	r19, r1
   190bc:	2e 3f       	cpi	r18, 0xFE	; 254
   190be:	3f 4f       	sbci	r19, 0xFF	; 255
   190c0:	08 f0       	brcs	.+2      	; 0x190c4 <lif_check_dir+0x26>
   190c2:	8e c1       	rjmp	.+796    	; 0x193e0 <lif_check_dir+0x342>
   190c4:	9d 8b       	std	Y+21, r25	; 0x15
   190c6:	8c 8b       	std	Y+20, r24	; 0x14
   190c8:	7c 01       	movw	r14, r24
   190ca:	2f e4       	ldi	r18, 0x4F	; 79
   190cc:	e2 0e       	add	r14, r18
   190ce:	f1 1c       	adc	r15, r1
   190d0:	c7 01       	movw	r24, r14
   190d2:	d9 d9       	rcall	.-3150   	; 0x18486 <lif_checkname>
   190d4:	89 2b       	or	r24, r25
   190d6:	89 f4       	brne	.+34     	; 0x190fa <lif_check_dir+0x5c>
   190d8:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   190dc:	80 ff       	sbrs	r24, 0
   190de:	0f c0       	rjmp	.+30     	; 0x190fe <lif_check_dir+0x60>
   190e0:	ed b7       	in	r30, 0x3d	; 61
   190e2:	fe b7       	in	r31, 0x3e	; 62
   190e4:	f5 82       	std	Z+5, r15	; 0x05
   190e6:	e4 82       	std	Z+4, r14	; 0x04
   190e8:	86 ef       	ldi	r24, 0xF6	; 246
   190ea:	9c e3       	ldi	r25, 0x3C	; 60
   190ec:	a0 e0       	ldi	r26, 0x00	; 0
   190ee:	81 83       	std	Z+1, r24	; 0x01
   190f0:	92 83       	std	Z+2, r25	; 0x02
   190f2:	a3 83       	std	Z+3, r26	; 0x03
   190f4:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   190f8:	02 c0       	rjmp	.+4      	; 0x190fe <lif_check_dir+0x60>
   190fa:	01 e0       	ldi	r16, 0x01	; 1
   190fc:	01 c0       	rjmp	.+2      	; 0x19100 <lif_check_dir+0x62>
   190fe:	00 e0       	ldi	r16, 0x00	; 0
   19100:	10 e0       	ldi	r17, 0x00	; 0
   19102:	ec 89       	ldd	r30, Y+20	; 0x14
   19104:	fd 89       	ldd	r31, Y+21	; 0x15
   19106:	84 85       	ldd	r24, Z+12	; 0x0c
   19108:	95 85       	ldd	r25, Z+13	; 0x0d
   1910a:	a6 85       	ldd	r26, Z+14	; 0x0e
   1910c:	b7 85       	ldd	r27, Z+15	; 0x0f
   1910e:	00 97       	sbiw	r24, 0x00	; 0
   19110:	a1 05       	cpc	r26, r1
   19112:	b1 05       	cpc	r27, r1
   19114:	29 f1       	breq	.+74     	; 0x19160 <lif_check_dir+0xc2>
   19116:	e4 5a       	subi	r30, 0xA4	; 164
   19118:	ff 4f       	sbci	r31, 0xFF	; 255
   1911a:	40 81       	ld	r20, Z
   1911c:	51 81       	ldd	r21, Z+1	; 0x01
   1911e:	62 81       	ldd	r22, Z+2	; 0x02
   19120:	73 81       	ldd	r23, Z+3	; 0x03
   19122:	48 17       	cp	r20, r24
   19124:	59 07       	cpc	r21, r25
   19126:	6a 07       	cpc	r22, r26
   19128:	7b 07       	cpc	r23, r27
   1912a:	d0 f4       	brcc	.+52     	; 0x19160 <lif_check_dir+0xc2>
   1912c:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   19130:	20 ff       	sbrs	r18, 0
   19132:	14 c0       	rjmp	.+40     	; 0x1915c <lif_check_dir+0xbe>
   19134:	ed b7       	in	r30, 0x3d	; 61
   19136:	fe b7       	in	r31, 0x3e	; 62
   19138:	82 87       	std	Z+10, r24	; 0x0a
   1913a:	93 87       	std	Z+11, r25	; 0x0b
   1913c:	a4 87       	std	Z+12, r26	; 0x0c
   1913e:	b5 87       	std	Z+13, r27	; 0x0d
   19140:	46 83       	std	Z+6, r20	; 0x06
   19142:	57 83       	std	Z+7, r21	; 0x07
   19144:	60 87       	std	Z+8, r22	; 0x08
   19146:	71 87       	std	Z+9, r23	; 0x09
   19148:	f5 82       	std	Z+5, r15	; 0x05
   1914a:	e4 82       	std	Z+4, r14	; 0x04
   1914c:	82 eb       	ldi	r24, 0xB2	; 178
   1914e:	9c e3       	ldi	r25, 0x3C	; 60
   19150:	a0 e0       	ldi	r26, 0x00	; 0
   19152:	81 83       	std	Z+1, r24	; 0x01
   19154:	92 83       	std	Z+2, r25	; 0x02
   19156:	a3 83       	std	Z+3, r26	; 0x03
   19158:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   1915c:	00 e0       	ldi	r16, 0x00	; 0
   1915e:	10 e0       	ldi	r17, 0x00	; 0
   19160:	ec 89       	ldd	r30, Y+20	; 0x14
   19162:	fd 89       	ldd	r31, Y+21	; 0x15
   19164:	44 81       	ldd	r20, Z+4	; 0x04
   19166:	55 81       	ldd	r21, Z+5	; 0x05
   19168:	66 81       	ldd	r22, Z+6	; 0x06
   1916a:	77 81       	ldd	r23, Z+7	; 0x07
   1916c:	41 15       	cp	r20, r1
   1916e:	51 05       	cpc	r21, r1
   19170:	61 05       	cpc	r22, r1
   19172:	71 05       	cpc	r23, r1
   19174:	89 f1       	breq	.+98     	; 0x191d8 <lif_check_dir+0x13a>
   19176:	e4 5a       	subi	r30, 0xA4	; 164
   19178:	ff 4f       	sbci	r31, 0xFF	; 255
   1917a:	80 80       	ld	r8, Z
   1917c:	91 80       	ldd	r9, Z+1	; 0x01
   1917e:	a2 80       	ldd	r10, Z+2	; 0x02
   19180:	b3 80       	ldd	r11, Z+3	; 0x03
   19182:	ec 89       	ldd	r30, Y+20	; 0x14
   19184:	fd 89       	ldd	r31, Y+21	; 0x15
   19186:	e0 5a       	subi	r30, 0xA0	; 160
   19188:	ff 4f       	sbci	r31, 0xFF	; 255
   1918a:	80 81       	ld	r24, Z
   1918c:	91 81       	ldd	r25, Z+1	; 0x01
   1918e:	a2 81       	ldd	r26, Z+2	; 0x02
   19190:	b3 81       	ldd	r27, Z+3	; 0x03
   19192:	88 0d       	add	r24, r8
   19194:	99 1d       	adc	r25, r9
   19196:	aa 1d       	adc	r26, r10
   19198:	bb 1d       	adc	r27, r11
   1919a:	48 17       	cp	r20, r24
   1919c:	59 07       	cpc	r21, r25
   1919e:	6a 07       	cpc	r22, r26
   191a0:	7b 07       	cpc	r23, r27
   191a2:	d0 f4       	brcc	.+52     	; 0x191d8 <lif_check_dir+0x13a>
   191a4:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   191a8:	20 ff       	sbrs	r18, 0
   191aa:	14 c0       	rjmp	.+40     	; 0x191d4 <lif_check_dir+0x136>
   191ac:	ed b7       	in	r30, 0x3d	; 61
   191ae:	fe b7       	in	r31, 0x3e	; 62
   191b0:	42 87       	std	Z+10, r20	; 0x0a
   191b2:	53 87       	std	Z+11, r21	; 0x0b
   191b4:	64 87       	std	Z+12, r22	; 0x0c
   191b6:	75 87       	std	Z+13, r23	; 0x0d
   191b8:	86 83       	std	Z+6, r24	; 0x06
   191ba:	97 83       	std	Z+7, r25	; 0x07
   191bc:	a0 87       	std	Z+8, r26	; 0x08
   191be:	b1 87       	std	Z+9, r27	; 0x09
   191c0:	f5 82       	std	Z+5, r15	; 0x05
   191c2:	e4 82       	std	Z+4, r14	; 0x04
   191c4:	81 e7       	ldi	r24, 0x71	; 113
   191c6:	9c e3       	ldi	r25, 0x3C	; 60
   191c8:	a0 e0       	ldi	r26, 0x00	; 0
   191ca:	81 83       	std	Z+1, r24	; 0x01
   191cc:	92 83       	std	Z+2, r25	; 0x02
   191ce:	a3 83       	std	Z+3, r26	; 0x03
   191d0:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   191d4:	00 e0       	ldi	r16, 0x00	; 0
   191d6:	10 e0       	ldi	r17, 0x00	; 0
   191d8:	ec 89       	ldd	r30, Y+20	; 0x14
   191da:	fd 89       	ldd	r31, Y+21	; 0x15
   191dc:	e6 59       	subi	r30, 0x96	; 150
   191de:	ff 4f       	sbci	r31, 0xFF	; 255
   191e0:	80 81       	ld	r24, Z
   191e2:	91 81       	ldd	r25, Z+1	; 0x01
   191e4:	81 30       	cpi	r24, 0x01	; 1
   191e6:	f0 e8       	ldi	r31, 0x80	; 128
   191e8:	9f 07       	cpc	r25, r31
   191ea:	a1 f0       	breq	.+40     	; 0x19214 <lif_check_dir+0x176>
   191ec:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   191f0:	20 ff       	sbrs	r18, 0
   191f2:	0e c0       	rjmp	.+28     	; 0x19210 <lif_check_dir+0x172>
   191f4:	ed b7       	in	r30, 0x3d	; 61
   191f6:	fe b7       	in	r31, 0x3e	; 62
   191f8:	97 83       	std	Z+7, r25	; 0x07
   191fa:	86 83       	std	Z+6, r24	; 0x06
   191fc:	f5 82       	std	Z+5, r15	; 0x05
   191fe:	e4 82       	std	Z+4, r14	; 0x04
   19200:	83 e4       	ldi	r24, 0x43	; 67
   19202:	9c e3       	ldi	r25, 0x3C	; 60
   19204:	a0 e0       	ldi	r26, 0x00	; 0
   19206:	81 83       	std	Z+1, r24	; 0x01
   19208:	92 83       	std	Z+2, r25	; 0x02
   1920a:	a3 83       	std	Z+3, r26	; 0x03
   1920c:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   19210:	00 e0       	ldi	r16, 0x00	; 0
   19212:	10 e0       	ldi	r17, 0x00	; 0
   19214:	f6 01       	movw	r30, r12
   19216:	80 81       	ld	r24, Z
   19218:	91 81       	ldd	r25, Z+1	; 0x01
   1921a:	8c 7f       	andi	r24, 0xFC	; 252
   1921c:	80 31       	cpi	r24, 0x10	; 16
   1921e:	90 4e       	sbci	r25, 0xE0	; 224
   19220:	09 f0       	breq	.+2      	; 0x19224 <lif_check_dir+0x186>
   19222:	af c0       	rjmp	.+350    	; 0x19382 <lif_check_dir+0x2e4>
   19224:	cc 88       	ldd	r12, Y+20	; 0x14
   19226:	dd 88       	ldd	r13, Y+21	; 0x15
   19228:	2c e6       	ldi	r18, 0x6C	; 108
   1922a:	c2 0e       	add	r12, r18
   1922c:	d1 1c       	adc	r13, r1
   1922e:	f6 01       	movw	r30, r12
   19230:	80 81       	ld	r24, Z
   19232:	91 81       	ldd	r25, Z+1	; 0x01
   19234:	00 97       	sbiw	r24, 0x00	; 0
   19236:	09 f4       	brne	.+2      	; 0x1923a <lif_check_dir+0x19c>
   19238:	a4 c0       	rjmp	.+328    	; 0x19382 <lif_check_dir+0x2e4>
   1923a:	4c 01       	movw	r8, r24
   1923c:	a1 2c       	mov	r10, r1
   1923e:	b1 2c       	mov	r11, r1
   19240:	77 27       	eor	r23, r23
   19242:	6b 2d       	mov	r22, r11
   19244:	5a 2d       	mov	r21, r10
   19246:	49 2d       	mov	r20, r9
   19248:	9c 01       	movw	r18, r24
   1924a:	33 27       	eor	r19, r19
   1924c:	3b 8b       	std	Y+19, r19	; 0x13
   1924e:	2a 8b       	std	Y+18, r18	; 0x12
   19250:	db 01       	movw	r26, r22
   19252:	ca 01       	movw	r24, r20
   19254:	23 2b       	or	r18, r19
   19256:	19 f0       	breq	.+6      	; 0x1925e <lif_check_dir+0x1c0>
   19258:	01 96       	adiw	r24, 0x01	; 1
   1925a:	a1 1d       	adc	r26, r1
   1925c:	b1 1d       	adc	r27, r1
   1925e:	2c 88       	ldd	r2, Y+20	; 0x14
   19260:	3d 88       	ldd	r3, Y+21	; 0x15
   19262:	30 e6       	ldi	r19, 0x60	; 96
   19264:	23 0e       	add	r2, r19
   19266:	31 1c       	adc	r3, r1
   19268:	f1 01       	movw	r30, r2
   1926a:	40 80       	ld	r4, Z
   1926c:	51 80       	ldd	r5, Z+1	; 0x01
   1926e:	62 80       	ldd	r6, Z+2	; 0x02
   19270:	73 80       	ldd	r7, Z+3	; 0x03
   19272:	48 16       	cp	r4, r24
   19274:	59 06       	cpc	r5, r25
   19276:	6a 06       	cpc	r6, r26
   19278:	7b 06       	cpc	r7, r27
   1927a:	30 f5       	brcc	.+76     	; 0x192c8 <lif_check_dir+0x22a>
   1927c:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   19280:	20 ff       	sbrs	r18, 0
   19282:	20 c0       	rjmp	.+64     	; 0x192c4 <lif_check_dir+0x226>
   19284:	2a 89       	ldd	r18, Y+18	; 0x12
   19286:	3b 89       	ldd	r19, Y+19	; 0x13
   19288:	23 2b       	or	r18, r19
   1928a:	21 f0       	breq	.+8      	; 0x19294 <lif_check_dir+0x1f6>
   1928c:	4f 5f       	subi	r20, 0xFF	; 255
   1928e:	5f 4f       	sbci	r21, 0xFF	; 255
   19290:	6f 4f       	sbci	r22, 0xFF	; 255
   19292:	7f 4f       	sbci	r23, 0xFF	; 255
   19294:	ed b7       	in	r30, 0x3d	; 61
   19296:	fe b7       	in	r31, 0x3e	; 62
   19298:	46 86       	std	Z+14, r4	; 0x0e
   1929a:	57 86       	std	Z+15, r5	; 0x0f
   1929c:	60 8a       	std	Z+16, r6	; 0x10
   1929e:	71 8a       	std	Z+17, r7	; 0x11
   192a0:	42 87       	std	Z+10, r20	; 0x0a
   192a2:	53 87       	std	Z+11, r21	; 0x0b
   192a4:	64 87       	std	Z+12, r22	; 0x0c
   192a6:	75 87       	std	Z+13, r23	; 0x0d
   192a8:	86 82       	std	Z+6, r8	; 0x06
   192aa:	97 82       	std	Z+7, r9	; 0x07
   192ac:	a0 86       	std	Z+8, r10	; 0x08
   192ae:	b1 86       	std	Z+9, r11	; 0x09
   192b0:	f5 82       	std	Z+5, r15	; 0x05
   192b2:	e4 82       	std	Z+4, r14	; 0x04
   192b4:	88 ef       	ldi	r24, 0xF8	; 248
   192b6:	9b e3       	ldi	r25, 0x3B	; 59
   192b8:	a0 e0       	ldi	r26, 0x00	; 0
   192ba:	81 83       	std	Z+1, r24	; 0x01
   192bc:	92 83       	std	Z+2, r25	; 0x02
   192be:	a3 83       	std	Z+3, r26	; 0x03
   192c0:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   192c4:	00 e0       	ldi	r16, 0x00	; 0
   192c6:	10 e0       	ldi	r17, 0x00	; 0
   192c8:	f6 01       	movw	r30, r12
   192ca:	20 81       	ld	r18, Z
   192cc:	31 81       	ldd	r19, Z+1	; 0x01
   192ce:	a9 01       	movw	r20, r18
   192d0:	60 e0       	ldi	r22, 0x00	; 0
   192d2:	70 e0       	ldi	r23, 0x00	; 0
   192d4:	bb 27       	eor	r27, r27
   192d6:	a7 2f       	mov	r26, r23
   192d8:	96 2f       	mov	r25, r22
   192da:	85 2f       	mov	r24, r21
   192dc:	f9 01       	movw	r30, r18
   192de:	ff 27       	eor	r31, r31
   192e0:	fb 8b       	std	Y+19, r31	; 0x13
   192e2:	ea 8b       	std	Y+18, r30	; 0x12
   192e4:	2c 01       	movw	r4, r24
   192e6:	3d 01       	movw	r6, r26
   192e8:	ef 2b       	or	r30, r31
   192ea:	29 f0       	breq	.+10     	; 0x192f6 <lif_check_dir+0x258>
   192ec:	ff ef       	ldi	r31, 0xFF	; 255
   192ee:	4f 1a       	sub	r4, r31
   192f0:	5f 0a       	sbc	r5, r31
   192f2:	6f 0a       	sbc	r6, r31
   192f4:	7f 0a       	sbc	r7, r31
   192f6:	f1 01       	movw	r30, r2
   192f8:	80 80       	ld	r8, Z
   192fa:	91 80       	ldd	r9, Z+1	; 0x01
   192fc:	a2 80       	ldd	r10, Z+2	; 0x02
   192fe:	b3 80       	ldd	r11, Z+3	; 0x03
   19300:	48 14       	cp	r4, r8
   19302:	59 04       	cpc	r5, r9
   19304:	6a 04       	cpc	r6, r10
   19306:	7b 04       	cpc	r7, r11
   19308:	28 f5       	brcc	.+74     	; 0x19354 <lif_check_dir+0x2b6>
   1930a:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   1930e:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   19312:	32 ff       	sbrs	r19, 2
   19314:	1f c0       	rjmp	.+62     	; 0x19354 <lif_check_dir+0x2b6>
   19316:	2a 89       	ldd	r18, Y+18	; 0x12
   19318:	3b 89       	ldd	r19, Y+19	; 0x13
   1931a:	23 2b       	or	r18, r19
   1931c:	19 f0       	breq	.+6      	; 0x19324 <lif_check_dir+0x286>
   1931e:	01 96       	adiw	r24, 0x01	; 1
   19320:	a1 1d       	adc	r26, r1
   19322:	b1 1d       	adc	r27, r1
   19324:	ed b7       	in	r30, 0x3d	; 61
   19326:	fe b7       	in	r31, 0x3e	; 62
   19328:	86 86       	std	Z+14, r8	; 0x0e
   1932a:	97 86       	std	Z+15, r9	; 0x0f
   1932c:	a0 8a       	std	Z+16, r10	; 0x10
   1932e:	b1 8a       	std	Z+17, r11	; 0x11
   19330:	82 87       	std	Z+10, r24	; 0x0a
   19332:	93 87       	std	Z+11, r25	; 0x0b
   19334:	a4 87       	std	Z+12, r26	; 0x0c
   19336:	b5 87       	std	Z+13, r27	; 0x0d
   19338:	46 83       	std	Z+6, r20	; 0x06
   1933a:	57 83       	std	Z+7, r21	; 0x07
   1933c:	60 87       	std	Z+8, r22	; 0x08
   1933e:	71 87       	std	Z+9, r23	; 0x09
   19340:	f5 82       	std	Z+5, r15	; 0x05
   19342:	e4 82       	std	Z+4, r14	; 0x04
   19344:	8d ea       	ldi	r24, 0xAD	; 173
   19346:	9b e3       	ldi	r25, 0x3B	; 59
   19348:	a0 e0       	ldi	r26, 0x00	; 0
   1934a:	81 83       	std	Z+1, r24	; 0x01
   1934c:	92 83       	std	Z+2, r25	; 0x02
   1934e:	a3 83       	std	Z+3, r26	; 0x03
   19350:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   19354:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   19358:	80 ff       	sbrs	r24, 0
   1935a:	13 c0       	rjmp	.+38     	; 0x19382 <lif_check_dir+0x2e4>
   1935c:	f6 01       	movw	r30, r12
   1935e:	80 81       	ld	r24, Z
   19360:	91 81       	ldd	r25, Z+1	; 0x01
   19362:	89 2b       	or	r24, r25
   19364:	71 f4       	brne	.+28     	; 0x19382 <lif_check_dir+0x2e4>
   19366:	ed b7       	in	r30, 0x3d	; 61
   19368:	fe b7       	in	r31, 0x3e	; 62
   1936a:	f5 82       	std	Z+5, r15	; 0x05
   1936c:	e4 82       	std	Z+4, r14	; 0x04
   1936e:	82 e8       	ldi	r24, 0x82	; 130
   19370:	9b e3       	ldi	r25, 0x3B	; 59
   19372:	a0 e0       	ldi	r26, 0x00	; 0
   19374:	81 83       	std	Z+1, r24	; 0x01
   19376:	92 83       	std	Z+2, r25	; 0x02
   19378:	a3 83       	std	Z+3, r26	; 0x03
   1937a:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   1937e:	00 e0       	ldi	r16, 0x00	; 0
   19380:	10 e0       	ldi	r17, 0x00	; 0
   19382:	ec 89       	ldd	r30, Y+20	; 0x14
   19384:	fd 89       	ldd	r31, Y+21	; 0x15
   19386:	e2 59       	subi	r30, 0x92	; 146
   19388:	ff 4f       	sbci	r31, 0xFF	; 255
   1938a:	20 81       	ld	r18, Z
   1938c:	31 81       	ldd	r19, Z+1	; 0x01
   1938e:	21 15       	cp	r18, r1
   19390:	f1 e0       	ldi	r31, 0x01	; 1
   19392:	3f 07       	cpc	r19, r31
   19394:	41 f1       	breq	.+80     	; 0x193e6 <lif_check_dir+0x348>
   19396:	40 91 c3 01 	lds	r20, 0x01C3	; 0x8001c3 <debuglevel>
   1939a:	50 91 c4 01 	lds	r21, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1939e:	ca 01       	movw	r24, r20
   193a0:	81 70       	andi	r24, 0x01	; 1
   193a2:	99 27       	eor	r25, r25
   193a4:	40 ff       	sbrs	r20, 0
   193a6:	20 c0       	rjmp	.+64     	; 0x193e8 <lif_check_dir+0x34a>
   193a8:	c9 01       	movw	r24, r18
   193aa:	a0 e0       	ldi	r26, 0x00	; 0
   193ac:	b0 e0       	ldi	r27, 0x00	; 0
   193ae:	ed b7       	in	r30, 0x3d	; 61
   193b0:	fe b7       	in	r31, 0x3e	; 62
   193b2:	86 83       	std	Z+6, r24	; 0x06
   193b4:	97 83       	std	Z+7, r25	; 0x07
   193b6:	a0 87       	std	Z+8, r26	; 0x08
   193b8:	b1 87       	std	Z+9, r27	; 0x09
   193ba:	ec 89       	ldd	r30, Y+20	; 0x14
   193bc:	fd 89       	ldd	r31, Y+21	; 0x15
   193be:	80 81       	ld	r24, Z
   193c0:	91 81       	ldd	r25, Z+1	; 0x01
   193c2:	ed b7       	in	r30, 0x3d	; 61
   193c4:	fe b7       	in	r31, 0x3e	; 62
   193c6:	95 83       	std	Z+5, r25	; 0x05
   193c8:	84 83       	std	Z+4, r24	; 0x04
   193ca:	86 e5       	ldi	r24, 0x56	; 86
   193cc:	9b e3       	ldi	r25, 0x3B	; 59
   193ce:	a0 e0       	ldi	r26, 0x00	; 0
   193d0:	81 83       	std	Z+1, r24	; 0x01
   193d2:	92 83       	std	Z+2, r25	; 0x02
   193d4:	a3 83       	std	Z+3, r26	; 0x03
   193d6:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   193da:	80 e0       	ldi	r24, 0x00	; 0
   193dc:	90 e0       	ldi	r25, 0x00	; 0
   193de:	04 c0       	rjmp	.+8      	; 0x193e8 <lif_check_dir+0x34a>
   193e0:	81 e0       	ldi	r24, 0x01	; 1
   193e2:	90 e0       	ldi	r25, 0x00	; 0
   193e4:	01 c0       	rjmp	.+2      	; 0x193e8 <lif_check_dir+0x34a>
   193e6:	c8 01       	movw	r24, r16
   193e8:	65 96       	adiw	r28, 0x15	; 21
   193ea:	e2 e1       	ldi	r30, 0x12	; 18
   193ec:	0c 94 e4 e3 	jmp	0x1c7c8	; 0x1c7c8 <__epilogue_restores__>

000193f0 <lif_close_volume>:
   193f0:	cf 93       	push	r28
   193f2:	df 93       	push	r29
   193f4:	00 97       	sbiw	r24, 0x00	; 0
   193f6:	f9 f0       	breq	.+62     	; 0x19436 <lif_close_volume+0x46>
   193f8:	ec 01       	movw	r28, r24
   193fa:	8a 81       	ldd	r24, Y+2	; 0x02
   193fc:	9b 81       	ldd	r25, Y+3	; 0x03
   193fe:	00 97       	sbiw	r24, 0x00	; 0
   19400:	79 f0       	breq	.+30     	; 0x19420 <lif_close_volume+0x30>
   19402:	22 e0       	ldi	r18, 0x02	; 2
   19404:	30 e0       	ldi	r19, 0x00	; 0
   19406:	40 e0       	ldi	r20, 0x00	; 0
   19408:	50 e0       	ldi	r21, 0x00	; 0
   1940a:	ba 01       	movw	r22, r20
   1940c:	0e 94 ba 7b 	call	0xf774	; 0xf774 <fseek>
   19410:	8a 81       	ldd	r24, Y+2	; 0x02
   19412:	9b 81       	ldd	r25, Y+3	; 0x03
   19414:	0e 94 a2 7d 	call	0xfb44	; 0xfb44 <fclose>
   19418:	1b 82       	std	Y+3, r1	; 0x03
   1941a:	1a 82       	std	Y+2, r1	; 0x02
   1941c:	0e 94 9d 7c 	call	0xf93a	; 0xf93a <sync>
   19420:	88 81       	ld	r24, Y
   19422:	99 81       	ldd	r25, Y+1	; 0x01
   19424:	00 97       	sbiw	r24, 0x00	; 0
   19426:	11 f0       	breq	.+4      	; 0x1942c <lif_close_volume+0x3c>
   19428:	0e 94 74 c0 	call	0x180e8	; 0x180e8 <lif_free>
   1942c:	ce 01       	movw	r24, r28
   1942e:	8f db       	rcall	.-2274   	; 0x18b4e <lif_vol_clear>
   19430:	ce 01       	movw	r24, r28
   19432:	0e 94 74 c0 	call	0x180e8	; 0x180e8 <lif_free>
   19436:	df 91       	pop	r29
   19438:	cf 91       	pop	r28
   1943a:	08 95       	ret

0001943c <lif_checkdirindex>:
   1943c:	cf 92       	push	r12
   1943e:	df 92       	push	r13
   19440:	ef 92       	push	r14
   19442:	ff 92       	push	r15
   19444:	cf 93       	push	r28
   19446:	df 93       	push	r29
   19448:	ad b7       	in	r26, 0x3d	; 61
   1944a:	be b7       	in	r27, 0x3e	; 62
   1944c:	17 97       	sbiw	r26, 0x07	; 7
   1944e:	0f b6       	in	r0, 0x3f	; 63
   19450:	f8 94       	cli
   19452:	be bf       	out	0x3e, r27	; 62
   19454:	0f be       	out	0x3f, r0	; 63
   19456:	ad bf       	out	0x3d, r26	; 61
   19458:	9b 01       	movw	r18, r22
   1945a:	77 fd       	sbrc	r23, 7
   1945c:	25 c0       	rjmp	.+74     	; 0x194a8 <lif_checkdirindex+0x6c>
   1945e:	ab 01       	movw	r20, r22
   19460:	77 0f       	add	r23, r23
   19462:	66 0b       	sbc	r22, r22
   19464:	77 0b       	sbc	r23, r23
   19466:	e5 e0       	ldi	r30, 0x05	; 5
   19468:	44 0f       	add	r20, r20
   1946a:	55 1f       	adc	r21, r21
   1946c:	66 1f       	adc	r22, r22
   1946e:	77 1f       	adc	r23, r23
   19470:	ea 95       	dec	r30
   19472:	d1 f7       	brne	.-12     	; 0x19468 <lif_checkdirindex+0x2c>
   19474:	c5 2e       	mov	r12, r21
   19476:	d6 2e       	mov	r13, r22
   19478:	e7 2e       	mov	r14, r23
   1947a:	ff 24       	eor	r15, r15
   1947c:	55 27       	eor	r21, r21
   1947e:	66 27       	eor	r22, r22
   19480:	77 27       	eor	r23, r23
   19482:	45 2b       	or	r20, r21
   19484:	46 2b       	or	r20, r22
   19486:	47 2b       	or	r20, r23
   19488:	29 f0       	breq	.+10     	; 0x19494 <lif_checkdirindex+0x58>
   1948a:	4f ef       	ldi	r20, 0xFF	; 255
   1948c:	c4 1a       	sub	r12, r20
   1948e:	d4 0a       	sbc	r13, r20
   19490:	e4 0a       	sbc	r14, r20
   19492:	f4 0a       	sbc	r15, r20
   19494:	fc 01       	movw	r30, r24
   19496:	45 a9       	ldd	r20, Z+53	; 0x35
   19498:	56 a9       	ldd	r21, Z+54	; 0x36
   1949a:	67 a9       	ldd	r22, Z+55	; 0x37
   1949c:	70 ad       	ldd	r23, Z+56	; 0x38
   1949e:	4c 15       	cp	r20, r12
   194a0:	5d 05       	cpc	r21, r13
   194a2:	6e 05       	cpc	r22, r14
   194a4:	7f 05       	cpc	r23, r15
   194a6:	08 f5       	brcc	.+66     	; 0x194ea <lif_checkdirindex+0xae>
   194a8:	ec 01       	movw	r28, r24
   194aa:	ed b7       	in	r30, 0x3d	; 61
   194ac:	fe b7       	in	r31, 0x3e	; 62
   194ae:	37 83       	std	Z+7, r19	; 0x07
   194b0:	26 83       	std	Z+6, r18	; 0x06
   194b2:	88 81       	ld	r24, Y
   194b4:	99 81       	ldd	r25, Y+1	; 0x01
   194b6:	95 83       	std	Z+5, r25	; 0x05
   194b8:	84 83       	std	Z+4, r24	; 0x04
   194ba:	83 e9       	ldi	r24, 0x93	; 147
   194bc:	9a e3       	ldi	r25, 0x3A	; 58
   194be:	a0 e0       	ldi	r26, 0x00	; 0
   194c0:	81 83       	std	Z+1, r24	; 0x01
   194c2:	92 83       	std	Z+2, r25	; 0x02
   194c4:	a3 83       	std	Z+3, r26	; 0x03
   194c6:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   194ca:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   194ce:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   194d2:	c9 01       	movw	r24, r18
   194d4:	88 27       	eor	r24, r24
   194d6:	94 70       	andi	r25, 0x04	; 4
   194d8:	32 ff       	sbrs	r19, 2
   194da:	09 c0       	rjmp	.+18     	; 0x194ee <lif_checkdirindex+0xb2>
   194dc:	6f e3       	ldi	r22, 0x3F	; 63
   194de:	75 e1       	ldi	r23, 0x15	; 21
   194e0:	ce 01       	movw	r24, r28
   194e2:	3c db       	rcall	.-2440   	; 0x18b5c <lif_dump_vol>
   194e4:	80 e0       	ldi	r24, 0x00	; 0
   194e6:	90 e0       	ldi	r25, 0x00	; 0
   194e8:	02 c0       	rjmp	.+4      	; 0x194ee <lif_checkdirindex+0xb2>
   194ea:	81 e0       	ldi	r24, 0x01	; 1
   194ec:	90 e0       	ldi	r25, 0x00	; 0
   194ee:	ad b7       	in	r26, 0x3d	; 61
   194f0:	be b7       	in	r27, 0x3e	; 62
   194f2:	17 96       	adiw	r26, 0x07	; 7
   194f4:	0f b6       	in	r0, 0x3f	; 63
   194f6:	f8 94       	cli
   194f8:	be bf       	out	0x3e, r27	; 62
   194fa:	0f be       	out	0x3f, r0	; 63
   194fc:	ad bf       	out	0x3d, r26	; 61
   194fe:	df 91       	pop	r29
   19500:	cf 91       	pop	r28
   19502:	ff 90       	pop	r15
   19504:	ef 90       	pop	r14
   19506:	df 90       	pop	r13
   19508:	cf 90       	pop	r12
   1950a:	08 95       	ret

0001950c <lif_readdirindex>:
   1950c:	a5 e2       	ldi	r26, 0x25	; 37
   1950e:	b0 e0       	ldi	r27, 0x00	; 0
   19510:	ec e8       	ldi	r30, 0x8C	; 140
   19512:	fa ec       	ldi	r31, 0xCA	; 202
   19514:	0c 94 d2 e3 	jmp	0x1c7a4	; 0x1c7a4 <__prologue_saves__+0x14>
   19518:	7c 01       	movw	r14, r24
   1951a:	6b 01       	movw	r12, r22
   1951c:	8f df       	rcall	.-226    	; 0x1943c <lif_checkdirindex>
   1951e:	89 2b       	or	r24, r25
   19520:	19 f4       	brne	.+6      	; 0x19528 <lif_readdirindex+0x1c>
   19522:	00 e0       	ldi	r16, 0x00	; 0
   19524:	10 e0       	ldi	r17, 0x00	; 0
   19526:	54 c0       	rjmp	.+168    	; 0x195d0 <lif_readdirindex+0xc4>
   19528:	f7 01       	movw	r30, r14
   1952a:	85 a5       	ldd	r24, Z+45	; 0x2d
   1952c:	96 a5       	ldd	r25, Z+46	; 0x2e
   1952e:	a7 a5       	ldd	r26, Z+47	; 0x2f
   19530:	b0 a9       	ldd	r27, Z+48	; 0x30
   19532:	44 27       	eor	r20, r20
   19534:	58 2f       	mov	r21, r24
   19536:	69 2f       	mov	r22, r25
   19538:	7a 2f       	mov	r23, r26
   1953a:	c6 01       	movw	r24, r12
   1953c:	0d 2c       	mov	r0, r13
   1953e:	00 0c       	add	r0, r0
   19540:	aa 0b       	sbc	r26, r26
   19542:	bb 0b       	sbc	r27, r27
   19544:	35 e0       	ldi	r19, 0x05	; 5
   19546:	88 0f       	add	r24, r24
   19548:	99 1f       	adc	r25, r25
   1954a:	aa 1f       	adc	r26, r26
   1954c:	bb 1f       	adc	r27, r27
   1954e:	3a 95       	dec	r19
   19550:	d1 f7       	brne	.-12     	; 0x19546 <lif_readdirindex+0x3a>
   19552:	9a 01       	movw	r18, r20
   19554:	ab 01       	movw	r20, r22
   19556:	28 0f       	add	r18, r24
   19558:	39 1f       	adc	r19, r25
   1955a:	4a 1f       	adc	r20, r26
   1955c:	5b 1f       	adc	r21, r27
   1955e:	00 e2       	ldi	r16, 0x20	; 32
   19560:	10 e0       	ldi	r17, 0x00	; 0
   19562:	be 01       	movw	r22, r28
   19564:	6a 5f       	subi	r22, 0xFA	; 250
   19566:	7f 4f       	sbci	r23, 0xFF	; 255
   19568:	c7 01       	movw	r24, r14
   1956a:	0e 94 2c c1 	call	0x18258	; 0x18258 <lif_read>
   1956e:	60 32       	cpi	r22, 0x20	; 32
   19570:	71 05       	cpc	r23, r1
   19572:	81 05       	cpc	r24, r1
   19574:	91 05       	cpc	r25, r1
   19576:	a8 f2       	brcs	.-86     	; 0x19522 <lif_readdirindex+0x16>
   19578:	b7 01       	movw	r22, r14
   1957a:	ce 01       	movw	r24, r28
   1957c:	06 96       	adiw	r24, 0x06	; 6
   1957e:	8b d9       	rcall	.-3306   	; 0x18896 <lif_str2dir>
   19580:	f7 01       	movw	r30, r14
   19582:	e6 5a       	subi	r30, 0xA6	; 166
   19584:	ff 4f       	sbci	r31, 0xFF	; 255
   19586:	80 81       	ld	r24, Z
   19588:	91 81       	ldd	r25, Z+1	; 0x01
   1958a:	01 96       	adiw	r24, 0x01	; 1
   1958c:	19 f4       	brne	.+6      	; 0x19594 <lif_readdirindex+0x88>
   1958e:	f7 01       	movw	r30, r14
   19590:	d3 a2       	std	Z+35, r13	; 0x23
   19592:	c2 a2       	std	Z+34, r12	; 0x22
   19594:	c7 01       	movw	r24, r14
   19596:	83 dd       	rcall	.-1274   	; 0x1909e <lif_check_dir>
   19598:	8c 01       	movw	r16, r24
   1959a:	89 2b       	or	r24, r25
   1959c:	b9 f4       	brne	.+46     	; 0x195cc <lif_readdirindex+0xc0>
   1959e:	ed b7       	in	r30, 0x3d	; 61
   195a0:	fe b7       	in	r31, 0x3e	; 62
   195a2:	d5 82       	std	Z+5, r13	; 0x05
   195a4:	c4 82       	std	Z+4, r12	; 0x04
   195a6:	83 e7       	ldi	r24, 0x73	; 115
   195a8:	9a e3       	ldi	r25, 0x3A	; 58
   195aa:	a0 e0       	ldi	r26, 0x00	; 0
   195ac:	81 83       	std	Z+1, r24	; 0x01
   195ae:	92 83       	std	Z+2, r25	; 0x02
   195b0:	a3 83       	std	Z+3, r26	; 0x03
   195b2:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   195b6:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   195ba:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   195be:	92 ff       	sbrs	r25, 2
   195c0:	b0 cf       	rjmp	.-160    	; 0x19522 <lif_readdirindex+0x16>
   195c2:	60 e5       	ldi	r22, 0x50	; 80
   195c4:	75 e1       	ldi	r23, 0x15	; 21
   195c6:	c7 01       	movw	r24, r14
   195c8:	c9 da       	rcall	.-2670   	; 0x18b5c <lif_dump_vol>
   195ca:	02 c0       	rjmp	.+4      	; 0x195d0 <lif_readdirindex+0xc4>
   195cc:	01 e0       	ldi	r16, 0x01	; 1
   195ce:	10 e0       	ldi	r17, 0x00	; 0
   195d0:	c8 01       	movw	r24, r16
   195d2:	a5 96       	adiw	r28, 0x25	; 37
   195d4:	e8 e0       	ldi	r30, 0x08	; 8
   195d6:	0c 94 ee e3 	jmp	0x1c7dc	; 0x1c7dc <__epilogue_restores__+0x14>

000195da <lif_writedirindex>:
   195da:	a0 e2       	ldi	r26, 0x20	; 32
   195dc:	b0 e0       	ldi	r27, 0x00	; 0
   195de:	e3 ef       	ldi	r30, 0xF3	; 243
   195e0:	fa ec       	ldi	r31, 0xCA	; 202
   195e2:	0c 94 d0 e3 	jmp	0x1c7a0	; 0x1c7a0 <__prologue_saves__+0x10>
   195e6:	5c 01       	movw	r10, r24
   195e8:	6b 01       	movw	r12, r22
   195ea:	59 dd       	rcall	.-1358   	; 0x1909e <lif_check_dir>
   195ec:	7c 01       	movw	r14, r24
   195ee:	89 2b       	or	r24, r25
   195f0:	71 f4       	brne	.+28     	; 0x1960e <lif_writedirindex+0x34>
   195f2:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   195f6:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   195fa:	92 fd       	sbrc	r25, 2
   195fc:	03 c0       	rjmp	.+6      	; 0x19604 <lif_writedirindex+0x2a>
   195fe:	e1 2c       	mov	r14, r1
   19600:	f1 2c       	mov	r15, r1
   19602:	42 c0       	rjmp	.+132    	; 0x19688 <lif_writedirindex+0xae>
   19604:	61 e6       	ldi	r22, 0x61	; 97
   19606:	75 e1       	ldi	r23, 0x15	; 21
   19608:	c5 01       	movw	r24, r10
   1960a:	a8 da       	rcall	.-2736   	; 0x18b5c <lif_dump_vol>
   1960c:	3d c0       	rjmp	.+122    	; 0x19688 <lif_writedirindex+0xae>
   1960e:	b6 01       	movw	r22, r12
   19610:	c5 01       	movw	r24, r10
   19612:	14 df       	rcall	.-472    	; 0x1943c <lif_checkdirindex>
   19614:	89 2b       	or	r24, r25
   19616:	99 f3       	breq	.-26     	; 0x195fe <lif_writedirindex+0x24>
   19618:	f5 01       	movw	r30, r10
   1961a:	e6 5a       	subi	r30, 0xA6	; 166
   1961c:	ff 4f       	sbci	r31, 0xFF	; 255
   1961e:	80 81       	ld	r24, Z
   19620:	91 81       	ldd	r25, Z+1	; 0x01
   19622:	01 96       	adiw	r24, 0x01	; 1
   19624:	19 f4       	brne	.+6      	; 0x1962c <lif_writedirindex+0x52>
   19626:	f5 01       	movw	r30, r10
   19628:	d3 a2       	std	Z+35, r13	; 0x23
   1962a:	c2 a2       	std	Z+34, r12	; 0x22
   1962c:	f5 01       	movw	r30, r10
   1962e:	85 a5       	ldd	r24, Z+45	; 0x2d
   19630:	96 a5       	ldd	r25, Z+46	; 0x2e
   19632:	a7 a5       	ldd	r26, Z+47	; 0x2f
   19634:	b0 a9       	ldd	r27, Z+48	; 0x30
   19636:	ba 2f       	mov	r27, r26
   19638:	a9 2f       	mov	r26, r25
   1963a:	98 2f       	mov	r25, r24
   1963c:	88 27       	eor	r24, r24
   1963e:	0d 2c       	mov	r0, r13
   19640:	00 0c       	add	r0, r0
   19642:	ee 08       	sbc	r14, r14
   19644:	ff 08       	sbc	r15, r15
   19646:	35 e0       	ldi	r19, 0x05	; 5
   19648:	cc 0c       	add	r12, r12
   1964a:	dd 1c       	adc	r13, r13
   1964c:	ee 1c       	adc	r14, r14
   1964e:	ff 1c       	adc	r15, r15
   19650:	3a 95       	dec	r19
   19652:	d1 f7       	brne	.-12     	; 0x19648 <lif_writedirindex+0x6e>
   19654:	c8 0e       	add	r12, r24
   19656:	d9 1e       	adc	r13, r25
   19658:	ea 1e       	adc	r14, r26
   1965a:	fb 1e       	adc	r15, r27
   1965c:	be 01       	movw	r22, r28
   1965e:	6f 5f       	subi	r22, 0xFF	; 255
   19660:	7f 4f       	sbci	r23, 0xFF	; 255
   19662:	c5 01       	movw	r24, r10
   19664:	a7 d8       	rcall	.-3762   	; 0x187b4 <lif_dir2str>
   19666:	00 e2       	ldi	r16, 0x20	; 32
   19668:	10 e0       	ldi	r17, 0x00	; 0
   1966a:	a7 01       	movw	r20, r14
   1966c:	96 01       	movw	r18, r12
   1966e:	be 01       	movw	r22, r28
   19670:	6f 5f       	subi	r22, 0xFF	; 255
   19672:	7f 4f       	sbci	r23, 0xFF	; 255
   19674:	c5 01       	movw	r24, r10
   19676:	0e 94 7d c1 	call	0x182fa	; 0x182fa <lif_write>
   1967a:	31 e0       	ldi	r19, 0x01	; 1
   1967c:	20 e0       	ldi	r18, 0x00	; 0
   1967e:	80 97       	sbiw	r24, 0x20	; 32
   19680:	0c f4       	brge	.+2      	; 0x19684 <lif_writedirindex+0xaa>
   19682:	30 e0       	ldi	r19, 0x00	; 0
   19684:	e3 2e       	mov	r14, r19
   19686:	f2 2e       	mov	r15, r18
   19688:	c7 01       	movw	r24, r14
   1968a:	a0 96       	adiw	r28, 0x20	; 32
   1968c:	ea e0       	ldi	r30, 0x0A	; 10
   1968e:	0c 94 ec e3 	jmp	0x1c7d8	; 0x1c7d8 <__epilogue_restores__+0x10>

00019692 <lif_writedirEOF>:
   19692:	0f 93       	push	r16
   19694:	1f 93       	push	r17
   19696:	cf 93       	push	r28
   19698:	df 93       	push	r29
   1969a:	ec 01       	movw	r28, r24
   1969c:	8b 01       	movw	r16, r22
   1969e:	4f da       	rcall	.-2914   	; 0x18b3e <lif_dir_clear>
   196a0:	fe 01       	movw	r30, r28
   196a2:	e6 5a       	subi	r30, 0xA6	; 166
   196a4:	ff 4f       	sbci	r31, 0xFF	; 255
   196a6:	8f ef       	ldi	r24, 0xFF	; 255
   196a8:	9f ef       	ldi	r25, 0xFF	; 255
   196aa:	91 83       	std	Z+1, r25	; 0x01
   196ac:	80 83       	st	Z, r24
   196ae:	1b a3       	std	Y+35, r17	; 0x23
   196b0:	0a a3       	std	Y+34, r16	; 0x22
   196b2:	b8 01       	movw	r22, r16
   196b4:	ce 01       	movw	r24, r28
   196b6:	91 df       	rcall	.-222    	; 0x195da <lif_writedirindex>
   196b8:	df 91       	pop	r29
   196ba:	cf 91       	pop	r28
   196bc:	1f 91       	pop	r17
   196be:	0f 91       	pop	r16
   196c0:	08 95       	ret

000196c2 <lif_updatefree>:
   196c2:	2f 92       	push	r2
   196c4:	3f 92       	push	r3
   196c6:	4f 92       	push	r4
   196c8:	5f 92       	push	r5
   196ca:	6f 92       	push	r6
   196cc:	7f 92       	push	r7
   196ce:	8f 92       	push	r8
   196d0:	af 92       	push	r10
   196d2:	bf 92       	push	r11
   196d4:	cf 92       	push	r12
   196d6:	df 92       	push	r13
   196d8:	ef 92       	push	r14
   196da:	ff 92       	push	r15
   196dc:	0f 93       	push	r16
   196de:	1f 93       	push	r17
   196e0:	cf 93       	push	r28
   196e2:	df 93       	push	r29
   196e4:	cd b7       	in	r28, 0x3d	; 61
   196e6:	de b7       	in	r29, 0x3e	; 62
   196e8:	2f 97       	sbiw	r28, 0x0f	; 15
   196ea:	0f b6       	in	r0, 0x3f	; 63
   196ec:	f8 94       	cli
   196ee:	de bf       	out	0x3e, r29	; 62
   196f0:	0f be       	out	0x3f, r0	; 63
   196f2:	cd bf       	out	0x3d, r28	; 61
   196f4:	9f 87       	std	Y+15, r25	; 0x0f
   196f6:	8e 87       	std	Y+14, r24	; 0x0e
   196f8:	fc 01       	movw	r30, r24
   196fa:	24 84       	ldd	r2, Z+12	; 0x0c
   196fc:	35 84       	ldd	r3, Z+13	; 0x0d
   196fe:	46 84       	ldd	r4, Z+14	; 0x0e
   19700:	57 84       	ldd	r5, Z+15	; 0x0f
   19702:	80 89       	ldd	r24, Z+16	; 0x10
   19704:	91 89       	ldd	r25, Z+17	; 0x11
   19706:	a2 89       	ldd	r26, Z+18	; 0x12
   19708:	b3 89       	ldd	r27, Z+19	; 0x13
   1970a:	80 8f       	std	Z+24, r24	; 0x18
   1970c:	91 8f       	std	Z+25, r25	; 0x19
   1970e:	a2 8f       	std	Z+26, r26	; 0x1a
   19710:	b3 8f       	std	Z+27, r27	; 0x1b
   19712:	14 8a       	std	Z+20, r1	; 0x14
   19714:	15 8a       	std	Z+21, r1	; 0x15
   19716:	16 8a       	std	Z+22, r1	; 0x16
   19718:	17 8a       	std	Z+23, r1	; 0x17
   1971a:	17 8e       	std	Z+31, r1	; 0x1f
   1971c:	16 8e       	std	Z+30, r1	; 0x1e
   1971e:	15 8e       	std	Z+29, r1	; 0x1d
   19720:	14 8e       	std	Z+28, r1	; 0x1c
   19722:	11 a2       	std	Z+33, r1	; 0x21
   19724:	10 a2       	std	Z+32, r1	; 0x20
   19726:	13 a2       	std	Z+35, r1	; 0x23
   19728:	12 a2       	std	Z+34, r1	; 0x22
   1972a:	cc 24       	eor	r12, r12
   1972c:	c3 94       	inc	r12
   1972e:	d1 2c       	mov	r13, r1
   19730:	0f ef       	ldi	r16, 0xFF	; 255
   19732:	1f ef       	ldi	r17, 0xFF	; 255
   19734:	e6 5a       	subi	r30, 0xA6	; 166
   19736:	ff 4f       	sbci	r31, 0xFF	; 255
   19738:	f9 87       	std	Y+9, r31	; 0x09
   1973a:	e8 87       	std	Y+8, r30	; 0x08
   1973c:	ae 84       	ldd	r10, Y+14	; 0x0e
   1973e:	bf 84       	ldd	r11, Y+15	; 0x0f
   19740:	fc e5       	ldi	r31, 0x5C	; 92
   19742:	af 0e       	add	r10, r31
   19744:	b1 1c       	adc	r11, r1
   19746:	8e 85       	ldd	r24, Y+14	; 0x0e
   19748:	9f 85       	ldd	r25, Y+15	; 0x0f
   1974a:	80 5a       	subi	r24, 0xA0	; 160
   1974c:	9f 4f       	sbci	r25, 0xFF	; 255
   1974e:	9b 87       	std	Y+11, r25	; 0x0b
   19750:	8a 87       	std	Y+10, r24	; 0x0a
   19752:	ee 85       	ldd	r30, Y+14	; 0x0e
   19754:	ff 85       	ldd	r31, Y+15	; 0x0f
   19756:	e1 5b       	subi	r30, 0xB1	; 177
   19758:	ff 4f       	sbci	r31, 0xFF	; 255
   1975a:	fd 87       	std	Y+13, r31	; 0x0d
   1975c:	ec 87       	std	Y+12, r30	; 0x0c
   1975e:	86 e2       	ldi	r24, 0x26	; 38
   19760:	9a e3       	ldi	r25, 0x3A	; 58
   19762:	3c 01       	movw	r6, r24
   19764:	81 2c       	mov	r8, r1
   19766:	76 01       	movw	r14, r12
   19768:	21 e0       	ldi	r18, 0x01	; 1
   1976a:	e2 1a       	sub	r14, r18
   1976c:	f1 08       	sbc	r15, r1
   1976e:	b7 01       	movw	r22, r14
   19770:	8e 85       	ldd	r24, Y+14	; 0x0e
   19772:	9f 85       	ldd	r25, Y+15	; 0x0f
   19774:	cb de       	rcall	.-618    	; 0x1950c <lif_readdirindex>
   19776:	89 2b       	or	r24, r25
   19778:	19 f4       	brne	.+6      	; 0x19780 <lif_updatefree+0xbe>
   1977a:	80 e0       	ldi	r24, 0x00	; 0
   1977c:	90 e0       	ldi	r25, 0x00	; 0
   1977e:	91 c0       	rjmp	.+290    	; 0x198a2 <lif_updatefree+0x1e0>
   19780:	e8 85       	ldd	r30, Y+8	; 0x08
   19782:	f9 85       	ldd	r31, Y+9	; 0x09
   19784:	80 81       	ld	r24, Z
   19786:	91 81       	ldd	r25, Z+1	; 0x01
   19788:	8f 3f       	cpi	r24, 0xFF	; 255
   1978a:	ff ef       	ldi	r31, 0xFF	; 255
   1978c:	9f 07       	cpc	r25, r31
   1978e:	c1 f4       	brne	.+48     	; 0x197c0 <lif_updatefree+0xfe>
   19790:	ee 85       	ldd	r30, Y+14	; 0x0e
   19792:	ff 85       	ldd	r31, Y+15	; 0x0f
   19794:	0f 3f       	cpi	r16, 0xFF	; 255
   19796:	2f ef       	ldi	r18, 0xFF	; 255
   19798:	12 07       	cpc	r17, r18
   1979a:	09 f4       	brne	.+2      	; 0x1979e <lif_updatefree+0xdc>
   1979c:	78 c0       	rjmp	.+240    	; 0x1988e <lif_updatefree+0x1cc>
   1979e:	13 a3       	std	Z+35, r17	; 0x23
   197a0:	02 a3       	std	Z+34, r16	; 0x22
   197a2:	e0 1a       	sub	r14, r16
   197a4:	f1 0a       	sbc	r15, r17
   197a6:	86 8d       	ldd	r24, Z+30	; 0x1e
   197a8:	97 8d       	ldd	r25, Z+31	; 0x1f
   197aa:	8e 19       	sub	r24, r14
   197ac:	9f 09       	sbc	r25, r15
   197ae:	97 8f       	std	Z+31, r25	; 0x1f
   197b0:	86 8f       	std	Z+30, r24	; 0x1e
   197b2:	b8 01       	movw	r22, r16
   197b4:	cf 01       	movw	r24, r30
   197b6:	6d df       	rcall	.-294    	; 0x19692 <lif_writedirEOF>
   197b8:	89 2b       	or	r24, r25
   197ba:	09 f0       	breq	.+2      	; 0x197be <lif_updatefree+0xfc>
   197bc:	6a c0       	rjmp	.+212    	; 0x19892 <lif_updatefree+0x1d0>
   197be:	dd cf       	rjmp	.-70     	; 0x1977a <lif_updatefree+0xb8>
   197c0:	89 2b       	or	r24, r25
   197c2:	81 f4       	brne	.+32     	; 0x197e4 <lif_updatefree+0x122>
   197c4:	0f 3f       	cpi	r16, 0xFF	; 255
   197c6:	ff ef       	ldi	r31, 0xFF	; 255
   197c8:	1f 07       	cpc	r17, r31
   197ca:	09 f4       	brne	.+2      	; 0x197ce <lif_updatefree+0x10c>
   197cc:	87 01       	movw	r16, r14
   197ce:	ee 85       	ldd	r30, Y+14	; 0x0e
   197d0:	ff 85       	ldd	r31, Y+15	; 0x0f
   197d2:	86 8d       	ldd	r24, Z+30	; 0x1e
   197d4:	97 8d       	ldd	r25, Z+31	; 0x1f
   197d6:	01 96       	adiw	r24, 0x01	; 1
   197d8:	97 8f       	std	Z+31, r25	; 0x1f
   197da:	86 8f       	std	Z+30, r24	; 0x1e
   197dc:	ff ef       	ldi	r31, 0xFF	; 255
   197de:	cf 1a       	sub	r12, r31
   197e0:	df 0a       	sbc	r13, r31
   197e2:	c1 cf       	rjmp	.-126    	; 0x19766 <lif_updatefree+0xa4>
   197e4:	f5 01       	movw	r30, r10
   197e6:	80 81       	ld	r24, Z
   197e8:	91 81       	ldd	r25, Z+1	; 0x01
   197ea:	a2 81       	ldd	r26, Z+2	; 0x02
   197ec:	b3 81       	ldd	r27, Z+3	; 0x03
   197ee:	82 15       	cp	r24, r2
   197f0:	93 05       	cpc	r25, r3
   197f2:	a4 05       	cpc	r26, r4
   197f4:	b5 05       	cpc	r27, r5
   197f6:	b8 f4       	brcc	.+46     	; 0x19826 <lif_updatefree+0x164>
   197f8:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   197fc:	80 ff       	sbrs	r24, 0
   197fe:	13 c0       	rjmp	.+38     	; 0x19826 <lif_updatefree+0x164>
   19800:	8c 85       	ldd	r24, Y+12	; 0x0c
   19802:	9d 85       	ldd	r25, Y+13	; 0x0d
   19804:	ed b7       	in	r30, 0x3d	; 61
   19806:	fe b7       	in	r31, 0x3e	; 62
   19808:	97 83       	std	Z+7, r25	; 0x07
   1980a:	86 83       	std	Z+6, r24	; 0x06
   1980c:	ee 85       	ldd	r30, Y+14	; 0x0e
   1980e:	ff 85       	ldd	r31, Y+15	; 0x0f
   19810:	80 81       	ld	r24, Z
   19812:	91 81       	ldd	r25, Z+1	; 0x01
   19814:	ed b7       	in	r30, 0x3d	; 61
   19816:	fe b7       	in	r31, 0x3e	; 62
   19818:	95 83       	std	Z+5, r25	; 0x05
   1981a:	84 83       	std	Z+4, r24	; 0x04
   1981c:	61 82       	std	Z+1, r6	; 0x01
   1981e:	72 82       	std	Z+2, r7	; 0x02
   19820:	83 82       	std	Z+3, r8	; 0x03
   19822:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   19826:	ea 85       	ldd	r30, Y+10	; 0x0a
   19828:	fb 85       	ldd	r31, Y+11	; 0x0b
   1982a:	80 81       	ld	r24, Z
   1982c:	91 81       	ldd	r25, Z+1	; 0x01
   1982e:	a2 81       	ldd	r26, Z+2	; 0x02
   19830:	b3 81       	ldd	r27, Z+3	; 0x03
   19832:	ee 85       	ldd	r30, Y+14	; 0x0e
   19834:	ff 85       	ldd	r31, Y+15	; 0x0f
   19836:	44 89       	ldd	r20, Z+20	; 0x14
   19838:	55 89       	ldd	r21, Z+21	; 0x15
   1983a:	66 89       	ldd	r22, Z+22	; 0x16
   1983c:	77 89       	ldd	r23, Z+23	; 0x17
   1983e:	48 0f       	add	r20, r24
   19840:	59 1f       	adc	r21, r25
   19842:	6a 1f       	adc	r22, r26
   19844:	7b 1f       	adc	r23, r27
   19846:	44 8b       	std	Z+20, r20	; 0x14
   19848:	55 8b       	std	Z+21, r21	; 0x15
   1984a:	66 8b       	std	Z+22, r22	; 0x16
   1984c:	77 8b       	std	Z+23, r23	; 0x17
   1984e:	40 8d       	ldd	r20, Z+24	; 0x18
   19850:	51 8d       	ldd	r21, Z+25	; 0x19
   19852:	62 8d       	ldd	r22, Z+26	; 0x1a
   19854:	73 8d       	ldd	r23, Z+27	; 0x1b
   19856:	48 1b       	sub	r20, r24
   19858:	59 0b       	sbc	r21, r25
   1985a:	6a 0b       	sbc	r22, r26
   1985c:	7b 0b       	sbc	r23, r27
   1985e:	40 8f       	std	Z+24, r20	; 0x18
   19860:	51 8f       	std	Z+25, r21	; 0x19
   19862:	62 8f       	std	Z+26, r22	; 0x1a
   19864:	73 8f       	std	Z+27, r23	; 0x1b
   19866:	24 8d       	ldd	r18, Z+28	; 0x1c
   19868:	35 8d       	ldd	r19, Z+29	; 0x1d
   1986a:	2f 5f       	subi	r18, 0xFF	; 255
   1986c:	3f 4f       	sbci	r19, 0xFF	; 255
   1986e:	35 8f       	std	Z+29, r19	; 0x1d
   19870:	24 8f       	std	Z+28, r18	; 0x1c
   19872:	f5 01       	movw	r30, r10
   19874:	40 81       	ld	r20, Z
   19876:	51 81       	ldd	r21, Z+1	; 0x01
   19878:	62 81       	ldd	r22, Z+2	; 0x02
   1987a:	73 81       	ldd	r23, Z+3	; 0x03
   1987c:	1c 01       	movw	r2, r24
   1987e:	2d 01       	movw	r4, r26
   19880:	24 0e       	add	r2, r20
   19882:	35 1e       	adc	r3, r21
   19884:	46 1e       	adc	r4, r22
   19886:	57 1e       	adc	r5, r23
   19888:	0f ef       	ldi	r16, 0xFF	; 255
   1988a:	1f ef       	ldi	r17, 0xFF	; 255
   1988c:	a7 cf       	rjmp	.-178    	; 0x197dc <lif_updatefree+0x11a>
   1988e:	f3 a2       	std	Z+35, r15	; 0x23
   19890:	e2 a2       	std	Z+34, r14	; 0x22
   19892:	8f ef       	ldi	r24, 0xFF	; 255
   19894:	9f ef       	ldi	r25, 0xFF	; 255
   19896:	ee 85       	ldd	r30, Y+14	; 0x0e
   19898:	ff 85       	ldd	r31, Y+15	; 0x0f
   1989a:	91 a3       	std	Z+33, r25	; 0x21
   1989c:	80 a3       	std	Z+32, r24	; 0x20
   1989e:	8e 85       	ldd	r24, Y+14	; 0x0e
   198a0:	9f 85       	ldd	r25, Y+15	; 0x0f
   198a2:	2f 96       	adiw	r28, 0x0f	; 15
   198a4:	0f b6       	in	r0, 0x3f	; 63
   198a6:	f8 94       	cli
   198a8:	de bf       	out	0x3e, r29	; 62
   198aa:	0f be       	out	0x3f, r0	; 63
   198ac:	cd bf       	out	0x3d, r28	; 61
   198ae:	df 91       	pop	r29
   198b0:	cf 91       	pop	r28
   198b2:	1f 91       	pop	r17
   198b4:	0f 91       	pop	r16
   198b6:	ff 90       	pop	r15
   198b8:	ef 90       	pop	r14
   198ba:	df 90       	pop	r13
   198bc:	cf 90       	pop	r12
   198be:	bf 90       	pop	r11
   198c0:	af 90       	pop	r10
   198c2:	8f 90       	pop	r8
   198c4:	7f 90       	pop	r7
   198c6:	6f 90       	pop	r6
   198c8:	5f 90       	pop	r5
   198ca:	4f 90       	pop	r4
   198cc:	3f 90       	pop	r3
   198ce:	2f 90       	pop	r2
   198d0:	08 95       	ret

000198d2 <lif_create_volume>:
/// @param[in] dirstart:   Directory start sector
/// @param[in] dirsectors: Directory sectors
/// @return pointer to LIF structure
MEMSPACE
lif_t *lif_create_volume(char *imagename, char *liflabel, long dirstart, long dirsectors, long filesectors)
{
   198d2:	a9 e2       	ldi	r26, 0x29	; 41
   198d4:	b1 e0       	ldi	r27, 0x01	; 1
   198d6:	ef e6       	ldi	r30, 0x6F	; 111
   198d8:	fc ec       	ldi	r31, 0xCC	; 204
   198da:	0c 94 c8 e3 	jmp	0x1c790	; 0x1c790 <__prologue_saves__>
   198de:	4c 01       	movw	r8, r24
   198e0:	3b 01       	movw	r6, r22
   198e2:	19 01       	movw	r2, r18
   198e4:	2a 01       	movw	r4, r20
   198e6:	ca 5d       	subi	r28, 0xDA	; 218
   198e8:	de 4f       	sbci	r29, 0xFE	; 254
   198ea:	e8 82       	st	Y, r14
   198ec:	f9 82       	std	Y+1, r15	; 0x01
   198ee:	0a 83       	std	Y+2, r16	; 0x02
   198f0:	1b 83       	std	Y+3, r17	; 0x03
   198f2:	c6 52       	subi	r28, 0x26	; 38
   198f4:	d1 40       	sbci	r29, 0x01	; 1
   198f6:	c2 5e       	subi	r28, 0xE2	; 226
   198f8:	de 4f       	sbci	r29, 0xFE	; 254
   198fa:	a8 82       	st	Y, r10
   198fc:	b9 82       	std	Y+1, r11	; 0x01
   198fe:	ca 82       	std	Y+2, r12	; 0x02
   19900:	db 82       	std	Y+3, r13	; 0x03
   19902:	ce 51       	subi	r28, 0x1E	; 30
   19904:	d1 40       	sbci	r29, 0x01	; 1
    long i;
    long offset;
    long count;
    uint8_t buffer[LIF_SECTOR_SIZE];

    time_t t = time(NULL);
   19906:	80 e0       	ldi	r24, 0x00	; 0
   19908:	90 e0       	ldi	r25, 0x00	; 0
   1990a:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <time>
   1990e:	5b 01       	movw	r10, r22
   19910:	6c 01       	movw	r12, r24

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
   19912:	64 e7       	ldi	r22, 0x74	; 116
   19914:	70 e0       	ldi	r23, 0x00	; 0
   19916:	80 e0       	ldi	r24, 0x00	; 0
   19918:	90 e0       	ldi	r25, 0x00	; 0
   1991a:	0e 94 3e c0 	call	0x1807c	; 0x1807c <lif_calloc>
   1991e:	7c 01       	movw	r14, r24
    if(LIF == NULL)
   19920:	89 2b       	or	r24, r25
   19922:	09 f4       	brne	.+2      	; 0x19926 <lif_create_volume+0x54>
   19924:	b6 c2       	rjmp	.+1388   	; 0x19e92 <lif_create_volume+0x5c0>
        return(NULL);

	printf("Creating:%s, Label:[%s], Directory Start %ld, Directory Size: %ld, File Sectors:%ld\n",
   19926:	c2 5e       	subi	r28, 0xE2	; 226
   19928:	de 4f       	sbci	r29, 0xFE	; 254
   1992a:	28 81       	ld	r18, Y
   1992c:	39 81       	ldd	r19, Y+1	; 0x01
   1992e:	4a 81       	ldd	r20, Y+2	; 0x02
   19930:	5b 81       	ldd	r21, Y+3	; 0x03
   19932:	ce 51       	subi	r28, 0x1E	; 30
   19934:	d1 40       	sbci	r29, 0x01	; 1
   19936:	ed b7       	in	r30, 0x3d	; 61
   19938:	fe b7       	in	r31, 0x3e	; 62
   1993a:	20 8b       	std	Z+16, r18	; 0x10
   1993c:	31 8b       	std	Z+17, r19	; 0x11
   1993e:	42 8b       	std	Z+18, r20	; 0x12
   19940:	53 8b       	std	Z+19, r21	; 0x13
   19942:	ca 5d       	subi	r28, 0xDA	; 218
   19944:	de 4f       	sbci	r29, 0xFE	; 254
   19946:	28 81       	ld	r18, Y
   19948:	39 81       	ldd	r19, Y+1	; 0x01
   1994a:	4a 81       	ldd	r20, Y+2	; 0x02
   1994c:	5b 81       	ldd	r21, Y+3	; 0x03
   1994e:	c6 52       	subi	r28, 0x26	; 38
   19950:	d1 40       	sbci	r29, 0x01	; 1
   19952:	24 87       	std	Z+12, r18	; 0x0c
   19954:	35 87       	std	Z+13, r19	; 0x0d
   19956:	46 87       	std	Z+14, r20	; 0x0e
   19958:	57 87       	std	Z+15, r21	; 0x0f
   1995a:	20 86       	std	Z+8, r2	; 0x08
   1995c:	31 86       	std	Z+9, r3	; 0x09
   1995e:	42 86       	std	Z+10, r4	; 0x0a
   19960:	53 86       	std	Z+11, r5	; 0x0b
   19962:	77 82       	std	Z+7, r7	; 0x07
   19964:	66 82       	std	Z+6, r6	; 0x06
   19966:	95 82       	std	Z+5, r9	; 0x05
   19968:	84 82       	std	Z+4, r8	; 0x04
   1996a:	81 e0       	ldi	r24, 0x01	; 1
   1996c:	9b e3       	ldi	r25, 0x3B	; 59
   1996e:	a0 e0       	ldi	r26, 0x00	; 0
   19970:	81 83       	std	Z+1, r24	; 0x01
   19972:	92 83       	std	Z+2, r25	; 0x02
   19974:	a3 83       	std	Z+3, r26	; 0x03
   19976:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
		imagename, liflabel, dirstart, dirsectors, filesectors );

    if(debuglevel & 0x400)
   1997a:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1997e:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   19982:	92 ff       	sbrs	r25, 2
   19984:	04 c0       	rjmp	.+8      	; 0x1998e <lif_create_volume+0xbc>
        lif_dump_vol(LIF,"lif_create_volume");
   19986:	63 e7       	ldi	r22, 0x73	; 115
   19988:	75 e1       	ldi	r23, 0x15	; 21
   1998a:	c7 01       	movw	r24, r14
    
    lif_image_clear(LIF);
   1998c:	e7 d8       	rcall	.-3634   	; 0x18b5c <lif_dump_vol>
   1998e:	c7 01       	movw	r24, r14

    // Initialize volume header
    LIF->VOL.LIFid = 0x8000;
   19990:	d0 d8       	rcall	.-3680   	; 0x18b32 <lif_image_clear>
   19992:	80 e0       	ldi	r24, 0x00	; 0
   19994:	90 e8       	ldi	r25, 0x80	; 128
   19996:	f7 01       	movw	r30, r14
   19998:	95 a3       	std	Z+37, r25	; 0x25
    lif_fixname(LIF->VOL.Label, liflabel, 6);
   1999a:	84 a3       	std	Z+36, r24	; 0x24
   1999c:	46 e0       	ldi	r20, 0x06	; 6
   1999e:	50 e0       	ldi	r21, 0x00	; 0
   199a0:	b3 01       	movw	r22, r6
   199a2:	c7 01       	movw	r24, r14
   199a4:	86 96       	adiw	r24, 0x26	; 38
   199a6:	0e 94 7d c2 	call	0x184fa	; 0x184fa <lif_fixname>
    LIF->VOL.DirStartSector = dirstart;
   199aa:	f7 01       	movw	r30, r14
   199ac:	25 a6       	std	Z+45, r2	; 0x2d
   199ae:	36 a6       	std	Z+46, r3	; 0x2e
   199b0:	47 a6       	std	Z+47, r4	; 0x2f
    LIF->VOL.DirSectors = dirsectors;
   199b2:	50 aa       	std	Z+48, r5	; 0x30
   199b4:	ca 5d       	subi	r28, 0xDA	; 218
   199b6:	de 4f       	sbci	r29, 0xFE	; 254
   199b8:	28 81       	ld	r18, Y
   199ba:	39 81       	ldd	r19, Y+1	; 0x01
   199bc:	4a 81       	ldd	r20, Y+2	; 0x02
   199be:	5b 81       	ldd	r21, Y+3	; 0x03
   199c0:	c6 52       	subi	r28, 0x26	; 38
   199c2:	d1 40       	sbci	r29, 0x01	; 1
   199c4:	25 ab       	std	Z+53, r18	; 0x35
   199c6:	36 ab       	std	Z+54, r19	; 0x36
   199c8:	47 ab       	std	Z+55, r20	; 0x37
    LIF->VOL.System3000LIFid = 0x1000;
   199ca:	50 af       	std	Z+56, r21	; 0x38
   199cc:	80 e0       	ldi	r24, 0x00	; 0
   199ce:	90 e1       	ldi	r25, 0x10	; 16
   199d0:	92 ab       	std	Z+50, r25	; 0x32
    LIF->VOL.tracks_per_side = 0;
   199d2:	81 ab       	std	Z+49, r24	; 0x31
   199d4:	fd 96       	adiw	r30, 0x3d	; 61
   199d6:	10 82       	st	Z, r1
   199d8:	11 82       	std	Z+1, r1	; 0x01
   199da:	12 82       	std	Z+2, r1	; 0x02
    LIF->VOL.sides = 0;
   199dc:	13 82       	std	Z+3, r1	; 0x03
   199de:	34 96       	adiw	r30, 0x04	; 4
   199e0:	10 82       	st	Z, r1
   199e2:	11 82       	std	Z+1, r1	; 0x01
   199e4:	12 82       	std	Z+2, r1	; 0x02
    LIF->VOL.sectors_per_track = 0;
   199e6:	13 82       	std	Z+3, r1	; 0x03
   199e8:	34 96       	adiw	r30, 0x04	; 4
   199ea:	10 82       	st	Z, r1
   199ec:	11 82       	std	Z+1, r1	; 0x01
   199ee:	12 82       	std	Z+2, r1	; 0x02
    ///@brief 0 causes time to return the current date

    lif_time2lifbcd(t, LIF->VOL.date);
   199f0:	13 82       	std	Z+3, r1	; 0x03
   199f2:	a7 01       	movw	r20, r14
   199f4:	47 5b       	subi	r20, 0xB7	; 183
   199f6:	5f 4f       	sbci	r21, 0xFF	; 255
   199f8:	c6 01       	movw	r24, r12
   199fa:	b5 01       	movw	r22, r10
   199fc:	0e 94 c2 c4 	call	0x18984	; 0x18984 <lif_time2lifbcd>

    // update LIF headers
    LIF->name = lif_stralloc(imagename);
   19a00:	c4 01       	movw	r24, r8
   19a02:	0e 94 89 c0 	call	0x18112	; 0x18112 <lif_stralloc>
   19a06:	d7 01       	movw	r26, r14
   19a08:	8d 93       	st	X+, r24
    if(LIF->name == NULL)
   19a0a:	9c 93       	st	X, r25
   19a0c:	89 2b       	or	r24, r25
   19a0e:	09 f4       	brne	.+2      	; 0x19a12 <lif_create_volume+0x140>
        lif_close_volume(LIF);
        return(NULL);
    }

    // Initilize all LIF headers
    LIF->filesectors = filesectors;
   19a10:	35 c2       	rjmp	.+1130   	; 0x19e7c <lif_create_volume+0x5aa>
   19a12:	c2 5e       	subi	r28, 0xE2	; 226
   19a14:	de 4f       	sbci	r29, 0xFE	; 254
   19a16:	28 81       	ld	r18, Y
   19a18:	39 81       	ldd	r19, Y+1	; 0x01
   19a1a:	4a 81       	ldd	r20, Y+2	; 0x02
   19a1c:	5b 81       	ldd	r21, Y+3	; 0x03
   19a1e:	ce 51       	subi	r28, 0x1E	; 30
   19a20:	d1 40       	sbci	r29, 0x01	; 1
   19a22:	f7 01       	movw	r30, r14
   19a24:	20 8b       	std	Z+16, r18	; 0x10
   19a26:	31 8b       	std	Z+17, r19	; 0x11
   19a28:	42 8b       	std	Z+18, r20	; 0x12
    LIF->filestart = dirstart + dirsectors;
   19a2a:	53 8b       	std	Z+19, r21	; 0x13
   19a2c:	ca 5d       	subi	r28, 0xDA	; 218
   19a2e:	de 4f       	sbci	r29, 0xFE	; 254
   19a30:	88 81       	ld	r24, Y
   19a32:	99 81       	ldd	r25, Y+1	; 0x01
   19a34:	aa 81       	ldd	r26, Y+2	; 0x02
   19a36:	bb 81       	ldd	r27, Y+3	; 0x03
   19a38:	c6 52       	subi	r28, 0x26	; 38
   19a3a:	d1 40       	sbci	r29, 0x01	; 1
   19a3c:	82 0d       	add	r24, r2
   19a3e:	93 1d       	adc	r25, r3
   19a40:	a4 1d       	adc	r26, r4
   19a42:	b5 1d       	adc	r27, r5
   19a44:	84 87       	std	Z+12, r24	; 0x0c
   19a46:	95 87       	std	Z+13, r25	; 0x0d
   19a48:	a6 87       	std	Z+14, r26	; 0x0e
    LIF->sectors = (LIF->filestart+LIF->filesectors);
   19a4a:	b7 87       	std	Z+15, r27	; 0x0f
   19a4c:	82 0f       	add	r24, r18
   19a4e:	93 1f       	adc	r25, r19
   19a50:	a4 1f       	adc	r26, r20
   19a52:	b5 1f       	adc	r27, r21
   19a54:	84 83       	std	Z+4, r24	; 0x04
   19a56:	95 83       	std	Z+5, r25	; 0x05
   19a58:	a6 83       	std	Z+6, r26	; 0x06
    LIF->imagebytes = LIF->sectors * (long)LIF_SECTOR_SIZE;
   19a5a:	b7 83       	std	Z+7, r27	; 0x07
   19a5c:	ba 2f       	mov	r27, r26
   19a5e:	a9 2f       	mov	r26, r25
   19a60:	98 2f       	mov	r25, r24
   19a62:	88 27       	eor	r24, r24
   19a64:	80 87       	std	Z+8, r24	; 0x08
   19a66:	91 87       	std	Z+9, r25	; 0x09
   19a68:	a2 87       	std	Z+10, r26	; 0x0a
    LIF->freesectors = LIF->filesectors;
   19a6a:	b3 87       	std	Z+11, r27	; 0x0b
   19a6c:	20 8f       	std	Z+24, r18	; 0x18
   19a6e:	31 8f       	std	Z+25, r19	; 0x19
   19a70:	42 8f       	std	Z+26, r20	; 0x1a
    LIF->usedsectors = 0;
   19a72:	53 8f       	std	Z+27, r21	; 0x1b
   19a74:	14 8a       	std	Z+20, r1	; 0x14
   19a76:	15 8a       	std	Z+21, r1	; 0x15
   19a78:	16 8a       	std	Z+22, r1	; 0x16
    LIF->files = 0;
   19a7a:	17 8a       	std	Z+23, r1	; 0x17
   19a7c:	15 8e       	std	Z+29, r1	; 0x1d
    LIF->purged = 0;
   19a7e:	14 8e       	std	Z+28, r1	; 0x1c
   19a80:	17 8e       	std	Z+31, r1	; 0x1f
    LIF->dirindex = 0;
   19a82:	16 8e       	std	Z+30, r1	; 0x1e
   19a84:	11 a2       	std	Z+33, r1	; 0x21
    LIF->EOFindex = 0;
   19a86:	10 a2       	std	Z+32, r1	; 0x20
   19a88:	13 a2       	std	Z+35, r1	; 0x23

    memset(buffer,0,LIF_SECTOR_SIZE);
   19a8a:	12 a2       	std	Z+34, r1	; 0x22
   19a8c:	61 2c       	mov	r6, r1
   19a8e:	77 24       	eor	r7, r7
   19a90:	73 94       	inc	r7
   19a92:	9e 01       	movw	r18, r28
   19a94:	2c 5e       	subi	r18, 0xEC	; 236
   19a96:	3f 4f       	sbci	r19, 0xFF	; 255
   19a98:	49 01       	movw	r8, r18
   19a9a:	d9 01       	movw	r26, r18
   19a9c:	f3 01       	movw	r30, r6
   19a9e:	1d 92       	st	X+, r1
   19aa0:	31 97       	sbiw	r30, 0x01	; 1

    lif_vol2str(LIF,buffer);
   19aa2:	e9 f7       	brne	.-6      	; 0x19a9e <lif_create_volume+0x1cc>
   19aa4:	b9 01       	movw	r22, r18
   19aa6:	c7 01       	movw	r24, r14
   19aa8:	0e 94 ba c2 	call	0x18574	; 0x18574 <lif_vol2str>

    // Write Volume header
    LIF->fp = lif_open(LIF->name,"wb+");
   19aac:	64 e3       	ldi	r22, 0x34	; 52
   19aae:	78 e0       	ldi	r23, 0x08	; 8
   19ab0:	d7 01       	movw	r26, r14
   19ab2:	8d 91       	ld	r24, X+
   19ab4:	9c 91       	ld	r25, X
   19ab6:	0e 94 a8 c0 	call	0x18150	; 0x18150 <lif_open>
   19aba:	f7 01       	movw	r30, r14
   19abc:	93 83       	std	Z+3, r25	; 0x03
    if(LIF->fp == NULL)
   19abe:	82 83       	std	Z+2, r24	; 0x02
   19ac0:	89 2b       	or	r24, r25
   19ac2:	09 f4       	brne	.+2      	; 0x19ac6 <lif_create_volume+0x1f4>
    }

    offset = 0;
    count = 0;

    size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19ac4:	db c1       	rjmp	.+950    	; 0x19e7c <lif_create_volume+0x5aa>
   19ac6:	00 e0       	ldi	r16, 0x00	; 0
   19ac8:	11 e0       	ldi	r17, 0x01	; 1
   19aca:	20 e0       	ldi	r18, 0x00	; 0
   19acc:	30 e0       	ldi	r19, 0x00	; 0
   19ace:	a9 01       	movw	r20, r18
   19ad0:	b4 01       	movw	r22, r8
   19ad2:	c7 01       	movw	r24, r14
   19ad4:	0e 94 7d c1 	call	0x182fa	; 0x182fa <lif_write>
   19ad8:	9c 01       	movw	r18, r24
   19ada:	99 0f       	add	r25, r25
   19adc:	44 0b       	sbc	r20, r20
   19ade:	55 0b       	sbc	r21, r21
   19ae0:	ca 5e       	subi	r28, 0xEA	; 234
   19ae2:	de 4f       	sbci	r29, 0xFE	; 254
   19ae4:	28 83       	st	Y, r18
   19ae6:	39 83       	std	Y+1, r19	; 0x01
   19ae8:	4a 83       	std	Y+2, r20	; 0x02
   19aea:	5b 83       	std	Y+3, r21	; 0x03
   19aec:	c6 51       	subi	r28, 0x16	; 22

    if(size < LIF_SECTOR_SIZE)
   19aee:	d1 40       	sbci	r29, 0x01	; 1
   19af0:	2f 3f       	cpi	r18, 0xFF	; 255
   19af2:	31 05       	cpc	r19, r1
   19af4:	41 05       	cpc	r20, r1
   19af6:	51 05       	cpc	r21, r1
   19af8:	09 f0       	breq	.+2      	; 0x19afc <lif_create_volume+0x22a>
   19afa:	0c f4       	brge	.+2      	; 0x19afe <lif_create_volume+0x22c>
    }
    offset += size;
    ++count;


    memset(buffer,0,LIF_SECTOR_SIZE);
   19afc:	bf c1       	rjmp	.+894    	; 0x19e7c <lif_create_volume+0x5aa>
   19afe:	d4 01       	movw	r26, r8
   19b00:	f3 01       	movw	r30, r6
   19b02:	1d 92       	st	X+, r1
   19b04:	31 97       	sbiw	r30, 0x01	; 1

    // Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   19b06:	e9 f7       	brne	.-6      	; 0x19b02 <lif_create_volume+0x230>
   19b08:	21 e0       	ldi	r18, 0x01	; 1
   19b0a:	30 e0       	ldi	r19, 0x00	; 0
   19b0c:	40 e0       	ldi	r20, 0x00	; 0
   19b0e:	50 e0       	ldi	r21, 0x00	; 0
   19b10:	c6 5e       	subi	r28, 0xE6	; 230
   19b12:	de 4f       	sbci	r29, 0xFE	; 254
   19b14:	28 83       	st	Y, r18
   19b16:	39 83       	std	Y+1, r19	; 0x01
   19b18:	4a 83       	std	Y+2, r20	; 0x02
   19b1a:	5b 83       	std	Y+3, r21	; 0x03
   19b1c:	ca 51       	subi	r28, 0x1A	; 26
   19b1e:	d1 40       	sbci	r29, 0x01	; 1
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
            printf("\tWrote: %ld\r", count);
   19b20:	64 01       	movw	r12, r8
   19b22:	84 ef       	ldi	r24, 0xF4	; 244
   19b24:	9a e3       	ldi	r25, 0x3A	; 58
   19b26:	3c 01       	movw	r6, r24


    memset(buffer,0,LIF_SECTOR_SIZE);

    // Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   19b28:	81 2c       	mov	r8, r1
   19b2a:	c6 5e       	subi	r28, 0xE6	; 230
   19b2c:	de 4f       	sbci	r29, 0xFE	; 254
   19b2e:	88 81       	ld	r24, Y
   19b30:	99 81       	ldd	r25, Y+1	; 0x01
   19b32:	aa 81       	ldd	r26, Y+2	; 0x02
   19b34:	bb 81       	ldd	r27, Y+3	; 0x03
   19b36:	ca 51       	subi	r28, 0x1A	; 26
   19b38:	d1 40       	sbci	r29, 0x01	; 1
   19b3a:	82 15       	cp	r24, r2
   19b3c:	93 05       	cpc	r25, r3
   19b3e:	a4 05       	cpc	r26, r4
   19b40:	b5 05       	cpc	r27, r5
   19b42:	0c f0       	brlt	.+2      	; 0x19b46 <lif_create_volume+0x274>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19b44:	55 c0       	rjmp	.+170    	; 0x19bf0 <lif_create_volume+0x31e>
   19b46:	00 e0       	ldi	r16, 0x00	; 0
   19b48:	11 e0       	ldi	r17, 0x01	; 1
   19b4a:	ca 5e       	subi	r28, 0xEA	; 234
   19b4c:	de 4f       	sbci	r29, 0xFE	; 254
   19b4e:	28 81       	ld	r18, Y
   19b50:	39 81       	ldd	r19, Y+1	; 0x01
   19b52:	4a 81       	ldd	r20, Y+2	; 0x02
   19b54:	5b 81       	ldd	r21, Y+3	; 0x03
   19b56:	c6 51       	subi	r28, 0x16	; 22
   19b58:	d1 40       	sbci	r29, 0x01	; 1
   19b5a:	b6 01       	movw	r22, r12
   19b5c:	c7 01       	movw	r24, r14
   19b5e:	0e 94 7d c1 	call	0x182fa	; 0x182fa <lif_write>
   19b62:	09 2e       	mov	r0, r25
   19b64:	00 0c       	add	r0, r0
   19b66:	aa 0b       	sbc	r26, r26
        if(size < LIF_SECTOR_SIZE)
   19b68:	bb 0b       	sbc	r27, r27
   19b6a:	8f 3f       	cpi	r24, 0xFF	; 255
   19b6c:	91 05       	cpc	r25, r1
   19b6e:	a1 05       	cpc	r26, r1
   19b70:	b1 05       	cpc	r27, r1
   19b72:	09 f0       	breq	.+2      	; 0x19b76 <lif_create_volume+0x2a4>
   19b74:	0c f4       	brge	.+2      	; 0x19b78 <lif_create_volume+0x2a6>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   19b76:	82 c1       	rjmp	.+772    	; 0x19e7c <lif_create_volume+0x5aa>
   19b78:	ca 5e       	subi	r28, 0xEA	; 234
   19b7a:	de 4f       	sbci	r29, 0xFE	; 254
   19b7c:	28 81       	ld	r18, Y
   19b7e:	39 81       	ldd	r19, Y+1	; 0x01
   19b80:	4a 81       	ldd	r20, Y+2	; 0x02
   19b82:	5b 81       	ldd	r21, Y+3	; 0x03
   19b84:	c6 51       	subi	r28, 0x16	; 22
   19b86:	d1 40       	sbci	r29, 0x01	; 1
   19b88:	28 0f       	add	r18, r24
   19b8a:	39 1f       	adc	r19, r25
   19b8c:	4a 1f       	adc	r20, r26
   19b8e:	5b 1f       	adc	r21, r27
   19b90:	ca 5e       	subi	r28, 0xEA	; 234
   19b92:	de 4f       	sbci	r29, 0xFE	; 254
   19b94:	28 83       	st	Y, r18
   19b96:	39 83       	std	Y+1, r19	; 0x01
   19b98:	4a 83       	std	Y+2, r20	; 0x02
   19b9a:	5b 83       	std	Y+3, r21	; 0x03
   19b9c:	c6 51       	subi	r28, 0x16	; 22
            printf("\tWrote: %ld\r", count);
   19b9e:	d1 40       	sbci	r29, 0x01	; 1
   19ba0:	c6 5e       	subi	r28, 0xE6	; 230
   19ba2:	de 4f       	sbci	r29, 0xFE	; 254
   19ba4:	88 81       	ld	r24, Y
   19ba6:	99 81       	ldd	r25, Y+1	; 0x01
   19ba8:	aa 81       	ldd	r26, Y+2	; 0x02
   19baa:	bb 81       	ldd	r27, Y+3	; 0x03
   19bac:	ca 51       	subi	r28, 0x1A	; 26
   19bae:	d1 40       	sbci	r29, 0x01	; 1
   19bb0:	ed b7       	in	r30, 0x3d	; 61
   19bb2:	fe b7       	in	r31, 0x3e	; 62
   19bb4:	84 83       	std	Z+4, r24	; 0x04
   19bb6:	95 83       	std	Z+5, r25	; 0x05
   19bb8:	a6 83       	std	Z+6, r26	; 0x06
   19bba:	b7 83       	std	Z+7, r27	; 0x07
   19bbc:	61 82       	std	Z+1, r6	; 0x01
   19bbe:	72 82       	std	Z+2, r7	; 0x02
   19bc0:	83 82       	std	Z+3, r8	; 0x03
   19bc2:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>


    memset(buffer,0,LIF_SECTOR_SIZE);

    // Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   19bc6:	c6 5e       	subi	r28, 0xE6	; 230
   19bc8:	de 4f       	sbci	r29, 0xFE	; 254
   19bca:	28 81       	ld	r18, Y
   19bcc:	39 81       	ldd	r19, Y+1	; 0x01
   19bce:	4a 81       	ldd	r20, Y+2	; 0x02
   19bd0:	5b 81       	ldd	r21, Y+3	; 0x03
   19bd2:	ca 51       	subi	r28, 0x1A	; 26
   19bd4:	d1 40       	sbci	r29, 0x01	; 1
   19bd6:	2f 5f       	subi	r18, 0xFF	; 255
   19bd8:	3f 4f       	sbci	r19, 0xFF	; 255
   19bda:	4f 4f       	sbci	r20, 0xFF	; 255
   19bdc:	5f 4f       	sbci	r21, 0xFF	; 255
   19bde:	c6 5e       	subi	r28, 0xE6	; 230
   19be0:	de 4f       	sbci	r29, 0xFE	; 254
   19be2:	28 83       	st	Y, r18
   19be4:	39 83       	std	Y+1, r19	; 0x01
   19be6:	4a 83       	std	Y+2, r20	; 0x02
   19be8:	5b 83       	std	Y+3, r21	; 0x03
   19bea:	ca 51       	subi	r28, 0x1A	; 26
   19bec:	d1 40       	sbci	r29, 0x01	; 1
            printf("\tWrote: %ld\r", count);
        ++count;
    }

    // Write Directory sectors
    lif_dir_clear(LIF);
   19bee:	9d cf       	rjmp	.-198    	; 0x19b2a <lif_create_volume+0x258>
   19bf0:	c7 01       	movw	r24, r14
   19bf2:	0e 94 9f c5 	call	0x18b3e	; 0x18b3e <lif_dir_clear>
    LIF->DIR.FileType = 0xffff;
   19bf6:	8f ef       	ldi	r24, 0xFF	; 255
   19bf8:	9f ef       	ldi	r25, 0xFF	; 255
   19bfa:	f7 01       	movw	r30, r14
   19bfc:	e6 5a       	subi	r30, 0xA6	; 166
   19bfe:	ff 4f       	sbci	r31, 0xFF	; 255
   19c00:	91 83       	std	Z+1, r25	; 0x01
   19c02:	80 83       	st	Z, r24
   19c04:	46 01       	movw	r8, r12
   19c06:	6e 01       	movw	r12, r28
   19c08:	9c ee       	ldi	r25, 0xEC	; 236
   19c0a:	c9 1a       	sub	r12, r25
   19c0c:	9e ef       	ldi	r25, 0xFE	; 254

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);
   19c0e:	d9 0a       	sbc	r13, r25
   19c10:	b4 01       	movw	r22, r8
   19c12:	c7 01       	movw	r24, r14
   19c14:	0e 94 da c3 	call	0x187b4	; 0x187b4 <lif_dir2str>
   19c18:	a0 e2       	ldi	r26, 0x20	; 32
   19c1a:	8a 0e       	add	r8, r26

    // Write Directory sectors
    lif_dir_clear(LIF);
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
   19c1c:	91 1c       	adc	r9, r1
   19c1e:	c8 14       	cp	r12, r8
   19c20:	d9 04       	cpc	r13, r9
   19c22:	b1 f7       	brne	.-20     	; 0x19c10 <lif_create_volume+0x33e>
   19c24:	a1 2c       	mov	r10, r1
   19c26:	b1 2c       	mov	r11, r1
   19c28:	65 01       	movw	r12, r10
   19c2a:	fe 01       	movw	r30, r28
   19c2c:	74 96       	adiw	r30, 0x14	; 20
   19c2e:	cc 5e       	subi	r28, 0xEC	; 236
   19c30:	de 4f       	sbci	r29, 0xFE	; 254
   19c32:	f9 83       	std	Y+1, r31	; 0x01
   19c34:	e8 83       	st	Y, r30
   19c36:	c4 51       	subi	r28, 0x14	; 20
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
   19c38:	d1 40       	sbci	r29, 0x01	; 1
   19c3a:	84 e6       	ldi	r24, 0x64	; 100
   19c3c:	28 2e       	mov	r2, r24
   19c3e:	31 2c       	mov	r3, r1
   19c40:	41 2c       	mov	r4, r1
            printf("\tWrote: %ld\r", count);
   19c42:	51 2c       	mov	r5, r1
   19c44:	87 ee       	ldi	r24, 0xE7	; 231
   19c46:	9a e3       	ldi	r25, 0x3A	; 58
   19c48:	3c 01       	movw	r6, r24
   19c4a:	81 2c       	mov	r8, r1
   19c4c:	c6 5e       	subi	r28, 0xE6	; 230
   19c4e:	de 4f       	sbci	r29, 0xFE	; 254
   19c50:	28 81       	ld	r18, Y
   19c52:	39 81       	ldd	r19, Y+1	; 0x01
   19c54:	4a 81       	ldd	r20, Y+2	; 0x02
   19c56:	5b 81       	ldd	r21, Y+3	; 0x03
   19c58:	ca 51       	subi	r28, 0x1A	; 26
   19c5a:	d1 40       	sbci	r29, 0x01	; 1
   19c5c:	2a 0d       	add	r18, r10
   19c5e:	3b 1d       	adc	r19, r11
   19c60:	4c 1d       	adc	r20, r12
   19c62:	5d 1d       	adc	r21, r13
   19c64:	ce 5d       	subi	r28, 0xDE	; 222
   19c66:	de 4f       	sbci	r29, 0xFE	; 254
   19c68:	28 83       	st	Y, r18
   19c6a:	39 83       	std	Y+1, r19	; 0x01
   19c6c:	4a 83       	std	Y+2, r20	; 0x02
   19c6e:	5b 83       	std	Y+3, r21	; 0x03
   19c70:	c2 52       	subi	r28, 0x22	; 34
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   19c72:	d1 40       	sbci	r29, 0x01	; 1
   19c74:	ca 5d       	subi	r28, 0xDA	; 218
   19c76:	de 4f       	sbci	r29, 0xFE	; 254
   19c78:	88 81       	ld	r24, Y
   19c7a:	99 81       	ldd	r25, Y+1	; 0x01
   19c7c:	aa 81       	ldd	r26, Y+2	; 0x02
   19c7e:	bb 81       	ldd	r27, Y+3	; 0x03
   19c80:	c6 52       	subi	r28, 0x26	; 38
   19c82:	d1 40       	sbci	r29, 0x01	; 1
   19c84:	a8 16       	cp	r10, r24
   19c86:	b9 06       	cpc	r11, r25
   19c88:	ca 06       	cpc	r12, r26
   19c8a:	db 06       	cpc	r13, r27
   19c8c:	0c f0       	brlt	.+2      	; 0x19c90 <lif_create_volume+0x3be>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19c8e:	58 c0       	rjmp	.+176    	; 0x19d40 <lif_create_volume+0x46e>
   19c90:	00 e0       	ldi	r16, 0x00	; 0
   19c92:	11 e0       	ldi	r17, 0x01	; 1
   19c94:	ca 5e       	subi	r28, 0xEA	; 234
   19c96:	de 4f       	sbci	r29, 0xFE	; 254
   19c98:	28 81       	ld	r18, Y
   19c9a:	39 81       	ldd	r19, Y+1	; 0x01
   19c9c:	4a 81       	ldd	r20, Y+2	; 0x02
   19c9e:	5b 81       	ldd	r21, Y+3	; 0x03
   19ca0:	c6 51       	subi	r28, 0x16	; 22
   19ca2:	d1 40       	sbci	r29, 0x01	; 1
   19ca4:	be 01       	movw	r22, r28
   19ca6:	6c 5e       	subi	r22, 0xEC	; 236
   19ca8:	7f 4f       	sbci	r23, 0xFF	; 255
   19caa:	c7 01       	movw	r24, r14
   19cac:	0e 94 7d c1 	call	0x182fa	; 0x182fa <lif_write>
   19cb0:	09 2e       	mov	r0, r25
   19cb2:	00 0c       	add	r0, r0
   19cb4:	aa 0b       	sbc	r26, r26
        if(size < LIF_SECTOR_SIZE)
   19cb6:	bb 0b       	sbc	r27, r27
   19cb8:	8f 3f       	cpi	r24, 0xFF	; 255
   19cba:	91 05       	cpc	r25, r1
   19cbc:	a1 05       	cpc	r26, r1
   19cbe:	b1 05       	cpc	r27, r1
   19cc0:	09 f0       	breq	.+2      	; 0x19cc4 <lif_create_volume+0x3f2>
   19cc2:	0c f4       	brge	.+2      	; 0x19cc6 <lif_create_volume+0x3f4>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   19cc4:	db c0       	rjmp	.+438    	; 0x19e7c <lif_create_volume+0x5aa>
   19cc6:	ca 5e       	subi	r28, 0xEA	; 234
   19cc8:	de 4f       	sbci	r29, 0xFE	; 254
   19cca:	28 81       	ld	r18, Y
   19ccc:	39 81       	ldd	r19, Y+1	; 0x01
   19cce:	4a 81       	ldd	r20, Y+2	; 0x02
   19cd0:	5b 81       	ldd	r21, Y+3	; 0x03
   19cd2:	c6 51       	subi	r28, 0x16	; 22
   19cd4:	d1 40       	sbci	r29, 0x01	; 1
   19cd6:	28 0f       	add	r18, r24
   19cd8:	39 1f       	adc	r19, r25
   19cda:	4a 1f       	adc	r20, r26
   19cdc:	5b 1f       	adc	r21, r27
   19cde:	ca 5e       	subi	r28, 0xEA	; 234
   19ce0:	de 4f       	sbci	r29, 0xFE	; 254
   19ce2:	28 83       	st	Y, r18
   19ce4:	39 83       	std	Y+1, r19	; 0x01
   19ce6:	4a 83       	std	Y+2, r20	; 0x02
   19ce8:	5b 83       	std	Y+3, r21	; 0x03
   19cea:	c6 51       	subi	r28, 0x16	; 22
        if((count % 100) == 0)
   19cec:	d1 40       	sbci	r29, 0x01	; 1
   19cee:	ce 5d       	subi	r28, 0xDE	; 222
   19cf0:	de 4f       	sbci	r29, 0xFE	; 254
   19cf2:	68 81       	ld	r22, Y
   19cf4:	79 81       	ldd	r23, Y+1	; 0x01
   19cf6:	8a 81       	ldd	r24, Y+2	; 0x02
   19cf8:	9b 81       	ldd	r25, Y+3	; 0x03
   19cfa:	c2 52       	subi	r28, 0x22	; 34
   19cfc:	d1 40       	sbci	r29, 0x01	; 1
   19cfe:	a2 01       	movw	r20, r4
   19d00:	91 01       	movw	r18, r2
   19d02:	0e 94 68 e3 	call	0x1c6d0	; 0x1c6d0 <__divmodsi4>
   19d06:	67 2b       	or	r22, r23
   19d08:	68 2b       	or	r22, r24
   19d0a:	69 2b       	or	r22, r25
            printf("\tWrote: %ld\r", count);
   19d0c:	99 f4       	brne	.+38     	; 0x19d34 <lif_create_volume+0x462>
   19d0e:	ce 5d       	subi	r28, 0xDE	; 222
   19d10:	de 4f       	sbci	r29, 0xFE	; 254
   19d12:	88 81       	ld	r24, Y
   19d14:	99 81       	ldd	r25, Y+1	; 0x01
   19d16:	aa 81       	ldd	r26, Y+2	; 0x02
   19d18:	bb 81       	ldd	r27, Y+3	; 0x03
   19d1a:	c2 52       	subi	r28, 0x22	; 34
   19d1c:	d1 40       	sbci	r29, 0x01	; 1
   19d1e:	ed b7       	in	r30, 0x3d	; 61
   19d20:	fe b7       	in	r31, 0x3e	; 62
   19d22:	84 83       	std	Z+4, r24	; 0x04
   19d24:	95 83       	std	Z+5, r25	; 0x05
   19d26:	a6 83       	std	Z+6, r26	; 0x06
   19d28:	b7 83       	std	Z+7, r27	; 0x07
   19d2a:	61 82       	std	Z+1, r6	; 0x01
   19d2c:	72 82       	std	Z+2, r7	; 0x02
   19d2e:	83 82       	std	Z+3, r8	; 0x03
   19d30:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   19d34:	ff ef       	ldi	r31, 0xFF	; 255
   19d36:	af 1a       	sub	r10, r31
   19d38:	bf 0a       	sbc	r11, r31
   19d3a:	cf 0a       	sbc	r12, r31
   19d3c:	df 0a       	sbc	r13, r31
            printf("\tWrote: %ld\r", count);
        ++count;
    }

    // File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
   19d3e:	86 cf       	rjmp	.-244    	; 0x19c4c <lif_create_volume+0x37a>
   19d40:	80 e0       	ldi	r24, 0x00	; 0
   19d42:	91 e0       	ldi	r25, 0x01	; 1
   19d44:	cc 5e       	subi	r28, 0xEC	; 236
   19d46:	de 4f       	sbci	r29, 0xFE	; 254
   19d48:	a8 81       	ld	r26, Y
   19d4a:	b9 81       	ldd	r27, Y+1	; 0x01
   19d4c:	c4 51       	subi	r28, 0x14	; 20
   19d4e:	d1 40       	sbci	r29, 0x01	; 1
   19d50:	fc 01       	movw	r30, r24
   19d52:	1d 92       	st	X+, r1
   19d54:	31 97       	sbiw	r30, 0x01	; 1
    for(i=0;i<filesectors;++i)
   19d56:	e9 f7       	brne	.-6      	; 0x19d52 <lif_create_volume+0x480>
   19d58:	81 2c       	mov	r8, r1
   19d5a:	91 2c       	mov	r9, r1
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
            printf("\tWrote: %ld\r", count);
   19d5c:	54 01       	movw	r10, r8
   19d5e:	8a ed       	ldi	r24, 0xDA	; 218
   19d60:	9a e3       	ldi	r25, 0x3A	; 58
   19d62:	9c 01       	movw	r18, r24
   19d64:	40 e0       	ldi	r20, 0x00	; 0
   19d66:	c6 5e       	subi	r28, 0xE6	; 230
   19d68:	de 4f       	sbci	r29, 0xFE	; 254
   19d6a:	28 83       	st	Y, r18
   19d6c:	39 83       	std	Y+1, r19	; 0x01
   19d6e:	4a 83       	std	Y+2, r20	; 0x02
   19d70:	ca 51       	subi	r28, 0x1A	; 26
   19d72:	d1 40       	sbci	r29, 0x01	; 1
   19d74:	ce 5d       	subi	r28, 0xDE	; 222
   19d76:	de 4f       	sbci	r29, 0xFE	; 254
   19d78:	48 80       	ld	r4, Y
   19d7a:	59 80       	ldd	r5, Y+1	; 0x01
   19d7c:	6a 80       	ldd	r6, Y+2	; 0x02
   19d7e:	7b 80       	ldd	r7, Y+3	; 0x03
   19d80:	c2 52       	subi	r28, 0x22	; 34
   19d82:	d1 40       	sbci	r29, 0x01	; 1
   19d84:	48 0c       	add	r4, r8
   19d86:	59 1c       	adc	r5, r9
   19d88:	6a 1c       	adc	r6, r10
        ++count;
    }

    // File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   19d8a:	7b 1c       	adc	r7, r11
   19d8c:	c2 5e       	subi	r28, 0xE2	; 226
   19d8e:	de 4f       	sbci	r29, 0xFE	; 254
   19d90:	28 81       	ld	r18, Y
   19d92:	39 81       	ldd	r19, Y+1	; 0x01
   19d94:	4a 81       	ldd	r20, Y+2	; 0x02
   19d96:	5b 81       	ldd	r21, Y+3	; 0x03
   19d98:	ce 51       	subi	r28, 0x1E	; 30
   19d9a:	d1 40       	sbci	r29, 0x01	; 1
   19d9c:	82 16       	cp	r8, r18
   19d9e:	93 06       	cpc	r9, r19
   19da0:	a4 06       	cpc	r10, r20
   19da2:	b5 06       	cpc	r11, r21
   19da4:	0c f0       	brlt	.+2      	; 0x19da8 <lif_create_volume+0x4d6>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19da6:	53 c0       	rjmp	.+166    	; 0x19e4e <lif_create_volume+0x57c>
   19da8:	00 e0       	ldi	r16, 0x00	; 0
   19daa:	11 e0       	ldi	r17, 0x01	; 1
   19dac:	ca 5e       	subi	r28, 0xEA	; 234
   19dae:	de 4f       	sbci	r29, 0xFE	; 254
   19db0:	28 81       	ld	r18, Y
   19db2:	39 81       	ldd	r19, Y+1	; 0x01
   19db4:	4a 81       	ldd	r20, Y+2	; 0x02
   19db6:	5b 81       	ldd	r21, Y+3	; 0x03
   19db8:	c6 51       	subi	r28, 0x16	; 22
   19dba:	d1 40       	sbci	r29, 0x01	; 1
   19dbc:	be 01       	movw	r22, r28
   19dbe:	6c 5e       	subi	r22, 0xEC	; 236
   19dc0:	7f 4f       	sbci	r23, 0xFF	; 255
   19dc2:	c7 01       	movw	r24, r14
   19dc4:	0e 94 7d c1 	call	0x182fa	; 0x182fa <lif_write>
   19dc8:	09 2e       	mov	r0, r25
   19dca:	00 0c       	add	r0, r0
   19dcc:	aa 0b       	sbc	r26, r26
        if(size < LIF_SECTOR_SIZE)
   19dce:	bb 0b       	sbc	r27, r27
   19dd0:	8f 3f       	cpi	r24, 0xFF	; 255
   19dd2:	91 05       	cpc	r25, r1
   19dd4:	a1 05       	cpc	r26, r1
   19dd6:	b1 05       	cpc	r27, r1
   19dd8:	09 f0       	breq	.+2      	; 0x19ddc <lif_create_volume+0x50a>
   19dda:	0c f4       	brge	.+2      	; 0x19dde <lif_create_volume+0x50c>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   19ddc:	4f c0       	rjmp	.+158    	; 0x19e7c <lif_create_volume+0x5aa>
   19dde:	ca 5e       	subi	r28, 0xEA	; 234
   19de0:	de 4f       	sbci	r29, 0xFE	; 254
   19de2:	28 81       	ld	r18, Y
   19de4:	39 81       	ldd	r19, Y+1	; 0x01
   19de6:	4a 81       	ldd	r20, Y+2	; 0x02
   19de8:	5b 81       	ldd	r21, Y+3	; 0x03
   19dea:	c6 51       	subi	r28, 0x16	; 22
   19dec:	d1 40       	sbci	r29, 0x01	; 1
   19dee:	28 0f       	add	r18, r24
   19df0:	39 1f       	adc	r19, r25
   19df2:	4a 1f       	adc	r20, r26
   19df4:	5b 1f       	adc	r21, r27
   19df6:	ca 5e       	subi	r28, 0xEA	; 234
   19df8:	de 4f       	sbci	r29, 0xFE	; 254
   19dfa:	28 83       	st	Y, r18
   19dfc:	39 83       	std	Y+1, r19	; 0x01
   19dfe:	4a 83       	std	Y+2, r20	; 0x02
   19e00:	5b 83       	std	Y+3, r21	; 0x03
   19e02:	c6 51       	subi	r28, 0x16	; 22
        if((count % 100) == 0)
   19e04:	d1 40       	sbci	r29, 0x01	; 1
   19e06:	c3 01       	movw	r24, r6
   19e08:	b2 01       	movw	r22, r4
   19e0a:	24 e6       	ldi	r18, 0x64	; 100
   19e0c:	30 e0       	ldi	r19, 0x00	; 0
   19e0e:	40 e0       	ldi	r20, 0x00	; 0
   19e10:	50 e0       	ldi	r21, 0x00	; 0
   19e12:	0e 94 68 e3 	call	0x1c6d0	; 0x1c6d0 <__divmodsi4>
   19e16:	67 2b       	or	r22, r23
   19e18:	68 2b       	or	r22, r24
   19e1a:	69 2b       	or	r22, r25
            printf("\tWrote: %ld\r", count);
   19e1c:	91 f4       	brne	.+36     	; 0x19e42 <lif_create_volume+0x570>
   19e1e:	ed b7       	in	r30, 0x3d	; 61
   19e20:	fe b7       	in	r31, 0x3e	; 62
   19e22:	44 82       	std	Z+4, r4	; 0x04
   19e24:	55 82       	std	Z+5, r5	; 0x05
   19e26:	66 82       	std	Z+6, r6	; 0x06
   19e28:	77 82       	std	Z+7, r7	; 0x07
   19e2a:	c6 5e       	subi	r28, 0xE6	; 230
   19e2c:	de 4f       	sbci	r29, 0xFE	; 254
   19e2e:	28 81       	ld	r18, Y
   19e30:	39 81       	ldd	r19, Y+1	; 0x01
   19e32:	4a 81       	ldd	r20, Y+2	; 0x02
   19e34:	ca 51       	subi	r28, 0x1A	; 26
   19e36:	d1 40       	sbci	r29, 0x01	; 1
   19e38:	21 83       	std	Z+1, r18	; 0x01
   19e3a:	32 83       	std	Z+2, r19	; 0x02
   19e3c:	43 83       	std	Z+3, r20	; 0x03
   19e3e:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
        ++count;
    }

    // File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   19e42:	ff ef       	ldi	r31, 0xFF	; 255
   19e44:	8f 1a       	sub	r8, r31
   19e46:	9f 0a       	sbc	r9, r31
   19e48:	af 0a       	sbc	r10, r31
   19e4a:	bf 0a       	sbc	r11, r31
        offset += size;
        if((count % 100) == 0)
            printf("\tWrote: %ld\r", count);
        ++count;
    }
    printf("\tWrote: %ld\n", count);
   19e4c:	93 cf       	rjmp	.-218    	; 0x19d74 <lif_create_volume+0x4a2>
   19e4e:	ed b7       	in	r30, 0x3d	; 61
   19e50:	fe b7       	in	r31, 0x3e	; 62
   19e52:	44 82       	std	Z+4, r4	; 0x04
   19e54:	55 82       	std	Z+5, r5	; 0x05
   19e56:	66 82       	std	Z+6, r6	; 0x06
   19e58:	77 82       	std	Z+7, r7	; 0x07
   19e5a:	8d ec       	ldi	r24, 0xCD	; 205
   19e5c:	9a e3       	ldi	r25, 0x3A	; 58
   19e5e:	a0 e0       	ldi	r26, 0x00	; 0
   19e60:	81 83       	std	Z+1, r24	; 0x01
   19e62:	92 83       	std	Z+2, r25	; 0x02
   19e64:	a3 83       	std	Z+3, r26	; 0x03
   19e66:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
/// @return void
MEMSPACE
void lif_rewinddir(lif_t *LIF)
{
    // Directory index
    LIF->dirindex = -1;
   19e6a:	8f ef       	ldi	r24, 0xFF	; 255
   19e6c:	9f ef       	ldi	r25, 0xFF	; 255
   19e6e:	f7 01       	movw	r30, r14
    printf("\tWrote: %ld\n", count);

    lif_rewinddir(LIF);

    // As a sanity check verify basic values
    if( !lif_check_volume(LIF) )
   19e70:	91 a3       	std	Z+33, r25	; 0x21
   19e72:	80 a3       	std	Z+32, r24	; 0x20
   19e74:	c7 01       	movw	r24, r14
   19e76:	38 d8       	rcall	.-3984   	; 0x18ee8 <lif_check_volume>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   19e78:	89 2b       	or	r24, r25
   19e7a:	19 f4       	brne	.+6      	; 0x19e82 <lif_create_volume+0x5b0>
   19e7c:	c7 01       	movw	r24, r14
   19e7e:	b8 da       	rcall	.-2704   	; 0x193f0 <lif_close_volume>
        lif_closedir(LIF);
        return(NULL);
    }

    // Scan directory and verify values
    if( !lif_updatefree(LIF))
   19e80:	08 c0       	rjmp	.+16     	; 0x19e92 <lif_create_volume+0x5c0>
   19e82:	c7 01       	movw	r24, r14
   19e84:	1e dc       	rcall	.-1988   	; 0x196c2 <lif_updatefree>
   19e86:	6c 01       	movw	r12, r24
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   19e88:	89 2b       	or	r24, r25
   19e8a:	31 f4       	brne	.+12     	; 0x19e98 <lif_create_volume+0x5c6>
   19e8c:	c7 01       	movw	r24, r14

    // Scan directory and verify values
    if( !lif_updatefree(LIF))
    {
        lif_closedir(LIF);
        return(NULL);
   19e8e:	b0 da       	rcall	.-2720   	; 0x193f0 <lif_close_volume>

    time_t t = time(NULL);

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
    if(LIF == NULL)
        return(NULL);
   19e90:	04 c0       	rjmp	.+8      	; 0x19e9a <lif_create_volume+0x5c8>
   19e92:	c1 2c       	mov	r12, r1
   19e94:	d1 2c       	mov	r13, r1
   19e96:	01 c0       	rjmp	.+2      	; 0x19e9a <lif_create_volume+0x5c8>
        lif_closedir(LIF);
        return(NULL);
    }

    return(LIF);
}
   19e98:	67 01       	movw	r12, r14
   19e9a:	c6 01       	movw	r24, r12
   19e9c:	c7 5d       	subi	r28, 0xD7	; 215
   19e9e:	de 4f       	sbci	r29, 0xFE	; 254
   19ea0:	e2 e1       	ldi	r30, 0x12	; 18
   19ea2:	0c 94 e4 e3 	jmp	0x1c7c8	; 0x1c7c8 <__epilogue_restores__>

00019ea6 <lif_newdir>:
/// @param[in] *LIF: LIF pointer
/// @param[in] sectors: try to find specified free space
/// @return index or free record or -1 on error
MEMSPACE
int lif_newdir(lif_t *LIF, long sectors)
{
   19ea6:	ad e1       	ldi	r26, 0x1D	; 29
   19ea8:	b0 e0       	ldi	r27, 0x00	; 0
   19eaa:	e9 e5       	ldi	r30, 0x59	; 89
   19eac:	ff ec       	ldi	r31, 0xCF	; 207
   19eae:	0c 94 c8 e3 	jmp	0x1c790	; 0x1c790 <__prologue_saves__>
   19eb2:	9d 8f       	std	Y+29, r25	; 0x1d
   19eb4:	8c 8f       	std	Y+28, r24	; 0x1c
   19eb6:	4a 01       	movw	r8, r20
   19eb8:	5b 01       	movw	r10, r22

    // Directory index
    index = 0;

    // Start of free space
    start = LIF->filestart;
   19eba:	fc 01       	movw	r30, r24
   19ebc:	c4 84       	ldd	r12, Z+12	; 0x0c
   19ebe:	d5 84       	ldd	r13, Z+13	; 0x0d
   19ec0:	e6 84       	ldd	r14, Z+14	; 0x0e

    // Update all file information
    if(lif_updatefree(LIF) == NULL)
   19ec2:	f7 84       	ldd	r15, Z+15	; 0x0f
   19ec4:	fe db       	rcall	.-2052   	; 0x196c2 <lif_updatefree>
   19ec6:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19ec8:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19eca:	40 8d       	ldd	r20, Z+24	; 0x18
   19ecc:	51 8d       	ldd	r21, Z+25	; 0x19
   19ece:	62 8d       	ldd	r22, Z+26	; 0x1a
   19ed0:	73 8d       	ldd	r23, Z+27	; 0x1b
   19ed2:	89 2b       	or	r24, r25
    {
        printf("lif_newdir: not enough free space:[%ld] for size:[%ld]\n", (long)LIF->freesectors, (long) sectors);
   19ed4:	99 f4       	brne	.+38     	; 0x19efc <lif_newdir+0x56>
   19ed6:	ed b7       	in	r30, 0x3d	; 61
   19ed8:	fe b7       	in	r31, 0x3e	; 62
   19eda:	80 86       	std	Z+8, r8	; 0x08
   19edc:	91 86       	std	Z+9, r9	; 0x09
   19ede:	a2 86       	std	Z+10, r10	; 0x0a
   19ee0:	b3 86       	std	Z+11, r11	; 0x0b
   19ee2:	44 83       	std	Z+4, r20	; 0x04
   19ee4:	55 83       	std	Z+5, r21	; 0x05
   19ee6:	66 83       	std	Z+6, r22	; 0x06
   19ee8:	77 83       	std	Z+7, r23	; 0x07
   19eea:	8e ee       	ldi	r24, 0xEE	; 238
   19eec:	99 e3       	ldi	r25, 0x39	; 57
   19eee:	a0 e0       	ldi	r26, 0x00	; 0
   19ef0:	81 83       	std	Z+1, r24	; 0x01
   19ef2:	92 83       	std	Z+2, r25	; 0x02
   19ef4:	a3 83       	std	Z+3, r26	; 0x03
   19ef6:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
        return(-1);
    }

    // Not enough room ?
    if(sectors > (long)LIF->freesectors)
   19efa:	2f c1       	rjmp	.+606    	; 0x1a15a <lif_newdir+0x2b4>
   19efc:	48 15       	cp	r20, r8
   19efe:	59 05       	cpc	r21, r9
   19f00:	6a 05       	cpc	r22, r10
   19f02:	7b 05       	cpc	r23, r11
   19f04:	c4 f0       	brlt	.+48     	; 0x19f36 <lif_newdir+0x90>
   19f06:	44 24       	eor	r4, r4
   19f08:	43 94       	inc	r4
   19f0a:	51 2c       	mov	r5, r1
   19f0c:	61 2c       	mov	r6, r1
#endif
            break;
        }

        // We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   19f0e:	71 2c       	mov	r7, r1
   19f10:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19f12:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19f14:	86 5a       	subi	r24, 0xA6	; 166
   19f16:	9f 4f       	sbci	r25, 0xFF	; 255
   19f18:	9d 8b       	std	Y+21, r25	; 0x15
   19f1a:	8c 8b       	std	Y+20, r24	; 0x14
   19f1c:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19f1e:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19f20:	e4 5a       	subi	r30, 0xA4	; 164
   19f22:	ff 4f       	sbci	r31, 0xFF	; 255
   19f24:	fb 8b       	std	Y+19, r31	; 0x13
                freestate = 0;  // Try again
        }
        
        // Computed start of next record
        // Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   19f26:	ea 8b       	std	Y+18, r30	; 0x12
   19f28:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19f2a:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19f2c:	80 5a       	subi	r24, 0xA0	; 160
   19f2e:	9f 4f       	sbci	r25, 0xFF	; 255
   19f30:	9f 8b       	std	Y+23, r25	; 0x17
   19f32:	8e 8b       	std	Y+22, r24	; 0x16
    }

    // Not enough room ?
    if(sectors > (long)LIF->freesectors)
    {
        printf("lif_newdir: not enough free space:[%ld]\n", (long)LIF->freesectors);
   19f34:	21 c0       	rjmp	.+66     	; 0x19f78 <lif_newdir+0xd2>
   19f36:	ed b7       	in	r30, 0x3d	; 61
   19f38:	fe b7       	in	r31, 0x3e	; 62
   19f3a:	44 83       	std	Z+4, r20	; 0x04
   19f3c:	55 83       	std	Z+5, r21	; 0x05
   19f3e:	66 83       	std	Z+6, r22	; 0x06
   19f40:	77 83       	std	Z+7, r23	; 0x07
   19f42:	85 ec       	ldi	r24, 0xC5	; 197
   19f44:	99 e3       	ldi	r25, 0x39	; 57
   19f46:	a0 e0       	ldi	r26, 0x00	; 0
   19f48:	81 83       	std	Z+1, r24	; 0x01
   19f4a:	92 83       	std	Z+2, r25	; 0x02
   19f4c:	a3 83       	std	Z+3, r26	; 0x03
   19f4e:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
#endif
            break;
        }

        // We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   19f52:	03 c1       	rjmp	.+518    	; 0x1a15a <lif_newdir+0x2b4>
   19f54:	ec 89       	ldd	r30, Y+20	; 0x14
   19f56:	fd 89       	ldd	r31, Y+21	; 0x15
   19f58:	80 81       	ld	r24, Z
   19f5a:	91 81       	ldd	r25, Z+1	; 0x01
   19f5c:	8f 3f       	cpi	r24, 0xFF	; 255
   19f5e:	ff ef       	ldi	r31, 0xFF	; 255
   19f60:	9f 07       	cpc	r25, r31
            return(index);
        }


        // PURGED records
        if(LIF->DIR.FileType == 0)
   19f62:	a1 f0       	breq	.+40     	; 0x19f8c <lif_newdir+0xe6>
   19f64:	89 2b       	or	r24, r25
   19f66:	09 f0       	breq	.+2      	; 0x19f6a <lif_newdir+0xc4>
        {
            if(freestate == 0)
   19f68:	ce c0       	rjmp	.+412    	; 0x1a106 <lif_newdir+0x260>
   19f6a:	61 14       	cp	r6, r1
   19f6c:	71 04       	cpc	r7, r1
   19f6e:	09 f4       	brne	.+2      	; 0x19f72 <lif_newdir+0xcc>
   19f70:	c1 c0       	rjmp	.+386    	; 0x1a0f4 <lif_newdir+0x24e>
   19f72:	ff ef       	ldi	r31, 0xFF	; 255
   19f74:	4f 1a       	sub	r4, r31
   19f76:	5f 0a       	sbc	r5, r31
   19f78:	82 01       	movw	r16, r4
   19f7a:	01 50       	subi	r16, 0x01	; 1

    // Update free space and EOF pointers
    while(1)
    {
        // Write new EOF after current one
        if( !lif_readdirindex(LIF,index) )
   19f7c:	11 09       	sbc	r17, r1
   19f7e:	b8 01       	movw	r22, r16
   19f80:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19f82:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19f84:	c3 da       	rcall	.-2682   	; 0x1950c <lif_readdirindex>
   19f86:	89 2b       	or	r24, r25
   19f88:	29 f7       	brne	.-54     	; 0x19f54 <lif_newdir+0xae>
        if(LIF->DIR.FileType == 0xffff)
        {

            // Was enough free space found in purged area ?
            // Do NOT need to update EOF!
            if(freestate == 2)
   19f8a:	e7 c0       	rjmp	.+462    	; 0x1a15a <lif_newdir+0x2b4>
   19f8c:	22 e0       	ldi	r18, 0x02	; 2
   19f8e:	62 16       	cp	r6, r18
   19f90:	71 04       	cpc	r7, r1
   19f92:	09 f0       	breq	.+2      	; 0x19f96 <lif_newdir+0xf0>
            {
                // Update free pace for new file
                lif_dir_clear(LIF);
   19f94:	46 c0       	rjmp	.+140    	; 0x1a022 <lif_newdir+0x17c>
   19f96:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19f98:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19f9a:	0e 94 9f c5 	call	0x18b3e	; 0x18b3e <lif_dir_clear>
                LIF->DIR.FileStartSector = freestart;
   19f9e:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19fa0:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19fa2:	e4 5a       	subi	r30, 0xA4	; 164
   19fa4:	ff 4f       	sbci	r31, 0xFF	; 255
   19fa6:	88 8d       	ldd	r24, Y+24	; 0x18
   19fa8:	80 83       	st	Z, r24
   19faa:	99 8d       	ldd	r25, Y+25	; 0x19
   19fac:	91 83       	std	Z+1, r25	; 0x01
   19fae:	2a 8d       	ldd	r18, Y+26	; 0x1a
   19fb0:	22 83       	std	Z+2, r18	; 0x02
   19fb2:	8b 8d       	ldd	r24, Y+27	; 0x1b
                LIF->DIR.FileSectors = sectors;
   19fb4:	83 83       	std	Z+3, r24	; 0x03
   19fb6:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19fb8:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19fba:	e0 5a       	subi	r30, 0xA0	; 160
   19fbc:	ff 4f       	sbci	r31, 0xFF	; 255
   19fbe:	80 82       	st	Z, r8
   19fc0:	91 82       	std	Z+1, r9	; 0x01
   19fc2:	a2 82       	std	Z+2, r10	; 0x02
                LIF->usedsectors += sectors;
   19fc4:	b3 82       	std	Z+3, r11	; 0x03
   19fc6:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19fc8:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19fca:	84 89       	ldd	r24, Z+20	; 0x14
   19fcc:	95 89       	ldd	r25, Z+21	; 0x15
   19fce:	a6 89       	ldd	r26, Z+22	; 0x16
   19fd0:	b7 89       	ldd	r27, Z+23	; 0x17
   19fd2:	88 0d       	add	r24, r8
   19fd4:	99 1d       	adc	r25, r9
   19fd6:	aa 1d       	adc	r26, r10
   19fd8:	bb 1d       	adc	r27, r11
   19fda:	84 8b       	std	Z+20, r24	; 0x14
   19fdc:	95 8b       	std	Z+21, r25	; 0x15
   19fde:	a6 8b       	std	Z+22, r26	; 0x16
                LIF->freesectors -= sectors;
   19fe0:	b7 8b       	std	Z+23, r27	; 0x17
   19fe2:	80 8d       	ldd	r24, Z+24	; 0x18
   19fe4:	91 8d       	ldd	r25, Z+25	; 0x19
   19fe6:	a2 8d       	ldd	r26, Z+26	; 0x1a
   19fe8:	b3 8d       	ldd	r27, Z+27	; 0x1b
   19fea:	88 19       	sub	r24, r8
   19fec:	99 09       	sbc	r25, r9
   19fee:	aa 09       	sbc	r26, r10
   19ff0:	bb 09       	sbc	r27, r11
   19ff2:	80 8f       	std	Z+24, r24	; 0x18
   19ff4:	91 8f       	std	Z+25, r25	; 0x19
   19ff6:	a2 8f       	std	Z+26, r26	; 0x1a
                LIF->files++;
   19ff8:	b3 8f       	std	Z+27, r27	; 0x1b
   19ffa:	84 8d       	ldd	r24, Z+28	; 0x1c
   19ffc:	95 8d       	ldd	r25, Z+29	; 0x1d
   19ffe:	01 96       	adiw	r24, 0x01	; 1
   1a000:	95 8f       	std	Z+29, r25	; 0x1d
                LIF->purged--;
   1a002:	84 8f       	std	Z+28, r24	; 0x1c
   1a004:	86 8d       	ldd	r24, Z+30	; 0x1e
   1a006:	97 8d       	ldd	r25, Z+31	; 0x1f
   1a008:	01 97       	sbiw	r24, 0x01	; 1
   1a00a:	97 8f       	std	Z+31, r25	; 0x1f
                LIF->dirindex = freeindex;
   1a00c:	86 8f       	std	Z+30, r24	; 0x1e
                // Write new record (FileType is still EOF until data is updated by user)
                if( !lif_writedirindex(LIF,freeindex))
   1a00e:	20 a2       	std	Z+32, r2	; 0x20
   1a010:	31 a2       	std	Z+33, r3	; 0x21
   1a012:	b1 01       	movw	r22, r2
   1a014:	cf 01       	movw	r24, r30
   1a016:	e1 da       	rcall	.-2622   	; 0x195da <lif_writedirindex>
   1a018:	89 2b       	or	r24, r25
   1a01a:	09 f4       	brne	.+2      	; 0x1a01e <lif_newdir+0x178>
   1a01c:	9e c0       	rjmp	.+316    	; 0x1a15a <lif_newdir+0x2b4>
                    break;
                }
                return(freeindex);
            }

            if(debuglevel & 0x400)
   1a01e:	c1 01       	movw	r24, r2
   1a020:	9e c0       	rjmp	.+316    	; 0x1a15e <lif_newdir+0x2b8>
   1a022:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1a026:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
                printf("lif_newdir: index:[%d] adding at:[%ld]to purged space:[%ld] sectors, free:[%ld]\n", 
   1a02a:	92 ff       	sbrs	r25, 2
   1a02c:	1e c0       	rjmp	.+60     	; 0x1a06a <lif_newdir+0x1c4>
   1a02e:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a030:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a032:	80 8d       	ldd	r24, Z+24	; 0x18
   1a034:	91 8d       	ldd	r25, Z+25	; 0x19
   1a036:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a038:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a03a:	ed b7       	in	r30, 0x3d	; 61
   1a03c:	fe b7       	in	r31, 0x3e	; 62
   1a03e:	86 87       	std	Z+14, r24	; 0x0e
   1a040:	97 87       	std	Z+15, r25	; 0x0f
   1a042:	a0 8b       	std	Z+16, r26	; 0x10
   1a044:	b1 8b       	std	Z+17, r27	; 0x11
   1a046:	82 86       	std	Z+10, r8	; 0x0a
   1a048:	93 86       	std	Z+11, r9	; 0x0b
   1a04a:	a4 86       	std	Z+12, r10	; 0x0c
   1a04c:	b5 86       	std	Z+13, r11	; 0x0d
   1a04e:	c6 82       	std	Z+6, r12	; 0x06
   1a050:	d7 82       	std	Z+7, r13	; 0x07
   1a052:	e0 86       	std	Z+8, r14	; 0x08
   1a054:	f1 86       	std	Z+9, r15	; 0x09
   1a056:	15 83       	std	Z+5, r17	; 0x05
   1a058:	04 83       	std	Z+4, r16	; 0x04
   1a05a:	84 e7       	ldi	r24, 0x74	; 116
   1a05c:	99 e3       	ldi	r25, 0x39	; 57
   1a05e:	a0 e0       	ldi	r26, 0x00	; 0
   1a060:	81 83       	std	Z+1, r24	; 0x01
   1a062:	92 83       	std	Z+2, r25	; 0x02
   1a064:	a3 83       	std	Z+3, r26	; 0x03
                    (int) index,(long)start,(long) sectors, (long)LIF->freesectors);

            // Write new EOF after current one
            if( !lif_writedirEOF(LIF,index+1) )
   1a066:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   1a06a:	b8 01       	movw	r22, r16
   1a06c:	6f 5f       	subi	r22, 0xFF	; 255
   1a06e:	7f 4f       	sbci	r23, 0xFF	; 255
   1a070:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a072:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1a074:	0e db       	rcall	.-2532   	; 0x19692 <lif_writedirEOF>
   1a076:	89 2b       	or	r24, r25
            {
                break;
            }

            lif_dir_clear(LIF);
   1a078:	09 f4       	brne	.+2      	; 0x1a07c <lif_newdir+0x1d6>
   1a07a:	6f c0       	rjmp	.+222    	; 0x1a15a <lif_newdir+0x2b4>
   1a07c:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a07e:	9d 8d       	ldd	r25, Y+29	; 0x1d
            LIF->DIR.FileStartSector = start;
   1a080:	0e 94 9f c5 	call	0x18b3e	; 0x18b3e <lif_dir_clear>
   1a084:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a086:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a088:	e4 5a       	subi	r30, 0xA4	; 164
   1a08a:	ff 4f       	sbci	r31, 0xFF	; 255
   1a08c:	c0 82       	st	Z, r12
   1a08e:	d1 82       	std	Z+1, r13	; 0x01
            LIF->DIR.FileSectors = sectors;
   1a090:	e2 82       	std	Z+2, r14	; 0x02
   1a092:	f3 82       	std	Z+3, r15	; 0x03
   1a094:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a096:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a098:	e0 5a       	subi	r30, 0xA0	; 160
   1a09a:	ff 4f       	sbci	r31, 0xFF	; 255
   1a09c:	80 82       	st	Z, r8
   1a09e:	91 82       	std	Z+1, r9	; 0x01
            LIF->usedsectors += sectors;
   1a0a0:	a2 82       	std	Z+2, r10	; 0x02
   1a0a2:	b3 82       	std	Z+3, r11	; 0x03
   1a0a4:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a0a6:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a0a8:	84 89       	ldd	r24, Z+20	; 0x14
   1a0aa:	95 89       	ldd	r25, Z+21	; 0x15
   1a0ac:	a6 89       	ldd	r26, Z+22	; 0x16
   1a0ae:	b7 89       	ldd	r27, Z+23	; 0x17
   1a0b0:	88 0d       	add	r24, r8
   1a0b2:	99 1d       	adc	r25, r9
   1a0b4:	aa 1d       	adc	r26, r10
   1a0b6:	bb 1d       	adc	r27, r11
   1a0b8:	84 8b       	std	Z+20, r24	; 0x14
   1a0ba:	95 8b       	std	Z+21, r25	; 0x15
            LIF->freesectors -= sectors;
   1a0bc:	a6 8b       	std	Z+22, r26	; 0x16
   1a0be:	b7 8b       	std	Z+23, r27	; 0x17
   1a0c0:	80 8d       	ldd	r24, Z+24	; 0x18
   1a0c2:	91 8d       	ldd	r25, Z+25	; 0x19
   1a0c4:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a0c6:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a0c8:	88 19       	sub	r24, r8
   1a0ca:	99 09       	sbc	r25, r9
   1a0cc:	aa 09       	sbc	r26, r10
   1a0ce:	bb 09       	sbc	r27, r11
   1a0d0:	80 8f       	std	Z+24, r24	; 0x18
   1a0d2:	91 8f       	std	Z+25, r25	; 0x19
            LIF->files++;
   1a0d4:	a2 8f       	std	Z+26, r26	; 0x1a
   1a0d6:	b3 8f       	std	Z+27, r27	; 0x1b
   1a0d8:	84 8d       	ldd	r24, Z+28	; 0x1c
   1a0da:	95 8d       	ldd	r25, Z+29	; 0x1d
            LIF->dirindex = index;
   1a0dc:	01 96       	adiw	r24, 0x01	; 1
            // Write new record (FileType is still EOF until data is updated by user )
            if( !lif_writedirindex(LIF,index))
   1a0de:	95 8f       	std	Z+29, r25	; 0x1d
   1a0e0:	84 8f       	std	Z+28, r24	; 0x1c
   1a0e2:	11 a3       	std	Z+33, r17	; 0x21
   1a0e4:	00 a3       	std	Z+32, r16	; 0x20
   1a0e6:	b8 01       	movw	r22, r16
   1a0e8:	cf 01       	movw	r24, r30
   1a0ea:	77 da       	rcall	.-2834   	; 0x195da <lif_writedirindex>
   1a0ec:	89 2b       	or	r24, r25


        // PURGED records
        if(LIF->DIR.FileType == 0)
        {
            if(freestate == 0)
   1a0ee:	a9 f1       	breq	.+106    	; 0x1a15a <lif_newdir+0x2b4>
   1a0f0:	c8 01       	movw	r24, r16
   1a0f2:	35 c0       	rjmp	.+106    	; 0x1a15e <lif_newdir+0x2b8>
   1a0f4:	c8 8e       	std	Y+24, r12	; 0x18
   1a0f6:	d9 8e       	std	Y+25, r13	; 0x19
            {
                freeindex = index;
                freestart = start;
                freestate = 1;
   1a0f8:	ea 8e       	std	Y+26, r14	; 0x1a
   1a0fa:	fb 8e       	std	Y+27, r15	; 0x1b
   1a0fc:	18 01       	movw	r2, r16
            }
            ++index;
            continue;
   1a0fe:	66 24       	eor	r6, r6
        }
        

        // VALID record
        if(freestate == 1)
   1a100:	63 94       	inc	r6
   1a102:	71 2c       	mov	r7, r1
   1a104:	36 cf       	rjmp	.-404    	; 0x19f72 <lif_newdir+0xcc>
   1a106:	f1 e0       	ldi	r31, 0x01	; 1
        {
            long freesectors;
            // Compute sectors of purged space between valid records
            // Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
   1a108:	6f 16       	cp	r6, r31
   1a10a:	71 04       	cpc	r7, r1
   1a10c:	a9 f4       	brne	.+42     	; 0x1a138 <lif_newdir+0x292>
   1a10e:	ea 89       	ldd	r30, Y+18	; 0x12
   1a110:	fb 89       	ldd	r31, Y+19	; 0x13
   1a112:	80 81       	ld	r24, Z
   1a114:	91 81       	ldd	r25, Z+1	; 0x01
   1a116:	a2 81       	ldd	r26, Z+2	; 0x02
   1a118:	b3 81       	ldd	r27, Z+3	; 0x03
   1a11a:	8c 19       	sub	r24, r12
   1a11c:	9d 09       	sbc	r25, r13
   1a11e:	ae 09       	sbc	r26, r14
   1a120:	bf 09       	sbc	r27, r15
   1a122:	88 15       	cp	r24, r8
   1a124:	99 05       	cpc	r25, r9
                freestate = 2;      // Found free space in purged record
            else
                freestate = 0;  // Try again
   1a126:	aa 05       	cpc	r26, r10
   1a128:	bb 05       	cpc	r27, r11
   1a12a:	1c f4       	brge	.+6      	; 0x1a132 <lif_newdir+0x28c>
            long freesectors;
            // Compute sectors of purged space between valid records
            // Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
                freestate = 2;      // Found free space in purged record
   1a12c:	61 2c       	mov	r6, r1
   1a12e:	71 2c       	mov	r7, r1
   1a130:	03 c0       	rjmp	.+6      	; 0x1a138 <lif_newdir+0x292>
                freestate = 0;  // Try again
        }
        
        // Computed start of next record
        // Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   1a132:	82 e0       	ldi	r24, 0x02	; 2
   1a134:	68 2e       	mov	r6, r24
   1a136:	71 2c       	mov	r7, r1
   1a138:	ea 89       	ldd	r30, Y+18	; 0x12
   1a13a:	fb 89       	ldd	r31, Y+19	; 0x13
   1a13c:	c0 80       	ld	r12, Z
   1a13e:	d1 80       	ldd	r13, Z+1	; 0x01
   1a140:	e2 80       	ldd	r14, Z+2	; 0x02
   1a142:	f3 80       	ldd	r15, Z+3	; 0x03
   1a144:	ee 89       	ldd	r30, Y+22	; 0x16
   1a146:	ff 89       	ldd	r31, Y+23	; 0x17
   1a148:	80 81       	ld	r24, Z
   1a14a:	91 81       	ldd	r25, Z+1	; 0x01
   1a14c:	a2 81       	ldd	r26, Z+2	; 0x02
   1a14e:	b3 81       	ldd	r27, Z+3	; 0x03
   1a150:	c8 0e       	add	r12, r24
   1a152:	d9 1e       	adc	r13, r25
        ++index;
    }
    // ERROR
    return(-1);
   1a154:	ea 1e       	adc	r14, r26
   1a156:	fb 1e       	adc	r15, r27
}
   1a158:	0c cf       	rjmp	.-488    	; 0x19f72 <lif_newdir+0xcc>
   1a15a:	8f ef       	ldi	r24, 0xFF	; 255
   1a15c:	9f ef       	ldi	r25, 0xFF	; 255
   1a15e:	6d 96       	adiw	r28, 0x1d	; 29
   1a160:	e2 e1       	ldi	r30, 0x12	; 18
   1a162:	0c 94 e4 e3 	jmp	0x1c7c8	; 0x1c7c8 <__epilogue_restores__>

0001a166 <lif_open_volume>:
/// @param[in] *name: file name of LIF image
/// @param[in] *mode: "rb" = read, "rb+" = read/write
/// @return LIF pointer on sucesses or NULL on error
MEMSPACE
lif_t *lif_open_volume(char *name, char *mode)
{
   1a166:	a9 e3       	ldi	r26, 0x39	; 57
   1a168:	b1 e0       	ldi	r27, 0x01	; 1
   1a16a:	e9 eb       	ldi	r30, 0xB9	; 185
   1a16c:	f0 ed       	ldi	r31, 0xD0	; 208
   1a16e:	0c 94 ce e3 	jmp	0x1c79c	; 0x1c79c <__prologue_saves__+0xc>
   1a172:	6c 01       	movw	r12, r24
   1a174:	8b 01       	movw	r16, r22
    lif_t *LIF;
    stat_t sb, *sp;
    uint8_t buffer[LIF_SECTOR_SIZE];


    sp = lif_stat(name, (stat_t *)&sb);
   1a176:	be 01       	movw	r22, r28
   1a178:	66 5f       	subi	r22, 0xF6	; 246
   1a17a:	7e 4f       	sbci	r23, 0xFE	; 254
   1a17c:	0e 94 d2 c0 	call	0x181a4	; 0x181a4 <lif_stat>
   1a180:	5c 01       	movw	r10, r24
    if(sp == NULL)
   1a182:	00 97       	sbiw	r24, 0x00	; 0
   1a184:	f9 f0       	breq	.+62     	; 0x1a1c4 <lif_open_volume+0x5e>
        return(NULL);


    // To read LIF volume we must have at minimum two sectors
    // volume header a directory entry
    if(sp->st_size < (long)LIF_SECTOR_SIZE*2)
   1a186:	fc 01       	movw	r30, r24
   1a188:	80 8d       	ldd	r24, Z+24	; 0x18
   1a18a:	91 8d       	ldd	r25, Z+25	; 0x19
   1a18c:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a18e:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a190:	81 15       	cp	r24, r1
   1a192:	f2 e0       	ldi	r31, 0x02	; 2
   1a194:	9f 07       	cpc	r25, r31
   1a196:	a1 05       	cpc	r26, r1
   1a198:	b1 05       	cpc	r27, r1
   1a19a:	b8 f4       	brcc	.+46     	; 0x1a1ca <lif_open_volume+0x64>
    {
        if(debuglevel & 1)
   1a19c:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   1a1a0:	20 ff       	sbrs	r18, 0
   1a1a2:	10 c0       	rjmp	.+32     	; 0x1a1c4 <lif_open_volume+0x5e>
            printf("lif_open_volume:[%s] error volume header area too small:[%ld]\n", name, (long)sp->st_size);
   1a1a4:	ed b7       	in	r30, 0x3d	; 61
   1a1a6:	fe b7       	in	r31, 0x3e	; 62
   1a1a8:	86 83       	std	Z+6, r24	; 0x06
   1a1aa:	97 83       	std	Z+7, r25	; 0x07
   1a1ac:	a0 87       	std	Z+8, r26	; 0x08
   1a1ae:	b1 87       	std	Z+9, r27	; 0x09
   1a1b0:	d5 82       	std	Z+5, r13	; 0x05
   1a1b2:	c4 82       	std	Z+4, r12	; 0x04
   1a1b4:	85 e3       	ldi	r24, 0x35	; 53
   1a1b6:	99 e3       	ldi	r25, 0x39	; 57
   1a1b8:	a0 e0       	ldi	r26, 0x00	; 0
   1a1ba:	81 83       	std	Z+1, r24	; 0x01
   1a1bc:	92 83       	std	Z+2, r25	; 0x02
   1a1be:	a3 83       	std	Z+3, r26	; 0x03
   1a1c0:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
        return(NULL);
   1a1c4:	00 e0       	ldi	r16, 0x00	; 0
   1a1c6:	10 e0       	ldi	r17, 0x00	; 0
   1a1c8:	c2 c0       	rjmp	.+388    	; 0x1a34e <lif_open_volume+0x1e8>
    }


    // Allocate LIF structure
    LIF = lif_calloc(sizeof(lif_t)+4);
   1a1ca:	64 e7       	ldi	r22, 0x74	; 116
   1a1cc:	70 e0       	ldi	r23, 0x00	; 0
   1a1ce:	80 e0       	ldi	r24, 0x00	; 0
   1a1d0:	90 e0       	ldi	r25, 0x00	; 0
   1a1d2:	0e 94 3e c0 	call	0x1807c	; 0x1807c <lif_calloc>
   1a1d6:	7c 01       	movw	r14, r24
    if(!LIF)
   1a1d8:	89 2b       	or	r24, r25
   1a1da:	a1 f3       	breq	.-24     	; 0x1a1c4 <lif_open_volume+0x5e>
        return(NULL);

    LIF->name = lif_stralloc(name);
   1a1dc:	c6 01       	movw	r24, r12
   1a1de:	0e 94 89 c0 	call	0x18112	; 0x18112 <lif_stralloc>
   1a1e2:	f7 01       	movw	r30, r14
   1a1e4:	91 83       	std	Z+1, r25	; 0x01
   1a1e6:	80 83       	st	Z, r24
    if(!LIF->name)
   1a1e8:	00 97       	sbiw	r24, 0x00	; 0
   1a1ea:	09 f4       	brne	.+2      	; 0x1a1ee <lif_open_volume+0x88>
   1a1ec:	5a c0       	rjmp	.+180    	; 0x1a2a2 <lif_open_volume+0x13c>
    {
        lif_closedir(LIF);
        return(NULL);
    }
        
    LIF->imagebytes = sp->st_size;
   1a1ee:	f5 01       	movw	r30, r10
   1a1f0:	80 8c       	ldd	r8, Z+24	; 0x18
   1a1f2:	91 8c       	ldd	r9, Z+25	; 0x19
   1a1f4:	a2 8c       	ldd	r10, Z+26	; 0x1a
   1a1f6:	b3 8c       	ldd	r11, Z+27	; 0x1b
   1a1f8:	f7 01       	movw	r30, r14
   1a1fa:	80 86       	std	Z+8, r8	; 0x08
   1a1fc:	91 86       	std	Z+9, r9	; 0x09
   1a1fe:	a2 86       	std	Z+10, r10	; 0x0a
   1a200:	b3 86       	std	Z+11, r11	; 0x0b
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a202:	77 27       	eor	r23, r23
   1a204:	6b 2d       	mov	r22, r11
   1a206:	5a 2d       	mov	r21, r10
   1a208:	49 2d       	mov	r20, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a20a:	88 20       	and	r8, r8
   1a20c:	21 f0       	breq	.+8      	; 0x1a216 <lif_open_volume+0xb0>
        ++sectors;
   1a20e:	4f 5f       	subi	r20, 0xFF	; 255
   1a210:	5f 4f       	sbci	r21, 0xFF	; 255
   1a212:	6f 4f       	sbci	r22, 0xFF	; 255
   1a214:	7f 4f       	sbci	r23, 0xFF	; 255
        lif_closedir(LIF);
        return(NULL);
    }
        
    LIF->imagebytes = sp->st_size;
    LIF->sectors = lif_bytes2sectors(sp->st_size);
   1a216:	f7 01       	movw	r30, r14
   1a218:	44 83       	std	Z+4, r20	; 0x04
   1a21a:	55 83       	std	Z+5, r21	; 0x05
   1a21c:	66 83       	std	Z+6, r22	; 0x06
   1a21e:	77 83       	std	Z+7, r23	; 0x07

    LIF->fp = lif_open(LIF->name,mode);
   1a220:	b8 01       	movw	r22, r16
   1a222:	0e 94 a8 c0 	call	0x18150	; 0x18150 <lif_open>
   1a226:	f7 01       	movw	r30, r14
   1a228:	93 83       	std	Z+3, r25	; 0x03
   1a22a:	82 83       	std	Z+2, r24	; 0x02
    if(!LIF->fp)
   1a22c:	89 2b       	or	r24, r25
   1a22e:	c9 f1       	breq	.+114    	; 0x1a2a2 <lif_open_volume+0x13c>
        return(NULL);
    }
        
        
    // Volume header must be it least one sector
    if( lif_read(LIF, buffer, 0, LIF_SECTOR_SIZE) < LIF_SECTOR_SIZE)
   1a230:	00 e0       	ldi	r16, 0x00	; 0
   1a232:	11 e0       	ldi	r17, 0x01	; 1
   1a234:	20 e0       	ldi	r18, 0x00	; 0
   1a236:	30 e0       	ldi	r19, 0x00	; 0
   1a238:	a9 01       	movw	r20, r18
   1a23a:	be 01       	movw	r22, r28
   1a23c:	66 5f       	subi	r22, 0xF6	; 246
   1a23e:	7f 4f       	sbci	r23, 0xFF	; 255
   1a240:	c7 01       	movw	r24, r14
   1a242:	0e 94 2c c1 	call	0x18258	; 0x18258 <lif_read>
   1a246:	6f 3f       	cpi	r22, 0xFF	; 255
   1a248:	71 05       	cpc	r23, r1
   1a24a:	81 05       	cpc	r24, r1
   1a24c:	91 05       	cpc	r25, r1
   1a24e:	09 f0       	breq	.+2      	; 0x1a252 <lif_open_volume+0xec>
   1a250:	5c f4       	brge	.+22     	; 0x1a268 <lif_open_volume+0x102>
    {
        if(debuglevel & 1)
   1a252:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1a256:	80 ff       	sbrs	r24, 0
   1a258:	24 c0       	rjmp	.+72     	; 0x1a2a2 <lif_open_volume+0x13c>
            printf("lif_open_volume:[%s] error read volume header failed\n", name);
   1a25a:	ed b7       	in	r30, 0x3d	; 61
   1a25c:	fe b7       	in	r31, 0x3e	; 62
   1a25e:	d5 82       	std	Z+5, r13	; 0x05
   1a260:	c4 82       	std	Z+4, r12	; 0x04
   1a262:	8f ef       	ldi	r24, 0xFF	; 255
   1a264:	98 e3       	ldi	r25, 0x38	; 56
   1a266:	17 c0       	rjmp	.+46     	; 0x1a296 <lif_open_volume+0x130>
        lif_closedir(LIF);
        return(NULL);
    }

    // Unpack Volumes has the Directory start sector
    lif_str2vol(buffer, LIF);
   1a268:	b7 01       	movw	r22, r14
   1a26a:	ce 01       	movw	r24, r28
   1a26c:	0a 96       	adiw	r24, 0x0a	; 10
   1a26e:	0e 94 52 c3 	call	0x186a4	; 0x186a4 <lif_str2vol>

    // Validate basic Volume headers 
    if( !lif_check_volume(LIF) )
   1a272:	c7 01       	movw	r24, r14
   1a274:	0e 94 74 c7 	call	0x18ee8	; 0x18ee8 <lif_check_volume>
   1a278:	89 2b       	or	r24, r25
   1a27a:	b1 f4       	brne	.+44     	; 0x1a2a8 <lif_open_volume+0x142>
    {
        if(debuglevel & 1)
   1a27c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1a280:	80 ff       	sbrs	r24, 0
   1a282:	0f c0       	rjmp	.+30     	; 0x1a2a2 <lif_open_volume+0x13c>
            printf("lif_open_volume:[%s] error volume validate failed\n", LIF->name);
   1a284:	f7 01       	movw	r30, r14
   1a286:	80 81       	ld	r24, Z
   1a288:	91 81       	ldd	r25, Z+1	; 0x01
   1a28a:	ed b7       	in	r30, 0x3d	; 61
   1a28c:	fe b7       	in	r31, 0x3e	; 62
   1a28e:	95 83       	std	Z+5, r25	; 0x05
   1a290:	84 83       	std	Z+4, r24	; 0x04
   1a292:	8c ec       	ldi	r24, 0xCC	; 204
   1a294:	98 e3       	ldi	r25, 0x38	; 56
   1a296:	a0 e0       	ldi	r26, 0x00	; 0
   1a298:	81 83       	std	Z+1, r24	; 0x01
   1a29a:	92 83       	std	Z+2, r25	; 0x02
   1a29c:	a3 83       	std	Z+3, r26	; 0x03
   1a29e:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a2a2:	c7 01       	movw	r24, r14
   1a2a4:	a5 d8       	rcall	.-3766   	; 0x193f0 <lif_close_volume>
   1a2a6:	8e cf       	rjmp	.-228    	; 0x1a1c4 <lif_open_volume+0x5e>
        lif_closedir(LIF);
        return(NULL);
    }

    // Initialize remaining LIF headers
    LIF->filestart = LIF->VOL.DirStartSector + LIF->VOL.DirSectors;
   1a2a8:	f7 01       	movw	r30, r14
   1a2aa:	45 a5       	ldd	r20, Z+45	; 0x2d
   1a2ac:	56 a5       	ldd	r21, Z+46	; 0x2e
   1a2ae:	67 a5       	ldd	r22, Z+47	; 0x2f
   1a2b0:	70 a9       	ldd	r23, Z+48	; 0x30
   1a2b2:	85 a9       	ldd	r24, Z+53	; 0x35
   1a2b4:	96 a9       	ldd	r25, Z+54	; 0x36
   1a2b6:	a7 a9       	ldd	r26, Z+55	; 0x37
   1a2b8:	b0 ad       	ldd	r27, Z+56	; 0x38
   1a2ba:	48 0f       	add	r20, r24
   1a2bc:	59 1f       	adc	r21, r25
   1a2be:	6a 1f       	adc	r22, r26
   1a2c0:	7b 1f       	adc	r23, r27
   1a2c2:	44 87       	std	Z+12, r20	; 0x0c
   1a2c4:	55 87       	std	Z+13, r21	; 0x0d
   1a2c6:	66 87       	std	Z+14, r22	; 0x0e
   1a2c8:	77 87       	std	Z+15, r23	; 0x0f
    LIF->filesectors = LIF->sectors - LIF->filestart;
   1a2ca:	84 81       	ldd	r24, Z+4	; 0x04
   1a2cc:	95 81       	ldd	r25, Z+5	; 0x05
   1a2ce:	a6 81       	ldd	r26, Z+6	; 0x06
   1a2d0:	b7 81       	ldd	r27, Z+7	; 0x07
   1a2d2:	84 1b       	sub	r24, r20
   1a2d4:	95 0b       	sbc	r25, r21
   1a2d6:	a6 0b       	sbc	r26, r22
   1a2d8:	b7 0b       	sbc	r27, r23
   1a2da:	80 8b       	std	Z+16, r24	; 0x10
   1a2dc:	91 8b       	std	Z+17, r25	; 0x11
   1a2de:	a2 8b       	std	Z+18, r26	; 0x12
   1a2e0:	b3 8b       	std	Z+19, r27	; 0x13
    LIF->freesectors = LIF->filesectors;
   1a2e2:	80 8f       	std	Z+24, r24	; 0x18
   1a2e4:	91 8f       	std	Z+25, r25	; 0x19
   1a2e6:	a2 8f       	std	Z+26, r26	; 0x1a
   1a2e8:	b3 8f       	std	Z+27, r27	; 0x1b
    LIF->usedsectors = 0;
   1a2ea:	14 8a       	std	Z+20, r1	; 0x14
   1a2ec:	15 8a       	std	Z+21, r1	; 0x15
   1a2ee:	16 8a       	std	Z+22, r1	; 0x16
   1a2f0:	17 8a       	std	Z+23, r1	; 0x17
    LIF->purged = 0;
   1a2f2:	17 8e       	std	Z+31, r1	; 0x1f
   1a2f4:	16 8e       	std	Z+30, r1	; 0x1e
    LIF->files = 0;
   1a2f6:	15 8e       	std	Z+29, r1	; 0x1d
   1a2f8:	14 8e       	std	Z+28, r1	; 0x1c
    LIF->dirindex = 0;
   1a2fa:	11 a2       	std	Z+33, r1	; 0x21
   1a2fc:	10 a2       	std	Z+32, r1	; 0x20
    LIF->EOFindex = 0;
   1a2fe:	13 a2       	std	Z+35, r1	; 0x23

    if( lif_updatefree(LIF) == NULL)
   1a300:	12 a2       	std	Z+34, r1	; 0x22
   1a302:	c7 01       	movw	r24, r14
   1a304:	de d9       	rcall	.-3140   	; 0x196c2 <lif_updatefree>
   1a306:	8c 01       	movw	r16, r24
   1a308:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1a30c:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1a310:	01 15       	cp	r16, r1
   1a312:	11 05       	cpc	r17, r1
    {
        if(debuglevel & 1)
   1a314:	a1 f4       	brne	.+40     	; 0x1a33e <lif_open_volume+0x1d8>
   1a316:	80 ff       	sbrs	r24, 0
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
   1a318:	0f c0       	rjmp	.+30     	; 0x1a338 <lif_open_volume+0x1d2>
   1a31a:	f7 01       	movw	r30, r14
   1a31c:	80 81       	ld	r24, Z
   1a31e:	91 81       	ldd	r25, Z+1	; 0x01
   1a320:	ed b7       	in	r30, 0x3d	; 61
   1a322:	fe b7       	in	r31, 0x3e	; 62
   1a324:	95 83       	std	Z+5, r25	; 0x05
   1a326:	84 83       	std	Z+4, r24	; 0x04
   1a328:	89 e9       	ldi	r24, 0x99	; 153
   1a32a:	98 e3       	ldi	r25, 0x38	; 56
   1a32c:	a0 e0       	ldi	r26, 0x00	; 0
   1a32e:	81 83       	std	Z+1, r24	; 0x01
   1a330:	92 83       	std	Z+2, r25	; 0x02
   1a332:	a3 83       	std	Z+3, r26	; 0x03
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a334:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   1a338:	c7 01       	movw	r24, r14
    if( lif_updatefree(LIF) == NULL)
    {
        if(debuglevel & 1)
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
        lif_closedir(LIF);
        return(NULL);
   1a33a:	5a d8       	rcall	.-3916   	; 0x193f0 <lif_close_volume>
    }

	if(debuglevel &0x400)
   1a33c:	08 c0       	rjmp	.+16     	; 0x1a34e <lif_open_volume+0x1e8>
   1a33e:	92 ff       	sbrs	r25, 2
		lif_dump_vol(LIF, "Volume Listing");	
   1a340:	05 c0       	rjmp	.+10     	; 0x1a34c <lif_open_volume+0x1e6>
   1a342:	65 e8       	ldi	r22, 0x85	; 133
   1a344:	75 e1       	ldi	r23, 0x15	; 21
   1a346:	c7 01       	movw	r24, r14
   1a348:	0e 94 ae c5 	call	0x18b5c	; 0x18b5c <lif_dump_vol>
    return( LIF );
}
   1a34c:	87 01       	movw	r16, r14
   1a34e:	c8 01       	movw	r24, r16
   1a350:	c7 5c       	subi	r28, 0xC7	; 199
   1a352:	de 4f       	sbci	r29, 0xFE	; 254
   1a354:	ec e0       	ldi	r30, 0x0C	; 12
   1a356:	0c 94 ea e3 	jmp	0x1c7d4	; 0x1c7d4 <__epilogue_restores__+0xc>

0001a35a <lif_dir>:
/// @brief Display a LIF image file directory
/// @param[in] lifimagename: LIF disk image name
/// @return -1 on error or number of files found
MEMSPACE
void lif_dir(char *lifimagename)
{
   1a35a:	2f 92       	push	r2
   1a35c:	3f 92       	push	r3
   1a35e:	4f 92       	push	r4
   1a360:	5f 92       	push	r5
   1a362:	6f 92       	push	r6
   1a364:	8f 92       	push	r8
   1a366:	9f 92       	push	r9
   1a368:	af 92       	push	r10
   1a36a:	bf 92       	push	r11
   1a36c:	cf 92       	push	r12
   1a36e:	df 92       	push	r13
   1a370:	ef 92       	push	r14
   1a372:	0f 93       	push	r16
   1a374:	1f 93       	push	r17
   1a376:	cf 93       	push	r28
   1a378:	df 93       	push	r29
   1a37a:	cd b7       	in	r28, 0x3d	; 61
   1a37c:	de b7       	in	r29, 0x3e	; 62
   1a37e:	af 97       	sbiw	r28, 0x2f	; 47
   1a380:	0f b6       	in	r0, 0x3f	; 63
   1a382:	f8 94       	cli
   1a384:	de bf       	out	0x3e, r29	; 62
   1a386:	0f be       	out	0x3f, r0	; 63
   1a388:	cd bf       	out	0x3d, r28	; 61
    int index = 0;
    char *vol;

    int warn = ' ';

    LIF = lif_open_volume(lifimagename,"rb+");
   1a38a:	66 e2       	ldi	r22, 0x26	; 38
   1a38c:	78 e0       	ldi	r23, 0x08	; 8
   1a38e:	eb de       	rcall	.-554    	; 0x1a166 <lif_open_volume>
   1a390:	9f a7       	std	Y+47, r25	; 0x2f
   1a392:	8e a7       	std	Y+46, r24	; 0x2e
    if(LIF == NULL)
   1a394:	00 97       	sbiw	r24, 0x00	; 0
   1a396:	09 f4       	brne	.+2      	; 0x1a39a <lif_dir+0x40>
   1a398:	9e c1       	rjmp	.+828    	; 0x1a6d6 <lif_dir+0x37c>
        return;

    vol = (char *)LIF->VOL.Label;
    if(!vol[0])
   1a39a:	fc 01       	movw	r30, r24
   1a39c:	86 a1       	ldd	r24, Z+38	; 0x26
   1a39e:	88 23       	and	r24, r24
   1a3a0:	21 f0       	breq	.+8      	; 0x1a3aa <lif_dir+0x50>

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return;

    vol = (char *)LIF->VOL.Label;
   1a3a2:	8f 01       	movw	r16, r30
   1a3a4:	0a 5d       	subi	r16, 0xDA	; 218
   1a3a6:	1f 4f       	sbci	r17, 0xFF	; 255
   1a3a8:	02 c0       	rjmp	.+4      	; 0x1a3ae <lif_dir+0x54>
    if(!vol[0])
        vol = "<EMPTY>";
   1a3aa:	07 e3       	ldi	r16, 0x37	; 55
   1a3ac:	15 e1       	ldi	r17, 0x15	; 21

    printf("Volume:[%s] Date:[%s]\n", vol, lif_lifbcd2timestr(LIF->VOL.date));
   1a3ae:	8e a5       	ldd	r24, Y+46	; 0x2e
   1a3b0:	9f a5       	ldd	r25, Y+47	; 0x2f
   1a3b2:	87 5b       	subi	r24, 0xB7	; 183
   1a3b4:	9f 4f       	sbci	r25, 0xFF	; 255
   1a3b6:	0e 94 72 c5 	call	0x18ae4	; 0x18ae4 <lif_lifbcd2timestr>
   1a3ba:	ed b7       	in	r30, 0x3d	; 61
   1a3bc:	fe b7       	in	r31, 0x3e	; 62
   1a3be:	97 83       	std	Z+7, r25	; 0x07
   1a3c0:	86 83       	std	Z+6, r24	; 0x06
   1a3c2:	15 83       	std	Z+5, r17	; 0x05
   1a3c4:	04 83       	std	Z+4, r16	; 0x04
   1a3c6:	82 e8       	ldi	r24, 0x82	; 130
   1a3c8:	98 e3       	ldi	r25, 0x38	; 56
   1a3ca:	a0 e0       	ldi	r26, 0x00	; 0
   1a3cc:	81 83       	std	Z+1, r24	; 0x01
   1a3ce:	92 83       	std	Z+2, r25	; 0x02
   1a3d0:	a3 83       	std	Z+3, r26	; 0x03
   1a3d2:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    
    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
   1a3d6:	82 e4       	ldi	r24, 0x42	; 66
   1a3d8:	98 e3       	ldi	r25, 0x38	; 56
   1a3da:	a0 e0       	ldi	r26, 0x00	; 0
   1a3dc:	ed b7       	in	r30, 0x3d	; 61
   1a3de:	fe b7       	in	r31, 0x3e	; 62
   1a3e0:	81 83       	std	Z+1, r24	; 0x01
   1a3e2:	92 83       	std	Z+2, r25	; 0x02
   1a3e4:	a3 83       	std	Z+3, r26	; 0x03
   1a3e6:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    long bytes;
    lif_t *LIF;
    int index = 0;
    char *vol;

    int warn = ' ';
   1a3ea:	00 e2       	ldi	r16, 0x20	; 32
   1a3ec:	10 e0       	ldi	r17, 0x00	; 0
   1a3ee:	1f 8b       	std	Y+23, r17	; 0x17
   1a3f0:	0e 8b       	std	Y+22, r16	; 0x16
MEMSPACE
void lif_dir(char *lifimagename)
{
    long bytes;
    lif_t *LIF;
    int index = 0;
   1a3f2:	21 2c       	mov	r2, r1
   1a3f4:	31 2c       	mov	r3, r1

        if(!lif_readdirindex(LIF,index))
            break;


        if(LIF->DIR.FileType == 0xffff)
   1a3f6:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a3f8:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a3fa:	06 5a       	subi	r16, 0xA6	; 166
   1a3fc:	1f 4f       	sbci	r17, 0xFF	; 255
   1a3fe:	1d 8f       	std	Y+29, r17	; 0x1d
   1a400:	0c 8f       	std	Y+28, r16	; 0x1c
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   1a402:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a404:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a406:	00 5a       	subi	r16, 0xA0	; 160
   1a408:	1f 4f       	sbci	r17, 0xFF	; 255
   1a40a:	1d a3       	std	Y+37, r17	; 0x25
   1a40c:	0c a3       	std	Y+36, r16	; 0x24

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1a40e:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a410:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a412:	04 59       	subi	r16, 0x94	; 148
   1a414:	1f 4f       	sbci	r17, 0xFF	; 255
   1a416:	1f a3       	std	Y+39, r17	; 0x27
   1a418:	0e a3       	std	Y+38, r16	; 0x26
            else
            {
                warn = '!';
                if(debuglevel & 0x400)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n", 
   1a41a:	86 ef       	ldi	r24, 0xF6	; 246
   1a41c:	97 e3       	ldi	r25, 0x37	; 55
   1a41e:	6c 01       	movw	r12, r24
   1a420:	e1 2c       	mov	r14, r1
   1a422:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a424:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a426:	01 5b       	subi	r16, 0xB1	; 177
   1a428:	1f 4f       	sbci	r17, 0xFF	; 255
   1a42a:	1f 8f       	std	Y+31, r17	; 0x1f
   1a42c:	0e 8f       	std	Y+30, r16	; 0x1e
            }
        }


        // name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n", 
   1a42e:	86 ec       	ldi	r24, 0xC6	; 198
   1a430:	97 e3       	ldi	r25, 0x37	; 55
   1a432:	2c 01       	movw	r4, r24
   1a434:	61 2c       	mov	r6, r1
   1a436:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a438:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a43a:	04 5a       	subi	r16, 0xA4	; 164
   1a43c:	1f 4f       	sbci	r17, 0xFF	; 255
   1a43e:	19 a7       	std	Y+41, r17	; 0x29
   1a440:	08 a7       	std	Y+40, r16	; 0x28
   1a442:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a444:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a446:	02 59       	subi	r16, 0x92	; 146
   1a448:	1f 4f       	sbci	r17, 0xFF	; 255
   1a44a:	1b a7       	std	Y+43, r17	; 0x2b
   1a44c:	0a a7       	std	Y+42, r16	; 0x2a
   1a44e:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a450:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a452:	0c 59       	subi	r16, 0x9C	; 156
   1a454:	1f 4f       	sbci	r17, 0xFF	; 255
   1a456:	1d a7       	std	Y+45, r17	; 0x2d
   1a458:	0c a7       	std	Y+44, r16	; 0x2c
    
    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
    while(1)
    {

        if(!lif_readdirindex(LIF,index))
   1a45a:	b1 01       	movw	r22, r2
   1a45c:	8e a5       	ldd	r24, Y+46	; 0x2e
   1a45e:	9f a5       	ldd	r25, Y+47	; 0x2f
   1a460:	55 d8       	rcall	.-3926   	; 0x1950c <lif_readdirindex>
   1a462:	89 2b       	or	r24, r25
   1a464:	09 f4       	brne	.+2      	; 0x1a468 <lif_dir+0x10e>
   1a466:	ad c0       	rjmp	.+346    	; 0x1a5c2 <lif_dir+0x268>
            break;


        if(LIF->DIR.FileType == 0xffff)
   1a468:	ac 8d       	ldd	r26, Y+28	; 0x1c
   1a46a:	bd 8d       	ldd	r27, Y+29	; 0x1d
   1a46c:	8d 91       	ld	r24, X+
   1a46e:	9c 91       	ld	r25, X
   1a470:	8f 3f       	cpi	r24, 0xFF	; 255
   1a472:	bf ef       	ldi	r27, 0xFF	; 255
   1a474:	9b 07       	cpc	r25, r27
   1a476:	09 f4       	brne	.+2      	; 0x1a47a <lif_dir+0x120>
   1a478:	a4 c0       	rjmp	.+328    	; 0x1a5c2 <lif_dir+0x268>
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   1a47a:	ec a1       	ldd	r30, Y+36	; 0x24
   1a47c:	fd a1       	ldd	r31, Y+37	; 0x25
   1a47e:	40 81       	ld	r20, Z
   1a480:	51 81       	ldd	r21, Z+1	; 0x01
   1a482:	62 81       	ldd	r22, Z+2	; 0x02
   1a484:	73 81       	ldd	r23, Z+3	; 0x03
   1a486:	00 27       	eor	r16, r16
   1a488:	14 2f       	mov	r17, r20
   1a48a:	25 2f       	mov	r18, r21
   1a48c:	36 2f       	mov	r19, r22
   1a48e:	08 8f       	std	Y+24, r16	; 0x18
   1a490:	19 8f       	std	Y+25, r17	; 0x19
   1a492:	2a 8f       	std	Y+26, r18	; 0x1a
   1a494:	3b 8f       	std	Y+27, r19	; 0x1b

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
   1a496:	8c 7f       	andi	r24, 0xFC	; 252
   1a498:	80 31       	cpi	r24, 0x10	; 16
   1a49a:	90 4e       	sbci	r25, 0xE0	; 224
   1a49c:	09 f0       	breq	.+2      	; 0x1a4a0 <lif_dir+0x146>
   1a49e:	4b c0       	rjmp	.+150    	; 0x1a536 <lif_dir+0x1dc>
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1a4a0:	ae a1       	ldd	r26, Y+38	; 0x26
   1a4a2:	bf a1       	ldd	r27, Y+39	; 0x27
   1a4a4:	8d 91       	ld	r24, X+
   1a4a6:	9c 91       	ld	r25, X
   1a4a8:	00 97       	sbiw	r24, 0x00	; 0
   1a4aa:	b9 f0       	breq	.+46     	; 0x1a4da <lif_dir+0x180>
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a4ac:	4c 01       	movw	r8, r24
   1a4ae:	a1 2c       	mov	r10, r1
   1a4b0:	b1 2c       	mov	r11, r1
   1a4b2:	33 27       	eor	r19, r19
   1a4b4:	2b 2d       	mov	r18, r11
   1a4b6:	1a 2d       	mov	r17, r10
   1a4b8:	09 2d       	mov	r16, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a4ba:	88 23       	and	r24, r24
   1a4bc:	21 f0       	breq	.+8      	; 0x1a4c6 <lif_dir+0x16c>
        ++sectors;
   1a4be:	0f 5f       	subi	r16, 0xFF	; 255
   1a4c0:	1f 4f       	sbci	r17, 0xFF	; 255
   1a4c2:	2f 4f       	sbci	r18, 0xFF	; 255
   1a4c4:	3f 4f       	sbci	r19, 0xFF	; 255

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1a4c6:	40 17       	cp	r20, r16
   1a4c8:	51 07       	cpc	r21, r17
   1a4ca:	62 07       	cpc	r22, r18
   1a4cc:	73 07       	cpc	r23, r19
   1a4ce:	29 f4       	brne	.+10     	; 0x1a4da <lif_dir+0x180>
            {
                bytes = LIF->DIR.FileBytes;
   1a4d0:	88 8e       	std	Y+24, r8	; 0x18
   1a4d2:	99 8e       	std	Y+25, r9	; 0x19
   1a4d4:	aa 8e       	std	Y+26, r10	; 0x1a
   1a4d6:	bb 8e       	std	Y+27, r11	; 0x1b
   1a4d8:	2e c0       	rjmp	.+92     	; 0x1a536 <lif_dir+0x1dc>
            }
            else
            {
                warn = '!';
                if(debuglevel & 0x400)
   1a4da:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   1a4de:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1a4e2:	32 ff       	sbrs	r19, 2
   1a4e4:	24 c0       	rjmp	.+72     	; 0x1a52e <lif_dir+0x1d4>
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n", 
   1a4e6:	4c 01       	movw	r8, r24
   1a4e8:	a1 2c       	mov	r10, r1
   1a4ea:	b1 2c       	mov	r11, r1
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a4ec:	33 27       	eor	r19, r19
   1a4ee:	2b 2d       	mov	r18, r11
   1a4f0:	1a 2d       	mov	r17, r10
   1a4f2:	09 2d       	mov	r16, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a4f4:	88 23       	and	r24, r24
   1a4f6:	21 f0       	breq	.+8      	; 0x1a500 <lif_dir+0x1a6>
        ++sectors;
   1a4f8:	0f 5f       	subi	r16, 0xFF	; 255
   1a4fa:	1f 4f       	sbci	r17, 0xFF	; 255
   1a4fc:	2f 4f       	sbci	r18, 0xFF	; 255
   1a4fe:	3f 4f       	sbci	r19, 0xFF	; 255
            else
            {
                warn = '!';
                if(debuglevel & 0x400)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n", 
   1a500:	ed b7       	in	r30, 0x3d	; 61
   1a502:	fe b7       	in	r31, 0x3e	; 62
   1a504:	46 87       	std	Z+14, r20	; 0x0e
   1a506:	57 87       	std	Z+15, r21	; 0x0f
   1a508:	60 8b       	std	Z+16, r22	; 0x10
   1a50a:	71 8b       	std	Z+17, r23	; 0x11
   1a50c:	02 87       	std	Z+10, r16	; 0x0a
   1a50e:	13 87       	std	Z+11, r17	; 0x0b
   1a510:	24 87       	std	Z+12, r18	; 0x0c
   1a512:	35 87       	std	Z+13, r19	; 0x0d
   1a514:	86 82       	std	Z+6, r8	; 0x06
   1a516:	97 82       	std	Z+7, r9	; 0x07
   1a518:	a0 86       	std	Z+8, r10	; 0x08
   1a51a:	b1 86       	std	Z+9, r11	; 0x09
   1a51c:	0e 8d       	ldd	r16, Y+30	; 0x1e
   1a51e:	1f 8d       	ldd	r17, Y+31	; 0x1f
   1a520:	15 83       	std	Z+5, r17	; 0x05
   1a522:	04 83       	std	Z+4, r16	; 0x04
   1a524:	c1 82       	std	Z+1, r12	; 0x01
   1a526:	d2 82       	std	Z+2, r13	; 0x02
   1a528:	e3 82       	std	Z+3, r14	; 0x03
   1a52a:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
            {
                bytes = LIF->DIR.FileBytes;
            }
            else
            {
                warn = '!';
   1a52e:	01 e2       	ldi	r16, 0x21	; 33
   1a530:	10 e0       	ldi	r17, 0x00	; 0
   1a532:	1f 8b       	std	Y+23, r17	; 0x17
   1a534:	0e 8b       	std	Y+22, r16	; 0x16
            }
        }


        // name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n", 
   1a536:	ac 8d       	ldd	r26, Y+28	; 0x1c
   1a538:	bd 8d       	ldd	r27, Y+29	; 0x1d
   1a53a:	8d 90       	ld	r8, X+
   1a53c:	9c 90       	ld	r9, X
   1a53e:	81 14       	cp	r8, r1
   1a540:	91 04       	cpc	r9, r1
   1a542:	19 f0       	breq	.+6      	; 0x1a54a <lif_dir+0x1f0>
   1a544:	0e 8d       	ldd	r16, Y+30	; 0x1e
   1a546:	1f 8d       	ldd	r17, Y+31	; 0x1f
   1a548:	02 c0       	rjmp	.+4      	; 0x1a54e <lif_dir+0x1f4>
   1a54a:	04 e9       	ldi	r16, 0x94	; 148
   1a54c:	15 e1       	ldi	r17, 0x15	; 21
   1a54e:	a8 a5       	ldd	r26, Y+40	; 0x28
   1a550:	b9 a5       	ldd	r27, Y+41	; 0x29
   1a552:	8d 91       	ld	r24, X+
   1a554:	9d 91       	ld	r25, X+
   1a556:	0d 90       	ld	r0, X+
   1a558:	bc 91       	ld	r27, X
   1a55a:	a0 2d       	mov	r26, r0
   1a55c:	88 a3       	std	Y+32, r24	; 0x20
   1a55e:	99 a3       	std	Y+33, r25	; 0x21
   1a560:	aa a3       	std	Y+34, r26	; 0x22
   1a562:	bb a3       	std	Y+35, r27	; 0x23
   1a564:	ea a5       	ldd	r30, Y+42	; 0x2a
   1a566:	fb a5       	ldd	r31, Y+43	; 0x2b
   1a568:	a0 80       	ld	r10, Z
   1a56a:	b1 80       	ldd	r11, Z+1	; 0x01
   1a56c:	8c a5       	ldd	r24, Y+44	; 0x2c
   1a56e:	9d a5       	ldd	r25, Y+45	; 0x2d
   1a570:	0e 94 72 c5 	call	0x18ae4	; 0x18ae4 <lif_lifbcd2timestr>
   1a574:	ed b7       	in	r30, 0x3d	; 61
   1a576:	fe b7       	in	r31, 0x3e	; 62
   1a578:	95 8b       	std	Z+21, r25	; 0x15
   1a57a:	84 8b       	std	Z+20, r24	; 0x14
   1a57c:	b3 8a       	std	Z+19, r11	; 0x13
   1a57e:	a2 8a       	std	Z+18, r10	; 0x12
   1a580:	2e 89       	ldd	r18, Y+22	; 0x16
   1a582:	3f 89       	ldd	r19, Y+23	; 0x17
   1a584:	31 8b       	std	Z+17, r19	; 0x11
   1a586:	20 8b       	std	Z+16, r18	; 0x10
   1a588:	88 8d       	ldd	r24, Y+24	; 0x18
   1a58a:	99 8d       	ldd	r25, Y+25	; 0x19
   1a58c:	aa 8d       	ldd	r26, Y+26	; 0x1a
   1a58e:	bb 8d       	ldd	r27, Y+27	; 0x1b
   1a590:	84 87       	std	Z+12, r24	; 0x0c
   1a592:	95 87       	std	Z+13, r25	; 0x0d
   1a594:	a6 87       	std	Z+14, r26	; 0x0e
   1a596:	b7 87       	std	Z+15, r27	; 0x0f
   1a598:	88 a1       	ldd	r24, Y+32	; 0x20
   1a59a:	99 a1       	ldd	r25, Y+33	; 0x21
   1a59c:	aa a1       	ldd	r26, Y+34	; 0x22
   1a59e:	bb a1       	ldd	r27, Y+35	; 0x23
   1a5a0:	80 87       	std	Z+8, r24	; 0x08
   1a5a2:	91 87       	std	Z+9, r25	; 0x09
   1a5a4:	a2 87       	std	Z+10, r26	; 0x0a
   1a5a6:	b3 87       	std	Z+11, r27	; 0x0b
   1a5a8:	97 82       	std	Z+7, r9	; 0x07
   1a5aa:	86 82       	std	Z+6, r8	; 0x06
   1a5ac:	15 83       	std	Z+5, r17	; 0x05
   1a5ae:	04 83       	std	Z+4, r16	; 0x04
   1a5b0:	41 82       	std	Z+1, r4	; 0x01
   1a5b2:	52 82       	std	Z+2, r5	; 0x02
   1a5b4:	63 82       	std	Z+3, r6	; 0x03
   1a5b6:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
            (long)bytes, 
            warn,
            (int)LIF->DIR.SectorSize,
            lif_lifbcd2timestr(LIF->DIR.date));

        ++index;
   1a5ba:	ff ef       	ldi	r31, 0xFF	; 255
   1a5bc:	2f 1a       	sub	r2, r31
   1a5be:	3f 0a       	sbc	r3, r31
    }   
   1a5c0:	4c cf       	rjmp	.-360    	; 0x1a45a <lif_dir+0x100>

    printf("\n");
   1a5c2:	84 ec       	ldi	r24, 0xC4	; 196
   1a5c4:	97 e3       	ldi	r25, 0x37	; 55
   1a5c6:	a0 e0       	ldi	r26, 0x00	; 0
   1a5c8:	ed b7       	in	r30, 0x3d	; 61
   1a5ca:	fe b7       	in	r31, 0x3e	; 62
   1a5cc:	81 83       	std	Z+1, r24	; 0x01
   1a5ce:	92 83       	std	Z+2, r25	; 0x02
   1a5d0:	a3 83       	std	Z+3, r26	; 0x03
   1a5d2:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    printf("%8ld Files\n", (long)LIF->files);
   1a5d6:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a5d8:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a5da:	84 8d       	ldd	r24, Z+28	; 0x1c
   1a5dc:	95 8d       	ldd	r25, Z+29	; 0x1d
   1a5de:	09 2e       	mov	r0, r25
   1a5e0:	00 0c       	add	r0, r0
   1a5e2:	aa 0b       	sbc	r26, r26
   1a5e4:	bb 0b       	sbc	r27, r27
   1a5e6:	ed b7       	in	r30, 0x3d	; 61
   1a5e8:	fe b7       	in	r31, 0x3e	; 62
   1a5ea:	84 83       	std	Z+4, r24	; 0x04
   1a5ec:	95 83       	std	Z+5, r25	; 0x05
   1a5ee:	a6 83       	std	Z+6, r26	; 0x06
   1a5f0:	b7 83       	std	Z+7, r27	; 0x07
   1a5f2:	88 eb       	ldi	r24, 0xB8	; 184
   1a5f4:	97 e3       	ldi	r25, 0x37	; 55
   1a5f6:	a0 e0       	ldi	r26, 0x00	; 0
   1a5f8:	81 83       	std	Z+1, r24	; 0x01
   1a5fa:	92 83       	std	Z+2, r25	; 0x02
   1a5fc:	a3 83       	std	Z+3, r26	; 0x03
   1a5fe:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    printf("%8ld Purged\n", (long)LIF->purged);
   1a602:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a604:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a606:	86 8d       	ldd	r24, Z+30	; 0x1e
   1a608:	97 8d       	ldd	r25, Z+31	; 0x1f
   1a60a:	09 2e       	mov	r0, r25
   1a60c:	00 0c       	add	r0, r0
   1a60e:	aa 0b       	sbc	r26, r26
   1a610:	bb 0b       	sbc	r27, r27
   1a612:	ed b7       	in	r30, 0x3d	; 61
   1a614:	fe b7       	in	r31, 0x3e	; 62
   1a616:	84 83       	std	Z+4, r24	; 0x04
   1a618:	95 83       	std	Z+5, r25	; 0x05
   1a61a:	a6 83       	std	Z+6, r26	; 0x06
   1a61c:	b7 83       	std	Z+7, r27	; 0x07
   1a61e:	8b ea       	ldi	r24, 0xAB	; 171
   1a620:	97 e3       	ldi	r25, 0x37	; 55
   1a622:	a0 e0       	ldi	r26, 0x00	; 0
   1a624:	81 83       	std	Z+1, r24	; 0x01
   1a626:	92 83       	std	Z+2, r25	; 0x02
   1a628:	a3 83       	std	Z+3, r26	; 0x03
   1a62a:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    printf("%8ld Dir  start\n",   (long)LIF->VOL.DirStartSector);
   1a62e:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a630:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a632:	85 a5       	ldd	r24, Z+45	; 0x2d
   1a634:	96 a5       	ldd	r25, Z+46	; 0x2e
   1a636:	a7 a5       	ldd	r26, Z+47	; 0x2f
   1a638:	b0 a9       	ldd	r27, Z+48	; 0x30
   1a63a:	ed b7       	in	r30, 0x3d	; 61
   1a63c:	fe b7       	in	r31, 0x3e	; 62
   1a63e:	84 83       	std	Z+4, r24	; 0x04
   1a640:	95 83       	std	Z+5, r25	; 0x05
   1a642:	a6 83       	std	Z+6, r26	; 0x06
   1a644:	b7 83       	std	Z+7, r27	; 0x07
   1a646:	8a e9       	ldi	r24, 0x9A	; 154
   1a648:	97 e3       	ldi	r25, 0x37	; 55
   1a64a:	a0 e0       	ldi	r26, 0x00	; 0
   1a64c:	81 83       	std	Z+1, r24	; 0x01
   1a64e:	92 83       	std	Z+2, r25	; 0x02
   1a650:	a3 83       	std	Z+3, r26	; 0x03
   1a652:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    printf("%8ld Dir  sectors\n", (long)LIF->VOL.DirSectors);
   1a656:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a658:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a65a:	85 a9       	ldd	r24, Z+53	; 0x35
   1a65c:	96 a9       	ldd	r25, Z+54	; 0x36
   1a65e:	a7 a9       	ldd	r26, Z+55	; 0x37
   1a660:	b0 ad       	ldd	r27, Z+56	; 0x38
   1a662:	ed b7       	in	r30, 0x3d	; 61
   1a664:	fe b7       	in	r31, 0x3e	; 62
   1a666:	84 83       	std	Z+4, r24	; 0x04
   1a668:	95 83       	std	Z+5, r25	; 0x05
   1a66a:	a6 83       	std	Z+6, r26	; 0x06
   1a66c:	b7 83       	std	Z+7, r27	; 0x07
   1a66e:	87 e8       	ldi	r24, 0x87	; 135
   1a670:	97 e3       	ldi	r25, 0x37	; 55
   1a672:	a0 e0       	ldi	r26, 0x00	; 0
   1a674:	81 83       	std	Z+1, r24	; 0x01
   1a676:	92 83       	std	Z+2, r25	; 0x02
   1a678:	a3 83       	std	Z+3, r26	; 0x03
   1a67a:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
   1a67e:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a680:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a682:	84 89       	ldd	r24, Z+20	; 0x14
   1a684:	95 89       	ldd	r25, Z+21	; 0x15
   1a686:	a6 89       	ldd	r26, Z+22	; 0x16
   1a688:	b7 89       	ldd	r27, Z+23	; 0x17
   1a68a:	ed b7       	in	r30, 0x3d	; 61
   1a68c:	fe b7       	in	r31, 0x3e	; 62
   1a68e:	84 83       	std	Z+4, r24	; 0x04
   1a690:	95 83       	std	Z+5, r25	; 0x05
   1a692:	a6 83       	std	Z+6, r26	; 0x06
   1a694:	b7 83       	std	Z+7, r27	; 0x07
   1a696:	84 e7       	ldi	r24, 0x74	; 116
   1a698:	97 e3       	ldi	r25, 0x37	; 55
   1a69a:	a0 e0       	ldi	r26, 0x00	; 0
   1a69c:	81 83       	std	Z+1, r24	; 0x01
   1a69e:	92 83       	std	Z+2, r25	; 0x02
   1a6a0:	a3 83       	std	Z+3, r26	; 0x03
   1a6a2:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    printf("%8ld Free sectors\n", (long)LIF->freesectors);
   1a6a6:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a6a8:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a6aa:	80 8d       	ldd	r24, Z+24	; 0x18
   1a6ac:	91 8d       	ldd	r25, Z+25	; 0x19
   1a6ae:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a6b0:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a6b2:	ed b7       	in	r30, 0x3d	; 61
   1a6b4:	fe b7       	in	r31, 0x3e	; 62
   1a6b6:	84 83       	std	Z+4, r24	; 0x04
   1a6b8:	95 83       	std	Z+5, r25	; 0x05
   1a6ba:	a6 83       	std	Z+6, r26	; 0x06
   1a6bc:	b7 83       	std	Z+7, r27	; 0x07
   1a6be:	81 e6       	ldi	r24, 0x61	; 97
   1a6c0:	97 e3       	ldi	r25, 0x37	; 55
   1a6c2:	a0 e0       	ldi	r26, 0x00	; 0
   1a6c4:	81 83       	std	Z+1, r24	; 0x01
   1a6c6:	92 83       	std	Z+2, r25	; 0x02
   1a6c8:	a3 83       	std	Z+3, r26	; 0x03
   1a6ca:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a6ce:	8e a5       	ldd	r24, Y+46	; 0x2e
   1a6d0:	9f a5       	ldd	r25, Y+47	; 0x2f
   1a6d2:	0e 94 f8 c9 	call	0x193f0	; 0x193f0 <lif_close_volume>
    printf("%8ld Dir  sectors\n", (long)LIF->VOL.DirSectors);
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
    printf("%8ld Free sectors\n", (long)LIF->freesectors);

    lif_closedir(LIF);
}
   1a6d6:	af 96       	adiw	r28, 0x2f	; 47
   1a6d8:	0f b6       	in	r0, 0x3f	; 63
   1a6da:	f8 94       	cli
   1a6dc:	de bf       	out	0x3e, r29	; 62
   1a6de:	0f be       	out	0x3f, r0	; 63
   1a6e0:	cd bf       	out	0x3d, r28	; 61
   1a6e2:	df 91       	pop	r29
   1a6e4:	cf 91       	pop	r28
   1a6e6:	1f 91       	pop	r17
   1a6e8:	0f 91       	pop	r16
   1a6ea:	ef 90       	pop	r14
   1a6ec:	df 90       	pop	r13
   1a6ee:	cf 90       	pop	r12
   1a6f0:	bf 90       	pop	r11
   1a6f2:	af 90       	pop	r10
   1a6f4:	9f 90       	pop	r9
   1a6f6:	8f 90       	pop	r8
   1a6f8:	6f 90       	pop	r6
   1a6fa:	5f 90       	pop	r5
   1a6fc:	4f 90       	pop	r4
   1a6fe:	3f 90       	pop	r3
   1a700:	2f 90       	pop	r2
   1a702:	08 95       	ret

0001a704 <lif_find_file>:
/// @param[in] *LIF: directory pointer
/// @param[in] liflabel: File name in LIF image
/// @return Directory index of record
MEMSPACE
int lif_find_file(lif_t *LIF, char *liflabel)
{
   1a704:	a5 e0       	ldi	r26, 0x05	; 5
   1a706:	b0 e0       	ldi	r27, 0x00	; 0
   1a708:	e8 e8       	ldi	r30, 0x88	; 136
   1a70a:	f3 ed       	ldi	r31, 0xD3	; 211
   1a70c:	0c 94 d0 e3 	jmp	0x1c7a0	; 0x1c7a0 <__prologue_saves__+0x10>
   1a710:	7c 01       	movw	r14, r24
   1a712:	eb 01       	movw	r28, r22
    int index;

    if( !lif_checkname(liflabel) )
   1a714:	cb 01       	movw	r24, r22
   1a716:	0e 94 43 c2 	call	0x18486	; 0x18486 <lif_checkname>
   1a71a:	89 2b       	or	r24, r25
   1a71c:	59 f4       	brne	.+22     	; 0x1a734 <lif_find_file+0x30>
    {
        if(debuglevel & 1)
   1a71e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1a722:	80 ff       	sbrs	r24, 0
   1a724:	46 c0       	rjmp	.+140    	; 0x1a7b2 <lif_find_file+0xae>
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
   1a726:	ed b7       	in	r30, 0x3d	; 61
   1a728:	fe b7       	in	r31, 0x3e	; 62
   1a72a:	d5 83       	std	Z+5, r29	; 0x05
   1a72c:	c4 83       	std	Z+4, r28	; 0x04
   1a72e:	8a e3       	ldi	r24, 0x3A	; 58
   1a730:	97 e3       	ldi	r25, 0x37	; 55
   1a732:	13 c0       	rjmp	.+38     	; 0x1a75a <lif_find_file+0x56>
        return(-1);
    }
    if(strlen(liflabel) > 10)
   1a734:	fe 01       	movw	r30, r28
   1a736:	01 90       	ld	r0, Z+
   1a738:	00 20       	and	r0, r0
   1a73a:	e9 f7       	brne	.-6      	; 0x1a736 <lif_find_file+0x32>
   1a73c:	31 97       	sbiw	r30, 0x01	; 1
   1a73e:	ec 1b       	sub	r30, r28
   1a740:	fd 0b       	sbc	r31, r29
   1a742:	3b 97       	sbiw	r30, 0x0b	; 11
   1a744:	88 f0       	brcs	.+34     	; 0x1a768 <lif_find_file+0x64>
    {
        if(debuglevel & 1)
   1a746:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1a74a:	80 ff       	sbrs	r24, 0
   1a74c:	32 c0       	rjmp	.+100    	; 0x1a7b2 <lif_find_file+0xae>
            printf("lif_find_file:[%s] liflabel too big\n", liflabel);
   1a74e:	ed b7       	in	r30, 0x3d	; 61
   1a750:	fe b7       	in	r31, 0x3e	; 62
   1a752:	d5 83       	std	Z+5, r29	; 0x05
   1a754:	c4 83       	std	Z+4, r28	; 0x04
   1a756:	85 e1       	ldi	r24, 0x15	; 21
   1a758:	97 e3       	ldi	r25, 0x37	; 55
   1a75a:	a0 e0       	ldi	r26, 0x00	; 0
   1a75c:	81 83       	std	Z+1, r24	; 0x01
   1a75e:	92 83       	std	Z+2, r25	; 0x02
   1a760:	a3 83       	std	Z+3, r26	; 0x03
   1a762:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   1a766:	25 c0       	rjmp	.+74     	; 0x1a7b2 <lif_find_file+0xae>
        return(-1);
    }

    if(LIF == NULL)
   1a768:	e1 14       	cp	r14, r1
   1a76a:	f1 04       	cpc	r15, r1
   1a76c:	11 f1       	breq	.+68     	; 0x1a7b2 <lif_find_file+0xae>
   1a76e:	00 e0       	ldi	r16, 0x00	; 0
   1a770:	10 e0       	ldi	r17, 0x00	; 0
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1a772:	67 01       	movw	r12, r14
   1a774:	fa e5       	ldi	r31, 0x5A	; 90
   1a776:	cf 0e       	add	r12, r31
   1a778:	d1 1c       	adc	r13, r1
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a77a:	57 01       	movw	r10, r14
   1a77c:	2f e4       	ldi	r18, 0x4F	; 79
   1a77e:	a2 0e       	add	r10, r18
   1a780:	b1 1c       	adc	r11, r1
        return(-1);
    
    index = 0;
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
   1a782:	b8 01       	movw	r22, r16
   1a784:	c7 01       	movw	r24, r14
   1a786:	0e 94 86 ca 	call	0x1950c	; 0x1950c <lif_readdirindex>
   1a78a:	89 2b       	or	r24, r25
   1a78c:	91 f0       	breq	.+36     	; 0x1a7b2 <lif_find_file+0xae>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1a78e:	f6 01       	movw	r30, r12
   1a790:	80 81       	ld	r24, Z
   1a792:	91 81       	ldd	r25, Z+1	; 0x01
   1a794:	8f 3f       	cpi	r24, 0xFF	; 255
   1a796:	ff ef       	ldi	r31, 0xFF	; 255
   1a798:	9f 07       	cpc	r25, r31
   1a79a:	59 f0       	breq	.+22     	; 0x1a7b2 <lif_find_file+0xae>
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a79c:	89 2b       	or	r24, r25
   1a79e:	31 f0       	breq	.+12     	; 0x1a7ac <lif_find_file+0xa8>
   1a7a0:	be 01       	movw	r22, r28
   1a7a2:	c5 01       	movw	r24, r10
   1a7a4:	0e 94 9c 32 	call	0x6538	; 0x6538 <strcasecmp>
   1a7a8:	89 2b       	or	r24, r25
   1a7aa:	31 f0       	breq	.+12     	; 0x1a7b8 <lif_find_file+0xb4>
            break;
        ++index;
   1a7ac:	0f 5f       	subi	r16, 0xFF	; 255
   1a7ae:	1f 4f       	sbci	r17, 0xFF	; 255
   1a7b0:	e8 cf       	rjmp	.-48     	; 0x1a782 <lif_find_file+0x7e>

    if( !lif_checkname(liflabel) )
    {
        if(debuglevel & 1)
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
        return(-1);
   1a7b2:	8f ef       	ldi	r24, 0xFF	; 255
   1a7b4:	9f ef       	ldi	r25, 0xFF	; 255
   1a7b6:	01 c0       	rjmp	.+2      	; 0x1a7ba <lif_find_file+0xb6>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a7b8:	c8 01       	movw	r24, r16
            break;
        ++index;
    }
    return(index);
}
   1a7ba:	cd b7       	in	r28, 0x3d	; 61
   1a7bc:	de b7       	in	r29, 0x3e	; 62
   1a7be:	25 96       	adiw	r28, 0x05	; 5
   1a7c0:	ea e0       	ldi	r30, 0x0A	; 10
   1a7c2:	0c 94 ec e3 	jmp	0x1c7d8	; 0x1c7d8 <__epilogue_restores__+0x10>

0001a7c6 <lif_e010_pad_sector>:
/// @param[in] offset: sector offset
/// @param[in] wbuf: E010 PAD data
/// @return size of E010 PAD data
MEMSPACE
int lif_e010_pad_sector(long offset, uint8_t *wbuf)
{
   1a7c6:	a5 e0       	ldi	r26, 0x05	; 5
   1a7c8:	b0 e0       	ldi	r27, 0x00	; 0
   1a7ca:	e9 ee       	ldi	r30, 0xE9	; 233
   1a7cc:	f3 ed       	ldi	r31, 0xD3	; 211
   1a7ce:	0c 94 d2 e3 	jmp	0x1c7a4	; 0x1c7a4 <__prologue_saves__+0x14>
   1a7d2:	6b 01       	movw	r12, r22
   1a7d4:	7c 01       	movw	r14, r24
   1a7d6:	8a 01       	movw	r16, r20
    int ind;
    int pos,rem;
    
    // Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
   1a7d8:	20 e0       	ldi	r18, 0x00	; 0
   1a7da:	31 e0       	ldi	r19, 0x01	; 1
   1a7dc:	40 e0       	ldi	r20, 0x00	; 0
   1a7de:	50 e0       	ldi	r21, 0x00	; 0
   1a7e0:	0e 94 68 e3 	call	0x1c6d0	; 0x1c6d0 <__divmodsi4>
    if(!pos)
   1a7e4:	61 15       	cp	r22, r1
   1a7e6:	71 05       	cpc	r23, r1
   1a7e8:	d1 f1       	breq	.+116    	; 0x1a85e <lif_e010_pad_sector+0x98>
        return(0);

    // Number of bytes free in this sector
    rem = (long)LIF_SECTOR_SIZE - (long)pos;
   1a7ea:	c0 e0       	ldi	r28, 0x00	; 0
   1a7ec:	d1 e0       	ldi	r29, 0x01	; 1
   1a7ee:	c6 1b       	sub	r28, r22
   1a7f0:	d7 0b       	sbc	r29, r23

    // Bytes written to wbuf
    ind = 0;
    // PAD
    wbuf[ind++] = 0xEF;
   1a7f2:	f8 01       	movw	r30, r16
   1a7f4:	8f ee       	ldi	r24, 0xEF	; 239
   1a7f6:	81 93       	st	Z+, r24
    while(ind<rem)
        wbuf[ind++] = 0xff;
   1a7f8:	2f ef       	ldi	r18, 0xFF	; 255

    // Bytes written to wbuf
    ind = 0;
    // PAD
    wbuf[ind++] = 0xEF;
    while(ind<rem)
   1a7fa:	cf 01       	movw	r24, r30
   1a7fc:	80 1b       	sub	r24, r16
   1a7fe:	91 0b       	sbc	r25, r17
   1a800:	8c 17       	cp	r24, r28
   1a802:	9d 07       	cpc	r25, r29
   1a804:	14 f4       	brge	.+4      	; 0x1a80a <lif_e010_pad_sector+0x44>
        wbuf[ind++] = 0xff;
   1a806:	21 93       	st	Z+, r18
   1a808:	f8 cf       	rjmp	.-16     	; 0x1a7fa <lif_e010_pad_sector+0x34>
   1a80a:	1c 16       	cp	r1, r28
   1a80c:	1d 06       	cpc	r1, r29
   1a80e:	14 f0       	brlt	.+4      	; 0x1a814 <lif_e010_pad_sector+0x4e>
   1a810:	c1 e0       	ldi	r28, 0x01	; 1
   1a812:	d0 e0       	ldi	r29, 0x00	; 0

    pos = (offset + (long) ind)  % (long) LIF_SECTOR_SIZE;
   1a814:	ce 01       	movw	r24, r28
   1a816:	0d 2e       	mov	r0, r29
   1a818:	00 0c       	add	r0, r0
   1a81a:	aa 0b       	sbc	r26, r26
   1a81c:	bb 0b       	sbc	r27, r27
   1a81e:	bc 01       	movw	r22, r24
   1a820:	cd 01       	movw	r24, r26
   1a822:	6c 0d       	add	r22, r12
   1a824:	7d 1d       	adc	r23, r13
   1a826:	8e 1d       	adc	r24, r14
   1a828:	9f 1d       	adc	r25, r15
   1a82a:	20 e0       	ldi	r18, 0x00	; 0
   1a82c:	31 e0       	ldi	r19, 0x01	; 1
   1a82e:	40 e0       	ldi	r20, 0x00	; 0
   1a830:	50 e0       	ldi	r21, 0x00	; 0
   1a832:	0e 94 68 e3 	call	0x1c6d0	; 0x1c6d0 <__divmodsi4>
    // NEW SECTOR
    // Debugging make sure we are at sector boundry
    if(pos)
   1a836:	61 15       	cp	r22, r1
   1a838:	71 05       	cpc	r23, r1
   1a83a:	a1 f0       	breq	.+40     	; 0x1a864 <lif_e010_pad_sector+0x9e>
    {
        if(debuglevel & 1)
   1a83c:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   1a840:	20 ff       	sbrs	r18, 0
   1a842:	12 c0       	rjmp	.+36     	; 0x1a868 <lif_e010_pad_sector+0xa2>
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
   1a844:	ed b7       	in	r30, 0x3d	; 61
   1a846:	fe b7       	in	r31, 0x3e	; 62
   1a848:	75 83       	std	Z+5, r23	; 0x05
   1a84a:	64 83       	std	Z+4, r22	; 0x04
   1a84c:	8c ed       	ldi	r24, 0xDC	; 220
   1a84e:	96 e3       	ldi	r25, 0x36	; 54
   1a850:	a0 e0       	ldi	r26, 0x00	; 0
   1a852:	81 83       	std	Z+1, r24	; 0x01
   1a854:	92 83       	std	Z+2, r25	; 0x02
   1a856:	a3 83       	std	Z+3, r26	; 0x03
   1a858:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   1a85c:	05 c0       	rjmp	.+10     	; 0x1a868 <lif_e010_pad_sector+0xa2>
    int pos,rem;
    
    // Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
    if(!pos)
        return(0);
   1a85e:	80 e0       	ldi	r24, 0x00	; 0
   1a860:	90 e0       	ldi	r25, 0x00	; 0
   1a862:	04 c0       	rjmp	.+8      	; 0x1a86c <lif_e010_pad_sector+0xa6>
   1a864:	ce 01       	movw	r24, r28
   1a866:	02 c0       	rjmp	.+4      	; 0x1a86c <lif_e010_pad_sector+0xa6>
    // Debugging make sure we are at sector boundry
    if(pos)
    {
        if(debuglevel & 1)
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
        return(-1);
   1a868:	8f ef       	ldi	r24, 0xFF	; 255
   1a86a:	9f ef       	ldi	r25, 0xFF	; 255
    }
    return(ind);
}
   1a86c:	cd b7       	in	r28, 0x3d	; 61
   1a86e:	de b7       	in	r29, 0x3e	; 62
   1a870:	25 96       	adiw	r28, 0x05	; 5
   1a872:	e8 e0       	ldi	r30, 0x08	; 8
   1a874:	0c 94 ee e3 	jmp	0x1c7dc	; 0x1c7dc <__epilogue_restores__+0x14>

0001a878 <lif_ascii_string_to_e010>:
/// @param[in] offset: E010 data sector offset, only used in formatting wbuf with headers
/// @param[in] wbuf: E010 data result
/// @return size of E010 data
MEMSPACE
int lif_ascii_string_to_e010(char *str, long offset, uint8_t *wbuf)
{
   1a878:	a5 e0       	ldi	r26, 0x05	; 5
   1a87a:	b0 e0       	ldi	r27, 0x00	; 0
   1a87c:	e2 e4       	ldi	r30, 0x42	; 66
   1a87e:	f4 ed       	ldi	r31, 0xD4	; 212
   1a880:	0c 94 c8 e3 	jmp	0x1c790	; 0x1c790 <__prologue_saves__>
   1a884:	ec 01       	movw	r28, r24
   1a886:	4a 01       	movw	r8, r20
   1a888:	5b 01       	movw	r10, r22
   1a88a:	79 01       	movw	r14, r18
    int ind;
    int len;
    int pos,rem;
    
    // String size
    len = strlen(str);
   1a88c:	fc 01       	movw	r30, r24
   1a88e:	01 90       	ld	r0, Z+
   1a890:	00 20       	and	r0, r0
   1a892:	e9 f7       	brne	.-6      	; 0x1a88e <lif_ascii_string_to_e010+0x16>
   1a894:	31 97       	sbiw	r30, 0x01	; 1
   1a896:	6f 01       	movw	r12, r30
   1a898:	c8 1a       	sub	r12, r24
   1a89a:	d9 0a       	sbc	r13, r25
    ind = 0;

    // Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
    // Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1a89c:	41 2c       	mov	r4, r1
   1a89e:	51 2c       	mov	r5, r1
   1a8a0:	32 01       	movw	r6, r4
   1a8a2:	53 94       	inc	r5
   1a8a4:	cb 01       	movw	r24, r22
   1a8a6:	ba 01       	movw	r22, r20
   1a8a8:	a3 01       	movw	r20, r6
   1a8aa:	92 01       	movw	r18, r4
   1a8ac:	0e 94 68 e3 	call	0x1c6d0	; 0x1c6d0 <__divmodsi4>
   1a8b0:	21 2c       	mov	r2, r1
   1a8b2:	33 24       	eor	r3, r3
   1a8b4:	33 94       	inc	r3
   1a8b6:	c1 01       	movw	r24, r2
   1a8b8:	86 1b       	sub	r24, r22
   1a8ba:	97 0b       	sbc	r25, r23

    /// We ALWAYS pad a sector if:
    ///   There is no room for a 0xdf single header 
    ///   - OR - 
    ///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
   1a8bc:	86 30       	cpi	r24, 0x06	; 6
   1a8be:	91 05       	cpc	r25, r1
   1a8c0:	20 f0       	brcs	.+8      	; 0x1a8ca <lif_ascii_string_to_e010+0x52>
    ind = 0;

    // Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
    // Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1a8c2:	1c 01       	movw	r2, r24
    
    // String size
    len = strlen(str);

    // Output buffer index
    ind = 0;
   1a8c4:	00 e0       	ldi	r16, 0x00	; 0
   1a8c6:	10 e0       	ldi	r17, 0x00	; 0
   1a8c8:	17 c0       	rjmp	.+46     	; 0x1a8f8 <lif_ascii_string_to_e010+0x80>
    ///   There is no room for a 0xdf single header 
    ///   - OR - 
    ///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
    {
        ind = lif_e010_pad_sector(offset, wbuf);
   1a8ca:	a7 01       	movw	r20, r14
   1a8cc:	c5 01       	movw	r24, r10
   1a8ce:	b4 01       	movw	r22, r8
   1a8d0:	7a df       	rcall	.-268    	; 0x1a7c6 <lif_e010_pad_sector>
   1a8d2:	8c 01       	movw	r16, r24
        if(ind < 0)
   1a8d4:	97 fd       	sbrc	r25, 7
   1a8d6:	81 c0       	rjmp	.+258    	; 0x1a9da <lif_ascii_string_to_e010+0x162>
            return(ind);

        // Compute the current offset in this sector
        pos = ((offset + ind) % (long) LIF_SECTOR_SIZE);
        // Number of bytes free in this sector
        rem = (long) LIF_SECTOR_SIZE - pos;
   1a8d8:	09 2e       	mov	r0, r25
   1a8da:	00 0c       	add	r0, r0
   1a8dc:	aa 0b       	sbc	r26, r26
   1a8de:	bb 0b       	sbc	r27, r27
   1a8e0:	bc 01       	movw	r22, r24
   1a8e2:	cd 01       	movw	r24, r26
   1a8e4:	68 0d       	add	r22, r8
   1a8e6:	79 1d       	adc	r23, r9
   1a8e8:	8a 1d       	adc	r24, r10
   1a8ea:	9b 1d       	adc	r25, r11
   1a8ec:	a3 01       	movw	r20, r6
   1a8ee:	92 01       	movw	r18, r4
   1a8f0:	0e 94 68 e3 	call	0x1c6d0	; 0x1c6d0 <__divmodsi4>
   1a8f4:	26 1a       	sub	r2, r22
   1a8f6:	37 0a       	sbc	r3, r23
   1a8f8:	f7 01       	movw	r30, r14
   1a8fa:	e0 0f       	add	r30, r16
   1a8fc:	f1 1f       	adc	r31, r17
   1a8fe:	0d 5f       	subi	r16, 0xFD	; 253
   1a900:	1f 4f       	sbci	r17, 0xFF	; 255
    }

    // Note: IMPORTANT we have >= 6 bytes!!!

    // Do not have to split, there is enough room
    if(rem >= (3 + len)) 
   1a902:	c6 01       	movw	r24, r12
   1a904:	02 96       	adiw	r24, 0x02	; 2
   1a906:	82 15       	cp	r24, r2
   1a908:	93 05       	cpc	r25, r3
   1a90a:	84 f4       	brge	.+32     	; 0x1a92c <lif_ascii_string_to_e010+0xb4>
    {

        // Write string in new sector
        // The full string + header will fit
        wbuf[ind++] = 0xDF;
   1a90c:	8f ed       	ldi	r24, 0xDF	; 223
   1a90e:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1a910:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >> 8) & 0xff;
   1a912:	d2 82       	std	Z+2, r13	; 0x02
   1a914:	f7 01       	movw	r30, r14
   1a916:	e0 0f       	add	r30, r16
   1a918:	f1 1f       	adc	r31, r17
   1a91a:	cf 01       	movw	r24, r30
   1a91c:	8e 19       	sub	r24, r14
   1a91e:	9f 09       	sbc	r25, r15
        // Write string
        while(*str)
   1a920:	29 91       	ld	r18, Y+
   1a922:	22 23       	and	r18, r18
   1a924:	09 f4       	brne	.+2      	; 0x1a928 <lif_ascii_string_to_e010+0xb0>
   1a926:	59 c0       	rjmp	.+178    	; 0x1a9da <lif_ascii_string_to_e010+0x162>
            wbuf[ind++] = *str++;
   1a928:	21 93       	st	Z+, r18
   1a92a:	f7 cf       	rjmp	.-18     	; 0x1a91a <lif_ascii_string_to_e010+0xa2>

        // CURRENT SECTOR
        // String spans a sector , so split the string

        // 1st Split string header
        wbuf[ind++] = 0xCF;
   1a92c:	8f ec       	ldi	r24, 0xCF	; 207
   1a92e:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1a930:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >>8) & 0xff;
   1a932:	d2 82       	std	Z+2, r13	; 0x02
   1a934:	d7 01       	movw	r26, r14
   1a936:	a0 0f       	add	r26, r16
   1a938:	b1 1f       	adc	r27, r17
        // Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1a93a:	fe 01       	movw	r30, r28
   1a93c:	81 91       	ld	r24, Z+
   1a93e:	81 11       	cpse	r24, r1
   1a940:	0e c0       	rjmp	.+28     	; 0x1a95e <lif_ascii_string_to_e010+0xe6>
            wbuf[ind++] = *str++;

        // NEW SECTOR
        // Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
   1a942:	c8 01       	movw	r24, r16
   1a944:	01 2e       	mov	r0, r17
   1a946:	00 0c       	add	r0, r0
   1a948:	aa 0b       	sbc	r26, r26
   1a94a:	bb 0b       	sbc	r27, r27
   1a94c:	bc 01       	movw	r22, r24
   1a94e:	cd 01       	movw	r24, r26
   1a950:	68 0d       	add	r22, r8
   1a952:	79 1d       	adc	r23, r9
   1a954:	8a 1d       	adc	r24, r10
   1a956:	9b 1d       	adc	r25, r11
   1a958:	61 11       	cpse	r22, r1
   1a95a:	09 c0       	rjmp	.+18     	; 0x1a96e <lif_ascii_string_to_e010+0xf6>
   1a95c:	1f c0       	rjmp	.+62     	; 0x1a99c <lif_ascii_string_to_e010+0x124>
        // 1st Split string header
        wbuf[ind++] = 0xCF;
        wbuf[ind++] = len & 0xff;
        wbuf[ind++] = (len >>8) & 0xff;
        // Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1a95e:	02 15       	cp	r16, r2
   1a960:	13 05       	cpc	r17, r3
   1a962:	7c f7       	brge	.-34     	; 0x1a942 <lif_ascii_string_to_e010+0xca>
            wbuf[ind++] = *str++;
   1a964:	0f 5f       	subi	r16, 0xFF	; 255
   1a966:	1f 4f       	sbci	r17, 0xFF	; 255
   1a968:	8d 93       	st	X+, r24
   1a96a:	ef 01       	movw	r28, r30
   1a96c:	e6 cf       	rjmp	.-52     	; 0x1a93a <lif_ascii_string_to_e010+0xc2>

        // NEW SECTOR
        // Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & 1)
   1a96e:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   1a972:	20 ff       	sbrs	r18, 0
   1a974:	30 c0       	rjmp	.+96     	; 0x1a9d6 <lif_ascii_string_to_e010+0x15e>
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
   1a976:	20 e0       	ldi	r18, 0x00	; 0
   1a978:	31 e0       	ldi	r19, 0x01	; 1
   1a97a:	40 e0       	ldi	r20, 0x00	; 0
   1a97c:	50 e0       	ldi	r21, 0x00	; 0
   1a97e:	0e 94 68 e3 	call	0x1c6d0	; 0x1c6d0 <__divmodsi4>
   1a982:	ed b7       	in	r30, 0x3d	; 61
   1a984:	fe b7       	in	r31, 0x3e	; 62
   1a986:	75 83       	std	Z+5, r23	; 0x05
   1a988:	64 83       	std	Z+4, r22	; 0x04
   1a98a:	88 eb       	ldi	r24, 0xB8	; 184
   1a98c:	96 e3       	ldi	r25, 0x36	; 54
   1a98e:	a0 e0       	ldi	r26, 0x00	; 0
   1a990:	81 83       	std	Z+1, r24	; 0x01
   1a992:	92 83       	std	Z+2, r25	; 0x02
   1a994:	a3 83       	std	Z+3, r26	; 0x03
   1a996:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   1a99a:	1d c0       	rjmp	.+58     	; 0x1a9d6 <lif_ascii_string_to_e010+0x15e>
            return(-1);
        }

        // Update remining string length
        len = strlen(str);
   1a99c:	fe 01       	movw	r30, r28
   1a99e:	01 90       	ld	r0, Z+
   1a9a0:	00 20       	and	r0, r0
   1a9a2:	e9 f7       	brne	.-6      	; 0x1a99e <lif_ascii_string_to_e010+0x126>
   1a9a4:	31 97       	sbiw	r30, 0x01	; 1
   1a9a6:	9f 01       	movw	r18, r30
   1a9a8:	2c 1b       	sub	r18, r28
   1a9aa:	3d 0b       	sbc	r19, r29
        // 2nd Split string header 
        wbuf[ind++] = 0x6F;
   1a9ac:	d7 01       	movw	r26, r14
   1a9ae:	a0 0f       	add	r26, r16
   1a9b0:	b1 1f       	adc	r27, r17
   1a9b2:	8f e6       	ldi	r24, 0x6F	; 111
   1a9b4:	8c 93       	st	X, r24
        wbuf[ind++] = (len & 0xff);
   1a9b6:	fd 01       	movw	r30, r26
   1a9b8:	21 83       	std	Z+1, r18	; 0x01
        wbuf[ind++] = (len>>8) & 0xff;
   1a9ba:	32 83       	std	Z+2, r19	; 0x02
   1a9bc:	0d 5f       	subi	r16, 0xFD	; 253
   1a9be:	1f 4f       	sbci	r17, 0xFF	; 255
   1a9c0:	f7 01       	movw	r30, r14
   1a9c2:	e0 0f       	add	r30, r16
   1a9c4:	f1 1f       	adc	r31, r17
   1a9c6:	cf 01       	movw	r24, r30
   1a9c8:	8e 19       	sub	r24, r14
   1a9ca:	9f 09       	sbc	r25, r15
        // Write string
        while(*str)
   1a9cc:	29 91       	ld	r18, Y+
   1a9ce:	22 23       	and	r18, r18
   1a9d0:	21 f0       	breq	.+8      	; 0x1a9da <lif_ascii_string_to_e010+0x162>
            wbuf[ind++] = *str++;
   1a9d2:	21 93       	st	Z+, r18
   1a9d4:	f8 cf       	rjmp	.-16     	; 0x1a9c6 <lif_ascii_string_to_e010+0x14e>
        // Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & 1)
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
            return(-1);
   1a9d6:	8f ef       	ldi	r24, 0xFF	; 255
   1a9d8:	9f ef       	ldi	r25, 0xFF	; 255
        while(*str)
            wbuf[ind++] = *str++;
    }

    return(ind);
}
   1a9da:	cd b7       	in	r28, 0x3d	; 61
   1a9dc:	de b7       	in	r29, 0x3e	; 62
   1a9de:	25 96       	adiw	r28, 0x05	; 5
   1a9e0:	e2 e1       	ldi	r30, 0x12	; 18
   1a9e2:	0c 94 e4 e3 	jmp	0x1c7c8	; 0x1c7c8 <__epilogue_restores__>

0001a9e6 <lif_add_ascii_file_as_e010_wrapper>:
/// @param[in] userfile: User ASCII file source
/// @param[in] *LIF: Where to write file if set (not NULL)
/// @return size of formatted result
MEMSPACE
long lif_add_ascii_file_as_e010_wrapper(lif_t *LIF, uint32_t offset, char *username)
{
   1a9e6:	ad e0       	ldi	r26, 0x0D	; 13
   1a9e8:	b3 e0       	ldi	r27, 0x03	; 3
   1a9ea:	e9 ef       	ldi	r30, 0xF9	; 249
   1a9ec:	f4 ed       	ldi	r31, 0xD4	; 212
   1a9ee:	0c 94 c8 e3 	jmp	0x1c790	; 0x1c790 <__prologue_saves__>
   1a9f2:	5c 01       	movw	r10, r24
   1a9f4:	2a 01       	movw	r4, r20
   1a9f6:	3b 01       	movw	r6, r22
   1a9f8:	c9 01       	movw	r24, r18
    // strings are limited to less then this
    char str[LIF_SECTOR_SIZE+1];
    // output buffer must be larger then a single sectors because of either headers or padding
    uint8_t obuf[LIF_SECTOR_SIZE*2];

    fi = lif_open(username, "rb");
   1a9fa:	6c e1       	ldi	r22, 0x1C	; 28
   1a9fc:	78 e0       	ldi	r23, 0x08	; 8
   1a9fe:	0e 94 a8 c0 	call	0x18150	; 0x18150 <lif_open>
   1aa02:	c7 5f       	subi	r28, 0xF7	; 247
   1aa04:	dc 4f       	sbci	r29, 0xFC	; 252
   1aa06:	99 83       	std	Y+1, r25	; 0x01
   1aa08:	88 83       	st	Y, r24
   1aa0a:	c9 50       	subi	r28, 0x09	; 9
   1aa0c:	d3 40       	sbci	r29, 0x03	; 3
    if(fi == NULL)
   1aa0e:	89 2b       	or	r24, r25
   1aa10:	09 f4       	brne	.+2      	; 0x1aa14 <lif_add_ascii_file_as_e010_wrapper+0x2e>
   1aa12:	63 c0       	rjmp	.+198    	; 0x1aada <lif_add_ascii_file_as_e010_wrapper+0xf4>
   1aa14:	81 2c       	mov	r8, r1
   1aa16:	91 2c       	mov	r9, r1
   1aa18:	c1 2c       	mov	r12, r1
   1aa1a:	d1 2c       	mov	r13, r1
   1aa1c:	76 01       	movw	r14, r12

        if(count > 256)
        {       
            count = 0;
            if(LIF)
                printf("\tWrote: %8ld\r", (long)bytes);
   1aa1e:	8a ea       	ldi	r24, 0xAA	; 170
   1aa20:	96 e3       	ldi	r25, 0x36	; 54
   1aa22:	9c 01       	movw	r18, r24
   1aa24:	40 e0       	ldi	r20, 0x00	; 0
   1aa26:	c5 5f       	subi	r28, 0xF5	; 245
   1aa28:	dc 4f       	sbci	r29, 0xFC	; 252
   1aa2a:	28 83       	st	Y, r18
   1aa2c:	39 83       	std	Y+1, r19	; 0x01
   1aa2e:	4a 83       	std	Y+2, r20	; 0x02
   1aa30:	cb 50       	subi	r28, 0x0B	; 11
   1aa32:	d3 40       	sbci	r29, 0x03	; 3
   1aa34:	14 c0       	rjmp	.+40     	; 0x1aa5e <lif_add_ascii_file_as_e010_wrapper+0x78>
                fclose(fi);
                return(-1);
            }
        }

        offset += size;
   1aa36:	c1 01       	movw	r24, r2
   1aa38:	03 2c       	mov	r0, r3
   1aa3a:	00 0c       	add	r0, r0
   1aa3c:	aa 0b       	sbc	r26, r26
   1aa3e:	bb 0b       	sbc	r27, r27
   1aa40:	48 0e       	add	r4, r24
   1aa42:	59 1e       	adc	r5, r25
   1aa44:	6a 1e       	adc	r6, r26
   1aa46:	7b 1e       	adc	r7, r27
        bytes += size;
   1aa48:	c8 0e       	add	r12, r24
   1aa4a:	d9 1e       	adc	r13, r25
   1aa4c:	ea 1e       	adc	r14, r26
   1aa4e:	fb 1e       	adc	r15, r27
        count += size;
   1aa50:	82 0c       	add	r8, r2
   1aa52:	93 1c       	adc	r9, r3

        if(count > 256)
   1aa54:	31 e0       	ldi	r19, 0x01	; 1
   1aa56:	83 16       	cp	r8, r19
   1aa58:	93 06       	cpc	r9, r19
   1aa5a:	0c f0       	brlt	.+2      	; 0x1aa5e <lif_add_ascii_file_as_e010_wrapper+0x78>
   1aa5c:	43 c0       	rjmp	.+134    	; 0x1aae4 <lif_add_ascii_file_as_e010_wrapper+0xfe>
    bytes = 0;
    count = 0;

    // Read user file and write LIF records
    // reserve 3 + LIF header bytes + 1 (EOS)
    while( fgets((char *)str,(int)sizeof(str) - 4, fi) != NULL )
   1aa5e:	c7 5f       	subi	r28, 0xF7	; 247
   1aa60:	dc 4f       	sbci	r29, 0xFC	; 252
   1aa62:	48 81       	ld	r20, Y
   1aa64:	59 81       	ldd	r21, Y+1	; 0x01
   1aa66:	c9 50       	subi	r28, 0x09	; 9
   1aa68:	d3 40       	sbci	r29, 0x03	; 3
   1aa6a:	6d ef       	ldi	r22, 0xFD	; 253
   1aa6c:	70 e0       	ldi	r23, 0x00	; 0
   1aa6e:	ce 01       	movw	r24, r28
   1aa70:	88 5f       	subi	r24, 0xF8	; 248
   1aa72:	9d 4f       	sbci	r25, 0xFD	; 253
   1aa74:	0e 94 1e 77 	call	0xee3c	; 0xee3c <fgets>
   1aa78:	89 2b       	or	r24, r25
   1aa7a:	09 f4       	brne	.+2      	; 0x1aa7e <lif_add_ascii_file_as_e010_wrapper+0x98>
   1aa7c:	4b c0       	rjmp	.+150    	; 0x1ab14 <lif_add_ascii_file_as_e010_wrapper+0x12e>
    {
        trim_tail((char *)str);
   1aa7e:	ce 01       	movw	r24, r28
   1aa80:	88 5f       	subi	r24, 0xF8	; 248
   1aa82:	9d 4f       	sbci	r25, 0xFD	; 253
   1aa84:	0e 94 13 33 	call	0x6626	; 0x6626 <trim_tail>

        strcat((char *)str,"\r"); // HP85 lines end with "\r"
   1aa88:	6d e9       	ldi	r22, 0x9D	; 157
   1aa8a:	75 e1       	ldi	r23, 0x15	; 21
   1aa8c:	ce 01       	movw	r24, r28
   1aa8e:	88 5f       	subi	r24, 0xF8	; 248
   1aa90:	9d 4f       	sbci	r25, 0xFD	; 253
   1aa92:	0e 94 56 32 	call	0x64ac	; 0x64ac <strcat>

        size = lif_ascii_string_to_e010(str, offset, obuf);
   1aa96:	9e 01       	movw	r18, r28
   1aa98:	28 5f       	subi	r18, 0xF8	; 248
   1aa9a:	3f 4f       	sbci	r19, 0xFF	; 255
   1aa9c:	b3 01       	movw	r22, r6
   1aa9e:	a2 01       	movw	r20, r4
   1aaa0:	ce 01       	movw	r24, r28
   1aaa2:	88 5f       	subi	r24, 0xF8	; 248
   1aaa4:	9d 4f       	sbci	r25, 0xFD	; 253
   1aaa6:	e8 de       	rcall	.-560    	; 0x1a878 <lif_ascii_string_to_e010>
   1aaa8:	1c 01       	movw	r2, r24
        // Write string
        // Now Write string
        if(LIF)
   1aaaa:	a1 14       	cp	r10, r1
   1aaac:	b1 04       	cpc	r11, r1
   1aaae:	19 f2       	breq	.-122    	; 0x1aa36 <lif_add_ascii_file_as_e010_wrapper+0x50>
        {
            len = lif_write(LIF, obuf, offset, size);
   1aab0:	8c 01       	movw	r16, r24
   1aab2:	a3 01       	movw	r20, r6
   1aab4:	92 01       	movw	r18, r4
   1aab6:	be 01       	movw	r22, r28
   1aab8:	68 5f       	subi	r22, 0xF8	; 248
   1aaba:	7f 4f       	sbci	r23, 0xFF	; 255
   1aabc:	c5 01       	movw	r24, r10
   1aabe:	0e 94 7d c1 	call	0x182fa	; 0x182fa <lif_write>
            if(len < size)
   1aac2:	82 15       	cp	r24, r2
   1aac4:	93 05       	cpc	r25, r3
   1aac6:	0c f0       	brlt	.+2      	; 0x1aaca <lif_add_ascii_file_as_e010_wrapper+0xe4>
   1aac8:	b6 cf       	rjmp	.-148    	; 0x1aa36 <lif_add_ascii_file_as_e010_wrapper+0x50>
            {
                fclose(fi);
   1aaca:	c7 5f       	subi	r28, 0xF7	; 247
   1aacc:	dc 4f       	sbci	r29, 0xFC	; 252
   1aace:	88 81       	ld	r24, Y
   1aad0:	99 81       	ldd	r25, Y+1	; 0x01
   1aad2:	c9 50       	subi	r28, 0x09	; 9
   1aad4:	d3 40       	sbci	r29, 0x03	; 3
   1aad6:	0e 94 a2 7d 	call	0xfb44	; 0xfb44 <fclose>
                return(-1);
   1aada:	6f ef       	ldi	r22, 0xFF	; 255
   1aadc:	7f ef       	ldi	r23, 0xFF	; 255
   1aade:	8f ef       	ldi	r24, 0xFF	; 255
   1aae0:	9f ef       	ldi	r25, 0xFF	; 255
   1aae2:	84 c0       	rjmp	.+264    	; 0x1abec <lif_add_ascii_file_as_e010_wrapper+0x206>
        count += size;

        if(count > 256)
        {       
            count = 0;
            if(LIF)
   1aae4:	a1 14       	cp	r10, r1
   1aae6:	b1 04       	cpc	r11, r1
   1aae8:	91 f0       	breq	.+36     	; 0x1ab0e <lif_add_ascii_file_as_e010_wrapper+0x128>
                printf("\tWrote: %8ld\r", (long)bytes);
   1aaea:	ed b7       	in	r30, 0x3d	; 61
   1aaec:	fe b7       	in	r31, 0x3e	; 62
   1aaee:	c4 82       	std	Z+4, r12	; 0x04
   1aaf0:	d5 82       	std	Z+5, r13	; 0x05
   1aaf2:	e6 82       	std	Z+6, r14	; 0x06
   1aaf4:	f7 82       	std	Z+7, r15	; 0x07
   1aaf6:	c5 5f       	subi	r28, 0xF5	; 245
   1aaf8:	dc 4f       	sbci	r29, 0xFC	; 252
   1aafa:	28 81       	ld	r18, Y
   1aafc:	39 81       	ldd	r19, Y+1	; 0x01
   1aafe:	4a 81       	ldd	r20, Y+2	; 0x02
   1ab00:	cb 50       	subi	r28, 0x0B	; 11
   1ab02:	d3 40       	sbci	r29, 0x03	; 3
   1ab04:	21 83       	std	Z+1, r18	; 0x01
   1ab06:	32 83       	std	Z+2, r19	; 0x02
   1ab08:	43 83       	std	Z+3, r20	; 0x03
   1ab0a:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
        bytes += size;
        count += size;

        if(count > 256)
        {       
            count = 0;
   1ab0e:	81 2c       	mov	r8, r1
   1ab10:	91 2c       	mov	r9, r1
   1ab12:	a5 cf       	rjmp	.-182    	; 0x1aa5e <lif_add_ascii_file_as_e010_wrapper+0x78>
            if(LIF)
                printf("\tWrote: %8ld\r", (long)bytes);
        }
    }

    fclose(fi);
   1ab14:	c7 5f       	subi	r28, 0xF7	; 247
   1ab16:	dc 4f       	sbci	r29, 0xFC	; 252
   1ab18:	88 81       	ld	r24, Y
   1ab1a:	99 81       	ldd	r25, Y+1	; 0x01
   1ab1c:	c9 50       	subi	r28, 0x09	; 9
   1ab1e:	d3 40       	sbci	r29, 0x03	; 3
   1ab20:	0e 94 a2 7d 	call	0xfb44	; 0xfb44 <fclose>

    // Write EOF
    str[0] = 0;
   1ab24:	c8 5f       	subi	r28, 0xF8	; 248
   1ab26:	dd 4f       	sbci	r29, 0xFD	; 253
   1ab28:	18 82       	st	Y, r1
   1ab2a:	c8 50       	subi	r28, 0x08	; 8
   1ab2c:	d2 40       	sbci	r29, 0x02	; 2
    // We only want to return the count of bytes in the file NOT the padding at the end
    // Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);
   1ab2e:	9e 01       	movw	r18, r28
   1ab30:	28 5f       	subi	r18, 0xF8	; 248
   1ab32:	3f 4f       	sbci	r19, 0xFF	; 255
   1ab34:	b3 01       	movw	r22, r6
   1ab36:	a2 01       	movw	r20, r4
   1ab38:	ce 01       	movw	r24, r28
   1ab3a:	88 5f       	subi	r24, 0xF8	; 248
   1ab3c:	9d 4f       	sbci	r25, 0xFD	; 253
   1ab3e:	9c de       	rcall	.-712    	; 0x1a878 <lif_ascii_string_to_e010>
   1ab40:	4c 01       	movw	r8, r24

    if(LIF)
   1ab42:	a1 14       	cp	r10, r1
   1ab44:	b1 04       	cpc	r11, r1
   1ab46:	d1 f4       	brne	.+52     	; 0x1ab7c <lif_add_ascii_file_as_e010_wrapper+0x196>
            return(-1);

    }

    offset += size;
    bytes += size;
   1ab48:	c4 01       	movw	r24, r8
   1ab4a:	09 2c       	mov	r0, r9
   1ab4c:	00 0c       	add	r0, r0
   1ab4e:	aa 0b       	sbc	r26, r26
   1ab50:	bb 0b       	sbc	r27, r27
   1ab52:	c8 0e       	add	r12, r24
   1ab54:	d9 1e       	adc	r13, r25
   1ab56:	ea 1e       	adc	r14, r26
   1ab58:	fb 1e       	adc	r15, r27

    // PAD
    size = lif_e010_pad_sector(offset, obuf);
   1ab5a:	12 01       	movw	r2, r4
   1ab5c:	23 01       	movw	r4, r6
   1ab5e:	28 0e       	add	r2, r24
   1ab60:	39 1e       	adc	r3, r25
   1ab62:	4a 1e       	adc	r4, r26
   1ab64:	5b 1e       	adc	r5, r27
   1ab66:	ae 01       	movw	r20, r28
   1ab68:	48 5f       	subi	r20, 0xF8	; 248
   1ab6a:	5f 4f       	sbci	r21, 0xFF	; 255
   1ab6c:	c2 01       	movw	r24, r4
   1ab6e:	b1 01       	movw	r22, r2
   1ab70:	2a de       	rcall	.-940    	; 0x1a7c6 <lif_e010_pad_sector>
   1ab72:	3c 01       	movw	r6, r24
    if(LIF)
   1ab74:	a1 14       	cp	r10, r1
   1ab76:	b1 04       	cpc	r11, r1
   1ab78:	e1 f4       	brne	.+56     	; 0x1abb2 <lif_add_ascii_file_as_e010_wrapper+0x1cc>
   1ab7a:	36 c0       	rjmp	.+108    	; 0x1abe8 <lif_add_ascii_file_as_e010_wrapper+0x202>
    // Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);

    if(LIF)
    {
        printf("\tWrote: %8ld\r", (long)bytes);
   1ab7c:	ed b7       	in	r30, 0x3d	; 61
   1ab7e:	fe b7       	in	r31, 0x3e	; 62
   1ab80:	c4 82       	std	Z+4, r12	; 0x04
   1ab82:	d5 82       	std	Z+5, r13	; 0x05
   1ab84:	e6 82       	std	Z+6, r14	; 0x06
   1ab86:	f7 82       	std	Z+7, r15	; 0x07
   1ab88:	8c e9       	ldi	r24, 0x9C	; 156
   1ab8a:	96 e3       	ldi	r25, 0x36	; 54
   1ab8c:	a0 e0       	ldi	r26, 0x00	; 0
   1ab8e:	81 83       	std	Z+1, r24	; 0x01
   1ab90:	92 83       	std	Z+2, r25	; 0x02
   1ab92:	a3 83       	std	Z+3, r26	; 0x03
   1ab94:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
        len = lif_write(LIF, obuf, offset, size);
   1ab98:	84 01       	movw	r16, r8
   1ab9a:	a3 01       	movw	r20, r6
   1ab9c:	92 01       	movw	r18, r4
   1ab9e:	be 01       	movw	r22, r28
   1aba0:	68 5f       	subi	r22, 0xF8	; 248
   1aba2:	7f 4f       	sbci	r23, 0xFF	; 255
   1aba4:	c5 01       	movw	r24, r10
   1aba6:	0e 94 7d c1 	call	0x182fa	; 0x182fa <lif_write>
        if(len < size)
   1abaa:	88 15       	cp	r24, r8
   1abac:	99 05       	cpc	r25, r9
   1abae:	64 f6       	brge	.-104    	; 0x1ab48 <lif_add_ascii_file_as_e010_wrapper+0x162>
   1abb0:	94 cf       	rjmp	.-216    	; 0x1aada <lif_add_ascii_file_as_e010_wrapper+0xf4>

    // PAD
    size = lif_e010_pad_sector(offset, obuf);
    if(LIF)
    {
        len = lif_write(LIF, obuf, offset, size);
   1abb2:	8c 01       	movw	r16, r24
   1abb4:	a2 01       	movw	r20, r4
   1abb6:	91 01       	movw	r18, r2
   1abb8:	be 01       	movw	r22, r28
   1abba:	68 5f       	subi	r22, 0xF8	; 248
   1abbc:	7f 4f       	sbci	r23, 0xFF	; 255
   1abbe:	c5 01       	movw	r24, r10
   1abc0:	0e 94 7d c1 	call	0x182fa	; 0x182fa <lif_write>
        if(len < size)
   1abc4:	86 15       	cp	r24, r6
   1abc6:	97 05       	cpc	r25, r7
   1abc8:	0c f4       	brge	.+2      	; 0x1abcc <lif_add_ascii_file_as_e010_wrapper+0x1e6>
   1abca:	87 cf       	rjmp	.-242    	; 0x1aada <lif_add_ascii_file_as_e010_wrapper+0xf4>
            return(-1);
    }

    if(LIF)
        printf("\tWrote: %8ld\r",(long)bytes);
   1abcc:	ed b7       	in	r30, 0x3d	; 61
   1abce:	fe b7       	in	r31, 0x3e	; 62
   1abd0:	c4 82       	std	Z+4, r12	; 0x04
   1abd2:	d5 82       	std	Z+5, r13	; 0x05
   1abd4:	e6 82       	std	Z+6, r14	; 0x06
   1abd6:	f7 82       	std	Z+7, r15	; 0x07
   1abd8:	8e e8       	ldi	r24, 0x8E	; 142
   1abda:	96 e3       	ldi	r25, 0x36	; 54
   1abdc:	a0 e0       	ldi	r26, 0x00	; 0
   1abde:	81 83       	std	Z+1, r24	; 0x01
   1abe0:	92 83       	std	Z+2, r25	; 0x02
   1abe2:	a3 83       	std	Z+3, r26	; 0x03
   1abe4:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>

    return(bytes);
   1abe8:	b6 01       	movw	r22, r12
   1abea:	c7 01       	movw	r24, r14
}
   1abec:	c3 5f       	subi	r28, 0xF3	; 243
   1abee:	dc 4f       	sbci	r29, 0xFC	; 252
   1abf0:	e2 e1       	ldi	r30, 0x12	; 18
   1abf2:	0c 94 e4 e3 	jmp	0x1c7c8	; 0x1c7c8 <__epilogue_restores__>

0001abf6 <lif_add_ascii_file_as_e010>:
/// @param[in] lifname: LIF file name
/// @param[in] userfile: userfile name
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_ascii_file_as_e010(char *lifimagename, char *lifname, char *userfile)
{
   1abf6:	ab e3       	ldi	r26, 0x3B	; 59
   1abf8:	b0 e0       	ldi	r27, 0x00	; 0
   1abfa:	e1 e0       	ldi	r30, 0x01	; 1
   1abfc:	f6 ed       	ldi	r31, 0xD6	; 214
   1abfe:	0c 94 c8 e3 	jmp	0x1c790	; 0x1c790 <__prologue_saves__>
   1ac02:	6c 01       	movw	r12, r24
   1ac04:	1b 01       	movw	r2, r22
   1ac06:	7a 01       	movw	r14, r20
    int index;
    lif_t *LIF;
    stat_t st, *sp;


    if(!*lifimagename)
   1ac08:	fc 01       	movw	r30, r24
   1ac0a:	80 81       	ld	r24, Z
   1ac0c:	81 11       	cpse	r24, r1
   1ac0e:	03 c0       	rjmp	.+6      	; 0x1ac16 <lif_add_ascii_file_as_e010+0x20>
    {
        printf("lif_add_ascii_file_as_e010: lifimagename is empty\n");
   1ac10:	8b e5       	ldi	r24, 0x5B	; 91
   1ac12:	96 e3       	ldi	r25, 0x36	; 54
   1ac14:	1a c0       	rjmp	.+52     	; 0x1ac4a <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*lifname)
   1ac16:	fb 01       	movw	r30, r22
   1ac18:	80 81       	ld	r24, Z
   1ac1a:	81 11       	cpse	r24, r1
   1ac1c:	03 c0       	rjmp	.+6      	; 0x1ac24 <lif_add_ascii_file_as_e010+0x2e>
    {
        printf("lif_add_ascii_file_as_e010: lifname is empty\n");
   1ac1e:	8d e2       	ldi	r24, 0x2D	; 45
   1ac20:	96 e3       	ldi	r25, 0x36	; 54
   1ac22:	13 c0       	rjmp	.+38     	; 0x1ac4a <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*userfile)
   1ac24:	fa 01       	movw	r30, r20
   1ac26:	80 81       	ld	r24, Z
   1ac28:	81 11       	cpse	r24, r1
   1ac2a:	03 c0       	rjmp	.+6      	; 0x1ac32 <lif_add_ascii_file_as_e010+0x3c>
    {
        printf("lif_add_ascii_file_as_e010: userfile is empty\n");
   1ac2c:	8e ef       	ldi	r24, 0xFE	; 254
   1ac2e:	95 e3       	ldi	r25, 0x35	; 53
   1ac30:	0c c0       	rjmp	.+24     	; 0x1ac4a <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }

    //Get size and date info
    sp = lif_stat(userfile, (stat_t *)&st);
   1ac32:	be 01       	movw	r22, r28
   1ac34:	66 5f       	subi	r22, 0xF6	; 246
   1ac36:	7f 4f       	sbci	r23, 0xFF	; 255
   1ac38:	ca 01       	movw	r24, r20
   1ac3a:	0e 94 d2 c0 	call	0x181a4	; 0x181a4 <lif_stat>
   1ac3e:	9b af       	std	Y+59, r25	; 0x3b
   1ac40:	8a af       	std	Y+58, r24	; 0x3a
    if(!sp)
   1ac42:	89 2b       	or	r24, r25
   1ac44:	59 f4       	brne	.+22     	; 0x1ac5c <lif_add_ascii_file_as_e010+0x66>
    {
        printf("lif_add_ascii_file_as_e010: userfile not found\n");
   1ac46:	8e ec       	ldi	r24, 0xCE	; 206
   1ac48:	95 e3       	ldi	r25, 0x35	; 53
   1ac4a:	a0 e0       	ldi	r26, 0x00	; 0
   1ac4c:	ed b7       	in	r30, 0x3d	; 61
   1ac4e:	fe b7       	in	r31, 0x3e	; 62
   1ac50:	81 83       	std	Z+1, r24	; 0x01
   1ac52:	92 83       	std	Z+2, r25	; 0x02
   1ac54:	a3 83       	std	Z+3, r26	; 0x03
   1ac56:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   1ac5a:	01 c1       	rjmp	.+514    	; 0x1ae5e <lif_add_ascii_file_as_e010+0x268>
        return(-1);
    }

    if(debuglevel & 0x400)
   1ac5c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1ac60:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1ac64:	92 ff       	sbrs	r25, 2
   1ac66:	10 c0       	rjmp	.+32     	; 0x1ac88 <lif_add_ascii_file_as_e010+0x92>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n", 
   1ac68:	ed b7       	in	r30, 0x3d	; 61
   1ac6a:	fe b7       	in	r31, 0x3e	; 62
   1ac6c:	f1 86       	std	Z+9, r15	; 0x09
   1ac6e:	e0 86       	std	Z+8, r14	; 0x08
   1ac70:	37 82       	std	Z+7, r3	; 0x07
   1ac72:	26 82       	std	Z+6, r2	; 0x06
   1ac74:	d5 82       	std	Z+5, r13	; 0x05
   1ac76:	c4 82       	std	Z+4, r12	; 0x04
   1ac78:	8f e9       	ldi	r24, 0x9F	; 159
   1ac7a:	95 e3       	ldi	r25, 0x35	; 53
   1ac7c:	a0 e0       	ldi	r26, 0x00	; 0
   1ac7e:	81 83       	std	Z+1, r24	; 0x01
   1ac80:	92 83       	std	Z+2, r25	; 0x02
   1ac82:	a3 83       	std	Z+3, r26	; 0x03
   1ac84:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
            lifimagename, lifname, userfile);

    // Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
   1ac88:	97 01       	movw	r18, r14
   1ac8a:	40 e0       	ldi	r20, 0x00	; 0
   1ac8c:	50 e0       	ldi	r21, 0x00	; 0
   1ac8e:	ba 01       	movw	r22, r20
   1ac90:	80 e0       	ldi	r24, 0x00	; 0
   1ac92:	90 e0       	ldi	r25, 0x00	; 0
   1ac94:	a8 de       	rcall	.-688    	; 0x1a9e6 <lif_add_ascii_file_as_e010_wrapper>
   1ac96:	4b 01       	movw	r8, r22
   1ac98:	5c 01       	movw	r10, r24
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1ac9a:	47 2e       	mov	r4, r23
   1ac9c:	58 2e       	mov	r5, r24
   1ac9e:	69 2e       	mov	r6, r25
   1aca0:	77 24       	eor	r7, r7
    if(bytes % (long)LIF_SECTOR_SIZE)
   1aca2:	66 23       	and	r22, r22
   1aca4:	29 f0       	breq	.+10     	; 0x1acb0 <lif_add_ascii_file_as_e010+0xba>
        ++sectors;
   1aca6:	ff ef       	ldi	r31, 0xFF	; 255
   1aca8:	4f 1a       	sub	r4, r31
   1acaa:	5f 0a       	sbc	r5, r31
   1acac:	6f 0a       	sbc	r6, r31
   1acae:	7f 0a       	sbc	r7, r31

    // Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
   1acb0:	6f e1       	ldi	r22, 0x1F	; 31
   1acb2:	78 e0       	ldi	r23, 0x08	; 8
   1acb4:	c6 01       	movw	r24, r12
   1acb6:	57 da       	rcall	.-2898   	; 0x1a166 <lif_open_volume>
   1acb8:	8c 01       	movw	r16, r24
    if(LIF == NULL)
   1acba:	00 97       	sbiw	r24, 0x00	; 0
   1acbc:	09 f4       	brne	.+2      	; 0x1acc0 <lif_add_ascii_file_as_e010+0xca>
        return(-1); 

    // Now find free record
    index = lif_newdir(LIF, sectors);
   1acbe:	cf c0       	rjmp	.+414    	; 0x1ae5e <lif_add_ascii_file_as_e010+0x268>
   1acc0:	b3 01       	movw	r22, r6
   1acc2:	a2 01       	movw	r20, r4
   1acc4:	f0 d8       	rcall	.-3616   	; 0x19ea6 <lif_newdir>
    if(index == -1)
   1acc6:	3c 01       	movw	r6, r24
   1acc8:	8f ef       	ldi	r24, 0xFF	; 255
   1acca:	68 16       	cp	r6, r24
   1accc:	78 06       	cpc	r7, r24
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n", 
   1acce:	79 f4       	brne	.+30     	; 0x1acee <lif_add_ascii_file_as_e010+0xf8>
   1acd0:	ed b7       	in	r30, 0x3d	; 61
   1acd2:	fe b7       	in	r31, 0x3e	; 62
   1acd4:	f7 82       	std	Z+7, r15	; 0x07
   1acd6:	e6 82       	std	Z+6, r14	; 0x06
   1acd8:	d5 82       	std	Z+5, r13	; 0x05
   1acda:	c4 82       	std	Z+4, r12	; 0x04
   1acdc:	8f e6       	ldi	r24, 0x6F	; 111
   1acde:	95 e3       	ldi	r25, 0x35	; 53
   1ace0:	a0 e0       	ldi	r26, 0x00	; 0
   1ace2:	81 83       	std	Z+1, r24	; 0x01
   1ace4:	92 83       	std	Z+2, r25	; 0x02
   1ace6:	a3 83       	std	Z+3, r26	; 0x03
   1ace8:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
            lif_closedir(LIF);
            return(-1);
    }

    // Initialize the free directory entry
    lif_fixname(LIF->DIR.filename, lifname,10);
   1acec:	a0 c0       	rjmp	.+320    	; 0x1ae2e <lif_add_ascii_file_as_e010+0x238>
   1acee:	68 01       	movw	r12, r16
   1acf0:	ff e4       	ldi	r31, 0x4F	; 79
   1acf2:	cf 0e       	add	r12, r31
   1acf4:	d1 1c       	adc	r13, r1
   1acf6:	4a e0       	ldi	r20, 0x0A	; 10
   1acf8:	50 e0       	ldi	r21, 0x00	; 0
   1acfa:	b1 01       	movw	r22, r2
   1acfc:	c6 01       	movw	r24, r12
   1acfe:	0e 94 7d c2 	call	0x184fa	; 0x184fa <lif_fixname>
    LIF->DIR.FileType = 0xe010;             // 10
   1ad02:	80 e1       	ldi	r24, 0x10	; 16
   1ad04:	90 ee       	ldi	r25, 0xE0	; 224
   1ad06:	f8 01       	movw	r30, r16
   1ad08:	e6 5a       	subi	r30, 0xA6	; 166
   1ad0a:	ff 4f       	sbci	r31, 0xFF	; 255
   1ad0c:	91 83       	std	Z+1, r25	; 0x01
    lif_time2lifbcd(sp->st_mtime, LIF->DIR.date);
   1ad0e:	80 83       	st	Z, r24
   1ad10:	ea ad       	ldd	r30, Y+58	; 0x3a
   1ad12:	fb ad       	ldd	r31, Y+59	; 0x3b
   1ad14:	60 a5       	ldd	r22, Z+40	; 0x28
   1ad16:	71 a5       	ldd	r23, Z+41	; 0x29
   1ad18:	82 a5       	ldd	r24, Z+42	; 0x2a
   1ad1a:	93 a5       	ldd	r25, Z+43	; 0x2b
   1ad1c:	a8 01       	movw	r20, r16
   1ad1e:	4c 59       	subi	r20, 0x9C	; 156
   1ad20:	5f 4f       	sbci	r21, 0xFF	; 255
   1ad22:	0e 94 c2 c4 	call	0x18984	; 0x18984 <lif_time2lifbcd>

    LIF->DIR.VolNumber = 0x8001;            // 26
   1ad26:	81 e0       	ldi	r24, 0x01	; 1
   1ad28:	90 e8       	ldi	r25, 0x80	; 128
   1ad2a:	f8 01       	movw	r30, r16
   1ad2c:	e6 59       	subi	r30, 0x96	; 150
   1ad2e:	ff 4f       	sbci	r31, 0xFF	; 255
   1ad30:	91 83       	std	Z+1, r25	; 0x01
    LIF->DIR.FileBytes = bytes;                 // 28
   1ad32:	80 83       	st	Z, r24
   1ad34:	32 96       	adiw	r30, 0x02	; 2
   1ad36:	91 82       	std	Z+1, r9	; 0x01
    LIF->DIR.SectorSize  = 0x100;           // 30
   1ad38:	80 82       	st	Z, r8
   1ad3a:	80 e0       	ldi	r24, 0x00	; 0
   1ad3c:	91 e0       	ldi	r25, 0x01	; 1
   1ad3e:	32 96       	adiw	r30, 0x02	; 2
   1ad40:	91 83       	std	Z+1, r25	; 0x01
    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1ad42:	80 83       	st	Z, r24
   1ad44:	58 01       	movw	r10, r16
   1ad46:	fc e5       	ldi	r31, 0x5C	; 92
   1ad48:	af 0e       	add	r10, r31
   1ad4a:	b1 1c       	adc	r11, r1
   1ad4c:	f5 01       	movw	r30, r10
   1ad4e:	80 81       	ld	r24, Z
   1ad50:	91 81       	ldd	r25, Z+1	; 0x01
   1ad52:	a2 81       	ldd	r26, Z+2	; 0x02
   1ad54:	b3 81       	ldd	r27, Z+3	; 0x03
   1ad56:	22 24       	eor	r2, r2
   1ad58:	38 2e       	mov	r3, r24
   1ad5a:	49 2e       	mov	r4, r25

    if(debuglevel & 0x400)
   1ad5c:	5a 2e       	mov	r5, r26
   1ad5e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1ad62:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1ad66:	92 ff       	sbrs	r25, 2
        lif_dump_vol(LIF,"lif_after lif_newdir");
   1ad68:	05 c0       	rjmp	.+10     	; 0x1ad74 <lif_add_ascii_file_as_e010+0x17e>
   1ad6a:	6f e9       	ldi	r22, 0x9F	; 159
   1ad6c:	75 e1       	ldi	r23, 0x15	; 21
   1ad6e:	c8 01       	movw	r24, r16
   1ad70:	0e 94 ae c5 	call	0x18b5c	; 0x18b5c <lif_dump_vol>

    // Write converted file into free space first
    bytes = lif_add_ascii_file_as_e010_wrapper(LIF,offset,userfile);
   1ad74:	97 01       	movw	r18, r14
   1ad76:	b2 01       	movw	r22, r4
   1ad78:	a1 01       	movw	r20, r2
   1ad7a:	c8 01       	movw	r24, r16
   1ad7c:	34 de       	rcall	.-920    	; 0x1a9e6 <lif_add_ascii_file_as_e010_wrapper>
   1ad7e:	4b 01       	movw	r8, r22

    if(debuglevel & 0x400)
   1ad80:	7c 01       	movw	r14, r24
   1ad82:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1ad86:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1ad8a:	92 ff       	sbrs	r25, 2
    {
        printf("New Directory Information AFTER write\n");
   1ad8c:	4a c0       	rjmp	.+148    	; 0x1ae22 <lif_add_ascii_file_as_e010+0x22c>
   1ad8e:	88 e4       	ldi	r24, 0x48	; 72
   1ad90:	95 e3       	ldi	r25, 0x35	; 53
   1ad92:	a0 e0       	ldi	r26, 0x00	; 0
   1ad94:	ed b7       	in	r30, 0x3d	; 61
   1ad96:	fe b7       	in	r31, 0x3e	; 62
   1ad98:	81 83       	std	Z+1, r24	; 0x01
   1ad9a:	92 83       	std	Z+2, r25	; 0x02
   1ad9c:	a3 83       	std	Z+3, r26	; 0x03
   1ad9e:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
        printf("Name:              %s\n", LIF->DIR.filename);
   1ada2:	ed b7       	in	r30, 0x3d	; 61
   1ada4:	fe b7       	in	r31, 0x3e	; 62
   1ada6:	d5 82       	std	Z+5, r13	; 0x05
   1ada8:	c4 82       	std	Z+4, r12	; 0x04
   1adaa:	81 e3       	ldi	r24, 0x31	; 49
   1adac:	95 e3       	ldi	r25, 0x35	; 53
   1adae:	a0 e0       	ldi	r26, 0x00	; 0
   1adb0:	81 83       	std	Z+1, r24	; 0x01
   1adb2:	92 83       	std	Z+2, r25	; 0x02
   1adb4:	a3 83       	std	Z+3, r26	; 0x03
   1adb6:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
        printf("Index:            %4d\n", (int)index);
   1adba:	ed b7       	in	r30, 0x3d	; 61
   1adbc:	fe b7       	in	r31, 0x3e	; 62
   1adbe:	75 82       	std	Z+5, r7	; 0x05
   1adc0:	64 82       	std	Z+4, r6	; 0x04
   1adc2:	8a e1       	ldi	r24, 0x1A	; 26
   1adc4:	95 e3       	ldi	r25, 0x35	; 53
   1adc6:	a0 e0       	ldi	r26, 0x00	; 0
   1adc8:	81 83       	std	Z+1, r24	; 0x01
   1adca:	92 83       	std	Z+2, r25	; 0x02
   1adcc:	a3 83       	std	Z+3, r26	; 0x03
   1adce:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
        printf("First Sector:     %4lxH\n", (long) LIF->DIR.FileStartSector);
   1add2:	f5 01       	movw	r30, r10
   1add4:	80 81       	ld	r24, Z
   1add6:	91 81       	ldd	r25, Z+1	; 0x01
   1add8:	a2 81       	ldd	r26, Z+2	; 0x02
   1adda:	b3 81       	ldd	r27, Z+3	; 0x03
   1addc:	ed b7       	in	r30, 0x3d	; 61
   1adde:	fe b7       	in	r31, 0x3e	; 62
   1ade0:	84 83       	std	Z+4, r24	; 0x04
   1ade2:	95 83       	std	Z+5, r25	; 0x05
   1ade4:	a6 83       	std	Z+6, r26	; 0x06
   1ade6:	b7 83       	std	Z+7, r27	; 0x07
   1ade8:	81 e0       	ldi	r24, 0x01	; 1
   1adea:	95 e3       	ldi	r25, 0x35	; 53
   1adec:	a0 e0       	ldi	r26, 0x00	; 0
   1adee:	81 83       	std	Z+1, r24	; 0x01
   1adf0:	92 83       	std	Z+2, r25	; 0x02
   1adf2:	a3 83       	std	Z+3, r26	; 0x03
   1adf4:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
        printf("File Sectors:     %4lxH\n", (long)LIF->DIR.FileSectors);
   1adf8:	f8 01       	movw	r30, r16
   1adfa:	e0 5a       	subi	r30, 0xA0	; 160
   1adfc:	ff 4f       	sbci	r31, 0xFF	; 255
   1adfe:	80 81       	ld	r24, Z
   1ae00:	91 81       	ldd	r25, Z+1	; 0x01
   1ae02:	a2 81       	ldd	r26, Z+2	; 0x02
   1ae04:	b3 81       	ldd	r27, Z+3	; 0x03
   1ae06:	ed b7       	in	r30, 0x3d	; 61
   1ae08:	fe b7       	in	r31, 0x3e	; 62
   1ae0a:	84 83       	std	Z+4, r24	; 0x04
   1ae0c:	95 83       	std	Z+5, r25	; 0x05
   1ae0e:	a6 83       	std	Z+6, r26	; 0x06
   1ae10:	b7 83       	std	Z+7, r27	; 0x07
   1ae12:	88 ee       	ldi	r24, 0xE8	; 232
   1ae14:	94 e3       	ldi	r25, 0x34	; 52
   1ae16:	a0 e0       	ldi	r26, 0x00	; 0
   1ae18:	81 83       	std	Z+1, r24	; 0x01
   1ae1a:	92 83       	std	Z+2, r25	; 0x02
   1ae1c:	a3 83       	std	Z+3, r26	; 0x03
   1ae1e:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    }

    // Write directory record
    // Note: lif_newdir alrwady did the new EOF
    if( !lif_writedirindex(LIF,index))
   1ae22:	b3 01       	movw	r22, r6
   1ae24:	c8 01       	movw	r24, r16
   1ae26:	0e 94 ed ca 	call	0x195da	; 0x195da <lif_writedirindex>
   1ae2a:	89 2b       	or	r24, r25
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ae2c:	21 f4       	brne	.+8      	; 0x1ae36 <lif_add_ascii_file_as_e010+0x240>
   1ae2e:	c8 01       	movw	r24, r16
   1ae30:	0e 94 f8 c9 	call	0x193f0	; 0x193f0 <lif_close_volume>
   1ae34:	14 c0       	rjmp	.+40     	; 0x1ae5e <lif_add_ascii_file_as_e010+0x268>
   1ae36:	c8 01       	movw	r24, r16
   1ae38:	0e 94 f8 c9 	call	0x193f0	; 0x193f0 <lif_close_volume>
        return(-1);
    }

    lif_closedir(LIF);

    printf("\tWrote: %8ld\n", bytes);
   1ae3c:	ed b7       	in	r30, 0x3d	; 61
   1ae3e:	fe b7       	in	r31, 0x3e	; 62
   1ae40:	84 82       	std	Z+4, r8	; 0x04
   1ae42:	95 82       	std	Z+5, r9	; 0x05
   1ae44:	e6 82       	std	Z+6, r14	; 0x06
   1ae46:	f7 82       	std	Z+7, r15	; 0x07
   1ae48:	8a ed       	ldi	r24, 0xDA	; 218
   1ae4a:	94 e3       	ldi	r25, 0x34	; 52
   1ae4c:	a0 e0       	ldi	r26, 0x00	; 0
   1ae4e:	81 83       	std	Z+1, r24	; 0x01
   1ae50:	92 83       	std	Z+2, r25	; 0x02
   1ae52:	a3 83       	std	Z+3, r26	; 0x03
   1ae54:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>

    // Return file size
    return(bytes);
   1ae58:	b4 01       	movw	r22, r8
   1ae5a:	c7 01       	movw	r24, r14
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
    if(LIF == NULL)
        return(-1); 
   1ae5c:	04 c0       	rjmp	.+8      	; 0x1ae66 <lif_add_ascii_file_as_e010+0x270>
   1ae5e:	6f ef       	ldi	r22, 0xFF	; 255
   1ae60:	7f ef       	ldi	r23, 0xFF	; 255
   1ae62:	8f ef       	ldi	r24, 0xFF	; 255

    printf("\tWrote: %8ld\n", bytes);

    // Return file size
    return(bytes);
}
   1ae64:	9f ef       	ldi	r25, 0xFF	; 255
   1ae66:	eb 96       	adiw	r28, 0x3b	; 59
   1ae68:	e2 e1       	ldi	r30, 0x12	; 18
   1ae6a:	0c 94 e4 e3 	jmp	0x1c7c8	; 0x1c7c8 <__epilogue_restores__>

0001ae6e <lif_extract_e010_as_ascii>:
/// @param[in] lifname:  name of file in LIF image
/// @param[in] username: name to call the extracted image
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_e010_as_ascii(char *lifimagename, char *lifname, char *username)
{
   1ae6e:	a7 e3       	ldi	r26, 0x37	; 55
   1ae70:	b2 e0       	ldi	r27, 0x02	; 2
   1ae72:	ed e3       	ldi	r30, 0x3D	; 61
   1ae74:	f7 ed       	ldi	r31, 0xD7	; 215
   1ae76:	0c 94 c8 e3 	jmp	0x1c790	; 0x1c790 <__prologue_saves__>
   1ae7a:	7c 01       	movw	r14, r24
   1ae7c:	8b 01       	movw	r16, r22
   1ae7e:	ca 5d       	subi	r28, 0xDA	; 218
   1ae80:	dd 4f       	sbci	r29, 0xFD	; 253
   1ae82:	59 83       	std	Y+1, r21	; 0x01
   1ae84:	48 83       	st	Y, r20
   1ae86:	c6 52       	subi	r28, 0x26	; 38
   1ae88:	d2 40       	sbci	r29, 0x02	; 2
    uint8_t buf[LIF_SECTOR_SIZE+4];
    // Write buffer, FYI: will ALWAYS be smaller then the read data buffer
    uint8_t wbuf[LIF_SECTOR_SIZE+4];


    LIF = lif_open_volume(lifimagename,"r");
   1ae8a:	62 e6       	ldi	r22, 0x62	; 98
   1ae8c:	72 e0       	ldi	r23, 0x02	; 2
   1ae8e:	6b d9       	rcall	.-3370   	; 0x1a166 <lif_open_volume>
   1ae90:	6c 01       	movw	r12, r24
    if(LIF == NULL)
   1ae92:	00 97       	sbiw	r24, 0x00	; 0
   1ae94:	69 f4       	brne	.+26     	; 0x1aeb0 <lif_extract_e010_as_ascii+0x42>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1ae96:	ed b7       	in	r30, 0x3d	; 61
   1ae98:	fe b7       	in	r31, 0x3e	; 62
   1ae9a:	f5 82       	std	Z+5, r15	; 0x05
   1ae9c:	e4 82       	std	Z+4, r14	; 0x04
   1ae9e:	82 ec       	ldi	r24, 0xC2	; 194
   1aea0:	94 e3       	ldi	r25, 0x34	; 52
   1aea2:	a0 e0       	ldi	r26, 0x00	; 0
   1aea4:	81 83       	std	Z+1, r24	; 0x01
   1aea6:	92 83       	std	Z+2, r25	; 0x02
   1aea8:	a3 83       	std	Z+3, r26	; 0x03
   1aeaa:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   1aeae:	13 c0       	rjmp	.+38     	; 0x1aed6 <lif_extract_e010_as_ascii+0x68>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1aeb0:	b8 01       	movw	r22, r16
   1aeb2:	28 dc       	rcall	.-1968   	; 0x1a704 <lif_find_file>
    if(index == -1)
   1aeb4:	01 96       	adiw	r24, 0x01	; 1
   1aeb6:	91 f4       	brne	.+36     	; 0x1aedc <lif_extract_e010_as_ascii+0x6e>
    {
        printf("LIF File not found:%s\n", lifname);
   1aeb8:	ed b7       	in	r30, 0x3d	; 61
   1aeba:	fe b7       	in	r31, 0x3e	; 62
   1aebc:	15 83       	std	Z+5, r17	; 0x05
   1aebe:	04 83       	std	Z+4, r16	; 0x04
   1aec0:	8b ea       	ldi	r24, 0xAB	; 171
   1aec2:	94 e3       	ldi	r25, 0x34	; 52
   1aec4:	a0 e0       	ldi	r26, 0x00	; 0
   1aec6:	81 83       	std	Z+1, r24	; 0x01
   1aec8:	92 83       	std	Z+2, r25	; 0x02
   1aeca:	a3 83       	std	Z+3, r26	; 0x03
   1aecc:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1aed0:	c6 01       	movw	r24, r12
   1aed2:	0e 94 f8 c9 	call	0x193f0	; 0x193f0 <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("LIF File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1aed6:	80 e0       	ldi	r24, 0x00	; 0
   1aed8:	90 e0       	ldi	r25, 0x00	; 0
   1aeda:	73 c2       	rjmp	.+1254   	; 0x1b3c2 <lif_extract_e010_as_ascii+0x554>
    }

    if((LIF->DIR.FileType & 0xFFFC) != 0xE010)
   1aedc:	f6 01       	movw	r30, r12
   1aede:	e6 5a       	subi	r30, 0xA6	; 166
   1aee0:	ff 4f       	sbci	r31, 0xFF	; 255
   1aee2:	80 81       	ld	r24, Z
   1aee4:	91 81       	ldd	r25, Z+1	; 0x01
   1aee6:	9c 01       	movw	r18, r24
   1aee8:	2c 7f       	andi	r18, 0xFC	; 252
   1aeea:	20 31       	cpi	r18, 0x10	; 16
   1aeec:	30 4e       	sbci	r19, 0xE0	; 224
   1aeee:	a9 f0       	breq	.+42     	; 0x1af1a <lif_extract_e010_as_ascii+0xac>
    {
        printf("File %s has wrong type:[%04XH] expected 0xE010..0xE013\n", username, (int) LIF->DIR.FileType);
   1aef0:	ed b7       	in	r30, 0x3d	; 61
   1aef2:	fe b7       	in	r31, 0x3e	; 62
   1aef4:	97 83       	std	Z+7, r25	; 0x07
   1aef6:	86 83       	std	Z+6, r24	; 0x06
   1aef8:	ca 5d       	subi	r28, 0xDA	; 218
   1aefa:	dd 4f       	sbci	r29, 0xFD	; 253
   1aefc:	28 81       	ld	r18, Y
   1aefe:	39 81       	ldd	r19, Y+1	; 0x01
   1af00:	c6 52       	subi	r28, 0x26	; 38
   1af02:	d2 40       	sbci	r29, 0x02	; 2
   1af04:	35 83       	std	Z+5, r19	; 0x05
   1af06:	24 83       	std	Z+4, r18	; 0x04
   1af08:	83 e7       	ldi	r24, 0x73	; 115
   1af0a:	94 e3       	ldi	r25, 0x34	; 52
   1af0c:	a0 e0       	ldi	r26, 0x00	; 0
   1af0e:	81 83       	std	Z+1, r24	; 0x01
   1af10:	92 83       	std	Z+2, r25	; 0x02
   1af12:	a3 83       	std	Z+3, r26	; 0x03
   1af14:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   1af18:	db cf       	rjmp	.-74     	; 0x1aed0 <lif_extract_e010_as_ascii+0x62>
        lif_closedir(LIF);
        return(0);
    }

    start = LIF->DIR.FileStartSector;
   1af1a:	f6 01       	movw	r30, r12
   1af1c:	e4 5a       	subi	r30, 0xA4	; 164
   1af1e:	ff 4f       	sbci	r31, 0xFF	; 255
   1af20:	80 80       	ld	r8, Z
   1af22:	91 80       	ldd	r9, Z+1	; 0x01
   1af24:	a2 80       	ldd	r10, Z+2	; 0x02
   1af26:	b3 80       	ldd	r11, Z+3	; 0x03
    end = start + LIF->DIR.FileSectors;
   1af28:	34 96       	adiw	r30, 0x04	; 4
   1af2a:	80 81       	ld	r24, Z
   1af2c:	91 81       	ldd	r25, Z+1	; 0x01
   1af2e:	a2 81       	ldd	r26, Z+2	; 0x02
   1af30:	b3 81       	ldd	r27, Z+3	; 0x03
   1af32:	a5 01       	movw	r20, r10
   1af34:	94 01       	movw	r18, r8
   1af36:	28 0f       	add	r18, r24
   1af38:	39 1f       	adc	r19, r25
   1af3a:	4a 1f       	adc	r20, r26
   1af3c:	5b 1f       	adc	r21, r27
   1af3e:	c4 5d       	subi	r28, 0xD4	; 212
   1af40:	dd 4f       	sbci	r29, 0xFD	; 253
   1af42:	28 83       	st	Y, r18
   1af44:	39 83       	std	Y+1, r19	; 0x01
   1af46:	4a 83       	std	Y+2, r20	; 0x02
   1af48:	5b 83       	std	Y+3, r21	; 0x03
   1af4a:	cc 52       	subi	r28, 0x2C	; 44
   1af4c:	d2 40       	sbci	r29, 0x02	; 2

    t = lif_lifbcd2time(LIF->DIR.date);
   1af4e:	c6 01       	movw	r24, r12
   1af50:	8c 59       	subi	r24, 0x9C	; 156
   1af52:	9f 4f       	sbci	r25, 0xFF	; 255
   1af54:	0e 94 04 c5 	call	0x18a08	; 0x18a08 <lif_lifbcd2time>
   1af58:	c8 5d       	subi	r28, 0xD8	; 216
   1af5a:	dd 4f       	sbci	r29, 0xFD	; 253
   1af5c:	68 83       	st	Y, r22
   1af5e:	79 83       	std	Y+1, r23	; 0x01
   1af60:	8a 83       	std	Y+2, r24	; 0x02
   1af62:	9b 83       	std	Y+3, r25	; 0x03
   1af64:	c8 52       	subi	r28, 0x28	; 40
   1af66:	d2 40       	sbci	r29, 0x02	; 2

    offset = start * (long) LIF_SECTOR_SIZE;
   1af68:	ba 2d       	mov	r27, r10
   1af6a:	a9 2d       	mov	r26, r9
   1af6c:	98 2d       	mov	r25, r8
   1af6e:	88 27       	eor	r24, r24
   1af70:	c2 5e       	subi	r28, 0xE2	; 226
   1af72:	dd 4f       	sbci	r29, 0xFD	; 253
   1af74:	88 83       	st	Y, r24
   1af76:	99 83       	std	Y+1, r25	; 0x01
   1af78:	aa 83       	std	Y+2, r26	; 0x02
   1af7a:	bb 83       	std	Y+3, r27	; 0x03
   1af7c:	ce 51       	subi	r28, 0x1E	; 30
   1af7e:	d2 40       	sbci	r29, 0x02	; 2

    fo = lif_open(username,"wb");
   1af80:	6a e2       	ldi	r22, 0x2A	; 42
   1af82:	78 e0       	ldi	r23, 0x08	; 8
   1af84:	ca 5d       	subi	r28, 0xDA	; 218
   1af86:	dd 4f       	sbci	r29, 0xFD	; 253
   1af88:	88 81       	ld	r24, Y
   1af8a:	99 81       	ldd	r25, Y+1	; 0x01
   1af8c:	c6 52       	subi	r28, 0x26	; 38
   1af8e:	d2 40       	sbci	r29, 0x02	; 2
   1af90:	0e 94 a8 c0 	call	0x18150	; 0x18150 <lif_open>
   1af94:	cc 5d       	subi	r28, 0xDC	; 220
   1af96:	dd 4f       	sbci	r29, 0xFD	; 253
   1af98:	99 83       	std	Y+1, r25	; 0x01
   1af9a:	88 83       	st	Y, r24
   1af9c:	c4 52       	subi	r28, 0x24	; 36
   1af9e:	d2 40       	sbci	r29, 0x02	; 2
    if(fo == NULL)
   1afa0:	89 2b       	or	r24, r25
   1afa2:	09 f4       	brne	.+2      	; 0x1afa6 <lif_extract_e010_as_ascii+0x138>
   1afa4:	95 cf       	rjmp	.-214    	; 0x1aed0 <lif_extract_e010_as_ascii+0x62>
    {
        lif_closedir(LIF);
        return(0);
    }

    printf("Extracting: %s\n", username);
   1afa6:	ca 5d       	subi	r28, 0xDA	; 218
   1afa8:	dd 4f       	sbci	r29, 0xFD	; 253
   1afaa:	28 81       	ld	r18, Y
   1afac:	39 81       	ldd	r19, Y+1	; 0x01
   1afae:	c6 52       	subi	r28, 0x26	; 38
   1afb0:	d2 40       	sbci	r29, 0x02	; 2
   1afb2:	ed b7       	in	r30, 0x3d	; 61
   1afb4:	fe b7       	in	r31, 0x3e	; 62
   1afb6:	35 83       	std	Z+5, r19	; 0x05
   1afb8:	24 83       	std	Z+4, r18	; 0x04
   1afba:	83 e6       	ldi	r24, 0x63	; 99
   1afbc:	94 e3       	ldi	r25, 0x34	; 52
   1afbe:	a0 e0       	ldi	r26, 0x00	; 0
   1afc0:	81 83       	std	Z+1, r24	; 0x01
   1afc2:	92 83       	std	Z+2, r25	; 0x02
   1afc4:	a3 83       	std	Z+3, r26	; 0x03
   1afc6:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>

    bytes = 0;
    wind = 0;
   1afca:	21 2c       	mov	r2, r1
   1afcc:	31 2c       	mov	r3, r1
    uint32_t start, end;    // sectors
    long offset, bytes;     // bytes
    int index;
    int i, len,size;
    int status = 1;
    int done = 0;
   1afce:	ce 5d       	subi	r28, 0xDE	; 222
   1afd0:	dd 4f       	sbci	r29, 0xFD	; 253
   1afd2:	19 82       	std	Y+1, r1	; 0x01
   1afd4:	18 82       	st	Y, r1
   1afd6:	c2 52       	subi	r28, 0x22	; 34
   1afd8:	d2 40       	sbci	r29, 0x02	; 2
    lif_t *LIF;
    uint32_t start, end;    // sectors
    long offset, bytes;     // bytes
    int index;
    int i, len,size;
    int status = 1;
   1afda:	ee 24       	eor	r14, r14
   1afdc:	e3 94       	inc	r14
   1afde:	f1 2c       	mov	r15, r1
        return(0);
    }

    printf("Extracting: %s\n", username);

    bytes = 0;
   1afe0:	41 2c       	mov	r4, r1
   1afe2:	51 2c       	mov	r5, r1
   1afe4:	32 01       	movw	r6, r4
                        status = 0;
                        done = 1;
                        break;
                    }
                    bytes += size;
                    printf("\tWrote: %8ld\r", bytes);
   1afe6:	82 ea       	ldi	r24, 0xA2	; 162
   1afe8:	93 e3       	ldi	r25, 0x33	; 51
   1afea:	9c 01       	movw	r18, r24
   1afec:	40 e0       	ldi	r20, 0x00	; 0
   1afee:	ce 5c       	subi	r28, 0xCE	; 206
   1aff0:	dd 4f       	sbci	r29, 0xFD	; 253
   1aff2:	28 83       	st	Y, r18
   1aff4:	39 83       	std	Y+1, r19	; 0x01
   1aff6:	4a 83       	std	Y+2, r20	; 0x02
   1aff8:	c2 53       	subi	r28, 0x32	; 50
   1affa:	d2 40       	sbci	r29, 0x02	; 2
                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1affc:	80 eb       	ldi	r24, 0xB0	; 176
   1affe:	93 e3       	ldi	r25, 0x33	; 51
   1b000:	9c 01       	movw	r18, r24
   1b002:	40 e0       	ldi	r20, 0x00	; 0
   1b004:	cb 5c       	subi	r28, 0xCB	; 203
   1b006:	dd 4f       	sbci	r29, 0xFD	; 253
   1b008:	28 83       	st	Y, r18
   1b00a:	39 83       	std	Y+1, r19	; 0x01
   1b00c:	4a 83       	std	Y+2, r20	; 0x02
   1b00e:	c5 53       	subi	r28, 0x35	; 53
   1b010:	d2 40       	sbci	r29, 0x02	; 2

    bytes = 0;
    wind = 0;
    ind = 0;

    while(lif_bytes2sectors(offset) <= end)
   1b012:	c2 5e       	subi	r28, 0xE2	; 226
   1b014:	dd 4f       	sbci	r29, 0xFD	; 253
   1b016:	28 81       	ld	r18, Y
   1b018:	39 81       	ldd	r19, Y+1	; 0x01
   1b01a:	4a 81       	ldd	r20, Y+2	; 0x02
   1b01c:	5b 81       	ldd	r21, Y+3	; 0x03
   1b01e:	ce 51       	subi	r28, 0x1E	; 30
   1b020:	d2 40       	sbci	r29, 0x02	; 2
   1b022:	bb 27       	eor	r27, r27
   1b024:	a5 2f       	mov	r26, r21
   1b026:	94 2f       	mov	r25, r20
   1b028:	83 2f       	mov	r24, r19
   1b02a:	c4 5d       	subi	r28, 0xD4	; 212
   1b02c:	dd 4f       	sbci	r29, 0xFD	; 253
   1b02e:	28 81       	ld	r18, Y
   1b030:	39 81       	ldd	r19, Y+1	; 0x01
   1b032:	4a 81       	ldd	r20, Y+2	; 0x02
   1b034:	5b 81       	ldd	r21, Y+3	; 0x03
   1b036:	cc 52       	subi	r28, 0x2C	; 44
   1b038:	d2 40       	sbci	r29, 0x02	; 2
   1b03a:	28 17       	cp	r18, r24
   1b03c:	39 07       	cpc	r19, r25
   1b03e:	4a 07       	cpc	r20, r26
   1b040:	5b 07       	cpc	r21, r27
   1b042:	08 f4       	brcc	.+2      	; 0x1b046 <lif_extract_e010_as_ascii+0x1d8>
   1b044:	51 c1       	rjmp	.+674    	; 0x1b2e8 <lif_extract_e010_as_ascii+0x47a>
    {
        // LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
   1b046:	00 e0       	ldi	r16, 0x00	; 0
   1b048:	11 e0       	ldi	r17, 0x01	; 1
   1b04a:	c2 5e       	subi	r28, 0xE2	; 226
   1b04c:	dd 4f       	sbci	r29, 0xFD	; 253
   1b04e:	28 81       	ld	r18, Y
   1b050:	39 81       	ldd	r19, Y+1	; 0x01
   1b052:	4a 81       	ldd	r20, Y+2	; 0x02
   1b054:	5b 81       	ldd	r21, Y+3	; 0x03
   1b056:	ce 51       	subi	r28, 0x1E	; 30
   1b058:	d2 40       	sbci	r29, 0x02	; 2
   1b05a:	be 01       	movw	r22, r28
   1b05c:	60 5f       	subi	r22, 0xF0	; 240
   1b05e:	7e 4f       	sbci	r23, 0xFE	; 254
   1b060:	c6 01       	movw	r24, r12
   1b062:	0e 94 2c c1 	call	0x18258	; 0x18258 <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1b066:	6f 3f       	cpi	r22, 0xFF	; 255
   1b068:	71 05       	cpc	r23, r1
   1b06a:	09 f0       	breq	.+2      	; 0x1b06e <lif_extract_e010_as_ascii+0x200>
   1b06c:	0c f4       	brge	.+2      	; 0x1b070 <lif_extract_e010_as_ascii+0x202>
   1b06e:	3a c1       	rjmp	.+628    	; 0x1b2e4 <lif_extract_e010_as_ascii+0x476>
   1b070:	00 e0       	ldi	r16, 0x00	; 0
   1b072:	10 e0       	ldi	r17, 0x00	; 0
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1b074:	ce 5d       	subi	r28, 0xDE	; 222
   1b076:	dd 4f       	sbci	r29, 0xFD	; 253
   1b078:	88 81       	ld	r24, Y
   1b07a:	99 81       	ldd	r25, Y+1	; 0x01
   1b07c:	c2 52       	subi	r28, 0x22	; 34
   1b07e:	d2 40       	sbci	r29, 0x02	; 2
   1b080:	89 2b       	or	r24, r25
   1b082:	09 f0       	breq	.+2      	; 0x1b086 <lif_extract_e010_as_ascii+0x218>
   1b084:	1b c1       	rjmp	.+566    	; 0x1b2bc <lif_extract_e010_as_ascii+0x44e>
        {
            if(buf[ind] == 0xDF || buf[ind] == 0xCF || buf[ind] == 0x6F)
   1b086:	e0 e1       	ldi	r30, 0x10	; 16
   1b088:	f1 e0       	ldi	r31, 0x01	; 1
   1b08a:	ec 0f       	add	r30, r28
   1b08c:	fd 1f       	adc	r31, r29
   1b08e:	e0 0f       	add	r30, r16
   1b090:	f1 1f       	adc	r31, r17
   1b092:	80 81       	ld	r24, Z
   1b094:	98 2f       	mov	r25, r24
   1b096:	9f 7e       	andi	r25, 0xEF	; 239
   1b098:	9f 3c       	cpi	r25, 0xCF	; 207
   1b09a:	11 f0       	breq	.+4      	; 0x1b0a0 <lif_extract_e010_as_ascii+0x232>
   1b09c:	8f 36       	cpi	r24, 0x6F	; 111
   1b09e:	c9 f5       	brne	.+114    	; 0x1b112 <lif_extract_e010_as_ascii+0x2a4>
            {
                ++ind;
                len = buf[ind++] & 0xff;
   1b0a0:	e0 e1       	ldi	r30, 0x10	; 16
   1b0a2:	f1 e0       	ldi	r31, 0x01	; 1
   1b0a4:	ec 0f       	add	r30, r28
   1b0a6:	fd 1f       	adc	r31, r29
   1b0a8:	e0 0f       	add	r30, r16
   1b0aa:	f1 1f       	adc	r31, r17
   1b0ac:	a1 80       	ldd	r10, Z+1	; 0x01
                len |= ((buf[ind++] & 0xff) <<8); 
   1b0ae:	f8 01       	movw	r30, r16
   1b0b0:	32 96       	adiw	r30, 0x02	; 2
   1b0b2:	40 e1       	ldi	r20, 0x10	; 16
   1b0b4:	51 e0       	ldi	r21, 0x01	; 1
   1b0b6:	4c 0f       	add	r20, r28
   1b0b8:	5d 1f       	adc	r21, r29
   1b0ba:	e4 0f       	add	r30, r20
   1b0bc:	f5 1f       	adc	r31, r21
   1b0be:	0d 5f       	subi	r16, 0xFD	; 253
   1b0c0:	1f 4f       	sbci	r17, 0xFF	; 255
   1b0c2:	80 81       	ld	r24, Z
   1b0c4:	b1 2c       	mov	r11, r1
   1b0c6:	b8 2a       	or	r11, r24
                // EOF ?
                if(len == 0)
   1b0c8:	a1 14       	cp	r10, r1
   1b0ca:	b1 04       	cpc	r11, r1
   1b0cc:	09 f4       	brne	.+2      	; 0x1b0d0 <lif_extract_e010_as_ascii+0x262>
   1b0ce:	ee c0       	rjmp	.+476    	; 0x1b2ac <lif_extract_e010_as_ascii+0x43e>
                {
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
   1b0d0:	5f ef       	ldi	r21, 0xFF	; 255
   1b0d2:	a5 16       	cp	r10, r21
   1b0d4:	b1 04       	cpc	r11, r1
   1b0d6:	09 f0       	breq	.+2      	; 0x1b0da <lif_extract_e010_as_ascii+0x26c>
   1b0d8:	7c f4       	brge	.+30     	; 0x1b0f8 <lif_extract_e010_as_ascii+0x28a>
   1b0da:	c4 5e       	subi	r28, 0xE4	; 228
   1b0dc:	dd 4f       	sbci	r29, 0xFD	; 253
   1b0de:	19 82       	std	Y+1, r1	; 0x01
   1b0e0:	18 82       	st	Y, r1
   1b0e2:	cc 51       	subi	r28, 0x1C	; 28
   1b0e4:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
            // write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
   1b0e6:	c5 01       	movw	r24, r10
   1b0e8:	01 97       	sbiw	r24, 0x01	; 1
   1b0ea:	c0 5d       	subi	r28, 0xD0	; 208
   1b0ec:	dd 4f       	sbci	r29, 0xFD	; 253
   1b0ee:	99 83       	std	Y+1, r25	; 0x01
   1b0f0:	88 83       	st	Y, r24
   1b0f2:	c0 53       	subi	r28, 0x30	; 48
   1b0f4:	d2 40       	sbci	r29, 0x02	; 2
   1b0f6:	68 c0       	rjmp	.+208    	; 0x1b1c8 <lif_extract_e010_as_ascii+0x35a>
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
                {
                    printf("lif_extract_e010_as_ascii: string too big size = %d\n", (int)len);
   1b0f8:	ed b7       	in	r30, 0x3d	; 61
   1b0fa:	fe b7       	in	r31, 0x3e	; 62
   1b0fc:	b5 82       	std	Z+5, r11	; 0x05
   1b0fe:	a4 82       	std	Z+4, r10	; 0x04
   1b100:	8e e2       	ldi	r24, 0x2E	; 46
   1b102:	94 e3       	ldi	r25, 0x34	; 52
   1b104:	a0 e0       	ldi	r26, 0x00	; 0
   1b106:	81 83       	std	Z+1, r24	; 0x01
   1b108:	92 83       	std	Z+2, r25	; 0x02
   1b10a:	a3 83       	std	Z+3, r26	; 0x03
   1b10c:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   1b110:	1e c0       	rjmp	.+60     	; 0x1b14e <lif_extract_e010_as_ascii+0x2e0>
                    status = 0;
                    done = 1;
                    break;
                }
            }
            else if(buf[ind] == 0xEF)
   1b112:	8f 3e       	cpi	r24, 0xEF	; 239
   1b114:	09 f4       	brne	.+2      	; 0x1b118 <lif_extract_e010_as_ascii+0x2aa>
   1b116:	d2 c0       	rjmp	.+420    	; 0x1b2bc <lif_extract_e010_as_ascii+0x44e>
                ind = 0;
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
   1b118:	ed b7       	in	r30, 0x3d	; 61
   1b11a:	fe b7       	in	r31, 0x3e	; 62
   1b11c:	13 87       	std	Z+11, r17	; 0x0b
   1b11e:	02 87       	std	Z+10, r16	; 0x0a
   1b120:	c2 5e       	subi	r28, 0xE2	; 226
   1b122:	dd 4f       	sbci	r29, 0xFD	; 253
   1b124:	28 81       	ld	r18, Y
   1b126:	39 81       	ldd	r19, Y+1	; 0x01
   1b128:	4a 81       	ldd	r20, Y+2	; 0x02
   1b12a:	5b 81       	ldd	r21, Y+3	; 0x03
   1b12c:	ce 51       	subi	r28, 0x1E	; 30
   1b12e:	d2 40       	sbci	r29, 0x02	; 2
   1b130:	26 83       	std	Z+6, r18	; 0x06
   1b132:	37 83       	std	Z+7, r19	; 0x07
   1b134:	40 87       	std	Z+8, r20	; 0x08
   1b136:	51 87       	std	Z+9, r21	; 0x09
   1b138:	90 e0       	ldi	r25, 0x00	; 0
   1b13a:	95 83       	std	Z+5, r25	; 0x05
   1b13c:	84 83       	std	Z+4, r24	; 0x04
   1b13e:	88 ed       	ldi	r24, 0xD8	; 216
   1b140:	93 e3       	ldi	r25, 0x33	; 51
   1b142:	a0 e0       	ldi	r26, 0x00	; 0
   1b144:	81 83       	std	Z+1, r24	; 0x01
   1b146:	92 83       	std	Z+2, r25	; 0x02
   1b148:	a3 83       	std	Z+3, r26	; 0x03
   1b14a:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
                status = 0;
                done = 1;
   1b14e:	21 e0       	ldi	r18, 0x01	; 1
   1b150:	30 e0       	ldi	r19, 0x00	; 0
   1b152:	ce 5d       	subi	r28, 0xDE	; 222
   1b154:	dd 4f       	sbci	r29, 0xFD	; 253
   1b156:	39 83       	std	Y+1, r19	; 0x01
   1b158:	28 83       	st	Y, r18
   1b15a:	c2 52       	subi	r28, 0x22	; 34
   1b15c:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
                status = 0;
   1b15e:	e1 2c       	mov	r14, r1
   1b160:	f1 2c       	mov	r15, r1
                done = 1;
                break;
   1b162:	ac c0       	rjmp	.+344    	; 0x1b2bc <lif_extract_e010_as_ascii+0x44e>
            }
            // write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1b164:	0f 3f       	cpi	r16, 0xFF	; 255
   1b166:	11 05       	cpc	r17, r1
   1b168:	11 f0       	breq	.+4      	; 0x1b16e <lif_extract_e010_as_ascii+0x300>
   1b16a:	0c f0       	brlt	.+2      	; 0x1b16e <lif_extract_e010_as_ascii+0x300>
   1b16c:	a7 c0       	rjmp	.+334    	; 0x1b2bc <lif_extract_e010_as_ascii+0x44e>
            {
                if(buf[ind] == '\r' && i == len-1)
   1b16e:	e0 e1       	ldi	r30, 0x10	; 16
   1b170:	f1 e0       	ldi	r31, 0x01	; 1
   1b172:	ec 0f       	add	r30, r28
   1b174:	fd 1f       	adc	r31, r29
   1b176:	e0 0f       	add	r30, r16
   1b178:	f1 1f       	adc	r31, r17
   1b17a:	20 81       	ld	r18, Z
   1b17c:	a1 01       	movw	r20, r2
   1b17e:	4f 5f       	subi	r20, 0xFF	; 255
   1b180:	5f 4f       	sbci	r21, 0xFF	; 255
   1b182:	4a 01       	movw	r8, r20
   1b184:	2d 30       	cpi	r18, 0x0D	; 13
   1b186:	51 f1       	breq	.+84     	; 0x1b1dc <lif_extract_e010_as_ascii+0x36e>
                    ++ind;
                    break;
                }
                else 
                {
                    wbuf[wind++] = buf[ind++];
   1b188:	98 2d       	mov	r25, r8
   1b18a:	89 2d       	mov	r24, r9
   1b18c:	0f 5f       	subi	r16, 0xFF	; 255
   1b18e:	1f 4f       	sbci	r17, 0xFF	; 255
   1b190:	ec e0       	ldi	r30, 0x0C	; 12
   1b192:	f0 e0       	ldi	r31, 0x00	; 0
   1b194:	ec 0f       	add	r30, r28
   1b196:	fd 1f       	adc	r31, r29
   1b198:	e2 0d       	add	r30, r2
   1b19a:	f3 1d       	adc	r31, r3
   1b19c:	20 83       	st	Z, r18
                }

                if(wind >= LIF_SECTOR_SIZE)
   1b19e:	ef ef       	ldi	r30, 0xFF	; 255
   1b1a0:	8e 16       	cp	r8, r30
   1b1a2:	91 04       	cpc	r9, r1
   1b1a4:	09 f0       	breq	.+2      	; 0x1b1a8 <lif_extract_e010_as_ascii+0x33a>
   1b1a6:	ac f5       	brge	.+106    	; 0x1b212 <lif_extract_e010_as_ascii+0x3a4>
                status = 0;
                done = 1;
                break;
            }
            // write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1b1a8:	c4 5e       	subi	r28, 0xE4	; 228
   1b1aa:	dd 4f       	sbci	r29, 0xFD	; 253
   1b1ac:	28 81       	ld	r18, Y
   1b1ae:	39 81       	ldd	r19, Y+1	; 0x01
   1b1b0:	cc 51       	subi	r28, 0x1C	; 28
   1b1b2:	d2 40       	sbci	r29, 0x02	; 2
   1b1b4:	2f 5f       	subi	r18, 0xFF	; 255
   1b1b6:	3f 4f       	sbci	r19, 0xFF	; 255
   1b1b8:	c4 5e       	subi	r28, 0xE4	; 228
   1b1ba:	dd 4f       	sbci	r29, 0xFD	; 253
   1b1bc:	39 83       	std	Y+1, r19	; 0x01
   1b1be:	28 83       	st	Y, r18
   1b1c0:	cc 51       	subi	r28, 0x1C	; 28
   1b1c2:	d2 40       	sbci	r29, 0x02	; 2
   1b1c4:	29 2e       	mov	r2, r25
   1b1c6:	38 2e       	mov	r3, r24
   1b1c8:	c4 5e       	subi	r28, 0xE4	; 228
   1b1ca:	dd 4f       	sbci	r29, 0xFD	; 253
   1b1cc:	48 81       	ld	r20, Y
   1b1ce:	59 81       	ldd	r21, Y+1	; 0x01
   1b1d0:	cc 51       	subi	r28, 0x1C	; 28
   1b1d2:	d2 40       	sbci	r29, 0x02	; 2
   1b1d4:	4a 15       	cp	r20, r10
   1b1d6:	5b 05       	cpc	r21, r11
   1b1d8:	2c f2       	brlt	.-118    	; 0x1b164 <lif_extract_e010_as_ascii+0x2f6>
   1b1da:	62 c0       	rjmp	.+196    	; 0x1b2a0 <lif_extract_e010_as_ascii+0x432>
            {
                if(buf[ind] == '\r' && i == len-1)
   1b1dc:	c4 5e       	subi	r28, 0xE4	; 228
   1b1de:	dd 4f       	sbci	r29, 0xFD	; 253
   1b1e0:	88 81       	ld	r24, Y
   1b1e2:	99 81       	ldd	r25, Y+1	; 0x01
   1b1e4:	cc 51       	subi	r28, 0x1C	; 28
   1b1e6:	d2 40       	sbci	r29, 0x02	; 2
   1b1e8:	c0 5d       	subi	r28, 0xD0	; 208
   1b1ea:	dd 4f       	sbci	r29, 0xFD	; 253
   1b1ec:	a8 81       	ld	r26, Y
   1b1ee:	b9 81       	ldd	r27, Y+1	; 0x01
   1b1f0:	c0 53       	subi	r28, 0x30	; 48
   1b1f2:	d2 40       	sbci	r29, 0x02	; 2
   1b1f4:	8a 17       	cp	r24, r26
   1b1f6:	9b 07       	cpc	r25, r27
   1b1f8:	39 f6       	brne	.-114    	; 0x1b188 <lif_extract_e010_as_ascii+0x31a>
                {
                    wbuf[wind++] = '\n';
   1b1fa:	ec e0       	ldi	r30, 0x0C	; 12
   1b1fc:	f0 e0       	ldi	r31, 0x00	; 0
   1b1fe:	ec 0f       	add	r30, r28
   1b200:	fd 1f       	adc	r31, r29
   1b202:	e2 0d       	add	r30, r2
   1b204:	f3 1d       	adc	r31, r3
   1b206:	ba e0       	ldi	r27, 0x0A	; 10
   1b208:	b0 83       	st	Z, r27
                    ++ind;
   1b20a:	0f 5f       	subi	r16, 0xFF	; 255
   1b20c:	1f 4f       	sbci	r17, 0xFF	; 255
            // write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
                {
                    wbuf[wind++] = '\n';
   1b20e:	1a 01       	movw	r2, r20
                    ++ind;
                    break;
   1b210:	47 c0       	rjmp	.+142    	; 0x1b2a0 <lif_extract_e010_as_ascii+0x432>
                    wbuf[wind++] = buf[ind++];
                }

                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
   1b212:	cc 5d       	subi	r28, 0xDC	; 220
   1b214:	dd 4f       	sbci	r29, 0xFD	; 253
   1b216:	28 81       	ld	r18, Y
   1b218:	39 81       	ldd	r19, Y+1	; 0x01
   1b21a:	c4 52       	subi	r28, 0x24	; 36
   1b21c:	d2 40       	sbci	r29, 0x02	; 2
   1b21e:	a4 01       	movw	r20, r8
   1b220:	61 e0       	ldi	r22, 0x01	; 1
   1b222:	70 e0       	ldi	r23, 0x00	; 0
   1b224:	ce 01       	movw	r24, r28
   1b226:	0c 96       	adiw	r24, 0x0c	; 12
   1b228:	0e 94 20 7d 	call	0xfa40	; 0xfa40 <fwrite>
                    if(size < wind)
   1b22c:	88 15       	cp	r24, r8
   1b22e:	99 05       	cpc	r25, r9
   1b230:	d4 f4       	brge	.+52     	; 0x1b266 <lif_extract_e010_as_ascii+0x3f8>
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1b232:	cb 5c       	subi	r28, 0xCB	; 203
   1b234:	dd 4f       	sbci	r29, 0xFD	; 253
   1b236:	28 81       	ld	r18, Y
   1b238:	39 81       	ldd	r19, Y+1	; 0x01
   1b23a:	4a 81       	ldd	r20, Y+2	; 0x02
   1b23c:	c5 53       	subi	r28, 0x35	; 53
   1b23e:	d2 40       	sbci	r29, 0x02	; 2
   1b240:	ed b7       	in	r30, 0x3d	; 61
   1b242:	fe b7       	in	r31, 0x3e	; 62
   1b244:	21 83       	std	Z+1, r18	; 0x01
   1b246:	32 83       	std	Z+2, r19	; 0x02
   1b248:	43 83       	std	Z+3, r20	; 0x03
   1b24a:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
                    ++ind;
                    break;
                }
                else 
                {
                    wbuf[wind++] = buf[ind++];
   1b24e:	14 01       	movw	r2, r8
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
                        done = 1;
   1b250:	21 e0       	ldi	r18, 0x01	; 1
   1b252:	30 e0       	ldi	r19, 0x00	; 0
   1b254:	ce 5d       	subi	r28, 0xDE	; 222
   1b256:	dd 4f       	sbci	r29, 0xFD	; 253
   1b258:	39 83       	std	Y+1, r19	; 0x01
   1b25a:	28 83       	st	Y, r18
   1b25c:	c2 52       	subi	r28, 0x22	; 34
   1b25e:	d2 40       	sbci	r29, 0x02	; 2
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
   1b260:	e1 2c       	mov	r14, r1
   1b262:	f1 2c       	mov	r15, r1
                        done = 1;
                        break;
   1b264:	1d c0       	rjmp	.+58     	; 0x1b2a0 <lif_extract_e010_as_ascii+0x432>
                    }
                    bytes += size;
   1b266:	09 2e       	mov	r0, r25
   1b268:	00 0c       	add	r0, r0
   1b26a:	aa 0b       	sbc	r26, r26
   1b26c:	bb 0b       	sbc	r27, r27
   1b26e:	48 0e       	add	r4, r24
   1b270:	59 1e       	adc	r5, r25
   1b272:	6a 1e       	adc	r6, r26
   1b274:	7b 1e       	adc	r7, r27
                    printf("\tWrote: %8ld\r", bytes);
   1b276:	ed b7       	in	r30, 0x3d	; 61
   1b278:	fe b7       	in	r31, 0x3e	; 62
   1b27a:	44 82       	std	Z+4, r4	; 0x04
   1b27c:	55 82       	std	Z+5, r5	; 0x05
   1b27e:	66 82       	std	Z+6, r6	; 0x06
   1b280:	77 82       	std	Z+7, r7	; 0x07
   1b282:	ce 5c       	subi	r28, 0xCE	; 206
   1b284:	dd 4f       	sbci	r29, 0xFD	; 253
   1b286:	28 81       	ld	r18, Y
   1b288:	39 81       	ldd	r19, Y+1	; 0x01
   1b28a:	4a 81       	ldd	r20, Y+2	; 0x02
   1b28c:	c2 53       	subi	r28, 0x32	; 50
   1b28e:	d2 40       	sbci	r29, 0x02	; 2
   1b290:	21 83       	std	Z+1, r18	; 0x01
   1b292:	32 83       	std	Z+2, r19	; 0x02
   1b294:	43 83       	std	Z+3, r20	; 0x03
   1b296:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
                    wind = 0;
   1b29a:	90 e0       	ldi	r25, 0x00	; 0
   1b29c:	80 e0       	ldi	r24, 0x00	; 0
   1b29e:	84 cf       	rjmp	.-248    	; 0x1b1a8 <lif_extract_e010_as_ascii+0x33a>
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1b2a0:	0f 3f       	cpi	r16, 0xFF	; 255
   1b2a2:	11 05       	cpc	r17, r1
   1b2a4:	09 f0       	breq	.+2      	; 0x1b2a8 <lif_extract_e010_as_ascii+0x43a>
   1b2a6:	0c f4       	brge	.+2      	; 0x1b2aa <lif_extract_e010_as_ascii+0x43c>
   1b2a8:	e5 ce       	rjmp	.-566    	; 0x1b074 <lif_extract_e010_as_ascii+0x206>
   1b2aa:	08 c0       	rjmp	.+16     	; 0x1b2bc <lif_extract_e010_as_ascii+0x44e>
                len = buf[ind++] & 0xff;
                len |= ((buf[ind++] & 0xff) <<8); 
                // EOF ?
                if(len == 0)
                {
                    done = 1;
   1b2ac:	a1 e0       	ldi	r26, 0x01	; 1
   1b2ae:	b0 e0       	ldi	r27, 0x00	; 0
   1b2b0:	ce 5d       	subi	r28, 0xDE	; 222
   1b2b2:	dd 4f       	sbci	r29, 0xFD	; 253
   1b2b4:	b9 83       	std	Y+1, r27	; 0x01
   1b2b6:	a8 83       	st	Y, r26
   1b2b8:	c2 52       	subi	r28, 0x22	; 34
   1b2ba:	d2 40       	sbci	r29, 0x02	; 2

            }   // for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)

        }   // while(ind < LIF_SECTOR_SIZE && status)

        offset += (long) LIF_SECTOR_SIZE;
   1b2bc:	c2 5e       	subi	r28, 0xE2	; 226
   1b2be:	dd 4f       	sbci	r29, 0xFD	; 253
   1b2c0:	28 81       	ld	r18, Y
   1b2c2:	39 81       	ldd	r19, Y+1	; 0x01
   1b2c4:	4a 81       	ldd	r20, Y+2	; 0x02
   1b2c6:	5b 81       	ldd	r21, Y+3	; 0x03
   1b2c8:	ce 51       	subi	r28, 0x1E	; 30
   1b2ca:	d2 40       	sbci	r29, 0x02	; 2
   1b2cc:	3f 5f       	subi	r19, 0xFF	; 255
   1b2ce:	4f 4f       	sbci	r20, 0xFF	; 255
   1b2d0:	5f 4f       	sbci	r21, 0xFF	; 255
   1b2d2:	c2 5e       	subi	r28, 0xE2	; 226
   1b2d4:	dd 4f       	sbci	r29, 0xFD	; 253
   1b2d6:	28 83       	st	Y, r18
   1b2d8:	39 83       	std	Y+1, r19	; 0x01
   1b2da:	4a 83       	std	Y+2, r20	; 0x02
   1b2dc:	5b 83       	std	Y+3, r21	; 0x03
   1b2de:	ce 51       	subi	r28, 0x1E	; 30
   1b2e0:	d2 40       	sbci	r29, 0x02	; 2
   1b2e2:	97 ce       	rjmp	.-722    	; 0x1b012 <lif_extract_e010_as_ascii+0x1a4>
    {
        // LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
        if(size < LIF_SECTOR_SIZE)
        {
            status = 0;
   1b2e4:	e1 2c       	mov	r14, r1
   1b2e6:	f1 2c       	mov	r15, r1
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b2e8:	c6 01       	movw	r24, r12
   1b2ea:	0e 94 f8 c9 	call	0x193f0	; 0x193f0 <lif_close_volume>

    }   // while(offset <= end)

    lif_closedir(LIF);
    // Flush any remaining bytes
    if(wind)
   1b2ee:	21 14       	cp	r2, r1
   1b2f0:	31 04       	cpc	r3, r1
   1b2f2:	31 f1       	breq	.+76     	; 0x1b340 <lif_extract_e010_as_ascii+0x4d2>
    {
        size = fwrite(wbuf,1,wind,fo);
   1b2f4:	cc 5d       	subi	r28, 0xDC	; 220
   1b2f6:	dd 4f       	sbci	r29, 0xFD	; 253
   1b2f8:	28 81       	ld	r18, Y
   1b2fa:	39 81       	ldd	r19, Y+1	; 0x01
   1b2fc:	c4 52       	subi	r28, 0x24	; 36
   1b2fe:	d2 40       	sbci	r29, 0x02	; 2
   1b300:	a1 01       	movw	r20, r2
   1b302:	61 e0       	ldi	r22, 0x01	; 1
   1b304:	70 e0       	ldi	r23, 0x00	; 0
   1b306:	ce 01       	movw	r24, r28
   1b308:	0c 96       	adiw	r24, 0x0c	; 12
   1b30a:	0e 94 20 7d 	call	0xfa40	; 0xfa40 <fwrite>
   1b30e:	8c 01       	movw	r16, r24
        if(size < wind)
   1b310:	82 15       	cp	r24, r2
   1b312:	93 05       	cpc	r25, r3
   1b314:	64 f4       	brge	.+24     	; 0x1b32e <lif_extract_e010_as_ascii+0x4c0>
        {
            printf("lif_extract_e010_as_ascii: write error\n");
   1b316:	8a e7       	ldi	r24, 0x7A	; 122
   1b318:	93 e3       	ldi	r25, 0x33	; 51
   1b31a:	a0 e0       	ldi	r26, 0x00	; 0
   1b31c:	ed b7       	in	r30, 0x3d	; 61
   1b31e:	fe b7       	in	r31, 0x3e	; 62
   1b320:	81 83       	std	Z+1, r24	; 0x01
   1b322:	92 83       	std	Z+2, r25	; 0x02
   1b324:	a3 83       	std	Z+3, r26	; 0x03
   1b326:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
            status = 0;
   1b32a:	e1 2c       	mov	r14, r1
   1b32c:	f1 2c       	mov	r15, r1
        }
        bytes += size;
   1b32e:	c8 01       	movw	r24, r16
   1b330:	01 2e       	mov	r0, r17
   1b332:	00 0c       	add	r0, r0
   1b334:	aa 0b       	sbc	r26, r26
   1b336:	bb 0b       	sbc	r27, r27
   1b338:	48 0e       	add	r4, r24
   1b33a:	59 1e       	adc	r5, r25
   1b33c:	6a 1e       	adc	r6, r26
   1b33e:	7b 1e       	adc	r7, r27
    }
    fclose(fo);
   1b340:	cc 5d       	subi	r28, 0xDC	; 220
   1b342:	dd 4f       	sbci	r29, 0xFD	; 253
   1b344:	88 81       	ld	r24, Y
   1b346:	99 81       	ldd	r25, Y+1	; 0x01
   1b348:	c4 52       	subi	r28, 0x24	; 36
   1b34a:	d2 40       	sbci	r29, 0x02	; 2
   1b34c:	0e 94 a2 7d 	call	0xfb44	; 0xfb44 <fclose>
    if(t)
   1b350:	c8 5d       	subi	r28, 0xD8	; 216
   1b352:	dd 4f       	sbci	r29, 0xFD	; 253
   1b354:	28 81       	ld	r18, Y
   1b356:	39 81       	ldd	r19, Y+1	; 0x01
   1b358:	4a 81       	ldd	r20, Y+2	; 0x02
   1b35a:	5b 81       	ldd	r21, Y+3	; 0x03
   1b35c:	c8 52       	subi	r28, 0x28	; 40
   1b35e:	d2 40       	sbci	r29, 0x02	; 2
   1b360:	21 15       	cp	r18, r1
   1b362:	31 05       	cpc	r19, r1
   1b364:	41 05       	cpc	r20, r1
   1b366:	51 05       	cpc	r21, r1
   1b368:	d9 f0       	breq	.+54     	; 0x1b3a0 <lif_extract_e010_as_ascii+0x532>
    {
        struct utimbuf times;
        times.modtime = t;
   1b36a:	c8 5e       	subi	r28, 0xE8	; 232
   1b36c:	dd 4f       	sbci	r29, 0xFD	; 253
   1b36e:	28 83       	st	Y, r18
   1b370:	39 83       	std	Y+1, r19	; 0x01
   1b372:	4a 83       	std	Y+2, r20	; 0x02
   1b374:	5b 83       	std	Y+3, r21	; 0x03
   1b376:	c8 51       	subi	r28, 0x18	; 24
   1b378:	d2 40       	sbci	r29, 0x02	; 2
        times.actime = t;
   1b37a:	cc 5e       	subi	r28, 0xEC	; 236
   1b37c:	dd 4f       	sbci	r29, 0xFD	; 253
   1b37e:	28 83       	st	Y, r18
   1b380:	39 83       	std	Y+1, r19	; 0x01
   1b382:	4a 83       	std	Y+2, r20	; 0x02
   1b384:	5b 83       	std	Y+3, r21	; 0x03
   1b386:	c4 51       	subi	r28, 0x14	; 20
   1b388:	d2 40       	sbci	r29, 0x02	; 2
        utime(username, (struct utimbuf *) &times);
   1b38a:	be 01       	movw	r22, r28
   1b38c:	6c 5e       	subi	r22, 0xEC	; 236
   1b38e:	7d 4f       	sbci	r23, 0xFD	; 253
   1b390:	ca 5d       	subi	r28, 0xDA	; 218
   1b392:	dd 4f       	sbci	r29, 0xFD	; 253
   1b394:	88 81       	ld	r24, Y
   1b396:	99 81       	ldd	r25, Y+1	; 0x01
   1b398:	c6 52       	subi	r28, 0x26	; 38
   1b39a:	d2 40       	sbci	r29, 0x02	; 2
   1b39c:	0e 94 df 7a 	call	0xf5be	; 0xf5be <utime>
    }
    sync();
   1b3a0:	0e 94 9d 7c 	call	0xf93a	; 0xf93a <sync>
    printf("\tWrote: %8ld\n", bytes);
   1b3a4:	ed b7       	in	r30, 0x3d	; 61
   1b3a6:	fe b7       	in	r31, 0x3e	; 62
   1b3a8:	44 82       	std	Z+4, r4	; 0x04
   1b3aa:	55 82       	std	Z+5, r5	; 0x05
   1b3ac:	66 82       	std	Z+6, r6	; 0x06
   1b3ae:	77 82       	std	Z+7, r7	; 0x07
   1b3b0:	8c e6       	ldi	r24, 0x6C	; 108
   1b3b2:	93 e3       	ldi	r25, 0x33	; 51
   1b3b4:	a0 e0       	ldi	r26, 0x00	; 0
   1b3b6:	81 83       	std	Z+1, r24	; 0x01
   1b3b8:	92 83       	std	Z+2, r25	; 0x02
   1b3ba:	a3 83       	std	Z+3, r26	; 0x03
   1b3bc:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    return(status);
   1b3c0:	c7 01       	movw	r24, r14
}
   1b3c2:	c9 5c       	subi	r28, 0xC9	; 201
   1b3c4:	dd 4f       	sbci	r29, 0xFD	; 253
   1b3c6:	e2 e1       	ldi	r30, 0x12	; 18
   1b3c8:	0c 94 e4 e3 	jmp	0x1c7c8	; 0x1c7c8 <__epilogue_restores__>

0001b3cc <lif_extract_lif_as_lif>:
/// @param[in] lifname:  name of file in LIF image we want to extract
/// @param[in] username: new LIF file to create
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_lif_as_lif(char *lifimagename, char *lifname, char *username)
{
   1b3cc:	a4 e1       	ldi	r26, 0x14	; 20
   1b3ce:	b1 e0       	ldi	r27, 0x01	; 1
   1b3d0:	ec ee       	ldi	r30, 0xEC	; 236
   1b3d2:	f9 ed       	ldi	r31, 0xD9	; 217
   1b3d4:	0c 94 c8 e3 	jmp	0x1c790	; 0x1c790 <__prologue_saves__>
   1b3d8:	7c 01       	movw	r14, r24
   1b3da:	8b 01       	movw	r16, r22
   1b3dc:	3a 01       	movw	r6, r20
    int i, size;
    int sectors;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    LIF = lif_open_volume(lifimagename,"r");
   1b3de:	62 e6       	ldi	r22, 0x62	; 98
   1b3e0:	72 e0       	ldi	r23, 0x02	; 2
   1b3e2:	0e 94 b3 d0 	call	0x1a166	; 0x1a166 <lif_open_volume>
   1b3e6:	4c 01       	movw	r8, r24
    if(LIF == NULL)
   1b3e8:	00 97       	sbiw	r24, 0x00	; 0
   1b3ea:	69 f4       	brne	.+26     	; 0x1b406 <lif_extract_lif_as_lif+0x3a>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1b3ec:	ed b7       	in	r30, 0x3d	; 61
   1b3ee:	fe b7       	in	r31, 0x3e	; 62
   1b3f0:	f5 82       	std	Z+5, r15	; 0x05
   1b3f2:	e4 82       	std	Z+4, r14	; 0x04
   1b3f4:	84 e5       	ldi	r24, 0x54	; 84
   1b3f6:	93 e3       	ldi	r25, 0x33	; 51
   1b3f8:	a0 e0       	ldi	r26, 0x00	; 0
   1b3fa:	81 83       	std	Z+1, r24	; 0x01
   1b3fc:	92 83       	std	Z+2, r25	; 0x02
   1b3fe:	a3 83       	std	Z+3, r26	; 0x03
   1b400:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   1b404:	13 c0       	rjmp	.+38     	; 0x1b42c <lif_extract_lif_as_lif+0x60>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1b406:	b8 01       	movw	r22, r16
   1b408:	7d d9       	rcall	.-3334   	; 0x1a704 <lif_find_file>
    if(index == -1)
   1b40a:	01 96       	adiw	r24, 0x01	; 1
   1b40c:	91 f4       	brne	.+36     	; 0x1b432 <lif_extract_lif_as_lif+0x66>
    {
        printf("File not found:%s\n", lifname);
   1b40e:	ed b7       	in	r30, 0x3d	; 61
   1b410:	fe b7       	in	r31, 0x3e	; 62
   1b412:	15 83       	std	Z+5, r17	; 0x05
   1b414:	04 83       	std	Z+4, r16	; 0x04
   1b416:	81 e4       	ldi	r24, 0x41	; 65
   1b418:	93 e3       	ldi	r25, 0x33	; 51
   1b41a:	a0 e0       	ldi	r26, 0x00	; 0
   1b41c:	81 83       	std	Z+1, r24	; 0x01
   1b41e:	92 83       	std	Z+2, r25	; 0x02
   1b420:	a3 83       	std	Z+3, r26	; 0x03
   1b422:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b426:	c4 01       	movw	r24, r8
   1b428:	0e 94 f8 c9 	call	0x193f0	; 0x193f0 <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1b42c:	00 e0       	ldi	r16, 0x00	; 0
   1b42e:	10 e0       	ldi	r17, 0x00	; 0
   1b430:	ff c0       	rjmp	.+510    	; 0x1b630 <lif_extract_lif_as_lif+0x264>
    }

    sectors = LIF->DIR.FileSectors;
   1b432:	94 01       	movw	r18, r8
   1b434:	20 5a       	subi	r18, 0xA0	; 160
   1b436:	3f 4f       	sbci	r19, 0xFF	; 255
   1b438:	c0 5f       	subi	r28, 0xF0	; 240
   1b43a:	de 4f       	sbci	r29, 0xFE	; 254
   1b43c:	39 83       	std	Y+1, r19	; 0x01
   1b43e:	28 83       	st	Y, r18
   1b440:	c0 51       	subi	r28, 0x10	; 16
   1b442:	d1 40       	sbci	r29, 0x01	; 1

    //Initialize the user file lif_t structure
    ULIF = lif_create_volume(username, "HFSLIF",1,1,sectors);
   1b444:	f9 01       	movw	r30, r18
   1b446:	a0 80       	ld	r10, Z
   1b448:	b1 80       	ldd	r11, Z+1	; 0x01
   1b44a:	0b 2c       	mov	r0, r11
   1b44c:	00 0c       	add	r0, r0
   1b44e:	cc 08       	sbc	r12, r12
   1b450:	dd 08       	sbc	r13, r13
   1b452:	e1 2c       	mov	r14, r1
   1b454:	f1 2c       	mov	r15, r1
   1b456:	87 01       	movw	r16, r14
   1b458:	e3 94       	inc	r14
   1b45a:	21 e0       	ldi	r18, 0x01	; 1
   1b45c:	30 e0       	ldi	r19, 0x00	; 0
   1b45e:	40 e0       	ldi	r20, 0x00	; 0
   1b460:	50 e0       	ldi	r21, 0x00	; 0
   1b462:	64 eb       	ldi	r22, 0xB4	; 180
   1b464:	75 e1       	ldi	r23, 0x15	; 21
   1b466:	c3 01       	movw	r24, r6
   1b468:	0e 94 69 cc 	call	0x198d2	; 0x198d2 <lif_create_volume>
   1b46c:	7c 01       	movw	r14, r24
    if(ULIF == NULL)
   1b46e:	89 2b       	or	r24, r25
   1b470:	d1 f2       	breq	.-76     	; 0x1b426 <lif_extract_lif_as_lif+0x5a>
    }

    // Only the start sector changes

    // Copy directory record
    ULIF->DIR = LIF->DIR;
   1b472:	81 e2       	ldi	r24, 0x21	; 33
   1b474:	f4 01       	movw	r30, r8
   1b476:	e1 5b       	subi	r30, 0xB1	; 177
   1b478:	ff 4f       	sbci	r31, 0xFF	; 255
   1b47a:	d7 01       	movw	r26, r14
   1b47c:	a1 5b       	subi	r26, 0xB1	; 177
   1b47e:	bf 4f       	sbci	r27, 0xFF	; 255
   1b480:	01 90       	ld	r0, Z+
   1b482:	0d 92       	st	X+, r0
   1b484:	8a 95       	dec	r24
   1b486:	e1 f7       	brne	.-8      	; 0x1b480 <lif_extract_lif_as_lif+0xb4>

    ULIF->DIR.FileStartSector = 2;
   1b488:	82 e0       	ldi	r24, 0x02	; 2
   1b48a:	90 e0       	ldi	r25, 0x00	; 0
   1b48c:	a0 e0       	ldi	r26, 0x00	; 0
   1b48e:	b0 e0       	ldi	r27, 0x00	; 0
   1b490:	f7 01       	movw	r30, r14
   1b492:	e4 5a       	subi	r30, 0xA4	; 164
   1b494:	ff 4f       	sbci	r31, 0xFF	; 255
   1b496:	80 83       	st	Z, r24
   1b498:	91 83       	std	Z+1, r25	; 0x01
   1b49a:	a2 83       	std	Z+2, r26	; 0x02
   1b49c:	b3 83       	std	Z+3, r27	; 0x03
    ULIF->filesectors = LIF->DIR.FileSectors;
   1b49e:	c0 5f       	subi	r28, 0xF0	; 240
   1b4a0:	de 4f       	sbci	r29, 0xFE	; 254
   1b4a2:	e8 81       	ld	r30, Y
   1b4a4:	f9 81       	ldd	r31, Y+1	; 0x01
   1b4a6:	c0 51       	subi	r28, 0x10	; 16
   1b4a8:	d1 40       	sbci	r29, 0x01	; 1
   1b4aa:	80 81       	ld	r24, Z
   1b4ac:	91 81       	ldd	r25, Z+1	; 0x01
   1b4ae:	a2 81       	ldd	r26, Z+2	; 0x02
   1b4b0:	b3 81       	ldd	r27, Z+3	; 0x03
   1b4b2:	f7 01       	movw	r30, r14
   1b4b4:	80 8b       	std	Z+16, r24	; 0x10
   1b4b6:	91 8b       	std	Z+17, r25	; 0x11
   1b4b8:	a2 8b       	std	Z+18, r26	; 0x12
   1b4ba:	b3 8b       	std	Z+19, r27	; 0x13

    if( !lif_writedirindex(ULIF,0))
   1b4bc:	60 e0       	ldi	r22, 0x00	; 0
   1b4be:	70 e0       	ldi	r23, 0x00	; 0
   1b4c0:	c7 01       	movw	r24, r14
   1b4c2:	0e 94 ed ca 	call	0x195da	; 0x195da <lif_writedirindex>
   1b4c6:	8c 01       	movw	r16, r24
   1b4c8:	89 2b       	or	r24, r25
   1b4ca:	41 f0       	breq	.+16     	; 0x1b4dc <lif_extract_lif_as_lif+0x110>
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
    }
    if( !lif_writedirEOF(ULIF,1) )
   1b4cc:	61 e0       	ldi	r22, 0x01	; 1
   1b4ce:	70 e0       	ldi	r23, 0x00	; 0
   1b4d0:	c7 01       	movw	r24, r14
   1b4d2:	0e 94 49 cb 	call	0x19692	; 0x19692 <lif_writedirEOF>
   1b4d6:	8c 01       	movw	r16, r24
   1b4d8:	89 2b       	or	r24, r25
   1b4da:	39 f4       	brne	.+14     	; 0x1b4ea <lif_extract_lif_as_lif+0x11e>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b4dc:	c4 01       	movw	r24, r8
   1b4de:	0e 94 f8 c9 	call	0x193f0	; 0x193f0 <lif_close_volume>
   1b4e2:	c7 01       	movw	r24, r14
   1b4e4:	0e 94 f8 c9 	call	0x193f0	; 0x193f0 <lif_close_volume>
    }
    if( !lif_writedirEOF(ULIF,1) )
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
   1b4e8:	a3 c0       	rjmp	.+326    	; 0x1b630 <lif_extract_lif_as_lif+0x264>
    }

    uoffset =  ULIF->filestart * (long) LIF_SECTOR_SIZE;
   1b4ea:	f7 01       	movw	r30, r14
   1b4ec:	44 84       	ldd	r4, Z+12	; 0x0c
   1b4ee:	55 84       	ldd	r5, Z+13	; 0x0d
   1b4f0:	66 84       	ldd	r6, Z+14	; 0x0e
   1b4f2:	77 84       	ldd	r7, Z+15	; 0x0f
   1b4f4:	76 2c       	mov	r7, r6
   1b4f6:	65 2c       	mov	r6, r5
   1b4f8:	54 2c       	mov	r5, r4
   1b4fa:	44 24       	eor	r4, r4

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b4fc:	f4 01       	movw	r30, r8
   1b4fe:	e4 5a       	subi	r30, 0xA4	; 164
   1b500:	ff 4f       	sbci	r31, 0xFF	; 255
   1b502:	80 81       	ld	r24, Z
   1b504:	91 81       	ldd	r25, Z+1	; 0x01
   1b506:	a2 81       	ldd	r26, Z+2	; 0x02
   1b508:	b3 81       	ldd	r27, Z+3	; 0x03
   1b50a:	22 27       	eor	r18, r18
   1b50c:	38 2f       	mov	r19, r24
   1b50e:	49 2f       	mov	r20, r25
   1b510:	5a 2f       	mov	r21, r26
   1b512:	c4 5f       	subi	r28, 0xF4	; 244
   1b514:	de 4f       	sbci	r29, 0xFE	; 254
   1b516:	28 83       	st	Y, r18
   1b518:	39 83       	std	Y+1, r19	; 0x01
   1b51a:	4a 83       	std	Y+2, r20	; 0x02
   1b51c:	5b 83       	std	Y+3, r21	; 0x03
   1b51e:	cc 50       	subi	r28, 0x0C	; 12
   1b520:	d1 40       	sbci	r29, 0x01	; 1

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b522:	21 2c       	mov	r2, r1
   1b524:	31 2c       	mov	r3, r1
            return(0);
        }
        bytes += size;
        offset += size;
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
   1b526:	83 e3       	ldi	r24, 0x33	; 51
   1b528:	93 e3       	ldi	r25, 0x33	; 51
   1b52a:	9c 01       	movw	r18, r24
   1b52c:	40 e0       	ldi	r20, 0x00	; 0
   1b52e:	ce 5e       	subi	r28, 0xEE	; 238
   1b530:	de 4f       	sbci	r29, 0xFE	; 254
   1b532:	28 83       	st	Y, r18
   1b534:	39 83       	std	Y+1, r19	; 0x01
   1b536:	4a 83       	std	Y+2, r20	; 0x02
   1b538:	c2 51       	subi	r28, 0x12	; 18
   1b53a:	d1 40       	sbci	r29, 0x01	; 1

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b53c:	c0 5f       	subi	r28, 0xF0	; 240
   1b53e:	de 4f       	sbci	r29, 0xFE	; 254
   1b540:	e8 81       	ld	r30, Y
   1b542:	f9 81       	ldd	r31, Y+1	; 0x01
   1b544:	c0 51       	subi	r28, 0x10	; 16
   1b546:	d1 40       	sbci	r29, 0x01	; 1
   1b548:	80 81       	ld	r24, Z
   1b54a:	91 81       	ldd	r25, Z+1	; 0x01
   1b54c:	28 16       	cp	r2, r24
   1b54e:	39 06       	cpc	r3, r25
   1b550:	0c f0       	brlt	.+2      	; 0x1b554 <lif_extract_lif_as_lif+0x188>
   1b552:	58 c0       	rjmp	.+176    	; 0x1b604 <lif_extract_lif_as_lif+0x238>
    {
        size = lif_read(LIF, buf, offset,LIF_SECTOR_SIZE);
   1b554:	00 e0       	ldi	r16, 0x00	; 0
   1b556:	11 e0       	ldi	r17, 0x01	; 1
   1b558:	c4 5f       	subi	r28, 0xF4	; 244
   1b55a:	de 4f       	sbci	r29, 0xFE	; 254
   1b55c:	28 81       	ld	r18, Y
   1b55e:	39 81       	ldd	r19, Y+1	; 0x01
   1b560:	4a 81       	ldd	r20, Y+2	; 0x02
   1b562:	5b 81       	ldd	r21, Y+3	; 0x03
   1b564:	cc 50       	subi	r28, 0x0C	; 12
   1b566:	d1 40       	sbci	r29, 0x01	; 1
   1b568:	be 01       	movw	r22, r28
   1b56a:	68 5f       	subi	r22, 0xF8	; 248
   1b56c:	7f 4f       	sbci	r23, 0xFF	; 255
   1b56e:	c4 01       	movw	r24, r8
   1b570:	0e 94 2c c1 	call	0x18258	; 0x18258 <lif_read>
   1b574:	5b 01       	movw	r10, r22
   1b576:	6c 01       	movw	r12, r24
        if(size < LIF_SECTOR_SIZE)
   1b578:	6f 3f       	cpi	r22, 0xFF	; 255
   1b57a:	71 05       	cpc	r23, r1
   1b57c:	09 f0       	breq	.+2      	; 0x1b580 <lif_extract_lif_as_lif+0x1b4>
   1b57e:	2c f4       	brge	.+10     	; 0x1b58a <lif_extract_lif_as_lif+0x1be>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b580:	c4 01       	movw	r24, r8
   1b582:	0e 94 f8 c9 	call	0x193f0	; 0x193f0 <lif_close_volume>
   1b586:	c7 01       	movw	r24, r14
   1b588:	4f cf       	rjmp	.-354    	; 0x1b428 <lif_extract_lif_as_lif+0x5c>
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }

        lif_write(ULIF,buf,uoffset,LIF_SECTOR_SIZE);
   1b58a:	00 e0       	ldi	r16, 0x00	; 0
   1b58c:	11 e0       	ldi	r17, 0x01	; 1
   1b58e:	a3 01       	movw	r20, r6
   1b590:	92 01       	movw	r18, r4
   1b592:	be 01       	movw	r22, r28
   1b594:	68 5f       	subi	r22, 0xF8	; 248
   1b596:	7f 4f       	sbci	r23, 0xFF	; 255
   1b598:	c7 01       	movw	r24, r14
   1b59a:	0e 94 7d c1 	call	0x182fa	; 0x182fa <lif_write>
        {
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }
        bytes += size;
   1b59e:	c5 01       	movw	r24, r10
   1b5a0:	0b 2c       	mov	r0, r11
   1b5a2:	00 0c       	add	r0, r0
   1b5a4:	aa 0b       	sbc	r26, r26
   1b5a6:	bb 0b       	sbc	r27, r27
   1b5a8:	48 0e       	add	r4, r24
   1b5aa:	59 1e       	adc	r5, r25
   1b5ac:	6a 1e       	adc	r6, r26
   1b5ae:	7b 1e       	adc	r7, r27
        offset += size;
   1b5b0:	c4 5f       	subi	r28, 0xF4	; 244
   1b5b2:	de 4f       	sbci	r29, 0xFE	; 254
   1b5b4:	28 81       	ld	r18, Y
   1b5b6:	39 81       	ldd	r19, Y+1	; 0x01
   1b5b8:	4a 81       	ldd	r20, Y+2	; 0x02
   1b5ba:	5b 81       	ldd	r21, Y+3	; 0x03
   1b5bc:	cc 50       	subi	r28, 0x0C	; 12
   1b5be:	d1 40       	sbci	r29, 0x01	; 1
   1b5c0:	28 0f       	add	r18, r24
   1b5c2:	39 1f       	adc	r19, r25
   1b5c4:	4a 1f       	adc	r20, r26
   1b5c6:	5b 1f       	adc	r21, r27
   1b5c8:	c4 5f       	subi	r28, 0xF4	; 244
   1b5ca:	de 4f       	sbci	r29, 0xFE	; 254
   1b5cc:	28 83       	st	Y, r18
   1b5ce:	39 83       	std	Y+1, r19	; 0x01
   1b5d0:	4a 83       	std	Y+2, r20	; 0x02
   1b5d2:	5b 83       	std	Y+3, r21	; 0x03
   1b5d4:	cc 50       	subi	r28, 0x0C	; 12
   1b5d6:	d1 40       	sbci	r29, 0x01	; 1
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
   1b5d8:	ed b7       	in	r30, 0x3d	; 61
   1b5da:	fe b7       	in	r31, 0x3e	; 62
   1b5dc:	44 82       	std	Z+4, r4	; 0x04
   1b5de:	55 82       	std	Z+5, r5	; 0x05
   1b5e0:	66 82       	std	Z+6, r6	; 0x06
   1b5e2:	77 82       	std	Z+7, r7	; 0x07
   1b5e4:	ce 5e       	subi	r28, 0xEE	; 238
   1b5e6:	de 4f       	sbci	r29, 0xFE	; 254
   1b5e8:	28 81       	ld	r18, Y
   1b5ea:	39 81       	ldd	r19, Y+1	; 0x01
   1b5ec:	4a 81       	ldd	r20, Y+2	; 0x02
   1b5ee:	c2 51       	subi	r28, 0x12	; 18
   1b5f0:	d1 40       	sbci	r29, 0x01	; 1
   1b5f2:	21 83       	std	Z+1, r18	; 0x01
   1b5f4:	32 83       	std	Z+2, r19	; 0x02
   1b5f6:	43 83       	std	Z+3, r20	; 0x03
   1b5f8:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b5fc:	ff ef       	ldi	r31, 0xFF	; 255
   1b5fe:	2f 1a       	sub	r2, r31
   1b600:	3f 0a       	sbc	r3, r31
   1b602:	9c cf       	rjmp	.-200    	; 0x1b53c <lif_extract_lif_as_lif+0x170>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b604:	c4 01       	movw	r24, r8
   1b606:	0e 94 f8 c9 	call	0x193f0	; 0x193f0 <lif_close_volume>
   1b60a:	c7 01       	movw	r24, r14
   1b60c:	0e 94 f8 c9 	call	0x193f0	; 0x193f0 <lif_close_volume>
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
    }
    lif_closedir(LIF);
    lif_closedir(ULIF);
    printf("\tWrote: %8ld\n", bytes);
   1b610:	ed b7       	in	r30, 0x3d	; 61
   1b612:	fe b7       	in	r31, 0x3e	; 62
   1b614:	44 82       	std	Z+4, r4	; 0x04
   1b616:	55 82       	std	Z+5, r5	; 0x05
   1b618:	66 82       	std	Z+6, r6	; 0x06
   1b61a:	77 82       	std	Z+7, r7	; 0x07
   1b61c:	85 e2       	ldi	r24, 0x25	; 37
   1b61e:	93 e3       	ldi	r25, 0x33	; 51
   1b620:	a0 e0       	ldi	r26, 0x00	; 0
   1b622:	81 83       	std	Z+1, r24	; 0x01
   1b624:	92 83       	std	Z+2, r25	; 0x02
   1b626:	a3 83       	std	Z+3, r26	; 0x03
   1b628:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    return(1);
   1b62c:	01 e0       	ldi	r16, 0x01	; 1
   1b62e:	10 e0       	ldi	r17, 0x00	; 0
}
   1b630:	c8 01       	movw	r24, r16
   1b632:	cc 5e       	subi	r28, 0xEC	; 236
   1b634:	de 4f       	sbci	r29, 0xFE	; 254
   1b636:	e2 e1       	ldi	r30, 0x12	; 18
   1b638:	0c 94 e4 e3 	jmp	0x1c7c8	; 0x1c7c8 <__epilogue_restores__>

0001b63c <lif_add_lif_file>:
/// @param[in] lifname: LIF file name to copy file to
/// @param[in] userfile: LIF mage name copy file from 
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_lif_file(char *lifimagename, char *lifname, char *userfile)
{
   1b63c:	2f 92       	push	r2
   1b63e:	3f 92       	push	r3
   1b640:	4f 92       	push	r4
   1b642:	5f 92       	push	r5
   1b644:	6f 92       	push	r6
   1b646:	8f 92       	push	r8
   1b648:	9f 92       	push	r9
   1b64a:	af 92       	push	r10
   1b64c:	bf 92       	push	r11
   1b64e:	cf 92       	push	r12
   1b650:	df 92       	push	r13
   1b652:	ef 92       	push	r14
   1b654:	ff 92       	push	r15
   1b656:	0f 93       	push	r16
   1b658:	1f 93       	push	r17
   1b65a:	cf 93       	push	r28
   1b65c:	df 93       	push	r29
   1b65e:	cd b7       	in	r28, 0x3d	; 61
   1b660:	de b7       	in	r29, 0x3e	; 62
   1b662:	cd 51       	subi	r28, 0x1D	; 29
   1b664:	d1 40       	sbci	r29, 0x01	; 1
   1b666:	0f b6       	in	r0, 0x3f	; 63
   1b668:	f8 94       	cli
   1b66a:	de bf       	out	0x3e, r29	; 62
   1b66c:	0f be       	out	0x3f, r0	; 63
   1b66e:	cd bf       	out	0x3d, r28	; 61
   1b670:	5c 01       	movw	r10, r24
   1b672:	7b 01       	movw	r14, r22
   1b674:	4a 01       	movw	r8, r20
    long offset, uoffset, start, bytes;
    int i, size;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    if(!*lifimagename)
   1b676:	dc 01       	movw	r26, r24
   1b678:	8c 91       	ld	r24, X
   1b67a:	81 11       	cpse	r24, r1
   1b67c:	03 c0       	rjmp	.+6      	; 0x1b684 <lif_add_lif_file+0x48>
    {
        printf("lif_add: lifimagename is empty\n");
   1b67e:	85 e0       	ldi	r24, 0x05	; 5
   1b680:	93 e3       	ldi	r25, 0x33	; 51
   1b682:	06 c0       	rjmp	.+12     	; 0x1b690 <lif_add_lif_file+0x54>
        return(-1);
    }
    if(!*lifname)
   1b684:	db 01       	movw	r26, r22
   1b686:	8c 91       	ld	r24, X
   1b688:	81 11       	cpse	r24, r1
   1b68a:	0b c0       	rjmp	.+22     	; 0x1b6a2 <lif_add_lif_file+0x66>
    {
        printf("lif_add: lifname is empty\n");
   1b68c:	8a ee       	ldi	r24, 0xEA	; 234
   1b68e:	92 e3       	ldi	r25, 0x32	; 50
   1b690:	a0 e0       	ldi	r26, 0x00	; 0
   1b692:	ed b7       	in	r30, 0x3d	; 61
   1b694:	fe b7       	in	r31, 0x3e	; 62
   1b696:	81 83       	std	Z+1, r24	; 0x01
   1b698:	92 83       	std	Z+2, r25	; 0x02
   1b69a:	a3 83       	std	Z+3, r26	; 0x03
   1b69c:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   1b6a0:	25 c1       	rjmp	.+586    	; 0x1b8ec <lif_add_lif_file+0x2b0>
        return(-1);
    }
    if(!*userfile)
   1b6a2:	da 01       	movw	r26, r20
   1b6a4:	8c 91       	ld	r24, X
   1b6a6:	81 11       	cpse	r24, r1
   1b6a8:	03 c0       	rjmp	.+6      	; 0x1b6b0 <lif_add_lif_file+0x74>
    {
        printf("lif_add: userfile is empty\n");
   1b6aa:	8e ec       	ldi	r24, 0xCE	; 206
   1b6ac:	92 e3       	ldi	r25, 0x32	; 50
   1b6ae:	f0 cf       	rjmp	.-32     	; 0x1b690 <lif_add_lif_file+0x54>
        return(-1);
    }

    if(debuglevel & 0x400)
   1b6b0:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1b6b4:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1b6b8:	92 ff       	sbrs	r25, 2
   1b6ba:	10 c0       	rjmp	.+32     	; 0x1b6dc <lif_add_lif_file+0xa0>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n", 
   1b6bc:	ed b7       	in	r30, 0x3d	; 61
   1b6be:	fe b7       	in	r31, 0x3e	; 62
   1b6c0:	51 87       	std	Z+9, r21	; 0x09
   1b6c2:	40 87       	std	Z+8, r20	; 0x08
   1b6c4:	77 83       	std	Z+7, r23	; 0x07
   1b6c6:	66 83       	std	Z+6, r22	; 0x06
   1b6c8:	b5 82       	std	Z+5, r11	; 0x05
   1b6ca:	a4 82       	std	Z+4, r10	; 0x04
   1b6cc:	8f e9       	ldi	r24, 0x9F	; 159
   1b6ce:	92 e3       	ldi	r25, 0x32	; 50
   1b6d0:	a0 e0       	ldi	r26, 0x00	; 0
   1b6d2:	81 83       	std	Z+1, r24	; 0x01
   1b6d4:	92 83       	std	Z+2, r25	; 0x02
   1b6d6:	a3 83       	std	Z+3, r26	; 0x03
   1b6d8:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
            lifimagename, lifname, userfile);

    // open  userfile as LIF image
    ULIF = lif_open_volume(userfile,"rb+");
   1b6dc:	66 e2       	ldi	r22, 0x26	; 38
   1b6de:	78 e0       	ldi	r23, 0x08	; 8
   1b6e0:	c4 01       	movw	r24, r8
   1b6e2:	0e 94 b3 d0 	call	0x1a166	; 0x1a166 <lif_open_volume>
   1b6e6:	6c 01       	movw	r12, r24
    if(ULIF == NULL)
   1b6e8:	00 97       	sbiw	r24, 0x00	; 0
   1b6ea:	09 f4       	brne	.+2      	; 0x1b6ee <lif_add_lif_file+0xb2>
   1b6ec:	ff c0       	rjmp	.+510    	; 0x1b8ec <lif_add_lif_file+0x2b0>
        return(-1); 

    // find lif file in user image
    index = lif_find_file(ULIF, lifname);
   1b6ee:	b7 01       	movw	r22, r14
   1b6f0:	09 d8       	rcall	.-4078   	; 0x1a704 <lif_find_file>
    if(index == -1)
   1b6f2:	01 96       	adiw	r24, 0x01	; 1
   1b6f4:	a1 f4       	brne	.+40     	; 0x1b71e <lif_add_lif_file+0xe2>
    {
        printf("File not found:%s\n", lifname);
   1b6f6:	ed b7       	in	r30, 0x3d	; 61
   1b6f8:	fe b7       	in	r31, 0x3e	; 62
   1b6fa:	f5 82       	std	Z+5, r15	; 0x05
   1b6fc:	e4 82       	std	Z+4, r14	; 0x04
   1b6fe:	8c e8       	ldi	r24, 0x8C	; 140
   1b700:	92 e3       	ldi	r25, 0x32	; 50
   1b702:	a0 e0       	ldi	r26, 0x00	; 0
   1b704:	81 83       	std	Z+1, r24	; 0x01
   1b706:	92 83       	std	Z+2, r25	; 0x02
   1b708:	a3 83       	std	Z+3, r26	; 0x03
   1b70a:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b70e:	c6 01       	movw	r24, r12
   1b710:	0e 94 f8 c9 	call	0x193f0	; 0x193f0 <lif_close_volume>
    index = lif_find_file(ULIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(ULIF);
        return(0);
   1b714:	60 e0       	ldi	r22, 0x00	; 0
   1b716:	70 e0       	ldi	r23, 0x00	; 0
   1b718:	80 e0       	ldi	r24, 0x00	; 0
   1b71a:	90 e0       	ldi	r25, 0x00	; 0
   1b71c:	ff c0       	rjmp	.+510    	; 0x1b91c <lif_add_lif_file+0x2e0>
    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1b71e:	66 e2       	ldi	r22, 0x26	; 38
   1b720:	78 e0       	ldi	r23, 0x08	; 8
   1b722:	c5 01       	movw	r24, r10
   1b724:	0e 94 b3 d0 	call	0x1a166	; 0x1a166 <lif_open_volume>
   1b728:	7c 01       	movw	r14, r24
    if(LIF == NULL)
   1b72a:	00 97       	sbiw	r24, 0x00	; 0
   1b72c:	09 f4       	brne	.+2      	; 0x1b730 <lif_add_lif_file+0xf4>
   1b72e:	de c0       	rjmp	.+444    	; 0x1b8ec <lif_add_lif_file+0x2b0>
        return(-1); 

    // Now find a new free record that is big enough
    index = lif_newdir(LIF, ULIF->DIR.FileSectors);
   1b730:	f6 01       	movw	r30, r12
   1b732:	e0 5a       	subi	r30, 0xA0	; 160
   1b734:	ff 4f       	sbci	r31, 0xFF	; 255
   1b736:	40 81       	ld	r20, Z
   1b738:	51 81       	ldd	r21, Z+1	; 0x01
   1b73a:	62 81       	ldd	r22, Z+2	; 0x02
   1b73c:	73 81       	ldd	r23, Z+3	; 0x03
   1b73e:	0e 94 53 cf 	call	0x19ea6	; 0x19ea6 <lif_newdir>
   1b742:	ca 5e       	subi	r28, 0xEA	; 234
   1b744:	de 4f       	sbci	r29, 0xFE	; 254
   1b746:	99 83       	std	Y+1, r25	; 0x01
   1b748:	88 83       	st	Y, r24
   1b74a:	c6 51       	subi	r28, 0x16	; 22
   1b74c:	d1 40       	sbci	r29, 0x01	; 1
    if(index == -1)
   1b74e:	01 96       	adiw	r24, 0x01	; 1
   1b750:	79 f4       	brne	.+30     	; 0x1b770 <lif_add_lif_file+0x134>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n", 
   1b752:	ed b7       	in	r30, 0x3d	; 61
   1b754:	fe b7       	in	r31, 0x3e	; 62
   1b756:	97 82       	std	Z+7, r9	; 0x07
   1b758:	86 82       	std	Z+6, r8	; 0x06
   1b75a:	b5 82       	std	Z+5, r11	; 0x05
   1b75c:	a4 82       	std	Z+4, r10	; 0x04
   1b75e:	8c e5       	ldi	r24, 0x5C	; 92
   1b760:	92 e3       	ldi	r25, 0x32	; 50
   1b762:	a0 e0       	ldi	r26, 0x00	; 0
   1b764:	81 83       	std	Z+1, r24	; 0x01
   1b766:	92 83       	std	Z+2, r25	; 0x02
   1b768:	a3 83       	std	Z+3, r26	; 0x03
   1b76a:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   1b76e:	a8 c0       	rjmp	.+336    	; 0x1b8c0 <lif_add_lif_file+0x284>
            lif_closedir(ULIF);
        return(-1);
    }

    // Save start sector
    start = LIF->DIR.FileStartSector;
   1b770:	c7 01       	movw	r24, r14
   1b772:	84 5a       	subi	r24, 0xA4	; 164
   1b774:	9f 4f       	sbci	r25, 0xFF	; 255
   1b776:	dc 01       	movw	r26, r24
   1b778:	4d 91       	ld	r20, X+
   1b77a:	5d 91       	ld	r21, X+
   1b77c:	6d 91       	ld	r22, X+
   1b77e:	7c 91       	ld	r23, X
   1b780:	13 97       	sbiw	r26, 0x03	; 3

    // Copy user image directory record to master image directory record
    LIF->DIR = ULIF->DIR;
   1b782:	21 e2       	ldi	r18, 0x21	; 33
   1b784:	f6 01       	movw	r30, r12
   1b786:	e1 5b       	subi	r30, 0xB1	; 177
   1b788:	ff 4f       	sbci	r31, 0xFF	; 255
   1b78a:	1d 97       	sbiw	r26, 0x0d	; 13
   1b78c:	01 90       	ld	r0, Z+
   1b78e:	0d 92       	st	X+, r0
   1b790:	2a 95       	dec	r18
   1b792:	e1 f7       	brne	.-8      	; 0x1b78c <lif_add_lif_file+0x150>

    // Restore FileStartSector
    LIF->DIR.FileStartSector = start;
   1b794:	fc 01       	movw	r30, r24
   1b796:	40 83       	st	Z, r20
   1b798:	51 83       	std	Z+1, r21	; 0x01
   1b79a:	62 83       	std	Z+2, r22	; 0x02
   1b79c:	73 83       	std	Z+3, r23	; 0x03

    // Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b79e:	b6 2f       	mov	r27, r22
   1b7a0:	a5 2f       	mov	r26, r21
   1b7a2:	94 2f       	mov	r25, r20
   1b7a4:	88 27       	eor	r24, r24
   1b7a6:	c2 5f       	subi	r28, 0xF2	; 242
   1b7a8:	de 4f       	sbci	r29, 0xFE	; 254
   1b7aa:	88 83       	st	Y, r24
   1b7ac:	99 83       	std	Y+1, r25	; 0x01
   1b7ae:	aa 83       	std	Y+2, r26	; 0x02
   1b7b0:	bb 83       	std	Y+3, r27	; 0x03
   1b7b2:	ce 50       	subi	r28, 0x0E	; 14
   1b7b4:	d1 40       	sbci	r29, 0x01	; 1
    // User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b7b6:	f6 01       	movw	r30, r12
   1b7b8:	e4 5a       	subi	r30, 0xA4	; 164
   1b7ba:	ff 4f       	sbci	r31, 0xFF	; 255
   1b7bc:	80 81       	ld	r24, Z
   1b7be:	91 81       	ldd	r25, Z+1	; 0x01
   1b7c0:	a2 81       	ldd	r26, Z+2	; 0x02
   1b7c2:	b3 81       	ldd	r27, Z+3	; 0x03
   1b7c4:	22 27       	eor	r18, r18
   1b7c6:	38 2f       	mov	r19, r24
   1b7c8:	49 2f       	mov	r20, r25
   1b7ca:	5a 2f       	mov	r21, r26
   1b7cc:	ce 5e       	subi	r28, 0xEE	; 238
   1b7ce:	de 4f       	sbci	r29, 0xFE	; 254
   1b7d0:	28 83       	st	Y, r18
   1b7d2:	39 83       	std	Y+1, r19	; 0x01
   1b7d4:	4a 83       	std	Y+2, r20	; 0x02
   1b7d6:	5b 83       	std	Y+3, r21	; 0x03
   1b7d8:	c2 51       	subi	r28, 0x12	; 18
   1b7da:	d1 40       	sbci	r29, 0x01	; 1
    bytes = 0;
    // Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b7dc:	21 2c       	mov	r2, r1
   1b7de:	31 2c       	mov	r3, r1

    // Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    // User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
   1b7e0:	81 2c       	mov	r8, r1
   1b7e2:	91 2c       	mov	r9, r1
   1b7e4:	54 01       	movw	r10, r8
    // Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b7e6:	a7 01       	movw	r20, r14
   1b7e8:	40 5a       	subi	r20, 0xA0	; 160
   1b7ea:	5f 4f       	sbci	r21, 0xFF	; 255
   1b7ec:	c4 5e       	subi	r28, 0xE4	; 228
   1b7ee:	de 4f       	sbci	r29, 0xFE	; 254
   1b7f0:	59 83       	std	Y+1, r21	; 0x01
   1b7f2:	48 83       	st	Y, r20
   1b7f4:	cc 51       	subi	r28, 0x1C	; 28
   1b7f6:	d1 40       	sbci	r29, 0x01	; 1
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
        printf("\tWrote: %8ld\r", bytes);
   1b7f8:	8e e4       	ldi	r24, 0x4E	; 78
   1b7fa:	92 e3       	ldi	r25, 0x32	; 50
   1b7fc:	2c 01       	movw	r4, r24
   1b7fe:	61 2c       	mov	r6, r1
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    // User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
    // Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b800:	27 c0       	rjmp	.+78     	; 0x1b850 <lif_add_lif_file+0x214>
            lif_closedir(ULIF);
            return(-1);
        }

        // Write
        size = lif_write(LIF, buf, offset, LIF_SECTOR_SIZE);
   1b802:	00 e0       	ldi	r16, 0x00	; 0
   1b804:	11 e0       	ldi	r17, 0x01	; 1
   1b806:	c8 5e       	subi	r28, 0xE8	; 232
   1b808:	de 4f       	sbci	r29, 0xFE	; 254
   1b80a:	28 81       	ld	r18, Y
   1b80c:	39 81       	ldd	r19, Y+1	; 0x01
   1b80e:	4a 81       	ldd	r20, Y+2	; 0x02
   1b810:	5b 81       	ldd	r21, Y+3	; 0x03
   1b812:	c8 51       	subi	r28, 0x18	; 24
   1b814:	d1 40       	sbci	r29, 0x01	; 1
   1b816:	be 01       	movw	r22, r28
   1b818:	66 5f       	subi	r22, 0xF6	; 246
   1b81a:	7f 4f       	sbci	r23, 0xFF	; 255
   1b81c:	c7 01       	movw	r24, r14
   1b81e:	0e 94 7d c1 	call	0x182fa	; 0x182fa <lif_write>
        if(size < LIF_SECTOR_SIZE)
   1b822:	8f 3f       	cpi	r24, 0xFF	; 255
   1b824:	91 05       	cpc	r25, r1
   1b826:	09 f0       	breq	.+2      	; 0x1b82a <lif_add_lif_file+0x1ee>
   1b828:	0c f4       	brge	.+2      	; 0x1b82c <lif_add_lif_file+0x1f0>
   1b82a:	4a c0       	rjmp	.+148    	; 0x1b8c0 <lif_add_lif_file+0x284>
            lif_closedir(ULIF);
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
   1b82c:	5f ef       	ldi	r21, 0xFF	; 255
   1b82e:	95 1a       	sub	r9, r21
   1b830:	a5 0a       	sbc	r10, r21
   1b832:	b5 0a       	sbc	r11, r21
        printf("\tWrote: %8ld\r", bytes);
   1b834:	ed b7       	in	r30, 0x3d	; 61
   1b836:	fe b7       	in	r31, 0x3e	; 62
   1b838:	84 82       	std	Z+4, r8	; 0x04
   1b83a:	95 82       	std	Z+5, r9	; 0x05
   1b83c:	a6 82       	std	Z+6, r10	; 0x06
   1b83e:	b7 82       	std	Z+7, r11	; 0x07
   1b840:	41 82       	std	Z+1, r4	; 0x01
   1b842:	52 82       	std	Z+2, r5	; 0x02
   1b844:	63 82       	std	Z+3, r6	; 0x03
   1b846:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    // User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
    // Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b84a:	ff ef       	ldi	r31, 0xFF	; 255
   1b84c:	2f 1a       	sub	r2, r31
   1b84e:	3f 0a       	sbc	r3, r31
   1b850:	ce 5e       	subi	r28, 0xEE	; 238
   1b852:	de 4f       	sbci	r29, 0xFE	; 254
   1b854:	28 81       	ld	r18, Y
   1b856:	39 81       	ldd	r19, Y+1	; 0x01
   1b858:	4a 81       	ldd	r20, Y+2	; 0x02
   1b85a:	5b 81       	ldd	r21, Y+3	; 0x03
   1b85c:	c2 51       	subi	r28, 0x12	; 18
   1b85e:	d1 40       	sbci	r29, 0x01	; 1
   1b860:	28 0d       	add	r18, r8
   1b862:	39 1d       	adc	r19, r9
   1b864:	4a 1d       	adc	r20, r10
   1b866:	5b 1d       	adc	r21, r11
   1b868:	c2 5f       	subi	r28, 0xF2	; 242
   1b86a:	de 4f       	sbci	r29, 0xFE	; 254
   1b86c:	88 81       	ld	r24, Y
   1b86e:	99 81       	ldd	r25, Y+1	; 0x01
   1b870:	aa 81       	ldd	r26, Y+2	; 0x02
   1b872:	bb 81       	ldd	r27, Y+3	; 0x03
   1b874:	ce 50       	subi	r28, 0x0E	; 14
   1b876:	d1 40       	sbci	r29, 0x01	; 1
   1b878:	88 0d       	add	r24, r8
   1b87a:	99 1d       	adc	r25, r9
   1b87c:	aa 1d       	adc	r26, r10
   1b87e:	bb 1d       	adc	r27, r11
   1b880:	c8 5e       	subi	r28, 0xE8	; 232
   1b882:	de 4f       	sbci	r29, 0xFE	; 254
   1b884:	88 83       	st	Y, r24
   1b886:	99 83       	std	Y+1, r25	; 0x01
   1b888:	aa 83       	std	Y+2, r26	; 0x02
   1b88a:	bb 83       	std	Y+3, r27	; 0x03
   1b88c:	c8 51       	subi	r28, 0x18	; 24
   1b88e:	d1 40       	sbci	r29, 0x01	; 1
   1b890:	c4 5e       	subi	r28, 0xE4	; 228
   1b892:	de 4f       	sbci	r29, 0xFE	; 254
   1b894:	a8 81       	ld	r26, Y
   1b896:	b9 81       	ldd	r27, Y+1	; 0x01
   1b898:	cc 51       	subi	r28, 0x1C	; 28
   1b89a:	d1 40       	sbci	r29, 0x01	; 1
   1b89c:	8d 91       	ld	r24, X+
   1b89e:	9c 91       	ld	r25, X
   1b8a0:	28 16       	cp	r2, r24
   1b8a2:	39 06       	cpc	r3, r25
   1b8a4:	94 f4       	brge	.+36     	; 0x1b8ca <lif_add_lif_file+0x28e>
    {
        // Read
        size = lif_read(ULIF, buf, uoffset, LIF_SECTOR_SIZE);
   1b8a6:	00 e0       	ldi	r16, 0x00	; 0
   1b8a8:	11 e0       	ldi	r17, 0x01	; 1
   1b8aa:	be 01       	movw	r22, r28
   1b8ac:	66 5f       	subi	r22, 0xF6	; 246
   1b8ae:	7f 4f       	sbci	r23, 0xFF	; 255
   1b8b0:	c6 01       	movw	r24, r12
   1b8b2:	0e 94 2c c1 	call	0x18258	; 0x18258 <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1b8b6:	6f 3f       	cpi	r22, 0xFF	; 255
   1b8b8:	71 05       	cpc	r23, r1
   1b8ba:	11 f0       	breq	.+4      	; 0x1b8c0 <lif_add_lif_file+0x284>
   1b8bc:	0c f0       	brlt	.+2      	; 0x1b8c0 <lif_add_lif_file+0x284>
   1b8be:	a1 cf       	rjmp	.-190    	; 0x1b802 <lif_add_lif_file+0x1c6>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b8c0:	c7 01       	movw	r24, r14
   1b8c2:	0e 94 f8 c9 	call	0x193f0	; 0x193f0 <lif_close_volume>
   1b8c6:	c6 01       	movw	r24, r12
   1b8c8:	0f c0       	rjmp	.+30     	; 0x1b8e8 <lif_add_lif_file+0x2ac>
   1b8ca:	c6 01       	movw	r24, r12
   1b8cc:	0e 94 f8 c9 	call	0x193f0	; 0x193f0 <lif_close_volume>
        printf("\tWrote: %8ld\r", bytes);
    }
    lif_closedir(ULIF);

    // Write directory record
    if( !lif_writedirindex(LIF,index))
   1b8d0:	ca 5e       	subi	r28, 0xEA	; 234
   1b8d2:	de 4f       	sbci	r29, 0xFE	; 254
   1b8d4:	68 81       	ld	r22, Y
   1b8d6:	79 81       	ldd	r23, Y+1	; 0x01
   1b8d8:	c6 51       	subi	r28, 0x16	; 22
   1b8da:	d1 40       	sbci	r29, 0x01	; 1
   1b8dc:	c7 01       	movw	r24, r14
   1b8de:	0e 94 ed ca 	call	0x195da	; 0x195da <lif_writedirindex>
   1b8e2:	89 2b       	or	r24, r25
   1b8e4:	41 f4       	brne	.+16     	; 0x1b8f6 <lif_add_lif_file+0x2ba>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b8e6:	c7 01       	movw	r24, r14
   1b8e8:	0e 94 f8 c9 	call	0x193f0	; 0x193f0 <lif_close_volume>

    // Write directory record
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
   1b8ec:	6f ef       	ldi	r22, 0xFF	; 255
   1b8ee:	7f ef       	ldi	r23, 0xFF	; 255
   1b8f0:	8f ef       	ldi	r24, 0xFF	; 255
   1b8f2:	9f ef       	ldi	r25, 0xFF	; 255
   1b8f4:	13 c0       	rjmp	.+38     	; 0x1b91c <lif_add_lif_file+0x2e0>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b8f6:	c7 01       	movw	r24, r14
   1b8f8:	0e 94 f8 c9 	call	0x193f0	; 0x193f0 <lif_close_volume>
    {
        lif_closedir(LIF);
        return(-1);
    }
    lif_closedir(LIF);
    printf("\tWrote: %8ld\n", bytes);
   1b8fc:	ed b7       	in	r30, 0x3d	; 61
   1b8fe:	fe b7       	in	r31, 0x3e	; 62
   1b900:	84 82       	std	Z+4, r8	; 0x04
   1b902:	95 82       	std	Z+5, r9	; 0x05
   1b904:	a6 82       	std	Z+6, r10	; 0x06
   1b906:	b7 82       	std	Z+7, r11	; 0x07
   1b908:	80 e4       	ldi	r24, 0x40	; 64
   1b90a:	92 e3       	ldi	r25, 0x32	; 50
   1b90c:	a0 e0       	ldi	r26, 0x00	; 0
   1b90e:	81 83       	std	Z+1, r24	; 0x01
   1b910:	92 83       	std	Z+2, r25	; 0x02
   1b912:	a3 83       	std	Z+3, r26	; 0x03
   1b914:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    return(bytes);
   1b918:	b4 01       	movw	r22, r8
   1b91a:	c5 01       	movw	r24, r10
}
   1b91c:	c3 5e       	subi	r28, 0xE3	; 227
   1b91e:	de 4f       	sbci	r29, 0xFE	; 254
   1b920:	0f b6       	in	r0, 0x3f	; 63
   1b922:	f8 94       	cli
   1b924:	de bf       	out	0x3e, r29	; 62
   1b926:	0f be       	out	0x3f, r0	; 63
   1b928:	cd bf       	out	0x3d, r28	; 61
   1b92a:	df 91       	pop	r29
   1b92c:	cf 91       	pop	r28
   1b92e:	1f 91       	pop	r17
   1b930:	0f 91       	pop	r16
   1b932:	ff 90       	pop	r15
   1b934:	ef 90       	pop	r14
   1b936:	df 90       	pop	r13
   1b938:	cf 90       	pop	r12
   1b93a:	bf 90       	pop	r11
   1b93c:	af 90       	pop	r10
   1b93e:	9f 90       	pop	r9
   1b940:	8f 90       	pop	r8
   1b942:	6f 90       	pop	r6
   1b944:	5f 90       	pop	r5
   1b946:	4f 90       	pop	r4
   1b948:	3f 90       	pop	r3
   1b94a:	2f 90       	pop	r2
   1b94c:	08 95       	ret

0001b94e <lif_del_file>:
/// @param[in] lifimagename: LIF image name
/// @param[in] lifname: LIF file name
/// @return 1 if deleted, 0 if not found, -1 error
MEMSPACE
int lif_del_file(char *lifimagename, char *lifname)
{
   1b94e:	ef 92       	push	r14
   1b950:	ff 92       	push	r15
   1b952:	0f 93       	push	r16
   1b954:	1f 93       	push	r17
   1b956:	cf 93       	push	r28
   1b958:	df 93       	push	r29
   1b95a:	ad b7       	in	r26, 0x3d	; 61
   1b95c:	be b7       	in	r27, 0x3e	; 62
   1b95e:	17 97       	sbiw	r26, 0x07	; 7
   1b960:	0f b6       	in	r0, 0x3f	; 63
   1b962:	f8 94       	cli
   1b964:	be bf       	out	0x3e, r27	; 62
   1b966:	0f be       	out	0x3f, r0	; 63
   1b968:	ad bf       	out	0x3d, r26	; 61
   1b96a:	7c 01       	movw	r14, r24
   1b96c:	8b 01       	movw	r16, r22
    lif_t *LIF;
    int index;

    if(!*lifimagename)
   1b96e:	fc 01       	movw	r30, r24
   1b970:	80 81       	ld	r24, Z
   1b972:	81 11       	cpse	r24, r1
   1b974:	03 c0       	rjmp	.+6      	; 0x1b97c <lif_del_file+0x2e>
    {
        printf("lif_del_file: lifimagename is empty\n");
   1b976:	8b e1       	ldi	r24, 0x1B	; 27
   1b978:	92 e3       	ldi	r25, 0x32	; 50
   1b97a:	06 c0       	rjmp	.+12     	; 0x1b988 <lif_del_file+0x3a>
        return(-1);
    }
    if(!*lifname)
   1b97c:	fb 01       	movw	r30, r22
   1b97e:	80 81       	ld	r24, Z
   1b980:	81 11       	cpse	r24, r1
   1b982:	0b c0       	rjmp	.+22     	; 0x1b99a <lif_del_file+0x4c>
    {
        printf("lif_del_file: lifname is empty\n");
   1b984:	8b ef       	ldi	r24, 0xFB	; 251
   1b986:	91 e3       	ldi	r25, 0x31	; 49
   1b988:	a0 e0       	ldi	r26, 0x00	; 0
   1b98a:	ed b7       	in	r30, 0x3d	; 61
   1b98c:	fe b7       	in	r31, 0x3e	; 62
   1b98e:	81 83       	std	Z+1, r24	; 0x01
   1b990:	92 83       	std	Z+2, r25	; 0x02
   1b992:	a3 83       	std	Z+3, r26	; 0x03
   1b994:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   1b998:	68 c0       	rjmp	.+208    	; 0x1ba6a <lif_del_file+0x11c>
        return(-1);
    }
    if(debuglevel & 0x400)
   1b99a:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1b99e:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1b9a2:	92 ff       	sbrs	r25, 2
   1b9a4:	0e c0       	rjmp	.+28     	; 0x1b9c2 <lif_del_file+0x74>
        printf("LIF image:[%s], LIF name:[%s]\n", 
   1b9a6:	ed b7       	in	r30, 0x3d	; 61
   1b9a8:	fe b7       	in	r31, 0x3e	; 62
   1b9aa:	77 83       	std	Z+7, r23	; 0x07
   1b9ac:	66 83       	std	Z+6, r22	; 0x06
   1b9ae:	f5 82       	std	Z+5, r15	; 0x05
   1b9b0:	e4 82       	std	Z+4, r14	; 0x04
   1b9b2:	8c ed       	ldi	r24, 0xDC	; 220
   1b9b4:	91 e3       	ldi	r25, 0x31	; 49
   1b9b6:	a0 e0       	ldi	r26, 0x00	; 0
   1b9b8:	81 83       	std	Z+1, r24	; 0x01
   1b9ba:	92 83       	std	Z+2, r25	; 0x02
   1b9bc:	a3 83       	std	Z+3, r26	; 0x03
   1b9be:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
            lifimagename, lifname);


    LIF = lif_open_volume(lifimagename,"rb+");
   1b9c2:	66 e2       	ldi	r22, 0x26	; 38
   1b9c4:	78 e0       	ldi	r23, 0x08	; 8
   1b9c6:	c7 01       	movw	r24, r14
   1b9c8:	0e 94 b3 d0 	call	0x1a166	; 0x1a166 <lif_open_volume>
   1b9cc:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1b9ce:	00 97       	sbiw	r24, 0x00	; 0
   1b9d0:	09 f4       	brne	.+2      	; 0x1b9d4 <lif_del_file+0x86>
   1b9d2:	4b c0       	rjmp	.+150    	; 0x1ba6a <lif_del_file+0x11c>
        return(-1); 

    // Now find file record
    index = lif_find_file(LIF, lifname);
   1b9d4:	b8 01       	movw	r22, r16
   1b9d6:	0e 94 82 d3 	call	0x1a704	; 0x1a704 <lif_find_file>
    if(index == -1)
   1b9da:	8f 3f       	cpi	r24, 0xFF	; 255
   1b9dc:	ff ef       	ldi	r31, 0xFF	; 255
   1b9de:	9f 07       	cpc	r25, r31
   1b9e0:	a1 f4       	brne	.+40     	; 0x1ba0a <lif_del_file+0xbc>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b9e2:	ce 01       	movw	r24, r28
   1b9e4:	0e 94 f8 c9 	call	0x193f0	; 0x193f0 <lif_close_volume>
    // Now find file record
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        lif_closedir(LIF);
        printf("LIF image:[%s] lif name:[%s] not found\n", lifimagename, lifname);
   1b9e8:	ed b7       	in	r30, 0x3d	; 61
   1b9ea:	fe b7       	in	r31, 0x3e	; 62
   1b9ec:	17 83       	std	Z+7, r17	; 0x07
   1b9ee:	06 83       	std	Z+6, r16	; 0x06
   1b9f0:	f5 82       	std	Z+5, r15	; 0x05
   1b9f2:	e4 82       	std	Z+4, r14	; 0x04
   1b9f4:	84 eb       	ldi	r24, 0xB4	; 180
   1b9f6:	91 e3       	ldi	r25, 0x31	; 49
   1b9f8:	a0 e0       	ldi	r26, 0x00	; 0
   1b9fa:	81 83       	std	Z+1, r24	; 0x01
   1b9fc:	92 83       	std	Z+2, r25	; 0x02
   1b9fe:	a3 83       	std	Z+3, r26	; 0x03
   1ba00:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
        return(0);
   1ba04:	80 e0       	ldi	r24, 0x00	; 0
   1ba06:	90 e0       	ldi	r25, 0x00	; 0
   1ba08:	32 c0       	rjmp	.+100    	; 0x1ba6e <lif_del_file+0x120>
    }


// IF the next record is EOF then update EOF
    if(index >= LIF->EOFindex-1)
   1ba0a:	2a a1       	ldd	r18, Y+34	; 0x22
   1ba0c:	3b a1       	ldd	r19, Y+35	; 0x23
   1ba0e:	21 50       	subi	r18, 0x01	; 1
   1ba10:	31 09       	sbc	r19, r1
   1ba12:	fe 01       	movw	r30, r28
   1ba14:	e6 5a       	subi	r30, 0xA6	; 166
   1ba16:	ff 4f       	sbci	r31, 0xFF	; 255
   1ba18:	82 17       	cp	r24, r18
   1ba1a:	93 07       	cpc	r25, r19
   1ba1c:	2c f0       	brlt	.+10     	; 0x1ba28 <lif_del_file+0xda>
        LIF->DIR.FileType = 0xffff;
   1ba1e:	2f ef       	ldi	r18, 0xFF	; 255
   1ba20:	3f ef       	ldi	r19, 0xFF	; 255
   1ba22:	31 83       	std	Z+1, r19	; 0x01
   1ba24:	20 83       	st	Z, r18
   1ba26:	02 c0       	rjmp	.+4      	; 0x1ba2c <lif_del_file+0xde>
    else
        LIF->DIR.FileType = 0;
   1ba28:	11 82       	std	Z+1, r1	; 0x01
   1ba2a:	10 82       	st	Z, r1

    // re-Write directory record
    if( !lif_writedirindex(LIF,index) )
   1ba2c:	bc 01       	movw	r22, r24
   1ba2e:	ce 01       	movw	r24, r28
   1ba30:	0e 94 ed ca 	call	0x195da	; 0x195da <lif_writedirindex>
   1ba34:	89 2b       	or	r24, r25
   1ba36:	21 f4       	brne	.+8      	; 0x1ba40 <lif_del_file+0xf2>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ba38:	ce 01       	movw	r24, r28
   1ba3a:	0e 94 f8 c9 	call	0x193f0	; 0x193f0 <lif_close_volume>
   1ba3e:	15 c0       	rjmp	.+42     	; 0x1ba6a <lif_del_file+0x11c>
    {
        lif_closedir(LIF);
        return(-1);
    }

    lif_updatefree(LIF);
   1ba40:	ce 01       	movw	r24, r28
   1ba42:	0e 94 61 cb 	call	0x196c2	; 0x196c2 <lif_updatefree>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ba46:	ce 01       	movw	r24, r28
   1ba48:	0e 94 f8 c9 	call	0x193f0	; 0x193f0 <lif_close_volume>
    }

    lif_updatefree(LIF);

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);
   1ba4c:	ed b7       	in	r30, 0x3d	; 61
   1ba4e:	fe b7       	in	r31, 0x3e	; 62
   1ba50:	15 83       	std	Z+5, r17	; 0x05
   1ba52:	04 83       	std	Z+4, r16	; 0x04
   1ba54:	85 ea       	ldi	r24, 0xA5	; 165
   1ba56:	91 e3       	ldi	r25, 0x31	; 49
   1ba58:	a0 e0       	ldi	r26, 0x00	; 0
   1ba5a:	81 83       	std	Z+1, r24	; 0x01
   1ba5c:	92 83       	std	Z+2, r25	; 0x02
   1ba5e:	a3 83       	std	Z+3, r26	; 0x03
   1ba60:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>

    return(1);
   1ba64:	81 e0       	ldi	r24, 0x01	; 1
   1ba66:	90 e0       	ldi	r25, 0x00	; 0
   1ba68:	02 c0       	rjmp	.+4      	; 0x1ba6e <lif_del_file+0x120>
            lifimagename, lifname);


    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1); 
   1ba6a:	8f ef       	ldi	r24, 0xFF	; 255
   1ba6c:	9f ef       	ldi	r25, 0xFF	; 255

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);

    return(1);
}
   1ba6e:	cd b7       	in	r28, 0x3d	; 61
   1ba70:	de b7       	in	r29, 0x3e	; 62
   1ba72:	27 96       	adiw	r28, 0x07	; 7
   1ba74:	e6 e0       	ldi	r30, 0x06	; 6
   1ba76:	b4 c6       	rjmp	.+3432   	; 0x1c7e0 <__epilogue_restores__+0x18>

0001ba78 <lif_rename_file>:
/// @param[in] oldlifname: old LIF file name
/// @param[in] newlifname: new LIF file name
/// @return 1 if renamed, 0 if not found, -1 error
MEMSPACE
int lif_rename_file(char *lifimagename, char *oldlifname, char *newlifname)
{
   1ba78:	a7 e0       	ldi	r26, 0x07	; 7
   1ba7a:	b0 e0       	ldi	r27, 0x00	; 0
   1ba7c:	e1 e4       	ldi	r30, 0x41	; 65
   1ba7e:	fd ed       	ldi	r31, 0xDD	; 221
   1ba80:	8f c6       	rjmp	.+3358   	; 0x1c7a0 <__prologue_saves__+0x10>
   1ba82:	6c 01       	movw	r12, r24
   1ba84:	8b 01       	movw	r16, r22
   1ba86:	7a 01       	movw	r14, r20
    int index;
    lif_t *LIF;

    if(!*lifimagename)
   1ba88:	fc 01       	movw	r30, r24
   1ba8a:	80 81       	ld	r24, Z
   1ba8c:	81 11       	cpse	r24, r1
   1ba8e:	03 c0       	rjmp	.+6      	; 0x1ba96 <lif_rename_file+0x1e>
    {
        printf("lif_rename_file: lifimagename is empty\n");
   1ba90:	8d e7       	ldi	r24, 0x7D	; 125
   1ba92:	91 e3       	ldi	r25, 0x31	; 49
   1ba94:	06 c0       	rjmp	.+12     	; 0x1baa2 <lif_rename_file+0x2a>
        return(-1);
    }
    if(!*oldlifname)
   1ba96:	fb 01       	movw	r30, r22
   1ba98:	80 81       	ld	r24, Z
   1ba9a:	81 11       	cpse	r24, r1
   1ba9c:	0b c0       	rjmp	.+22     	; 0x1bab4 <lif_rename_file+0x3c>
    {
        printf("lif_rename_file: old lifname is empty\n");
   1ba9e:	86 e5       	ldi	r24, 0x56	; 86
   1baa0:	91 e3       	ldi	r25, 0x31	; 49
   1baa2:	a0 e0       	ldi	r26, 0x00	; 0
   1baa4:	ed b7       	in	r30, 0x3d	; 61
   1baa6:	fe b7       	in	r31, 0x3e	; 62
   1baa8:	81 83       	std	Z+1, r24	; 0x01
   1baaa:	92 83       	std	Z+2, r25	; 0x02
   1baac:	a3 83       	std	Z+3, r26	; 0x03
   1baae:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   1bab2:	58 c0       	rjmp	.+176    	; 0x1bb64 <lif_rename_file+0xec>
        return(-1);
    }
    if(!*newlifname)
   1bab4:	fa 01       	movw	r30, r20
   1bab6:	80 81       	ld	r24, Z
   1bab8:	81 11       	cpse	r24, r1
   1baba:	03 c0       	rjmp	.+6      	; 0x1bac2 <lif_rename_file+0x4a>
    {
        printf("lif_rename_file: new lifname is empty\n");
   1babc:	8f e2       	ldi	r24, 0x2F	; 47
   1babe:	91 e3       	ldi	r25, 0x31	; 49
   1bac0:	f0 cf       	rjmp	.-32     	; 0x1baa2 <lif_rename_file+0x2a>
        return(-1);
    }

    if(!lif_checkname(newlifname))
   1bac2:	ca 01       	movw	r24, r20
   1bac4:	0e 94 43 c2 	call	0x18486	; 0x18486 <lif_checkname>
   1bac8:	89 2b       	or	r24, r25
   1baca:	19 f4       	brne	.+6      	; 0x1bad2 <lif_rename_file+0x5a>
    {
        printf("lif_rename_file: new lifname contains bad characters\n");
   1bacc:	89 ef       	ldi	r24, 0xF9	; 249
   1bace:	90 e3       	ldi	r25, 0x30	; 48
   1bad0:	e8 cf       	rjmp	.-48     	; 0x1baa2 <lif_rename_file+0x2a>
        return(-1);

    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1bad2:	66 e2       	ldi	r22, 0x26	; 38
   1bad4:	78 e0       	ldi	r23, 0x08	; 8
   1bad6:	c6 01       	movw	r24, r12
   1bad8:	0e 94 b3 d0 	call	0x1a166	; 0x1a166 <lif_open_volume>
   1badc:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1bade:	00 97       	sbiw	r24, 0x00	; 0
   1bae0:	09 f4       	brne	.+2      	; 0x1bae4 <lif_rename_file+0x6c>
   1bae2:	40 c0       	rjmp	.+128    	; 0x1bb64 <lif_rename_file+0xec>
        return(-1); 

    // Now find file record
    index = lif_find_file(LIF, oldlifname);
   1bae4:	b8 01       	movw	r22, r16
   1bae6:	0e 94 82 d3 	call	0x1a704	; 0x1a704 <lif_find_file>
   1baea:	5c 01       	movw	r10, r24
    if(index == -1)
   1baec:	01 96       	adiw	r24, 0x01	; 1
   1baee:	a1 f4       	brne	.+40     	; 0x1bb18 <lif_rename_file+0xa0>
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
   1baf0:	ed b7       	in	r30, 0x3d	; 61
   1baf2:	fe b7       	in	r31, 0x3e	; 62
   1baf4:	17 83       	std	Z+7, r17	; 0x07
   1baf6:	06 83       	std	Z+6, r16	; 0x06
   1baf8:	d5 82       	std	Z+5, r13	; 0x05
   1bafa:	c4 82       	std	Z+4, r12	; 0x04
   1bafc:	80 ed       	ldi	r24, 0xD0	; 208
   1bafe:	90 e3       	ldi	r25, 0x30	; 48
   1bb00:	a0 e0       	ldi	r26, 0x00	; 0
   1bb02:	81 83       	std	Z+1, r24	; 0x01
   1bb04:	92 83       	std	Z+2, r25	; 0x02
   1bb06:	a3 83       	std	Z+3, r26	; 0x03
   1bb08:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bb0c:	ce 01       	movw	r24, r28
   1bb0e:	0e 94 f8 c9 	call	0x193f0	; 0x193f0 <lif_close_volume>
    index = lif_find_file(LIF, oldlifname);
    if(index == -1)
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
        lif_closedir(LIF);
        return(0);
   1bb12:	80 e0       	ldi	r24, 0x00	; 0
   1bb14:	90 e0       	ldi	r25, 0x00	; 0
   1bb16:	28 c0       	rjmp	.+80     	; 0x1bb68 <lif_rename_file+0xf0>
    }
    lif_fixname(LIF->DIR.filename, newlifname, 10);
   1bb18:	4a e0       	ldi	r20, 0x0A	; 10
   1bb1a:	50 e0       	ldi	r21, 0x00	; 0
   1bb1c:	b7 01       	movw	r22, r14
   1bb1e:	ce 01       	movw	r24, r28
   1bb20:	81 5b       	subi	r24, 0xB1	; 177
   1bb22:	9f 4f       	sbci	r25, 0xFF	; 255
   1bb24:	0e 94 7d c2 	call	0x184fa	; 0x184fa <lif_fixname>

    // re-Write directory record
    if( !lif_writedirindex(LIF,index))
   1bb28:	b5 01       	movw	r22, r10
   1bb2a:	ce 01       	movw	r24, r28
   1bb2c:	0e 94 ed ca 	call	0x195da	; 0x195da <lif_writedirindex>
   1bb30:	89 2b       	or	r24, r25
   1bb32:	21 f4       	brne	.+8      	; 0x1bb3c <lif_rename_file+0xc4>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bb34:	ce 01       	movw	r24, r28
   1bb36:	0e 94 f8 c9 	call	0x193f0	; 0x193f0 <lif_close_volume>
   1bb3a:	14 c0       	rjmp	.+40     	; 0x1bb64 <lif_rename_file+0xec>
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);
   1bb3c:	ed b7       	in	r30, 0x3d	; 61
   1bb3e:	fe b7       	in	r31, 0x3e	; 62
   1bb40:	f7 82       	std	Z+7, r15	; 0x07
   1bb42:	e6 82       	std	Z+6, r14	; 0x06
   1bb44:	15 83       	std	Z+5, r17	; 0x05
   1bb46:	04 83       	std	Z+4, r16	; 0x04
   1bb48:	89 eb       	ldi	r24, 0xB9	; 185
   1bb4a:	90 e3       	ldi	r25, 0x30	; 48
   1bb4c:	a0 e0       	ldi	r26, 0x00	; 0
   1bb4e:	81 83       	std	Z+1, r24	; 0x01
   1bb50:	92 83       	std	Z+2, r25	; 0x02
   1bb52:	a3 83       	std	Z+3, r26	; 0x03
   1bb54:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bb58:	ce 01       	movw	r24, r28
   1bb5a:	0e 94 f8 c9 	call	0x193f0	; 0x193f0 <lif_close_volume>
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
   1bb5e:	81 e0       	ldi	r24, 0x01	; 1
   1bb60:	90 e0       	ldi	r25, 0x00	; 0
   1bb62:	02 c0       	rjmp	.+4      	; 0x1bb68 <lif_rename_file+0xf0>

    }

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1); 
   1bb64:	8f ef       	ldi	r24, 0xFF	; 255
   1bb66:	9f ef       	ldi	r25, 0xFF	; 255
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
}
   1bb68:	cd b7       	in	r28, 0x3d	; 61
   1bb6a:	de b7       	in	r29, 0x3e	; 62
   1bb6c:	27 96       	adiw	r28, 0x07	; 7
   1bb6e:	ea e0       	ldi	r30, 0x0A	; 10
   1bb70:	33 c6       	rjmp	.+3174   	; 0x1c7d8 <__epilogue_restores__+0x10>

0001bb72 <lif_create_image>:
/// @param[in] dirsectors: Number of LIF directory sectors
/// @param[in] sectors: total disk image size in sectors
///@return bytes writting to disk image
MEMSPACE
long lif_create_image(char *lifimagename, char *liflabel, uint32_t dirsectors, uint32_t sectors)
{
   1bb72:	4f 92       	push	r4
   1bb74:	5f 92       	push	r5
   1bb76:	6f 92       	push	r6
   1bb78:	7f 92       	push	r7
   1bb7a:	af 92       	push	r10
   1bb7c:	bf 92       	push	r11
   1bb7e:	cf 92       	push	r12
   1bb80:	df 92       	push	r13
   1bb82:	ef 92       	push	r14
   1bb84:	ff 92       	push	r15
   1bb86:	0f 93       	push	r16
   1bb88:	1f 93       	push	r17
   1bb8a:	cf 93       	push	r28
   1bb8c:	df 93       	push	r29
   1bb8e:	ad b7       	in	r26, 0x3d	; 61
   1bb90:	be b7       	in	r27, 0x3e	; 62
   1bb92:	17 97       	sbiw	r26, 0x07	; 7
   1bb94:	0f b6       	in	r0, 0x3f	; 63
   1bb96:	f8 94       	cli
   1bb98:	be bf       	out	0x3e, r27	; 62
   1bb9a:	0f be       	out	0x3f, r0	; 63
   1bb9c:	ad bf       	out	0x3d, r26	; 61
   1bb9e:	27 01       	movw	r4, r14
   1bba0:	38 01       	movw	r6, r16
    uint32_t dirstart,filestart,filesectors,end;
    lif_t *LIF;

    if(!*lifimagename)
   1bba2:	dc 01       	movw	r26, r24
   1bba4:	ec 91       	ld	r30, X
   1bba6:	e1 11       	cpse	r30, r1
   1bba8:	03 c0       	rjmp	.+6      	; 0x1bbb0 <lif_create_image+0x3e>
    {
        printf("lif_create_image: lifimagename is empty\n");
   1bbaa:	80 e9       	ldi	r24, 0x90	; 144
   1bbac:	90 e3       	ldi	r25, 0x30	; 48
   1bbae:	16 c0       	rjmp	.+44     	; 0x1bbdc <lif_create_image+0x6a>
        return(-1);
    }
    if(!*liflabel)
   1bbb0:	db 01       	movw	r26, r22
   1bbb2:	ec 91       	ld	r30, X
   1bbb4:	e1 11       	cpse	r30, r1
   1bbb6:	03 c0       	rjmp	.+6      	; 0x1bbbe <lif_create_image+0x4c>
    {
        printf("lif_create_image: liflabel is empty\n");
   1bbb8:	8b e6       	ldi	r24, 0x6B	; 107
   1bbba:	90 e3       	ldi	r25, 0x30	; 48
   1bbbc:	0f c0       	rjmp	.+30     	; 0x1bbdc <lif_create_image+0x6a>
        return(-1);
    }
    if(!dirsectors)
   1bbbe:	21 15       	cp	r18, r1
   1bbc0:	31 05       	cpc	r19, r1
   1bbc2:	41 05       	cpc	r20, r1
   1bbc4:	51 05       	cpc	r21, r1
   1bbc6:	19 f4       	brne	.+6      	; 0x1bbce <lif_create_image+0x5c>
    {
        printf("lif_create_image: dirsectors is 0\n");
   1bbc8:	88 e4       	ldi	r24, 0x48	; 72
   1bbca:	90 e3       	ldi	r25, 0x30	; 48
   1bbcc:	07 c0       	rjmp	.+14     	; 0x1bbdc <lif_create_image+0x6a>
        return(-1);
    }
    if(!sectors)
   1bbce:	e1 14       	cp	r14, r1
   1bbd0:	f1 04       	cpc	r15, r1
   1bbd2:	01 05       	cpc	r16, r1
   1bbd4:	11 05       	cpc	r17, r1
   1bbd6:	59 f4       	brne	.+22     	; 0x1bbee <lif_create_image+0x7c>
    {
        printf("lif_create_image: sectors is 0\n");
   1bbd8:	88 e2       	ldi	r24, 0x28	; 40
   1bbda:	90 e3       	ldi	r25, 0x30	; 48
   1bbdc:	a0 e0       	ldi	r26, 0x00	; 0
   1bbde:	ed b7       	in	r30, 0x3d	; 61
   1bbe0:	fe b7       	in	r31, 0x3e	; 62
   1bbe2:	81 83       	std	Z+1, r24	; 0x01
   1bbe4:	92 83       	std	Z+2, r25	; 0x02
   1bbe6:	a3 83       	std	Z+3, r26	; 0x03
   1bbe8:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   1bbec:	2b c0       	rjmp	.+86     	; 0x1bc44 <lif_create_image+0xd2>
    dirstart = 2;
    filestart = dirstart + dirsectors;
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
   1bbee:	67 01       	movw	r12, r14
   1bbf0:	78 01       	movw	r14, r16
   1bbf2:	f2 e0       	ldi	r31, 0x02	; 2
   1bbf4:	cf 1a       	sub	r12, r31
   1bbf6:	d1 08       	sbc	r13, r1
   1bbf8:	e1 08       	sbc	r14, r1
   1bbfa:	f1 08       	sbc	r15, r1
   1bbfc:	56 01       	movw	r10, r12
   1bbfe:	67 01       	movw	r12, r14
   1bc00:	a2 1a       	sub	r10, r18
   1bc02:	b3 0a       	sbc	r11, r19
   1bc04:	c4 0a       	sbc	r12, r20
   1bc06:	d5 0a       	sbc	r13, r21
   1bc08:	79 01       	movw	r14, r18
   1bc0a:	8a 01       	movw	r16, r20
   1bc0c:	22 e0       	ldi	r18, 0x02	; 2
   1bc0e:	30 e0       	ldi	r19, 0x00	; 0
   1bc10:	40 e0       	ldi	r20, 0x00	; 0
   1bc12:	50 e0       	ldi	r21, 0x00	; 0
   1bc14:	0e 94 69 cc 	call	0x198d2	; 0x198d2 <lif_create_volume>
    if(LIF == NULL)
   1bc18:	00 97       	sbiw	r24, 0x00	; 0
   1bc1a:	a1 f0       	breq	.+40     	; 0x1bc44 <lif_create_image+0xd2>
        return(-1);
    lif_close_volume(LIF);
   1bc1c:	0e 94 f8 c9 	call	0x193f0	; 0x193f0 <lif_close_volume>

    printf("\tFormating: wrote %ld sectors\n", (long)end);
   1bc20:	82 01       	movw	r16, r4
   1bc22:	d6 2d       	mov	r29, r6
   1bc24:	c7 2d       	mov	r28, r7
   1bc26:	ed b7       	in	r30, 0x3d	; 61
   1bc28:	fe b7       	in	r31, 0x3e	; 62
   1bc2a:	44 82       	std	Z+4, r4	; 0x04
   1bc2c:	15 83       	std	Z+5, r17	; 0x05
   1bc2e:	66 82       	std	Z+6, r6	; 0x06
   1bc30:	77 82       	std	Z+7, r7	; 0x07
   1bc32:	89 e0       	ldi	r24, 0x09	; 9
   1bc34:	90 e3       	ldi	r25, 0x30	; 48
   1bc36:	a0 e0       	ldi	r26, 0x00	; 0
   1bc38:	81 83       	std	Z+1, r24	; 0x01
   1bc3a:	92 83       	std	Z+2, r25	; 0x02
   1bc3c:	a3 83       	std	Z+3, r26	; 0x03
   1bc3e:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    return(end);
   1bc42:	04 c0       	rjmp	.+8      	; 0x1bc4c <lif_create_image+0xda>
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
    if(LIF == NULL)
        return(-1);
   1bc44:	0f ef       	ldi	r16, 0xFF	; 255
   1bc46:	1f ef       	ldi	r17, 0xFF	; 255
   1bc48:	df ef       	ldi	r29, 0xFF	; 255
   1bc4a:	cf ef       	ldi	r28, 0xFF	; 255
    lif_close_volume(LIF);

    printf("\tFormating: wrote %ld sectors\n", (long)end);
    return(end);
}
   1bc4c:	b8 01       	movw	r22, r16
   1bc4e:	8d 2f       	mov	r24, r29
   1bc50:	9c 2f       	mov	r25, r28
   1bc52:	ad b7       	in	r26, 0x3d	; 61
   1bc54:	be b7       	in	r27, 0x3e	; 62
   1bc56:	17 96       	adiw	r26, 0x07	; 7
   1bc58:	0f b6       	in	r0, 0x3f	; 63
   1bc5a:	f8 94       	cli
   1bc5c:	be bf       	out	0x3e, r27	; 62
   1bc5e:	0f be       	out	0x3f, r0	; 63
   1bc60:	ad bf       	out	0x3d, r26	; 61
   1bc62:	df 91       	pop	r29
   1bc64:	cf 91       	pop	r28
   1bc66:	1f 91       	pop	r17
   1bc68:	0f 91       	pop	r16
   1bc6a:	ff 90       	pop	r15
   1bc6c:	ef 90       	pop	r14
   1bc6e:	df 90       	pop	r13
   1bc70:	cf 90       	pop	r12
   1bc72:	bf 90       	pop	r11
   1bc74:	af 90       	pop	r10
   1bc76:	7f 90       	pop	r7
   1bc78:	6f 90       	pop	r6
   1bc7a:	5f 90       	pop	r5
   1bc7c:	4f 90       	pop	r4
   1bc7e:	08 95       	ret

0001bc80 <lif_tests>:

/// @brief LIF user tests
/// @return  1 matched token, 0 if not
MEMSPACE
int lif_tests(int argc, char *argv[])
{
   1bc80:	8f 92       	push	r8
   1bc82:	9f 92       	push	r9
   1bc84:	af 92       	push	r10
   1bc86:	bf 92       	push	r11
   1bc88:	ef 92       	push	r14
   1bc8a:	ff 92       	push	r15
   1bc8c:	0f 93       	push	r16
   1bc8e:	1f 93       	push	r17
   1bc90:	cf 93       	push	r28
   1bc92:	df 93       	push	r29
   1bc94:	00 d0       	rcall	.+0      	; 0x1bc96 <lif_tests+0x16>
   1bc96:	00 d0       	rcall	.+0      	; 0x1bc98 <lif_tests+0x18>
   1bc98:	1f 92       	push	r1
    // NAME
    ind = 0;
	// Skip program name
    ptr = argv[ind++];

    if(!ptr )
   1bc9a:	fb 01       	movw	r30, r22
   1bc9c:	20 81       	ld	r18, Z
   1bc9e:	31 81       	ldd	r19, Z+1	; 0x01
   1bca0:	23 2b       	or	r18, r19
   1bca2:	19 f4       	brne	.+6      	; 0x1bcaa <lif_tests+0x2a>
        return(0);
   1bca4:	80 e0       	ldi	r24, 0x00	; 0
   1bca6:	90 e0       	ldi	r25, 0x00	; 0
   1bca8:	15 c1       	rjmp	.+554    	; 0x1bed4 <lif_tests+0x254>
   1bcaa:	eb 01       	movw	r28, r22
   1bcac:	7c 01       	movw	r14, r24

	// Next Argument after program name
    ptr = argv[ind++];
   1bcae:	02 81       	ldd	r16, Z+2	; 0x02
   1bcb0:	13 81       	ldd	r17, Z+3	; 0x03



    if(argc <= 1 || !ptr || MATCH(ptr,"help") || MATCH(ptr,"-help") || MATCH(ptr,"-?") )
   1bcb2:	02 97       	sbiw	r24, 0x02	; 2
   1bcb4:	2c f4       	brge	.+10     	; 0x1bcc0 <lif_tests+0x40>
    {
        lif_help(1);
   1bcb6:	81 e0       	ldi	r24, 0x01	; 1
   1bcb8:	90 e0       	ldi	r25, 0x00	; 0
   1bcba:	0e 94 1d c0 	call	0x1803a	; 0x1803a <lif_help>
   1bcbe:	08 c1       	rjmp	.+528    	; 0x1bed0 <lif_tests+0x250>
	// Next Argument after program name
    ptr = argv[ind++];



    if(argc <= 1 || !ptr || MATCH(ptr,"help") || MATCH(ptr,"-help") || MATCH(ptr,"-?") )
   1bcc0:	01 15       	cp	r16, r1
   1bcc2:	11 05       	cpc	r17, r1
   1bcc4:	c1 f3       	breq	.-16     	; 0x1bcb6 <lif_tests+0x36>
   1bcc6:	6c eb       	ldi	r22, 0xBC	; 188
   1bcc8:	75 e1       	ldi	r23, 0x15	; 21
   1bcca:	c8 01       	movw	r24, r16
   1bccc:	0e 94 2d 33 	call	0x665a	; 0x665a <MATCH>
   1bcd0:	89 2b       	or	r24, r25
   1bcd2:	89 f7       	brne	.-30     	; 0x1bcb6 <lif_tests+0x36>
   1bcd4:	6b eb       	ldi	r22, 0xBB	; 187
   1bcd6:	75 e1       	ldi	r23, 0x15	; 21
   1bcd8:	c8 01       	movw	r24, r16
   1bcda:	0e 94 2d 33 	call	0x665a	; 0x665a <MATCH>
   1bcde:	89 2b       	or	r24, r25
   1bce0:	51 f7       	brne	.-44     	; 0x1bcb6 <lif_tests+0x36>
   1bce2:	61 ec       	ldi	r22, 0xC1	; 193
   1bce4:	75 e1       	ldi	r23, 0x15	; 21
   1bce6:	c8 01       	movw	r24, r16
   1bce8:	0e 94 2d 33 	call	0x665a	; 0x665a <MATCH>
   1bcec:	89 2b       	or	r24, r25
   1bcee:	19 f7       	brne	.-58     	; 0x1bcb6 <lif_tests+0x36>
        return(1);
    }

	// Turn one debugging
	// in the future we can add tests for specific messages
    if (MATCHARGS(ptr,"-d", (ind + 0) ,argc))
   1bcf0:	97 01       	movw	r18, r14
   1bcf2:	42 e0       	ldi	r20, 0x02	; 2
   1bcf4:	50 e0       	ldi	r21, 0x00	; 0
   1bcf6:	64 ec       	ldi	r22, 0xC4	; 196
   1bcf8:	75 e1       	ldi	r23, 0x15	; 21
   1bcfa:	c8 01       	movw	r24, r16
   1bcfc:	0e 94 41 33 	call	0x6682	; 0x6682 <MATCHARGS>
   1bd00:	89 2b       	or	r24, r25
   1bd02:	39 f0       	breq	.+14     	; 0x1bd12 <lif_tests+0x92>
    {
		debuglevel = 0xffff;
   1bd04:	8f ef       	ldi	r24, 0xFF	; 255
   1bd06:	9f ef       	ldi	r25, 0xFF	; 255
   1bd08:	90 93 c4 01 	sts	0x01C4, r25	; 0x8001c4 <debuglevel+0x1>
   1bd0c:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <debuglevel>
   1bd10:	df c0       	rjmp	.+446    	; 0x1bed0 <lif_tests+0x250>
        return(1);
		ptr = argv[ind++];
    }

    if (MATCHARGS(ptr,"addbin", (ind + 3) ,argc))
   1bd12:	97 01       	movw	r18, r14
   1bd14:	45 e0       	ldi	r20, 0x05	; 5
   1bd16:	50 e0       	ldi	r21, 0x00	; 0
   1bd18:	67 ec       	ldi	r22, 0xC7	; 199
   1bd1a:	75 e1       	ldi	r23, 0x15	; 21
   1bd1c:	c8 01       	movw	r24, r16
   1bd1e:	0e 94 41 33 	call	0x6682	; 0x6682 <MATCHARGS>
   1bd22:	89 2b       	or	r24, r25
   1bd24:	41 f0       	breq	.+16     	; 0x1bd36 <lif_tests+0xb6>
    {
        lif_add_lif_file(argv[ind],argv[ind+1],argv[ind+2]);
   1bd26:	48 85       	ldd	r20, Y+8	; 0x08
   1bd28:	59 85       	ldd	r21, Y+9	; 0x09
   1bd2a:	6e 81       	ldd	r22, Y+6	; 0x06
   1bd2c:	7f 81       	ldd	r23, Y+7	; 0x07
   1bd2e:	8c 81       	ldd	r24, Y+4	; 0x04
   1bd30:	9d 81       	ldd	r25, Y+5	; 0x05
   1bd32:	84 dc       	rcall	.-1784   	; 0x1b63c <lif_add_lif_file>
   1bd34:	cd c0       	rjmp	.+410    	; 0x1bed0 <lif_tests+0x250>

        return(1);
    }
    if (MATCHARGS(ptr,"add", (ind + 3) ,argc))
   1bd36:	97 01       	movw	r18, r14
   1bd38:	45 e0       	ldi	r20, 0x05	; 5
   1bd3a:	50 e0       	ldi	r21, 0x00	; 0
   1bd3c:	6e ec       	ldi	r22, 0xCE	; 206
   1bd3e:	75 e1       	ldi	r23, 0x15	; 21
   1bd40:	c8 01       	movw	r24, r16
   1bd42:	0e 94 41 33 	call	0x6682	; 0x6682 <MATCHARGS>
   1bd46:	89 2b       	or	r24, r25
   1bd48:	49 f0       	breq	.+18     	; 0x1bd5c <lif_tests+0xdc>
    {
        lif_add_ascii_file_as_e010(argv[ind],argv[ind+1],argv[ind+2]);
   1bd4a:	48 85       	ldd	r20, Y+8	; 0x08
   1bd4c:	59 85       	ldd	r21, Y+9	; 0x09
   1bd4e:	6e 81       	ldd	r22, Y+6	; 0x06
   1bd50:	7f 81       	ldd	r23, Y+7	; 0x07
   1bd52:	8c 81       	ldd	r24, Y+4	; 0x04
   1bd54:	9d 81       	ldd	r25, Y+5	; 0x05
   1bd56:	0e 94 fb d5 	call	0x1abf6	; 0x1abf6 <lif_add_ascii_file_as_e010>
   1bd5a:	ba c0       	rjmp	.+372    	; 0x1bed0 <lif_tests+0x250>
        return(1);
    }
    if (MATCHARGS(ptr,"createdisk", (ind + 3) ,argc))
   1bd5c:	97 01       	movw	r18, r14
   1bd5e:	45 e0       	ldi	r20, 0x05	; 5
   1bd60:	50 e0       	ldi	r21, 0x00	; 0
   1bd62:	62 ed       	ldi	r22, 0xD2	; 210
   1bd64:	75 e1       	ldi	r23, 0x15	; 21
   1bd66:	c8 01       	movw	r24, r16
   1bd68:	0e 94 41 33 	call	0x6682	; 0x6682 <MATCHARGS>
   1bd6c:	89 2b       	or	r24, r25
   1bd6e:	e1 f1       	breq	.+120    	; 0x1bde8 <lif_tests+0x168>
    {
		///@brief format LIF image
		long dir,sectors;
		char *name = argv[ind];
   1bd70:	ac 80       	ldd	r10, Y+4	; 0x04
   1bd72:	bd 80       	ldd	r11, Y+5	; 0x05
		char *label = argv[ind+1];
   1bd74:	8e 80       	ldd	r8, Y+6	; 0x06
   1bd76:	9f 80       	ldd	r9, Y+7	; 0x07
		char *model = argv[ind+2];
   1bd78:	08 84       	ldd	r0, Y+8	; 0x08
   1bd7a:	d9 85       	ldd	r29, Y+9	; 0x09
   1bd7c:	c0 2d       	mov	r28, r0
		if( MATCHI_LEN(model,"hp"))
   1bd7e:	6d ed       	ldi	r22, 0xDD	; 221
   1bd80:	75 e1       	ldi	r23, 0x15	; 21
   1bd82:	ce 01       	movw	r24, r28
   1bd84:	0e 94 7f 33 	call	0x66fe	; 0x66fe <MATCHI_LEN>
   1bd88:	89 2b       	or	r24, r25
   1bd8a:	09 f0       	breq	.+2      	; 0x1bd8e <lif_tests+0x10e>
			model +=2;
   1bd8c:	22 96       	adiw	r28, 0x02	; 2
		if(hpdir_find_drive(model,0, 0))
   1bd8e:	40 e0       	ldi	r20, 0x00	; 0
   1bd90:	50 e0       	ldi	r21, 0x00	; 0
   1bd92:	60 e0       	ldi	r22, 0x00	; 0
   1bd94:	70 e0       	ldi	r23, 0x00	; 0
   1bd96:	ce 01       	movw	r24, r28
   1bd98:	0e 94 1c a4 	call	0x14838	; 0x14838 <hpdir_find_drive>
   1bd9c:	89 2b       	or	r24, r25
   1bd9e:	b9 f0       	breq	.+46     	; 0x1bdce <lif_tests+0x14e>
		{
			dir = lif_dir_count(hpdir.BLOCKS);
   1bda0:	60 91 3a 21 	lds	r22, 0x213A	; 0x80213a <hpdir+0xac>
   1bda4:	70 91 3b 21 	lds	r23, 0x213B	; 0x80213b <hpdir+0xad>
   1bda8:	80 91 3c 21 	lds	r24, 0x213C	; 0x80213c <hpdir+0xae>
   1bdac:	90 91 3d 21 	lds	r25, 0x213D	; 0x80213d <hpdir+0xaf>
   1bdb0:	0e 94 ff a3 	call	0x147fe	; 0x147fe <lif_dir_count>
   1bdb4:	9b 01       	movw	r18, r22
   1bdb6:	ac 01       	movw	r20, r24
			sectors = hpdir.BLOCKS;
			lif_create_image(name, label, dir, sectors);
   1bdb8:	e0 90 3a 21 	lds	r14, 0x213A	; 0x80213a <hpdir+0xac>
   1bdbc:	f0 90 3b 21 	lds	r15, 0x213B	; 0x80213b <hpdir+0xad>
   1bdc0:	00 91 3c 21 	lds	r16, 0x213C	; 0x80213c <hpdir+0xae>
   1bdc4:	10 91 3d 21 	lds	r17, 0x213D	; 0x80213d <hpdir+0xaf>
   1bdc8:	b4 01       	movw	r22, r8
   1bdca:	c5 01       	movw	r24, r10
   1bdcc:	29 c0       	rjmp	.+82     	; 0x1be20 <lif_tests+0x1a0>
			return(1);
		}
		printf("Disk: %s not found in hpdir.ini\n", model);
   1bdce:	ed b7       	in	r30, 0x3d	; 61
   1bdd0:	fe b7       	in	r31, 0x3e	; 62
   1bdd2:	d5 83       	std	Z+5, r29	; 0x05
   1bdd4:	c4 83       	std	Z+4, r28	; 0x04
   1bdd6:	8c e3       	ldi	r24, 0x3C	; 60
   1bdd8:	92 e4       	ldi	r25, 0x42	; 66
   1bdda:	a0 e0       	ldi	r26, 0x00	; 0
   1bddc:	81 83       	std	Z+1, r24	; 0x01
   1bdde:	92 83       	std	Z+2, r25	; 0x02
   1bde0:	a3 83       	std	Z+3, r26	; 0x03
   1bde2:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
   1bde6:	74 c0       	rjmp	.+232    	; 0x1bed0 <lif_tests+0x250>
        return(1);
    }
    if (MATCHARGS(ptr,"create", (ind + 4) ,argc))
   1bde8:	97 01       	movw	r18, r14
   1bdea:	46 e0       	ldi	r20, 0x06	; 6
   1bdec:	50 e0       	ldi	r21, 0x00	; 0
   1bdee:	60 ee       	ldi	r22, 0xE0	; 224
   1bdf0:	75 e1       	ldi	r23, 0x15	; 21
   1bdf2:	c8 01       	movw	r24, r16
   1bdf4:	0e 94 41 33 	call	0x6682	; 0x6682 <MATCHARGS>
   1bdf8:	89 2b       	or	r24, r25
   1bdfa:	a1 f0       	breq	.+40     	; 0x1be24 <lif_tests+0x1a4>
    {
        ///@brief format LIF image
        lif_create_image(argv[ind],argv[ind+1], atol(argv[ind+2]), atol(argv[ind+3]) );
   1bdfc:	88 85       	ldd	r24, Y+8	; 0x08
   1bdfe:	99 85       	ldd	r25, Y+9	; 0x09
   1be00:	0e 94 d8 47 	call	0x8fb0	; 0x8fb0 <atol>
   1be04:	4b 01       	movw	r8, r22
   1be06:	5c 01       	movw	r10, r24
   1be08:	8a 85       	ldd	r24, Y+10	; 0x0a
   1be0a:	9b 85       	ldd	r25, Y+11	; 0x0b
   1be0c:	0e 94 d8 47 	call	0x8fb0	; 0x8fb0 <atol>
   1be10:	7b 01       	movw	r14, r22
   1be12:	8c 01       	movw	r16, r24
   1be14:	6e 81       	ldd	r22, Y+6	; 0x06
   1be16:	7f 81       	ldd	r23, Y+7	; 0x07
   1be18:	a5 01       	movw	r20, r10
   1be1a:	94 01       	movw	r18, r8
   1be1c:	8c 81       	ldd	r24, Y+4	; 0x04
   1be1e:	9d 81       	ldd	r25, Y+5	; 0x05
   1be20:	a8 de       	rcall	.-688    	; 0x1bb72 <lif_create_image>
   1be22:	56 c0       	rjmp	.+172    	; 0x1bed0 <lif_tests+0x250>
        return(1);
    }
    if (MATCHARGS(ptr,"del", (ind + 2) ,argc))
   1be24:	97 01       	movw	r18, r14
   1be26:	44 e0       	ldi	r20, 0x04	; 4
   1be28:	50 e0       	ldi	r21, 0x00	; 0
   1be2a:	67 ee       	ldi	r22, 0xE7	; 231
   1be2c:	75 e1       	ldi	r23, 0x15	; 21
   1be2e:	c8 01       	movw	r24, r16
   1be30:	0e 94 41 33 	call	0x6682	; 0x6682 <MATCHARGS>
   1be34:	89 2b       	or	r24, r25
   1be36:	31 f0       	breq	.+12     	; 0x1be44 <lif_tests+0x1c4>
    {
        lif_del_file(argv[ind],argv[ind+1]);
   1be38:	6e 81       	ldd	r22, Y+6	; 0x06
   1be3a:	7f 81       	ldd	r23, Y+7	; 0x07
   1be3c:	8c 81       	ldd	r24, Y+4	; 0x04
   1be3e:	9d 81       	ldd	r25, Y+5	; 0x05
   1be40:	86 dd       	rcall	.-1268   	; 0x1b94e <lif_del_file>
   1be42:	46 c0       	rjmp	.+140    	; 0x1bed0 <lif_tests+0x250>
        return(1);
    }
    if (MATCHARGS(ptr,"dir", (ind + 1) ,argc))
   1be44:	97 01       	movw	r18, r14
   1be46:	43 e0       	ldi	r20, 0x03	; 3
   1be48:	50 e0       	ldi	r21, 0x00	; 0
   1be4a:	66 ef       	ldi	r22, 0xF6	; 246
   1be4c:	7a e0       	ldi	r23, 0x0A	; 10
   1be4e:	c8 01       	movw	r24, r16
   1be50:	0e 94 41 33 	call	0x6682	; 0x6682 <MATCHARGS>
   1be54:	89 2b       	or	r24, r25
   1be56:	29 f0       	breq	.+10     	; 0x1be62 <lif_tests+0x1e2>
    {
        lif_dir(argv[ind]);
   1be58:	8c 81       	ldd	r24, Y+4	; 0x04
   1be5a:	9d 81       	ldd	r25, Y+5	; 0x05
   1be5c:	0e 94 ad d1 	call	0x1a35a	; 0x1a35a <lif_dir>
   1be60:	37 c0       	rjmp	.+110    	; 0x1bed0 <lif_tests+0x250>
        return(1);
    }
    if (MATCHARGS(ptr,"extractbin", (ind + 3) ,argc))
   1be62:	97 01       	movw	r18, r14
   1be64:	45 e0       	ldi	r20, 0x05	; 5
   1be66:	50 e0       	ldi	r21, 0x00	; 0
   1be68:	6b ee       	ldi	r22, 0xEB	; 235
   1be6a:	75 e1       	ldi	r23, 0x15	; 21
   1be6c:	c8 01       	movw	r24, r16
   1be6e:	0e 94 41 33 	call	0x6682	; 0x6682 <MATCHARGS>
   1be72:	89 2b       	or	r24, r25
   1be74:	41 f0       	breq	.+16     	; 0x1be86 <lif_tests+0x206>
    {

        lif_extract_lif_as_lif(argv[ind],argv[ind+1],argv[ind+2]);
   1be76:	48 85       	ldd	r20, Y+8	; 0x08
   1be78:	59 85       	ldd	r21, Y+9	; 0x09
   1be7a:	6e 81       	ldd	r22, Y+6	; 0x06
   1be7c:	7f 81       	ldd	r23, Y+7	; 0x07
   1be7e:	8c 81       	ldd	r24, Y+4	; 0x04
   1be80:	9d 81       	ldd	r25, Y+5	; 0x05
   1be82:	a4 da       	rcall	.-2744   	; 0x1b3cc <lif_extract_lif_as_lif>
   1be84:	25 c0       	rjmp	.+74     	; 0x1bed0 <lif_tests+0x250>
        return(1);
    }
    if (MATCHARGS(ptr,"extract", (ind + 3) ,argc))
   1be86:	97 01       	movw	r18, r14
   1be88:	45 e0       	ldi	r20, 0x05	; 5
   1be8a:	50 e0       	ldi	r21, 0x00	; 0
   1be8c:	66 ef       	ldi	r22, 0xF6	; 246
   1be8e:	75 e1       	ldi	r23, 0x15	; 21
   1be90:	c8 01       	movw	r24, r16
   1be92:	0e 94 41 33 	call	0x6682	; 0x6682 <MATCHARGS>
   1be96:	89 2b       	or	r24, r25
   1be98:	49 f0       	breq	.+18     	; 0x1beac <lif_tests+0x22c>
    {

        lif_extract_e010_as_ascii(argv[ind],argv[ind+1],argv[ind+2]);
   1be9a:	48 85       	ldd	r20, Y+8	; 0x08
   1be9c:	59 85       	ldd	r21, Y+9	; 0x09
   1be9e:	6e 81       	ldd	r22, Y+6	; 0x06
   1bea0:	7f 81       	ldd	r23, Y+7	; 0x07
   1bea2:	8c 81       	ldd	r24, Y+4	; 0x04
   1bea4:	9d 81       	ldd	r25, Y+5	; 0x05
   1bea6:	0e 94 37 d7 	call	0x1ae6e	; 0x1ae6e <lif_extract_e010_as_ascii>
   1beaa:	12 c0       	rjmp	.+36     	; 0x1bed0 <lif_tests+0x250>
        return(1);
    }
    if (MATCHARGS(ptr,"rename", (ind + 3) ,argc))
   1beac:	97 01       	movw	r18, r14
   1beae:	45 e0       	ldi	r20, 0x05	; 5
   1beb0:	50 e0       	ldi	r21, 0x00	; 0
   1beb2:	63 e0       	ldi	r22, 0x03	; 3
   1beb4:	7b e0       	ldi	r23, 0x0B	; 11
   1beb6:	c8 01       	movw	r24, r16
   1beb8:	0e 94 41 33 	call	0x6682	; 0x6682 <MATCHARGS>
   1bebc:	89 2b       	or	r24, r25
   1bebe:	09 f4       	brne	.+2      	; 0x1bec2 <lif_tests+0x242>
   1bec0:	f1 ce       	rjmp	.-542    	; 0x1bca4 <lif_tests+0x24>
    {
        lif_rename_file(argv[ind],argv[ind+1],argv[ind+2]);
   1bec2:	48 85       	ldd	r20, Y+8	; 0x08
   1bec4:	59 85       	ldd	r21, Y+9	; 0x09
   1bec6:	6e 81       	ldd	r22, Y+6	; 0x06
   1bec8:	7f 81       	ldd	r23, Y+7	; 0x07
   1beca:	8c 81       	ldd	r24, Y+4	; 0x04
   1becc:	9d 81       	ldd	r25, Y+5	; 0x05
   1bece:	d4 dd       	rcall	.-1112   	; 0x1ba78 <lif_rename_file>
        return(1);
   1bed0:	81 e0       	ldi	r24, 0x01	; 1
   1bed2:	90 e0       	ldi	r25, 0x00	; 0
        td02lif(argc,argv);
        return(1);
    }
#endif
    return(0);
}
   1bed4:	0f 90       	pop	r0
   1bed6:	0f 90       	pop	r0
   1bed8:	0f 90       	pop	r0
   1beda:	0f 90       	pop	r0
   1bedc:	0f 90       	pop	r0
   1bede:	df 91       	pop	r29
   1bee0:	cf 91       	pop	r28
   1bee2:	1f 91       	pop	r17
   1bee4:	0f 91       	pop	r16
   1bee6:	ff 90       	pop	r15
   1bee8:	ef 90       	pop	r14
   1beea:	bf 90       	pop	r11
   1beec:	af 90       	pop	r10
   1beee:	9f 90       	pop	r9
   1bef0:	8f 90       	pop	r8
   1bef2:	08 95       	ret

0001bef4 <copyright>:
#include <math.h>

///@brief Display Copyright
///@return void
void copyright()
{
   1bef4:	00 d0       	rcall	.+0      	; 0x1bef6 <copyright+0x2>
   1bef6:	00 d0       	rcall	.+0      	; 0x1bef8 <copyright+0x4>
   1bef8:	1f 92       	push	r1
    printf("Stand alone version of LIF utilities for linux\n");
   1befa:	84 ea       	ldi	r24, 0xA4	; 164
   1befc:	97 e4       	ldi	r25, 0x47	; 71
   1befe:	a0 e0       	ldi	r26, 0x00	; 0
   1bf00:	ed b7       	in	r30, 0x3d	; 61
   1bf02:	fe b7       	in	r31, 0x3e	; 62
   1bf04:	81 83       	std	Z+1, r24	; 0x01
   1bf06:	92 83       	std	Z+2, r25	; 0x02
   1bf08:	a3 83       	std	Z+3, r26	; 0x03
   1bf0a:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    printf("HP85 Disk and Device Emulator\n");
   1bf0e:	85 e8       	ldi	r24, 0x85	; 133
   1bf10:	97 e4       	ldi	r25, 0x47	; 71
   1bf12:	a0 e0       	ldi	r26, 0x00	; 0
   1bf14:	ed b7       	in	r30, 0x3d	; 61
   1bf16:	fe b7       	in	r31, 0x3e	; 62
   1bf18:	81 83       	std	Z+1, r24	; 0x01
   1bf1a:	92 83       	std	Z+2, r25	; 0x02
   1bf1c:	a3 83       	std	Z+3, r26	; 0x03
   1bf1e:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    printf(" (c) 2014-2020 by Mike Gore\n");
   1bf22:	88 e6       	ldi	r24, 0x68	; 104
   1bf24:	97 e4       	ldi	r25, 0x47	; 71
   1bf26:	a0 e0       	ldi	r26, 0x00	; 0
   1bf28:	ed b7       	in	r30, 0x3d	; 61
   1bf2a:	fe b7       	in	r31, 0x3e	; 62
   1bf2c:	81 83       	std	Z+1, r24	; 0x01
   1bf2e:	92 83       	std	Z+2, r25	; 0x02
   1bf30:	a3 83       	std	Z+3, r26	; 0x03
   1bf32:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    printf(" GNU version 3\n");
   1bf36:	88 e5       	ldi	r24, 0x58	; 88
   1bf38:	97 e4       	ldi	r25, 0x47	; 71
   1bf3a:	a0 e0       	ldi	r26, 0x00	; 0
   1bf3c:	ed b7       	in	r30, 0x3d	; 61
   1bf3e:	fe b7       	in	r31, 0x3e	; 62
   1bf40:	81 83       	std	Z+1, r24	; 0x01
   1bf42:	92 83       	std	Z+2, r25	; 0x02
   1bf44:	a3 83       	std	Z+3, r26	; 0x03
   1bf46:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    printf("-> https://github.com/magore/hp85disk\n");
   1bf4a:	81 e3       	ldi	r24, 0x31	; 49
   1bf4c:	97 e4       	ldi	r25, 0x47	; 71
   1bf4e:	a0 e0       	ldi	r26, 0x00	; 0
   1bf50:	ed b7       	in	r30, 0x3d	; 61
   1bf52:	fe b7       	in	r31, 0x3e	; 62
   1bf54:	81 83       	std	Z+1, r24	; 0x01
   1bf56:	92 83       	std	Z+2, r25	; 0x02
   1bf58:	a3 83       	std	Z+3, r26	; 0x03
   1bf5a:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    printf("   GIT last pushed:   %s\n", GIT_VERSION);
   1bf5e:	8e ef       	ldi	r24, 0xFE	; 254
   1bf60:	95 e1       	ldi	r25, 0x15	; 21
   1bf62:	ed b7       	in	r30, 0x3d	; 61
   1bf64:	fe b7       	in	r31, 0x3e	; 62
   1bf66:	95 83       	std	Z+5, r25	; 0x05
   1bf68:	84 83       	std	Z+4, r24	; 0x04
   1bf6a:	87 e1       	ldi	r24, 0x17	; 23
   1bf6c:	97 e4       	ldi	r25, 0x47	; 71
   1bf6e:	a0 e0       	ldi	r26, 0x00	; 0
   1bf70:	81 83       	std	Z+1, r24	; 0x01
   1bf72:	92 83       	std	Z+2, r25	; 0x02
   1bf74:	a3 83       	std	Z+3, r26	; 0x03
   1bf76:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    printf("   Last updated file: %s\n", LOCAL_MOD);
   1bf7a:	82 e2       	ldi	r24, 0x22	; 34
   1bf7c:	96 e1       	ldi	r25, 0x16	; 22
   1bf7e:	ed b7       	in	r30, 0x3d	; 61
   1bf80:	fe b7       	in	r31, 0x3e	; 62
   1bf82:	95 83       	std	Z+5, r25	; 0x05
   1bf84:	84 83       	std	Z+4, r24	; 0x04
   1bf86:	8d ef       	ldi	r24, 0xFD	; 253
   1bf88:	96 e4       	ldi	r25, 0x46	; 70
   1bf8a:	a0 e0       	ldi	r26, 0x00	; 0
   1bf8c:	81 83       	std	Z+1, r24	; 0x01
   1bf8e:	92 83       	std	Z+2, r25	; 0x02
   1bf90:	a3 83       	std	Z+3, r26	; 0x03
   1bf92:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    printf("\n");
   1bf96:	8b ef       	ldi	r24, 0xFB	; 251
   1bf98:	96 e4       	ldi	r25, 0x46	; 70
   1bf9a:	a0 e0       	ldi	r26, 0x00	; 0
   1bf9c:	ed b7       	in	r30, 0x3d	; 61
   1bf9e:	fe b7       	in	r31, 0x3e	; 62
   1bfa0:	81 83       	std	Z+1, r24	; 0x01
   1bfa2:	92 83       	std	Z+2, r25	; 0x02
   1bfa4:	a3 83       	std	Z+3, r26	; 0x03
   1bfa6:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
}
   1bfaa:	0f 90       	pop	r0
   1bfac:	0f 90       	pop	r0
   1bfae:	0f 90       	pop	r0
   1bfb0:	0f 90       	pop	r0
   1bfb2:	0f 90       	pop	r0
   1bfb4:	08 95       	ret

0001bfb6 <delay_tests>:
/// @brief  perform tests on delay functions
///
/// This included measurement of avr-libc delays
/// @return  void
void delay_tests()
{
   1bfb6:	00 d0       	rcall	.+0      	; 0x1bfb8 <delay_tests+0x2>
   1bfb8:	1f 92       	push	r1
    printf("System delays\n");
   1bfba:	8c ee       	ldi	r24, 0xEC	; 236
   1bfbc:	96 e4       	ldi	r25, 0x46	; 70
   1bfbe:	a0 e0       	ldi	r26, 0x00	; 0
   1bfc0:	ed b7       	in	r30, 0x3d	; 61
   1bfc2:	fe b7       	in	r31, 0x3e	; 62
   1bfc4:	81 83       	std	Z+1, r24	; 0x01
   1bfc6:	92 83       	std	Z+2, r25	; 0x02
   1bfc8:	a3 83       	std	Z+3, r26	; 0x03
   1bfca:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>

    clock_elapsed_begin();
   1bfce:	0e 94 62 36 	call	0x6cc4	; 0x6cc4 <clock_elapsed_begin>
    clock_elapsed_end("elapsed timer overhead");
   1bfd2:	86 e4       	ldi	r24, 0x46	; 70
   1bfd4:	96 e1       	ldi	r25, 0x16	; 22
   1bfd6:	0e 94 68 36 	call	0x6cd0	; 0x6cd0 <clock_elapsed_end>

    clock_elapsed_begin();
   1bfda:	0e 94 62 36 	call	0x6cc4	; 0x6cc4 <clock_elapsed_begin>
   1bfde:	83 ef       	ldi	r24, 0xF3	; 243
   1bfe0:	91 e0       	ldi	r25, 0x01	; 1
   1bfe2:	01 97       	sbiw	r24, 0x01	; 1
   1bfe4:	f1 f7       	brne	.-4      	; 0x1bfe2 <delay_tests+0x2c>
   1bfe6:	00 c0       	rjmp	.+0      	; 0x1bfe8 <delay_tests+0x32>
   1bfe8:	00 00       	nop
    _delay_us(100);
    clock_elapsed_end("_delay_us(100)");
   1bfea:	8d e5       	ldi	r24, 0x5D	; 93
   1bfec:	96 e1       	ldi	r25, 0x16	; 22
   1bfee:	0e 94 68 36 	call	0x6cd0	; 0x6cd0 <clock_elapsed_end>

    clock_elapsed_begin();
   1bff2:	0e 94 62 36 	call	0x6cc4	; 0x6cc4 <clock_elapsed_begin>
   1bff6:	e3 ec       	ldi	r30, 0xC3	; 195
   1bff8:	f9 e0       	ldi	r31, 0x09	; 9
   1bffa:	31 97       	sbiw	r30, 0x01	; 1
   1bffc:	f1 f7       	brne	.-4      	; 0x1bffa <delay_tests+0x44>
   1bffe:	00 c0       	rjmp	.+0      	; 0x1c000 <delay_tests+0x4a>
   1c000:	00 00       	nop
    _delay_us(500);
    clock_elapsed_end("_delay_us(500)");
   1c002:	8c e6       	ldi	r24, 0x6C	; 108
   1c004:	96 e1       	ldi	r25, 0x16	; 22
   1c006:	0e 94 68 36 	call	0x6cd0	; 0x6cd0 <clock_elapsed_end>

    printf("My delays\n");
   1c00a:	81 ee       	ldi	r24, 0xE1	; 225
   1c00c:	96 e4       	ldi	r25, 0x46	; 70
   1c00e:	a0 e0       	ldi	r26, 0x00	; 0
   1c010:	ed b7       	in	r30, 0x3d	; 61
   1c012:	fe b7       	in	r31, 0x3e	; 62
   1c014:	81 83       	std	Z+1, r24	; 0x01
   1c016:	92 83       	std	Z+2, r25	; 0x02
   1c018:	a3 83       	std	Z+3, r26	; 0x03
   1c01a:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>

    clock_elapsed_begin();
   1c01e:	0e 94 62 36 	call	0x6cc4	; 0x6cc4 <clock_elapsed_begin>
    delayus(100U);
   1c022:	64 e6       	ldi	r22, 0x64	; 100
   1c024:	70 e0       	ldi	r23, 0x00	; 0
   1c026:	80 e0       	ldi	r24, 0x00	; 0
   1c028:	90 e0       	ldi	r25, 0x00	; 0
   1c02a:	0e 94 ca 29 	call	0x5394	; 0x5394 <delayus>
    clock_elapsed_end("delayus(100)");
   1c02e:	8b e7       	ldi	r24, 0x7B	; 123
   1c030:	96 e1       	ldi	r25, 0x16	; 22
   1c032:	0e 94 68 36 	call	0x6cd0	; 0x6cd0 <clock_elapsed_end>

    clock_elapsed_begin();
   1c036:	0e 94 62 36 	call	0x6cc4	; 0x6cc4 <clock_elapsed_begin>
    delayus(500U);
   1c03a:	64 ef       	ldi	r22, 0xF4	; 244
   1c03c:	71 e0       	ldi	r23, 0x01	; 1
   1c03e:	80 e0       	ldi	r24, 0x00	; 0
   1c040:	90 e0       	ldi	r25, 0x00	; 0
   1c042:	0e 94 ca 29 	call	0x5394	; 0x5394 <delayus>
    clock_elapsed_end("delayus(500)");
   1c046:	88 e8       	ldi	r24, 0x88	; 136
   1c048:	96 e1       	ldi	r25, 0x16	; 22
   1c04a:	0e 94 68 36 	call	0x6cd0	; 0x6cd0 <clock_elapsed_end>

    clock_elapsed_begin();
   1c04e:	0e 94 62 36 	call	0x6cc4	; 0x6cc4 <clock_elapsed_begin>
    delayus(1100);
   1c052:	6c e4       	ldi	r22, 0x4C	; 76
   1c054:	74 e0       	ldi	r23, 0x04	; 4
   1c056:	80 e0       	ldi	r24, 0x00	; 0
   1c058:	90 e0       	ldi	r25, 0x00	; 0
   1c05a:	0e 94 ca 29 	call	0x5394	; 0x5394 <delayus>
    clock_elapsed_end("delayus(1100)");
   1c05e:	85 e9       	ldi	r24, 0x95	; 149
   1c060:	96 e1       	ldi	r25, 0x16	; 22
   1c062:	0e 94 68 36 	call	0x6cd0	; 0x6cd0 <clock_elapsed_end>

    clock_elapsed_begin();
   1c066:	0e 94 62 36 	call	0x6cc4	; 0x6cc4 <clock_elapsed_begin>
    delayms(1000);
   1c06a:	68 ee       	ldi	r22, 0xE8	; 232
   1c06c:	73 e0       	ldi	r23, 0x03	; 3
   1c06e:	80 e0       	ldi	r24, 0x00	; 0
   1c070:	90 e0       	ldi	r25, 0x00	; 0
   1c072:	0e 94 f7 29 	call	0x53ee	; 0x53ee <delayms>
    clock_elapsed_end("delayms(1100)");
   1c076:	83 ea       	ldi	r24, 0xA3	; 163
   1c078:	96 e1       	ldi	r25, 0x16	; 22
   1c07a:	0e 94 68 36 	call	0x6cd0	; 0x6cd0 <clock_elapsed_end>
}
   1c07e:	0f 90       	pop	r0
   1c080:	0f 90       	pop	r0
   1c082:	0f 90       	pop	r0
   1c084:	08 95       	ret

0001c086 <help>:
/// @brief  Display the main help menu - calls all other help menus
/// @return  void
/// @see gpib_help()
/// @see fatfs_help()
void help()
{
   1c086:	00 d0       	rcall	.+0      	; 0x1c088 <help+0x2>

    copyright();
   1c088:	1f 92       	push	r1

#ifdef FATFS_TESTS
    fatfs_help(0);
   1c08a:	34 df       	rcall	.-408    	; 0x1bef4 <copyright>
   1c08c:	80 e0       	ldi	r24, 0x00	; 0
   1c08e:	90 e0       	ldi	r25, 0x00	; 0
   1c090:	0e 94 e5 73 	call	0xe7ca	; 0xe7ca <fatfs_help>
#endif

#ifdef POSIX_TESTS
    posix_help(0);
   1c094:	80 e0       	ldi	r24, 0x00	; 0
   1c096:	90 e0       	ldi	r25, 0x00	; 0
   1c098:	0e 94 24 7f 	call	0xfe48	; 0xfe48 <posix_help>
#endif

#ifdef LIF_SUPPORT
    lif_help(0);
   1c09c:	80 e0       	ldi	r24, 0x00	; 0
   1c09e:	90 e0       	ldi	r25, 0x00	; 0
   1c0a0:	0e 94 1d c0 	call	0x1803a	; 0x1803a <lif_help>
#endif

    gpib_help(0);
   1c0a4:	80 e0       	ldi	r24, 0x00	; 0
   1c0a6:	90 e0       	ldi	r25, 0x00	; 0
   1c0a8:	0e 94 ca 91 	call	0x12394	; 0x12394 <gpib_help>

    printf(
   1c0ac:	87 eb       	ldi	r24, 0xB7	; 183
   1c0ae:	96 e4       	ldi	r25, 0x46	; 70
   1c0b0:	a0 e0       	ldi	r26, 0x00	; 0
   1c0b2:	ed b7       	in	r30, 0x3d	; 61
   1c0b4:	fe b7       	in	r31, 0x3e	; 62
   1c0b6:	81 83       	std	Z+1, r24	; 0x01
   1c0b8:	92 83       	std	Z+2, r25	; 0x02
   1c0ba:	a3 83       	std	Z+3, r26	; 0x03
   1c0bc:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
        "setdate\n"
        "time\n"
        "reset\n"
        "\n"
        );
}
   1c0c0:	0f 90       	pop	r0
   1c0c2:	0f 90       	pop	r0
   1c0c4:	0f 90       	pop	r0
   1c0c6:	08 95       	ret

0001c0c8 <task>:
/// parse the result and call various user functions.
/// ? will return a list of fuctions and paramters permitted
/// @param[in] gpib - if non-zero run gpib while there are no user commands
/// @return  void
void task(uint8_t gpib)
{
   1c0c8:	a9 ee       	ldi	r26, 0xE9	; 233
   1c0ca:	b0 e0       	ldi	r27, 0x00	; 0
   1c0cc:	e9 e6       	ldi	r30, 0x69	; 105
   1c0ce:	f0 ee       	ldi	r31, 0xE0	; 224
   1c0d0:	6b c3       	rjmp	.+1750   	; 0x1c7a8 <__prologue_saves__+0x18>
    int ind;
    int argc;
    char *argv[50];
    char line[128];

    if(gpib)
   1c0d2:	81 11       	cpse	r24, r1
        gpib_task();
   1c0d4:	0e 94 68 91 	call	0x122d0	; 0x122d0 <gpib_task>

    if(!kbhit(0))
   1c0d8:	80 e0       	ldi	r24, 0x00	; 0
   1c0da:	0e 94 7e 2b 	call	0x56fc	; 0x56fc <uart_rx_count>
   1c0de:	89 2b       	or	r24, r25
   1c0e0:	09 f4       	brne	.+2      	; 0x1c0e4 <task+0x1c>
   1c0e2:	b5 c0       	rjmp	.+362    	; 0x1c24e <task+0x186>
        return;

    printf("\n>");
   1c0e4:	84 eb       	ldi	r24, 0xB4	; 180
   1c0e6:	96 e4       	ldi	r25, 0x46	; 70
   1c0e8:	a0 e0       	ldi	r26, 0x00	; 0
   1c0ea:	ed b7       	in	r30, 0x3d	; 61
   1c0ec:	fe b7       	in	r31, 0x3e	; 62
   1c0ee:	81 83       	std	Z+1, r24	; 0x01
   1c0f0:	92 83       	std	Z+2, r25	; 0x02
   1c0f2:	a3 83       	std	Z+3, r26	; 0x03
   1c0f4:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    fgets(line,sizeof(line)-2,stdin);
   1c0f8:	40 91 55 1c 	lds	r20, 0x1C55	; 0x801c55 <__iob>
   1c0fc:	50 91 56 1c 	lds	r21, 0x1C56	; 0x801c56 <__iob+0x1>
   1c100:	6e e7       	ldi	r22, 0x7E	; 126
   1c102:	70 e0       	ldi	r23, 0x00	; 0
   1c104:	ce 01       	movw	r24, r28
   1c106:	06 96       	adiw	r24, 0x06	; 6
   1c108:	0e 94 1e 77 	call	0xee3c	; 0xee3c <fgets>
    argc = split_args(line,argv,50);
   1c10c:	42 e3       	ldi	r20, 0x32	; 50
   1c10e:	50 e0       	ldi	r21, 0x00	; 0
   1c110:	be 01       	movw	r22, r28
   1c112:	6a 57       	subi	r22, 0x7A	; 122
   1c114:	7f 4f       	sbci	r23, 0xFF	; 255
   1c116:	ce 01       	movw	r24, r28
   1c118:	06 96       	adiw	r24, 0x06	; 6
   1c11a:	0e 94 99 33 	call	0x6732	; 0x6732 <split_args>
   1c11e:	8c 01       	movw	r16, r24
    printf("   argc = %d\n", argc);
    for(i=0;i<argc;++i)
        printf("   [%s]\n", argv[i]);
#endif
    ind = 0;
    ptr = argv[ind++];
   1c120:	ca 57       	subi	r28, 0x7A	; 122
   1c122:	df 4f       	sbci	r29, 0xFF	; 255
   1c124:	e8 80       	ld	r14, Y
   1c126:	f9 80       	ldd	r15, Y+1	; 0x01
   1c128:	c6 58       	subi	r28, 0x86	; 134
   1c12a:	d0 40       	sbci	r29, 0x00	; 0

    if(!ptr)
   1c12c:	e1 14       	cp	r14, r1
   1c12e:	f1 04       	cpc	r15, r1
   1c130:	09 f4       	brne	.+2      	; 0x1c134 <task+0x6c>
   1c132:	8d c0       	rjmp	.+282    	; 0x1c24e <task+0x186>
        return;

    if (MATCHARGS(ptr,"delay_tests",(ind+0),argc))
   1c134:	9c 01       	movw	r18, r24
   1c136:	41 e0       	ldi	r20, 0x01	; 1
   1c138:	50 e0       	ldi	r21, 0x00	; 0
   1c13a:	61 eb       	ldi	r22, 0xB1	; 177
   1c13c:	76 e1       	ldi	r23, 0x16	; 22
   1c13e:	c7 01       	movw	r24, r14
   1c140:	0e 94 41 33 	call	0x6682	; 0x6682 <MATCHARGS>
   1c144:	89 2b       	or	r24, r25
    {
        delay_tests();
   1c146:	11 f0       	breq	.+4      	; 0x1c14c <task+0x84>
   1c148:	36 df       	rcall	.-404    	; 0x1bfb6 <delay_tests>
        return;
   1c14a:	81 c0       	rjmp	.+258    	; 0x1c24e <task+0x186>

    }
    if ( MATCHARGS(ptr,"time",(ind+0),argc))
   1c14c:	98 01       	movw	r18, r16
   1c14e:	41 e0       	ldi	r20, 0x01	; 1
   1c150:	50 e0       	ldi	r21, 0x00	; 0
   1c152:	6d eb       	ldi	r22, 0xBD	; 189
   1c154:	76 e1       	ldi	r23, 0x16	; 22
   1c156:	c7 01       	movw	r24, r14
   1c158:	0e 94 41 33 	call	0x6682	; 0x6682 <MATCHARGS>
   1c15c:	89 2b       	or	r24, r25
   1c15e:	19 f5       	brne	.+70     	; 0x1c1a6 <task+0xde>
    {
        display_clock();
        return;
    }
    if ( MATCHARGS(ptr,"reset",(ind+0),argc))
   1c160:	98 01       	movw	r18, r16
   1c162:	41 e0       	ldi	r20, 0x01	; 1
   1c164:	50 e0       	ldi	r21, 0x00	; 0
   1c166:	65 ef       	ldi	r22, 0xF5	; 245
   1c168:	7c e0       	ldi	r23, 0x0C	; 12
   1c16a:	c7 01       	movw	r24, r14
   1c16c:	0e 94 41 33 	call	0x6682	; 0x6682 <MATCHARGS>
   1c170:	89 2b       	or	r24, r25
   1c172:	69 f0       	breq	.+26     	; 0x1c18e <task+0xc6>
    {
		cli();	
   1c174:	f8 94       	cli
		uart_rx_flush(0);
   1c176:	80 e0       	ldi	r24, 0x00	; 0
   1c178:	0e 94 3f 2a 	call	0x547e	; 0x547e <uart_rx_flush>
		cli();	
   1c17c:	f8 94       	cli
		MCUSR = (1 << EXTRF);
   1c17e:	82 e0       	ldi	r24, 0x02	; 2
   1c180:	84 bf       	out	0x34, r24	; 52
        RESET();
   1c182:	e0 91 45 02 	lds	r30, 0x0245	; 0x800245 <RESET>
   1c186:	f0 91 46 02 	lds	r31, 0x0246	; 0x800246 <RESET+0x1>
   1c18a:	09 95       	icall
		// should not return!
        return;
   1c18c:	60 c0       	rjmp	.+192    	; 0x1c24e <task+0x186>
    }
    if ( MATCHARGS(ptr,"setdate",(ind+0),argc))
   1c18e:	98 01       	movw	r18, r16
   1c190:	41 e0       	ldi	r20, 0x01	; 1
   1c192:	50 e0       	ldi	r21, 0x00	; 0
   1c194:	62 ec       	ldi	r22, 0xC2	; 194
   1c196:	76 e1       	ldi	r23, 0x16	; 22
   1c198:	c7 01       	movw	r24, r14
   1c19a:	0e 94 41 33 	call	0x6682	; 0x6682 <MATCHARGS>
   1c19e:	89 2b       	or	r24, r25
   1c1a0:	29 f0       	breq	.+10     	; 0x1c1ac <task+0xe4>
    {
        setdate();
   1c1a2:	0e 94 77 3c 	call	0x78ee	; 0x78ee <setdate>
        display_clock();
   1c1a6:	0e 94 93 3e 	call	0x7d26	; 0x7d26 <display_clock>
        return;
   1c1aa:	51 c0       	rjmp	.+162    	; 0x1c24e <task+0x186>
    }
    if ( MATCHARGS(ptr,"mem",(ind+0),argc))
   1c1ac:	98 01       	movw	r18, r16
   1c1ae:	41 e0       	ldi	r20, 0x01	; 1
   1c1b0:	50 e0       	ldi	r21, 0x00	; 0
   1c1b2:	6a ec       	ldi	r22, 0xCA	; 202
   1c1b4:	76 e1       	ldi	r23, 0x16	; 22
   1c1b6:	c7 01       	movw	r24, r14
   1c1b8:	0e 94 41 33 	call	0x6682	; 0x6682 <MATCHARGS>
   1c1bc:	89 2b       	or	r24, r25
   1c1be:	19 f0       	breq	.+6      	; 0x1c1c6 <task+0xfe>
    {
        PrintFree();
   1c1c0:	0e 94 b8 28 	call	0x5170	; 0x5170 <PrintFree>
        return;
   1c1c4:	44 c0       	rjmp	.+136    	; 0x1c24e <task+0x186>

    }
    if ( MATCHARGS(ptr,"help",(ind+0),argc) || MATCHARGS(ptr,"?",(ind+0),argc))
   1c1c6:	98 01       	movw	r18, r16
   1c1c8:	41 e0       	ldi	r20, 0x01	; 1
   1c1ca:	50 e0       	ldi	r21, 0x00	; 0
   1c1cc:	6c eb       	ldi	r22, 0xBC	; 188
   1c1ce:	75 e1       	ldi	r23, 0x15	; 21
   1c1d0:	c7 01       	movw	r24, r14
   1c1d2:	0e 94 41 33 	call	0x6682	; 0x6682 <MATCHARGS>
   1c1d6:	89 2b       	or	r24, r25
    {
        help();
   1c1d8:	11 f0       	breq	.+4      	; 0x1c1de <task+0x116>
   1c1da:	55 df       	rcall	.-342    	; 0x1c086 <help>
        return;
   1c1dc:	38 c0       	rjmp	.+112    	; 0x1c24e <task+0x186>
    {
        PrintFree();
        return;

    }
    if ( MATCHARGS(ptr,"help",(ind+0),argc) || MATCHARGS(ptr,"?",(ind+0),argc))
   1c1de:	98 01       	movw	r18, r16
   1c1e0:	41 e0       	ldi	r20, 0x01	; 1
   1c1e2:	50 e0       	ldi	r21, 0x00	; 0
   1c1e4:	62 ec       	ldi	r22, 0xC2	; 194
   1c1e6:	75 e1       	ldi	r23, 0x15	; 21
   1c1e8:	c7 01       	movw	r24, r14
   1c1ea:	0e 94 41 33 	call	0x6682	; 0x6682 <MATCHARGS>
   1c1ee:	89 2b       	or	r24, r25
   1c1f0:	a1 f7       	brne	.-24     	; 0x1c1da <task+0x112>
    {
        help();
        return;
    }

    if(gpib_tests(argc,argv))
   1c1f2:	be 01       	movw	r22, r28
   1c1f4:	6a 57       	subi	r22, 0x7A	; 122
   1c1f6:	7f 4f       	sbci	r23, 0xFF	; 255
   1c1f8:	c8 01       	movw	r24, r16
   1c1fa:	0e 94 eb 91 	call	0x123d6	; 0x123d6 <gpib_tests>
   1c1fe:	89 2b       	or	r24, r25
   1c200:	19 f0       	breq	.+6      	; 0x1c208 <task+0x140>
    {
        // Restore GPIB BUS states
        gpib_init_devices();
   1c202:	0e 94 04 8d 	call	0x11a08	; 0x11a08 <gpib_init_devices>
        return;
   1c206:	23 c0       	rjmp	.+70     	; 0x1c24e <task+0x186>
    }

#ifdef POSIX_TESTS
    if(posix_tests(argc,argv))
   1c208:	be 01       	movw	r22, r28
   1c20a:	6a 57       	subi	r22, 0x7A	; 122
   1c20c:	7f 4f       	sbci	r23, 0xFF	; 255
   1c20e:	c8 01       	movw	r24, r16
   1c210:	0e 94 95 82 	call	0x1052a	; 0x1052a <posix_tests>
   1c214:	89 2b       	or	r24, r25
   1c216:	d9 f4       	brne	.+54     	; 0x1c24e <task+0x186>
        return;
#endif

#ifdef FATFS_TESTS
    if(fatfs_tests(argc,argv))
   1c218:	be 01       	movw	r22, r28
   1c21a:	6a 57       	subi	r22, 0x7A	; 122
   1c21c:	7f 4f       	sbci	r23, 0xFF	; 255
   1c21e:	c8 01       	movw	r24, r16
   1c220:	0e 94 ff 74 	call	0xe9fe	; 0xe9fe <fatfs_tests>
   1c224:	89 2b       	or	r24, r25
   1c226:	99 f4       	brne	.+38     	; 0x1c24e <task+0x186>
        return;
#endif

#ifdef LIF_SUPPORT
    if(lif_tests(argc,argv))
   1c228:	be 01       	movw	r22, r28
   1c22a:	6a 57       	subi	r22, 0x7A	; 122
   1c22c:	7f 4f       	sbci	r23, 0xFF	; 255
   1c22e:	c8 01       	movw	r24, r16
   1c230:	27 dd       	rcall	.-1458   	; 0x1bc80 <lif_tests>
   1c232:	89 2b       	or	r24, r25
   1c234:	61 f4       	brne	.+24     	; 0x1c24e <task+0x186>
        return;
#endif
    printf("Error:[%s]\n",ptr);
   1c236:	ed b7       	in	r30, 0x3d	; 61
   1c238:	fe b7       	in	r31, 0x3e	; 62
   1c23a:	f5 82       	std	Z+5, r15	; 0x05
   1c23c:	e4 82       	std	Z+4, r14	; 0x04
   1c23e:	88 ea       	ldi	r24, 0xA8	; 168
   1c240:	96 e4       	ldi	r25, 0x46	; 70
   1c242:	a0 e0       	ldi	r26, 0x00	; 0
   1c244:	81 83       	std	Z+1, r24	; 0x01
   1c246:	92 83       	std	Z+2, r25	; 0x02
   1c248:	a3 83       	std	Z+3, r26	; 0x03
   1c24a:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
}
   1c24e:	c7 51       	subi	r28, 0x17	; 23
   1c250:	df 4f       	sbci	r29, 0xFF	; 255
   1c252:	e6 e0       	ldi	r30, 0x06	; 6
   1c254:	c5 c2       	rjmp	.+1418   	; 0x1c7e0 <__epilogue_restores__+0x18>

0001c256 <main>:


/// @brief  main() for gpib project
/// @return  should never return!
int main(void)
{
   1c256:	cf 93       	push	r28
   1c258:	df 93       	push	r29
   1c25a:	cd b7       	in	r28, 0x3d	; 61
   1c25c:	de b7       	in	r29, 0x3e	; 62
   1c25e:	63 97       	sbiw	r28, 0x13	; 19
   1c260:	0f b6       	in	r0, 0x3f	; 63
   1c262:	f8 94       	cli
   1c264:	de bf       	out	0x3e, r29	; 62
   1c266:	0f be       	out	0x3f, r0	; 63
   1c268:	cd bf       	out	0x3d, r28	; 61
    ts_t ts;
    uint32_t actual,baud;

    ///@ initialize bus state as soon as practical
    gpib_bus_init();
   1c26a:	0e 94 16 86 	call	0x10c2c	; 0x10c2c <gpib_bus_init>
    // BAUD setting moved to Makefile
    baud = BAUD;

    ///@ Initialize UART early
	/// Returns actual BAUD rate - possible with hardware - may differ slightly
    actual = uart_init(0, baud); // Serial Port Initialize
   1c26e:	40 e0       	ldi	r20, 0x00	; 0
   1c270:	52 ec       	ldi	r21, 0xC2	; 194
   1c272:	61 e0       	ldi	r22, 0x01	; 1
   1c274:	70 e0       	ldi	r23, 0x00	; 0
   1c276:	80 e0       	ldi	r24, 0x00	; 0
   1c278:	0e 94 ea 2a 	call	0x55d4	; 0x55d4 <uart_init>
   1c27c:	6b 01       	movw	r12, r22
   1c27e:	7c 01       	movw	r14, r24

    ///@brief Power up delay
    delayms(200); 
   1c280:	68 ec       	ldi	r22, 0xC8	; 200
   1c282:	70 e0       	ldi	r23, 0x00	; 0
   1c284:	80 e0       	ldi	r24, 0x00	; 0
   1c286:	90 e0       	ldi	r25, 0x00	; 0
   1c288:	0e 94 f7 29 	call	0x53ee	; 0x53ee <delayms>

    sep();
   1c28c:	0e 94 03 33 	call	0x6606	; 0x6606 <sep>
    printf("Start\n");
   1c290:	81 ea       	ldi	r24, 0xA1	; 161
   1c292:	96 e4       	ldi	r25, 0x46	; 70
   1c294:	a0 e0       	ldi	r26, 0x00	; 0
   1c296:	ed b7       	in	r30, 0x3d	; 61
   1c298:	fe b7       	in	r31, 0x3e	; 62
   1c29a:	81 83       	std	Z+1, r24	; 0x01
   1c29c:	92 83       	std	Z+2, r25	; 0x02
   1c29e:	a3 83       	std	Z+3, r26	; 0x03
   1c2a0:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    printf("CPU Clock = %lu\n", F_CPU);
   1c2a4:	80 e0       	ldi	r24, 0x00	; 0
   1c2a6:	9d e2       	ldi	r25, 0x2D	; 45
   1c2a8:	a1 e3       	ldi	r26, 0x31	; 49
   1c2aa:	b1 e0       	ldi	r27, 0x01	; 1
   1c2ac:	ed b7       	in	r30, 0x3d	; 61
   1c2ae:	fe b7       	in	r31, 0x3e	; 62
   1c2b0:	84 83       	std	Z+4, r24	; 0x04
   1c2b2:	95 83       	std	Z+5, r25	; 0x05
   1c2b4:	a6 83       	std	Z+6, r26	; 0x06
   1c2b6:	b7 83       	std	Z+7, r27	; 0x07
   1c2b8:	80 e9       	ldi	r24, 0x90	; 144
   1c2ba:	96 e4       	ldi	r25, 0x46	; 70
   1c2bc:	a0 e0       	ldi	r26, 0x00	; 0
   1c2be:	81 83       	std	Z+1, r24	; 0x01
   1c2c0:	92 83       	std	Z+2, r25	; 0x02
   1c2c2:	a3 83       	std	Z+3, r26	; 0x03
   1c2c4:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    printf("Requested Baud Rate: %ld, Actual: %ld\n", (long)baud, (long)actual);
   1c2c8:	ed b7       	in	r30, 0x3d	; 61
   1c2ca:	fe b7       	in	r31, 0x3e	; 62
   1c2cc:	c0 86       	std	Z+8, r12	; 0x08
   1c2ce:	d1 86       	std	Z+9, r13	; 0x09
   1c2d0:	e2 86       	std	Z+10, r14	; 0x0a
   1c2d2:	f3 86       	std	Z+11, r15	; 0x0b
   1c2d4:	80 e0       	ldi	r24, 0x00	; 0
   1c2d6:	92 ec       	ldi	r25, 0xC2	; 194
   1c2d8:	a1 e0       	ldi	r26, 0x01	; 1
   1c2da:	b0 e0       	ldi	r27, 0x00	; 0
   1c2dc:	84 83       	std	Z+4, r24	; 0x04
   1c2de:	95 83       	std	Z+5, r25	; 0x05
   1c2e0:	a6 83       	std	Z+6, r26	; 0x06
   1c2e2:	b7 83       	std	Z+7, r27	; 0x07
   1c2e4:	89 e6       	ldi	r24, 0x69	; 105
   1c2e6:	96 e4       	ldi	r25, 0x46	; 70
   1c2e8:	a0 e0       	ldi	r26, 0x00	; 0
   1c2ea:	81 83       	std	Z+1, r24	; 0x01
   1c2ec:	92 83       	std	Z+2, r25	; 0x02
   1c2ee:	a3 83       	std	Z+3, r26	; 0x03
   1c2f0:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>

    init_timers();
   1c2f4:	0e 94 e9 36 	call	0x6dd2	; 0x6dd2 <init_timers>

    sep();
   1c2f8:	0e 94 03 33 	call	0x6606	; 0x6606 <sep>
    printf("HP85 Disk and Device Emulator\n");
   1c2fc:	8a e4       	ldi	r24, 0x4A	; 74
   1c2fe:	96 e4       	ldi	r25, 0x46	; 70
   1c300:	a0 e0       	ldi	r26, 0x00	; 0
   1c302:	ed b7       	in	r30, 0x3d	; 61
   1c304:	fe b7       	in	r31, 0x3e	; 62
   1c306:	81 83       	std	Z+1, r24	; 0x01
   1c308:	92 83       	std	Z+2, r25	; 0x02
   1c30a:	a3 83       	std	Z+3, r26	; 0x03
   1c30c:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    printf(" (C) 2014-2020 by Mike Gore\n");
   1c310:	8d e2       	ldi	r24, 0x2D	; 45
   1c312:	96 e4       	ldi	r25, 0x46	; 70
   1c314:	a0 e0       	ldi	r26, 0x00	; 0
   1c316:	ed b7       	in	r30, 0x3d	; 61
   1c318:	fe b7       	in	r31, 0x3e	; 62
   1c31a:	81 83       	std	Z+1, r24	; 0x01
   1c31c:	92 83       	std	Z+2, r25	; 0x02
   1c31e:	a3 83       	std	Z+3, r26	; 0x03
   1c320:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
	printf(" GNU version 3\n");
   1c324:	8d e1       	ldi	r24, 0x1D	; 29
   1c326:	96 e4       	ldi	r25, 0x46	; 70
   1c328:	a0 e0       	ldi	r26, 0x00	; 0
   1c32a:	ed b7       	in	r30, 0x3d	; 61
   1c32c:	fe b7       	in	r31, 0x3e	; 62
   1c32e:	81 83       	std	Z+1, r24	; 0x01
   1c330:	92 83       	std	Z+2, r25	; 0x02
   1c332:	a3 83       	std	Z+3, r26	; 0x03
   1c334:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    printf("-> https://github.com/magore/hp85disk\n");
   1c338:	86 ef       	ldi	r24, 0xF6	; 246
   1c33a:	95 e4       	ldi	r25, 0x45	; 69
   1c33c:	a0 e0       	ldi	r26, 0x00	; 0
   1c33e:	ed b7       	in	r30, 0x3d	; 61
   1c340:	fe b7       	in	r31, 0x3e	; 62
   1c342:	81 83       	std	Z+1, r24	; 0x01
   1c344:	92 83       	std	Z+2, r25	; 0x02
   1c346:	a3 83       	std	Z+3, r26	; 0x03
   1c348:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    printf("   GIT last pushed:   %s\n", GIT_VERSION);
   1c34c:	8e ef       	ldi	r24, 0xFE	; 254
   1c34e:	95 e1       	ldi	r25, 0x15	; 21
   1c350:	ed b7       	in	r30, 0x3d	; 61
   1c352:	fe b7       	in	r31, 0x3e	; 62
   1c354:	95 83       	std	Z+5, r25	; 0x05
   1c356:	84 83       	std	Z+4, r24	; 0x04
   1c358:	8c ed       	ldi	r24, 0xDC	; 220
   1c35a:	95 e4       	ldi	r25, 0x45	; 69
   1c35c:	a0 e0       	ldi	r26, 0x00	; 0
   1c35e:	81 83       	std	Z+1, r24	; 0x01
   1c360:	92 83       	std	Z+2, r25	; 0x02
   1c362:	a3 83       	std	Z+3, r26	; 0x03
   1c364:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    printf("   Last updated file: %s\n", LOCAL_MOD);
   1c368:	82 e2       	ldi	r24, 0x22	; 34
   1c36a:	96 e1       	ldi	r25, 0x16	; 22
   1c36c:	ed b7       	in	r30, 0x3d	; 61
   1c36e:	fe b7       	in	r31, 0x3e	; 62
   1c370:	95 83       	std	Z+5, r25	; 0x05
   1c372:	84 83       	std	Z+4, r24	; 0x04
   1c374:	82 ec       	ldi	r24, 0xC2	; 194
   1c376:	95 e4       	ldi	r25, 0x45	; 69
   1c378:	a0 e0       	ldi	r26, 0x00	; 0
   1c37a:	81 83       	std	Z+1, r24	; 0x01
   1c37c:	92 83       	std	Z+2, r25	; 0x02
   1c37e:	a3 83       	std	Z+3, r26	; 0x03
   1c380:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>

    sep();
   1c384:	0e 94 03 33 	call	0x6606	; 0x6606 <sep>
    PrintFree();
   1c388:	0e 94 b8 28 	call	0x5170	; 0x5170 <PrintFree>

    sep();
   1c38c:	0e 94 03 33 	call	0x6606	; 0x6606 <sep>
    delayms(200); ///@brief Power up delay
   1c390:	68 ec       	ldi	r22, 0xC8	; 200
   1c392:	70 e0       	ldi	r23, 0x00	; 0
   1c394:	80 e0       	ldi	r24, 0x00	; 0
   1c396:	90 e0       	ldi	r25, 0x00	; 0
   1c398:	0e 94 f7 29 	call	0x53ee	; 0x53ee <delayms>


    ///@ initialize SPI bus 
    printf("initializing SPI bus\n");
   1c39c:	8c ea       	ldi	r24, 0xAC	; 172
   1c39e:	95 e4       	ldi	r25, 0x45	; 69
   1c3a0:	a0 e0       	ldi	r26, 0x00	; 0
   1c3a2:	ed b7       	in	r30, 0x3d	; 61
   1c3a4:	fe b7       	in	r31, 0x3e	; 62
   1c3a6:	81 83       	std	Z+1, r24	; 0x01
   1c3a8:	92 83       	std	Z+2, r25	; 0x02
   1c3aa:	a3 83       	std	Z+3, r26	; 0x03
   1c3ac:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    spi_init(MMC_SLOW,GPIO_B3);
   1c3b0:	4b e0       	ldi	r20, 0x0B	; 11
   1c3b2:	50 e0       	ldi	r21, 0x00	; 0
   1c3b4:	60 e2       	ldi	r22, 0x20	; 32
   1c3b6:	71 ea       	ldi	r23, 0xA1	; 161
   1c3b8:	87 e0       	ldi	r24, 0x07	; 7
   1c3ba:	90 e0       	ldi	r25, 0x00	; 0
   1c3bc:	0e 94 28 28 	call	0x5050	; 0x5050 <spi_init>

    ///@ initialize I2C bus 
    printf("initializing I2C bus\n");
   1c3c0:	86 e9       	ldi	r24, 0x96	; 150
   1c3c2:	95 e4       	ldi	r25, 0x45	; 69
   1c3c4:	a0 e0       	ldi	r26, 0x00	; 0
   1c3c6:	ed b7       	in	r30, 0x3d	; 61
   1c3c8:	fe b7       	in	r31, 0x3e	; 62
   1c3ca:	81 83       	std	Z+1, r24	; 0x01
   1c3cc:	92 83       	std	Z+2, r25	; 0x02
   1c3ce:	a3 83       	std	Z+3, r26	; 0x03
   1c3d0:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    TWI_Init(TWI_BIT_PRESCALE_4, TWI_BITLENGTH_FROM_FREQ(4, 100000));
   1c3d4:	61 e1       	ldi	r22, 0x11	; 17
   1c3d6:	81 e0       	ldi	r24, 0x01	; 1
   1c3d8:	0e 94 16 2d 	call	0x5a2c	; 0x5a2c <TWI_Init>
    sep();
   1c3dc:	0e 94 03 33 	call	0x6606	; 0x6606 <sep>

    printf("initializing RTC\n");
   1c3e0:	84 e8       	ldi	r24, 0x84	; 132
   1c3e2:	95 e4       	ldi	r25, 0x45	; 69
   1c3e4:	a0 e0       	ldi	r26, 0x00	; 0
   1c3e6:	ed b7       	in	r30, 0x3d	; 61
   1c3e8:	fe b7       	in	r31, 0x3e	; 62
   1c3ea:	81 83       	std	Z+1, r24	; 0x01
   1c3ec:	92 83       	std	Z+2, r25	; 0x02
   1c3ee:	a3 83       	std	Z+3, r26	; 0x03
   1c3f0:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    ///@ initialize clock by RTC if we have it
    clock_clear();
   1c3f4:	0e 94 a6 36 	call	0x6d4c	; 0x6d4c <clock_clear>
    printf("Clock cleared\n");
   1c3f8:	85 e7       	ldi	r24, 0x75	; 117
   1c3fa:	95 e4       	ldi	r25, 0x45	; 69
   1c3fc:	a0 e0       	ldi	r26, 0x00	; 0
   1c3fe:	ed b7       	in	r30, 0x3d	; 61
   1c400:	fe b7       	in	r31, 0x3e	; 62
   1c402:	81 83       	std	Z+1, r24	; 0x01
   1c404:	92 83       	std	Z+2, r25	; 0x02
   1c406:	a3 83       	std	Z+3, r26	; 0x03
   1c408:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    clock_getres(0, (ts_t *) &ts);
   1c40c:	be 01       	movw	r22, r28
   1c40e:	64 5f       	subi	r22, 0xF4	; 244
   1c410:	7f 4f       	sbci	r23, 0xFF	; 255
   1c412:	80 e0       	ldi	r24, 0x00	; 0
   1c414:	90 e0       	ldi	r25, 0x00	; 0
   1c416:	0e 94 46 37 	call	0x6e8c	; 0x6e8c <clock_getres>
    printf("SYSTEM_TASK_COUNTER_RES:%ld\n", (uint32_t) ts.tv_nsec);
   1c41a:	88 89       	ldd	r24, Y+16	; 0x10
   1c41c:	99 89       	ldd	r25, Y+17	; 0x11
   1c41e:	aa 89       	ldd	r26, Y+18	; 0x12
   1c420:	bb 89       	ldd	r27, Y+19	; 0x13
   1c422:	ed b7       	in	r30, 0x3d	; 61
   1c424:	fe b7       	in	r31, 0x3e	; 62
   1c426:	84 83       	std	Z+4, r24	; 0x04
   1c428:	95 83       	std	Z+5, r25	; 0x05
   1c42a:	a6 83       	std	Z+6, r26	; 0x06
   1c42c:	b7 83       	std	Z+7, r27	; 0x07
   1c42e:	88 e5       	ldi	r24, 0x58	; 88
   1c430:	95 e4       	ldi	r25, 0x45	; 69
   1c432:	a0 e0       	ldi	r26, 0x00	; 0
   1c434:	81 83       	std	Z+1, r24	; 0x01
   1c436:	92 83       	std	Z+2, r25	; 0x02
   1c438:	a3 83       	std	Z+3, r26	; 0x03
   1c43a:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>

	// Timezone offset
    initialize_clock(300);
   1c43e:	8c e2       	ldi	r24, 0x2C	; 44
   1c440:	91 e0       	ldi	r25, 0x01	; 1
   1c442:	0e 94 1c 3e 	call	0x7c38	; 0x7c38 <initialize_clock>
    display_clock();
   1c446:	0e 94 93 3e 	call	0x7d26	; 0x7d26 <display_clock>
    sep();
   1c44a:	0e 94 03 33 	call	0x6606	; 0x6606 <sep>

	///@ initialize Optional I2C LCD
#ifdef LCD_SUPPORT
	printf("I2C LCD initialization start\n");
   1c44e:	8a e3       	ldi	r24, 0x3A	; 58
   1c450:	95 e4       	ldi	r25, 0x45	; 69
   1c452:	a0 e0       	ldi	r26, 0x00	; 0
   1c454:	ed b7       	in	r30, 0x3d	; 61
   1c456:	fe b7       	in	r31, 0x3e	; 62
   1c458:	81 83       	std	Z+1, r24	; 0x01
   1c45a:	92 83       	std	Z+2, r25	; 0x02
   1c45c:	a3 83       	std	Z+3, r26	; 0x03
   1c45e:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
	if ( LCD_init(LCD_ADDR) )
   1c462:	84 ee       	ldi	r24, 0xE4	; 228
   1c464:	0e 94 46 31 	call	0x628c	; 0x628c <LCD_init>
   1c468:	89 2b       	or	r24, r25
   1c46a:	b9 f0       	breq	.+46     	; 0x1c49a <main+0x244>
	{
		// Display LCD firmware version
		// LCD_command(',');
		// delayms(1000);

		LCD_pos(0,0);
   1c46c:	60 e0       	ldi	r22, 0x00	; 0
   1c46e:	80 e0       	ldi	r24, 0x00	; 0
   1c470:	0e 94 10 31 	call	0x6220	; 0x6220 <LCD_pos>
		lcd_printf("hp85disk V2.0\n");
   1c474:	8e ec       	ldi	r24, 0xCE	; 206
   1c476:	96 e1       	ldi	r25, 0x16	; 22
   1c478:	ed b7       	in	r30, 0x3d	; 61
   1c47a:	fe b7       	in	r31, 0x3e	; 62
   1c47c:	92 83       	std	Z+2, r25	; 0x02
   1c47e:	81 83       	std	Z+1, r24	; 0x01
   1c480:	0e 94 ff 31 	call	0x63fe	; 0x63fe <lcd_printf>
		lcd_printf("(C)Mike Gore ");
   1c484:	8d ed       	ldi	r24, 0xDD	; 221
   1c486:	96 e1       	ldi	r25, 0x16	; 22
   1c488:	ed b7       	in	r30, 0x3d	; 61
   1c48a:	fe b7       	in	r31, 0x3e	; 62
   1c48c:	92 83       	std	Z+2, r25	; 0x02
   1c48e:	81 83       	std	Z+1, r24	; 0x01
   1c490:	0e 94 ff 31 	call	0x63fe	; 0x63fe <lcd_printf>
		// SparkFun V1.1 firmware loses the last character when the LCD goes to sleep 

		printf("I2C LCD initialization Done\n");
   1c494:	8d e1       	ldi	r24, 0x1D	; 29
   1c496:	95 e4       	ldi	r25, 0x45	; 69
   1c498:	02 c0       	rjmp	.+4      	; 0x1c49e <main+0x248>
	}
	else
	{
		printf("I2C LCD is NOT attached!\n");
   1c49a:	83 e0       	ldi	r24, 0x03	; 3
   1c49c:	95 e4       	ldi	r25, 0x45	; 69
   1c49e:	a0 e0       	ldi	r26, 0x00	; 0
   1c4a0:	ed b7       	in	r30, 0x3d	; 61
   1c4a2:	fe b7       	in	r31, 0x3e	; 62
   1c4a4:	81 83       	std	Z+1, r24	; 0x01
   1c4a6:	92 83       	std	Z+2, r25	; 0x02
   1c4a8:	a3 83       	std	Z+3, r26	; 0x03
   1c4aa:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
	}
    sep();
   1c4ae:	0e 94 03 33 	call	0x6606	; 0x6606 <sep>
#endif

    ///@ initialize MMC bus
    printf("MMC initializing start\n");
   1c4b2:	8b ee       	ldi	r24, 0xEB	; 235
   1c4b4:	94 e4       	ldi	r25, 0x44	; 68
   1c4b6:	a0 e0       	ldi	r26, 0x00	; 0
   1c4b8:	ed b7       	in	r30, 0x3d	; 61
   1c4ba:	fe b7       	in	r31, 0x3e	; 62
   1c4bc:	81 83       	std	Z+1, r24	; 0x01
   1c4be:	92 83       	std	Z+2, r25	; 0x02
   1c4c0:	a3 83       	std	Z+3, r26	; 0x03
   1c4c2:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    mmc_init(1);
   1c4c6:	81 e0       	ldi	r24, 0x01	; 1
   1c4c8:	90 e0       	ldi	r25, 0x00	; 0
   1c4ca:	0e 94 32 70 	call	0xe064	; 0xe064 <mmc_init>
    printf("MMC initialized\n");
   1c4ce:	8a ed       	ldi	r24, 0xDA	; 218
   1c4d0:	94 e4       	ldi	r25, 0x44	; 68
   1c4d2:	a0 e0       	ldi	r26, 0x00	; 0
   1c4d4:	ed b7       	in	r30, 0x3d	; 61
   1c4d6:	fe b7       	in	r31, 0x3e	; 62
   1c4d8:	81 83       	std	Z+1, r24	; 0x01
   1c4da:	92 83       	std	Z+2, r25	; 0x02
   1c4dc:	a3 83       	std	Z+3, r26	; 0x03
   1c4de:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    sep();
   1c4e2:	0e 94 03 33 	call	0x6606	; 0x6606 <sep>

    ///@ initialize bus state as soon as practical
    gpib_bus_init();
   1c4e6:	0e 94 16 86 	call	0x10c2c	; 0x10c2c <gpib_bus_init>
    printf("GPIB bus initialized\n");
   1c4ea:	84 ec       	ldi	r24, 0xC4	; 196
   1c4ec:	94 e4       	ldi	r25, 0x44	; 68
   1c4ee:	a0 e0       	ldi	r26, 0x00	; 0
   1c4f0:	ed b7       	in	r30, 0x3d	; 61
   1c4f2:	fe b7       	in	r31, 0x3e	; 62
   1c4f4:	81 83       	std	Z+1, r24	; 0x01
   1c4f6:	92 83       	std	Z+2, r25	; 0x02
   1c4f8:	a3 83       	std	Z+3, r26	; 0x03
   1c4fa:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>

    ///@ initialize Printer Capture
    printer_init();
   1c4fe:	0e 94 01 be 	call	0x17c02	; 0x17c02 <printer_init>
    printf("Printer initialized\n");
   1c502:	8f ea       	ldi	r24, 0xAF	; 175
   1c504:	94 e4       	ldi	r25, 0x44	; 68
   1c506:	a0 e0       	ldi	r26, 0x00	; 0
   1c508:	ed b7       	in	r30, 0x3d	; 61
   1c50a:	fe b7       	in	r31, 0x3e	; 62
   1c50c:	81 83       	std	Z+1, r24	; 0x01
   1c50e:	92 83       	std	Z+2, r25	; 0x02
   1c510:	a3 83       	std	Z+3, r26	; 0x03
   1c512:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>

    ///@ initialize GPIB timer tasks
    sep();
   1c516:	0e 94 03 33 	call	0x6606	; 0x6606 <sep>
    printf("GPIB Timer Setup\n");
   1c51a:	8d e9       	ldi	r24, 0x9D	; 157
   1c51c:	94 e4       	ldi	r25, 0x44	; 68
   1c51e:	a0 e0       	ldi	r26, 0x00	; 0
   1c520:	ed b7       	in	r30, 0x3d	; 61
   1c522:	fe b7       	in	r31, 0x3e	; 62
   1c524:	81 83       	std	Z+1, r24	; 0x01
   1c526:	92 83       	std	Z+2, r25	; 0x02
   1c528:	a3 83       	std	Z+3, r26	; 0x03
   1c52a:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    gpib_timer_init();
   1c52e:	0e 94 07 84 	call	0x1080e	; 0x1080e <gpib_timer_init>
    printf("GPIB Timer initialized\n");
   1c532:	85 e8       	ldi	r24, 0x85	; 133
   1c534:	94 e4       	ldi	r25, 0x44	; 68
   1c536:	a0 e0       	ldi	r26, 0x00	; 0
   1c538:	ed b7       	in	r30, 0x3d	; 61
   1c53a:	fe b7       	in	r31, 0x3e	; 62
   1c53c:	81 83       	std	Z+1, r24	; 0x01
   1c53e:	92 83       	std	Z+2, r25	; 0x02
   1c540:	a3 83       	std	Z+3, r26	; 0x03
   1c542:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>

    ///@brief Process hp85disk emulator config file
    gpib_file_init();
   1c546:	0e 94 3f 8c 	call	0x1187e	; 0x1187e <gpib_file_init>
    printf("GPIB File init done\n");
   1c54a:	80 e7       	ldi	r24, 0x70	; 112
   1c54c:	94 e4       	ldi	r25, 0x44	; 68
   1c54e:	a0 e0       	ldi	r26, 0x00	; 0
   1c550:	ed b7       	in	r30, 0x3d	; 61
   1c552:	fe b7       	in	r31, 0x3e	; 62
   1c554:	81 83       	std	Z+1, r24	; 0x01
   1c556:	92 83       	std	Z+2, r25	; 0x02
   1c558:	a3 83       	std	Z+3, r26	; 0x03
   1c55a:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>

    ///@brief GPIB talking/listening state variables 
    ///Must be done AFTER gpib_file_init() so we have a valid configuration
    gpib_state_init();
   1c55e:	0e 94 43 86 	call	0x10c86	; 0x10c86 <gpib_state_init>
    printf("GPIB State init done\n");
   1c562:	8a e5       	ldi	r24, 0x5A	; 90
   1c564:	94 e4       	ldi	r25, 0x44	; 68
   1c566:	a0 e0       	ldi	r26, 0x00	; 0
   1c568:	ed b7       	in	r30, 0x3d	; 61
   1c56a:	fe b7       	in	r31, 0x3e	; 62
   1c56c:	81 83       	std	Z+1, r24	; 0x01
   1c56e:	92 83       	std	Z+2, r25	; 0x02
   1c570:	a3 83       	std	Z+3, r26	; 0x03
   1c572:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>
    sep();
   1c576:	0e 94 03 33 	call	0x6606	; 0x6606 <sep>

    ///@brief Display Configuration
    display_Config();
   1c57a:	0e 94 20 9f 	call	0x13e40	; 0x13e40 <display_Config>

    ///@brief Format any drives that do not yet exist
    format_drives();
   1c57e:	0e 94 2e a2 	call	0x1445c	; 0x1445c <format_drives>

    ///@brief Display Address Summary
    sep();
   1c582:	0e 94 03 33 	call	0x6606	; 0x6606 <sep>
    display_Addresses();
   1c586:	0e 94 1b 9e 	call	0x13c36	; 0x13c36 <display_Addresses>

    ///@brief Display debug level
    sep();
   1c58a:	0e 94 03 33 	call	0x6606	; 0x6606 <sep>
    printf("debuglevel   = %04xH\n",(int)debuglevel);
   1c58e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1c592:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1c596:	ed b7       	in	r30, 0x3d	; 61
   1c598:	fe b7       	in	r31, 0x3e	; 62
   1c59a:	95 83       	std	Z+5, r25	; 0x05
   1c59c:	84 83       	std	Z+4, r24	; 0x04
   1c59e:	84 e4       	ldi	r24, 0x44	; 68
   1c5a0:	94 e4       	ldi	r25, 0x44	; 68
   1c5a2:	a0 e0       	ldi	r26, 0x00	; 0
   1c5a4:	81 83       	std	Z+1, r24	; 0x01
   1c5a6:	92 83       	std	Z+2, r25	; 0x02
   1c5a8:	a3 83       	std	Z+3, r26	; 0x03
   1c5aa:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>

#ifdef LCD_SUPPORT
	LCD_pos(0,0);
   1c5ae:	60 e0       	ldi	r22, 0x00	; 0
   1c5b0:	80 e0       	ldi	r24, 0x00	; 0
   1c5b2:	0e 94 10 31 	call	0x6220	; 0x6220 <LCD_pos>
	lcd_printf("SS80  Drives:%d\n",(int) count_drive_types(SS80_TYPE));
   1c5b6:	83 e0       	ldi	r24, 0x03	; 3
   1c5b8:	0e 94 27 93 	call	0x1264e	; 0x1264e <count_drive_types>
   1c5bc:	ed b7       	in	r30, 0x3d	; 61
   1c5be:	fe b7       	in	r31, 0x3e	; 62
   1c5c0:	94 83       	std	Z+4, r25	; 0x04
   1c5c2:	83 83       	std	Z+3, r24	; 0x03
   1c5c4:	8b ee       	ldi	r24, 0xEB	; 235
   1c5c6:	96 e1       	ldi	r25, 0x16	; 22
   1c5c8:	92 83       	std	Z+2, r25	; 0x02
   1c5ca:	81 83       	std	Z+1, r24	; 0x01
   1c5cc:	0e 94 ff 31 	call	0x63fe	; 0x63fe <lcd_printf>
	lcd_printf("AMIGO Drives:%d ",(int) count_drive_types(AMIGO_TYPE));
   1c5d0:	81 e0       	ldi	r24, 0x01	; 1
   1c5d2:	0e 94 27 93 	call	0x1264e	; 0x1264e <count_drive_types>
   1c5d6:	ed b7       	in	r30, 0x3d	; 61
   1c5d8:	fe b7       	in	r31, 0x3e	; 62
   1c5da:	94 83       	std	Z+4, r25	; 0x04
   1c5dc:	83 83       	std	Z+3, r24	; 0x03
   1c5de:	8c ef       	ldi	r24, 0xFC	; 252
   1c5e0:	96 e1       	ldi	r25, 0x16	; 22
   1c5e2:	92 83       	std	Z+2, r25	; 0x02
   1c5e4:	81 83       	std	Z+1, r24	; 0x01
   1c5e6:	0e 94 ff 31 	call	0x63fe	; 0x63fe <lcd_printf>
	//lcd_printf("Debug: %04xH\n", (int)debuglevel);
#endif


    ///@brief Start main GPIB state machine
    sep();
   1c5ea:	0e 94 03 33 	call	0x6606	; 0x6606 <sep>
    printf("Starting GPIB TASK\n");
   1c5ee:	80 e3       	ldi	r24, 0x30	; 48
   1c5f0:	94 e4       	ldi	r25, 0x44	; 68
   1c5f2:	a0 e0       	ldi	r26, 0x00	; 0
   1c5f4:	ed b7       	in	r30, 0x3d	; 61
   1c5f6:	fe b7       	in	r31, 0x3e	; 62
   1c5f8:	81 83       	std	Z+1, r24	; 0x01
   1c5fa:	92 83       	std	Z+2, r25	; 0x02
   1c5fc:	a3 83       	std	Z+3, r26	; 0x03
   1c5fe:	0e 94 38 47 	call	0x8e70	; 0x8e70 <printf_P>

    ///@brief Keep the task running - it exits after every user interaction, ie key press
    while (1)
    {
        task(1);
   1c602:	81 e0       	ldi	r24, 0x01	; 1
   1c604:	61 dd       	rcall	.-1342   	; 0x1c0c8 <task>
   1c606:	fd cf       	rjmp	.-6      	; 0x1c602 <main+0x3ac>

0001c608 <__mulsi3>:
   1c608:	db 01       	movw	r26, r22
   1c60a:	8f 93       	push	r24
   1c60c:	9f 93       	push	r25
   1c60e:	a0 d0       	rcall	.+320    	; 0x1c750 <__muluhisi3>
   1c610:	bf 91       	pop	r27
   1c612:	af 91       	pop	r26
   1c614:	a2 9f       	mul	r26, r18
   1c616:	80 0d       	add	r24, r0
   1c618:	91 1d       	adc	r25, r1
   1c61a:	a3 9f       	mul	r26, r19
   1c61c:	90 0d       	add	r25, r0
   1c61e:	b2 9f       	mul	r27, r18
   1c620:	90 0d       	add	r25, r0
   1c622:	11 24       	eor	r1, r1
   1c624:	08 95       	ret

0001c626 <__udivmodqi4>:
   1c626:	99 1b       	sub	r25, r25
   1c628:	79 e0       	ldi	r23, 0x09	; 9
   1c62a:	04 c0       	rjmp	.+8      	; 0x1c634 <__udivmodqi4_ep>

0001c62c <__udivmodqi4_loop>:
   1c62c:	99 1f       	adc	r25, r25
   1c62e:	96 17       	cp	r25, r22
   1c630:	08 f0       	brcs	.+2      	; 0x1c634 <__udivmodqi4_ep>
   1c632:	96 1b       	sub	r25, r22

0001c634 <__udivmodqi4_ep>:
   1c634:	88 1f       	adc	r24, r24
   1c636:	7a 95       	dec	r23
   1c638:	c9 f7       	brne	.-14     	; 0x1c62c <__udivmodqi4_loop>
   1c63a:	80 95       	com	r24
   1c63c:	08 95       	ret

0001c63e <__udivmodhi4>:
   1c63e:	aa 1b       	sub	r26, r26
   1c640:	bb 1b       	sub	r27, r27
   1c642:	51 e1       	ldi	r21, 0x11	; 17
   1c644:	07 c0       	rjmp	.+14     	; 0x1c654 <__udivmodhi4_ep>

0001c646 <__udivmodhi4_loop>:
   1c646:	aa 1f       	adc	r26, r26
   1c648:	bb 1f       	adc	r27, r27
   1c64a:	a6 17       	cp	r26, r22
   1c64c:	b7 07       	cpc	r27, r23
   1c64e:	10 f0       	brcs	.+4      	; 0x1c654 <__udivmodhi4_ep>
   1c650:	a6 1b       	sub	r26, r22
   1c652:	b7 0b       	sbc	r27, r23

0001c654 <__udivmodhi4_ep>:
   1c654:	88 1f       	adc	r24, r24
   1c656:	99 1f       	adc	r25, r25
   1c658:	5a 95       	dec	r21
   1c65a:	a9 f7       	brne	.-22     	; 0x1c646 <__udivmodhi4_loop>
   1c65c:	80 95       	com	r24
   1c65e:	90 95       	com	r25
   1c660:	bc 01       	movw	r22, r24
   1c662:	cd 01       	movw	r24, r26
   1c664:	08 95       	ret

0001c666 <__divmodhi4>:
   1c666:	97 fb       	bst	r25, 7
   1c668:	07 2e       	mov	r0, r23
   1c66a:	16 f4       	brtc	.+4      	; 0x1c670 <__divmodhi4+0xa>
   1c66c:	00 94       	com	r0
   1c66e:	06 d0       	rcall	.+12     	; 0x1c67c <__divmodhi4_neg1>
   1c670:	77 fd       	sbrc	r23, 7
   1c672:	08 d0       	rcall	.+16     	; 0x1c684 <__divmodhi4_neg2>
   1c674:	e4 df       	rcall	.-56     	; 0x1c63e <__udivmodhi4>
   1c676:	07 fc       	sbrc	r0, 7
   1c678:	05 d0       	rcall	.+10     	; 0x1c684 <__divmodhi4_neg2>
   1c67a:	3e f4       	brtc	.+14     	; 0x1c68a <__divmodhi4_exit>

0001c67c <__divmodhi4_neg1>:
   1c67c:	90 95       	com	r25
   1c67e:	81 95       	neg	r24
   1c680:	9f 4f       	sbci	r25, 0xFF	; 255
   1c682:	08 95       	ret

0001c684 <__divmodhi4_neg2>:
   1c684:	70 95       	com	r23
   1c686:	61 95       	neg	r22
   1c688:	7f 4f       	sbci	r23, 0xFF	; 255

0001c68a <__divmodhi4_exit>:
   1c68a:	08 95       	ret

0001c68c <__udivmodsi4>:
   1c68c:	a1 e2       	ldi	r26, 0x21	; 33
   1c68e:	1a 2e       	mov	r1, r26
   1c690:	aa 1b       	sub	r26, r26
   1c692:	bb 1b       	sub	r27, r27
   1c694:	fd 01       	movw	r30, r26
   1c696:	0d c0       	rjmp	.+26     	; 0x1c6b2 <__udivmodsi4_ep>

0001c698 <__udivmodsi4_loop>:
   1c698:	aa 1f       	adc	r26, r26
   1c69a:	bb 1f       	adc	r27, r27
   1c69c:	ee 1f       	adc	r30, r30
   1c69e:	ff 1f       	adc	r31, r31
   1c6a0:	a2 17       	cp	r26, r18
   1c6a2:	b3 07       	cpc	r27, r19
   1c6a4:	e4 07       	cpc	r30, r20
   1c6a6:	f5 07       	cpc	r31, r21
   1c6a8:	20 f0       	brcs	.+8      	; 0x1c6b2 <__udivmodsi4_ep>
   1c6aa:	a2 1b       	sub	r26, r18
   1c6ac:	b3 0b       	sbc	r27, r19
   1c6ae:	e4 0b       	sbc	r30, r20
   1c6b0:	f5 0b       	sbc	r31, r21

0001c6b2 <__udivmodsi4_ep>:
   1c6b2:	66 1f       	adc	r22, r22
   1c6b4:	77 1f       	adc	r23, r23
   1c6b6:	88 1f       	adc	r24, r24
   1c6b8:	99 1f       	adc	r25, r25
   1c6ba:	1a 94       	dec	r1
   1c6bc:	69 f7       	brne	.-38     	; 0x1c698 <__udivmodsi4_loop>
   1c6be:	60 95       	com	r22
   1c6c0:	70 95       	com	r23
   1c6c2:	80 95       	com	r24
   1c6c4:	90 95       	com	r25
   1c6c6:	9b 01       	movw	r18, r22
   1c6c8:	ac 01       	movw	r20, r24
   1c6ca:	bd 01       	movw	r22, r26
   1c6cc:	cf 01       	movw	r24, r30
   1c6ce:	08 95       	ret

0001c6d0 <__divmodsi4>:
   1c6d0:	05 2e       	mov	r0, r21
   1c6d2:	97 fb       	bst	r25, 7
   1c6d4:	16 f4       	brtc	.+4      	; 0x1c6da <__divmodsi4+0xa>
   1c6d6:	00 94       	com	r0
   1c6d8:	0f d0       	rcall	.+30     	; 0x1c6f8 <__negsi2>
   1c6da:	57 fd       	sbrc	r21, 7
   1c6dc:	05 d0       	rcall	.+10     	; 0x1c6e8 <__divmodsi4_neg2>
   1c6de:	d6 df       	rcall	.-84     	; 0x1c68c <__udivmodsi4>
   1c6e0:	07 fc       	sbrc	r0, 7
   1c6e2:	02 d0       	rcall	.+4      	; 0x1c6e8 <__divmodsi4_neg2>
   1c6e4:	46 f4       	brtc	.+16     	; 0x1c6f6 <__divmodsi4_exit>
   1c6e6:	08 c0       	rjmp	.+16     	; 0x1c6f8 <__negsi2>

0001c6e8 <__divmodsi4_neg2>:
   1c6e8:	50 95       	com	r21
   1c6ea:	40 95       	com	r20
   1c6ec:	30 95       	com	r19
   1c6ee:	21 95       	neg	r18
   1c6f0:	3f 4f       	sbci	r19, 0xFF	; 255
   1c6f2:	4f 4f       	sbci	r20, 0xFF	; 255
   1c6f4:	5f 4f       	sbci	r21, 0xFF	; 255

0001c6f6 <__divmodsi4_exit>:
   1c6f6:	08 95       	ret

0001c6f8 <__negsi2>:
   1c6f8:	90 95       	com	r25
   1c6fa:	80 95       	com	r24
   1c6fc:	70 95       	com	r23
   1c6fe:	61 95       	neg	r22
   1c700:	7f 4f       	sbci	r23, 0xFF	; 255
   1c702:	8f 4f       	sbci	r24, 0xFF	; 255
   1c704:	9f 4f       	sbci	r25, 0xFF	; 255
   1c706:	08 95       	ret

0001c708 <__tablejump2__>:
   1c708:	ee 0f       	add	r30, r30
   1c70a:	ff 1f       	adc	r31, r31
   1c70c:	00 24       	eor	r0, r0
   1c70e:	00 1c       	adc	r0, r0
   1c710:	0b be       	out	0x3b, r0	; 59
   1c712:	07 90       	elpm	r0, Z+
   1c714:	f6 91       	elpm	r31, Z
   1c716:	e0 2d       	mov	r30, r0
   1c718:	09 94       	ijmp

0001c71a <__mulhisi3>:
   1c71a:	05 d0       	rcall	.+10     	; 0x1c726 <__umulhisi3>
   1c71c:	33 23       	and	r19, r19
   1c71e:	12 f4       	brpl	.+4      	; 0x1c724 <__mulhisi3+0xa>
   1c720:	8a 1b       	sub	r24, r26
   1c722:	9b 0b       	sbc	r25, r27
   1c724:	10 c0       	rjmp	.+32     	; 0x1c746 <__usmulhisi3_tail>

0001c726 <__umulhisi3>:
   1c726:	a2 9f       	mul	r26, r18
   1c728:	b0 01       	movw	r22, r0
   1c72a:	b3 9f       	mul	r27, r19
   1c72c:	c0 01       	movw	r24, r0
   1c72e:	a3 9f       	mul	r26, r19
   1c730:	70 0d       	add	r23, r0
   1c732:	81 1d       	adc	r24, r1
   1c734:	11 24       	eor	r1, r1
   1c736:	91 1d       	adc	r25, r1
   1c738:	b2 9f       	mul	r27, r18
   1c73a:	70 0d       	add	r23, r0
   1c73c:	81 1d       	adc	r24, r1
   1c73e:	11 24       	eor	r1, r1
   1c740:	91 1d       	adc	r25, r1
   1c742:	08 95       	ret

0001c744 <__usmulhisi3>:
   1c744:	f0 df       	rcall	.-32     	; 0x1c726 <__umulhisi3>

0001c746 <__usmulhisi3_tail>:
   1c746:	b7 ff       	sbrs	r27, 7
   1c748:	08 95       	ret
   1c74a:	82 1b       	sub	r24, r18
   1c74c:	93 0b       	sbc	r25, r19
   1c74e:	08 95       	ret

0001c750 <__muluhisi3>:
   1c750:	ea df       	rcall	.-44     	; 0x1c726 <__umulhisi3>
   1c752:	a5 9f       	mul	r26, r21
   1c754:	90 0d       	add	r25, r0
   1c756:	b4 9f       	mul	r27, r20
   1c758:	90 0d       	add	r25, r0
   1c75a:	a4 9f       	mul	r26, r20
   1c75c:	80 0d       	add	r24, r0
   1c75e:	91 1d       	adc	r25, r1
   1c760:	11 24       	eor	r1, r1
   1c762:	08 95       	ret

0001c764 <__mulshisi3>:
   1c764:	b7 ff       	sbrs	r27, 7
   1c766:	f4 cf       	rjmp	.-24     	; 0x1c750 <__muluhisi3>

0001c768 <__mulohisi3>:
   1c768:	f3 df       	rcall	.-26     	; 0x1c750 <__muluhisi3>
   1c76a:	82 1b       	sub	r24, r18
   1c76c:	93 0b       	sbc	r25, r19
   1c76e:	08 95       	ret

0001c770 <__negdi2>:
   1c770:	60 95       	com	r22
   1c772:	70 95       	com	r23
   1c774:	80 95       	com	r24
   1c776:	90 95       	com	r25
   1c778:	30 95       	com	r19
   1c77a:	40 95       	com	r20
   1c77c:	50 95       	com	r21
   1c77e:	21 95       	neg	r18
   1c780:	3f 4f       	sbci	r19, 0xFF	; 255
   1c782:	4f 4f       	sbci	r20, 0xFF	; 255
   1c784:	5f 4f       	sbci	r21, 0xFF	; 255
   1c786:	6f 4f       	sbci	r22, 0xFF	; 255
   1c788:	7f 4f       	sbci	r23, 0xFF	; 255
   1c78a:	8f 4f       	sbci	r24, 0xFF	; 255
   1c78c:	9f 4f       	sbci	r25, 0xFF	; 255
   1c78e:	08 95       	ret

0001c790 <__prologue_saves__>:
   1c790:	2f 92       	push	r2
   1c792:	3f 92       	push	r3
   1c794:	4f 92       	push	r4
   1c796:	5f 92       	push	r5
   1c798:	6f 92       	push	r6
   1c79a:	7f 92       	push	r7
   1c79c:	8f 92       	push	r8
   1c79e:	9f 92       	push	r9
   1c7a0:	af 92       	push	r10
   1c7a2:	bf 92       	push	r11
   1c7a4:	cf 92       	push	r12
   1c7a6:	df 92       	push	r13
   1c7a8:	ef 92       	push	r14
   1c7aa:	ff 92       	push	r15
   1c7ac:	0f 93       	push	r16
   1c7ae:	1f 93       	push	r17
   1c7b0:	cf 93       	push	r28
   1c7b2:	df 93       	push	r29
   1c7b4:	cd b7       	in	r28, 0x3d	; 61
   1c7b6:	de b7       	in	r29, 0x3e	; 62
   1c7b8:	ca 1b       	sub	r28, r26
   1c7ba:	db 0b       	sbc	r29, r27
   1c7bc:	0f b6       	in	r0, 0x3f	; 63
   1c7be:	f8 94       	cli
   1c7c0:	de bf       	out	0x3e, r29	; 62
   1c7c2:	0f be       	out	0x3f, r0	; 63
   1c7c4:	cd bf       	out	0x3d, r28	; 61
   1c7c6:	09 94       	ijmp

0001c7c8 <__epilogue_restores__>:
   1c7c8:	2a 88       	ldd	r2, Y+18	; 0x12
   1c7ca:	39 88       	ldd	r3, Y+17	; 0x11
   1c7cc:	48 88       	ldd	r4, Y+16	; 0x10
   1c7ce:	5f 84       	ldd	r5, Y+15	; 0x0f
   1c7d0:	6e 84       	ldd	r6, Y+14	; 0x0e
   1c7d2:	7d 84       	ldd	r7, Y+13	; 0x0d
   1c7d4:	8c 84       	ldd	r8, Y+12	; 0x0c
   1c7d6:	9b 84       	ldd	r9, Y+11	; 0x0b
   1c7d8:	aa 84       	ldd	r10, Y+10	; 0x0a
   1c7da:	b9 84       	ldd	r11, Y+9	; 0x09
   1c7dc:	c8 84       	ldd	r12, Y+8	; 0x08
   1c7de:	df 80       	ldd	r13, Y+7	; 0x07
   1c7e0:	ee 80       	ldd	r14, Y+6	; 0x06
   1c7e2:	fd 80       	ldd	r15, Y+5	; 0x05
   1c7e4:	0c 81       	ldd	r16, Y+4	; 0x04
   1c7e6:	1b 81       	ldd	r17, Y+3	; 0x03
   1c7e8:	aa 81       	ldd	r26, Y+2	; 0x02
   1c7ea:	b9 81       	ldd	r27, Y+1	; 0x01
   1c7ec:	ce 0f       	add	r28, r30
   1c7ee:	d1 1d       	adc	r29, r1
   1c7f0:	0f b6       	in	r0, 0x3f	; 63
   1c7f2:	f8 94       	cli
   1c7f4:	de bf       	out	0x3e, r29	; 62
   1c7f6:	0f be       	out	0x3f, r0	; 63
   1c7f8:	cd bf       	out	0x3d, r28	; 61
   1c7fa:	ed 01       	movw	r28, r26
   1c7fc:	08 95       	ret

0001c7fe <__xload_1>:
   1c7fe:	57 fd       	sbrc	r21, 7
   1c800:	03 c0       	rjmp	.+6      	; 0x1c808 <__xload_1+0xa>
   1c802:	5b bf       	out	0x3b, r21	; 59
   1c804:	67 91       	elpm	r22, Z+
   1c806:	08 95       	ret
   1c808:	60 81       	ld	r22, Z
   1c80a:	08 95       	ret

0001c80c <__cmpdi2_s8>:
   1c80c:	00 24       	eor	r0, r0
   1c80e:	a7 fd       	sbrc	r26, 7
   1c810:	00 94       	com	r0
   1c812:	2a 17       	cp	r18, r26
   1c814:	30 05       	cpc	r19, r0
   1c816:	40 05       	cpc	r20, r0
   1c818:	50 05       	cpc	r21, r0
   1c81a:	60 05       	cpc	r22, r0
   1c81c:	70 05       	cpc	r23, r0
   1c81e:	80 05       	cpc	r24, r0
   1c820:	90 05       	cpc	r25, r0
   1c822:	08 95       	ret

0001c824 <__subsf3>:
   1c824:	50 58       	subi	r21, 0x80	; 128

0001c826 <__addsf3>:
   1c826:	bb 27       	eor	r27, r27
   1c828:	aa 27       	eor	r26, r26
   1c82a:	0e d0       	rcall	.+28     	; 0x1c848 <__addsf3x>
   1c82c:	75 c1       	rjmp	.+746    	; 0x1cb18 <__fp_round>
   1c82e:	66 d1       	rcall	.+716    	; 0x1cafc <__fp_pscA>
   1c830:	30 f0       	brcs	.+12     	; 0x1c83e <__addsf3+0x18>
   1c832:	6b d1       	rcall	.+726    	; 0x1cb0a <__fp_pscB>
   1c834:	20 f0       	brcs	.+8      	; 0x1c83e <__addsf3+0x18>
   1c836:	31 f4       	brne	.+12     	; 0x1c844 <__addsf3+0x1e>
   1c838:	9f 3f       	cpi	r25, 0xFF	; 255
   1c83a:	11 f4       	brne	.+4      	; 0x1c840 <__addsf3+0x1a>
   1c83c:	1e f4       	brtc	.+6      	; 0x1c844 <__addsf3+0x1e>
   1c83e:	5b c1       	rjmp	.+694    	; 0x1caf6 <__fp_nan>
   1c840:	0e f4       	brtc	.+2      	; 0x1c844 <__addsf3+0x1e>
   1c842:	e0 95       	com	r30
   1c844:	e7 fb       	bst	r30, 7
   1c846:	51 c1       	rjmp	.+674    	; 0x1caea <__fp_inf>

0001c848 <__addsf3x>:
   1c848:	e9 2f       	mov	r30, r25
   1c84a:	77 d1       	rcall	.+750    	; 0x1cb3a <__fp_split3>
   1c84c:	80 f3       	brcs	.-32     	; 0x1c82e <__addsf3+0x8>
   1c84e:	ba 17       	cp	r27, r26
   1c850:	62 07       	cpc	r22, r18
   1c852:	73 07       	cpc	r23, r19
   1c854:	84 07       	cpc	r24, r20
   1c856:	95 07       	cpc	r25, r21
   1c858:	18 f0       	brcs	.+6      	; 0x1c860 <__addsf3x+0x18>
   1c85a:	71 f4       	brne	.+28     	; 0x1c878 <__addsf3x+0x30>
   1c85c:	9e f5       	brtc	.+102    	; 0x1c8c4 <__addsf3x+0x7c>
   1c85e:	8f c1       	rjmp	.+798    	; 0x1cb7e <__fp_zero>
   1c860:	0e f4       	brtc	.+2      	; 0x1c864 <__addsf3x+0x1c>
   1c862:	e0 95       	com	r30
   1c864:	0b 2e       	mov	r0, r27
   1c866:	ba 2f       	mov	r27, r26
   1c868:	a0 2d       	mov	r26, r0
   1c86a:	0b 01       	movw	r0, r22
   1c86c:	b9 01       	movw	r22, r18
   1c86e:	90 01       	movw	r18, r0
   1c870:	0c 01       	movw	r0, r24
   1c872:	ca 01       	movw	r24, r20
   1c874:	a0 01       	movw	r20, r0
   1c876:	11 24       	eor	r1, r1
   1c878:	ff 27       	eor	r31, r31
   1c87a:	59 1b       	sub	r21, r25
   1c87c:	99 f0       	breq	.+38     	; 0x1c8a4 <__addsf3x+0x5c>
   1c87e:	59 3f       	cpi	r21, 0xF9	; 249
   1c880:	50 f4       	brcc	.+20     	; 0x1c896 <__addsf3x+0x4e>
   1c882:	50 3e       	cpi	r21, 0xE0	; 224
   1c884:	68 f1       	brcs	.+90     	; 0x1c8e0 <__addsf3x+0x98>
   1c886:	1a 16       	cp	r1, r26
   1c888:	f0 40       	sbci	r31, 0x00	; 0
   1c88a:	a2 2f       	mov	r26, r18
   1c88c:	23 2f       	mov	r18, r19
   1c88e:	34 2f       	mov	r19, r20
   1c890:	44 27       	eor	r20, r20
   1c892:	58 5f       	subi	r21, 0xF8	; 248
   1c894:	f3 cf       	rjmp	.-26     	; 0x1c87c <__addsf3x+0x34>
   1c896:	46 95       	lsr	r20
   1c898:	37 95       	ror	r19
   1c89a:	27 95       	ror	r18
   1c89c:	a7 95       	ror	r26
   1c89e:	f0 40       	sbci	r31, 0x00	; 0
   1c8a0:	53 95       	inc	r21
   1c8a2:	c9 f7       	brne	.-14     	; 0x1c896 <__addsf3x+0x4e>
   1c8a4:	7e f4       	brtc	.+30     	; 0x1c8c4 <__addsf3x+0x7c>
   1c8a6:	1f 16       	cp	r1, r31
   1c8a8:	ba 0b       	sbc	r27, r26
   1c8aa:	62 0b       	sbc	r22, r18
   1c8ac:	73 0b       	sbc	r23, r19
   1c8ae:	84 0b       	sbc	r24, r20
   1c8b0:	ba f0       	brmi	.+46     	; 0x1c8e0 <__addsf3x+0x98>
   1c8b2:	91 50       	subi	r25, 0x01	; 1
   1c8b4:	a1 f0       	breq	.+40     	; 0x1c8de <__addsf3x+0x96>
   1c8b6:	ff 0f       	add	r31, r31
   1c8b8:	bb 1f       	adc	r27, r27
   1c8ba:	66 1f       	adc	r22, r22
   1c8bc:	77 1f       	adc	r23, r23
   1c8be:	88 1f       	adc	r24, r24
   1c8c0:	c2 f7       	brpl	.-16     	; 0x1c8b2 <__addsf3x+0x6a>
   1c8c2:	0e c0       	rjmp	.+28     	; 0x1c8e0 <__addsf3x+0x98>
   1c8c4:	ba 0f       	add	r27, r26
   1c8c6:	62 1f       	adc	r22, r18
   1c8c8:	73 1f       	adc	r23, r19
   1c8ca:	84 1f       	adc	r24, r20
   1c8cc:	48 f4       	brcc	.+18     	; 0x1c8e0 <__addsf3x+0x98>
   1c8ce:	87 95       	ror	r24
   1c8d0:	77 95       	ror	r23
   1c8d2:	67 95       	ror	r22
   1c8d4:	b7 95       	ror	r27
   1c8d6:	f7 95       	ror	r31
   1c8d8:	9e 3f       	cpi	r25, 0xFE	; 254
   1c8da:	08 f0       	brcs	.+2      	; 0x1c8de <__addsf3x+0x96>
   1c8dc:	b3 cf       	rjmp	.-154    	; 0x1c844 <__addsf3+0x1e>
   1c8de:	93 95       	inc	r25
   1c8e0:	88 0f       	add	r24, r24
   1c8e2:	08 f0       	brcs	.+2      	; 0x1c8e6 <__addsf3x+0x9e>
   1c8e4:	99 27       	eor	r25, r25
   1c8e6:	ee 0f       	add	r30, r30
   1c8e8:	97 95       	ror	r25
   1c8ea:	87 95       	ror	r24
   1c8ec:	08 95       	ret

0001c8ee <__cmpsf2>:
   1c8ee:	d9 d0       	rcall	.+434    	; 0x1caa2 <__fp_cmp>
   1c8f0:	08 f4       	brcc	.+2      	; 0x1c8f4 <__cmpsf2+0x6>
   1c8f2:	81 e0       	ldi	r24, 0x01	; 1
   1c8f4:	08 95       	ret

0001c8f6 <__divsf3>:
   1c8f6:	0c d0       	rcall	.+24     	; 0x1c910 <__divsf3x>
   1c8f8:	0f c1       	rjmp	.+542    	; 0x1cb18 <__fp_round>
   1c8fa:	07 d1       	rcall	.+526    	; 0x1cb0a <__fp_pscB>
   1c8fc:	40 f0       	brcs	.+16     	; 0x1c90e <__divsf3+0x18>
   1c8fe:	fe d0       	rcall	.+508    	; 0x1cafc <__fp_pscA>
   1c900:	30 f0       	brcs	.+12     	; 0x1c90e <__divsf3+0x18>
   1c902:	21 f4       	brne	.+8      	; 0x1c90c <__divsf3+0x16>
   1c904:	5f 3f       	cpi	r21, 0xFF	; 255
   1c906:	19 f0       	breq	.+6      	; 0x1c90e <__divsf3+0x18>
   1c908:	f0 c0       	rjmp	.+480    	; 0x1caea <__fp_inf>
   1c90a:	51 11       	cpse	r21, r1
   1c90c:	39 c1       	rjmp	.+626    	; 0x1cb80 <__fp_szero>
   1c90e:	f3 c0       	rjmp	.+486    	; 0x1caf6 <__fp_nan>

0001c910 <__divsf3x>:
   1c910:	14 d1       	rcall	.+552    	; 0x1cb3a <__fp_split3>
   1c912:	98 f3       	brcs	.-26     	; 0x1c8fa <__divsf3+0x4>

0001c914 <__divsf3_pse>:
   1c914:	99 23       	and	r25, r25
   1c916:	c9 f3       	breq	.-14     	; 0x1c90a <__divsf3+0x14>
   1c918:	55 23       	and	r21, r21
   1c91a:	b1 f3       	breq	.-20     	; 0x1c908 <__divsf3+0x12>
   1c91c:	95 1b       	sub	r25, r21
   1c91e:	55 0b       	sbc	r21, r21
   1c920:	bb 27       	eor	r27, r27
   1c922:	aa 27       	eor	r26, r26
   1c924:	62 17       	cp	r22, r18
   1c926:	73 07       	cpc	r23, r19
   1c928:	84 07       	cpc	r24, r20
   1c92a:	38 f0       	brcs	.+14     	; 0x1c93a <__divsf3_pse+0x26>
   1c92c:	9f 5f       	subi	r25, 0xFF	; 255
   1c92e:	5f 4f       	sbci	r21, 0xFF	; 255
   1c930:	22 0f       	add	r18, r18
   1c932:	33 1f       	adc	r19, r19
   1c934:	44 1f       	adc	r20, r20
   1c936:	aa 1f       	adc	r26, r26
   1c938:	a9 f3       	breq	.-22     	; 0x1c924 <__divsf3_pse+0x10>
   1c93a:	33 d0       	rcall	.+102    	; 0x1c9a2 <__divsf3_pse+0x8e>
   1c93c:	0e 2e       	mov	r0, r30
   1c93e:	3a f0       	brmi	.+14     	; 0x1c94e <__divsf3_pse+0x3a>
   1c940:	e0 e8       	ldi	r30, 0x80	; 128
   1c942:	30 d0       	rcall	.+96     	; 0x1c9a4 <__divsf3_pse+0x90>
   1c944:	91 50       	subi	r25, 0x01	; 1
   1c946:	50 40       	sbci	r21, 0x00	; 0
   1c948:	e6 95       	lsr	r30
   1c94a:	00 1c       	adc	r0, r0
   1c94c:	ca f7       	brpl	.-14     	; 0x1c940 <__divsf3_pse+0x2c>
   1c94e:	29 d0       	rcall	.+82     	; 0x1c9a2 <__divsf3_pse+0x8e>
   1c950:	fe 2f       	mov	r31, r30
   1c952:	27 d0       	rcall	.+78     	; 0x1c9a2 <__divsf3_pse+0x8e>
   1c954:	66 0f       	add	r22, r22
   1c956:	77 1f       	adc	r23, r23
   1c958:	88 1f       	adc	r24, r24
   1c95a:	bb 1f       	adc	r27, r27
   1c95c:	26 17       	cp	r18, r22
   1c95e:	37 07       	cpc	r19, r23
   1c960:	48 07       	cpc	r20, r24
   1c962:	ab 07       	cpc	r26, r27
   1c964:	b0 e8       	ldi	r27, 0x80	; 128
   1c966:	09 f0       	breq	.+2      	; 0x1c96a <__divsf3_pse+0x56>
   1c968:	bb 0b       	sbc	r27, r27
   1c96a:	80 2d       	mov	r24, r0
   1c96c:	bf 01       	movw	r22, r30
   1c96e:	ff 27       	eor	r31, r31
   1c970:	93 58       	subi	r25, 0x83	; 131
   1c972:	5f 4f       	sbci	r21, 0xFF	; 255
   1c974:	2a f0       	brmi	.+10     	; 0x1c980 <__divsf3_pse+0x6c>
   1c976:	9e 3f       	cpi	r25, 0xFE	; 254
   1c978:	51 05       	cpc	r21, r1
   1c97a:	68 f0       	brcs	.+26     	; 0x1c996 <__divsf3_pse+0x82>
   1c97c:	b6 c0       	rjmp	.+364    	; 0x1caea <__fp_inf>
   1c97e:	00 c1       	rjmp	.+512    	; 0x1cb80 <__fp_szero>
   1c980:	5f 3f       	cpi	r21, 0xFF	; 255
   1c982:	ec f3       	brlt	.-6      	; 0x1c97e <__divsf3_pse+0x6a>
   1c984:	98 3e       	cpi	r25, 0xE8	; 232
   1c986:	dc f3       	brlt	.-10     	; 0x1c97e <__divsf3_pse+0x6a>
   1c988:	86 95       	lsr	r24
   1c98a:	77 95       	ror	r23
   1c98c:	67 95       	ror	r22
   1c98e:	b7 95       	ror	r27
   1c990:	f7 95       	ror	r31
   1c992:	9f 5f       	subi	r25, 0xFF	; 255
   1c994:	c9 f7       	brne	.-14     	; 0x1c988 <__divsf3_pse+0x74>
   1c996:	88 0f       	add	r24, r24
   1c998:	91 1d       	adc	r25, r1
   1c99a:	96 95       	lsr	r25
   1c99c:	87 95       	ror	r24
   1c99e:	97 f9       	bld	r25, 7
   1c9a0:	08 95       	ret
   1c9a2:	e1 e0       	ldi	r30, 0x01	; 1
   1c9a4:	66 0f       	add	r22, r22
   1c9a6:	77 1f       	adc	r23, r23
   1c9a8:	88 1f       	adc	r24, r24
   1c9aa:	bb 1f       	adc	r27, r27
   1c9ac:	62 17       	cp	r22, r18
   1c9ae:	73 07       	cpc	r23, r19
   1c9b0:	84 07       	cpc	r24, r20
   1c9b2:	ba 07       	cpc	r27, r26
   1c9b4:	20 f0       	brcs	.+8      	; 0x1c9be <__divsf3_pse+0xaa>
   1c9b6:	62 1b       	sub	r22, r18
   1c9b8:	73 0b       	sbc	r23, r19
   1c9ba:	84 0b       	sbc	r24, r20
   1c9bc:	ba 0b       	sbc	r27, r26
   1c9be:	ee 1f       	adc	r30, r30
   1c9c0:	88 f7       	brcc	.-30     	; 0x1c9a4 <__divsf3_pse+0x90>
   1c9c2:	e0 95       	com	r30
   1c9c4:	08 95       	ret

0001c9c6 <__fixsfsi>:
   1c9c6:	04 d0       	rcall	.+8      	; 0x1c9d0 <__fixunssfsi>
   1c9c8:	68 94       	set
   1c9ca:	b1 11       	cpse	r27, r1
   1c9cc:	d9 c0       	rjmp	.+434    	; 0x1cb80 <__fp_szero>
   1c9ce:	08 95       	ret

0001c9d0 <__fixunssfsi>:
   1c9d0:	bc d0       	rcall	.+376    	; 0x1cb4a <__fp_splitA>
   1c9d2:	88 f0       	brcs	.+34     	; 0x1c9f6 <__fixunssfsi+0x26>
   1c9d4:	9f 57       	subi	r25, 0x7F	; 127
   1c9d6:	90 f0       	brcs	.+36     	; 0x1c9fc <__fixunssfsi+0x2c>
   1c9d8:	b9 2f       	mov	r27, r25
   1c9da:	99 27       	eor	r25, r25
   1c9dc:	b7 51       	subi	r27, 0x17	; 23
   1c9de:	a0 f0       	brcs	.+40     	; 0x1ca08 <__fixunssfsi+0x38>
   1c9e0:	d1 f0       	breq	.+52     	; 0x1ca16 <__fixunssfsi+0x46>
   1c9e2:	66 0f       	add	r22, r22
   1c9e4:	77 1f       	adc	r23, r23
   1c9e6:	88 1f       	adc	r24, r24
   1c9e8:	99 1f       	adc	r25, r25
   1c9ea:	1a f0       	brmi	.+6      	; 0x1c9f2 <__fixunssfsi+0x22>
   1c9ec:	ba 95       	dec	r27
   1c9ee:	c9 f7       	brne	.-14     	; 0x1c9e2 <__fixunssfsi+0x12>
   1c9f0:	12 c0       	rjmp	.+36     	; 0x1ca16 <__fixunssfsi+0x46>
   1c9f2:	b1 30       	cpi	r27, 0x01	; 1
   1c9f4:	81 f0       	breq	.+32     	; 0x1ca16 <__fixunssfsi+0x46>
   1c9f6:	c3 d0       	rcall	.+390    	; 0x1cb7e <__fp_zero>
   1c9f8:	b1 e0       	ldi	r27, 0x01	; 1
   1c9fa:	08 95       	ret
   1c9fc:	c0 c0       	rjmp	.+384    	; 0x1cb7e <__fp_zero>
   1c9fe:	67 2f       	mov	r22, r23
   1ca00:	78 2f       	mov	r23, r24
   1ca02:	88 27       	eor	r24, r24
   1ca04:	b8 5f       	subi	r27, 0xF8	; 248
   1ca06:	39 f0       	breq	.+14     	; 0x1ca16 <__fixunssfsi+0x46>
   1ca08:	b9 3f       	cpi	r27, 0xF9	; 249
   1ca0a:	cc f3       	brlt	.-14     	; 0x1c9fe <__fixunssfsi+0x2e>
   1ca0c:	86 95       	lsr	r24
   1ca0e:	77 95       	ror	r23
   1ca10:	67 95       	ror	r22
   1ca12:	b3 95       	inc	r27
   1ca14:	d9 f7       	brne	.-10     	; 0x1ca0c <__fixunssfsi+0x3c>
   1ca16:	3e f4       	brtc	.+14     	; 0x1ca26 <__fixunssfsi+0x56>
   1ca18:	90 95       	com	r25
   1ca1a:	80 95       	com	r24
   1ca1c:	70 95       	com	r23
   1ca1e:	61 95       	neg	r22
   1ca20:	7f 4f       	sbci	r23, 0xFF	; 255
   1ca22:	8f 4f       	sbci	r24, 0xFF	; 255
   1ca24:	9f 4f       	sbci	r25, 0xFF	; 255
   1ca26:	08 95       	ret

0001ca28 <__floatunsisf>:
   1ca28:	e8 94       	clt
   1ca2a:	09 c0       	rjmp	.+18     	; 0x1ca3e <__floatsisf+0x12>

0001ca2c <__floatsisf>:
   1ca2c:	97 fb       	bst	r25, 7
   1ca2e:	3e f4       	brtc	.+14     	; 0x1ca3e <__floatsisf+0x12>
   1ca30:	90 95       	com	r25
   1ca32:	80 95       	com	r24
   1ca34:	70 95       	com	r23
   1ca36:	61 95       	neg	r22
   1ca38:	7f 4f       	sbci	r23, 0xFF	; 255
   1ca3a:	8f 4f       	sbci	r24, 0xFF	; 255
   1ca3c:	9f 4f       	sbci	r25, 0xFF	; 255
   1ca3e:	99 23       	and	r25, r25
   1ca40:	a9 f0       	breq	.+42     	; 0x1ca6c <__floatsisf+0x40>
   1ca42:	f9 2f       	mov	r31, r25
   1ca44:	96 e9       	ldi	r25, 0x96	; 150
   1ca46:	bb 27       	eor	r27, r27
   1ca48:	93 95       	inc	r25
   1ca4a:	f6 95       	lsr	r31
   1ca4c:	87 95       	ror	r24
   1ca4e:	77 95       	ror	r23
   1ca50:	67 95       	ror	r22
   1ca52:	b7 95       	ror	r27
   1ca54:	f1 11       	cpse	r31, r1
   1ca56:	f8 cf       	rjmp	.-16     	; 0x1ca48 <__floatsisf+0x1c>
   1ca58:	fa f4       	brpl	.+62     	; 0x1ca98 <__floatsisf+0x6c>
   1ca5a:	bb 0f       	add	r27, r27
   1ca5c:	11 f4       	brne	.+4      	; 0x1ca62 <__floatsisf+0x36>
   1ca5e:	60 ff       	sbrs	r22, 0
   1ca60:	1b c0       	rjmp	.+54     	; 0x1ca98 <__floatsisf+0x6c>
   1ca62:	6f 5f       	subi	r22, 0xFF	; 255
   1ca64:	7f 4f       	sbci	r23, 0xFF	; 255
   1ca66:	8f 4f       	sbci	r24, 0xFF	; 255
   1ca68:	9f 4f       	sbci	r25, 0xFF	; 255
   1ca6a:	16 c0       	rjmp	.+44     	; 0x1ca98 <__floatsisf+0x6c>
   1ca6c:	88 23       	and	r24, r24
   1ca6e:	11 f0       	breq	.+4      	; 0x1ca74 <__floatsisf+0x48>
   1ca70:	96 e9       	ldi	r25, 0x96	; 150
   1ca72:	11 c0       	rjmp	.+34     	; 0x1ca96 <__floatsisf+0x6a>
   1ca74:	77 23       	and	r23, r23
   1ca76:	21 f0       	breq	.+8      	; 0x1ca80 <__floatsisf+0x54>
   1ca78:	9e e8       	ldi	r25, 0x8E	; 142
   1ca7a:	87 2f       	mov	r24, r23
   1ca7c:	76 2f       	mov	r23, r22
   1ca7e:	05 c0       	rjmp	.+10     	; 0x1ca8a <__floatsisf+0x5e>
   1ca80:	66 23       	and	r22, r22
   1ca82:	71 f0       	breq	.+28     	; 0x1caa0 <__floatsisf+0x74>
   1ca84:	96 e8       	ldi	r25, 0x86	; 134
   1ca86:	86 2f       	mov	r24, r22
   1ca88:	70 e0       	ldi	r23, 0x00	; 0
   1ca8a:	60 e0       	ldi	r22, 0x00	; 0
   1ca8c:	2a f0       	brmi	.+10     	; 0x1ca98 <__floatsisf+0x6c>
   1ca8e:	9a 95       	dec	r25
   1ca90:	66 0f       	add	r22, r22
   1ca92:	77 1f       	adc	r23, r23
   1ca94:	88 1f       	adc	r24, r24
   1ca96:	da f7       	brpl	.-10     	; 0x1ca8e <__floatsisf+0x62>
   1ca98:	88 0f       	add	r24, r24
   1ca9a:	96 95       	lsr	r25
   1ca9c:	87 95       	ror	r24
   1ca9e:	97 f9       	bld	r25, 7
   1caa0:	08 95       	ret

0001caa2 <__fp_cmp>:
   1caa2:	99 0f       	add	r25, r25
   1caa4:	00 08       	sbc	r0, r0
   1caa6:	55 0f       	add	r21, r21
   1caa8:	aa 0b       	sbc	r26, r26
   1caaa:	e0 e8       	ldi	r30, 0x80	; 128
   1caac:	fe ef       	ldi	r31, 0xFE	; 254
   1caae:	16 16       	cp	r1, r22
   1cab0:	17 06       	cpc	r1, r23
   1cab2:	e8 07       	cpc	r30, r24
   1cab4:	f9 07       	cpc	r31, r25
   1cab6:	c0 f0       	brcs	.+48     	; 0x1cae8 <__fp_cmp+0x46>
   1cab8:	12 16       	cp	r1, r18
   1caba:	13 06       	cpc	r1, r19
   1cabc:	e4 07       	cpc	r30, r20
   1cabe:	f5 07       	cpc	r31, r21
   1cac0:	98 f0       	brcs	.+38     	; 0x1cae8 <__fp_cmp+0x46>
   1cac2:	62 1b       	sub	r22, r18
   1cac4:	73 0b       	sbc	r23, r19
   1cac6:	84 0b       	sbc	r24, r20
   1cac8:	95 0b       	sbc	r25, r21
   1caca:	39 f4       	brne	.+14     	; 0x1cada <__fp_cmp+0x38>
   1cacc:	0a 26       	eor	r0, r26
   1cace:	61 f0       	breq	.+24     	; 0x1cae8 <__fp_cmp+0x46>
   1cad0:	23 2b       	or	r18, r19
   1cad2:	24 2b       	or	r18, r20
   1cad4:	25 2b       	or	r18, r21
   1cad6:	21 f4       	brne	.+8      	; 0x1cae0 <__fp_cmp+0x3e>
   1cad8:	08 95       	ret
   1cada:	0a 26       	eor	r0, r26
   1cadc:	09 f4       	brne	.+2      	; 0x1cae0 <__fp_cmp+0x3e>
   1cade:	a1 40       	sbci	r26, 0x01	; 1
   1cae0:	a6 95       	lsr	r26
   1cae2:	8f ef       	ldi	r24, 0xFF	; 255
   1cae4:	81 1d       	adc	r24, r1
   1cae6:	81 1d       	adc	r24, r1
   1cae8:	08 95       	ret

0001caea <__fp_inf>:
   1caea:	97 f9       	bld	r25, 7
   1caec:	9f 67       	ori	r25, 0x7F	; 127
   1caee:	80 e8       	ldi	r24, 0x80	; 128
   1caf0:	70 e0       	ldi	r23, 0x00	; 0
   1caf2:	60 e0       	ldi	r22, 0x00	; 0
   1caf4:	08 95       	ret

0001caf6 <__fp_nan>:
   1caf6:	9f ef       	ldi	r25, 0xFF	; 255
   1caf8:	80 ec       	ldi	r24, 0xC0	; 192
   1cafa:	08 95       	ret

0001cafc <__fp_pscA>:
   1cafc:	00 24       	eor	r0, r0
   1cafe:	0a 94       	dec	r0
   1cb00:	16 16       	cp	r1, r22
   1cb02:	17 06       	cpc	r1, r23
   1cb04:	18 06       	cpc	r1, r24
   1cb06:	09 06       	cpc	r0, r25
   1cb08:	08 95       	ret

0001cb0a <__fp_pscB>:
   1cb0a:	00 24       	eor	r0, r0
   1cb0c:	0a 94       	dec	r0
   1cb0e:	12 16       	cp	r1, r18
   1cb10:	13 06       	cpc	r1, r19
   1cb12:	14 06       	cpc	r1, r20
   1cb14:	05 06       	cpc	r0, r21
   1cb16:	08 95       	ret

0001cb18 <__fp_round>:
   1cb18:	09 2e       	mov	r0, r25
   1cb1a:	03 94       	inc	r0
   1cb1c:	00 0c       	add	r0, r0
   1cb1e:	11 f4       	brne	.+4      	; 0x1cb24 <__fp_round+0xc>
   1cb20:	88 23       	and	r24, r24
   1cb22:	52 f0       	brmi	.+20     	; 0x1cb38 <__fp_round+0x20>
   1cb24:	bb 0f       	add	r27, r27
   1cb26:	40 f4       	brcc	.+16     	; 0x1cb38 <__fp_round+0x20>
   1cb28:	bf 2b       	or	r27, r31
   1cb2a:	11 f4       	brne	.+4      	; 0x1cb30 <__fp_round+0x18>
   1cb2c:	60 ff       	sbrs	r22, 0
   1cb2e:	04 c0       	rjmp	.+8      	; 0x1cb38 <__fp_round+0x20>
   1cb30:	6f 5f       	subi	r22, 0xFF	; 255
   1cb32:	7f 4f       	sbci	r23, 0xFF	; 255
   1cb34:	8f 4f       	sbci	r24, 0xFF	; 255
   1cb36:	9f 4f       	sbci	r25, 0xFF	; 255
   1cb38:	08 95       	ret

0001cb3a <__fp_split3>:
   1cb3a:	57 fd       	sbrc	r21, 7
   1cb3c:	90 58       	subi	r25, 0x80	; 128
   1cb3e:	44 0f       	add	r20, r20
   1cb40:	55 1f       	adc	r21, r21
   1cb42:	59 f0       	breq	.+22     	; 0x1cb5a <__fp_splitA+0x10>
   1cb44:	5f 3f       	cpi	r21, 0xFF	; 255
   1cb46:	71 f0       	breq	.+28     	; 0x1cb64 <__fp_splitA+0x1a>
   1cb48:	47 95       	ror	r20

0001cb4a <__fp_splitA>:
   1cb4a:	88 0f       	add	r24, r24
   1cb4c:	97 fb       	bst	r25, 7
   1cb4e:	99 1f       	adc	r25, r25
   1cb50:	61 f0       	breq	.+24     	; 0x1cb6a <__fp_splitA+0x20>
   1cb52:	9f 3f       	cpi	r25, 0xFF	; 255
   1cb54:	79 f0       	breq	.+30     	; 0x1cb74 <__fp_splitA+0x2a>
   1cb56:	87 95       	ror	r24
   1cb58:	08 95       	ret
   1cb5a:	12 16       	cp	r1, r18
   1cb5c:	13 06       	cpc	r1, r19
   1cb5e:	14 06       	cpc	r1, r20
   1cb60:	55 1f       	adc	r21, r21
   1cb62:	f2 cf       	rjmp	.-28     	; 0x1cb48 <__fp_split3+0xe>
   1cb64:	46 95       	lsr	r20
   1cb66:	f1 df       	rcall	.-30     	; 0x1cb4a <__fp_splitA>
   1cb68:	08 c0       	rjmp	.+16     	; 0x1cb7a <__fp_splitA+0x30>
   1cb6a:	16 16       	cp	r1, r22
   1cb6c:	17 06       	cpc	r1, r23
   1cb6e:	18 06       	cpc	r1, r24
   1cb70:	99 1f       	adc	r25, r25
   1cb72:	f1 cf       	rjmp	.-30     	; 0x1cb56 <__fp_splitA+0xc>
   1cb74:	86 95       	lsr	r24
   1cb76:	71 05       	cpc	r23, r1
   1cb78:	61 05       	cpc	r22, r1
   1cb7a:	08 94       	sec
   1cb7c:	08 95       	ret

0001cb7e <__fp_zero>:
   1cb7e:	e8 94       	clt

0001cb80 <__fp_szero>:
   1cb80:	bb 27       	eor	r27, r27
   1cb82:	66 27       	eor	r22, r22
   1cb84:	77 27       	eor	r23, r23
   1cb86:	cb 01       	movw	r24, r22
   1cb88:	97 f9       	bld	r25, 7
   1cb8a:	08 95       	ret

0001cb8c <__gesf2>:
   1cb8c:	8a df       	rcall	.-236    	; 0x1caa2 <__fp_cmp>
   1cb8e:	08 f4       	brcc	.+2      	; 0x1cb92 <__gesf2+0x6>
   1cb90:	8f ef       	ldi	r24, 0xFF	; 255
   1cb92:	08 95       	ret

0001cb94 <__mulsf3>:
   1cb94:	0b d0       	rcall	.+22     	; 0x1cbac <__mulsf3x>
   1cb96:	c0 cf       	rjmp	.-128    	; 0x1cb18 <__fp_round>
   1cb98:	b1 df       	rcall	.-158    	; 0x1cafc <__fp_pscA>
   1cb9a:	28 f0       	brcs	.+10     	; 0x1cba6 <__mulsf3+0x12>
   1cb9c:	b6 df       	rcall	.-148    	; 0x1cb0a <__fp_pscB>
   1cb9e:	18 f0       	brcs	.+6      	; 0x1cba6 <__mulsf3+0x12>
   1cba0:	95 23       	and	r25, r21
   1cba2:	09 f0       	breq	.+2      	; 0x1cba6 <__mulsf3+0x12>
   1cba4:	a2 cf       	rjmp	.-188    	; 0x1caea <__fp_inf>
   1cba6:	a7 cf       	rjmp	.-178    	; 0x1caf6 <__fp_nan>
   1cba8:	11 24       	eor	r1, r1
   1cbaa:	ea cf       	rjmp	.-44     	; 0x1cb80 <__fp_szero>

0001cbac <__mulsf3x>:
   1cbac:	c6 df       	rcall	.-116    	; 0x1cb3a <__fp_split3>
   1cbae:	a0 f3       	brcs	.-24     	; 0x1cb98 <__mulsf3+0x4>

0001cbb0 <__mulsf3_pse>:
   1cbb0:	95 9f       	mul	r25, r21
   1cbb2:	d1 f3       	breq	.-12     	; 0x1cba8 <__mulsf3+0x14>
   1cbb4:	95 0f       	add	r25, r21
   1cbb6:	50 e0       	ldi	r21, 0x00	; 0
   1cbb8:	55 1f       	adc	r21, r21
   1cbba:	62 9f       	mul	r22, r18
   1cbbc:	f0 01       	movw	r30, r0
   1cbbe:	72 9f       	mul	r23, r18
   1cbc0:	bb 27       	eor	r27, r27
   1cbc2:	f0 0d       	add	r31, r0
   1cbc4:	b1 1d       	adc	r27, r1
   1cbc6:	63 9f       	mul	r22, r19
   1cbc8:	aa 27       	eor	r26, r26
   1cbca:	f0 0d       	add	r31, r0
   1cbcc:	b1 1d       	adc	r27, r1
   1cbce:	aa 1f       	adc	r26, r26
   1cbd0:	64 9f       	mul	r22, r20
   1cbd2:	66 27       	eor	r22, r22
   1cbd4:	b0 0d       	add	r27, r0
   1cbd6:	a1 1d       	adc	r26, r1
   1cbd8:	66 1f       	adc	r22, r22
   1cbda:	82 9f       	mul	r24, r18
   1cbdc:	22 27       	eor	r18, r18
   1cbde:	b0 0d       	add	r27, r0
   1cbe0:	a1 1d       	adc	r26, r1
   1cbe2:	62 1f       	adc	r22, r18
   1cbe4:	73 9f       	mul	r23, r19
   1cbe6:	b0 0d       	add	r27, r0
   1cbe8:	a1 1d       	adc	r26, r1
   1cbea:	62 1f       	adc	r22, r18
   1cbec:	83 9f       	mul	r24, r19
   1cbee:	a0 0d       	add	r26, r0
   1cbf0:	61 1d       	adc	r22, r1
   1cbf2:	22 1f       	adc	r18, r18
   1cbf4:	74 9f       	mul	r23, r20
   1cbf6:	33 27       	eor	r19, r19
   1cbf8:	a0 0d       	add	r26, r0
   1cbfa:	61 1d       	adc	r22, r1
   1cbfc:	23 1f       	adc	r18, r19
   1cbfe:	84 9f       	mul	r24, r20
   1cc00:	60 0d       	add	r22, r0
   1cc02:	21 1d       	adc	r18, r1
   1cc04:	82 2f       	mov	r24, r18
   1cc06:	76 2f       	mov	r23, r22
   1cc08:	6a 2f       	mov	r22, r26
   1cc0a:	11 24       	eor	r1, r1
   1cc0c:	9f 57       	subi	r25, 0x7F	; 127
   1cc0e:	50 40       	sbci	r21, 0x00	; 0
   1cc10:	8a f0       	brmi	.+34     	; 0x1cc34 <__mulsf3_pse+0x84>
   1cc12:	e1 f0       	breq	.+56     	; 0x1cc4c <__mulsf3_pse+0x9c>
   1cc14:	88 23       	and	r24, r24
   1cc16:	4a f0       	brmi	.+18     	; 0x1cc2a <__mulsf3_pse+0x7a>
   1cc18:	ee 0f       	add	r30, r30
   1cc1a:	ff 1f       	adc	r31, r31
   1cc1c:	bb 1f       	adc	r27, r27
   1cc1e:	66 1f       	adc	r22, r22
   1cc20:	77 1f       	adc	r23, r23
   1cc22:	88 1f       	adc	r24, r24
   1cc24:	91 50       	subi	r25, 0x01	; 1
   1cc26:	50 40       	sbci	r21, 0x00	; 0
   1cc28:	a9 f7       	brne	.-22     	; 0x1cc14 <__mulsf3_pse+0x64>
   1cc2a:	9e 3f       	cpi	r25, 0xFE	; 254
   1cc2c:	51 05       	cpc	r21, r1
   1cc2e:	70 f0       	brcs	.+28     	; 0x1cc4c <__mulsf3_pse+0x9c>
   1cc30:	5c cf       	rjmp	.-328    	; 0x1caea <__fp_inf>
   1cc32:	a6 cf       	rjmp	.-180    	; 0x1cb80 <__fp_szero>
   1cc34:	5f 3f       	cpi	r21, 0xFF	; 255
   1cc36:	ec f3       	brlt	.-6      	; 0x1cc32 <__mulsf3_pse+0x82>
   1cc38:	98 3e       	cpi	r25, 0xE8	; 232
   1cc3a:	dc f3       	brlt	.-10     	; 0x1cc32 <__mulsf3_pse+0x82>
   1cc3c:	86 95       	lsr	r24
   1cc3e:	77 95       	ror	r23
   1cc40:	67 95       	ror	r22
   1cc42:	b7 95       	ror	r27
   1cc44:	f7 95       	ror	r31
   1cc46:	e7 95       	ror	r30
   1cc48:	9f 5f       	subi	r25, 0xFF	; 255
   1cc4a:	c1 f7       	brne	.-16     	; 0x1cc3c <__mulsf3_pse+0x8c>
   1cc4c:	fe 2b       	or	r31, r30
   1cc4e:	88 0f       	add	r24, r24
   1cc50:	91 1d       	adc	r25, r1
   1cc52:	96 95       	lsr	r25
   1cc54:	87 95       	ror	r24
   1cc56:	97 f9       	bld	r25, 7
   1cc58:	08 95       	ret

0001cc5a <round>:
   1cc5a:	77 df       	rcall	.-274    	; 0x1cb4a <__fp_splitA>
   1cc5c:	e0 f0       	brcs	.+56     	; 0x1cc96 <round+0x3c>
   1cc5e:	9e 37       	cpi	r25, 0x7E	; 126
   1cc60:	d8 f0       	brcs	.+54     	; 0x1cc98 <round+0x3e>
   1cc62:	96 39       	cpi	r25, 0x96	; 150
   1cc64:	b8 f4       	brcc	.+46     	; 0x1cc94 <round+0x3a>
   1cc66:	9e 38       	cpi	r25, 0x8E	; 142
   1cc68:	48 f4       	brcc	.+18     	; 0x1cc7c <round+0x22>
   1cc6a:	67 2f       	mov	r22, r23
   1cc6c:	78 2f       	mov	r23, r24
   1cc6e:	88 27       	eor	r24, r24
   1cc70:	98 5f       	subi	r25, 0xF8	; 248
   1cc72:	f9 cf       	rjmp	.-14     	; 0x1cc66 <round+0xc>
   1cc74:	86 95       	lsr	r24
   1cc76:	77 95       	ror	r23
   1cc78:	67 95       	ror	r22
   1cc7a:	93 95       	inc	r25
   1cc7c:	95 39       	cpi	r25, 0x95	; 149
   1cc7e:	d0 f3       	brcs	.-12     	; 0x1cc74 <round+0x1a>
   1cc80:	b6 2f       	mov	r27, r22
   1cc82:	b1 70       	andi	r27, 0x01	; 1
   1cc84:	6b 0f       	add	r22, r27
   1cc86:	71 1d       	adc	r23, r1
   1cc88:	81 1d       	adc	r24, r1
   1cc8a:	20 f4       	brcc	.+8      	; 0x1cc94 <round+0x3a>
   1cc8c:	87 95       	ror	r24
   1cc8e:	77 95       	ror	r23
   1cc90:	67 95       	ror	r22
   1cc92:	93 95       	inc	r25
   1cc94:	02 c0       	rjmp	.+4      	; 0x1cc9a <__fp_mintl>
   1cc96:	1c c0       	rjmp	.+56     	; 0x1ccd0 <__fp_mpack>
   1cc98:	73 cf       	rjmp	.-282    	; 0x1cb80 <__fp_szero>

0001cc9a <__fp_mintl>:
   1cc9a:	88 23       	and	r24, r24
   1cc9c:	71 f4       	brne	.+28     	; 0x1ccba <__fp_mintl+0x20>
   1cc9e:	77 23       	and	r23, r23
   1cca0:	21 f0       	breq	.+8      	; 0x1ccaa <__fp_mintl+0x10>
   1cca2:	98 50       	subi	r25, 0x08	; 8
   1cca4:	87 2b       	or	r24, r23
   1cca6:	76 2f       	mov	r23, r22
   1cca8:	07 c0       	rjmp	.+14     	; 0x1ccb8 <__fp_mintl+0x1e>
   1ccaa:	66 23       	and	r22, r22
   1ccac:	11 f4       	brne	.+4      	; 0x1ccb2 <__fp_mintl+0x18>
   1ccae:	99 27       	eor	r25, r25
   1ccb0:	0d c0       	rjmp	.+26     	; 0x1cccc <__fp_mintl+0x32>
   1ccb2:	90 51       	subi	r25, 0x10	; 16
   1ccb4:	86 2b       	or	r24, r22
   1ccb6:	70 e0       	ldi	r23, 0x00	; 0
   1ccb8:	60 e0       	ldi	r22, 0x00	; 0
   1ccba:	2a f0       	brmi	.+10     	; 0x1ccc6 <__fp_mintl+0x2c>
   1ccbc:	9a 95       	dec	r25
   1ccbe:	66 0f       	add	r22, r22
   1ccc0:	77 1f       	adc	r23, r23
   1ccc2:	88 1f       	adc	r24, r24
   1ccc4:	da f7       	brpl	.-10     	; 0x1ccbc <__fp_mintl+0x22>
   1ccc6:	88 0f       	add	r24, r24
   1ccc8:	96 95       	lsr	r25
   1ccca:	87 95       	ror	r24
   1cccc:	97 f9       	bld	r25, 7
   1ccce:	08 95       	ret

0001ccd0 <__fp_mpack>:
   1ccd0:	9f 3f       	cpi	r25, 0xFF	; 255
   1ccd2:	31 f0       	breq	.+12     	; 0x1cce0 <__fp_mpack_finite+0xc>

0001ccd4 <__fp_mpack_finite>:
   1ccd4:	91 50       	subi	r25, 0x01	; 1
   1ccd6:	20 f4       	brcc	.+8      	; 0x1cce0 <__fp_mpack_finite+0xc>
   1ccd8:	87 95       	ror	r24
   1ccda:	77 95       	ror	r23
   1ccdc:	67 95       	ror	r22
   1ccde:	b7 95       	ror	r27
   1cce0:	88 0f       	add	r24, r24
   1cce2:	91 1d       	adc	r25, r1
   1cce4:	96 95       	lsr	r25
   1cce6:	87 95       	ror	r24
   1cce8:	97 f9       	bld	r25, 7
   1ccea:	08 95       	ret

0001ccec <calloc>:
   1ccec:	0f 93       	push	r16
   1ccee:	1f 93       	push	r17
   1ccf0:	cf 93       	push	r28
   1ccf2:	df 93       	push	r29
   1ccf4:	86 9f       	mul	r24, r22
   1ccf6:	80 01       	movw	r16, r0
   1ccf8:	87 9f       	mul	r24, r23
   1ccfa:	10 0d       	add	r17, r0
   1ccfc:	96 9f       	mul	r25, r22
   1ccfe:	10 0d       	add	r17, r0
   1cd00:	11 24       	eor	r1, r1
   1cd02:	c8 01       	movw	r24, r16
   1cd04:	0d d0       	rcall	.+26     	; 0x1cd20 <malloc>
   1cd06:	ec 01       	movw	r28, r24
   1cd08:	00 97       	sbiw	r24, 0x00	; 0
   1cd0a:	21 f0       	breq	.+8      	; 0x1cd14 <calloc+0x28>
   1cd0c:	a8 01       	movw	r20, r16
   1cd0e:	60 e0       	ldi	r22, 0x00	; 0
   1cd10:	70 e0       	ldi	r23, 0x00	; 0
   1cd12:	0e d2       	rcall	.+1052   	; 0x1d130 <memset>
   1cd14:	ce 01       	movw	r24, r28
   1cd16:	df 91       	pop	r29
   1cd18:	cf 91       	pop	r28
   1cd1a:	1f 91       	pop	r17
   1cd1c:	0f 91       	pop	r16
   1cd1e:	08 95       	ret

0001cd20 <malloc>:
   1cd20:	0f 93       	push	r16
   1cd22:	1f 93       	push	r17
   1cd24:	cf 93       	push	r28
   1cd26:	df 93       	push	r29
   1cd28:	82 30       	cpi	r24, 0x02	; 2
   1cd2a:	91 05       	cpc	r25, r1
   1cd2c:	10 f4       	brcc	.+4      	; 0x1cd32 <malloc+0x12>
   1cd2e:	82 e0       	ldi	r24, 0x02	; 2
   1cd30:	90 e0       	ldi	r25, 0x00	; 0
   1cd32:	e0 91 44 21 	lds	r30, 0x2144	; 0x802144 <__flp>
   1cd36:	f0 91 45 21 	lds	r31, 0x2145	; 0x802145 <__flp+0x1>
   1cd3a:	20 e0       	ldi	r18, 0x00	; 0
   1cd3c:	30 e0       	ldi	r19, 0x00	; 0
   1cd3e:	a0 e0       	ldi	r26, 0x00	; 0
   1cd40:	b0 e0       	ldi	r27, 0x00	; 0
   1cd42:	30 97       	sbiw	r30, 0x00	; 0
   1cd44:	19 f1       	breq	.+70     	; 0x1cd8c <malloc+0x6c>
   1cd46:	40 81       	ld	r20, Z
   1cd48:	51 81       	ldd	r21, Z+1	; 0x01
   1cd4a:	02 81       	ldd	r16, Z+2	; 0x02
   1cd4c:	13 81       	ldd	r17, Z+3	; 0x03
   1cd4e:	48 17       	cp	r20, r24
   1cd50:	59 07       	cpc	r21, r25
   1cd52:	c8 f0       	brcs	.+50     	; 0x1cd86 <malloc+0x66>
   1cd54:	84 17       	cp	r24, r20
   1cd56:	95 07       	cpc	r25, r21
   1cd58:	69 f4       	brne	.+26     	; 0x1cd74 <malloc+0x54>
   1cd5a:	10 97       	sbiw	r26, 0x00	; 0
   1cd5c:	31 f0       	breq	.+12     	; 0x1cd6a <malloc+0x4a>
   1cd5e:	12 96       	adiw	r26, 0x02	; 2
   1cd60:	0c 93       	st	X, r16
   1cd62:	12 97       	sbiw	r26, 0x02	; 2
   1cd64:	13 96       	adiw	r26, 0x03	; 3
   1cd66:	1c 93       	st	X, r17
   1cd68:	27 c0       	rjmp	.+78     	; 0x1cdb8 <malloc+0x98>
   1cd6a:	00 93 44 21 	sts	0x2144, r16	; 0x802144 <__flp>
   1cd6e:	10 93 45 21 	sts	0x2145, r17	; 0x802145 <__flp+0x1>
   1cd72:	22 c0       	rjmp	.+68     	; 0x1cdb8 <malloc+0x98>
   1cd74:	21 15       	cp	r18, r1
   1cd76:	31 05       	cpc	r19, r1
   1cd78:	19 f0       	breq	.+6      	; 0x1cd80 <malloc+0x60>
   1cd7a:	42 17       	cp	r20, r18
   1cd7c:	53 07       	cpc	r21, r19
   1cd7e:	18 f4       	brcc	.+6      	; 0x1cd86 <malloc+0x66>
   1cd80:	9a 01       	movw	r18, r20
   1cd82:	bd 01       	movw	r22, r26
   1cd84:	ef 01       	movw	r28, r30
   1cd86:	df 01       	movw	r26, r30
   1cd88:	f8 01       	movw	r30, r16
   1cd8a:	db cf       	rjmp	.-74     	; 0x1cd42 <malloc+0x22>
   1cd8c:	21 15       	cp	r18, r1
   1cd8e:	31 05       	cpc	r19, r1
   1cd90:	f9 f0       	breq	.+62     	; 0x1cdd0 <malloc+0xb0>
   1cd92:	28 1b       	sub	r18, r24
   1cd94:	39 0b       	sbc	r19, r25
   1cd96:	24 30       	cpi	r18, 0x04	; 4
   1cd98:	31 05       	cpc	r19, r1
   1cd9a:	80 f4       	brcc	.+32     	; 0x1cdbc <malloc+0x9c>
   1cd9c:	8a 81       	ldd	r24, Y+2	; 0x02
   1cd9e:	9b 81       	ldd	r25, Y+3	; 0x03
   1cda0:	61 15       	cp	r22, r1
   1cda2:	71 05       	cpc	r23, r1
   1cda4:	21 f0       	breq	.+8      	; 0x1cdae <malloc+0x8e>
   1cda6:	fb 01       	movw	r30, r22
   1cda8:	93 83       	std	Z+3, r25	; 0x03
   1cdaa:	82 83       	std	Z+2, r24	; 0x02
   1cdac:	04 c0       	rjmp	.+8      	; 0x1cdb6 <malloc+0x96>
   1cdae:	90 93 45 21 	sts	0x2145, r25	; 0x802145 <__flp+0x1>
   1cdb2:	80 93 44 21 	sts	0x2144, r24	; 0x802144 <__flp>
   1cdb6:	fe 01       	movw	r30, r28
   1cdb8:	32 96       	adiw	r30, 0x02	; 2
   1cdba:	44 c0       	rjmp	.+136    	; 0x1ce44 <malloc+0x124>
   1cdbc:	fe 01       	movw	r30, r28
   1cdbe:	e2 0f       	add	r30, r18
   1cdc0:	f3 1f       	adc	r31, r19
   1cdc2:	81 93       	st	Z+, r24
   1cdc4:	91 93       	st	Z+, r25
   1cdc6:	22 50       	subi	r18, 0x02	; 2
   1cdc8:	31 09       	sbc	r19, r1
   1cdca:	39 83       	std	Y+1, r19	; 0x01
   1cdcc:	28 83       	st	Y, r18
   1cdce:	3a c0       	rjmp	.+116    	; 0x1ce44 <malloc+0x124>
   1cdd0:	20 91 42 21 	lds	r18, 0x2142	; 0x802142 <__brkval>
   1cdd4:	30 91 43 21 	lds	r19, 0x2143	; 0x802143 <__brkval+0x1>
   1cdd8:	23 2b       	or	r18, r19
   1cdda:	41 f4       	brne	.+16     	; 0x1cdec <malloc+0xcc>
   1cddc:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
   1cde0:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
   1cde4:	30 93 43 21 	sts	0x2143, r19	; 0x802143 <__brkval+0x1>
   1cde8:	20 93 42 21 	sts	0x2142, r18	; 0x802142 <__brkval>
   1cdec:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
   1cdf0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
   1cdf4:	21 15       	cp	r18, r1
   1cdf6:	31 05       	cpc	r19, r1
   1cdf8:	41 f4       	brne	.+16     	; 0x1ce0a <malloc+0xea>
   1cdfa:	2d b7       	in	r18, 0x3d	; 61
   1cdfc:	3e b7       	in	r19, 0x3e	; 62
   1cdfe:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
   1ce02:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
   1ce06:	24 1b       	sub	r18, r20
   1ce08:	35 0b       	sbc	r19, r21
   1ce0a:	e0 91 42 21 	lds	r30, 0x2142	; 0x802142 <__brkval>
   1ce0e:	f0 91 43 21 	lds	r31, 0x2143	; 0x802143 <__brkval+0x1>
   1ce12:	e2 17       	cp	r30, r18
   1ce14:	f3 07       	cpc	r31, r19
   1ce16:	a0 f4       	brcc	.+40     	; 0x1ce40 <malloc+0x120>
   1ce18:	2e 1b       	sub	r18, r30
   1ce1a:	3f 0b       	sbc	r19, r31
   1ce1c:	28 17       	cp	r18, r24
   1ce1e:	39 07       	cpc	r19, r25
   1ce20:	78 f0       	brcs	.+30     	; 0x1ce40 <malloc+0x120>
   1ce22:	ac 01       	movw	r20, r24
   1ce24:	4e 5f       	subi	r20, 0xFE	; 254
   1ce26:	5f 4f       	sbci	r21, 0xFF	; 255
   1ce28:	24 17       	cp	r18, r20
   1ce2a:	35 07       	cpc	r19, r21
   1ce2c:	48 f0       	brcs	.+18     	; 0x1ce40 <malloc+0x120>
   1ce2e:	4e 0f       	add	r20, r30
   1ce30:	5f 1f       	adc	r21, r31
   1ce32:	50 93 43 21 	sts	0x2143, r21	; 0x802143 <__brkval+0x1>
   1ce36:	40 93 42 21 	sts	0x2142, r20	; 0x802142 <__brkval>
   1ce3a:	81 93       	st	Z+, r24
   1ce3c:	91 93       	st	Z+, r25
   1ce3e:	02 c0       	rjmp	.+4      	; 0x1ce44 <malloc+0x124>
   1ce40:	e0 e0       	ldi	r30, 0x00	; 0
   1ce42:	f0 e0       	ldi	r31, 0x00	; 0
   1ce44:	cf 01       	movw	r24, r30
   1ce46:	df 91       	pop	r29
   1ce48:	cf 91       	pop	r28
   1ce4a:	1f 91       	pop	r17
   1ce4c:	0f 91       	pop	r16
   1ce4e:	08 95       	ret

0001ce50 <free>:
   1ce50:	cf 93       	push	r28
   1ce52:	df 93       	push	r29
   1ce54:	00 97       	sbiw	r24, 0x00	; 0
   1ce56:	09 f4       	brne	.+2      	; 0x1ce5a <free+0xa>
   1ce58:	81 c0       	rjmp	.+258    	; 0x1cf5c <free+0x10c>
   1ce5a:	fc 01       	movw	r30, r24
   1ce5c:	32 97       	sbiw	r30, 0x02	; 2
   1ce5e:	13 82       	std	Z+3, r1	; 0x03
   1ce60:	12 82       	std	Z+2, r1	; 0x02
   1ce62:	a0 91 44 21 	lds	r26, 0x2144	; 0x802144 <__flp>
   1ce66:	b0 91 45 21 	lds	r27, 0x2145	; 0x802145 <__flp+0x1>
   1ce6a:	10 97       	sbiw	r26, 0x00	; 0
   1ce6c:	81 f4       	brne	.+32     	; 0x1ce8e <free+0x3e>
   1ce6e:	20 81       	ld	r18, Z
   1ce70:	31 81       	ldd	r19, Z+1	; 0x01
   1ce72:	82 0f       	add	r24, r18
   1ce74:	93 1f       	adc	r25, r19
   1ce76:	20 91 42 21 	lds	r18, 0x2142	; 0x802142 <__brkval>
   1ce7a:	30 91 43 21 	lds	r19, 0x2143	; 0x802143 <__brkval+0x1>
   1ce7e:	28 17       	cp	r18, r24
   1ce80:	39 07       	cpc	r19, r25
   1ce82:	51 f5       	brne	.+84     	; 0x1ced8 <free+0x88>
   1ce84:	f0 93 43 21 	sts	0x2143, r31	; 0x802143 <__brkval+0x1>
   1ce88:	e0 93 42 21 	sts	0x2142, r30	; 0x802142 <__brkval>
   1ce8c:	67 c0       	rjmp	.+206    	; 0x1cf5c <free+0x10c>
   1ce8e:	ed 01       	movw	r28, r26
   1ce90:	20 e0       	ldi	r18, 0x00	; 0
   1ce92:	30 e0       	ldi	r19, 0x00	; 0
   1ce94:	ce 17       	cp	r28, r30
   1ce96:	df 07       	cpc	r29, r31
   1ce98:	40 f4       	brcc	.+16     	; 0x1ceaa <free+0x5a>
   1ce9a:	4a 81       	ldd	r20, Y+2	; 0x02
   1ce9c:	5b 81       	ldd	r21, Y+3	; 0x03
   1ce9e:	9e 01       	movw	r18, r28
   1cea0:	41 15       	cp	r20, r1
   1cea2:	51 05       	cpc	r21, r1
   1cea4:	f1 f0       	breq	.+60     	; 0x1cee2 <free+0x92>
   1cea6:	ea 01       	movw	r28, r20
   1cea8:	f5 cf       	rjmp	.-22     	; 0x1ce94 <free+0x44>
   1ceaa:	d3 83       	std	Z+3, r29	; 0x03
   1ceac:	c2 83       	std	Z+2, r28	; 0x02
   1ceae:	40 81       	ld	r20, Z
   1ceb0:	51 81       	ldd	r21, Z+1	; 0x01
   1ceb2:	84 0f       	add	r24, r20
   1ceb4:	95 1f       	adc	r25, r21
   1ceb6:	c8 17       	cp	r28, r24
   1ceb8:	d9 07       	cpc	r29, r25
   1ceba:	59 f4       	brne	.+22     	; 0x1ced2 <free+0x82>
   1cebc:	88 81       	ld	r24, Y
   1cebe:	99 81       	ldd	r25, Y+1	; 0x01
   1cec0:	84 0f       	add	r24, r20
   1cec2:	95 1f       	adc	r25, r21
   1cec4:	02 96       	adiw	r24, 0x02	; 2
   1cec6:	91 83       	std	Z+1, r25	; 0x01
   1cec8:	80 83       	st	Z, r24
   1ceca:	8a 81       	ldd	r24, Y+2	; 0x02
   1cecc:	9b 81       	ldd	r25, Y+3	; 0x03
   1cece:	93 83       	std	Z+3, r25	; 0x03
   1ced0:	82 83       	std	Z+2, r24	; 0x02
   1ced2:	21 15       	cp	r18, r1
   1ced4:	31 05       	cpc	r19, r1
   1ced6:	29 f4       	brne	.+10     	; 0x1cee2 <free+0x92>
   1ced8:	f0 93 45 21 	sts	0x2145, r31	; 0x802145 <__flp+0x1>
   1cedc:	e0 93 44 21 	sts	0x2144, r30	; 0x802144 <__flp>
   1cee0:	3d c0       	rjmp	.+122    	; 0x1cf5c <free+0x10c>
   1cee2:	e9 01       	movw	r28, r18
   1cee4:	fb 83       	std	Y+3, r31	; 0x03
   1cee6:	ea 83       	std	Y+2, r30	; 0x02
   1cee8:	49 91       	ld	r20, Y+
   1ceea:	59 91       	ld	r21, Y+
   1ceec:	c4 0f       	add	r28, r20
   1ceee:	d5 1f       	adc	r29, r21
   1cef0:	ec 17       	cp	r30, r28
   1cef2:	fd 07       	cpc	r31, r29
   1cef4:	61 f4       	brne	.+24     	; 0x1cf0e <free+0xbe>
   1cef6:	80 81       	ld	r24, Z
   1cef8:	91 81       	ldd	r25, Z+1	; 0x01
   1cefa:	84 0f       	add	r24, r20
   1cefc:	95 1f       	adc	r25, r21
   1cefe:	02 96       	adiw	r24, 0x02	; 2
   1cf00:	e9 01       	movw	r28, r18
   1cf02:	99 83       	std	Y+1, r25	; 0x01
   1cf04:	88 83       	st	Y, r24
   1cf06:	82 81       	ldd	r24, Z+2	; 0x02
   1cf08:	93 81       	ldd	r25, Z+3	; 0x03
   1cf0a:	9b 83       	std	Y+3, r25	; 0x03
   1cf0c:	8a 83       	std	Y+2, r24	; 0x02
   1cf0e:	e0 e0       	ldi	r30, 0x00	; 0
   1cf10:	f0 e0       	ldi	r31, 0x00	; 0
   1cf12:	12 96       	adiw	r26, 0x02	; 2
   1cf14:	8d 91       	ld	r24, X+
   1cf16:	9c 91       	ld	r25, X
   1cf18:	13 97       	sbiw	r26, 0x03	; 3
   1cf1a:	00 97       	sbiw	r24, 0x00	; 0
   1cf1c:	19 f0       	breq	.+6      	; 0x1cf24 <free+0xd4>
   1cf1e:	fd 01       	movw	r30, r26
   1cf20:	dc 01       	movw	r26, r24
   1cf22:	f7 cf       	rjmp	.-18     	; 0x1cf12 <free+0xc2>
   1cf24:	8d 91       	ld	r24, X+
   1cf26:	9c 91       	ld	r25, X
   1cf28:	11 97       	sbiw	r26, 0x01	; 1
   1cf2a:	9d 01       	movw	r18, r26
   1cf2c:	2e 5f       	subi	r18, 0xFE	; 254
   1cf2e:	3f 4f       	sbci	r19, 0xFF	; 255
   1cf30:	82 0f       	add	r24, r18
   1cf32:	93 1f       	adc	r25, r19
   1cf34:	20 91 42 21 	lds	r18, 0x2142	; 0x802142 <__brkval>
   1cf38:	30 91 43 21 	lds	r19, 0x2143	; 0x802143 <__brkval+0x1>
   1cf3c:	28 17       	cp	r18, r24
   1cf3e:	39 07       	cpc	r19, r25
   1cf40:	69 f4       	brne	.+26     	; 0x1cf5c <free+0x10c>
   1cf42:	30 97       	sbiw	r30, 0x00	; 0
   1cf44:	29 f4       	brne	.+10     	; 0x1cf50 <free+0x100>
   1cf46:	10 92 45 21 	sts	0x2145, r1	; 0x802145 <__flp+0x1>
   1cf4a:	10 92 44 21 	sts	0x2144, r1	; 0x802144 <__flp>
   1cf4e:	02 c0       	rjmp	.+4      	; 0x1cf54 <free+0x104>
   1cf50:	13 82       	std	Z+3, r1	; 0x03
   1cf52:	12 82       	std	Z+2, r1	; 0x02
   1cf54:	b0 93 43 21 	sts	0x2143, r27	; 0x802143 <__brkval+0x1>
   1cf58:	a0 93 42 21 	sts	0x2142, r26	; 0x802142 <__brkval>
   1cf5c:	df 91       	pop	r29
   1cf5e:	cf 91       	pop	r28
   1cf60:	08 95       	ret

0001cf62 <abort>:
   1cf62:	81 e0       	ldi	r24, 0x01	; 1
   1cf64:	90 e0       	ldi	r25, 0x00	; 0
   1cf66:	f8 94       	cli
   1cf68:	53 c1       	rjmp	.+678    	; 0x1d210 <_exit>

0001cf6a <__ftoa_engine>:
   1cf6a:	28 30       	cpi	r18, 0x08	; 8
   1cf6c:	08 f0       	brcs	.+2      	; 0x1cf70 <__ftoa_engine+0x6>
   1cf6e:	27 e0       	ldi	r18, 0x07	; 7
   1cf70:	33 27       	eor	r19, r19
   1cf72:	da 01       	movw	r26, r20
   1cf74:	99 0f       	add	r25, r25
   1cf76:	31 1d       	adc	r19, r1
   1cf78:	87 fd       	sbrc	r24, 7
   1cf7a:	91 60       	ori	r25, 0x01	; 1
   1cf7c:	00 96       	adiw	r24, 0x00	; 0
   1cf7e:	61 05       	cpc	r22, r1
   1cf80:	71 05       	cpc	r23, r1
   1cf82:	39 f4       	brne	.+14     	; 0x1cf92 <__ftoa_engine+0x28>
   1cf84:	32 60       	ori	r19, 0x02	; 2
   1cf86:	2e 5f       	subi	r18, 0xFE	; 254
   1cf88:	3d 93       	st	X+, r19
   1cf8a:	30 e3       	ldi	r19, 0x30	; 48
   1cf8c:	2a 95       	dec	r18
   1cf8e:	e1 f7       	brne	.-8      	; 0x1cf88 <__ftoa_engine+0x1e>
   1cf90:	08 95       	ret
   1cf92:	9f 3f       	cpi	r25, 0xFF	; 255
   1cf94:	30 f0       	brcs	.+12     	; 0x1cfa2 <__ftoa_engine+0x38>
   1cf96:	80 38       	cpi	r24, 0x80	; 128
   1cf98:	71 05       	cpc	r23, r1
   1cf9a:	61 05       	cpc	r22, r1
   1cf9c:	09 f0       	breq	.+2      	; 0x1cfa0 <__ftoa_engine+0x36>
   1cf9e:	3c 5f       	subi	r19, 0xFC	; 252
   1cfa0:	3c 5f       	subi	r19, 0xFC	; 252
   1cfa2:	3d 93       	st	X+, r19
   1cfa4:	91 30       	cpi	r25, 0x01	; 1
   1cfa6:	08 f0       	brcs	.+2      	; 0x1cfaa <__ftoa_engine+0x40>
   1cfa8:	80 68       	ori	r24, 0x80	; 128
   1cfaa:	91 1d       	adc	r25, r1
   1cfac:	df 93       	push	r29
   1cfae:	cf 93       	push	r28
   1cfb0:	1f 93       	push	r17
   1cfb2:	0f 93       	push	r16
   1cfb4:	ff 92       	push	r15
   1cfb6:	ef 92       	push	r14
   1cfb8:	19 2f       	mov	r17, r25
   1cfba:	98 7f       	andi	r25, 0xF8	; 248
   1cfbc:	96 95       	lsr	r25
   1cfbe:	e9 2f       	mov	r30, r25
   1cfc0:	96 95       	lsr	r25
   1cfc2:	96 95       	lsr	r25
   1cfc4:	e9 0f       	add	r30, r25
   1cfc6:	ff 27       	eor	r31, r31
   1cfc8:	e8 5c       	subi	r30, 0xC8	; 200
   1cfca:	fd 4f       	sbci	r31, 0xFD	; 253
   1cfcc:	99 27       	eor	r25, r25
   1cfce:	33 27       	eor	r19, r19
   1cfd0:	ee 24       	eor	r14, r14
   1cfd2:	ff 24       	eor	r15, r15
   1cfd4:	a7 01       	movw	r20, r14
   1cfd6:	e7 01       	movw	r28, r14
   1cfd8:	05 90       	lpm	r0, Z+
   1cfda:	08 94       	sec
   1cfdc:	07 94       	ror	r0
   1cfde:	28 f4       	brcc	.+10     	; 0x1cfea <__ftoa_engine+0x80>
   1cfe0:	36 0f       	add	r19, r22
   1cfe2:	e7 1e       	adc	r14, r23
   1cfe4:	f8 1e       	adc	r15, r24
   1cfe6:	49 1f       	adc	r20, r25
   1cfe8:	51 1d       	adc	r21, r1
   1cfea:	66 0f       	add	r22, r22
   1cfec:	77 1f       	adc	r23, r23
   1cfee:	88 1f       	adc	r24, r24
   1cff0:	99 1f       	adc	r25, r25
   1cff2:	06 94       	lsr	r0
   1cff4:	a1 f7       	brne	.-24     	; 0x1cfde <__ftoa_engine+0x74>
   1cff6:	05 90       	lpm	r0, Z+
   1cff8:	07 94       	ror	r0
   1cffa:	28 f4       	brcc	.+10     	; 0x1d006 <__ftoa_engine+0x9c>
   1cffc:	e7 0e       	add	r14, r23
   1cffe:	f8 1e       	adc	r15, r24
   1d000:	49 1f       	adc	r20, r25
   1d002:	56 1f       	adc	r21, r22
   1d004:	c1 1d       	adc	r28, r1
   1d006:	77 0f       	add	r23, r23
   1d008:	88 1f       	adc	r24, r24
   1d00a:	99 1f       	adc	r25, r25
   1d00c:	66 1f       	adc	r22, r22
   1d00e:	06 94       	lsr	r0
   1d010:	a1 f7       	brne	.-24     	; 0x1cffa <__ftoa_engine+0x90>
   1d012:	05 90       	lpm	r0, Z+
   1d014:	07 94       	ror	r0
   1d016:	28 f4       	brcc	.+10     	; 0x1d022 <__ftoa_engine+0xb8>
   1d018:	f8 0e       	add	r15, r24
   1d01a:	49 1f       	adc	r20, r25
   1d01c:	56 1f       	adc	r21, r22
   1d01e:	c7 1f       	adc	r28, r23
   1d020:	d1 1d       	adc	r29, r1
   1d022:	88 0f       	add	r24, r24
   1d024:	99 1f       	adc	r25, r25
   1d026:	66 1f       	adc	r22, r22
   1d028:	77 1f       	adc	r23, r23
   1d02a:	06 94       	lsr	r0
   1d02c:	a1 f7       	brne	.-24     	; 0x1d016 <__ftoa_engine+0xac>
   1d02e:	05 90       	lpm	r0, Z+
   1d030:	07 94       	ror	r0
   1d032:	20 f4       	brcc	.+8      	; 0x1d03c <__ftoa_engine+0xd2>
   1d034:	49 0f       	add	r20, r25
   1d036:	56 1f       	adc	r21, r22
   1d038:	c7 1f       	adc	r28, r23
   1d03a:	d8 1f       	adc	r29, r24
   1d03c:	99 0f       	add	r25, r25
   1d03e:	66 1f       	adc	r22, r22
   1d040:	77 1f       	adc	r23, r23
   1d042:	88 1f       	adc	r24, r24
   1d044:	06 94       	lsr	r0
   1d046:	a9 f7       	brne	.-22     	; 0x1d032 <__ftoa_engine+0xc8>
   1d048:	84 91       	lpm	r24, Z
   1d04a:	10 95       	com	r17
   1d04c:	17 70       	andi	r17, 0x07	; 7
   1d04e:	41 f0       	breq	.+16     	; 0x1d060 <__ftoa_engine+0xf6>
   1d050:	d6 95       	lsr	r29
   1d052:	c7 95       	ror	r28
   1d054:	57 95       	ror	r21
   1d056:	47 95       	ror	r20
   1d058:	f7 94       	ror	r15
   1d05a:	e7 94       	ror	r14
   1d05c:	1a 95       	dec	r17
   1d05e:	c1 f7       	brne	.-16     	; 0x1d050 <__ftoa_engine+0xe6>
   1d060:	ee ed       	ldi	r30, 0xDE	; 222
   1d062:	f1 e0       	ldi	r31, 0x01	; 1
   1d064:	68 94       	set
   1d066:	15 90       	lpm	r1, Z+
   1d068:	15 91       	lpm	r17, Z+
   1d06a:	35 91       	lpm	r19, Z+
   1d06c:	65 91       	lpm	r22, Z+
   1d06e:	95 91       	lpm	r25, Z+
   1d070:	05 90       	lpm	r0, Z+
   1d072:	7f e2       	ldi	r23, 0x2F	; 47
   1d074:	73 95       	inc	r23
   1d076:	e1 18       	sub	r14, r1
   1d078:	f1 0a       	sbc	r15, r17
   1d07a:	43 0b       	sbc	r20, r19
   1d07c:	56 0b       	sbc	r21, r22
   1d07e:	c9 0b       	sbc	r28, r25
   1d080:	d0 09       	sbc	r29, r0
   1d082:	c0 f7       	brcc	.-16     	; 0x1d074 <__ftoa_engine+0x10a>
   1d084:	e1 0c       	add	r14, r1
   1d086:	f1 1e       	adc	r15, r17
   1d088:	43 1f       	adc	r20, r19
   1d08a:	56 1f       	adc	r21, r22
   1d08c:	c9 1f       	adc	r28, r25
   1d08e:	d0 1d       	adc	r29, r0
   1d090:	7e f4       	brtc	.+30     	; 0x1d0b0 <__ftoa_engine+0x146>
   1d092:	70 33       	cpi	r23, 0x30	; 48
   1d094:	11 f4       	brne	.+4      	; 0x1d09a <__ftoa_engine+0x130>
   1d096:	8a 95       	dec	r24
   1d098:	e6 cf       	rjmp	.-52     	; 0x1d066 <__ftoa_engine+0xfc>
   1d09a:	e8 94       	clt
   1d09c:	01 50       	subi	r16, 0x01	; 1
   1d09e:	30 f0       	brcs	.+12     	; 0x1d0ac <__ftoa_engine+0x142>
   1d0a0:	08 0f       	add	r16, r24
   1d0a2:	0a f4       	brpl	.+2      	; 0x1d0a6 <__ftoa_engine+0x13c>
   1d0a4:	00 27       	eor	r16, r16
   1d0a6:	02 17       	cp	r16, r18
   1d0a8:	08 f4       	brcc	.+2      	; 0x1d0ac <__ftoa_engine+0x142>
   1d0aa:	20 2f       	mov	r18, r16
   1d0ac:	23 95       	inc	r18
   1d0ae:	02 2f       	mov	r16, r18
   1d0b0:	7a 33       	cpi	r23, 0x3A	; 58
   1d0b2:	28 f0       	brcs	.+10     	; 0x1d0be <__ftoa_engine+0x154>
   1d0b4:	79 e3       	ldi	r23, 0x39	; 57
   1d0b6:	7d 93       	st	X+, r23
   1d0b8:	2a 95       	dec	r18
   1d0ba:	e9 f7       	brne	.-6      	; 0x1d0b6 <__ftoa_engine+0x14c>
   1d0bc:	10 c0       	rjmp	.+32     	; 0x1d0de <__ftoa_engine+0x174>
   1d0be:	7d 93       	st	X+, r23
   1d0c0:	2a 95       	dec	r18
   1d0c2:	89 f6       	brne	.-94     	; 0x1d066 <__ftoa_engine+0xfc>
   1d0c4:	06 94       	lsr	r0
   1d0c6:	97 95       	ror	r25
   1d0c8:	67 95       	ror	r22
   1d0ca:	37 95       	ror	r19
   1d0cc:	17 95       	ror	r17
   1d0ce:	17 94       	ror	r1
   1d0d0:	e1 18       	sub	r14, r1
   1d0d2:	f1 0a       	sbc	r15, r17
   1d0d4:	43 0b       	sbc	r20, r19
   1d0d6:	56 0b       	sbc	r21, r22
   1d0d8:	c9 0b       	sbc	r28, r25
   1d0da:	d0 09       	sbc	r29, r0
   1d0dc:	98 f0       	brcs	.+38     	; 0x1d104 <__ftoa_engine+0x19a>
   1d0de:	23 95       	inc	r18
   1d0e0:	7e 91       	ld	r23, -X
   1d0e2:	73 95       	inc	r23
   1d0e4:	7a 33       	cpi	r23, 0x3A	; 58
   1d0e6:	08 f0       	brcs	.+2      	; 0x1d0ea <__ftoa_engine+0x180>
   1d0e8:	70 e3       	ldi	r23, 0x30	; 48
   1d0ea:	7c 93       	st	X, r23
   1d0ec:	20 13       	cpse	r18, r16
   1d0ee:	b8 f7       	brcc	.-18     	; 0x1d0de <__ftoa_engine+0x174>
   1d0f0:	7e 91       	ld	r23, -X
   1d0f2:	70 61       	ori	r23, 0x10	; 16
   1d0f4:	7d 93       	st	X+, r23
   1d0f6:	30 f0       	brcs	.+12     	; 0x1d104 <__ftoa_engine+0x19a>
   1d0f8:	83 95       	inc	r24
   1d0fa:	71 e3       	ldi	r23, 0x31	; 49
   1d0fc:	7d 93       	st	X+, r23
   1d0fe:	70 e3       	ldi	r23, 0x30	; 48
   1d100:	2a 95       	dec	r18
   1d102:	e1 f7       	brne	.-8      	; 0x1d0fc <__ftoa_engine+0x192>
   1d104:	11 24       	eor	r1, r1
   1d106:	ef 90       	pop	r14
   1d108:	ff 90       	pop	r15
   1d10a:	0f 91       	pop	r16
   1d10c:	1f 91       	pop	r17
   1d10e:	cf 91       	pop	r28
   1d110:	df 91       	pop	r29
   1d112:	99 27       	eor	r25, r25
   1d114:	87 fd       	sbrc	r24, 7
   1d116:	90 95       	com	r25
   1d118:	08 95       	ret

0001d11a <strnlen_P>:
   1d11a:	fc 01       	movw	r30, r24
   1d11c:	05 90       	lpm	r0, Z+
   1d11e:	61 50       	subi	r22, 0x01	; 1
   1d120:	70 40       	sbci	r23, 0x00	; 0
   1d122:	01 10       	cpse	r0, r1
   1d124:	d8 f7       	brcc	.-10     	; 0x1d11c <strnlen_P+0x2>
   1d126:	80 95       	com	r24
   1d128:	90 95       	com	r25
   1d12a:	8e 0f       	add	r24, r30
   1d12c:	9f 1f       	adc	r25, r31
   1d12e:	08 95       	ret

0001d130 <memset>:
   1d130:	dc 01       	movw	r26, r24
   1d132:	01 c0       	rjmp	.+2      	; 0x1d136 <memset+0x6>
   1d134:	6d 93       	st	X+, r22
   1d136:	41 50       	subi	r20, 0x01	; 1
   1d138:	50 40       	sbci	r21, 0x00	; 0
   1d13a:	e0 f7       	brcc	.-8      	; 0x1d134 <memset+0x4>
   1d13c:	08 95       	ret

0001d13e <strnlen>:
   1d13e:	fc 01       	movw	r30, r24
   1d140:	61 50       	subi	r22, 0x01	; 1
   1d142:	70 40       	sbci	r23, 0x00	; 0
   1d144:	01 90       	ld	r0, Z+
   1d146:	01 10       	cpse	r0, r1
   1d148:	d8 f7       	brcc	.-10     	; 0x1d140 <strnlen+0x2>
   1d14a:	80 95       	com	r24
   1d14c:	90 95       	com	r25
   1d14e:	8e 0f       	add	r24, r30
   1d150:	9f 1f       	adc	r25, r31
   1d152:	08 95       	ret

0001d154 <__ultoa_invert>:
   1d154:	fa 01       	movw	r30, r20
   1d156:	aa 27       	eor	r26, r26
   1d158:	28 30       	cpi	r18, 0x08	; 8
   1d15a:	51 f1       	breq	.+84     	; 0x1d1b0 <__ultoa_invert+0x5c>
   1d15c:	20 31       	cpi	r18, 0x10	; 16
   1d15e:	81 f1       	breq	.+96     	; 0x1d1c0 <__ultoa_invert+0x6c>
   1d160:	e8 94       	clt
   1d162:	6f 93       	push	r22
   1d164:	6e 7f       	andi	r22, 0xFE	; 254
   1d166:	6e 5f       	subi	r22, 0xFE	; 254
   1d168:	7f 4f       	sbci	r23, 0xFF	; 255
   1d16a:	8f 4f       	sbci	r24, 0xFF	; 255
   1d16c:	9f 4f       	sbci	r25, 0xFF	; 255
   1d16e:	af 4f       	sbci	r26, 0xFF	; 255
   1d170:	b1 e0       	ldi	r27, 0x01	; 1
   1d172:	3e d0       	rcall	.+124    	; 0x1d1f0 <__ultoa_invert+0x9c>
   1d174:	b4 e0       	ldi	r27, 0x04	; 4
   1d176:	3c d0       	rcall	.+120    	; 0x1d1f0 <__ultoa_invert+0x9c>
   1d178:	67 0f       	add	r22, r23
   1d17a:	78 1f       	adc	r23, r24
   1d17c:	89 1f       	adc	r24, r25
   1d17e:	9a 1f       	adc	r25, r26
   1d180:	a1 1d       	adc	r26, r1
   1d182:	68 0f       	add	r22, r24
   1d184:	79 1f       	adc	r23, r25
   1d186:	8a 1f       	adc	r24, r26
   1d188:	91 1d       	adc	r25, r1
   1d18a:	a1 1d       	adc	r26, r1
   1d18c:	6a 0f       	add	r22, r26
   1d18e:	71 1d       	adc	r23, r1
   1d190:	81 1d       	adc	r24, r1
   1d192:	91 1d       	adc	r25, r1
   1d194:	a1 1d       	adc	r26, r1
   1d196:	20 d0       	rcall	.+64     	; 0x1d1d8 <__ultoa_invert+0x84>
   1d198:	09 f4       	brne	.+2      	; 0x1d19c <__ultoa_invert+0x48>
   1d19a:	68 94       	set
   1d19c:	3f 91       	pop	r19
   1d19e:	2a e0       	ldi	r18, 0x0A	; 10
   1d1a0:	26 9f       	mul	r18, r22
   1d1a2:	11 24       	eor	r1, r1
   1d1a4:	30 19       	sub	r19, r0
   1d1a6:	30 5d       	subi	r19, 0xD0	; 208
   1d1a8:	31 93       	st	Z+, r19
   1d1aa:	de f6       	brtc	.-74     	; 0x1d162 <__ultoa_invert+0xe>
   1d1ac:	cf 01       	movw	r24, r30
   1d1ae:	08 95       	ret
   1d1b0:	46 2f       	mov	r20, r22
   1d1b2:	47 70       	andi	r20, 0x07	; 7
   1d1b4:	40 5d       	subi	r20, 0xD0	; 208
   1d1b6:	41 93       	st	Z+, r20
   1d1b8:	b3 e0       	ldi	r27, 0x03	; 3
   1d1ba:	0f d0       	rcall	.+30     	; 0x1d1da <__ultoa_invert+0x86>
   1d1bc:	c9 f7       	brne	.-14     	; 0x1d1b0 <__ultoa_invert+0x5c>
   1d1be:	f6 cf       	rjmp	.-20     	; 0x1d1ac <__ultoa_invert+0x58>
   1d1c0:	46 2f       	mov	r20, r22
   1d1c2:	4f 70       	andi	r20, 0x0F	; 15
   1d1c4:	40 5d       	subi	r20, 0xD0	; 208
   1d1c6:	4a 33       	cpi	r20, 0x3A	; 58
   1d1c8:	18 f0       	brcs	.+6      	; 0x1d1d0 <__ultoa_invert+0x7c>
   1d1ca:	49 5d       	subi	r20, 0xD9	; 217
   1d1cc:	31 fd       	sbrc	r19, 1
   1d1ce:	40 52       	subi	r20, 0x20	; 32
   1d1d0:	41 93       	st	Z+, r20
   1d1d2:	02 d0       	rcall	.+4      	; 0x1d1d8 <__ultoa_invert+0x84>
   1d1d4:	a9 f7       	brne	.-22     	; 0x1d1c0 <__ultoa_invert+0x6c>
   1d1d6:	ea cf       	rjmp	.-44     	; 0x1d1ac <__ultoa_invert+0x58>
   1d1d8:	b4 e0       	ldi	r27, 0x04	; 4
   1d1da:	a6 95       	lsr	r26
   1d1dc:	97 95       	ror	r25
   1d1de:	87 95       	ror	r24
   1d1e0:	77 95       	ror	r23
   1d1e2:	67 95       	ror	r22
   1d1e4:	ba 95       	dec	r27
   1d1e6:	c9 f7       	brne	.-14     	; 0x1d1da <__ultoa_invert+0x86>
   1d1e8:	00 97       	sbiw	r24, 0x00	; 0
   1d1ea:	61 05       	cpc	r22, r1
   1d1ec:	71 05       	cpc	r23, r1
   1d1ee:	08 95       	ret
   1d1f0:	9b 01       	movw	r18, r22
   1d1f2:	ac 01       	movw	r20, r24
   1d1f4:	0a 2e       	mov	r0, r26
   1d1f6:	06 94       	lsr	r0
   1d1f8:	57 95       	ror	r21
   1d1fa:	47 95       	ror	r20
   1d1fc:	37 95       	ror	r19
   1d1fe:	27 95       	ror	r18
   1d200:	ba 95       	dec	r27
   1d202:	c9 f7       	brne	.-14     	; 0x1d1f6 <__ultoa_invert+0xa2>
   1d204:	62 0f       	add	r22, r18
   1d206:	73 1f       	adc	r23, r19
   1d208:	84 1f       	adc	r24, r20
   1d20a:	95 1f       	adc	r25, r21
   1d20c:	a0 1d       	adc	r26, r0
   1d20e:	08 95       	ret

0001d210 <_exit>:
   1d210:	f8 94       	cli

0001d212 <__stop_program>:
   1d212:	ff cf       	rjmp	.-2      	; 0x1d212 <__stop_program>
